
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000416  00800100  0000998a  00009a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000998a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033f  00800516  00800516  00009e34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00009e34  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000680  00000000  00000000  00009e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001480f  00000000  00000000  0000a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003623  00000000  00000000  0001ecf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000411f  00000000  00000000  0002231a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001494  00000000  00000000  0002643c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000028c7  00000000  00000000  000278d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000937d  00000000  00000000  0002a197  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000550  00000000  00000000  00033514  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__ctors_end>
       4:	0c 94 5a 2d 	jmp	0x5ab4	; 0x5ab4 <__vector_1>
       8:	0c 94 22 2d 	jmp	0x5a44	; 0x5a44 <__vector_2>
       c:	0c 94 0d 2e 	jmp	0x5c1a	; 0x5c1a <__vector_3>
      10:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      14:	0c 94 cc 2d 	jmp	0x5b98	; 0x5b98 <__vector_5>
      18:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      1c:	0c 94 93 2d 	jmp	0x5b26	; 0x5b26 <__vector_7>
      20:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      24:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      28:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      2c:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      30:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      34:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      38:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      3c:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      40:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      44:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      48:	0c 94 0b 2d 	jmp	0x5a16	; 0x5a16 <__vector_18>
      4c:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      50:	0c 94 c9 2e 	jmp	0x5d92	; 0x5d92 <__vector_20>
      54:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      58:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      5c:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      60:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      64:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      68:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      6c:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      70:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      74:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      78:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__bad_interrupt>
      7c:	95 1c       	adc	r9, r5
      7e:	05 1d       	adc	r16, r5
      80:	05 1d       	adc	r16, r5
      82:	a6 1c       	adc	r10, r6
      84:	b3 1c       	adc	r11, r3
      86:	bd 1c       	adc	r11, r13
      88:	b9 1c       	adc	r11, r9
      8a:	c9 1c       	adc	r12, r9
      8c:	d5 1c       	adc	r13, r5
      8e:	d9 1c       	adc	r13, r9
      90:	e5 1c       	adc	r14, r5
      92:	02 36       	cpi	r16, 0x62	; 98
      94:	04 36       	cpi	r16, 0x64	; 100
      96:	07 36       	cpi	r16, 0x67	; 103
      98:	09 36       	cpi	r16, 0x69	; 105
      9a:	0b 36       	cpi	r16, 0x6B	; 107
      9c:	0d 36       	cpi	r16, 0x6D	; 109
      9e:	0f 36       	cpi	r16, 0x6F	; 111
      a0:	11 36       	cpi	r17, 0x61	; 97
      a2:	14 36       	cpi	r17, 0x64	; 100
      a4:	16 36       	cpi	r17, 0x66	; 102
      a6:	18 36       	cpi	r17, 0x68	; 104
      a8:	1a 36       	cpi	r17, 0x6A	; 106
      aa:	1c 36       	cpi	r17, 0x6C	; 108
      ac:	1e 36       	cpi	r17, 0x6E	; 110
      ae:	20 36       	cpi	r18, 0x60	; 96
      b0:	22 36       	cpi	r18, 0x62	; 98
      b2:	25 36       	cpi	r18, 0x65	; 101
      b4:	27 36       	cpi	r18, 0x67	; 103
      b6:	29 36       	cpi	r18, 0x69	; 105
      b8:	fa 39       	cpi	r31, 0x9A	; 154
      ba:	de 39       	cpi	r29, 0x9E	; 158
      bc:	e1 39       	cpi	r30, 0x91	; 145
      be:	e4 39       	cpi	r30, 0x94	; 148
      c0:	e7 39       	cpi	r30, 0x97	; 151
      c2:	ea 39       	cpi	r30, 0x9A	; 154
      c4:	ed 39       	cpi	r30, 0x9D	; 157
      c6:	f0 39       	cpi	r31, 0x90	; 144
      c8:	f3 39       	cpi	r31, 0x93	; 147

000000ca <Acc_Pol>:
      ca:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      da:	ff ff                                               ..

000000dc <ACC_RPY_Order>:
      dc:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      ec:	02 01                                               ..

000000ee <FUTABA>:
      ee:	01 02 00 03 04 05 06 07                             ........

000000f6 <JR>:
      f6:	00 01 02 03 04 05 06 07                             ........

000000fe <Trans_Matrix>:
      fe:	05 02 06 01 05 08 03 07 05                          .........

00000107 <Wingdings>:
     107:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     117:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     127:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     137:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     147:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     157:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     167:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000171 <Verdana14>:
     171:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     181:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     191:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     1a1:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     1b1:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1c1:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1d1:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1e1:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1f1:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     201:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     211:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     221:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     231:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     241:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     251:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     261:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     271:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     281:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     291:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     2a1:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     2b1:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2c1:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2d1:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2e1:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2f1:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     301:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     311:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     321:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     331:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     341:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     351:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     361:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     371:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     381:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     391:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     3a1:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     3b1:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3c1:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3d1:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3e1:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3f1:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     401:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     411:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     421:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     431:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     441:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     451:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     461:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     471:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     481:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     491:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     4a1:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     4b1:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4c1:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4d1:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4e1:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4f1:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     501:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     511:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     521:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     531:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     541:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     551:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     561:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     571:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     581:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     591:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     5a1:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     5b1:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5c1:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5d1:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5e1:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5f1:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     601:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     611:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     621:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     631:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     641:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     651:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     661:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     671:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     681:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     691:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     6a1:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     6b1:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6c1:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6d1:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6e1:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6f1:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     701:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     711:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     721:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     731:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     741:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     751:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     761:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     771:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     781:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     791:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     7a1:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     7b1:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7c1:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7d1:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7e1:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7f1:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     801:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     811:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     821:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     831:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     841:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     851:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     861:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     871:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     881:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     891:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     8a1:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     8b1:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8c1:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8d1:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8e1:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8f1:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     901:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     911:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     921:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     931:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     941:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     951:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     961:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     971:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     981:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     991:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     9a1:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     9b1:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9c1:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9d1:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9e1:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9f1:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     a01:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     a11:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a1f <Verdana8>:
     a1f:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a2f:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a3f:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a4f:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a5f:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a6f:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a7f:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a8f:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a9f:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     aaf:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     abf:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     acf:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     adf:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     aef:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     aff:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     b0f:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b1f:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b2f:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b3f:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b4f:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b5f:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b6f:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b7f:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b8f:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b9f:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     baf:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bbf:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bcf:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bdf:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bef:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bff:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     c0f:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c1f:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c2f:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c3f:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c4f:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c5f:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c6f:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c7f:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c8f:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c9f:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     caf:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cbf:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     ccf:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     cdf:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cef:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     cff:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     d0f:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d1f:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d2f:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d3f:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d4f:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d5f:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d6f:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d7f:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d8f:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d9f:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     daf:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dbf:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dcf:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     ddf:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     def:	01                                                  .

00000df0 <lcd_commmands>:
     df0:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dfe <pagemap>:
     dfe:	07 06 05 04 03 02 01 00                             ........

00000e06 <text_menu>:
     e06:	6e 15 66 10 61 10 5c 10 57 10 52 10 4d 10 48 10     n.f.a.\.W.R.M.H.
     e16:	43 10 c7 17 bf 17 c5 17 c3 17 c1 17 ba 17 b5 17     C...............
     e26:	b0 17 ab 17 e1 11 01 12 fc 11 f6 11 33 15 d1 17     ............3...
     e36:	c9 17 3d 16 5a 16 55 16 4f 16 4b 16 47 16 6b 10     ..=.Z.U.O.K.G.k.
     e46:	47 12 3e 12 4f 12 37 12 32 12 8c 10 87 10 82 10     G.>.O.7.2.......
     e56:	7d 10 78 10 72 10 6c 10 1e 12 6b 10 7b 12 73 12     }.x.r.l...k.{.s.
     e66:	8a 14 85 14 82 14 78 14 6e 14 ce 10 c6 10 c1 10     ......x.n.......
     e76:	66 12 61 12 58 12 b7 11 42 16 ab 11 22 15 1e 15     f.a.X...B..."...
     e86:	18 15 0f 15 08 15 6b 10 6e 15 6b 15 e6 10 ed 10     ......k.n.k.....
     e96:	dc 10 6b 10 6b 10 0e 12 07 12 a0 17 8e 17 7b 17     ..k.k.........{.
     ea6:	69 17 53 17 44 17 30 17 1c 17 0e 17 ff 16 f0 16     i.S.D.0.........
     eb6:	e1 16 d2 16 c3 16 b4 16 a5 16 91 16 78 16 5f 16     ............x._.
     ec6:	6b 10 6b 10 8c 10 87 10 9d 10 a2 10 a7 10 ac 10     k.k.............
     ed6:	1e 12 4f 12 47 12 3e 12 37 12 32 12 2d 12 28 12     ..O.G.>.7.2.-.(.
     ee6:	23 12 1e 12 17 12 11 12 ff 14 f8 14 ea 11 d4 10     #...............
     ef6:	c1 10 73 11 67 11 6b 10 24 11 1b 11 12 11 0e 11     ..s.g.k.$.......
     f06:	05 11 fd 10 6b 10 6b 10 6b 10 d6 17 ee 11 8c 11     ....k.k.k.......
     f16:	7e 11 79 11 5f 11 54 11 6b 10 f6 10 ed 10 3c 10     ~.y._.T.k.....<.
     f26:	35 10 2e 10 55 16 4f 16 4b 16 62 15 c2 14 58 15     5...U.O.K.b...X.
     f36:	4d 15 3e 15 33 15 27 15 6b 10 6b 10 eb 14 e1 14     M.>.3.'.k.k.....
     f46:	d9 14 cc 14 95 14 90 10 b8 14 ae 14 a2 14 8d 14     ................
     f56:	6b 10 6b 10 29 16 21 16 13 16 06 16 f8 15 ed 15     k.k.).!.........
     f66:	e4 15 db 15 cc 15 be 15 af 15 a3 15 9c 15 95 15     ................
     f76:	88 15 7c 15 72 15 31 16 6b 10 6b 10 66 14 5b 14     ..|.r.1.k.k.f.[.
     f86:	4a 14 3d 14 32 14 22 14 12 14 03 14 f3 13 e3 13     J.=.2.".........
     f96:	d3 13 c3 13 b3 13 a3 13 95 13 87 13 78 13 69 13     ............x.i.
     fa6:	5c 13 4f 13 43 13 37 13 2b 13 1e 13 14 13 0a 13     \.O.C.7.+.......
     fb6:	fd 12 f2 12 e5 12 da 12 cd 12 f2 12 c0 12 da 12     ................
     fc6:	6b 10 6b 10 7b 12 73 12 6d 12 6b 10 4f 11 4a 11     k.k.{.s.m.k.O.J.
     fd6:	45 11 40 11 3b 11 36 11 31 11 2c 11 4f 12 47 12     E.@.;.6.1.,.O.G.
     fe6:	3e 12 37 12 32 12 2d 12 28 12 23 12 b7 12 ad 12     >.7.2.-.(.#.....
     ff6:	a5 12 9d 12 94 12 8c 12 83 12 1e 12 7b 12 73 12     ............{.s.
    1006:	6d 12 6b 10 6b 10 a2 11 99 11 d7 11 d1 11 c5 11     m.k.k...........
    1016:	f2 17 ec 17 62 15 e3 17 e1 17 df 17 bc 10 b8 10     ....b...........
    1026:	b1 10 3c 10 35 10 2e 10                             ..<.5...

0000102e <PRESET_2>:
    102e:	51 75 61 64 20 50 00                                Quad P.

00001035 <PRESET_1>:
    1035:	51 75 61 64 20 58 00                                Quad X.

0000103c <PRESET_0>:
    103c:	4d 61 6e 75 61 6c 00                                Manual.

00001043 <VBAT39>:
    1043:	33 2e 39 56 00                                      3.9V.

00001048 <VBAT38>:
    1048:	33 2e 38 56 00                                      3.8V.

0000104d <VBAT37>:
    104d:	33 2e 37 56 00                                      3.7V.

00001052 <VBAT36>:
    1052:	33 2e 36 56 00                                      3.6V.

00001057 <VBAT35>:
    1057:	33 2e 35 56 00                                      3.5V.

0000105c <VBAT34>:
    105c:	33 2e 34 56 00                                      3.4V.

00001061 <VBAT33>:
    1061:	33 2e 33 56 00                                      3.3V.

00001066 <VBAT32>:
    1066:	33 2e 32 56 00                                      3.2V.

0000106b <Dummy0>:
	...

0000106c <MPU6050LPF7>:
    106c:	32 36 30 48 7a 00                                   260Hz.

00001072 <MPU6050LPF6>:
    1072:	31 38 34 48 7a 00                                   184Hz.

00001078 <MPU6050LPF5>:
    1078:	39 34 48 7a 00                                      94Hz.

0000107d <MPU6050LPF4>:
    107d:	34 34 48 7a 00                                      44Hz.

00001082 <MPU6050LPF3>:
    1082:	32 31 48 7a 00                                      21Hz.

00001087 <MPU6050LPF2>:
    1087:	31 30 48 7a 00                                      10Hz.

0000108c <MPU6050LPF1>:
    108c:	35 48 7a 00                                         5Hz.

00001090 <GeneralText10>:
    1090:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

0000109d <SWLPF4>:
    109d:	31 37 48 7a 00                                      17Hz.

000010a2 <SWLPF3>:
    10a2:	32 37 48 7a 00                                      27Hz.

000010a7 <SWLPF2>:
    10a7:	33 38 48 7a 00                                      38Hz.

000010ac <SWLPF1>:
    10ac:	36 37 48 7a 00                                      67Hz.

000010b1 <Random12>:
    10b1:	73 69 67 6e 61 6c 00                                signal.

000010b8 <Random11>:
    10b8:	6c 6f 77 00                                         low.

000010bc <Random10>:
    10bc:	68 69 67 68 00                                      high.

000010c1 <Random1>:
    10c1:	48 69 67 68 00                                      High.

000010c6 <Safety2>:
    10c6:	41 72 6d 61 62 6c 65 00                             Armable.

000010ce <Safety1>:
    10ce:	41 72 6d 65 64 00                                   Armed.

000010d4 <GeneralText5>:
    10d4:	53 79 6e 63 20 52 43 00                             Sync RC.

000010dc <MixerItem16>:
    10dc:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

000010e6 <MixerItem15>:
    10e6:	53 63 61 6c 65 64 00                                Scaled.

000010ed <MixerItem12>:
    10ed:	52 65 76 65 72 73 65 64 00                          Reversed.

000010f6 <MixerItem11>:
    10f6:	4e 6f 72 6d 61 6c 00                                Normal.

000010fd <MixerMenuItem7>:
    10fd:	50 69 74 63 68 55 70 00                             PitchUp.

00001105 <MixerMenuItem6>:
    1105:	53 69 64 65 77 61 79 73 00                          Sideways.

0000110e <MixerMenuItem5>:
    110e:	41 66 74 00                                         Aft.

00001112 <MixerMenuItem4>:
    1112:	49 6e 76 65 72 74 65 64 00                          Inverted.

0000111b <MixerMenuItem3>:
    111b:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001124 <MixerMenuItem2>:
    1124:	46 6f 72 77 61 72 64 00                             Forward.

0000112c <MOUT8>:
    112c:	4f 55 54 38 00                                      OUT8.

00001131 <MOUT7>:
    1131:	4f 55 54 37 00                                      OUT7.

00001136 <MOUT6>:
    1136:	4f 55 54 36 00                                      OUT6.

0000113b <MOUT5>:
    113b:	4f 55 54 35 00                                      OUT5.

00001140 <MOUT4>:
    1140:	4f 55 54 34 00                                      OUT4.

00001145 <MOUT3>:
    1145:	4f 55 54 33 00                                      OUT3.

0000114a <MOUT2>:
    114a:	4f 55 54 32 00                                      OUT2.

0000114f <MOUT1>:
    114f:	4f 55 54 31 00                                      OUT1.

00001154 <Status5>:
    1154:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

0000115f <Status4>:
    115f:	28 41 72 6d 65 64 29 00                             (Armed).

00001167 <Status2>:
    1167:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

00001173 <Status0>:
    1173:	50 72 65 73 73 00                                   Press.

00001179 <WizardText2>:
    1179:	44 6f 6e 65 00                                      Done.

0000117e <WizardText1>:
    117e:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

0000118c <WizardText0>:
    118c:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

00001199 <PText6>:
    1199:	73 65 74 74 69 6e 67 73 00                          settings.

000011a2 <PText5>:
    11a2:	55 70 64 61 74 69 6e 67 00                          Updating.

000011ab <PText4>:
    11ab:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

000011b7 <PText3>:
    11b7:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

000011c5 <PText2>:
    11c5:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

000011d1 <PText1>:
    11d1:	52 65 73 65 74 00                                   Reset.

000011d7 <PText0>:
    11d7:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

000011e1 <Disarmed>:
    11e1:	44 69 73 61 72 6d 65 64 00                          Disarmed.

000011ea <ErrorText10>:
    11ea:	4c 6f 77 00                                         Low.

000011ee <Status3>:
    11ee:	42 61 74 74 65 72 79 00                             Battery.

000011f6 <ErrorText7>:
    11f6:	4d 6f 64 65 6c 00                                   Model.

000011fc <ErrorText6>:
    11fc:	4c 6f 73 74 00                                      Lost.

00001201 <ErrorText5>:
    1201:	45 72 72 6f 72 00                                   Error.

00001207 <ErrorText4>:
    1207:	53 69 67 6e 61 6c 00                                Signal.

0000120e <ErrorText3>:
    120e:	4e 6f 00                                            No.

00001211 <ChannelRef12>:
    1211:	45 6c 65 76 2e 00                                   Elev..

00001217 <ChannelRef10>:
    1217:	54 68 72 6f 74 2e 00                                Throt..

0000121e <ChannelRef8>:
    121e:	4e 6f 6e 65 00                                      None.

00001223 <ChannelRef7>:
    1223:	41 55 58 33 00                                      AUX3.

00001228 <ChannelRef6>:
    1228:	41 55 58 32 00                                      AUX2.

0000122d <ChannelRef5>:
    122d:	41 55 58 31 00                                      AUX1.

00001232 <ChannelRef4>:
    1232:	47 65 61 72 00                                      Gear.

00001237 <ChannelRef3>:
    1237:	52 75 64 64 65 72 00                                Rudder.

0000123e <ChannelRef2>:
    123e:	45 6c 65 76 61 74 6f 72 00                          Elevator.

00001247 <ChannelRef1>:
    1247:	41 69 6c 65 72 6f 6e 00                             Aileron.

0000124f <ChannelRef0>:
    124f:	54 68 72 6f 74 74 6c 65 00                          Throttle.

00001258 <MixerItem62>:
    1258:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

00001261 <MixerItem61>:
    1261:	53 69 6e 65 00                                      Sine.

00001266 <MixerItem60>:
    1266:	4c 69 6e 65 61 72 00                                Linear.

0000126d <MixerItem49>:
    126d:	4d 6f 74 6f 72 00                                   Motor.

00001273 <MixerItem41>:
    1273:	44 2e 53 65 72 76 6f 00                             D.Servo.

0000127b <MixerItem40>:
    127b:	41 2e 53 65 72 76 6f 00                             A.Servo.

00001283 <MixerItem81>:
    1283:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

0000128c <MixerItem80>:
    128c:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

00001294 <MixerItem74>:
    1294:	41 63 63 50 69 74 63 68 00                          AccPitch.

0000129d <MixerItem73>:
    129d:	41 63 63 52 6f 6c 6c 00                             AccRoll.

000012a5 <MixerItem72>:
    12a5:	47 79 72 6f 59 61 77 00                             GyroYaw.

000012ad <MixerItem71>:
    12ad:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000012b7 <MixerItem70>:
    12b7:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

000012c0 <MixerItem31>:
    12c0:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

000012cd <MixerItem21>:
    12cd:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

000012da <MixerItem30>:
    12da:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

000012e5 <MixerItem29>:
    12e5:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

000012f2 <MixerItem2>:
    12f2:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

000012fd <MixerItem0>:
    12fd:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

0000130a <MixerItem43>:
    130a:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

00001314 <MixerItem42>:
    1314:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

0000131e <MixerItem28>:
    131e:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

0000132b <MixerItem3>:
    132b:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

00001337 <MixerItem27>:
    1337:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

00001343 <MixerItem7>:
    1343:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

0000134f <MixerItem26>:
    134f:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

0000135c <MixerItem6>:
    135c:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

00001369 <MixerItem25>:
    1369:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

00001378 <MixerItem5>:
    1378:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

00001387 <MixerItem24>:
    1387:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

00001395 <MixerItem4>:
    1395:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

000013a3 <MixerItem56>:
    13a3:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

000013b3 <MixerItem53>:
    13b3:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

000013c3 <MixerItem55>:
    13c3:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

000013d3 <MixerItem52>:
    13d3:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

000013e3 <MixerItem54>:
    13e3:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

000013f3 <MixerItem51>:
    13f3:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

00001403 <Mixeritem50>:
    1403:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

00001412 <MixerItem33>:
    1412:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

00001422 <MixerItem23>:
    1422:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

00001432 <MixerItem34>:
    1432:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

0000143d <MixerItem35>:
    143d:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

0000144a <MixerItem36>:
    144a:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

0000145b <MixerItem20>:
    145b:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

00001466 <MixerItem1>:
    1466:	44 65 76 69 63 65 3a 00                             Device:.

0000146e <P5text>:
    146e:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

00001478 <P4text>:
    1478:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

00001482 <P3text>:
    1482:	50 32 00                                            P2.

00001485 <P2text>:
    1485:	50 31 2e 6e 00                                      P1.n.

0000148a <P1text>:
    148a:	50 31 00                                            P1.

0000148d <GeneralText20>:
    148d:	50 72 65 73 65 74 3a 00                             Preset:.

00001495 <BattMenuItem2>:
    1495:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

000014a2 <GeneralText7>:
    14a2:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

000014ae <GeneralText16>:
    14ae:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

000014b8 <GeneralText6>:
    14b8:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

000014c2 <GeneralText3>:
    14c2:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

000014cc <GeneralText2>:
    14cc:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

000014d9 <AutoMenuItem2>:
    14d9:	53 61 66 65 74 79 3a 00                             Safety:.

000014e1 <Contrast>:
    14e1:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

000014eb <MixerMenuItem0>:
    14eb:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

000014f8 <RCMenuItem7>:
    14f8:	46 75 74 61 62 61 00                                Futaba.

000014ff <RCMenuItem6>:
    14ff:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

00001508 <RXMode4>:
    1508:	58 74 72 65 6d 65 00                                Xtreme.

0000150f <RXMode3>:
    150f:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

00001518 <RXMode2>:
    1518:	53 2d 42 75 73 00                                   S-Bus.

0000151e <RXMode1>:
    151e:	50 57 4d 00                                         PWM.

00001522 <RXMode0>:
    1522:	43 50 50 4d 00                                      CPPM.

00001527 <Transition_P1n>:
    1527:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

00001533 <Transition>:
    1533:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

0000153e <RCMenuItem2>:
    153e:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

0000154d <RCMenuItem0>:
    154d:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

00001558 <RCMenuItem20>:
    1558:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

00001562 <RCMenuItem1>:
    1562:	52 58 20 74 79 70 65 3a 00                          RX type:.

0000156b <AutoMenuItem15>:
    156b:	4f 4e 00                                            ON.

0000156e <AutoMenuItem11>:
    156e:	4f 46 46 00                                         OFF.

00001572 <StabMenuItem30>:
    1572:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

0000157c <StabMenuItem9>:
    157c:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

00001588 <StabMenuItem12>:
    1588:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

00001595 <StabMenuItem8>:
    1595:	59 61 77 20 49 3a 00                                Yaw I:.

0000159c <StabMenuItem7>:
    159c:	59 61 77 20 50 3a 00                                Yaw P:.

000015a3 <AutoMenuItem8>:
    15a3:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

000015af <AutoMenuItem21>:
    15af:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

000015be <StabMenuItem6>:
    15be:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

000015cc <StabMenuItem11>:
    15cc:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

000015db <StabMenuItem5>:
    15db:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

000015e4 <AutoMenuItem4>:
    15e4:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

000015ed <AutoMenuItem7>:
    15ed:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

000015f8 <AutoMenuItem20>:
    15f8:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

00001606 <StabMenuItem3>:
    1606:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

00001613 <StabMenuItem10>:
    1613:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001621 <StabMenuItem2>:
    1621:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

00001629 <AutoMenuItem1>:
    1629:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

00001631 <StabMenuItem13>:
    1631:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

0000163d <SensorMenuItem2>:
    163d:	49 6e 76 2e 00                                      Inv..

00001642 <SensorMenuItem1>:
    1642:	43 61 6c 2e 00                                      Cal..

00001647 <PText19>:
    1647:	41 63 63 00                                         Acc.

0000164b <PText18>:
    164b:	59 61 77 00                                         Yaw.

0000164f <PText17>:
    164f:	50 69 74 63 68 00                                   Pitch.

00001655 <PText16>:
    1655:	52 6f 6c 6c 00                                      Roll.

0000165a <PText15>:
    165a:	47 79 72 6f 00                                      Gyro.

0000165f <MainMenuItem23>:
    165f:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    166f:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001678 <MainMenuItem22>:
    1678:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    1688:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001691 <MainMenuItem20>:
    1691:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    16a1:	69 6f 6e 00                                         ion.

000016a5 <MainMenuItem18>:
    16a5:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

000016b4 <MainMenuItem17>:
    16b4:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

000016c3 <MainMenuItem16>:
    16c3:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

000016d2 <MainMenuItem15>:
    16d2:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

000016e1 <MainMenuItem14>:
    16e1:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

000016f0 <MainMenuItem13>:
    16f0:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

000016ff <MainMenuItem12>:
    16ff:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

0000170e <MainMenuItem11>:
    170e:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

0000171c <MainMenuItem3>:
    171c:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    172c:	65 20 32 00                                         e 2.

00001730 <MainMenuItem2>:
    1730:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    1740:	65 20 31 00                                         e 1.

00001744 <MainMenuItem10>:
    1744:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

00001753 <MainMenuItem8>:
    1753:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    1763:	61 74 69 6f 6e 00                                   ation.

00001769 <MainMenuItem7>:
    1769:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    1779:	79 00                                               y.

0000177b <MainMenuItem9>:
    177b:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    178b:	74 73 00                                            ts.

0000178e <MainMenuItem1>:
    178e:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    179e:	70 00                                               p.

000017a0 <MainMenuItem0>:
    17a0:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

000017ab <MenuFrame8>:
    17ab:	53 61 76 65 00                                      Save.

000017b0 <MenuFrame7>:
    17b0:	44 65 66 2e 00                                      Def..

000017b5 <MenuFrame6>:
    17b5:	42 61 63 6b 00                                      Back.

000017ba <MenuFrame5>:
    17ba:	4d 65 6e 75 00                                      Menu.

000017bf <MenuFrame1>:
    17bf:	45 00                                               E.

000017c1 <MenuFrame4>:
    17c1:	44 00                                               D.

000017c3 <MenuFrame3>:
    17c3:	43 00                                               C.

000017c5 <MenuFrame2>:
    17c5:	42 00                                               B.

000017c7 <MenuFrame0>:
    17c7:	41 00                                               A.

000017c9 <StatusText9>:
    17c9:	4a 69 74 74 65 72 3a 00                             Jitter:.

000017d1 <StatusText8>:
    17d1:	50 6f 73 3a 00                                      Pos:.

000017d6 <StatusText7>:
    17d6:	42 61 74 74 65 72 79 3a 00                          Battery:.

000017df <StatusText5>:
    17df:	30 00                                               0.

000017e1 <StatusText4>:
    17e1:	2e 00                                               ..

000017e3 <StatusText3>:
    17e3:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

000017ec <StatusText1>:
    17ec:	4d 6f 64 65 3a 00                                   Mode:.

000017f2 <StatusText0>:
    17f2:	56 65 72 73 69 6f 6e 3a 20 20 20 31 2e 31 20 42     Version:   1.1 B
    1802:	31 32 00                                            12.

00001805 <Gyro_Pol>:
    1805:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    1815:	01 01                                               ..

00001817 <Gyro_RPY_Order>:
    1817:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    1827:	01 00                                               ..

00001829 <LPF_lookup_HS>:
    1829:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    1839:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

00001849 <LPF_lookup>:
    1849:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    1859:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

00001869 <lines>:
    1869:	03 0f 1b 27                                         ...'

0000186d <flight_menu_ranges>:
    186d:	00 7f 01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00     ....<....(.}....
    187d:	04 01 00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f     ................
    188d:	01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00 04 01     ..<....(.}......
    189d:	00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f 01 00     ................
    18ad:	50 00 7f 01 00 00 00 7d 01 00 00 00 04 01 00 01     P......}........
    18bd:	81 7f 01 00 00 00 7f 01 00 00                       ..........

000018c7 <FlightMenuText>:
	...

000018eb <mixer_menu_ranges>:
    18eb:	00 02 01 01 00 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    18fb:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    190b:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    191b:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    192b:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    193b:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    194b:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    195b:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    196b:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    197b:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    198b:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

00001995 <MixerMenuText>:
    1995:	e2 00 00 00 00 00 00 00 00 00 00 00 00 00 38 00     ..............8.
	...
    19b1:	44 00 44 00 44 00 44 00 44 00 44 00 44 00 44 00     D.D.D.D.D.D.D.D.
    19c1:	44 00 44 00 44 00 44 00 ee 00 00 00 ee 00 00 00     D.D.D.D.........
    19d1:	ee 00 00 00 ee 00 00 00                             ........

000019d9 <servo_menu_ranges>:
    19d9:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

000019e8 <ServoMenuText>:
    19e8:	8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00     ................
	...

00001a18 <rc_menu_ranges>:
    1a18:	00 04 01 01 01 00 02 01 01 00 00 04 01 01 04 00     ................
    1a28:	01 01 01 00 00 07 01 01 04 00 28 01 00 00 01 63     ..........(....c
    1a38:	01 00 32 00 00 00 00 00 00 00 00 00 00 00 00 00     ..2.............
    1a48:	00 00 00 05 01 01 00 1c 32 01 00 24 00 01 01 01     ........2..$....
    1a58:	01 00 7f 01 00 1e 00 08 01 01 00 00 06 01 01 02     ................
    1a68:	00 07 01 01 02 00 07 01 01 07 01 0a 01 00 07 00     ................
    1a78:	02 01 01 00                                         ....

00001a7c <RCMenuText>:
    1a7c:	3e 00 76 00 69 00 74 00 69 00 00 00 00 00 00 00     >.v.i.t.i.......
    1a8c:	00 00 00 00 7c 00 00 00 35 00 00 00 00 00 25 00     ....|...5.....%.
    1a9c:	25 00 25 00 00 00 11 01                             %.%.....

00001aa4 <SQRTSIN>:
    1aa4:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1ab4:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1ac4:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1ad4:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1ae4:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1af4:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1b04:	64 64 64 64 64                                      ddddd

00001b09 <SIN>:
    1b09:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1b19:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1b29:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1b39:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1b49:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1b59:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1b69:	64 64 64 64 64                                      ddddd

00001b6e <__ctors_end>:
    1b6e:	11 24       	eor	r1, r1
    1b70:	1f be       	out	0x3f, r1	; 63
    1b72:	cf ef       	ldi	r28, 0xFF	; 255
    1b74:	d0 e1       	ldi	r29, 0x10	; 16
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	cd bf       	out	0x3d, r28	; 61

00001b7a <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1b7a:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1b7c:	88 e1       	ldi	r24, 0x18	; 24
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	80 93 60 00 	sts	0x0060, r24
    1b86:	10 92 60 00 	sts	0x0060, r1
    1b8a:	0f be       	out	0x3f, r0	; 63

00001b8c <__do_copy_data>:
    1b8c:	15 e0       	ldi	r17, 0x05	; 5
    1b8e:	a0 e0       	ldi	r26, 0x00	; 0
    1b90:	b1 e0       	ldi	r27, 0x01	; 1
    1b92:	ea e8       	ldi	r30, 0x8A	; 138
    1b94:	f9 e9       	ldi	r31, 0x99	; 153
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <__do_copy_data+0x10>
    1b98:	05 90       	lpm	r0, Z+
    1b9a:	0d 92       	st	X+, r0
    1b9c:	a6 31       	cpi	r26, 0x16	; 22
    1b9e:	b1 07       	cpc	r27, r17
    1ba0:	d9 f7       	brne	.-10     	; 0x1b98 <__do_copy_data+0xc>

00001ba2 <__do_clear_bss>:
    1ba2:	28 e0       	ldi	r18, 0x08	; 8
    1ba4:	a6 e1       	ldi	r26, 0x16	; 22
    1ba6:	b5 e0       	ldi	r27, 0x05	; 5
    1ba8:	01 c0       	rjmp	.+2      	; 0x1bac <.do_clear_bss_start>

00001baa <.do_clear_bss_loop>:
    1baa:	1d 92       	st	X+, r1

00001bac <.do_clear_bss_start>:
    1bac:	a5 35       	cpi	r26, 0x55	; 85
    1bae:	b2 07       	cpc	r27, r18
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <.do_clear_bss_loop>
    1bb2:	0e 94 1e 1c 	call	0x383c	; 0x383c <main>
    1bb6:	0c 94 c3 4c 	jmp	0x9986	; 0x9986 <_exit>

00001bba <__bad_interrupt>:
    1bba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001bbe <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1bbe:	00 00       	nop
	ret					// 4 (5 cycles)
    1bc0:	08 95       	ret

00001bc2 <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1bc2:	fd df       	rcall	.-6      	; 0x1bbe <glcd_delay>
	rcall	glcd_delay
    1bc4:	fc df       	rcall	.-8      	; 0x1bbe <glcd_delay>
	rcall	glcd_delay
    1bc6:	fb df       	rcall	.-10     	; 0x1bbe <glcd_delay>
	rcall	glcd_delay
    1bc8:	fa df       	rcall	.-12     	; 0x1bbe <glcd_delay>
	ret
    1bca:	08 95       	ret

00001bcc <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1bcc:	cf 93       	push	r28
	push	XL			//	1
    1bce:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1bd0:	a5 e0       	ldi	r26, 0x05	; 5

00001bd2 <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1bd2:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1bd4:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1bd6:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <VarDelay>
	sbi		BIND		//	2
    1bda:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1bdc:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1bde:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <VarDelay>
	dec		XL			//	1
    1be2:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1be4:	b1 f7       	brne	.-20     	; 0x1bd2 <master_loop>

	pop		XL			//	  1
    1be6:	af 91       	pop	r26
	pop		YL			//	  1
    1be8:	cf 91       	pop	r28
	ret					//	  4 
    1bea:	08 95       	ret

00001bec <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1bec:	00 c0       	rjmp	.+0      	; 0x1bee <VarDelay+0x2>
	rjmp .+0			// 2
    1bee:	00 c0       	rjmp	.+0      	; 0x1bf0 <VarDelay+0x4>
	rjmp .+0			// 2
    1bf0:	00 c0       	rjmp	.+0      	; 0x1bf2 <VarDelay+0x6>
	rjmp .+0			// 2
    1bf2:	00 c0       	rjmp	.+0      	; 0x1bf4 <VarDelay+0x8>
	rjmp .+0			// 2
    1bf4:	00 c0       	rjmp	.+0      	; 0x1bf6 <VarDelay+0xa>
	rjmp .+0			// 2
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <VarDelay+0xc>
	rjmp .+0			// 2
    1bf8:	00 c0       	rjmp	.+0      	; 0x1bfa <VarDelay+0xe>
	rjmp .+0			// 2
    1bfa:	00 c0       	rjmp	.+0      	; 0x1bfc <VarDelay+0x10>
	nop					// 1
    1bfc:	00 00       	nop
	dec 	YL			// 1
    1bfe:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1c00:	a9 f7       	brne	.-22     	; 0x1bec <VarDelay>
	ret					//   4 
    1c02:	08 95       	ret

00001c04 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1c04:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1c06:	ef 93       	push	r30
	push	ZH			// 2
    1c08:	ff 93       	push	r31
	push	XL			// 2
    1c0a:	af 93       	push	r26
	push	XH			// 2
    1c0c:	bf 93       	push	r27
	push	YL			// 2
    1c0e:	cf 93       	push	r28
	push	YH			// 2
    1c10:	df 93       	push	r29
	push	16			// 2
    1c12:	0f 93       	push	r16
	push	17			// 2
    1c14:	1f 93       	push	r17
	push	18			// 2
    1c16:	2f 93       	push	r18
	push	19			// 2
    1c18:	3f 93       	push	r19
	push	20			// 2
    1c1a:	4f 93       	push	r20
	push	21			// 2
    1c1c:	5f 93       	push	r21
	push	22			// 2
    1c1e:	6f 93       	push	r22
	push	23			// 2
    1c20:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1c22:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1c24:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1c26:	8f 93       	push	r24
	push	25			// 2
    1c28:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1c2a:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1c2c:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1c2e:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1c30:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1c32:	af 93       	push	r26
	push	XH 			// 2
    1c34:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1c36:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1c38:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1c3a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c3c:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1c3e:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1c40:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1c42:	af 93       	push	r26
	push	XH 		
    1c44:	bf 93       	push	r27
	andi	XL,	0x07
    1c46:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1c48:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1c4a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c4c:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1c4e:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1c50:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1c52:	af 93       	push	r26
	push	XH 		
    1c54:	bf 93       	push	r27
	andi	XL,	0x07
    1c56:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1c58:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1c5a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c5c:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1c5e:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1c60:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1c62:	af 93       	push	r26
	push	XH 	
    1c64:	bf 93       	push	r27
	andi	XL,	0x07
    1c66:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1c68:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1c6a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c6c:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1c6e:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1c70:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1c72:	af 93       	push	r26
	push	XH 	
    1c74:	bf 93       	push	r27
	andi	XL,	0x07
    1c76:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1c78:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1c7a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c7c:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1c7e:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1c80:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1c82:	af 93       	push	r26
	push	XH 	
    1c84:	bf 93       	push	r27
	andi	XL,	0x07
    1c86:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1c88:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1c8a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c8c:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1c8e:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1c90:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1c92:	af 93       	push	r26
	push	XH 
    1c94:	bf 93       	push	r27
	andi	XL,	0x07
    1c96:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1c98:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1c9a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c9c:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1c9e:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1ca0:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1ca2:	af 93       	push	r26
	push	XH 
    1ca4:	bf 93       	push	r27
	andi	XL,	0x07
    1ca6:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1ca8:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1caa:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1cac:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1cb0:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1cb2:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1cb4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M2
	mov		r25,r22
    1cb8:	96 2f       	mov	r25, r22
	call	DelayHigh
    1cba:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1cbe:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1cc0:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1cc2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M3
	mov		r25,r21
    1cc6:	95 2f       	mov	r25, r21
	call	DelayHigh
    1cc8:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1ccc:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1cce:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1cd0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M4
	mov		r25,r20
    1cd4:	94 2f       	mov	r25, r20
	call	DelayHigh
    1cd6:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1cda:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1cdc:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1cde:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M5
	mov		r25,r19
    1ce2:	93 2f       	mov	r25, r19
	call	DelayHigh
    1ce4:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1ce8:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1cea:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1cec:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M6
	mov		r25,r18
    1cf0:	92 2f       	mov	r25, r18
	call	DelayHigh
    1cf2:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1cf6:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1cf8:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1cfa:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M7
	mov		r25,r17
    1cfe:	91 2f       	mov	r25, r17
	call	DelayHigh
    1d00:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1d04:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1d06:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1d08:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M8
	mov		r25,r16
    1d0c:	90 2f       	mov	r25, r16
	call	DelayHigh
    1d0e:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1d12:	f7 fc       	sbrc	r15, 7
	sbi 	M8			// 1
    1d14:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1d16:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1d1a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <pwm_delay>
	call    pwm_delay
    1d1e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <pwm_delay>
	call    pwm_delay
    1d22:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1d26:	bf 91       	pop	r27
	pop		XL
    1d28:	af 91       	pop	r26
	call	shuffle_8
    1d2a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <shuffle_8>
	mov		r16,XL
    1d2e:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1d30:	bf 91       	pop	r27
	pop		XL
    1d32:	af 91       	pop	r26
	call	shuffle_8
    1d34:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <shuffle_8>
	mov		r17,XL
    1d38:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1d3a:	bf 91       	pop	r27
	pop		XL
    1d3c:	af 91       	pop	r26
	call	shuffle_8
    1d3e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <shuffle_8>
	mov		r18,XL
    1d42:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1d44:	bf 91       	pop	r27
	pop		XL
    1d46:	af 91       	pop	r26
	call	shuffle_8
    1d48:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <shuffle_8>
	mov		r19,XL
    1d4c:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1d4e:	bf 91       	pop	r27
	pop		XL
    1d50:	af 91       	pop	r26
	call	shuffle_8
    1d52:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <shuffle_8>
	mov		r20,XL
    1d56:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1d58:	bf 91       	pop	r27
	pop		XL
    1d5a:	af 91       	pop	r26
	call	shuffle_8
    1d5c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <shuffle_8>
	mov		r21,XL
    1d60:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1d62:	bf 91       	pop	r27
	pop		XL
    1d64:	af 91       	pop	r26
	call	shuffle_8
    1d66:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <shuffle_8>
	mov		r22,XL
    1d6a:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1d6c:	bf 91       	pop	r27
	pop		XL
    1d6e:	af 91       	pop	r26
	call	shuffle_8
    1d70:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <shuffle_8>
	mov		r23,XL
    1d74:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    1d76:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    1d78:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    1d7a:	00 24       	eor	r0, r0

00001d7c <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1d7c:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1d7e:	19 f4       	brne	.+6      	; 0x1d86 <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1d80:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1d82:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <jj1>

00001d86 <j1>:
j1:
	rjmp 	.+0			// 2
    1d86:	00 c0       	rjmp	.+0      	; 0x1d88 <j1+0x2>
	rjmp 	.+0			// 2
    1d88:	00 c0       	rjmp	.+0      	; 0x1d8a <jj1>

00001d8a <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1d8a:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1d8c:	19 f4       	brne	.+6      	; 0x1d94 <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1d8e:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1d90:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <jj2>

00001d94 <j2>:
j2:
	rjmp	.+0
    1d94:	00 c0       	rjmp	.+0      	; 0x1d96 <j2+0x2>
	rjmp	.+0
    1d96:	00 c0       	rjmp	.+0      	; 0x1d98 <jj2>

00001d98 <jj2>:
jj2:
	subi	r21,1
    1d98:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1d9a:	19 f4       	brne	.+6      	; 0x1da2 <j3>
	cbi 	M3
    1d9c:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1d9e:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <jj3>

00001da2 <j3>:
j3:
	rjmp	.+0
    1da2:	00 c0       	rjmp	.+0      	; 0x1da4 <j3+0x2>
	rjmp	.+0
    1da4:	00 c0       	rjmp	.+0      	; 0x1da6 <jj3>

00001da6 <jj3>:
jj3:
	subi 	r20,1
    1da6:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1da8:	19 f4       	brne	.+6      	; 0x1db0 <j4>
	cbi 	M4
    1daa:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1dac:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <jj4>

00001db0 <j4>:
j4:
	rjmp 	.+0
    1db0:	00 c0       	rjmp	.+0      	; 0x1db2 <j4+0x2>
	rjmp 	.+0
    1db2:	00 c0       	rjmp	.+0      	; 0x1db4 <jj4>

00001db4 <jj4>:
jj4:
	subi	r19,1
    1db4:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1db6:	19 f4       	brne	.+6      	; 0x1dbe <j5>
	cbi 	M5
    1db8:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1dba:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <jj5>

00001dbe <j5>:
j5:
	rjmp 	.+0
    1dbe:	00 c0       	rjmp	.+0      	; 0x1dc0 <j5+0x2>
	rjmp 	.+0
    1dc0:	00 c0       	rjmp	.+0      	; 0x1dc2 <jj5>

00001dc2 <jj5>:
jj5:
	subi	r18,1
    1dc2:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1dc4:	19 f4       	brne	.+6      	; 0x1dcc <j6>
	cbi 	M6
    1dc6:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1dc8:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <jj6>

00001dcc <j6>:
j6:
	rjmp 	.+0
    1dcc:	00 c0       	rjmp	.+0      	; 0x1dce <j6+0x2>
	rjmp	.+0
    1dce:	00 c0       	rjmp	.+0      	; 0x1dd0 <jj6>

00001dd0 <jj6>:
jj6:
	subi	r17,1
    1dd0:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1dd2:	19 f4       	brne	.+6      	; 0x1dda <j7>
	cbi 	M7
    1dd4:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1dd6:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <jj7>

00001dda <j7>:
j7:
	rjmp 	.+0
    1dda:	00 c0       	rjmp	.+0      	; 0x1ddc <j7+0x2>
	rjmp 	.+0
    1ddc:	00 c0       	rjmp	.+0      	; 0x1dde <jj7>

00001dde <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1dde:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1de0:	19 f4       	brne	.+6      	; 0x1de8 <j8>
	cbi 	M8
    1de2:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1de4:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <jj8>

00001de8 <j8>:
j8:
	rjmp 	.+0
    1de8:	00 c0       	rjmp	.+0      	; 0x1dea <j8+0x2>
	rjmp 	.+0
    1dea:	00 c0       	rjmp	.+0      	; 0x1dec <jj8>

00001dec <jj8>:
jj8:
	call	pad_100_delay // (100)
    1dec:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <pad_100_delay>

	subi 	YL,1		// 1
    1df0:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1df2:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1df4:	11 f0       	breq	.+4      	; 0x1dfa <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1df6:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <nloop>

00001dfa <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1dfa:	9f 91       	pop	r25
	pop		24			// 		2
    1dfc:	8f 91       	pop	r24
	pop		23			//		2
    1dfe:	7f 91       	pop	r23
	pop		22			//		2
    1e00:	6f 91       	pop	r22
	pop		21			//		2
    1e02:	5f 91       	pop	r21
	pop		20			//		2
    1e04:	4f 91       	pop	r20
	pop		19			//		2
    1e06:	3f 91       	pop	r19
	pop		18			//		2
    1e08:	2f 91       	pop	r18
	pop		17			//		2
    1e0a:	1f 91       	pop	r17
	pop		16			//		2
    1e0c:	0f 91       	pop	r16
	pop		YH			//		2
    1e0e:	df 91       	pop	r29
	pop		YL			//		2
    1e10:	cf 91       	pop	r28
	pop		XH			//		2
    1e12:	bf 91       	pop	r27
	pop		XL			//		2
    1e14:	af 91       	pop	r26
	pop		ZH			// 		2
    1e16:	ff 91       	pop	r31
	pop		ZL			//		2
    1e18:	ef 91       	pop	r30

	ret					//		4
    1e1a:	08 95       	ret

00001e1c <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1e1c:	0f 93       	push	r16
	push	17
    1e1e:	1f 93       	push	r17
	push	18
    1e20:	2f 93       	push	r18

	//ldi 	16,0x34		// 1			Set loop count to 834h or 2100
	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1e22:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1e24:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1e26:	00 24       	eor	r0, r0

00001e28 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1e28:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1e2a:	71 f0       	breq	.+28     	; 0x1e48 <in1>
	cpi		r24,0x01	; 1
    1e2c:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1e2e:	79 f0       	breq	.+30     	; 0x1e4e <in2>
	cpi		r24,0x02	; 2
    1e30:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1e32:	81 f0       	breq	.+32     	; 0x1e54 <in3>
	cpi		r24,0x03	; 3
    1e34:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1e36:	89 f0       	breq	.+34     	; 0x1e5a <in4>
	cpi		r24,0x04	; 4
    1e38:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1e3a:	91 f0       	breq	.+36     	; 0x1e60 <in5>
	cpi		r24,0x05	; 5
    1e3c:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1e3e:	99 f0       	breq	.+38     	; 0x1e66 <in6>
	cpi		r24,0x06	; 6
    1e40:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1e42:	a1 f0       	breq	.+40     	; 0x1e6c <in7>
	cpi		r24,0x07	; 7
    1e44:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1e46:	a9 f0       	breq	.+42     	; 0x1e72 <in8>

00001e48 <in1>:

in1:sbi 	M1			// Set output high
    1e48:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1e4a:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <loopin>

00001e4e <in2>:
in2:sbi 	M2
    1e4e:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1e50:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <loopin>

00001e54 <in3>:
in3:sbi 	M3	
    1e54:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1e56:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <loopin>

00001e5a <in4>:
in4:sbi 	M4
    1e5a:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1e5c:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <loopin>

00001e60 <in5>:
in5:sbi 	M5
    1e60:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1e62:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <loopin>

00001e66 <in6>:
in6:sbi 	M6
    1e66:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1e68:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <loopin>

00001e6c <in7>:
in7:sbi 	M7
    1e6c:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1e6e:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <loopin>

00001e72 <in8>:
in8:sbi 	M8
    1e72:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1e74:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <loopin>

00001e78 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1e78:	00 c0       	rjmp	.+0      	; 0x1e7a <loopin+0x2>
	rjmp .+0			// 2
    1e7a:	00 c0       	rjmp	.+0      	; 0x1e7c <loopin+0x4>
	rjmp .+0			// 2
    1e7c:	00 c0       	rjmp	.+0      	; 0x1e7e <loopin+0x6>
	rjmp .+0			// 2
    1e7e:	00 c0       	rjmp	.+0      	; 0x1e80 <loopin+0x8>
	rjmp .+0			// 2
    1e80:	00 c0       	rjmp	.+0      	; 0x1e82 <loopin+0xa>
	rjmp .+0			// 2
    1e82:	00 c0       	rjmp	.+0      	; 0x1e84 <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1e84:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1e86:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1e88:	19 f4       	brne	.+6      	; 0x1e90 <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1e8c:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1e8e:	22 b9       	out	0x02, r18	; 2

00001e90 <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1e90:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1e92:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1e94:	89 f7       	brne	.-30     	; 0x1e78 <loopin>

	pop		18
    1e96:	2f 91       	pop	r18
	pop		17			// Restore regs
    1e98:	1f 91       	pop	r17
	pop		16
    1e9a:	0f 91       	pop	r16
	ret	
    1e9c:	08 95       	ret

00001e9e <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1e9e:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1ea0:	05 e6       	ldi	r16, 0x65	; 101

00001ea2 <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1ea2:	00 c0       	rjmp	.+0      	; 0x1ea4 <pwm_loop+0x2>
	rjmp .+0			// 2
    1ea4:	00 c0       	rjmp	.+0      	; 0x1ea6 <pwm_loop+0x4>
	rjmp .+0			// 2
    1ea6:	00 c0       	rjmp	.+0      	; 0x1ea8 <pwm_loop+0x6>
	subi	r16,1		// 1
    1ea8:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1eaa:	d9 f7       	brne	.-10     	; 0x1ea2 <pwm_loop>

00001eac <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1eac:	0f 91       	pop	r16
	ret					//    4 to return
    1eae:	08 95       	ret

00001eb0 <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1eb0:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1eb2:	09 e0       	ldi	r16, 0x09	; 9

00001eb4 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1eb4:	00 c0       	rjmp	.+0      	; 0x1eb6 <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1eb6:	00 c0       	rjmp	.+0      	; 0x1eb8 <pad_100+0x4>
	rjmp .+0			// 2
    1eb8:	00 c0       	rjmp	.+0      	; 0x1eba <pad_100+0x6>

	subi 	16,1		// 1
    1eba:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1ebc:	d9 f7       	brne	.-10     	; 0x1eb4 <pad_100>

	nop					// 		1		Trim to precisely the right value
    1ebe:	00 00       	nop
	rjmp .+0			// 		2
    1ec0:	00 c0       	rjmp	.+0      	; 0x1ec2 <pad_100+0xe>
	rjmp .+0			// 		2
    1ec2:	00 c0       	rjmp	.+0      	; 0x1ec4 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1ec4:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1ec6:	08 95       	ret

00001ec8 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1ec8:	00 c0       	rjmp	.+0      	; 0x1eca <us_delay+0x2>
	rjmp .+0			// 2
    1eca:	00 c0       	rjmp	.+0      	; 0x1ecc <us_delay+0x4>
	rjmp .+0			// 2
    1ecc:	00 c0       	rjmp	.+0      	; 0x1ece <us_delay+0x6>
	rjmp .+0			// 2
    1ece:	00 c0       	rjmp	.+0      	; 0x1ed0 <us_delay+0x8>
	ret					// 4 (16 cycles)
    1ed0:	08 95       	ret

00001ed2 <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1ed2:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1ed4:	a7 95       	ror	r26
	lsr		XH			// 1
    1ed6:	b6 95       	lsr	r27
	ror		XL			// 1
    1ed8:	a7 95       	ror	r26
	lsr		XH			// 1
    1eda:	b6 95       	lsr	r27
	ror		XL			// 1
    1edc:	a7 95       	ror	r26
	ret					// 4
    1ede:	08 95       	ret

00001ee0 <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1ee0:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1ee2:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1ee4:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1ee6:	31 f0       	breq	.+12     	; 0x1ef4 <LoopHighOut1>

00001ee8 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1ee8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <us_delay>
	dec 	YL			// 		1	1
    1eec:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1ef0:	fb cf       	rjmp	.-10     	; 0x1ee8 <LoopHigh>

00001ef2 <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1ef2:	00 c0       	rjmp	.+0      	; 0x1ef4 <LoopHighOut1>

00001ef4 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1ef4:	00 00       	nop
    ret					// 4	4	4
    1ef6:	08 95       	ret

00001ef8 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1ef8:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1efa:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1efc:	31 f0       	breq	.+12     	; 0x1f0a <LoopLowOut1>

00001efe <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1efe:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <us_delay>
	dec 	YL			//		1	1
    1f02:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <LoopLowOut2>
	rjmp	LoopLow		//			2
    1f06:	fb cf       	rjmp	.-10     	; 0x1efe <LoopLow>

00001f08 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1f08:	00 c0       	rjmp	.+0      	; 0x1f0a <LoopLowOut1>

00001f0a <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1f0a:	08 95       	ret

00001f0c <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	2c 97       	sbiw	r28, 0x0c	; 12
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1f20:	26 e0       	ldi	r18, 0x06	; 6
    1f22:	ae 01       	movw	r20, r28
    1f24:	4f 5f       	subi	r20, 0xFF	; 255
    1f26:	5f 4f       	sbci	r21, 0xFF	; 255
    1f28:	6b e3       	ldi	r22, 0x3B	; 59
    1f2a:	80 ed       	ldi	r24, 0xD0	; 208
    1f2c:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	98 2f       	mov	r25, r24
    1f36:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1f38:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1f3a:	82 0f       	add	r24, r18
    1f3c:	91 1d       	adc	r25, r1
    1f3e:	36 e0       	ldi	r19, 0x06	; 6
    1f40:	95 95       	asr	r25
    1f42:	87 95       	ror	r24
    1f44:	3a 95       	dec	r19
    1f46:	e1 f7       	brne	.-8      	; 0x1f40 <get_raw_accs+0x34>
    1f48:	98 87       	std	Y+8, r25	; 0x08
    1f4a:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	98 2f       	mov	r25, r24
    1f52:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1f54:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1f56:	82 0f       	add	r24, r18
    1f58:	91 1d       	adc	r25, r1
    1f5a:	56 e0       	ldi	r21, 0x06	; 6
    1f5c:	95 95       	asr	r25
    1f5e:	87 95       	ror	r24
    1f60:	5a 95       	dec	r21
    1f62:	e1 f7       	brne	.-8      	; 0x1f5c <get_raw_accs+0x50>
    1f64:	91 95       	neg	r25
    1f66:	81 95       	neg	r24
    1f68:	91 09       	sbc	r25, r1
    1f6a:	9a 87       	std	Y+10, r25	; 0x0a
    1f6c:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	98 2f       	mov	r25, r24
    1f74:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1f76:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1f78:	82 0f       	add	r24, r18
    1f7a:	91 1d       	adc	r25, r1
    1f7c:	76 e0       	ldi	r23, 0x06	; 6
    1f7e:	95 95       	asr	r25
    1f80:	87 95       	ror	r24
    1f82:	7a 95       	dec	r23
    1f84:	e1 f7       	brne	.-8      	; 0x1f7e <get_raw_accs+0x72>
    1f86:	9c 87       	std	Y+12, r25	; 0x0c
    1f88:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1f8a:	20 91 40 06 	lds	r18, 0x0640
    1f8e:	ae e3       	ldi	r26, 0x3E	; 62
    1f90:	b5 e0       	ldi	r27, 0x05	; 5
    1f92:	43 e0       	ldi	r20, 0x03	; 3
    1f94:	24 02       	muls	r18, r20
    1f96:	90 01       	movw	r18, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	24 52       	subi	r18, 0x24	; 36
    1fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa2:	f9 01       	movw	r30, r18
    1fa4:	e8 0f       	add	r30, r24
    1fa6:	f9 1f       	adc	r31, r25
    1fa8:	e4 91       	lpm	r30, Z
    1faa:	ee 0f       	add	r30, r30
    1fac:	ff 0b       	sbc	r31, r31
    1fae:	41 e0       	ldi	r20, 0x01	; 1
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	4c 0f       	add	r20, r28
    1fb4:	5d 1f       	adc	r21, r29
    1fb6:	e4 0f       	add	r30, r20
    1fb8:	f5 1f       	adc	r31, r21
    1fba:	46 81       	ldd	r20, Z+6	; 0x06
    1fbc:	57 81       	ldd	r21, Z+7	; 0x07
    1fbe:	4d 93       	st	X+, r20
    1fc0:	5d 93       	st	X+, r21
    1fc2:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1fc4:	83 30       	cpi	r24, 0x03	; 3
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	61 f7       	brne	.-40     	; 0x1fa2 <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1fca:	2c 96       	adiw	r28, 0x0c	; 12
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	df 91       	pop	r29
    1fd8:	cf 91       	pop	r28
    1fda:	08 95       	ret

00001fdc <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1fe2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1fe6:	80 91 bf 07 	lds	r24, 0x07BF
    1fea:	80 fd       	sbrc	r24, 0
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    1fee:	10 92 a7 07 	sts	0x07A7, r1
    1ff2:	10 92 a6 07 	sts	0x07A6, r1
    1ff6:	0e c0       	rjmp	.+28     	; 0x2014 <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1ff8:	80 91 a8 07 	lds	r24, 0x07A8
    1ffc:	90 91 a9 07 	lds	r25, 0x07A9
    2000:	20 91 ac 07 	lds	r18, 0x07AC
    2004:	30 91 ad 07 	lds	r19, 0x07AD
    2008:	82 1b       	sub	r24, r18
    200a:	93 0b       	sbc	r25, r19
    200c:	90 93 a7 07 	sts	0x07A7, r25
    2010:	80 93 a6 07 	sts	0x07A6, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    2014:	20 91 40 06 	lds	r18, 0x0640
    2018:	c2 ea       	ldi	r28, 0xA2	; 162
    201a:	d7 e0       	ldi	r29, 0x07	; 7
    201c:	ae e3       	ldi	r26, 0x3E	; 62
    201e:	b5 e0       	ldi	r27, 0x05	; 5
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	28 02       	muls	r18, r24
    2024:	90 01       	movw	r18, r0
    2026:	11 24       	eor	r1, r1
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	26 53       	subi	r18, 0x36	; 54
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    2030:	69 91       	ld	r22, Y+
    2032:	79 91       	ld	r23, Y+
    2034:	f9 01       	movw	r30, r18
    2036:	e8 0f       	add	r30, r24
    2038:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    203a:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    203c:	4d 91       	ld	r20, X+
    203e:	5c 91       	ld	r21, X
    2040:	11 97       	sbiw	r26, 0x01	; 1
    2042:	46 1b       	sub	r20, r22
    2044:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    2046:	14 03       	mulsu	r17, r20
    2048:	b0 01       	movw	r22, r0
    204a:	15 9f       	mul	r17, r21
    204c:	70 0d       	add	r23, r0
    204e:	11 24       	eor	r1, r1
    2050:	6d 93       	st	X+, r22
    2052:	7d 93       	st	X+, r23
    2054:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    2056:	83 30       	cpi	r24, 0x03	; 3
    2058:	91 05       	cpc	r25, r1
    205a:	51 f7       	brne	.-44     	; 0x2030 <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    205c:	60 91 a8 07 	lds	r22, 0x07A8
    2060:	70 91 a9 07 	lds	r23, 0x07A9
    2064:	80 91 a6 07 	lds	r24, 0x07A6
    2068:	90 91 a7 07 	lds	r25, 0x07A7
    206c:	68 1b       	sub	r22, r24
    206e:	79 0b       	sbc	r23, r25
    2070:	88 27       	eor	r24, r24
    2072:	77 fd       	sbrc	r23, 7
    2074:	80 95       	com	r24
    2076:	98 2f       	mov	r25, r24
    2078:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    207c:	20 91 a8 05 	lds	r18, 0x05A8
    2080:	30 91 a9 05 	lds	r19, 0x05A9
    2084:	40 91 aa 05 	lds	r20, 0x05AA
    2088:	50 91 ab 05 	lds	r21, 0x05AB
    208c:	0e 94 8a 49 	call	0x9314	; 0x9314 <__addsf3>
    2090:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
    2094:	70 93 17 05 	sts	0x0517, r23
    2098:	60 93 16 05 	sts	0x0516, r22
}
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	08 95       	ret

000020a4 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <CalibrateAcc+0x8>
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <CalibrateAcc+0xa>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <CalibrateAcc+0xc>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    20b4:	1a 82       	std	Y+2, r1	; 0x02
    20b6:	19 82       	std	Y+1, r1	; 0x01
    20b8:	1c 82       	std	Y+4, r1	; 0x04
    20ba:	1b 82       	std	Y+3, r1	; 0x03
    20bc:	1e 82       	std	Y+6, r1	; 0x06
    20be:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    20c0:	81 11       	cpse	r24, r1
    20c2:	72 c0       	rjmp	.+228    	; 0x21a8 <CalibrateAcc+0x104>
    20c4:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    20c6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
    20ce:	20 91 3e 05 	lds	r18, 0x053E
    20d2:	30 91 3f 05 	lds	r19, 0x053F
    20d6:	82 0f       	add	r24, r18
    20d8:	93 1f       	adc	r25, r19
    20da:	9a 83       	std	Y+2, r25	; 0x02
    20dc:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	20 91 40 05 	lds	r18, 0x0540
    20e6:	30 91 41 05 	lds	r19, 0x0541
    20ea:	82 0f       	add	r24, r18
    20ec:	93 1f       	adc	r25, r19
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	20 91 42 05 	lds	r18, 0x0542
    20fa:	30 91 43 05 	lds	r19, 0x0543
    20fe:	82 0f       	add	r24, r18
    2100:	93 1f       	adc	r25, r19
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2106:	8f e4       	ldi	r24, 0x4F	; 79
    2108:	93 ec       	ldi	r25, 0xC3	; 195
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <CalibrateAcc+0x66>
    210e:	00 c0       	rjmp	.+0      	; 0x2110 <CalibrateAcc+0x6c>
    2110:	00 00       	nop
    2112:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    2114:	c1 f6       	brne	.-80     	; 0x20c6 <CalibrateAcc+0x22>
    2116:	fe 01       	movw	r30, r28
    2118:	31 96       	adiw	r30, 0x01	; 1
    211a:	9e 01       	movw	r18, r28
    211c:	29 5f       	subi	r18, 0xF9	; 249
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	40 96       	adiw	r24, 0x10	; 16
    2126:	45 e0       	ldi	r20, 0x05	; 5
    2128:	95 95       	asr	r25
    212a:	87 95       	ror	r24
    212c:	4a 95       	dec	r20
    212e:	e1 f7       	brne	.-8      	; 0x2128 <CalibrateAcc+0x84>
    2130:	81 93       	st	Z+, r24
    2132:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    2134:	e2 17       	cp	r30, r18
    2136:	f3 07       	cpc	r31, r19
    2138:	99 f7       	brne	.-26     	; 0x2120 <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	90 93 a3 07 	sts	0x07A3, r25
    2142:	80 93 a2 07 	sts	0x07A2, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	90 93 a5 07 	sts	0x07A5, r25
    214e:	80 93 a4 07 	sts	0x07A4, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2152:	80 91 40 06 	lds	r24, 0x0640
    2156:	99 27       	eor	r25, r25
    2158:	87 fd       	sbrc	r24, 7
    215a:	90 95       	com	r25
    215c:	fc 01       	movw	r30, r24
    215e:	ee 0f       	add	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	e8 0f       	add	r30, r24
    2164:	f9 1f       	adc	r31, r25
    2166:	e4 53       	subi	r30, 0x34	; 52
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	44 91       	lpm	r20, Z
    216c:	2d 81       	ldd	r18, Y+5	; 0x05
    216e:	3e 81       	ldd	r19, Y+6	; 0x06
    2170:	42 03       	mulsu	r20, r18
    2172:	c0 01       	movw	r24, r0
    2174:	43 9f       	mul	r20, r19
    2176:	90 0d       	add	r25, r0
    2178:	11 24       	eor	r1, r1
    217a:	90 93 a9 07 	sts	0x07A9, r25
    217e:	80 93 a8 07 	sts	0x07A8, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    2182:	80 91 bf 07 	lds	r24, 0x07BF
    2186:	82 60       	ori	r24, 0x02	; 2
    2188:	80 93 bf 07 	sts	0x07BF, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    218c:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>
		LED1 = 1;
    2190:	2b 9a       	sbi	0x05, 3	; 5
    2192:	9f e7       	ldi	r25, 0x7F	; 127
    2194:	24 e8       	ldi	r18, 0x84	; 132
    2196:	4e e1       	ldi	r20, 0x1E	; 30
    2198:	91 50       	subi	r25, 0x01	; 1
    219a:	20 40       	sbci	r18, 0x00	; 0
    219c:	40 40       	sbci	r20, 0x00	; 0
    219e:	e1 f7       	brne	.-8      	; 0x2198 <CalibrateAcc+0xf4>
    21a0:	00 c0       	rjmp	.+0      	; 0x21a2 <CalibrateAcc+0xfe>
    21a2:	00 00       	nop
		_delay_ms(500);
		LED1 = 0;
    21a4:	2b 98       	cbi	0x05, 3	; 5
    21a6:	76 c0       	rjmp	.+236    	; 0x2294 <CalibrateAcc+0x1f0>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    21a8:	80 91 bf 07 	lds	r24, 0x07BF
    21ac:	81 ff       	sbrs	r24, 1
    21ae:	72 c0       	rjmp	.+228    	; 0x2294 <CalibrateAcc+0x1f0>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    21b0:	10 92 ab 07 	sts	0x07AB, r1
    21b4:	10 92 aa 07 	sts	0x07AA, r1
    21b8:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    21ba:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    21be:	80 91 aa 07 	lds	r24, 0x07AA
    21c2:	90 91 ab 07 	lds	r25, 0x07AB
    21c6:	20 91 42 05 	lds	r18, 0x0542
    21ca:	30 91 43 05 	lds	r19, 0x0543
    21ce:	82 0f       	add	r24, r18
    21d0:	93 1f       	adc	r25, r19
    21d2:	90 93 ab 07 	sts	0x07AB, r25
    21d6:	80 93 aa 07 	sts	0x07AA, r24
    21da:	8f e4       	ldi	r24, 0x4F	; 79
    21dc:	93 ec       	ldi	r25, 0xC3	; 195
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <CalibrateAcc+0x13a>
    21e2:	00 c0       	rjmp	.+0      	; 0x21e4 <CalibrateAcc+0x140>
    21e4:	00 00       	nop
    21e6:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    21e8:	41 f7       	brne	.-48     	; 0x21ba <CalibrateAcc+0x116>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    21ea:	80 91 40 06 	lds	r24, 0x0640
    21ee:	99 27       	eor	r25, r25
    21f0:	87 fd       	sbrc	r24, 7
    21f2:	90 95       	com	r25
    21f4:	fc 01       	movw	r30, r24
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	e8 0f       	add	r30, r24
    21fc:	f9 1f       	adc	r31, r25
    21fe:	e4 53       	subi	r30, 0x34	; 52
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    2204:	20 91 aa 07 	lds	r18, 0x07AA
    2208:	30 91 ab 07 	lds	r19, 0x07AB
    220c:	20 5f       	subi	r18, 0xF0	; 240
    220e:	3f 4f       	sbci	r19, 0xFF	; 255
    2210:	b5 e0       	ldi	r27, 0x05	; 5
    2212:	35 95       	asr	r19
    2214:	27 95       	ror	r18
    2216:	ba 95       	dec	r27
    2218:	e1 f7       	brne	.-8      	; 0x2212 <CalibrateAcc+0x16e>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    221a:	42 03       	mulsu	r20, r18
    221c:	c0 01       	movw	r24, r0
    221e:	43 9f       	mul	r20, r19
    2220:	90 0d       	add	r25, r0
    2222:	11 24       	eor	r1, r1
    2224:	90 93 ab 07 	sts	0x07AB, r25
    2228:	80 93 aa 07 	sts	0x07AA, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    222c:	97 ff       	sbrs	r25, 7
    222e:	32 c0       	rjmp	.+100    	; 0x2294 <CalibrateAcc+0x1f0>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    2230:	20 91 a8 07 	lds	r18, 0x07A8
    2234:	30 91 a9 07 	lds	r19, 0x07A9
    2238:	a9 01       	movw	r20, r18
    223a:	48 1b       	sub	r20, r24
    223c:	59 0b       	sbc	r21, r25
    223e:	ca 01       	movw	r24, r20
    2240:	95 95       	asr	r25
    2242:	87 95       	ror	r24
    2244:	90 93 ad 07 	sts	0x07AD, r25
    2248:	80 93 ac 07 	sts	0x07AC, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    224c:	28 1b       	sub	r18, r24
    224e:	39 0b       	sbc	r19, r25
    2250:	30 93 a7 07 	sts	0x07A7, r19
    2254:	20 93 a6 07 	sts	0x07A6, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    2258:	80 91 bf 07 	lds	r24, 0x07BF
    225c:	81 60       	ori	r24, 0x01	; 1
    225e:	80 93 bf 07 	sts	0x07BF, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    2262:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>
				LED1 = 1;
    2266:	2b 9a       	sbi	0x05, 3	; 5
    2268:	5f e7       	ldi	r21, 0x7F	; 127
    226a:	84 e8       	ldi	r24, 0x84	; 132
    226c:	9e e1       	ldi	r25, 0x1E	; 30
    226e:	51 50       	subi	r21, 0x01	; 1
    2270:	80 40       	sbci	r24, 0x00	; 0
    2272:	90 40       	sbci	r25, 0x00	; 0
    2274:	e1 f7       	brne	.-8      	; 0x226e <CalibrateAcc+0x1ca>
    2276:	00 c0       	rjmp	.+0      	; 0x2278 <CalibrateAcc+0x1d4>
    2278:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    227a:	2b 98       	cbi	0x05, 3	; 5
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    227c:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
	}
}
    227e:	26 96       	adiw	r28, 0x06	; 6
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	1f 91       	pop	r17
				LED1 = 1;
				_delay_ms(500);
				LED1 = 0;
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    2290:	0c 94 b6 33 	jmp	0x676c	; 0x676c <menu_beep>
			}
		}
	}
}
    2294:	26 96       	adiw	r28, 0x06	; 6
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	08 95       	ret

000022a8 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	6b e6       	ldi	r22, 0x6B	; 107
    22ac:	80 ed       	ldi	r24, 0xD0	; 208
    22ae:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    22b2:	48 e0       	ldi	r20, 0x08	; 8
    22b4:	6c e1       	ldi	r22, 0x1C	; 28
    22b6:	80 ed       	ldi	r24, 0xD0	; 208
    22b8:	0c 94 96 26 	jmp	0x4d2c	; 0x4d2c <writeI2Cbyte>

000022bc <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    22bc:	8f ef       	ldi	r24, 0xFF	; 255
    22be:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    22c2:	10 92 7b 00 	sts	0x007B, r1
    22c6:	08 95       	ret

000022c8 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    22c8:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    22cc:	86 ec       	ldi	r24, 0xC6	; 198
    22ce:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    22d2:	80 91 7a 00 	lds	r24, 0x007A
    22d6:	86 fd       	sbrc	r24, 6
    22d8:	fc cf       	rjmp	.-8      	; 0x22d2 <read_adc+0xa>
}
    22da:	08 95       	ret

000022dc <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    22dc:	cf 92       	push	r12
    22de:	df 92       	push	r13
    22e0:	ef 92       	push	r14
    22e2:	0f 93       	push	r16
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    22e8:	cb e0       	ldi	r28, 0x0B	; 11
    22ea:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    22ec:	1f 9b       	sbis	0x03, 7	; 3
    22ee:	7f c0       	rjmp	.+254    	; 0x23ee <Display_balance+0x112>
	{
		// Read accs
		ReadAcc();
    22f0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	70 e0       	ldi	r23, 0x00	; 0
    22f8:	cb 01       	movw	r24, r22
    22fa:	0e 94 0e 29 	call	0x521c	; 0x521c <imu_update>
    22fe:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    2300:	20 97       	sbiw	r28, 0x00	; 0
    2302:	a1 f7       	brne	.-24     	; 0x22ec <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	52 e4       	ldi	r21, 0x42	; 66
    230c:	60 91 a4 05 	lds	r22, 0x05A4
    2310:	70 91 a5 05 	lds	r23, 0x05A5
    2314:	80 91 a6 05 	lds	r24, 0x05A6
    2318:	90 91 a7 05 	lds	r25, 0x05A7
    231c:	0e 94 8a 49 	call	0x9314	; 0x9314 <__addsf3>
    2320:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
    2324:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e8       	ldi	r20, 0x80	; 128
    232c:	52 e4       	ldi	r21, 0x42	; 66
    232e:	60 91 a0 05 	lds	r22, 0x05A0
    2332:	70 91 a1 05 	lds	r23, 0x05A1
    2336:	80 91 a2 05 	lds	r24, 0x05A2
    233a:	90 91 a3 05 	lds	r25, 0x05A3
    233e:	0e 94 8a 49 	call	0x9314	; 0x9314 <__addsf3>
    2342:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
    2346:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    2348:	d7 fd       	sbrc	r29, 7
    234a:	06 c0       	rjmp	.+12     	; 0x2358 <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    234c:	c1 34       	cpi	r28, 0x41	; 65
    234e:	d1 05       	cpc	r29, r1
    2350:	2c f0       	brlt	.+10     	; 0x235c <Display_balance+0x80>
    2352:	c0 e4       	ldi	r28, 0x40	; 64
    2354:	d0 e0       	ldi	r29, 0x00	; 0
    2356:	02 c0       	rjmp	.+4      	; 0x235c <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    2358:	c0 e0       	ldi	r28, 0x00	; 0
    235a:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    235c:	d7 fc       	sbrc	r13, 7
    235e:	08 c0       	rjmp	.+16     	; 0x2370 <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    2360:	81 e8       	ldi	r24, 0x81	; 129
    2362:	c8 16       	cp	r12, r24
    2364:	d1 04       	cpc	r13, r1
    2366:	34 f0       	brlt	.+12     	; 0x2374 <Display_balance+0x98>
    2368:	80 e8       	ldi	r24, 0x80	; 128
    236a:	c8 2e       	mov	r12, r24
    236c:	d1 2c       	mov	r13, r1
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    2370:	c1 2c       	mov	r12, r1
    2372:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    2374:	27 e3       	ldi	r18, 0x37	; 55
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	42 e0       	ldi	r20, 0x02	; 2
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	67 e0       	ldi	r22, 0x07	; 7
    237e:	71 e0       	ldi	r23, 0x01	; 1
    2380:	8c e0       	ldi	r24, 0x0C	; 12
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    2388:	ee 24       	eor	r14, r14
    238a:	e3 94       	inc	r14
    238c:	00 e4       	ldi	r16, 0x40	; 64
    238e:	20 e8       	ldi	r18, 0x80	; 128
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	91 e0       	ldi	r25, 0x01	; 1
    2398:	0e 94 55 23 	call	0x46aa	; 0x46aa <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    239c:	05 e1       	ldi	r16, 0x15	; 21
    239e:	25 e1       	ldi	r18, 0x15	; 21
    23a0:	46 e1       	ldi	r20, 0x16	; 22
    23a2:	66 e3       	ldi	r22, 0x36	; 54
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	0e 94 55 23 	call	0x46aa	; 0x46aa <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    23ac:	08 e3       	ldi	r16, 0x38	; 56
    23ae:	20 e4       	ldi	r18, 0x40	; 64
    23b0:	48 e0       	ldi	r20, 0x08	; 8
    23b2:	60 e4       	ldi	r22, 0x40	; 64
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	91 e0       	ldi	r25, 0x01	; 1
    23b8:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    23bc:	00 e2       	ldi	r16, 0x20	; 32
    23be:	20 e6       	ldi	r18, 0x60	; 96
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	60 e2       	ldi	r22, 0x20	; 32
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    23cc:	01 e0       	ldi	r16, 0x01	; 1
    23ce:	28 e0       	ldi	r18, 0x08	; 8
    23d0:	4c 2f       	mov	r20, r28
    23d2:	6c 2d       	mov	r22, r12
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	0e 94 a7 23 	call	0x474e	; 0x474e <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	91 e0       	ldi	r25, 0x01	; 1
    23e0:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
			clear_buffer(buffer);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	91 e0       	ldi	r25, 0x01	; 1
    23e8:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
    23ec:	7d cf       	rjmp	.-262    	; 0x22e8 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	0f 91       	pop	r16
    23f4:	ef 90       	pop	r14
    23f6:	df 90       	pop	r13
    23f8:	cf 90       	pop	r12
    23fa:	08 95       	ret

000023fc <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    23fc:	0e 94 00 31 	call	0x6200	; 0x6200 <init_int>
	
	while(BUTTON1 != 0)
    2400:	1f 9b       	sbis	0x03, 7	; 3
    2402:	fa c0       	rjmp	.+500    	; 0x25f8 <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    2404:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    2406:	0e 94 2a 47 	call	0x8e54	; 0x8e54 <CenterSticks>
		}

		RxGetChannels();
    240a:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	6f e1       	ldi	r22, 0x1F	; 31
    2418:	7a e0       	ldi	r23, 0x0A	; 10
    241a:	82 e7       	ldi	r24, 0x72	; 114
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    2422:	2a e0       	ldi	r18, 0x0A	; 10
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	6f e1       	ldi	r22, 0x1F	; 31
    242c:	7a e0       	ldi	r23, 0x0A	; 10
    242e:	80 e2       	ldi	r24, 0x20	; 32
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    2436:	24 e1       	ldi	r18, 0x14	; 20
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	6f e1       	ldi	r22, 0x1F	; 31
    2440:	7a e0       	ldi	r23, 0x0A	; 10
    2442:	83 e7       	ldi	r24, 0x73	; 115
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    244a:	2e e1       	ldi	r18, 0x1E	; 30
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	6f e1       	ldi	r22, 0x1F	; 31
    2454:	7a e0       	ldi	r23, 0x0A	; 10
    2456:	83 e2       	ldi	r24, 0x23	; 35
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	46 e4       	ldi	r20, 0x46	; 70
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	6f e1       	ldi	r22, 0x1F	; 31
    2468:	7a e0       	ldi	r23, 0x0A	; 10
    246a:	8d e6       	ldi	r24, 0x6D	; 109
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    2472:	2a e0       	ldi	r18, 0x0A	; 10
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	46 e4       	ldi	r20, 0x46	; 70
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	6f e1       	ldi	r22, 0x1F	; 31
    247c:	7a e0       	ldi	r23, 0x0A	; 10
    247e:	8e e6       	ldi	r24, 0x6E	; 110
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    2486:	24 e1       	ldi	r18, 0x14	; 20
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	46 e4       	ldi	r20, 0x46	; 70
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	6f e1       	ldi	r22, 0x1F	; 31
    2490:	7a e0       	ldi	r23, 0x0A	; 10
    2492:	8f e6       	ldi	r24, 0x6F	; 111
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    249a:	2e e1       	ldi	r18, 0x1E	; 30
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	46 e4       	ldi	r20, 0x46	; 70
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	6f e1       	ldi	r22, 0x1F	; 31
    24a4:	7a e0       	ldi	r23, 0x0A	; 10
    24a6:	80 e7       	ldi	r24, 0x70	; 112
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    24ae:	80 91 31 08 	lds	r24, 0x0831
    24b2:	90 91 32 08 	lds	r25, 0x0832
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    24b6:	4a e0       	ldi	r20, 0x0A	; 10
    24b8:	6a e6       	ldi	r22, 0x6A	; 106
    24ba:	75 e0       	ldi	r23, 0x05	; 5
    24bc:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	45 e2       	ldi	r20, 0x25	; 37
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	6f e1       	ldi	r22, 0x1F	; 31
    24ca:	7a e0       	ldi	r23, 0x0A	; 10
    24cc:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    24d0:	80 91 35 08 	lds	r24, 0x0835
    24d4:	90 91 36 08 	lds	r25, 0x0836
    24d8:	4a e0       	ldi	r20, 0x0A	; 10
    24da:	6a e6       	ldi	r22, 0x6A	; 106
    24dc:	75 e0       	ldi	r23, 0x05	; 5
    24de:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
    24e2:	2a e0       	ldi	r18, 0x0A	; 10
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	45 e2       	ldi	r20, 0x25	; 37
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	6f e1       	ldi	r22, 0x1F	; 31
    24ec:	7a e0       	ldi	r23, 0x0A	; 10
    24ee:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    24f2:	80 91 37 08 	lds	r24, 0x0837
    24f6:	90 91 38 08 	lds	r25, 0x0838
    24fa:	4a e0       	ldi	r20, 0x0A	; 10
    24fc:	6a e6       	ldi	r22, 0x6A	; 106
    24fe:	75 e0       	ldi	r23, 0x05	; 5
    2500:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
    2504:	24 e1       	ldi	r18, 0x14	; 20
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	45 e2       	ldi	r20, 0x25	; 37
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	6f e1       	ldi	r22, 0x1F	; 31
    250e:	7a e0       	ldi	r23, 0x0A	; 10
    2510:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    2514:	80 91 39 08 	lds	r24, 0x0839
    2518:	90 91 3a 08 	lds	r25, 0x083A
    251c:	4a e0       	ldi	r20, 0x0A	; 10
    251e:	6a e6       	ldi	r22, 0x6A	; 106
    2520:	75 e0       	ldi	r23, 0x05	; 5
    2522:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
    2526:	2e e1       	ldi	r18, 0x1E	; 30
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	45 e2       	ldi	r20, 0x25	; 37
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	6f e1       	ldi	r22, 0x1F	; 31
    2530:	7a e0       	ldi	r23, 0x0A	; 10
    2532:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    2536:	80 91 3b 08 	lds	r24, 0x083B
    253a:	90 91 3c 08 	lds	r25, 0x083C
    253e:	4a e0       	ldi	r20, 0x0A	; 10
    2540:	6a e6       	ldi	r22, 0x6A	; 106
    2542:	75 e0       	ldi	r23, 0x05	; 5
    2544:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	44 e6       	ldi	r20, 0x64	; 100
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	6f e1       	ldi	r22, 0x1F	; 31
    2552:	7a e0       	ldi	r23, 0x0A	; 10
    2554:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    2558:	80 91 3d 08 	lds	r24, 0x083D
    255c:	90 91 3e 08 	lds	r25, 0x083E
    2560:	4a e0       	ldi	r20, 0x0A	; 10
    2562:	6a e6       	ldi	r22, 0x6A	; 106
    2564:	75 e0       	ldi	r23, 0x05	; 5
    2566:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
    256a:	2a e0       	ldi	r18, 0x0A	; 10
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	44 e6       	ldi	r20, 0x64	; 100
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	6f e1       	ldi	r22, 0x1F	; 31
    2574:	7a e0       	ldi	r23, 0x0A	; 10
    2576:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    257a:	80 91 3f 08 	lds	r24, 0x083F
    257e:	90 91 40 08 	lds	r25, 0x0840
    2582:	4a e0       	ldi	r20, 0x0A	; 10
    2584:	6a e6       	ldi	r22, 0x6A	; 106
    2586:	75 e0       	ldi	r23, 0x05	; 5
    2588:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
    258c:	24 e1       	ldi	r18, 0x14	; 20
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	44 e6       	ldi	r20, 0x64	; 100
    2592:	50 e0       	ldi	r21, 0x00	; 0
    2594:	6f e1       	ldi	r22, 0x1F	; 31
    2596:	7a e0       	ldi	r23, 0x0A	; 10
    2598:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    259c:	80 91 41 08 	lds	r24, 0x0841
    25a0:	90 91 42 08 	lds	r25, 0x0842
    25a4:	4a e0       	ldi	r20, 0x0A	; 10
    25a6:	6a e6       	ldi	r22, 0x6A	; 106
    25a8:	75 e0       	ldi	r23, 0x05	; 5
    25aa:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
    25ae:	2e e1       	ldi	r18, 0x1E	; 30
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	44 e6       	ldi	r20, 0x64	; 100
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	6f e1       	ldi	r22, 0x1F	; 31
    25b8:	7a e0       	ldi	r23, 0x0A	; 10
    25ba:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    25be:	29 e3       	ldi	r18, 0x39	; 57
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	67 e0       	ldi	r22, 0x07	; 7
    25c8:	71 e0       	ldi	r23, 0x01	; 1
    25ca:	8c e0       	ldi	r24, 0x0C	; 12
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    25d2:	27 e3       	ldi	r18, 0x37	; 55
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4e e6       	ldi	r20, 0x6E	; 110
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	6f e1       	ldi	r22, 0x1F	; 31
    25dc:	7a e0       	ldi	r23, 0x0A	; 10
    25de:	8c e3       	ldi	r24, 0x3C	; 60
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	91 e0       	ldi	r25, 0x01	; 1
    25ea:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
		clear_buffer(buffer);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	91 e0       	ldi	r25, 0x01	; 1
    25f2:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
    25f6:	04 cf       	rjmp	.-504    	; 0x2400 <Display_rcinput+0x4>
	}
}
    25f8:	08 95       	ret

000025fa <Display_sensors>:
// Code
//************************************************************

void Display_sensors(void)
{
	while(BUTTON1 != 0)
    25fa:	1f 9b       	sbis	0x03, 7	; 3
    25fc:	ed c0       	rjmp	.+474    	; 0x27d8 <Display_sensors+0x1de>
	{
	
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    25fe:	1c 99       	sbic	0x03, 4	; 3
    2600:	1a c0       	rjmp	.+52     	; 0x2636 <Display_sensors+0x3c>
		{
			// Wait until finger off button
			while(BUTTON4 == 0)
    2602:	1c 99       	sbic	0x03, 4	; 3
    2604:	0a c0       	rjmp	.+20     	; 0x261a <Display_sensors+0x20>
    2606:	2f e3       	ldi	r18, 0x3F	; 63
    2608:	8d e0       	ldi	r24, 0x0D	; 13
    260a:	93 e0       	ldi	r25, 0x03	; 3
    260c:	21 50       	subi	r18, 0x01	; 1
    260e:	80 40       	sbci	r24, 0x00	; 0
    2610:	90 40       	sbci	r25, 0x00	; 0
    2612:	e1 f7       	brne	.-8      	; 0x260c <Display_sensors+0x12>
    2614:	00 c0       	rjmp	.+0      	; 0x2616 <Display_sensors+0x1c>
    2616:	00 00       	nop
    2618:	f4 cf       	rjmp	.-24     	; 0x2602 <Display_sensors+0x8>
    261a:	2f e3       	ldi	r18, 0x3F	; 63
    261c:	82 e4       	ldi	r24, 0x42	; 66
    261e:	9f e0       	ldi	r25, 0x0F	; 15
    2620:	21 50       	subi	r18, 0x01	; 1
    2622:	80 40       	sbci	r24, 0x00	; 0
    2624:	90 40       	sbci	r25, 0x00	; 0
    2626:	e1 f7       	brne	.-8      	; 0x2620 <Display_sensors+0x26>
    2628:	00 c0       	rjmp	.+0      	; 0x262a <Display_sensors+0x30>
    262a:	00 00       	nop
			
			// Pause until steady		
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();		
    262c:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	0e 94 52 10 	call	0x20a4	; 0x20a4 <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    2636:	1d 99       	sbic	0x03, 5	; 3
    2638:	0c c0       	rjmp	.+24     	; 0x2652 <Display_sensors+0x58>
    263a:	2f e3       	ldi	r18, 0x3F	; 63
    263c:	82 e4       	ldi	r24, 0x42	; 66
    263e:	9f e0       	ldi	r25, 0x0F	; 15
    2640:	21 50       	subi	r18, 0x01	; 1
    2642:	80 40       	sbci	r24, 0x00	; 0
    2644:	90 40       	sbci	r25, 0x00	; 0
    2646:	e1 f7       	brne	.-8      	; 0x2640 <Display_sensors+0x46>
    2648:	00 c0       	rjmp	.+0      	; 0x264a <Display_sensors+0x50>
    264a:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <CalibrateAcc>
		}

		ReadGyros();
    2652:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <ReadGyros>
		ReadAcc();
    2656:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	45 e2       	ldi	r20, 0x25	; 37
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	6f e1       	ldi	r22, 0x1F	; 31
    2664:	7a e0       	ldi	r23, 0x0A	; 10
    2666:	8a e1       	ldi	r24, 0x1A	; 26
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	4d e4       	ldi	r20, 0x4D	; 77
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	6f e1       	ldi	r22, 0x1F	; 31
    2678:	7a e0       	ldi	r23, 0x0A	; 10
    267a:	8e e1       	ldi	r24, 0x1E	; 30
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    2682:	2d e0       	ldi	r18, 0x0D	; 13
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	45 e0       	ldi	r20, 0x05	; 5
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	6f e1       	ldi	r22, 0x1F	; 31
    268c:	7a e0       	ldi	r23, 0x0A	; 10
    268e:	8b e1       	ldi	r24, 0x1B	; 27
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    2696:	27 e1       	ldi	r18, 0x17	; 23
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	45 e0       	ldi	r20, 0x05	; 5
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	6f e1       	ldi	r22, 0x1F	; 31
    26a0:	7a e0       	ldi	r23, 0x0A	; 10
    26a2:	8c e1       	ldi	r24, 0x1C	; 28
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    26aa:	21 e2       	ldi	r18, 0x21	; 33
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	45 e0       	ldi	r20, 0x05	; 5
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	6f e1       	ldi	r22, 0x1F	; 31
    26b4:	7a e0       	ldi	r23, 0x0A	; 10
    26b6:	8d e1       	ldi	r24, 0x1D	; 29
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
    26be:	4a e0       	ldi	r20, 0x0A	; 10
    26c0:	6a e6       	ldi	r22, 0x6A	; 106
    26c2:	75 e0       	ldi	r23, 0x05	; 5
    26c4:	80 91 7a 05 	lds	r24, 0x057A
    26c8:	90 91 7b 05 	lds	r25, 0x057B
    26cc:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    26d0:	2d e0       	ldi	r18, 0x0D	; 13
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	48 e2       	ldi	r20, 0x28	; 40
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	6f e1       	ldi	r22, 0x1F	; 31
    26da:	7a e0       	ldi	r23, 0x0A	; 10
    26dc:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
    26e0:	4a e0       	ldi	r20, 0x0A	; 10
    26e2:	6a e6       	ldi	r22, 0x6A	; 106
    26e4:	75 e0       	ldi	r23, 0x05	; 5
    26e6:	80 91 7c 05 	lds	r24, 0x057C
    26ea:	90 91 7d 05 	lds	r25, 0x057D
    26ee:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    26f2:	27 e1       	ldi	r18, 0x17	; 23
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	48 e2       	ldi	r20, 0x28	; 40
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	6f e1       	ldi	r22, 0x1F	; 31
    26fc:	7a e0       	ldi	r23, 0x0A	; 10
    26fe:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
    2702:	4a e0       	ldi	r20, 0x0A	; 10
    2704:	6a e6       	ldi	r22, 0x6A	; 106
    2706:	75 e0       	ldi	r23, 0x05	; 5
    2708:	80 91 7e 05 	lds	r24, 0x057E
    270c:	90 91 7f 05 	lds	r25, 0x057F
    2710:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2714:	21 e2       	ldi	r18, 0x21	; 33
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	48 e2       	ldi	r20, 0x28	; 40
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	6f e1       	ldi	r22, 0x1F	; 31
    271e:	7a e0       	ldi	r23, 0x0A	; 10
    2720:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
    2724:	4a e0       	ldi	r20, 0x0A	; 10
    2726:	6a e6       	ldi	r22, 0x6A	; 106
    2728:	75 e0       	ldi	r23, 0x05	; 5
    272a:	80 91 3e 05 	lds	r24, 0x053E
    272e:	90 91 3f 05 	lds	r25, 0x053F
    2732:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    2736:	2d e0       	ldi	r18, 0x0D	; 13
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e5       	ldi	r20, 0x50	; 80
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	6f e1       	ldi	r22, 0x1F	; 31
    2740:	7a e0       	ldi	r23, 0x0A	; 10
    2742:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
    2746:	4a e0       	ldi	r20, 0x0A	; 10
    2748:	6a e6       	ldi	r22, 0x6A	; 106
    274a:	75 e0       	ldi	r23, 0x05	; 5
    274c:	80 91 40 05 	lds	r24, 0x0540
    2750:	90 91 41 05 	lds	r25, 0x0541
    2754:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    2758:	27 e1       	ldi	r18, 0x17	; 23
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e5       	ldi	r20, 0x50	; 80
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	6f e1       	ldi	r22, 0x1F	; 31
    2762:	7a e0       	ldi	r23, 0x0A	; 10
    2764:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
    2768:	4a e0       	ldi	r20, 0x0A	; 10
    276a:	6a e6       	ldi	r22, 0x6A	; 106
    276c:	75 e0       	ldi	r23, 0x05	; 5
    276e:	80 91 42 05 	lds	r24, 0x0542
    2772:	90 91 43 05 	lds	r25, 0x0543
    2776:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    277a:	21 e2       	ldi	r18, 0x21	; 33
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e5       	ldi	r20, 0x50	; 80
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	6f e1       	ldi	r22, 0x1F	; 31
    2784:	7a e0       	ldi	r23, 0x0A	; 10
    2786:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    278a:	29 e3       	ldi	r18, 0x39	; 57
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	67 e0       	ldi	r22, 0x07	; 7
    2794:	71 e0       	ldi	r23, 0x01	; 1
    2796:	8c e0       	ldi	r24, 0x0C	; 12
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    279e:	27 e3       	ldi	r18, 0x37	; 55
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4c e6       	ldi	r20, 0x6C	; 108
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	6f e1       	ldi	r22, 0x1F	; 31
    27a8:	7a e0       	ldi	r23, 0x0A	; 10
    27aa:	8c e3       	ldi	r24, 0x3C	; 60
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    27b2:	27 e3       	ldi	r18, 0x37	; 55
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4b e4       	ldi	r20, 0x4B	; 75
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	6f e1       	ldi	r22, 0x1F	; 31
    27bc:	7a e0       	ldi	r23, 0x0A	; 10
    27be:	89 e1       	ldi	r24, 0x19	; 25
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
		clear_buffer(buffer);
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
    27d6:	11 cf       	rjmp	.-478    	; 0x25fa <Display_sensors>
	}
}
    27d8:	08 95       	ret

000027da <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    27da:	bf 92       	push	r11
    27dc:	cf 92       	push	r12
    27de:	df 92       	push	r13
    27e0:	ef 92       	push	r14
    27e2:	ff 92       	push	r15
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <Display_status+0x14>
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <Display_status+0x16>
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	50 e0       	ldi	r21, 0x00	; 0
    2804:	6f e1       	ldi	r22, 0x1F	; 31
    2806:	7a e0       	ldi	r23, 0x0A	; 10
    2808:	88 e0       	ldi	r24, 0x08	; 8
    280a:	91 e0       	ldi	r25, 0x01	; 1
    280c:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    2810:	2c e0       	ldi	r18, 0x0C	; 12
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	6f e1       	ldi	r22, 0x1F	; 31
    281a:	7a e0       	ldi	r23, 0x0A	; 10
    281c:	8a e0       	ldi	r24, 0x0A	; 10
    281e:	91 e0       	ldi	r25, 0x01	; 1
    2820:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    2824:	28 e1       	ldi	r18, 0x18	; 24
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	6f e1       	ldi	r22, 0x1F	; 31
    282e:	7a e0       	ldi	r23, 0x0A	; 10
    2830:	8b e0       	ldi	r24, 0x0B	; 11
    2832:	91 e0       	ldi	r25, 0x01	; 1
    2834:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    2838:	28 e1       	ldi	r18, 0x18	; 24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	48 e5       	ldi	r20, 0x58	; 88
    283e:	50 e0       	ldi	r21, 0x00	; 0
    2840:	6f e1       	ldi	r22, 0x1F	; 31
    2842:	7a e0       	ldi	r23, 0x0A	; 10
    2844:	87 e1       	ldi	r24, 0x17	; 23
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
	
	//LCD_Display_Text((143 + Config.Preset),(const unsigned char*)Verdana8,94,0); // Preset
	print_menu_text(0, 1, (143 + Config.Preset), 94, 0); // Preset
    284c:	40 91 49 06 	lds	r20, 0x0649
    2850:	55 27       	eor	r21, r21
    2852:	47 fd       	sbrc	r20, 7
    2854:	50 95       	com	r21
    2856:	41 57       	subi	r20, 0x71	; 113
    2858:	5f 4f       	sbci	r21, 0xFF	; 255
    285a:	00 e0       	ldi	r16, 0x00	; 0
    285c:	2e e5       	ldi	r18, 0x5E	; 94
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 be 31 	call	0x637c	; 0x637c <print_menu_text>

	
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    2868:	2b e3       	ldi	r18, 0x3B	; 59
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	67 e0       	ldi	r22, 0x07	; 7
    2872:	71 e0       	ldi	r23, 0x01	; 1
    2874:	89 e0       	ldi	r24, 0x09	; 9
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    287c:	27 e3       	ldi	r18, 0x37	; 55
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a e0       	ldi	r20, 0x0A	; 10
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	6f e1       	ldi	r22, 0x1F	; 31
    2886:	7a e0       	ldi	r23, 0x0A	; 10
    2888:	8e e0       	ldi	r24, 0x0E	; 14
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    2890:	40 91 e1 05 	lds	r20, 0x05E1
    2894:	55 27       	eor	r21, r21
    2896:	47 fd       	sbrc	r20, 7
    2898:	50 95       	com	r21
    289a:	42 5c       	subi	r20, 0xC2	; 194
    289c:	5f 4f       	sbci	r21, 0xFF	; 255
    289e:	0c e0       	ldi	r16, 0x0C	; 12
    28a0:	2d e2       	ldi	r18, 0x2D	; 45
    28a2:	61 e0       	ldi	r22, 0x01	; 1
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	0e 94 be 31 	call	0x637c	; 0x637c <print_menu_text>
    28ac:	4a e0       	ldi	r20, 0x0A	; 10
    28ae:	6a e6       	ldi	r22, 0x6A	; 106
    28b0:	75 e0       	ldi	r23, 0x05	; 5
    28b2:	80 91 21 05 	lds	r24, 0x0521
    28b6:	90 91 22 05 	lds	r25, 0x0522
    28ba:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    28be:	28 e1       	ldi	r18, 0x18	; 24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	4e e6       	ldi	r20, 0x6E	; 110
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	6f e1       	ldi	r22, 0x1F	; 31
    28c8:	7a e0       	ldi	r23, 0x0A	; 10
    28ca:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    28ce:	80 91 e1 05 	lds	r24, 0x05E1
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	d9 f4       	brne	.+54     	; 0x290c <Display_status+0x132>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    28d6:	2c e0       	ldi	r18, 0x0C	; 12
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4d e4       	ldi	r20, 0x4D	; 77
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	6f e1       	ldi	r22, 0x1F	; 31
    28e0:	7a e0       	ldi	r23, 0x0A	; 10
    28e2:	88 e1       	ldi	r24, 0x18	; 24
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    28ea:	80 91 1c 05 	lds	r24, 0x051C
    28ee:	90 91 1d 05 	lds	r25, 0x051D
    28f2:	4a e0       	ldi	r20, 0x0A	; 10
    28f4:	6a e6       	ldi	r22, 0x6A	; 106
    28f6:	75 e0       	ldi	r23, 0x05	; 5
    28f8:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
    28fc:	2c e0       	ldi	r18, 0x0C	; 12
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4e e6       	ldi	r20, 0x6E	; 110
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	6f e1       	ldi	r22, 0x1F	; 31
    2906:	7a e0       	ldi	r23, 0x0A	; 10
    2908:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    290c:	80 91 21 05 	lds	r24, 0x0521
    2910:	90 91 22 05 	lds	r25, 0x0522
    2914:	18 16       	cp	r1, r24
    2916:	19 06       	cpc	r1, r25
    2918:	4c f0       	brlt	.+18     	; 0x292c <Display_status+0x152>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    291a:	28 e1       	ldi	r18, 0x18	; 24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	4d e2       	ldi	r20, 0x2D	; 45
    2920:	50 e0       	ldi	r21, 0x00	; 0
    2922:	6f e1       	ldi	r22, 0x1F	; 31
    2924:	7a e0       	ldi	r23, 0x0A	; 10
    2926:	80 e3       	ldi	r24, 0x30	; 48
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	31 c0       	rjmp	.+98     	; 0x298e <Display_status+0x1b4>
	}
	else if (transition >= 100)
    292c:	84 36       	cpi	r24, 0x64	; 100
    292e:	91 05       	cpc	r25, r1
    2930:	4c f0       	brlt	.+18     	; 0x2944 <Display_status+0x16a>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    2932:	28 e1       	ldi	r18, 0x18	; 24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	4d e2       	ldi	r20, 0x2D	; 45
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	6f e1       	ldi	r22, 0x1F	; 31
    293c:	7a e0       	ldi	r23, 0x0A	; 10
    293e:	82 e3       	ldi	r24, 0x32	; 50
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	25 c0       	rjmp	.+74     	; 0x298e <Display_status+0x1b4>
	}
	else if (transition == Config.Transition_P1n)
    2944:	20 91 e7 05 	lds	r18, 0x05E7
    2948:	33 27       	eor	r19, r19
    294a:	27 fd       	sbrc	r18, 7
    294c:	30 95       	com	r19
    294e:	82 17       	cp	r24, r18
    2950:	93 07       	cpc	r25, r19
    2952:	49 f4       	brne	.+18     	; 0x2966 <Display_status+0x18c>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    2954:	28 e1       	ldi	r18, 0x18	; 24
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4d e2       	ldi	r20, 0x2D	; 45
    295a:	50 e0       	ldi	r21, 0x00	; 0
    295c:	6f e1       	ldi	r22, 0x1F	; 31
    295e:	7a e0       	ldi	r23, 0x0A	; 10
    2960:	81 e3       	ldi	r24, 0x31	; 49
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	14 c0       	rjmp	.+40     	; 0x298e <Display_status+0x1b4>
	}
	else if (transition < Config.Transition_P1n)
    2966:	82 17       	cp	r24, r18
    2968:	93 07       	cpc	r25, r19
    296a:	4c f4       	brge	.+18     	; 0x297e <Display_status+0x1a4>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    296c:	28 e1       	ldi	r18, 0x18	; 24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	4d e2       	ldi	r20, 0x2D	; 45
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	6f e1       	ldi	r22, 0x1F	; 31
    2976:	7a e0       	ldi	r23, 0x0A	; 10
    2978:	83 e3       	ldi	r24, 0x33	; 51
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	08 c0       	rjmp	.+16     	; 0x298e <Display_status+0x1b4>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    297e:	28 e1       	ldi	r18, 0x18	; 24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	4d e2       	ldi	r20, 0x2D	; 45
    2984:	50 e0       	ldi	r21, 0x00	; 0
    2986:	6f e1       	ldi	r22, 0x1F	; 31
    2988:	7a e0       	ldi	r23, 0x0A	; 10
    298a:	84 e3       	ldi	r24, 0x34	; 52
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
	}


	// Don't display battery text if there are error messages
	if (General_error == 0)
    2992:	80 91 20 05 	lds	r24, 0x0520
    2996:	81 11       	cpse	r24, r1
    2998:	85 c0       	rjmp	.+266    	; 0x2aa4 <Display_status+0x2ca>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(133,(const unsigned char*)Verdana8,0,36); 	// Battery
    299a:	24 e2       	ldi	r18, 0x24	; 36
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	50 e0       	ldi	r21, 0x00	; 0
    29a2:	6f e1       	ldi	r22, 0x1F	; 31
    29a4:	7a e0       	ldi	r23, 0x0A	; 10
    29a6:	85 e8       	ldi	r24, 0x85	; 133
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>

		vbat_temp = GetVbat();
    29ae:	0e 94 6a 49 	call	0x92d4	; 0x92d4 <GetVbat>
    29b2:	6c 01       	movw	r12, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    29b4:	64 e6       	ldi	r22, 0x64	; 100
    29b6:	70 e0       	ldi	r23, 0x00	; 0
    29b8:	0e 94 a4 4b 	call	0x9748	; 0x9748 <__udivmodhi4>
    29bc:	8b 01       	movw	r16, r22
    29be:	4a e0       	ldi	r20, 0x0A	; 10
    29c0:	6a e6       	ldi	r22, 0x6A	; 106
    29c2:	75 e0       	ldi	r23, 0x05	; 5
    29c4:	c8 01       	movw	r24, r16
    29c6:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    29ca:	ae 01       	movw	r20, r28
    29cc:	4f 5f       	subi	r20, 0xFF	; 255
    29ce:	5f 4f       	sbci	r21, 0xFF	; 255
    29d0:	6f e1       	ldi	r22, 0x1F	; 31
    29d2:	7a e0       	ldi	r23, 0x0A	; 10
    29d4:	0e 94 89 40 	call	0x8112	; 0x8112 <mugui_text_sizestring>
    29d8:	4a e0       	ldi	r20, 0x0A	; 10
    29da:	6a e6       	ldi	r22, 0x6A	; 106
    29dc:	75 e0       	ldi	r23, 0x05	; 5
    29de:	c8 01       	movw	r24, r16
    29e0:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    29e4:	24 e2       	ldi	r18, 0x24	; 36
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4d e2       	ldi	r20, 0x2D	; 45
    29ea:	50 e0       	ldi	r21, 0x00	; 0
    29ec:	6f e1       	ldi	r22, 0x1F	; 31
    29ee:	7a e0       	ldi	r23, 0x0A	; 10
    29f0:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    29f4:	2c e9       	ldi	r18, 0x9C	; 156
    29f6:	20 03       	mulsu	r18, r16
    29f8:	70 01       	movw	r14, r0
    29fa:	21 9f       	mul	r18, r17
    29fc:	f0 0c       	add	r15, r0
    29fe:	11 24       	eor	r1, r1
    2a00:	ec 0c       	add	r14, r12
    2a02:	fd 1c       	adc	r15, r13

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2a04:	09 81       	ldd	r16, Y+1	; 0x01
    2a06:	11 27       	eor	r17, r17
    2a08:	07 fd       	sbrc	r16, 7
    2a0a:	10 95       	com	r17
    2a0c:	03 5d       	subi	r16, 0xD3	; 211
    2a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a10:	24 e2       	ldi	r18, 0x24	; 36
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	a8 01       	movw	r20, r16
    2a16:	6f e1       	ldi	r22, 0x1F	; 31
    2a18:	7a e0       	ldi	r23, 0x0A	; 10
    2a1a:	8c e0       	ldi	r24, 0x0C	; 12
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2a22:	ae 01       	movw	r20, r28
    2a24:	4f 5f       	subi	r20, 0xFF	; 255
    2a26:	5f 4f       	sbci	r21, 0xFF	; 255
    2a28:	6f e1       	ldi	r22, 0x1F	; 31
    2a2a:	7a e0       	ldi	r23, 0x0A	; 10
    2a2c:	8a e0       	ldi	r24, 0x0A	; 10
    2a2e:	95 e0       	ldi	r25, 0x05	; 5
    2a30:	0e 94 89 40 	call	0x8112	; 0x8112 <mugui_text_sizestring>
		pos3 = size.x;
    2a34:	c9 80       	ldd	r12, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2a36:	ae 01       	movw	r20, r28
    2a38:	4f 5f       	subi	r20, 0xFF	; 255
    2a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3c:	6f e1       	ldi	r22, 0x1F	; 31
    2a3e:	7a e0       	ldi	r23, 0x0A	; 10
    2a40:	8c e0       	ldi	r24, 0x0C	; 12
    2a42:	95 e0       	ldi	r25, 0x05	; 5
    2a44:	0e 94 89 40 	call	0x8112	; 0x8112 <mugui_text_sizestring>
		pos2 = size.x;
    2a48:	b9 80       	ldd	r11, Y+1	; 0x01
    2a4a:	dd 24       	eor	r13, r13
    2a4c:	c7 fc       	sbrc	r12, 7
    2a4e:	d0 94       	com	r13

		if (vbat_temp >= 10)
    2a50:	8a e0       	ldi	r24, 0x0A	; 10
    2a52:	e8 16       	cp	r14, r24
    2a54:	f1 04       	cpc	r15, r1
    2a56:	40 f0       	brcs	.+16     	; 0x2a68 <Display_status+0x28e>
    2a58:	4a e0       	ldi	r20, 0x0A	; 10
    2a5a:	6a e6       	ldi	r22, 0x6A	; 106
    2a5c:	75 e0       	ldi	r23, 0x05	; 5
    2a5e:	c7 01       	movw	r24, r14
    2a60:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2a64:	a8 01       	movw	r20, r16
    2a66:	16 c0       	rjmp	.+44     	; 0x2a94 <Display_status+0x2ba>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2a68:	a8 01       	movw	r20, r16
    2a6a:	4c 0d       	add	r20, r12
    2a6c:	5d 1d       	adc	r21, r13
    2a6e:	24 e2       	ldi	r18, 0x24	; 36
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	6f e1       	ldi	r22, 0x1F	; 31
    2a74:	7a e0       	ldi	r23, 0x0A	; 10
    2a76:	8d e0       	ldi	r24, 0x0D	; 13
    2a78:	91 e0       	ldi	r25, 0x01	; 1
    2a7a:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
    2a7e:	4a e0       	ldi	r20, 0x0A	; 10
    2a80:	6a e6       	ldi	r22, 0x6A	; 106
    2a82:	75 e0       	ldi	r23, 0x05	; 5
    2a84:	c7 01       	movw	r24, r14
    2a86:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2a8a:	a8 01       	movw	r20, r16
    2a8c:	4b 0d       	add	r20, r11
    2a8e:	51 1d       	adc	r21, r1
    2a90:	b7 fc       	sbrc	r11, 7
    2a92:	5a 95       	dec	r21
    2a94:	4c 0d       	add	r20, r12
    2a96:	5d 1d       	adc	r21, r13
    2a98:	24 e2       	ldi	r18, 0x24	; 36
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	6f e1       	ldi	r22, 0x1F	; 31
    2a9e:	7a e0       	ldi	r23, 0x0A	; 10
    2aa0:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
		}
	}
	
	// Display error messages
	if (General_error != 0)
    2aa4:	80 91 20 05 	lds	r24, 0x0520
    2aa8:	88 23       	and	r24, r24
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <Display_status+0x2d4>
    2aac:	53 c0       	rjmp	.+166    	; 0x2b54 <Display_status+0x37a>
	{
		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    2aae:	80 91 20 05 	lds	r24, 0x0520
    2ab2:	83 ff       	sbrs	r24, 3
    2ab4:	13 c0       	rjmp	.+38     	; 0x2adc <Display_status+0x302>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    2ab6:	25 e2       	ldi	r18, 0x25	; 37
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4f e0       	ldi	r20, 0x0F	; 15
    2abc:	50 e0       	ldi	r21, 0x00	; 0
    2abe:	61 e7       	ldi	r22, 0x71	; 113
    2ac0:	71 e0       	ldi	r23, 0x01	; 1
    2ac2:	86 e8       	ldi	r24, 0x86	; 134
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    2aca:	25 e2       	ldi	r18, 0x25	; 37
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	4f e4       	ldi	r20, 0x4F	; 79
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	61 e7       	ldi	r22, 0x71	; 113
    2ad4:	71 e0       	ldi	r23, 0x01	; 1
    2ad6:	8f e0       	ldi	r24, 0x0F	; 15
    2ad8:	91 e0       	ldi	r25, 0x01	; 1
    2ada:	3a c0       	rjmp	.+116    	; 0x2b50 <Display_status+0x376>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    2adc:	80 91 20 05 	lds	r24, 0x0520
    2ae0:	81 ff       	sbrs	r24, 1
    2ae2:	13 c0       	rjmp	.+38     	; 0x2b0a <Display_status+0x330>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    2ae4:	25 e2       	ldi	r18, 0x25	; 37
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	4e e1       	ldi	r20, 0x1E	; 30
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	61 e7       	ldi	r22, 0x71	; 113
    2aee:	71 e0       	ldi	r23, 0x01	; 1
    2af0:	8b e4       	ldi	r24, 0x4B	; 75
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    2af8:	25 e2       	ldi	r18, 0x25	; 37
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	47 e3       	ldi	r20, 0x37	; 55
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	61 e7       	ldi	r22, 0x71	; 113
    2b02:	71 e0       	ldi	r23, 0x01	; 1
    2b04:	80 e1       	ldi	r24, 0x10	; 16
    2b06:	91 e0       	ldi	r25, 0x01	; 1
    2b08:	23 c0       	rjmp	.+70     	; 0x2b50 <Display_status+0x376>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    2b0a:	80 91 20 05 	lds	r24, 0x0520
    2b0e:	80 ff       	sbrs	r24, 0
    2b10:	13 c0       	rjmp	.+38     	; 0x2b38 <Display_status+0x35e>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    2b12:	25 e2       	ldi	r18, 0x25	; 37
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	4b e0       	ldi	r20, 0x0B	; 11
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	61 e7       	ldi	r22, 0x71	; 113
    2b1c:	71 e0       	ldi	r23, 0x01	; 1
    2b1e:	89 e6       	ldi	r24, 0x69	; 105
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    2b26:	25 e2       	ldi	r18, 0x25	; 37
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	42 e5       	ldi	r20, 0x52	; 82
    2b2c:	50 e0       	ldi	r21, 0x00	; 0
    2b2e:	61 e7       	ldi	r22, 0x71	; 113
    2b30:	71 e0       	ldi	r23, 0x01	; 1
    2b32:	8e e0       	ldi	r24, 0x0E	; 14
    2b34:	91 e0       	ldi	r25, 0x01	; 1
    2b36:	0c c0       	rjmp	.+24     	; 0x2b50 <Display_status+0x376>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2b38:	80 91 20 05 	lds	r24, 0x0520
    2b3c:	82 ff       	sbrs	r24, 2
    2b3e:	0a c0       	rjmp	.+20     	; 0x2b54 <Display_status+0x37a>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    2b40:	25 e2       	ldi	r18, 0x25	; 37
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	49 e1       	ldi	r20, 0x19	; 25
    2b46:	50 e0       	ldi	r21, 0x00	; 0
    2b48:	61 e7       	ldi	r22, 0x71	; 113
    2b4a:	71 e0       	ldi	r23, 0x01	; 1
    2b4c:	82 e1       	ldi	r24, 0x12	; 18
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
	clear_buffer(buffer);
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	91 e0       	ldi	r25, 0x01	; 1
    2b60:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
}
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	ff 90       	pop	r15
    2b76:	ef 90       	pop	r14
    2b78:	df 90       	pop	r13
    2b7a:	cf 90       	pop	r12
    2b7c:	bf 90       	pop	r11
    2b7e:	08 95       	ret

00002b80 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2b80:	af 92       	push	r10
    2b82:	bf 92       	push	r11
    2b84:	cf 92       	push	r12
    2b86:	df 92       	push	r13
    2b88:	ef 92       	push	r14
    2b8a:	ff 92       	push	r15
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	cf 93       	push	r28
    2b92:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2b94:	d0 90 e8 05 	lds	r13, 0x05E8
	temp_elevator = Config.ElevatorPol;
    2b98:	f0 90 e9 05 	lds	r15, 0x05E9
	temp_rudder = Config.RudderPol;
    2b9c:	a0 90 c0 07 	lds	r10, 0x07C0

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2ba0:	10 92 e8 05 	sts	0x05E8, r1
	Config.ElevatorPol =  NORMAL;
    2ba4:	10 92 e9 05 	sts	0x05E9, r1
	Config.RudderPol = NORMAL;
    2ba8:	10 92 c0 07 	sts	0x07C0, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2bac:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2bae:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2bb0:	1f 9b       	sbis	0x03, 7	; 3
    2bb2:	b6 c0       	rjmp	.+364    	; 0x2d20 <Display_sticks+0x1a0>
    2bb4:	c1 11       	cpse	r28, r1
    2bb6:	b6 c0       	rjmp	.+364    	; 0x2d24 <Display_sticks+0x1a4>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	91 e0       	ldi	r25, 0x01	; 1
    2bbc:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
    2bc0:	92 e0       	ldi	r25, 0x02	; 2
    2bc2:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2bc4:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2bc6:	61 e1       	ldi	r22, 0x11	; 17
    2bc8:	61 0f       	add	r22, r17
    2bca:	ee 24       	eor	r14, r14
    2bcc:	e3 94       	inc	r14
    2bce:	08 e2       	ldi	r16, 0x28	; 40
    2bd0:	28 e2       	ldi	r18, 0x28	; 40
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	0e 94 55 23 	call	0x46aa	; 0x46aa <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2bdc:	86 e2       	ldi	r24, 0x26	; 38
    2bde:	b8 2e       	mov	r11, r24
    2be0:	b1 0e       	add	r11, r17
    2be2:	20 e3       	ldi	r18, 0x30	; 48
    2be4:	21 0f       	add	r18, r17
    2be6:	03 e0       	ldi	r16, 0x03	; 3
    2be8:	44 e1       	ldi	r20, 0x14	; 20
    2bea:	6b 2d       	mov	r22, r11
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	91 e0       	ldi	r25, 0x01	; 1
    2bf0:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2bf4:	28 e3       	ldi	r18, 0x38	; 56
    2bf6:	21 0f       	add	r18, r17
    2bf8:	69 e2       	ldi	r22, 0x29	; 41
    2bfa:	61 0f       	add	r22, r17
    2bfc:	06 e0       	ldi	r16, 0x06	; 6
    2bfe:	45 e1       	ldi	r20, 0x15	; 21
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	91 e0       	ldi	r25, 0x01	; 1
    2c04:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2c08:	01 e0       	ldi	r16, 0x01	; 1
    2c0a:	22 e0       	ldi	r18, 0x02	; 2
    2c0c:	45 e1       	ldi	r20, 0x15	; 21
    2c0e:	6b 2d       	mov	r22, r11
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	91 e0       	ldi	r25, 0x01	; 1
    2c14:	0e 94 a7 23 	call	0x474e	; 0x474e <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2c18:	63 e3       	ldi	r22, 0x33	; 51
    2c1a:	61 0f       	add	r22, r17
    2c1c:	24 e0       	ldi	r18, 0x04	; 4
    2c1e:	45 e0       	ldi	r20, 0x05	; 5
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	91 e0       	ldi	r25, 0x01	; 1
    2c24:	0e 94 a7 23 	call	0x474e	; 0x474e <fillcircle>
    2c28:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2c2a:	11 f0       	breq	.+4      	; 0x2c30 <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2c2c:	14 e3       	ldi	r17, 0x34	; 52
    2c2e:	cb cf       	rjmp	.-106    	; 0x2bc6 <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2c30:	29 e3       	ldi	r18, 0x39	; 57
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	50 e0       	ldi	r21, 0x00	; 0
    2c38:	67 e0       	ldi	r22, 0x07	; 7
    2c3a:	71 e0       	ldi	r23, 0x01	; 1
    2c3c:	8c e0       	ldi	r24, 0x0C	; 12
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2c44:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2c48:	80 91 35 08 	lds	r24, 0x0835
    2c4c:	90 91 36 08 	lds	r25, 0x0836
    2c50:	80 33       	cpi	r24, 0x30	; 48
    2c52:	98 4f       	sbci	r25, 0xF8	; 248
    2c54:	3c f0       	brlt	.+14     	; 0x2c64 <Display_sticks+0xe4>
    2c56:	80 91 35 08 	lds	r24, 0x0835
    2c5a:	90 91 36 08 	lds	r25, 0x0836
    2c5e:	81 3d       	cpi	r24, 0xD1	; 209
    2c60:	97 40       	sbci	r25, 0x07	; 7
    2c62:	6c f0       	brlt	.+26     	; 0x2c7e <Display_sticks+0xfe>
    2c64:	d1 11       	cpse	r29, r1
    2c66:	0b c0       	rjmp	.+22     	; 0x2c7e <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2c68:	2b e2       	ldi	r18, 0x2B	; 43
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e1       	ldi	r20, 0x10	; 16
    2c6e:	50 e0       	ldi	r21, 0x00	; 0
    2c70:	61 e7       	ldi	r22, 0x71	; 113
    2c72:	71 e0       	ldi	r23, 0x01	; 1
    2c74:	87 e8       	ldi	r24, 0x87	; 135
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
    2c7c:	4c c0       	rjmp	.+152    	; 0x2d16 <Display_sticks+0x196>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
    2c7e:	80 91 35 08 	lds	r24, 0x0835
    2c82:	90 91 36 08 	lds	r25, 0x0836
    2c86:	84 3f       	cpi	r24, 0xF4	; 244
    2c88:	91 40       	sbci	r25, 0x01	; 1
    2c8a:	9c f4       	brge	.+38     	; 0x2cb2 <Display_sticks+0x132>
    2c8c:	80 91 35 08 	lds	r24, 0x0835
    2c90:	90 91 36 08 	lds	r25, 0x0836
    2c94:	8d 30       	cpi	r24, 0x0D	; 13
    2c96:	9e 4f       	sbci	r25, 0xFE	; 254
    2c98:	64 f0       	brlt	.+24     	; 0x2cb2 <Display_sticks+0x132>
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2c9a:	2b e2       	ldi	r18, 0x2B	; 43
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	49 e0       	ldi	r20, 0x09	; 9
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	61 e7       	ldi	r22, 0x71	; 113
    2ca4:	71 e0       	ldi	r23, 0x01	; 1
    2ca6:	88 e8       	ldi	r24, 0x88	; 136
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
			{
				CalibrateStarted = true;
    2cae:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2cb0:	32 c0       	rjmp	.+100    	; 0x2d16 <Display_sticks+0x196>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2cb2:	80 91 35 08 	lds	r24, 0x0835
    2cb6:	90 91 36 08 	lds	r25, 0x0836
    2cba:	97 ff       	sbrs	r25, 7
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <Display_sticks+0x144>
				{
					Config.AileronPol = REVERSED;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	80 93 e8 05 	sts	0x05E8, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2cc4:	80 91 37 08 	lds	r24, 0x0837
    2cc8:	90 91 38 08 	lds	r25, 0x0838
    2ccc:	97 ff       	sbrs	r25, 7
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <Display_sticks+0x156>
				{
					Config.ElevatorPol = REVERSED;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	80 93 e9 05 	sts	0x05E9, r24
				}

				if (RCinputs[RUDDER] < 0)
    2cd6:	80 91 39 08 	lds	r24, 0x0839
    2cda:	90 91 3a 08 	lds	r25, 0x083A
    2cde:	97 ff       	sbrs	r25, 7
    2ce0:	03 c0       	rjmp	.+6      	; 0x2ce8 <Display_sticks+0x168>
				{
					Config.RudderPol = REVERSED;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	80 93 c0 07 	sts	0x07C0, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2ce8:	80 91 35 08 	lds	r24, 0x0835
    2cec:	90 91 36 08 	lds	r25, 0x0836
    2cf0:	18 16       	cp	r1, r24
    2cf2:	19 06       	cpc	r1, r25
    2cf4:	84 f4       	brge	.+32     	; 0x2d16 <Display_sticks+0x196>
    2cf6:	80 91 37 08 	lds	r24, 0x0837
    2cfa:	90 91 38 08 	lds	r25, 0x0838
    2cfe:	18 16       	cp	r1, r24
    2d00:	19 06       	cpc	r1, r25
    2d02:	4c f4       	brge	.+18     	; 0x2d16 <Display_sticks+0x196>
    2d04:	80 91 39 08 	lds	r24, 0x0839
    2d08:	90 91 3a 08 	lds	r25, 0x083A
    2d0c:	c1 e0       	ldi	r28, 0x01	; 1
    2d0e:	18 16       	cp	r1, r24
    2d10:	19 06       	cpc	r1, r25
    2d12:	0c f0       	brlt	.+2      	; 0x2d16 <Display_sticks+0x196>
    2d14:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	91 e0       	ldi	r25, 0x01	; 1
    2d1a:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
    2d1e:	48 cf       	rjmp	.-368    	; 0x2bb0 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2d20:	cc 23       	and	r28, r28
    2d22:	39 f1       	breq	.+78     	; 0x2d72 <Display_sticks+0x1f2>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2d24:	2b e2       	ldi	r18, 0x2B	; 43
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	48 e2       	ldi	r20, 0x28	; 40
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	61 e7       	ldi	r22, 0x71	; 113
    2d2e:	71 e0       	ldi	r23, 0x01	; 1
    2d30:	89 e8       	ldi	r24, 0x89	; 137
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
		clear_buffer(buffer);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
    2d48:	8f e7       	ldi	r24, 0x7F	; 127
    2d4a:	94 e8       	ldi	r25, 0x84	; 132
    2d4c:	2e e1       	ldi	r18, 0x1E	; 30
    2d4e:	81 50       	subi	r24, 0x01	; 1
    2d50:	90 40       	sbci	r25, 0x00	; 0
    2d52:	20 40       	sbci	r18, 0x00	; 0
    2d54:	e1 f7       	brne	.-8      	; 0x2d4e <Display_sticks+0x1ce>
    2d56:	00 c0       	rjmp	.+0      	; 0x2d58 <Display_sticks+0x1d8>
    2d58:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	1f 91       	pop	r17
    2d60:	0f 91       	pop	r16
    2d62:	ff 90       	pop	r15
    2d64:	ef 90       	pop	r14
    2d66:	df 90       	pop	r13
    2d68:	cf 90       	pop	r12
    2d6a:	bf 90       	pop	r11
    2d6c:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2d6e:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2d72:	d0 92 e8 05 	sts	0x05E8, r13
		Config.ElevatorPol = temp_elevator;
    2d76:	f0 92 e9 05 	sts	0x05E9, r15
		Config.RudderPol = temp_rudder;
    2d7a:	a0 92 c0 07 	sts	0x07C0, r10
	}
}
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	1f 91       	pop	r17
    2d84:	0f 91       	pop	r16
    2d86:	ff 90       	pop	r15
    2d88:	ef 90       	pop	r14
    2d8a:	df 90       	pop	r13
    2d8c:	cf 90       	pop	r12
    2d8e:	bf 90       	pop	r11
    2d90:	af 90       	pop	r10
    2d92:	08 95       	ret

00002d94 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2d94:	0f 93       	push	r16
    2d96:	1f 93       	push	r17
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	1f 92       	push	r1
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2da4:	69 83       	std	Y+1, r22	; 0x01
    2da6:	0e 94 94 4c 	call	0x9928	; 0x9928 <__eerd_byte_m644pa>
    2daa:	69 81       	ldd	r22, Y+1	; 0x01
    2dac:	86 17       	cp	r24, r22
    2dae:	41 f0       	breq	.+16     	; 0x2dc0 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2db0:	c8 01       	movw	r24, r16
	}
}
    2db2:	0f 90       	pop	r0
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2dbc:	0c 94 9c 4c 	jmp	0x9938	; 0x9938 <__eewr_byte_m644pa>
	}
}
    2dc0:	0f 90       	pop	r0
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	1f 91       	pop	r17
    2dc8:	0f 91       	pop	r16
    2dca:	08 95       	ret

00002dcc <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    2dcc:	ef 92       	push	r14
    2dce:	ff 92       	push	r15
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	ec 01       	movw	r28, r24
    2dda:	8b 01       	movw	r16, r22
    2ddc:	7a 01       	movw	r14, r20
    2dde:	e8 0e       	add	r14, r24
    2de0:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2de2:	ce 15       	cp	r28, r14
    2de4:	df 05       	cpc	r29, r15
    2de6:	39 f0       	breq	.+14     	; 0x2df6 <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2de8:	69 91       	ld	r22, Y+
    2dea:	c8 01       	movw	r24, r16
    2dec:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <eeprom_write_byte_changed>
		src++;
		dest++;
    2df0:	0f 5f       	subi	r16, 0xFF	; 255
    2df2:	1f 4f       	sbci	r17, 0xFF	; 255
    2df4:	f6 cf       	rjmp	.-20     	; 0x2de2 <eeprom_write_block_changes+0x16>
	}
}
    2df6:	df 91       	pop	r29
    2df8:	cf 91       	pop	r28
    2dfa:	1f 91       	pop	r17
    2dfc:	0f 91       	pop	r16
    2dfe:	ff 90       	pop	r15
    2e00:	ef 90       	pop	r14
    2e02:	08 95       	ret

00002e04 <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2e04:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2e06:	49 e0       	ldi	r20, 0x09	; 9
    2e08:	52 e0       	ldi	r21, 0x02	; 2
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	70 e0       	ldi	r23, 0x00	; 0
    2e0e:	88 eb       	ldi	r24, 0xB8	; 184
    2e10:	95 e0       	ldi	r25, 0x05	; 5
    2e12:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <eeprom_write_block_changes>
	sei();
    2e16:	78 94       	sei
    2e18:	08 95       	ret

00002e1a <Update_V1_0_to_V1_1>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    2e1a:	2f 92       	push	r2
    2e1c:	3f 92       	push	r3
    2e1e:	4f 92       	push	r4
    2e20:	5f 92       	push	r5
    2e22:	6f 92       	push	r6
    2e24:	7f 92       	push	r7
    2e26:	8f 92       	push	r8
    2e28:	9f 92       	push	r9
    2e2a:	af 92       	push	r10
    2e2c:	bf 92       	push	r11
    2e2e:	cf 92       	push	r12
    2e30:	df 92       	push	r13
    2e32:	ef 92       	push	r14
    2e34:	ff 92       	push	r15
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	c5 54       	subi	r28, 0x45	; 69
    2e44:	d1 40       	sbci	r29, 0x01	; 1
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume. For some reason it gets clobbered.
	// We mustn't use hard-coded values are these change each version.
	// Use an offset from the current Config structure address
	memcpy((void*)&temp,(void*)((&Config.setup) + (377)),1);
    2e50:	40 91 31 07 	lds	r20, 0x0731
    2e54:	cf 5b       	subi	r28, 0xBF	; 191
    2e56:	de 4f       	sbci	r29, 0xFE	; 254
    2e58:	48 83       	st	Y, r20
    2e5a:	c1 54       	subi	r28, 0x41	; 65
    2e5c:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
    2e5e:	4a e4       	ldi	r20, 0x4A	; 74
    2e60:	50 e0       	ldi	r21, 0x00	; 0
    2e62:	62 e3       	ldi	r22, 0x32	; 50
    2e64:	77 e0       	ldi	r23, 0x07	; 7
    2e66:	8a e7       	ldi	r24, 0x7A	; 122
    2e68:	97 e0       	ldi	r25, 0x07	; 7
    2e6a:	0e 94 4d 4c 	call	0x989a	; 0x989a <memmove>
    2e6e:	2a e4       	ldi	r18, 0x4A	; 74
    2e70:	36 e0       	ldi	r19, 0x06	; 6
    2e72:	ae 01       	movw	r20, r28
    2e74:	4f 5c       	subi	r20, 0xCF	; 207
    2e76:	5e 4f       	sbci	r21, 0xFE	; 254
    2e78:	ce 01       	movw	r24, r28
    2e7a:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    2e7c:	6d e1       	ldi	r22, 0x1D	; 29
    2e7e:	f9 01       	movw	r30, r18
    2e80:	dc 01       	movw	r26, r24
    2e82:	76 2f       	mov	r23, r22
    2e84:	01 90       	ld	r0, Z+
    2e86:	0d 92       	st	X+, r0
    2e88:	7a 95       	dec	r23
    2e8a:	e1 f7       	brne	.-8      	; 0x2e84 <Update_V1_0_to_V1_1+0x6a>
    2e8c:	86 96       	adiw	r24, 0x26	; 38
    2e8e:	23 5e       	subi	r18, 0xE3	; 227
    2e90:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    2e92:	84 17       	cp	r24, r20
    2e94:	95 07       	cpc	r25, r21
    2e96:	99 f7       	brne	.-26     	; 0x2e7e <Update_V1_0_to_V1_1+0x64>
    2e98:	4e 01       	movw	r8, r28
    2e9a:	83 e1       	ldi	r24, 0x13	; 19
    2e9c:	88 0e       	add	r8, r24
    2e9e:	91 1c       	adc	r9, r1
    2ea0:	5e 01       	movw	r10, r28
    2ea2:	94 e1       	ldi	r25, 0x14	; 20
    2ea4:	a9 0e       	add	r10, r25
    2ea6:	b1 1c       	adc	r11, r1
    2ea8:	6e 01       	movw	r12, r28
    2eaa:	e5 e1       	ldi	r30, 0x15	; 21
    2eac:	ce 0e       	add	r12, r30
    2eae:	d1 1c       	adc	r13, r1
    2eb0:	ce 01       	movw	r24, r28
    2eb2:	46 96       	adiw	r24, 0x16	; 22
    2eb4:	cf 5c       	subi	r28, 0xCF	; 207
    2eb6:	de 4f       	sbci	r29, 0xFE	; 254
    2eb8:	99 83       	std	Y+1, r25	; 0x01
    2eba:	88 83       	st	Y, r24
    2ebc:	c1 53       	subi	r28, 0x31	; 49
    2ebe:	d1 40       	sbci	r29, 0x01	; 1
    2ec0:	8e 01       	movw	r16, r28
    2ec2:	02 5e       	subi	r16, 0xE2	; 226
    2ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	7d 96       	adiw	r30, 0x1d	; 29
    2eca:	c7 5c       	subi	r28, 0xC7	; 199
    2ecc:	de 4f       	sbci	r29, 0xFE	; 254
    2ece:	f9 83       	std	Y+1, r31	; 0x01
    2ed0:	e8 83       	st	Y, r30
    2ed2:	c9 53       	subi	r28, 0x39	; 57
    2ed4:	d1 40       	sbci	r29, 0x01	; 1
    2ed6:	06 96       	adiw	r24, 0x06	; 6
    2ed8:	cd 5c       	subi	r28, 0xCD	; 205
    2eda:	de 4f       	sbci	r29, 0xFE	; 254
    2edc:	99 83       	std	Y+1, r25	; 0x01
    2ede:	88 83       	st	Y, r24
    2ee0:	c3 53       	subi	r28, 0x33	; 51
    2ee2:	d1 40       	sbci	r29, 0x01	; 1
    2ee4:	32 97       	sbiw	r30, 0x02	; 2
    2ee6:	c3 5c       	subi	r28, 0xC3	; 195
    2ee8:	de 4f       	sbci	r29, 0xFE	; 254
    2eea:	f9 83       	std	Y+1, r31	; 0x01
    2eec:	e8 83       	st	Y, r30
    2eee:	cd 53       	subi	r28, 0x3D	; 61
    2ef0:	d1 40       	sbci	r29, 0x01	; 1
    2ef2:	02 97       	sbiw	r24, 0x02	; 2
    2ef4:	c9 5c       	subi	r28, 0xC9	; 201
    2ef6:	de 4f       	sbci	r29, 0xFE	; 254
    2ef8:	99 83       	std	Y+1, r25	; 0x01
    2efa:	88 83       	st	Y, r24
    2efc:	c7 53       	subi	r28, 0x37	; 55
    2efe:	d1 40       	sbci	r29, 0x01	; 1
    2f00:	32 97       	sbiw	r30, 0x02	; 2
    2f02:	c5 5c       	subi	r28, 0xC5	; 197
    2f04:	de 4f       	sbci	r29, 0xFE	; 254
    2f06:	f9 83       	std	Y+1, r31	; 0x01
    2f08:	e8 83       	st	Y, r30
    2f0a:	cb 53       	subi	r28, 0x3B	; 59
    2f0c:	d1 40       	sbci	r29, 0x01	; 1
    2f0e:	02 97       	sbiw	r24, 0x02	; 2
    2f10:	cb 5c       	subi	r28, 0xCB	; 203
    2f12:	de 4f       	sbci	r29, 0xFE	; 254
    2f14:	99 83       	std	Y+1, r25	; 0x01
    2f16:	88 83       	st	Y, r24
    2f18:	c5 53       	subi	r28, 0x35	; 53
    2f1a:	d1 40       	sbci	r29, 0x01	; 1
    2f1c:	7e 01       	movw	r14, r28
    2f1e:	97 e1       	ldi	r25, 0x17	; 23
    2f20:	e9 0e       	add	r14, r25
    2f22:	f1 1c       	adc	r15, r1
    2f24:	3e 01       	movw	r6, r28
    2f26:	e5 e0       	ldi	r30, 0x05	; 5
    2f28:	6e 0e       	add	r6, r30
    2f2a:	71 1c       	adc	r7, r1
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	8c 0f       	add	r24, r28
    2f32:	9d 1f       	adc	r25, r29
    2f34:	83 5b       	subi	r24, 0xB3	; 179
    2f36:	9e 4f       	sbci	r25, 0xFE	; 254
    2f38:	ce 5b       	subi	r28, 0xBE	; 190
    2f3a:	de 4f       	sbci	r29, 0xFE	; 254
    2f3c:	99 83       	std	Y+1, r25	; 0x01
    2f3e:	88 83       	st	Y, r24
    2f40:	c2 54       	subi	r28, 0x42	; 66
    2f42:	d1 40       	sbci	r29, 0x01	; 1
    2f44:	fe 01       	movw	r30, r28
    2f46:	31 96       	adiw	r30, 0x01	; 1
    2f48:	c1 5c       	subi	r28, 0xC1	; 193
    2f4a:	de 4f       	sbci	r29, 0xFE	; 254
    2f4c:	f9 83       	std	Y+1, r31	; 0x01
    2f4e:	e8 83       	st	Y, r30
    2f50:	cf 53       	subi	r28, 0x3F	; 63
    2f52:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2f58:	44 24       	eor	r4, r4
    2f5a:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    2f5c:	49 e1       	ldi	r20, 0x19	; 25
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	b3 01       	movw	r22, r6
    2f62:	c8 01       	movw	r24, r16
    2f64:	48 97       	sbiw	r24, 0x18	; 24
    2f66:	0e 94 4d 4c 	call	0x989a	; 0x989a <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    2f6a:	f4 01       	movw	r30, r8
    2f6c:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    2f6e:	f5 01       	movw	r30, r10
    2f70:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    2f72:	f6 01       	movw	r30, r12
    2f74:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    2f76:	cf 5c       	subi	r28, 0xCF	; 207
    2f78:	de 4f       	sbci	r29, 0xFE	; 254
    2f7a:	e8 81       	ld	r30, Y
    2f7c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f7e:	c1 53       	subi	r28, 0x31	; 49
    2f80:	d1 40       	sbci	r29, 0x01	; 1
    2f82:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2f84:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    2f86:	36 fe       	sbrs	r3, 6
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <Update_V1_0_to_V1_1+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2f8a:	50 82       	st	Z, r5
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <Update_V1_0_to_V1_1+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    2f8e:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    2f90:	48 e0       	ldi	r20, 0x08	; 8
    2f92:	50 e0       	ldi	r21, 0x00	; 0
    2f94:	b7 01       	movw	r22, r14
    2f96:	c8 01       	movw	r24, r16
    2f98:	01 96       	adiw	r24, 0x01	; 1
    2f9a:	cc 5b       	subi	r28, 0xBC	; 188
    2f9c:	de 4f       	sbci	r29, 0xFE	; 254
    2f9e:	28 83       	st	Y, r18
    2fa0:	c4 54       	subi	r28, 0x44	; 68
    2fa2:	d1 40       	sbci	r29, 0x01	; 1
    2fa4:	cb 5b       	subi	r28, 0xBB	; 187
    2fa6:	de 4f       	sbci	r29, 0xFE	; 254
    2fa8:	38 83       	st	Y, r19
    2faa:	c5 54       	subi	r28, 0x45	; 69
    2fac:	d1 40       	sbci	r29, 0x01	; 1
    2fae:	0e 94 4d 4c 	call	0x989a	; 0x989a <memmove>
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	cb 5b       	subi	r28, 0xBB	; 187
    2fb8:	de 4f       	sbci	r29, 0xFE	; 254
    2fba:	38 81       	ld	r19, Y
    2fbc:	c5 54       	subi	r28, 0x45	; 69
    2fbe:	d1 40       	sbci	r29, 0x01	; 1
    2fc0:	cc 5b       	subi	r28, 0xBC	; 188
    2fc2:	de 4f       	sbci	r29, 0xFE	; 254
    2fc4:	28 81       	ld	r18, Y
    2fc6:	c4 54       	subi	r28, 0x44	; 68
    2fc8:	d1 40       	sbci	r29, 0x01	; 1
    2fca:	c1 5c       	subi	r28, 0xC1	; 193
    2fcc:	de 4f       	sbci	r29, 0xFE	; 254
    2fce:	e8 81       	ld	r30, Y
    2fd0:	f9 81       	ldd	r31, Y+1	; 0x01
    2fd2:	cf 53       	subi	r28, 0x3F	; 63
    2fd4:	d1 40       	sbci	r29, 0x01	; 1
    2fd6:	e8 0f       	add	r30, r24
    2fd8:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    2fda:	46 8d       	ldd	r20, Z+30	; 0x1e
    2fdc:	4d 30       	cpi	r20, 0x0D	; 13
    2fde:	11 f4       	brne	.+4      	; 0x2fe4 <Update_V1_0_to_V1_1+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    2fe0:	4f e0       	ldi	r20, 0x0F	; 15
    2fe2:	46 8f       	std	Z+30, r20	; 0x1e
    2fe4:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    2fe6:	88 30       	cpi	r24, 0x08	; 8
    2fe8:	91 05       	cpc	r25, r1
    2fea:	79 f7       	brne	.-34     	; 0x2fca <Update_V1_0_to_V1_1+0x1b0>
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2fec:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    2fee:	30 fe       	sbrs	r3, 0
    2ff0:	06 c0       	rjmp	.+12     	; 0x2ffe <Update_V1_0_to_V1_1+0x1e4>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    2ff2:	30 ff       	sbrs	r19, 0
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <Update_V1_0_to_V1_1+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2ff6:	50 82       	st	Z, r5
    2ff8:	03 c0       	rjmp	.+6      	; 0x3000 <Update_V1_0_to_V1_1+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2ffa:	40 82       	st	Z, r4
    2ffc:	01 c0       	rjmp	.+2      	; 0x3000 <Update_V1_0_to_V1_1+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    2ffe:	10 82       	st	Z, r1
		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
		{
			if ((P2_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    3000:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    3002:	20 ff       	sbrs	r18, 0
    3004:	06 c0       	rjmp	.+12     	; 0x3012 <Update_V1_0_to_V1_1+0x1f8>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    3006:	20 fe       	sbrs	r2, 0
    3008:	02 c0       	rjmp	.+4      	; 0x300e <Update_V1_0_to_V1_1+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    300a:	50 82       	st	Z, r5
    300c:	03 c0       	rjmp	.+6      	; 0x3014 <Update_V1_0_to_V1_1+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    300e:	40 82       	st	Z, r4
    3010:	01 c0       	rjmp	.+2      	; 0x3014 <Update_V1_0_to_V1_1+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    3012:	10 82       	st	Z, r1
		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    3014:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    3016:	31 fe       	sbrs	r3, 1
    3018:	06 c0       	rjmp	.+12     	; 0x3026 <Update_V1_0_to_V1_1+0x20c>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    301a:	31 ff       	sbrs	r19, 1
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <Update_V1_0_to_V1_1+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    301e:	50 82       	st	Z, r5
    3020:	03 c0       	rjmp	.+6      	; 0x3028 <Update_V1_0_to_V1_1+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    3022:	40 82       	st	Z, r4
    3024:	01 c0       	rjmp	.+2      	; 0x3028 <Update_V1_0_to_V1_1+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    3026:	10 82       	st	Z, r1
		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    3028:	cf 5c       	subi	r28, 0xCF	; 207
    302a:	de 4f       	sbci	r29, 0xFE	; 254
    302c:	e8 81       	ld	r30, Y
    302e:	f9 81       	ldd	r31, Y+1	; 0x01
    3030:	c1 53       	subi	r28, 0x31	; 49
    3032:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    3034:	21 ff       	sbrs	r18, 1
    3036:	06 c0       	rjmp	.+12     	; 0x3044 <Update_V1_0_to_V1_1+0x22a>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    3038:	21 fe       	sbrs	r2, 1
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <Update_V1_0_to_V1_1+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    303c:	50 82       	st	Z, r5
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <Update_V1_0_to_V1_1+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    3040:	40 82       	st	Z, r4
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <Update_V1_0_to_V1_1+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    3044:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
		{
			if ((P1_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    3046:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    3048:	32 fe       	sbrs	r3, 2
    304a:	06 c0       	rjmp	.+12     	; 0x3058 <Update_V1_0_to_V1_1+0x23e>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    304c:	32 ff       	sbrs	r19, 2
    304e:	02 c0       	rjmp	.+4      	; 0x3054 <Update_V1_0_to_V1_1+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    3050:	50 82       	st	Z, r5
    3052:	03 c0       	rjmp	.+6      	; 0x305a <Update_V1_0_to_V1_1+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    3054:	40 82       	st	Z, r4
    3056:	01 c0       	rjmp	.+2      	; 0x305a <Update_V1_0_to_V1_1+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    3058:	10 82       	st	Z, r1
		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
		{
			if ((P2_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    305a:	cb 5c       	subi	r28, 0xCB	; 203
    305c:	de 4f       	sbci	r29, 0xFE	; 254
    305e:	e8 81       	ld	r30, Y
    3060:	f9 81       	ldd	r31, Y+1	; 0x01
    3062:	c5 53       	subi	r28, 0x35	; 53
    3064:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    3066:	22 ff       	sbrs	r18, 2
    3068:	06 c0       	rjmp	.+12     	; 0x3076 <Update_V1_0_to_V1_1+0x25c>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    306a:	22 fe       	sbrs	r2, 2
    306c:	02 c0       	rjmp	.+4      	; 0x3072 <Update_V1_0_to_V1_1+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    306e:	50 82       	st	Z, r5
    3070:	03 c0       	rjmp	.+6      	; 0x3078 <Update_V1_0_to_V1_1+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    3072:	40 82       	st	Z, r4
    3074:	01 c0       	rjmp	.+2      	; 0x3078 <Update_V1_0_to_V1_1+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    3076:	10 82       	st	Z, r1
		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    3078:	c5 5c       	subi	r28, 0xC5	; 197
    307a:	de 4f       	sbci	r29, 0xFE	; 254
    307c:	e8 81       	ld	r30, Y
    307e:	f9 81       	ldd	r31, Y+1	; 0x01
    3080:	cb 53       	subi	r28, 0x3B	; 59
    3082:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    3084:	33 fe       	sbrs	r3, 3
    3086:	06 c0       	rjmp	.+12     	; 0x3094 <Update_V1_0_to_V1_1+0x27a>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    3088:	33 ff       	sbrs	r19, 3
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <Update_V1_0_to_V1_1+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    308c:	50 82       	st	Z, r5
    308e:	03 c0       	rjmp	.+6      	; 0x3096 <Update_V1_0_to_V1_1+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    3090:	40 82       	st	Z, r4
    3092:	01 c0       	rjmp	.+2      	; 0x3096 <Update_V1_0_to_V1_1+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    3094:	10 82       	st	Z, r1
		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    3096:	c9 5c       	subi	r28, 0xC9	; 201
    3098:	de 4f       	sbci	r29, 0xFE	; 254
    309a:	e8 81       	ld	r30, Y
    309c:	f9 81       	ldd	r31, Y+1	; 0x01
    309e:	c7 53       	subi	r28, 0x37	; 55
    30a0:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    30a2:	23 ff       	sbrs	r18, 3
    30a4:	06 c0       	rjmp	.+12     	; 0x30b2 <Update_V1_0_to_V1_1+0x298>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    30a6:	23 fe       	sbrs	r2, 3
    30a8:	02 c0       	rjmp	.+4      	; 0x30ae <Update_V1_0_to_V1_1+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    30aa:	50 82       	st	Z, r5
    30ac:	03 c0       	rjmp	.+6      	; 0x30b4 <Update_V1_0_to_V1_1+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    30ae:	40 82       	st	Z, r4
    30b0:	01 c0       	rjmp	.+2      	; 0x30b4 <Update_V1_0_to_V1_1+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    30b2:	10 82       	st	Z, r1
		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    30b4:	c3 5c       	subi	r28, 0xC3	; 195
    30b6:	de 4f       	sbci	r29, 0xFE	; 254
    30b8:	e8 81       	ld	r30, Y
    30ba:	f9 81       	ldd	r31, Y+1	; 0x01
    30bc:	cd 53       	subi	r28, 0x3D	; 61
    30be:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    30c0:	34 fe       	sbrs	r3, 4
    30c2:	06 c0       	rjmp	.+12     	; 0x30d0 <Update_V1_0_to_V1_1+0x2b6>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    30c4:	34 ff       	sbrs	r19, 4
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <Update_V1_0_to_V1_1+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    30c8:	50 82       	st	Z, r5
    30ca:	03 c0       	rjmp	.+6      	; 0x30d2 <Update_V1_0_to_V1_1+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    30cc:	40 82       	st	Z, r4
    30ce:	01 c0       	rjmp	.+2      	; 0x30d2 <Update_V1_0_to_V1_1+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    30d0:	10 82       	st	Z, r1
		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    30d2:	cd 5c       	subi	r28, 0xCD	; 205
    30d4:	de 4f       	sbci	r29, 0xFE	; 254
    30d6:	e8 81       	ld	r30, Y
    30d8:	f9 81       	ldd	r31, Y+1	; 0x01
    30da:	c3 53       	subi	r28, 0x33	; 51
    30dc:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    30de:	24 ff       	sbrs	r18, 4
    30e0:	06 c0       	rjmp	.+12     	; 0x30ee <Update_V1_0_to_V1_1+0x2d4>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    30e2:	24 fe       	sbrs	r2, 4
    30e4:	02 c0       	rjmp	.+4      	; 0x30ea <Update_V1_0_to_V1_1+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    30e6:	50 82       	st	Z, r5
    30e8:	03 c0       	rjmp	.+6      	; 0x30f0 <Update_V1_0_to_V1_1+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    30ea:	40 82       	st	Z, r4
    30ec:	01 c0       	rjmp	.+2      	; 0x30f0 <Update_V1_0_to_V1_1+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    30ee:	10 82       	st	Z, r1
		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    30f0:	c7 5c       	subi	r28, 0xC7	; 199
    30f2:	de 4f       	sbci	r29, 0xFE	; 254
    30f4:	e8 81       	ld	r30, Y
    30f6:	f9 81       	ldd	r31, Y+1	; 0x01
    30f8:	c9 53       	subi	r28, 0x39	; 57
    30fa:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
    30fc:	35 fe       	sbrs	r3, 5
    30fe:	06 c0       	rjmp	.+12     	; 0x310c <Update_V1_0_to_V1_1+0x2f2>
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
    3100:	35 ff       	sbrs	r19, 5
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <Update_V1_0_to_V1_1+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3104:	50 82       	st	Z, r5
    3106:	03 c0       	rjmp	.+6      	; 0x310e <Update_V1_0_to_V1_1+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    3108:	40 82       	st	Z, r4
    310a:	01 c0       	rjmp	.+2      	; 0x310e <Update_V1_0_to_V1_1+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    310c:	10 82       	st	Z, r1
		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    310e:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
    3110:	25 ff       	sbrs	r18, 5
    3112:	06 c0       	rjmp	.+12     	; 0x3120 <Update_V1_0_to_V1_1+0x306>
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
    3114:	25 fe       	sbrs	r2, 5
    3116:	02 c0       	rjmp	.+4      	; 0x311c <Update_V1_0_to_V1_1+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    3118:	50 82       	st	Z, r5
    311a:	03 c0       	rjmp	.+6      	; 0x3122 <Update_V1_0_to_V1_1+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    311c:	40 82       	st	Z, r4
    311e:	01 c0       	rjmp	.+2      	; 0x3122 <Update_V1_0_to_V1_1+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    3120:	10 82       	st	Z, r1
    3122:	c1 5c       	subi	r28, 0xC1	; 193
    3124:	de 4f       	sbci	r29, 0xFE	; 254
    3126:	88 81       	ld	r24, Y
    3128:	99 81       	ldd	r25, Y+1	; 0x01
    312a:	cf 53       	subi	r28, 0x3F	; 63
    312c:	d1 40       	sbci	r29, 0x01	; 1
    312e:	86 96       	adiw	r24, 0x26	; 38
    3130:	c1 5c       	subi	r28, 0xC1	; 193
    3132:	de 4f       	sbci	r29, 0xFE	; 254
    3134:	99 83       	std	Y+1, r25	; 0x01
    3136:	88 83       	st	Y, r24
    3138:	cf 53       	subi	r28, 0x3F	; 63
    313a:	d1 40       	sbci	r29, 0x01	; 1
    313c:	96 e2       	ldi	r25, 0x26	; 38
    313e:	89 0e       	add	r8, r25
    3140:	91 1c       	adc	r9, r1
    3142:	e6 e2       	ldi	r30, 0x26	; 38
    3144:	ae 0e       	add	r10, r30
    3146:	b1 1c       	adc	r11, r1
    3148:	f6 e2       	ldi	r31, 0x26	; 38
    314a:	cf 0e       	add	r12, r31
    314c:	d1 1c       	adc	r13, r1
    314e:	cf 5c       	subi	r28, 0xCF	; 207
    3150:	de 4f       	sbci	r29, 0xFE	; 254
    3152:	88 81       	ld	r24, Y
    3154:	99 81       	ldd	r25, Y+1	; 0x01
    3156:	c1 53       	subi	r28, 0x31	; 49
    3158:	d1 40       	sbci	r29, 0x01	; 1
    315a:	86 96       	adiw	r24, 0x26	; 38
    315c:	cf 5c       	subi	r28, 0xCF	; 207
    315e:	de 4f       	sbci	r29, 0xFE	; 254
    3160:	99 83       	std	Y+1, r25	; 0x01
    3162:	88 83       	st	Y, r24
    3164:	c1 53       	subi	r28, 0x31	; 49
    3166:	d1 40       	sbci	r29, 0x01	; 1
    3168:	0a 5d       	subi	r16, 0xDA	; 218
    316a:	1f 4f       	sbci	r17, 0xFF	; 255
    316c:	c7 5c       	subi	r28, 0xC7	; 199
    316e:	de 4f       	sbci	r29, 0xFE	; 254
    3170:	e8 81       	ld	r30, Y
    3172:	f9 81       	ldd	r31, Y+1	; 0x01
    3174:	c9 53       	subi	r28, 0x39	; 57
    3176:	d1 40       	sbci	r29, 0x01	; 1
    3178:	b6 96       	adiw	r30, 0x26	; 38
    317a:	c7 5c       	subi	r28, 0xC7	; 199
    317c:	de 4f       	sbci	r29, 0xFE	; 254
    317e:	f9 83       	std	Y+1, r31	; 0x01
    3180:	e8 83       	st	Y, r30
    3182:	c9 53       	subi	r28, 0x39	; 57
    3184:	d1 40       	sbci	r29, 0x01	; 1
    3186:	cd 5c       	subi	r28, 0xCD	; 205
    3188:	de 4f       	sbci	r29, 0xFE	; 254
    318a:	88 81       	ld	r24, Y
    318c:	99 81       	ldd	r25, Y+1	; 0x01
    318e:	c3 53       	subi	r28, 0x33	; 51
    3190:	d1 40       	sbci	r29, 0x01	; 1
    3192:	86 96       	adiw	r24, 0x26	; 38
    3194:	cd 5c       	subi	r28, 0xCD	; 205
    3196:	de 4f       	sbci	r29, 0xFE	; 254
    3198:	99 83       	std	Y+1, r25	; 0x01
    319a:	88 83       	st	Y, r24
    319c:	c3 53       	subi	r28, 0x33	; 51
    319e:	d1 40       	sbci	r29, 0x01	; 1
    31a0:	c3 5c       	subi	r28, 0xC3	; 195
    31a2:	de 4f       	sbci	r29, 0xFE	; 254
    31a4:	e8 81       	ld	r30, Y
    31a6:	f9 81       	ldd	r31, Y+1	; 0x01
    31a8:	cd 53       	subi	r28, 0x3D	; 61
    31aa:	d1 40       	sbci	r29, 0x01	; 1
    31ac:	b6 96       	adiw	r30, 0x26	; 38
    31ae:	c3 5c       	subi	r28, 0xC3	; 195
    31b0:	de 4f       	sbci	r29, 0xFE	; 254
    31b2:	f9 83       	std	Y+1, r31	; 0x01
    31b4:	e8 83       	st	Y, r30
    31b6:	cd 53       	subi	r28, 0x3D	; 61
    31b8:	d1 40       	sbci	r29, 0x01	; 1
    31ba:	c9 5c       	subi	r28, 0xC9	; 201
    31bc:	de 4f       	sbci	r29, 0xFE	; 254
    31be:	88 81       	ld	r24, Y
    31c0:	99 81       	ldd	r25, Y+1	; 0x01
    31c2:	c7 53       	subi	r28, 0x37	; 55
    31c4:	d1 40       	sbci	r29, 0x01	; 1
    31c6:	86 96       	adiw	r24, 0x26	; 38
    31c8:	c9 5c       	subi	r28, 0xC9	; 201
    31ca:	de 4f       	sbci	r29, 0xFE	; 254
    31cc:	99 83       	std	Y+1, r25	; 0x01
    31ce:	88 83       	st	Y, r24
    31d0:	c7 53       	subi	r28, 0x37	; 55
    31d2:	d1 40       	sbci	r29, 0x01	; 1
    31d4:	c5 5c       	subi	r28, 0xC5	; 197
    31d6:	de 4f       	sbci	r29, 0xFE	; 254
    31d8:	e8 81       	ld	r30, Y
    31da:	f9 81       	ldd	r31, Y+1	; 0x01
    31dc:	cb 53       	subi	r28, 0x3B	; 59
    31de:	d1 40       	sbci	r29, 0x01	; 1
    31e0:	b6 96       	adiw	r30, 0x26	; 38
    31e2:	c5 5c       	subi	r28, 0xC5	; 197
    31e4:	de 4f       	sbci	r29, 0xFE	; 254
    31e6:	f9 83       	std	Y+1, r31	; 0x01
    31e8:	e8 83       	st	Y, r30
    31ea:	cb 53       	subi	r28, 0x3B	; 59
    31ec:	d1 40       	sbci	r29, 0x01	; 1
    31ee:	cb 5c       	subi	r28, 0xCB	; 203
    31f0:	de 4f       	sbci	r29, 0xFE	; 254
    31f2:	88 81       	ld	r24, Y
    31f4:	99 81       	ldd	r25, Y+1	; 0x01
    31f6:	c5 53       	subi	r28, 0x35	; 53
    31f8:	d1 40       	sbci	r29, 0x01	; 1
    31fa:	86 96       	adiw	r24, 0x26	; 38
    31fc:	cb 5c       	subi	r28, 0xCB	; 203
    31fe:	de 4f       	sbci	r29, 0xFE	; 254
    3200:	99 83       	std	Y+1, r25	; 0x01
    3202:	88 83       	st	Y, r24
    3204:	c5 53       	subi	r28, 0x35	; 53
    3206:	d1 40       	sbci	r29, 0x01	; 1
    3208:	96 e2       	ldi	r25, 0x26	; 38
    320a:	e9 0e       	add	r14, r25
    320c:	f1 1c       	adc	r15, r1
    320e:	e6 e2       	ldi	r30, 0x26	; 38
    3210:	6e 0e       	add	r6, r30
    3212:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    3214:	ce 5b       	subi	r28, 0xBE	; 190
    3216:	de 4f       	sbci	r29, 0xFE	; 254
    3218:	88 81       	ld	r24, Y
    321a:	99 81       	ldd	r25, Y+1	; 0x01
    321c:	c2 54       	subi	r28, 0x42	; 66
    321e:	d1 40       	sbci	r29, 0x01	; 1
    3220:	08 17       	cp	r16, r24
    3222:	19 07       	cpc	r17, r25
    3224:	09 f0       	breq	.+2      	; 0x3228 <Update_V1_0_to_V1_1+0x40e>
    3226:	9a ce       	rjmp	.-716    	; 0x2f5c <Update_V1_0_to_V1_1+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    3228:	8f e2       	ldi	r24, 0x2F	; 47
    322a:	91 e0       	ldi	r25, 0x01	; 1
    322c:	fe 01       	movw	r30, r28
    322e:	31 96       	adiw	r30, 0x01	; 1
    3230:	aa e4       	ldi	r26, 0x4A	; 74
    3232:	b6 e0       	ldi	r27, 0x06	; 6
    3234:	01 90       	ld	r0, Z+
    3236:	0d 92       	st	X+, r0
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	e1 f7       	brne	.-8      	; 0x3234 <Update_V1_0_to_V1_1+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; 
    323c:	cf 5b       	subi	r28, 0xBF	; 191
    323e:	de 4f       	sbci	r29, 0xFE	; 254
    3240:	98 81       	ld	r25, Y
    3242:	c1 54       	subi	r28, 0x41	; 65
    3244:	d1 40       	sbci	r29, 0x01	; 1
    3246:	90 93 79 07 	sts	0x0779, r25

	// Set magic number to V1.1 signature
	Config.setup = V1_1_SIGNATURE;
    324a:	86 e3       	ldi	r24, 0x36	; 54
    324c:	80 93 b8 05 	sts	0x05B8, r24
}
    3250:	cb 5b       	subi	r28, 0xBB	; 187
    3252:	de 4f       	sbci	r29, 0xFE	; 254
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	df 91       	pop	r29
    3260:	cf 91       	pop	r28
    3262:	1f 91       	pop	r17
    3264:	0f 91       	pop	r16
    3266:	ff 90       	pop	r15
    3268:	ef 90       	pop	r14
    326a:	df 90       	pop	r13
    326c:	cf 90       	pop	r12
    326e:	bf 90       	pop	r11
    3270:	af 90       	pop	r10
    3272:	9f 90       	pop	r9
    3274:	8f 90       	pop	r8
    3276:	7f 90       	pop	r7
    3278:	6f 90       	pop	r6
    327a:	5f 90       	pop	r5
    327c:	4f 90       	pop	r4
    327e:	3f 90       	pop	r3
    3280:	2f 90       	pop	r2
    3282:	08 95       	ret

00003284 <Update_V1_1_to_V1_1_B8>:

// Upgrade V1.1 structure to V1.1 Beta 8 structure
void Update_V1_1_to_V1_1_B8(void)
{
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	28 97       	sbiw	r28, 0x08	; 8
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
	int8_t	buffer[8];
	
	// Swap old settings into new
	buffer[0] = Config.RxMode;
    3298:	80 91 e1 05 	lds	r24, 0x05E1
    329c:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = Config.MPU6050_LPF;
    329e:	80 91 45 06 	lds	r24, 0x0645
    32a2:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = Config.Servo_rate;
    32a4:	80 91 e2 05 	lds	r24, 0x05E2
    32a8:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = Config.PWM_Sync;
    32aa:	80 91 e3 05 	lds	r24, 0x05E3
    32ae:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = Config.TxSeq;
    32b0:	80 91 e4 05 	lds	r24, 0x05E4
    32b4:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = Config.AileronPol;
    32b6:	90 91 e8 05 	lds	r25, 0x05E8
    32ba:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6] = Config.ElevatorPol;
    32bc:	90 91 e9 05 	lds	r25, 0x05E9
    32c0:	9f 83       	std	Y+7, r25	; 0x07
	buffer[7] = Config.RudderPol;
    32c2:	90 91 c0 07 	lds	r25, 0x07C0
    32c6:	98 87       	std	Y+8, r25	; 0x08
	
	// Copy back to RC items structure
	memcpy(&Config.RxMode, &buffer,7);
    32c8:	27 e0       	ldi	r18, 0x07	; 7
    32ca:	fe 01       	movw	r30, r28
    32cc:	31 96       	adiw	r30, 0x01	; 1
    32ce:	a1 ee       	ldi	r26, 0xE1	; 225
    32d0:	b5 e0       	ldi	r27, 0x05	; 5
    32d2:	01 90       	ld	r0, Z+
    32d4:	0d 92       	st	X+, r0
    32d6:	2a 95       	dec	r18
    32d8:	e1 f7       	brne	.-8      	; 0x32d2 <Update_V1_1_to_V1_1_B8+0x4e>
	
	// Copy back to General items structure
	Config.MPU6050_LPF = buffer[7];
    32da:	90 93 45 06 	sts	0x0645, r25
	
	// "None" no longer an option for this channel
	if (Config.FlightChan == NOCHAN)
    32de:	88 30       	cpi	r24, 0x08	; 8
    32e0:	19 f4       	brne	.+6      	; 0x32e8 <Update_V1_1_to_V1_1_B8+0x64>
	{
		Config.FlightChan = AUX3;
    32e2:	87 e0       	ldi	r24, 0x07	; 7
    32e4:	80 93 e5 05 	sts	0x05E5, r24
	}
	
	// Set magic number to V1.1 Beta 8 signature
	Config.setup = V1_1_B8_SIGNATURE;
    32e8:	87 e3       	ldi	r24, 0x37	; 55
    32ea:	80 93 b8 05 	sts	0x05B8, r24
}
    32ee:	28 96       	adiw	r28, 0x08	; 8
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	08 95       	ret

00003300 <Update_V1_1B8_to_V1_1_B10>:

// Upgrade V1.1 B8 settings to V1.1 Beta 10 settings
void Update_V1_1B8_to_V1_1_B10(void)
{
	// Reset filters to more appropriate values
	Config.Acc_LPF = convert_filter_B8_B10(Config.Acc_LPF);
    3300:	e0 91 46 06 	lds	r30, 0x0646
    3304:	e7 30       	cpi	r30, 0x07	; 7
    3306:	28 f4       	brcc	.+10     	; 0x3312 <Update_V1_1B8_to_V1_1_B10+0x12>
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	e2 5f       	subi	r30, 0xF2	; 242
    330c:	fa 4f       	sbci	r31, 0xFA	; 250
    330e:	80 81       	ld	r24, Z
    3310:	01 c0       	rjmp	.+2      	; 0x3314 <Update_V1_1B8_to_V1_1_B10+0x14>
    3312:	87 e0       	ldi	r24, 0x07	; 7
    3314:	80 93 46 06 	sts	0x0646, r24
	Config.Gyro_LPF = convert_filter_B8_B10(Config.Gyro_LPF);
    3318:	e0 91 47 06 	lds	r30, 0x0647
    331c:	e7 30       	cpi	r30, 0x07	; 7
    331e:	28 f4       	brcc	.+10     	; 0x332a <Update_V1_1B8_to_V1_1_B10+0x2a>
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	e2 5f       	subi	r30, 0xF2	; 242
    3324:	fa 4f       	sbci	r31, 0xFA	; 250
    3326:	80 81       	ld	r24, Z
    3328:	01 c0       	rjmp	.+2      	; 0x332c <Update_V1_1B8_to_V1_1_B10+0x2c>
    332a:	87 e0       	ldi	r24, 0x07	; 7
    332c:	80 93 47 06 	sts	0x0647, r24

	// Set magic number to V1.1 Beta 10 signature
	Config.setup = V1_1_B10_SIGNATURE;
    3330:	88 e3       	ldi	r24, 0x38	; 56
    3332:	80 93 b8 05 	sts	0x05B8, r24
    3336:	08 95       	ret

00003338 <Update_V1_1B10_to_V1_1_B12>:

// Upgrade V1.1 B10+ settings to V1.1 Beta 12 settings
void Update_V1_1B10_to_V1_1_B12(void)
{
	// Copy old RudderPol value to new location
	Config.RudderPol = Config.Preset;
    3338:	e9 e4       	ldi	r30, 0x49	; 73
    333a:	f6 e0       	ldi	r31, 0x06	; 6
    333c:	80 81       	ld	r24, Z
    333e:	80 93 c0 07 	sts	0x07C0, r24
	
	// Set preset to default and load it
	Config.Preset = MANUAL;
    3342:	10 82       	st	Z, r1

	// Set magic number to V1.1 Beta 11 signature
	Config.setup = V1_1_B12_SIGNATURE;
    3344:	89 e3       	ldi	r24, 0x39	; 57
    3346:	80 93 b8 05 	sts	0x05B8, r24
    334a:	08 95       	ret

0000334c <Load_eeprom_preset>:

void Load_eeprom_preset(uint8_t preset)
{
	uint8_t i;

	switch (preset)
    334c:	81 30       	cpi	r24, 0x01	; 1
    334e:	09 f4       	brne	.+2      	; 0x3352 <Load_eeprom_preset+0x6>
    3350:	ea c0       	rjmp	.+468    	; 0x3526 <Load_eeprom_preset+0x1da>
    3352:	20 f0       	brcs	.+8      	; 0x335c <Load_eeprom_preset+0x10>
    3354:	82 30       	cpi	r24, 0x02	; 2
    3356:	09 f4       	brne	.+2      	; 0x335a <Load_eeprom_preset+0xe>
    3358:	50 c0       	rjmp	.+160    	; 0x33fa <Load_eeprom_preset+0xae>
    335a:	08 95       	ret
	{
		case MANUAL:
			// Preset simple mixing for primary channels
			Config.Channel[OUT1].P1_throttle_volume = 100;
    335c:	84 e6       	ldi	r24, 0x64	; 100
    335e:	80 93 53 06 	sts	0x0653, r24
			Config.Channel[OUT2].P1_aileron_volume = 100;
    3362:	80 93 7c 06 	sts	0x067C, r24
			Config.Channel[OUT3].P1_elevator_volume = 100;
    3366:	80 93 a4 06 	sts	0x06A4, r24
			Config.Channel[OUT4].P1_rudder_volume = 100;
    336a:	80 93 cc 06 	sts	0x06CC, r24
	
			// Set up profile 1
			Config.FlightMode[P1].Roll_P_mult = 60;			// PID defaults
    336e:	6c e3       	ldi	r22, 0x3C	; 60
    3370:	60 93 ea 05 	sts	0x05EA, r22
			Config.FlightMode[P1].A_Roll_P_mult = 5;
    3374:	55 e0       	ldi	r21, 0x05	; 5
    3376:	50 93 ee 05 	sts	0x05EE, r21
			Config.FlightMode[P1].Pitch_P_mult = 60;
    337a:	60 93 f0 05 	sts	0x05F0, r22
			Config.FlightMode[P1].A_Pitch_P_mult = 5;
    337e:	50 93 f4 05 	sts	0x05F4, r21
			Config.FlightMode[P1].Yaw_P_mult = 80;
    3382:	70 e5       	ldi	r23, 0x50	; 80
    3384:	70 93 f6 05 	sts	0x05F6, r23
			Config.FlightMode[P1].Roll_I_mult = 40;
    3388:	48 e2       	ldi	r20, 0x28	; 40
    338a:	40 93 eb 05 	sts	0x05EB, r20
			Config.FlightMode[P1].Roll_limit = 10;
    338e:	3a e0       	ldi	r19, 0x0A	; 10
    3390:	30 93 ec 05 	sts	0x05EC, r19
			Config.FlightMode[P1].Pitch_I_mult = 40;
    3394:	40 93 f1 05 	sts	0x05F1, r20
			Config.FlightMode[P1].Pitch_limit = 10;
    3398:	30 93 f2 05 	sts	0x05F2, r19
			Config.FlightMode[P1].Roll_Rate = 2;
    339c:	22 e0       	ldi	r18, 0x02	; 2
    339e:	20 93 ed 05 	sts	0x05ED, r18
			Config.FlightMode[P1].Pitch_Rate = 2;
    33a2:	20 93 f3 05 	sts	0x05F3, r18
			Config.FlightMode[P1].Yaw_Rate = 1;
    33a6:	91 e0       	ldi	r25, 0x01	; 1
    33a8:	90 93 f9 05 	sts	0x05F9, r25

			// Set up profile 2
			Config.FlightMode[P2].Roll_P_mult = 60;			// PID defaults
    33ac:	60 93 fc 05 	sts	0x05FC, r22
			Config.FlightMode[P2].A_Roll_P_mult = 5;
    33b0:	50 93 00 06 	sts	0x0600, r21
			Config.FlightMode[P2].Pitch_P_mult = 60;
    33b4:	60 93 02 06 	sts	0x0602, r22
			Config.FlightMode[P2].A_Pitch_P_mult = 5;
    33b8:	50 93 06 06 	sts	0x0606, r21
			Config.FlightMode[P2].Yaw_P_mult = 80;
    33bc:	70 93 08 06 	sts	0x0608, r23
			Config.FlightMode[P2].Roll_I_mult = 40;
    33c0:	40 93 fd 05 	sts	0x05FD, r20
			Config.FlightMode[P2].Roll_limit = 10;
    33c4:	30 93 fe 05 	sts	0x05FE, r19
			Config.FlightMode[P2].Pitch_I_mult = 40;
    33c8:	40 93 03 06 	sts	0x0603, r20
			Config.FlightMode[P2].Pitch_limit = 10;
    33cc:	30 93 04 06 	sts	0x0604, r19
			Config.FlightMode[P2].Roll_Rate = 2;
    33d0:	20 93 ff 05 	sts	0x05FF, r18
			Config.FlightMode[P2].Pitch_Rate = 2;
    33d4:	20 93 05 06 	sts	0x0605, r18
			Config.FlightMode[P2].Yaw_Rate = 1;
    33d8:	90 93 0b 06 	sts	0x060B, r25
	
			// Preset stick volumes
			Config.Channel[OUT1].P2_throttle_volume = 100;
    33dc:	80 93 54 06 	sts	0x0654, r24
			Config.Channel[OUT2].P2_aileron_volume = 100;
    33e0:	80 93 7d 06 	sts	0x067D, r24
			Config.Channel[OUT3].P2_elevator_volume = 100;
    33e4:	80 93 a5 06 	sts	0x06A5, r24
			Config.Channel[OUT4].P2_rudder_volume = 100;
    33e8:	80 93 cd 06 	sts	0x06CD, r24

			// Preset basic axis gyros in P2
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    33ec:	90 93 83 06 	sts	0x0683, r25
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    33f0:	90 93 ab 06 	sts	0x06AB, r25
			Config.Channel[OUT4].P2_Yaw_gyro = ON;		
    33f4:	90 93 d3 06 	sts	0x06D3, r25
			
			break;
    33f8:	08 95       	ret
		
		case QUADP:
			// Profile 1
			Config.FlightMode[P1].Roll_P_mult = 60;
    33fa:	9c e3       	ldi	r25, 0x3C	; 60
    33fc:	90 93 ea 05 	sts	0x05EA, r25
			Config.FlightMode[P1].A_Roll_P_mult = 5;
    3400:	25 e0       	ldi	r18, 0x05	; 5
    3402:	20 93 ee 05 	sts	0x05EE, r18
			Config.FlightMode[P1].Pitch_P_mult = 60;
    3406:	90 93 f0 05 	sts	0x05F0, r25
			Config.FlightMode[P1].A_Pitch_P_mult = 5;
    340a:	20 93 f4 05 	sts	0x05F4, r18
			Config.FlightMode[P1].Yaw_P_mult = 60;
    340e:	90 93 f6 05 	sts	0x05F6, r25
			Config.FlightMode[P1].Roll_I_mult = 40;
    3412:	38 e2       	ldi	r19, 0x28	; 40
    3414:	30 93 eb 05 	sts	0x05EB, r19
			Config.FlightMode[P1].Roll_limit = 20;
    3418:	84 e1       	ldi	r24, 0x14	; 20
    341a:	80 93 ec 05 	sts	0x05EC, r24
			Config.FlightMode[P1].Pitch_I_mult = 40;
    341e:	30 93 f1 05 	sts	0x05F1, r19
			Config.FlightMode[P1].Pitch_limit = 20;
    3422:	80 93 f2 05 	sts	0x05F2, r24
			Config.FlightMode[P1].Roll_Rate = 1;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	80 93 ed 05 	sts	0x05ED, r24
			Config.FlightMode[P1].Pitch_Rate = 1;
    342c:	80 93 f3 05 	sts	0x05F3, r24
			Config.FlightMode[P1].Yaw_Rate = 1;
    3430:	80 93 f9 05 	sts	0x05F9, r24
	
			// Profile 2
			Config.FlightMode[P2].Roll_P_mult = 60;
    3434:	90 93 fc 05 	sts	0x05FC, r25
			Config.FlightMode[P2].A_Roll_P_mult = 5;
    3438:	20 93 00 06 	sts	0x0600, r18
			Config.FlightMode[P2].Pitch_P_mult = 60;
    343c:	90 93 02 06 	sts	0x0602, r25
			Config.FlightMode[P2].A_Pitch_P_mult = 5;
    3440:	20 93 06 06 	sts	0x0606, r18
			Config.FlightMode[P2].Yaw_P_mult = 40;
    3444:	30 93 08 06 	sts	0x0608, r19
			Config.FlightMode[P2].Roll_I_mult = 0;
    3448:	10 92 fd 05 	sts	0x05FD, r1
			Config.FlightMode[P2].Roll_limit = 0;
    344c:	10 92 fe 05 	sts	0x05FE, r1
			Config.FlightMode[P2].Pitch_I_mult = 0;
    3450:	10 92 03 06 	sts	0x0603, r1
			Config.FlightMode[P2].Pitch_limit = 0;
    3454:	10 92 04 06 	sts	0x0604, r1
			Config.FlightMode[P2].Roll_Rate = 1;
    3458:	80 93 ff 05 	sts	0x05FF, r24
			Config.FlightMode[P2].Pitch_Rate = 1;
    345c:	80 93 05 06 	sts	0x0605, r24
			Config.FlightMode[P2].Yaw_Rate = 1;
    3460:	80 93 0b 06 	sts	0x060B, r24
    3464:	e4 e5       	ldi	r30, 0x54	; 84
    3466:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3468:	84 e6       	ldi	r24, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    346a:	92 e0       	ldi	r25, 0x02	; 2
    346c:	df 01       	movw	r26, r30
    346e:	11 97       	sbiw	r26, 0x01	; 1
			Config.FlightMode[P2].Pitch_Rate = 1;
			Config.FlightMode[P2].Yaw_Rate = 1;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3470:	8c 93       	st	X, r24
				Config.Channel[i].P2_throttle_volume = 100;
    3472:	80 83       	st	Z, r24
    3474:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].Motor_marker = MOTOR;
    3476:	9c 93       	st	X, r25
    3478:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Pitch_limit = 0;
			Config.FlightMode[P2].Roll_Rate = 1;
			Config.FlightMode[P2].Pitch_Rate = 1;
			Config.FlightMode[P2].Yaw_Rate = 1;
	
			for (i = 0; i <= OUT4; i++)
    347a:	26 e0       	ldi	r18, 0x06	; 6
    347c:	ec 3e       	cpi	r30, 0xEC	; 236
    347e:	f2 07       	cpc	r31, r18
    3480:	a9 f7       	brne	.-22     	; 0x346c <Load_eeprom_preset+0x120>
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
			}

			// OUT1
			Config.Channel[OUT1].P1_elevator_volume = -20;
    3482:	9c ee       	ldi	r25, 0xEC	; 236
    3484:	90 93 58 06 	sts	0x0658, r25
			Config.Channel[OUT1].P2_elevator_volume = -20;
    3488:	90 93 59 06 	sts	0x0659, r25
			Config.Channel[OUT1].P1_rudder_volume = -50;
    348c:	3e ec       	ldi	r19, 0xCE	; 206
    348e:	30 93 5a 06 	sts	0x065A, r19
			Config.Channel[OUT1].P2_rudder_volume = -50;
    3492:	30 93 5b 06 	sts	0x065B, r19
			Config.Channel[OUT1].P1_Pitch_gyro = ON;
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	80 93 5e 06 	sts	0x065E, r24
			Config.Channel[OUT1].P1_Pitch_acc = ON;
    349c:	80 93 64 06 	sts	0x0664, r24
			Config.Channel[OUT1].P2_Pitch_gyro = ON;
    34a0:	80 93 5f 06 	sts	0x065F, r24
			Config.Channel[OUT1].P2_Pitch_acc = ON;
    34a4:	80 93 65 06 	sts	0x0665, r24
			Config.Channel[OUT1].P1_Yaw_gyro = ON;
    34a8:	80 93 60 06 	sts	0x0660, r24
			Config.Channel[OUT1].P2_Yaw_gyro = ON;
    34ac:	80 93 61 06 	sts	0x0661, r24
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -20;
    34b0:	90 93 7c 06 	sts	0x067C, r25
			Config.Channel[OUT2].P2_aileron_volume = -20;
    34b4:	90 93 7d 06 	sts	0x067D, r25
			Config.Channel[OUT2].P1_rudder_volume = 50;
    34b8:	92 e3       	ldi	r25, 0x32	; 50
    34ba:	90 93 80 06 	sts	0x0680, r25
			Config.Channel[OUT2].P2_rudder_volume = 50;
    34be:	90 93 81 06 	sts	0x0681, r25
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    34c2:	80 93 82 06 	sts	0x0682, r24
			Config.Channel[OUT2].P1_Roll_acc = ON;
    34c6:	80 93 88 06 	sts	0x0688, r24
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    34ca:	80 93 83 06 	sts	0x0683, r24
			Config.Channel[OUT2].P2_Roll_acc = ON;
    34ce:	80 93 89 06 	sts	0x0689, r24
			Config.Channel[OUT2].P1_Yaw_gyro = ON;
    34d2:	80 93 86 06 	sts	0x0686, r24
			Config.Channel[OUT2].P2_Yaw_gyro = ON;
    34d6:	80 93 87 06 	sts	0x0687, r24
	
			// OUT3
			Config.Channel[OUT3].P1_elevator_volume = 20;
    34da:	24 e1       	ldi	r18, 0x14	; 20
    34dc:	20 93 a4 06 	sts	0x06A4, r18
			Config.Channel[OUT3].P2_elevator_volume = 20;
    34e0:	20 93 a5 06 	sts	0x06A5, r18
			Config.Channel[OUT3].P1_rudder_volume = -50;
    34e4:	30 93 a6 06 	sts	0x06A6, r19
			Config.Channel[OUT3].P2_rudder_volume = -50;
    34e8:	30 93 a7 06 	sts	0x06A7, r19
			Config.Channel[OUT3].P1_Pitch_gyro = ON;
    34ec:	80 93 aa 06 	sts	0x06AA, r24
			Config.Channel[OUT3].P1_Pitch_acc = ON;
    34f0:	80 93 b0 06 	sts	0x06B0, r24
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    34f4:	80 93 ab 06 	sts	0x06AB, r24
			Config.Channel[OUT3].P2_Pitch_acc = ON;
    34f8:	80 93 b1 06 	sts	0x06B1, r24
			Config.Channel[OUT3].P1_Yaw_gyro = ON;
    34fc:	80 93 ac 06 	sts	0x06AC, r24
			Config.Channel[OUT3].P2_Yaw_gyro = ON;
    3500:	80 93 ad 06 	sts	0x06AD, r24
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 20;
    3504:	20 93 c8 06 	sts	0x06C8, r18
			Config.Channel[OUT4].P2_aileron_volume = 20;
    3508:	20 93 c9 06 	sts	0x06C9, r18
			Config.Channel[OUT4].P1_rudder_volume = 50;
    350c:	90 93 cc 06 	sts	0x06CC, r25
			Config.Channel[OUT4].P2_rudder_volume = 50;
    3510:	90 93 cd 06 	sts	0x06CD, r25
			Config.Channel[OUT4].P1_Roll_gyro = ON;
    3514:	80 93 ce 06 	sts	0x06CE, r24
			Config.Channel[OUT4].P1_Roll_acc = ON;
    3518:	80 93 d4 06 	sts	0x06D4, r24
			Config.Channel[OUT4].P2_Roll_gyro = ON;
    351c:	80 93 cf 06 	sts	0x06CF, r24
			Config.Channel[OUT4].P2_Roll_acc = ON;
    3520:	80 93 d5 06 	sts	0x06D5, r24
    3524:	d4 c0       	rjmp	.+424    	; 0x36ce <Load_eeprom_preset+0x382>
		
			break;
				
		case QUADX:
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    3526:	98 e2       	ldi	r25, 0x28	; 40
    3528:	90 93 ea 05 	sts	0x05EA, r25
			Config.FlightMode[P1].Roll_I_mult = 10;
    352c:	2a e0       	ldi	r18, 0x0A	; 10
    352e:	20 93 eb 05 	sts	0x05EB, r18
			Config.FlightMode[P1].Roll_limit = 10;
    3532:	20 93 ec 05 	sts	0x05EC, r18
			Config.FlightMode[P1].Roll_Rate = 3;
    3536:	83 e0       	ldi	r24, 0x03	; 3
    3538:	80 93 ed 05 	sts	0x05ED, r24
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    353c:	20 93 ee 05 	sts	0x05EE, r18
	
			Config.FlightMode[P1].Pitch_P_mult = 40;
    3540:	90 93 f0 05 	sts	0x05F0, r25
			Config.FlightMode[P1].Pitch_I_mult = 10;
    3544:	20 93 f1 05 	sts	0x05F1, r18
			Config.FlightMode[P1].Pitch_limit = 10;
    3548:	20 93 f2 05 	sts	0x05F2, r18
			Config.FlightMode[P1].Pitch_Rate = 3;
    354c:	80 93 f3 05 	sts	0x05F3, r24
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    3550:	20 93 f4 05 	sts	0x05F4, r18
	
			Config.FlightMode[P1].Yaw_P_mult = 60;
    3554:	4c e3       	ldi	r20, 0x3C	; 60
    3556:	40 93 f6 05 	sts	0x05F6, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    355a:	90 93 f7 05 	sts	0x05F7, r25
			Config.FlightMode[P1].Yaw_limit = 25;
    355e:	39 e1       	ldi	r19, 0x19	; 25
    3560:	30 93 f8 05 	sts	0x05F8, r19
			Config.FlightMode[P1].Yaw_Rate = 3;
    3564:	80 93 f9 05 	sts	0x05F9, r24
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    3568:	22 e3       	ldi	r18, 0x32	; 50
    356a:	20 93 fb 05 	sts	0x05FB, r18
	
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    356e:	90 93 fc 05 	sts	0x05FC, r25
			Config.FlightMode[P2].Roll_I_mult = 20;
    3572:	64 e1       	ldi	r22, 0x14	; 20
    3574:	60 93 fd 05 	sts	0x05FD, r22
			Config.FlightMode[P2].Roll_limit = 15;
    3578:	5f e0       	ldi	r21, 0x0F	; 15
    357a:	50 93 fe 05 	sts	0x05FE, r21
			Config.FlightMode[P2].Roll_Rate = 3;
    357e:	80 93 ff 05 	sts	0x05FF, r24
			Config.FlightMode[P2].A_Roll_P_mult = 0;
    3582:	10 92 00 06 	sts	0x0600, r1
	
			Config.FlightMode[P2].Pitch_P_mult = 40;
    3586:	90 93 02 06 	sts	0x0602, r25
			Config.FlightMode[P2].Pitch_I_mult = 20;
    358a:	60 93 03 06 	sts	0x0603, r22
			Config.FlightMode[P2].Pitch_limit = 15;
    358e:	50 93 04 06 	sts	0x0604, r21
			Config.FlightMode[P2].Pitch_Rate = 3;
    3592:	80 93 05 06 	sts	0x0605, r24
			Config.FlightMode[P2].A_Pitch_P_mult = 0;
    3596:	10 92 06 06 	sts	0x0606, r1
	
			Config.FlightMode[P2].Yaw_P_mult = 60;
    359a:	40 93 08 06 	sts	0x0608, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    359e:	90 93 09 06 	sts	0x0609, r25
			Config.FlightMode[P2].Yaw_limit = 25;
    35a2:	30 93 0a 06 	sts	0x060A, r19
			Config.FlightMode[P2].Yaw_Rate = 3;
    35a6:	80 93 0b 06 	sts	0x060B, r24
			Config.FlightMode[P2].A_Zed_P_mult = 50;
    35aa:	20 93 0d 06 	sts	0x060D, r18
    35ae:	e4 e5       	ldi	r30, 0x54	; 84
    35b0:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    35b2:	84 e6       	ldi	r24, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    35b4:	92 e0       	ldi	r25, 0x02	; 2
    35b6:	df 01       	movw	r26, r30
    35b8:	11 97       	sbiw	r26, 0x01	; 1
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 50;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    35ba:	8c 93       	st	X, r24
				Config.Channel[i].P2_throttle_volume = 100;
    35bc:	80 83       	st	Z, r24
    35be:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].Motor_marker = MOTOR;
    35c0:	9c 93       	st	X, r25
    35c2:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 50;
	
			for (i = 0; i <= OUT4; i++)
    35c4:	26 e0       	ldi	r18, 0x06	; 6
    35c6:	ec 3e       	cpi	r30, 0xEC	; 236
    35c8:	f2 07       	cpc	r31, r18
    35ca:	a9 f7       	brne	.-22     	; 0x35b6 <Load_eeprom_preset+0x26a>
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
			}

			// OUT1
			Config.Channel[OUT1].P1_elevator_volume = -20;
    35cc:	2c ee       	ldi	r18, 0xEC	; 236
    35ce:	20 93 58 06 	sts	0x0658, r18
			Config.Channel[OUT1].P2_elevator_volume = -20;
    35d2:	20 93 59 06 	sts	0x0659, r18
			Config.Channel[OUT1].P1_aileron_volume = 20;
    35d6:	94 e1       	ldi	r25, 0x14	; 20
    35d8:	90 93 56 06 	sts	0x0656, r25
			Config.Channel[OUT1].P2_aileron_volume = 20;
    35dc:	90 93 57 06 	sts	0x0657, r25
			Config.Channel[OUT1].P1_rudder_volume = -50;
    35e0:	4e ec       	ldi	r20, 0xCE	; 206
    35e2:	40 93 5a 06 	sts	0x065A, r20
			Config.Channel[OUT1].P2_rudder_volume = -50;
    35e6:	40 93 5b 06 	sts	0x065B, r20
			Config.Channel[OUT1].P1_Roll_gyro = ON;
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	80 93 5c 06 	sts	0x065C, r24
			Config.Channel[OUT1].P1_Roll_acc = ON;
    35f0:	80 93 62 06 	sts	0x0662, r24
			Config.Channel[OUT1].P2_Roll_gyro = ON;
    35f4:	80 93 5d 06 	sts	0x065D, r24
			Config.Channel[OUT1].P2_Roll_acc = ON;
    35f8:	80 93 63 06 	sts	0x0663, r24
			Config.Channel[OUT1].P1_Pitch_gyro = ON;
    35fc:	80 93 5e 06 	sts	0x065E, r24
			Config.Channel[OUT1].P1_Pitch_acc = ON;
    3600:	80 93 64 06 	sts	0x0664, r24
			Config.Channel[OUT1].P2_Pitch_gyro = ON;
    3604:	80 93 5f 06 	sts	0x065F, r24
			Config.Channel[OUT1].P2_Pitch_acc = ON;
    3608:	80 93 65 06 	sts	0x0665, r24
			Config.Channel[OUT1].P1_Yaw_gyro = ON;
    360c:	80 93 60 06 	sts	0x0660, r24
			Config.Channel[OUT1].P2_Yaw_gyro = ON;
    3610:	80 93 61 06 	sts	0x0661, r24
	
			// OUT2
			Config.Channel[OUT2].P1_elevator_volume = -20;
    3614:	20 93 7e 06 	sts	0x067E, r18
			Config.Channel[OUT2].P2_elevator_volume = -20;
    3618:	20 93 7f 06 	sts	0x067F, r18
			Config.Channel[OUT2].P1_aileron_volume = -20;
    361c:	20 93 7c 06 	sts	0x067C, r18
			Config.Channel[OUT2].P2_aileron_volume = -20;
    3620:	20 93 7d 06 	sts	0x067D, r18
			Config.Channel[OUT2].P1_rudder_volume = 50;
    3624:	32 e3       	ldi	r19, 0x32	; 50
    3626:	30 93 80 06 	sts	0x0680, r19
			Config.Channel[OUT2].P2_rudder_volume = 50;
    362a:	30 93 81 06 	sts	0x0681, r19
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    362e:	80 93 82 06 	sts	0x0682, r24
			Config.Channel[OUT2].P1_Roll_acc = ON;
    3632:	80 93 88 06 	sts	0x0688, r24
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    3636:	80 93 83 06 	sts	0x0683, r24
			Config.Channel[OUT2].P2_Roll_acc = ON;
    363a:	80 93 89 06 	sts	0x0689, r24
			Config.Channel[OUT2].P1_Pitch_gyro = ON;
    363e:	80 93 84 06 	sts	0x0684, r24
			Config.Channel[OUT2].P1_Pitch_acc = ON;
    3642:	80 93 8a 06 	sts	0x068A, r24
			Config.Channel[OUT2].P2_Pitch_gyro = ON;
    3646:	80 93 85 06 	sts	0x0685, r24
			Config.Channel[OUT2].P2_Pitch_acc = ON;
    364a:	80 93 8b 06 	sts	0x068B, r24
			Config.Channel[OUT2].P1_Yaw_gyro = ON;
    364e:	80 93 86 06 	sts	0x0686, r24
			Config.Channel[OUT2].P2_Yaw_gyro = ON;
    3652:	80 93 87 06 	sts	0x0687, r24
	
			// OUT3
			Config.Channel[OUT3].P1_elevator_volume = 20;
    3656:	90 93 a4 06 	sts	0x06A4, r25
			Config.Channel[OUT3].P2_elevator_volume = 20;
    365a:	90 93 a5 06 	sts	0x06A5, r25
			Config.Channel[OUT3].P1_aileron_volume = -20;
    365e:	20 93 a2 06 	sts	0x06A2, r18
			Config.Channel[OUT3].P2_aileron_volume = -20;
    3662:	20 93 a3 06 	sts	0x06A3, r18
			Config.Channel[OUT3].P1_rudder_volume = -50;
    3666:	40 93 a6 06 	sts	0x06A6, r20
			Config.Channel[OUT3].P2_rudder_volume = -50;
    366a:	40 93 a7 06 	sts	0x06A7, r20
			Config.Channel[OUT3].P1_Roll_gyro = ON;
    366e:	80 93 a8 06 	sts	0x06A8, r24
			Config.Channel[OUT3].P1_Roll_acc = ON;
    3672:	80 93 ae 06 	sts	0x06AE, r24
			Config.Channel[OUT3].P2_Roll_gyro = ON;
    3676:	80 93 a9 06 	sts	0x06A9, r24
			Config.Channel[OUT3].P2_Roll_acc = ON;
    367a:	80 93 af 06 	sts	0x06AF, r24
			Config.Channel[OUT3].P1_Pitch_gyro = ON;
    367e:	80 93 aa 06 	sts	0x06AA, r24
			Config.Channel[OUT3].P1_Pitch_acc = ON;
    3682:	80 93 b0 06 	sts	0x06B0, r24
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    3686:	80 93 ab 06 	sts	0x06AB, r24
			Config.Channel[OUT3].P2_Pitch_acc = ON;
    368a:	80 93 b1 06 	sts	0x06B1, r24
			Config.Channel[OUT3].P1_Yaw_gyro = ON;
    368e:	80 93 ac 06 	sts	0x06AC, r24
			Config.Channel[OUT3].P2_Yaw_gyro = ON;
    3692:	80 93 ad 06 	sts	0x06AD, r24
	
			// OUT4
			Config.Channel[OUT4].P1_elevator_volume = 20;
    3696:	90 93 ca 06 	sts	0x06CA, r25
			Config.Channel[OUT4].P2_elevator_volume = 20;
    369a:	90 93 cb 06 	sts	0x06CB, r25
			Config.Channel[OUT4].P1_aileron_volume = 20;
    369e:	90 93 c8 06 	sts	0x06C8, r25
			Config.Channel[OUT4].P2_aileron_volume = 20;
    36a2:	90 93 c9 06 	sts	0x06C9, r25
			Config.Channel[OUT4].P1_rudder_volume = 50;
    36a6:	30 93 cc 06 	sts	0x06CC, r19
			Config.Channel[OUT4].P2_rudder_volume = 50;
    36aa:	30 93 cd 06 	sts	0x06CD, r19
			Config.Channel[OUT4].P1_Roll_gyro = ON;
    36ae:	80 93 ce 06 	sts	0x06CE, r24
			Config.Channel[OUT4].P1_Roll_acc = ON;
    36b2:	80 93 d4 06 	sts	0x06D4, r24
			Config.Channel[OUT4].P2_Roll_gyro = ON;
    36b6:	80 93 cf 06 	sts	0x06CF, r24
			Config.Channel[OUT4].P2_Roll_acc = ON;
    36ba:	80 93 d5 06 	sts	0x06D5, r24
			Config.Channel[OUT4].P1_Pitch_gyro = ON;
    36be:	80 93 d0 06 	sts	0x06D0, r24
			Config.Channel[OUT4].P1_Pitch_acc = ON;
    36c2:	80 93 d6 06 	sts	0x06D6, r24
			Config.Channel[OUT4].P2_Pitch_gyro = ON;
    36c6:	80 93 d1 06 	sts	0x06D1, r24
			Config.Channel[OUT4].P2_Pitch_acc = ON;
    36ca:	80 93 d7 06 	sts	0x06D7, r24
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    36ce:	80 93 d2 06 	sts	0x06D2, r24
			Config.Channel[OUT4].P2_Yaw_gyro = ON;
    36d2:	80 93 d3 06 	sts	0x06D3, r24
    36d6:	08 95       	ret

000036d8 <Set_EEPROM_Default_Config>:
	return new_filter;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    36d8:	cf 93       	push	r28
    36da:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    36dc:	89 e0       	ldi	r24, 0x09	; 9
    36de:	92 e0       	ldi	r25, 0x02	; 2
    36e0:	e8 eb       	ldi	r30, 0xB8	; 184
    36e2:	f5 e0       	ldi	r31, 0x05	; 5
    36e4:	df 01       	movw	r26, r30
    36e6:	9c 01       	movw	r18, r24
    36e8:	1d 92       	st	X+, r1
    36ea:	21 50       	subi	r18, 0x01	; 1
    36ec:	30 40       	sbci	r19, 0x00	; 0
    36ee:	e1 f7       	brne	.-8      	; 0x36e8 <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    36f0:	89 e3       	ldi	r24, 0x39	; 57
    36f2:	80 93 b8 05 	sts	0x05B8, r24

	// Misc settings
	Config.RxMode = PWM;				// Default to PWM
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	80 93 e1 05 	sts	0x05E1, r24
	Config.PWM_Sync = GEAR;
    36fc:	24 e0       	ldi	r18, 0x04	; 4
    36fe:	20 93 e3 05 	sts	0x05E3, r18
	
	// B8 Software LPF conversion table 5Hz, 10Hz, 21Hz, 32Hz, 44Hz, 74Hz, None
	// B10 Software LPF conversion table 5Hz, 10Hz, 21Hz, 44Hz, 94Hz, 184Hz, 260Hz, None
	Config.Acc_LPF = HZ21;				// Acc LPF around 21Hz
    3702:	82 e0       	ldi	r24, 0x02	; 2
    3704:	80 93 46 06 	sts	0x0646, r24
	Config.Gyro_LPF = NOFILTER;			// Gyro LPF off "None"
    3708:	37 e0       	ldi	r19, 0x07	; 7
    370a:	30 93 47 06 	sts	0x0647, r19
	
	// Set default sensor LPF
	Config.MPU6050_LPF = HZ21;			// 6 - 2 = 4. MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz*, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
    370e:	80 93 45 06 	sts	0x0645, r24

	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    3712:	80 e8       	ldi	r24, 0x80	; 128
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	90 93 a9 07 	sts	0x07A9, r25
    371a:	80 93 a8 07 	sts	0x07A8, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    371e:	84 e2       	ldi	r24, 0x24	; 36
    3720:	80 93 41 06 	sts	0x0641, r24
	#endif
	
	Config.CF_factor = 7;
    3724:	30 93 48 06 	sts	0x0648, r19
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    3728:	20 93 e5 05 	sts	0x05E5, r18
	Config.Disarm_timer = 30;			// Default to 30 seconds
    372c:	8e e1       	ldi	r24, 0x1E	; 30
    372e:	80 93 43 06 	sts	0x0643, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    3732:	82 e3       	ldi	r24, 0x32	; 50
    3734:	80 93 e7 05 	sts	0x05E7, r24
    3738:	e6 ef       	ldi	r30, 0xF6	; 246
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	c9 eb       	ldi	r28, 0xB9	; 185
    373e:	d5 e0       	ldi	r29, 0x05	; 5
    3740:	a2 e9       	ldi	r26, 0x92	; 146
    3742:	b7 e0       	ldi	r27, 0x07	; 7

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    3744:	86 ea       	ldi	r24, 0xA6	; 166
    3746:	9e e0       	ldi	r25, 0x0E	; 14
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    3748:	24 91       	lpm	r18, Z
    374a:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    374c:	8d 93       	st	X+, r24
    374e:	9d 93       	st	X+, r25
    3750:	31 96       	adiw	r30, 0x01	; 1
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
	Config.Disarm_timer = 30;			// Default to 30 seconds
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	ee 3f       	cpi	r30, 0xFE	; 254
    3756:	f3 07       	cpc	r31, r19
    3758:	b9 f7       	brne	.-18     	; 0x3748 <Set_EEPROM_Default_Config+0x70>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    375a:	8e eb       	ldi	r24, 0xBE	; 190
    375c:	9a e0       	ldi	r25, 0x0A	; 10
    375e:	90 93 93 07 	sts	0x0793, r25
    3762:	80 93 92 07 	sts	0x0792, r24
    3766:	ee e6       	ldi	r30, 0x6E	; 110
    3768:	f6 e0       	ldi	r31, 0x06	; 6
    376a:	c2 e8       	ldi	r28, 0x82	; 130
    376c:	d7 e0       	ldi	r29, 0x07	; 7
    376e:	6a e8       	ldi	r22, 0x8A	; 138
    3770:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3772:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3774:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    3776:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    3778:	34 e6       	ldi	r19, 0x64	; 100
    377a:	cf 01       	movw	r24, r30
    377c:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    377e:	dc 01       	movw	r26, r24
    3780:	5c 93       	st	X, r21
    3782:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3784:	dc 01       	movw	r26, r24
    3786:	2c 93       	st	X, r18
    3788:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    378a:	dc 01       	movw	r26, r24
    378c:	2c 93       	st	X, r18
    378e:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    3790:	dc 01       	movw	r26, r24
    3792:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3794:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    3796:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    3798:	db 01       	movw	r26, r22
    379a:	3d 93       	st	X+, r19
    379c:	bd 01       	movw	r22, r26
    379e:	b6 96       	adiw	r30, 0x26	; 38
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    37a0:	b7 e0       	ldi	r27, 0x07	; 7
    37a2:	ee 39       	cpi	r30, 0x9E	; 158
    37a4:	fb 07       	cpc	r31, r27
    37a6:	49 f7       	brne	.-46     	; 0x377a <Set_EEPROM_Default_Config+0xa2>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Load manual defaults
	Load_eeprom_preset(MANUAL);
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	0e 94 a6 19 	call	0x334c	; 0x334c <Load_eeprom_preset>
	//**************************************
	//* Debug - simplify testing
	//**************************************

	// General
	Config.RxMode = SBUS;
    37ae:	82 e0       	ldi	r24, 0x02	; 2
    37b0:	80 93 e1 05 	sts	0x05E1, r24
	Config.FlightChan = GEAR;
    37b4:	94 e0       	ldi	r25, 0x04	; 4
    37b6:	90 93 e5 05 	sts	0x05E5, r25
	Config.ArmMode = ARMABLE;
    37ba:	91 e0       	ldi	r25, 0x01	; 1
    37bc:	90 93 42 06 	sts	0x0642, r25
	Config.Servo_rate = FAST;
    37c0:	80 93 e2 05 	sts	0x05E2, r24
	Config.MPU6050_LPF = HZ44;
    37c4:	93 e0       	ldi	r25, 0x03	; 3
    37c6:	90 93 45 06 	sts	0x0645, r25
	Config.Acc_LPF = HZ21;
    37ca:	80 93 46 06 	sts	0x0646, r24
	Config.Gyro_LPF = NOFILTER;
    37ce:	87 e0       	ldi	r24, 0x07	; 7
    37d0:	80 93 47 06 	sts	0x0647, r24
}
    37d4:	df 91       	pop	r29
    37d6:	cf 91       	pop	r28
    37d8:	08 95       	ret

000037da <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    37da:	cf 93       	push	r28
    37dc:	df 93       	push	r29
    37de:	1f 92       	push	r1
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    37e4:	49 e0       	ldi	r20, 0x09	; 9
    37e6:	52 e0       	ldi	r21, 0x02	; 2
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	88 eb       	ldi	r24, 0xB8	; 184
    37ee:	95 e0       	ldi	r25, 0x05	; 5
    37f0:	0e 94 84 4c 	call	0x9908	; 0x9908 <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    37f4:	80 91 b8 05 	lds	r24, 0x05B8
    37f8:	87 33       	cpi	r24, 0x37	; 55
    37fa:	79 f0       	breq	.+30     	; 0x381a <Initial_EEPROM_Config_Load+0x40>
    37fc:	28 f4       	brcc	.+10     	; 0x3808 <Initial_EEPROM_Config_Load+0x2e>
    37fe:	85 33       	cpi	r24, 0x35	; 53
    3800:	41 f0       	breq	.+16     	; 0x3812 <Initial_EEPROM_Config_Load+0x38>
    3802:	86 33       	cpi	r24, 0x36	; 54
    3804:	41 f0       	breq	.+16     	; 0x3816 <Initial_EEPROM_Config_Load+0x3c>
    3806:	0f c0       	rjmp	.+30     	; 0x3826 <Initial_EEPROM_Config_Load+0x4c>
    3808:	88 33       	cpi	r24, 0x38	; 56
    380a:	49 f0       	breq	.+18     	; 0x381e <Initial_EEPROM_Config_Load+0x44>
    380c:	89 33       	cpi	r24, 0x39	; 57
    380e:	69 f0       	breq	.+26     	; 0x382a <Initial_EEPROM_Config_Load+0x50>
    3810:	0a c0       	rjmp	.+20     	; 0x3826 <Initial_EEPROM_Config_Load+0x4c>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    3812:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <Update_V1_0_to_V1_1>
			// Fall through...

		case V1_1_SIGNATURE:				// V1.1 Beta 7 (or below) detected
			Update_V1_1_to_V1_1_B8();	
    3816:	0e 94 42 19 	call	0x3284	; 0x3284 <Update_V1_1_to_V1_1_B8>
			// Fall through...

		case V1_1_B8_SIGNATURE:				// V1.1 Beta 8-9 detected
			Update_V1_1B8_to_V1_1_B10();
    381a:	0e 94 80 19 	call	0x3300	; 0x3300 <Update_V1_1B8_to_V1_1_B10>
			updated = true;
			// Fall through...

		case V1_1_B10_SIGNATURE:			// V1.1 Beta 10+ detected
			Update_V1_1B10_to_V1_1_B12();
    381e:	0e 94 9c 19 	call	0x3338	; 0x3338 <Update_V1_1B10_to_V1_1_B12>
			updated = true;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	03 c0       	rjmp	.+6      	; 0x382c <Initial_EEPROM_Config_Load+0x52>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    3826:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    382a:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    382c:	89 83       	std	Y+1, r24	; 0x01
    382e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    3832:	89 81       	ldd	r24, Y+1	; 0x01
    3834:	0f 90       	pop	r0
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	08 95       	ret

0000383c <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	cd b7       	in	r28, 0x3d	; 61
    3842:	de b7       	in	r29, 0x3e	; 62
    3844:	ab 97       	sbiw	r28, 0x2b	; 43
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	
	// Do all init tasks
	init();
    3850:	0e 94 35 2b 	call	0x566a	; 0x566a <init>
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    3854:	53 e0       	ldi	r21, 0x03	; 3
    3856:	65 2e       	mov	r6, r21
    3858:	71 2c       	mov	r7, r1
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    385a:	18 a6       	std	Y+40, r1	; 0x28
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    385c:	1f a2       	std	Y+39, r1	; 0x27
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    385e:	63 e0       	ldi	r22, 0x03	; 3
    3860:	b6 2e       	mov	r11, r22

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    3862:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    3864:	1f 8a       	std	Y+23, r1	; 0x17
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    3866:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    3868:	1e 8a       	std	Y+22, r1	; 0x16
    386a:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    386c:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    386e:	1d a2       	std	Y+37, r1	; 0x25
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    3870:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    3872:	1b a2       	std	Y+35, r1	; 0x23
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    3874:	1a a2       	std	Y+34, r1	; 0x22

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    3876:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    3878:	18 a2       	std	Y+32, r1	; 0x20
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    387a:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t Disarm_timer = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    387c:	81 2c       	mov	r8, r1
    387e:	91 2c       	mov	r9, r1
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    3880:	19 86       	std	Y+9, r1	; 0x09
    3882:	18 86       	std	Y+8, r1	; 0x08
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    3884:	1a 8a       	std	Y+18, r1	; 0x12
    3886:	19 8a       	std	Y+17, r1	; 0x11
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    3888:	18 8a       	std	Y+16, r1	; 0x10
    388a:	1f 86       	std	Y+15, r1	; 0x0f
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    388c:	1b a6       	std	Y+43, r1	; 0x2b
    388e:	1a a6       	std	Y+42, r1	; 0x2a
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    3890:	1d 8e       	std	Y+29, r1	; 0x1d
    3892:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    3894:	19 8e       	std	Y+25, r1	; 0x19
    3896:	18 8e       	std	Y+24, r1	; 0x18
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    3898:	1e 86       	std	Y+14, r1	; 0x0e
    389a:	1d 86       	std	Y+13, r1	; 0x0d
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    389c:	71 e6       	ldi	r23, 0x61	; 97
    389e:	c7 2e       	mov	r12, r23
    38a0:	71 e5       	ldi	r23, 0x51	; 81
    38a2:	d7 2e       	mov	r13, r23
    38a4:	e1 2c       	mov	r14, r1
    38a6:	f1 2c       	mov	r15, r1
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    38a8:	1b 82       	std	Y+3, r1	; 0x03
    38aa:	1c 82       	std	Y+4, r1	; 0x04
    38ac:	1d 82       	std	Y+5, r1	; 0x05
    38ae:	1e 82       	std	Y+6, r1	; 0x06
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    38b0:	21 2c       	mov	r2, r1
    38b2:	31 2c       	mov	r3, r1
    38b4:	21 01       	movw	r4, r2
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    38b6:	21 e0       	ldi	r18, 0x01	; 1
    38b8:	2a 87       	std	Y+10, r18	; 0x0a
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    38ba:	00 e0       	ldi	r16, 0x00	; 0
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    38bc:	1b 8e       	std	Y+27, r1	; 0x1b
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    38be:	1b 86       	std	Y+11, r1	; 0x0b
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    38c0:	1a 8e       	std	Y+26, r1	; 0x1a
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    38c2:	1f 82       	std	Y+7, r1	; 0x07

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    38c4:	1a 82       	std	Y+2, r1	; 0x02

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    38c6:	80 91 18 05 	lds	r24, 0x0518
    38ca:	8f 5f       	subi	r24, 0xFF	; 255
    38cc:	80 93 18 05 	sts	0x0518, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    38d0:	80 91 ed 07 	lds	r24, 0x07ED
    38d4:	88 23       	and	r24, r24
    38d6:	31 f0       	breq	.+12     	; 0x38e4 <main+0xa8>
		{
			InterruptCounter++;
    38d8:	4d 89       	ldd	r20, Y+21	; 0x15
    38da:	5e 89       	ldd	r21, Y+22	; 0x16
    38dc:	4f 5f       	subi	r20, 0xFF	; 255
    38de:	5f 4f       	sbci	r21, 0xFF	; 255
    38e0:	5e 8b       	std	Y+22, r21	; 0x16
    38e2:	4d 8b       	std	Y+21, r20	; 0x15
		//* Increment Status_seconds every second and trigger
		//* a RC rate resample every second
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    38e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    38e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    38e8:	2c 34       	cpi	r18, 0x4C	; 76
    38ea:	3c 44       	sbci	r19, 0x4C	; 76
    38ec:	98 f0       	brcs	.+38     	; 0x3914 <main+0xd8>
		{
			Status_seconds++;
    38ee:	2f 89       	ldd	r18, Y+23	; 0x17
    38f0:	2f 5f       	subi	r18, 0xFF	; 255
    38f2:	2f 8b       	std	Y+23, r18	; 0x17
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    38f4:	4d 89       	ldd	r20, Y+21	; 0x15
    38f6:	5e 89       	ldd	r21, Y+22	; 0x16
    38f8:	50 93 1d 05 	sts	0x051D, r21
    38fc:	40 93 1c 05 	sts	0x051C, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3900:	80 91 e2 05 	lds	r24, 0x05E2
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    3904:	1e 8a       	std	Y+22, r1	; 0x16
    3906:	1d 8a       	std	Y+21, r1	; 0x15

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    3908:	1e 86       	std	Y+14, r1	; 0x0e
    390a:	1d 86       	std	Y+13, r1	; 0x0d
			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    390c:	82 30       	cpi	r24, 0x02	; 2
    390e:	11 f4       	brne	.+4      	; 0x3914 <main+0xd8>
			{
				ResampleRCRate = true;
    3910:	21 e0       	ldi	r18, 0x01	; 1
    3912:	2b 8f       	std	Y+27, r18	; 0x1b
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    3914:	81 2f       	mov	r24, r17
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	8b 30       	cpi	r24, 0x0B	; 11
    391a:	91 05       	cpc	r25, r1
    391c:	08 f0       	brcs	.+2      	; 0x3920 <main+0xe4>
    391e:	75 c0       	rjmp	.+234    	; 0x3a0a <main+0x1ce>
    3920:	fc 01       	movw	r30, r24
    3922:	e2 5c       	subi	r30, 0xC2	; 194
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	0c 94 0d 4c 	jmp	0x981a	; 0x981a <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    392a:	83 b1       	in	r24, 0x03	; 3
    392c:	80 7f       	andi	r24, 0xF0	; 240
    392e:	80 3f       	cpi	r24, 0xF0	; 240
    3930:	41 f0       	breq	.+16     	; 0x3942 <main+0x106>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    3932:	80 91 6e 00 	lds	r24, 0x006E
    3936:	81 60       	ori	r24, 0x01	; 1
    3938:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    393c:	13 e0       	ldi	r17, 0x03	; 3
					// Reset the status screen timeout
					Status_seconds = 0;
    393e:	1f 8a       	std	Y+23, r1	; 0x17
    3940:	64 c0       	rjmp	.+200    	; 0x3a0a <main+0x1ce>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    3942:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	85 bb       	out	0x15, r24	; 21
    394a:	5f c0       	rjmp	.+190    	; 0x3a0a <main+0x1ce>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    394c:	80 91 d2 07 	lds	r24, 0x07D2
    3950:	81 11       	cpse	r24, r1
    3952:	49 c0       	rjmp	.+146    	; 0x39e6 <main+0x1aa>
    3954:	01 11       	cpse	r16, r1
    3956:	4c c0       	rjmp	.+152    	; 0x39f0 <main+0x1b4>
    3958:	80 91 19 05 	lds	r24, 0x0519
    395c:	88 23       	and	r24, r24
    395e:	09 f4       	brne	.+2      	; 0x3962 <main+0x126>
    3960:	54 c0       	rjmp	.+168    	; 0x3a0a <main+0x1ce>
				{
					// Ready to move on
					Menu_mode = STATUS;
    3962:	14 e0       	ldi	r17, 0x04	; 4
    3964:	54 c0       	rjmp	.+168    	; 0x3a0e <main+0x1d2>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    3966:	0e 94 ed 13 	call	0x27da	; 0x27da <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    396a:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    396c:	19 8e       	std	Y+25, r1	; 0x19
    396e:	18 8e       	std	Y+24, r1	; 0x18
    3970:	41 c0       	rjmp	.+130    	; 0x39f4 <main+0x1b8>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    3972:	1f 9b       	sbis	0x03, 7	; 3
    3974:	4a c0       	rjmp	.+148    	; 0x3a0a <main+0x1ce>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    3976:	15 e0       	ldi	r17, 0x05	; 5
    3978:	48 c0       	rjmp	.+144    	; 0x3a0a <main+0x1ce>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
    397a:	4f 89       	ldd	r20, Y+23	; 0x17
    397c:	4a 30       	cpi	r20, 0x0A	; 10
    397e:	e8 f5       	brcc	.+122    	; 0x39fa <main+0x1be>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    3980:	1f 9b       	sbis	0x03, 7	; 3
    3982:	3d c0       	rjmp	.+122    	; 0x39fe <main+0x1c2>
					// Prevent PWM output
					PWMOverride = true; // Debug - not needed yet?
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    3984:	28 8d       	ldd	r18, Y+24	; 0x18
    3986:	39 8d       	ldd	r19, Y+25	; 0x19
    3988:	23 31       	cpi	r18, 0x13	; 19
    398a:	33 41       	sbci	r19, 0x13	; 19
    398c:	f0 f1       	brcs	.+124    	; 0x3a0a <main+0x1ce>
				{
					Menu_mode = PRESTATUS;
    398e:	13 e0       	ldi	r17, 0x03	; 3
    3990:	2c c0       	rjmp	.+88     	; 0x39ea <main+0x1ae>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3992:	80 91 d2 07 	lds	r24, 0x07D2
    3996:	81 11       	cpse	r24, r1
    3998:	34 c0       	rjmp	.+104    	; 0x3a02 <main+0x1c6>
    399a:	01 11       	cpse	r16, r1
    399c:	32 c0       	rjmp	.+100    	; 0x3a02 <main+0x1c6>
    399e:	80 91 19 05 	lds	r24, 0x0519
    39a2:	88 23       	and	r24, r24
    39a4:	39 f1       	breq	.+78     	; 0x39f4 <main+0x1b8>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    39a6:	18 e0       	ldi	r17, 0x08	; 8
    39a8:	30 c0       	rjmp	.+96     	; 0x3a0a <main+0x1ce>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    39aa:	0e 94 43 24 	call	0x4886	; 0x4886 <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    39ae:	19 e0       	ldi	r17, 0x09	; 9
    39b0:	21 c0       	rjmp	.+66     	; 0x39f4 <main+0x1b8>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    39b2:	80 91 d2 07 	lds	r24, 0x07D2
    39b6:	81 11       	cpse	r24, r1
    39b8:	26 c0       	rjmp	.+76     	; 0x3a06 <main+0x1ca>
    39ba:	01 11       	cpse	r16, r1
    39bc:	24 c0       	rjmp	.+72     	; 0x3a06 <main+0x1ca>
    39be:	80 91 19 05 	lds	r24, 0x0519
    39c2:	88 23       	and	r24, r24
    39c4:	21 f1       	breq	.+72     	; 0x3a0e <main+0x1d2>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    39c6:	10 e0       	ldi	r17, 0x00	; 0
    39c8:	20 c0       	rjmp	.+64     	; 0x3a0a <main+0x1ce>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    39ca:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    39cc:	80 91 20 05 	lds	r24, 0x0520
    39d0:	84 60       	ori	r24, 0x04	; 4
    39d2:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    39d6:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    39d8:	0e 94 3a 36 	call	0x6c74	; 0x6c74 <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    39dc:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    39e0:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    39e2:	1f 8a       	std	Y+23, r1	; 0x17
    39e4:	14 c0       	rjmp	.+40     	; 0x3a0e <main+0x1d2>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    39e6:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    39e8:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Ready to move on
					Menu_mode = STATUS;
							
					// Prevent PWM output
					PWMOverride = true;		
    39ea:	21 e0       	ldi	r18, 0x01	; 1
    39ec:	29 83       	std	Y+1, r18	; 0x01
    39ee:	11 c0       	rjmp	.+34     	; 0x3a12 <main+0x1d6>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    39f0:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    39f2:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Ready to move on
					Menu_mode = STATUS;
							
					// Prevent PWM output
					PWMOverride = true;		
    39f4:	31 e0       	ldi	r19, 0x01	; 1
    39f6:	39 83       	std	Y+1, r19	; 0x01
    39f8:	0c c0       	rjmp	.+24     	; 0x3a12 <main+0x1d6>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    39fa:	17 e0       	ldi	r17, 0x07	; 7
    39fc:	06 c0       	rjmp	.+12     	; 0x3a0a <main+0x1ce>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    39fe:	1a e0       	ldi	r17, 0x0A	; 10
    3a00:	f4 cf       	rjmp	.-24     	; 0x39ea <main+0x1ae>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    3a02:	18 e0       	ldi	r17, 0x08	; 8
    3a04:	01 c0       	rjmp	.+2      	; 0x3a08 <main+0x1cc>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3a06:	10 e0       	ldi	r17, 0x00	; 0
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3a08:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    3a0a:	19 82       	std	Y+1, r1	; 0x01
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <main+0x1d6>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    3a0e:	41 e0       	ldi	r20, 0x01	; 1
    3a10:	49 83       	std	Y+1, r20	; 0x01
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message and disarm
		if (Overdue)
    3a12:	80 91 19 05 	lds	r24, 0x0519
    3a16:	88 23       	and	r24, r24
    3a18:	a1 f0       	breq	.+40     	; 0x3a42 <main+0x206>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    3a1a:	80 91 20 05 	lds	r24, 0x0520
    3a1e:	82 60       	ori	r24, 0x02	; 2
    3a20:	80 93 20 05 	sts	0x0520, r24
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    3a24:	80 91 42 06 	lds	r24, 0x0642
    3a28:	81 30       	cpi	r24, 0x01	; 1
    3a2a:	81 f4       	brne	.+32     	; 0x3a4c <main+0x210>
    3a2c:	80 91 20 05 	lds	r24, 0x0520
    3a30:	82 fd       	sbrc	r24, 2
    3a32:	0c c0       	rjmp	.+24     	; 0x3a4c <main+0x210>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    3a34:	80 91 20 05 	lds	r24, 0x0520
    3a38:	84 60       	ori	r24, 0x04	; 4
    3a3a:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;							// Signal that FC is now disarmed
    3a3e:	2b 98       	cbi	0x05, 3	; 5
    3a40:	05 c0       	rjmp	.+10     	; 0x3a4c <main+0x210>
			}
		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    3a42:	80 91 20 05 	lds	r24, 0x0520
    3a46:	8d 7f       	andi	r24, 0xFD	; 253
    3a48:	80 93 20 05 	sts	0x0520, r24
		}

		// Beep buzzer if Vbat lower than trigger		
		if (GetVbat() < Config.PowerTriggerActual)
    3a4c:	0e 94 6a 49 	call	0x92d4	; 0x92d4 <GetVbat>
    3a50:	20 91 3e 06 	lds	r18, 0x063E
    3a54:	30 91 3f 06 	lds	r19, 0x063F
    3a58:	82 17       	cp	r24, r18
    3a5a:	93 07       	cpc	r25, r19
    3a5c:	20 f4       	brcc	.+8      	; 0x3a66 <main+0x22a>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    3a5e:	80 91 20 05 	lds	r24, 0x0520
    3a62:	88 60       	ori	r24, 0x08	; 8
    3a64:	03 c0       	rjmp	.+6      	; 0x3a6c <main+0x230>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    3a66:	80 91 20 05 	lds	r24, 0x0520
    3a6a:	87 7f       	andi	r24, 0xF7	; 247
    3a6c:	80 93 20 05 	sts	0x0520, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    3a70:	80 91 20 05 	lds	r24, 0x0520
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    3a74:	83 fd       	sbrc	r24, 3
    3a76:	08 c0       	rjmp	.+16     	; 0x3a88 <main+0x24c>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3a78:	80 91 20 05 	lds	r24, 0x0520
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    3a7c:	81 fd       	sbrc	r24, 1
    3a7e:	04 c0       	rjmp	.+8      	; 0x3a88 <main+0x24c>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    3a80:	80 91 20 05 	lds	r24, 0x0520

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3a84:	80 ff       	sbrs	r24, 0
    3a86:	06 c0       	rjmp	.+12     	; 0x3a94 <main+0x258>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    3a88:	80 91 1e 05 	lds	r24, 0x051E
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    3a8c:	84 ff       	sbrs	r24, 4
    3a8e:	02 c0       	rjmp	.+4      	; 0x3a94 <main+0x258>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    3a90:	29 9a       	sbi	0x05, 1	; 5
    3a92:	01 c0       	rjmp	.+2      	; 0x3a96 <main+0x25a>
		}
		else 
		{
			LVA = 0;
    3a94:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    3a96:	80 91 42 06 	lds	r24, 0x0642
    3a9a:	81 30       	cpi	r24, 0x01	; 1
    3a9c:	09 f0       	breq	.+2      	; 0x3aa0 <main+0x264>
    3a9e:	8e c0       	rjmp	.+284    	; 0x3bbc <main+0x380>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3aa0:	80 91 35 08 	lds	r24, 0x0835
    3aa4:	90 91 36 08 	lds	r25, 0x0836
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    3aa8:	81 34       	cpi	r24, 0x41	; 65
    3aaa:	9c 4f       	sbci	r25, 0xFC	; 252
    3aac:	44 f0       	brlt	.+16     	; 0x3abe <main+0x282>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3aae:	80 91 35 08 	lds	r24, 0x0835
    3ab2:	90 91 36 08 	lds	r25, 0x0836
    3ab6:	80 3c       	cpi	r24, 0xC0	; 192
    3ab8:	93 40       	sbci	r25, 0x03	; 3
    3aba:	0c f4       	brge	.+2      	; 0x3abe <main+0x282>
    3abc:	4f c0       	rjmp	.+158    	; 0x3b5c <main+0x320>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3abe:	80 91 37 08 	lds	r24, 0x0837
    3ac2:	90 91 38 08 	lds	r25, 0x0838
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3ac6:	81 34       	cpi	r24, 0x41	; 65
    3ac8:	9c 4f       	sbci	r25, 0xFC	; 252
    3aca:	44 f0       	brlt	.+16     	; 0x3adc <main+0x2a0>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3acc:	80 91 37 08 	lds	r24, 0x0837
    3ad0:	90 91 38 08 	lds	r25, 0x0838
    3ad4:	80 3c       	cpi	r24, 0xC0	; 192
    3ad6:	93 40       	sbci	r25, 0x03	; 3
    3ad8:	0c f4       	brge	.+2      	; 0x3adc <main+0x2a0>
    3ada:	40 c0       	rjmp	.+128    	; 0x3b5c <main+0x320>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3adc:	80 91 39 08 	lds	r24, 0x0839
    3ae0:	90 91 3a 08 	lds	r25, 0x083A
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3ae4:	81 34       	cpi	r24, 0x41	; 65
    3ae6:	9c 4f       	sbci	r25, 0xFC	; 252
    3ae8:	3c f0       	brlt	.+14     	; 0x3af8 <main+0x2bc>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3aea:	80 91 39 08 	lds	r24, 0x0839
    3aee:	90 91 3a 08 	lds	r25, 0x083A
    3af2:	80 3c       	cpi	r24, 0xC0	; 192
    3af4:	93 40       	sbci	r25, 0x03	; 3
    3af6:	94 f1       	brlt	.+100    	; 0x3b5c <main+0x320>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    3af8:	80 91 31 08 	lds	r24, 0x0831
    3afc:	90 91 32 08 	lds	r25, 0x0832
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3b00:	c3 97       	sbiw	r24, 0x33	; 51
    3b02:	64 f5       	brge	.+88     	; 0x3b5c <main+0x320>
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    3b04:	3c e4       	ldi	r19, 0x4C	; 76
    3b06:	23 16       	cp	r2, r19
    3b08:	33 06       	cpc	r3, r19
    3b0a:	41 04       	cpc	r4, r1
    3b0c:	51 04       	cpc	r5, r1
    3b0e:	48 f1       	brcs	.+82     	; 0x3b62 <main+0x326>
    3b10:	80 91 35 08 	lds	r24, 0x0835
    3b14:	90 91 36 08 	lds	r25, 0x0836
    3b18:	80 34       	cpi	r24, 0x40	; 64
    3b1a:	9c 4f       	sbci	r25, 0xFC	; 252
    3b1c:	5c f4       	brge	.+22     	; 0x3b34 <main+0x2f8>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    3b1e:	80 91 20 05 	lds	r24, 0x0520
    3b22:	8b 7f       	andi	r24, 0xFB	; 251
    3b24:	80 93 20 05 	sts	0x0520, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    3b28:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <CalibrateGyrosSlow>
				LED1 = 1;								// Signal that FC is ready
    3b2c:	2b 9a       	sbi	0x05, 3	; 5
				reset_IMU();							// Reset IMU just in case...
    3b2e:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <reset_IMU>
    3b32:	14 c0       	rjmp	.+40     	; 0x3b5c <main+0x320>
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    3b34:	52 ee       	ldi	r21, 0xE2	; 226
    3b36:	25 16       	cp	r2, r21
    3b38:	54 ee       	ldi	r21, 0xE4	; 228
    3b3a:	35 06       	cpc	r3, r21
    3b3c:	41 04       	cpc	r4, r1
    3b3e:	51 04       	cpc	r5, r1
    3b40:	80 f0       	brcs	.+32     	; 0x3b62 <main+0x326>
    3b42:	80 91 35 08 	lds	r24, 0x0835
    3b46:	90 91 36 08 	lds	r25, 0x0836
    3b4a:	81 3c       	cpi	r24, 0xC1	; 193
    3b4c:	93 40       	sbci	r25, 0x03	; 3
    3b4e:	4c f0       	brlt	.+18     	; 0x3b62 <main+0x326>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3b50:	80 91 20 05 	lds	r24, 0x0520
    3b54:	84 60       	ori	r24, 0x04	; 4
    3b56:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;								// Signal that FC is now disarmed
    3b5a:	2b 98       	cbi	0x05, 3	; 5
    3b5c:	21 2c       	mov	r2, r1
    3b5e:	31 2c       	mov	r3, r1
    3b60:	21 01       	movw	r4, r2
			}

			// Automatic disarm
			// Reset auto-disarm count if any RX activity or set to zero, or when currently disarmed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    3b62:	80 91 1f 05 	lds	r24, 0x051F
    3b66:	80 fd       	sbrc	r24, 0
    3b68:	11 c0       	rjmp	.+34     	; 0x3b8c <main+0x350>
    3b6a:	80 91 43 06 	lds	r24, 0x0643
    3b6e:	88 23       	and	r24, r24
    3b70:	69 f0       	breq	.+26     	; 0x3b8c <main+0x350>
    3b72:	80 91 20 05 	lds	r24, 0x0520
    3b76:	82 fd       	sbrc	r24, 2
    3b78:	09 c0       	rjmp	.+18     	; 0x3b8c <main+0x350>
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    3b7a:	28 85       	ldd	r18, Y+8	; 0x08
    3b7c:	39 85       	ldd	r19, Y+9	; 0x09
    3b7e:	2c 34       	cpi	r18, 0x4C	; 76
    3b80:	3c 44       	sbci	r19, 0x4C	; 76
    3b82:	38 f0       	brcs	.+14     	; 0x3b92 <main+0x356>
			{
				Disarm_seconds++;
    3b84:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b86:	2f 5f       	subi	r18, 0xFF	; 255
    3b88:	2c 87       	std	Y+12, r18	; 0x0c
    3b8a:	01 c0       	rjmp	.+2      	; 0x3b8e <main+0x352>
    3b8c:	1c 86       	std	Y+12, r1	; 0x0c
    3b8e:	19 86       	std	Y+9, r1	; 0x09
    3b90:	18 86       	std	Y+8, r1	; 0x08
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			// Don't allow disarms less than 30 seconds. That's just silly...
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    3b92:	40 91 43 06 	lds	r20, 0x0643
    3b96:	5c 85       	ldd	r21, Y+12	; 0x0c
    3b98:	25 2f       	mov	r18, r21
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	84 2f       	mov	r24, r20
    3b9e:	99 27       	eor	r25, r25
    3ba0:	87 fd       	sbrc	r24, 7
    3ba2:	90 95       	com	r25
    3ba4:	28 17       	cp	r18, r24
    3ba6:	39 07       	cpc	r19, r25
    3ba8:	7c f0       	brlt	.+30     	; 0x3bc8 <main+0x38c>
    3baa:	4e 31       	cpi	r20, 0x1E	; 30
    3bac:	6c f0       	brlt	.+26     	; 0x3bc8 <main+0x38c>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3bae:	80 91 20 05 	lds	r24, 0x0520
    3bb2:	84 60       	ori	r24, 0x04	; 4
    3bb4:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;								// Signal that FC is now disarmed
    3bb8:	2b 98       	cbi	0x05, 3	; 5
    3bba:	06 c0       	rjmp	.+12     	; 0x3bc8 <main+0x38c>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    3bbc:	80 91 20 05 	lds	r24, 0x0520
    3bc0:	8b 7f       	andi	r24, 0xFB	; 251
    3bc2:	80 93 20 05 	sts	0x0520, r24
			LED1 = 1;
    3bc6:	2b 9a       	sbi	0x05, 3	; 5
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    3bc8:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    3bcc:	80 91 31 08 	lds	r24, 0x0831
    3bd0:	90 91 32 08 	lds	r25, 0x0832
    3bd4:	c2 97       	sbiw	r24, 0x32	; 50
    3bd6:	5c f4       	brge	.+22     	; 0x3bee <main+0x3b2>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    3bd8:	80 91 20 05 	lds	r24, 0x0520
    3bdc:	8e 7f       	andi	r24, 0xFE	; 254
    3bde:	80 93 20 05 	sts	0x0520, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    3be2:	88 e1       	ldi	r24, 0x18	; 24
    3be4:	a5 ef       	ldi	r26, 0xF5	; 245
    3be6:	b7 e0       	ldi	r27, 0x07	; 7
    3be8:	1d 92       	st	X+, r1
    3bea:	8a 95       	dec	r24
    3bec:	e9 f7       	brne	.-6      	; 0x3be8 <main+0x3ac>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to.
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    3bee:	80 91 e5 05 	lds	r24, 0x05E5
    3bf2:	88 0f       	add	r24, r24
    3bf4:	99 0b       	sbc	r25, r25
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	ed 5c       	subi	r30, 0xCD	; 205
    3bfa:	f7 4f       	sbci	r31, 0xF7	; 247
    3bfc:	20 81       	ld	r18, Z
    3bfe:	31 81       	ldd	r19, Z+1	; 0x01
    3c00:	25 3f       	cpi	r18, 0xF5	; 245
    3c02:	31 40       	sbci	r19, 0x01	; 1
    3c04:	14 f0       	brlt	.+4      	; 0x3c0a <main+0x3ce>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    3c06:	22 e0       	ldi	r18, 0x02	; 2
    3c08:	06 c0       	rjmp	.+12     	; 0x3c16 <main+0x3da>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    3c0a:	20 81       	ld	r18, Z
    3c0c:	31 81       	ldd	r19, Z+1	; 0x01
    3c0e:	2d 30       	cpi	r18, 0x0D	; 13
    3c10:	3e 4f       	sbci	r19, 0xFE	; 254
    3c12:	24 f0       	brlt	.+8      	; 0x3c1c <main+0x3e0>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    3c14:	21 e0       	ldi	r18, 0x01	; 1
    3c16:	20 93 b6 07 	sts	0x07B6, r18
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <main+0x3e4>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    3c1c:	10 92 b6 07 	sts	0x07B6, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    3c20:	f3 e0       	ldi	r31, 0x03	; 3
    3c22:	bf 16       	cp	r11, r31
    3c24:	29 f0       	breq	.+10     	; 0x3c30 <main+0x3f4>
    3c26:	20 91 e6 05 	lds	r18, 0x05E6
    3c2a:	3f a1       	ldd	r19, Y+39	; 0x27
    3c2c:	32 17       	cp	r19, r18
    3c2e:	51 f1       	breq	.+84     	; 0x3c84 <main+0x448>
		{
			switch(Config.FlightSel)
    3c30:	b0 90 b6 07 	lds	r11, 0x07B6
    3c34:	41 e0       	ldi	r20, 0x01	; 1
    3c36:	b4 16       	cp	r11, r20
    3c38:	61 f0       	breq	.+24     	; 0x3c52 <main+0x416>
    3c3a:	52 e0       	ldi	r21, 0x02	; 2
    3c3c:	b5 16       	cp	r11, r21
    3c3e:	b1 f0       	breq	.+44     	; 0x3c6c <main+0x430>
    3c40:	b1 10       	cpse	r11, r1
    3c42:	1d c0       	rjmp	.+58     	; 0x3c7e <main+0x442>
			{
				case 0:
					Transition_state = TRANS_P1;
    3c44:	10 92 23 05 	sts	0x0523, r1
					transition_counter = 0;
    3c48:	10 92 25 05 	sts	0x0525, r1
    3c4c:	10 92 24 05 	sts	0x0524, r1
					break;
    3c50:	16 c0       	rjmp	.+44     	; 0x3c7e <main+0x442>
				case 1:
					Transition_state = TRANS_P1n;
    3c52:	24 e0       	ldi	r18, 0x04	; 4
    3c54:	20 93 23 05 	sts	0x0523, r18
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    3c58:	20 91 e7 05 	lds	r18, 0x05E7
    3c5c:	33 27       	eor	r19, r19
    3c5e:	27 fd       	sbrc	r18, 7
    3c60:	30 95       	com	r19
    3c62:	30 93 25 05 	sts	0x0525, r19
    3c66:	20 93 24 05 	sts	0x0524, r18
					break;
    3c6a:	09 c0       	rjmp	.+18     	; 0x3c7e <main+0x442>
				case 2:
					Transition_state = TRANS_P2;
    3c6c:	29 e0       	ldi	r18, 0x09	; 9
    3c6e:	20 93 23 05 	sts	0x0523, r18
					transition_counter = 100;
    3c72:	a4 e6       	ldi	r26, 0x64	; 100
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	b0 93 25 05 	sts	0x0525, r27
    3c7a:	a0 93 24 05 	sts	0x0524, r26
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    3c7e:	20 91 e6 05 	lds	r18, 0x05E6
    3c82:	2f a3       	std	Y+39, r18	; 0x27
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    3c84:	30 91 b6 07 	lds	r19, 0x07B6
    3c88:	3e 8f       	std	Y+30, r19	; 0x1e
    3c8a:	31 e0       	ldi	r19, 0x01	; 1
    3c8c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3c8e:	4b 11       	cpse	r20, r11
    3c90:	01 c0       	rjmp	.+2      	; 0x3c94 <main+0x458>
    3c92:	30 e0       	ldi	r19, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    3c94:	20 91 e6 05 	lds	r18, 0x05E6
    3c98:	21 11       	cpse	r18, r1
    3c9a:	1b c0       	rjmp	.+54     	; 0x3cd2 <main+0x496>
		{
			// Offset RC input to (approx) -250 to 2250
			temp1 = RCinputs[Config.FlightChan] + 1000;
    3c9c:	fc 01       	movw	r30, r24
    3c9e:	ed 5c       	subi	r30, 0xCD	; 205
    3ca0:	f7 4f       	sbci	r31, 0xF7	; 247
    3ca2:	80 81       	ld	r24, Z
    3ca4:	91 81       	ldd	r25, Z+1	; 0x01
    3ca6:	88 51       	subi	r24, 0x18	; 24
    3ca8:	9c 4f       	sbci	r25, 0xFC	; 252
    3caa:	97 ff       	sbrs	r25, 7
    3cac:	02 c0       	rjmp	.+4      	; 0x3cb2 <main+0x476>
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    3cb2:	0a 96       	adiw	r24, 0x0a	; 10
    3cb4:	64 e1       	ldi	r22, 0x14	; 20
    3cb6:	70 e0       	ldi	r23, 0x00	; 0
    3cb8:	0e 94 b8 4b 	call	0x9770	; 0x9770 <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    3cbc:	65 36       	cpi	r22, 0x65	; 101
    3cbe:	71 05       	cpc	r23, r1
    3cc0:	0c f4       	brge	.+2      	; 0x3cc4 <main+0x488>
    3cc2:	72 c3       	rjmp	.+1764   	; 0x43a8 <main+0xb6c>
    3cc4:	84 e6       	ldi	r24, 0x64	; 100
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	90 93 22 05 	sts	0x0522, r25
    3ccc:	80 93 21 05 	sts	0x0521, r24
    3cd0:	6f c3       	rjmp	.+1758   	; 0x43b0 <main+0xb74>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    3cd2:	80 91 24 05 	lds	r24, 0x0524
    3cd6:	90 91 25 05 	lds	r25, 0x0525
    3cda:	90 93 22 05 	sts	0x0522, r25
    3cde:	80 93 21 05 	sts	0x0521, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    3ce2:	33 23       	and	r19, r19
    3ce4:	99 f0       	breq	.+38     	; 0x3d0c <main+0x4d0>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    3ce6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3ce8:	84 2f       	mov	r24, r20
    3cea:	99 27       	eor	r25, r25
    3cec:	87 fd       	sbrc	r24, 7
    3cee:	90 95       	com	r25
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	ee 0f       	add	r30, r30
    3cf4:	ff 1f       	adc	r31, r31
    3cf6:	e8 0f       	add	r30, r24
    3cf8:	f9 1f       	adc	r31, r25
    3cfa:	eb 0d       	add	r30, r11
    3cfc:	f1 1d       	adc	r31, r1
    3cfe:	b7 fc       	sbrc	r11, 7
    3d00:	fa 95       	dec	r31
    3d02:	e2 50       	subi	r30, 0x02	; 2
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	e4 91       	lpm	r30, Z
    3d08:	e0 93 23 05 	sts	0x0523, r30

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3d0c:	22 23       	and	r18, r18
    3d0e:	49 f0       	breq	.+18     	; 0x3d22 <main+0x4e6>
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
		}

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    3d10:	53 ec       	ldi	r21, 0xC3	; 195
    3d12:	25 03       	mulsu	r18, r21
    3d14:	c0 01       	movw	r24, r0
    3d16:	11 24       	eor	r1, r1
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3d18:	49 89       	ldd	r20, Y+17	; 0x11
    3d1a:	5a 89       	ldd	r21, Y+18	; 0x12
    3d1c:	84 17       	cp	r24, r20
    3d1e:	95 07       	cpc	r25, r21
    3d20:	18 f0       	brcs	.+6      	; 0x3d28 <main+0x4ec>
    3d22:	33 23       	and	r19, r19
    3d24:	09 f4       	brne	.+2      	; 0x3d28 <main+0x4ec>
    3d26:	a9 c0       	rjmp	.+338    	; 0x3e7a <main+0x63e>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    3d28:	80 91 23 05 	lds	r24, 0x0523
    3d2c:	81 11       	cpse	r24, r1
    3d2e:	05 c0       	rjmp	.+10     	; 0x3d3a <main+0x4fe>
			{
				transition_counter = 0;
    3d30:	10 92 25 05 	sts	0x0525, r1
    3d34:	10 92 24 05 	sts	0x0524, r1
    3d38:	22 c0       	rjmp	.+68     	; 0x3d7e <main+0x542>
			}
			else if (Transition_state == TRANS_P1n)
    3d3a:	84 30       	cpi	r24, 0x04	; 4
    3d3c:	31 f4       	brne	.+12     	; 0x3d4a <main+0x50e>
			{
				transition_counter = Config.Transition_P1n;
    3d3e:	80 91 e7 05 	lds	r24, 0x05E7
    3d42:	99 27       	eor	r25, r25
    3d44:	87 fd       	sbrc	r24, 7
    3d46:	90 95       	com	r25
    3d48:	04 c0       	rjmp	.+8      	; 0x3d52 <main+0x516>
			}
			else if (Transition_state == TRANS_P2)
    3d4a:	89 30       	cpi	r24, 0x09	; 9
    3d4c:	39 f4       	brne	.+14     	; 0x3d5c <main+0x520>
			{
				transition_counter = 100;
    3d4e:	84 e6       	ldi	r24, 0x64	; 100
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	90 93 25 05 	sts	0x0525, r25
    3d56:	80 93 24 05 	sts	0x0524, r24
    3d5a:	11 c0       	rjmp	.+34     	; 0x3d7e <main+0x542>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    3d5c:	81 30       	cpi	r24, 0x01	; 1
    3d5e:	79 f4       	brne	.+30     	; 0x3d7e <main+0x542>
    3d60:	80 91 e7 05 	lds	r24, 0x05E7
    3d64:	99 27       	eor	r25, r25
    3d66:	87 fd       	sbrc	r24, 7
    3d68:	90 95       	com	r25
    3d6a:	20 91 24 05 	lds	r18, 0x0524
    3d6e:	30 91 25 05 	lds	r19, 0x0525
    3d72:	82 17       	cp	r24, r18
    3d74:	93 07       	cpc	r25, r19
    3d76:	1c f4       	brge	.+6      	; 0x3d7e <main+0x542>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    3d78:	88 e0       	ldi	r24, 0x08	; 8
    3d7a:	80 93 23 05 	sts	0x0523, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    3d7e:	80 91 23 05 	lds	r24, 0x0523
    3d82:	88 30       	cpi	r24, 0x08	; 8
    3d84:	79 f4       	brne	.+30     	; 0x3da4 <main+0x568>
    3d86:	80 91 e7 05 	lds	r24, 0x05E7
    3d8a:	99 27       	eor	r25, r25
    3d8c:	87 fd       	sbrc	r24, 7
    3d8e:	90 95       	com	r25
    3d90:	20 91 24 05 	lds	r18, 0x0524
    3d94:	30 91 25 05 	lds	r19, 0x0525
    3d98:	28 17       	cp	r18, r24
    3d9a:	39 07       	cpc	r19, r25
    3d9c:	1c f4       	brge	.+6      	; 0x3da4 <main+0x568>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	80 93 23 05 	sts	0x0523, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    3da4:	80 91 23 05 	lds	r24, 0x0523
    3da8:	8b 7f       	andi	r24, 0xFB	; 251
    3daa:	82 30       	cpi	r24, 0x02	; 2
    3dac:	91 f4       	brne	.+36     	; 0x3dd2 <main+0x596>
			{
				transition_counter--;
    3dae:	80 91 24 05 	lds	r24, 0x0524
    3db2:	90 91 25 05 	lds	r25, 0x0525
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	90 93 25 05 	sts	0x0525, r25
    3dbc:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= 0)
    3dc0:	18 16       	cp	r1, r24
    3dc2:	19 06       	cpc	r1, r25
    3dc4:	34 f0       	brlt	.+12     	; 0x3dd2 <main+0x596>
				{
					transition_counter = 0;
    3dc6:	10 92 25 05 	sts	0x0525, r1
    3dca:	10 92 24 05 	sts	0x0524, r1
					Transition_state = TRANS_P1;
    3dce:	10 92 23 05 	sts	0x0523, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    3dd2:	80 91 23 05 	lds	r24, 0x0523
    3dd6:	81 30       	cpi	r24, 0x01	; 1
    3dd8:	c1 f4       	brne	.+48     	; 0x3e0a <main+0x5ce>
			{
				transition_counter++;
    3dda:	80 91 24 05 	lds	r24, 0x0524
    3dde:	90 91 25 05 	lds	r25, 0x0525
    3de2:	01 96       	adiw	r24, 0x01	; 1
    3de4:	90 93 25 05 	sts	0x0525, r25
    3de8:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= Config.Transition_P1n)
    3dec:	20 91 e7 05 	lds	r18, 0x05E7
    3df0:	33 27       	eor	r19, r19
    3df2:	27 fd       	sbrc	r18, 7
    3df4:	30 95       	com	r19
    3df6:	82 17       	cp	r24, r18
    3df8:	93 07       	cpc	r25, r19
    3dfa:	3c f0       	brlt	.+14     	; 0x3e0a <main+0x5ce>
				{
					transition_counter = Config.Transition_P1n;
    3dfc:	30 93 25 05 	sts	0x0525, r19
    3e00:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    3e04:	84 e0       	ldi	r24, 0x04	; 4
    3e06:	80 93 23 05 	sts	0x0523, r24
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    3e0a:	80 91 23 05 	lds	r24, 0x0523
    3e0e:	88 30       	cpi	r24, 0x08	; 8
    3e10:	c1 f4       	brne	.+48     	; 0x3e42 <main+0x606>
			{
				transition_counter--;
    3e12:	80 91 24 05 	lds	r24, 0x0524
    3e16:	90 91 25 05 	lds	r25, 0x0525
    3e1a:	01 97       	sbiw	r24, 0x01	; 1
    3e1c:	90 93 25 05 	sts	0x0525, r25
    3e20:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= Config.Transition_P1n)
    3e24:	20 91 e7 05 	lds	r18, 0x05E7
    3e28:	33 27       	eor	r19, r19
    3e2a:	27 fd       	sbrc	r18, 7
    3e2c:	30 95       	com	r19
    3e2e:	28 17       	cp	r18, r24
    3e30:	39 07       	cpc	r19, r25
    3e32:	3c f0       	brlt	.+14     	; 0x3e42 <main+0x606>
				{
					transition_counter = Config.Transition_P1n;
    3e34:	30 93 25 05 	sts	0x0525, r19
    3e38:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    3e3c:	84 e0       	ldi	r24, 0x04	; 4
    3e3e:	80 93 23 05 	sts	0x0523, r24
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    3e42:	80 91 23 05 	lds	r24, 0x0523
    3e46:	8b 7f       	andi	r24, 0xFB	; 251
    3e48:	83 30       	cpi	r24, 0x03	; 3
    3e4a:	a9 f4       	brne	.+42     	; 0x3e76 <main+0x63a>
			{
				transition_counter++;
    3e4c:	80 91 24 05 	lds	r24, 0x0524
    3e50:	90 91 25 05 	lds	r25, 0x0525
    3e54:	01 96       	adiw	r24, 0x01	; 1
    3e56:	90 93 25 05 	sts	0x0525, r25
    3e5a:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= 100)
    3e5e:	84 36       	cpi	r24, 0x64	; 100
    3e60:	91 05       	cpc	r25, r1
    3e62:	4c f0       	brlt	.+18     	; 0x3e76 <main+0x63a>
				{
					transition_counter = 100;
    3e64:	a4 e6       	ldi	r26, 0x64	; 100
    3e66:	b0 e0       	ldi	r27, 0x00	; 0
    3e68:	b0 93 25 05 	sts	0x0525, r27
    3e6c:	a0 93 24 05 	sts	0x0524, r26
					Transition_state = TRANS_P2;
    3e70:	89 e0       	ldi	r24, 0x09	; 9
    3e72:	80 93 23 05 	sts	0x0523, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    3e76:	1a 8a       	std	Y+18, r1	; 0x12
    3e78:	19 8a       	std	Y+17, r1	; 0x11
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    3e7a:	20 91 23 05 	lds	r18, 0x0523
    3e7e:	22 23       	and	r18, r18
    3e80:	31 f0       	breq	.+12     	; 0x3e8e <main+0x652>
    3e82:	80 91 21 05 	lds	r24, 0x0521
    3e86:	90 91 22 05 	lds	r25, 0x0522
    3e8a:	00 97       	sbiw	r24, 0x00	; 0
    3e8c:	39 f4       	brne	.+14     	; 0x3e9c <main+0x660>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    3e8e:	8c e0       	ldi	r24, 0x0C	; 12
    3e90:	e1 e0       	ldi	r30, 0x01	; 1
    3e92:	f8 e0       	ldi	r31, 0x08	; 8
    3e94:	11 92       	st	Z+, r1
    3e96:	8a 95       	dec	r24
    3e98:	e9 f7       	brne	.-6      	; 0x3e94 <main+0x658>
    3e9a:	0b c0       	rjmp	.+22     	; 0x3eb2 <main+0x676>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    3e9c:	29 30       	cpi	r18, 0x09	; 9
    3e9e:	19 f0       	breq	.+6      	; 0x3ea6 <main+0x66a>
    3ea0:	84 36       	cpi	r24, 0x64	; 100
    3ea2:	91 05       	cpc	r25, r1
    3ea4:	31 f4       	brne	.+12     	; 0x3eb2 <main+0x676>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    3ea6:	8c e0       	ldi	r24, 0x0C	; 12
    3ea8:	a5 ef       	ldi	r26, 0xF5	; 245
    3eaa:	b7 e0       	ldi	r27, 0x07	; 7
    3eac:	1d 92       	st	X+, r1
    3eae:	8a 95       	dec	r24
    3eb0:	e9 f7       	brne	.-6      	; 0x3eac <main+0x670>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3eb2:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <TIM16_ReadTCNT1>
    3eb6:	9c 8b       	std	Y+20, r25	; 0x14
    3eb8:	8b 8b       	std	Y+19, r24	; 0x13
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    3eba:	88 15       	cp	r24, r8
    3ebc:	99 05       	cpc	r25, r9
    3ebe:	b8 f4       	brcc	.+46     	; 0x3eee <main+0x6b2>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	a1 e0       	ldi	r26, 0x01	; 1
    3ec6:	b0 e0       	ldi	r27, 0x00	; 0
    3ec8:	88 19       	sub	r24, r8
    3eca:	99 09       	sbc	r25, r9
    3ecc:	a1 09       	sbc	r26, r1
    3ece:	b1 09       	sbc	r27, r1
    3ed0:	2b 89       	ldd	r18, Y+19	; 0x13
    3ed2:	3c 89       	ldd	r19, Y+20	; 0x14
    3ed4:	82 0f       	add	r24, r18
    3ed6:	93 1f       	adc	r25, r19
    3ed8:	a1 1d       	adc	r26, r1
    3eda:	b1 1d       	adc	r27, r1
    3edc:	2b 81       	ldd	r18, Y+3	; 0x03
    3ede:	3c 81       	ldd	r19, Y+4	; 0x04
    3ee0:	4d 81       	ldd	r20, Y+5	; 0x05
    3ee2:	5e 81       	ldd	r21, Y+6	; 0x06
    3ee4:	28 0f       	add	r18, r24
    3ee6:	39 1f       	adc	r19, r25
    3ee8:	4a 1f       	adc	r20, r26
    3eea:	5b 1f       	adc	r21, r27
    3eec:	0c c0       	rjmp	.+24     	; 0x3f06 <main+0x6ca>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    3eee:	8b 89       	ldd	r24, Y+19	; 0x13
    3ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ef2:	88 19       	sub	r24, r8
    3ef4:	99 09       	sbc	r25, r9
    3ef6:	2b 81       	ldd	r18, Y+3	; 0x03
    3ef8:	3c 81       	ldd	r19, Y+4	; 0x04
    3efa:	4d 81       	ldd	r20, Y+5	; 0x05
    3efc:	5e 81       	ldd	r21, Y+6	; 0x06
    3efe:	28 0f       	add	r18, r24
    3f00:	39 1f       	adc	r19, r25
    3f02:	41 1d       	adc	r20, r1
    3f04:	51 1d       	adc	r21, r1
    3f06:	2b 83       	std	Y+3, r18	; 0x03
    3f08:	3c 83       	std	Y+4, r19	; 0x04
    3f0a:	4d 83       	std	Y+5, r20	; 0x05
    3f0c:	5e 83       	std	Y+6, r21	; 0x06
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    3f0e:	80 91 b2 00 	lds	r24, 0x00B2
    3f12:	3b a1       	ldd	r19, Y+35	; 0x23
    3f14:	83 1b       	sub	r24, r19
    3f16:	28 0e       	add	r2, r24
    3f18:	31 1c       	adc	r3, r1
    3f1a:	41 1c       	adc	r4, r1
    3f1c:	51 1c       	adc	r5, r1
		Arm_TCNT2 = TCNT2;
    3f1e:	40 91 b2 00 	lds	r20, 0x00B2
    3f22:	4b a3       	std	Y+35, r20	; 0x23

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    3f24:	80 91 b2 00 	lds	r24, 0x00B2
    3f28:	2e a1       	ldd	r18, Y+38	; 0x26
    3f2a:	82 1b       	sub	r24, r18
    3f2c:	4f 85       	ldd	r20, Y+15	; 0x0f
    3f2e:	58 89       	ldd	r21, Y+16	; 0x10
    3f30:	48 0f       	add	r20, r24
    3f32:	51 1d       	adc	r21, r1
    3f34:	58 8b       	std	Y+16, r21	; 0x10
    3f36:	4f 87       	std	Y+15, r20	; 0x0f
		ServoRate_TCNT2 = TCNT2;
    3f38:	20 91 b2 00 	lds	r18, 0x00B2
    3f3c:	2e a3       	std	Y+38, r18	; 0x26
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    3f3e:	80 91 b2 00 	lds	r24, 0x00B2
    3f42:	3d a1       	ldd	r19, Y+37	; 0x25
    3f44:	83 1b       	sub	r24, r19
    3f46:	4a a5       	ldd	r20, Y+42	; 0x2a
    3f48:	5b a5       	ldd	r21, Y+43	; 0x2b
    3f4a:	48 0f       	add	r20, r24
    3f4c:	51 1d       	adc	r21, r1
    3f4e:	5b a7       	std	Y+43, r21	; 0x2b
    3f50:	4a a7       	std	Y+42, r20	; 0x2a
		Servo_TCNT2 = TCNT2;
    3f52:	20 91 b2 00 	lds	r18, 0x00B2
    3f56:	2d a3       	std	Y+37, r18	; 0x25
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    3f58:	80 91 b2 00 	lds	r24, 0x00B2
    3f5c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3f5e:	83 1b       	sub	r24, r19
    3f60:	49 89       	ldd	r20, Y+17	; 0x11
    3f62:	5a 89       	ldd	r21, Y+18	; 0x12
    3f64:	48 0f       	add	r20, r24
    3f66:	51 1d       	adc	r21, r1
    3f68:	5a 8b       	std	Y+18, r21	; 0x12
    3f6a:	49 8b       	std	Y+17, r20	; 0x11
		Transition_TCNT2 = TCNT2;
    3f6c:	20 91 b2 00 	lds	r18, 0x00B2
    3f70:	2f 8f       	std	Y+31, r18	; 0x1f

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    3f72:	80 91 b2 00 	lds	r24, 0x00B2
    3f76:	38 a1       	ldd	r19, Y+32	; 0x20
    3f78:	83 1b       	sub	r24, r19
    3f7a:	4d 85       	ldd	r20, Y+13	; 0x0d
    3f7c:	5e 85       	ldd	r21, Y+14	; 0x0e
    3f7e:	48 0f       	add	r20, r24
    3f80:	51 1d       	adc	r21, r1
    3f82:	5e 87       	std	Y+14, r21	; 0x0e
    3f84:	4d 87       	std	Y+13, r20	; 0x0d
		Status_TCNT2 = TCNT2;
    3f86:	20 91 b2 00 	lds	r18, 0x00B2
    3f8a:	28 a3       	std	Y+32, r18	; 0x20
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    3f8c:	80 91 b2 00 	lds	r24, 0x00B2
    3f90:	39 a1       	ldd	r19, Y+33	; 0x21
    3f92:	83 1b       	sub	r24, r19
    3f94:	48 8d       	ldd	r20, Y+24	; 0x18
    3f96:	59 8d       	ldd	r21, Y+25	; 0x19
    3f98:	48 0f       	add	r20, r24
    3f9a:	51 1d       	adc	r21, r1
    3f9c:	59 8f       	std	Y+25, r21	; 0x19
    3f9e:	48 8f       	std	Y+24, r20	; 0x18
		Refresh_TCNT2 = TCNT2;
    3fa0:	20 91 b2 00 	lds	r18, 0x00B2
    3fa4:	29 a3       	std	Y+33, r18	; 0x21

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    3fa6:	80 91 b2 00 	lds	r24, 0x00B2
    3faa:	3a a1       	ldd	r19, Y+34	; 0x22
    3fac:	83 1b       	sub	r24, r19
    3fae:	48 85       	ldd	r20, Y+8	; 0x08
    3fb0:	59 85       	ldd	r21, Y+9	; 0x09
    3fb2:	48 0f       	add	r20, r24
    3fb4:	51 1d       	adc	r21, r1
    3fb6:	59 87       	std	Y+9, r21	; 0x09
    3fb8:	48 87       	std	Y+8, r20	; 0x08
		Disarm_TCNT2 = TCNT2;
    3fba:	20 91 b2 00 	lds	r18, 0x00B2
    3fbe:	2a a3       	std	Y+34, r18	; 0x22

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    3fc0:	80 91 b2 00 	lds	r24, 0x00B2
    3fc4:	3c a1       	ldd	r19, Y+36	; 0x24
    3fc6:	83 1b       	sub	r24, r19
    3fc8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3fca:	5d 8d       	ldd	r21, Y+29	; 0x1d
    3fcc:	48 0f       	add	r20, r24
    3fce:	51 1d       	adc	r21, r1
    3fd0:	5d 8f       	std	Y+29, r21	; 0x1d
    3fd2:	4c 8f       	std	Y+28, r20	; 0x1c
		Ticker_TCNT2 = TCNT2;
    3fd4:	20 91 b2 00 	lds	r18, 0x00B2
    3fd8:	2c a3       	std	Y+36, r18	; 0x24
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3fda:	80 91 1e 05 	lds	r24, 0x051E
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    3fde:	53 ff       	sbrs	r21, 3
    3fe0:	02 c0       	rjmp	.+4      	; 0x3fe6 <main+0x7aa>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3fe2:	80 61       	ori	r24, 0x10	; 16
    3fe4:	01 c0       	rjmp	.+2      	; 0x3fe8 <main+0x7ac>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    3fe6:	8f 7e       	andi	r24, 0xEF	; 239
    3fe8:	80 93 1e 05 	sts	0x051E, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    3fec:	4f 85       	ldd	r20, Y+15	; 0x0f
    3fee:	58 89       	ldd	r21, Y+16	; 0x10
    3ff0:	4d 32       	cpi	r20, 0x2D	; 45
    3ff2:	51 40       	sbci	r21, 0x01	; 1
    3ff4:	20 f0       	brcs	.+8      	; 0x3ffe <main+0x7c2>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    3ff6:	18 8a       	std	Y+16, r1	; 0x10
    3ff8:	1f 86       	std	Y+15, r1	; 0x0f
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    3ffa:	21 e0       	ldi	r18, 0x01	; 1
    3ffc:	2b 87       	std	Y+11, r18	; 0x0b
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    3ffe:	4a a5       	ldd	r20, Y+42	; 0x2a
    4000:	5b a5       	ldd	r21, Y+43	; 0x2b
    4002:	46 32       	cpi	r20, 0x26	; 38
    4004:	56 42       	sbci	r21, 0x26	; 38
    4006:	18 f0       	brcs	.+6      	; 0x400e <main+0x7d2>
		{
			Overdue = true;	// This results in a "No Signal" error
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	80 93 19 05 	sts	0x0519, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    400e:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <ReadGyros>
		ReadAcc();
    4012:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    4016:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <TIM16_ReadTCNT1>
    401a:	9c 01       	movw	r18, r24
		
		// Reset Timer0 count
		TCNT0 = 0;
    401c:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    401e:	80 91 1a 05 	lds	r24, 0x051A
    4022:	90 91 1b 05 	lds	r25, 0x051B
    4026:	28 17       	cp	r18, r24
    4028:	39 07       	cpc	r19, r25
    402a:	48 f4       	brcc	.+18     	; 0x403e <main+0x802>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    402c:	80 91 1a 05 	lds	r24, 0x051A
    4030:	90 91 1b 05 	lds	r25, 0x051B
    4034:	d9 01       	movw	r26, r18
    4036:	a8 1b       	sub	r26, r24
    4038:	b9 0b       	sbc	r27, r25
    403a:	cd 01       	movw	r24, r26
    403c:	08 c0       	rjmp	.+16     	; 0x404e <main+0x812>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    403e:	80 91 1a 05 	lds	r24, 0x051A
    4042:	90 91 1b 05 	lds	r25, 0x051B
    4046:	f9 01       	movw	r30, r18
    4048:	e8 1b       	sub	r30, r24
    404a:	f9 0b       	sbc	r31, r25
    404c:	cf 01       	movw	r24, r30
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    404e:	30 93 1b 05 	sts	0x051B, r19
    4052:	20 93 1a 05 	sts	0x051A, r18
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    4056:	20 91 d5 07 	lds	r18, 0x07D5
    405a:	30 91 d6 07 	lds	r19, 0x07D6
    405e:	a0 e0       	ldi	r26, 0x00	; 0
    4060:	b0 e0       	ldi	r27, 0x00	; 0
    4062:	22 30       	cpi	r18, 0x02	; 2
    4064:	31 05       	cpc	r19, r1
    4066:	18 f4       	brcc	.+6      	; 0x406e <main+0x832>
		{
			interval = ticker_16; // uint16_t
    4068:	4c 01       	movw	r8, r24
    406a:	5d 01       	movw	r10, r26
    406c:	11 c0       	rjmp	.+34     	; 0x4090 <main+0x854>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    406e:	80 90 d5 07 	lds	r8, 0x07D5
    4072:	90 90 d6 07 	lds	r9, 0x07D6
    4076:	a1 2c       	mov	r10, r1
    4078:	b1 2c       	mov	r11, r1
    407a:	3f e0       	ldi	r19, 0x0F	; 15
    407c:	88 0c       	add	r8, r8
    407e:	99 1c       	adc	r9, r9
    4080:	aa 1c       	adc	r10, r10
    4082:	bb 1c       	adc	r11, r11
    4084:	3a 95       	dec	r19
    4086:	d1 f7       	brne	.-12     	; 0x407c <main+0x840>
    4088:	88 0e       	add	r8, r24
    408a:	99 1e       	adc	r9, r25
    408c:	aa 1e       	adc	r10, r26
    408e:	bb 1e       	adc	r11, r27
		}

		TMR0_counter = 0;
    4090:	10 92 d6 07 	sts	0x07D6, r1
    4094:	10 92 d5 07 	sts	0x07D5, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    4098:	c5 01       	movw	r24, r10
    409a:	b4 01       	movw	r22, r8
    409c:	0e 94 0e 29 	call	0x521c	; 0x521c <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    40a0:	c5 01       	movw	r24, r10
    40a2:	b4 01       	movw	r22, r8
    40a4:	0e 94 0d 42 	call	0x841a	; 0x841a <Sensor_PID>
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//* 
		//************************************************************

		if (Interrupted)
    40a8:	80 91 d2 07 	lds	r24, 0x07D2
    40ac:	88 23       	and	r24, r24
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <main+0x876>
    40b0:	c6 c0       	rjmp	.+396    	; 0x423e <main+0xa02>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer is not in FAST mode.
			if (Config.Servo_rate < FAST)
    40b2:	80 91 e2 05 	lds	r24, 0x05E2
    40b6:	82 30       	cpi	r24, 0x02	; 2
    40b8:	64 f4       	brge	.+24     	; 0x40d2 <main+0x896>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    40ba:	21 e0       	ldi	r18, 0x01	; 1
    40bc:	2a 87       	std	Y+10, r18	; 0x0a
    40be:	2b 81       	ldd	r18, Y+3	; 0x03
    40c0:	3c 81       	ldd	r19, Y+4	; 0x04
    40c2:	4d 81       	ldd	r20, Y+5	; 0x05
    40c4:	5e 81       	ldd	r21, Y+6	; 0x06
    40c6:	24 3c       	cpi	r18, 0xC4	; 196
    40c8:	32 4a       	sbci	r19, 0xA2	; 162
    40ca:	41 05       	cpc	r20, r1
    40cc:	51 05       	cpc	r21, r1
    40ce:	08 f4       	brcc	.+2      	; 0x40d2 <main+0x896>
    40d0:	1a 86       	std	Y+10, r1	; 0x0a
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    40d2:	2a 81       	ldd	r18, Y+2	; 0x02
    40d4:	21 11       	cpse	r18, r1
    40d6:	0e c0       	rjmp	.+28     	; 0x40f4 <main+0x8b8>
    40d8:	82 30       	cpi	r24, 0x02	; 2
    40da:	09 f0       	breq	.+2      	; 0x40de <main+0x8a2>
    40dc:	6d c1       	rjmp	.+730    	; 0x43b8 <main+0xb7c>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    40de:	80 91 f0 07 	lds	r24, 0x07F0
    40e2:	90 91 f1 07 	lds	r25, 0x07F1
    40e6:	31 e0       	ldi	r19, 0x01	; 1
    40e8:	3a 87       	std	Y+10, r19	; 0x0a
    40ea:	84 3c       	cpi	r24, 0xC4	; 196
    40ec:	92 4a       	sbci	r25, 0xA2	; 162
    40ee:	40 f4       	brcc	.+16     	; 0x4100 <main+0x8c4>
    40f0:	1a 86       	std	Y+10, r1	; 0x0a
    40f2:	3b c0       	rjmp	.+118    	; 0x416a <main+0x92e>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the S.Bus gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    40f4:	82 30       	cpi	r24, 0x02	; 2
    40f6:	09 f0       	breq	.+2      	; 0x40fa <main+0x8be>
    40f8:	5f c1       	rjmp	.+702    	; 0x43b8 <main+0xb7c>
				// It may take at worst case 2.6ms before the PWM starts so that too must be subtracted.
				// (2 x 22ms) - 2.6 - 2.5 = 38.9ms available space for S.Bus, 40ms for Satellite and 39.92ms for Xtreme.
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.
				//
				if (SlowRC)
    40fa:	2a 85       	ldd	r18, Y+10	; 0x0a
    40fc:	22 23       	and	r18, r18
    40fe:	a9 f1       	breq	.+106    	; 0x416a <main+0x92e>
				{
					PWM_pulses = 4;				// Three pulses will fit if interval faster than 102Hz
				
					if (PWM_interval < 19600)	// 19600 = 7.84ms
    4100:	30 e9       	ldi	r19, 0x90	; 144
    4102:	c3 16       	cp	r12, r19
    4104:	3c e4       	ldi	r19, 0x4C	; 76
    4106:	d3 06       	cpc	r13, r19
    4108:	e1 04       	cpc	r14, r1
    410a:	f1 04       	cpc	r15, r1
    410c:	08 f0       	brcs	.+2      	; 0x4110 <main+0x8d4>
    410e:	58 c1       	rjmp	.+688    	; 0x43c0 <main+0xb84>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 127Hz
					}
				
					if (PWM_interval < 16333)	// 16333 = 6.53ms
    4110:	4d ec       	ldi	r20, 0xCD	; 205
    4112:	c4 16       	cp	r12, r20
    4114:	4f e3       	ldi	r20, 0x3F	; 63
    4116:	d4 06       	cpc	r13, r20
    4118:	e1 04       	cpc	r14, r1
    411a:	f1 04       	cpc	r15, r1
    411c:	08 f0       	brcs	.+2      	; 0x4120 <main+0x8e4>
    411e:	54 c1       	rjmp	.+680    	; 0x43c8 <main+0xb8c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 153Hz
					}
				
					if (PWM_interval < 14000)	// 14000 = 5.6ms
    4120:	50 eb       	ldi	r21, 0xB0	; 176
    4122:	c5 16       	cp	r12, r21
    4124:	56 e3       	ldi	r21, 0x36	; 54
    4126:	d5 06       	cpc	r13, r21
    4128:	e1 04       	cpc	r14, r1
    412a:	f1 04       	cpc	r15, r1
    412c:	08 f0       	brcs	.+2      	; 0x4130 <main+0x8f4>
    412e:	50 c1       	rjmp	.+672    	; 0x43d0 <main+0xb94>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 179Hz
					}
				
					if (PWM_interval < 12250)	// 12250 = 4.9ms
    4130:	8a ed       	ldi	r24, 0xDA	; 218
    4132:	c8 16       	cp	r12, r24
    4134:	8f e2       	ldi	r24, 0x2F	; 47
    4136:	d8 06       	cpc	r13, r24
    4138:	e1 04       	cpc	r14, r1
    413a:	f1 04       	cpc	r15, r1
    413c:	08 f0       	brcs	.+2      	; 0x4140 <main+0x904>
    413e:	4c c1       	rjmp	.+664    	; 0x43d8 <main+0xb9c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 204Hz
					}
				
					if (PWM_interval < 10888)	// 10888 = 4.35ms
    4140:	98 e8       	ldi	r25, 0x88	; 136
    4142:	c9 16       	cp	r12, r25
    4144:	9a e2       	ldi	r25, 0x2A	; 42
    4146:	d9 06       	cpc	r13, r25
    4148:	e1 04       	cpc	r14, r1
    414a:	f1 04       	cpc	r15, r1
    414c:	08 f0       	brcs	.+2      	; 0x4150 <main+0x914>
    414e:	48 c1       	rjmp	.+656    	; 0x43e0 <main+0xba4>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 230Hz
					}
				
					if (PWM_interval < 9800)	// 9800 = 3.92ms
    4150:	a8 e4       	ldi	r26, 0x48	; 72
    4152:	ca 16       	cp	r12, r26
    4154:	a6 e2       	ldi	r26, 0x26	; 38
    4156:	da 06       	cpc	r13, r26
    4158:	e1 04       	cpc	r14, r1
    415a:	f1 04       	cpc	r15, r1
    415c:	98 f5       	brcc	.+102    	; 0x41c4 <main+0x988>
    415e:	21 e0       	ldi	r18, 0x01	; 1
    4160:	2a 83       	std	Y+2, r18	; 0x02
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 255Hz
    4162:	2a e0       	ldi	r18, 0x0A	; 10
    4164:	62 2e       	mov	r6, r18
    4166:	71 2c       	mov	r7, r1
    4168:	38 c0       	rjmp	.+112    	; 0x41da <main+0x99e>
				// 
				else
				{
					PWM_pulses = 3;				// Two pulses will fit if interval faster than 101Hz
				
					if (PWM_interval < 18437)	// 18437 = 7.37ms
    416a:	35 e0       	ldi	r19, 0x05	; 5
    416c:	c3 16       	cp	r12, r19
    416e:	38 e4       	ldi	r19, 0x48	; 72
    4170:	d3 06       	cpc	r13, r19
    4172:	e1 04       	cpc	r14, r1
    4174:	f1 04       	cpc	r15, r1
    4176:	08 f0       	brcs	.+2      	; 0x417a <main+0x93e>
    4178:	39 c1       	rjmp	.+626    	; 0x43ec <main+0xbb0>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 135Hz
					}
				
					if (PWM_interval < 14750)	// 14750 = 5.9ms
    417a:	4e e9       	ldi	r20, 0x9E	; 158
    417c:	c4 16       	cp	r12, r20
    417e:	49 e3       	ldi	r20, 0x39	; 57
    4180:	d4 06       	cpc	r13, r20
    4182:	e1 04       	cpc	r14, r1
    4184:	f1 04       	cpc	r15, r1
    4186:	08 f0       	brcs	.+2      	; 0x418a <main+0x94e>
    4188:	35 c1       	rjmp	.+618    	; 0x43f4 <main+0xbb8>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 169Hz
					}
				
					if (PWM_interval < 11886)	// 11886 = 4.75ms
    418a:	5e e6       	ldi	r21, 0x6E	; 110
    418c:	c5 16       	cp	r12, r21
    418e:	5e e2       	ldi	r21, 0x2E	; 46
    4190:	d5 06       	cpc	r13, r21
    4192:	e1 04       	cpc	r14, r1
    4194:	f1 04       	cpc	r15, r1
    4196:	08 f0       	brcs	.+2      	; 0x419a <main+0x95e>
    4198:	31 c1       	rjmp	.+610    	; 0x43fc <main+0xbc0>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 210Hz
					}
				
					if (PWM_interval < 10142)	// 10142 = 4.05ms
    419a:	8e e9       	ldi	r24, 0x9E	; 158
    419c:	c8 16       	cp	r12, r24
    419e:	87 e2       	ldi	r24, 0x27	; 39
    41a0:	d8 06       	cpc	r13, r24
    41a2:	e1 04       	cpc	r14, r1
    41a4:	f1 04       	cpc	r15, r1
    41a6:	08 f0       	brcs	.+2      	; 0x41aa <main+0x96e>
    41a8:	2d c1       	rjmp	.+602    	; 0x4404 <main+0xbc8>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 246Hz
					}
				
					if (PWM_interval < 8859)	// 8859 = 3.5ms
    41aa:	9b e9       	ldi	r25, 0x9B	; 155
    41ac:	c9 16       	cp	r12, r25
    41ae:	92 e2       	ldi	r25, 0x22	; 34
    41b0:	d9 06       	cpc	r13, r25
    41b2:	e1 04       	cpc	r14, r1
    41b4:	f1 04       	cpc	r15, r1
    41b6:	60 f4       	brcc	.+24     	; 0x41d0 <main+0x994>
    41b8:	21 e0       	ldi	r18, 0x01	; 1
    41ba:	2a 83       	std	Y+2, r18	; 0x02
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 282Hz
    41bc:	98 e0       	ldi	r25, 0x08	; 8
    41be:	69 2e       	mov	r6, r25
    41c0:	71 2c       	mov	r7, r1
    41c2:	0b c0       	rjmp	.+22     	; 0x41da <main+0x99e>
    41c4:	31 e0       	ldi	r19, 0x01	; 1
    41c6:	3a 83       	std	Y+2, r19	; 0x02
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 204Hz
					}
				
					if (PWM_interval < 10888)	// 10888 = 4.35ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 230Hz
    41c8:	89 e0       	ldi	r24, 0x09	; 9
    41ca:	68 2e       	mov	r6, r24
    41cc:	71 2c       	mov	r7, r1
    41ce:	05 c0       	rjmp	.+10     	; 0x41da <main+0x99e>
    41d0:	41 e0       	ldi	r20, 0x01	; 1
    41d2:	4a 83       	std	Y+2, r20	; 0x02
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 210Hz
					}
				
					if (PWM_interval < 10142)	// 10142 = 4.05ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 246Hz
    41d4:	b7 e0       	ldi	r27, 0x07	; 7
    41d6:	6b 2e       	mov	r6, r27
    41d8:	71 2c       	mov	r7, r1

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
    41da:	10 92 19 05 	sts	0x0519, r1
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    41de:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <TIM16_ReadTCNT1>
    41e2:	9c 8b       	std	Y+20, r25	; 0x14
    41e4:	8b 8b       	std	Y+19, r24	; 0x13
			//* output when serial RC formats are used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    41e6:	80 91 e2 05 	lds	r24, 0x05E2
    41ea:	82 30       	cpi	r24, 0x02	; 2
    41ec:	b9 f4       	brne	.+46     	; 0x421c <main+0x9e0>
    41ee:	2a 81       	ldd	r18, Y+2	; 0x02
    41f0:	22 23       	and	r18, r18
    41f2:	a1 f0       	breq	.+40     	; 0x421c <main+0x9e0>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    41f4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    41f6:	31 11       	cpse	r19, r1
    41f8:	18 c0       	rjmp	.+48     	; 0x422a <main+0x9ee>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    41fa:	80 91 d2 07 	lds	r24, 0x07D2
    41fe:	81 11       	cpse	r24, r1
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    4200:	01 e0       	ldi	r16, 0x01	; 1
					}
					Interrupted = false;		// Cancel pending interrupts
    4202:	10 92 d2 07 	sts	0x07D2, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    4206:	0e 94 ed 30 	call	0x61da	; 0x61da <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    420a:	1b a6       	std	Y+43, r1	; 0x2b
    420c:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    420e:	1b 82       	std	Y+3, r1	; 0x03
    4210:	1c 82       	std	Y+4, r1	; 0x04
    4212:	1d 82       	std	Y+5, r1	; 0x05
    4214:	1e 82       	std	Y+6, r1	; 0x06
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    4216:	1a 8e       	std	Y+26, r1	; 0x1a
					PWMBlocked = false;			// Enable PWM generation	
    4218:	1f 82       	std	Y+7, r1	; 0x07
    421a:	11 c0       	rjmp	.+34     	; 0x423e <main+0xa02>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    421c:	1b a6       	std	Y+43, r1	; 0x2b
    421e:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    4220:	1b 82       	std	Y+3, r1	; 0x03
    4222:	1c 82       	std	Y+4, r1	; 0x04
    4224:	1d 82       	std	Y+5, r1	; 0x05
    4226:	1e 82       	std	Y+6, r1	; 0x06
    4228:	0a c0       	rjmp	.+20     	; 0x423e <main+0xa02>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    422a:	1b a6       	std	Y+43, r1	; 0x2b
    422c:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    422e:	1b 82       	std	Y+3, r1	; 0x03
    4230:	1c 82       	std	Y+4, r1	; 0x04
    4232:	1d 82       	std	Y+5, r1	; 0x05
    4234:	1e 82       	std	Y+6, r1	; 0x06
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    4236:	1b 8e       	std	Y+27, r1	; 0x1b
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    4238:	41 e0       	ldi	r20, 0x01	; 1
    423a:	4f 83       	std	Y+7, r20	; 0x07
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    423c:	1a 82       	std	Y+2, r1	; 0x02
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    423e:	80 91 d2 07 	lds	r24, 0x07D2
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    4242:	81 11       	cpse	r24, r1
    4244:	08 c0       	rjmp	.+16     	; 0x4256 <main+0xa1a>
				(Interrupted) ||											// Run at RC rate
    4246:	80 91 e2 05 	lds	r24, 0x05E2
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    424a:	2f 81       	ldd	r18, Y+7	; 0x07
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    424c:	82 30       	cpi	r24, 0x02	; 2
    424e:	09 f0       	breq	.+2      	; 0x4252 <main+0xa16>
    4250:	81 c0       	rjmp	.+258    	; 0x4354 <main+0xb18>
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    4252:	21 11       	cpse	r18, r1
    4254:	81 c0       	rjmp	.+258    	; 0x4358 <main+0xb1c>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    4256:	80 91 d2 07 	lds	r24, 0x07D2
    425a:	88 23       	and	r24, r24
    425c:	19 f0       	breq	.+6      	; 0x4264 <main+0xa28>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    425e:	10 92 d2 07 	sts	0x07D2, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    4262:	01 e0       	ldi	r16, 0x01	; 1
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    4264:	90 91 e2 05 	lds	r25, 0x05E2
    4268:	ee e4       	ldi	r30, 0x4E	; 78
    426a:	f6 e0       	ldi	r31, 0x06	; 6
    426c:	20 e0       	ldi	r18, 0x00	; 0
    426e:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    4270:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    4272:	92 30       	cpi	r25, 0x02	; 2
    4274:	29 f4       	brne	.+10     	; 0x4280 <main+0xa44>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    4276:	40 81       	ld	r20, Z
    4278:	44 23       	and	r20, r20
    427a:	09 f4       	brne	.+2      	; 0x427e <main+0xa42>
    427c:	c9 c0       	rjmp	.+402    	; 0x4410 <main+0xbd4>
    427e:	0b c0       	rjmp	.+22     	; 0x4296 <main+0xa5a>
    4280:	91 30       	cpi	r25, 0x01	; 1
    4282:	39 f4       	brne	.+14     	; 0x4292 <main+0xa56>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    4284:	40 81       	ld	r20, Z
    4286:	41 11       	cpse	r20, r1
    4288:	06 c0       	rjmp	.+12     	; 0x4296 <main+0xa5a>
    428a:	4a 85       	ldd	r20, Y+10	; 0x0a
    428c:	41 11       	cpse	r20, r1
    428e:	0f c0       	rjmp	.+30     	; 0x42ae <main+0xa72>
    4290:	bf c0       	rjmp	.+382    	; 0x4410 <main+0xbd4>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    4292:	19 16       	cp	r1, r25
    4294:	24 f4       	brge	.+8      	; 0x429e <main+0xa62>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    4296:	40 81       	ld	r20, Z
    4298:	14 16       	cp	r1, r20
    429a:	4c f0       	brlt	.+18     	; 0x42ae <main+0xa72>
    429c:	10 c0       	rjmp	.+32     	; 0x42be <main+0xa82>
    429e:	91 11       	cpse	r25, r1
    42a0:	0e c0       	rjmp	.+28     	; 0x42be <main+0xa82>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    42a2:	4a 85       	ldd	r20, Y+10	; 0x0a
    42a4:	41 11       	cpse	r20, r1
    42a6:	03 c0       	rjmp	.+6      	; 0x42ae <main+0xa72>
    42a8:	4b 85       	ldd	r20, Y+11	; 0x0b
    42aa:	44 23       	and	r20, r20
    42ac:	41 f0       	breq	.+16     	; 0x42be <main+0xa82>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
					)
				{
					ServoFlag |= (1 << i);
    42ae:	41 e0       	ldi	r20, 0x01	; 1
    42b0:	50 e0       	ldi	r21, 0x00	; 0
    42b2:	02 2e       	mov	r0, r18
    42b4:	01 c0       	rjmp	.+2      	; 0x42b8 <main+0xa7c>
    42b6:	44 0f       	add	r20, r20
    42b8:	0a 94       	dec	r0
    42ba:	ea f7       	brpl	.-6      	; 0x42b6 <main+0xa7a>
    42bc:	84 2b       	or	r24, r20
    42be:	2f 5f       	subi	r18, 0xFF	; 255
    42c0:	3f 4f       	sbci	r19, 0xFF	; 255
    42c2:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    42c4:	28 30       	cpi	r18, 0x08	; 8
    42c6:	31 05       	cpc	r19, r1
    42c8:	a1 f6       	brne	.-88     	; 0x4272 <main+0xa36>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    42ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    42cc:	22 23       	and	r18, r18
    42ce:	11 f0       	breq	.+4      	; 0x42d4 <main+0xa98>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    42d0:	18 8a       	std	Y+16, r1	; 0x10
    42d2:	1f 86       	std	Y+15, r1	; 0x0f
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    42d4:	31 e0       	ldi	r19, 0x01	; 1
    42d6:	63 16       	cp	r6, r19
    42d8:	71 04       	cpc	r7, r1
    42da:	d1 f4       	brne	.+52     	; 0x4310 <main+0xad4>
    42dc:	92 30       	cpi	r25, 0x02	; 2
    42de:	c1 f4       	brne	.+48     	; 0x4310 <main+0xad4>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if ((interval < PWM_PERIOD_WORST) && (interval > PWM_PERIOD_BEST))
    42e0:	b5 01       	movw	r22, r10
    42e2:	a4 01       	movw	r20, r8
    42e4:	4e 58       	subi	r20, 0x8E	; 142
    42e6:	50 42       	sbci	r21, 0x20	; 32
    42e8:	61 09       	sbc	r22, r1
    42ea:	71 09       	sbc	r23, r1
    42ec:	43 3d       	cpi	r20, 0xD3	; 211
    42ee:	50 43       	sbci	r21, 0x30	; 48
    42f0:	61 05       	cpc	r22, r1
    42f2:	71 05       	cpc	r23, r1
    42f4:	48 f0       	brcs	.+18     	; 0x4308 <main+0xacc>
				{
					PWM_interval = interval;
				}
				else
				{
					PWM_interval = PWM_PERIOD_WORST; // 120Hz
    42f6:	a1 e6       	ldi	r26, 0x61	; 97
    42f8:	ca 2e       	mov	r12, r26
    42fa:	a1 e5       	ldi	r26, 0x51	; 81
    42fc:	da 2e       	mov	r13, r26
    42fe:	e1 2c       	mov	r14, r1
    4300:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    4302:	21 e0       	ldi	r18, 0x01	; 1
    4304:	2f 83       	std	Y+7, r18	; 0x07
    4306:	04 c0       	rjmp	.+8      	; 0x4310 <main+0xad4>
    4308:	75 01       	movw	r14, r10
    430a:	64 01       	movw	r12, r8
    430c:	31 e0       	ldi	r19, 0x01	; 1
    430e:	3f 83       	std	Y+7, r19	; 0x07
				{
					PWM_interval = PWM_PERIOD_WORST; // 120Hz
				}	
			}
			
			Calculate_PID();					// Calculate PID values
    4310:	89 a7       	std	Y+41, r24	; 0x29
    4312:	0e 94 e6 43 	call	0x87cc	; 0x87cc <Calculate_PID>
			ProcessMixer();						// Do all the mixer tasks - can be very slow
    4316:	0e 94 51 3b 	call	0x76a2	; 0x76a2 <ProcessMixer>
			UpdateServos();						// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits
    431a:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <UpdateServos>
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    431e:	89 a5       	ldd	r24, Y+41	; 0x29
    4320:	49 81       	ldd	r20, Y+1	; 0x01
    4322:	44 23       	and	r20, r20
    4324:	39 f0       	breq	.+14     	; 0x4334 <main+0xaf8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4326:	8b ee       	ldi	r24, 0xEB	; 235
    4328:	9c e2       	ldi	r25, 0x2C	; 44
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	f1 f7       	brne	.-4      	; 0x432a <main+0xaee>
    432e:	00 c0       	rjmp	.+0      	; 0x4330 <main+0xaf4>
    4330:	00 00       	nop
    4332:	02 c0       	rjmp	.+4      	; 0x4338 <main+0xafc>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    4334:	0e 94 7f 47 	call	0x8efe	; 0x8efe <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    4338:	80 91 e2 05 	lds	r24, 0x05E2
    433c:	82 30       	cpi	r24, 0x02	; 2
    433e:	31 f4       	brne	.+12     	; 0x434c <main+0xb10>
    4340:	16 14       	cp	r1, r6
    4342:	17 04       	cpc	r1, r7
    4344:	1c f4       	brge	.+6      	; 0x434c <main+0xb10>
			{
				PWM_pulses--;
    4346:	91 e0       	ldi	r25, 0x01	; 1
    4348:	69 1a       	sub	r6, r25
    434a:	71 08       	sbc	r7, r1
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    434c:	10 92 18 05 	sts	0x0518, r1
    4350:	1b 86       	std	Y+11, r1	; 0x0b
    4352:	0a c0       	rjmp	.+20     	; 0x4368 <main+0xb2c>
		
		// In FAST mode and while remeasuring the RC rate, to keep the loop rate at the approximate PWM rate,
		// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary, but we have to also 
		// fake the Calculate_PID() and ProcessMixer() times. This keeps the cycle time more constant.
		//else if ((Config.Servo_rate == FAST) && (PWMBlocked)) // denug
		else if (PWMBlocked)
    4354:	22 23       	and	r18, r18
    4356:	41 f0       	breq	.+16     	; 0x4368 <main+0xb2c>
    4358:	87 ec       	ldi	r24, 0xC7	; 199
    435a:	92 e3       	ldi	r25, 0x32	; 50
    435c:	01 97       	sbiw	r24, 0x01	; 1
    435e:	f1 f7       	brne	.-4      	; 0x435c <main+0xb20>
    4360:	00 c0       	rjmp	.+0      	; 0x4362 <main+0xb26>
    4362:	00 00       	nop
    4364:	21 e0       	ldi	r18, 0x01	; 1
    4366:	2f 83       	std	Y+7, r18	; 0x07
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    4368:	16 14       	cp	r1, r6
    436a:	17 04       	cpc	r1, r7
    436c:	74 f0       	brlt	.+28     	; 0x438a <main+0xb4e>
    436e:	3a 81       	ldd	r19, Y+2	; 0x02
    4370:	33 23       	and	r19, r19
    4372:	59 f0       	breq	.+22     	; 0x438a <main+0xb4e>
    4374:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4376:	41 11       	cpse	r20, r1
    4378:	08 c0       	rjmp	.+16     	; 0x438a <main+0xb4e>
    437a:	80 91 e2 05 	lds	r24, 0x05E2
    437e:	82 30       	cpi	r24, 0x02	; 2
    4380:	21 f4       	brne	.+8      	; 0x438a <main+0xb4e>
		{
			init_int();					// Re-enable interrupts
    4382:	0e 94 00 31 	call	0x6200	; 0x6200 <init_int>
			RCInterruptsON = true;
    4386:	21 e0       	ldi	r18, 0x01	; 1
    4388:	2a 8f       	std	Y+26, r18	; 0x1a
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    438a:	80 91 20 05 	lds	r24, 0x0520
    438e:	38 a5       	ldd	r19, Y+40	; 0x28
    4390:	38 17       	cp	r19, r24
    4392:	19 f0       	breq	.+6      	; 0x439a <main+0xb5e>
    4394:	11 11       	cpse	r17, r1
    4396:	01 c0       	rjmp	.+2      	; 0x439a <main+0xb5e>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    4398:	17 e0       	ldi	r17, 0x07	; 7
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    439a:	40 91 20 05 	lds	r20, 0x0520
    439e:	48 a7       	std	Y+40, r20	; 0x28
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    43a0:	be 8c       	ldd	r11, Y+30	; 0x1e
		old_alarms = General_error;
		
		// Debug
		//LED1 = ~LED1;
		
	} // while loop
    43a2:	8b 88       	ldd	r8, Y+19	; 0x13
    43a4:	9c 88       	ldd	r9, Y+20	; 0x14
    43a6:	8f ca       	rjmp	.-2786   	; 0x38c6 <main+0x8a>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    43a8:	70 93 22 05 	sts	0x0522, r23
    43ac:	60 93 21 05 	sts	0x0521, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    43b0:	85 e0       	ldi	r24, 0x05	; 5
    43b2:	80 93 23 05 	sts	0x0523, r24
    43b6:	95 cc       	rjmp	.-1750   	; 0x3ce2 <main+0x4a6>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    43b8:	66 24       	eor	r6, r6
    43ba:	63 94       	inc	r6
    43bc:	71 2c       	mov	r7, r1
    43be:	0d cf       	rjmp	.-486    	; 0x41da <main+0x99e>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.
				//
				if (SlowRC)
				{
					PWM_pulses = 4;				// Three pulses will fit if interval faster than 102Hz
    43c0:	e4 e0       	ldi	r30, 0x04	; 4
    43c2:	6e 2e       	mov	r6, r30
    43c4:	71 2c       	mov	r7, r1
    43c6:	0f c0       	rjmp	.+30     	; 0x43e6 <main+0xbaa>
				
					if (PWM_interval < 19600)	// 19600 = 7.84ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 127Hz
    43c8:	75 e0       	ldi	r23, 0x05	; 5
    43ca:	67 2e       	mov	r6, r23
    43cc:	71 2c       	mov	r7, r1
    43ce:	0b c0       	rjmp	.+22     	; 0x43e6 <main+0xbaa>
					}
				
					if (PWM_interval < 16333)	// 16333 = 6.53ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 153Hz
    43d0:	66 e0       	ldi	r22, 0x06	; 6
    43d2:	66 2e       	mov	r6, r22
    43d4:	71 2c       	mov	r7, r1
    43d6:	07 c0       	rjmp	.+14     	; 0x43e6 <main+0xbaa>
					}
				
					if (PWM_interval < 14000)	// 14000 = 5.6ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 179Hz
    43d8:	57 e0       	ldi	r21, 0x07	; 7
    43da:	65 2e       	mov	r6, r21
    43dc:	71 2c       	mov	r7, r1
    43de:	03 c0       	rjmp	.+6      	; 0x43e6 <main+0xbaa>
					}
				
					if (PWM_interval < 12250)	// 12250 = 4.9ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 204Hz
    43e0:	48 e0       	ldi	r20, 0x08	; 8
    43e2:	64 2e       	mov	r6, r20
    43e4:	71 2c       	mov	r7, r1
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 230Hz
					}
				
					if (PWM_interval < 9800)	// 9800 = 3.92ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 255Hz
    43e6:	21 e0       	ldi	r18, 0x01	; 1
    43e8:	2a 83       	std	Y+2, r18	; 0x02
    43ea:	f7 ce       	rjmp	.-530    	; 0x41da <main+0x99e>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 27ms is safe for all formats.
				// 
				else
				{
					PWM_pulses = 3;				// Two pulses will fit if interval faster than 101Hz
    43ec:	33 e0       	ldi	r19, 0x03	; 3
    43ee:	63 2e       	mov	r6, r19
    43f0:	71 2c       	mov	r7, r1
    43f2:	0b c0       	rjmp	.+22     	; 0x440a <main+0xbce>
				
					if (PWM_interval < 18437)	// 18437 = 7.37ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 135Hz
    43f4:	24 e0       	ldi	r18, 0x04	; 4
    43f6:	62 2e       	mov	r6, r18
    43f8:	71 2c       	mov	r7, r1
    43fa:	07 c0       	rjmp	.+14     	; 0x440a <main+0xbce>
					}
				
					if (PWM_interval < 14750)	// 14750 = 5.9ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 169Hz
    43fc:	95 e0       	ldi	r25, 0x05	; 5
    43fe:	69 2e       	mov	r6, r25
    4400:	71 2c       	mov	r7, r1
    4402:	03 c0       	rjmp	.+6      	; 0x440a <main+0xbce>
					}
				
					if (PWM_interval < 11886)	// 11886 = 4.75ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 210Hz
    4404:	86 e0       	ldi	r24, 0x06	; 6
    4406:	68 2e       	mov	r6, r24
    4408:	71 2c       	mov	r7, r1
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    440a:	31 e0       	ldi	r19, 0x01	; 1
    440c:	3a 83       	std	Y+2, r19	; 0x02
    440e:	e5 ce       	rjmp	.-566    	; 0x41da <main+0x99e>
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    4410:	4b 85       	ldd	r20, Y+11	; 0x0b
    4412:	41 11       	cpse	r20, r1
    4414:	4c cf       	rjmp	.-360    	; 0x42ae <main+0xa72>
    4416:	3f cf       	rjmp	.-386    	; 0x4296 <main+0xa5a>

00004418 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    4418:	0f 93       	push	r16
    441a:	1f 93       	push	r17
    441c:	cf 93       	push	r28
    441e:	df 93       	push	r29
    4420:	c7 e0       	ldi	r28, 0x07	; 7
    4422:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    4424:	08 2f       	mov	r16, r24
    4426:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    4428:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    442a:	c8 01       	movw	r24, r16
    442c:	0c 2e       	mov	r0, r28
    442e:	02 c0       	rjmp	.+4      	; 0x4434 <spiwrite+0x1c>
    4430:	95 95       	asr	r25
    4432:	87 95       	ror	r24
    4434:	0a 94       	dec	r0
    4436:	e2 f7       	brpl	.-8      	; 0x4430 <spiwrite+0x18>
    4438:	80 ff       	sbrs	r24, 0
    443a:	02 c0       	rjmp	.+4      	; 0x4440 <spiwrite+0x28>
		{
			LCD_SI = 1;
    443c:	59 9a       	sbi	0x0b, 1	; 11
    443e:	01 c0       	rjmp	.+2      	; 0x4442 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    4440:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    4442:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    4444:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <glcd_delay>
    4448:	21 97       	sbiw	r28, 0x01	; 1
    444a:	70 f7       	brcc	.-36     	; 0x4428 <spiwrite+0x10>
	}
}
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	1f 91       	pop	r17
    4452:	0f 91       	pop	r16
    4454:	08 95       	ret

00004456 <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    4456:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    4458:	0c 94 0c 22 	jmp	0x4418	; 0x4418 <spiwrite>

0000445c <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    445c:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    445e:	0c 94 0c 22 	jmp	0x4418	; 0x4418 <spiwrite>

00004462 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    4462:	cf 93       	push	r28
    4464:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    4466:	81 e8       	ldi	r24, 0x81	; 129
    4468:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
	st7565_command(val);
    446c:	8c 2f       	mov	r24, r28
}
    446e:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    4470:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <st7565_command>

00004474 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    4474:	cf 93       	push	r28
    4476:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    4478:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    447a:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    447c:	87 e8       	ldi	r24, 0x87	; 135
    447e:	93 e1       	ldi	r25, 0x13	; 19
    4480:	01 97       	sbiw	r24, 0x01	; 1
    4482:	f1 f7       	brne	.-4      	; 0x4480 <st7565_init+0xc>
    4484:	00 c0       	rjmp	.+0      	; 0x4486 <st7565_init+0x12>
    4486:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    4488:	5e 9a       	sbi	0x0b, 6	; 11
    448a:	c0 ef       	ldi	r28, 0xF0	; 240
    448c:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    448e:	fe 01       	movw	r30, r28
    4490:	84 91       	lpm	r24, Z
    4492:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
    4496:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    4498:	fd e0       	ldi	r31, 0x0D	; 13
    449a:	ce 3f       	cpi	r28, 0xFE	; 254
    449c:	df 07       	cpc	r29, r31
    449e:	b9 f7       	brne	.-18     	; 0x448e <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    44a0:	80 91 41 06 	lds	r24, 0x0641
    44a4:	0e 94 31 22 	call	0x4462	; 0x4462 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    44a8:	88 ec       	ldi	r24, 0xC8	; 200
}
    44aa:	df 91       	pop	r29
    44ac:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    44ae:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <st7565_command>

000044b2 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    44b2:	df 92       	push	r13
    44b4:	ef 92       	push	r14
    44b6:	ff 92       	push	r15
    44b8:	0f 93       	push	r16
    44ba:	1f 93       	push	r17
    44bc:	cf 93       	push	r28
    44be:	df 93       	push	r29
    44c0:	ce ef       	ldi	r28, 0xFE	; 254
    44c2:	dd e0       	ldi	r29, 0x0D	; 13
    44c4:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    44c6:	fe 01       	movw	r30, r28
    44c8:	84 91       	lpm	r24, Z
    44ca:	80 6b       	ori	r24, 0xB0	; 176
    44cc:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    44d0:	80 e0       	ldi	r24, 0x00	; 0
    44d2:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    44d6:	80 e1       	ldi	r24, 0x10	; 16
    44d8:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    44dc:	80 ee       	ldi	r24, 0xE0	; 224
    44de:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
    44e2:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    44e4:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    44e6:	f7 01       	movw	r30, r14
    44e8:	81 91       	ld	r24, Z+
    44ea:	7f 01       	movw	r14, r30
    44ec:	0e 94 2e 22 	call	0x445c	; 0x445c <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    44f0:	d3 94       	inc	r13
    44f2:	f0 e8       	ldi	r31, 0x80	; 128
    44f4:	df 12       	cpse	r13, r31
    44f6:	f7 cf       	rjmp	.-18     	; 0x44e6 <write_buffer+0x34>
    44f8:	21 96       	adiw	r28, 0x01	; 1
    44fa:	00 58       	subi	r16, 0x80	; 128
    44fc:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    44fe:	8e e0       	ldi	r24, 0x0E	; 14
    4500:	c6 30       	cpi	r28, 0x06	; 6
    4502:	d8 07       	cpc	r29, r24
    4504:	01 f7       	brne	.-64     	; 0x44c6 <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    4506:	df 91       	pop	r29
    4508:	cf 91       	pop	r28
    450a:	1f 91       	pop	r17
    450c:	0f 91       	pop	r16
    450e:	ff 90       	pop	r15
    4510:	ef 90       	pop	r14
    4512:	df 90       	pop	r13
    4514:	08 95       	ret

00004516 <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	34 e0       	ldi	r19, 0x04	; 4
    451a:	fc 01       	movw	r30, r24
    451c:	a9 01       	movw	r20, r18
    451e:	11 92       	st	Z+, r1
    4520:	41 50       	subi	r20, 0x01	; 1
    4522:	50 40       	sbci	r21, 0x00	; 0
    4524:	e1 f7       	brne	.-8      	; 0x451e <clear_buffer+0x8>
    4526:	08 95       	ret

00004528 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    4528:	cf 93       	push	r28
    452a:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    452c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    452e:	8d 2f       	mov	r24, r29
    4530:	80 6b       	ori	r24, 0xB0	; 176
    4532:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4536:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    4538:	8c 2f       	mov	r24, r28
    453a:	8f 70       	andi	r24, 0x0F	; 15
    453c:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    4540:	8c 2f       	mov	r24, r28
    4542:	82 95       	swap	r24
    4544:	8f 70       	andi	r24, 0x0F	; 15
    4546:	80 61       	ori	r24, 0x10	; 16
    4548:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
			st7565_data(0x00);											// Clear data
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	0e 94 2e 22 	call	0x445c	; 0x445c <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4552:	cf 5f       	subi	r28, 0xFF	; 255
    4554:	c0 38       	cpi	r28, 0x80	; 128
    4556:	81 f7       	brne	.-32     	; 0x4538 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4558:	df 5f       	subi	r29, 0xFF	; 255
    455a:	d8 30       	cpi	r29, 0x08	; 8
    455c:	41 f7       	brne	.-48     	; 0x452e <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    455e:	df 91       	pop	r29
    4560:	cf 91       	pop	r28
    4562:	08 95       	ret

00004564 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    4564:	67 fd       	sbrc	r22, 7
    4566:	36 c0       	rjmp	.+108    	; 0x45d4 <setpixel+0x70>
    4568:	40 34       	cpi	r20, 0x40	; 64
    456a:	a0 f5       	brcc	.+104    	; 0x45d4 <setpixel+0x70>
    456c:	34 2f       	mov	r19, r20
    456e:	36 95       	lsr	r19
    4570:	36 95       	lsr	r19
    4572:	36 95       	lsr	r19
    4574:	e6 2f       	mov	r30, r22
    4576:	f0 e0       	ldi	r31, 0x00	; 0
    4578:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    457a:	22 23       	and	r18, r18
    457c:	a9 f0       	breq	.+42     	; 0x45a8 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    457e:	20 e8       	ldi	r18, 0x80	; 128
    4580:	32 9f       	mul	r19, r18
    4582:	e0 0d       	add	r30, r0
    4584:	f1 1d       	adc	r31, r1
    4586:	11 24       	eor	r1, r1
    4588:	e8 0f       	add	r30, r24
    458a:	f9 1f       	adc	r31, r25
    458c:	40 95       	com	r20
    458e:	50 95       	com	r21
    4590:	47 70       	andi	r20, 0x07	; 7
    4592:	55 27       	eor	r21, r21
    4594:	81 e0       	ldi	r24, 0x01	; 1
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	04 2e       	mov	r0, r20
    459a:	01 c0       	rjmp	.+2      	; 0x459e <setpixel+0x3a>
    459c:	88 0f       	add	r24, r24
    459e:	0a 94       	dec	r0
    45a0:	ea f7       	brpl	.-6      	; 0x459c <setpixel+0x38>
    45a2:	90 81       	ld	r25, Z
    45a4:	98 2b       	or	r25, r24
    45a6:	15 c0       	rjmp	.+42     	; 0x45d2 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    45a8:	20 e8       	ldi	r18, 0x80	; 128
    45aa:	32 9f       	mul	r19, r18
    45ac:	e0 0d       	add	r30, r0
    45ae:	f1 1d       	adc	r31, r1
    45b0:	11 24       	eor	r1, r1
    45b2:	e8 0f       	add	r30, r24
    45b4:	f9 1f       	adc	r31, r25
    45b6:	40 95       	com	r20
    45b8:	50 95       	com	r21
    45ba:	47 70       	andi	r20, 0x07	; 7
    45bc:	55 27       	eor	r21, r21
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	04 2e       	mov	r0, r20
    45c4:	01 c0       	rjmp	.+2      	; 0x45c8 <setpixel+0x64>
    45c6:	88 0f       	add	r24, r24
    45c8:	0a 94       	dec	r0
    45ca:	ea f7       	brpl	.-6      	; 0x45c6 <setpixel+0x62>
    45cc:	80 95       	com	r24
    45ce:	90 81       	ld	r25, Z
    45d0:	98 23       	and	r25, r24
    45d2:	90 83       	st	Z, r25
    45d4:	08 95       	ret

000045d6 <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    45d6:	9f 92       	push	r9
    45d8:	af 92       	push	r10
    45da:	bf 92       	push	r11
    45dc:	cf 92       	push	r12
    45de:	df 92       	push	r13
    45e0:	ef 92       	push	r14
    45e2:	ff 92       	push	r15
    45e4:	0f 93       	push	r16
    45e6:	1f 93       	push	r17
    45e8:	cf 93       	push	r28
    45ea:	df 93       	push	r29
    45ec:	ec 01       	movw	r28, r24
    45ee:	16 2f       	mov	r17, r22
    45f0:	f4 2e       	mov	r15, r20
    45f2:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    45f4:	a0 2f       	mov	r26, r16
    45f6:	b0 e0       	ldi	r27, 0x00	; 0
    45f8:	a4 1b       	sub	r26, r20
    45fa:	b1 09       	sbc	r27, r1
    45fc:	b7 ff       	sbrs	r27, 7
    45fe:	03 c0       	rjmp	.+6      	; 0x4606 <drawline+0x30>
    4600:	b1 95       	neg	r27
    4602:	a1 95       	neg	r26
    4604:	b1 09       	sbc	r27, r1
    4606:	ed 2d       	mov	r30, r13
    4608:	f0 e0       	ldi	r31, 0x00	; 0
    460a:	e1 1b       	sub	r30, r17
    460c:	f1 09       	sbc	r31, r1
    460e:	f7 ff       	sbrs	r31, 7
    4610:	03 c0       	rjmp	.+6      	; 0x4618 <drawline+0x42>
    4612:	f1 95       	neg	r31
    4614:	e1 95       	neg	r30
    4616:	f1 09       	sbc	r31, r1
    4618:	bb 24       	eor	r11, r11
    461a:	b3 94       	inc	r11
    461c:	ea 17       	cp	r30, r26
    461e:	fb 07       	cpc	r31, r27
    4620:	14 f0       	brlt	.+4      	; 0x4626 <drawline+0x50>
    4622:	b1 2c       	mov	r11, r1
    4624:	06 c0       	rjmp	.+12     	; 0x4632 <drawline+0x5c>
    4626:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    4628:	d0 2e       	mov	r13, r16
    462a:	08 2f       	mov	r16, r24
    462c:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    462e:	1f 2d       	mov	r17, r15
    4630:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    4632:	d1 16       	cp	r13, r17
    4634:	30 f4       	brcc	.+12     	; 0x4642 <drawline+0x6c>
    4636:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    4638:	f0 2e       	mov	r15, r16
    463a:	08 2f       	mov	r16, r24
    463c:	81 2f       	mov	r24, r17
    463e:	1d 2d       	mov	r17, r13
    4640:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    4642:	ad 2c       	mov	r10, r13
    4644:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    4646:	e0 2f       	mov	r30, r16
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	ef 19       	sub	r30, r15
    464c:	f1 09       	sbc	r31, r1
    464e:	f7 ff       	sbrs	r31, 7
    4650:	03 c0       	rjmp	.+6      	; 0x4658 <drawline+0x82>
    4652:	f1 95       	neg	r31
    4654:	e1 95       	neg	r30
    4656:	f1 09       	sbc	r31, r1
    4658:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    465a:	ca 2c       	mov	r12, r10
    465c:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    465e:	f0 16       	cp	r15, r16
    4660:	10 f4       	brcc	.+4      	; 0x4666 <drawline+0x90>
	{
		ystep = 1;
    4662:	01 e0       	ldi	r16, 0x01	; 1
    4664:	10 c0       	rjmp	.+32     	; 0x4686 <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    4666:	0f ef       	ldi	r16, 0xFF	; 255
    4668:	0e c0       	rjmp	.+28     	; 0x4686 <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    466a:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    466c:	bb 20       	and	r11, r11
    466e:	71 f0       	breq	.+28     	; 0x468c <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    4670:	41 2f       	mov	r20, r17
    4672:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4674:	ce 01       	movw	r24, r28
    4676:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>
		}
		err -= dy;
    467a:	c9 18       	sub	r12, r9
		if (err < 0) 
    467c:	c7 fe       	sbrs	r12, 7
    467e:	02 c0       	rjmp	.+4      	; 0x4684 <drawline+0xae>
		{
			y0 += ystep;
    4680:	f0 0e       	add	r15, r16
			err += dx;
    4682:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    4684:	1f 5f       	subi	r17, 0xFF	; 255
    4686:	1d 15       	cp	r17, r13
    4688:	80 f3       	brcs	.-32     	; 0x466a <drawline+0x94>
    468a:	03 c0       	rjmp	.+6      	; 0x4692 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    468c:	4f 2d       	mov	r20, r15
    468e:	61 2f       	mov	r22, r17
    4690:	f1 cf       	rjmp	.-30     	; 0x4674 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    4692:	df 91       	pop	r29
    4694:	cf 91       	pop	r28
    4696:	1f 91       	pop	r17
    4698:	0f 91       	pop	r16
    469a:	ff 90       	pop	r15
    469c:	ef 90       	pop	r14
    469e:	df 90       	pop	r13
    46a0:	cf 90       	pop	r12
    46a2:	bf 90       	pop	r11
    46a4:	af 90       	pop	r10
    46a6:	9f 90       	pop	r9
    46a8:	08 95       	ret

000046aa <drawrect>:
	}
}

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    46aa:	9f 92       	push	r9
    46ac:	af 92       	push	r10
    46ae:	bf 92       	push	r11
    46b0:	cf 92       	push	r12
    46b2:	df 92       	push	r13
    46b4:	ef 92       	push	r14
    46b6:	ff 92       	push	r15
    46b8:	0f 93       	push	r16
    46ba:	1f 93       	push	r17
    46bc:	cf 93       	push	r28
    46be:	df 93       	push	r29
    46c0:	ec 01       	movw	r28, r24
    46c2:	f6 2e       	mov	r15, r22
    46c4:	b4 2e       	mov	r11, r20
    46c6:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    46c8:	16 2f       	mov	r17, r22
    46ca:	c2 2e       	mov	r12, r18
    46cc:	d1 2c       	mov	r13, r1
    46ce:	c6 0e       	add	r12, r22
    46d0:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    46d2:	aa 24       	eor	r10, r10
    46d4:	aa 94       	dec	r10
    46d6:	a0 0e       	add	r10, r16
    46d8:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    46da:	81 2f       	mov	r24, r17
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	8c 15       	cp	r24, r12
    46e0:	9d 05       	cpc	r25, r13
    46e2:	74 f4       	brge	.+28     	; 0x4700 <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    46e4:	2e 2d       	mov	r18, r14
    46e6:	4b 2d       	mov	r20, r11
    46e8:	61 2f       	mov	r22, r17
    46ea:	ce 01       	movw	r24, r28
    46ec:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>
		setpixel(buff, i, y+h-1, color);
    46f0:	2e 2d       	mov	r18, r14
    46f2:	4a 2d       	mov	r20, r10
    46f4:	61 2f       	mov	r22, r17
    46f6:	ce 01       	movw	r24, r28
    46f8:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    46fc:	1f 5f       	subi	r17, 0xFF	; 255
    46fe:	ed cf       	rjmp	.-38     	; 0x46da <drawrect+0x30>
    4700:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4702:	10 e0       	ldi	r17, 0x00	; 0
    4704:	0b 0d       	add	r16, r11
    4706:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    4708:	cc 24       	eor	r12, r12
    470a:	ca 94       	dec	r12
    470c:	c9 0c       	add	r12, r9
    470e:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4710:	8d 2d       	mov	r24, r13
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	80 17       	cp	r24, r16
    4716:	91 07       	cpc	r25, r17
    4718:	74 f4       	brge	.+28     	; 0x4736 <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    471a:	2e 2d       	mov	r18, r14
    471c:	4d 2d       	mov	r20, r13
    471e:	6f 2d       	mov	r22, r15
    4720:	ce 01       	movw	r24, r28
    4722:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>
		setpixel(buff, x+w-1, i, color);
    4726:	2e 2d       	mov	r18, r14
    4728:	4d 2d       	mov	r20, r13
    472a:	6c 2d       	mov	r22, r12
    472c:	ce 01       	movw	r24, r28
    472e:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4732:	d3 94       	inc	r13
    4734:	ed cf       	rjmp	.-38     	; 0x4710 <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    4736:	df 91       	pop	r29
    4738:	cf 91       	pop	r28
    473a:	1f 91       	pop	r17
    473c:	0f 91       	pop	r16
    473e:	ff 90       	pop	r15
    4740:	ef 90       	pop	r14
    4742:	df 90       	pop	r13
    4744:	cf 90       	pop	r12
    4746:	bf 90       	pop	r11
    4748:	af 90       	pop	r10
    474a:	9f 90       	pop	r9
    474c:	08 95       	ret

0000474e <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    474e:	4f 92       	push	r4
    4750:	5f 92       	push	r5
    4752:	6f 92       	push	r6
    4754:	7f 92       	push	r7
    4756:	8f 92       	push	r8
    4758:	9f 92       	push	r9
    475a:	af 92       	push	r10
    475c:	bf 92       	push	r11
    475e:	cf 92       	push	r12
    4760:	df 92       	push	r13
    4762:	ef 92       	push	r14
    4764:	ff 92       	push	r15
    4766:	0f 93       	push	r16
    4768:	1f 93       	push	r17
    476a:	cf 93       	push	r28
    476c:	df 93       	push	r29
    476e:	ec 01       	movw	r28, r24
    4770:	96 2e       	mov	r9, r22
    4772:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    4774:	bb 24       	eor	r11, r11
    4776:	b3 94       	inc	r11
    4778:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    477a:	82 2e       	mov	r8, r18
    477c:	81 94       	neg	r8
    477e:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    4780:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4782:	74 2e       	mov	r7, r20
    4784:	72 1a       	sub	r7, r18
    4786:	e4 2e       	mov	r14, r20
    4788:	f1 2c       	mov	r15, r1
    478a:	67 01       	movw	r12, r14
    478c:	c2 0e       	add	r12, r18
    478e:	d1 1c       	adc	r13, r1
    4790:	87 2d       	mov	r24, r7
    4792:	99 27       	eor	r25, r25
    4794:	87 fd       	sbrc	r24, 7
    4796:	90 95       	com	r25
    4798:	c8 16       	cp	r12, r24
    479a:	d9 06       	cpc	r13, r25
    479c:	44 f0       	brlt	.+16     	; 0x47ae <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    479e:	20 2f       	mov	r18, r16
    47a0:	47 2d       	mov	r20, r7
    47a2:	69 2d       	mov	r22, r9
    47a4:	ce 01       	movw	r24, r28
    47a6:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>
    47aa:	73 94       	inc	r7
    47ac:	f1 cf       	rjmp	.-30     	; 0x4790 <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    47ae:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    47b0:	71 16       	cp	r7, r17
    47b2:	0c f0       	brlt	.+2      	; 0x47b6 <fillcircle+0x68>
    47b4:	4c c0       	rjmp	.+152    	; 0x484e <fillcircle+0x100>
	{
		if (f >= 0) 
    47b6:	b7 fc       	sbrc	r11, 7
    47b8:	04 c0       	rjmp	.+8      	; 0x47c2 <fillcircle+0x74>
		{
			y--;
    47ba:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    47bc:	83 94       	inc	r8
    47be:	83 94       	inc	r8
			f += ddF_y;
    47c0:	b8 0c       	add	r11, r8
    47c2:	73 94       	inc	r7
    47c4:	87 2d       	mov	r24, r7
    47c6:	88 0f       	add	r24, r24
    47c8:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    47ca:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    47cc:	6a 2c       	mov	r6, r10
    47ce:	61 1a       	sub	r6, r17
    47d0:	67 01       	movw	r12, r14
    47d2:	c1 0e       	add	r12, r17
    47d4:	d1 1c       	adc	r13, r1
    47d6:	17 fd       	sbrc	r17, 7
    47d8:	da 94       	dec	r13
    47da:	47 2c       	mov	r4, r7
    47dc:	49 0c       	add	r4, r9
    47de:	59 2c       	mov	r5, r9
    47e0:	57 18       	sub	r5, r7
    47e2:	86 2d       	mov	r24, r6
    47e4:	99 27       	eor	r25, r25
    47e6:	87 fd       	sbrc	r24, 7
    47e8:	90 95       	com	r25
    47ea:	c8 16       	cp	r12, r24
    47ec:	d9 06       	cpc	r13, r25
    47ee:	74 f0       	brlt	.+28     	; 0x480c <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    47f0:	20 2f       	mov	r18, r16
    47f2:	46 2d       	mov	r20, r6
    47f4:	64 2d       	mov	r22, r4
    47f6:	ce 01       	movw	r24, r28
    47f8:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>
			setpixel(buff, x0-x, i, color);
    47fc:	20 2f       	mov	r18, r16
    47fe:	46 2d       	mov	r20, r6
    4800:	65 2d       	mov	r22, r5
    4802:	ce 01       	movw	r24, r28
    4804:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>
    4808:	63 94       	inc	r6
    480a:	eb cf       	rjmp	.-42     	; 0x47e2 <fillcircle+0x94>
    480c:	6a 2c       	mov	r6, r10
    480e:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4810:	67 01       	movw	r12, r14
    4812:	c7 0c       	add	r12, r7
    4814:	d1 1c       	adc	r13, r1
    4816:	77 fc       	sbrc	r7, 7
    4818:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    481a:	41 2e       	mov	r4, r17
    481c:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    481e:	59 2c       	mov	r5, r9
    4820:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4822:	86 2d       	mov	r24, r6
    4824:	99 27       	eor	r25, r25
    4826:	87 fd       	sbrc	r24, 7
    4828:	90 95       	com	r25
    482a:	c8 16       	cp	r12, r24
    482c:	d9 06       	cpc	r13, r25
    482e:	0c f4       	brge	.+2      	; 0x4832 <fillcircle+0xe4>
    4830:	bf cf       	rjmp	.-130    	; 0x47b0 <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    4832:	20 2f       	mov	r18, r16
    4834:	46 2d       	mov	r20, r6
    4836:	64 2d       	mov	r22, r4
    4838:	ce 01       	movw	r24, r28
    483a:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>
			setpixel(buff, x0-y, i, color);
    483e:	20 2f       	mov	r18, r16
    4840:	46 2d       	mov	r20, r6
    4842:	65 2d       	mov	r22, r5
    4844:	ce 01       	movw	r24, r28
    4846:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>
    484a:	63 94       	inc	r6
    484c:	ea cf       	rjmp	.-44     	; 0x4822 <fillcircle+0xd4>
		}    
	}
}
    484e:	df 91       	pop	r29
    4850:	cf 91       	pop	r28
    4852:	1f 91       	pop	r17
    4854:	0f 91       	pop	r16
    4856:	ff 90       	pop	r15
    4858:	ef 90       	pop	r14
    485a:	df 90       	pop	r13
    485c:	cf 90       	pop	r12
    485e:	bf 90       	pop	r11
    4860:	af 90       	pop	r10
    4862:	9f 90       	pop	r9
    4864:	8f 90       	pop	r8
    4866:	7f 90       	pop	r7
    4868:	6f 90       	pop	r6
    486a:	5f 90       	pop	r5
    486c:	4f 90       	pop	r4
    486e:	08 95       	ret

00004870 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    4870:	88 0f       	add	r24, r24
    4872:	99 1f       	adc	r25, r25
    4874:	8a 5f       	subi	r24, 0xFA	; 250
    4876:	91 4f       	sbci	r25, 0xF1	; 241
    4878:	fc 01       	movw	r30, r24
    487a:	85 91       	lpm	r24, Z+
    487c:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    487e:	0c 94 aa 41 	jmp	0x8354	; 0x8354 <pgm_mugui_lcd_puts>

00004882 <gLCDprint_Menu_P>:
    4882:	0c 94 aa 41 	jmp	0x8354	; 0x8354 <pgm_mugui_lcd_puts>

00004886 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	91 e0       	ldi	r25, 0x01	; 1
    488a:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    488e:	23 e0       	ldi	r18, 0x03	; 3
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	49 e2       	ldi	r20, 0x29	; 41
    4894:	50 e0       	ldi	r21, 0x00	; 0
    4896:	61 e7       	ldi	r22, 0x71	; 113
    4898:	71 e0       	ldi	r23, 0x01	; 1
    489a:	89 e7       	ldi	r24, 0x79	; 121
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    48a2:	27 e1       	ldi	r18, 0x17	; 23
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	48 e1       	ldi	r20, 0x18	; 24
    48a8:	50 e0       	ldi	r21, 0x00	; 0
    48aa:	61 e7       	ldi	r22, 0x71	; 113
    48ac:	71 e0       	ldi	r23, 0x01	; 1
    48ae:	8a e7       	ldi	r24, 0x7A	; 122
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>

	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    48b6:	80 91 20 05 	lds	r24, 0x0520
    48ba:	83 ff       	sbrs	r24, 3
    48bc:	13 c0       	rjmp	.+38     	; 0x48e4 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    48be:	2b e2       	ldi	r18, 0x2B	; 43
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	4c e0       	ldi	r20, 0x0C	; 12
    48c4:	50 e0       	ldi	r21, 0x00	; 0
    48c6:	61 e7       	ldi	r22, 0x71	; 113
    48c8:	71 e0       	ldi	r23, 0x01	; 1
    48ca:	86 e8       	ldi	r24, 0x86	; 134
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    48d2:	2b e2       	ldi	r18, 0x2B	; 43
    48d4:	30 e0       	ldi	r19, 0x00	; 0
    48d6:	40 e5       	ldi	r20, 0x50	; 80
    48d8:	50 e0       	ldi	r21, 0x00	; 0
    48da:	61 e7       	ldi	r22, 0x71	; 113
    48dc:	71 e0       	ldi	r23, 0x01	; 1
    48de:	86 e7       	ldi	r24, 0x76	; 118
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	41 c0       	rjmp	.+130    	; 0x4966 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)				// No signal
    48e4:	80 91 20 05 	lds	r24, 0x0520
    48e8:	81 ff       	sbrs	r24, 1
    48ea:	13 c0       	rjmp	.+38     	; 0x4912 <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    48ec:	2b e2       	ldi	r18, 0x2B	; 43
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	4c e1       	ldi	r20, 0x1C	; 28
    48f2:	50 e0       	ldi	r21, 0x00	; 0
    48f4:	61 e7       	ldi	r22, 0x71	; 113
    48f6:	71 e0       	ldi	r23, 0x01	; 1
    48f8:	8b e4       	ldi	r24, 0x4B	; 75
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    4900:	2b e2       	ldi	r18, 0x2B	; 43
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	46 e3       	ldi	r20, 0x36	; 54
    4906:	50 e0       	ldi	r21, 0x00	; 0
    4908:	61 e7       	ldi	r22, 0x71	; 113
    490a:	71 e0       	ldi	r23, 0x01	; 1
    490c:	8c e4       	ldi	r24, 0x4C	; 76
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	2a c0       	rjmp	.+84     	; 0x4966 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)			// Throttle high
    4912:	80 91 20 05 	lds	r24, 0x0520
    4916:	80 ff       	sbrs	r24, 0
    4918:	13 c0       	rjmp	.+38     	; 0x4940 <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    491a:	2b e2       	ldi	r18, 0x2B	; 43
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	4a e0       	ldi	r20, 0x0A	; 10
    4920:	50 e0       	ldi	r21, 0x00	; 0
    4922:	61 e7       	ldi	r22, 0x71	; 113
    4924:	71 e0       	ldi	r23, 0x01	; 1
    4926:	89 e6       	ldi	r24, 0x69	; 105
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    492e:	2b e2       	ldi	r18, 0x2B	; 43
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	41 e5       	ldi	r20, 0x51	; 81
    4934:	50 e0       	ldi	r21, 0x00	; 0
    4936:	61 e7       	ldi	r22, 0x71	; 113
    4938:	71 e0       	ldi	r23, 0x01	; 1
    493a:	87 e3       	ldi	r24, 0x37	; 55
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	13 c0       	rjmp	.+38     	; 0x4966 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4940:	80 91 20 05 	lds	r24, 0x0520
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4944:	2b e2       	ldi	r18, 0x2B	; 43
    4946:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4948:	82 ff       	sbrs	r24, 2
    494a:	07 c0       	rjmp	.+14     	; 0x495a <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    494c:	44 e1       	ldi	r20, 0x14	; 20
    494e:	50 e0       	ldi	r21, 0x00	; 0
    4950:	61 e7       	ldi	r22, 0x71	; 113
    4952:	71 e0       	ldi	r23, 0x01	; 1
    4954:	8b e8       	ldi	r24, 0x8B	; 139
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	06 c0       	rjmp	.+12     	; 0x4966 <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    495a:	4c e1       	ldi	r20, 0x1C	; 28
    495c:	50 e0       	ldi	r21, 0x00	; 0
    495e:	61 e7       	ldi	r22, 0x71	; 113
    4960:	71 e0       	ldi	r23, 0x01	; 1
    4962:	8a e8       	ldi	r24, 0x8A	; 138
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
	}

	write_buffer(buffer);
    496a:	80 e0       	ldi	r24, 0x00	; 0
    496c:	91 e0       	ldi	r25, 0x01	; 1
    496e:	0c 94 59 22 	jmp	0x44b2	; 0x44b2 <write_buffer>

00004972 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    4972:	cf 93       	push	r28
    4974:	df 93       	push	r29
    4976:	cd b7       	in	r28, 0x3d	; 61
    4978:	de b7       	in	r29, 0x3e	; 62
    497a:	2c 97       	sbiw	r28, 0x0c	; 12
    497c:	0f b6       	in	r0, 0x3f	; 63
    497e:	f8 94       	cli
    4980:	de bf       	out	0x3e, r29	; 62
    4982:	0f be       	out	0x3f, r0	; 63
    4984:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    4986:	26 e0       	ldi	r18, 0x06	; 6
    4988:	ae 01       	movw	r20, r28
    498a:	4f 5f       	subi	r20, 0xFF	; 255
    498c:	5f 4f       	sbci	r21, 0xFF	; 255
    498e:	63 e4       	ldi	r22, 0x43	; 67
    4990:	80 ed       	ldi	r24, 0xD0	; 208
    4992:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    4996:	89 81       	ldd	r24, Y+1	; 0x01
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	98 2f       	mov	r25, r24
    499c:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    499e:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    49a0:	82 0f       	add	r24, r18
    49a2:	91 1d       	adc	r25, r1
    49a4:	34 e0       	ldi	r19, 0x04	; 4
    49a6:	95 95       	asr	r25
    49a8:	87 95       	ror	r24
    49aa:	3a 95       	dec	r19
    49ac:	e1 f7       	brne	.-8      	; 0x49a6 <get_raw_gyros+0x34>
    49ae:	9a 87       	std	Y+10, r25	; 0x0a
    49b0:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    49b2:	8b 81       	ldd	r24, Y+3	; 0x03
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	98 2f       	mov	r25, r24
    49b8:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    49ba:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    49bc:	82 0f       	add	r24, r18
    49be:	91 1d       	adc	r25, r1
    49c0:	54 e0       	ldi	r21, 0x04	; 4
    49c2:	95 95       	asr	r25
    49c4:	87 95       	ror	r24
    49c6:	5a 95       	dec	r21
    49c8:	e1 f7       	brne	.-8      	; 0x49c2 <get_raw_gyros+0x50>
    49ca:	98 87       	std	Y+8, r25	; 0x08
    49cc:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    49ce:	8d 81       	ldd	r24, Y+5	; 0x05
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	98 2f       	mov	r25, r24
    49d4:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    49d6:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    49d8:	82 0f       	add	r24, r18
    49da:	91 1d       	adc	r25, r1
    49dc:	74 e0       	ldi	r23, 0x04	; 4
    49de:	95 95       	asr	r25
    49e0:	87 95       	ror	r24
    49e2:	7a 95       	dec	r23
    49e4:	e1 f7       	brne	.-8      	; 0x49de <get_raw_gyros+0x6c>
    49e6:	9c 87       	std	Y+12, r25	; 0x0c
    49e8:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    49ea:	20 91 40 06 	lds	r18, 0x0640
    49ee:	aa e7       	ldi	r26, 0x7A	; 122
    49f0:	b5 e0       	ldi	r27, 0x05	; 5
    49f2:	43 e0       	ldi	r20, 0x03	; 3
    49f4:	24 02       	muls	r18, r20
    49f6:	90 01       	movw	r18, r0
    49f8:	11 24       	eor	r1, r1
    49fa:	80 e0       	ldi	r24, 0x00	; 0
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	29 5e       	subi	r18, 0xE9	; 233
    4a00:	37 4e       	sbci	r19, 0xE7	; 231
    4a02:	f9 01       	movw	r30, r18
    4a04:	e8 0f       	add	r30, r24
    4a06:	f9 1f       	adc	r31, r25
    4a08:	e4 91       	lpm	r30, Z
    4a0a:	ee 0f       	add	r30, r30
    4a0c:	ff 0b       	sbc	r31, r31
    4a0e:	41 e0       	ldi	r20, 0x01	; 1
    4a10:	50 e0       	ldi	r21, 0x00	; 0
    4a12:	4c 0f       	add	r20, r28
    4a14:	5d 1f       	adc	r21, r29
    4a16:	e4 0f       	add	r30, r20
    4a18:	f5 1f       	adc	r31, r21
    4a1a:	46 81       	ldd	r20, Z+6	; 0x06
    4a1c:	57 81       	ldd	r21, Z+7	; 0x07
    4a1e:	4d 93       	st	X+, r20
    4a20:	5d 93       	st	X+, r21
    4a22:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    4a24:	83 30       	cpi	r24, 0x03	; 3
    4a26:	91 05       	cpc	r25, r1
    4a28:	61 f7       	brne	.-40     	; 0x4a02 <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    4a2a:	2c 96       	adiw	r28, 0x0c	; 12
    4a2c:	0f b6       	in	r0, 0x3f	; 63
    4a2e:	f8 94       	cli
    4a30:	de bf       	out	0x3e, r29	; 62
    4a32:	0f be       	out	0x3f, r0	; 63
    4a34:	cd bf       	out	0x3d, r28	; 61
    4a36:	df 91       	pop	r29
    4a38:	cf 91       	pop	r28
    4a3a:	08 95       	ret

00004a3c <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    4a3c:	1f 93       	push	r17
    4a3e:	cf 93       	push	r28
    4a40:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    4a42:	0e 94 b9 24 	call	0x4972	; 0x4972 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4a46:	20 91 40 06 	lds	r18, 0x0640
    4a4a:	ce ea       	ldi	r28, 0xAE	; 174
    4a4c:	d7 e0       	ldi	r29, 0x07	; 7
    4a4e:	aa e7       	ldi	r26, 0x7A	; 122
    4a50:	b5 e0       	ldi	r27, 0x05	; 5
    4a52:	83 e0       	ldi	r24, 0x03	; 3
    4a54:	28 02       	muls	r18, r24
    4a56:	90 01       	movw	r18, r0
    4a58:	11 24       	eor	r1, r1
    4a5a:	80 e0       	ldi	r24, 0x00	; 0
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	2b 5f       	subi	r18, 0xFB	; 251
    4a60:	37 4e       	sbci	r19, 0xE7	; 231
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4a62:	69 91       	ld	r22, Y+
    4a64:	79 91       	ld	r23, Y+
    4a66:	f9 01       	movw	r30, r18
    4a68:	e8 0f       	add	r30, r24
    4a6a:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4a6c:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4a6e:	4d 91       	ld	r20, X+
    4a70:	5c 91       	ld	r21, X
    4a72:	11 97       	sbiw	r26, 0x01	; 1
    4a74:	46 1b       	sub	r20, r22
    4a76:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4a78:	14 03       	mulsu	r17, r20
    4a7a:	b0 01       	movw	r22, r0
    4a7c:	15 9f       	mul	r17, r21
    4a7e:	70 0d       	add	r23, r0
    4a80:	11 24       	eor	r1, r1
    4a82:	6d 93       	st	X+, r22
    4a84:	7d 93       	st	X+, r23
    4a86:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    4a88:	83 30       	cpi	r24, 0x03	; 3
    4a8a:	91 05       	cpc	r25, r1
    4a8c:	51 f7       	brne	.-44     	; 0x4a62 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    4a8e:	df 91       	pop	r29
    4a90:	cf 91       	pop	r28
    4a92:	1f 91       	pop	r17
    4a94:	08 95       	ret

00004a96 <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    4a96:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    4a98:	86 e0       	ldi	r24, 0x06	; 6
    4a9a:	ee ea       	ldi	r30, 0xAE	; 174
    4a9c:	f7 e0       	ldi	r31, 0x07	; 7
    4a9e:	df 01       	movw	r26, r30
    4aa0:	1d 92       	st	X+, r1
    4aa2:	8a 95       	dec	r24
    4aa4:	e9 f7       	brne	.-6      	; 0x4aa0 <CalibrateGyrosFast+0xa>
    4aa6:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    4aa8:	0e 94 b9 24 	call	0x4972	; 0x4972 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    4aac:	40 91 ae 07 	lds	r20, 0x07AE
    4ab0:	50 91 af 07 	lds	r21, 0x07AF
    4ab4:	80 91 7a 05 	lds	r24, 0x057A
    4ab8:	90 91 7b 05 	lds	r25, 0x057B
    4abc:	48 0f       	add	r20, r24
    4abe:	59 1f       	adc	r21, r25
    4ac0:	50 93 af 07 	sts	0x07AF, r21
    4ac4:	40 93 ae 07 	sts	0x07AE, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    4ac8:	20 91 b0 07 	lds	r18, 0x07B0
    4acc:	30 91 b1 07 	lds	r19, 0x07B1
    4ad0:	80 91 7c 05 	lds	r24, 0x057C
    4ad4:	90 91 7d 05 	lds	r25, 0x057D
    4ad8:	28 0f       	add	r18, r24
    4ada:	39 1f       	adc	r19, r25
    4adc:	30 93 b1 07 	sts	0x07B1, r19
    4ae0:	20 93 b0 07 	sts	0x07B0, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    4ae4:	80 91 b2 07 	lds	r24, 0x07B2
    4ae8:	90 91 b3 07 	lds	r25, 0x07B3
    4aec:	60 91 7e 05 	lds	r22, 0x057E
    4af0:	70 91 7f 05 	lds	r23, 0x057F
    4af4:	86 0f       	add	r24, r22
    4af6:	97 1f       	adc	r25, r23
    4af8:	90 93 b3 07 	sts	0x07B3, r25
    4afc:	80 93 b2 07 	sts	0x07B2, r24
    4b00:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    4b02:	91 f6       	brne	.-92     	; 0x4aa8 <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    4b04:	e5 e0       	ldi	r30, 0x05	; 5
    4b06:	55 95       	asr	r21
    4b08:	47 95       	ror	r20
    4b0a:	ea 95       	dec	r30
    4b0c:	e1 f7       	brne	.-8      	; 0x4b06 <CalibrateGyrosFast+0x70>
    4b0e:	50 93 af 07 	sts	0x07AF, r21
    4b12:	40 93 ae 07 	sts	0x07AE, r20
    4b16:	f5 e0       	ldi	r31, 0x05	; 5
    4b18:	35 95       	asr	r19
    4b1a:	27 95       	ror	r18
    4b1c:	fa 95       	dec	r31
    4b1e:	e1 f7       	brne	.-8      	; 0x4b18 <CalibrateGyrosFast+0x82>
    4b20:	30 93 b1 07 	sts	0x07B1, r19
    4b24:	20 93 b0 07 	sts	0x07B0, r18
    4b28:	a5 e0       	ldi	r26, 0x05	; 5
    4b2a:	95 95       	asr	r25
    4b2c:	87 95       	ror	r24
    4b2e:	aa 95       	dec	r26
    4b30:	e1 f7       	brne	.-8      	; 0x4b2a <CalibrateGyrosFast+0x94>
    4b32:	90 93 b3 07 	sts	0x07B3, r25
    4b36:	80 93 b2 07 	sts	0x07B2, r24
	}

	Save_Config_to_EEPROM();
}
    4b3a:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    4b3c:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>

00004b40 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    4b40:	2f 92       	push	r2
    4b42:	3f 92       	push	r3
    4b44:	4f 92       	push	r4
    4b46:	5f 92       	push	r5
    4b48:	6f 92       	push	r6
    4b4a:	7f 92       	push	r7
    4b4c:	8f 92       	push	r8
    4b4e:	9f 92       	push	r9
    4b50:	af 92       	push	r10
    4b52:	bf 92       	push	r11
    4b54:	cf 92       	push	r12
    4b56:	df 92       	push	r13
    4b58:	ef 92       	push	r14
    4b5a:	ff 92       	push	r15
    4b5c:	0f 93       	push	r16
    4b5e:	1f 93       	push	r17
    4b60:	cf 93       	push	r28
    4b62:	df 93       	push	r29
    4b64:	cd b7       	in	r28, 0x3d	; 61
    4b66:	de b7       	in	r29, 0x3e	; 62
    4b68:	65 97       	sbiw	r28, 0x15	; 21
    4b6a:	0f b6       	in	r0, 0x3f	; 63
    4b6c:	f8 94       	cli
    4b6e:	de bf       	out	0x3e, r29	; 62
    4b70:	0f be       	out	0x3f, r0	; 63
    4b72:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    4b74:	1e 86       	std	Y+14, r1	; 0x0e
    4b76:	1d 86       	std	Y+13, r1	; 0x0d
    4b78:	18 8a       	std	Y+16, r1	; 0x10
    4b7a:	1f 86       	std	Y+15, r1	; 0x0f
    4b7c:	1a 8a       	std	Y+18, r1	; 0x12
    4b7e:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    4b80:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    4b84:	60 91 ae 07 	lds	r22, 0x07AE
    4b88:	70 91 af 07 	lds	r23, 0x07AF
    4b8c:	88 27       	eor	r24, r24
    4b8e:	77 fd       	sbrc	r23, 7
    4b90:	80 95       	com	r24
    4b92:	98 2f       	mov	r25, r24
    4b94:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    4b98:	69 83       	std	Y+1, r22	; 0x01
    4b9a:	7a 83       	std	Y+2, r23	; 0x02
    4b9c:	8b 83       	std	Y+3, r24	; 0x03
    4b9e:	9c 83       	std	Y+4, r25	; 0x04
    4ba0:	60 91 b0 07 	lds	r22, 0x07B0
    4ba4:	70 91 b1 07 	lds	r23, 0x07B1
    4ba8:	88 27       	eor	r24, r24
    4baa:	77 fd       	sbrc	r23, 7
    4bac:	80 95       	com	r24
    4bae:	98 2f       	mov	r25, r24
    4bb0:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    4bb4:	6d 83       	std	Y+5, r22	; 0x05
    4bb6:	7e 83       	std	Y+6, r23	; 0x06
    4bb8:	8f 83       	std	Y+7, r24	; 0x07
    4bba:	98 87       	std	Y+8, r25	; 0x08
    4bbc:	60 91 b2 07 	lds	r22, 0x07B2
    4bc0:	70 91 b3 07 	lds	r23, 0x07B3
    4bc4:	88 27       	eor	r24, r24
    4bc6:	77 fd       	sbrc	r23, 7
    4bc8:	80 95       	com	r24
    4bca:	98 2f       	mov	r25, r24
    4bcc:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    4bd0:	69 87       	std	Y+9, r22	; 0x09
    4bd2:	7a 87       	std	Y+10, r23	; 0x0a
    4bd4:	8b 87       	std	Y+11, r24	; 0x0b
    4bd6:	9c 87       	std	Y+12, r25	; 0x0c
    4bd8:	1d 8a       	std	Y+21, r1	; 0x15
    4bda:	1b 8a       	std	Y+19, r1	; 0x13
    4bdc:	e1 2c       	mov	r14, r1
    4bde:	f1 2c       	mov	r15, r1
    4be0:	00 e0       	ldi	r16, 0x00	; 0
    4be2:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    4be4:	80 91 b2 00 	lds	r24, 0x00B2
    4be8:	9d 89       	ldd	r25, Y+21	; 0x15
    4bea:	89 1b       	sub	r24, r25
    4bec:	e8 0e       	add	r14, r24
    4bee:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    4bf0:	e0 91 b2 00 	lds	r30, 0x00B2
    4bf4:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    4bf6:	fc e4       	ldi	r31, 0x4C	; 76
    4bf8:	ef 16       	cp	r14, r31
    4bfa:	ff 06       	cpc	r15, r31
    4bfc:	28 f0       	brcs	.+10     	; 0x4c08 <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    4bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    4c00:	8f 5f       	subi	r24, 0xFF	; 255
    4c02:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    4c04:	e1 2c       	mov	r14, r1
    4c06:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    4c08:	0e 94 b9 24 	call	0x4972	; 0x4972 <get_raw_gyros>
    4c0c:	fe 01       	movw	r30, r28
    4c0e:	31 96       	adiw	r30, 0x01	; 1
    4c10:	6f 01       	movw	r12, r30
    4c12:	ba e7       	ldi	r27, 0x7A	; 122
    4c14:	2b 2e       	mov	r2, r27
    4c16:	b5 e0       	ldi	r27, 0x05	; 5
    4c18:	3b 2e       	mov	r3, r27
    4c1a:	ce 01       	movw	r24, r28
    4c1c:	0d 96       	adiw	r24, 0x0d	; 13
    4c1e:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    4c20:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    4c22:	f1 01       	movw	r30, r2
    4c24:	81 90       	ld	r8, Z+
    4c26:	91 90       	ld	r9, Z+
    4c28:	1f 01       	movw	r2, r30
    4c2a:	20 e0       	ldi	r18, 0x00	; 0
    4c2c:	30 ec       	ldi	r19, 0xC0	; 192
    4c2e:	49 e7       	ldi	r20, 0x79	; 121
    4c30:	54 e4       	ldi	r21, 0x44	; 68
    4c32:	f6 01       	movw	r30, r12
    4c34:	60 81       	ld	r22, Z
    4c36:	71 81       	ldd	r23, Z+1	; 0x01
    4c38:	82 81       	ldd	r24, Z+2	; 0x02
    4c3a:	93 81       	ldd	r25, Z+3	; 0x03
    4c3c:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    4c40:	2b 01       	movw	r4, r22
    4c42:	3c 01       	movw	r6, r24
    4c44:	b4 01       	movw	r22, r8
    4c46:	88 27       	eor	r24, r24
    4c48:	77 fd       	sbrc	r23, 7
    4c4a:	80 95       	com	r24
    4c4c:	98 2f       	mov	r25, r24
    4c4e:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    4c52:	9b 01       	movw	r18, r22
    4c54:	ac 01       	movw	r20, r24
    4c56:	c3 01       	movw	r24, r6
    4c58:	b2 01       	movw	r22, r4
    4c5a:	0e 94 8a 49 	call	0x9314	; 0x9314 <__addsf3>
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	4a e7       	ldi	r20, 0x7A	; 122
    4c64:	54 e4       	ldi	r21, 0x44	; 68
    4c66:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <__divsf3>
    4c6a:	f6 01       	movw	r30, r12
    4c6c:	60 83       	st	Z, r22
    4c6e:	71 83       	std	Z+1, r23	; 0x01
    4c70:	82 83       	std	Z+2, r24	; 0x02
    4c72:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    4c74:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
    4c78:	f5 01       	movw	r30, r10
    4c7a:	20 81       	ld	r18, Z
    4c7c:	31 81       	ldd	r19, Z+1	; 0x01
    4c7e:	26 17       	cp	r18, r22
    4c80:	37 07       	cpc	r19, r23
    4c82:	11 f0       	breq	.+4      	; 0x4c88 <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    4c84:	00 e0       	ldi	r16, 0x00	; 0
    4c86:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    4c88:	f5 01       	movw	r30, r10
    4c8a:	61 93       	st	Z+, r22
    4c8c:	71 93       	st	Z+, r23
    4c8e:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    4c90:	fc 89       	ldd	r31, Y+20	; 0x14
    4c92:	ff 5f       	subi	r31, 0xFF	; 255
    4c94:	fc 8b       	std	Y+20, r31	; 0x14
    4c96:	84 e0       	ldi	r24, 0x04	; 4
    4c98:	c8 0e       	add	r12, r24
    4c9a:	d1 1c       	adc	r13, r1
    4c9c:	f3 30       	cpi	r31, 0x03	; 3
    4c9e:	09 f6       	brne	.-126    	; 0x4c22 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    4ca0:	0f 5f       	subi	r16, 0xFF	; 255
    4ca2:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    4ca4:	09 3c       	cpi	r16, 0xC9	; 201
    4ca6:	11 05       	cpc	r17, r1
    4ca8:	20 f0       	brcs	.+8      	; 0x4cb2 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    4caa:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	01 c0       	rjmp	.+2      	; 0x4cb4 <CalibrateGyrosSlow+0x174>
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	e7 e8       	ldi	r30, 0x87	; 135
    4cb6:	f3 e1       	ldi	r31, 0x13	; 19
    4cb8:	31 97       	sbiw	r30, 0x01	; 1
    4cba:	f1 f7       	brne	.-4      	; 0x4cb8 <CalibrateGyrosSlow+0x178>
    4cbc:	00 c0       	rjmp	.+0      	; 0x4cbe <CalibrateGyrosSlow+0x17e>
    4cbe:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    4cc0:	81 11       	cpse	r24, r1
    4cc2:	04 c0       	rjmp	.+8      	; 0x4ccc <CalibrateGyrosSlow+0x18c>
    4cc4:	fb 89       	ldd	r31, Y+19	; 0x13
    4cc6:	f6 30       	cpi	r31, 0x06	; 6
    4cc8:	08 f4       	brcc	.+2      	; 0x4ccc <CalibrateGyrosSlow+0x18c>
    4cca:	8c cf       	rjmp	.-232    	; 0x4be4 <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    4ccc:	65 96       	adiw	r28, 0x15	; 21
    4cce:	0f b6       	in	r0, 0x3f	; 63
    4cd0:	f8 94       	cli
    4cd2:	de bf       	out	0x3e, r29	; 62
    4cd4:	0f be       	out	0x3f, r0	; 63
    4cd6:	cd bf       	out	0x3d, r28	; 61
    4cd8:	df 91       	pop	r29
    4cda:	cf 91       	pop	r28
    4cdc:	1f 91       	pop	r17
    4cde:	0f 91       	pop	r16
    4ce0:	ff 90       	pop	r15
    4ce2:	ef 90       	pop	r14
    4ce4:	df 90       	pop	r13
    4ce6:	cf 90       	pop	r12
    4ce8:	bf 90       	pop	r11
    4cea:	af 90       	pop	r10
    4cec:	9f 90       	pop	r9
    4cee:	8f 90       	pop	r8
    4cf0:	7f 90       	pop	r7
    4cf2:	6f 90       	pop	r6
    4cf4:	5f 90       	pop	r5
    4cf6:	4f 90       	pop	r4
    4cf8:	3f 90       	pop	r3
    4cfa:	2f 90       	pop	r2
    4cfc:	08 95       	ret

00004cfe <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    4cfe:	41 e0       	ldi	r20, 0x01	; 1
    4d00:	6b e6       	ldi	r22, 0x6B	; 107
    4d02:	80 ed       	ldi	r24, 0xD0	; 208
    4d04:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    4d08:	40 e4       	ldi	r20, 0x40	; 64
    4d0a:	67 e3       	ldi	r22, 0x37	; 55
    4d0c:	80 ed       	ldi	r24, 0xD0	; 208
    4d0e:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    4d12:	46 e0       	ldi	r20, 0x06	; 6
    4d14:	80 91 45 06 	lds	r24, 0x0645
    4d18:	48 1b       	sub	r20, r24
    4d1a:	6a e1       	ldi	r22, 0x1A	; 26
    4d1c:	80 ed       	ldi	r24, 0xD0	; 208
    4d1e:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    4d22:	48 e1       	ldi	r20, 0x18	; 24
    4d24:	6b e1       	ldi	r22, 0x1B	; 27
    4d26:	80 ed       	ldi	r24, 0xD0	; 208
    4d28:	0c 94 96 26 	jmp	0x4d2c	; 0x4d2c <writeI2Cbyte>

00004d2c <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    4d2c:	cf 93       	push	r28
    4d2e:	df 93       	push	r29
    4d30:	00 d0       	rcall	.+0      	; 0x4d32 <writeI2Cbyte+0x6>
    4d32:	cd b7       	in	r28, 0x3d	; 61
    4d34:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    4d36:	4a 83       	std	Y+2, r20	; 0x02
    4d38:	69 83       	std	Y+1, r22	; 0x01
    4d3a:	0e 94 5d 48 	call	0x90ba	; 0x90ba <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    4d3e:	69 81       	ldd	r22, Y+1	; 0x01
    4d40:	86 2f       	mov	r24, r22
    4d42:	0e 94 ad 48 	call	0x915a	; 0x915a <i2c_write>
    i2c_write(value); 								// Write byte
    4d46:	4a 81       	ldd	r20, Y+2	; 0x02
    4d48:	84 2f       	mov	r24, r20
    4d4a:	0e 94 ad 48 	call	0x915a	; 0x915a <i2c_write>
    i2c_stop();
}
    4d4e:	0f 90       	pop	r0
    4d50:	0f 90       	pop	r0
    4d52:	df 91       	pop	r29
    4d54:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    4d56:	0c 94 9e 48 	jmp	0x913c	; 0x913c <i2c_stop>

00004d5a <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    4d5a:	cf 92       	push	r12
    4d5c:	df 92       	push	r13
    4d5e:	ef 92       	push	r14
    4d60:	ff 92       	push	r15
    4d62:	0f 93       	push	r16
    4d64:	1f 93       	push	r17
    4d66:	cf 93       	push	r28
    4d68:	df 93       	push	r29
    4d6a:	00 d0       	rcall	.+0      	; 0x4d6c <readI2CbyteArray+0x12>
    4d6c:	1f 92       	push	r1
    4d6e:	cd b7       	in	r28, 0x3d	; 61
    4d70:	de b7       	in	r29, 0x3e	; 62
    4d72:	18 2f       	mov	r17, r24
    4d74:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    4d76:	4a 83       	std	Y+2, r20	; 0x02
    4d78:	5b 83       	std	Y+3, r21	; 0x03
    4d7a:	69 83       	std	Y+1, r22	; 0x01
    4d7c:	0e 94 5d 48 	call	0x90ba	; 0x90ba <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    4d80:	69 81       	ldd	r22, Y+1	; 0x01
    4d82:	86 2f       	mov	r24, r22
    4d84:	0e 94 ad 48 	call	0x915a	; 0x915a <i2c_write>
    i2c_rep_start(address+I2C_READ);
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	81 0f       	add	r24, r17
    4d8c:	0e 94 9c 48 	call	0x9138	; 0x9138 <i2c_rep_start>
    4d90:	4a 81       	ldd	r20, Y+2	; 0x02
    4d92:	c4 2e       	mov	r12, r20
    4d94:	5b 81       	ldd	r21, Y+3	; 0x03
    4d96:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    4d98:	00 e0       	ldi	r16, 0x00	; 0
    4d9a:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    4d9c:	f1 2c       	mov	r15, r1
    4d9e:	0e 15       	cp	r16, r14
    4da0:	1f 05       	cpc	r17, r15
    4da2:	84 f4       	brge	.+32     	; 0x4dc4 <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    4da4:	0f 5f       	subi	r16, 0xFF	; 255
    4da6:	1f 4f       	sbci	r17, 0xFF	; 255
    4da8:	0e 15       	cp	r16, r14
    4daa:	1f 05       	cpc	r17, r15
    4dac:	19 f0       	breq	.+6      	; 0x4db4 <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    4dae:	0e 94 cd 48 	call	0x919a	; 0x919a <i2c_readAck>
    4db2:	02 c0       	rjmp	.+4      	; 0x4db8 <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    4db4:	0e 94 e6 48 	call	0x91cc	; 0x91cc <i2c_readNak>
    4db8:	f6 01       	movw	r30, r12
    4dba:	80 83       	st	Z, r24
    4dbc:	ff ef       	ldi	r31, 0xFF	; 255
    4dbe:	cf 1a       	sub	r12, r31
    4dc0:	df 0a       	sbc	r13, r31
    4dc2:	ed cf       	rjmp	.-38     	; 0x4d9e <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    4dc4:	0f 90       	pop	r0
    4dc6:	0f 90       	pop	r0
    4dc8:	0f 90       	pop	r0
    4dca:	df 91       	pop	r29
    4dcc:	cf 91       	pop	r28
    4dce:	1f 91       	pop	r17
    4dd0:	0f 91       	pop	r16
    4dd2:	ff 90       	pop	r15
    4dd4:	ef 90       	pop	r14
    4dd6:	df 90       	pop	r13
    4dd8:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    4dda:	0c 94 9e 48 	jmp	0x913c	; 0x913c <i2c_stop>

00004dde <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    4dde:	4f 92       	push	r4
    4de0:	5f 92       	push	r5
    4de2:	6f 92       	push	r6
    4de4:	7f 92       	push	r7
    4de6:	8f 92       	push	r8
    4de8:	9f 92       	push	r9
    4dea:	af 92       	push	r10
    4dec:	bf 92       	push	r11
    4dee:	cf 92       	push	r12
    4df0:	df 92       	push	r13
    4df2:	ef 92       	push	r14
    4df4:	ff 92       	push	r15
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
    4dfa:	cd b7       	in	r28, 0x3d	; 61
    4dfc:	de b7       	in	r29, 0x3e	; 62
    4dfe:	28 97       	sbiw	r28, 0x08	; 8
    4e00:	0f b6       	in	r0, 0x3f	; 63
    4e02:	f8 94       	cli
    4e04:	de bf       	out	0x3e, r29	; 62
    4e06:	0f be       	out	0x3f, r0	; 63
    4e08:	cd bf       	out	0x3d, r28	; 61
    4e0a:	6b 01       	movw	r12, r22
    4e0c:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4e0e:	80 90 b0 05 	lds	r8, 0x05B0
    4e12:	90 90 b1 05 	lds	r9, 0x05B1
    4e16:	a0 90 b2 05 	lds	r10, 0x05B2
    4e1a:	b0 90 b3 05 	lds	r11, 0x05B3
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    4e1e:	9b 01       	movw	r18, r22
    4e20:	ac 01       	movw	r20, r24
    4e22:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    4e26:	20 e0       	ldi	r18, 0x00	; 0
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	40 e0       	ldi	r20, 0x00	; 0
    4e2c:	5f e3       	ldi	r21, 0x3F	; 63
    4e2e:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    4e32:	9b 01       	movw	r18, r22
    4e34:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    4e36:	60 e0       	ldi	r22, 0x00	; 0
    4e38:	70 e0       	ldi	r23, 0x00	; 0
    4e3a:	80 e8       	ldi	r24, 0x80	; 128
    4e3c:	9f e3       	ldi	r25, 0x3F	; 63
    4e3e:	0e 94 89 49 	call	0x9312	; 0x9312 <__subsf3>
    4e42:	69 83       	std	Y+1, r22	; 0x01
    4e44:	7a 83       	std	Y+2, r23	; 0x02
    4e46:	8b 83       	std	Y+3, r24	; 0x03
    4e48:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4e4a:	40 90 b4 05 	lds	r4, 0x05B4
    4e4e:	50 90 b5 05 	lds	r5, 0x05B5
    4e52:	60 90 b6 05 	lds	r6, 0x05B6
    4e56:	70 90 b7 05 	lds	r7, 0x05B7
    4e5a:	9b 01       	movw	r18, r22
    4e5c:	ac 01       	movw	r20, r24
    4e5e:	c5 01       	movw	r24, r10
    4e60:	b4 01       	movw	r22, r8
    4e62:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    4e66:	6d 83       	std	Y+5, r22	; 0x05
    4e68:	7e 83       	std	Y+6, r23	; 0x06
    4e6a:	8f 83       	std	Y+7, r24	; 0x07
    4e6c:	98 87       	std	Y+8, r25	; 0x08
    4e6e:	a7 01       	movw	r20, r14
    4e70:	96 01       	movw	r18, r12
    4e72:	c3 01       	movw	r24, r6
    4e74:	b2 01       	movw	r22, r4
    4e76:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    4e7a:	9b 01       	movw	r18, r22
    4e7c:	ac 01       	movw	r20, r24
    4e7e:	6d 81       	ldd	r22, Y+5	; 0x05
    4e80:	7e 81       	ldd	r23, Y+6	; 0x06
    4e82:	8f 81       	ldd	r24, Y+7	; 0x07
    4e84:	98 85       	ldd	r25, Y+8	; 0x08
    4e86:	0e 94 89 49 	call	0x9312	; 0x9312 <__subsf3>
    4e8a:	60 93 9c 05 	sts	0x059C, r22
    4e8e:	70 93 9d 05 	sts	0x059D, r23
    4e92:	80 93 9e 05 	sts	0x059E, r24
    4e96:	90 93 9f 05 	sts	0x059F, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    4e9a:	a7 01       	movw	r20, r14
    4e9c:	96 01       	movw	r18, r12
    4e9e:	c5 01       	movw	r24, r10
    4ea0:	b4 01       	movw	r22, r8
    4ea2:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    4ea6:	6b 01       	movw	r12, r22
    4ea8:	7c 01       	movw	r14, r24
    4eaa:	29 81       	ldd	r18, Y+1	; 0x01
    4eac:	3a 81       	ldd	r19, Y+2	; 0x02
    4eae:	4b 81       	ldd	r20, Y+3	; 0x03
    4eb0:	5c 81       	ldd	r21, Y+4	; 0x04
    4eb2:	c3 01       	movw	r24, r6
    4eb4:	b2 01       	movw	r22, r4
    4eb6:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    4eba:	9b 01       	movw	r18, r22
    4ebc:	ac 01       	movw	r20, r24
    4ebe:	c7 01       	movw	r24, r14
    4ec0:	b6 01       	movw	r22, r12
    4ec2:	0e 94 8a 49 	call	0x9314	; 0x9314 <__addsf3>
    4ec6:	60 93 80 05 	sts	0x0580, r22
    4eca:	70 93 81 05 	sts	0x0581, r23
    4ece:	80 93 82 05 	sts	0x0582, r24
    4ed2:	90 93 83 05 	sts	0x0583, r25
}
    4ed6:	28 96       	adiw	r28, 0x08	; 8
    4ed8:	0f b6       	in	r0, 0x3f	; 63
    4eda:	f8 94       	cli
    4edc:	de bf       	out	0x3e, r29	; 62
    4ede:	0f be       	out	0x3f, r0	; 63
    4ee0:	cd bf       	out	0x3d, r28	; 61
    4ee2:	df 91       	pop	r29
    4ee4:	cf 91       	pop	r28
    4ee6:	ff 90       	pop	r15
    4ee8:	ef 90       	pop	r14
    4eea:	df 90       	pop	r13
    4eec:	cf 90       	pop	r12
    4eee:	bf 90       	pop	r11
    4ef0:	af 90       	pop	r10
    4ef2:	9f 90       	pop	r9
    4ef4:	8f 90       	pop	r8
    4ef6:	7f 90       	pop	r7
    4ef8:	6f 90       	pop	r6
    4efa:	5f 90       	pop	r5
    4efc:	4f 90       	pop	r4
    4efe:	08 95       	ret

00004f00 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    4f00:	cf 92       	push	r12
    4f02:	df 92       	push	r13
    4f04:	ef 92       	push	r14
    4f06:	ff 92       	push	r15
    4f08:	69 01       	movw	r12, r18
    4f0a:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    4f0c:	25 ef       	ldi	r18, 0xF5	; 245
    4f0e:	31 ea       	ldi	r19, 0xA1	; 161
    4f10:	4b e8       	ldi	r20, 0x8B	; 139
    4f12:	5c e3       	ldi	r21, 0x3C	; 60
    4f14:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    4f18:	a7 01       	movw	r20, r14
    4f1a:	96 01       	movw	r18, r12
    4f1c:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    4f20:	6b 01       	movw	r12, r22
    4f22:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    4f24:	26 ea       	ldi	r18, 0xA6	; 166
    4f26:	3a e0       	ldi	r19, 0x0A	; 10
    4f28:	46 e8       	ldi	r20, 0x86	; 134
    4f2a:	5e e3       	ldi	r21, 0x3E	; 62
    4f2c:	0e 94 3d 4b 	call	0x967a	; 0x967a <__gesf2>
    4f30:	18 16       	cp	r1, r24
    4f32:	9c f0       	brlt	.+38     	; 0x4f5a <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    4f34:	26 ea       	ldi	r18, 0xA6	; 166
    4f36:	3a e0       	ldi	r19, 0x0A	; 10
    4f38:	46 e8       	ldi	r20, 0x86	; 134
    4f3a:	5e eb       	ldi	r21, 0xBE	; 190
    4f3c:	c7 01       	movw	r24, r14
    4f3e:	b6 01       	movw	r22, r12
    4f40:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__cmpsf2>
    4f44:	87 ff       	sbrs	r24, 7
    4f46:	11 c0       	rjmp	.+34     	; 0x4f6a <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    4f48:	86 ea       	ldi	r24, 0xA6	; 166
    4f4a:	c8 2e       	mov	r12, r24
    4f4c:	8a e0       	ldi	r24, 0x0A	; 10
    4f4e:	d8 2e       	mov	r13, r24
    4f50:	86 e8       	ldi	r24, 0x86	; 134
    4f52:	e8 2e       	mov	r14, r24
    4f54:	8e eb       	ldi	r24, 0xBE	; 190
    4f56:	f8 2e       	mov	r15, r24
    4f58:	08 c0       	rjmp	.+16     	; 0x4f6a <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    4f5a:	96 ea       	ldi	r25, 0xA6	; 166
    4f5c:	c9 2e       	mov	r12, r25
    4f5e:	9a e0       	ldi	r25, 0x0A	; 10
    4f60:	d9 2e       	mov	r13, r25
    4f62:	96 e8       	ldi	r25, 0x86	; 134
    4f64:	e9 2e       	mov	r14, r25
    4f66:	9e e3       	ldi	r25, 0x3E	; 62
    4f68:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    4f6a:	c7 01       	movw	r24, r14
    4f6c:	b6 01       	movw	r22, r12
    4f6e:	ff 90       	pop	r15
    4f70:	ef 90       	pop	r14
    4f72:	df 90       	pop	r13
    4f74:	cf 90       	pop	r12
    4f76:	08 95       	ret

00004f78 <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    4f78:	8f 92       	push	r8
    4f7a:	9f 92       	push	r9
    4f7c:	af 92       	push	r10
    4f7e:	bf 92       	push	r11
    4f80:	cf 92       	push	r12
    4f82:	df 92       	push	r13
    4f84:	ef 92       	push	r14
    4f86:	ff 92       	push	r15
    4f88:	0f 93       	push	r16
    4f8a:	1f 93       	push	r17
    4f8c:	6b 01       	movw	r12, r22
    4f8e:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    4f90:	60 91 90 05 	lds	r22, 0x0590
    4f94:	70 91 91 05 	lds	r23, 0x0591
    4f98:	80 91 92 05 	lds	r24, 0x0592
    4f9c:	90 91 93 05 	lds	r25, 0x0593
    4fa0:	a7 01       	movw	r20, r14
    4fa2:	96 01       	movw	r18, r12
    4fa4:	0e 94 80 27 	call	0x4f00	; 0x4f00 <thetascale>
	VectorA = VectorY;
    4fa8:	00 91 26 05 	lds	r16, 0x0526
    4fac:	10 91 27 05 	lds	r17, 0x0527
    4fb0:	20 91 28 05 	lds	r18, 0x0528
    4fb4:	30 91 29 05 	lds	r19, 0x0529
    4fb8:	00 93 b0 05 	sts	0x05B0, r16
    4fbc:	10 93 b1 05 	sts	0x05B1, r17
    4fc0:	20 93 b2 05 	sts	0x05B2, r18
    4fc4:	30 93 b3 05 	sts	0x05B3, r19
	VectorB = VectorZ;
    4fc8:	00 91 00 05 	lds	r16, 0x0500
    4fcc:	10 91 01 05 	lds	r17, 0x0501
    4fd0:	20 91 02 05 	lds	r18, 0x0502
    4fd4:	30 91 03 05 	lds	r19, 0x0503
    4fd8:	00 93 b4 05 	sts	0x05B4, r16
    4fdc:	10 93 b5 05 	sts	0x05B5, r17
    4fe0:	20 93 b6 05 	sts	0x05B6, r18
    4fe4:	30 93 b7 05 	sts	0x05B7, r19
	RotateVector(theta);
    4fe8:	0e 94 ef 26 	call	0x4dde	; 0x4dde <RotateVector>
	VectorY = VectorNewA;
    4fec:	80 91 9c 05 	lds	r24, 0x059C
    4ff0:	90 91 9d 05 	lds	r25, 0x059D
    4ff4:	a0 91 9e 05 	lds	r26, 0x059E
    4ff8:	b0 91 9f 05 	lds	r27, 0x059F
    4ffc:	80 93 26 05 	sts	0x0526, r24
    5000:	90 93 27 05 	sts	0x0527, r25
    5004:	a0 93 28 05 	sts	0x0528, r26
    5008:	b0 93 29 05 	sts	0x0529, r27
	VectorZ = VectorNewB;
    500c:	80 90 80 05 	lds	r8, 0x0580
    5010:	90 90 81 05 	lds	r9, 0x0581
    5014:	a0 90 82 05 	lds	r10, 0x0582
    5018:	b0 90 83 05 	lds	r11, 0x0583
    501c:	80 92 00 05 	sts	0x0500, r8
    5020:	90 92 01 05 	sts	0x0501, r9
    5024:	a0 92 02 05 	sts	0x0502, r10
    5028:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    502c:	60 91 94 05 	lds	r22, 0x0594
    5030:	70 91 95 05 	lds	r23, 0x0595
    5034:	80 91 96 05 	lds	r24, 0x0596
    5038:	90 91 97 05 	lds	r25, 0x0597
    503c:	a7 01       	movw	r20, r14
    503e:	96 01       	movw	r18, r12
    5040:	0e 94 80 27 	call	0x4f00	; 0x4f00 <thetascale>
	VectorA = VectorX;
    5044:	00 91 2a 05 	lds	r16, 0x052A
    5048:	10 91 2b 05 	lds	r17, 0x052B
    504c:	20 91 2c 05 	lds	r18, 0x052C
    5050:	30 91 2d 05 	lds	r19, 0x052D
    5054:	00 93 b0 05 	sts	0x05B0, r16
    5058:	10 93 b1 05 	sts	0x05B1, r17
    505c:	20 93 b2 05 	sts	0x05B2, r18
    5060:	30 93 b3 05 	sts	0x05B3, r19
	VectorB = VectorZ;
    5064:	80 92 b4 05 	sts	0x05B4, r8
    5068:	90 92 b5 05 	sts	0x05B5, r9
    506c:	a0 92 b6 05 	sts	0x05B6, r10
    5070:	b0 92 b7 05 	sts	0x05B7, r11
	RotateVector(theta);
    5074:	0e 94 ef 26 	call	0x4dde	; 0x4dde <RotateVector>
	VectorX = VectorNewA;
    5078:	80 90 9c 05 	lds	r8, 0x059C
    507c:	90 90 9d 05 	lds	r9, 0x059D
    5080:	a0 90 9e 05 	lds	r10, 0x059E
    5084:	b0 90 9f 05 	lds	r11, 0x059F
    5088:	80 92 2a 05 	sts	0x052A, r8
    508c:	90 92 2b 05 	sts	0x052B, r9
    5090:	a0 92 2c 05 	sts	0x052C, r10
    5094:	b0 92 2d 05 	sts	0x052D, r11
	VectorZ = VectorNewB;
    5098:	80 91 80 05 	lds	r24, 0x0580
    509c:	90 91 81 05 	lds	r25, 0x0581
    50a0:	a0 91 82 05 	lds	r26, 0x0582
    50a4:	b0 91 83 05 	lds	r27, 0x0583
    50a8:	80 93 00 05 	sts	0x0500, r24
    50ac:	90 93 01 05 	sts	0x0501, r25
    50b0:	a0 93 02 05 	sts	0x0502, r26
    50b4:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    50b8:	60 91 7e 05 	lds	r22, 0x057E
    50bc:	70 91 7f 05 	lds	r23, 0x057F
    50c0:	88 27       	eor	r24, r24
    50c2:	77 fd       	sbrc	r23, 7
    50c4:	80 95       	com	r24
    50c6:	98 2f       	mov	r25, r24
    50c8:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    50cc:	a7 01       	movw	r20, r14
    50ce:	96 01       	movw	r18, r12
    50d0:	0e 94 80 27 	call	0x4f00	; 0x4f00 <thetascale>
	VectorA = VectorX;
    50d4:	80 92 b0 05 	sts	0x05B0, r8
    50d8:	90 92 b1 05 	sts	0x05B1, r9
    50dc:	a0 92 b2 05 	sts	0x05B2, r10
    50e0:	b0 92 b3 05 	sts	0x05B3, r11
	VectorB = VectorY;
    50e4:	c0 90 26 05 	lds	r12, 0x0526
    50e8:	d0 90 27 05 	lds	r13, 0x0527
    50ec:	e0 90 28 05 	lds	r14, 0x0528
    50f0:	f0 90 29 05 	lds	r15, 0x0529
    50f4:	c0 92 b4 05 	sts	0x05B4, r12
    50f8:	d0 92 b5 05 	sts	0x05B5, r13
    50fc:	e0 92 b6 05 	sts	0x05B6, r14
    5100:	f0 92 b7 05 	sts	0x05B7, r15
	RotateVector(theta);
    5104:	0e 94 ef 26 	call	0x4dde	; 0x4dde <RotateVector>
	VectorX = VectorNewA;
    5108:	80 91 9c 05 	lds	r24, 0x059C
    510c:	90 91 9d 05 	lds	r25, 0x059D
    5110:	a0 91 9e 05 	lds	r26, 0x059E
    5114:	b0 91 9f 05 	lds	r27, 0x059F
    5118:	80 93 2a 05 	sts	0x052A, r24
    511c:	90 93 2b 05 	sts	0x052B, r25
    5120:	a0 93 2c 05 	sts	0x052C, r26
    5124:	b0 93 2d 05 	sts	0x052D, r27
	VectorY = VectorNewB;
    5128:	80 91 80 05 	lds	r24, 0x0580
    512c:	90 91 81 05 	lds	r25, 0x0581
    5130:	a0 91 82 05 	lds	r26, 0x0582
    5134:	b0 91 83 05 	lds	r27, 0x0583
    5138:	80 93 26 05 	sts	0x0526, r24
    513c:	90 93 27 05 	sts	0x0527, r25
    5140:	a0 93 28 05 	sts	0x0528, r26
    5144:	b0 93 29 05 	sts	0x0529, r27
}
    5148:	1f 91       	pop	r17
    514a:	0f 91       	pop	r16
    514c:	ff 90       	pop	r15
    514e:	ef 90       	pop	r14
    5150:	df 90       	pop	r13
    5152:	cf 90       	pop	r12
    5154:	bf 90       	pop	r11
    5156:	af 90       	pop	r10
    5158:	9f 90       	pop	r9
    515a:	8f 90       	pop	r8
    515c:	08 95       	ret

0000515e <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    515e:	cf 92       	push	r12
    5160:	df 92       	push	r13
    5162:	ef 92       	push	r14
    5164:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    5166:	20 e0       	ldi	r18, 0x00	; 0
    5168:	30 e0       	ldi	r19, 0x00	; 0
    516a:	44 eb       	ldi	r20, 0xB4	; 180
    516c:	52 e4       	ldi	r21, 0x42	; 66
    516e:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    5172:	6b 01       	movw	r12, r22
    5174:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    5176:	20 e0       	ldi	r18, 0x00	; 0
    5178:	30 e0       	ldi	r19, 0x00	; 0
    517a:	a9 01       	movw	r20, r18
    517c:	60 91 00 05 	lds	r22, 0x0500
    5180:	70 91 01 05 	lds	r23, 0x0501
    5184:	80 91 02 05 	lds	r24, 0x0502
    5188:	90 91 03 05 	lds	r25, 0x0503
    518c:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__cmpsf2>
    5190:	87 ff       	sbrs	r24, 7
    5192:	18 c0       	rjmp	.+48     	; 0x51c4 <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	a9 01       	movw	r20, r18
    519a:	c7 01       	movw	r24, r14
    519c:	b6 01       	movw	r22, r12
    519e:	0e 94 3d 4b 	call	0x967a	; 0x967a <__gesf2>
		{
			temp = 180 - temp;
    51a2:	a7 01       	movw	r20, r14
    51a4:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    51a6:	18 16       	cp	r1, r24
    51a8:	2c f4       	brge	.+10     	; 0x51b4 <ext2+0x56>
		{
			temp = 180 - temp;
    51aa:	60 e0       	ldi	r22, 0x00	; 0
    51ac:	70 e0       	ldi	r23, 0x00	; 0
    51ae:	84 e3       	ldi	r24, 0x34	; 52
    51b0:	93 e4       	ldi	r25, 0x43	; 67
    51b2:	04 c0       	rjmp	.+8      	; 0x51bc <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    51b4:	60 e0       	ldi	r22, 0x00	; 0
    51b6:	70 e0       	ldi	r23, 0x00	; 0
    51b8:	84 e3       	ldi	r24, 0x34	; 52
    51ba:	93 ec       	ldi	r25, 0xC3	; 195
    51bc:	0e 94 89 49 	call	0x9312	; 0x9312 <__subsf3>
    51c0:	6b 01       	movw	r12, r22
    51c2:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    51c4:	c7 01       	movw	r24, r14
    51c6:	b6 01       	movw	r22, r12
    51c8:	ff 90       	pop	r15
    51ca:	ef 90       	pop	r14
    51cc:	df 90       	pop	r13
    51ce:	cf 90       	pop	r12
    51d0:	08 95       	ret

000051d2 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    51d2:	60 91 2a 05 	lds	r22, 0x052A
    51d6:	70 91 2b 05 	lds	r23, 0x052B
    51da:	80 91 2c 05 	lds	r24, 0x052C
    51de:	90 91 2d 05 	lds	r25, 0x052D
    51e2:	0e 94 af 28 	call	0x515e	; 0x515e <ext2>
    51e6:	60 93 ac 05 	sts	0x05AC, r22
    51ea:	70 93 ad 05 	sts	0x05AD, r23
    51ee:	80 93 ae 05 	sts	0x05AE, r24
    51f2:	90 93 af 05 	sts	0x05AF, r25
	EulerAnglePitch = ext2(VectorY);
    51f6:	60 91 26 05 	lds	r22, 0x0526
    51fa:	70 91 27 05 	lds	r23, 0x0527
    51fe:	80 91 28 05 	lds	r24, 0x0528
    5202:	90 91 29 05 	lds	r25, 0x0529
    5206:	0e 94 af 28 	call	0x515e	; 0x515e <ext2>
    520a:	60 93 84 05 	sts	0x0584, r22
    520e:	70 93 85 05 	sts	0x0585, r23
    5212:	80 93 86 05 	sts	0x0586, r24
    5216:	90 93 87 05 	sts	0x0587, r25
    521a:	08 95       	ret

0000521c <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    521c:	4f 92       	push	r4
    521e:	5f 92       	push	r5
    5220:	6f 92       	push	r6
    5222:	7f 92       	push	r7
    5224:	8f 92       	push	r8
    5226:	9f 92       	push	r9
    5228:	af 92       	push	r10
    522a:	bf 92       	push	r11
    522c:	cf 92       	push	r12
    522e:	df 92       	push	r13
    5230:	ef 92       	push	r14
    5232:	ff 92       	push	r15
    5234:	0f 93       	push	r16
    5236:	1f 93       	push	r17
    5238:	cf 93       	push	r28
    523a:	df 93       	push	r29
    523c:	cd b7       	in	r28, 0x3d	; 61
    523e:	de b7       	in	r29, 0x3e	; 62
    5240:	60 97       	sbiw	r28, 0x10	; 16
    5242:	0f b6       	in	r0, 0x3f	; 63
    5244:	f8 94       	cli
    5246:	de bf       	out	0x3e, r29	; 62
    5248:	0f be       	out	0x3f, r0	; 63
    524a:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    524c:	0e 94 8b 4a 	call	0x9516	; 0x9516 <__floatunsisf>
    5250:	69 83       	std	Y+1, r22	; 0x01
    5252:	7a 83       	std	Y+2, r23	; 0x02
    5254:	8b 83       	std	Y+3, r24	; 0x03
    5256:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    5258:	20 e8       	ldi	r18, 0x80	; 128
    525a:	36 e9       	ldi	r19, 0x96	; 150
    525c:	48 e1       	ldi	r20, 0x18	; 24
    525e:	5a e4       	ldi	r21, 0x4A	; 74
    5260:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <__divsf3>
    5264:	6d 87       	std	Y+13, r22	; 0x0d
    5266:	7e 87       	std	Y+14, r23	; 0x0e
    5268:	8f 87       	std	Y+15, r24	; 0x0f
    526a:	98 8b       	std	Y+16, r25	; 0x10
	//************************************************************
	// Acc LPF
	//************************************************************	

	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    526c:	80 91 e2 05 	lds	r24, 0x05E2
    5270:	60 91 46 06 	lds	r22, 0x0646
    5274:	82 30       	cpi	r24, 0x02	; 2
    5276:	39 f0       	breq	.+14     	; 0x5286 <imu_update+0x6a>
	{
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    5278:	84 e0       	ldi	r24, 0x04	; 4
    527a:	68 02       	muls	r22, r24
    527c:	b0 01       	movw	r22, r0
    527e:	11 24       	eor	r1, r1
    5280:	67 5b       	subi	r22, 0xB7	; 183
    5282:	77 4e       	sbci	r23, 0xE7	; 231
    5284:	06 c0       	rjmp	.+12     	; 0x5292 <imu_update+0x76>
	}
	else
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
    5286:	94 e0       	ldi	r25, 0x04	; 4
    5288:	69 02       	muls	r22, r25
    528a:	b0 01       	movw	r22, r0
    528c:	11 24       	eor	r1, r1
    528e:	67 5d       	subi	r22, 0xD7	; 215
    5290:	77 4e       	sbci	r23, 0xE7	; 231
    5292:	44 e0       	ldi	r20, 0x04	; 4
    5294:	50 e0       	ldi	r21, 0x00	; 0
    5296:	ce 01       	movw	r24, r28
    5298:	01 96       	adiw	r24, 0x01	; 1
    529a:	0e 94 44 4c 	call	0x9888	; 0x9888 <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    529e:	50 90 46 06 	lds	r5, 0x0646
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    52a2:	c9 80       	ldd	r12, Y+1	; 0x01
    52a4:	da 80       	ldd	r13, Y+2	; 0x02
    52a6:	eb 80       	ldd	r14, Y+3	; 0x03
    52a8:	fc 80       	ldd	r15, Y+4	; 0x04
    52aa:	2e e3       	ldi	r18, 0x3E	; 62
    52ac:	62 2e       	mov	r6, r18
    52ae:	25 e0       	ldi	r18, 0x05	; 5
    52b0:	72 2e       	mov	r7, r18
    52b2:	00 ea       	ldi	r16, 0xA0	; 160
    52b4:	15 e0       	ldi	r17, 0x05	; 5
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    52b6:	d3 01       	movw	r26, r6
    52b8:	6d 91       	ld	r22, X+
    52ba:	7d 91       	ld	r23, X+
    52bc:	3d 01       	movw	r6, r26
    52be:	88 27       	eor	r24, r24
    52c0:	77 fd       	sbrc	r23, 7
    52c2:	80 95       	com	r24
    52c4:	98 2f       	mov	r25, r24
    52c6:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    52ca:	4b 01       	movw	r8, r22
    52cc:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    52ce:	b7 e0       	ldi	r27, 0x07	; 7
    52d0:	5b 16       	cp	r5, r27
    52d2:	f1 f0       	breq	.+60     	; 0x5310 <imu_update+0xf4>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    52d4:	20 e0       	ldi	r18, 0x00	; 0
    52d6:	30 e0       	ldi	r19, 0x00	; 0
    52d8:	40 e8       	ldi	r20, 0x80	; 128
    52da:	5f e3       	ldi	r21, 0x3F	; 63
    52dc:	c7 01       	movw	r24, r14
    52de:	b6 01       	movw	r22, r12
    52e0:	0e 94 89 49 	call	0x9312	; 0x9312 <__subsf3>
    52e4:	f8 01       	movw	r30, r16
    52e6:	20 81       	ld	r18, Z
    52e8:	31 81       	ldd	r19, Z+1	; 0x01
    52ea:	42 81       	ldd	r20, Z+2	; 0x02
    52ec:	53 81       	ldd	r21, Z+3	; 0x03
    52ee:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    52f2:	a5 01       	movw	r20, r10
    52f4:	94 01       	movw	r18, r8
    52f6:	0e 94 89 49 	call	0x9312	; 0x9312 <__subsf3>
    52fa:	a7 01       	movw	r20, r14
    52fc:	96 01       	movw	r18, r12
    52fe:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <__divsf3>
    5302:	d8 01       	movw	r26, r16
    5304:	6d 93       	st	X+, r22
    5306:	7d 93       	st	X+, r23
    5308:	8d 93       	st	X+, r24
    530a:	9c 93       	st	X, r25
    530c:	13 97       	sbiw	r26, 0x03	; 3
    530e:	09 c0       	rjmp	.+18     	; 0x5322 <imu_update+0x106>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    5310:	b7 fa       	bst	r11, 7
    5312:	b0 94       	com	r11
    5314:	b7 f8       	bld	r11, 7
    5316:	b0 94       	com	r11
    5318:	f8 01       	movw	r30, r16
    531a:	80 82       	st	Z, r8
    531c:	91 82       	std	Z+1, r9	; 0x01
    531e:	a2 82       	std	Z+2, r10	; 0x02
    5320:	b3 82       	std	Z+3, r11	; 0x03
    5322:	0c 5f       	subi	r16, 0xFC	; 252
    5324:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    5326:	f4 e4       	ldi	r31, 0x44	; 68
    5328:	6f 16       	cp	r6, r31
    532a:	f5 e0       	ldi	r31, 0x05	; 5
    532c:	7f 06       	cpc	r7, r31
    532e:	19 f6       	brne	.-122    	; 0x52b6 <imu_update+0x9a>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    5330:	23 ec       	ldi	r18, 0xC3	; 195
    5332:	35 ef       	ldi	r19, 0xF5	; 245
    5334:	48 e2       	ldi	r20, 0x28	; 40
    5336:	5f e3       	ldi	r21, 0x3F	; 63
    5338:	60 91 a0 05 	lds	r22, 0x05A0
    533c:	70 91 a1 05 	lds	r23, 0x05A1
    5340:	80 91 a2 05 	lds	r24, 0x05A2
    5344:	90 91 a3 05 	lds	r25, 0x05A3
    5348:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    534c:	6d 83       	std	Y+5, r22	; 0x05
    534e:	7e 83       	std	Y+6, r23	; 0x06
    5350:	8f 83       	std	Y+7, r24	; 0x07
    5352:	98 87       	std	Y+8, r25	; 0x08
    5354:	60 93 88 05 	sts	0x0588, r22
    5358:	70 93 89 05 	sts	0x0589, r23
    535c:	80 93 8a 05 	sts	0x058A, r24
    5360:	90 93 8b 05 	sts	0x058B, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    5364:	23 ec       	ldi	r18, 0xC3	; 195
    5366:	35 ef       	ldi	r19, 0xF5	; 245
    5368:	48 e2       	ldi	r20, 0x28	; 40
    536a:	5f e3       	ldi	r21, 0x3F	; 63
    536c:	60 91 a4 05 	lds	r22, 0x05A4
    5370:	70 91 a5 05 	lds	r23, 0x05A5
    5374:	80 91 a6 05 	lds	r24, 0x05A6
    5378:	90 91 a7 05 	lds	r25, 0x05A7
    537c:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    5380:	69 87       	std	Y+9, r22	; 0x09
    5382:	7a 87       	std	Y+10, r23	; 0x0a
    5384:	8b 87       	std	Y+11, r24	; 0x0b
    5386:	9c 87       	std	Y+12, r25	; 0x0c
    5388:	60 93 8c 05 	sts	0x058C, r22
    538c:	70 93 8d 05 	sts	0x058D, r23
    5390:	80 93 8e 05 	sts	0x058E, r24
    5394:	90 93 8f 05 	sts	0x058F, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    5398:	60 91 7a 05 	lds	r22, 0x057A
    539c:	70 91 7b 05 	lds	r23, 0x057B
    53a0:	88 27       	eor	r24, r24
    53a2:	77 fd       	sbrc	r23, 7
    53a4:	80 95       	com	r24
    53a6:	98 2f       	mov	r25, r24
    53a8:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    53ac:	2b 01       	movw	r4, r22
    53ae:	3c 01       	movw	r6, r24
    53b0:	60 93 94 05 	sts	0x0594, r22
    53b4:	70 93 95 05 	sts	0x0595, r23
    53b8:	80 93 96 05 	sts	0x0596, r24
    53bc:	90 93 97 05 	sts	0x0597, r25
	GyroPitchVC = gyroADC[PITCH];
    53c0:	60 91 7c 05 	lds	r22, 0x057C
    53c4:	70 91 7d 05 	lds	r23, 0x057D
    53c8:	88 27       	eor	r24, r24
    53ca:	77 fd       	sbrc	r23, 7
    53cc:	80 95       	com	r24
    53ce:	98 2f       	mov	r25, r24
    53d0:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    53d4:	6b 01       	movw	r12, r22
    53d6:	7c 01       	movw	r14, r24
    53d8:	60 93 90 05 	sts	0x0590, r22
    53dc:	70 93 91 05 	sts	0x0591, r23
    53e0:	80 93 92 05 	sts	0x0592, r24
    53e4:	90 93 93 05 	sts	0x0593, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    53e8:	20 91 3e 05 	lds	r18, 0x053E
    53ec:	30 91 3f 05 	lds	r19, 0x053F
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    53f0:	40 91 40 05 	lds	r20, 0x0540
    53f4:	50 91 41 05 	lds	r21, 0x0541
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    53f8:	e0 91 42 05 	lds	r30, 0x0542
    53fc:	f0 91 43 05 	lds	r31, 0x0543
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    5400:	44 9f       	mul	r20, r20
    5402:	40 01       	movw	r8, r0
    5404:	45 9f       	mul	r20, r21
    5406:	90 0c       	add	r9, r0
    5408:	90 0c       	add	r9, r0
    540a:	11 24       	eor	r1, r1
    540c:	b4 01       	movw	r22, r8
    540e:	88 27       	eor	r24, r24
    5410:	77 fd       	sbrc	r23, 7
    5412:	80 95       	com	r24
    5414:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    5416:	22 9f       	mul	r18, r18
    5418:	a0 01       	movw	r20, r0
    541a:	23 9f       	mul	r18, r19
    541c:	50 0d       	add	r21, r0
    541e:	50 0d       	add	r21, r0
    5420:	11 24       	eor	r1, r1
    5422:	8a 01       	movw	r16, r20
    5424:	22 27       	eor	r18, r18
    5426:	17 fd       	sbrc	r17, 7
    5428:	20 95       	com	r18
    542a:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    542c:	60 0f       	add	r22, r16
    542e:	71 1f       	adc	r23, r17
    5430:	82 1f       	adc	r24, r18
    5432:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    5434:	ee 9f       	mul	r30, r30
    5436:	90 01       	movw	r18, r0
    5438:	ef 9f       	mul	r30, r31
    543a:	30 0d       	add	r19, r0
    543c:	30 0d       	add	r19, r0
    543e:	11 24       	eor	r1, r1
    5440:	89 01       	movw	r16, r18
    5442:	22 27       	eor	r18, r18
    5444:	17 fd       	sbrc	r17, 7
    5446:	20 95       	com	r18
    5448:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    544a:	60 0f       	add	r22, r16
    544c:	71 1f       	adc	r23, r17
    544e:	82 1f       	adc	r24, r18
    5450:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    5452:	0e 94 8b 4a 	call	0x9516	; 0x9516 <__floatunsisf>
    5456:	4b 01       	movw	r8, r22
    5458:	5c 01       	movw	r10, r24
    545a:	20 e0       	ldi	r18, 0x00	; 0
    545c:	34 ef       	ldi	r19, 0xF4	; 244
    545e:	48 e3       	ldi	r20, 0x38	; 56
    5460:	56 e4       	ldi	r21, 0x46	; 70
    5462:	0e 94 3d 4b 	call	0x967a	; 0x967a <__gesf2>
    5466:	18 16       	cp	r1, r24
    5468:	0c f0       	brlt	.+2      	; 0x546c <imu_update+0x250>
    546a:	6f c0       	rjmp	.+222    	; 0x554a <imu_update+0x32e>
    546c:	20 e0       	ldi	r18, 0x00	; 0
    546e:	38 e4       	ldi	r19, 0x48	; 72
    5470:	49 ea       	ldi	r20, 0xA9	; 169
    5472:	56 e4       	ldi	r21, 0x46	; 70
    5474:	c5 01       	movw	r24, r10
    5476:	b4 01       	movw	r22, r8
    5478:	0e 94 ee 49 	call	0x93dc	; 0x93dc <__cmpsf2>
    547c:	87 ff       	sbrs	r24, 7
    547e:	65 c0       	rjmp	.+202    	; 0x554a <imu_update+0x32e>
    5480:	20 e0       	ldi	r18, 0x00	; 0
    5482:	30 e0       	ldi	r19, 0x00	; 0
    5484:	40 e0       	ldi	r20, 0x00	; 0
    5486:	5f e3       	ldi	r21, 0x3F	; 63
    5488:	60 91 00 05 	lds	r22, 0x0500
    548c:	70 91 01 05 	lds	r23, 0x0501
    5490:	80 91 02 05 	lds	r24, 0x0502
    5494:	90 91 03 05 	lds	r25, 0x0503
    5498:	0e 94 3d 4b 	call	0x967a	; 0x967a <__gesf2>
    549c:	18 16       	cp	r1, r24
    549e:	0c f0       	brlt	.+2      	; 0x54a2 <imu_update+0x286>
    54a0:	54 c0       	rjmp	.+168    	; 0x554a <imu_update+0x32e>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    54a2:	80 91 48 06 	lds	r24, 0x0648
    54a6:	6b e0       	ldi	r22, 0x0B	; 11
    54a8:	70 e0       	ldi	r23, 0x00	; 0
    54aa:	68 1b       	sub	r22, r24
    54ac:	71 09       	sbc	r23, r1
    54ae:	87 fd       	sbrc	r24, 7
    54b0:	73 95       	inc	r23
    54b2:	88 27       	eor	r24, r24
    54b4:	77 fd       	sbrc	r23, 7
    54b6:	80 95       	com	r24
    54b8:	98 2f       	mov	r25, r24
    54ba:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    54be:	4b 01       	movw	r8, r22
    54c0:	5c 01       	movw	r10, r24
    54c2:	2d 81       	ldd	r18, Y+5	; 0x05
    54c4:	3e 81       	ldd	r19, Y+6	; 0x06
    54c6:	4f 81       	ldd	r20, Y+7	; 0x07
    54c8:	58 85       	ldd	r21, Y+8	; 0x08
    54ca:	60 91 ac 05 	lds	r22, 0x05AC
    54ce:	70 91 ad 05 	lds	r23, 0x05AD
    54d2:	80 91 ae 05 	lds	r24, 0x05AE
    54d6:	90 91 af 05 	lds	r25, 0x05AF
    54da:	0e 94 89 49 	call	0x9312	; 0x9312 <__subsf3>
    54de:	a5 01       	movw	r20, r10
    54e0:	94 01       	movw	r18, r8
    54e2:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <__divsf3>
    54e6:	9b 01       	movw	r18, r22
    54e8:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    54ea:	c3 01       	movw	r24, r6
    54ec:	b2 01       	movw	r22, r4
    54ee:	0e 94 8a 49 	call	0x9314	; 0x9314 <__addsf3>
    54f2:	60 93 94 05 	sts	0x0594, r22
    54f6:	70 93 95 05 	sts	0x0595, r23
    54fa:	80 93 96 05 	sts	0x0596, r24
    54fe:	90 93 97 05 	sts	0x0597, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    5502:	29 85       	ldd	r18, Y+9	; 0x09
    5504:	3a 85       	ldd	r19, Y+10	; 0x0a
    5506:	4b 85       	ldd	r20, Y+11	; 0x0b
    5508:	5c 85       	ldd	r21, Y+12	; 0x0c
    550a:	60 91 84 05 	lds	r22, 0x0584
    550e:	70 91 85 05 	lds	r23, 0x0585
    5512:	80 91 86 05 	lds	r24, 0x0586
    5516:	90 91 87 05 	lds	r25, 0x0587
    551a:	0e 94 89 49 	call	0x9312	; 0x9312 <__subsf3>
    551e:	a5 01       	movw	r20, r10
    5520:	94 01       	movw	r18, r8
    5522:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <__divsf3>
    5526:	9b 01       	movw	r18, r22
    5528:	ac 01       	movw	r20, r24
    552a:	69 83       	std	Y+1, r22	; 0x01
    552c:	7a 83       	std	Y+2, r23	; 0x02
    552e:	8b 83       	std	Y+3, r24	; 0x03
    5530:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    5532:	c7 01       	movw	r24, r14
    5534:	b6 01       	movw	r22, r12
    5536:	0e 94 8a 49 	call	0x9314	; 0x9314 <__addsf3>
    553a:	60 93 90 05 	sts	0x0590, r22
    553e:	70 93 91 05 	sts	0x0591, r23
    5542:	80 93 92 05 	sts	0x0592, r24
    5546:	90 93 93 05 	sts	0x0593, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    554a:	6d 85       	ldd	r22, Y+13	; 0x0d
    554c:	7e 85       	ldd	r23, Y+14	; 0x0e
    554e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5550:	98 89       	ldd	r25, Y+16	; 0x10
    5552:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <Rotate3dVector>
	ExtractEulerAngles();
    5556:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    555a:	20 e0       	ldi	r18, 0x00	; 0
    555c:	30 e0       	ldi	r19, 0x00	; 0
    555e:	48 ec       	ldi	r20, 0xC8	; 200
    5560:	52 ec       	ldi	r21, 0xC2	; 194
    5562:	60 91 ac 05 	lds	r22, 0x05AC
    5566:	70 91 ad 05 	lds	r23, 0x05AD
    556a:	80 91 ae 05 	lds	r24, 0x05AE
    556e:	90 91 af 05 	lds	r25, 0x05AF
    5572:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    5576:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
    557a:	70 93 99 05 	sts	0x0599, r23
    557e:	60 93 98 05 	sts	0x0598, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    5582:	20 e0       	ldi	r18, 0x00	; 0
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	48 ec       	ldi	r20, 0xC8	; 200
    5588:	52 ec       	ldi	r21, 0xC2	; 194
    558a:	60 91 84 05 	lds	r22, 0x0584
    558e:	70 91 85 05 	lds	r23, 0x0585
    5592:	80 91 86 05 	lds	r24, 0x0586
    5596:	90 91 87 05 	lds	r25, 0x0587
    559a:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    559e:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
    55a2:	70 93 9b 05 	sts	0x059B, r23
    55a6:	60 93 9a 05 	sts	0x059A, r22
}
    55aa:	60 96       	adiw	r28, 0x10	; 16
    55ac:	0f b6       	in	r0, 0x3f	; 63
    55ae:	f8 94       	cli
    55b0:	de bf       	out	0x3e, r29	; 62
    55b2:	0f be       	out	0x3f, r0	; 63
    55b4:	cd bf       	out	0x3d, r28	; 61
    55b6:	df 91       	pop	r29
    55b8:	cf 91       	pop	r28
    55ba:	1f 91       	pop	r17
    55bc:	0f 91       	pop	r16
    55be:	ff 90       	pop	r15
    55c0:	ef 90       	pop	r14
    55c2:	df 90       	pop	r13
    55c4:	cf 90       	pop	r12
    55c6:	bf 90       	pop	r11
    55c8:	af 90       	pop	r10
    55ca:	9f 90       	pop	r9
    55cc:	8f 90       	pop	r8
    55ce:	7f 90       	pop	r7
    55d0:	6f 90       	pop	r6
    55d2:	5f 90       	pop	r5
    55d4:	4f 90       	pop	r4
    55d6:	08 95       	ret

000055d8 <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    55d8:	10 92 2a 05 	sts	0x052A, r1
    55dc:	10 92 2b 05 	sts	0x052B, r1
    55e0:	10 92 2c 05 	sts	0x052C, r1
    55e4:	10 92 2d 05 	sts	0x052D, r1
	VectorY = 0;
    55e8:	10 92 26 05 	sts	0x0526, r1
    55ec:	10 92 27 05 	sts	0x0527, r1
    55f0:	10 92 28 05 	sts	0x0528, r1
    55f4:	10 92 29 05 	sts	0x0529, r1
	VectorZ = 1;
    55f8:	80 e0       	ldi	r24, 0x00	; 0
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	a0 e8       	ldi	r26, 0x80	; 128
    55fe:	bf e3       	ldi	r27, 0x3F	; 63
    5600:	80 93 00 05 	sts	0x0500, r24
    5604:	90 93 01 05 	sts	0x0501, r25
    5608:	a0 93 02 05 	sts	0x0502, r26
    560c:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    5610:	10 92 b0 05 	sts	0x05B0, r1
    5614:	10 92 b1 05 	sts	0x05B1, r1
    5618:	10 92 b2 05 	sts	0x05B2, r1
    561c:	10 92 b3 05 	sts	0x05B3, r1
	VectorB = 0;
    5620:	10 92 b4 05 	sts	0x05B4, r1
    5624:	10 92 b5 05 	sts	0x05B5, r1
    5628:	10 92 b6 05 	sts	0x05B6, r1
    562c:	10 92 b7 05 	sts	0x05B7, r1
	EulerAngleRoll = 0;
    5630:	10 92 ac 05 	sts	0x05AC, r1
    5634:	10 92 ad 05 	sts	0x05AD, r1
    5638:	10 92 ae 05 	sts	0x05AE, r1
    563c:	10 92 af 05 	sts	0x05AF, r1
	EulerAnglePitch = 0;
    5640:	10 92 84 05 	sts	0x0584, r1
    5644:	10 92 85 05 	sts	0x0585, r1
    5648:	10 92 86 05 	sts	0x0586, r1
    564c:	10 92 87 05 	sts	0x0587, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    5650:	10 92 d6 07 	sts	0x07D6, r1
    5654:	10 92 d5 07 	sts	0x07D5, r1
	TCNT1 = 0;			// TCNT1 current time
    5658:	10 92 85 00 	sts	0x0085, r1
    565c:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    5660:	10 92 1b 05 	sts	0x051B, r1
    5664:	10 92 1a 05 	sts	0x051A, r1
    5668:	08 95       	ret

0000566a <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    566a:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    566c:	80 e3       	ldi	r24, 0x30	; 48
    566e:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    5670:	8c ef       	ldi	r24, 0xFC	; 252
    5672:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    5674:	8a e0       	ldi	r24, 0x0A	; 10
    5676:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    5678:	82 ef       	ldi	r24, 0xF2	; 242
    567a:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    567c:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    567e:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    5680:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    5682:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    5684:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    5686:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    5688:	85 ef       	ldi	r24, 0xF5	; 245
    568a:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    568c:	8c e0       	ldi	r24, 0x0C	; 12
    568e:	89 b9       	out	0x09, r24	; 9
    5690:	2f e5       	ldi	r18, 0x5F	; 95
    5692:	88 ed       	ldi	r24, 0xD8	; 216
    5694:	93 e0       	ldi	r25, 0x03	; 3
    5696:	21 50       	subi	r18, 0x01	; 1
    5698:	80 40       	sbci	r24, 0x00	; 0
    569a:	90 40       	sbci	r25, 0x00	; 0
    569c:	e1 f7       	brne	.-8      	; 0x5696 <init+0x2c>
    569e:	00 c0       	rjmp	.+0      	; 0x56a0 <init+0x36>
    56a0:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    56a2:	83 b1       	in	r24, 0x03	; 3
    56a4:	80 7f       	andi	r24, 0xF0	; 240
    56a6:	80 3e       	cpi	r24, 0xE0	; 224
    56a8:	21 f4       	brne	.+8      	; 0x56b2 <init+0x48>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    56aa:	83 ef       	ldi	r24, 0xF3	; 243
    56ac:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    56ae:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    56b2:	82 ef       	ldi	r24, 0xF2	; 242
    56b4:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    56b6:	8d e0       	ldi	r24, 0x0D	; 13
    56b8:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    56ba:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    56bc:	85 e0       	ldi	r24, 0x05	; 5
    56be:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    56c0:	80 91 6e 00 	lds	r24, 0x006E
    56c4:	81 60       	ori	r24, 0x01	; 1
    56c6:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    56ca:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    56cc:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    56d0:	80 91 81 00 	lds	r24, 0x0081
    56d4:	82 60       	ori	r24, 0x02	; 2
    56d6:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    56da:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    56de:	87 e0       	ldi	r24, 0x07	; 7
    56e0:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    56e4:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    56e8:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    56ea:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    56ee:	9a e0       	ldi	r25, 0x0A	; 10
    56f0:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    56f4:	9f e0       	ldi	r25, 0x0F	; 15
    56f6:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    56f8:	95 e1       	ldi	r25, 0x15	; 21
    56fa:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    56fe:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    5700:	10 92 d2 07 	sts	0x07D2, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    5704:	0e 94 ed 1b 	call	0x37da	; 0x37da <Initial_EEPROM_Config_Load>
    5708:	c8 2f       	mov	r28, r24
    570a:	20 e0       	ldi	r18, 0x00	; 0
    570c:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    570e:	46 ea       	ldi	r20, 0xA6	; 166
    5710:	5e e0       	ldi	r21, 0x0E	; 14
    5712:	f9 01       	movw	r30, r18
    5714:	ee 0f       	add	r30, r30
    5716:	ff 1f       	adc	r31, r31
    5718:	ee 53       	subi	r30, 0x3E	; 62
    571a:	f8 4f       	sbci	r31, 0xF8	; 248
    571c:	51 83       	std	Z+1, r21	; 0x01
    571e:	40 83       	st	Z, r20
    5720:	2f 5f       	subi	r18, 0xFF	; 255
    5722:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5724:	28 30       	cpi	r18, 0x08	; 8
    5726:	31 05       	cpc	r19, r1
    5728:	a1 f7       	brne	.-24     	; 0x5712 <init+0xa8>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    572a:	24 ec       	ldi	r18, 0xC4	; 196
    572c:	39 e0       	ldi	r19, 0x09	; 9
    572e:	30 93 c3 07 	sts	0x07C3, r19
    5732:	20 93 c2 07 	sts	0x07C2, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    5736:	0e 94 3a 22 	call	0x4474	; 0x4474 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    573a:	0e 94 94 22 	call	0x4528	; 0x4528 <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    573e:	93 b1       	in	r25, 0x03	; 3
    5740:	90 7f       	andi	r25, 0xF0	; 240
    5742:	90 36       	cpi	r25, 0x60	; 96
    5744:	09 f0       	breq	.+2      	; 0x5748 <init+0xde>
    5746:	71 c0       	rjmp	.+226    	; 0x582a <init+0x1c0>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5748:	80 ec       	ldi	r24, 0xC0	; 192
    574a:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
		clear_buffer(buffer);
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	91 e0       	ldi	r25, 0x01	; 1
    5752:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    5756:	29 e1       	ldi	r18, 0x19	; 25
    5758:	30 e0       	ldi	r19, 0x00	; 0
    575a:	4a e0       	ldi	r20, 0x0A	; 10
    575c:	50 e0       	ldi	r21, 0x00	; 0
    575e:	61 e7       	ldi	r22, 0x71	; 113
    5760:	71 e0       	ldi	r23, 0x01	; 1
    5762:	8b e3       	ldi	r24, 0x3B	; 59
    5764:	90 e0       	ldi	r25, 0x00	; 0
    5766:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		write_buffer(buffer);
    576a:	80 e0       	ldi	r24, 0x00	; 0
    576c:	91 e0       	ldi	r25, 0x01	; 1
    576e:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
		clear_buffer(buffer);
    5772:	80 e0       	ldi	r24, 0x00	; 0
    5774:	91 e0       	ldi	r25, 0x01	; 1
    5776:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
    577a:	ee e4       	ldi	r30, 0x4E	; 78
    577c:	f6 e0       	ldi	r31, 0x06	; 6
    577e:	80 e0       	ldi	r24, 0x00	; 0
    5780:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5782:	4c ed       	ldi	r20, 0xDC	; 220
    5784:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5786:	6c e6       	ldi	r22, 0x6C	; 108
    5788:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    578a:	a0 81       	ld	r26, Z
    578c:	9c 01       	movw	r18, r24
    578e:	22 0f       	add	r18, r18
    5790:	33 1f       	adc	r19, r19
    5792:	a2 30       	cpi	r26, 0x02	; 2
    5794:	39 f4       	brne	.+14     	; 0x57a4 <init+0x13a>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5796:	d9 01       	movw	r26, r18
    5798:	ab 5b       	subi	r26, 0xBB	; 187
    579a:	b7 4f       	sbci	r27, 0xF7	; 247
    579c:	11 96       	adiw	r26, 0x01	; 1
    579e:	7c 93       	st	X, r23
    57a0:	6e 93       	st	-X, r22
    57a2:	06 c0       	rjmp	.+12     	; 0x57b0 <init+0x146>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    57a4:	d9 01       	movw	r26, r18
    57a6:	ab 5b       	subi	r26, 0xBB	; 187
    57a8:	b7 4f       	sbci	r27, 0xF7	; 247
    57aa:	11 96       	adiw	r26, 0x01	; 1
    57ac:	5c 93       	st	X, r21
    57ae:	4e 93       	st	-X, r20
    57b0:	01 96       	adiw	r24, 0x01	; 1
    57b2:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    57b4:	88 30       	cpi	r24, 0x08	; 8
    57b6:	91 05       	cpc	r25, r1
    57b8:	41 f7       	brne	.-48     	; 0x578a <init+0x120>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    57ba:	83 b1       	in	r24, 0x03	; 3
    57bc:	80 7f       	andi	r24, 0xF0	; 240
    57be:	80 36       	cpi	r24, 0x60	; 96
    57c0:	79 f4       	brne	.+30     	; 0x57e0 <init+0x176>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    57c2:	6f ef       	ldi	r22, 0xFF	; 255
    57c4:	85 e4       	ldi	r24, 0x45	; 69
    57c6:	98 e0       	ldi	r25, 0x08	; 8
    57c8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <output_servo_ppm_asm>
    57cc:	2f e7       	ldi	r18, 0x7F	; 127
    57ce:	88 e3       	ldi	r24, 0x38	; 56
    57d0:	91 e0       	ldi	r25, 0x01	; 1
    57d2:	21 50       	subi	r18, 0x01	; 1
    57d4:	80 40       	sbci	r24, 0x00	; 0
    57d6:	90 40       	sbci	r25, 0x00	; 0
    57d8:	e1 f7       	brne	.-8      	; 0x57d2 <init+0x168>
    57da:	00 c0       	rjmp	.+0      	; 0x57dc <init+0x172>
    57dc:	00 00       	nop
    57de:	ed cf       	rjmp	.-38     	; 0x57ba <init+0x150>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    57e0:	ee e4       	ldi	r30, 0x4E	; 78
    57e2:	f6 e0       	ldi	r31, 0x06	; 6
    57e4:	80 e0       	ldi	r24, 0x00	; 0
    57e6:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    57e8:	2c e4       	ldi	r18, 0x4C	; 76
    57ea:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    57ec:	40 81       	ld	r20, Z
    57ee:	42 30       	cpi	r20, 0x02	; 2
    57f0:	41 f4       	brne	.+16     	; 0x5802 <init+0x198>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    57f2:	dc 01       	movw	r26, r24
    57f4:	aa 0f       	add	r26, r26
    57f6:	bb 1f       	adc	r27, r27
    57f8:	ab 5b       	subi	r26, 0xBB	; 187
    57fa:	b7 4f       	sbci	r27, 0xF7	; 247
    57fc:	11 96       	adiw	r26, 0x01	; 1
    57fe:	3c 93       	st	X, r19
    5800:	2e 93       	st	-X, r18
    5802:	01 96       	adiw	r24, 0x01	; 1
    5804:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5806:	88 30       	cpi	r24, 0x08	; 8
    5808:	91 05       	cpc	r25, r1
    580a:	81 f7       	brne	.-32     	; 0x57ec <init+0x182>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    580c:	6f ef       	ldi	r22, 0xFF	; 255
    580e:	85 e4       	ldi	r24, 0x45	; 69
    5810:	98 e0       	ldi	r25, 0x08	; 8
    5812:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <output_servo_ppm_asm>
    5816:	2f e7       	ldi	r18, 0x7F	; 127
    5818:	88 e3       	ldi	r24, 0x38	; 56
    581a:	91 e0       	ldi	r25, 0x01	; 1
    581c:	21 50       	subi	r18, 0x01	; 1
    581e:	80 40       	sbci	r24, 0x00	; 0
    5820:	90 40       	sbci	r25, 0x00	; 0
    5822:	e1 f7       	brne	.-8      	; 0x581c <init+0x1b2>
    5824:	00 c0       	rjmp	.+0      	; 0x5826 <init+0x1bc>
    5826:	00 00       	nop
    5828:	f1 cf       	rjmp	.-30     	; 0x580c <init+0x1a2>
    582a:	2f e7       	ldi	r18, 0x7F	; 127
    582c:	8f e4       	ldi	r24, 0x4F	; 79
    582e:	92 e1       	ldi	r25, 0x12	; 18
    5830:	21 50       	subi	r18, 0x01	; 1
    5832:	80 40       	sbci	r24, 0x00	; 0
    5834:	90 40       	sbci	r25, 0x00	; 0
    5836:	e1 f7       	brne	.-8      	; 0x5830 <init+0x1c6>
    5838:	00 c0       	rjmp	.+0      	; 0x583a <init+0x1d0>
    583a:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    583c:	93 b1       	in	r25, 0x03	; 3
    583e:	90 7f       	andi	r25, 0xF0	; 240
    5840:	90 39       	cpi	r25, 0x90	; 144
    5842:	51 f5       	brne	.+84     	; 0x5898 <init+0x22e>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5844:	80 ec       	ldi	r24, 0xC0	; 192
    5846:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
		clear_buffer(buffer);
    584a:	80 e0       	ldi	r24, 0x00	; 0
    584c:	91 e0       	ldi	r25, 0x01	; 1
    584e:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    5852:	29 e1       	ldi	r18, 0x19	; 25
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	48 e2       	ldi	r20, 0x28	; 40
    5858:	50 e0       	ldi	r21, 0x00	; 0
    585a:	61 e7       	ldi	r22, 0x71	; 113
    585c:	71 e0       	ldi	r23, 0x01	; 1
    585e:	86 e0       	ldi	r24, 0x06	; 6
    5860:	91 e0       	ldi	r25, 0x01	; 1
    5862:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		write_buffer(buffer);
    5866:	80 e0       	ldi	r24, 0x00	; 0
    5868:	91 e0       	ldi	r25, 0x01	; 1
    586a:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
		clear_buffer(buffer);
    586e:	80 e0       	ldi	r24, 0x00	; 0
    5870:	91 e0       	ldi	r25, 0x01	; 1
    5872:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    5876:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    587a:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    587e:	80 91 41 06 	lds	r24, 0x0641
    5882:	0e 94 31 22 	call	0x4462	; 0x4462 <st7565_set_brightness>
    5886:	2f e7       	ldi	r18, 0x7F	; 127
    5888:	84 e8       	ldi	r24, 0x84	; 132
    588a:	9e e1       	ldi	r25, 0x1E	; 30
    588c:	21 50       	subi	r18, 0x01	; 1
    588e:	80 40       	sbci	r24, 0x00	; 0
    5890:	90 40       	sbci	r25, 0x00	; 0
    5892:	e1 f7       	brne	.-8      	; 0x588c <init+0x222>
    5894:	00 c0       	rjmp	.+0      	; 0x5896 <init+0x22c>
    5896:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    5898:	cc 23       	and	r28, r28
    589a:	21 f1       	breq	.+72     	; 0x58e4 <init+0x27a>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    589c:	80 ec       	ldi	r24, 0xC0	; 192
    589e:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
		clear_buffer(buffer);
    58a2:	80 e0       	ldi	r24, 0x00	; 0
    58a4:	91 e0       	ldi	r25, 0x01	; 1
    58a6:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    58aa:	2d e0       	ldi	r18, 0x0D	; 13
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	4e e1       	ldi	r20, 0x1E	; 30
    58b0:	50 e0       	ldi	r21, 0x00	; 0
    58b2:	61 e7       	ldi	r22, 0x71	; 113
    58b4:	71 e0       	ldi	r23, 0x01	; 1
    58b6:	83 e0       	ldi	r24, 0x03	; 3
    58b8:	91 e0       	ldi	r25, 0x01	; 1
    58ba:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    58be:	25 e2       	ldi	r18, 0x25	; 37
    58c0:	30 e0       	ldi	r19, 0x00	; 0
    58c2:	41 e2       	ldi	r20, 0x21	; 33
    58c4:	50 e0       	ldi	r21, 0x00	; 0
    58c6:	61 e7       	ldi	r22, 0x71	; 113
    58c8:	71 e0       	ldi	r23, 0x01	; 1
    58ca:	84 e0       	ldi	r24, 0x04	; 4
    58cc:	91 e0       	ldi	r25, 0x01	; 1
    58ce:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		write_buffer(buffer);
    58d2:	80 e0       	ldi	r24, 0x00	; 0
    58d4:	91 e0       	ldi	r25, 0x01	; 1
    58d6:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
		clear_buffer(buffer);		
    58da:	80 e0       	ldi	r24, 0x00	; 0
    58dc:	91 e0       	ldi	r25, 0x01	; 1
    58de:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
    58e2:	04 c0       	rjmp	.+8      	; 0x58ec <init+0x282>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    58e4:	80 e0       	ldi	r24, 0x00	; 0
    58e6:	91 e0       	ldi	r25, 0x01	; 1
    58e8:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
    58ec:	2f ef       	ldi	r18, 0xFF	; 255
    58ee:	88 e0       	ldi	r24, 0x08	; 8
    58f0:	9d e3       	ldi	r25, 0x3D	; 61
    58f2:	21 50       	subi	r18, 0x01	; 1
    58f4:	80 40       	sbci	r24, 0x00	; 0
    58f6:	90 40       	sbci	r25, 0x00	; 0
    58f8:	e1 f7       	brne	.-8      	; 0x58f2 <init+0x288>
    58fa:	00 c0       	rjmp	.+0      	; 0x58fc <init+0x292>
    58fc:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    58fe:	80 e0       	ldi	r24, 0x00	; 0
    5900:	91 e0       	ldi	r25, 0x01	; 1
    5902:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
	write_buffer(buffer);
    5906:	80 e0       	ldi	r24, 0x00	; 0
    5908:	91 e0       	ldi	r25, 0x01	; 1
    590a:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    590e:	0e 94 3a 22 	call	0x4474	; 0x4474 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    5912:	0e 94 1a 48 	call	0x9034	; 0x9034 <i2c_init>
	init_i2c_gyros();
    5916:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <init_i2c_gyros>
	init_i2c_accs();
    591a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    591e:	80 e0       	ldi	r24, 0x00	; 0
    5920:	91 e0       	ldi	r25, 0x01	; 1
    5922:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5926:	80 ec       	ldi	r24, 0xC0	; 192
    5928:	0e 94 2b 22 	call	0x4456	; 0x4456 <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    592c:	29 e1       	ldi	r18, 0x19	; 25
    592e:	30 e0       	ldi	r19, 0x00	; 0
    5930:	42 e1       	ldi	r20, 0x12	; 18
    5932:	50 e0       	ldi	r21, 0x00	; 0
    5934:	61 e7       	ldi	r22, 0x71	; 113
    5936:	71 e0       	ldi	r23, 0x01	; 1
    5938:	87 e0       	ldi	r24, 0x07	; 7
    593a:	91 e0       	ldi	r25, 0x01	; 1
    593c:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
	write_buffer(buffer);	
    5940:	80 e0       	ldi	r24, 0x00	; 0
    5942:	91 e0       	ldi	r25, 0x01	; 1
    5944:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
	clear_buffer(buffer);
    5948:	80 e0       	ldi	r24, 0x00	; 0
    594a:	91 e0       	ldi	r25, 0x01	; 1
    594c:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    5950:	0e 94 5e 11 	call	0x22bc	; 0x22bc <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    5954:	0e 94 00 31 	call	0x6200	; 0x6200 <init_int>
	init_uart();							// Initialise UART
    5958:	0e 94 ff 48 	call	0x91fe	; 0x91fe <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    595c:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <CalibrateGyrosSlow>
    5960:	81 11       	cpse	r24, r1
    5962:	28 c0       	rjmp	.+80     	; 0x59b4 <init+0x34a>
	{
		clear_buffer(buffer);
    5964:	80 e0       	ldi	r24, 0x00	; 0
    5966:	91 e0       	ldi	r25, 0x01	; 1
    5968:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    596c:	29 e1       	ldi	r18, 0x19	; 25
    596e:	30 e0       	ldi	r19, 0x00	; 0
    5970:	49 e1       	ldi	r20, 0x19	; 25
    5972:	50 e0       	ldi	r21, 0x00	; 0
    5974:	61 e7       	ldi	r22, 0x71	; 113
    5976:	71 e0       	ldi	r23, 0x01	; 1
    5978:	8d e3       	ldi	r24, 0x3D	; 61
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		write_buffer(buffer);
    5980:	80 e0       	ldi	r24, 0x00	; 0
    5982:	91 e0       	ldi	r25, 0x01	; 1
    5984:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
    5988:	2f ef       	ldi	r18, 0xFF	; 255
    598a:	88 e0       	ldi	r24, 0x08	; 8
    598c:	9d e3       	ldi	r25, 0x3D	; 61
    598e:	21 50       	subi	r18, 0x01	; 1
    5990:	80 40       	sbci	r24, 0x00	; 0
    5992:	90 40       	sbci	r25, 0x00	; 0
    5994:	e1 f7       	brne	.-8      	; 0x598e <init+0x324>
    5996:	00 c0       	rjmp	.+0      	; 0x5998 <init+0x32e>
    5998:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    599a:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    599c:	28 e0       	ldi	r18, 0x08	; 8
    599e:	88 e1       	ldi	r24, 0x18	; 24
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	0f b6       	in	r0, 0x3f	; 63
    59a4:	f8 94       	cli
    59a6:	a8 95       	wdr
    59a8:	80 93 60 00 	sts	0x0060, r24
    59ac:	0f be       	out	0x3f, r0	; 63
    59ae:	20 93 60 00 	sts	0x0060, r18
    59b2:	ff cf       	rjmp	.-2      	; 0x59b2 <init+0x348>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    59b4:	0e 94 6a 49 	call	0x92d4	; 0x92d4 <GetVbat>
    59b8:	90 93 2f 05 	sts	0x052F, r25
    59bc:	80 93 2e 05 	sts	0x052E, r24
	UpdateLimits();							// Update travel and trigger limits
    59c0:	0e 94 95 39 	call	0x732a	; 0x732a <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    59c4:	80 91 42 06 	lds	r24, 0x0642
    59c8:	81 30       	cpi	r24, 0x01	; 1
    59ca:	29 f4       	brne	.+10     	; 0x59d6 <init+0x36c>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    59cc:	80 91 20 05 	lds	r24, 0x0520
    59d0:	84 60       	ori	r24, 0x04	; 4
    59d2:	80 93 20 05 	sts	0x0520, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    59d6:	80 91 d2 07 	lds	r24, 0x07D2
    59da:	88 23       	and	r24, r24
    59dc:	69 f0       	breq	.+26     	; 0x59f8 <init+0x38e>
	{
		RxGetChannels();
    59de:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    59e2:	80 91 31 08 	lds	r24, 0x0831
    59e6:	90 91 32 08 	lds	r25, 0x0832
    59ea:	c3 97       	sbiw	r24, 0x33	; 51
    59ec:	2c f0       	brlt	.+10     	; 0x59f8 <init+0x38e>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    59ee:	80 91 20 05 	lds	r24, 0x0520
    59f2:	81 60       	ori	r24, 0x01	; 1
    59f4:	80 93 20 05 	sts	0x0520, r24
		}
	}

	// Reset IMU
	reset_IMU();
    59f8:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    59fc:	29 9a       	sbi	0x05, 1	; 5
    59fe:	2f e9       	ldi	r18, 0x9F	; 159
    5a00:	86 e8       	ldi	r24, 0x86	; 134
    5a02:	91 e0       	ldi	r25, 0x01	; 1
    5a04:	21 50       	subi	r18, 0x01	; 1
    5a06:	80 40       	sbci	r24, 0x00	; 0
    5a08:	90 40       	sbci	r25, 0x00	; 0
    5a0a:	e1 f7       	brne	.-8      	; 0x5a04 <init+0x39a>
    5a0c:	00 c0       	rjmp	.+0      	; 0x5a0e <init+0x3a4>
    5a0e:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    5a10:	29 98       	cbi	0x05, 1	; 5

} // init()
    5a12:	cf 91       	pop	r28
    5a14:	08 95       	ret

00005a16 <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    5a16:	1f 92       	push	r1
    5a18:	0f 92       	push	r0
    5a1a:	0f b6       	in	r0, 0x3f	; 63
    5a1c:	0f 92       	push	r0
    5a1e:	11 24       	eor	r1, r1
    5a20:	8f 93       	push	r24
    5a22:	9f 93       	push	r25
	TMR0_counter++;
    5a24:	80 91 d5 07 	lds	r24, 0x07D5
    5a28:	90 91 d6 07 	lds	r25, 0x07D6
    5a2c:	01 96       	adiw	r24, 0x01	; 1
    5a2e:	90 93 d6 07 	sts	0x07D6, r25
    5a32:	80 93 d5 07 	sts	0x07D5, r24
}
    5a36:	9f 91       	pop	r25
    5a38:	8f 91       	pop	r24
    5a3a:	0f 90       	pop	r0
    5a3c:	0f be       	out	0x3f, r0	; 63
    5a3e:	0f 90       	pop	r0
    5a40:	1f 90       	pop	r1
    5a42:	18 95       	reti

00005a44 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    5a44:	1f 92       	push	r1
    5a46:	0f 92       	push	r0
    5a48:	0f b6       	in	r0, 0x3f	; 63
    5a4a:	0f 92       	push	r0
    5a4c:	11 24       	eor	r1, r1
    5a4e:	2f 93       	push	r18
    5a50:	3f 93       	push	r19
    5a52:	8f 93       	push	r24
    5a54:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    5a56:	80 91 ec 07 	lds	r24, 0x07EC
    5a5a:	88 23       	and	r24, r24
    5a5c:	19 f0       	breq	.+6      	; 0x5a64 <__vector_2+0x20>
    5a5e:	81 e0       	ldi	r24, 0x01	; 1
    5a60:	80 93 ed 07 	sts	0x07ED, r24

	if (RX_ROLL)	// Rising
    5a64:	4b 9b       	sbis	0x09, 3	; 9
    5a66:	09 c0       	rjmp	.+18     	; 0x5a7a <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    5a68:	80 91 84 00 	lds	r24, 0x0084
    5a6c:	90 91 85 00 	lds	r25, 0x0085
    5a70:	90 93 da 07 	sts	0x07DA, r25
    5a74:	80 93 d9 07 	sts	0x07D9, r24
    5a78:	14 c0       	rjmp	.+40     	; 0x5aa2 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    5a7a:	80 91 84 00 	lds	r24, 0x0084
    5a7e:	90 91 85 00 	lds	r25, 0x0085
    5a82:	20 91 d9 07 	lds	r18, 0x07D9
    5a86:	30 91 da 07 	lds	r19, 0x07DA
    5a8a:	82 1b       	sub	r24, r18
    5a8c:	93 0b       	sbc	r25, r19
    5a8e:	90 93 c5 07 	sts	0x07C5, r25
    5a92:	80 93 c4 07 	sts	0x07C4, r24
		if (Config.PWM_Sync == AILERON) 
    5a96:	80 91 e3 05 	lds	r24, 0x05E3
    5a9a:	81 30       	cpi	r24, 0x01	; 1
    5a9c:	11 f4       	brne	.+4      	; 0x5aa2 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5a9e:	80 93 d2 07 	sts	0x07D2, r24
		}
	}
}
    5aa2:	9f 91       	pop	r25
    5aa4:	8f 91       	pop	r24
    5aa6:	3f 91       	pop	r19
    5aa8:	2f 91       	pop	r18
    5aaa:	0f 90       	pop	r0
    5aac:	0f be       	out	0x3f, r0	; 63
    5aae:	0f 90       	pop	r0
    5ab0:	1f 90       	pop	r1
    5ab2:	18 95       	reti

00005ab4 <__vector_1>:

ISR(INT0_vect)
{
    5ab4:	1f 92       	push	r1
    5ab6:	0f 92       	push	r0
    5ab8:	0f b6       	in	r0, 0x3f	; 63
    5aba:	0f 92       	push	r0
    5abc:	11 24       	eor	r1, r1
    5abe:	2f 93       	push	r18
    5ac0:	3f 93       	push	r19
    5ac2:	8f 93       	push	r24
    5ac4:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5ac6:	80 91 ec 07 	lds	r24, 0x07EC
    5aca:	88 23       	and	r24, r24
    5acc:	19 f0       	breq	.+6      	; 0x5ad4 <__vector_1+0x20>
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	80 93 ed 07 	sts	0x07ED, r24

	if (RX_PITCH)	// Rising 
    5ad4:	4a 9b       	sbis	0x09, 2	; 9
    5ad6:	09 c0       	rjmp	.+18     	; 0x5aea <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    5ad8:	80 91 84 00 	lds	r24, 0x0084
    5adc:	90 91 85 00 	lds	r25, 0x0085
    5ae0:	90 93 dc 07 	sts	0x07DC, r25
    5ae4:	80 93 db 07 	sts	0x07DB, r24
    5ae8:	15 c0       	rjmp	.+42     	; 0x5b14 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    5aea:	80 91 84 00 	lds	r24, 0x0084
    5aee:	90 91 85 00 	lds	r25, 0x0085
    5af2:	20 91 db 07 	lds	r18, 0x07DB
    5af6:	30 91 dc 07 	lds	r19, 0x07DC
    5afa:	82 1b       	sub	r24, r18
    5afc:	93 0b       	sbc	r25, r19
    5afe:	90 93 c7 07 	sts	0x07C7, r25
    5b02:	80 93 c6 07 	sts	0x07C6, r24
		if (Config.PWM_Sync == ELEVATOR) 
    5b06:	80 91 e3 05 	lds	r24, 0x05E3
    5b0a:	82 30       	cpi	r24, 0x02	; 2
    5b0c:	19 f4       	brne	.+6      	; 0x5b14 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5b0e:	81 e0       	ldi	r24, 0x01	; 1
    5b10:	80 93 d2 07 	sts	0x07D2, r24
		}
	}
}
    5b14:	9f 91       	pop	r25
    5b16:	8f 91       	pop	r24
    5b18:	3f 91       	pop	r19
    5b1a:	2f 91       	pop	r18
    5b1c:	0f 90       	pop	r0
    5b1e:	0f be       	out	0x3f, r0	; 63
    5b20:	0f 90       	pop	r0
    5b22:	1f 90       	pop	r1
    5b24:	18 95       	reti

00005b26 <__vector_7>:

ISR(PCINT3_vect)
{
    5b26:	1f 92       	push	r1
    5b28:	0f 92       	push	r0
    5b2a:	0f b6       	in	r0, 0x3f	; 63
    5b2c:	0f 92       	push	r0
    5b2e:	11 24       	eor	r1, r1
    5b30:	2f 93       	push	r18
    5b32:	3f 93       	push	r19
    5b34:	8f 93       	push	r24
    5b36:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5b38:	80 91 ec 07 	lds	r24, 0x07EC
    5b3c:	88 23       	and	r24, r24
    5b3e:	19 f0       	breq	.+6      	; 0x5b46 <__vector_7+0x20>
    5b40:	81 e0       	ldi	r24, 0x01	; 1
    5b42:	80 93 ed 07 	sts	0x07ED, r24
		
	if (RX_COLL)	// Rising
    5b46:	48 9b       	sbis	0x09, 0	; 9
    5b48:	09 c0       	rjmp	.+18     	; 0x5b5c <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    5b4a:	80 91 84 00 	lds	r24, 0x0084
    5b4e:	90 91 85 00 	lds	r25, 0x0085
    5b52:	90 93 d8 07 	sts	0x07D8, r25
    5b56:	80 93 d7 07 	sts	0x07D7, r24
    5b5a:	15 c0       	rjmp	.+42     	; 0x5b86 <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    5b5c:	80 91 84 00 	lds	r24, 0x0084
    5b60:	90 91 85 00 	lds	r25, 0x0085
    5b64:	20 91 d7 07 	lds	r18, 0x07D7
    5b68:	30 91 d8 07 	lds	r19, 0x07D8
    5b6c:	82 1b       	sub	r24, r18
    5b6e:	93 0b       	sbc	r25, r19
    5b70:	90 93 c3 07 	sts	0x07C3, r25
    5b74:	80 93 c2 07 	sts	0x07C2, r24
		if (Config.PWM_Sync == THROTTLE) 
    5b78:	80 91 e3 05 	lds	r24, 0x05E3
    5b7c:	81 11       	cpse	r24, r1
    5b7e:	03 c0       	rjmp	.+6      	; 0x5b86 <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5b80:	81 e0       	ldi	r24, 0x01	; 1
    5b82:	80 93 d2 07 	sts	0x07D2, r24
		}
	}
}
    5b86:	9f 91       	pop	r25
    5b88:	8f 91       	pop	r24
    5b8a:	3f 91       	pop	r19
    5b8c:	2f 91       	pop	r18
    5b8e:	0f 90       	pop	r0
    5b90:	0f be       	out	0x3f, r0	; 63
    5b92:	0f 90       	pop	r0
    5b94:	1f 90       	pop	r1
    5b96:	18 95       	reti

00005b98 <__vector_5>:


ISR(PCINT1_vect)
{
    5b98:	1f 92       	push	r1
    5b9a:	0f 92       	push	r0
    5b9c:	0f b6       	in	r0, 0x3f	; 63
    5b9e:	0f 92       	push	r0
    5ba0:	11 24       	eor	r1, r1
    5ba2:	2f 93       	push	r18
    5ba4:	3f 93       	push	r19
    5ba6:	8f 93       	push	r24
    5ba8:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    5baa:	80 91 ec 07 	lds	r24, 0x07EC
    5bae:	88 23       	and	r24, r24
    5bb0:	19 f0       	breq	.+6      	; 0x5bb8 <__vector_5+0x20>
    5bb2:	81 e0       	ldi	r24, 0x01	; 1
    5bb4:	80 93 ed 07 	sts	0x07ED, r24

	if (RX_AUX)	// Rising
    5bb8:	18 9b       	sbis	0x03, 0	; 3
    5bba:	09 c0       	rjmp	.+18     	; 0x5bce <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    5bbc:	80 91 84 00 	lds	r24, 0x0084
    5bc0:	90 91 85 00 	lds	r25, 0x0085
    5bc4:	90 93 e0 07 	sts	0x07E0, r25
    5bc8:	80 93 df 07 	sts	0x07DF, r24
    5bcc:	15 c0       	rjmp	.+42     	; 0x5bf8 <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    5bce:	80 91 84 00 	lds	r24, 0x0084
    5bd2:	90 91 85 00 	lds	r25, 0x0085
    5bd6:	20 91 df 07 	lds	r18, 0x07DF
    5bda:	30 91 e0 07 	lds	r19, 0x07E0
    5bde:	82 1b       	sub	r24, r18
    5be0:	93 0b       	sbc	r25, r19
    5be2:	90 93 cb 07 	sts	0x07CB, r25
    5be6:	80 93 ca 07 	sts	0x07CA, r24
		if (Config.PWM_Sync == GEAR) 
    5bea:	80 91 e3 05 	lds	r24, 0x05E3
    5bee:	84 30       	cpi	r24, 0x04	; 4
    5bf0:	19 f4       	brne	.+6      	; 0x5bf8 <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5bf2:	81 e0       	ldi	r24, 0x01	; 1
    5bf4:	80 93 d2 07 	sts	0x07D2, r24
		}
	}
}
    5bf8:	9f 91       	pop	r25
    5bfa:	8f 91       	pop	r24
    5bfc:	3f 91       	pop	r19
    5bfe:	2f 91       	pop	r18
    5c00:	0f 90       	pop	r0
    5c02:	0f be       	out	0x3f, r0	; 63
    5c04:	0f 90       	pop	r0
    5c06:	1f 90       	pop	r1
    5c08:	18 95       	reti

00005c0a <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    5c0a:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    5c0c:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    5c0e:	80 91 84 00 	lds	r24, 0x0084
    5c12:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    5c16:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    5c18:	08 95       	ret

00005c1a <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    5c1a:	1f 92       	push	r1
    5c1c:	0f 92       	push	r0
    5c1e:	0f b6       	in	r0, 0x3f	; 63
    5c20:	0f 92       	push	r0
    5c22:	11 24       	eor	r1, r1
    5c24:	2f 93       	push	r18
    5c26:	3f 93       	push	r19
    5c28:	4f 93       	push	r20
    5c2a:	5f 93       	push	r21
    5c2c:	6f 93       	push	r22
    5c2e:	7f 93       	push	r23
    5c30:	8f 93       	push	r24
    5c32:	9f 93       	push	r25
    5c34:	af 93       	push	r26
    5c36:	bf 93       	push	r27
    5c38:	ef 93       	push	r30
    5c3a:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    5c3c:	80 91 ec 07 	lds	r24, 0x07EC
    5c40:	88 23       	and	r24, r24
    5c42:	19 f0       	breq	.+6      	; 0x5c4a <__vector_3+0x30>
    5c44:	81 e0       	ldi	r24, 0x01	; 1
    5c46:	80 93 ed 07 	sts	0x07ED, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    5c4a:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    5c4e:	20 91 e1 05 	lds	r18, 0x05E1
    5c52:	22 23       	and	r18, r18
    5c54:	d1 f0       	breq	.+52     	; 0x5c8a <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    5c56:	1a 9b       	sbis	0x03, 2	; 3
    5c58:	05 c0       	rjmp	.+10     	; 0x5c64 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    5c5a:	90 93 de 07 	sts	0x07DE, r25
    5c5e:	80 93 dd 07 	sts	0x07DD, r24
    5c62:	86 c0       	rjmp	.+268    	; 0x5d70 <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    5c64:	20 91 dd 07 	lds	r18, 0x07DD
    5c68:	30 91 de 07 	lds	r19, 0x07DE
    5c6c:	82 1b       	sub	r24, r18
    5c6e:	93 0b       	sbc	r25, r19
    5c70:	90 93 c9 07 	sts	0x07C9, r25
    5c74:	80 93 c8 07 	sts	0x07C8, r24
			if (Config.PWM_Sync == RUDDER) 
    5c78:	80 91 e3 05 	lds	r24, 0x05E3
    5c7c:	83 30       	cpi	r24, 0x03	; 3
    5c7e:	09 f0       	breq	.+2      	; 0x5c82 <__vector_3+0x68>
    5c80:	77 c0       	rjmp	.+238    	; 0x5d70 <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    5c82:	81 e0       	ldi	r24, 0x01	; 1
    5c84:	80 93 d2 07 	sts	0x07D2, r24
    5c88:	73 c0       	rjmp	.+230    	; 0x5d70 <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    5c8a:	1a 99       	sbic	0x03, 2	; 3
    5c8c:	71 c0       	rjmp	.+226    	; 0x5d70 <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    5c8e:	20 91 ea 07 	lds	r18, 0x07EA
    5c92:	30 91 eb 07 	lds	r19, 0x07EB
    5c96:	ac 01       	movw	r20, r24
    5c98:	42 1b       	sub	r20, r18
    5c9a:	53 0b       	sbc	r21, r19
    5c9c:	9a 01       	movw	r18, r20
    5c9e:	2f 35       	cpi	r18, 0x5F	; 95
    5ca0:	3a 41       	sbci	r19, 0x1A	; 26
    5ca2:	58 f4       	brcc	.+22     	; 0x5cba <__vector_3+0xa0>
    5ca4:	20 91 ea 07 	lds	r18, 0x07EA
    5ca8:	30 91 eb 07 	lds	r19, 0x07EB
    5cac:	ac 01       	movw	r20, r24
    5cae:	42 1b       	sub	r20, r18
    5cb0:	53 0b       	sbc	r21, r19
    5cb2:	9a 01       	movw	r18, r20
    5cb4:	2e 3e       	cpi	r18, 0xEE	; 238
    5cb6:	32 40       	sbci	r19, 0x02	; 2
    5cb8:	10 f4       	brcc	.+4      	; 0x5cbe <__vector_3+0xa4>
		{
			ch_num = 0;
    5cba:	10 92 e9 07 	sts	0x07E9, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    5cbe:	90 93 eb 07 	sts	0x07EB, r25
    5cc2:	80 93 ea 07 	sts	0x07EA, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    5cc6:	e0 91 e9 07 	lds	r30, 0x07E9
    5cca:	f0 e0       	ldi	r31, 0x00	; 0
    5ccc:	e8 54       	subi	r30, 0x48	; 72
    5cce:	fa 4f       	sbci	r31, 0xFA	; 250
    5cd0:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    5cd2:	20 91 e9 07 	lds	r18, 0x07E9
    5cd6:	22 23       	and	r18, r18
    5cd8:	39 f0       	breq	.+14     	; 0x5ce8 <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    5cda:	a0 91 e9 07 	lds	r26, 0x07E9
    5cde:	b0 e0       	ldi	r27, 0x00	; 0
    5ce0:	a8 54       	subi	r26, 0x48	; 72
    5ce2:	ba 4f       	sbci	r27, 0xFA	; 250
    5ce4:	2c 91       	ld	r18, X
    5ce6:	01 c0       	rjmp	.+2      	; 0x5cea <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    5ce8:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    5cea:	30 91 e9 07 	lds	r19, 0x07E9
    5cee:	38 30       	cpi	r19, 0x08	; 8
    5cf0:	38 f4       	brcc	.+14     	; 0x5d00 <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    5cf2:	f0 e0       	ldi	r31, 0x00	; 0
    5cf4:	ee 0f       	add	r30, r30
    5cf6:	ff 1f       	adc	r31, r31
    5cf8:	e9 52       	subi	r30, 0x29	; 41
    5cfa:	f8 4f       	sbci	r31, 0xF8	; 248
    5cfc:	91 83       	std	Z+1, r25	; 0x01
    5cfe:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    5d00:	30 91 e9 07 	lds	r19, 0x07E9
    5d04:	33 23       	and	r19, r19
    5d06:	99 f0       	breq	.+38     	; 0x5d2e <__vector_3+0x114>
    5d08:	30 91 e9 07 	lds	r19, 0x07E9
    5d0c:	39 30       	cpi	r19, 0x09	; 9
    5d0e:	78 f4       	brcc	.+30     	; 0x5d2e <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    5d10:	30 e0       	ldi	r19, 0x00	; 0
    5d12:	22 0f       	add	r18, r18
    5d14:	33 1f       	adc	r19, r19
    5d16:	f9 01       	movw	r30, r18
    5d18:	e9 52       	subi	r30, 0x29	; 41
    5d1a:	f8 4f       	sbci	r31, 0xF8	; 248
    5d1c:	40 81       	ld	r20, Z
    5d1e:	51 81       	ldd	r21, Z+1	; 0x01
    5d20:	84 1b       	sub	r24, r20
    5d22:	95 0b       	sbc	r25, r21
    5d24:	f9 01       	movw	r30, r18
    5d26:	ee 53       	subi	r30, 0x3E	; 62
    5d28:	f8 4f       	sbci	r31, 0xF8	; 248
    5d2a:	91 83       	std	Z+1, r25	; 0x01
    5d2c:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    5d2e:	80 91 e9 07 	lds	r24, 0x07E9
    5d32:	8f 5f       	subi	r24, 0xFF	; 255
    5d34:	80 93 e9 07 	sts	0x07E9, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    5d38:	90 91 e9 07 	lds	r25, 0x07E9
    5d3c:	80 91 d3 07 	lds	r24, 0x07D3
    5d40:	89 17       	cp	r24, r25
    5d42:	28 f4       	brcc	.+10     	; 0x5d4e <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    5d44:	80 91 e9 07 	lds	r24, 0x07E9
    5d48:	80 93 d3 07 	sts	0x07D3, r24
    5d4c:	09 c0       	rjmp	.+18     	; 0x5d60 <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    5d4e:	90 91 e9 07 	lds	r25, 0x07E9
    5d52:	80 91 d3 07 	lds	r24, 0x07D3
    5d56:	98 13       	cpse	r25, r24
    5d58:	03 c0       	rjmp	.+6      	; 0x5d60 <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    5d5a:	81 e0       	ldi	r24, 0x01	; 1
    5d5c:	80 93 d2 07 	sts	0x07D2, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    5d60:	80 91 19 05 	lds	r24, 0x0519
    5d64:	88 23       	and	r24, r24
    5d66:	21 f0       	breq	.+8      	; 0x5d70 <__vector_3+0x156>
		{
			max_chan = 0;
    5d68:	10 92 d3 07 	sts	0x07D3, r1
			Overdue = false;
    5d6c:	10 92 19 05 	sts	0x0519, r1
		}
	}
} // ISR(INT2_vect)
    5d70:	ff 91       	pop	r31
    5d72:	ef 91       	pop	r30
    5d74:	bf 91       	pop	r27
    5d76:	af 91       	pop	r26
    5d78:	9f 91       	pop	r25
    5d7a:	8f 91       	pop	r24
    5d7c:	7f 91       	pop	r23
    5d7e:	6f 91       	pop	r22
    5d80:	5f 91       	pop	r21
    5d82:	4f 91       	pop	r20
    5d84:	3f 91       	pop	r19
    5d86:	2f 91       	pop	r18
    5d88:	0f 90       	pop	r0
    5d8a:	0f be       	out	0x3f, r0	; 63
    5d8c:	0f 90       	pop	r0
    5d8e:	1f 90       	pop	r1
    5d90:	18 95       	reti

00005d92 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    5d92:	1f 92       	push	r1
    5d94:	0f 92       	push	r0
    5d96:	0f b6       	in	r0, 0x3f	; 63
    5d98:	0f 92       	push	r0
    5d9a:	11 24       	eor	r1, r1
    5d9c:	2f 93       	push	r18
    5d9e:	3f 93       	push	r19
    5da0:	4f 93       	push	r20
    5da2:	5f 93       	push	r21
    5da4:	6f 93       	push	r22
    5da6:	7f 93       	push	r23
    5da8:	8f 93       	push	r24
    5daa:	9f 93       	push	r25
    5dac:	af 93       	push	r26
    5dae:	bf 93       	push	r27
    5db0:	cf 93       	push	r28
    5db2:	ef 93       	push	r30
    5db4:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    5db6:	80 91 ec 07 	lds	r24, 0x07EC
    5dba:	88 23       	and	r24, r24
    5dbc:	19 f0       	breq	.+6      	; 0x5dc4 <__vector_20+0x32>
    5dbe:	81 e0       	ldi	r24, 0x01	; 1
    5dc0:	80 93 ed 07 	sts	0x07ED, r24

	// Read byte first
	temp = UDR0;
    5dc4:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    5dc8:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <TIM16_ReadTCNT1>
	
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    5dcc:	40 91 ea 07 	lds	r20, 0x07EA
    5dd0:	50 91 eb 07 	lds	r21, 0x07EB
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    5dd4:	40 91 ea 07 	lds	r20, 0x07EA
    5dd8:	50 91 eb 07 	lds	r21, 0x07EB
    5ddc:	9c 01       	movw	r18, r24
    5dde:	24 1b       	sub	r18, r20
    5de0:	35 0b       	sbc	r19, r21
    5de2:	a9 01       	movw	r20, r18
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    5de4:	45 3c       	cpi	r20, 0xC5	; 197
    5de6:	39 e0       	ldi	r19, 0x09	; 9
    5de8:	53 07       	cpc	r21, r19
    5dea:	90 f0       	brcs	.+36     	; 0x5e10 <__vector_20+0x7e>
	{
		// Reset variables
		rcindex = 0;
    5dec:	10 92 c1 07 	sts	0x07C1, r1
		bytecount = 0;
    5df0:	10 92 d4 07 	sts	0x07D4, r1
		ch_num = 0;
    5df4:	10 92 e9 07 	sts	0x07E9, r1
		checksum = 0;
    5df8:	10 92 ef 07 	sts	0x07EF, r1
    5dfc:	10 92 ee 07 	sts	0x07EE, r1
		chanmask16 = 0;
    5e00:	10 92 e8 07 	sts	0x07E8, r1
    5e04:	10 92 e7 07 	sts	0x07E7, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    5e08:	50 93 f1 07 	sts	0x07F1, r21
    5e0c:	40 93 f0 07 	sts	0x07F0, r20
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    5e10:	90 93 eb 07 	sts	0x07EB, r25
    5e14:	80 93 ea 07 	sts	0x07EA, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    5e18:	80 91 c1 07 	lds	r24, 0x07C1
    5e1c:	86 32       	cpi	r24, 0x26	; 38
    5e1e:	50 f4       	brcc	.+20     	; 0x5e34 <__vector_20+0xa2>
	{
		sBuffer[rcindex++] = temp;			
    5e20:	e0 91 c1 07 	lds	r30, 0x07C1
    5e24:	81 e0       	ldi	r24, 0x01	; 1
    5e26:	8e 0f       	add	r24, r30
    5e28:	80 93 c1 07 	sts	0x07C1, r24
    5e2c:	f0 e0       	ldi	r31, 0x00	; 0
    5e2e:	ec 5b       	subi	r30, 0xBC	; 188
    5e30:	fa 4f       	sbci	r31, 0xFA	; 250
    5e32:	c0 83       	st	Z, r28
	//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
	//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
	//*
	//************************************************************

	if (Config.RxMode == XTREME)
    5e34:	80 91 e1 05 	lds	r24, 0x05E1
    5e38:	84 30       	cpi	r24, 0x04	; 4
    5e3a:	09 f0       	breq	.+2      	; 0x5e3e <__vector_20+0xac>
    5e3c:	b3 c0       	rjmp	.+358    	; 0x5fa4 <__vector_20+0x212>
	{
		// Look at flag byte to see if the data is meant for us
		if (bytecount == 0)
    5e3e:	80 91 d4 07 	lds	r24, 0x07D4
    5e42:	81 11       	cpse	r24, r1
    5e44:	0d c0       	rjmp	.+26     	; 0x5e60 <__vector_20+0xce>
		{
			// Check top 3 bits for channel bank
			// Trash checksum if not clear
			if (temp & 0xE0)
    5e46:	8c 2f       	mov	r24, r28
    5e48:	80 7e       	andi	r24, 0xE0	; 224
    5e4a:	51 f0       	breq	.+20     	; 0x5e60 <__vector_20+0xce>
			{
				checksum +=	0x55;
    5e4c:	80 91 ee 07 	lds	r24, 0x07EE
    5e50:	90 91 ef 07 	lds	r25, 0x07EF
    5e54:	8b 5a       	subi	r24, 0xAB	; 171
    5e56:	9f 4f       	sbci	r25, 0xFF	; 255
    5e58:	90 93 ef 07 	sts	0x07EF, r25
    5e5c:	80 93 ee 07 	sts	0x07EE, r24
			}
		}

		// Get MSB of mask byte
		if (bytecount == 2)
    5e60:	80 91 d4 07 	lds	r24, 0x07D4
    5e64:	2c 2f       	mov	r18, r28
    5e66:	30 e0       	ldi	r19, 0x00	; 0
    5e68:	82 30       	cpi	r24, 0x02	; 2
    5e6a:	51 f4       	brne	.+20     	; 0x5e80 <__vector_20+0xee>
		{
			chanmask16 = 0;
    5e6c:	10 92 e8 07 	sts	0x07E8, r1
    5e70:	10 92 e7 07 	sts	0x07E7, r1
			chanmask16 = temp << 8;		// High byte of Mask
    5e74:	92 2f       	mov	r25, r18
    5e76:	88 27       	eor	r24, r24
    5e78:	90 93 e8 07 	sts	0x07E8, r25
    5e7c:	80 93 e7 07 	sts	0x07E7, r24
		}

		// Combine with LSB of mask byte
		// Work out how many channels there are supposed to be
		if (bytecount == 3)
    5e80:	80 91 d4 07 	lds	r24, 0x07D4
    5e84:	83 30       	cpi	r24, 0x03	; 3
    5e86:	b9 f0       	breq	.+46     	; 0x5eb6 <__vector_20+0x124>
				temp16 &= temp16 - 1;
			}
		}

		// Add up checksum up until final packet
		if (bytecount < ((ch_num << 1) + 4))
    5e88:	80 91 e9 07 	lds	r24, 0x07E9
    5e8c:	40 91 d4 07 	lds	r20, 0x07D4
    5e90:	90 e0       	ldi	r25, 0x00	; 0
    5e92:	88 0f       	add	r24, r24
    5e94:	99 1f       	adc	r25, r25
    5e96:	03 96       	adiw	r24, 0x03	; 3
    5e98:	50 e0       	ldi	r21, 0x00	; 0
    5e9a:	84 17       	cp	r24, r20
    5e9c:	95 07       	cpc	r25, r21
    5e9e:	44 f1       	brlt	.+80     	; 0x5ef0 <__vector_20+0x15e>
		{
			checksum +=	temp;
    5ea0:	80 91 ee 07 	lds	r24, 0x07EE
    5ea4:	90 91 ef 07 	lds	r25, 0x07EF
    5ea8:	82 0f       	add	r24, r18
    5eaa:	93 1f       	adc	r25, r19
    5eac:	90 93 ef 07 	sts	0x07EF, r25
    5eb0:	80 93 ee 07 	sts	0x07EE, r24
    5eb4:	7b c1       	rjmp	.+758    	; 0x61ac <__vector_20+0x41a>

		// Combine with LSB of mask byte
		// Work out how many channels there are supposed to be
		if (bytecount == 3)
		{
			chanmask16 += (uint16_t)temp;	// Low byte of Mask
    5eb6:	80 91 e7 07 	lds	r24, 0x07E7
    5eba:	90 91 e8 07 	lds	r25, 0x07E8
    5ebe:	82 0f       	add	r24, r18
    5ec0:	93 1f       	adc	r25, r19
    5ec2:	90 93 e8 07 	sts	0x07E8, r25
    5ec6:	80 93 e7 07 	sts	0x07E7, r24
			temp16 = chanmask16;			// Need to keep a copy od chanmask16
    5eca:	80 91 e7 07 	lds	r24, 0x07E7
    5ece:	90 91 e8 07 	lds	r25, 0x07E8

			// Count bits set (number of active channels)				 
			for (ch_num = 0; temp16; ch_num++)
    5ed2:	10 92 e9 07 	sts	0x07E9, r1
    5ed6:	00 97       	sbiw	r24, 0x00	; 0
    5ed8:	b9 f2       	breq	.-82     	; 0x5e88 <__vector_20+0xf6>
			{
				temp16 &= temp16 - 1;
    5eda:	ac 01       	movw	r20, r24
    5edc:	41 50       	subi	r20, 0x01	; 1
    5ede:	51 09       	sbc	r21, r1
    5ee0:	84 23       	and	r24, r20
    5ee2:	95 23       	and	r25, r21
		{
			chanmask16 += (uint16_t)temp;	// Low byte of Mask
			temp16 = chanmask16;			// Need to keep a copy od chanmask16

			// Count bits set (number of active channels)				 
			for (ch_num = 0; temp16; ch_num++)
    5ee4:	40 91 e9 07 	lds	r20, 0x07E9
    5ee8:	4f 5f       	subi	r20, 0xFF	; 255
    5eea:	40 93 e9 07 	sts	0x07E9, r20
    5eee:	f3 cf       	rjmp	.-26     	; 0x5ed6 <__vector_20+0x144>
	
		// Process data when all packets received
		else
		{
			// Check checksum 
			checksum &= 0xff;
    5ef0:	80 91 ee 07 	lds	r24, 0x07EE
    5ef4:	90 91 ef 07 	lds	r25, 0x07EF
    5ef8:	99 27       	eor	r25, r25
    5efa:	90 93 ef 07 	sts	0x07EF, r25
    5efe:	80 93 ee 07 	sts	0x07EE, r24

			// Ignore packet if checksum wrong
			if (checksum != temp) // temp holds the transmitted checksum byte
    5f02:	80 91 ee 07 	lds	r24, 0x07EE
    5f06:	90 91 ef 07 	lds	r25, 0x07EF
    5f0a:	82 17       	cp	r24, r18
    5f0c:	93 07       	cpc	r25, r19
    5f0e:	49 f0       	breq	.+18     	; 0x5f22 <__vector_20+0x190>
			{
				Interrupted = false;
    5f10:	10 92 d2 07 	sts	0x07D2, r1
				ch_num = 0;
    5f14:	10 92 e9 07 	sts	0x07E9, r1
				checksum = 0;
    5f18:	10 92 ef 07 	sts	0x07EF, r1
    5f1c:	10 92 ee 07 	sts	0x07EE, r1
    5f20:	45 c1       	rjmp	.+650    	; 0x61ac <__vector_20+0x41a>
			}
			else
			{
				// RC sync established
				Interrupted = true;	
    5f22:	81 e0       	ldi	r24, 0x01	; 1
    5f24:	80 93 d2 07 	sts	0x07D2, r24
    5f28:	80 e0       	ldi	r24, 0x00	; 0
    5f2a:	90 e0       	ldi	r25, 0x00	; 0

				// Set start of channel data per format
				sindex = 4; // Channel data from byte 5
    5f2c:	a4 e0       	ldi	r26, 0x04	; 4
				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
    5f2e:	61 e0       	ldi	r22, 0x01	; 1
    5f30:	70 e0       	ldi	r23, 0x00	; 0
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    5f32:	ba e0       	ldi	r27, 0x0A	; 10
				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
    5f34:	40 91 e7 07 	lds	r20, 0x07E7
    5f38:	50 91 e8 07 	lds	r21, 0x07E8
    5f3c:	9b 01       	movw	r18, r22
    5f3e:	08 2e       	mov	r0, r24
    5f40:	02 c0       	rjmp	.+4      	; 0x5f46 <__vector_20+0x1b4>
    5f42:	22 0f       	add	r18, r18
    5f44:	33 1f       	adc	r19, r19
    5f46:	0a 94       	dec	r0
    5f48:	e2 f7       	brpl	.-8      	; 0x5f42 <__vector_20+0x1b0>
    5f4a:	24 23       	and	r18, r20
    5f4c:	35 23       	and	r19, r21
    5f4e:	23 2b       	or	r18, r19
    5f50:	21 f1       	breq	.+72     	; 0x5f9a <__vector_20+0x208>
					{
						// Reconstruct word
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    5f52:	ea 2f       	mov	r30, r26
    5f54:	f0 e0       	ldi	r31, 0x00	; 0
    5f56:	ec 5b       	subi	r30, 0xBC	; 188
    5f58:	fa 4f       	sbci	r31, 0xFA	; 250
    5f5a:	40 81       	ld	r20, Z
    5f5c:	21 81       	ldd	r18, Z+1	; 0x01

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
    5f5e:	88 30       	cpi	r24, 0x08	; 8
    5f60:	c8 f4       	brcc	.+50     	; 0x5f94 <__vector_20+0x202>
    5f62:	fc 01       	movw	r30, r24
    5f64:	e8 54       	subi	r30, 0x48	; 72
    5f66:	fa 4f       	sbci	r31, 0xFA	; 250
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    5f68:	e1 81       	ldd	r30, Z+1	; 0x01
    5f6a:	f0 e0       	ldi	r31, 0x00	; 0
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
					{
						// Reconstruct word
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    5f6c:	50 e0       	ldi	r21, 0x00	; 0
    5f6e:	54 2f       	mov	r21, r20
    5f70:	44 27       	eor	r20, r20
    5f72:	42 0f       	add	r20, r18
    5f74:	51 1d       	adc	r21, r1

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    5f76:	b4 9f       	mul	r27, r20
    5f78:	90 01       	movw	r18, r0
    5f7a:	b5 9f       	mul	r27, r21
    5f7c:	30 0d       	add	r19, r0
    5f7e:	11 24       	eor	r1, r1
    5f80:	36 95       	lsr	r19
    5f82:	27 95       	ror	r18
    5f84:	36 95       	lsr	r19
    5f86:	27 95       	ror	r18
    5f88:	ee 0f       	add	r30, r30
    5f8a:	ff 1f       	adc	r31, r31
    5f8c:	ee 53       	subi	r30, 0x3E	; 62
    5f8e:	f8 4f       	sbci	r31, 0xF8	; 248
    5f90:	31 83       	std	Z+1, r19	; 0x01
    5f92:	20 83       	st	Z, r18
						} 		

						// Within the bounds of the buffer
						if (sindex < SBUFFER_SIZE)
    5f94:	a6 32       	cpi	r26, 0x26	; 38
    5f96:	08 f4       	brcc	.+2      	; 0x5f9a <__vector_20+0x208>
						{
							sindex += 2;
    5f98:	ae 5f       	subi	r26, 0xFE	; 254
    5f9a:	01 96       	adiw	r24, 0x01	; 1
				// Set start of channel data per format
				sindex = 4; // Channel data from byte 5

				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
    5f9c:	80 31       	cpi	r24, 0x10	; 16
    5f9e:	91 05       	cpc	r25, r1
    5fa0:	49 f6       	brne	.-110    	; 0x5f34 <__vector_20+0x1a2>
    5fa2:	04 c1       	rjmp	.+520    	; 0x61ac <__vector_20+0x41a>
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    5fa4:	82 30       	cpi	r24, 0x02	; 2
    5fa6:	09 f0       	breq	.+2      	; 0x5faa <__vector_20+0x218>
    5fa8:	90 c0       	rjmp	.+288    	; 0x60ca <__vector_20+0x338>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    5faa:	80 91 d4 07 	lds	r24, 0x07D4
    5fae:	88 31       	cpi	r24, 0x18	; 24
    5fb0:	09 f0       	breq	.+2      	; 0x5fb4 <__vector_20+0x222>
    5fb2:	fc c0       	rjmp	.+504    	; 0x61ac <__vector_20+0x41a>
    5fb4:	cc 23       	and	r28, r28
    5fb6:	59 f0       	breq	.+22     	; 0x5fce <__vector_20+0x23c>
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	cf 3c       	cpi	r28, 0xCF	; 207
    5fbc:	08 f4       	brcc	.+2      	; 0x5fc0 <__vector_20+0x22e>
    5fbe:	80 e0       	ldi	r24, 0x00	; 0
    5fc0:	91 e3       	ldi	r25, 0x31	; 49
    5fc2:	89 9f       	mul	r24, r25
    5fc4:	c0 0d       	add	r28, r0
    5fc6:	11 24       	eor	r1, r1
    5fc8:	c4 30       	cpi	r28, 0x04	; 4
    5fca:	09 f0       	breq	.+2      	; 0x5fce <__vector_20+0x23c>
    5fcc:	ef c0       	rjmp	.+478    	; 0x61ac <__vector_20+0x41a>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    5fce:	80 91 5b 05 	lds	r24, 0x055B
    5fd2:	85 fd       	sbrc	r24, 5
    5fd4:	eb c0       	rjmp	.+470    	; 0x61ac <__vector_20+0x41a>
			{
				// RC sync established
				Interrupted = true;
    5fd6:	81 e0       	ldi	r24, 0x01	; 1
    5fd8:	80 93 d2 07 	sts	0x07D2, r24
    5fdc:	80 e0       	ldi	r24, 0x00	; 0
    5fde:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    5fe0:	fc 01       	movw	r30, r24
    5fe2:	ee 0f       	add	r30, r30
    5fe4:	ff 1f       	adc	r31, r31
    5fe6:	ee 53       	subi	r30, 0x3E	; 62
    5fe8:	f8 4f       	sbci	r31, 0xF8	; 248
    5fea:	11 82       	std	Z+1, r1	; 0x01
    5fec:	10 82       	st	Z, r1
    5fee:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5ff0:	88 30       	cpi	r24, 0x08	; 8
    5ff2:	91 05       	cpc	r25, r1
    5ff4:	a9 f7       	brne	.-22     	; 0x5fe0 <__vector_20+0x24e>
    5ff6:	a8 e5       	ldi	r26, 0x58	; 88
    5ff8:	70 e0       	ldi	r23, 0x00	; 0
    5ffa:	c0 e0       	ldi	r28, 0x00	; 0
    5ffc:	60 e0       	ldi	r22, 0x00	; 0
    5ffe:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    6000:	21 e0       	ldi	r18, 0x01	; 1
    6002:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    6004:	eb 2f       	mov	r30, r27
    6006:	f0 e0       	ldi	r31, 0x00	; 0
    6008:	ec 5b       	subi	r30, 0xBC	; 188
    600a:	fa 4f       	sbci	r31, 0xFA	; 250
    600c:	80 81       	ld	r24, Z
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	06 2e       	mov	r0, r22
    6012:	02 c0       	rjmp	.+4      	; 0x6018 <__vector_20+0x286>
    6014:	95 95       	asr	r25
    6016:	87 95       	ror	r24
    6018:	0a 94       	dec	r0
    601a:	e2 f7       	brpl	.-8      	; 0x6014 <__vector_20+0x282>
    601c:	80 ff       	sbrs	r24, 0
    601e:	17 c0       	rjmp	.+46     	; 0x604e <__vector_20+0x2bc>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    6020:	ec 2f       	mov	r30, r28
    6022:	f0 e0       	ldi	r31, 0x00	; 0
    6024:	e8 54       	subi	r30, 0x48	; 72
    6026:	fa 4f       	sbci	r31, 0xFA	; 250
    6028:	e1 81       	ldd	r30, Z+1	; 0x01
    602a:	f0 e0       	ldi	r31, 0x00	; 0
    602c:	ee 0f       	add	r30, r30
    602e:	ff 1f       	adc	r31, r31
    6030:	ee 53       	subi	r30, 0x3E	; 62
    6032:	f8 4f       	sbci	r31, 0xF8	; 248
    6034:	80 81       	ld	r24, Z
    6036:	91 81       	ldd	r25, Z+1	; 0x01
    6038:	a9 01       	movw	r20, r18
    603a:	07 2e       	mov	r0, r23
    603c:	02 c0       	rjmp	.+4      	; 0x6042 <__vector_20+0x2b0>
    603e:	44 0f       	add	r20, r20
    6040:	55 1f       	adc	r21, r21
    6042:	0a 94       	dec	r0
    6044:	e2 f7       	brpl	.-8      	; 0x603e <__vector_20+0x2ac>
    6046:	84 2b       	or	r24, r20
    6048:	95 2b       	or	r25, r21
    604a:	91 83       	std	Z+1, r25	; 0x01
    604c:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    604e:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    6050:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    6052:	68 30       	cpi	r22, 0x08	; 8
    6054:	11 f4       	brne	.+4      	; 0x605a <__vector_20+0x2c8>
                    {
                        chan_mask =0;
                        sindex++;
    6056:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    6058:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    605a:	7b 30       	cpi	r23, 0x0B	; 11
    605c:	11 f4       	brne	.+4      	; 0x6062 <__vector_20+0x2d0>
                    {
                        data_mask =0;
                        chan_shift++;
    605e:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    6060:	70 e0       	ldi	r23, 0x00	; 0
    6062:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    6064:	79 f6       	brne	.-98     	; 0x6004 <__vector_20+0x272>
    6066:	40 e0       	ldi	r20, 0x00	; 0
    6068:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    606a:	fa 01       	movw	r30, r20
    606c:	ee 0f       	add	r30, r30
    606e:	ff 1f       	adc	r31, r31
    6070:	ee 53       	subi	r30, 0x3E	; 62
    6072:	f8 4f       	sbci	r31, 0xF8	; 248
    6074:	20 81       	ld	r18, Z
    6076:	31 81       	ldd	r19, Z+1	; 0x01
    6078:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    607a:	c9 01       	movw	r24, r18
    607c:	95 95       	asr	r25
    607e:	87 95       	ror	r24
    6080:	95 95       	asr	r25
    6082:	87 95       	ror	r24
    6084:	82 0f       	add	r24, r18
    6086:	93 1f       	adc	r25, r19
    6088:	b9 01       	movw	r22, r18
    608a:	a3 e0       	ldi	r26, 0x03	; 3
    608c:	75 95       	asr	r23
    608e:	67 95       	ror	r22
    6090:	aa 95       	dec	r26
    6092:	e1 f7       	brne	.-8      	; 0x608c <__vector_20+0x2fa>
    6094:	86 0f       	add	r24, r22
    6096:	97 1f       	adc	r25, r23
    6098:	b9 01       	movw	r22, r18
    609a:	b4 e0       	ldi	r27, 0x04	; 4
    609c:	75 95       	asr	r23
    609e:	67 95       	ror	r22
    60a0:	ba 95       	dec	r27
    60a2:	e1 f7       	brne	.-8      	; 0x609c <__vector_20+0x30a>
    60a4:	86 0f       	add	r24, r22
    60a6:	97 1f       	adc	r25, r23
    60a8:	c5 e0       	ldi	r28, 0x05	; 5
    60aa:	35 95       	asr	r19
    60ac:	27 95       	ror	r18
    60ae:	ca 95       	dec	r28
    60b0:	e1 f7       	brne	.-8      	; 0x60aa <__vector_20+0x318>
    60b2:	82 0f       	add	r24, r18
    60b4:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    60b6:	8a 55       	subi	r24, 0x5A	; 90
    60b8:	91 4f       	sbci	r25, 0xF1	; 241
    60ba:	91 83       	std	Z+1, r25	; 0x01
    60bc:	80 83       	st	Z, r24
    60be:	4f 5f       	subi	r20, 0xFF	; 255
    60c0:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    60c2:	48 30       	cpi	r20, 0x08	; 8
    60c4:	51 05       	cpc	r21, r1
    60c6:	89 f6       	brne	.-94     	; 0x606a <__vector_20+0x2d8>
    60c8:	71 c0       	rjmp	.+226    	; 0x61ac <__vector_20+0x41a>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    60ca:	83 30       	cpi	r24, 0x03	; 3
    60cc:	09 f0       	breq	.+2      	; 0x60d0 <__vector_20+0x33e>
    60ce:	6e c0       	rjmp	.+220    	; 0x61ac <__vector_20+0x41a>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    60d0:	80 91 d4 07 	lds	r24, 0x07D4
    60d4:	8f 30       	cpi	r24, 0x0F	; 15
    60d6:	08 f4       	brcc	.+2      	; 0x60da <__vector_20+0x348>
    60d8:	69 c0       	rjmp	.+210    	; 0x61ac <__vector_20+0x41a>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    60da:	c0 93 53 05 	sts	0x0553, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    60de:	80 91 45 05 	lds	r24, 0x0545
    60e2:	84 ff       	sbrs	r24, 4
    60e4:	04 c0       	rjmp	.+8      	; 0x60ee <__vector_20+0x35c>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    60e6:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    60e8:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    60ea:	78 e7       	ldi	r23, 0x78	; 120
    60ec:	03 c0       	rjmp	.+6      	; 0x60f4 <__vector_20+0x362>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    60ee:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    60f0:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    60f2:	7c e3       	ldi	r23, 0x3C	; 60
    60f4:	e7 e4       	ldi	r30, 0x47	; 71
    60f6:	f5 e0       	ldi	r31, 0x05	; 5
    60f8:	df 01       	movw	r26, r30
    60fa:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    60fc:	2c 91       	ld	r18, X
    60fe:	82 2f       	mov	r24, r18
    6100:	87 23       	and	r24, r23
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	06 2e       	mov	r0, r22
    6106:	02 c0       	rjmp	.+4      	; 0x610c <__vector_20+0x37a>
    6108:	95 95       	asr	r25
    610a:	87 95       	ror	r24
    610c:	0a 94       	dec	r0
    610e:	e2 f7       	brpl	.-8      	; 0x6108 <__vector_20+0x376>
    6110:	80 93 e9 07 	sts	0x07E9, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    6114:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    6116:	90 91 e9 07 	lds	r25, 0x07E9
    611a:	98 30       	cpi	r25, 0x08	; 8
    611c:	f0 f5       	brcc	.+124    	; 0x619a <__vector_20+0x408>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    611e:	2c 23       	and	r18, r28
    6120:	30 e0       	ldi	r19, 0x00	; 0
    6122:	32 2f       	mov	r19, r18
    6124:	22 27       	eor	r18, r18
    6126:	28 0f       	add	r18, r24
    6128:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    612a:	63 30       	cpi	r22, 0x03	; 3
    612c:	11 f4       	brne	.+4      	; 0x6132 <__vector_20+0x3a0>
					{
						itemp16 = temp16 - 1024;
    612e:	34 50       	subi	r19, 0x04	; 4
    6130:	01 c0       	rjmp	.+2      	; 0x6134 <__vector_20+0x3a2>
					}
					else
					{
						itemp16 = temp16 - 512;	
    6132:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    6134:	c9 01       	movw	r24, r18
    6136:	88 0f       	add	r24, r24
    6138:	99 1f       	adc	r25, r25
    613a:	a9 01       	movw	r20, r18
    613c:	55 95       	asr	r21
    613e:	47 95       	ror	r20
    6140:	84 0f       	add	r24, r20
    6142:	95 1f       	adc	r25, r21
    6144:	a9 01       	movw	r20, r18
    6146:	55 95       	asr	r21
    6148:	47 95       	ror	r20
    614a:	55 95       	asr	r21
    614c:	47 95       	ror	r20
    614e:	84 0f       	add	r24, r20
    6150:	95 1f       	adc	r25, r21
    6152:	a9 01       	movw	r20, r18
    6154:	a3 e0       	ldi	r26, 0x03	; 3
    6156:	55 95       	asr	r21
    6158:	47 95       	ror	r20
    615a:	aa 95       	dec	r26
    615c:	e1 f7       	brne	.-8      	; 0x6156 <__vector_20+0x3c4>
    615e:	84 0f       	add	r24, r20
    6160:	95 1f       	adc	r25, r21
    6162:	b4 e0       	ldi	r27, 0x04	; 4
    6164:	35 95       	asr	r19
    6166:	27 95       	ror	r18
    6168:	ba 95       	dec	r27
    616a:	e1 f7       	brne	.-8      	; 0x6164 <__vector_20+0x3d2>
    616c:	82 0f       	add	r24, r18
    616e:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    6170:	63 30       	cpi	r22, 0x03	; 3
    6172:	11 f4       	brne	.+4      	; 0x6178 <__vector_20+0x3e6>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    6174:	95 95       	asr	r25
    6176:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    6178:	a0 91 e9 07 	lds	r26, 0x07E9
    617c:	b0 e0       	ldi	r27, 0x00	; 0
    617e:	a8 54       	subi	r26, 0x48	; 72
    6180:	ba 4f       	sbci	r27, 0xFA	; 250
    6182:	11 96       	adiw	r26, 0x01	; 1
    6184:	ac 91       	ld	r26, X
    6186:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    6188:	8a 55       	subi	r24, 0x5A	; 90
    618a:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    618c:	aa 0f       	add	r26, r26
    618e:	bb 1f       	adc	r27, r27
    6190:	ae 53       	subi	r26, 0x3E	; 62
    6192:	b8 4f       	sbci	r27, 0xF8	; 248
    6194:	11 96       	adiw	r26, 0x01	; 1
    6196:	9c 93       	st	X, r25
    6198:	8e 93       	st	-X, r24
    619a:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    619c:	25 e0       	ldi	r18, 0x05	; 5
    619e:	e5 35       	cpi	r30, 0x55	; 85
    61a0:	f2 07       	cpc	r31, r18
    61a2:	09 f0       	breq	.+2      	; 0x61a6 <__vector_20+0x414>
    61a4:	a9 cf       	rjmp	.-174    	; 0x60f8 <__vector_20+0x366>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    61a6:	81 e0       	ldi	r24, 0x01	; 1
    61a8:	80 93 d2 07 	sts	0x07D2, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    61ac:	80 91 d4 07 	lds	r24, 0x07D4
    61b0:	8f 5f       	subi	r24, 0xFF	; 255
    61b2:	80 93 d4 07 	sts	0x07D4, r24
}
    61b6:	ff 91       	pop	r31
    61b8:	ef 91       	pop	r30
    61ba:	cf 91       	pop	r28
    61bc:	bf 91       	pop	r27
    61be:	af 91       	pop	r26
    61c0:	9f 91       	pop	r25
    61c2:	8f 91       	pop	r24
    61c4:	7f 91       	pop	r23
    61c6:	6f 91       	pop	r22
    61c8:	5f 91       	pop	r21
    61ca:	4f 91       	pop	r20
    61cc:	3f 91       	pop	r19
    61ce:	2f 91       	pop	r18
    61d0:	0f 90       	pop	r0
    61d2:	0f be       	out	0x3f, r0	; 63
    61d4:	0f 90       	pop	r0
    61d6:	1f 90       	pop	r1
    61d8:	18 95       	reti

000061da <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    61da:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    61dc:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    61e0:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    61e4:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    61e6:	e1 ec       	ldi	r30, 0xC1	; 193
    61e8:	f0 e0       	ldi	r31, 0x00	; 0
    61ea:	80 81       	ld	r24, Z
    61ec:	8f 7e       	andi	r24, 0xEF	; 239
    61ee:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    61f0:	80 81       	ld	r24, Z
    61f2:	8f 77       	andi	r24, 0x7F	; 127
    61f4:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    61f6:	8f e0       	ldi	r24, 0x0F	; 15
    61f8:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    61fa:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    61fc:	78 94       	sei
    61fe:	08 95       	ret

00006200 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    6200:	f8 94       	cli
	
	switch (Config.RxMode)
    6202:	80 91 e1 05 	lds	r24, 0x05E1
    6206:	81 30       	cpi	r24, 0x01	; 1
    6208:	c9 f0       	breq	.+50     	; 0x623c <init_int+0x3c>
    620a:	44 f4       	brge	.+16     	; 0x621c <init_int+0x1c>
    620c:	81 11       	cpse	r24, r1
    620e:	2c c0       	rjmp	.+88     	; 0x6268 <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    6210:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    6214:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    6218:	84 e0       	ldi	r24, 0x04	; 4
    621a:	1b c0       	rjmp	.+54     	; 0x6252 <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    621c:	85 30       	cpi	r24, 0x05	; 5
    621e:	24 f5       	brge	.+72     	; 0x6268 <init_int+0x68>

		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    6220:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    6224:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    6228:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    622a:	80 91 c1 00 	lds	r24, 0x00C1
    622e:	80 68       	ori	r24, 0x80	; 128
    6230:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    6234:	80 91 c1 00 	lds	r24, 0x00C1
    6238:	80 61       	ori	r24, 0x10	; 16
    623a:	14 c0       	rjmp	.+40     	; 0x6264 <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    623c:	80 91 6c 00 	lds	r24, 0x006C
    6240:	81 60       	ori	r24, 0x01	; 1
    6242:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    6246:	80 91 73 00 	lds	r24, 0x0073
    624a:	81 60       	ori	r24, 0x01	; 1
    624c:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    6250:	87 e0       	ldi	r24, 0x07	; 7
    6252:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    6254:	80 91 c1 00 	lds	r24, 0x00C1
    6258:	8f 77       	andi	r24, 0x7F	; 127
    625a:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    625e:	80 91 c1 00 	lds	r24, 0x00C1
    6262:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    6264:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    6268:	8f e0       	ldi	r24, 0x0F	; 15
    626a:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    626c:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    626e:	78 94       	sei
    6270:	08 95       	ret

00006272 <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    6272:	81 11       	cpse	r24, r1
    6274:	27 c0       	rjmp	.+78     	; 0x62c4 <print_menu_frame+0x52>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    6276:	29 e3       	ldi	r18, 0x39	; 57
    6278:	30 e0       	ldi	r19, 0x00	; 0
    627a:	40 e0       	ldi	r20, 0x00	; 0
    627c:	50 e0       	ldi	r21, 0x00	; 0
    627e:	67 e0       	ldi	r22, 0x07	; 7
    6280:	71 e0       	ldi	r23, 0x01	; 1
    6282:	8c e0       	ldi	r24, 0x0C	; 12
    6284:	90 e0       	ldi	r25, 0x00	; 0
    6286:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    628a:	2b e3       	ldi	r18, 0x3B	; 59
    628c:	30 e0       	ldi	r19, 0x00	; 0
    628e:	46 e2       	ldi	r20, 0x26	; 38
    6290:	50 e0       	ldi	r21, 0x00	; 0
    6292:	67 e0       	ldi	r22, 0x07	; 7
    6294:	71 e0       	ldi	r23, 0x01	; 1
    6296:	8a e0       	ldi	r24, 0x0A	; 10
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    629e:	2b e3       	ldi	r18, 0x3B	; 59
    62a0:	30 e0       	ldi	r19, 0x00	; 0
    62a2:	40 e5       	ldi	r20, 0x50	; 80
    62a4:	50 e0       	ldi	r21, 0x00	; 0
    62a6:	67 e0       	ldi	r22, 0x07	; 7
    62a8:	71 e0       	ldi	r23, 0x01	; 1
    62aa:	89 e0       	ldi	r24, 0x09	; 9
    62ac:	90 e0       	ldi	r25, 0x00	; 0
    62ae:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    62b2:	29 e3       	ldi	r18, 0x39	; 57
    62b4:	30 e0       	ldi	r19, 0x00	; 0
    62b6:	48 e7       	ldi	r20, 0x78	; 120
    62b8:	50 e0       	ldi	r21, 0x00	; 0
    62ba:	67 e0       	ldi	r22, 0x07	; 7
    62bc:	71 e0       	ldi	r23, 0x01	; 1
    62be:	8b e0       	ldi	r24, 0x0B	; 11
    62c0:	90 e0       	ldi	r25, 0x00	; 0
    62c2:	26 c0       	rjmp	.+76     	; 0x6310 <print_menu_frame+0x9e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    62c4:	26 e3       	ldi	r18, 0x36	; 54
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	40 e0       	ldi	r20, 0x00	; 0
    62ca:	50 e0       	ldi	r21, 0x00	; 0
    62cc:	6f e1       	ldi	r22, 0x1F	; 31
    62ce:	7a e0       	ldi	r23, 0x0A	; 10
    62d0:	80 e1       	ldi	r24, 0x10	; 16
    62d2:	90 e0       	ldi	r25, 0x00	; 0
    62d4:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    62d8:	2b e3       	ldi	r18, 0x3B	; 59
    62da:	30 e0       	ldi	r19, 0x00	; 0
    62dc:	46 e2       	ldi	r20, 0x26	; 38
    62de:	50 e0       	ldi	r21, 0x00	; 0
    62e0:	67 e0       	ldi	r22, 0x07	; 7
    62e2:	71 e0       	ldi	r23, 0x01	; 1
    62e4:	8a e0       	ldi	r24, 0x0A	; 10
    62e6:	90 e0       	ldi	r25, 0x00	; 0
    62e8:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    62ec:	2b e3       	ldi	r18, 0x3B	; 59
    62ee:	30 e0       	ldi	r19, 0x00	; 0
    62f0:	40 e5       	ldi	r20, 0x50	; 80
    62f2:	50 e0       	ldi	r21, 0x00	; 0
    62f4:	67 e0       	ldi	r22, 0x07	; 7
    62f6:	71 e0       	ldi	r23, 0x01	; 1
    62f8:	89 e0       	ldi	r24, 0x09	; 9
    62fa:	90 e0       	ldi	r25, 0x00	; 0
    62fc:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    6300:	26 e3       	ldi	r18, 0x36	; 54
    6302:	30 e0       	ldi	r19, 0x00	; 0
    6304:	47 e6       	ldi	r20, 0x67	; 103
    6306:	50 e0       	ldi	r21, 0x00	; 0
    6308:	6f e1       	ldi	r22, 0x1F	; 31
    630a:	7a e0       	ldi	r23, 0x0A	; 10
    630c:	81 e1       	ldi	r24, 0x11	; 17
    630e:	90 e0       	ldi	r25, 0x00	; 0
    6310:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer);
    6314:	80 e0       	ldi	r24, 0x00	; 0
    6316:	91 e0       	ldi	r25, 0x01	; 1
    6318:	0c 94 59 22 	jmp	0x44b2	; 0x44b2 <write_buffer>

0000631c <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    631c:	cf 93       	push	r28
    631e:	df 93       	push	r29
    6320:	cd b7       	in	r28, 0x3d	; 61
    6322:	de b7       	in	r29, 0x3e	; 62
    6324:	2a 97       	sbiw	r28, 0x0a	; 10
    6326:	0f b6       	in	r0, 0x3f	; 63
    6328:	f8 94       	cli
    632a:	de bf       	out	0x3e, r29	; 62
    632c:	0f be       	out	0x3f, r0	; 63
    632e:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    6330:	25 e0       	ldi	r18, 0x05	; 5
    6332:	62 9f       	mul	r22, r18
    6334:	80 0d       	add	r24, r0
    6336:	91 1d       	adc	r25, r1
    6338:	11 24       	eor	r1, r1
    633a:	bc 01       	movw	r22, r24
    633c:	45 e0       	ldi	r20, 0x05	; 5
    633e:	50 e0       	ldi	r21, 0x00	; 0
    6340:	ce 01       	movw	r24, r28
    6342:	06 96       	adiw	r24, 0x06	; 6
    6344:	0e 94 44 4c 	call	0x9888	; 0x9888 <memcpy_P>
	return (range);
    6348:	85 e0       	ldi	r24, 0x05	; 5
    634a:	fe 01       	movw	r30, r28
    634c:	36 96       	adiw	r30, 0x06	; 6
    634e:	de 01       	movw	r26, r28
    6350:	11 96       	adiw	r26, 0x01	; 1
    6352:	01 90       	ld	r0, Z+
    6354:	0d 92       	st	X+, r0
    6356:	8a 95       	dec	r24
    6358:	e1 f7       	brne	.-8      	; 0x6352 <get_menu_range+0x36>
    635a:	29 81       	ldd	r18, Y+1	; 0x01
    635c:	3a 81       	ldd	r19, Y+2	; 0x02
    635e:	4b 81       	ldd	r20, Y+3	; 0x03
    6360:	5c 81       	ldd	r21, Y+4	; 0x04
    6362:	6d 81       	ldd	r22, Y+5	; 0x05
}
    6364:	70 e0       	ldi	r23, 0x00	; 0
    6366:	80 e0       	ldi	r24, 0x00	; 0
    6368:	90 e0       	ldi	r25, 0x00	; 0
    636a:	2a 96       	adiw	r28, 0x0a	; 10
    636c:	0f b6       	in	r0, 0x3f	; 63
    636e:	f8 94       	cli
    6370:	de bf       	out	0x3e, r29	; 62
    6372:	0f be       	out	0x3f, r0	; 63
    6374:	cd bf       	out	0x3d, r28	; 61
    6376:	df 91       	pop	r29
    6378:	cf 91       	pop	r28
    637a:	08 95       	ret

0000637c <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    637c:	0f 93       	push	r16
    637e:	1f 93       	push	r17
    6380:	cf 93       	push	r28
    6382:	df 93       	push	r29
    6384:	fa 01       	movw	r30, r20
    6386:	10 e0       	ldi	r17, 0x00	; 0
    6388:	c2 2f       	mov	r28, r18
    638a:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    638c:	66 23       	and	r22, r22
    638e:	19 f0       	breq	.+6      	; 0x6396 <print_menu_text+0x1a>
    6390:	62 50       	subi	r22, 0x02	; 2
    6392:	62 30       	cpi	r22, 0x02	; 2
    6394:	78 f4       	brcc	.+30     	; 0x63b4 <print_menu_text+0x38>
    6396:	4a e0       	ldi	r20, 0x0A	; 10
    6398:	6a e6       	ldi	r22, 0x6A	; 106
    639a:	75 e0       	ldi	r23, 0x05	; 5
    639c:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    63a0:	98 01       	movw	r18, r16
    63a2:	ae 01       	movw	r20, r28
    63a4:	6f e1       	ldi	r22, 0x1F	; 31
    63a6:	7a e0       	ldi	r23, 0x0A	; 10
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    63a8:	df 91       	pop	r29
    63aa:	cf 91       	pop	r28
    63ac:	1f 91       	pop	r17
    63ae:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    63b0:	0c 94 d8 41 	jmp	0x83b0	; 0x83b0 <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    63b4:	98 01       	movw	r18, r16
    63b6:	ae 01       	movw	r20, r28
    63b8:	6f e1       	ldi	r22, 0x1F	; 31
    63ba:	7a e0       	ldi	r23, 0x0A	; 10
    63bc:	cf 01       	movw	r24, r30
	}
}
    63be:	df 91       	pop	r29
    63c0:	cf 91       	pop	r28
    63c2:	1f 91       	pop	r17
    63c4:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    63c6:	0c 94 38 24 	jmp	0x4870	; 0x4870 <LCD_Display_Text>

000063ca <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    63ca:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    63cc:	93 b1       	in	r25, 0x03	; 3
    63ce:	90 7f       	andi	r25, 0xF0	; 240
    63d0:	90 93 f2 07 	sts	0x07F2, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    63d4:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    63d6:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    63d8:	90 91 f2 07 	lds	r25, 0x07F2
    63dc:	90 3f       	cpi	r25, 0xF0	; 240
    63de:	c9 f4       	brne	.+50     	; 0x6412 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    63e0:	83 b1       	in	r24, 0x03	; 3
    63e2:	80 7f       	andi	r24, 0xF0	; 240
    63e4:	e7 ea       	ldi	r30, 0xA7	; 167
    63e6:	f1 e6       	ldi	r31, 0x61	; 97
    63e8:	31 97       	sbiw	r30, 0x01	; 1
    63ea:	f1 f7       	brne	.-4      	; 0x63e8 <poll_buttons+0x1e>
    63ec:	00 c0       	rjmp	.+0      	; 0x63ee <poll_buttons+0x24>
    63ee:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    63f0:	23 b1       	in	r18, 0x03	; 3
    63f2:	48 2f       	mov	r20, r24
    63f4:	50 e0       	ldi	r21, 0x00	; 0
    63f6:	20 7f       	andi	r18, 0xF0	; 240
    63f8:	30 e0       	ldi	r19, 0x00	; 0
    63fa:	42 17       	cp	r20, r18
    63fc:	53 07       	cpc	r21, r19
    63fe:	19 f4       	brne	.+6      	; 0x6406 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    6400:	80 93 f2 07 	sts	0x07F2, r24
    6404:	01 c0       	rjmp	.+2      	; 0x6408 <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    6406:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    6408:	10 92 30 05 	sts	0x0530, r1
		button_multiplier = 1;
    640c:	70 93 f3 07 	sts	0x07F3, r23
    6410:	e3 cf       	rjmp	.-58     	; 0x63d8 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    6412:	66 23       	and	r22, r22
    6414:	71 f0       	breq	.+28     	; 0x6432 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    6416:	90 91 30 05 	lds	r25, 0x0530
    641a:	9f 5f       	subi	r25, 0xFF	; 255
    641c:	90 93 30 05 	sts	0x0530, r25
		if (button_count >= 10)
    6420:	9a 30       	cpi	r25, 0x0A	; 10
    6422:	38 f0       	brcs	.+14     	; 0x6432 <poll_buttons+0x68>
		{
			button_count = 0;
    6424:	10 92 30 05 	sts	0x0530, r1
			button_multiplier ++;
    6428:	90 91 f3 07 	lds	r25, 0x07F3
    642c:	9f 5f       	subi	r25, 0xFF	; 255
    642e:	90 93 f3 07 	sts	0x07F3, r25
		}
	}

	return buttons;
}
    6432:	08 95       	ret

00006434 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    6434:	2f 92       	push	r2
    6436:	3f 92       	push	r3
    6438:	4f 92       	push	r4
    643a:	5f 92       	push	r5
    643c:	6f 92       	push	r6
    643e:	7f 92       	push	r7
    6440:	8f 92       	push	r8
    6442:	9f 92       	push	r9
    6444:	af 92       	push	r10
    6446:	bf 92       	push	r11
    6448:	cf 92       	push	r12
    644a:	df 92       	push	r13
    644c:	ef 92       	push	r14
    644e:	ff 92       	push	r15
    6450:	0f 93       	push	r16
    6452:	1f 93       	push	r17
    6454:	cf 93       	push	r28
    6456:	df 93       	push	r29
    6458:	cd b7       	in	r28, 0x3d	; 61
    645a:	de b7       	in	r29, 0x3e	; 62
    645c:	69 97       	sbiw	r28, 0x19	; 25
    645e:	0f b6       	in	r0, 0x3f	; 63
    6460:	f8 94       	cli
    6462:	de bf       	out	0x3e, r29	; 62
    6464:	0f be       	out	0x3f, r0	; 63
    6466:	cd bf       	out	0x3d, r28	; 61
    6468:	3c 01       	movw	r6, r24
    646a:	79 8b       	std	Y+17, r23	; 0x11
    646c:	68 8b       	std	Y+16, r22	; 0x10
    646e:	4a 87       	std	Y+10, r20	; 0x0a
    6470:	ed 82       	std	Y+5, r14	; 0x05
    6472:	fe 82       	std	Y+6, r15	; 0x06
    6474:	0f 83       	std	Y+7, r16	; 0x07
    6476:	41 2e       	mov	r4, r17
    6478:	18 87       	std	Y+8, r17	; 0x08
    647a:	29 87       	std	Y+9, r18	; 0x09
    647c:	bd 8a       	std	Y+21, r11	; 0x15
    647e:	ac 8a       	std	Y+20, r10	; 0x14
    6480:	4e 2d       	mov	r20, r14
    6482:	3f 2d       	mov	r19, r15
    6484:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    6486:	fb 01       	movw	r30, r22
    6488:	20 81       	ld	r18, Z
    648a:	a2 2e       	mov	r10, r18
    648c:	bb 24       	eor	r11, r11
    648e:	a7 fc       	sbrc	r10, 7
    6490:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    6492:	f2 e0       	ldi	r31, 0x02	; 2
    6494:	1f 13       	cpse	r17, r31
    6496:	05 c0       	rjmp	.+10     	; 0x64a2 <do_menu_item+0x6e>
	{
		value = value * mult;
    6498:	5a 85       	ldd	r21, Y+10	; 0x0a
    649a:	25 03       	mulsu	r18, r21
    649c:	50 01       	movw	r10, r0
    649e:	11 24       	eor	r1, r1
    64a0:	02 c0       	rjmp	.+4      	; 0x64a6 <do_menu_item+0x72>
	}
	else mult = 1;
    64a2:	81 e0       	ldi	r24, 0x01	; 1
    64a4:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    64a6:	20 ef       	ldi	r18, 0xF0	; 240
    64a8:	20 93 f2 07 	sts	0x07F2, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    64ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    64ae:	ef 2f       	mov	r30, r31
    64b0:	f0 e0       	ldi	r31, 0x00	; 0
    64b2:	fb 8b       	std	Y+19, r31	; 0x13
    64b4:	ea 8b       	std	Y+18, r30	; 0x12
    64b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    64b8:	42 03       	mulsu	r20, r18
    64ba:	10 01       	movw	r2, r0
    64bc:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    64be:	32 03       	mulsu	r19, r18
    64c0:	a0 01       	movw	r20, r0
    64c2:	11 24       	eor	r1, r1
    64c4:	5f 87       	std	Y+15, r21	; 0x0f
    64c6:	4e 87       	std	Y+14, r20	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    64c8:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    64ca:	91 2c       	mov	r9, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    64cc:	51 2c       	mov	r5, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    64ce:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    64d0:	83 01       	movw	r16, r6
    64d2:	00 0f       	add	r16, r16
    64d4:	11 1f       	adc	r17, r17
    64d6:	0a 5f       	subi	r16, 0xFA	; 250
    64d8:	11 4f       	sbci	r17, 0xF1	; 241
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    64da:	ec 2d       	mov	r30, r12
    64dc:	ff 27       	eor	r31, r31
    64de:	e7 fd       	sbrc	r30, 7
    64e0:	f0 95       	com	r31
    64e2:	ff 8b       	std	Y+23, r31	; 0x17
    64e4:	ee 8b       	std	Y+22, r30	; 0x16
    64e6:	f0 e8       	ldi	r31, 0x80	; 128
    64e8:	cf 2e       	mov	r12, r31
    64ea:	d1 2c       	mov	r13, r1

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    64ec:	fe ef       	ldi	r31, 0xFE	; 254
    64ee:	f4 0d       	add	r31, r4
    64f0:	f8 8f       	std	Y+24, r31	; 0x18
		else if (range.style == 3)
		{
			// Loop rate = 20ms (50Hz)
			_delay_ms(20);
		}
		else if ((range.style == 0) || (range.style == 2))
    64f2:	24 2d       	mov	r18, r4
    64f4:	2d 7f       	andi	r18, 0xFD	; 253
    64f6:	29 8f       	std	Y+25, r18	; 0x19

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    64f8:	86 e2       	ldi	r24, 0x26	; 38
    64fa:	ee a5       	ldd	r30, Y+46	; 0x2e
    64fc:	ff a5       	ldd	r31, Y+47	; 0x2f
    64fe:	8e 9f       	mul	r24, r30
    6500:	a0 01       	movw	r20, r0
    6502:	8f 9f       	mul	r24, r31
    6504:	50 0d       	add	r21, r0
    6506:	11 24       	eor	r1, r1
    6508:	42 5b       	subi	r20, 0xB2	; 178
    650a:	59 4f       	sbci	r21, 0xF9	; 249
    650c:	5c 87       	std	Y+12, r21	; 0x0c
    650e:	4b 87       	std	Y+11, r20	; 0x0b
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    6510:	80 91 f2 07 	lds	r24, 0x07F2
    6514:	80 3e       	cpi	r24, 0xE0	; 224
    6516:	09 f4       	brne	.+2      	; 0x651a <do_menu_item+0xe6>
    6518:	01 c1       	rjmp	.+514    	; 0x671c <do_menu_item+0x2e8>
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    651a:	88 20       	and	r8, r8
    651c:	11 f0       	breq	.+4      	; 0x6522 <do_menu_item+0xee>
		{
			button_inc = 5; // For servos
    651e:	25 e0       	ldi	r18, 0x05	; 5
    6520:	01 c0       	rjmp	.+2      	; 0x6524 <do_menu_item+0xf0>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    6522:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    6524:	80 3f       	cpi	r24, 0xF0	; 240
    6526:	19 f0       	breq	.+6      	; 0x652e <do_menu_item+0xfa>
		{
			button_update++;
    6528:	53 94       	inc	r5

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    652a:	25 15       	cp	r18, r5
    652c:	10 f4       	brcc	.+4      	; 0x6532 <do_menu_item+0xfe>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    652e:	91 2c       	mov	r9, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    6530:	51 2c       	mov	r5, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    6532:	88 20       	and	r8, r8
    6534:	49 f0       	breq	.+18     	; 0x6548 <do_menu_item+0x114>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    6536:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    6538:	f7 e0       	ldi	r31, 0x07	; 7
    653a:	ff 15       	cp	r31, r15
    653c:	10 f4       	brcc	.+4      	; 0x6542 <do_menu_item+0x10e>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    653e:	80 3f       	cpi	r24, 0xF0	; 240
    6540:	19 f4       	brne	.+6      	; 0x6548 <do_menu_item+0x114>
    6542:	99 23       	and	r25, r25
    6544:	09 f4       	brne	.+2      	; 0x6548 <do_menu_item+0x114>
    6546:	66 c0       	rjmp	.+204    	; 0x6614 <do_menu_item+0x1e0>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    6548:	80 e0       	ldi	r24, 0x00	; 0
    654a:	91 e0       	ldi	r25, 0x01	; 1
    654c:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    6550:	f8 01       	movw	r30, r16
    6552:	85 91       	lpm	r24, Z+
    6554:	94 91       	lpm	r25, Z
    6556:	20 e0       	ldi	r18, 0x00	; 0
    6558:	30 e0       	ldi	r19, 0x00	; 0
    655a:	40 e0       	ldi	r20, 0x00	; 0
    655c:	50 e0       	ldi	r21, 0x00	; 0
    655e:	61 e7       	ldi	r22, 0x71	; 113
    6560:	71 e0       	ldi	r23, 0x01	; 1
    6562:	0e 94 41 24 	call	0x4882	; 0x4882 <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    6566:	44 20       	and	r4, r4
    6568:	19 f0       	breq	.+6      	; 0x6570 <do_menu_item+0x13c>
    656a:	28 8d       	ldd	r18, Y+24	; 0x18
    656c:	22 30       	cpi	r18, 0x02	; 2
    656e:	30 f5       	brcc	.+76     	; 0x65bc <do_menu_item+0x188>
    6570:	4a e0       	ldi	r20, 0x0A	; 10
    6572:	6a e6       	ldi	r22, 0x6A	; 106
    6574:	75 e0       	ldi	r23, 0x05	; 5
    6576:	c5 01       	movw	r24, r10
    6578:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    657c:	ae 01       	movw	r20, r28
    657e:	4f 5f       	subi	r20, 0xFF	; 255
    6580:	5f 4f       	sbci	r21, 0xFF	; 255
    6582:	61 e7       	ldi	r22, 0x71	; 113
    6584:	71 e0       	ldi	r23, 0x01	; 1
    6586:	0e 94 89 40 	call	0x8112	; 0x8112 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    658a:	89 81       	ldd	r24, Y+1	; 0x01
    658c:	9a 81       	ldd	r25, Y+2	; 0x02
    658e:	76 01       	movw	r14, r12
    6590:	e8 1a       	sub	r14, r24
    6592:	f9 0a       	sbc	r15, r25
    6594:	f6 94       	lsr	r15
    6596:	e7 94       	ror	r14
    6598:	4e 89       	ldd	r20, Y+22	; 0x16
    659a:	5f 89       	ldd	r21, Y+23	; 0x17
    659c:	e4 0e       	add	r14, r20
    659e:	f5 1e       	adc	r15, r21
    65a0:	4a e0       	ldi	r20, 0x0A	; 10
    65a2:	6a e6       	ldi	r22, 0x6A	; 106
    65a4:	75 e0       	ldi	r23, 0x05	; 5
    65a6:	c5 01       	movw	r24, r10
    65a8:	0e 94 5f 4c 	call	0x98be	; 0x98be <__itoa_ncheck>
    65ac:	29 e1       	ldi	r18, 0x19	; 25
    65ae:	30 e0       	ldi	r19, 0x00	; 0
    65b0:	a7 01       	movw	r20, r14
    65b2:	61 e7       	ldi	r22, 0x71	; 113
    65b4:	71 e0       	ldi	r23, 0x01	; 1
    65b6:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <mugui_lcd_puts>
    65ba:	24 c0       	rjmp	.+72     	; 0x6604 <do_menu_item+0x1d0>
			}
			else // text
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    65bc:	ec 88       	ldd	r14, Y+20	; 0x14
    65be:	fd 88       	ldd	r15, Y+21	; 0x15
    65c0:	ea 0c       	add	r14, r10
    65c2:	fb 1c       	adc	r15, r11
    65c4:	f7 01       	movw	r30, r14
    65c6:	ee 0f       	add	r30, r30
    65c8:	ff 1f       	adc	r31, r31
    65ca:	ea 5f       	subi	r30, 0xFA	; 250
    65cc:	f1 4f       	sbci	r31, 0xF1	; 241
    65ce:	85 91       	lpm	r24, Z+
    65d0:	94 91       	lpm	r25, Z
    65d2:	0e 94 d7 40 	call	0x81ae	; 0x81ae <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    65d6:	ae 01       	movw	r20, r28
    65d8:	4f 5f       	subi	r20, 0xFF	; 255
    65da:	5f 4f       	sbci	r21, 0xFF	; 255
    65dc:	61 e7       	ldi	r22, 0x71	; 113
    65de:	71 e0       	ldi	r23, 0x01	; 1
    65e0:	8a e6       	ldi	r24, 0x6A	; 106
    65e2:	95 e0       	ldi	r25, 0x05	; 5
    65e4:	0e 94 89 40 	call	0x8112	; 0x8112 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    65e8:	89 81       	ldd	r24, Y+1	; 0x01
    65ea:	9a 81       	ldd	r25, Y+2	; 0x02
    65ec:	a6 01       	movw	r20, r12
    65ee:	48 1b       	sub	r20, r24
    65f0:	59 0b       	sbc	r21, r25
    65f2:	56 95       	lsr	r21
    65f4:	47 95       	ror	r20
    65f6:	29 e1       	ldi	r18, 0x19	; 25
    65f8:	30 e0       	ldi	r19, 0x00	; 0
    65fa:	61 e7       	ldi	r22, 0x71	; 113
    65fc:	71 e0       	ldi	r23, 0x01	; 1
    65fe:	c7 01       	movw	r24, r14
    6600:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    6604:	81 e0       	ldi	r24, 0x01	; 1
    6606:	0e 94 39 31 	call	0x6272	; 0x6272 <print_menu_frame>

			// Write from buffer
			write_buffer(buffer);
    660a:	80 e0       	ldi	r24, 0x00	; 0
    660c:	91 e0       	ldi	r25, 0x01	; 1
    660e:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    6612:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
		
		// Slow the loop rate for text items
		if (range.style == 1)
    6614:	51 e0       	ldi	r21, 0x01	; 1
    6616:	45 12       	cpse	r4, r21
    6618:	08 c0       	rjmp	.+16     	; 0x662a <do_menu_item+0x1f6>
    661a:	8f e3       	ldi	r24, 0x3F	; 63
    661c:	92 e4       	ldi	r25, 0x42	; 66
    661e:	ef e0       	ldi	r30, 0x0F	; 15
    6620:	81 50       	subi	r24, 0x01	; 1
    6622:	90 40       	sbci	r25, 0x00	; 0
    6624:	e0 40       	sbci	r30, 0x00	; 0
    6626:	e1 f7       	brne	.-8      	; 0x6620 <do_menu_item+0x1ec>
    6628:	15 c0       	rjmp	.+42     	; 0x6654 <do_menu_item+0x220>
		{
			// Loop rate = 250ms (4Hz)
			_delay_ms(250);
		}
		else if (range.style == 3)
    662a:	f3 e0       	ldi	r31, 0x03	; 3
    662c:	4f 12       	cpse	r4, r31
    662e:	08 c0       	rjmp	.+16     	; 0x6640 <do_menu_item+0x20c>
    6630:	2f e7       	ldi	r18, 0x7F	; 127
    6632:	38 e3       	ldi	r19, 0x38	; 56
    6634:	41 e0       	ldi	r20, 0x01	; 1
    6636:	21 50       	subi	r18, 0x01	; 1
    6638:	30 40       	sbci	r19, 0x00	; 0
    663a:	40 40       	sbci	r20, 0x00	; 0
    663c:	e1 f7       	brne	.-8      	; 0x6636 <do_menu_item+0x202>
    663e:	0a c0       	rjmp	.+20     	; 0x6654 <do_menu_item+0x220>
		{
			// Loop rate = 20ms (50Hz)
			_delay_ms(20);
		}
		else if ((range.style == 0) || (range.style == 2))
    6640:	59 8d       	ldd	r21, Y+25	; 0x19
    6642:	51 11       	cpse	r21, r1
    6644:	09 c0       	rjmp	.+18     	; 0x6658 <do_menu_item+0x224>
    6646:	8f e7       	ldi	r24, 0x7F	; 127
    6648:	9a e1       	ldi	r25, 0x1A	; 26
    664a:	e6 e0       	ldi	r30, 0x06	; 6
    664c:	81 50       	subi	r24, 0x01	; 1
    664e:	90 40       	sbci	r25, 0x00	; 0
    6650:	e0 40       	sbci	r30, 0x00	; 0
    6652:	e1 f7       	brne	.-8      	; 0x664c <do_menu_item+0x218>
    6654:	00 c0       	rjmp	.+0      	; 0x6656 <do_menu_item+0x222>
    6656:	00 00       	nop
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    6658:	88 20       	and	r8, r8
    665a:	41 f0       	breq	.+16     	; 0x666c <do_menu_item+0x238>
		{
			button = (PINB & 0xf0);	
    665c:	83 b1       	in	r24, 0x03	; 3
    665e:	80 7f       	andi	r24, 0xF0	; 240
    6660:	80 93 f2 07 	sts	0x07F2, r24
			button_multiplier = 1;
    6664:	81 e0       	ldi	r24, 0x01	; 1
    6666:	80 93 f3 07 	sts	0x07F3, r24
    666a:	03 c0       	rjmp	.+6      	; 0x6672 <do_menu_item+0x23e>
		}
		else
		{
			poll_buttons(true);
    666c:	81 e0       	ldi	r24, 0x01	; 1
    666e:	0e 94 e5 31 	call	0x63ca	; 0x63ca <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    6672:	80 91 f2 07 	lds	r24, 0x07F2
    6676:	80 3f       	cpi	r24, 0xF0	; 240
    6678:	39 f1       	breq	.+78     	; 0x66c8 <do_menu_item+0x294>
    667a:	88 20       	and	r8, r8
    667c:	c9 f0       	breq	.+50     	; 0x66b0 <do_menu_item+0x27c>
		{
				button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    667e:	80 3d       	cpi	r24, 0xD0	; 208
    6680:	51 f4       	brne	.+20     	; 0x6696 <do_menu_item+0x262>
		{
			if (button_lock == false)
    6682:	91 10       	cpse	r9, r1
    6684:	70 c0       	rjmp	.+224    	; 0x6766 <do_menu_item+0x332>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    6686:	80 91 f3 07 	lds	r24, 0x07F3
    668a:	fd 85       	ldd	r31, Y+13	; 0x0d
    668c:	f8 9f       	mul	r31, r24
    668e:	a0 18       	sub	r10, r0
    6690:	b1 08       	sbc	r11, r1
    6692:	11 24       	eor	r1, r1
    6694:	0b c0       	rjmp	.+22     	; 0x66ac <do_menu_item+0x278>
				button_update = 0;
			}
		}

		if (button == UP)
    6696:	80 3b       	cpi	r24, 0xB0	; 176
    6698:	81 f4       	brne	.+32     	; 0x66ba <do_menu_item+0x286>
		{
			if (button_lock == false)
    669a:	91 10       	cpse	r9, r1
    669c:	64 c0       	rjmp	.+200    	; 0x6766 <do_menu_item+0x332>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    669e:	80 91 f3 07 	lds	r24, 0x07F3
    66a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    66a4:	28 9f       	mul	r18, r24
    66a6:	a0 0c       	add	r10, r0
    66a8:	b1 1c       	adc	r11, r1
    66aa:	11 24       	eor	r1, r1
				button_update = 0;
    66ac:	51 2c       	mov	r5, r1
    66ae:	5b c0       	rjmp	.+182    	; 0x6766 <do_menu_item+0x332>
		{
				button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    66b0:	80 3d       	cpi	r24, 0xD0	; 208
    66b2:	49 f3       	breq	.-46     	; 0x6686 <do_menu_item+0x252>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    66b4:	80 3b       	cpi	r24, 0xB0	; 176
    66b6:	99 f3       	breq	.-26     	; 0x669e <do_menu_item+0x26a>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
				button_lock = false;
    66b8:	91 2c       	mov	r9, r1
				value = value + (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == BACK)	
    66ba:	80 37       	cpi	r24, 0x70	; 112
    66bc:	29 f4       	brne	.+10     	; 0x66c8 <do_menu_item+0x294>
		{
			value = (range.default_value * mult);
    66be:	29 85       	ldd	r18, Y+9	; 0x09
    66c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    66c2:	23 03       	mulsu	r18, r19
    66c4:	50 01       	movw	r10, r0
    66c6:	11 24       	eor	r1, r1
    66c8:	a2 14       	cp	r10, r2
    66ca:	b3 04       	cpc	r11, r3
    66cc:	0c f4       	brge	.+2      	; 0x66d0 <do_menu_item+0x29c>
    66ce:	51 01       	movw	r10, r2
    66d0:	4e 85       	ldd	r20, Y+14	; 0x0e
    66d2:	5f 85       	ldd	r21, Y+15	; 0x0f
    66d4:	4a 15       	cp	r20, r10
    66d6:	5b 05       	cpc	r21, r11
    66d8:	0c f4       	brge	.+2      	; 0x66dc <do_menu_item+0x2a8>
    66da:	5a 01       	movw	r10, r20
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    66dc:	5f e9       	ldi	r21, 0x9F	; 159
    66de:	65 16       	cp	r6, r21
    66e0:	71 04       	cpc	r7, r1
    66e2:	19 f4       	brne	.+6      	; 0x66ea <do_menu_item+0x2b6>
		{
			st7565_set_brightness(value);
    66e4:	8a 2d       	mov	r24, r10
    66e6:	0e 94 31 22 	call	0x4462	; 0x4462 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    66ea:	88 20       	and	r8, r8
    66ec:	a9 f0       	breq	.+42     	; 0x6718 <do_menu_item+0x2e4>
			(servo_enable) &&
    66ee:	eb 85       	ldd	r30, Y+11	; 0x0b
    66f0:	fc 85       	ldd	r31, Y+12	; 0x0c
    66f2:	80 81       	ld	r24, Z
    66f4:	82 30       	cpi	r24, 0x02	; 2
    66f6:	81 f0       	breq	.+32     	; 0x6718 <do_menu_item+0x2e4>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    66f8:	8a 2d       	mov	r24, r10
    66fa:	0e 94 82 40 	call	0x8104	; 0x8104 <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    66fe:	86 5a       	subi	r24, 0xA6	; 166
    6700:	9e 40       	sbci	r25, 0x0E	; 14
    6702:	95 95       	asr	r25
    6704:	87 95       	ror	r24

			cli();
    6706:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6708:	bc 01       	movw	r22, r24
    670a:	64 52       	subi	r22, 0x24	; 36
    670c:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    670e:	8e a5       	ldd	r24, Y+46	; 0x2e
    6710:	9f a5       	ldd	r25, Y+47	; 0x2f
    6712:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <output_servo_ppm_asm3>
			sei();
    6716:	78 94       	sei
    6718:	90 e0       	ldi	r25, 0x00	; 0
    671a:	fa ce       	rjmp	.-524    	; 0x6510 <do_menu_item+0xdc>

	// Exit
	button = ENTER;

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    671c:	f2 e0       	ldi	r31, 0x02	; 2
    671e:	4f 12       	cpse	r4, r31
    6720:	06 c0       	rjmp	.+12     	; 0x672e <do_menu_item+0x2fa>
	{
		value = value / mult;
    6722:	c5 01       	movw	r24, r10
    6724:	6a 89       	ldd	r22, Y+18	; 0x12
    6726:	7b 89       	ldd	r23, Y+19	; 0x13
    6728:	0e 94 b8 4b 	call	0x9770	; 0x9770 <__divmodhi4>
    672c:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    672e:	e8 89       	ldd	r30, Y+16	; 0x10
    6730:	f9 89       	ldd	r31, Y+17	; 0x11
    6732:	a0 82       	st	Z, r10
}
    6734:	69 96       	adiw	r28, 0x19	; 25
    6736:	0f b6       	in	r0, 0x3f	; 63
    6738:	f8 94       	cli
    673a:	de bf       	out	0x3e, r29	; 62
    673c:	0f be       	out	0x3f, r0	; 63
    673e:	cd bf       	out	0x3d, r28	; 61
    6740:	df 91       	pop	r29
    6742:	cf 91       	pop	r28
    6744:	1f 91       	pop	r17
    6746:	0f 91       	pop	r16
    6748:	ff 90       	pop	r15
    674a:	ef 90       	pop	r14
    674c:	df 90       	pop	r13
    674e:	cf 90       	pop	r12
    6750:	bf 90       	pop	r11
    6752:	af 90       	pop	r10
    6754:	9f 90       	pop	r9
    6756:	8f 90       	pop	r8
    6758:	7f 90       	pop	r7
    675a:	6f 90       	pop	r6
    675c:	5f 90       	pop	r5
    675e:	4f 90       	pop	r4
    6760:	3f 90       	pop	r3
    6762:	2f 90       	pop	r2
    6764:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
				button_lock = false;
    6766:	99 24       	eor	r9, r9
    6768:	93 94       	inc	r9
    676a:	ae cf       	rjmp	.-164    	; 0x66c8 <do_menu_item+0x294>

0000676c <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    676c:	90 e0       	ldi	r25, 0x00	; 0
    676e:	98 17       	cp	r25, r24
    6770:	81 f0       	breq	.+32     	; 0x6792 <menu_beep+0x26>
	{ 
		LVA = 1;
    6772:	29 9a       	sbi	0x05, 1	; 5
    6774:	ef e0       	ldi	r30, 0x0F	; 15
    6776:	f7 e2       	ldi	r31, 0x27	; 39
    6778:	31 97       	sbiw	r30, 0x01	; 1
    677a:	f1 f7       	brne	.-4      	; 0x6778 <menu_beep+0xc>
    677c:	00 c0       	rjmp	.+0      	; 0x677e <menu_beep+0x12>
    677e:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    6780:	29 98       	cbi	0x05, 1	; 5
    6782:	ef e0       	ldi	r30, 0x0F	; 15
    6784:	f7 e2       	ldi	r31, 0x27	; 39
    6786:	31 97       	sbiw	r30, 0x01	; 1
    6788:	f1 f7       	brne	.-4      	; 0x6786 <menu_beep+0x1a>
    678a:	00 c0       	rjmp	.+0      	; 0x678c <menu_beep+0x20>
    678c:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    678e:	9f 5f       	subi	r25, 0xFF	; 255
    6790:	ee cf       	rjmp	.-36     	; 0x676e <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    6792:	08 95       	ret

00006794 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint16_t items, uint16_t start, uint16_t offset, uint8_t button, uint16_t* cursor, uint16_t* top, uint16_t* temp)
{
    6794:	6f 92       	push	r6
    6796:	7f 92       	push	r7
    6798:	8f 92       	push	r8
    679a:	9f 92       	push	r9
    679c:	af 92       	push	r10
    679e:	bf 92       	push	r11
    67a0:	cf 92       	push	r12
    67a2:	df 92       	push	r13
    67a4:	ef 92       	push	r14
    67a6:	ff 92       	push	r15
    67a8:	0f 93       	push	r16
    67aa:	1f 93       	push	r17
    67ac:	cf 93       	push	r28
    67ae:	df 93       	push	r29
    67b0:	5c 01       	movw	r10, r24
    67b2:	4b 01       	movw	r8, r22
    67b4:	3a 01       	movw	r6, r20
    67b6:	e8 01       	movw	r28, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    67b8:	d7 01       	movw	r26, r14
    67ba:	ed 91       	ld	r30, X+
    67bc:	fc 91       	ld	r31, X
    67be:	11 97       	sbiw	r26, 0x01	; 1
    67c0:	e4 0f       	add	r30, r20
    67c2:	f5 1f       	adc	r31, r21
    67c4:	ed 93       	st	X+, r30
    67c6:	fc 93       	st	X, r31
	start = start + offset;
    67c8:	84 0e       	add	r8, r20
    67ca:	95 1e       	adc	r9, r21

	// Calculate which function has been requested
	if (button == ENTER)
    67cc:	20 3e       	cpi	r18, 0xE0	; 224
    67ce:	c1 f4       	brne	.+48     	; 0x6800 <update_menu+0x6c>
	{
		switch(*cursor) 
    67d0:	88 81       	ld	r24, Y
    67d2:	99 81       	ldd	r25, Y+1	; 0x01
    67d4:	8f 30       	cpi	r24, 0x0F	; 15
    67d6:	91 05       	cpc	r25, r1
    67d8:	61 f0       	breq	.+24     	; 0x67f2 <update_menu+0x5e>
    67da:	18 f4       	brcc	.+6      	; 0x67e2 <update_menu+0x4e>
    67dc:	03 97       	sbiw	r24, 0x03	; 3
    67de:	51 f0       	breq	.+20     	; 0x67f4 <update_menu+0x60>
    67e0:	55 c0       	rjmp	.+170    	; 0x688c <update_menu+0xf8>
    67e2:	8b 31       	cpi	r24, 0x1B	; 27
    67e4:	91 05       	cpc	r25, r1
    67e6:	51 f0       	breq	.+20     	; 0x67fc <update_menu+0x68>
    67e8:	87 97       	sbiw	r24, 0x27	; 39
    67ea:	09 f0       	breq	.+2      	; 0x67ee <update_menu+0x5a>
    67ec:	4f c0       	rjmp	.+158    	; 0x688c <update_menu+0xf8>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    67ee:	33 96       	adiw	r30, 0x03	; 3
    67f0:	01 c0       	rjmp	.+2      	; 0x67f4 <update_menu+0x60>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    67f2:	31 96       	adiw	r30, 0x01	; 1
    67f4:	d6 01       	movw	r26, r12
    67f6:	ed 93       	st	X+, r30
    67f8:	fc 93       	st	X, r31
				break;	
    67fa:	48 c0       	rjmp	.+144    	; 0x688c <update_menu+0xf8>
			case LINE2:
				*temp = *top + 2;
    67fc:	32 96       	adiw	r30, 0x02	; 2
    67fe:	fa cf       	rjmp	.-12     	; 0x67f4 <update_menu+0x60>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    6800:	20 3d       	cpi	r18, 0xD0	; 208
    6802:	39 f5       	brne	.+78     	; 0x6852 <update_menu+0xbe>
	{
		switch(*cursor) 
    6804:	88 81       	ld	r24, Y
    6806:	99 81       	ldd	r25, Y+1	; 0x01
    6808:	8f 30       	cpi	r24, 0x0F	; 15
    680a:	91 05       	cpc	r25, r1
    680c:	79 f0       	breq	.+30     	; 0x682c <update_menu+0x98>
    680e:	18 f4       	brcc	.+6      	; 0x6816 <update_menu+0x82>
    6810:	03 97       	sbiw	r24, 0x03	; 3
    6812:	39 f0       	breq	.+14     	; 0x6822 <update_menu+0x8e>
    6814:	1b c0       	rjmp	.+54     	; 0x684c <update_menu+0xb8>
    6816:	8b 31       	cpi	r24, 0x1B	; 27
    6818:	91 05       	cpc	r25, r1
    681a:	69 f0       	breq	.+26     	; 0x6836 <update_menu+0xa2>
    681c:	87 97       	sbiw	r24, 0x27	; 39
    681e:	91 f0       	breq	.+36     	; 0x6844 <update_menu+0xb0>
    6820:	15 c0       	rjmp	.+42     	; 0x684c <update_menu+0xb8>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    6822:	b2 e0       	ldi	r27, 0x02	; 2
    6824:	ab 16       	cp	r10, r27
    6826:	b1 04       	cpc	r11, r1
    6828:	20 f5       	brcc	.+72     	; 0x6872 <update_menu+0xde>
    682a:	30 c0       	rjmp	.+96     	; 0x688c <update_menu+0xf8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    682c:	e3 e0       	ldi	r30, 0x03	; 3
    682e:	ae 16       	cp	r10, r30
    6830:	b1 04       	cpc	r11, r1
    6832:	60 f1       	brcs	.+88     	; 0x688c <update_menu+0xf8>
    6834:	1b c0       	rjmp	.+54     	; 0x686c <update_menu+0xd8>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    6836:	f4 e0       	ldi	r31, 0x04	; 4
    6838:	af 16       	cp	r10, r31
    683a:	b1 04       	cpc	r11, r1
    683c:	38 f1       	brcs	.+78     	; 0x688c <update_menu+0xf8>
    683e:	87 e2       	ldi	r24, 0x27	; 39
    6840:	90 e0       	ldi	r25, 0x00	; 0
    6842:	1f c0       	rjmp	.+62     	; 0x6882 <update_menu+0xee>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    6844:	25 e0       	ldi	r18, 0x05	; 5
    6846:	a2 16       	cp	r10, r18
    6848:	b1 04       	cpc	r11, r1
    684a:	00 f1       	brcs	.+64     	; 0x688c <update_menu+0xf8>
				break;
			default:
				*cursor = NEXTLINE;
    684c:	88 e2       	ldi	r24, 0x28	; 40
    684e:	90 e0       	ldi	r25, 0x00	; 0
    6850:	18 c0       	rjmp	.+48     	; 0x6882 <update_menu+0xee>
				break;
		}
	}

	if (button == UP)	
    6852:	20 3b       	cpi	r18, 0xB0	; 176
    6854:	c9 f4       	brne	.+50     	; 0x6888 <update_menu+0xf4>
	{
		switch(*cursor) 
    6856:	88 81       	ld	r24, Y
    6858:	99 81       	ldd	r25, Y+1	; 0x01
    685a:	8f 30       	cpi	r24, 0x0F	; 15
    685c:	91 05       	cpc	r25, r1
    685e:	61 f0       	breq	.+24     	; 0x6878 <update_menu+0xe4>
    6860:	70 f0       	brcs	.+28     	; 0x687e <update_menu+0xea>
    6862:	8b 31       	cpi	r24, 0x1B	; 27
    6864:	91 05       	cpc	r25, r1
    6866:	29 f0       	breq	.+10     	; 0x6872 <update_menu+0xde>
    6868:	87 97       	sbiw	r24, 0x27	; 39
    686a:	49 f4       	brne	.+18     	; 0x687e <update_menu+0xea>
		{
			case LINE3:
				*cursor = LINE2;
    686c:	8b e1       	ldi	r24, 0x1B	; 27
    686e:	90 e0       	ldi	r25, 0x00	; 0
    6870:	08 c0       	rjmp	.+16     	; 0x6882 <update_menu+0xee>
				break;	
			case LINE2:
				*cursor = LINE1;
    6872:	8f e0       	ldi	r24, 0x0F	; 15
    6874:	90 e0       	ldi	r25, 0x00	; 0
    6876:	05 c0       	rjmp	.+10     	; 0x6882 <update_menu+0xee>
				break;
			case LINE1:
				*cursor = LINE0;
    6878:	83 e0       	ldi	r24, 0x03	; 3
    687a:	90 e0       	ldi	r25, 0x00	; 0
    687c:	02 c0       	rjmp	.+4      	; 0x6882 <update_menu+0xee>
				break;
			case LINE0:
				*cursor = PREVLINE;
    687e:	82 e0       	ldi	r24, 0x02	; 2
    6880:	90 e0       	ldi	r25, 0x00	; 0
    6882:	99 83       	std	Y+1, r25	; 0x01
    6884:	88 83       	st	Y, r24
				break;
    6886:	02 c0       	rjmp	.+4      	; 0x688c <update_menu+0xf8>
				*cursor = PREVLINE;
				break;
		}
	}

	if (button != NONE)	
    6888:	20 3f       	cpi	r18, 0xF0	; 240
    688a:	61 f0       	breq	.+24     	; 0x68a4 <update_menu+0x110>
	{
		menu_beep(1);
    688c:	81 e0       	ldi	r24, 0x01	; 1
    688e:	0e 94 b6 33 	call	0x676c	; 0x676c <menu_beep>
    6892:	4f ef       	ldi	r20, 0xFF	; 255
    6894:	84 e3       	ldi	r24, 0x34	; 52
    6896:	9c e0       	ldi	r25, 0x0C	; 12
    6898:	41 50       	subi	r20, 0x01	; 1
    689a:	80 40       	sbci	r24, 0x00	; 0
    689c:	90 40       	sbci	r25, 0x00	; 0
    689e:	e1 f7       	brne	.-8      	; 0x6898 <update_menu+0x104>
    68a0:	00 c0       	rjmp	.+0      	; 0x68a2 <update_menu+0x10e>
    68a2:	00 00       	nop
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    68a4:	88 81       	ld	r24, Y
    68a6:	99 81       	ldd	r25, Y+1	; 0x01
    68a8:	02 97       	sbiw	r24, 0x02	; 2
    68aa:	71 f4       	brne	.+28     	; 0x68c8 <update_menu+0x134>
	{
		*cursor  = LINE0;
    68ac:	83 e0       	ldi	r24, 0x03	; 3
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	99 83       	std	Y+1, r25	; 0x01
    68b2:	88 83       	st	Y, r24
		if (*top > start) 
    68b4:	d7 01       	movw	r26, r14
    68b6:	8d 91       	ld	r24, X+
    68b8:	9c 91       	ld	r25, X
    68ba:	11 97       	sbiw	r26, 0x01	; 1
    68bc:	88 16       	cp	r8, r24
    68be:	99 06       	cpc	r9, r25
    68c0:	18 f4       	brcc	.+6      	; 0x68c8 <update_menu+0x134>
		{
			*top = *top - 1;								// Shuffle list up
    68c2:	01 97       	sbiw	r24, 0x01	; 1
    68c4:	8d 93       	st	X+, r24
    68c6:	9c 93       	st	X, r25
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    68c8:	88 81       	ld	r24, Y
    68ca:	99 81       	ldd	r25, Y+1	; 0x01
    68cc:	88 97       	sbiw	r24, 0x28	; 40
    68ce:	b1 f4       	brne	.+44     	; 0x68fc <update_menu+0x168>
	{
		*cursor  = LINE3;
    68d0:	87 e2       	ldi	r24, 0x27	; 39
    68d2:	90 e0       	ldi	r25, 0x00	; 0
    68d4:	99 83       	std	Y+1, r25	; 0x01
    68d6:	88 83       	st	Y, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    68d8:	f7 01       	movw	r30, r14
    68da:	80 81       	ld	r24, Z
    68dc:	91 81       	ldd	r25, Z+1	; 0x01
    68de:	9c 01       	movw	r18, r24
    68e0:	2d 5f       	subi	r18, 0xFD	; 253
    68e2:	3f 4f       	sbci	r19, 0xFF	; 255
    68e4:	f1 e0       	ldi	r31, 0x01	; 1
    68e6:	af 1a       	sub	r10, r31
    68e8:	b1 08       	sbc	r11, r1
    68ea:	a8 0c       	add	r10, r8
    68ec:	b9 1c       	adc	r11, r9
    68ee:	2a 15       	cp	r18, r10
    68f0:	3b 05       	cpc	r19, r11
    68f2:	20 f4       	brcc	.+8      	; 0x68fc <update_menu+0x168>
		{
			*top = *top + 1;								// Shuffle list down
    68f4:	01 96       	adiw	r24, 0x01	; 1
    68f6:	d7 01       	movw	r26, r14
    68f8:	8d 93       	st	X+, r24
    68fa:	9c 93       	st	X, r25
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    68fc:	f7 01       	movw	r30, r14
    68fe:	80 81       	ld	r24, Z
    6900:	91 81       	ldd	r25, Z+1	; 0x01
    6902:	86 19       	sub	r24, r6
    6904:	97 09       	sbc	r25, r7
    6906:	91 83       	std	Z+1, r25	; 0x01
    6908:	80 83       	st	Z, r24
}
    690a:	df 91       	pop	r29
    690c:	cf 91       	pop	r28
    690e:	1f 91       	pop	r17
    6910:	0f 91       	pop	r16
    6912:	ff 90       	pop	r15
    6914:	ef 90       	pop	r14
    6916:	df 90       	pop	r13
    6918:	cf 90       	pop	r12
    691a:	bf 90       	pop	r11
    691c:	af 90       	pop	r10
    691e:	9f 90       	pop	r9
    6920:	8f 90       	pop	r8
    6922:	7f 90       	pop	r7
    6924:	6f 90       	pop	r6
    6926:	08 95       	ret

00006928 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    6928:	28 2f       	mov	r18, r24
    692a:	30 e0       	ldi	r19, 0x00	; 0
    692c:	43 e0       	ldi	r20, 0x03	; 3
    692e:	50 e0       	ldi	r21, 0x00	; 0
    6930:	67 e0       	ldi	r22, 0x07	; 7
    6932:	71 e0       	ldi	r23, 0x01	; 1
    6934:	8d e0       	ldi	r24, 0x0D	; 13
    6936:	90 e0       	ldi	r25, 0x00	; 0
    6938:	0c 94 38 24 	jmp	0x4870	; 0x4870 <LCD_Display_Text>

0000693c <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint16_t MenuOffsets, const uint16_t* text_link, uint16_t cursor)
{
    693c:	2f 92       	push	r2
    693e:	3f 92       	push	r3
    6940:	4f 92       	push	r4
    6942:	5f 92       	push	r5
    6944:	6f 92       	push	r6
    6946:	7f 92       	push	r7
    6948:	8f 92       	push	r8
    694a:	9f 92       	push	r9
    694c:	af 92       	push	r10
    694e:	bf 92       	push	r11
    6950:	cf 92       	push	r12
    6952:	df 92       	push	r13
    6954:	ef 92       	push	r14
    6956:	ff 92       	push	r15
    6958:	0f 93       	push	r16
    695a:	1f 93       	push	r17
    695c:	cf 93       	push	r28
    695e:	df 93       	push	r29
    6960:	cd b7       	in	r28, 0x3d	; 61
    6962:	de b7       	in	r29, 0x3e	; 62
    6964:	2c 97       	sbiw	r28, 0x0c	; 12
    6966:	0f b6       	in	r0, 0x3f	; 63
    6968:	f8 94       	cli
    696a:	de bf       	out	0x3e, r29	; 62
    696c:	0f be       	out	0x3f, r0	; 63
    696e:	cd bf       	out	0x3d, r28	; 61
    6970:	2c 01       	movw	r4, r24
    6972:	4a 01       	movw	r8, r20
    6974:	3f 83       	std	Y+7, r19	; 0x07
    6976:	2e 83       	std	Y+6, r18	; 0x06
    6978:	08 87       	std	Y+8, r16	; 0x08
    697a:	e9 86       	std	Y+9, r14	; 0x09
    697c:	aa 86       	std	Y+10, r10	; 0x0a
	uint16_t base = 0;
	uint16_t offset = 0;
	uint16_t text = 0;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    697e:	80 e0       	ldi	r24, 0x00	; 0
    6980:	91 e0       	ldi	r25, 0x01	; 1
    6982:	6b 87       	std	Y+11, r22	; 0x0b
    6984:	7c 87       	std	Y+12, r23	; 0x0c
    6986:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>
	print_menu_frame(0);
    698a:	80 e0       	ldi	r24, 0x00	; 0
    698c:	0e 94 39 31 	call	0x6272	; 0x6272 <print_menu_frame>
    6990:	25 e0       	ldi	r18, 0x05	; 5
    6992:	6b 85       	ldd	r22, Y+11	; 0x0b
    6994:	7c 85       	ldd	r23, Y+12	; 0x0c
    6996:	26 9f       	mul	r18, r22
    6998:	c0 01       	movw	r24, r0
    699a:	27 9f       	mul	r18, r23
    699c:	90 0d       	add	r25, r0
    699e:	11 24       	eor	r1, r1
    69a0:	2e 80       	ldd	r2, Y+6	; 0x06
    69a2:	3f 80       	ldd	r3, Y+7	; 0x07
    69a4:	28 1a       	sub	r2, r24
    69a6:	39 0a       	sbc	r3, r25
    69a8:	24 9d       	mul	r18, r4
    69aa:	c0 01       	movw	r24, r0
    69ac:	25 9d       	mul	r18, r5
    69ae:	90 0d       	add	r25, r0
    69b0:	11 24       	eor	r1, r1
    69b2:	28 0e       	add	r2, r24
    69b4:	39 1e       	adc	r3, r25
    69b6:	cb 01       	movw	r24, r22
    69b8:	88 0f       	add	r24, r24
    69ba:	99 1f       	adc	r25, r25
    69bc:	c8 1a       	sub	r12, r24
    69be:	d9 0a       	sbc	r13, r25
    69c0:	c2 01       	movw	r24, r4
    69c2:	88 0f       	add	r24, r24
    69c4:	99 1f       	adc	r25, r25
    69c6:	c8 0e       	add	r12, r24
    69c8:	d9 1e       	adc	r13, r25
    69ca:	72 01       	movw	r14, r4
    69cc:	a1 2c       	mov	r10, r1
    69ce:	b1 2c       	mov	r11, r1
    69d0:	41 2c       	mov	r4, r1
    69d2:	51 2c       	mov	r5, r1
    69d4:	19 e6       	ldi	r17, 0x69	; 105
    69d6:	61 2e       	mov	r6, r17
    69d8:	18 e1       	ldi	r17, 0x18	; 24
    69da:	71 2e       	mov	r7, r17
    69dc:	6e 18       	sub	r6, r14
    69de:	7f 08       	sbc	r7, r15
    69e0:	86 1a       	sub	r8, r22
    69e2:	97 0a       	sbc	r9, r23
    69e4:	83 01       	movw	r16, r6
    69e6:	0e 0d       	add	r16, r14
    69e8:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    69ea:	f8 01       	movw	r30, r16
    69ec:	24 91       	lpm	r18, Z
    69ee:	30 e0       	ldi	r19, 0x00	; 0
    69f0:	4a e0       	ldi	r20, 0x0A	; 10
    69f2:	50 e0       	ldi	r21, 0x00	; 0
    69f4:	6f e1       	ldi	r22, 0x1F	; 31
    69f6:	7a e0       	ldi	r23, 0x0A	; 10
    69f8:	c7 01       	movw	r24, r14
    69fa:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    69fe:	f8 85       	ldd	r31, Y+8	; 0x08
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6a00:	45 e0       	ldi	r20, 0x05	; 5
    6a02:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6a04:	f1 11       	cpse	r31, r1
    6a06:	04 c0       	rjmp	.+8      	; 0x6a10 <print_menu_items+0xd4>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6a08:	b5 01       	movw	r22, r10
    6a0a:	62 0d       	add	r22, r2
    6a0c:	73 1d       	adc	r23, r3
    6a0e:	02 c0       	rjmp	.+4      	; 0x6a14 <print_menu_items+0xd8>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    6a10:	6e 81       	ldd	r22, Y+6	; 0x06
    6a12:	7f 81       	ldd	r23, Y+7	; 0x07
    6a14:	ce 01       	movw	r24, r28
    6a16:	01 96       	adiw	r24, 0x01	; 1
    6a18:	0e 94 44 4c 	call	0x9888	; 0x9888 <memcpy_P>
    6a1c:	f2 01       	movw	r30, r4
    6a1e:	ec 0d       	add	r30, r12
    6a20:	fd 1d       	adc	r31, r13
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
    6a22:	45 91       	lpm	r20, Z+
    6a24:	54 91       	lpm	r21, Z
    6a26:	f4 01       	movw	r30, r8
    6a28:	ee 0d       	add	r30, r14
    6a2a:	ff 1d       	adc	r31, r15
		offset = values[top + i - start];
    6a2c:	80 81       	ld	r24, Z
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    6a2e:	f8 01       	movw	r30, r16
    6a30:	04 91       	lpm	r16, Z
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
		offset = values[top + i - start];
    6a32:	99 27       	eor	r25, r25
    6a34:	87 fd       	sbrc	r24, 7
    6a36:	90 95       	com	r25
		text = base + offset;
    6a38:	48 0f       	add	r20, r24
    6a3a:	59 1f       	adc	r21, r25
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    6a3c:	29 85       	ldd	r18, Y+9	; 0x09
    6a3e:	6c 81       	ldd	r22, Y+4	; 0x04
    6a40:	0e 94 be 31 	call	0x637c	; 0x637c <print_menu_text>
    6a44:	ff ef       	ldi	r31, 0xFF	; 255
    6a46:	ef 1a       	sub	r14, r31
    6a48:	ff 0a       	sbc	r15, r31
    6a4a:	82 e0       	ldi	r24, 0x02	; 2
    6a4c:	48 0e       	add	r4, r24
    6a4e:	51 1c       	adc	r5, r1
    6a50:	e5 e0       	ldi	r30, 0x05	; 5
    6a52:	ae 0e       	add	r10, r30
    6a54:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    6a56:	f4 e1       	ldi	r31, 0x14	; 20
    6a58:	af 16       	cp	r10, r31
    6a5a:	b1 04       	cpc	r11, r1
    6a5c:	09 f0       	breq	.+2      	; 0x6a60 <print_menu_items+0x124>
    6a5e:	c2 cf       	rjmp	.-124    	; 0x69e4 <print_menu_items+0xa8>
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    6a60:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a62:	0e 94 94 34 	call	0x6928	; 0x6928 <print_cursor>
	write_buffer(buffer);
    6a66:	80 e0       	ldi	r24, 0x00	; 0
    6a68:	91 e0       	ldi	r25, 0x01	; 1
    6a6a:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>
	poll_buttons(true);
    6a6e:	81 e0       	ldi	r24, 0x01	; 1
    6a70:	0e 94 e5 31 	call	0x63ca	; 0x63ca <poll_buttons>
}
    6a74:	2c 96       	adiw	r28, 0x0c	; 12
    6a76:	0f b6       	in	r0, 0x3f	; 63
    6a78:	f8 94       	cli
    6a7a:	de bf       	out	0x3e, r29	; 62
    6a7c:	0f be       	out	0x3f, r0	; 63
    6a7e:	cd bf       	out	0x3d, r28	; 61
    6a80:	df 91       	pop	r29
    6a82:	cf 91       	pop	r28
    6a84:	1f 91       	pop	r17
    6a86:	0f 91       	pop	r16
    6a88:	ff 90       	pop	r15
    6a8a:	ef 90       	pop	r14
    6a8c:	df 90       	pop	r13
    6a8e:	cf 90       	pop	r12
    6a90:	bf 90       	pop	r11
    6a92:	af 90       	pop	r10
    6a94:	9f 90       	pop	r9
    6a96:	8f 90       	pop	r8
    6a98:	7f 90       	pop	r7
    6a9a:	6f 90       	pop	r6
    6a9c:	5f 90       	pop	r5
    6a9e:	4f 90       	pop	r4
    6aa0:	3f 90       	pop	r3
    6aa2:	2f 90       	pop	r2
    6aa4:	08 95       	ret

00006aa6 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    6aa6:	6f 92       	push	r6
    6aa8:	7f 92       	push	r7
    6aaa:	8f 92       	push	r8
    6aac:	af 92       	push	r10
    6aae:	bf 92       	push	r11
    6ab0:	cf 92       	push	r12
    6ab2:	df 92       	push	r13
    6ab4:	ef 92       	push	r14
    6ab6:	ff 92       	push	r15
    6ab8:	0f 93       	push	r16
    6aba:	1f 93       	push	r17
    6abc:	cf 93       	push	r28
    6abe:	df 93       	push	r29
    6ac0:	00 d0       	rcall	.+0      	; 0x6ac2 <menu_flight+0x1c>
    6ac2:	00 d0       	rcall	.+0      	; 0x6ac4 <menu_flight+0x1e>
    6ac4:	1f 92       	push	r1
    6ac6:	cd b7       	in	r28, 0x3d	; 61
    6ac8:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6aca:	90 91 f4 07 	lds	r25, 0x07F4
    6ace:	99 23       	and	r25, r25
    6ad0:	41 f0       	breq	.+16     	; 0x6ae2 <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    6ad2:	2a ea       	ldi	r18, 0xAA	; 170
    6ad4:	30 e0       	ldi	r19, 0x00	; 0
    6ad6:	30 93 37 05 	sts	0x0537, r19
    6ada:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    6ade:	10 92 f4 07 	sts	0x07F4, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    6ae2:	92 e1       	ldi	r25, 0x12	; 18
    6ae4:	89 9f       	mul	r24, r25
    6ae6:	30 01       	movw	r6, r0
    6ae8:	11 24       	eor	r1, r1
    6aea:	c3 01       	movw	r24, r6
    6aec:	86 51       	subi	r24, 0x16	; 22
    6aee:	9a 4f       	sbci	r25, 0xFA	; 250
    6af0:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6af2:	80 91 f2 07 	lds	r24, 0x07F2
    6af6:	80 37       	cpi	r24, 0x70	; 112
    6af8:	09 f4       	brne	.+2      	; 0x6afc <menu_flight+0x56>
    6afa:	66 c0       	rjmp	.+204    	; 0x6bc8 <menu_flight+0x122>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const uint16_t*)FlightMenuText, cursor);
    6afc:	a0 90 04 05 	lds	r10, 0x0504
    6b00:	b0 90 05 05 	lds	r11, 0x0505
    6b04:	37 ec       	ldi	r19, 0xC7	; 199
    6b06:	c3 2e       	mov	r12, r19
    6b08:	38 e1       	ldi	r19, 0x18	; 24
    6b0a:	d3 2e       	mov	r13, r19
    6b0c:	4f e4       	ldi	r20, 0x4F	; 79
    6b0e:	e4 2e       	mov	r14, r20
    6b10:	f1 2c       	mov	r15, r1
    6b12:	00 e0       	ldi	r16, 0x00	; 0
    6b14:	2d e6       	ldi	r18, 0x6D	; 109
    6b16:	38 e1       	ldi	r19, 0x18	; 24
    6b18:	a3 01       	movw	r20, r6
    6b1a:	6a ea       	ldi	r22, 0xAA	; 170
    6b1c:	70 e0       	ldi	r23, 0x00	; 0
    6b1e:	80 91 36 05 	lds	r24, 0x0536
    6b22:	90 91 37 05 	lds	r25, 0x0537
    6b26:	0e 94 9e 34 	call	0x693c	; 0x693c <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6b2a:	51 e3       	ldi	r21, 0x31	; 49
    6b2c:	c5 2e       	mov	r12, r21
    6b2e:	55 e0       	ldi	r21, 0x05	; 5
    6b30:	d5 2e       	mov	r13, r21
    6b32:	66 e3       	ldi	r22, 0x36	; 54
    6b34:	e6 2e       	mov	r14, r22
    6b36:	65 e0       	ldi	r22, 0x05	; 5
    6b38:	f6 2e       	mov	r15, r22
    6b3a:	04 e0       	ldi	r16, 0x04	; 4
    6b3c:	15 e0       	ldi	r17, 0x05	; 5
    6b3e:	20 91 f2 07 	lds	r18, 0x07F2
    6b42:	40 e0       	ldi	r20, 0x00	; 0
    6b44:	50 e0       	ldi	r21, 0x00	; 0
    6b46:	6a ea       	ldi	r22, 0xAA	; 170
    6b48:	70 e0       	ldi	r23, 0x00	; 0
    6b4a:	82 e1       	ldi	r24, 0x12	; 18
    6b4c:	90 e0       	ldi	r25, 0x00	; 0
    6b4e:	0e 94 ca 33 	call	0x6794	; 0x6794 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    6b52:	60 91 31 05 	lds	r22, 0x0531
    6b56:	6a 5a       	subi	r22, 0xAA	; 170
    6b58:	8d e6       	ldi	r24, 0x6D	; 109
    6b5a:	98 e1       	ldi	r25, 0x18	; 24
    6b5c:	0e 94 8e 31 	call	0x631c	; 0x631c <get_menu_range>
    6b60:	29 83       	std	Y+1, r18	; 0x01
    6b62:	3a 83       	std	Y+2, r19	; 0x02
    6b64:	4b 83       	std	Y+3, r20	; 0x03
    6b66:	5c 83       	std	Y+4, r21	; 0x04
    6b68:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6b6a:	80 91 f2 07 	lds	r24, 0x07F2
    6b6e:	80 3e       	cpi	r24, 0xE0	; 224
    6b70:	f9 f4       	brne	.+62     	; 0x6bb0 <menu_flight+0x10a>
		{
			text_link = pgm_read_word(&FlightMenuText[menu_temp - FLIGHTSTART]);
    6b72:	80 91 31 05 	lds	r24, 0x0531
    6b76:	90 91 32 05 	lds	r25, 0x0532
    6b7a:	bc 01       	movw	r22, r24
    6b7c:	6a 5a       	subi	r22, 0xAA	; 170
    6b7e:	71 09       	sbc	r23, r1
    6b80:	fb 01       	movw	r30, r22
    6b82:	ee 0f       	add	r30, r30
    6b84:	ff 1f       	adc	r31, r31
    6b86:	e9 53       	subi	r30, 0x39	; 57
    6b88:	f7 4e       	sbci	r31, 0xE7	; 231
    6b8a:	a5 90       	lpm	r10, Z+
    6b8c:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    6b8e:	bb 24       	eor	r11, r11
    6b90:	66 0d       	add	r22, r6
    6b92:	77 1d       	adc	r23, r7
    6b94:	1f 92       	push	r1
    6b96:	1f 92       	push	r1
    6b98:	81 2c       	mov	r8, r1
    6b9a:	c1 2c       	mov	r12, r1
    6b9c:	e9 80       	ldd	r14, Y+1	; 0x01
    6b9e:	fa 80       	ldd	r15, Y+2	; 0x02
    6ba0:	0b 81       	ldd	r16, Y+3	; 0x03
    6ba2:	1c 81       	ldd	r17, Y+4	; 0x04
    6ba4:	2d 81       	ldd	r18, Y+5	; 0x05
    6ba6:	41 e0       	ldi	r20, 0x01	; 1
    6ba8:	0e 94 1a 32 	call	0x6434	; 0x6434 <do_menu_item>
    6bac:	0f 90       	pop	r0
    6bae:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    6bb0:	80 91 f2 07 	lds	r24, 0x07F2
    6bb4:	80 3e       	cpi	r24, 0xE0	; 224
    6bb6:	09 f0       	breq	.+2      	; 0x6bba <menu_flight+0x114>
    6bb8:	9c cf       	rjmp	.-200    	; 0x6af2 <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    6bba:	0e 94 95 39 	call	0x732a	; 0x732a <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    6bbe:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6bc2:	0e 94 c3 36 	call	0x6d86	; 0x6d86 <Wait_BUTTON4>
    6bc6:	95 cf       	rjmp	.-214    	; 0x6af2 <menu_flight+0x4c>
		}
	}
}
    6bc8:	0f 90       	pop	r0
    6bca:	0f 90       	pop	r0
    6bcc:	0f 90       	pop	r0
    6bce:	0f 90       	pop	r0
    6bd0:	0f 90       	pop	r0
    6bd2:	df 91       	pop	r29
    6bd4:	cf 91       	pop	r28
    6bd6:	1f 91       	pop	r17
    6bd8:	0f 91       	pop	r16
    6bda:	ff 90       	pop	r15
    6bdc:	ef 90       	pop	r14
    6bde:	df 90       	pop	r13
    6be0:	cf 90       	pop	r12
    6be2:	bf 90       	pop	r11
    6be4:	af 90       	pop	r10
    6be6:	8f 90       	pop	r8
    6be8:	7f 90       	pop	r7
    6bea:	6f 90       	pop	r6
    6bec:	08 95       	ret

00006bee <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	fc 01       	movw	r30, r24
    6bf2:	ed 54       	subi	r30, 0x4D	; 77
    6bf4:	f1 09       	sbc	r31, r1
    6bf6:	e3 31       	cpi	r30, 0x13	; 19
    6bf8:	f1 05       	cpc	r31, r1
    6bfa:	70 f5       	brcc	.+92     	; 0x6c58 <do_main_menu_item+0x6a>
    6bfc:	e7 5b       	subi	r30, 0xB7	; 183
    6bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    6c00:	0c 94 0d 4c 	jmp	0x981a	; 0x981a <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    6c04:	82 e0       	ldi	r24, 0x02	; 2
    6c06:	01 c0       	rjmp	.+2      	; 0x6c0a <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    6c08:	81 e0       	ldi	r24, 0x01	; 1
    6c0a:	0c 94 6f 38 	jmp	0x70de	; 0x70de <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    6c0e:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    6c12:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    6c16:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    6c1a:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    6c1e:	80 e0       	ldi	r24, 0x00	; 0
    6c20:	01 c0       	rjmp	.+2      	; 0x6c24 <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    6c22:	81 e0       	ldi	r24, 0x01	; 1
    6c24:	0c 94 53 35 	jmp	0x6aa6	; 0x6aa6 <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    6c28:	80 e0       	ldi	r24, 0x00	; 0
    6c2a:	0d c0       	rjmp	.+26     	; 0x6c46 <do_main_menu_item+0x58>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    6c2c:	81 e0       	ldi	r24, 0x01	; 1
    6c2e:	0b c0       	rjmp	.+22     	; 0x6c46 <do_main_menu_item+0x58>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    6c30:	82 e0       	ldi	r24, 0x02	; 2
    6c32:	09 c0       	rjmp	.+18     	; 0x6c46 <do_main_menu_item+0x58>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    6c34:	83 e0       	ldi	r24, 0x03	; 3
    6c36:	07 c0       	rjmp	.+14     	; 0x6c46 <do_main_menu_item+0x58>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    6c38:	84 e0       	ldi	r24, 0x04	; 4
    6c3a:	05 c0       	rjmp	.+10     	; 0x6c46 <do_main_menu_item+0x58>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    6c3c:	85 e0       	ldi	r24, 0x05	; 5
    6c3e:	03 c0       	rjmp	.+6      	; 0x6c46 <do_main_menu_item+0x58>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    6c40:	86 e0       	ldi	r24, 0x06	; 6
    6c42:	01 c0       	rjmp	.+2      	; 0x6c46 <do_main_menu_item+0x58>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    6c44:	87 e0       	ldi	r24, 0x07	; 7
    6c46:	0c 94 d0 36 	jmp	0x6da0	; 0x6da0 <menu_mixer>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    6c4a:	81 e0       	ldi	r24, 0x01	; 1
    6c4c:	03 c0       	rjmp	.+6      	; 0x6c54 <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    6c4e:	82 e0       	ldi	r24, 0x02	; 2
    6c50:	01 c0       	rjmp	.+2      	; 0x6c54 <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    6c52:	83 e0       	ldi	r24, 0x03	; 3
    6c54:	0c 94 74 37 	jmp	0x6ee8	; 0x6ee8 <menu_servo_setup>
    6c58:	08 95       	ret

00006c5a <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    6c5a:	1f 99       	sbic	0x03, 7	; 3
    6c5c:	0a c0       	rjmp	.+20     	; 0x6c72 <Wait_BUTTON1+0x18>
    6c5e:	2f e3       	ldi	r18, 0x3F	; 63
    6c60:	8d e0       	ldi	r24, 0x0D	; 13
    6c62:	93 e0       	ldi	r25, 0x03	; 3
    6c64:	21 50       	subi	r18, 0x01	; 1
    6c66:	80 40       	sbci	r24, 0x00	; 0
    6c68:	90 40       	sbci	r25, 0x00	; 0
    6c6a:	e1 f7       	brne	.-8      	; 0x6c64 <Wait_BUTTON1+0xa>
    6c6c:	00 c0       	rjmp	.+0      	; 0x6c6e <Wait_BUTTON1+0x14>
    6c6e:	00 00       	nop
    6c70:	f4 cf       	rjmp	.-24     	; 0x6c5a <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    6c72:	08 95       	ret

00006c74 <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    6c74:	9f 92       	push	r9
    6c76:	af 92       	push	r10
    6c78:	bf 92       	push	r11
    6c7a:	cf 92       	push	r12
    6c7c:	df 92       	push	r13
    6c7e:	ef 92       	push	r14
    6c80:	ff 92       	push	r15
    6c82:	0f 93       	push	r16
    6c84:	1f 93       	push	r17
    6c86:	cf 93       	push	r28
    6c88:	df 93       	push	r29
	static uint16_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    6c8a:	80 ef       	ldi	r24, 0xF0	; 240
    6c8c:	80 93 f2 07 	sts	0x07F2, r24

	menu_beep(1); // debug
    6c90:	81 e0       	ldi	r24, 0x01	; 1
    6c92:	0e 94 b6 33 	call	0x676c	; 0x676c <menu_beep>

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    6c96:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    6c9a:	23 e0       	ldi	r18, 0x03	; 3
    6c9c:	a2 2e       	mov	r10, r18
    6c9e:	b1 2c       	mov	r11, r1

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    6ca0:	30 ef       	ldi	r19, 0xF0	; 240
    6ca2:	93 2e       	mov	r9, r19
	menu_beep(1); // debug

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    6ca4:	80 91 f2 07 	lds	r24, 0x07F2
    6ca8:	80 37       	cpi	r24, 0x70	; 112
    6caa:	09 f4       	brne	.+2      	; 0x6cae <menu_main+0x3a>
    6cac:	60 c0       	rjmp	.+192    	; 0x6d6e <menu_main+0xfa>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    6cae:	80 e0       	ldi	r24, 0x00	; 0
    6cb0:	91 e0       	ldi	r25, 0x01	; 1
    6cb2:	0e 94 8b 22 	call	0x4516	; 0x4516 <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    6cb6:	80 e0       	ldi	r24, 0x00	; 0
    6cb8:	0e 94 39 31 	call	0x6272	; 0x6272 <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    6cbc:	c0 e0       	ldi	r28, 0x00	; 0
    6cbe:	d0 e0       	ldi	r29, 0x00	; 0
    6cc0:	fe 01       	movw	r30, r28
    6cc2:	e7 59       	subi	r30, 0x97	; 151
    6cc4:	f7 4e       	sbci	r31, 0xE7	; 231
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    6cc6:	24 91       	lpm	r18, Z
    6cc8:	30 e0       	ldi	r19, 0x00	; 0
    6cca:	80 91 08 05 	lds	r24, 0x0508
    6cce:	90 91 09 05 	lds	r25, 0x0509
    6cd2:	4a e0       	ldi	r20, 0x0A	; 10
    6cd4:	50 e0       	ldi	r21, 0x00	; 0
    6cd6:	6f e1       	ldi	r22, 0x1F	; 31
    6cd8:	7a e0       	ldi	r23, 0x0A	; 10
    6cda:	8c 0f       	add	r24, r28
    6cdc:	9d 1f       	adc	r25, r29
    6cde:	0e 94 38 24 	call	0x4870	; 0x4870 <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    6ce2:	21 96       	adiw	r28, 0x01	; 1
    6ce4:	c4 30       	cpi	r28, 0x04	; 4
    6ce6:	d1 05       	cpc	r29, r1
    6ce8:	59 f7       	brne	.-42     	; 0x6cc0 <menu_main+0x4c>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    6cea:	80 91 06 05 	lds	r24, 0x0506
    6cee:	0e 94 94 34 	call	0x6928	; 0x6928 <print_cursor>
		write_buffer(buffer);
    6cf2:	80 e0       	ldi	r24, 0x00	; 0
    6cf4:	91 e0       	ldi	r25, 0x01	; 1
    6cf6:	0e 94 59 22 	call	0x44b2	; 0x44b2 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    6cfa:	81 e0       	ldi	r24, 0x01	; 1
    6cfc:	0e 94 e5 31 	call	0x63ca	; 0x63ca <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    6d00:	84 e3       	ldi	r24, 0x34	; 52
    6d02:	c8 2e       	mov	r12, r24
    6d04:	85 e0       	ldi	r24, 0x05	; 5
    6d06:	d8 2e       	mov	r13, r24
    6d08:	98 e0       	ldi	r25, 0x08	; 8
    6d0a:	e9 2e       	mov	r14, r25
    6d0c:	95 e0       	ldi	r25, 0x05	; 5
    6d0e:	f9 2e       	mov	r15, r25
    6d10:	06 e0       	ldi	r16, 0x06	; 6
    6d12:	15 e0       	ldi	r17, 0x05	; 5
    6d14:	20 91 f2 07 	lds	r18, 0x07F2
    6d18:	40 e0       	ldi	r20, 0x00	; 0
    6d1a:	50 e0       	ldi	r21, 0x00	; 0
    6d1c:	6d e4       	ldi	r22, 0x4D	; 77
    6d1e:	70 e0       	ldi	r23, 0x00	; 0
    6d20:	83 e1       	ldi	r24, 0x13	; 19
    6d22:	90 e0       	ldi	r25, 0x00	; 0
    6d24:	0e 94 ca 33 	call	0x6794	; 0x6794 <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    6d28:	80 91 34 05 	lds	r24, 0x0534
    6d2c:	90 91 35 05 	lds	r25, 0x0535
    6d30:	20 91 33 05 	lds	r18, 0x0533
    6d34:	30 e0       	ldi	r19, 0x00	; 0
    6d36:	82 17       	cp	r24, r18
    6d38:	93 07       	cpc	r25, r19
    6d3a:	69 f0       	breq	.+26     	; 0x6d56 <menu_main+0xe2>
		{
			cursor = LINE0;
    6d3c:	b0 92 05 05 	sts	0x0505, r11
    6d40:	a0 92 04 05 	sts	0x0504, r10
			menu_temp = 0;
    6d44:	10 92 32 05 	sts	0x0532, r1
    6d48:	10 92 31 05 	sts	0x0531, r1
			old_menu = main_temp;
    6d4c:	80 93 33 05 	sts	0x0533, r24
			menu_flag = 1;
    6d50:	21 e0       	ldi	r18, 0x01	; 1
    6d52:	20 93 f4 07 	sts	0x07F4, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    6d56:	20 91 f2 07 	lds	r18, 0x07F2
    6d5a:	20 3e       	cpi	r18, 0xE0	; 224
    6d5c:	09 f0       	breq	.+2      	; 0x6d60 <menu_main+0xec>
    6d5e:	a2 cf       	rjmp	.-188    	; 0x6ca4 <menu_main+0x30>
		{
			do_main_menu_item(main_temp);
    6d60:	0e 94 f7 35 	call	0x6bee	; 0x6bee <do_main_menu_item>
			button = NONE;
    6d64:	90 92 f2 07 	sts	0x07F2, r9

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    6d68:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <Wait_BUTTON1>
    6d6c:	9b cf       	rjmp	.-202    	; 0x6ca4 <menu_main+0x30>
		}
	}
}
    6d6e:	df 91       	pop	r29
    6d70:	cf 91       	pop	r28
    6d72:	1f 91       	pop	r17
    6d74:	0f 91       	pop	r16
    6d76:	ff 90       	pop	r15
    6d78:	ef 90       	pop	r14
    6d7a:	df 90       	pop	r13
    6d7c:	cf 90       	pop	r12
    6d7e:	bf 90       	pop	r11
    6d80:	af 90       	pop	r10
    6d82:	9f 90       	pop	r9
    6d84:	08 95       	ret

00006d86 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    6d86:	1c 99       	sbic	0x03, 4	; 3
    6d88:	0a c0       	rjmp	.+20     	; 0x6d9e <Wait_BUTTON4+0x18>
    6d8a:	2f e3       	ldi	r18, 0x3F	; 63
    6d8c:	8d e0       	ldi	r24, 0x0D	; 13
    6d8e:	93 e0       	ldi	r25, 0x03	; 3
    6d90:	21 50       	subi	r18, 0x01	; 1
    6d92:	80 40       	sbci	r24, 0x00	; 0
    6d94:	90 40       	sbci	r25, 0x00	; 0
    6d96:	e1 f7       	brne	.-8      	; 0x6d90 <Wait_BUTTON4+0xa>
    6d98:	00 c0       	rjmp	.+0      	; 0x6d9a <Wait_BUTTON4+0x14>
    6d9a:	00 00       	nop
    6d9c:	f4 cf       	rjmp	.-24     	; 0x6d86 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    6d9e:	08 95       	ret

00006da0 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    6da0:	6f 92       	push	r6
    6da2:	7f 92       	push	r7
    6da4:	8f 92       	push	r8
    6da6:	af 92       	push	r10
    6da8:	bf 92       	push	r11
    6daa:	cf 92       	push	r12
    6dac:	df 92       	push	r13
    6dae:	ef 92       	push	r14
    6db0:	ff 92       	push	r15
    6db2:	0f 93       	push	r16
    6db4:	1f 93       	push	r17
    6db6:	cf 93       	push	r28
    6db8:	df 93       	push	r29
    6dba:	00 d0       	rcall	.+0      	; 0x6dbc <menu_mixer+0x1c>
    6dbc:	00 d0       	rcall	.+0      	; 0x6dbe <menu_mixer+0x1e>
    6dbe:	1f 92       	push	r1
    6dc0:	cd b7       	in	r28, 0x3d	; 61
    6dc2:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6dc4:	90 91 f4 07 	lds	r25, 0x07F4
    6dc8:	99 23       	and	r25, r25
    6dca:	41 f0       	breq	.+16     	; 0x6ddc <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    6dcc:	2e eb       	ldi	r18, 0xBE	; 190
    6dce:	30 e0       	ldi	r19, 0x00	; 0
    6dd0:	30 93 37 05 	sts	0x0537, r19
    6dd4:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    6dd8:	10 92 f4 07 	sts	0x07F4, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    6ddc:	96 e2       	ldi	r25, 0x26	; 38
    6dde:	89 9f       	mul	r24, r25
    6de0:	30 01       	movw	r6, r0
    6de2:	11 24       	eor	r1, r1
    6de4:	c3 01       	movw	r24, r6
    6de6:	82 5b       	subi	r24, 0xB2	; 178
    6de8:	99 4f       	sbci	r25, 0xF9	; 249
    6dea:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6dec:	80 91 f2 07 	lds	r24, 0x07F2
    6df0:	80 37       	cpi	r24, 0x70	; 112
    6df2:	09 f4       	brne	.+2      	; 0x6df6 <menu_mixer+0x56>
    6df4:	66 c0       	rjmp	.+204    	; 0x6ec2 <menu_mixer+0x122>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const uint16_t*)MixerMenuText, cursor);
    6df6:	a0 90 04 05 	lds	r10, 0x0504
    6dfa:	b0 90 05 05 	lds	r11, 0x0505
    6dfe:	35 e9       	ldi	r19, 0x95	; 149
    6e00:	c3 2e       	mov	r12, r19
    6e02:	39 e1       	ldi	r19, 0x19	; 25
    6e04:	d3 2e       	mov	r13, r19
    6e06:	49 e5       	ldi	r20, 0x59	; 89
    6e08:	e4 2e       	mov	r14, r20
    6e0a:	f1 2c       	mov	r15, r1
    6e0c:	00 e0       	ldi	r16, 0x00	; 0
    6e0e:	2b ee       	ldi	r18, 0xEB	; 235
    6e10:	38 e1       	ldi	r19, 0x18	; 24
    6e12:	a3 01       	movw	r20, r6
    6e14:	6e eb       	ldi	r22, 0xBE	; 190
    6e16:	70 e0       	ldi	r23, 0x00	; 0
    6e18:	80 91 36 05 	lds	r24, 0x0536
    6e1c:	90 91 37 05 	lds	r25, 0x0537
    6e20:	0e 94 9e 34 	call	0x693c	; 0x693c <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6e24:	51 e3       	ldi	r21, 0x31	; 49
    6e26:	c5 2e       	mov	r12, r21
    6e28:	55 e0       	ldi	r21, 0x05	; 5
    6e2a:	d5 2e       	mov	r13, r21
    6e2c:	66 e3       	ldi	r22, 0x36	; 54
    6e2e:	e6 2e       	mov	r14, r22
    6e30:	65 e0       	ldi	r22, 0x05	; 5
    6e32:	f6 2e       	mov	r15, r22
    6e34:	04 e0       	ldi	r16, 0x04	; 4
    6e36:	15 e0       	ldi	r17, 0x05	; 5
    6e38:	20 91 f2 07 	lds	r18, 0x07F2
    6e3c:	40 e0       	ldi	r20, 0x00	; 0
    6e3e:	50 e0       	ldi	r21, 0x00	; 0
    6e40:	6e eb       	ldi	r22, 0xBE	; 190
    6e42:	70 e0       	ldi	r23, 0x00	; 0
    6e44:	82 e2       	ldi	r24, 0x22	; 34
    6e46:	90 e0       	ldi	r25, 0x00	; 0
    6e48:	0e 94 ca 33 	call	0x6794	; 0x6794 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    6e4c:	60 91 31 05 	lds	r22, 0x0531
    6e50:	6e 5b       	subi	r22, 0xBE	; 190
    6e52:	8b ee       	ldi	r24, 0xEB	; 235
    6e54:	98 e1       	ldi	r25, 0x18	; 24
    6e56:	0e 94 8e 31 	call	0x631c	; 0x631c <get_menu_range>
    6e5a:	29 83       	std	Y+1, r18	; 0x01
    6e5c:	3a 83       	std	Y+2, r19	; 0x02
    6e5e:	4b 83       	std	Y+3, r20	; 0x03
    6e60:	5c 83       	std	Y+4, r21	; 0x04
    6e62:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6e64:	80 91 f2 07 	lds	r24, 0x07F2
    6e68:	80 3e       	cpi	r24, 0xE0	; 224
    6e6a:	f9 f4       	brne	.+62     	; 0x6eaa <menu_mixer+0x10a>
		{
			text_link = pgm_read_word(&MixerMenuText[menu_temp - MIXERSTART]);
    6e6c:	80 91 31 05 	lds	r24, 0x0531
    6e70:	90 91 32 05 	lds	r25, 0x0532
    6e74:	bc 01       	movw	r22, r24
    6e76:	6e 5b       	subi	r22, 0xBE	; 190
    6e78:	71 09       	sbc	r23, r1
    6e7a:	fb 01       	movw	r30, r22
    6e7c:	ee 0f       	add	r30, r30
    6e7e:	ff 1f       	adc	r31, r31
    6e80:	eb 56       	subi	r30, 0x6B	; 107
    6e82:	f6 4e       	sbci	r31, 0xE6	; 230
    6e84:	a5 90       	lpm	r10, Z+
    6e86:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    6e88:	bb 24       	eor	r11, r11
    6e8a:	66 0d       	add	r22, r6
    6e8c:	77 1d       	adc	r23, r7
    6e8e:	1f 92       	push	r1
    6e90:	1f 92       	push	r1
    6e92:	81 2c       	mov	r8, r1
    6e94:	c1 2c       	mov	r12, r1
    6e96:	e9 80       	ldd	r14, Y+1	; 0x01
    6e98:	fa 80       	ldd	r15, Y+2	; 0x02
    6e9a:	0b 81       	ldd	r16, Y+3	; 0x03
    6e9c:	1c 81       	ldd	r17, Y+4	; 0x04
    6e9e:	2d 81       	ldd	r18, Y+5	; 0x05
    6ea0:	41 e0       	ldi	r20, 0x01	; 1
    6ea2:	0e 94 1a 32 	call	0x6434	; 0x6434 <do_menu_item>
    6ea6:	0f 90       	pop	r0
    6ea8:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    6eaa:	80 91 f2 07 	lds	r24, 0x07F2
    6eae:	80 3e       	cpi	r24, 0xE0	; 224
    6eb0:	09 f0       	breq	.+2      	; 0x6eb4 <menu_mixer+0x114>
    6eb2:	9c cf       	rjmp	.-200    	; 0x6dec <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    6eb4:	0e 94 95 39 	call	0x732a	; 0x732a <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    6eb8:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6ebc:	0e 94 c3 36 	call	0x6d86	; 0x6d86 <Wait_BUTTON4>
    6ec0:	95 cf       	rjmp	.-214    	; 0x6dec <menu_mixer+0x4c>
		}
	}
}
    6ec2:	0f 90       	pop	r0
    6ec4:	0f 90       	pop	r0
    6ec6:	0f 90       	pop	r0
    6ec8:	0f 90       	pop	r0
    6eca:	0f 90       	pop	r0
    6ecc:	df 91       	pop	r29
    6ece:	cf 91       	pop	r28
    6ed0:	1f 91       	pop	r17
    6ed2:	0f 91       	pop	r16
    6ed4:	ff 90       	pop	r15
    6ed6:	ef 90       	pop	r14
    6ed8:	df 90       	pop	r13
    6eda:	cf 90       	pop	r12
    6edc:	bf 90       	pop	r11
    6ede:	af 90       	pop	r10
    6ee0:	8f 90       	pop	r8
    6ee2:	7f 90       	pop	r7
    6ee4:	6f 90       	pop	r6
    6ee6:	08 95       	ret

00006ee8 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    6ee8:	2f 92       	push	r2
    6eea:	3f 92       	push	r3
    6eec:	4f 92       	push	r4
    6eee:	5f 92       	push	r5
    6ef0:	6f 92       	push	r6
    6ef2:	7f 92       	push	r7
    6ef4:	8f 92       	push	r8
    6ef6:	9f 92       	push	r9
    6ef8:	af 92       	push	r10
    6efa:	bf 92       	push	r11
    6efc:	cf 92       	push	r12
    6efe:	df 92       	push	r13
    6f00:	ef 92       	push	r14
    6f02:	ff 92       	push	r15
    6f04:	0f 93       	push	r16
    6f06:	1f 93       	push	r17
    6f08:	cf 93       	push	r28
    6f0a:	df 93       	push	r29
    6f0c:	cd b7       	in	r28, 0x3d	; 61
    6f0e:	de b7       	in	r29, 0x3e	; 62
    6f10:	28 97       	sbiw	r28, 0x08	; 8
    6f12:	0f b6       	in	r0, 0x3f	; 63
    6f14:	f8 94       	cli
    6f16:	de bf       	out	0x3e, r29	; 62
    6f18:	0f be       	out	0x3f, r0	; 63
    6f1a:	cd bf       	out	0x3d, r28	; 61
    6f1c:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6f1e:	80 91 f4 07 	lds	r24, 0x07F4
    6f22:	88 23       	and	r24, r24
    6f24:	41 f0       	breq	.+16     	; 0x6f36 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    6f26:	86 ee       	ldi	r24, 0xE6	; 230
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	90 93 37 05 	sts	0x0537, r25
    6f2e:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    6f32:	10 92 f4 07 	sts	0x07F4, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    6f36:	1e 82       	std	Y+6, r1	; 0x06
    6f38:	aa e7       	ldi	r26, 0x7A	; 122
    6f3a:	6a 2e       	mov	r6, r26
    6f3c:	a7 e0       	ldi	r26, 0x07	; 7
    6f3e:	7a 2e       	mov	r7, r26
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    6f40:	89 2d       	mov	r24, r9
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	01 97       	sbiw	r24, 0x01	; 1
    6f46:	25 e0       	ldi	r18, 0x05	; 5
    6f48:	28 9f       	mul	r18, r24
    6f4a:	20 01       	movw	r4, r0
    6f4c:	29 9f       	mul	r18, r25
    6f4e:	50 0c       	add	r5, r0
    6f50:	11 24       	eor	r1, r1
    6f52:	92 01       	movw	r18, r4
    6f54:	27 52       	subi	r18, 0x27	; 39
    6f56:	36 4e       	sbci	r19, 0xE6	; 230
    6f58:	29 01       	movw	r4, r18
    6f5a:	1c 01       	movw	r2, r24
    6f5c:	b4 e0       	ldi	r27, 0x04	; 4
    6f5e:	22 0c       	add	r2, r2
    6f60:	33 1c       	adc	r3, r3
    6f62:	ba 95       	dec	r27
    6f64:	e1 f7       	brne	.-8      	; 0x6f5e <menu_servo_setup+0x76>
    6f66:	f1 01       	movw	r30, r2
    6f68:	e8 51       	subi	r30, 0x18	; 24
    6f6a:	f6 4e       	sbci	r31, 0xE6	; 230
    6f6c:	1f 01       	movw	r2, r30
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);

		if (button == ENTER)
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    6f6e:	9c 01       	movw	r18, r24
    6f70:	13 e0       	ldi	r17, 0x03	; 3
    6f72:	22 0f       	add	r18, r18
    6f74:	33 1f       	adc	r19, r19
    6f76:	1a 95       	dec	r17
    6f78:	e1 f7       	brne	.-8      	; 0x6f72 <menu_servo_setup+0x8a>
    6f7a:	38 87       	std	Y+8, r19	; 0x08
    6f7c:	2f 83       	std	Y+7, r18	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    6f7e:	80 91 f2 07 	lds	r24, 0x07F2
    6f82:	80 37       	cpi	r24, 0x70	; 112
    6f84:	09 f4       	brne	.+2      	; 0x6f88 <menu_servo_setup+0xa0>
    6f86:	92 c0       	rjmp	.+292    	; 0x70ac <menu_servo_setup+0x1c4>
    6f88:	88 e0       	ldi	r24, 0x08	; 8
    6f8a:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    6f8c:	32 e0       	ldi	r19, 0x02	; 2
    6f8e:	93 16       	cp	r9, r19
    6f90:	61 f0       	breq	.+24     	; 0x6faa <menu_servo_setup+0xc2>
    6f92:	43 e0       	ldi	r20, 0x03	; 3
    6f94:	94 12       	cpse	r9, r20
    6f96:	11 c0       	rjmp	.+34     	; 0x6fba <menu_servo_setup+0xd2>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    6f98:	e1 e0       	ldi	r30, 0x01	; 1
    6f9a:	ee 83       	std	Y+6, r30	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    6f9c:	88 24       	eor	r8, r8
    6f9e:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    6fa0:	ea e8       	ldi	r30, 0x8A	; 138
    6fa2:	6e 2e       	mov	r6, r30
    6fa4:	e7 e0       	ldi	r30, 0x07	; 7
    6fa6:	7e 2e       	mov	r7, r30
					servo_enable = true;
					zero_setting = true;
					break;
    6fa8:	08 c0       	rjmp	.+16     	; 0x6fba <menu_servo_setup+0xd2>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    6faa:	91 e0       	ldi	r25, 0x01	; 1
    6fac:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    6fae:	88 24       	eor	r8, r8
    6fb0:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    6fb2:	f2 e8       	ldi	r31, 0x82	; 130
    6fb4:	6f 2e       	mov	r6, r31
    6fb6:	f7 e0       	ldi	r31, 0x07	; 7
    6fb8:	7f 2e       	mov	r7, r31
    6fba:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    6fbc:	39 f7       	brne	.-50     	; 0x6f8c <menu_servo_setup+0xa4>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    6fbe:	a0 90 04 05 	lds	r10, 0x0504
    6fc2:	b0 90 05 05 	lds	r11, 0x0505
    6fc6:	61 01       	movw	r12, r2
    6fc8:	50 e5       	ldi	r21, 0x50	; 80
    6fca:	e5 2e       	mov	r14, r21
    6fcc:	f1 2c       	mov	r15, r1
    6fce:	01 e0       	ldi	r16, 0x01	; 1
    6fd0:	92 01       	movw	r18, r4
    6fd2:	a3 01       	movw	r20, r6
    6fd4:	66 ee       	ldi	r22, 0xE6	; 230
    6fd6:	70 e0       	ldi	r23, 0x00	; 0
    6fd8:	80 91 36 05 	lds	r24, 0x0536
    6fdc:	90 91 37 05 	lds	r25, 0x0537
    6fe0:	0e 94 9e 34 	call	0x693c	; 0x693c <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6fe4:	61 e3       	ldi	r22, 0x31	; 49
    6fe6:	c6 2e       	mov	r12, r22
    6fe8:	65 e0       	ldi	r22, 0x05	; 5
    6fea:	d6 2e       	mov	r13, r22
    6fec:	76 e3       	ldi	r23, 0x36	; 54
    6fee:	e7 2e       	mov	r14, r23
    6ff0:	75 e0       	ldi	r23, 0x05	; 5
    6ff2:	f7 2e       	mov	r15, r23
    6ff4:	04 e0       	ldi	r16, 0x04	; 4
    6ff6:	15 e0       	ldi	r17, 0x05	; 5
    6ff8:	20 91 f2 07 	lds	r18, 0x07F2
    6ffc:	40 e0       	ldi	r20, 0x00	; 0
    6ffe:	50 e0       	ldi	r21, 0x00	; 0
    7000:	66 ee       	ldi	r22, 0xE6	; 230
    7002:	70 e0       	ldi	r23, 0x00	; 0
    7004:	88 e0       	ldi	r24, 0x08	; 8
    7006:	90 e0       	ldi	r25, 0x00	; 0
    7008:	0e 94 ca 33 	call	0x6794	; 0x6794 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    700c:	60 e0       	ldi	r22, 0x00	; 0
    700e:	c2 01       	movw	r24, r4
    7010:	0e 94 8e 31 	call	0x631c	; 0x631c <get_menu_range>
    7014:	29 83       	std	Y+1, r18	; 0x01
    7016:	3a 83       	std	Y+2, r19	; 0x02
    7018:	4b 83       	std	Y+3, r20	; 0x03
    701a:	5c 83       	std	Y+4, r21	; 0x04
    701c:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    701e:	80 91 f2 07 	lds	r24, 0x07F2
    7022:	80 3e       	cpi	r24, 0xE0	; 224
    7024:	b9 f5       	brne	.+110    	; 0x7094 <menu_servo_setup+0x1ac>
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    7026:	80 91 31 05 	lds	r24, 0x0531
    702a:	90 91 32 05 	lds	r25, 0x0532
    702e:	9c 01       	movw	r18, r24
    7030:	26 5e       	subi	r18, 0xE6	; 230
    7032:	31 09       	sbc	r19, r1
    7034:	ef 81       	ldd	r30, Y+7	; 0x07
    7036:	f8 85       	ldd	r31, Y+8	; 0x08
    7038:	e2 0f       	add	r30, r18
    703a:	f3 1f       	adc	r31, r19
    703c:	ee 0f       	add	r30, r30
    703e:	ff 1f       	adc	r31, r31
    7040:	e8 51       	subi	r30, 0x18	; 24
    7042:	f6 4e       	sbci	r31, 0xE6	; 230
    7044:	a5 90       	lpm	r10, Z+
    7046:	b4 90       	lpm	r11, Z
    7048:	b3 01       	movw	r22, r6
    704a:	62 0f       	add	r22, r18
    704c:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    704e:	fe 81       	ldd	r31, Y+6	; 0x06
    7050:	ff 23       	and	r31, r31
    7052:	11 f0       	breq	.+4      	; 0x7058 <menu_servo_setup+0x170>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    7054:	fb 01       	movw	r30, r22
    7056:	10 82       	st	Z, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    7058:	46 e2       	ldi	r20, 0x26	; 38
    705a:	42 9f       	mul	r20, r18
    705c:	f0 01       	movw	r30, r0
    705e:	43 9f       	mul	r20, r19
    7060:	f0 0d       	add	r31, r0
    7062:	11 24       	eor	r1, r1
    7064:	e8 59       	subi	r30, 0x98	; 152
    7066:	f9 4f       	sbci	r31, 0xF9	; 249
    7068:	40 81       	ld	r20, Z
    706a:	41 11       	cpse	r20, r1
    706c:	05 c0       	rjmp	.+10     	; 0x7078 <menu_servo_setup+0x190>
    706e:	40 91 e1 05 	lds	r20, 0x05E1
    7072:	41 11       	cpse	r20, r1
    7074:	01 c0       	rjmp	.+2      	; 0x7078 <menu_servo_setup+0x190>
			{
				servo_enable = false;
    7076:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    7078:	bb 24       	eor	r11, r11
    707a:	3f 93       	push	r19
    707c:	2f 93       	push	r18
    707e:	c1 2c       	mov	r12, r1
    7080:	e9 80       	ldd	r14, Y+1	; 0x01
    7082:	fa 80       	ldd	r15, Y+2	; 0x02
    7084:	0b 81       	ldd	r16, Y+3	; 0x03
    7086:	1c 81       	ldd	r17, Y+4	; 0x04
    7088:	2d 81       	ldd	r18, Y+5	; 0x05
    708a:	41 e0       	ldi	r20, 0x01	; 1
    708c:	0e 94 1a 32 	call	0x6434	; 0x6434 <do_menu_item>
    7090:	0f 90       	pop	r0
    7092:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    7094:	80 91 f2 07 	lds	r24, 0x07F2
    7098:	80 3e       	cpi	r24, 0xE0	; 224
    709a:	09 f0       	breq	.+2      	; 0x709e <menu_servo_setup+0x1b6>
    709c:	70 cf       	rjmp	.-288    	; 0x6f7e <menu_servo_setup+0x96>
		{
			UpdateLimits();				// Update actual servo trims
    709e:	0e 94 95 39 	call	0x732a	; 0x732a <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    70a2:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    70a6:	0e 94 c3 36 	call	0x6d86	; 0x6d86 <Wait_BUTTON4>
    70aa:	69 cf       	rjmp	.-302    	; 0x6f7e <menu_servo_setup+0x96>
		}
	}
}
    70ac:	28 96       	adiw	r28, 0x08	; 8
    70ae:	0f b6       	in	r0, 0x3f	; 63
    70b0:	f8 94       	cli
    70b2:	de bf       	out	0x3e, r29	; 62
    70b4:	0f be       	out	0x3f, r0	; 63
    70b6:	cd bf       	out	0x3d, r28	; 61
    70b8:	df 91       	pop	r29
    70ba:	cf 91       	pop	r28
    70bc:	1f 91       	pop	r17
    70be:	0f 91       	pop	r16
    70c0:	ff 90       	pop	r15
    70c2:	ef 90       	pop	r14
    70c4:	df 90       	pop	r13
    70c6:	cf 90       	pop	r12
    70c8:	bf 90       	pop	r11
    70ca:	af 90       	pop	r10
    70cc:	9f 90       	pop	r9
    70ce:	8f 90       	pop	r8
    70d0:	7f 90       	pop	r7
    70d2:	6f 90       	pop	r6
    70d4:	5f 90       	pop	r5
    70d6:	4f 90       	pop	r4
    70d8:	3f 90       	pop	r3
    70da:	2f 90       	pop	r2
    70dc:	08 95       	ret

000070de <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    70de:	2f 92       	push	r2
    70e0:	3f 92       	push	r3
    70e2:	4f 92       	push	r4
    70e4:	5f 92       	push	r5
    70e6:	6f 92       	push	r6
    70e8:	7f 92       	push	r7
    70ea:	8f 92       	push	r8
    70ec:	9f 92       	push	r9
    70ee:	af 92       	push	r10
    70f0:	bf 92       	push	r11
    70f2:	cf 92       	push	r12
    70f4:	df 92       	push	r13
    70f6:	ef 92       	push	r14
    70f8:	ff 92       	push	r15
    70fa:	0f 93       	push	r16
    70fc:	1f 93       	push	r17
    70fe:	cf 93       	push	r28
    7100:	df 93       	push	r29
    7102:	cd b7       	in	r28, 0x3d	; 61
    7104:	de b7       	in	r29, 0x3e	; 62
    7106:	2c 97       	sbiw	r28, 0x0c	; 12
    7108:	0f b6       	in	r0, 0x3f	; 63
    710a:	f8 94       	cli
    710c:	de bf       	out	0x3e, r29	; 62
    710e:	0f be       	out	0x3f, r0	; 63
    7110:	cd bf       	out	0x3d, r28	; 61
    7112:	98 2e       	mov	r9, r24
	int8_t *value_ptr = &Config.RxMode;
	int8_t old_mixer = Config.Preset;	// Note old mixer setting
    7114:	20 91 49 06 	lds	r18, 0x0649
    7118:	2a 87       	std	Y+10, r18	; 0x0a
	uint8_t		i;
	uint16_t	offset = 0;			// Index into channel structure
	uint16_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    711a:	80 91 f4 07 	lds	r24, 0x07F4
    711e:	88 23       	and	r24, r24
    7120:	41 f0       	breq	.+16     	; 0x7132 <menu_rc_setup+0x54>
	{
		sub_top = RCSTART;
    7122:	85 e9       	ldi	r24, 0x95	; 149
    7124:	90 e0       	ldi	r25, 0x00	; 0
    7126:	90 93 37 05 	sts	0x0537, r25
    712a:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    712e:	10 92 f4 07 	sts	0x07F4, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    7132:	47 e0       	ldi	r20, 0x07	; 7
    7134:	50 e0       	ldi	r21, 0x00	; 0
    7136:	59 87       	std	Y+9, r21	; 0x09
    7138:	48 87       	std	Y+8, r20	; 0x08
    713a:	61 2c       	mov	r6, r1
    713c:	71 2c       	mov	r7, r1
    713e:	81 ee       	ldi	r24, 0xE1	; 225
    7140:	95 e0       	ldi	r25, 0x05	; 5
    7142:	9f 83       	std	Y+7, r25	; 0x07
    7144:	8e 83       	std	Y+6, r24	; 0x06
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    7146:	89 2d       	mov	r24, r9
    7148:	90 e0       	ldi	r25, 0x00	; 0
    714a:	01 97       	sbiw	r24, 0x01	; 1
    714c:	22 e3       	ldi	r18, 0x32	; 50
    714e:	28 9f       	mul	r18, r24
    7150:	20 01       	movw	r4, r0
    7152:	29 9f       	mul	r18, r25
    7154:	50 0c       	add	r5, r0
    7156:	11 24       	eor	r1, r1
    7158:	92 01       	movw	r18, r4
    715a:	28 5e       	subi	r18, 0xE8	; 232
    715c:	35 4e       	sbci	r19, 0xE5	; 229
    715e:	29 01       	movw	r4, r18
    7160:	24 e1       	ldi	r18, 0x14	; 20
    7162:	28 9f       	mul	r18, r24
    7164:	10 01       	movw	r2, r0
    7166:	29 9f       	mul	r18, r25
    7168:	30 0c       	add	r3, r0
    716a:	11 24       	eor	r1, r1
    716c:	a1 01       	movw	r20, r2
    716e:	44 58       	subi	r20, 0x84	; 132
    7170:	55 4e       	sbci	r21, 0xE5	; 229
    7172:	1a 01       	movw	r2, r20
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 

		if (button == ENTER)
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    7174:	2a e0       	ldi	r18, 0x0A	; 10
    7176:	28 9f       	mul	r18, r24
    7178:	a0 01       	movw	r20, r0
    717a:	29 9f       	mul	r18, r25
    717c:	50 0d       	add	r21, r0
    717e:	11 24       	eor	r1, r1
    7180:	5c 87       	std	Y+12, r21	; 0x0c
    7182:	4b 87       	std	Y+11, r20	; 0x0b
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    7184:	80 91 f2 07 	lds	r24, 0x07F2
    7188:	80 37       	cpi	r24, 0x70	; 112
    718a:	09 f4       	brne	.+2      	; 0x718e <menu_rc_setup+0xb0>
    718c:	b5 c0       	rjmp	.+362    	; 0x72f8 <menu_rc_setup+0x21a>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    718e:	52 e0       	ldi	r21, 0x02	; 2
    7190:	95 12       	cpse	r9, r21
    7192:	0b c0       	rjmp	.+22     	; 0x71aa <menu_rc_setup+0xcc>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
    7194:	8a e0       	ldi	r24, 0x0A	; 10
    7196:	90 e0       	ldi	r25, 0x00	; 0
    7198:	99 87       	std	Y+9, r25	; 0x09
    719a:	88 87       	std	Y+8, r24	; 0x08
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    719c:	69 e0       	ldi	r22, 0x09	; 9
    719e:	66 2e       	mov	r6, r22
    71a0:	71 2c       	mov	r7, r1
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    71a2:	20 e4       	ldi	r18, 0x40	; 64
    71a4:	36 e0       	ldi	r19, 0x06	; 6
    71a6:	3f 83       	std	Y+7, r19	; 0x07
    71a8:	2e 83       	std	Y+6, r18	; 0x06
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    71aa:	a0 90 04 05 	lds	r10, 0x0504
    71ae:	b0 90 05 05 	lds	r11, 0x0505
    71b2:	80 91 36 05 	lds	r24, 0x0536
    71b6:	90 91 37 05 	lds	r25, 0x0537
    71ba:	61 01       	movw	r12, r2
    71bc:	3f e4       	ldi	r19, 0x4F	; 79
    71be:	e3 2e       	mov	r14, r19
    71c0:	f1 2c       	mov	r15, r1
    71c2:	00 e0       	ldi	r16, 0x00	; 0
    71c4:	92 01       	movw	r18, r4
    71c6:	4e 81       	ldd	r20, Y+6	; 0x06
    71c8:	5f 81       	ldd	r21, Y+7	; 0x07
    71ca:	b3 01       	movw	r22, r6
    71cc:	6b 56       	subi	r22, 0x6B	; 107
    71ce:	7f 4f       	sbci	r23, 0xFF	; 255
    71d0:	86 0d       	add	r24, r6
    71d2:	97 1d       	adc	r25, r7
    71d4:	0e 94 9e 34 	call	0x693c	; 0x693c <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    71d8:	41 e3       	ldi	r20, 0x31	; 49
    71da:	c4 2e       	mov	r12, r20
    71dc:	45 e0       	ldi	r20, 0x05	; 5
    71de:	d4 2e       	mov	r13, r20
    71e0:	56 e3       	ldi	r21, 0x36	; 54
    71e2:	e5 2e       	mov	r14, r21
    71e4:	55 e0       	ldi	r21, 0x05	; 5
    71e6:	f5 2e       	mov	r15, r21
    71e8:	04 e0       	ldi	r16, 0x04	; 4
    71ea:	15 e0       	ldi	r17, 0x05	; 5
    71ec:	20 91 f2 07 	lds	r18, 0x07F2
    71f0:	a3 01       	movw	r20, r6
    71f2:	65 e9       	ldi	r22, 0x95	; 149
    71f4:	70 e0       	ldi	r23, 0x00	; 0
    71f6:	88 85       	ldd	r24, Y+8	; 0x08
    71f8:	99 85       	ldd	r25, Y+9	; 0x09
    71fa:	0e 94 ca 33 	call	0x6794	; 0x6794 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    71fe:	60 91 31 05 	lds	r22, 0x0531
    7202:	65 59       	subi	r22, 0x95	; 149
    7204:	66 19       	sub	r22, r6
    7206:	c2 01       	movw	r24, r4
    7208:	0e 94 8e 31 	call	0x631c	; 0x631c <get_menu_range>
    720c:	29 83       	std	Y+1, r18	; 0x01
    720e:	3a 83       	std	Y+2, r19	; 0x02
    7210:	4b 83       	std	Y+3, r20	; 0x03
    7212:	5c 83       	std	Y+4, r21	; 0x04
    7214:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    7216:	80 91 f2 07 	lds	r24, 0x07F2
    721a:	80 3e       	cpi	r24, 0xE0	; 224
    721c:	29 f5       	brne	.+74     	; 0x7268 <menu_rc_setup+0x18a>
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    721e:	80 91 31 05 	lds	r24, 0x0531
    7222:	90 91 32 05 	lds	r25, 0x0532
    7226:	bc 01       	movw	r22, r24
    7228:	65 59       	subi	r22, 0x95	; 149
    722a:	71 09       	sbc	r23, r1
    722c:	66 19       	sub	r22, r6
    722e:	77 09       	sbc	r23, r7
    7230:	eb 85       	ldd	r30, Y+11	; 0x0b
    7232:	fc 85       	ldd	r31, Y+12	; 0x0c
    7234:	e6 0f       	add	r30, r22
    7236:	f7 1f       	adc	r31, r23
    7238:	ee 0f       	add	r30, r30
    723a:	ff 1f       	adc	r31, r31
    723c:	e4 58       	subi	r30, 0x84	; 132
    723e:	f5 4e       	sbci	r31, 0xE5	; 229
    7240:	a5 90       	lpm	r10, Z+
    7242:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    7244:	4e 81       	ldd	r20, Y+6	; 0x06
    7246:	5f 81       	ldd	r21, Y+7	; 0x07
    7248:	64 0f       	add	r22, r20
    724a:	75 1f       	adc	r23, r21
    724c:	1f 92       	push	r1
    724e:	1f 92       	push	r1
    7250:	81 2c       	mov	r8, r1
    7252:	c1 2c       	mov	r12, r1
    7254:	e9 80       	ldd	r14, Y+1	; 0x01
    7256:	fa 80       	ldd	r15, Y+2	; 0x02
    7258:	0b 81       	ldd	r16, Y+3	; 0x03
    725a:	1c 81       	ldd	r17, Y+4	; 0x04
    725c:	2d 81       	ldd	r18, Y+5	; 0x05
    725e:	41 e0       	ldi	r20, 0x01	; 1
    7260:	0e 94 1a 32 	call	0x6434	; 0x6434 <do_menu_item>
    7264:	0f 90       	pop	r0
    7266:	0f 90       	pop	r0
		}

		if (button == ENTER)
    7268:	80 91 f2 07 	lds	r24, 0x07F2
    726c:	80 3e       	cpi	r24, 0xE0	; 224
    726e:	09 f0       	breq	.+2      	; 0x7272 <menu_rc_setup+0x194>
    7270:	89 cf       	rjmp	.-238    	; 0x7184 <menu_rc_setup+0xa6>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    7272:	0e 94 00 31 	call	0x6200	; 0x6200 <init_int>
			init_uart();			// and UART
    7276:	0e 94 ff 48 	call	0x91fe	; 0x91fe <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    727a:	0e 94 95 39 	call	0x732a	; 0x732a <UpdateLimits>
			
			
			// See if mixer preset has changed
			if (old_mixer != Config.Preset)
    727e:	80 91 49 06 	lds	r24, 0x0649
    7282:	5a 85       	ldd	r21, Y+10	; 0x0a
    7284:	58 13       	cpse	r21, r24
			{
				Load_eeprom_preset(Config.Preset);
    7286:	0e 94 a6 19 	call	0x334c	; 0x334c <Load_eeprom_preset>
			}

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    728a:	46 e0       	ldi	r20, 0x06	; 6
    728c:	80 91 45 06 	lds	r24, 0x0645
    7290:	48 1b       	sub	r20, r24
    7292:	6a e1       	ldi	r22, 0x1A	; 26
    7294:	80 ed       	ldi	r24, 0xD0	; 208
    7296:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    729a:	20 91 e4 05 	lds	r18, 0x05E4
    729e:	a9 eb       	ldi	r26, 0xB9	; 185
    72a0:	b5 e0       	ldi	r27, 0x05	; 5
    72a2:	80 e0       	ldi	r24, 0x00	; 0
    72a4:	90 e0       	ldi	r25, 0x00	; 0
    72a6:	fc 01       	movw	r30, r24
    72a8:	21 30       	cpi	r18, 0x01	; 1
    72aa:	19 f4       	brne	.+6      	; 0x72b2 <menu_rc_setup+0x1d4>
    72ac:	e2 51       	subi	r30, 0x12	; 18
    72ae:	ff 4f       	sbci	r31, 0xFF	; 255
    72b0:	02 c0       	rjmp	.+4      	; 0x72b6 <menu_rc_setup+0x1d8>
    72b2:	ea 50       	subi	r30, 0x0A	; 10
    72b4:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    72b6:	e4 91       	lpm	r30, Z
    72b8:	ec 93       	st	X, r30
    72ba:	01 96       	adiw	r24, 0x01	; 1
    72bc:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    72be:	88 30       	cpi	r24, 0x08	; 8
    72c0:	91 05       	cpc	r25, r1
    72c2:	89 f7       	brne	.-30     	; 0x72a6 <menu_rc_setup+0x1c8>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    72c4:	80 91 e1 05 	lds	r24, 0x05E1
    72c8:	82 30       	cpi	r24, 0x02	; 2
    72ca:	3c f4       	brge	.+14     	; 0x72da <menu_rc_setup+0x1fc>
    72cc:	80 91 e2 05 	lds	r24, 0x05E2
    72d0:	82 30       	cpi	r24, 0x02	; 2
    72d2:	19 f4       	brne	.+6      	; 0x72da <menu_rc_setup+0x1fc>
			{
				Config.Servo_rate = SYNC;
    72d4:	81 e0       	ldi	r24, 0x01	; 1
    72d6:	80 93 e2 05 	sts	0x05E2, r24
			}
						
			if (Config.ArmMode == ARMABLE)
    72da:	80 91 42 06 	lds	r24, 0x0642
    72de:	81 30       	cpi	r24, 0x01	; 1
    72e0:	31 f4       	brne	.+12     	; 0x72ee <menu_rc_setup+0x210>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    72e2:	80 91 20 05 	lds	r24, 0x0520
    72e6:	84 60       	ori	r24, 0x04	; 4
    72e8:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    72ec:	2b 98       	cbi	0x05, 3	; 5
			}

			Save_Config_to_EEPROM(); // Save value and return
    72ee:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    72f2:	0e 94 c3 36 	call	0x6d86	; 0x6d86 <Wait_BUTTON4>
    72f6:	46 cf       	rjmp	.-372    	; 0x7184 <menu_rc_setup+0xa6>
		}
	}
}
    72f8:	2c 96       	adiw	r28, 0x0c	; 12
    72fa:	0f b6       	in	r0, 0x3f	; 63
    72fc:	f8 94       	cli
    72fe:	de bf       	out	0x3e, r29	; 62
    7300:	0f be       	out	0x3f, r0	; 63
    7302:	cd bf       	out	0x3d, r28	; 61
    7304:	df 91       	pop	r29
    7306:	cf 91       	pop	r28
    7308:	1f 91       	pop	r17
    730a:	0f 91       	pop	r16
    730c:	ff 90       	pop	r15
    730e:	ef 90       	pop	r14
    7310:	df 90       	pop	r13
    7312:	cf 90       	pop	r12
    7314:	bf 90       	pop	r11
    7316:	af 90       	pop	r10
    7318:	9f 90       	pop	r9
    731a:	8f 90       	pop	r8
    731c:	7f 90       	pop	r7
    731e:	6f 90       	pop	r6
    7320:	5f 90       	pop	r5
    7322:	4f 90       	pop	r4
    7324:	3f 90       	pop	r3
    7326:	2f 90       	pop	r2
    7328:	08 95       	ret

0000732a <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    732a:	6f 92       	push	r6
    732c:	7f 92       	push	r7
    732e:	8f 92       	push	r8
    7330:	9f 92       	push	r9
    7332:	af 92       	push	r10
    7334:	bf 92       	push	r11
    7336:	cf 92       	push	r12
    7338:	df 92       	push	r13
    733a:	ef 92       	push	r14
    733c:	ff 92       	push	r15
    733e:	0f 93       	push	r16
    7340:	1f 93       	push	r17
    7342:	cf 93       	push	r28
    7344:	df 93       	push	r29
    7346:	cd b7       	in	r28, 0x3d	; 61
    7348:	de b7       	in	r29, 0x3e	; 62
    734a:	2c 97       	sbiw	r28, 0x0c	; 12
    734c:	0f b6       	in	r0, 0x3f	; 63
    734e:	f8 94       	cli
    7350:	de bf       	out	0x3e, r29	; 62
    7352:	0f be       	out	0x3f, r0	; 63
    7354:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    7356:	80 91 ec 05 	lds	r24, 0x05EC
    735a:	8f 83       	std	Y+7, r24	; 0x07
    735c:	80 91 f2 05 	lds	r24, 0x05F2
    7360:	88 87       	std	Y+8, r24	; 0x08
    7362:	80 91 f8 05 	lds	r24, 0x05F8
    7366:	89 87       	std	Y+9, r24	; 0x09
    7368:	80 91 fe 05 	lds	r24, 0x05FE
    736c:	8a 87       	std	Y+10, r24	; 0x0a
    736e:	80 91 04 06 	lds	r24, 0x0604
    7372:	8b 87       	std	Y+11, r24	; 0x0b
    7374:	80 91 0a 06 	lds	r24, 0x060A
    7378:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    737a:	80 91 eb 05 	lds	r24, 0x05EB
    737e:	89 83       	std	Y+1, r24	; 0x01
    7380:	80 91 f1 05 	lds	r24, 0x05F1
    7384:	8a 83       	std	Y+2, r24	; 0x02
    7386:	80 91 f7 05 	lds	r24, 0x05F7
    738a:	8b 83       	std	Y+3, r24	; 0x03
    738c:	80 91 fd 05 	lds	r24, 0x05FD
    7390:	8c 83       	std	Y+4, r24	; 0x04
    7392:	80 91 03 06 	lds	r24, 0x0603
    7396:	8d 83       	std	Y+5, r24	; 0x05
    7398:	80 91 09 06 	lds	r24, 0x0609
    739c:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    739e:	80 91 44 06 	lds	r24, 0x0644
    73a2:	99 27       	eor	r25, r25
    73a4:	87 fd       	sbrc	r24, 7
    73a6:	90 95       	com	r25
    73a8:	a9 2f       	mov	r26, r25
    73aa:	b9 2f       	mov	r27, r25
    73ac:	89 30       	cpi	r24, 0x09	; 9
    73ae:	91 05       	cpc	r25, r1
    73b0:	08 f5       	brcc	.+66     	; 0x73f4 <UpdateLimits+0xca>
    73b2:	fc 01       	movw	r30, r24
    73b4:	e4 5a       	subi	r30, 0xA4	; 164
    73b6:	ff 4f       	sbci	r31, 0xFF	; 255
    73b8:	0c 94 0d 4c 	jmp	0x981a	; 0x981a <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    73bc:	80 e4       	ldi	r24, 0x40	; 64
    73be:	91 e0       	ldi	r25, 0x01	; 1
    73c0:	14 c0       	rjmp	.+40     	; 0x73ea <UpdateLimits+0xc0>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    73c2:	8a e4       	ldi	r24, 0x4A	; 74
    73c4:	91 e0       	ldi	r25, 0x01	; 1
    73c6:	11 c0       	rjmp	.+34     	; 0x73ea <UpdateLimits+0xc0>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    73c8:	84 e5       	ldi	r24, 0x54	; 84
    73ca:	91 e0       	ldi	r25, 0x01	; 1
    73cc:	0e c0       	rjmp	.+28     	; 0x73ea <UpdateLimits+0xc0>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    73ce:	8e e5       	ldi	r24, 0x5E	; 94
    73d0:	91 e0       	ldi	r25, 0x01	; 1
    73d2:	0b c0       	rjmp	.+22     	; 0x73ea <UpdateLimits+0xc0>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    73d4:	88 e6       	ldi	r24, 0x68	; 104
    73d6:	91 e0       	ldi	r25, 0x01	; 1
    73d8:	08 c0       	rjmp	.+16     	; 0x73ea <UpdateLimits+0xc0>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    73da:	82 e7       	ldi	r24, 0x72	; 114
    73dc:	91 e0       	ldi	r25, 0x01	; 1
    73de:	05 c0       	rjmp	.+10     	; 0x73ea <UpdateLimits+0xc0>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    73e0:	8c e7       	ldi	r24, 0x7C	; 124
    73e2:	91 e0       	ldi	r25, 0x01	; 1
    73e4:	02 c0       	rjmp	.+4      	; 0x73ea <UpdateLimits+0xc0>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    73e6:	86 e8       	ldi	r24, 0x86	; 134
    73e8:	91 e0       	ldi	r25, 0x01	; 1
    73ea:	90 93 3f 06 	sts	0x063F, r25
    73ee:	80 93 3e 06 	sts	0x063E, r24
			break;
    73f2:	04 c0       	rjmp	.+8      	; 0x73fc <UpdateLimits+0xd2>
		default:
			Config.PowerTriggerActual = 0;			// Off
    73f4:	10 92 3f 06 	sts	0x063F, r1
    73f8:	10 92 3e 06 	sts	0x063E, r1
			break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    73fc:	20 91 2e 05 	lds	r18, 0x052E
    7400:	30 91 2f 05 	lds	r19, 0x052F
    7404:	80 91 3e 06 	lds	r24, 0x063E
    7408:	90 91 3f 06 	lds	r25, 0x063F
    740c:	26 36       	cpi	r18, 0x66	; 102
    740e:	48 e0       	ldi	r20, 0x08	; 8
    7410:	34 07       	cpc	r19, r20
    7412:	88 f0       	brcs	.+34     	; 0x7436 <UpdateLimits+0x10c>
	{
		Config.PowerTriggerActual *= 6;
    7414:	46 e0       	ldi	r20, 0x06	; 6
    7416:	48 9f       	mul	r20, r24
    7418:	90 01       	movw	r18, r0
    741a:	49 9f       	mul	r20, r25
    741c:	30 0d       	add	r19, r0
    741e:	11 24       	eor	r1, r1
    7420:	30 93 3f 06 	sts	0x063F, r19
    7424:	20 93 3e 06 	sts	0x063E, r18
    7428:	7e e0       	ldi	r23, 0x0E	; 14
    742a:	a7 2e       	mov	r10, r23
    742c:	76 e0       	ldi	r23, 0x06	; 6
    742e:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7430:	00 e0       	ldi	r16, 0x00	; 0
    7432:	10 e0       	ldi	r17, 0x00	; 0
    7434:	25 c0       	rjmp	.+74     	; 0x7480 <UpdateLimits+0x156>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    7436:	a9 01       	movw	r20, r18
    7438:	42 5c       	subi	r20, 0xC2	; 194
    743a:	56 40       	sbci	r21, 0x06	; 6
    743c:	44 3a       	cpi	r20, 0xA4	; 164
    743e:	51 40       	sbci	r21, 0x01	; 1
    7440:	10 f4       	brcc	.+4      	; 0x7446 <UpdateLimits+0x11c>
	{
		Config.PowerTriggerActual *= 5;
    7442:	45 e0       	ldi	r20, 0x05	; 5
    7444:	e8 cf       	rjmp	.-48     	; 0x7416 <UpdateLimits+0xec>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    7446:	a9 01       	movw	r20, r18
    7448:	44 51       	subi	r20, 0x14	; 20
    744a:	55 40       	sbci	r21, 0x05	; 5
    744c:	4e 3a       	cpi	r20, 0xAE	; 174
    744e:	51 40       	sbci	r21, 0x01	; 1
    7450:	28 f4       	brcc	.+10     	; 0x745c <UpdateLimits+0x132>
	{
		Config.PowerTriggerActual *= 4;
    7452:	88 0f       	add	r24, r24
    7454:	99 1f       	adc	r25, r25
    7456:	88 0f       	add	r24, r24
    7458:	99 1f       	adc	r25, r25
    745a:	0d c0       	rjmp	.+26     	; 0x7476 <UpdateLimits+0x14c>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    745c:	24 58       	subi	r18, 0x84	; 132
    745e:	33 40       	sbci	r19, 0x03	; 3
    7460:	20 39       	cpi	r18, 0x90	; 144
    7462:	31 40       	sbci	r19, 0x01	; 1
    7464:	30 f4       	brcc	.+12     	; 0x7472 <UpdateLimits+0x148>
	{
		Config.PowerTriggerActual *= 3;
    7466:	9c 01       	movw	r18, r24
    7468:	22 0f       	add	r18, r18
    746a:	33 1f       	adc	r19, r19
    746c:	28 0f       	add	r18, r24
    746e:	39 1f       	adc	r19, r25
    7470:	d7 cf       	rjmp	.-82     	; 0x7420 <UpdateLimits+0xf6>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    7472:	88 0f       	add	r24, r24
    7474:	99 1f       	adc	r25, r25
    7476:	90 93 3f 06 	sts	0x063F, r25
    747a:	80 93 3e 06 	sts	0x063E, r24
    747e:	d4 cf       	rjmp	.-88     	; 0x7428 <UpdateLimits+0xfe>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7480:	65 01       	movw	r12, r10
    7482:	e1 2c       	mov	r14, r1
    7484:	f1 2c       	mov	r15, r1
    7486:	87 e0       	ldi	r24, 0x07	; 7
    7488:	88 2e       	mov	r8, r24
    748a:	91 2c       	mov	r9, r1
    748c:	8c 0e       	add	r8, r28
    748e:	9d 1e       	adc	r9, r29
    7490:	80 0e       	add	r8, r16
    7492:	91 1e       	adc	r9, r17
    7494:	66 24       	eor	r6, r6
    7496:	63 94       	inc	r6
    7498:	71 2c       	mov	r7, r1
    749a:	6c 0e       	add	r6, r28
    749c:	7d 1e       	adc	r7, r29
    749e:	60 0e       	add	r6, r16
    74a0:	71 1e       	adc	r7, r17
    74a2:	f4 01       	movw	r30, r8
    74a4:	ee 0d       	add	r30, r14
    74a6:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    74a8:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    74aa:	bb 27       	eor	r27, r27
    74ac:	a7 fd       	sbrc	r26, 7
    74ae:	b0 95       	com	r27
    74b0:	20 e8       	ldi	r18, 0x80	; 128
    74b2:	32 e0       	ldi	r19, 0x02	; 2
    74b4:	0e 94 2a 4c 	call	0x9854	; 0x9854 <__usmulhisi3>
    74b8:	f6 01       	movw	r30, r12
    74ba:	61 93       	st	Z+, r22
    74bc:	71 93       	st	Z+, r23
    74be:	81 93       	st	Z+, r24
    74c0:	91 93       	st	Z+, r25
    74c2:	6f 01       	movw	r12, r30
    74c4:	f3 01       	movw	r30, r6
    74c6:	ee 0d       	add	r30, r14
    74c8:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    74ca:	20 81       	ld	r18, Z
    74cc:	22 23       	and	r18, r18
    74ce:	b1 f0       	breq	.+44     	; 0x74fc <UpdateLimits+0x1d2>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    74d0:	35 e0       	ldi	r19, 0x05	; 5
    74d2:	66 0f       	add	r22, r22
    74d4:	77 1f       	adc	r23, r23
    74d6:	88 1f       	adc	r24, r24
    74d8:	99 1f       	adc	r25, r25
    74da:	3a 95       	dec	r19
    74dc:	d1 f7       	brne	.-12     	; 0x74d2 <UpdateLimits+0x1a8>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    74de:	33 27       	eor	r19, r19
    74e0:	27 fd       	sbrc	r18, 7
    74e2:	30 95       	com	r19
    74e4:	43 2f       	mov	r20, r19
    74e6:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    74e8:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <__divmodsi4>
    74ec:	d6 01       	movw	r26, r12
    74ee:	54 96       	adiw	r26, 0x14	; 20
    74f0:	2d 93       	st	X+, r18
    74f2:	3d 93       	st	X+, r19
    74f4:	4d 93       	st	X+, r20
    74f6:	5c 93       	st	X, r21
    74f8:	57 97       	sbiw	r26, 0x17	; 23
    74fa:	05 c0       	rjmp	.+10     	; 0x7506 <UpdateLimits+0x1dc>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    74fc:	f6 01       	movw	r30, r12
    74fe:	14 8a       	std	Z+20, r1	; 0x14
    7500:	15 8a       	std	Z+21, r1	; 0x15
    7502:	16 8a       	std	Z+22, r1	; 0x16
    7504:	17 8a       	std	Z+23, r1	; 0x17
    7506:	ff ef       	ldi	r31, 0xFF	; 255
    7508:	ef 1a       	sub	r14, r31
    750a:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    750c:	23 e0       	ldi	r18, 0x03	; 3
    750e:	e2 16       	cp	r14, r18
    7510:	f1 04       	cpc	r15, r1
    7512:	39 f6       	brne	.-114    	; 0x74a2 <UpdateLimits+0x178>
    7514:	4c e0       	ldi	r20, 0x0C	; 12
    7516:	a4 0e       	add	r10, r20
    7518:	b1 1c       	adc	r11, r1
    751a:	0d 5f       	subi	r16, 0xFD	; 253
    751c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    751e:	06 30       	cpi	r16, 0x06	; 6
    7520:	11 05       	cpc	r17, r1
    7522:	09 f0       	breq	.+2      	; 0x7526 <UpdateLimits+0x1fc>
    7524:	ad cf       	rjmp	.-166    	; 0x7480 <UpdateLimits+0x156>
    7526:	82 e8       	ldi	r24, 0x82	; 130
    7528:	97 e0       	ldi	r25, 0x07	; 7
    752a:	e1 ec       	ldi	r30, 0xC1	; 193
    752c:	f5 e0       	ldi	r31, 0x05	; 5
    752e:	6a e8       	ldi	r22, 0x8A	; 138
    7530:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    7532:	dc 01       	movw	r26, r24
    7534:	2d 91       	ld	r18, X+
    7536:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7538:	ba e0       	ldi	r27, 0x0A	; 10
    753a:	2b 02       	muls	r18, r27
    753c:	90 01       	movw	r18, r0
    753e:	11 24       	eor	r1, r1
    7540:	2a 55       	subi	r18, 0x5A	; 90
    7542:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    7544:	31 83       	std	Z+1, r19	; 0x01
    7546:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    7548:	db 01       	movw	r26, r22
    754a:	2d 91       	ld	r18, X+
    754c:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    754e:	ba e0       	ldi	r27, 0x0A	; 10
    7550:	2b 02       	muls	r18, r27
    7552:	90 01       	movw	r18, r0
    7554:	11 24       	eor	r1, r1
    7556:	2a 55       	subi	r18, 0x5A	; 90
    7558:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    755a:	33 83       	std	Z+3, r19	; 0x03
    755c:	22 83       	std	Z+2, r18	; 0x02
    755e:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    7560:	25 e0       	ldi	r18, 0x05	; 5
    7562:	e1 3e       	cpi	r30, 0xE1	; 225
    7564:	f2 07       	cpc	r31, r18
    7566:	29 f7       	brne	.-54     	; 0x7532 <UpdateLimits+0x208>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    7568:	80 91 ef 05 	lds	r24, 0x05EF
    756c:	4a e0       	ldi	r20, 0x0A	; 10
    756e:	84 02       	muls	r24, r20
    7570:	c0 01       	movw	r24, r0
    7572:	11 24       	eor	r1, r1
    7574:	90 93 b8 07 	sts	0x07B8, r25
    7578:	80 93 b7 07 	sts	0x07B7, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    757c:	80 91 f5 05 	lds	r24, 0x05F5
    7580:	6a e0       	ldi	r22, 0x0A	; 10
    7582:	86 02       	muls	r24, r22
    7584:	c0 01       	movw	r24, r0
    7586:	11 24       	eor	r1, r1
    7588:	90 93 bc 07 	sts	0x07BC, r25
    758c:	80 93 bb 07 	sts	0x07BB, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    7590:	80 91 01 06 	lds	r24, 0x0601
    7594:	aa e0       	ldi	r26, 0x0A	; 10
    7596:	8a 02       	muls	r24, r26
    7598:	c0 01       	movw	r24, r0
    759a:	11 24       	eor	r1, r1
    759c:	90 93 ba 07 	sts	0x07BA, r25
    75a0:	80 93 b9 07 	sts	0x07B9, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    75a4:	80 91 07 06 	lds	r24, 0x0607
    75a8:	ba e0       	ldi	r27, 0x0A	; 10
    75aa:	8b 02       	muls	r24, r27
    75ac:	c0 01       	movw	r24, r0
    75ae:	11 24       	eor	r1, r1
    75b0:	90 93 be 07 	sts	0x07BE, r25
    75b4:	80 93 bd 07 	sts	0x07BD, r24
	}
}
    75b8:	2c 96       	adiw	r28, 0x0c	; 12
    75ba:	0f b6       	in	r0, 0x3f	; 63
    75bc:	f8 94       	cli
    75be:	de bf       	out	0x3e, r29	; 62
    75c0:	0f be       	out	0x3f, r0	; 63
    75c2:	cd bf       	out	0x3d, r28	; 61
    75c4:	df 91       	pop	r29
    75c6:	cf 91       	pop	r28
    75c8:	1f 91       	pop	r17
    75ca:	0f 91       	pop	r16
    75cc:	ff 90       	pop	r15
    75ce:	ef 90       	pop	r14
    75d0:	df 90       	pop	r13
    75d2:	cf 90       	pop	r12
    75d4:	bf 90       	pop	r11
    75d6:	af 90       	pop	r10
    75d8:	9f 90       	pop	r9
    75da:	8f 90       	pop	r8
    75dc:	7f 90       	pop	r7
    75de:	6f 90       	pop	r6
    75e0:	08 95       	ret

000075e2 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    75e2:	0f 93       	push	r16
    75e4:	1f 93       	push	r17
    75e6:	cf 93       	push	r28
    75e8:	df 93       	push	r29
    75ea:	aa e4       	ldi	r26, 0x4A	; 74
    75ec:	b6 e0       	ldi	r27, 0x06	; 6
    75ee:	0a e7       	ldi	r16, 0x7A	; 122
    75f0:	17 e0       	ldi	r17, 0x07	; 7
    75f2:	e1 ec       	ldi	r30, 0xC1	; 193
    75f4:	f5 e0       	ldi	r31, 0x05	; 5
    75f6:	80 e0       	ldi	r24, 0x00	; 0
    75f8:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    75fa:	2d 91       	ld	r18, X+
    75fc:	3c 91       	ld	r19, X
    75fe:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    7600:	e8 01       	movw	r28, r16
    7602:	49 91       	ld	r20, Y+
    7604:	8e 01       	movw	r16, r28
    7606:	41 30       	cpi	r20, 0x01	; 1
    7608:	19 f4       	brne	.+6      	; 0x7610 <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    760a:	31 95       	neg	r19
    760c:	21 95       	neg	r18
    760e:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    7610:	2a 55       	subi	r18, 0x5A	; 90
    7612:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    7614:	62 81       	ldd	r22, Z+2	; 0x02
    7616:	73 81       	ldd	r23, Z+3	; 0x03
    7618:	ac 01       	movw	r20, r24
    761a:	44 0f       	add	r20, r20
    761c:	55 1f       	adc	r21, r21
    761e:	62 17       	cp	r22, r18
    7620:	73 07       	cpc	r23, r19
    7622:	24 f4       	brge	.+8      	; 0x762c <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    7624:	4b 5b       	subi	r20, 0xBB	; 187
    7626:	57 4f       	sbci	r21, 0xF7	; 247
    7628:	ea 01       	movw	r28, r20
    762a:	08 c0       	rjmp	.+16     	; 0x763c <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    762c:	60 81       	ld	r22, Z
    762e:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7630:	4b 5b       	subi	r20, 0xBB	; 187
    7632:	57 4f       	sbci	r21, 0xF7	; 247
    7634:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    7636:	26 17       	cp	r18, r22
    7638:	37 07       	cpc	r19, r23
    763a:	1c f4       	brge	.+6      	; 0x7642 <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    763c:	79 83       	std	Y+1, r23	; 0x01
    763e:	68 83       	st	Y, r22
    7640:	02 c0       	rjmp	.+4      	; 0x7646 <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    7642:	39 83       	std	Y+1, r19	; 0x01
    7644:	28 83       	st	Y, r18
    7646:	01 96       	adiw	r24, 0x01	; 1
    7648:	96 96       	adiw	r26, 0x26	; 38
    764a:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    764c:	88 30       	cpi	r24, 0x08	; 8
    764e:	91 05       	cpc	r25, r1
    7650:	a1 f6       	brne	.-88     	; 0x75fa <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    7652:	df 91       	pop	r29
    7654:	cf 91       	pop	r28
    7656:	1f 91       	pop	r17
    7658:	0f 91       	pop	r16
    765a:	08 95       	ret

0000765c <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    765c:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    765e:	64 36       	cpi	r22, 0x64	; 100
    7660:	71 05       	cpc	r23, r1
    7662:	e9 f0       	breq	.+58     	; 0x769e <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    7664:	6c 39       	cpi	r22, 0x9C	; 156
    7666:	8f ef       	ldi	r24, 0xFF	; 255
    7668:	78 07       	cpc	r23, r24
    766a:	29 f4       	brne	.+10     	; 0x7676 <scale32+0x1a>
	{
		return -value16;	
    766c:	88 27       	eor	r24, r24
    766e:	99 27       	eor	r25, r25
    7670:	82 1b       	sub	r24, r18
    7672:	93 0b       	sbc	r25, r19
    7674:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    7676:	61 15       	cp	r22, r1
    7678:	71 05       	cpc	r23, r1
    767a:	71 f0       	breq	.+28     	; 0x7698 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    767c:	db 01       	movw	r26, r22
    767e:	0e 94 13 4c 	call	0x9826	; 0x9826 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    7682:	6e 5c       	subi	r22, 0xCE	; 206
    7684:	7f 4f       	sbci	r23, 0xFF	; 255
    7686:	8f 4f       	sbci	r24, 0xFF	; 255
    7688:	9f 4f       	sbci	r25, 0xFF	; 255
    768a:	24 e6       	ldi	r18, 0x64	; 100
    768c:	30 e0       	ldi	r19, 0x00	; 0
    768e:	40 e0       	ldi	r20, 0x00	; 0
    7690:	50 e0       	ldi	r21, 0x00	; 0
    7692:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <__divmodsi4>
    7696:	03 c0       	rjmp	.+6      	; 0x769e <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    7698:	80 e0       	ldi	r24, 0x00	; 0
    769a:	90 e0       	ldi	r25, 0x00	; 0
    769c:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    769e:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    76a0:	08 95       	ret

000076a2 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    76a2:	2f 92       	push	r2
    76a4:	3f 92       	push	r3
    76a6:	4f 92       	push	r4
    76a8:	5f 92       	push	r5
    76aa:	6f 92       	push	r6
    76ac:	7f 92       	push	r7
    76ae:	8f 92       	push	r8
    76b0:	9f 92       	push	r9
    76b2:	af 92       	push	r10
    76b4:	bf 92       	push	r11
    76b6:	cf 92       	push	r12
    76b8:	df 92       	push	r13
    76ba:	ef 92       	push	r14
    76bc:	ff 92       	push	r15
    76be:	0f 93       	push	r16
    76c0:	1f 93       	push	r17
    76c2:	cf 93       	push	r28
    76c4:	df 93       	push	r29
    76c6:	cd b7       	in	r28, 0x3d	; 61
    76c8:	de b7       	in	r29, 0x3e	; 62
    76ca:	e2 97       	sbiw	r28, 0x32	; 50
    76cc:	0f b6       	in	r0, 0x3f	; 63
    76ce:	f8 94       	cli
    76d0:	de bf       	out	0x3e, r29	; 62
    76d2:	0f be       	out	0x3f, r0	; 63
    76d4:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    76d6:	60 91 a0 05 	lds	r22, 0x05A0
    76da:	70 91 a1 05 	lds	r23, 0x05A1
    76de:	80 91 a2 05 	lds	r24, 0x05A2
    76e2:	90 91 a3 05 	lds	r25, 0x05A3
    76e6:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
    76ea:	8b 01       	movw	r16, r22
    76ec:	83 e0       	ldi	r24, 0x03	; 3
    76ee:	00 0f       	add	r16, r16
    76f0:	11 1f       	adc	r17, r17
    76f2:	8a 95       	dec	r24
    76f4:	e1 f7       	brne	.-8      	; 0x76ee <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    76f6:	60 91 a4 05 	lds	r22, 0x05A4
    76fa:	70 91 a5 05 	lds	r23, 0x05A5
    76fe:	80 91 a6 05 	lds	r24, 0x05A6
    7702:	90 91 a7 05 	lds	r25, 0x05A7
    7706:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
    770a:	93 e0       	ldi	r25, 0x03	; 3
    770c:	66 0f       	add	r22, r22
    770e:	77 1f       	adc	r23, r23
    7710:	9a 95       	dec	r25
    7712:	e1 f7       	brne	.-8      	; 0x770c <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    7714:	40 90 19 08 	lds	r4, 0x0819
    7718:	50 90 1a 08 	lds	r5, 0x081A
    771c:	58 8a       	std	Y+16, r5	; 0x10
    771e:	4f 86       	std	Y+15, r4	; 0x0f
    7720:	20 91 1b 08 	lds	r18, 0x081B
    7724:	30 91 1c 08 	lds	r19, 0x081C
    7728:	38 a3       	std	Y+32, r19	; 0x20
    772a:	2f 8f       	std	Y+31, r18	; 0x1f
    772c:	3a 8b       	std	Y+18, r19	; 0x12
    772e:	29 8b       	std	Y+17, r18	; 0x11
    7730:	40 91 1d 08 	lds	r20, 0x081D
    7734:	50 91 1e 08 	lds	r21, 0x081E
    7738:	5a a3       	std	Y+34, r21	; 0x22
    773a:	49 a3       	std	Y+33, r20	; 0x21
    773c:	5c 8b       	std	Y+20, r21	; 0x14
    773e:	4b 8b       	std	Y+19, r20	; 0x13
    7740:	1e 8b       	std	Y+22, r17	; 0x16
    7742:	0d 8b       	std	Y+21, r16	; 0x15
    7744:	78 8f       	std	Y+24, r23	; 0x18
    7746:	6f 8b       	std	Y+23, r22	; 0x17
    7748:	20 91 25 08 	lds	r18, 0x0825
    774c:	30 91 26 08 	lds	r19, 0x0826
    7750:	3c a3       	std	Y+36, r19	; 0x24
    7752:	2b a3       	std	Y+35, r18	; 0x23
    7754:	3a 8f       	std	Y+26, r19	; 0x1a
    7756:	29 8f       	std	Y+25, r18	; 0x19
    7758:	40 91 27 08 	lds	r20, 0x0827
    775c:	50 91 28 08 	lds	r21, 0x0828
    7760:	5e a3       	std	Y+38, r21	; 0x26
    7762:	4d a3       	std	Y+37, r20	; 0x25
    7764:	5c 8f       	std	Y+28, r21	; 0x1c
    7766:	4b 8f       	std	Y+27, r20	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    7768:	20 91 1f 08 	lds	r18, 0x081F
    776c:	30 91 20 08 	lds	r19, 0x0820
    7770:	38 a7       	std	Y+40, r19	; 0x28
    7772:	2f a3       	std	Y+39, r18	; 0x27
    7774:	3a 83       	std	Y+2, r19	; 0x02
    7776:	29 83       	std	Y+1, r18	; 0x01
    7778:	40 91 21 08 	lds	r20, 0x0821
    777c:	50 91 22 08 	lds	r21, 0x0822
    7780:	5a a7       	std	Y+42, r21	; 0x2a
    7782:	49 a7       	std	Y+41, r20	; 0x29
    7784:	5c 83       	std	Y+4, r21	; 0x04
    7786:	4b 83       	std	Y+3, r20	; 0x03
    7788:	20 90 23 08 	lds	r2, 0x0823
    778c:	30 90 24 08 	lds	r3, 0x0824
    7790:	3e 82       	std	Y+6, r3	; 0x06
    7792:	2d 82       	std	Y+5, r2	; 0x05
    7794:	18 87       	std	Y+8, r17	; 0x08
    7796:	0f 83       	std	Y+7, r16	; 0x07
    7798:	7a 87       	std	Y+10, r23	; 0x0a
    779a:	69 87       	std	Y+9, r22	; 0x09
    779c:	a0 90 2b 08 	lds	r10, 0x082B
    77a0:	b0 90 2c 08 	lds	r11, 0x082C
    77a4:	bc 86       	std	Y+12, r11	; 0x0c
    77a6:	ab 86       	std	Y+11, r10	; 0x0b
    77a8:	80 90 2d 08 	lds	r8, 0x082D
    77ac:	90 90 2e 08 	lds	r9, 0x082E
    77b0:	9e 86       	std	Y+14, r9	; 0x0e
    77b2:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    77b4:	50 91 23 05 	lds	r21, 0x0523
    77b8:	5d 8f       	std	Y+29, r21	; 0x1d
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    77ba:	20 91 29 08 	lds	r18, 0x0829
    77be:	30 91 2a 08 	lds	r19, 0x082A
    77c2:	3c a7       	std	Y+44, r19	; 0x2c
    77c4:	2b a7       	std	Y+43, r18	; 0x2b
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    77c6:	40 91 2f 08 	lds	r20, 0x082F
    77ca:	50 91 30 08 	lds	r21, 0x0830
    77ce:	5e a7       	std	Y+46, r21	; 0x2e
    77d0:	4d a7       	std	Y+45, r20	; 0x2d
    77d2:	c1 2c       	mov	r12, r1
    77d4:	d1 2c       	mov	r13, r1
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    77d6:	2f a1       	ldd	r18, Y+39	; 0x27
    77d8:	38 a5       	ldd	r19, Y+40	; 0x28
    77da:	31 95       	neg	r19
    77dc:	21 95       	neg	r18
    77de:	31 09       	sbc	r19, r1
    77e0:	38 ab       	std	Y+48, r19	; 0x30
    77e2:	2f a7       	std	Y+47, r18	; 0x2f
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    77e4:	44 27       	eor	r20, r20
    77e6:	55 27       	eor	r21, r21
    77e8:	44 19       	sub	r20, r4
    77ea:	55 09       	sbc	r21, r5
    77ec:	5a ab       	std	Y+50, r21	; 0x32
    77ee:	49 ab       	std	Y+49, r20	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    77f0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    77f2:	59 30       	cpi	r21, 0x09	; 9
    77f4:	08 f0       	brcs	.+2      	; 0x77f8 <ProcessMixer+0x156>
    77f6:	79 c0       	rjmp	.+242    	; 0x78ea <ProcessMixer+0x248>
    77f8:	86 01       	movw	r16, r12
    77fa:	08 54       	subi	r16, 0x48	; 72
    77fc:	1a 4f       	sbci	r17, 0xFA	; 250
    77fe:	f8 01       	movw	r30, r16
    7800:	ec 55       	subi	r30, 0x5C	; 92
    7802:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    7804:	80 81       	ld	r24, Z
    7806:	81 30       	cpi	r24, 0x01	; 1
    7808:	91 f0       	breq	.+36     	; 0x782e <ProcessMixer+0x18c>
    780a:	82 30       	cpi	r24, 0x02	; 2
    780c:	c9 f4       	brne	.+50     	; 0x7840 <ProcessMixer+0x19e>
    780e:	f8 01       	movw	r30, r16
    7810:	e2 56       	subi	r30, 0x62	; 98
    7812:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    7814:	60 81       	ld	r22, Z
    7816:	85 e0       	ldi	r24, 0x05	; 5
    7818:	68 02       	muls	r22, r24
    781a:	b0 01       	movw	r22, r0
    781c:	11 24       	eor	r1, r1
    781e:	c2 01       	movw	r24, r4
    7820:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    7824:	ee 24       	eor	r14, r14
    7826:	ff 24       	eor	r15, r15
    7828:	e8 1a       	sub	r14, r24
    782a:	f9 0a       	sbc	r15, r25
					break;
    782c:	0d c0       	rjmp	.+26     	; 0x7848 <ProcessMixer+0x1a6>
    782e:	f8 01       	movw	r30, r16
    7830:	e2 56       	subi	r30, 0x62	; 98
    7832:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7834:	80 81       	ld	r24, Z
    7836:	87 fd       	sbrc	r24, 7
    7838:	06 c0       	rjmp	.+12     	; 0x7846 <ProcessMixer+0x1a4>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    783a:	e9 a8       	ldd	r14, Y+49	; 0x31
    783c:	fa a8       	ldd	r15, Y+50	; 0x32
    783e:	04 c0       	rjmp	.+8      	; 0x7848 <ProcessMixer+0x1a6>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7840:	e1 2c       	mov	r14, r1
    7842:	f1 2c       	mov	r15, r1
    7844:	01 c0       	rjmp	.+2      	; 0x7848 <ProcessMixer+0x1a6>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    7846:	72 01       	movw	r14, r4
    7848:	f8 01       	movw	r30, r16
    784a:	ea 55       	subi	r30, 0x5A	; 90
    784c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    784e:	80 81       	ld	r24, Z
    7850:	81 30       	cpi	r24, 0x01	; 1
    7852:	89 f0       	breq	.+34     	; 0x7876 <ProcessMixer+0x1d4>
    7854:	82 30       	cpi	r24, 0x02	; 2
    7856:	f1 f4       	brne	.+60     	; 0x7894 <ProcessMixer+0x1f2>
    7858:	f8 01       	movw	r30, r16
    785a:	e0 56       	subi	r30, 0x60	; 96
    785c:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    785e:	60 81       	ld	r22, Z
    7860:	55 e0       	ldi	r21, 0x05	; 5
    7862:	65 02       	muls	r22, r21
    7864:	b0 01       	movw	r22, r0
    7866:	11 24       	eor	r1, r1
    7868:	8f 8d       	ldd	r24, Y+31	; 0x1f
    786a:	98 a1       	ldd	r25, Y+32	; 0x20
    786c:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    7870:	e8 1a       	sub	r14, r24
    7872:	f9 0a       	sbc	r15, r25
					break;
    7874:	0f c0       	rjmp	.+30     	; 0x7894 <ProcessMixer+0x1f2>
    7876:	f8 01       	movw	r30, r16
    7878:	e0 56       	subi	r30, 0x60	; 96
    787a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    787c:	80 81       	ld	r24, Z
    787e:	87 ff       	sbrs	r24, 7
    7880:	05 c0       	rjmp	.+10     	; 0x788c <ProcessMixer+0x1ea>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    7882:	2f 8d       	ldd	r18, Y+31	; 0x1f
    7884:	38 a1       	ldd	r19, Y+32	; 0x20
    7886:	e2 1a       	sub	r14, r18
    7888:	f3 0a       	sbc	r15, r19
    788a:	04 c0       	rjmp	.+8      	; 0x7894 <ProcessMixer+0x1f2>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    788c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    788e:	58 a1       	ldd	r21, Y+32	; 0x20
    7890:	e4 0e       	add	r14, r20
    7892:	f5 1e       	adc	r15, r21
    7894:	f8 01       	movw	r30, r16
    7896:	e8 55       	subi	r30, 0x58	; 88
    7898:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    789a:	80 81       	ld	r24, Z
    789c:	81 30       	cpi	r24, 0x01	; 1
    789e:	89 f0       	breq	.+34     	; 0x78c2 <ProcessMixer+0x220>
    78a0:	82 30       	cpi	r24, 0x02	; 2
    78a2:	f1 f4       	brne	.+60     	; 0x78e0 <ProcessMixer+0x23e>
    78a4:	f8 01       	movw	r30, r16
    78a6:	ee 55       	subi	r30, 0x5E	; 94
    78a8:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    78aa:	60 81       	ld	r22, Z
    78ac:	55 e0       	ldi	r21, 0x05	; 5
    78ae:	65 02       	muls	r22, r21
    78b0:	b0 01       	movw	r22, r0
    78b2:	11 24       	eor	r1, r1
    78b4:	89 a1       	ldd	r24, Y+33	; 0x21
    78b6:	9a a1       	ldd	r25, Y+34	; 0x22
    78b8:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    78bc:	e8 1a       	sub	r14, r24
    78be:	f9 0a       	sbc	r15, r25
					break;
    78c0:	0f c0       	rjmp	.+30     	; 0x78e0 <ProcessMixer+0x23e>
    78c2:	f8 01       	movw	r30, r16
    78c4:	ee 55       	subi	r30, 0x5E	; 94
    78c6:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_rudder_volume < 0 )
    78c8:	80 81       	ld	r24, Z
    78ca:	87 ff       	sbrs	r24, 7
    78cc:	05 c0       	rjmp	.+10     	; 0x78d8 <ProcessMixer+0x236>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    78ce:	29 a1       	ldd	r18, Y+33	; 0x21
    78d0:	3a a1       	ldd	r19, Y+34	; 0x22
    78d2:	e2 1a       	sub	r14, r18
    78d4:	f3 0a       	sbc	r15, r19
    78d6:	04 c0       	rjmp	.+8      	; 0x78e0 <ProcessMixer+0x23e>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    78d8:	49 a1       	ldd	r20, Y+33	; 0x21
    78da:	5a a1       	ldd	r21, Y+34	; 0x22
    78dc:	e4 0e       	add	r14, r20
    78de:	f5 1e       	adc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
    78e0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    78e2:	22 23       	and	r18, r18
    78e4:	09 f4       	brne	.+2      	; 0x78e8 <ProcessMixer+0x246>
    78e6:	7a c0       	rjmp	.+244    	; 0x79dc <ProcessMixer+0x33a>
    78e8:	02 c0       	rjmp	.+4      	; 0x78ee <ProcessMixer+0x24c>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    78ea:	e1 2c       	mov	r14, r1
    78ec:	f1 2c       	mov	r15, r1
    78ee:	a6 01       	movw	r20, r12
    78f0:	48 54       	subi	r20, 0x48	; 72
    78f2:	5a 4f       	sbci	r21, 0xFA	; 250
    78f4:	3a 01       	movw	r6, r20
    78f6:	fa 01       	movw	r30, r20
    78f8:	eb 55       	subi	r30, 0x5B	; 91
    78fa:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    78fc:	80 81       	ld	r24, Z
    78fe:	81 30       	cpi	r24, 0x01	; 1
    7900:	99 f0       	breq	.+38     	; 0x7928 <ProcessMixer+0x286>
    7902:	82 30       	cpi	r24, 0x02	; 2
    7904:	d1 f4       	brne	.+52     	; 0x793a <ProcessMixer+0x298>
    7906:	fa 01       	movw	r30, r20
    7908:	e1 56       	subi	r30, 0x61	; 97
    790a:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    790c:	60 81       	ld	r22, Z
    790e:	55 e0       	ldi	r21, 0x05	; 5
    7910:	65 02       	muls	r22, r21
    7912:	b0 01       	movw	r22, r0
    7914:	11 24       	eor	r1, r1
    7916:	8f a1       	ldd	r24, Y+39	; 0x27
    7918:	98 a5       	ldd	r25, Y+40	; 0x28
    791a:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    791e:	00 27       	eor	r16, r16
    7920:	11 27       	eor	r17, r17
    7922:	08 1b       	sub	r16, r24
    7924:	19 0b       	sbc	r17, r25
					break;
    7926:	0e c0       	rjmp	.+28     	; 0x7944 <ProcessMixer+0x2a2>
    7928:	fa 01       	movw	r30, r20
    792a:	e1 56       	subi	r30, 0x61	; 97
    792c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    792e:	80 81       	ld	r24, Z
    7930:	87 fd       	sbrc	r24, 7
    7932:	06 c0       	rjmp	.+12     	; 0x7940 <ProcessMixer+0x29e>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7934:	0f a5       	ldd	r16, Y+47	; 0x2f
    7936:	18 a9       	ldd	r17, Y+48	; 0x30
    7938:	05 c0       	rjmp	.+10     	; 0x7944 <ProcessMixer+0x2a2>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    793a:	00 e0       	ldi	r16, 0x00	; 0
    793c:	10 e0       	ldi	r17, 0x00	; 0
    793e:	02 c0       	rjmp	.+4      	; 0x7944 <ProcessMixer+0x2a2>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    7940:	0f a1       	ldd	r16, Y+39	; 0x27
    7942:	18 a5       	ldd	r17, Y+40	; 0x28
    7944:	f3 01       	movw	r30, r6
    7946:	e9 55       	subi	r30, 0x59	; 89
    7948:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    794a:	80 81       	ld	r24, Z
    794c:	81 30       	cpi	r24, 0x01	; 1
    794e:	89 f0       	breq	.+34     	; 0x7972 <ProcessMixer+0x2d0>
    7950:	82 30       	cpi	r24, 0x02	; 2
    7952:	f1 f4       	brne	.+60     	; 0x7990 <ProcessMixer+0x2ee>
    7954:	f3 01       	movw	r30, r6
    7956:	ef 55       	subi	r30, 0x5F	; 95
    7958:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    795a:	60 81       	ld	r22, Z
    795c:	55 e0       	ldi	r21, 0x05	; 5
    795e:	65 02       	muls	r22, r21
    7960:	b0 01       	movw	r22, r0
    7962:	11 24       	eor	r1, r1
    7964:	89 a5       	ldd	r24, Y+41	; 0x29
    7966:	9a a5       	ldd	r25, Y+42	; 0x2a
    7968:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    796c:	08 1b       	sub	r16, r24
    796e:	19 0b       	sbc	r17, r25
					break;
    7970:	0f c0       	rjmp	.+30     	; 0x7990 <ProcessMixer+0x2ee>
    7972:	f3 01       	movw	r30, r6
    7974:	ef 55       	subi	r30, 0x5F	; 95
    7976:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    7978:	80 81       	ld	r24, Z
    797a:	87 ff       	sbrs	r24, 7
    797c:	05 c0       	rjmp	.+10     	; 0x7988 <ProcessMixer+0x2e6>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    797e:	29 a5       	ldd	r18, Y+41	; 0x29
    7980:	3a a5       	ldd	r19, Y+42	; 0x2a
    7982:	02 1b       	sub	r16, r18
    7984:	13 0b       	sbc	r17, r19
    7986:	04 c0       	rjmp	.+8      	; 0x7990 <ProcessMixer+0x2ee>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    7988:	49 a5       	ldd	r20, Y+41	; 0x29
    798a:	5a a5       	ldd	r21, Y+42	; 0x2a
    798c:	04 0f       	add	r16, r20
    798e:	15 1f       	adc	r17, r21
    7990:	f3 01       	movw	r30, r6
    7992:	e7 55       	subi	r30, 0x57	; 87
    7994:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    7996:	80 81       	ld	r24, Z
    7998:	81 30       	cpi	r24, 0x01	; 1
    799a:	81 f0       	breq	.+32     	; 0x79bc <ProcessMixer+0x31a>
    799c:	82 30       	cpi	r24, 0x02	; 2
    799e:	c9 f4       	brne	.+50     	; 0x79d2 <ProcessMixer+0x330>
    79a0:	f3 01       	movw	r30, r6
    79a2:	ed 55       	subi	r30, 0x5D	; 93
    79a4:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    79a6:	60 81       	ld	r22, Z
    79a8:	85 e0       	ldi	r24, 0x05	; 5
    79aa:	68 02       	muls	r22, r24
    79ac:	b0 01       	movw	r22, r0
    79ae:	11 24       	eor	r1, r1
    79b0:	c1 01       	movw	r24, r2
    79b2:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    79b6:	08 1b       	sub	r16, r24
    79b8:	19 0b       	sbc	r17, r25
					break;
    79ba:	0b c0       	rjmp	.+22     	; 0x79d2 <ProcessMixer+0x330>
    79bc:	f3 01       	movw	r30, r6
    79be:	ed 55       	subi	r30, 0x5D	; 93
    79c0:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    79c2:	80 81       	ld	r24, Z
    79c4:	87 ff       	sbrs	r24, 7
    79c6:	03 c0       	rjmp	.+6      	; 0x79ce <ProcessMixer+0x32c>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    79c8:	02 19       	sub	r16, r2
    79ca:	13 09       	sbc	r17, r3
    79cc:	02 c0       	rjmp	.+4      	; 0x79d2 <ProcessMixer+0x330>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    79ce:	02 0d       	add	r16, r2
    79d0:	13 1d       	adc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
    79d2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    79d4:	29 30       	cpi	r18, 0x09	; 9
    79d6:	08 f0       	brcs	.+2      	; 0x79da <ProcessMixer+0x338>
    79d8:	7d c0       	rjmp	.+250    	; 0x7ad4 <ProcessMixer+0x432>
    79da:	02 c0       	rjmp	.+4      	; 0x79e0 <ProcessMixer+0x33e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    79dc:	00 e0       	ldi	r16, 0x00	; 0
    79de:	10 e0       	ldi	r17, 0x00	; 0
    79e0:	a6 01       	movw	r20, r12
    79e2:	48 54       	subi	r20, 0x48	; 72
    79e4:	5a 4f       	sbci	r21, 0xFA	; 250
    79e6:	3a 01       	movw	r6, r20
    79e8:	fa 01       	movw	r30, r20
    79ea:	e6 55       	subi	r30, 0x56	; 86
    79ec:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    79ee:	80 81       	ld	r24, Z
    79f0:	81 30       	cpi	r24, 0x01	; 1
    79f2:	89 f0       	breq	.+34     	; 0x7a16 <ProcessMixer+0x374>
    79f4:	82 30       	cpi	r24, 0x02	; 2
    79f6:	f1 f4       	brne	.+60     	; 0x7a34 <ProcessMixer+0x392>
    79f8:	fa 01       	movw	r30, r20
    79fa:	e2 56       	subi	r30, 0x62	; 98
    79fc:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    79fe:	60 81       	ld	r22, Z
    7a00:	55 e0       	ldi	r21, 0x05	; 5
    7a02:	65 02       	muls	r22, r21
    7a04:	b0 01       	movw	r22, r0
    7a06:	11 24       	eor	r1, r1
    7a08:	8b a1       	ldd	r24, Y+35	; 0x23
    7a0a:	9c a1       	ldd	r25, Y+36	; 0x24
    7a0c:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    7a10:	e8 1a       	sub	r14, r24
    7a12:	f9 0a       	sbc	r15, r25
					break;
    7a14:	0f c0       	rjmp	.+30     	; 0x7a34 <ProcessMixer+0x392>
    7a16:	fa 01       	movw	r30, r20
    7a18:	e2 56       	subi	r30, 0x62	; 98
    7a1a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7a1c:	80 81       	ld	r24, Z
    7a1e:	87 ff       	sbrs	r24, 7
    7a20:	05 c0       	rjmp	.+10     	; 0x7a2c <ProcessMixer+0x38a>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    7a22:	2b a1       	ldd	r18, Y+35	; 0x23
    7a24:	3c a1       	ldd	r19, Y+36	; 0x24
    7a26:	e2 0e       	add	r14, r18
    7a28:	f3 1e       	adc	r15, r19
    7a2a:	04 c0       	rjmp	.+8      	; 0x7a34 <ProcessMixer+0x392>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    7a2c:	4b a1       	ldd	r20, Y+35	; 0x23
    7a2e:	5c a1       	ldd	r21, Y+36	; 0x24
    7a30:	e4 1a       	sub	r14, r20
    7a32:	f5 0a       	sbc	r15, r21
    7a34:	f3 01       	movw	r30, r6
    7a36:	e4 55       	subi	r30, 0x54	; 84
    7a38:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    7a3a:	80 81       	ld	r24, Z
    7a3c:	81 30       	cpi	r24, 0x01	; 1
    7a3e:	89 f0       	breq	.+34     	; 0x7a62 <ProcessMixer+0x3c0>
    7a40:	82 30       	cpi	r24, 0x02	; 2
    7a42:	f1 f4       	brne	.+60     	; 0x7a80 <ProcessMixer+0x3de>
    7a44:	f3 01       	movw	r30, r6
    7a46:	e0 56       	subi	r30, 0x60	; 96
    7a48:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7a4a:	60 81       	ld	r22, Z
    7a4c:	55 e0       	ldi	r21, 0x05	; 5
    7a4e:	65 02       	muls	r22, r21
    7a50:	b0 01       	movw	r22, r0
    7a52:	11 24       	eor	r1, r1
    7a54:	8d a1       	ldd	r24, Y+37	; 0x25
    7a56:	9e a1       	ldd	r25, Y+38	; 0x26
    7a58:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    7a5c:	e8 1a       	sub	r14, r24
    7a5e:	f9 0a       	sbc	r15, r25
					break;
    7a60:	0f c0       	rjmp	.+30     	; 0x7a80 <ProcessMixer+0x3de>
    7a62:	f3 01       	movw	r30, r6
    7a64:	e0 56       	subi	r30, 0x60	; 96
    7a66:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7a68:	80 81       	ld	r24, Z
    7a6a:	87 ff       	sbrs	r24, 7
    7a6c:	05 c0       	rjmp	.+10     	; 0x7a78 <ProcessMixer+0x3d6>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    7a6e:	2d a1       	ldd	r18, Y+37	; 0x25
    7a70:	3e a1       	ldd	r19, Y+38	; 0x26
    7a72:	e2 1a       	sub	r14, r18
    7a74:	f3 0a       	sbc	r15, r19
    7a76:	04 c0       	rjmp	.+8      	; 0x7a80 <ProcessMixer+0x3de>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    7a78:	4d a1       	ldd	r20, Y+37	; 0x25
    7a7a:	5e a1       	ldd	r21, Y+38	; 0x26
    7a7c:	e4 0e       	add	r14, r20
    7a7e:	f5 1e       	adc	r15, r21
    7a80:	f3 01       	movw	r30, r6
    7a82:	e2 55       	subi	r30, 0x52	; 82
    7a84:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    7a86:	80 81       	ld	r24, Z
    7a88:	81 30       	cpi	r24, 0x01	; 1
    7a8a:	89 f0       	breq	.+34     	; 0x7aae <ProcessMixer+0x40c>
    7a8c:	82 30       	cpi	r24, 0x02	; 2
    7a8e:	f1 f4       	brne	.+60     	; 0x7acc <ProcessMixer+0x42a>
    7a90:	f3 01       	movw	r30, r6
    7a92:	e5 56       	subi	r30, 0x65	; 101
    7a94:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    7a96:	60 81       	ld	r22, Z
    7a98:	55 e0       	ldi	r21, 0x05	; 5
    7a9a:	65 02       	muls	r22, r21
    7a9c:	b0 01       	movw	r22, r0
    7a9e:	11 24       	eor	r1, r1
    7aa0:	8b a5       	ldd	r24, Y+43	; 0x2b
    7aa2:	9c a5       	ldd	r25, Y+44	; 0x2c
    7aa4:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    7aa8:	e8 1a       	sub	r14, r24
    7aaa:	f9 0a       	sbc	r15, r25
					break;
    7aac:	0f c0       	rjmp	.+30     	; 0x7acc <ProcessMixer+0x42a>
    7aae:	f3 01       	movw	r30, r6
    7ab0:	e5 56       	subi	r30, 0x65	; 101
    7ab2:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    7ab4:	80 81       	ld	r24, Z
    7ab6:	87 ff       	sbrs	r24, 7
    7ab8:	05 c0       	rjmp	.+10     	; 0x7ac4 <ProcessMixer+0x422>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7aba:	2b a5       	ldd	r18, Y+43	; 0x2b
    7abc:	3c a5       	ldd	r19, Y+44	; 0x2c
    7abe:	e2 0e       	add	r14, r18
    7ac0:	f3 1e       	adc	r15, r19
    7ac2:	04 c0       	rjmp	.+8      	; 0x7acc <ProcessMixer+0x42a>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    7ac4:	4b a5       	ldd	r20, Y+43	; 0x2b
    7ac6:	5c a5       	ldd	r21, Y+44	; 0x2c
    7ac8:	e4 1a       	sub	r14, r20
    7aca:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (Transition_state > TRANS_P1)
    7acc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7ace:	22 23       	and	r18, r18
    7ad0:	09 f4       	brne	.+2      	; 0x7ad4 <ProcessMixer+0x432>
    7ad2:	70 c0       	rjmp	.+224    	; 0x7bb4 <ProcessMixer+0x512>
    7ad4:	a6 01       	movw	r20, r12
    7ad6:	48 54       	subi	r20, 0x48	; 72
    7ad8:	5a 4f       	sbci	r21, 0xFA	; 250
    7ada:	3a 01       	movw	r6, r20
    7adc:	fa 01       	movw	r30, r20
    7ade:	e5 55       	subi	r30, 0x55	; 85
    7ae0:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    7ae2:	80 81       	ld	r24, Z
    7ae4:	81 30       	cpi	r24, 0x01	; 1
    7ae6:	81 f0       	breq	.+32     	; 0x7b08 <ProcessMixer+0x466>
    7ae8:	82 30       	cpi	r24, 0x02	; 2
    7aea:	c9 f4       	brne	.+50     	; 0x7b1e <ProcessMixer+0x47c>
    7aec:	fa 01       	movw	r30, r20
    7aee:	e1 56       	subi	r30, 0x61	; 97
    7af0:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7af2:	60 81       	ld	r22, Z
    7af4:	55 e0       	ldi	r21, 0x05	; 5
    7af6:	65 02       	muls	r22, r21
    7af8:	b0 01       	movw	r22, r0
    7afa:	11 24       	eor	r1, r1
    7afc:	c5 01       	movw	r24, r10
    7afe:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    7b02:	08 1b       	sub	r16, r24
    7b04:	19 0b       	sbc	r17, r25
					break;
    7b06:	0b c0       	rjmp	.+22     	; 0x7b1e <ProcessMixer+0x47c>
    7b08:	fa 01       	movw	r30, r20
    7b0a:	e1 56       	subi	r30, 0x61	; 97
    7b0c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    7b0e:	80 81       	ld	r24, Z
    7b10:	87 ff       	sbrs	r24, 7
    7b12:	03 c0       	rjmp	.+6      	; 0x7b1a <ProcessMixer+0x478>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    7b14:	0a 0d       	add	r16, r10
    7b16:	1b 1d       	adc	r17, r11
    7b18:	02 c0       	rjmp	.+4      	; 0x7b1e <ProcessMixer+0x47c>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    7b1a:	0a 19       	sub	r16, r10
    7b1c:	1b 09       	sbc	r17, r11
    7b1e:	f3 01       	movw	r30, r6
    7b20:	e3 55       	subi	r30, 0x53	; 83
    7b22:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    7b24:	80 81       	ld	r24, Z
    7b26:	81 30       	cpi	r24, 0x01	; 1
    7b28:	81 f0       	breq	.+32     	; 0x7b4a <ProcessMixer+0x4a8>
    7b2a:	82 30       	cpi	r24, 0x02	; 2
    7b2c:	c9 f4       	brne	.+50     	; 0x7b60 <ProcessMixer+0x4be>
    7b2e:	f3 01       	movw	r30, r6
    7b30:	ef 55       	subi	r30, 0x5F	; 95
    7b32:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    7b34:	60 81       	ld	r22, Z
    7b36:	85 e0       	ldi	r24, 0x05	; 5
    7b38:	68 02       	muls	r22, r24
    7b3a:	b0 01       	movw	r22, r0
    7b3c:	11 24       	eor	r1, r1
    7b3e:	c4 01       	movw	r24, r8
    7b40:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    7b44:	08 1b       	sub	r16, r24
    7b46:	19 0b       	sbc	r17, r25
					break;
    7b48:	0b c0       	rjmp	.+22     	; 0x7b60 <ProcessMixer+0x4be>
    7b4a:	f3 01       	movw	r30, r6
    7b4c:	ef 55       	subi	r30, 0x5F	; 95
    7b4e:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    7b50:	80 81       	ld	r24, Z
    7b52:	87 ff       	sbrs	r24, 7
    7b54:	03 c0       	rjmp	.+6      	; 0x7b5c <ProcessMixer+0x4ba>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    7b56:	08 19       	sub	r16, r8
    7b58:	19 09       	sbc	r17, r9
    7b5a:	02 c0       	rjmp	.+4      	; 0x7b60 <ProcessMixer+0x4be>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    7b5c:	08 0d       	add	r16, r8
    7b5e:	19 1d       	adc	r17, r9
    7b60:	f3 01       	movw	r30, r6
    7b62:	e1 55       	subi	r30, 0x51	; 81
    7b64:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    7b66:	80 81       	ld	r24, Z
    7b68:	81 30       	cpi	r24, 0x01	; 1
    7b6a:	89 f0       	breq	.+34     	; 0x7b8e <ProcessMixer+0x4ec>
    7b6c:	82 30       	cpi	r24, 0x02	; 2
    7b6e:	f1 f4       	brne	.+60     	; 0x7bac <ProcessMixer+0x50a>
    7b70:	f3 01       	movw	r30, r6
    7b72:	e4 56       	subi	r30, 0x64	; 100
    7b74:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    7b76:	60 81       	ld	r22, Z
    7b78:	55 e0       	ldi	r21, 0x05	; 5
    7b7a:	65 02       	muls	r22, r21
    7b7c:	b0 01       	movw	r22, r0
    7b7e:	11 24       	eor	r1, r1
    7b80:	8d a5       	ldd	r24, Y+45	; 0x2d
    7b82:	9e a5       	ldd	r25, Y+46	; 0x2e
    7b84:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    7b88:	08 1b       	sub	r16, r24
    7b8a:	19 0b       	sbc	r17, r25
					break;
    7b8c:	0f c0       	rjmp	.+30     	; 0x7bac <ProcessMixer+0x50a>
    7b8e:	f3 01       	movw	r30, r6
    7b90:	e4 56       	subi	r30, 0x64	; 100
    7b92:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    7b94:	80 81       	ld	r24, Z
    7b96:	87 ff       	sbrs	r24, 7
    7b98:	05 c0       	rjmp	.+10     	; 0x7ba4 <ProcessMixer+0x502>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7b9a:	2d a5       	ldd	r18, Y+45	; 0x2d
    7b9c:	3e a5       	ldd	r19, Y+46	; 0x2e
    7b9e:	02 0f       	add	r16, r18
    7ba0:	13 1f       	adc	r17, r19
    7ba2:	04 c0       	rjmp	.+8      	; 0x7bac <ProcessMixer+0x50a>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    7ba4:	4d a5       	ldd	r20, Y+45	; 0x2d
    7ba6:	5e a5       	ldd	r21, Y+46	; 0x2e
    7ba8:	04 1b       	sub	r16, r20
    7baa:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (Transition_state < TRANS_P2)
    7bac:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7bae:	29 30       	cpi	r18, 0x09	; 9
    7bb0:	08 f0       	brcs	.+2      	; 0x7bb4 <ProcessMixer+0x512>
    7bb2:	8d c0       	rjmp	.+282    	; 0x7cce <ProcessMixer+0x62c>
    7bb4:	a6 01       	movw	r20, r12
    7bb6:	48 54       	subi	r20, 0x48	; 72
    7bb8:	5a 4f       	sbci	r21, 0xFA	; 250
    7bba:	3a 01       	movw	r6, r20
    7bbc:	fa 01       	movw	r30, r20
    7bbe:	e2 56       	subi	r30, 0x62	; 98
    7bc0:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    7bc2:	60 81       	ld	r22, Z
    7bc4:	66 23       	and	r22, r22
    7bc6:	59 f0       	breq	.+22     	; 0x7bde <ProcessMixer+0x53c>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    7bc8:	80 91 35 08 	lds	r24, 0x0835
    7bcc:	90 91 36 08 	lds	r25, 0x0836
    7bd0:	77 27       	eor	r23, r23
    7bd2:	67 fd       	sbrc	r22, 7
    7bd4:	70 95       	com	r23
    7bd6:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
				P1_solution = P1_solution + temp2;
    7bda:	e8 0e       	add	r14, r24
    7bdc:	f9 1e       	adc	r15, r25
    7bde:	f3 01       	movw	r30, r6
    7be0:	e0 56       	subi	r30, 0x60	; 96
    7be2:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    7be4:	60 81       	ld	r22, Z
    7be6:	66 23       	and	r22, r22
    7be8:	59 f0       	breq	.+22     	; 0x7c00 <ProcessMixer+0x55e>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    7bea:	80 91 37 08 	lds	r24, 0x0837
    7bee:	90 91 38 08 	lds	r25, 0x0838
    7bf2:	77 27       	eor	r23, r23
    7bf4:	67 fd       	sbrc	r22, 7
    7bf6:	70 95       	com	r23
    7bf8:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
				P1_solution = P1_solution + temp2;
    7bfc:	e8 0e       	add	r14, r24
    7bfe:	f9 1e       	adc	r15, r25
    7c00:	f3 01       	movw	r30, r6
    7c02:	ee 55       	subi	r30, 0x5E	; 94
    7c04:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    7c06:	60 81       	ld	r22, Z
    7c08:	66 23       	and	r22, r22
    7c0a:	59 f0       	breq	.+22     	; 0x7c22 <ProcessMixer+0x580>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    7c0c:	80 91 39 08 	lds	r24, 0x0839
    7c10:	90 91 3a 08 	lds	r25, 0x083A
    7c14:	77 27       	eor	r23, r23
    7c16:	67 fd       	sbrc	r22, 7
    7c18:	70 95       	com	r23
    7c1a:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
				P1_solution = P1_solution + temp2;
    7c1e:	e8 0e       	add	r14, r24
    7c20:	f9 1e       	adc	r15, r25
    7c22:	f3 01       	movw	r30, r6
    7c24:	ef 54       	subi	r30, 0x4F	; 79
    7c26:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    7c28:	60 81       	ld	r22, Z
    7c2a:	66 23       	and	r22, r22
    7c2c:	19 f1       	breq	.+70     	; 0x7c74 <ProcessMixer+0x5d2>
    7c2e:	31 97       	sbiw	r30, 0x01	; 1
    7c30:	80 81       	ld	r24, Z
    7c32:	8f 30       	cpi	r24, 0x0F	; 15
    7c34:	f9 f0       	breq	.+62     	; 0x7c74 <ProcessMixer+0x5d2>
    7c36:	e8 2f       	mov	r30, r24
    7c38:	ff 27       	eor	r31, r31
    7c3a:	e7 fd       	sbrc	r30, 7
    7c3c:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    7c3e:	88 30       	cpi	r24, 0x08	; 8
    7c40:	64 f0       	brlt	.+24     	; 0x7c5a <ProcessMixer+0x5b8>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    7c42:	38 97       	sbiw	r30, 0x08	; 8
    7c44:	ee 0f       	add	r30, r30
    7c46:	ff 1f       	adc	r31, r31
    7c48:	81 e0       	ldi	r24, 0x01	; 1
    7c4a:	90 e0       	ldi	r25, 0x00	; 0
    7c4c:	8c 0f       	add	r24, r28
    7c4e:	9d 1f       	adc	r25, r29
    7c50:	e8 0f       	add	r30, r24
    7c52:	f9 1f       	adc	r31, r25
    7c54:	86 85       	ldd	r24, Z+14	; 0x0e
    7c56:	97 85       	ldd	r25, Z+15	; 0x0f
    7c58:	06 c0       	rjmp	.+12     	; 0x7c66 <ProcessMixer+0x5c4>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    7c5a:	ee 0f       	add	r30, r30
    7c5c:	ff 1f       	adc	r31, r31
    7c5e:	ed 5c       	subi	r30, 0xCD	; 205
    7c60:	f7 4f       	sbci	r31, 0xF7	; 247
    7c62:	80 81       	ld	r24, Z
    7c64:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    7c66:	77 27       	eor	r23, r23
    7c68:	67 fd       	sbrc	r22, 7
    7c6a:	70 95       	com	r23
    7c6c:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
				P1_solution = P1_solution + temp2;
    7c70:	e8 0e       	add	r14, r24
    7c72:	f9 1e       	adc	r15, r25
    7c74:	f3 01       	movw	r30, r6
    7c76:	eb 54       	subi	r30, 0x4B	; 75
    7c78:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    7c7a:	60 81       	ld	r22, Z
    7c7c:	66 23       	and	r22, r22
    7c7e:	19 f1       	breq	.+70     	; 0x7cc6 <ProcessMixer+0x624>
    7c80:	31 97       	sbiw	r30, 0x01	; 1
    7c82:	80 81       	ld	r24, Z
    7c84:	8f 30       	cpi	r24, 0x0F	; 15
    7c86:	f9 f0       	breq	.+62     	; 0x7cc6 <ProcessMixer+0x624>
    7c88:	e8 2f       	mov	r30, r24
    7c8a:	ff 27       	eor	r31, r31
    7c8c:	e7 fd       	sbrc	r30, 7
    7c8e:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    7c90:	88 30       	cpi	r24, 0x08	; 8
    7c92:	64 f0       	brlt	.+24     	; 0x7cac <ProcessMixer+0x60a>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    7c94:	38 97       	sbiw	r30, 0x08	; 8
    7c96:	ee 0f       	add	r30, r30
    7c98:	ff 1f       	adc	r31, r31
    7c9a:	a1 e0       	ldi	r26, 0x01	; 1
    7c9c:	b0 e0       	ldi	r27, 0x00	; 0
    7c9e:	ac 0f       	add	r26, r28
    7ca0:	bd 1f       	adc	r27, r29
    7ca2:	ea 0f       	add	r30, r26
    7ca4:	fb 1f       	adc	r31, r27
    7ca6:	86 85       	ldd	r24, Z+14	; 0x0e
    7ca8:	97 85       	ldd	r25, Z+15	; 0x0f
    7caa:	06 c0       	rjmp	.+12     	; 0x7cb8 <ProcessMixer+0x616>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    7cac:	ee 0f       	add	r30, r30
    7cae:	ff 1f       	adc	r31, r31
    7cb0:	ed 5c       	subi	r30, 0xCD	; 205
    7cb2:	f7 4f       	sbci	r31, 0xF7	; 247
    7cb4:	80 81       	ld	r24, Z
    7cb6:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    7cb8:	77 27       	eor	r23, r23
    7cba:	67 fd       	sbrc	r22, 7
    7cbc:	70 95       	com	r23
    7cbe:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
				P1_solution = P1_solution + temp2;
    7cc2:	e8 0e       	add	r14, r24
    7cc4:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (Transition_state > TRANS_P1)	
    7cc6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7cc8:	22 23       	and	r18, r18
    7cca:	09 f4       	brne	.+2      	; 0x7cce <ProcessMixer+0x62c>
    7ccc:	85 c0       	rjmp	.+266    	; 0x7dd8 <ProcessMixer+0x736>
    7cce:	a6 01       	movw	r20, r12
    7cd0:	48 54       	subi	r20, 0x48	; 72
    7cd2:	5a 4f       	sbci	r21, 0xFA	; 250
    7cd4:	3a 01       	movw	r6, r20
    7cd6:	fa 01       	movw	r30, r20
    7cd8:	e1 56       	subi	r30, 0x61	; 97
    7cda:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    7cdc:	60 81       	ld	r22, Z
    7cde:	66 23       	and	r22, r22
    7ce0:	59 f0       	breq	.+22     	; 0x7cf8 <ProcessMixer+0x656>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    7ce2:	80 91 35 08 	lds	r24, 0x0835
    7ce6:	90 91 36 08 	lds	r25, 0x0836
    7cea:	77 27       	eor	r23, r23
    7cec:	67 fd       	sbrc	r22, 7
    7cee:	70 95       	com	r23
    7cf0:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
				P2_solution = P2_solution + temp2;
    7cf4:	08 0f       	add	r16, r24
    7cf6:	19 1f       	adc	r17, r25
    7cf8:	f3 01       	movw	r30, r6
    7cfa:	ef 55       	subi	r30, 0x5F	; 95
    7cfc:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    7cfe:	60 81       	ld	r22, Z
    7d00:	66 23       	and	r22, r22
    7d02:	59 f0       	breq	.+22     	; 0x7d1a <ProcessMixer+0x678>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    7d04:	80 91 37 08 	lds	r24, 0x0837
    7d08:	90 91 38 08 	lds	r25, 0x0838
    7d0c:	77 27       	eor	r23, r23
    7d0e:	67 fd       	sbrc	r22, 7
    7d10:	70 95       	com	r23
    7d12:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
				P2_solution = P2_solution + temp2;
    7d16:	08 0f       	add	r16, r24
    7d18:	19 1f       	adc	r17, r25
    7d1a:	f3 01       	movw	r30, r6
    7d1c:	ed 55       	subi	r30, 0x5D	; 93
    7d1e:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    7d20:	60 81       	ld	r22, Z
    7d22:	66 23       	and	r22, r22
    7d24:	59 f0       	breq	.+22     	; 0x7d3c <ProcessMixer+0x69a>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    7d26:	80 91 39 08 	lds	r24, 0x0839
    7d2a:	90 91 3a 08 	lds	r25, 0x083A
    7d2e:	77 27       	eor	r23, r23
    7d30:	67 fd       	sbrc	r22, 7
    7d32:	70 95       	com	r23
    7d34:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
				P2_solution = P2_solution + temp2;
    7d38:	08 0f       	add	r16, r24
    7d3a:	19 1f       	adc	r17, r25
    7d3c:	f3 01       	movw	r30, r6
    7d3e:	ed 54       	subi	r30, 0x4D	; 77
    7d40:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    7d42:	60 81       	ld	r22, Z
    7d44:	66 23       	and	r22, r22
    7d46:	09 f1       	breq	.+66     	; 0x7d8a <ProcessMixer+0x6e8>
    7d48:	31 97       	sbiw	r30, 0x01	; 1
    7d4a:	80 81       	ld	r24, Z
    7d4c:	8f 30       	cpi	r24, 0x0F	; 15
    7d4e:	e9 f0       	breq	.+58     	; 0x7d8a <ProcessMixer+0x6e8>
    7d50:	e8 2f       	mov	r30, r24
    7d52:	ff 27       	eor	r31, r31
    7d54:	e7 fd       	sbrc	r30, 7
    7d56:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    7d58:	88 30       	cpi	r24, 0x08	; 8
    7d5a:	54 f0       	brlt	.+20     	; 0x7d70 <ProcessMixer+0x6ce>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    7d5c:	38 97       	sbiw	r30, 0x08	; 8
    7d5e:	ee 0f       	add	r30, r30
    7d60:	ff 1f       	adc	r31, r31
    7d62:	81 e0       	ldi	r24, 0x01	; 1
    7d64:	90 e0       	ldi	r25, 0x00	; 0
    7d66:	8c 0f       	add	r24, r28
    7d68:	9d 1f       	adc	r25, r29
    7d6a:	e8 0f       	add	r30, r24
    7d6c:	f9 1f       	adc	r31, r25
    7d6e:	04 c0       	rjmp	.+8      	; 0x7d78 <ProcessMixer+0x6d6>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    7d70:	ee 0f       	add	r30, r30
    7d72:	ff 1f       	adc	r31, r31
    7d74:	ed 5c       	subi	r30, 0xCD	; 205
    7d76:	f7 4f       	sbci	r31, 0xF7	; 247
    7d78:	80 81       	ld	r24, Z
    7d7a:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    7d7c:	77 27       	eor	r23, r23
    7d7e:	67 fd       	sbrc	r22, 7
    7d80:	70 95       	com	r23
    7d82:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
				P2_solution = P2_solution + temp2;
    7d86:	08 0f       	add	r16, r24
    7d88:	19 1f       	adc	r17, r25
    7d8a:	f3 01       	movw	r30, r6
    7d8c:	e9 54       	subi	r30, 0x49	; 73
    7d8e:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    7d90:	60 81       	ld	r22, Z
    7d92:	66 23       	and	r22, r22
    7d94:	09 f1       	breq	.+66     	; 0x7dd8 <ProcessMixer+0x736>
    7d96:	31 97       	sbiw	r30, 0x01	; 1
    7d98:	80 81       	ld	r24, Z
    7d9a:	8f 30       	cpi	r24, 0x0F	; 15
    7d9c:	e9 f0       	breq	.+58     	; 0x7dd8 <ProcessMixer+0x736>
    7d9e:	e8 2f       	mov	r30, r24
    7da0:	ff 27       	eor	r31, r31
    7da2:	e7 fd       	sbrc	r30, 7
    7da4:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    7da6:	88 30       	cpi	r24, 0x08	; 8
    7da8:	54 f0       	brlt	.+20     	; 0x7dbe <ProcessMixer+0x71c>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    7daa:	38 97       	sbiw	r30, 0x08	; 8
    7dac:	ee 0f       	add	r30, r30
    7dae:	ff 1f       	adc	r31, r31
    7db0:	a1 e0       	ldi	r26, 0x01	; 1
    7db2:	b0 e0       	ldi	r27, 0x00	; 0
    7db4:	ac 0f       	add	r26, r28
    7db6:	bd 1f       	adc	r27, r29
    7db8:	ea 0f       	add	r30, r26
    7dba:	fb 1f       	adc	r31, r27
    7dbc:	04 c0       	rjmp	.+8      	; 0x7dc6 <ProcessMixer+0x724>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    7dbe:	ee 0f       	add	r30, r30
    7dc0:	ff 1f       	adc	r31, r31
    7dc2:	ed 5c       	subi	r30, 0xCD	; 205
    7dc4:	f7 4f       	sbci	r31, 0xF7	; 247
    7dc6:	80 81       	ld	r24, Z
    7dc8:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    7dca:	77 27       	eor	r23, r23
    7dcc:	67 fd       	sbrc	r22, 7
    7dce:	70 95       	com	r23
    7dd0:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
				P2_solution = P2_solution + temp2;
    7dd4:	08 0f       	add	r16, r24
    7dd6:	19 1f       	adc	r17, r25
    7dd8:	c6 01       	movw	r24, r12
    7dda:	88 54       	subi	r24, 0x48	; 72
    7ddc:	9a 4f       	sbci	r25, 0xFA	; 250
    7dde:	fc 01       	movw	r30, r24
    7de0:	ee 56       	subi	r30, 0x6E	; 110
    7de2:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    7de4:	f1 82       	std	Z+1, r15	; 0x01
    7de6:	e0 82       	st	Z, r14
    7de8:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    7dea:	11 83       	std	Z+1, r17	; 0x01
    7dec:	00 83       	st	Z, r16
    7dee:	b6 e2       	ldi	r27, 0x26	; 38
    7df0:	cb 0e       	add	r12, r27
    7df2:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    7df4:	e0 e3       	ldi	r30, 0x30	; 48
    7df6:	ce 16       	cp	r12, r30
    7df8:	e1 e0       	ldi	r30, 0x01	; 1
    7dfa:	de 06       	cpc	r13, r30
    7dfc:	09 f0       	breq	.+2      	; 0x7e00 <ProcessMixer+0x75e>
    7dfe:	f8 cc       	rjmp	.-1552   	; 0x77f0 <ProcessMixer+0x14e>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    7e00:	80 91 e6 05 	lds	r24, 0x05E6
    7e04:	88 23       	and	r24, r24
    7e06:	41 f0       	breq	.+16     	; 0x7e18 <ProcessMixer+0x776>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    7e08:	80 91 24 05 	lds	r24, 0x0524
    7e0c:	90 91 25 05 	lds	r25, 0x0525
    7e10:	90 93 22 05 	sts	0x0522, r25
    7e14:	80 93 21 05 	sts	0x0521, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    7e18:	00 91 21 05 	lds	r16, 0x0521
    7e1c:	10 91 22 05 	lds	r17, 0x0522
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    7e20:	b4 e6       	ldi	r27, 0x64	; 100
    7e22:	cb 2e       	mov	r12, r27
    7e24:	d1 2c       	mov	r13, r1
    7e26:	c0 1a       	sub	r12, r16
    7e28:	d1 0a       	sbc	r13, r17
    7e2a:	8a e4       	ldi	r24, 0x4A	; 74
    7e2c:	e8 2e       	mov	r14, r24
    7e2e:	86 e0       	ldi	r24, 0x06	; 6
    7e30:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    7e32:	01 15       	cp	r16, r1
    7e34:	11 05       	cpc	r17, r1
    7e36:	21 f4       	brne	.+8      	; 0x7e40 <ProcessMixer+0x79e>
		{
			temp1 = Config.Channel[i].P1_value;
    7e38:	d7 01       	movw	r26, r14
    7e3a:	8d 91       	ld	r24, X+
    7e3c:	9c 91       	ld	r25, X
    7e3e:	16 c0       	rjmp	.+44     	; 0x7e6c <ProcessMixer+0x7ca>
		}
		else if (transition >= 100)
    7e40:	04 36       	cpi	r16, 0x64	; 100
    7e42:	11 05       	cpc	r17, r1
    7e44:	24 f0       	brlt	.+8      	; 0x7e4e <ProcessMixer+0x7ac>
		{
			temp1 = Config.Channel[i].P2_value;
    7e46:	f7 01       	movw	r30, r14
    7e48:	82 81       	ldd	r24, Z+2	; 0x02
    7e4a:	93 81       	ldd	r25, Z+3	; 0x03
    7e4c:	0f c0       	rjmp	.+30     	; 0x7e6c <ProcessMixer+0x7ca>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    7e4e:	b6 01       	movw	r22, r12
    7e50:	d7 01       	movw	r26, r14
    7e52:	8d 91       	ld	r24, X+
    7e54:	9c 91       	ld	r25, X
    7e56:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>
    7e5a:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    7e5c:	b8 01       	movw	r22, r16
    7e5e:	f7 01       	movw	r30, r14
    7e60:	82 81       	ldd	r24, Z+2	; 0x02
    7e62:	93 81       	ldd	r25, Z+3	; 0x03
    7e64:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    7e68:	8a 0d       	add	r24, r10
    7e6a:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    7e6c:	d7 01       	movw	r26, r14
    7e6e:	8d 93       	st	X+, r24
    7e70:	9c 93       	st	X, r25
    7e72:	b6 e2       	ldi	r27, 0x26	; 38
    7e74:	eb 0e       	add	r14, r27
    7e76:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    7e78:	ea e7       	ldi	r30, 0x7A	; 122
    7e7a:	ee 16       	cp	r14, r30
    7e7c:	e7 e0       	ldi	r30, 0x07	; 7
    7e7e:	fe 06       	cpc	r15, r30
    7e80:	c1 f6       	brne	.-80     	; 0x7e32 <ProcessMixer+0x790>
    7e82:	64 e5       	ldi	r22, 0x54	; 84
    7e84:	c6 2e       	mov	r12, r22
    7e86:	66 e0       	ldi	r22, 0x06	; 6
    7e88:	d6 2e       	mov	r13, r22
    7e8a:	75 e5       	ldi	r23, 0x55	; 85
    7e8c:	87 2e       	mov	r8, r23
    7e8e:	76 e0       	ldi	r23, 0x06	; 6
    7e90:	97 2e       	mov	r9, r23
    7e92:	ea e4       	ldi	r30, 0x4A	; 74
    7e94:	ee 2e       	mov	r14, r30
    7e96:	e6 e0       	ldi	r30, 0x06	; 6
    7e98:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    7e9a:	f4 e6       	ldi	r31, 0x64	; 100
    7e9c:	af 2e       	mov	r10, r31
    7e9e:	b1 2c       	mov	r11, r1
    7ea0:	80 2f       	mov	r24, r16
    7ea2:	99 27       	eor	r25, r25
    7ea4:	87 fd       	sbrc	r24, 7
    7ea6:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    7ea8:	9c 01       	movw	r18, r24
    7eaa:	2c 55       	subi	r18, 0x5C	; 92
    7eac:	35 4e       	sbci	r19, 0xE5	; 229
    7eae:	3e 8f       	std	Y+30, r19	; 0x1e
    7eb0:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    7eb2:	95 01       	movw	r18, r10
    7eb4:	28 1b       	sub	r18, r24
    7eb6:	39 0b       	sbc	r19, r25
    7eb8:	a9 01       	movw	r20, r18
    7eba:	4c 55       	subi	r20, 0x5C	; 92
    7ebc:	55 4e       	sbci	r21, 0xE5	; 229
    7ebe:	58 a3       	std	Y+32, r21	; 0x20
    7ec0:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    7ec2:	dc 01       	movw	r26, r24
    7ec4:	a7 5f       	subi	r26, 0xF7	; 247
    7ec6:	b4 4e       	sbci	r27, 0xE4	; 228
    7ec8:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    7eca:	f9 01       	movw	r30, r18
    7ecc:	e7 5f       	subi	r30, 0xF7	; 247
    7ece:	f4 4e       	sbci	r31, 0xE4	; 228
    7ed0:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    7ed2:	ae e1       	ldi	r26, 0x1E	; 30
    7ed4:	6a 2e       	mov	r6, r26
    7ed6:	ab ef       	ldi	r26, 0xFB	; 251
    7ed8:	7a 2e       	mov	r7, r26
    7eda:	f6 01       	movw	r30, r12
    7edc:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    7ede:	90 81       	ld	r25, Z
    7ee0:	d6 01       	movw	r26, r12
    7ee2:	8c 91       	ld	r24, X
    7ee4:	91 11       	cpse	r25, r1
    7ee6:	03 c0       	rjmp	.+6      	; 0x7eee <ProcessMixer+0x84c>
    7ee8:	88 23       	and	r24, r24
    7eea:	09 f4       	brne	.+2      	; 0x7eee <ProcessMixer+0x84c>
    7eec:	61 c0       	rjmp	.+194    	; 0x7fb0 <ProcessMixer+0x90e>
    7eee:	29 2f       	mov	r18, r25
    7ef0:	33 27       	eor	r19, r19
    7ef2:	27 fd       	sbrc	r18, 7
    7ef4:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    7ef6:	98 17       	cp	r25, r24
    7ef8:	09 f4       	brne	.+2      	; 0x7efc <ProcessMixer+0x85a>
    7efa:	48 c0       	rjmp	.+144    	; 0x7f8c <ProcessMixer+0x8ea>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    7efc:	99 27       	eor	r25, r25
    7efe:	87 fd       	sbrc	r24, 7
    7f00:	90 95       	com	r25
    7f02:	82 1b       	sub	r24, r18
    7f04:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    7f06:	96 95       	lsr	r25
    7f08:	98 2f       	mov	r25, r24
    7f0a:	88 27       	eor	r24, r24
    7f0c:	97 95       	ror	r25
    7f0e:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    7f10:	b5 01       	movw	r22, r10
    7f12:	0e 94 b8 4b 	call	0x9770	; 0x9770 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    7f16:	36 95       	lsr	r19
    7f18:	32 2f       	mov	r19, r18
    7f1a:	22 27       	eor	r18, r18
    7f1c:	37 95       	ror	r19
    7f1e:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    7f20:	f4 01       	movw	r30, r8
    7f22:	80 81       	ld	r24, Z
    7f24:	81 11       	cpse	r24, r1
    7f26:	08 c0       	rjmp	.+16     	; 0x7f38 <ProcessMixer+0x896>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    7f28:	60 9f       	mul	r22, r16
    7f2a:	c0 01       	movw	r24, r0
    7f2c:	61 9f       	mul	r22, r17
    7f2e:	90 0d       	add	r25, r0
    7f30:	70 9f       	mul	r23, r16
    7f32:	90 0d       	add	r25, r0
    7f34:	11 24       	eor	r1, r1
    7f36:	20 c0       	rjmp	.+64     	; 0x7f78 <ProcessMixer+0x8d6>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    7f38:	81 30       	cpi	r24, 0x01	; 1
    7f3a:	31 f4       	brne	.+12     	; 0x7f48 <ProcessMixer+0x8a6>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    7f3c:	77 ff       	sbrs	r23, 7
    7f3e:	02 c0       	rjmp	.+4      	; 0x7f44 <ProcessMixer+0x8a2>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    7f40:	f2 01       	movw	r30, r4
    7f42:	06 c0       	rjmp	.+12     	; 0x7f50 <ProcessMixer+0x8ae>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    7f44:	f1 01       	movw	r30, r2
    7f46:	0d c0       	rjmp	.+26     	; 0x7f62 <ProcessMixer+0x8c0>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    7f48:	77 ff       	sbrs	r23, 7
    7f4a:	09 c0       	rjmp	.+18     	; 0x7f5e <ProcessMixer+0x8bc>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    7f4c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7f4e:	f8 a1       	ldd	r31, Y+32	; 0x20
    7f50:	84 91       	lpm	r24, Z
    7f52:	a5 01       	movw	r20, r10
    7f54:	48 1b       	sub	r20, r24
    7f56:	51 09       	sbc	r21, r1
    7f58:	87 fd       	sbrc	r24, 7
    7f5a:	53 95       	inc	r21
    7f5c:	06 c0       	rjmp	.+12     	; 0x7f6a <ProcessMixer+0x8c8>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    7f5e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    7f60:	fe 8d       	ldd	r31, Y+30	; 0x1e
    7f62:	44 91       	lpm	r20, Z
    7f64:	55 27       	eor	r21, r21
    7f66:	47 fd       	sbrc	r20, 7
    7f68:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    7f6a:	64 9f       	mul	r22, r20
    7f6c:	c0 01       	movw	r24, r0
    7f6e:	65 9f       	mul	r22, r21
    7f70:	90 0d       	add	r25, r0
    7f72:	74 9f       	mul	r23, r20
    7f74:	90 0d       	add	r25, r0
    7f76:	11 24       	eor	r1, r1
    7f78:	82 0f       	add	r24, r18
    7f7a:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    7f7c:	bc 01       	movw	r22, r24
    7f7e:	60 5c       	subi	r22, 0xC0	; 192
    7f80:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    7f82:	66 0f       	add	r22, r22
    7f84:	67 2f       	mov	r22, r23
    7f86:	66 1f       	adc	r22, r22
    7f88:	77 0b       	sbc	r23, r23
    7f8a:	01 c0       	rjmp	.+2      	; 0x7f8e <ProcessMixer+0x8ec>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    7f8c:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    7f8e:	80 91 31 08 	lds	r24, 0x0831
    7f92:	90 91 32 08 	lds	r25, 0x0832
    7f96:	0e 94 2e 3b 	call	0x765c	; 0x765c <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    7f9a:	88 5e       	subi	r24, 0xE8	; 232
    7f9c:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    7f9e:	d7 01       	movw	r26, r14
    7fa0:	2d 91       	ld	r18, X+
    7fa2:	3c 91       	ld	r19, X
    7fa4:	11 97       	sbiw	r26, 0x01	; 1
    7fa6:	28 0f       	add	r18, r24
    7fa8:	39 1f       	adc	r19, r25
    7faa:	2d 93       	st	X+, r18
    7fac:	3c 93       	st	X, r19
    7fae:	08 c0       	rjmp	.+16     	; 0x7fc0 <ProcessMixer+0x91e>
    7fb0:	f6 01       	movw	r30, r12
    7fb2:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    7fb4:	80 81       	ld	r24, Z
    7fb6:	82 30       	cpi	r24, 0x02	; 2
    7fb8:	19 f4       	brne	.+6      	; 0x7fc0 <ProcessMixer+0x91e>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    7fba:	f7 01       	movw	r30, r14
    7fbc:	71 82       	std	Z+1, r7	; 0x01
    7fbe:	60 82       	st	Z, r6
    7fc0:	f6 e2       	ldi	r31, 0x26	; 38
    7fc2:	ef 0e       	add	r14, r31
    7fc4:	f1 1c       	adc	r15, r1
    7fc6:	26 e2       	ldi	r18, 0x26	; 38
    7fc8:	c2 0e       	add	r12, r18
    7fca:	d1 1c       	adc	r13, r1
    7fcc:	36 e2       	ldi	r19, 0x26	; 38
    7fce:	83 0e       	add	r8, r19
    7fd0:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    7fd2:	4a e7       	ldi	r20, 0x7A	; 122
    7fd4:	e4 16       	cp	r14, r20
    7fd6:	47 e0       	ldi	r20, 0x07	; 7
    7fd8:	f4 06       	cpc	r15, r20
    7fda:	09 f0       	breq	.+2      	; 0x7fde <ProcessMixer+0x93c>
    7fdc:	7e cf       	rjmp	.-260    	; 0x7eda <ProcessMixer+0x838>
    7fde:	e2 e5       	ldi	r30, 0x52	; 82
    7fe0:	f6 e0       	ldi	r31, 0x06	; 6
    7fe2:	2a e4       	ldi	r18, 0x4A	; 74
    7fe4:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    7fe6:	94 e6       	ldi	r25, 0x64	; 100
    7fe8:	69 2e       	mov	r6, r25
    7fea:	71 2c       	mov	r7, r1
    7fec:	df 01       	movw	r26, r30
    7fee:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    7ff0:	cc 90       	ld	r12, X
    7ff2:	12 96       	adiw	r26, 0x02	; 2
    7ff4:	ac 90       	ld	r10, X
    7ff6:	50 80       	ld	r5, Z
    7ff8:	ca 10       	cpse	r12, r10
    7ffa:	03 c0       	rjmp	.+6      	; 0x8002 <ProcessMixer+0x960>
    7ffc:	5c 14       	cp	r5, r12
    7ffe:	09 f4       	brne	.+2      	; 0x8002 <ProcessMixer+0x960>
    8000:	53 c0       	rjmp	.+166    	; 0x80a8 <ProcessMixer+0xa06>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    8002:	bb 24       	eor	r11, r11
    8004:	a7 fc       	sbrc	r10, 7
    8006:	b0 94       	com	r11
    8008:	dd 24       	eor	r13, r13
    800a:	c7 fc       	sbrc	r12, 7
    800c:	d0 94       	com	r13
    800e:	c5 01       	movw	r24, r10
    8010:	8c 19       	sub	r24, r12
    8012:	9d 09       	sbc	r25, r13
    8014:	df 01       	movw	r26, r30
    8016:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    8018:	ec 90       	ld	r14, X
    801a:	ff 24       	eor	r15, r15
    801c:	e7 fc       	sbrc	r14, 7
    801e:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    8020:	96 95       	lsr	r25
    8022:	98 2f       	mov	r25, r24
    8024:	88 27       	eor	r24, r24
    8026:	97 95       	ror	r25
    8028:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    802a:	a7 01       	movw	r20, r14
    802c:	55 95       	asr	r21
    802e:	47 95       	ror	r20
    8030:	84 0f       	add	r24, r20
    8032:	95 1f       	adc	r25, r21
    8034:	b7 01       	movw	r22, r14
    8036:	0e 94 b8 4b 	call	0x9770	; 0x9770 <__divmodhi4>
    803a:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    803c:	85 2d       	mov	r24, r5
    803e:	99 27       	eor	r25, r25
    8040:	87 fd       	sbrc	r24, 7
    8042:	90 95       	com	r25
    8044:	8a 19       	sub	r24, r10
    8046:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    8048:	b3 01       	movw	r22, r6
    804a:	6e 19       	sub	r22, r14
    804c:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    804e:	96 95       	lsr	r25
    8050:	98 2f       	mov	r25, r24
    8052:	88 27       	eor	r24, r24
    8054:	97 95       	ror	r25
    8056:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    8058:	ab 01       	movw	r20, r22
    805a:	55 95       	asr	r21
    805c:	47 95       	ror	r20
    805e:	84 0f       	add	r24, r20
    8060:	95 1f       	adc	r25, r21
    8062:	0e 94 b8 4b 	call	0x9770	; 0x9770 <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    8066:	d6 94       	lsr	r13
    8068:	dc 2c       	mov	r13, r12
    806a:	cc 24       	eor	r12, r12
    806c:	d7 94       	ror	r13
    806e:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    8070:	40 e0       	ldi	r20, 0x00	; 0
    8072:	84 2f       	mov	r24, r20
    8074:	90 e0       	ldi	r25, 0x00	; 0
    8076:	80 17       	cp	r24, r16
    8078:	91 07       	cpc	r25, r17
    807a:	54 f4       	brge	.+20     	; 0x8090 <ProcessMixer+0x9ee>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    807c:	8e 15       	cp	r24, r14
    807e:	9f 05       	cpc	r25, r15
    8080:	1c f4       	brge	.+6      	; 0x8088 <ProcessMixer+0x9e6>
				{
					temp3 += Step1;
    8082:	c8 0c       	add	r12, r8
    8084:	d9 1c       	adc	r13, r9
    8086:	02 c0       	rjmp	.+4      	; 0x808c <ProcessMixer+0x9ea>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    8088:	c6 0e       	add	r12, r22
    808a:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    808c:	4f 5f       	subi	r20, 0xFF	; 255
    808e:	f1 cf       	rjmp	.-30     	; 0x8072 <ProcessMixer+0x9d0>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    8090:	c6 01       	movw	r24, r12
    8092:	80 5c       	subi	r24, 0xC0	; 192
    8094:	9f 4f       	sbci	r25, 0xFF	; 255
    8096:	88 0f       	add	r24, r24
    8098:	89 2f       	mov	r24, r25
    809a:	88 1f       	adc	r24, r24
    809c:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    809e:	5a e0       	ldi	r21, 0x0A	; 10
    80a0:	85 02       	muls	r24, r21
    80a2:	60 01       	movw	r12, r0
    80a4:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    80a6:	05 c0       	rjmp	.+10     	; 0x80b2 <ProcessMixer+0xa10>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    80a8:	85 2d       	mov	r24, r5
    80aa:	9a e0       	ldi	r25, 0x0A	; 10
    80ac:	89 02       	muls	r24, r25
    80ae:	60 01       	movw	r12, r0
    80b0:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    80b2:	d9 01       	movw	r26, r18
    80b4:	4d 91       	ld	r20, X+
    80b6:	5c 91       	ld	r21, X
    80b8:	11 97       	sbiw	r26, 0x01	; 1
    80ba:	4c 0d       	add	r20, r12
    80bc:	5d 1d       	adc	r21, r13
    80be:	4d 93       	st	X+, r20
    80c0:	5c 93       	st	X, r21
    80c2:	2a 5d       	subi	r18, 0xDA	; 218
    80c4:	3f 4f       	sbci	r19, 0xFF	; 255
    80c6:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    80c8:	b7 e0       	ldi	r27, 0x07	; 7
    80ca:	e2 38       	cpi	r30, 0x82	; 130
    80cc:	fb 07       	cpc	r31, r27
    80ce:	09 f0       	breq	.+2      	; 0x80d2 <ProcessMixer+0xa30>
    80d0:	8d cf       	rjmp	.-230    	; 0x7fec <ProcessMixer+0x94a>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    80d2:	e2 96       	adiw	r28, 0x32	; 50
    80d4:	0f b6       	in	r0, 0x3f	; 63
    80d6:	f8 94       	cli
    80d8:	de bf       	out	0x3e, r29	; 62
    80da:	0f be       	out	0x3f, r0	; 63
    80dc:	cd bf       	out	0x3d, r28	; 61
    80de:	df 91       	pop	r29
    80e0:	cf 91       	pop	r28
    80e2:	1f 91       	pop	r17
    80e4:	0f 91       	pop	r16
    80e6:	ff 90       	pop	r15
    80e8:	ef 90       	pop	r14
    80ea:	df 90       	pop	r13
    80ec:	cf 90       	pop	r12
    80ee:	bf 90       	pop	r11
    80f0:	af 90       	pop	r10
    80f2:	9f 90       	pop	r9
    80f4:	8f 90       	pop	r8
    80f6:	7f 90       	pop	r7
    80f8:	6f 90       	pop	r6
    80fa:	5f 90       	pop	r5
    80fc:	4f 90       	pop	r4
    80fe:	3f 90       	pop	r3
    8100:	2f 90       	pop	r2
    8102:	08 95       	ret

00008104 <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    8104:	2a e0       	ldi	r18, 0x0A	; 10
    8106:	82 02       	muls	r24, r18
    8108:	c0 01       	movw	r24, r0
    810a:	11 24       	eor	r1, r1

	return temp16_2;
}
    810c:	8a 55       	subi	r24, 0x5A	; 90
    810e:	91 4f       	sbci	r25, 0xF1	; 241
    8110:	08 95       	ret

00008112 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    8112:	df 92       	push	r13
    8114:	ef 92       	push	r14
    8116:	ff 92       	push	r15
    8118:	0f 93       	push	r16
    811a:	1f 93       	push	r17
    811c:	cf 93       	push	r28
    811e:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    8120:	dc 01       	movw	r26, r24
    8122:	0d 90       	ld	r0, X+
    8124:	00 20       	and	r0, r0
    8126:	e9 f7       	brne	.-6      	; 0x8122 <mugui_text_sizestring+0x10>
    8128:	11 97       	sbiw	r26, 0x01	; 1
    812a:	a8 1b       	sub	r26, r24
    812c:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    812e:	fb 01       	movw	r30, r22
    8130:	34 96       	adiw	r30, 0x04	; 4
    8132:	e4 90       	lpm	r14, Z
    8134:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    8136:	32 97       	sbiw	r30, 0x02	; 2
    8138:	d4 90       	lpm	r13, Z
    813a:	ec 01       	movw	r28, r24
    813c:	a8 0f       	add	r26, r24
    813e:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    8140:	80 e0       	ldi	r24, 0x00	; 0
    8142:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    8144:	ca 17       	cp	r28, r26
    8146:	db 07       	cpc	r29, r27
    8148:	29 f1       	breq	.+74     	; 0x8194 <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    814a:	29 91       	ld	r18, Y+
    814c:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    814e:	30 e0       	ldi	r19, 0x00	; 0
    8150:	22 0f       	add	r18, r18
    8152:	33 1f       	adc	r19, r19
    8154:	f9 01       	movw	r30, r18
    8156:	35 96       	adiw	r30, 0x05	; 5
    8158:	e6 0f       	add	r30, r22
    815a:	f7 1f       	adc	r31, r23
    815c:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    815e:	f9 01       	movw	r30, r18
    8160:	36 96       	adiw	r30, 0x06	; 6
    8162:	e6 0f       	add	r30, r22
    8164:	f7 1f       	adc	r31, r23
    8166:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    8168:	10 e0       	ldi	r17, 0x00	; 0
    816a:	20 e0       	ldi	r18, 0x00	; 0
    816c:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    816e:	32 2f       	mov	r19, r18
    8170:	21 2f       	mov	r18, r17
    8172:	10 2f       	mov	r17, r16
    8174:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    8176:	0e 0f       	add	r16, r30
    8178:	11 1d       	adc	r17, r1
    817a:	21 1d       	adc	r18, r1
    817c:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    817e:	fb 01       	movw	r30, r22
    8180:	e0 0f       	add	r30, r16
    8182:	f1 1f       	adc	r31, r17
    8184:	04 91       	lpm	r16, Z
    8186:	20 2f       	mov	r18, r16
    8188:	30 e0       	ldi	r19, 0x00	; 0
    818a:	2f 5f       	subi	r18, 0xFF	; 255
    818c:	3f 4f       	sbci	r19, 0xFF	; 255
    818e:	82 0f       	add	r24, r18
    8190:	93 1f       	adc	r25, r19
    8192:	d8 cf       	rjmp	.-80     	; 0x8144 <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    8194:	fa 01       	movw	r30, r20
    8196:	91 83       	std	Z+1, r25	; 0x01
    8198:	80 83       	st	Z, r24
	size->y = height;
    819a:	f3 82       	std	Z+3, r15	; 0x03
    819c:	e2 82       	std	Z+2, r14	; 0x02
}
    819e:	df 91       	pop	r29
    81a0:	cf 91       	pop	r28
    81a2:	1f 91       	pop	r17
    81a4:	0f 91       	pop	r16
    81a6:	ff 90       	pop	r15
    81a8:	ef 90       	pop	r14
    81aa:	df 90       	pop	r13
    81ac:	08 95       	ret

000081ae <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    81ae:	aa e6       	ldi	r26, 0x6A	; 106
    81b0:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    81b2:	20 e0       	ldi	r18, 0x00	; 0
    81b4:	30 e0       	ldi	r19, 0x00	; 0
    81b6:	fc 01       	movw	r30, r24
    81b8:	e2 0f       	add	r30, r18
    81ba:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    81bc:	44 91       	lpm	r20, Z
    81be:	44 23       	and	r20, r20
    81c0:	41 f0       	breq	.+16     	; 0x81d2 <pgm_mugui_scopy+0x24>
    81c2:	2f 30       	cpi	r18, 0x0F	; 15
    81c4:	31 05       	cpc	r19, r1
    81c6:	29 f0       	breq	.+10     	; 0x81d2 <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    81c8:	e4 91       	lpm	r30, Z
    81ca:	ed 93       	st	X+, r30
		i++;
    81cc:	2f 5f       	subi	r18, 0xFF	; 255
    81ce:	3f 4f       	sbci	r19, 0xFF	; 255
    81d0:	f2 cf       	rjmp	.-28     	; 0x81b6 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    81d2:	f9 01       	movw	r30, r18
    81d4:	e6 59       	subi	r30, 0x96	; 150
    81d6:	fa 4f       	sbci	r31, 0xFA	; 250
    81d8:	10 82       	st	Z, r1
    81da:	08 95       	ret

000081dc <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    81dc:	2f 92       	push	r2
    81de:	3f 92       	push	r3
    81e0:	4f 92       	push	r4
    81e2:	5f 92       	push	r5
    81e4:	6f 92       	push	r6
    81e6:	7f 92       	push	r7
    81e8:	8f 92       	push	r8
    81ea:	9f 92       	push	r9
    81ec:	af 92       	push	r10
    81ee:	bf 92       	push	r11
    81f0:	cf 92       	push	r12
    81f2:	df 92       	push	r13
    81f4:	ef 92       	push	r14
    81f6:	ff 92       	push	r15
    81f8:	0f 93       	push	r16
    81fa:	1f 93       	push	r17
    81fc:	cf 93       	push	r28
    81fe:	df 93       	push	r29
    8200:	cd b7       	in	r28, 0x3d	; 61
    8202:	de b7       	in	r29, 0x3e	; 62
    8204:	29 97       	sbiw	r28, 0x09	; 9
    8206:	0f b6       	in	r0, 0x3f	; 63
    8208:	f8 94       	cli
    820a:	de bf       	out	0x3e, r29	; 62
    820c:	0f be       	out	0x3f, r0	; 63
    820e:	cd bf       	out	0x3d, r28	; 61
    8210:	4c 83       	std	Y+4, r20	; 0x04
    8212:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    8214:	fb 01       	movw	r30, r22
    8216:	32 96       	adiw	r30, 0x02	; 2
    8218:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    821a:	32 96       	adiw	r30, 0x02	; 2
    821c:	e4 91       	lpm	r30, Z
    821e:	2e 2e       	mov	r2, r30
    8220:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    8222:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    8224:	90 e0       	ldi	r25, 0x00	; 0
    8226:	88 0f       	add	r24, r24
    8228:	99 1f       	adc	r25, r25
    822a:	fc 01       	movw	r30, r24
    822c:	35 96       	adiw	r30, 0x05	; 5
    822e:	e6 0f       	add	r30, r22
    8230:	f7 1f       	adc	r31, r23
    8232:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    8234:	fc 01       	movw	r30, r24
    8236:	36 96       	adiw	r30, 0x06	; 6
    8238:	e6 0f       	add	r30, r22
    823a:	f7 1f       	adc	r31, r23
    823c:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    823e:	06 2d       	mov	r16, r6
    8240:	10 e0       	ldi	r17, 0x00	; 0
    8242:	20 e0       	ldi	r18, 0x00	; 0
    8244:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    8246:	32 2f       	mov	r19, r18
    8248:	21 2f       	mov	r18, r17
    824a:	10 2f       	mov	r17, r16
    824c:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    824e:	08 0f       	add	r16, r24
    8250:	11 1d       	adc	r17, r1
    8252:	21 1d       	adc	r18, r1
    8254:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    8256:	c8 01       	movw	r24, r16
    8258:	fb 01       	movw	r30, r22
    825a:	e0 0f       	add	r30, r16
    825c:	f1 1f       	adc	r31, r17
    825e:	64 90       	lpm	r6, Z
    8260:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    8262:	21 01       	movw	r4, r2
    8264:	21 e0       	ldi	r18, 0x01	; 1
    8266:	42 1a       	sub	r4, r18
    8268:	51 08       	sbc	r5, r1
    826a:	13 e0       	ldi	r17, 0x03	; 3
    826c:	56 94       	lsr	r5
    826e:	47 94       	ror	r4
    8270:	1a 95       	dec	r17
    8272:	e1 f7       	brne	.-8      	; 0x826c <mugui_lcd_putc+0x90>
    8274:	43 94       	inc	r4
    8276:	a4 2d       	mov	r26, r4
    8278:	b0 e0       	ldi	r27, 0x00	; 0
    827a:	ba 83       	std	Y+2, r27	; 0x02
    827c:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    827e:	a1 2c       	mov	r10, r1
    8280:	b1 2c       	mov	r11, r1
    8282:	00 e0       	ldi	r16, 0x00	; 0
    8284:	10 e0       	ldi	r17, 0x00	; 0
    8286:	4b 01       	movw	r8, r22
    8288:	bf ef       	ldi	r27, 0xFF	; 255
    828a:	8b 1a       	sub	r8, r27
    828c:	9b 0a       	sbc	r9, r27
    828e:	88 0e       	add	r8, r24
    8290:	99 1e       	adc	r9, r25
    8292:	06 15       	cp	r16, r6
    8294:	17 05       	cpc	r17, r7
    8296:	08 f0       	brcs	.+2      	; 0x829a <mugui_lcd_putc+0xbe>
    8298:	43 c0       	rjmp	.+134    	; 0x8320 <mugui_lcd_putc+0x144>
    829a:	c1 2c       	mov	r12, r1
    829c:	d1 2c       	mov	r13, r1
    829e:	e1 2c       	mov	r14, r1
    82a0:	f1 2c       	mov	r15, r1
    82a2:	94 01       	movw	r18, r8
    82a4:	2a 0d       	add	r18, r10
    82a6:	3b 1d       	adc	r19, r11
    82a8:	3f 83       	std	Y+7, r19	; 0x07
    82aa:	2e 83       	std	Y+6, r18	; 0x06
    82ac:	5c 80       	ldd	r5, Y+4	; 0x04
    82ae:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    82b0:	c4 14       	cp	r12, r4
    82b2:	78 f5       	brcc	.+94     	; 0x8312 <mugui_lcd_putc+0x136>
    82b4:	ee 81       	ldd	r30, Y+6	; 0x06
    82b6:	ff 81       	ldd	r31, Y+7	; 0x07
    82b8:	ec 0d       	add	r30, r12
    82ba:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    82bc:	34 91       	lpm	r19, Z
    82be:	3b 83       	std	Y+3, r19	; 0x03
    82c0:	19 86       	std	Y+9, r1	; 0x09
    82c2:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    82c4:	e2 14       	cp	r14, r2
    82c6:	f3 04       	cpc	r15, r3
    82c8:	00 f5       	brcc	.+64     	; 0x830a <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    82ca:	81 e0       	ldi	r24, 0x01	; 1
    82cc:	90 e0       	ldi	r25, 0x00	; 0
    82ce:	08 84       	ldd	r0, Y+8	; 0x08
    82d0:	02 c0       	rjmp	.+4      	; 0x82d6 <mugui_lcd_putc+0xfa>
    82d2:	88 0f       	add	r24, r24
    82d4:	99 1f       	adc	r25, r25
    82d6:	0a 94       	dec	r0
    82d8:	e2 f7       	brpl	.-8      	; 0x82d2 <mugui_lcd_putc+0xf6>
					bit = data & mask;
    82da:	3b 81       	ldd	r19, Y+3	; 0x03
    82dc:	83 23       	and	r24, r19
    82de:	4d 81       	ldd	r20, Y+5	; 0x05
    82e0:	4e 0d       	add	r20, r14
					if(bit)
    82e2:	88 23       	and	r24, r24
    82e4:	11 f0       	breq	.+4      	; 0x82ea <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    82e6:	21 e0       	ldi	r18, 0x01	; 1
    82e8:	01 c0       	rjmp	.+2      	; 0x82ec <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    82ea:	20 e0       	ldi	r18, 0x00	; 0
    82ec:	65 2d       	mov	r22, r5
    82ee:	80 e0       	ldi	r24, 0x00	; 0
    82f0:	91 e0       	ldi	r25, 0x01	; 1
    82f2:	0e 94 b2 22 	call	0x4564	; 0x4564 <setpixel>
					}
					ty++;
    82f6:	8f ef       	ldi	r24, 0xFF	; 255
    82f8:	e8 1a       	sub	r14, r24
    82fa:	f8 0a       	sbc	r15, r24
    82fc:	a8 85       	ldd	r26, Y+8	; 0x08
    82fe:	b9 85       	ldd	r27, Y+9	; 0x09
    8300:	11 96       	adiw	r26, 0x01	; 1
    8302:	b9 87       	std	Y+9, r27	; 0x09
    8304:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    8306:	18 97       	sbiw	r26, 0x08	; 8
    8308:	e9 f6       	brne	.-70     	; 0x82c4 <mugui_lcd_putc+0xe8>
    830a:	bf ef       	ldi	r27, 0xFF	; 255
    830c:	cb 1a       	sub	r12, r27
    830e:	db 0a       	sbc	r13, r27
    8310:	cf cf       	rjmp	.-98     	; 0x82b0 <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    8312:	0f 5f       	subi	r16, 0xFF	; 255
    8314:	1f 4f       	sbci	r17, 0xFF	; 255
    8316:	e9 81       	ldd	r30, Y+1	; 0x01
    8318:	fa 81       	ldd	r31, Y+2	; 0x02
    831a:	ae 0e       	add	r10, r30
    831c:	bf 1e       	adc	r11, r31
    831e:	b9 cf       	rjmp	.-142    	; 0x8292 <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    8320:	c3 01       	movw	r24, r6
    8322:	29 96       	adiw	r28, 0x09	; 9
    8324:	0f b6       	in	r0, 0x3f	; 63
    8326:	f8 94       	cli
    8328:	de bf       	out	0x3e, r29	; 62
    832a:	0f be       	out	0x3f, r0	; 63
    832c:	cd bf       	out	0x3d, r28	; 61
    832e:	df 91       	pop	r29
    8330:	cf 91       	pop	r28
    8332:	1f 91       	pop	r17
    8334:	0f 91       	pop	r16
    8336:	ff 90       	pop	r15
    8338:	ef 90       	pop	r14
    833a:	df 90       	pop	r13
    833c:	cf 90       	pop	r12
    833e:	bf 90       	pop	r11
    8340:	af 90       	pop	r10
    8342:	9f 90       	pop	r9
    8344:	8f 90       	pop	r8
    8346:	7f 90       	pop	r7
    8348:	6f 90       	pop	r6
    834a:	5f 90       	pop	r5
    834c:	4f 90       	pop	r4
    834e:	3f 90       	pop	r3
    8350:	2f 90       	pop	r2
    8352:	08 95       	ret

00008354 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    8354:	af 92       	push	r10
    8356:	bf 92       	push	r11
    8358:	cf 92       	push	r12
    835a:	df 92       	push	r13
    835c:	ef 92       	push	r14
    835e:	ff 92       	push	r15
    8360:	0f 93       	push	r16
    8362:	1f 93       	push	r17
    8364:	cf 93       	push	r28
    8366:	df 93       	push	r29
    8368:	ec 01       	movw	r28, r24
    836a:	7b 01       	movw	r14, r22
    836c:	6a 01       	movw	r12, r20
    836e:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    8370:	00 e0       	ldi	r16, 0x00	; 0
    8372:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    8374:	ce 01       	movw	r24, r28
    8376:	fe 01       	movw	r30, r28
    8378:	24 91       	lpm	r18, Z
    837a:	22 23       	and	r18, r18
    837c:	71 f0       	breq	.+28     	; 0x839a <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    837e:	21 96       	adiw	r28, 0x01	; 1
    8380:	fc 01       	movw	r30, r24
    8382:	84 91       	lpm	r24, Z
    8384:	a8 01       	movw	r20, r16
    8386:	4c 0d       	add	r20, r12
    8388:	5d 1d       	adc	r21, r13
    838a:	95 01       	movw	r18, r10
    838c:	b7 01       	movw	r22, r14
    838e:	0e 94 ee 40 	call	0x81dc	; 0x81dc <mugui_lcd_putc>
    8392:	01 96       	adiw	r24, 0x01	; 1
    8394:	08 0f       	add	r16, r24
    8396:	19 1f       	adc	r17, r25
    8398:	ed cf       	rjmp	.-38     	; 0x8374 <pgm_mugui_lcd_puts+0x20>
	}
}
    839a:	df 91       	pop	r29
    839c:	cf 91       	pop	r28
    839e:	1f 91       	pop	r17
    83a0:	0f 91       	pop	r16
    83a2:	ff 90       	pop	r15
    83a4:	ef 90       	pop	r14
    83a6:	df 90       	pop	r13
    83a8:	cf 90       	pop	r12
    83aa:	bf 90       	pop	r11
    83ac:	af 90       	pop	r10
    83ae:	08 95       	ret

000083b0 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    83b0:	8f 92       	push	r8
    83b2:	9f 92       	push	r9
    83b4:	af 92       	push	r10
    83b6:	bf 92       	push	r11
    83b8:	cf 92       	push	r12
    83ba:	df 92       	push	r13
    83bc:	ef 92       	push	r14
    83be:	ff 92       	push	r15
    83c0:	0f 93       	push	r16
    83c2:	1f 93       	push	r17
    83c4:	cf 93       	push	r28
    83c6:	df 93       	push	r29
    83c8:	6b 01       	movw	r12, r22
    83ca:	5a 01       	movw	r10, r20
    83cc:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    83ce:	ec 01       	movw	r28, r24
    83d0:	09 90       	ld	r0, Y+
    83d2:	00 20       	and	r0, r0
    83d4:	e9 f7       	brne	.-6      	; 0x83d0 <mugui_lcd_puts+0x20>
    83d6:	8c 01       	movw	r16, r24
    83d8:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    83da:	e1 2c       	mov	r14, r1
    83dc:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    83de:	0c 17       	cp	r16, r28
    83e0:	1d 07       	cpc	r17, r29
    83e2:	71 f0       	breq	.+28     	; 0x8400 <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    83e4:	a7 01       	movw	r20, r14
    83e6:	4a 0d       	add	r20, r10
    83e8:	5b 1d       	adc	r21, r11
    83ea:	94 01       	movw	r18, r8
    83ec:	b6 01       	movw	r22, r12
    83ee:	f8 01       	movw	r30, r16
    83f0:	81 91       	ld	r24, Z+
    83f2:	8f 01       	movw	r16, r30
    83f4:	0e 94 ee 40 	call	0x81dc	; 0x81dc <mugui_lcd_putc>
    83f8:	01 96       	adiw	r24, 0x01	; 1
    83fa:	e8 0e       	add	r14, r24
    83fc:	f9 1e       	adc	r15, r25
    83fe:	ef cf       	rjmp	.-34     	; 0x83de <mugui_lcd_puts+0x2e>
	}
}
    8400:	df 91       	pop	r29
    8402:	cf 91       	pop	r28
    8404:	1f 91       	pop	r17
    8406:	0f 91       	pop	r16
    8408:	ff 90       	pop	r15
    840a:	ef 90       	pop	r14
    840c:	df 90       	pop	r13
    840e:	cf 90       	pop	r12
    8410:	bf 90       	pop	r11
    8412:	af 90       	pop	r10
    8414:	9f 90       	pop	r9
    8416:	8f 90       	pop	r8
    8418:	08 95       	ret

0000841a <Sensor_PID>:
int32_t PID_AvgAccVert = 0;
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    841a:	2f 92       	push	r2
    841c:	3f 92       	push	r3
    841e:	4f 92       	push	r4
    8420:	5f 92       	push	r5
    8422:	6f 92       	push	r6
    8424:	7f 92       	push	r7
    8426:	8f 92       	push	r8
    8428:	9f 92       	push	r9
    842a:	af 92       	push	r10
    842c:	bf 92       	push	r11
    842e:	cf 92       	push	r12
    8430:	df 92       	push	r13
    8432:	ef 92       	push	r14
    8434:	ff 92       	push	r15
    8436:	0f 93       	push	r16
    8438:	1f 93       	push	r17
    843a:	cf 93       	push	r28
    843c:	df 93       	push	r29
    843e:	cd b7       	in	r28, 0x3d	; 61
    8440:	de b7       	in	r29, 0x3e	; 62
    8442:	a3 97       	sbiw	r28, 0x23	; 35
    8444:	0f b6       	in	r0, 0x3f	; 63
    8446:	f8 94       	cli
    8448:	de bf       	out	0x3e, r29	; 62
    844a:	0f be       	out	0x3f, r0	; 63
    844c:	cd bf       	out	0x3d, r28	; 61
    844e:	68 a3       	std	Y+32, r22	; 0x20
    8450:	79 a3       	std	Y+33, r23	; 0x21
    8452:	8a a3       	std	Y+34, r24	; 0x22
    8454:	9b a3       	std	Y+35, r25	; 0x23
	float tempf1 = 0;
    8456:	1d 86       	std	Y+13, r1	; 0x0d
    8458:	1e 86       	std	Y+14, r1	; 0x0e
    845a:	1f 86       	std	Y+15, r1	; 0x0f
    845c:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    845e:	80 91 35 08 	lds	r24, 0x0835
    8462:	90 91 36 08 	lds	r25, 0x0836
    8466:	91 95       	neg	r25
    8468:	81 95       	neg	r24
    846a:	91 09       	sbc	r25, r1
    846c:	98 87       	std	Y+8, r25	; 0x08
    846e:	8f 83       	std	Y+7, r24	; 0x07
    8470:	80 91 37 08 	lds	r24, 0x0837
    8474:	90 91 38 08 	lds	r25, 0x0838
    8478:	9a 87       	std	Y+10, r25	; 0x0a
    847a:	89 87       	std	Y+9, r24	; 0x09
    847c:	80 91 39 08 	lds	r24, 0x0839
    8480:	90 91 3a 08 	lds	r25, 0x083A
    8484:	9c 87       	std	Y+12, r25	; 0x0c
    8486:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    8488:	80 91 ed 05 	lds	r24, 0x05ED
    848c:	89 83       	std	Y+1, r24	; 0x01
    848e:	80 91 f3 05 	lds	r24, 0x05F3
    8492:	8a 83       	std	Y+2, r24	; 0x02
    8494:	80 91 f9 05 	lds	r24, 0x05F9
    8498:	8b 83       	std	Y+3, r24	; 0x03
    849a:	80 91 ff 05 	lds	r24, 0x05FF
    849e:	8c 83       	std	Y+4, r24	; 0x04
    84a0:	80 91 05 06 	lds	r24, 0x0605
    84a4:	8d 83       	std	Y+5, r24	; 0x05
    84a6:	80 91 0b 06 	lds	r24, 0x060B
    84aa:	8e 83       	std	Y+6, r24	; 0x06
    84ac:	9e 01       	movw	r18, r28
    84ae:	29 5f       	subi	r18, 0xF9	; 249
    84b0:	3f 4f       	sbci	r19, 0xFF	; 255
    84b2:	39 8f       	std	Y+25, r19	; 0x19
    84b4:	28 8f       	std	Y+24, r18	; 0x18
    84b6:	ce 01       	movw	r24, r28
    84b8:	01 96       	adiw	r24, 0x01	; 1
    84ba:	9f 8b       	std	Y+23, r25	; 0x17
    84bc:	8e 8b       	std	Y+22, r24	; 0x16
    84be:	fe 01       	movw	r30, r28
    84c0:	34 96       	adiw	r30, 0x04	; 4
    84c2:	fd 8b       	std	Y+21, r31	; 0x15
    84c4:	ec 8b       	std	Y+20, r30	; 0x14
    84c6:	05 ef       	ldi	r16, 0xF5	; 245
    84c8:	17 e0       	ldi	r17, 0x07	; 7
    84ca:	22 e3       	ldi	r18, 0x32	; 50
    84cc:	36 e0       	ldi	r19, 0x06	; 6
    84ce:	3d 8f       	std	Y+29, r19	; 0x1d
    84d0:	2c 8f       	std	Y+28, r18	; 0x1c
    84d2:	5d e0       	ldi	r21, 0x0D	; 13
    84d4:	25 2e       	mov	r2, r21
    84d6:	58 e0       	ldi	r21, 0x08	; 8
    84d8:	35 2e       	mov	r3, r21
    84da:	8a e7       	ldi	r24, 0x7A	; 122
    84dc:	95 e0       	ldi	r25, 0x05	; 5
    84de:	9a 8b       	std	Y+18, r25	; 0x12
    84e0:	89 8b       	std	Y+17, r24	; 0x11
    84e2:	e6 e2       	ldi	r30, 0x26	; 38
    84e4:	f6 e0       	ldi	r31, 0x06	; 6
    84e6:	fb 8f       	std	Y+27, r31	; 0x1b
    84e8:	ea 8f       	std	Y+26, r30	; 0x1a
	{
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	for (axis = 0; axis <= YAW; axis ++)
    84ea:	1b 8a       	std	Y+19, r1	; 0x13
			gyroADC[axis] = 0;
		}*/ //Debug
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    84ec:	e8 8d       	ldd	r30, Y+24	; 0x18
    84ee:	f9 8d       	ldd	r31, Y+25	; 0x19
    84f0:	81 91       	ld	r24, Z+
    84f2:	91 91       	ld	r25, Z+
    84f4:	f9 8f       	std	Y+25, r31	; 0x19
    84f6:	e8 8f       	std	Y+24, r30	; 0x18
    84f8:	ee 89       	ldd	r30, Y+22	; 0x16
    84fa:	ff 89       	ldd	r31, Y+23	; 0x17
    84fc:	21 91       	ld	r18, Z+
    84fe:	ff 8b       	std	Y+23, r31	; 0x17
    8500:	ee 8b       	std	Y+22, r30	; 0x16
    8502:	36 e0       	ldi	r19, 0x06	; 6
    8504:	63 2e       	mov	r6, r19
    8506:	71 2c       	mov	r7, r1
    8508:	62 1a       	sub	r6, r18
    850a:	71 08       	sbc	r7, r1
    850c:	27 fd       	sbrc	r18, 7
    850e:	73 94       	inc	r7
    8510:	9c 01       	movw	r18, r24
    8512:	02 c0       	rjmp	.+4      	; 0x8518 <Sensor_PID+0xfe>
    8514:	35 95       	asr	r19
    8516:	27 95       	ror	r18
    8518:	6a 94       	dec	r6
    851a:	e2 f7       	brpl	.-8      	; 0x8514 <Sensor_PID+0xfa>
    851c:	39 01       	movw	r6, r18
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    851e:	ec 89       	ldd	r30, Y+20	; 0x14
    8520:	fd 89       	ldd	r31, Y+21	; 0x15
    8522:	21 91       	ld	r18, Z+
    8524:	fd 8b       	std	Y+21, r31	; 0x15
    8526:	ec 8b       	std	Y+20, r30	; 0x14
    8528:	46 e0       	ldi	r20, 0x06	; 6
    852a:	c4 2e       	mov	r12, r20
    852c:	d1 2c       	mov	r13, r1
    852e:	c2 1a       	sub	r12, r18
    8530:	d1 08       	sbc	r13, r1
    8532:	27 fd       	sbrc	r18, 7
    8534:	d3 94       	inc	r13
    8536:	9c 01       	movw	r18, r24
    8538:	02 c0       	rjmp	.+4      	; 0x853e <Sensor_PID+0x124>
    853a:	35 95       	asr	r19
    853c:	27 95       	ror	r18
    853e:	ca 94       	dec	r12
    8540:	e2 f7       	brpl	.-8      	; 0x853a <Sensor_PID+0x120>
    8542:	3f 8f       	std	Y+31, r19	; 0x1f
    8544:	2e 8f       	std	Y+30, r18	; 0x1e
		// Gyro LPF
		//************************************************************	

		// Lookup LPF value
		// Note: Two sets of values for normal and high-speed mode
		if (Config.Servo_rate != FAST)
    8546:	80 91 e2 05 	lds	r24, 0x05E2
    854a:	60 91 47 06 	lds	r22, 0x0647
    854e:	82 30       	cpi	r24, 0x02	; 2
    8550:	39 f0       	breq	.+14     	; 0x8560 <Sensor_PID+0x146>
		{
			memcpy_P(&tempf1, &LPF_lookup[Config.Gyro_LPF], sizeof(float));
    8552:	34 e0       	ldi	r19, 0x04	; 4
    8554:	63 02       	muls	r22, r19
    8556:	b0 01       	movw	r22, r0
    8558:	11 24       	eor	r1, r1
    855a:	67 5b       	subi	r22, 0xB7	; 183
    855c:	77 4e       	sbci	r23, 0xE7	; 231
    855e:	06 c0       	rjmp	.+12     	; 0x856c <Sensor_PID+0x152>
		}
		else
		{
			memcpy_P(&tempf1, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float));
    8560:	84 e0       	ldi	r24, 0x04	; 4
    8562:	68 02       	muls	r22, r24
    8564:	b0 01       	movw	r22, r0
    8566:	11 24       	eor	r1, r1
    8568:	67 5d       	subi	r22, 0xD7	; 215
    856a:	77 4e       	sbci	r23, 0xE7	; 231
    856c:	44 e0       	ldi	r20, 0x04	; 4
    856e:	50 e0       	ldi	r21, 0x00	; 0
    8570:	ce 01       	movw	r24, r28
    8572:	0d 96       	adiw	r24, 0x0d	; 13
    8574:	0e 94 44 4c 	call	0x9888	; 0x9888 <memcpy_P>
		}		
			
		gyroADCf = gyroADC[axis]; // Promote gyro signal to suit
    8578:	e9 89       	ldd	r30, Y+17	; 0x11
    857a:	fa 89       	ldd	r31, Y+18	; 0x12
    857c:	60 81       	ld	r22, Z
    857e:	71 81       	ldd	r23, Z+1	; 0x01
    8580:	88 27       	eor	r24, r24
    8582:	77 fd       	sbrc	r23, 7
    8584:	80 95       	com	r24
    8586:	98 2f       	mov	r25, r24
    8588:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    858c:	6b 01       	movw	r12, r22
    858e:	7c 01       	movw	r14, r24

		if (Config.Gyro_LPF != NOFILTER)
    8590:	80 91 47 06 	lds	r24, 0x0647
    8594:	87 30       	cpi	r24, 0x07	; 7
    8596:	09 f1       	breq	.+66     	; 0x85da <Sensor_PID+0x1c0>
		{
			// Gyro LPF
			gyroSmooth[axis] = ((gyroSmooth[axis] * (tempf1 - 1.0f)) + gyroADCf) / tempf1;
    8598:	8d 84       	ldd	r8, Y+13	; 0x0d
    859a:	9e 84       	ldd	r9, Y+14	; 0x0e
    859c:	af 84       	ldd	r10, Y+15	; 0x0f
    859e:	b8 88       	ldd	r11, Y+16	; 0x10
    85a0:	20 e0       	ldi	r18, 0x00	; 0
    85a2:	30 e0       	ldi	r19, 0x00	; 0
    85a4:	40 e8       	ldi	r20, 0x80	; 128
    85a6:	5f e3       	ldi	r21, 0x3F	; 63
    85a8:	c5 01       	movw	r24, r10
    85aa:	b4 01       	movw	r22, r8
    85ac:	0e 94 89 49 	call	0x9312	; 0x9312 <__subsf3>
    85b0:	f1 01       	movw	r30, r2
    85b2:	20 81       	ld	r18, Z
    85b4:	31 81       	ldd	r19, Z+1	; 0x01
    85b6:	42 81       	ldd	r20, Z+2	; 0x02
    85b8:	53 81       	ldd	r21, Z+3	; 0x03
    85ba:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
    85be:	a7 01       	movw	r20, r14
    85c0:	96 01       	movw	r18, r12
    85c2:	0e 94 8a 49 	call	0x9314	; 0x9314 <__addsf3>
    85c6:	a5 01       	movw	r20, r10
    85c8:	94 01       	movw	r18, r8
    85ca:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <__divsf3>
    85ce:	f1 01       	movw	r30, r2
    85d0:	60 83       	st	Z, r22
    85d2:	71 83       	std	Z+1, r23	; 0x01
    85d4:	82 83       	std	Z+2, r24	; 0x02
    85d6:	93 83       	std	Z+3, r25	; 0x03
    85d8:	05 c0       	rjmp	.+10     	; 0x85e4 <Sensor_PID+0x1ca>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values when filter off
			gyroSmooth[axis] = gyroADCf;
    85da:	f1 01       	movw	r30, r2
    85dc:	c0 82       	st	Z, r12
    85de:	d1 82       	std	Z+1, r13	; 0x01
    85e0:	e2 82       	std	Z+2, r14	; 0x02
    85e2:	f3 82       	std	Z+3, r15	; 0x03
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];	
    85e4:	f1 01       	movw	r30, r2
    85e6:	60 81       	ld	r22, Z
    85e8:	71 81       	ldd	r23, Z+1	; 0x01
    85ea:	82 81       	ldd	r24, Z+2	; 0x02
    85ec:	93 81       	ldd	r25, Z+3	; 0x03
    85ee:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
    85f2:	6b 01       	movw	r12, r22
    85f4:	7c 01       	movw	r14, r24
    85f6:	e9 89       	ldd	r30, Y+17	; 0x11
    85f8:	fa 89       	ldd	r31, Y+18	; 0x12
    85fa:	71 83       	std	Z+1, r23	; 0x01
    85fc:	60 83       	st	Z, r22
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;								// Promote int32_t to float
		factor = period/STANDARDLOOP;
    85fe:	68 a1       	ldd	r22, Y+32	; 0x20
    8600:	79 a1       	ldd	r23, Y+33	; 0x21
    8602:	8a a1       	ldd	r24, Y+34	; 0x22
    8604:	9b a1       	ldd	r25, Y+35	; 0x23
    8606:	0e 94 8b 4a 	call	0x9516	; 0x9516 <__floatunsisf>
    860a:	20 e0       	ldi	r18, 0x00	; 0
    860c:	30 e3       	ldi	r19, 0x30	; 48
    860e:	4f e5       	ldi	r20, 0x5F	; 95
    8610:	55 e4       	ldi	r21, 0x45	; 69
    8612:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <__divsf3>
    8616:	4b 01       	movw	r8, r22
    8618:	5c 01       	movw	r10, r24
		//************************************************************
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
    861a:	b3 01       	movw	r22, r6
    861c:	6c 0d       	add	r22, r12
    861e:	7d 1d       	adc	r23, r13
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;								// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    8620:	88 27       	eor	r24, r24
    8622:	77 fd       	sbrc	r23, 7
    8624:	80 95       	com	r24
    8626:	98 2f       	mov	r25, r24
    8628:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    862c:	2b 01       	movw	r4, r22
    862e:	3c 01       	movw	r6, r24
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
    8630:	2e 8d       	ldd	r18, Y+30	; 0x1e
    8632:	3f 8d       	ldd	r19, Y+31	; 0x1f
    8634:	c2 0e       	add	r12, r18
    8636:	d3 1e       	adc	r13, r19
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
    8638:	b6 01       	movw	r22, r12
    863a:	88 27       	eor	r24, r24
    863c:	77 fd       	sbrc	r23, 7
    863e:	80 95       	com	r24
    8640:	98 2f       	mov	r25, r24
    8642:	0e 94 8d 4a 	call	0x951a	; 0x951a <__floatsisf>
    8646:	6b 01       	movw	r12, r22
    8648:	7c 01       	movw	r14, r24
		tempf2 = period;								// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
    864a:	a5 01       	movw	r20, r10
    864c:	94 01       	movw	r18, r8
    864e:	c3 01       	movw	r24, r6
    8650:	b2 01       	movw	r22, r4
    8652:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    8656:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
		tempf2 = tempf2 * factor;
		P2_temp = (int32_t)tempf2;
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
    865a:	f8 01       	movw	r30, r16
    865c:	40 80       	ld	r4, Z
    865e:	51 80       	ldd	r5, Z+1	; 0x01
    8660:	62 80       	ldd	r6, Z+2	; 0x02
    8662:	73 80       	ldd	r7, Z+3	; 0x03
    8664:	46 0e       	add	r4, r22
    8666:	57 1e       	adc	r5, r23
    8668:	68 1e       	adc	r6, r24
    866a:	79 1e       	adc	r7, r25
    866c:	40 82       	st	Z, r4
    866e:	51 82       	std	Z+1, r5	; 0x01
    8670:	62 82       	std	Z+2, r6	; 0x02
    8672:	73 82       	std	Z+3, r7	; 0x03
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
		tempf2 = tempf2 * factor;
    8674:	a5 01       	movw	r20, r10
    8676:	94 01       	movw	r18, r8
    8678:	c7 01       	movw	r24, r14
    867a:	b6 01       	movw	r22, r12
    867c:	0e 94 41 4b 	call	0x9682	; 0x9682 <__mulsf3>
		P2_temp = (int32_t)tempf2;
    8680:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
		IntegralGyro[P2][axis] += P2_temp;
    8684:	f8 01       	movw	r30, r16
    8686:	c4 84       	ldd	r12, Z+12	; 0x0c
    8688:	d5 84       	ldd	r13, Z+13	; 0x0d
    868a:	e6 84       	ldd	r14, Z+14	; 0x0e
    868c:	f7 84       	ldd	r15, Z+15	; 0x0f
    868e:	c6 0e       	add	r12, r22
    8690:	d7 1e       	adc	r13, r23
    8692:	e8 1e       	adc	r14, r24
    8694:	f9 1e       	adc	r15, r25
    8696:	c4 86       	std	Z+12, r12	; 0x0c
    8698:	d5 86       	std	Z+13, r13	; 0x0d
    869a:	e6 86       	std	Z+14, r14	; 0x0e
    869c:	f7 86       	std	Z+15, r15	; 0x0f
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    869e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    86a0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    86a2:	81 91       	ld	r24, Z+
    86a4:	91 91       	ld	r25, Z+
    86a6:	a1 91       	ld	r26, Z+
    86a8:	b1 91       	ld	r27, Z+
    86aa:	fb 8f       	std	Y+27, r31	; 0x1b
    86ac:	ea 8f       	std	Y+26, r30	; 0x1a
    86ae:	84 15       	cp	r24, r4
    86b0:	95 05       	cpc	r25, r5
    86b2:	a6 05       	cpc	r26, r6
    86b4:	b7 05       	cpc	r27, r7
    86b6:	2c f4       	brge	.+10     	; 0x86c2 <Sensor_PID+0x2a8>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    86b8:	f8 01       	movw	r30, r16
    86ba:	80 83       	st	Z, r24
    86bc:	91 83       	std	Z+1, r25	; 0x01
    86be:	a2 83       	std	Z+2, r26	; 0x02
    86c0:	b3 83       	std	Z+3, r27	; 0x03
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    86c2:	b0 95       	com	r27
    86c4:	a0 95       	com	r26
    86c6:	90 95       	com	r25
    86c8:	81 95       	neg	r24
    86ca:	9f 4f       	sbci	r25, 0xFF	; 255
    86cc:	af 4f       	sbci	r26, 0xFF	; 255
    86ce:	bf 4f       	sbci	r27, 0xFF	; 255
    86d0:	f8 01       	movw	r30, r16
    86d2:	40 81       	ld	r20, Z
    86d4:	51 81       	ldd	r21, Z+1	; 0x01
    86d6:	62 81       	ldd	r22, Z+2	; 0x02
    86d8:	73 81       	ldd	r23, Z+3	; 0x03
    86da:	48 17       	cp	r20, r24
    86dc:	59 07       	cpc	r21, r25
    86de:	6a 07       	cpc	r22, r26
    86e0:	7b 07       	cpc	r23, r27
    86e2:	24 f4       	brge	.+8      	; 0x86ec <Sensor_PID+0x2d2>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    86e4:	80 83       	st	Z, r24
    86e6:	91 83       	std	Z+1, r25	; 0x01
    86e8:	a2 83       	std	Z+2, r26	; 0x02
    86ea:	b3 83       	std	Z+3, r27	; 0x03
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    86ec:	ec 8d       	ldd	r30, Y+28	; 0x1c
    86ee:	fd 8d       	ldd	r31, Y+29	; 0x1d
    86f0:	81 91       	ld	r24, Z+
    86f2:	91 91       	ld	r25, Z+
    86f4:	a1 91       	ld	r26, Z+
    86f6:	b1 91       	ld	r27, Z+
    86f8:	fd 8f       	std	Y+29, r31	; 0x1d
    86fa:	ec 8f       	std	Y+28, r30	; 0x1c
    86fc:	f8 01       	movw	r30, r16
    86fe:	44 85       	ldd	r20, Z+12	; 0x0c
    8700:	55 85       	ldd	r21, Z+13	; 0x0d
    8702:	66 85       	ldd	r22, Z+14	; 0x0e
    8704:	77 85       	ldd	r23, Z+15	; 0x0f
    8706:	84 17       	cp	r24, r20
    8708:	95 07       	cpc	r25, r21
    870a:	a6 07       	cpc	r26, r22
    870c:	b7 07       	cpc	r27, r23
    870e:	24 f4       	brge	.+8      	; 0x8718 <Sensor_PID+0x2fe>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    8710:	84 87       	std	Z+12, r24	; 0x0c
    8712:	95 87       	std	Z+13, r25	; 0x0d
    8714:	a6 87       	std	Z+14, r26	; 0x0e
    8716:	b7 87       	std	Z+15, r27	; 0x0f
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    8718:	b0 95       	com	r27
    871a:	a0 95       	com	r26
    871c:	90 95       	com	r25
    871e:	81 95       	neg	r24
    8720:	9f 4f       	sbci	r25, 0xFF	; 255
    8722:	af 4f       	sbci	r26, 0xFF	; 255
    8724:	bf 4f       	sbci	r27, 0xFF	; 255
    8726:	f8 01       	movw	r30, r16
    8728:	44 85       	ldd	r20, Z+12	; 0x0c
    872a:	55 85       	ldd	r21, Z+13	; 0x0d
    872c:	66 85       	ldd	r22, Z+14	; 0x0e
    872e:	77 85       	ldd	r23, Z+15	; 0x0f
    8730:	48 17       	cp	r20, r24
    8732:	59 07       	cpc	r21, r25
    8734:	6a 07       	cpc	r22, r26
    8736:	7b 07       	cpc	r23, r27
    8738:	24 f4       	brge	.+8      	; 0x8742 <Sensor_PID+0x328>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    873a:	84 87       	std	Z+12, r24	; 0x0c
    873c:	95 87       	std	Z+13, r25	; 0x0d
    873e:	a6 87       	std	Z+14, r26	; 0x0e
    8740:	b7 87       	std	Z+15, r27	; 0x0f
    8742:	fb 89       	ldd	r31, Y+19	; 0x13
    8744:	ff 5f       	subi	r31, 0xFF	; 255
    8746:	fb 8b       	std	Y+19, r31	; 0x13
    8748:	0c 5f       	subi	r16, 0xFC	; 252
    874a:	1f 4f       	sbci	r17, 0xFF	; 255
    874c:	24 e0       	ldi	r18, 0x04	; 4
    874e:	22 0e       	add	r2, r18
    8750:	31 1c       	adc	r3, r1
    8752:	89 89       	ldd	r24, Y+17	; 0x11
    8754:	9a 89       	ldd	r25, Y+18	; 0x12
    8756:	02 96       	adiw	r24, 0x02	; 2
    8758:	9a 8b       	std	Y+18, r25	; 0x12
    875a:	89 8b       	std	Y+17, r24	; 0x11
	{
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	for (axis = 0; axis <= YAW; axis ++)
    875c:	f3 30       	cpi	r31, 0x03	; 3
    875e:	09 f0       	breq	.+2      	; 0x8762 <Sensor_PID+0x348>
    8760:	c5 ce       	rjmp	.-630    	; 0x84ec <Sensor_PID+0xd2>
			}
		}
	}
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    8762:	40 91 16 05 	lds	r20, 0x0516
    8766:	50 91 17 05 	lds	r21, 0x0517
    876a:	66 27       	eor	r22, r22
    876c:	57 fd       	sbrc	r21, 7
    876e:	60 95       	com	r22
    8770:	76 2f       	mov	r23, r22
    8772:	80 91 38 05 	lds	r24, 0x0538
    8776:	90 91 39 05 	lds	r25, 0x0539
    877a:	a0 91 3a 05 	lds	r26, 0x053A
    877e:	b0 91 3b 05 	lds	r27, 0x053B
    8782:	84 0f       	add	r24, r20
    8784:	95 1f       	adc	r25, r21
    8786:	a6 1f       	adc	r26, r22
    8788:	b7 1f       	adc	r27, r23
    878a:	80 93 38 05 	sts	0x0538, r24
    878e:	90 93 39 05 	sts	0x0539, r25
    8792:	a0 93 3a 05 	sts	0x053A, r26
    8796:	b0 93 3b 05 	sts	0x053B, r27
}
    879a:	a3 96       	adiw	r28, 0x23	; 35
    879c:	0f b6       	in	r0, 0x3f	; 63
    879e:	f8 94       	cli
    87a0:	de bf       	out	0x3e, r29	; 62
    87a2:	0f be       	out	0x3f, r0	; 63
    87a4:	cd bf       	out	0x3d, r28	; 61
    87a6:	df 91       	pop	r29
    87a8:	cf 91       	pop	r28
    87aa:	1f 91       	pop	r17
    87ac:	0f 91       	pop	r16
    87ae:	ff 90       	pop	r15
    87b0:	ef 90       	pop	r14
    87b2:	df 90       	pop	r13
    87b4:	cf 90       	pop	r12
    87b6:	bf 90       	pop	r11
    87b8:	af 90       	pop	r10
    87ba:	9f 90       	pop	r9
    87bc:	8f 90       	pop	r8
    87be:	7f 90       	pop	r7
    87c0:	6f 90       	pop	r6
    87c2:	5f 90       	pop	r5
    87c4:	4f 90       	pop	r4
    87c6:	3f 90       	pop	r3
    87c8:	2f 90       	pop	r2
    87ca:	08 95       	ret

000087cc <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    87cc:	2f 92       	push	r2
    87ce:	3f 92       	push	r3
    87d0:	4f 92       	push	r4
    87d2:	5f 92       	push	r5
    87d4:	6f 92       	push	r6
    87d6:	7f 92       	push	r7
    87d8:	8f 92       	push	r8
    87da:	9f 92       	push	r9
    87dc:	af 92       	push	r10
    87de:	bf 92       	push	r11
    87e0:	cf 92       	push	r12
    87e2:	df 92       	push	r13
    87e4:	ef 92       	push	r14
    87e6:	ff 92       	push	r15
    87e8:	0f 93       	push	r16
    87ea:	1f 93       	push	r17
    87ec:	cf 93       	push	r28
    87ee:	df 93       	push	r29
    87f0:	cd b7       	in	r28, 0x3d	; 61
    87f2:	de b7       	in	r29, 0x3e	; 62
    87f4:	ca 54       	subi	r28, 0x4A	; 74
    87f6:	d1 09       	sbc	r29, r1
    87f8:	0f b6       	in	r0, 0x3f	; 63
    87fa:	f8 94       	cli
    87fc:	de bf       	out	0x3e, r29	; 62
    87fe:	0f be       	out	0x3f, r0	; 63
    8800:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8802:	80 91 ea 05 	lds	r24, 0x05EA
    8806:	8d 8b       	std	Y+21, r24	; 0x15
    8808:	80 91 f0 05 	lds	r24, 0x05F0
    880c:	8e 8b       	std	Y+22, r24	; 0x16
    880e:	80 91 f6 05 	lds	r24, 0x05F6
    8812:	8f 8b       	std	Y+23, r24	; 0x17
    8814:	80 91 fc 05 	lds	r24, 0x05FC
    8818:	88 8f       	std	Y+24, r24	; 0x18
    881a:	80 91 02 06 	lds	r24, 0x0602
    881e:	89 8f       	std	Y+25, r24	; 0x19
    8820:	80 91 08 06 	lds	r24, 0x0608
    8824:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8826:	80 91 eb 05 	lds	r24, 0x05EB
    882a:	8f 87       	std	Y+15, r24	; 0x0f
    882c:	80 91 f1 05 	lds	r24, 0x05F1
    8830:	88 8b       	std	Y+16, r24	; 0x10
    8832:	80 91 f7 05 	lds	r24, 0x05F7
    8836:	89 8b       	std	Y+17, r24	; 0x11
    8838:	80 91 fd 05 	lds	r24, 0x05FD
    883c:	8a 8b       	std	Y+18, r24	; 0x12
    883e:	80 91 03 06 	lds	r24, 0x0603
    8842:	8b 8b       	std	Y+19, r24	; 0x13
    8844:	80 91 09 06 	lds	r24, 0x0609
    8848:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    884a:	80 91 ee 05 	lds	r24, 0x05EE
    884e:	89 87       	std	Y+9, r24	; 0x09
    8850:	80 91 f4 05 	lds	r24, 0x05F4
    8854:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    8856:	20 91 fb 05 	lds	r18, 0x05FB
    885a:	29 a7       	std	Y+41, r18	; 0x29
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    885c:	2b 87       	std	Y+11, r18	; 0x0b
    885e:	80 91 00 06 	lds	r24, 0x0600
    8862:	8c 87       	std	Y+12, r24	; 0x0c
    8864:	80 91 06 06 	lds	r24, 0x0606
    8868:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    886a:	30 91 0d 06 	lds	r19, 0x060D
    886e:	3a a7       	std	Y+42, r19	; 0x2a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8870:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    8872:	80 91 b7 07 	lds	r24, 0x07B7
    8876:	90 91 b8 07 	lds	r25, 0x07B8
    887a:	9a 83       	std	Y+2, r25	; 0x02
    887c:	89 83       	std	Y+1, r24	; 0x01
    887e:	80 91 bb 07 	lds	r24, 0x07BB
    8882:	90 91 bc 07 	lds	r25, 0x07BC
    8886:	9c 83       	std	Y+4, r25	; 0x04
    8888:	8b 83       	std	Y+3, r24	; 0x03
    888a:	80 91 b9 07 	lds	r24, 0x07B9
    888e:	90 91 ba 07 	lds	r25, 0x07BA
    8892:	9e 83       	std	Y+6, r25	; 0x06
    8894:	8d 83       	std	Y+5, r24	; 0x05
    8896:	80 91 bd 07 	lds	r24, 0x07BD
    889a:	90 91 be 07 	lds	r25, 0x07BE
    889e:	98 87       	std	Y+8, r25	; 0x08
    88a0:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    88a2:	20 91 18 05 	lds	r18, 0x0518
    88a6:	30 e0       	ldi	r19, 0x00	; 0
    88a8:	40 e0       	ldi	r20, 0x00	; 0
    88aa:	50 e0       	ldi	r21, 0x00	; 0
    88ac:	60 91 38 05 	lds	r22, 0x0538
    88b0:	70 91 39 05 	lds	r23, 0x0539
    88b4:	80 91 3a 05 	lds	r24, 0x053A
    88b8:	90 91 3b 05 	lds	r25, 0x053B
    88bc:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <__divmodsi4>
    88c0:	29 96       	adiw	r28, 0x09	; 9
    88c2:	2c af       	std	Y+60, r18	; 0x3c
    88c4:	3d af       	std	Y+61, r19	; 0x3d
    88c6:	4e af       	std	Y+62, r20	; 0x3e
    88c8:	5f af       	std	Y+63, r21	; 0x3f
    88ca:	29 97       	sbiw	r28, 0x09	; 9
	PID_AvgAccVert = 0;							// Reset average
    88cc:	10 92 38 05 	sts	0x0538, r1
    88d0:	10 92 39 05 	sts	0x0539, r1
    88d4:	10 92 3a 05 	sts	0x053A, r1
    88d8:	10 92 3b 05 	sts	0x053B, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    88dc:	80 91 fa 05 	lds	r24, 0x05FA
    88e0:	40 e4       	ldi	r20, 0x40	; 64
    88e2:	84 02       	muls	r24, r20
    88e4:	c0 01       	movw	r24, r0
    88e6:	11 24       	eor	r1, r1
    88e8:	9c 01       	movw	r18, r24
    88ea:	44 27       	eor	r20, r20
    88ec:	37 fd       	sbrc	r19, 7
    88ee:	40 95       	com	r20
    88f0:	54 2f       	mov	r21, r20
    88f2:	29 af       	std	Y+57, r18	; 0x39
    88f4:	3a af       	std	Y+58, r19	; 0x3a
    88f6:	4b af       	std	Y+59, r20	; 0x3b
    88f8:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    88fa:	80 91 0c 06 	lds	r24, 0x060C
    88fe:	30 e4       	ldi	r19, 0x40	; 64
    8900:	83 02       	muls	r24, r19
    8902:	c0 01       	movw	r24, r0
    8904:	11 24       	eor	r1, r1
    8906:	9c 01       	movw	r18, r24
    8908:	44 27       	eor	r20, r20
    890a:	37 fd       	sbrc	r19, 7
    890c:	40 95       	com	r20
    890e:	54 2f       	mov	r21, r20
    8910:	21 96       	adiw	r28, 0x01	; 1
    8912:	2c af       	std	Y+60, r18	; 0x3c
    8914:	3d af       	std	Y+61, r19	; 0x3d
    8916:	4e af       	std	Y+62, r20	; 0x3e
    8918:	5f af       	std	Y+63, r21	; 0x3f
    891a:	21 97       	sbiw	r28, 0x01	; 1
    891c:	ea e7       	ldi	r30, 0x7A	; 122
    891e:	f5 e0       	ldi	r31, 0x05	; 5
    8920:	f8 af       	std	Y+56, r31	; 0x38
    8922:	ef ab       	std	Y+55, r30	; 0x37
    8924:	fe 01       	movw	r30, r28
    8926:	75 96       	adiw	r30, 0x15	; 21
    8928:	fe ab       	std	Y+54, r31	; 0x36
    892a:	ed ab       	std	Y+53, r30	; 0x35
    892c:	e5 ef       	ldi	r30, 0xF5	; 245
    892e:	f7 e0       	ldi	r31, 0x07	; 7
    8930:	fe a3       	std	Y+38, r31	; 0x26
    8932:	ed a3       	std	Y+37, r30	; 0x25
    8934:	fe 01       	movw	r30, r28
    8936:	3f 96       	adiw	r30, 0x0f	; 15
    8938:	fc ab       	std	Y+52, r31	; 0x34
    893a:	eb ab       	std	Y+51, r30	; 0x33
    893c:	39 96       	adiw	r30, 0x09	; 9
    893e:	fa ab       	std	Y+50, r31	; 0x32
    8940:	e9 ab       	std	Y+49, r30	; 0x31
    8942:	36 97       	sbiw	r30, 0x06	; 6
    8944:	f8 ab       	std	Y+48, r31	; 0x30
    8946:	ef a7       	std	Y+47, r30	; 0x2f
    8948:	ee e0       	ldi	r30, 0x0E	; 14
    894a:	f6 e0       	ldi	r31, 0x06	; 6
    894c:	fe a7       	std	Y+46, r31	; 0x2e
    894e:	ed a7       	std	Y+45, r30	; 0x2d
    8950:	e9 e1       	ldi	r30, 0x19	; 25
    8952:	f8 e0       	ldi	r31, 0x08	; 8
    8954:	fc a3       	std	Y+36, r31	; 0x24
    8956:	eb a3       	std	Y+35, r30	; 0x23
    8958:	e8 e9       	ldi	r30, 0x98	; 152
    895a:	f5 e0       	ldi	r31, 0x05	; 5
    895c:	f8 a7       	std	Y+40, r31	; 0x28
    895e:	ef a3       	std	Y+39, r30	; 0x27
    8960:	fe 01       	movw	r30, r28
    8962:	31 96       	adiw	r30, 0x01	; 1
    8964:	fa a3       	std	Y+34, r31	; 0x22
    8966:	e9 a3       	std	Y+33, r30	; 0x21
    8968:	e5 e2       	ldi	r30, 0x25	; 37
    896a:	f8 e0       	ldi	r31, 0x08	; 8
    896c:	f8 a3       	std	Y+32, r31	; 0x20
    896e:	ef 8f       	std	Y+31, r30	; 0x1f
    8970:	1e 01       	movw	r2, r28
    8972:	fc e0       	ldi	r31, 0x0C	; 12
    8974:	2f 0e       	add	r2, r31
    8976:	31 1c       	adc	r3, r1
    8978:	ea e1       	ldi	r30, 0x1A	; 26
    897a:	f6 e0       	ldi	r31, 0x06	; 6
    897c:	fc a7       	std	Y+44, r31	; 0x2c
    897e:	eb a7       	std	Y+43, r30	; 0x2b
    8980:	2b 96       	adiw	r28, 0x0b	; 11
    8982:	1f ae       	std	Y+63, r1	; 0x3f
    8984:	1e ae       	std	Y+62, r1	; 0x3e
    8986:	2b 97       	sbiw	r28, 0x0b	; 11
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    8988:	81 2c       	mov	r8, r1
    898a:	91 2c       	mov	r9, r1
    898c:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    898e:	80 e0       	ldi	r24, 0x00	; 0
    8990:	90 e0       	ldi	r25, 0x00	; 0
    8992:	dc 01       	movw	r26, r24
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    8994:	ef a9       	ldd	r30, Y+55	; 0x37
    8996:	f8 ad       	ldd	r31, Y+56	; 0x38
    8998:	01 91       	ld	r16, Z+
    899a:	11 91       	ld	r17, Z+
    899c:	f8 af       	std	Y+56, r31	; 0x38
    899e:	ef ab       	std	Y+55, r30	; 0x37
    89a0:	ed a9       	ldd	r30, Y+53	; 0x35
    89a2:	fe a9       	ldd	r31, Y+54	; 0x36
    89a4:	41 91       	ld	r20, Z+
    89a6:	fe ab       	std	Y+54, r31	; 0x36
    89a8:	ed ab       	std	Y+53, r30	; 0x35
    89aa:	40 03       	mulsu	r20, r16
    89ac:	90 01       	movw	r18, r0
    89ae:	41 9f       	mul	r20, r17
    89b0:	30 0d       	add	r19, r0
    89b2:	11 24       	eor	r1, r1
    89b4:	44 27       	eor	r20, r20
    89b6:	37 fd       	sbrc	r19, 7
    89b8:	40 95       	com	r20
    89ba:	54 2f       	mov	r21, r20
    89bc:	28 0f       	add	r18, r24
    89be:	39 1f       	adc	r19, r25
    89c0:	4a 1f       	adc	r20, r26
    89c2:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    89c4:	a3 e0       	ldi	r26, 0x03	; 3
    89c6:	b0 e0       	ldi	r27, 0x00	; 0
    89c8:	0e 94 31 4c 	call	0x9862	; 0x9862 <__muluhisi3>
    89cc:	25 96       	adiw	r28, 0x05	; 5
    89ce:	6c af       	std	Y+60, r22	; 0x3c
    89d0:	7d af       	std	Y+61, r23	; 0x3d
    89d2:	8e af       	std	Y+62, r24	; 0x3e
    89d4:	9f af       	std	Y+63, r25	; 0x3f
    89d6:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    89d8:	eb a9       	ldd	r30, Y+51	; 0x33
    89da:	fc a9       	ldd	r31, Y+52	; 0x34
    89dc:	a1 91       	ld	r26, Z+
    89de:	fc ab       	std	Y+52, r31	; 0x34
    89e0:	eb ab       	std	Y+51, r30	; 0x33
    89e2:	ed a1       	ldd	r30, Y+37	; 0x25
    89e4:	fe a1       	ldd	r31, Y+38	; 0x26
    89e6:	20 81       	ld	r18, Z
    89e8:	31 81       	ldd	r19, Z+1	; 0x01
    89ea:	42 81       	ldd	r20, Z+2	; 0x02
    89ec:	53 81       	ldd	r21, Z+3	; 0x03
    89ee:	bb 27       	eor	r27, r27
    89f0:	a7 fd       	sbrc	r26, 7
    89f2:	b0 95       	com	r27
    89f4:	0e 94 3c 4c 	call	0x9878	; 0x9878 <__mulshisi3>
    89f8:	2b 01       	movw	r4, r22
    89fa:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    89fc:	85 e0       	ldi	r24, 0x05	; 5
    89fe:	75 94       	asr	r7
    8a00:	67 94       	ror	r6
    8a02:	57 94       	ror	r5
    8a04:	47 94       	ror	r4
    8a06:	8a 95       	dec	r24
    8a08:	d1 f7       	brne	.-12     	; 0x89fe <Calculate_PID+0x232>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    8a0a:	e9 a9       	ldd	r30, Y+49	; 0x31
    8a0c:	fa a9       	ldd	r31, Y+50	; 0x32
    8a0e:	41 91       	ld	r20, Z+
    8a10:	fa ab       	std	Y+50, r31	; 0x32
    8a12:	e9 ab       	std	Y+49, r30	; 0x31
    8a14:	40 03       	mulsu	r20, r16
    8a16:	90 01       	movw	r18, r0
    8a18:	41 9f       	mul	r20, r17
    8a1a:	30 0d       	add	r19, r0
    8a1c:	11 24       	eor	r1, r1
    8a1e:	44 27       	eor	r20, r20
    8a20:	37 fd       	sbrc	r19, 7
    8a22:	40 95       	com	r20
    8a24:	54 2f       	mov	r21, r20
    8a26:	28 0d       	add	r18, r8
    8a28:	39 1d       	adc	r19, r9
    8a2a:	4a 1d       	adc	r20, r10
    8a2c:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    8a2e:	a3 e0       	ldi	r26, 0x03	; 3
    8a30:	b0 e0       	ldi	r27, 0x00	; 0
    8a32:	0e 94 31 4c 	call	0x9862	; 0x9862 <__muluhisi3>
    8a36:	4b 01       	movw	r8, r22
    8a38:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    8a3a:	ef a5       	ldd	r30, Y+47	; 0x2f
    8a3c:	f8 a9       	ldd	r31, Y+48	; 0x30
    8a3e:	a1 91       	ld	r26, Z+
    8a40:	f8 ab       	std	Y+48, r31	; 0x30
    8a42:	ef a7       	std	Y+47, r30	; 0x2f
    8a44:	ed a1       	ldd	r30, Y+37	; 0x25
    8a46:	fe a1       	ldd	r31, Y+38	; 0x26
    8a48:	24 85       	ldd	r18, Z+12	; 0x0c
    8a4a:	35 85       	ldd	r19, Z+13	; 0x0d
    8a4c:	46 85       	ldd	r20, Z+14	; 0x0e
    8a4e:	57 85       	ldd	r21, Z+15	; 0x0f
    8a50:	bb 27       	eor	r27, r27
    8a52:	a7 fd       	sbrc	r26, 7
    8a54:	b0 95       	com	r27
    8a56:	0e 94 3c 4c 	call	0x9878	; 0x9878 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    8a5a:	25 e0       	ldi	r18, 0x05	; 5
    8a5c:	95 95       	asr	r25
    8a5e:	87 95       	ror	r24
    8a60:	77 95       	ror	r23
    8a62:	67 95       	ror	r22
    8a64:	2a 95       	dec	r18
    8a66:	d1 f7       	brne	.-12     	; 0x8a5c <Calculate_PID+0x290>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    8a68:	ed a5       	ldd	r30, Y+45	; 0x2d
    8a6a:	fe a5       	ldd	r31, Y+46	; 0x2e
    8a6c:	c1 90       	ld	r12, Z+
    8a6e:	d1 90       	ld	r13, Z+
    8a70:	e1 90       	ld	r14, Z+
    8a72:	f1 90       	ld	r15, Z+
    8a74:	fe a7       	std	Y+46, r31	; 0x2e
    8a76:	ed a7       	std	Y+45, r30	; 0x2d
    8a78:	c4 14       	cp	r12, r4
    8a7a:	d5 04       	cpc	r13, r5
    8a7c:	e6 04       	cpc	r14, r6
    8a7e:	f7 04       	cpc	r15, r7
    8a80:	84 f0       	brlt	.+32     	; 0x8aa2 <Calculate_PID+0x2d6>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    8a82:	00 27       	eor	r16, r16
    8a84:	11 27       	eor	r17, r17
    8a86:	98 01       	movw	r18, r16
    8a88:	0c 19       	sub	r16, r12
    8a8a:	1d 09       	sbc	r17, r13
    8a8c:	2e 09       	sbc	r18, r14
    8a8e:	3f 09       	sbc	r19, r15
    8a90:	73 01       	movw	r14, r6
    8a92:	62 01       	movw	r12, r4
    8a94:	40 16       	cp	r4, r16
    8a96:	51 06       	cpc	r5, r17
    8a98:	62 06       	cpc	r6, r18
    8a9a:	73 06       	cpc	r7, r19
    8a9c:	14 f4       	brge	.+4      	; 0x8aa2 <Calculate_PID+0x2d6>
    8a9e:	68 01       	movw	r12, r16
    8aa0:	79 01       	movw	r14, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    8aa2:	eb a5       	ldd	r30, Y+43	; 0x2b
    8aa4:	fc a5       	ldd	r31, Y+44	; 0x2c
    8aa6:	21 91       	ld	r18, Z+
    8aa8:	31 91       	ld	r19, Z+
    8aaa:	41 91       	ld	r20, Z+
    8aac:	51 91       	ld	r21, Z+
    8aae:	fc a7       	std	Y+44, r31	; 0x2c
    8ab0:	eb a7       	std	Y+43, r30	; 0x2b
    8ab2:	2b 8f       	std	Y+27, r18	; 0x1b
    8ab4:	3c 8f       	std	Y+28, r19	; 0x1c
    8ab6:	4d 8f       	std	Y+29, r20	; 0x1d
    8ab8:	5e 8f       	std	Y+30, r21	; 0x1e
    8aba:	26 17       	cp	r18, r22
    8abc:	37 07       	cpc	r19, r23
    8abe:	48 07       	cpc	r20, r24
    8ac0:	59 07       	cpc	r21, r25
    8ac2:	b4 f0       	brlt	.+44     	; 0x8af0 <Calculate_PID+0x324>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    8ac4:	89 01       	movw	r16, r18
    8ac6:	9a 01       	movw	r18, r20
    8ac8:	30 95       	com	r19
    8aca:	20 95       	com	r18
    8acc:	10 95       	com	r17
    8ace:	01 95       	neg	r16
    8ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    8ad2:	2f 4f       	sbci	r18, 0xFF	; 255
    8ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    8ad6:	6b 8f       	std	Y+27, r22	; 0x1b
    8ad8:	7c 8f       	std	Y+28, r23	; 0x1c
    8ada:	8d 8f       	std	Y+29, r24	; 0x1d
    8adc:	9e 8f       	std	Y+30, r25	; 0x1e
    8ade:	60 17       	cp	r22, r16
    8ae0:	71 07       	cpc	r23, r17
    8ae2:	82 07       	cpc	r24, r18
    8ae4:	93 07       	cpc	r25, r19
    8ae6:	24 f4       	brge	.+8      	; 0x8af0 <Calculate_PID+0x324>
    8ae8:	0b 8f       	std	Y+27, r16	; 0x1b
    8aea:	1c 8f       	std	Y+28, r17	; 0x1c
    8aec:	2d 8f       	std	Y+29, r18	; 0x1d
    8aee:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE);
    8af0:	25 96       	adiw	r28, 0x05	; 5
    8af2:	4c ac       	ldd	r4, Y+60	; 0x3c
    8af4:	5d ac       	ldd	r5, Y+61	; 0x3d
    8af6:	6e ac       	ldd	r6, Y+62	; 0x3e
    8af8:	7f ac       	ldd	r7, Y+63	; 0x3f
    8afa:	25 97       	sbiw	r28, 0x05	; 5
    8afc:	4c 0c       	add	r4, r12
    8afe:	5d 1c       	adc	r5, r13
    8b00:	6e 1c       	adc	r6, r14
    8b02:	7f 1c       	adc	r7, r15
    8b04:	16 e0       	ldi	r17, 0x06	; 6
    8b06:	75 94       	asr	r7
    8b08:	67 94       	ror	r6
    8b0a:	57 94       	ror	r5
    8b0c:	47 94       	ror	r4
    8b0e:	1a 95       	dec	r17
    8b10:	d1 f7       	brne	.-12     	; 0x8b06 <Calculate_PID+0x33a>
    8b12:	eb a1       	ldd	r30, Y+35	; 0x23
    8b14:	fc a1       	ldd	r31, Y+36	; 0x24
    8b16:	51 82       	std	Z+1, r5	; 0x01
    8b18:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    8b1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8b1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8b1e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8b20:	be 8d       	ldd	r27, Y+30	; 0x1e
    8b22:	88 0d       	add	r24, r8
    8b24:	99 1d       	adc	r25, r9
    8b26:	aa 1d       	adc	r26, r10
    8b28:	bb 1d       	adc	r27, r11
    8b2a:	06 e0       	ldi	r16, 0x06	; 6
    8b2c:	b5 95       	asr	r27
    8b2e:	a7 95       	ror	r26
    8b30:	97 95       	ror	r25
    8b32:	87 95       	ror	r24
    8b34:	0a 95       	dec	r16
    8b36:	d1 f7       	brne	.-12     	; 0x8b2c <Calculate_PID+0x360>
    8b38:	97 83       	std	Z+7, r25	; 0x07
    8b3a:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    8b3c:	2a 96       	adiw	r28, 0x0a	; 10
    8b3e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8b40:	2a 97       	sbiw	r28, 0x0a	; 10
    8b42:	f2 30       	cpi	r31, 0x02	; 2
    8b44:	e9 f1       	breq	.+122    	; 0x8bc0 <Calculate_PID+0x3f4>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    8b46:	ef a1       	ldd	r30, Y+39	; 0x27
    8b48:	f8 a5       	ldd	r31, Y+40	; 0x28
    8b4a:	40 81       	ld	r20, Z
    8b4c:	51 81       	ldd	r21, Z+1	; 0x01
    8b4e:	e9 a1       	ldd	r30, Y+33	; 0x21
    8b50:	fa a1       	ldd	r31, Y+34	; 0x22
    8b52:	80 81       	ld	r24, Z
    8b54:	91 81       	ldd	r25, Z+1	; 0x01
    8b56:	9a 01       	movw	r18, r20
    8b58:	28 1b       	sub	r18, r24
    8b5a:	39 0b       	sbc	r19, r25
    8b5c:	a9 e0       	ldi	r26, 0x09	; 9
    8b5e:	b0 e0       	ldi	r27, 0x00	; 0
    8b60:	ac 0f       	add	r26, r28
    8b62:	bd 1f       	adc	r27, r29
    8b64:	2b 96       	adiw	r28, 0x0b	; 11
    8b66:	ee ad       	ldd	r30, Y+62	; 0x3e
    8b68:	ff ad       	ldd	r31, Y+63	; 0x3f
    8b6a:	2b 97       	sbiw	r28, 0x0b	; 11
    8b6c:	ae 0f       	add	r26, r30
    8b6e:	bf 1f       	adc	r27, r31
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    8b70:	ac 91       	ld	r26, X
    8b72:	bb 27       	eor	r27, r27
    8b74:	a7 fd       	sbrc	r26, 7
    8b76:	b0 95       	com	r27
    8b78:	0e 94 13 4c 	call	0x9826	; 0x9826 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    8b7c:	bb 27       	eor	r27, r27
    8b7e:	97 fd       	sbrc	r25, 7
    8b80:	ba 95       	dec	r27
    8b82:	a9 2f       	mov	r26, r25
    8b84:	98 2f       	mov	r25, r24
    8b86:	87 2f       	mov	r24, r23
    8b88:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8b8a:	f8 a1       	ldd	r31, Y+32	; 0x20
    8b8c:	91 83       	std	Z+1, r25	; 0x01
    8b8e:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    8b90:	e9 a1       	ldd	r30, Y+33	; 0x21
    8b92:	fa a1       	ldd	r31, Y+34	; 0x22
    8b94:	84 81       	ldd	r24, Z+4	; 0x04
    8b96:	95 81       	ldd	r25, Z+5	; 0x05
    8b98:	9a 01       	movw	r18, r20
    8b9a:	28 1b       	sub	r18, r24
    8b9c:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    8b9e:	f1 01       	movw	r30, r2
    8ba0:	a0 81       	ld	r26, Z
    8ba2:	bb 27       	eor	r27, r27
    8ba4:	a7 fd       	sbrc	r26, 7
    8ba6:	b0 95       	com	r27
    8ba8:	0e 94 13 4c 	call	0x9826	; 0x9826 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    8bac:	bb 27       	eor	r27, r27
    8bae:	97 fd       	sbrc	r25, 7
    8bb0:	ba 95       	dec	r27
    8bb2:	a9 2f       	mov	r26, r25
    8bb4:	98 2f       	mov	r25, r24
    8bb6:	87 2f       	mov	r24, r23
    8bb8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8bba:	f8 a1       	ldd	r31, Y+32	; 0x20
    8bbc:	97 83       	std	Z+7, r25	; 0x07
    8bbe:	86 83       	std	Z+6, r24	; 0x06
	PID_AvgAccVert = 0;							// Reset average

	//************************************************************
	// PID loop
	//************************************************************
	for (axis = 0; axis <= YAW; axis ++)
    8bc0:	2b 96       	adiw	r28, 0x0b	; 11
    8bc2:	ee ad       	ldd	r30, Y+62	; 0x3e
    8bc4:	ff ad       	ldd	r31, Y+63	; 0x3f
    8bc6:	2b 97       	sbiw	r28, 0x0b	; 11
    8bc8:	32 97       	sbiw	r30, 0x02	; 2
    8bca:	e1 f1       	breq	.+120    	; 0x8c44 <Calculate_PID+0x478>
	{
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    8bcc:	2a 96       	adiw	r28, 0x0a	; 10
    8bce:	ff ad       	ldd	r31, Y+63	; 0x3f
    8bd0:	2a 97       	sbiw	r28, 0x0a	; 10
    8bd2:	f1 30       	cpi	r31, 0x01	; 1
    8bd4:	39 f0       	breq	.+14     	; 0x8be4 <Calculate_PID+0x418>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    8bd6:	81 2c       	mov	r8, r1
    8bd8:	91 2c       	mov	r9, r1
    8bda:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    8bdc:	80 e0       	ldi	r24, 0x00	; 0
    8bde:	90 e0       	ldi	r25, 0x00	; 0
    8be0:	dc 01       	movw	r26, r24
    8be2:	0a c0       	rjmp	.+20     	; 0x8bf8 <Calculate_PID+0x42c>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8be4:	21 96       	adiw	r28, 0x01	; 1
    8be6:	8c ac       	ldd	r8, Y+60	; 0x3c
    8be8:	9d ac       	ldd	r9, Y+61	; 0x3d
    8bea:	ae ac       	ldd	r10, Y+62	; 0x3e
    8bec:	bf ac       	ldd	r11, Y+63	; 0x3f
    8bee:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    8bf0:	89 ad       	ldd	r24, Y+57	; 0x39
    8bf2:	9a ad       	ldd	r25, Y+58	; 0x3a
    8bf4:	ab ad       	ldd	r26, Y+59	; 0x3b
    8bf6:	bc ad       	ldd	r27, Y+60	; 0x3c
    8bf8:	2b 96       	adiw	r28, 0x0b	; 11
    8bfa:	ee ad       	ldd	r30, Y+62	; 0x3e
    8bfc:	ff ad       	ldd	r31, Y+63	; 0x3f
    8bfe:	2b 97       	sbiw	r28, 0x0b	; 11
    8c00:	31 96       	adiw	r30, 0x01	; 1
    8c02:	2b 96       	adiw	r28, 0x0b	; 11
    8c04:	ff af       	std	Y+63, r31	; 0x3f
    8c06:	ee af       	std	Y+62, r30	; 0x3e
    8c08:	2b 97       	sbiw	r28, 0x0b	; 11
    8c0a:	ed a1       	ldd	r30, Y+37	; 0x25
    8c0c:	fe a1       	ldd	r31, Y+38	; 0x26
    8c0e:	34 96       	adiw	r30, 0x04	; 4
    8c10:	fe a3       	std	Y+38, r31	; 0x26
    8c12:	ed a3       	std	Y+37, r30	; 0x25
    8c14:	eb a1       	ldd	r30, Y+35	; 0x23
    8c16:	fc a1       	ldd	r31, Y+36	; 0x24
    8c18:	32 96       	adiw	r30, 0x02	; 2
    8c1a:	fc a3       	std	Y+36, r31	; 0x24
    8c1c:	eb a3       	std	Y+35, r30	; 0x23
    8c1e:	ef a1       	ldd	r30, Y+39	; 0x27
    8c20:	f8 a5       	ldd	r31, Y+40	; 0x28
    8c22:	32 96       	adiw	r30, 0x02	; 2
    8c24:	f8 a7       	std	Y+40, r31	; 0x28
    8c26:	ef a3       	std	Y+39, r30	; 0x27
    8c28:	e9 a1       	ldd	r30, Y+33	; 0x21
    8c2a:	fa a1       	ldd	r31, Y+34	; 0x22
    8c2c:	32 96       	adiw	r30, 0x02	; 2
    8c2e:	fa a3       	std	Y+34, r31	; 0x22
    8c30:	e9 a3       	std	Y+33, r30	; 0x21
    8c32:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8c34:	f8 a1       	ldd	r31, Y+32	; 0x20
    8c36:	32 96       	adiw	r30, 0x02	; 2
    8c38:	f8 a3       	std	Y+32, r31	; 0x20
    8c3a:	ef 8f       	std	Y+31, r30	; 0x1f
    8c3c:	ff ef       	ldi	r31, 0xFF	; 255
    8c3e:	2f 1a       	sub	r2, r31
    8c40:	3f 0a       	sbc	r3, r31
    8c42:	a8 ce       	rjmp	.-688    	; 0x8994 <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    8c44:	27 96       	adiw	r28, 0x07	; 7
    8c46:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c48:	df ac       	ldd	r13, Y+63	; 0x3f
    8c4a:	27 97       	sbiw	r28, 0x07	; 7
    8c4c:	d1 94       	neg	r13
    8c4e:	c1 94       	neg	r12
    8c50:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    8c52:	96 01       	movw	r18, r12
    8c54:	f9 a5       	ldd	r31, Y+41	; 0x29
    8c56:	af 2f       	mov	r26, r31
    8c58:	bb 27       	eor	r27, r27
    8c5a:	a7 fd       	sbrc	r26, 7
    8c5c:	b0 95       	com	r27
    8c5e:	0e 94 13 4c 	call	0x9826	; 0x9826 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    8c62:	f4 e0       	ldi	r31, 0x04	; 4
    8c64:	95 95       	asr	r25
    8c66:	87 95       	ror	r24
    8c68:	77 95       	ror	r23
    8c6a:	67 95       	ror	r22
    8c6c:	fa 95       	dec	r31
    8c6e:	d1 f7       	brne	.-12     	; 0x8c64 <Calculate_PID+0x498>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    8c70:	65 3f       	cpi	r22, 0xF5	; 245
    8c72:	21 e0       	ldi	r18, 0x01	; 1
    8c74:	72 07       	cpc	r23, r18
    8c76:	81 05       	cpc	r24, r1
    8c78:	91 05       	cpc	r25, r1
    8c7a:	64 f4       	brge	.+24     	; 0x8c94 <Calculate_PID+0x4c8>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    8c7c:	6c 30       	cpi	r22, 0x0C	; 12
    8c7e:	3e ef       	ldi	r19, 0xFE	; 254
    8c80:	73 07       	cpc	r23, r19
    8c82:	3f ef       	ldi	r19, 0xFF	; 255
    8c84:	83 07       	cpc	r24, r19
    8c86:	93 07       	cpc	r25, r19
    8c88:	4c f4       	brge	.+18     	; 0x8c9c <Calculate_PID+0x4d0>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    8c8a:	6c e0       	ldi	r22, 0x0C	; 12
    8c8c:	7e ef       	ldi	r23, 0xFE	; 254
    8c8e:	8f ef       	ldi	r24, 0xFF	; 255
    8c90:	9f ef       	ldi	r25, 0xFF	; 255
    8c92:	04 c0       	rjmp	.+8      	; 0x8c9c <Calculate_PID+0x4d0>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    8c94:	64 ef       	ldi	r22, 0xF4	; 244
    8c96:	71 e0       	ldi	r23, 0x01	; 1
    8c98:	80 e0       	ldi	r24, 0x00	; 0
    8c9a:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    8c9c:	70 93 2a 08 	sts	0x082A, r23
    8ca0:	60 93 29 08 	sts	0x0829, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    8ca4:	96 01       	movw	r18, r12
    8ca6:	4a a5       	ldd	r20, Y+42	; 0x2a
    8ca8:	a4 2f       	mov	r26, r20
    8caa:	bb 27       	eor	r27, r27
    8cac:	a7 fd       	sbrc	r26, 7
    8cae:	b0 95       	com	r27
    8cb0:	0e 94 13 4c 	call	0x9826	; 0x9826 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    8cb4:	e4 e0       	ldi	r30, 0x04	; 4
    8cb6:	95 95       	asr	r25
    8cb8:	87 95       	ror	r24
    8cba:	77 95       	ror	r23
    8cbc:	67 95       	ror	r22
    8cbe:	ea 95       	dec	r30
    8cc0:	d1 f7       	brne	.-12     	; 0x8cb6 <Calculate_PID+0x4ea>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    8cc2:	65 3f       	cpi	r22, 0xF5	; 245
    8cc4:	51 e0       	ldi	r21, 0x01	; 1
    8cc6:	75 07       	cpc	r23, r21
    8cc8:	81 05       	cpc	r24, r1
    8cca:	91 05       	cpc	r25, r1
    8ccc:	64 f4       	brge	.+24     	; 0x8ce6 <Calculate_PID+0x51a>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    8cce:	6c 30       	cpi	r22, 0x0C	; 12
    8cd0:	ae ef       	ldi	r26, 0xFE	; 254
    8cd2:	7a 07       	cpc	r23, r26
    8cd4:	af ef       	ldi	r26, 0xFF	; 255
    8cd6:	8a 07       	cpc	r24, r26
    8cd8:	9a 07       	cpc	r25, r26
    8cda:	4c f4       	brge	.+18     	; 0x8cee <Calculate_PID+0x522>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    8cdc:	6c e0       	ldi	r22, 0x0C	; 12
    8cde:	7e ef       	ldi	r23, 0xFE	; 254
    8ce0:	8f ef       	ldi	r24, 0xFF	; 255
    8ce2:	9f ef       	ldi	r25, 0xFF	; 255
    8ce4:	04 c0       	rjmp	.+8      	; 0x8cee <Calculate_PID+0x522>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    8ce6:	64 ef       	ldi	r22, 0xF4	; 244
    8ce8:	71 e0       	ldi	r23, 0x01	; 1
    8cea:	80 e0       	ldi	r24, 0x00	; 0
    8cec:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    8cee:	70 93 30 08 	sts	0x0830, r23
    8cf2:	60 93 2f 08 	sts	0x082F, r22
	}
}
    8cf6:	c6 5b       	subi	r28, 0xB6	; 182
    8cf8:	df 4f       	sbci	r29, 0xFF	; 255
    8cfa:	0f b6       	in	r0, 0x3f	; 63
    8cfc:	f8 94       	cli
    8cfe:	de bf       	out	0x3e, r29	; 62
    8d00:	0f be       	out	0x3f, r0	; 63
    8d02:	cd bf       	out	0x3d, r28	; 61
    8d04:	df 91       	pop	r29
    8d06:	cf 91       	pop	r28
    8d08:	1f 91       	pop	r17
    8d0a:	0f 91       	pop	r16
    8d0c:	ff 90       	pop	r15
    8d0e:	ef 90       	pop	r14
    8d10:	df 90       	pop	r13
    8d12:	cf 90       	pop	r12
    8d14:	bf 90       	pop	r11
    8d16:	af 90       	pop	r10
    8d18:	9f 90       	pop	r9
    8d1a:	8f 90       	pop	r8
    8d1c:	7f 90       	pop	r7
    8d1e:	6f 90       	pop	r6
    8d20:	5f 90       	pop	r5
    8d22:	4f 90       	pop	r4
    8d24:	3f 90       	pop	r3
    8d26:	2f 90       	pop	r2
    8d28:	08 95       	ret

00008d2a <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    8d2a:	e2 e9       	ldi	r30, 0x92	; 146
    8d2c:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    8d2e:	80 e0       	ldi	r24, 0x00	; 0
    8d30:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    8d32:	ac 01       	movw	r20, r24
    8d34:	44 0f       	add	r20, r20
    8d36:	55 1f       	adc	r21, r21
    8d38:	da 01       	movw	r26, r20
    8d3a:	ae 53       	subi	r26, 0x3E	; 62
    8d3c:	b8 4f       	sbci	r27, 0xF8	; 248
    8d3e:	2d 91       	ld	r18, X+
    8d40:	3c 91       	ld	r19, X
    8d42:	61 91       	ld	r22, Z+
    8d44:	71 91       	ld	r23, Z+
    8d46:	26 1b       	sub	r18, r22
    8d48:	37 0b       	sbc	r19, r23
    8d4a:	da 01       	movw	r26, r20
    8d4c:	ad 5c       	subi	r26, 0xCD	; 205
    8d4e:	b7 4f       	sbci	r27, 0xF7	; 247
    8d50:	11 96       	adiw	r26, 0x01	; 1
    8d52:	3c 93       	st	X, r19
    8d54:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    8d56:	01 96       	adiw	r24, 0x01	; 1
    8d58:	88 30       	cpi	r24, 0x08	; 8
    8d5a:	91 05       	cpc	r25, r1
    8d5c:	51 f7       	brne	.-44     	; 0x8d32 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    8d5e:	80 91 c2 07 	lds	r24, 0x07C2
    8d62:	90 91 c3 07 	lds	r25, 0x07C3
    8d66:	20 91 92 07 	lds	r18, 0x0792
    8d6a:	30 91 93 07 	lds	r19, 0x0793
    8d6e:	82 1b       	sub	r24, r18
    8d70:	93 0b       	sbc	r25, r19
    8d72:	90 93 32 08 	sts	0x0832, r25
    8d76:	80 93 31 08 	sts	0x0831, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    8d7a:	80 91 c2 07 	lds	r24, 0x07C2
    8d7e:	90 91 c3 07 	lds	r25, 0x07C3
    8d82:	86 5a       	subi	r24, 0xA6	; 166
    8d84:	9e 40       	sbci	r25, 0x0E	; 14
    8d86:	90 93 34 08 	sts	0x0834, r25
    8d8a:	80 93 33 08 	sts	0x0833, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    8d8e:	80 91 e8 05 	lds	r24, 0x05E8
    8d92:	81 30       	cpi	r24, 0x01	; 1
    8d94:	59 f4       	brne	.+22     	; 0x8dac <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    8d96:	80 91 35 08 	lds	r24, 0x0835
    8d9a:	90 91 36 08 	lds	r25, 0x0836
    8d9e:	91 95       	neg	r25
    8da0:	81 95       	neg	r24
    8da2:	91 09       	sbc	r25, r1
    8da4:	90 93 36 08 	sts	0x0836, r25
    8da8:	80 93 35 08 	sts	0x0835, r24
	}

	if (Config.ElevatorPol == REVERSED)
    8dac:	80 91 e9 05 	lds	r24, 0x05E9
    8db0:	81 30       	cpi	r24, 0x01	; 1
    8db2:	59 f4       	brne	.+22     	; 0x8dca <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    8db4:	80 91 37 08 	lds	r24, 0x0837
    8db8:	90 91 38 08 	lds	r25, 0x0838
    8dbc:	91 95       	neg	r25
    8dbe:	81 95       	neg	r24
    8dc0:	91 09       	sbc	r25, r1
    8dc2:	90 93 38 08 	sts	0x0838, r25
    8dc6:	80 93 37 08 	sts	0x0837, r24
	}

	if (Config.RudderPol == REVERSED)
    8dca:	80 91 c0 07 	lds	r24, 0x07C0
    8dce:	81 30       	cpi	r24, 0x01	; 1
    8dd0:	59 f4       	brne	.+22     	; 0x8de8 <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    8dd2:	80 91 39 08 	lds	r24, 0x0839
    8dd6:	90 91 3a 08 	lds	r25, 0x083A
    8dda:	91 95       	neg	r25
    8ddc:	81 95       	neg	r24
    8dde:	91 09       	sbc	r25, r1
    8de0:	90 93 3a 08 	sts	0x083A, r25
    8de4:	80 93 39 08 	sts	0x0839, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    8de8:	80 91 35 08 	lds	r24, 0x0835
    8dec:	90 91 36 08 	lds	r25, 0x0836
    8df0:	40 91 37 08 	lds	r20, 0x0837
    8df4:	50 91 38 08 	lds	r21, 0x0838
    8df8:	20 91 39 08 	lds	r18, 0x0839
    8dfc:	30 91 3a 08 	lds	r19, 0x083A
    8e00:	84 0f       	add	r24, r20
    8e02:	95 1f       	adc	r25, r21
    8e04:	82 0f       	add	r24, r18
    8e06:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    8e08:	20 91 3c 05 	lds	r18, 0x053C
    8e0c:	30 91 3d 05 	lds	r19, 0x053D
    8e10:	ac 01       	movw	r20, r24
    8e12:	42 1b       	sub	r20, r18
    8e14:	53 0b       	sbc	r21, r19
    8e16:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    8e18:	2b 5f       	subi	r18, 0xFB	; 251
    8e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    8e1c:	2b 30       	cpi	r18, 0x0B	; 11
    8e1e:	31 05       	cpc	r19, r1
    8e20:	38 f4       	brcc	.+14     	; 0x8e30 <RxGetChannels+0x106>
    8e22:	20 91 31 08 	lds	r18, 0x0831
    8e26:	30 91 32 08 	lds	r19, 0x0832
    8e2a:	23 33       	cpi	r18, 0x33	; 51
    8e2c:	31 05       	cpc	r19, r1
    8e2e:	24 f0       	brlt	.+8      	; 0x8e38 <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    8e30:	20 91 1f 05 	lds	r18, 0x051F
    8e34:	21 60       	ori	r18, 0x01	; 1
    8e36:	03 c0       	rjmp	.+6      	; 0x8e3e <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    8e38:	20 91 1f 05 	lds	r18, 0x051F
    8e3c:	2e 7f       	andi	r18, 0xFE	; 254
    8e3e:	20 93 1f 05 	sts	0x051F, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    8e42:	10 92 44 08 	sts	0x0844, r1
    8e46:	10 92 43 08 	sts	0x0843, r1

	OldRxSum = RxSum;
    8e4a:	90 93 3d 05 	sts	0x053D, r25
    8e4e:	80 93 3c 05 	sts	0x053C, r24
    8e52:	08 95       	ret

00008e54 <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    8e54:	0f 93       	push	r16
    8e56:	1f 93       	push	r17
    8e58:	cf 93       	push	r28
    8e5a:	df 93       	push	r29
    8e5c:	cd b7       	in	r28, 0x3d	; 61
    8e5e:	de b7       	in	r29, 0x3e	; 62
    8e60:	60 97       	sbiw	r28, 0x10	; 16
    8e62:	0f b6       	in	r0, 0x3f	; 63
    8e64:	f8 94       	cli
    8e66:	de bf       	out	0x3e, r29	; 62
    8e68:	0f be       	out	0x3f, r0	; 63
    8e6a:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    8e6c:	8e 01       	movw	r16, r28
    8e6e:	0f 5f       	subi	r16, 0xFF	; 255
    8e70:	1f 4f       	sbci	r17, 0xFF	; 255
    8e72:	80 e1       	ldi	r24, 0x10	; 16
    8e74:	d8 01       	movw	r26, r16
    8e76:	1d 92       	st	X+, r1
    8e78:	8a 95       	dec	r24
    8e7a:	e9 f7       	brne	.-6      	; 0x8e76 <CenterSticks+0x22>
    8e7c:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    8e7e:	d8 01       	movw	r26, r16
    8e80:	80 e0       	ldi	r24, 0x00	; 0
    8e82:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    8e84:	9c 01       	movw	r18, r24
    8e86:	22 0f       	add	r18, r18
    8e88:	33 1f       	adc	r19, r19
    8e8a:	2e 53       	subi	r18, 0x3E	; 62
    8e8c:	38 4f       	sbci	r19, 0xF8	; 248
    8e8e:	f9 01       	movw	r30, r18
    8e90:	40 81       	ld	r20, Z
    8e92:	51 81       	ldd	r21, Z+1	; 0x01
    8e94:	2d 91       	ld	r18, X+
    8e96:	3c 91       	ld	r19, X
    8e98:	11 97       	sbiw	r26, 0x01	; 1
    8e9a:	24 0f       	add	r18, r20
    8e9c:	35 1f       	adc	r19, r21
    8e9e:	2d 93       	st	X+, r18
    8ea0:	3d 93       	st	X+, r19
    8ea2:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    8ea4:	88 30       	cpi	r24, 0x08	; 8
    8ea6:	91 05       	cpc	r25, r1
    8ea8:	69 f7       	brne	.-38     	; 0x8e84 <CenterSticks+0x30>
    8eaa:	ff e7       	ldi	r31, 0x7F	; 127
    8eac:	2a e1       	ldi	r18, 0x1A	; 26
    8eae:	86 e0       	ldi	r24, 0x06	; 6
    8eb0:	f1 50       	subi	r31, 0x01	; 1
    8eb2:	20 40       	sbci	r18, 0x00	; 0
    8eb4:	80 40       	sbci	r24, 0x00	; 0
    8eb6:	e1 f7       	brne	.-8      	; 0x8eb0 <CenterSticks+0x5c>
    8eb8:	00 c0       	rjmp	.+0      	; 0x8eba <CenterSticks+0x66>
    8eba:	00 00       	nop
    8ebc:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    8ebe:	f9 f6       	brne	.-66     	; 0x8e7e <CenterSticks+0x2a>
    8ec0:	a2 e9       	ldi	r26, 0x92	; 146
    8ec2:	b7 e0       	ldi	r27, 0x07	; 7
    8ec4:	9e 01       	movw	r18, r28
    8ec6:	2f 5e       	subi	r18, 0xEF	; 239
    8ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    8eca:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    8ecc:	81 91       	ld	r24, Z+
    8ece:	91 91       	ld	r25, Z+
    8ed0:	04 96       	adiw	r24, 0x04	; 4
    8ed2:	43 e0       	ldi	r20, 0x03	; 3
    8ed4:	96 95       	lsr	r25
    8ed6:	87 95       	ror	r24
    8ed8:	4a 95       	dec	r20
    8eda:	e1 f7       	brne	.-8      	; 0x8ed4 <CenterSticks+0x80>
    8edc:	8d 93       	st	X+, r24
    8ede:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    8ee0:	e2 17       	cp	r30, r18
    8ee2:	f3 07       	cpc	r31, r19
    8ee4:	99 f7       	brne	.-26     	; 0x8ecc <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    8ee6:	60 96       	adiw	r28, 0x10	; 16
    8ee8:	0f b6       	in	r0, 0x3f	; 63
    8eea:	f8 94       	cli
    8eec:	de bf       	out	0x3e, r29	; 62
    8eee:	0f be       	out	0x3f, r0	; 63
    8ef0:	cd bf       	out	0x3d, r28	; 61
    8ef2:	df 91       	pop	r29
    8ef4:	cf 91       	pop	r28
    8ef6:	1f 91       	pop	r17
    8ef8:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    8efa:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <Save_Config_to_EEPROM>

00008efe <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    8efe:	8f 92       	push	r8
    8f00:	9f 92       	push	r9
    8f02:	af 92       	push	r10
    8f04:	bf 92       	push	r11
    8f06:	df 92       	push	r13
    8f08:	ef 92       	push	r14
    8f0a:	ff 92       	push	r15
    8f0c:	0f 93       	push	r16
    8f0e:	1f 93       	push	r17
    8f10:	cf 93       	push	r28
    8f12:	df 93       	push	r29
    8f14:	d8 2e       	mov	r13, r24
    8f16:	0e e4       	ldi	r16, 0x4E	; 78
    8f18:	16 e0       	ldi	r17, 0x06	; 6
    8f1a:	c0 e0       	ldi	r28, 0x00	; 0
    8f1c:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    8f1e:	ea e0       	ldi	r30, 0x0A	; 10
    8f20:	8e 2e       	mov	r8, r30
    8f22:	91 2c       	mov	r9, r1
    8f24:	a1 2c       	mov	r10, r1
    8f26:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    8f28:	7e 01       	movw	r14, r28
    8f2a:	ee 0c       	add	r14, r14
    8f2c:	ff 1c       	adc	r15, r15
    8f2e:	f7 01       	movw	r30, r14
    8f30:	eb 5b       	subi	r30, 0xBB	; 187
    8f32:	f7 4f       	sbci	r31, 0xF7	; 247
    8f34:	20 81       	ld	r18, Z
    8f36:	31 81       	ldd	r19, Z+1	; 0x01
    8f38:	a9 01       	movw	r20, r18
    8f3a:	60 e0       	ldi	r22, 0x00	; 0
    8f3c:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    8f3e:	f8 01       	movw	r30, r16
    8f40:	80 81       	ld	r24, Z
    8f42:	82 30       	cpi	r24, 0x02	; 2
    8f44:	79 f0       	breq	.+30     	; 0x8f64 <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    8f46:	9a 01       	movw	r18, r20
    8f48:	ab 01       	movw	r20, r22
    8f4a:	26 5a       	subi	r18, 0xA6	; 166
    8f4c:	3e 40       	sbci	r19, 0x0E	; 14
    8f4e:	41 09       	sbc	r20, r1
    8f50:	51 09       	sbc	r21, r1
    8f52:	56 95       	lsr	r21
    8f54:	47 95       	ror	r20
    8f56:	37 95       	ror	r19
    8f58:	27 95       	ror	r18
    8f5a:	24 52       	subi	r18, 0x24	; 36
    8f5c:	3a 4f       	sbci	r19, 0xFA	; 250
    8f5e:	4f 4f       	sbci	r20, 0xFF	; 255
    8f60:	5f 4f       	sbci	r21, 0xFF	; 255
    8f62:	11 c0       	rjmp	.+34     	; 0x8f86 <output_servo_ppm+0x88>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    8f64:	cb 01       	movw	r24, r22
    8f66:	ba 01       	movw	r22, r20
    8f68:	52 e0       	ldi	r21, 0x02	; 2
    8f6a:	66 0f       	add	r22, r22
    8f6c:	77 1f       	adc	r23, r23
    8f6e:	88 1f       	adc	r24, r24
    8f70:	99 1f       	adc	r25, r25
    8f72:	5a 95       	dec	r21
    8f74:	d1 f7       	brne	.-12     	; 0x8f6a <output_servo_ppm+0x6c>
    8f76:	6b 5f       	subi	r22, 0xFB	; 251
    8f78:	7f 4f       	sbci	r23, 0xFF	; 255
    8f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    8f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    8f7e:	a5 01       	movw	r20, r10
    8f80:	94 01       	movw	r18, r8
    8f82:	0e 94 cc 4b 	call	0x9798	; 0x9798 <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    8f86:	f7 01       	movw	r30, r14
    8f88:	eb 5b       	subi	r30, 0xBB	; 187
    8f8a:	f7 4f       	sbci	r31, 0xF7	; 247
    8f8c:	31 83       	std	Z+1, r19	; 0x01
    8f8e:	20 83       	st	Z, r18
    8f90:	21 96       	adiw	r28, 0x01	; 1
    8f92:	0a 5d       	subi	r16, 0xDA	; 218
    8f94:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    8f96:	c8 30       	cpi	r28, 0x08	; 8
    8f98:	d1 05       	cpc	r29, r1
    8f9a:	31 f6       	brne	.-116    	; 0x8f28 <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    8f9c:	80 91 c2 07 	lds	r24, 0x07C2
    8fa0:	90 91 c3 07 	lds	r25, 0x07C3
    8fa4:	20 91 92 07 	lds	r18, 0x0792
    8fa8:	30 91 93 07 	lds	r19, 0x0793
    8fac:	82 1b       	sub	r24, r18
    8fae:	93 0b       	sbc	r25, r19
    8fb0:	90 93 32 08 	sts	0x0832, r25
    8fb4:	80 93 31 08 	sts	0x0831, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    8fb8:	80 91 31 08 	lds	r24, 0x0831
    8fbc:	90 91 32 08 	lds	r25, 0x0832
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    8fc0:	c2 97       	sbiw	r24, 0x32	; 50
    8fc2:	ac f0       	brlt	.+42     	; 0x8fee <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    8fc4:	80 91 20 05 	lds	r24, 0x0520
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    8fc8:	82 fd       	sbrc	r24, 2
    8fca:	11 c0       	rjmp	.+34     	; 0x8fee <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    8fcc:	80 91 20 05 	lds	r24, 0x0520
    8fd0:	80 fd       	sbrc	r24, 0
    8fd2:	24 c0       	rjmp	.+72     	; 0x901c <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    8fd4:	10 92 ed 07 	sts	0x07ED, r1
	
		// We now care about interrupts
		JitterGate = true;
    8fd8:	81 e0       	ldi	r24, 0x01	; 1
    8fda:	80 93 ec 07 	sts	0x07EC, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    8fde:	6d 2d       	mov	r22, r13
    8fe0:	85 e4       	ldi	r24, 0x45	; 69
    8fe2:	98 e0       	ldi	r25, 0x08	; 8
    8fe4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    8fe8:	10 92 ec 07 	sts	0x07EC, r1
    8fec:	17 c0       	rjmp	.+46     	; 0x901c <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    8fee:	ee e4       	ldi	r30, 0x4E	; 78
    8ff0:	f6 e0       	ldi	r31, 0x06	; 6
    8ff2:	80 e0       	ldi	r24, 0x00	; 0
    8ff4:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    8ff6:	28 ee       	ldi	r18, 0xE8	; 232
    8ff8:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    8ffa:	40 81       	ld	r20, Z
    8ffc:	42 30       	cpi	r20, 0x02	; 2
    8ffe:	41 f4       	brne	.+16     	; 0x9010 <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    9000:	dc 01       	movw	r26, r24
    9002:	aa 0f       	add	r26, r26
    9004:	bb 1f       	adc	r27, r27
    9006:	ab 5b       	subi	r26, 0xBB	; 187
    9008:	b7 4f       	sbci	r27, 0xF7	; 247
    900a:	11 96       	adiw	r26, 0x01	; 1
    900c:	3c 93       	st	X, r19
    900e:	2e 93       	st	-X, r18
    9010:	01 96       	adiw	r24, 0x01	; 1
    9012:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    9014:	88 30       	cpi	r24, 0x08	; 8
    9016:	91 05       	cpc	r25, r1
    9018:	81 f7       	brne	.-32     	; 0x8ffa <output_servo_ppm+0xfc>
    901a:	d8 cf       	rjmp	.-80     	; 0x8fcc <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    901c:	df 91       	pop	r29
    901e:	cf 91       	pop	r28
    9020:	1f 91       	pop	r17
    9022:	0f 91       	pop	r16
    9024:	ff 90       	pop	r15
    9026:	ef 90       	pop	r14
    9028:	df 90       	pop	r13
    902a:	bf 90       	pop	r11
    902c:	af 90       	pop	r10
    902e:	9f 90       	pop	r9
    9030:	8f 90       	pop	r8
    9032:	08 95       	ret

00009034 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    9034:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    9038:	81 e1       	ldi	r24, 0x11	; 17
    903a:	80 93 b8 00 	sts	0x00B8, r24
    903e:	08 95       	ret

00009040 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9040:	94 ea       	ldi	r25, 0xA4	; 164
    9042:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    9046:	4f ef       	ldi	r20, 0xFF	; 255
    9048:	50 e0       	ldi	r21, 0x00	; 0
    904a:	60 e0       	ldi	r22, 0x00	; 0
    904c:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    904e:	90 91 bc 00 	lds	r25, 0x00BC
    9052:	97 fd       	sbrc	r25, 7
    9054:	06 c0       	rjmp	.+12     	; 0x9062 <i2c_start+0x22>
    9056:	41 50       	subi	r20, 0x01	; 1
    9058:	51 09       	sbc	r21, r1
    905a:	61 09       	sbc	r22, r1
    905c:	71 09       	sbc	r23, r1
    905e:	b8 f7       	brcc	.-18     	; 0x904e <i2c_start+0xe>
    9060:	06 c0       	rjmp	.+12     	; 0x906e <i2c_start+0x2e>
	if(i2c_timer == 0)
    9062:	45 2b       	or	r20, r21
    9064:	46 2b       	or	r20, r22
    9066:	47 2b       	or	r20, r23
    9068:	11 f4       	brne	.+4      	; 0x906e <i2c_start+0x2e>
		return 1;
    906a:	81 e0       	ldi	r24, 0x01	; 1
    906c:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    906e:	90 91 b9 00 	lds	r25, 0x00B9
    9072:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    9074:	98 30       	cpi	r25, 0x08	; 8
    9076:	11 f0       	breq	.+4      	; 0x907c <i2c_start+0x3c>
    9078:	90 31       	cpi	r25, 0x10	; 16
    907a:	b9 f7       	brne	.-18     	; 0x906a <i2c_start+0x2a>

	// send device address
	TWDR = address;
    907c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    9080:	84 e8       	ldi	r24, 0x84	; 132
    9082:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    9086:	8f ef       	ldi	r24, 0xFF	; 255
    9088:	90 e0       	ldi	r25, 0x00	; 0
    908a:	a0 e0       	ldi	r26, 0x00	; 0
    908c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    908e:	20 91 bc 00 	lds	r18, 0x00BC
    9092:	27 fd       	sbrc	r18, 7
    9094:	05 c0       	rjmp	.+10     	; 0x90a0 <i2c_start+0x60>
    9096:	01 97       	sbiw	r24, 0x01	; 1
    9098:	a1 09       	sbc	r26, r1
    909a:	b1 09       	sbc	r27, r1
    909c:	c0 f7       	brcc	.-16     	; 0x908e <i2c_start+0x4e>
    909e:	04 c0       	rjmp	.+8      	; 0x90a8 <i2c_start+0x68>
	if(i2c_timer == 0)
    90a0:	89 2b       	or	r24, r25
    90a2:	8a 2b       	or	r24, r26
    90a4:	8b 2b       	or	r24, r27
    90a6:	09 f3       	breq	.-62     	; 0x906a <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    90a8:	80 91 b9 00 	lds	r24, 0x00B9
    90ac:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    90ae:	88 31       	cpi	r24, 0x18	; 24
    90b0:	11 f0       	breq	.+4      	; 0x90b6 <i2c_start+0x76>
    90b2:	80 34       	cpi	r24, 0x40	; 64
    90b4:	d1 f6       	brne	.-76     	; 0x906a <i2c_start+0x2a>

	return 0;
    90b6:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    90b8:	08 95       	ret

000090ba <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    90ba:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    90bc:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    90be:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    90c0:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    90c4:	20 e0       	ldi	r18, 0x00	; 0
    90c6:	30 e0       	ldi	r19, 0x00	; 0
    90c8:	90 91 bc 00 	lds	r25, 0x00BC
    90cc:	97 fd       	sbrc	r25, 7
    90ce:	06 c0       	rjmp	.+12     	; 0x90dc <i2c_start_wait+0x22>
    90d0:	2f 5f       	subi	r18, 0xFF	; 255
    90d2:	3f 4f       	sbci	r19, 0xFF	; 255
    90d4:	21 15       	cp	r18, r1
    90d6:	91 e0       	ldi	r25, 0x01	; 1
    90d8:	39 07       	cpc	r19, r25
    90da:	b1 f7       	brne	.-20     	; 0x90c8 <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    90dc:	90 91 b9 00 	lds	r25, 0x00B9
    90e0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    90e2:	98 30       	cpi	r25, 0x08	; 8
    90e4:	11 f0       	breq	.+4      	; 0x90ea <i2c_start_wait+0x30>
    90e6:	90 31       	cpi	r25, 0x10	; 16
    90e8:	59 f7       	brne	.-42     	; 0x90c0 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    90ea:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    90ee:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    90f2:	20 e0       	ldi	r18, 0x00	; 0
    90f4:	30 e0       	ldi	r19, 0x00	; 0
    90f6:	90 91 bc 00 	lds	r25, 0x00BC
    90fa:	97 fd       	sbrc	r25, 7
    90fc:	06 c0       	rjmp	.+12     	; 0x910a <i2c_start_wait+0x50>
    90fe:	2f 5f       	subi	r18, 0xFF	; 255
    9100:	3f 4f       	sbci	r19, 0xFF	; 255
    9102:	21 15       	cp	r18, r1
    9104:	91 e0       	ldi	r25, 0x01	; 1
    9106:	39 07       	cpc	r19, r25
    9108:	b1 f7       	brne	.-20     	; 0x90f6 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    910a:	90 91 b9 00 	lds	r25, 0x00B9
    910e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    9110:	90 32       	cpi	r25, 0x20	; 32
    9112:	11 f0       	breq	.+4      	; 0x9118 <i2c_start_wait+0x5e>
    9114:	98 35       	cpi	r25, 0x58	; 88
    9116:	79 f4       	brne	.+30     	; 0x9136 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9118:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    911c:	20 e0       	ldi	r18, 0x00	; 0
    911e:	30 e0       	ldi	r19, 0x00	; 0
    9120:	90 91 bc 00 	lds	r25, 0x00BC
    9124:	94 ff       	sbrs	r25, 4
    9126:	cc cf       	rjmp	.-104    	; 0x90c0 <i2c_start_wait+0x6>
    9128:	2f 5f       	subi	r18, 0xFF	; 255
    912a:	3f 4f       	sbci	r19, 0xFF	; 255
    912c:	21 15       	cp	r18, r1
    912e:	91 e0       	ldi	r25, 0x01	; 1
    9130:	39 07       	cpc	r19, r25
    9132:	b1 f7       	brne	.-20     	; 0x9120 <i2c_start_wait+0x66>
    9134:	c5 cf       	rjmp	.-118    	; 0x90c0 <i2c_start_wait+0x6>
    9136:	08 95       	ret

00009138 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    9138:	0c 94 20 48 	jmp	0x9040	; 0x9040 <i2c_start>

0000913c <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    913c:	84 e9       	ldi	r24, 0x94	; 148
    913e:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    9142:	80 e0       	ldi	r24, 0x00	; 0
    9144:	90 e0       	ldi	r25, 0x00	; 0
    9146:	20 91 bc 00 	lds	r18, 0x00BC
    914a:	24 ff       	sbrs	r18, 4
    914c:	05 c0       	rjmp	.+10     	; 0x9158 <i2c_stop+0x1c>
    914e:	01 96       	adiw	r24, 0x01	; 1
    9150:	81 15       	cp	r24, r1
    9152:	21 e0       	ldi	r18, 0x01	; 1
    9154:	92 07       	cpc	r25, r18
    9156:	b9 f7       	brne	.-18     	; 0x9146 <i2c_stop+0xa>
    9158:	08 95       	ret

0000915a <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    915a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    915e:	84 e8       	ldi	r24, 0x84	; 132
    9160:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    9164:	8f ef       	ldi	r24, 0xFF	; 255
    9166:	90 e0       	ldi	r25, 0x00	; 0
    9168:	a0 e0       	ldi	r26, 0x00	; 0
    916a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    916c:	20 91 bc 00 	lds	r18, 0x00BC
    9170:	27 fd       	sbrc	r18, 7
    9172:	05 c0       	rjmp	.+10     	; 0x917e <i2c_write+0x24>
    9174:	01 97       	sbiw	r24, 0x01	; 1
    9176:	a1 09       	sbc	r26, r1
    9178:	b1 09       	sbc	r27, r1
    917a:	c0 f7       	brcc	.-16     	; 0x916c <i2c_write+0x12>
    917c:	04 c0       	rjmp	.+8      	; 0x9186 <i2c_write+0x2c>
	if(i2c_timer == 0)
    917e:	89 2b       	or	r24, r25
    9180:	8a 2b       	or	r24, r26
    9182:	8b 2b       	or	r24, r27
    9184:	41 f0       	breq	.+16     	; 0x9196 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    9186:	90 91 b9 00 	lds	r25, 0x00B9
    918a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    918c:	81 e0       	ldi	r24, 0x01	; 1
    918e:	98 32       	cpi	r25, 0x28	; 40
    9190:	19 f4       	brne	.+6      	; 0x9198 <i2c_write+0x3e>
    9192:	80 e0       	ldi	r24, 0x00	; 0
    9194:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    9196:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    9198:	08 95       	ret

0000919a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    919a:	84 ec       	ldi	r24, 0xC4	; 196
    919c:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    91a0:	8f ef       	ldi	r24, 0xFF	; 255
    91a2:	90 e0       	ldi	r25, 0x00	; 0
    91a4:	a0 e0       	ldi	r26, 0x00	; 0
    91a6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    91a8:	20 91 bc 00 	lds	r18, 0x00BC
    91ac:	27 fd       	sbrc	r18, 7
    91ae:	05 c0       	rjmp	.+10     	; 0x91ba <i2c_readAck+0x20>
    91b0:	01 97       	sbiw	r24, 0x01	; 1
    91b2:	a1 09       	sbc	r26, r1
    91b4:	b1 09       	sbc	r27, r1
    91b6:	c0 f7       	brcc	.-16     	; 0x91a8 <i2c_readAck+0xe>
    91b8:	04 c0       	rjmp	.+8      	; 0x91c2 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    91ba:	89 2b       	or	r24, r25
    91bc:	8a 2b       	or	r24, r26
    91be:	8b 2b       	or	r24, r27
    91c0:	19 f0       	breq	.+6      	; 0x91c8 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    91c2:	80 91 bb 00 	lds	r24, 0x00BB
    91c6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    91c8:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    91ca:	08 95       	ret

000091cc <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    91cc:	84 e8       	ldi	r24, 0x84	; 132
    91ce:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    91d2:	8f ef       	ldi	r24, 0xFF	; 255
    91d4:	90 e0       	ldi	r25, 0x00	; 0
    91d6:	a0 e0       	ldi	r26, 0x00	; 0
    91d8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    91da:	20 91 bc 00 	lds	r18, 0x00BC
    91de:	27 fd       	sbrc	r18, 7
    91e0:	05 c0       	rjmp	.+10     	; 0x91ec <i2c_readNak+0x20>
    91e2:	01 97       	sbiw	r24, 0x01	; 1
    91e4:	a1 09       	sbc	r26, r1
    91e6:	b1 09       	sbc	r27, r1
    91e8:	c0 f7       	brcc	.-16     	; 0x91da <i2c_readNak+0xe>
    91ea:	04 c0       	rjmp	.+8      	; 0x91f4 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    91ec:	89 2b       	or	r24, r25
    91ee:	8a 2b       	or	r24, r26
    91f0:	8b 2b       	or	r24, r27
    91f2:	19 f0       	breq	.+6      	; 0x91fa <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    91f4:	80 91 bb 00 	lds	r24, 0x00BB
    91f8:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    91fa:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    91fc:	08 95       	ret

000091fe <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    91fe:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    9200:	80 91 c1 00 	lds	r24, 0x00C1
    9204:	8f 77       	andi	r24, 0x7F	; 127
    9206:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    920a:	80 91 c0 00 	lds	r24, 0x00C0
    920e:	87 ff       	sbrs	r24, 7
    9210:	05 c0       	rjmp	.+10     	; 0x921c <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    9212:	80 91 c6 00 	lds	r24, 0x00C6
    9216:	80 93 c2 00 	sts	0x00C2, r24
    921a:	f7 cf       	rjmp	.-18     	; 0x920a <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    921c:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    9220:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    9224:	86 e0       	ldi	r24, 0x06	; 6
    9226:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    922a:	80 91 e1 05 	lds	r24, 0x05E1
    922e:	82 30       	cpi	r24, 0x02	; 2
    9230:	a1 f0       	breq	.+40     	; 0x925a <init_uart+0x5c>
    9232:	34 f4       	brge	.+12     	; 0x9240 <init_uart+0x42>
    9234:	87 fd       	sbrc	r24, 7
    9236:	4c c0       	rjmp	.+152    	; 0x92d0 <init_uart+0xd2>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    9238:	80 91 c1 00 	lds	r24, 0x00C1
    923c:	8f 7e       	andi	r24, 0xEF	; 239
    923e:	46 c0       	rjmp	.+140    	; 0x92cc <init_uart+0xce>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    9240:	83 30       	cpi	r24, 0x03	; 3
    9242:	41 f1       	breq	.+80     	; 0x9294 <init_uart+0x96>
    9244:	84 30       	cpi	r24, 0x04	; 4
    9246:	09 f0       	breq	.+2      	; 0x924a <init_uart+0x4c>
    9248:	43 c0       	rjmp	.+134    	; 0x92d0 <init_uart+0xd2>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    924a:	90 91 c0 00 	lds	r25, 0x00C0
    924e:	9d 7f       	andi	r25, 0xFD	; 253
    9250:	90 93 c0 00 	sts	0x00C0, r25
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    9254:	10 92 c5 00 	sts	0x00C5, r1
    9258:	25 c0       	rjmp	.+74     	; 0x92a4 <init_uart+0xa6>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    925a:	80 91 c0 00 	lds	r24, 0x00C0
    925e:	82 60       	ori	r24, 0x02	; 2
    9260:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    9264:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    9268:	88 e1       	ldi	r24, 0x18	; 24
    926a:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    926e:	80 91 c1 00 	lds	r24, 0x00C1
    9272:	80 61       	ori	r24, 0x10	; 16
    9274:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    9278:	80 91 c2 00 	lds	r24, 0x00C2
    927c:	88 60       	ori	r24, 0x08	; 8
    927e:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    9282:	80 91 c2 00 	lds	r24, 0x00C2
    9286:	8f 7e       	andi	r24, 0xEF	; 239
    9288:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    928c:	80 91 c2 00 	lds	r24, 0x00C2
    9290:	80 62       	ori	r24, 0x20	; 32
    9292:	17 c0       	rjmp	.+46     	; 0x92c2 <init_uart+0xc4>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    9294:	80 91 c0 00 	lds	r24, 0x00C0
    9298:	8d 7f       	andi	r24, 0xFD	; 253
    929a:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    929e:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    92a2:	8a e0       	ldi	r24, 0x0A	; 10
    92a4:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    92a8:	80 91 c1 00 	lds	r24, 0x00C1
    92ac:	80 61       	ori	r24, 0x10	; 16
    92ae:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    92b2:	80 91 c2 00 	lds	r24, 0x00C2
    92b6:	87 7f       	andi	r24, 0xF7	; 247
    92b8:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    92bc:	80 91 c2 00 	lds	r24, 0x00C2
    92c0:	8f 7e       	andi	r24, 0xEF	; 239
    92c2:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    92c6:	80 91 c1 00 	lds	r24, 0x00C1
    92ca:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    92cc:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    92d0:	78 94       	sei
    92d2:	08 95       	ret

000092d4 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    92d4:	83 e0       	ldi	r24, 0x03	; 3
    92d6:	0e 94 64 11 	call	0x22c8	; 0x22c8 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    92da:	80 91 78 00 	lds	r24, 0x0078
    92de:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    92e2:	9c 01       	movw	r18, r24
    92e4:	36 95       	lsr	r19
    92e6:	27 95       	ror	r18
    92e8:	ac 01       	movw	r20, r24
    92ea:	44 0f       	add	r20, r20
    92ec:	55 1f       	adc	r21, r21
    92ee:	24 0f       	add	r18, r20
    92f0:	35 1f       	adc	r19, r21
    92f2:	ac 01       	movw	r20, r24
    92f4:	74 e0       	ldi	r23, 0x04	; 4
    92f6:	56 95       	lsr	r21
    92f8:	47 95       	ror	r20
    92fa:	7a 95       	dec	r23
    92fc:	e1 f7       	brne	.-8      	; 0x92f6 <GetVbat+0x22>
    92fe:	24 0f       	add	r18, r20
    9300:	35 1f       	adc	r19, r21
    9302:	e6 e0       	ldi	r30, 0x06	; 6
    9304:	96 95       	lsr	r25
    9306:	87 95       	ror	r24
    9308:	ea 95       	dec	r30
    930a:	e1 f7       	brne	.-8      	; 0x9304 <GetVbat+0x30>

	return vBat;
}
    930c:	82 0f       	add	r24, r18
    930e:	93 1f       	adc	r25, r19
    9310:	08 95       	ret

00009312 <__subsf3>:
    9312:	50 58       	subi	r21, 0x80	; 128

00009314 <__addsf3>:
    9314:	bb 27       	eor	r27, r27
    9316:	aa 27       	eor	r26, r26
    9318:	0e d0       	rcall	.+28     	; 0x9336 <__addsf3x>
    931a:	75 c1       	rjmp	.+746    	; 0x9606 <__fp_round>
    931c:	66 d1       	rcall	.+716    	; 0x95ea <__fp_pscA>
    931e:	30 f0       	brcs	.+12     	; 0x932c <__addsf3+0x18>
    9320:	6b d1       	rcall	.+726    	; 0x95f8 <__fp_pscB>
    9322:	20 f0       	brcs	.+8      	; 0x932c <__addsf3+0x18>
    9324:	31 f4       	brne	.+12     	; 0x9332 <__addsf3+0x1e>
    9326:	9f 3f       	cpi	r25, 0xFF	; 255
    9328:	11 f4       	brne	.+4      	; 0x932e <__addsf3+0x1a>
    932a:	1e f4       	brtc	.+6      	; 0x9332 <__addsf3+0x1e>
    932c:	5b c1       	rjmp	.+694    	; 0x95e4 <__fp_nan>
    932e:	0e f4       	brtc	.+2      	; 0x9332 <__addsf3+0x1e>
    9330:	e0 95       	com	r30
    9332:	e7 fb       	bst	r30, 7
    9334:	51 c1       	rjmp	.+674    	; 0x95d8 <__fp_inf>

00009336 <__addsf3x>:
    9336:	e9 2f       	mov	r30, r25
    9338:	77 d1       	rcall	.+750    	; 0x9628 <__fp_split3>
    933a:	80 f3       	brcs	.-32     	; 0x931c <__addsf3+0x8>
    933c:	ba 17       	cp	r27, r26
    933e:	62 07       	cpc	r22, r18
    9340:	73 07       	cpc	r23, r19
    9342:	84 07       	cpc	r24, r20
    9344:	95 07       	cpc	r25, r21
    9346:	18 f0       	brcs	.+6      	; 0x934e <__addsf3x+0x18>
    9348:	71 f4       	brne	.+28     	; 0x9366 <__addsf3x+0x30>
    934a:	9e f5       	brtc	.+102    	; 0x93b2 <__addsf3x+0x7c>
    934c:	8f c1       	rjmp	.+798    	; 0x966c <__fp_zero>
    934e:	0e f4       	brtc	.+2      	; 0x9352 <__addsf3x+0x1c>
    9350:	e0 95       	com	r30
    9352:	0b 2e       	mov	r0, r27
    9354:	ba 2f       	mov	r27, r26
    9356:	a0 2d       	mov	r26, r0
    9358:	0b 01       	movw	r0, r22
    935a:	b9 01       	movw	r22, r18
    935c:	90 01       	movw	r18, r0
    935e:	0c 01       	movw	r0, r24
    9360:	ca 01       	movw	r24, r20
    9362:	a0 01       	movw	r20, r0
    9364:	11 24       	eor	r1, r1
    9366:	ff 27       	eor	r31, r31
    9368:	59 1b       	sub	r21, r25
    936a:	99 f0       	breq	.+38     	; 0x9392 <__addsf3x+0x5c>
    936c:	59 3f       	cpi	r21, 0xF9	; 249
    936e:	50 f4       	brcc	.+20     	; 0x9384 <__addsf3x+0x4e>
    9370:	50 3e       	cpi	r21, 0xE0	; 224
    9372:	68 f1       	brcs	.+90     	; 0x93ce <__addsf3x+0x98>
    9374:	1a 16       	cp	r1, r26
    9376:	f0 40       	sbci	r31, 0x00	; 0
    9378:	a2 2f       	mov	r26, r18
    937a:	23 2f       	mov	r18, r19
    937c:	34 2f       	mov	r19, r20
    937e:	44 27       	eor	r20, r20
    9380:	58 5f       	subi	r21, 0xF8	; 248
    9382:	f3 cf       	rjmp	.-26     	; 0x936a <__addsf3x+0x34>
    9384:	46 95       	lsr	r20
    9386:	37 95       	ror	r19
    9388:	27 95       	ror	r18
    938a:	a7 95       	ror	r26
    938c:	f0 40       	sbci	r31, 0x00	; 0
    938e:	53 95       	inc	r21
    9390:	c9 f7       	brne	.-14     	; 0x9384 <__addsf3x+0x4e>
    9392:	7e f4       	brtc	.+30     	; 0x93b2 <__addsf3x+0x7c>
    9394:	1f 16       	cp	r1, r31
    9396:	ba 0b       	sbc	r27, r26
    9398:	62 0b       	sbc	r22, r18
    939a:	73 0b       	sbc	r23, r19
    939c:	84 0b       	sbc	r24, r20
    939e:	ba f0       	brmi	.+46     	; 0x93ce <__addsf3x+0x98>
    93a0:	91 50       	subi	r25, 0x01	; 1
    93a2:	a1 f0       	breq	.+40     	; 0x93cc <__addsf3x+0x96>
    93a4:	ff 0f       	add	r31, r31
    93a6:	bb 1f       	adc	r27, r27
    93a8:	66 1f       	adc	r22, r22
    93aa:	77 1f       	adc	r23, r23
    93ac:	88 1f       	adc	r24, r24
    93ae:	c2 f7       	brpl	.-16     	; 0x93a0 <__addsf3x+0x6a>
    93b0:	0e c0       	rjmp	.+28     	; 0x93ce <__addsf3x+0x98>
    93b2:	ba 0f       	add	r27, r26
    93b4:	62 1f       	adc	r22, r18
    93b6:	73 1f       	adc	r23, r19
    93b8:	84 1f       	adc	r24, r20
    93ba:	48 f4       	brcc	.+18     	; 0x93ce <__addsf3x+0x98>
    93bc:	87 95       	ror	r24
    93be:	77 95       	ror	r23
    93c0:	67 95       	ror	r22
    93c2:	b7 95       	ror	r27
    93c4:	f7 95       	ror	r31
    93c6:	9e 3f       	cpi	r25, 0xFE	; 254
    93c8:	08 f0       	brcs	.+2      	; 0x93cc <__addsf3x+0x96>
    93ca:	b3 cf       	rjmp	.-154    	; 0x9332 <__addsf3+0x1e>
    93cc:	93 95       	inc	r25
    93ce:	88 0f       	add	r24, r24
    93d0:	08 f0       	brcs	.+2      	; 0x93d4 <__addsf3x+0x9e>
    93d2:	99 27       	eor	r25, r25
    93d4:	ee 0f       	add	r30, r30
    93d6:	97 95       	ror	r25
    93d8:	87 95       	ror	r24
    93da:	08 95       	ret

000093dc <__cmpsf2>:
    93dc:	d9 d0       	rcall	.+434    	; 0x9590 <__fp_cmp>
    93de:	08 f4       	brcc	.+2      	; 0x93e2 <__cmpsf2+0x6>
    93e0:	81 e0       	ldi	r24, 0x01	; 1
    93e2:	08 95       	ret

000093e4 <__divsf3>:
    93e4:	0c d0       	rcall	.+24     	; 0x93fe <__divsf3x>
    93e6:	0f c1       	rjmp	.+542    	; 0x9606 <__fp_round>
    93e8:	07 d1       	rcall	.+526    	; 0x95f8 <__fp_pscB>
    93ea:	40 f0       	brcs	.+16     	; 0x93fc <__divsf3+0x18>
    93ec:	fe d0       	rcall	.+508    	; 0x95ea <__fp_pscA>
    93ee:	30 f0       	brcs	.+12     	; 0x93fc <__divsf3+0x18>
    93f0:	21 f4       	brne	.+8      	; 0x93fa <__divsf3+0x16>
    93f2:	5f 3f       	cpi	r21, 0xFF	; 255
    93f4:	19 f0       	breq	.+6      	; 0x93fc <__divsf3+0x18>
    93f6:	f0 c0       	rjmp	.+480    	; 0x95d8 <__fp_inf>
    93f8:	51 11       	cpse	r21, r1
    93fa:	39 c1       	rjmp	.+626    	; 0x966e <__fp_szero>
    93fc:	f3 c0       	rjmp	.+486    	; 0x95e4 <__fp_nan>

000093fe <__divsf3x>:
    93fe:	14 d1       	rcall	.+552    	; 0x9628 <__fp_split3>
    9400:	98 f3       	brcs	.-26     	; 0x93e8 <__divsf3+0x4>

00009402 <__divsf3_pse>:
    9402:	99 23       	and	r25, r25
    9404:	c9 f3       	breq	.-14     	; 0x93f8 <__divsf3+0x14>
    9406:	55 23       	and	r21, r21
    9408:	b1 f3       	breq	.-20     	; 0x93f6 <__divsf3+0x12>
    940a:	95 1b       	sub	r25, r21
    940c:	55 0b       	sbc	r21, r21
    940e:	bb 27       	eor	r27, r27
    9410:	aa 27       	eor	r26, r26
    9412:	62 17       	cp	r22, r18
    9414:	73 07       	cpc	r23, r19
    9416:	84 07       	cpc	r24, r20
    9418:	38 f0       	brcs	.+14     	; 0x9428 <__divsf3_pse+0x26>
    941a:	9f 5f       	subi	r25, 0xFF	; 255
    941c:	5f 4f       	sbci	r21, 0xFF	; 255
    941e:	22 0f       	add	r18, r18
    9420:	33 1f       	adc	r19, r19
    9422:	44 1f       	adc	r20, r20
    9424:	aa 1f       	adc	r26, r26
    9426:	a9 f3       	breq	.-22     	; 0x9412 <__divsf3_pse+0x10>
    9428:	33 d0       	rcall	.+102    	; 0x9490 <__divsf3_pse+0x8e>
    942a:	0e 2e       	mov	r0, r30
    942c:	3a f0       	brmi	.+14     	; 0x943c <__divsf3_pse+0x3a>
    942e:	e0 e8       	ldi	r30, 0x80	; 128
    9430:	30 d0       	rcall	.+96     	; 0x9492 <__divsf3_pse+0x90>
    9432:	91 50       	subi	r25, 0x01	; 1
    9434:	50 40       	sbci	r21, 0x00	; 0
    9436:	e6 95       	lsr	r30
    9438:	00 1c       	adc	r0, r0
    943a:	ca f7       	brpl	.-14     	; 0x942e <__divsf3_pse+0x2c>
    943c:	29 d0       	rcall	.+82     	; 0x9490 <__divsf3_pse+0x8e>
    943e:	fe 2f       	mov	r31, r30
    9440:	27 d0       	rcall	.+78     	; 0x9490 <__divsf3_pse+0x8e>
    9442:	66 0f       	add	r22, r22
    9444:	77 1f       	adc	r23, r23
    9446:	88 1f       	adc	r24, r24
    9448:	bb 1f       	adc	r27, r27
    944a:	26 17       	cp	r18, r22
    944c:	37 07       	cpc	r19, r23
    944e:	48 07       	cpc	r20, r24
    9450:	ab 07       	cpc	r26, r27
    9452:	b0 e8       	ldi	r27, 0x80	; 128
    9454:	09 f0       	breq	.+2      	; 0x9458 <__divsf3_pse+0x56>
    9456:	bb 0b       	sbc	r27, r27
    9458:	80 2d       	mov	r24, r0
    945a:	bf 01       	movw	r22, r30
    945c:	ff 27       	eor	r31, r31
    945e:	93 58       	subi	r25, 0x83	; 131
    9460:	5f 4f       	sbci	r21, 0xFF	; 255
    9462:	2a f0       	brmi	.+10     	; 0x946e <__divsf3_pse+0x6c>
    9464:	9e 3f       	cpi	r25, 0xFE	; 254
    9466:	51 05       	cpc	r21, r1
    9468:	68 f0       	brcs	.+26     	; 0x9484 <__divsf3_pse+0x82>
    946a:	b6 c0       	rjmp	.+364    	; 0x95d8 <__fp_inf>
    946c:	00 c1       	rjmp	.+512    	; 0x966e <__fp_szero>
    946e:	5f 3f       	cpi	r21, 0xFF	; 255
    9470:	ec f3       	brlt	.-6      	; 0x946c <__divsf3_pse+0x6a>
    9472:	98 3e       	cpi	r25, 0xE8	; 232
    9474:	dc f3       	brlt	.-10     	; 0x946c <__divsf3_pse+0x6a>
    9476:	86 95       	lsr	r24
    9478:	77 95       	ror	r23
    947a:	67 95       	ror	r22
    947c:	b7 95       	ror	r27
    947e:	f7 95       	ror	r31
    9480:	9f 5f       	subi	r25, 0xFF	; 255
    9482:	c9 f7       	brne	.-14     	; 0x9476 <__divsf3_pse+0x74>
    9484:	88 0f       	add	r24, r24
    9486:	91 1d       	adc	r25, r1
    9488:	96 95       	lsr	r25
    948a:	87 95       	ror	r24
    948c:	97 f9       	bld	r25, 7
    948e:	08 95       	ret
    9490:	e1 e0       	ldi	r30, 0x01	; 1
    9492:	66 0f       	add	r22, r22
    9494:	77 1f       	adc	r23, r23
    9496:	88 1f       	adc	r24, r24
    9498:	bb 1f       	adc	r27, r27
    949a:	62 17       	cp	r22, r18
    949c:	73 07       	cpc	r23, r19
    949e:	84 07       	cpc	r24, r20
    94a0:	ba 07       	cpc	r27, r26
    94a2:	20 f0       	brcs	.+8      	; 0x94ac <__divsf3_pse+0xaa>
    94a4:	62 1b       	sub	r22, r18
    94a6:	73 0b       	sbc	r23, r19
    94a8:	84 0b       	sbc	r24, r20
    94aa:	ba 0b       	sbc	r27, r26
    94ac:	ee 1f       	adc	r30, r30
    94ae:	88 f7       	brcc	.-30     	; 0x9492 <__divsf3_pse+0x90>
    94b0:	e0 95       	com	r30
    94b2:	08 95       	ret

000094b4 <__fixsfsi>:
    94b4:	04 d0       	rcall	.+8      	; 0x94be <__fixunssfsi>
    94b6:	68 94       	set
    94b8:	b1 11       	cpse	r27, r1
    94ba:	d9 c0       	rjmp	.+434    	; 0x966e <__fp_szero>
    94bc:	08 95       	ret

000094be <__fixunssfsi>:
    94be:	bc d0       	rcall	.+376    	; 0x9638 <__fp_splitA>
    94c0:	88 f0       	brcs	.+34     	; 0x94e4 <__fixunssfsi+0x26>
    94c2:	9f 57       	subi	r25, 0x7F	; 127
    94c4:	90 f0       	brcs	.+36     	; 0x94ea <__fixunssfsi+0x2c>
    94c6:	b9 2f       	mov	r27, r25
    94c8:	99 27       	eor	r25, r25
    94ca:	b7 51       	subi	r27, 0x17	; 23
    94cc:	a0 f0       	brcs	.+40     	; 0x94f6 <__fixunssfsi+0x38>
    94ce:	d1 f0       	breq	.+52     	; 0x9504 <__fixunssfsi+0x46>
    94d0:	66 0f       	add	r22, r22
    94d2:	77 1f       	adc	r23, r23
    94d4:	88 1f       	adc	r24, r24
    94d6:	99 1f       	adc	r25, r25
    94d8:	1a f0       	brmi	.+6      	; 0x94e0 <__fixunssfsi+0x22>
    94da:	ba 95       	dec	r27
    94dc:	c9 f7       	brne	.-14     	; 0x94d0 <__fixunssfsi+0x12>
    94de:	12 c0       	rjmp	.+36     	; 0x9504 <__fixunssfsi+0x46>
    94e0:	b1 30       	cpi	r27, 0x01	; 1
    94e2:	81 f0       	breq	.+32     	; 0x9504 <__fixunssfsi+0x46>
    94e4:	c3 d0       	rcall	.+390    	; 0x966c <__fp_zero>
    94e6:	b1 e0       	ldi	r27, 0x01	; 1
    94e8:	08 95       	ret
    94ea:	c0 c0       	rjmp	.+384    	; 0x966c <__fp_zero>
    94ec:	67 2f       	mov	r22, r23
    94ee:	78 2f       	mov	r23, r24
    94f0:	88 27       	eor	r24, r24
    94f2:	b8 5f       	subi	r27, 0xF8	; 248
    94f4:	39 f0       	breq	.+14     	; 0x9504 <__fixunssfsi+0x46>
    94f6:	b9 3f       	cpi	r27, 0xF9	; 249
    94f8:	cc f3       	brlt	.-14     	; 0x94ec <__fixunssfsi+0x2e>
    94fa:	86 95       	lsr	r24
    94fc:	77 95       	ror	r23
    94fe:	67 95       	ror	r22
    9500:	b3 95       	inc	r27
    9502:	d9 f7       	brne	.-10     	; 0x94fa <__fixunssfsi+0x3c>
    9504:	3e f4       	brtc	.+14     	; 0x9514 <__fixunssfsi+0x56>
    9506:	90 95       	com	r25
    9508:	80 95       	com	r24
    950a:	70 95       	com	r23
    950c:	61 95       	neg	r22
    950e:	7f 4f       	sbci	r23, 0xFF	; 255
    9510:	8f 4f       	sbci	r24, 0xFF	; 255
    9512:	9f 4f       	sbci	r25, 0xFF	; 255
    9514:	08 95       	ret

00009516 <__floatunsisf>:
    9516:	e8 94       	clt
    9518:	09 c0       	rjmp	.+18     	; 0x952c <__floatsisf+0x12>

0000951a <__floatsisf>:
    951a:	97 fb       	bst	r25, 7
    951c:	3e f4       	brtc	.+14     	; 0x952c <__floatsisf+0x12>
    951e:	90 95       	com	r25
    9520:	80 95       	com	r24
    9522:	70 95       	com	r23
    9524:	61 95       	neg	r22
    9526:	7f 4f       	sbci	r23, 0xFF	; 255
    9528:	8f 4f       	sbci	r24, 0xFF	; 255
    952a:	9f 4f       	sbci	r25, 0xFF	; 255
    952c:	99 23       	and	r25, r25
    952e:	a9 f0       	breq	.+42     	; 0x955a <__floatsisf+0x40>
    9530:	f9 2f       	mov	r31, r25
    9532:	96 e9       	ldi	r25, 0x96	; 150
    9534:	bb 27       	eor	r27, r27
    9536:	93 95       	inc	r25
    9538:	f6 95       	lsr	r31
    953a:	87 95       	ror	r24
    953c:	77 95       	ror	r23
    953e:	67 95       	ror	r22
    9540:	b7 95       	ror	r27
    9542:	f1 11       	cpse	r31, r1
    9544:	f8 cf       	rjmp	.-16     	; 0x9536 <__floatsisf+0x1c>
    9546:	fa f4       	brpl	.+62     	; 0x9586 <__floatsisf+0x6c>
    9548:	bb 0f       	add	r27, r27
    954a:	11 f4       	brne	.+4      	; 0x9550 <__floatsisf+0x36>
    954c:	60 ff       	sbrs	r22, 0
    954e:	1b c0       	rjmp	.+54     	; 0x9586 <__floatsisf+0x6c>
    9550:	6f 5f       	subi	r22, 0xFF	; 255
    9552:	7f 4f       	sbci	r23, 0xFF	; 255
    9554:	8f 4f       	sbci	r24, 0xFF	; 255
    9556:	9f 4f       	sbci	r25, 0xFF	; 255
    9558:	16 c0       	rjmp	.+44     	; 0x9586 <__floatsisf+0x6c>
    955a:	88 23       	and	r24, r24
    955c:	11 f0       	breq	.+4      	; 0x9562 <__floatsisf+0x48>
    955e:	96 e9       	ldi	r25, 0x96	; 150
    9560:	11 c0       	rjmp	.+34     	; 0x9584 <__floatsisf+0x6a>
    9562:	77 23       	and	r23, r23
    9564:	21 f0       	breq	.+8      	; 0x956e <__floatsisf+0x54>
    9566:	9e e8       	ldi	r25, 0x8E	; 142
    9568:	87 2f       	mov	r24, r23
    956a:	76 2f       	mov	r23, r22
    956c:	05 c0       	rjmp	.+10     	; 0x9578 <__floatsisf+0x5e>
    956e:	66 23       	and	r22, r22
    9570:	71 f0       	breq	.+28     	; 0x958e <__floatsisf+0x74>
    9572:	96 e8       	ldi	r25, 0x86	; 134
    9574:	86 2f       	mov	r24, r22
    9576:	70 e0       	ldi	r23, 0x00	; 0
    9578:	60 e0       	ldi	r22, 0x00	; 0
    957a:	2a f0       	brmi	.+10     	; 0x9586 <__floatsisf+0x6c>
    957c:	9a 95       	dec	r25
    957e:	66 0f       	add	r22, r22
    9580:	77 1f       	adc	r23, r23
    9582:	88 1f       	adc	r24, r24
    9584:	da f7       	brpl	.-10     	; 0x957c <__floatsisf+0x62>
    9586:	88 0f       	add	r24, r24
    9588:	96 95       	lsr	r25
    958a:	87 95       	ror	r24
    958c:	97 f9       	bld	r25, 7
    958e:	08 95       	ret

00009590 <__fp_cmp>:
    9590:	99 0f       	add	r25, r25
    9592:	00 08       	sbc	r0, r0
    9594:	55 0f       	add	r21, r21
    9596:	aa 0b       	sbc	r26, r26
    9598:	e0 e8       	ldi	r30, 0x80	; 128
    959a:	fe ef       	ldi	r31, 0xFE	; 254
    959c:	16 16       	cp	r1, r22
    959e:	17 06       	cpc	r1, r23
    95a0:	e8 07       	cpc	r30, r24
    95a2:	f9 07       	cpc	r31, r25
    95a4:	c0 f0       	brcs	.+48     	; 0x95d6 <__fp_cmp+0x46>
    95a6:	12 16       	cp	r1, r18
    95a8:	13 06       	cpc	r1, r19
    95aa:	e4 07       	cpc	r30, r20
    95ac:	f5 07       	cpc	r31, r21
    95ae:	98 f0       	brcs	.+38     	; 0x95d6 <__fp_cmp+0x46>
    95b0:	62 1b       	sub	r22, r18
    95b2:	73 0b       	sbc	r23, r19
    95b4:	84 0b       	sbc	r24, r20
    95b6:	95 0b       	sbc	r25, r21
    95b8:	39 f4       	brne	.+14     	; 0x95c8 <__fp_cmp+0x38>
    95ba:	0a 26       	eor	r0, r26
    95bc:	61 f0       	breq	.+24     	; 0x95d6 <__fp_cmp+0x46>
    95be:	23 2b       	or	r18, r19
    95c0:	24 2b       	or	r18, r20
    95c2:	25 2b       	or	r18, r21
    95c4:	21 f4       	brne	.+8      	; 0x95ce <__fp_cmp+0x3e>
    95c6:	08 95       	ret
    95c8:	0a 26       	eor	r0, r26
    95ca:	09 f4       	brne	.+2      	; 0x95ce <__fp_cmp+0x3e>
    95cc:	a1 40       	sbci	r26, 0x01	; 1
    95ce:	a6 95       	lsr	r26
    95d0:	8f ef       	ldi	r24, 0xFF	; 255
    95d2:	81 1d       	adc	r24, r1
    95d4:	81 1d       	adc	r24, r1
    95d6:	08 95       	ret

000095d8 <__fp_inf>:
    95d8:	97 f9       	bld	r25, 7
    95da:	9f 67       	ori	r25, 0x7F	; 127
    95dc:	80 e8       	ldi	r24, 0x80	; 128
    95de:	70 e0       	ldi	r23, 0x00	; 0
    95e0:	60 e0       	ldi	r22, 0x00	; 0
    95e2:	08 95       	ret

000095e4 <__fp_nan>:
    95e4:	9f ef       	ldi	r25, 0xFF	; 255
    95e6:	80 ec       	ldi	r24, 0xC0	; 192
    95e8:	08 95       	ret

000095ea <__fp_pscA>:
    95ea:	00 24       	eor	r0, r0
    95ec:	0a 94       	dec	r0
    95ee:	16 16       	cp	r1, r22
    95f0:	17 06       	cpc	r1, r23
    95f2:	18 06       	cpc	r1, r24
    95f4:	09 06       	cpc	r0, r25
    95f6:	08 95       	ret

000095f8 <__fp_pscB>:
    95f8:	00 24       	eor	r0, r0
    95fa:	0a 94       	dec	r0
    95fc:	12 16       	cp	r1, r18
    95fe:	13 06       	cpc	r1, r19
    9600:	14 06       	cpc	r1, r20
    9602:	05 06       	cpc	r0, r21
    9604:	08 95       	ret

00009606 <__fp_round>:
    9606:	09 2e       	mov	r0, r25
    9608:	03 94       	inc	r0
    960a:	00 0c       	add	r0, r0
    960c:	11 f4       	brne	.+4      	; 0x9612 <__fp_round+0xc>
    960e:	88 23       	and	r24, r24
    9610:	52 f0       	brmi	.+20     	; 0x9626 <__fp_round+0x20>
    9612:	bb 0f       	add	r27, r27
    9614:	40 f4       	brcc	.+16     	; 0x9626 <__fp_round+0x20>
    9616:	bf 2b       	or	r27, r31
    9618:	11 f4       	brne	.+4      	; 0x961e <__fp_round+0x18>
    961a:	60 ff       	sbrs	r22, 0
    961c:	04 c0       	rjmp	.+8      	; 0x9626 <__fp_round+0x20>
    961e:	6f 5f       	subi	r22, 0xFF	; 255
    9620:	7f 4f       	sbci	r23, 0xFF	; 255
    9622:	8f 4f       	sbci	r24, 0xFF	; 255
    9624:	9f 4f       	sbci	r25, 0xFF	; 255
    9626:	08 95       	ret

00009628 <__fp_split3>:
    9628:	57 fd       	sbrc	r21, 7
    962a:	90 58       	subi	r25, 0x80	; 128
    962c:	44 0f       	add	r20, r20
    962e:	55 1f       	adc	r21, r21
    9630:	59 f0       	breq	.+22     	; 0x9648 <__fp_splitA+0x10>
    9632:	5f 3f       	cpi	r21, 0xFF	; 255
    9634:	71 f0       	breq	.+28     	; 0x9652 <__fp_splitA+0x1a>
    9636:	47 95       	ror	r20

00009638 <__fp_splitA>:
    9638:	88 0f       	add	r24, r24
    963a:	97 fb       	bst	r25, 7
    963c:	99 1f       	adc	r25, r25
    963e:	61 f0       	breq	.+24     	; 0x9658 <__fp_splitA+0x20>
    9640:	9f 3f       	cpi	r25, 0xFF	; 255
    9642:	79 f0       	breq	.+30     	; 0x9662 <__fp_splitA+0x2a>
    9644:	87 95       	ror	r24
    9646:	08 95       	ret
    9648:	12 16       	cp	r1, r18
    964a:	13 06       	cpc	r1, r19
    964c:	14 06       	cpc	r1, r20
    964e:	55 1f       	adc	r21, r21
    9650:	f2 cf       	rjmp	.-28     	; 0x9636 <__fp_split3+0xe>
    9652:	46 95       	lsr	r20
    9654:	f1 df       	rcall	.-30     	; 0x9638 <__fp_splitA>
    9656:	08 c0       	rjmp	.+16     	; 0x9668 <__fp_splitA+0x30>
    9658:	16 16       	cp	r1, r22
    965a:	17 06       	cpc	r1, r23
    965c:	18 06       	cpc	r1, r24
    965e:	99 1f       	adc	r25, r25
    9660:	f1 cf       	rjmp	.-30     	; 0x9644 <__fp_splitA+0xc>
    9662:	86 95       	lsr	r24
    9664:	71 05       	cpc	r23, r1
    9666:	61 05       	cpc	r22, r1
    9668:	08 94       	sec
    966a:	08 95       	ret

0000966c <__fp_zero>:
    966c:	e8 94       	clt

0000966e <__fp_szero>:
    966e:	bb 27       	eor	r27, r27
    9670:	66 27       	eor	r22, r22
    9672:	77 27       	eor	r23, r23
    9674:	cb 01       	movw	r24, r22
    9676:	97 f9       	bld	r25, 7
    9678:	08 95       	ret

0000967a <__gesf2>:
    967a:	8a df       	rcall	.-236    	; 0x9590 <__fp_cmp>
    967c:	08 f4       	brcc	.+2      	; 0x9680 <__gesf2+0x6>
    967e:	8f ef       	ldi	r24, 0xFF	; 255
    9680:	08 95       	ret

00009682 <__mulsf3>:
    9682:	0b d0       	rcall	.+22     	; 0x969a <__mulsf3x>
    9684:	c0 cf       	rjmp	.-128    	; 0x9606 <__fp_round>
    9686:	b1 df       	rcall	.-158    	; 0x95ea <__fp_pscA>
    9688:	28 f0       	brcs	.+10     	; 0x9694 <__mulsf3+0x12>
    968a:	b6 df       	rcall	.-148    	; 0x95f8 <__fp_pscB>
    968c:	18 f0       	brcs	.+6      	; 0x9694 <__mulsf3+0x12>
    968e:	95 23       	and	r25, r21
    9690:	09 f0       	breq	.+2      	; 0x9694 <__mulsf3+0x12>
    9692:	a2 cf       	rjmp	.-188    	; 0x95d8 <__fp_inf>
    9694:	a7 cf       	rjmp	.-178    	; 0x95e4 <__fp_nan>
    9696:	11 24       	eor	r1, r1
    9698:	ea cf       	rjmp	.-44     	; 0x966e <__fp_szero>

0000969a <__mulsf3x>:
    969a:	c6 df       	rcall	.-116    	; 0x9628 <__fp_split3>
    969c:	a0 f3       	brcs	.-24     	; 0x9686 <__mulsf3+0x4>

0000969e <__mulsf3_pse>:
    969e:	95 9f       	mul	r25, r21
    96a0:	d1 f3       	breq	.-12     	; 0x9696 <__mulsf3+0x14>
    96a2:	95 0f       	add	r25, r21
    96a4:	50 e0       	ldi	r21, 0x00	; 0
    96a6:	55 1f       	adc	r21, r21
    96a8:	62 9f       	mul	r22, r18
    96aa:	f0 01       	movw	r30, r0
    96ac:	72 9f       	mul	r23, r18
    96ae:	bb 27       	eor	r27, r27
    96b0:	f0 0d       	add	r31, r0
    96b2:	b1 1d       	adc	r27, r1
    96b4:	63 9f       	mul	r22, r19
    96b6:	aa 27       	eor	r26, r26
    96b8:	f0 0d       	add	r31, r0
    96ba:	b1 1d       	adc	r27, r1
    96bc:	aa 1f       	adc	r26, r26
    96be:	64 9f       	mul	r22, r20
    96c0:	66 27       	eor	r22, r22
    96c2:	b0 0d       	add	r27, r0
    96c4:	a1 1d       	adc	r26, r1
    96c6:	66 1f       	adc	r22, r22
    96c8:	82 9f       	mul	r24, r18
    96ca:	22 27       	eor	r18, r18
    96cc:	b0 0d       	add	r27, r0
    96ce:	a1 1d       	adc	r26, r1
    96d0:	62 1f       	adc	r22, r18
    96d2:	73 9f       	mul	r23, r19
    96d4:	b0 0d       	add	r27, r0
    96d6:	a1 1d       	adc	r26, r1
    96d8:	62 1f       	adc	r22, r18
    96da:	83 9f       	mul	r24, r19
    96dc:	a0 0d       	add	r26, r0
    96de:	61 1d       	adc	r22, r1
    96e0:	22 1f       	adc	r18, r18
    96e2:	74 9f       	mul	r23, r20
    96e4:	33 27       	eor	r19, r19
    96e6:	a0 0d       	add	r26, r0
    96e8:	61 1d       	adc	r22, r1
    96ea:	23 1f       	adc	r18, r19
    96ec:	84 9f       	mul	r24, r20
    96ee:	60 0d       	add	r22, r0
    96f0:	21 1d       	adc	r18, r1
    96f2:	82 2f       	mov	r24, r18
    96f4:	76 2f       	mov	r23, r22
    96f6:	6a 2f       	mov	r22, r26
    96f8:	11 24       	eor	r1, r1
    96fa:	9f 57       	subi	r25, 0x7F	; 127
    96fc:	50 40       	sbci	r21, 0x00	; 0
    96fe:	8a f0       	brmi	.+34     	; 0x9722 <__mulsf3_pse+0x84>
    9700:	e1 f0       	breq	.+56     	; 0x973a <__mulsf3_pse+0x9c>
    9702:	88 23       	and	r24, r24
    9704:	4a f0       	brmi	.+18     	; 0x9718 <__mulsf3_pse+0x7a>
    9706:	ee 0f       	add	r30, r30
    9708:	ff 1f       	adc	r31, r31
    970a:	bb 1f       	adc	r27, r27
    970c:	66 1f       	adc	r22, r22
    970e:	77 1f       	adc	r23, r23
    9710:	88 1f       	adc	r24, r24
    9712:	91 50       	subi	r25, 0x01	; 1
    9714:	50 40       	sbci	r21, 0x00	; 0
    9716:	a9 f7       	brne	.-22     	; 0x9702 <__mulsf3_pse+0x64>
    9718:	9e 3f       	cpi	r25, 0xFE	; 254
    971a:	51 05       	cpc	r21, r1
    971c:	70 f0       	brcs	.+28     	; 0x973a <__mulsf3_pse+0x9c>
    971e:	5c cf       	rjmp	.-328    	; 0x95d8 <__fp_inf>
    9720:	a6 cf       	rjmp	.-180    	; 0x966e <__fp_szero>
    9722:	5f 3f       	cpi	r21, 0xFF	; 255
    9724:	ec f3       	brlt	.-6      	; 0x9720 <__mulsf3_pse+0x82>
    9726:	98 3e       	cpi	r25, 0xE8	; 232
    9728:	dc f3       	brlt	.-10     	; 0x9720 <__mulsf3_pse+0x82>
    972a:	86 95       	lsr	r24
    972c:	77 95       	ror	r23
    972e:	67 95       	ror	r22
    9730:	b7 95       	ror	r27
    9732:	f7 95       	ror	r31
    9734:	e7 95       	ror	r30
    9736:	9f 5f       	subi	r25, 0xFF	; 255
    9738:	c1 f7       	brne	.-16     	; 0x972a <__mulsf3_pse+0x8c>
    973a:	fe 2b       	or	r31, r30
    973c:	88 0f       	add	r24, r24
    973e:	91 1d       	adc	r25, r1
    9740:	96 95       	lsr	r25
    9742:	87 95       	ror	r24
    9744:	97 f9       	bld	r25, 7
    9746:	08 95       	ret

00009748 <__udivmodhi4>:
    9748:	aa 1b       	sub	r26, r26
    974a:	bb 1b       	sub	r27, r27
    974c:	51 e1       	ldi	r21, 0x11	; 17
    974e:	07 c0       	rjmp	.+14     	; 0x975e <__udivmodhi4_ep>

00009750 <__udivmodhi4_loop>:
    9750:	aa 1f       	adc	r26, r26
    9752:	bb 1f       	adc	r27, r27
    9754:	a6 17       	cp	r26, r22
    9756:	b7 07       	cpc	r27, r23
    9758:	10 f0       	brcs	.+4      	; 0x975e <__udivmodhi4_ep>
    975a:	a6 1b       	sub	r26, r22
    975c:	b7 0b       	sbc	r27, r23

0000975e <__udivmodhi4_ep>:
    975e:	88 1f       	adc	r24, r24
    9760:	99 1f       	adc	r25, r25
    9762:	5a 95       	dec	r21
    9764:	a9 f7       	brne	.-22     	; 0x9750 <__udivmodhi4_loop>
    9766:	80 95       	com	r24
    9768:	90 95       	com	r25
    976a:	bc 01       	movw	r22, r24
    976c:	cd 01       	movw	r24, r26
    976e:	08 95       	ret

00009770 <__divmodhi4>:
    9770:	97 fb       	bst	r25, 7
    9772:	07 2e       	mov	r0, r23
    9774:	16 f4       	brtc	.+4      	; 0x977a <__divmodhi4+0xa>
    9776:	00 94       	com	r0
    9778:	07 d0       	rcall	.+14     	; 0x9788 <__divmodhi4_neg1>
    977a:	77 fd       	sbrc	r23, 7
    977c:	09 d0       	rcall	.+18     	; 0x9790 <__divmodhi4_neg2>
    977e:	0e 94 a4 4b 	call	0x9748	; 0x9748 <__udivmodhi4>
    9782:	07 fc       	sbrc	r0, 7
    9784:	05 d0       	rcall	.+10     	; 0x9790 <__divmodhi4_neg2>
    9786:	3e f4       	brtc	.+14     	; 0x9796 <__divmodhi4_exit>

00009788 <__divmodhi4_neg1>:
    9788:	90 95       	com	r25
    978a:	81 95       	neg	r24
    978c:	9f 4f       	sbci	r25, 0xFF	; 255
    978e:	08 95       	ret

00009790 <__divmodhi4_neg2>:
    9790:	70 95       	com	r23
    9792:	61 95       	neg	r22
    9794:	7f 4f       	sbci	r23, 0xFF	; 255

00009796 <__divmodhi4_exit>:
    9796:	08 95       	ret

00009798 <__udivmodsi4>:
    9798:	a1 e2       	ldi	r26, 0x21	; 33
    979a:	1a 2e       	mov	r1, r26
    979c:	aa 1b       	sub	r26, r26
    979e:	bb 1b       	sub	r27, r27
    97a0:	fd 01       	movw	r30, r26
    97a2:	0d c0       	rjmp	.+26     	; 0x97be <__udivmodsi4_ep>

000097a4 <__udivmodsi4_loop>:
    97a4:	aa 1f       	adc	r26, r26
    97a6:	bb 1f       	adc	r27, r27
    97a8:	ee 1f       	adc	r30, r30
    97aa:	ff 1f       	adc	r31, r31
    97ac:	a2 17       	cp	r26, r18
    97ae:	b3 07       	cpc	r27, r19
    97b0:	e4 07       	cpc	r30, r20
    97b2:	f5 07       	cpc	r31, r21
    97b4:	20 f0       	brcs	.+8      	; 0x97be <__udivmodsi4_ep>
    97b6:	a2 1b       	sub	r26, r18
    97b8:	b3 0b       	sbc	r27, r19
    97ba:	e4 0b       	sbc	r30, r20
    97bc:	f5 0b       	sbc	r31, r21

000097be <__udivmodsi4_ep>:
    97be:	66 1f       	adc	r22, r22
    97c0:	77 1f       	adc	r23, r23
    97c2:	88 1f       	adc	r24, r24
    97c4:	99 1f       	adc	r25, r25
    97c6:	1a 94       	dec	r1
    97c8:	69 f7       	brne	.-38     	; 0x97a4 <__udivmodsi4_loop>
    97ca:	60 95       	com	r22
    97cc:	70 95       	com	r23
    97ce:	80 95       	com	r24
    97d0:	90 95       	com	r25
    97d2:	9b 01       	movw	r18, r22
    97d4:	ac 01       	movw	r20, r24
    97d6:	bd 01       	movw	r22, r26
    97d8:	cf 01       	movw	r24, r30
    97da:	08 95       	ret

000097dc <__divmodsi4>:
    97dc:	05 2e       	mov	r0, r21
    97de:	97 fb       	bst	r25, 7
    97e0:	1e f4       	brtc	.+6      	; 0x97e8 <__divmodsi4+0xc>
    97e2:	00 94       	com	r0
    97e4:	0e 94 05 4c 	call	0x980a	; 0x980a <__negsi2>
    97e8:	57 fd       	sbrc	r21, 7
    97ea:	07 d0       	rcall	.+14     	; 0x97fa <__divmodsi4_neg2>
    97ec:	0e 94 cc 4b 	call	0x9798	; 0x9798 <__udivmodsi4>
    97f0:	07 fc       	sbrc	r0, 7
    97f2:	03 d0       	rcall	.+6      	; 0x97fa <__divmodsi4_neg2>
    97f4:	4e f4       	brtc	.+18     	; 0x9808 <__divmodsi4_exit>
    97f6:	0c 94 05 4c 	jmp	0x980a	; 0x980a <__negsi2>

000097fa <__divmodsi4_neg2>:
    97fa:	50 95       	com	r21
    97fc:	40 95       	com	r20
    97fe:	30 95       	com	r19
    9800:	21 95       	neg	r18
    9802:	3f 4f       	sbci	r19, 0xFF	; 255
    9804:	4f 4f       	sbci	r20, 0xFF	; 255
    9806:	5f 4f       	sbci	r21, 0xFF	; 255

00009808 <__divmodsi4_exit>:
    9808:	08 95       	ret

0000980a <__negsi2>:
    980a:	90 95       	com	r25
    980c:	80 95       	com	r24
    980e:	70 95       	com	r23
    9810:	61 95       	neg	r22
    9812:	7f 4f       	sbci	r23, 0xFF	; 255
    9814:	8f 4f       	sbci	r24, 0xFF	; 255
    9816:	9f 4f       	sbci	r25, 0xFF	; 255
    9818:	08 95       	ret

0000981a <__tablejump2__>:
    981a:	ee 0f       	add	r30, r30
    981c:	ff 1f       	adc	r31, r31

0000981e <__tablejump__>:
    981e:	05 90       	lpm	r0, Z+
    9820:	f4 91       	lpm	r31, Z
    9822:	e0 2d       	mov	r30, r0
    9824:	09 94       	ijmp

00009826 <__mulhisi3>:
    9826:	0e 94 1b 4c 	call	0x9836	; 0x9836 <__umulhisi3>
    982a:	33 23       	and	r19, r19
    982c:	12 f4       	brpl	.+4      	; 0x9832 <__mulhisi3+0xc>
    982e:	8a 1b       	sub	r24, r26
    9830:	9b 0b       	sbc	r25, r27
    9832:	0c 94 2c 4c 	jmp	0x9858	; 0x9858 <__usmulhisi3_tail>

00009836 <__umulhisi3>:
    9836:	a2 9f       	mul	r26, r18
    9838:	b0 01       	movw	r22, r0
    983a:	b3 9f       	mul	r27, r19
    983c:	c0 01       	movw	r24, r0
    983e:	a3 9f       	mul	r26, r19
    9840:	70 0d       	add	r23, r0
    9842:	81 1d       	adc	r24, r1
    9844:	11 24       	eor	r1, r1
    9846:	91 1d       	adc	r25, r1
    9848:	b2 9f       	mul	r27, r18
    984a:	70 0d       	add	r23, r0
    984c:	81 1d       	adc	r24, r1
    984e:	11 24       	eor	r1, r1
    9850:	91 1d       	adc	r25, r1
    9852:	08 95       	ret

00009854 <__usmulhisi3>:
    9854:	0e 94 1b 4c 	call	0x9836	; 0x9836 <__umulhisi3>

00009858 <__usmulhisi3_tail>:
    9858:	b7 ff       	sbrs	r27, 7
    985a:	08 95       	ret
    985c:	82 1b       	sub	r24, r18
    985e:	93 0b       	sbc	r25, r19
    9860:	08 95       	ret

00009862 <__muluhisi3>:
    9862:	0e 94 1b 4c 	call	0x9836	; 0x9836 <__umulhisi3>
    9866:	a5 9f       	mul	r26, r21
    9868:	90 0d       	add	r25, r0
    986a:	b4 9f       	mul	r27, r20
    986c:	90 0d       	add	r25, r0
    986e:	a4 9f       	mul	r26, r20
    9870:	80 0d       	add	r24, r0
    9872:	91 1d       	adc	r25, r1
    9874:	11 24       	eor	r1, r1
    9876:	08 95       	ret

00009878 <__mulshisi3>:
    9878:	b7 ff       	sbrs	r27, 7
    987a:	0c 94 31 4c 	jmp	0x9862	; 0x9862 <__muluhisi3>

0000987e <__mulohisi3>:
    987e:	0e 94 31 4c 	call	0x9862	; 0x9862 <__muluhisi3>
    9882:	82 1b       	sub	r24, r18
    9884:	93 0b       	sbc	r25, r19
    9886:	08 95       	ret

00009888 <memcpy_P>:
    9888:	fb 01       	movw	r30, r22
    988a:	dc 01       	movw	r26, r24
    988c:	02 c0       	rjmp	.+4      	; 0x9892 <memcpy_P+0xa>
    988e:	05 90       	lpm	r0, Z+
    9890:	0d 92       	st	X+, r0
    9892:	41 50       	subi	r20, 0x01	; 1
    9894:	50 40       	sbci	r21, 0x00	; 0
    9896:	d8 f7       	brcc	.-10     	; 0x988e <memcpy_P+0x6>
    9898:	08 95       	ret

0000989a <memmove>:
    989a:	68 17       	cp	r22, r24
    989c:	79 07       	cpc	r23, r25
    989e:	68 f4       	brcc	.+26     	; 0x98ba <memmove+0x20>
    98a0:	fb 01       	movw	r30, r22
    98a2:	dc 01       	movw	r26, r24
    98a4:	e4 0f       	add	r30, r20
    98a6:	f5 1f       	adc	r31, r21
    98a8:	a4 0f       	add	r26, r20
    98aa:	b5 1f       	adc	r27, r21
    98ac:	02 c0       	rjmp	.+4      	; 0x98b2 <memmove+0x18>
    98ae:	02 90       	ld	r0, -Z
    98b0:	0e 92       	st	-X, r0
    98b2:	41 50       	subi	r20, 0x01	; 1
    98b4:	50 40       	sbci	r21, 0x00	; 0
    98b6:	d8 f7       	brcc	.-10     	; 0x98ae <memmove+0x14>
    98b8:	08 95       	ret
    98ba:	0c 94 aa 4c 	jmp	0x9954	; 0x9954 <memcpy>

000098be <__itoa_ncheck>:
    98be:	bb 27       	eor	r27, r27
    98c0:	4a 30       	cpi	r20, 0x0A	; 10
    98c2:	31 f4       	brne	.+12     	; 0x98d0 <__itoa_ncheck+0x12>
    98c4:	99 23       	and	r25, r25
    98c6:	22 f4       	brpl	.+8      	; 0x98d0 <__itoa_ncheck+0x12>
    98c8:	bd e2       	ldi	r27, 0x2D	; 45
    98ca:	90 95       	com	r25
    98cc:	81 95       	neg	r24
    98ce:	9f 4f       	sbci	r25, 0xFF	; 255
    98d0:	0c 94 6b 4c 	jmp	0x98d6	; 0x98d6 <__utoa_common>

000098d4 <__utoa_ncheck>:
    98d4:	bb 27       	eor	r27, r27

000098d6 <__utoa_common>:
    98d6:	fb 01       	movw	r30, r22
    98d8:	55 27       	eor	r21, r21
    98da:	aa 27       	eor	r26, r26
    98dc:	88 0f       	add	r24, r24
    98de:	99 1f       	adc	r25, r25
    98e0:	aa 1f       	adc	r26, r26
    98e2:	a4 17       	cp	r26, r20
    98e4:	10 f0       	brcs	.+4      	; 0x98ea <__utoa_common+0x14>
    98e6:	a4 1b       	sub	r26, r20
    98e8:	83 95       	inc	r24
    98ea:	50 51       	subi	r21, 0x10	; 16
    98ec:	b9 f7       	brne	.-18     	; 0x98dc <__utoa_common+0x6>
    98ee:	a0 5d       	subi	r26, 0xD0	; 208
    98f0:	aa 33       	cpi	r26, 0x3A	; 58
    98f2:	08 f0       	brcs	.+2      	; 0x98f6 <__utoa_common+0x20>
    98f4:	a9 5d       	subi	r26, 0xD9	; 217
    98f6:	a1 93       	st	Z+, r26
    98f8:	00 97       	sbiw	r24, 0x00	; 0
    98fa:	79 f7       	brne	.-34     	; 0x98da <__utoa_common+0x4>
    98fc:	b1 11       	cpse	r27, r1
    98fe:	b1 93       	st	Z+, r27
    9900:	11 92       	st	Z+, r1
    9902:	cb 01       	movw	r24, r22
    9904:	0c 94 b3 4c 	jmp	0x9966	; 0x9966 <strrev>

00009908 <__eerd_block_m644pa>:
    9908:	dc 01       	movw	r26, r24
    990a:	cb 01       	movw	r24, r22

0000990c <__eerd_blraw_m644pa>:
    990c:	fc 01       	movw	r30, r24
    990e:	f9 99       	sbic	0x1f, 1	; 31
    9910:	fe cf       	rjmp	.-4      	; 0x990e <__eerd_blraw_m644pa+0x2>
    9912:	06 c0       	rjmp	.+12     	; 0x9920 <__eerd_blraw_m644pa+0x14>
    9914:	f2 bd       	out	0x22, r31	; 34
    9916:	e1 bd       	out	0x21, r30	; 33
    9918:	f8 9a       	sbi	0x1f, 0	; 31
    991a:	31 96       	adiw	r30, 0x01	; 1
    991c:	00 b4       	in	r0, 0x20	; 32
    991e:	0d 92       	st	X+, r0
    9920:	41 50       	subi	r20, 0x01	; 1
    9922:	50 40       	sbci	r21, 0x00	; 0
    9924:	b8 f7       	brcc	.-18     	; 0x9914 <__eerd_blraw_m644pa+0x8>
    9926:	08 95       	ret

00009928 <__eerd_byte_m644pa>:
    9928:	f9 99       	sbic	0x1f, 1	; 31
    992a:	fe cf       	rjmp	.-4      	; 0x9928 <__eerd_byte_m644pa>
    992c:	92 bd       	out	0x22, r25	; 34
    992e:	81 bd       	out	0x21, r24	; 33
    9930:	f8 9a       	sbi	0x1f, 0	; 31
    9932:	99 27       	eor	r25, r25
    9934:	80 b5       	in	r24, 0x20	; 32
    9936:	08 95       	ret

00009938 <__eewr_byte_m644pa>:
    9938:	26 2f       	mov	r18, r22

0000993a <__eewr_r18_m644pa>:
    993a:	f9 99       	sbic	0x1f, 1	; 31
    993c:	fe cf       	rjmp	.-4      	; 0x993a <__eewr_r18_m644pa>
    993e:	1f ba       	out	0x1f, r1	; 31
    9940:	92 bd       	out	0x22, r25	; 34
    9942:	81 bd       	out	0x21, r24	; 33
    9944:	20 bd       	out	0x20, r18	; 32
    9946:	0f b6       	in	r0, 0x3f	; 63
    9948:	f8 94       	cli
    994a:	fa 9a       	sbi	0x1f, 2	; 31
    994c:	f9 9a       	sbi	0x1f, 1	; 31
    994e:	0f be       	out	0x3f, r0	; 63
    9950:	01 96       	adiw	r24, 0x01	; 1
    9952:	08 95       	ret

00009954 <memcpy>:
    9954:	fb 01       	movw	r30, r22
    9956:	dc 01       	movw	r26, r24
    9958:	02 c0       	rjmp	.+4      	; 0x995e <memcpy+0xa>
    995a:	01 90       	ld	r0, Z+
    995c:	0d 92       	st	X+, r0
    995e:	41 50       	subi	r20, 0x01	; 1
    9960:	50 40       	sbci	r21, 0x00	; 0
    9962:	d8 f7       	brcc	.-10     	; 0x995a <memcpy+0x6>
    9964:	08 95       	ret

00009966 <strrev>:
    9966:	dc 01       	movw	r26, r24
    9968:	fc 01       	movw	r30, r24
    996a:	67 2f       	mov	r22, r23
    996c:	71 91       	ld	r23, Z+
    996e:	77 23       	and	r23, r23
    9970:	e1 f7       	brne	.-8      	; 0x996a <strrev+0x4>
    9972:	32 97       	sbiw	r30, 0x02	; 2
    9974:	04 c0       	rjmp	.+8      	; 0x997e <strrev+0x18>
    9976:	7c 91       	ld	r23, X
    9978:	6d 93       	st	X+, r22
    997a:	70 83       	st	Z, r23
    997c:	62 91       	ld	r22, -Z
    997e:	ae 17       	cp	r26, r30
    9980:	bf 07       	cpc	r27, r31
    9982:	c8 f3       	brcs	.-14     	; 0x9976 <strrev+0x10>
    9984:	08 95       	ret

00009986 <_exit>:
    9986:	f8 94       	cli

00009988 <__stop_program>:
    9988:	ff cf       	rjmp	.-2      	; 0x9988 <__stop_program>
