
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000416  00800100  00009bf8  00009c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009bf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000348  00800516  00800516  0000a0a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000a0a2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000680  00000000  00000000  0000a0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000148a8  00000000  00000000  0000a758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000361d  00000000  00000000  0001f000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000041f0  00000000  00000000  0002261d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000014b8  00000000  00000000  00026810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000291a  00000000  00000000  00027cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009441  00000000  00000000  0002a5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000568  00000000  00000000  00033a23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__ctors_end>
       4:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__vector_1>
       8:	0c 94 09 2e 	jmp	0x5c12	; 0x5c12 <__vector_2>
       c:	0c 94 f4 2e 	jmp	0x5de8	; 0x5de8 <__vector_3>
      10:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      14:	0c 94 b3 2e 	jmp	0x5d66	; 0x5d66 <__vector_5>
      18:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      1c:	0c 94 7a 2e 	jmp	0x5cf4	; 0x5cf4 <__vector_7>
      20:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      24:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      28:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      2c:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      30:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      34:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      38:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      3c:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      40:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      44:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      48:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__vector_18>
      4c:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      50:	0c 94 b0 2f 	jmp	0x5f60	; 0x5f60 <__vector_20>
      54:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      58:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      5c:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      60:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      64:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      68:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      6c:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      70:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      74:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      78:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__bad_interrupt>
      7c:	80 1d       	adc	r24, r0
      7e:	e9 1d       	adc	r30, r9
      80:	e9 1d       	adc	r30, r9
      82:	91 1d       	adc	r25, r1
      84:	9e 1d       	adc	r25, r14
      86:	a8 1d       	adc	r26, r8
      88:	a4 1d       	adc	r26, r4
      8a:	b4 1d       	adc	r27, r4
      8c:	c0 1d       	adc	r28, r0
      8e:	c4 1d       	adc	r28, r4
      90:	d0 1d       	adc	r29, r0
      92:	15 37       	cpi	r17, 0x75	; 117
      94:	17 37       	cpi	r17, 0x77	; 119
      96:	1a 37       	cpi	r17, 0x7A	; 122
      98:	1c 37       	cpi	r17, 0x7C	; 124
      9a:	1e 37       	cpi	r17, 0x7E	; 126
      9c:	20 37       	cpi	r18, 0x70	; 112
      9e:	22 37       	cpi	r18, 0x72	; 114
      a0:	24 37       	cpi	r18, 0x74	; 116
      a2:	27 37       	cpi	r18, 0x77	; 119
      a4:	29 37       	cpi	r18, 0x79	; 121
      a6:	2b 37       	cpi	r18, 0x7B	; 123
      a8:	2d 37       	cpi	r18, 0x7D	; 125
      aa:	2f 37       	cpi	r18, 0x7F	; 127
      ac:	31 37       	cpi	r19, 0x71	; 113
      ae:	33 37       	cpi	r19, 0x73	; 115
      b0:	35 37       	cpi	r19, 0x75	; 117
      b2:	38 37       	cpi	r19, 0x78	; 120
      b4:	3a 37       	cpi	r19, 0x7A	; 122
      b6:	3c 37       	cpi	r19, 0x7C	; 124
      b8:	28 3b       	cpi	r18, 0xB8	; 184
      ba:	0c 3b       	cpi	r16, 0xBC	; 188
      bc:	0f 3b       	cpi	r16, 0xBF	; 191
      be:	12 3b       	cpi	r17, 0xB2	; 178
      c0:	15 3b       	cpi	r17, 0xB5	; 181
      c2:	18 3b       	cpi	r17, 0xB8	; 184
      c4:	1b 3b       	cpi	r17, 0xBB	; 187
      c6:	1e 3b       	cpi	r17, 0xBE	; 190
      c8:	21 3b       	cpi	r18, 0xB1	; 177

000000ca <Acc_Pol>:
      ca:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      da:	ff ff                                               ..

000000dc <ACC_RPY_Order>:
      dc:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      ec:	02 01                                               ..

000000ee <FUTABA>:
      ee:	01 02 00 03 04 05 06 07                             ........

000000f6 <JR>:
      f6:	00 01 02 03 04 05 06 07                             ........

000000fe <Trans_Matrix>:
      fe:	05 02 06 01 05 08 03 07 05                          .........

00000107 <Wingdings>:
     107:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     117:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     127:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     137:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     147:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     157:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     167:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000171 <Verdana14>:
     171:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     181:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     191:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     1a1:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     1b1:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1c1:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1d1:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1e1:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1f1:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     201:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     211:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     221:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     231:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     241:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     251:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     261:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     271:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     281:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     291:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     2a1:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     2b1:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2c1:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2d1:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2e1:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2f1:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     301:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     311:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     321:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     331:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     341:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     351:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     361:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     371:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     381:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     391:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     3a1:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     3b1:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3c1:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3d1:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3e1:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3f1:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     401:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     411:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     421:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     431:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     441:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     451:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     461:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     471:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     481:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     491:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     4a1:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     4b1:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4c1:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4d1:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4e1:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4f1:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     501:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     511:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     521:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     531:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     541:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     551:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     561:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     571:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     581:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     591:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     5a1:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     5b1:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5c1:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5d1:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5e1:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5f1:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     601:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     611:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     621:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     631:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     641:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     651:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     661:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     671:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     681:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     691:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     6a1:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     6b1:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6c1:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6d1:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6e1:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6f1:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     701:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     711:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     721:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     731:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     741:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     751:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     761:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     771:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     781:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     791:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     7a1:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     7b1:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7c1:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7d1:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7e1:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7f1:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     801:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     811:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     821:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     831:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     841:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     851:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     861:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     871:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     881:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     891:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     8a1:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     8b1:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8c1:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8d1:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8e1:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8f1:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     901:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     911:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     921:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     931:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     941:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     951:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     961:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     971:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     981:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     991:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     9a1:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     9b1:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9c1:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9d1:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9e1:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9f1:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     a01:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     a11:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a1f <Verdana8>:
     a1f:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a2f:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a3f:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a4f:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a5f:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a6f:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a7f:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a8f:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a9f:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     aaf:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     abf:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     acf:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     adf:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     aef:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     aff:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     b0f:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b1f:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b2f:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b3f:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b4f:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b5f:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b6f:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b7f:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b8f:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b9f:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     baf:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bbf:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bcf:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bdf:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bef:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bff:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     c0f:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c1f:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c2f:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c3f:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c4f:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c5f:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c6f:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c7f:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c8f:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c9f:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     caf:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cbf:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     ccf:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     cdf:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cef:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     cff:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     d0f:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d1f:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d2f:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d3f:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d4f:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d5f:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d6f:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d7f:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d8f:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d9f:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     daf:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dbf:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dcf:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     ddf:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     def:	01                                                  .

00000df0 <lcd_commmands>:
     df0:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dfe <pagemap>:
     dfe:	07 06 05 04 03 02 01 00                             ........

00000e06 <text_menu>:
     e06:	b4 15 ac 10 a7 10 a2 10 9d 10 98 10 93 10 8e 10     ................
     e16:	89 10 13 18 0b 18 11 18 0f 18 0d 18 06 18 01 18     ................
     e26:	fc 17 f7 17 27 12 47 12 42 12 3c 12 79 15 1d 18     ....'.G.B.<.y...
     e36:	15 18 83 16 a0 16 9b 16 95 16 91 16 8d 16 b1 10     ................
     e46:	8d 12 84 12 95 12 7d 12 78 12 d2 10 cd 10 c8 10     ......}.x.......
     e56:	c3 10 be 10 b8 10 b2 10 64 12 b1 10 c1 12 b9 12     ........d.......
     e66:	d0 14 cb 14 c8 14 be 14 b4 14 14 11 0c 11 07 11     ................
     e76:	ac 12 a7 12 9e 12 fd 11 88 16 f1 11 68 15 64 15     ............h.d.
     e86:	5e 15 55 15 4e 15 b1 10 b4 15 b1 15 2c 11 33 11     ^.U.N.......,.3.
     e96:	22 11 b1 10 b1 10 54 12 4d 12 e6 17 d4 17 c1 17     ".....T.M.......
     ea6:	af 17 99 17 8a 17 76 17 62 17 54 17 45 17 36 17     ......v.b.T.E.6.
     eb6:	27 17 18 17 09 17 fa 16 eb 16 d7 16 be 16 a5 16     '...............
     ec6:	b1 10 b1 10 d2 10 cd 10 e3 10 e8 10 ed 10 f2 10     ................
     ed6:	64 12 95 12 8d 12 84 12 7d 12 78 12 73 12 6e 12     d.......}.x.s.n.
     ee6:	69 12 64 12 5d 12 57 12 45 15 3e 15 30 12 1a 11     i.d.].W.E.>.0...
     ef6:	07 11 b9 11 ad 11 b1 10 6a 11 61 11 58 11 54 11     ........j.a.X.T.
     f06:	4b 11 43 11 b1 10 b1 10 b1 10 22 18 34 12 d2 11     K.C.......".4...
     f16:	c4 11 bf 11 a5 11 9a 11 b1 10 3c 11 33 11 b1 10     ..........<.3...
     f26:	b1 10 b1 10 9b 16 95 16 91 16 a8 15 08 15 9e 15     ................
     f36:	93 15 84 15 79 15 6d 15 b1 10 b1 10 31 15 27 15     ....y.m.....1.'.
     f46:	1f 15 12 15 db 14 d6 10 fe 14 f4 14 e8 14 d3 14     ................
     f56:	b1 10 b1 10 6f 16 67 16 59 16 4c 16 3e 16 33 16     ....o.g.Y.L.>.3.
     f66:	2a 16 21 16 12 16 04 16 f5 15 e9 15 e2 15 db 15     *.!.............
     f76:	ce 15 c2 15 b8 15 77 16 b1 10 b1 10 ac 14 a1 14     ......w.........
     f86:	90 14 83 14 78 14 68 14 58 14 49 14 39 14 29 14     ....x.h.X.I.9.).
     f96:	19 14 09 14 f9 13 e9 13 db 13 cd 13 be 13 af 13     ................
     fa6:	a2 13 95 13 89 13 7d 13 71 13 64 13 5a 13 50 13     ......}.q.d.Z.P.
     fb6:	43 13 38 13 2b 13 20 13 13 13 38 13 06 13 20 13     C.8.+. ...8... .
     fc6:	b1 10 b1 10 c1 12 b9 12 b3 12 b1 10 95 11 90 11     ................
     fd6:	8b 11 86 11 81 11 7c 11 77 11 72 11 95 12 8d 12     ......|.w.r.....
     fe6:	84 12 7d 12 78 12 73 12 6e 12 69 12 fd 12 f3 12     ..}.x.s.n.i.....
     ff6:	eb 12 e3 12 da 12 d2 12 c9 12 64 12 c1 12 b9 12     ..........d.....
    1006:	b3 12 b1 10 b1 10 e8 11 df 11 1d 12 17 12 0b 12     ................
    1016:	3e 18 38 18 a8 15 2f 18 2d 18 2b 18 02 11 fe 10     >.8.../.-.+.....
    1026:	f7 10 7c 10 75 10 6b 10 83 10 63 10 b1 10 b1 10     ..|.u.k...c.....
    1036:	f1 17 49 10 3c 10                                   ..I.<.

0000103c <WARNING_1>:
    103c:	52 45 4d 4f 56 45 20 50 52 4f 50 53 00              REMOVE PROPS.

00001049 <WARNING_0>:
    1049:	57 41 52 4e 49 4e 47 20 2d 20 45 72 61 73 65 73     WARNING - Erases
    1059:	20 73 65 74 74 69 6e 67 73 00                        settings.

00001063 <PRESET_4>:
    1063:	4f 70 74 69 6f 6e 73 00                             Options.

0000106b <PRESET_3>:
    106b:	54 72 69 63 6f 70 74 65 72 00                       Tricopter.

00001075 <PRESET_2>:
    1075:	51 75 61 64 20 50 00                                Quad P.

0000107c <PRESET_1>:
    107c:	51 75 61 64 20 58 00                                Quad X.

00001083 <PRESET_0>:
    1083:	42 6c 61 6e 6b 00                                   Blank.

00001089 <VBAT39>:
    1089:	33 2e 39 56 00                                      3.9V.

0000108e <VBAT38>:
    108e:	33 2e 38 56 00                                      3.8V.

00001093 <VBAT37>:
    1093:	33 2e 37 56 00                                      3.7V.

00001098 <VBAT36>:
    1098:	33 2e 36 56 00                                      3.6V.

0000109d <VBAT35>:
    109d:	33 2e 35 56 00                                      3.5V.

000010a2 <VBAT34>:
    10a2:	33 2e 34 56 00                                      3.4V.

000010a7 <VBAT33>:
    10a7:	33 2e 33 56 00                                      3.3V.

000010ac <VBAT32>:
    10ac:	33 2e 32 56 00                                      3.2V.

000010b1 <Dummy0>:
	...

000010b2 <MPU6050LPF7>:
    10b2:	32 36 30 48 7a 00                                   260Hz.

000010b8 <MPU6050LPF6>:
    10b8:	31 38 34 48 7a 00                                   184Hz.

000010be <MPU6050LPF5>:
    10be:	39 34 48 7a 00                                      94Hz.

000010c3 <MPU6050LPF4>:
    10c3:	34 34 48 7a 00                                      44Hz.

000010c8 <MPU6050LPF3>:
    10c8:	32 31 48 7a 00                                      21Hz.

000010cd <MPU6050LPF2>:
    10cd:	31 30 48 7a 00                                      10Hz.

000010d2 <MPU6050LPF1>:
    10d2:	35 48 7a 00                                         5Hz.

000010d6 <GeneralText10>:
    10d6:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

000010e3 <SWLPF4>:
    10e3:	31 37 48 7a 00                                      17Hz.

000010e8 <SWLPF3>:
    10e8:	32 37 48 7a 00                                      27Hz.

000010ed <SWLPF2>:
    10ed:	33 38 48 7a 00                                      38Hz.

000010f2 <SWLPF1>:
    10f2:	36 37 48 7a 00                                      67Hz.

000010f7 <Random12>:
    10f7:	73 69 67 6e 61 6c 00                                signal.

000010fe <Random11>:
    10fe:	6c 6f 77 00                                         low.

00001102 <Random10>:
    1102:	68 69 67 68 00                                      high.

00001107 <Random1>:
    1107:	48 69 67 68 00                                      High.

0000110c <Safety2>:
    110c:	41 72 6d 61 62 6c 65 00                             Armable.

00001114 <Safety1>:
    1114:	41 72 6d 65 64 00                                   Armed.

0000111a <GeneralText5>:
    111a:	53 79 6e 63 20 52 43 00                             Sync RC.

00001122 <MixerItem16>:
    1122:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

0000112c <MixerItem15>:
    112c:	53 63 61 6c 65 64 00                                Scaled.

00001133 <MixerItem12>:
    1133:	52 65 76 65 72 73 65 64 00                          Reversed.

0000113c <MixerItem11>:
    113c:	4e 6f 72 6d 61 6c 00                                Normal.

00001143 <MixerMenuItem7>:
    1143:	50 69 74 63 68 55 70 00                             PitchUp.

0000114b <MixerMenuItem6>:
    114b:	53 69 64 65 77 61 79 73 00                          Sideways.

00001154 <MixerMenuItem5>:
    1154:	41 66 74 00                                         Aft.

00001158 <MixerMenuItem4>:
    1158:	49 6e 76 65 72 74 65 64 00                          Inverted.

00001161 <MixerMenuItem3>:
    1161:	56 65 72 74 69 63 61 6c 00                          Vertical.

0000116a <MixerMenuItem2>:
    116a:	46 6f 72 77 61 72 64 00                             Forward.

00001172 <MOUT8>:
    1172:	4f 55 54 38 00                                      OUT8.

00001177 <MOUT7>:
    1177:	4f 55 54 37 00                                      OUT7.

0000117c <MOUT6>:
    117c:	4f 55 54 36 00                                      OUT6.

00001181 <MOUT5>:
    1181:	4f 55 54 35 00                                      OUT5.

00001186 <MOUT4>:
    1186:	4f 55 54 34 00                                      OUT4.

0000118b <MOUT3>:
    118b:	4f 55 54 33 00                                      OUT3.

00001190 <MOUT2>:
    1190:	4f 55 54 32 00                                      OUT2.

00001195 <MOUT1>:
    1195:	4f 55 54 31 00                                      OUT1.

0000119a <Status5>:
    119a:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

000011a5 <Status4>:
    11a5:	28 41 72 6d 65 64 29 00                             (Armed).

000011ad <Status2>:
    11ad:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

000011b9 <Status0>:
    11b9:	50 72 65 73 73 00                                   Press.

000011bf <WizardText2>:
    11bf:	44 6f 6e 65 00                                      Done.

000011c4 <WizardText1>:
    11c4:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

000011d2 <WizardText0>:
    11d2:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

000011df <PText6>:
    11df:	73 65 74 74 69 6e 67 73 00                          settings.

000011e8 <PText5>:
    11e8:	55 70 64 61 74 69 6e 67 00                          Updating.

000011f1 <PText4>:
    11f1:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

000011fd <PText3>:
    11fd:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

0000120b <PText2>:
    120b:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

00001217 <PText1>:
    1217:	52 65 73 65 74 00                                   Reset.

0000121d <PText0>:
    121d:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

00001227 <Disarmed>:
    1227:	44 69 73 61 72 6d 65 64 00                          Disarmed.

00001230 <ErrorText10>:
    1230:	4c 6f 77 00                                         Low.

00001234 <Status3>:
    1234:	42 61 74 74 65 72 79 00                             Battery.

0000123c <ErrorText7>:
    123c:	4d 6f 64 65 6c 00                                   Model.

00001242 <ErrorText6>:
    1242:	4c 6f 73 74 00                                      Lost.

00001247 <ErrorText5>:
    1247:	45 72 72 6f 72 00                                   Error.

0000124d <ErrorText4>:
    124d:	53 69 67 6e 61 6c 00                                Signal.

00001254 <ErrorText3>:
    1254:	4e 6f 00                                            No.

00001257 <ChannelRef12>:
    1257:	45 6c 65 76 2e 00                                   Elev..

0000125d <ChannelRef10>:
    125d:	54 68 72 6f 74 2e 00                                Throt..

00001264 <ChannelRef8>:
    1264:	4e 6f 6e 65 00                                      None.

00001269 <ChannelRef7>:
    1269:	41 55 58 33 00                                      AUX3.

0000126e <ChannelRef6>:
    126e:	41 55 58 32 00                                      AUX2.

00001273 <ChannelRef5>:
    1273:	41 55 58 31 00                                      AUX1.

00001278 <ChannelRef4>:
    1278:	47 65 61 72 00                                      Gear.

0000127d <ChannelRef3>:
    127d:	52 75 64 64 65 72 00                                Rudder.

00001284 <ChannelRef2>:
    1284:	45 6c 65 76 61 74 6f 72 00                          Elevator.

0000128d <ChannelRef1>:
    128d:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001295 <ChannelRef0>:
    1295:	54 68 72 6f 74 74 6c 65 00                          Throttle.

0000129e <MixerItem62>:
    129e:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

000012a7 <MixerItem61>:
    12a7:	53 69 6e 65 00                                      Sine.

000012ac <MixerItem60>:
    12ac:	4c 69 6e 65 61 72 00                                Linear.

000012b3 <MixerItem49>:
    12b3:	4d 6f 74 6f 72 00                                   Motor.

000012b9 <MixerItem41>:
    12b9:	44 2e 53 65 72 76 6f 00                             D.Servo.

000012c1 <MixerItem40>:
    12c1:	41 2e 53 65 72 76 6f 00                             A.Servo.

000012c9 <MixerItem81>:
    12c9:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

000012d2 <MixerItem80>:
    12d2:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

000012da <MixerItem74>:
    12da:	41 63 63 50 69 74 63 68 00                          AccPitch.

000012e3 <MixerItem73>:
    12e3:	41 63 63 52 6f 6c 6c 00                             AccRoll.

000012eb <MixerItem72>:
    12eb:	47 79 72 6f 59 61 77 00                             GyroYaw.

000012f3 <MixerItem71>:
    12f3:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000012fd <MixerItem70>:
    12fd:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001306 <MixerItem31>:
    1306:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

00001313 <MixerItem21>:
    1313:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

00001320 <MixerItem30>:
    1320:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

0000132b <MixerItem29>:
    132b:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

00001338 <MixerItem2>:
    1338:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

00001343 <MixerItem0>:
    1343:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

00001350 <MixerItem43>:
    1350:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

0000135a <MixerItem42>:
    135a:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

00001364 <MixerItem28>:
    1364:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001371 <MixerItem3>:
    1371:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

0000137d <MixerItem27>:
    137d:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

00001389 <MixerItem7>:
    1389:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001395 <MixerItem26>:
    1395:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

000013a2 <MixerItem6>:
    13a2:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

000013af <MixerItem25>:
    13af:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

000013be <MixerItem5>:
    13be:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

000013cd <MixerItem24>:
    13cd:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

000013db <MixerItem4>:
    13db:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

000013e9 <MixerItem56>:
    13e9:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

000013f9 <MixerItem53>:
    13f9:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001409 <MixerItem55>:
    1409:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

00001419 <MixerItem52>:
    1419:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

00001429 <MixerItem54>:
    1429:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

00001439 <MixerItem51>:
    1439:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

00001449 <Mixeritem50>:
    1449:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

00001458 <MixerItem33>:
    1458:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

00001468 <MixerItem23>:
    1468:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

00001478 <MixerItem34>:
    1478:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

00001483 <MixerItem35>:
    1483:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

00001490 <MixerItem36>:
    1490:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

000014a1 <MixerItem20>:
    14a1:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

000014ac <MixerItem1>:
    14ac:	44 65 76 69 63 65 3a 00                             Device:.

000014b4 <P5text>:
    14b4:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

000014be <P4text>:
    14be:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

000014c8 <P3text>:
    14c8:	50 32 00                                            P2.

000014cb <P2text>:
    14cb:	50 31 2e 6e 00                                      P1.n.

000014d0 <P1text>:
    14d0:	50 31 00                                            P1.

000014d3 <GeneralText20>:
    14d3:	50 72 65 73 65 74 3a 00                             Preset:.

000014db <BattMenuItem2>:
    14db:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

000014e8 <GeneralText7>:
    14e8:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

000014f4 <GeneralText16>:
    14f4:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

000014fe <GeneralText6>:
    14fe:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

00001508 <GeneralText3>:
    1508:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

00001512 <GeneralText2>:
    1512:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

0000151f <AutoMenuItem2>:
    151f:	53 61 66 65 74 79 3a 00                             Safety:.

00001527 <Contrast>:
    1527:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

00001531 <MixerMenuItem0>:
    1531:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

0000153e <RCMenuItem7>:
    153e:	46 75 74 61 62 61 00                                Futaba.

00001545 <RCMenuItem6>:
    1545:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

0000154e <RXMode4>:
    154e:	58 74 72 65 6d 65 00                                Xtreme.

00001555 <RXMode3>:
    1555:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

0000155e <RXMode2>:
    155e:	53 2d 42 75 73 00                                   S-Bus.

00001564 <RXMode1>:
    1564:	50 57 4d 00                                         PWM.

00001568 <RXMode0>:
    1568:	43 50 50 4d 00                                      CPPM.

0000156d <Transition_P1n>:
    156d:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

00001579 <Transition>:
    1579:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

00001584 <RCMenuItem2>:
    1584:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

00001593 <RCMenuItem0>:
    1593:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

0000159e <RCMenuItem20>:
    159e:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

000015a8 <RCMenuItem1>:
    15a8:	52 58 20 74 79 70 65 3a 00                          RX type:.

000015b1 <AutoMenuItem15>:
    15b1:	4f 4e 00                                            ON.

000015b4 <AutoMenuItem11>:
    15b4:	4f 46 46 00                                         OFF.

000015b8 <StabMenuItem30>:
    15b8:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

000015c2 <StabMenuItem9>:
    15c2:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

000015ce <StabMenuItem12>:
    15ce:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

000015db <StabMenuItem8>:
    15db:	59 61 77 20 49 3a 00                                Yaw I:.

000015e2 <StabMenuItem7>:
    15e2:	59 61 77 20 50 3a 00                                Yaw P:.

000015e9 <AutoMenuItem8>:
    15e9:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

000015f5 <AutoMenuItem21>:
    15f5:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

00001604 <StabMenuItem6>:
    1604:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

00001612 <StabMenuItem11>:
    1612:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

00001621 <StabMenuItem5>:
    1621:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

0000162a <AutoMenuItem4>:
    162a:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

00001633 <AutoMenuItem7>:
    1633:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

0000163e <AutoMenuItem20>:
    163e:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

0000164c <StabMenuItem3>:
    164c:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

00001659 <StabMenuItem10>:
    1659:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001667 <StabMenuItem2>:
    1667:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

0000166f <AutoMenuItem1>:
    166f:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

00001677 <StabMenuItem13>:
    1677:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

00001683 <SensorMenuItem2>:
    1683:	49 6e 76 2e 00                                      Inv..

00001688 <SensorMenuItem1>:
    1688:	43 61 6c 2e 00                                      Cal..

0000168d <PText19>:
    168d:	41 63 63 00                                         Acc.

00001691 <PText18>:
    1691:	59 61 77 00                                         Yaw.

00001695 <PText17>:
    1695:	50 69 74 63 68 00                                   Pitch.

0000169b <PText16>:
    169b:	52 6f 6c 6c 00                                      Roll.

000016a0 <PText15>:
    16a0:	47 79 72 6f 00                                      Gyro.

000016a5 <MainMenuItem23>:
    16a5:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    16b5:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

000016be <MainMenuItem22>:
    16be:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    16ce:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

000016d7 <MainMenuItem20>:
    16d7:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    16e7:	69 6f 6e 00                                         ion.

000016eb <MainMenuItem18>:
    16eb:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

000016fa <MainMenuItem17>:
    16fa:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

00001709 <MainMenuItem16>:
    1709:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

00001718 <MainMenuItem15>:
    1718:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

00001727 <MainMenuItem14>:
    1727:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

00001736 <MainMenuItem13>:
    1736:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

00001745 <MainMenuItem12>:
    1745:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

00001754 <MainMenuItem11>:
    1754:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

00001762 <MainMenuItem3>:
    1762:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    1772:	65 20 32 00                                         e 2.

00001776 <MainMenuItem2>:
    1776:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    1786:	65 20 31 00                                         e 1.

0000178a <MainMenuItem10>:
    178a:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

00001799 <MainMenuItem8>:
    1799:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    17a9:	61 74 69 6f 6e 00                                   ation.

000017af <MainMenuItem7>:
    17af:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    17bf:	79 00                                               y.

000017c1 <MainMenuItem9>:
    17c1:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    17d1:	74 73 00                                            ts.

000017d4 <MainMenuItem1>:
    17d4:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    17e4:	70 00                                               p.

000017e6 <MainMenuItem0>:
    17e6:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

000017f1 <MenuFrame9>:
    17f1:	41 62 6f 72 74 00                                   Abort.

000017f7 <MenuFrame8>:
    17f7:	53 61 76 65 00                                      Save.

000017fc <MenuFrame7>:
    17fc:	44 65 66 2e 00                                      Def..

00001801 <MenuFrame6>:
    1801:	42 61 63 6b 00                                      Back.

00001806 <MenuFrame5>:
    1806:	4d 65 6e 75 00                                      Menu.

0000180b <MenuFrame1>:
    180b:	45 00                                               E.

0000180d <MenuFrame4>:
    180d:	44 00                                               D.

0000180f <MenuFrame3>:
    180f:	43 00                                               C.

00001811 <MenuFrame2>:
    1811:	42 00                                               B.

00001813 <MenuFrame0>:
    1813:	41 00                                               A.

00001815 <StatusText9>:
    1815:	4a 69 74 74 65 72 3a 00                             Jitter:.

0000181d <StatusText8>:
    181d:	50 6f 73 3a 00                                      Pos:.

00001822 <StatusText7>:
    1822:	42 61 74 74 65 72 79 3a 00                          Battery:.

0000182b <StatusText5>:
    182b:	30 00                                               0.

0000182d <StatusText4>:
    182d:	2e 00                                               ..

0000182f <StatusText3>:
    182f:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

00001838 <StatusText1>:
    1838:	4d 6f 64 65 3a 00                                   Mode:.

0000183e <StatusText0>:
    183e:	56 65 72 73 69 6f 6e 3a 20 20 20 31 2e 31 20 42     Version:   1.1 B
    184e:	31 36 00                                            16.

00001851 <Gyro_Pol>:
    1851:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    1861:	01 01                                               ..

00001863 <Gyro_RPY_Order>:
    1863:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    1873:	01 00                                               ..

00001875 <LPF_lookup_HS>:
    1875:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    1885:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

00001895 <LPF_lookup>:
    1895:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    18a5:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

000018b5 <lines>:
    18b5:	03 0f 1b 27                                         ...'

000018b9 <flight_menu_ranges>:
    18b9:	00 7f 01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00     ....(......}....
    18c9:	04 01 00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f     ................
    18d9:	01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00 04 01     ..(......}......
    18e9:	00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f 01 00     ................
    18f9:	3c 00 7f 01 00 28 00 7d 01 00 19 00 04 01 00 02     <....(.}........
    1909:	81 7f 01 00 00 00 7f 01 00 32                       .........2

00001913 <FlightMenuText>:
	...

00001937 <mixer_menu_ranges>:
    1937:	00 02 01 01 02 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    1947:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    1957:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    1967:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    1977:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    1987:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    1997:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    19a7:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    19b7:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    19c7:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    19d7:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

000019e1 <MixerMenuText>:
    19e1:	e2 00 00 00 00 00 00 00 00 00 00 00 00 00 38 00     ..............8.
	...
    19fd:	44 00 44 00 44 00 44 00 44 00 44 00 44 00 44 00     D.D.D.D.D.D.D.D.
    1a0d:	44 00 44 00 44 00 44 00 ee 00 00 00 ee 00 00 00     D.D.D.D.........
    1a1d:	ee 00 00 00 ee 00 00 00                             ........

00001a25 <servo_menu_ranges>:
    1a25:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

00001a34 <ServoMenuText>:
    1a34:	8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00     ................
	...

00001a64 <rc_menu_ranges>:
    1a64:	00 04 01 01 02 00 02 01 01 02 00 04 01 01 04 00     ................
    1a74:	01 01 01 00 00 07 01 01 04 00 28 01 00 00 01 63     ..........(....c
    1a84:	01 00 32 00 00 00 00 00 00 00 00 00 00 00 00 00     ..2.............
    1a94:	00 00 00 05 01 01 00 1c 32 01 00 24 00 01 01 01     ........2..$....
    1aa4:	01 00 7f 01 00 1e 00 08 01 01 00 00 06 01 01 03     ................
    1ab4:	00 07 01 01 02 00 07 01 01 07 01 0a 01 00 07 00     ................
    1ac4:	03 01 04 00                                         ....

00001ac8 <RCMenuText>:
    1ac8:	3e 00 76 00 69 00 74 00 69 00 00 00 00 00 00 00     >.v.i.t.i.......
    1ad8:	00 00 00 00 7c 00 00 00 35 00 00 00 00 00 25 00     ....|...5.....%.
    1ae8:	25 00 25 00 00 00 11 01                             %.%.....

00001af0 <SQRTSIN>:
    1af0:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1b00:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1b10:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1b20:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1b30:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1b40:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1b50:	64 64 64 64 64                                      ddddd

00001b55 <SIN>:
    1b55:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1b65:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1b75:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1b85:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1b95:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1ba5:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1bb5:	64 64 64 64 64                                      ddddd

00001bba <__ctors_end>:
    1bba:	11 24       	eor	r1, r1
    1bbc:	1f be       	out	0x3f, r1	; 63
    1bbe:	cf ef       	ldi	r28, 0xFF	; 255
    1bc0:	d0 e1       	ldi	r29, 0x10	; 16
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	cd bf       	out	0x3d, r28	; 61

00001bc6 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1bc6:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1bc8:	88 e1       	ldi	r24, 0x18	; 24
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	80 93 60 00 	sts	0x0060, r24
    1bd2:	10 92 60 00 	sts	0x0060, r1
    1bd6:	0f be       	out	0x3f, r0	; 63

00001bd8 <__do_copy_data>:
    1bd8:	15 e0       	ldi	r17, 0x05	; 5
    1bda:	a0 e0       	ldi	r26, 0x00	; 0
    1bdc:	b1 e0       	ldi	r27, 0x01	; 1
    1bde:	e8 ef       	ldi	r30, 0xF8	; 248
    1be0:	fb e9       	ldi	r31, 0x9B	; 155
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <__do_copy_data+0x10>
    1be4:	05 90       	lpm	r0, Z+
    1be6:	0d 92       	st	X+, r0
    1be8:	a6 31       	cpi	r26, 0x16	; 22
    1bea:	b1 07       	cpc	r27, r17
    1bec:	d9 f7       	brne	.-10     	; 0x1be4 <__do_copy_data+0xc>

00001bee <__do_clear_bss>:
    1bee:	28 e0       	ldi	r18, 0x08	; 8
    1bf0:	a6 e1       	ldi	r26, 0x16	; 22
    1bf2:	b5 e0       	ldi	r27, 0x05	; 5
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <.do_clear_bss_start>

00001bf6 <.do_clear_bss_loop>:
    1bf6:	1d 92       	st	X+, r1

00001bf8 <.do_clear_bss_start>:
    1bf8:	ae 35       	cpi	r26, 0x5E	; 94
    1bfa:	b2 07       	cpc	r27, r18
    1bfc:	e1 f7       	brne	.-8      	; 0x1bf6 <.do_clear_bss_loop>
    1bfe:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <main>
    1c02:	0c 94 fa 4d 	jmp	0x9bf4	; 0x9bf4 <_exit>

00001c06 <__bad_interrupt>:
    1c06:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001c0a <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1c0a:	00 00       	nop
	ret					// 4 (5 cycles)
    1c0c:	08 95       	ret

00001c0e <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1c0e:	fd df       	rcall	.-6      	; 0x1c0a <glcd_delay>
	rcall	glcd_delay
    1c10:	fc df       	rcall	.-8      	; 0x1c0a <glcd_delay>
	rcall	glcd_delay
    1c12:	fb df       	rcall	.-10     	; 0x1c0a <glcd_delay>
	rcall	glcd_delay
    1c14:	fa df       	rcall	.-12     	; 0x1c0a <glcd_delay>
	ret
    1c16:	08 95       	ret

00001c18 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1c18:	cf 93       	push	r28
	push	XL			//	1
    1c1a:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1c1c:	a5 e0       	ldi	r26, 0x05	; 5

00001c1e <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1c1e:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1c20:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1c22:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <VarDelay>
	sbi		BIND		//	2
    1c26:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1c28:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1c2a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <VarDelay>
	dec		XL			//	1
    1c2e:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1c30:	b1 f7       	brne	.-20     	; 0x1c1e <master_loop>

	pop		XL			//	  1
    1c32:	af 91       	pop	r26
	pop		YL			//	  1
    1c34:	cf 91       	pop	r28
	ret					//	  4 
    1c36:	08 95       	ret

00001c38 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1c38:	00 c0       	rjmp	.+0      	; 0x1c3a <VarDelay+0x2>
	rjmp .+0			// 2
    1c3a:	00 c0       	rjmp	.+0      	; 0x1c3c <VarDelay+0x4>
	rjmp .+0			// 2
    1c3c:	00 c0       	rjmp	.+0      	; 0x1c3e <VarDelay+0x6>
	rjmp .+0			// 2
    1c3e:	00 c0       	rjmp	.+0      	; 0x1c40 <VarDelay+0x8>
	rjmp .+0			// 2
    1c40:	00 c0       	rjmp	.+0      	; 0x1c42 <VarDelay+0xa>
	rjmp .+0			// 2
    1c42:	00 c0       	rjmp	.+0      	; 0x1c44 <VarDelay+0xc>
	rjmp .+0			// 2
    1c44:	00 c0       	rjmp	.+0      	; 0x1c46 <VarDelay+0xe>
	rjmp .+0			// 2
    1c46:	00 c0       	rjmp	.+0      	; 0x1c48 <VarDelay+0x10>
	nop					// 1
    1c48:	00 00       	nop
	dec 	YL			// 1
    1c4a:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1c4c:	a9 f7       	brne	.-22     	; 0x1c38 <VarDelay>
	ret					//   4 
    1c4e:	08 95       	ret

00001c50 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1c50:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1c52:	ef 93       	push	r30
	push	ZH			// 2
    1c54:	ff 93       	push	r31
	push	XL			// 2
    1c56:	af 93       	push	r26
	push	XH			// 2
    1c58:	bf 93       	push	r27
	push	YL			// 2
    1c5a:	cf 93       	push	r28
	push	YH			// 2
    1c5c:	df 93       	push	r29
	push	16			// 2
    1c5e:	0f 93       	push	r16
	push	17			// 2
    1c60:	1f 93       	push	r17
	push	18			// 2
    1c62:	2f 93       	push	r18
	push	19			// 2
    1c64:	3f 93       	push	r19
	push	20			// 2
    1c66:	4f 93       	push	r20
	push	21			// 2
    1c68:	5f 93       	push	r21
	push	22			// 2
    1c6a:	6f 93       	push	r22
	push	23			// 2
    1c6c:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1c6e:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1c70:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1c72:	8f 93       	push	r24
	push	25			// 2
    1c74:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1c76:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1c78:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1c7a:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1c7c:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1c7e:	af 93       	push	r26
	push	XH 			// 2
    1c80:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1c82:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1c84:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1c86:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c88:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1c8a:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1c8c:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1c8e:	af 93       	push	r26
	push	XH 		
    1c90:	bf 93       	push	r27
	andi	XL,	0x07
    1c92:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1c94:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1c96:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c98:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1c9a:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1c9c:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1c9e:	af 93       	push	r26
	push	XH 		
    1ca0:	bf 93       	push	r27
	andi	XL,	0x07
    1ca2:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1ca4:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1ca6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1ca8:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1caa:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1cac:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1cae:	af 93       	push	r26
	push	XH 	
    1cb0:	bf 93       	push	r27
	andi	XL,	0x07
    1cb2:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1cb4:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1cb6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1cb8:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1cba:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1cbc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1cbe:	af 93       	push	r26
	push	XH 	
    1cc0:	bf 93       	push	r27
	andi	XL,	0x07
    1cc2:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1cc4:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1cc6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1cc8:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1cca:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1ccc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1cce:	af 93       	push	r26
	push	XH 	
    1cd0:	bf 93       	push	r27
	andi	XL,	0x07
    1cd2:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1cd4:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1cd6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1cd8:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1cda:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1cdc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1cde:	af 93       	push	r26
	push	XH 
    1ce0:	bf 93       	push	r27
	andi	XL,	0x07
    1ce2:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1ce4:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1ce6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1ce8:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1cea:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1cec:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1cee:	af 93       	push	r26
	push	XH 
    1cf0:	bf 93       	push	r27
	andi	XL,	0x07
    1cf2:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1cf4:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1cf6:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1cf8:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1cfc:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1cfe:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1d00:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M2
	mov		r25,r22
    1d04:	96 2f       	mov	r25, r22
	call	DelayHigh
    1d06:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1d0a:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1d0c:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1d0e:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M3
	mov		r25,r21
    1d12:	95 2f       	mov	r25, r21
	call	DelayHigh
    1d14:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1d18:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1d1a:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1d1c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M4
	mov		r25,r20
    1d20:	94 2f       	mov	r25, r20
	call	DelayHigh
    1d22:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1d26:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1d28:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1d2a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M5
	mov		r25,r19
    1d2e:	93 2f       	mov	r25, r19
	call	DelayHigh
    1d30:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1d34:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1d36:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1d38:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M6
	mov		r25,r18
    1d3c:	92 2f       	mov	r25, r18
	call	DelayHigh
    1d3e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1d42:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1d44:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1d46:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M7
	mov		r25,r17
    1d4a:	91 2f       	mov	r25, r17
	call	DelayHigh
    1d4c:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1d50:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1d52:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1d54:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M8
	mov		r25,r16
    1d58:	90 2f       	mov	r25, r16
	call	DelayHigh
    1d5a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1d5e:	f7 fc       	sbrc	r15, 7
	sbi 	M8			// 1
    1d60:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1d62:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1d66:	0e 94 75 0f 	call	0x1eea	; 0x1eea <pwm_delay>
	call    pwm_delay
    1d6a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <pwm_delay>
	call    pwm_delay
    1d6e:	0e 94 75 0f 	call	0x1eea	; 0x1eea <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1d72:	bf 91       	pop	r27
	pop		XL
    1d74:	af 91       	pop	r26
	call	shuffle_8
    1d76:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <shuffle_8>
	mov		r16,XL
    1d7a:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1d7c:	bf 91       	pop	r27
	pop		XL
    1d7e:	af 91       	pop	r26
	call	shuffle_8
    1d80:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <shuffle_8>
	mov		r17,XL
    1d84:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1d86:	bf 91       	pop	r27
	pop		XL
    1d88:	af 91       	pop	r26
	call	shuffle_8
    1d8a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <shuffle_8>
	mov		r18,XL
    1d8e:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1d90:	bf 91       	pop	r27
	pop		XL
    1d92:	af 91       	pop	r26
	call	shuffle_8
    1d94:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <shuffle_8>
	mov		r19,XL
    1d98:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1d9a:	bf 91       	pop	r27
	pop		XL
    1d9c:	af 91       	pop	r26
	call	shuffle_8
    1d9e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <shuffle_8>
	mov		r20,XL
    1da2:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1da4:	bf 91       	pop	r27
	pop		XL
    1da6:	af 91       	pop	r26
	call	shuffle_8
    1da8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <shuffle_8>
	mov		r21,XL
    1dac:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1dae:	bf 91       	pop	r27
	pop		XL
    1db0:	af 91       	pop	r26
	call	shuffle_8
    1db2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <shuffle_8>
	mov		r22,XL
    1db6:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1db8:	bf 91       	pop	r27
	pop		XL
    1dba:	af 91       	pop	r26
	call	shuffle_8
    1dbc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <shuffle_8>
	mov		r23,XL
    1dc0:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    1dc2:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    1dc4:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    1dc6:	00 24       	eor	r0, r0

00001dc8 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1dc8:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1dca:	19 f4       	brne	.+6      	; 0x1dd2 <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1dcc:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1dce:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <jj1>

00001dd2 <j1>:
j1:
	rjmp 	.+0			// 2
    1dd2:	00 c0       	rjmp	.+0      	; 0x1dd4 <j1+0x2>
	rjmp 	.+0			// 2
    1dd4:	00 c0       	rjmp	.+0      	; 0x1dd6 <jj1>

00001dd6 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1dd6:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1dd8:	19 f4       	brne	.+6      	; 0x1de0 <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1dda:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1ddc:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <jj2>

00001de0 <j2>:
j2:
	rjmp	.+0
    1de0:	00 c0       	rjmp	.+0      	; 0x1de2 <j2+0x2>
	rjmp	.+0
    1de2:	00 c0       	rjmp	.+0      	; 0x1de4 <jj2>

00001de4 <jj2>:
jj2:
	subi	r21,1
    1de4:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1de6:	19 f4       	brne	.+6      	; 0x1dee <j3>
	cbi 	M3
    1de8:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1dea:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <jj3>

00001dee <j3>:
j3:
	rjmp	.+0
    1dee:	00 c0       	rjmp	.+0      	; 0x1df0 <j3+0x2>
	rjmp	.+0
    1df0:	00 c0       	rjmp	.+0      	; 0x1df2 <jj3>

00001df2 <jj3>:
jj3:
	subi 	r20,1
    1df2:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1df4:	19 f4       	brne	.+6      	; 0x1dfc <j4>
	cbi 	M4
    1df6:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1df8:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <jj4>

00001dfc <j4>:
j4:
	rjmp 	.+0
    1dfc:	00 c0       	rjmp	.+0      	; 0x1dfe <j4+0x2>
	rjmp 	.+0
    1dfe:	00 c0       	rjmp	.+0      	; 0x1e00 <jj4>

00001e00 <jj4>:
jj4:
	subi	r19,1
    1e00:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1e02:	19 f4       	brne	.+6      	; 0x1e0a <j5>
	cbi 	M5
    1e04:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1e06:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <jj5>

00001e0a <j5>:
j5:
	rjmp 	.+0
    1e0a:	00 c0       	rjmp	.+0      	; 0x1e0c <j5+0x2>
	rjmp 	.+0
    1e0c:	00 c0       	rjmp	.+0      	; 0x1e0e <jj5>

00001e0e <jj5>:
jj5:
	subi	r18,1
    1e0e:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1e10:	19 f4       	brne	.+6      	; 0x1e18 <j6>
	cbi 	M6
    1e12:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1e14:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <jj6>

00001e18 <j6>:
j6:
	rjmp 	.+0
    1e18:	00 c0       	rjmp	.+0      	; 0x1e1a <j6+0x2>
	rjmp	.+0
    1e1a:	00 c0       	rjmp	.+0      	; 0x1e1c <jj6>

00001e1c <jj6>:
jj6:
	subi	r17,1
    1e1c:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1e1e:	19 f4       	brne	.+6      	; 0x1e26 <j7>
	cbi 	M7
    1e20:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1e22:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <jj7>

00001e26 <j7>:
j7:
	rjmp 	.+0
    1e26:	00 c0       	rjmp	.+0      	; 0x1e28 <j7+0x2>
	rjmp 	.+0
    1e28:	00 c0       	rjmp	.+0      	; 0x1e2a <jj7>

00001e2a <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1e2a:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1e2c:	19 f4       	brne	.+6      	; 0x1e34 <j8>
	cbi 	M8
    1e2e:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1e30:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <jj8>

00001e34 <j8>:
j8:
	rjmp 	.+0
    1e34:	00 c0       	rjmp	.+0      	; 0x1e36 <j8+0x2>
	rjmp 	.+0
    1e36:	00 c0       	rjmp	.+0      	; 0x1e38 <jj8>

00001e38 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1e38:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <pad_100_delay>

	subi 	YL,1		// 1
    1e3c:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1e3e:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1e40:	11 f0       	breq	.+4      	; 0x1e46 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1e42:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <nloop>

00001e46 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1e46:	9f 91       	pop	r25
	pop		24			// 		2
    1e48:	8f 91       	pop	r24
	pop		23			//		2
    1e4a:	7f 91       	pop	r23
	pop		22			//		2
    1e4c:	6f 91       	pop	r22
	pop		21			//		2
    1e4e:	5f 91       	pop	r21
	pop		20			//		2
    1e50:	4f 91       	pop	r20
	pop		19			//		2
    1e52:	3f 91       	pop	r19
	pop		18			//		2
    1e54:	2f 91       	pop	r18
	pop		17			//		2
    1e56:	1f 91       	pop	r17
	pop		16			//		2
    1e58:	0f 91       	pop	r16
	pop		YH			//		2
    1e5a:	df 91       	pop	r29
	pop		YL			//		2
    1e5c:	cf 91       	pop	r28
	pop		XH			//		2
    1e5e:	bf 91       	pop	r27
	pop		XL			//		2
    1e60:	af 91       	pop	r26
	pop		ZH			// 		2
    1e62:	ff 91       	pop	r31
	pop		ZL			//		2
    1e64:	ef 91       	pop	r30

	ret					//		4
    1e66:	08 95       	ret

00001e68 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1e68:	0f 93       	push	r16
	push	17
    1e6a:	1f 93       	push	r17
	push	18
    1e6c:	2f 93       	push	r18

	//ldi 	16,0x34		// 1			Set loop count to 834h or 2100
	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1e6e:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1e70:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1e72:	00 24       	eor	r0, r0

00001e74 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1e74:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1e76:	71 f0       	breq	.+28     	; 0x1e94 <in1>
	cpi		r24,0x01	; 1
    1e78:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1e7a:	79 f0       	breq	.+30     	; 0x1e9a <in2>
	cpi		r24,0x02	; 2
    1e7c:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1e7e:	81 f0       	breq	.+32     	; 0x1ea0 <in3>
	cpi		r24,0x03	; 3
    1e80:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1e82:	89 f0       	breq	.+34     	; 0x1ea6 <in4>
	cpi		r24,0x04	; 4
    1e84:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1e86:	91 f0       	breq	.+36     	; 0x1eac <in5>
	cpi		r24,0x05	; 5
    1e88:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1e8a:	99 f0       	breq	.+38     	; 0x1eb2 <in6>
	cpi		r24,0x06	; 6
    1e8c:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1e8e:	a1 f0       	breq	.+40     	; 0x1eb8 <in7>
	cpi		r24,0x07	; 7
    1e90:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1e92:	a9 f0       	breq	.+42     	; 0x1ebe <in8>

00001e94 <in1>:

in1:sbi 	M1			// Set output high
    1e94:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1e96:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <loopin>

00001e9a <in2>:
in2:sbi 	M2
    1e9a:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1e9c:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <loopin>

00001ea0 <in3>:
in3:sbi 	M3	
    1ea0:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1ea2:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <loopin>

00001ea6 <in4>:
in4:sbi 	M4
    1ea6:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1ea8:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <loopin>

00001eac <in5>:
in5:sbi 	M5
    1eac:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1eae:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <loopin>

00001eb2 <in6>:
in6:sbi 	M6
    1eb2:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1eb4:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <loopin>

00001eb8 <in7>:
in7:sbi 	M7
    1eb8:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1eba:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <loopin>

00001ebe <in8>:
in8:sbi 	M8
    1ebe:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1ec0:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <loopin>

00001ec4 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1ec4:	00 c0       	rjmp	.+0      	; 0x1ec6 <loopin+0x2>
	rjmp .+0			// 2
    1ec6:	00 c0       	rjmp	.+0      	; 0x1ec8 <loopin+0x4>
	rjmp .+0			// 2
    1ec8:	00 c0       	rjmp	.+0      	; 0x1eca <loopin+0x6>
	rjmp .+0			// 2
    1eca:	00 c0       	rjmp	.+0      	; 0x1ecc <loopin+0x8>
	rjmp .+0			// 2
    1ecc:	00 c0       	rjmp	.+0      	; 0x1ece <loopin+0xa>
	rjmp .+0			// 2
    1ece:	00 c0       	rjmp	.+0      	; 0x1ed0 <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1ed0:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1ed2:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1ed4:	19 f4       	brne	.+6      	; 0x1edc <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1ed8:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1eda:	22 b9       	out	0x02, r18	; 2

00001edc <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1edc:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1ede:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1ee0:	89 f7       	brne	.-30     	; 0x1ec4 <loopin>

	pop		18
    1ee2:	2f 91       	pop	r18
	pop		17			// Restore regs
    1ee4:	1f 91       	pop	r17
	pop		16
    1ee6:	0f 91       	pop	r16
	ret	
    1ee8:	08 95       	ret

00001eea <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1eea:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1eec:	05 e6       	ldi	r16, 0x65	; 101

00001eee <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1eee:	00 c0       	rjmp	.+0      	; 0x1ef0 <pwm_loop+0x2>
	rjmp .+0			// 2
    1ef0:	00 c0       	rjmp	.+0      	; 0x1ef2 <pwm_loop+0x4>
	rjmp .+0			// 2
    1ef2:	00 c0       	rjmp	.+0      	; 0x1ef4 <pwm_loop+0x6>
	subi	r16,1		// 1
    1ef4:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1ef6:	d9 f7       	brne	.-10     	; 0x1eee <pwm_loop>

00001ef8 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1ef8:	0f 91       	pop	r16
	ret					//    4 to return
    1efa:	08 95       	ret

00001efc <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1efc:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1efe:	09 e0       	ldi	r16, 0x09	; 9

00001f00 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1f00:	00 c0       	rjmp	.+0      	; 0x1f02 <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1f02:	00 c0       	rjmp	.+0      	; 0x1f04 <pad_100+0x4>
	rjmp .+0			// 2
    1f04:	00 c0       	rjmp	.+0      	; 0x1f06 <pad_100+0x6>

	subi 	16,1		// 1
    1f06:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1f08:	d9 f7       	brne	.-10     	; 0x1f00 <pad_100>

	nop					// 		1		Trim to precisely the right value
    1f0a:	00 00       	nop
	rjmp .+0			// 		2
    1f0c:	00 c0       	rjmp	.+0      	; 0x1f0e <pad_100+0xe>
	rjmp .+0			// 		2
    1f0e:	00 c0       	rjmp	.+0      	; 0x1f10 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1f10:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1f12:	08 95       	ret

00001f14 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1f14:	00 c0       	rjmp	.+0      	; 0x1f16 <us_delay+0x2>
	rjmp .+0			// 2
    1f16:	00 c0       	rjmp	.+0      	; 0x1f18 <us_delay+0x4>
	rjmp .+0			// 2
    1f18:	00 c0       	rjmp	.+0      	; 0x1f1a <us_delay+0x6>
	rjmp .+0			// 2
    1f1a:	00 c0       	rjmp	.+0      	; 0x1f1c <us_delay+0x8>
	ret					// 4 (16 cycles)
    1f1c:	08 95       	ret

00001f1e <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1f1e:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1f20:	a7 95       	ror	r26
	lsr		XH			// 1
    1f22:	b6 95       	lsr	r27
	ror		XL			// 1
    1f24:	a7 95       	ror	r26
	lsr		XH			// 1
    1f26:	b6 95       	lsr	r27
	ror		XL			// 1
    1f28:	a7 95       	ror	r26
	ret					// 4
    1f2a:	08 95       	ret

00001f2c <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1f2c:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1f2e:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1f30:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1f32:	31 f0       	breq	.+12     	; 0x1f40 <LoopHighOut1>

00001f34 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1f34:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <us_delay>
	dec 	YL			// 		1	1
    1f38:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1f3c:	fb cf       	rjmp	.-10     	; 0x1f34 <LoopHigh>

00001f3e <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1f3e:	00 c0       	rjmp	.+0      	; 0x1f40 <LoopHighOut1>

00001f40 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1f40:	00 00       	nop
    ret					// 4	4	4
    1f42:	08 95       	ret

00001f44 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1f44:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1f46:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1f48:	31 f0       	breq	.+12     	; 0x1f56 <LoopLowOut1>

00001f4a <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1f4a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <us_delay>
	dec 	YL			//		1	1
    1f4e:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <LoopLowOut2>
	rjmp	LoopLow		//			2
    1f52:	fb cf       	rjmp	.-10     	; 0x1f4a <LoopLow>

00001f54 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1f54:	00 c0       	rjmp	.+0      	; 0x1f56 <LoopLowOut1>

00001f56 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1f56:	08 95       	ret

00001f58 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	2c 97       	sbiw	r28, 0x0c	; 12
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1f6c:	26 e0       	ldi	r18, 0x06	; 6
    1f6e:	ae 01       	movw	r20, r28
    1f70:	4f 5f       	subi	r20, 0xFF	; 255
    1f72:	5f 4f       	sbci	r21, 0xFF	; 255
    1f74:	6b e3       	ldi	r22, 0x3B	; 59
    1f76:	80 ed       	ldi	r24, 0xD0	; 208
    1f78:	0e 94 94 27 	call	0x4f28	; 0x4f28 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	98 2f       	mov	r25, r24
    1f82:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1f84:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1f86:	82 0f       	add	r24, r18
    1f88:	91 1d       	adc	r25, r1
    1f8a:	36 e0       	ldi	r19, 0x06	; 6
    1f8c:	95 95       	asr	r25
    1f8e:	87 95       	ror	r24
    1f90:	3a 95       	dec	r19
    1f92:	e1 f7       	brne	.-8      	; 0x1f8c <get_raw_accs+0x34>
    1f94:	98 87       	std	Y+8, r25	; 0x08
    1f96:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1fa0:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1fa2:	82 0f       	add	r24, r18
    1fa4:	91 1d       	adc	r25, r1
    1fa6:	56 e0       	ldi	r21, 0x06	; 6
    1fa8:	95 95       	asr	r25
    1faa:	87 95       	ror	r24
    1fac:	5a 95       	dec	r21
    1fae:	e1 f7       	brne	.-8      	; 0x1fa8 <get_raw_accs+0x50>
    1fb0:	91 95       	neg	r25
    1fb2:	81 95       	neg	r24
    1fb4:	91 09       	sbc	r25, r1
    1fb6:	9a 87       	std	Y+10, r25	; 0x0a
    1fb8:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1fc2:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1fc4:	82 0f       	add	r24, r18
    1fc6:	91 1d       	adc	r25, r1
    1fc8:	76 e0       	ldi	r23, 0x06	; 6
    1fca:	95 95       	asr	r25
    1fcc:	87 95       	ror	r24
    1fce:	7a 95       	dec	r23
    1fd0:	e1 f7       	brne	.-8      	; 0x1fca <get_raw_accs+0x72>
    1fd2:	9c 87       	std	Y+12, r25	; 0x0c
    1fd4:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1fd6:	20 91 49 06 	lds	r18, 0x0649
    1fda:	ae e3       	ldi	r26, 0x3E	; 62
    1fdc:	b5 e0       	ldi	r27, 0x05	; 5
    1fde:	43 e0       	ldi	r20, 0x03	; 3
    1fe0:	24 02       	muls	r18, r20
    1fe2:	90 01       	movw	r18, r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	24 52       	subi	r18, 0x24	; 36
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	f9 01       	movw	r30, r18
    1ff0:	e8 0f       	add	r30, r24
    1ff2:	f9 1f       	adc	r31, r25
    1ff4:	e4 91       	lpm	r30, Z
    1ff6:	ee 0f       	add	r30, r30
    1ff8:	ff 0b       	sbc	r31, r31
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	4c 0f       	add	r20, r28
    2000:	5d 1f       	adc	r21, r29
    2002:	e4 0f       	add	r30, r20
    2004:	f5 1f       	adc	r31, r21
    2006:	46 81       	ldd	r20, Z+6	; 0x06
    2008:	57 81       	ldd	r21, Z+7	; 0x07
    200a:	4d 93       	st	X+, r20
    200c:	5d 93       	st	X+, r21
    200e:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    2010:	83 30       	cpi	r24, 0x03	; 3
    2012:	91 05       	cpc	r25, r1
    2014:	61 f7       	brne	.-40     	; 0x1fee <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    2016:	2c 96       	adiw	r28, 0x0c	; 12
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	08 95       	ret

00002028 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    202e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    2032:	80 91 c8 07 	lds	r24, 0x07C8
    2036:	80 fd       	sbrc	r24, 0
    2038:	05 c0       	rjmp	.+10     	; 0x2044 <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    203a:	10 92 b0 07 	sts	0x07B0, r1
    203e:	10 92 af 07 	sts	0x07AF, r1
    2042:	0e c0       	rjmp	.+28     	; 0x2060 <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    2044:	80 91 b1 07 	lds	r24, 0x07B1
    2048:	90 91 b2 07 	lds	r25, 0x07B2
    204c:	20 91 b5 07 	lds	r18, 0x07B5
    2050:	30 91 b6 07 	lds	r19, 0x07B6
    2054:	82 1b       	sub	r24, r18
    2056:	93 0b       	sbc	r25, r19
    2058:	90 93 b0 07 	sts	0x07B0, r25
    205c:	80 93 af 07 	sts	0x07AF, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    2060:	20 91 49 06 	lds	r18, 0x0649
    2064:	cb ea       	ldi	r28, 0xAB	; 171
    2066:	d7 e0       	ldi	r29, 0x07	; 7
    2068:	ae e3       	ldi	r26, 0x3E	; 62
    206a:	b5 e0       	ldi	r27, 0x05	; 5
    206c:	83 e0       	ldi	r24, 0x03	; 3
    206e:	28 02       	muls	r18, r24
    2070:	90 01       	movw	r18, r0
    2072:	11 24       	eor	r1, r1
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	26 53       	subi	r18, 0x36	; 54
    207a:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    207c:	69 91       	ld	r22, Y+
    207e:	79 91       	ld	r23, Y+
    2080:	f9 01       	movw	r30, r18
    2082:	e8 0f       	add	r30, r24
    2084:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    2086:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    2088:	4d 91       	ld	r20, X+
    208a:	5c 91       	ld	r21, X
    208c:	11 97       	sbiw	r26, 0x01	; 1
    208e:	46 1b       	sub	r20, r22
    2090:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    2092:	14 03       	mulsu	r17, r20
    2094:	b0 01       	movw	r22, r0
    2096:	15 9f       	mul	r17, r21
    2098:	70 0d       	add	r23, r0
    209a:	11 24       	eor	r1, r1
    209c:	6d 93       	st	X+, r22
    209e:	7d 93       	st	X+, r23
    20a0:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	91 05       	cpc	r25, r1
    20a6:	51 f7       	brne	.-44     	; 0x207c <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    20a8:	60 91 b1 07 	lds	r22, 0x07B1
    20ac:	70 91 b2 07 	lds	r23, 0x07B2
    20b0:	80 91 af 07 	lds	r24, 0x07AF
    20b4:	90 91 b0 07 	lds	r25, 0x07B0
    20b8:	68 1b       	sub	r22, r24
    20ba:	79 0b       	sbc	r23, r25
    20bc:	88 27       	eor	r24, r24
    20be:	77 fd       	sbrc	r23, 7
    20c0:	80 95       	com	r24
    20c2:	98 2f       	mov	r25, r24
    20c4:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    20c8:	20 91 b1 05 	lds	r18, 0x05B1
    20cc:	30 91 b2 05 	lds	r19, 0x05B2
    20d0:	40 91 b3 05 	lds	r20, 0x05B3
    20d4:	50 91 b4 05 	lds	r21, 0x05B4
    20d8:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__addsf3>
    20dc:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
    20e0:	70 93 17 05 	sts	0x0517, r23
    20e4:	60 93 16 05 	sts	0x0516, r22
}
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	08 95       	ret

000020f0 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <CalibrateAcc+0x8>
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <CalibrateAcc+0xa>
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <CalibrateAcc+0xc>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    2100:	1a 82       	std	Y+2, r1	; 0x02
    2102:	19 82       	std	Y+1, r1	; 0x01
    2104:	1c 82       	std	Y+4, r1	; 0x04
    2106:	1b 82       	std	Y+3, r1	; 0x03
    2108:	1e 82       	std	Y+6, r1	; 0x06
    210a:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    210c:	81 11       	cpse	r24, r1
    210e:	72 c0       	rjmp	.+228    	; 0x21f4 <CalibrateAcc+0x104>
    2110:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    2112:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	20 91 3e 05 	lds	r18, 0x053E
    211e:	30 91 3f 05 	lds	r19, 0x053F
    2122:	82 0f       	add	r24, r18
    2124:	93 1f       	adc	r25, r19
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	20 91 40 05 	lds	r18, 0x0540
    2132:	30 91 41 05 	lds	r19, 0x0541
    2136:	82 0f       	add	r24, r18
    2138:	93 1f       	adc	r25, r19
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	20 91 42 05 	lds	r18, 0x0542
    2146:	30 91 43 05 	lds	r19, 0x0543
    214a:	82 0f       	add	r24, r18
    214c:	93 1f       	adc	r25, r19
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2152:	8f e4       	ldi	r24, 0x4F	; 79
    2154:	93 ec       	ldi	r25, 0xC3	; 195
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <CalibrateAcc+0x66>
    215a:	00 c0       	rjmp	.+0      	; 0x215c <CalibrateAcc+0x6c>
    215c:	00 00       	nop
    215e:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    2160:	c1 f6       	brne	.-80     	; 0x2112 <CalibrateAcc+0x22>
    2162:	fe 01       	movw	r30, r28
    2164:	31 96       	adiw	r30, 0x01	; 1
    2166:	9e 01       	movw	r18, r28
    2168:	29 5f       	subi	r18, 0xF9	; 249
    216a:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    216c:	80 81       	ld	r24, Z
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	40 96       	adiw	r24, 0x10	; 16
    2172:	45 e0       	ldi	r20, 0x05	; 5
    2174:	95 95       	asr	r25
    2176:	87 95       	ror	r24
    2178:	4a 95       	dec	r20
    217a:	e1 f7       	brne	.-8      	; 0x2174 <CalibrateAcc+0x84>
    217c:	81 93       	st	Z+, r24
    217e:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    2180:	e2 17       	cp	r30, r18
    2182:	f3 07       	cpc	r31, r19
    2184:	99 f7       	brne	.-26     	; 0x216c <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
    218a:	90 93 ac 07 	sts	0x07AC, r25
    218e:	80 93 ab 07 	sts	0x07AB, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	90 93 ae 07 	sts	0x07AE, r25
    219a:	80 93 ad 07 	sts	0x07AD, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    219e:	80 91 49 06 	lds	r24, 0x0649
    21a2:	99 27       	eor	r25, r25
    21a4:	87 fd       	sbrc	r24, 7
    21a6:	90 95       	com	r25
    21a8:	fc 01       	movw	r30, r24
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	e8 0f       	add	r30, r24
    21b0:	f9 1f       	adc	r31, r25
    21b2:	e4 53       	subi	r30, 0x34	; 52
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	44 91       	lpm	r20, Z
    21b8:	2d 81       	ldd	r18, Y+5	; 0x05
    21ba:	3e 81       	ldd	r19, Y+6	; 0x06
    21bc:	42 03       	mulsu	r20, r18
    21be:	c0 01       	movw	r24, r0
    21c0:	43 9f       	mul	r20, r19
    21c2:	90 0d       	add	r25, r0
    21c4:	11 24       	eor	r1, r1
    21c6:	90 93 b2 07 	sts	0x07B2, r25
    21ca:	80 93 b1 07 	sts	0x07B1, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    21ce:	80 91 c8 07 	lds	r24, 0x07C8
    21d2:	82 60       	ori	r24, 0x02	; 2
    21d4:	80 93 c8 07 	sts	0x07C8, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    21d8:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>
		LED1 = 1;
    21dc:	2b 9a       	sbi	0x05, 3	; 5
    21de:	9f e7       	ldi	r25, 0x7F	; 127
    21e0:	24 e8       	ldi	r18, 0x84	; 132
    21e2:	4e e1       	ldi	r20, 0x1E	; 30
    21e4:	91 50       	subi	r25, 0x01	; 1
    21e6:	20 40       	sbci	r18, 0x00	; 0
    21e8:	40 40       	sbci	r20, 0x00	; 0
    21ea:	e1 f7       	brne	.-8      	; 0x21e4 <CalibrateAcc+0xf4>
    21ec:	00 c0       	rjmp	.+0      	; 0x21ee <CalibrateAcc+0xfe>
    21ee:	00 00       	nop
		_delay_ms(500);
		LED1 = 0;
    21f0:	2b 98       	cbi	0x05, 3	; 5
    21f2:	76 c0       	rjmp	.+236    	; 0x22e0 <CalibrateAcc+0x1f0>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    21f4:	80 91 c8 07 	lds	r24, 0x07C8
    21f8:	81 ff       	sbrs	r24, 1
    21fa:	72 c0       	rjmp	.+228    	; 0x22e0 <CalibrateAcc+0x1f0>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    21fc:	10 92 b4 07 	sts	0x07B4, r1
    2200:	10 92 b3 07 	sts	0x07B3, r1
    2204:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    2206:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    220a:	80 91 b3 07 	lds	r24, 0x07B3
    220e:	90 91 b4 07 	lds	r25, 0x07B4
    2212:	20 91 42 05 	lds	r18, 0x0542
    2216:	30 91 43 05 	lds	r19, 0x0543
    221a:	82 0f       	add	r24, r18
    221c:	93 1f       	adc	r25, r19
    221e:	90 93 b4 07 	sts	0x07B4, r25
    2222:	80 93 b3 07 	sts	0x07B3, r24
    2226:	8f e4       	ldi	r24, 0x4F	; 79
    2228:	93 ec       	ldi	r25, 0xC3	; 195
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <CalibrateAcc+0x13a>
    222e:	00 c0       	rjmp	.+0      	; 0x2230 <CalibrateAcc+0x140>
    2230:	00 00       	nop
    2232:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    2234:	41 f7       	brne	.-48     	; 0x2206 <CalibrateAcc+0x116>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2236:	80 91 49 06 	lds	r24, 0x0649
    223a:	99 27       	eor	r25, r25
    223c:	87 fd       	sbrc	r24, 7
    223e:	90 95       	com	r25
    2240:	fc 01       	movw	r30, r24
    2242:	ee 0f       	add	r30, r30
    2244:	ff 1f       	adc	r31, r31
    2246:	e8 0f       	add	r30, r24
    2248:	f9 1f       	adc	r31, r25
    224a:	e4 53       	subi	r30, 0x34	; 52
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    2250:	20 91 b3 07 	lds	r18, 0x07B3
    2254:	30 91 b4 07 	lds	r19, 0x07B4
    2258:	20 5f       	subi	r18, 0xF0	; 240
    225a:	3f 4f       	sbci	r19, 0xFF	; 255
    225c:	b5 e0       	ldi	r27, 0x05	; 5
    225e:	35 95       	asr	r19
    2260:	27 95       	ror	r18
    2262:	ba 95       	dec	r27
    2264:	e1 f7       	brne	.-8      	; 0x225e <CalibrateAcc+0x16e>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2266:	42 03       	mulsu	r20, r18
    2268:	c0 01       	movw	r24, r0
    226a:	43 9f       	mul	r20, r19
    226c:	90 0d       	add	r25, r0
    226e:	11 24       	eor	r1, r1
    2270:	90 93 b4 07 	sts	0x07B4, r25
    2274:	80 93 b3 07 	sts	0x07B3, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    2278:	97 ff       	sbrs	r25, 7
    227a:	32 c0       	rjmp	.+100    	; 0x22e0 <CalibrateAcc+0x1f0>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    227c:	20 91 b1 07 	lds	r18, 0x07B1
    2280:	30 91 b2 07 	lds	r19, 0x07B2
    2284:	a9 01       	movw	r20, r18
    2286:	48 1b       	sub	r20, r24
    2288:	59 0b       	sbc	r21, r25
    228a:	ca 01       	movw	r24, r20
    228c:	95 95       	asr	r25
    228e:	87 95       	ror	r24
    2290:	90 93 b6 07 	sts	0x07B6, r25
    2294:	80 93 b5 07 	sts	0x07B5, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    2298:	28 1b       	sub	r18, r24
    229a:	39 0b       	sbc	r19, r25
    229c:	30 93 b0 07 	sts	0x07B0, r19
    22a0:	20 93 af 07 	sts	0x07AF, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    22a4:	80 91 c8 07 	lds	r24, 0x07C8
    22a8:	81 60       	ori	r24, 0x01	; 1
    22aa:	80 93 c8 07 	sts	0x07C8, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    22ae:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>
				LED1 = 1;
    22b2:	2b 9a       	sbi	0x05, 3	; 5
    22b4:	5f e7       	ldi	r21, 0x7F	; 127
    22b6:	84 e8       	ldi	r24, 0x84	; 132
    22b8:	9e e1       	ldi	r25, 0x1E	; 30
    22ba:	51 50       	subi	r21, 0x01	; 1
    22bc:	80 40       	sbci	r24, 0x00	; 0
    22be:	90 40       	sbci	r25, 0x00	; 0
    22c0:	e1 f7       	brne	.-8      	; 0x22ba <CalibrateAcc+0x1ca>
    22c2:	00 c0       	rjmp	.+0      	; 0x22c4 <CalibrateAcc+0x1d4>
    22c4:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    22c6:	2b 98       	cbi	0x05, 3	; 5
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    22c8:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
	}
}
    22ca:	26 96       	adiw	r28, 0x06	; 6
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
				LED1 = 1;
				_delay_ms(500);
				LED1 = 0;
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    22dc:	0c 94 c9 34 	jmp	0x6992	; 0x6992 <menu_beep>
			}
		}
	}
}
    22e0:	26 96       	adiw	r28, 0x06	; 6
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	08 95       	ret

000022f4 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    22f4:	41 e0       	ldi	r20, 0x01	; 1
    22f6:	6b e6       	ldi	r22, 0x6B	; 107
    22f8:	80 ed       	ldi	r24, 0xD0	; 208
    22fa:	0e 94 7d 27 	call	0x4efa	; 0x4efa <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    22fe:	48 e0       	ldi	r20, 0x08	; 8
    2300:	6c e1       	ldi	r22, 0x1C	; 28
    2302:	80 ed       	ldi	r24, 0xD0	; 208
    2304:	0c 94 7d 27 	jmp	0x4efa	; 0x4efa <writeI2Cbyte>

00002308 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    2308:	8f ef       	ldi	r24, 0xFF	; 255
    230a:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    230e:	10 92 7b 00 	sts	0x007B, r1
    2312:	08 95       	ret

00002314 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    2314:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    2318:	86 ec       	ldi	r24, 0xC6	; 198
    231a:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    231e:	80 91 7a 00 	lds	r24, 0x007A
    2322:	86 fd       	sbrc	r24, 6
    2324:	fc cf       	rjmp	.-8      	; 0x231e <read_adc+0xa>
}
    2326:	08 95       	ret

00002328 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    2328:	cf 92       	push	r12
    232a:	df 92       	push	r13
    232c:	ef 92       	push	r14
    232e:	0f 93       	push	r16
    2330:	cf 93       	push	r28
    2332:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    2334:	cb e0       	ldi	r28, 0x0B	; 11
    2336:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    2338:	1f 9b       	sbis	0x03, 7	; 3
    233a:	7f c0       	rjmp	.+254    	; 0x243a <Display_balance+0x112>
	{
		// Read accs
		ReadAcc();
    233c:	0e 94 14 10 	call	0x2028	; 0x2028 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	cb 01       	movw	r24, r22
    2346:	0e 94 f5 29 	call	0x53ea	; 0x53ea <imu_update>
    234a:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    234c:	20 97       	sbiw	r28, 0x00	; 0
    234e:	a1 f7       	brne	.-24     	; 0x2338 <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	52 e4       	ldi	r21, 0x42	; 66
    2358:	60 91 ad 05 	lds	r22, 0x05AD
    235c:	70 91 ae 05 	lds	r23, 0x05AE
    2360:	80 91 af 05 	lds	r24, 0x05AF
    2364:	90 91 b0 05 	lds	r25, 0x05B0
    2368:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__addsf3>
    236c:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
    2370:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	52 e4       	ldi	r21, 0x42	; 66
    237a:	60 91 a9 05 	lds	r22, 0x05A9
    237e:	70 91 aa 05 	lds	r23, 0x05AA
    2382:	80 91 ab 05 	lds	r24, 0x05AB
    2386:	90 91 ac 05 	lds	r25, 0x05AC
    238a:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__addsf3>
    238e:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
    2392:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    2394:	d7 fd       	sbrc	r29, 7
    2396:	06 c0       	rjmp	.+12     	; 0x23a4 <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    2398:	c1 34       	cpi	r28, 0x41	; 65
    239a:	d1 05       	cpc	r29, r1
    239c:	2c f0       	brlt	.+10     	; 0x23a8 <Display_balance+0x80>
    239e:	c0 e4       	ldi	r28, 0x40	; 64
    23a0:	d0 e0       	ldi	r29, 0x00	; 0
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    23a4:	c0 e0       	ldi	r28, 0x00	; 0
    23a6:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    23a8:	d7 fc       	sbrc	r13, 7
    23aa:	08 c0       	rjmp	.+16     	; 0x23bc <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    23ac:	81 e8       	ldi	r24, 0x81	; 129
    23ae:	c8 16       	cp	r12, r24
    23b0:	d1 04       	cpc	r13, r1
    23b2:	34 f0       	brlt	.+12     	; 0x23c0 <Display_balance+0x98>
    23b4:	80 e8       	ldi	r24, 0x80	; 128
    23b6:	c8 2e       	mov	r12, r24
    23b8:	d1 2c       	mov	r13, r1
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    23bc:	c1 2c       	mov	r12, r1
    23be:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    23c0:	27 e3       	ldi	r18, 0x37	; 55
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	42 e0       	ldi	r20, 0x02	; 2
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	67 e0       	ldi	r22, 0x07	; 7
    23ca:	71 e0       	ldi	r23, 0x01	; 1
    23cc:	8c e0       	ldi	r24, 0x0C	; 12
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    23d4:	ee 24       	eor	r14, r14
    23d6:	e3 94       	inc	r14
    23d8:	00 e4       	ldi	r16, 0x40	; 64
    23da:	20 e8       	ldi	r18, 0x80	; 128
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	91 e0       	ldi	r25, 0x01	; 1
    23e4:	0e 94 3c 24 	call	0x4878	; 0x4878 <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    23e8:	05 e1       	ldi	r16, 0x15	; 21
    23ea:	25 e1       	ldi	r18, 0x15	; 21
    23ec:	46 e1       	ldi	r20, 0x16	; 22
    23ee:	66 e3       	ldi	r22, 0x36	; 54
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	0e 94 3c 24 	call	0x4878	; 0x4878 <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    23f8:	08 e3       	ldi	r16, 0x38	; 56
    23fa:	20 e4       	ldi	r18, 0x40	; 64
    23fc:	48 e0       	ldi	r20, 0x08	; 8
    23fe:	60 e4       	ldi	r22, 0x40	; 64
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	91 e0       	ldi	r25, 0x01	; 1
    2404:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    2408:	00 e2       	ldi	r16, 0x20	; 32
    240a:	20 e6       	ldi	r18, 0x60	; 96
    240c:	40 e2       	ldi	r20, 0x20	; 32
    240e:	60 e2       	ldi	r22, 0x20	; 32
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	91 e0       	ldi	r25, 0x01	; 1
    2414:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    2418:	01 e0       	ldi	r16, 0x01	; 1
    241a:	28 e0       	ldi	r18, 0x08	; 8
    241c:	4c 2f       	mov	r20, r28
    241e:	6c 2d       	mov	r22, r12
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	91 e0       	ldi	r25, 0x01	; 1
    2424:	0e 94 8e 24 	call	0x491c	; 0x491c <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	91 e0       	ldi	r25, 0x01	; 1
    242c:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
			clear_buffer(buffer);
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	91 e0       	ldi	r25, 0x01	; 1
    2434:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
    2438:	7d cf       	rjmp	.-262    	; 0x2334 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	0f 91       	pop	r16
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	08 95       	ret

00002448 <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    2448:	0e 94 e7 31 	call	0x63ce	; 0x63ce <init_int>
	
	while(BUTTON1 != 0)
    244c:	1f 9b       	sbis	0x03, 7	; 3
    244e:	fa c0       	rjmp	.+500    	; 0x2644 <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    2450:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    2452:	0e 94 61 48 	call	0x90c2	; 0x90c2 <CenterSticks>
		}

		RxGetChannels();
    2456:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	6f e1       	ldi	r22, 0x1F	; 31
    2464:	7a e0       	ldi	r23, 0x0A	; 10
    2466:	82 e7       	ldi	r24, 0x72	; 114
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    246e:	2a e0       	ldi	r18, 0x0A	; 10
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	6f e1       	ldi	r22, 0x1F	; 31
    2478:	7a e0       	ldi	r23, 0x0A	; 10
    247a:	80 e2       	ldi	r24, 0x20	; 32
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    2482:	24 e1       	ldi	r18, 0x14	; 20
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	6f e1       	ldi	r22, 0x1F	; 31
    248c:	7a e0       	ldi	r23, 0x0A	; 10
    248e:	83 e7       	ldi	r24, 0x73	; 115
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    2496:	2e e1       	ldi	r18, 0x1E	; 30
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	50 e0       	ldi	r21, 0x00	; 0
    249e:	6f e1       	ldi	r22, 0x1F	; 31
    24a0:	7a e0       	ldi	r23, 0x0A	; 10
    24a2:	83 e2       	ldi	r24, 0x23	; 35
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	46 e4       	ldi	r20, 0x46	; 70
    24b0:	50 e0       	ldi	r21, 0x00	; 0
    24b2:	6f e1       	ldi	r22, 0x1F	; 31
    24b4:	7a e0       	ldi	r23, 0x0A	; 10
    24b6:	8d e6       	ldi	r24, 0x6D	; 109
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    24be:	2a e0       	ldi	r18, 0x0A	; 10
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	46 e4       	ldi	r20, 0x46	; 70
    24c4:	50 e0       	ldi	r21, 0x00	; 0
    24c6:	6f e1       	ldi	r22, 0x1F	; 31
    24c8:	7a e0       	ldi	r23, 0x0A	; 10
    24ca:	8e e6       	ldi	r24, 0x6E	; 110
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    24d2:	24 e1       	ldi	r18, 0x14	; 20
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	46 e4       	ldi	r20, 0x46	; 70
    24d8:	50 e0       	ldi	r21, 0x00	; 0
    24da:	6f e1       	ldi	r22, 0x1F	; 31
    24dc:	7a e0       	ldi	r23, 0x0A	; 10
    24de:	8f e6       	ldi	r24, 0x6F	; 111
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    24e6:	2e e1       	ldi	r18, 0x1E	; 30
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	46 e4       	ldi	r20, 0x46	; 70
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	6f e1       	ldi	r22, 0x1F	; 31
    24f0:	7a e0       	ldi	r23, 0x0A	; 10
    24f2:	80 e7       	ldi	r24, 0x70	; 112
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    24fa:	80 91 3a 08 	lds	r24, 0x083A
    24fe:	90 91 3b 08 	lds	r25, 0x083B
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2502:	4a e0       	ldi	r20, 0x0A	; 10
    2504:	6a e6       	ldi	r22, 0x6A	; 106
    2506:	75 e0       	ldi	r23, 0x05	; 5
    2508:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	45 e2       	ldi	r20, 0x25	; 37
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	6f e1       	ldi	r22, 0x1F	; 31
    2516:	7a e0       	ldi	r23, 0x0A	; 10
    2518:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    251c:	80 91 3e 08 	lds	r24, 0x083E
    2520:	90 91 3f 08 	lds	r25, 0x083F
    2524:	4a e0       	ldi	r20, 0x0A	; 10
    2526:	6a e6       	ldi	r22, 0x6A	; 106
    2528:	75 e0       	ldi	r23, 0x05	; 5
    252a:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
    252e:	2a e0       	ldi	r18, 0x0A	; 10
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	45 e2       	ldi	r20, 0x25	; 37
    2534:	50 e0       	ldi	r21, 0x00	; 0
    2536:	6f e1       	ldi	r22, 0x1F	; 31
    2538:	7a e0       	ldi	r23, 0x0A	; 10
    253a:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    253e:	80 91 40 08 	lds	r24, 0x0840
    2542:	90 91 41 08 	lds	r25, 0x0841
    2546:	4a e0       	ldi	r20, 0x0A	; 10
    2548:	6a e6       	ldi	r22, 0x6A	; 106
    254a:	75 e0       	ldi	r23, 0x05	; 5
    254c:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
    2550:	24 e1       	ldi	r18, 0x14	; 20
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	45 e2       	ldi	r20, 0x25	; 37
    2556:	50 e0       	ldi	r21, 0x00	; 0
    2558:	6f e1       	ldi	r22, 0x1F	; 31
    255a:	7a e0       	ldi	r23, 0x0A	; 10
    255c:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    2560:	80 91 42 08 	lds	r24, 0x0842
    2564:	90 91 43 08 	lds	r25, 0x0843
    2568:	4a e0       	ldi	r20, 0x0A	; 10
    256a:	6a e6       	ldi	r22, 0x6A	; 106
    256c:	75 e0       	ldi	r23, 0x05	; 5
    256e:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
    2572:	2e e1       	ldi	r18, 0x1E	; 30
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	45 e2       	ldi	r20, 0x25	; 37
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	6f e1       	ldi	r22, 0x1F	; 31
    257c:	7a e0       	ldi	r23, 0x0A	; 10
    257e:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    2582:	80 91 44 08 	lds	r24, 0x0844
    2586:	90 91 45 08 	lds	r25, 0x0845
    258a:	4a e0       	ldi	r20, 0x0A	; 10
    258c:	6a e6       	ldi	r22, 0x6A	; 106
    258e:	75 e0       	ldi	r23, 0x05	; 5
    2590:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	44 e6       	ldi	r20, 0x64	; 100
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	6f e1       	ldi	r22, 0x1F	; 31
    259e:	7a e0       	ldi	r23, 0x0A	; 10
    25a0:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    25a4:	80 91 46 08 	lds	r24, 0x0846
    25a8:	90 91 47 08 	lds	r25, 0x0847
    25ac:	4a e0       	ldi	r20, 0x0A	; 10
    25ae:	6a e6       	ldi	r22, 0x6A	; 106
    25b0:	75 e0       	ldi	r23, 0x05	; 5
    25b2:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
    25b6:	2a e0       	ldi	r18, 0x0A	; 10
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	44 e6       	ldi	r20, 0x64	; 100
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	6f e1       	ldi	r22, 0x1F	; 31
    25c0:	7a e0       	ldi	r23, 0x0A	; 10
    25c2:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    25c6:	80 91 48 08 	lds	r24, 0x0848
    25ca:	90 91 49 08 	lds	r25, 0x0849
    25ce:	4a e0       	ldi	r20, 0x0A	; 10
    25d0:	6a e6       	ldi	r22, 0x6A	; 106
    25d2:	75 e0       	ldi	r23, 0x05	; 5
    25d4:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
    25d8:	24 e1       	ldi	r18, 0x14	; 20
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	44 e6       	ldi	r20, 0x64	; 100
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	6f e1       	ldi	r22, 0x1F	; 31
    25e2:	7a e0       	ldi	r23, 0x0A	; 10
    25e4:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    25e8:	80 91 4a 08 	lds	r24, 0x084A
    25ec:	90 91 4b 08 	lds	r25, 0x084B
    25f0:	4a e0       	ldi	r20, 0x0A	; 10
    25f2:	6a e6       	ldi	r22, 0x6A	; 106
    25f4:	75 e0       	ldi	r23, 0x05	; 5
    25f6:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
    25fa:	2e e1       	ldi	r18, 0x1E	; 30
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	44 e6       	ldi	r20, 0x64	; 100
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	6f e1       	ldi	r22, 0x1F	; 31
    2604:	7a e0       	ldi	r23, 0x0A	; 10
    2606:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    260a:	29 e3       	ldi	r18, 0x39	; 57
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	67 e0       	ldi	r22, 0x07	; 7
    2614:	71 e0       	ldi	r23, 0x01	; 1
    2616:	8c e0       	ldi	r24, 0x0C	; 12
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    261e:	27 e3       	ldi	r18, 0x37	; 55
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4e e6       	ldi	r20, 0x6E	; 110
    2624:	50 e0       	ldi	r21, 0x00	; 0
    2626:	6f e1       	ldi	r22, 0x1F	; 31
    2628:	7a e0       	ldi	r23, 0x0A	; 10
    262a:	8c e3       	ldi	r24, 0x3C	; 60
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
		clear_buffer(buffer);
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	91 e0       	ldi	r25, 0x01	; 1
    263e:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
    2642:	04 cf       	rjmp	.-504    	; 0x244c <Display_rcinput+0x4>
	}
}
    2644:	08 95       	ret

00002646 <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    2646:	cf 93       	push	r28
	bool	first_time = true;
	
	clear_buffer(buffer);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	91 e0       	ldi	r25, 0x01	; 1
    264c:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    2650:	c1 e0       	ldi	r28, 0x01	; 1
	
	clear_buffer(buffer);
	
	// While BACK not pressed
	while(BUTTON1 != 0)
    2652:	1f 9b       	sbis	0x03, 7	; 3
    2654:	e7 c0       	rjmp	.+462    	; 0x2824 <Display_sensors+0x1de>
	{
		ReadGyros();
    2656:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <ReadGyros>
		ReadAcc();
    265a:	0e 94 14 10 	call	0x2028	; 0x2028 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	45 e2       	ldi	r20, 0x25	; 37
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	6f e1       	ldi	r22, 0x1F	; 31
    2668:	7a e0       	ldi	r23, 0x0A	; 10
    266a:	8a e1       	ldi	r24, 0x1A	; 26
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	4d e4       	ldi	r20, 0x4D	; 77
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	6f e1       	ldi	r22, 0x1F	; 31
    267c:	7a e0       	ldi	r23, 0x0A	; 10
    267e:	8e e1       	ldi	r24, 0x1E	; 30
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    2686:	2d e0       	ldi	r18, 0x0D	; 13
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	45 e0       	ldi	r20, 0x05	; 5
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	6f e1       	ldi	r22, 0x1F	; 31
    2690:	7a e0       	ldi	r23, 0x0A	; 10
    2692:	8b e1       	ldi	r24, 0x1B	; 27
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    269a:	27 e1       	ldi	r18, 0x17	; 23
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	45 e0       	ldi	r20, 0x05	; 5
    26a0:	50 e0       	ldi	r21, 0x00	; 0
    26a2:	6f e1       	ldi	r22, 0x1F	; 31
    26a4:	7a e0       	ldi	r23, 0x0A	; 10
    26a6:	8c e1       	ldi	r24, 0x1C	; 28
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    26ae:	21 e2       	ldi	r18, 0x21	; 33
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	45 e0       	ldi	r20, 0x05	; 5
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	6f e1       	ldi	r22, 0x1F	; 31
    26b8:	7a e0       	ldi	r23, 0x0A	; 10
    26ba:	8d e1       	ldi	r24, 0x1D	; 29
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
    26c2:	4a e0       	ldi	r20, 0x0A	; 10
    26c4:	6a e6       	ldi	r22, 0x6A	; 106
    26c6:	75 e0       	ldi	r23, 0x05	; 5
    26c8:	80 91 83 05 	lds	r24, 0x0583
    26cc:	90 91 84 05 	lds	r25, 0x0584
    26d0:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    26d4:	2d e0       	ldi	r18, 0x0D	; 13
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	48 e2       	ldi	r20, 0x28	; 40
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	6f e1       	ldi	r22, 0x1F	; 31
    26de:	7a e0       	ldi	r23, 0x0A	; 10
    26e0:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
    26e4:	4a e0       	ldi	r20, 0x0A	; 10
    26e6:	6a e6       	ldi	r22, 0x6A	; 106
    26e8:	75 e0       	ldi	r23, 0x05	; 5
    26ea:	80 91 85 05 	lds	r24, 0x0585
    26ee:	90 91 86 05 	lds	r25, 0x0586
    26f2:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    26f6:	27 e1       	ldi	r18, 0x17	; 23
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	48 e2       	ldi	r20, 0x28	; 40
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	6f e1       	ldi	r22, 0x1F	; 31
    2700:	7a e0       	ldi	r23, 0x0A	; 10
    2702:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
    2706:	4a e0       	ldi	r20, 0x0A	; 10
    2708:	6a e6       	ldi	r22, 0x6A	; 106
    270a:	75 e0       	ldi	r23, 0x05	; 5
    270c:	80 91 87 05 	lds	r24, 0x0587
    2710:	90 91 88 05 	lds	r25, 0x0588
    2714:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2718:	21 e2       	ldi	r18, 0x21	; 33
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	48 e2       	ldi	r20, 0x28	; 40
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	6f e1       	ldi	r22, 0x1F	; 31
    2722:	7a e0       	ldi	r23, 0x0A	; 10
    2724:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
    2728:	4a e0       	ldi	r20, 0x0A	; 10
    272a:	6a e6       	ldi	r22, 0x6A	; 106
    272c:	75 e0       	ldi	r23, 0x05	; 5
    272e:	80 91 3e 05 	lds	r24, 0x053E
    2732:	90 91 3f 05 	lds	r25, 0x053F
    2736:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    273a:	2d e0       	ldi	r18, 0x0D	; 13
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e5       	ldi	r20, 0x50	; 80
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	6f e1       	ldi	r22, 0x1F	; 31
    2744:	7a e0       	ldi	r23, 0x0A	; 10
    2746:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
    274a:	4a e0       	ldi	r20, 0x0A	; 10
    274c:	6a e6       	ldi	r22, 0x6A	; 106
    274e:	75 e0       	ldi	r23, 0x05	; 5
    2750:	80 91 40 05 	lds	r24, 0x0540
    2754:	90 91 41 05 	lds	r25, 0x0541
    2758:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    275c:	27 e1       	ldi	r18, 0x17	; 23
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e5       	ldi	r20, 0x50	; 80
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	6f e1       	ldi	r22, 0x1F	; 31
    2766:	7a e0       	ldi	r23, 0x0A	; 10
    2768:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
    276c:	4a e0       	ldi	r20, 0x0A	; 10
    276e:	6a e6       	ldi	r22, 0x6A	; 106
    2770:	75 e0       	ldi	r23, 0x05	; 5
    2772:	80 91 42 05 	lds	r24, 0x0542
    2776:	90 91 43 05 	lds	r25, 0x0543
    277a:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    277e:	21 e2       	ldi	r18, 0x21	; 33
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e5       	ldi	r20, 0x50	; 80
    2784:	50 e0       	ldi	r21, 0x00	; 0
    2786:	6f e1       	ldi	r22, 0x1F	; 31
    2788:	7a e0       	ldi	r23, 0x0A	; 10
    278a:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    278e:	29 e3       	ldi	r18, 0x39	; 57
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	67 e0       	ldi	r22, 0x07	; 7
    2798:	71 e0       	ldi	r23, 0x01	; 1
    279a:	8c e0       	ldi	r24, 0x0C	; 12
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    27a2:	27 e3       	ldi	r18, 0x37	; 55
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4c e6       	ldi	r20, 0x6C	; 108
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	6f e1       	ldi	r22, 0x1F	; 31
    27ac:	7a e0       	ldi	r23, 0x0A	; 10
    27ae:	8c e3       	ldi	r24, 0x3C	; 60
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    27b6:	27 e3       	ldi	r18, 0x37	; 55
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	4b e4       	ldi	r20, 0x4B	; 75
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	6f e1       	ldi	r22, 0x1F	; 31
    27c0:	7a e0       	ldi	r23, 0x0A	; 10
    27c2:	89 e1       	ldi	r24, 0x19	; 25
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
		clear_buffer(buffer);
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
	
		if (first_time)
    27da:	c1 11       	cpse	r28, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    27dc:	0e 94 d6 37 	call	0x6fac	; 0x6fac <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    27e0:	1c 99       	sbic	0x03, 4	; 3
    27e2:	10 c0       	rjmp	.+32     	; 0x2804 <Display_sensors+0x1be>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    27e4:	0e 94 d6 37 	call	0x6fac	; 0x6fac <Wait_BUTTON4>
    27e8:	2f e3       	ldi	r18, 0x3F	; 63
    27ea:	82 e4       	ldi	r24, 0x42	; 66
    27ec:	9f e0       	ldi	r25, 0x0F	; 15
    27ee:	21 50       	subi	r18, 0x01	; 1
    27f0:	80 40       	sbci	r24, 0x00	; 0
    27f2:	90 40       	sbci	r25, 0x00	; 0
    27f4:	e1 f7       	brne	.-8      	; 0x27ee <Display_sensors+0x1a8>
    27f6:	00 c0       	rjmp	.+0      	; 0x27f8 <Display_sensors+0x1b2>
    27f8:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    27fa:	0e 94 32 26 	call	0x4c64	; 0x4c64 <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	0e 94 78 10 	call	0x20f0	; 0x20f0 <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    2804:	1d 99       	sbic	0x03, 5	; 3
    2806:	0c c0       	rjmp	.+24     	; 0x2820 <Display_sensors+0x1da>
    2808:	2f e3       	ldi	r18, 0x3F	; 63
    280a:	82 e4       	ldi	r24, 0x42	; 66
    280c:	9f e0       	ldi	r25, 0x0F	; 15
    280e:	21 50       	subi	r18, 0x01	; 1
    2810:	80 40       	sbci	r24, 0x00	; 0
    2812:	90 40       	sbci	r25, 0x00	; 0
    2814:	e1 f7       	brne	.-8      	; 0x280e <Display_sensors+0x1c8>
    2816:	00 c0       	rjmp	.+0      	; 0x2818 <Display_sensors+0x1d2>
    2818:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <CalibrateAcc>
    2820:	c0 e0       	ldi	r28, 0x00	; 0
    2822:	17 cf       	rjmp	.-466    	; 0x2652 <Display_sensors+0xc>
		}		
	}
}
    2824:	cf 91       	pop	r28
    2826:	08 95       	ret

00002828 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2828:	bf 92       	push	r11
    282a:	cf 92       	push	r12
    282c:	df 92       	push	r13
    282e:	ef 92       	push	r14
    2830:	ff 92       	push	r15
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29
    283a:	00 d0       	rcall	.+0      	; 0x283c <Display_status+0x14>
    283c:	00 d0       	rcall	.+0      	; 0x283e <Display_status+0x16>
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;
	//uint16_t x_text = 0;

	clear_buffer(buffer);
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	91 e0       	ldi	r25, 0x01	; 1
    2846:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e0       	ldi	r20, 0x00	; 0
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	6f e1       	ldi	r22, 0x1F	; 31
    2854:	7a e0       	ldi	r23, 0x0A	; 10
    2856:	88 e0       	ldi	r24, 0x08	; 8
    2858:	91 e0       	ldi	r25, 0x01	; 1
    285a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    285e:	2c e0       	ldi	r18, 0x0C	; 12
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e0       	ldi	r20, 0x00	; 0
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	6f e1       	ldi	r22, 0x1F	; 31
    2868:	7a e0       	ldi	r23, 0x0A	; 10
    286a:	8a e0       	ldi	r24, 0x0A	; 10
    286c:	91 e0       	ldi	r25, 0x01	; 1
    286e:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    2872:	28 e1       	ldi	r18, 0x18	; 24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e0       	ldi	r20, 0x00	; 0
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	6f e1       	ldi	r22, 0x1F	; 31
    287c:	7a e0       	ldi	r23, 0x0A	; 10
    287e:	8b e0       	ldi	r24, 0x0B	; 11
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    2886:	28 e1       	ldi	r18, 0x18	; 24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	48 e5       	ldi	r20, 0x58	; 88
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	6f e1       	ldi	r22, 0x1F	; 31
    2890:	7a e0       	ldi	r23, 0x0A	; 10
    2892:	87 e1       	ldi	r24, 0x17	; 23
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    289a:	2b e3       	ldi	r18, 0x3B	; 59
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	67 e0       	ldi	r22, 0x07	; 7
    28a4:	71 e0       	ldi	r23, 0x01	; 1
    28a6:	89 e0       	ldi	r24, 0x09	; 9
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    28ae:	27 e3       	ldi	r18, 0x37	; 55
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	4a e0       	ldi	r20, 0x0A	; 10
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	6f e1       	ldi	r22, 0x1F	; 31
    28b8:	7a e0       	ldi	r23, 0x0A	; 10
    28ba:	8e e0       	ldi	r24, 0x0E	; 14
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    28c2:	40 91 ea 05 	lds	r20, 0x05EA
    28c6:	55 27       	eor	r21, r21
    28c8:	47 fd       	sbrc	r20, 7
    28ca:	50 95       	com	r21
    28cc:	42 5c       	subi	r20, 0xC2	; 194
    28ce:	5f 4f       	sbci	r21, 0xFF	; 255
    28d0:	0c e0       	ldi	r16, 0x0C	; 12
    28d2:	2d e2       	ldi	r18, 0x2D	; 45
    28d4:	61 e0       	ldi	r22, 0x01	; 1
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 a0 32 	call	0x6540	; 0x6540 <print_menu_text>
    28de:	4a e0       	ldi	r20, 0x0A	; 10
    28e0:	6a e6       	ldi	r22, 0x6A	; 106
    28e2:	75 e0       	ldi	r23, 0x05	; 5
    28e4:	80 91 21 05 	lds	r24, 0x0521
    28e8:	90 91 22 05 	lds	r25, 0x0522
    28ec:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    28f0:	28 e1       	ldi	r18, 0x18	; 24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4e e6       	ldi	r20, 0x6E	; 110
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	6f e1       	ldi	r22, 0x1F	; 31
    28fa:	7a e0       	ldi	r23, 0x0A	; 10
    28fc:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    2900:	80 91 ea 05 	lds	r24, 0x05EA
    2904:	81 30       	cpi	r24, 0x01	; 1
    2906:	d9 f4       	brne	.+54     	; 0x293e <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    2908:	2c e0       	ldi	r18, 0x0C	; 12
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	4d e4       	ldi	r20, 0x4D	; 77
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	6f e1       	ldi	r22, 0x1F	; 31
    2912:	7a e0       	ldi	r23, 0x0A	; 10
    2914:	88 e1       	ldi	r24, 0x18	; 24
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    291c:	80 91 1c 05 	lds	r24, 0x051C
    2920:	90 91 1d 05 	lds	r25, 0x051D
    2924:	4a e0       	ldi	r20, 0x0A	; 10
    2926:	6a e6       	ldi	r22, 0x6A	; 106
    2928:	75 e0       	ldi	r23, 0x05	; 5
    292a:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
    292e:	2c e0       	ldi	r18, 0x0C	; 12
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	4e e6       	ldi	r20, 0x6E	; 110
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	6f e1       	ldi	r22, 0x1F	; 31
    2938:	7a e0       	ldi	r23, 0x0A	; 10
    293a:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    293e:	80 91 21 05 	lds	r24, 0x0521
    2942:	90 91 22 05 	lds	r25, 0x0522
    2946:	18 16       	cp	r1, r24
    2948:	19 06       	cpc	r1, r25
    294a:	4c f0       	brlt	.+18     	; 0x295e <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    294c:	28 e1       	ldi	r18, 0x18	; 24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	4d e2       	ldi	r20, 0x2D	; 45
    2952:	50 e0       	ldi	r21, 0x00	; 0
    2954:	6f e1       	ldi	r22, 0x1F	; 31
    2956:	7a e0       	ldi	r23, 0x0A	; 10
    2958:	80 e3       	ldi	r24, 0x30	; 48
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	31 c0       	rjmp	.+98     	; 0x29c0 <Display_status+0x198>
	}
	else if (transition >= 100)
    295e:	84 36       	cpi	r24, 0x64	; 100
    2960:	91 05       	cpc	r25, r1
    2962:	4c f0       	brlt	.+18     	; 0x2976 <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    2964:	28 e1       	ldi	r18, 0x18	; 24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	4d e2       	ldi	r20, 0x2D	; 45
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	6f e1       	ldi	r22, 0x1F	; 31
    296e:	7a e0       	ldi	r23, 0x0A	; 10
    2970:	82 e3       	ldi	r24, 0x32	; 50
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	25 c0       	rjmp	.+74     	; 0x29c0 <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    2976:	20 91 f0 05 	lds	r18, 0x05F0
    297a:	33 27       	eor	r19, r19
    297c:	27 fd       	sbrc	r18, 7
    297e:	30 95       	com	r19
    2980:	82 17       	cp	r24, r18
    2982:	93 07       	cpc	r25, r19
    2984:	49 f4       	brne	.+18     	; 0x2998 <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    2986:	28 e1       	ldi	r18, 0x18	; 24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4d e2       	ldi	r20, 0x2D	; 45
    298c:	50 e0       	ldi	r21, 0x00	; 0
    298e:	6f e1       	ldi	r22, 0x1F	; 31
    2990:	7a e0       	ldi	r23, 0x0A	; 10
    2992:	81 e3       	ldi	r24, 0x31	; 49
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	14 c0       	rjmp	.+40     	; 0x29c0 <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    2998:	82 17       	cp	r24, r18
    299a:	93 07       	cpc	r25, r19
    299c:	4c f4       	brge	.+18     	; 0x29b0 <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    299e:	28 e1       	ldi	r18, 0x18	; 24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	4d e2       	ldi	r20, 0x2D	; 45
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	6f e1       	ldi	r22, 0x1F	; 31
    29a8:	7a e0       	ldi	r23, 0x0A	; 10
    29aa:	83 e3       	ldi	r24, 0x33	; 51
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	08 c0       	rjmp	.+16     	; 0x29c0 <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    29b0:	28 e1       	ldi	r18, 0x18	; 24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	4d e2       	ldi	r20, 0x2D	; 45
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	6f e1       	ldi	r22, 0x1F	; 31
    29ba:	7a e0       	ldi	r23, 0x0A	; 10
    29bc:	84 e3       	ldi	r24, 0x34	; 52
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
	}


	// Don't display battery text if there are error messages
	if (General_error == 0)
    29c4:	80 91 20 05 	lds	r24, 0x0520
    29c8:	81 11       	cpse	r24, r1
    29ca:	85 c0       	rjmp	.+266    	; 0x2ad6 <Display_status+0x2ae>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(133,(const unsigned char*)Verdana8,0,36); 	// Battery
    29cc:	24 e2       	ldi	r18, 0x24	; 36
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	6f e1       	ldi	r22, 0x1F	; 31
    29d6:	7a e0       	ldi	r23, 0x0A	; 10
    29d8:	85 e8       	ldi	r24, 0x85	; 133
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

		vbat_temp = GetVbat();
    29e0:	0e 94 a1 4a 	call	0x9542	; 0x9542 <GetVbat>
    29e4:	6c 01       	movw	r12, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    29e6:	64 e6       	ldi	r22, 0x64	; 100
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__udivmodhi4>
    29ee:	8b 01       	movw	r16, r22
    29f0:	4a e0       	ldi	r20, 0x0A	; 10
    29f2:	6a e6       	ldi	r22, 0x6A	; 106
    29f4:	75 e0       	ldi	r23, 0x05	; 5
    29f6:	c8 01       	movw	r24, r16
    29f8:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    29fc:	ae 01       	movw	r20, r28
    29fe:	4f 5f       	subi	r20, 0xFF	; 255
    2a00:	5f 4f       	sbci	r21, 0xFF	; 255
    2a02:	6f e1       	ldi	r22, 0x1F	; 31
    2a04:	7a e0       	ldi	r23, 0x0A	; 10
    2a06:	0e 94 c0 41 	call	0x8380	; 0x8380 <mugui_text_sizestring>
    2a0a:	4a e0       	ldi	r20, 0x0A	; 10
    2a0c:	6a e6       	ldi	r22, 0x6A	; 106
    2a0e:	75 e0       	ldi	r23, 0x05	; 5
    2a10:	c8 01       	movw	r24, r16
    2a12:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    2a16:	24 e2       	ldi	r18, 0x24	; 36
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	4d e2       	ldi	r20, 0x2D	; 45
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	6f e1       	ldi	r22, 0x1F	; 31
    2a20:	7a e0       	ldi	r23, 0x0A	; 10
    2a22:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2a26:	2c e9       	ldi	r18, 0x9C	; 156
    2a28:	20 03       	mulsu	r18, r16
    2a2a:	70 01       	movw	r14, r0
    2a2c:	21 9f       	mul	r18, r17
    2a2e:	f0 0c       	add	r15, r0
    2a30:	11 24       	eor	r1, r1
    2a32:	ec 0c       	add	r14, r12
    2a34:	fd 1c       	adc	r15, r13

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2a36:	09 81       	ldd	r16, Y+1	; 0x01
    2a38:	11 27       	eor	r17, r17
    2a3a:	07 fd       	sbrc	r16, 7
    2a3c:	10 95       	com	r17
    2a3e:	03 5d       	subi	r16, 0xD3	; 211
    2a40:	1f 4f       	sbci	r17, 0xFF	; 255
    2a42:	24 e2       	ldi	r18, 0x24	; 36
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	a8 01       	movw	r20, r16
    2a48:	6f e1       	ldi	r22, 0x1F	; 31
    2a4a:	7a e0       	ldi	r23, 0x0A	; 10
    2a4c:	8c e0       	ldi	r24, 0x0C	; 12
    2a4e:	91 e0       	ldi	r25, 0x01	; 1
    2a50:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2a54:	ae 01       	movw	r20, r28
    2a56:	4f 5f       	subi	r20, 0xFF	; 255
    2a58:	5f 4f       	sbci	r21, 0xFF	; 255
    2a5a:	6f e1       	ldi	r22, 0x1F	; 31
    2a5c:	7a e0       	ldi	r23, 0x0A	; 10
    2a5e:	8a e0       	ldi	r24, 0x0A	; 10
    2a60:	95 e0       	ldi	r25, 0x05	; 5
    2a62:	0e 94 c0 41 	call	0x8380	; 0x8380 <mugui_text_sizestring>
		pos3 = size.x;
    2a66:	c9 80       	ldd	r12, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2a68:	ae 01       	movw	r20, r28
    2a6a:	4f 5f       	subi	r20, 0xFF	; 255
    2a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6e:	6f e1       	ldi	r22, 0x1F	; 31
    2a70:	7a e0       	ldi	r23, 0x0A	; 10
    2a72:	8c e0       	ldi	r24, 0x0C	; 12
    2a74:	95 e0       	ldi	r25, 0x05	; 5
    2a76:	0e 94 c0 41 	call	0x8380	; 0x8380 <mugui_text_sizestring>
		pos2 = size.x;
    2a7a:	b9 80       	ldd	r11, Y+1	; 0x01
    2a7c:	dd 24       	eor	r13, r13
    2a7e:	c7 fc       	sbrc	r12, 7
    2a80:	d0 94       	com	r13

		if (vbat_temp >= 10)
    2a82:	8a e0       	ldi	r24, 0x0A	; 10
    2a84:	e8 16       	cp	r14, r24
    2a86:	f1 04       	cpc	r15, r1
    2a88:	40 f0       	brcs	.+16     	; 0x2a9a <Display_status+0x272>
    2a8a:	4a e0       	ldi	r20, 0x0A	; 10
    2a8c:	6a e6       	ldi	r22, 0x6A	; 106
    2a8e:	75 e0       	ldi	r23, 0x05	; 5
    2a90:	c7 01       	movw	r24, r14
    2a92:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2a96:	a8 01       	movw	r20, r16
    2a98:	16 c0       	rjmp	.+44     	; 0x2ac6 <Display_status+0x29e>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2a9a:	a8 01       	movw	r20, r16
    2a9c:	4c 0d       	add	r20, r12
    2a9e:	5d 1d       	adc	r21, r13
    2aa0:	24 e2       	ldi	r18, 0x24	; 36
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	6f e1       	ldi	r22, 0x1F	; 31
    2aa6:	7a e0       	ldi	r23, 0x0A	; 10
    2aa8:	8d e0       	ldi	r24, 0x0D	; 13
    2aaa:	91 e0       	ldi	r25, 0x01	; 1
    2aac:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
    2ab0:	4a e0       	ldi	r20, 0x0A	; 10
    2ab2:	6a e6       	ldi	r22, 0x6A	; 106
    2ab4:	75 e0       	ldi	r23, 0x05	; 5
    2ab6:	c7 01       	movw	r24, r14
    2ab8:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2abc:	a8 01       	movw	r20, r16
    2abe:	4b 0d       	add	r20, r11
    2ac0:	51 1d       	adc	r21, r1
    2ac2:	b7 fc       	sbrc	r11, 7
    2ac4:	5a 95       	dec	r21
    2ac6:	4c 0d       	add	r20, r12
    2ac8:	5d 1d       	adc	r21, r13
    2aca:	24 e2       	ldi	r18, 0x24	; 36
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	6f e1       	ldi	r22, 0x1F	; 31
    2ad0:	7a e0       	ldi	r23, 0x0A	; 10
    2ad2:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
		}
	}
	
	// Display error messages
	if (General_error != 0)
    2ad6:	80 91 20 05 	lds	r24, 0x0520
    2ada:	88 23       	and	r24, r24
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <Display_status+0x2b8>
    2ade:	53 c0       	rjmp	.+166    	; 0x2b86 <Display_status+0x35e>
	{
		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    2ae0:	80 91 20 05 	lds	r24, 0x0520
    2ae4:	83 ff       	sbrs	r24, 3
    2ae6:	13 c0       	rjmp	.+38     	; 0x2b0e <Display_status+0x2e6>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    2ae8:	25 e2       	ldi	r18, 0x25	; 37
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	4f e0       	ldi	r20, 0x0F	; 15
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	61 e7       	ldi	r22, 0x71	; 113
    2af2:	71 e0       	ldi	r23, 0x01	; 1
    2af4:	86 e8       	ldi	r24, 0x86	; 134
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    2afc:	25 e2       	ldi	r18, 0x25	; 37
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	4f e4       	ldi	r20, 0x4F	; 79
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	61 e7       	ldi	r22, 0x71	; 113
    2b06:	71 e0       	ldi	r23, 0x01	; 1
    2b08:	8f e0       	ldi	r24, 0x0F	; 15
    2b0a:	91 e0       	ldi	r25, 0x01	; 1
    2b0c:	3a c0       	rjmp	.+116    	; 0x2b82 <Display_status+0x35a>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    2b0e:	80 91 20 05 	lds	r24, 0x0520
    2b12:	81 ff       	sbrs	r24, 1
    2b14:	13 c0       	rjmp	.+38     	; 0x2b3c <Display_status+0x314>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    2b16:	25 e2       	ldi	r18, 0x25	; 37
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	4e e1       	ldi	r20, 0x1E	; 30
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	61 e7       	ldi	r22, 0x71	; 113
    2b20:	71 e0       	ldi	r23, 0x01	; 1
    2b22:	8b e4       	ldi	r24, 0x4B	; 75
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    2b2a:	25 e2       	ldi	r18, 0x25	; 37
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	47 e3       	ldi	r20, 0x37	; 55
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	61 e7       	ldi	r22, 0x71	; 113
    2b34:	71 e0       	ldi	r23, 0x01	; 1
    2b36:	80 e1       	ldi	r24, 0x10	; 16
    2b38:	91 e0       	ldi	r25, 0x01	; 1
    2b3a:	23 c0       	rjmp	.+70     	; 0x2b82 <Display_status+0x35a>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    2b3c:	80 91 20 05 	lds	r24, 0x0520
    2b40:	80 ff       	sbrs	r24, 0
    2b42:	13 c0       	rjmp	.+38     	; 0x2b6a <Display_status+0x342>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    2b44:	25 e2       	ldi	r18, 0x25	; 37
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	4b e0       	ldi	r20, 0x0B	; 11
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	61 e7       	ldi	r22, 0x71	; 113
    2b4e:	71 e0       	ldi	r23, 0x01	; 1
    2b50:	89 e6       	ldi	r24, 0x69	; 105
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    2b58:	25 e2       	ldi	r18, 0x25	; 37
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	42 e5       	ldi	r20, 0x52	; 82
    2b5e:	50 e0       	ldi	r21, 0x00	; 0
    2b60:	61 e7       	ldi	r22, 0x71	; 113
    2b62:	71 e0       	ldi	r23, 0x01	; 1
    2b64:	8e e0       	ldi	r24, 0x0E	; 14
    2b66:	91 e0       	ldi	r25, 0x01	; 1
    2b68:	0c c0       	rjmp	.+24     	; 0x2b82 <Display_status+0x35a>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2b6a:	80 91 20 05 	lds	r24, 0x0520
    2b6e:	82 ff       	sbrs	r24, 2
    2b70:	0a c0       	rjmp	.+20     	; 0x2b86 <Display_status+0x35e>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    2b72:	25 e2       	ldi	r18, 0x25	; 37
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	49 e1       	ldi	r20, 0x19	; 25
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	61 e7       	ldi	r22, 0x71	; 113
    2b7c:	71 e0       	ldi	r23, 0x01	; 1
    2b7e:	82 e1       	ldi	r24, 0x12	; 18
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
	clear_buffer(buffer);
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	91 e0       	ldi	r25, 0x01	; 1
    2b92:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
}
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	ff 90       	pop	r15
    2ba8:	ef 90       	pop	r14
    2baa:	df 90       	pop	r13
    2bac:	cf 90       	pop	r12
    2bae:	bf 90       	pop	r11
    2bb0:	08 95       	ret

00002bb2 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2bb2:	af 92       	push	r10
    2bb4:	bf 92       	push	r11
    2bb6:	cf 92       	push	r12
    2bb8:	df 92       	push	r13
    2bba:	ef 92       	push	r14
    2bbc:	ff 92       	push	r15
    2bbe:	0f 93       	push	r16
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2bc6:	d0 90 f1 05 	lds	r13, 0x05F1
	temp_elevator = Config.ElevatorPol;
    2bca:	f0 90 f2 05 	lds	r15, 0x05F2
	temp_rudder = Config.RudderPol;
    2bce:	a0 90 c9 07 	lds	r10, 0x07C9

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2bd2:	10 92 f1 05 	sts	0x05F1, r1
	Config.ElevatorPol =  NORMAL;
    2bd6:	10 92 f2 05 	sts	0x05F2, r1
	Config.RudderPol = NORMAL;
    2bda:	10 92 c9 07 	sts	0x07C9, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2bde:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2be0:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2be2:	1f 9b       	sbis	0x03, 7	; 3
    2be4:	b6 c0       	rjmp	.+364    	; 0x2d52 <Display_sticks+0x1a0>
    2be6:	c1 11       	cpse	r28, r1
    2be8:	b6 c0       	rjmp	.+364    	; 0x2d56 <Display_sticks+0x1a4>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	91 e0       	ldi	r25, 0x01	; 1
    2bee:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
    2bf2:	92 e0       	ldi	r25, 0x02	; 2
    2bf4:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2bf6:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2bf8:	61 e1       	ldi	r22, 0x11	; 17
    2bfa:	61 0f       	add	r22, r17
    2bfc:	ee 24       	eor	r14, r14
    2bfe:	e3 94       	inc	r14
    2c00:	08 e2       	ldi	r16, 0x28	; 40
    2c02:	28 e2       	ldi	r18, 0x28	; 40
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	91 e0       	ldi	r25, 0x01	; 1
    2c0a:	0e 94 3c 24 	call	0x4878	; 0x4878 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2c0e:	86 e2       	ldi	r24, 0x26	; 38
    2c10:	b8 2e       	mov	r11, r24
    2c12:	b1 0e       	add	r11, r17
    2c14:	20 e3       	ldi	r18, 0x30	; 48
    2c16:	21 0f       	add	r18, r17
    2c18:	03 e0       	ldi	r16, 0x03	; 3
    2c1a:	44 e1       	ldi	r20, 0x14	; 20
    2c1c:	6b 2d       	mov	r22, r11
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	91 e0       	ldi	r25, 0x01	; 1
    2c22:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2c26:	28 e3       	ldi	r18, 0x38	; 56
    2c28:	21 0f       	add	r18, r17
    2c2a:	69 e2       	ldi	r22, 0x29	; 41
    2c2c:	61 0f       	add	r22, r17
    2c2e:	06 e0       	ldi	r16, 0x06	; 6
    2c30:	45 e1       	ldi	r20, 0x15	; 21
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	91 e0       	ldi	r25, 0x01	; 1
    2c36:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2c3a:	01 e0       	ldi	r16, 0x01	; 1
    2c3c:	22 e0       	ldi	r18, 0x02	; 2
    2c3e:	45 e1       	ldi	r20, 0x15	; 21
    2c40:	6b 2d       	mov	r22, r11
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	91 e0       	ldi	r25, 0x01	; 1
    2c46:	0e 94 8e 24 	call	0x491c	; 0x491c <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2c4a:	63 e3       	ldi	r22, 0x33	; 51
    2c4c:	61 0f       	add	r22, r17
    2c4e:	24 e0       	ldi	r18, 0x04	; 4
    2c50:	45 e0       	ldi	r20, 0x05	; 5
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	0e 94 8e 24 	call	0x491c	; 0x491c <fillcircle>
    2c5a:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2c5c:	11 f0       	breq	.+4      	; 0x2c62 <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2c5e:	14 e3       	ldi	r17, 0x34	; 52
    2c60:	cb cf       	rjmp	.-106    	; 0x2bf8 <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2c62:	29 e3       	ldi	r18, 0x39	; 57
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e0       	ldi	r20, 0x00	; 0
    2c68:	50 e0       	ldi	r21, 0x00	; 0
    2c6a:	67 e0       	ldi	r22, 0x07	; 7
    2c6c:	71 e0       	ldi	r23, 0x01	; 1
    2c6e:	8c e0       	ldi	r24, 0x0C	; 12
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2c76:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2c7a:	80 91 3e 08 	lds	r24, 0x083E
    2c7e:	90 91 3f 08 	lds	r25, 0x083F
    2c82:	80 33       	cpi	r24, 0x30	; 48
    2c84:	98 4f       	sbci	r25, 0xF8	; 248
    2c86:	3c f0       	brlt	.+14     	; 0x2c96 <Display_sticks+0xe4>
    2c88:	80 91 3e 08 	lds	r24, 0x083E
    2c8c:	90 91 3f 08 	lds	r25, 0x083F
    2c90:	81 3d       	cpi	r24, 0xD1	; 209
    2c92:	97 40       	sbci	r25, 0x07	; 7
    2c94:	6c f0       	brlt	.+26     	; 0x2cb0 <Display_sticks+0xfe>
    2c96:	d1 11       	cpse	r29, r1
    2c98:	0b c0       	rjmp	.+22     	; 0x2cb0 <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2c9a:	2b e2       	ldi	r18, 0x2B	; 43
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e1       	ldi	r20, 0x10	; 16
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	61 e7       	ldi	r22, 0x71	; 113
    2ca4:	71 e0       	ldi	r23, 0x01	; 1
    2ca6:	87 e8       	ldi	r24, 0x87	; 135
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
    2cae:	4c c0       	rjmp	.+152    	; 0x2d48 <Display_sticks+0x196>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
    2cb0:	80 91 3e 08 	lds	r24, 0x083E
    2cb4:	90 91 3f 08 	lds	r25, 0x083F
    2cb8:	84 3f       	cpi	r24, 0xF4	; 244
    2cba:	91 40       	sbci	r25, 0x01	; 1
    2cbc:	9c f4       	brge	.+38     	; 0x2ce4 <Display_sticks+0x132>
    2cbe:	80 91 3e 08 	lds	r24, 0x083E
    2cc2:	90 91 3f 08 	lds	r25, 0x083F
    2cc6:	8d 30       	cpi	r24, 0x0D	; 13
    2cc8:	9e 4f       	sbci	r25, 0xFE	; 254
    2cca:	64 f0       	brlt	.+24     	; 0x2ce4 <Display_sticks+0x132>
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2ccc:	2b e2       	ldi	r18, 0x2B	; 43
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	49 e0       	ldi	r20, 0x09	; 9
    2cd2:	50 e0       	ldi	r21, 0x00	; 0
    2cd4:	61 e7       	ldi	r22, 0x71	; 113
    2cd6:	71 e0       	ldi	r23, 0x01	; 1
    2cd8:	88 e8       	ldi	r24, 0x88	; 136
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
			{
				CalibrateStarted = true;
    2ce0:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2ce2:	32 c0       	rjmp	.+100    	; 0x2d48 <Display_sticks+0x196>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2ce4:	80 91 3e 08 	lds	r24, 0x083E
    2ce8:	90 91 3f 08 	lds	r25, 0x083F
    2cec:	97 ff       	sbrs	r25, 7
    2cee:	03 c0       	rjmp	.+6      	; 0x2cf6 <Display_sticks+0x144>
				{
					Config.AileronPol = REVERSED;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	80 93 f1 05 	sts	0x05F1, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2cf6:	80 91 40 08 	lds	r24, 0x0840
    2cfa:	90 91 41 08 	lds	r25, 0x0841
    2cfe:	97 ff       	sbrs	r25, 7
    2d00:	03 c0       	rjmp	.+6      	; 0x2d08 <Display_sticks+0x156>
				{
					Config.ElevatorPol = REVERSED;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	80 93 f2 05 	sts	0x05F2, r24
				}

				if (RCinputs[RUDDER] < 0)
    2d08:	80 91 42 08 	lds	r24, 0x0842
    2d0c:	90 91 43 08 	lds	r25, 0x0843
    2d10:	97 ff       	sbrs	r25, 7
    2d12:	03 c0       	rjmp	.+6      	; 0x2d1a <Display_sticks+0x168>
				{
					Config.RudderPol = REVERSED;
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	80 93 c9 07 	sts	0x07C9, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2d1a:	80 91 3e 08 	lds	r24, 0x083E
    2d1e:	90 91 3f 08 	lds	r25, 0x083F
    2d22:	18 16       	cp	r1, r24
    2d24:	19 06       	cpc	r1, r25
    2d26:	84 f4       	brge	.+32     	; 0x2d48 <Display_sticks+0x196>
    2d28:	80 91 40 08 	lds	r24, 0x0840
    2d2c:	90 91 41 08 	lds	r25, 0x0841
    2d30:	18 16       	cp	r1, r24
    2d32:	19 06       	cpc	r1, r25
    2d34:	4c f4       	brge	.+18     	; 0x2d48 <Display_sticks+0x196>
    2d36:	80 91 42 08 	lds	r24, 0x0842
    2d3a:	90 91 43 08 	lds	r25, 0x0843
    2d3e:	c1 e0       	ldi	r28, 0x01	; 1
    2d40:	18 16       	cp	r1, r24
    2d42:	19 06       	cpc	r1, r25
    2d44:	0c f0       	brlt	.+2      	; 0x2d48 <Display_sticks+0x196>
    2d46:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	91 e0       	ldi	r25, 0x01	; 1
    2d4c:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
    2d50:	48 cf       	rjmp	.-368    	; 0x2be2 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2d52:	cc 23       	and	r28, r28
    2d54:	39 f1       	breq	.+78     	; 0x2da4 <Display_sticks+0x1f2>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2d56:	2b e2       	ldi	r18, 0x2B	; 43
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	48 e2       	ldi	r20, 0x28	; 40
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	61 e7       	ldi	r22, 0x71	; 113
    2d60:	71 e0       	ldi	r23, 0x01	; 1
    2d62:	89 e8       	ldi	r24, 0x89	; 137
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	91 e0       	ldi	r25, 0x01	; 1
    2d6e:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
		clear_buffer(buffer);
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	91 e0       	ldi	r25, 0x01	; 1
    2d76:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
    2d7a:	8f e7       	ldi	r24, 0x7F	; 127
    2d7c:	94 e8       	ldi	r25, 0x84	; 132
    2d7e:	2e e1       	ldi	r18, 0x1E	; 30
    2d80:	81 50       	subi	r24, 0x01	; 1
    2d82:	90 40       	sbci	r25, 0x00	; 0
    2d84:	20 40       	sbci	r18, 0x00	; 0
    2d86:	e1 f7       	brne	.-8      	; 0x2d80 <Display_sticks+0x1ce>
    2d88:	00 c0       	rjmp	.+0      	; 0x2d8a <Display_sticks+0x1d8>
    2d8a:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	ff 90       	pop	r15
    2d96:	ef 90       	pop	r14
    2d98:	df 90       	pop	r13
    2d9a:	cf 90       	pop	r12
    2d9c:	bf 90       	pop	r11
    2d9e:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2da0:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2da4:	d0 92 f1 05 	sts	0x05F1, r13
		Config.ElevatorPol = temp_elevator;
    2da8:	f0 92 f2 05 	sts	0x05F2, r15
		Config.RudderPol = temp_rudder;
    2dac:	a0 92 c9 07 	sts	0x07C9, r10
	}
}
    2db0:	df 91       	pop	r29
    2db2:	cf 91       	pop	r28
    2db4:	1f 91       	pop	r17
    2db6:	0f 91       	pop	r16
    2db8:	ff 90       	pop	r15
    2dba:	ef 90       	pop	r14
    2dbc:	df 90       	pop	r13
    2dbe:	cf 90       	pop	r12
    2dc0:	bf 90       	pop	r11
    2dc2:	af 90       	pop	r10
    2dc4:	08 95       	ret

00002dc6 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	1f 92       	push	r1
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2dd6:	69 83       	std	Y+1, r22	; 0x01
    2dd8:	0e 94 cb 4d 	call	0x9b96	; 0x9b96 <__eerd_byte_m644pa>
    2ddc:	69 81       	ldd	r22, Y+1	; 0x01
    2dde:	86 17       	cp	r24, r22
    2de0:	41 f0       	breq	.+16     	; 0x2df2 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2de2:	c8 01       	movw	r24, r16
	}
}
    2de4:	0f 90       	pop	r0
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	1f 91       	pop	r17
    2dec:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2dee:	0c 94 d3 4d 	jmp	0x9ba6	; 0x9ba6 <__eewr_byte_m644pa>
	}
}
    2df2:	0f 90       	pop	r0
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	08 95       	ret

00002dfe <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    2dfe:	ef 92       	push	r14
    2e00:	ff 92       	push	r15
    2e02:	0f 93       	push	r16
    2e04:	1f 93       	push	r17
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	ec 01       	movw	r28, r24
    2e0c:	8b 01       	movw	r16, r22
    2e0e:	7a 01       	movw	r14, r20
    2e10:	e8 0e       	add	r14, r24
    2e12:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2e14:	ce 15       	cp	r28, r14
    2e16:	df 05       	cpc	r29, r15
    2e18:	39 f0       	breq	.+14     	; 0x2e28 <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2e1a:	69 91       	ld	r22, Y+
    2e1c:	c8 01       	movw	r24, r16
    2e1e:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <eeprom_write_byte_changed>
		src++;
		dest++;
    2e22:	0f 5f       	subi	r16, 0xFF	; 255
    2e24:	1f 4f       	sbci	r17, 0xFF	; 255
    2e26:	f6 cf       	rjmp	.-20     	; 0x2e14 <eeprom_write_block_changes+0x16>
	}
}
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	1f 91       	pop	r17
    2e2e:	0f 91       	pop	r16
    2e30:	ff 90       	pop	r15
    2e32:	ef 90       	pop	r14
    2e34:	08 95       	ret

00002e36 <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2e36:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2e38:	49 e0       	ldi	r20, 0x09	; 9
    2e3a:	52 e0       	ldi	r21, 0x02	; 2
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	70 e0       	ldi	r23, 0x00	; 0
    2e40:	81 ec       	ldi	r24, 0xC1	; 193
    2e42:	95 e0       	ldi	r25, 0x05	; 5
    2e44:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <eeprom_write_block_changes>
	sei();
    2e48:	78 94       	sei
    2e4a:	08 95       	ret

00002e4c <Update_V1_0_to_V1_1_B7>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 Beta 7 structure
void Update_V1_0_to_V1_1_B7(void)
{
    2e4c:	2f 92       	push	r2
    2e4e:	3f 92       	push	r3
    2e50:	4f 92       	push	r4
    2e52:	5f 92       	push	r5
    2e54:	6f 92       	push	r6
    2e56:	7f 92       	push	r7
    2e58:	8f 92       	push	r8
    2e5a:	9f 92       	push	r9
    2e5c:	af 92       	push	r10
    2e5e:	bf 92       	push	r11
    2e60:	cf 92       	push	r12
    2e62:	df 92       	push	r13
    2e64:	ef 92       	push	r14
    2e66:	ff 92       	push	r15
    2e68:	0f 93       	push	r16
    2e6a:	1f 93       	push	r17
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	c5 54       	subi	r28, 0x45	; 69
    2e76:	d1 40       	sbci	r29, 0x01	; 1
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume. For some reason it gets clobbered.
	// We mustn't use hard-coded values are these change each version.
	// Use an offset from the current Config structure address
	memcpy((void*)&temp,(void*)((&Config.setup) + (377)),1);
    2e82:	40 91 3a 07 	lds	r20, 0x073A
    2e86:	cf 5b       	subi	r28, 0xBF	; 191
    2e88:	de 4f       	sbci	r29, 0xFE	; 254
    2e8a:	48 83       	st	Y, r20
    2e8c:	c1 54       	subi	r28, 0x41	; 65
    2e8e:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
    2e90:	4a e4       	ldi	r20, 0x4A	; 74
    2e92:	50 e0       	ldi	r21, 0x00	; 0
    2e94:	6b e3       	ldi	r22, 0x3B	; 59
    2e96:	77 e0       	ldi	r23, 0x07	; 7
    2e98:	83 e8       	ldi	r24, 0x83	; 131
    2e9a:	97 e0       	ldi	r25, 0x07	; 7
    2e9c:	0e 94 84 4d 	call	0x9b08	; 0x9b08 <memmove>
    2ea0:	23 e5       	ldi	r18, 0x53	; 83
    2ea2:	36 e0       	ldi	r19, 0x06	; 6
    2ea4:	ae 01       	movw	r20, r28
    2ea6:	4f 5c       	subi	r20, 0xCF	; 207
    2ea8:	5e 4f       	sbci	r21, 0xFE	; 254
    2eaa:	ce 01       	movw	r24, r28
    2eac:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    2eae:	6d e1       	ldi	r22, 0x1D	; 29
    2eb0:	f9 01       	movw	r30, r18
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	76 2f       	mov	r23, r22
    2eb6:	01 90       	ld	r0, Z+
    2eb8:	0d 92       	st	X+, r0
    2eba:	7a 95       	dec	r23
    2ebc:	e1 f7       	brne	.-8      	; 0x2eb6 <Update_V1_0_to_V1_1_B7+0x6a>
    2ebe:	86 96       	adiw	r24, 0x26	; 38
    2ec0:	23 5e       	subi	r18, 0xE3	; 227
    2ec2:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    2ec4:	84 17       	cp	r24, r20
    2ec6:	95 07       	cpc	r25, r21
    2ec8:	99 f7       	brne	.-26     	; 0x2eb0 <Update_V1_0_to_V1_1_B7+0x64>
    2eca:	4e 01       	movw	r8, r28
    2ecc:	83 e1       	ldi	r24, 0x13	; 19
    2ece:	88 0e       	add	r8, r24
    2ed0:	91 1c       	adc	r9, r1
    2ed2:	5e 01       	movw	r10, r28
    2ed4:	94 e1       	ldi	r25, 0x14	; 20
    2ed6:	a9 0e       	add	r10, r25
    2ed8:	b1 1c       	adc	r11, r1
    2eda:	6e 01       	movw	r12, r28
    2edc:	e5 e1       	ldi	r30, 0x15	; 21
    2ede:	ce 0e       	add	r12, r30
    2ee0:	d1 1c       	adc	r13, r1
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	46 96       	adiw	r24, 0x16	; 22
    2ee6:	cf 5c       	subi	r28, 0xCF	; 207
    2ee8:	de 4f       	sbci	r29, 0xFE	; 254
    2eea:	99 83       	std	Y+1, r25	; 0x01
    2eec:	88 83       	st	Y, r24
    2eee:	c1 53       	subi	r28, 0x31	; 49
    2ef0:	d1 40       	sbci	r29, 0x01	; 1
    2ef2:	8e 01       	movw	r16, r28
    2ef4:	02 5e       	subi	r16, 0xE2	; 226
    2ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef8:	fe 01       	movw	r30, r28
    2efa:	7d 96       	adiw	r30, 0x1d	; 29
    2efc:	c7 5c       	subi	r28, 0xC7	; 199
    2efe:	de 4f       	sbci	r29, 0xFE	; 254
    2f00:	f9 83       	std	Y+1, r31	; 0x01
    2f02:	e8 83       	st	Y, r30
    2f04:	c9 53       	subi	r28, 0x39	; 57
    2f06:	d1 40       	sbci	r29, 0x01	; 1
    2f08:	06 96       	adiw	r24, 0x06	; 6
    2f0a:	cd 5c       	subi	r28, 0xCD	; 205
    2f0c:	de 4f       	sbci	r29, 0xFE	; 254
    2f0e:	99 83       	std	Y+1, r25	; 0x01
    2f10:	88 83       	st	Y, r24
    2f12:	c3 53       	subi	r28, 0x33	; 51
    2f14:	d1 40       	sbci	r29, 0x01	; 1
    2f16:	32 97       	sbiw	r30, 0x02	; 2
    2f18:	c3 5c       	subi	r28, 0xC3	; 195
    2f1a:	de 4f       	sbci	r29, 0xFE	; 254
    2f1c:	f9 83       	std	Y+1, r31	; 0x01
    2f1e:	e8 83       	st	Y, r30
    2f20:	cd 53       	subi	r28, 0x3D	; 61
    2f22:	d1 40       	sbci	r29, 0x01	; 1
    2f24:	02 97       	sbiw	r24, 0x02	; 2
    2f26:	c9 5c       	subi	r28, 0xC9	; 201
    2f28:	de 4f       	sbci	r29, 0xFE	; 254
    2f2a:	99 83       	std	Y+1, r25	; 0x01
    2f2c:	88 83       	st	Y, r24
    2f2e:	c7 53       	subi	r28, 0x37	; 55
    2f30:	d1 40       	sbci	r29, 0x01	; 1
    2f32:	32 97       	sbiw	r30, 0x02	; 2
    2f34:	c5 5c       	subi	r28, 0xC5	; 197
    2f36:	de 4f       	sbci	r29, 0xFE	; 254
    2f38:	f9 83       	std	Y+1, r31	; 0x01
    2f3a:	e8 83       	st	Y, r30
    2f3c:	cb 53       	subi	r28, 0x3B	; 59
    2f3e:	d1 40       	sbci	r29, 0x01	; 1
    2f40:	02 97       	sbiw	r24, 0x02	; 2
    2f42:	cb 5c       	subi	r28, 0xCB	; 203
    2f44:	de 4f       	sbci	r29, 0xFE	; 254
    2f46:	99 83       	std	Y+1, r25	; 0x01
    2f48:	88 83       	st	Y, r24
    2f4a:	c5 53       	subi	r28, 0x35	; 53
    2f4c:	d1 40       	sbci	r29, 0x01	; 1
    2f4e:	7e 01       	movw	r14, r28
    2f50:	97 e1       	ldi	r25, 0x17	; 23
    2f52:	e9 0e       	add	r14, r25
    2f54:	f1 1c       	adc	r15, r1
    2f56:	3e 01       	movw	r6, r28
    2f58:	e5 e0       	ldi	r30, 0x05	; 5
    2f5a:	6e 0e       	add	r6, r30
    2f5c:	71 1c       	adc	r7, r1
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	8c 0f       	add	r24, r28
    2f64:	9d 1f       	adc	r25, r29
    2f66:	83 5b       	subi	r24, 0xB3	; 179
    2f68:	9e 4f       	sbci	r25, 0xFE	; 254
    2f6a:	ce 5b       	subi	r28, 0xBE	; 190
    2f6c:	de 4f       	sbci	r29, 0xFE	; 254
    2f6e:	99 83       	std	Y+1, r25	; 0x01
    2f70:	88 83       	st	Y, r24
    2f72:	c2 54       	subi	r28, 0x42	; 66
    2f74:	d1 40       	sbci	r29, 0x01	; 1
    2f76:	fe 01       	movw	r30, r28
    2f78:	31 96       	adiw	r30, 0x01	; 1
    2f7a:	c1 5c       	subi	r28, 0xC1	; 193
    2f7c:	de 4f       	sbci	r29, 0xFE	; 254
    2f7e:	f9 83       	std	Y+1, r31	; 0x01
    2f80:	e8 83       	st	Y, r30
    2f82:	cf 53       	subi	r28, 0x3F	; 63
    2f84:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2f8a:	44 24       	eor	r4, r4
    2f8c:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    2f8e:	49 e1       	ldi	r20, 0x19	; 25
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	b3 01       	movw	r22, r6
    2f94:	c8 01       	movw	r24, r16
    2f96:	48 97       	sbiw	r24, 0x18	; 24
    2f98:	0e 94 84 4d 	call	0x9b08	; 0x9b08 <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    2f9c:	f4 01       	movw	r30, r8
    2f9e:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    2fa0:	f5 01       	movw	r30, r10
    2fa2:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    2fa4:	f6 01       	movw	r30, r12
    2fa6:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    2fa8:	cf 5c       	subi	r28, 0xCF	; 207
    2faa:	de 4f       	sbci	r29, 0xFE	; 254
    2fac:	e8 81       	ld	r30, Y
    2fae:	f9 81       	ldd	r31, Y+1	; 0x01
    2fb0:	c1 53       	subi	r28, 0x31	; 49
    2fb2:	d1 40       	sbci	r29, 0x01	; 1
    2fb4:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2fb6:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    2fb8:	36 fe       	sbrs	r3, 6
    2fba:	02 c0       	rjmp	.+4      	; 0x2fc0 <Update_V1_0_to_V1_1_B7+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2fbc:	50 82       	st	Z, r5
    2fbe:	01 c0       	rjmp	.+2      	; 0x2fc2 <Update_V1_0_to_V1_1_B7+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    2fc0:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    2fc2:	48 e0       	ldi	r20, 0x08	; 8
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	b7 01       	movw	r22, r14
    2fc8:	c8 01       	movw	r24, r16
    2fca:	01 96       	adiw	r24, 0x01	; 1
    2fcc:	cc 5b       	subi	r28, 0xBC	; 188
    2fce:	de 4f       	sbci	r29, 0xFE	; 254
    2fd0:	28 83       	st	Y, r18
    2fd2:	c4 54       	subi	r28, 0x44	; 68
    2fd4:	d1 40       	sbci	r29, 0x01	; 1
    2fd6:	cb 5b       	subi	r28, 0xBB	; 187
    2fd8:	de 4f       	sbci	r29, 0xFE	; 254
    2fda:	38 83       	st	Y, r19
    2fdc:	c5 54       	subi	r28, 0x45	; 69
    2fde:	d1 40       	sbci	r29, 0x01	; 1
    2fe0:	0e 94 84 4d 	call	0x9b08	; 0x9b08 <memmove>
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	cb 5b       	subi	r28, 0xBB	; 187
    2fea:	de 4f       	sbci	r29, 0xFE	; 254
    2fec:	38 81       	ld	r19, Y
    2fee:	c5 54       	subi	r28, 0x45	; 69
    2ff0:	d1 40       	sbci	r29, 0x01	; 1
    2ff2:	cc 5b       	subi	r28, 0xBC	; 188
    2ff4:	de 4f       	sbci	r29, 0xFE	; 254
    2ff6:	28 81       	ld	r18, Y
    2ff8:	c4 54       	subi	r28, 0x44	; 68
    2ffa:	d1 40       	sbci	r29, 0x01	; 1
    2ffc:	c1 5c       	subi	r28, 0xC1	; 193
    2ffe:	de 4f       	sbci	r29, 0xFE	; 254
    3000:	e8 81       	ld	r30, Y
    3002:	f9 81       	ldd	r31, Y+1	; 0x01
    3004:	cf 53       	subi	r28, 0x3F	; 63
    3006:	d1 40       	sbci	r29, 0x01	; 1
    3008:	e8 0f       	add	r30, r24
    300a:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    300c:	46 8d       	ldd	r20, Z+30	; 0x1e
    300e:	4d 30       	cpi	r20, 0x0D	; 13
    3010:	11 f4       	brne	.+4      	; 0x3016 <Update_V1_0_to_V1_1_B7+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    3012:	4f e0       	ldi	r20, 0x0F	; 15
    3014:	46 8f       	std	Z+30, r20	; 0x1e
    3016:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    3018:	88 30       	cpi	r24, 0x08	; 8
    301a:	91 05       	cpc	r25, r1
    301c:	79 f7       	brne	.-34     	; 0x2ffc <Update_V1_0_to_V1_1_B7+0x1b0>
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    301e:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    3020:	30 fe       	sbrs	r3, 0
    3022:	06 c0       	rjmp	.+12     	; 0x3030 <Update_V1_0_to_V1_1_B7+0x1e4>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    3024:	30 ff       	sbrs	r19, 0
    3026:	02 c0       	rjmp	.+4      	; 0x302c <Update_V1_0_to_V1_1_B7+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    3028:	50 82       	st	Z, r5
    302a:	03 c0       	rjmp	.+6      	; 0x3032 <Update_V1_0_to_V1_1_B7+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    302c:	40 82       	st	Z, r4
    302e:	01 c0       	rjmp	.+2      	; 0x3032 <Update_V1_0_to_V1_1_B7+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    3030:	10 82       	st	Z, r1
		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
		{
			if ((P2_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    3032:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    3034:	20 ff       	sbrs	r18, 0
    3036:	06 c0       	rjmp	.+12     	; 0x3044 <Update_V1_0_to_V1_1_B7+0x1f8>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    3038:	20 fe       	sbrs	r2, 0
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <Update_V1_0_to_V1_1_B7+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    303c:	50 82       	st	Z, r5
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <Update_V1_0_to_V1_1_B7+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    3040:	40 82       	st	Z, r4
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <Update_V1_0_to_V1_1_B7+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    3044:	10 82       	st	Z, r1
		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    3046:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    3048:	31 fe       	sbrs	r3, 1
    304a:	06 c0       	rjmp	.+12     	; 0x3058 <Update_V1_0_to_V1_1_B7+0x20c>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    304c:	31 ff       	sbrs	r19, 1
    304e:	02 c0       	rjmp	.+4      	; 0x3054 <Update_V1_0_to_V1_1_B7+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    3050:	50 82       	st	Z, r5
    3052:	03 c0       	rjmp	.+6      	; 0x305a <Update_V1_0_to_V1_1_B7+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    3054:	40 82       	st	Z, r4
    3056:	01 c0       	rjmp	.+2      	; 0x305a <Update_V1_0_to_V1_1_B7+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    3058:	10 82       	st	Z, r1
		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    305a:	cf 5c       	subi	r28, 0xCF	; 207
    305c:	de 4f       	sbci	r29, 0xFE	; 254
    305e:	e8 81       	ld	r30, Y
    3060:	f9 81       	ldd	r31, Y+1	; 0x01
    3062:	c1 53       	subi	r28, 0x31	; 49
    3064:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    3066:	21 ff       	sbrs	r18, 1
    3068:	06 c0       	rjmp	.+12     	; 0x3076 <Update_V1_0_to_V1_1_B7+0x22a>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    306a:	21 fe       	sbrs	r2, 1
    306c:	02 c0       	rjmp	.+4      	; 0x3072 <Update_V1_0_to_V1_1_B7+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    306e:	50 82       	st	Z, r5
    3070:	03 c0       	rjmp	.+6      	; 0x3078 <Update_V1_0_to_V1_1_B7+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    3072:	40 82       	st	Z, r4
    3074:	01 c0       	rjmp	.+2      	; 0x3078 <Update_V1_0_to_V1_1_B7+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    3076:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
		{
			if ((P1_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    3078:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    307a:	32 fe       	sbrs	r3, 2
    307c:	06 c0       	rjmp	.+12     	; 0x308a <Update_V1_0_to_V1_1_B7+0x23e>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    307e:	32 ff       	sbrs	r19, 2
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <Update_V1_0_to_V1_1_B7+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    3082:	50 82       	st	Z, r5
    3084:	03 c0       	rjmp	.+6      	; 0x308c <Update_V1_0_to_V1_1_B7+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    3086:	40 82       	st	Z, r4
    3088:	01 c0       	rjmp	.+2      	; 0x308c <Update_V1_0_to_V1_1_B7+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    308a:	10 82       	st	Z, r1
		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
		{
			if ((P2_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    308c:	cb 5c       	subi	r28, 0xCB	; 203
    308e:	de 4f       	sbci	r29, 0xFE	; 254
    3090:	e8 81       	ld	r30, Y
    3092:	f9 81       	ldd	r31, Y+1	; 0x01
    3094:	c5 53       	subi	r28, 0x35	; 53
    3096:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    3098:	22 ff       	sbrs	r18, 2
    309a:	06 c0       	rjmp	.+12     	; 0x30a8 <Update_V1_0_to_V1_1_B7+0x25c>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    309c:	22 fe       	sbrs	r2, 2
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <Update_V1_0_to_V1_1_B7+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    30a0:	50 82       	st	Z, r5
    30a2:	03 c0       	rjmp	.+6      	; 0x30aa <Update_V1_0_to_V1_1_B7+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    30a4:	40 82       	st	Z, r4
    30a6:	01 c0       	rjmp	.+2      	; 0x30aa <Update_V1_0_to_V1_1_B7+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    30a8:	10 82       	st	Z, r1
		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    30aa:	c5 5c       	subi	r28, 0xC5	; 197
    30ac:	de 4f       	sbci	r29, 0xFE	; 254
    30ae:	e8 81       	ld	r30, Y
    30b0:	f9 81       	ldd	r31, Y+1	; 0x01
    30b2:	cb 53       	subi	r28, 0x3B	; 59
    30b4:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    30b6:	33 fe       	sbrs	r3, 3
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <Update_V1_0_to_V1_1_B7+0x27a>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    30ba:	33 ff       	sbrs	r19, 3
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <Update_V1_0_to_V1_1_B7+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    30be:	50 82       	st	Z, r5
    30c0:	03 c0       	rjmp	.+6      	; 0x30c8 <Update_V1_0_to_V1_1_B7+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    30c2:	40 82       	st	Z, r4
    30c4:	01 c0       	rjmp	.+2      	; 0x30c8 <Update_V1_0_to_V1_1_B7+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    30c6:	10 82       	st	Z, r1
		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    30c8:	c9 5c       	subi	r28, 0xC9	; 201
    30ca:	de 4f       	sbci	r29, 0xFE	; 254
    30cc:	e8 81       	ld	r30, Y
    30ce:	f9 81       	ldd	r31, Y+1	; 0x01
    30d0:	c7 53       	subi	r28, 0x37	; 55
    30d2:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    30d4:	23 ff       	sbrs	r18, 3
    30d6:	06 c0       	rjmp	.+12     	; 0x30e4 <Update_V1_0_to_V1_1_B7+0x298>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    30d8:	23 fe       	sbrs	r2, 3
    30da:	02 c0       	rjmp	.+4      	; 0x30e0 <Update_V1_0_to_V1_1_B7+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    30dc:	50 82       	st	Z, r5
    30de:	03 c0       	rjmp	.+6      	; 0x30e6 <Update_V1_0_to_V1_1_B7+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    30e0:	40 82       	st	Z, r4
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <Update_V1_0_to_V1_1_B7+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    30e4:	10 82       	st	Z, r1
		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    30e6:	c3 5c       	subi	r28, 0xC3	; 195
    30e8:	de 4f       	sbci	r29, 0xFE	; 254
    30ea:	e8 81       	ld	r30, Y
    30ec:	f9 81       	ldd	r31, Y+1	; 0x01
    30ee:	cd 53       	subi	r28, 0x3D	; 61
    30f0:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    30f2:	34 fe       	sbrs	r3, 4
    30f4:	06 c0       	rjmp	.+12     	; 0x3102 <Update_V1_0_to_V1_1_B7+0x2b6>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    30f6:	34 ff       	sbrs	r19, 4
    30f8:	02 c0       	rjmp	.+4      	; 0x30fe <Update_V1_0_to_V1_1_B7+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    30fa:	50 82       	st	Z, r5
    30fc:	03 c0       	rjmp	.+6      	; 0x3104 <Update_V1_0_to_V1_1_B7+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    30fe:	40 82       	st	Z, r4
    3100:	01 c0       	rjmp	.+2      	; 0x3104 <Update_V1_0_to_V1_1_B7+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    3102:	10 82       	st	Z, r1
		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    3104:	cd 5c       	subi	r28, 0xCD	; 205
    3106:	de 4f       	sbci	r29, 0xFE	; 254
    3108:	e8 81       	ld	r30, Y
    310a:	f9 81       	ldd	r31, Y+1	; 0x01
    310c:	c3 53       	subi	r28, 0x33	; 51
    310e:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    3110:	24 ff       	sbrs	r18, 4
    3112:	06 c0       	rjmp	.+12     	; 0x3120 <Update_V1_0_to_V1_1_B7+0x2d4>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    3114:	24 fe       	sbrs	r2, 4
    3116:	02 c0       	rjmp	.+4      	; 0x311c <Update_V1_0_to_V1_1_B7+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    3118:	50 82       	st	Z, r5
    311a:	03 c0       	rjmp	.+6      	; 0x3122 <Update_V1_0_to_V1_1_B7+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    311c:	40 82       	st	Z, r4
    311e:	01 c0       	rjmp	.+2      	; 0x3122 <Update_V1_0_to_V1_1_B7+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    3120:	10 82       	st	Z, r1
		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3122:	c7 5c       	subi	r28, 0xC7	; 199
    3124:	de 4f       	sbci	r29, 0xFE	; 254
    3126:	e8 81       	ld	r30, Y
    3128:	f9 81       	ldd	r31, Y+1	; 0x01
    312a:	c9 53       	subi	r28, 0x39	; 57
    312c:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
    312e:	35 fe       	sbrs	r3, 5
    3130:	06 c0       	rjmp	.+12     	; 0x313e <Update_V1_0_to_V1_1_B7+0x2f2>
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
    3132:	35 ff       	sbrs	r19, 5
    3134:	02 c0       	rjmp	.+4      	; 0x313a <Update_V1_0_to_V1_1_B7+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3136:	50 82       	st	Z, r5
    3138:	03 c0       	rjmp	.+6      	; 0x3140 <Update_V1_0_to_V1_1_B7+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    313a:	40 82       	st	Z, r4
    313c:	01 c0       	rjmp	.+2      	; 0x3140 <Update_V1_0_to_V1_1_B7+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    313e:	10 82       	st	Z, r1
		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    3140:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
    3142:	25 ff       	sbrs	r18, 5
    3144:	06 c0       	rjmp	.+12     	; 0x3152 <Update_V1_0_to_V1_1_B7+0x306>
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
    3146:	25 fe       	sbrs	r2, 5
    3148:	02 c0       	rjmp	.+4      	; 0x314e <Update_V1_0_to_V1_1_B7+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    314a:	50 82       	st	Z, r5
    314c:	03 c0       	rjmp	.+6      	; 0x3154 <Update_V1_0_to_V1_1_B7+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    314e:	40 82       	st	Z, r4
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <Update_V1_0_to_V1_1_B7+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    3152:	10 82       	st	Z, r1
    3154:	c1 5c       	subi	r28, 0xC1	; 193
    3156:	de 4f       	sbci	r29, 0xFE	; 254
    3158:	88 81       	ld	r24, Y
    315a:	99 81       	ldd	r25, Y+1	; 0x01
    315c:	cf 53       	subi	r28, 0x3F	; 63
    315e:	d1 40       	sbci	r29, 0x01	; 1
    3160:	86 96       	adiw	r24, 0x26	; 38
    3162:	c1 5c       	subi	r28, 0xC1	; 193
    3164:	de 4f       	sbci	r29, 0xFE	; 254
    3166:	99 83       	std	Y+1, r25	; 0x01
    3168:	88 83       	st	Y, r24
    316a:	cf 53       	subi	r28, 0x3F	; 63
    316c:	d1 40       	sbci	r29, 0x01	; 1
    316e:	96 e2       	ldi	r25, 0x26	; 38
    3170:	89 0e       	add	r8, r25
    3172:	91 1c       	adc	r9, r1
    3174:	e6 e2       	ldi	r30, 0x26	; 38
    3176:	ae 0e       	add	r10, r30
    3178:	b1 1c       	adc	r11, r1
    317a:	f6 e2       	ldi	r31, 0x26	; 38
    317c:	cf 0e       	add	r12, r31
    317e:	d1 1c       	adc	r13, r1
    3180:	cf 5c       	subi	r28, 0xCF	; 207
    3182:	de 4f       	sbci	r29, 0xFE	; 254
    3184:	88 81       	ld	r24, Y
    3186:	99 81       	ldd	r25, Y+1	; 0x01
    3188:	c1 53       	subi	r28, 0x31	; 49
    318a:	d1 40       	sbci	r29, 0x01	; 1
    318c:	86 96       	adiw	r24, 0x26	; 38
    318e:	cf 5c       	subi	r28, 0xCF	; 207
    3190:	de 4f       	sbci	r29, 0xFE	; 254
    3192:	99 83       	std	Y+1, r25	; 0x01
    3194:	88 83       	st	Y, r24
    3196:	c1 53       	subi	r28, 0x31	; 49
    3198:	d1 40       	sbci	r29, 0x01	; 1
    319a:	0a 5d       	subi	r16, 0xDA	; 218
    319c:	1f 4f       	sbci	r17, 0xFF	; 255
    319e:	c7 5c       	subi	r28, 0xC7	; 199
    31a0:	de 4f       	sbci	r29, 0xFE	; 254
    31a2:	e8 81       	ld	r30, Y
    31a4:	f9 81       	ldd	r31, Y+1	; 0x01
    31a6:	c9 53       	subi	r28, 0x39	; 57
    31a8:	d1 40       	sbci	r29, 0x01	; 1
    31aa:	b6 96       	adiw	r30, 0x26	; 38
    31ac:	c7 5c       	subi	r28, 0xC7	; 199
    31ae:	de 4f       	sbci	r29, 0xFE	; 254
    31b0:	f9 83       	std	Y+1, r31	; 0x01
    31b2:	e8 83       	st	Y, r30
    31b4:	c9 53       	subi	r28, 0x39	; 57
    31b6:	d1 40       	sbci	r29, 0x01	; 1
    31b8:	cd 5c       	subi	r28, 0xCD	; 205
    31ba:	de 4f       	sbci	r29, 0xFE	; 254
    31bc:	88 81       	ld	r24, Y
    31be:	99 81       	ldd	r25, Y+1	; 0x01
    31c0:	c3 53       	subi	r28, 0x33	; 51
    31c2:	d1 40       	sbci	r29, 0x01	; 1
    31c4:	86 96       	adiw	r24, 0x26	; 38
    31c6:	cd 5c       	subi	r28, 0xCD	; 205
    31c8:	de 4f       	sbci	r29, 0xFE	; 254
    31ca:	99 83       	std	Y+1, r25	; 0x01
    31cc:	88 83       	st	Y, r24
    31ce:	c3 53       	subi	r28, 0x33	; 51
    31d0:	d1 40       	sbci	r29, 0x01	; 1
    31d2:	c3 5c       	subi	r28, 0xC3	; 195
    31d4:	de 4f       	sbci	r29, 0xFE	; 254
    31d6:	e8 81       	ld	r30, Y
    31d8:	f9 81       	ldd	r31, Y+1	; 0x01
    31da:	cd 53       	subi	r28, 0x3D	; 61
    31dc:	d1 40       	sbci	r29, 0x01	; 1
    31de:	b6 96       	adiw	r30, 0x26	; 38
    31e0:	c3 5c       	subi	r28, 0xC3	; 195
    31e2:	de 4f       	sbci	r29, 0xFE	; 254
    31e4:	f9 83       	std	Y+1, r31	; 0x01
    31e6:	e8 83       	st	Y, r30
    31e8:	cd 53       	subi	r28, 0x3D	; 61
    31ea:	d1 40       	sbci	r29, 0x01	; 1
    31ec:	c9 5c       	subi	r28, 0xC9	; 201
    31ee:	de 4f       	sbci	r29, 0xFE	; 254
    31f0:	88 81       	ld	r24, Y
    31f2:	99 81       	ldd	r25, Y+1	; 0x01
    31f4:	c7 53       	subi	r28, 0x37	; 55
    31f6:	d1 40       	sbci	r29, 0x01	; 1
    31f8:	86 96       	adiw	r24, 0x26	; 38
    31fa:	c9 5c       	subi	r28, 0xC9	; 201
    31fc:	de 4f       	sbci	r29, 0xFE	; 254
    31fe:	99 83       	std	Y+1, r25	; 0x01
    3200:	88 83       	st	Y, r24
    3202:	c7 53       	subi	r28, 0x37	; 55
    3204:	d1 40       	sbci	r29, 0x01	; 1
    3206:	c5 5c       	subi	r28, 0xC5	; 197
    3208:	de 4f       	sbci	r29, 0xFE	; 254
    320a:	e8 81       	ld	r30, Y
    320c:	f9 81       	ldd	r31, Y+1	; 0x01
    320e:	cb 53       	subi	r28, 0x3B	; 59
    3210:	d1 40       	sbci	r29, 0x01	; 1
    3212:	b6 96       	adiw	r30, 0x26	; 38
    3214:	c5 5c       	subi	r28, 0xC5	; 197
    3216:	de 4f       	sbci	r29, 0xFE	; 254
    3218:	f9 83       	std	Y+1, r31	; 0x01
    321a:	e8 83       	st	Y, r30
    321c:	cb 53       	subi	r28, 0x3B	; 59
    321e:	d1 40       	sbci	r29, 0x01	; 1
    3220:	cb 5c       	subi	r28, 0xCB	; 203
    3222:	de 4f       	sbci	r29, 0xFE	; 254
    3224:	88 81       	ld	r24, Y
    3226:	99 81       	ldd	r25, Y+1	; 0x01
    3228:	c5 53       	subi	r28, 0x35	; 53
    322a:	d1 40       	sbci	r29, 0x01	; 1
    322c:	86 96       	adiw	r24, 0x26	; 38
    322e:	cb 5c       	subi	r28, 0xCB	; 203
    3230:	de 4f       	sbci	r29, 0xFE	; 254
    3232:	99 83       	std	Y+1, r25	; 0x01
    3234:	88 83       	st	Y, r24
    3236:	c5 53       	subi	r28, 0x35	; 53
    3238:	d1 40       	sbci	r29, 0x01	; 1
    323a:	96 e2       	ldi	r25, 0x26	; 38
    323c:	e9 0e       	add	r14, r25
    323e:	f1 1c       	adc	r15, r1
    3240:	e6 e2       	ldi	r30, 0x26	; 38
    3242:	6e 0e       	add	r6, r30
    3244:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    3246:	ce 5b       	subi	r28, 0xBE	; 190
    3248:	de 4f       	sbci	r29, 0xFE	; 254
    324a:	88 81       	ld	r24, Y
    324c:	99 81       	ldd	r25, Y+1	; 0x01
    324e:	c2 54       	subi	r28, 0x42	; 66
    3250:	d1 40       	sbci	r29, 0x01	; 1
    3252:	08 17       	cp	r16, r24
    3254:	19 07       	cpc	r17, r25
    3256:	09 f0       	breq	.+2      	; 0x325a <Update_V1_0_to_V1_1_B7+0x40e>
    3258:	9a ce       	rjmp	.-716    	; 0x2f8e <Update_V1_0_to_V1_1_B7+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    325a:	8f e2       	ldi	r24, 0x2F	; 47
    325c:	91 e0       	ldi	r25, 0x01	; 1
    325e:	fe 01       	movw	r30, r28
    3260:	31 96       	adiw	r30, 0x01	; 1
    3262:	a3 e5       	ldi	r26, 0x53	; 83
    3264:	b6 e0       	ldi	r27, 0x06	; 6
    3266:	01 90       	ld	r0, Z+
    3268:	0d 92       	st	X+, r0
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	e1 f7       	brne	.-8      	; 0x3266 <Update_V1_0_to_V1_1_B7+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; 
    326e:	cf 5b       	subi	r28, 0xBF	; 191
    3270:	de 4f       	sbci	r29, 0xFE	; 254
    3272:	98 81       	ld	r25, Y
    3274:	c1 54       	subi	r28, 0x41	; 65
    3276:	d1 40       	sbci	r29, 0x01	; 1
    3278:	90 93 82 07 	sts	0x0782, r25

	// Set magic number to V1.1 Beta 7 signature
	Config.setup = V1_1_B7_SIGNATURE;
    327c:	86 e3       	ldi	r24, 0x36	; 54
    327e:	80 93 c1 05 	sts	0x05C1, r24
}
    3282:	cb 5b       	subi	r28, 0xBB	; 187
    3284:	de 4f       	sbci	r29, 0xFE	; 254
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	f8 94       	cli
    328a:	de bf       	out	0x3e, r29	; 62
    328c:	0f be       	out	0x3f, r0	; 63
    328e:	cd bf       	out	0x3d, r28	; 61
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	1f 91       	pop	r17
    3296:	0f 91       	pop	r16
    3298:	ff 90       	pop	r15
    329a:	ef 90       	pop	r14
    329c:	df 90       	pop	r13
    329e:	cf 90       	pop	r12
    32a0:	bf 90       	pop	r11
    32a2:	af 90       	pop	r10
    32a4:	9f 90       	pop	r9
    32a6:	8f 90       	pop	r8
    32a8:	7f 90       	pop	r7
    32aa:	6f 90       	pop	r6
    32ac:	5f 90       	pop	r5
    32ae:	4f 90       	pop	r4
    32b0:	3f 90       	pop	r3
    32b2:	2f 90       	pop	r2
    32b4:	08 95       	ret

000032b6 <Update_V1_1_to_V1_1_B8>:

// Upgrade V1.1 beta 7 structure to V1.1 Beta 8 structure
void Update_V1_1_to_V1_1_B8(void)
{
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	2c 97       	sbiw	r28, 0x0c	; 12
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	f8 94       	cli
    32c4:	de bf       	out	0x3e, r29	; 62
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	cd bf       	out	0x3d, r28	; 61
	int8_t	buffer[12];
	int8_t	temp = 0;
	
	// RC items - working perfectly
	buffer[0] = Config.RxMode;			// RxMode. Same as old RxMode
    32ca:	80 91 ea 05 	lds	r24, 0x05EA
    32ce:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = Config.MPU6050_LPF;		// Servo_rate
    32d0:	80 91 4e 06 	lds	r24, 0x064E
    32d4:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = Config.Servo_rate;		// PWM_Sync
    32d6:	80 91 eb 05 	lds	r24, 0x05EB
    32da:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = Config.PWM_Sync;		// TxSeq
    32dc:	80 91 ec 05 	lds	r24, 0x05EC
    32e0:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = Config.TxSeq;			// FlightChan
    32e2:	80 91 ed 05 	lds	r24, 0x05ED
    32e6:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = Config.AileronPol;		// TransitionSpeed
    32e8:	90 91 f1 05 	lds	r25, 0x05F1
    32ec:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6] = Config.ElevatorPol;		// Transition_P1n
    32ee:	90 91 f2 05 	lds	r25, 0x05F2
    32f2:	9f 83       	std	Y+7, r25	; 0x07
	buffer[7] = Config.FlightChan;		// AileronPol
    32f4:	90 91 ee 05 	lds	r25, 0x05EE
    32f8:	98 87       	std	Y+8, r25	; 0x08
	buffer[8] = Config.TransitionSpeed;	// ElevatorPol
    32fa:	90 91 ef 05 	lds	r25, 0x05EF
    32fe:	99 87       	std	Y+9, r25	; 0x09
	
	// General items
	memcpy((void*)&temp,(void*)((&Config.CF_factor) + (1)),1);
    3300:	20 91 52 06 	lds	r18, 0x0652
	buffer[9] = temp;					// Old MPU6050LPF value
    3304:	2a 87       	std	Y+10, r18	; 0x0a
	buffer[10] = Config.Transition_P1n; // Old RudderPol value
    3306:	90 91 f0 05 	lds	r25, 0x05F0
    330a:	9b 87       	std	Y+11, r25	; 0x0b
		
	// Copy back to RC items structure
	memcpy(&Config.RxMode, &buffer,9);
    330c:	39 e0       	ldi	r19, 0x09	; 9
    330e:	fe 01       	movw	r30, r28
    3310:	31 96       	adiw	r30, 0x01	; 1
    3312:	aa ee       	ldi	r26, 0xEA	; 234
    3314:	b5 e0       	ldi	r27, 0x05	; 5
    3316:	01 90       	ld	r0, Z+
    3318:	0d 92       	st	X+, r0
    331a:	3a 95       	dec	r19
    331c:	e1 f7       	brne	.-8      	; 0x3316 <Update_V1_1_to_V1_1_B8+0x60>
	
	// Copy back to General items structure
	Config.MPU6050_LPF = buffer[9];
    331e:	20 93 4e 06 	sts	0x064E, r18
	temp = buffer[10];					// Pass through the RudderPol value
	memcpy((void*)((&Config.CF_factor) + (1)), (void*)&temp,1);
    3322:	90 93 52 06 	sts	0x0652, r25
	
	// "None" no longer an option for this channel
	if (Config.FlightChan == NOCHAN)
    3326:	88 30       	cpi	r24, 0x08	; 8
    3328:	19 f4       	brne	.+6      	; 0x3330 <Update_V1_1_to_V1_1_B8+0x7a>
	{
		Config.FlightChan = AUX3;
    332a:	87 e0       	ldi	r24, 0x07	; 7
    332c:	80 93 ee 05 	sts	0x05EE, r24
	}
	
	// Set magic number to V1.1 Beta 8 signature
	Config.setup = V1_1_B8_SIGNATURE;
    3330:	87 e3       	ldi	r24, 0x37	; 55
    3332:	80 93 c1 05 	sts	0x05C1, r24
}
    3336:	2c 96       	adiw	r28, 0x0c	; 12
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	08 95       	ret

00003348 <Update_V1_1B8_to_V1_1_B10>:

// Upgrade V1.1 B8 settings to V1.1 Beta 10 settings
void Update_V1_1B8_to_V1_1_B10(void)
{
	// Reset filters to more appropriate values
	Config.Acc_LPF = convert_filter_B8_B10(Config.Acc_LPF);
    3348:	e0 91 4f 06 	lds	r30, 0x064F
    334c:	e7 30       	cpi	r30, 0x07	; 7
    334e:	28 f4       	brcc	.+10     	; 0x335a <Update_V1_1B8_to_V1_1_B10+0x12>
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	e2 5f       	subi	r30, 0xF2	; 242
    3354:	fa 4f       	sbci	r31, 0xFA	; 250
    3356:	80 81       	ld	r24, Z
    3358:	01 c0       	rjmp	.+2      	; 0x335c <Update_V1_1B8_to_V1_1_B10+0x14>
    335a:	87 e0       	ldi	r24, 0x07	; 7
    335c:	80 93 4f 06 	sts	0x064F, r24
	Config.Gyro_LPF = convert_filter_B8_B10(Config.Gyro_LPF);
    3360:	e0 91 50 06 	lds	r30, 0x0650
    3364:	e7 30       	cpi	r30, 0x07	; 7
    3366:	28 f4       	brcc	.+10     	; 0x3372 <Update_V1_1B8_to_V1_1_B10+0x2a>
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	e2 5f       	subi	r30, 0xF2	; 242
    336c:	fa 4f       	sbci	r31, 0xFA	; 250
    336e:	80 81       	ld	r24, Z
    3370:	01 c0       	rjmp	.+2      	; 0x3374 <Update_V1_1B8_to_V1_1_B10+0x2c>
    3372:	87 e0       	ldi	r24, 0x07	; 7
    3374:	80 93 50 06 	sts	0x0650, r24

	// Set magic number to V1.1 Beta 10 signature
	Config.setup = V1_1_B10_SIGNATURE;
    3378:	88 e3       	ldi	r24, 0x38	; 56
    337a:	80 93 c1 05 	sts	0x05C1, r24
    337e:	08 95       	ret

00003380 <Update_V1_1B10_to_V1_1_B12>:

// Upgrade V1.1 B10+ settings to V1.1 Beta 12 settings
void Update_V1_1B10_to_V1_1_B12(void)
{
	// Copy old RudderPol value to new location
	Config.RudderPol = Config.Preset;
    3380:	e2 e5       	ldi	r30, 0x52	; 82
    3382:	f6 e0       	ldi	r31, 0x06	; 6
    3384:	80 81       	ld	r24, Z
    3386:	80 93 c9 07 	sts	0x07C9, r24
	
	// Set preset to default and load it
	Config.Preset = QUADX;
    338a:	10 82       	st	Z, r1

	// Set magic number to V1.1 Beta 11 signature
	Config.setup = V1_1_B12_SIGNATURE;
    338c:	89 e3       	ldi	r24, 0x39	; 57
    338e:	80 93 c1 05 	sts	0x05C1, r24
    3392:	08 95       	ret

00003394 <Load_eeprom_preset>:
	Load_eeprom_preset(QUADX);
	Config.Preset = OPTIONS; // Menu will display "Options"
}

void Load_eeprom_preset(uint8_t preset)
{
    3394:	0f 93       	push	r16
    3396:	1f 93       	push	r17
    3398:	cf 93       	push	r28
    339a:	df 93       	push	r29
	uint8_t i;

	// Erase current profile settings
	memset(&Config.FlightMode[P1],0,sizeof(flight_control_t));
    339c:	92 e1       	ldi	r25, 0x12	; 18
    339e:	e3 ef       	ldi	r30, 0xF3	; 243
    33a0:	f5 e0       	ldi	r31, 0x05	; 5
    33a2:	df 01       	movw	r26, r30
    33a4:	29 2f       	mov	r18, r25
    33a6:	1d 92       	st	X+, r1
    33a8:	2a 95       	dec	r18
    33aa:	e9 f7       	brne	.-6      	; 0x33a6 <Load_eeprom_preset+0x12>
	memset(&Config.FlightMode[P2],0,sizeof(flight_control_t));
    33ac:	e5 e0       	ldi	r30, 0x05	; 5
    33ae:	f6 e0       	ldi	r31, 0x06	; 6
    33b0:	df 01       	movw	r26, r30
    33b2:	1d 92       	st	X+, r1
    33b4:	9a 95       	dec	r25
    33b6:	e9 f7       	brne	.-6      	; 0x33b2 <Load_eeprom_preset+0x1e>

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);
    33b8:	20 e3       	ldi	r18, 0x30	; 48
    33ba:	31 e0       	ldi	r19, 0x01	; 1
    33bc:	e3 e5       	ldi	r30, 0x53	; 83
    33be:	f6 e0       	ldi	r31, 0x06	; 6
    33c0:	df 01       	movw	r26, r30
    33c2:	a9 01       	movw	r20, r18
    33c4:	1d 92       	st	X+, r1
    33c6:	41 50       	subi	r20, 0x01	; 1
    33c8:	50 40       	sbci	r21, 0x00	; 0
    33ca:	e1 f7       	brne	.-8      	; 0x33c4 <Load_eeprom_preset+0x30>
    33cc:	e7 e7       	ldi	r30, 0x77	; 119
    33ce:	f6 e0       	ldi	r31, 0x06	; 6
    33d0:	cb e8       	ldi	r28, 0x8B	; 139
    33d2:	d7 e0       	ldi	r29, 0x07	; 7
    33d4:	03 e9       	ldi	r16, 0x93	; 147
    33d6:	17 e0       	ldi	r17, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    33d8:	72 e3       	ldi	r23, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    33da:	9f e0       	ldi	r25, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    33dc:	6c e9       	ldi	r22, 0x9C	; 156
		Config.max_travel[i] = 100;
    33de:	44 e6       	ldi	r20, 0x64	; 100
    33e0:	9f 01       	movw	r18, r30
    33e2:	2e 51       	subi	r18, 0x1E	; 30
    33e4:	31 09       	sbc	r19, r1
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    33e6:	52 e3       	ldi	r21, 0x32	; 50
    33e8:	d9 01       	movw	r26, r18
    33ea:	7c 93       	st	X, r23
    33ec:	28 5e       	subi	r18, 0xE8	; 232
    33ee:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_a 	= NOMIX;
    33f0:	d9 01       	movw	r26, r18
    33f2:	9c 93       	st	X, r25
    33f4:	2c 5f       	subi	r18, 0xFC	; 252
    33f6:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_b 	= NOMIX;
    33f8:	d9 01       	movw	r26, r18
    33fa:	9c 93       	st	X, r25
    33fc:	22 50       	subi	r18, 0x02	; 2
    33fe:	31 09       	sbc	r19, r1
		Config.Channel[i].P2_source_a 	= NOMIX;
    3400:	d9 01       	movw	r26, r18
    3402:	9c 93       	st	X, r25
		Config.Channel[i].P2_source_b 	= NOMIX;
    3404:	90 83       	st	Z, r25
		Config.min_travel[i] = -100;
    3406:	69 93       	st	Y+, r22
		Config.max_travel[i] = 100;
    3408:	24 e6       	ldi	r18, 0x64	; 100
    340a:	d8 01       	movw	r26, r16
    340c:	4d 93       	st	X+, r20
    340e:	8d 01       	movw	r16, r26
    3410:	b6 96       	adiw	r30, 0x26	; 38

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3412:	b7 e0       	ldi	r27, 0x07	; 7
    3414:	e7 3a       	cpi	r30, 0xA7	; 167
    3416:	fb 07       	cpc	r31, r27
    3418:	19 f7       	brne	.-58     	; 0x33e0 <Load_eeprom_preset+0x4c>
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	switch (preset)
    341a:	81 30       	cpi	r24, 0x01	; 1
    341c:	61 f0       	breq	.+24     	; 0x3436 <Load_eeprom_preset+0xa2>
    341e:	08 f4       	brcc	.+2      	; 0x3422 <Load_eeprom_preset+0x8e>
    3420:	ce c0       	rjmp	.+412    	; 0x35be <Load_eeprom_preset+0x22a>
    3422:	82 30       	cpi	r24, 0x02	; 2
    3424:	09 f4       	brne	.+2      	; 0x3428 <Load_eeprom_preset+0x94>
    3426:	87 c1       	rjmp	.+782    	; 0x3736 <Load_eeprom_preset+0x3a2>
    3428:	83 30       	cpi	r24, 0x03	; 3
    342a:	09 f0       	breq	.+2      	; 0x342e <Load_eeprom_preset+0x9a>
    342c:	45 c2       	rjmp	.+1162   	; 0x38b8 <Load_eeprom_preset+0x524>
	{
		case BLANK:
			Config.ArmMode = ARMABLE;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	80 93 4b 06 	sts	0x064B, r24
	
			break;
    3434:	41 c2       	rjmp	.+1154   	; 0x38b8 <Load_eeprom_preset+0x524>
		
		case QUADP:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    3436:	80 93 4b 06 	sts	0x064B, r24
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 50;
    343a:	50 93 f3 05 	sts	0x05F3, r21
			Config.FlightMode[P1].Roll_I_mult = 10;
    343e:	9a e0       	ldi	r25, 0x0A	; 10
    3440:	90 93 f4 05 	sts	0x05F4, r25
			Config.FlightMode[P1].Roll_limit = 10;
    3444:	90 93 f5 05 	sts	0x05F5, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    3448:	22 e0       	ldi	r18, 0x02	; 2
    344a:	20 93 f6 05 	sts	0x05F6, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    344e:	90 93 f7 05 	sts	0x05F7, r25
			
			Config.FlightMode[P1].Pitch_P_mult = 50;
    3452:	50 93 f9 05 	sts	0x05F9, r21
			Config.FlightMode[P1].Pitch_I_mult = 10;
    3456:	90 93 fa 05 	sts	0x05FA, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    345a:	90 93 fb 05 	sts	0x05FB, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    345e:	20 93 fc 05 	sts	0x05FC, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    3462:	90 93 fd 05 	sts	0x05FD, r25
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    3466:	4c e3       	ldi	r20, 0x3C	; 60
    3468:	40 93 ff 05 	sts	0x05FF, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    346c:	98 e2       	ldi	r25, 0x28	; 40
    346e:	90 93 00 06 	sts	0x0600, r25
			Config.FlightMode[P1].Yaw_limit = 25;
    3472:	39 e1       	ldi	r19, 0x19	; 25
    3474:	30 93 01 06 	sts	0x0601, r19
			Config.FlightMode[P1].Yaw_Rate = 2;
    3478:	20 93 02 06 	sts	0x0602, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    347c:	50 93 04 06 	sts	0x0604, r21
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    3480:	90 93 05 06 	sts	0x0605, r25
			Config.FlightMode[P2].Roll_I_mult = 19;
    3484:	63 e1       	ldi	r22, 0x13	; 19
    3486:	60 93 06 06 	sts	0x0606, r22
			Config.FlightMode[P2].Roll_limit = 14;
    348a:	5e e0       	ldi	r21, 0x0E	; 14
    348c:	50 93 07 06 	sts	0x0607, r21
			Config.FlightMode[P2].Roll_Rate = 3;
    3490:	23 e0       	ldi	r18, 0x03	; 3
    3492:	20 93 08 06 	sts	0x0608, r18
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3496:	80 93 09 06 	sts	0x0609, r24
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    349a:	90 93 0b 06 	sts	0x060B, r25
			Config.FlightMode[P2].Pitch_I_mult = 19;
    349e:	60 93 0c 06 	sts	0x060C, r22
			Config.FlightMode[P2].Pitch_limit = 14;
    34a2:	50 93 0d 06 	sts	0x060D, r21
			Config.FlightMode[P2].Pitch_Rate = 3;
    34a6:	20 93 0e 06 	sts	0x060E, r18
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    34aa:	80 93 0f 06 	sts	0x060F, r24
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    34ae:	40 93 11 06 	sts	0x0611, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    34b2:	90 93 12 06 	sts	0x0612, r25
			Config.FlightMode[P2].Yaw_limit = 25;
    34b6:	30 93 13 06 	sts	0x0613, r19
			Config.FlightMode[P2].Yaw_Rate = 3;
    34ba:	20 93 14 06 	sts	0x0614, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    34be:	8e e1       	ldi	r24, 0x1E	; 30
    34c0:	80 93 16 06 	sts	0x0616, r24
    34c4:	e0 e7       	ldi	r30, 0x70	; 112
    34c6:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    34c8:	34 e6       	ldi	r19, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    34ca:	42 e0       	ldi	r20, 0x02	; 2
				Config.Channel[i].P1_Z_delta_acc = ON;
    34cc:	21 e0       	ldi	r18, 0x01	; 1
    34ce:	df 01       	movw	r26, r30
    34d0:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    34d2:	94 e6       	ldi	r25, 0x64	; 100
    34d4:	3c 93       	st	X, r19
    34d6:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    34d8:	3c 93       	st	X, r19
    34da:	16 97       	sbiw	r26, 0x06	; 6
				Config.Channel[i].Motor_marker = MOTOR;
    34dc:	4c 93       	st	X, r20
    34de:	58 96       	adiw	r26, 0x18	; 24
				Config.Channel[i].P1_Z_delta_acc = ON;
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	2c 93       	st	X, r18
				Config.Channel[i].P2_Z_delta_acc = ON;
    34e4:	20 83       	st	Z, r18
    34e6:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    34e8:	57 e0       	ldi	r21, 0x07	; 7
    34ea:	e8 30       	cpi	r30, 0x08	; 8
    34ec:	f5 07       	cpc	r31, r21
    34ee:	79 f7       	brne	.-34     	; 0x34ce <Load_eeprom_preset+0x13a>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 0;
    34f0:	10 92 5f 06 	sts	0x065F, r1
			Config.Channel[OUT1].P2_aileron_volume = 0;
    34f4:	10 92 60 06 	sts	0x0660, r1
			Config.Channel[OUT1].P1_elevator_volume = -20;
    34f8:	2c ee       	ldi	r18, 0xEC	; 236
    34fa:	20 93 61 06 	sts	0x0661, r18
			Config.Channel[OUT1].P2_elevator_volume = -30;
    34fe:	32 ee       	ldi	r19, 0xE2	; 226
    3500:	30 93 62 06 	sts	0x0662, r19
			Config.Channel[OUT1].P1_rudder_volume = -30;
    3504:	30 93 63 06 	sts	0x0663, r19
			Config.Channel[OUT1].P2_rudder_volume = -40;
    3508:	68 ed       	ldi	r22, 0xD8	; 216
    350a:	60 93 64 06 	sts	0x0664, r22
			Config.Channel[OUT1].P1_Pitch_gyro = ON;
    350e:	80 93 67 06 	sts	0x0667, r24
			Config.Channel[OUT1].P1_Pitch_acc = ON;
    3512:	80 93 6d 06 	sts	0x066D, r24
			Config.Channel[OUT1].P2_Pitch_gyro = ON;
    3516:	80 93 68 06 	sts	0x0668, r24
			Config.Channel[OUT1].P2_Pitch_acc = ON;
    351a:	80 93 6e 06 	sts	0x066E, r24
			Config.Channel[OUT1].P1_Yaw_gyro = ON;
    351e:	80 93 69 06 	sts	0x0669, r24
			Config.Channel[OUT1].P2_Yaw_gyro = ON;
    3522:	80 93 6a 06 	sts	0x066A, r24
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -20;
    3526:	20 93 85 06 	sts	0x0685, r18
			Config.Channel[OUT2].P2_aileron_volume = -30;
    352a:	30 93 86 06 	sts	0x0686, r19
			Config.Channel[OUT2].P1_elevator_volume = 0;
    352e:	10 92 87 06 	sts	0x0687, r1
			Config.Channel[OUT2].P2_elevator_volume = 0;
    3532:	10 92 88 06 	sts	0x0688, r1
			Config.Channel[OUT2].P1_rudder_volume = 30;
    3536:	2e e1       	ldi	r18, 0x1E	; 30
    3538:	20 93 89 06 	sts	0x0689, r18
			Config.Channel[OUT2].P2_rudder_volume = 40;
    353c:	48 e2       	ldi	r20, 0x28	; 40
    353e:	40 93 8a 06 	sts	0x068A, r20
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    3542:	80 93 8b 06 	sts	0x068B, r24
			Config.Channel[OUT2].P1_Roll_acc = ON;
    3546:	80 93 91 06 	sts	0x0691, r24
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    354a:	80 93 8c 06 	sts	0x068C, r24
			Config.Channel[OUT2].P2_Roll_acc = ON;
    354e:	80 93 92 06 	sts	0x0692, r24
			Config.Channel[OUT2].P1_Yaw_gyro = ON;
    3552:	80 93 8f 06 	sts	0x068F, r24
			Config.Channel[OUT2].P2_Yaw_gyro = ON;
    3556:	80 93 90 06 	sts	0x0690, r24
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = 0;
    355a:	10 92 ab 06 	sts	0x06AB, r1
			Config.Channel[OUT3].P2_aileron_volume = 0;
    355e:	10 92 ac 06 	sts	0x06AC, r1
			Config.Channel[OUT3].P1_elevator_volume = 20;
    3562:	54 e1       	ldi	r21, 0x14	; 20
    3564:	50 93 ad 06 	sts	0x06AD, r21
			Config.Channel[OUT3].P2_elevator_volume = 30;
    3568:	20 93 ae 06 	sts	0x06AE, r18
			Config.Channel[OUT3].P1_rudder_volume = -30;
    356c:	30 93 af 06 	sts	0x06AF, r19
			Config.Channel[OUT3].P2_rudder_volume = -40;
    3570:	60 93 b0 06 	sts	0x06B0, r22
			Config.Channel[OUT3].P1_Pitch_gyro = ON;
    3574:	80 93 b3 06 	sts	0x06B3, r24
			Config.Channel[OUT3].P1_Pitch_acc = ON;
    3578:	80 93 b9 06 	sts	0x06B9, r24
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    357c:	80 93 b4 06 	sts	0x06B4, r24
			Config.Channel[OUT3].P2_Pitch_acc = ON;
    3580:	80 93 ba 06 	sts	0x06BA, r24
			Config.Channel[OUT3].P1_Yaw_gyro = ON;
    3584:	80 93 b5 06 	sts	0x06B5, r24
			Config.Channel[OUT3].P2_Yaw_gyro = ON;
    3588:	80 93 b6 06 	sts	0x06B6, r24
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 20;
    358c:	50 93 d1 06 	sts	0x06D1, r21
			Config.Channel[OUT4].P2_aileron_volume = 30;
    3590:	20 93 d2 06 	sts	0x06D2, r18
			Config.Channel[OUT4].P1_elevator_volume = 0;
    3594:	10 92 d3 06 	sts	0x06D3, r1
			Config.Channel[OUT4].P2_elevator_volume = 0;
    3598:	10 92 d4 06 	sts	0x06D4, r1
			Config.Channel[OUT4].P1_rudder_volume = 30;
    359c:	20 93 d5 06 	sts	0x06D5, r18
			Config.Channel[OUT4].P2_rudder_volume = 40;
    35a0:	40 93 d6 06 	sts	0x06D6, r20
			Config.Channel[OUT4].P1_Roll_gyro = ON;
    35a4:	80 93 d7 06 	sts	0x06D7, r24
			Config.Channel[OUT4].P1_Roll_acc = ON;
    35a8:	80 93 dd 06 	sts	0x06DD, r24
			Config.Channel[OUT4].P2_Roll_gyro = ON;
    35ac:	80 93 d8 06 	sts	0x06D8, r24
			Config.Channel[OUT4].P2_Roll_acc = ON;
    35b0:	80 93 de 06 	sts	0x06DE, r24
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    35b4:	80 93 db 06 	sts	0x06DB, r24
			Config.Channel[OUT4].P2_Yaw_gyro = ON;		
    35b8:	80 93 dc 06 	sts	0x06DC, r24
    35bc:	a9 c0       	rjmp	.+338    	; 0x3710 <Load_eeprom_preset+0x37c>
			Config.Channel[OUT8].P2_offset = 100;			
			break;
				
		case QUADX:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    35be:	31 e0       	ldi	r19, 0x01	; 1
    35c0:	30 93 4b 06 	sts	0x064B, r19
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    35c4:	88 e2       	ldi	r24, 0x28	; 40
    35c6:	80 93 f3 05 	sts	0x05F3, r24
			Config.FlightMode[P1].Roll_I_mult = 10;
    35ca:	9a e0       	ldi	r25, 0x0A	; 10
    35cc:	90 93 f4 05 	sts	0x05F4, r25
			Config.FlightMode[P1].Roll_limit = 10;
    35d0:	90 93 f5 05 	sts	0x05F5, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    35d4:	22 e0       	ldi	r18, 0x02	; 2
    35d6:	20 93 f6 05 	sts	0x05F6, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    35da:	90 93 f7 05 	sts	0x05F7, r25
	
			Config.FlightMode[P1].Pitch_P_mult = 40;
    35de:	80 93 f9 05 	sts	0x05F9, r24
			Config.FlightMode[P1].Pitch_I_mult = 10;
    35e2:	90 93 fa 05 	sts	0x05FA, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    35e6:	90 93 fb 05 	sts	0x05FB, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    35ea:	20 93 fc 05 	sts	0x05FC, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    35ee:	90 93 fd 05 	sts	0x05FD, r25
	
			Config.FlightMode[P1].Yaw_P_mult = 60;
    35f2:	4c e3       	ldi	r20, 0x3C	; 60
    35f4:	40 93 ff 05 	sts	0x05FF, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    35f8:	80 93 00 06 	sts	0x0600, r24
			Config.FlightMode[P1].Yaw_limit = 25;
    35fc:	99 e1       	ldi	r25, 0x19	; 25
    35fe:	90 93 01 06 	sts	0x0601, r25
			Config.FlightMode[P1].Yaw_Rate = 2;
    3602:	20 93 02 06 	sts	0x0602, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    3606:	50 93 04 06 	sts	0x0604, r21
	
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    360a:	80 93 05 06 	sts	0x0605, r24
			Config.FlightMode[P2].Roll_I_mult = 19;
    360e:	73 e1       	ldi	r23, 0x13	; 19
    3610:	70 93 06 06 	sts	0x0606, r23
			Config.FlightMode[P2].Roll_limit = 14;
    3614:	6e e0       	ldi	r22, 0x0E	; 14
    3616:	60 93 07 06 	sts	0x0607, r22
			Config.FlightMode[P2].Roll_Rate = 3;
    361a:	53 e0       	ldi	r21, 0x03	; 3
    361c:	50 93 08 06 	sts	0x0608, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3620:	30 93 09 06 	sts	0x0609, r19
	
			Config.FlightMode[P2].Pitch_P_mult = 40;
    3624:	80 93 0b 06 	sts	0x060B, r24
			Config.FlightMode[P2].Pitch_I_mult = 19;
    3628:	70 93 0c 06 	sts	0x060C, r23
			Config.FlightMode[P2].Pitch_limit = 14;
    362c:	60 93 0d 06 	sts	0x060D, r22
			Config.FlightMode[P2].Pitch_Rate = 3;
    3630:	50 93 0e 06 	sts	0x060E, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    3634:	30 93 0f 06 	sts	0x060F, r19
	
			Config.FlightMode[P2].Yaw_P_mult = 60;
    3638:	40 93 11 06 	sts	0x0611, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    363c:	80 93 12 06 	sts	0x0612, r24
			Config.FlightMode[P2].Yaw_limit = 25;
    3640:	90 93 13 06 	sts	0x0613, r25
			Config.FlightMode[P2].Yaw_Rate = 2;
    3644:	20 93 14 06 	sts	0x0614, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3648:	8e e1       	ldi	r24, 0x1E	; 30
    364a:	80 93 16 06 	sts	0x0616, r24
    364e:	e0 e7       	ldi	r30, 0x70	; 112
    3650:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3652:	24 e6       	ldi	r18, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    3654:	32 e0       	ldi	r19, 0x02	; 2
				Config.Channel[i].P1_Roll_gyro = ON;
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	df 01       	movw	r26, r30
    365a:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    365c:	94 e6       	ldi	r25, 0x64	; 100
    365e:	2c 93       	st	X, r18
    3660:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    3662:	2c 93       	st	X, r18
    3664:	16 97       	sbiw	r26, 0x06	; 6
				Config.Channel[i].Motor_marker = MOTOR;
    3666:	3c 93       	st	X, r19
    3668:	1e 96       	adiw	r26, 0x0e	; 14
				Config.Channel[i].P1_Roll_gyro = ON;
    366a:	8c 93       	st	X, r24
    366c:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Roll_acc = ON;
    366e:	8c 93       	st	X, r24
    3670:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Roll_gyro = ON;
    3672:	8c 93       	st	X, r24
    3674:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Roll_acc = ON;
    3676:	8c 93       	st	X, r24
    3678:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Pitch_gyro = ON;
    367a:	8c 93       	st	X, r24
    367c:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Pitch_acc = ON;
    367e:	8c 93       	st	X, r24
    3680:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Pitch_gyro = ON;
    3682:	8c 93       	st	X, r24
    3684:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Pitch_acc = ON;
    3686:	8c 93       	st	X, r24
    3688:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Yaw_gyro = ON;
    368a:	8c 93       	st	X, r24
    368c:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_Yaw_gyro = ON;
    368e:	8c 93       	st	X, r24
    3690:	15 96       	adiw	r26, 0x05	; 5
				Config.Channel[i].P1_Z_delta_acc = ON;
    3692:	8c 93       	st	X, r24
				Config.Channel[i].P2_Z_delta_acc = ON;
    3694:	80 83       	st	Z, r24
    3696:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    3698:	a7 e0       	ldi	r26, 0x07	; 7
    369a:	e8 30       	cpi	r30, 0x08	; 8
    369c:	fa 07       	cpc	r31, r26
    369e:	e1 f6       	brne	.-72     	; 0x3658 <Load_eeprom_preset+0x2c4>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 15;
    36a0:	2f e0       	ldi	r18, 0x0F	; 15
    36a2:	20 93 5f 06 	sts	0x065F, r18
			Config.Channel[OUT1].P2_aileron_volume = 20;
    36a6:	84 e1       	ldi	r24, 0x14	; 20
    36a8:	80 93 60 06 	sts	0x0660, r24
			Config.Channel[OUT1].P1_elevator_volume = -15;
    36ac:	41 ef       	ldi	r20, 0xF1	; 241
    36ae:	40 93 61 06 	sts	0x0661, r20
			Config.Channel[OUT1].P2_elevator_volume = -20;
    36b2:	3c ee       	ldi	r19, 0xEC	; 236
    36b4:	30 93 62 06 	sts	0x0662, r19
			Config.Channel[OUT1].P1_rudder_volume = -40;
    36b8:	e8 ed       	ldi	r30, 0xD8	; 216
    36ba:	e0 93 63 06 	sts	0x0663, r30
			Config.Channel[OUT1].P2_rudder_volume = -50;
    36be:	7e ec       	ldi	r23, 0xCE	; 206
    36c0:	70 93 64 06 	sts	0x0664, r23
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -15;
    36c4:	40 93 85 06 	sts	0x0685, r20
			Config.Channel[OUT2].P2_aileron_volume = -20;
    36c8:	30 93 86 06 	sts	0x0686, r19
			Config.Channel[OUT2].P1_elevator_volume = -15;
    36cc:	40 93 87 06 	sts	0x0687, r20
			Config.Channel[OUT2].P2_elevator_volume = -20;
    36d0:	30 93 88 06 	sts	0x0688, r19
			Config.Channel[OUT2].P1_rudder_volume = 40;
    36d4:	68 e2       	ldi	r22, 0x28	; 40
    36d6:	60 93 89 06 	sts	0x0689, r22
			Config.Channel[OUT2].P2_rudder_volume = 50;
    36da:	52 e3       	ldi	r21, 0x32	; 50
    36dc:	50 93 8a 06 	sts	0x068A, r21
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = -15;
    36e0:	40 93 ab 06 	sts	0x06AB, r20
			Config.Channel[OUT3].P2_aileron_volume = -20;
    36e4:	30 93 ac 06 	sts	0x06AC, r19
			Config.Channel[OUT3].P1_elevator_volume = 15;
    36e8:	20 93 ad 06 	sts	0x06AD, r18
			Config.Channel[OUT3].P2_elevator_volume = 20;
    36ec:	80 93 ae 06 	sts	0x06AE, r24
			Config.Channel[OUT3].P1_rudder_volume = -40;
    36f0:	e0 93 af 06 	sts	0x06AF, r30
			Config.Channel[OUT3].P2_rudder_volume = -50;
    36f4:	70 93 b0 06 	sts	0x06B0, r23
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 15;
    36f8:	20 93 d1 06 	sts	0x06D1, r18
			Config.Channel[OUT4].P2_aileron_volume = 20;
    36fc:	80 93 d2 06 	sts	0x06D2, r24
			Config.Channel[OUT4].P1_elevator_volume = 15;
    3700:	20 93 d3 06 	sts	0x06D3, r18
			Config.Channel[OUT4].P2_elevator_volume = 20;
    3704:	80 93 d4 06 	sts	0x06D4, r24
			Config.Channel[OUT4].P1_rudder_volume = 40;
    3708:	60 93 d5 06 	sts	0x06D5, r22
			Config.Channel[OUT4].P2_rudder_volume = 50;
    370c:	50 93 d6 06 	sts	0x06D6, r21

			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    3710:	8b e4       	ldi	r24, 0x4B	; 75
    3712:	80 93 f9 06 	sts	0x06F9, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    3716:	90 93 fa 06 	sts	0x06FA, r25
			
			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    371a:	80 93 1d 07 	sts	0x071D, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    371e:	90 93 1e 07 	sts	0x071E, r25
						
			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    3722:	80 93 47 07 	sts	0x0747, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    3726:	90 93 48 07 	sts	0x0748, r25
									
			// OUT8
			Config.Channel[OUT8].P1_offset = -100;
    372a:	8c e9       	ldi	r24, 0x9C	; 156
    372c:	80 93 62 07 	sts	0x0762, r24
			Config.Channel[OUT8].P2_offset = 100;
    3730:	90 93 65 07 	sts	0x0765, r25
			break;
    3734:	c1 c0       	rjmp	.+386    	; 0x38b8 <Load_eeprom_preset+0x524>
		
		case TRICOPTER:
			// Preset simple mixing for primary channels
			Config.ArmMode = ARMABLE;
    3736:	91 e0       	ldi	r25, 0x01	; 1
    3738:	90 93 4b 06 	sts	0x064B, r25
		
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    373c:	38 e2       	ldi	r19, 0x28	; 40
    373e:	30 93 f3 05 	sts	0x05F3, r19
			Config.FlightMode[P1].Roll_I_mult = 10;
    3742:	4a e0       	ldi	r20, 0x0A	; 10
    3744:	40 93 f4 05 	sts	0x05F4, r20
			Config.FlightMode[P1].Roll_limit = 10;
    3748:	40 93 f5 05 	sts	0x05F5, r20
			Config.FlightMode[P1].Roll_Rate = 2;
    374c:	80 93 f6 05 	sts	0x05F6, r24
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    3750:	40 93 f7 05 	sts	0x05F7, r20
			
			Config.FlightMode[P1].Pitch_P_mult = 40;
    3754:	30 93 f9 05 	sts	0x05F9, r19
			Config.FlightMode[P1].Pitch_I_mult = 10;
    3758:	40 93 fa 05 	sts	0x05FA, r20
			Config.FlightMode[P1].Pitch_limit = 10;
    375c:	40 93 fb 05 	sts	0x05FB, r20
			Config.FlightMode[P1].Pitch_Rate = 2;
    3760:	80 93 fc 05 	sts	0x05FC, r24
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    3764:	40 93 fd 05 	sts	0x05FD, r20
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    3768:	6c e3       	ldi	r22, 0x3C	; 60
    376a:	60 93 ff 05 	sts	0x05FF, r22
			Config.FlightMode[P1].Yaw_I_mult = 40;
    376e:	30 93 00 06 	sts	0x0600, r19
			Config.FlightMode[P1].Yaw_limit = 25;
    3772:	49 e1       	ldi	r20, 0x19	; 25
    3774:	40 93 01 06 	sts	0x0601, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    3778:	80 93 02 06 	sts	0x0602, r24
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    377c:	50 93 04 06 	sts	0x0604, r21
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    3780:	30 93 05 06 	sts	0x0605, r19
			Config.FlightMode[P2].Roll_I_mult = 19;
    3784:	e3 e1       	ldi	r30, 0x13	; 19
    3786:	e0 93 06 06 	sts	0x0606, r30
			Config.FlightMode[P2].Roll_limit = 14;
    378a:	7e e0       	ldi	r23, 0x0E	; 14
    378c:	70 93 07 06 	sts	0x0607, r23
			Config.FlightMode[P2].Roll_Rate = 3;
    3790:	53 e0       	ldi	r21, 0x03	; 3
    3792:	50 93 08 06 	sts	0x0608, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3796:	90 93 09 06 	sts	0x0609, r25
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    379a:	30 93 0b 06 	sts	0x060B, r19
			Config.FlightMode[P2].Pitch_I_mult = 19;
    379e:	e0 93 0c 06 	sts	0x060C, r30
			Config.FlightMode[P2].Pitch_limit = 14;
    37a2:	70 93 0d 06 	sts	0x060D, r23
			Config.FlightMode[P2].Pitch_Rate = 3;
    37a6:	50 93 0e 06 	sts	0x060E, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    37aa:	90 93 0f 06 	sts	0x060F, r25
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    37ae:	60 93 11 06 	sts	0x0611, r22
			Config.FlightMode[P2].Yaw_I_mult = 40;
    37b2:	30 93 12 06 	sts	0x0612, r19
			Config.FlightMode[P2].Yaw_limit = 25;
    37b6:	40 93 13 06 	sts	0x0613, r20
			Config.FlightMode[P2].Yaw_Rate = 2;
    37ba:	80 93 14 06 	sts	0x0614, r24
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    37be:	4e e1       	ldi	r20, 0x1E	; 30
    37c0:	40 93 16 06 	sts	0x0616, r20
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    37c4:	20 93 5c 06 	sts	0x065C, r18
				Config.Channel[i].P2_throttle_volume = 100;
    37c8:	20 93 5d 06 	sts	0x065D, r18
				Config.Channel[i].Motor_marker = MOTOR;
    37cc:	80 93 57 06 	sts	0x0657, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    37d0:	20 93 82 06 	sts	0x0682, r18
				Config.Channel[i].P2_throttle_volume = 100;
    37d4:	20 93 83 06 	sts	0x0683, r18
				Config.Channel[i].Motor_marker = MOTOR;
    37d8:	80 93 7d 06 	sts	0x067D, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    37dc:	20 93 a8 06 	sts	0x06A8, r18
				Config.Channel[i].P2_throttle_volume = 100;
    37e0:	20 93 a9 06 	sts	0x06A9, r18
				Config.Channel[i].Motor_marker = MOTOR;
    37e4:	80 93 a3 06 	sts	0x06A3, r24
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 30;
    37e8:	40 93 5f 06 	sts	0x065F, r20
			Config.Channel[OUT1].P2_aileron_volume = 40;
    37ec:	30 93 60 06 	sts	0x0660, r19
			Config.Channel[OUT1].P1_elevator_volume = -15;
    37f0:	61 ef       	ldi	r22, 0xF1	; 241
    37f2:	60 93 61 06 	sts	0x0661, r22
			Config.Channel[OUT1].P2_elevator_volume = -20;
    37f6:	5c ee       	ldi	r21, 0xEC	; 236
    37f8:	50 93 62 06 	sts	0x0662, r21
			Config.Channel[OUT1].P1_Roll_gyro = ON;
    37fc:	90 93 65 06 	sts	0x0665, r25
			Config.Channel[OUT1].P1_Roll_acc = ON;
    3800:	90 93 6b 06 	sts	0x066B, r25
			Config.Channel[OUT1].P2_Roll_gyro = ON;
    3804:	90 93 66 06 	sts	0x0666, r25
			Config.Channel[OUT1].P2_Roll_acc = ON;
    3808:	90 93 6c 06 	sts	0x066C, r25
			Config.Channel[OUT1].P1_Pitch_gyro = SCALE;
    380c:	80 93 67 06 	sts	0x0667, r24
			Config.Channel[OUT1].P1_Pitch_acc = SCALE;
    3810:	80 93 6d 06 	sts	0x066D, r24
			Config.Channel[OUT1].P2_Pitch_gyro = SCALE;
    3814:	80 93 68 06 	sts	0x0668, r24
			Config.Channel[OUT1].P2_Pitch_acc = SCALE;
    3818:	80 93 6e 06 	sts	0x066E, r24
			Config.Channel[OUT1].P1_Z_delta_acc = ON;
    381c:	90 93 6f 06 	sts	0x066F, r25
			Config.Channel[OUT1].P2_Z_delta_acc = ON;
    3820:	90 93 70 06 	sts	0x0670, r25
		
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -30;
    3824:	72 ee       	ldi	r23, 0xE2	; 226
    3826:	70 93 85 06 	sts	0x0685, r23
			Config.Channel[OUT2].P2_aileron_volume = -40;
    382a:	78 ed       	ldi	r23, 0xD8	; 216
    382c:	70 93 86 06 	sts	0x0686, r23
			Config.Channel[OUT2].P1_elevator_volume = -15;
    3830:	60 93 87 06 	sts	0x0687, r22
			Config.Channel[OUT2].P2_elevator_volume = -20;
    3834:	50 93 88 06 	sts	0x0688, r21
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    3838:	90 93 8b 06 	sts	0x068B, r25
			Config.Channel[OUT2].P1_Roll_acc = ON;
    383c:	90 93 91 06 	sts	0x0691, r25
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    3840:	90 93 8c 06 	sts	0x068C, r25
			Config.Channel[OUT2].P2_Roll_acc = ON;
    3844:	90 93 92 06 	sts	0x0692, r25
			Config.Channel[OUT2].P1_Pitch_gyro = SCALE;
    3848:	80 93 8d 06 	sts	0x068D, r24
			Config.Channel[OUT2].P1_Pitch_acc = SCALE;
    384c:	80 93 93 06 	sts	0x0693, r24
			Config.Channel[OUT2].P2_Pitch_gyro = SCALE;
    3850:	80 93 8e 06 	sts	0x068E, r24
			Config.Channel[OUT2].P2_Pitch_acc = SCALE;
    3854:	80 93 94 06 	sts	0x0694, r24
			Config.Channel[OUT2].P1_Z_delta_acc = ON;
    3858:	90 93 95 06 	sts	0x0695, r25
			Config.Channel[OUT2].P2_Z_delta_acc = ON;
    385c:	90 93 96 06 	sts	0x0696, r25
		
			// OUT3
			Config.Channel[OUT3].P1_elevator_volume = 30;
    3860:	40 93 ad 06 	sts	0x06AD, r20
			Config.Channel[OUT3].P2_elevator_volume = 40;
    3864:	30 93 ae 06 	sts	0x06AE, r19
			Config.Channel[OUT3].P1_Pitch_gyro = SCALE;
    3868:	80 93 b3 06 	sts	0x06B3, r24
			Config.Channel[OUT3].P1_Pitch_acc = SCALE;
    386c:	80 93 b9 06 	sts	0x06B9, r24
			Config.Channel[OUT3].P2_Pitch_gyro = SCALE;
    3870:	80 93 b4 06 	sts	0x06B4, r24
			Config.Channel[OUT3].P2_Pitch_acc = SCALE;
    3874:	80 93 ba 06 	sts	0x06BA, r24
			Config.Channel[OUT3].P1_Z_delta_acc = ON;
    3878:	90 93 bb 06 	sts	0x06BB, r25
			Config.Channel[OUT3].P2_Z_delta_acc = ON;
    387c:	90 93 bc 06 	sts	0x06BC, r25
			
			// OUT4
			Config.Channel[OUT4].Motor_marker = ASERVO;
    3880:	10 92 c9 06 	sts	0x06C9, r1
			Config.Channel[OUT4].P1_rudder_volume = 75;
    3884:	8b e4       	ldi	r24, 0x4B	; 75
    3886:	80 93 d5 06 	sts	0x06D5, r24
			Config.Channel[OUT4].P2_rudder_volume = 100;
    388a:	20 93 d6 06 	sts	0x06D6, r18
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    388e:	90 93 db 06 	sts	0x06DB, r25
			Config.Channel[OUT4].P2_Yaw_gyro = ON;
    3892:	90 93 dc 06 	sts	0x06DC, r25
			
			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    3896:	80 93 f9 06 	sts	0x06F9, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    389a:	20 93 fa 06 	sts	0x06FA, r18

			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    389e:	80 93 1d 07 	sts	0x071D, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    38a2:	20 93 1e 07 	sts	0x071E, r18

			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    38a6:	80 93 47 07 	sts	0x0747, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    38aa:	20 93 48 07 	sts	0x0748, r18

			// OUT8
			Config.Channel[OUT8].P1_offset = -100;
    38ae:	8c e9       	ldi	r24, 0x9C	; 156
    38b0:	80 93 62 07 	sts	0x0762, r24
			Config.Channel[OUT8].P2_offset = 100;
    38b4:	20 93 65 07 	sts	0x0765, r18
			break;
		
		default:
			break;
	}
    38b8:	df 91       	pop	r29
    38ba:	cf 91       	pop	r28
    38bc:	1f 91       	pop	r17
    38be:	0f 91       	pop	r16
    38c0:	08 95       	ret

000038c2 <Set_EEPROM_Default_Config>:
	return new_filter;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    38c2:	cf 93       	push	r28
    38c4:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    38c6:	89 e0       	ldi	r24, 0x09	; 9
    38c8:	92 e0       	ldi	r25, 0x02	; 2
    38ca:	e1 ec       	ldi	r30, 0xC1	; 193
    38cc:	f5 e0       	ldi	r31, 0x05	; 5
    38ce:	df 01       	movw	r26, r30
    38d0:	9c 01       	movw	r18, r24
    38d2:	1d 92       	st	X+, r1
    38d4:	21 50       	subi	r18, 0x01	; 1
    38d6:	30 40       	sbci	r19, 0x00	; 0
    38d8:	e1 f7       	brne	.-8      	; 0x38d2 <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    38da:	89 e3       	ldi	r24, 0x39	; 57
    38dc:	80 93 c1 05 	sts	0x05C1, r24

	// General
	Config.RxMode = SBUS;
    38e0:	82 e0       	ldi	r24, 0x02	; 2
    38e2:	80 93 ea 05 	sts	0x05EA, r24
	Config.FlightChan = GEAR;
    38e6:	94 e0       	ldi	r25, 0x04	; 4
    38e8:	90 93 ee 05 	sts	0x05EE, r25
	Config.ArmMode = ARMABLE;
    38ec:	21 e0       	ldi	r18, 0x01	; 1
    38ee:	20 93 4b 06 	sts	0x064B, r18
	Config.Servo_rate = FAST;
    38f2:	80 93 eb 05 	sts	0x05EB, r24
	Config.PWM_Sync = GEAR;
    38f6:	90 93 ec 05 	sts	0x05EC, r25
	Config.Acc_LPF = HZ21;
    38fa:	80 93 4f 06 	sts	0x064F, r24
	Config.Gyro_LPF = NOFILTER;
    38fe:	87 e0       	ldi	r24, 0x07	; 7
    3900:	80 93 50 06 	sts	0x0650, r24
	Config.MPU6050_LPF = HZ44;
    3904:	93 e0       	ldi	r25, 0x03	; 3
    3906:	90 93 4e 06 	sts	0x064E, r25
	Config.CF_factor = 7;
    390a:	80 93 51 06 	sts	0x0651, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    390e:	8e e1       	ldi	r24, 0x1E	; 30
    3910:	80 93 4c 06 	sts	0x064C, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    3914:	82 e3       	ldi	r24, 0x32	; 50
    3916:	80 93 f0 05 	sts	0x05F0, r24
	
	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    391a:	80 e8       	ldi	r24, 0x80	; 128
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	90 93 b2 07 	sts	0x07B2, r25
    3922:	80 93 b1 07 	sts	0x07B1, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    3926:	84 e2       	ldi	r24, 0x24	; 36
    3928:	80 93 4a 06 	sts	0x064A, r24
    392c:	e6 ef       	ldi	r30, 0xF6	; 246
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	c2 ec       	ldi	r28, 0xC2	; 194
    3932:	d5 e0       	ldi	r29, 0x05	; 5
    3934:	ab e9       	ldi	r26, 0x9B	; 155
    3936:	b7 e0       	ldi	r27, 0x07	; 7
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    3938:	86 ea       	ldi	r24, 0xA6	; 166
    393a:	9e e0       	ldi	r25, 0x0E	; 14
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    393c:	24 91       	lpm	r18, Z
    393e:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    3940:	8d 93       	st	X+, r24
    3942:	9d 93       	st	X+, r25
    3944:	31 96       	adiw	r30, 0x01	; 1
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	ee 3f       	cpi	r30, 0xFE	; 254
    394a:	f3 07       	cpc	r31, r19
    394c:	b9 f7       	brne	.-18     	; 0x393c <Set_EEPROM_Default_Config+0x7a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    394e:	8e eb       	ldi	r24, 0xBE	; 190
    3950:	9a e0       	ldi	r25, 0x0A	; 10
    3952:	90 93 9c 07 	sts	0x079C, r25
    3956:	80 93 9b 07 	sts	0x079B, r24
    395a:	e7 e7       	ldi	r30, 0x77	; 119
    395c:	f6 e0       	ldi	r31, 0x06	; 6
    395e:	cb e8       	ldi	r28, 0x8B	; 139
    3960:	d7 e0       	ldi	r29, 0x07	; 7
    3962:	63 e9       	ldi	r22, 0x93	; 147
    3964:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3966:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3968:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    396a:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    396c:	34 e6       	ldi	r19, 0x64	; 100
    396e:	cf 01       	movw	r24, r30
    3970:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3972:	dc 01       	movw	r26, r24
    3974:	5c 93       	st	X, r21
    3976:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3978:	dc 01       	movw	r26, r24
    397a:	2c 93       	st	X, r18
    397c:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    397e:	dc 01       	movw	r26, r24
    3980:	2c 93       	st	X, r18
    3982:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    3984:	dc 01       	movw	r26, r24
    3986:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3988:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    398a:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    398c:	db 01       	movw	r26, r22
    398e:	3d 93       	st	X+, r19
    3990:	bd 01       	movw	r22, r26
    3992:	b6 96       	adiw	r30, 0x26	; 38
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3994:	b7 e0       	ldi	r27, 0x07	; 7
    3996:	e7 3a       	cpi	r30, 0xA7	; 167
    3998:	fb 07       	cpc	r31, r27
    399a:	49 f7       	brne	.-46     	; 0x396e <Set_EEPROM_Default_Config+0xac>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Load manual defaults
	Load_eeprom_preset(QUADX);
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	0e 94 ca 19 	call	0x3394	; 0x3394 <Load_eeprom_preset>
	Config.Preset = OPTIONS; // Menu will display "Options"
    39a2:	84 e0       	ldi	r24, 0x04	; 4
    39a4:	80 93 52 06 	sts	0x0652, r24
}
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	08 95       	ret

000039ae <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	1f 92       	push	r1
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    39b8:	49 e0       	ldi	r20, 0x09	; 9
    39ba:	52 e0       	ldi	r21, 0x02	; 2
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	70 e0       	ldi	r23, 0x00	; 0
    39c0:	81 ec       	ldi	r24, 0xC1	; 193
    39c2:	95 e0       	ldi	r25, 0x05	; 5
    39c4:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    39c8:	80 91 c1 05 	lds	r24, 0x05C1
    39cc:	87 33       	cpi	r24, 0x37	; 55
    39ce:	79 f0       	breq	.+30     	; 0x39ee <Initial_EEPROM_Config_Load+0x40>
    39d0:	28 f4       	brcc	.+10     	; 0x39dc <Initial_EEPROM_Config_Load+0x2e>
    39d2:	85 33       	cpi	r24, 0x35	; 53
    39d4:	41 f0       	breq	.+16     	; 0x39e6 <Initial_EEPROM_Config_Load+0x38>
    39d6:	86 33       	cpi	r24, 0x36	; 54
    39d8:	41 f0       	breq	.+16     	; 0x39ea <Initial_EEPROM_Config_Load+0x3c>
    39da:	0f c0       	rjmp	.+30     	; 0x39fa <Initial_EEPROM_Config_Load+0x4c>
    39dc:	88 33       	cpi	r24, 0x38	; 56
    39de:	49 f0       	breq	.+18     	; 0x39f2 <Initial_EEPROM_Config_Load+0x44>
    39e0:	89 33       	cpi	r24, 0x39	; 57
    39e2:	69 f0       	breq	.+26     	; 0x39fe <Initial_EEPROM_Config_Load+0x50>
    39e4:	0a c0       	rjmp	.+20     	; 0x39fa <Initial_EEPROM_Config_Load+0x4c>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1_B7();
    39e6:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <Update_V1_0_to_V1_1_B7>
			// Fall through...

		case V1_1_B7_SIGNATURE:				// V1.1 Beta 7 (or below) detected
			Update_V1_1_to_V1_1_B8();	
    39ea:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <Update_V1_1_to_V1_1_B8>
			// Fall through...

		case V1_1_B8_SIGNATURE:				// V1.1 Beta 8-9 detected
			Update_V1_1B8_to_V1_1_B10();
    39ee:	0e 94 a4 19 	call	0x3348	; 0x3348 <Update_V1_1B8_to_V1_1_B10>
			// Fall through...

		case V1_1_B10_SIGNATURE:			// V1.1 Beta 10+ detected
			Update_V1_1B10_to_V1_1_B12();
    39f2:	0e 94 c0 19 	call	0x3380	; 0x3380 <Update_V1_1B10_to_V1_1_B12>
			updated = true;
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	03 c0       	rjmp	.+6      	; 0x3a00 <Initial_EEPROM_Config_Load+0x52>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    39fa:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    39fe:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    3a00:	89 83       	std	Y+1, r24	; 0x01
    3a02:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	0f 90       	pop	r0
    3a0a:	df 91       	pop	r29
    3a0c:	cf 91       	pop	r28
    3a0e:	08 95       	ret

00003a10 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	cd b7       	in	r28, 0x3d	; 61
    3a16:	de b7       	in	r29, 0x3e	; 62
    3a18:	ab 97       	sbiw	r28, 0x2b	; 43
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	f8 94       	cli
    3a1e:	de bf       	out	0x3e, r29	; 62
    3a20:	0f be       	out	0x3f, r0	; 63
    3a22:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	
	// Do all init tasks
	init();
    3a24:	0e 94 1c 2c 	call	0x5838	; 0x5838 <init>
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    3a28:	53 e0       	ldi	r21, 0x03	; 3
    3a2a:	85 2e       	mov	r8, r21
    3a2c:	91 2c       	mov	r9, r1
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    3a2e:	18 a6       	std	Y+40, r1	; 0x28
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    3a30:	1f a2       	std	Y+39, r1	; 0x27
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    3a32:	63 e0       	ldi	r22, 0x03	; 3
    3a34:	76 2e       	mov	r7, r22

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    3a36:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    3a38:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    3a3a:	b1 2c       	mov	r11, r1
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    3a3c:	1f 8a       	std	Y+23, r1	; 0x17
    3a3e:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    3a40:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    3a42:	1d a2       	std	Y+37, r1	; 0x25
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    3a44:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    3a46:	1b a2       	std	Y+35, r1	; 0x23
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    3a48:	1a a2       	std	Y+34, r1	; 0x22

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    3a4a:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    3a4c:	18 a2       	std	Y+32, r1	; 0x20
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    3a4e:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t Disarm_timer = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    3a50:	41 2c       	mov	r4, r1
    3a52:	51 2c       	mov	r5, r1
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    3a54:	21 2c       	mov	r2, r1
    3a56:	31 2c       	mov	r3, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    3a58:	1b 8a       	std	Y+19, r1	; 0x13
    3a5a:	1a 8a       	std	Y+18, r1	; 0x12
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    3a5c:	19 8a       	std	Y+17, r1	; 0x11
    3a5e:	18 8a       	std	Y+16, r1	; 0x10
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    3a60:	1b a6       	std	Y+43, r1	; 0x2b
    3a62:	1a a6       	std	Y+42, r1	; 0x2a
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    3a64:	1d 8e       	std	Y+29, r1	; 0x1d
    3a66:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    3a68:	1a 8e       	std	Y+26, r1	; 0x1a
    3a6a:	19 8e       	std	Y+25, r1	; 0x19
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    3a6c:	1f 86       	std	Y+15, r1	; 0x0f
    3a6e:	1e 86       	std	Y+14, r1	; 0x0e
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    3a70:	71 e6       	ldi	r23, 0x61	; 97
    3a72:	c7 2e       	mov	r12, r23
    3a74:	71 e5       	ldi	r23, 0x51	; 81
    3a76:	d7 2e       	mov	r13, r23
    3a78:	e1 2c       	mov	r14, r1
    3a7a:	f1 2c       	mov	r15, r1
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    3a7c:	1e 82       	std	Y+6, r1	; 0x06
    3a7e:	1f 82       	std	Y+7, r1	; 0x07
    3a80:	18 86       	std	Y+8, r1	; 0x08
    3a82:	19 86       	std	Y+9, r1	; 0x09
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    3a84:	1a 82       	std	Y+2, r1	; 0x02
    3a86:	1b 82       	std	Y+3, r1	; 0x03
    3a88:	1c 82       	std	Y+4, r1	; 0x04
    3a8a:	1d 82       	std	Y+5, r1	; 0x05
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    3a8c:	21 e0       	ldi	r18, 0x01	; 1
    3a8e:	2a 87       	std	Y+10, r18	; 0x0a
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    3a90:	00 e0       	ldi	r16, 0x00	; 0
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    3a92:	1b 8e       	std	Y+27, r1	; 0x1b
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    3a94:	1b 86       	std	Y+11, r1	; 0x0b
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    3a96:	1d 86       	std	Y+13, r1	; 0x0d
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    3a98:	1c 86       	std	Y+12, r1	; 0x0c

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    3a9a:	19 82       	std	Y+1, r1	; 0x01

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    3a9c:	80 91 18 05 	lds	r24, 0x0518
    3aa0:	8f 5f       	subi	r24, 0xFF	; 255
    3aa2:	80 93 18 05 	sts	0x0518, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    3aa6:	80 91 f6 07 	lds	r24, 0x07F6
    3aaa:	88 23       	and	r24, r24
    3aac:	31 f0       	breq	.+12     	; 0x3aba <main+0xaa>
		{
			InterruptCounter++;
    3aae:	4e 89       	ldd	r20, Y+22	; 0x16
    3ab0:	5f 89       	ldd	r21, Y+23	; 0x17
    3ab2:	4f 5f       	subi	r20, 0xFF	; 255
    3ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ab6:	5f 8b       	std	Y+23, r21	; 0x17
    3ab8:	4e 8b       	std	Y+22, r20	; 0x16
		//* Increment Status_seconds every second and trigger
		//* a RC rate resample every second
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    3aba:	2e 85       	ldd	r18, Y+14	; 0x0e
    3abc:	3f 85       	ldd	r19, Y+15	; 0x0f
    3abe:	2c 34       	cpi	r18, 0x4C	; 76
    3ac0:	3c 44       	sbci	r19, 0x4C	; 76
    3ac2:	98 f0       	brcs	.+38     	; 0x3aea <main+0xda>
		{
			Status_seconds++;
    3ac4:	28 8d       	ldd	r18, Y+24	; 0x18
    3ac6:	2f 5f       	subi	r18, 0xFF	; 255
    3ac8:	28 8f       	std	Y+24, r18	; 0x18
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    3aca:	4e 89       	ldd	r20, Y+22	; 0x16
    3acc:	5f 89       	ldd	r21, Y+23	; 0x17
    3ace:	50 93 1d 05 	sts	0x051D, r21
    3ad2:	40 93 1c 05 	sts	0x051C, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3ad6:	80 91 eb 05 	lds	r24, 0x05EB
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    3ada:	1f 8a       	std	Y+23, r1	; 0x17
    3adc:	1e 8a       	std	Y+22, r1	; 0x16

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    3ade:	1f 86       	std	Y+15, r1	; 0x0f
    3ae0:	1e 86       	std	Y+14, r1	; 0x0e
			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3ae2:	82 30       	cpi	r24, 0x02	; 2
    3ae4:	11 f4       	brne	.+4      	; 0x3aea <main+0xda>
			{
				ResampleRCRate = true;
    3ae6:	21 e0       	ldi	r18, 0x01	; 1
    3ae8:	2b 8f       	std	Y+27, r18	; 0x1b
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    3aea:	81 2f       	mov	r24, r17
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	8b 30       	cpi	r24, 0x0B	; 11
    3af0:	91 05       	cpc	r25, r1
    3af2:	08 f0       	brcs	.+2      	; 0x3af6 <main+0xe6>
    3af4:	6e c0       	rjmp	.+220    	; 0x3bd2 <main+0x1c2>
    3af6:	fc 01       	movw	r30, r24
    3af8:	e2 5c       	subi	r30, 0xC2	; 194
    3afa:	ff 4f       	sbci	r31, 0xFF	; 255
    3afc:	0c 94 44 4d 	jmp	0x9a88	; 0x9a88 <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    3b00:	83 b1       	in	r24, 0x03	; 3
    3b02:	80 7f       	andi	r24, 0xF0	; 240
    3b04:	80 3f       	cpi	r24, 0xF0	; 240
    3b06:	41 f0       	breq	.+16     	; 0x3b18 <main+0x108>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    3b08:	80 91 6e 00 	lds	r24, 0x006E
    3b0c:	81 60       	ori	r24, 0x01	; 1
    3b0e:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    3b12:	13 e0       	ldi	r17, 0x03	; 3
					// Reset the status screen timeout
					Status_seconds = 0;
    3b14:	18 8e       	std	Y+24, r1	; 0x18
    3b16:	5d c0       	rjmp	.+186    	; 0x3bd2 <main+0x1c2>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    3b18:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	85 bb       	out	0x15, r24	; 21
    3b20:	58 c0       	rjmp	.+176    	; 0x3bd2 <main+0x1c2>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3b22:	80 91 db 07 	lds	r24, 0x07DB
    3b26:	81 11       	cpse	r24, r1
    3b28:	49 c0       	rjmp	.+146    	; 0x3bbc <main+0x1ac>
    3b2a:	01 11       	cpse	r16, r1
    3b2c:	47 c0       	rjmp	.+142    	; 0x3bbc <main+0x1ac>
    3b2e:	80 91 19 05 	lds	r24, 0x0519
    3b32:	88 23       	and	r24, r24
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <main+0x128>
    3b36:	4d c0       	rjmp	.+154    	; 0x3bd2 <main+0x1c2>
				{
					// Ready to move on
					Menu_mode = STATUS;
    3b38:	14 e0       	ldi	r17, 0x04	; 4
    3b3a:	4d c0       	rjmp	.+154    	; 0x3bd6 <main+0x1c6>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    3b3c:	0e 94 14 14 	call	0x2828	; 0x2828 <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    3b40:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    3b42:	1a 8e       	std	Y+26, r1	; 0x1a
    3b44:	19 8e       	std	Y+25, r1	; 0x19
    3b46:	47 c0       	rjmp	.+142    	; 0x3bd6 <main+0x1c6>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    3b48:	1f 9b       	sbis	0x03, 7	; 3
    3b4a:	43 c0       	rjmp	.+134    	; 0x3bd2 <main+0x1c2>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    3b4c:	15 e0       	ldi	r17, 0x05	; 5
    3b4e:	41 c0       	rjmp	.+130    	; 0x3bd2 <main+0x1c2>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
    3b50:	38 8d       	ldd	r19, Y+24	; 0x18
    3b52:	3a 30       	cpi	r19, 0x0A	; 10
    3b54:	b0 f5       	brcc	.+108    	; 0x3bc2 <main+0x1b2>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    3b56:	1f 9b       	sbis	0x03, 7	; 3
    3b58:	36 c0       	rjmp	.+108    	; 0x3bc6 <main+0x1b6>
					// Prevent PWM output
					PWMOverride = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    3b5a:	49 8d       	ldd	r20, Y+25	; 0x19
    3b5c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3b5e:	43 31       	cpi	r20, 0x13	; 19
    3b60:	53 41       	sbci	r21, 0x13	; 19
    3b62:	b8 f1       	brcs	.+110    	; 0x3bd2 <main+0x1c2>
				{
					Menu_mode = PRESTATUS;
    3b64:	13 e0       	ldi	r17, 0x03	; 3
    3b66:	37 c0       	rjmp	.+110    	; 0x3bd6 <main+0x1c6>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3b68:	80 91 db 07 	lds	r24, 0x07DB
    3b6c:	81 11       	cpse	r24, r1
    3b6e:	2d c0       	rjmp	.+90     	; 0x3bca <main+0x1ba>
    3b70:	01 11       	cpse	r16, r1
    3b72:	2b c0       	rjmp	.+86     	; 0x3bca <main+0x1ba>
    3b74:	80 91 19 05 	lds	r24, 0x0519
    3b78:	88 23       	and	r24, r24
    3b7a:	69 f1       	breq	.+90     	; 0x3bd6 <main+0x1c6>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    3b7c:	18 e0       	ldi	r17, 0x08	; 8
    3b7e:	29 c0       	rjmp	.+82     	; 0x3bd2 <main+0x1c2>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    3b80:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    3b84:	19 e0       	ldi	r17, 0x09	; 9
    3b86:	27 c0       	rjmp	.+78     	; 0x3bd6 <main+0x1c6>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3b88:	80 91 db 07 	lds	r24, 0x07DB
    3b8c:	81 11       	cpse	r24, r1
    3b8e:	1f c0       	rjmp	.+62     	; 0x3bce <main+0x1be>
    3b90:	01 11       	cpse	r16, r1
    3b92:	1d c0       	rjmp	.+58     	; 0x3bce <main+0x1be>
    3b94:	80 91 19 05 	lds	r24, 0x0519
    3b98:	88 23       	and	r24, r24
    3b9a:	e9 f0       	breq	.+58     	; 0x3bd6 <main+0x1c6>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3b9c:	10 e0       	ldi	r17, 0x00	; 0
    3b9e:	19 c0       	rjmp	.+50     	; 0x3bd2 <main+0x1c2>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    3ba0:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    3ba2:	80 91 20 05 	lds	r24, 0x0520
    3ba6:	84 60       	ori	r24, 0x04	; 4
    3ba8:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    3bac:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    3bae:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    3bb2:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    3bb6:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    3bb8:	18 8e       	std	Y+24, r1	; 0x18
    3bba:	0d c0       	rjmp	.+26     	; 0x3bd6 <main+0x1c6>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    3bbc:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3bbe:	00 e0       	ldi	r16, 0x00	; 0
    3bc0:	0a c0       	rjmp	.+20     	; 0x3bd6 <main+0x1c6>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    3bc2:	17 e0       	ldi	r17, 0x07	; 7
    3bc4:	06 c0       	rjmp	.+12     	; 0x3bd2 <main+0x1c2>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    3bc6:	1a e0       	ldi	r17, 0x0A	; 10
    3bc8:	06 c0       	rjmp	.+12     	; 0x3bd6 <main+0x1c6>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    3bca:	18 e0       	ldi	r17, 0x08	; 8
    3bcc:	01 c0       	rjmp	.+2      	; 0x3bd0 <main+0x1c0>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3bce:	10 e0       	ldi	r17, 0x00	; 0
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3bd0:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    3bd2:	a1 2c       	mov	r10, r1
    3bd4:	02 c0       	rjmp	.+4      	; 0x3bda <main+0x1ca>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    3bd6:	aa 24       	eor	r10, r10
    3bd8:	a3 94       	inc	r10
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message and disarm
		if (Overdue)
    3bda:	80 91 19 05 	lds	r24, 0x0519
    3bde:	88 23       	and	r24, r24
    3be0:	a1 f0       	breq	.+40     	; 0x3c0a <main+0x1fa>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    3be2:	80 91 20 05 	lds	r24, 0x0520
    3be6:	82 60       	ori	r24, 0x02	; 2
    3be8:	80 93 20 05 	sts	0x0520, r24
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    3bec:	80 91 4b 06 	lds	r24, 0x064B
    3bf0:	81 30       	cpi	r24, 0x01	; 1
    3bf2:	81 f4       	brne	.+32     	; 0x3c14 <main+0x204>
    3bf4:	80 91 20 05 	lds	r24, 0x0520
    3bf8:	82 fd       	sbrc	r24, 2
    3bfa:	0c c0       	rjmp	.+24     	; 0x3c14 <main+0x204>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    3bfc:	80 91 20 05 	lds	r24, 0x0520
    3c00:	84 60       	ori	r24, 0x04	; 4
    3c02:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;							// Signal that FC is now disarmed
    3c06:	2b 98       	cbi	0x05, 3	; 5
    3c08:	05 c0       	rjmp	.+10     	; 0x3c14 <main+0x204>
			}
		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    3c0a:	80 91 20 05 	lds	r24, 0x0520
    3c0e:	8d 7f       	andi	r24, 0xFD	; 253
    3c10:	80 93 20 05 	sts	0x0520, r24
		}

		// Beep buzzer if Vbat lower than trigger		
		if (GetVbat() < Config.PowerTriggerActual)
    3c14:	0e 94 a1 4a 	call	0x9542	; 0x9542 <GetVbat>
    3c18:	20 91 47 06 	lds	r18, 0x0647
    3c1c:	30 91 48 06 	lds	r19, 0x0648
    3c20:	82 17       	cp	r24, r18
    3c22:	93 07       	cpc	r25, r19
    3c24:	20 f4       	brcc	.+8      	; 0x3c2e <main+0x21e>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    3c26:	80 91 20 05 	lds	r24, 0x0520
    3c2a:	88 60       	ori	r24, 0x08	; 8
    3c2c:	03 c0       	rjmp	.+6      	; 0x3c34 <main+0x224>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    3c2e:	80 91 20 05 	lds	r24, 0x0520
    3c32:	87 7f       	andi	r24, 0xF7	; 247
    3c34:	80 93 20 05 	sts	0x0520, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    3c38:	80 91 20 05 	lds	r24, 0x0520
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    3c3c:	83 fd       	sbrc	r24, 3
    3c3e:	08 c0       	rjmp	.+16     	; 0x3c50 <main+0x240>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3c40:	80 91 20 05 	lds	r24, 0x0520
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    3c44:	81 fd       	sbrc	r24, 1
    3c46:	04 c0       	rjmp	.+8      	; 0x3c50 <main+0x240>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    3c48:	80 91 20 05 	lds	r24, 0x0520

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3c4c:	80 ff       	sbrs	r24, 0
    3c4e:	06 c0       	rjmp	.+12     	; 0x3c5c <main+0x24c>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    3c50:	80 91 1e 05 	lds	r24, 0x051E
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    3c54:	84 ff       	sbrs	r24, 4
    3c56:	02 c0       	rjmp	.+4      	; 0x3c5c <main+0x24c>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    3c58:	29 9a       	sbi	0x05, 1	; 5
    3c5a:	01 c0       	rjmp	.+2      	; 0x3c5e <main+0x24e>
		}
		else 
		{
			LVA = 0;
    3c5c:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    3c5e:	80 91 4b 06 	lds	r24, 0x064B
    3c62:	81 30       	cpi	r24, 0x01	; 1
    3c64:	09 f0       	breq	.+2      	; 0x3c68 <main+0x258>
    3c66:	90 c0       	rjmp	.+288    	; 0x3d88 <main+0x378>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3c68:	80 91 3e 08 	lds	r24, 0x083E
    3c6c:	90 91 3f 08 	lds	r25, 0x083F
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    3c70:	81 34       	cpi	r24, 0x41	; 65
    3c72:	9c 4f       	sbci	r25, 0xFC	; 252
    3c74:	44 f0       	brlt	.+16     	; 0x3c86 <main+0x276>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3c76:	80 91 3e 08 	lds	r24, 0x083E
    3c7a:	90 91 3f 08 	lds	r25, 0x083F
    3c7e:	80 3c       	cpi	r24, 0xC0	; 192
    3c80:	93 40       	sbci	r25, 0x03	; 3
    3c82:	0c f4       	brge	.+2      	; 0x3c86 <main+0x276>
    3c84:	54 c0       	rjmp	.+168    	; 0x3d2e <main+0x31e>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3c86:	80 91 40 08 	lds	r24, 0x0840
    3c8a:	90 91 41 08 	lds	r25, 0x0841
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3c8e:	81 34       	cpi	r24, 0x41	; 65
    3c90:	9c 4f       	sbci	r25, 0xFC	; 252
    3c92:	44 f0       	brlt	.+16     	; 0x3ca4 <main+0x294>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3c94:	80 91 40 08 	lds	r24, 0x0840
    3c98:	90 91 41 08 	lds	r25, 0x0841
    3c9c:	80 3c       	cpi	r24, 0xC0	; 192
    3c9e:	93 40       	sbci	r25, 0x03	; 3
    3ca0:	0c f4       	brge	.+2      	; 0x3ca4 <main+0x294>
    3ca2:	45 c0       	rjmp	.+138    	; 0x3d2e <main+0x31e>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3ca4:	80 91 42 08 	lds	r24, 0x0842
    3ca8:	90 91 43 08 	lds	r25, 0x0843
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3cac:	81 34       	cpi	r24, 0x41	; 65
    3cae:	9c 4f       	sbci	r25, 0xFC	; 252
    3cb0:	3c f0       	brlt	.+14     	; 0x3cc0 <main+0x2b0>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3cb2:	80 91 42 08 	lds	r24, 0x0842
    3cb6:	90 91 43 08 	lds	r25, 0x0843
    3cba:	80 3c       	cpi	r24, 0xC0	; 192
    3cbc:	93 40       	sbci	r25, 0x03	; 3
    3cbe:	bc f1       	brlt	.+110    	; 0x3d2e <main+0x31e>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    3cc0:	80 91 3a 08 	lds	r24, 0x083A
    3cc4:	90 91 3b 08 	lds	r25, 0x083B
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3cc8:	c3 97       	sbiw	r24, 0x33	; 51
    3cca:	8c f5       	brge	.+98     	; 0x3d2e <main+0x31e>
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    3ccc:	2a 81       	ldd	r18, Y+2	; 0x02
    3cce:	3b 81       	ldd	r19, Y+3	; 0x03
    3cd0:	4c 81       	ldd	r20, Y+4	; 0x04
    3cd2:	5d 81       	ldd	r21, Y+5	; 0x05
    3cd4:	2c 34       	cpi	r18, 0x4C	; 76
    3cd6:	3c 44       	sbci	r19, 0x4C	; 76
    3cd8:	41 05       	cpc	r20, r1
    3cda:	51 05       	cpc	r21, r1
    3cdc:	60 f1       	brcs	.+88     	; 0x3d36 <main+0x326>
    3cde:	80 91 3e 08 	lds	r24, 0x083E
    3ce2:	90 91 3f 08 	lds	r25, 0x083F
    3ce6:	80 34       	cpi	r24, 0x40	; 64
    3ce8:	9c 4f       	sbci	r25, 0xFC	; 252
    3cea:	5c f4       	brge	.+22     	; 0x3d02 <main+0x2f2>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    3cec:	80 91 20 05 	lds	r24, 0x0520
    3cf0:	8b 7f       	andi	r24, 0xFB	; 251
    3cf2:	80 93 20 05 	sts	0x0520, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    3cf6:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <CalibrateGyrosSlow>
				LED1 = 1;								// Signal that FC is ready
    3cfa:	2b 9a       	sbi	0x05, 3	; 5
				reset_IMU();							// Reset IMU just in case...
    3cfc:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <reset_IMU>
    3d00:	16 c0       	rjmp	.+44     	; 0x3d2e <main+0x31e>
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    3d02:	2a 81       	ldd	r18, Y+2	; 0x02
    3d04:	3b 81       	ldd	r19, Y+3	; 0x03
    3d06:	4c 81       	ldd	r20, Y+4	; 0x04
    3d08:	5d 81       	ldd	r21, Y+5	; 0x05
    3d0a:	22 3e       	cpi	r18, 0xE2	; 226
    3d0c:	34 4e       	sbci	r19, 0xE4	; 228
    3d0e:	41 05       	cpc	r20, r1
    3d10:	51 05       	cpc	r21, r1
    3d12:	88 f0       	brcs	.+34     	; 0x3d36 <main+0x326>
    3d14:	80 91 3e 08 	lds	r24, 0x083E
    3d18:	90 91 3f 08 	lds	r25, 0x083F
    3d1c:	81 3c       	cpi	r24, 0xC1	; 193
    3d1e:	93 40       	sbci	r25, 0x03	; 3
    3d20:	54 f0       	brlt	.+20     	; 0x3d36 <main+0x326>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3d22:	80 91 20 05 	lds	r24, 0x0520
    3d26:	84 60       	ori	r24, 0x04	; 4
    3d28:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;								// Signal that FC is now disarmed
    3d2c:	2b 98       	cbi	0x05, 3	; 5
    3d2e:	1a 82       	std	Y+2, r1	; 0x02
    3d30:	1b 82       	std	Y+3, r1	; 0x03
    3d32:	1c 82       	std	Y+4, r1	; 0x04
    3d34:	1d 82       	std	Y+5, r1	; 0x05
			}

			// Automatic disarm
			// Reset auto-disarm count if any RX activity or set to zero, or when currently disarmed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    3d36:	80 91 1f 05 	lds	r24, 0x051F
    3d3a:	80 fd       	sbrc	r24, 0
    3d3c:	0e c0       	rjmp	.+28     	; 0x3d5a <main+0x34a>
    3d3e:	80 91 4c 06 	lds	r24, 0x064C
    3d42:	88 23       	and	r24, r24
    3d44:	51 f0       	breq	.+20     	; 0x3d5a <main+0x34a>
    3d46:	80 91 20 05 	lds	r24, 0x0520
    3d4a:	82 fd       	sbrc	r24, 2
    3d4c:	06 c0       	rjmp	.+12     	; 0x3d5a <main+0x34a>
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    3d4e:	bc e4       	ldi	r27, 0x4C	; 76
    3d50:	2b 16       	cp	r2, r27
    3d52:	3b 06       	cpc	r3, r27
    3d54:	28 f0       	brcs	.+10     	; 0x3d60 <main+0x350>
			{
				Disarm_seconds++;
    3d56:	b3 94       	inc	r11
    3d58:	01 c0       	rjmp	.+2      	; 0x3d5c <main+0x34c>
    3d5a:	b1 2c       	mov	r11, r1
    3d5c:	21 2c       	mov	r2, r1
    3d5e:	31 2c       	mov	r3, r1
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			// Don't allow disarms less than 30 seconds. That's just silly...
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    3d60:	40 91 4c 06 	lds	r20, 0x064C
    3d64:	2b 2d       	mov	r18, r11
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	84 2f       	mov	r24, r20
    3d6a:	99 27       	eor	r25, r25
    3d6c:	87 fd       	sbrc	r24, 7
    3d6e:	90 95       	com	r25
    3d70:	28 17       	cp	r18, r24
    3d72:	39 07       	cpc	r19, r25
    3d74:	7c f0       	brlt	.+30     	; 0x3d94 <main+0x384>
    3d76:	4e 31       	cpi	r20, 0x1E	; 30
    3d78:	6c f0       	brlt	.+26     	; 0x3d94 <main+0x384>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3d7a:	80 91 20 05 	lds	r24, 0x0520
    3d7e:	84 60       	ori	r24, 0x04	; 4
    3d80:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;								// Signal that FC is now disarmed
    3d84:	2b 98       	cbi	0x05, 3	; 5
    3d86:	06 c0       	rjmp	.+12     	; 0x3d94 <main+0x384>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    3d88:	80 91 20 05 	lds	r24, 0x0520
    3d8c:	8b 7f       	andi	r24, 0xFB	; 251
    3d8e:	80 93 20 05 	sts	0x0520, r24
			LED1 = 1;
    3d92:	2b 9a       	sbi	0x05, 3	; 5
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    3d94:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    3d98:	80 91 3a 08 	lds	r24, 0x083A
    3d9c:	90 91 3b 08 	lds	r25, 0x083B
    3da0:	c2 97       	sbiw	r24, 0x32	; 50
    3da2:	5c f4       	brge	.+22     	; 0x3dba <main+0x3aa>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    3da4:	80 91 20 05 	lds	r24, 0x0520
    3da8:	8e 7f       	andi	r24, 0xFE	; 254
    3daa:	80 93 20 05 	sts	0x0520, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    3dae:	88 e1       	ldi	r24, 0x18	; 24
    3db0:	ee ef       	ldi	r30, 0xFE	; 254
    3db2:	f7 e0       	ldi	r31, 0x07	; 7
    3db4:	11 92       	st	Z+, r1
    3db6:	8a 95       	dec	r24
    3db8:	e9 f7       	brne	.-6      	; 0x3db4 <main+0x3a4>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to.
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    3dba:	80 91 ee 05 	lds	r24, 0x05EE
    3dbe:	88 0f       	add	r24, r24
    3dc0:	99 0b       	sbc	r25, r25
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	e4 5c       	subi	r30, 0xC4	; 196
    3dc6:	f7 4f       	sbci	r31, 0xF7	; 247
    3dc8:	20 81       	ld	r18, Z
    3dca:	31 81       	ldd	r19, Z+1	; 0x01
    3dcc:	25 3f       	cpi	r18, 0xF5	; 245
    3dce:	31 40       	sbci	r19, 0x01	; 1
    3dd0:	14 f0       	brlt	.+4      	; 0x3dd6 <main+0x3c6>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    3dd2:	22 e0       	ldi	r18, 0x02	; 2
    3dd4:	06 c0       	rjmp	.+12     	; 0x3de2 <main+0x3d2>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    3dd6:	20 81       	ld	r18, Z
    3dd8:	31 81       	ldd	r19, Z+1	; 0x01
    3dda:	2d 30       	cpi	r18, 0x0D	; 13
    3ddc:	3e 4f       	sbci	r19, 0xFE	; 254
    3dde:	24 f0       	brlt	.+8      	; 0x3de8 <main+0x3d8>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    3de0:	21 e0       	ldi	r18, 0x01	; 1
    3de2:	20 93 bf 07 	sts	0x07BF, r18
    3de6:	02 c0       	rjmp	.+4      	; 0x3dec <main+0x3dc>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    3de8:	10 92 bf 07 	sts	0x07BF, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    3dec:	a3 e0       	ldi	r26, 0x03	; 3
    3dee:	7a 16       	cp	r7, r26
    3df0:	29 f0       	breq	.+10     	; 0x3dfc <main+0x3ec>
    3df2:	20 91 ef 05 	lds	r18, 0x05EF
    3df6:	3f a1       	ldd	r19, Y+39	; 0x27
    3df8:	32 17       	cp	r19, r18
    3dfa:	51 f1       	breq	.+84     	; 0x3e50 <main+0x440>
		{
			switch(Config.FlightSel)
    3dfc:	70 90 bf 07 	lds	r7, 0x07BF
    3e00:	41 e0       	ldi	r20, 0x01	; 1
    3e02:	74 16       	cp	r7, r20
    3e04:	61 f0       	breq	.+24     	; 0x3e1e <main+0x40e>
    3e06:	52 e0       	ldi	r21, 0x02	; 2
    3e08:	75 16       	cp	r7, r21
    3e0a:	b1 f0       	breq	.+44     	; 0x3e38 <main+0x428>
    3e0c:	71 10       	cpse	r7, r1
    3e0e:	1d c0       	rjmp	.+58     	; 0x3e4a <main+0x43a>
			{
				case 0:
					Transition_state = TRANS_P1;
    3e10:	10 92 23 05 	sts	0x0523, r1
					transition_counter = 0;
    3e14:	10 92 25 05 	sts	0x0525, r1
    3e18:	10 92 24 05 	sts	0x0524, r1
					break;
    3e1c:	16 c0       	rjmp	.+44     	; 0x3e4a <main+0x43a>
				case 1:
					Transition_state = TRANS_P1n;
    3e1e:	24 e0       	ldi	r18, 0x04	; 4
    3e20:	20 93 23 05 	sts	0x0523, r18
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    3e24:	20 91 f0 05 	lds	r18, 0x05F0
    3e28:	33 27       	eor	r19, r19
    3e2a:	27 fd       	sbrc	r18, 7
    3e2c:	30 95       	com	r19
    3e2e:	30 93 25 05 	sts	0x0525, r19
    3e32:	20 93 24 05 	sts	0x0524, r18
					break;
    3e36:	09 c0       	rjmp	.+18     	; 0x3e4a <main+0x43a>
				case 2:
					Transition_state = TRANS_P2;
    3e38:	29 e0       	ldi	r18, 0x09	; 9
    3e3a:	20 93 23 05 	sts	0x0523, r18
					transition_counter = 100;
    3e3e:	a4 e6       	ldi	r26, 0x64	; 100
    3e40:	b0 e0       	ldi	r27, 0x00	; 0
    3e42:	b0 93 25 05 	sts	0x0525, r27
    3e46:	a0 93 24 05 	sts	0x0524, r26
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    3e4a:	20 91 ef 05 	lds	r18, 0x05EF
    3e4e:	2f a3       	std	Y+39, r18	; 0x27
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    3e50:	30 91 bf 07 	lds	r19, 0x07BF
    3e54:	3e 8f       	std	Y+30, r19	; 0x1e
    3e56:	31 e0       	ldi	r19, 0x01	; 1
    3e58:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3e5a:	47 11       	cpse	r20, r7
    3e5c:	01 c0       	rjmp	.+2      	; 0x3e60 <main+0x450>
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    3e60:	20 91 ef 05 	lds	r18, 0x05EF
    3e64:	21 11       	cpse	r18, r1
    3e66:	1b c0       	rjmp	.+54     	; 0x3e9e <main+0x48e>
		{
			// Offset RC input to (approx) -250 to 2250
			temp1 = RCinputs[Config.FlightChan] + 1000;
    3e68:	fc 01       	movw	r30, r24
    3e6a:	e4 5c       	subi	r30, 0xC4	; 196
    3e6c:	f7 4f       	sbci	r31, 0xF7	; 247
    3e6e:	80 81       	ld	r24, Z
    3e70:	91 81       	ldd	r25, Z+1	; 0x01
    3e72:	88 51       	subi	r24, 0x18	; 24
    3e74:	9c 4f       	sbci	r25, 0xFC	; 252
    3e76:	97 ff       	sbrs	r25, 7
    3e78:	02 c0       	rjmp	.+4      	; 0x3e7e <main+0x46e>
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    3e7e:	0a 96       	adiw	r24, 0x0a	; 10
    3e80:	64 e1       	ldi	r22, 0x14	; 20
    3e82:	70 e0       	ldi	r23, 0x00	; 0
    3e84:	0e 94 ef 4c 	call	0x99de	; 0x99de <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    3e88:	65 36       	cpi	r22, 0x65	; 101
    3e8a:	71 05       	cpc	r23, r1
    3e8c:	0c f4       	brge	.+2      	; 0x3e90 <main+0x480>
    3e8e:	6e c3       	rjmp	.+1756   	; 0x456c <main+0xb5c>
    3e90:	84 e6       	ldi	r24, 0x64	; 100
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	90 93 22 05 	sts	0x0522, r25
    3e98:	80 93 21 05 	sts	0x0521, r24
    3e9c:	6b c3       	rjmp	.+1750   	; 0x4574 <main+0xb64>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    3e9e:	80 91 24 05 	lds	r24, 0x0524
    3ea2:	90 91 25 05 	lds	r25, 0x0525
    3ea6:	90 93 22 05 	sts	0x0522, r25
    3eaa:	80 93 21 05 	sts	0x0521, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    3eae:	33 23       	and	r19, r19
    3eb0:	99 f0       	breq	.+38     	; 0x3ed8 <main+0x4c8>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    3eb2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3eb4:	84 2f       	mov	r24, r20
    3eb6:	99 27       	eor	r25, r25
    3eb8:	87 fd       	sbrc	r24, 7
    3eba:	90 95       	com	r25
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	ee 0f       	add	r30, r30
    3ec0:	ff 1f       	adc	r31, r31
    3ec2:	e8 0f       	add	r30, r24
    3ec4:	f9 1f       	adc	r31, r25
    3ec6:	e7 0d       	add	r30, r7
    3ec8:	f1 1d       	adc	r31, r1
    3eca:	77 fc       	sbrc	r7, 7
    3ecc:	fa 95       	dec	r31
    3ece:	e2 50       	subi	r30, 0x02	; 2
    3ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed2:	e4 91       	lpm	r30, Z
    3ed4:	e0 93 23 05 	sts	0x0523, r30

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3ed8:	22 23       	and	r18, r18
    3eda:	49 f0       	breq	.+18     	; 0x3eee <main+0x4de>
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
		}

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    3edc:	53 ec       	ldi	r21, 0xC3	; 195
    3ede:	25 03       	mulsu	r18, r21
    3ee0:	c0 01       	movw	r24, r0
    3ee2:	11 24       	eor	r1, r1
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3ee4:	4a 89       	ldd	r20, Y+18	; 0x12
    3ee6:	5b 89       	ldd	r21, Y+19	; 0x13
    3ee8:	84 17       	cp	r24, r20
    3eea:	95 07       	cpc	r25, r21
    3eec:	18 f0       	brcs	.+6      	; 0x3ef4 <main+0x4e4>
    3eee:	33 23       	and	r19, r19
    3ef0:	09 f4       	brne	.+2      	; 0x3ef4 <main+0x4e4>
    3ef2:	a9 c0       	rjmp	.+338    	; 0x4046 <main+0x636>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    3ef4:	80 91 23 05 	lds	r24, 0x0523
    3ef8:	81 11       	cpse	r24, r1
    3efa:	05 c0       	rjmp	.+10     	; 0x3f06 <main+0x4f6>
			{
				transition_counter = 0;
    3efc:	10 92 25 05 	sts	0x0525, r1
    3f00:	10 92 24 05 	sts	0x0524, r1
    3f04:	22 c0       	rjmp	.+68     	; 0x3f4a <main+0x53a>
			}
			else if (Transition_state == TRANS_P1n)
    3f06:	84 30       	cpi	r24, 0x04	; 4
    3f08:	31 f4       	brne	.+12     	; 0x3f16 <main+0x506>
			{
				transition_counter = Config.Transition_P1n;
    3f0a:	80 91 f0 05 	lds	r24, 0x05F0
    3f0e:	99 27       	eor	r25, r25
    3f10:	87 fd       	sbrc	r24, 7
    3f12:	90 95       	com	r25
    3f14:	04 c0       	rjmp	.+8      	; 0x3f1e <main+0x50e>
			}
			else if (Transition_state == TRANS_P2)
    3f16:	89 30       	cpi	r24, 0x09	; 9
    3f18:	39 f4       	brne	.+14     	; 0x3f28 <main+0x518>
			{
				transition_counter = 100;
    3f1a:	84 e6       	ldi	r24, 0x64	; 100
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	90 93 25 05 	sts	0x0525, r25
    3f22:	80 93 24 05 	sts	0x0524, r24
    3f26:	11 c0       	rjmp	.+34     	; 0x3f4a <main+0x53a>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    3f28:	81 30       	cpi	r24, 0x01	; 1
    3f2a:	79 f4       	brne	.+30     	; 0x3f4a <main+0x53a>
    3f2c:	80 91 f0 05 	lds	r24, 0x05F0
    3f30:	99 27       	eor	r25, r25
    3f32:	87 fd       	sbrc	r24, 7
    3f34:	90 95       	com	r25
    3f36:	20 91 24 05 	lds	r18, 0x0524
    3f3a:	30 91 25 05 	lds	r19, 0x0525
    3f3e:	82 17       	cp	r24, r18
    3f40:	93 07       	cpc	r25, r19
    3f42:	1c f4       	brge	.+6      	; 0x3f4a <main+0x53a>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    3f44:	88 e0       	ldi	r24, 0x08	; 8
    3f46:	80 93 23 05 	sts	0x0523, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    3f4a:	80 91 23 05 	lds	r24, 0x0523
    3f4e:	88 30       	cpi	r24, 0x08	; 8
    3f50:	79 f4       	brne	.+30     	; 0x3f70 <main+0x560>
    3f52:	80 91 f0 05 	lds	r24, 0x05F0
    3f56:	99 27       	eor	r25, r25
    3f58:	87 fd       	sbrc	r24, 7
    3f5a:	90 95       	com	r25
    3f5c:	20 91 24 05 	lds	r18, 0x0524
    3f60:	30 91 25 05 	lds	r19, 0x0525
    3f64:	28 17       	cp	r18, r24
    3f66:	39 07       	cpc	r19, r25
    3f68:	1c f4       	brge	.+6      	; 0x3f70 <main+0x560>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    3f6a:	81 e0       	ldi	r24, 0x01	; 1
    3f6c:	80 93 23 05 	sts	0x0523, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    3f70:	80 91 23 05 	lds	r24, 0x0523
    3f74:	8b 7f       	andi	r24, 0xFB	; 251
    3f76:	82 30       	cpi	r24, 0x02	; 2
    3f78:	91 f4       	brne	.+36     	; 0x3f9e <main+0x58e>
			{
				transition_counter--;
    3f7a:	80 91 24 05 	lds	r24, 0x0524
    3f7e:	90 91 25 05 	lds	r25, 0x0525
    3f82:	01 97       	sbiw	r24, 0x01	; 1
    3f84:	90 93 25 05 	sts	0x0525, r25
    3f88:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= 0)
    3f8c:	18 16       	cp	r1, r24
    3f8e:	19 06       	cpc	r1, r25
    3f90:	34 f0       	brlt	.+12     	; 0x3f9e <main+0x58e>
				{
					transition_counter = 0;
    3f92:	10 92 25 05 	sts	0x0525, r1
    3f96:	10 92 24 05 	sts	0x0524, r1
					Transition_state = TRANS_P1;
    3f9a:	10 92 23 05 	sts	0x0523, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    3f9e:	80 91 23 05 	lds	r24, 0x0523
    3fa2:	81 30       	cpi	r24, 0x01	; 1
    3fa4:	c1 f4       	brne	.+48     	; 0x3fd6 <main+0x5c6>
			{
				transition_counter++;
    3fa6:	80 91 24 05 	lds	r24, 0x0524
    3faa:	90 91 25 05 	lds	r25, 0x0525
    3fae:	01 96       	adiw	r24, 0x01	; 1
    3fb0:	90 93 25 05 	sts	0x0525, r25
    3fb4:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= Config.Transition_P1n)
    3fb8:	20 91 f0 05 	lds	r18, 0x05F0
    3fbc:	33 27       	eor	r19, r19
    3fbe:	27 fd       	sbrc	r18, 7
    3fc0:	30 95       	com	r19
    3fc2:	82 17       	cp	r24, r18
    3fc4:	93 07       	cpc	r25, r19
    3fc6:	3c f0       	brlt	.+14     	; 0x3fd6 <main+0x5c6>
				{
					transition_counter = Config.Transition_P1n;
    3fc8:	30 93 25 05 	sts	0x0525, r19
    3fcc:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    3fd0:	84 e0       	ldi	r24, 0x04	; 4
    3fd2:	80 93 23 05 	sts	0x0523, r24
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    3fd6:	80 91 23 05 	lds	r24, 0x0523
    3fda:	88 30       	cpi	r24, 0x08	; 8
    3fdc:	c1 f4       	brne	.+48     	; 0x400e <main+0x5fe>
			{
				transition_counter--;
    3fde:	80 91 24 05 	lds	r24, 0x0524
    3fe2:	90 91 25 05 	lds	r25, 0x0525
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	90 93 25 05 	sts	0x0525, r25
    3fec:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= Config.Transition_P1n)
    3ff0:	20 91 f0 05 	lds	r18, 0x05F0
    3ff4:	33 27       	eor	r19, r19
    3ff6:	27 fd       	sbrc	r18, 7
    3ff8:	30 95       	com	r19
    3ffa:	28 17       	cp	r18, r24
    3ffc:	39 07       	cpc	r19, r25
    3ffe:	3c f0       	brlt	.+14     	; 0x400e <main+0x5fe>
				{
					transition_counter = Config.Transition_P1n;
    4000:	30 93 25 05 	sts	0x0525, r19
    4004:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    4008:	84 e0       	ldi	r24, 0x04	; 4
    400a:	80 93 23 05 	sts	0x0523, r24
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    400e:	80 91 23 05 	lds	r24, 0x0523
    4012:	8b 7f       	andi	r24, 0xFB	; 251
    4014:	83 30       	cpi	r24, 0x03	; 3
    4016:	a9 f4       	brne	.+42     	; 0x4042 <main+0x632>
			{
				transition_counter++;
    4018:	80 91 24 05 	lds	r24, 0x0524
    401c:	90 91 25 05 	lds	r25, 0x0525
    4020:	01 96       	adiw	r24, 0x01	; 1
    4022:	90 93 25 05 	sts	0x0525, r25
    4026:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= 100)
    402a:	84 36       	cpi	r24, 0x64	; 100
    402c:	91 05       	cpc	r25, r1
    402e:	4c f0       	brlt	.+18     	; 0x4042 <main+0x632>
				{
					transition_counter = 100;
    4030:	a4 e6       	ldi	r26, 0x64	; 100
    4032:	b0 e0       	ldi	r27, 0x00	; 0
    4034:	b0 93 25 05 	sts	0x0525, r27
    4038:	a0 93 24 05 	sts	0x0524, r26
					Transition_state = TRANS_P2;
    403c:	89 e0       	ldi	r24, 0x09	; 9
    403e:	80 93 23 05 	sts	0x0523, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    4042:	1b 8a       	std	Y+19, r1	; 0x13
    4044:	1a 8a       	std	Y+18, r1	; 0x12
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    4046:	20 91 23 05 	lds	r18, 0x0523
    404a:	22 23       	and	r18, r18
    404c:	31 f0       	breq	.+12     	; 0x405a <main+0x64a>
    404e:	80 91 21 05 	lds	r24, 0x0521
    4052:	90 91 22 05 	lds	r25, 0x0522
    4056:	00 97       	sbiw	r24, 0x00	; 0
    4058:	39 f4       	brne	.+14     	; 0x4068 <main+0x658>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    405a:	8c e0       	ldi	r24, 0x0C	; 12
    405c:	ea e0       	ldi	r30, 0x0A	; 10
    405e:	f8 e0       	ldi	r31, 0x08	; 8
    4060:	11 92       	st	Z+, r1
    4062:	8a 95       	dec	r24
    4064:	e9 f7       	brne	.-6      	; 0x4060 <main+0x650>
    4066:	0b c0       	rjmp	.+22     	; 0x407e <main+0x66e>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    4068:	29 30       	cpi	r18, 0x09	; 9
    406a:	19 f0       	breq	.+6      	; 0x4072 <main+0x662>
    406c:	84 36       	cpi	r24, 0x64	; 100
    406e:	91 05       	cpc	r25, r1
    4070:	31 f4       	brne	.+12     	; 0x407e <main+0x66e>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    4072:	8c e0       	ldi	r24, 0x0C	; 12
    4074:	ae ef       	ldi	r26, 0xFE	; 254
    4076:	b7 e0       	ldi	r27, 0x07	; 7
    4078:	1d 92       	st	X+, r1
    407a:	8a 95       	dec	r24
    407c:	e9 f7       	brne	.-6      	; 0x4078 <main+0x668>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    407e:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <TIM16_ReadTCNT1>
    4082:	9d 8b       	std	Y+21, r25	; 0x15
    4084:	8c 8b       	std	Y+20, r24	; 0x14
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    4086:	84 15       	cp	r24, r4
    4088:	95 05       	cpc	r25, r5
    408a:	b8 f4       	brcc	.+46     	; 0x40ba <main+0x6aa>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	a1 e0       	ldi	r26, 0x01	; 1
    4092:	b0 e0       	ldi	r27, 0x00	; 0
    4094:	84 19       	sub	r24, r4
    4096:	95 09       	sbc	r25, r5
    4098:	a1 09       	sbc	r26, r1
    409a:	b1 09       	sbc	r27, r1
    409c:	2c 89       	ldd	r18, Y+20	; 0x14
    409e:	3d 89       	ldd	r19, Y+21	; 0x15
    40a0:	82 0f       	add	r24, r18
    40a2:	93 1f       	adc	r25, r19
    40a4:	a1 1d       	adc	r26, r1
    40a6:	b1 1d       	adc	r27, r1
    40a8:	2e 81       	ldd	r18, Y+6	; 0x06
    40aa:	3f 81       	ldd	r19, Y+7	; 0x07
    40ac:	48 85       	ldd	r20, Y+8	; 0x08
    40ae:	59 85       	ldd	r21, Y+9	; 0x09
    40b0:	28 0f       	add	r18, r24
    40b2:	39 1f       	adc	r19, r25
    40b4:	4a 1f       	adc	r20, r26
    40b6:	5b 1f       	adc	r21, r27
    40b8:	0c c0       	rjmp	.+24     	; 0x40d2 <main+0x6c2>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    40ba:	8c 89       	ldd	r24, Y+20	; 0x14
    40bc:	9d 89       	ldd	r25, Y+21	; 0x15
    40be:	84 19       	sub	r24, r4
    40c0:	95 09       	sbc	r25, r5
    40c2:	2e 81       	ldd	r18, Y+6	; 0x06
    40c4:	3f 81       	ldd	r19, Y+7	; 0x07
    40c6:	48 85       	ldd	r20, Y+8	; 0x08
    40c8:	59 85       	ldd	r21, Y+9	; 0x09
    40ca:	28 0f       	add	r18, r24
    40cc:	39 1f       	adc	r19, r25
    40ce:	41 1d       	adc	r20, r1
    40d0:	51 1d       	adc	r21, r1
    40d2:	2e 83       	std	Y+6, r18	; 0x06
    40d4:	3f 83       	std	Y+7, r19	; 0x07
    40d6:	48 87       	std	Y+8, r20	; 0x08
    40d8:	59 87       	std	Y+9, r21	; 0x09
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    40da:	80 91 b2 00 	lds	r24, 0x00B2
    40de:	3b a1       	ldd	r19, Y+35	; 0x23
    40e0:	83 1b       	sub	r24, r19
    40e2:	2a 81       	ldd	r18, Y+2	; 0x02
    40e4:	3b 81       	ldd	r19, Y+3	; 0x03
    40e6:	4c 81       	ldd	r20, Y+4	; 0x04
    40e8:	5d 81       	ldd	r21, Y+5	; 0x05
    40ea:	28 0f       	add	r18, r24
    40ec:	31 1d       	adc	r19, r1
    40ee:	41 1d       	adc	r20, r1
    40f0:	51 1d       	adc	r21, r1
    40f2:	2a 83       	std	Y+2, r18	; 0x02
    40f4:	3b 83       	std	Y+3, r19	; 0x03
    40f6:	4c 83       	std	Y+4, r20	; 0x04
    40f8:	5d 83       	std	Y+5, r21	; 0x05
		Arm_TCNT2 = TCNT2;
    40fa:	30 91 b2 00 	lds	r19, 0x00B2
    40fe:	3b a3       	std	Y+35, r19	; 0x23

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    4100:	80 91 b2 00 	lds	r24, 0x00B2
    4104:	4e a1       	ldd	r20, Y+38	; 0x26
    4106:	84 1b       	sub	r24, r20
    4108:	28 89       	ldd	r18, Y+16	; 0x10
    410a:	39 89       	ldd	r19, Y+17	; 0x11
    410c:	28 0f       	add	r18, r24
    410e:	31 1d       	adc	r19, r1
    4110:	39 8b       	std	Y+17, r19	; 0x11
    4112:	28 8b       	std	Y+16, r18	; 0x10
		ServoRate_TCNT2 = TCNT2;
    4114:	30 91 b2 00 	lds	r19, 0x00B2
    4118:	3e a3       	std	Y+38, r19	; 0x26
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    411a:	80 91 b2 00 	lds	r24, 0x00B2
    411e:	4d a1       	ldd	r20, Y+37	; 0x25
    4120:	84 1b       	sub	r24, r20
    4122:	2a a5       	ldd	r18, Y+42	; 0x2a
    4124:	3b a5       	ldd	r19, Y+43	; 0x2b
    4126:	28 0f       	add	r18, r24
    4128:	31 1d       	adc	r19, r1
    412a:	3b a7       	std	Y+43, r19	; 0x2b
    412c:	2a a7       	std	Y+42, r18	; 0x2a
		Servo_TCNT2 = TCNT2;
    412e:	30 91 b2 00 	lds	r19, 0x00B2
    4132:	3d a3       	std	Y+37, r19	; 0x25
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    4134:	80 91 b2 00 	lds	r24, 0x00B2
    4138:	4f 8d       	ldd	r20, Y+31	; 0x1f
    413a:	84 1b       	sub	r24, r20
    413c:	2a 89       	ldd	r18, Y+18	; 0x12
    413e:	3b 89       	ldd	r19, Y+19	; 0x13
    4140:	28 0f       	add	r18, r24
    4142:	31 1d       	adc	r19, r1
    4144:	3b 8b       	std	Y+19, r19	; 0x13
    4146:	2a 8b       	std	Y+18, r18	; 0x12
		Transition_TCNT2 = TCNT2;
    4148:	30 91 b2 00 	lds	r19, 0x00B2
    414c:	3f 8f       	std	Y+31, r19	; 0x1f

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    414e:	80 91 b2 00 	lds	r24, 0x00B2
    4152:	48 a1       	ldd	r20, Y+32	; 0x20
    4154:	84 1b       	sub	r24, r20
    4156:	2e 85       	ldd	r18, Y+14	; 0x0e
    4158:	3f 85       	ldd	r19, Y+15	; 0x0f
    415a:	28 0f       	add	r18, r24
    415c:	31 1d       	adc	r19, r1
    415e:	3f 87       	std	Y+15, r19	; 0x0f
    4160:	2e 87       	std	Y+14, r18	; 0x0e
		Status_TCNT2 = TCNT2;
    4162:	30 91 b2 00 	lds	r19, 0x00B2
    4166:	38 a3       	std	Y+32, r19	; 0x20
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    4168:	80 91 b2 00 	lds	r24, 0x00B2
    416c:	49 a1       	ldd	r20, Y+33	; 0x21
    416e:	84 1b       	sub	r24, r20
    4170:	29 8d       	ldd	r18, Y+25	; 0x19
    4172:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4174:	28 0f       	add	r18, r24
    4176:	31 1d       	adc	r19, r1
    4178:	3a 8f       	std	Y+26, r19	; 0x1a
    417a:	29 8f       	std	Y+25, r18	; 0x19
		Refresh_TCNT2 = TCNT2;
    417c:	30 91 b2 00 	lds	r19, 0x00B2
    4180:	39 a3       	std	Y+33, r19	; 0x21

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    4182:	80 91 b2 00 	lds	r24, 0x00B2
    4186:	4a a1       	ldd	r20, Y+34	; 0x22
    4188:	84 1b       	sub	r24, r20
    418a:	28 0e       	add	r2, r24
    418c:	31 1c       	adc	r3, r1
		Disarm_TCNT2 = TCNT2;
    418e:	20 91 b2 00 	lds	r18, 0x00B2
    4192:	2a a3       	std	Y+34, r18	; 0x22

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    4194:	80 91 b2 00 	lds	r24, 0x00B2
    4198:	3c a1       	ldd	r19, Y+36	; 0x24
    419a:	83 1b       	sub	r24, r19
    419c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    419e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    41a0:	48 0f       	add	r20, r24
    41a2:	51 1d       	adc	r21, r1
    41a4:	5d 8f       	std	Y+29, r21	; 0x1d
    41a6:	4c 8f       	std	Y+28, r20	; 0x1c
		Ticker_TCNT2 = TCNT2;
    41a8:	20 91 b2 00 	lds	r18, 0x00B2
    41ac:	2c a3       	std	Y+36, r18	; 0x24
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    41ae:	80 91 1e 05 	lds	r24, 0x051E
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    41b2:	53 ff       	sbrs	r21, 3
    41b4:	02 c0       	rjmp	.+4      	; 0x41ba <main+0x7aa>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    41b6:	80 61       	ori	r24, 0x10	; 16
    41b8:	01 c0       	rjmp	.+2      	; 0x41bc <main+0x7ac>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    41ba:	8f 7e       	andi	r24, 0xEF	; 239
    41bc:	80 93 1e 05 	sts	0x051E, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    41c0:	48 89       	ldd	r20, Y+16	; 0x10
    41c2:	59 89       	ldd	r21, Y+17	; 0x11
    41c4:	4d 32       	cpi	r20, 0x2D	; 45
    41c6:	51 40       	sbci	r21, 0x01	; 1
    41c8:	20 f0       	brcs	.+8      	; 0x41d2 <main+0x7c2>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    41ca:	19 8a       	std	Y+17, r1	; 0x11
    41cc:	18 8a       	std	Y+16, r1	; 0x10
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    41ce:	21 e0       	ldi	r18, 0x01	; 1
    41d0:	2b 87       	std	Y+11, r18	; 0x0b
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    41d2:	4a a5       	ldd	r20, Y+42	; 0x2a
    41d4:	5b a5       	ldd	r21, Y+43	; 0x2b
    41d6:	46 32       	cpi	r20, 0x26	; 38
    41d8:	56 42       	sbci	r21, 0x26	; 38
    41da:	18 f0       	brcs	.+6      	; 0x41e2 <main+0x7d2>
		{
			Overdue = true;	// This results in a "No Signal" error
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	80 93 19 05 	sts	0x0519, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    41e2:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <ReadGyros>
		ReadAcc();
    41e6:	0e 94 14 10 	call	0x2028	; 0x2028 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    41ea:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    41ee:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    41f0:	20 91 1a 05 	lds	r18, 0x051A
    41f4:	30 91 1b 05 	lds	r19, 0x051B
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    41f8:	20 91 1a 05 	lds	r18, 0x051A
    41fc:	30 91 1b 05 	lds	r19, 0x051B
    4200:	ac 01       	movw	r20, r24
    4202:	42 1b       	sub	r20, r18
    4204:	53 0b       	sbc	r21, r19
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    4206:	90 93 1b 05 	sts	0x051B, r25
    420a:	80 93 1a 05 	sts	0x051A, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    420e:	80 91 de 07 	lds	r24, 0x07DE
    4212:	90 91 df 07 	lds	r25, 0x07DF
    4216:	60 e0       	ldi	r22, 0x00	; 0
    4218:	70 e0       	ldi	r23, 0x00	; 0
    421a:	02 97       	sbiw	r24, 0x02	; 2
    421c:	18 f4       	brcc	.+6      	; 0x4224 <main+0x814>
		{
			interval = ticker_16; // uint16_t
    421e:	2a 01       	movw	r4, r20
    4220:	3b 01       	movw	r6, r22
    4222:	11 c0       	rjmp	.+34     	; 0x4246 <main+0x836>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    4224:	40 90 de 07 	lds	r4, 0x07DE
    4228:	50 90 df 07 	lds	r5, 0x07DF
    422c:	61 2c       	mov	r6, r1
    422e:	71 2c       	mov	r7, r1
    4230:	3f e0       	ldi	r19, 0x0F	; 15
    4232:	44 0c       	add	r4, r4
    4234:	55 1c       	adc	r5, r5
    4236:	66 1c       	adc	r6, r6
    4238:	77 1c       	adc	r7, r7
    423a:	3a 95       	dec	r19
    423c:	d1 f7       	brne	.-12     	; 0x4232 <main+0x822>
    423e:	44 0e       	add	r4, r20
    4240:	55 1e       	adc	r5, r21
    4242:	66 1e       	adc	r6, r22
    4244:	77 1e       	adc	r7, r23
		}

		TMR0_counter = 0;
    4246:	10 92 df 07 	sts	0x07DF, r1
    424a:	10 92 de 07 	sts	0x07DE, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    424e:	c3 01       	movw	r24, r6
    4250:	b2 01       	movw	r22, r4
    4252:	0e 94 f5 29 	call	0x53ea	; 0x53ea <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    4256:	c3 01       	movw	r24, r6
    4258:	b2 01       	movw	r22, r4
    425a:	0e 94 44 43 	call	0x8688	; 0x8688 <Sensor_PID>
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//* 
		//************************************************************

		if (Interrupted)
    425e:	80 91 db 07 	lds	r24, 0x07DB
    4262:	88 23       	and	r24, r24
    4264:	09 f4       	brne	.+2      	; 0x4268 <main+0x858>
    4266:	c6 c0       	rjmp	.+396    	; 0x43f4 <main+0x9e4>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer is not in FAST mode.
			if (Config.Servo_rate < FAST)
    4268:	80 91 eb 05 	lds	r24, 0x05EB
    426c:	82 30       	cpi	r24, 0x02	; 2
    426e:	64 f4       	brge	.+24     	; 0x4288 <main+0x878>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    4270:	21 e0       	ldi	r18, 0x01	; 1
    4272:	2a 87       	std	Y+10, r18	; 0x0a
    4274:	2e 81       	ldd	r18, Y+6	; 0x06
    4276:	3f 81       	ldd	r19, Y+7	; 0x07
    4278:	48 85       	ldd	r20, Y+8	; 0x08
    427a:	59 85       	ldd	r21, Y+9	; 0x09
    427c:	24 3c       	cpi	r18, 0xC4	; 196
    427e:	32 4a       	sbci	r19, 0xA2	; 162
    4280:	41 05       	cpc	r20, r1
    4282:	51 05       	cpc	r21, r1
    4284:	08 f4       	brcc	.+2      	; 0x4288 <main+0x878>
    4286:	1a 86       	std	Y+10, r1	; 0x0a
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    4288:	29 81       	ldd	r18, Y+1	; 0x01
    428a:	21 11       	cpse	r18, r1
    428c:	0e c0       	rjmp	.+28     	; 0x42aa <main+0x89a>
    428e:	82 30       	cpi	r24, 0x02	; 2
    4290:	09 f0       	breq	.+2      	; 0x4294 <main+0x884>
    4292:	74 c1       	rjmp	.+744    	; 0x457c <main+0xb6c>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    4294:	80 91 f9 07 	lds	r24, 0x07F9
    4298:	90 91 fa 07 	lds	r25, 0x07FA
    429c:	31 e0       	ldi	r19, 0x01	; 1
    429e:	3a 87       	std	Y+10, r19	; 0x0a
    42a0:	84 3c       	cpi	r24, 0xC4	; 196
    42a2:	92 4a       	sbci	r25, 0xA2	; 162
    42a4:	40 f4       	brcc	.+16     	; 0x42b6 <main+0x8a6>
    42a6:	1a 86       	std	Y+10, r1	; 0x0a
    42a8:	3b c0       	rjmp	.+118    	; 0x4320 <main+0x910>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the S.Bus gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    42aa:	82 30       	cpi	r24, 0x02	; 2
    42ac:	09 f0       	breq	.+2      	; 0x42b0 <main+0x8a0>
    42ae:	66 c1       	rjmp	.+716    	; 0x457c <main+0xb6c>
				// Slow packets (19.7ms gap). Pulse spans just two input packets.
				// 38.8s available space for S.Bus, 40ms for Satellite and 39.92ms for Xtreme.
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.
				//
				if (SlowRC)
    42b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    42b2:	22 23       	and	r18, r18
    42b4:	a9 f1       	breq	.+106    	; 0x4320 <main+0x910>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
    42b6:	38 ec       	ldi	r19, 0xC8	; 200
    42b8:	c3 16       	cp	r12, r19
    42ba:	3b e4       	ldi	r19, 0x4B	; 75
    42bc:	d3 06       	cpc	r13, r19
    42be:	e1 04       	cpc	r14, r1
    42c0:	f1 04       	cpc	r15, r1
    42c2:	08 f0       	brcs	.+2      	; 0x42c6 <main+0x8b6>
    42c4:	5f c1       	rjmp	.+702    	; 0x4584 <main+0xb74>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
    42c6:	46 e2       	ldi	r20, 0x26	; 38
    42c8:	c4 16       	cp	r12, r20
    42ca:	4f e3       	ldi	r20, 0x3F	; 63
    42cc:	d4 06       	cpc	r13, r20
    42ce:	e1 04       	cpc	r14, r1
    42d0:	f1 04       	cpc	r15, r1
    42d2:	08 f0       	brcs	.+2      	; 0x42d6 <main+0x8c6>
    42d4:	5b c1       	rjmp	.+694    	; 0x458c <main+0xb7c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
    42d6:	51 e2       	ldi	r21, 0x21	; 33
    42d8:	c5 16       	cp	r12, r21
    42da:	56 e3       	ldi	r21, 0x36	; 54
    42dc:	d5 06       	cpc	r13, r21
    42de:	e1 04       	cpc	r14, r1
    42e0:	f1 04       	cpc	r15, r1
    42e2:	08 f0       	brcs	.+2      	; 0x42e6 <main+0x8d6>
    42e4:	57 c1       	rjmp	.+686    	; 0x4594 <main+0xb84>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
    42e6:	8d e5       	ldi	r24, 0x5D	; 93
    42e8:	c8 16       	cp	r12, r24
    42ea:	8f e2       	ldi	r24, 0x2F	; 47
    42ec:	d8 06       	cpc	r13, r24
    42ee:	e1 04       	cpc	r14, r1
    42f0:	f1 04       	cpc	r15, r1
    42f2:	08 f0       	brcs	.+2      	; 0x42f6 <main+0x8e6>
    42f4:	53 c1       	rjmp	.+678    	; 0x459c <main+0xb8c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
    42f6:	9c ec       	ldi	r25, 0xCC	; 204
    42f8:	c9 16       	cp	r12, r25
    42fa:	99 e2       	ldi	r25, 0x29	; 41
    42fc:	d9 06       	cpc	r13, r25
    42fe:	e1 04       	cpc	r14, r1
    4300:	f1 04       	cpc	r15, r1
    4302:	08 f0       	brcs	.+2      	; 0x4306 <main+0x8f6>
    4304:	4f c1       	rjmp	.+670    	; 0x45a4 <main+0xb94>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
    4306:	a4 ee       	ldi	r26, 0xE4	; 228
    4308:	ca 16       	cp	r12, r26
    430a:	a5 e2       	ldi	r26, 0x25	; 37
    430c:	da 06       	cpc	r13, r26
    430e:	e1 04       	cpc	r14, r1
    4310:	f1 04       	cpc	r15, r1
    4312:	98 f5       	brcc	.+102    	; 0x437a <main+0x96a>
    4314:	21 e0       	ldi	r18, 0x01	; 1
    4316:	29 83       	std	Y+1, r18	; 0x01
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    4318:	2a e0       	ldi	r18, 0x0A	; 10
    431a:	82 2e       	mov	r8, r18
    431c:	91 2c       	mov	r9, r1
    431e:	38 c0       	rjmp	.+112    	; 0x4390 <main+0x980>
				// 
				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
    4320:	3d ec       	ldi	r19, 0xCD	; 205
    4322:	c3 16       	cp	r12, r19
    4324:	36 e4       	ldi	r19, 0x46	; 70
    4326:	d3 06       	cpc	r13, r19
    4328:	e1 04       	cpc	r14, r1
    432a:	f1 04       	cpc	r15, r1
    432c:	08 f0       	brcs	.+2      	; 0x4330 <main+0x920>
    432e:	40 c1       	rjmp	.+640    	; 0x45b0 <main+0xba0>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
    4330:	44 ea       	ldi	r20, 0xA4	; 164
    4332:	c4 16       	cp	r12, r20
    4334:	48 e3       	ldi	r20, 0x38	; 56
    4336:	d4 06       	cpc	r13, r20
    4338:	e1 04       	cpc	r14, r1
    433a:	f1 04       	cpc	r15, r1
    433c:	08 f0       	brcs	.+2      	; 0x4340 <main+0x930>
    433e:	3c c1       	rjmp	.+632    	; 0x45b8 <main+0xba8>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
    4340:	53 e3       	ldi	r21, 0x33	; 51
    4342:	c5 16       	cp	r12, r21
    4344:	5f e2       	ldi	r21, 0x2F	; 47
    4346:	d5 06       	cpc	r13, r21
    4348:	e1 04       	cpc	r14, r1
    434a:	f1 04       	cpc	r15, r1
    434c:	08 f0       	brcs	.+2      	; 0x4350 <main+0x940>
    434e:	38 c1       	rjmp	.+624    	; 0x45c0 <main+0xbb0>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
    4350:	85 e7       	ldi	r24, 0x75	; 117
    4352:	c8 16       	cp	r12, r24
    4354:	88 e2       	ldi	r24, 0x28	; 40
    4356:	d8 06       	cpc	r13, r24
    4358:	e1 04       	cpc	r14, r1
    435a:	f1 04       	cpc	r15, r1
    435c:	08 f0       	brcs	.+2      	; 0x4360 <main+0x950>
    435e:	34 c1       	rjmp	.+616    	; 0x45c8 <main+0xbb8>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
    4360:	96 e6       	ldi	r25, 0x66	; 102
    4362:	c9 16       	cp	r12, r25
    4364:	93 e2       	ldi	r25, 0x23	; 35
    4366:	d9 06       	cpc	r13, r25
    4368:	e1 04       	cpc	r14, r1
    436a:	f1 04       	cpc	r15, r1
    436c:	60 f4       	brcc	.+24     	; 0x4386 <main+0x976>
    436e:	21 e0       	ldi	r18, 0x01	; 1
    4370:	29 83       	std	Y+1, r18	; 0x01
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 275Hz
    4372:	98 e0       	ldi	r25, 0x08	; 8
    4374:	89 2e       	mov	r8, r25
    4376:	91 2c       	mov	r9, r1
    4378:	0b c0       	rjmp	.+22     	; 0x4390 <main+0x980>
    437a:	31 e0       	ldi	r19, 0x01	; 1
    437c:	39 83       	std	Y+1, r19	; 0x01
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
    437e:	89 e0       	ldi	r24, 0x09	; 9
    4380:	88 2e       	mov	r8, r24
    4382:	91 2c       	mov	r9, r1
    4384:	05 c0       	rjmp	.+10     	; 0x4390 <main+0x980>
    4386:	41 e0       	ldi	r20, 0x01	; 1
    4388:	49 83       	std	Y+1, r20	; 0x01
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
    438a:	b7 e0       	ldi	r27, 0x07	; 7
    438c:	8b 2e       	mov	r8, r27
    438e:	91 2c       	mov	r9, r1

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
    4390:	10 92 19 05 	sts	0x0519, r1
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    4394:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <TIM16_ReadTCNT1>
    4398:	9d 8b       	std	Y+21, r25	; 0x15
    439a:	8c 8b       	std	Y+20, r24	; 0x14
			//* output when serial RC formats are used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    439c:	80 91 eb 05 	lds	r24, 0x05EB
    43a0:	82 30       	cpi	r24, 0x02	; 2
    43a2:	b9 f4       	brne	.+46     	; 0x43d2 <main+0x9c2>
    43a4:	29 81       	ldd	r18, Y+1	; 0x01
    43a6:	22 23       	and	r18, r18
    43a8:	a1 f0       	breq	.+40     	; 0x43d2 <main+0x9c2>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    43aa:	3b 8d       	ldd	r19, Y+27	; 0x1b
    43ac:	31 11       	cpse	r19, r1
    43ae:	18 c0       	rjmp	.+48     	; 0x43e0 <main+0x9d0>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    43b0:	80 91 db 07 	lds	r24, 0x07DB
    43b4:	81 11       	cpse	r24, r1
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    43b6:	01 e0       	ldi	r16, 0x01	; 1
					}
					Interrupted = false;		// Cancel pending interrupts
    43b8:	10 92 db 07 	sts	0x07DB, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    43bc:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    43c0:	1b a6       	std	Y+43, r1	; 0x2b
    43c2:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    43c4:	1e 82       	std	Y+6, r1	; 0x06
    43c6:	1f 82       	std	Y+7, r1	; 0x07
    43c8:	18 86       	std	Y+8, r1	; 0x08
    43ca:	19 86       	std	Y+9, r1	; 0x09
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    43cc:	1d 86       	std	Y+13, r1	; 0x0d
					PWMBlocked = false;			// Enable PWM generation	
    43ce:	1c 86       	std	Y+12, r1	; 0x0c
    43d0:	11 c0       	rjmp	.+34     	; 0x43f4 <main+0x9e4>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    43d2:	1b a6       	std	Y+43, r1	; 0x2b
    43d4:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    43d6:	1e 82       	std	Y+6, r1	; 0x06
    43d8:	1f 82       	std	Y+7, r1	; 0x07
    43da:	18 86       	std	Y+8, r1	; 0x08
    43dc:	19 86       	std	Y+9, r1	; 0x09
    43de:	0a c0       	rjmp	.+20     	; 0x43f4 <main+0x9e4>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    43e0:	1b a6       	std	Y+43, r1	; 0x2b
    43e2:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    43e4:	1e 82       	std	Y+6, r1	; 0x06
    43e6:	1f 82       	std	Y+7, r1	; 0x07
    43e8:	18 86       	std	Y+8, r1	; 0x08
    43ea:	19 86       	std	Y+9, r1	; 0x09
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    43ec:	1b 8e       	std	Y+27, r1	; 0x1b
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    43ee:	41 e0       	ldi	r20, 0x01	; 1
    43f0:	4c 87       	std	Y+12, r20	; 0x0c
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    43f2:	19 82       	std	Y+1, r1	; 0x01
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    43f4:	80 91 db 07 	lds	r24, 0x07DB
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    43f8:	81 11       	cpse	r24, r1
    43fa:	08 c0       	rjmp	.+16     	; 0x440c <main+0x9fc>
				(Interrupted) ||											// Run at RC rate
    43fc:	80 91 eb 05 	lds	r24, 0x05EB
    4400:	82 30       	cpi	r24, 0x02	; 2
    4402:	09 f0       	breq	.+2      	; 0x4406 <main+0x9f6>
    4404:	91 c0       	rjmp	.+290    	; 0x4528 <main+0xb18>
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    4406:	2c 85       	ldd	r18, Y+12	; 0x0c
    4408:	21 11       	cpse	r18, r1
    440a:	7e c0       	rjmp	.+252    	; 0x4508 <main+0xaf8>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    440c:	80 91 db 07 	lds	r24, 0x07DB
    4410:	88 23       	and	r24, r24
    4412:	19 f0       	breq	.+6      	; 0x441a <main+0xa0a>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    4414:	10 92 db 07 	sts	0x07DB, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    4418:	01 e0       	ldi	r16, 0x01	; 1
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    441a:	90 91 eb 05 	lds	r25, 0x05EB
    441e:	e7 e5       	ldi	r30, 0x57	; 87
    4420:	f6 e0       	ldi	r31, 0x06	; 6
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    4426:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    4428:	92 30       	cpi	r25, 0x02	; 2
    442a:	29 f4       	brne	.+10     	; 0x4436 <main+0xa26>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    442c:	40 81       	ld	r20, Z
    442e:	44 23       	and	r20, r20
    4430:	09 f4       	brne	.+2      	; 0x4434 <main+0xa24>
    4432:	d0 c0       	rjmp	.+416    	; 0x45d4 <main+0xbc4>
    4434:	0b c0       	rjmp	.+22     	; 0x444c <main+0xa3c>
    4436:	91 30       	cpi	r25, 0x01	; 1
    4438:	39 f4       	brne	.+14     	; 0x4448 <main+0xa38>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    443a:	40 81       	ld	r20, Z
    443c:	41 11       	cpse	r20, r1
    443e:	06 c0       	rjmp	.+12     	; 0x444c <main+0xa3c>
    4440:	4a 85       	ldd	r20, Y+10	; 0x0a
    4442:	41 11       	cpse	r20, r1
    4444:	0f c0       	rjmp	.+30     	; 0x4464 <main+0xa54>
    4446:	c6 c0       	rjmp	.+396    	; 0x45d4 <main+0xbc4>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    4448:	19 16       	cp	r1, r25
    444a:	24 f4       	brge	.+8      	; 0x4454 <main+0xa44>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    444c:	40 81       	ld	r20, Z
    444e:	14 16       	cp	r1, r20
    4450:	4c f0       	brlt	.+18     	; 0x4464 <main+0xa54>
    4452:	10 c0       	rjmp	.+32     	; 0x4474 <main+0xa64>
    4454:	91 11       	cpse	r25, r1
    4456:	0e c0       	rjmp	.+28     	; 0x4474 <main+0xa64>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    4458:	4a 85       	ldd	r20, Y+10	; 0x0a
    445a:	41 11       	cpse	r20, r1
    445c:	03 c0       	rjmp	.+6      	; 0x4464 <main+0xa54>
    445e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4460:	44 23       	and	r20, r20
    4462:	41 f0       	breq	.+16     	; 0x4474 <main+0xa64>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
					)
				{
					ServoFlag |= (1 << i);
    4464:	41 e0       	ldi	r20, 0x01	; 1
    4466:	50 e0       	ldi	r21, 0x00	; 0
    4468:	02 2e       	mov	r0, r18
    446a:	01 c0       	rjmp	.+2      	; 0x446e <main+0xa5e>
    446c:	44 0f       	add	r20, r20
    446e:	0a 94       	dec	r0
    4470:	ea f7       	brpl	.-6      	; 0x446c <main+0xa5c>
    4472:	84 2b       	or	r24, r20
    4474:	2f 5f       	subi	r18, 0xFF	; 255
    4476:	3f 4f       	sbci	r19, 0xFF	; 255
    4478:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    447a:	28 30       	cpi	r18, 0x08	; 8
    447c:	31 05       	cpc	r19, r1
    447e:	a1 f6       	brne	.-88     	; 0x4428 <main+0xa18>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    4480:	2b 85       	ldd	r18, Y+11	; 0x0b
    4482:	22 23       	and	r18, r18
    4484:	11 f0       	breq	.+4      	; 0x448a <main+0xa7a>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    4486:	19 8a       	std	Y+17, r1	; 0x11
    4488:	18 8a       	std	Y+16, r1	; 0x10
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    448a:	31 e0       	ldi	r19, 0x01	; 1
    448c:	83 16       	cp	r8, r19
    448e:	91 04       	cpc	r9, r1
    4490:	d1 f4       	brne	.+52     	; 0x44c6 <main+0xab6>
    4492:	92 30       	cpi	r25, 0x02	; 2
    4494:	c1 f4       	brne	.+48     	; 0x44c6 <main+0xab6>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if ((interval < PWM_PERIOD_WORST) && (interval > PWM_PERIOD_BEST))
    4496:	b3 01       	movw	r22, r6
    4498:	a2 01       	movw	r20, r4
    449a:	4e 58       	subi	r20, 0x8E	; 142
    449c:	50 42       	sbci	r21, 0x20	; 32
    449e:	61 09       	sbc	r22, r1
    44a0:	71 09       	sbc	r23, r1
    44a2:	43 3d       	cpi	r20, 0xD3	; 211
    44a4:	50 43       	sbci	r21, 0x30	; 48
    44a6:	61 05       	cpc	r22, r1
    44a8:	71 05       	cpc	r23, r1
    44aa:	48 f0       	brcs	.+18     	; 0x44be <main+0xaae>
				{
					PWM_interval = interval;
				}
				else
				{
					PWM_interval = PWM_PERIOD_WORST; // 120Hz
    44ac:	a1 e6       	ldi	r26, 0x61	; 97
    44ae:	ca 2e       	mov	r12, r26
    44b0:	a1 e5       	ldi	r26, 0x51	; 81
    44b2:	da 2e       	mov	r13, r26
    44b4:	e1 2c       	mov	r14, r1
    44b6:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    44b8:	21 e0       	ldi	r18, 0x01	; 1
    44ba:	2c 87       	std	Y+12, r18	; 0x0c
    44bc:	04 c0       	rjmp	.+8      	; 0x44c6 <main+0xab6>
    44be:	73 01       	movw	r14, r6
    44c0:	62 01       	movw	r12, r4
    44c2:	31 e0       	ldi	r19, 0x01	; 1
    44c4:	3c 87       	std	Y+12, r19	; 0x0c
			}
			
			// Don't bother with mixer calculations if blocked or overridden
		//	if (!(PWMBlocked || PWMOverride))
		//	{
				Calculate_PID();					// Calculate PID values
    44c6:	89 a7       	std	Y+41, r24	; 0x29
    44c8:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <Calculate_PID>
				ProcessMixer();						// Do all the mixer tasks - can be very slow
    44cc:	0e 94 7f 3c 	call	0x78fe	; 0x78fe <ProcessMixer>
				UpdateServos();						// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits				
    44d0:	0e 94 1f 3c 	call	0x783e	; 0x783e <UpdateServos>
		//	}
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    44d4:	89 a5       	ldd	r24, Y+41	; 0x29
    44d6:	aa 20       	and	r10, r10
    44d8:	39 f0       	breq	.+14     	; 0x44e8 <main+0xad8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    44da:	8b ee       	ldi	r24, 0xEB	; 235
    44dc:	9c e2       	ldi	r25, 0x2C	; 44
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	f1 f7       	brne	.-4      	; 0x44de <main+0xace>
    44e2:	00 c0       	rjmp	.+0      	; 0x44e4 <main+0xad4>
    44e4:	00 00       	nop
    44e6:	02 c0       	rjmp	.+4      	; 0x44ec <main+0xadc>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    44e8:	0e 94 b6 48 	call	0x916c	; 0x916c <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    44ec:	80 91 eb 05 	lds	r24, 0x05EB
    44f0:	82 30       	cpi	r24, 0x02	; 2
    44f2:	31 f4       	brne	.+12     	; 0x4500 <main+0xaf0>
    44f4:	18 14       	cp	r1, r8
    44f6:	19 04       	cpc	r1, r9
    44f8:	1c f4       	brge	.+6      	; 0x4500 <main+0xaf0>
			{
				PWM_pulses--;
    44fa:	91 e0       	ldi	r25, 0x01	; 1
    44fc:	89 1a       	sub	r8, r25
    44fe:	91 08       	sbc	r9, r1
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    4500:	10 92 18 05 	sts	0x0518, r1
    4504:	1b 86       	std	Y+11, r1	; 0x0b
    4506:	10 c0       	rjmp	.+32     	; 0x4528 <main+0xb18>
		
		// In FAST mode and while remeasuring the RC rate, to keep the loop rate at the approximate PWM rate,
		// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary, but we have to also 
		// fake the Calculate_PID() and ProcessMixer() times. This keeps the cycle time more constant.
		
		else if ((Config.Servo_rate == FAST) && (PWMBlocked == true) && (RCrateMeasured == true) && (RCInterruptsON == true) && (Overdue == false)) // debug
    4508:	29 81       	ldd	r18, Y+1	; 0x01
    450a:	22 23       	and	r18, r18
    450c:	01 f1       	breq	.+64     	; 0x454e <main+0xb3e>
    450e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4510:	33 23       	and	r19, r19
    4512:	09 f4       	brne	.+2      	; 0x4516 <main+0xb06>
    4514:	63 c0       	rjmp	.+198    	; 0x45dc <main+0xbcc>
    4516:	80 91 19 05 	lds	r24, 0x0519
    451a:	81 11       	cpse	r24, r1
    451c:	05 c0       	rjmp	.+10     	; 0x4528 <main+0xb18>
		{
			// Wait here until interrupted
			while (Interrupted == false)
    451e:	80 91 db 07 	lds	r24, 0x07DB
    4522:	88 23       	and	r24, r24
    4524:	e1 f3       	breq	.-8      	; 0x451e <main+0xb0e>
			{
			}
			
			Interrupted_Clone = false;
    4526:	00 e0       	ldi	r16, 0x00	; 0
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    4528:	18 14       	cp	r1, r8
    452a:	19 04       	cpc	r1, r9
    452c:	84 f0       	brlt	.+32     	; 0x454e <main+0xb3e>
    452e:	49 81       	ldd	r20, Y+1	; 0x01
    4530:	44 23       	and	r20, r20
    4532:	69 f0       	breq	.+26     	; 0x454e <main+0xb3e>
    4534:	2d 85       	ldd	r18, Y+13	; 0x0d
    4536:	21 11       	cpse	r18, r1
    4538:	0a c0       	rjmp	.+20     	; 0x454e <main+0xb3e>
    453a:	80 91 eb 05 	lds	r24, 0x05EB
    453e:	82 30       	cpi	r24, 0x02	; 2
    4540:	29 f4       	brne	.+10     	; 0x454c <main+0xb3c>
		{
			init_int();					// Re-enable interrupts
    4542:	0e 94 e7 31 	call	0x63ce	; 0x63ce <init_int>
			RCInterruptsON = true;
    4546:	31 e0       	ldi	r19, 0x01	; 1
    4548:	3d 87       	std	Y+13, r19	; 0x0d
    454a:	01 c0       	rjmp	.+2      	; 0x454e <main+0xb3e>
    454c:	1d 86       	std	Y+13, r1	; 0x0d
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    454e:	80 91 20 05 	lds	r24, 0x0520
    4552:	48 a5       	ldd	r20, Y+40	; 0x28
    4554:	48 17       	cp	r20, r24
    4556:	19 f0       	breq	.+6      	; 0x455e <main+0xb4e>
    4558:	11 11       	cpse	r17, r1
    455a:	01 c0       	rjmp	.+2      	; 0x455e <main+0xb4e>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    455c:	17 e0       	ldi	r17, 0x07	; 7
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    455e:	20 91 20 05 	lds	r18, 0x0520
    4562:	28 a7       	std	Y+40, r18	; 0x28
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    4564:	7e 8c       	ldd	r7, Y+30	; 0x1e
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
	
	} // while loop
    4566:	4c 88       	ldd	r4, Y+20	; 0x14
    4568:	5d 88       	ldd	r5, Y+21	; 0x15
    456a:	98 ca       	rjmp	.-2768   	; 0x3a9c <main+0x8c>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    456c:	70 93 22 05 	sts	0x0522, r23
    4570:	60 93 21 05 	sts	0x0521, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    4574:	85 e0       	ldi	r24, 0x05	; 5
    4576:	80 93 23 05 	sts	0x0523, r24
    457a:	99 cc       	rjmp	.-1742   	; 0x3eae <main+0x49e>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    457c:	88 24       	eor	r8, r8
    457e:	83 94       	inc	r8
    4580:	91 2c       	mov	r9, r1
    4582:	06 cf       	rjmp	.-500    	; 0x4390 <main+0x980>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.
				//
				if (SlowRC)
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
    4584:	e4 e0       	ldi	r30, 0x04	; 4
    4586:	8e 2e       	mov	r8, r30
    4588:	91 2c       	mov	r9, r1
    458a:	0f c0       	rjmp	.+30     	; 0x45aa <main+0xb9a>
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
    458c:	75 e0       	ldi	r23, 0x05	; 5
    458e:	87 2e       	mov	r8, r23
    4590:	91 2c       	mov	r9, r1
    4592:	0b c0       	rjmp	.+22     	; 0x45aa <main+0xb9a>
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
    4594:	66 e0       	ldi	r22, 0x06	; 6
    4596:	86 2e       	mov	r8, r22
    4598:	91 2c       	mov	r9, r1
    459a:	07 c0       	rjmp	.+14     	; 0x45aa <main+0xb9a>
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
    459c:	57 e0       	ldi	r21, 0x07	; 7
    459e:	85 2e       	mov	r8, r21
    45a0:	91 2c       	mov	r9, r1
    45a2:	03 c0       	rjmp	.+6      	; 0x45aa <main+0xb9a>
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    45a4:	48 e0       	ldi	r20, 0x08	; 8
    45a6:	84 2e       	mov	r8, r20
    45a8:	91 2c       	mov	r9, r1
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    45aa:	31 e0       	ldi	r19, 0x01	; 1
    45ac:	39 83       	std	Y+1, r19	; 0x01
    45ae:	f0 ce       	rjmp	.-544    	; 0x4390 <main+0x980>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 29ms is safe for all formats.
				// 
				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
    45b0:	33 e0       	ldi	r19, 0x03	; 3
    45b2:	83 2e       	mov	r8, r19
    45b4:	91 2c       	mov	r9, r1
    45b6:	0b c0       	rjmp	.+22     	; 0x45ce <main+0xbbe>
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
    45b8:	24 e0       	ldi	r18, 0x04	; 4
    45ba:	82 2e       	mov	r8, r18
    45bc:	91 2c       	mov	r9, r1
    45be:	07 c0       	rjmp	.+14     	; 0x45ce <main+0xbbe>
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
    45c0:	95 e0       	ldi	r25, 0x05	; 5
    45c2:	89 2e       	mov	r8, r25
    45c4:	91 2c       	mov	r9, r1
    45c6:	03 c0       	rjmp	.+6      	; 0x45ce <main+0xbbe>
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    45c8:	86 e0       	ldi	r24, 0x06	; 6
    45ca:	88 2e       	mov	r8, r24
    45cc:	91 2c       	mov	r9, r1
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    45ce:	41 e0       	ldi	r20, 0x01	; 1
    45d0:	49 83       	std	Y+1, r20	; 0x01
    45d2:	de ce       	rjmp	.-580    	; 0x4390 <main+0x980>
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    45d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    45d6:	41 11       	cpse	r20, r1
    45d8:	45 cf       	rjmp	.-374    	; 0x4464 <main+0xa54>
    45da:	38 cf       	rjmp	.-400    	; 0x444c <main+0xa3c>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    45dc:	18 14       	cp	r1, r8
    45de:	19 04       	cpc	r1, r9
    45e0:	0c f4       	brge	.+2      	; 0x45e4 <main+0xbd4>
    45e2:	b5 cf       	rjmp	.-150    	; 0x454e <main+0xb3e>
    45e4:	aa cf       	rjmp	.-172    	; 0x453a <main+0xb2a>

000045e6 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    45e6:	0f 93       	push	r16
    45e8:	1f 93       	push	r17
    45ea:	cf 93       	push	r28
    45ec:	df 93       	push	r29
    45ee:	c7 e0       	ldi	r28, 0x07	; 7
    45f0:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    45f2:	08 2f       	mov	r16, r24
    45f4:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    45f6:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    45f8:	c8 01       	movw	r24, r16
    45fa:	0c 2e       	mov	r0, r28
    45fc:	02 c0       	rjmp	.+4      	; 0x4602 <spiwrite+0x1c>
    45fe:	95 95       	asr	r25
    4600:	87 95       	ror	r24
    4602:	0a 94       	dec	r0
    4604:	e2 f7       	brpl	.-8      	; 0x45fe <spiwrite+0x18>
    4606:	80 ff       	sbrs	r24, 0
    4608:	02 c0       	rjmp	.+4      	; 0x460e <spiwrite+0x28>
		{
			LCD_SI = 1;
    460a:	59 9a       	sbi	0x0b, 1	; 11
    460c:	01 c0       	rjmp	.+2      	; 0x4610 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    460e:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    4610:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    4612:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <glcd_delay>
    4616:	21 97       	sbiw	r28, 0x01	; 1
    4618:	70 f7       	brcc	.-36     	; 0x45f6 <spiwrite+0x10>
	}
}
    461a:	df 91       	pop	r29
    461c:	cf 91       	pop	r28
    461e:	1f 91       	pop	r17
    4620:	0f 91       	pop	r16
    4622:	08 95       	ret

00004624 <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    4624:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    4626:	0c 94 f3 22 	jmp	0x45e6	; 0x45e6 <spiwrite>

0000462a <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    462a:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    462c:	0c 94 f3 22 	jmp	0x45e6	; 0x45e6 <spiwrite>

00004630 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    4630:	cf 93       	push	r28
    4632:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    4634:	81 e8       	ldi	r24, 0x81	; 129
    4636:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
	st7565_command(val);
    463a:	8c 2f       	mov	r24, r28
}
    463c:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    463e:	0c 94 12 23 	jmp	0x4624	; 0x4624 <st7565_command>

00004642 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    4642:	cf 93       	push	r28
    4644:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    4646:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    4648:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    464a:	87 e8       	ldi	r24, 0x87	; 135
    464c:	93 e1       	ldi	r25, 0x13	; 19
    464e:	01 97       	sbiw	r24, 0x01	; 1
    4650:	f1 f7       	brne	.-4      	; 0x464e <st7565_init+0xc>
    4652:	00 c0       	rjmp	.+0      	; 0x4654 <st7565_init+0x12>
    4654:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    4656:	5e 9a       	sbi	0x0b, 6	; 11
    4658:	c0 ef       	ldi	r28, 0xF0	; 240
    465a:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    465c:	fe 01       	movw	r30, r28
    465e:	84 91       	lpm	r24, Z
    4660:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
    4664:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    4666:	fd e0       	ldi	r31, 0x0D	; 13
    4668:	ce 3f       	cpi	r28, 0xFE	; 254
    466a:	df 07       	cpc	r29, r31
    466c:	b9 f7       	brne	.-18     	; 0x465c <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    466e:	80 91 4a 06 	lds	r24, 0x064A
    4672:	0e 94 18 23 	call	0x4630	; 0x4630 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    4676:	88 ec       	ldi	r24, 0xC8	; 200
}
    4678:	df 91       	pop	r29
    467a:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    467c:	0c 94 12 23 	jmp	0x4624	; 0x4624 <st7565_command>

00004680 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    4680:	df 92       	push	r13
    4682:	ef 92       	push	r14
    4684:	ff 92       	push	r15
    4686:	0f 93       	push	r16
    4688:	1f 93       	push	r17
    468a:	cf 93       	push	r28
    468c:	df 93       	push	r29
    468e:	ce ef       	ldi	r28, 0xFE	; 254
    4690:	dd e0       	ldi	r29, 0x0D	; 13
    4692:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    4694:	fe 01       	movw	r30, r28
    4696:	84 91       	lpm	r24, Z
    4698:	80 6b       	ori	r24, 0xB0	; 176
    469a:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    46a4:	80 e1       	ldi	r24, 0x10	; 16
    46a6:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    46aa:	80 ee       	ldi	r24, 0xE0	; 224
    46ac:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
    46b0:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    46b2:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    46b4:	f7 01       	movw	r30, r14
    46b6:	81 91       	ld	r24, Z+
    46b8:	7f 01       	movw	r14, r30
    46ba:	0e 94 15 23 	call	0x462a	; 0x462a <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    46be:	d3 94       	inc	r13
    46c0:	f0 e8       	ldi	r31, 0x80	; 128
    46c2:	df 12       	cpse	r13, r31
    46c4:	f7 cf       	rjmp	.-18     	; 0x46b4 <write_buffer+0x34>
    46c6:	21 96       	adiw	r28, 0x01	; 1
    46c8:	00 58       	subi	r16, 0x80	; 128
    46ca:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    46cc:	8e e0       	ldi	r24, 0x0E	; 14
    46ce:	c6 30       	cpi	r28, 0x06	; 6
    46d0:	d8 07       	cpc	r29, r24
    46d2:	01 f7       	brne	.-64     	; 0x4694 <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    46d4:	df 91       	pop	r29
    46d6:	cf 91       	pop	r28
    46d8:	1f 91       	pop	r17
    46da:	0f 91       	pop	r16
    46dc:	ff 90       	pop	r15
    46de:	ef 90       	pop	r14
    46e0:	df 90       	pop	r13
    46e2:	08 95       	ret

000046e4 <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	34 e0       	ldi	r19, 0x04	; 4
    46e8:	fc 01       	movw	r30, r24
    46ea:	a9 01       	movw	r20, r18
    46ec:	11 92       	st	Z+, r1
    46ee:	41 50       	subi	r20, 0x01	; 1
    46f0:	50 40       	sbci	r21, 0x00	; 0
    46f2:	e1 f7       	brne	.-8      	; 0x46ec <clear_buffer+0x8>
    46f4:	08 95       	ret

000046f6 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    46f6:	cf 93       	push	r28
    46f8:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    46fa:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    46fc:	8d 2f       	mov	r24, r29
    46fe:	80 6b       	ori	r24, 0xB0	; 176
    4700:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4704:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    4706:	8c 2f       	mov	r24, r28
    4708:	8f 70       	andi	r24, 0x0F	; 15
    470a:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    470e:	8c 2f       	mov	r24, r28
    4710:	82 95       	swap	r24
    4712:	8f 70       	andi	r24, 0x0F	; 15
    4714:	80 61       	ori	r24, 0x10	; 16
    4716:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
			st7565_data(0x00);											// Clear data
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	0e 94 15 23 	call	0x462a	; 0x462a <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4720:	cf 5f       	subi	r28, 0xFF	; 255
    4722:	c0 38       	cpi	r28, 0x80	; 128
    4724:	81 f7       	brne	.-32     	; 0x4706 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4726:	df 5f       	subi	r29, 0xFF	; 255
    4728:	d8 30       	cpi	r29, 0x08	; 8
    472a:	41 f7       	brne	.-48     	; 0x46fc <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    472c:	df 91       	pop	r29
    472e:	cf 91       	pop	r28
    4730:	08 95       	ret

00004732 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    4732:	67 fd       	sbrc	r22, 7
    4734:	36 c0       	rjmp	.+108    	; 0x47a2 <setpixel+0x70>
    4736:	40 34       	cpi	r20, 0x40	; 64
    4738:	a0 f5       	brcc	.+104    	; 0x47a2 <setpixel+0x70>
    473a:	34 2f       	mov	r19, r20
    473c:	36 95       	lsr	r19
    473e:	36 95       	lsr	r19
    4740:	36 95       	lsr	r19
    4742:	e6 2f       	mov	r30, r22
    4744:	f0 e0       	ldi	r31, 0x00	; 0
    4746:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    4748:	22 23       	and	r18, r18
    474a:	a9 f0       	breq	.+42     	; 0x4776 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    474c:	20 e8       	ldi	r18, 0x80	; 128
    474e:	32 9f       	mul	r19, r18
    4750:	e0 0d       	add	r30, r0
    4752:	f1 1d       	adc	r31, r1
    4754:	11 24       	eor	r1, r1
    4756:	e8 0f       	add	r30, r24
    4758:	f9 1f       	adc	r31, r25
    475a:	40 95       	com	r20
    475c:	50 95       	com	r21
    475e:	47 70       	andi	r20, 0x07	; 7
    4760:	55 27       	eor	r21, r21
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	04 2e       	mov	r0, r20
    4768:	01 c0       	rjmp	.+2      	; 0x476c <setpixel+0x3a>
    476a:	88 0f       	add	r24, r24
    476c:	0a 94       	dec	r0
    476e:	ea f7       	brpl	.-6      	; 0x476a <setpixel+0x38>
    4770:	90 81       	ld	r25, Z
    4772:	98 2b       	or	r25, r24
    4774:	15 c0       	rjmp	.+42     	; 0x47a0 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    4776:	20 e8       	ldi	r18, 0x80	; 128
    4778:	32 9f       	mul	r19, r18
    477a:	e0 0d       	add	r30, r0
    477c:	f1 1d       	adc	r31, r1
    477e:	11 24       	eor	r1, r1
    4780:	e8 0f       	add	r30, r24
    4782:	f9 1f       	adc	r31, r25
    4784:	40 95       	com	r20
    4786:	50 95       	com	r21
    4788:	47 70       	andi	r20, 0x07	; 7
    478a:	55 27       	eor	r21, r21
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	04 2e       	mov	r0, r20
    4792:	01 c0       	rjmp	.+2      	; 0x4796 <setpixel+0x64>
    4794:	88 0f       	add	r24, r24
    4796:	0a 94       	dec	r0
    4798:	ea f7       	brpl	.-6      	; 0x4794 <setpixel+0x62>
    479a:	80 95       	com	r24
    479c:	90 81       	ld	r25, Z
    479e:	98 23       	and	r25, r24
    47a0:	90 83       	st	Z, r25
    47a2:	08 95       	ret

000047a4 <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    47a4:	9f 92       	push	r9
    47a6:	af 92       	push	r10
    47a8:	bf 92       	push	r11
    47aa:	cf 92       	push	r12
    47ac:	df 92       	push	r13
    47ae:	ef 92       	push	r14
    47b0:	ff 92       	push	r15
    47b2:	0f 93       	push	r16
    47b4:	1f 93       	push	r17
    47b6:	cf 93       	push	r28
    47b8:	df 93       	push	r29
    47ba:	ec 01       	movw	r28, r24
    47bc:	16 2f       	mov	r17, r22
    47be:	f4 2e       	mov	r15, r20
    47c0:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    47c2:	a0 2f       	mov	r26, r16
    47c4:	b0 e0       	ldi	r27, 0x00	; 0
    47c6:	a4 1b       	sub	r26, r20
    47c8:	b1 09       	sbc	r27, r1
    47ca:	b7 ff       	sbrs	r27, 7
    47cc:	03 c0       	rjmp	.+6      	; 0x47d4 <drawline+0x30>
    47ce:	b1 95       	neg	r27
    47d0:	a1 95       	neg	r26
    47d2:	b1 09       	sbc	r27, r1
    47d4:	ed 2d       	mov	r30, r13
    47d6:	f0 e0       	ldi	r31, 0x00	; 0
    47d8:	e1 1b       	sub	r30, r17
    47da:	f1 09       	sbc	r31, r1
    47dc:	f7 ff       	sbrs	r31, 7
    47de:	03 c0       	rjmp	.+6      	; 0x47e6 <drawline+0x42>
    47e0:	f1 95       	neg	r31
    47e2:	e1 95       	neg	r30
    47e4:	f1 09       	sbc	r31, r1
    47e6:	bb 24       	eor	r11, r11
    47e8:	b3 94       	inc	r11
    47ea:	ea 17       	cp	r30, r26
    47ec:	fb 07       	cpc	r31, r27
    47ee:	14 f0       	brlt	.+4      	; 0x47f4 <drawline+0x50>
    47f0:	b1 2c       	mov	r11, r1
    47f2:	06 c0       	rjmp	.+12     	; 0x4800 <drawline+0x5c>
    47f4:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    47f6:	d0 2e       	mov	r13, r16
    47f8:	08 2f       	mov	r16, r24
    47fa:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    47fc:	1f 2d       	mov	r17, r15
    47fe:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    4800:	d1 16       	cp	r13, r17
    4802:	30 f4       	brcc	.+12     	; 0x4810 <drawline+0x6c>
    4804:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    4806:	f0 2e       	mov	r15, r16
    4808:	08 2f       	mov	r16, r24
    480a:	81 2f       	mov	r24, r17
    480c:	1d 2d       	mov	r17, r13
    480e:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    4810:	ad 2c       	mov	r10, r13
    4812:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    4814:	e0 2f       	mov	r30, r16
    4816:	f0 e0       	ldi	r31, 0x00	; 0
    4818:	ef 19       	sub	r30, r15
    481a:	f1 09       	sbc	r31, r1
    481c:	f7 ff       	sbrs	r31, 7
    481e:	03 c0       	rjmp	.+6      	; 0x4826 <drawline+0x82>
    4820:	f1 95       	neg	r31
    4822:	e1 95       	neg	r30
    4824:	f1 09       	sbc	r31, r1
    4826:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    4828:	ca 2c       	mov	r12, r10
    482a:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    482c:	f0 16       	cp	r15, r16
    482e:	10 f4       	brcc	.+4      	; 0x4834 <drawline+0x90>
	{
		ystep = 1;
    4830:	01 e0       	ldi	r16, 0x01	; 1
    4832:	10 c0       	rjmp	.+32     	; 0x4854 <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    4834:	0f ef       	ldi	r16, 0xFF	; 255
    4836:	0e c0       	rjmp	.+28     	; 0x4854 <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    4838:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    483a:	bb 20       	and	r11, r11
    483c:	71 f0       	breq	.+28     	; 0x485a <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    483e:	41 2f       	mov	r20, r17
    4840:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4842:	ce 01       	movw	r24, r28
    4844:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>
		}
		err -= dy;
    4848:	c9 18       	sub	r12, r9
		if (err < 0) 
    484a:	c7 fe       	sbrs	r12, 7
    484c:	02 c0       	rjmp	.+4      	; 0x4852 <drawline+0xae>
		{
			y0 += ystep;
    484e:	f0 0e       	add	r15, r16
			err += dx;
    4850:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    4852:	1f 5f       	subi	r17, 0xFF	; 255
    4854:	1d 15       	cp	r17, r13
    4856:	80 f3       	brcs	.-32     	; 0x4838 <drawline+0x94>
    4858:	03 c0       	rjmp	.+6      	; 0x4860 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    485a:	4f 2d       	mov	r20, r15
    485c:	61 2f       	mov	r22, r17
    485e:	f1 cf       	rjmp	.-30     	; 0x4842 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    4860:	df 91       	pop	r29
    4862:	cf 91       	pop	r28
    4864:	1f 91       	pop	r17
    4866:	0f 91       	pop	r16
    4868:	ff 90       	pop	r15
    486a:	ef 90       	pop	r14
    486c:	df 90       	pop	r13
    486e:	cf 90       	pop	r12
    4870:	bf 90       	pop	r11
    4872:	af 90       	pop	r10
    4874:	9f 90       	pop	r9
    4876:	08 95       	ret

00004878 <drawrect>:
	}
}

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    4878:	9f 92       	push	r9
    487a:	af 92       	push	r10
    487c:	bf 92       	push	r11
    487e:	cf 92       	push	r12
    4880:	df 92       	push	r13
    4882:	ef 92       	push	r14
    4884:	ff 92       	push	r15
    4886:	0f 93       	push	r16
    4888:	1f 93       	push	r17
    488a:	cf 93       	push	r28
    488c:	df 93       	push	r29
    488e:	ec 01       	movw	r28, r24
    4890:	f6 2e       	mov	r15, r22
    4892:	b4 2e       	mov	r11, r20
    4894:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4896:	16 2f       	mov	r17, r22
    4898:	c2 2e       	mov	r12, r18
    489a:	d1 2c       	mov	r13, r1
    489c:	c6 0e       	add	r12, r22
    489e:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    48a0:	aa 24       	eor	r10, r10
    48a2:	aa 94       	dec	r10
    48a4:	a0 0e       	add	r10, r16
    48a6:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    48a8:	81 2f       	mov	r24, r17
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	8c 15       	cp	r24, r12
    48ae:	9d 05       	cpc	r25, r13
    48b0:	74 f4       	brge	.+28     	; 0x48ce <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    48b2:	2e 2d       	mov	r18, r14
    48b4:	4b 2d       	mov	r20, r11
    48b6:	61 2f       	mov	r22, r17
    48b8:	ce 01       	movw	r24, r28
    48ba:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>
		setpixel(buff, i, y+h-1, color);
    48be:	2e 2d       	mov	r18, r14
    48c0:	4a 2d       	mov	r20, r10
    48c2:	61 2f       	mov	r22, r17
    48c4:	ce 01       	movw	r24, r28
    48c6:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    48ca:	1f 5f       	subi	r17, 0xFF	; 255
    48cc:	ed cf       	rjmp	.-38     	; 0x48a8 <drawrect+0x30>
    48ce:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    48d0:	10 e0       	ldi	r17, 0x00	; 0
    48d2:	0b 0d       	add	r16, r11
    48d4:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    48d6:	cc 24       	eor	r12, r12
    48d8:	ca 94       	dec	r12
    48da:	c9 0c       	add	r12, r9
    48dc:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    48de:	8d 2d       	mov	r24, r13
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	80 17       	cp	r24, r16
    48e4:	91 07       	cpc	r25, r17
    48e6:	74 f4       	brge	.+28     	; 0x4904 <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    48e8:	2e 2d       	mov	r18, r14
    48ea:	4d 2d       	mov	r20, r13
    48ec:	6f 2d       	mov	r22, r15
    48ee:	ce 01       	movw	r24, r28
    48f0:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>
		setpixel(buff, x+w-1, i, color);
    48f4:	2e 2d       	mov	r18, r14
    48f6:	4d 2d       	mov	r20, r13
    48f8:	6c 2d       	mov	r22, r12
    48fa:	ce 01       	movw	r24, r28
    48fc:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4900:	d3 94       	inc	r13
    4902:	ed cf       	rjmp	.-38     	; 0x48de <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    4904:	df 91       	pop	r29
    4906:	cf 91       	pop	r28
    4908:	1f 91       	pop	r17
    490a:	0f 91       	pop	r16
    490c:	ff 90       	pop	r15
    490e:	ef 90       	pop	r14
    4910:	df 90       	pop	r13
    4912:	cf 90       	pop	r12
    4914:	bf 90       	pop	r11
    4916:	af 90       	pop	r10
    4918:	9f 90       	pop	r9
    491a:	08 95       	ret

0000491c <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    491c:	4f 92       	push	r4
    491e:	5f 92       	push	r5
    4920:	6f 92       	push	r6
    4922:	7f 92       	push	r7
    4924:	8f 92       	push	r8
    4926:	9f 92       	push	r9
    4928:	af 92       	push	r10
    492a:	bf 92       	push	r11
    492c:	cf 92       	push	r12
    492e:	df 92       	push	r13
    4930:	ef 92       	push	r14
    4932:	ff 92       	push	r15
    4934:	0f 93       	push	r16
    4936:	1f 93       	push	r17
    4938:	cf 93       	push	r28
    493a:	df 93       	push	r29
    493c:	ec 01       	movw	r28, r24
    493e:	96 2e       	mov	r9, r22
    4940:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    4942:	bb 24       	eor	r11, r11
    4944:	b3 94       	inc	r11
    4946:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    4948:	82 2e       	mov	r8, r18
    494a:	81 94       	neg	r8
    494c:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    494e:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4950:	74 2e       	mov	r7, r20
    4952:	72 1a       	sub	r7, r18
    4954:	e4 2e       	mov	r14, r20
    4956:	f1 2c       	mov	r15, r1
    4958:	67 01       	movw	r12, r14
    495a:	c2 0e       	add	r12, r18
    495c:	d1 1c       	adc	r13, r1
    495e:	87 2d       	mov	r24, r7
    4960:	99 27       	eor	r25, r25
    4962:	87 fd       	sbrc	r24, 7
    4964:	90 95       	com	r25
    4966:	c8 16       	cp	r12, r24
    4968:	d9 06       	cpc	r13, r25
    496a:	44 f0       	brlt	.+16     	; 0x497c <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    496c:	20 2f       	mov	r18, r16
    496e:	47 2d       	mov	r20, r7
    4970:	69 2d       	mov	r22, r9
    4972:	ce 01       	movw	r24, r28
    4974:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>
    4978:	73 94       	inc	r7
    497a:	f1 cf       	rjmp	.-30     	; 0x495e <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    497c:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    497e:	71 16       	cp	r7, r17
    4980:	0c f0       	brlt	.+2      	; 0x4984 <fillcircle+0x68>
    4982:	4c c0       	rjmp	.+152    	; 0x4a1c <fillcircle+0x100>
	{
		if (f >= 0) 
    4984:	b7 fc       	sbrc	r11, 7
    4986:	04 c0       	rjmp	.+8      	; 0x4990 <fillcircle+0x74>
		{
			y--;
    4988:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    498a:	83 94       	inc	r8
    498c:	83 94       	inc	r8
			f += ddF_y;
    498e:	b8 0c       	add	r11, r8
    4990:	73 94       	inc	r7
    4992:	87 2d       	mov	r24, r7
    4994:	88 0f       	add	r24, r24
    4996:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    4998:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    499a:	6a 2c       	mov	r6, r10
    499c:	61 1a       	sub	r6, r17
    499e:	67 01       	movw	r12, r14
    49a0:	c1 0e       	add	r12, r17
    49a2:	d1 1c       	adc	r13, r1
    49a4:	17 fd       	sbrc	r17, 7
    49a6:	da 94       	dec	r13
    49a8:	47 2c       	mov	r4, r7
    49aa:	49 0c       	add	r4, r9
    49ac:	59 2c       	mov	r5, r9
    49ae:	57 18       	sub	r5, r7
    49b0:	86 2d       	mov	r24, r6
    49b2:	99 27       	eor	r25, r25
    49b4:	87 fd       	sbrc	r24, 7
    49b6:	90 95       	com	r25
    49b8:	c8 16       	cp	r12, r24
    49ba:	d9 06       	cpc	r13, r25
    49bc:	74 f0       	brlt	.+28     	; 0x49da <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    49be:	20 2f       	mov	r18, r16
    49c0:	46 2d       	mov	r20, r6
    49c2:	64 2d       	mov	r22, r4
    49c4:	ce 01       	movw	r24, r28
    49c6:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>
			setpixel(buff, x0-x, i, color);
    49ca:	20 2f       	mov	r18, r16
    49cc:	46 2d       	mov	r20, r6
    49ce:	65 2d       	mov	r22, r5
    49d0:	ce 01       	movw	r24, r28
    49d2:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>
    49d6:	63 94       	inc	r6
    49d8:	eb cf       	rjmp	.-42     	; 0x49b0 <fillcircle+0x94>
    49da:	6a 2c       	mov	r6, r10
    49dc:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    49de:	67 01       	movw	r12, r14
    49e0:	c7 0c       	add	r12, r7
    49e2:	d1 1c       	adc	r13, r1
    49e4:	77 fc       	sbrc	r7, 7
    49e6:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    49e8:	41 2e       	mov	r4, r17
    49ea:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    49ec:	59 2c       	mov	r5, r9
    49ee:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    49f0:	86 2d       	mov	r24, r6
    49f2:	99 27       	eor	r25, r25
    49f4:	87 fd       	sbrc	r24, 7
    49f6:	90 95       	com	r25
    49f8:	c8 16       	cp	r12, r24
    49fa:	d9 06       	cpc	r13, r25
    49fc:	0c f4       	brge	.+2      	; 0x4a00 <fillcircle+0xe4>
    49fe:	bf cf       	rjmp	.-130    	; 0x497e <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    4a00:	20 2f       	mov	r18, r16
    4a02:	46 2d       	mov	r20, r6
    4a04:	64 2d       	mov	r22, r4
    4a06:	ce 01       	movw	r24, r28
    4a08:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>
			setpixel(buff, x0-y, i, color);
    4a0c:	20 2f       	mov	r18, r16
    4a0e:	46 2d       	mov	r20, r6
    4a10:	65 2d       	mov	r22, r5
    4a12:	ce 01       	movw	r24, r28
    4a14:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>
    4a18:	63 94       	inc	r6
    4a1a:	ea cf       	rjmp	.-44     	; 0x49f0 <fillcircle+0xd4>
		}    
	}
}
    4a1c:	df 91       	pop	r29
    4a1e:	cf 91       	pop	r28
    4a20:	1f 91       	pop	r17
    4a22:	0f 91       	pop	r16
    4a24:	ff 90       	pop	r15
    4a26:	ef 90       	pop	r14
    4a28:	df 90       	pop	r13
    4a2a:	cf 90       	pop	r12
    4a2c:	bf 90       	pop	r11
    4a2e:	af 90       	pop	r10
    4a30:	9f 90       	pop	r9
    4a32:	8f 90       	pop	r8
    4a34:	7f 90       	pop	r7
    4a36:	6f 90       	pop	r6
    4a38:	5f 90       	pop	r5
    4a3a:	4f 90       	pop	r4
    4a3c:	08 95       	ret

00004a3e <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    4a3e:	88 0f       	add	r24, r24
    4a40:	99 1f       	adc	r25, r25
    4a42:	8a 5f       	subi	r24, 0xFA	; 250
    4a44:	91 4f       	sbci	r25, 0xF1	; 241
    4a46:	fc 01       	movw	r30, r24
    4a48:	85 91       	lpm	r24, Z+
    4a4a:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    4a4c:	0c 94 e1 42 	jmp	0x85c2	; 0x85c2 <pgm_mugui_lcd_puts>

00004a50 <gLCDprint_Menu_P>:
    4a50:	0c 94 e1 42 	jmp	0x85c2	; 0x85c2 <pgm_mugui_lcd_puts>

00004a54 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	91 e0       	ldi	r25, 0x01	; 1
    4a58:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    4a5c:	23 e0       	ldi	r18, 0x03	; 3
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	49 e2       	ldi	r20, 0x29	; 41
    4a62:	50 e0       	ldi	r21, 0x00	; 0
    4a64:	61 e7       	ldi	r22, 0x71	; 113
    4a66:	71 e0       	ldi	r23, 0x01	; 1
    4a68:	89 e7       	ldi	r24, 0x79	; 121
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    4a70:	27 e1       	ldi	r18, 0x17	; 23
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	48 e1       	ldi	r20, 0x18	; 24
    4a76:	50 e0       	ldi	r21, 0x00	; 0
    4a78:	61 e7       	ldi	r22, 0x71	; 113
    4a7a:	71 e0       	ldi	r23, 0x01	; 1
    4a7c:	8a e7       	ldi	r24, 0x7A	; 122
    4a7e:	90 e0       	ldi	r25, 0x00	; 0
    4a80:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    4a84:	80 91 20 05 	lds	r24, 0x0520
    4a88:	83 ff       	sbrs	r24, 3
    4a8a:	13 c0       	rjmp	.+38     	; 0x4ab2 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    4a8c:	2b e2       	ldi	r18, 0x2B	; 43
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	4c e0       	ldi	r20, 0x0C	; 12
    4a92:	50 e0       	ldi	r21, 0x00	; 0
    4a94:	61 e7       	ldi	r22, 0x71	; 113
    4a96:	71 e0       	ldi	r23, 0x01	; 1
    4a98:	86 e8       	ldi	r24, 0x86	; 134
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    4aa0:	2b e2       	ldi	r18, 0x2B	; 43
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	40 e5       	ldi	r20, 0x50	; 80
    4aa6:	50 e0       	ldi	r21, 0x00	; 0
    4aa8:	61 e7       	ldi	r22, 0x71	; 113
    4aaa:	71 e0       	ldi	r23, 0x01	; 1
    4aac:	86 e7       	ldi	r24, 0x76	; 118
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	41 c0       	rjmp	.+130    	; 0x4b34 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)				// No signal
    4ab2:	80 91 20 05 	lds	r24, 0x0520
    4ab6:	81 ff       	sbrs	r24, 1
    4ab8:	13 c0       	rjmp	.+38     	; 0x4ae0 <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    4aba:	2b e2       	ldi	r18, 0x2B	; 43
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    4abe:	4c e1       	ldi	r20, 0x1C	; 28
    4ac0:	50 e0       	ldi	r21, 0x00	; 0
    4ac2:	61 e7       	ldi	r22, 0x71	; 113
    4ac4:	71 e0       	ldi	r23, 0x01	; 1
    4ac6:	8b e4       	ldi	r24, 0x4B	; 75
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    4ace:	2b e2       	ldi	r18, 0x2B	; 43
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	46 e3       	ldi	r20, 0x36	; 54
    4ad4:	50 e0       	ldi	r21, 0x00	; 0
    4ad6:	61 e7       	ldi	r22, 0x71	; 113
    4ad8:	71 e0       	ldi	r23, 0x01	; 1
    4ada:	8c e4       	ldi	r24, 0x4C	; 76
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	2a c0       	rjmp	.+84     	; 0x4b34 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)			// Throttle high
    4ae0:	80 91 20 05 	lds	r24, 0x0520
    4ae4:	80 ff       	sbrs	r24, 0
    4ae6:	13 c0       	rjmp	.+38     	; 0x4b0e <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    4ae8:	2b e2       	ldi	r18, 0x2B	; 43
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	4a e0       	ldi	r20, 0x0A	; 10
    4aee:	50 e0       	ldi	r21, 0x00	; 0
    4af0:	61 e7       	ldi	r22, 0x71	; 113
    4af2:	71 e0       	ldi	r23, 0x01	; 1
    4af4:	89 e6       	ldi	r24, 0x69	; 105
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    4afc:	2b e2       	ldi	r18, 0x2B	; 43
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	41 e5       	ldi	r20, 0x51	; 81
    4b02:	50 e0       	ldi	r21, 0x00	; 0
    4b04:	61 e7       	ldi	r22, 0x71	; 113
    4b06:	71 e0       	ldi	r23, 0x01	; 1
    4b08:	87 e3       	ldi	r24, 0x37	; 55
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	13 c0       	rjmp	.+38     	; 0x4b34 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4b0e:	80 91 20 05 	lds	r24, 0x0520
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4b12:	2b e2       	ldi	r18, 0x2B	; 43
    4b14:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4b16:	82 ff       	sbrs	r24, 2
    4b18:	07 c0       	rjmp	.+14     	; 0x4b28 <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4b1a:	44 e1       	ldi	r20, 0x14	; 20
    4b1c:	50 e0       	ldi	r21, 0x00	; 0
    4b1e:	61 e7       	ldi	r22, 0x71	; 113
    4b20:	71 e0       	ldi	r23, 0x01	; 1
    4b22:	8b e8       	ldi	r24, 0x8B	; 139
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	06 c0       	rjmp	.+12     	; 0x4b34 <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    4b28:	4c e1       	ldi	r20, 0x1C	; 28
    4b2a:	50 e0       	ldi	r21, 0x00	; 0
    4b2c:	61 e7       	ldi	r22, 0x71	; 113
    4b2e:	71 e0       	ldi	r23, 0x01	; 1
    4b30:	8a e8       	ldi	r24, 0x8A	; 138
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
	}

	write_buffer(buffer);
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	91 e0       	ldi	r25, 0x01	; 1
    4b3c:	0c 94 40 23 	jmp	0x4680	; 0x4680 <write_buffer>

00004b40 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    4b40:	cf 93       	push	r28
    4b42:	df 93       	push	r29
    4b44:	cd b7       	in	r28, 0x3d	; 61
    4b46:	de b7       	in	r29, 0x3e	; 62
    4b48:	2c 97       	sbiw	r28, 0x0c	; 12
    4b4a:	0f b6       	in	r0, 0x3f	; 63
    4b4c:	f8 94       	cli
    4b4e:	de bf       	out	0x3e, r29	; 62
    4b50:	0f be       	out	0x3f, r0	; 63
    4b52:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    4b54:	26 e0       	ldi	r18, 0x06	; 6
    4b56:	ae 01       	movw	r20, r28
    4b58:	4f 5f       	subi	r20, 0xFF	; 255
    4b5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b5c:	63 e4       	ldi	r22, 0x43	; 67
    4b5e:	80 ed       	ldi	r24, 0xD0	; 208
    4b60:	0e 94 94 27 	call	0x4f28	; 0x4f28 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    4b64:	89 81       	ldd	r24, Y+1	; 0x01
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	98 2f       	mov	r25, r24
    4b6a:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    4b6c:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    4b6e:	82 0f       	add	r24, r18
    4b70:	91 1d       	adc	r25, r1
    4b72:	34 e0       	ldi	r19, 0x04	; 4
    4b74:	95 95       	asr	r25
    4b76:	87 95       	ror	r24
    4b78:	3a 95       	dec	r19
    4b7a:	e1 f7       	brne	.-8      	; 0x4b74 <get_raw_gyros+0x34>
    4b7c:	9a 87       	std	Y+10, r25	; 0x0a
    4b7e:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    4b80:	8b 81       	ldd	r24, Y+3	; 0x03
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	98 2f       	mov	r25, r24
    4b86:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    4b88:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    4b8a:	82 0f       	add	r24, r18
    4b8c:	91 1d       	adc	r25, r1
    4b8e:	54 e0       	ldi	r21, 0x04	; 4
    4b90:	95 95       	asr	r25
    4b92:	87 95       	ror	r24
    4b94:	5a 95       	dec	r21
    4b96:	e1 f7       	brne	.-8      	; 0x4b90 <get_raw_gyros+0x50>
    4b98:	98 87       	std	Y+8, r25	; 0x08
    4b9a:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    4b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	98 2f       	mov	r25, r24
    4ba2:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    4ba4:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    4ba6:	82 0f       	add	r24, r18
    4ba8:	91 1d       	adc	r25, r1
    4baa:	74 e0       	ldi	r23, 0x04	; 4
    4bac:	95 95       	asr	r25
    4bae:	87 95       	ror	r24
    4bb0:	7a 95       	dec	r23
    4bb2:	e1 f7       	brne	.-8      	; 0x4bac <get_raw_gyros+0x6c>
    4bb4:	9c 87       	std	Y+12, r25	; 0x0c
    4bb6:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    4bb8:	20 91 49 06 	lds	r18, 0x0649
    4bbc:	a3 e8       	ldi	r26, 0x83	; 131
    4bbe:	b5 e0       	ldi	r27, 0x05	; 5
    4bc0:	43 e0       	ldi	r20, 0x03	; 3
    4bc2:	24 02       	muls	r18, r20
    4bc4:	90 01       	movw	r18, r0
    4bc6:	11 24       	eor	r1, r1
    4bc8:	80 e0       	ldi	r24, 0x00	; 0
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	2d 59       	subi	r18, 0x9D	; 157
    4bce:	37 4e       	sbci	r19, 0xE7	; 231
    4bd0:	f9 01       	movw	r30, r18
    4bd2:	e8 0f       	add	r30, r24
    4bd4:	f9 1f       	adc	r31, r25
    4bd6:	e4 91       	lpm	r30, Z
    4bd8:	ee 0f       	add	r30, r30
    4bda:	ff 0b       	sbc	r31, r31
    4bdc:	41 e0       	ldi	r20, 0x01	; 1
    4bde:	50 e0       	ldi	r21, 0x00	; 0
    4be0:	4c 0f       	add	r20, r28
    4be2:	5d 1f       	adc	r21, r29
    4be4:	e4 0f       	add	r30, r20
    4be6:	f5 1f       	adc	r31, r21
    4be8:	46 81       	ldd	r20, Z+6	; 0x06
    4bea:	57 81       	ldd	r21, Z+7	; 0x07
    4bec:	4d 93       	st	X+, r20
    4bee:	5d 93       	st	X+, r21
    4bf0:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    4bf2:	83 30       	cpi	r24, 0x03	; 3
    4bf4:	91 05       	cpc	r25, r1
    4bf6:	61 f7       	brne	.-40     	; 0x4bd0 <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    4bf8:	2c 96       	adiw	r28, 0x0c	; 12
    4bfa:	0f b6       	in	r0, 0x3f	; 63
    4bfc:	f8 94       	cli
    4bfe:	de bf       	out	0x3e, r29	; 62
    4c00:	0f be       	out	0x3f, r0	; 63
    4c02:	cd bf       	out	0x3d, r28	; 61
    4c04:	df 91       	pop	r29
    4c06:	cf 91       	pop	r28
    4c08:	08 95       	ret

00004c0a <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    4c0a:	1f 93       	push	r17
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    4c10:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4c14:	20 91 49 06 	lds	r18, 0x0649
    4c18:	c7 eb       	ldi	r28, 0xB7	; 183
    4c1a:	d7 e0       	ldi	r29, 0x07	; 7
    4c1c:	a3 e8       	ldi	r26, 0x83	; 131
    4c1e:	b5 e0       	ldi	r27, 0x05	; 5
    4c20:	83 e0       	ldi	r24, 0x03	; 3
    4c22:	28 02       	muls	r18, r24
    4c24:	90 01       	movw	r18, r0
    4c26:	11 24       	eor	r1, r1
    4c28:	80 e0       	ldi	r24, 0x00	; 0
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	2f 5a       	subi	r18, 0xAF	; 175
    4c2e:	37 4e       	sbci	r19, 0xE7	; 231
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4c30:	69 91       	ld	r22, Y+
    4c32:	79 91       	ld	r23, Y+
    4c34:	f9 01       	movw	r30, r18
    4c36:	e8 0f       	add	r30, r24
    4c38:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4c3a:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4c3c:	4d 91       	ld	r20, X+
    4c3e:	5c 91       	ld	r21, X
    4c40:	11 97       	sbiw	r26, 0x01	; 1
    4c42:	46 1b       	sub	r20, r22
    4c44:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4c46:	14 03       	mulsu	r17, r20
    4c48:	b0 01       	movw	r22, r0
    4c4a:	15 9f       	mul	r17, r21
    4c4c:	70 0d       	add	r23, r0
    4c4e:	11 24       	eor	r1, r1
    4c50:	6d 93       	st	X+, r22
    4c52:	7d 93       	st	X+, r23
    4c54:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    4c56:	83 30       	cpi	r24, 0x03	; 3
    4c58:	91 05       	cpc	r25, r1
    4c5a:	51 f7       	brne	.-44     	; 0x4c30 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    4c5c:	df 91       	pop	r29
    4c5e:	cf 91       	pop	r28
    4c60:	1f 91       	pop	r17
    4c62:	08 95       	ret

00004c64 <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    4c64:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    4c66:	86 e0       	ldi	r24, 0x06	; 6
    4c68:	e7 eb       	ldi	r30, 0xB7	; 183
    4c6a:	f7 e0       	ldi	r31, 0x07	; 7
    4c6c:	df 01       	movw	r26, r30
    4c6e:	1d 92       	st	X+, r1
    4c70:	8a 95       	dec	r24
    4c72:	e9 f7       	brne	.-6      	; 0x4c6e <CalibrateGyrosFast+0xa>
    4c74:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    4c76:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    4c7a:	40 91 b7 07 	lds	r20, 0x07B7
    4c7e:	50 91 b8 07 	lds	r21, 0x07B8
    4c82:	80 91 83 05 	lds	r24, 0x0583
    4c86:	90 91 84 05 	lds	r25, 0x0584
    4c8a:	48 0f       	add	r20, r24
    4c8c:	59 1f       	adc	r21, r25
    4c8e:	50 93 b8 07 	sts	0x07B8, r21
    4c92:	40 93 b7 07 	sts	0x07B7, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    4c96:	20 91 b9 07 	lds	r18, 0x07B9
    4c9a:	30 91 ba 07 	lds	r19, 0x07BA
    4c9e:	80 91 85 05 	lds	r24, 0x0585
    4ca2:	90 91 86 05 	lds	r25, 0x0586
    4ca6:	28 0f       	add	r18, r24
    4ca8:	39 1f       	adc	r19, r25
    4caa:	30 93 ba 07 	sts	0x07BA, r19
    4cae:	20 93 b9 07 	sts	0x07B9, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    4cb2:	80 91 bb 07 	lds	r24, 0x07BB
    4cb6:	90 91 bc 07 	lds	r25, 0x07BC
    4cba:	60 91 87 05 	lds	r22, 0x0587
    4cbe:	70 91 88 05 	lds	r23, 0x0588
    4cc2:	86 0f       	add	r24, r22
    4cc4:	97 1f       	adc	r25, r23
    4cc6:	90 93 bc 07 	sts	0x07BC, r25
    4cca:	80 93 bb 07 	sts	0x07BB, r24
    4cce:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    4cd0:	91 f6       	brne	.-92     	; 0x4c76 <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    4cd2:	e5 e0       	ldi	r30, 0x05	; 5
    4cd4:	55 95       	asr	r21
    4cd6:	47 95       	ror	r20
    4cd8:	ea 95       	dec	r30
    4cda:	e1 f7       	brne	.-8      	; 0x4cd4 <CalibrateGyrosFast+0x70>
    4cdc:	50 93 b8 07 	sts	0x07B8, r21
    4ce0:	40 93 b7 07 	sts	0x07B7, r20
    4ce4:	f5 e0       	ldi	r31, 0x05	; 5
    4ce6:	35 95       	asr	r19
    4ce8:	27 95       	ror	r18
    4cea:	fa 95       	dec	r31
    4cec:	e1 f7       	brne	.-8      	; 0x4ce6 <CalibrateGyrosFast+0x82>
    4cee:	30 93 ba 07 	sts	0x07BA, r19
    4cf2:	20 93 b9 07 	sts	0x07B9, r18
    4cf6:	a5 e0       	ldi	r26, 0x05	; 5
    4cf8:	95 95       	asr	r25
    4cfa:	87 95       	ror	r24
    4cfc:	aa 95       	dec	r26
    4cfe:	e1 f7       	brne	.-8      	; 0x4cf8 <CalibrateGyrosFast+0x94>
    4d00:	90 93 bc 07 	sts	0x07BC, r25
    4d04:	80 93 bb 07 	sts	0x07BB, r24
	}

	Save_Config_to_EEPROM();
}
    4d08:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    4d0a:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>

00004d0e <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    4d0e:	2f 92       	push	r2
    4d10:	3f 92       	push	r3
    4d12:	4f 92       	push	r4
    4d14:	5f 92       	push	r5
    4d16:	6f 92       	push	r6
    4d18:	7f 92       	push	r7
    4d1a:	8f 92       	push	r8
    4d1c:	9f 92       	push	r9
    4d1e:	af 92       	push	r10
    4d20:	bf 92       	push	r11
    4d22:	cf 92       	push	r12
    4d24:	df 92       	push	r13
    4d26:	ef 92       	push	r14
    4d28:	ff 92       	push	r15
    4d2a:	0f 93       	push	r16
    4d2c:	1f 93       	push	r17
    4d2e:	cf 93       	push	r28
    4d30:	df 93       	push	r29
    4d32:	cd b7       	in	r28, 0x3d	; 61
    4d34:	de b7       	in	r29, 0x3e	; 62
    4d36:	65 97       	sbiw	r28, 0x15	; 21
    4d38:	0f b6       	in	r0, 0x3f	; 63
    4d3a:	f8 94       	cli
    4d3c:	de bf       	out	0x3e, r29	; 62
    4d3e:	0f be       	out	0x3f, r0	; 63
    4d40:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    4d42:	1e 86       	std	Y+14, r1	; 0x0e
    4d44:	1d 86       	std	Y+13, r1	; 0x0d
    4d46:	18 8a       	std	Y+16, r1	; 0x10
    4d48:	1f 86       	std	Y+15, r1	; 0x0f
    4d4a:	1a 8a       	std	Y+18, r1	; 0x12
    4d4c:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    4d4e:	0e 94 32 26 	call	0x4c64	; 0x4c64 <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    4d52:	60 91 b7 07 	lds	r22, 0x07B7
    4d56:	70 91 b8 07 	lds	r23, 0x07B8
    4d5a:	88 27       	eor	r24, r24
    4d5c:	77 fd       	sbrc	r23, 7
    4d5e:	80 95       	com	r24
    4d60:	98 2f       	mov	r25, r24
    4d62:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    4d66:	69 83       	std	Y+1, r22	; 0x01
    4d68:	7a 83       	std	Y+2, r23	; 0x02
    4d6a:	8b 83       	std	Y+3, r24	; 0x03
    4d6c:	9c 83       	std	Y+4, r25	; 0x04
    4d6e:	60 91 b9 07 	lds	r22, 0x07B9
    4d72:	70 91 ba 07 	lds	r23, 0x07BA
    4d76:	88 27       	eor	r24, r24
    4d78:	77 fd       	sbrc	r23, 7
    4d7a:	80 95       	com	r24
    4d7c:	98 2f       	mov	r25, r24
    4d7e:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    4d82:	6d 83       	std	Y+5, r22	; 0x05
    4d84:	7e 83       	std	Y+6, r23	; 0x06
    4d86:	8f 83       	std	Y+7, r24	; 0x07
    4d88:	98 87       	std	Y+8, r25	; 0x08
    4d8a:	60 91 bb 07 	lds	r22, 0x07BB
    4d8e:	70 91 bc 07 	lds	r23, 0x07BC
    4d92:	88 27       	eor	r24, r24
    4d94:	77 fd       	sbrc	r23, 7
    4d96:	80 95       	com	r24
    4d98:	98 2f       	mov	r25, r24
    4d9a:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    4d9e:	69 87       	std	Y+9, r22	; 0x09
    4da0:	7a 87       	std	Y+10, r23	; 0x0a
    4da2:	8b 87       	std	Y+11, r24	; 0x0b
    4da4:	9c 87       	std	Y+12, r25	; 0x0c
    4da6:	1d 8a       	std	Y+21, r1	; 0x15
    4da8:	1b 8a       	std	Y+19, r1	; 0x13
    4daa:	e1 2c       	mov	r14, r1
    4dac:	f1 2c       	mov	r15, r1
    4dae:	00 e0       	ldi	r16, 0x00	; 0
    4db0:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    4db2:	80 91 b2 00 	lds	r24, 0x00B2
    4db6:	9d 89       	ldd	r25, Y+21	; 0x15
    4db8:	89 1b       	sub	r24, r25
    4dba:	e8 0e       	add	r14, r24
    4dbc:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    4dbe:	e0 91 b2 00 	lds	r30, 0x00B2
    4dc2:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    4dc4:	fc e4       	ldi	r31, 0x4C	; 76
    4dc6:	ef 16       	cp	r14, r31
    4dc8:	ff 06       	cpc	r15, r31
    4dca:	28 f0       	brcs	.+10     	; 0x4dd6 <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    4dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    4dce:	8f 5f       	subi	r24, 0xFF	; 255
    4dd0:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    4dd2:	e1 2c       	mov	r14, r1
    4dd4:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    4dd6:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <get_raw_gyros>
    4dda:	fe 01       	movw	r30, r28
    4ddc:	31 96       	adiw	r30, 0x01	; 1
    4dde:	6f 01       	movw	r12, r30
    4de0:	b3 e8       	ldi	r27, 0x83	; 131
    4de2:	2b 2e       	mov	r2, r27
    4de4:	b5 e0       	ldi	r27, 0x05	; 5
    4de6:	3b 2e       	mov	r3, r27
    4de8:	ce 01       	movw	r24, r28
    4dea:	0d 96       	adiw	r24, 0x0d	; 13
    4dec:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    4dee:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    4df0:	f1 01       	movw	r30, r2
    4df2:	81 90       	ld	r8, Z+
    4df4:	91 90       	ld	r9, Z+
    4df6:	1f 01       	movw	r2, r30
    4df8:	20 e0       	ldi	r18, 0x00	; 0
    4dfa:	30 ec       	ldi	r19, 0xC0	; 192
    4dfc:	49 e7       	ldi	r20, 0x79	; 121
    4dfe:	54 e4       	ldi	r21, 0x44	; 68
    4e00:	f6 01       	movw	r30, r12
    4e02:	60 81       	ld	r22, Z
    4e04:	71 81       	ldd	r23, Z+1	; 0x01
    4e06:	82 81       	ldd	r24, Z+2	; 0x02
    4e08:	93 81       	ldd	r25, Z+3	; 0x03
    4e0a:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    4e0e:	2b 01       	movw	r4, r22
    4e10:	3c 01       	movw	r6, r24
    4e12:	b4 01       	movw	r22, r8
    4e14:	88 27       	eor	r24, r24
    4e16:	77 fd       	sbrc	r23, 7
    4e18:	80 95       	com	r24
    4e1a:	98 2f       	mov	r25, r24
    4e1c:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    4e20:	9b 01       	movw	r18, r22
    4e22:	ac 01       	movw	r20, r24
    4e24:	c3 01       	movw	r24, r6
    4e26:	b2 01       	movw	r22, r4
    4e28:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__addsf3>
    4e2c:	20 e0       	ldi	r18, 0x00	; 0
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	4a e7       	ldi	r20, 0x7A	; 122
    4e32:	54 e4       	ldi	r21, 0x44	; 68
    4e34:	0e 94 29 4b 	call	0x9652	; 0x9652 <__divsf3>
    4e38:	f6 01       	movw	r30, r12
    4e3a:	60 83       	st	Z, r22
    4e3c:	71 83       	std	Z+1, r23	; 0x01
    4e3e:	82 83       	std	Z+2, r24	; 0x02
    4e40:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    4e42:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
    4e46:	f5 01       	movw	r30, r10
    4e48:	20 81       	ld	r18, Z
    4e4a:	31 81       	ldd	r19, Z+1	; 0x01
    4e4c:	26 17       	cp	r18, r22
    4e4e:	37 07       	cpc	r19, r23
    4e50:	11 f0       	breq	.+4      	; 0x4e56 <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    4e52:	00 e0       	ldi	r16, 0x00	; 0
    4e54:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    4e56:	f5 01       	movw	r30, r10
    4e58:	61 93       	st	Z+, r22
    4e5a:	71 93       	st	Z+, r23
    4e5c:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    4e5e:	fc 89       	ldd	r31, Y+20	; 0x14
    4e60:	ff 5f       	subi	r31, 0xFF	; 255
    4e62:	fc 8b       	std	Y+20, r31	; 0x14
    4e64:	84 e0       	ldi	r24, 0x04	; 4
    4e66:	c8 0e       	add	r12, r24
    4e68:	d1 1c       	adc	r13, r1
    4e6a:	f3 30       	cpi	r31, 0x03	; 3
    4e6c:	09 f6       	brne	.-126    	; 0x4df0 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    4e6e:	0f 5f       	subi	r16, 0xFF	; 255
    4e70:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    4e72:	09 3c       	cpi	r16, 0xC9	; 201
    4e74:	11 05       	cpc	r17, r1
    4e76:	20 f0       	brcs	.+8      	; 0x4e80 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    4e78:	0e 94 32 26 	call	0x4c64	; 0x4c64 <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    4e7c:	81 e0       	ldi	r24, 0x01	; 1
    4e7e:	01 c0       	rjmp	.+2      	; 0x4e82 <CalibrateGyrosSlow+0x174>
    4e80:	80 e0       	ldi	r24, 0x00	; 0
    4e82:	e7 e8       	ldi	r30, 0x87	; 135
    4e84:	f3 e1       	ldi	r31, 0x13	; 19
    4e86:	31 97       	sbiw	r30, 0x01	; 1
    4e88:	f1 f7       	brne	.-4      	; 0x4e86 <CalibrateGyrosSlow+0x178>
    4e8a:	00 c0       	rjmp	.+0      	; 0x4e8c <CalibrateGyrosSlow+0x17e>
    4e8c:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    4e8e:	81 11       	cpse	r24, r1
    4e90:	04 c0       	rjmp	.+8      	; 0x4e9a <CalibrateGyrosSlow+0x18c>
    4e92:	fb 89       	ldd	r31, Y+19	; 0x13
    4e94:	f6 30       	cpi	r31, 0x06	; 6
    4e96:	08 f4       	brcc	.+2      	; 0x4e9a <CalibrateGyrosSlow+0x18c>
    4e98:	8c cf       	rjmp	.-232    	; 0x4db2 <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    4e9a:	65 96       	adiw	r28, 0x15	; 21
    4e9c:	0f b6       	in	r0, 0x3f	; 63
    4e9e:	f8 94       	cli
    4ea0:	de bf       	out	0x3e, r29	; 62
    4ea2:	0f be       	out	0x3f, r0	; 63
    4ea4:	cd bf       	out	0x3d, r28	; 61
    4ea6:	df 91       	pop	r29
    4ea8:	cf 91       	pop	r28
    4eaa:	1f 91       	pop	r17
    4eac:	0f 91       	pop	r16
    4eae:	ff 90       	pop	r15
    4eb0:	ef 90       	pop	r14
    4eb2:	df 90       	pop	r13
    4eb4:	cf 90       	pop	r12
    4eb6:	bf 90       	pop	r11
    4eb8:	af 90       	pop	r10
    4eba:	9f 90       	pop	r9
    4ebc:	8f 90       	pop	r8
    4ebe:	7f 90       	pop	r7
    4ec0:	6f 90       	pop	r6
    4ec2:	5f 90       	pop	r5
    4ec4:	4f 90       	pop	r4
    4ec6:	3f 90       	pop	r3
    4ec8:	2f 90       	pop	r2
    4eca:	08 95       	ret

00004ecc <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    4ecc:	41 e0       	ldi	r20, 0x01	; 1
    4ece:	6b e6       	ldi	r22, 0x6B	; 107
    4ed0:	80 ed       	ldi	r24, 0xD0	; 208
    4ed2:	0e 94 7d 27 	call	0x4efa	; 0x4efa <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    4ed6:	40 e4       	ldi	r20, 0x40	; 64
    4ed8:	67 e3       	ldi	r22, 0x37	; 55
    4eda:	80 ed       	ldi	r24, 0xD0	; 208
    4edc:	0e 94 7d 27 	call	0x4efa	; 0x4efa <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    4ee0:	46 e0       	ldi	r20, 0x06	; 6
    4ee2:	80 91 4e 06 	lds	r24, 0x064E
    4ee6:	48 1b       	sub	r20, r24
    4ee8:	6a e1       	ldi	r22, 0x1A	; 26
    4eea:	80 ed       	ldi	r24, 0xD0	; 208
    4eec:	0e 94 7d 27 	call	0x4efa	; 0x4efa <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    4ef0:	48 e1       	ldi	r20, 0x18	; 24
    4ef2:	6b e1       	ldi	r22, 0x1B	; 27
    4ef4:	80 ed       	ldi	r24, 0xD0	; 208
    4ef6:	0c 94 7d 27 	jmp	0x4efa	; 0x4efa <writeI2Cbyte>

00004efa <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    4efa:	cf 93       	push	r28
    4efc:	df 93       	push	r29
    4efe:	00 d0       	rcall	.+0      	; 0x4f00 <writeI2Cbyte+0x6>
    4f00:	cd b7       	in	r28, 0x3d	; 61
    4f02:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    4f04:	4a 83       	std	Y+2, r20	; 0x02
    4f06:	69 83       	std	Y+1, r22	; 0x01
    4f08:	0e 94 94 49 	call	0x9328	; 0x9328 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    4f0c:	69 81       	ldd	r22, Y+1	; 0x01
    4f0e:	86 2f       	mov	r24, r22
    4f10:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <i2c_write>
    i2c_write(value); 								// Write byte
    4f14:	4a 81       	ldd	r20, Y+2	; 0x02
    4f16:	84 2f       	mov	r24, r20
    4f18:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <i2c_write>
    i2c_stop();
}
    4f1c:	0f 90       	pop	r0
    4f1e:	0f 90       	pop	r0
    4f20:	df 91       	pop	r29
    4f22:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    4f24:	0c 94 d5 49 	jmp	0x93aa	; 0x93aa <i2c_stop>

00004f28 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    4f28:	cf 92       	push	r12
    4f2a:	df 92       	push	r13
    4f2c:	ef 92       	push	r14
    4f2e:	ff 92       	push	r15
    4f30:	0f 93       	push	r16
    4f32:	1f 93       	push	r17
    4f34:	cf 93       	push	r28
    4f36:	df 93       	push	r29
    4f38:	00 d0       	rcall	.+0      	; 0x4f3a <readI2CbyteArray+0x12>
    4f3a:	1f 92       	push	r1
    4f3c:	cd b7       	in	r28, 0x3d	; 61
    4f3e:	de b7       	in	r29, 0x3e	; 62
    4f40:	18 2f       	mov	r17, r24
    4f42:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    4f44:	4a 83       	std	Y+2, r20	; 0x02
    4f46:	5b 83       	std	Y+3, r21	; 0x03
    4f48:	69 83       	std	Y+1, r22	; 0x01
    4f4a:	0e 94 94 49 	call	0x9328	; 0x9328 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    4f4e:	69 81       	ldd	r22, Y+1	; 0x01
    4f50:	86 2f       	mov	r24, r22
    4f52:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <i2c_write>
    i2c_rep_start(address+I2C_READ);
    4f56:	81 e0       	ldi	r24, 0x01	; 1
    4f58:	81 0f       	add	r24, r17
    4f5a:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <i2c_rep_start>
    4f5e:	4a 81       	ldd	r20, Y+2	; 0x02
    4f60:	c4 2e       	mov	r12, r20
    4f62:	5b 81       	ldd	r21, Y+3	; 0x03
    4f64:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    4f66:	00 e0       	ldi	r16, 0x00	; 0
    4f68:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    4f6a:	f1 2c       	mov	r15, r1
    4f6c:	0e 15       	cp	r16, r14
    4f6e:	1f 05       	cpc	r17, r15
    4f70:	84 f4       	brge	.+32     	; 0x4f92 <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    4f72:	0f 5f       	subi	r16, 0xFF	; 255
    4f74:	1f 4f       	sbci	r17, 0xFF	; 255
    4f76:	0e 15       	cp	r16, r14
    4f78:	1f 05       	cpc	r17, r15
    4f7a:	19 f0       	breq	.+6      	; 0x4f82 <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    4f7c:	0e 94 04 4a 	call	0x9408	; 0x9408 <i2c_readAck>
    4f80:	02 c0       	rjmp	.+4      	; 0x4f86 <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    4f82:	0e 94 1d 4a 	call	0x943a	; 0x943a <i2c_readNak>
    4f86:	f6 01       	movw	r30, r12
    4f88:	80 83       	st	Z, r24
    4f8a:	ff ef       	ldi	r31, 0xFF	; 255
    4f8c:	cf 1a       	sub	r12, r31
    4f8e:	df 0a       	sbc	r13, r31
    4f90:	ed cf       	rjmp	.-38     	; 0x4f6c <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    4f92:	0f 90       	pop	r0
    4f94:	0f 90       	pop	r0
    4f96:	0f 90       	pop	r0
    4f98:	df 91       	pop	r29
    4f9a:	cf 91       	pop	r28
    4f9c:	1f 91       	pop	r17
    4f9e:	0f 91       	pop	r16
    4fa0:	ff 90       	pop	r15
    4fa2:	ef 90       	pop	r14
    4fa4:	df 90       	pop	r13
    4fa6:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    4fa8:	0c 94 d5 49 	jmp	0x93aa	; 0x93aa <i2c_stop>

00004fac <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    4fac:	4f 92       	push	r4
    4fae:	5f 92       	push	r5
    4fb0:	6f 92       	push	r6
    4fb2:	7f 92       	push	r7
    4fb4:	8f 92       	push	r8
    4fb6:	9f 92       	push	r9
    4fb8:	af 92       	push	r10
    4fba:	bf 92       	push	r11
    4fbc:	cf 92       	push	r12
    4fbe:	df 92       	push	r13
    4fc0:	ef 92       	push	r14
    4fc2:	ff 92       	push	r15
    4fc4:	cf 93       	push	r28
    4fc6:	df 93       	push	r29
    4fc8:	cd b7       	in	r28, 0x3d	; 61
    4fca:	de b7       	in	r29, 0x3e	; 62
    4fcc:	28 97       	sbiw	r28, 0x08	; 8
    4fce:	0f b6       	in	r0, 0x3f	; 63
    4fd0:	f8 94       	cli
    4fd2:	de bf       	out	0x3e, r29	; 62
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	cd bf       	out	0x3d, r28	; 61
    4fd8:	6b 01       	movw	r12, r22
    4fda:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4fdc:	80 90 b9 05 	lds	r8, 0x05B9
    4fe0:	90 90 ba 05 	lds	r9, 0x05BA
    4fe4:	a0 90 bb 05 	lds	r10, 0x05BB
    4fe8:	b0 90 bc 05 	lds	r11, 0x05BC
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    4fec:	9b 01       	movw	r18, r22
    4fee:	ac 01       	movw	r20, r24
    4ff0:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    4ff4:	20 e0       	ldi	r18, 0x00	; 0
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	40 e0       	ldi	r20, 0x00	; 0
    4ffa:	5f e3       	ldi	r21, 0x3F	; 63
    4ffc:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    5000:	9b 01       	movw	r18, r22
    5002:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    5004:	60 e0       	ldi	r22, 0x00	; 0
    5006:	70 e0       	ldi	r23, 0x00	; 0
    5008:	80 e8       	ldi	r24, 0x80	; 128
    500a:	9f e3       	ldi	r25, 0x3F	; 63
    500c:	0e 94 c0 4a 	call	0x9580	; 0x9580 <__subsf3>
    5010:	69 83       	std	Y+1, r22	; 0x01
    5012:	7a 83       	std	Y+2, r23	; 0x02
    5014:	8b 83       	std	Y+3, r24	; 0x03
    5016:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    5018:	40 90 bd 05 	lds	r4, 0x05BD
    501c:	50 90 be 05 	lds	r5, 0x05BE
    5020:	60 90 bf 05 	lds	r6, 0x05BF
    5024:	70 90 c0 05 	lds	r7, 0x05C0
    5028:	9b 01       	movw	r18, r22
    502a:	ac 01       	movw	r20, r24
    502c:	c5 01       	movw	r24, r10
    502e:	b4 01       	movw	r22, r8
    5030:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    5034:	6d 83       	std	Y+5, r22	; 0x05
    5036:	7e 83       	std	Y+6, r23	; 0x06
    5038:	8f 83       	std	Y+7, r24	; 0x07
    503a:	98 87       	std	Y+8, r25	; 0x08
    503c:	a7 01       	movw	r20, r14
    503e:	96 01       	movw	r18, r12
    5040:	c3 01       	movw	r24, r6
    5042:	b2 01       	movw	r22, r4
    5044:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    5048:	9b 01       	movw	r18, r22
    504a:	ac 01       	movw	r20, r24
    504c:	6d 81       	ldd	r22, Y+5	; 0x05
    504e:	7e 81       	ldd	r23, Y+6	; 0x06
    5050:	8f 81       	ldd	r24, Y+7	; 0x07
    5052:	98 85       	ldd	r25, Y+8	; 0x08
    5054:	0e 94 c0 4a 	call	0x9580	; 0x9580 <__subsf3>
    5058:	60 93 a5 05 	sts	0x05A5, r22
    505c:	70 93 a6 05 	sts	0x05A6, r23
    5060:	80 93 a7 05 	sts	0x05A7, r24
    5064:	90 93 a8 05 	sts	0x05A8, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    5068:	a7 01       	movw	r20, r14
    506a:	96 01       	movw	r18, r12
    506c:	c5 01       	movw	r24, r10
    506e:	b4 01       	movw	r22, r8
    5070:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    5074:	6b 01       	movw	r12, r22
    5076:	7c 01       	movw	r14, r24
    5078:	29 81       	ldd	r18, Y+1	; 0x01
    507a:	3a 81       	ldd	r19, Y+2	; 0x02
    507c:	4b 81       	ldd	r20, Y+3	; 0x03
    507e:	5c 81       	ldd	r21, Y+4	; 0x04
    5080:	c3 01       	movw	r24, r6
    5082:	b2 01       	movw	r22, r4
    5084:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    5088:	9b 01       	movw	r18, r22
    508a:	ac 01       	movw	r20, r24
    508c:	c7 01       	movw	r24, r14
    508e:	b6 01       	movw	r22, r12
    5090:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__addsf3>
    5094:	60 93 89 05 	sts	0x0589, r22
    5098:	70 93 8a 05 	sts	0x058A, r23
    509c:	80 93 8b 05 	sts	0x058B, r24
    50a0:	90 93 8c 05 	sts	0x058C, r25
}
    50a4:	28 96       	adiw	r28, 0x08	; 8
    50a6:	0f b6       	in	r0, 0x3f	; 63
    50a8:	f8 94       	cli
    50aa:	de bf       	out	0x3e, r29	; 62
    50ac:	0f be       	out	0x3f, r0	; 63
    50ae:	cd bf       	out	0x3d, r28	; 61
    50b0:	df 91       	pop	r29
    50b2:	cf 91       	pop	r28
    50b4:	ff 90       	pop	r15
    50b6:	ef 90       	pop	r14
    50b8:	df 90       	pop	r13
    50ba:	cf 90       	pop	r12
    50bc:	bf 90       	pop	r11
    50be:	af 90       	pop	r10
    50c0:	9f 90       	pop	r9
    50c2:	8f 90       	pop	r8
    50c4:	7f 90       	pop	r7
    50c6:	6f 90       	pop	r6
    50c8:	5f 90       	pop	r5
    50ca:	4f 90       	pop	r4
    50cc:	08 95       	ret

000050ce <thetascale>:

float thetascale(float gyro, float intervalf)
{
    50ce:	cf 92       	push	r12
    50d0:	df 92       	push	r13
    50d2:	ef 92       	push	r14
    50d4:	ff 92       	push	r15
    50d6:	69 01       	movw	r12, r18
    50d8:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    50da:	25 ef       	ldi	r18, 0xF5	; 245
    50dc:	31 ea       	ldi	r19, 0xA1	; 161
    50de:	4b e8       	ldi	r20, 0x8B	; 139
    50e0:	5c e3       	ldi	r21, 0x3C	; 60
    50e2:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    50e6:	a7 01       	movw	r20, r14
    50e8:	96 01       	movw	r18, r12
    50ea:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    50ee:	6b 01       	movw	r12, r22
    50f0:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    50f2:	26 ea       	ldi	r18, 0xA6	; 166
    50f4:	3a e0       	ldi	r19, 0x0A	; 10
    50f6:	46 e8       	ldi	r20, 0x86	; 134
    50f8:	5e e3       	ldi	r21, 0x3E	; 62
    50fa:	0e 94 74 4c 	call	0x98e8	; 0x98e8 <__gesf2>
    50fe:	18 16       	cp	r1, r24
    5100:	9c f0       	brlt	.+38     	; 0x5128 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    5102:	26 ea       	ldi	r18, 0xA6	; 166
    5104:	3a e0       	ldi	r19, 0x0A	; 10
    5106:	46 e8       	ldi	r20, 0x86	; 134
    5108:	5e eb       	ldi	r21, 0xBE	; 190
    510a:	c7 01       	movw	r24, r14
    510c:	b6 01       	movw	r22, r12
    510e:	0e 94 25 4b 	call	0x964a	; 0x964a <__cmpsf2>
    5112:	87 ff       	sbrs	r24, 7
    5114:	11 c0       	rjmp	.+34     	; 0x5138 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    5116:	86 ea       	ldi	r24, 0xA6	; 166
    5118:	c8 2e       	mov	r12, r24
    511a:	8a e0       	ldi	r24, 0x0A	; 10
    511c:	d8 2e       	mov	r13, r24
    511e:	86 e8       	ldi	r24, 0x86	; 134
    5120:	e8 2e       	mov	r14, r24
    5122:	8e eb       	ldi	r24, 0xBE	; 190
    5124:	f8 2e       	mov	r15, r24
    5126:	08 c0       	rjmp	.+16     	; 0x5138 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    5128:	96 ea       	ldi	r25, 0xA6	; 166
    512a:	c9 2e       	mov	r12, r25
    512c:	9a e0       	ldi	r25, 0x0A	; 10
    512e:	d9 2e       	mov	r13, r25
    5130:	96 e8       	ldi	r25, 0x86	; 134
    5132:	e9 2e       	mov	r14, r25
    5134:	9e e3       	ldi	r25, 0x3E	; 62
    5136:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    5138:	c7 01       	movw	r24, r14
    513a:	b6 01       	movw	r22, r12
    513c:	ff 90       	pop	r15
    513e:	ef 90       	pop	r14
    5140:	df 90       	pop	r13
    5142:	cf 90       	pop	r12
    5144:	08 95       	ret

00005146 <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    5146:	8f 92       	push	r8
    5148:	9f 92       	push	r9
    514a:	af 92       	push	r10
    514c:	bf 92       	push	r11
    514e:	cf 92       	push	r12
    5150:	df 92       	push	r13
    5152:	ef 92       	push	r14
    5154:	ff 92       	push	r15
    5156:	0f 93       	push	r16
    5158:	1f 93       	push	r17
    515a:	6b 01       	movw	r12, r22
    515c:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    515e:	60 91 99 05 	lds	r22, 0x0599
    5162:	70 91 9a 05 	lds	r23, 0x059A
    5166:	80 91 9b 05 	lds	r24, 0x059B
    516a:	90 91 9c 05 	lds	r25, 0x059C
    516e:	a7 01       	movw	r20, r14
    5170:	96 01       	movw	r18, r12
    5172:	0e 94 67 28 	call	0x50ce	; 0x50ce <thetascale>
	VectorA = VectorY;
    5176:	00 91 26 05 	lds	r16, 0x0526
    517a:	10 91 27 05 	lds	r17, 0x0527
    517e:	20 91 28 05 	lds	r18, 0x0528
    5182:	30 91 29 05 	lds	r19, 0x0529
    5186:	00 93 b9 05 	sts	0x05B9, r16
    518a:	10 93 ba 05 	sts	0x05BA, r17
    518e:	20 93 bb 05 	sts	0x05BB, r18
    5192:	30 93 bc 05 	sts	0x05BC, r19
	VectorB = VectorZ;
    5196:	00 91 00 05 	lds	r16, 0x0500
    519a:	10 91 01 05 	lds	r17, 0x0501
    519e:	20 91 02 05 	lds	r18, 0x0502
    51a2:	30 91 03 05 	lds	r19, 0x0503
    51a6:	00 93 bd 05 	sts	0x05BD, r16
    51aa:	10 93 be 05 	sts	0x05BE, r17
    51ae:	20 93 bf 05 	sts	0x05BF, r18
    51b2:	30 93 c0 05 	sts	0x05C0, r19
	RotateVector(theta);
    51b6:	0e 94 d6 27 	call	0x4fac	; 0x4fac <RotateVector>
	VectorY = VectorNewA;
    51ba:	80 91 a5 05 	lds	r24, 0x05A5
    51be:	90 91 a6 05 	lds	r25, 0x05A6
    51c2:	a0 91 a7 05 	lds	r26, 0x05A7
    51c6:	b0 91 a8 05 	lds	r27, 0x05A8
    51ca:	80 93 26 05 	sts	0x0526, r24
    51ce:	90 93 27 05 	sts	0x0527, r25
    51d2:	a0 93 28 05 	sts	0x0528, r26
    51d6:	b0 93 29 05 	sts	0x0529, r27
	VectorZ = VectorNewB;
    51da:	80 90 89 05 	lds	r8, 0x0589
    51de:	90 90 8a 05 	lds	r9, 0x058A
    51e2:	a0 90 8b 05 	lds	r10, 0x058B
    51e6:	b0 90 8c 05 	lds	r11, 0x058C
    51ea:	80 92 00 05 	sts	0x0500, r8
    51ee:	90 92 01 05 	sts	0x0501, r9
    51f2:	a0 92 02 05 	sts	0x0502, r10
    51f6:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    51fa:	60 91 9d 05 	lds	r22, 0x059D
    51fe:	70 91 9e 05 	lds	r23, 0x059E
    5202:	80 91 9f 05 	lds	r24, 0x059F
    5206:	90 91 a0 05 	lds	r25, 0x05A0
    520a:	a7 01       	movw	r20, r14
    520c:	96 01       	movw	r18, r12
    520e:	0e 94 67 28 	call	0x50ce	; 0x50ce <thetascale>
	VectorA = VectorX;
    5212:	00 91 2a 05 	lds	r16, 0x052A
    5216:	10 91 2b 05 	lds	r17, 0x052B
    521a:	20 91 2c 05 	lds	r18, 0x052C
    521e:	30 91 2d 05 	lds	r19, 0x052D
    5222:	00 93 b9 05 	sts	0x05B9, r16
    5226:	10 93 ba 05 	sts	0x05BA, r17
    522a:	20 93 bb 05 	sts	0x05BB, r18
    522e:	30 93 bc 05 	sts	0x05BC, r19
	VectorB = VectorZ;
    5232:	80 92 bd 05 	sts	0x05BD, r8
    5236:	90 92 be 05 	sts	0x05BE, r9
    523a:	a0 92 bf 05 	sts	0x05BF, r10
    523e:	b0 92 c0 05 	sts	0x05C0, r11
	RotateVector(theta);
    5242:	0e 94 d6 27 	call	0x4fac	; 0x4fac <RotateVector>
	VectorX = VectorNewA;
    5246:	80 90 a5 05 	lds	r8, 0x05A5
    524a:	90 90 a6 05 	lds	r9, 0x05A6
    524e:	a0 90 a7 05 	lds	r10, 0x05A7
    5252:	b0 90 a8 05 	lds	r11, 0x05A8
    5256:	80 92 2a 05 	sts	0x052A, r8
    525a:	90 92 2b 05 	sts	0x052B, r9
    525e:	a0 92 2c 05 	sts	0x052C, r10
    5262:	b0 92 2d 05 	sts	0x052D, r11
	VectorZ = VectorNewB;
    5266:	80 91 89 05 	lds	r24, 0x0589
    526a:	90 91 8a 05 	lds	r25, 0x058A
    526e:	a0 91 8b 05 	lds	r26, 0x058B
    5272:	b0 91 8c 05 	lds	r27, 0x058C
    5276:	80 93 00 05 	sts	0x0500, r24
    527a:	90 93 01 05 	sts	0x0501, r25
    527e:	a0 93 02 05 	sts	0x0502, r26
    5282:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    5286:	60 91 87 05 	lds	r22, 0x0587
    528a:	70 91 88 05 	lds	r23, 0x0588
    528e:	88 27       	eor	r24, r24
    5290:	77 fd       	sbrc	r23, 7
    5292:	80 95       	com	r24
    5294:	98 2f       	mov	r25, r24
    5296:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    529a:	a7 01       	movw	r20, r14
    529c:	96 01       	movw	r18, r12
    529e:	0e 94 67 28 	call	0x50ce	; 0x50ce <thetascale>
	VectorA = VectorX;
    52a2:	80 92 b9 05 	sts	0x05B9, r8
    52a6:	90 92 ba 05 	sts	0x05BA, r9
    52aa:	a0 92 bb 05 	sts	0x05BB, r10
    52ae:	b0 92 bc 05 	sts	0x05BC, r11
	VectorB = VectorY;
    52b2:	c0 90 26 05 	lds	r12, 0x0526
    52b6:	d0 90 27 05 	lds	r13, 0x0527
    52ba:	e0 90 28 05 	lds	r14, 0x0528
    52be:	f0 90 29 05 	lds	r15, 0x0529
    52c2:	c0 92 bd 05 	sts	0x05BD, r12
    52c6:	d0 92 be 05 	sts	0x05BE, r13
    52ca:	e0 92 bf 05 	sts	0x05BF, r14
    52ce:	f0 92 c0 05 	sts	0x05C0, r15
	RotateVector(theta);
    52d2:	0e 94 d6 27 	call	0x4fac	; 0x4fac <RotateVector>
	VectorX = VectorNewA;
    52d6:	80 91 a5 05 	lds	r24, 0x05A5
    52da:	90 91 a6 05 	lds	r25, 0x05A6
    52de:	a0 91 a7 05 	lds	r26, 0x05A7
    52e2:	b0 91 a8 05 	lds	r27, 0x05A8
    52e6:	80 93 2a 05 	sts	0x052A, r24
    52ea:	90 93 2b 05 	sts	0x052B, r25
    52ee:	a0 93 2c 05 	sts	0x052C, r26
    52f2:	b0 93 2d 05 	sts	0x052D, r27
	VectorY = VectorNewB;
    52f6:	80 91 89 05 	lds	r24, 0x0589
    52fa:	90 91 8a 05 	lds	r25, 0x058A
    52fe:	a0 91 8b 05 	lds	r26, 0x058B
    5302:	b0 91 8c 05 	lds	r27, 0x058C
    5306:	80 93 26 05 	sts	0x0526, r24
    530a:	90 93 27 05 	sts	0x0527, r25
    530e:	a0 93 28 05 	sts	0x0528, r26
    5312:	b0 93 29 05 	sts	0x0529, r27
}
    5316:	1f 91       	pop	r17
    5318:	0f 91       	pop	r16
    531a:	ff 90       	pop	r15
    531c:	ef 90       	pop	r14
    531e:	df 90       	pop	r13
    5320:	cf 90       	pop	r12
    5322:	bf 90       	pop	r11
    5324:	af 90       	pop	r10
    5326:	9f 90       	pop	r9
    5328:	8f 90       	pop	r8
    532a:	08 95       	ret

0000532c <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    532c:	cf 92       	push	r12
    532e:	df 92       	push	r13
    5330:	ef 92       	push	r14
    5332:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	30 e0       	ldi	r19, 0x00	; 0
    5338:	44 eb       	ldi	r20, 0xB4	; 180
    533a:	52 e4       	ldi	r21, 0x42	; 66
    533c:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    5340:	6b 01       	movw	r12, r22
    5342:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	a9 01       	movw	r20, r18
    534a:	60 91 00 05 	lds	r22, 0x0500
    534e:	70 91 01 05 	lds	r23, 0x0501
    5352:	80 91 02 05 	lds	r24, 0x0502
    5356:	90 91 03 05 	lds	r25, 0x0503
    535a:	0e 94 25 4b 	call	0x964a	; 0x964a <__cmpsf2>
    535e:	87 ff       	sbrs	r24, 7
    5360:	18 c0       	rjmp	.+48     	; 0x5392 <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    5362:	20 e0       	ldi	r18, 0x00	; 0
    5364:	30 e0       	ldi	r19, 0x00	; 0
    5366:	a9 01       	movw	r20, r18
    5368:	c7 01       	movw	r24, r14
    536a:	b6 01       	movw	r22, r12
    536c:	0e 94 74 4c 	call	0x98e8	; 0x98e8 <__gesf2>
		{
			temp = 180 - temp;
    5370:	a7 01       	movw	r20, r14
    5372:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    5374:	18 16       	cp	r1, r24
    5376:	2c f4       	brge	.+10     	; 0x5382 <ext2+0x56>
		{
			temp = 180 - temp;
    5378:	60 e0       	ldi	r22, 0x00	; 0
    537a:	70 e0       	ldi	r23, 0x00	; 0
    537c:	84 e3       	ldi	r24, 0x34	; 52
    537e:	93 e4       	ldi	r25, 0x43	; 67
    5380:	04 c0       	rjmp	.+8      	; 0x538a <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    5382:	60 e0       	ldi	r22, 0x00	; 0
    5384:	70 e0       	ldi	r23, 0x00	; 0
    5386:	84 e3       	ldi	r24, 0x34	; 52
    5388:	93 ec       	ldi	r25, 0xC3	; 195
    538a:	0e 94 c0 4a 	call	0x9580	; 0x9580 <__subsf3>
    538e:	6b 01       	movw	r12, r22
    5390:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    5392:	c7 01       	movw	r24, r14
    5394:	b6 01       	movw	r22, r12
    5396:	ff 90       	pop	r15
    5398:	ef 90       	pop	r14
    539a:	df 90       	pop	r13
    539c:	cf 90       	pop	r12
    539e:	08 95       	ret

000053a0 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    53a0:	60 91 2a 05 	lds	r22, 0x052A
    53a4:	70 91 2b 05 	lds	r23, 0x052B
    53a8:	80 91 2c 05 	lds	r24, 0x052C
    53ac:	90 91 2d 05 	lds	r25, 0x052D
    53b0:	0e 94 96 29 	call	0x532c	; 0x532c <ext2>
    53b4:	60 93 b5 05 	sts	0x05B5, r22
    53b8:	70 93 b6 05 	sts	0x05B6, r23
    53bc:	80 93 b7 05 	sts	0x05B7, r24
    53c0:	90 93 b8 05 	sts	0x05B8, r25
	EulerAnglePitch = ext2(VectorY);
    53c4:	60 91 26 05 	lds	r22, 0x0526
    53c8:	70 91 27 05 	lds	r23, 0x0527
    53cc:	80 91 28 05 	lds	r24, 0x0528
    53d0:	90 91 29 05 	lds	r25, 0x0529
    53d4:	0e 94 96 29 	call	0x532c	; 0x532c <ext2>
    53d8:	60 93 8d 05 	sts	0x058D, r22
    53dc:	70 93 8e 05 	sts	0x058E, r23
    53e0:	80 93 8f 05 	sts	0x058F, r24
    53e4:	90 93 90 05 	sts	0x0590, r25
    53e8:	08 95       	ret

000053ea <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    53ea:	4f 92       	push	r4
    53ec:	5f 92       	push	r5
    53ee:	6f 92       	push	r6
    53f0:	7f 92       	push	r7
    53f2:	8f 92       	push	r8
    53f4:	9f 92       	push	r9
    53f6:	af 92       	push	r10
    53f8:	bf 92       	push	r11
    53fa:	cf 92       	push	r12
    53fc:	df 92       	push	r13
    53fe:	ef 92       	push	r14
    5400:	ff 92       	push	r15
    5402:	0f 93       	push	r16
    5404:	1f 93       	push	r17
    5406:	cf 93       	push	r28
    5408:	df 93       	push	r29
    540a:	cd b7       	in	r28, 0x3d	; 61
    540c:	de b7       	in	r29, 0x3e	; 62
    540e:	60 97       	sbiw	r28, 0x10	; 16
    5410:	0f b6       	in	r0, 0x3f	; 63
    5412:	f8 94       	cli
    5414:	de bf       	out	0x3e, r29	; 62
    5416:	0f be       	out	0x3f, r0	; 63
    5418:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    541a:	0e 94 c2 4b 	call	0x9784	; 0x9784 <__floatunsisf>
    541e:	69 83       	std	Y+1, r22	; 0x01
    5420:	7a 83       	std	Y+2, r23	; 0x02
    5422:	8b 83       	std	Y+3, r24	; 0x03
    5424:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    5426:	20 e8       	ldi	r18, 0x80	; 128
    5428:	36 e9       	ldi	r19, 0x96	; 150
    542a:	48 e1       	ldi	r20, 0x18	; 24
    542c:	5a e4       	ldi	r21, 0x4A	; 74
    542e:	0e 94 29 4b 	call	0x9652	; 0x9652 <__divsf3>
    5432:	6d 87       	std	Y+13, r22	; 0x0d
    5434:	7e 87       	std	Y+14, r23	; 0x0e
    5436:	8f 87       	std	Y+15, r24	; 0x0f
    5438:	98 8b       	std	Y+16, r25	; 0x10
	//************************************************************
	// Acc LPF
	//************************************************************	

	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    543a:	80 91 eb 05 	lds	r24, 0x05EB
    543e:	60 91 4f 06 	lds	r22, 0x064F
    5442:	82 30       	cpi	r24, 0x02	; 2
    5444:	39 f0       	breq	.+14     	; 0x5454 <imu_update+0x6a>
	{
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    5446:	84 e0       	ldi	r24, 0x04	; 4
    5448:	68 02       	muls	r22, r24
    544a:	b0 01       	movw	r22, r0
    544c:	11 24       	eor	r1, r1
    544e:	6b 56       	subi	r22, 0x6B	; 107
    5450:	77 4e       	sbci	r23, 0xE7	; 231
    5452:	06 c0       	rjmp	.+12     	; 0x5460 <imu_update+0x76>
	}
	else
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
    5454:	94 e0       	ldi	r25, 0x04	; 4
    5456:	69 02       	muls	r22, r25
    5458:	b0 01       	movw	r22, r0
    545a:	11 24       	eor	r1, r1
    545c:	6b 58       	subi	r22, 0x8B	; 139
    545e:	77 4e       	sbci	r23, 0xE7	; 231
    5460:	44 e0       	ldi	r20, 0x04	; 4
    5462:	50 e0       	ldi	r21, 0x00	; 0
    5464:	ce 01       	movw	r24, r28
    5466:	01 96       	adiw	r24, 0x01	; 1
    5468:	0e 94 7b 4d 	call	0x9af6	; 0x9af6 <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    546c:	50 90 4f 06 	lds	r5, 0x064F
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    5470:	c9 80       	ldd	r12, Y+1	; 0x01
    5472:	da 80       	ldd	r13, Y+2	; 0x02
    5474:	eb 80       	ldd	r14, Y+3	; 0x03
    5476:	fc 80       	ldd	r15, Y+4	; 0x04
    5478:	2e e3       	ldi	r18, 0x3E	; 62
    547a:	62 2e       	mov	r6, r18
    547c:	25 e0       	ldi	r18, 0x05	; 5
    547e:	72 2e       	mov	r7, r18
    5480:	09 ea       	ldi	r16, 0xA9	; 169
    5482:	15 e0       	ldi	r17, 0x05	; 5
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    5484:	d3 01       	movw	r26, r6
    5486:	6d 91       	ld	r22, X+
    5488:	7d 91       	ld	r23, X+
    548a:	3d 01       	movw	r6, r26
    548c:	88 27       	eor	r24, r24
    548e:	77 fd       	sbrc	r23, 7
    5490:	80 95       	com	r24
    5492:	98 2f       	mov	r25, r24
    5494:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    5498:	4b 01       	movw	r8, r22
    549a:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    549c:	b7 e0       	ldi	r27, 0x07	; 7
    549e:	5b 16       	cp	r5, r27
    54a0:	f1 f0       	breq	.+60     	; 0x54de <imu_update+0xf4>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    54a2:	20 e0       	ldi	r18, 0x00	; 0
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	40 e8       	ldi	r20, 0x80	; 128
    54a8:	5f e3       	ldi	r21, 0x3F	; 63
    54aa:	c7 01       	movw	r24, r14
    54ac:	b6 01       	movw	r22, r12
    54ae:	0e 94 c0 4a 	call	0x9580	; 0x9580 <__subsf3>
    54b2:	f8 01       	movw	r30, r16
    54b4:	20 81       	ld	r18, Z
    54b6:	31 81       	ldd	r19, Z+1	; 0x01
    54b8:	42 81       	ldd	r20, Z+2	; 0x02
    54ba:	53 81       	ldd	r21, Z+3	; 0x03
    54bc:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    54c0:	a5 01       	movw	r20, r10
    54c2:	94 01       	movw	r18, r8
    54c4:	0e 94 c0 4a 	call	0x9580	; 0x9580 <__subsf3>
    54c8:	a7 01       	movw	r20, r14
    54ca:	96 01       	movw	r18, r12
    54cc:	0e 94 29 4b 	call	0x9652	; 0x9652 <__divsf3>
    54d0:	d8 01       	movw	r26, r16
    54d2:	6d 93       	st	X+, r22
    54d4:	7d 93       	st	X+, r23
    54d6:	8d 93       	st	X+, r24
    54d8:	9c 93       	st	X, r25
    54da:	13 97       	sbiw	r26, 0x03	; 3
    54dc:	09 c0       	rjmp	.+18     	; 0x54f0 <imu_update+0x106>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    54de:	b7 fa       	bst	r11, 7
    54e0:	b0 94       	com	r11
    54e2:	b7 f8       	bld	r11, 7
    54e4:	b0 94       	com	r11
    54e6:	f8 01       	movw	r30, r16
    54e8:	80 82       	st	Z, r8
    54ea:	91 82       	std	Z+1, r9	; 0x01
    54ec:	a2 82       	std	Z+2, r10	; 0x02
    54ee:	b3 82       	std	Z+3, r11	; 0x03
    54f0:	0c 5f       	subi	r16, 0xFC	; 252
    54f2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    54f4:	f4 e4       	ldi	r31, 0x44	; 68
    54f6:	6f 16       	cp	r6, r31
    54f8:	f5 e0       	ldi	r31, 0x05	; 5
    54fa:	7f 06       	cpc	r7, r31
    54fc:	19 f6       	brne	.-122    	; 0x5484 <imu_update+0x9a>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    54fe:	23 ec       	ldi	r18, 0xC3	; 195
    5500:	35 ef       	ldi	r19, 0xF5	; 245
    5502:	48 e2       	ldi	r20, 0x28	; 40
    5504:	5f e3       	ldi	r21, 0x3F	; 63
    5506:	60 91 a9 05 	lds	r22, 0x05A9
    550a:	70 91 aa 05 	lds	r23, 0x05AA
    550e:	80 91 ab 05 	lds	r24, 0x05AB
    5512:	90 91 ac 05 	lds	r25, 0x05AC
    5516:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    551a:	6d 83       	std	Y+5, r22	; 0x05
    551c:	7e 83       	std	Y+6, r23	; 0x06
    551e:	8f 83       	std	Y+7, r24	; 0x07
    5520:	98 87       	std	Y+8, r25	; 0x08
    5522:	60 93 91 05 	sts	0x0591, r22
    5526:	70 93 92 05 	sts	0x0592, r23
    552a:	80 93 93 05 	sts	0x0593, r24
    552e:	90 93 94 05 	sts	0x0594, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    5532:	23 ec       	ldi	r18, 0xC3	; 195
    5534:	35 ef       	ldi	r19, 0xF5	; 245
    5536:	48 e2       	ldi	r20, 0x28	; 40
    5538:	5f e3       	ldi	r21, 0x3F	; 63
    553a:	60 91 ad 05 	lds	r22, 0x05AD
    553e:	70 91 ae 05 	lds	r23, 0x05AE
    5542:	80 91 af 05 	lds	r24, 0x05AF
    5546:	90 91 b0 05 	lds	r25, 0x05B0
    554a:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    554e:	69 87       	std	Y+9, r22	; 0x09
    5550:	7a 87       	std	Y+10, r23	; 0x0a
    5552:	8b 87       	std	Y+11, r24	; 0x0b
    5554:	9c 87       	std	Y+12, r25	; 0x0c
    5556:	60 93 95 05 	sts	0x0595, r22
    555a:	70 93 96 05 	sts	0x0596, r23
    555e:	80 93 97 05 	sts	0x0597, r24
    5562:	90 93 98 05 	sts	0x0598, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    5566:	60 91 83 05 	lds	r22, 0x0583
    556a:	70 91 84 05 	lds	r23, 0x0584
    556e:	88 27       	eor	r24, r24
    5570:	77 fd       	sbrc	r23, 7
    5572:	80 95       	com	r24
    5574:	98 2f       	mov	r25, r24
    5576:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    557a:	2b 01       	movw	r4, r22
    557c:	3c 01       	movw	r6, r24
    557e:	60 93 9d 05 	sts	0x059D, r22
    5582:	70 93 9e 05 	sts	0x059E, r23
    5586:	80 93 9f 05 	sts	0x059F, r24
    558a:	90 93 a0 05 	sts	0x05A0, r25
	GyroPitchVC = gyroADC[PITCH];
    558e:	60 91 85 05 	lds	r22, 0x0585
    5592:	70 91 86 05 	lds	r23, 0x0586
    5596:	88 27       	eor	r24, r24
    5598:	77 fd       	sbrc	r23, 7
    559a:	80 95       	com	r24
    559c:	98 2f       	mov	r25, r24
    559e:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    55a2:	6b 01       	movw	r12, r22
    55a4:	7c 01       	movw	r14, r24
    55a6:	60 93 99 05 	sts	0x0599, r22
    55aa:	70 93 9a 05 	sts	0x059A, r23
    55ae:	80 93 9b 05 	sts	0x059B, r24
    55b2:	90 93 9c 05 	sts	0x059C, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    55b6:	20 91 3e 05 	lds	r18, 0x053E
    55ba:	30 91 3f 05 	lds	r19, 0x053F
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    55be:	40 91 40 05 	lds	r20, 0x0540
    55c2:	50 91 41 05 	lds	r21, 0x0541
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    55c6:	e0 91 42 05 	lds	r30, 0x0542
    55ca:	f0 91 43 05 	lds	r31, 0x0543
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    55ce:	44 9f       	mul	r20, r20
    55d0:	40 01       	movw	r8, r0
    55d2:	45 9f       	mul	r20, r21
    55d4:	90 0c       	add	r9, r0
    55d6:	90 0c       	add	r9, r0
    55d8:	11 24       	eor	r1, r1
    55da:	b4 01       	movw	r22, r8
    55dc:	88 27       	eor	r24, r24
    55de:	77 fd       	sbrc	r23, 7
    55e0:	80 95       	com	r24
    55e2:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    55e4:	22 9f       	mul	r18, r18
    55e6:	a0 01       	movw	r20, r0
    55e8:	23 9f       	mul	r18, r19
    55ea:	50 0d       	add	r21, r0
    55ec:	50 0d       	add	r21, r0
    55ee:	11 24       	eor	r1, r1
    55f0:	8a 01       	movw	r16, r20
    55f2:	22 27       	eor	r18, r18
    55f4:	17 fd       	sbrc	r17, 7
    55f6:	20 95       	com	r18
    55f8:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    55fa:	60 0f       	add	r22, r16
    55fc:	71 1f       	adc	r23, r17
    55fe:	82 1f       	adc	r24, r18
    5600:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    5602:	ee 9f       	mul	r30, r30
    5604:	90 01       	movw	r18, r0
    5606:	ef 9f       	mul	r30, r31
    5608:	30 0d       	add	r19, r0
    560a:	30 0d       	add	r19, r0
    560c:	11 24       	eor	r1, r1
    560e:	89 01       	movw	r16, r18
    5610:	22 27       	eor	r18, r18
    5612:	17 fd       	sbrc	r17, 7
    5614:	20 95       	com	r18
    5616:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    5618:	60 0f       	add	r22, r16
    561a:	71 1f       	adc	r23, r17
    561c:	82 1f       	adc	r24, r18
    561e:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    5620:	0e 94 c2 4b 	call	0x9784	; 0x9784 <__floatunsisf>
    5624:	4b 01       	movw	r8, r22
    5626:	5c 01       	movw	r10, r24
    5628:	20 e0       	ldi	r18, 0x00	; 0
    562a:	34 ef       	ldi	r19, 0xF4	; 244
    562c:	48 e3       	ldi	r20, 0x38	; 56
    562e:	56 e4       	ldi	r21, 0x46	; 70
    5630:	0e 94 74 4c 	call	0x98e8	; 0x98e8 <__gesf2>
    5634:	18 16       	cp	r1, r24
    5636:	0c f0       	brlt	.+2      	; 0x563a <imu_update+0x250>
    5638:	6f c0       	rjmp	.+222    	; 0x5718 <imu_update+0x32e>
    563a:	20 e0       	ldi	r18, 0x00	; 0
    563c:	38 e4       	ldi	r19, 0x48	; 72
    563e:	49 ea       	ldi	r20, 0xA9	; 169
    5640:	56 e4       	ldi	r21, 0x46	; 70
    5642:	c5 01       	movw	r24, r10
    5644:	b4 01       	movw	r22, r8
    5646:	0e 94 25 4b 	call	0x964a	; 0x964a <__cmpsf2>
    564a:	87 ff       	sbrs	r24, 7
    564c:	65 c0       	rjmp	.+202    	; 0x5718 <imu_update+0x32e>
    564e:	20 e0       	ldi	r18, 0x00	; 0
    5650:	30 e0       	ldi	r19, 0x00	; 0
    5652:	40 e0       	ldi	r20, 0x00	; 0
    5654:	5f e3       	ldi	r21, 0x3F	; 63
    5656:	60 91 00 05 	lds	r22, 0x0500
    565a:	70 91 01 05 	lds	r23, 0x0501
    565e:	80 91 02 05 	lds	r24, 0x0502
    5662:	90 91 03 05 	lds	r25, 0x0503
    5666:	0e 94 74 4c 	call	0x98e8	; 0x98e8 <__gesf2>
    566a:	18 16       	cp	r1, r24
    566c:	0c f0       	brlt	.+2      	; 0x5670 <imu_update+0x286>
    566e:	54 c0       	rjmp	.+168    	; 0x5718 <imu_update+0x32e>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    5670:	80 91 51 06 	lds	r24, 0x0651
    5674:	6b e0       	ldi	r22, 0x0B	; 11
    5676:	70 e0       	ldi	r23, 0x00	; 0
    5678:	68 1b       	sub	r22, r24
    567a:	71 09       	sbc	r23, r1
    567c:	87 fd       	sbrc	r24, 7
    567e:	73 95       	inc	r23
    5680:	88 27       	eor	r24, r24
    5682:	77 fd       	sbrc	r23, 7
    5684:	80 95       	com	r24
    5686:	98 2f       	mov	r25, r24
    5688:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    568c:	4b 01       	movw	r8, r22
    568e:	5c 01       	movw	r10, r24
    5690:	2d 81       	ldd	r18, Y+5	; 0x05
    5692:	3e 81       	ldd	r19, Y+6	; 0x06
    5694:	4f 81       	ldd	r20, Y+7	; 0x07
    5696:	58 85       	ldd	r21, Y+8	; 0x08
    5698:	60 91 b5 05 	lds	r22, 0x05B5
    569c:	70 91 b6 05 	lds	r23, 0x05B6
    56a0:	80 91 b7 05 	lds	r24, 0x05B7
    56a4:	90 91 b8 05 	lds	r25, 0x05B8
    56a8:	0e 94 c0 4a 	call	0x9580	; 0x9580 <__subsf3>
    56ac:	a5 01       	movw	r20, r10
    56ae:	94 01       	movw	r18, r8
    56b0:	0e 94 29 4b 	call	0x9652	; 0x9652 <__divsf3>
    56b4:	9b 01       	movw	r18, r22
    56b6:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    56b8:	c3 01       	movw	r24, r6
    56ba:	b2 01       	movw	r22, r4
    56bc:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__addsf3>
    56c0:	60 93 9d 05 	sts	0x059D, r22
    56c4:	70 93 9e 05 	sts	0x059E, r23
    56c8:	80 93 9f 05 	sts	0x059F, r24
    56cc:	90 93 a0 05 	sts	0x05A0, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    56d0:	29 85       	ldd	r18, Y+9	; 0x09
    56d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    56d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    56d6:	5c 85       	ldd	r21, Y+12	; 0x0c
    56d8:	60 91 8d 05 	lds	r22, 0x058D
    56dc:	70 91 8e 05 	lds	r23, 0x058E
    56e0:	80 91 8f 05 	lds	r24, 0x058F
    56e4:	90 91 90 05 	lds	r25, 0x0590
    56e8:	0e 94 c0 4a 	call	0x9580	; 0x9580 <__subsf3>
    56ec:	a5 01       	movw	r20, r10
    56ee:	94 01       	movw	r18, r8
    56f0:	0e 94 29 4b 	call	0x9652	; 0x9652 <__divsf3>
    56f4:	9b 01       	movw	r18, r22
    56f6:	ac 01       	movw	r20, r24
    56f8:	69 83       	std	Y+1, r22	; 0x01
    56fa:	7a 83       	std	Y+2, r23	; 0x02
    56fc:	8b 83       	std	Y+3, r24	; 0x03
    56fe:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    5700:	c7 01       	movw	r24, r14
    5702:	b6 01       	movw	r22, r12
    5704:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__addsf3>
    5708:	60 93 99 05 	sts	0x0599, r22
    570c:	70 93 9a 05 	sts	0x059A, r23
    5710:	80 93 9b 05 	sts	0x059B, r24
    5714:	90 93 9c 05 	sts	0x059C, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    5718:	6d 85       	ldd	r22, Y+13	; 0x0d
    571a:	7e 85       	ldd	r23, Y+14	; 0x0e
    571c:	8f 85       	ldd	r24, Y+15	; 0x0f
    571e:	98 89       	ldd	r25, Y+16	; 0x10
    5720:	0e 94 a3 28 	call	0x5146	; 0x5146 <Rotate3dVector>
	ExtractEulerAngles();
    5724:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    5728:	20 e0       	ldi	r18, 0x00	; 0
    572a:	30 e0       	ldi	r19, 0x00	; 0
    572c:	48 ec       	ldi	r20, 0xC8	; 200
    572e:	52 ec       	ldi	r21, 0xC2	; 194
    5730:	60 91 b5 05 	lds	r22, 0x05B5
    5734:	70 91 b6 05 	lds	r23, 0x05B6
    5738:	80 91 b7 05 	lds	r24, 0x05B7
    573c:	90 91 b8 05 	lds	r25, 0x05B8
    5740:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    5744:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
    5748:	70 93 a2 05 	sts	0x05A2, r23
    574c:	60 93 a1 05 	sts	0x05A1, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    5750:	20 e0       	ldi	r18, 0x00	; 0
    5752:	30 e0       	ldi	r19, 0x00	; 0
    5754:	48 ec       	ldi	r20, 0xC8	; 200
    5756:	52 ec       	ldi	r21, 0xC2	; 194
    5758:	60 91 8d 05 	lds	r22, 0x058D
    575c:	70 91 8e 05 	lds	r23, 0x058E
    5760:	80 91 8f 05 	lds	r24, 0x058F
    5764:	90 91 90 05 	lds	r25, 0x0590
    5768:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    576c:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
    5770:	70 93 a4 05 	sts	0x05A4, r23
    5774:	60 93 a3 05 	sts	0x05A3, r22
}
    5778:	60 96       	adiw	r28, 0x10	; 16
    577a:	0f b6       	in	r0, 0x3f	; 63
    577c:	f8 94       	cli
    577e:	de bf       	out	0x3e, r29	; 62
    5780:	0f be       	out	0x3f, r0	; 63
    5782:	cd bf       	out	0x3d, r28	; 61
    5784:	df 91       	pop	r29
    5786:	cf 91       	pop	r28
    5788:	1f 91       	pop	r17
    578a:	0f 91       	pop	r16
    578c:	ff 90       	pop	r15
    578e:	ef 90       	pop	r14
    5790:	df 90       	pop	r13
    5792:	cf 90       	pop	r12
    5794:	bf 90       	pop	r11
    5796:	af 90       	pop	r10
    5798:	9f 90       	pop	r9
    579a:	8f 90       	pop	r8
    579c:	7f 90       	pop	r7
    579e:	6f 90       	pop	r6
    57a0:	5f 90       	pop	r5
    57a2:	4f 90       	pop	r4
    57a4:	08 95       	ret

000057a6 <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    57a6:	10 92 2a 05 	sts	0x052A, r1
    57aa:	10 92 2b 05 	sts	0x052B, r1
    57ae:	10 92 2c 05 	sts	0x052C, r1
    57b2:	10 92 2d 05 	sts	0x052D, r1
	VectorY = 0;
    57b6:	10 92 26 05 	sts	0x0526, r1
    57ba:	10 92 27 05 	sts	0x0527, r1
    57be:	10 92 28 05 	sts	0x0528, r1
    57c2:	10 92 29 05 	sts	0x0529, r1
	VectorZ = 1;
    57c6:	80 e0       	ldi	r24, 0x00	; 0
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	a0 e8       	ldi	r26, 0x80	; 128
    57cc:	bf e3       	ldi	r27, 0x3F	; 63
    57ce:	80 93 00 05 	sts	0x0500, r24
    57d2:	90 93 01 05 	sts	0x0501, r25
    57d6:	a0 93 02 05 	sts	0x0502, r26
    57da:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    57de:	10 92 b9 05 	sts	0x05B9, r1
    57e2:	10 92 ba 05 	sts	0x05BA, r1
    57e6:	10 92 bb 05 	sts	0x05BB, r1
    57ea:	10 92 bc 05 	sts	0x05BC, r1
	VectorB = 0;
    57ee:	10 92 bd 05 	sts	0x05BD, r1
    57f2:	10 92 be 05 	sts	0x05BE, r1
    57f6:	10 92 bf 05 	sts	0x05BF, r1
    57fa:	10 92 c0 05 	sts	0x05C0, r1
	EulerAngleRoll = 0;
    57fe:	10 92 b5 05 	sts	0x05B5, r1
    5802:	10 92 b6 05 	sts	0x05B6, r1
    5806:	10 92 b7 05 	sts	0x05B7, r1
    580a:	10 92 b8 05 	sts	0x05B8, r1
	EulerAnglePitch = 0;
    580e:	10 92 8d 05 	sts	0x058D, r1
    5812:	10 92 8e 05 	sts	0x058E, r1
    5816:	10 92 8f 05 	sts	0x058F, r1
    581a:	10 92 90 05 	sts	0x0590, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    581e:	10 92 df 07 	sts	0x07DF, r1
    5822:	10 92 de 07 	sts	0x07DE, r1
	TCNT1 = 0;			// TCNT1 current time
    5826:	10 92 85 00 	sts	0x0085, r1
    582a:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    582e:	10 92 1b 05 	sts	0x051B, r1
    5832:	10 92 1a 05 	sts	0x051A, r1
    5836:	08 95       	ret

00005838 <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    5838:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    583a:	80 e3       	ldi	r24, 0x30	; 48
    583c:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    583e:	8c ef       	ldi	r24, 0xFC	; 252
    5840:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    5842:	8a e0       	ldi	r24, 0x0A	; 10
    5844:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    5846:	82 ef       	ldi	r24, 0xF2	; 242
    5848:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    584a:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    584c:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    584e:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    5850:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    5852:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    5854:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    5856:	85 ef       	ldi	r24, 0xF5	; 245
    5858:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    585a:	8c e0       	ldi	r24, 0x0C	; 12
    585c:	89 b9       	out	0x09, r24	; 9
    585e:	2f e5       	ldi	r18, 0x5F	; 95
    5860:	88 ed       	ldi	r24, 0xD8	; 216
    5862:	93 e0       	ldi	r25, 0x03	; 3
    5864:	21 50       	subi	r18, 0x01	; 1
    5866:	80 40       	sbci	r24, 0x00	; 0
    5868:	90 40       	sbci	r25, 0x00	; 0
    586a:	e1 f7       	brne	.-8      	; 0x5864 <init+0x2c>
    586c:	00 c0       	rjmp	.+0      	; 0x586e <init+0x36>
    586e:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    5870:	83 b1       	in	r24, 0x03	; 3
    5872:	80 7f       	andi	r24, 0xF0	; 240
    5874:	80 3e       	cpi	r24, 0xE0	; 224
    5876:	21 f4       	brne	.+8      	; 0x5880 <init+0x48>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    5878:	83 ef       	ldi	r24, 0xF3	; 243
    587a:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    587c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    5880:	82 ef       	ldi	r24, 0xF2	; 242
    5882:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    5884:	8d e0       	ldi	r24, 0x0D	; 13
    5886:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    5888:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    588a:	85 e0       	ldi	r24, 0x05	; 5
    588c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    588e:	80 91 6e 00 	lds	r24, 0x006E
    5892:	81 60       	ori	r24, 0x01	; 1
    5894:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    5898:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    589a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    589e:	80 91 81 00 	lds	r24, 0x0081
    58a2:	82 60       	ori	r24, 0x02	; 2
    58a4:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    58a8:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    58ac:	87 e0       	ldi	r24, 0x07	; 7
    58ae:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    58b2:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    58b6:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    58b8:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    58bc:	9a e0       	ldi	r25, 0x0A	; 10
    58be:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    58c2:	9f e0       	ldi	r25, 0x0F	; 15
    58c4:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    58c6:	95 e1       	ldi	r25, 0x15	; 21
    58c8:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    58cc:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    58ce:	10 92 db 07 	sts	0x07DB, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    58d2:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <Initial_EEPROM_Config_Load>
    58d6:	c8 2f       	mov	r28, r24
    58d8:	20 e0       	ldi	r18, 0x00	; 0
    58da:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    58dc:	46 ea       	ldi	r20, 0xA6	; 166
    58de:	5e e0       	ldi	r21, 0x0E	; 14
    58e0:	f9 01       	movw	r30, r18
    58e2:	ee 0f       	add	r30, r30
    58e4:	ff 1f       	adc	r31, r31
    58e6:	e5 53       	subi	r30, 0x35	; 53
    58e8:	f8 4f       	sbci	r31, 0xF8	; 248
    58ea:	51 83       	std	Z+1, r21	; 0x01
    58ec:	40 83       	st	Z, r20
    58ee:	2f 5f       	subi	r18, 0xFF	; 255
    58f0:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    58f2:	28 30       	cpi	r18, 0x08	; 8
    58f4:	31 05       	cpc	r19, r1
    58f6:	a1 f7       	brne	.-24     	; 0x58e0 <init+0xa8>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    58f8:	24 ec       	ldi	r18, 0xC4	; 196
    58fa:	39 e0       	ldi	r19, 0x09	; 9
    58fc:	30 93 cc 07 	sts	0x07CC, r19
    5900:	20 93 cb 07 	sts	0x07CB, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    5904:	0e 94 21 23 	call	0x4642	; 0x4642 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    5908:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    590c:	93 b1       	in	r25, 0x03	; 3
    590e:	90 7f       	andi	r25, 0xF0	; 240
    5910:	90 36       	cpi	r25, 0x60	; 96
    5912:	09 f0       	breq	.+2      	; 0x5916 <init+0xde>
    5914:	71 c0       	rjmp	.+226    	; 0x59f8 <init+0x1c0>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5916:	80 ec       	ldi	r24, 0xC0	; 192
    5918:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
		clear_buffer(buffer);
    591c:	80 e0       	ldi	r24, 0x00	; 0
    591e:	91 e0       	ldi	r25, 0x01	; 1
    5920:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    5924:	29 e1       	ldi	r18, 0x19	; 25
    5926:	30 e0       	ldi	r19, 0x00	; 0
    5928:	4a e0       	ldi	r20, 0x0A	; 10
    592a:	50 e0       	ldi	r21, 0x00	; 0
    592c:	61 e7       	ldi	r22, 0x71	; 113
    592e:	71 e0       	ldi	r23, 0x01	; 1
    5930:	8b e3       	ldi	r24, 0x3B	; 59
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		write_buffer(buffer);
    5938:	80 e0       	ldi	r24, 0x00	; 0
    593a:	91 e0       	ldi	r25, 0x01	; 1
    593c:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
		clear_buffer(buffer);
    5940:	80 e0       	ldi	r24, 0x00	; 0
    5942:	91 e0       	ldi	r25, 0x01	; 1
    5944:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
    5948:	e7 e5       	ldi	r30, 0x57	; 87
    594a:	f6 e0       	ldi	r31, 0x06	; 6
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5950:	4c ed       	ldi	r20, 0xDC	; 220
    5952:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5954:	6c e6       	ldi	r22, 0x6C	; 108
    5956:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5958:	a0 81       	ld	r26, Z
    595a:	9c 01       	movw	r18, r24
    595c:	22 0f       	add	r18, r18
    595e:	33 1f       	adc	r19, r19
    5960:	a2 30       	cpi	r26, 0x02	; 2
    5962:	39 f4       	brne	.+14     	; 0x5972 <init+0x13a>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5964:	d9 01       	movw	r26, r18
    5966:	a2 5b       	subi	r26, 0xB2	; 178
    5968:	b7 4f       	sbci	r27, 0xF7	; 247
    596a:	11 96       	adiw	r26, 0x01	; 1
    596c:	7c 93       	st	X, r23
    596e:	6e 93       	st	-X, r22
    5970:	06 c0       	rjmp	.+12     	; 0x597e <init+0x146>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5972:	d9 01       	movw	r26, r18
    5974:	a2 5b       	subi	r26, 0xB2	; 178
    5976:	b7 4f       	sbci	r27, 0xF7	; 247
    5978:	11 96       	adiw	r26, 0x01	; 1
    597a:	5c 93       	st	X, r21
    597c:	4e 93       	st	-X, r20
    597e:	01 96       	adiw	r24, 0x01	; 1
    5980:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5982:	88 30       	cpi	r24, 0x08	; 8
    5984:	91 05       	cpc	r25, r1
    5986:	41 f7       	brne	.-48     	; 0x5958 <init+0x120>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5988:	83 b1       	in	r24, 0x03	; 3
    598a:	80 7f       	andi	r24, 0xF0	; 240
    598c:	80 36       	cpi	r24, 0x60	; 96
    598e:	79 f4       	brne	.+30     	; 0x59ae <init+0x176>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5990:	6f ef       	ldi	r22, 0xFF	; 255
    5992:	8e e4       	ldi	r24, 0x4E	; 78
    5994:	98 e0       	ldi	r25, 0x08	; 8
    5996:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <output_servo_ppm_asm>
    599a:	2f e7       	ldi	r18, 0x7F	; 127
    599c:	88 e3       	ldi	r24, 0x38	; 56
    599e:	91 e0       	ldi	r25, 0x01	; 1
    59a0:	21 50       	subi	r18, 0x01	; 1
    59a2:	80 40       	sbci	r24, 0x00	; 0
    59a4:	90 40       	sbci	r25, 0x00	; 0
    59a6:	e1 f7       	brne	.-8      	; 0x59a0 <init+0x168>
    59a8:	00 c0       	rjmp	.+0      	; 0x59aa <init+0x172>
    59aa:	00 00       	nop
    59ac:	ed cf       	rjmp	.-38     	; 0x5988 <init+0x150>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    59ae:	e7 e5       	ldi	r30, 0x57	; 87
    59b0:	f6 e0       	ldi	r31, 0x06	; 6
    59b2:	80 e0       	ldi	r24, 0x00	; 0
    59b4:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    59b6:	2c e4       	ldi	r18, 0x4C	; 76
    59b8:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    59ba:	40 81       	ld	r20, Z
    59bc:	42 30       	cpi	r20, 0x02	; 2
    59be:	41 f4       	brne	.+16     	; 0x59d0 <init+0x198>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    59c0:	dc 01       	movw	r26, r24
    59c2:	aa 0f       	add	r26, r26
    59c4:	bb 1f       	adc	r27, r27
    59c6:	a2 5b       	subi	r26, 0xB2	; 178
    59c8:	b7 4f       	sbci	r27, 0xF7	; 247
    59ca:	11 96       	adiw	r26, 0x01	; 1
    59cc:	3c 93       	st	X, r19
    59ce:	2e 93       	st	-X, r18
    59d0:	01 96       	adiw	r24, 0x01	; 1
    59d2:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    59d4:	88 30       	cpi	r24, 0x08	; 8
    59d6:	91 05       	cpc	r25, r1
    59d8:	81 f7       	brne	.-32     	; 0x59ba <init+0x182>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    59da:	6f ef       	ldi	r22, 0xFF	; 255
    59dc:	8e e4       	ldi	r24, 0x4E	; 78
    59de:	98 e0       	ldi	r25, 0x08	; 8
    59e0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <output_servo_ppm_asm>
    59e4:	2f e7       	ldi	r18, 0x7F	; 127
    59e6:	88 e3       	ldi	r24, 0x38	; 56
    59e8:	91 e0       	ldi	r25, 0x01	; 1
    59ea:	21 50       	subi	r18, 0x01	; 1
    59ec:	80 40       	sbci	r24, 0x00	; 0
    59ee:	90 40       	sbci	r25, 0x00	; 0
    59f0:	e1 f7       	brne	.-8      	; 0x59ea <init+0x1b2>
    59f2:	00 c0       	rjmp	.+0      	; 0x59f4 <init+0x1bc>
    59f4:	00 00       	nop
    59f6:	f1 cf       	rjmp	.-30     	; 0x59da <init+0x1a2>
    59f8:	2f e7       	ldi	r18, 0x7F	; 127
    59fa:	8f e4       	ldi	r24, 0x4F	; 79
    59fc:	92 e1       	ldi	r25, 0x12	; 18
    59fe:	21 50       	subi	r18, 0x01	; 1
    5a00:	80 40       	sbci	r24, 0x00	; 0
    5a02:	90 40       	sbci	r25, 0x00	; 0
    5a04:	e1 f7       	brne	.-8      	; 0x59fe <init+0x1c6>
    5a06:	00 c0       	rjmp	.+0      	; 0x5a08 <init+0x1d0>
    5a08:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    5a0a:	93 b1       	in	r25, 0x03	; 3
    5a0c:	90 7f       	andi	r25, 0xF0	; 240
    5a0e:	90 39       	cpi	r25, 0x90	; 144
    5a10:	51 f5       	brne	.+84     	; 0x5a66 <init+0x22e>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5a12:	80 ec       	ldi	r24, 0xC0	; 192
    5a14:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
		clear_buffer(buffer);
    5a18:	80 e0       	ldi	r24, 0x00	; 0
    5a1a:	91 e0       	ldi	r25, 0x01	; 1
    5a1c:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    5a20:	29 e1       	ldi	r18, 0x19	; 25
    5a22:	30 e0       	ldi	r19, 0x00	; 0
    5a24:	48 e2       	ldi	r20, 0x28	; 40
    5a26:	50 e0       	ldi	r21, 0x00	; 0
    5a28:	61 e7       	ldi	r22, 0x71	; 113
    5a2a:	71 e0       	ldi	r23, 0x01	; 1
    5a2c:	86 e0       	ldi	r24, 0x06	; 6
    5a2e:	91 e0       	ldi	r25, 0x01	; 1
    5a30:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		write_buffer(buffer);
    5a34:	80 e0       	ldi	r24, 0x00	; 0
    5a36:	91 e0       	ldi	r25, 0x01	; 1
    5a38:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
		clear_buffer(buffer);
    5a3c:	80 e0       	ldi	r24, 0x00	; 0
    5a3e:	91 e0       	ldi	r25, 0x01	; 1
    5a40:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    5a44:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    5a48:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    5a4c:	80 91 4a 06 	lds	r24, 0x064A
    5a50:	0e 94 18 23 	call	0x4630	; 0x4630 <st7565_set_brightness>
    5a54:	2f e7       	ldi	r18, 0x7F	; 127
    5a56:	84 e8       	ldi	r24, 0x84	; 132
    5a58:	9e e1       	ldi	r25, 0x1E	; 30
    5a5a:	21 50       	subi	r18, 0x01	; 1
    5a5c:	80 40       	sbci	r24, 0x00	; 0
    5a5e:	90 40       	sbci	r25, 0x00	; 0
    5a60:	e1 f7       	brne	.-8      	; 0x5a5a <init+0x222>
    5a62:	00 c0       	rjmp	.+0      	; 0x5a64 <init+0x22c>
    5a64:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    5a66:	cc 23       	and	r28, r28
    5a68:	21 f1       	breq	.+72     	; 0x5ab2 <init+0x27a>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5a6a:	80 ec       	ldi	r24, 0xC0	; 192
    5a6c:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
		clear_buffer(buffer);
    5a70:	80 e0       	ldi	r24, 0x00	; 0
    5a72:	91 e0       	ldi	r25, 0x01	; 1
    5a74:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    5a78:	2d e0       	ldi	r18, 0x0D	; 13
    5a7a:	30 e0       	ldi	r19, 0x00	; 0
    5a7c:	4e e1       	ldi	r20, 0x1E	; 30
    5a7e:	50 e0       	ldi	r21, 0x00	; 0
    5a80:	61 e7       	ldi	r22, 0x71	; 113
    5a82:	71 e0       	ldi	r23, 0x01	; 1
    5a84:	83 e0       	ldi	r24, 0x03	; 3
    5a86:	91 e0       	ldi	r25, 0x01	; 1
    5a88:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    5a8c:	25 e2       	ldi	r18, 0x25	; 37
    5a8e:	30 e0       	ldi	r19, 0x00	; 0
    5a90:	41 e2       	ldi	r20, 0x21	; 33
    5a92:	50 e0       	ldi	r21, 0x00	; 0
    5a94:	61 e7       	ldi	r22, 0x71	; 113
    5a96:	71 e0       	ldi	r23, 0x01	; 1
    5a98:	84 e0       	ldi	r24, 0x04	; 4
    5a9a:	91 e0       	ldi	r25, 0x01	; 1
    5a9c:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		write_buffer(buffer);
    5aa0:	80 e0       	ldi	r24, 0x00	; 0
    5aa2:	91 e0       	ldi	r25, 0x01	; 1
    5aa4:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
		clear_buffer(buffer);		
    5aa8:	80 e0       	ldi	r24, 0x00	; 0
    5aaa:	91 e0       	ldi	r25, 0x01	; 1
    5aac:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
    5ab0:	04 c0       	rjmp	.+8      	; 0x5aba <init+0x282>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    5ab2:	80 e0       	ldi	r24, 0x00	; 0
    5ab4:	91 e0       	ldi	r25, 0x01	; 1
    5ab6:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
    5aba:	2f ef       	ldi	r18, 0xFF	; 255
    5abc:	88 e0       	ldi	r24, 0x08	; 8
    5abe:	9d e3       	ldi	r25, 0x3D	; 61
    5ac0:	21 50       	subi	r18, 0x01	; 1
    5ac2:	80 40       	sbci	r24, 0x00	; 0
    5ac4:	90 40       	sbci	r25, 0x00	; 0
    5ac6:	e1 f7       	brne	.-8      	; 0x5ac0 <init+0x288>
    5ac8:	00 c0       	rjmp	.+0      	; 0x5aca <init+0x292>
    5aca:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    5acc:	80 e0       	ldi	r24, 0x00	; 0
    5ace:	91 e0       	ldi	r25, 0x01	; 1
    5ad0:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
	write_buffer(buffer);
    5ad4:	80 e0       	ldi	r24, 0x00	; 0
    5ad6:	91 e0       	ldi	r25, 0x01	; 1
    5ad8:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    5adc:	0e 94 21 23 	call	0x4642	; 0x4642 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    5ae0:	0e 94 51 49 	call	0x92a2	; 0x92a2 <i2c_init>
	init_i2c_gyros();
    5ae4:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <init_i2c_gyros>
	init_i2c_accs();
    5ae8:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    5aec:	80 e0       	ldi	r24, 0x00	; 0
    5aee:	91 e0       	ldi	r25, 0x01	; 1
    5af0:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5af4:	80 ec       	ldi	r24, 0xC0	; 192
    5af6:	0e 94 12 23 	call	0x4624	; 0x4624 <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    5afa:	29 e1       	ldi	r18, 0x19	; 25
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	42 e1       	ldi	r20, 0x12	; 18
    5b00:	50 e0       	ldi	r21, 0x00	; 0
    5b02:	61 e7       	ldi	r22, 0x71	; 113
    5b04:	71 e0       	ldi	r23, 0x01	; 1
    5b06:	87 e0       	ldi	r24, 0x07	; 7
    5b08:	91 e0       	ldi	r25, 0x01	; 1
    5b0a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
	write_buffer(buffer);	
    5b0e:	80 e0       	ldi	r24, 0x00	; 0
    5b10:	91 e0       	ldi	r25, 0x01	; 1
    5b12:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
	clear_buffer(buffer);
    5b16:	80 e0       	ldi	r24, 0x00	; 0
    5b18:	91 e0       	ldi	r25, 0x01	; 1
    5b1a:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    5b1e:	0e 94 84 11 	call	0x2308	; 0x2308 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    5b22:	0e 94 e7 31 	call	0x63ce	; 0x63ce <init_int>
	init_uart();							// Initialise UART
    5b26:	0e 94 36 4a 	call	0x946c	; 0x946c <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    5b2a:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <CalibrateGyrosSlow>
    5b2e:	81 11       	cpse	r24, r1
    5b30:	28 c0       	rjmp	.+80     	; 0x5b82 <init+0x34a>
	{
		clear_buffer(buffer);
    5b32:	80 e0       	ldi	r24, 0x00	; 0
    5b34:	91 e0       	ldi	r25, 0x01	; 1
    5b36:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    5b3a:	29 e1       	ldi	r18, 0x19	; 25
    5b3c:	30 e0       	ldi	r19, 0x00	; 0
    5b3e:	49 e1       	ldi	r20, 0x19	; 25
    5b40:	50 e0       	ldi	r21, 0x00	; 0
    5b42:	61 e7       	ldi	r22, 0x71	; 113
    5b44:	71 e0       	ldi	r23, 0x01	; 1
    5b46:	8d e3       	ldi	r24, 0x3D	; 61
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		write_buffer(buffer);
    5b4e:	80 e0       	ldi	r24, 0x00	; 0
    5b50:	91 e0       	ldi	r25, 0x01	; 1
    5b52:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
    5b56:	2f ef       	ldi	r18, 0xFF	; 255
    5b58:	88 e0       	ldi	r24, 0x08	; 8
    5b5a:	9d e3       	ldi	r25, 0x3D	; 61
    5b5c:	21 50       	subi	r18, 0x01	; 1
    5b5e:	80 40       	sbci	r24, 0x00	; 0
    5b60:	90 40       	sbci	r25, 0x00	; 0
    5b62:	e1 f7       	brne	.-8      	; 0x5b5c <init+0x324>
    5b64:	00 c0       	rjmp	.+0      	; 0x5b66 <init+0x32e>
    5b66:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    5b68:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    5b6a:	28 e0       	ldi	r18, 0x08	; 8
    5b6c:	88 e1       	ldi	r24, 0x18	; 24
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	0f b6       	in	r0, 0x3f	; 63
    5b72:	f8 94       	cli
    5b74:	a8 95       	wdr
    5b76:	80 93 60 00 	sts	0x0060, r24
    5b7a:	0f be       	out	0x3f, r0	; 63
    5b7c:	20 93 60 00 	sts	0x0060, r18
    5b80:	ff cf       	rjmp	.-2      	; 0x5b80 <init+0x348>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    5b82:	0e 94 a1 4a 	call	0x9542	; 0x9542 <GetVbat>
    5b86:	90 93 2f 05 	sts	0x052F, r25
    5b8a:	80 93 2e 05 	sts	0x052E, r24
	UpdateLimits();							// Update travel and trigger limits
    5b8e:	0e 94 c3 3a 	call	0x7586	; 0x7586 <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    5b92:	80 91 4b 06 	lds	r24, 0x064B
    5b96:	81 30       	cpi	r24, 0x01	; 1
    5b98:	29 f4       	brne	.+10     	; 0x5ba4 <init+0x36c>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    5b9a:	80 91 20 05 	lds	r24, 0x0520
    5b9e:	84 60       	ori	r24, 0x04	; 4
    5ba0:	80 93 20 05 	sts	0x0520, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    5ba4:	80 91 db 07 	lds	r24, 0x07DB
    5ba8:	88 23       	and	r24, r24
    5baa:	69 f0       	breq	.+26     	; 0x5bc6 <init+0x38e>
	{
		RxGetChannels();
    5bac:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    5bb0:	80 91 3a 08 	lds	r24, 0x083A
    5bb4:	90 91 3b 08 	lds	r25, 0x083B
    5bb8:	c3 97       	sbiw	r24, 0x33	; 51
    5bba:	2c f0       	brlt	.+10     	; 0x5bc6 <init+0x38e>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    5bbc:	80 91 20 05 	lds	r24, 0x0520
    5bc0:	81 60       	ori	r24, 0x01	; 1
    5bc2:	80 93 20 05 	sts	0x0520, r24
		}
	}

	// Reset IMU
	reset_IMU();
    5bc6:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    5bca:	29 9a       	sbi	0x05, 1	; 5
    5bcc:	2f e9       	ldi	r18, 0x9F	; 159
    5bce:	86 e8       	ldi	r24, 0x86	; 134
    5bd0:	91 e0       	ldi	r25, 0x01	; 1
    5bd2:	21 50       	subi	r18, 0x01	; 1
    5bd4:	80 40       	sbci	r24, 0x00	; 0
    5bd6:	90 40       	sbci	r25, 0x00	; 0
    5bd8:	e1 f7       	brne	.-8      	; 0x5bd2 <init+0x39a>
    5bda:	00 c0       	rjmp	.+0      	; 0x5bdc <init+0x3a4>
    5bdc:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    5bde:	29 98       	cbi	0x05, 1	; 5

} // init()
    5be0:	cf 91       	pop	r28
    5be2:	08 95       	ret

00005be4 <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    5be4:	1f 92       	push	r1
    5be6:	0f 92       	push	r0
    5be8:	0f b6       	in	r0, 0x3f	; 63
    5bea:	0f 92       	push	r0
    5bec:	11 24       	eor	r1, r1
    5bee:	8f 93       	push	r24
    5bf0:	9f 93       	push	r25
	TMR0_counter++;
    5bf2:	80 91 de 07 	lds	r24, 0x07DE
    5bf6:	90 91 df 07 	lds	r25, 0x07DF
    5bfa:	01 96       	adiw	r24, 0x01	; 1
    5bfc:	90 93 df 07 	sts	0x07DF, r25
    5c00:	80 93 de 07 	sts	0x07DE, r24
}
    5c04:	9f 91       	pop	r25
    5c06:	8f 91       	pop	r24
    5c08:	0f 90       	pop	r0
    5c0a:	0f be       	out	0x3f, r0	; 63
    5c0c:	0f 90       	pop	r0
    5c0e:	1f 90       	pop	r1
    5c10:	18 95       	reti

00005c12 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    5c12:	1f 92       	push	r1
    5c14:	0f 92       	push	r0
    5c16:	0f b6       	in	r0, 0x3f	; 63
    5c18:	0f 92       	push	r0
    5c1a:	11 24       	eor	r1, r1
    5c1c:	2f 93       	push	r18
    5c1e:	3f 93       	push	r19
    5c20:	8f 93       	push	r24
    5c22:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    5c24:	80 91 f5 07 	lds	r24, 0x07F5
    5c28:	88 23       	and	r24, r24
    5c2a:	19 f0       	breq	.+6      	; 0x5c32 <__vector_2+0x20>
    5c2c:	81 e0       	ldi	r24, 0x01	; 1
    5c2e:	80 93 f6 07 	sts	0x07F6, r24

	if (RX_ROLL)	// Rising
    5c32:	4b 9b       	sbis	0x09, 3	; 9
    5c34:	09 c0       	rjmp	.+18     	; 0x5c48 <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    5c36:	80 91 84 00 	lds	r24, 0x0084
    5c3a:	90 91 85 00 	lds	r25, 0x0085
    5c3e:	90 93 e3 07 	sts	0x07E3, r25
    5c42:	80 93 e2 07 	sts	0x07E2, r24
    5c46:	14 c0       	rjmp	.+40     	; 0x5c70 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    5c48:	80 91 84 00 	lds	r24, 0x0084
    5c4c:	90 91 85 00 	lds	r25, 0x0085
    5c50:	20 91 e2 07 	lds	r18, 0x07E2
    5c54:	30 91 e3 07 	lds	r19, 0x07E3
    5c58:	82 1b       	sub	r24, r18
    5c5a:	93 0b       	sbc	r25, r19
    5c5c:	90 93 ce 07 	sts	0x07CE, r25
    5c60:	80 93 cd 07 	sts	0x07CD, r24
		if (Config.PWM_Sync == AILERON) 
    5c64:	80 91 ec 05 	lds	r24, 0x05EC
    5c68:	81 30       	cpi	r24, 0x01	; 1
    5c6a:	11 f4       	brne	.+4      	; 0x5c70 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5c6c:	80 93 db 07 	sts	0x07DB, r24
		}
	}
}
    5c70:	9f 91       	pop	r25
    5c72:	8f 91       	pop	r24
    5c74:	3f 91       	pop	r19
    5c76:	2f 91       	pop	r18
    5c78:	0f 90       	pop	r0
    5c7a:	0f be       	out	0x3f, r0	; 63
    5c7c:	0f 90       	pop	r0
    5c7e:	1f 90       	pop	r1
    5c80:	18 95       	reti

00005c82 <__vector_1>:

ISR(INT0_vect)
{
    5c82:	1f 92       	push	r1
    5c84:	0f 92       	push	r0
    5c86:	0f b6       	in	r0, 0x3f	; 63
    5c88:	0f 92       	push	r0
    5c8a:	11 24       	eor	r1, r1
    5c8c:	2f 93       	push	r18
    5c8e:	3f 93       	push	r19
    5c90:	8f 93       	push	r24
    5c92:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5c94:	80 91 f5 07 	lds	r24, 0x07F5
    5c98:	88 23       	and	r24, r24
    5c9a:	19 f0       	breq	.+6      	; 0x5ca2 <__vector_1+0x20>
    5c9c:	81 e0       	ldi	r24, 0x01	; 1
    5c9e:	80 93 f6 07 	sts	0x07F6, r24

	if (RX_PITCH)	// Rising 
    5ca2:	4a 9b       	sbis	0x09, 2	; 9
    5ca4:	09 c0       	rjmp	.+18     	; 0x5cb8 <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    5ca6:	80 91 84 00 	lds	r24, 0x0084
    5caa:	90 91 85 00 	lds	r25, 0x0085
    5cae:	90 93 e5 07 	sts	0x07E5, r25
    5cb2:	80 93 e4 07 	sts	0x07E4, r24
    5cb6:	15 c0       	rjmp	.+42     	; 0x5ce2 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    5cb8:	80 91 84 00 	lds	r24, 0x0084
    5cbc:	90 91 85 00 	lds	r25, 0x0085
    5cc0:	20 91 e4 07 	lds	r18, 0x07E4
    5cc4:	30 91 e5 07 	lds	r19, 0x07E5
    5cc8:	82 1b       	sub	r24, r18
    5cca:	93 0b       	sbc	r25, r19
    5ccc:	90 93 d0 07 	sts	0x07D0, r25
    5cd0:	80 93 cf 07 	sts	0x07CF, r24
		if (Config.PWM_Sync == ELEVATOR) 
    5cd4:	80 91 ec 05 	lds	r24, 0x05EC
    5cd8:	82 30       	cpi	r24, 0x02	; 2
    5cda:	19 f4       	brne	.+6      	; 0x5ce2 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5cdc:	81 e0       	ldi	r24, 0x01	; 1
    5cde:	80 93 db 07 	sts	0x07DB, r24
		}
	}
}
    5ce2:	9f 91       	pop	r25
    5ce4:	8f 91       	pop	r24
    5ce6:	3f 91       	pop	r19
    5ce8:	2f 91       	pop	r18
    5cea:	0f 90       	pop	r0
    5cec:	0f be       	out	0x3f, r0	; 63
    5cee:	0f 90       	pop	r0
    5cf0:	1f 90       	pop	r1
    5cf2:	18 95       	reti

00005cf4 <__vector_7>:

ISR(PCINT3_vect)
{
    5cf4:	1f 92       	push	r1
    5cf6:	0f 92       	push	r0
    5cf8:	0f b6       	in	r0, 0x3f	; 63
    5cfa:	0f 92       	push	r0
    5cfc:	11 24       	eor	r1, r1
    5cfe:	2f 93       	push	r18
    5d00:	3f 93       	push	r19
    5d02:	8f 93       	push	r24
    5d04:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5d06:	80 91 f5 07 	lds	r24, 0x07F5
    5d0a:	88 23       	and	r24, r24
    5d0c:	19 f0       	breq	.+6      	; 0x5d14 <__vector_7+0x20>
    5d0e:	81 e0       	ldi	r24, 0x01	; 1
    5d10:	80 93 f6 07 	sts	0x07F6, r24
		
	if (RX_COLL)	// Rising
    5d14:	48 9b       	sbis	0x09, 0	; 9
    5d16:	09 c0       	rjmp	.+18     	; 0x5d2a <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    5d18:	80 91 84 00 	lds	r24, 0x0084
    5d1c:	90 91 85 00 	lds	r25, 0x0085
    5d20:	90 93 e1 07 	sts	0x07E1, r25
    5d24:	80 93 e0 07 	sts	0x07E0, r24
    5d28:	15 c0       	rjmp	.+42     	; 0x5d54 <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    5d2a:	80 91 84 00 	lds	r24, 0x0084
    5d2e:	90 91 85 00 	lds	r25, 0x0085
    5d32:	20 91 e0 07 	lds	r18, 0x07E0
    5d36:	30 91 e1 07 	lds	r19, 0x07E1
    5d3a:	82 1b       	sub	r24, r18
    5d3c:	93 0b       	sbc	r25, r19
    5d3e:	90 93 cc 07 	sts	0x07CC, r25
    5d42:	80 93 cb 07 	sts	0x07CB, r24
		if (Config.PWM_Sync == THROTTLE) 
    5d46:	80 91 ec 05 	lds	r24, 0x05EC
    5d4a:	81 11       	cpse	r24, r1
    5d4c:	03 c0       	rjmp	.+6      	; 0x5d54 <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5d4e:	81 e0       	ldi	r24, 0x01	; 1
    5d50:	80 93 db 07 	sts	0x07DB, r24
		}
	}
}
    5d54:	9f 91       	pop	r25
    5d56:	8f 91       	pop	r24
    5d58:	3f 91       	pop	r19
    5d5a:	2f 91       	pop	r18
    5d5c:	0f 90       	pop	r0
    5d5e:	0f be       	out	0x3f, r0	; 63
    5d60:	0f 90       	pop	r0
    5d62:	1f 90       	pop	r1
    5d64:	18 95       	reti

00005d66 <__vector_5>:


ISR(PCINT1_vect)
{
    5d66:	1f 92       	push	r1
    5d68:	0f 92       	push	r0
    5d6a:	0f b6       	in	r0, 0x3f	; 63
    5d6c:	0f 92       	push	r0
    5d6e:	11 24       	eor	r1, r1
    5d70:	2f 93       	push	r18
    5d72:	3f 93       	push	r19
    5d74:	8f 93       	push	r24
    5d76:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    5d78:	80 91 f5 07 	lds	r24, 0x07F5
    5d7c:	88 23       	and	r24, r24
    5d7e:	19 f0       	breq	.+6      	; 0x5d86 <__vector_5+0x20>
    5d80:	81 e0       	ldi	r24, 0x01	; 1
    5d82:	80 93 f6 07 	sts	0x07F6, r24

	if (RX_AUX)	// Rising
    5d86:	18 9b       	sbis	0x03, 0	; 3
    5d88:	09 c0       	rjmp	.+18     	; 0x5d9c <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    5d8a:	80 91 84 00 	lds	r24, 0x0084
    5d8e:	90 91 85 00 	lds	r25, 0x0085
    5d92:	90 93 e9 07 	sts	0x07E9, r25
    5d96:	80 93 e8 07 	sts	0x07E8, r24
    5d9a:	15 c0       	rjmp	.+42     	; 0x5dc6 <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    5d9c:	80 91 84 00 	lds	r24, 0x0084
    5da0:	90 91 85 00 	lds	r25, 0x0085
    5da4:	20 91 e8 07 	lds	r18, 0x07E8
    5da8:	30 91 e9 07 	lds	r19, 0x07E9
    5dac:	82 1b       	sub	r24, r18
    5dae:	93 0b       	sbc	r25, r19
    5db0:	90 93 d4 07 	sts	0x07D4, r25
    5db4:	80 93 d3 07 	sts	0x07D3, r24
		if (Config.PWM_Sync == GEAR) 
    5db8:	80 91 ec 05 	lds	r24, 0x05EC
    5dbc:	84 30       	cpi	r24, 0x04	; 4
    5dbe:	19 f4       	brne	.+6      	; 0x5dc6 <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5dc0:	81 e0       	ldi	r24, 0x01	; 1
    5dc2:	80 93 db 07 	sts	0x07DB, r24
		}
	}
}
    5dc6:	9f 91       	pop	r25
    5dc8:	8f 91       	pop	r24
    5dca:	3f 91       	pop	r19
    5dcc:	2f 91       	pop	r18
    5dce:	0f 90       	pop	r0
    5dd0:	0f be       	out	0x3f, r0	; 63
    5dd2:	0f 90       	pop	r0
    5dd4:	1f 90       	pop	r1
    5dd6:	18 95       	reti

00005dd8 <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    5dd8:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    5dda:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    5ddc:	80 91 84 00 	lds	r24, 0x0084
    5de0:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    5de4:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    5de6:	08 95       	ret

00005de8 <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    5de8:	1f 92       	push	r1
    5dea:	0f 92       	push	r0
    5dec:	0f b6       	in	r0, 0x3f	; 63
    5dee:	0f 92       	push	r0
    5df0:	11 24       	eor	r1, r1
    5df2:	2f 93       	push	r18
    5df4:	3f 93       	push	r19
    5df6:	4f 93       	push	r20
    5df8:	5f 93       	push	r21
    5dfa:	6f 93       	push	r22
    5dfc:	7f 93       	push	r23
    5dfe:	8f 93       	push	r24
    5e00:	9f 93       	push	r25
    5e02:	af 93       	push	r26
    5e04:	bf 93       	push	r27
    5e06:	ef 93       	push	r30
    5e08:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    5e0a:	80 91 f5 07 	lds	r24, 0x07F5
    5e0e:	88 23       	and	r24, r24
    5e10:	19 f0       	breq	.+6      	; 0x5e18 <__vector_3+0x30>
    5e12:	81 e0       	ldi	r24, 0x01	; 1
    5e14:	80 93 f6 07 	sts	0x07F6, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    5e18:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    5e1c:	20 91 ea 05 	lds	r18, 0x05EA
    5e20:	22 23       	and	r18, r18
    5e22:	d1 f0       	breq	.+52     	; 0x5e58 <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    5e24:	1a 9b       	sbis	0x03, 2	; 3
    5e26:	05 c0       	rjmp	.+10     	; 0x5e32 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    5e28:	90 93 e7 07 	sts	0x07E7, r25
    5e2c:	80 93 e6 07 	sts	0x07E6, r24
    5e30:	86 c0       	rjmp	.+268    	; 0x5f3e <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    5e32:	20 91 e6 07 	lds	r18, 0x07E6
    5e36:	30 91 e7 07 	lds	r19, 0x07E7
    5e3a:	82 1b       	sub	r24, r18
    5e3c:	93 0b       	sbc	r25, r19
    5e3e:	90 93 d2 07 	sts	0x07D2, r25
    5e42:	80 93 d1 07 	sts	0x07D1, r24
			if (Config.PWM_Sync == RUDDER) 
    5e46:	80 91 ec 05 	lds	r24, 0x05EC
    5e4a:	83 30       	cpi	r24, 0x03	; 3
    5e4c:	09 f0       	breq	.+2      	; 0x5e50 <__vector_3+0x68>
    5e4e:	77 c0       	rjmp	.+238    	; 0x5f3e <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    5e50:	81 e0       	ldi	r24, 0x01	; 1
    5e52:	80 93 db 07 	sts	0x07DB, r24
    5e56:	73 c0       	rjmp	.+230    	; 0x5f3e <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    5e58:	1a 99       	sbic	0x03, 2	; 3
    5e5a:	71 c0       	rjmp	.+226    	; 0x5f3e <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    5e5c:	20 91 f3 07 	lds	r18, 0x07F3
    5e60:	30 91 f4 07 	lds	r19, 0x07F4
    5e64:	ac 01       	movw	r20, r24
    5e66:	42 1b       	sub	r20, r18
    5e68:	53 0b       	sbc	r21, r19
    5e6a:	9a 01       	movw	r18, r20
    5e6c:	2f 35       	cpi	r18, 0x5F	; 95
    5e6e:	3a 41       	sbci	r19, 0x1A	; 26
    5e70:	58 f4       	brcc	.+22     	; 0x5e88 <__vector_3+0xa0>
    5e72:	20 91 f3 07 	lds	r18, 0x07F3
    5e76:	30 91 f4 07 	lds	r19, 0x07F4
    5e7a:	ac 01       	movw	r20, r24
    5e7c:	42 1b       	sub	r20, r18
    5e7e:	53 0b       	sbc	r21, r19
    5e80:	9a 01       	movw	r18, r20
    5e82:	2e 3e       	cpi	r18, 0xEE	; 238
    5e84:	32 40       	sbci	r19, 0x02	; 2
    5e86:	10 f4       	brcc	.+4      	; 0x5e8c <__vector_3+0xa4>
		{
			ch_num = 0;
    5e88:	10 92 f2 07 	sts	0x07F2, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    5e8c:	90 93 f4 07 	sts	0x07F4, r25
    5e90:	80 93 f3 07 	sts	0x07F3, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    5e94:	e0 91 f2 07 	lds	r30, 0x07F2
    5e98:	f0 e0       	ldi	r31, 0x00	; 0
    5e9a:	ef 53       	subi	r30, 0x3F	; 63
    5e9c:	fa 4f       	sbci	r31, 0xFA	; 250
    5e9e:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    5ea0:	20 91 f2 07 	lds	r18, 0x07F2
    5ea4:	22 23       	and	r18, r18
    5ea6:	39 f0       	breq	.+14     	; 0x5eb6 <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    5ea8:	a0 91 f2 07 	lds	r26, 0x07F2
    5eac:	b0 e0       	ldi	r27, 0x00	; 0
    5eae:	af 53       	subi	r26, 0x3F	; 63
    5eb0:	ba 4f       	sbci	r27, 0xFA	; 250
    5eb2:	2c 91       	ld	r18, X
    5eb4:	01 c0       	rjmp	.+2      	; 0x5eb8 <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    5eb6:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    5eb8:	30 91 f2 07 	lds	r19, 0x07F2
    5ebc:	38 30       	cpi	r19, 0x08	; 8
    5ebe:	38 f4       	brcc	.+14     	; 0x5ece <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    5ec0:	f0 e0       	ldi	r31, 0x00	; 0
    5ec2:	ee 0f       	add	r30, r30
    5ec4:	ff 1f       	adc	r31, r31
    5ec6:	e0 52       	subi	r30, 0x20	; 32
    5ec8:	f8 4f       	sbci	r31, 0xF8	; 248
    5eca:	91 83       	std	Z+1, r25	; 0x01
    5ecc:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    5ece:	30 91 f2 07 	lds	r19, 0x07F2
    5ed2:	33 23       	and	r19, r19
    5ed4:	99 f0       	breq	.+38     	; 0x5efc <__vector_3+0x114>
    5ed6:	30 91 f2 07 	lds	r19, 0x07F2
    5eda:	39 30       	cpi	r19, 0x09	; 9
    5edc:	78 f4       	brcc	.+30     	; 0x5efc <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    5ede:	30 e0       	ldi	r19, 0x00	; 0
    5ee0:	22 0f       	add	r18, r18
    5ee2:	33 1f       	adc	r19, r19
    5ee4:	f9 01       	movw	r30, r18
    5ee6:	e0 52       	subi	r30, 0x20	; 32
    5ee8:	f8 4f       	sbci	r31, 0xF8	; 248
    5eea:	40 81       	ld	r20, Z
    5eec:	51 81       	ldd	r21, Z+1	; 0x01
    5eee:	84 1b       	sub	r24, r20
    5ef0:	95 0b       	sbc	r25, r21
    5ef2:	f9 01       	movw	r30, r18
    5ef4:	e5 53       	subi	r30, 0x35	; 53
    5ef6:	f8 4f       	sbci	r31, 0xF8	; 248
    5ef8:	91 83       	std	Z+1, r25	; 0x01
    5efa:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    5efc:	80 91 f2 07 	lds	r24, 0x07F2
    5f00:	8f 5f       	subi	r24, 0xFF	; 255
    5f02:	80 93 f2 07 	sts	0x07F2, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    5f06:	90 91 f2 07 	lds	r25, 0x07F2
    5f0a:	80 91 dc 07 	lds	r24, 0x07DC
    5f0e:	89 17       	cp	r24, r25
    5f10:	28 f4       	brcc	.+10     	; 0x5f1c <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    5f12:	80 91 f2 07 	lds	r24, 0x07F2
    5f16:	80 93 dc 07 	sts	0x07DC, r24
    5f1a:	09 c0       	rjmp	.+18     	; 0x5f2e <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    5f1c:	90 91 f2 07 	lds	r25, 0x07F2
    5f20:	80 91 dc 07 	lds	r24, 0x07DC
    5f24:	98 13       	cpse	r25, r24
    5f26:	03 c0       	rjmp	.+6      	; 0x5f2e <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    5f28:	81 e0       	ldi	r24, 0x01	; 1
    5f2a:	80 93 db 07 	sts	0x07DB, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    5f2e:	80 91 19 05 	lds	r24, 0x0519
    5f32:	88 23       	and	r24, r24
    5f34:	21 f0       	breq	.+8      	; 0x5f3e <__vector_3+0x156>
		{
			max_chan = 0;
    5f36:	10 92 dc 07 	sts	0x07DC, r1
			Overdue = false;
    5f3a:	10 92 19 05 	sts	0x0519, r1
		}
	}
} // ISR(INT2_vect)
    5f3e:	ff 91       	pop	r31
    5f40:	ef 91       	pop	r30
    5f42:	bf 91       	pop	r27
    5f44:	af 91       	pop	r26
    5f46:	9f 91       	pop	r25
    5f48:	8f 91       	pop	r24
    5f4a:	7f 91       	pop	r23
    5f4c:	6f 91       	pop	r22
    5f4e:	5f 91       	pop	r21
    5f50:	4f 91       	pop	r20
    5f52:	3f 91       	pop	r19
    5f54:	2f 91       	pop	r18
    5f56:	0f 90       	pop	r0
    5f58:	0f be       	out	0x3f, r0	; 63
    5f5a:	0f 90       	pop	r0
    5f5c:	1f 90       	pop	r1
    5f5e:	18 95       	reti

00005f60 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    5f60:	1f 92       	push	r1
    5f62:	0f 92       	push	r0
    5f64:	0f b6       	in	r0, 0x3f	; 63
    5f66:	0f 92       	push	r0
    5f68:	11 24       	eor	r1, r1
    5f6a:	2f 93       	push	r18
    5f6c:	3f 93       	push	r19
    5f6e:	4f 93       	push	r20
    5f70:	5f 93       	push	r21
    5f72:	6f 93       	push	r22
    5f74:	7f 93       	push	r23
    5f76:	8f 93       	push	r24
    5f78:	9f 93       	push	r25
    5f7a:	af 93       	push	r26
    5f7c:	bf 93       	push	r27
    5f7e:	cf 93       	push	r28
    5f80:	ef 93       	push	r30
    5f82:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    5f84:	80 91 f5 07 	lds	r24, 0x07F5
    5f88:	88 23       	and	r24, r24
    5f8a:	19 f0       	breq	.+6      	; 0x5f92 <__vector_20+0x32>
    5f8c:	81 e0       	ldi	r24, 0x01	; 1
    5f8e:	80 93 f6 07 	sts	0x07F6, r24

	// Read byte first
	temp = UDR0;
    5f92:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    5f96:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <TIM16_ReadTCNT1>
	
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    5f9a:	40 91 f3 07 	lds	r20, 0x07F3
    5f9e:	50 91 f4 07 	lds	r21, 0x07F4
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    5fa2:	40 91 f3 07 	lds	r20, 0x07F3
    5fa6:	50 91 f4 07 	lds	r21, 0x07F4
    5faa:	9c 01       	movw	r18, r24
    5fac:	24 1b       	sub	r18, r20
    5fae:	35 0b       	sbc	r19, r21
    5fb0:	a9 01       	movw	r20, r18
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    5fb2:	45 3c       	cpi	r20, 0xC5	; 197
    5fb4:	39 e0       	ldi	r19, 0x09	; 9
    5fb6:	53 07       	cpc	r21, r19
    5fb8:	90 f0       	brcs	.+36     	; 0x5fde <__vector_20+0x7e>
	{
		// Reset variables
		rcindex = 0;
    5fba:	10 92 ca 07 	sts	0x07CA, r1
		bytecount = 0;
    5fbe:	10 92 dd 07 	sts	0x07DD, r1
		ch_num = 0;
    5fc2:	10 92 f2 07 	sts	0x07F2, r1
		checksum = 0;
    5fc6:	10 92 f8 07 	sts	0x07F8, r1
    5fca:	10 92 f7 07 	sts	0x07F7, r1
		chanmask16 = 0;
    5fce:	10 92 f1 07 	sts	0x07F1, r1
    5fd2:	10 92 f0 07 	sts	0x07F0, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    5fd6:	50 93 fa 07 	sts	0x07FA, r21
    5fda:	40 93 f9 07 	sts	0x07F9, r20
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    5fde:	90 93 f4 07 	sts	0x07F4, r25
    5fe2:	80 93 f3 07 	sts	0x07F3, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    5fe6:	80 91 ca 07 	lds	r24, 0x07CA
    5fea:	86 32       	cpi	r24, 0x26	; 38
    5fec:	50 f4       	brcc	.+20     	; 0x6002 <__vector_20+0xa2>
	{
		sBuffer[rcindex++] = temp;			
    5fee:	e0 91 ca 07 	lds	r30, 0x07CA
    5ff2:	81 e0       	ldi	r24, 0x01	; 1
    5ff4:	8e 0f       	add	r24, r30
    5ff6:	80 93 ca 07 	sts	0x07CA, r24
    5ffa:	f0 e0       	ldi	r31, 0x00	; 0
    5ffc:	ec 5b       	subi	r30, 0xBC	; 188
    5ffe:	fa 4f       	sbci	r31, 0xFA	; 250
    6000:	c0 83       	st	Z, r28
	//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
	//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
	//*
	//************************************************************

	if (Config.RxMode == XTREME)
    6002:	80 91 ea 05 	lds	r24, 0x05EA
    6006:	84 30       	cpi	r24, 0x04	; 4
    6008:	09 f0       	breq	.+2      	; 0x600c <__vector_20+0xac>
    600a:	b3 c0       	rjmp	.+358    	; 0x6172 <__vector_20+0x212>
	{
		// Look at flag byte to see if the data is meant for us
		if (bytecount == 0)
    600c:	80 91 dd 07 	lds	r24, 0x07DD
    6010:	81 11       	cpse	r24, r1
    6012:	0d c0       	rjmp	.+26     	; 0x602e <__vector_20+0xce>
		{
			// Check top 3 bits for channel bank
			// Trash checksum if not clear
			if (temp & 0xE0)
    6014:	8c 2f       	mov	r24, r28
    6016:	80 7e       	andi	r24, 0xE0	; 224
    6018:	51 f0       	breq	.+20     	; 0x602e <__vector_20+0xce>
			{
				checksum +=	0x55;
    601a:	80 91 f7 07 	lds	r24, 0x07F7
    601e:	90 91 f8 07 	lds	r25, 0x07F8
    6022:	8b 5a       	subi	r24, 0xAB	; 171
    6024:	9f 4f       	sbci	r25, 0xFF	; 255
    6026:	90 93 f8 07 	sts	0x07F8, r25
    602a:	80 93 f7 07 	sts	0x07F7, r24
			}
		}

		// Get MSB of mask byte
		if (bytecount == 2)
    602e:	80 91 dd 07 	lds	r24, 0x07DD
    6032:	2c 2f       	mov	r18, r28
    6034:	30 e0       	ldi	r19, 0x00	; 0
    6036:	82 30       	cpi	r24, 0x02	; 2
    6038:	51 f4       	brne	.+20     	; 0x604e <__vector_20+0xee>
		{
			chanmask16 = 0;
    603a:	10 92 f1 07 	sts	0x07F1, r1
    603e:	10 92 f0 07 	sts	0x07F0, r1
			chanmask16 = temp << 8;		// High byte of Mask
    6042:	92 2f       	mov	r25, r18
    6044:	88 27       	eor	r24, r24
    6046:	90 93 f1 07 	sts	0x07F1, r25
    604a:	80 93 f0 07 	sts	0x07F0, r24
		}

		// Combine with LSB of mask byte
		// Work out how many channels there are supposed to be
		if (bytecount == 3)
    604e:	80 91 dd 07 	lds	r24, 0x07DD
    6052:	83 30       	cpi	r24, 0x03	; 3
    6054:	b9 f0       	breq	.+46     	; 0x6084 <__vector_20+0x124>
				temp16 &= temp16 - 1;
			}
		}

		// Add up checksum up until final packet
		if (bytecount < ((ch_num << 1) + 4))
    6056:	80 91 f2 07 	lds	r24, 0x07F2
    605a:	40 91 dd 07 	lds	r20, 0x07DD
    605e:	90 e0       	ldi	r25, 0x00	; 0
    6060:	88 0f       	add	r24, r24
    6062:	99 1f       	adc	r25, r25
    6064:	03 96       	adiw	r24, 0x03	; 3
    6066:	50 e0       	ldi	r21, 0x00	; 0
    6068:	84 17       	cp	r24, r20
    606a:	95 07       	cpc	r25, r21
    606c:	44 f1       	brlt	.+80     	; 0x60be <__vector_20+0x15e>
		{
			checksum +=	temp;
    606e:	80 91 f7 07 	lds	r24, 0x07F7
    6072:	90 91 f8 07 	lds	r25, 0x07F8
    6076:	82 0f       	add	r24, r18
    6078:	93 1f       	adc	r25, r19
    607a:	90 93 f8 07 	sts	0x07F8, r25
    607e:	80 93 f7 07 	sts	0x07F7, r24
    6082:	7b c1       	rjmp	.+758    	; 0x637a <__vector_20+0x41a>

		// Combine with LSB of mask byte
		// Work out how many channels there are supposed to be
		if (bytecount == 3)
		{
			chanmask16 += (uint16_t)temp;	// Low byte of Mask
    6084:	80 91 f0 07 	lds	r24, 0x07F0
    6088:	90 91 f1 07 	lds	r25, 0x07F1
    608c:	82 0f       	add	r24, r18
    608e:	93 1f       	adc	r25, r19
    6090:	90 93 f1 07 	sts	0x07F1, r25
    6094:	80 93 f0 07 	sts	0x07F0, r24
			temp16 = chanmask16;			// Need to keep a copy od chanmask16
    6098:	80 91 f0 07 	lds	r24, 0x07F0
    609c:	90 91 f1 07 	lds	r25, 0x07F1

			// Count bits set (number of active channels)				 
			for (ch_num = 0; temp16; ch_num++)
    60a0:	10 92 f2 07 	sts	0x07F2, r1
    60a4:	00 97       	sbiw	r24, 0x00	; 0
    60a6:	b9 f2       	breq	.-82     	; 0x6056 <__vector_20+0xf6>
			{
				temp16 &= temp16 - 1;
    60a8:	ac 01       	movw	r20, r24
    60aa:	41 50       	subi	r20, 0x01	; 1
    60ac:	51 09       	sbc	r21, r1
    60ae:	84 23       	and	r24, r20
    60b0:	95 23       	and	r25, r21
		{
			chanmask16 += (uint16_t)temp;	// Low byte of Mask
			temp16 = chanmask16;			// Need to keep a copy od chanmask16

			// Count bits set (number of active channels)				 
			for (ch_num = 0; temp16; ch_num++)
    60b2:	40 91 f2 07 	lds	r20, 0x07F2
    60b6:	4f 5f       	subi	r20, 0xFF	; 255
    60b8:	40 93 f2 07 	sts	0x07F2, r20
    60bc:	f3 cf       	rjmp	.-26     	; 0x60a4 <__vector_20+0x144>
	
		// Process data when all packets received
		else
		{
			// Check checksum 
			checksum &= 0xff;
    60be:	80 91 f7 07 	lds	r24, 0x07F7
    60c2:	90 91 f8 07 	lds	r25, 0x07F8
    60c6:	99 27       	eor	r25, r25
    60c8:	90 93 f8 07 	sts	0x07F8, r25
    60cc:	80 93 f7 07 	sts	0x07F7, r24

			// Ignore packet if checksum wrong
			if (checksum != temp) // temp holds the transmitted checksum byte
    60d0:	80 91 f7 07 	lds	r24, 0x07F7
    60d4:	90 91 f8 07 	lds	r25, 0x07F8
    60d8:	82 17       	cp	r24, r18
    60da:	93 07       	cpc	r25, r19
    60dc:	49 f0       	breq	.+18     	; 0x60f0 <__vector_20+0x190>
			{
				Interrupted = false;
    60de:	10 92 db 07 	sts	0x07DB, r1
				ch_num = 0;
    60e2:	10 92 f2 07 	sts	0x07F2, r1
				checksum = 0;
    60e6:	10 92 f8 07 	sts	0x07F8, r1
    60ea:	10 92 f7 07 	sts	0x07F7, r1
    60ee:	45 c1       	rjmp	.+650    	; 0x637a <__vector_20+0x41a>
			}
			else
			{
				// RC sync established
				Interrupted = true;	
    60f0:	81 e0       	ldi	r24, 0x01	; 1
    60f2:	80 93 db 07 	sts	0x07DB, r24
    60f6:	80 e0       	ldi	r24, 0x00	; 0
    60f8:	90 e0       	ldi	r25, 0x00	; 0

				// Set start of channel data per format
				sindex = 4; // Channel data from byte 5
    60fa:	a4 e0       	ldi	r26, 0x04	; 4
				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
    60fc:	61 e0       	ldi	r22, 0x01	; 1
    60fe:	70 e0       	ldi	r23, 0x00	; 0
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    6100:	ba e0       	ldi	r27, 0x0A	; 10
				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
    6102:	40 91 f0 07 	lds	r20, 0x07F0
    6106:	50 91 f1 07 	lds	r21, 0x07F1
    610a:	9b 01       	movw	r18, r22
    610c:	08 2e       	mov	r0, r24
    610e:	02 c0       	rjmp	.+4      	; 0x6114 <__vector_20+0x1b4>
    6110:	22 0f       	add	r18, r18
    6112:	33 1f       	adc	r19, r19
    6114:	0a 94       	dec	r0
    6116:	e2 f7       	brpl	.-8      	; 0x6110 <__vector_20+0x1b0>
    6118:	24 23       	and	r18, r20
    611a:	35 23       	and	r19, r21
    611c:	23 2b       	or	r18, r19
    611e:	21 f1       	breq	.+72     	; 0x6168 <__vector_20+0x208>
					{
						// Reconstruct word
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    6120:	ea 2f       	mov	r30, r26
    6122:	f0 e0       	ldi	r31, 0x00	; 0
    6124:	ec 5b       	subi	r30, 0xBC	; 188
    6126:	fa 4f       	sbci	r31, 0xFA	; 250
    6128:	40 81       	ld	r20, Z
    612a:	21 81       	ldd	r18, Z+1	; 0x01

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
    612c:	88 30       	cpi	r24, 0x08	; 8
    612e:	c8 f4       	brcc	.+50     	; 0x6162 <__vector_20+0x202>
    6130:	fc 01       	movw	r30, r24
    6132:	ef 53       	subi	r30, 0x3F	; 63
    6134:	fa 4f       	sbci	r31, 0xFA	; 250
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    6136:	e1 81       	ldd	r30, Z+1	; 0x01
    6138:	f0 e0       	ldi	r31, 0x00	; 0
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
					{
						// Reconstruct word
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    613a:	50 e0       	ldi	r21, 0x00	; 0
    613c:	54 2f       	mov	r21, r20
    613e:	44 27       	eor	r20, r20
    6140:	42 0f       	add	r20, r18
    6142:	51 1d       	adc	r21, r1

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    6144:	b4 9f       	mul	r27, r20
    6146:	90 01       	movw	r18, r0
    6148:	b5 9f       	mul	r27, r21
    614a:	30 0d       	add	r19, r0
    614c:	11 24       	eor	r1, r1
    614e:	36 95       	lsr	r19
    6150:	27 95       	ror	r18
    6152:	36 95       	lsr	r19
    6154:	27 95       	ror	r18
    6156:	ee 0f       	add	r30, r30
    6158:	ff 1f       	adc	r31, r31
    615a:	e5 53       	subi	r30, 0x35	; 53
    615c:	f8 4f       	sbci	r31, 0xF8	; 248
    615e:	31 83       	std	Z+1, r19	; 0x01
    6160:	20 83       	st	Z, r18
						} 		

						// Within the bounds of the buffer
						if (sindex < SBUFFER_SIZE)
    6162:	a6 32       	cpi	r26, 0x26	; 38
    6164:	08 f4       	brcc	.+2      	; 0x6168 <__vector_20+0x208>
						{
							sindex += 2;
    6166:	ae 5f       	subi	r26, 0xFE	; 254
    6168:	01 96       	adiw	r24, 0x01	; 1
				// Set start of channel data per format
				sindex = 4; // Channel data from byte 5

				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
    616a:	80 31       	cpi	r24, 0x10	; 16
    616c:	91 05       	cpc	r25, r1
    616e:	49 f6       	brne	.-110    	; 0x6102 <__vector_20+0x1a2>
    6170:	04 c1       	rjmp	.+520    	; 0x637a <__vector_20+0x41a>
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    6172:	82 30       	cpi	r24, 0x02	; 2
    6174:	09 f0       	breq	.+2      	; 0x6178 <__vector_20+0x218>
    6176:	90 c0       	rjmp	.+288    	; 0x6298 <__vector_20+0x338>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    6178:	80 91 dd 07 	lds	r24, 0x07DD
    617c:	88 31       	cpi	r24, 0x18	; 24
    617e:	09 f0       	breq	.+2      	; 0x6182 <__vector_20+0x222>
    6180:	fc c0       	rjmp	.+504    	; 0x637a <__vector_20+0x41a>
    6182:	cc 23       	and	r28, r28
    6184:	59 f0       	breq	.+22     	; 0x619c <__vector_20+0x23c>
    6186:	81 e0       	ldi	r24, 0x01	; 1
    6188:	cf 3c       	cpi	r28, 0xCF	; 207
    618a:	08 f4       	brcc	.+2      	; 0x618e <__vector_20+0x22e>
    618c:	80 e0       	ldi	r24, 0x00	; 0
    618e:	91 e3       	ldi	r25, 0x31	; 49
    6190:	89 9f       	mul	r24, r25
    6192:	c0 0d       	add	r28, r0
    6194:	11 24       	eor	r1, r1
    6196:	c4 30       	cpi	r28, 0x04	; 4
    6198:	09 f0       	breq	.+2      	; 0x619c <__vector_20+0x23c>
    619a:	ef c0       	rjmp	.+478    	; 0x637a <__vector_20+0x41a>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    619c:	80 91 5b 05 	lds	r24, 0x055B
    61a0:	85 fd       	sbrc	r24, 5
    61a2:	eb c0       	rjmp	.+470    	; 0x637a <__vector_20+0x41a>
			{
				// RC sync established
				Interrupted = true;
    61a4:	81 e0       	ldi	r24, 0x01	; 1
    61a6:	80 93 db 07 	sts	0x07DB, r24
    61aa:	80 e0       	ldi	r24, 0x00	; 0
    61ac:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    61ae:	fc 01       	movw	r30, r24
    61b0:	ee 0f       	add	r30, r30
    61b2:	ff 1f       	adc	r31, r31
    61b4:	e5 53       	subi	r30, 0x35	; 53
    61b6:	f8 4f       	sbci	r31, 0xF8	; 248
    61b8:	11 82       	std	Z+1, r1	; 0x01
    61ba:	10 82       	st	Z, r1
    61bc:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    61be:	88 30       	cpi	r24, 0x08	; 8
    61c0:	91 05       	cpc	r25, r1
    61c2:	a9 f7       	brne	.-22     	; 0x61ae <__vector_20+0x24e>
    61c4:	a8 e5       	ldi	r26, 0x58	; 88
    61c6:	70 e0       	ldi	r23, 0x00	; 0
    61c8:	c0 e0       	ldi	r28, 0x00	; 0
    61ca:	60 e0       	ldi	r22, 0x00	; 0
    61cc:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    61ce:	21 e0       	ldi	r18, 0x01	; 1
    61d0:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    61d2:	eb 2f       	mov	r30, r27
    61d4:	f0 e0       	ldi	r31, 0x00	; 0
    61d6:	ec 5b       	subi	r30, 0xBC	; 188
    61d8:	fa 4f       	sbci	r31, 0xFA	; 250
    61da:	80 81       	ld	r24, Z
    61dc:	90 e0       	ldi	r25, 0x00	; 0
    61de:	06 2e       	mov	r0, r22
    61e0:	02 c0       	rjmp	.+4      	; 0x61e6 <__vector_20+0x286>
    61e2:	95 95       	asr	r25
    61e4:	87 95       	ror	r24
    61e6:	0a 94       	dec	r0
    61e8:	e2 f7       	brpl	.-8      	; 0x61e2 <__vector_20+0x282>
    61ea:	80 ff       	sbrs	r24, 0
    61ec:	17 c0       	rjmp	.+46     	; 0x621c <__vector_20+0x2bc>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    61ee:	ec 2f       	mov	r30, r28
    61f0:	f0 e0       	ldi	r31, 0x00	; 0
    61f2:	ef 53       	subi	r30, 0x3F	; 63
    61f4:	fa 4f       	sbci	r31, 0xFA	; 250
    61f6:	e1 81       	ldd	r30, Z+1	; 0x01
    61f8:	f0 e0       	ldi	r31, 0x00	; 0
    61fa:	ee 0f       	add	r30, r30
    61fc:	ff 1f       	adc	r31, r31
    61fe:	e5 53       	subi	r30, 0x35	; 53
    6200:	f8 4f       	sbci	r31, 0xF8	; 248
    6202:	80 81       	ld	r24, Z
    6204:	91 81       	ldd	r25, Z+1	; 0x01
    6206:	a9 01       	movw	r20, r18
    6208:	07 2e       	mov	r0, r23
    620a:	02 c0       	rjmp	.+4      	; 0x6210 <__vector_20+0x2b0>
    620c:	44 0f       	add	r20, r20
    620e:	55 1f       	adc	r21, r21
    6210:	0a 94       	dec	r0
    6212:	e2 f7       	brpl	.-8      	; 0x620c <__vector_20+0x2ac>
    6214:	84 2b       	or	r24, r20
    6216:	95 2b       	or	r25, r21
    6218:	91 83       	std	Z+1, r25	; 0x01
    621a:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    621c:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    621e:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    6220:	68 30       	cpi	r22, 0x08	; 8
    6222:	11 f4       	brne	.+4      	; 0x6228 <__vector_20+0x2c8>
                    {
                        chan_mask =0;
                        sindex++;
    6224:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    6226:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    6228:	7b 30       	cpi	r23, 0x0B	; 11
    622a:	11 f4       	brne	.+4      	; 0x6230 <__vector_20+0x2d0>
                    {
                        data_mask =0;
                        chan_shift++;
    622c:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    622e:	70 e0       	ldi	r23, 0x00	; 0
    6230:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    6232:	79 f6       	brne	.-98     	; 0x61d2 <__vector_20+0x272>
    6234:	40 e0       	ldi	r20, 0x00	; 0
    6236:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    6238:	fa 01       	movw	r30, r20
    623a:	ee 0f       	add	r30, r30
    623c:	ff 1f       	adc	r31, r31
    623e:	e5 53       	subi	r30, 0x35	; 53
    6240:	f8 4f       	sbci	r31, 0xF8	; 248
    6242:	20 81       	ld	r18, Z
    6244:	31 81       	ldd	r19, Z+1	; 0x01
    6246:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    6248:	c9 01       	movw	r24, r18
    624a:	95 95       	asr	r25
    624c:	87 95       	ror	r24
    624e:	95 95       	asr	r25
    6250:	87 95       	ror	r24
    6252:	82 0f       	add	r24, r18
    6254:	93 1f       	adc	r25, r19
    6256:	b9 01       	movw	r22, r18
    6258:	a3 e0       	ldi	r26, 0x03	; 3
    625a:	75 95       	asr	r23
    625c:	67 95       	ror	r22
    625e:	aa 95       	dec	r26
    6260:	e1 f7       	brne	.-8      	; 0x625a <__vector_20+0x2fa>
    6262:	86 0f       	add	r24, r22
    6264:	97 1f       	adc	r25, r23
    6266:	b9 01       	movw	r22, r18
    6268:	b4 e0       	ldi	r27, 0x04	; 4
    626a:	75 95       	asr	r23
    626c:	67 95       	ror	r22
    626e:	ba 95       	dec	r27
    6270:	e1 f7       	brne	.-8      	; 0x626a <__vector_20+0x30a>
    6272:	86 0f       	add	r24, r22
    6274:	97 1f       	adc	r25, r23
    6276:	c5 e0       	ldi	r28, 0x05	; 5
    6278:	35 95       	asr	r19
    627a:	27 95       	ror	r18
    627c:	ca 95       	dec	r28
    627e:	e1 f7       	brne	.-8      	; 0x6278 <__vector_20+0x318>
    6280:	82 0f       	add	r24, r18
    6282:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    6284:	8a 55       	subi	r24, 0x5A	; 90
    6286:	91 4f       	sbci	r25, 0xF1	; 241
    6288:	91 83       	std	Z+1, r25	; 0x01
    628a:	80 83       	st	Z, r24
    628c:	4f 5f       	subi	r20, 0xFF	; 255
    628e:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    6290:	48 30       	cpi	r20, 0x08	; 8
    6292:	51 05       	cpc	r21, r1
    6294:	89 f6       	brne	.-94     	; 0x6238 <__vector_20+0x2d8>
    6296:	71 c0       	rjmp	.+226    	; 0x637a <__vector_20+0x41a>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    6298:	83 30       	cpi	r24, 0x03	; 3
    629a:	09 f0       	breq	.+2      	; 0x629e <__vector_20+0x33e>
    629c:	6e c0       	rjmp	.+220    	; 0x637a <__vector_20+0x41a>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    629e:	80 91 dd 07 	lds	r24, 0x07DD
    62a2:	8f 30       	cpi	r24, 0x0F	; 15
    62a4:	08 f4       	brcc	.+2      	; 0x62a8 <__vector_20+0x348>
    62a6:	69 c0       	rjmp	.+210    	; 0x637a <__vector_20+0x41a>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    62a8:	c0 93 53 05 	sts	0x0553, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    62ac:	80 91 45 05 	lds	r24, 0x0545
    62b0:	84 ff       	sbrs	r24, 4
    62b2:	04 c0       	rjmp	.+8      	; 0x62bc <__vector_20+0x35c>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    62b4:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    62b6:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    62b8:	78 e7       	ldi	r23, 0x78	; 120
    62ba:	03 c0       	rjmp	.+6      	; 0x62c2 <__vector_20+0x362>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    62bc:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    62be:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    62c0:	7c e3       	ldi	r23, 0x3C	; 60
    62c2:	e7 e4       	ldi	r30, 0x47	; 71
    62c4:	f5 e0       	ldi	r31, 0x05	; 5
    62c6:	df 01       	movw	r26, r30
    62c8:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    62ca:	2c 91       	ld	r18, X
    62cc:	82 2f       	mov	r24, r18
    62ce:	87 23       	and	r24, r23
    62d0:	90 e0       	ldi	r25, 0x00	; 0
    62d2:	06 2e       	mov	r0, r22
    62d4:	02 c0       	rjmp	.+4      	; 0x62da <__vector_20+0x37a>
    62d6:	95 95       	asr	r25
    62d8:	87 95       	ror	r24
    62da:	0a 94       	dec	r0
    62dc:	e2 f7       	brpl	.-8      	; 0x62d6 <__vector_20+0x376>
    62de:	80 93 f2 07 	sts	0x07F2, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    62e2:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    62e4:	90 91 f2 07 	lds	r25, 0x07F2
    62e8:	98 30       	cpi	r25, 0x08	; 8
    62ea:	f0 f5       	brcc	.+124    	; 0x6368 <__vector_20+0x408>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    62ec:	2c 23       	and	r18, r28
    62ee:	30 e0       	ldi	r19, 0x00	; 0
    62f0:	32 2f       	mov	r19, r18
    62f2:	22 27       	eor	r18, r18
    62f4:	28 0f       	add	r18, r24
    62f6:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    62f8:	63 30       	cpi	r22, 0x03	; 3
    62fa:	11 f4       	brne	.+4      	; 0x6300 <__vector_20+0x3a0>
					{
						itemp16 = temp16 - 1024;
    62fc:	34 50       	subi	r19, 0x04	; 4
    62fe:	01 c0       	rjmp	.+2      	; 0x6302 <__vector_20+0x3a2>
					}
					else
					{
						itemp16 = temp16 - 512;	
    6300:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    6302:	c9 01       	movw	r24, r18
    6304:	88 0f       	add	r24, r24
    6306:	99 1f       	adc	r25, r25
    6308:	a9 01       	movw	r20, r18
    630a:	55 95       	asr	r21
    630c:	47 95       	ror	r20
    630e:	84 0f       	add	r24, r20
    6310:	95 1f       	adc	r25, r21
    6312:	a9 01       	movw	r20, r18
    6314:	55 95       	asr	r21
    6316:	47 95       	ror	r20
    6318:	55 95       	asr	r21
    631a:	47 95       	ror	r20
    631c:	84 0f       	add	r24, r20
    631e:	95 1f       	adc	r25, r21
    6320:	a9 01       	movw	r20, r18
    6322:	a3 e0       	ldi	r26, 0x03	; 3
    6324:	55 95       	asr	r21
    6326:	47 95       	ror	r20
    6328:	aa 95       	dec	r26
    632a:	e1 f7       	brne	.-8      	; 0x6324 <__vector_20+0x3c4>
    632c:	84 0f       	add	r24, r20
    632e:	95 1f       	adc	r25, r21
    6330:	b4 e0       	ldi	r27, 0x04	; 4
    6332:	35 95       	asr	r19
    6334:	27 95       	ror	r18
    6336:	ba 95       	dec	r27
    6338:	e1 f7       	brne	.-8      	; 0x6332 <__vector_20+0x3d2>
    633a:	82 0f       	add	r24, r18
    633c:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    633e:	63 30       	cpi	r22, 0x03	; 3
    6340:	11 f4       	brne	.+4      	; 0x6346 <__vector_20+0x3e6>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    6342:	95 95       	asr	r25
    6344:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    6346:	a0 91 f2 07 	lds	r26, 0x07F2
    634a:	b0 e0       	ldi	r27, 0x00	; 0
    634c:	af 53       	subi	r26, 0x3F	; 63
    634e:	ba 4f       	sbci	r27, 0xFA	; 250
    6350:	11 96       	adiw	r26, 0x01	; 1
    6352:	ac 91       	ld	r26, X
    6354:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    6356:	8a 55       	subi	r24, 0x5A	; 90
    6358:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    635a:	aa 0f       	add	r26, r26
    635c:	bb 1f       	adc	r27, r27
    635e:	a5 53       	subi	r26, 0x35	; 53
    6360:	b8 4f       	sbci	r27, 0xF8	; 248
    6362:	11 96       	adiw	r26, 0x01	; 1
    6364:	9c 93       	st	X, r25
    6366:	8e 93       	st	-X, r24
    6368:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    636a:	25 e0       	ldi	r18, 0x05	; 5
    636c:	e5 35       	cpi	r30, 0x55	; 85
    636e:	f2 07       	cpc	r31, r18
    6370:	09 f0       	breq	.+2      	; 0x6374 <__vector_20+0x414>
    6372:	a9 cf       	rjmp	.-174    	; 0x62c6 <__vector_20+0x366>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    6374:	81 e0       	ldi	r24, 0x01	; 1
    6376:	80 93 db 07 	sts	0x07DB, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    637a:	80 91 dd 07 	lds	r24, 0x07DD
    637e:	8f 5f       	subi	r24, 0xFF	; 255
    6380:	80 93 dd 07 	sts	0x07DD, r24
}
    6384:	ff 91       	pop	r31
    6386:	ef 91       	pop	r30
    6388:	cf 91       	pop	r28
    638a:	bf 91       	pop	r27
    638c:	af 91       	pop	r26
    638e:	9f 91       	pop	r25
    6390:	8f 91       	pop	r24
    6392:	7f 91       	pop	r23
    6394:	6f 91       	pop	r22
    6396:	5f 91       	pop	r21
    6398:	4f 91       	pop	r20
    639a:	3f 91       	pop	r19
    639c:	2f 91       	pop	r18
    639e:	0f 90       	pop	r0
    63a0:	0f be       	out	0x3f, r0	; 63
    63a2:	0f 90       	pop	r0
    63a4:	1f 90       	pop	r1
    63a6:	18 95       	reti

000063a8 <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    63a8:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    63aa:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    63ae:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    63b2:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    63b4:	e1 ec       	ldi	r30, 0xC1	; 193
    63b6:	f0 e0       	ldi	r31, 0x00	; 0
    63b8:	80 81       	ld	r24, Z
    63ba:	8f 7e       	andi	r24, 0xEF	; 239
    63bc:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    63be:	80 81       	ld	r24, Z
    63c0:	8f 77       	andi	r24, 0x7F	; 127
    63c2:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    63c4:	8f e0       	ldi	r24, 0x0F	; 15
    63c6:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    63c8:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    63ca:	78 94       	sei
    63cc:	08 95       	ret

000063ce <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    63ce:	f8 94       	cli
	
	switch (Config.RxMode)
    63d0:	80 91 ea 05 	lds	r24, 0x05EA
    63d4:	81 30       	cpi	r24, 0x01	; 1
    63d6:	c9 f0       	breq	.+50     	; 0x640a <init_int+0x3c>
    63d8:	44 f4       	brge	.+16     	; 0x63ea <init_int+0x1c>
    63da:	81 11       	cpse	r24, r1
    63dc:	2c c0       	rjmp	.+88     	; 0x6436 <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    63de:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    63e2:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    63e6:	84 e0       	ldi	r24, 0x04	; 4
    63e8:	1b c0       	rjmp	.+54     	; 0x6420 <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    63ea:	85 30       	cpi	r24, 0x05	; 5
    63ec:	24 f5       	brge	.+72     	; 0x6436 <init_int+0x68>

		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    63ee:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    63f2:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    63f6:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    63f8:	80 91 c1 00 	lds	r24, 0x00C1
    63fc:	80 68       	ori	r24, 0x80	; 128
    63fe:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    6402:	80 91 c1 00 	lds	r24, 0x00C1
    6406:	80 61       	ori	r24, 0x10	; 16
    6408:	14 c0       	rjmp	.+40     	; 0x6432 <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    640a:	80 91 6c 00 	lds	r24, 0x006C
    640e:	81 60       	ori	r24, 0x01	; 1
    6410:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    6414:	80 91 73 00 	lds	r24, 0x0073
    6418:	81 60       	ori	r24, 0x01	; 1
    641a:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    641e:	87 e0       	ldi	r24, 0x07	; 7
    6420:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    6422:	80 91 c1 00 	lds	r24, 0x00C1
    6426:	8f 77       	andi	r24, 0x7F	; 127
    6428:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    642c:	80 91 c1 00 	lds	r24, 0x00C1
    6430:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    6432:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    6436:	8f e0       	ldi	r24, 0x0F	; 15
    6438:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    643a:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    643c:	78 94       	sei
    643e:	08 95       	ret

00006440 <print_menu_frame>:
//************************************************************
// Print basic menu frame
// style = menu style (0 = main, 1 = sub, 2 = alt)
//************************************************************
void print_menu_frame(uint8_t style)
{
    6440:	cf 93       	push	r28
    6442:	c8 2f       	mov	r28, r24
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    6444:	2b e3       	ldi	r18, 0x3B	; 59
    6446:	30 e0       	ldi	r19, 0x00	; 0
    6448:	46 e2       	ldi	r20, 0x26	; 38
    644a:	50 e0       	ldi	r21, 0x00	; 0
    644c:	67 e0       	ldi	r22, 0x07	; 7
    644e:	71 e0       	ldi	r23, 0x01	; 1
    6450:	8a e0       	ldi	r24, 0x0A	; 10
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    6458:	2b e3       	ldi	r18, 0x3B	; 59
    645a:	30 e0       	ldi	r19, 0x00	; 0
    645c:	40 e5       	ldi	r20, 0x50	; 80
    645e:	50 e0       	ldi	r21, 0x00	; 0
    6460:	67 e0       	ldi	r22, 0x07	; 7
    6462:	71 e0       	ldi	r23, 0x01	; 1
    6464:	89 e0       	ldi	r24, 0x09	; 9
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

	switch (style)
    646c:	c1 30       	cpi	r28, 0x01	; 1
    646e:	f9 f0       	breq	.+62     	; 0x64ae <print_menu_frame+0x6e>
    6470:	58 f0       	brcs	.+22     	; 0x6488 <print_menu_frame+0x48>
    6472:	c0 3a       	cpi	r28, 0xA0	; 160
    6474:	81 f5       	brne	.+96     	; 0x64d6 <print_menu_frame+0x96>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    6476:	26 e3       	ldi	r18, 0x36	; 54
    6478:	30 e0       	ldi	r19, 0x00	; 0
    647a:	40 e0       	ldi	r20, 0x00	; 0
    647c:	50 e0       	ldi	r21, 0x00	; 0
    647e:	6f e1       	ldi	r22, 0x1F	; 31
    6480:	7a e0       	ldi	r23, 0x0A	; 10
    6482:	88 e1       	ldi	r24, 0x18	; 24
    6484:	91 e0       	ldi	r25, 0x01	; 1
    6486:	1b c0       	rjmp	.+54     	; 0x64be <print_menu_frame+0x7e>

	switch (style)
	{
		case BASIC:
			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    6488:	29 e3       	ldi	r18, 0x39	; 57
    648a:	30 e0       	ldi	r19, 0x00	; 0
    648c:	40 e0       	ldi	r20, 0x00	; 0
    648e:	50 e0       	ldi	r21, 0x00	; 0
    6490:	67 e0       	ldi	r22, 0x07	; 7
    6492:	71 e0       	ldi	r23, 0x01	; 1
    6494:	8c e0       	ldi	r24, 0x0C	; 12
    6496:	90 e0       	ldi	r25, 0x00	; 0
    6498:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    649c:	29 e3       	ldi	r18, 0x39	; 57
    649e:	30 e0       	ldi	r19, 0x00	; 0
    64a0:	48 e7       	ldi	r20, 0x78	; 120
    64a2:	50 e0       	ldi	r21, 0x00	; 0
    64a4:	67 e0       	ldi	r22, 0x07	; 7
    64a6:	71 e0       	ldi	r23, 0x01	; 1
    64a8:	8b e0       	ldi	r24, 0x0B	; 11
    64aa:	90 e0       	ldi	r25, 0x00	; 0
    64ac:	12 c0       	rjmp	.+36     	; 0x64d2 <print_menu_frame+0x92>
			break;
			
		case EDIT:
			// For editing items
			LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Def.
    64ae:	26 e3       	ldi	r18, 0x36	; 54
    64b0:	30 e0       	ldi	r19, 0x00	; 0
    64b2:	40 e0       	ldi	r20, 0x00	; 0
    64b4:	50 e0       	ldi	r21, 0x00	; 0
    64b6:	6f e1       	ldi	r22, 0x1F	; 31
    64b8:	7a e0       	ldi	r23, 0x0A	; 10
    64ba:	80 e1       	ldi	r24, 0x10	; 16
    64bc:	90 e0       	ldi	r25, 0x00	; 0
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    64be:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    64c2:	26 e3       	ldi	r18, 0x36	; 54
    64c4:	30 e0       	ldi	r19, 0x00	; 0
    64c6:	47 e6       	ldi	r20, 0x67	; 103
    64c8:	50 e0       	ldi	r21, 0x00	; 0
    64ca:	6f e1       	ldi	r22, 0x1F	; 31
    64cc:	7a e0       	ldi	r23, 0x0A	; 10
    64ce:	81 e1       	ldi	r24, 0x11	; 17
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    64d6:	80 e0       	ldi	r24, 0x00	; 0
    64d8:	91 e0       	ldi	r25, 0x01	; 1
}
    64da:	cf 91       	pop	r28
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    64dc:	0c 94 40 23 	jmp	0x4680	; 0x4680 <write_buffer>

000064e0 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    64e0:	cf 93       	push	r28
    64e2:	df 93       	push	r29
    64e4:	cd b7       	in	r28, 0x3d	; 61
    64e6:	de b7       	in	r29, 0x3e	; 62
    64e8:	2a 97       	sbiw	r28, 0x0a	; 10
    64ea:	0f b6       	in	r0, 0x3f	; 63
    64ec:	f8 94       	cli
    64ee:	de bf       	out	0x3e, r29	; 62
    64f0:	0f be       	out	0x3f, r0	; 63
    64f2:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    64f4:	25 e0       	ldi	r18, 0x05	; 5
    64f6:	62 9f       	mul	r22, r18
    64f8:	80 0d       	add	r24, r0
    64fa:	91 1d       	adc	r25, r1
    64fc:	11 24       	eor	r1, r1
    64fe:	bc 01       	movw	r22, r24
    6500:	45 e0       	ldi	r20, 0x05	; 5
    6502:	50 e0       	ldi	r21, 0x00	; 0
    6504:	ce 01       	movw	r24, r28
    6506:	06 96       	adiw	r24, 0x06	; 6
    6508:	0e 94 7b 4d 	call	0x9af6	; 0x9af6 <memcpy_P>
	return (range);
    650c:	85 e0       	ldi	r24, 0x05	; 5
    650e:	fe 01       	movw	r30, r28
    6510:	36 96       	adiw	r30, 0x06	; 6
    6512:	de 01       	movw	r26, r28
    6514:	11 96       	adiw	r26, 0x01	; 1
    6516:	01 90       	ld	r0, Z+
    6518:	0d 92       	st	X+, r0
    651a:	8a 95       	dec	r24
    651c:	e1 f7       	brne	.-8      	; 0x6516 <get_menu_range+0x36>
    651e:	29 81       	ldd	r18, Y+1	; 0x01
    6520:	3a 81       	ldd	r19, Y+2	; 0x02
    6522:	4b 81       	ldd	r20, Y+3	; 0x03
    6524:	5c 81       	ldd	r21, Y+4	; 0x04
    6526:	6d 81       	ldd	r22, Y+5	; 0x05
}
    6528:	70 e0       	ldi	r23, 0x00	; 0
    652a:	80 e0       	ldi	r24, 0x00	; 0
    652c:	90 e0       	ldi	r25, 0x00	; 0
    652e:	2a 96       	adiw	r28, 0x0a	; 10
    6530:	0f b6       	in	r0, 0x3f	; 63
    6532:	f8 94       	cli
    6534:	de bf       	out	0x3e, r29	; 62
    6536:	0f be       	out	0x3f, r0	; 63
    6538:	cd bf       	out	0x3d, r28	; 61
    653a:	df 91       	pop	r29
    653c:	cf 91       	pop	r28
    653e:	08 95       	ret

00006540 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    6540:	0f 93       	push	r16
    6542:	1f 93       	push	r17
    6544:	cf 93       	push	r28
    6546:	df 93       	push	r29
    6548:	fa 01       	movw	r30, r20
    654a:	10 e0       	ldi	r17, 0x00	; 0
    654c:	c2 2f       	mov	r28, r18
    654e:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    6550:	66 23       	and	r22, r22
    6552:	19 f0       	breq	.+6      	; 0x655a <print_menu_text+0x1a>
    6554:	62 50       	subi	r22, 0x02	; 2
    6556:	62 30       	cpi	r22, 0x02	; 2
    6558:	78 f4       	brcc	.+30     	; 0x6578 <print_menu_text+0x38>
    655a:	4a e0       	ldi	r20, 0x0A	; 10
    655c:	6a e6       	ldi	r22, 0x6A	; 106
    655e:	75 e0       	ldi	r23, 0x05	; 5
    6560:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    6564:	98 01       	movw	r18, r16
    6566:	ae 01       	movw	r20, r28
    6568:	6f e1       	ldi	r22, 0x1F	; 31
    656a:	7a e0       	ldi	r23, 0x0A	; 10
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    656c:	df 91       	pop	r29
    656e:	cf 91       	pop	r28
    6570:	1f 91       	pop	r17
    6572:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    6574:	0c 94 0f 43 	jmp	0x861e	; 0x861e <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    6578:	98 01       	movw	r18, r16
    657a:	ae 01       	movw	r20, r28
    657c:	6f e1       	ldi	r22, 0x1F	; 31
    657e:	7a e0       	ldi	r23, 0x0A	; 10
    6580:	cf 01       	movw	r24, r30
	}
}
    6582:	df 91       	pop	r29
    6584:	cf 91       	pop	r28
    6586:	1f 91       	pop	r17
    6588:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    658a:	0c 94 1f 25 	jmp	0x4a3e	; 0x4a3e <LCD_Display_Text>

0000658e <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    658e:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    6590:	93 b1       	in	r25, 0x03	; 3
    6592:	90 7f       	andi	r25, 0xF0	; 240
    6594:	90 93 fb 07 	sts	0x07FB, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    6598:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    659a:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    659c:	90 91 fb 07 	lds	r25, 0x07FB
    65a0:	90 3f       	cpi	r25, 0xF0	; 240
    65a2:	c9 f4       	brne	.+50     	; 0x65d6 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    65a4:	83 b1       	in	r24, 0x03	; 3
    65a6:	80 7f       	andi	r24, 0xF0	; 240
    65a8:	e7 ea       	ldi	r30, 0xA7	; 167
    65aa:	f1 e6       	ldi	r31, 0x61	; 97
    65ac:	31 97       	sbiw	r30, 0x01	; 1
    65ae:	f1 f7       	brne	.-4      	; 0x65ac <poll_buttons+0x1e>
    65b0:	00 c0       	rjmp	.+0      	; 0x65b2 <poll_buttons+0x24>
    65b2:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    65b4:	23 b1       	in	r18, 0x03	; 3
    65b6:	48 2f       	mov	r20, r24
    65b8:	50 e0       	ldi	r21, 0x00	; 0
    65ba:	20 7f       	andi	r18, 0xF0	; 240
    65bc:	30 e0       	ldi	r19, 0x00	; 0
    65be:	42 17       	cp	r20, r18
    65c0:	53 07       	cpc	r21, r19
    65c2:	19 f4       	brne	.+6      	; 0x65ca <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    65c4:	80 93 fb 07 	sts	0x07FB, r24
    65c8:	01 c0       	rjmp	.+2      	; 0x65cc <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    65ca:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    65cc:	10 92 30 05 	sts	0x0530, r1
		button_multiplier = 1;
    65d0:	70 93 fc 07 	sts	0x07FC, r23
    65d4:	e3 cf       	rjmp	.-58     	; 0x659c <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    65d6:	66 23       	and	r22, r22
    65d8:	71 f0       	breq	.+28     	; 0x65f6 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    65da:	90 91 30 05 	lds	r25, 0x0530
    65de:	9f 5f       	subi	r25, 0xFF	; 255
    65e0:	90 93 30 05 	sts	0x0530, r25
		if (button_count >= 10)
    65e4:	9a 30       	cpi	r25, 0x0A	; 10
    65e6:	38 f0       	brcs	.+14     	; 0x65f6 <poll_buttons+0x68>
		{
			button_count = 0;
    65e8:	10 92 30 05 	sts	0x0530, r1
			button_multiplier ++;
    65ec:	90 91 fc 07 	lds	r25, 0x07FC
    65f0:	9f 5f       	subi	r25, 0xFF	; 255
    65f2:	90 93 fc 07 	sts	0x07FC, r25
		}
	}

	return buttons;
}
    65f6:	08 95       	ret

000065f8 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    65f8:	2f 92       	push	r2
    65fa:	3f 92       	push	r3
    65fc:	4f 92       	push	r4
    65fe:	5f 92       	push	r5
    6600:	6f 92       	push	r6
    6602:	7f 92       	push	r7
    6604:	8f 92       	push	r8
    6606:	9f 92       	push	r9
    6608:	af 92       	push	r10
    660a:	bf 92       	push	r11
    660c:	cf 92       	push	r12
    660e:	df 92       	push	r13
    6610:	ef 92       	push	r14
    6612:	ff 92       	push	r15
    6614:	0f 93       	push	r16
    6616:	1f 93       	push	r17
    6618:	cf 93       	push	r28
    661a:	df 93       	push	r29
    661c:	cd b7       	in	r28, 0x3d	; 61
    661e:	de b7       	in	r29, 0x3e	; 62
    6620:	67 97       	sbiw	r28, 0x17	; 23
    6622:	0f b6       	in	r0, 0x3f	; 63
    6624:	f8 94       	cli
    6626:	de bf       	out	0x3e, r29	; 62
    6628:	0f be       	out	0x3f, r0	; 63
    662a:	cd bf       	out	0x3d, r28	; 61
    662c:	3c 01       	movw	r6, r24
    662e:	79 8b       	std	Y+17, r23	; 0x11
    6630:	68 8b       	std	Y+16, r22	; 0x10
    6632:	4a 87       	std	Y+10, r20	; 0x0a
    6634:	ed 82       	std	Y+5, r14	; 0x05
    6636:	fe 82       	std	Y+6, r15	; 0x06
    6638:	0f 83       	std	Y+7, r16	; 0x07
    663a:	18 87       	std	Y+8, r17	; 0x08
    663c:	29 87       	std	Y+9, r18	; 0x09
    663e:	bd 8a       	std	Y+21, r11	; 0x15
    6640:	ac 8a       	std	Y+20, r10	; 0x14
    6642:	4e 2d       	mov	r20, r14
    6644:	3f 2d       	mov	r19, r15
    6646:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    6648:	fb 01       	movw	r30, r22
    664a:	20 81       	ld	r18, Z
    664c:	a2 2e       	mov	r10, r18
    664e:	bb 24       	eor	r11, r11
    6650:	a7 fc       	sbrc	r10, 7
    6652:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    6654:	12 30       	cpi	r17, 0x02	; 2
    6656:	29 f4       	brne	.+10     	; 0x6662 <do_menu_item+0x6a>
	{
		value = value * mult;
    6658:	5a 85       	ldd	r21, Y+10	; 0x0a
    665a:	25 03       	mulsu	r18, r21
    665c:	50 01       	movw	r10, r0
    665e:	11 24       	eor	r1, r1
    6660:	02 c0       	rjmp	.+4      	; 0x6666 <do_menu_item+0x6e>
	}
	else mult = 1;
    6662:	81 e0       	ldi	r24, 0x01	; 1
    6664:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    6666:	20 ef       	ldi	r18, 0xF0	; 240
    6668:	20 93 fb 07 	sts	0x07FB, r18
				value = (range.default_value * mult);				
			}
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    666c:	fa 85       	ldd	r31, Y+10	; 0x0a
    666e:	ef 2f       	mov	r30, r31
    6670:	f0 e0       	ldi	r31, 0x00	; 0
    6672:	fb 8b       	std	Y+19, r31	; 0x13
    6674:	ea 8b       	std	Y+18, r30	; 0x12
    6676:	2a 85       	ldd	r18, Y+10	; 0x0a
    6678:	42 03       	mulsu	r20, r18
    667a:	10 01       	movw	r2, r0
    667c:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    667e:	32 03       	mulsu	r19, r18
    6680:	c0 01       	movw	r24, r0
    6682:	11 24       	eor	r1, r1
    6684:	9f 87       	std	Y+15, r25	; 0x0f
    6686:	8e 87       	std	Y+14, r24	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    6688:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    668a:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    668c:	41 2c       	mov	r4, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    668e:	f1 2c       	mov	r15, r1
		{
			button_inc = 5; // For servos
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    6690:	01 e0       	ldi	r16, 0x01	; 1
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    6692:	f3 01       	movw	r30, r6
    6694:	ee 0f       	add	r30, r30
    6696:	ff 1f       	adc	r31, r31
    6698:	ea 5f       	subi	r30, 0xFA	; 250
    669a:	f1 4f       	sbci	r31, 0xF1	; 241
    669c:	fc 87       	std	Y+12, r31	; 0x0c
    669e:	eb 87       	std	Y+11, r30	; 0x0b
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    66a0:	2c 2d       	mov	r18, r12
    66a2:	33 27       	eor	r19, r19
    66a4:	27 fd       	sbrc	r18, 7
    66a6:	30 95       	com	r19
    66a8:	3f 8b       	std	Y+23, r19	; 0x17
    66aa:	2e 8b       	std	Y+22, r18	; 0x16
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    66ac:	be ef       	ldi	r27, 0xFE	; 254
    66ae:	9b 2e       	mov	r9, r27
    66b0:	91 0e       	add	r9, r17

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    66b2:	86 e2       	ldi	r24, 0x26	; 38
    66b4:	ec a5       	ldd	r30, Y+44	; 0x2c
    66b6:	fd a5       	ldd	r31, Y+45	; 0x2d
    66b8:	8e 9f       	mul	r24, r30
    66ba:	60 01       	movw	r12, r0
    66bc:	8f 9f       	mul	r24, r31
    66be:	d0 0c       	add	r13, r0
    66c0:	11 24       	eor	r1, r1
    66c2:	96 01       	movw	r18, r12
    66c4:	29 5a       	subi	r18, 0xA9	; 169
    66c6:	39 4f       	sbci	r19, 0xF9	; 249
    66c8:	69 01       	movw	r12, r18
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
    66ca:	80 91 fb 07 	lds	r24, 0x07FB
    66ce:	28 2f       	mov	r18, r24
    66d0:	2f 7b       	andi	r18, 0xBF	; 191
    66d2:	20 3a       	cpi	r18, 0xA0	; 160
    66d4:	09 f4       	brne	.+2      	; 0x66d8 <do_menu_item+0xe0>
    66d6:	36 c1       	rjmp	.+620    	; 0x6944 <do_menu_item+0x34c>
		// Increment loop count so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    66d8:	88 20       	and	r8, r8
    66da:	11 f0       	breq	.+4      	; 0x66e0 <do_menu_item+0xe8>
		{
			button_inc = 5; // For servos
    66dc:	25 e0       	ldi	r18, 0x05	; 5
    66de:	01 c0       	rjmp	.+2      	; 0x66e2 <do_menu_item+0xea>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    66e0:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    66e2:	80 3f       	cpi	r24, 0xF0	; 240
    66e4:	19 f0       	breq	.+6      	; 0x66ec <do_menu_item+0xf4>
		{
			button_update++;
    66e6:	43 94       	inc	r4

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    66e8:	24 15       	cp	r18, r4
    66ea:	10 f4       	brcc	.+4      	; 0x66f0 <do_menu_item+0xf8>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    66ec:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    66ee:	41 2c       	mov	r4, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    66f0:	88 20       	and	r8, r8
    66f2:	49 f0       	breq	.+18     	; 0x6706 <do_menu_item+0x10e>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
	{
		// Increment loop count so that we can time various things
		display_update++;
    66f4:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    66f6:	37 e0       	ldi	r19, 0x07	; 7
    66f8:	3f 15       	cp	r19, r15
    66fa:	10 f4       	brcc	.+4      	; 0x6700 <do_menu_item+0x108>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    66fc:	80 3f       	cpi	r24, 0xF0	; 240
    66fe:	19 f4       	brne	.+6      	; 0x6706 <do_menu_item+0x10e>
    6700:	99 23       	and	r25, r25
    6702:	09 f4       	brne	.+2      	; 0x6706 <do_menu_item+0x10e>
    6704:	85 c0       	rjmp	.+266    	; 0x6810 <do_menu_item+0x218>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    6706:	80 e0       	ldi	r24, 0x00	; 0
    6708:	91 e0       	ldi	r25, 0x01	; 1
    670a:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>

			// Print warning
			if (range.style == 4)
    670e:	14 30       	cpi	r17, 0x04	; 4
    6710:	a9 f4       	brne	.+42     	; 0x673c <do_menu_item+0x144>
			{
				LCD_Display_Text(281,(const unsigned char*)Verdana8,0,0);	// Warning
    6712:	20 e0       	ldi	r18, 0x00	; 0
    6714:	30 e0       	ldi	r19, 0x00	; 0
    6716:	40 e0       	ldi	r20, 0x00	; 0
    6718:	50 e0       	ldi	r21, 0x00	; 0
    671a:	6f e1       	ldi	r22, 0x1F	; 31
    671c:	7a e0       	ldi	r23, 0x0A	; 10
    671e:	89 e1       	ldi	r24, 0x19	; 25
    6720:	91 e0       	ldi	r25, 0x01	; 1
    6722:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
    6726:	2c e0       	ldi	r18, 0x0C	; 12
    6728:	30 e0       	ldi	r19, 0x00	; 0
    672a:	49 e1       	ldi	r20, 0x19	; 25
    672c:	50 e0       	ldi	r21, 0x00	; 0
    672e:	6f e1       	ldi	r22, 0x1F	; 31
    6730:	7a e0       	ldi	r23, 0x0A	; 10
    6732:	8a e1       	ldi	r24, 0x1A	; 26
    6734:	91 e0       	ldi	r25, 0x01	; 1
    6736:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
    673a:	39 c0       	rjmp	.+114    	; 0x67ae <do_menu_item+0x1b6>
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    673c:	eb 85       	ldd	r30, Y+11	; 0x0b
    673e:	fc 85       	ldd	r31, Y+12	; 0x0c
    6740:	85 91       	lpm	r24, Z+
    6742:	94 91       	lpm	r25, Z
    6744:	20 e0       	ldi	r18, 0x00	; 0
    6746:	30 e0       	ldi	r19, 0x00	; 0
    6748:	40 e0       	ldi	r20, 0x00	; 0
    674a:	50 e0       	ldi	r21, 0x00	; 0
    674c:	61 e7       	ldi	r22, 0x71	; 113
    674e:	71 e0       	ldi	r23, 0x01	; 1
    6750:	0e 94 28 25 	call	0x4a50	; 0x4a50 <gLCDprint_Menu_P>
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    6754:	11 23       	and	r17, r17
    6756:	19 f0       	breq	.+6      	; 0x675e <do_menu_item+0x166>
    6758:	51 e0       	ldi	r21, 0x01	; 1
    675a:	59 15       	cp	r21, r9
    675c:	40 f1       	brcs	.+80     	; 0x67ae <do_menu_item+0x1b6>
    675e:	4a e0       	ldi	r20, 0x0A	; 10
    6760:	6a e6       	ldi	r22, 0x6A	; 106
    6762:	75 e0       	ldi	r23, 0x05	; 5
    6764:	c5 01       	movw	r24, r10
    6766:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    676a:	ae 01       	movw	r20, r28
    676c:	4f 5f       	subi	r20, 0xFF	; 255
    676e:	5f 4f       	sbci	r21, 0xFF	; 255
    6770:	61 e7       	ldi	r22, 0x71	; 113
    6772:	71 e0       	ldi	r23, 0x01	; 1
    6774:	0e 94 c0 41 	call	0x8380	; 0x8380 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    6778:	89 81       	ldd	r24, Y+1	; 0x01
    677a:	9a 81       	ldd	r25, Y+2	; 0x02
    677c:	70 e8       	ldi	r23, 0x80	; 128
    677e:	e7 2e       	mov	r14, r23
    6780:	f1 2c       	mov	r15, r1
    6782:	e8 1a       	sub	r14, r24
    6784:	f9 0a       	sbc	r15, r25
    6786:	f6 94       	lsr	r15
    6788:	e7 94       	ror	r14
    678a:	8e 89       	ldd	r24, Y+22	; 0x16
    678c:	9f 89       	ldd	r25, Y+23	; 0x17
    678e:	e8 0e       	add	r14, r24
    6790:	f9 1e       	adc	r15, r25
    6792:	4a e0       	ldi	r20, 0x0A	; 10
    6794:	6a e6       	ldi	r22, 0x6A	; 106
    6796:	75 e0       	ldi	r23, 0x05	; 5
    6798:	c5 01       	movw	r24, r10
    679a:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__itoa_ncheck>
    679e:	29 e1       	ldi	r18, 0x19	; 25
    67a0:	30 e0       	ldi	r19, 0x00	; 0
    67a2:	a7 01       	movw	r20, r14
    67a4:	61 e7       	ldi	r22, 0x71	; 113
    67a6:	71 e0       	ldi	r23, 0x01	; 1
    67a8:	0e 94 0f 43 	call	0x861e	; 0x861e <mugui_lcd_puts>
    67ac:	29 c0       	rjmp	.+82     	; 0x6800 <do_menu_item+0x208>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    67ae:	ec 88       	ldd	r14, Y+20	; 0x14
    67b0:	fd 88       	ldd	r15, Y+21	; 0x15
    67b2:	ea 0c       	add	r14, r10
    67b4:	fb 1c       	adc	r15, r11
    67b6:	f7 01       	movw	r30, r14
    67b8:	ee 0f       	add	r30, r30
    67ba:	ff 1f       	adc	r31, r31
    67bc:	ea 5f       	subi	r30, 0xFA	; 250
    67be:	f1 4f       	sbci	r31, 0xF1	; 241
    67c0:	85 91       	lpm	r24, Z+
    67c2:	94 91       	lpm	r25, Z
    67c4:	0e 94 0e 42 	call	0x841c	; 0x841c <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    67c8:	ae 01       	movw	r20, r28
    67ca:	4f 5f       	subi	r20, 0xFF	; 255
    67cc:	5f 4f       	sbci	r21, 0xFF	; 255
    67ce:	61 e7       	ldi	r22, 0x71	; 113
    67d0:	71 e0       	ldi	r23, 0x01	; 1
    67d2:	8a e6       	ldi	r24, 0x6A	; 106
    67d4:	95 e0       	ldi	r25, 0x05	; 5
    67d6:	0e 94 c0 41 	call	0x8380	; 0x8380 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    67da:	89 81       	ldd	r24, Y+1	; 0x01
    67dc:	9a 81       	ldd	r25, Y+2	; 0x02
    67de:	40 e8       	ldi	r20, 0x80	; 128
    67e0:	50 e0       	ldi	r21, 0x00	; 0
    67e2:	48 1b       	sub	r20, r24
    67e4:	59 0b       	sbc	r21, r25
    67e6:	56 95       	lsr	r21
    67e8:	47 95       	ror	r20
    67ea:	29 e1       	ldi	r18, 0x19	; 25
    67ec:	30 e0       	ldi	r19, 0x00	; 0
    67ee:	61 e7       	ldi	r22, 0x71	; 113
    67f0:	71 e0       	ldi	r23, 0x01	; 1
    67f2:	c7 01       	movw	r24, r14
    67f4:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
			}

			// Print appropriate menu frame
			// Save/Abort screen
			if (range.style == 4)
    67f8:	14 30       	cpi	r17, 0x04	; 4
    67fa:	11 f4       	brne	.+4      	; 0x6800 <do_menu_item+0x208>
			{
				// Print bottom markers
				print_menu_frame(ABORT);				
    67fc:	80 ea       	ldi	r24, 0xA0	; 160
    67fe:	01 c0       	rjmp	.+2      	; 0x6802 <do_menu_item+0x20a>
			}
			// Save/default screen
			else
			{
				// Print bottom markers
				print_menu_frame(EDIT);				
    6800:	81 e0       	ldi	r24, 0x01	; 1
    6802:	0e 94 20 32 	call	0x6440	; 0x6440 <print_menu_frame>
			}

			// Write from buffer
			write_buffer(buffer);
    6806:	80 e0       	ldi	r24, 0x00	; 0
    6808:	91 e0       	ldi	r25, 0x01	; 1
    680a:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    680e:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    6810:	12 30       	cpi	r17, 0x02	; 2
    6812:	09 f1       	breq	.+66     	; 0x6856 <do_menu_item+0x25e>
    6814:	60 f4       	brcc	.+24     	; 0x682e <do_menu_item+0x236>
    6816:	11 23       	and	r17, r17
    6818:	b1 f0       	breq	.+44     	; 0x6846 <do_menu_item+0x24e>
    681a:	11 30       	cpi	r17, 0x01	; 1
    681c:	69 f5       	brne	.+90     	; 0x6878 <do_menu_item+0x280>
    681e:	2f e3       	ldi	r18, 0x3F	; 63
    6820:	32 e4       	ldi	r19, 0x42	; 66
    6822:	5f e0       	ldi	r21, 0x0F	; 15
    6824:	21 50       	subi	r18, 0x01	; 1
    6826:	30 40       	sbci	r19, 0x00	; 0
    6828:	50 40       	sbci	r21, 0x00	; 0
    682a:	e1 f7       	brne	.-8      	; 0x6824 <do_menu_item+0x22c>
    682c:	23 c0       	rjmp	.+70     	; 0x6874 <do_menu_item+0x27c>
    682e:	13 30       	cpi	r17, 0x03	; 3
    6830:	d1 f0       	breq	.+52     	; 0x6866 <do_menu_item+0x26e>
    6832:	14 30       	cpi	r17, 0x04	; 4
    6834:	09 f5       	brne	.+66     	; 0x6878 <do_menu_item+0x280>
    6836:	5f e3       	ldi	r21, 0x3F	; 63
    6838:	82 e4       	ldi	r24, 0x42	; 66
    683a:	9f e0       	ldi	r25, 0x0F	; 15
    683c:	51 50       	subi	r21, 0x01	; 1
    683e:	80 40       	sbci	r24, 0x00	; 0
    6840:	90 40       	sbci	r25, 0x00	; 0
    6842:	e1 f7       	brne	.-8      	; 0x683c <do_menu_item+0x244>
    6844:	17 c0       	rjmp	.+46     	; 0x6874 <do_menu_item+0x27c>
    6846:	9f e7       	ldi	r25, 0x7F	; 127
    6848:	ea e1       	ldi	r30, 0x1A	; 26
    684a:	f6 e0       	ldi	r31, 0x06	; 6
    684c:	91 50       	subi	r25, 0x01	; 1
    684e:	e0 40       	sbci	r30, 0x00	; 0
    6850:	f0 40       	sbci	r31, 0x00	; 0
    6852:	e1 f7       	brne	.-8      	; 0x684c <do_menu_item+0x254>
    6854:	0f c0       	rjmp	.+30     	; 0x6874 <do_menu_item+0x27c>
    6856:	8f e7       	ldi	r24, 0x7F	; 127
    6858:	9a e1       	ldi	r25, 0x1A	; 26
    685a:	e6 e0       	ldi	r30, 0x06	; 6
    685c:	81 50       	subi	r24, 0x01	; 1
    685e:	90 40       	sbci	r25, 0x00	; 0
    6860:	e0 40       	sbci	r30, 0x00	; 0
    6862:	e1 f7       	brne	.-8      	; 0x685c <do_menu_item+0x264>
    6864:	07 c0       	rjmp	.+14     	; 0x6874 <do_menu_item+0x27c>
    6866:	ff e7       	ldi	r31, 0x7F	; 127
    6868:	28 e3       	ldi	r18, 0x38	; 56
    686a:	31 e0       	ldi	r19, 0x01	; 1
    686c:	f1 50       	subi	r31, 0x01	; 1
    686e:	20 40       	sbci	r18, 0x00	; 0
    6870:	30 40       	sbci	r19, 0x00	; 0
    6872:	e1 f7       	brne	.-8      	; 0x686c <do_menu_item+0x274>
    6874:	00 c0       	rjmp	.+0      	; 0x6876 <do_menu_item+0x27e>
    6876:	00 00       	nop
		}

		// Poll buttons when idle.
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    6878:	88 20       	and	r8, r8
    687a:	39 f0       	breq	.+14     	; 0x688a <do_menu_item+0x292>
		{
			button = (PINB & 0xf0);	
    687c:	83 b1       	in	r24, 0x03	; 3
    687e:	80 7f       	andi	r24, 0xF0	; 240
    6880:	80 93 fb 07 	sts	0x07FB, r24
			button_multiplier = 1;
    6884:	00 93 fc 07 	sts	0x07FC, r16
    6888:	03 c0       	rjmp	.+6      	; 0x6890 <do_menu_item+0x298>
		}
		else
		{
			poll_buttons(true);
    688a:	81 e0       	ldi	r24, 0x01	; 1
    688c:	0e 94 c7 32 	call	0x658e	; 0x658e <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    6890:	80 91 fb 07 	lds	r24, 0x07FB
    6894:	80 3f       	cpi	r24, 0xF0	; 240
    6896:	69 f1       	breq	.+90     	; 0x68f2 <do_menu_item+0x2fa>
    6898:	88 20       	and	r8, r8
    689a:	c9 f0       	breq	.+50     	; 0x68ce <do_menu_item+0x2d6>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    689c:	80 3d       	cpi	r24, 0xD0	; 208
    689e:	51 f4       	brne	.+20     	; 0x68b4 <do_menu_item+0x2bc>
		{
			if (button_lock == false)
    68a0:	51 10       	cpse	r5, r1
    68a2:	74 c0       	rjmp	.+232    	; 0x698c <do_menu_item+0x394>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    68a4:	80 91 fc 07 	lds	r24, 0x07FC
    68a8:	ed 85       	ldd	r30, Y+13	; 0x0d
    68aa:	e8 9f       	mul	r30, r24
    68ac:	a0 18       	sub	r10, r0
    68ae:	b1 08       	sbc	r11, r1
    68b0:	11 24       	eor	r1, r1
    68b2:	0b c0       	rjmp	.+22     	; 0x68ca <do_menu_item+0x2d2>
				button_update = 0;
			}
		}

		if (button == UP)
    68b4:	80 3b       	cpi	r24, 0xB0	; 176
    68b6:	81 f4       	brne	.+32     	; 0x68d8 <do_menu_item+0x2e0>
		{
			if (button_lock == false)
    68b8:	51 10       	cpse	r5, r1
    68ba:	68 c0       	rjmp	.+208    	; 0x698c <do_menu_item+0x394>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    68bc:	80 91 fc 07 	lds	r24, 0x07FC
    68c0:	fd 85       	ldd	r31, Y+13	; 0x0d
    68c2:	f8 9f       	mul	r31, r24
    68c4:	a0 0c       	add	r10, r0
    68c6:	b1 1c       	adc	r11, r1
    68c8:	11 24       	eor	r1, r1
				button_update = 0;
    68ca:	41 2c       	mov	r4, r1
    68cc:	5f c0       	rjmp	.+190    	; 0x698c <do_menu_item+0x394>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    68ce:	80 3d       	cpi	r24, 0xD0	; 208
    68d0:	49 f3       	breq	.-46     	; 0x68a4 <do_menu_item+0x2ac>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    68d2:	80 3b       	cpi	r24, 0xB0	; 176
    68d4:	99 f3       	breq	.-26     	; 0x68bc <do_menu_item+0x2c4>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    68d6:	51 2c       	mov	r5, r1
				button_update = 0;
			}
		}

		// Handle button 1
		if (button == BACK)	
    68d8:	80 37       	cpi	r24, 0x70	; 112
    68da:	59 f4       	brne	.+22     	; 0x68f2 <do_menu_item+0x2fa>
		{
			// Save/Abort screen
			if (range.style == 4)
    68dc:	14 30       	cpi	r17, 0x04	; 4
    68de:	21 f4       	brne	.+8      	; 0x68e8 <do_menu_item+0x2f0>
			{
				button = ABORT;
    68e0:	80 ea       	ldi	r24, 0xA0	; 160
    68e2:	80 93 fb 07 	sts	0x07FB, r24
    68e6:	05 c0       	rjmp	.+10     	; 0x68f2 <do_menu_item+0x2fa>
			}
			else
			{
				value = (range.default_value * mult);				
    68e8:	29 85       	ldd	r18, Y+9	; 0x09
    68ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    68ec:	23 03       	mulsu	r18, r19
    68ee:	50 01       	movw	r10, r0
    68f0:	11 24       	eor	r1, r1
    68f2:	a2 14       	cp	r10, r2
    68f4:	b3 04       	cpc	r11, r3
    68f6:	0c f4       	brge	.+2      	; 0x68fa <do_menu_item+0x302>
    68f8:	51 01       	movw	r10, r2
    68fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    68fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    68fe:	8a 15       	cp	r24, r10
    6900:	9b 05       	cpc	r25, r11
    6902:	0c f4       	brge	.+2      	; 0x6906 <do_menu_item+0x30e>
    6904:	5c 01       	movw	r10, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    6906:	9f e9       	ldi	r25, 0x9F	; 159
    6908:	69 16       	cp	r6, r25
    690a:	71 04       	cpc	r7, r1
    690c:	19 f4       	brne	.+6      	; 0x6914 <do_menu_item+0x31c>
		{
			st7565_set_brightness(value);
    690e:	8a 2d       	mov	r24, r10
    6910:	0e 94 18 23 	call	0x4630	; 0x4630 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    6914:	88 20       	and	r8, r8
    6916:	a1 f0       	breq	.+40     	; 0x6940 <do_menu_item+0x348>
			(servo_enable) &&
    6918:	f6 01       	movw	r30, r12
    691a:	80 81       	ld	r24, Z
    691c:	82 30       	cpi	r24, 0x02	; 2
    691e:	81 f0       	breq	.+32     	; 0x6940 <do_menu_item+0x348>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    6920:	8a 2d       	mov	r24, r10
    6922:	0e 94 b9 41 	call	0x8372	; 0x8372 <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6926:	86 5a       	subi	r24, 0xA6	; 166
    6928:	9e 40       	sbci	r25, 0x0E	; 14
    692a:	95 95       	asr	r25
    692c:	87 95       	ror	r24

			cli();
    692e:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6930:	bc 01       	movw	r22, r24
    6932:	64 52       	subi	r22, 0x24	; 36
    6934:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    6936:	8c a5       	ldd	r24, Y+44	; 0x2c
    6938:	9d a5       	ldd	r25, Y+45	; 0x2d
    693a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <output_servo_ppm_asm3>
			sei();
    693e:	78 94       	sei
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	c3 ce       	rjmp	.-634    	; 0x66ca <do_menu_item+0xd2>
		}

	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    6944:	12 30       	cpi	r17, 0x02	; 2
    6946:	31 f4       	brne	.+12     	; 0x6954 <do_menu_item+0x35c>
	{
		value = value / mult;
    6948:	c5 01       	movw	r24, r10
    694a:	6a 89       	ldd	r22, Y+18	; 0x12
    694c:	7b 89       	ldd	r23, Y+19	; 0x13
    694e:	0e 94 ef 4c 	call	0x99de	; 0x99de <__divmodhi4>
    6952:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    6954:	e8 89       	ldd	r30, Y+16	; 0x10
    6956:	f9 89       	ldd	r31, Y+17	; 0x11
    6958:	a0 82       	st	Z, r10
}
    695a:	67 96       	adiw	r28, 0x17	; 23
    695c:	0f b6       	in	r0, 0x3f	; 63
    695e:	f8 94       	cli
    6960:	de bf       	out	0x3e, r29	; 62
    6962:	0f be       	out	0x3f, r0	; 63
    6964:	cd bf       	out	0x3d, r28	; 61
    6966:	df 91       	pop	r29
    6968:	cf 91       	pop	r28
    696a:	1f 91       	pop	r17
    696c:	0f 91       	pop	r16
    696e:	ff 90       	pop	r15
    6970:	ef 90       	pop	r14
    6972:	df 90       	pop	r13
    6974:	cf 90       	pop	r12
    6976:	bf 90       	pop	r11
    6978:	af 90       	pop	r10
    697a:	9f 90       	pop	r9
    697c:	8f 90       	pop	r8
    697e:	7f 90       	pop	r7
    6980:	6f 90       	pop	r6
    6982:	5f 90       	pop	r5
    6984:	4f 90       	pop	r4
    6986:	3f 90       	pop	r3
    6988:	2f 90       	pop	r2
    698a:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    698c:	55 24       	eor	r5, r5
    698e:	53 94       	inc	r5
    6990:	b0 cf       	rjmp	.-160    	; 0x68f2 <do_menu_item+0x2fa>

00006992 <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    6992:	90 e0       	ldi	r25, 0x00	; 0
    6994:	98 17       	cp	r25, r24
    6996:	81 f0       	breq	.+32     	; 0x69b8 <menu_beep+0x26>
	{ 
		LVA = 1;
    6998:	29 9a       	sbi	0x05, 1	; 5
    699a:	ef e0       	ldi	r30, 0x0F	; 15
    699c:	f7 e2       	ldi	r31, 0x27	; 39
    699e:	31 97       	sbiw	r30, 0x01	; 1
    69a0:	f1 f7       	brne	.-4      	; 0x699e <menu_beep+0xc>
    69a2:	00 c0       	rjmp	.+0      	; 0x69a4 <menu_beep+0x12>
    69a4:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    69a6:	29 98       	cbi	0x05, 1	; 5
    69a8:	ef e0       	ldi	r30, 0x0F	; 15
    69aa:	f7 e2       	ldi	r31, 0x27	; 39
    69ac:	31 97       	sbiw	r30, 0x01	; 1
    69ae:	f1 f7       	brne	.-4      	; 0x69ac <menu_beep+0x1a>
    69b0:	00 c0       	rjmp	.+0      	; 0x69b2 <menu_beep+0x20>
    69b2:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    69b4:	9f 5f       	subi	r25, 0xFF	; 255
    69b6:	ee cf       	rjmp	.-36     	; 0x6994 <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    69b8:	08 95       	ret

000069ba <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint16_t items, uint16_t start, uint16_t offset, uint8_t button, uint16_t* cursor, uint16_t* top, uint16_t* temp)
{
    69ba:	6f 92       	push	r6
    69bc:	7f 92       	push	r7
    69be:	8f 92       	push	r8
    69c0:	9f 92       	push	r9
    69c2:	af 92       	push	r10
    69c4:	bf 92       	push	r11
    69c6:	cf 92       	push	r12
    69c8:	df 92       	push	r13
    69ca:	ef 92       	push	r14
    69cc:	ff 92       	push	r15
    69ce:	0f 93       	push	r16
    69d0:	1f 93       	push	r17
    69d2:	cf 93       	push	r28
    69d4:	df 93       	push	r29
    69d6:	5c 01       	movw	r10, r24
    69d8:	4b 01       	movw	r8, r22
    69da:	3a 01       	movw	r6, r20
    69dc:	e8 01       	movw	r28, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    69de:	d7 01       	movw	r26, r14
    69e0:	ed 91       	ld	r30, X+
    69e2:	fc 91       	ld	r31, X
    69e4:	11 97       	sbiw	r26, 0x01	; 1
    69e6:	e4 0f       	add	r30, r20
    69e8:	f5 1f       	adc	r31, r21
    69ea:	ed 93       	st	X+, r30
    69ec:	fc 93       	st	X, r31
	start = start + offset;
    69ee:	84 0e       	add	r8, r20
    69f0:	95 1e       	adc	r9, r21

	// Calculate which function has been requested
	if (button == ENTER)
    69f2:	20 3e       	cpi	r18, 0xE0	; 224
    69f4:	c1 f4       	brne	.+48     	; 0x6a26 <update_menu+0x6c>
	{
		switch(*cursor) 
    69f6:	88 81       	ld	r24, Y
    69f8:	99 81       	ldd	r25, Y+1	; 0x01
    69fa:	8f 30       	cpi	r24, 0x0F	; 15
    69fc:	91 05       	cpc	r25, r1
    69fe:	61 f0       	breq	.+24     	; 0x6a18 <update_menu+0x5e>
    6a00:	18 f4       	brcc	.+6      	; 0x6a08 <update_menu+0x4e>
    6a02:	03 97       	sbiw	r24, 0x03	; 3
    6a04:	51 f0       	breq	.+20     	; 0x6a1a <update_menu+0x60>
    6a06:	55 c0       	rjmp	.+170    	; 0x6ab2 <update_menu+0xf8>
    6a08:	8b 31       	cpi	r24, 0x1B	; 27
    6a0a:	91 05       	cpc	r25, r1
    6a0c:	51 f0       	breq	.+20     	; 0x6a22 <update_menu+0x68>
    6a0e:	87 97       	sbiw	r24, 0x27	; 39
    6a10:	09 f0       	breq	.+2      	; 0x6a14 <update_menu+0x5a>
    6a12:	4f c0       	rjmp	.+158    	; 0x6ab2 <update_menu+0xf8>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    6a14:	33 96       	adiw	r30, 0x03	; 3
    6a16:	01 c0       	rjmp	.+2      	; 0x6a1a <update_menu+0x60>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    6a18:	31 96       	adiw	r30, 0x01	; 1
    6a1a:	d6 01       	movw	r26, r12
    6a1c:	ed 93       	st	X+, r30
    6a1e:	fc 93       	st	X, r31
				break;	
    6a20:	48 c0       	rjmp	.+144    	; 0x6ab2 <update_menu+0xf8>
			case LINE2:
				*temp = *top + 2;
    6a22:	32 96       	adiw	r30, 0x02	; 2
    6a24:	fa cf       	rjmp	.-12     	; 0x6a1a <update_menu+0x60>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    6a26:	20 3d       	cpi	r18, 0xD0	; 208
    6a28:	39 f5       	brne	.+78     	; 0x6a78 <update_menu+0xbe>
	{
		switch(*cursor) 
    6a2a:	88 81       	ld	r24, Y
    6a2c:	99 81       	ldd	r25, Y+1	; 0x01
    6a2e:	8f 30       	cpi	r24, 0x0F	; 15
    6a30:	91 05       	cpc	r25, r1
    6a32:	79 f0       	breq	.+30     	; 0x6a52 <update_menu+0x98>
    6a34:	18 f4       	brcc	.+6      	; 0x6a3c <update_menu+0x82>
    6a36:	03 97       	sbiw	r24, 0x03	; 3
    6a38:	39 f0       	breq	.+14     	; 0x6a48 <update_menu+0x8e>
    6a3a:	1b c0       	rjmp	.+54     	; 0x6a72 <update_menu+0xb8>
    6a3c:	8b 31       	cpi	r24, 0x1B	; 27
    6a3e:	91 05       	cpc	r25, r1
    6a40:	69 f0       	breq	.+26     	; 0x6a5c <update_menu+0xa2>
    6a42:	87 97       	sbiw	r24, 0x27	; 39
    6a44:	91 f0       	breq	.+36     	; 0x6a6a <update_menu+0xb0>
    6a46:	15 c0       	rjmp	.+42     	; 0x6a72 <update_menu+0xb8>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    6a48:	b2 e0       	ldi	r27, 0x02	; 2
    6a4a:	ab 16       	cp	r10, r27
    6a4c:	b1 04       	cpc	r11, r1
    6a4e:	20 f5       	brcc	.+72     	; 0x6a98 <update_menu+0xde>
    6a50:	30 c0       	rjmp	.+96     	; 0x6ab2 <update_menu+0xf8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    6a52:	e3 e0       	ldi	r30, 0x03	; 3
    6a54:	ae 16       	cp	r10, r30
    6a56:	b1 04       	cpc	r11, r1
    6a58:	60 f1       	brcs	.+88     	; 0x6ab2 <update_menu+0xf8>
    6a5a:	1b c0       	rjmp	.+54     	; 0x6a92 <update_menu+0xd8>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    6a5c:	f4 e0       	ldi	r31, 0x04	; 4
    6a5e:	af 16       	cp	r10, r31
    6a60:	b1 04       	cpc	r11, r1
    6a62:	38 f1       	brcs	.+78     	; 0x6ab2 <update_menu+0xf8>
    6a64:	87 e2       	ldi	r24, 0x27	; 39
    6a66:	90 e0       	ldi	r25, 0x00	; 0
    6a68:	1f c0       	rjmp	.+62     	; 0x6aa8 <update_menu+0xee>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    6a6a:	25 e0       	ldi	r18, 0x05	; 5
    6a6c:	a2 16       	cp	r10, r18
    6a6e:	b1 04       	cpc	r11, r1
    6a70:	00 f1       	brcs	.+64     	; 0x6ab2 <update_menu+0xf8>
				break;
			default:
				*cursor = NEXTLINE;
    6a72:	88 e2       	ldi	r24, 0x28	; 40
    6a74:	90 e0       	ldi	r25, 0x00	; 0
    6a76:	18 c0       	rjmp	.+48     	; 0x6aa8 <update_menu+0xee>
				break;
		}
	}

	if (button == UP)	
    6a78:	20 3b       	cpi	r18, 0xB0	; 176
    6a7a:	c9 f4       	brne	.+50     	; 0x6aae <update_menu+0xf4>
	{
		switch(*cursor) 
    6a7c:	88 81       	ld	r24, Y
    6a7e:	99 81       	ldd	r25, Y+1	; 0x01
    6a80:	8f 30       	cpi	r24, 0x0F	; 15
    6a82:	91 05       	cpc	r25, r1
    6a84:	61 f0       	breq	.+24     	; 0x6a9e <update_menu+0xe4>
    6a86:	70 f0       	brcs	.+28     	; 0x6aa4 <update_menu+0xea>
    6a88:	8b 31       	cpi	r24, 0x1B	; 27
    6a8a:	91 05       	cpc	r25, r1
    6a8c:	29 f0       	breq	.+10     	; 0x6a98 <update_menu+0xde>
    6a8e:	87 97       	sbiw	r24, 0x27	; 39
    6a90:	49 f4       	brne	.+18     	; 0x6aa4 <update_menu+0xea>
		{
			case LINE3:
				*cursor = LINE2;
    6a92:	8b e1       	ldi	r24, 0x1B	; 27
    6a94:	90 e0       	ldi	r25, 0x00	; 0
    6a96:	08 c0       	rjmp	.+16     	; 0x6aa8 <update_menu+0xee>
				break;	
			case LINE2:
				*cursor = LINE1;
    6a98:	8f e0       	ldi	r24, 0x0F	; 15
    6a9a:	90 e0       	ldi	r25, 0x00	; 0
    6a9c:	05 c0       	rjmp	.+10     	; 0x6aa8 <update_menu+0xee>
				break;
			case LINE1:
				*cursor = LINE0;
    6a9e:	83 e0       	ldi	r24, 0x03	; 3
    6aa0:	90 e0       	ldi	r25, 0x00	; 0
    6aa2:	02 c0       	rjmp	.+4      	; 0x6aa8 <update_menu+0xee>
				break;
			case LINE0:
				*cursor = PREVLINE;
    6aa4:	82 e0       	ldi	r24, 0x02	; 2
    6aa6:	90 e0       	ldi	r25, 0x00	; 0
    6aa8:	99 83       	std	Y+1, r25	; 0x01
    6aaa:	88 83       	st	Y, r24
				break;
    6aac:	02 c0       	rjmp	.+4      	; 0x6ab2 <update_menu+0xf8>
				*cursor = PREVLINE;
				break;
		}
	}

	if (button != NONE)	
    6aae:	20 3f       	cpi	r18, 0xF0	; 240
    6ab0:	61 f0       	breq	.+24     	; 0x6aca <update_menu+0x110>
	{
		menu_beep(1);
    6ab2:	81 e0       	ldi	r24, 0x01	; 1
    6ab4:	0e 94 c9 34 	call	0x6992	; 0x6992 <menu_beep>
    6ab8:	4f ef       	ldi	r20, 0xFF	; 255
    6aba:	84 e3       	ldi	r24, 0x34	; 52
    6abc:	9c e0       	ldi	r25, 0x0C	; 12
    6abe:	41 50       	subi	r20, 0x01	; 1
    6ac0:	80 40       	sbci	r24, 0x00	; 0
    6ac2:	90 40       	sbci	r25, 0x00	; 0
    6ac4:	e1 f7       	brne	.-8      	; 0x6abe <update_menu+0x104>
    6ac6:	00 c0       	rjmp	.+0      	; 0x6ac8 <update_menu+0x10e>
    6ac8:	00 00       	nop
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    6aca:	88 81       	ld	r24, Y
    6acc:	99 81       	ldd	r25, Y+1	; 0x01
    6ace:	02 97       	sbiw	r24, 0x02	; 2
    6ad0:	71 f4       	brne	.+28     	; 0x6aee <update_menu+0x134>
	{
		*cursor  = LINE0;
    6ad2:	83 e0       	ldi	r24, 0x03	; 3
    6ad4:	90 e0       	ldi	r25, 0x00	; 0
    6ad6:	99 83       	std	Y+1, r25	; 0x01
    6ad8:	88 83       	st	Y, r24
		if (*top > start) 
    6ada:	d7 01       	movw	r26, r14
    6adc:	8d 91       	ld	r24, X+
    6ade:	9c 91       	ld	r25, X
    6ae0:	11 97       	sbiw	r26, 0x01	; 1
    6ae2:	88 16       	cp	r8, r24
    6ae4:	99 06       	cpc	r9, r25
    6ae6:	18 f4       	brcc	.+6      	; 0x6aee <update_menu+0x134>
		{
			*top = *top - 1;								// Shuffle list up
    6ae8:	01 97       	sbiw	r24, 0x01	; 1
    6aea:	8d 93       	st	X+, r24
    6aec:	9c 93       	st	X, r25
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    6aee:	88 81       	ld	r24, Y
    6af0:	99 81       	ldd	r25, Y+1	; 0x01
    6af2:	88 97       	sbiw	r24, 0x28	; 40
    6af4:	b1 f4       	brne	.+44     	; 0x6b22 <update_menu+0x168>
	{
		*cursor  = LINE3;
    6af6:	87 e2       	ldi	r24, 0x27	; 39
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	99 83       	std	Y+1, r25	; 0x01
    6afc:	88 83       	st	Y, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    6afe:	f7 01       	movw	r30, r14
    6b00:	80 81       	ld	r24, Z
    6b02:	91 81       	ldd	r25, Z+1	; 0x01
    6b04:	9c 01       	movw	r18, r24
    6b06:	2d 5f       	subi	r18, 0xFD	; 253
    6b08:	3f 4f       	sbci	r19, 0xFF	; 255
    6b0a:	f1 e0       	ldi	r31, 0x01	; 1
    6b0c:	af 1a       	sub	r10, r31
    6b0e:	b1 08       	sbc	r11, r1
    6b10:	a8 0c       	add	r10, r8
    6b12:	b9 1c       	adc	r11, r9
    6b14:	2a 15       	cp	r18, r10
    6b16:	3b 05       	cpc	r19, r11
    6b18:	20 f4       	brcc	.+8      	; 0x6b22 <update_menu+0x168>
		{
			*top = *top + 1;								// Shuffle list down
    6b1a:	01 96       	adiw	r24, 0x01	; 1
    6b1c:	d7 01       	movw	r26, r14
    6b1e:	8d 93       	st	X+, r24
    6b20:	9c 93       	st	X, r25
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    6b22:	f7 01       	movw	r30, r14
    6b24:	80 81       	ld	r24, Z
    6b26:	91 81       	ldd	r25, Z+1	; 0x01
    6b28:	86 19       	sub	r24, r6
    6b2a:	97 09       	sbc	r25, r7
    6b2c:	91 83       	std	Z+1, r25	; 0x01
    6b2e:	80 83       	st	Z, r24
}
    6b30:	df 91       	pop	r29
    6b32:	cf 91       	pop	r28
    6b34:	1f 91       	pop	r17
    6b36:	0f 91       	pop	r16
    6b38:	ff 90       	pop	r15
    6b3a:	ef 90       	pop	r14
    6b3c:	df 90       	pop	r13
    6b3e:	cf 90       	pop	r12
    6b40:	bf 90       	pop	r11
    6b42:	af 90       	pop	r10
    6b44:	9f 90       	pop	r9
    6b46:	8f 90       	pop	r8
    6b48:	7f 90       	pop	r7
    6b4a:	6f 90       	pop	r6
    6b4c:	08 95       	ret

00006b4e <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    6b4e:	28 2f       	mov	r18, r24
    6b50:	30 e0       	ldi	r19, 0x00	; 0
    6b52:	43 e0       	ldi	r20, 0x03	; 3
    6b54:	50 e0       	ldi	r21, 0x00	; 0
    6b56:	67 e0       	ldi	r22, 0x07	; 7
    6b58:	71 e0       	ldi	r23, 0x01	; 1
    6b5a:	8d e0       	ldi	r24, 0x0D	; 13
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
    6b5e:	0c 94 1f 25 	jmp	0x4a3e	; 0x4a3e <LCD_Display_Text>

00006b62 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint16_t MenuOffsets, const uint16_t* text_link, uint16_t cursor)
{
    6b62:	2f 92       	push	r2
    6b64:	3f 92       	push	r3
    6b66:	4f 92       	push	r4
    6b68:	5f 92       	push	r5
    6b6a:	6f 92       	push	r6
    6b6c:	7f 92       	push	r7
    6b6e:	8f 92       	push	r8
    6b70:	9f 92       	push	r9
    6b72:	af 92       	push	r10
    6b74:	bf 92       	push	r11
    6b76:	cf 92       	push	r12
    6b78:	df 92       	push	r13
    6b7a:	ef 92       	push	r14
    6b7c:	ff 92       	push	r15
    6b7e:	0f 93       	push	r16
    6b80:	1f 93       	push	r17
    6b82:	cf 93       	push	r28
    6b84:	df 93       	push	r29
    6b86:	cd b7       	in	r28, 0x3d	; 61
    6b88:	de b7       	in	r29, 0x3e	; 62
    6b8a:	2c 97       	sbiw	r28, 0x0c	; 12
    6b8c:	0f b6       	in	r0, 0x3f	; 63
    6b8e:	f8 94       	cli
    6b90:	de bf       	out	0x3e, r29	; 62
    6b92:	0f be       	out	0x3f, r0	; 63
    6b94:	cd bf       	out	0x3d, r28	; 61
    6b96:	2c 01       	movw	r4, r24
    6b98:	4a 01       	movw	r8, r20
    6b9a:	3f 83       	std	Y+7, r19	; 0x07
    6b9c:	2e 83       	std	Y+6, r18	; 0x06
    6b9e:	08 87       	std	Y+8, r16	; 0x08
    6ba0:	e9 86       	std	Y+9, r14	; 0x09
    6ba2:	aa 86       	std	Y+10, r10	; 0x0a
	uint16_t base = 0;
	uint16_t offset = 0;
	uint16_t text = 0;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    6ba4:	80 e0       	ldi	r24, 0x00	; 0
    6ba6:	91 e0       	ldi	r25, 0x01	; 1
    6ba8:	6b 87       	std	Y+11, r22	; 0x0b
    6baa:	7c 87       	std	Y+12, r23	; 0x0c
    6bac:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>
	print_menu_frame(BASIC);
    6bb0:	80 e0       	ldi	r24, 0x00	; 0
    6bb2:	0e 94 20 32 	call	0x6440	; 0x6440 <print_menu_frame>
    6bb6:	25 e0       	ldi	r18, 0x05	; 5
    6bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    6bbc:	26 9f       	mul	r18, r22
    6bbe:	c0 01       	movw	r24, r0
    6bc0:	27 9f       	mul	r18, r23
    6bc2:	90 0d       	add	r25, r0
    6bc4:	11 24       	eor	r1, r1
    6bc6:	2e 80       	ldd	r2, Y+6	; 0x06
    6bc8:	3f 80       	ldd	r3, Y+7	; 0x07
    6bca:	28 1a       	sub	r2, r24
    6bcc:	39 0a       	sbc	r3, r25
    6bce:	24 9d       	mul	r18, r4
    6bd0:	c0 01       	movw	r24, r0
    6bd2:	25 9d       	mul	r18, r5
    6bd4:	90 0d       	add	r25, r0
    6bd6:	11 24       	eor	r1, r1
    6bd8:	28 0e       	add	r2, r24
    6bda:	39 1e       	adc	r3, r25
    6bdc:	cb 01       	movw	r24, r22
    6bde:	88 0f       	add	r24, r24
    6be0:	99 1f       	adc	r25, r25
    6be2:	c8 1a       	sub	r12, r24
    6be4:	d9 0a       	sbc	r13, r25
    6be6:	c2 01       	movw	r24, r4
    6be8:	88 0f       	add	r24, r24
    6bea:	99 1f       	adc	r25, r25
    6bec:	c8 0e       	add	r12, r24
    6bee:	d9 1e       	adc	r13, r25
    6bf0:	72 01       	movw	r14, r4
    6bf2:	a1 2c       	mov	r10, r1
    6bf4:	b1 2c       	mov	r11, r1
    6bf6:	41 2c       	mov	r4, r1
    6bf8:	51 2c       	mov	r5, r1
    6bfa:	85 eb       	ldi	r24, 0xB5	; 181
    6bfc:	68 2e       	mov	r6, r24
    6bfe:	88 e1       	ldi	r24, 0x18	; 24
    6c00:	78 2e       	mov	r7, r24
    6c02:	6e 18       	sub	r6, r14
    6c04:	7f 08       	sbc	r7, r15
    6c06:	86 1a       	sub	r8, r22
    6c08:	97 0a       	sbc	r9, r23
    6c0a:	83 01       	movw	r16, r6
    6c0c:	0e 0d       	add	r16, r14
    6c0e:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    6c10:	f8 01       	movw	r30, r16
    6c12:	24 91       	lpm	r18, Z
    6c14:	30 e0       	ldi	r19, 0x00	; 0
    6c16:	4a e0       	ldi	r20, 0x0A	; 10
    6c18:	50 e0       	ldi	r21, 0x00	; 0
    6c1a:	6f e1       	ldi	r22, 0x1F	; 31
    6c1c:	7a e0       	ldi	r23, 0x0A	; 10
    6c1e:	c7 01       	movw	r24, r14
    6c20:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6c24:	f8 85       	ldd	r31, Y+8	; 0x08
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6c26:	45 e0       	ldi	r20, 0x05	; 5
    6c28:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6c2a:	f1 11       	cpse	r31, r1
    6c2c:	04 c0       	rjmp	.+8      	; 0x6c36 <print_menu_items+0xd4>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6c2e:	b5 01       	movw	r22, r10
    6c30:	62 0d       	add	r22, r2
    6c32:	73 1d       	adc	r23, r3
    6c34:	02 c0       	rjmp	.+4      	; 0x6c3a <print_menu_items+0xd8>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    6c36:	6e 81       	ldd	r22, Y+6	; 0x06
    6c38:	7f 81       	ldd	r23, Y+7	; 0x07
    6c3a:	ce 01       	movw	r24, r28
    6c3c:	01 96       	adiw	r24, 0x01	; 1
    6c3e:	0e 94 7b 4d 	call	0x9af6	; 0x9af6 <memcpy_P>
    6c42:	f2 01       	movw	r30, r4
    6c44:	ec 0d       	add	r30, r12
    6c46:	fd 1d       	adc	r31, r13
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
    6c48:	45 91       	lpm	r20, Z+
    6c4a:	54 91       	lpm	r21, Z
    6c4c:	f4 01       	movw	r30, r8
    6c4e:	ee 0d       	add	r30, r14
    6c50:	ff 1d       	adc	r31, r15
		offset = values[top + i - start];
    6c52:	80 81       	ld	r24, Z
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    6c54:	f8 01       	movw	r30, r16
    6c56:	04 91       	lpm	r16, Z
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
		offset = values[top + i - start];
    6c58:	99 27       	eor	r25, r25
    6c5a:	87 fd       	sbrc	r24, 7
    6c5c:	90 95       	com	r25
		text = base + offset;
    6c5e:	48 0f       	add	r20, r24
    6c60:	59 1f       	adc	r21, r25
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    6c62:	29 85       	ldd	r18, Y+9	; 0x09
    6c64:	6c 81       	ldd	r22, Y+4	; 0x04
    6c66:	0e 94 a0 32 	call	0x6540	; 0x6540 <print_menu_text>
    6c6a:	ff ef       	ldi	r31, 0xFF	; 255
    6c6c:	ef 1a       	sub	r14, r31
    6c6e:	ff 0a       	sbc	r15, r31
    6c70:	82 e0       	ldi	r24, 0x02	; 2
    6c72:	48 0e       	add	r4, r24
    6c74:	51 1c       	adc	r5, r1
    6c76:	e5 e0       	ldi	r30, 0x05	; 5
    6c78:	ae 0e       	add	r10, r30
    6c7a:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(BASIC);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    6c7c:	f4 e1       	ldi	r31, 0x14	; 20
    6c7e:	af 16       	cp	r10, r31
    6c80:	b1 04       	cpc	r11, r1
    6c82:	09 f0       	breq	.+2      	; 0x6c86 <print_menu_items+0x124>
    6c84:	c2 cf       	rjmp	.-124    	; 0x6c0a <print_menu_items+0xa8>
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    6c86:	8a 85       	ldd	r24, Y+10	; 0x0a
    6c88:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <print_cursor>
	write_buffer(buffer);
    6c8c:	80 e0       	ldi	r24, 0x00	; 0
    6c8e:	91 e0       	ldi	r25, 0x01	; 1
    6c90:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>
	poll_buttons(true);
    6c94:	81 e0       	ldi	r24, 0x01	; 1
    6c96:	0e 94 c7 32 	call	0x658e	; 0x658e <poll_buttons>
}
    6c9a:	2c 96       	adiw	r28, 0x0c	; 12
    6c9c:	0f b6       	in	r0, 0x3f	; 63
    6c9e:	f8 94       	cli
    6ca0:	de bf       	out	0x3e, r29	; 62
    6ca2:	0f be       	out	0x3f, r0	; 63
    6ca4:	cd bf       	out	0x3d, r28	; 61
    6ca6:	df 91       	pop	r29
    6ca8:	cf 91       	pop	r28
    6caa:	1f 91       	pop	r17
    6cac:	0f 91       	pop	r16
    6cae:	ff 90       	pop	r15
    6cb0:	ef 90       	pop	r14
    6cb2:	df 90       	pop	r13
    6cb4:	cf 90       	pop	r12
    6cb6:	bf 90       	pop	r11
    6cb8:	af 90       	pop	r10
    6cba:	9f 90       	pop	r9
    6cbc:	8f 90       	pop	r8
    6cbe:	7f 90       	pop	r7
    6cc0:	6f 90       	pop	r6
    6cc2:	5f 90       	pop	r5
    6cc4:	4f 90       	pop	r4
    6cc6:	3f 90       	pop	r3
    6cc8:	2f 90       	pop	r2
    6cca:	08 95       	ret

00006ccc <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    6ccc:	6f 92       	push	r6
    6cce:	7f 92       	push	r7
    6cd0:	8f 92       	push	r8
    6cd2:	af 92       	push	r10
    6cd4:	bf 92       	push	r11
    6cd6:	cf 92       	push	r12
    6cd8:	df 92       	push	r13
    6cda:	ef 92       	push	r14
    6cdc:	ff 92       	push	r15
    6cde:	0f 93       	push	r16
    6ce0:	1f 93       	push	r17
    6ce2:	cf 93       	push	r28
    6ce4:	df 93       	push	r29
    6ce6:	00 d0       	rcall	.+0      	; 0x6ce8 <menu_flight+0x1c>
    6ce8:	00 d0       	rcall	.+0      	; 0x6cea <menu_flight+0x1e>
    6cea:	1f 92       	push	r1
    6cec:	cd b7       	in	r28, 0x3d	; 61
    6cee:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6cf0:	90 91 fd 07 	lds	r25, 0x07FD
    6cf4:	99 23       	and	r25, r25
    6cf6:	41 f0       	breq	.+16     	; 0x6d08 <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    6cf8:	2a ea       	ldi	r18, 0xAA	; 170
    6cfa:	30 e0       	ldi	r19, 0x00	; 0
    6cfc:	30 93 37 05 	sts	0x0537, r19
    6d00:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    6d04:	10 92 fd 07 	sts	0x07FD, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    6d08:	92 e1       	ldi	r25, 0x12	; 18
    6d0a:	89 9f       	mul	r24, r25
    6d0c:	30 01       	movw	r6, r0
    6d0e:	11 24       	eor	r1, r1
    6d10:	c3 01       	movw	r24, r6
    6d12:	8d 50       	subi	r24, 0x0D	; 13
    6d14:	9a 4f       	sbci	r25, 0xFA	; 250
    6d16:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6d18:	80 91 fb 07 	lds	r24, 0x07FB
    6d1c:	80 37       	cpi	r24, 0x70	; 112
    6d1e:	09 f4       	brne	.+2      	; 0x6d22 <menu_flight+0x56>
    6d20:	66 c0       	rjmp	.+204    	; 0x6dee <menu_flight+0x122>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const uint16_t*)FlightMenuText, cursor);
    6d22:	a0 90 04 05 	lds	r10, 0x0504
    6d26:	b0 90 05 05 	lds	r11, 0x0505
    6d2a:	33 e1       	ldi	r19, 0x13	; 19
    6d2c:	c3 2e       	mov	r12, r19
    6d2e:	39 e1       	ldi	r19, 0x19	; 25
    6d30:	d3 2e       	mov	r13, r19
    6d32:	4f e4       	ldi	r20, 0x4F	; 79
    6d34:	e4 2e       	mov	r14, r20
    6d36:	f1 2c       	mov	r15, r1
    6d38:	00 e0       	ldi	r16, 0x00	; 0
    6d3a:	29 eb       	ldi	r18, 0xB9	; 185
    6d3c:	38 e1       	ldi	r19, 0x18	; 24
    6d3e:	a3 01       	movw	r20, r6
    6d40:	6a ea       	ldi	r22, 0xAA	; 170
    6d42:	70 e0       	ldi	r23, 0x00	; 0
    6d44:	80 91 36 05 	lds	r24, 0x0536
    6d48:	90 91 37 05 	lds	r25, 0x0537
    6d4c:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6d50:	51 e3       	ldi	r21, 0x31	; 49
    6d52:	c5 2e       	mov	r12, r21
    6d54:	55 e0       	ldi	r21, 0x05	; 5
    6d56:	d5 2e       	mov	r13, r21
    6d58:	66 e3       	ldi	r22, 0x36	; 54
    6d5a:	e6 2e       	mov	r14, r22
    6d5c:	65 e0       	ldi	r22, 0x05	; 5
    6d5e:	f6 2e       	mov	r15, r22
    6d60:	04 e0       	ldi	r16, 0x04	; 4
    6d62:	15 e0       	ldi	r17, 0x05	; 5
    6d64:	20 91 fb 07 	lds	r18, 0x07FB
    6d68:	40 e0       	ldi	r20, 0x00	; 0
    6d6a:	50 e0       	ldi	r21, 0x00	; 0
    6d6c:	6a ea       	ldi	r22, 0xAA	; 170
    6d6e:	70 e0       	ldi	r23, 0x00	; 0
    6d70:	82 e1       	ldi	r24, 0x12	; 18
    6d72:	90 e0       	ldi	r25, 0x00	; 0
    6d74:	0e 94 dd 34 	call	0x69ba	; 0x69ba <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    6d78:	60 91 31 05 	lds	r22, 0x0531
    6d7c:	6a 5a       	subi	r22, 0xAA	; 170
    6d7e:	89 eb       	ldi	r24, 0xB9	; 185
    6d80:	98 e1       	ldi	r25, 0x18	; 24
    6d82:	0e 94 70 32 	call	0x64e0	; 0x64e0 <get_menu_range>
    6d86:	29 83       	std	Y+1, r18	; 0x01
    6d88:	3a 83       	std	Y+2, r19	; 0x02
    6d8a:	4b 83       	std	Y+3, r20	; 0x03
    6d8c:	5c 83       	std	Y+4, r21	; 0x04
    6d8e:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6d90:	80 91 fb 07 	lds	r24, 0x07FB
    6d94:	80 3e       	cpi	r24, 0xE0	; 224
    6d96:	f9 f4       	brne	.+62     	; 0x6dd6 <menu_flight+0x10a>
		{
			text_link = pgm_read_word(&FlightMenuText[menu_temp - FLIGHTSTART]);
    6d98:	80 91 31 05 	lds	r24, 0x0531
    6d9c:	90 91 32 05 	lds	r25, 0x0532
    6da0:	bc 01       	movw	r22, r24
    6da2:	6a 5a       	subi	r22, 0xAA	; 170
    6da4:	71 09       	sbc	r23, r1
    6da6:	fb 01       	movw	r30, r22
    6da8:	ee 0f       	add	r30, r30
    6daa:	ff 1f       	adc	r31, r31
    6dac:	ed 5e       	subi	r30, 0xED	; 237
    6dae:	f6 4e       	sbci	r31, 0xE6	; 230
    6db0:	a5 90       	lpm	r10, Z+
    6db2:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    6db4:	bb 24       	eor	r11, r11
    6db6:	66 0d       	add	r22, r6
    6db8:	77 1d       	adc	r23, r7
    6dba:	1f 92       	push	r1
    6dbc:	1f 92       	push	r1
    6dbe:	81 2c       	mov	r8, r1
    6dc0:	c1 2c       	mov	r12, r1
    6dc2:	e9 80       	ldd	r14, Y+1	; 0x01
    6dc4:	fa 80       	ldd	r15, Y+2	; 0x02
    6dc6:	0b 81       	ldd	r16, Y+3	; 0x03
    6dc8:	1c 81       	ldd	r17, Y+4	; 0x04
    6dca:	2d 81       	ldd	r18, Y+5	; 0x05
    6dcc:	41 e0       	ldi	r20, 0x01	; 1
    6dce:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <do_menu_item>
    6dd2:	0f 90       	pop	r0
    6dd4:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    6dd6:	80 91 fb 07 	lds	r24, 0x07FB
    6dda:	80 3e       	cpi	r24, 0xE0	; 224
    6ddc:	09 f0       	breq	.+2      	; 0x6de0 <menu_flight+0x114>
    6dde:	9c cf       	rjmp	.-200    	; 0x6d18 <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    6de0:	0e 94 c3 3a 	call	0x7586	; 0x7586 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    6de4:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6de8:	0e 94 d6 37 	call	0x6fac	; 0x6fac <Wait_BUTTON4>
    6dec:	95 cf       	rjmp	.-214    	; 0x6d18 <menu_flight+0x4c>
		}
	}
}
    6dee:	0f 90       	pop	r0
    6df0:	0f 90       	pop	r0
    6df2:	0f 90       	pop	r0
    6df4:	0f 90       	pop	r0
    6df6:	0f 90       	pop	r0
    6df8:	df 91       	pop	r29
    6dfa:	cf 91       	pop	r28
    6dfc:	1f 91       	pop	r17
    6dfe:	0f 91       	pop	r16
    6e00:	ff 90       	pop	r15
    6e02:	ef 90       	pop	r14
    6e04:	df 90       	pop	r13
    6e06:	cf 90       	pop	r12
    6e08:	bf 90       	pop	r11
    6e0a:	af 90       	pop	r10
    6e0c:	8f 90       	pop	r8
    6e0e:	7f 90       	pop	r7
    6e10:	6f 90       	pop	r6
    6e12:	08 95       	ret

00006e14 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    6e14:	90 e0       	ldi	r25, 0x00	; 0
    6e16:	fc 01       	movw	r30, r24
    6e18:	ed 54       	subi	r30, 0x4D	; 77
    6e1a:	f1 09       	sbc	r31, r1
    6e1c:	e3 31       	cpi	r30, 0x13	; 19
    6e1e:	f1 05       	cpc	r31, r1
    6e20:	70 f5       	brcc	.+92     	; 0x6e7e <do_main_menu_item+0x6a>
    6e22:	e7 5b       	subi	r30, 0xB7	; 183
    6e24:	ff 4f       	sbci	r31, 0xFF	; 255
    6e26:	0c 94 44 4d 	jmp	0x9a88	; 0x9a88 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    6e2a:	82 e0       	ldi	r24, 0x02	; 2
    6e2c:	01 c0       	rjmp	.+2      	; 0x6e30 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    6e2e:	81 e0       	ldi	r24, 0x01	; 1
    6e30:	0c 94 82 39 	jmp	0x7304	; 0x7304 <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    6e34:	0c 94 24 12 	jmp	0x2448	; 0x2448 <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    6e38:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    6e3c:	0c 94 23 13 	jmp	0x2646	; 0x2646 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    6e40:	0c 94 94 11 	jmp	0x2328	; 0x2328 <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    6e44:	80 e0       	ldi	r24, 0x00	; 0
    6e46:	01 c0       	rjmp	.+2      	; 0x6e4a <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    6e48:	81 e0       	ldi	r24, 0x01	; 1
    6e4a:	0c 94 66 36 	jmp	0x6ccc	; 0x6ccc <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    6e4e:	80 e0       	ldi	r24, 0x00	; 0
    6e50:	0d c0       	rjmp	.+26     	; 0x6e6c <do_main_menu_item+0x58>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    6e52:	81 e0       	ldi	r24, 0x01	; 1
    6e54:	0b c0       	rjmp	.+22     	; 0x6e6c <do_main_menu_item+0x58>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    6e56:	82 e0       	ldi	r24, 0x02	; 2
    6e58:	09 c0       	rjmp	.+18     	; 0x6e6c <do_main_menu_item+0x58>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    6e5a:	83 e0       	ldi	r24, 0x03	; 3
    6e5c:	07 c0       	rjmp	.+14     	; 0x6e6c <do_main_menu_item+0x58>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    6e5e:	84 e0       	ldi	r24, 0x04	; 4
    6e60:	05 c0       	rjmp	.+10     	; 0x6e6c <do_main_menu_item+0x58>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    6e62:	85 e0       	ldi	r24, 0x05	; 5
    6e64:	03 c0       	rjmp	.+6      	; 0x6e6c <do_main_menu_item+0x58>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    6e66:	86 e0       	ldi	r24, 0x06	; 6
    6e68:	01 c0       	rjmp	.+2      	; 0x6e6c <do_main_menu_item+0x58>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    6e6a:	87 e0       	ldi	r24, 0x07	; 7
    6e6c:	0c 94 e3 37 	jmp	0x6fc6	; 0x6fc6 <menu_mixer>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    6e70:	81 e0       	ldi	r24, 0x01	; 1
    6e72:	03 c0       	rjmp	.+6      	; 0x6e7a <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    6e74:	82 e0       	ldi	r24, 0x02	; 2
    6e76:	01 c0       	rjmp	.+2      	; 0x6e7a <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    6e78:	83 e0       	ldi	r24, 0x03	; 3
    6e7a:	0c 94 87 38 	jmp	0x710e	; 0x710e <menu_servo_setup>
    6e7e:	08 95       	ret

00006e80 <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    6e80:	1f 99       	sbic	0x03, 7	; 3
    6e82:	0a c0       	rjmp	.+20     	; 0x6e98 <Wait_BUTTON1+0x18>
    6e84:	2f e3       	ldi	r18, 0x3F	; 63
    6e86:	8d e0       	ldi	r24, 0x0D	; 13
    6e88:	93 e0       	ldi	r25, 0x03	; 3
    6e8a:	21 50       	subi	r18, 0x01	; 1
    6e8c:	80 40       	sbci	r24, 0x00	; 0
    6e8e:	90 40       	sbci	r25, 0x00	; 0
    6e90:	e1 f7       	brne	.-8      	; 0x6e8a <Wait_BUTTON1+0xa>
    6e92:	00 c0       	rjmp	.+0      	; 0x6e94 <Wait_BUTTON1+0x14>
    6e94:	00 00       	nop
    6e96:	f4 cf       	rjmp	.-24     	; 0x6e80 <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    6e98:	08 95       	ret

00006e9a <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    6e9a:	9f 92       	push	r9
    6e9c:	af 92       	push	r10
    6e9e:	bf 92       	push	r11
    6ea0:	cf 92       	push	r12
    6ea2:	df 92       	push	r13
    6ea4:	ef 92       	push	r14
    6ea6:	ff 92       	push	r15
    6ea8:	0f 93       	push	r16
    6eaa:	1f 93       	push	r17
    6eac:	cf 93       	push	r28
    6eae:	df 93       	push	r29
	static uint16_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    6eb0:	80 ef       	ldi	r24, 0xF0	; 240
    6eb2:	80 93 fb 07 	sts	0x07FB, r24

	menu_beep(1);
    6eb6:	81 e0       	ldi	r24, 0x01	; 1
    6eb8:	0e 94 c9 34 	call	0x6992	; 0x6992 <menu_beep>

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    6ebc:	0e 94 40 37 	call	0x6e80	; 0x6e80 <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    6ec0:	23 e0       	ldi	r18, 0x03	; 3
    6ec2:	a2 2e       	mov	r10, r18
    6ec4:	b1 2c       	mov	r11, r1

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    6ec6:	30 ef       	ldi	r19, 0xF0	; 240
    6ec8:	93 2e       	mov	r9, r19
	menu_beep(1);

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    6eca:	80 91 fb 07 	lds	r24, 0x07FB
    6ece:	80 37       	cpi	r24, 0x70	; 112
    6ed0:	09 f4       	brne	.+2      	; 0x6ed4 <menu_main+0x3a>
    6ed2:	60 c0       	rjmp	.+192    	; 0x6f94 <menu_main+0xfa>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    6ed4:	80 e0       	ldi	r24, 0x00	; 0
    6ed6:	91 e0       	ldi	r25, 0x01	; 1
    6ed8:	0e 94 72 23 	call	0x46e4	; 0x46e4 <clear_buffer>

		// Print menu
		print_menu_frame(BASIC);													// Frame
    6edc:	80 e0       	ldi	r24, 0x00	; 0
    6ede:	0e 94 20 32 	call	0x6440	; 0x6440 <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    6ee2:	c0 e0       	ldi	r28, 0x00	; 0
    6ee4:	d0 e0       	ldi	r29, 0x00	; 0
    6ee6:	fe 01       	movw	r30, r28
    6ee8:	eb 54       	subi	r30, 0x4B	; 75
    6eea:	f7 4e       	sbci	r31, 0xE7	; 231
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    6eec:	24 91       	lpm	r18, Z
    6eee:	30 e0       	ldi	r19, 0x00	; 0
    6ef0:	80 91 08 05 	lds	r24, 0x0508
    6ef4:	90 91 09 05 	lds	r25, 0x0509
    6ef8:	4a e0       	ldi	r20, 0x0A	; 10
    6efa:	50 e0       	ldi	r21, 0x00	; 0
    6efc:	6f e1       	ldi	r22, 0x1F	; 31
    6efe:	7a e0       	ldi	r23, 0x0A	; 10
    6f00:	8c 0f       	add	r24, r28
    6f02:	9d 1f       	adc	r25, r29
    6f04:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(BASIC);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    6f08:	21 96       	adiw	r28, 0x01	; 1
    6f0a:	c4 30       	cpi	r28, 0x04	; 4
    6f0c:	d1 05       	cpc	r29, r1
    6f0e:	59 f7       	brne	.-42     	; 0x6ee6 <menu_main+0x4c>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    6f10:	80 91 06 05 	lds	r24, 0x0506
    6f14:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <print_cursor>
		write_buffer(buffer);
    6f18:	80 e0       	ldi	r24, 0x00	; 0
    6f1a:	91 e0       	ldi	r25, 0x01	; 1
    6f1c:	0e 94 40 23 	call	0x4680	; 0x4680 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    6f20:	81 e0       	ldi	r24, 0x01	; 1
    6f22:	0e 94 c7 32 	call	0x658e	; 0x658e <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    6f26:	84 e3       	ldi	r24, 0x34	; 52
    6f28:	c8 2e       	mov	r12, r24
    6f2a:	85 e0       	ldi	r24, 0x05	; 5
    6f2c:	d8 2e       	mov	r13, r24
    6f2e:	98 e0       	ldi	r25, 0x08	; 8
    6f30:	e9 2e       	mov	r14, r25
    6f32:	95 e0       	ldi	r25, 0x05	; 5
    6f34:	f9 2e       	mov	r15, r25
    6f36:	06 e0       	ldi	r16, 0x06	; 6
    6f38:	15 e0       	ldi	r17, 0x05	; 5
    6f3a:	20 91 fb 07 	lds	r18, 0x07FB
    6f3e:	40 e0       	ldi	r20, 0x00	; 0
    6f40:	50 e0       	ldi	r21, 0x00	; 0
    6f42:	6d e4       	ldi	r22, 0x4D	; 77
    6f44:	70 e0       	ldi	r23, 0x00	; 0
    6f46:	83 e1       	ldi	r24, 0x13	; 19
    6f48:	90 e0       	ldi	r25, 0x00	; 0
    6f4a:	0e 94 dd 34 	call	0x69ba	; 0x69ba <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    6f4e:	80 91 34 05 	lds	r24, 0x0534
    6f52:	90 91 35 05 	lds	r25, 0x0535
    6f56:	20 91 33 05 	lds	r18, 0x0533
    6f5a:	30 e0       	ldi	r19, 0x00	; 0
    6f5c:	82 17       	cp	r24, r18
    6f5e:	93 07       	cpc	r25, r19
    6f60:	69 f0       	breq	.+26     	; 0x6f7c <menu_main+0xe2>
		{
			cursor = LINE0;
    6f62:	b0 92 05 05 	sts	0x0505, r11
    6f66:	a0 92 04 05 	sts	0x0504, r10
			menu_temp = 0;
    6f6a:	10 92 32 05 	sts	0x0532, r1
    6f6e:	10 92 31 05 	sts	0x0531, r1
			old_menu = main_temp;
    6f72:	80 93 33 05 	sts	0x0533, r24
			menu_flag = 1;
    6f76:	21 e0       	ldi	r18, 0x01	; 1
    6f78:	20 93 fd 07 	sts	0x07FD, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    6f7c:	20 91 fb 07 	lds	r18, 0x07FB
    6f80:	20 3e       	cpi	r18, 0xE0	; 224
    6f82:	09 f0       	breq	.+2      	; 0x6f86 <menu_main+0xec>
    6f84:	a2 cf       	rjmp	.-188    	; 0x6eca <menu_main+0x30>
		{
			do_main_menu_item(main_temp);
    6f86:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <do_main_menu_item>
			button = NONE;
    6f8a:	90 92 fb 07 	sts	0x07FB, r9

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    6f8e:	0e 94 40 37 	call	0x6e80	; 0x6e80 <Wait_BUTTON1>
    6f92:	9b cf       	rjmp	.-202    	; 0x6eca <menu_main+0x30>
		}
	}
}
    6f94:	df 91       	pop	r29
    6f96:	cf 91       	pop	r28
    6f98:	1f 91       	pop	r17
    6f9a:	0f 91       	pop	r16
    6f9c:	ff 90       	pop	r15
    6f9e:	ef 90       	pop	r14
    6fa0:	df 90       	pop	r13
    6fa2:	cf 90       	pop	r12
    6fa4:	bf 90       	pop	r11
    6fa6:	af 90       	pop	r10
    6fa8:	9f 90       	pop	r9
    6faa:	08 95       	ret

00006fac <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    6fac:	1c 99       	sbic	0x03, 4	; 3
    6fae:	0a c0       	rjmp	.+20     	; 0x6fc4 <Wait_BUTTON4+0x18>
    6fb0:	2f e3       	ldi	r18, 0x3F	; 63
    6fb2:	8d e0       	ldi	r24, 0x0D	; 13
    6fb4:	93 e0       	ldi	r25, 0x03	; 3
    6fb6:	21 50       	subi	r18, 0x01	; 1
    6fb8:	80 40       	sbci	r24, 0x00	; 0
    6fba:	90 40       	sbci	r25, 0x00	; 0
    6fbc:	e1 f7       	brne	.-8      	; 0x6fb6 <Wait_BUTTON4+0xa>
    6fbe:	00 c0       	rjmp	.+0      	; 0x6fc0 <Wait_BUTTON4+0x14>
    6fc0:	00 00       	nop
    6fc2:	f4 cf       	rjmp	.-24     	; 0x6fac <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    6fc4:	08 95       	ret

00006fc6 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    6fc6:	6f 92       	push	r6
    6fc8:	7f 92       	push	r7
    6fca:	8f 92       	push	r8
    6fcc:	af 92       	push	r10
    6fce:	bf 92       	push	r11
    6fd0:	cf 92       	push	r12
    6fd2:	df 92       	push	r13
    6fd4:	ef 92       	push	r14
    6fd6:	ff 92       	push	r15
    6fd8:	0f 93       	push	r16
    6fda:	1f 93       	push	r17
    6fdc:	cf 93       	push	r28
    6fde:	df 93       	push	r29
    6fe0:	00 d0       	rcall	.+0      	; 0x6fe2 <menu_mixer+0x1c>
    6fe2:	00 d0       	rcall	.+0      	; 0x6fe4 <menu_mixer+0x1e>
    6fe4:	1f 92       	push	r1
    6fe6:	cd b7       	in	r28, 0x3d	; 61
    6fe8:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6fea:	90 91 fd 07 	lds	r25, 0x07FD
    6fee:	99 23       	and	r25, r25
    6ff0:	41 f0       	breq	.+16     	; 0x7002 <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    6ff2:	2e eb       	ldi	r18, 0xBE	; 190
    6ff4:	30 e0       	ldi	r19, 0x00	; 0
    6ff6:	30 93 37 05 	sts	0x0537, r19
    6ffa:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    6ffe:	10 92 fd 07 	sts	0x07FD, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    7002:	96 e2       	ldi	r25, 0x26	; 38
    7004:	89 9f       	mul	r24, r25
    7006:	30 01       	movw	r6, r0
    7008:	11 24       	eor	r1, r1
    700a:	c3 01       	movw	r24, r6
    700c:	89 5a       	subi	r24, 0xA9	; 169
    700e:	99 4f       	sbci	r25, 0xF9	; 249
    7010:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    7012:	80 91 fb 07 	lds	r24, 0x07FB
    7016:	80 37       	cpi	r24, 0x70	; 112
    7018:	09 f4       	brne	.+2      	; 0x701c <menu_mixer+0x56>
    701a:	66 c0       	rjmp	.+204    	; 0x70e8 <menu_mixer+0x122>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const uint16_t*)MixerMenuText, cursor);
    701c:	a0 90 04 05 	lds	r10, 0x0504
    7020:	b0 90 05 05 	lds	r11, 0x0505
    7024:	31 ee       	ldi	r19, 0xE1	; 225
    7026:	c3 2e       	mov	r12, r19
    7028:	39 e1       	ldi	r19, 0x19	; 25
    702a:	d3 2e       	mov	r13, r19
    702c:	49 e5       	ldi	r20, 0x59	; 89
    702e:	e4 2e       	mov	r14, r20
    7030:	f1 2c       	mov	r15, r1
    7032:	00 e0       	ldi	r16, 0x00	; 0
    7034:	27 e3       	ldi	r18, 0x37	; 55
    7036:	39 e1       	ldi	r19, 0x19	; 25
    7038:	a3 01       	movw	r20, r6
    703a:	6e eb       	ldi	r22, 0xBE	; 190
    703c:	70 e0       	ldi	r23, 0x00	; 0
    703e:	80 91 36 05 	lds	r24, 0x0536
    7042:	90 91 37 05 	lds	r25, 0x0537
    7046:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    704a:	51 e3       	ldi	r21, 0x31	; 49
    704c:	c5 2e       	mov	r12, r21
    704e:	55 e0       	ldi	r21, 0x05	; 5
    7050:	d5 2e       	mov	r13, r21
    7052:	66 e3       	ldi	r22, 0x36	; 54
    7054:	e6 2e       	mov	r14, r22
    7056:	65 e0       	ldi	r22, 0x05	; 5
    7058:	f6 2e       	mov	r15, r22
    705a:	04 e0       	ldi	r16, 0x04	; 4
    705c:	15 e0       	ldi	r17, 0x05	; 5
    705e:	20 91 fb 07 	lds	r18, 0x07FB
    7062:	40 e0       	ldi	r20, 0x00	; 0
    7064:	50 e0       	ldi	r21, 0x00	; 0
    7066:	6e eb       	ldi	r22, 0xBE	; 190
    7068:	70 e0       	ldi	r23, 0x00	; 0
    706a:	82 e2       	ldi	r24, 0x22	; 34
    706c:	90 e0       	ldi	r25, 0x00	; 0
    706e:	0e 94 dd 34 	call	0x69ba	; 0x69ba <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    7072:	60 91 31 05 	lds	r22, 0x0531
    7076:	6e 5b       	subi	r22, 0xBE	; 190
    7078:	87 e3       	ldi	r24, 0x37	; 55
    707a:	99 e1       	ldi	r25, 0x19	; 25
    707c:	0e 94 70 32 	call	0x64e0	; 0x64e0 <get_menu_range>
    7080:	29 83       	std	Y+1, r18	; 0x01
    7082:	3a 83       	std	Y+2, r19	; 0x02
    7084:	4b 83       	std	Y+3, r20	; 0x03
    7086:	5c 83       	std	Y+4, r21	; 0x04
    7088:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    708a:	80 91 fb 07 	lds	r24, 0x07FB
    708e:	80 3e       	cpi	r24, 0xE0	; 224
    7090:	f9 f4       	brne	.+62     	; 0x70d0 <menu_mixer+0x10a>
		{
			text_link = pgm_read_word(&MixerMenuText[menu_temp - MIXERSTART]);
    7092:	80 91 31 05 	lds	r24, 0x0531
    7096:	90 91 32 05 	lds	r25, 0x0532
    709a:	bc 01       	movw	r22, r24
    709c:	6e 5b       	subi	r22, 0xBE	; 190
    709e:	71 09       	sbc	r23, r1
    70a0:	fb 01       	movw	r30, r22
    70a2:	ee 0f       	add	r30, r30
    70a4:	ff 1f       	adc	r31, r31
    70a6:	ef 51       	subi	r30, 0x1F	; 31
    70a8:	f6 4e       	sbci	r31, 0xE6	; 230
    70aa:	a5 90       	lpm	r10, Z+
    70ac:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    70ae:	bb 24       	eor	r11, r11
    70b0:	66 0d       	add	r22, r6
    70b2:	77 1d       	adc	r23, r7
    70b4:	1f 92       	push	r1
    70b6:	1f 92       	push	r1
    70b8:	81 2c       	mov	r8, r1
    70ba:	c1 2c       	mov	r12, r1
    70bc:	e9 80       	ldd	r14, Y+1	; 0x01
    70be:	fa 80       	ldd	r15, Y+2	; 0x02
    70c0:	0b 81       	ldd	r16, Y+3	; 0x03
    70c2:	1c 81       	ldd	r17, Y+4	; 0x04
    70c4:	2d 81       	ldd	r18, Y+5	; 0x05
    70c6:	41 e0       	ldi	r20, 0x01	; 1
    70c8:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <do_menu_item>
    70cc:	0f 90       	pop	r0
    70ce:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    70d0:	80 91 fb 07 	lds	r24, 0x07FB
    70d4:	80 3e       	cpi	r24, 0xE0	; 224
    70d6:	09 f0       	breq	.+2      	; 0x70da <menu_mixer+0x114>
    70d8:	9c cf       	rjmp	.-200    	; 0x7012 <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    70da:	0e 94 c3 3a 	call	0x7586	; 0x7586 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    70de:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    70e2:	0e 94 d6 37 	call	0x6fac	; 0x6fac <Wait_BUTTON4>
    70e6:	95 cf       	rjmp	.-214    	; 0x7012 <menu_mixer+0x4c>
		}
	}
}
    70e8:	0f 90       	pop	r0
    70ea:	0f 90       	pop	r0
    70ec:	0f 90       	pop	r0
    70ee:	0f 90       	pop	r0
    70f0:	0f 90       	pop	r0
    70f2:	df 91       	pop	r29
    70f4:	cf 91       	pop	r28
    70f6:	1f 91       	pop	r17
    70f8:	0f 91       	pop	r16
    70fa:	ff 90       	pop	r15
    70fc:	ef 90       	pop	r14
    70fe:	df 90       	pop	r13
    7100:	cf 90       	pop	r12
    7102:	bf 90       	pop	r11
    7104:	af 90       	pop	r10
    7106:	8f 90       	pop	r8
    7108:	7f 90       	pop	r7
    710a:	6f 90       	pop	r6
    710c:	08 95       	ret

0000710e <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    710e:	2f 92       	push	r2
    7110:	3f 92       	push	r3
    7112:	4f 92       	push	r4
    7114:	5f 92       	push	r5
    7116:	6f 92       	push	r6
    7118:	7f 92       	push	r7
    711a:	8f 92       	push	r8
    711c:	9f 92       	push	r9
    711e:	af 92       	push	r10
    7120:	bf 92       	push	r11
    7122:	cf 92       	push	r12
    7124:	df 92       	push	r13
    7126:	ef 92       	push	r14
    7128:	ff 92       	push	r15
    712a:	0f 93       	push	r16
    712c:	1f 93       	push	r17
    712e:	cf 93       	push	r28
    7130:	df 93       	push	r29
    7132:	cd b7       	in	r28, 0x3d	; 61
    7134:	de b7       	in	r29, 0x3e	; 62
    7136:	28 97       	sbiw	r28, 0x08	; 8
    7138:	0f b6       	in	r0, 0x3f	; 63
    713a:	f8 94       	cli
    713c:	de bf       	out	0x3e, r29	; 62
    713e:	0f be       	out	0x3f, r0	; 63
    7140:	cd bf       	out	0x3d, r28	; 61
    7142:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    7144:	80 91 fd 07 	lds	r24, 0x07FD
    7148:	88 23       	and	r24, r24
    714a:	41 f0       	breq	.+16     	; 0x715c <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    714c:	86 ee       	ldi	r24, 0xE6	; 230
    714e:	90 e0       	ldi	r25, 0x00	; 0
    7150:	90 93 37 05 	sts	0x0537, r25
    7154:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    7158:	10 92 fd 07 	sts	0x07FD, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    715c:	1e 82       	std	Y+6, r1	; 0x06
    715e:	a3 e8       	ldi	r26, 0x83	; 131
    7160:	6a 2e       	mov	r6, r26
    7162:	a7 e0       	ldi	r26, 0x07	; 7
    7164:	7a 2e       	mov	r7, r26
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    7166:	89 2d       	mov	r24, r9
    7168:	90 e0       	ldi	r25, 0x00	; 0
    716a:	01 97       	sbiw	r24, 0x01	; 1
    716c:	25 e0       	ldi	r18, 0x05	; 5
    716e:	28 9f       	mul	r18, r24
    7170:	20 01       	movw	r4, r0
    7172:	29 9f       	mul	r18, r25
    7174:	50 0c       	add	r5, r0
    7176:	11 24       	eor	r1, r1
    7178:	92 01       	movw	r18, r4
    717a:	2b 5d       	subi	r18, 0xDB	; 219
    717c:	35 4e       	sbci	r19, 0xE5	; 229
    717e:	29 01       	movw	r4, r18
    7180:	1c 01       	movw	r2, r24
    7182:	b4 e0       	ldi	r27, 0x04	; 4
    7184:	22 0c       	add	r2, r2
    7186:	33 1c       	adc	r3, r3
    7188:	ba 95       	dec	r27
    718a:	e1 f7       	brne	.-8      	; 0x7184 <menu_servo_setup+0x76>
    718c:	f1 01       	movw	r30, r2
    718e:	ec 5c       	subi	r30, 0xCC	; 204
    7190:	f5 4e       	sbci	r31, 0xE5	; 229
    7192:	1f 01       	movw	r2, r30
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);

		if (button == ENTER)
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    7194:	9c 01       	movw	r18, r24
    7196:	13 e0       	ldi	r17, 0x03	; 3
    7198:	22 0f       	add	r18, r18
    719a:	33 1f       	adc	r19, r19
    719c:	1a 95       	dec	r17
    719e:	e1 f7       	brne	.-8      	; 0x7198 <menu_servo_setup+0x8a>
    71a0:	38 87       	std	Y+8, r19	; 0x08
    71a2:	2f 83       	std	Y+7, r18	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    71a4:	80 91 fb 07 	lds	r24, 0x07FB
    71a8:	80 37       	cpi	r24, 0x70	; 112
    71aa:	09 f4       	brne	.+2      	; 0x71ae <menu_servo_setup+0xa0>
    71ac:	92 c0       	rjmp	.+292    	; 0x72d2 <menu_servo_setup+0x1c4>
    71ae:	88 e0       	ldi	r24, 0x08	; 8
    71b0:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    71b2:	32 e0       	ldi	r19, 0x02	; 2
    71b4:	93 16       	cp	r9, r19
    71b6:	61 f0       	breq	.+24     	; 0x71d0 <menu_servo_setup+0xc2>
    71b8:	43 e0       	ldi	r20, 0x03	; 3
    71ba:	94 12       	cpse	r9, r20
    71bc:	11 c0       	rjmp	.+34     	; 0x71e0 <menu_servo_setup+0xd2>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    71be:	e1 e0       	ldi	r30, 0x01	; 1
    71c0:	ee 83       	std	Y+6, r30	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    71c2:	88 24       	eor	r8, r8
    71c4:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    71c6:	e3 e9       	ldi	r30, 0x93	; 147
    71c8:	6e 2e       	mov	r6, r30
    71ca:	e7 e0       	ldi	r30, 0x07	; 7
    71cc:	7e 2e       	mov	r7, r30
					servo_enable = true;
					zero_setting = true;
					break;
    71ce:	08 c0       	rjmp	.+16     	; 0x71e0 <menu_servo_setup+0xd2>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    71d0:	91 e0       	ldi	r25, 0x01	; 1
    71d2:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    71d4:	88 24       	eor	r8, r8
    71d6:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    71d8:	fb e8       	ldi	r31, 0x8B	; 139
    71da:	6f 2e       	mov	r6, r31
    71dc:	f7 e0       	ldi	r31, 0x07	; 7
    71de:	7f 2e       	mov	r7, r31
    71e0:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    71e2:	39 f7       	brne	.-50     	; 0x71b2 <menu_servo_setup+0xa4>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    71e4:	a0 90 04 05 	lds	r10, 0x0504
    71e8:	b0 90 05 05 	lds	r11, 0x0505
    71ec:	61 01       	movw	r12, r2
    71ee:	50 e5       	ldi	r21, 0x50	; 80
    71f0:	e5 2e       	mov	r14, r21
    71f2:	f1 2c       	mov	r15, r1
    71f4:	01 e0       	ldi	r16, 0x01	; 1
    71f6:	92 01       	movw	r18, r4
    71f8:	a3 01       	movw	r20, r6
    71fa:	66 ee       	ldi	r22, 0xE6	; 230
    71fc:	70 e0       	ldi	r23, 0x00	; 0
    71fe:	80 91 36 05 	lds	r24, 0x0536
    7202:	90 91 37 05 	lds	r25, 0x0537
    7206:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    720a:	61 e3       	ldi	r22, 0x31	; 49
    720c:	c6 2e       	mov	r12, r22
    720e:	65 e0       	ldi	r22, 0x05	; 5
    7210:	d6 2e       	mov	r13, r22
    7212:	76 e3       	ldi	r23, 0x36	; 54
    7214:	e7 2e       	mov	r14, r23
    7216:	75 e0       	ldi	r23, 0x05	; 5
    7218:	f7 2e       	mov	r15, r23
    721a:	04 e0       	ldi	r16, 0x04	; 4
    721c:	15 e0       	ldi	r17, 0x05	; 5
    721e:	20 91 fb 07 	lds	r18, 0x07FB
    7222:	40 e0       	ldi	r20, 0x00	; 0
    7224:	50 e0       	ldi	r21, 0x00	; 0
    7226:	66 ee       	ldi	r22, 0xE6	; 230
    7228:	70 e0       	ldi	r23, 0x00	; 0
    722a:	88 e0       	ldi	r24, 0x08	; 8
    722c:	90 e0       	ldi	r25, 0x00	; 0
    722e:	0e 94 dd 34 	call	0x69ba	; 0x69ba <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    7232:	60 e0       	ldi	r22, 0x00	; 0
    7234:	c2 01       	movw	r24, r4
    7236:	0e 94 70 32 	call	0x64e0	; 0x64e0 <get_menu_range>
    723a:	29 83       	std	Y+1, r18	; 0x01
    723c:	3a 83       	std	Y+2, r19	; 0x02
    723e:	4b 83       	std	Y+3, r20	; 0x03
    7240:	5c 83       	std	Y+4, r21	; 0x04
    7242:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    7244:	80 91 fb 07 	lds	r24, 0x07FB
    7248:	80 3e       	cpi	r24, 0xE0	; 224
    724a:	b9 f5       	brne	.+110    	; 0x72ba <menu_servo_setup+0x1ac>
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    724c:	80 91 31 05 	lds	r24, 0x0531
    7250:	90 91 32 05 	lds	r25, 0x0532
    7254:	9c 01       	movw	r18, r24
    7256:	26 5e       	subi	r18, 0xE6	; 230
    7258:	31 09       	sbc	r19, r1
    725a:	ef 81       	ldd	r30, Y+7	; 0x07
    725c:	f8 85       	ldd	r31, Y+8	; 0x08
    725e:	e2 0f       	add	r30, r18
    7260:	f3 1f       	adc	r31, r19
    7262:	ee 0f       	add	r30, r30
    7264:	ff 1f       	adc	r31, r31
    7266:	ec 5c       	subi	r30, 0xCC	; 204
    7268:	f5 4e       	sbci	r31, 0xE5	; 229
    726a:	a5 90       	lpm	r10, Z+
    726c:	b4 90       	lpm	r11, Z
    726e:	b3 01       	movw	r22, r6
    7270:	62 0f       	add	r22, r18
    7272:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    7274:	fe 81       	ldd	r31, Y+6	; 0x06
    7276:	ff 23       	and	r31, r31
    7278:	11 f0       	breq	.+4      	; 0x727e <menu_servo_setup+0x170>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    727a:	fb 01       	movw	r30, r22
    727c:	10 82       	st	Z, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    727e:	46 e2       	ldi	r20, 0x26	; 38
    7280:	42 9f       	mul	r20, r18
    7282:	f0 01       	movw	r30, r0
    7284:	43 9f       	mul	r20, r19
    7286:	f0 0d       	add	r31, r0
    7288:	11 24       	eor	r1, r1
    728a:	ef 58       	subi	r30, 0x8F	; 143
    728c:	f9 4f       	sbci	r31, 0xF9	; 249
    728e:	40 81       	ld	r20, Z
    7290:	41 11       	cpse	r20, r1
    7292:	05 c0       	rjmp	.+10     	; 0x729e <menu_servo_setup+0x190>
    7294:	40 91 ea 05 	lds	r20, 0x05EA
    7298:	41 11       	cpse	r20, r1
    729a:	01 c0       	rjmp	.+2      	; 0x729e <menu_servo_setup+0x190>
			{
				servo_enable = false;
    729c:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    729e:	bb 24       	eor	r11, r11
    72a0:	3f 93       	push	r19
    72a2:	2f 93       	push	r18
    72a4:	c1 2c       	mov	r12, r1
    72a6:	e9 80       	ldd	r14, Y+1	; 0x01
    72a8:	fa 80       	ldd	r15, Y+2	; 0x02
    72aa:	0b 81       	ldd	r16, Y+3	; 0x03
    72ac:	1c 81       	ldd	r17, Y+4	; 0x04
    72ae:	2d 81       	ldd	r18, Y+5	; 0x05
    72b0:	41 e0       	ldi	r20, 0x01	; 1
    72b2:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <do_menu_item>
    72b6:	0f 90       	pop	r0
    72b8:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    72ba:	80 91 fb 07 	lds	r24, 0x07FB
    72be:	80 3e       	cpi	r24, 0xE0	; 224
    72c0:	09 f0       	breq	.+2      	; 0x72c4 <menu_servo_setup+0x1b6>
    72c2:	70 cf       	rjmp	.-288    	; 0x71a4 <menu_servo_setup+0x96>
		{
			UpdateLimits();				// Update actual servo trims
    72c4:	0e 94 c3 3a 	call	0x7586	; 0x7586 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    72c8:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    72cc:	0e 94 d6 37 	call	0x6fac	; 0x6fac <Wait_BUTTON4>
    72d0:	69 cf       	rjmp	.-302    	; 0x71a4 <menu_servo_setup+0x96>
		}
	}
}
    72d2:	28 96       	adiw	r28, 0x08	; 8
    72d4:	0f b6       	in	r0, 0x3f	; 63
    72d6:	f8 94       	cli
    72d8:	de bf       	out	0x3e, r29	; 62
    72da:	0f be       	out	0x3f, r0	; 63
    72dc:	cd bf       	out	0x3d, r28	; 61
    72de:	df 91       	pop	r29
    72e0:	cf 91       	pop	r28
    72e2:	1f 91       	pop	r17
    72e4:	0f 91       	pop	r16
    72e6:	ff 90       	pop	r15
    72e8:	ef 90       	pop	r14
    72ea:	df 90       	pop	r13
    72ec:	cf 90       	pop	r12
    72ee:	bf 90       	pop	r11
    72f0:	af 90       	pop	r10
    72f2:	9f 90       	pop	r9
    72f4:	8f 90       	pop	r8
    72f6:	7f 90       	pop	r7
    72f8:	6f 90       	pop	r6
    72fa:	5f 90       	pop	r5
    72fc:	4f 90       	pop	r4
    72fe:	3f 90       	pop	r3
    7300:	2f 90       	pop	r2
    7302:	08 95       	ret

00007304 <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    7304:	2f 92       	push	r2
    7306:	3f 92       	push	r3
    7308:	4f 92       	push	r4
    730a:	5f 92       	push	r5
    730c:	6f 92       	push	r6
    730e:	7f 92       	push	r7
    7310:	8f 92       	push	r8
    7312:	9f 92       	push	r9
    7314:	af 92       	push	r10
    7316:	bf 92       	push	r11
    7318:	cf 92       	push	r12
    731a:	df 92       	push	r13
    731c:	ef 92       	push	r14
    731e:	ff 92       	push	r15
    7320:	0f 93       	push	r16
    7322:	1f 93       	push	r17
    7324:	cf 93       	push	r28
    7326:	df 93       	push	r29
    7328:	cd b7       	in	r28, 0x3d	; 61
    732a:	de b7       	in	r29, 0x3e	; 62
    732c:	2b 97       	sbiw	r28, 0x0b	; 11
    732e:	0f b6       	in	r0, 0x3f	; 63
    7330:	f8 94       	cli
    7332:	de bf       	out	0x3e, r29	; 62
    7334:	0f be       	out	0x3f, r0	; 63
    7336:	cd bf       	out	0x3d, r28	; 61
    7338:	98 2e       	mov	r9, r24
	uint8_t		i;
	uint16_t	offset = 0;			// Index into channel structure
	uint16_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    733a:	80 91 fd 07 	lds	r24, 0x07FD
    733e:	88 23       	and	r24, r24
    7340:	41 f0       	breq	.+16     	; 0x7352 <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    7342:	85 e9       	ldi	r24, 0x95	; 149
    7344:	90 e0       	ldi	r25, 0x00	; 0
    7346:	90 93 37 05 	sts	0x0537, r25
    734a:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    734e:	10 92 fd 07 	sts	0x07FD, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    7352:	27 e0       	ldi	r18, 0x07	; 7
    7354:	30 e0       	ldi	r19, 0x00	; 0
    7356:	39 87       	std	Y+9, r19	; 0x09
    7358:	28 87       	std	Y+8, r18	; 0x08
    735a:	61 2c       	mov	r6, r1
    735c:	71 2c       	mov	r7, r1
    735e:	4a ee       	ldi	r20, 0xEA	; 234
    7360:	55 e0       	ldi	r21, 0x05	; 5
    7362:	5f 83       	std	Y+7, r21	; 0x07
    7364:	4e 83       	std	Y+6, r20	; 0x06

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    7366:	89 2d       	mov	r24, r9
    7368:	90 e0       	ldi	r25, 0x00	; 0
    736a:	01 97       	sbiw	r24, 0x01	; 1
    736c:	22 e3       	ldi	r18, 0x32	; 50
    736e:	28 9f       	mul	r18, r24
    7370:	20 01       	movw	r4, r0
    7372:	29 9f       	mul	r18, r25
    7374:	50 0c       	add	r5, r0
    7376:	11 24       	eor	r1, r1
    7378:	92 01       	movw	r18, r4
    737a:	2c 59       	subi	r18, 0x9C	; 156
    737c:	35 4e       	sbci	r19, 0xE5	; 229
    737e:	29 01       	movw	r4, r18
    7380:	24 e1       	ldi	r18, 0x14	; 20
    7382:	28 9f       	mul	r18, r24
    7384:	10 01       	movw	r2, r0
    7386:	29 9f       	mul	r18, r25
    7388:	30 0c       	add	r3, r0
    738a:	11 24       	eor	r1, r1
    738c:	a1 01       	movw	r20, r2
    738e:	48 53       	subi	r20, 0x38	; 56
    7390:	55 4e       	sbci	r21, 0xE5	; 229
    7392:	1a 01       	movw	r2, r20
			Config.Preset = QUADX;			
		}

		if (button == ENTER)
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    7394:	2a e0       	ldi	r18, 0x0A	; 10
    7396:	28 9f       	mul	r18, r24
    7398:	a0 01       	movw	r20, r0
    739a:	29 9f       	mul	r18, r25
    739c:	50 0d       	add	r21, r0
    739e:	11 24       	eor	r1, r1
    73a0:	5b 87       	std	Y+11, r21	; 0x0b
    73a2:	4a 87       	std	Y+10, r20	; 0x0a
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    73a4:	80 91 fb 07 	lds	r24, 0x07FB
    73a8:	80 37       	cpi	r24, 0x70	; 112
    73aa:	09 f4       	brne	.+2      	; 0x73ae <menu_rc_setup+0xaa>
    73ac:	d3 c0       	rjmp	.+422    	; 0x7554 <menu_rc_setup+0x250>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    73ae:	52 e0       	ldi	r21, 0x02	; 2
    73b0:	95 12       	cpse	r9, r21
    73b2:	0b c0       	rjmp	.+22     	; 0x73ca <menu_rc_setup+0xc6>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
    73b4:	8a e0       	ldi	r24, 0x0A	; 10
    73b6:	90 e0       	ldi	r25, 0x00	; 0
    73b8:	99 87       	std	Y+9, r25	; 0x09
    73ba:	88 87       	std	Y+8, r24	; 0x08
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    73bc:	69 e0       	ldi	r22, 0x09	; 9
    73be:	66 2e       	mov	r6, r22
    73c0:	71 2c       	mov	r7, r1
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    73c2:	29 e4       	ldi	r18, 0x49	; 73
    73c4:	36 e0       	ldi	r19, 0x06	; 6
    73c6:	3f 83       	std	Y+7, r19	; 0x07
    73c8:	2e 83       	std	Y+6, r18	; 0x06
			default:
				break;
		}

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;
    73ca:	84 e0       	ldi	r24, 0x04	; 4
    73cc:	80 93 52 06 	sts	0x0652, r24

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    73d0:	a0 90 04 05 	lds	r10, 0x0504
    73d4:	b0 90 05 05 	lds	r11, 0x0505
    73d8:	80 91 36 05 	lds	r24, 0x0536
    73dc:	90 91 37 05 	lds	r25, 0x0537
    73e0:	61 01       	movw	r12, r2
    73e2:	3f e4       	ldi	r19, 0x4F	; 79
    73e4:	e3 2e       	mov	r14, r19
    73e6:	f1 2c       	mov	r15, r1
    73e8:	00 e0       	ldi	r16, 0x00	; 0
    73ea:	92 01       	movw	r18, r4
    73ec:	4e 81       	ldd	r20, Y+6	; 0x06
    73ee:	5f 81       	ldd	r21, Y+7	; 0x07
    73f0:	b3 01       	movw	r22, r6
    73f2:	6b 56       	subi	r22, 0x6B	; 107
    73f4:	7f 4f       	sbci	r23, 0xFF	; 255
    73f6:	86 0d       	add	r24, r6
    73f8:	97 1d       	adc	r25, r7
    73fa:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    73fe:	41 e3       	ldi	r20, 0x31	; 49
    7400:	c4 2e       	mov	r12, r20
    7402:	45 e0       	ldi	r20, 0x05	; 5
    7404:	d4 2e       	mov	r13, r20
    7406:	56 e3       	ldi	r21, 0x36	; 54
    7408:	e5 2e       	mov	r14, r21
    740a:	55 e0       	ldi	r21, 0x05	; 5
    740c:	f5 2e       	mov	r15, r21
    740e:	04 e0       	ldi	r16, 0x04	; 4
    7410:	15 e0       	ldi	r17, 0x05	; 5
    7412:	20 91 fb 07 	lds	r18, 0x07FB
    7416:	a3 01       	movw	r20, r6
    7418:	65 e9       	ldi	r22, 0x95	; 149
    741a:	70 e0       	ldi	r23, 0x00	; 0
    741c:	88 85       	ldd	r24, Y+8	; 0x08
    741e:	99 85       	ldd	r25, Y+9	; 0x09
    7420:	0e 94 dd 34 	call	0x69ba	; 0x69ba <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    7424:	60 91 31 05 	lds	r22, 0x0531
    7428:	65 59       	subi	r22, 0x95	; 149
    742a:	66 19       	sub	r22, r6
    742c:	c2 01       	movw	r24, r4
    742e:	0e 94 70 32 	call	0x64e0	; 0x64e0 <get_menu_range>
    7432:	29 83       	std	Y+1, r18	; 0x01
    7434:	3a 83       	std	Y+2, r19	; 0x02
    7436:	4b 83       	std	Y+3, r20	; 0x03
    7438:	5c 83       	std	Y+4, r21	; 0x04
    743a:	6d 83       	std	Y+5, r22	; 0x05

		// If actually editing the preset, show the default setting
		if (menu_temp == PRESETITEM)
    743c:	80 91 31 05 	lds	r24, 0x0531
    7440:	90 91 32 05 	lds	r25, 0x0532
    7444:	87 3a       	cpi	r24, 0xA7	; 167
    7446:	91 05       	cpc	r25, r1
    7448:	11 f4       	brne	.+4      	; 0x744e <menu_rc_setup+0x14a>
		{
			Config.Preset = QUADX;			
    744a:	10 92 52 06 	sts	0x0652, r1
		}

		if (button == ENTER)
    744e:	20 91 fb 07 	lds	r18, 0x07FB
    7452:	20 3e       	cpi	r18, 0xE0	; 224
    7454:	09 f5       	brne	.+66     	; 0x7498 <menu_rc_setup+0x194>
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    7456:	bc 01       	movw	r22, r24
    7458:	65 59       	subi	r22, 0x95	; 149
    745a:	71 09       	sbc	r23, r1
    745c:	66 19       	sub	r22, r6
    745e:	77 09       	sbc	r23, r7
    7460:	ea 85       	ldd	r30, Y+10	; 0x0a
    7462:	fb 85       	ldd	r31, Y+11	; 0x0b
    7464:	e6 0f       	add	r30, r22
    7466:	f7 1f       	adc	r31, r23
    7468:	ee 0f       	add	r30, r30
    746a:	ff 1f       	adc	r31, r31
    746c:	e8 53       	subi	r30, 0x38	; 56
    746e:	f5 4e       	sbci	r31, 0xE5	; 229
    7470:	a5 90       	lpm	r10, Z+
    7472:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    7474:	4e 81       	ldd	r20, Y+6	; 0x06
    7476:	5f 81       	ldd	r21, Y+7	; 0x07
    7478:	64 0f       	add	r22, r20
    747a:	75 1f       	adc	r23, r21
    747c:	1f 92       	push	r1
    747e:	1f 92       	push	r1
    7480:	81 2c       	mov	r8, r1
    7482:	c1 2c       	mov	r12, r1
    7484:	e9 80       	ldd	r14, Y+1	; 0x01
    7486:	fa 80       	ldd	r15, Y+2	; 0x02
    7488:	0b 81       	ldd	r16, Y+3	; 0x03
    748a:	1c 81       	ldd	r17, Y+4	; 0x04
    748c:	2d 81       	ldd	r18, Y+5	; 0x05
    748e:	41 e0       	ldi	r20, 0x01	; 1
    7490:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <do_menu_item>
    7494:	0f 90       	pop	r0
    7496:	0f 90       	pop	r0
		}

		// Handle abort neatly
		if (button == ABORT)
    7498:	80 91 fb 07 	lds	r24, 0x07FB
    749c:	80 3a       	cpi	r24, 0xA0	; 160
    749e:	41 f4       	brne	.+16     	; 0x74b0 <menu_rc_setup+0x1ac>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    74a0:	0e 94 40 37 	call	0x6e80	; 0x6e80 <Wait_BUTTON1>
			button = NONE;
    74a4:	80 ef       	ldi	r24, 0xF0	; 240
    74a6:	80 93 fb 07 	sts	0x07FB, r24
			
			// Reset the mixer preset if unchanged
			Config.Preset = OPTIONS;
    74aa:	84 e0       	ldi	r24, 0x04	; 4
    74ac:	80 93 52 06 	sts	0x0652, r24
		}

		if (button == ENTER)
    74b0:	80 91 fb 07 	lds	r24, 0x07FB
    74b4:	80 3e       	cpi	r24, 0xE0	; 224
    74b6:	09 f0       	breq	.+2      	; 0x74ba <menu_rc_setup+0x1b6>
    74b8:	75 cf       	rjmp	.-278    	; 0x73a4 <menu_rc_setup+0xa0>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    74ba:	0e 94 e7 31 	call	0x63ce	; 0x63ce <init_int>
			init_uart();			// and UART
    74be:	0e 94 36 4a 	call	0x946c	; 0x946c <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    74c2:	0e 94 c3 3a 	call	0x7586	; 0x7586 <UpdateLimits>
			
			// See if mixer preset has changed. Load new preset only if so
			if ((Config.Preset != OPTIONS) && (menu_temp == PRESETITEM))
    74c6:	80 91 52 06 	lds	r24, 0x0652
    74ca:	84 30       	cpi	r24, 0x04	; 4
    74cc:	49 f0       	breq	.+18     	; 0x74e0 <menu_rc_setup+0x1dc>
    74ce:	20 91 31 05 	lds	r18, 0x0531
    74d2:	30 91 32 05 	lds	r19, 0x0532
    74d6:	27 3a       	cpi	r18, 0xA7	; 167
    74d8:	31 05       	cpc	r19, r1
    74da:	11 f4       	brne	.+4      	; 0x74e0 <menu_rc_setup+0x1dc>
			{
				Load_eeprom_preset(Config.Preset);
    74dc:	0e 94 ca 19 	call	0x3394	; 0x3394 <Load_eeprom_preset>
			}

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    74e0:	46 e0       	ldi	r20, 0x06	; 6
    74e2:	80 91 4e 06 	lds	r24, 0x064E
    74e6:	48 1b       	sub	r20, r24
    74e8:	6a e1       	ldi	r22, 0x1A	; 26
    74ea:	80 ed       	ldi	r24, 0xD0	; 208
    74ec:	0e 94 7d 27 	call	0x4efa	; 0x4efa <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    74f0:	20 91 ed 05 	lds	r18, 0x05ED
    74f4:	a2 ec       	ldi	r26, 0xC2	; 194
    74f6:	b5 e0       	ldi	r27, 0x05	; 5
    74f8:	80 e0       	ldi	r24, 0x00	; 0
    74fa:	90 e0       	ldi	r25, 0x00	; 0
    74fc:	fc 01       	movw	r30, r24
    74fe:	21 30       	cpi	r18, 0x01	; 1
    7500:	19 f4       	brne	.+6      	; 0x7508 <menu_rc_setup+0x204>
    7502:	e2 51       	subi	r30, 0x12	; 18
    7504:	ff 4f       	sbci	r31, 0xFF	; 255
    7506:	02 c0       	rjmp	.+4      	; 0x750c <menu_rc_setup+0x208>
    7508:	ea 50       	subi	r30, 0x0A	; 10
    750a:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    750c:	e4 91       	lpm	r30, Z
    750e:	ec 93       	st	X, r30
    7510:	01 96       	adiw	r24, 0x01	; 1
    7512:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    7514:	88 30       	cpi	r24, 0x08	; 8
    7516:	91 05       	cpc	r25, r1
    7518:	89 f7       	brne	.-30     	; 0x74fc <menu_rc_setup+0x1f8>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    751a:	80 91 ea 05 	lds	r24, 0x05EA
    751e:	82 30       	cpi	r24, 0x02	; 2
    7520:	3c f4       	brge	.+14     	; 0x7530 <menu_rc_setup+0x22c>
    7522:	80 91 eb 05 	lds	r24, 0x05EB
    7526:	82 30       	cpi	r24, 0x02	; 2
    7528:	19 f4       	brne	.+6      	; 0x7530 <menu_rc_setup+0x22c>
			{
				Config.Servo_rate = SYNC;
    752a:	81 e0       	ldi	r24, 0x01	; 1
    752c:	80 93 eb 05 	sts	0x05EB, r24
			}
						
			if (Config.ArmMode == ARMABLE)
    7530:	80 91 4b 06 	lds	r24, 0x064B
    7534:	81 30       	cpi	r24, 0x01	; 1
    7536:	31 f4       	brne	.+12     	; 0x7544 <menu_rc_setup+0x240>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    7538:	80 91 20 05 	lds	r24, 0x0520
    753c:	84 60       	ori	r24, 0x04	; 4
    753e:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    7542:	2b 98       	cbi	0x05, 3	; 5
			}

			// Return the preset to "Options" when going back to the General menu
			Config.Preset = OPTIONS;
    7544:	84 e0       	ldi	r24, 0x04	; 4
    7546:	80 93 52 06 	sts	0x0652, r24

			Save_Config_to_EEPROM(); // Save value and return
    754a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    754e:	0e 94 d6 37 	call	0x6fac	; 0x6fac <Wait_BUTTON4>
    7552:	28 cf       	rjmp	.-432    	; 0x73a4 <menu_rc_setup+0xa0>
		}
	}
}
    7554:	2b 96       	adiw	r28, 0x0b	; 11
    7556:	0f b6       	in	r0, 0x3f	; 63
    7558:	f8 94       	cli
    755a:	de bf       	out	0x3e, r29	; 62
    755c:	0f be       	out	0x3f, r0	; 63
    755e:	cd bf       	out	0x3d, r28	; 61
    7560:	df 91       	pop	r29
    7562:	cf 91       	pop	r28
    7564:	1f 91       	pop	r17
    7566:	0f 91       	pop	r16
    7568:	ff 90       	pop	r15
    756a:	ef 90       	pop	r14
    756c:	df 90       	pop	r13
    756e:	cf 90       	pop	r12
    7570:	bf 90       	pop	r11
    7572:	af 90       	pop	r10
    7574:	9f 90       	pop	r9
    7576:	8f 90       	pop	r8
    7578:	7f 90       	pop	r7
    757a:	6f 90       	pop	r6
    757c:	5f 90       	pop	r5
    757e:	4f 90       	pop	r4
    7580:	3f 90       	pop	r3
    7582:	2f 90       	pop	r2
    7584:	08 95       	ret

00007586 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7586:	6f 92       	push	r6
    7588:	7f 92       	push	r7
    758a:	8f 92       	push	r8
    758c:	9f 92       	push	r9
    758e:	af 92       	push	r10
    7590:	bf 92       	push	r11
    7592:	cf 92       	push	r12
    7594:	df 92       	push	r13
    7596:	ef 92       	push	r14
    7598:	ff 92       	push	r15
    759a:	0f 93       	push	r16
    759c:	1f 93       	push	r17
    759e:	cf 93       	push	r28
    75a0:	df 93       	push	r29
    75a2:	cd b7       	in	r28, 0x3d	; 61
    75a4:	de b7       	in	r29, 0x3e	; 62
    75a6:	2c 97       	sbiw	r28, 0x0c	; 12
    75a8:	0f b6       	in	r0, 0x3f	; 63
    75aa:	f8 94       	cli
    75ac:	de bf       	out	0x3e, r29	; 62
    75ae:	0f be       	out	0x3f, r0	; 63
    75b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    75b2:	80 91 f5 05 	lds	r24, 0x05F5
    75b6:	8f 83       	std	Y+7, r24	; 0x07
    75b8:	80 91 fb 05 	lds	r24, 0x05FB
    75bc:	88 87       	std	Y+8, r24	; 0x08
    75be:	80 91 01 06 	lds	r24, 0x0601
    75c2:	89 87       	std	Y+9, r24	; 0x09
    75c4:	80 91 07 06 	lds	r24, 0x0607
    75c8:	8a 87       	std	Y+10, r24	; 0x0a
    75ca:	80 91 0d 06 	lds	r24, 0x060D
    75ce:	8b 87       	std	Y+11, r24	; 0x0b
    75d0:	80 91 13 06 	lds	r24, 0x0613
    75d4:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    75d6:	80 91 f4 05 	lds	r24, 0x05F4
    75da:	89 83       	std	Y+1, r24	; 0x01
    75dc:	80 91 fa 05 	lds	r24, 0x05FA
    75e0:	8a 83       	std	Y+2, r24	; 0x02
    75e2:	80 91 00 06 	lds	r24, 0x0600
    75e6:	8b 83       	std	Y+3, r24	; 0x03
    75e8:	80 91 06 06 	lds	r24, 0x0606
    75ec:	8c 83       	std	Y+4, r24	; 0x04
    75ee:	80 91 0c 06 	lds	r24, 0x060C
    75f2:	8d 83       	std	Y+5, r24	; 0x05
    75f4:	80 91 12 06 	lds	r24, 0x0612
    75f8:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    75fa:	80 91 4d 06 	lds	r24, 0x064D
    75fe:	99 27       	eor	r25, r25
    7600:	87 fd       	sbrc	r24, 7
    7602:	90 95       	com	r25
    7604:	a9 2f       	mov	r26, r25
    7606:	b9 2f       	mov	r27, r25
    7608:	89 30       	cpi	r24, 0x09	; 9
    760a:	91 05       	cpc	r25, r1
    760c:	08 f5       	brcc	.+66     	; 0x7650 <UpdateLimits+0xca>
    760e:	fc 01       	movw	r30, r24
    7610:	e4 5a       	subi	r30, 0xA4	; 164
    7612:	ff 4f       	sbci	r31, 0xFF	; 255
    7614:	0c 94 44 4d 	jmp	0x9a88	; 0x9a88 <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    7618:	80 e4       	ldi	r24, 0x40	; 64
    761a:	91 e0       	ldi	r25, 0x01	; 1
    761c:	14 c0       	rjmp	.+40     	; 0x7646 <UpdateLimits+0xc0>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    761e:	8a e4       	ldi	r24, 0x4A	; 74
    7620:	91 e0       	ldi	r25, 0x01	; 1
    7622:	11 c0       	rjmp	.+34     	; 0x7646 <UpdateLimits+0xc0>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    7624:	84 e5       	ldi	r24, 0x54	; 84
    7626:	91 e0       	ldi	r25, 0x01	; 1
    7628:	0e c0       	rjmp	.+28     	; 0x7646 <UpdateLimits+0xc0>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    762a:	8e e5       	ldi	r24, 0x5E	; 94
    762c:	91 e0       	ldi	r25, 0x01	; 1
    762e:	0b c0       	rjmp	.+22     	; 0x7646 <UpdateLimits+0xc0>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    7630:	88 e6       	ldi	r24, 0x68	; 104
    7632:	91 e0       	ldi	r25, 0x01	; 1
    7634:	08 c0       	rjmp	.+16     	; 0x7646 <UpdateLimits+0xc0>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    7636:	82 e7       	ldi	r24, 0x72	; 114
    7638:	91 e0       	ldi	r25, 0x01	; 1
    763a:	05 c0       	rjmp	.+10     	; 0x7646 <UpdateLimits+0xc0>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    763c:	8c e7       	ldi	r24, 0x7C	; 124
    763e:	91 e0       	ldi	r25, 0x01	; 1
    7640:	02 c0       	rjmp	.+4      	; 0x7646 <UpdateLimits+0xc0>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    7642:	86 e8       	ldi	r24, 0x86	; 134
    7644:	91 e0       	ldi	r25, 0x01	; 1
    7646:	90 93 48 06 	sts	0x0648, r25
    764a:	80 93 47 06 	sts	0x0647, r24
			break;
    764e:	04 c0       	rjmp	.+8      	; 0x7658 <UpdateLimits+0xd2>
		default:
			Config.PowerTriggerActual = 0;			// Off
    7650:	10 92 48 06 	sts	0x0648, r1
    7654:	10 92 47 06 	sts	0x0647, r1
			break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    7658:	20 91 2e 05 	lds	r18, 0x052E
    765c:	30 91 2f 05 	lds	r19, 0x052F
    7660:	80 91 47 06 	lds	r24, 0x0647
    7664:	90 91 48 06 	lds	r25, 0x0648
    7668:	26 36       	cpi	r18, 0x66	; 102
    766a:	48 e0       	ldi	r20, 0x08	; 8
    766c:	34 07       	cpc	r19, r20
    766e:	88 f0       	brcs	.+34     	; 0x7692 <UpdateLimits+0x10c>
	{
		Config.PowerTriggerActual *= 6;
    7670:	46 e0       	ldi	r20, 0x06	; 6
    7672:	48 9f       	mul	r20, r24
    7674:	90 01       	movw	r18, r0
    7676:	49 9f       	mul	r20, r25
    7678:	30 0d       	add	r19, r0
    767a:	11 24       	eor	r1, r1
    767c:	30 93 48 06 	sts	0x0648, r19
    7680:	20 93 47 06 	sts	0x0647, r18
    7684:	77 e1       	ldi	r23, 0x17	; 23
    7686:	a7 2e       	mov	r10, r23
    7688:	76 e0       	ldi	r23, 0x06	; 6
    768a:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    768c:	00 e0       	ldi	r16, 0x00	; 0
    768e:	10 e0       	ldi	r17, 0x00	; 0
    7690:	25 c0       	rjmp	.+74     	; 0x76dc <UpdateLimits+0x156>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    7692:	a9 01       	movw	r20, r18
    7694:	42 5c       	subi	r20, 0xC2	; 194
    7696:	56 40       	sbci	r21, 0x06	; 6
    7698:	44 3a       	cpi	r20, 0xA4	; 164
    769a:	51 40       	sbci	r21, 0x01	; 1
    769c:	10 f4       	brcc	.+4      	; 0x76a2 <UpdateLimits+0x11c>
	{
		Config.PowerTriggerActual *= 5;
    769e:	45 e0       	ldi	r20, 0x05	; 5
    76a0:	e8 cf       	rjmp	.-48     	; 0x7672 <UpdateLimits+0xec>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    76a2:	a9 01       	movw	r20, r18
    76a4:	44 51       	subi	r20, 0x14	; 20
    76a6:	55 40       	sbci	r21, 0x05	; 5
    76a8:	4e 3a       	cpi	r20, 0xAE	; 174
    76aa:	51 40       	sbci	r21, 0x01	; 1
    76ac:	28 f4       	brcc	.+10     	; 0x76b8 <UpdateLimits+0x132>
	{
		Config.PowerTriggerActual *= 4;
    76ae:	88 0f       	add	r24, r24
    76b0:	99 1f       	adc	r25, r25
    76b2:	88 0f       	add	r24, r24
    76b4:	99 1f       	adc	r25, r25
    76b6:	0d c0       	rjmp	.+26     	; 0x76d2 <UpdateLimits+0x14c>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    76b8:	24 58       	subi	r18, 0x84	; 132
    76ba:	33 40       	sbci	r19, 0x03	; 3
    76bc:	20 39       	cpi	r18, 0x90	; 144
    76be:	31 40       	sbci	r19, 0x01	; 1
    76c0:	30 f4       	brcc	.+12     	; 0x76ce <UpdateLimits+0x148>
	{
		Config.PowerTriggerActual *= 3;
    76c2:	9c 01       	movw	r18, r24
    76c4:	22 0f       	add	r18, r18
    76c6:	33 1f       	adc	r19, r19
    76c8:	28 0f       	add	r18, r24
    76ca:	39 1f       	adc	r19, r25
    76cc:	d7 cf       	rjmp	.-82     	; 0x767c <UpdateLimits+0xf6>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    76ce:	88 0f       	add	r24, r24
    76d0:	99 1f       	adc	r25, r25
    76d2:	90 93 48 06 	sts	0x0648, r25
    76d6:	80 93 47 06 	sts	0x0647, r24
    76da:	d4 cf       	rjmp	.-88     	; 0x7684 <UpdateLimits+0xfe>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    76dc:	65 01       	movw	r12, r10
    76de:	e1 2c       	mov	r14, r1
    76e0:	f1 2c       	mov	r15, r1
    76e2:	87 e0       	ldi	r24, 0x07	; 7
    76e4:	88 2e       	mov	r8, r24
    76e6:	91 2c       	mov	r9, r1
    76e8:	8c 0e       	add	r8, r28
    76ea:	9d 1e       	adc	r9, r29
    76ec:	80 0e       	add	r8, r16
    76ee:	91 1e       	adc	r9, r17
    76f0:	66 24       	eor	r6, r6
    76f2:	63 94       	inc	r6
    76f4:	71 2c       	mov	r7, r1
    76f6:	6c 0e       	add	r6, r28
    76f8:	7d 1e       	adc	r7, r29
    76fa:	60 0e       	add	r6, r16
    76fc:	71 1e       	adc	r7, r17
    76fe:	f4 01       	movw	r30, r8
    7700:	ee 0d       	add	r30, r14
    7702:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    7704:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    7706:	bb 27       	eor	r27, r27
    7708:	a7 fd       	sbrc	r26, 7
    770a:	b0 95       	com	r27
    770c:	20 e8       	ldi	r18, 0x80	; 128
    770e:	32 e0       	ldi	r19, 0x02	; 2
    7710:	0e 94 61 4d 	call	0x9ac2	; 0x9ac2 <__usmulhisi3>
    7714:	f6 01       	movw	r30, r12
    7716:	61 93       	st	Z+, r22
    7718:	71 93       	st	Z+, r23
    771a:	81 93       	st	Z+, r24
    771c:	91 93       	st	Z+, r25
    771e:	6f 01       	movw	r12, r30
    7720:	f3 01       	movw	r30, r6
    7722:	ee 0d       	add	r30, r14
    7724:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    7726:	20 81       	ld	r18, Z
    7728:	22 23       	and	r18, r18
    772a:	b1 f0       	breq	.+44     	; 0x7758 <UpdateLimits+0x1d2>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    772c:	35 e0       	ldi	r19, 0x05	; 5
    772e:	66 0f       	add	r22, r22
    7730:	77 1f       	adc	r23, r23
    7732:	88 1f       	adc	r24, r24
    7734:	99 1f       	adc	r25, r25
    7736:	3a 95       	dec	r19
    7738:	d1 f7       	brne	.-12     	; 0x772e <UpdateLimits+0x1a8>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    773a:	33 27       	eor	r19, r19
    773c:	27 fd       	sbrc	r18, 7
    773e:	30 95       	com	r19
    7740:	43 2f       	mov	r20, r19
    7742:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    7744:	0e 94 25 4d 	call	0x9a4a	; 0x9a4a <__divmodsi4>
    7748:	d6 01       	movw	r26, r12
    774a:	54 96       	adiw	r26, 0x14	; 20
    774c:	2d 93       	st	X+, r18
    774e:	3d 93       	st	X+, r19
    7750:	4d 93       	st	X+, r20
    7752:	5c 93       	st	X, r21
    7754:	57 97       	sbiw	r26, 0x17	; 23
    7756:	05 c0       	rjmp	.+10     	; 0x7762 <UpdateLimits+0x1dc>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    7758:	f6 01       	movw	r30, r12
    775a:	14 8a       	std	Z+20, r1	; 0x14
    775c:	15 8a       	std	Z+21, r1	; 0x15
    775e:	16 8a       	std	Z+22, r1	; 0x16
    7760:	17 8a       	std	Z+23, r1	; 0x17
    7762:	ff ef       	ldi	r31, 0xFF	; 255
    7764:	ef 1a       	sub	r14, r31
    7766:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    7768:	23 e0       	ldi	r18, 0x03	; 3
    776a:	e2 16       	cp	r14, r18
    776c:	f1 04       	cpc	r15, r1
    776e:	39 f6       	brne	.-114    	; 0x76fe <UpdateLimits+0x178>
    7770:	4c e0       	ldi	r20, 0x0C	; 12
    7772:	a4 0e       	add	r10, r20
    7774:	b1 1c       	adc	r11, r1
    7776:	0d 5f       	subi	r16, 0xFD	; 253
    7778:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    777a:	06 30       	cpi	r16, 0x06	; 6
    777c:	11 05       	cpc	r17, r1
    777e:	09 f0       	breq	.+2      	; 0x7782 <UpdateLimits+0x1fc>
    7780:	ad cf       	rjmp	.-166    	; 0x76dc <UpdateLimits+0x156>
    7782:	8b e8       	ldi	r24, 0x8B	; 139
    7784:	97 e0       	ldi	r25, 0x07	; 7
    7786:	ea ec       	ldi	r30, 0xCA	; 202
    7788:	f5 e0       	ldi	r31, 0x05	; 5
    778a:	63 e9       	ldi	r22, 0x93	; 147
    778c:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    778e:	dc 01       	movw	r26, r24
    7790:	2d 91       	ld	r18, X+
    7792:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7794:	ba e0       	ldi	r27, 0x0A	; 10
    7796:	2b 02       	muls	r18, r27
    7798:	90 01       	movw	r18, r0
    779a:	11 24       	eor	r1, r1
    779c:	2a 55       	subi	r18, 0x5A	; 90
    779e:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    77a0:	31 83       	std	Z+1, r19	; 0x01
    77a2:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    77a4:	db 01       	movw	r26, r22
    77a6:	2d 91       	ld	r18, X+
    77a8:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    77aa:	ba e0       	ldi	r27, 0x0A	; 10
    77ac:	2b 02       	muls	r18, r27
    77ae:	90 01       	movw	r18, r0
    77b0:	11 24       	eor	r1, r1
    77b2:	2a 55       	subi	r18, 0x5A	; 90
    77b4:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    77b6:	33 83       	std	Z+3, r19	; 0x03
    77b8:	22 83       	std	Z+2, r18	; 0x02
    77ba:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    77bc:	25 e0       	ldi	r18, 0x05	; 5
    77be:	ea 3e       	cpi	r30, 0xEA	; 234
    77c0:	f2 07       	cpc	r31, r18
    77c2:	29 f7       	brne	.-54     	; 0x778e <UpdateLimits+0x208>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    77c4:	80 91 f8 05 	lds	r24, 0x05F8
    77c8:	4a e0       	ldi	r20, 0x0A	; 10
    77ca:	84 02       	muls	r24, r20
    77cc:	c0 01       	movw	r24, r0
    77ce:	11 24       	eor	r1, r1
    77d0:	90 93 c1 07 	sts	0x07C1, r25
    77d4:	80 93 c0 07 	sts	0x07C0, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    77d8:	80 91 fe 05 	lds	r24, 0x05FE
    77dc:	6a e0       	ldi	r22, 0x0A	; 10
    77de:	86 02       	muls	r24, r22
    77e0:	c0 01       	movw	r24, r0
    77e2:	11 24       	eor	r1, r1
    77e4:	90 93 c5 07 	sts	0x07C5, r25
    77e8:	80 93 c4 07 	sts	0x07C4, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    77ec:	80 91 0a 06 	lds	r24, 0x060A
    77f0:	aa e0       	ldi	r26, 0x0A	; 10
    77f2:	8a 02       	muls	r24, r26
    77f4:	c0 01       	movw	r24, r0
    77f6:	11 24       	eor	r1, r1
    77f8:	90 93 c3 07 	sts	0x07C3, r25
    77fc:	80 93 c2 07 	sts	0x07C2, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    7800:	80 91 10 06 	lds	r24, 0x0610
    7804:	ba e0       	ldi	r27, 0x0A	; 10
    7806:	8b 02       	muls	r24, r27
    7808:	c0 01       	movw	r24, r0
    780a:	11 24       	eor	r1, r1
    780c:	90 93 c7 07 	sts	0x07C7, r25
    7810:	80 93 c6 07 	sts	0x07C6, r24
	}
}
    7814:	2c 96       	adiw	r28, 0x0c	; 12
    7816:	0f b6       	in	r0, 0x3f	; 63
    7818:	f8 94       	cli
    781a:	de bf       	out	0x3e, r29	; 62
    781c:	0f be       	out	0x3f, r0	; 63
    781e:	cd bf       	out	0x3d, r28	; 61
    7820:	df 91       	pop	r29
    7822:	cf 91       	pop	r28
    7824:	1f 91       	pop	r17
    7826:	0f 91       	pop	r16
    7828:	ff 90       	pop	r15
    782a:	ef 90       	pop	r14
    782c:	df 90       	pop	r13
    782e:	cf 90       	pop	r12
    7830:	bf 90       	pop	r11
    7832:	af 90       	pop	r10
    7834:	9f 90       	pop	r9
    7836:	8f 90       	pop	r8
    7838:	7f 90       	pop	r7
    783a:	6f 90       	pop	r6
    783c:	08 95       	ret

0000783e <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    783e:	0f 93       	push	r16
    7840:	1f 93       	push	r17
    7842:	cf 93       	push	r28
    7844:	df 93       	push	r29
    7846:	a3 e5       	ldi	r26, 0x53	; 83
    7848:	b6 e0       	ldi	r27, 0x06	; 6
    784a:	03 e8       	ldi	r16, 0x83	; 131
    784c:	17 e0       	ldi	r17, 0x07	; 7
    784e:	ea ec       	ldi	r30, 0xCA	; 202
    7850:	f5 e0       	ldi	r31, 0x05	; 5
    7852:	80 e0       	ldi	r24, 0x00	; 0
    7854:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    7856:	2d 91       	ld	r18, X+
    7858:	3c 91       	ld	r19, X
    785a:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    785c:	e8 01       	movw	r28, r16
    785e:	49 91       	ld	r20, Y+
    7860:	8e 01       	movw	r16, r28
    7862:	41 30       	cpi	r20, 0x01	; 1
    7864:	19 f4       	brne	.+6      	; 0x786c <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    7866:	31 95       	neg	r19
    7868:	21 95       	neg	r18
    786a:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    786c:	2a 55       	subi	r18, 0x5A	; 90
    786e:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    7870:	62 81       	ldd	r22, Z+2	; 0x02
    7872:	73 81       	ldd	r23, Z+3	; 0x03
    7874:	ac 01       	movw	r20, r24
    7876:	44 0f       	add	r20, r20
    7878:	55 1f       	adc	r21, r21
    787a:	62 17       	cp	r22, r18
    787c:	73 07       	cpc	r23, r19
    787e:	24 f4       	brge	.+8      	; 0x7888 <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    7880:	42 5b       	subi	r20, 0xB2	; 178
    7882:	57 4f       	sbci	r21, 0xF7	; 247
    7884:	ea 01       	movw	r28, r20
    7886:	08 c0       	rjmp	.+16     	; 0x7898 <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    7888:	60 81       	ld	r22, Z
    788a:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    788c:	42 5b       	subi	r20, 0xB2	; 178
    788e:	57 4f       	sbci	r21, 0xF7	; 247
    7890:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    7892:	26 17       	cp	r18, r22
    7894:	37 07       	cpc	r19, r23
    7896:	1c f4       	brge	.+6      	; 0x789e <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7898:	79 83       	std	Y+1, r23	; 0x01
    789a:	68 83       	st	Y, r22
    789c:	02 c0       	rjmp	.+4      	; 0x78a2 <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    789e:	39 83       	std	Y+1, r19	; 0x01
    78a0:	28 83       	st	Y, r18
    78a2:	01 96       	adiw	r24, 0x01	; 1
    78a4:	96 96       	adiw	r26, 0x26	; 38
    78a6:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    78a8:	88 30       	cpi	r24, 0x08	; 8
    78aa:	91 05       	cpc	r25, r1
    78ac:	a1 f6       	brne	.-88     	; 0x7856 <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    78ae:	df 91       	pop	r29
    78b0:	cf 91       	pop	r28
    78b2:	1f 91       	pop	r17
    78b4:	0f 91       	pop	r16
    78b6:	08 95       	ret

000078b8 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    78b8:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    78ba:	64 36       	cpi	r22, 0x64	; 100
    78bc:	71 05       	cpc	r23, r1
    78be:	e9 f0       	breq	.+58     	; 0x78fa <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    78c0:	6c 39       	cpi	r22, 0x9C	; 156
    78c2:	8f ef       	ldi	r24, 0xFF	; 255
    78c4:	78 07       	cpc	r23, r24
    78c6:	29 f4       	brne	.+10     	; 0x78d2 <scale32+0x1a>
	{
		return -value16;	
    78c8:	88 27       	eor	r24, r24
    78ca:	99 27       	eor	r25, r25
    78cc:	82 1b       	sub	r24, r18
    78ce:	93 0b       	sbc	r25, r19
    78d0:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    78d2:	61 15       	cp	r22, r1
    78d4:	71 05       	cpc	r23, r1
    78d6:	71 f0       	breq	.+28     	; 0x78f4 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    78d8:	db 01       	movw	r26, r22
    78da:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    78de:	6e 5c       	subi	r22, 0xCE	; 206
    78e0:	7f 4f       	sbci	r23, 0xFF	; 255
    78e2:	8f 4f       	sbci	r24, 0xFF	; 255
    78e4:	9f 4f       	sbci	r25, 0xFF	; 255
    78e6:	24 e6       	ldi	r18, 0x64	; 100
    78e8:	30 e0       	ldi	r19, 0x00	; 0
    78ea:	40 e0       	ldi	r20, 0x00	; 0
    78ec:	50 e0       	ldi	r21, 0x00	; 0
    78ee:	0e 94 25 4d 	call	0x9a4a	; 0x9a4a <__divmodsi4>
    78f2:	03 c0       	rjmp	.+6      	; 0x78fa <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    78f4:	80 e0       	ldi	r24, 0x00	; 0
    78f6:	90 e0       	ldi	r25, 0x00	; 0
    78f8:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    78fa:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    78fc:	08 95       	ret

000078fe <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    78fe:	2f 92       	push	r2
    7900:	3f 92       	push	r3
    7902:	4f 92       	push	r4
    7904:	5f 92       	push	r5
    7906:	6f 92       	push	r6
    7908:	7f 92       	push	r7
    790a:	8f 92       	push	r8
    790c:	9f 92       	push	r9
    790e:	af 92       	push	r10
    7910:	bf 92       	push	r11
    7912:	cf 92       	push	r12
    7914:	df 92       	push	r13
    7916:	ef 92       	push	r14
    7918:	ff 92       	push	r15
    791a:	0f 93       	push	r16
    791c:	1f 93       	push	r17
    791e:	cf 93       	push	r28
    7920:	df 93       	push	r29
    7922:	cd b7       	in	r28, 0x3d	; 61
    7924:	de b7       	in	r29, 0x3e	; 62
    7926:	e2 97       	sbiw	r28, 0x32	; 50
    7928:	0f b6       	in	r0, 0x3f	; 63
    792a:	f8 94       	cli
    792c:	de bf       	out	0x3e, r29	; 62
    792e:	0f be       	out	0x3f, r0	; 63
    7930:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    7932:	60 91 a9 05 	lds	r22, 0x05A9
    7936:	70 91 aa 05 	lds	r23, 0x05AA
    793a:	80 91 ab 05 	lds	r24, 0x05AB
    793e:	90 91 ac 05 	lds	r25, 0x05AC
    7942:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
    7946:	8b 01       	movw	r16, r22
    7948:	83 e0       	ldi	r24, 0x03	; 3
    794a:	00 0f       	add	r16, r16
    794c:	11 1f       	adc	r17, r17
    794e:	8a 95       	dec	r24
    7950:	e1 f7       	brne	.-8      	; 0x794a <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    7952:	60 91 ad 05 	lds	r22, 0x05AD
    7956:	70 91 ae 05 	lds	r23, 0x05AE
    795a:	80 91 af 05 	lds	r24, 0x05AF
    795e:	90 91 b0 05 	lds	r25, 0x05B0
    7962:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
    7966:	93 e0       	ldi	r25, 0x03	; 3
    7968:	66 0f       	add	r22, r22
    796a:	77 1f       	adc	r23, r23
    796c:	9a 95       	dec	r25
    796e:	e1 f7       	brne	.-8      	; 0x7968 <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    7970:	20 91 22 08 	lds	r18, 0x0822
    7974:	30 91 23 08 	lds	r19, 0x0823
    7978:	3e 8f       	std	Y+30, r19	; 0x1e
    797a:	2d 8f       	std	Y+29, r18	; 0x1d
    797c:	38 8b       	std	Y+16, r19	; 0x10
    797e:	2f 87       	std	Y+15, r18	; 0x0f
    7980:	40 91 24 08 	lds	r20, 0x0824
    7984:	50 91 25 08 	lds	r21, 0x0825
    7988:	58 a3       	std	Y+32, r21	; 0x20
    798a:	4f 8f       	std	Y+31, r20	; 0x1f
    798c:	5a 8b       	std	Y+18, r21	; 0x12
    798e:	49 8b       	std	Y+17, r20	; 0x11
    7990:	20 91 26 08 	lds	r18, 0x0826
    7994:	30 91 27 08 	lds	r19, 0x0827
    7998:	3a a3       	std	Y+34, r19	; 0x22
    799a:	29 a3       	std	Y+33, r18	; 0x21
    799c:	3c 8b       	std	Y+20, r19	; 0x14
    799e:	2b 8b       	std	Y+19, r18	; 0x13
    79a0:	1e 8b       	std	Y+22, r17	; 0x16
    79a2:	0d 8b       	std	Y+21, r16	; 0x15
    79a4:	78 8f       	std	Y+24, r23	; 0x18
    79a6:	6f 8b       	std	Y+23, r22	; 0x17
    79a8:	40 91 2e 08 	lds	r20, 0x082E
    79ac:	50 91 2f 08 	lds	r21, 0x082F
    79b0:	5c a3       	std	Y+36, r21	; 0x24
    79b2:	4b a3       	std	Y+35, r20	; 0x23
    79b4:	5a 8f       	std	Y+26, r21	; 0x1a
    79b6:	49 8f       	std	Y+25, r20	; 0x19
    79b8:	20 91 30 08 	lds	r18, 0x0830
    79bc:	30 91 31 08 	lds	r19, 0x0831
    79c0:	3e a3       	std	Y+38, r19	; 0x26
    79c2:	2d a3       	std	Y+37, r18	; 0x25
    79c4:	3c 8f       	std	Y+28, r19	; 0x1c
    79c6:	2b 8f       	std	Y+27, r18	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    79c8:	40 91 28 08 	lds	r20, 0x0828
    79cc:	50 91 29 08 	lds	r21, 0x0829
    79d0:	58 a7       	std	Y+40, r21	; 0x28
    79d2:	4f a3       	std	Y+39, r20	; 0x27
    79d4:	5a 83       	std	Y+2, r21	; 0x02
    79d6:	49 83       	std	Y+1, r20	; 0x01
    79d8:	20 91 2a 08 	lds	r18, 0x082A
    79dc:	30 91 2b 08 	lds	r19, 0x082B
    79e0:	3a a7       	std	Y+42, r19	; 0x2a
    79e2:	29 a7       	std	Y+41, r18	; 0x29
    79e4:	3c 83       	std	Y+4, r19	; 0x04
    79e6:	2b 83       	std	Y+3, r18	; 0x03
    79e8:	20 90 2c 08 	lds	r2, 0x082C
    79ec:	30 90 2d 08 	lds	r3, 0x082D
    79f0:	3e 82       	std	Y+6, r3	; 0x06
    79f2:	2d 82       	std	Y+5, r2	; 0x05
    79f4:	18 87       	std	Y+8, r17	; 0x08
    79f6:	0f 83       	std	Y+7, r16	; 0x07
    79f8:	7a 87       	std	Y+10, r23	; 0x0a
    79fa:	69 87       	std	Y+9, r22	; 0x09
    79fc:	40 90 34 08 	lds	r4, 0x0834
    7a00:	50 90 35 08 	lds	r5, 0x0835
    7a04:	5c 86       	std	Y+12, r5	; 0x0c
    7a06:	4b 86       	std	Y+11, r4	; 0x0b
    7a08:	80 90 36 08 	lds	r8, 0x0836
    7a0c:	90 90 37 08 	lds	r9, 0x0837
    7a10:	9e 86       	std	Y+14, r9	; 0x0e
    7a12:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (transition < 100)
    7a14:	a0 90 21 05 	lds	r10, 0x0521
    7a18:	b0 90 22 05 	lds	r11, 0x0522
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7a1c:	40 91 32 08 	lds	r20, 0x0832
    7a20:	50 91 33 08 	lds	r21, 0x0833
    7a24:	5c a7       	std	Y+44, r21	; 0x2c
    7a26:	4b a7       	std	Y+43, r20	; 0x2b
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7a28:	20 91 38 08 	lds	r18, 0x0838
    7a2c:	30 91 39 08 	lds	r19, 0x0839
    7a30:	3e a7       	std	Y+46, r19	; 0x2e
    7a32:	2d a7       	std	Y+45, r18	; 0x2d
    7a34:	c1 2c       	mov	r12, r1
    7a36:	d1 2c       	mov	r13, r1
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7a38:	4f a1       	ldd	r20, Y+39	; 0x27
    7a3a:	58 a5       	ldd	r21, Y+40	; 0x28
    7a3c:	51 95       	neg	r21
    7a3e:	41 95       	neg	r20
    7a40:	51 09       	sbc	r21, r1
    7a42:	58 ab       	std	Y+48, r21	; 0x30
    7a44:	4f a7       	std	Y+47, r20	; 0x2f
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    7a46:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7a48:	3e 8d       	ldd	r19, Y+30	; 0x1e
    7a4a:	31 95       	neg	r19
    7a4c:	21 95       	neg	r18
    7a4e:	31 09       	sbc	r19, r1
    7a50:	3a ab       	std	Y+50, r19	; 0x32
    7a52:	29 ab       	std	Y+49, r18	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (transition < 100)
    7a54:	34 e6       	ldi	r19, 0x64	; 100
    7a56:	a3 16       	cp	r10, r19
    7a58:	b1 04       	cpc	r11, r1
    7a5a:	0c f0       	brlt	.+2      	; 0x7a5e <ProcessMixer+0x160>
    7a5c:	7b c0       	rjmp	.+246    	; 0x7b54 <ProcessMixer+0x256>
    7a5e:	86 01       	movw	r16, r12
    7a60:	0f 53       	subi	r16, 0x3F	; 63
    7a62:	1a 4f       	sbci	r17, 0xFA	; 250
    7a64:	f8 01       	movw	r30, r16
    7a66:	ec 55       	subi	r30, 0x5C	; 92
    7a68:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    7a6a:	80 81       	ld	r24, Z
    7a6c:	81 30       	cpi	r24, 0x01	; 1
    7a6e:	99 f0       	breq	.+38     	; 0x7a96 <ProcessMixer+0x198>
    7a70:	82 30       	cpi	r24, 0x02	; 2
    7a72:	d1 f4       	brne	.+52     	; 0x7aa8 <ProcessMixer+0x1aa>
    7a74:	f8 01       	movw	r30, r16
    7a76:	e2 56       	subi	r30, 0x62	; 98
    7a78:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    7a7a:	60 81       	ld	r22, Z
    7a7c:	45 e0       	ldi	r20, 0x05	; 5
    7a7e:	64 02       	muls	r22, r20
    7a80:	b0 01       	movw	r22, r0
    7a82:	11 24       	eor	r1, r1
    7a84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7a86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7a88:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7a8c:	ee 24       	eor	r14, r14
    7a8e:	ff 24       	eor	r15, r15
    7a90:	e8 1a       	sub	r14, r24
    7a92:	f9 0a       	sbc	r15, r25
					break;
    7a94:	0e c0       	rjmp	.+28     	; 0x7ab2 <ProcessMixer+0x1b4>
    7a96:	f8 01       	movw	r30, r16
    7a98:	e2 56       	subi	r30, 0x62	; 98
    7a9a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7a9c:	80 81       	ld	r24, Z
    7a9e:	87 fd       	sbrc	r24, 7
    7aa0:	06 c0       	rjmp	.+12     	; 0x7aae <ProcessMixer+0x1b0>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    7aa2:	e9 a8       	ldd	r14, Y+49	; 0x31
    7aa4:	fa a8       	ldd	r15, Y+50	; 0x32
    7aa6:	05 c0       	rjmp	.+10     	; 0x7ab2 <ProcessMixer+0x1b4>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7aa8:	e1 2c       	mov	r14, r1
    7aaa:	f1 2c       	mov	r15, r1
    7aac:	02 c0       	rjmp	.+4      	; 0x7ab2 <ProcessMixer+0x1b4>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    7aae:	ed 8c       	ldd	r14, Y+29	; 0x1d
    7ab0:	fe 8c       	ldd	r15, Y+30	; 0x1e
    7ab2:	f8 01       	movw	r30, r16
    7ab4:	ea 55       	subi	r30, 0x5A	; 90
    7ab6:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    7ab8:	80 81       	ld	r24, Z
    7aba:	81 30       	cpi	r24, 0x01	; 1
    7abc:	89 f0       	breq	.+34     	; 0x7ae0 <ProcessMixer+0x1e2>
    7abe:	82 30       	cpi	r24, 0x02	; 2
    7ac0:	f1 f4       	brne	.+60     	; 0x7afe <ProcessMixer+0x200>
    7ac2:	f8 01       	movw	r30, r16
    7ac4:	e0 56       	subi	r30, 0x60	; 96
    7ac6:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7ac8:	60 81       	ld	r22, Z
    7aca:	55 e0       	ldi	r21, 0x05	; 5
    7acc:	65 02       	muls	r22, r21
    7ace:	b0 01       	movw	r22, r0
    7ad0:	11 24       	eor	r1, r1
    7ad2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7ad4:	98 a1       	ldd	r25, Y+32	; 0x20
    7ad6:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7ada:	e8 0e       	add	r14, r24
    7adc:	f9 1e       	adc	r15, r25
					break;
    7ade:	0f c0       	rjmp	.+30     	; 0x7afe <ProcessMixer+0x200>
    7ae0:	f8 01       	movw	r30, r16
    7ae2:	e0 56       	subi	r30, 0x60	; 96
    7ae4:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7ae6:	80 81       	ld	r24, Z
    7ae8:	87 ff       	sbrs	r24, 7
    7aea:	05 c0       	rjmp	.+10     	; 0x7af6 <ProcessMixer+0x1f8>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    7aec:	2f 8d       	ldd	r18, Y+31	; 0x1f
    7aee:	38 a1       	ldd	r19, Y+32	; 0x20
    7af0:	e2 1a       	sub	r14, r18
    7af2:	f3 0a       	sbc	r15, r19
    7af4:	04 c0       	rjmp	.+8      	; 0x7afe <ProcessMixer+0x200>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    7af6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    7af8:	58 a1       	ldd	r21, Y+32	; 0x20
    7afa:	e4 0e       	add	r14, r20
    7afc:	f5 1e       	adc	r15, r21
    7afe:	f8 01       	movw	r30, r16
    7b00:	e8 55       	subi	r30, 0x58	; 88
    7b02:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    7b04:	80 81       	ld	r24, Z
    7b06:	81 30       	cpi	r24, 0x01	; 1
    7b08:	89 f0       	breq	.+34     	; 0x7b2c <ProcessMixer+0x22e>
    7b0a:	82 30       	cpi	r24, 0x02	; 2
    7b0c:	f1 f4       	brne	.+60     	; 0x7b4a <ProcessMixer+0x24c>
    7b0e:	f8 01       	movw	r30, r16
    7b10:	ee 55       	subi	r30, 0x5E	; 94
    7b12:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    7b14:	60 81       	ld	r22, Z
    7b16:	55 e0       	ldi	r21, 0x05	; 5
    7b18:	65 02       	muls	r22, r21
    7b1a:	b0 01       	movw	r22, r0
    7b1c:	11 24       	eor	r1, r1
    7b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    7b20:	9a a1       	ldd	r25, Y+34	; 0x22
    7b22:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7b26:	e8 0e       	add	r14, r24
    7b28:	f9 1e       	adc	r15, r25
					break;
    7b2a:	0f c0       	rjmp	.+30     	; 0x7b4a <ProcessMixer+0x24c>
    7b2c:	f8 01       	movw	r30, r16
    7b2e:	ee 55       	subi	r30, 0x5E	; 94
    7b30:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_rudder_volume < 0 )
    7b32:	80 81       	ld	r24, Z
    7b34:	87 ff       	sbrs	r24, 7
    7b36:	05 c0       	rjmp	.+10     	; 0x7b42 <ProcessMixer+0x244>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    7b38:	29 a1       	ldd	r18, Y+33	; 0x21
    7b3a:	3a a1       	ldd	r19, Y+34	; 0x22
    7b3c:	e2 1a       	sub	r14, r18
    7b3e:	f3 0a       	sbc	r15, r19
    7b40:	04 c0       	rjmp	.+8      	; 0x7b4a <ProcessMixer+0x24c>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    7b42:	49 a1       	ldd	r20, Y+33	; 0x21
    7b44:	5a a1       	ldd	r21, Y+34	; 0x22
    7b46:	e4 0e       	add	r14, r20
    7b48:	f5 1e       	adc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (transition > 0)
    7b4a:	1a 14       	cp	r1, r10
    7b4c:	1b 04       	cpc	r1, r11
    7b4e:	0c f0       	brlt	.+2      	; 0x7b52 <ProcessMixer+0x254>
    7b50:	7b c0       	rjmp	.+246    	; 0x7c48 <ProcessMixer+0x34a>
    7b52:	02 c0       	rjmp	.+4      	; 0x7b58 <ProcessMixer+0x25a>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7b54:	e1 2c       	mov	r14, r1
    7b56:	f1 2c       	mov	r15, r1
    7b58:	c6 01       	movw	r24, r12
    7b5a:	8f 53       	subi	r24, 0x3F	; 63
    7b5c:	9a 4f       	sbci	r25, 0xFA	; 250
    7b5e:	3c 01       	movw	r6, r24
    7b60:	fc 01       	movw	r30, r24
    7b62:	eb 55       	subi	r30, 0x5B	; 91
    7b64:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (transition > 0)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    7b66:	80 81       	ld	r24, Z
    7b68:	81 30       	cpi	r24, 0x01	; 1
    7b6a:	99 f0       	breq	.+38     	; 0x7b92 <ProcessMixer+0x294>
    7b6c:	82 30       	cpi	r24, 0x02	; 2
    7b6e:	d1 f4       	brne	.+52     	; 0x7ba4 <ProcessMixer+0x2a6>
    7b70:	f3 01       	movw	r30, r6
    7b72:	e1 56       	subi	r30, 0x61	; 97
    7b74:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7b76:	60 81       	ld	r22, Z
    7b78:	95 e0       	ldi	r25, 0x05	; 5
    7b7a:	69 02       	muls	r22, r25
    7b7c:	b0 01       	movw	r22, r0
    7b7e:	11 24       	eor	r1, r1
    7b80:	8f a1       	ldd	r24, Y+39	; 0x27
    7b82:	98 a5       	ldd	r25, Y+40	; 0x28
    7b84:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7b88:	00 27       	eor	r16, r16
    7b8a:	11 27       	eor	r17, r17
    7b8c:	08 1b       	sub	r16, r24
    7b8e:	19 0b       	sbc	r17, r25
					break;
    7b90:	0e c0       	rjmp	.+28     	; 0x7bae <ProcessMixer+0x2b0>
    7b92:	f3 01       	movw	r30, r6
    7b94:	e1 56       	subi	r30, 0x61	; 97
    7b96:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    7b98:	80 81       	ld	r24, Z
    7b9a:	87 fd       	sbrc	r24, 7
    7b9c:	06 c0       	rjmp	.+12     	; 0x7baa <ProcessMixer+0x2ac>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7b9e:	0f a5       	ldd	r16, Y+47	; 0x2f
    7ba0:	18 a9       	ldd	r17, Y+48	; 0x30
    7ba2:	05 c0       	rjmp	.+10     	; 0x7bae <ProcessMixer+0x2b0>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7ba4:	00 e0       	ldi	r16, 0x00	; 0
    7ba6:	10 e0       	ldi	r17, 0x00	; 0
    7ba8:	02 c0       	rjmp	.+4      	; 0x7bae <ProcessMixer+0x2b0>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    7baa:	0f a1       	ldd	r16, Y+39	; 0x27
    7bac:	18 a5       	ldd	r17, Y+40	; 0x28
    7bae:	f3 01       	movw	r30, r6
    7bb0:	e9 55       	subi	r30, 0x59	; 89
    7bb2:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    7bb4:	80 81       	ld	r24, Z
    7bb6:	81 30       	cpi	r24, 0x01	; 1
    7bb8:	89 f0       	breq	.+34     	; 0x7bdc <ProcessMixer+0x2de>
    7bba:	82 30       	cpi	r24, 0x02	; 2
    7bbc:	f1 f4       	brne	.+60     	; 0x7bfa <ProcessMixer+0x2fc>
    7bbe:	f3 01       	movw	r30, r6
    7bc0:	ef 55       	subi	r30, 0x5F	; 95
    7bc2:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    7bc4:	60 81       	ld	r22, Z
    7bc6:	55 e0       	ldi	r21, 0x05	; 5
    7bc8:	65 02       	muls	r22, r21
    7bca:	b0 01       	movw	r22, r0
    7bcc:	11 24       	eor	r1, r1
    7bce:	89 a5       	ldd	r24, Y+41	; 0x29
    7bd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    7bd2:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7bd6:	08 0f       	add	r16, r24
    7bd8:	19 1f       	adc	r17, r25
					break;
    7bda:	0f c0       	rjmp	.+30     	; 0x7bfa <ProcessMixer+0x2fc>
    7bdc:	f3 01       	movw	r30, r6
    7bde:	ef 55       	subi	r30, 0x5F	; 95
    7be0:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    7be2:	80 81       	ld	r24, Z
    7be4:	87 ff       	sbrs	r24, 7
    7be6:	05 c0       	rjmp	.+10     	; 0x7bf2 <ProcessMixer+0x2f4>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    7be8:	29 a5       	ldd	r18, Y+41	; 0x29
    7bea:	3a a5       	ldd	r19, Y+42	; 0x2a
    7bec:	02 1b       	sub	r16, r18
    7bee:	13 0b       	sbc	r17, r19
    7bf0:	04 c0       	rjmp	.+8      	; 0x7bfa <ProcessMixer+0x2fc>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    7bf2:	49 a5       	ldd	r20, Y+41	; 0x29
    7bf4:	5a a5       	ldd	r21, Y+42	; 0x2a
    7bf6:	04 0f       	add	r16, r20
    7bf8:	15 1f       	adc	r17, r21
    7bfa:	f3 01       	movw	r30, r6
    7bfc:	e7 55       	subi	r30, 0x57	; 87
    7bfe:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    7c00:	80 81       	ld	r24, Z
    7c02:	81 30       	cpi	r24, 0x01	; 1
    7c04:	81 f0       	breq	.+32     	; 0x7c26 <ProcessMixer+0x328>
    7c06:	82 30       	cpi	r24, 0x02	; 2
    7c08:	c9 f4       	brne	.+50     	; 0x7c3c <ProcessMixer+0x33e>
    7c0a:	f3 01       	movw	r30, r6
    7c0c:	ed 55       	subi	r30, 0x5D	; 93
    7c0e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    7c10:	60 81       	ld	r22, Z
    7c12:	85 e0       	ldi	r24, 0x05	; 5
    7c14:	68 02       	muls	r22, r24
    7c16:	b0 01       	movw	r22, r0
    7c18:	11 24       	eor	r1, r1
    7c1a:	c1 01       	movw	r24, r2
    7c1c:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7c20:	08 0f       	add	r16, r24
    7c22:	19 1f       	adc	r17, r25
					break;
    7c24:	0b c0       	rjmp	.+22     	; 0x7c3c <ProcessMixer+0x33e>
    7c26:	f3 01       	movw	r30, r6
    7c28:	ed 55       	subi	r30, 0x5D	; 93
    7c2a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    7c2c:	80 81       	ld	r24, Z
    7c2e:	87 ff       	sbrs	r24, 7
    7c30:	03 c0       	rjmp	.+6      	; 0x7c38 <ProcessMixer+0x33a>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    7c32:	02 19       	sub	r16, r2
    7c34:	13 09       	sbc	r17, r3
    7c36:	02 c0       	rjmp	.+4      	; 0x7c3c <ProcessMixer+0x33e>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    7c38:	02 0d       	add	r16, r2
    7c3a:	13 1d       	adc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
    7c3c:	94 e6       	ldi	r25, 0x64	; 100
    7c3e:	a9 16       	cp	r10, r25
    7c40:	b1 04       	cpc	r11, r1
    7c42:	0c f0       	brlt	.+2      	; 0x7c46 <ProcessMixer+0x348>
    7c44:	7d c0       	rjmp	.+250    	; 0x7d40 <ProcessMixer+0x442>
    7c46:	02 c0       	rjmp	.+4      	; 0x7c4c <ProcessMixer+0x34e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7c48:	00 e0       	ldi	r16, 0x00	; 0
    7c4a:	10 e0       	ldi	r17, 0x00	; 0
    7c4c:	d6 01       	movw	r26, r12
    7c4e:	af 53       	subi	r26, 0x3F	; 63
    7c50:	ba 4f       	sbci	r27, 0xFA	; 250
    7c52:	3d 01       	movw	r6, r26
    7c54:	fd 01       	movw	r30, r26
    7c56:	e6 55       	subi	r30, 0x56	; 86
    7c58:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    7c5a:	80 81       	ld	r24, Z
    7c5c:	81 30       	cpi	r24, 0x01	; 1
    7c5e:	89 f0       	breq	.+34     	; 0x7c82 <ProcessMixer+0x384>
    7c60:	82 30       	cpi	r24, 0x02	; 2
    7c62:	f1 f4       	brne	.+60     	; 0x7ca0 <ProcessMixer+0x3a2>
    7c64:	fd 01       	movw	r30, r26
    7c66:	e2 56       	subi	r30, 0x62	; 98
    7c68:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    7c6a:	60 81       	ld	r22, Z
    7c6c:	55 e0       	ldi	r21, 0x05	; 5
    7c6e:	65 02       	muls	r22, r21
    7c70:	b0 01       	movw	r22, r0
    7c72:	11 24       	eor	r1, r1
    7c74:	8b a1       	ldd	r24, Y+35	; 0x23
    7c76:	9c a1       	ldd	r25, Y+36	; 0x24
    7c78:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7c7c:	e8 1a       	sub	r14, r24
    7c7e:	f9 0a       	sbc	r15, r25
					break;
    7c80:	0f c0       	rjmp	.+30     	; 0x7ca0 <ProcessMixer+0x3a2>
    7c82:	fd 01       	movw	r30, r26
    7c84:	e2 56       	subi	r30, 0x62	; 98
    7c86:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7c88:	80 81       	ld	r24, Z
    7c8a:	87 ff       	sbrs	r24, 7
    7c8c:	05 c0       	rjmp	.+10     	; 0x7c98 <ProcessMixer+0x39a>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    7c8e:	2b a1       	ldd	r18, Y+35	; 0x23
    7c90:	3c a1       	ldd	r19, Y+36	; 0x24
    7c92:	e2 0e       	add	r14, r18
    7c94:	f3 1e       	adc	r15, r19
    7c96:	04 c0       	rjmp	.+8      	; 0x7ca0 <ProcessMixer+0x3a2>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    7c98:	4b a1       	ldd	r20, Y+35	; 0x23
    7c9a:	5c a1       	ldd	r21, Y+36	; 0x24
    7c9c:	e4 1a       	sub	r14, r20
    7c9e:	f5 0a       	sbc	r15, r21
    7ca0:	f3 01       	movw	r30, r6
    7ca2:	e4 55       	subi	r30, 0x54	; 84
    7ca4:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    7ca6:	80 81       	ld	r24, Z
    7ca8:	81 30       	cpi	r24, 0x01	; 1
    7caa:	89 f0       	breq	.+34     	; 0x7cce <ProcessMixer+0x3d0>
    7cac:	82 30       	cpi	r24, 0x02	; 2
    7cae:	f1 f4       	brne	.+60     	; 0x7cec <ProcessMixer+0x3ee>
    7cb0:	f3 01       	movw	r30, r6
    7cb2:	e0 56       	subi	r30, 0x60	; 96
    7cb4:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7cb6:	60 81       	ld	r22, Z
    7cb8:	55 e0       	ldi	r21, 0x05	; 5
    7cba:	65 02       	muls	r22, r21
    7cbc:	b0 01       	movw	r22, r0
    7cbe:	11 24       	eor	r1, r1
    7cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    7cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    7cc4:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7cc8:	e8 0e       	add	r14, r24
    7cca:	f9 1e       	adc	r15, r25
					break;
    7ccc:	0f c0       	rjmp	.+30     	; 0x7cec <ProcessMixer+0x3ee>
    7cce:	f3 01       	movw	r30, r6
    7cd0:	e0 56       	subi	r30, 0x60	; 96
    7cd2:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7cd4:	80 81       	ld	r24, Z
    7cd6:	87 ff       	sbrs	r24, 7
    7cd8:	05 c0       	rjmp	.+10     	; 0x7ce4 <ProcessMixer+0x3e6>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    7cda:	2d a1       	ldd	r18, Y+37	; 0x25
    7cdc:	3e a1       	ldd	r19, Y+38	; 0x26
    7cde:	e2 1a       	sub	r14, r18
    7ce0:	f3 0a       	sbc	r15, r19
    7ce2:	04 c0       	rjmp	.+8      	; 0x7cec <ProcessMixer+0x3ee>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    7ce4:	4d a1       	ldd	r20, Y+37	; 0x25
    7ce6:	5e a1       	ldd	r21, Y+38	; 0x26
    7ce8:	e4 0e       	add	r14, r20
    7cea:	f5 1e       	adc	r15, r21
    7cec:	f3 01       	movw	r30, r6
    7cee:	e2 55       	subi	r30, 0x52	; 82
    7cf0:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    7cf2:	80 81       	ld	r24, Z
    7cf4:	81 30       	cpi	r24, 0x01	; 1
    7cf6:	89 f0       	breq	.+34     	; 0x7d1a <ProcessMixer+0x41c>
    7cf8:	82 30       	cpi	r24, 0x02	; 2
    7cfa:	f1 f4       	brne	.+60     	; 0x7d38 <ProcessMixer+0x43a>
    7cfc:	f3 01       	movw	r30, r6
    7cfe:	e5 56       	subi	r30, 0x65	; 101
    7d00:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    7d02:	60 81       	ld	r22, Z
    7d04:	55 e0       	ldi	r21, 0x05	; 5
    7d06:	65 02       	muls	r22, r21
    7d08:	b0 01       	movw	r22, r0
    7d0a:	11 24       	eor	r1, r1
    7d0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    7d0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    7d10:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7d14:	e8 1a       	sub	r14, r24
    7d16:	f9 0a       	sbc	r15, r25
					break;
    7d18:	0f c0       	rjmp	.+30     	; 0x7d38 <ProcessMixer+0x43a>
    7d1a:	f3 01       	movw	r30, r6
    7d1c:	e5 56       	subi	r30, 0x65	; 101
    7d1e:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    7d20:	80 81       	ld	r24, Z
    7d22:	87 ff       	sbrs	r24, 7
    7d24:	05 c0       	rjmp	.+10     	; 0x7d30 <ProcessMixer+0x432>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7d26:	2b a5       	ldd	r18, Y+43	; 0x2b
    7d28:	3c a5       	ldd	r19, Y+44	; 0x2c
    7d2a:	e2 0e       	add	r14, r18
    7d2c:	f3 1e       	adc	r15, r19
    7d2e:	04 c0       	rjmp	.+8      	; 0x7d38 <ProcessMixer+0x43a>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    7d30:	4b a5       	ldd	r20, Y+43	; 0x2b
    7d32:	5c a5       	ldd	r21, Y+44	; 0x2c
    7d34:	e4 1a       	sub	r14, r20
    7d36:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (transition > 0)
    7d38:	1a 14       	cp	r1, r10
    7d3a:	1b 04       	cpc	r1, r11
    7d3c:	0c f0       	brlt	.+2      	; 0x7d40 <ProcessMixer+0x442>
    7d3e:	71 c0       	rjmp	.+226    	; 0x7e22 <ProcessMixer+0x524>
    7d40:	c6 01       	movw	r24, r12
    7d42:	8f 53       	subi	r24, 0x3F	; 63
    7d44:	9a 4f       	sbci	r25, 0xFA	; 250
    7d46:	3c 01       	movw	r6, r24
    7d48:	fc 01       	movw	r30, r24
    7d4a:	e5 55       	subi	r30, 0x55	; 85
    7d4c:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    7d4e:	80 81       	ld	r24, Z
    7d50:	81 30       	cpi	r24, 0x01	; 1
    7d52:	81 f0       	breq	.+32     	; 0x7d74 <ProcessMixer+0x476>
    7d54:	82 30       	cpi	r24, 0x02	; 2
    7d56:	c9 f4       	brne	.+50     	; 0x7d8a <ProcessMixer+0x48c>
    7d58:	f3 01       	movw	r30, r6
    7d5a:	e1 56       	subi	r30, 0x61	; 97
    7d5c:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7d5e:	60 81       	ld	r22, Z
    7d60:	95 e0       	ldi	r25, 0x05	; 5
    7d62:	69 02       	muls	r22, r25
    7d64:	b0 01       	movw	r22, r0
    7d66:	11 24       	eor	r1, r1
    7d68:	c2 01       	movw	r24, r4
    7d6a:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7d6e:	08 1b       	sub	r16, r24
    7d70:	19 0b       	sbc	r17, r25
					break;
    7d72:	0b c0       	rjmp	.+22     	; 0x7d8a <ProcessMixer+0x48c>
    7d74:	f3 01       	movw	r30, r6
    7d76:	e1 56       	subi	r30, 0x61	; 97
    7d78:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    7d7a:	80 81       	ld	r24, Z
    7d7c:	87 ff       	sbrs	r24, 7
    7d7e:	03 c0       	rjmp	.+6      	; 0x7d86 <ProcessMixer+0x488>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    7d80:	04 0d       	add	r16, r4
    7d82:	15 1d       	adc	r17, r5
    7d84:	02 c0       	rjmp	.+4      	; 0x7d8a <ProcessMixer+0x48c>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    7d86:	04 19       	sub	r16, r4
    7d88:	15 09       	sbc	r17, r5
    7d8a:	f3 01       	movw	r30, r6
    7d8c:	e3 55       	subi	r30, 0x53	; 83
    7d8e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    7d90:	80 81       	ld	r24, Z
    7d92:	81 30       	cpi	r24, 0x01	; 1
    7d94:	81 f0       	breq	.+32     	; 0x7db6 <ProcessMixer+0x4b8>
    7d96:	82 30       	cpi	r24, 0x02	; 2
    7d98:	c9 f4       	brne	.+50     	; 0x7dcc <ProcessMixer+0x4ce>
    7d9a:	f3 01       	movw	r30, r6
    7d9c:	ef 55       	subi	r30, 0x5F	; 95
    7d9e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    7da0:	60 81       	ld	r22, Z
    7da2:	a5 e0       	ldi	r26, 0x05	; 5
    7da4:	6a 02       	muls	r22, r26
    7da6:	b0 01       	movw	r22, r0
    7da8:	11 24       	eor	r1, r1
    7daa:	c4 01       	movw	r24, r8
    7dac:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7db0:	08 0f       	add	r16, r24
    7db2:	19 1f       	adc	r17, r25
					break;
    7db4:	0b c0       	rjmp	.+22     	; 0x7dcc <ProcessMixer+0x4ce>
    7db6:	f3 01       	movw	r30, r6
    7db8:	ef 55       	subi	r30, 0x5F	; 95
    7dba:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    7dbc:	80 81       	ld	r24, Z
    7dbe:	87 ff       	sbrs	r24, 7
    7dc0:	03 c0       	rjmp	.+6      	; 0x7dc8 <ProcessMixer+0x4ca>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    7dc2:	08 19       	sub	r16, r8
    7dc4:	19 09       	sbc	r17, r9
    7dc6:	02 c0       	rjmp	.+4      	; 0x7dcc <ProcessMixer+0x4ce>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    7dc8:	08 0d       	add	r16, r8
    7dca:	19 1d       	adc	r17, r9
    7dcc:	f3 01       	movw	r30, r6
    7dce:	e1 55       	subi	r30, 0x51	; 81
    7dd0:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    7dd2:	80 81       	ld	r24, Z
    7dd4:	81 30       	cpi	r24, 0x01	; 1
    7dd6:	89 f0       	breq	.+34     	; 0x7dfa <ProcessMixer+0x4fc>
    7dd8:	82 30       	cpi	r24, 0x02	; 2
    7dda:	f1 f4       	brne	.+60     	; 0x7e18 <ProcessMixer+0x51a>
    7ddc:	f3 01       	movw	r30, r6
    7dde:	e4 56       	subi	r30, 0x64	; 100
    7de0:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    7de2:	60 81       	ld	r22, Z
    7de4:	55 e0       	ldi	r21, 0x05	; 5
    7de6:	65 02       	muls	r22, r21
    7de8:	b0 01       	movw	r22, r0
    7dea:	11 24       	eor	r1, r1
    7dec:	8d a5       	ldd	r24, Y+45	; 0x2d
    7dee:	9e a5       	ldd	r25, Y+46	; 0x2e
    7df0:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    7df4:	08 1b       	sub	r16, r24
    7df6:	19 0b       	sbc	r17, r25
					break;
    7df8:	0f c0       	rjmp	.+30     	; 0x7e18 <ProcessMixer+0x51a>
    7dfa:	f3 01       	movw	r30, r6
    7dfc:	e4 56       	subi	r30, 0x64	; 100
    7dfe:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    7e00:	80 81       	ld	r24, Z
    7e02:	87 ff       	sbrs	r24, 7
    7e04:	05 c0       	rjmp	.+10     	; 0x7e10 <ProcessMixer+0x512>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7e06:	2d a5       	ldd	r18, Y+45	; 0x2d
    7e08:	3e a5       	ldd	r19, Y+46	; 0x2e
    7e0a:	02 0f       	add	r16, r18
    7e0c:	13 1f       	adc	r17, r19
    7e0e:	04 c0       	rjmp	.+8      	; 0x7e18 <ProcessMixer+0x51a>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    7e10:	4d a5       	ldd	r20, Y+45	; 0x2d
    7e12:	5e a5       	ldd	r21, Y+46	; 0x2e
    7e14:	04 1b       	sub	r16, r20
    7e16:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (transition < 100)
    7e18:	84 e6       	ldi	r24, 0x64	; 100
    7e1a:	a8 16       	cp	r10, r24
    7e1c:	b1 04       	cpc	r11, r1
    7e1e:	0c f0       	brlt	.+2      	; 0x7e22 <ProcessMixer+0x524>
    7e20:	8d c0       	rjmp	.+282    	; 0x7f3c <ProcessMixer+0x63e>
    7e22:	d6 01       	movw	r26, r12
    7e24:	af 53       	subi	r26, 0x3F	; 63
    7e26:	ba 4f       	sbci	r27, 0xFA	; 250
    7e28:	3d 01       	movw	r6, r26
    7e2a:	fd 01       	movw	r30, r26
    7e2c:	e2 56       	subi	r30, 0x62	; 98
    7e2e:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    7e30:	60 81       	ld	r22, Z
    7e32:	66 23       	and	r22, r22
    7e34:	59 f0       	breq	.+22     	; 0x7e4c <ProcessMixer+0x54e>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    7e36:	80 91 3e 08 	lds	r24, 0x083E
    7e3a:	90 91 3f 08 	lds	r25, 0x083F
    7e3e:	77 27       	eor	r23, r23
    7e40:	67 fd       	sbrc	r22, 7
    7e42:	70 95       	com	r23
    7e44:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
				P1_solution = P1_solution + temp2;
    7e48:	e8 0e       	add	r14, r24
    7e4a:	f9 1e       	adc	r15, r25
    7e4c:	f3 01       	movw	r30, r6
    7e4e:	e0 56       	subi	r30, 0x60	; 96
    7e50:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    7e52:	60 81       	ld	r22, Z
    7e54:	66 23       	and	r22, r22
    7e56:	59 f0       	breq	.+22     	; 0x7e6e <ProcessMixer+0x570>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    7e58:	80 91 40 08 	lds	r24, 0x0840
    7e5c:	90 91 41 08 	lds	r25, 0x0841
    7e60:	77 27       	eor	r23, r23
    7e62:	67 fd       	sbrc	r22, 7
    7e64:	70 95       	com	r23
    7e66:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
				P1_solution = P1_solution + temp2;
    7e6a:	e8 0e       	add	r14, r24
    7e6c:	f9 1e       	adc	r15, r25
    7e6e:	f3 01       	movw	r30, r6
    7e70:	ee 55       	subi	r30, 0x5E	; 94
    7e72:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    7e74:	60 81       	ld	r22, Z
    7e76:	66 23       	and	r22, r22
    7e78:	59 f0       	breq	.+22     	; 0x7e90 <ProcessMixer+0x592>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    7e7a:	80 91 42 08 	lds	r24, 0x0842
    7e7e:	90 91 43 08 	lds	r25, 0x0843
    7e82:	77 27       	eor	r23, r23
    7e84:	67 fd       	sbrc	r22, 7
    7e86:	70 95       	com	r23
    7e88:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
				P1_solution = P1_solution + temp2;
    7e8c:	e8 0e       	add	r14, r24
    7e8e:	f9 1e       	adc	r15, r25
    7e90:	f3 01       	movw	r30, r6
    7e92:	ef 54       	subi	r30, 0x4F	; 79
    7e94:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    7e96:	60 81       	ld	r22, Z
    7e98:	66 23       	and	r22, r22
    7e9a:	19 f1       	breq	.+70     	; 0x7ee2 <ProcessMixer+0x5e4>
    7e9c:	31 97       	sbiw	r30, 0x01	; 1
    7e9e:	80 81       	ld	r24, Z
    7ea0:	8f 30       	cpi	r24, 0x0F	; 15
    7ea2:	f9 f0       	breq	.+62     	; 0x7ee2 <ProcessMixer+0x5e4>
    7ea4:	e8 2f       	mov	r30, r24
    7ea6:	ff 27       	eor	r31, r31
    7ea8:	e7 fd       	sbrc	r30, 7
    7eaa:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    7eac:	88 30       	cpi	r24, 0x08	; 8
    7eae:	64 f0       	brlt	.+24     	; 0x7ec8 <ProcessMixer+0x5ca>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    7eb0:	38 97       	sbiw	r30, 0x08	; 8
    7eb2:	ee 0f       	add	r30, r30
    7eb4:	ff 1f       	adc	r31, r31
    7eb6:	21 e0       	ldi	r18, 0x01	; 1
    7eb8:	30 e0       	ldi	r19, 0x00	; 0
    7eba:	2c 0f       	add	r18, r28
    7ebc:	3d 1f       	adc	r19, r29
    7ebe:	e2 0f       	add	r30, r18
    7ec0:	f3 1f       	adc	r31, r19
    7ec2:	86 85       	ldd	r24, Z+14	; 0x0e
    7ec4:	97 85       	ldd	r25, Z+15	; 0x0f
    7ec6:	06 c0       	rjmp	.+12     	; 0x7ed4 <ProcessMixer+0x5d6>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    7ec8:	ee 0f       	add	r30, r30
    7eca:	ff 1f       	adc	r31, r31
    7ecc:	e4 5c       	subi	r30, 0xC4	; 196
    7ece:	f7 4f       	sbci	r31, 0xF7	; 247
    7ed0:	80 81       	ld	r24, Z
    7ed2:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    7ed4:	77 27       	eor	r23, r23
    7ed6:	67 fd       	sbrc	r22, 7
    7ed8:	70 95       	com	r23
    7eda:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
				P1_solution = P1_solution + temp2;
    7ede:	e8 0e       	add	r14, r24
    7ee0:	f9 1e       	adc	r15, r25
    7ee2:	f3 01       	movw	r30, r6
    7ee4:	eb 54       	subi	r30, 0x4B	; 75
    7ee6:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    7ee8:	60 81       	ld	r22, Z
    7eea:	66 23       	and	r22, r22
    7eec:	19 f1       	breq	.+70     	; 0x7f34 <ProcessMixer+0x636>
    7eee:	31 97       	sbiw	r30, 0x01	; 1
    7ef0:	80 81       	ld	r24, Z
    7ef2:	8f 30       	cpi	r24, 0x0F	; 15
    7ef4:	f9 f0       	breq	.+62     	; 0x7f34 <ProcessMixer+0x636>
    7ef6:	e8 2f       	mov	r30, r24
    7ef8:	ff 27       	eor	r31, r31
    7efa:	e7 fd       	sbrc	r30, 7
    7efc:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    7efe:	88 30       	cpi	r24, 0x08	; 8
    7f00:	64 f0       	brlt	.+24     	; 0x7f1a <ProcessMixer+0x61c>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    7f02:	38 97       	sbiw	r30, 0x08	; 8
    7f04:	ee 0f       	add	r30, r30
    7f06:	ff 1f       	adc	r31, r31
    7f08:	41 e0       	ldi	r20, 0x01	; 1
    7f0a:	50 e0       	ldi	r21, 0x00	; 0
    7f0c:	4c 0f       	add	r20, r28
    7f0e:	5d 1f       	adc	r21, r29
    7f10:	e4 0f       	add	r30, r20
    7f12:	f5 1f       	adc	r31, r21
    7f14:	86 85       	ldd	r24, Z+14	; 0x0e
    7f16:	97 85       	ldd	r25, Z+15	; 0x0f
    7f18:	06 c0       	rjmp	.+12     	; 0x7f26 <ProcessMixer+0x628>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    7f1a:	ee 0f       	add	r30, r30
    7f1c:	ff 1f       	adc	r31, r31
    7f1e:	e4 5c       	subi	r30, 0xC4	; 196
    7f20:	f7 4f       	sbci	r31, 0xF7	; 247
    7f22:	80 81       	ld	r24, Z
    7f24:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    7f26:	77 27       	eor	r23, r23
    7f28:	67 fd       	sbrc	r22, 7
    7f2a:	70 95       	com	r23
    7f2c:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
				P1_solution = P1_solution + temp2;
    7f30:	e8 0e       	add	r14, r24
    7f32:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (transition > 0)	
    7f34:	1a 14       	cp	r1, r10
    7f36:	1b 04       	cpc	r1, r11
    7f38:	0c f0       	brlt	.+2      	; 0x7f3c <ProcessMixer+0x63e>
    7f3a:	85 c0       	rjmp	.+266    	; 0x8046 <ProcessMixer+0x748>
    7f3c:	c6 01       	movw	r24, r12
    7f3e:	8f 53       	subi	r24, 0x3F	; 63
    7f40:	9a 4f       	sbci	r25, 0xFA	; 250
    7f42:	3c 01       	movw	r6, r24
    7f44:	fc 01       	movw	r30, r24
    7f46:	e1 56       	subi	r30, 0x61	; 97
    7f48:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    7f4a:	60 81       	ld	r22, Z
    7f4c:	66 23       	and	r22, r22
    7f4e:	59 f0       	breq	.+22     	; 0x7f66 <ProcessMixer+0x668>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    7f50:	80 91 3e 08 	lds	r24, 0x083E
    7f54:	90 91 3f 08 	lds	r25, 0x083F
    7f58:	77 27       	eor	r23, r23
    7f5a:	67 fd       	sbrc	r22, 7
    7f5c:	70 95       	com	r23
    7f5e:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
				P2_solution = P2_solution + temp2;
    7f62:	08 0f       	add	r16, r24
    7f64:	19 1f       	adc	r17, r25
    7f66:	f3 01       	movw	r30, r6
    7f68:	ef 55       	subi	r30, 0x5F	; 95
    7f6a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    7f6c:	60 81       	ld	r22, Z
    7f6e:	66 23       	and	r22, r22
    7f70:	59 f0       	breq	.+22     	; 0x7f88 <ProcessMixer+0x68a>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    7f72:	80 91 40 08 	lds	r24, 0x0840
    7f76:	90 91 41 08 	lds	r25, 0x0841
    7f7a:	77 27       	eor	r23, r23
    7f7c:	67 fd       	sbrc	r22, 7
    7f7e:	70 95       	com	r23
    7f80:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
				P2_solution = P2_solution + temp2;
    7f84:	08 0f       	add	r16, r24
    7f86:	19 1f       	adc	r17, r25
    7f88:	f3 01       	movw	r30, r6
    7f8a:	ed 55       	subi	r30, 0x5D	; 93
    7f8c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    7f8e:	60 81       	ld	r22, Z
    7f90:	66 23       	and	r22, r22
    7f92:	59 f0       	breq	.+22     	; 0x7faa <ProcessMixer+0x6ac>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    7f94:	80 91 42 08 	lds	r24, 0x0842
    7f98:	90 91 43 08 	lds	r25, 0x0843
    7f9c:	77 27       	eor	r23, r23
    7f9e:	67 fd       	sbrc	r22, 7
    7fa0:	70 95       	com	r23
    7fa2:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
				P2_solution = P2_solution + temp2;
    7fa6:	08 0f       	add	r16, r24
    7fa8:	19 1f       	adc	r17, r25
    7faa:	f3 01       	movw	r30, r6
    7fac:	ed 54       	subi	r30, 0x4D	; 77
    7fae:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    7fb0:	60 81       	ld	r22, Z
    7fb2:	66 23       	and	r22, r22
    7fb4:	09 f1       	breq	.+66     	; 0x7ff8 <ProcessMixer+0x6fa>
    7fb6:	31 97       	sbiw	r30, 0x01	; 1
    7fb8:	80 81       	ld	r24, Z
    7fba:	8f 30       	cpi	r24, 0x0F	; 15
    7fbc:	e9 f0       	breq	.+58     	; 0x7ff8 <ProcessMixer+0x6fa>
    7fbe:	e8 2f       	mov	r30, r24
    7fc0:	ff 27       	eor	r31, r31
    7fc2:	e7 fd       	sbrc	r30, 7
    7fc4:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    7fc6:	88 30       	cpi	r24, 0x08	; 8
    7fc8:	54 f0       	brlt	.+20     	; 0x7fde <ProcessMixer+0x6e0>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    7fca:	38 97       	sbiw	r30, 0x08	; 8
    7fcc:	ee 0f       	add	r30, r30
    7fce:	ff 1f       	adc	r31, r31
    7fd0:	a1 e0       	ldi	r26, 0x01	; 1
    7fd2:	b0 e0       	ldi	r27, 0x00	; 0
    7fd4:	ac 0f       	add	r26, r28
    7fd6:	bd 1f       	adc	r27, r29
    7fd8:	ea 0f       	add	r30, r26
    7fda:	fb 1f       	adc	r31, r27
    7fdc:	04 c0       	rjmp	.+8      	; 0x7fe6 <ProcessMixer+0x6e8>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    7fde:	ee 0f       	add	r30, r30
    7fe0:	ff 1f       	adc	r31, r31
    7fe2:	e4 5c       	subi	r30, 0xC4	; 196
    7fe4:	f7 4f       	sbci	r31, 0xF7	; 247
    7fe6:	80 81       	ld	r24, Z
    7fe8:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    7fea:	77 27       	eor	r23, r23
    7fec:	67 fd       	sbrc	r22, 7
    7fee:	70 95       	com	r23
    7ff0:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
				P2_solution = P2_solution + temp2;
    7ff4:	08 0f       	add	r16, r24
    7ff6:	19 1f       	adc	r17, r25
    7ff8:	f3 01       	movw	r30, r6
    7ffa:	e9 54       	subi	r30, 0x49	; 73
    7ffc:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    7ffe:	60 81       	ld	r22, Z
    8000:	66 23       	and	r22, r22
    8002:	09 f1       	breq	.+66     	; 0x8046 <ProcessMixer+0x748>
    8004:	31 97       	sbiw	r30, 0x01	; 1
    8006:	80 81       	ld	r24, Z
    8008:	8f 30       	cpi	r24, 0x0F	; 15
    800a:	e9 f0       	breq	.+58     	; 0x8046 <ProcessMixer+0x748>
    800c:	e8 2f       	mov	r30, r24
    800e:	ff 27       	eor	r31, r31
    8010:	e7 fd       	sbrc	r30, 7
    8012:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    8014:	88 30       	cpi	r24, 0x08	; 8
    8016:	54 f0       	brlt	.+20     	; 0x802c <ProcessMixer+0x72e>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    8018:	38 97       	sbiw	r30, 0x08	; 8
    801a:	ee 0f       	add	r30, r30
    801c:	ff 1f       	adc	r31, r31
    801e:	21 e0       	ldi	r18, 0x01	; 1
    8020:	30 e0       	ldi	r19, 0x00	; 0
    8022:	2c 0f       	add	r18, r28
    8024:	3d 1f       	adc	r19, r29
    8026:	e2 0f       	add	r30, r18
    8028:	f3 1f       	adc	r31, r19
    802a:	04 c0       	rjmp	.+8      	; 0x8034 <ProcessMixer+0x736>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    802c:	ee 0f       	add	r30, r30
    802e:	ff 1f       	adc	r31, r31
    8030:	e4 5c       	subi	r30, 0xC4	; 196
    8032:	f7 4f       	sbci	r31, 0xF7	; 247
    8034:	80 81       	ld	r24, Z
    8036:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    8038:	77 27       	eor	r23, r23
    803a:	67 fd       	sbrc	r22, 7
    803c:	70 95       	com	r23
    803e:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
				P2_solution = P2_solution + temp2;
    8042:	08 0f       	add	r16, r24
    8044:	19 1f       	adc	r17, r25
    8046:	c6 01       	movw	r24, r12
    8048:	8f 53       	subi	r24, 0x3F	; 63
    804a:	9a 4f       	sbci	r25, 0xFA	; 250
    804c:	fc 01       	movw	r30, r24
    804e:	ee 56       	subi	r30, 0x6E	; 110
    8050:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    8052:	f1 82       	std	Z+1, r15	; 0x01
    8054:	e0 82       	st	Z, r14
    8056:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    8058:	11 83       	std	Z+1, r17	; 0x01
    805a:	00 83       	st	Z, r16
    805c:	36 e2       	ldi	r19, 0x26	; 38
    805e:	c3 0e       	add	r12, r19
    8060:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    8062:	40 e3       	ldi	r20, 0x30	; 48
    8064:	c4 16       	cp	r12, r20
    8066:	41 e0       	ldi	r20, 0x01	; 1
    8068:	d4 06       	cpc	r13, r20
    806a:	09 f0       	breq	.+2      	; 0x806e <ProcessMixer+0x770>
    806c:	f3 cc       	rjmp	.-1562   	; 0x7a54 <ProcessMixer+0x156>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    806e:	80 91 ef 05 	lds	r24, 0x05EF
    8072:	88 23       	and	r24, r24
    8074:	41 f0       	breq	.+16     	; 0x8086 <ProcessMixer+0x788>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    8076:	80 91 24 05 	lds	r24, 0x0524
    807a:	90 91 25 05 	lds	r25, 0x0525
    807e:	90 93 22 05 	sts	0x0522, r25
    8082:	80 93 21 05 	sts	0x0521, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    8086:	00 91 21 05 	lds	r16, 0x0521
    808a:	10 91 22 05 	lds	r17, 0x0522
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    808e:	b4 e6       	ldi	r27, 0x64	; 100
    8090:	cb 2e       	mov	r12, r27
    8092:	d1 2c       	mov	r13, r1
    8094:	c0 1a       	sub	r12, r16
    8096:	d1 0a       	sbc	r13, r17
    8098:	83 e5       	ldi	r24, 0x53	; 83
    809a:	e8 2e       	mov	r14, r24
    809c:	86 e0       	ldi	r24, 0x06	; 6
    809e:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    80a0:	01 15       	cp	r16, r1
    80a2:	11 05       	cpc	r17, r1
    80a4:	21 f4       	brne	.+8      	; 0x80ae <ProcessMixer+0x7b0>
		{
			temp1 = Config.Channel[i].P1_value;
    80a6:	d7 01       	movw	r26, r14
    80a8:	8d 91       	ld	r24, X+
    80aa:	9c 91       	ld	r25, X
    80ac:	16 c0       	rjmp	.+44     	; 0x80da <ProcessMixer+0x7dc>
		}
		else if (transition >= 100)
    80ae:	04 36       	cpi	r16, 0x64	; 100
    80b0:	11 05       	cpc	r17, r1
    80b2:	24 f0       	brlt	.+8      	; 0x80bc <ProcessMixer+0x7be>
		{
			temp1 = Config.Channel[i].P2_value;
    80b4:	f7 01       	movw	r30, r14
    80b6:	82 81       	ldd	r24, Z+2	; 0x02
    80b8:	93 81       	ldd	r25, Z+3	; 0x03
    80ba:	0f c0       	rjmp	.+30     	; 0x80da <ProcessMixer+0x7dc>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    80bc:	b6 01       	movw	r22, r12
    80be:	d7 01       	movw	r26, r14
    80c0:	8d 91       	ld	r24, X+
    80c2:	9c 91       	ld	r25, X
    80c4:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>
    80c8:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    80ca:	b8 01       	movw	r22, r16
    80cc:	f7 01       	movw	r30, r14
    80ce:	82 81       	ldd	r24, Z+2	; 0x02
    80d0:	93 81       	ldd	r25, Z+3	; 0x03
    80d2:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    80d6:	8a 0d       	add	r24, r10
    80d8:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    80da:	d7 01       	movw	r26, r14
    80dc:	8d 93       	st	X+, r24
    80de:	9c 93       	st	X, r25
    80e0:	b6 e2       	ldi	r27, 0x26	; 38
    80e2:	eb 0e       	add	r14, r27
    80e4:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    80e6:	e3 e8       	ldi	r30, 0x83	; 131
    80e8:	ee 16       	cp	r14, r30
    80ea:	e7 e0       	ldi	r30, 0x07	; 7
    80ec:	fe 06       	cpc	r15, r30
    80ee:	c1 f6       	brne	.-80     	; 0x80a0 <ProcessMixer+0x7a2>
    80f0:	6d e5       	ldi	r22, 0x5D	; 93
    80f2:	c6 2e       	mov	r12, r22
    80f4:	66 e0       	ldi	r22, 0x06	; 6
    80f6:	d6 2e       	mov	r13, r22
    80f8:	7e e5       	ldi	r23, 0x5E	; 94
    80fa:	87 2e       	mov	r8, r23
    80fc:	76 e0       	ldi	r23, 0x06	; 6
    80fe:	97 2e       	mov	r9, r23
    8100:	e3 e5       	ldi	r30, 0x53	; 83
    8102:	ee 2e       	mov	r14, r30
    8104:	e6 e0       	ldi	r30, 0x06	; 6
    8106:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    8108:	f4 e6       	ldi	r31, 0x64	; 100
    810a:	af 2e       	mov	r10, r31
    810c:	b1 2c       	mov	r11, r1
    810e:	80 2f       	mov	r24, r16
    8110:	99 27       	eor	r25, r25
    8112:	87 fd       	sbrc	r24, 7
    8114:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    8116:	9c 01       	movw	r18, r24
    8118:	20 51       	subi	r18, 0x10	; 16
    811a:	35 4e       	sbci	r19, 0xE5	; 229
    811c:	3e 8f       	std	Y+30, r19	; 0x1e
    811e:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    8120:	95 01       	movw	r18, r10
    8122:	28 1b       	sub	r18, r24
    8124:	39 0b       	sbc	r19, r25
    8126:	a9 01       	movw	r20, r18
    8128:	40 51       	subi	r20, 0x10	; 16
    812a:	55 4e       	sbci	r21, 0xE5	; 229
    812c:	58 a3       	std	Y+32, r21	; 0x20
    812e:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    8130:	dc 01       	movw	r26, r24
    8132:	ab 5a       	subi	r26, 0xAB	; 171
    8134:	b4 4e       	sbci	r27, 0xE4	; 228
    8136:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    8138:	f9 01       	movw	r30, r18
    813a:	eb 5a       	subi	r30, 0xAB	; 171
    813c:	f4 4e       	sbci	r31, 0xE4	; 228
    813e:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    8140:	ae e1       	ldi	r26, 0x1E	; 30
    8142:	6a 2e       	mov	r6, r26
    8144:	ab ef       	ldi	r26, 0xFB	; 251
    8146:	7a 2e       	mov	r7, r26
    8148:	f6 01       	movw	r30, r12
    814a:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    814c:	90 81       	ld	r25, Z
    814e:	d6 01       	movw	r26, r12
    8150:	8c 91       	ld	r24, X
    8152:	91 11       	cpse	r25, r1
    8154:	03 c0       	rjmp	.+6      	; 0x815c <ProcessMixer+0x85e>
    8156:	88 23       	and	r24, r24
    8158:	09 f4       	brne	.+2      	; 0x815c <ProcessMixer+0x85e>
    815a:	61 c0       	rjmp	.+194    	; 0x821e <ProcessMixer+0x920>
    815c:	29 2f       	mov	r18, r25
    815e:	33 27       	eor	r19, r19
    8160:	27 fd       	sbrc	r18, 7
    8162:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    8164:	98 17       	cp	r25, r24
    8166:	09 f4       	brne	.+2      	; 0x816a <ProcessMixer+0x86c>
    8168:	48 c0       	rjmp	.+144    	; 0x81fa <ProcessMixer+0x8fc>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    816a:	99 27       	eor	r25, r25
    816c:	87 fd       	sbrc	r24, 7
    816e:	90 95       	com	r25
    8170:	82 1b       	sub	r24, r18
    8172:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    8174:	96 95       	lsr	r25
    8176:	98 2f       	mov	r25, r24
    8178:	88 27       	eor	r24, r24
    817a:	97 95       	ror	r25
    817c:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    817e:	b5 01       	movw	r22, r10
    8180:	0e 94 ef 4c 	call	0x99de	; 0x99de <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    8184:	36 95       	lsr	r19
    8186:	32 2f       	mov	r19, r18
    8188:	22 27       	eor	r18, r18
    818a:	37 95       	ror	r19
    818c:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    818e:	f4 01       	movw	r30, r8
    8190:	80 81       	ld	r24, Z
    8192:	81 11       	cpse	r24, r1
    8194:	08 c0       	rjmp	.+16     	; 0x81a6 <ProcessMixer+0x8a8>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    8196:	60 9f       	mul	r22, r16
    8198:	c0 01       	movw	r24, r0
    819a:	61 9f       	mul	r22, r17
    819c:	90 0d       	add	r25, r0
    819e:	70 9f       	mul	r23, r16
    81a0:	90 0d       	add	r25, r0
    81a2:	11 24       	eor	r1, r1
    81a4:	20 c0       	rjmp	.+64     	; 0x81e6 <ProcessMixer+0x8e8>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    81a6:	81 30       	cpi	r24, 0x01	; 1
    81a8:	31 f4       	brne	.+12     	; 0x81b6 <ProcessMixer+0x8b8>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    81aa:	77 ff       	sbrs	r23, 7
    81ac:	02 c0       	rjmp	.+4      	; 0x81b2 <ProcessMixer+0x8b4>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    81ae:	f2 01       	movw	r30, r4
    81b0:	06 c0       	rjmp	.+12     	; 0x81be <ProcessMixer+0x8c0>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    81b2:	f1 01       	movw	r30, r2
    81b4:	0d c0       	rjmp	.+26     	; 0x81d0 <ProcessMixer+0x8d2>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    81b6:	77 ff       	sbrs	r23, 7
    81b8:	09 c0       	rjmp	.+18     	; 0x81cc <ProcessMixer+0x8ce>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    81ba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    81bc:	f8 a1       	ldd	r31, Y+32	; 0x20
    81be:	84 91       	lpm	r24, Z
    81c0:	a5 01       	movw	r20, r10
    81c2:	48 1b       	sub	r20, r24
    81c4:	51 09       	sbc	r21, r1
    81c6:	87 fd       	sbrc	r24, 7
    81c8:	53 95       	inc	r21
    81ca:	06 c0       	rjmp	.+12     	; 0x81d8 <ProcessMixer+0x8da>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    81cc:	ed 8d       	ldd	r30, Y+29	; 0x1d
    81ce:	fe 8d       	ldd	r31, Y+30	; 0x1e
    81d0:	44 91       	lpm	r20, Z
    81d2:	55 27       	eor	r21, r21
    81d4:	47 fd       	sbrc	r20, 7
    81d6:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    81d8:	64 9f       	mul	r22, r20
    81da:	c0 01       	movw	r24, r0
    81dc:	65 9f       	mul	r22, r21
    81de:	90 0d       	add	r25, r0
    81e0:	74 9f       	mul	r23, r20
    81e2:	90 0d       	add	r25, r0
    81e4:	11 24       	eor	r1, r1
    81e6:	82 0f       	add	r24, r18
    81e8:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    81ea:	bc 01       	movw	r22, r24
    81ec:	60 5c       	subi	r22, 0xC0	; 192
    81ee:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    81f0:	66 0f       	add	r22, r22
    81f2:	67 2f       	mov	r22, r23
    81f4:	66 1f       	adc	r22, r22
    81f6:	77 0b       	sbc	r23, r23
    81f8:	01 c0       	rjmp	.+2      	; 0x81fc <ProcessMixer+0x8fe>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    81fa:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    81fc:	80 91 3a 08 	lds	r24, 0x083A
    8200:	90 91 3b 08 	lds	r25, 0x083B
    8204:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    8208:	88 5e       	subi	r24, 0xE8	; 232
    820a:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    820c:	d7 01       	movw	r26, r14
    820e:	2d 91       	ld	r18, X+
    8210:	3c 91       	ld	r19, X
    8212:	11 97       	sbiw	r26, 0x01	; 1
    8214:	28 0f       	add	r18, r24
    8216:	39 1f       	adc	r19, r25
    8218:	2d 93       	st	X+, r18
    821a:	3c 93       	st	X, r19
    821c:	08 c0       	rjmp	.+16     	; 0x822e <ProcessMixer+0x930>
    821e:	f6 01       	movw	r30, r12
    8220:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    8222:	80 81       	ld	r24, Z
    8224:	82 30       	cpi	r24, 0x02	; 2
    8226:	19 f4       	brne	.+6      	; 0x822e <ProcessMixer+0x930>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    8228:	f7 01       	movw	r30, r14
    822a:	71 82       	std	Z+1, r7	; 0x01
    822c:	60 82       	st	Z, r6
    822e:	f6 e2       	ldi	r31, 0x26	; 38
    8230:	ef 0e       	add	r14, r31
    8232:	f1 1c       	adc	r15, r1
    8234:	26 e2       	ldi	r18, 0x26	; 38
    8236:	c2 0e       	add	r12, r18
    8238:	d1 1c       	adc	r13, r1
    823a:	36 e2       	ldi	r19, 0x26	; 38
    823c:	83 0e       	add	r8, r19
    823e:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    8240:	43 e8       	ldi	r20, 0x83	; 131
    8242:	e4 16       	cp	r14, r20
    8244:	47 e0       	ldi	r20, 0x07	; 7
    8246:	f4 06       	cpc	r15, r20
    8248:	09 f0       	breq	.+2      	; 0x824c <ProcessMixer+0x94e>
    824a:	7e cf       	rjmp	.-260    	; 0x8148 <ProcessMixer+0x84a>
    824c:	eb e5       	ldi	r30, 0x5B	; 91
    824e:	f6 e0       	ldi	r31, 0x06	; 6
    8250:	23 e5       	ldi	r18, 0x53	; 83
    8252:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    8254:	94 e6       	ldi	r25, 0x64	; 100
    8256:	69 2e       	mov	r6, r25
    8258:	71 2c       	mov	r7, r1
    825a:	df 01       	movw	r26, r30
    825c:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    825e:	cc 90       	ld	r12, X
    8260:	12 96       	adiw	r26, 0x02	; 2
    8262:	ac 90       	ld	r10, X
    8264:	50 80       	ld	r5, Z
    8266:	ca 10       	cpse	r12, r10
    8268:	03 c0       	rjmp	.+6      	; 0x8270 <ProcessMixer+0x972>
    826a:	5c 14       	cp	r5, r12
    826c:	09 f4       	brne	.+2      	; 0x8270 <ProcessMixer+0x972>
    826e:	53 c0       	rjmp	.+166    	; 0x8316 <ProcessMixer+0xa18>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    8270:	bb 24       	eor	r11, r11
    8272:	a7 fc       	sbrc	r10, 7
    8274:	b0 94       	com	r11
    8276:	dd 24       	eor	r13, r13
    8278:	c7 fc       	sbrc	r12, 7
    827a:	d0 94       	com	r13
    827c:	c5 01       	movw	r24, r10
    827e:	8c 19       	sub	r24, r12
    8280:	9d 09       	sbc	r25, r13
    8282:	df 01       	movw	r26, r30
    8284:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    8286:	ec 90       	ld	r14, X
    8288:	ff 24       	eor	r15, r15
    828a:	e7 fc       	sbrc	r14, 7
    828c:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    828e:	96 95       	lsr	r25
    8290:	98 2f       	mov	r25, r24
    8292:	88 27       	eor	r24, r24
    8294:	97 95       	ror	r25
    8296:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    8298:	a7 01       	movw	r20, r14
    829a:	55 95       	asr	r21
    829c:	47 95       	ror	r20
    829e:	84 0f       	add	r24, r20
    82a0:	95 1f       	adc	r25, r21
    82a2:	b7 01       	movw	r22, r14
    82a4:	0e 94 ef 4c 	call	0x99de	; 0x99de <__divmodhi4>
    82a8:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    82aa:	85 2d       	mov	r24, r5
    82ac:	99 27       	eor	r25, r25
    82ae:	87 fd       	sbrc	r24, 7
    82b0:	90 95       	com	r25
    82b2:	8a 19       	sub	r24, r10
    82b4:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    82b6:	b3 01       	movw	r22, r6
    82b8:	6e 19       	sub	r22, r14
    82ba:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    82bc:	96 95       	lsr	r25
    82be:	98 2f       	mov	r25, r24
    82c0:	88 27       	eor	r24, r24
    82c2:	97 95       	ror	r25
    82c4:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    82c6:	ab 01       	movw	r20, r22
    82c8:	55 95       	asr	r21
    82ca:	47 95       	ror	r20
    82cc:	84 0f       	add	r24, r20
    82ce:	95 1f       	adc	r25, r21
    82d0:	0e 94 ef 4c 	call	0x99de	; 0x99de <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    82d4:	d6 94       	lsr	r13
    82d6:	dc 2c       	mov	r13, r12
    82d8:	cc 24       	eor	r12, r12
    82da:	d7 94       	ror	r13
    82dc:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    82de:	40 e0       	ldi	r20, 0x00	; 0
    82e0:	84 2f       	mov	r24, r20
    82e2:	90 e0       	ldi	r25, 0x00	; 0
    82e4:	80 17       	cp	r24, r16
    82e6:	91 07       	cpc	r25, r17
    82e8:	54 f4       	brge	.+20     	; 0x82fe <ProcessMixer+0xa00>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    82ea:	8e 15       	cp	r24, r14
    82ec:	9f 05       	cpc	r25, r15
    82ee:	1c f4       	brge	.+6      	; 0x82f6 <ProcessMixer+0x9f8>
				{
					temp3 += Step1;
    82f0:	c8 0c       	add	r12, r8
    82f2:	d9 1c       	adc	r13, r9
    82f4:	02 c0       	rjmp	.+4      	; 0x82fa <ProcessMixer+0x9fc>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    82f6:	c6 0e       	add	r12, r22
    82f8:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    82fa:	4f 5f       	subi	r20, 0xFF	; 255
    82fc:	f1 cf       	rjmp	.-30     	; 0x82e0 <ProcessMixer+0x9e2>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    82fe:	c6 01       	movw	r24, r12
    8300:	80 5c       	subi	r24, 0xC0	; 192
    8302:	9f 4f       	sbci	r25, 0xFF	; 255
    8304:	88 0f       	add	r24, r24
    8306:	89 2f       	mov	r24, r25
    8308:	88 1f       	adc	r24, r24
    830a:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    830c:	5a e0       	ldi	r21, 0x0A	; 10
    830e:	85 02       	muls	r24, r21
    8310:	60 01       	movw	r12, r0
    8312:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    8314:	05 c0       	rjmp	.+10     	; 0x8320 <ProcessMixer+0xa22>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    8316:	85 2d       	mov	r24, r5
    8318:	9a e0       	ldi	r25, 0x0A	; 10
    831a:	89 02       	muls	r24, r25
    831c:	60 01       	movw	r12, r0
    831e:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    8320:	d9 01       	movw	r26, r18
    8322:	4d 91       	ld	r20, X+
    8324:	5c 91       	ld	r21, X
    8326:	11 97       	sbiw	r26, 0x01	; 1
    8328:	4c 0d       	add	r20, r12
    832a:	5d 1d       	adc	r21, r13
    832c:	4d 93       	st	X+, r20
    832e:	5c 93       	st	X, r21
    8330:	2a 5d       	subi	r18, 0xDA	; 218
    8332:	3f 4f       	sbci	r19, 0xFF	; 255
    8334:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    8336:	b7 e0       	ldi	r27, 0x07	; 7
    8338:	eb 38       	cpi	r30, 0x8B	; 139
    833a:	fb 07       	cpc	r31, r27
    833c:	09 f0       	breq	.+2      	; 0x8340 <ProcessMixer+0xa42>
    833e:	8d cf       	rjmp	.-230    	; 0x825a <ProcessMixer+0x95c>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    8340:	e2 96       	adiw	r28, 0x32	; 50
    8342:	0f b6       	in	r0, 0x3f	; 63
    8344:	f8 94       	cli
    8346:	de bf       	out	0x3e, r29	; 62
    8348:	0f be       	out	0x3f, r0	; 63
    834a:	cd bf       	out	0x3d, r28	; 61
    834c:	df 91       	pop	r29
    834e:	cf 91       	pop	r28
    8350:	1f 91       	pop	r17
    8352:	0f 91       	pop	r16
    8354:	ff 90       	pop	r15
    8356:	ef 90       	pop	r14
    8358:	df 90       	pop	r13
    835a:	cf 90       	pop	r12
    835c:	bf 90       	pop	r11
    835e:	af 90       	pop	r10
    8360:	9f 90       	pop	r9
    8362:	8f 90       	pop	r8
    8364:	7f 90       	pop	r7
    8366:	6f 90       	pop	r6
    8368:	5f 90       	pop	r5
    836a:	4f 90       	pop	r4
    836c:	3f 90       	pop	r3
    836e:	2f 90       	pop	r2
    8370:	08 95       	ret

00008372 <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    8372:	2a e0       	ldi	r18, 0x0A	; 10
    8374:	82 02       	muls	r24, r18
    8376:	c0 01       	movw	r24, r0
    8378:	11 24       	eor	r1, r1

	return temp16_2;
}
    837a:	8a 55       	subi	r24, 0x5A	; 90
    837c:	91 4f       	sbci	r25, 0xF1	; 241
    837e:	08 95       	ret

00008380 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    8380:	df 92       	push	r13
    8382:	ef 92       	push	r14
    8384:	ff 92       	push	r15
    8386:	0f 93       	push	r16
    8388:	1f 93       	push	r17
    838a:	cf 93       	push	r28
    838c:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    838e:	dc 01       	movw	r26, r24
    8390:	0d 90       	ld	r0, X+
    8392:	00 20       	and	r0, r0
    8394:	e9 f7       	brne	.-6      	; 0x8390 <mugui_text_sizestring+0x10>
    8396:	11 97       	sbiw	r26, 0x01	; 1
    8398:	a8 1b       	sub	r26, r24
    839a:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    839c:	fb 01       	movw	r30, r22
    839e:	34 96       	adiw	r30, 0x04	; 4
    83a0:	e4 90       	lpm	r14, Z
    83a2:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    83a4:	32 97       	sbiw	r30, 0x02	; 2
    83a6:	d4 90       	lpm	r13, Z
    83a8:	ec 01       	movw	r28, r24
    83aa:	a8 0f       	add	r26, r24
    83ac:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    83ae:	80 e0       	ldi	r24, 0x00	; 0
    83b0:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    83b2:	ca 17       	cp	r28, r26
    83b4:	db 07       	cpc	r29, r27
    83b6:	29 f1       	breq	.+74     	; 0x8402 <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    83b8:	29 91       	ld	r18, Y+
    83ba:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    83bc:	30 e0       	ldi	r19, 0x00	; 0
    83be:	22 0f       	add	r18, r18
    83c0:	33 1f       	adc	r19, r19
    83c2:	f9 01       	movw	r30, r18
    83c4:	35 96       	adiw	r30, 0x05	; 5
    83c6:	e6 0f       	add	r30, r22
    83c8:	f7 1f       	adc	r31, r23
    83ca:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    83cc:	f9 01       	movw	r30, r18
    83ce:	36 96       	adiw	r30, 0x06	; 6
    83d0:	e6 0f       	add	r30, r22
    83d2:	f7 1f       	adc	r31, r23
    83d4:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    83d6:	10 e0       	ldi	r17, 0x00	; 0
    83d8:	20 e0       	ldi	r18, 0x00	; 0
    83da:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    83dc:	32 2f       	mov	r19, r18
    83de:	21 2f       	mov	r18, r17
    83e0:	10 2f       	mov	r17, r16
    83e2:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    83e4:	0e 0f       	add	r16, r30
    83e6:	11 1d       	adc	r17, r1
    83e8:	21 1d       	adc	r18, r1
    83ea:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    83ec:	fb 01       	movw	r30, r22
    83ee:	e0 0f       	add	r30, r16
    83f0:	f1 1f       	adc	r31, r17
    83f2:	04 91       	lpm	r16, Z
    83f4:	20 2f       	mov	r18, r16
    83f6:	30 e0       	ldi	r19, 0x00	; 0
    83f8:	2f 5f       	subi	r18, 0xFF	; 255
    83fa:	3f 4f       	sbci	r19, 0xFF	; 255
    83fc:	82 0f       	add	r24, r18
    83fe:	93 1f       	adc	r25, r19
    8400:	d8 cf       	rjmp	.-80     	; 0x83b2 <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    8402:	fa 01       	movw	r30, r20
    8404:	91 83       	std	Z+1, r25	; 0x01
    8406:	80 83       	st	Z, r24
	size->y = height;
    8408:	f3 82       	std	Z+3, r15	; 0x03
    840a:	e2 82       	std	Z+2, r14	; 0x02
}
    840c:	df 91       	pop	r29
    840e:	cf 91       	pop	r28
    8410:	1f 91       	pop	r17
    8412:	0f 91       	pop	r16
    8414:	ff 90       	pop	r15
    8416:	ef 90       	pop	r14
    8418:	df 90       	pop	r13
    841a:	08 95       	ret

0000841c <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    841c:	aa e6       	ldi	r26, 0x6A	; 106
    841e:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    8420:	20 e0       	ldi	r18, 0x00	; 0
    8422:	30 e0       	ldi	r19, 0x00	; 0
    8424:	fc 01       	movw	r30, r24
    8426:	e2 0f       	add	r30, r18
    8428:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    842a:	44 91       	lpm	r20, Z
    842c:	44 23       	and	r20, r20
    842e:	41 f0       	breq	.+16     	; 0x8440 <pgm_mugui_scopy+0x24>
    8430:	28 31       	cpi	r18, 0x18	; 24
    8432:	31 05       	cpc	r19, r1
    8434:	29 f0       	breq	.+10     	; 0x8440 <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    8436:	e4 91       	lpm	r30, Z
    8438:	ed 93       	st	X+, r30
		i++;
    843a:	2f 5f       	subi	r18, 0xFF	; 255
    843c:	3f 4f       	sbci	r19, 0xFF	; 255
    843e:	f2 cf       	rjmp	.-28     	; 0x8424 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    8440:	f9 01       	movw	r30, r18
    8442:	e6 59       	subi	r30, 0x96	; 150
    8444:	fa 4f       	sbci	r31, 0xFA	; 250
    8446:	10 82       	st	Z, r1
    8448:	08 95       	ret

0000844a <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    844a:	2f 92       	push	r2
    844c:	3f 92       	push	r3
    844e:	4f 92       	push	r4
    8450:	5f 92       	push	r5
    8452:	6f 92       	push	r6
    8454:	7f 92       	push	r7
    8456:	8f 92       	push	r8
    8458:	9f 92       	push	r9
    845a:	af 92       	push	r10
    845c:	bf 92       	push	r11
    845e:	cf 92       	push	r12
    8460:	df 92       	push	r13
    8462:	ef 92       	push	r14
    8464:	ff 92       	push	r15
    8466:	0f 93       	push	r16
    8468:	1f 93       	push	r17
    846a:	cf 93       	push	r28
    846c:	df 93       	push	r29
    846e:	cd b7       	in	r28, 0x3d	; 61
    8470:	de b7       	in	r29, 0x3e	; 62
    8472:	29 97       	sbiw	r28, 0x09	; 9
    8474:	0f b6       	in	r0, 0x3f	; 63
    8476:	f8 94       	cli
    8478:	de bf       	out	0x3e, r29	; 62
    847a:	0f be       	out	0x3f, r0	; 63
    847c:	cd bf       	out	0x3d, r28	; 61
    847e:	4c 83       	std	Y+4, r20	; 0x04
    8480:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    8482:	fb 01       	movw	r30, r22
    8484:	32 96       	adiw	r30, 0x02	; 2
    8486:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    8488:	32 96       	adiw	r30, 0x02	; 2
    848a:	e4 91       	lpm	r30, Z
    848c:	2e 2e       	mov	r2, r30
    848e:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    8490:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    8492:	90 e0       	ldi	r25, 0x00	; 0
    8494:	88 0f       	add	r24, r24
    8496:	99 1f       	adc	r25, r25
    8498:	fc 01       	movw	r30, r24
    849a:	35 96       	adiw	r30, 0x05	; 5
    849c:	e6 0f       	add	r30, r22
    849e:	f7 1f       	adc	r31, r23
    84a0:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    84a2:	fc 01       	movw	r30, r24
    84a4:	36 96       	adiw	r30, 0x06	; 6
    84a6:	e6 0f       	add	r30, r22
    84a8:	f7 1f       	adc	r31, r23
    84aa:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    84ac:	06 2d       	mov	r16, r6
    84ae:	10 e0       	ldi	r17, 0x00	; 0
    84b0:	20 e0       	ldi	r18, 0x00	; 0
    84b2:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    84b4:	32 2f       	mov	r19, r18
    84b6:	21 2f       	mov	r18, r17
    84b8:	10 2f       	mov	r17, r16
    84ba:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    84bc:	08 0f       	add	r16, r24
    84be:	11 1d       	adc	r17, r1
    84c0:	21 1d       	adc	r18, r1
    84c2:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    84c4:	c8 01       	movw	r24, r16
    84c6:	fb 01       	movw	r30, r22
    84c8:	e0 0f       	add	r30, r16
    84ca:	f1 1f       	adc	r31, r17
    84cc:	64 90       	lpm	r6, Z
    84ce:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    84d0:	21 01       	movw	r4, r2
    84d2:	21 e0       	ldi	r18, 0x01	; 1
    84d4:	42 1a       	sub	r4, r18
    84d6:	51 08       	sbc	r5, r1
    84d8:	13 e0       	ldi	r17, 0x03	; 3
    84da:	56 94       	lsr	r5
    84dc:	47 94       	ror	r4
    84de:	1a 95       	dec	r17
    84e0:	e1 f7       	brne	.-8      	; 0x84da <mugui_lcd_putc+0x90>
    84e2:	43 94       	inc	r4
    84e4:	a4 2d       	mov	r26, r4
    84e6:	b0 e0       	ldi	r27, 0x00	; 0
    84e8:	ba 83       	std	Y+2, r27	; 0x02
    84ea:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    84ec:	a1 2c       	mov	r10, r1
    84ee:	b1 2c       	mov	r11, r1
    84f0:	00 e0       	ldi	r16, 0x00	; 0
    84f2:	10 e0       	ldi	r17, 0x00	; 0
    84f4:	4b 01       	movw	r8, r22
    84f6:	bf ef       	ldi	r27, 0xFF	; 255
    84f8:	8b 1a       	sub	r8, r27
    84fa:	9b 0a       	sbc	r9, r27
    84fc:	88 0e       	add	r8, r24
    84fe:	99 1e       	adc	r9, r25
    8500:	06 15       	cp	r16, r6
    8502:	17 05       	cpc	r17, r7
    8504:	08 f0       	brcs	.+2      	; 0x8508 <mugui_lcd_putc+0xbe>
    8506:	43 c0       	rjmp	.+134    	; 0x858e <mugui_lcd_putc+0x144>
    8508:	c1 2c       	mov	r12, r1
    850a:	d1 2c       	mov	r13, r1
    850c:	e1 2c       	mov	r14, r1
    850e:	f1 2c       	mov	r15, r1
    8510:	94 01       	movw	r18, r8
    8512:	2a 0d       	add	r18, r10
    8514:	3b 1d       	adc	r19, r11
    8516:	3f 83       	std	Y+7, r19	; 0x07
    8518:	2e 83       	std	Y+6, r18	; 0x06
    851a:	5c 80       	ldd	r5, Y+4	; 0x04
    851c:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    851e:	c4 14       	cp	r12, r4
    8520:	78 f5       	brcc	.+94     	; 0x8580 <mugui_lcd_putc+0x136>
    8522:	ee 81       	ldd	r30, Y+6	; 0x06
    8524:	ff 81       	ldd	r31, Y+7	; 0x07
    8526:	ec 0d       	add	r30, r12
    8528:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    852a:	34 91       	lpm	r19, Z
    852c:	3b 83       	std	Y+3, r19	; 0x03
    852e:	19 86       	std	Y+9, r1	; 0x09
    8530:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    8532:	e2 14       	cp	r14, r2
    8534:	f3 04       	cpc	r15, r3
    8536:	00 f5       	brcc	.+64     	; 0x8578 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    8538:	81 e0       	ldi	r24, 0x01	; 1
    853a:	90 e0       	ldi	r25, 0x00	; 0
    853c:	08 84       	ldd	r0, Y+8	; 0x08
    853e:	02 c0       	rjmp	.+4      	; 0x8544 <mugui_lcd_putc+0xfa>
    8540:	88 0f       	add	r24, r24
    8542:	99 1f       	adc	r25, r25
    8544:	0a 94       	dec	r0
    8546:	e2 f7       	brpl	.-8      	; 0x8540 <mugui_lcd_putc+0xf6>
					bit = data & mask;
    8548:	3b 81       	ldd	r19, Y+3	; 0x03
    854a:	83 23       	and	r24, r19
    854c:	4d 81       	ldd	r20, Y+5	; 0x05
    854e:	4e 0d       	add	r20, r14
					if(bit)
    8550:	88 23       	and	r24, r24
    8552:	11 f0       	breq	.+4      	; 0x8558 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    8554:	21 e0       	ldi	r18, 0x01	; 1
    8556:	01 c0       	rjmp	.+2      	; 0x855a <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    8558:	20 e0       	ldi	r18, 0x00	; 0
    855a:	65 2d       	mov	r22, r5
    855c:	80 e0       	ldi	r24, 0x00	; 0
    855e:	91 e0       	ldi	r25, 0x01	; 1
    8560:	0e 94 99 23 	call	0x4732	; 0x4732 <setpixel>
					}
					ty++;
    8564:	8f ef       	ldi	r24, 0xFF	; 255
    8566:	e8 1a       	sub	r14, r24
    8568:	f8 0a       	sbc	r15, r24
    856a:	a8 85       	ldd	r26, Y+8	; 0x08
    856c:	b9 85       	ldd	r27, Y+9	; 0x09
    856e:	11 96       	adiw	r26, 0x01	; 1
    8570:	b9 87       	std	Y+9, r27	; 0x09
    8572:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    8574:	18 97       	sbiw	r26, 0x08	; 8
    8576:	e9 f6       	brne	.-70     	; 0x8532 <mugui_lcd_putc+0xe8>
    8578:	bf ef       	ldi	r27, 0xFF	; 255
    857a:	cb 1a       	sub	r12, r27
    857c:	db 0a       	sbc	r13, r27
    857e:	cf cf       	rjmp	.-98     	; 0x851e <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    8580:	0f 5f       	subi	r16, 0xFF	; 255
    8582:	1f 4f       	sbci	r17, 0xFF	; 255
    8584:	e9 81       	ldd	r30, Y+1	; 0x01
    8586:	fa 81       	ldd	r31, Y+2	; 0x02
    8588:	ae 0e       	add	r10, r30
    858a:	bf 1e       	adc	r11, r31
    858c:	b9 cf       	rjmp	.-142    	; 0x8500 <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    858e:	c3 01       	movw	r24, r6
    8590:	29 96       	adiw	r28, 0x09	; 9
    8592:	0f b6       	in	r0, 0x3f	; 63
    8594:	f8 94       	cli
    8596:	de bf       	out	0x3e, r29	; 62
    8598:	0f be       	out	0x3f, r0	; 63
    859a:	cd bf       	out	0x3d, r28	; 61
    859c:	df 91       	pop	r29
    859e:	cf 91       	pop	r28
    85a0:	1f 91       	pop	r17
    85a2:	0f 91       	pop	r16
    85a4:	ff 90       	pop	r15
    85a6:	ef 90       	pop	r14
    85a8:	df 90       	pop	r13
    85aa:	cf 90       	pop	r12
    85ac:	bf 90       	pop	r11
    85ae:	af 90       	pop	r10
    85b0:	9f 90       	pop	r9
    85b2:	8f 90       	pop	r8
    85b4:	7f 90       	pop	r7
    85b6:	6f 90       	pop	r6
    85b8:	5f 90       	pop	r5
    85ba:	4f 90       	pop	r4
    85bc:	3f 90       	pop	r3
    85be:	2f 90       	pop	r2
    85c0:	08 95       	ret

000085c2 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    85c2:	af 92       	push	r10
    85c4:	bf 92       	push	r11
    85c6:	cf 92       	push	r12
    85c8:	df 92       	push	r13
    85ca:	ef 92       	push	r14
    85cc:	ff 92       	push	r15
    85ce:	0f 93       	push	r16
    85d0:	1f 93       	push	r17
    85d2:	cf 93       	push	r28
    85d4:	df 93       	push	r29
    85d6:	ec 01       	movw	r28, r24
    85d8:	7b 01       	movw	r14, r22
    85da:	6a 01       	movw	r12, r20
    85dc:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    85de:	00 e0       	ldi	r16, 0x00	; 0
    85e0:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    85e2:	ce 01       	movw	r24, r28
    85e4:	fe 01       	movw	r30, r28
    85e6:	24 91       	lpm	r18, Z
    85e8:	22 23       	and	r18, r18
    85ea:	71 f0       	breq	.+28     	; 0x8608 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    85ec:	21 96       	adiw	r28, 0x01	; 1
    85ee:	fc 01       	movw	r30, r24
    85f0:	84 91       	lpm	r24, Z
    85f2:	a8 01       	movw	r20, r16
    85f4:	4c 0d       	add	r20, r12
    85f6:	5d 1d       	adc	r21, r13
    85f8:	95 01       	movw	r18, r10
    85fa:	b7 01       	movw	r22, r14
    85fc:	0e 94 25 42 	call	0x844a	; 0x844a <mugui_lcd_putc>
    8600:	01 96       	adiw	r24, 0x01	; 1
    8602:	08 0f       	add	r16, r24
    8604:	19 1f       	adc	r17, r25
    8606:	ed cf       	rjmp	.-38     	; 0x85e2 <pgm_mugui_lcd_puts+0x20>
	}
}
    8608:	df 91       	pop	r29
    860a:	cf 91       	pop	r28
    860c:	1f 91       	pop	r17
    860e:	0f 91       	pop	r16
    8610:	ff 90       	pop	r15
    8612:	ef 90       	pop	r14
    8614:	df 90       	pop	r13
    8616:	cf 90       	pop	r12
    8618:	bf 90       	pop	r11
    861a:	af 90       	pop	r10
    861c:	08 95       	ret

0000861e <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    861e:	8f 92       	push	r8
    8620:	9f 92       	push	r9
    8622:	af 92       	push	r10
    8624:	bf 92       	push	r11
    8626:	cf 92       	push	r12
    8628:	df 92       	push	r13
    862a:	ef 92       	push	r14
    862c:	ff 92       	push	r15
    862e:	0f 93       	push	r16
    8630:	1f 93       	push	r17
    8632:	cf 93       	push	r28
    8634:	df 93       	push	r29
    8636:	6b 01       	movw	r12, r22
    8638:	5a 01       	movw	r10, r20
    863a:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    863c:	ec 01       	movw	r28, r24
    863e:	09 90       	ld	r0, Y+
    8640:	00 20       	and	r0, r0
    8642:	e9 f7       	brne	.-6      	; 0x863e <mugui_lcd_puts+0x20>
    8644:	8c 01       	movw	r16, r24
    8646:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    8648:	e1 2c       	mov	r14, r1
    864a:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    864c:	0c 17       	cp	r16, r28
    864e:	1d 07       	cpc	r17, r29
    8650:	71 f0       	breq	.+28     	; 0x866e <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    8652:	a7 01       	movw	r20, r14
    8654:	4a 0d       	add	r20, r10
    8656:	5b 1d       	adc	r21, r11
    8658:	94 01       	movw	r18, r8
    865a:	b6 01       	movw	r22, r12
    865c:	f8 01       	movw	r30, r16
    865e:	81 91       	ld	r24, Z+
    8660:	8f 01       	movw	r16, r30
    8662:	0e 94 25 42 	call	0x844a	; 0x844a <mugui_lcd_putc>
    8666:	01 96       	adiw	r24, 0x01	; 1
    8668:	e8 0e       	add	r14, r24
    866a:	f9 1e       	adc	r15, r25
    866c:	ef cf       	rjmp	.-34     	; 0x864c <mugui_lcd_puts+0x2e>
	}
}
    866e:	df 91       	pop	r29
    8670:	cf 91       	pop	r28
    8672:	1f 91       	pop	r17
    8674:	0f 91       	pop	r16
    8676:	ff 90       	pop	r15
    8678:	ef 90       	pop	r14
    867a:	df 90       	pop	r13
    867c:	cf 90       	pop	r12
    867e:	bf 90       	pop	r11
    8680:	af 90       	pop	r10
    8682:	9f 90       	pop	r9
    8684:	8f 90       	pop	r8
    8686:	08 95       	ret

00008688 <Sensor_PID>:
int32_t PID_AvgAccVert = 0;
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    8688:	2f 92       	push	r2
    868a:	3f 92       	push	r3
    868c:	4f 92       	push	r4
    868e:	5f 92       	push	r5
    8690:	6f 92       	push	r6
    8692:	7f 92       	push	r7
    8694:	8f 92       	push	r8
    8696:	9f 92       	push	r9
    8698:	af 92       	push	r10
    869a:	bf 92       	push	r11
    869c:	cf 92       	push	r12
    869e:	df 92       	push	r13
    86a0:	ef 92       	push	r14
    86a2:	ff 92       	push	r15
    86a4:	0f 93       	push	r16
    86a6:	1f 93       	push	r17
    86a8:	cf 93       	push	r28
    86aa:	df 93       	push	r29
    86ac:	cd b7       	in	r28, 0x3d	; 61
    86ae:	de b7       	in	r29, 0x3e	; 62
    86b0:	a3 97       	sbiw	r28, 0x23	; 35
    86b2:	0f b6       	in	r0, 0x3f	; 63
    86b4:	f8 94       	cli
    86b6:	de bf       	out	0x3e, r29	; 62
    86b8:	0f be       	out	0x3f, r0	; 63
    86ba:	cd bf       	out	0x3d, r28	; 61
    86bc:	68 a3       	std	Y+32, r22	; 0x20
    86be:	79 a3       	std	Y+33, r23	; 0x21
    86c0:	8a a3       	std	Y+34, r24	; 0x22
    86c2:	9b a3       	std	Y+35, r25	; 0x23
	float tempf1 = 0;
    86c4:	1d 86       	std	Y+13, r1	; 0x0d
    86c6:	1e 86       	std	Y+14, r1	; 0x0e
    86c8:	1f 86       	std	Y+15, r1	; 0x0f
    86ca:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    86cc:	80 91 3e 08 	lds	r24, 0x083E
    86d0:	90 91 3f 08 	lds	r25, 0x083F
    86d4:	91 95       	neg	r25
    86d6:	81 95       	neg	r24
    86d8:	91 09       	sbc	r25, r1
    86da:	98 87       	std	Y+8, r25	; 0x08
    86dc:	8f 83       	std	Y+7, r24	; 0x07
    86de:	80 91 40 08 	lds	r24, 0x0840
    86e2:	90 91 41 08 	lds	r25, 0x0841
    86e6:	9a 87       	std	Y+10, r25	; 0x0a
    86e8:	89 87       	std	Y+9, r24	; 0x09
    86ea:	80 91 42 08 	lds	r24, 0x0842
    86ee:	90 91 43 08 	lds	r25, 0x0843
    86f2:	9c 87       	std	Y+12, r25	; 0x0c
    86f4:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    86f6:	80 91 f6 05 	lds	r24, 0x05F6
    86fa:	89 83       	std	Y+1, r24	; 0x01
    86fc:	80 91 fc 05 	lds	r24, 0x05FC
    8700:	8a 83       	std	Y+2, r24	; 0x02
    8702:	80 91 02 06 	lds	r24, 0x0602
    8706:	8b 83       	std	Y+3, r24	; 0x03
    8708:	80 91 08 06 	lds	r24, 0x0608
    870c:	8c 83       	std	Y+4, r24	; 0x04
    870e:	80 91 0e 06 	lds	r24, 0x060E
    8712:	8d 83       	std	Y+5, r24	; 0x05
    8714:	80 91 14 06 	lds	r24, 0x0614
    8718:	8e 83       	std	Y+6, r24	; 0x06
    871a:	9e 01       	movw	r18, r28
    871c:	29 5f       	subi	r18, 0xF9	; 249
    871e:	3f 4f       	sbci	r19, 0xFF	; 255
    8720:	39 8f       	std	Y+25, r19	; 0x19
    8722:	28 8f       	std	Y+24, r18	; 0x18
    8724:	ce 01       	movw	r24, r28
    8726:	01 96       	adiw	r24, 0x01	; 1
    8728:	9f 8b       	std	Y+23, r25	; 0x17
    872a:	8e 8b       	std	Y+22, r24	; 0x16
    872c:	fe 01       	movw	r30, r28
    872e:	34 96       	adiw	r30, 0x04	; 4
    8730:	fd 8b       	std	Y+21, r31	; 0x15
    8732:	ec 8b       	std	Y+20, r30	; 0x14
    8734:	0e ef       	ldi	r16, 0xFE	; 254
    8736:	17 e0       	ldi	r17, 0x07	; 7
    8738:	2b e3       	ldi	r18, 0x3B	; 59
    873a:	36 e0       	ldi	r19, 0x06	; 6
    873c:	3d 8f       	std	Y+29, r19	; 0x1d
    873e:	2c 8f       	std	Y+28, r18	; 0x1c
    8740:	56 e1       	ldi	r21, 0x16	; 22
    8742:	25 2e       	mov	r2, r21
    8744:	58 e0       	ldi	r21, 0x08	; 8
    8746:	35 2e       	mov	r3, r21
    8748:	83 e8       	ldi	r24, 0x83	; 131
    874a:	95 e0       	ldi	r25, 0x05	; 5
    874c:	9a 8b       	std	Y+18, r25	; 0x12
    874e:	89 8b       	std	Y+17, r24	; 0x11
    8750:	ef e2       	ldi	r30, 0x2F	; 47
    8752:	f6 e0       	ldi	r31, 0x06	; 6
    8754:	fb 8f       	std	Y+27, r31	; 0x1b
    8756:	ea 8f       	std	Y+26, r30	; 0x1a
	{
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	for (axis = 0; axis <= YAW; axis ++)
    8758:	1b 8a       	std	Y+19, r1	; 0x13
			gyroADC[axis] = 0;
		}*/ //Debug
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    875a:	e8 8d       	ldd	r30, Y+24	; 0x18
    875c:	f9 8d       	ldd	r31, Y+25	; 0x19
    875e:	81 91       	ld	r24, Z+
    8760:	91 91       	ld	r25, Z+
    8762:	f9 8f       	std	Y+25, r31	; 0x19
    8764:	e8 8f       	std	Y+24, r30	; 0x18
    8766:	ee 89       	ldd	r30, Y+22	; 0x16
    8768:	ff 89       	ldd	r31, Y+23	; 0x17
    876a:	21 91       	ld	r18, Z+
    876c:	ff 8b       	std	Y+23, r31	; 0x17
    876e:	ee 8b       	std	Y+22, r30	; 0x16
    8770:	36 e0       	ldi	r19, 0x06	; 6
    8772:	63 2e       	mov	r6, r19
    8774:	71 2c       	mov	r7, r1
    8776:	62 1a       	sub	r6, r18
    8778:	71 08       	sbc	r7, r1
    877a:	27 fd       	sbrc	r18, 7
    877c:	73 94       	inc	r7
    877e:	9c 01       	movw	r18, r24
    8780:	02 c0       	rjmp	.+4      	; 0x8786 <Sensor_PID+0xfe>
    8782:	35 95       	asr	r19
    8784:	27 95       	ror	r18
    8786:	6a 94       	dec	r6
    8788:	e2 f7       	brpl	.-8      	; 0x8782 <Sensor_PID+0xfa>
    878a:	39 01       	movw	r6, r18
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    878c:	ec 89       	ldd	r30, Y+20	; 0x14
    878e:	fd 89       	ldd	r31, Y+21	; 0x15
    8790:	21 91       	ld	r18, Z+
    8792:	fd 8b       	std	Y+21, r31	; 0x15
    8794:	ec 8b       	std	Y+20, r30	; 0x14
    8796:	46 e0       	ldi	r20, 0x06	; 6
    8798:	c4 2e       	mov	r12, r20
    879a:	d1 2c       	mov	r13, r1
    879c:	c2 1a       	sub	r12, r18
    879e:	d1 08       	sbc	r13, r1
    87a0:	27 fd       	sbrc	r18, 7
    87a2:	d3 94       	inc	r13
    87a4:	9c 01       	movw	r18, r24
    87a6:	02 c0       	rjmp	.+4      	; 0x87ac <Sensor_PID+0x124>
    87a8:	35 95       	asr	r19
    87aa:	27 95       	ror	r18
    87ac:	ca 94       	dec	r12
    87ae:	e2 f7       	brpl	.-8      	; 0x87a8 <Sensor_PID+0x120>
    87b0:	3f 8f       	std	Y+31, r19	; 0x1f
    87b2:	2e 8f       	std	Y+30, r18	; 0x1e
		// Gyro LPF
		//************************************************************	

		// Lookup LPF value
		// Note: Two sets of values for normal and high-speed mode
		if (Config.Servo_rate != FAST)
    87b4:	80 91 eb 05 	lds	r24, 0x05EB
    87b8:	60 91 50 06 	lds	r22, 0x0650
    87bc:	82 30       	cpi	r24, 0x02	; 2
    87be:	39 f0       	breq	.+14     	; 0x87ce <Sensor_PID+0x146>
		{
			memcpy_P(&tempf1, &LPF_lookup[Config.Gyro_LPF], sizeof(float));
    87c0:	34 e0       	ldi	r19, 0x04	; 4
    87c2:	63 02       	muls	r22, r19
    87c4:	b0 01       	movw	r22, r0
    87c6:	11 24       	eor	r1, r1
    87c8:	6b 56       	subi	r22, 0x6B	; 107
    87ca:	77 4e       	sbci	r23, 0xE7	; 231
    87cc:	06 c0       	rjmp	.+12     	; 0x87da <Sensor_PID+0x152>
		}
		else
		{
			memcpy_P(&tempf1, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float));
    87ce:	84 e0       	ldi	r24, 0x04	; 4
    87d0:	68 02       	muls	r22, r24
    87d2:	b0 01       	movw	r22, r0
    87d4:	11 24       	eor	r1, r1
    87d6:	6b 58       	subi	r22, 0x8B	; 139
    87d8:	77 4e       	sbci	r23, 0xE7	; 231
    87da:	44 e0       	ldi	r20, 0x04	; 4
    87dc:	50 e0       	ldi	r21, 0x00	; 0
    87de:	ce 01       	movw	r24, r28
    87e0:	0d 96       	adiw	r24, 0x0d	; 13
    87e2:	0e 94 7b 4d 	call	0x9af6	; 0x9af6 <memcpy_P>
		}		
			
		gyroADCf = gyroADC[axis]; // Promote gyro signal to suit
    87e6:	e9 89       	ldd	r30, Y+17	; 0x11
    87e8:	fa 89       	ldd	r31, Y+18	; 0x12
    87ea:	60 81       	ld	r22, Z
    87ec:	71 81       	ldd	r23, Z+1	; 0x01
    87ee:	88 27       	eor	r24, r24
    87f0:	77 fd       	sbrc	r23, 7
    87f2:	80 95       	com	r24
    87f4:	98 2f       	mov	r25, r24
    87f6:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    87fa:	6b 01       	movw	r12, r22
    87fc:	7c 01       	movw	r14, r24

		if (Config.Gyro_LPF != NOFILTER)
    87fe:	80 91 50 06 	lds	r24, 0x0650
    8802:	87 30       	cpi	r24, 0x07	; 7
    8804:	09 f1       	breq	.+66     	; 0x8848 <Sensor_PID+0x1c0>
		{
			// Gyro LPF
			gyroSmooth[axis] = ((gyroSmooth[axis] * (tempf1 - 1.0f)) + gyroADCf) / tempf1;
    8806:	8d 84       	ldd	r8, Y+13	; 0x0d
    8808:	9e 84       	ldd	r9, Y+14	; 0x0e
    880a:	af 84       	ldd	r10, Y+15	; 0x0f
    880c:	b8 88       	ldd	r11, Y+16	; 0x10
    880e:	20 e0       	ldi	r18, 0x00	; 0
    8810:	30 e0       	ldi	r19, 0x00	; 0
    8812:	40 e8       	ldi	r20, 0x80	; 128
    8814:	5f e3       	ldi	r21, 0x3F	; 63
    8816:	c5 01       	movw	r24, r10
    8818:	b4 01       	movw	r22, r8
    881a:	0e 94 c0 4a 	call	0x9580	; 0x9580 <__subsf3>
    881e:	f1 01       	movw	r30, r2
    8820:	20 81       	ld	r18, Z
    8822:	31 81       	ldd	r19, Z+1	; 0x01
    8824:	42 81       	ldd	r20, Z+2	; 0x02
    8826:	53 81       	ldd	r21, Z+3	; 0x03
    8828:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
    882c:	a7 01       	movw	r20, r14
    882e:	96 01       	movw	r18, r12
    8830:	0e 94 c1 4a 	call	0x9582	; 0x9582 <__addsf3>
    8834:	a5 01       	movw	r20, r10
    8836:	94 01       	movw	r18, r8
    8838:	0e 94 29 4b 	call	0x9652	; 0x9652 <__divsf3>
    883c:	f1 01       	movw	r30, r2
    883e:	60 83       	st	Z, r22
    8840:	71 83       	std	Z+1, r23	; 0x01
    8842:	82 83       	std	Z+2, r24	; 0x02
    8844:	93 83       	std	Z+3, r25	; 0x03
    8846:	05 c0       	rjmp	.+10     	; 0x8852 <Sensor_PID+0x1ca>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values when filter off
			gyroSmooth[axis] = gyroADCf;
    8848:	f1 01       	movw	r30, r2
    884a:	c0 82       	st	Z, r12
    884c:	d1 82       	std	Z+1, r13	; 0x01
    884e:	e2 82       	std	Z+2, r14	; 0x02
    8850:	f3 82       	std	Z+3, r15	; 0x03
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];	
    8852:	f1 01       	movw	r30, r2
    8854:	60 81       	ld	r22, Z
    8856:	71 81       	ldd	r23, Z+1	; 0x01
    8858:	82 81       	ldd	r24, Z+2	; 0x02
    885a:	93 81       	ldd	r25, Z+3	; 0x03
    885c:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
    8860:	6b 01       	movw	r12, r22
    8862:	7c 01       	movw	r14, r24
    8864:	e9 89       	ldd	r30, Y+17	; 0x11
    8866:	fa 89       	ldd	r31, Y+18	; 0x12
    8868:	71 83       	std	Z+1, r23	; 0x01
    886a:	60 83       	st	Z, r22
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;								// Promote int32_t to float
		factor = period/STANDARDLOOP;
    886c:	68 a1       	ldd	r22, Y+32	; 0x20
    886e:	79 a1       	ldd	r23, Y+33	; 0x21
    8870:	8a a1       	ldd	r24, Y+34	; 0x22
    8872:	9b a1       	ldd	r25, Y+35	; 0x23
    8874:	0e 94 c2 4b 	call	0x9784	; 0x9784 <__floatunsisf>
    8878:	20 e0       	ldi	r18, 0x00	; 0
    887a:	30 e3       	ldi	r19, 0x30	; 48
    887c:	4f e5       	ldi	r20, 0x5F	; 95
    887e:	55 e4       	ldi	r21, 0x45	; 69
    8880:	0e 94 29 4b 	call	0x9652	; 0x9652 <__divsf3>
    8884:	4b 01       	movw	r8, r22
    8886:	5c 01       	movw	r10, r24
		//************************************************************
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
    8888:	b3 01       	movw	r22, r6
    888a:	6c 0d       	add	r22, r12
    888c:	7d 1d       	adc	r23, r13
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;								// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    888e:	88 27       	eor	r24, r24
    8890:	77 fd       	sbrc	r23, 7
    8892:	80 95       	com	r24
    8894:	98 2f       	mov	r25, r24
    8896:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    889a:	2b 01       	movw	r4, r22
    889c:	3c 01       	movw	r6, r24
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
    889e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    88a0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    88a2:	c2 0e       	add	r12, r18
    88a4:	d3 1e       	adc	r13, r19
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
    88a6:	b6 01       	movw	r22, r12
    88a8:	88 27       	eor	r24, r24
    88aa:	77 fd       	sbrc	r23, 7
    88ac:	80 95       	com	r24
    88ae:	98 2f       	mov	r25, r24
    88b0:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__floatsisf>
    88b4:	6b 01       	movw	r12, r22
    88b6:	7c 01       	movw	r14, r24
		tempf2 = period;								// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
    88b8:	a5 01       	movw	r20, r10
    88ba:	94 01       	movw	r18, r8
    88bc:	c3 01       	movw	r24, r6
    88be:	b2 01       	movw	r22, r4
    88c0:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    88c4:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
		tempf2 = tempf2 * factor;
		P2_temp = (int32_t)tempf2;
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
    88c8:	f8 01       	movw	r30, r16
    88ca:	40 80       	ld	r4, Z
    88cc:	51 80       	ldd	r5, Z+1	; 0x01
    88ce:	62 80       	ldd	r6, Z+2	; 0x02
    88d0:	73 80       	ldd	r7, Z+3	; 0x03
    88d2:	46 0e       	add	r4, r22
    88d4:	57 1e       	adc	r5, r23
    88d6:	68 1e       	adc	r6, r24
    88d8:	79 1e       	adc	r7, r25
    88da:	40 82       	st	Z, r4
    88dc:	51 82       	std	Z+1, r5	; 0x01
    88de:	62 82       	std	Z+2, r6	; 0x02
    88e0:	73 82       	std	Z+3, r7	; 0x03
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
		tempf2 = tempf2 * factor;
    88e2:	a5 01       	movw	r20, r10
    88e4:	94 01       	movw	r18, r8
    88e6:	c7 01       	movw	r24, r14
    88e8:	b6 01       	movw	r22, r12
    88ea:	0e 94 78 4c 	call	0x98f0	; 0x98f0 <__mulsf3>
		P2_temp = (int32_t)tempf2;
    88ee:	0e 94 91 4b 	call	0x9722	; 0x9722 <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
		IntegralGyro[P2][axis] += P2_temp;
    88f2:	f8 01       	movw	r30, r16
    88f4:	c4 84       	ldd	r12, Z+12	; 0x0c
    88f6:	d5 84       	ldd	r13, Z+13	; 0x0d
    88f8:	e6 84       	ldd	r14, Z+14	; 0x0e
    88fa:	f7 84       	ldd	r15, Z+15	; 0x0f
    88fc:	c6 0e       	add	r12, r22
    88fe:	d7 1e       	adc	r13, r23
    8900:	e8 1e       	adc	r14, r24
    8902:	f9 1e       	adc	r15, r25
    8904:	c4 86       	std	Z+12, r12	; 0x0c
    8906:	d5 86       	std	Z+13, r13	; 0x0d
    8908:	e6 86       	std	Z+14, r14	; 0x0e
    890a:	f7 86       	std	Z+15, r15	; 0x0f
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    890c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    890e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    8910:	81 91       	ld	r24, Z+
    8912:	91 91       	ld	r25, Z+
    8914:	a1 91       	ld	r26, Z+
    8916:	b1 91       	ld	r27, Z+
    8918:	fb 8f       	std	Y+27, r31	; 0x1b
    891a:	ea 8f       	std	Y+26, r30	; 0x1a
    891c:	84 15       	cp	r24, r4
    891e:	95 05       	cpc	r25, r5
    8920:	a6 05       	cpc	r26, r6
    8922:	b7 05       	cpc	r27, r7
    8924:	2c f4       	brge	.+10     	; 0x8930 <Sensor_PID+0x2a8>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    8926:	f8 01       	movw	r30, r16
    8928:	80 83       	st	Z, r24
    892a:	91 83       	std	Z+1, r25	; 0x01
    892c:	a2 83       	std	Z+2, r26	; 0x02
    892e:	b3 83       	std	Z+3, r27	; 0x03
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    8930:	b0 95       	com	r27
    8932:	a0 95       	com	r26
    8934:	90 95       	com	r25
    8936:	81 95       	neg	r24
    8938:	9f 4f       	sbci	r25, 0xFF	; 255
    893a:	af 4f       	sbci	r26, 0xFF	; 255
    893c:	bf 4f       	sbci	r27, 0xFF	; 255
    893e:	f8 01       	movw	r30, r16
    8940:	40 81       	ld	r20, Z
    8942:	51 81       	ldd	r21, Z+1	; 0x01
    8944:	62 81       	ldd	r22, Z+2	; 0x02
    8946:	73 81       	ldd	r23, Z+3	; 0x03
    8948:	48 17       	cp	r20, r24
    894a:	59 07       	cpc	r21, r25
    894c:	6a 07       	cpc	r22, r26
    894e:	7b 07       	cpc	r23, r27
    8950:	24 f4       	brge	.+8      	; 0x895a <Sensor_PID+0x2d2>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    8952:	80 83       	st	Z, r24
    8954:	91 83       	std	Z+1, r25	; 0x01
    8956:	a2 83       	std	Z+2, r26	; 0x02
    8958:	b3 83       	std	Z+3, r27	; 0x03
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    895a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    895c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    895e:	81 91       	ld	r24, Z+
    8960:	91 91       	ld	r25, Z+
    8962:	a1 91       	ld	r26, Z+
    8964:	b1 91       	ld	r27, Z+
    8966:	fd 8f       	std	Y+29, r31	; 0x1d
    8968:	ec 8f       	std	Y+28, r30	; 0x1c
    896a:	f8 01       	movw	r30, r16
    896c:	44 85       	ldd	r20, Z+12	; 0x0c
    896e:	55 85       	ldd	r21, Z+13	; 0x0d
    8970:	66 85       	ldd	r22, Z+14	; 0x0e
    8972:	77 85       	ldd	r23, Z+15	; 0x0f
    8974:	84 17       	cp	r24, r20
    8976:	95 07       	cpc	r25, r21
    8978:	a6 07       	cpc	r26, r22
    897a:	b7 07       	cpc	r27, r23
    897c:	24 f4       	brge	.+8      	; 0x8986 <Sensor_PID+0x2fe>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    897e:	84 87       	std	Z+12, r24	; 0x0c
    8980:	95 87       	std	Z+13, r25	; 0x0d
    8982:	a6 87       	std	Z+14, r26	; 0x0e
    8984:	b7 87       	std	Z+15, r27	; 0x0f
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    8986:	b0 95       	com	r27
    8988:	a0 95       	com	r26
    898a:	90 95       	com	r25
    898c:	81 95       	neg	r24
    898e:	9f 4f       	sbci	r25, 0xFF	; 255
    8990:	af 4f       	sbci	r26, 0xFF	; 255
    8992:	bf 4f       	sbci	r27, 0xFF	; 255
    8994:	f8 01       	movw	r30, r16
    8996:	44 85       	ldd	r20, Z+12	; 0x0c
    8998:	55 85       	ldd	r21, Z+13	; 0x0d
    899a:	66 85       	ldd	r22, Z+14	; 0x0e
    899c:	77 85       	ldd	r23, Z+15	; 0x0f
    899e:	48 17       	cp	r20, r24
    89a0:	59 07       	cpc	r21, r25
    89a2:	6a 07       	cpc	r22, r26
    89a4:	7b 07       	cpc	r23, r27
    89a6:	24 f4       	brge	.+8      	; 0x89b0 <Sensor_PID+0x328>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    89a8:	84 87       	std	Z+12, r24	; 0x0c
    89aa:	95 87       	std	Z+13, r25	; 0x0d
    89ac:	a6 87       	std	Z+14, r26	; 0x0e
    89ae:	b7 87       	std	Z+15, r27	; 0x0f
    89b0:	fb 89       	ldd	r31, Y+19	; 0x13
    89b2:	ff 5f       	subi	r31, 0xFF	; 255
    89b4:	fb 8b       	std	Y+19, r31	; 0x13
    89b6:	0c 5f       	subi	r16, 0xFC	; 252
    89b8:	1f 4f       	sbci	r17, 0xFF	; 255
    89ba:	24 e0       	ldi	r18, 0x04	; 4
    89bc:	22 0e       	add	r2, r18
    89be:	31 1c       	adc	r3, r1
    89c0:	89 89       	ldd	r24, Y+17	; 0x11
    89c2:	9a 89       	ldd	r25, Y+18	; 0x12
    89c4:	02 96       	adiw	r24, 0x02	; 2
    89c6:	9a 8b       	std	Y+18, r25	; 0x12
    89c8:	89 8b       	std	Y+17, r24	; 0x11
	{
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	for (axis = 0; axis <= YAW; axis ++)
    89ca:	f3 30       	cpi	r31, 0x03	; 3
    89cc:	09 f0       	breq	.+2      	; 0x89d0 <Sensor_PID+0x348>
    89ce:	c5 ce       	rjmp	.-630    	; 0x875a <Sensor_PID+0xd2>
			}
		}
	}
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    89d0:	40 91 16 05 	lds	r20, 0x0516
    89d4:	50 91 17 05 	lds	r21, 0x0517
    89d8:	66 27       	eor	r22, r22
    89da:	57 fd       	sbrc	r21, 7
    89dc:	60 95       	com	r22
    89de:	76 2f       	mov	r23, r22
    89e0:	80 91 38 05 	lds	r24, 0x0538
    89e4:	90 91 39 05 	lds	r25, 0x0539
    89e8:	a0 91 3a 05 	lds	r26, 0x053A
    89ec:	b0 91 3b 05 	lds	r27, 0x053B
    89f0:	84 0f       	add	r24, r20
    89f2:	95 1f       	adc	r25, r21
    89f4:	a6 1f       	adc	r26, r22
    89f6:	b7 1f       	adc	r27, r23
    89f8:	80 93 38 05 	sts	0x0538, r24
    89fc:	90 93 39 05 	sts	0x0539, r25
    8a00:	a0 93 3a 05 	sts	0x053A, r26
    8a04:	b0 93 3b 05 	sts	0x053B, r27
}
    8a08:	a3 96       	adiw	r28, 0x23	; 35
    8a0a:	0f b6       	in	r0, 0x3f	; 63
    8a0c:	f8 94       	cli
    8a0e:	de bf       	out	0x3e, r29	; 62
    8a10:	0f be       	out	0x3f, r0	; 63
    8a12:	cd bf       	out	0x3d, r28	; 61
    8a14:	df 91       	pop	r29
    8a16:	cf 91       	pop	r28
    8a18:	1f 91       	pop	r17
    8a1a:	0f 91       	pop	r16
    8a1c:	ff 90       	pop	r15
    8a1e:	ef 90       	pop	r14
    8a20:	df 90       	pop	r13
    8a22:	cf 90       	pop	r12
    8a24:	bf 90       	pop	r11
    8a26:	af 90       	pop	r10
    8a28:	9f 90       	pop	r9
    8a2a:	8f 90       	pop	r8
    8a2c:	7f 90       	pop	r7
    8a2e:	6f 90       	pop	r6
    8a30:	5f 90       	pop	r5
    8a32:	4f 90       	pop	r4
    8a34:	3f 90       	pop	r3
    8a36:	2f 90       	pop	r2
    8a38:	08 95       	ret

00008a3a <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    8a3a:	2f 92       	push	r2
    8a3c:	3f 92       	push	r3
    8a3e:	4f 92       	push	r4
    8a40:	5f 92       	push	r5
    8a42:	6f 92       	push	r6
    8a44:	7f 92       	push	r7
    8a46:	8f 92       	push	r8
    8a48:	9f 92       	push	r9
    8a4a:	af 92       	push	r10
    8a4c:	bf 92       	push	r11
    8a4e:	cf 92       	push	r12
    8a50:	df 92       	push	r13
    8a52:	ef 92       	push	r14
    8a54:	ff 92       	push	r15
    8a56:	0f 93       	push	r16
    8a58:	1f 93       	push	r17
    8a5a:	cf 93       	push	r28
    8a5c:	df 93       	push	r29
    8a5e:	cd b7       	in	r28, 0x3d	; 61
    8a60:	de b7       	in	r29, 0x3e	; 62
    8a62:	ca 54       	subi	r28, 0x4A	; 74
    8a64:	d1 09       	sbc	r29, r1
    8a66:	0f b6       	in	r0, 0x3f	; 63
    8a68:	f8 94       	cli
    8a6a:	de bf       	out	0x3e, r29	; 62
    8a6c:	0f be       	out	0x3f, r0	; 63
    8a6e:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8a70:	80 91 f3 05 	lds	r24, 0x05F3
    8a74:	8d 8b       	std	Y+21, r24	; 0x15
    8a76:	80 91 f9 05 	lds	r24, 0x05F9
    8a7a:	8e 8b       	std	Y+22, r24	; 0x16
    8a7c:	80 91 ff 05 	lds	r24, 0x05FF
    8a80:	8f 8b       	std	Y+23, r24	; 0x17
    8a82:	80 91 05 06 	lds	r24, 0x0605
    8a86:	88 8f       	std	Y+24, r24	; 0x18
    8a88:	80 91 0b 06 	lds	r24, 0x060B
    8a8c:	89 8f       	std	Y+25, r24	; 0x19
    8a8e:	80 91 11 06 	lds	r24, 0x0611
    8a92:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8a94:	80 91 f4 05 	lds	r24, 0x05F4
    8a98:	8f 87       	std	Y+15, r24	; 0x0f
    8a9a:	80 91 fa 05 	lds	r24, 0x05FA
    8a9e:	88 8b       	std	Y+16, r24	; 0x10
    8aa0:	80 91 00 06 	lds	r24, 0x0600
    8aa4:	89 8b       	std	Y+17, r24	; 0x11
    8aa6:	80 91 06 06 	lds	r24, 0x0606
    8aaa:	8a 8b       	std	Y+18, r24	; 0x12
    8aac:	80 91 0c 06 	lds	r24, 0x060C
    8ab0:	8b 8b       	std	Y+19, r24	; 0x13
    8ab2:	80 91 12 06 	lds	r24, 0x0612
    8ab6:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8ab8:	80 91 f7 05 	lds	r24, 0x05F7
    8abc:	89 87       	std	Y+9, r24	; 0x09
    8abe:	80 91 fd 05 	lds	r24, 0x05FD
    8ac2:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    8ac4:	20 91 04 06 	lds	r18, 0x0604
    8ac8:	29 a7       	std	Y+41, r18	; 0x29
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8aca:	2b 87       	std	Y+11, r18	; 0x0b
    8acc:	80 91 09 06 	lds	r24, 0x0609
    8ad0:	8c 87       	std	Y+12, r24	; 0x0c
    8ad2:	80 91 0f 06 	lds	r24, 0x060F
    8ad6:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    8ad8:	30 91 16 06 	lds	r19, 0x0616
    8adc:	3a a7       	std	Y+42, r19	; 0x2a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8ade:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    8ae0:	80 91 c0 07 	lds	r24, 0x07C0
    8ae4:	90 91 c1 07 	lds	r25, 0x07C1
    8ae8:	9a 83       	std	Y+2, r25	; 0x02
    8aea:	89 83       	std	Y+1, r24	; 0x01
    8aec:	80 91 c4 07 	lds	r24, 0x07C4
    8af0:	90 91 c5 07 	lds	r25, 0x07C5
    8af4:	9c 83       	std	Y+4, r25	; 0x04
    8af6:	8b 83       	std	Y+3, r24	; 0x03
    8af8:	80 91 c2 07 	lds	r24, 0x07C2
    8afc:	90 91 c3 07 	lds	r25, 0x07C3
    8b00:	9e 83       	std	Y+6, r25	; 0x06
    8b02:	8d 83       	std	Y+5, r24	; 0x05
    8b04:	80 91 c6 07 	lds	r24, 0x07C6
    8b08:	90 91 c7 07 	lds	r25, 0x07C7
    8b0c:	98 87       	std	Y+8, r25	; 0x08
    8b0e:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    8b10:	20 91 18 05 	lds	r18, 0x0518
    8b14:	30 e0       	ldi	r19, 0x00	; 0
    8b16:	40 e0       	ldi	r20, 0x00	; 0
    8b18:	50 e0       	ldi	r21, 0x00	; 0
    8b1a:	60 91 38 05 	lds	r22, 0x0538
    8b1e:	70 91 39 05 	lds	r23, 0x0539
    8b22:	80 91 3a 05 	lds	r24, 0x053A
    8b26:	90 91 3b 05 	lds	r25, 0x053B
    8b2a:	0e 94 25 4d 	call	0x9a4a	; 0x9a4a <__divmodsi4>
    8b2e:	29 96       	adiw	r28, 0x09	; 9
    8b30:	2c af       	std	Y+60, r18	; 0x3c
    8b32:	3d af       	std	Y+61, r19	; 0x3d
    8b34:	4e af       	std	Y+62, r20	; 0x3e
    8b36:	5f af       	std	Y+63, r21	; 0x3f
    8b38:	29 97       	sbiw	r28, 0x09	; 9
	PID_AvgAccVert = 0;							// Reset average
    8b3a:	10 92 38 05 	sts	0x0538, r1
    8b3e:	10 92 39 05 	sts	0x0539, r1
    8b42:	10 92 3a 05 	sts	0x053A, r1
    8b46:	10 92 3b 05 	sts	0x053B, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    8b4a:	80 91 03 06 	lds	r24, 0x0603
    8b4e:	40 e4       	ldi	r20, 0x40	; 64
    8b50:	84 02       	muls	r24, r20
    8b52:	c0 01       	movw	r24, r0
    8b54:	11 24       	eor	r1, r1
    8b56:	9c 01       	movw	r18, r24
    8b58:	44 27       	eor	r20, r20
    8b5a:	37 fd       	sbrc	r19, 7
    8b5c:	40 95       	com	r20
    8b5e:	54 2f       	mov	r21, r20
    8b60:	29 af       	std	Y+57, r18	; 0x39
    8b62:	3a af       	std	Y+58, r19	; 0x3a
    8b64:	4b af       	std	Y+59, r20	; 0x3b
    8b66:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8b68:	80 91 15 06 	lds	r24, 0x0615
    8b6c:	30 e4       	ldi	r19, 0x40	; 64
    8b6e:	83 02       	muls	r24, r19
    8b70:	c0 01       	movw	r24, r0
    8b72:	11 24       	eor	r1, r1
    8b74:	9c 01       	movw	r18, r24
    8b76:	44 27       	eor	r20, r20
    8b78:	37 fd       	sbrc	r19, 7
    8b7a:	40 95       	com	r20
    8b7c:	54 2f       	mov	r21, r20
    8b7e:	21 96       	adiw	r28, 0x01	; 1
    8b80:	2c af       	std	Y+60, r18	; 0x3c
    8b82:	3d af       	std	Y+61, r19	; 0x3d
    8b84:	4e af       	std	Y+62, r20	; 0x3e
    8b86:	5f af       	std	Y+63, r21	; 0x3f
    8b88:	21 97       	sbiw	r28, 0x01	; 1
    8b8a:	e3 e8       	ldi	r30, 0x83	; 131
    8b8c:	f5 e0       	ldi	r31, 0x05	; 5
    8b8e:	f8 af       	std	Y+56, r31	; 0x38
    8b90:	ef ab       	std	Y+55, r30	; 0x37
    8b92:	fe 01       	movw	r30, r28
    8b94:	75 96       	adiw	r30, 0x15	; 21
    8b96:	fe ab       	std	Y+54, r31	; 0x36
    8b98:	ed ab       	std	Y+53, r30	; 0x35
    8b9a:	ee ef       	ldi	r30, 0xFE	; 254
    8b9c:	f7 e0       	ldi	r31, 0x07	; 7
    8b9e:	fe a3       	std	Y+38, r31	; 0x26
    8ba0:	ed a3       	std	Y+37, r30	; 0x25
    8ba2:	fe 01       	movw	r30, r28
    8ba4:	3f 96       	adiw	r30, 0x0f	; 15
    8ba6:	fc ab       	std	Y+52, r31	; 0x34
    8ba8:	eb ab       	std	Y+51, r30	; 0x33
    8baa:	39 96       	adiw	r30, 0x09	; 9
    8bac:	fa ab       	std	Y+50, r31	; 0x32
    8bae:	e9 ab       	std	Y+49, r30	; 0x31
    8bb0:	36 97       	sbiw	r30, 0x06	; 6
    8bb2:	f8 ab       	std	Y+48, r31	; 0x30
    8bb4:	ef a7       	std	Y+47, r30	; 0x2f
    8bb6:	e7 e1       	ldi	r30, 0x17	; 23
    8bb8:	f6 e0       	ldi	r31, 0x06	; 6
    8bba:	fe a7       	std	Y+46, r31	; 0x2e
    8bbc:	ed a7       	std	Y+45, r30	; 0x2d
    8bbe:	e2 e2       	ldi	r30, 0x22	; 34
    8bc0:	f8 e0       	ldi	r31, 0x08	; 8
    8bc2:	fc a3       	std	Y+36, r31	; 0x24
    8bc4:	eb a3       	std	Y+35, r30	; 0x23
    8bc6:	e1 ea       	ldi	r30, 0xA1	; 161
    8bc8:	f5 e0       	ldi	r31, 0x05	; 5
    8bca:	f8 a7       	std	Y+40, r31	; 0x28
    8bcc:	ef a3       	std	Y+39, r30	; 0x27
    8bce:	fe 01       	movw	r30, r28
    8bd0:	31 96       	adiw	r30, 0x01	; 1
    8bd2:	fa a3       	std	Y+34, r31	; 0x22
    8bd4:	e9 a3       	std	Y+33, r30	; 0x21
    8bd6:	ee e2       	ldi	r30, 0x2E	; 46
    8bd8:	f8 e0       	ldi	r31, 0x08	; 8
    8bda:	f8 a3       	std	Y+32, r31	; 0x20
    8bdc:	ef 8f       	std	Y+31, r30	; 0x1f
    8bde:	1e 01       	movw	r2, r28
    8be0:	fc e0       	ldi	r31, 0x0C	; 12
    8be2:	2f 0e       	add	r2, r31
    8be4:	31 1c       	adc	r3, r1
    8be6:	e3 e2       	ldi	r30, 0x23	; 35
    8be8:	f6 e0       	ldi	r31, 0x06	; 6
    8bea:	fc a7       	std	Y+44, r31	; 0x2c
    8bec:	eb a7       	std	Y+43, r30	; 0x2b
    8bee:	2b 96       	adiw	r28, 0x0b	; 11
    8bf0:	1f ae       	std	Y+63, r1	; 0x3f
    8bf2:	1e ae       	std	Y+62, r1	; 0x3e
    8bf4:	2b 97       	sbiw	r28, 0x0b	; 11
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    8bf6:	81 2c       	mov	r8, r1
    8bf8:	91 2c       	mov	r9, r1
    8bfa:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    8bfc:	80 e0       	ldi	r24, 0x00	; 0
    8bfe:	90 e0       	ldi	r25, 0x00	; 0
    8c00:	dc 01       	movw	r26, r24
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    8c02:	ef a9       	ldd	r30, Y+55	; 0x37
    8c04:	f8 ad       	ldd	r31, Y+56	; 0x38
    8c06:	01 91       	ld	r16, Z+
    8c08:	11 91       	ld	r17, Z+
    8c0a:	f8 af       	std	Y+56, r31	; 0x38
    8c0c:	ef ab       	std	Y+55, r30	; 0x37
    8c0e:	ed a9       	ldd	r30, Y+53	; 0x35
    8c10:	fe a9       	ldd	r31, Y+54	; 0x36
    8c12:	41 91       	ld	r20, Z+
    8c14:	fe ab       	std	Y+54, r31	; 0x36
    8c16:	ed ab       	std	Y+53, r30	; 0x35
    8c18:	40 03       	mulsu	r20, r16
    8c1a:	90 01       	movw	r18, r0
    8c1c:	41 9f       	mul	r20, r17
    8c1e:	30 0d       	add	r19, r0
    8c20:	11 24       	eor	r1, r1
    8c22:	44 27       	eor	r20, r20
    8c24:	37 fd       	sbrc	r19, 7
    8c26:	40 95       	com	r20
    8c28:	54 2f       	mov	r21, r20
    8c2a:	28 0f       	add	r18, r24
    8c2c:	39 1f       	adc	r19, r25
    8c2e:	4a 1f       	adc	r20, r26
    8c30:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    8c32:	a3 e0       	ldi	r26, 0x03	; 3
    8c34:	b0 e0       	ldi	r27, 0x00	; 0
    8c36:	0e 94 68 4d 	call	0x9ad0	; 0x9ad0 <__muluhisi3>
    8c3a:	25 96       	adiw	r28, 0x05	; 5
    8c3c:	6c af       	std	Y+60, r22	; 0x3c
    8c3e:	7d af       	std	Y+61, r23	; 0x3d
    8c40:	8e af       	std	Y+62, r24	; 0x3e
    8c42:	9f af       	std	Y+63, r25	; 0x3f
    8c44:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    8c46:	eb a9       	ldd	r30, Y+51	; 0x33
    8c48:	fc a9       	ldd	r31, Y+52	; 0x34
    8c4a:	a1 91       	ld	r26, Z+
    8c4c:	fc ab       	std	Y+52, r31	; 0x34
    8c4e:	eb ab       	std	Y+51, r30	; 0x33
    8c50:	ed a1       	ldd	r30, Y+37	; 0x25
    8c52:	fe a1       	ldd	r31, Y+38	; 0x26
    8c54:	20 81       	ld	r18, Z
    8c56:	31 81       	ldd	r19, Z+1	; 0x01
    8c58:	42 81       	ldd	r20, Z+2	; 0x02
    8c5a:	53 81       	ldd	r21, Z+3	; 0x03
    8c5c:	bb 27       	eor	r27, r27
    8c5e:	a7 fd       	sbrc	r26, 7
    8c60:	b0 95       	com	r27
    8c62:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <__mulshisi3>
    8c66:	2b 01       	movw	r4, r22
    8c68:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    8c6a:	85 e0       	ldi	r24, 0x05	; 5
    8c6c:	75 94       	asr	r7
    8c6e:	67 94       	ror	r6
    8c70:	57 94       	ror	r5
    8c72:	47 94       	ror	r4
    8c74:	8a 95       	dec	r24
    8c76:	d1 f7       	brne	.-12     	; 0x8c6c <Calculate_PID+0x232>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    8c78:	e9 a9       	ldd	r30, Y+49	; 0x31
    8c7a:	fa a9       	ldd	r31, Y+50	; 0x32
    8c7c:	41 91       	ld	r20, Z+
    8c7e:	fa ab       	std	Y+50, r31	; 0x32
    8c80:	e9 ab       	std	Y+49, r30	; 0x31
    8c82:	40 03       	mulsu	r20, r16
    8c84:	90 01       	movw	r18, r0
    8c86:	41 9f       	mul	r20, r17
    8c88:	30 0d       	add	r19, r0
    8c8a:	11 24       	eor	r1, r1
    8c8c:	44 27       	eor	r20, r20
    8c8e:	37 fd       	sbrc	r19, 7
    8c90:	40 95       	com	r20
    8c92:	54 2f       	mov	r21, r20
    8c94:	28 0d       	add	r18, r8
    8c96:	39 1d       	adc	r19, r9
    8c98:	4a 1d       	adc	r20, r10
    8c9a:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    8c9c:	a3 e0       	ldi	r26, 0x03	; 3
    8c9e:	b0 e0       	ldi	r27, 0x00	; 0
    8ca0:	0e 94 68 4d 	call	0x9ad0	; 0x9ad0 <__muluhisi3>
    8ca4:	4b 01       	movw	r8, r22
    8ca6:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    8ca8:	ef a5       	ldd	r30, Y+47	; 0x2f
    8caa:	f8 a9       	ldd	r31, Y+48	; 0x30
    8cac:	a1 91       	ld	r26, Z+
    8cae:	f8 ab       	std	Y+48, r31	; 0x30
    8cb0:	ef a7       	std	Y+47, r30	; 0x2f
    8cb2:	ed a1       	ldd	r30, Y+37	; 0x25
    8cb4:	fe a1       	ldd	r31, Y+38	; 0x26
    8cb6:	24 85       	ldd	r18, Z+12	; 0x0c
    8cb8:	35 85       	ldd	r19, Z+13	; 0x0d
    8cba:	46 85       	ldd	r20, Z+14	; 0x0e
    8cbc:	57 85       	ldd	r21, Z+15	; 0x0f
    8cbe:	bb 27       	eor	r27, r27
    8cc0:	a7 fd       	sbrc	r26, 7
    8cc2:	b0 95       	com	r27
    8cc4:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    8cc8:	25 e0       	ldi	r18, 0x05	; 5
    8cca:	95 95       	asr	r25
    8ccc:	87 95       	ror	r24
    8cce:	77 95       	ror	r23
    8cd0:	67 95       	ror	r22
    8cd2:	2a 95       	dec	r18
    8cd4:	d1 f7       	brne	.-12     	; 0x8cca <Calculate_PID+0x290>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    8cd6:	ed a5       	ldd	r30, Y+45	; 0x2d
    8cd8:	fe a5       	ldd	r31, Y+46	; 0x2e
    8cda:	c1 90       	ld	r12, Z+
    8cdc:	d1 90       	ld	r13, Z+
    8cde:	e1 90       	ld	r14, Z+
    8ce0:	f1 90       	ld	r15, Z+
    8ce2:	fe a7       	std	Y+46, r31	; 0x2e
    8ce4:	ed a7       	std	Y+45, r30	; 0x2d
    8ce6:	c4 14       	cp	r12, r4
    8ce8:	d5 04       	cpc	r13, r5
    8cea:	e6 04       	cpc	r14, r6
    8cec:	f7 04       	cpc	r15, r7
    8cee:	84 f0       	brlt	.+32     	; 0x8d10 <Calculate_PID+0x2d6>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    8cf0:	00 27       	eor	r16, r16
    8cf2:	11 27       	eor	r17, r17
    8cf4:	98 01       	movw	r18, r16
    8cf6:	0c 19       	sub	r16, r12
    8cf8:	1d 09       	sbc	r17, r13
    8cfa:	2e 09       	sbc	r18, r14
    8cfc:	3f 09       	sbc	r19, r15
    8cfe:	73 01       	movw	r14, r6
    8d00:	62 01       	movw	r12, r4
    8d02:	40 16       	cp	r4, r16
    8d04:	51 06       	cpc	r5, r17
    8d06:	62 06       	cpc	r6, r18
    8d08:	73 06       	cpc	r7, r19
    8d0a:	14 f4       	brge	.+4      	; 0x8d10 <Calculate_PID+0x2d6>
    8d0c:	68 01       	movw	r12, r16
    8d0e:	79 01       	movw	r14, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    8d10:	eb a5       	ldd	r30, Y+43	; 0x2b
    8d12:	fc a5       	ldd	r31, Y+44	; 0x2c
    8d14:	21 91       	ld	r18, Z+
    8d16:	31 91       	ld	r19, Z+
    8d18:	41 91       	ld	r20, Z+
    8d1a:	51 91       	ld	r21, Z+
    8d1c:	fc a7       	std	Y+44, r31	; 0x2c
    8d1e:	eb a7       	std	Y+43, r30	; 0x2b
    8d20:	2b 8f       	std	Y+27, r18	; 0x1b
    8d22:	3c 8f       	std	Y+28, r19	; 0x1c
    8d24:	4d 8f       	std	Y+29, r20	; 0x1d
    8d26:	5e 8f       	std	Y+30, r21	; 0x1e
    8d28:	26 17       	cp	r18, r22
    8d2a:	37 07       	cpc	r19, r23
    8d2c:	48 07       	cpc	r20, r24
    8d2e:	59 07       	cpc	r21, r25
    8d30:	b4 f0       	brlt	.+44     	; 0x8d5e <Calculate_PID+0x324>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    8d32:	89 01       	movw	r16, r18
    8d34:	9a 01       	movw	r18, r20
    8d36:	30 95       	com	r19
    8d38:	20 95       	com	r18
    8d3a:	10 95       	com	r17
    8d3c:	01 95       	neg	r16
    8d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    8d40:	2f 4f       	sbci	r18, 0xFF	; 255
    8d42:	3f 4f       	sbci	r19, 0xFF	; 255
    8d44:	6b 8f       	std	Y+27, r22	; 0x1b
    8d46:	7c 8f       	std	Y+28, r23	; 0x1c
    8d48:	8d 8f       	std	Y+29, r24	; 0x1d
    8d4a:	9e 8f       	std	Y+30, r25	; 0x1e
    8d4c:	60 17       	cp	r22, r16
    8d4e:	71 07       	cpc	r23, r17
    8d50:	82 07       	cpc	r24, r18
    8d52:	93 07       	cpc	r25, r19
    8d54:	24 f4       	brge	.+8      	; 0x8d5e <Calculate_PID+0x324>
    8d56:	0b 8f       	std	Y+27, r16	; 0x1b
    8d58:	1c 8f       	std	Y+28, r17	; 0x1c
    8d5a:	2d 8f       	std	Y+29, r18	; 0x1d
    8d5c:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE);
    8d5e:	25 96       	adiw	r28, 0x05	; 5
    8d60:	4c ac       	ldd	r4, Y+60	; 0x3c
    8d62:	5d ac       	ldd	r5, Y+61	; 0x3d
    8d64:	6e ac       	ldd	r6, Y+62	; 0x3e
    8d66:	7f ac       	ldd	r7, Y+63	; 0x3f
    8d68:	25 97       	sbiw	r28, 0x05	; 5
    8d6a:	4c 0c       	add	r4, r12
    8d6c:	5d 1c       	adc	r5, r13
    8d6e:	6e 1c       	adc	r6, r14
    8d70:	7f 1c       	adc	r7, r15
    8d72:	16 e0       	ldi	r17, 0x06	; 6
    8d74:	75 94       	asr	r7
    8d76:	67 94       	ror	r6
    8d78:	57 94       	ror	r5
    8d7a:	47 94       	ror	r4
    8d7c:	1a 95       	dec	r17
    8d7e:	d1 f7       	brne	.-12     	; 0x8d74 <Calculate_PID+0x33a>
    8d80:	eb a1       	ldd	r30, Y+35	; 0x23
    8d82:	fc a1       	ldd	r31, Y+36	; 0x24
    8d84:	51 82       	std	Z+1, r5	; 0x01
    8d86:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    8d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8d8c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8d8e:	be 8d       	ldd	r27, Y+30	; 0x1e
    8d90:	88 0d       	add	r24, r8
    8d92:	99 1d       	adc	r25, r9
    8d94:	aa 1d       	adc	r26, r10
    8d96:	bb 1d       	adc	r27, r11
    8d98:	06 e0       	ldi	r16, 0x06	; 6
    8d9a:	b5 95       	asr	r27
    8d9c:	a7 95       	ror	r26
    8d9e:	97 95       	ror	r25
    8da0:	87 95       	ror	r24
    8da2:	0a 95       	dec	r16
    8da4:	d1 f7       	brne	.-12     	; 0x8d9a <Calculate_PID+0x360>
    8da6:	97 83       	std	Z+7, r25	; 0x07
    8da8:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    8daa:	2a 96       	adiw	r28, 0x0a	; 10
    8dac:	ff ad       	ldd	r31, Y+63	; 0x3f
    8dae:	2a 97       	sbiw	r28, 0x0a	; 10
    8db0:	f2 30       	cpi	r31, 0x02	; 2
    8db2:	e9 f1       	breq	.+122    	; 0x8e2e <Calculate_PID+0x3f4>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    8db4:	ef a1       	ldd	r30, Y+39	; 0x27
    8db6:	f8 a5       	ldd	r31, Y+40	; 0x28
    8db8:	40 81       	ld	r20, Z
    8dba:	51 81       	ldd	r21, Z+1	; 0x01
    8dbc:	e9 a1       	ldd	r30, Y+33	; 0x21
    8dbe:	fa a1       	ldd	r31, Y+34	; 0x22
    8dc0:	80 81       	ld	r24, Z
    8dc2:	91 81       	ldd	r25, Z+1	; 0x01
    8dc4:	9a 01       	movw	r18, r20
    8dc6:	28 1b       	sub	r18, r24
    8dc8:	39 0b       	sbc	r19, r25
    8dca:	a9 e0       	ldi	r26, 0x09	; 9
    8dcc:	b0 e0       	ldi	r27, 0x00	; 0
    8dce:	ac 0f       	add	r26, r28
    8dd0:	bd 1f       	adc	r27, r29
    8dd2:	2b 96       	adiw	r28, 0x0b	; 11
    8dd4:	ee ad       	ldd	r30, Y+62	; 0x3e
    8dd6:	ff ad       	ldd	r31, Y+63	; 0x3f
    8dd8:	2b 97       	sbiw	r28, 0x0b	; 11
    8dda:	ae 0f       	add	r26, r30
    8ddc:	bf 1f       	adc	r27, r31
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    8dde:	ac 91       	ld	r26, X
    8de0:	bb 27       	eor	r27, r27
    8de2:	a7 fd       	sbrc	r26, 7
    8de4:	b0 95       	com	r27
    8de6:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    8dea:	bb 27       	eor	r27, r27
    8dec:	97 fd       	sbrc	r25, 7
    8dee:	ba 95       	dec	r27
    8df0:	a9 2f       	mov	r26, r25
    8df2:	98 2f       	mov	r25, r24
    8df4:	87 2f       	mov	r24, r23
    8df6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8df8:	f8 a1       	ldd	r31, Y+32	; 0x20
    8dfa:	91 83       	std	Z+1, r25	; 0x01
    8dfc:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    8dfe:	e9 a1       	ldd	r30, Y+33	; 0x21
    8e00:	fa a1       	ldd	r31, Y+34	; 0x22
    8e02:	84 81       	ldd	r24, Z+4	; 0x04
    8e04:	95 81       	ldd	r25, Z+5	; 0x05
    8e06:	9a 01       	movw	r18, r20
    8e08:	28 1b       	sub	r18, r24
    8e0a:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    8e0c:	f1 01       	movw	r30, r2
    8e0e:	a0 81       	ld	r26, Z
    8e10:	bb 27       	eor	r27, r27
    8e12:	a7 fd       	sbrc	r26, 7
    8e14:	b0 95       	com	r27
    8e16:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    8e1a:	bb 27       	eor	r27, r27
    8e1c:	97 fd       	sbrc	r25, 7
    8e1e:	ba 95       	dec	r27
    8e20:	a9 2f       	mov	r26, r25
    8e22:	98 2f       	mov	r25, r24
    8e24:	87 2f       	mov	r24, r23
    8e26:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8e28:	f8 a1       	ldd	r31, Y+32	; 0x20
    8e2a:	97 83       	std	Z+7, r25	; 0x07
    8e2c:	86 83       	std	Z+6, r24	; 0x06
	PID_AvgAccVert = 0;							// Reset average

	//************************************************************
	// PID loop
	//************************************************************
	for (axis = 0; axis <= YAW; axis ++)
    8e2e:	2b 96       	adiw	r28, 0x0b	; 11
    8e30:	ee ad       	ldd	r30, Y+62	; 0x3e
    8e32:	ff ad       	ldd	r31, Y+63	; 0x3f
    8e34:	2b 97       	sbiw	r28, 0x0b	; 11
    8e36:	32 97       	sbiw	r30, 0x02	; 2
    8e38:	e1 f1       	breq	.+120    	; 0x8eb2 <Calculate_PID+0x478>
	{
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    8e3a:	2a 96       	adiw	r28, 0x0a	; 10
    8e3c:	ff ad       	ldd	r31, Y+63	; 0x3f
    8e3e:	2a 97       	sbiw	r28, 0x0a	; 10
    8e40:	f1 30       	cpi	r31, 0x01	; 1
    8e42:	39 f0       	breq	.+14     	; 0x8e52 <Calculate_PID+0x418>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    8e44:	81 2c       	mov	r8, r1
    8e46:	91 2c       	mov	r9, r1
    8e48:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    8e4a:	80 e0       	ldi	r24, 0x00	; 0
    8e4c:	90 e0       	ldi	r25, 0x00	; 0
    8e4e:	dc 01       	movw	r26, r24
    8e50:	0a c0       	rjmp	.+20     	; 0x8e66 <Calculate_PID+0x42c>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8e52:	21 96       	adiw	r28, 0x01	; 1
    8e54:	8c ac       	ldd	r8, Y+60	; 0x3c
    8e56:	9d ac       	ldd	r9, Y+61	; 0x3d
    8e58:	ae ac       	ldd	r10, Y+62	; 0x3e
    8e5a:	bf ac       	ldd	r11, Y+63	; 0x3f
    8e5c:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    8e5e:	89 ad       	ldd	r24, Y+57	; 0x39
    8e60:	9a ad       	ldd	r25, Y+58	; 0x3a
    8e62:	ab ad       	ldd	r26, Y+59	; 0x3b
    8e64:	bc ad       	ldd	r27, Y+60	; 0x3c
    8e66:	2b 96       	adiw	r28, 0x0b	; 11
    8e68:	ee ad       	ldd	r30, Y+62	; 0x3e
    8e6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    8e6c:	2b 97       	sbiw	r28, 0x0b	; 11
    8e6e:	31 96       	adiw	r30, 0x01	; 1
    8e70:	2b 96       	adiw	r28, 0x0b	; 11
    8e72:	ff af       	std	Y+63, r31	; 0x3f
    8e74:	ee af       	std	Y+62, r30	; 0x3e
    8e76:	2b 97       	sbiw	r28, 0x0b	; 11
    8e78:	ed a1       	ldd	r30, Y+37	; 0x25
    8e7a:	fe a1       	ldd	r31, Y+38	; 0x26
    8e7c:	34 96       	adiw	r30, 0x04	; 4
    8e7e:	fe a3       	std	Y+38, r31	; 0x26
    8e80:	ed a3       	std	Y+37, r30	; 0x25
    8e82:	eb a1       	ldd	r30, Y+35	; 0x23
    8e84:	fc a1       	ldd	r31, Y+36	; 0x24
    8e86:	32 96       	adiw	r30, 0x02	; 2
    8e88:	fc a3       	std	Y+36, r31	; 0x24
    8e8a:	eb a3       	std	Y+35, r30	; 0x23
    8e8c:	ef a1       	ldd	r30, Y+39	; 0x27
    8e8e:	f8 a5       	ldd	r31, Y+40	; 0x28
    8e90:	32 96       	adiw	r30, 0x02	; 2
    8e92:	f8 a7       	std	Y+40, r31	; 0x28
    8e94:	ef a3       	std	Y+39, r30	; 0x27
    8e96:	e9 a1       	ldd	r30, Y+33	; 0x21
    8e98:	fa a1       	ldd	r31, Y+34	; 0x22
    8e9a:	32 96       	adiw	r30, 0x02	; 2
    8e9c:	fa a3       	std	Y+34, r31	; 0x22
    8e9e:	e9 a3       	std	Y+33, r30	; 0x21
    8ea0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8ea2:	f8 a1       	ldd	r31, Y+32	; 0x20
    8ea4:	32 96       	adiw	r30, 0x02	; 2
    8ea6:	f8 a3       	std	Y+32, r31	; 0x20
    8ea8:	ef 8f       	std	Y+31, r30	; 0x1f
    8eaa:	ff ef       	ldi	r31, 0xFF	; 255
    8eac:	2f 1a       	sub	r2, r31
    8eae:	3f 0a       	sbc	r3, r31
    8eb0:	a8 ce       	rjmp	.-688    	; 0x8c02 <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    8eb2:	27 96       	adiw	r28, 0x07	; 7
    8eb4:	ce ac       	ldd	r12, Y+62	; 0x3e
    8eb6:	df ac       	ldd	r13, Y+63	; 0x3f
    8eb8:	27 97       	sbiw	r28, 0x07	; 7
    8eba:	d1 94       	neg	r13
    8ebc:	c1 94       	neg	r12
    8ebe:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    8ec0:	96 01       	movw	r18, r12
    8ec2:	f9 a5       	ldd	r31, Y+41	; 0x29
    8ec4:	af 2f       	mov	r26, r31
    8ec6:	bb 27       	eor	r27, r27
    8ec8:	a7 fd       	sbrc	r26, 7
    8eca:	b0 95       	com	r27
    8ecc:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    8ed0:	f4 e0       	ldi	r31, 0x04	; 4
    8ed2:	95 95       	asr	r25
    8ed4:	87 95       	ror	r24
    8ed6:	77 95       	ror	r23
    8ed8:	67 95       	ror	r22
    8eda:	fa 95       	dec	r31
    8edc:	d1 f7       	brne	.-12     	; 0x8ed2 <Calculate_PID+0x498>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    8ede:	65 3f       	cpi	r22, 0xF5	; 245
    8ee0:	21 e0       	ldi	r18, 0x01	; 1
    8ee2:	72 07       	cpc	r23, r18
    8ee4:	81 05       	cpc	r24, r1
    8ee6:	91 05       	cpc	r25, r1
    8ee8:	64 f4       	brge	.+24     	; 0x8f02 <Calculate_PID+0x4c8>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    8eea:	6c 30       	cpi	r22, 0x0C	; 12
    8eec:	3e ef       	ldi	r19, 0xFE	; 254
    8eee:	73 07       	cpc	r23, r19
    8ef0:	3f ef       	ldi	r19, 0xFF	; 255
    8ef2:	83 07       	cpc	r24, r19
    8ef4:	93 07       	cpc	r25, r19
    8ef6:	4c f4       	brge	.+18     	; 0x8f0a <Calculate_PID+0x4d0>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    8ef8:	6c e0       	ldi	r22, 0x0C	; 12
    8efa:	7e ef       	ldi	r23, 0xFE	; 254
    8efc:	8f ef       	ldi	r24, 0xFF	; 255
    8efe:	9f ef       	ldi	r25, 0xFF	; 255
    8f00:	04 c0       	rjmp	.+8      	; 0x8f0a <Calculate_PID+0x4d0>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    8f02:	64 ef       	ldi	r22, 0xF4	; 244
    8f04:	71 e0       	ldi	r23, 0x01	; 1
    8f06:	80 e0       	ldi	r24, 0x00	; 0
    8f08:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    8f0a:	70 93 33 08 	sts	0x0833, r23
    8f0e:	60 93 32 08 	sts	0x0832, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    8f12:	96 01       	movw	r18, r12
    8f14:	4a a5       	ldd	r20, Y+42	; 0x2a
    8f16:	a4 2f       	mov	r26, r20
    8f18:	bb 27       	eor	r27, r27
    8f1a:	a7 fd       	sbrc	r26, 7
    8f1c:	b0 95       	com	r27
    8f1e:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    8f22:	e4 e0       	ldi	r30, 0x04	; 4
    8f24:	95 95       	asr	r25
    8f26:	87 95       	ror	r24
    8f28:	77 95       	ror	r23
    8f2a:	67 95       	ror	r22
    8f2c:	ea 95       	dec	r30
    8f2e:	d1 f7       	brne	.-12     	; 0x8f24 <Calculate_PID+0x4ea>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    8f30:	65 3f       	cpi	r22, 0xF5	; 245
    8f32:	51 e0       	ldi	r21, 0x01	; 1
    8f34:	75 07       	cpc	r23, r21
    8f36:	81 05       	cpc	r24, r1
    8f38:	91 05       	cpc	r25, r1
    8f3a:	64 f4       	brge	.+24     	; 0x8f54 <Calculate_PID+0x51a>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    8f3c:	6c 30       	cpi	r22, 0x0C	; 12
    8f3e:	ae ef       	ldi	r26, 0xFE	; 254
    8f40:	7a 07       	cpc	r23, r26
    8f42:	af ef       	ldi	r26, 0xFF	; 255
    8f44:	8a 07       	cpc	r24, r26
    8f46:	9a 07       	cpc	r25, r26
    8f48:	4c f4       	brge	.+18     	; 0x8f5c <Calculate_PID+0x522>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    8f4a:	6c e0       	ldi	r22, 0x0C	; 12
    8f4c:	7e ef       	ldi	r23, 0xFE	; 254
    8f4e:	8f ef       	ldi	r24, 0xFF	; 255
    8f50:	9f ef       	ldi	r25, 0xFF	; 255
    8f52:	04 c0       	rjmp	.+8      	; 0x8f5c <Calculate_PID+0x522>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    8f54:	64 ef       	ldi	r22, 0xF4	; 244
    8f56:	71 e0       	ldi	r23, 0x01	; 1
    8f58:	80 e0       	ldi	r24, 0x00	; 0
    8f5a:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    8f5c:	70 93 39 08 	sts	0x0839, r23
    8f60:	60 93 38 08 	sts	0x0838, r22
	}
}
    8f64:	c6 5b       	subi	r28, 0xB6	; 182
    8f66:	df 4f       	sbci	r29, 0xFF	; 255
    8f68:	0f b6       	in	r0, 0x3f	; 63
    8f6a:	f8 94       	cli
    8f6c:	de bf       	out	0x3e, r29	; 62
    8f6e:	0f be       	out	0x3f, r0	; 63
    8f70:	cd bf       	out	0x3d, r28	; 61
    8f72:	df 91       	pop	r29
    8f74:	cf 91       	pop	r28
    8f76:	1f 91       	pop	r17
    8f78:	0f 91       	pop	r16
    8f7a:	ff 90       	pop	r15
    8f7c:	ef 90       	pop	r14
    8f7e:	df 90       	pop	r13
    8f80:	cf 90       	pop	r12
    8f82:	bf 90       	pop	r11
    8f84:	af 90       	pop	r10
    8f86:	9f 90       	pop	r9
    8f88:	8f 90       	pop	r8
    8f8a:	7f 90       	pop	r7
    8f8c:	6f 90       	pop	r6
    8f8e:	5f 90       	pop	r5
    8f90:	4f 90       	pop	r4
    8f92:	3f 90       	pop	r3
    8f94:	2f 90       	pop	r2
    8f96:	08 95       	ret

00008f98 <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    8f98:	eb e9       	ldi	r30, 0x9B	; 155
    8f9a:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    8f9c:	80 e0       	ldi	r24, 0x00	; 0
    8f9e:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    8fa0:	ac 01       	movw	r20, r24
    8fa2:	44 0f       	add	r20, r20
    8fa4:	55 1f       	adc	r21, r21
    8fa6:	da 01       	movw	r26, r20
    8fa8:	a5 53       	subi	r26, 0x35	; 53
    8faa:	b8 4f       	sbci	r27, 0xF8	; 248
    8fac:	2d 91       	ld	r18, X+
    8fae:	3c 91       	ld	r19, X
    8fb0:	61 91       	ld	r22, Z+
    8fb2:	71 91       	ld	r23, Z+
    8fb4:	26 1b       	sub	r18, r22
    8fb6:	37 0b       	sbc	r19, r23
    8fb8:	da 01       	movw	r26, r20
    8fba:	a4 5c       	subi	r26, 0xC4	; 196
    8fbc:	b7 4f       	sbci	r27, 0xF7	; 247
    8fbe:	11 96       	adiw	r26, 0x01	; 1
    8fc0:	3c 93       	st	X, r19
    8fc2:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    8fc4:	01 96       	adiw	r24, 0x01	; 1
    8fc6:	88 30       	cpi	r24, 0x08	; 8
    8fc8:	91 05       	cpc	r25, r1
    8fca:	51 f7       	brne	.-44     	; 0x8fa0 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    8fcc:	80 91 cb 07 	lds	r24, 0x07CB
    8fd0:	90 91 cc 07 	lds	r25, 0x07CC
    8fd4:	20 91 9b 07 	lds	r18, 0x079B
    8fd8:	30 91 9c 07 	lds	r19, 0x079C
    8fdc:	82 1b       	sub	r24, r18
    8fde:	93 0b       	sbc	r25, r19
    8fe0:	90 93 3b 08 	sts	0x083B, r25
    8fe4:	80 93 3a 08 	sts	0x083A, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    8fe8:	80 91 cb 07 	lds	r24, 0x07CB
    8fec:	90 91 cc 07 	lds	r25, 0x07CC
    8ff0:	86 5a       	subi	r24, 0xA6	; 166
    8ff2:	9e 40       	sbci	r25, 0x0E	; 14
    8ff4:	90 93 3d 08 	sts	0x083D, r25
    8ff8:	80 93 3c 08 	sts	0x083C, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    8ffc:	80 91 f1 05 	lds	r24, 0x05F1
    9000:	81 30       	cpi	r24, 0x01	; 1
    9002:	59 f4       	brne	.+22     	; 0x901a <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    9004:	80 91 3e 08 	lds	r24, 0x083E
    9008:	90 91 3f 08 	lds	r25, 0x083F
    900c:	91 95       	neg	r25
    900e:	81 95       	neg	r24
    9010:	91 09       	sbc	r25, r1
    9012:	90 93 3f 08 	sts	0x083F, r25
    9016:	80 93 3e 08 	sts	0x083E, r24
	}

	if (Config.ElevatorPol == REVERSED)
    901a:	80 91 f2 05 	lds	r24, 0x05F2
    901e:	81 30       	cpi	r24, 0x01	; 1
    9020:	59 f4       	brne	.+22     	; 0x9038 <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    9022:	80 91 40 08 	lds	r24, 0x0840
    9026:	90 91 41 08 	lds	r25, 0x0841
    902a:	91 95       	neg	r25
    902c:	81 95       	neg	r24
    902e:	91 09       	sbc	r25, r1
    9030:	90 93 41 08 	sts	0x0841, r25
    9034:	80 93 40 08 	sts	0x0840, r24
	}

	if (Config.RudderPol == REVERSED)
    9038:	80 91 c9 07 	lds	r24, 0x07C9
    903c:	81 30       	cpi	r24, 0x01	; 1
    903e:	59 f4       	brne	.+22     	; 0x9056 <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    9040:	80 91 42 08 	lds	r24, 0x0842
    9044:	90 91 43 08 	lds	r25, 0x0843
    9048:	91 95       	neg	r25
    904a:	81 95       	neg	r24
    904c:	91 09       	sbc	r25, r1
    904e:	90 93 43 08 	sts	0x0843, r25
    9052:	80 93 42 08 	sts	0x0842, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    9056:	80 91 3e 08 	lds	r24, 0x083E
    905a:	90 91 3f 08 	lds	r25, 0x083F
    905e:	40 91 40 08 	lds	r20, 0x0840
    9062:	50 91 41 08 	lds	r21, 0x0841
    9066:	20 91 42 08 	lds	r18, 0x0842
    906a:	30 91 43 08 	lds	r19, 0x0843
    906e:	84 0f       	add	r24, r20
    9070:	95 1f       	adc	r25, r21
    9072:	82 0f       	add	r24, r18
    9074:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    9076:	20 91 3c 05 	lds	r18, 0x053C
    907a:	30 91 3d 05 	lds	r19, 0x053D
    907e:	ac 01       	movw	r20, r24
    9080:	42 1b       	sub	r20, r18
    9082:	53 0b       	sbc	r21, r19
    9084:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    9086:	2b 5f       	subi	r18, 0xFB	; 251
    9088:	3f 4f       	sbci	r19, 0xFF	; 255
    908a:	2b 30       	cpi	r18, 0x0B	; 11
    908c:	31 05       	cpc	r19, r1
    908e:	38 f4       	brcc	.+14     	; 0x909e <RxGetChannels+0x106>
    9090:	20 91 3a 08 	lds	r18, 0x083A
    9094:	30 91 3b 08 	lds	r19, 0x083B
    9098:	23 33       	cpi	r18, 0x33	; 51
    909a:	31 05       	cpc	r19, r1
    909c:	24 f0       	brlt	.+8      	; 0x90a6 <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    909e:	20 91 1f 05 	lds	r18, 0x051F
    90a2:	21 60       	ori	r18, 0x01	; 1
    90a4:	03 c0       	rjmp	.+6      	; 0x90ac <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    90a6:	20 91 1f 05 	lds	r18, 0x051F
    90aa:	2e 7f       	andi	r18, 0xFE	; 254
    90ac:	20 93 1f 05 	sts	0x051F, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    90b0:	10 92 4d 08 	sts	0x084D, r1
    90b4:	10 92 4c 08 	sts	0x084C, r1

	OldRxSum = RxSum;
    90b8:	90 93 3d 05 	sts	0x053D, r25
    90bc:	80 93 3c 05 	sts	0x053C, r24
    90c0:	08 95       	ret

000090c2 <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    90c2:	0f 93       	push	r16
    90c4:	1f 93       	push	r17
    90c6:	cf 93       	push	r28
    90c8:	df 93       	push	r29
    90ca:	cd b7       	in	r28, 0x3d	; 61
    90cc:	de b7       	in	r29, 0x3e	; 62
    90ce:	60 97       	sbiw	r28, 0x10	; 16
    90d0:	0f b6       	in	r0, 0x3f	; 63
    90d2:	f8 94       	cli
    90d4:	de bf       	out	0x3e, r29	; 62
    90d6:	0f be       	out	0x3f, r0	; 63
    90d8:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    90da:	8e 01       	movw	r16, r28
    90dc:	0f 5f       	subi	r16, 0xFF	; 255
    90de:	1f 4f       	sbci	r17, 0xFF	; 255
    90e0:	80 e1       	ldi	r24, 0x10	; 16
    90e2:	d8 01       	movw	r26, r16
    90e4:	1d 92       	st	X+, r1
    90e6:	8a 95       	dec	r24
    90e8:	e9 f7       	brne	.-6      	; 0x90e4 <CenterSticks+0x22>
    90ea:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    90ec:	d8 01       	movw	r26, r16
    90ee:	80 e0       	ldi	r24, 0x00	; 0
    90f0:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    90f2:	9c 01       	movw	r18, r24
    90f4:	22 0f       	add	r18, r18
    90f6:	33 1f       	adc	r19, r19
    90f8:	25 53       	subi	r18, 0x35	; 53
    90fa:	38 4f       	sbci	r19, 0xF8	; 248
    90fc:	f9 01       	movw	r30, r18
    90fe:	40 81       	ld	r20, Z
    9100:	51 81       	ldd	r21, Z+1	; 0x01
    9102:	2d 91       	ld	r18, X+
    9104:	3c 91       	ld	r19, X
    9106:	11 97       	sbiw	r26, 0x01	; 1
    9108:	24 0f       	add	r18, r20
    910a:	35 1f       	adc	r19, r21
    910c:	2d 93       	st	X+, r18
    910e:	3d 93       	st	X+, r19
    9110:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    9112:	88 30       	cpi	r24, 0x08	; 8
    9114:	91 05       	cpc	r25, r1
    9116:	69 f7       	brne	.-38     	; 0x90f2 <CenterSticks+0x30>
    9118:	ff e7       	ldi	r31, 0x7F	; 127
    911a:	2a e1       	ldi	r18, 0x1A	; 26
    911c:	86 e0       	ldi	r24, 0x06	; 6
    911e:	f1 50       	subi	r31, 0x01	; 1
    9120:	20 40       	sbci	r18, 0x00	; 0
    9122:	80 40       	sbci	r24, 0x00	; 0
    9124:	e1 f7       	brne	.-8      	; 0x911e <CenterSticks+0x5c>
    9126:	00 c0       	rjmp	.+0      	; 0x9128 <CenterSticks+0x66>
    9128:	00 00       	nop
    912a:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    912c:	f9 f6       	brne	.-66     	; 0x90ec <CenterSticks+0x2a>
    912e:	ab e9       	ldi	r26, 0x9B	; 155
    9130:	b7 e0       	ldi	r27, 0x07	; 7
    9132:	9e 01       	movw	r18, r28
    9134:	2f 5e       	subi	r18, 0xEF	; 239
    9136:	3f 4f       	sbci	r19, 0xFF	; 255
    9138:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    913a:	81 91       	ld	r24, Z+
    913c:	91 91       	ld	r25, Z+
    913e:	04 96       	adiw	r24, 0x04	; 4
    9140:	43 e0       	ldi	r20, 0x03	; 3
    9142:	96 95       	lsr	r25
    9144:	87 95       	ror	r24
    9146:	4a 95       	dec	r20
    9148:	e1 f7       	brne	.-8      	; 0x9142 <CenterSticks+0x80>
    914a:	8d 93       	st	X+, r24
    914c:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    914e:	e2 17       	cp	r30, r18
    9150:	f3 07       	cpc	r31, r19
    9152:	99 f7       	brne	.-26     	; 0x913a <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    9154:	60 96       	adiw	r28, 0x10	; 16
    9156:	0f b6       	in	r0, 0x3f	; 63
    9158:	f8 94       	cli
    915a:	de bf       	out	0x3e, r29	; 62
    915c:	0f be       	out	0x3f, r0	; 63
    915e:	cd bf       	out	0x3d, r28	; 61
    9160:	df 91       	pop	r29
    9162:	cf 91       	pop	r28
    9164:	1f 91       	pop	r17
    9166:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    9168:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <Save_Config_to_EEPROM>

0000916c <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    916c:	8f 92       	push	r8
    916e:	9f 92       	push	r9
    9170:	af 92       	push	r10
    9172:	bf 92       	push	r11
    9174:	df 92       	push	r13
    9176:	ef 92       	push	r14
    9178:	ff 92       	push	r15
    917a:	0f 93       	push	r16
    917c:	1f 93       	push	r17
    917e:	cf 93       	push	r28
    9180:	df 93       	push	r29
    9182:	d8 2e       	mov	r13, r24
    9184:	07 e5       	ldi	r16, 0x57	; 87
    9186:	16 e0       	ldi	r17, 0x06	; 6
    9188:	c0 e0       	ldi	r28, 0x00	; 0
    918a:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    918c:	ea e0       	ldi	r30, 0x0A	; 10
    918e:	8e 2e       	mov	r8, r30
    9190:	91 2c       	mov	r9, r1
    9192:	a1 2c       	mov	r10, r1
    9194:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    9196:	7e 01       	movw	r14, r28
    9198:	ee 0c       	add	r14, r14
    919a:	ff 1c       	adc	r15, r15
    919c:	f7 01       	movw	r30, r14
    919e:	e2 5b       	subi	r30, 0xB2	; 178
    91a0:	f7 4f       	sbci	r31, 0xF7	; 247
    91a2:	20 81       	ld	r18, Z
    91a4:	31 81       	ldd	r19, Z+1	; 0x01
    91a6:	a9 01       	movw	r20, r18
    91a8:	60 e0       	ldi	r22, 0x00	; 0
    91aa:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    91ac:	f8 01       	movw	r30, r16
    91ae:	80 81       	ld	r24, Z
    91b0:	82 30       	cpi	r24, 0x02	; 2
    91b2:	79 f0       	breq	.+30     	; 0x91d2 <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    91b4:	9a 01       	movw	r18, r20
    91b6:	ab 01       	movw	r20, r22
    91b8:	26 5a       	subi	r18, 0xA6	; 166
    91ba:	3e 40       	sbci	r19, 0x0E	; 14
    91bc:	41 09       	sbc	r20, r1
    91be:	51 09       	sbc	r21, r1
    91c0:	56 95       	lsr	r21
    91c2:	47 95       	ror	r20
    91c4:	37 95       	ror	r19
    91c6:	27 95       	ror	r18
    91c8:	24 52       	subi	r18, 0x24	; 36
    91ca:	3a 4f       	sbci	r19, 0xFA	; 250
    91cc:	4f 4f       	sbci	r20, 0xFF	; 255
    91ce:	5f 4f       	sbci	r21, 0xFF	; 255
    91d0:	11 c0       	rjmp	.+34     	; 0x91f4 <output_servo_ppm+0x88>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    91d2:	cb 01       	movw	r24, r22
    91d4:	ba 01       	movw	r22, r20
    91d6:	52 e0       	ldi	r21, 0x02	; 2
    91d8:	66 0f       	add	r22, r22
    91da:	77 1f       	adc	r23, r23
    91dc:	88 1f       	adc	r24, r24
    91de:	99 1f       	adc	r25, r25
    91e0:	5a 95       	dec	r21
    91e2:	d1 f7       	brne	.-12     	; 0x91d8 <output_servo_ppm+0x6c>
    91e4:	6b 5f       	subi	r22, 0xFB	; 251
    91e6:	7f 4f       	sbci	r23, 0xFF	; 255
    91e8:	8f 4f       	sbci	r24, 0xFF	; 255
    91ea:	9f 4f       	sbci	r25, 0xFF	; 255
    91ec:	a5 01       	movw	r20, r10
    91ee:	94 01       	movw	r18, r8
    91f0:	0e 94 03 4d 	call	0x9a06	; 0x9a06 <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    91f4:	f7 01       	movw	r30, r14
    91f6:	e2 5b       	subi	r30, 0xB2	; 178
    91f8:	f7 4f       	sbci	r31, 0xF7	; 247
    91fa:	31 83       	std	Z+1, r19	; 0x01
    91fc:	20 83       	st	Z, r18
    91fe:	21 96       	adiw	r28, 0x01	; 1
    9200:	0a 5d       	subi	r16, 0xDA	; 218
    9202:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    9204:	c8 30       	cpi	r28, 0x08	; 8
    9206:	d1 05       	cpc	r29, r1
    9208:	31 f6       	brne	.-116    	; 0x9196 <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    920a:	80 91 cb 07 	lds	r24, 0x07CB
    920e:	90 91 cc 07 	lds	r25, 0x07CC
    9212:	20 91 9b 07 	lds	r18, 0x079B
    9216:	30 91 9c 07 	lds	r19, 0x079C
    921a:	82 1b       	sub	r24, r18
    921c:	93 0b       	sbc	r25, r19
    921e:	90 93 3b 08 	sts	0x083B, r25
    9222:	80 93 3a 08 	sts	0x083A, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    9226:	80 91 3a 08 	lds	r24, 0x083A
    922a:	90 91 3b 08 	lds	r25, 0x083B
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    922e:	c2 97       	sbiw	r24, 0x32	; 50
    9230:	ac f0       	brlt	.+42     	; 0x925c <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    9232:	80 91 20 05 	lds	r24, 0x0520
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    9236:	82 fd       	sbrc	r24, 2
    9238:	11 c0       	rjmp	.+34     	; 0x925c <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    923a:	80 91 20 05 	lds	r24, 0x0520
    923e:	80 fd       	sbrc	r24, 0
    9240:	24 c0       	rjmp	.+72     	; 0x928a <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    9242:	10 92 f6 07 	sts	0x07F6, r1
	
		// We now care about interrupts
		JitterGate = true;
    9246:	81 e0       	ldi	r24, 0x01	; 1
    9248:	80 93 f5 07 	sts	0x07F5, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    924c:	6d 2d       	mov	r22, r13
    924e:	8e e4       	ldi	r24, 0x4E	; 78
    9250:	98 e0       	ldi	r25, 0x08	; 8
    9252:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    9256:	10 92 f5 07 	sts	0x07F5, r1
    925a:	17 c0       	rjmp	.+46     	; 0x928a <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    925c:	e7 e5       	ldi	r30, 0x57	; 87
    925e:	f6 e0       	ldi	r31, 0x06	; 6
    9260:	80 e0       	ldi	r24, 0x00	; 0
    9262:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    9264:	28 ee       	ldi	r18, 0xE8	; 232
    9266:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    9268:	40 81       	ld	r20, Z
    926a:	42 30       	cpi	r20, 0x02	; 2
    926c:	41 f4       	brne	.+16     	; 0x927e <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    926e:	dc 01       	movw	r26, r24
    9270:	aa 0f       	add	r26, r26
    9272:	bb 1f       	adc	r27, r27
    9274:	a2 5b       	subi	r26, 0xB2	; 178
    9276:	b7 4f       	sbci	r27, 0xF7	; 247
    9278:	11 96       	adiw	r26, 0x01	; 1
    927a:	3c 93       	st	X, r19
    927c:	2e 93       	st	-X, r18
    927e:	01 96       	adiw	r24, 0x01	; 1
    9280:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    9282:	88 30       	cpi	r24, 0x08	; 8
    9284:	91 05       	cpc	r25, r1
    9286:	81 f7       	brne	.-32     	; 0x9268 <output_servo_ppm+0xfc>
    9288:	d8 cf       	rjmp	.-80     	; 0x923a <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    928a:	df 91       	pop	r29
    928c:	cf 91       	pop	r28
    928e:	1f 91       	pop	r17
    9290:	0f 91       	pop	r16
    9292:	ff 90       	pop	r15
    9294:	ef 90       	pop	r14
    9296:	df 90       	pop	r13
    9298:	bf 90       	pop	r11
    929a:	af 90       	pop	r10
    929c:	9f 90       	pop	r9
    929e:	8f 90       	pop	r8
    92a0:	08 95       	ret

000092a2 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    92a2:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    92a6:	81 e1       	ldi	r24, 0x11	; 17
    92a8:	80 93 b8 00 	sts	0x00B8, r24
    92ac:	08 95       	ret

000092ae <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    92ae:	94 ea       	ldi	r25, 0xA4	; 164
    92b0:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    92b4:	4f ef       	ldi	r20, 0xFF	; 255
    92b6:	50 e0       	ldi	r21, 0x00	; 0
    92b8:	60 e0       	ldi	r22, 0x00	; 0
    92ba:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    92bc:	90 91 bc 00 	lds	r25, 0x00BC
    92c0:	97 fd       	sbrc	r25, 7
    92c2:	06 c0       	rjmp	.+12     	; 0x92d0 <i2c_start+0x22>
    92c4:	41 50       	subi	r20, 0x01	; 1
    92c6:	51 09       	sbc	r21, r1
    92c8:	61 09       	sbc	r22, r1
    92ca:	71 09       	sbc	r23, r1
    92cc:	b8 f7       	brcc	.-18     	; 0x92bc <i2c_start+0xe>
    92ce:	06 c0       	rjmp	.+12     	; 0x92dc <i2c_start+0x2e>
	if(i2c_timer == 0)
    92d0:	45 2b       	or	r20, r21
    92d2:	46 2b       	or	r20, r22
    92d4:	47 2b       	or	r20, r23
    92d6:	11 f4       	brne	.+4      	; 0x92dc <i2c_start+0x2e>
		return 1;
    92d8:	81 e0       	ldi	r24, 0x01	; 1
    92da:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    92dc:	90 91 b9 00 	lds	r25, 0x00B9
    92e0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    92e2:	98 30       	cpi	r25, 0x08	; 8
    92e4:	11 f0       	breq	.+4      	; 0x92ea <i2c_start+0x3c>
    92e6:	90 31       	cpi	r25, 0x10	; 16
    92e8:	b9 f7       	brne	.-18     	; 0x92d8 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    92ea:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    92ee:	84 e8       	ldi	r24, 0x84	; 132
    92f0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    92f4:	8f ef       	ldi	r24, 0xFF	; 255
    92f6:	90 e0       	ldi	r25, 0x00	; 0
    92f8:	a0 e0       	ldi	r26, 0x00	; 0
    92fa:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    92fc:	20 91 bc 00 	lds	r18, 0x00BC
    9300:	27 fd       	sbrc	r18, 7
    9302:	05 c0       	rjmp	.+10     	; 0x930e <i2c_start+0x60>
    9304:	01 97       	sbiw	r24, 0x01	; 1
    9306:	a1 09       	sbc	r26, r1
    9308:	b1 09       	sbc	r27, r1
    930a:	c0 f7       	brcc	.-16     	; 0x92fc <i2c_start+0x4e>
    930c:	04 c0       	rjmp	.+8      	; 0x9316 <i2c_start+0x68>
	if(i2c_timer == 0)
    930e:	89 2b       	or	r24, r25
    9310:	8a 2b       	or	r24, r26
    9312:	8b 2b       	or	r24, r27
    9314:	09 f3       	breq	.-62     	; 0x92d8 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    9316:	80 91 b9 00 	lds	r24, 0x00B9
    931a:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    931c:	88 31       	cpi	r24, 0x18	; 24
    931e:	11 f0       	breq	.+4      	; 0x9324 <i2c_start+0x76>
    9320:	80 34       	cpi	r24, 0x40	; 64
    9322:	d1 f6       	brne	.-76     	; 0x92d8 <i2c_start+0x2a>

	return 0;
    9324:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    9326:	08 95       	ret

00009328 <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9328:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    932a:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    932c:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    932e:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9332:	20 e0       	ldi	r18, 0x00	; 0
    9334:	30 e0       	ldi	r19, 0x00	; 0
    9336:	90 91 bc 00 	lds	r25, 0x00BC
    933a:	97 fd       	sbrc	r25, 7
    933c:	06 c0       	rjmp	.+12     	; 0x934a <i2c_start_wait+0x22>
    933e:	2f 5f       	subi	r18, 0xFF	; 255
    9340:	3f 4f       	sbci	r19, 0xFF	; 255
    9342:	21 15       	cp	r18, r1
    9344:	91 e0       	ldi	r25, 0x01	; 1
    9346:	39 07       	cpc	r19, r25
    9348:	b1 f7       	brne	.-20     	; 0x9336 <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    934a:	90 91 b9 00 	lds	r25, 0x00B9
    934e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    9350:	98 30       	cpi	r25, 0x08	; 8
    9352:	11 f0       	breq	.+4      	; 0x9358 <i2c_start_wait+0x30>
    9354:	90 31       	cpi	r25, 0x10	; 16
    9356:	59 f7       	brne	.-42     	; 0x932e <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    9358:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    935c:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9360:	20 e0       	ldi	r18, 0x00	; 0
    9362:	30 e0       	ldi	r19, 0x00	; 0
    9364:	90 91 bc 00 	lds	r25, 0x00BC
    9368:	97 fd       	sbrc	r25, 7
    936a:	06 c0       	rjmp	.+12     	; 0x9378 <i2c_start_wait+0x50>
    936c:	2f 5f       	subi	r18, 0xFF	; 255
    936e:	3f 4f       	sbci	r19, 0xFF	; 255
    9370:	21 15       	cp	r18, r1
    9372:	91 e0       	ldi	r25, 0x01	; 1
    9374:	39 07       	cpc	r19, r25
    9376:	b1 f7       	brne	.-20     	; 0x9364 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    9378:	90 91 b9 00 	lds	r25, 0x00B9
    937c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    937e:	90 32       	cpi	r25, 0x20	; 32
    9380:	11 f0       	breq	.+4      	; 0x9386 <i2c_start_wait+0x5e>
    9382:	98 35       	cpi	r25, 0x58	; 88
    9384:	79 f4       	brne	.+30     	; 0x93a4 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9386:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    938a:	20 e0       	ldi	r18, 0x00	; 0
    938c:	30 e0       	ldi	r19, 0x00	; 0
    938e:	90 91 bc 00 	lds	r25, 0x00BC
    9392:	94 ff       	sbrs	r25, 4
    9394:	cc cf       	rjmp	.-104    	; 0x932e <i2c_start_wait+0x6>
    9396:	2f 5f       	subi	r18, 0xFF	; 255
    9398:	3f 4f       	sbci	r19, 0xFF	; 255
    939a:	21 15       	cp	r18, r1
    939c:	91 e0       	ldi	r25, 0x01	; 1
    939e:	39 07       	cpc	r19, r25
    93a0:	b1 f7       	brne	.-20     	; 0x938e <i2c_start_wait+0x66>
    93a2:	c5 cf       	rjmp	.-118    	; 0x932e <i2c_start_wait+0x6>
    93a4:	08 95       	ret

000093a6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    93a6:	0c 94 57 49 	jmp	0x92ae	; 0x92ae <i2c_start>

000093aa <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    93aa:	84 e9       	ldi	r24, 0x94	; 148
    93ac:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    93b0:	80 e0       	ldi	r24, 0x00	; 0
    93b2:	90 e0       	ldi	r25, 0x00	; 0
    93b4:	20 91 bc 00 	lds	r18, 0x00BC
    93b8:	24 ff       	sbrs	r18, 4
    93ba:	05 c0       	rjmp	.+10     	; 0x93c6 <i2c_stop+0x1c>
    93bc:	01 96       	adiw	r24, 0x01	; 1
    93be:	81 15       	cp	r24, r1
    93c0:	21 e0       	ldi	r18, 0x01	; 1
    93c2:	92 07       	cpc	r25, r18
    93c4:	b9 f7       	brne	.-18     	; 0x93b4 <i2c_stop+0xa>
    93c6:	08 95       	ret

000093c8 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    93c8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    93cc:	84 e8       	ldi	r24, 0x84	; 132
    93ce:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    93d2:	8f ef       	ldi	r24, 0xFF	; 255
    93d4:	90 e0       	ldi	r25, 0x00	; 0
    93d6:	a0 e0       	ldi	r26, 0x00	; 0
    93d8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    93da:	20 91 bc 00 	lds	r18, 0x00BC
    93de:	27 fd       	sbrc	r18, 7
    93e0:	05 c0       	rjmp	.+10     	; 0x93ec <i2c_write+0x24>
    93e2:	01 97       	sbiw	r24, 0x01	; 1
    93e4:	a1 09       	sbc	r26, r1
    93e6:	b1 09       	sbc	r27, r1
    93e8:	c0 f7       	brcc	.-16     	; 0x93da <i2c_write+0x12>
    93ea:	04 c0       	rjmp	.+8      	; 0x93f4 <i2c_write+0x2c>
	if(i2c_timer == 0)
    93ec:	89 2b       	or	r24, r25
    93ee:	8a 2b       	or	r24, r26
    93f0:	8b 2b       	or	r24, r27
    93f2:	41 f0       	breq	.+16     	; 0x9404 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    93f4:	90 91 b9 00 	lds	r25, 0x00B9
    93f8:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    93fa:	81 e0       	ldi	r24, 0x01	; 1
    93fc:	98 32       	cpi	r25, 0x28	; 40
    93fe:	19 f4       	brne	.+6      	; 0x9406 <i2c_write+0x3e>
    9400:	80 e0       	ldi	r24, 0x00	; 0
    9402:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    9404:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    9406:	08 95       	ret

00009408 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    9408:	84 ec       	ldi	r24, 0xC4	; 196
    940a:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    940e:	8f ef       	ldi	r24, 0xFF	; 255
    9410:	90 e0       	ldi	r25, 0x00	; 0
    9412:	a0 e0       	ldi	r26, 0x00	; 0
    9414:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9416:	20 91 bc 00 	lds	r18, 0x00BC
    941a:	27 fd       	sbrc	r18, 7
    941c:	05 c0       	rjmp	.+10     	; 0x9428 <i2c_readAck+0x20>
    941e:	01 97       	sbiw	r24, 0x01	; 1
    9420:	a1 09       	sbc	r26, r1
    9422:	b1 09       	sbc	r27, r1
    9424:	c0 f7       	brcc	.-16     	; 0x9416 <i2c_readAck+0xe>
    9426:	04 c0       	rjmp	.+8      	; 0x9430 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    9428:	89 2b       	or	r24, r25
    942a:	8a 2b       	or	r24, r26
    942c:	8b 2b       	or	r24, r27
    942e:	19 f0       	breq	.+6      	; 0x9436 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    9430:	80 91 bb 00 	lds	r24, 0x00BB
    9434:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    9436:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    9438:	08 95       	ret

0000943a <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    943a:	84 e8       	ldi	r24, 0x84	; 132
    943c:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    9440:	8f ef       	ldi	r24, 0xFF	; 255
    9442:	90 e0       	ldi	r25, 0x00	; 0
    9444:	a0 e0       	ldi	r26, 0x00	; 0
    9446:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9448:	20 91 bc 00 	lds	r18, 0x00BC
    944c:	27 fd       	sbrc	r18, 7
    944e:	05 c0       	rjmp	.+10     	; 0x945a <i2c_readNak+0x20>
    9450:	01 97       	sbiw	r24, 0x01	; 1
    9452:	a1 09       	sbc	r26, r1
    9454:	b1 09       	sbc	r27, r1
    9456:	c0 f7       	brcc	.-16     	; 0x9448 <i2c_readNak+0xe>
    9458:	04 c0       	rjmp	.+8      	; 0x9462 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    945a:	89 2b       	or	r24, r25
    945c:	8a 2b       	or	r24, r26
    945e:	8b 2b       	or	r24, r27
    9460:	19 f0       	breq	.+6      	; 0x9468 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    9462:	80 91 bb 00 	lds	r24, 0x00BB
    9466:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    9468:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    946a:	08 95       	ret

0000946c <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    946c:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    946e:	80 91 c1 00 	lds	r24, 0x00C1
    9472:	8f 77       	andi	r24, 0x7F	; 127
    9474:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    9478:	80 91 c0 00 	lds	r24, 0x00C0
    947c:	87 ff       	sbrs	r24, 7
    947e:	05 c0       	rjmp	.+10     	; 0x948a <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    9480:	80 91 c6 00 	lds	r24, 0x00C6
    9484:	80 93 c2 00 	sts	0x00C2, r24
    9488:	f7 cf       	rjmp	.-18     	; 0x9478 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    948a:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    948e:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    9492:	86 e0       	ldi	r24, 0x06	; 6
    9494:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    9498:	80 91 ea 05 	lds	r24, 0x05EA
    949c:	82 30       	cpi	r24, 0x02	; 2
    949e:	a1 f0       	breq	.+40     	; 0x94c8 <init_uart+0x5c>
    94a0:	34 f4       	brge	.+12     	; 0x94ae <init_uart+0x42>
    94a2:	87 fd       	sbrc	r24, 7
    94a4:	4c c0       	rjmp	.+152    	; 0x953e <init_uart+0xd2>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    94a6:	80 91 c1 00 	lds	r24, 0x00C1
    94aa:	8f 7e       	andi	r24, 0xEF	; 239
    94ac:	46 c0       	rjmp	.+140    	; 0x953a <init_uart+0xce>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    94ae:	83 30       	cpi	r24, 0x03	; 3
    94b0:	41 f1       	breq	.+80     	; 0x9502 <init_uart+0x96>
    94b2:	84 30       	cpi	r24, 0x04	; 4
    94b4:	09 f0       	breq	.+2      	; 0x94b8 <init_uart+0x4c>
    94b6:	43 c0       	rjmp	.+134    	; 0x953e <init_uart+0xd2>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    94b8:	90 91 c0 00 	lds	r25, 0x00C0
    94bc:	9d 7f       	andi	r25, 0xFD	; 253
    94be:	90 93 c0 00 	sts	0x00C0, r25
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    94c2:	10 92 c5 00 	sts	0x00C5, r1
    94c6:	25 c0       	rjmp	.+74     	; 0x9512 <init_uart+0xa6>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    94c8:	80 91 c0 00 	lds	r24, 0x00C0
    94cc:	82 60       	ori	r24, 0x02	; 2
    94ce:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    94d2:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    94d6:	88 e1       	ldi	r24, 0x18	; 24
    94d8:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    94dc:	80 91 c1 00 	lds	r24, 0x00C1
    94e0:	80 61       	ori	r24, 0x10	; 16
    94e2:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    94e6:	80 91 c2 00 	lds	r24, 0x00C2
    94ea:	88 60       	ori	r24, 0x08	; 8
    94ec:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    94f0:	80 91 c2 00 	lds	r24, 0x00C2
    94f4:	8f 7e       	andi	r24, 0xEF	; 239
    94f6:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    94fa:	80 91 c2 00 	lds	r24, 0x00C2
    94fe:	80 62       	ori	r24, 0x20	; 32
    9500:	17 c0       	rjmp	.+46     	; 0x9530 <init_uart+0xc4>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    9502:	80 91 c0 00 	lds	r24, 0x00C0
    9506:	8d 7f       	andi	r24, 0xFD	; 253
    9508:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    950c:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    9510:	8a e0       	ldi	r24, 0x0A	; 10
    9512:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    9516:	80 91 c1 00 	lds	r24, 0x00C1
    951a:	80 61       	ori	r24, 0x10	; 16
    951c:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    9520:	80 91 c2 00 	lds	r24, 0x00C2
    9524:	87 7f       	andi	r24, 0xF7	; 247
    9526:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    952a:	80 91 c2 00 	lds	r24, 0x00C2
    952e:	8f 7e       	andi	r24, 0xEF	; 239
    9530:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    9534:	80 91 c1 00 	lds	r24, 0x00C1
    9538:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    953a:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    953e:	78 94       	sei
    9540:	08 95       	ret

00009542 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    9542:	83 e0       	ldi	r24, 0x03	; 3
    9544:	0e 94 8a 11 	call	0x2314	; 0x2314 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    9548:	80 91 78 00 	lds	r24, 0x0078
    954c:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    9550:	9c 01       	movw	r18, r24
    9552:	36 95       	lsr	r19
    9554:	27 95       	ror	r18
    9556:	ac 01       	movw	r20, r24
    9558:	44 0f       	add	r20, r20
    955a:	55 1f       	adc	r21, r21
    955c:	24 0f       	add	r18, r20
    955e:	35 1f       	adc	r19, r21
    9560:	ac 01       	movw	r20, r24
    9562:	74 e0       	ldi	r23, 0x04	; 4
    9564:	56 95       	lsr	r21
    9566:	47 95       	ror	r20
    9568:	7a 95       	dec	r23
    956a:	e1 f7       	brne	.-8      	; 0x9564 <GetVbat+0x22>
    956c:	24 0f       	add	r18, r20
    956e:	35 1f       	adc	r19, r21
    9570:	e6 e0       	ldi	r30, 0x06	; 6
    9572:	96 95       	lsr	r25
    9574:	87 95       	ror	r24
    9576:	ea 95       	dec	r30
    9578:	e1 f7       	brne	.-8      	; 0x9572 <GetVbat+0x30>

	return vBat;
}
    957a:	82 0f       	add	r24, r18
    957c:	93 1f       	adc	r25, r19
    957e:	08 95       	ret

00009580 <__subsf3>:
    9580:	50 58       	subi	r21, 0x80	; 128

00009582 <__addsf3>:
    9582:	bb 27       	eor	r27, r27
    9584:	aa 27       	eor	r26, r26
    9586:	0e d0       	rcall	.+28     	; 0x95a4 <__addsf3x>
    9588:	75 c1       	rjmp	.+746    	; 0x9874 <__fp_round>
    958a:	66 d1       	rcall	.+716    	; 0x9858 <__fp_pscA>
    958c:	30 f0       	brcs	.+12     	; 0x959a <__addsf3+0x18>
    958e:	6b d1       	rcall	.+726    	; 0x9866 <__fp_pscB>
    9590:	20 f0       	brcs	.+8      	; 0x959a <__addsf3+0x18>
    9592:	31 f4       	brne	.+12     	; 0x95a0 <__addsf3+0x1e>
    9594:	9f 3f       	cpi	r25, 0xFF	; 255
    9596:	11 f4       	brne	.+4      	; 0x959c <__addsf3+0x1a>
    9598:	1e f4       	brtc	.+6      	; 0x95a0 <__addsf3+0x1e>
    959a:	5b c1       	rjmp	.+694    	; 0x9852 <__fp_nan>
    959c:	0e f4       	brtc	.+2      	; 0x95a0 <__addsf3+0x1e>
    959e:	e0 95       	com	r30
    95a0:	e7 fb       	bst	r30, 7
    95a2:	51 c1       	rjmp	.+674    	; 0x9846 <__fp_inf>

000095a4 <__addsf3x>:
    95a4:	e9 2f       	mov	r30, r25
    95a6:	77 d1       	rcall	.+750    	; 0x9896 <__fp_split3>
    95a8:	80 f3       	brcs	.-32     	; 0x958a <__addsf3+0x8>
    95aa:	ba 17       	cp	r27, r26
    95ac:	62 07       	cpc	r22, r18
    95ae:	73 07       	cpc	r23, r19
    95b0:	84 07       	cpc	r24, r20
    95b2:	95 07       	cpc	r25, r21
    95b4:	18 f0       	brcs	.+6      	; 0x95bc <__addsf3x+0x18>
    95b6:	71 f4       	brne	.+28     	; 0x95d4 <__addsf3x+0x30>
    95b8:	9e f5       	brtc	.+102    	; 0x9620 <__addsf3x+0x7c>
    95ba:	8f c1       	rjmp	.+798    	; 0x98da <__fp_zero>
    95bc:	0e f4       	brtc	.+2      	; 0x95c0 <__addsf3x+0x1c>
    95be:	e0 95       	com	r30
    95c0:	0b 2e       	mov	r0, r27
    95c2:	ba 2f       	mov	r27, r26
    95c4:	a0 2d       	mov	r26, r0
    95c6:	0b 01       	movw	r0, r22
    95c8:	b9 01       	movw	r22, r18
    95ca:	90 01       	movw	r18, r0
    95cc:	0c 01       	movw	r0, r24
    95ce:	ca 01       	movw	r24, r20
    95d0:	a0 01       	movw	r20, r0
    95d2:	11 24       	eor	r1, r1
    95d4:	ff 27       	eor	r31, r31
    95d6:	59 1b       	sub	r21, r25
    95d8:	99 f0       	breq	.+38     	; 0x9600 <__addsf3x+0x5c>
    95da:	59 3f       	cpi	r21, 0xF9	; 249
    95dc:	50 f4       	brcc	.+20     	; 0x95f2 <__addsf3x+0x4e>
    95de:	50 3e       	cpi	r21, 0xE0	; 224
    95e0:	68 f1       	brcs	.+90     	; 0x963c <__addsf3x+0x98>
    95e2:	1a 16       	cp	r1, r26
    95e4:	f0 40       	sbci	r31, 0x00	; 0
    95e6:	a2 2f       	mov	r26, r18
    95e8:	23 2f       	mov	r18, r19
    95ea:	34 2f       	mov	r19, r20
    95ec:	44 27       	eor	r20, r20
    95ee:	58 5f       	subi	r21, 0xF8	; 248
    95f0:	f3 cf       	rjmp	.-26     	; 0x95d8 <__addsf3x+0x34>
    95f2:	46 95       	lsr	r20
    95f4:	37 95       	ror	r19
    95f6:	27 95       	ror	r18
    95f8:	a7 95       	ror	r26
    95fa:	f0 40       	sbci	r31, 0x00	; 0
    95fc:	53 95       	inc	r21
    95fe:	c9 f7       	brne	.-14     	; 0x95f2 <__addsf3x+0x4e>
    9600:	7e f4       	brtc	.+30     	; 0x9620 <__addsf3x+0x7c>
    9602:	1f 16       	cp	r1, r31
    9604:	ba 0b       	sbc	r27, r26
    9606:	62 0b       	sbc	r22, r18
    9608:	73 0b       	sbc	r23, r19
    960a:	84 0b       	sbc	r24, r20
    960c:	ba f0       	brmi	.+46     	; 0x963c <__addsf3x+0x98>
    960e:	91 50       	subi	r25, 0x01	; 1
    9610:	a1 f0       	breq	.+40     	; 0x963a <__addsf3x+0x96>
    9612:	ff 0f       	add	r31, r31
    9614:	bb 1f       	adc	r27, r27
    9616:	66 1f       	adc	r22, r22
    9618:	77 1f       	adc	r23, r23
    961a:	88 1f       	adc	r24, r24
    961c:	c2 f7       	brpl	.-16     	; 0x960e <__addsf3x+0x6a>
    961e:	0e c0       	rjmp	.+28     	; 0x963c <__addsf3x+0x98>
    9620:	ba 0f       	add	r27, r26
    9622:	62 1f       	adc	r22, r18
    9624:	73 1f       	adc	r23, r19
    9626:	84 1f       	adc	r24, r20
    9628:	48 f4       	brcc	.+18     	; 0x963c <__addsf3x+0x98>
    962a:	87 95       	ror	r24
    962c:	77 95       	ror	r23
    962e:	67 95       	ror	r22
    9630:	b7 95       	ror	r27
    9632:	f7 95       	ror	r31
    9634:	9e 3f       	cpi	r25, 0xFE	; 254
    9636:	08 f0       	brcs	.+2      	; 0x963a <__addsf3x+0x96>
    9638:	b3 cf       	rjmp	.-154    	; 0x95a0 <__addsf3+0x1e>
    963a:	93 95       	inc	r25
    963c:	88 0f       	add	r24, r24
    963e:	08 f0       	brcs	.+2      	; 0x9642 <__addsf3x+0x9e>
    9640:	99 27       	eor	r25, r25
    9642:	ee 0f       	add	r30, r30
    9644:	97 95       	ror	r25
    9646:	87 95       	ror	r24
    9648:	08 95       	ret

0000964a <__cmpsf2>:
    964a:	d9 d0       	rcall	.+434    	; 0x97fe <__fp_cmp>
    964c:	08 f4       	brcc	.+2      	; 0x9650 <__cmpsf2+0x6>
    964e:	81 e0       	ldi	r24, 0x01	; 1
    9650:	08 95       	ret

00009652 <__divsf3>:
    9652:	0c d0       	rcall	.+24     	; 0x966c <__divsf3x>
    9654:	0f c1       	rjmp	.+542    	; 0x9874 <__fp_round>
    9656:	07 d1       	rcall	.+526    	; 0x9866 <__fp_pscB>
    9658:	40 f0       	brcs	.+16     	; 0x966a <__divsf3+0x18>
    965a:	fe d0       	rcall	.+508    	; 0x9858 <__fp_pscA>
    965c:	30 f0       	brcs	.+12     	; 0x966a <__divsf3+0x18>
    965e:	21 f4       	brne	.+8      	; 0x9668 <__divsf3+0x16>
    9660:	5f 3f       	cpi	r21, 0xFF	; 255
    9662:	19 f0       	breq	.+6      	; 0x966a <__divsf3+0x18>
    9664:	f0 c0       	rjmp	.+480    	; 0x9846 <__fp_inf>
    9666:	51 11       	cpse	r21, r1
    9668:	39 c1       	rjmp	.+626    	; 0x98dc <__fp_szero>
    966a:	f3 c0       	rjmp	.+486    	; 0x9852 <__fp_nan>

0000966c <__divsf3x>:
    966c:	14 d1       	rcall	.+552    	; 0x9896 <__fp_split3>
    966e:	98 f3       	brcs	.-26     	; 0x9656 <__divsf3+0x4>

00009670 <__divsf3_pse>:
    9670:	99 23       	and	r25, r25
    9672:	c9 f3       	breq	.-14     	; 0x9666 <__divsf3+0x14>
    9674:	55 23       	and	r21, r21
    9676:	b1 f3       	breq	.-20     	; 0x9664 <__divsf3+0x12>
    9678:	95 1b       	sub	r25, r21
    967a:	55 0b       	sbc	r21, r21
    967c:	bb 27       	eor	r27, r27
    967e:	aa 27       	eor	r26, r26
    9680:	62 17       	cp	r22, r18
    9682:	73 07       	cpc	r23, r19
    9684:	84 07       	cpc	r24, r20
    9686:	38 f0       	brcs	.+14     	; 0x9696 <__divsf3_pse+0x26>
    9688:	9f 5f       	subi	r25, 0xFF	; 255
    968a:	5f 4f       	sbci	r21, 0xFF	; 255
    968c:	22 0f       	add	r18, r18
    968e:	33 1f       	adc	r19, r19
    9690:	44 1f       	adc	r20, r20
    9692:	aa 1f       	adc	r26, r26
    9694:	a9 f3       	breq	.-22     	; 0x9680 <__divsf3_pse+0x10>
    9696:	33 d0       	rcall	.+102    	; 0x96fe <__divsf3_pse+0x8e>
    9698:	0e 2e       	mov	r0, r30
    969a:	3a f0       	brmi	.+14     	; 0x96aa <__divsf3_pse+0x3a>
    969c:	e0 e8       	ldi	r30, 0x80	; 128
    969e:	30 d0       	rcall	.+96     	; 0x9700 <__divsf3_pse+0x90>
    96a0:	91 50       	subi	r25, 0x01	; 1
    96a2:	50 40       	sbci	r21, 0x00	; 0
    96a4:	e6 95       	lsr	r30
    96a6:	00 1c       	adc	r0, r0
    96a8:	ca f7       	brpl	.-14     	; 0x969c <__divsf3_pse+0x2c>
    96aa:	29 d0       	rcall	.+82     	; 0x96fe <__divsf3_pse+0x8e>
    96ac:	fe 2f       	mov	r31, r30
    96ae:	27 d0       	rcall	.+78     	; 0x96fe <__divsf3_pse+0x8e>
    96b0:	66 0f       	add	r22, r22
    96b2:	77 1f       	adc	r23, r23
    96b4:	88 1f       	adc	r24, r24
    96b6:	bb 1f       	adc	r27, r27
    96b8:	26 17       	cp	r18, r22
    96ba:	37 07       	cpc	r19, r23
    96bc:	48 07       	cpc	r20, r24
    96be:	ab 07       	cpc	r26, r27
    96c0:	b0 e8       	ldi	r27, 0x80	; 128
    96c2:	09 f0       	breq	.+2      	; 0x96c6 <__divsf3_pse+0x56>
    96c4:	bb 0b       	sbc	r27, r27
    96c6:	80 2d       	mov	r24, r0
    96c8:	bf 01       	movw	r22, r30
    96ca:	ff 27       	eor	r31, r31
    96cc:	93 58       	subi	r25, 0x83	; 131
    96ce:	5f 4f       	sbci	r21, 0xFF	; 255
    96d0:	2a f0       	brmi	.+10     	; 0x96dc <__divsf3_pse+0x6c>
    96d2:	9e 3f       	cpi	r25, 0xFE	; 254
    96d4:	51 05       	cpc	r21, r1
    96d6:	68 f0       	brcs	.+26     	; 0x96f2 <__divsf3_pse+0x82>
    96d8:	b6 c0       	rjmp	.+364    	; 0x9846 <__fp_inf>
    96da:	00 c1       	rjmp	.+512    	; 0x98dc <__fp_szero>
    96dc:	5f 3f       	cpi	r21, 0xFF	; 255
    96de:	ec f3       	brlt	.-6      	; 0x96da <__divsf3_pse+0x6a>
    96e0:	98 3e       	cpi	r25, 0xE8	; 232
    96e2:	dc f3       	brlt	.-10     	; 0x96da <__divsf3_pse+0x6a>
    96e4:	86 95       	lsr	r24
    96e6:	77 95       	ror	r23
    96e8:	67 95       	ror	r22
    96ea:	b7 95       	ror	r27
    96ec:	f7 95       	ror	r31
    96ee:	9f 5f       	subi	r25, 0xFF	; 255
    96f0:	c9 f7       	brne	.-14     	; 0x96e4 <__divsf3_pse+0x74>
    96f2:	88 0f       	add	r24, r24
    96f4:	91 1d       	adc	r25, r1
    96f6:	96 95       	lsr	r25
    96f8:	87 95       	ror	r24
    96fa:	97 f9       	bld	r25, 7
    96fc:	08 95       	ret
    96fe:	e1 e0       	ldi	r30, 0x01	; 1
    9700:	66 0f       	add	r22, r22
    9702:	77 1f       	adc	r23, r23
    9704:	88 1f       	adc	r24, r24
    9706:	bb 1f       	adc	r27, r27
    9708:	62 17       	cp	r22, r18
    970a:	73 07       	cpc	r23, r19
    970c:	84 07       	cpc	r24, r20
    970e:	ba 07       	cpc	r27, r26
    9710:	20 f0       	brcs	.+8      	; 0x971a <__divsf3_pse+0xaa>
    9712:	62 1b       	sub	r22, r18
    9714:	73 0b       	sbc	r23, r19
    9716:	84 0b       	sbc	r24, r20
    9718:	ba 0b       	sbc	r27, r26
    971a:	ee 1f       	adc	r30, r30
    971c:	88 f7       	brcc	.-30     	; 0x9700 <__divsf3_pse+0x90>
    971e:	e0 95       	com	r30
    9720:	08 95       	ret

00009722 <__fixsfsi>:
    9722:	04 d0       	rcall	.+8      	; 0x972c <__fixunssfsi>
    9724:	68 94       	set
    9726:	b1 11       	cpse	r27, r1
    9728:	d9 c0       	rjmp	.+434    	; 0x98dc <__fp_szero>
    972a:	08 95       	ret

0000972c <__fixunssfsi>:
    972c:	bc d0       	rcall	.+376    	; 0x98a6 <__fp_splitA>
    972e:	88 f0       	brcs	.+34     	; 0x9752 <__fixunssfsi+0x26>
    9730:	9f 57       	subi	r25, 0x7F	; 127
    9732:	90 f0       	brcs	.+36     	; 0x9758 <__fixunssfsi+0x2c>
    9734:	b9 2f       	mov	r27, r25
    9736:	99 27       	eor	r25, r25
    9738:	b7 51       	subi	r27, 0x17	; 23
    973a:	a0 f0       	brcs	.+40     	; 0x9764 <__fixunssfsi+0x38>
    973c:	d1 f0       	breq	.+52     	; 0x9772 <__fixunssfsi+0x46>
    973e:	66 0f       	add	r22, r22
    9740:	77 1f       	adc	r23, r23
    9742:	88 1f       	adc	r24, r24
    9744:	99 1f       	adc	r25, r25
    9746:	1a f0       	brmi	.+6      	; 0x974e <__fixunssfsi+0x22>
    9748:	ba 95       	dec	r27
    974a:	c9 f7       	brne	.-14     	; 0x973e <__fixunssfsi+0x12>
    974c:	12 c0       	rjmp	.+36     	; 0x9772 <__fixunssfsi+0x46>
    974e:	b1 30       	cpi	r27, 0x01	; 1
    9750:	81 f0       	breq	.+32     	; 0x9772 <__fixunssfsi+0x46>
    9752:	c3 d0       	rcall	.+390    	; 0x98da <__fp_zero>
    9754:	b1 e0       	ldi	r27, 0x01	; 1
    9756:	08 95       	ret
    9758:	c0 c0       	rjmp	.+384    	; 0x98da <__fp_zero>
    975a:	67 2f       	mov	r22, r23
    975c:	78 2f       	mov	r23, r24
    975e:	88 27       	eor	r24, r24
    9760:	b8 5f       	subi	r27, 0xF8	; 248
    9762:	39 f0       	breq	.+14     	; 0x9772 <__fixunssfsi+0x46>
    9764:	b9 3f       	cpi	r27, 0xF9	; 249
    9766:	cc f3       	brlt	.-14     	; 0x975a <__fixunssfsi+0x2e>
    9768:	86 95       	lsr	r24
    976a:	77 95       	ror	r23
    976c:	67 95       	ror	r22
    976e:	b3 95       	inc	r27
    9770:	d9 f7       	brne	.-10     	; 0x9768 <__fixunssfsi+0x3c>
    9772:	3e f4       	brtc	.+14     	; 0x9782 <__fixunssfsi+0x56>
    9774:	90 95       	com	r25
    9776:	80 95       	com	r24
    9778:	70 95       	com	r23
    977a:	61 95       	neg	r22
    977c:	7f 4f       	sbci	r23, 0xFF	; 255
    977e:	8f 4f       	sbci	r24, 0xFF	; 255
    9780:	9f 4f       	sbci	r25, 0xFF	; 255
    9782:	08 95       	ret

00009784 <__floatunsisf>:
    9784:	e8 94       	clt
    9786:	09 c0       	rjmp	.+18     	; 0x979a <__floatsisf+0x12>

00009788 <__floatsisf>:
    9788:	97 fb       	bst	r25, 7
    978a:	3e f4       	brtc	.+14     	; 0x979a <__floatsisf+0x12>
    978c:	90 95       	com	r25
    978e:	80 95       	com	r24
    9790:	70 95       	com	r23
    9792:	61 95       	neg	r22
    9794:	7f 4f       	sbci	r23, 0xFF	; 255
    9796:	8f 4f       	sbci	r24, 0xFF	; 255
    9798:	9f 4f       	sbci	r25, 0xFF	; 255
    979a:	99 23       	and	r25, r25
    979c:	a9 f0       	breq	.+42     	; 0x97c8 <__floatsisf+0x40>
    979e:	f9 2f       	mov	r31, r25
    97a0:	96 e9       	ldi	r25, 0x96	; 150
    97a2:	bb 27       	eor	r27, r27
    97a4:	93 95       	inc	r25
    97a6:	f6 95       	lsr	r31
    97a8:	87 95       	ror	r24
    97aa:	77 95       	ror	r23
    97ac:	67 95       	ror	r22
    97ae:	b7 95       	ror	r27
    97b0:	f1 11       	cpse	r31, r1
    97b2:	f8 cf       	rjmp	.-16     	; 0x97a4 <__floatsisf+0x1c>
    97b4:	fa f4       	brpl	.+62     	; 0x97f4 <__floatsisf+0x6c>
    97b6:	bb 0f       	add	r27, r27
    97b8:	11 f4       	brne	.+4      	; 0x97be <__floatsisf+0x36>
    97ba:	60 ff       	sbrs	r22, 0
    97bc:	1b c0       	rjmp	.+54     	; 0x97f4 <__floatsisf+0x6c>
    97be:	6f 5f       	subi	r22, 0xFF	; 255
    97c0:	7f 4f       	sbci	r23, 0xFF	; 255
    97c2:	8f 4f       	sbci	r24, 0xFF	; 255
    97c4:	9f 4f       	sbci	r25, 0xFF	; 255
    97c6:	16 c0       	rjmp	.+44     	; 0x97f4 <__floatsisf+0x6c>
    97c8:	88 23       	and	r24, r24
    97ca:	11 f0       	breq	.+4      	; 0x97d0 <__floatsisf+0x48>
    97cc:	96 e9       	ldi	r25, 0x96	; 150
    97ce:	11 c0       	rjmp	.+34     	; 0x97f2 <__floatsisf+0x6a>
    97d0:	77 23       	and	r23, r23
    97d2:	21 f0       	breq	.+8      	; 0x97dc <__floatsisf+0x54>
    97d4:	9e e8       	ldi	r25, 0x8E	; 142
    97d6:	87 2f       	mov	r24, r23
    97d8:	76 2f       	mov	r23, r22
    97da:	05 c0       	rjmp	.+10     	; 0x97e6 <__floatsisf+0x5e>
    97dc:	66 23       	and	r22, r22
    97de:	71 f0       	breq	.+28     	; 0x97fc <__floatsisf+0x74>
    97e0:	96 e8       	ldi	r25, 0x86	; 134
    97e2:	86 2f       	mov	r24, r22
    97e4:	70 e0       	ldi	r23, 0x00	; 0
    97e6:	60 e0       	ldi	r22, 0x00	; 0
    97e8:	2a f0       	brmi	.+10     	; 0x97f4 <__floatsisf+0x6c>
    97ea:	9a 95       	dec	r25
    97ec:	66 0f       	add	r22, r22
    97ee:	77 1f       	adc	r23, r23
    97f0:	88 1f       	adc	r24, r24
    97f2:	da f7       	brpl	.-10     	; 0x97ea <__floatsisf+0x62>
    97f4:	88 0f       	add	r24, r24
    97f6:	96 95       	lsr	r25
    97f8:	87 95       	ror	r24
    97fa:	97 f9       	bld	r25, 7
    97fc:	08 95       	ret

000097fe <__fp_cmp>:
    97fe:	99 0f       	add	r25, r25
    9800:	00 08       	sbc	r0, r0
    9802:	55 0f       	add	r21, r21
    9804:	aa 0b       	sbc	r26, r26
    9806:	e0 e8       	ldi	r30, 0x80	; 128
    9808:	fe ef       	ldi	r31, 0xFE	; 254
    980a:	16 16       	cp	r1, r22
    980c:	17 06       	cpc	r1, r23
    980e:	e8 07       	cpc	r30, r24
    9810:	f9 07       	cpc	r31, r25
    9812:	c0 f0       	brcs	.+48     	; 0x9844 <__fp_cmp+0x46>
    9814:	12 16       	cp	r1, r18
    9816:	13 06       	cpc	r1, r19
    9818:	e4 07       	cpc	r30, r20
    981a:	f5 07       	cpc	r31, r21
    981c:	98 f0       	brcs	.+38     	; 0x9844 <__fp_cmp+0x46>
    981e:	62 1b       	sub	r22, r18
    9820:	73 0b       	sbc	r23, r19
    9822:	84 0b       	sbc	r24, r20
    9824:	95 0b       	sbc	r25, r21
    9826:	39 f4       	brne	.+14     	; 0x9836 <__fp_cmp+0x38>
    9828:	0a 26       	eor	r0, r26
    982a:	61 f0       	breq	.+24     	; 0x9844 <__fp_cmp+0x46>
    982c:	23 2b       	or	r18, r19
    982e:	24 2b       	or	r18, r20
    9830:	25 2b       	or	r18, r21
    9832:	21 f4       	brne	.+8      	; 0x983c <__fp_cmp+0x3e>
    9834:	08 95       	ret
    9836:	0a 26       	eor	r0, r26
    9838:	09 f4       	brne	.+2      	; 0x983c <__fp_cmp+0x3e>
    983a:	a1 40       	sbci	r26, 0x01	; 1
    983c:	a6 95       	lsr	r26
    983e:	8f ef       	ldi	r24, 0xFF	; 255
    9840:	81 1d       	adc	r24, r1
    9842:	81 1d       	adc	r24, r1
    9844:	08 95       	ret

00009846 <__fp_inf>:
    9846:	97 f9       	bld	r25, 7
    9848:	9f 67       	ori	r25, 0x7F	; 127
    984a:	80 e8       	ldi	r24, 0x80	; 128
    984c:	70 e0       	ldi	r23, 0x00	; 0
    984e:	60 e0       	ldi	r22, 0x00	; 0
    9850:	08 95       	ret

00009852 <__fp_nan>:
    9852:	9f ef       	ldi	r25, 0xFF	; 255
    9854:	80 ec       	ldi	r24, 0xC0	; 192
    9856:	08 95       	ret

00009858 <__fp_pscA>:
    9858:	00 24       	eor	r0, r0
    985a:	0a 94       	dec	r0
    985c:	16 16       	cp	r1, r22
    985e:	17 06       	cpc	r1, r23
    9860:	18 06       	cpc	r1, r24
    9862:	09 06       	cpc	r0, r25
    9864:	08 95       	ret

00009866 <__fp_pscB>:
    9866:	00 24       	eor	r0, r0
    9868:	0a 94       	dec	r0
    986a:	12 16       	cp	r1, r18
    986c:	13 06       	cpc	r1, r19
    986e:	14 06       	cpc	r1, r20
    9870:	05 06       	cpc	r0, r21
    9872:	08 95       	ret

00009874 <__fp_round>:
    9874:	09 2e       	mov	r0, r25
    9876:	03 94       	inc	r0
    9878:	00 0c       	add	r0, r0
    987a:	11 f4       	brne	.+4      	; 0x9880 <__fp_round+0xc>
    987c:	88 23       	and	r24, r24
    987e:	52 f0       	brmi	.+20     	; 0x9894 <__fp_round+0x20>
    9880:	bb 0f       	add	r27, r27
    9882:	40 f4       	brcc	.+16     	; 0x9894 <__fp_round+0x20>
    9884:	bf 2b       	or	r27, r31
    9886:	11 f4       	brne	.+4      	; 0x988c <__fp_round+0x18>
    9888:	60 ff       	sbrs	r22, 0
    988a:	04 c0       	rjmp	.+8      	; 0x9894 <__fp_round+0x20>
    988c:	6f 5f       	subi	r22, 0xFF	; 255
    988e:	7f 4f       	sbci	r23, 0xFF	; 255
    9890:	8f 4f       	sbci	r24, 0xFF	; 255
    9892:	9f 4f       	sbci	r25, 0xFF	; 255
    9894:	08 95       	ret

00009896 <__fp_split3>:
    9896:	57 fd       	sbrc	r21, 7
    9898:	90 58       	subi	r25, 0x80	; 128
    989a:	44 0f       	add	r20, r20
    989c:	55 1f       	adc	r21, r21
    989e:	59 f0       	breq	.+22     	; 0x98b6 <__fp_splitA+0x10>
    98a0:	5f 3f       	cpi	r21, 0xFF	; 255
    98a2:	71 f0       	breq	.+28     	; 0x98c0 <__fp_splitA+0x1a>
    98a4:	47 95       	ror	r20

000098a6 <__fp_splitA>:
    98a6:	88 0f       	add	r24, r24
    98a8:	97 fb       	bst	r25, 7
    98aa:	99 1f       	adc	r25, r25
    98ac:	61 f0       	breq	.+24     	; 0x98c6 <__fp_splitA+0x20>
    98ae:	9f 3f       	cpi	r25, 0xFF	; 255
    98b0:	79 f0       	breq	.+30     	; 0x98d0 <__fp_splitA+0x2a>
    98b2:	87 95       	ror	r24
    98b4:	08 95       	ret
    98b6:	12 16       	cp	r1, r18
    98b8:	13 06       	cpc	r1, r19
    98ba:	14 06       	cpc	r1, r20
    98bc:	55 1f       	adc	r21, r21
    98be:	f2 cf       	rjmp	.-28     	; 0x98a4 <__fp_split3+0xe>
    98c0:	46 95       	lsr	r20
    98c2:	f1 df       	rcall	.-30     	; 0x98a6 <__fp_splitA>
    98c4:	08 c0       	rjmp	.+16     	; 0x98d6 <__fp_splitA+0x30>
    98c6:	16 16       	cp	r1, r22
    98c8:	17 06       	cpc	r1, r23
    98ca:	18 06       	cpc	r1, r24
    98cc:	99 1f       	adc	r25, r25
    98ce:	f1 cf       	rjmp	.-30     	; 0x98b2 <__fp_splitA+0xc>
    98d0:	86 95       	lsr	r24
    98d2:	71 05       	cpc	r23, r1
    98d4:	61 05       	cpc	r22, r1
    98d6:	08 94       	sec
    98d8:	08 95       	ret

000098da <__fp_zero>:
    98da:	e8 94       	clt

000098dc <__fp_szero>:
    98dc:	bb 27       	eor	r27, r27
    98de:	66 27       	eor	r22, r22
    98e0:	77 27       	eor	r23, r23
    98e2:	cb 01       	movw	r24, r22
    98e4:	97 f9       	bld	r25, 7
    98e6:	08 95       	ret

000098e8 <__gesf2>:
    98e8:	8a df       	rcall	.-236    	; 0x97fe <__fp_cmp>
    98ea:	08 f4       	brcc	.+2      	; 0x98ee <__gesf2+0x6>
    98ec:	8f ef       	ldi	r24, 0xFF	; 255
    98ee:	08 95       	ret

000098f0 <__mulsf3>:
    98f0:	0b d0       	rcall	.+22     	; 0x9908 <__mulsf3x>
    98f2:	c0 cf       	rjmp	.-128    	; 0x9874 <__fp_round>
    98f4:	b1 df       	rcall	.-158    	; 0x9858 <__fp_pscA>
    98f6:	28 f0       	brcs	.+10     	; 0x9902 <__mulsf3+0x12>
    98f8:	b6 df       	rcall	.-148    	; 0x9866 <__fp_pscB>
    98fa:	18 f0       	brcs	.+6      	; 0x9902 <__mulsf3+0x12>
    98fc:	95 23       	and	r25, r21
    98fe:	09 f0       	breq	.+2      	; 0x9902 <__mulsf3+0x12>
    9900:	a2 cf       	rjmp	.-188    	; 0x9846 <__fp_inf>
    9902:	a7 cf       	rjmp	.-178    	; 0x9852 <__fp_nan>
    9904:	11 24       	eor	r1, r1
    9906:	ea cf       	rjmp	.-44     	; 0x98dc <__fp_szero>

00009908 <__mulsf3x>:
    9908:	c6 df       	rcall	.-116    	; 0x9896 <__fp_split3>
    990a:	a0 f3       	brcs	.-24     	; 0x98f4 <__mulsf3+0x4>

0000990c <__mulsf3_pse>:
    990c:	95 9f       	mul	r25, r21
    990e:	d1 f3       	breq	.-12     	; 0x9904 <__mulsf3+0x14>
    9910:	95 0f       	add	r25, r21
    9912:	50 e0       	ldi	r21, 0x00	; 0
    9914:	55 1f       	adc	r21, r21
    9916:	62 9f       	mul	r22, r18
    9918:	f0 01       	movw	r30, r0
    991a:	72 9f       	mul	r23, r18
    991c:	bb 27       	eor	r27, r27
    991e:	f0 0d       	add	r31, r0
    9920:	b1 1d       	adc	r27, r1
    9922:	63 9f       	mul	r22, r19
    9924:	aa 27       	eor	r26, r26
    9926:	f0 0d       	add	r31, r0
    9928:	b1 1d       	adc	r27, r1
    992a:	aa 1f       	adc	r26, r26
    992c:	64 9f       	mul	r22, r20
    992e:	66 27       	eor	r22, r22
    9930:	b0 0d       	add	r27, r0
    9932:	a1 1d       	adc	r26, r1
    9934:	66 1f       	adc	r22, r22
    9936:	82 9f       	mul	r24, r18
    9938:	22 27       	eor	r18, r18
    993a:	b0 0d       	add	r27, r0
    993c:	a1 1d       	adc	r26, r1
    993e:	62 1f       	adc	r22, r18
    9940:	73 9f       	mul	r23, r19
    9942:	b0 0d       	add	r27, r0
    9944:	a1 1d       	adc	r26, r1
    9946:	62 1f       	adc	r22, r18
    9948:	83 9f       	mul	r24, r19
    994a:	a0 0d       	add	r26, r0
    994c:	61 1d       	adc	r22, r1
    994e:	22 1f       	adc	r18, r18
    9950:	74 9f       	mul	r23, r20
    9952:	33 27       	eor	r19, r19
    9954:	a0 0d       	add	r26, r0
    9956:	61 1d       	adc	r22, r1
    9958:	23 1f       	adc	r18, r19
    995a:	84 9f       	mul	r24, r20
    995c:	60 0d       	add	r22, r0
    995e:	21 1d       	adc	r18, r1
    9960:	82 2f       	mov	r24, r18
    9962:	76 2f       	mov	r23, r22
    9964:	6a 2f       	mov	r22, r26
    9966:	11 24       	eor	r1, r1
    9968:	9f 57       	subi	r25, 0x7F	; 127
    996a:	50 40       	sbci	r21, 0x00	; 0
    996c:	8a f0       	brmi	.+34     	; 0x9990 <__mulsf3_pse+0x84>
    996e:	e1 f0       	breq	.+56     	; 0x99a8 <__mulsf3_pse+0x9c>
    9970:	88 23       	and	r24, r24
    9972:	4a f0       	brmi	.+18     	; 0x9986 <__mulsf3_pse+0x7a>
    9974:	ee 0f       	add	r30, r30
    9976:	ff 1f       	adc	r31, r31
    9978:	bb 1f       	adc	r27, r27
    997a:	66 1f       	adc	r22, r22
    997c:	77 1f       	adc	r23, r23
    997e:	88 1f       	adc	r24, r24
    9980:	91 50       	subi	r25, 0x01	; 1
    9982:	50 40       	sbci	r21, 0x00	; 0
    9984:	a9 f7       	brne	.-22     	; 0x9970 <__mulsf3_pse+0x64>
    9986:	9e 3f       	cpi	r25, 0xFE	; 254
    9988:	51 05       	cpc	r21, r1
    998a:	70 f0       	brcs	.+28     	; 0x99a8 <__mulsf3_pse+0x9c>
    998c:	5c cf       	rjmp	.-328    	; 0x9846 <__fp_inf>
    998e:	a6 cf       	rjmp	.-180    	; 0x98dc <__fp_szero>
    9990:	5f 3f       	cpi	r21, 0xFF	; 255
    9992:	ec f3       	brlt	.-6      	; 0x998e <__mulsf3_pse+0x82>
    9994:	98 3e       	cpi	r25, 0xE8	; 232
    9996:	dc f3       	brlt	.-10     	; 0x998e <__mulsf3_pse+0x82>
    9998:	86 95       	lsr	r24
    999a:	77 95       	ror	r23
    999c:	67 95       	ror	r22
    999e:	b7 95       	ror	r27
    99a0:	f7 95       	ror	r31
    99a2:	e7 95       	ror	r30
    99a4:	9f 5f       	subi	r25, 0xFF	; 255
    99a6:	c1 f7       	brne	.-16     	; 0x9998 <__mulsf3_pse+0x8c>
    99a8:	fe 2b       	or	r31, r30
    99aa:	88 0f       	add	r24, r24
    99ac:	91 1d       	adc	r25, r1
    99ae:	96 95       	lsr	r25
    99b0:	87 95       	ror	r24
    99b2:	97 f9       	bld	r25, 7
    99b4:	08 95       	ret

000099b6 <__udivmodhi4>:
    99b6:	aa 1b       	sub	r26, r26
    99b8:	bb 1b       	sub	r27, r27
    99ba:	51 e1       	ldi	r21, 0x11	; 17
    99bc:	07 c0       	rjmp	.+14     	; 0x99cc <__udivmodhi4_ep>

000099be <__udivmodhi4_loop>:
    99be:	aa 1f       	adc	r26, r26
    99c0:	bb 1f       	adc	r27, r27
    99c2:	a6 17       	cp	r26, r22
    99c4:	b7 07       	cpc	r27, r23
    99c6:	10 f0       	brcs	.+4      	; 0x99cc <__udivmodhi4_ep>
    99c8:	a6 1b       	sub	r26, r22
    99ca:	b7 0b       	sbc	r27, r23

000099cc <__udivmodhi4_ep>:
    99cc:	88 1f       	adc	r24, r24
    99ce:	99 1f       	adc	r25, r25
    99d0:	5a 95       	dec	r21
    99d2:	a9 f7       	brne	.-22     	; 0x99be <__udivmodhi4_loop>
    99d4:	80 95       	com	r24
    99d6:	90 95       	com	r25
    99d8:	bc 01       	movw	r22, r24
    99da:	cd 01       	movw	r24, r26
    99dc:	08 95       	ret

000099de <__divmodhi4>:
    99de:	97 fb       	bst	r25, 7
    99e0:	07 2e       	mov	r0, r23
    99e2:	16 f4       	brtc	.+4      	; 0x99e8 <__divmodhi4+0xa>
    99e4:	00 94       	com	r0
    99e6:	07 d0       	rcall	.+14     	; 0x99f6 <__divmodhi4_neg1>
    99e8:	77 fd       	sbrc	r23, 7
    99ea:	09 d0       	rcall	.+18     	; 0x99fe <__divmodhi4_neg2>
    99ec:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__udivmodhi4>
    99f0:	07 fc       	sbrc	r0, 7
    99f2:	05 d0       	rcall	.+10     	; 0x99fe <__divmodhi4_neg2>
    99f4:	3e f4       	brtc	.+14     	; 0x9a04 <__divmodhi4_exit>

000099f6 <__divmodhi4_neg1>:
    99f6:	90 95       	com	r25
    99f8:	81 95       	neg	r24
    99fa:	9f 4f       	sbci	r25, 0xFF	; 255
    99fc:	08 95       	ret

000099fe <__divmodhi4_neg2>:
    99fe:	70 95       	com	r23
    9a00:	61 95       	neg	r22
    9a02:	7f 4f       	sbci	r23, 0xFF	; 255

00009a04 <__divmodhi4_exit>:
    9a04:	08 95       	ret

00009a06 <__udivmodsi4>:
    9a06:	a1 e2       	ldi	r26, 0x21	; 33
    9a08:	1a 2e       	mov	r1, r26
    9a0a:	aa 1b       	sub	r26, r26
    9a0c:	bb 1b       	sub	r27, r27
    9a0e:	fd 01       	movw	r30, r26
    9a10:	0d c0       	rjmp	.+26     	; 0x9a2c <__udivmodsi4_ep>

00009a12 <__udivmodsi4_loop>:
    9a12:	aa 1f       	adc	r26, r26
    9a14:	bb 1f       	adc	r27, r27
    9a16:	ee 1f       	adc	r30, r30
    9a18:	ff 1f       	adc	r31, r31
    9a1a:	a2 17       	cp	r26, r18
    9a1c:	b3 07       	cpc	r27, r19
    9a1e:	e4 07       	cpc	r30, r20
    9a20:	f5 07       	cpc	r31, r21
    9a22:	20 f0       	brcs	.+8      	; 0x9a2c <__udivmodsi4_ep>
    9a24:	a2 1b       	sub	r26, r18
    9a26:	b3 0b       	sbc	r27, r19
    9a28:	e4 0b       	sbc	r30, r20
    9a2a:	f5 0b       	sbc	r31, r21

00009a2c <__udivmodsi4_ep>:
    9a2c:	66 1f       	adc	r22, r22
    9a2e:	77 1f       	adc	r23, r23
    9a30:	88 1f       	adc	r24, r24
    9a32:	99 1f       	adc	r25, r25
    9a34:	1a 94       	dec	r1
    9a36:	69 f7       	brne	.-38     	; 0x9a12 <__udivmodsi4_loop>
    9a38:	60 95       	com	r22
    9a3a:	70 95       	com	r23
    9a3c:	80 95       	com	r24
    9a3e:	90 95       	com	r25
    9a40:	9b 01       	movw	r18, r22
    9a42:	ac 01       	movw	r20, r24
    9a44:	bd 01       	movw	r22, r26
    9a46:	cf 01       	movw	r24, r30
    9a48:	08 95       	ret

00009a4a <__divmodsi4>:
    9a4a:	05 2e       	mov	r0, r21
    9a4c:	97 fb       	bst	r25, 7
    9a4e:	1e f4       	brtc	.+6      	; 0x9a56 <__divmodsi4+0xc>
    9a50:	00 94       	com	r0
    9a52:	0e 94 3c 4d 	call	0x9a78	; 0x9a78 <__negsi2>
    9a56:	57 fd       	sbrc	r21, 7
    9a58:	07 d0       	rcall	.+14     	; 0x9a68 <__divmodsi4_neg2>
    9a5a:	0e 94 03 4d 	call	0x9a06	; 0x9a06 <__udivmodsi4>
    9a5e:	07 fc       	sbrc	r0, 7
    9a60:	03 d0       	rcall	.+6      	; 0x9a68 <__divmodsi4_neg2>
    9a62:	4e f4       	brtc	.+18     	; 0x9a76 <__divmodsi4_exit>
    9a64:	0c 94 3c 4d 	jmp	0x9a78	; 0x9a78 <__negsi2>

00009a68 <__divmodsi4_neg2>:
    9a68:	50 95       	com	r21
    9a6a:	40 95       	com	r20
    9a6c:	30 95       	com	r19
    9a6e:	21 95       	neg	r18
    9a70:	3f 4f       	sbci	r19, 0xFF	; 255
    9a72:	4f 4f       	sbci	r20, 0xFF	; 255
    9a74:	5f 4f       	sbci	r21, 0xFF	; 255

00009a76 <__divmodsi4_exit>:
    9a76:	08 95       	ret

00009a78 <__negsi2>:
    9a78:	90 95       	com	r25
    9a7a:	80 95       	com	r24
    9a7c:	70 95       	com	r23
    9a7e:	61 95       	neg	r22
    9a80:	7f 4f       	sbci	r23, 0xFF	; 255
    9a82:	8f 4f       	sbci	r24, 0xFF	; 255
    9a84:	9f 4f       	sbci	r25, 0xFF	; 255
    9a86:	08 95       	ret

00009a88 <__tablejump2__>:
    9a88:	ee 0f       	add	r30, r30
    9a8a:	ff 1f       	adc	r31, r31

00009a8c <__tablejump__>:
    9a8c:	05 90       	lpm	r0, Z+
    9a8e:	f4 91       	lpm	r31, Z
    9a90:	e0 2d       	mov	r30, r0
    9a92:	09 94       	ijmp

00009a94 <__mulhisi3>:
    9a94:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__umulhisi3>
    9a98:	33 23       	and	r19, r19
    9a9a:	12 f4       	brpl	.+4      	; 0x9aa0 <__mulhisi3+0xc>
    9a9c:	8a 1b       	sub	r24, r26
    9a9e:	9b 0b       	sbc	r25, r27
    9aa0:	0c 94 63 4d 	jmp	0x9ac6	; 0x9ac6 <__usmulhisi3_tail>

00009aa4 <__umulhisi3>:
    9aa4:	a2 9f       	mul	r26, r18
    9aa6:	b0 01       	movw	r22, r0
    9aa8:	b3 9f       	mul	r27, r19
    9aaa:	c0 01       	movw	r24, r0
    9aac:	a3 9f       	mul	r26, r19
    9aae:	70 0d       	add	r23, r0
    9ab0:	81 1d       	adc	r24, r1
    9ab2:	11 24       	eor	r1, r1
    9ab4:	91 1d       	adc	r25, r1
    9ab6:	b2 9f       	mul	r27, r18
    9ab8:	70 0d       	add	r23, r0
    9aba:	81 1d       	adc	r24, r1
    9abc:	11 24       	eor	r1, r1
    9abe:	91 1d       	adc	r25, r1
    9ac0:	08 95       	ret

00009ac2 <__usmulhisi3>:
    9ac2:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__umulhisi3>

00009ac6 <__usmulhisi3_tail>:
    9ac6:	b7 ff       	sbrs	r27, 7
    9ac8:	08 95       	ret
    9aca:	82 1b       	sub	r24, r18
    9acc:	93 0b       	sbc	r25, r19
    9ace:	08 95       	ret

00009ad0 <__muluhisi3>:
    9ad0:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <__umulhisi3>
    9ad4:	a5 9f       	mul	r26, r21
    9ad6:	90 0d       	add	r25, r0
    9ad8:	b4 9f       	mul	r27, r20
    9ada:	90 0d       	add	r25, r0
    9adc:	a4 9f       	mul	r26, r20
    9ade:	80 0d       	add	r24, r0
    9ae0:	91 1d       	adc	r25, r1
    9ae2:	11 24       	eor	r1, r1
    9ae4:	08 95       	ret

00009ae6 <__mulshisi3>:
    9ae6:	b7 ff       	sbrs	r27, 7
    9ae8:	0c 94 68 4d 	jmp	0x9ad0	; 0x9ad0 <__muluhisi3>

00009aec <__mulohisi3>:
    9aec:	0e 94 68 4d 	call	0x9ad0	; 0x9ad0 <__muluhisi3>
    9af0:	82 1b       	sub	r24, r18
    9af2:	93 0b       	sbc	r25, r19
    9af4:	08 95       	ret

00009af6 <memcpy_P>:
    9af6:	fb 01       	movw	r30, r22
    9af8:	dc 01       	movw	r26, r24
    9afa:	02 c0       	rjmp	.+4      	; 0x9b00 <memcpy_P+0xa>
    9afc:	05 90       	lpm	r0, Z+
    9afe:	0d 92       	st	X+, r0
    9b00:	41 50       	subi	r20, 0x01	; 1
    9b02:	50 40       	sbci	r21, 0x00	; 0
    9b04:	d8 f7       	brcc	.-10     	; 0x9afc <memcpy_P+0x6>
    9b06:	08 95       	ret

00009b08 <memmove>:
    9b08:	68 17       	cp	r22, r24
    9b0a:	79 07       	cpc	r23, r25
    9b0c:	68 f4       	brcc	.+26     	; 0x9b28 <memmove+0x20>
    9b0e:	fb 01       	movw	r30, r22
    9b10:	dc 01       	movw	r26, r24
    9b12:	e4 0f       	add	r30, r20
    9b14:	f5 1f       	adc	r31, r21
    9b16:	a4 0f       	add	r26, r20
    9b18:	b5 1f       	adc	r27, r21
    9b1a:	02 c0       	rjmp	.+4      	; 0x9b20 <memmove+0x18>
    9b1c:	02 90       	ld	r0, -Z
    9b1e:	0e 92       	st	-X, r0
    9b20:	41 50       	subi	r20, 0x01	; 1
    9b22:	50 40       	sbci	r21, 0x00	; 0
    9b24:	d8 f7       	brcc	.-10     	; 0x9b1c <memmove+0x14>
    9b26:	08 95       	ret
    9b28:	0c 94 e1 4d 	jmp	0x9bc2	; 0x9bc2 <memcpy>

00009b2c <__itoa_ncheck>:
    9b2c:	bb 27       	eor	r27, r27
    9b2e:	4a 30       	cpi	r20, 0x0A	; 10
    9b30:	31 f4       	brne	.+12     	; 0x9b3e <__itoa_ncheck+0x12>
    9b32:	99 23       	and	r25, r25
    9b34:	22 f4       	brpl	.+8      	; 0x9b3e <__itoa_ncheck+0x12>
    9b36:	bd e2       	ldi	r27, 0x2D	; 45
    9b38:	90 95       	com	r25
    9b3a:	81 95       	neg	r24
    9b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    9b3e:	0c 94 a2 4d 	jmp	0x9b44	; 0x9b44 <__utoa_common>

00009b42 <__utoa_ncheck>:
    9b42:	bb 27       	eor	r27, r27

00009b44 <__utoa_common>:
    9b44:	fb 01       	movw	r30, r22
    9b46:	55 27       	eor	r21, r21
    9b48:	aa 27       	eor	r26, r26
    9b4a:	88 0f       	add	r24, r24
    9b4c:	99 1f       	adc	r25, r25
    9b4e:	aa 1f       	adc	r26, r26
    9b50:	a4 17       	cp	r26, r20
    9b52:	10 f0       	brcs	.+4      	; 0x9b58 <__utoa_common+0x14>
    9b54:	a4 1b       	sub	r26, r20
    9b56:	83 95       	inc	r24
    9b58:	50 51       	subi	r21, 0x10	; 16
    9b5a:	b9 f7       	brne	.-18     	; 0x9b4a <__utoa_common+0x6>
    9b5c:	a0 5d       	subi	r26, 0xD0	; 208
    9b5e:	aa 33       	cpi	r26, 0x3A	; 58
    9b60:	08 f0       	brcs	.+2      	; 0x9b64 <__utoa_common+0x20>
    9b62:	a9 5d       	subi	r26, 0xD9	; 217
    9b64:	a1 93       	st	Z+, r26
    9b66:	00 97       	sbiw	r24, 0x00	; 0
    9b68:	79 f7       	brne	.-34     	; 0x9b48 <__utoa_common+0x4>
    9b6a:	b1 11       	cpse	r27, r1
    9b6c:	b1 93       	st	Z+, r27
    9b6e:	11 92       	st	Z+, r1
    9b70:	cb 01       	movw	r24, r22
    9b72:	0c 94 ea 4d 	jmp	0x9bd4	; 0x9bd4 <strrev>

00009b76 <__eerd_block_m644pa>:
    9b76:	dc 01       	movw	r26, r24
    9b78:	cb 01       	movw	r24, r22

00009b7a <__eerd_blraw_m644pa>:
    9b7a:	fc 01       	movw	r30, r24
    9b7c:	f9 99       	sbic	0x1f, 1	; 31
    9b7e:	fe cf       	rjmp	.-4      	; 0x9b7c <__eerd_blraw_m644pa+0x2>
    9b80:	06 c0       	rjmp	.+12     	; 0x9b8e <__eerd_blraw_m644pa+0x14>
    9b82:	f2 bd       	out	0x22, r31	; 34
    9b84:	e1 bd       	out	0x21, r30	; 33
    9b86:	f8 9a       	sbi	0x1f, 0	; 31
    9b88:	31 96       	adiw	r30, 0x01	; 1
    9b8a:	00 b4       	in	r0, 0x20	; 32
    9b8c:	0d 92       	st	X+, r0
    9b8e:	41 50       	subi	r20, 0x01	; 1
    9b90:	50 40       	sbci	r21, 0x00	; 0
    9b92:	b8 f7       	brcc	.-18     	; 0x9b82 <__eerd_blraw_m644pa+0x8>
    9b94:	08 95       	ret

00009b96 <__eerd_byte_m644pa>:
    9b96:	f9 99       	sbic	0x1f, 1	; 31
    9b98:	fe cf       	rjmp	.-4      	; 0x9b96 <__eerd_byte_m644pa>
    9b9a:	92 bd       	out	0x22, r25	; 34
    9b9c:	81 bd       	out	0x21, r24	; 33
    9b9e:	f8 9a       	sbi	0x1f, 0	; 31
    9ba0:	99 27       	eor	r25, r25
    9ba2:	80 b5       	in	r24, 0x20	; 32
    9ba4:	08 95       	ret

00009ba6 <__eewr_byte_m644pa>:
    9ba6:	26 2f       	mov	r18, r22

00009ba8 <__eewr_r18_m644pa>:
    9ba8:	f9 99       	sbic	0x1f, 1	; 31
    9baa:	fe cf       	rjmp	.-4      	; 0x9ba8 <__eewr_r18_m644pa>
    9bac:	1f ba       	out	0x1f, r1	; 31
    9bae:	92 bd       	out	0x22, r25	; 34
    9bb0:	81 bd       	out	0x21, r24	; 33
    9bb2:	20 bd       	out	0x20, r18	; 32
    9bb4:	0f b6       	in	r0, 0x3f	; 63
    9bb6:	f8 94       	cli
    9bb8:	fa 9a       	sbi	0x1f, 2	; 31
    9bba:	f9 9a       	sbi	0x1f, 1	; 31
    9bbc:	0f be       	out	0x3f, r0	; 63
    9bbe:	01 96       	adiw	r24, 0x01	; 1
    9bc0:	08 95       	ret

00009bc2 <memcpy>:
    9bc2:	fb 01       	movw	r30, r22
    9bc4:	dc 01       	movw	r26, r24
    9bc6:	02 c0       	rjmp	.+4      	; 0x9bcc <memcpy+0xa>
    9bc8:	01 90       	ld	r0, Z+
    9bca:	0d 92       	st	X+, r0
    9bcc:	41 50       	subi	r20, 0x01	; 1
    9bce:	50 40       	sbci	r21, 0x00	; 0
    9bd0:	d8 f7       	brcc	.-10     	; 0x9bc8 <memcpy+0x6>
    9bd2:	08 95       	ret

00009bd4 <strrev>:
    9bd4:	dc 01       	movw	r26, r24
    9bd6:	fc 01       	movw	r30, r24
    9bd8:	67 2f       	mov	r22, r23
    9bda:	71 91       	ld	r23, Z+
    9bdc:	77 23       	and	r23, r23
    9bde:	e1 f7       	brne	.-8      	; 0x9bd8 <strrev+0x4>
    9be0:	32 97       	sbiw	r30, 0x02	; 2
    9be2:	04 c0       	rjmp	.+8      	; 0x9bec <strrev+0x18>
    9be4:	7c 91       	ld	r23, X
    9be6:	6d 93       	st	X+, r22
    9be8:	70 83       	st	Z, r23
    9bea:	62 91       	ld	r22, -Z
    9bec:	ae 17       	cp	r26, r30
    9bee:	bf 07       	cpc	r27, r31
    9bf0:	c8 f3       	brcs	.-14     	; 0x9be4 <strrev+0x10>
    9bf2:	08 95       	ret

00009bf4 <_exit>:
    9bf4:	f8 94       	cli

00009bf6 <__stop_program>:
    9bf6:	ff cf       	rjmp	.-2      	; 0x9bf6 <__stop_program>
