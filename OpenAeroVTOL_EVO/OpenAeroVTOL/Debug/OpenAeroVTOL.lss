
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000416  00800100  00009e3e  00009ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035d  00800516  00800516  0000a2e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000a2e8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006a8  00000000  00000000  0000a318  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00015803  00000000  00000000  0000a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000398f  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004410  00000000  00000000  00023b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001520  00000000  00000000  00027f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000029e3  00000000  00000000  00029484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000096be  00000000  00000000  0002be67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000580  00000000  00000000  00035525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__ctors_end>
       4:	0c 94 4c 2f 	jmp	0x5e98	; 0x5e98 <__vector_1>
       8:	0c 94 14 2f 	jmp	0x5e28	; 0x5e28 <__vector_2>
       c:	0c 94 ff 2f 	jmp	0x5ffe	; 0x5ffe <__vector_3>
      10:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      14:	0c 94 be 2f 	jmp	0x5f7c	; 0x5f7c <__vector_5>
      18:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      1c:	0c 94 85 2f 	jmp	0x5f0a	; 0x5f0a <__vector_7>
      20:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      24:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      28:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      2c:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      30:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      34:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      38:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      3c:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      40:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      44:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      48:	0c 94 fd 2e 	jmp	0x5dfa	; 0x5dfa <__vector_18>
      4c:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      50:	0c 94 bb 30 	jmp	0x6176	; 0x6176 <__vector_20>
      54:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      58:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      5c:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      60:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      64:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      68:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      6c:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      70:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      74:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      78:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__bad_interrupt>
      7c:	4a 1e       	adc	r4, r26
      7e:	b3 1e       	adc	r11, r19
      80:	b3 1e       	adc	r11, r19
      82:	5b 1e       	adc	r5, r27
      84:	68 1e       	adc	r6, r24
      86:	72 1e       	adc	r7, r18
      88:	6e 1e       	adc	r6, r30
      8a:	7e 1e       	adc	r7, r30
      8c:	8a 1e       	adc	r8, r26
      8e:	8e 1e       	adc	r8, r30
      90:	9a 1e       	adc	r9, r26
      92:	36 38       	cpi	r19, 0x86	; 134
      94:	38 38       	cpi	r19, 0x88	; 136
      96:	3b 38       	cpi	r19, 0x8B	; 139
      98:	3d 38       	cpi	r19, 0x8D	; 141
      9a:	3f 38       	cpi	r19, 0x8F	; 143
      9c:	41 38       	cpi	r20, 0x81	; 129
      9e:	43 38       	cpi	r20, 0x83	; 131
      a0:	45 38       	cpi	r20, 0x85	; 133
      a2:	48 38       	cpi	r20, 0x88	; 136
      a4:	4a 38       	cpi	r20, 0x8A	; 138
      a6:	4d 38       	cpi	r20, 0x8D	; 141
      a8:	4f 38       	cpi	r20, 0x8F	; 143
      aa:	51 38       	cpi	r21, 0x81	; 129
      ac:	53 38       	cpi	r21, 0x83	; 131
      ae:	55 38       	cpi	r21, 0x85	; 133
      b0:	57 38       	cpi	r21, 0x87	; 135
      b2:	59 38       	cpi	r21, 0x89	; 137
      b4:	5b 38       	cpi	r21, 0x8B	; 139
      b6:	5d 38       	cpi	r21, 0x8D	; 141
      b8:	60 38       	cpi	r22, 0x80	; 128
      ba:	4b 3c       	cpi	r20, 0xCB	; 203
      bc:	2f 3c       	cpi	r18, 0xCF	; 207
      be:	32 3c       	cpi	r19, 0xC2	; 194
      c0:	35 3c       	cpi	r19, 0xC5	; 197
      c2:	38 3c       	cpi	r19, 0xC8	; 200
      c4:	3b 3c       	cpi	r19, 0xCB	; 203
      c6:	3e 3c       	cpi	r19, 0xCE	; 206
      c8:	41 3c       	cpi	r20, 0xC1	; 193
      ca:	44 3c       	cpi	r20, 0xC4	; 196

000000cc <Acc_Pol>:
      cc:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      dc:	ff ff                                               ..

000000de <ACC_RPY_Order>:
      de:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      ee:	02 01                                               ..

000000f0 <FUTABA>:
      f0:	01 02 00 03 04 05 06 07                             ........

000000f8 <JR>:
      f8:	00 01 02 03 04 05 06 07                             ........

00000100 <Trans_Matrix>:
     100:	05 02 06 01 05 08 03 07 05                          .........

00000109 <Wingdings>:
     109:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     119:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     129:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     139:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     149:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     159:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     169:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000173 <Verdana14>:
     173:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     183:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     193:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     1a3:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     1b3:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1c3:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1d3:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1e3:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1f3:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     203:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     213:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     223:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     233:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     243:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     253:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     263:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     273:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     283:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     293:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     2a3:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     2b3:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2c3:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2d3:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2e3:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2f3:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     303:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     313:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     323:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     333:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     343:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     353:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     363:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     373:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     383:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     393:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     3a3:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     3b3:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3c3:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3d3:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3e3:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3f3:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     403:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     413:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     423:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     433:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     443:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     453:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     463:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     473:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     483:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     493:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     4a3:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     4b3:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4c3:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4d3:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4e3:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4f3:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     503:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     513:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     523:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     533:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     543:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     553:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     563:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     573:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     583:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     593:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     5a3:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     5b3:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5c3:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5d3:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5e3:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5f3:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     603:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     613:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     623:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     633:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     643:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     653:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     663:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     673:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     683:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     693:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     6a3:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     6b3:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6c3:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6d3:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6e3:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6f3:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     703:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     713:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     723:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     733:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     743:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     753:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     763:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     773:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     783:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     793:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     7a3:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     7b3:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7c3:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7d3:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7e3:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7f3:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     803:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     813:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     823:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     833:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     843:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     853:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     863:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     873:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     883:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     893:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     8a3:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     8b3:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8c3:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8d3:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8e3:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8f3:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     903:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     913:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     923:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     933:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     943:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     953:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     963:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     973:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     983:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     993:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     9a3:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     9b3:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9c3:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9d3:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9e3:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9f3:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     a03:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     a13:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a21 <Verdana8>:
     a21:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a31:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a41:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a51:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a61:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a71:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a81:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a91:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     aa1:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     ab1:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     ac1:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     ad1:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     ae1:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     af1:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     b01:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     b11:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b21:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b31:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b41:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b51:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b61:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b71:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b81:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b91:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     ba1:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     bb1:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bc1:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bd1:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     be1:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bf1:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     c01:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     c11:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c21:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c31:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c41:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c51:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c61:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c71:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c81:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c91:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     ca1:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     cb1:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cc1:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     cd1:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     ce1:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cf1:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     d01:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     d11:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d21:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d31:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d41:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d51:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d61:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d71:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d81:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d91:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     da1:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     db1:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dc1:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dd1:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     de1:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     df1:	01                                                  .

00000df2 <lcd_commmands>:
     df2:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000e00 <pagemap>:
     e00:	07 06 05 04 03 02 01 00                             ........

00000e08 <text_menu>:
     e08:	01 16 f9 10 f4 10 ef 10 ea 10 e5 10 e0 10 db 10     ................
     e18:	d6 10 6e 18 66 18 6c 18 6a 18 68 18 61 18 5c 18     ..n.f.l.j.h.a.\.
     e28:	57 18 52 18 74 12 94 12 8f 12 89 12 c6 15 78 18     W.R.t.........x.
     e38:	70 18 d0 16 ed 16 e8 16 e2 16 de 16 da 16 fe 10     p...............
     e48:	da 12 d1 12 e2 12 ca 12 c5 12 1f 11 1a 11 15 11     ................
     e58:	10 11 0b 11 05 11 ff 10 b1 12 fe 10 0e 13 06 13     ................
     e68:	1d 15 18 15 15 15 0b 15 01 15 61 11 59 11 54 11     ..........a.Y.T.
     e78:	f9 12 f4 12 eb 12 4a 12 d5 16 3e 12 b5 15 b1 15     ......J...>.....
     e88:	ab 15 a2 15 9b 15 fe 10 01 16 fe 15 79 11 80 11     ............y...
     e98:	6f 11 fe 10 fe 10 a1 12 9a 12 41 18 2f 18 1c 18     o.........A./...
     ea8:	0a 18 f4 17 e5 17 d1 17 bd 17 af 17 a0 17 91 17     ................
     eb8:	82 17 73 17 64 17 55 17 46 17 32 17 19 17 00 17     ..s.d.U.F.2.....
     ec8:	f2 16 fe 10 1f 11 1a 11 30 11 35 11 3a 11 3f 11     ........0.5.:.?.
     ed8:	b1 12 e2 12 da 12 d1 12 ca 12 c5 12 c0 12 bb 12     ................
     ee8:	b6 12 b1 12 aa 12 a4 12 92 15 8b 15 7d 12 67 11     ............}.g.
     ef8:	54 11 06 12 fa 11 fe 10 b7 11 ae 11 a5 11 a1 11     T...............
     f08:	98 11 90 11 fe 10 fe 10 fe 10 7d 18 81 12 1f 12     ..........}.....
     f18:	11 12 0c 12 f2 11 e7 11 fe 10 89 11 80 11 fe 10     ................
     f28:	fe 10 fe 10 e8 16 e2 16 de 16 f5 15 55 15 eb 15     ............U...
     f38:	e0 15 d1 15 c6 15 ba 15 fe 10 fe 10 7e 15 74 15     ............~.t.
     f48:	6c 15 5f 15 28 15 23 11 4b 15 41 15 35 15 20 15     l._.(.#.K.A.5. .
     f58:	fe 10 fe 10 bc 16 b4 16 a6 16 99 16 8b 16 80 16     ................
     f68:	77 16 6e 16 5f 16 51 16 42 16 36 16 2f 16 28 16     w.n._.Q.B.6./.(.
     f78:	1b 16 0f 16 05 16 c4 16 fe 10 fe 10 f9 14 ee 14     ................
     f88:	dd 14 d0 14 c5 14 b5 14 a5 14 96 14 86 14 76 14     ..............v.
     f98:	66 14 56 14 46 14 36 14 28 14 1a 14 0b 14 fc 13     f.V.F.6.(.......
     fa8:	ef 13 e2 13 d6 13 ca 13 be 13 b1 13 a7 13 9d 13     ................
     fb8:	90 13 85 13 78 13 6d 13 60 13 85 13 53 13 6d 13     ....x.m.`...S.m.
     fc8:	fe 10 fe 10 0e 13 06 13 00 13 fe 10 e2 11 dd 11     ................
     fd8:	d8 11 d3 11 ce 11 c9 11 c4 11 bf 11 e2 12 da 12     ................
     fe8:	d1 12 ca 12 c5 12 c0 12 bb 12 b6 12 4a 13 40 13     ............J.@.
     ff8:	38 13 30 13 27 13 1f 13 16 13 b1 12 0e 13 06 13     8.0.'...........
    1008:	00 13 fe 10 fe 10 35 12 2c 12 6a 12 64 12 58 12     ......5.,.j.d.X.
    1018:	99 18 93 18 f5 15 8a 18 88 18 86 18 4f 11 4b 11     ............O.K.
    1028:	44 11 c9 10 c2 10 b8 10 d0 10 b0 10 fe 10 fe 10     D...............
    1038:	4c 18 96 10 89 10 fe 10 82 10 74 10 63 10 56 10     L.........t.c.V.
    1048:	fe 10 fe 10 fe 10 50 10                             ......P.

00001050 <ERROR_MSG_0>:
    1050:	43 6c 65 61 72 00                                   Clear.

00001056 <ERROR_3>:
    1056:	44 69 73 61 72 6d 20 74 69 6d 65 72 00              Disarm timer.

00001063 <ERROR_2>:
    1063:	4e 6f 20 73 69 67 6e 61 6c 20 64 69 73 61 72 6d     No signal disarm
	...

00001074 <ERROR_1>:
    1074:	4d 61 6e 75 61 6c 20 64 69 73 61 72 6d 00           Manual disarm.

00001082 <ERROR_0>:
    1082:	52 65 62 6f 6f 74 00                                Reboot.

00001089 <WARNING_1>:
    1089:	52 45 4d 4f 56 45 20 50 52 4f 50 53 00              REMOVE PROPS.

00001096 <WARNING_0>:
    1096:	57 41 52 4e 49 4e 47 20 2d 20 45 72 61 73 65 73     WARNING - Erases
    10a6:	20 73 65 74 74 69 6e 67 73 00                        settings.

000010b0 <PRESET_4>:
    10b0:	4f 70 74 69 6f 6e 73 00                             Options.

000010b8 <PRESET_3>:
    10b8:	54 72 69 63 6f 70 74 65 72 00                       Tricopter.

000010c2 <PRESET_2>:
    10c2:	51 75 61 64 20 50 00                                Quad P.

000010c9 <PRESET_1>:
    10c9:	51 75 61 64 20 58 00                                Quad X.

000010d0 <PRESET_0>:
    10d0:	42 6c 61 6e 6b 00                                   Blank.

000010d6 <VBAT39>:
    10d6:	33 2e 39 56 00                                      3.9V.

000010db <VBAT38>:
    10db:	33 2e 38 56 00                                      3.8V.

000010e0 <VBAT37>:
    10e0:	33 2e 37 56 00                                      3.7V.

000010e5 <VBAT36>:
    10e5:	33 2e 36 56 00                                      3.6V.

000010ea <VBAT35>:
    10ea:	33 2e 35 56 00                                      3.5V.

000010ef <VBAT34>:
    10ef:	33 2e 34 56 00                                      3.4V.

000010f4 <VBAT33>:
    10f4:	33 2e 33 56 00                                      3.3V.

000010f9 <VBAT32>:
    10f9:	33 2e 32 56 00                                      3.2V.

000010fe <Dummy0>:
	...

000010ff <MPU6050LPF7>:
    10ff:	32 36 30 48 7a 00                                   260Hz.

00001105 <MPU6050LPF6>:
    1105:	31 38 34 48 7a 00                                   184Hz.

0000110b <MPU6050LPF5>:
    110b:	39 34 48 7a 00                                      94Hz.

00001110 <MPU6050LPF4>:
    1110:	34 34 48 7a 00                                      44Hz.

00001115 <MPU6050LPF3>:
    1115:	32 31 48 7a 00                                      21Hz.

0000111a <MPU6050LPF2>:
    111a:	31 30 48 7a 00                                      10Hz.

0000111f <MPU6050LPF1>:
    111f:	35 48 7a 00                                         5Hz.

00001123 <GeneralText10>:
    1123:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001130 <SWLPF4>:
    1130:	31 37 48 7a 00                                      17Hz.

00001135 <SWLPF3>:
    1135:	32 37 48 7a 00                                      27Hz.

0000113a <SWLPF2>:
    113a:	33 38 48 7a 00                                      38Hz.

0000113f <SWLPF1>:
    113f:	36 37 48 7a 00                                      67Hz.

00001144 <Random12>:
    1144:	73 69 67 6e 61 6c 00                                signal.

0000114b <Random11>:
    114b:	6c 6f 77 00                                         low.

0000114f <Random10>:
    114f:	68 69 67 68 00                                      high.

00001154 <Random1>:
    1154:	48 69 67 68 00                                      High.

00001159 <Safety2>:
    1159:	41 72 6d 61 62 6c 65 00                             Armable.

00001161 <Safety1>:
    1161:	41 72 6d 65 64 00                                   Armed.

00001167 <GeneralText5>:
    1167:	53 79 6e 63 20 52 43 00                             Sync RC.

0000116f <MixerItem16>:
    116f:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

00001179 <MixerItem15>:
    1179:	53 63 61 6c 65 64 00                                Scaled.

00001180 <MixerItem12>:
    1180:	52 65 76 65 72 73 65 64 00                          Reversed.

00001189 <MixerItem11>:
    1189:	4e 6f 72 6d 61 6c 00                                Normal.

00001190 <MixerMenuItem7>:
    1190:	50 69 74 63 68 55 70 00                             PitchUp.

00001198 <MixerMenuItem6>:
    1198:	53 69 64 65 77 61 79 73 00                          Sideways.

000011a1 <MixerMenuItem5>:
    11a1:	41 66 74 00                                         Aft.

000011a5 <MixerMenuItem4>:
    11a5:	49 6e 76 65 72 74 65 64 00                          Inverted.

000011ae <MixerMenuItem3>:
    11ae:	56 65 72 74 69 63 61 6c 00                          Vertical.

000011b7 <MixerMenuItem2>:
    11b7:	46 6f 72 77 61 72 64 00                             Forward.

000011bf <MOUT8>:
    11bf:	4f 55 54 38 00                                      OUT8.

000011c4 <MOUT7>:
    11c4:	4f 55 54 37 00                                      OUT7.

000011c9 <MOUT6>:
    11c9:	4f 55 54 36 00                                      OUT6.

000011ce <MOUT5>:
    11ce:	4f 55 54 35 00                                      OUT5.

000011d3 <MOUT4>:
    11d3:	4f 55 54 34 00                                      OUT4.

000011d8 <MOUT3>:
    11d8:	4f 55 54 33 00                                      OUT3.

000011dd <MOUT2>:
    11dd:	4f 55 54 32 00                                      OUT2.

000011e2 <MOUT1>:
    11e2:	4f 55 54 31 00                                      OUT1.

000011e7 <Status5>:
    11e7:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

000011f2 <Status4>:
    11f2:	28 41 72 6d 65 64 29 00                             (Armed).

000011fa <Status2>:
    11fa:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

00001206 <Status0>:
    1206:	50 72 65 73 73 00                                   Press.

0000120c <WizardText2>:
    120c:	44 6f 6e 65 00                                      Done.

00001211 <WizardText1>:
    1211:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

0000121f <WizardText0>:
    121f:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

0000122c <PText6>:
    122c:	73 65 74 74 69 6e 67 73 00                          settings.

00001235 <PText5>:
    1235:	55 70 64 61 74 69 6e 67 00                          Updating.

0000123e <PText4>:
    123e:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

0000124a <PText3>:
    124a:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

00001258 <PText2>:
    1258:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

00001264 <PText1>:
    1264:	52 65 73 65 74 00                                   Reset.

0000126a <PText0>:
    126a:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

00001274 <Disarmed>:
    1274:	44 69 73 61 72 6d 65 64 00                          Disarmed.

0000127d <ErrorText10>:
    127d:	4c 6f 77 00                                         Low.

00001281 <Status3>:
    1281:	42 61 74 74 65 72 79 00                             Battery.

00001289 <ErrorText7>:
    1289:	4d 6f 64 65 6c 00                                   Model.

0000128f <ErrorText6>:
    128f:	4c 6f 73 74 00                                      Lost.

00001294 <ErrorText5>:
    1294:	45 72 72 6f 72 00                                   Error.

0000129a <ErrorText4>:
    129a:	53 69 67 6e 61 6c 00                                Signal.

000012a1 <ErrorText3>:
    12a1:	4e 6f 00                                            No.

000012a4 <ChannelRef12>:
    12a4:	45 6c 65 76 2e 00                                   Elev..

000012aa <ChannelRef10>:
    12aa:	54 68 72 6f 74 2e 00                                Throt..

000012b1 <ChannelRef8>:
    12b1:	4e 6f 6e 65 00                                      None.

000012b6 <ChannelRef7>:
    12b6:	41 55 58 33 00                                      AUX3.

000012bb <ChannelRef6>:
    12bb:	41 55 58 32 00                                      AUX2.

000012c0 <ChannelRef5>:
    12c0:	41 55 58 31 00                                      AUX1.

000012c5 <ChannelRef4>:
    12c5:	47 65 61 72 00                                      Gear.

000012ca <ChannelRef3>:
    12ca:	52 75 64 64 65 72 00                                Rudder.

000012d1 <ChannelRef2>:
    12d1:	45 6c 65 76 61 74 6f 72 00                          Elevator.

000012da <ChannelRef1>:
    12da:	41 69 6c 65 72 6f 6e 00                             Aileron.

000012e2 <ChannelRef0>:
    12e2:	54 68 72 6f 74 74 6c 65 00                          Throttle.

000012eb <MixerItem62>:
    12eb:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

000012f4 <MixerItem61>:
    12f4:	53 69 6e 65 00                                      Sine.

000012f9 <MixerItem60>:
    12f9:	4c 69 6e 65 61 72 00                                Linear.

00001300 <MixerItem49>:
    1300:	4d 6f 74 6f 72 00                                   Motor.

00001306 <MixerItem41>:
    1306:	44 2e 53 65 72 76 6f 00                             D.Servo.

0000130e <MixerItem40>:
    130e:	41 2e 53 65 72 76 6f 00                             A.Servo.

00001316 <MixerItem81>:
    1316:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

0000131f <MixerItem80>:
    131f:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

00001327 <MixerItem74>:
    1327:	41 63 63 50 69 74 63 68 00                          AccPitch.

00001330 <MixerItem73>:
    1330:	41 63 63 52 6f 6c 6c 00                             AccRoll.

00001338 <MixerItem72>:
    1338:	47 79 72 6f 59 61 77 00                             GyroYaw.

00001340 <MixerItem71>:
    1340:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

0000134a <MixerItem70>:
    134a:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001353 <MixerItem31>:
    1353:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

00001360 <MixerItem21>:
    1360:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

0000136d <MixerItem30>:
    136d:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

00001378 <MixerItem29>:
    1378:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

00001385 <MixerItem2>:
    1385:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

00001390 <MixerItem0>:
    1390:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

0000139d <MixerItem43>:
    139d:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

000013a7 <MixerItem42>:
    13a7:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

000013b1 <MixerItem28>:
    13b1:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

000013be <MixerItem3>:
    13be:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

000013ca <MixerItem27>:
    13ca:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

000013d6 <MixerItem7>:
    13d6:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

000013e2 <MixerItem26>:
    13e2:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

000013ef <MixerItem6>:
    13ef:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

000013fc <MixerItem25>:
    13fc:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

0000140b <MixerItem5>:
    140b:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

0000141a <MixerItem24>:
    141a:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

00001428 <MixerItem4>:
    1428:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

00001436 <MixerItem56>:
    1436:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

00001446 <MixerItem53>:
    1446:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001456 <MixerItem55>:
    1456:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

00001466 <MixerItem52>:
    1466:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

00001476 <MixerItem54>:
    1476:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

00001486 <MixerItem51>:
    1486:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

00001496 <Mixeritem50>:
    1496:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

000014a5 <MixerItem33>:
    14a5:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

000014b5 <MixerItem23>:
    14b5:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

000014c5 <MixerItem34>:
    14c5:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

000014d0 <MixerItem35>:
    14d0:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

000014dd <MixerItem36>:
    14dd:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

000014ee <MixerItem20>:
    14ee:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

000014f9 <MixerItem1>:
    14f9:	44 65 76 69 63 65 3a 00                             Device:.

00001501 <P5text>:
    1501:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

0000150b <P4text>:
    150b:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

00001515 <P3text>:
    1515:	50 32 00                                            P2.

00001518 <P2text>:
    1518:	50 31 2e 6e 00                                      P1.n.

0000151d <P1text>:
    151d:	50 31 00                                            P1.

00001520 <GeneralText20>:
    1520:	50 72 65 73 65 74 3a 00                             Preset:.

00001528 <BattMenuItem2>:
    1528:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

00001535 <GeneralText7>:
    1535:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

00001541 <GeneralText16>:
    1541:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

0000154b <GeneralText6>:
    154b:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

00001555 <GeneralText3>:
    1555:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

0000155f <GeneralText2>:
    155f:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

0000156c <AutoMenuItem2>:
    156c:	53 61 66 65 74 79 3a 00                             Safety:.

00001574 <Contrast>:
    1574:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

0000157e <MixerMenuItem0>:
    157e:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

0000158b <RCMenuItem7>:
    158b:	46 75 74 61 62 61 00                                Futaba.

00001592 <RCMenuItem6>:
    1592:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

0000159b <RXMode4>:
    159b:	58 74 72 65 6d 65 00                                Xtreme.

000015a2 <RXMode3>:
    15a2:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

000015ab <RXMode2>:
    15ab:	53 2d 42 75 73 00                                   S-Bus.

000015b1 <RXMode1>:
    15b1:	50 57 4d 00                                         PWM.

000015b5 <RXMode0>:
    15b5:	43 50 50 4d 00                                      CPPM.

000015ba <Transition_P1n>:
    15ba:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

000015c6 <Transition>:
    15c6:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

000015d1 <RCMenuItem2>:
    15d1:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

000015e0 <RCMenuItem0>:
    15e0:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

000015eb <RCMenuItem20>:
    15eb:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

000015f5 <RCMenuItem1>:
    15f5:	52 58 20 74 79 70 65 3a 00                          RX type:.

000015fe <AutoMenuItem15>:
    15fe:	4f 4e 00                                            ON.

00001601 <AutoMenuItem11>:
    1601:	4f 46 46 00                                         OFF.

00001605 <StabMenuItem30>:
    1605:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

0000160f <StabMenuItem9>:
    160f:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

0000161b <StabMenuItem12>:
    161b:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

00001628 <StabMenuItem8>:
    1628:	59 61 77 20 49 3a 00                                Yaw I:.

0000162f <StabMenuItem7>:
    162f:	59 61 77 20 50 3a 00                                Yaw P:.

00001636 <AutoMenuItem8>:
    1636:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

00001642 <AutoMenuItem21>:
    1642:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

00001651 <StabMenuItem6>:
    1651:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

0000165f <StabMenuItem11>:
    165f:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

0000166e <StabMenuItem5>:
    166e:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00001677 <AutoMenuItem4>:
    1677:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

00001680 <AutoMenuItem7>:
    1680:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

0000168b <AutoMenuItem20>:
    168b:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

00001699 <StabMenuItem3>:
    1699:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

000016a6 <StabMenuItem10>:
    16a6:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

000016b4 <StabMenuItem2>:
    16b4:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

000016bc <AutoMenuItem1>:
    16bc:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

000016c4 <StabMenuItem13>:
    16c4:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

000016d0 <SensorMenuItem2>:
    16d0:	49 6e 76 2e 00                                      Inv..

000016d5 <SensorMenuItem1>:
    16d5:	43 61 6c 2e 00                                      Cal..

000016da <PText19>:
    16da:	41 63 63 00                                         Acc.

000016de <PText18>:
    16de:	59 61 77 00                                         Yaw.

000016e2 <PText17>:
    16e2:	50 69 74 63 68 00                                   Pitch.

000016e8 <PText16>:
    16e8:	52 6f 6c 6c 00                                      Roll.

000016ed <PText15>:
    16ed:	47 79 72 6f 00                                      Gyro.

000016f2 <MainMenuItem24>:
    16f2:	32 30 2e 20 45 72 72 6f 72 20 6c 6f 67 00           20. Error log.

00001700 <MainMenuItem23>:
    1700:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    1710:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001719 <MainMenuItem22>:
    1719:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    1729:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001732 <MainMenuItem20>:
    1732:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    1742:	69 6f 6e 00                                         ion.

00001746 <MainMenuItem18>:
    1746:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

00001755 <MainMenuItem17>:
    1755:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

00001764 <MainMenuItem16>:
    1764:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

00001773 <MainMenuItem15>:
    1773:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

00001782 <MainMenuItem14>:
    1782:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

00001791 <MainMenuItem13>:
    1791:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

000017a0 <MainMenuItem12>:
    17a0:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

000017af <MainMenuItem11>:
    17af:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

000017bd <MainMenuItem3>:
    17bd:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    17cd:	65 20 32 00                                         e 2.

000017d1 <MainMenuItem2>:
    17d1:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    17e1:	65 20 31 00                                         e 1.

000017e5 <MainMenuItem10>:
    17e5:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

000017f4 <MainMenuItem8>:
    17f4:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    1804:	61 74 69 6f 6e 00                                   ation.

0000180a <MainMenuItem7>:
    180a:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    181a:	79 00                                               y.

0000181c <MainMenuItem9>:
    181c:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    182c:	74 73 00                                            ts.

0000182f <MainMenuItem1>:
    182f:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    183f:	70 00                                               p.

00001841 <MainMenuItem0>:
    1841:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

0000184c <MenuFrame9>:
    184c:	41 62 6f 72 74 00                                   Abort.

00001852 <MenuFrame8>:
    1852:	53 61 76 65 00                                      Save.

00001857 <MenuFrame7>:
    1857:	44 65 66 2e 00                                      Def..

0000185c <MenuFrame6>:
    185c:	42 61 63 6b 00                                      Back.

00001861 <MenuFrame5>:
    1861:	4d 65 6e 75 00                                      Menu.

00001866 <MenuFrame1>:
    1866:	45 00                                               E.

00001868 <MenuFrame4>:
    1868:	44 00                                               D.

0000186a <MenuFrame3>:
    186a:	43 00                                               C.

0000186c <MenuFrame2>:
    186c:	42 00                                               B.

0000186e <MenuFrame0>:
    186e:	41 00                                               A.

00001870 <StatusText9>:
    1870:	4a 69 74 74 65 72 3a 00                             Jitter:.

00001878 <StatusText8>:
    1878:	50 6f 73 3a 00                                      Pos:.

0000187d <StatusText7>:
    187d:	42 61 74 74 65 72 79 3a 00                          Battery:.

00001886 <StatusText5>:
    1886:	30 00                                               0.

00001888 <StatusText4>:
    1888:	2e 00                                               ..

0000188a <StatusText3>:
    188a:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

00001893 <StatusText1>:
    1893:	4d 6f 64 65 3a 00                                   Mode:.

00001899 <StatusText0>:
    1899:	56 65 72 73 69 6f 6e 3a 20 20 20 31 2e 31 20 42     Version:   1.1 B
    18a9:	31 38 00                                            18.

000018ac <Gyro_Pol>:
    18ac:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    18bc:	01 01                                               ..

000018be <Gyro_RPY_Order>:
    18be:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    18ce:	01 00                                               ..

000018d0 <LPF_lookup_HS>:
    18d0:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    18e0:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

000018f0 <LPF_lookup>:
    18f0:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    1900:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

00001910 <lines>:
    1910:	03 0f 1b 27                                         ...'

00001914 <flight_menu_ranges>:
    1914:	00 7f 01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00     ....(......}....
    1924:	04 01 00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f     ................
    1934:	01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00 04 01     ..(......}......
    1944:	00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f 01 00     ................
    1954:	3c 00 7f 01 00 28 00 7d 01 00 19 00 04 01 00 02     <....(.}........
    1964:	81 7f 01 00 00 00 7f 01 00 32                       .........2

0000196e <FlightMenuText>:
	...

00001992 <mixer_menu_ranges>:
    1992:	00 02 01 01 02 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    19a2:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    19b2:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    19c2:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    19d2:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    19e2:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    19f2:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    1a02:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    1a12:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    1a22:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    1a32:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

00001a3c <MixerMenuText>:
    1a3c:	e2 00 00 00 00 00 00 00 00 00 00 00 00 00 38 00     ..............8.
	...
    1a58:	44 00 44 00 44 00 44 00 44 00 44 00 44 00 44 00     D.D.D.D.D.D.D.D.
    1a68:	44 00 44 00 44 00 44 00 ee 00 00 00 ee 00 00 00     D.D.D.D.........
    1a78:	ee 00 00 00 ee 00 00 00                             ........

00001a80 <servo_menu_ranges>:
    1a80:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

00001a8f <ServoMenuText>:
    1a8f:	8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00     ................
	...

00001abf <rc_menu_ranges>:
    1abf:	00 04 01 01 02 00 02 01 01 02 00 04 01 01 04 00     ................
    1acf:	01 01 01 00 00 07 01 01 04 00 28 01 00 00 01 63     ..........(....c
    1adf:	01 00 32 00 00 00 00 00 00 00 00 00 00 00 00 00     ..2.............
    1aef:	00 00 00 05 01 01 00 1c 32 01 00 24 00 01 01 01     ........2..$....
    1aff:	01 00 7f 01 00 1e 00 08 01 01 00 00 06 01 01 03     ................
    1b0f:	00 07 01 01 02 00 07 01 01 07 01 0a 01 00 07 00     ................
    1b1f:	03 01 04 00                                         ....

00001b23 <RCMenuText>:
    1b23:	3e 00 76 00 69 00 74 00 69 00 00 00 00 00 00 00     >.v.i.t.i.......
    1b33:	00 00 00 00 7c 00 00 00 35 00 00 00 00 00 25 00     ....|...5.....%.
    1b43:	25 00 25 00 00 00 11 01                             %.%.....

00001b4b <SQRTSIN>:
    1b4b:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1b5b:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1b6b:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1b7b:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1b8b:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1b9b:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1bab:	64 64 64 64 64                                      ddddd

00001bb0 <SIN>:
    1bb0:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1bc0:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1bd0:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1be0:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1bf0:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1c00:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1c10:	64 64 64 64 64 00                                   ddddd.

00001c16 <__ctors_end>:
    1c16:	11 24       	eor	r1, r1
    1c18:	1f be       	out	0x3f, r1	; 63
    1c1a:	cf ef       	ldi	r28, 0xFF	; 255
    1c1c:	d0 e1       	ldi	r29, 0x10	; 16
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	cd bf       	out	0x3d, r28	; 61

00001c22 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1c22:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1c24:	88 e1       	ldi	r24, 0x18	; 24
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	80 93 60 00 	sts	0x0060, r24
    1c2e:	10 92 60 00 	sts	0x0060, r1
    1c32:	0f be       	out	0x3f, r0	; 63

00001c34 <__do_copy_data>:
    1c34:	15 e0       	ldi	r17, 0x05	; 5
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b1 e0       	ldi	r27, 0x01	; 1
    1c3a:	ee e3       	ldi	r30, 0x3E	; 62
    1c3c:	fe e9       	ldi	r31, 0x9E	; 158
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <__do_copy_data+0x10>
    1c40:	05 90       	lpm	r0, Z+
    1c42:	0d 92       	st	X+, r0
    1c44:	a6 31       	cpi	r26, 0x16	; 22
    1c46:	b1 07       	cpc	r27, r17
    1c48:	d9 f7       	brne	.-10     	; 0x1c40 <__do_copy_data+0xc>

00001c4a <__do_clear_bss>:
    1c4a:	28 e0       	ldi	r18, 0x08	; 8
    1c4c:	a6 e1       	ldi	r26, 0x16	; 22
    1c4e:	b5 e0       	ldi	r27, 0x05	; 5
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <.do_clear_bss_start>

00001c52 <.do_clear_bss_loop>:
    1c52:	1d 92       	st	X+, r1

00001c54 <.do_clear_bss_start>:
    1c54:	a3 37       	cpi	r26, 0x73	; 115
    1c56:	b2 07       	cpc	r27, r18
    1c58:	e1 f7       	brne	.-8      	; 0x1c52 <.do_clear_bss_loop>
    1c5a:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <main>
    1c5e:	0c 94 1d 4f 	jmp	0x9e3a	; 0x9e3a <_exit>

00001c62 <__bad_interrupt>:
    1c62:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001c66 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1c66:	00 00       	nop
	ret					// 4 (5 cycles)
    1c68:	08 95       	ret

00001c6a <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1c6a:	fd df       	rcall	.-6      	; 0x1c66 <glcd_delay>
	rcall	glcd_delay
    1c6c:	fc df       	rcall	.-8      	; 0x1c66 <glcd_delay>
	rcall	glcd_delay
    1c6e:	fb df       	rcall	.-10     	; 0x1c66 <glcd_delay>
	rcall	glcd_delay
    1c70:	fa df       	rcall	.-12     	; 0x1c66 <glcd_delay>
	ret
    1c72:	08 95       	ret

00001c74 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1c74:	cf 93       	push	r28
	push	XL			//	1
    1c76:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1c78:	a5 e0       	ldi	r26, 0x05	; 5

00001c7a <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1c7a:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1c7c:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1c7e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <VarDelay>
	sbi		BIND		//	2
    1c82:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1c84:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1c86:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <VarDelay>
	dec		XL			//	1
    1c8a:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1c8c:	b1 f7       	brne	.-20     	; 0x1c7a <master_loop>

	pop		XL			//	  1
    1c8e:	af 91       	pop	r26
	pop		YL			//	  1
    1c90:	cf 91       	pop	r28
	ret					//	  4 
    1c92:	08 95       	ret

00001c94 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1c94:	00 c0       	rjmp	.+0      	; 0x1c96 <VarDelay+0x2>
	rjmp .+0			// 2
    1c96:	00 c0       	rjmp	.+0      	; 0x1c98 <VarDelay+0x4>
	rjmp .+0			// 2
    1c98:	00 c0       	rjmp	.+0      	; 0x1c9a <VarDelay+0x6>
	rjmp .+0			// 2
    1c9a:	00 c0       	rjmp	.+0      	; 0x1c9c <VarDelay+0x8>
	rjmp .+0			// 2
    1c9c:	00 c0       	rjmp	.+0      	; 0x1c9e <VarDelay+0xa>
	rjmp .+0			// 2
    1c9e:	00 c0       	rjmp	.+0      	; 0x1ca0 <VarDelay+0xc>
	rjmp .+0			// 2
    1ca0:	00 c0       	rjmp	.+0      	; 0x1ca2 <VarDelay+0xe>
	rjmp .+0			// 2
    1ca2:	00 c0       	rjmp	.+0      	; 0x1ca4 <VarDelay+0x10>
	nop					// 1
    1ca4:	00 00       	nop
	dec 	YL			// 1
    1ca6:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1ca8:	a9 f7       	brne	.-22     	; 0x1c94 <VarDelay>
	ret					//   4 
    1caa:	08 95       	ret

00001cac <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1cac:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1cae:	ef 93       	push	r30
	push	ZH			// 2
    1cb0:	ff 93       	push	r31
	push	XL			// 2
    1cb2:	af 93       	push	r26
	push	XH			// 2
    1cb4:	bf 93       	push	r27
	push	YL			// 2
    1cb6:	cf 93       	push	r28
	push	YH			// 2
    1cb8:	df 93       	push	r29
	push	16			// 2
    1cba:	0f 93       	push	r16
	push	17			// 2
    1cbc:	1f 93       	push	r17
	push	18			// 2
    1cbe:	2f 93       	push	r18
	push	19			// 2
    1cc0:	3f 93       	push	r19
	push	20			// 2
    1cc2:	4f 93       	push	r20
	push	21			// 2
    1cc4:	5f 93       	push	r21
	push	22			// 2
    1cc6:	6f 93       	push	r22
	push	23			// 2
    1cc8:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1cca:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1ccc:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1cce:	8f 93       	push	r24
	push	25			// 2
    1cd0:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1cd2:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1cd4:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1cd6:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1cd8:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1cda:	af 93       	push	r26
	push	XH 			// 2
    1cdc:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1cde:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1ce0:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1ce2:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1ce4:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1ce6:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1ce8:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1cea:	af 93       	push	r26
	push	XH 		
    1cec:	bf 93       	push	r27
	andi	XL,	0x07
    1cee:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1cf0:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1cf2:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1cf4:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1cf6:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1cf8:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1cfa:	af 93       	push	r26
	push	XH 		
    1cfc:	bf 93       	push	r27
	andi	XL,	0x07
    1cfe:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1d00:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1d02:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d04:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1d06:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1d08:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1d0a:	af 93       	push	r26
	push	XH 	
    1d0c:	bf 93       	push	r27
	andi	XL,	0x07
    1d0e:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1d10:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1d12:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d14:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1d16:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1d18:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1d1a:	af 93       	push	r26
	push	XH 	
    1d1c:	bf 93       	push	r27
	andi	XL,	0x07
    1d1e:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1d20:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1d22:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d24:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1d26:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1d28:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1d2a:	af 93       	push	r26
	push	XH 	
    1d2c:	bf 93       	push	r27
	andi	XL,	0x07
    1d2e:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1d30:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1d32:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d34:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1d36:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1d38:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1d3a:	af 93       	push	r26
	push	XH 
    1d3c:	bf 93       	push	r27
	andi	XL,	0x07
    1d3e:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1d40:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1d42:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d44:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1d46:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1d48:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1d4a:	af 93       	push	r26
	push	XH 
    1d4c:	bf 93       	push	r27
	andi	XL,	0x07
    1d4e:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1d50:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1d52:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1d54:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1d58:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1d5a:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1d5c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M2
	mov		r25,r22
    1d60:	96 2f       	mov	r25, r22
	call	DelayHigh
    1d62:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1d66:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1d68:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1d6a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M3
	mov		r25,r21
    1d6e:	95 2f       	mov	r25, r21
	call	DelayHigh
    1d70:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1d74:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1d76:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1d78:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M4
	mov		r25,r20
    1d7c:	94 2f       	mov	r25, r20
	call	DelayHigh
    1d7e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1d82:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1d84:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1d86:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M5
	mov		r25,r19
    1d8a:	93 2f       	mov	r25, r19
	call	DelayHigh
    1d8c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1d90:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1d92:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1d94:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M6
	mov		r25,r18
    1d98:	92 2f       	mov	r25, r18
	call	DelayHigh
    1d9a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1d9e:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1da0:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1da2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M7
	mov		r25,r17
    1da6:	91 2f       	mov	r25, r17
	call	DelayHigh
    1da8:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1dac:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1dae:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1db0:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M8
	mov		r25,r16
    1db4:	90 2f       	mov	r25, r16
	call	DelayHigh
    1db6:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1dba:	f7 fc       	sbrc	r15, 7
	sbi 	M8			// 1
    1dbc:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1dbe:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1dc2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <pwm_delay>
	call    pwm_delay
    1dc6:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <pwm_delay>
	call    pwm_delay
    1dca:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1dce:	bf 91       	pop	r27
	pop		XL
    1dd0:	af 91       	pop	r26
	call	shuffle_8
    1dd2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <shuffle_8>
	mov		r16,XL
    1dd6:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1dd8:	bf 91       	pop	r27
	pop		XL
    1dda:	af 91       	pop	r26
	call	shuffle_8
    1ddc:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <shuffle_8>
	mov		r17,XL
    1de0:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1de2:	bf 91       	pop	r27
	pop		XL
    1de4:	af 91       	pop	r26
	call	shuffle_8
    1de6:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <shuffle_8>
	mov		r18,XL
    1dea:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1dec:	bf 91       	pop	r27
	pop		XL
    1dee:	af 91       	pop	r26
	call	shuffle_8
    1df0:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <shuffle_8>
	mov		r19,XL
    1df4:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1df6:	bf 91       	pop	r27
	pop		XL
    1df8:	af 91       	pop	r26
	call	shuffle_8
    1dfa:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <shuffle_8>
	mov		r20,XL
    1dfe:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1e00:	bf 91       	pop	r27
	pop		XL
    1e02:	af 91       	pop	r26
	call	shuffle_8
    1e04:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <shuffle_8>
	mov		r21,XL
    1e08:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1e0a:	bf 91       	pop	r27
	pop		XL
    1e0c:	af 91       	pop	r26
	call	shuffle_8
    1e0e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <shuffle_8>
	mov		r22,XL
    1e12:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1e14:	bf 91       	pop	r27
	pop		XL
    1e16:	af 91       	pop	r26
	call	shuffle_8
    1e18:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <shuffle_8>
	mov		r23,XL
    1e1c:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    1e1e:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    1e20:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    1e22:	00 24       	eor	r0, r0

00001e24 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1e24:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1e26:	19 f4       	brne	.+6      	; 0x1e2e <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1e28:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1e2a:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <jj1>

00001e2e <j1>:
j1:
	rjmp 	.+0			// 2
    1e2e:	00 c0       	rjmp	.+0      	; 0x1e30 <j1+0x2>
	rjmp 	.+0			// 2
    1e30:	00 c0       	rjmp	.+0      	; 0x1e32 <jj1>

00001e32 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1e32:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1e34:	19 f4       	brne	.+6      	; 0x1e3c <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1e36:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1e38:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <jj2>

00001e3c <j2>:
j2:
	rjmp	.+0
    1e3c:	00 c0       	rjmp	.+0      	; 0x1e3e <j2+0x2>
	rjmp	.+0
    1e3e:	00 c0       	rjmp	.+0      	; 0x1e40 <jj2>

00001e40 <jj2>:
jj2:
	subi	r21,1
    1e40:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1e42:	19 f4       	brne	.+6      	; 0x1e4a <j3>
	cbi 	M3
    1e44:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1e46:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <jj3>

00001e4a <j3>:
j3:
	rjmp	.+0
    1e4a:	00 c0       	rjmp	.+0      	; 0x1e4c <j3+0x2>
	rjmp	.+0
    1e4c:	00 c0       	rjmp	.+0      	; 0x1e4e <jj3>

00001e4e <jj3>:
jj3:
	subi 	r20,1
    1e4e:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1e50:	19 f4       	brne	.+6      	; 0x1e58 <j4>
	cbi 	M4
    1e52:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1e54:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <jj4>

00001e58 <j4>:
j4:
	rjmp 	.+0
    1e58:	00 c0       	rjmp	.+0      	; 0x1e5a <j4+0x2>
	rjmp 	.+0
    1e5a:	00 c0       	rjmp	.+0      	; 0x1e5c <jj4>

00001e5c <jj4>:
jj4:
	subi	r19,1
    1e5c:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1e5e:	19 f4       	brne	.+6      	; 0x1e66 <j5>
	cbi 	M5
    1e60:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1e62:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <jj5>

00001e66 <j5>:
j5:
	rjmp 	.+0
    1e66:	00 c0       	rjmp	.+0      	; 0x1e68 <j5+0x2>
	rjmp 	.+0
    1e68:	00 c0       	rjmp	.+0      	; 0x1e6a <jj5>

00001e6a <jj5>:
jj5:
	subi	r18,1
    1e6a:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1e6c:	19 f4       	brne	.+6      	; 0x1e74 <j6>
	cbi 	M6
    1e6e:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1e70:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <jj6>

00001e74 <j6>:
j6:
	rjmp 	.+0
    1e74:	00 c0       	rjmp	.+0      	; 0x1e76 <j6+0x2>
	rjmp	.+0
    1e76:	00 c0       	rjmp	.+0      	; 0x1e78 <jj6>

00001e78 <jj6>:
jj6:
	subi	r17,1
    1e78:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1e7a:	19 f4       	brne	.+6      	; 0x1e82 <j7>
	cbi 	M7
    1e7c:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1e7e:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <jj7>

00001e82 <j7>:
j7:
	rjmp 	.+0
    1e82:	00 c0       	rjmp	.+0      	; 0x1e84 <j7+0x2>
	rjmp 	.+0
    1e84:	00 c0       	rjmp	.+0      	; 0x1e86 <jj7>

00001e86 <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1e86:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1e88:	19 f4       	brne	.+6      	; 0x1e90 <j8>
	cbi 	M8
    1e8a:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1e8c:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <jj8>

00001e90 <j8>:
j8:
	rjmp 	.+0
    1e90:	00 c0       	rjmp	.+0      	; 0x1e92 <j8+0x2>
	rjmp 	.+0
    1e92:	00 c0       	rjmp	.+0      	; 0x1e94 <jj8>

00001e94 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1e94:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <pad_100_delay>

	subi 	YL,1		// 1
    1e98:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1e9a:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1e9c:	11 f0       	breq	.+4      	; 0x1ea2 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1e9e:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <nloop>

00001ea2 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1ea2:	9f 91       	pop	r25
	pop		24			// 		2
    1ea4:	8f 91       	pop	r24
	pop		23			//		2
    1ea6:	7f 91       	pop	r23
	pop		22			//		2
    1ea8:	6f 91       	pop	r22
	pop		21			//		2
    1eaa:	5f 91       	pop	r21
	pop		20			//		2
    1eac:	4f 91       	pop	r20
	pop		19			//		2
    1eae:	3f 91       	pop	r19
	pop		18			//		2
    1eb0:	2f 91       	pop	r18
	pop		17			//		2
    1eb2:	1f 91       	pop	r17
	pop		16			//		2
    1eb4:	0f 91       	pop	r16
	pop		YH			//		2
    1eb6:	df 91       	pop	r29
	pop		YL			//		2
    1eb8:	cf 91       	pop	r28
	pop		XH			//		2
    1eba:	bf 91       	pop	r27
	pop		XL			//		2
    1ebc:	af 91       	pop	r26
	pop		ZH			// 		2
    1ebe:	ff 91       	pop	r31
	pop		ZL			//		2
    1ec0:	ef 91       	pop	r30

	ret					//		4
    1ec2:	08 95       	ret

00001ec4 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1ec4:	0f 93       	push	r16
	push	17
    1ec6:	1f 93       	push	r17
	push	18
    1ec8:	2f 93       	push	r18

	//ldi 	16,0x34		// 1			Set loop count to 834h or 2100
	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1eca:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1ecc:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1ece:	00 24       	eor	r0, r0

00001ed0 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1ed0:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1ed2:	71 f0       	breq	.+28     	; 0x1ef0 <in1>
	cpi		r24,0x01	; 1
    1ed4:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1ed6:	79 f0       	breq	.+30     	; 0x1ef6 <in2>
	cpi		r24,0x02	; 2
    1ed8:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1eda:	81 f0       	breq	.+32     	; 0x1efc <in3>
	cpi		r24,0x03	; 3
    1edc:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1ede:	89 f0       	breq	.+34     	; 0x1f02 <in4>
	cpi		r24,0x04	; 4
    1ee0:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1ee2:	91 f0       	breq	.+36     	; 0x1f08 <in5>
	cpi		r24,0x05	; 5
    1ee4:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1ee6:	99 f0       	breq	.+38     	; 0x1f0e <in6>
	cpi		r24,0x06	; 6
    1ee8:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1eea:	a1 f0       	breq	.+40     	; 0x1f14 <in7>
	cpi		r24,0x07	; 7
    1eec:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1eee:	a9 f0       	breq	.+42     	; 0x1f1a <in8>

00001ef0 <in1>:

in1:sbi 	M1			// Set output high
    1ef0:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1ef2:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <loopin>

00001ef6 <in2>:
in2:sbi 	M2
    1ef6:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1ef8:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <loopin>

00001efc <in3>:
in3:sbi 	M3	
    1efc:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1efe:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <loopin>

00001f02 <in4>:
in4:sbi 	M4
    1f02:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1f04:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <loopin>

00001f08 <in5>:
in5:sbi 	M5
    1f08:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1f0a:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <loopin>

00001f0e <in6>:
in6:sbi 	M6
    1f0e:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1f10:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <loopin>

00001f14 <in7>:
in7:sbi 	M7
    1f14:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1f16:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <loopin>

00001f1a <in8>:
in8:sbi 	M8
    1f1a:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1f1c:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <loopin>

00001f20 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1f20:	00 c0       	rjmp	.+0      	; 0x1f22 <loopin+0x2>
	rjmp .+0			// 2
    1f22:	00 c0       	rjmp	.+0      	; 0x1f24 <loopin+0x4>
	rjmp .+0			// 2
    1f24:	00 c0       	rjmp	.+0      	; 0x1f26 <loopin+0x6>
	rjmp .+0			// 2
    1f26:	00 c0       	rjmp	.+0      	; 0x1f28 <loopin+0x8>
	rjmp .+0			// 2
    1f28:	00 c0       	rjmp	.+0      	; 0x1f2a <loopin+0xa>
	rjmp .+0			// 2
    1f2a:	00 c0       	rjmp	.+0      	; 0x1f2c <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1f2c:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1f2e:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1f30:	19 f4       	brne	.+6      	; 0x1f38 <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1f32:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1f34:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1f36:	22 b9       	out	0x02, r18	; 2

00001f38 <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1f38:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1f3a:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1f3c:	89 f7       	brne	.-30     	; 0x1f20 <loopin>

	pop		18
    1f3e:	2f 91       	pop	r18
	pop		17			// Restore regs
    1f40:	1f 91       	pop	r17
	pop		16
    1f42:	0f 91       	pop	r16
	ret	
    1f44:	08 95       	ret

00001f46 <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1f46:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1f48:	05 e6       	ldi	r16, 0x65	; 101

00001f4a <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1f4a:	00 c0       	rjmp	.+0      	; 0x1f4c <pwm_loop+0x2>
	rjmp .+0			// 2
    1f4c:	00 c0       	rjmp	.+0      	; 0x1f4e <pwm_loop+0x4>
	rjmp .+0			// 2
    1f4e:	00 c0       	rjmp	.+0      	; 0x1f50 <pwm_loop+0x6>
	subi	r16,1		// 1
    1f50:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1f52:	d9 f7       	brne	.-10     	; 0x1f4a <pwm_loop>

00001f54 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1f54:	0f 91       	pop	r16
	ret					//    4 to return
    1f56:	08 95       	ret

00001f58 <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1f58:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1f5a:	09 e0       	ldi	r16, 0x09	; 9

00001f5c <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1f5c:	00 c0       	rjmp	.+0      	; 0x1f5e <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1f5e:	00 c0       	rjmp	.+0      	; 0x1f60 <pad_100+0x4>
	rjmp .+0			// 2
    1f60:	00 c0       	rjmp	.+0      	; 0x1f62 <pad_100+0x6>

	subi 	16,1		// 1
    1f62:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1f64:	d9 f7       	brne	.-10     	; 0x1f5c <pad_100>

	nop					// 		1		Trim to precisely the right value
    1f66:	00 00       	nop
	rjmp .+0			// 		2
    1f68:	00 c0       	rjmp	.+0      	; 0x1f6a <pad_100+0xe>
	rjmp .+0			// 		2
    1f6a:	00 c0       	rjmp	.+0      	; 0x1f6c <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1f6c:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1f6e:	08 95       	ret

00001f70 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1f70:	00 c0       	rjmp	.+0      	; 0x1f72 <us_delay+0x2>
	rjmp .+0			// 2
    1f72:	00 c0       	rjmp	.+0      	; 0x1f74 <us_delay+0x4>
	rjmp .+0			// 2
    1f74:	00 c0       	rjmp	.+0      	; 0x1f76 <us_delay+0x6>
	rjmp .+0			// 2
    1f76:	00 c0       	rjmp	.+0      	; 0x1f78 <us_delay+0x8>
	ret					// 4 (16 cycles)
    1f78:	08 95       	ret

00001f7a <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1f7a:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1f7c:	a7 95       	ror	r26
	lsr		XH			// 1
    1f7e:	b6 95       	lsr	r27
	ror		XL			// 1
    1f80:	a7 95       	ror	r26
	lsr		XH			// 1
    1f82:	b6 95       	lsr	r27
	ror		XL			// 1
    1f84:	a7 95       	ror	r26
	ret					// 4
    1f86:	08 95       	ret

00001f88 <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1f88:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1f8a:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1f8c:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1f8e:	31 f0       	breq	.+12     	; 0x1f9c <LoopHighOut1>

00001f90 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1f90:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <us_delay>
	dec 	YL			// 		1	1
    1f94:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1f98:	fb cf       	rjmp	.-10     	; 0x1f90 <LoopHigh>

00001f9a <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1f9a:	00 c0       	rjmp	.+0      	; 0x1f9c <LoopHighOut1>

00001f9c <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1f9c:	00 00       	nop
    ret					// 4	4	4
    1f9e:	08 95       	ret

00001fa0 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1fa0:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1fa2:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1fa4:	31 f0       	breq	.+12     	; 0x1fb2 <LoopLowOut1>

00001fa6 <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1fa6:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <us_delay>
	dec 	YL			//		1	1
    1faa:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <LoopLowOut2>
	rjmp	LoopLow		//			2
    1fae:	fb cf       	rjmp	.-10     	; 0x1fa6 <LoopLow>

00001fb0 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1fb0:	00 c0       	rjmp	.+0      	; 0x1fb2 <LoopLowOut1>

00001fb2 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1fb2:	08 95       	ret

00001fb4 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	2c 97       	sbiw	r28, 0x0c	; 12
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1fc8:	26 e0       	ldi	r18, 0x06	; 6
    1fca:	ae 01       	movw	r20, r28
    1fcc:	4f 5f       	subi	r20, 0xFF	; 255
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	6b e3       	ldi	r22, 0x3B	; 59
    1fd2:	80 ed       	ldi	r24, 0xD0	; 208
    1fd4:	0e 94 9f 28 	call	0x513e	; 0x513e <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	98 2f       	mov	r25, r24
    1fde:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1fe0:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1fe2:	82 0f       	add	r24, r18
    1fe4:	91 1d       	adc	r25, r1
    1fe6:	36 e0       	ldi	r19, 0x06	; 6
    1fe8:	95 95       	asr	r25
    1fea:	87 95       	ror	r24
    1fec:	3a 95       	dec	r19
    1fee:	e1 f7       	brne	.-8      	; 0x1fe8 <get_raw_accs+0x34>
    1ff0:	98 87       	std	Y+8, r25	; 0x08
    1ff2:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	98 2f       	mov	r25, r24
    1ffa:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1ffc:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1ffe:	82 0f       	add	r24, r18
    2000:	91 1d       	adc	r25, r1
    2002:	56 e0       	ldi	r21, 0x06	; 6
    2004:	95 95       	asr	r25
    2006:	87 95       	ror	r24
    2008:	5a 95       	dec	r21
    200a:	e1 f7       	brne	.-8      	; 0x2004 <get_raw_accs+0x50>
    200c:	91 95       	neg	r25
    200e:	81 95       	neg	r24
    2010:	91 09       	sbc	r25, r1
    2012:	9a 87       	std	Y+10, r25	; 0x0a
    2014:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    2016:	8d 81       	ldd	r24, Y+5	; 0x05
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	98 2f       	mov	r25, r24
    201c:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    201e:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    2020:	82 0f       	add	r24, r18
    2022:	91 1d       	adc	r25, r1
    2024:	76 e0       	ldi	r23, 0x06	; 6
    2026:	95 95       	asr	r25
    2028:	87 95       	ror	r24
    202a:	7a 95       	dec	r23
    202c:	e1 f7       	brne	.-8      	; 0x2026 <get_raw_accs+0x72>
    202e:	9c 87       	std	Y+12, r25	; 0x0c
    2030:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    2032:	20 91 49 06 	lds	r18, 0x0649
    2036:	ae e3       	ldi	r26, 0x3E	; 62
    2038:	b5 e0       	ldi	r27, 0x05	; 5
    203a:	43 e0       	ldi	r20, 0x03	; 3
    203c:	24 02       	muls	r18, r20
    203e:	90 01       	movw	r18, r0
    2040:	11 24       	eor	r1, r1
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	22 52       	subi	r18, 0x22	; 34
    2048:	3f 4f       	sbci	r19, 0xFF	; 255
    204a:	f9 01       	movw	r30, r18
    204c:	e8 0f       	add	r30, r24
    204e:	f9 1f       	adc	r31, r25
    2050:	e4 91       	lpm	r30, Z
    2052:	ee 0f       	add	r30, r30
    2054:	ff 0b       	sbc	r31, r31
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	50 e0       	ldi	r21, 0x00	; 0
    205a:	4c 0f       	add	r20, r28
    205c:	5d 1f       	adc	r21, r29
    205e:	e4 0f       	add	r30, r20
    2060:	f5 1f       	adc	r31, r21
    2062:	46 81       	ldd	r20, Z+6	; 0x06
    2064:	57 81       	ldd	r21, Z+7	; 0x07
    2066:	4d 93       	st	X+, r20
    2068:	5d 93       	st	X+, r21
    206a:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    206c:	83 30       	cpi	r24, 0x03	; 3
    206e:	91 05       	cpc	r25, r1
    2070:	61 f7       	brne	.-40     	; 0x204a <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    2072:	2c 96       	adiw	r28, 0x0c	; 12
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	08 95       	ret

00002084 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    2084:	1f 93       	push	r17
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    208a:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    208e:	80 91 c8 07 	lds	r24, 0x07C8
    2092:	80 fd       	sbrc	r24, 0
    2094:	05 c0       	rjmp	.+10     	; 0x20a0 <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    2096:	10 92 b0 07 	sts	0x07B0, r1
    209a:	10 92 af 07 	sts	0x07AF, r1
    209e:	0e c0       	rjmp	.+28     	; 0x20bc <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    20a0:	80 91 b1 07 	lds	r24, 0x07B1
    20a4:	90 91 b2 07 	lds	r25, 0x07B2
    20a8:	20 91 b5 07 	lds	r18, 0x07B5
    20ac:	30 91 b6 07 	lds	r19, 0x07B6
    20b0:	82 1b       	sub	r24, r18
    20b2:	93 0b       	sbc	r25, r19
    20b4:	90 93 b0 07 	sts	0x07B0, r25
    20b8:	80 93 af 07 	sts	0x07AF, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    20bc:	20 91 49 06 	lds	r18, 0x0649
    20c0:	cb ea       	ldi	r28, 0xAB	; 171
    20c2:	d7 e0       	ldi	r29, 0x07	; 7
    20c4:	ae e3       	ldi	r26, 0x3E	; 62
    20c6:	b5 e0       	ldi	r27, 0x05	; 5
    20c8:	83 e0       	ldi	r24, 0x03	; 3
    20ca:	28 02       	muls	r18, r24
    20cc:	90 01       	movw	r18, r0
    20ce:	11 24       	eor	r1, r1
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	24 53       	subi	r18, 0x34	; 52
    20d6:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    20d8:	69 91       	ld	r22, Y+
    20da:	79 91       	ld	r23, Y+
    20dc:	f9 01       	movw	r30, r18
    20de:	e8 0f       	add	r30, r24
    20e0:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    20e2:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    20e4:	4d 91       	ld	r20, X+
    20e6:	5c 91       	ld	r21, X
    20e8:	11 97       	sbiw	r26, 0x01	; 1
    20ea:	46 1b       	sub	r20, r22
    20ec:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    20ee:	14 03       	mulsu	r17, r20
    20f0:	b0 01       	movw	r22, r0
    20f2:	15 9f       	mul	r17, r21
    20f4:	70 0d       	add	r23, r0
    20f6:	11 24       	eor	r1, r1
    20f8:	6d 93       	st	X+, r22
    20fa:	7d 93       	st	X+, r23
    20fc:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    20fe:	83 30       	cpi	r24, 0x03	; 3
    2100:	91 05       	cpc	r25, r1
    2102:	51 f7       	brne	.-44     	; 0x20d8 <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    2104:	60 91 b1 07 	lds	r22, 0x07B1
    2108:	70 91 b2 07 	lds	r23, 0x07B2
    210c:	80 91 af 07 	lds	r24, 0x07AF
    2110:	90 91 b0 07 	lds	r25, 0x07B0
    2114:	68 1b       	sub	r22, r24
    2116:	79 0b       	sbc	r23, r25
    2118:	88 27       	eor	r24, r24
    211a:	77 fd       	sbrc	r23, 7
    211c:	80 95       	com	r24
    211e:	98 2f       	mov	r25, r24
    2120:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    2124:	20 91 b1 05 	lds	r18, 0x05B1
    2128:	30 91 b2 05 	lds	r19, 0x05B2
    212c:	40 91 b3 05 	lds	r20, 0x05B3
    2130:	50 91 b4 05 	lds	r21, 0x05B4
    2134:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__addsf3>
    2138:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
    213c:	70 93 17 05 	sts	0x0517, r23
    2140:	60 93 16 05 	sts	0x0516, r22
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	08 95       	ret

0000214c <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	00 d0       	rcall	.+0      	; 0x2154 <CalibrateAcc+0x8>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <CalibrateAcc+0xa>
    2156:	00 d0       	rcall	.+0      	; 0x2158 <CalibrateAcc+0xc>
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    215c:	1a 82       	std	Y+2, r1	; 0x02
    215e:	19 82       	std	Y+1, r1	; 0x01
    2160:	1c 82       	std	Y+4, r1	; 0x04
    2162:	1b 82       	std	Y+3, r1	; 0x03
    2164:	1e 82       	std	Y+6, r1	; 0x06
    2166:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    2168:	81 11       	cpse	r24, r1
    216a:	72 c0       	rjmp	.+228    	; 0x2250 <CalibrateAcc+0x104>
    216c:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    216e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	20 91 3e 05 	lds	r18, 0x053E
    217a:	30 91 3f 05 	lds	r19, 0x053F
    217e:	82 0f       	add	r24, r18
    2180:	93 1f       	adc	r25, r19
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	20 91 40 05 	lds	r18, 0x0540
    218e:	30 91 41 05 	lds	r19, 0x0541
    2192:	82 0f       	add	r24, r18
    2194:	93 1f       	adc	r25, r19
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    219a:	8d 81       	ldd	r24, Y+5	; 0x05
    219c:	9e 81       	ldd	r25, Y+6	; 0x06
    219e:	20 91 42 05 	lds	r18, 0x0542
    21a2:	30 91 43 05 	lds	r19, 0x0543
    21a6:	82 0f       	add	r24, r18
    21a8:	93 1f       	adc	r25, r19
    21aa:	9e 83       	std	Y+6, r25	; 0x06
    21ac:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21ae:	8f e4       	ldi	r24, 0x4F	; 79
    21b0:	93 ec       	ldi	r25, 0xC3	; 195
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <CalibrateAcc+0x66>
    21b6:	00 c0       	rjmp	.+0      	; 0x21b8 <CalibrateAcc+0x6c>
    21b8:	00 00       	nop
    21ba:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    21bc:	c1 f6       	brne	.-80     	; 0x216e <CalibrateAcc+0x22>
    21be:	fe 01       	movw	r30, r28
    21c0:	31 96       	adiw	r30, 0x01	; 1
    21c2:	9e 01       	movw	r18, r28
    21c4:	29 5f       	subi	r18, 0xF9	; 249
    21c6:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    21c8:	80 81       	ld	r24, Z
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	40 96       	adiw	r24, 0x10	; 16
    21ce:	45 e0       	ldi	r20, 0x05	; 5
    21d0:	95 95       	asr	r25
    21d2:	87 95       	ror	r24
    21d4:	4a 95       	dec	r20
    21d6:	e1 f7       	brne	.-8      	; 0x21d0 <CalibrateAcc+0x84>
    21d8:	81 93       	st	Z+, r24
    21da:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    21dc:	e2 17       	cp	r30, r18
    21de:	f3 07       	cpc	r31, r19
    21e0:	99 f7       	brne	.-26     	; 0x21c8 <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	90 93 ac 07 	sts	0x07AC, r25
    21ea:	80 93 ab 07 	sts	0x07AB, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	90 93 ae 07 	sts	0x07AE, r25
    21f6:	80 93 ad 07 	sts	0x07AD, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    21fa:	80 91 49 06 	lds	r24, 0x0649
    21fe:	99 27       	eor	r25, r25
    2200:	87 fd       	sbrc	r24, 7
    2202:	90 95       	com	r25
    2204:	fc 01       	movw	r30, r24
    2206:	ee 0f       	add	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	e8 0f       	add	r30, r24
    220c:	f9 1f       	adc	r31, r25
    220e:	e2 53       	subi	r30, 0x32	; 50
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	44 91       	lpm	r20, Z
    2214:	2d 81       	ldd	r18, Y+5	; 0x05
    2216:	3e 81       	ldd	r19, Y+6	; 0x06
    2218:	42 03       	mulsu	r20, r18
    221a:	c0 01       	movw	r24, r0
    221c:	43 9f       	mul	r20, r19
    221e:	90 0d       	add	r25, r0
    2220:	11 24       	eor	r1, r1
    2222:	90 93 b2 07 	sts	0x07B2, r25
    2226:	80 93 b1 07 	sts	0x07B1, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    222a:	80 91 c8 07 	lds	r24, 0x07C8
    222e:	82 60       	ori	r24, 0x02	; 2
    2230:	80 93 c8 07 	sts	0x07C8, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    2234:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>
		LED1 = 1;
    2238:	2b 9a       	sbi	0x05, 3	; 5
    223a:	9f e7       	ldi	r25, 0x7F	; 127
    223c:	24 e8       	ldi	r18, 0x84	; 132
    223e:	4e e1       	ldi	r20, 0x1E	; 30
    2240:	91 50       	subi	r25, 0x01	; 1
    2242:	20 40       	sbci	r18, 0x00	; 0
    2244:	40 40       	sbci	r20, 0x00	; 0
    2246:	e1 f7       	brne	.-8      	; 0x2240 <CalibrateAcc+0xf4>
    2248:	00 c0       	rjmp	.+0      	; 0x224a <CalibrateAcc+0xfe>
    224a:	00 00       	nop
		_delay_ms(500);
		LED1 = 0;
    224c:	2b 98       	cbi	0x05, 3	; 5
    224e:	76 c0       	rjmp	.+236    	; 0x233c <CalibrateAcc+0x1f0>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    2250:	80 91 c8 07 	lds	r24, 0x07C8
    2254:	81 ff       	sbrs	r24, 1
    2256:	72 c0       	rjmp	.+228    	; 0x233c <CalibrateAcc+0x1f0>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    2258:	10 92 b4 07 	sts	0x07B4, r1
    225c:	10 92 b3 07 	sts	0x07B3, r1
    2260:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    2262:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    2266:	80 91 b3 07 	lds	r24, 0x07B3
    226a:	90 91 b4 07 	lds	r25, 0x07B4
    226e:	20 91 42 05 	lds	r18, 0x0542
    2272:	30 91 43 05 	lds	r19, 0x0543
    2276:	82 0f       	add	r24, r18
    2278:	93 1f       	adc	r25, r19
    227a:	90 93 b4 07 	sts	0x07B4, r25
    227e:	80 93 b3 07 	sts	0x07B3, r24
    2282:	8f e4       	ldi	r24, 0x4F	; 79
    2284:	93 ec       	ldi	r25, 0xC3	; 195
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <CalibrateAcc+0x13a>
    228a:	00 c0       	rjmp	.+0      	; 0x228c <CalibrateAcc+0x140>
    228c:	00 00       	nop
    228e:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    2290:	41 f7       	brne	.-48     	; 0x2262 <CalibrateAcc+0x116>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2292:	80 91 49 06 	lds	r24, 0x0649
    2296:	99 27       	eor	r25, r25
    2298:	87 fd       	sbrc	r24, 7
    229a:	90 95       	com	r25
    229c:	fc 01       	movw	r30, r24
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	e8 0f       	add	r30, r24
    22a4:	f9 1f       	adc	r31, r25
    22a6:	e2 53       	subi	r30, 0x32	; 50
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    22ac:	20 91 b3 07 	lds	r18, 0x07B3
    22b0:	30 91 b4 07 	lds	r19, 0x07B4
    22b4:	20 5f       	subi	r18, 0xF0	; 240
    22b6:	3f 4f       	sbci	r19, 0xFF	; 255
    22b8:	b5 e0       	ldi	r27, 0x05	; 5
    22ba:	35 95       	asr	r19
    22bc:	27 95       	ror	r18
    22be:	ba 95       	dec	r27
    22c0:	e1 f7       	brne	.-8      	; 0x22ba <CalibrateAcc+0x16e>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    22c2:	42 03       	mulsu	r20, r18
    22c4:	c0 01       	movw	r24, r0
    22c6:	43 9f       	mul	r20, r19
    22c8:	90 0d       	add	r25, r0
    22ca:	11 24       	eor	r1, r1
    22cc:	90 93 b4 07 	sts	0x07B4, r25
    22d0:	80 93 b3 07 	sts	0x07B3, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    22d4:	97 ff       	sbrs	r25, 7
    22d6:	32 c0       	rjmp	.+100    	; 0x233c <CalibrateAcc+0x1f0>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    22d8:	20 91 b1 07 	lds	r18, 0x07B1
    22dc:	30 91 b2 07 	lds	r19, 0x07B2
    22e0:	a9 01       	movw	r20, r18
    22e2:	48 1b       	sub	r20, r24
    22e4:	59 0b       	sbc	r21, r25
    22e6:	ca 01       	movw	r24, r20
    22e8:	95 95       	asr	r25
    22ea:	87 95       	ror	r24
    22ec:	90 93 b6 07 	sts	0x07B6, r25
    22f0:	80 93 b5 07 	sts	0x07B5, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    22f4:	28 1b       	sub	r18, r24
    22f6:	39 0b       	sbc	r19, r25
    22f8:	30 93 b0 07 	sts	0x07B0, r19
    22fc:	20 93 af 07 	sts	0x07AF, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    2300:	80 91 c8 07 	lds	r24, 0x07C8
    2304:	81 60       	ori	r24, 0x01	; 1
    2306:	80 93 c8 07 	sts	0x07C8, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    230a:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>
				LED1 = 1;
    230e:	2b 9a       	sbi	0x05, 3	; 5
    2310:	5f e7       	ldi	r21, 0x7F	; 127
    2312:	84 e8       	ldi	r24, 0x84	; 132
    2314:	9e e1       	ldi	r25, 0x1E	; 30
    2316:	51 50       	subi	r21, 0x01	; 1
    2318:	80 40       	sbci	r24, 0x00	; 0
    231a:	90 40       	sbci	r25, 0x00	; 0
    231c:	e1 f7       	brne	.-8      	; 0x2316 <CalibrateAcc+0x1ca>
    231e:	00 c0       	rjmp	.+0      	; 0x2320 <CalibrateAcc+0x1d4>
    2320:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    2322:	2b 98       	cbi	0x05, 3	; 5
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    2324:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
	}
}
    2326:	26 96       	adiw	r28, 0x06	; 6
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	1f 91       	pop	r17
				LED1 = 1;
				_delay_ms(500);
				LED1 = 0;
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    2338:	0c 94 ea 35 	jmp	0x6bd4	; 0x6bd4 <menu_beep>
			}
		}
	}
}
    233c:	26 96       	adiw	r28, 0x06	; 6
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	08 95       	ret

00002350 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	6b e6       	ldi	r22, 0x6B	; 107
    2354:	80 ed       	ldi	r24, 0xD0	; 208
    2356:	0e 94 88 28 	call	0x5110	; 0x5110 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    235a:	48 e0       	ldi	r20, 0x08	; 8
    235c:	6c e1       	ldi	r22, 0x1C	; 28
    235e:	80 ed       	ldi	r24, 0xD0	; 208
    2360:	0c 94 88 28 	jmp	0x5110	; 0x5110 <writeI2Cbyte>

00002364 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    236a:	10 92 7b 00 	sts	0x007B, r1
    236e:	08 95       	ret

00002370 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    2370:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    2374:	86 ec       	ldi	r24, 0xC6	; 198
    2376:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    237a:	80 91 7a 00 	lds	r24, 0x007A
    237e:	86 fd       	sbrc	r24, 6
    2380:	fc cf       	rjmp	.-8      	; 0x237a <read_adc+0xa>
}
    2382:	08 95       	ret

00002384 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    2384:	cf 92       	push	r12
    2386:	df 92       	push	r13
    2388:	ef 92       	push	r14
    238a:	0f 93       	push	r16
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    2390:	cb e0       	ldi	r28, 0x0B	; 11
    2392:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    2394:	1f 9b       	sbis	0x03, 7	; 3
    2396:	7f c0       	rjmp	.+254    	; 0x2496 <Display_balance+0x112>
	{
		// Read accs
		ReadAcc();
    2398:	0e 94 42 10 	call	0x2084	; 0x2084 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	cb 01       	movw	r24, r22
    23a2:	0e 94 00 2b 	call	0x5600	; 0x5600 <imu_update>
    23a6:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    23a8:	20 97       	sbiw	r28, 0x00	; 0
    23aa:	a1 f7       	brne	.-24     	; 0x2394 <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e0       	ldi	r20, 0x00	; 0
    23b2:	52 e4       	ldi	r21, 0x42	; 66
    23b4:	60 91 ad 05 	lds	r22, 0x05AD
    23b8:	70 91 ae 05 	lds	r23, 0x05AE
    23bc:	80 91 af 05 	lds	r24, 0x05AF
    23c0:	90 91 b0 05 	lds	r25, 0x05B0
    23c4:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__addsf3>
    23c8:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
    23cc:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e8       	ldi	r20, 0x80	; 128
    23d4:	52 e4       	ldi	r21, 0x42	; 66
    23d6:	60 91 a9 05 	lds	r22, 0x05A9
    23da:	70 91 aa 05 	lds	r23, 0x05AA
    23de:	80 91 ab 05 	lds	r24, 0x05AB
    23e2:	90 91 ac 05 	lds	r25, 0x05AC
    23e6:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__addsf3>
    23ea:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
    23ee:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    23f0:	d7 fd       	sbrc	r29, 7
    23f2:	06 c0       	rjmp	.+12     	; 0x2400 <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    23f4:	c1 34       	cpi	r28, 0x41	; 65
    23f6:	d1 05       	cpc	r29, r1
    23f8:	2c f0       	brlt	.+10     	; 0x2404 <Display_balance+0x80>
    23fa:	c0 e4       	ldi	r28, 0x40	; 64
    23fc:	d0 e0       	ldi	r29, 0x00	; 0
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    2400:	c0 e0       	ldi	r28, 0x00	; 0
    2402:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    2404:	d7 fc       	sbrc	r13, 7
    2406:	08 c0       	rjmp	.+16     	; 0x2418 <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    2408:	81 e8       	ldi	r24, 0x81	; 129
    240a:	c8 16       	cp	r12, r24
    240c:	d1 04       	cpc	r13, r1
    240e:	34 f0       	brlt	.+12     	; 0x241c <Display_balance+0x98>
    2410:	80 e8       	ldi	r24, 0x80	; 128
    2412:	c8 2e       	mov	r12, r24
    2414:	d1 2c       	mov	r13, r1
    2416:	02 c0       	rjmp	.+4      	; 0x241c <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    2418:	c1 2c       	mov	r12, r1
    241a:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    241c:	27 e3       	ldi	r18, 0x37	; 55
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	42 e0       	ldi	r20, 0x02	; 2
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	69 e0       	ldi	r22, 0x09	; 9
    2426:	71 e0       	ldi	r23, 0x01	; 1
    2428:	8c e0       	ldi	r24, 0x0C	; 12
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    2430:	ee 24       	eor	r14, r14
    2432:	e3 94       	inc	r14
    2434:	00 e4       	ldi	r16, 0x40	; 64
    2436:	20 e8       	ldi	r18, 0x80	; 128
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    2444:	05 e1       	ldi	r16, 0x15	; 21
    2446:	25 e1       	ldi	r18, 0x15	; 21
    2448:	46 e1       	ldi	r20, 0x16	; 22
    244a:	66 e3       	ldi	r22, 0x36	; 54
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    2454:	08 e3       	ldi	r16, 0x38	; 56
    2456:	20 e4       	ldi	r18, 0x40	; 64
    2458:	48 e0       	ldi	r20, 0x08	; 8
    245a:	60 e4       	ldi	r22, 0x40	; 64
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	0e 94 dd 24 	call	0x49ba	; 0x49ba <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    2464:	00 e2       	ldi	r16, 0x20	; 32
    2466:	20 e6       	ldi	r18, 0x60	; 96
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	60 e2       	ldi	r22, 0x20	; 32
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	0e 94 dd 24 	call	0x49ba	; 0x49ba <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    2474:	01 e0       	ldi	r16, 0x01	; 1
    2476:	28 e0       	ldi	r18, 0x08	; 8
    2478:	4c 2f       	mov	r20, r28
    247a:	6c 2d       	mov	r22, r12
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	0e 94 99 25 	call	0x4b32	; 0x4b32 <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
			clear_buffer(buffer);
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
    2494:	7d cf       	rjmp	.-262    	; 0x2390 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	0f 91       	pop	r16
    249c:	ef 90       	pop	r14
    249e:	df 90       	pop	r13
    24a0:	cf 90       	pop	r12
    24a2:	08 95       	ret

000024a4 <add_log>:
// Code
//************************************************************

void add_log(uint8_t error)
{
	Config.Log[Config.log_pointer] = error;
    24a4:	90 91 ca 07 	lds	r25, 0x07CA
    24a8:	e9 2f       	mov	r30, r25
    24aa:	ff 27       	eor	r31, r31
    24ac:	e7 fd       	sbrc	r30, 7
    24ae:	f0 95       	com	r31
    24b0:	e5 53       	subi	r30, 0x35	; 53
    24b2:	f8 4f       	sbci	r31, 0xF8	; 248
    24b4:	80 83       	st	Z, r24
	Config.log_pointer++;
    24b6:	9f 5f       	subi	r25, 0xFF	; 255
	
	if (Config.log_pointer >= (LOGLENGTH-1))
    24b8:	93 31       	cpi	r25, 0x13	; 19
    24ba:	1c f4       	brge	.+6      	; 0x24c2 <add_log+0x1e>
//************************************************************

void add_log(uint8_t error)
{
	Config.Log[Config.log_pointer] = error;
	Config.log_pointer++;
    24bc:	90 93 ca 07 	sts	0x07CA, r25
    24c0:	03 c0       	rjmp	.+6      	; 0x24c8 <add_log+0x24>
	
	if (Config.log_pointer >= (LOGLENGTH-1))
	{
		Config.log_pointer = (LOGLENGTH-1);
    24c2:	83 e1       	ldi	r24, 0x13	; 19
    24c4:	80 93 ca 07 	sts	0x07CA, r24
	}
	
	// Save log and log pointer
	Save_Config_to_EEPROM();
    24c8:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>

000024cc <menu_log>:
}

void menu_log(void)
{
    24cc:	af 92       	push	r10
    24ce:	bf 92       	push	r11
    24d0:	cf 92       	push	r12
    24d2:	df 92       	push	r13
    24d4:	ef 92       	push	r14
    24d6:	ff 92       	push	r15
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
	int8_t	log_start = 0;
    24e0:	b1 2c       	mov	r11, r1
	while(BUTTON1 != 0)
	{
		if (BUTTON4 == 0)
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    24e2:	9b ec       	ldi	r25, 0xCB	; 203
    24e4:	c9 2e       	mov	r12, r25
    24e6:	97 e0       	ldi	r25, 0x07	; 7
    24e8:	d9 2e       	mov	r13, r25
    24ea:	24 e1       	ldi	r18, 0x14	; 20
    24ec:	a2 2e       	mov	r10, r18

void menu_log(void)
{
	int8_t	log_start = 0;
	
	while(BUTTON1 != 0)
    24ee:	1f 9b       	sbis	0x03, 7	; 3
    24f0:	4d c0       	rjmp	.+154    	; 0x258c <menu_log+0xc0>
	{
		if (BUTTON4 == 0)
    24f2:	1c 99       	sbic	0x03, 4	; 3
    24f4:	09 c0       	rjmp	.+18     	; 0x2508 <menu_log+0x3c>
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    24f6:	f6 01       	movw	r30, r12
    24f8:	2a 2d       	mov	r18, r10
    24fa:	11 92       	st	Z+, r1
    24fc:	2a 95       	dec	r18
    24fe:	e9 f7       	brne	.-6      	; 0x24fa <menu_log+0x2e>
			Config.log_pointer = 0;
    2500:	10 92 ca 07 	sts	0x07CA, r1

			// Save log and log pointer
			Save_Config_to_EEPROM();			
    2504:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>
		}
		
		if (BUTTON2 == 0)
    2508:	1e 99       	sbic	0x03, 6	; 3
    250a:	03 c0       	rjmp	.+6      	; 0x2512 <menu_log+0x46>
		{
			log_start--;
    250c:	ba 94       	dec	r11
    250e:	b7 fc       	sbrc	r11, 7
    2510:	b1 2c       	mov	r11, r1
			{
				log_start = 0;
			}
		}

		if (BUTTON3 == 0)
    2512:	1d 99       	sbic	0x03, 5	; 3
    2514:	06 c0       	rjmp	.+12     	; 0x2522 <menu_log+0x56>
		{
			log_start++;
    2516:	b3 94       	inc	r11
			
			if (log_start >= (LOGLENGTH - 5))
    2518:	8e e0       	ldi	r24, 0x0E	; 14
    251a:	8b 15       	cp	r24, r11
    251c:	14 f4       	brge	.+4      	; 0x2522 <menu_log+0x56>
			{
				log_start = 15;
    251e:	8f e0       	ldi	r24, 0x0F	; 15
    2520:	b8 2e       	mov	r11, r24
    2522:	00 e0       	ldi	r16, 0x00	; 0
    2524:	10 e0       	ldi	r17, 0x00	; 0
    2526:	c0 e0       	ldi	r28, 0x00	; 0
    2528:	d0 e0       	ldi	r29, 0x00	; 0
    252a:	eb 2c       	mov	r14, r11
    252c:	ff 24       	eor	r15, r15
    252e:	e7 fc       	sbrc	r14, 7
    2530:	f0 94       	com	r15
    2532:	f7 01       	movw	r30, r14
    2534:	ef 53       	subi	r30, 0x3F	; 63
    2536:	fa 4f       	sbci	r31, 0xFA	; 250
    2538:	7f 01       	movw	r14, r30
    253a:	f7 01       	movw	r30, r14
    253c:	ec 0f       	add	r30, r28
    253e:	fd 1f       	adc	r31, r29
    2540:	e6 5f       	subi	r30, 0xF6	; 246
    2542:	fd 4f       	sbci	r31, 0xFD	; 253
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
    2544:	80 81       	ld	r24, Z
    2546:	99 27       	eor	r25, r25
    2548:	87 fd       	sbrc	r24, 7
    254a:	90 95       	com	r25
    254c:	98 01       	movw	r18, r16
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	61 e2       	ldi	r22, 0x21	; 33
    2554:	7a e0       	ldi	r23, 0x0A	; 10
    2556:	85 5e       	subi	r24, 0xE5	; 229
    2558:	9e 4f       	sbci	r25, 0xFE	; 254
    255a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
    255e:	21 96       	adiw	r28, 0x01	; 1
    2560:	06 5f       	subi	r16, 0xF6	; 246
    2562:	1f 4f       	sbci	r17, 0xFF	; 255
				log_start = 15;
			}
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
    2564:	c5 30       	cpi	r28, 0x05	; 5
    2566:	d1 05       	cpc	r29, r1
    2568:	41 f7       	brne	.-48     	; 0x253a <menu_log+0x6e>
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
		}

		print_menu_frame(LOG);
    256a:	83 e0       	ldi	r24, 0x03	; 3
    256c:	0e 94 2b 33 	call	0x6656	; 0x6656 <print_menu_frame>
		clear_buffer(buffer);
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	91 e0       	ldi	r25, 0x01	; 1
    2574:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
    2578:	ff e7       	ldi	r31, 0x7F	; 127
    257a:	2a e1       	ldi	r18, 0x1A	; 26
    257c:	86 e0       	ldi	r24, 0x06	; 6
    257e:	f1 50       	subi	r31, 0x01	; 1
    2580:	20 40       	sbci	r18, 0x00	; 0
    2582:	80 40       	sbci	r24, 0x00	; 0
    2584:	e1 f7       	brne	.-8      	; 0x257e <menu_log+0xb2>
    2586:	00 c0       	rjmp	.+0      	; 0x2588 <menu_log+0xbc>
    2588:	00 00       	nop
    258a:	b1 cf       	rjmp	.-158    	; 0x24ee <menu_log+0x22>
		
		_delay_ms(100);
	}
}
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	bf 90       	pop	r11
    259e:	af 90       	pop	r10
    25a0:	08 95       	ret

000025a2 <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    25a2:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <init_int>
	
	while(BUTTON1 != 0)
    25a6:	1f 9b       	sbis	0x03, 7	; 3
    25a8:	fa c0       	rjmp	.+500    	; 0x279e <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    25aa:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    25ac:	0e 94 84 49 	call	0x9308	; 0x9308 <CenterSticks>
		}

		RxGetChannels();
    25b0:	0e 94 ef 48 	call	0x91de	; 0x91de <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	61 e2       	ldi	r22, 0x21	; 33
    25be:	7a e0       	ldi	r23, 0x0A	; 10
    25c0:	82 e7       	ldi	r24, 0x72	; 114
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    25c8:	2a e0       	ldi	r18, 0x0A	; 10
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	61 e2       	ldi	r22, 0x21	; 33
    25d2:	7a e0       	ldi	r23, 0x0A	; 10
    25d4:	80 e2       	ldi	r24, 0x20	; 32
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    25dc:	24 e1       	ldi	r18, 0x14	; 20
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	61 e2       	ldi	r22, 0x21	; 33
    25e6:	7a e0       	ldi	r23, 0x0A	; 10
    25e8:	83 e7       	ldi	r24, 0x73	; 115
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    25f0:	2e e1       	ldi	r18, 0x1E	; 30
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	61 e2       	ldi	r22, 0x21	; 33
    25fa:	7a e0       	ldi	r23, 0x0A	; 10
    25fc:	83 e2       	ldi	r24, 0x23	; 35
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	46 e4       	ldi	r20, 0x46	; 70
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	61 e2       	ldi	r22, 0x21	; 33
    260e:	7a e0       	ldi	r23, 0x0A	; 10
    2610:	8d e6       	ldi	r24, 0x6D	; 109
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    2618:	2a e0       	ldi	r18, 0x0A	; 10
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	46 e4       	ldi	r20, 0x46	; 70
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	61 e2       	ldi	r22, 0x21	; 33
    2622:	7a e0       	ldi	r23, 0x0A	; 10
    2624:	8e e6       	ldi	r24, 0x6E	; 110
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    262c:	24 e1       	ldi	r18, 0x14	; 20
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	46 e4       	ldi	r20, 0x46	; 70
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	61 e2       	ldi	r22, 0x21	; 33
    2636:	7a e0       	ldi	r23, 0x0A	; 10
    2638:	8f e6       	ldi	r24, 0x6F	; 111
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    2640:	2e e1       	ldi	r18, 0x1E	; 30
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	46 e4       	ldi	r20, 0x46	; 70
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	61 e2       	ldi	r22, 0x21	; 33
    264a:	7a e0       	ldi	r23, 0x0A	; 10
    264c:	80 e7       	ldi	r24, 0x70	; 112
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    2654:	80 91 4f 08 	lds	r24, 0x084F
    2658:	90 91 50 08 	lds	r25, 0x0850
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    265c:	4a e0       	ldi	r20, 0x0A	; 10
    265e:	6a e6       	ldi	r22, 0x6A	; 106
    2660:	75 e0       	ldi	r23, 0x05	; 5
    2662:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	45 e2       	ldi	r20, 0x25	; 37
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	61 e2       	ldi	r22, 0x21	; 33
    2670:	7a e0       	ldi	r23, 0x0A	; 10
    2672:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    2676:	80 91 53 08 	lds	r24, 0x0853
    267a:	90 91 54 08 	lds	r25, 0x0854
    267e:	4a e0       	ldi	r20, 0x0A	; 10
    2680:	6a e6       	ldi	r22, 0x6A	; 106
    2682:	75 e0       	ldi	r23, 0x05	; 5
    2684:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
    2688:	2a e0       	ldi	r18, 0x0A	; 10
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	45 e2       	ldi	r20, 0x25	; 37
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	61 e2       	ldi	r22, 0x21	; 33
    2692:	7a e0       	ldi	r23, 0x0A	; 10
    2694:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    2698:	80 91 55 08 	lds	r24, 0x0855
    269c:	90 91 56 08 	lds	r25, 0x0856
    26a0:	4a e0       	ldi	r20, 0x0A	; 10
    26a2:	6a e6       	ldi	r22, 0x6A	; 106
    26a4:	75 e0       	ldi	r23, 0x05	; 5
    26a6:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
    26aa:	24 e1       	ldi	r18, 0x14	; 20
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	45 e2       	ldi	r20, 0x25	; 37
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	61 e2       	ldi	r22, 0x21	; 33
    26b4:	7a e0       	ldi	r23, 0x0A	; 10
    26b6:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    26ba:	80 91 57 08 	lds	r24, 0x0857
    26be:	90 91 58 08 	lds	r25, 0x0858
    26c2:	4a e0       	ldi	r20, 0x0A	; 10
    26c4:	6a e6       	ldi	r22, 0x6A	; 106
    26c6:	75 e0       	ldi	r23, 0x05	; 5
    26c8:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
    26cc:	2e e1       	ldi	r18, 0x1E	; 30
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	45 e2       	ldi	r20, 0x25	; 37
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	61 e2       	ldi	r22, 0x21	; 33
    26d6:	7a e0       	ldi	r23, 0x0A	; 10
    26d8:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    26dc:	80 91 59 08 	lds	r24, 0x0859
    26e0:	90 91 5a 08 	lds	r25, 0x085A
    26e4:	4a e0       	ldi	r20, 0x0A	; 10
    26e6:	6a e6       	ldi	r22, 0x6A	; 106
    26e8:	75 e0       	ldi	r23, 0x05	; 5
    26ea:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	44 e6       	ldi	r20, 0x64	; 100
    26f4:	50 e0       	ldi	r21, 0x00	; 0
    26f6:	61 e2       	ldi	r22, 0x21	; 33
    26f8:	7a e0       	ldi	r23, 0x0A	; 10
    26fa:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    26fe:	80 91 5b 08 	lds	r24, 0x085B
    2702:	90 91 5c 08 	lds	r25, 0x085C
    2706:	4a e0       	ldi	r20, 0x0A	; 10
    2708:	6a e6       	ldi	r22, 0x6A	; 106
    270a:	75 e0       	ldi	r23, 0x05	; 5
    270c:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
    2710:	2a e0       	ldi	r18, 0x0A	; 10
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	44 e6       	ldi	r20, 0x64	; 100
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	61 e2       	ldi	r22, 0x21	; 33
    271a:	7a e0       	ldi	r23, 0x0A	; 10
    271c:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    2720:	80 91 5d 08 	lds	r24, 0x085D
    2724:	90 91 5e 08 	lds	r25, 0x085E
    2728:	4a e0       	ldi	r20, 0x0A	; 10
    272a:	6a e6       	ldi	r22, 0x6A	; 106
    272c:	75 e0       	ldi	r23, 0x05	; 5
    272e:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
    2732:	24 e1       	ldi	r18, 0x14	; 20
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	44 e6       	ldi	r20, 0x64	; 100
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	61 e2       	ldi	r22, 0x21	; 33
    273c:	7a e0       	ldi	r23, 0x0A	; 10
    273e:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    2742:	80 91 5f 08 	lds	r24, 0x085F
    2746:	90 91 60 08 	lds	r25, 0x0860
    274a:	4a e0       	ldi	r20, 0x0A	; 10
    274c:	6a e6       	ldi	r22, 0x6A	; 106
    274e:	75 e0       	ldi	r23, 0x05	; 5
    2750:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
    2754:	2e e1       	ldi	r18, 0x1E	; 30
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	44 e6       	ldi	r20, 0x64	; 100
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	61 e2       	ldi	r22, 0x21	; 33
    275e:	7a e0       	ldi	r23, 0x0A	; 10
    2760:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2764:	29 e3       	ldi	r18, 0x39	; 57
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	50 e0       	ldi	r21, 0x00	; 0
    276c:	69 e0       	ldi	r22, 0x09	; 9
    276e:	71 e0       	ldi	r23, 0x01	; 1
    2770:	8c e0       	ldi	r24, 0x0C	; 12
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    2778:	27 e3       	ldi	r18, 0x37	; 55
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	4e e6       	ldi	r20, 0x6E	; 110
    277e:	50 e0       	ldi	r21, 0x00	; 0
    2780:	61 e2       	ldi	r22, 0x21	; 33
    2782:	7a e0       	ldi	r23, 0x0A	; 10
    2784:	8c e3       	ldi	r24, 0x3C	; 60
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	91 e0       	ldi	r25, 0x01	; 1
    2790:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
		clear_buffer(buffer);
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
    279c:	04 cf       	rjmp	.-504    	; 0x25a6 <Display_rcinput+0x4>
	}
}
    279e:	08 95       	ret

000027a0 <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    27a0:	cf 93       	push	r28
	bool	first_time = true;
	
	clear_buffer(buffer);
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	91 e0       	ldi	r25, 0x01	; 1
    27a6:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    27aa:	c1 e0       	ldi	r28, 0x01	; 1
	
	clear_buffer(buffer);
	
	// While BACK not pressed
	while(BUTTON1 != 0)
    27ac:	1f 9b       	sbis	0x03, 7	; 3
    27ae:	e7 c0       	rjmp	.+462    	; 0x297e <Display_sensors+0x1de>
	{
		ReadGyros();
    27b0:	0e 94 10 27 	call	0x4e20	; 0x4e20 <ReadGyros>
		ReadAcc();
    27b4:	0e 94 42 10 	call	0x2084	; 0x2084 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	45 e2       	ldi	r20, 0x25	; 37
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	61 e2       	ldi	r22, 0x21	; 33
    27c2:	7a e0       	ldi	r23, 0x0A	; 10
    27c4:	8a e1       	ldi	r24, 0x1A	; 26
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	4d e4       	ldi	r20, 0x4D	; 77
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	61 e2       	ldi	r22, 0x21	; 33
    27d6:	7a e0       	ldi	r23, 0x0A	; 10
    27d8:	8e e1       	ldi	r24, 0x1E	; 30
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    27e0:	2d e0       	ldi	r18, 0x0D	; 13
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	45 e0       	ldi	r20, 0x05	; 5
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	61 e2       	ldi	r22, 0x21	; 33
    27ea:	7a e0       	ldi	r23, 0x0A	; 10
    27ec:	8b e1       	ldi	r24, 0x1B	; 27
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    27f4:	27 e1       	ldi	r18, 0x17	; 23
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	45 e0       	ldi	r20, 0x05	; 5
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	61 e2       	ldi	r22, 0x21	; 33
    27fe:	7a e0       	ldi	r23, 0x0A	; 10
    2800:	8c e1       	ldi	r24, 0x1C	; 28
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    2808:	21 e2       	ldi	r18, 0x21	; 33
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	45 e0       	ldi	r20, 0x05	; 5
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	61 e2       	ldi	r22, 0x21	; 33
    2812:	7a e0       	ldi	r23, 0x0A	; 10
    2814:	8d e1       	ldi	r24, 0x1D	; 29
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
    281c:	4a e0       	ldi	r20, 0x0A	; 10
    281e:	6a e6       	ldi	r22, 0x6A	; 106
    2820:	75 e0       	ldi	r23, 0x05	; 5
    2822:	80 91 83 05 	lds	r24, 0x0583
    2826:	90 91 84 05 	lds	r25, 0x0584
    282a:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    282e:	2d e0       	ldi	r18, 0x0D	; 13
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	48 e2       	ldi	r20, 0x28	; 40
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	61 e2       	ldi	r22, 0x21	; 33
    2838:	7a e0       	ldi	r23, 0x0A	; 10
    283a:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
    283e:	4a e0       	ldi	r20, 0x0A	; 10
    2840:	6a e6       	ldi	r22, 0x6A	; 106
    2842:	75 e0       	ldi	r23, 0x05	; 5
    2844:	80 91 85 05 	lds	r24, 0x0585
    2848:	90 91 86 05 	lds	r25, 0x0586
    284c:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    2850:	27 e1       	ldi	r18, 0x17	; 23
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	48 e2       	ldi	r20, 0x28	; 40
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	61 e2       	ldi	r22, 0x21	; 33
    285a:	7a e0       	ldi	r23, 0x0A	; 10
    285c:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
    2860:	4a e0       	ldi	r20, 0x0A	; 10
    2862:	6a e6       	ldi	r22, 0x6A	; 106
    2864:	75 e0       	ldi	r23, 0x05	; 5
    2866:	80 91 87 05 	lds	r24, 0x0587
    286a:	90 91 88 05 	lds	r25, 0x0588
    286e:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2872:	21 e2       	ldi	r18, 0x21	; 33
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	48 e2       	ldi	r20, 0x28	; 40
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	61 e2       	ldi	r22, 0x21	; 33
    287c:	7a e0       	ldi	r23, 0x0A	; 10
    287e:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
    2882:	4a e0       	ldi	r20, 0x0A	; 10
    2884:	6a e6       	ldi	r22, 0x6A	; 106
    2886:	75 e0       	ldi	r23, 0x05	; 5
    2888:	80 91 3e 05 	lds	r24, 0x053E
    288c:	90 91 3f 05 	lds	r25, 0x053F
    2890:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    2894:	2d e0       	ldi	r18, 0x0D	; 13
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e5       	ldi	r20, 0x50	; 80
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	61 e2       	ldi	r22, 0x21	; 33
    289e:	7a e0       	ldi	r23, 0x0A	; 10
    28a0:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
    28a4:	4a e0       	ldi	r20, 0x0A	; 10
    28a6:	6a e6       	ldi	r22, 0x6A	; 106
    28a8:	75 e0       	ldi	r23, 0x05	; 5
    28aa:	80 91 40 05 	lds	r24, 0x0540
    28ae:	90 91 41 05 	lds	r25, 0x0541
    28b2:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    28b6:	27 e1       	ldi	r18, 0x17	; 23
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e5       	ldi	r20, 0x50	; 80
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	61 e2       	ldi	r22, 0x21	; 33
    28c0:	7a e0       	ldi	r23, 0x0A	; 10
    28c2:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
    28c6:	4a e0       	ldi	r20, 0x0A	; 10
    28c8:	6a e6       	ldi	r22, 0x6A	; 106
    28ca:	75 e0       	ldi	r23, 0x05	; 5
    28cc:	80 91 42 05 	lds	r24, 0x0542
    28d0:	90 91 43 05 	lds	r25, 0x0543
    28d4:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    28d8:	21 e2       	ldi	r18, 0x21	; 33
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e5       	ldi	r20, 0x50	; 80
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	61 e2       	ldi	r22, 0x21	; 33
    28e2:	7a e0       	ldi	r23, 0x0A	; 10
    28e4:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    28e8:	29 e3       	ldi	r18, 0x39	; 57
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	69 e0       	ldi	r22, 0x09	; 9
    28f2:	71 e0       	ldi	r23, 0x01	; 1
    28f4:	8c e0       	ldi	r24, 0x0C	; 12
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    28fc:	27 e3       	ldi	r18, 0x37	; 55
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4c e6       	ldi	r20, 0x6C	; 108
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	61 e2       	ldi	r22, 0x21	; 33
    2906:	7a e0       	ldi	r23, 0x0A	; 10
    2908:	8c e3       	ldi	r24, 0x3C	; 60
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    2910:	27 e3       	ldi	r18, 0x37	; 55
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4b e4       	ldi	r20, 0x4B	; 75
    2916:	50 e0       	ldi	r21, 0x00	; 0
    2918:	61 e2       	ldi	r22, 0x21	; 33
    291a:	7a e0       	ldi	r23, 0x0A	; 10
    291c:	89 e1       	ldi	r24, 0x19	; 25
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	91 e0       	ldi	r25, 0x01	; 1
    2928:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
		clear_buffer(buffer);
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	91 e0       	ldi	r25, 0x01	; 1
    2930:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
	
		if (first_time)
    2934:	c1 11       	cpse	r28, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    2936:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    293a:	1c 99       	sbic	0x03, 4	; 3
    293c:	10 c0       	rjmp	.+32     	; 0x295e <Display_sensors+0x1be>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    293e:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <Wait_BUTTON4>
    2942:	2f e3       	ldi	r18, 0x3F	; 63
    2944:	82 e4       	ldi	r24, 0x42	; 66
    2946:	9f e0       	ldi	r25, 0x0F	; 15
    2948:	21 50       	subi	r18, 0x01	; 1
    294a:	80 40       	sbci	r24, 0x00	; 0
    294c:	90 40       	sbci	r25, 0x00	; 0
    294e:	e1 f7       	brne	.-8      	; 0x2948 <Display_sensors+0x1a8>
    2950:	00 c0       	rjmp	.+0      	; 0x2952 <Display_sensors+0x1b2>
    2952:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    2954:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	0e 94 a6 10 	call	0x214c	; 0x214c <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    295e:	1d 99       	sbic	0x03, 5	; 3
    2960:	0c c0       	rjmp	.+24     	; 0x297a <Display_sensors+0x1da>
    2962:	2f e3       	ldi	r18, 0x3F	; 63
    2964:	82 e4       	ldi	r24, 0x42	; 66
    2966:	9f e0       	ldi	r25, 0x0F	; 15
    2968:	21 50       	subi	r18, 0x01	; 1
    296a:	80 40       	sbci	r24, 0x00	; 0
    296c:	90 40       	sbci	r25, 0x00	; 0
    296e:	e1 f7       	brne	.-8      	; 0x2968 <Display_sensors+0x1c8>
    2970:	00 c0       	rjmp	.+0      	; 0x2972 <Display_sensors+0x1d2>
    2972:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	0e 94 a6 10 	call	0x214c	; 0x214c <CalibrateAcc>
    297a:	c0 e0       	ldi	r28, 0x00	; 0
    297c:	17 cf       	rjmp	.-466    	; 0x27ac <Display_sensors+0xc>
		}		
	}
}
    297e:	cf 91       	pop	r28
    2980:	08 95       	ret

00002982 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2982:	bf 92       	push	r11
    2984:	cf 92       	push	r12
    2986:	df 92       	push	r13
    2988:	ef 92       	push	r14
    298a:	ff 92       	push	r15
    298c:	0f 93       	push	r16
    298e:	1f 93       	push	r17
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	00 d0       	rcall	.+0      	; 0x2996 <Display_status+0x14>
    2996:	00 d0       	rcall	.+0      	; 0x2998 <Display_status+0x16>
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;
	//uint16_t x_text = 0;

	clear_buffer(buffer);
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	50 e0       	ldi	r21, 0x00	; 0
    29ac:	61 e2       	ldi	r22, 0x21	; 33
    29ae:	7a e0       	ldi	r23, 0x0A	; 10
    29b0:	88 e0       	ldi	r24, 0x08	; 8
    29b2:	91 e0       	ldi	r25, 0x01	; 1
    29b4:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    29b8:	2c e0       	ldi	r18, 0x0C	; 12
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	50 e0       	ldi	r21, 0x00	; 0
    29c0:	61 e2       	ldi	r22, 0x21	; 33
    29c2:	7a e0       	ldi	r23, 0x0A	; 10
    29c4:	8a e0       	ldi	r24, 0x0A	; 10
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    29cc:	28 e1       	ldi	r18, 0x18	; 24
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	61 e2       	ldi	r22, 0x21	; 33
    29d6:	7a e0       	ldi	r23, 0x0A	; 10
    29d8:	8b e0       	ldi	r24, 0x0B	; 11
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    29e0:	28 e1       	ldi	r18, 0x18	; 24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	48 e5       	ldi	r20, 0x58	; 88
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	61 e2       	ldi	r22, 0x21	; 33
    29ea:	7a e0       	ldi	r23, 0x0A	; 10
    29ec:	87 e1       	ldi	r24, 0x17	; 23
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    29f4:	2b e3       	ldi	r18, 0x3B	; 59
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	69 e0       	ldi	r22, 0x09	; 9
    29fe:	71 e0       	ldi	r23, 0x01	; 1
    2a00:	89 e0       	ldi	r24, 0x09	; 9
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    2a08:	27 e3       	ldi	r18, 0x37	; 55
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4a e0       	ldi	r20, 0x0A	; 10
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	61 e2       	ldi	r22, 0x21	; 33
    2a12:	7a e0       	ldi	r23, 0x0A	; 10
    2a14:	8e e0       	ldi	r24, 0x0E	; 14
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    2a1c:	40 91 ea 05 	lds	r20, 0x05EA
    2a20:	55 27       	eor	r21, r21
    2a22:	47 fd       	sbrc	r20, 7
    2a24:	50 95       	com	r21
    2a26:	42 5c       	subi	r20, 0xC2	; 194
    2a28:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2a:	0c e0       	ldi	r16, 0x0C	; 12
    2a2c:	2d e2       	ldi	r18, 0x2D	; 45
    2a2e:	61 e0       	ldi	r22, 0x01	; 1
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 c1 33 	call	0x6782	; 0x6782 <print_menu_text>
    2a38:	4a e0       	ldi	r20, 0x0A	; 10
    2a3a:	6a e6       	ldi	r22, 0x6A	; 106
    2a3c:	75 e0       	ldi	r23, 0x05	; 5
    2a3e:	80 91 21 05 	lds	r24, 0x0521
    2a42:	90 91 22 05 	lds	r25, 0x0522
    2a46:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    2a4a:	28 e1       	ldi	r18, 0x18	; 24
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	4e e6       	ldi	r20, 0x6E	; 110
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	61 e2       	ldi	r22, 0x21	; 33
    2a54:	7a e0       	ldi	r23, 0x0A	; 10
    2a56:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    2a5a:	80 91 ea 05 	lds	r24, 0x05EA
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	d9 f4       	brne	.+54     	; 0x2a98 <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    2a62:	2c e0       	ldi	r18, 0x0C	; 12
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4d e4       	ldi	r20, 0x4D	; 77
    2a68:	50 e0       	ldi	r21, 0x00	; 0
    2a6a:	61 e2       	ldi	r22, 0x21	; 33
    2a6c:	7a e0       	ldi	r23, 0x0A	; 10
    2a6e:	88 e1       	ldi	r24, 0x18	; 24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    2a76:	80 91 1c 05 	lds	r24, 0x051C
    2a7a:	90 91 1d 05 	lds	r25, 0x051D
    2a7e:	4a e0       	ldi	r20, 0x0A	; 10
    2a80:	6a e6       	ldi	r22, 0x6A	; 106
    2a82:	75 e0       	ldi	r23, 0x05	; 5
    2a84:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
    2a88:	2c e0       	ldi	r18, 0x0C	; 12
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	4e e6       	ldi	r20, 0x6E	; 110
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	61 e2       	ldi	r22, 0x21	; 33
    2a92:	7a e0       	ldi	r23, 0x0A	; 10
    2a94:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    2a98:	80 91 21 05 	lds	r24, 0x0521
    2a9c:	90 91 22 05 	lds	r25, 0x0522
    2aa0:	18 16       	cp	r1, r24
    2aa2:	19 06       	cpc	r1, r25
    2aa4:	4c f0       	brlt	.+18     	; 0x2ab8 <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    2aa6:	28 e1       	ldi	r18, 0x18	; 24
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	4d e2       	ldi	r20, 0x2D	; 45
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	61 e2       	ldi	r22, 0x21	; 33
    2ab0:	7a e0       	ldi	r23, 0x0A	; 10
    2ab2:	80 e3       	ldi	r24, 0x30	; 48
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	31 c0       	rjmp	.+98     	; 0x2b1a <Display_status+0x198>
	}
	else if (transition >= 100)
    2ab8:	84 36       	cpi	r24, 0x64	; 100
    2aba:	91 05       	cpc	r25, r1
    2abc:	4c f0       	brlt	.+18     	; 0x2ad0 <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    2abe:	28 e1       	ldi	r18, 0x18	; 24
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	4d e2       	ldi	r20, 0x2D	; 45
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	61 e2       	ldi	r22, 0x21	; 33
    2ac8:	7a e0       	ldi	r23, 0x0A	; 10
    2aca:	82 e3       	ldi	r24, 0x32	; 50
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	25 c0       	rjmp	.+74     	; 0x2b1a <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    2ad0:	20 91 f0 05 	lds	r18, 0x05F0
    2ad4:	33 27       	eor	r19, r19
    2ad6:	27 fd       	sbrc	r18, 7
    2ad8:	30 95       	com	r19
    2ada:	82 17       	cp	r24, r18
    2adc:	93 07       	cpc	r25, r19
    2ade:	49 f4       	brne	.+18     	; 0x2af2 <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    2ae0:	28 e1       	ldi	r18, 0x18	; 24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	4d e2       	ldi	r20, 0x2D	; 45
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	61 e2       	ldi	r22, 0x21	; 33
    2aea:	7a e0       	ldi	r23, 0x0A	; 10
    2aec:	81 e3       	ldi	r24, 0x31	; 49
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	14 c0       	rjmp	.+40     	; 0x2b1a <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    2af2:	82 17       	cp	r24, r18
    2af4:	93 07       	cpc	r25, r19
    2af6:	4c f4       	brge	.+18     	; 0x2b0a <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    2af8:	28 e1       	ldi	r18, 0x18	; 24
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4d e2       	ldi	r20, 0x2D	; 45
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	61 e2       	ldi	r22, 0x21	; 33
    2b02:	7a e0       	ldi	r23, 0x0A	; 10
    2b04:	83 e3       	ldi	r24, 0x33	; 51
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	08 c0       	rjmp	.+16     	; 0x2b1a <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    2b0a:	28 e1       	ldi	r18, 0x18	; 24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4d e2       	ldi	r20, 0x2D	; 45
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	61 e2       	ldi	r22, 0x21	; 33
    2b14:	7a e0       	ldi	r23, 0x0A	; 10
    2b16:	84 e3       	ldi	r24, 0x34	; 52
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
	}


	// Don't display battery text if there are error messages
	if (General_error == 0)
    2b1e:	80 91 20 05 	lds	r24, 0x0520
    2b22:	81 11       	cpse	r24, r1
    2b24:	85 c0       	rjmp	.+266    	; 0x2c30 <Display_status+0x2ae>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(133,(const unsigned char*)Verdana8,0,36); 	// Battery
    2b26:	24 e2       	ldi	r18, 0x24	; 36
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	50 e0       	ldi	r21, 0x00	; 0
    2b2e:	61 e2       	ldi	r22, 0x21	; 33
    2b30:	7a e0       	ldi	r23, 0x0A	; 10
    2b32:	85 e8       	ldi	r24, 0x85	; 133
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

		vbat_temp = GetVbat();
    2b3a:	0e 94 c4 4b 	call	0x9788	; 0x9788 <GetVbat>
    2b3e:	6c 01       	movw	r12, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    2b40:	64 e6       	ldi	r22, 0x64	; 100
    2b42:	70 e0       	ldi	r23, 0x00	; 0
    2b44:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <__udivmodhi4>
    2b48:	8b 01       	movw	r16, r22
    2b4a:	4a e0       	ldi	r20, 0x0A	; 10
    2b4c:	6a e6       	ldi	r22, 0x6A	; 106
    2b4e:	75 e0       	ldi	r23, 0x05	; 5
    2b50:	c8 01       	movw	r24, r16
    2b52:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    2b56:	ae 01       	movw	r20, r28
    2b58:	4f 5f       	subi	r20, 0xFF	; 255
    2b5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b5c:	61 e2       	ldi	r22, 0x21	; 33
    2b5e:	7a e0       	ldi	r23, 0x0A	; 10
    2b60:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <mugui_text_sizestring>
    2b64:	4a e0       	ldi	r20, 0x0A	; 10
    2b66:	6a e6       	ldi	r22, 0x6A	; 106
    2b68:	75 e0       	ldi	r23, 0x05	; 5
    2b6a:	c8 01       	movw	r24, r16
    2b6c:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    2b70:	24 e2       	ldi	r18, 0x24	; 36
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4d e2       	ldi	r20, 0x2D	; 45
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	61 e2       	ldi	r22, 0x21	; 33
    2b7a:	7a e0       	ldi	r23, 0x0A	; 10
    2b7c:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2b80:	2c e9       	ldi	r18, 0x9C	; 156
    2b82:	20 03       	mulsu	r18, r16
    2b84:	70 01       	movw	r14, r0
    2b86:	21 9f       	mul	r18, r17
    2b88:	f0 0c       	add	r15, r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	ec 0c       	add	r14, r12
    2b8e:	fd 1c       	adc	r15, r13

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2b90:	09 81       	ldd	r16, Y+1	; 0x01
    2b92:	11 27       	eor	r17, r17
    2b94:	07 fd       	sbrc	r16, 7
    2b96:	10 95       	com	r17
    2b98:	03 5d       	subi	r16, 0xD3	; 211
    2b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9c:	24 e2       	ldi	r18, 0x24	; 36
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	a8 01       	movw	r20, r16
    2ba2:	61 e2       	ldi	r22, 0x21	; 33
    2ba4:	7a e0       	ldi	r23, 0x0A	; 10
    2ba6:	8c e0       	ldi	r24, 0x0C	; 12
    2ba8:	91 e0       	ldi	r25, 0x01	; 1
    2baa:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2bae:	ae 01       	movw	r20, r28
    2bb0:	4f 5f       	subi	r20, 0xFF	; 255
    2bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb4:	61 e2       	ldi	r22, 0x21	; 33
    2bb6:	7a e0       	ldi	r23, 0x0A	; 10
    2bb8:	8a e0       	ldi	r24, 0x0A	; 10
    2bba:	95 e0       	ldi	r25, 0x05	; 5
    2bbc:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <mugui_text_sizestring>
		pos3 = size.x;
    2bc0:	c9 80       	ldd	r12, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2bc2:	ae 01       	movw	r20, r28
    2bc4:	4f 5f       	subi	r20, 0xFF	; 255
    2bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc8:	61 e2       	ldi	r22, 0x21	; 33
    2bca:	7a e0       	ldi	r23, 0x0A	; 10
    2bcc:	8c e0       	ldi	r24, 0x0C	; 12
    2bce:	95 e0       	ldi	r25, 0x05	; 5
    2bd0:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <mugui_text_sizestring>
		pos2 = size.x;
    2bd4:	b9 80       	ldd	r11, Y+1	; 0x01
    2bd6:	dd 24       	eor	r13, r13
    2bd8:	c7 fc       	sbrc	r12, 7
    2bda:	d0 94       	com	r13

		if (vbat_temp >= 10)
    2bdc:	8a e0       	ldi	r24, 0x0A	; 10
    2bde:	e8 16       	cp	r14, r24
    2be0:	f1 04       	cpc	r15, r1
    2be2:	40 f0       	brcs	.+16     	; 0x2bf4 <Display_status+0x272>
    2be4:	4a e0       	ldi	r20, 0x0A	; 10
    2be6:	6a e6       	ldi	r22, 0x6A	; 106
    2be8:	75 e0       	ldi	r23, 0x05	; 5
    2bea:	c7 01       	movw	r24, r14
    2bec:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2bf0:	a8 01       	movw	r20, r16
    2bf2:	16 c0       	rjmp	.+44     	; 0x2c20 <Display_status+0x29e>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2bf4:	a8 01       	movw	r20, r16
    2bf6:	4c 0d       	add	r20, r12
    2bf8:	5d 1d       	adc	r21, r13
    2bfa:	24 e2       	ldi	r18, 0x24	; 36
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	61 e2       	ldi	r22, 0x21	; 33
    2c00:	7a e0       	ldi	r23, 0x0A	; 10
    2c02:	8d e0       	ldi	r24, 0x0D	; 13
    2c04:	91 e0       	ldi	r25, 0x01	; 1
    2c06:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
    2c0a:	4a e0       	ldi	r20, 0x0A	; 10
    2c0c:	6a e6       	ldi	r22, 0x6A	; 106
    2c0e:	75 e0       	ldi	r23, 0x05	; 5
    2c10:	c7 01       	movw	r24, r14
    2c12:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2c16:	a8 01       	movw	r20, r16
    2c18:	4b 0d       	add	r20, r11
    2c1a:	51 1d       	adc	r21, r1
    2c1c:	b7 fc       	sbrc	r11, 7
    2c1e:	5a 95       	dec	r21
    2c20:	4c 0d       	add	r20, r12
    2c22:	5d 1d       	adc	r21, r13
    2c24:	24 e2       	ldi	r18, 0x24	; 36
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	61 e2       	ldi	r22, 0x21	; 33
    2c2a:	7a e0       	ldi	r23, 0x0A	; 10
    2c2c:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
		}
	}
	
	// Display error messages
	if (General_error != 0)
    2c30:	80 91 20 05 	lds	r24, 0x0520
    2c34:	88 23       	and	r24, r24
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <Display_status+0x2b8>
    2c38:	53 c0       	rjmp	.+166    	; 0x2ce0 <Display_status+0x35e>
	{
		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    2c3a:	80 91 20 05 	lds	r24, 0x0520
    2c3e:	83 ff       	sbrs	r24, 3
    2c40:	13 c0       	rjmp	.+38     	; 0x2c68 <Display_status+0x2e6>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    2c42:	25 e2       	ldi	r18, 0x25	; 37
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	4f e0       	ldi	r20, 0x0F	; 15
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	63 e7       	ldi	r22, 0x73	; 115
    2c4c:	71 e0       	ldi	r23, 0x01	; 1
    2c4e:	86 e8       	ldi	r24, 0x86	; 134
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    2c56:	25 e2       	ldi	r18, 0x25	; 37
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4f e4       	ldi	r20, 0x4F	; 79
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	63 e7       	ldi	r22, 0x73	; 115
    2c60:	71 e0       	ldi	r23, 0x01	; 1
    2c62:	8f e0       	ldi	r24, 0x0F	; 15
    2c64:	91 e0       	ldi	r25, 0x01	; 1
    2c66:	3a c0       	rjmp	.+116    	; 0x2cdc <Display_status+0x35a>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    2c68:	80 91 20 05 	lds	r24, 0x0520
    2c6c:	81 ff       	sbrs	r24, 1
    2c6e:	13 c0       	rjmp	.+38     	; 0x2c96 <Display_status+0x314>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    2c70:	25 e2       	ldi	r18, 0x25	; 37
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	4e e1       	ldi	r20, 0x1E	; 30
    2c76:	50 e0       	ldi	r21, 0x00	; 0
    2c78:	63 e7       	ldi	r22, 0x73	; 115
    2c7a:	71 e0       	ldi	r23, 0x01	; 1
    2c7c:	8b e4       	ldi	r24, 0x4B	; 75
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    2c84:	25 e2       	ldi	r18, 0x25	; 37
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	47 e3       	ldi	r20, 0x37	; 55
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    2c8c:	63 e7       	ldi	r22, 0x73	; 115
    2c8e:	71 e0       	ldi	r23, 0x01	; 1
    2c90:	80 e1       	ldi	r24, 0x10	; 16
    2c92:	91 e0       	ldi	r25, 0x01	; 1
    2c94:	23 c0       	rjmp	.+70     	; 0x2cdc <Display_status+0x35a>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    2c96:	80 91 20 05 	lds	r24, 0x0520
    2c9a:	80 ff       	sbrs	r24, 0
    2c9c:	13 c0       	rjmp	.+38     	; 0x2cc4 <Display_status+0x342>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    2c9e:	25 e2       	ldi	r18, 0x25	; 37
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	4b e0       	ldi	r20, 0x0B	; 11
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	63 e7       	ldi	r22, 0x73	; 115
    2ca8:	71 e0       	ldi	r23, 0x01	; 1
    2caa:	89 e6       	ldi	r24, 0x69	; 105
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    2cb2:	25 e2       	ldi	r18, 0x25	; 37
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	42 e5       	ldi	r20, 0x52	; 82
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	63 e7       	ldi	r22, 0x73	; 115
    2cbc:	71 e0       	ldi	r23, 0x01	; 1
    2cbe:	8e e0       	ldi	r24, 0x0E	; 14
    2cc0:	91 e0       	ldi	r25, 0x01	; 1
    2cc2:	0c c0       	rjmp	.+24     	; 0x2cdc <Display_status+0x35a>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2cc4:	80 91 20 05 	lds	r24, 0x0520
    2cc8:	82 ff       	sbrs	r24, 2
    2cca:	0a c0       	rjmp	.+20     	; 0x2ce0 <Display_status+0x35e>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    2ccc:	25 e2       	ldi	r18, 0x25	; 37
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	49 e1       	ldi	r20, 0x19	; 25
    2cd2:	50 e0       	ldi	r21, 0x00	; 0
    2cd4:	63 e7       	ldi	r22, 0x73	; 115
    2cd6:	71 e0       	ldi	r23, 0x01	; 1
    2cd8:	82 e1       	ldi	r24, 0x12	; 18
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	91 e0       	ldi	r25, 0x01	; 1
    2ce4:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
	clear_buffer(buffer);
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
}
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	ff 90       	pop	r15
    2d02:	ef 90       	pop	r14
    2d04:	df 90       	pop	r13
    2d06:	cf 90       	pop	r12
    2d08:	bf 90       	pop	r11
    2d0a:	08 95       	ret

00002d0c <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2d0c:	af 92       	push	r10
    2d0e:	bf 92       	push	r11
    2d10:	cf 92       	push	r12
    2d12:	df 92       	push	r13
    2d14:	ef 92       	push	r14
    2d16:	ff 92       	push	r15
    2d18:	0f 93       	push	r16
    2d1a:	1f 93       	push	r17
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2d20:	d0 90 f1 05 	lds	r13, 0x05F1
	temp_elevator = Config.ElevatorPol;
    2d24:	f0 90 f2 05 	lds	r15, 0x05F2
	temp_rudder = Config.RudderPol;
    2d28:	a0 90 c9 07 	lds	r10, 0x07C9

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2d2c:	10 92 f1 05 	sts	0x05F1, r1
	Config.ElevatorPol =  NORMAL;
    2d30:	10 92 f2 05 	sts	0x05F2, r1
	Config.RudderPol = NORMAL;
    2d34:	10 92 c9 07 	sts	0x07C9, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2d38:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2d3a:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2d3c:	1f 9b       	sbis	0x03, 7	; 3
    2d3e:	d2 c0       	rjmp	.+420    	; 0x2ee4 <Display_sticks+0x1d8>
    2d40:	c1 11       	cpse	r28, r1
    2d42:	d2 c0       	rjmp	.+420    	; 0x2ee8 <Display_sticks+0x1dc>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	91 e0       	ldi	r25, 0x01	; 1
    2d48:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
    2d4c:	92 e0       	ldi	r25, 0x02	; 2
    2d4e:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2d50:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2d52:	61 e1       	ldi	r22, 0x11	; 17
    2d54:	61 0f       	add	r22, r17
    2d56:	ee 24       	eor	r14, r14
    2d58:	e3 94       	inc	r14
    2d5a:	08 e2       	ldi	r16, 0x28	; 40
    2d5c:	28 e2       	ldi	r18, 0x28	; 40
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	91 e0       	ldi	r25, 0x01	; 1
    2d64:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2d68:	86 e2       	ldi	r24, 0x26	; 38
    2d6a:	b8 2e       	mov	r11, r24
    2d6c:	b1 0e       	add	r11, r17
    2d6e:	20 e3       	ldi	r18, 0x30	; 48
    2d70:	21 0f       	add	r18, r17
    2d72:	03 e0       	ldi	r16, 0x03	; 3
    2d74:	44 e1       	ldi	r20, 0x14	; 20
    2d76:	6b 2d       	mov	r22, r11
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	91 e0       	ldi	r25, 0x01	; 1
    2d7c:	0e 94 dd 24 	call	0x49ba	; 0x49ba <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2d80:	28 e3       	ldi	r18, 0x38	; 56
    2d82:	21 0f       	add	r18, r17
    2d84:	69 e2       	ldi	r22, 0x29	; 41
    2d86:	61 0f       	add	r22, r17
    2d88:	06 e0       	ldi	r16, 0x06	; 6
    2d8a:	45 e1       	ldi	r20, 0x15	; 21
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	91 e0       	ldi	r25, 0x01	; 1
    2d90:	0e 94 dd 24 	call	0x49ba	; 0x49ba <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2d94:	01 e0       	ldi	r16, 0x01	; 1
    2d96:	22 e0       	ldi	r18, 0x02	; 2
    2d98:	45 e1       	ldi	r20, 0x15	; 21
    2d9a:	6b 2d       	mov	r22, r11
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	91 e0       	ldi	r25, 0x01	; 1
    2da0:	0e 94 99 25 	call	0x4b32	; 0x4b32 <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2da4:	63 e3       	ldi	r22, 0x33	; 51
    2da6:	61 0f       	add	r22, r17
    2da8:	24 e0       	ldi	r18, 0x04	; 4
    2daa:	45 e0       	ldi	r20, 0x05	; 5
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	91 e0       	ldi	r25, 0x01	; 1
    2db0:	0e 94 99 25 	call	0x4b32	; 0x4b32 <fillcircle>
    2db4:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2db6:	11 f0       	breq	.+4      	; 0x2dbc <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2db8:	14 e3       	ldi	r17, 0x34	; 52
    2dba:	cb cf       	rjmp	.-106    	; 0x2d52 <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2dbc:	29 e3       	ldi	r18, 0x39	; 57
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e0       	ldi	r20, 0x00	; 0
    2dc2:	50 e0       	ldi	r21, 0x00	; 0
    2dc4:	69 e0       	ldi	r22, 0x09	; 9
    2dc6:	71 e0       	ldi	r23, 0x01	; 1
    2dc8:	8c e0       	ldi	r24, 0x0C	; 12
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2dd0:	0e 94 ef 48 	call	0x91de	; 0x91de <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2dd4:	80 91 53 08 	lds	r24, 0x0853
    2dd8:	90 91 54 08 	lds	r25, 0x0854
    2ddc:	80 33       	cpi	r24, 0x30	; 48
    2dde:	98 4f       	sbci	r25, 0xF8	; 248
    2de0:	3c f0       	brlt	.+14     	; 0x2df0 <Display_sticks+0xe4>
    2de2:	80 91 53 08 	lds	r24, 0x0853
    2de6:	90 91 54 08 	lds	r25, 0x0854
    2dea:	81 3d       	cpi	r24, 0xD1	; 209
    2dec:	97 40       	sbci	r25, 0x07	; 7
    2dee:	6c f0       	brlt	.+26     	; 0x2e0a <Display_sticks+0xfe>
    2df0:	d1 11       	cpse	r29, r1
    2df2:	0b c0       	rjmp	.+22     	; 0x2e0a <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2df4:	2b e2       	ldi	r18, 0x2B	; 43
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e1       	ldi	r20, 0x10	; 16
    2dfa:	50 e0       	ldi	r21, 0x00	; 0
    2dfc:	63 e7       	ldi	r22, 0x73	; 115
    2dfe:	71 e0       	ldi	r23, 0x01	; 1
    2e00:	87 e8       	ldi	r24, 0x87	; 135
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
    2e08:	68 c0       	rjmp	.+208    	; 0x2eda <Display_sticks+0x1ce>
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2e0a:	80 91 53 08 	lds	r24, 0x0853
    2e0e:	90 91 54 08 	lds	r25, 0x0854
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
    2e12:	84 3f       	cpi	r24, 0xF4	; 244
    2e14:	91 40       	sbci	r25, 0x01	; 1
    2e16:	3c f4       	brge	.+14     	; 0x2e26 <Display_sticks+0x11a>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2e18:	80 91 53 08 	lds	r24, 0x0853
    2e1c:	90 91 54 08 	lds	r25, 0x0854
    2e20:	8d 30       	cpi	r24, 0x0D	; 13
    2e22:	9e 4f       	sbci	r25, 0xFE	; 254
    2e24:	e4 f4       	brge	.+56     	; 0x2e5e <Display_sticks+0x152>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    2e26:	80 91 55 08 	lds	r24, 0x0855
    2e2a:	90 91 56 08 	lds	r25, 0x0856
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2e2e:	84 3f       	cpi	r24, 0xF4	; 244
    2e30:	91 40       	sbci	r25, 0x01	; 1
    2e32:	3c f4       	brge	.+14     	; 0x2e42 <Display_sticks+0x136>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    2e34:	80 91 55 08 	lds	r24, 0x0855
    2e38:	90 91 56 08 	lds	r25, 0x0856
    2e3c:	8d 30       	cpi	r24, 0x0D	; 13
    2e3e:	9e 4f       	sbci	r25, 0xFE	; 254
    2e40:	74 f4       	brge	.+28     	; 0x2e5e <Display_sticks+0x152>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    2e42:	80 91 57 08 	lds	r24, 0x0857
    2e46:	90 91 58 08 	lds	r25, 0x0858
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    2e4a:	84 3f       	cpi	r24, 0xF4	; 244
    2e4c:	91 40       	sbci	r25, 0x01	; 1
    2e4e:	9c f4       	brge	.+38     	; 0x2e76 <Display_sticks+0x16a>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    2e50:	80 91 57 08 	lds	r24, 0x0857
    2e54:	90 91 58 08 	lds	r25, 0x0858
    2e58:	8d 30       	cpi	r24, 0x0D	; 13
    2e5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e5c:	64 f0       	brlt	.+24     	; 0x2e76 <Display_sticks+0x16a>
					)
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2e5e:	2b e2       	ldi	r18, 0x2B	; 43
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	49 e0       	ldi	r20, 0x09	; 9
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	63 e7       	ldi	r22, 0x73	; 115
    2e68:	71 e0       	ldi	r23, 0x01	; 1
    2e6a:	88 e8       	ldi	r24, 0x88	; 136
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
					)
			{
				CalibrateStarted = true;
    2e72:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2e74:	32 c0       	rjmp	.+100    	; 0x2eda <Display_sticks+0x1ce>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2e76:	80 91 53 08 	lds	r24, 0x0853
    2e7a:	90 91 54 08 	lds	r25, 0x0854
    2e7e:	97 ff       	sbrs	r25, 7
    2e80:	03 c0       	rjmp	.+6      	; 0x2e88 <Display_sticks+0x17c>
				{
					Config.AileronPol = REVERSED;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	80 93 f1 05 	sts	0x05F1, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2e88:	80 91 55 08 	lds	r24, 0x0855
    2e8c:	90 91 56 08 	lds	r25, 0x0856
    2e90:	97 ff       	sbrs	r25, 7
    2e92:	03 c0       	rjmp	.+6      	; 0x2e9a <Display_sticks+0x18e>
				{
					Config.ElevatorPol = REVERSED;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	80 93 f2 05 	sts	0x05F2, r24
				}

				if (RCinputs[RUDDER] < 0)
    2e9a:	80 91 57 08 	lds	r24, 0x0857
    2e9e:	90 91 58 08 	lds	r25, 0x0858
    2ea2:	97 ff       	sbrs	r25, 7
    2ea4:	03 c0       	rjmp	.+6      	; 0x2eac <Display_sticks+0x1a0>
				{
					Config.RudderPol = REVERSED;
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	80 93 c9 07 	sts	0x07C9, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2eac:	80 91 53 08 	lds	r24, 0x0853
    2eb0:	90 91 54 08 	lds	r25, 0x0854
    2eb4:	18 16       	cp	r1, r24
    2eb6:	19 06       	cpc	r1, r25
    2eb8:	84 f4       	brge	.+32     	; 0x2eda <Display_sticks+0x1ce>
    2eba:	80 91 55 08 	lds	r24, 0x0855
    2ebe:	90 91 56 08 	lds	r25, 0x0856
    2ec2:	18 16       	cp	r1, r24
    2ec4:	19 06       	cpc	r1, r25
    2ec6:	4c f4       	brge	.+18     	; 0x2eda <Display_sticks+0x1ce>
    2ec8:	80 91 57 08 	lds	r24, 0x0857
    2ecc:	90 91 58 08 	lds	r25, 0x0858
    2ed0:	c1 e0       	ldi	r28, 0x01	; 1
    2ed2:	18 16       	cp	r1, r24
    2ed4:	19 06       	cpc	r1, r25
    2ed6:	0c f0       	brlt	.+2      	; 0x2eda <Display_sticks+0x1ce>
    2ed8:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	91 e0       	ldi	r25, 0x01	; 1
    2ede:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
    2ee2:	2c cf       	rjmp	.-424    	; 0x2d3c <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2ee4:	cc 23       	and	r28, r28
    2ee6:	39 f1       	breq	.+78     	; 0x2f36 <Display_sticks+0x22a>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2ee8:	2b e2       	ldi	r18, 0x2B	; 43
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	48 e2       	ldi	r20, 0x28	; 40
    2eee:	50 e0       	ldi	r21, 0x00	; 0
    2ef0:	63 e7       	ldi	r22, 0x73	; 115
    2ef2:	71 e0       	ldi	r23, 0x01	; 1
    2ef4:	89 e8       	ldi	r24, 0x89	; 137
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	91 e0       	ldi	r25, 0x01	; 1
    2f00:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
		clear_buffer(buffer);
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
    2f0c:	8f e7       	ldi	r24, 0x7F	; 127
    2f0e:	94 e8       	ldi	r25, 0x84	; 132
    2f10:	2e e1       	ldi	r18, 0x1E	; 30
    2f12:	81 50       	subi	r24, 0x01	; 1
    2f14:	90 40       	sbci	r25, 0x00	; 0
    2f16:	20 40       	sbci	r18, 0x00	; 0
    2f18:	e1 f7       	brne	.-8      	; 0x2f12 <Display_sticks+0x206>
    2f1a:	00 c0       	rjmp	.+0      	; 0x2f1c <Display_sticks+0x210>
    2f1c:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2f1e:	df 91       	pop	r29
    2f20:	cf 91       	pop	r28
    2f22:	1f 91       	pop	r17
    2f24:	0f 91       	pop	r16
    2f26:	ff 90       	pop	r15
    2f28:	ef 90       	pop	r14
    2f2a:	df 90       	pop	r13
    2f2c:	cf 90       	pop	r12
    2f2e:	bf 90       	pop	r11
    2f30:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2f32:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2f36:	d0 92 f1 05 	sts	0x05F1, r13
		Config.ElevatorPol = temp_elevator;
    2f3a:	f0 92 f2 05 	sts	0x05F2, r15
		Config.RudderPol = temp_rudder;
    2f3e:	a0 92 c9 07 	sts	0x07C9, r10
	}
}
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	0f 91       	pop	r16
    2f4a:	ff 90       	pop	r15
    2f4c:	ef 90       	pop	r14
    2f4e:	df 90       	pop	r13
    2f50:	cf 90       	pop	r12
    2f52:	bf 90       	pop	r11
    2f54:	af 90       	pop	r10
    2f56:	08 95       	ret

00002f58 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	1f 92       	push	r1
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2f68:	69 83       	std	Y+1, r22	; 0x01
    2f6a:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <__eerd_byte_m644pa>
    2f6e:	69 81       	ldd	r22, Y+1	; 0x01
    2f70:	86 17       	cp	r24, r22
    2f72:	41 f0       	breq	.+16     	; 0x2f84 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2f74:	c8 01       	movw	r24, r16
	}
}
    2f76:	0f 90       	pop	r0
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2f80:	0c 94 f6 4e 	jmp	0x9dec	; 0x9dec <__eewr_byte_m644pa>
	}
}
    2f84:	0f 90       	pop	r0
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	08 95       	ret

00002f90 <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    2f90:	ef 92       	push	r14
    2f92:	ff 92       	push	r15
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	ec 01       	movw	r28, r24
    2f9e:	8b 01       	movw	r16, r22
    2fa0:	7a 01       	movw	r14, r20
    2fa2:	e8 0e       	add	r14, r24
    2fa4:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2fa6:	ce 15       	cp	r28, r14
    2fa8:	df 05       	cpc	r29, r15
    2faa:	39 f0       	breq	.+14     	; 0x2fba <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2fac:	69 91       	ld	r22, Y+
    2fae:	c8 01       	movw	r24, r16
    2fb0:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <eeprom_write_byte_changed>
		src++;
		dest++;
    2fb4:	0f 5f       	subi	r16, 0xFF	; 255
    2fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb8:	f6 cf       	rjmp	.-20     	; 0x2fa6 <eeprom_write_block_changes+0x16>
	}
}
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	1f 91       	pop	r17
    2fc0:	0f 91       	pop	r16
    2fc2:	ff 90       	pop	r15
    2fc4:	ef 90       	pop	r14
    2fc6:	08 95       	ret

00002fc8 <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2fc8:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2fca:	4e e1       	ldi	r20, 0x1E	; 30
    2fcc:	52 e0       	ldi	r21, 0x02	; 2
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	70 e0       	ldi	r23, 0x00	; 0
    2fd2:	81 ec       	ldi	r24, 0xC1	; 193
    2fd4:	95 e0       	ldi	r25, 0x05	; 5
    2fd6:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <eeprom_write_block_changes>
	sei();
    2fda:	78 94       	sei
    2fdc:	08 95       	ret

00002fde <Update_V1_0_to_V1_1_B7>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 Beta 7 structure
void Update_V1_0_to_V1_1_B7(void)
{
    2fde:	2f 92       	push	r2
    2fe0:	3f 92       	push	r3
    2fe2:	4f 92       	push	r4
    2fe4:	5f 92       	push	r5
    2fe6:	6f 92       	push	r6
    2fe8:	7f 92       	push	r7
    2fea:	8f 92       	push	r8
    2fec:	9f 92       	push	r9
    2fee:	af 92       	push	r10
    2ff0:	bf 92       	push	r11
    2ff2:	cf 92       	push	r12
    2ff4:	df 92       	push	r13
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
    3006:	c5 54       	subi	r28, 0x45	; 69
    3008:	d1 40       	sbci	r29, 0x01	; 1
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume. For some reason it gets clobbered.
	// We mustn't use hard-coded values are these change each version.
	// Use an offset from the current Config structure address
	memcpy((void*)&temp,(void*)((&Config.setup) + (377)),1);
    3014:	40 91 3a 07 	lds	r20, 0x073A
    3018:	cf 5b       	subi	r28, 0xBF	; 191
    301a:	de 4f       	sbci	r29, 0xFE	; 254
    301c:	48 83       	st	Y, r20
    301e:	c1 54       	subi	r28, 0x41	; 65
    3020:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
    3022:	4a e4       	ldi	r20, 0x4A	; 74
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	6b e3       	ldi	r22, 0x3B	; 59
    3028:	77 e0       	ldi	r23, 0x07	; 7
    302a:	83 e8       	ldi	r24, 0x83	; 131
    302c:	97 e0       	ldi	r25, 0x07	; 7
    302e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <memmove>
    3032:	23 e5       	ldi	r18, 0x53	; 83
    3034:	36 e0       	ldi	r19, 0x06	; 6
    3036:	ae 01       	movw	r20, r28
    3038:	4f 5c       	subi	r20, 0xCF	; 207
    303a:	5e 4f       	sbci	r21, 0xFE	; 254
    303c:	ce 01       	movw	r24, r28
    303e:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    3040:	6d e1       	ldi	r22, 0x1D	; 29
    3042:	f9 01       	movw	r30, r18
    3044:	dc 01       	movw	r26, r24
    3046:	76 2f       	mov	r23, r22
    3048:	01 90       	ld	r0, Z+
    304a:	0d 92       	st	X+, r0
    304c:	7a 95       	dec	r23
    304e:	e1 f7       	brne	.-8      	; 0x3048 <Update_V1_0_to_V1_1_B7+0x6a>
    3050:	86 96       	adiw	r24, 0x26	; 38
    3052:	23 5e       	subi	r18, 0xE3	; 227
    3054:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    3056:	84 17       	cp	r24, r20
    3058:	95 07       	cpc	r25, r21
    305a:	99 f7       	brne	.-26     	; 0x3042 <Update_V1_0_to_V1_1_B7+0x64>
    305c:	4e 01       	movw	r8, r28
    305e:	83 e1       	ldi	r24, 0x13	; 19
    3060:	88 0e       	add	r8, r24
    3062:	91 1c       	adc	r9, r1
    3064:	5e 01       	movw	r10, r28
    3066:	94 e1       	ldi	r25, 0x14	; 20
    3068:	a9 0e       	add	r10, r25
    306a:	b1 1c       	adc	r11, r1
    306c:	6e 01       	movw	r12, r28
    306e:	e5 e1       	ldi	r30, 0x15	; 21
    3070:	ce 0e       	add	r12, r30
    3072:	d1 1c       	adc	r13, r1
    3074:	ce 01       	movw	r24, r28
    3076:	46 96       	adiw	r24, 0x16	; 22
    3078:	cf 5c       	subi	r28, 0xCF	; 207
    307a:	de 4f       	sbci	r29, 0xFE	; 254
    307c:	99 83       	std	Y+1, r25	; 0x01
    307e:	88 83       	st	Y, r24
    3080:	c1 53       	subi	r28, 0x31	; 49
    3082:	d1 40       	sbci	r29, 0x01	; 1
    3084:	8e 01       	movw	r16, r28
    3086:	02 5e       	subi	r16, 0xE2	; 226
    3088:	1f 4f       	sbci	r17, 0xFF	; 255
    308a:	fe 01       	movw	r30, r28
    308c:	7d 96       	adiw	r30, 0x1d	; 29
    308e:	c7 5c       	subi	r28, 0xC7	; 199
    3090:	de 4f       	sbci	r29, 0xFE	; 254
    3092:	f9 83       	std	Y+1, r31	; 0x01
    3094:	e8 83       	st	Y, r30
    3096:	c9 53       	subi	r28, 0x39	; 57
    3098:	d1 40       	sbci	r29, 0x01	; 1
    309a:	06 96       	adiw	r24, 0x06	; 6
    309c:	cd 5c       	subi	r28, 0xCD	; 205
    309e:	de 4f       	sbci	r29, 0xFE	; 254
    30a0:	99 83       	std	Y+1, r25	; 0x01
    30a2:	88 83       	st	Y, r24
    30a4:	c3 53       	subi	r28, 0x33	; 51
    30a6:	d1 40       	sbci	r29, 0x01	; 1
    30a8:	32 97       	sbiw	r30, 0x02	; 2
    30aa:	c3 5c       	subi	r28, 0xC3	; 195
    30ac:	de 4f       	sbci	r29, 0xFE	; 254
    30ae:	f9 83       	std	Y+1, r31	; 0x01
    30b0:	e8 83       	st	Y, r30
    30b2:	cd 53       	subi	r28, 0x3D	; 61
    30b4:	d1 40       	sbci	r29, 0x01	; 1
    30b6:	02 97       	sbiw	r24, 0x02	; 2
    30b8:	c9 5c       	subi	r28, 0xC9	; 201
    30ba:	de 4f       	sbci	r29, 0xFE	; 254
    30bc:	99 83       	std	Y+1, r25	; 0x01
    30be:	88 83       	st	Y, r24
    30c0:	c7 53       	subi	r28, 0x37	; 55
    30c2:	d1 40       	sbci	r29, 0x01	; 1
    30c4:	32 97       	sbiw	r30, 0x02	; 2
    30c6:	c5 5c       	subi	r28, 0xC5	; 197
    30c8:	de 4f       	sbci	r29, 0xFE	; 254
    30ca:	f9 83       	std	Y+1, r31	; 0x01
    30cc:	e8 83       	st	Y, r30
    30ce:	cb 53       	subi	r28, 0x3B	; 59
    30d0:	d1 40       	sbci	r29, 0x01	; 1
    30d2:	02 97       	sbiw	r24, 0x02	; 2
    30d4:	cb 5c       	subi	r28, 0xCB	; 203
    30d6:	de 4f       	sbci	r29, 0xFE	; 254
    30d8:	99 83       	std	Y+1, r25	; 0x01
    30da:	88 83       	st	Y, r24
    30dc:	c5 53       	subi	r28, 0x35	; 53
    30de:	d1 40       	sbci	r29, 0x01	; 1
    30e0:	7e 01       	movw	r14, r28
    30e2:	97 e1       	ldi	r25, 0x17	; 23
    30e4:	e9 0e       	add	r14, r25
    30e6:	f1 1c       	adc	r15, r1
    30e8:	3e 01       	movw	r6, r28
    30ea:	e5 e0       	ldi	r30, 0x05	; 5
    30ec:	6e 0e       	add	r6, r30
    30ee:	71 1c       	adc	r7, r1
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	8c 0f       	add	r24, r28
    30f6:	9d 1f       	adc	r25, r29
    30f8:	83 5b       	subi	r24, 0xB3	; 179
    30fa:	9e 4f       	sbci	r25, 0xFE	; 254
    30fc:	ce 5b       	subi	r28, 0xBE	; 190
    30fe:	de 4f       	sbci	r29, 0xFE	; 254
    3100:	99 83       	std	Y+1, r25	; 0x01
    3102:	88 83       	st	Y, r24
    3104:	c2 54       	subi	r28, 0x42	; 66
    3106:	d1 40       	sbci	r29, 0x01	; 1
    3108:	fe 01       	movw	r30, r28
    310a:	31 96       	adiw	r30, 0x01	; 1
    310c:	c1 5c       	subi	r28, 0xC1	; 193
    310e:	de 4f       	sbci	r29, 0xFE	; 254
    3110:	f9 83       	std	Y+1, r31	; 0x01
    3112:	e8 83       	st	Y, r30
    3114:	cf 53       	subi	r28, 0x3F	; 63
    3116:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    3118:	82 e0       	ldi	r24, 0x02	; 2
    311a:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    311c:	44 24       	eor	r4, r4
    311e:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    3120:	49 e1       	ldi	r20, 0x19	; 25
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	b3 01       	movw	r22, r6
    3126:	c8 01       	movw	r24, r16
    3128:	48 97       	sbiw	r24, 0x18	; 24
    312a:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    312e:	f4 01       	movw	r30, r8
    3130:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    3132:	f5 01       	movw	r30, r10
    3134:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    3136:	f6 01       	movw	r30, r12
    3138:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    313a:	cf 5c       	subi	r28, 0xCF	; 207
    313c:	de 4f       	sbci	r29, 0xFE	; 254
    313e:	e8 81       	ld	r30, Y
    3140:	f9 81       	ldd	r31, Y+1	; 0x01
    3142:	c1 53       	subi	r28, 0x31	; 49
    3144:	d1 40       	sbci	r29, 0x01	; 1
    3146:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    3148:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    314a:	36 fe       	sbrs	r3, 6
    314c:	02 c0       	rjmp	.+4      	; 0x3152 <Update_V1_0_to_V1_1_B7+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    314e:	50 82       	st	Z, r5
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <Update_V1_0_to_V1_1_B7+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    3152:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    3154:	48 e0       	ldi	r20, 0x08	; 8
    3156:	50 e0       	ldi	r21, 0x00	; 0
    3158:	b7 01       	movw	r22, r14
    315a:	c8 01       	movw	r24, r16
    315c:	01 96       	adiw	r24, 0x01	; 1
    315e:	cc 5b       	subi	r28, 0xBC	; 188
    3160:	de 4f       	sbci	r29, 0xFE	; 254
    3162:	28 83       	st	Y, r18
    3164:	c4 54       	subi	r28, 0x44	; 68
    3166:	d1 40       	sbci	r29, 0x01	; 1
    3168:	cb 5b       	subi	r28, 0xBB	; 187
    316a:	de 4f       	sbci	r29, 0xFE	; 254
    316c:	38 83       	st	Y, r19
    316e:	c5 54       	subi	r28, 0x45	; 69
    3170:	d1 40       	sbci	r29, 0x01	; 1
    3172:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <memmove>
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	cb 5b       	subi	r28, 0xBB	; 187
    317c:	de 4f       	sbci	r29, 0xFE	; 254
    317e:	38 81       	ld	r19, Y
    3180:	c5 54       	subi	r28, 0x45	; 69
    3182:	d1 40       	sbci	r29, 0x01	; 1
    3184:	cc 5b       	subi	r28, 0xBC	; 188
    3186:	de 4f       	sbci	r29, 0xFE	; 254
    3188:	28 81       	ld	r18, Y
    318a:	c4 54       	subi	r28, 0x44	; 68
    318c:	d1 40       	sbci	r29, 0x01	; 1
    318e:	c1 5c       	subi	r28, 0xC1	; 193
    3190:	de 4f       	sbci	r29, 0xFE	; 254
    3192:	e8 81       	ld	r30, Y
    3194:	f9 81       	ldd	r31, Y+1	; 0x01
    3196:	cf 53       	subi	r28, 0x3F	; 63
    3198:	d1 40       	sbci	r29, 0x01	; 1
    319a:	e8 0f       	add	r30, r24
    319c:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    319e:	46 8d       	ldd	r20, Z+30	; 0x1e
    31a0:	4d 30       	cpi	r20, 0x0D	; 13
    31a2:	11 f4       	brne	.+4      	; 0x31a8 <Update_V1_0_to_V1_1_B7+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    31a4:	4f e0       	ldi	r20, 0x0F	; 15
    31a6:	46 8f       	std	Z+30, r20	; 0x1e
    31a8:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    31aa:	88 30       	cpi	r24, 0x08	; 8
    31ac:	91 05       	cpc	r25, r1
    31ae:	79 f7       	brne	.-34     	; 0x318e <Update_V1_0_to_V1_1_B7+0x1b0>
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    31b0:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    31b2:	30 fe       	sbrs	r3, 0
    31b4:	06 c0       	rjmp	.+12     	; 0x31c2 <Update_V1_0_to_V1_1_B7+0x1e4>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    31b6:	30 ff       	sbrs	r19, 0
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <Update_V1_0_to_V1_1_B7+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    31ba:	50 82       	st	Z, r5
    31bc:	03 c0       	rjmp	.+6      	; 0x31c4 <Update_V1_0_to_V1_1_B7+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    31be:	40 82       	st	Z, r4
    31c0:	01 c0       	rjmp	.+2      	; 0x31c4 <Update_V1_0_to_V1_1_B7+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    31c2:	10 82       	st	Z, r1
		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
		{
			if ((P2_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    31c4:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    31c6:	20 ff       	sbrs	r18, 0
    31c8:	06 c0       	rjmp	.+12     	; 0x31d6 <Update_V1_0_to_V1_1_B7+0x1f8>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    31ca:	20 fe       	sbrs	r2, 0
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <Update_V1_0_to_V1_1_B7+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    31ce:	50 82       	st	Z, r5
    31d0:	03 c0       	rjmp	.+6      	; 0x31d8 <Update_V1_0_to_V1_1_B7+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    31d2:	40 82       	st	Z, r4
    31d4:	01 c0       	rjmp	.+2      	; 0x31d8 <Update_V1_0_to_V1_1_B7+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    31d6:	10 82       	st	Z, r1
		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    31d8:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    31da:	31 fe       	sbrs	r3, 1
    31dc:	06 c0       	rjmp	.+12     	; 0x31ea <Update_V1_0_to_V1_1_B7+0x20c>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    31de:	31 ff       	sbrs	r19, 1
    31e0:	02 c0       	rjmp	.+4      	; 0x31e6 <Update_V1_0_to_V1_1_B7+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    31e2:	50 82       	st	Z, r5
    31e4:	03 c0       	rjmp	.+6      	; 0x31ec <Update_V1_0_to_V1_1_B7+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    31e6:	40 82       	st	Z, r4
    31e8:	01 c0       	rjmp	.+2      	; 0x31ec <Update_V1_0_to_V1_1_B7+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    31ea:	10 82       	st	Z, r1
		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    31ec:	cf 5c       	subi	r28, 0xCF	; 207
    31ee:	de 4f       	sbci	r29, 0xFE	; 254
    31f0:	e8 81       	ld	r30, Y
    31f2:	f9 81       	ldd	r31, Y+1	; 0x01
    31f4:	c1 53       	subi	r28, 0x31	; 49
    31f6:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    31f8:	21 ff       	sbrs	r18, 1
    31fa:	06 c0       	rjmp	.+12     	; 0x3208 <Update_V1_0_to_V1_1_B7+0x22a>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    31fc:	21 fe       	sbrs	r2, 1
    31fe:	02 c0       	rjmp	.+4      	; 0x3204 <Update_V1_0_to_V1_1_B7+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    3200:	50 82       	st	Z, r5
    3202:	03 c0       	rjmp	.+6      	; 0x320a <Update_V1_0_to_V1_1_B7+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    3204:	40 82       	st	Z, r4
    3206:	01 c0       	rjmp	.+2      	; 0x320a <Update_V1_0_to_V1_1_B7+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    3208:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
		{
			if ((P1_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    320a:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    320c:	32 fe       	sbrs	r3, 2
    320e:	06 c0       	rjmp	.+12     	; 0x321c <Update_V1_0_to_V1_1_B7+0x23e>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    3210:	32 ff       	sbrs	r19, 2
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <Update_V1_0_to_V1_1_B7+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    3214:	50 82       	st	Z, r5
    3216:	03 c0       	rjmp	.+6      	; 0x321e <Update_V1_0_to_V1_1_B7+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    3218:	40 82       	st	Z, r4
    321a:	01 c0       	rjmp	.+2      	; 0x321e <Update_V1_0_to_V1_1_B7+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    321c:	10 82       	st	Z, r1
		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
		{
			if ((P2_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    321e:	cb 5c       	subi	r28, 0xCB	; 203
    3220:	de 4f       	sbci	r29, 0xFE	; 254
    3222:	e8 81       	ld	r30, Y
    3224:	f9 81       	ldd	r31, Y+1	; 0x01
    3226:	c5 53       	subi	r28, 0x35	; 53
    3228:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    322a:	22 ff       	sbrs	r18, 2
    322c:	06 c0       	rjmp	.+12     	; 0x323a <Update_V1_0_to_V1_1_B7+0x25c>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    322e:	22 fe       	sbrs	r2, 2
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <Update_V1_0_to_V1_1_B7+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    3232:	50 82       	st	Z, r5
    3234:	03 c0       	rjmp	.+6      	; 0x323c <Update_V1_0_to_V1_1_B7+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    3236:	40 82       	st	Z, r4
    3238:	01 c0       	rjmp	.+2      	; 0x323c <Update_V1_0_to_V1_1_B7+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    323a:	10 82       	st	Z, r1
		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    323c:	c5 5c       	subi	r28, 0xC5	; 197
    323e:	de 4f       	sbci	r29, 0xFE	; 254
    3240:	e8 81       	ld	r30, Y
    3242:	f9 81       	ldd	r31, Y+1	; 0x01
    3244:	cb 53       	subi	r28, 0x3B	; 59
    3246:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    3248:	33 fe       	sbrs	r3, 3
    324a:	06 c0       	rjmp	.+12     	; 0x3258 <Update_V1_0_to_V1_1_B7+0x27a>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    324c:	33 ff       	sbrs	r19, 3
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <Update_V1_0_to_V1_1_B7+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    3250:	50 82       	st	Z, r5
    3252:	03 c0       	rjmp	.+6      	; 0x325a <Update_V1_0_to_V1_1_B7+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    3254:	40 82       	st	Z, r4
    3256:	01 c0       	rjmp	.+2      	; 0x325a <Update_V1_0_to_V1_1_B7+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    3258:	10 82       	st	Z, r1
		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    325a:	c9 5c       	subi	r28, 0xC9	; 201
    325c:	de 4f       	sbci	r29, 0xFE	; 254
    325e:	e8 81       	ld	r30, Y
    3260:	f9 81       	ldd	r31, Y+1	; 0x01
    3262:	c7 53       	subi	r28, 0x37	; 55
    3264:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    3266:	23 ff       	sbrs	r18, 3
    3268:	06 c0       	rjmp	.+12     	; 0x3276 <Update_V1_0_to_V1_1_B7+0x298>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    326a:	23 fe       	sbrs	r2, 3
    326c:	02 c0       	rjmp	.+4      	; 0x3272 <Update_V1_0_to_V1_1_B7+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    326e:	50 82       	st	Z, r5
    3270:	03 c0       	rjmp	.+6      	; 0x3278 <Update_V1_0_to_V1_1_B7+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    3272:	40 82       	st	Z, r4
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <Update_V1_0_to_V1_1_B7+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    3276:	10 82       	st	Z, r1
		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    3278:	c3 5c       	subi	r28, 0xC3	; 195
    327a:	de 4f       	sbci	r29, 0xFE	; 254
    327c:	e8 81       	ld	r30, Y
    327e:	f9 81       	ldd	r31, Y+1	; 0x01
    3280:	cd 53       	subi	r28, 0x3D	; 61
    3282:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    3284:	34 fe       	sbrs	r3, 4
    3286:	06 c0       	rjmp	.+12     	; 0x3294 <Update_V1_0_to_V1_1_B7+0x2b6>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    3288:	34 ff       	sbrs	r19, 4
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <Update_V1_0_to_V1_1_B7+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    328c:	50 82       	st	Z, r5
    328e:	03 c0       	rjmp	.+6      	; 0x3296 <Update_V1_0_to_V1_1_B7+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    3290:	40 82       	st	Z, r4
    3292:	01 c0       	rjmp	.+2      	; 0x3296 <Update_V1_0_to_V1_1_B7+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    3294:	10 82       	st	Z, r1
		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    3296:	cd 5c       	subi	r28, 0xCD	; 205
    3298:	de 4f       	sbci	r29, 0xFE	; 254
    329a:	e8 81       	ld	r30, Y
    329c:	f9 81       	ldd	r31, Y+1	; 0x01
    329e:	c3 53       	subi	r28, 0x33	; 51
    32a0:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    32a2:	24 ff       	sbrs	r18, 4
    32a4:	06 c0       	rjmp	.+12     	; 0x32b2 <Update_V1_0_to_V1_1_B7+0x2d4>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    32a6:	24 fe       	sbrs	r2, 4
    32a8:	02 c0       	rjmp	.+4      	; 0x32ae <Update_V1_0_to_V1_1_B7+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    32aa:	50 82       	st	Z, r5
    32ac:	03 c0       	rjmp	.+6      	; 0x32b4 <Update_V1_0_to_V1_1_B7+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    32ae:	40 82       	st	Z, r4
    32b0:	01 c0       	rjmp	.+2      	; 0x32b4 <Update_V1_0_to_V1_1_B7+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    32b2:	10 82       	st	Z, r1
		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    32b4:	c7 5c       	subi	r28, 0xC7	; 199
    32b6:	de 4f       	sbci	r29, 0xFE	; 254
    32b8:	e8 81       	ld	r30, Y
    32ba:	f9 81       	ldd	r31, Y+1	; 0x01
    32bc:	c9 53       	subi	r28, 0x39	; 57
    32be:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
    32c0:	35 fe       	sbrs	r3, 5
    32c2:	06 c0       	rjmp	.+12     	; 0x32d0 <Update_V1_0_to_V1_1_B7+0x2f2>
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
    32c4:	35 ff       	sbrs	r19, 5
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <Update_V1_0_to_V1_1_B7+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    32c8:	50 82       	st	Z, r5
    32ca:	03 c0       	rjmp	.+6      	; 0x32d2 <Update_V1_0_to_V1_1_B7+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    32cc:	40 82       	st	Z, r4
    32ce:	01 c0       	rjmp	.+2      	; 0x32d2 <Update_V1_0_to_V1_1_B7+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    32d0:	10 82       	st	Z, r1
		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    32d2:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
    32d4:	25 ff       	sbrs	r18, 5
    32d6:	06 c0       	rjmp	.+12     	; 0x32e4 <Update_V1_0_to_V1_1_B7+0x306>
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
    32d8:	25 fe       	sbrs	r2, 5
    32da:	02 c0       	rjmp	.+4      	; 0x32e0 <Update_V1_0_to_V1_1_B7+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    32dc:	50 82       	st	Z, r5
    32de:	03 c0       	rjmp	.+6      	; 0x32e6 <Update_V1_0_to_V1_1_B7+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    32e0:	40 82       	st	Z, r4
    32e2:	01 c0       	rjmp	.+2      	; 0x32e6 <Update_V1_0_to_V1_1_B7+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    32e4:	10 82       	st	Z, r1
    32e6:	c1 5c       	subi	r28, 0xC1	; 193
    32e8:	de 4f       	sbci	r29, 0xFE	; 254
    32ea:	88 81       	ld	r24, Y
    32ec:	99 81       	ldd	r25, Y+1	; 0x01
    32ee:	cf 53       	subi	r28, 0x3F	; 63
    32f0:	d1 40       	sbci	r29, 0x01	; 1
    32f2:	86 96       	adiw	r24, 0x26	; 38
    32f4:	c1 5c       	subi	r28, 0xC1	; 193
    32f6:	de 4f       	sbci	r29, 0xFE	; 254
    32f8:	99 83       	std	Y+1, r25	; 0x01
    32fa:	88 83       	st	Y, r24
    32fc:	cf 53       	subi	r28, 0x3F	; 63
    32fe:	d1 40       	sbci	r29, 0x01	; 1
    3300:	96 e2       	ldi	r25, 0x26	; 38
    3302:	89 0e       	add	r8, r25
    3304:	91 1c       	adc	r9, r1
    3306:	e6 e2       	ldi	r30, 0x26	; 38
    3308:	ae 0e       	add	r10, r30
    330a:	b1 1c       	adc	r11, r1
    330c:	f6 e2       	ldi	r31, 0x26	; 38
    330e:	cf 0e       	add	r12, r31
    3310:	d1 1c       	adc	r13, r1
    3312:	cf 5c       	subi	r28, 0xCF	; 207
    3314:	de 4f       	sbci	r29, 0xFE	; 254
    3316:	88 81       	ld	r24, Y
    3318:	99 81       	ldd	r25, Y+1	; 0x01
    331a:	c1 53       	subi	r28, 0x31	; 49
    331c:	d1 40       	sbci	r29, 0x01	; 1
    331e:	86 96       	adiw	r24, 0x26	; 38
    3320:	cf 5c       	subi	r28, 0xCF	; 207
    3322:	de 4f       	sbci	r29, 0xFE	; 254
    3324:	99 83       	std	Y+1, r25	; 0x01
    3326:	88 83       	st	Y, r24
    3328:	c1 53       	subi	r28, 0x31	; 49
    332a:	d1 40       	sbci	r29, 0x01	; 1
    332c:	0a 5d       	subi	r16, 0xDA	; 218
    332e:	1f 4f       	sbci	r17, 0xFF	; 255
    3330:	c7 5c       	subi	r28, 0xC7	; 199
    3332:	de 4f       	sbci	r29, 0xFE	; 254
    3334:	e8 81       	ld	r30, Y
    3336:	f9 81       	ldd	r31, Y+1	; 0x01
    3338:	c9 53       	subi	r28, 0x39	; 57
    333a:	d1 40       	sbci	r29, 0x01	; 1
    333c:	b6 96       	adiw	r30, 0x26	; 38
    333e:	c7 5c       	subi	r28, 0xC7	; 199
    3340:	de 4f       	sbci	r29, 0xFE	; 254
    3342:	f9 83       	std	Y+1, r31	; 0x01
    3344:	e8 83       	st	Y, r30
    3346:	c9 53       	subi	r28, 0x39	; 57
    3348:	d1 40       	sbci	r29, 0x01	; 1
    334a:	cd 5c       	subi	r28, 0xCD	; 205
    334c:	de 4f       	sbci	r29, 0xFE	; 254
    334e:	88 81       	ld	r24, Y
    3350:	99 81       	ldd	r25, Y+1	; 0x01
    3352:	c3 53       	subi	r28, 0x33	; 51
    3354:	d1 40       	sbci	r29, 0x01	; 1
    3356:	86 96       	adiw	r24, 0x26	; 38
    3358:	cd 5c       	subi	r28, 0xCD	; 205
    335a:	de 4f       	sbci	r29, 0xFE	; 254
    335c:	99 83       	std	Y+1, r25	; 0x01
    335e:	88 83       	st	Y, r24
    3360:	c3 53       	subi	r28, 0x33	; 51
    3362:	d1 40       	sbci	r29, 0x01	; 1
    3364:	c3 5c       	subi	r28, 0xC3	; 195
    3366:	de 4f       	sbci	r29, 0xFE	; 254
    3368:	e8 81       	ld	r30, Y
    336a:	f9 81       	ldd	r31, Y+1	; 0x01
    336c:	cd 53       	subi	r28, 0x3D	; 61
    336e:	d1 40       	sbci	r29, 0x01	; 1
    3370:	b6 96       	adiw	r30, 0x26	; 38
    3372:	c3 5c       	subi	r28, 0xC3	; 195
    3374:	de 4f       	sbci	r29, 0xFE	; 254
    3376:	f9 83       	std	Y+1, r31	; 0x01
    3378:	e8 83       	st	Y, r30
    337a:	cd 53       	subi	r28, 0x3D	; 61
    337c:	d1 40       	sbci	r29, 0x01	; 1
    337e:	c9 5c       	subi	r28, 0xC9	; 201
    3380:	de 4f       	sbci	r29, 0xFE	; 254
    3382:	88 81       	ld	r24, Y
    3384:	99 81       	ldd	r25, Y+1	; 0x01
    3386:	c7 53       	subi	r28, 0x37	; 55
    3388:	d1 40       	sbci	r29, 0x01	; 1
    338a:	86 96       	adiw	r24, 0x26	; 38
    338c:	c9 5c       	subi	r28, 0xC9	; 201
    338e:	de 4f       	sbci	r29, 0xFE	; 254
    3390:	99 83       	std	Y+1, r25	; 0x01
    3392:	88 83       	st	Y, r24
    3394:	c7 53       	subi	r28, 0x37	; 55
    3396:	d1 40       	sbci	r29, 0x01	; 1
    3398:	c5 5c       	subi	r28, 0xC5	; 197
    339a:	de 4f       	sbci	r29, 0xFE	; 254
    339c:	e8 81       	ld	r30, Y
    339e:	f9 81       	ldd	r31, Y+1	; 0x01
    33a0:	cb 53       	subi	r28, 0x3B	; 59
    33a2:	d1 40       	sbci	r29, 0x01	; 1
    33a4:	b6 96       	adiw	r30, 0x26	; 38
    33a6:	c5 5c       	subi	r28, 0xC5	; 197
    33a8:	de 4f       	sbci	r29, 0xFE	; 254
    33aa:	f9 83       	std	Y+1, r31	; 0x01
    33ac:	e8 83       	st	Y, r30
    33ae:	cb 53       	subi	r28, 0x3B	; 59
    33b0:	d1 40       	sbci	r29, 0x01	; 1
    33b2:	cb 5c       	subi	r28, 0xCB	; 203
    33b4:	de 4f       	sbci	r29, 0xFE	; 254
    33b6:	88 81       	ld	r24, Y
    33b8:	99 81       	ldd	r25, Y+1	; 0x01
    33ba:	c5 53       	subi	r28, 0x35	; 53
    33bc:	d1 40       	sbci	r29, 0x01	; 1
    33be:	86 96       	adiw	r24, 0x26	; 38
    33c0:	cb 5c       	subi	r28, 0xCB	; 203
    33c2:	de 4f       	sbci	r29, 0xFE	; 254
    33c4:	99 83       	std	Y+1, r25	; 0x01
    33c6:	88 83       	st	Y, r24
    33c8:	c5 53       	subi	r28, 0x35	; 53
    33ca:	d1 40       	sbci	r29, 0x01	; 1
    33cc:	96 e2       	ldi	r25, 0x26	; 38
    33ce:	e9 0e       	add	r14, r25
    33d0:	f1 1c       	adc	r15, r1
    33d2:	e6 e2       	ldi	r30, 0x26	; 38
    33d4:	6e 0e       	add	r6, r30
    33d6:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    33d8:	ce 5b       	subi	r28, 0xBE	; 190
    33da:	de 4f       	sbci	r29, 0xFE	; 254
    33dc:	88 81       	ld	r24, Y
    33de:	99 81       	ldd	r25, Y+1	; 0x01
    33e0:	c2 54       	subi	r28, 0x42	; 66
    33e2:	d1 40       	sbci	r29, 0x01	; 1
    33e4:	08 17       	cp	r16, r24
    33e6:	19 07       	cpc	r17, r25
    33e8:	09 f0       	breq	.+2      	; 0x33ec <Update_V1_0_to_V1_1_B7+0x40e>
    33ea:	9a ce       	rjmp	.-716    	; 0x3120 <Update_V1_0_to_V1_1_B7+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    33ec:	8f e2       	ldi	r24, 0x2F	; 47
    33ee:	91 e0       	ldi	r25, 0x01	; 1
    33f0:	fe 01       	movw	r30, r28
    33f2:	31 96       	adiw	r30, 0x01	; 1
    33f4:	a3 e5       	ldi	r26, 0x53	; 83
    33f6:	b6 e0       	ldi	r27, 0x06	; 6
    33f8:	01 90       	ld	r0, Z+
    33fa:	0d 92       	st	X+, r0
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	e1 f7       	brne	.-8      	; 0x33f8 <Update_V1_0_to_V1_1_B7+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; 
    3400:	cf 5b       	subi	r28, 0xBF	; 191
    3402:	de 4f       	sbci	r29, 0xFE	; 254
    3404:	98 81       	ld	r25, Y
    3406:	c1 54       	subi	r28, 0x41	; 65
    3408:	d1 40       	sbci	r29, 0x01	; 1
    340a:	90 93 82 07 	sts	0x0782, r25

	// Set magic number to V1.1 Beta 7 signature
	Config.setup = V1_1_B7_SIGNATURE;
    340e:	86 e3       	ldi	r24, 0x36	; 54
    3410:	80 93 c1 05 	sts	0x05C1, r24
}
    3414:	cb 5b       	subi	r28, 0xBB	; 187
    3416:	de 4f       	sbci	r29, 0xFE	; 254
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	df 91       	pop	r29
    3424:	cf 91       	pop	r28
    3426:	1f 91       	pop	r17
    3428:	0f 91       	pop	r16
    342a:	ff 90       	pop	r15
    342c:	ef 90       	pop	r14
    342e:	df 90       	pop	r13
    3430:	cf 90       	pop	r12
    3432:	bf 90       	pop	r11
    3434:	af 90       	pop	r10
    3436:	9f 90       	pop	r9
    3438:	8f 90       	pop	r8
    343a:	7f 90       	pop	r7
    343c:	6f 90       	pop	r6
    343e:	5f 90       	pop	r5
    3440:	4f 90       	pop	r4
    3442:	3f 90       	pop	r3
    3444:	2f 90       	pop	r2
    3446:	08 95       	ret

00003448 <Update_V1_1_to_V1_1_B8>:

// Upgrade V1.1 beta 7 structure to V1.1 Beta 8 structure
void Update_V1_1_to_V1_1_B8(void)
{
    3448:	cf 93       	push	r28
    344a:	df 93       	push	r29
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	2c 97       	sbiw	r28, 0x0c	; 12
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
	int8_t	buffer[12];
	int8_t	temp = 0;
	
	// RC items - working perfectly
	buffer[0] = Config.RxMode;			// RxMode. Same as old RxMode
    345c:	80 91 ea 05 	lds	r24, 0x05EA
    3460:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = Config.MPU6050_LPF;		// Servo_rate
    3462:	80 91 4e 06 	lds	r24, 0x064E
    3466:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = Config.Servo_rate;		// PWM_Sync
    3468:	80 91 eb 05 	lds	r24, 0x05EB
    346c:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = Config.PWM_Sync;		// TxSeq
    346e:	80 91 ec 05 	lds	r24, 0x05EC
    3472:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = Config.TxSeq;			// FlightChan
    3474:	80 91 ed 05 	lds	r24, 0x05ED
    3478:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = Config.AileronPol;		// TransitionSpeed
    347a:	90 91 f1 05 	lds	r25, 0x05F1
    347e:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6] = Config.ElevatorPol;		// Transition_P1n
    3480:	90 91 f2 05 	lds	r25, 0x05F2
    3484:	9f 83       	std	Y+7, r25	; 0x07
	buffer[7] = Config.FlightChan;		// AileronPol
    3486:	90 91 ee 05 	lds	r25, 0x05EE
    348a:	98 87       	std	Y+8, r25	; 0x08
	buffer[8] = Config.TransitionSpeed;	// ElevatorPol
    348c:	90 91 ef 05 	lds	r25, 0x05EF
    3490:	99 87       	std	Y+9, r25	; 0x09
	
	// General items
	memcpy((void*)&temp,(void*)((&Config.CF_factor) + (1)),1);
    3492:	20 91 52 06 	lds	r18, 0x0652
	buffer[9] = temp;					// Old MPU6050LPF value
    3496:	2a 87       	std	Y+10, r18	; 0x0a
	buffer[10] = Config.Transition_P1n; // Old RudderPol value
    3498:	90 91 f0 05 	lds	r25, 0x05F0
    349c:	9b 87       	std	Y+11, r25	; 0x0b
		
	// Copy back to RC items structure
	memcpy(&Config.RxMode, &buffer,9);
    349e:	39 e0       	ldi	r19, 0x09	; 9
    34a0:	fe 01       	movw	r30, r28
    34a2:	31 96       	adiw	r30, 0x01	; 1
    34a4:	aa ee       	ldi	r26, 0xEA	; 234
    34a6:	b5 e0       	ldi	r27, 0x05	; 5
    34a8:	01 90       	ld	r0, Z+
    34aa:	0d 92       	st	X+, r0
    34ac:	3a 95       	dec	r19
    34ae:	e1 f7       	brne	.-8      	; 0x34a8 <Update_V1_1_to_V1_1_B8+0x60>
	
	// Copy back to General items structure
	Config.MPU6050_LPF = buffer[9];
    34b0:	20 93 4e 06 	sts	0x064E, r18
	temp = buffer[10];					// Pass through the RudderPol value
	memcpy((void*)((&Config.CF_factor) + (1)), (void*)&temp,1);
    34b4:	90 93 52 06 	sts	0x0652, r25
	
	// "None" no longer an option for this channel
	if (Config.FlightChan == NOCHAN)
    34b8:	88 30       	cpi	r24, 0x08	; 8
    34ba:	19 f4       	brne	.+6      	; 0x34c2 <Update_V1_1_to_V1_1_B8+0x7a>
	{
		Config.FlightChan = AUX3;
    34bc:	87 e0       	ldi	r24, 0x07	; 7
    34be:	80 93 ee 05 	sts	0x05EE, r24
	}
	
	// Set magic number to V1.1 Beta 8 signature
	Config.setup = V1_1_B8_SIGNATURE;
    34c2:	87 e3       	ldi	r24, 0x37	; 55
    34c4:	80 93 c1 05 	sts	0x05C1, r24
}
    34c8:	2c 96       	adiw	r28, 0x0c	; 12
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	08 95       	ret

000034da <Update_V1_1B8_to_V1_1_B10>:

// Upgrade V1.1 B8 settings to V1.1 Beta 10 settings
void Update_V1_1B8_to_V1_1_B10(void)
{
	// Reset filters to more appropriate values
	Config.Acc_LPF = convert_filter_B8_B10(Config.Acc_LPF);
    34da:	e0 91 4f 06 	lds	r30, 0x064F
    34de:	e7 30       	cpi	r30, 0x07	; 7
    34e0:	28 f4       	brcc	.+10     	; 0x34ec <Update_V1_1B8_to_V1_1_B10+0x12>
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	e2 5f       	subi	r30, 0xF2	; 242
    34e6:	fa 4f       	sbci	r31, 0xFA	; 250
    34e8:	80 81       	ld	r24, Z
    34ea:	01 c0       	rjmp	.+2      	; 0x34ee <Update_V1_1B8_to_V1_1_B10+0x14>
    34ec:	87 e0       	ldi	r24, 0x07	; 7
    34ee:	80 93 4f 06 	sts	0x064F, r24
	Config.Gyro_LPF = convert_filter_B8_B10(Config.Gyro_LPF);
    34f2:	e0 91 50 06 	lds	r30, 0x0650
    34f6:	e7 30       	cpi	r30, 0x07	; 7
    34f8:	28 f4       	brcc	.+10     	; 0x3504 <Update_V1_1B8_to_V1_1_B10+0x2a>
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	e2 5f       	subi	r30, 0xF2	; 242
    34fe:	fa 4f       	sbci	r31, 0xFA	; 250
    3500:	80 81       	ld	r24, Z
    3502:	01 c0       	rjmp	.+2      	; 0x3506 <Update_V1_1B8_to_V1_1_B10+0x2c>
    3504:	87 e0       	ldi	r24, 0x07	; 7
    3506:	80 93 50 06 	sts	0x0650, r24

	// Set magic number to V1.1 Beta 10 signature
	Config.setup = V1_1_B10_SIGNATURE;
    350a:	88 e3       	ldi	r24, 0x38	; 56
    350c:	80 93 c1 05 	sts	0x05C1, r24
    3510:	08 95       	ret

00003512 <Update_V1_1B10_to_V1_1_B12>:

// Upgrade V1.1 B10+ settings to V1.1 Beta 12 settings
void Update_V1_1B10_to_V1_1_B12(void)
{
	// Copy old RudderPol value to new location
	Config.RudderPol = Config.Preset;
    3512:	e2 e5       	ldi	r30, 0x52	; 82
    3514:	f6 e0       	ldi	r31, 0x06	; 6
    3516:	80 81       	ld	r24, Z
    3518:	80 93 c9 07 	sts	0x07C9, r24
	
	// Set preset to default and load it
	Config.Preset = QUADX;
    351c:	10 82       	st	Z, r1

	// Set magic number to V1.1 Beta 11 signature
	Config.setup = V1_1_B12_SIGNATURE;
    351e:	89 e3       	ldi	r24, 0x39	; 57
    3520:	80 93 c1 05 	sts	0x05C1, r24
    3524:	08 95       	ret

00003526 <Load_eeprom_preset>:
	Load_eeprom_preset(QUADX);
	Config.Preset = OPTIONS; // Menu will display "Options"
}

void Load_eeprom_preset(uint8_t preset)
{
    3526:	0f 93       	push	r16
    3528:	1f 93       	push	r17
    352a:	cf 93       	push	r28
    352c:	df 93       	push	r29
	uint8_t i;

	// Erase current profile settings
	memset(&Config.FlightMode[P1],0,sizeof(flight_control_t));
    352e:	92 e1       	ldi	r25, 0x12	; 18
    3530:	e3 ef       	ldi	r30, 0xF3	; 243
    3532:	f5 e0       	ldi	r31, 0x05	; 5
    3534:	df 01       	movw	r26, r30
    3536:	29 2f       	mov	r18, r25
    3538:	1d 92       	st	X+, r1
    353a:	2a 95       	dec	r18
    353c:	e9 f7       	brne	.-6      	; 0x3538 <Load_eeprom_preset+0x12>
	memset(&Config.FlightMode[P2],0,sizeof(flight_control_t));
    353e:	e5 e0       	ldi	r30, 0x05	; 5
    3540:	f6 e0       	ldi	r31, 0x06	; 6
    3542:	df 01       	movw	r26, r30
    3544:	1d 92       	st	X+, r1
    3546:	9a 95       	dec	r25
    3548:	e9 f7       	brne	.-6      	; 0x3544 <Load_eeprom_preset+0x1e>

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);
    354a:	20 e3       	ldi	r18, 0x30	; 48
    354c:	31 e0       	ldi	r19, 0x01	; 1
    354e:	e3 e5       	ldi	r30, 0x53	; 83
    3550:	f6 e0       	ldi	r31, 0x06	; 6
    3552:	df 01       	movw	r26, r30
    3554:	a9 01       	movw	r20, r18
    3556:	1d 92       	st	X+, r1
    3558:	41 50       	subi	r20, 0x01	; 1
    355a:	50 40       	sbci	r21, 0x00	; 0
    355c:	e1 f7       	brne	.-8      	; 0x3556 <Load_eeprom_preset+0x30>
    355e:	e7 e7       	ldi	r30, 0x77	; 119
    3560:	f6 e0       	ldi	r31, 0x06	; 6
    3562:	cb e8       	ldi	r28, 0x8B	; 139
    3564:	d7 e0       	ldi	r29, 0x07	; 7
    3566:	03 e9       	ldi	r16, 0x93	; 147
    3568:	17 e0       	ldi	r17, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    356a:	72 e3       	ldi	r23, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    356c:	9f e0       	ldi	r25, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    356e:	6c e9       	ldi	r22, 0x9C	; 156
		Config.max_travel[i] = 100;
    3570:	44 e6       	ldi	r20, 0x64	; 100
    3572:	9f 01       	movw	r18, r30
    3574:	2e 51       	subi	r18, 0x1E	; 30
    3576:	31 09       	sbc	r19, r1
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3578:	52 e3       	ldi	r21, 0x32	; 50
    357a:	d9 01       	movw	r26, r18
    357c:	7c 93       	st	X, r23
    357e:	28 5e       	subi	r18, 0xE8	; 232
    3580:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_a 	= NOMIX;
    3582:	d9 01       	movw	r26, r18
    3584:	9c 93       	st	X, r25
    3586:	2c 5f       	subi	r18, 0xFC	; 252
    3588:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_b 	= NOMIX;
    358a:	d9 01       	movw	r26, r18
    358c:	9c 93       	st	X, r25
    358e:	22 50       	subi	r18, 0x02	; 2
    3590:	31 09       	sbc	r19, r1
		Config.Channel[i].P2_source_a 	= NOMIX;
    3592:	d9 01       	movw	r26, r18
    3594:	9c 93       	st	X, r25
		Config.Channel[i].P2_source_b 	= NOMIX;
    3596:	90 83       	st	Z, r25
		Config.min_travel[i] = -100;
    3598:	69 93       	st	Y+, r22
		Config.max_travel[i] = 100;
    359a:	24 e6       	ldi	r18, 0x64	; 100
    359c:	d8 01       	movw	r26, r16
    359e:	4d 93       	st	X+, r20
    35a0:	8d 01       	movw	r16, r26
    35a2:	b6 96       	adiw	r30, 0x26	; 38

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    35a4:	b7 e0       	ldi	r27, 0x07	; 7
    35a6:	e7 3a       	cpi	r30, 0xA7	; 167
    35a8:	fb 07       	cpc	r31, r27
    35aa:	19 f7       	brne	.-58     	; 0x3572 <Load_eeprom_preset+0x4c>
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	switch (preset)
    35ac:	81 30       	cpi	r24, 0x01	; 1
    35ae:	61 f0       	breq	.+24     	; 0x35c8 <Load_eeprom_preset+0xa2>
    35b0:	08 f4       	brcc	.+2      	; 0x35b4 <Load_eeprom_preset+0x8e>
    35b2:	ce c0       	rjmp	.+412    	; 0x3750 <Load_eeprom_preset+0x22a>
    35b4:	82 30       	cpi	r24, 0x02	; 2
    35b6:	09 f4       	brne	.+2      	; 0x35ba <Load_eeprom_preset+0x94>
    35b8:	87 c1       	rjmp	.+782    	; 0x38c8 <Load_eeprom_preset+0x3a2>
    35ba:	83 30       	cpi	r24, 0x03	; 3
    35bc:	09 f0       	breq	.+2      	; 0x35c0 <Load_eeprom_preset+0x9a>
    35be:	45 c2       	rjmp	.+1162   	; 0x3a4a <Load_eeprom_preset+0x524>
	{
		case BLANK:
			Config.ArmMode = ARMABLE;
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	80 93 4b 06 	sts	0x064B, r24
	
			break;
    35c6:	41 c2       	rjmp	.+1154   	; 0x3a4a <Load_eeprom_preset+0x524>
		
		case QUADP:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    35c8:	80 93 4b 06 	sts	0x064B, r24
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 50;
    35cc:	50 93 f3 05 	sts	0x05F3, r21
			Config.FlightMode[P1].Roll_I_mult = 10;
    35d0:	9a e0       	ldi	r25, 0x0A	; 10
    35d2:	90 93 f4 05 	sts	0x05F4, r25
			Config.FlightMode[P1].Roll_limit = 10;
    35d6:	90 93 f5 05 	sts	0x05F5, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    35da:	22 e0       	ldi	r18, 0x02	; 2
    35dc:	20 93 f6 05 	sts	0x05F6, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    35e0:	90 93 f7 05 	sts	0x05F7, r25
			
			Config.FlightMode[P1].Pitch_P_mult = 50;
    35e4:	50 93 f9 05 	sts	0x05F9, r21
			Config.FlightMode[P1].Pitch_I_mult = 10;
    35e8:	90 93 fa 05 	sts	0x05FA, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    35ec:	90 93 fb 05 	sts	0x05FB, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    35f0:	20 93 fc 05 	sts	0x05FC, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    35f4:	90 93 fd 05 	sts	0x05FD, r25
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    35f8:	4c e3       	ldi	r20, 0x3C	; 60
    35fa:	40 93 ff 05 	sts	0x05FF, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    35fe:	98 e2       	ldi	r25, 0x28	; 40
    3600:	90 93 00 06 	sts	0x0600, r25
			Config.FlightMode[P1].Yaw_limit = 25;
    3604:	39 e1       	ldi	r19, 0x19	; 25
    3606:	30 93 01 06 	sts	0x0601, r19
			Config.FlightMode[P1].Yaw_Rate = 2;
    360a:	20 93 02 06 	sts	0x0602, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    360e:	50 93 04 06 	sts	0x0604, r21
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    3612:	90 93 05 06 	sts	0x0605, r25
			Config.FlightMode[P2].Roll_I_mult = 19;
    3616:	63 e1       	ldi	r22, 0x13	; 19
    3618:	60 93 06 06 	sts	0x0606, r22
			Config.FlightMode[P2].Roll_limit = 14;
    361c:	5e e0       	ldi	r21, 0x0E	; 14
    361e:	50 93 07 06 	sts	0x0607, r21
			Config.FlightMode[P2].Roll_Rate = 3;
    3622:	23 e0       	ldi	r18, 0x03	; 3
    3624:	20 93 08 06 	sts	0x0608, r18
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3628:	80 93 09 06 	sts	0x0609, r24
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    362c:	90 93 0b 06 	sts	0x060B, r25
			Config.FlightMode[P2].Pitch_I_mult = 19;
    3630:	60 93 0c 06 	sts	0x060C, r22
			Config.FlightMode[P2].Pitch_limit = 14;
    3634:	50 93 0d 06 	sts	0x060D, r21
			Config.FlightMode[P2].Pitch_Rate = 3;
    3638:	20 93 0e 06 	sts	0x060E, r18
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    363c:	80 93 0f 06 	sts	0x060F, r24
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    3640:	40 93 11 06 	sts	0x0611, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    3644:	90 93 12 06 	sts	0x0612, r25
			Config.FlightMode[P2].Yaw_limit = 25;
    3648:	30 93 13 06 	sts	0x0613, r19
			Config.FlightMode[P2].Yaw_Rate = 3;
    364c:	20 93 14 06 	sts	0x0614, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3650:	8e e1       	ldi	r24, 0x1E	; 30
    3652:	80 93 16 06 	sts	0x0616, r24
    3656:	e0 e7       	ldi	r30, 0x70	; 112
    3658:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    365a:	34 e6       	ldi	r19, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    365c:	42 e0       	ldi	r20, 0x02	; 2
				Config.Channel[i].P1_Z_delta_acc = ON;
    365e:	21 e0       	ldi	r18, 0x01	; 1
    3660:	df 01       	movw	r26, r30
    3662:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3664:	94 e6       	ldi	r25, 0x64	; 100
    3666:	3c 93       	st	X, r19
    3668:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    366a:	3c 93       	st	X, r19
    366c:	16 97       	sbiw	r26, 0x06	; 6
				Config.Channel[i].Motor_marker = MOTOR;
    366e:	4c 93       	st	X, r20
    3670:	58 96       	adiw	r26, 0x18	; 24
				Config.Channel[i].P1_Z_delta_acc = ON;
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	2c 93       	st	X, r18
				Config.Channel[i].P2_Z_delta_acc = ON;
    3676:	20 83       	st	Z, r18
    3678:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    367a:	57 e0       	ldi	r21, 0x07	; 7
    367c:	e8 30       	cpi	r30, 0x08	; 8
    367e:	f5 07       	cpc	r31, r21
    3680:	79 f7       	brne	.-34     	; 0x3660 <Load_eeprom_preset+0x13a>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 0;
    3682:	10 92 5f 06 	sts	0x065F, r1
			Config.Channel[OUT1].P2_aileron_volume = 0;
    3686:	10 92 60 06 	sts	0x0660, r1
			Config.Channel[OUT1].P1_elevator_volume = -20;
    368a:	2c ee       	ldi	r18, 0xEC	; 236
    368c:	20 93 61 06 	sts	0x0661, r18
			Config.Channel[OUT1].P2_elevator_volume = -30;
    3690:	32 ee       	ldi	r19, 0xE2	; 226
    3692:	30 93 62 06 	sts	0x0662, r19
			Config.Channel[OUT1].P1_rudder_volume = -30;
    3696:	30 93 63 06 	sts	0x0663, r19
			Config.Channel[OUT1].P2_rudder_volume = -40;
    369a:	68 ed       	ldi	r22, 0xD8	; 216
    369c:	60 93 64 06 	sts	0x0664, r22
			Config.Channel[OUT1].P1_Pitch_gyro = ON;
    36a0:	80 93 67 06 	sts	0x0667, r24
			Config.Channel[OUT1].P1_Pitch_acc = ON;
    36a4:	80 93 6d 06 	sts	0x066D, r24
			Config.Channel[OUT1].P2_Pitch_gyro = ON;
    36a8:	80 93 68 06 	sts	0x0668, r24
			Config.Channel[OUT1].P2_Pitch_acc = ON;
    36ac:	80 93 6e 06 	sts	0x066E, r24
			Config.Channel[OUT1].P1_Yaw_gyro = ON;
    36b0:	80 93 69 06 	sts	0x0669, r24
			Config.Channel[OUT1].P2_Yaw_gyro = ON;
    36b4:	80 93 6a 06 	sts	0x066A, r24
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -20;
    36b8:	20 93 85 06 	sts	0x0685, r18
			Config.Channel[OUT2].P2_aileron_volume = -30;
    36bc:	30 93 86 06 	sts	0x0686, r19
			Config.Channel[OUT2].P1_elevator_volume = 0;
    36c0:	10 92 87 06 	sts	0x0687, r1
			Config.Channel[OUT2].P2_elevator_volume = 0;
    36c4:	10 92 88 06 	sts	0x0688, r1
			Config.Channel[OUT2].P1_rudder_volume = 30;
    36c8:	2e e1       	ldi	r18, 0x1E	; 30
    36ca:	20 93 89 06 	sts	0x0689, r18
			Config.Channel[OUT2].P2_rudder_volume = 40;
    36ce:	48 e2       	ldi	r20, 0x28	; 40
    36d0:	40 93 8a 06 	sts	0x068A, r20
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    36d4:	80 93 8b 06 	sts	0x068B, r24
			Config.Channel[OUT2].P1_Roll_acc = ON;
    36d8:	80 93 91 06 	sts	0x0691, r24
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    36dc:	80 93 8c 06 	sts	0x068C, r24
			Config.Channel[OUT2].P2_Roll_acc = ON;
    36e0:	80 93 92 06 	sts	0x0692, r24
			Config.Channel[OUT2].P1_Yaw_gyro = ON;
    36e4:	80 93 8f 06 	sts	0x068F, r24
			Config.Channel[OUT2].P2_Yaw_gyro = ON;
    36e8:	80 93 90 06 	sts	0x0690, r24
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = 0;
    36ec:	10 92 ab 06 	sts	0x06AB, r1
			Config.Channel[OUT3].P2_aileron_volume = 0;
    36f0:	10 92 ac 06 	sts	0x06AC, r1
			Config.Channel[OUT3].P1_elevator_volume = 20;
    36f4:	54 e1       	ldi	r21, 0x14	; 20
    36f6:	50 93 ad 06 	sts	0x06AD, r21
			Config.Channel[OUT3].P2_elevator_volume = 30;
    36fa:	20 93 ae 06 	sts	0x06AE, r18
			Config.Channel[OUT3].P1_rudder_volume = -30;
    36fe:	30 93 af 06 	sts	0x06AF, r19
			Config.Channel[OUT3].P2_rudder_volume = -40;
    3702:	60 93 b0 06 	sts	0x06B0, r22
			Config.Channel[OUT3].P1_Pitch_gyro = ON;
    3706:	80 93 b3 06 	sts	0x06B3, r24
			Config.Channel[OUT3].P1_Pitch_acc = ON;
    370a:	80 93 b9 06 	sts	0x06B9, r24
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    370e:	80 93 b4 06 	sts	0x06B4, r24
			Config.Channel[OUT3].P2_Pitch_acc = ON;
    3712:	80 93 ba 06 	sts	0x06BA, r24
			Config.Channel[OUT3].P1_Yaw_gyro = ON;
    3716:	80 93 b5 06 	sts	0x06B5, r24
			Config.Channel[OUT3].P2_Yaw_gyro = ON;
    371a:	80 93 b6 06 	sts	0x06B6, r24
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 20;
    371e:	50 93 d1 06 	sts	0x06D1, r21
			Config.Channel[OUT4].P2_aileron_volume = 30;
    3722:	20 93 d2 06 	sts	0x06D2, r18
			Config.Channel[OUT4].P1_elevator_volume = 0;
    3726:	10 92 d3 06 	sts	0x06D3, r1
			Config.Channel[OUT4].P2_elevator_volume = 0;
    372a:	10 92 d4 06 	sts	0x06D4, r1
			Config.Channel[OUT4].P1_rudder_volume = 30;
    372e:	20 93 d5 06 	sts	0x06D5, r18
			Config.Channel[OUT4].P2_rudder_volume = 40;
    3732:	40 93 d6 06 	sts	0x06D6, r20
			Config.Channel[OUT4].P1_Roll_gyro = ON;
    3736:	80 93 d7 06 	sts	0x06D7, r24
			Config.Channel[OUT4].P1_Roll_acc = ON;
    373a:	80 93 dd 06 	sts	0x06DD, r24
			Config.Channel[OUT4].P2_Roll_gyro = ON;
    373e:	80 93 d8 06 	sts	0x06D8, r24
			Config.Channel[OUT4].P2_Roll_acc = ON;
    3742:	80 93 de 06 	sts	0x06DE, r24
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    3746:	80 93 db 06 	sts	0x06DB, r24
			Config.Channel[OUT4].P2_Yaw_gyro = ON;		
    374a:	80 93 dc 06 	sts	0x06DC, r24
    374e:	a9 c0       	rjmp	.+338    	; 0x38a2 <Load_eeprom_preset+0x37c>
			Config.Channel[OUT8].P2_offset = 100;			
			break;
				
		case QUADX:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    3750:	31 e0       	ldi	r19, 0x01	; 1
    3752:	30 93 4b 06 	sts	0x064B, r19
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    3756:	88 e2       	ldi	r24, 0x28	; 40
    3758:	80 93 f3 05 	sts	0x05F3, r24
			Config.FlightMode[P1].Roll_I_mult = 10;
    375c:	9a e0       	ldi	r25, 0x0A	; 10
    375e:	90 93 f4 05 	sts	0x05F4, r25
			Config.FlightMode[P1].Roll_limit = 10;
    3762:	90 93 f5 05 	sts	0x05F5, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    3766:	22 e0       	ldi	r18, 0x02	; 2
    3768:	20 93 f6 05 	sts	0x05F6, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    376c:	90 93 f7 05 	sts	0x05F7, r25
	
			Config.FlightMode[P1].Pitch_P_mult = 40;
    3770:	80 93 f9 05 	sts	0x05F9, r24
			Config.FlightMode[P1].Pitch_I_mult = 10;
    3774:	90 93 fa 05 	sts	0x05FA, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    3778:	90 93 fb 05 	sts	0x05FB, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    377c:	20 93 fc 05 	sts	0x05FC, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    3780:	90 93 fd 05 	sts	0x05FD, r25
	
			Config.FlightMode[P1].Yaw_P_mult = 60;
    3784:	4c e3       	ldi	r20, 0x3C	; 60
    3786:	40 93 ff 05 	sts	0x05FF, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    378a:	80 93 00 06 	sts	0x0600, r24
			Config.FlightMode[P1].Yaw_limit = 25;
    378e:	99 e1       	ldi	r25, 0x19	; 25
    3790:	90 93 01 06 	sts	0x0601, r25
			Config.FlightMode[P1].Yaw_Rate = 2;
    3794:	20 93 02 06 	sts	0x0602, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    3798:	50 93 04 06 	sts	0x0604, r21
	
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    379c:	80 93 05 06 	sts	0x0605, r24
			Config.FlightMode[P2].Roll_I_mult = 19;
    37a0:	73 e1       	ldi	r23, 0x13	; 19
    37a2:	70 93 06 06 	sts	0x0606, r23
			Config.FlightMode[P2].Roll_limit = 14;
    37a6:	6e e0       	ldi	r22, 0x0E	; 14
    37a8:	60 93 07 06 	sts	0x0607, r22
			Config.FlightMode[P2].Roll_Rate = 3;
    37ac:	53 e0       	ldi	r21, 0x03	; 3
    37ae:	50 93 08 06 	sts	0x0608, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    37b2:	30 93 09 06 	sts	0x0609, r19
	
			Config.FlightMode[P2].Pitch_P_mult = 40;
    37b6:	80 93 0b 06 	sts	0x060B, r24
			Config.FlightMode[P2].Pitch_I_mult = 19;
    37ba:	70 93 0c 06 	sts	0x060C, r23
			Config.FlightMode[P2].Pitch_limit = 14;
    37be:	60 93 0d 06 	sts	0x060D, r22
			Config.FlightMode[P2].Pitch_Rate = 3;
    37c2:	50 93 0e 06 	sts	0x060E, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    37c6:	30 93 0f 06 	sts	0x060F, r19
	
			Config.FlightMode[P2].Yaw_P_mult = 60;
    37ca:	40 93 11 06 	sts	0x0611, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    37ce:	80 93 12 06 	sts	0x0612, r24
			Config.FlightMode[P2].Yaw_limit = 25;
    37d2:	90 93 13 06 	sts	0x0613, r25
			Config.FlightMode[P2].Yaw_Rate = 2;
    37d6:	20 93 14 06 	sts	0x0614, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    37da:	8e e1       	ldi	r24, 0x1E	; 30
    37dc:	80 93 16 06 	sts	0x0616, r24
    37e0:	e0 e7       	ldi	r30, 0x70	; 112
    37e2:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    37e4:	24 e6       	ldi	r18, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    37e6:	32 e0       	ldi	r19, 0x02	; 2
				Config.Channel[i].P1_Roll_gyro = ON;
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	df 01       	movw	r26, r30
    37ec:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    37ee:	94 e6       	ldi	r25, 0x64	; 100
    37f0:	2c 93       	st	X, r18
    37f2:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    37f4:	2c 93       	st	X, r18
    37f6:	16 97       	sbiw	r26, 0x06	; 6
				Config.Channel[i].Motor_marker = MOTOR;
    37f8:	3c 93       	st	X, r19
    37fa:	1e 96       	adiw	r26, 0x0e	; 14
				Config.Channel[i].P1_Roll_gyro = ON;
    37fc:	8c 93       	st	X, r24
    37fe:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Roll_acc = ON;
    3800:	8c 93       	st	X, r24
    3802:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Roll_gyro = ON;
    3804:	8c 93       	st	X, r24
    3806:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Roll_acc = ON;
    3808:	8c 93       	st	X, r24
    380a:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Pitch_gyro = ON;
    380c:	8c 93       	st	X, r24
    380e:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Pitch_acc = ON;
    3810:	8c 93       	st	X, r24
    3812:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Pitch_gyro = ON;
    3814:	8c 93       	st	X, r24
    3816:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Pitch_acc = ON;
    3818:	8c 93       	st	X, r24
    381a:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Yaw_gyro = ON;
    381c:	8c 93       	st	X, r24
    381e:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_Yaw_gyro = ON;
    3820:	8c 93       	st	X, r24
    3822:	15 96       	adiw	r26, 0x05	; 5
				Config.Channel[i].P1_Z_delta_acc = ON;
    3824:	8c 93       	st	X, r24
				Config.Channel[i].P2_Z_delta_acc = ON;
    3826:	80 83       	st	Z, r24
    3828:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    382a:	a7 e0       	ldi	r26, 0x07	; 7
    382c:	e8 30       	cpi	r30, 0x08	; 8
    382e:	fa 07       	cpc	r31, r26
    3830:	e1 f6       	brne	.-72     	; 0x37ea <Load_eeprom_preset+0x2c4>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 15;
    3832:	2f e0       	ldi	r18, 0x0F	; 15
    3834:	20 93 5f 06 	sts	0x065F, r18
			Config.Channel[OUT1].P2_aileron_volume = 20;
    3838:	84 e1       	ldi	r24, 0x14	; 20
    383a:	80 93 60 06 	sts	0x0660, r24
			Config.Channel[OUT1].P1_elevator_volume = -15;
    383e:	41 ef       	ldi	r20, 0xF1	; 241
    3840:	40 93 61 06 	sts	0x0661, r20
			Config.Channel[OUT1].P2_elevator_volume = -20;
    3844:	3c ee       	ldi	r19, 0xEC	; 236
    3846:	30 93 62 06 	sts	0x0662, r19
			Config.Channel[OUT1].P1_rudder_volume = -40;
    384a:	e8 ed       	ldi	r30, 0xD8	; 216
    384c:	e0 93 63 06 	sts	0x0663, r30
			Config.Channel[OUT1].P2_rudder_volume = -50;
    3850:	7e ec       	ldi	r23, 0xCE	; 206
    3852:	70 93 64 06 	sts	0x0664, r23
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -15;
    3856:	40 93 85 06 	sts	0x0685, r20
			Config.Channel[OUT2].P2_aileron_volume = -20;
    385a:	30 93 86 06 	sts	0x0686, r19
			Config.Channel[OUT2].P1_elevator_volume = -15;
    385e:	40 93 87 06 	sts	0x0687, r20
			Config.Channel[OUT2].P2_elevator_volume = -20;
    3862:	30 93 88 06 	sts	0x0688, r19
			Config.Channel[OUT2].P1_rudder_volume = 40;
    3866:	68 e2       	ldi	r22, 0x28	; 40
    3868:	60 93 89 06 	sts	0x0689, r22
			Config.Channel[OUT2].P2_rudder_volume = 50;
    386c:	52 e3       	ldi	r21, 0x32	; 50
    386e:	50 93 8a 06 	sts	0x068A, r21
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = -15;
    3872:	40 93 ab 06 	sts	0x06AB, r20
			Config.Channel[OUT3].P2_aileron_volume = -20;
    3876:	30 93 ac 06 	sts	0x06AC, r19
			Config.Channel[OUT3].P1_elevator_volume = 15;
    387a:	20 93 ad 06 	sts	0x06AD, r18
			Config.Channel[OUT3].P2_elevator_volume = 20;
    387e:	80 93 ae 06 	sts	0x06AE, r24
			Config.Channel[OUT3].P1_rudder_volume = -40;
    3882:	e0 93 af 06 	sts	0x06AF, r30
			Config.Channel[OUT3].P2_rudder_volume = -50;
    3886:	70 93 b0 06 	sts	0x06B0, r23
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 15;
    388a:	20 93 d1 06 	sts	0x06D1, r18
			Config.Channel[OUT4].P2_aileron_volume = 20;
    388e:	80 93 d2 06 	sts	0x06D2, r24
			Config.Channel[OUT4].P1_elevator_volume = 15;
    3892:	20 93 d3 06 	sts	0x06D3, r18
			Config.Channel[OUT4].P2_elevator_volume = 20;
    3896:	80 93 d4 06 	sts	0x06D4, r24
			Config.Channel[OUT4].P1_rudder_volume = 40;
    389a:	60 93 d5 06 	sts	0x06D5, r22
			Config.Channel[OUT4].P2_rudder_volume = 50;
    389e:	50 93 d6 06 	sts	0x06D6, r21

			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    38a2:	8b e4       	ldi	r24, 0x4B	; 75
    38a4:	80 93 f9 06 	sts	0x06F9, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    38a8:	90 93 fa 06 	sts	0x06FA, r25
			
			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    38ac:	80 93 1d 07 	sts	0x071D, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    38b0:	90 93 1e 07 	sts	0x071E, r25
						
			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    38b4:	80 93 47 07 	sts	0x0747, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    38b8:	90 93 48 07 	sts	0x0748, r25
									
			// OUT8
			Config.Channel[OUT8].P1_offset = -100;
    38bc:	8c e9       	ldi	r24, 0x9C	; 156
    38be:	80 93 62 07 	sts	0x0762, r24
			Config.Channel[OUT8].P2_offset = 100;
    38c2:	90 93 65 07 	sts	0x0765, r25
			break;
    38c6:	c1 c0       	rjmp	.+386    	; 0x3a4a <Load_eeprom_preset+0x524>
		
		case TRICOPTER:
			// Preset simple mixing for primary channels
			Config.ArmMode = ARMABLE;
    38c8:	91 e0       	ldi	r25, 0x01	; 1
    38ca:	90 93 4b 06 	sts	0x064B, r25
		
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    38ce:	38 e2       	ldi	r19, 0x28	; 40
    38d0:	30 93 f3 05 	sts	0x05F3, r19
			Config.FlightMode[P1].Roll_I_mult = 10;
    38d4:	4a e0       	ldi	r20, 0x0A	; 10
    38d6:	40 93 f4 05 	sts	0x05F4, r20
			Config.FlightMode[P1].Roll_limit = 10;
    38da:	40 93 f5 05 	sts	0x05F5, r20
			Config.FlightMode[P1].Roll_Rate = 2;
    38de:	80 93 f6 05 	sts	0x05F6, r24
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    38e2:	40 93 f7 05 	sts	0x05F7, r20
			
			Config.FlightMode[P1].Pitch_P_mult = 40;
    38e6:	30 93 f9 05 	sts	0x05F9, r19
			Config.FlightMode[P1].Pitch_I_mult = 10;
    38ea:	40 93 fa 05 	sts	0x05FA, r20
			Config.FlightMode[P1].Pitch_limit = 10;
    38ee:	40 93 fb 05 	sts	0x05FB, r20
			Config.FlightMode[P1].Pitch_Rate = 2;
    38f2:	80 93 fc 05 	sts	0x05FC, r24
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    38f6:	40 93 fd 05 	sts	0x05FD, r20
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    38fa:	6c e3       	ldi	r22, 0x3C	; 60
    38fc:	60 93 ff 05 	sts	0x05FF, r22
			Config.FlightMode[P1].Yaw_I_mult = 40;
    3900:	30 93 00 06 	sts	0x0600, r19
			Config.FlightMode[P1].Yaw_limit = 25;
    3904:	49 e1       	ldi	r20, 0x19	; 25
    3906:	40 93 01 06 	sts	0x0601, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    390a:	80 93 02 06 	sts	0x0602, r24
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    390e:	50 93 04 06 	sts	0x0604, r21
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    3912:	30 93 05 06 	sts	0x0605, r19
			Config.FlightMode[P2].Roll_I_mult = 19;
    3916:	e3 e1       	ldi	r30, 0x13	; 19
    3918:	e0 93 06 06 	sts	0x0606, r30
			Config.FlightMode[P2].Roll_limit = 14;
    391c:	7e e0       	ldi	r23, 0x0E	; 14
    391e:	70 93 07 06 	sts	0x0607, r23
			Config.FlightMode[P2].Roll_Rate = 3;
    3922:	53 e0       	ldi	r21, 0x03	; 3
    3924:	50 93 08 06 	sts	0x0608, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3928:	90 93 09 06 	sts	0x0609, r25
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    392c:	30 93 0b 06 	sts	0x060B, r19
			Config.FlightMode[P2].Pitch_I_mult = 19;
    3930:	e0 93 0c 06 	sts	0x060C, r30
			Config.FlightMode[P2].Pitch_limit = 14;
    3934:	70 93 0d 06 	sts	0x060D, r23
			Config.FlightMode[P2].Pitch_Rate = 3;
    3938:	50 93 0e 06 	sts	0x060E, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    393c:	90 93 0f 06 	sts	0x060F, r25
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    3940:	60 93 11 06 	sts	0x0611, r22
			Config.FlightMode[P2].Yaw_I_mult = 40;
    3944:	30 93 12 06 	sts	0x0612, r19
			Config.FlightMode[P2].Yaw_limit = 25;
    3948:	40 93 13 06 	sts	0x0613, r20
			Config.FlightMode[P2].Yaw_Rate = 2;
    394c:	80 93 14 06 	sts	0x0614, r24
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3950:	4e e1       	ldi	r20, 0x1E	; 30
    3952:	40 93 16 06 	sts	0x0616, r20
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3956:	20 93 5c 06 	sts	0x065C, r18
				Config.Channel[i].P2_throttle_volume = 100;
    395a:	20 93 5d 06 	sts	0x065D, r18
				Config.Channel[i].Motor_marker = MOTOR;
    395e:	80 93 57 06 	sts	0x0657, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3962:	20 93 82 06 	sts	0x0682, r18
				Config.Channel[i].P2_throttle_volume = 100;
    3966:	20 93 83 06 	sts	0x0683, r18
				Config.Channel[i].Motor_marker = MOTOR;
    396a:	80 93 7d 06 	sts	0x067D, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    396e:	20 93 a8 06 	sts	0x06A8, r18
				Config.Channel[i].P2_throttle_volume = 100;
    3972:	20 93 a9 06 	sts	0x06A9, r18
				Config.Channel[i].Motor_marker = MOTOR;
    3976:	80 93 a3 06 	sts	0x06A3, r24
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 30;
    397a:	40 93 5f 06 	sts	0x065F, r20
			Config.Channel[OUT1].P2_aileron_volume = 40;
    397e:	30 93 60 06 	sts	0x0660, r19
			Config.Channel[OUT1].P1_elevator_volume = -15;
    3982:	61 ef       	ldi	r22, 0xF1	; 241
    3984:	60 93 61 06 	sts	0x0661, r22
			Config.Channel[OUT1].P2_elevator_volume = -20;
    3988:	5c ee       	ldi	r21, 0xEC	; 236
    398a:	50 93 62 06 	sts	0x0662, r21
			Config.Channel[OUT1].P1_Roll_gyro = ON;
    398e:	90 93 65 06 	sts	0x0665, r25
			Config.Channel[OUT1].P1_Roll_acc = ON;
    3992:	90 93 6b 06 	sts	0x066B, r25
			Config.Channel[OUT1].P2_Roll_gyro = ON;
    3996:	90 93 66 06 	sts	0x0666, r25
			Config.Channel[OUT1].P2_Roll_acc = ON;
    399a:	90 93 6c 06 	sts	0x066C, r25
			Config.Channel[OUT1].P1_Pitch_gyro = SCALE;
    399e:	80 93 67 06 	sts	0x0667, r24
			Config.Channel[OUT1].P1_Pitch_acc = SCALE;
    39a2:	80 93 6d 06 	sts	0x066D, r24
			Config.Channel[OUT1].P2_Pitch_gyro = SCALE;
    39a6:	80 93 68 06 	sts	0x0668, r24
			Config.Channel[OUT1].P2_Pitch_acc = SCALE;
    39aa:	80 93 6e 06 	sts	0x066E, r24
			Config.Channel[OUT1].P1_Z_delta_acc = ON;
    39ae:	90 93 6f 06 	sts	0x066F, r25
			Config.Channel[OUT1].P2_Z_delta_acc = ON;
    39b2:	90 93 70 06 	sts	0x0670, r25
		
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -30;
    39b6:	72 ee       	ldi	r23, 0xE2	; 226
    39b8:	70 93 85 06 	sts	0x0685, r23
			Config.Channel[OUT2].P2_aileron_volume = -40;
    39bc:	78 ed       	ldi	r23, 0xD8	; 216
    39be:	70 93 86 06 	sts	0x0686, r23
			Config.Channel[OUT2].P1_elevator_volume = -15;
    39c2:	60 93 87 06 	sts	0x0687, r22
			Config.Channel[OUT2].P2_elevator_volume = -20;
    39c6:	50 93 88 06 	sts	0x0688, r21
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    39ca:	90 93 8b 06 	sts	0x068B, r25
			Config.Channel[OUT2].P1_Roll_acc = ON;
    39ce:	90 93 91 06 	sts	0x0691, r25
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    39d2:	90 93 8c 06 	sts	0x068C, r25
			Config.Channel[OUT2].P2_Roll_acc = ON;
    39d6:	90 93 92 06 	sts	0x0692, r25
			Config.Channel[OUT2].P1_Pitch_gyro = SCALE;
    39da:	80 93 8d 06 	sts	0x068D, r24
			Config.Channel[OUT2].P1_Pitch_acc = SCALE;
    39de:	80 93 93 06 	sts	0x0693, r24
			Config.Channel[OUT2].P2_Pitch_gyro = SCALE;
    39e2:	80 93 8e 06 	sts	0x068E, r24
			Config.Channel[OUT2].P2_Pitch_acc = SCALE;
    39e6:	80 93 94 06 	sts	0x0694, r24
			Config.Channel[OUT2].P1_Z_delta_acc = ON;
    39ea:	90 93 95 06 	sts	0x0695, r25
			Config.Channel[OUT2].P2_Z_delta_acc = ON;
    39ee:	90 93 96 06 	sts	0x0696, r25
		
			// OUT3
			Config.Channel[OUT3].P1_elevator_volume = 30;
    39f2:	40 93 ad 06 	sts	0x06AD, r20
			Config.Channel[OUT3].P2_elevator_volume = 40;
    39f6:	30 93 ae 06 	sts	0x06AE, r19
			Config.Channel[OUT3].P1_Pitch_gyro = SCALE;
    39fa:	80 93 b3 06 	sts	0x06B3, r24
			Config.Channel[OUT3].P1_Pitch_acc = SCALE;
    39fe:	80 93 b9 06 	sts	0x06B9, r24
			Config.Channel[OUT3].P2_Pitch_gyro = SCALE;
    3a02:	80 93 b4 06 	sts	0x06B4, r24
			Config.Channel[OUT3].P2_Pitch_acc = SCALE;
    3a06:	80 93 ba 06 	sts	0x06BA, r24
			Config.Channel[OUT3].P1_Z_delta_acc = ON;
    3a0a:	90 93 bb 06 	sts	0x06BB, r25
			Config.Channel[OUT3].P2_Z_delta_acc = ON;
    3a0e:	90 93 bc 06 	sts	0x06BC, r25
			
			// OUT4
			Config.Channel[OUT4].Motor_marker = ASERVO;
    3a12:	10 92 c9 06 	sts	0x06C9, r1
			Config.Channel[OUT4].P1_rudder_volume = 75;
    3a16:	8b e4       	ldi	r24, 0x4B	; 75
    3a18:	80 93 d5 06 	sts	0x06D5, r24
			Config.Channel[OUT4].P2_rudder_volume = 100;
    3a1c:	20 93 d6 06 	sts	0x06D6, r18
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    3a20:	90 93 db 06 	sts	0x06DB, r25
			Config.Channel[OUT4].P2_Yaw_gyro = ON;
    3a24:	90 93 dc 06 	sts	0x06DC, r25
			
			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    3a28:	80 93 f9 06 	sts	0x06F9, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    3a2c:	20 93 fa 06 	sts	0x06FA, r18

			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    3a30:	80 93 1d 07 	sts	0x071D, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    3a34:	20 93 1e 07 	sts	0x071E, r18

			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    3a38:	80 93 47 07 	sts	0x0747, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    3a3c:	20 93 48 07 	sts	0x0748, r18

			// OUT8
			Config.Channel[OUT8].P1_offset = -100;
    3a40:	8c e9       	ldi	r24, 0x9C	; 156
    3a42:	80 93 62 07 	sts	0x0762, r24
			Config.Channel[OUT8].P2_offset = 100;
    3a46:	20 93 65 07 	sts	0x0765, r18
			break;
		
		default:
			break;
	}
    3a4a:	df 91       	pop	r29
    3a4c:	cf 91       	pop	r28
    3a4e:	1f 91       	pop	r17
    3a50:	0f 91       	pop	r16
    3a52:	08 95       	ret

00003a54 <Set_EEPROM_Default_Config>:
	return new_filter;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    3a58:	8e e1       	ldi	r24, 0x1E	; 30
    3a5a:	92 e0       	ldi	r25, 0x02	; 2
    3a5c:	e1 ec       	ldi	r30, 0xC1	; 193
    3a5e:	f5 e0       	ldi	r31, 0x05	; 5
    3a60:	df 01       	movw	r26, r30
    3a62:	9c 01       	movw	r18, r24
    3a64:	1d 92       	st	X+, r1
    3a66:	21 50       	subi	r18, 0x01	; 1
    3a68:	30 40       	sbci	r19, 0x00	; 0
    3a6a:	e1 f7       	brne	.-8      	; 0x3a64 <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    3a6c:	89 e3       	ldi	r24, 0x39	; 57
    3a6e:	80 93 c1 05 	sts	0x05C1, r24

	// General
	Config.RxMode = SBUS;
    3a72:	82 e0       	ldi	r24, 0x02	; 2
    3a74:	80 93 ea 05 	sts	0x05EA, r24
	Config.FlightChan = GEAR;
    3a78:	94 e0       	ldi	r25, 0x04	; 4
    3a7a:	90 93 ee 05 	sts	0x05EE, r25
	Config.ArmMode = ARMABLE;
    3a7e:	21 e0       	ldi	r18, 0x01	; 1
    3a80:	20 93 4b 06 	sts	0x064B, r18
	Config.Servo_rate = FAST;
    3a84:	80 93 eb 05 	sts	0x05EB, r24
	Config.PWM_Sync = GEAR;
    3a88:	90 93 ec 05 	sts	0x05EC, r25
	Config.Acc_LPF = HZ21;
    3a8c:	80 93 4f 06 	sts	0x064F, r24
	Config.Gyro_LPF = NOFILTER;
    3a90:	87 e0       	ldi	r24, 0x07	; 7
    3a92:	80 93 50 06 	sts	0x0650, r24
	Config.MPU6050_LPF = HZ44;
    3a96:	93 e0       	ldi	r25, 0x03	; 3
    3a98:	90 93 4e 06 	sts	0x064E, r25
	Config.CF_factor = 7;
    3a9c:	80 93 51 06 	sts	0x0651, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    3aa0:	8e e1       	ldi	r24, 0x1E	; 30
    3aa2:	80 93 4c 06 	sts	0x064C, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    3aa6:	82 e3       	ldi	r24, 0x32	; 50
    3aa8:	80 93 f0 05 	sts	0x05F0, r24
	
	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    3aac:	80 e8       	ldi	r24, 0x80	; 128
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	90 93 b2 07 	sts	0x07B2, r25
    3ab4:	80 93 b1 07 	sts	0x07B1, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    3ab8:	84 e2       	ldi	r24, 0x24	; 36
    3aba:	80 93 4a 06 	sts	0x064A, r24
    3abe:	e8 ef       	ldi	r30, 0xF8	; 248
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	c2 ec       	ldi	r28, 0xC2	; 194
    3ac4:	d5 e0       	ldi	r29, 0x05	; 5
    3ac6:	ab e9       	ldi	r26, 0x9B	; 155
    3ac8:	b7 e0       	ldi	r27, 0x07	; 7
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    3aca:	86 ea       	ldi	r24, 0xA6	; 166
    3acc:	9e e0       	ldi	r25, 0x0E	; 14
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    3ace:	24 91       	lpm	r18, Z
    3ad0:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    3ad2:	8d 93       	st	X+, r24
    3ad4:	9d 93       	st	X+, r25
    3ad6:	31 96       	adiw	r30, 0x01	; 1
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    3ad8:	31 e0       	ldi	r19, 0x01	; 1
    3ada:	e0 30       	cpi	r30, 0x00	; 0
    3adc:	f3 07       	cpc	r31, r19
    3ade:	b9 f7       	brne	.-18     	; 0x3ace <Set_EEPROM_Default_Config+0x7a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    3ae0:	8e eb       	ldi	r24, 0xBE	; 190
    3ae2:	9a e0       	ldi	r25, 0x0A	; 10
    3ae4:	90 93 9c 07 	sts	0x079C, r25
    3ae8:	80 93 9b 07 	sts	0x079B, r24
    3aec:	e7 e7       	ldi	r30, 0x77	; 119
    3aee:	f6 e0       	ldi	r31, 0x06	; 6
    3af0:	cb e8       	ldi	r28, 0x8B	; 139
    3af2:	d7 e0       	ldi	r29, 0x07	; 7
    3af4:	63 e9       	ldi	r22, 0x93	; 147
    3af6:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3af8:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3afa:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    3afc:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    3afe:	34 e6       	ldi	r19, 0x64	; 100
    3b00:	cf 01       	movw	r24, r30
    3b02:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3b04:	dc 01       	movw	r26, r24
    3b06:	5c 93       	st	X, r21
    3b08:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	2c 93       	st	X, r18
    3b0e:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    3b10:	dc 01       	movw	r26, r24
    3b12:	2c 93       	st	X, r18
    3b14:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    3b16:	dc 01       	movw	r26, r24
    3b18:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3b1a:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    3b1c:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    3b1e:	db 01       	movw	r26, r22
    3b20:	3d 93       	st	X+, r19
    3b22:	bd 01       	movw	r22, r26
    3b24:	b6 96       	adiw	r30, 0x26	; 38
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3b26:	b7 e0       	ldi	r27, 0x07	; 7
    3b28:	e7 3a       	cpi	r30, 0xA7	; 167
    3b2a:	fb 07       	cpc	r31, r27
    3b2c:	49 f7       	brne	.-46     	; 0x3b00 <Set_EEPROM_Default_Config+0xac>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Load manual defaults
	Load_eeprom_preset(QUADX);
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	0e 94 93 1a 	call	0x3526	; 0x3526 <Load_eeprom_preset>
	Config.Preset = OPTIONS; // Menu will display "Options"
    3b34:	84 e0       	ldi	r24, 0x04	; 4
    3b36:	80 93 52 06 	sts	0x0652, r24
}
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	08 95       	ret

00003b40 <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
    3b44:	1f 92       	push	r1
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    3b4a:	4e e1       	ldi	r20, 0x1E	; 30
    3b4c:	52 e0       	ldi	r21, 0x02	; 2
    3b4e:	60 e0       	ldi	r22, 0x00	; 0
    3b50:	70 e0       	ldi	r23, 0x00	; 0
    3b52:	81 ec       	ldi	r24, 0xC1	; 193
    3b54:	95 e0       	ldi	r25, 0x05	; 5
    3b56:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    3b5a:	80 91 c1 05 	lds	r24, 0x05C1
    3b5e:	87 33       	cpi	r24, 0x37	; 55
    3b60:	79 f0       	breq	.+30     	; 0x3b80 <Initial_EEPROM_Config_Load+0x40>
    3b62:	28 f4       	brcc	.+10     	; 0x3b6e <Initial_EEPROM_Config_Load+0x2e>
    3b64:	85 33       	cpi	r24, 0x35	; 53
    3b66:	41 f0       	breq	.+16     	; 0x3b78 <Initial_EEPROM_Config_Load+0x38>
    3b68:	86 33       	cpi	r24, 0x36	; 54
    3b6a:	41 f0       	breq	.+16     	; 0x3b7c <Initial_EEPROM_Config_Load+0x3c>
    3b6c:	0f c0       	rjmp	.+30     	; 0x3b8c <Initial_EEPROM_Config_Load+0x4c>
    3b6e:	88 33       	cpi	r24, 0x38	; 56
    3b70:	49 f0       	breq	.+18     	; 0x3b84 <Initial_EEPROM_Config_Load+0x44>
    3b72:	89 33       	cpi	r24, 0x39	; 57
    3b74:	69 f0       	breq	.+26     	; 0x3b90 <Initial_EEPROM_Config_Load+0x50>
    3b76:	0a c0       	rjmp	.+20     	; 0x3b8c <Initial_EEPROM_Config_Load+0x4c>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1_B7();
    3b78:	0e 94 ef 17 	call	0x2fde	; 0x2fde <Update_V1_0_to_V1_1_B7>
			// Fall through...

		case V1_1_B7_SIGNATURE:				// V1.1 Beta 7 (or below) detected
			Update_V1_1_to_V1_1_B8();	
    3b7c:	0e 94 24 1a 	call	0x3448	; 0x3448 <Update_V1_1_to_V1_1_B8>
			// Fall through...

		case V1_1_B8_SIGNATURE:				// V1.1 Beta 8-9 detected
			Update_V1_1B8_to_V1_1_B10();
    3b80:	0e 94 6d 1a 	call	0x34da	; 0x34da <Update_V1_1B8_to_V1_1_B10>
			// Fall through...

		case V1_1_B10_SIGNATURE:			// V1.1 Beta 10+ detected
			Update_V1_1B10_to_V1_1_B12();
    3b84:	0e 94 89 1a 	call	0x3512	; 0x3512 <Update_V1_1B10_to_V1_1_B12>
			updated = true;
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	03 c0       	rjmp	.+6      	; 0x3b92 <Initial_EEPROM_Config_Load+0x52>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    3b8c:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    3b90:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    3b92:	89 83       	std	Y+1, r24	; 0x01
    3b94:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	0f 90       	pop	r0
    3b9c:	df 91       	pop	r29
    3b9e:	cf 91       	pop	r28
    3ba0:	08 95       	ret

00003ba2 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
    3ba6:	cd b7       	in	r28, 0x3d	; 61
    3ba8:	de b7       	in	r29, 0x3e	; 62
    3baa:	ac 97       	sbiw	r28, 0x2c	; 44
    3bac:	0f b6       	in	r0, 0x3f	; 63
    3bae:	f8 94       	cli
    3bb0:	de bf       	out	0x3e, r29	; 62
    3bb2:	0f be       	out	0x3f, r0	; 63
    3bb4:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	
	// Do all init tasks
	init();
    3bb6:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <init>
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    3bba:	b3 e0       	ldi	r27, 0x03	; 3
    3bbc:	8b 2e       	mov	r8, r27
    3bbe:	91 2c       	mov	r9, r1
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    3bc0:	19 a6       	std	Y+41, r1	; 0x29
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    3bc2:	18 a6       	std	Y+40, r1	; 0x28
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    3bc4:	13 e0       	ldi	r17, 0x03	; 3
    3bc6:	71 2e       	mov	r7, r17

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    3bc8:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    3bca:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    3bcc:	b1 2c       	mov	r11, r1
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    3bce:	1f 8a       	std	Y+23, r1	; 0x17
    3bd0:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;
    3bd2:	1f a2       	std	Y+39, r1	; 0x27
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    3bd4:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    3bd6:	1d a2       	std	Y+37, r1	; 0x25
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    3bd8:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    3bda:	1b a2       	std	Y+35, r1	; 0x23
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    3bdc:	1a a2       	std	Y+34, r1	; 0x22

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    3bde:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    3be0:	18 a2       	std	Y+32, r1	; 0x20
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    3be2:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    3be4:	41 2c       	mov	r4, r1
    3be6:	51 2c       	mov	r5, r1
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    3be8:	21 2c       	mov	r2, r1
    3bea:	31 2c       	mov	r3, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    3bec:	1b 8a       	std	Y+19, r1	; 0x13
    3bee:	1a 8a       	std	Y+18, r1	; 0x12
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    3bf0:	19 8a       	std	Y+17, r1	; 0x11
    3bf2:	18 8a       	std	Y+16, r1	; 0x10
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    3bf4:	1c a6       	std	Y+44, r1	; 0x2c
    3bf6:	1b a6       	std	Y+43, r1	; 0x2b
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    3bf8:	1d 8e       	std	Y+29, r1	; 0x1d
    3bfa:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    3bfc:	1a 8e       	std	Y+26, r1	; 0x1a
    3bfe:	19 8e       	std	Y+25, r1	; 0x19
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    3c00:	1f 86       	std	Y+15, r1	; 0x0f
    3c02:	1e 86       	std	Y+14, r1	; 0x0e
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    3c04:	01 e6       	ldi	r16, 0x61	; 97
    3c06:	c0 2e       	mov	r12, r16
    3c08:	01 e5       	ldi	r16, 0x51	; 81
    3c0a:	d0 2e       	mov	r13, r16
    3c0c:	e1 2c       	mov	r14, r1
    3c0e:	f1 2c       	mov	r15, r1
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    3c10:	1e 82       	std	Y+6, r1	; 0x06
    3c12:	1f 82       	std	Y+7, r1	; 0x07
    3c14:	18 86       	std	Y+8, r1	; 0x08
    3c16:	19 86       	std	Y+9, r1	; 0x09
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    3c18:	1a 82       	std	Y+2, r1	; 0x02
    3c1a:	1b 82       	std	Y+3, r1	; 0x03
    3c1c:	1c 82       	std	Y+4, r1	; 0x04
    3c1e:	1d 82       	std	Y+5, r1	; 0x05
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    3c20:	21 e0       	ldi	r18, 0x01	; 1
    3c22:	2a 87       	std	Y+10, r18	; 0x0a
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    3c24:	00 e0       	ldi	r16, 0x00	; 0
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    3c26:	1b 8e       	std	Y+27, r1	; 0x1b
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    3c28:	1b 86       	std	Y+11, r1	; 0x0b
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    3c2a:	1d 86       	std	Y+13, r1	; 0x0d
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    3c2c:	1c 86       	std	Y+12, r1	; 0x0c

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    3c2e:	19 82       	std	Y+1, r1	; 0x01

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    3c30:	80 91 18 05 	lds	r24, 0x0518
    3c34:	8f 5f       	subi	r24, 0xFF	; 255
    3c36:	80 93 18 05 	sts	0x0518, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    3c3a:	80 91 0b 08 	lds	r24, 0x080B
    3c3e:	88 23       	and	r24, r24
    3c40:	31 f0       	breq	.+12     	; 0x3c4e <main+0xac>
		{
			InterruptCounter++;
    3c42:	4e 89       	ldd	r20, Y+22	; 0x16
    3c44:	5f 89       	ldd	r21, Y+23	; 0x17
    3c46:	4f 5f       	subi	r20, 0xFF	; 255
    3c48:	5f 4f       	sbci	r21, 0xFF	; 255
    3c4a:	5f 8b       	std	Y+23, r21	; 0x17
    3c4c:	4e 8b       	std	Y+22, r20	; 0x16
		//* Increment Status_seconds every second and trigger
		//* a RC rate resample every second
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    3c4e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3c50:	3f 85       	ldd	r19, Y+15	; 0x0f
    3c52:	2c 34       	cpi	r18, 0x4C	; 76
    3c54:	3c 44       	sbci	r19, 0x4C	; 76
    3c56:	98 f0       	brcs	.+38     	; 0x3c7e <main+0xdc>
		{
			Status_seconds++;
    3c58:	28 8d       	ldd	r18, Y+24	; 0x18
    3c5a:	2f 5f       	subi	r18, 0xFF	; 255
    3c5c:	28 8f       	std	Y+24, r18	; 0x18
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    3c5e:	4e 89       	ldd	r20, Y+22	; 0x16
    3c60:	5f 89       	ldd	r21, Y+23	; 0x17
    3c62:	50 93 1d 05 	sts	0x051D, r21
    3c66:	40 93 1c 05 	sts	0x051C, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3c6a:	80 91 eb 05 	lds	r24, 0x05EB
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    3c6e:	1f 8a       	std	Y+23, r1	; 0x17
    3c70:	1e 8a       	std	Y+22, r1	; 0x16

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    3c72:	1f 86       	std	Y+15, r1	; 0x0f
    3c74:	1e 86       	std	Y+14, r1	; 0x0e
			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3c76:	82 30       	cpi	r24, 0x02	; 2
    3c78:	11 f4       	brne	.+4      	; 0x3c7e <main+0xdc>
			{
				ResampleRCRate = true;
    3c7a:	21 e0       	ldi	r18, 0x01	; 1
    3c7c:	2b 8f       	std	Y+27, r18	; 0x1b
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    3c7e:	81 2f       	mov	r24, r17
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	8b 30       	cpi	r24, 0x0B	; 11
    3c84:	91 05       	cpc	r25, r1
    3c86:	08 f0       	brcs	.+2      	; 0x3c8a <main+0xe8>
    3c88:	6e c0       	rjmp	.+220    	; 0x3d66 <main+0x1c4>
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	e2 5c       	subi	r30, 0xC2	; 194
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	0c 94 67 4e 	jmp	0x9cce	; 0x9cce <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    3c94:	83 b1       	in	r24, 0x03	; 3
    3c96:	80 7f       	andi	r24, 0xF0	; 240
    3c98:	80 3f       	cpi	r24, 0xF0	; 240
    3c9a:	41 f0       	breq	.+16     	; 0x3cac <main+0x10a>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    3c9c:	80 91 6e 00 	lds	r24, 0x006E
    3ca0:	81 60       	ori	r24, 0x01	; 1
    3ca2:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    3ca6:	13 e0       	ldi	r17, 0x03	; 3
					// Reset the status screen timeout
					Status_seconds = 0;
    3ca8:	18 8e       	std	Y+24, r1	; 0x18
    3caa:	5d c0       	rjmp	.+186    	; 0x3d66 <main+0x1c4>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    3cac:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	85 bb       	out	0x15, r24	; 21
    3cb4:	58 c0       	rjmp	.+176    	; 0x3d66 <main+0x1c4>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3cb6:	80 91 f0 07 	lds	r24, 0x07F0
    3cba:	81 11       	cpse	r24, r1
    3cbc:	49 c0       	rjmp	.+146    	; 0x3d50 <main+0x1ae>
    3cbe:	01 11       	cpse	r16, r1
    3cc0:	47 c0       	rjmp	.+142    	; 0x3d50 <main+0x1ae>
    3cc2:	80 91 19 05 	lds	r24, 0x0519
    3cc6:	88 23       	and	r24, r24
    3cc8:	09 f4       	brne	.+2      	; 0x3ccc <main+0x12a>
    3cca:	4d c0       	rjmp	.+154    	; 0x3d66 <main+0x1c4>
				{
					// Ready to move on
					Menu_mode = STATUS;
    3ccc:	14 e0       	ldi	r17, 0x04	; 4
    3cce:	4d c0       	rjmp	.+154    	; 0x3d6a <main+0x1c8>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    3cd0:	0e 94 c1 14 	call	0x2982	; 0x2982 <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    3cd4:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    3cd6:	1a 8e       	std	Y+26, r1	; 0x1a
    3cd8:	19 8e       	std	Y+25, r1	; 0x19
    3cda:	47 c0       	rjmp	.+142    	; 0x3d6a <main+0x1c8>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    3cdc:	1f 9b       	sbis	0x03, 7	; 3
    3cde:	43 c0       	rjmp	.+134    	; 0x3d66 <main+0x1c4>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    3ce0:	15 e0       	ldi	r17, 0x05	; 5
    3ce2:	41 c0       	rjmp	.+130    	; 0x3d66 <main+0x1c4>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
    3ce4:	38 8d       	ldd	r19, Y+24	; 0x18
    3ce6:	3a 30       	cpi	r19, 0x0A	; 10
    3ce8:	b0 f5       	brcc	.+108    	; 0x3d56 <main+0x1b4>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    3cea:	1f 9b       	sbis	0x03, 7	; 3
    3cec:	36 c0       	rjmp	.+108    	; 0x3d5a <main+0x1b8>
					// Prevent PWM output
					PWMOverride = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    3cee:	49 8d       	ldd	r20, Y+25	; 0x19
    3cf0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3cf2:	43 31       	cpi	r20, 0x13	; 19
    3cf4:	53 41       	sbci	r21, 0x13	; 19
    3cf6:	b8 f1       	brcs	.+110    	; 0x3d66 <main+0x1c4>
				{
					Menu_mode = PRESTATUS;
    3cf8:	13 e0       	ldi	r17, 0x03	; 3
    3cfa:	37 c0       	rjmp	.+110    	; 0x3d6a <main+0x1c8>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3cfc:	80 91 f0 07 	lds	r24, 0x07F0
    3d00:	81 11       	cpse	r24, r1
    3d02:	2d c0       	rjmp	.+90     	; 0x3d5e <main+0x1bc>
    3d04:	01 11       	cpse	r16, r1
    3d06:	2b c0       	rjmp	.+86     	; 0x3d5e <main+0x1bc>
    3d08:	80 91 19 05 	lds	r24, 0x0519
    3d0c:	88 23       	and	r24, r24
    3d0e:	69 f1       	breq	.+90     	; 0x3d6a <main+0x1c8>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    3d10:	18 e0       	ldi	r17, 0x08	; 8
    3d12:	29 c0       	rjmp	.+82     	; 0x3d66 <main+0x1c4>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    3d14:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    3d18:	19 e0       	ldi	r17, 0x09	; 9
    3d1a:	27 c0       	rjmp	.+78     	; 0x3d6a <main+0x1c8>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3d1c:	80 91 f0 07 	lds	r24, 0x07F0
    3d20:	81 11       	cpse	r24, r1
    3d22:	1f c0       	rjmp	.+62     	; 0x3d62 <main+0x1c0>
    3d24:	01 11       	cpse	r16, r1
    3d26:	1d c0       	rjmp	.+58     	; 0x3d62 <main+0x1c0>
    3d28:	80 91 19 05 	lds	r24, 0x0519
    3d2c:	88 23       	and	r24, r24
    3d2e:	e9 f0       	breq	.+58     	; 0x3d6a <main+0x1c8>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3d30:	10 e0       	ldi	r17, 0x00	; 0
    3d32:	19 c0       	rjmp	.+50     	; 0x3d66 <main+0x1c4>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    3d34:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    3d36:	80 91 20 05 	lds	r24, 0x0520
    3d3a:	84 60       	ori	r24, 0x04	; 4
    3d3c:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    3d40:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    3d42:	0e 94 70 38 	call	0x70e0	; 0x70e0 <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    3d46:	0e 94 de 2c 	call	0x59bc	; 0x59bc <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    3d4a:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    3d4c:	18 8e       	std	Y+24, r1	; 0x18
    3d4e:	0d c0       	rjmp	.+26     	; 0x3d6a <main+0x1c8>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    3d50:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3d52:	00 e0       	ldi	r16, 0x00	; 0
    3d54:	0a c0       	rjmp	.+20     	; 0x3d6a <main+0x1c8>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    3d56:	17 e0       	ldi	r17, 0x07	; 7
    3d58:	06 c0       	rjmp	.+12     	; 0x3d66 <main+0x1c4>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    3d5a:	1a e0       	ldi	r17, 0x0A	; 10
    3d5c:	06 c0       	rjmp	.+12     	; 0x3d6a <main+0x1c8>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    3d5e:	18 e0       	ldi	r17, 0x08	; 8
    3d60:	01 c0       	rjmp	.+2      	; 0x3d64 <main+0x1c2>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3d62:	10 e0       	ldi	r17, 0x00	; 0
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3d64:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    3d66:	a1 2c       	mov	r10, r1
    3d68:	02 c0       	rjmp	.+4      	; 0x3d6e <main+0x1cc>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    3d6a:	aa 24       	eor	r10, r10
    3d6c:	a3 94       	inc	r10
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message
		if (Overdue)
    3d6e:	80 91 19 05 	lds	r24, 0x0519
    3d72:	88 23       	and	r24, r24
    3d74:	a1 f0       	breq	.+40     	; 0x3d9e <main+0x1fc>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    3d76:	80 91 20 05 	lds	r24, 0x0520
    3d7a:	82 60       	ori	r24, 0x02	; 2
    3d7c:	80 93 20 05 	sts	0x0520, r24

			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    3d80:	80 91 4b 06 	lds	r24, 0x064B
    3d84:	81 30       	cpi	r24, 0x01	; 1
    3d86:	81 f4       	brne	.+32     	; 0x3da8 <main+0x206>
    3d88:	80 91 20 05 	lds	r24, 0x0520
    3d8c:	82 fd       	sbrc	r24, 2
    3d8e:	0c c0       	rjmp	.+24     	; 0x3da8 <main+0x206>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    3d90:	80 91 20 05 	lds	r24, 0x0520
    3d94:	84 60       	ori	r24, 0x04	; 4
    3d96:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;							// Signal that FC is now disarmed
    3d9a:	2b 98       	cbi	0x05, 3	; 5
    3d9c:	05 c0       	rjmp	.+10     	; 0x3da8 <main+0x206>

		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    3d9e:	80 91 20 05 	lds	r24, 0x0520
    3da2:	8d 7f       	andi	r24, 0xFD	; 253
    3da4:	80 93 20 05 	sts	0x0520, r24
		}

		// Beep buzzer if Vbat lower than trigger		
		if (GetVbat() < Config.PowerTriggerActual)
    3da8:	0e 94 c4 4b 	call	0x9788	; 0x9788 <GetVbat>
    3dac:	20 91 47 06 	lds	r18, 0x0647
    3db0:	30 91 48 06 	lds	r19, 0x0648
    3db4:	82 17       	cp	r24, r18
    3db6:	93 07       	cpc	r25, r19
    3db8:	20 f4       	brcc	.+8      	; 0x3dc2 <main+0x220>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    3dba:	80 91 20 05 	lds	r24, 0x0520
    3dbe:	88 60       	ori	r24, 0x08	; 8
    3dc0:	03 c0       	rjmp	.+6      	; 0x3dc8 <main+0x226>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    3dc2:	80 91 20 05 	lds	r24, 0x0520
    3dc6:	87 7f       	andi	r24, 0xF7	; 247
    3dc8:	80 93 20 05 	sts	0x0520, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    3dcc:	80 91 20 05 	lds	r24, 0x0520
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    3dd0:	83 fd       	sbrc	r24, 3
    3dd2:	08 c0       	rjmp	.+16     	; 0x3de4 <main+0x242>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3dd4:	80 91 20 05 	lds	r24, 0x0520
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    3dd8:	81 fd       	sbrc	r24, 1
    3dda:	04 c0       	rjmp	.+8      	; 0x3de4 <main+0x242>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    3ddc:	80 91 20 05 	lds	r24, 0x0520

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3de0:	80 ff       	sbrs	r24, 0
    3de2:	06 c0       	rjmp	.+12     	; 0x3df0 <main+0x24e>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    3de4:	80 91 1e 05 	lds	r24, 0x051E
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    3de8:	84 ff       	sbrs	r24, 4
    3dea:	02 c0       	rjmp	.+4      	; 0x3df0 <main+0x24e>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    3dec:	29 9a       	sbi	0x05, 1	; 5
    3dee:	01 c0       	rjmp	.+2      	; 0x3df2 <main+0x250>
		}
		else 
		{
			LVA = 0;
    3df0:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    3df2:	80 91 4b 06 	lds	r24, 0x064B
    3df6:	81 30       	cpi	r24, 0x01	; 1
    3df8:	09 f0       	breq	.+2      	; 0x3dfc <main+0x25a>
    3dfa:	96 c0       	rjmp	.+300    	; 0x3f28 <main+0x386>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3dfc:	80 91 53 08 	lds	r24, 0x0853
    3e00:	90 91 54 08 	lds	r25, 0x0854
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    3e04:	81 34       	cpi	r24, 0x41	; 65
    3e06:	9c 4f       	sbci	r25, 0xFC	; 252
    3e08:	44 f0       	brlt	.+16     	; 0x3e1a <main+0x278>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3e0a:	80 91 53 08 	lds	r24, 0x0853
    3e0e:	90 91 54 08 	lds	r25, 0x0854
    3e12:	80 3c       	cpi	r24, 0xC0	; 192
    3e14:	93 40       	sbci	r25, 0x03	; 3
    3e16:	0c f4       	brge	.+2      	; 0x3e1a <main+0x278>
    3e18:	57 c0       	rjmp	.+174    	; 0x3ec8 <main+0x326>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3e1a:	80 91 55 08 	lds	r24, 0x0855
    3e1e:	90 91 56 08 	lds	r25, 0x0856
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3e22:	81 34       	cpi	r24, 0x41	; 65
    3e24:	9c 4f       	sbci	r25, 0xFC	; 252
    3e26:	44 f0       	brlt	.+16     	; 0x3e38 <main+0x296>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3e28:	80 91 55 08 	lds	r24, 0x0855
    3e2c:	90 91 56 08 	lds	r25, 0x0856
    3e30:	80 3c       	cpi	r24, 0xC0	; 192
    3e32:	93 40       	sbci	r25, 0x03	; 3
    3e34:	0c f4       	brge	.+2      	; 0x3e38 <main+0x296>
    3e36:	48 c0       	rjmp	.+144    	; 0x3ec8 <main+0x326>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3e38:	80 91 57 08 	lds	r24, 0x0857
    3e3c:	90 91 58 08 	lds	r25, 0x0858
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3e40:	81 34       	cpi	r24, 0x41	; 65
    3e42:	9c 4f       	sbci	r25, 0xFC	; 252
    3e44:	3c f0       	brlt	.+14     	; 0x3e54 <main+0x2b2>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3e46:	80 91 57 08 	lds	r24, 0x0857
    3e4a:	90 91 58 08 	lds	r25, 0x0858
    3e4e:	80 3c       	cpi	r24, 0xC0	; 192
    3e50:	93 40       	sbci	r25, 0x03	; 3
    3e52:	d4 f1       	brlt	.+116    	; 0x3ec8 <main+0x326>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    3e54:	80 91 4f 08 	lds	r24, 0x084F
    3e58:	90 91 50 08 	lds	r25, 0x0850
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3e5c:	c3 97       	sbiw	r24, 0x33	; 51
    3e5e:	a4 f5       	brge	.+104    	; 0x3ec8 <main+0x326>
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    3e60:	2a 81       	ldd	r18, Y+2	; 0x02
    3e62:	3b 81       	ldd	r19, Y+3	; 0x03
    3e64:	4c 81       	ldd	r20, Y+4	; 0x04
    3e66:	5d 81       	ldd	r21, Y+5	; 0x05
    3e68:	2c 34       	cpi	r18, 0x4C	; 76
    3e6a:	3c 44       	sbci	r19, 0x4C	; 76
    3e6c:	41 05       	cpc	r20, r1
    3e6e:	51 05       	cpc	r21, r1
    3e70:	78 f1       	brcs	.+94     	; 0x3ed0 <main+0x32e>
    3e72:	80 91 53 08 	lds	r24, 0x0853
    3e76:	90 91 54 08 	lds	r25, 0x0854
    3e7a:	80 34       	cpi	r24, 0x40	; 64
    3e7c:	9c 4f       	sbci	r25, 0xFC	; 252
    3e7e:	5c f4       	brge	.+22     	; 0x3e96 <main+0x2f4>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    3e80:	80 91 20 05 	lds	r24, 0x0520
    3e84:	8b 7f       	andi	r24, 0xFB	; 251
    3e86:	80 93 20 05 	sts	0x0520, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    3e8a:	0e 94 92 27 	call	0x4f24	; 0x4f24 <CalibrateGyrosSlow>
				LED1 = 1;								// Signal that FC is ready
    3e8e:	2b 9a       	sbi	0x05, 3	; 5
				reset_IMU();							// Reset IMU just in case...
    3e90:	0e 94 de 2c 	call	0x59bc	; 0x59bc <reset_IMU>
    3e94:	19 c0       	rjmp	.+50     	; 0x3ec8 <main+0x326>
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    3e96:	2a 81       	ldd	r18, Y+2	; 0x02
    3e98:	3b 81       	ldd	r19, Y+3	; 0x03
    3e9a:	4c 81       	ldd	r20, Y+4	; 0x04
    3e9c:	5d 81       	ldd	r21, Y+5	; 0x05
    3e9e:	22 3e       	cpi	r18, 0xE2	; 226
    3ea0:	34 4e       	sbci	r19, 0xE4	; 228
    3ea2:	41 05       	cpc	r20, r1
    3ea4:	51 05       	cpc	r21, r1
    3ea6:	a0 f0       	brcs	.+40     	; 0x3ed0 <main+0x32e>
    3ea8:	80 91 53 08 	lds	r24, 0x0853
    3eac:	90 91 54 08 	lds	r25, 0x0854
    3eb0:	81 3c       	cpi	r24, 0xC1	; 193
    3eb2:	93 40       	sbci	r25, 0x03	; 3
    3eb4:	6c f0       	brlt	.+26     	; 0x3ed0 <main+0x32e>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3eb6:	80 91 20 05 	lds	r24, 0x0520
    3eba:	84 60       	ori	r24, 0x04	; 4
    3ebc:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;								// Signal that FC is now disarmed
    3ec0:	2b 98       	cbi	0x05, 3	; 5
				
#ifdef ERROR_LOG
				add_log(MANUAL);
    3ec2:	82 e0       	ldi	r24, 0x02	; 2
    3ec4:	0e 94 52 12 	call	0x24a4	; 0x24a4 <add_log>
    3ec8:	1a 82       	std	Y+2, r1	; 0x02
    3eca:	1b 82       	std	Y+3, r1	; 0x03
    3ecc:	1c 82       	std	Y+4, r1	; 0x04
    3ece:	1d 82       	std	Y+5, r1	; 0x05
#endif			
			}

			// Automatic disarm
			// Reset auto-disarm count if any RX activity or set to zero, or when currently disarmed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    3ed0:	80 91 1f 05 	lds	r24, 0x051F
    3ed4:	80 fd       	sbrc	r24, 0
    3ed6:	0e c0       	rjmp	.+28     	; 0x3ef4 <main+0x352>
    3ed8:	80 91 4c 06 	lds	r24, 0x064C
    3edc:	88 23       	and	r24, r24
    3ede:	51 f0       	breq	.+20     	; 0x3ef4 <main+0x352>
    3ee0:	80 91 20 05 	lds	r24, 0x0520
    3ee4:	82 fd       	sbrc	r24, 2
    3ee6:	06 c0       	rjmp	.+12     	; 0x3ef4 <main+0x352>
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    3ee8:	bc e4       	ldi	r27, 0x4C	; 76
    3eea:	2b 16       	cp	r2, r27
    3eec:	3b 06       	cpc	r3, r27
    3eee:	28 f0       	brcs	.+10     	; 0x3efa <main+0x358>
			{
				Disarm_seconds++;
    3ef0:	b3 94       	inc	r11
    3ef2:	01 c0       	rjmp	.+2      	; 0x3ef6 <main+0x354>
    3ef4:	b1 2c       	mov	r11, r1
    3ef6:	21 2c       	mov	r2, r1
    3ef8:	31 2c       	mov	r3, r1
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			// Don't allow disarms less than 30 seconds. That's just silly...
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    3efa:	40 91 4c 06 	lds	r20, 0x064C
    3efe:	2b 2d       	mov	r18, r11
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	84 2f       	mov	r24, r20
    3f04:	99 27       	eor	r25, r25
    3f06:	87 fd       	sbrc	r24, 7
    3f08:	90 95       	com	r25
    3f0a:	28 17       	cp	r18, r24
    3f0c:	39 07       	cpc	r19, r25
    3f0e:	94 f0       	brlt	.+36     	; 0x3f34 <main+0x392>
    3f10:	4e 31       	cpi	r20, 0x1E	; 30
    3f12:	84 f0       	brlt	.+32     	; 0x3f34 <main+0x392>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3f14:	80 91 20 05 	lds	r24, 0x0520
    3f18:	84 60       	ori	r24, 0x04	; 4
    3f1a:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;								// Signal that FC is now disarmed
    3f1e:	2b 98       	cbi	0x05, 3	; 5
				
#ifdef ERROR_LOG
				add_log(TIMER);	
    3f20:	84 e0       	ldi	r24, 0x04	; 4
    3f22:	0e 94 52 12 	call	0x24a4	; 0x24a4 <add_log>
    3f26:	06 c0       	rjmp	.+12     	; 0x3f34 <main+0x392>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    3f28:	80 91 20 05 	lds	r24, 0x0520
    3f2c:	8b 7f       	andi	r24, 0xFB	; 251
    3f2e:	80 93 20 05 	sts	0x0520, r24
			LED1 = 1;
    3f32:	2b 9a       	sbi	0x05, 3	; 5
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    3f34:	0e 94 ef 48 	call	0x91de	; 0x91de <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    3f38:	80 91 4f 08 	lds	r24, 0x084F
    3f3c:	90 91 50 08 	lds	r25, 0x0850
    3f40:	c2 97       	sbiw	r24, 0x32	; 50
    3f42:	5c f4       	brge	.+22     	; 0x3f5a <main+0x3b8>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    3f44:	80 91 20 05 	lds	r24, 0x0520
    3f48:	8e 7f       	andi	r24, 0xFE	; 254
    3f4a:	80 93 20 05 	sts	0x0520, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    3f4e:	88 e1       	ldi	r24, 0x18	; 24
    3f50:	e3 e1       	ldi	r30, 0x13	; 19
    3f52:	f8 e0       	ldi	r31, 0x08	; 8
    3f54:	11 92       	st	Z+, r1
    3f56:	8a 95       	dec	r24
    3f58:	e9 f7       	brne	.-6      	; 0x3f54 <main+0x3b2>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to.
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    3f5a:	80 91 ee 05 	lds	r24, 0x05EE
    3f5e:	88 0f       	add	r24, r24
    3f60:	99 0b       	sbc	r25, r25
    3f62:	fc 01       	movw	r30, r24
    3f64:	ef 5a       	subi	r30, 0xAF	; 175
    3f66:	f7 4f       	sbci	r31, 0xF7	; 247
    3f68:	20 81       	ld	r18, Z
    3f6a:	31 81       	ldd	r19, Z+1	; 0x01
    3f6c:	25 3f       	cpi	r18, 0xF5	; 245
    3f6e:	31 40       	sbci	r19, 0x01	; 1
    3f70:	14 f0       	brlt	.+4      	; 0x3f76 <main+0x3d4>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    3f72:	22 e0       	ldi	r18, 0x02	; 2
    3f74:	06 c0       	rjmp	.+12     	; 0x3f82 <main+0x3e0>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    3f76:	20 81       	ld	r18, Z
    3f78:	31 81       	ldd	r19, Z+1	; 0x01
    3f7a:	2d 30       	cpi	r18, 0x0D	; 13
    3f7c:	3e 4f       	sbci	r19, 0xFE	; 254
    3f7e:	24 f0       	brlt	.+8      	; 0x3f88 <main+0x3e6>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    3f80:	21 e0       	ldi	r18, 0x01	; 1
    3f82:	20 93 bf 07 	sts	0x07BF, r18
    3f86:	02 c0       	rjmp	.+4      	; 0x3f8c <main+0x3ea>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    3f88:	10 92 bf 07 	sts	0x07BF, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    3f8c:	a3 e0       	ldi	r26, 0x03	; 3
    3f8e:	7a 16       	cp	r7, r26
    3f90:	29 f0       	breq	.+10     	; 0x3f9c <main+0x3fa>
    3f92:	20 91 ef 05 	lds	r18, 0x05EF
    3f96:	38 a5       	ldd	r19, Y+40	; 0x28
    3f98:	32 17       	cp	r19, r18
    3f9a:	51 f1       	breq	.+84     	; 0x3ff0 <main+0x44e>
		{
			switch(Config.FlightSel)
    3f9c:	70 90 bf 07 	lds	r7, 0x07BF
    3fa0:	41 e0       	ldi	r20, 0x01	; 1
    3fa2:	74 16       	cp	r7, r20
    3fa4:	61 f0       	breq	.+24     	; 0x3fbe <main+0x41c>
    3fa6:	52 e0       	ldi	r21, 0x02	; 2
    3fa8:	75 16       	cp	r7, r21
    3faa:	b1 f0       	breq	.+44     	; 0x3fd8 <main+0x436>
    3fac:	71 10       	cpse	r7, r1
    3fae:	1d c0       	rjmp	.+58     	; 0x3fea <main+0x448>
			{
				case 0:
					Transition_state = TRANS_P1;
    3fb0:	10 92 23 05 	sts	0x0523, r1
					transition_counter = 0;
    3fb4:	10 92 25 05 	sts	0x0525, r1
    3fb8:	10 92 24 05 	sts	0x0524, r1
					break;
    3fbc:	16 c0       	rjmp	.+44     	; 0x3fea <main+0x448>
				case 1:
					Transition_state = TRANS_P1n;
    3fbe:	24 e0       	ldi	r18, 0x04	; 4
    3fc0:	20 93 23 05 	sts	0x0523, r18
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    3fc4:	20 91 f0 05 	lds	r18, 0x05F0
    3fc8:	33 27       	eor	r19, r19
    3fca:	27 fd       	sbrc	r18, 7
    3fcc:	30 95       	com	r19
    3fce:	30 93 25 05 	sts	0x0525, r19
    3fd2:	20 93 24 05 	sts	0x0524, r18
					break;
    3fd6:	09 c0       	rjmp	.+18     	; 0x3fea <main+0x448>
				case 2:
					Transition_state = TRANS_P2;
    3fd8:	29 e0       	ldi	r18, 0x09	; 9
    3fda:	20 93 23 05 	sts	0x0523, r18
					transition_counter = 100;
    3fde:	a4 e6       	ldi	r26, 0x64	; 100
    3fe0:	b0 e0       	ldi	r27, 0x00	; 0
    3fe2:	b0 93 25 05 	sts	0x0525, r27
    3fe6:	a0 93 24 05 	sts	0x0524, r26
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    3fea:	20 91 ef 05 	lds	r18, 0x05EF
    3fee:	28 a7       	std	Y+40, r18	; 0x28
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    3ff0:	30 91 bf 07 	lds	r19, 0x07BF
    3ff4:	3e 8f       	std	Y+30, r19	; 0x1e
    3ff6:	31 e0       	ldi	r19, 0x01	; 1
    3ff8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3ffa:	47 11       	cpse	r20, r7
    3ffc:	01 c0       	rjmp	.+2      	; 0x4000 <main+0x45e>
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    4000:	20 91 ef 05 	lds	r18, 0x05EF
    4004:	21 11       	cpse	r18, r1
    4006:	1b c0       	rjmp	.+54     	; 0x403e <main+0x49c>
		{
			// Offset RC input to (approx) -250 to 2250
			temp1 = RCinputs[Config.FlightChan] + 1000;
    4008:	fc 01       	movw	r30, r24
    400a:	ef 5a       	subi	r30, 0xAF	; 175
    400c:	f7 4f       	sbci	r31, 0xF7	; 247
    400e:	80 81       	ld	r24, Z
    4010:	91 81       	ldd	r25, Z+1	; 0x01
    4012:	88 51       	subi	r24, 0x18	; 24
    4014:	9c 4f       	sbci	r25, 0xFC	; 252
    4016:	97 ff       	sbrs	r25, 7
    4018:	02 c0       	rjmp	.+4      	; 0x401e <main+0x47c>
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    401e:	0a 96       	adiw	r24, 0x0a	; 10
    4020:	64 e1       	ldi	r22, 0x14	; 20
    4022:	70 e0       	ldi	r23, 0x00	; 0
    4024:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    4028:	65 36       	cpi	r22, 0x65	; 101
    402a:	71 05       	cpc	r23, r1
    402c:	0c f4       	brge	.+2      	; 0x4030 <main+0x48e>
    402e:	a9 c3       	rjmp	.+1874   	; 0x4782 <main+0xbe0>
    4030:	84 e6       	ldi	r24, 0x64	; 100
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	90 93 22 05 	sts	0x0522, r25
    4038:	80 93 21 05 	sts	0x0521, r24
    403c:	a6 c3       	rjmp	.+1868   	; 0x478a <main+0xbe8>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    403e:	80 91 24 05 	lds	r24, 0x0524
    4042:	90 91 25 05 	lds	r25, 0x0525
    4046:	90 93 22 05 	sts	0x0522, r25
    404a:	80 93 21 05 	sts	0x0521, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    404e:	33 23       	and	r19, r19
    4050:	99 f0       	breq	.+38     	; 0x4078 <main+0x4d6>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    4052:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4054:	84 2f       	mov	r24, r20
    4056:	99 27       	eor	r25, r25
    4058:	87 fd       	sbrc	r24, 7
    405a:	90 95       	com	r25
    405c:	fc 01       	movw	r30, r24
    405e:	ee 0f       	add	r30, r30
    4060:	ff 1f       	adc	r31, r31
    4062:	e8 0f       	add	r30, r24
    4064:	f9 1f       	adc	r31, r25
    4066:	e7 0d       	add	r30, r7
    4068:	f1 1d       	adc	r31, r1
    406a:	77 fc       	sbrc	r7, 7
    406c:	fa 95       	dec	r31
    406e:	e0 50       	subi	r30, 0x00	; 0
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	e4 91       	lpm	r30, Z
    4074:	e0 93 23 05 	sts	0x0523, r30

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    4078:	22 23       	and	r18, r18
    407a:	49 f0       	breq	.+18     	; 0x408e <main+0x4ec>
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
		}

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    407c:	53 ec       	ldi	r21, 0xC3	; 195
    407e:	25 03       	mulsu	r18, r21
    4080:	c0 01       	movw	r24, r0
    4082:	11 24       	eor	r1, r1
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    4084:	4a 89       	ldd	r20, Y+18	; 0x12
    4086:	5b 89       	ldd	r21, Y+19	; 0x13
    4088:	84 17       	cp	r24, r20
    408a:	95 07       	cpc	r25, r21
    408c:	18 f0       	brcs	.+6      	; 0x4094 <main+0x4f2>
    408e:	33 23       	and	r19, r19
    4090:	09 f4       	brne	.+2      	; 0x4094 <main+0x4f2>
    4092:	a9 c0       	rjmp	.+338    	; 0x41e6 <main+0x644>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    4094:	80 91 23 05 	lds	r24, 0x0523
    4098:	81 11       	cpse	r24, r1
    409a:	05 c0       	rjmp	.+10     	; 0x40a6 <main+0x504>
			{
				transition_counter = 0;
    409c:	10 92 25 05 	sts	0x0525, r1
    40a0:	10 92 24 05 	sts	0x0524, r1
    40a4:	22 c0       	rjmp	.+68     	; 0x40ea <main+0x548>
			}
			else if (Transition_state == TRANS_P1n)
    40a6:	84 30       	cpi	r24, 0x04	; 4
    40a8:	31 f4       	brne	.+12     	; 0x40b6 <main+0x514>
			{
				transition_counter = Config.Transition_P1n;
    40aa:	80 91 f0 05 	lds	r24, 0x05F0
    40ae:	99 27       	eor	r25, r25
    40b0:	87 fd       	sbrc	r24, 7
    40b2:	90 95       	com	r25
    40b4:	04 c0       	rjmp	.+8      	; 0x40be <main+0x51c>
			}
			else if (Transition_state == TRANS_P2)
    40b6:	89 30       	cpi	r24, 0x09	; 9
    40b8:	39 f4       	brne	.+14     	; 0x40c8 <main+0x526>
			{
				transition_counter = 100;
    40ba:	84 e6       	ldi	r24, 0x64	; 100
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	90 93 25 05 	sts	0x0525, r25
    40c2:	80 93 24 05 	sts	0x0524, r24
    40c6:	11 c0       	rjmp	.+34     	; 0x40ea <main+0x548>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    40c8:	81 30       	cpi	r24, 0x01	; 1
    40ca:	79 f4       	brne	.+30     	; 0x40ea <main+0x548>
    40cc:	80 91 f0 05 	lds	r24, 0x05F0
    40d0:	99 27       	eor	r25, r25
    40d2:	87 fd       	sbrc	r24, 7
    40d4:	90 95       	com	r25
    40d6:	20 91 24 05 	lds	r18, 0x0524
    40da:	30 91 25 05 	lds	r19, 0x0525
    40de:	82 17       	cp	r24, r18
    40e0:	93 07       	cpc	r25, r19
    40e2:	1c f4       	brge	.+6      	; 0x40ea <main+0x548>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    40e4:	88 e0       	ldi	r24, 0x08	; 8
    40e6:	80 93 23 05 	sts	0x0523, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    40ea:	80 91 23 05 	lds	r24, 0x0523
    40ee:	88 30       	cpi	r24, 0x08	; 8
    40f0:	79 f4       	brne	.+30     	; 0x4110 <main+0x56e>
    40f2:	80 91 f0 05 	lds	r24, 0x05F0
    40f6:	99 27       	eor	r25, r25
    40f8:	87 fd       	sbrc	r24, 7
    40fa:	90 95       	com	r25
    40fc:	20 91 24 05 	lds	r18, 0x0524
    4100:	30 91 25 05 	lds	r19, 0x0525
    4104:	28 17       	cp	r18, r24
    4106:	39 07       	cpc	r19, r25
    4108:	1c f4       	brge	.+6      	; 0x4110 <main+0x56e>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	80 93 23 05 	sts	0x0523, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    4110:	80 91 23 05 	lds	r24, 0x0523
    4114:	8b 7f       	andi	r24, 0xFB	; 251
    4116:	82 30       	cpi	r24, 0x02	; 2
    4118:	91 f4       	brne	.+36     	; 0x413e <main+0x59c>
			{
				transition_counter--;
    411a:	80 91 24 05 	lds	r24, 0x0524
    411e:	90 91 25 05 	lds	r25, 0x0525
    4122:	01 97       	sbiw	r24, 0x01	; 1
    4124:	90 93 25 05 	sts	0x0525, r25
    4128:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= 0)
    412c:	18 16       	cp	r1, r24
    412e:	19 06       	cpc	r1, r25
    4130:	34 f0       	brlt	.+12     	; 0x413e <main+0x59c>
				{
					transition_counter = 0;
    4132:	10 92 25 05 	sts	0x0525, r1
    4136:	10 92 24 05 	sts	0x0524, r1
					Transition_state = TRANS_P1;
    413a:	10 92 23 05 	sts	0x0523, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    413e:	80 91 23 05 	lds	r24, 0x0523
    4142:	81 30       	cpi	r24, 0x01	; 1
    4144:	c1 f4       	brne	.+48     	; 0x4176 <main+0x5d4>
			{
				transition_counter++;
    4146:	80 91 24 05 	lds	r24, 0x0524
    414a:	90 91 25 05 	lds	r25, 0x0525
    414e:	01 96       	adiw	r24, 0x01	; 1
    4150:	90 93 25 05 	sts	0x0525, r25
    4154:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= Config.Transition_P1n)
    4158:	20 91 f0 05 	lds	r18, 0x05F0
    415c:	33 27       	eor	r19, r19
    415e:	27 fd       	sbrc	r18, 7
    4160:	30 95       	com	r19
    4162:	82 17       	cp	r24, r18
    4164:	93 07       	cpc	r25, r19
    4166:	3c f0       	brlt	.+14     	; 0x4176 <main+0x5d4>
				{
					transition_counter = Config.Transition_P1n;
    4168:	30 93 25 05 	sts	0x0525, r19
    416c:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    4170:	84 e0       	ldi	r24, 0x04	; 4
    4172:	80 93 23 05 	sts	0x0523, r24
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    4176:	80 91 23 05 	lds	r24, 0x0523
    417a:	88 30       	cpi	r24, 0x08	; 8
    417c:	c1 f4       	brne	.+48     	; 0x41ae <main+0x60c>
			{
				transition_counter--;
    417e:	80 91 24 05 	lds	r24, 0x0524
    4182:	90 91 25 05 	lds	r25, 0x0525
    4186:	01 97       	sbiw	r24, 0x01	; 1
    4188:	90 93 25 05 	sts	0x0525, r25
    418c:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= Config.Transition_P1n)
    4190:	20 91 f0 05 	lds	r18, 0x05F0
    4194:	33 27       	eor	r19, r19
    4196:	27 fd       	sbrc	r18, 7
    4198:	30 95       	com	r19
    419a:	28 17       	cp	r18, r24
    419c:	39 07       	cpc	r19, r25
    419e:	3c f0       	brlt	.+14     	; 0x41ae <main+0x60c>
				{
					transition_counter = Config.Transition_P1n;
    41a0:	30 93 25 05 	sts	0x0525, r19
    41a4:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    41a8:	84 e0       	ldi	r24, 0x04	; 4
    41aa:	80 93 23 05 	sts	0x0523, r24
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    41ae:	80 91 23 05 	lds	r24, 0x0523
    41b2:	8b 7f       	andi	r24, 0xFB	; 251
    41b4:	83 30       	cpi	r24, 0x03	; 3
    41b6:	a9 f4       	brne	.+42     	; 0x41e2 <main+0x640>
			{
				transition_counter++;
    41b8:	80 91 24 05 	lds	r24, 0x0524
    41bc:	90 91 25 05 	lds	r25, 0x0525
    41c0:	01 96       	adiw	r24, 0x01	; 1
    41c2:	90 93 25 05 	sts	0x0525, r25
    41c6:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= 100)
    41ca:	84 36       	cpi	r24, 0x64	; 100
    41cc:	91 05       	cpc	r25, r1
    41ce:	4c f0       	brlt	.+18     	; 0x41e2 <main+0x640>
				{
					transition_counter = 100;
    41d0:	a4 e6       	ldi	r26, 0x64	; 100
    41d2:	b0 e0       	ldi	r27, 0x00	; 0
    41d4:	b0 93 25 05 	sts	0x0525, r27
    41d8:	a0 93 24 05 	sts	0x0524, r26
					Transition_state = TRANS_P2;
    41dc:	89 e0       	ldi	r24, 0x09	; 9
    41de:	80 93 23 05 	sts	0x0523, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    41e2:	1b 8a       	std	Y+19, r1	; 0x13
    41e4:	1a 8a       	std	Y+18, r1	; 0x12
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    41e6:	20 91 23 05 	lds	r18, 0x0523
    41ea:	22 23       	and	r18, r18
    41ec:	31 f0       	breq	.+12     	; 0x41fa <main+0x658>
    41ee:	80 91 21 05 	lds	r24, 0x0521
    41f2:	90 91 22 05 	lds	r25, 0x0522
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	39 f4       	brne	.+14     	; 0x4208 <main+0x666>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    41fa:	8c e0       	ldi	r24, 0x0C	; 12
    41fc:	ef e1       	ldi	r30, 0x1F	; 31
    41fe:	f8 e0       	ldi	r31, 0x08	; 8
    4200:	11 92       	st	Z+, r1
    4202:	8a 95       	dec	r24
    4204:	e9 f7       	brne	.-6      	; 0x4200 <main+0x65e>
    4206:	0b c0       	rjmp	.+22     	; 0x421e <main+0x67c>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    4208:	29 30       	cpi	r18, 0x09	; 9
    420a:	19 f0       	breq	.+6      	; 0x4212 <main+0x670>
    420c:	84 36       	cpi	r24, 0x64	; 100
    420e:	91 05       	cpc	r25, r1
    4210:	31 f4       	brne	.+12     	; 0x421e <main+0x67c>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    4212:	8c e0       	ldi	r24, 0x0C	; 12
    4214:	a3 e1       	ldi	r26, 0x13	; 19
    4216:	b8 e0       	ldi	r27, 0x08	; 8
    4218:	1d 92       	st	X+, r1
    421a:	8a 95       	dec	r24
    421c:	e9 f7       	brne	.-6      	; 0x4218 <main+0x676>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    421e:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <TIM16_ReadTCNT1>
    4222:	9d 8b       	std	Y+21, r25	; 0x15
    4224:	8c 8b       	std	Y+20, r24	; 0x14
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    4226:	84 15       	cp	r24, r4
    4228:	95 05       	cpc	r25, r5
    422a:	b8 f4       	brcc	.+46     	; 0x425a <main+0x6b8>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	a1 e0       	ldi	r26, 0x01	; 1
    4232:	b0 e0       	ldi	r27, 0x00	; 0
    4234:	84 19       	sub	r24, r4
    4236:	95 09       	sbc	r25, r5
    4238:	a1 09       	sbc	r26, r1
    423a:	b1 09       	sbc	r27, r1
    423c:	2c 89       	ldd	r18, Y+20	; 0x14
    423e:	3d 89       	ldd	r19, Y+21	; 0x15
    4240:	82 0f       	add	r24, r18
    4242:	93 1f       	adc	r25, r19
    4244:	a1 1d       	adc	r26, r1
    4246:	b1 1d       	adc	r27, r1
    4248:	2e 81       	ldd	r18, Y+6	; 0x06
    424a:	3f 81       	ldd	r19, Y+7	; 0x07
    424c:	48 85       	ldd	r20, Y+8	; 0x08
    424e:	59 85       	ldd	r21, Y+9	; 0x09
    4250:	28 0f       	add	r18, r24
    4252:	39 1f       	adc	r19, r25
    4254:	4a 1f       	adc	r20, r26
    4256:	5b 1f       	adc	r21, r27
    4258:	0c c0       	rjmp	.+24     	; 0x4272 <main+0x6d0>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    425a:	8c 89       	ldd	r24, Y+20	; 0x14
    425c:	9d 89       	ldd	r25, Y+21	; 0x15
    425e:	84 19       	sub	r24, r4
    4260:	95 09       	sbc	r25, r5
    4262:	2e 81       	ldd	r18, Y+6	; 0x06
    4264:	3f 81       	ldd	r19, Y+7	; 0x07
    4266:	48 85       	ldd	r20, Y+8	; 0x08
    4268:	59 85       	ldd	r21, Y+9	; 0x09
    426a:	28 0f       	add	r18, r24
    426c:	39 1f       	adc	r19, r25
    426e:	41 1d       	adc	r20, r1
    4270:	51 1d       	adc	r21, r1
    4272:	2e 83       	std	Y+6, r18	; 0x06
    4274:	3f 83       	std	Y+7, r19	; 0x07
    4276:	48 87       	std	Y+8, r20	; 0x08
    4278:	59 87       	std	Y+9, r21	; 0x09
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    427a:	80 91 b2 00 	lds	r24, 0x00B2
    427e:	3b a1       	ldd	r19, Y+35	; 0x23
    4280:	83 1b       	sub	r24, r19
    4282:	2a 81       	ldd	r18, Y+2	; 0x02
    4284:	3b 81       	ldd	r19, Y+3	; 0x03
    4286:	4c 81       	ldd	r20, Y+4	; 0x04
    4288:	5d 81       	ldd	r21, Y+5	; 0x05
    428a:	28 0f       	add	r18, r24
    428c:	31 1d       	adc	r19, r1
    428e:	41 1d       	adc	r20, r1
    4290:	51 1d       	adc	r21, r1
    4292:	2a 83       	std	Y+2, r18	; 0x02
    4294:	3b 83       	std	Y+3, r19	; 0x03
    4296:	4c 83       	std	Y+4, r20	; 0x04
    4298:	5d 83       	std	Y+5, r21	; 0x05
		Arm_TCNT2 = TCNT2;
    429a:	30 91 b2 00 	lds	r19, 0x00B2
    429e:	3b a3       	std	Y+35, r19	; 0x23

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    42a0:	80 91 b2 00 	lds	r24, 0x00B2
    42a4:	4e a1       	ldd	r20, Y+38	; 0x26
    42a6:	84 1b       	sub	r24, r20
    42a8:	28 89       	ldd	r18, Y+16	; 0x10
    42aa:	39 89       	ldd	r19, Y+17	; 0x11
    42ac:	28 0f       	add	r18, r24
    42ae:	31 1d       	adc	r19, r1
    42b0:	39 8b       	std	Y+17, r19	; 0x11
    42b2:	28 8b       	std	Y+16, r18	; 0x10
		ServoRate_TCNT2 = TCNT2;
    42b4:	30 91 b2 00 	lds	r19, 0x00B2
    42b8:	3e a3       	std	Y+38, r19	; 0x26
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    42ba:	80 91 b2 00 	lds	r24, 0x00B2
    42be:	4d a1       	ldd	r20, Y+37	; 0x25
    42c0:	84 1b       	sub	r24, r20
    42c2:	2b a5       	ldd	r18, Y+43	; 0x2b
    42c4:	3c a5       	ldd	r19, Y+44	; 0x2c
    42c6:	28 0f       	add	r18, r24
    42c8:	31 1d       	adc	r19, r1
    42ca:	3c a7       	std	Y+44, r19	; 0x2c
    42cc:	2b a7       	std	Y+43, r18	; 0x2b
		Servo_TCNT2 = TCNT2;
    42ce:	30 91 b2 00 	lds	r19, 0x00B2
    42d2:	3d a3       	std	Y+37, r19	; 0x25
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    42d4:	80 91 b2 00 	lds	r24, 0x00B2
    42d8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    42da:	84 1b       	sub	r24, r20
    42dc:	2a 89       	ldd	r18, Y+18	; 0x12
    42de:	3b 89       	ldd	r19, Y+19	; 0x13
    42e0:	28 0f       	add	r18, r24
    42e2:	31 1d       	adc	r19, r1
    42e4:	3b 8b       	std	Y+19, r19	; 0x13
    42e6:	2a 8b       	std	Y+18, r18	; 0x12
		Transition_TCNT2 = TCNT2;
    42e8:	30 91 b2 00 	lds	r19, 0x00B2
    42ec:	3f 8f       	std	Y+31, r19	; 0x1f

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    42ee:	80 91 b2 00 	lds	r24, 0x00B2
    42f2:	48 a1       	ldd	r20, Y+32	; 0x20
    42f4:	84 1b       	sub	r24, r20
    42f6:	2e 85       	ldd	r18, Y+14	; 0x0e
    42f8:	3f 85       	ldd	r19, Y+15	; 0x0f
    42fa:	28 0f       	add	r18, r24
    42fc:	31 1d       	adc	r19, r1
    42fe:	3f 87       	std	Y+15, r19	; 0x0f
    4300:	2e 87       	std	Y+14, r18	; 0x0e
		Status_TCNT2 = TCNT2;
    4302:	30 91 b2 00 	lds	r19, 0x00B2
    4306:	38 a3       	std	Y+32, r19	; 0x20
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    4308:	80 91 b2 00 	lds	r24, 0x00B2
    430c:	49 a1       	ldd	r20, Y+33	; 0x21
    430e:	84 1b       	sub	r24, r20
    4310:	29 8d       	ldd	r18, Y+25	; 0x19
    4312:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4314:	28 0f       	add	r18, r24
    4316:	31 1d       	adc	r19, r1
    4318:	3a 8f       	std	Y+26, r19	; 0x1a
    431a:	29 8f       	std	Y+25, r18	; 0x19
		Refresh_TCNT2 = TCNT2;
    431c:	30 91 b2 00 	lds	r19, 0x00B2
    4320:	39 a3       	std	Y+33, r19	; 0x21

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    4322:	80 91 b2 00 	lds	r24, 0x00B2
    4326:	4a a1       	ldd	r20, Y+34	; 0x22
    4328:	84 1b       	sub	r24, r20
    432a:	28 0e       	add	r2, r24
    432c:	31 1c       	adc	r3, r1
		Disarm_TCNT2 = TCNT2;
    432e:	20 91 b2 00 	lds	r18, 0x00B2
    4332:	2a a3       	std	Y+34, r18	; 0x22

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    4334:	80 91 b2 00 	lds	r24, 0x00B2
    4338:	3c a1       	ldd	r19, Y+36	; 0x24
    433a:	83 1b       	sub	r24, r19
    433c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    433e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4340:	48 0f       	add	r20, r24
    4342:	51 1d       	adc	r21, r1
    4344:	5d 8f       	std	Y+29, r21	; 0x1d
    4346:	4c 8f       	std	Y+28, r20	; 0x1c
		Ticker_TCNT2 = TCNT2;
    4348:	20 91 b2 00 	lds	r18, 0x00B2
    434c:	2c a3       	std	Y+36, r18	; 0x24
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    434e:	80 91 1e 05 	lds	r24, 0x051E
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    4352:	53 ff       	sbrs	r21, 3
    4354:	02 c0       	rjmp	.+4      	; 0x435a <main+0x7b8>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    4356:	80 61       	ori	r24, 0x10	; 16
    4358:	01 c0       	rjmp	.+2      	; 0x435c <main+0x7ba>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    435a:	8f 7e       	andi	r24, 0xEF	; 239
    435c:	80 93 1e 05 	sts	0x051E, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    4360:	48 89       	ldd	r20, Y+16	; 0x10
    4362:	59 89       	ldd	r21, Y+17	; 0x11
    4364:	4d 32       	cpi	r20, 0x2D	; 45
    4366:	51 40       	sbci	r21, 0x01	; 1
    4368:	20 f0       	brcs	.+8      	; 0x4372 <main+0x7d0>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    436a:	19 8a       	std	Y+17, r1	; 0x11
    436c:	18 8a       	std	Y+16, r1	; 0x10
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    436e:	21 e0       	ldi	r18, 0x01	; 1
    4370:	2b 87       	std	Y+11, r18	; 0x0b
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    4372:	4b a5       	ldd	r20, Y+43	; 0x2b
    4374:	5c a5       	ldd	r21, Y+44	; 0x2c
    4376:	46 32       	cpi	r20, 0x26	; 38
    4378:	56 42       	sbci	r21, 0x26	; 38
    437a:	90 f0       	brcs	.+36     	; 0x43a0 <main+0x7fe>
		{
#ifdef ERROR_LOG
			// Log the no signal event if previously NOT overdue, armable and armed
			// This makes sure we only get one log per event
			if ((!Overdue) && (Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    437c:	80 91 19 05 	lds	r24, 0x0519
    4380:	81 11       	cpse	r24, r1
    4382:	0b c0       	rjmp	.+22     	; 0x439a <main+0x7f8>
    4384:	80 91 4b 06 	lds	r24, 0x064B
    4388:	81 30       	cpi	r24, 0x01	; 1
    438a:	39 f4       	brne	.+14     	; 0x439a <main+0x7f8>
    438c:	80 91 20 05 	lds	r24, 0x0520
    4390:	82 fd       	sbrc	r24, 2
    4392:	03 c0       	rjmp	.+6      	; 0x439a <main+0x7f8>
			{
				add_log(NOSIGNAL);
    4394:	83 e0       	ldi	r24, 0x03	; 3
    4396:	0e 94 52 12 	call	0x24a4	; 0x24a4 <add_log>
			}
#endif			
			Overdue = true;	// This results in a "No Signal" error
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	80 93 19 05 	sts	0x0519, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    43a0:	0e 94 10 27 	call	0x4e20	; 0x4e20 <ReadGyros>
		ReadAcc();
    43a4:	0e 94 42 10 	call	0x2084	; 0x2084 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    43a8:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    43ac:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    43ae:	20 91 1a 05 	lds	r18, 0x051A
    43b2:	30 91 1b 05 	lds	r19, 0x051B
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    43b6:	20 91 1a 05 	lds	r18, 0x051A
    43ba:	30 91 1b 05 	lds	r19, 0x051B
    43be:	ac 01       	movw	r20, r24
    43c0:	42 1b       	sub	r20, r18
    43c2:	53 0b       	sbc	r21, r19
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    43c4:	90 93 1b 05 	sts	0x051B, r25
    43c8:	80 93 1a 05 	sts	0x051A, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    43cc:	80 91 f3 07 	lds	r24, 0x07F3
    43d0:	90 91 f4 07 	lds	r25, 0x07F4
    43d4:	60 e0       	ldi	r22, 0x00	; 0
    43d6:	70 e0       	ldi	r23, 0x00	; 0
    43d8:	02 97       	sbiw	r24, 0x02	; 2
    43da:	18 f4       	brcc	.+6      	; 0x43e2 <main+0x840>
		{
			interval = ticker_16; // uint16_t
    43dc:	2a 01       	movw	r4, r20
    43de:	3b 01       	movw	r6, r22
    43e0:	11 c0       	rjmp	.+34     	; 0x4404 <main+0x862>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    43e2:	40 90 f3 07 	lds	r4, 0x07F3
    43e6:	50 90 f4 07 	lds	r5, 0x07F4
    43ea:	61 2c       	mov	r6, r1
    43ec:	71 2c       	mov	r7, r1
    43ee:	ef e0       	ldi	r30, 0x0F	; 15
    43f0:	44 0c       	add	r4, r4
    43f2:	55 1c       	adc	r5, r5
    43f4:	66 1c       	adc	r6, r6
    43f6:	77 1c       	adc	r7, r7
    43f8:	ea 95       	dec	r30
    43fa:	d1 f7       	brne	.-12     	; 0x43f0 <main+0x84e>
    43fc:	44 0e       	add	r4, r20
    43fe:	55 1e       	adc	r5, r21
    4400:	66 1e       	adc	r6, r22
    4402:	77 1e       	adc	r7, r23
		}

		TMR0_counter = 0;
    4404:	10 92 f4 07 	sts	0x07F4, r1
    4408:	10 92 f3 07 	sts	0x07F3, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    440c:	c3 01       	movw	r24, r6
    440e:	b2 01       	movw	r22, r4
    4410:	0e 94 00 2b 	call	0x5600	; 0x5600 <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    4414:	c3 01       	movw	r24, r6
    4416:	b2 01       	movw	r22, r4
    4418:	0e 94 67 44 	call	0x88ce	; 0x88ce <Sensor_PID>
		//* FrameRate = Serial frame gap as measured by the ISR.
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//************************************************************

		if (Interrupted)
    441c:	80 91 f0 07 	lds	r24, 0x07F0
    4420:	88 23       	and	r24, r24
    4422:	09 f4       	brne	.+2      	; 0x4426 <main+0x884>
    4424:	c6 c0       	rjmp	.+396    	; 0x45b2 <main+0xa10>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer if not in FAST mode.
			if (Config.Servo_rate < FAST)
    4426:	80 91 eb 05 	lds	r24, 0x05EB
    442a:	82 30       	cpi	r24, 0x02	; 2
    442c:	64 f4       	brge	.+24     	; 0x4446 <main+0x8a4>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    442e:	21 e0       	ldi	r18, 0x01	; 1
    4430:	2a 87       	std	Y+10, r18	; 0x0a
    4432:	2e 81       	ldd	r18, Y+6	; 0x06
    4434:	3f 81       	ldd	r19, Y+7	; 0x07
    4436:	48 85       	ldd	r20, Y+8	; 0x08
    4438:	59 85       	ldd	r21, Y+9	; 0x09
    443a:	24 3c       	cpi	r18, 0xC4	; 196
    443c:	32 4a       	sbci	r19, 0xA2	; 162
    443e:	41 05       	cpc	r20, r1
    4440:	51 05       	cpc	r21, r1
    4442:	08 f4       	brcc	.+2      	; 0x4446 <main+0x8a4>
    4444:	1a 86       	std	Y+10, r1	; 0x0a
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    4446:	29 81       	ldd	r18, Y+1	; 0x01
    4448:	21 11       	cpse	r18, r1
    444a:	0e c0       	rjmp	.+28     	; 0x4468 <main+0x8c6>
    444c:	82 30       	cpi	r24, 0x02	; 2
    444e:	09 f0       	breq	.+2      	; 0x4452 <main+0x8b0>
    4450:	a0 c1       	rjmp	.+832    	; 0x4792 <main+0xbf0>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    4452:	80 91 0e 08 	lds	r24, 0x080E
    4456:	90 91 0f 08 	lds	r25, 0x080F
    445a:	31 e0       	ldi	r19, 0x01	; 1
    445c:	3a 87       	std	Y+10, r19	; 0x0a
    445e:	84 3c       	cpi	r24, 0xC4	; 196
    4460:	92 4a       	sbci	r25, 0xA2	; 162
    4462:	40 f4       	brcc	.+16     	; 0x4474 <main+0x8d2>
    4464:	1a 86       	std	Y+10, r1	; 0x0a
    4466:	3b c0       	rjmp	.+118    	; 0x44de <main+0x93c>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the serial data gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    4468:	82 30       	cpi	r24, 0x02	; 2
    446a:	09 f0       	breq	.+2      	; 0x446e <main+0x8cc>
    446c:	92 c1       	rjmp	.+804    	; 0x4792 <main+0xbf0>
				// Slow packets (19.7ms gap). Pulse spans just two input packets.
				// 38.8s available space for S.Bus, 40ms for Satellite and 39.92ms for Xtreme.
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
    446e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4470:	22 23       	and	r18, r18
    4472:	a9 f1       	breq	.+106    	; 0x44de <main+0x93c>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
    4474:	38 ec       	ldi	r19, 0xC8	; 200
    4476:	c3 16       	cp	r12, r19
    4478:	3b e4       	ldi	r19, 0x4B	; 75
    447a:	d3 06       	cpc	r13, r19
    447c:	e1 04       	cpc	r14, r1
    447e:	f1 04       	cpc	r15, r1
    4480:	08 f0       	brcs	.+2      	; 0x4484 <main+0x8e2>
    4482:	8b c1       	rjmp	.+790    	; 0x479a <main+0xbf8>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
    4484:	46 e2       	ldi	r20, 0x26	; 38
    4486:	c4 16       	cp	r12, r20
    4488:	4f e3       	ldi	r20, 0x3F	; 63
    448a:	d4 06       	cpc	r13, r20
    448c:	e1 04       	cpc	r14, r1
    448e:	f1 04       	cpc	r15, r1
    4490:	08 f0       	brcs	.+2      	; 0x4494 <main+0x8f2>
    4492:	87 c1       	rjmp	.+782    	; 0x47a2 <main+0xc00>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
    4494:	51 e2       	ldi	r21, 0x21	; 33
    4496:	c5 16       	cp	r12, r21
    4498:	56 e3       	ldi	r21, 0x36	; 54
    449a:	d5 06       	cpc	r13, r21
    449c:	e1 04       	cpc	r14, r1
    449e:	f1 04       	cpc	r15, r1
    44a0:	08 f0       	brcs	.+2      	; 0x44a4 <main+0x902>
    44a2:	83 c1       	rjmp	.+774    	; 0x47aa <main+0xc08>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
    44a4:	8d e5       	ldi	r24, 0x5D	; 93
    44a6:	c8 16       	cp	r12, r24
    44a8:	8f e2       	ldi	r24, 0x2F	; 47
    44aa:	d8 06       	cpc	r13, r24
    44ac:	e1 04       	cpc	r14, r1
    44ae:	f1 04       	cpc	r15, r1
    44b0:	08 f0       	brcs	.+2      	; 0x44b4 <main+0x912>
    44b2:	7f c1       	rjmp	.+766    	; 0x47b2 <main+0xc10>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
    44b4:	9c ec       	ldi	r25, 0xCC	; 204
    44b6:	c9 16       	cp	r12, r25
    44b8:	99 e2       	ldi	r25, 0x29	; 41
    44ba:	d9 06       	cpc	r13, r25
    44bc:	e1 04       	cpc	r14, r1
    44be:	f1 04       	cpc	r15, r1
    44c0:	08 f0       	brcs	.+2      	; 0x44c4 <main+0x922>
    44c2:	7b c1       	rjmp	.+758    	; 0x47ba <main+0xc18>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
    44c4:	a4 ee       	ldi	r26, 0xE4	; 228
    44c6:	ca 16       	cp	r12, r26
    44c8:	a5 e2       	ldi	r26, 0x25	; 37
    44ca:	da 06       	cpc	r13, r26
    44cc:	e1 04       	cpc	r14, r1
    44ce:	f1 04       	cpc	r15, r1
    44d0:	98 f5       	brcc	.+102    	; 0x4538 <main+0x996>
    44d2:	21 e0       	ldi	r18, 0x01	; 1
    44d4:	29 83       	std	Y+1, r18	; 0x01
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    44d6:	6a e0       	ldi	r22, 0x0A	; 10
    44d8:	86 2e       	mov	r8, r22
    44da:	91 2c       	mov	r9, r1
    44dc:	38 c0       	rjmp	.+112    	; 0x454e <main+0x9ac>

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
    44de:	3d ec       	ldi	r19, 0xCD	; 205
    44e0:	c3 16       	cp	r12, r19
    44e2:	36 e4       	ldi	r19, 0x46	; 70
    44e4:	d3 06       	cpc	r13, r19
    44e6:	e1 04       	cpc	r14, r1
    44e8:	f1 04       	cpc	r15, r1
    44ea:	08 f0       	brcs	.+2      	; 0x44ee <main+0x94c>
    44ec:	6c c1       	rjmp	.+728    	; 0x47c6 <main+0xc24>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
    44ee:	44 ea       	ldi	r20, 0xA4	; 164
    44f0:	c4 16       	cp	r12, r20
    44f2:	48 e3       	ldi	r20, 0x38	; 56
    44f4:	d4 06       	cpc	r13, r20
    44f6:	e1 04       	cpc	r14, r1
    44f8:	f1 04       	cpc	r15, r1
    44fa:	08 f0       	brcs	.+2      	; 0x44fe <main+0x95c>
    44fc:	68 c1       	rjmp	.+720    	; 0x47ce <main+0xc2c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
    44fe:	53 e3       	ldi	r21, 0x33	; 51
    4500:	c5 16       	cp	r12, r21
    4502:	5f e2       	ldi	r21, 0x2F	; 47
    4504:	d5 06       	cpc	r13, r21
    4506:	e1 04       	cpc	r14, r1
    4508:	f1 04       	cpc	r15, r1
    450a:	08 f0       	brcs	.+2      	; 0x450e <main+0x96c>
    450c:	64 c1       	rjmp	.+712    	; 0x47d6 <main+0xc34>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
    450e:	85 e7       	ldi	r24, 0x75	; 117
    4510:	c8 16       	cp	r12, r24
    4512:	88 e2       	ldi	r24, 0x28	; 40
    4514:	d8 06       	cpc	r13, r24
    4516:	e1 04       	cpc	r14, r1
    4518:	f1 04       	cpc	r15, r1
    451a:	08 f0       	brcs	.+2      	; 0x451e <main+0x97c>
    451c:	60 c1       	rjmp	.+704    	; 0x47de <main+0xc3c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
    451e:	96 e6       	ldi	r25, 0x66	; 102
    4520:	c9 16       	cp	r12, r25
    4522:	93 e2       	ldi	r25, 0x23	; 35
    4524:	d9 06       	cpc	r13, r25
    4526:	e1 04       	cpc	r14, r1
    4528:	f1 04       	cpc	r15, r1
    452a:	60 f4       	brcc	.+24     	; 0x4544 <main+0x9a2>
    452c:	21 e0       	ldi	r18, 0x01	; 1
    452e:	29 83       	std	Y+1, r18	; 0x01
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 275Hz
    4530:	58 e0       	ldi	r21, 0x08	; 8
    4532:	85 2e       	mov	r8, r21
    4534:	91 2c       	mov	r9, r1
    4536:	0b c0       	rjmp	.+22     	; 0x454e <main+0x9ac>
    4538:	31 e0       	ldi	r19, 0x01	; 1
    453a:	39 83       	std	Y+1, r19	; 0x01
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
    453c:	49 e0       	ldi	r20, 0x09	; 9
    453e:	84 2e       	mov	r8, r20
    4540:	91 2c       	mov	r9, r1
    4542:	05 c0       	rjmp	.+10     	; 0x454e <main+0x9ac>
    4544:	41 e0       	ldi	r20, 0x01	; 1
    4546:	49 83       	std	Y+1, r20	; 0x01
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
    4548:	37 e0       	ldi	r19, 0x07	; 7
    454a:	83 2e       	mov	r8, r19
    454c:	91 2c       	mov	r9, r1

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
    454e:	10 92 19 05 	sts	0x0519, r1
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    4552:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <TIM16_ReadTCNT1>
    4556:	9d 8b       	std	Y+21, r25	; 0x15
    4558:	8c 8b       	std	Y+20, r24	; 0x14
			//* output when serial RC formats are used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    455a:	80 91 eb 05 	lds	r24, 0x05EB
    455e:	82 30       	cpi	r24, 0x02	; 2
    4560:	b9 f4       	brne	.+46     	; 0x4590 <main+0x9ee>
    4562:	29 81       	ldd	r18, Y+1	; 0x01
    4564:	22 23       	and	r18, r18
    4566:	a1 f0       	breq	.+40     	; 0x4590 <main+0x9ee>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    4568:	3b 8d       	ldd	r19, Y+27	; 0x1b
    456a:	31 11       	cpse	r19, r1
    456c:	18 c0       	rjmp	.+48     	; 0x459e <main+0x9fc>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    456e:	80 91 f0 07 	lds	r24, 0x07F0
    4572:	81 11       	cpse	r24, r1
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    4574:	01 e0       	ldi	r16, 0x01	; 1
					}
					Interrupted = false;		// Cancel pending interrupts
    4576:	10 92 f0 07 	sts	0x07F0, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    457a:	0e 94 df 32 	call	0x65be	; 0x65be <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    457e:	1c a6       	std	Y+44, r1	; 0x2c
    4580:	1b a6       	std	Y+43, r1	; 0x2b

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    4582:	1e 82       	std	Y+6, r1	; 0x06
    4584:	1f 82       	std	Y+7, r1	; 0x07
    4586:	18 86       	std	Y+8, r1	; 0x08
    4588:	19 86       	std	Y+9, r1	; 0x09
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    458a:	1d 86       	std	Y+13, r1	; 0x0d
					PWMBlocked = false;			// Enable PWM generation	
    458c:	1c 86       	std	Y+12, r1	; 0x0c
    458e:	11 c0       	rjmp	.+34     	; 0x45b2 <main+0xa10>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    4590:	1c a6       	std	Y+44, r1	; 0x2c
    4592:	1b a6       	std	Y+43, r1	; 0x2b

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    4594:	1e 82       	std	Y+6, r1	; 0x06
    4596:	1f 82       	std	Y+7, r1	; 0x07
    4598:	18 86       	std	Y+8, r1	; 0x08
    459a:	19 86       	std	Y+9, r1	; 0x09
    459c:	0a c0       	rjmp	.+20     	; 0x45b2 <main+0xa10>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    459e:	1c a6       	std	Y+44, r1	; 0x2c
    45a0:	1b a6       	std	Y+43, r1	; 0x2b

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    45a2:	1e 82       	std	Y+6, r1	; 0x06
    45a4:	1f 82       	std	Y+7, r1	; 0x07
    45a6:	18 86       	std	Y+8, r1	; 0x08
    45a8:	19 86       	std	Y+9, r1	; 0x09
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    45aa:	1b 8e       	std	Y+27, r1	; 0x1b
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    45ac:	41 e0       	ldi	r20, 0x01	; 1
    45ae:	4c 87       	std	Y+12, r20	; 0x0c
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    45b0:	19 82       	std	Y+1, r1	; 0x01
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    45b2:	80 91 f0 07 	lds	r24, 0x07F0
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    45b6:	81 11       	cpse	r24, r1
    45b8:	08 c0       	rjmp	.+16     	; 0x45ca <main+0xa28>
				(Interrupted) ||											// Run at RC rate
    45ba:	80 91 eb 05 	lds	r24, 0x05EB
    45be:	82 30       	cpi	r24, 0x02	; 2
    45c0:	09 f0       	breq	.+2      	; 0x45c4 <main+0xa22>
    45c2:	bd c0       	rjmp	.+378    	; 0x473e <main+0xb9c>
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    45c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    45c6:	21 11       	cpse	r18, r1
    45c8:	9a c0       	rjmp	.+308    	; 0x46fe <main+0xb5c>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    45ca:	80 91 f0 07 	lds	r24, 0x07F0
    45ce:	88 23       	and	r24, r24
    45d0:	19 f0       	breq	.+6      	; 0x45d8 <main+0xa36>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    45d2:	10 92 f0 07 	sts	0x07F0, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    45d6:	01 e0       	ldi	r16, 0x01	; 1
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    45d8:	90 91 eb 05 	lds	r25, 0x05EB
    45dc:	e7 e5       	ldi	r30, 0x57	; 87
    45de:	f6 e0       	ldi	r31, 0x06	; 6
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    45e4:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    45e6:	92 30       	cpi	r25, 0x02	; 2
    45e8:	29 f4       	brne	.+10     	; 0x45f4 <main+0xa52>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    45ea:	40 81       	ld	r20, Z
    45ec:	44 23       	and	r20, r20
    45ee:	09 f4       	brne	.+2      	; 0x45f2 <main+0xa50>
    45f0:	fc c0       	rjmp	.+504    	; 0x47ea <main+0xc48>
    45f2:	0b c0       	rjmp	.+22     	; 0x460a <main+0xa68>
    45f4:	91 30       	cpi	r25, 0x01	; 1
    45f6:	39 f4       	brne	.+14     	; 0x4606 <main+0xa64>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    45f8:	40 81       	ld	r20, Z
    45fa:	41 11       	cpse	r20, r1
    45fc:	06 c0       	rjmp	.+12     	; 0x460a <main+0xa68>
    45fe:	4a 85       	ldd	r20, Y+10	; 0x0a
    4600:	41 11       	cpse	r20, r1
    4602:	0f c0       	rjmp	.+30     	; 0x4622 <main+0xa80>
    4604:	f2 c0       	rjmp	.+484    	; 0x47ea <main+0xc48>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    4606:	19 16       	cp	r1, r25
    4608:	24 f4       	brge	.+8      	; 0x4612 <main+0xa70>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    460a:	40 81       	ld	r20, Z
    460c:	14 16       	cp	r1, r20
    460e:	4c f0       	brlt	.+18     	; 0x4622 <main+0xa80>
    4610:	10 c0       	rjmp	.+32     	; 0x4632 <main+0xa90>
    4612:	91 11       	cpse	r25, r1
    4614:	0e c0       	rjmp	.+28     	; 0x4632 <main+0xa90>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    4616:	4a 85       	ldd	r20, Y+10	; 0x0a
    4618:	41 11       	cpse	r20, r1
    461a:	03 c0       	rjmp	.+6      	; 0x4622 <main+0xa80>
    461c:	4b 85       	ldd	r20, Y+11	; 0x0b
    461e:	44 23       	and	r20, r20
    4620:	41 f0       	breq	.+16     	; 0x4632 <main+0xa90>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
					)
				{
					ServoFlag |= (1 << i);
    4622:	41 e0       	ldi	r20, 0x01	; 1
    4624:	50 e0       	ldi	r21, 0x00	; 0
    4626:	02 2e       	mov	r0, r18
    4628:	01 c0       	rjmp	.+2      	; 0x462c <main+0xa8a>
    462a:	44 0f       	add	r20, r20
    462c:	0a 94       	dec	r0
    462e:	ea f7       	brpl	.-6      	; 0x462a <main+0xa88>
    4630:	84 2b       	or	r24, r20
    4632:	2f 5f       	subi	r18, 0xFF	; 255
    4634:	3f 4f       	sbci	r19, 0xFF	; 255
    4636:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    4638:	28 30       	cpi	r18, 0x08	; 8
    463a:	31 05       	cpc	r19, r1
    463c:	a1 f6       	brne	.-88     	; 0x45e6 <main+0xa44>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    463e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4640:	22 23       	and	r18, r18
    4642:	11 f0       	breq	.+4      	; 0x4648 <main+0xaa6>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    4644:	19 8a       	std	Y+17, r1	; 0x11
    4646:	18 8a       	std	Y+16, r1	; 0x10
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    4648:	31 e0       	ldi	r19, 0x01	; 1
    464a:	83 16       	cp	r8, r19
    464c:	91 04       	cpc	r9, r1
    464e:	d1 f4       	brne	.+52     	; 0x4684 <main+0xae2>
    4650:	92 30       	cpi	r25, 0x02	; 2
    4652:	c1 f4       	brne	.+48     	; 0x4684 <main+0xae2>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if ((interval < PWM_PERIOD_WORST) && (interval > PWM_PERIOD_BEST))
    4654:	b3 01       	movw	r22, r6
    4656:	a2 01       	movw	r20, r4
    4658:	4e 58       	subi	r20, 0x8E	; 142
    465a:	50 42       	sbci	r21, 0x20	; 32
    465c:	61 09       	sbc	r22, r1
    465e:	71 09       	sbc	r23, r1
    4660:	43 3d       	cpi	r20, 0xD3	; 211
    4662:	50 43       	sbci	r21, 0x30	; 48
    4664:	61 05       	cpc	r22, r1
    4666:	71 05       	cpc	r23, r1
    4668:	48 f0       	brcs	.+18     	; 0x467c <main+0xada>
				{
					PWM_interval = interval;
				}
				else
				{
					PWM_interval = PWM_PERIOD_WORST; // 120Hz
    466a:	21 e6       	ldi	r18, 0x61	; 97
    466c:	c2 2e       	mov	r12, r18
    466e:	21 e5       	ldi	r18, 0x51	; 81
    4670:	d2 2e       	mov	r13, r18
    4672:	e1 2c       	mov	r14, r1
    4674:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    4676:	21 e0       	ldi	r18, 0x01	; 1
    4678:	2c 87       	std	Y+12, r18	; 0x0c
    467a:	04 c0       	rjmp	.+8      	; 0x4684 <main+0xae2>
    467c:	73 01       	movw	r14, r6
    467e:	62 01       	movw	r12, r4
    4680:	31 e0       	ldi	r19, 0x01	; 1
    4682:	3c 87       	std	Y+12, r19	; 0x0c
				{
					PWM_interval = PWM_PERIOD_WORST; // 120Hz
				}	
			}
			
			Calculate_PID();						// Calculate PID values
    4684:	8a a7       	std	Y+42, r24	; 0x2a
    4686:	0e 94 40 46 	call	0x8c80	; 0x8c80 <Calculate_PID>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
    468a:	0e 94 a2 3d 	call	0x7b44	; 0x7b44 <ProcessMixer>
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits				
    468e:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <UpdateServos>

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    4692:	90 91 19 05 	lds	r25, 0x0519
    4696:	8a a5       	ldd	r24, Y+42	; 0x2a
    4698:	91 11       	cpse	r25, r1
    469a:	09 c0       	rjmp	.+18     	; 0x46ae <main+0xb0c>
			}
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    469c:	aa 20       	and	r10, r10
    469e:	f9 f0       	breq	.+62     	; 0x46de <main+0xb3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    46a0:	8b ee       	ldi	r24, 0xEB	; 235
    46a2:	9c e2       	ldi	r25, 0x2C	; 44
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	f1 f7       	brne	.-4      	; 0x46a4 <main+0xb02>
    46a8:	00 c0       	rjmp	.+0      	; 0x46aa <main+0xb08>
    46aa:	00 00       	nop
    46ac:	1a c0       	rjmp	.+52     	; 0x46e2 <main+0xb40>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits				

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    46ae:	e7 e5       	ldi	r30, 0x57	; 87
    46b0:	f6 e0       	ldi	r31, 0x06	; 6
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
				{
					// Check for motor marker
					if (Config.Channel[i].Motor_marker == MOTOR)
    46b6:	90 81       	ld	r25, Z
    46b8:	92 30       	cpi	r25, 0x02	; 2
    46ba:	51 f4       	brne	.+20     	; 0x46d0 <main+0xb2e>
					{
						// Set output to maximum pulse width
						ServoOut[i] = MOTOR_0;
    46bc:	d9 01       	movw	r26, r18
    46be:	aa 0f       	add	r26, r26
    46c0:	bb 1f       	adc	r27, r27
    46c2:	ad 59       	subi	r26, 0x9D	; 157
    46c4:	b7 4f       	sbci	r27, 0xF7	; 247
    46c6:	4c e4       	ldi	r20, 0x4C	; 76
    46c8:	54 e0       	ldi	r21, 0x04	; 4
    46ca:	11 96       	adiw	r26, 0x01	; 1
    46cc:	5c 93       	st	X, r21
    46ce:	4e 93       	st	-X, r20
    46d0:	2f 5f       	subi	r18, 0xFF	; 255
    46d2:	3f 4f       	sbci	r19, 0xFF	; 255
    46d4:	b6 96       	adiw	r30, 0x26	; 38

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
    46d6:	28 30       	cpi	r18, 0x08	; 8
    46d8:	31 05       	cpc	r19, r1
    46da:	69 f7       	brne	.-38     	; 0x46b6 <main+0xb14>
    46dc:	df cf       	rjmp	.-66     	; 0x469c <main+0xafa>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    46de:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    46e2:	80 91 eb 05 	lds	r24, 0x05EB
    46e6:	82 30       	cpi	r24, 0x02	; 2
    46e8:	31 f4       	brne	.+12     	; 0x46f6 <main+0xb54>
    46ea:	18 14       	cp	r1, r8
    46ec:	19 04       	cpc	r1, r9
    46ee:	1c f4       	brge	.+6      	; 0x46f6 <main+0xb54>
			{
				PWM_pulses--;
    46f0:	91 e0       	ldi	r25, 0x01	; 1
    46f2:	89 1a       	sub	r8, r25
    46f4:	91 08       	sbc	r9, r1
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    46f6:	10 92 18 05 	sts	0x0518, r1
    46fa:	1b 86       	std	Y+11, r1	; 0x0b
    46fc:	20 c0       	rjmp	.+64     	; 0x473e <main+0xb9c>
		}
		
		// In FAST mode and in-between bursts, sync up with the RC so that the time from Interrupt to PWM is constant.
		// This helps tighten up the number of pulses allowable
		else if ((Config.Servo_rate == FAST) && (PWMBlocked == true) && (RCrateMeasured == true) && (RCInterruptsON == true) && (Overdue == false))
    46fe:	29 81       	ldd	r18, Y+1	; 0x01
    4700:	22 23       	and	r18, r18
    4702:	81 f1       	breq	.+96     	; 0x4764 <main+0xbc2>
    4704:	3d 85       	ldd	r19, Y+13	; 0x0d
    4706:	33 23       	and	r19, r19
    4708:	09 f4       	brne	.+2      	; 0x470c <main+0xb6a>
    470a:	73 c0       	rjmp	.+230    	; 0x47f2 <main+0xc50>
    470c:	80 91 19 05 	lds	r24, 0x0519
    4710:	81 11       	cpse	r24, r1
    4712:	15 c0       	rjmp	.+42     	; 0x473e <main+0xb9c>
    4714:	80 e0       	ldi	r24, 0x00	; 0
    4716:	90 e0       	ldi	r25, 0x00	; 0
		{
			fast_sync_timer = 0;
			
			// Wait here until interrupted or timed out (15ms)
			while ((Interrupted == false) && (fast_sync_timer < FASTSYNCLIMIT))
    4718:	20 91 f0 07 	lds	r18, 0x07F0
    471c:	21 11       	cpse	r18, r1
    471e:	0e c0       	rjmp	.+28     	; 0x473c <main+0xb9a>
    4720:	85 32       	cpi	r24, 0x25	; 37
    4722:	31 e0       	ldi	r19, 0x01	; 1
    4724:	93 07       	cpc	r25, r19
    4726:	50 f4       	brcc	.+20     	; 0x473c <main+0xb9a>
			{
				fast_sync_timer += (uint8_t)(TCNT2 - fast_sync_TCNT2);
    4728:	20 91 b2 00 	lds	r18, 0x00B2
    472c:	4f a1       	ldd	r20, Y+39	; 0x27
    472e:	24 1b       	sub	r18, r20
    4730:	82 0f       	add	r24, r18
    4732:	91 1d       	adc	r25, r1
				fast_sync_TCNT2 = TCNT2;
    4734:	20 91 b2 00 	lds	r18, 0x00B2
    4738:	2f a3       	std	Y+39, r18	; 0x27
    473a:	ee cf       	rjmp	.-36     	; 0x4718 <main+0xb76>
			}
			
			// Debug - Whhaaaat? - delete this unless I recall why it is even here.
			Interrupted_Clone = false;
    473c:	00 e0       	ldi	r16, 0x00	; 0
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    473e:	18 14       	cp	r1, r8
    4740:	19 04       	cpc	r1, r9
    4742:	84 f0       	brlt	.+32     	; 0x4764 <main+0xbc2>
    4744:	49 81       	ldd	r20, Y+1	; 0x01
    4746:	44 23       	and	r20, r20
    4748:	69 f0       	breq	.+26     	; 0x4764 <main+0xbc2>
    474a:	2d 85       	ldd	r18, Y+13	; 0x0d
    474c:	21 11       	cpse	r18, r1
    474e:	0a c0       	rjmp	.+20     	; 0x4764 <main+0xbc2>
    4750:	80 91 eb 05 	lds	r24, 0x05EB
    4754:	82 30       	cpi	r24, 0x02	; 2
    4756:	29 f4       	brne	.+10     	; 0x4762 <main+0xbc0>
		{
			init_int();					// Re-enable interrupts
    4758:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <init_int>
			RCInterruptsON = true;
    475c:	31 e0       	ldi	r19, 0x01	; 1
    475e:	3d 87       	std	Y+13, r19	; 0x0d
    4760:	01 c0       	rjmp	.+2      	; 0x4764 <main+0xbc2>
    4762:	1d 86       	std	Y+13, r1	; 0x0d
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    4764:	80 91 20 05 	lds	r24, 0x0520
    4768:	49 a5       	ldd	r20, Y+41	; 0x29
    476a:	48 17       	cp	r20, r24
    476c:	19 f0       	breq	.+6      	; 0x4774 <main+0xbd2>
    476e:	11 11       	cpse	r17, r1
    4770:	01 c0       	rjmp	.+2      	; 0x4774 <main+0xbd2>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    4772:	17 e0       	ldi	r17, 0x07	; 7
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    4774:	20 91 20 05 	lds	r18, 0x0520
    4778:	29 a7       	std	Y+41, r18	; 0x29
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    477a:	7e 8c       	ldd	r7, Y+30	; 0x1e
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
	
	} // while loop
    477c:	4c 88       	ldd	r4, Y+20	; 0x14
    477e:	5d 88       	ldd	r5, Y+21	; 0x15
    4780:	57 ca       	rjmp	.-2898   	; 0x3c30 <main+0x8e>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    4782:	70 93 22 05 	sts	0x0522, r23
    4786:	60 93 21 05 	sts	0x0521, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    478a:	85 e0       	ldi	r24, 0x05	; 5
    478c:	80 93 23 05 	sts	0x0523, r24
    4790:	5e cc       	rjmp	.-1860   	; 0x404e <main+0x4ac>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    4792:	88 24       	eor	r8, r8
    4794:	83 94       	inc	r8
    4796:	91 2c       	mov	r9, r1
    4798:	da ce       	rjmp	.-588    	; 0x454e <main+0x9ac>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
    479a:	e4 e0       	ldi	r30, 0x04	; 4
    479c:	8e 2e       	mov	r8, r30
    479e:	91 2c       	mov	r9, r1
    47a0:	0f c0       	rjmp	.+30     	; 0x47c0 <main+0xc1e>
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
    47a2:	75 e0       	ldi	r23, 0x05	; 5
    47a4:	87 2e       	mov	r8, r23
    47a6:	91 2c       	mov	r9, r1
    47a8:	0b c0       	rjmp	.+22     	; 0x47c0 <main+0xc1e>
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
    47aa:	66 e0       	ldi	r22, 0x06	; 6
    47ac:	86 2e       	mov	r8, r22
    47ae:	91 2c       	mov	r9, r1
    47b0:	07 c0       	rjmp	.+14     	; 0x47c0 <main+0xc1e>
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
    47b2:	57 e0       	ldi	r21, 0x07	; 7
    47b4:	85 2e       	mov	r8, r21
    47b6:	91 2c       	mov	r9, r1
    47b8:	03 c0       	rjmp	.+6      	; 0x47c0 <main+0xc1e>
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    47ba:	48 e0       	ldi	r20, 0x08	; 8
    47bc:	84 2e       	mov	r8, r20
    47be:	91 2c       	mov	r9, r1
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    47c0:	31 e0       	ldi	r19, 0x01	; 1
    47c2:	39 83       	std	Y+1, r19	; 0x01
    47c4:	c4 ce       	rjmp	.-632    	; 0x454e <main+0x9ac>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 29ms is safe for all formats.

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
    47c6:	33 e0       	ldi	r19, 0x03	; 3
    47c8:	83 2e       	mov	r8, r19
    47ca:	91 2c       	mov	r9, r1
    47cc:	0b c0       	rjmp	.+22     	; 0x47e4 <main+0xc42>
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
    47ce:	24 e0       	ldi	r18, 0x04	; 4
    47d0:	82 2e       	mov	r8, r18
    47d2:	91 2c       	mov	r9, r1
    47d4:	07 c0       	rjmp	.+14     	; 0x47e4 <main+0xc42>
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
    47d6:	95 e0       	ldi	r25, 0x05	; 5
    47d8:	89 2e       	mov	r8, r25
    47da:	91 2c       	mov	r9, r1
    47dc:	03 c0       	rjmp	.+6      	; 0x47e4 <main+0xc42>
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    47de:	86 e0       	ldi	r24, 0x06	; 6
    47e0:	88 2e       	mov	r8, r24
    47e2:	91 2c       	mov	r9, r1
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    47e4:	41 e0       	ldi	r20, 0x01	; 1
    47e6:	49 83       	std	Y+1, r20	; 0x01
    47e8:	b2 ce       	rjmp	.-668    	; 0x454e <main+0x9ac>
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    47ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    47ec:	41 11       	cpse	r20, r1
    47ee:	19 cf       	rjmp	.-462    	; 0x4622 <main+0xa80>
    47f0:	0c cf       	rjmp	.-488    	; 0x460a <main+0xa68>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    47f2:	18 14       	cp	r1, r8
    47f4:	19 04       	cpc	r1, r9
    47f6:	0c f4       	brge	.+2      	; 0x47fa <main+0xc58>
    47f8:	b5 cf       	rjmp	.-150    	; 0x4764 <main+0xbc2>
    47fa:	aa cf       	rjmp	.-172    	; 0x4750 <main+0xbae>

000047fc <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    47fc:	0f 93       	push	r16
    47fe:	1f 93       	push	r17
    4800:	cf 93       	push	r28
    4802:	df 93       	push	r29
    4804:	c7 e0       	ldi	r28, 0x07	; 7
    4806:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    4808:	08 2f       	mov	r16, r24
    480a:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    480c:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    480e:	c8 01       	movw	r24, r16
    4810:	0c 2e       	mov	r0, r28
    4812:	02 c0       	rjmp	.+4      	; 0x4818 <spiwrite+0x1c>
    4814:	95 95       	asr	r25
    4816:	87 95       	ror	r24
    4818:	0a 94       	dec	r0
    481a:	e2 f7       	brpl	.-8      	; 0x4814 <spiwrite+0x18>
    481c:	80 ff       	sbrs	r24, 0
    481e:	02 c0       	rjmp	.+4      	; 0x4824 <spiwrite+0x28>
		{
			LCD_SI = 1;
    4820:	59 9a       	sbi	0x0b, 1	; 11
    4822:	01 c0       	rjmp	.+2      	; 0x4826 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    4824:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    4826:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    4828:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <glcd_delay>
    482c:	21 97       	sbiw	r28, 0x01	; 1
    482e:	70 f7       	brcc	.-36     	; 0x480c <spiwrite+0x10>
	}
}
    4830:	df 91       	pop	r29
    4832:	cf 91       	pop	r28
    4834:	1f 91       	pop	r17
    4836:	0f 91       	pop	r16
    4838:	08 95       	ret

0000483a <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    483a:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    483c:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <spiwrite>

00004840 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    4840:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    4842:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <spiwrite>

00004846 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    4846:	cf 93       	push	r28
    4848:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    484a:	81 e8       	ldi	r24, 0x81	; 129
    484c:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
	st7565_command(val);
    4850:	8c 2f       	mov	r24, r28
}
    4852:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    4854:	0c 94 1d 24 	jmp	0x483a	; 0x483a <st7565_command>

00004858 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    4858:	cf 93       	push	r28
    485a:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    485c:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    485e:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4860:	87 e8       	ldi	r24, 0x87	; 135
    4862:	93 e1       	ldi	r25, 0x13	; 19
    4864:	01 97       	sbiw	r24, 0x01	; 1
    4866:	f1 f7       	brne	.-4      	; 0x4864 <st7565_init+0xc>
    4868:	00 c0       	rjmp	.+0      	; 0x486a <st7565_init+0x12>
    486a:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    486c:	5e 9a       	sbi	0x0b, 6	; 11
    486e:	c2 ef       	ldi	r28, 0xF2	; 242
    4870:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    4872:	fe 01       	movw	r30, r28
    4874:	84 91       	lpm	r24, Z
    4876:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
    487a:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    487c:	fe e0       	ldi	r31, 0x0E	; 14
    487e:	c0 30       	cpi	r28, 0x00	; 0
    4880:	df 07       	cpc	r29, r31
    4882:	b9 f7       	brne	.-18     	; 0x4872 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    4884:	80 91 4a 06 	lds	r24, 0x064A
    4888:	0e 94 23 24 	call	0x4846	; 0x4846 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    488c:	88 ec       	ldi	r24, 0xC8	; 200
}
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    4892:	0c 94 1d 24 	jmp	0x483a	; 0x483a <st7565_command>

00004896 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    4896:	df 92       	push	r13
    4898:	ef 92       	push	r14
    489a:	ff 92       	push	r15
    489c:	0f 93       	push	r16
    489e:	1f 93       	push	r17
    48a0:	cf 93       	push	r28
    48a2:	df 93       	push	r29
    48a4:	c0 e0       	ldi	r28, 0x00	; 0
    48a6:	de e0       	ldi	r29, 0x0E	; 14
    48a8:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    48aa:	fe 01       	movw	r30, r28
    48ac:	84 91       	lpm	r24, Z
    48ae:	80 6b       	ori	r24, 0xB0	; 176
    48b0:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    48ba:	80 e1       	ldi	r24, 0x10	; 16
    48bc:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    48c0:	80 ee       	ldi	r24, 0xE0	; 224
    48c2:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
    48c6:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    48c8:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    48ca:	f7 01       	movw	r30, r14
    48cc:	81 91       	ld	r24, Z+
    48ce:	7f 01       	movw	r14, r30
    48d0:	0e 94 20 24 	call	0x4840	; 0x4840 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    48d4:	d3 94       	inc	r13
    48d6:	f0 e8       	ldi	r31, 0x80	; 128
    48d8:	df 12       	cpse	r13, r31
    48da:	f7 cf       	rjmp	.-18     	; 0x48ca <write_buffer+0x34>
    48dc:	21 96       	adiw	r28, 0x01	; 1
    48de:	00 58       	subi	r16, 0x80	; 128
    48e0:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    48e2:	8e e0       	ldi	r24, 0x0E	; 14
    48e4:	c8 30       	cpi	r28, 0x08	; 8
    48e6:	d8 07       	cpc	r29, r24
    48e8:	01 f7       	brne	.-64     	; 0x48aa <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    48ea:	df 91       	pop	r29
    48ec:	cf 91       	pop	r28
    48ee:	1f 91       	pop	r17
    48f0:	0f 91       	pop	r16
    48f2:	ff 90       	pop	r15
    48f4:	ef 90       	pop	r14
    48f6:	df 90       	pop	r13
    48f8:	08 95       	ret

000048fa <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	34 e0       	ldi	r19, 0x04	; 4
    48fe:	fc 01       	movw	r30, r24
    4900:	a9 01       	movw	r20, r18
    4902:	11 92       	st	Z+, r1
    4904:	41 50       	subi	r20, 0x01	; 1
    4906:	50 40       	sbci	r21, 0x00	; 0
    4908:	e1 f7       	brne	.-8      	; 0x4902 <clear_buffer+0x8>
    490a:	08 95       	ret

0000490c <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    490c:	cf 93       	push	r28
    490e:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4910:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    4912:	8d 2f       	mov	r24, r29
    4914:	80 6b       	ori	r24, 0xB0	; 176
    4916:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    491a:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    491c:	8c 2f       	mov	r24, r28
    491e:	8f 70       	andi	r24, 0x0F	; 15
    4920:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    4924:	8c 2f       	mov	r24, r28
    4926:	82 95       	swap	r24
    4928:	8f 70       	andi	r24, 0x0F	; 15
    492a:	80 61       	ori	r24, 0x10	; 16
    492c:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
			st7565_data(0x00);											// Clear data
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	0e 94 20 24 	call	0x4840	; 0x4840 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4936:	cf 5f       	subi	r28, 0xFF	; 255
    4938:	c0 38       	cpi	r28, 0x80	; 128
    493a:	81 f7       	brne	.-32     	; 0x491c <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    493c:	df 5f       	subi	r29, 0xFF	; 255
    493e:	d8 30       	cpi	r29, 0x08	; 8
    4940:	41 f7       	brne	.-48     	; 0x4912 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    4942:	df 91       	pop	r29
    4944:	cf 91       	pop	r28
    4946:	08 95       	ret

00004948 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    4948:	67 fd       	sbrc	r22, 7
    494a:	36 c0       	rjmp	.+108    	; 0x49b8 <setpixel+0x70>
    494c:	40 34       	cpi	r20, 0x40	; 64
    494e:	a0 f5       	brcc	.+104    	; 0x49b8 <setpixel+0x70>
    4950:	34 2f       	mov	r19, r20
    4952:	36 95       	lsr	r19
    4954:	36 95       	lsr	r19
    4956:	36 95       	lsr	r19
    4958:	e6 2f       	mov	r30, r22
    495a:	f0 e0       	ldi	r31, 0x00	; 0
    495c:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    495e:	22 23       	and	r18, r18
    4960:	a9 f0       	breq	.+42     	; 0x498c <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    4962:	20 e8       	ldi	r18, 0x80	; 128
    4964:	32 9f       	mul	r19, r18
    4966:	e0 0d       	add	r30, r0
    4968:	f1 1d       	adc	r31, r1
    496a:	11 24       	eor	r1, r1
    496c:	e8 0f       	add	r30, r24
    496e:	f9 1f       	adc	r31, r25
    4970:	40 95       	com	r20
    4972:	50 95       	com	r21
    4974:	47 70       	andi	r20, 0x07	; 7
    4976:	55 27       	eor	r21, r21
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	04 2e       	mov	r0, r20
    497e:	01 c0       	rjmp	.+2      	; 0x4982 <setpixel+0x3a>
    4980:	88 0f       	add	r24, r24
    4982:	0a 94       	dec	r0
    4984:	ea f7       	brpl	.-6      	; 0x4980 <setpixel+0x38>
    4986:	90 81       	ld	r25, Z
    4988:	98 2b       	or	r25, r24
    498a:	15 c0       	rjmp	.+42     	; 0x49b6 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    498c:	20 e8       	ldi	r18, 0x80	; 128
    498e:	32 9f       	mul	r19, r18
    4990:	e0 0d       	add	r30, r0
    4992:	f1 1d       	adc	r31, r1
    4994:	11 24       	eor	r1, r1
    4996:	e8 0f       	add	r30, r24
    4998:	f9 1f       	adc	r31, r25
    499a:	40 95       	com	r20
    499c:	50 95       	com	r21
    499e:	47 70       	andi	r20, 0x07	; 7
    49a0:	55 27       	eor	r21, r21
    49a2:	81 e0       	ldi	r24, 0x01	; 1
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	04 2e       	mov	r0, r20
    49a8:	01 c0       	rjmp	.+2      	; 0x49ac <setpixel+0x64>
    49aa:	88 0f       	add	r24, r24
    49ac:	0a 94       	dec	r0
    49ae:	ea f7       	brpl	.-6      	; 0x49aa <setpixel+0x62>
    49b0:	80 95       	com	r24
    49b2:	90 81       	ld	r25, Z
    49b4:	98 23       	and	r25, r24
    49b6:	90 83       	st	Z, r25
    49b8:	08 95       	ret

000049ba <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    49ba:	9f 92       	push	r9
    49bc:	af 92       	push	r10
    49be:	bf 92       	push	r11
    49c0:	cf 92       	push	r12
    49c2:	df 92       	push	r13
    49c4:	ef 92       	push	r14
    49c6:	ff 92       	push	r15
    49c8:	0f 93       	push	r16
    49ca:	1f 93       	push	r17
    49cc:	cf 93       	push	r28
    49ce:	df 93       	push	r29
    49d0:	ec 01       	movw	r28, r24
    49d2:	16 2f       	mov	r17, r22
    49d4:	f4 2e       	mov	r15, r20
    49d6:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    49d8:	a0 2f       	mov	r26, r16
    49da:	b0 e0       	ldi	r27, 0x00	; 0
    49dc:	a4 1b       	sub	r26, r20
    49de:	b1 09       	sbc	r27, r1
    49e0:	b7 ff       	sbrs	r27, 7
    49e2:	03 c0       	rjmp	.+6      	; 0x49ea <drawline+0x30>
    49e4:	b1 95       	neg	r27
    49e6:	a1 95       	neg	r26
    49e8:	b1 09       	sbc	r27, r1
    49ea:	ed 2d       	mov	r30, r13
    49ec:	f0 e0       	ldi	r31, 0x00	; 0
    49ee:	e1 1b       	sub	r30, r17
    49f0:	f1 09       	sbc	r31, r1
    49f2:	f7 ff       	sbrs	r31, 7
    49f4:	03 c0       	rjmp	.+6      	; 0x49fc <drawline+0x42>
    49f6:	f1 95       	neg	r31
    49f8:	e1 95       	neg	r30
    49fa:	f1 09       	sbc	r31, r1
    49fc:	bb 24       	eor	r11, r11
    49fe:	b3 94       	inc	r11
    4a00:	ea 17       	cp	r30, r26
    4a02:	fb 07       	cpc	r31, r27
    4a04:	14 f0       	brlt	.+4      	; 0x4a0a <drawline+0x50>
    4a06:	b1 2c       	mov	r11, r1
    4a08:	06 c0       	rjmp	.+12     	; 0x4a16 <drawline+0x5c>
    4a0a:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    4a0c:	d0 2e       	mov	r13, r16
    4a0e:	08 2f       	mov	r16, r24
    4a10:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    4a12:	1f 2d       	mov	r17, r15
    4a14:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    4a16:	d1 16       	cp	r13, r17
    4a18:	30 f4       	brcc	.+12     	; 0x4a26 <drawline+0x6c>
    4a1a:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    4a1c:	f0 2e       	mov	r15, r16
    4a1e:	08 2f       	mov	r16, r24
    4a20:	81 2f       	mov	r24, r17
    4a22:	1d 2d       	mov	r17, r13
    4a24:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    4a26:	ad 2c       	mov	r10, r13
    4a28:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    4a2a:	e0 2f       	mov	r30, r16
    4a2c:	f0 e0       	ldi	r31, 0x00	; 0
    4a2e:	ef 19       	sub	r30, r15
    4a30:	f1 09       	sbc	r31, r1
    4a32:	f7 ff       	sbrs	r31, 7
    4a34:	03 c0       	rjmp	.+6      	; 0x4a3c <drawline+0x82>
    4a36:	f1 95       	neg	r31
    4a38:	e1 95       	neg	r30
    4a3a:	f1 09       	sbc	r31, r1
    4a3c:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    4a3e:	ca 2c       	mov	r12, r10
    4a40:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    4a42:	f0 16       	cp	r15, r16
    4a44:	10 f4       	brcc	.+4      	; 0x4a4a <drawline+0x90>
	{
		ystep = 1;
    4a46:	01 e0       	ldi	r16, 0x01	; 1
    4a48:	10 c0       	rjmp	.+32     	; 0x4a6a <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    4a4a:	0f ef       	ldi	r16, 0xFF	; 255
    4a4c:	0e c0       	rjmp	.+28     	; 0x4a6a <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    4a4e:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    4a50:	bb 20       	and	r11, r11
    4a52:	71 f0       	breq	.+28     	; 0x4a70 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    4a54:	41 2f       	mov	r20, r17
    4a56:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4a58:	ce 01       	movw	r24, r28
    4a5a:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>
		}
		err -= dy;
    4a5e:	c9 18       	sub	r12, r9
		if (err < 0) 
    4a60:	c7 fe       	sbrs	r12, 7
    4a62:	02 c0       	rjmp	.+4      	; 0x4a68 <drawline+0xae>
		{
			y0 += ystep;
    4a64:	f0 0e       	add	r15, r16
			err += dx;
    4a66:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    4a68:	1f 5f       	subi	r17, 0xFF	; 255
    4a6a:	1d 15       	cp	r17, r13
    4a6c:	80 f3       	brcs	.-32     	; 0x4a4e <drawline+0x94>
    4a6e:	03 c0       	rjmp	.+6      	; 0x4a76 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4a70:	4f 2d       	mov	r20, r15
    4a72:	61 2f       	mov	r22, r17
    4a74:	f1 cf       	rjmp	.-30     	; 0x4a58 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    4a76:	df 91       	pop	r29
    4a78:	cf 91       	pop	r28
    4a7a:	1f 91       	pop	r17
    4a7c:	0f 91       	pop	r16
    4a7e:	ff 90       	pop	r15
    4a80:	ef 90       	pop	r14
    4a82:	df 90       	pop	r13
    4a84:	cf 90       	pop	r12
    4a86:	bf 90       	pop	r11
    4a88:	af 90       	pop	r10
    4a8a:	9f 90       	pop	r9
    4a8c:	08 95       	ret

00004a8e <drawrect>:
	}
}

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    4a8e:	9f 92       	push	r9
    4a90:	af 92       	push	r10
    4a92:	bf 92       	push	r11
    4a94:	cf 92       	push	r12
    4a96:	df 92       	push	r13
    4a98:	ef 92       	push	r14
    4a9a:	ff 92       	push	r15
    4a9c:	0f 93       	push	r16
    4a9e:	1f 93       	push	r17
    4aa0:	cf 93       	push	r28
    4aa2:	df 93       	push	r29
    4aa4:	ec 01       	movw	r28, r24
    4aa6:	f6 2e       	mov	r15, r22
    4aa8:	b4 2e       	mov	r11, r20
    4aaa:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4aac:	16 2f       	mov	r17, r22
    4aae:	c2 2e       	mov	r12, r18
    4ab0:	d1 2c       	mov	r13, r1
    4ab2:	c6 0e       	add	r12, r22
    4ab4:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    4ab6:	aa 24       	eor	r10, r10
    4ab8:	aa 94       	dec	r10
    4aba:	a0 0e       	add	r10, r16
    4abc:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4abe:	81 2f       	mov	r24, r17
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	8c 15       	cp	r24, r12
    4ac4:	9d 05       	cpc	r25, r13
    4ac6:	74 f4       	brge	.+28     	; 0x4ae4 <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    4ac8:	2e 2d       	mov	r18, r14
    4aca:	4b 2d       	mov	r20, r11
    4acc:	61 2f       	mov	r22, r17
    4ace:	ce 01       	movw	r24, r28
    4ad0:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>
		setpixel(buff, i, y+h-1, color);
    4ad4:	2e 2d       	mov	r18, r14
    4ad6:	4a 2d       	mov	r20, r10
    4ad8:	61 2f       	mov	r22, r17
    4ada:	ce 01       	movw	r24, r28
    4adc:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4ae0:	1f 5f       	subi	r17, 0xFF	; 255
    4ae2:	ed cf       	rjmp	.-38     	; 0x4abe <drawrect+0x30>
    4ae4:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4ae6:	10 e0       	ldi	r17, 0x00	; 0
    4ae8:	0b 0d       	add	r16, r11
    4aea:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    4aec:	cc 24       	eor	r12, r12
    4aee:	ca 94       	dec	r12
    4af0:	c9 0c       	add	r12, r9
    4af2:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4af4:	8d 2d       	mov	r24, r13
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	80 17       	cp	r24, r16
    4afa:	91 07       	cpc	r25, r17
    4afc:	74 f4       	brge	.+28     	; 0x4b1a <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    4afe:	2e 2d       	mov	r18, r14
    4b00:	4d 2d       	mov	r20, r13
    4b02:	6f 2d       	mov	r22, r15
    4b04:	ce 01       	movw	r24, r28
    4b06:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>
		setpixel(buff, x+w-1, i, color);
    4b0a:	2e 2d       	mov	r18, r14
    4b0c:	4d 2d       	mov	r20, r13
    4b0e:	6c 2d       	mov	r22, r12
    4b10:	ce 01       	movw	r24, r28
    4b12:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4b16:	d3 94       	inc	r13
    4b18:	ed cf       	rjmp	.-38     	; 0x4af4 <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    4b1a:	df 91       	pop	r29
    4b1c:	cf 91       	pop	r28
    4b1e:	1f 91       	pop	r17
    4b20:	0f 91       	pop	r16
    4b22:	ff 90       	pop	r15
    4b24:	ef 90       	pop	r14
    4b26:	df 90       	pop	r13
    4b28:	cf 90       	pop	r12
    4b2a:	bf 90       	pop	r11
    4b2c:	af 90       	pop	r10
    4b2e:	9f 90       	pop	r9
    4b30:	08 95       	ret

00004b32 <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    4b32:	4f 92       	push	r4
    4b34:	5f 92       	push	r5
    4b36:	6f 92       	push	r6
    4b38:	7f 92       	push	r7
    4b3a:	8f 92       	push	r8
    4b3c:	9f 92       	push	r9
    4b3e:	af 92       	push	r10
    4b40:	bf 92       	push	r11
    4b42:	cf 92       	push	r12
    4b44:	df 92       	push	r13
    4b46:	ef 92       	push	r14
    4b48:	ff 92       	push	r15
    4b4a:	0f 93       	push	r16
    4b4c:	1f 93       	push	r17
    4b4e:	cf 93       	push	r28
    4b50:	df 93       	push	r29
    4b52:	ec 01       	movw	r28, r24
    4b54:	96 2e       	mov	r9, r22
    4b56:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    4b58:	bb 24       	eor	r11, r11
    4b5a:	b3 94       	inc	r11
    4b5c:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    4b5e:	82 2e       	mov	r8, r18
    4b60:	81 94       	neg	r8
    4b62:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    4b64:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4b66:	74 2e       	mov	r7, r20
    4b68:	72 1a       	sub	r7, r18
    4b6a:	e4 2e       	mov	r14, r20
    4b6c:	f1 2c       	mov	r15, r1
    4b6e:	67 01       	movw	r12, r14
    4b70:	c2 0e       	add	r12, r18
    4b72:	d1 1c       	adc	r13, r1
    4b74:	87 2d       	mov	r24, r7
    4b76:	99 27       	eor	r25, r25
    4b78:	87 fd       	sbrc	r24, 7
    4b7a:	90 95       	com	r25
    4b7c:	c8 16       	cp	r12, r24
    4b7e:	d9 06       	cpc	r13, r25
    4b80:	44 f0       	brlt	.+16     	; 0x4b92 <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    4b82:	20 2f       	mov	r18, r16
    4b84:	47 2d       	mov	r20, r7
    4b86:	69 2d       	mov	r22, r9
    4b88:	ce 01       	movw	r24, r28
    4b8a:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>
    4b8e:	73 94       	inc	r7
    4b90:	f1 cf       	rjmp	.-30     	; 0x4b74 <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4b92:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    4b94:	71 16       	cp	r7, r17
    4b96:	0c f0       	brlt	.+2      	; 0x4b9a <fillcircle+0x68>
    4b98:	4c c0       	rjmp	.+152    	; 0x4c32 <fillcircle+0x100>
	{
		if (f >= 0) 
    4b9a:	b7 fc       	sbrc	r11, 7
    4b9c:	04 c0       	rjmp	.+8      	; 0x4ba6 <fillcircle+0x74>
		{
			y--;
    4b9e:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    4ba0:	83 94       	inc	r8
    4ba2:	83 94       	inc	r8
			f += ddF_y;
    4ba4:	b8 0c       	add	r11, r8
    4ba6:	73 94       	inc	r7
    4ba8:	87 2d       	mov	r24, r7
    4baa:	88 0f       	add	r24, r24
    4bac:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    4bae:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    4bb0:	6a 2c       	mov	r6, r10
    4bb2:	61 1a       	sub	r6, r17
    4bb4:	67 01       	movw	r12, r14
    4bb6:	c1 0e       	add	r12, r17
    4bb8:	d1 1c       	adc	r13, r1
    4bba:	17 fd       	sbrc	r17, 7
    4bbc:	da 94       	dec	r13
    4bbe:	47 2c       	mov	r4, r7
    4bc0:	49 0c       	add	r4, r9
    4bc2:	59 2c       	mov	r5, r9
    4bc4:	57 18       	sub	r5, r7
    4bc6:	86 2d       	mov	r24, r6
    4bc8:	99 27       	eor	r25, r25
    4bca:	87 fd       	sbrc	r24, 7
    4bcc:	90 95       	com	r25
    4bce:	c8 16       	cp	r12, r24
    4bd0:	d9 06       	cpc	r13, r25
    4bd2:	74 f0       	brlt	.+28     	; 0x4bf0 <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    4bd4:	20 2f       	mov	r18, r16
    4bd6:	46 2d       	mov	r20, r6
    4bd8:	64 2d       	mov	r22, r4
    4bda:	ce 01       	movw	r24, r28
    4bdc:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>
			setpixel(buff, x0-x, i, color);
    4be0:	20 2f       	mov	r18, r16
    4be2:	46 2d       	mov	r20, r6
    4be4:	65 2d       	mov	r22, r5
    4be6:	ce 01       	movw	r24, r28
    4be8:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>
    4bec:	63 94       	inc	r6
    4bee:	eb cf       	rjmp	.-42     	; 0x4bc6 <fillcircle+0x94>
    4bf0:	6a 2c       	mov	r6, r10
    4bf2:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4bf4:	67 01       	movw	r12, r14
    4bf6:	c7 0c       	add	r12, r7
    4bf8:	d1 1c       	adc	r13, r1
    4bfa:	77 fc       	sbrc	r7, 7
    4bfc:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    4bfe:	41 2e       	mov	r4, r17
    4c00:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    4c02:	59 2c       	mov	r5, r9
    4c04:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4c06:	86 2d       	mov	r24, r6
    4c08:	99 27       	eor	r25, r25
    4c0a:	87 fd       	sbrc	r24, 7
    4c0c:	90 95       	com	r25
    4c0e:	c8 16       	cp	r12, r24
    4c10:	d9 06       	cpc	r13, r25
    4c12:	0c f4       	brge	.+2      	; 0x4c16 <fillcircle+0xe4>
    4c14:	bf cf       	rjmp	.-130    	; 0x4b94 <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    4c16:	20 2f       	mov	r18, r16
    4c18:	46 2d       	mov	r20, r6
    4c1a:	64 2d       	mov	r22, r4
    4c1c:	ce 01       	movw	r24, r28
    4c1e:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>
			setpixel(buff, x0-y, i, color);
    4c22:	20 2f       	mov	r18, r16
    4c24:	46 2d       	mov	r20, r6
    4c26:	65 2d       	mov	r22, r5
    4c28:	ce 01       	movw	r24, r28
    4c2a:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>
    4c2e:	63 94       	inc	r6
    4c30:	ea cf       	rjmp	.-44     	; 0x4c06 <fillcircle+0xd4>
		}    
	}
}
    4c32:	df 91       	pop	r29
    4c34:	cf 91       	pop	r28
    4c36:	1f 91       	pop	r17
    4c38:	0f 91       	pop	r16
    4c3a:	ff 90       	pop	r15
    4c3c:	ef 90       	pop	r14
    4c3e:	df 90       	pop	r13
    4c40:	cf 90       	pop	r12
    4c42:	bf 90       	pop	r11
    4c44:	af 90       	pop	r10
    4c46:	9f 90       	pop	r9
    4c48:	8f 90       	pop	r8
    4c4a:	7f 90       	pop	r7
    4c4c:	6f 90       	pop	r6
    4c4e:	5f 90       	pop	r5
    4c50:	4f 90       	pop	r4
    4c52:	08 95       	ret

00004c54 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    4c54:	88 0f       	add	r24, r24
    4c56:	99 1f       	adc	r25, r25
    4c58:	88 5f       	subi	r24, 0xF8	; 248
    4c5a:	91 4f       	sbci	r25, 0xF1	; 241
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	85 91       	lpm	r24, Z+
    4c60:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    4c62:	0c 94 04 44 	jmp	0x8808	; 0x8808 <pgm_mugui_lcd_puts>

00004c66 <gLCDprint_Menu_P>:
    4c66:	0c 94 04 44 	jmp	0x8808	; 0x8808 <pgm_mugui_lcd_puts>

00004c6a <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    4c6a:	80 e0       	ldi	r24, 0x00	; 0
    4c6c:	91 e0       	ldi	r25, 0x01	; 1
    4c6e:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    4c72:	23 e0       	ldi	r18, 0x03	; 3
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	49 e2       	ldi	r20, 0x29	; 41
    4c78:	50 e0       	ldi	r21, 0x00	; 0
    4c7a:	63 e7       	ldi	r22, 0x73	; 115
    4c7c:	71 e0       	ldi	r23, 0x01	; 1
    4c7e:	89 e7       	ldi	r24, 0x79	; 121
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    4c86:	27 e1       	ldi	r18, 0x17	; 23
    4c88:	30 e0       	ldi	r19, 0x00	; 0
    4c8a:	48 e1       	ldi	r20, 0x18	; 24
    4c8c:	50 e0       	ldi	r21, 0x00	; 0
    4c8e:	63 e7       	ldi	r22, 0x73	; 115
    4c90:	71 e0       	ldi	r23, 0x01	; 1
    4c92:	8a e7       	ldi	r24, 0x7A	; 122
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    4c9a:	80 91 20 05 	lds	r24, 0x0520
    4c9e:	83 ff       	sbrs	r24, 3
    4ca0:	13 c0       	rjmp	.+38     	; 0x4cc8 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    4ca2:	2b e2       	ldi	r18, 0x2B	; 43
    4ca4:	30 e0       	ldi	r19, 0x00	; 0
    4ca6:	4c e0       	ldi	r20, 0x0C	; 12
    4ca8:	50 e0       	ldi	r21, 0x00	; 0
    4caa:	63 e7       	ldi	r22, 0x73	; 115
    4cac:	71 e0       	ldi	r23, 0x01	; 1
    4cae:	86 e8       	ldi	r24, 0x86	; 134
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    4cb6:	2b e2       	ldi	r18, 0x2B	; 43
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	40 e5       	ldi	r20, 0x50	; 80
    4cbc:	50 e0       	ldi	r21, 0x00	; 0
    4cbe:	63 e7       	ldi	r22, 0x73	; 115
    4cc0:	71 e0       	ldi	r23, 0x01	; 1
    4cc2:	86 e7       	ldi	r24, 0x76	; 118
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	41 c0       	rjmp	.+130    	; 0x4d4a <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)				// No signal
    4cc8:	80 91 20 05 	lds	r24, 0x0520
    4ccc:	81 ff       	sbrs	r24, 1
    4cce:	13 c0       	rjmp	.+38     	; 0x4cf6 <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    4cd0:	2b e2       	ldi	r18, 0x2B	; 43
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	4c e1       	ldi	r20, 0x1C	; 28
    4cd6:	50 e0       	ldi	r21, 0x00	; 0
    4cd8:	63 e7       	ldi	r22, 0x73	; 115
    4cda:	71 e0       	ldi	r23, 0x01	; 1
    4cdc:	8b e4       	ldi	r24, 0x4B	; 75
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    4ce4:	2b e2       	ldi	r18, 0x2B	; 43
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	46 e3       	ldi	r20, 0x36	; 54
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	63 e7       	ldi	r22, 0x73	; 115
    4cee:	71 e0       	ldi	r23, 0x01	; 1
    4cf0:	8c e4       	ldi	r24, 0x4C	; 76
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	2a c0       	rjmp	.+84     	; 0x4d4a <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)			// Throttle high
    4cf6:	80 91 20 05 	lds	r24, 0x0520
    4cfa:	80 ff       	sbrs	r24, 0
    4cfc:	13 c0       	rjmp	.+38     	; 0x4d24 <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    4cfe:	2b e2       	ldi	r18, 0x2B	; 43
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	4a e0       	ldi	r20, 0x0A	; 10
    4d04:	50 e0       	ldi	r21, 0x00	; 0
    4d06:	63 e7       	ldi	r22, 0x73	; 115
    4d08:	71 e0       	ldi	r23, 0x01	; 1
    4d0a:	89 e6       	ldi	r24, 0x69	; 105
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    4d12:	2b e2       	ldi	r18, 0x2B	; 43
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	41 e5       	ldi	r20, 0x51	; 81
    4d18:	50 e0       	ldi	r21, 0x00	; 0
    4d1a:	63 e7       	ldi	r22, 0x73	; 115
    4d1c:	71 e0       	ldi	r23, 0x01	; 1
    4d1e:	87 e3       	ldi	r24, 0x37	; 55
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	13 c0       	rjmp	.+38     	; 0x4d4a <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4d24:	80 91 20 05 	lds	r24, 0x0520
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4d28:	2b e2       	ldi	r18, 0x2B	; 43
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4d2c:	82 ff       	sbrs	r24, 2
    4d2e:	07 c0       	rjmp	.+14     	; 0x4d3e <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4d30:	44 e1       	ldi	r20, 0x14	; 20
    4d32:	50 e0       	ldi	r21, 0x00	; 0
    4d34:	63 e7       	ldi	r22, 0x73	; 115
    4d36:	71 e0       	ldi	r23, 0x01	; 1
    4d38:	8b e8       	ldi	r24, 0x8B	; 139
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	06 c0       	rjmp	.+12     	; 0x4d4a <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    4d3e:	4c e1       	ldi	r20, 0x1C	; 28
    4d40:	50 e0       	ldi	r21, 0x00	; 0
    4d42:	63 e7       	ldi	r22, 0x73	; 115
    4d44:	71 e0       	ldi	r23, 0x01	; 1
    4d46:	8a e8       	ldi	r24, 0x8A	; 138
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
	}

	write_buffer(buffer);
    4d4e:	80 e0       	ldi	r24, 0x00	; 0
    4d50:	91 e0       	ldi	r25, 0x01	; 1
    4d52:	0c 94 4b 24 	jmp	0x4896	; 0x4896 <write_buffer>

00004d56 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    4d56:	cf 93       	push	r28
    4d58:	df 93       	push	r29
    4d5a:	cd b7       	in	r28, 0x3d	; 61
    4d5c:	de b7       	in	r29, 0x3e	; 62
    4d5e:	2c 97       	sbiw	r28, 0x0c	; 12
    4d60:	0f b6       	in	r0, 0x3f	; 63
    4d62:	f8 94       	cli
    4d64:	de bf       	out	0x3e, r29	; 62
    4d66:	0f be       	out	0x3f, r0	; 63
    4d68:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    4d6a:	26 e0       	ldi	r18, 0x06	; 6
    4d6c:	ae 01       	movw	r20, r28
    4d6e:	4f 5f       	subi	r20, 0xFF	; 255
    4d70:	5f 4f       	sbci	r21, 0xFF	; 255
    4d72:	63 e4       	ldi	r22, 0x43	; 67
    4d74:	80 ed       	ldi	r24, 0xD0	; 208
    4d76:	0e 94 9f 28 	call	0x513e	; 0x513e <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    4d7a:	89 81       	ldd	r24, Y+1	; 0x01
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	98 2f       	mov	r25, r24
    4d80:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    4d82:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    4d84:	82 0f       	add	r24, r18
    4d86:	91 1d       	adc	r25, r1
    4d88:	34 e0       	ldi	r19, 0x04	; 4
    4d8a:	95 95       	asr	r25
    4d8c:	87 95       	ror	r24
    4d8e:	3a 95       	dec	r19
    4d90:	e1 f7       	brne	.-8      	; 0x4d8a <get_raw_gyros+0x34>
    4d92:	9a 87       	std	Y+10, r25	; 0x0a
    4d94:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    4d96:	8b 81       	ldd	r24, Y+3	; 0x03
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	98 2f       	mov	r25, r24
    4d9c:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    4d9e:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    4da0:	82 0f       	add	r24, r18
    4da2:	91 1d       	adc	r25, r1
    4da4:	54 e0       	ldi	r21, 0x04	; 4
    4da6:	95 95       	asr	r25
    4da8:	87 95       	ror	r24
    4daa:	5a 95       	dec	r21
    4dac:	e1 f7       	brne	.-8      	; 0x4da6 <get_raw_gyros+0x50>
    4dae:	98 87       	std	Y+8, r25	; 0x08
    4db0:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    4db2:	8d 81       	ldd	r24, Y+5	; 0x05
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	98 2f       	mov	r25, r24
    4db8:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    4dba:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    4dbc:	82 0f       	add	r24, r18
    4dbe:	91 1d       	adc	r25, r1
    4dc0:	74 e0       	ldi	r23, 0x04	; 4
    4dc2:	95 95       	asr	r25
    4dc4:	87 95       	ror	r24
    4dc6:	7a 95       	dec	r23
    4dc8:	e1 f7       	brne	.-8      	; 0x4dc2 <get_raw_gyros+0x6c>
    4dca:	9c 87       	std	Y+12, r25	; 0x0c
    4dcc:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    4dce:	20 91 49 06 	lds	r18, 0x0649
    4dd2:	a3 e8       	ldi	r26, 0x83	; 131
    4dd4:	b5 e0       	ldi	r27, 0x05	; 5
    4dd6:	43 e0       	ldi	r20, 0x03	; 3
    4dd8:	24 02       	muls	r18, r20
    4dda:	90 01       	movw	r18, r0
    4ddc:	11 24       	eor	r1, r1
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	22 54       	subi	r18, 0x42	; 66
    4de4:	37 4e       	sbci	r19, 0xE7	; 231
    4de6:	f9 01       	movw	r30, r18
    4de8:	e8 0f       	add	r30, r24
    4dea:	f9 1f       	adc	r31, r25
    4dec:	e4 91       	lpm	r30, Z
    4dee:	ee 0f       	add	r30, r30
    4df0:	ff 0b       	sbc	r31, r31
    4df2:	41 e0       	ldi	r20, 0x01	; 1
    4df4:	50 e0       	ldi	r21, 0x00	; 0
    4df6:	4c 0f       	add	r20, r28
    4df8:	5d 1f       	adc	r21, r29
    4dfa:	e4 0f       	add	r30, r20
    4dfc:	f5 1f       	adc	r31, r21
    4dfe:	46 81       	ldd	r20, Z+6	; 0x06
    4e00:	57 81       	ldd	r21, Z+7	; 0x07
    4e02:	4d 93       	st	X+, r20
    4e04:	5d 93       	st	X+, r21
    4e06:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    4e08:	83 30       	cpi	r24, 0x03	; 3
    4e0a:	91 05       	cpc	r25, r1
    4e0c:	61 f7       	brne	.-40     	; 0x4de6 <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    4e0e:	2c 96       	adiw	r28, 0x0c	; 12
    4e10:	0f b6       	in	r0, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	de bf       	out	0x3e, r29	; 62
    4e16:	0f be       	out	0x3f, r0	; 63
    4e18:	cd bf       	out	0x3d, r28	; 61
    4e1a:	df 91       	pop	r29
    4e1c:	cf 91       	pop	r28
    4e1e:	08 95       	ret

00004e20 <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    4e20:	1f 93       	push	r17
    4e22:	cf 93       	push	r28
    4e24:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    4e26:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4e2a:	20 91 49 06 	lds	r18, 0x0649
    4e2e:	c7 eb       	ldi	r28, 0xB7	; 183
    4e30:	d7 e0       	ldi	r29, 0x07	; 7
    4e32:	a3 e8       	ldi	r26, 0x83	; 131
    4e34:	b5 e0       	ldi	r27, 0x05	; 5
    4e36:	83 e0       	ldi	r24, 0x03	; 3
    4e38:	28 02       	muls	r18, r24
    4e3a:	90 01       	movw	r18, r0
    4e3c:	11 24       	eor	r1, r1
    4e3e:	80 e0       	ldi	r24, 0x00	; 0
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	24 55       	subi	r18, 0x54	; 84
    4e44:	37 4e       	sbci	r19, 0xE7	; 231
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4e46:	69 91       	ld	r22, Y+
    4e48:	79 91       	ld	r23, Y+
    4e4a:	f9 01       	movw	r30, r18
    4e4c:	e8 0f       	add	r30, r24
    4e4e:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4e50:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4e52:	4d 91       	ld	r20, X+
    4e54:	5c 91       	ld	r21, X
    4e56:	11 97       	sbiw	r26, 0x01	; 1
    4e58:	46 1b       	sub	r20, r22
    4e5a:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4e5c:	14 03       	mulsu	r17, r20
    4e5e:	b0 01       	movw	r22, r0
    4e60:	15 9f       	mul	r17, r21
    4e62:	70 0d       	add	r23, r0
    4e64:	11 24       	eor	r1, r1
    4e66:	6d 93       	st	X+, r22
    4e68:	7d 93       	st	X+, r23
    4e6a:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    4e6c:	83 30       	cpi	r24, 0x03	; 3
    4e6e:	91 05       	cpc	r25, r1
    4e70:	51 f7       	brne	.-44     	; 0x4e46 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    4e72:	df 91       	pop	r29
    4e74:	cf 91       	pop	r28
    4e76:	1f 91       	pop	r17
    4e78:	08 95       	ret

00004e7a <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    4e7a:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    4e7c:	86 e0       	ldi	r24, 0x06	; 6
    4e7e:	e7 eb       	ldi	r30, 0xB7	; 183
    4e80:	f7 e0       	ldi	r31, 0x07	; 7
    4e82:	df 01       	movw	r26, r30
    4e84:	1d 92       	st	X+, r1
    4e86:	8a 95       	dec	r24
    4e88:	e9 f7       	brne	.-6      	; 0x4e84 <CalibrateGyrosFast+0xa>
    4e8a:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    4e8c:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    4e90:	40 91 b7 07 	lds	r20, 0x07B7
    4e94:	50 91 b8 07 	lds	r21, 0x07B8
    4e98:	80 91 83 05 	lds	r24, 0x0583
    4e9c:	90 91 84 05 	lds	r25, 0x0584
    4ea0:	48 0f       	add	r20, r24
    4ea2:	59 1f       	adc	r21, r25
    4ea4:	50 93 b8 07 	sts	0x07B8, r21
    4ea8:	40 93 b7 07 	sts	0x07B7, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    4eac:	20 91 b9 07 	lds	r18, 0x07B9
    4eb0:	30 91 ba 07 	lds	r19, 0x07BA
    4eb4:	80 91 85 05 	lds	r24, 0x0585
    4eb8:	90 91 86 05 	lds	r25, 0x0586
    4ebc:	28 0f       	add	r18, r24
    4ebe:	39 1f       	adc	r19, r25
    4ec0:	30 93 ba 07 	sts	0x07BA, r19
    4ec4:	20 93 b9 07 	sts	0x07B9, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    4ec8:	80 91 bb 07 	lds	r24, 0x07BB
    4ecc:	90 91 bc 07 	lds	r25, 0x07BC
    4ed0:	60 91 87 05 	lds	r22, 0x0587
    4ed4:	70 91 88 05 	lds	r23, 0x0588
    4ed8:	86 0f       	add	r24, r22
    4eda:	97 1f       	adc	r25, r23
    4edc:	90 93 bc 07 	sts	0x07BC, r25
    4ee0:	80 93 bb 07 	sts	0x07BB, r24
    4ee4:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    4ee6:	91 f6       	brne	.-92     	; 0x4e8c <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    4ee8:	e5 e0       	ldi	r30, 0x05	; 5
    4eea:	55 95       	asr	r21
    4eec:	47 95       	ror	r20
    4eee:	ea 95       	dec	r30
    4ef0:	e1 f7       	brne	.-8      	; 0x4eea <CalibrateGyrosFast+0x70>
    4ef2:	50 93 b8 07 	sts	0x07B8, r21
    4ef6:	40 93 b7 07 	sts	0x07B7, r20
    4efa:	f5 e0       	ldi	r31, 0x05	; 5
    4efc:	35 95       	asr	r19
    4efe:	27 95       	ror	r18
    4f00:	fa 95       	dec	r31
    4f02:	e1 f7       	brne	.-8      	; 0x4efc <CalibrateGyrosFast+0x82>
    4f04:	30 93 ba 07 	sts	0x07BA, r19
    4f08:	20 93 b9 07 	sts	0x07B9, r18
    4f0c:	a5 e0       	ldi	r26, 0x05	; 5
    4f0e:	95 95       	asr	r25
    4f10:	87 95       	ror	r24
    4f12:	aa 95       	dec	r26
    4f14:	e1 f7       	brne	.-8      	; 0x4f0e <CalibrateGyrosFast+0x94>
    4f16:	90 93 bc 07 	sts	0x07BC, r25
    4f1a:	80 93 bb 07 	sts	0x07BB, r24
	}

	Save_Config_to_EEPROM();
}
    4f1e:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    4f20:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>

00004f24 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    4f24:	2f 92       	push	r2
    4f26:	3f 92       	push	r3
    4f28:	4f 92       	push	r4
    4f2a:	5f 92       	push	r5
    4f2c:	6f 92       	push	r6
    4f2e:	7f 92       	push	r7
    4f30:	8f 92       	push	r8
    4f32:	9f 92       	push	r9
    4f34:	af 92       	push	r10
    4f36:	bf 92       	push	r11
    4f38:	cf 92       	push	r12
    4f3a:	df 92       	push	r13
    4f3c:	ef 92       	push	r14
    4f3e:	ff 92       	push	r15
    4f40:	0f 93       	push	r16
    4f42:	1f 93       	push	r17
    4f44:	cf 93       	push	r28
    4f46:	df 93       	push	r29
    4f48:	cd b7       	in	r28, 0x3d	; 61
    4f4a:	de b7       	in	r29, 0x3e	; 62
    4f4c:	65 97       	sbiw	r28, 0x15	; 21
    4f4e:	0f b6       	in	r0, 0x3f	; 63
    4f50:	f8 94       	cli
    4f52:	de bf       	out	0x3e, r29	; 62
    4f54:	0f be       	out	0x3f, r0	; 63
    4f56:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    4f58:	1e 86       	std	Y+14, r1	; 0x0e
    4f5a:	1d 86       	std	Y+13, r1	; 0x0d
    4f5c:	18 8a       	std	Y+16, r1	; 0x10
    4f5e:	1f 86       	std	Y+15, r1	; 0x0f
    4f60:	1a 8a       	std	Y+18, r1	; 0x12
    4f62:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    4f64:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    4f68:	60 91 b7 07 	lds	r22, 0x07B7
    4f6c:	70 91 b8 07 	lds	r23, 0x07B8
    4f70:	88 27       	eor	r24, r24
    4f72:	77 fd       	sbrc	r23, 7
    4f74:	80 95       	com	r24
    4f76:	98 2f       	mov	r25, r24
    4f78:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    4f7c:	69 83       	std	Y+1, r22	; 0x01
    4f7e:	7a 83       	std	Y+2, r23	; 0x02
    4f80:	8b 83       	std	Y+3, r24	; 0x03
    4f82:	9c 83       	std	Y+4, r25	; 0x04
    4f84:	60 91 b9 07 	lds	r22, 0x07B9
    4f88:	70 91 ba 07 	lds	r23, 0x07BA
    4f8c:	88 27       	eor	r24, r24
    4f8e:	77 fd       	sbrc	r23, 7
    4f90:	80 95       	com	r24
    4f92:	98 2f       	mov	r25, r24
    4f94:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    4f98:	6d 83       	std	Y+5, r22	; 0x05
    4f9a:	7e 83       	std	Y+6, r23	; 0x06
    4f9c:	8f 83       	std	Y+7, r24	; 0x07
    4f9e:	98 87       	std	Y+8, r25	; 0x08
    4fa0:	60 91 bb 07 	lds	r22, 0x07BB
    4fa4:	70 91 bc 07 	lds	r23, 0x07BC
    4fa8:	88 27       	eor	r24, r24
    4faa:	77 fd       	sbrc	r23, 7
    4fac:	80 95       	com	r24
    4fae:	98 2f       	mov	r25, r24
    4fb0:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    4fb4:	69 87       	std	Y+9, r22	; 0x09
    4fb6:	7a 87       	std	Y+10, r23	; 0x0a
    4fb8:	8b 87       	std	Y+11, r24	; 0x0b
    4fba:	9c 87       	std	Y+12, r25	; 0x0c
    4fbc:	1d 8a       	std	Y+21, r1	; 0x15
    4fbe:	1b 8a       	std	Y+19, r1	; 0x13
    4fc0:	e1 2c       	mov	r14, r1
    4fc2:	f1 2c       	mov	r15, r1
    4fc4:	00 e0       	ldi	r16, 0x00	; 0
    4fc6:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    4fc8:	80 91 b2 00 	lds	r24, 0x00B2
    4fcc:	9d 89       	ldd	r25, Y+21	; 0x15
    4fce:	89 1b       	sub	r24, r25
    4fd0:	e8 0e       	add	r14, r24
    4fd2:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    4fd4:	e0 91 b2 00 	lds	r30, 0x00B2
    4fd8:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    4fda:	fc e4       	ldi	r31, 0x4C	; 76
    4fdc:	ef 16       	cp	r14, r31
    4fde:	ff 06       	cpc	r15, r31
    4fe0:	28 f0       	brcs	.+10     	; 0x4fec <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    4fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    4fe4:	8f 5f       	subi	r24, 0xFF	; 255
    4fe6:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    4fe8:	e1 2c       	mov	r14, r1
    4fea:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    4fec:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <get_raw_gyros>
    4ff0:	fe 01       	movw	r30, r28
    4ff2:	31 96       	adiw	r30, 0x01	; 1
    4ff4:	6f 01       	movw	r12, r30
    4ff6:	b3 e8       	ldi	r27, 0x83	; 131
    4ff8:	2b 2e       	mov	r2, r27
    4ffa:	b5 e0       	ldi	r27, 0x05	; 5
    4ffc:	3b 2e       	mov	r3, r27
    4ffe:	ce 01       	movw	r24, r28
    5000:	0d 96       	adiw	r24, 0x0d	; 13
    5002:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    5004:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    5006:	f1 01       	movw	r30, r2
    5008:	81 90       	ld	r8, Z+
    500a:	91 90       	ld	r9, Z+
    500c:	1f 01       	movw	r2, r30
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	30 ec       	ldi	r19, 0xC0	; 192
    5012:	49 e7       	ldi	r20, 0x79	; 121
    5014:	54 e4       	ldi	r21, 0x44	; 68
    5016:	f6 01       	movw	r30, r12
    5018:	60 81       	ld	r22, Z
    501a:	71 81       	ldd	r23, Z+1	; 0x01
    501c:	82 81       	ldd	r24, Z+2	; 0x02
    501e:	93 81       	ldd	r25, Z+3	; 0x03
    5020:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    5024:	2b 01       	movw	r4, r22
    5026:	3c 01       	movw	r6, r24
    5028:	b4 01       	movw	r22, r8
    502a:	88 27       	eor	r24, r24
    502c:	77 fd       	sbrc	r23, 7
    502e:	80 95       	com	r24
    5030:	98 2f       	mov	r25, r24
    5032:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    5036:	9b 01       	movw	r18, r22
    5038:	ac 01       	movw	r20, r24
    503a:	c3 01       	movw	r24, r6
    503c:	b2 01       	movw	r22, r4
    503e:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__addsf3>
    5042:	20 e0       	ldi	r18, 0x00	; 0
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	4a e7       	ldi	r20, 0x7A	; 122
    5048:	54 e4       	ldi	r21, 0x44	; 68
    504a:	0e 94 4c 4c 	call	0x9898	; 0x9898 <__divsf3>
    504e:	f6 01       	movw	r30, r12
    5050:	60 83       	st	Z, r22
    5052:	71 83       	std	Z+1, r23	; 0x01
    5054:	82 83       	std	Z+2, r24	; 0x02
    5056:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    5058:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
    505c:	f5 01       	movw	r30, r10
    505e:	20 81       	ld	r18, Z
    5060:	31 81       	ldd	r19, Z+1	; 0x01
    5062:	26 17       	cp	r18, r22
    5064:	37 07       	cpc	r19, r23
    5066:	11 f0       	breq	.+4      	; 0x506c <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    5068:	00 e0       	ldi	r16, 0x00	; 0
    506a:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    506c:	f5 01       	movw	r30, r10
    506e:	61 93       	st	Z+, r22
    5070:	71 93       	st	Z+, r23
    5072:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    5074:	fc 89       	ldd	r31, Y+20	; 0x14
    5076:	ff 5f       	subi	r31, 0xFF	; 255
    5078:	fc 8b       	std	Y+20, r31	; 0x14
    507a:	84 e0       	ldi	r24, 0x04	; 4
    507c:	c8 0e       	add	r12, r24
    507e:	d1 1c       	adc	r13, r1
    5080:	f3 30       	cpi	r31, 0x03	; 3
    5082:	09 f6       	brne	.-126    	; 0x5006 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    5084:	0f 5f       	subi	r16, 0xFF	; 255
    5086:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    5088:	09 3c       	cpi	r16, 0xC9	; 201
    508a:	11 05       	cpc	r17, r1
    508c:	20 f0       	brcs	.+8      	; 0x5096 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    508e:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    5092:	81 e0       	ldi	r24, 0x01	; 1
    5094:	01 c0       	rjmp	.+2      	; 0x5098 <CalibrateGyrosSlow+0x174>
    5096:	80 e0       	ldi	r24, 0x00	; 0
    5098:	e7 e8       	ldi	r30, 0x87	; 135
    509a:	f3 e1       	ldi	r31, 0x13	; 19
    509c:	31 97       	sbiw	r30, 0x01	; 1
    509e:	f1 f7       	brne	.-4      	; 0x509c <CalibrateGyrosSlow+0x178>
    50a0:	00 c0       	rjmp	.+0      	; 0x50a2 <CalibrateGyrosSlow+0x17e>
    50a2:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    50a4:	81 11       	cpse	r24, r1
    50a6:	04 c0       	rjmp	.+8      	; 0x50b0 <CalibrateGyrosSlow+0x18c>
    50a8:	fb 89       	ldd	r31, Y+19	; 0x13
    50aa:	f6 30       	cpi	r31, 0x06	; 6
    50ac:	08 f4       	brcc	.+2      	; 0x50b0 <CalibrateGyrosSlow+0x18c>
    50ae:	8c cf       	rjmp	.-232    	; 0x4fc8 <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    50b0:	65 96       	adiw	r28, 0x15	; 21
    50b2:	0f b6       	in	r0, 0x3f	; 63
    50b4:	f8 94       	cli
    50b6:	de bf       	out	0x3e, r29	; 62
    50b8:	0f be       	out	0x3f, r0	; 63
    50ba:	cd bf       	out	0x3d, r28	; 61
    50bc:	df 91       	pop	r29
    50be:	cf 91       	pop	r28
    50c0:	1f 91       	pop	r17
    50c2:	0f 91       	pop	r16
    50c4:	ff 90       	pop	r15
    50c6:	ef 90       	pop	r14
    50c8:	df 90       	pop	r13
    50ca:	cf 90       	pop	r12
    50cc:	bf 90       	pop	r11
    50ce:	af 90       	pop	r10
    50d0:	9f 90       	pop	r9
    50d2:	8f 90       	pop	r8
    50d4:	7f 90       	pop	r7
    50d6:	6f 90       	pop	r6
    50d8:	5f 90       	pop	r5
    50da:	4f 90       	pop	r4
    50dc:	3f 90       	pop	r3
    50de:	2f 90       	pop	r2
    50e0:	08 95       	ret

000050e2 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    50e2:	41 e0       	ldi	r20, 0x01	; 1
    50e4:	6b e6       	ldi	r22, 0x6B	; 107
    50e6:	80 ed       	ldi	r24, 0xD0	; 208
    50e8:	0e 94 88 28 	call	0x5110	; 0x5110 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    50ec:	40 e4       	ldi	r20, 0x40	; 64
    50ee:	67 e3       	ldi	r22, 0x37	; 55
    50f0:	80 ed       	ldi	r24, 0xD0	; 208
    50f2:	0e 94 88 28 	call	0x5110	; 0x5110 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    50f6:	46 e0       	ldi	r20, 0x06	; 6
    50f8:	80 91 4e 06 	lds	r24, 0x064E
    50fc:	48 1b       	sub	r20, r24
    50fe:	6a e1       	ldi	r22, 0x1A	; 26
    5100:	80 ed       	ldi	r24, 0xD0	; 208
    5102:	0e 94 88 28 	call	0x5110	; 0x5110 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    5106:	48 e1       	ldi	r20, 0x18	; 24
    5108:	6b e1       	ldi	r22, 0x1B	; 27
    510a:	80 ed       	ldi	r24, 0xD0	; 208
    510c:	0c 94 88 28 	jmp	0x5110	; 0x5110 <writeI2Cbyte>

00005110 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    5110:	cf 93       	push	r28
    5112:	df 93       	push	r29
    5114:	00 d0       	rcall	.+0      	; 0x5116 <writeI2Cbyte+0x6>
    5116:	cd b7       	in	r28, 0x3d	; 61
    5118:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    511a:	4a 83       	std	Y+2, r20	; 0x02
    511c:	69 83       	std	Y+1, r22	; 0x01
    511e:	0e 94 b7 4a 	call	0x956e	; 0x956e <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    5122:	69 81       	ldd	r22, Y+1	; 0x01
    5124:	86 2f       	mov	r24, r22
    5126:	0e 94 07 4b 	call	0x960e	; 0x960e <i2c_write>
    i2c_write(value); 								// Write byte
    512a:	4a 81       	ldd	r20, Y+2	; 0x02
    512c:	84 2f       	mov	r24, r20
    512e:	0e 94 07 4b 	call	0x960e	; 0x960e <i2c_write>
    i2c_stop();
}
    5132:	0f 90       	pop	r0
    5134:	0f 90       	pop	r0
    5136:	df 91       	pop	r29
    5138:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    513a:	0c 94 f8 4a 	jmp	0x95f0	; 0x95f0 <i2c_stop>

0000513e <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    513e:	cf 92       	push	r12
    5140:	df 92       	push	r13
    5142:	ef 92       	push	r14
    5144:	ff 92       	push	r15
    5146:	0f 93       	push	r16
    5148:	1f 93       	push	r17
    514a:	cf 93       	push	r28
    514c:	df 93       	push	r29
    514e:	00 d0       	rcall	.+0      	; 0x5150 <readI2CbyteArray+0x12>
    5150:	1f 92       	push	r1
    5152:	cd b7       	in	r28, 0x3d	; 61
    5154:	de b7       	in	r29, 0x3e	; 62
    5156:	18 2f       	mov	r17, r24
    5158:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    515a:	4a 83       	std	Y+2, r20	; 0x02
    515c:	5b 83       	std	Y+3, r21	; 0x03
    515e:	69 83       	std	Y+1, r22	; 0x01
    5160:	0e 94 b7 4a 	call	0x956e	; 0x956e <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    5164:	69 81       	ldd	r22, Y+1	; 0x01
    5166:	86 2f       	mov	r24, r22
    5168:	0e 94 07 4b 	call	0x960e	; 0x960e <i2c_write>
    i2c_rep_start(address+I2C_READ);
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	81 0f       	add	r24, r17
    5170:	0e 94 f6 4a 	call	0x95ec	; 0x95ec <i2c_rep_start>
    5174:	4a 81       	ldd	r20, Y+2	; 0x02
    5176:	c4 2e       	mov	r12, r20
    5178:	5b 81       	ldd	r21, Y+3	; 0x03
    517a:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    517c:	00 e0       	ldi	r16, 0x00	; 0
    517e:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    5180:	f1 2c       	mov	r15, r1
    5182:	0e 15       	cp	r16, r14
    5184:	1f 05       	cpc	r17, r15
    5186:	84 f4       	brge	.+32     	; 0x51a8 <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    5188:	0f 5f       	subi	r16, 0xFF	; 255
    518a:	1f 4f       	sbci	r17, 0xFF	; 255
    518c:	0e 15       	cp	r16, r14
    518e:	1f 05       	cpc	r17, r15
    5190:	19 f0       	breq	.+6      	; 0x5198 <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    5192:	0e 94 27 4b 	call	0x964e	; 0x964e <i2c_readAck>
    5196:	02 c0       	rjmp	.+4      	; 0x519c <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    5198:	0e 94 40 4b 	call	0x9680	; 0x9680 <i2c_readNak>
    519c:	f6 01       	movw	r30, r12
    519e:	80 83       	st	Z, r24
    51a0:	ff ef       	ldi	r31, 0xFF	; 255
    51a2:	cf 1a       	sub	r12, r31
    51a4:	df 0a       	sbc	r13, r31
    51a6:	ed cf       	rjmp	.-38     	; 0x5182 <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    51a8:	0f 90       	pop	r0
    51aa:	0f 90       	pop	r0
    51ac:	0f 90       	pop	r0
    51ae:	df 91       	pop	r29
    51b0:	cf 91       	pop	r28
    51b2:	1f 91       	pop	r17
    51b4:	0f 91       	pop	r16
    51b6:	ff 90       	pop	r15
    51b8:	ef 90       	pop	r14
    51ba:	df 90       	pop	r13
    51bc:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    51be:	0c 94 f8 4a 	jmp	0x95f0	; 0x95f0 <i2c_stop>

000051c2 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    51c2:	4f 92       	push	r4
    51c4:	5f 92       	push	r5
    51c6:	6f 92       	push	r6
    51c8:	7f 92       	push	r7
    51ca:	8f 92       	push	r8
    51cc:	9f 92       	push	r9
    51ce:	af 92       	push	r10
    51d0:	bf 92       	push	r11
    51d2:	cf 92       	push	r12
    51d4:	df 92       	push	r13
    51d6:	ef 92       	push	r14
    51d8:	ff 92       	push	r15
    51da:	cf 93       	push	r28
    51dc:	df 93       	push	r29
    51de:	cd b7       	in	r28, 0x3d	; 61
    51e0:	de b7       	in	r29, 0x3e	; 62
    51e2:	28 97       	sbiw	r28, 0x08	; 8
    51e4:	0f b6       	in	r0, 0x3f	; 63
    51e6:	f8 94       	cli
    51e8:	de bf       	out	0x3e, r29	; 62
    51ea:	0f be       	out	0x3f, r0	; 63
    51ec:	cd bf       	out	0x3d, r28	; 61
    51ee:	6b 01       	movw	r12, r22
    51f0:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    51f2:	80 90 b9 05 	lds	r8, 0x05B9
    51f6:	90 90 ba 05 	lds	r9, 0x05BA
    51fa:	a0 90 bb 05 	lds	r10, 0x05BB
    51fe:	b0 90 bc 05 	lds	r11, 0x05BC
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    5202:	9b 01       	movw	r18, r22
    5204:	ac 01       	movw	r20, r24
    5206:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    520a:	20 e0       	ldi	r18, 0x00	; 0
    520c:	30 e0       	ldi	r19, 0x00	; 0
    520e:	40 e0       	ldi	r20, 0x00	; 0
    5210:	5f e3       	ldi	r21, 0x3F	; 63
    5212:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    5216:	9b 01       	movw	r18, r22
    5218:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    521a:	60 e0       	ldi	r22, 0x00	; 0
    521c:	70 e0       	ldi	r23, 0x00	; 0
    521e:	80 e8       	ldi	r24, 0x80	; 128
    5220:	9f e3       	ldi	r25, 0x3F	; 63
    5222:	0e 94 e3 4b 	call	0x97c6	; 0x97c6 <__subsf3>
    5226:	69 83       	std	Y+1, r22	; 0x01
    5228:	7a 83       	std	Y+2, r23	; 0x02
    522a:	8b 83       	std	Y+3, r24	; 0x03
    522c:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    522e:	40 90 bd 05 	lds	r4, 0x05BD
    5232:	50 90 be 05 	lds	r5, 0x05BE
    5236:	60 90 bf 05 	lds	r6, 0x05BF
    523a:	70 90 c0 05 	lds	r7, 0x05C0
    523e:	9b 01       	movw	r18, r22
    5240:	ac 01       	movw	r20, r24
    5242:	c5 01       	movw	r24, r10
    5244:	b4 01       	movw	r22, r8
    5246:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    524a:	6d 83       	std	Y+5, r22	; 0x05
    524c:	7e 83       	std	Y+6, r23	; 0x06
    524e:	8f 83       	std	Y+7, r24	; 0x07
    5250:	98 87       	std	Y+8, r25	; 0x08
    5252:	a7 01       	movw	r20, r14
    5254:	96 01       	movw	r18, r12
    5256:	c3 01       	movw	r24, r6
    5258:	b2 01       	movw	r22, r4
    525a:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    525e:	9b 01       	movw	r18, r22
    5260:	ac 01       	movw	r20, r24
    5262:	6d 81       	ldd	r22, Y+5	; 0x05
    5264:	7e 81       	ldd	r23, Y+6	; 0x06
    5266:	8f 81       	ldd	r24, Y+7	; 0x07
    5268:	98 85       	ldd	r25, Y+8	; 0x08
    526a:	0e 94 e3 4b 	call	0x97c6	; 0x97c6 <__subsf3>
    526e:	60 93 a5 05 	sts	0x05A5, r22
    5272:	70 93 a6 05 	sts	0x05A6, r23
    5276:	80 93 a7 05 	sts	0x05A7, r24
    527a:	90 93 a8 05 	sts	0x05A8, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    527e:	a7 01       	movw	r20, r14
    5280:	96 01       	movw	r18, r12
    5282:	c5 01       	movw	r24, r10
    5284:	b4 01       	movw	r22, r8
    5286:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    528a:	6b 01       	movw	r12, r22
    528c:	7c 01       	movw	r14, r24
    528e:	29 81       	ldd	r18, Y+1	; 0x01
    5290:	3a 81       	ldd	r19, Y+2	; 0x02
    5292:	4b 81       	ldd	r20, Y+3	; 0x03
    5294:	5c 81       	ldd	r21, Y+4	; 0x04
    5296:	c3 01       	movw	r24, r6
    5298:	b2 01       	movw	r22, r4
    529a:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    529e:	9b 01       	movw	r18, r22
    52a0:	ac 01       	movw	r20, r24
    52a2:	c7 01       	movw	r24, r14
    52a4:	b6 01       	movw	r22, r12
    52a6:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__addsf3>
    52aa:	60 93 89 05 	sts	0x0589, r22
    52ae:	70 93 8a 05 	sts	0x058A, r23
    52b2:	80 93 8b 05 	sts	0x058B, r24
    52b6:	90 93 8c 05 	sts	0x058C, r25
}
    52ba:	28 96       	adiw	r28, 0x08	; 8
    52bc:	0f b6       	in	r0, 0x3f	; 63
    52be:	f8 94       	cli
    52c0:	de bf       	out	0x3e, r29	; 62
    52c2:	0f be       	out	0x3f, r0	; 63
    52c4:	cd bf       	out	0x3d, r28	; 61
    52c6:	df 91       	pop	r29
    52c8:	cf 91       	pop	r28
    52ca:	ff 90       	pop	r15
    52cc:	ef 90       	pop	r14
    52ce:	df 90       	pop	r13
    52d0:	cf 90       	pop	r12
    52d2:	bf 90       	pop	r11
    52d4:	af 90       	pop	r10
    52d6:	9f 90       	pop	r9
    52d8:	8f 90       	pop	r8
    52da:	7f 90       	pop	r7
    52dc:	6f 90       	pop	r6
    52de:	5f 90       	pop	r5
    52e0:	4f 90       	pop	r4
    52e2:	08 95       	ret

000052e4 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    52e4:	cf 92       	push	r12
    52e6:	df 92       	push	r13
    52e8:	ef 92       	push	r14
    52ea:	ff 92       	push	r15
    52ec:	69 01       	movw	r12, r18
    52ee:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    52f0:	25 ef       	ldi	r18, 0xF5	; 245
    52f2:	31 ea       	ldi	r19, 0xA1	; 161
    52f4:	4b e8       	ldi	r20, 0x8B	; 139
    52f6:	5c e3       	ldi	r21, 0x3C	; 60
    52f8:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    52fc:	a7 01       	movw	r20, r14
    52fe:	96 01       	movw	r18, r12
    5300:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    5304:	6b 01       	movw	r12, r22
    5306:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    5308:	26 ea       	ldi	r18, 0xA6	; 166
    530a:	3a e0       	ldi	r19, 0x0A	; 10
    530c:	46 e8       	ldi	r20, 0x86	; 134
    530e:	5e e3       	ldi	r21, 0x3E	; 62
    5310:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__gesf2>
    5314:	18 16       	cp	r1, r24
    5316:	9c f0       	brlt	.+38     	; 0x533e <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    5318:	26 ea       	ldi	r18, 0xA6	; 166
    531a:	3a e0       	ldi	r19, 0x0A	; 10
    531c:	46 e8       	ldi	r20, 0x86	; 134
    531e:	5e eb       	ldi	r21, 0xBE	; 190
    5320:	c7 01       	movw	r24, r14
    5322:	b6 01       	movw	r22, r12
    5324:	0e 94 48 4c 	call	0x9890	; 0x9890 <__cmpsf2>
    5328:	87 ff       	sbrs	r24, 7
    532a:	11 c0       	rjmp	.+34     	; 0x534e <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    532c:	86 ea       	ldi	r24, 0xA6	; 166
    532e:	c8 2e       	mov	r12, r24
    5330:	8a e0       	ldi	r24, 0x0A	; 10
    5332:	d8 2e       	mov	r13, r24
    5334:	86 e8       	ldi	r24, 0x86	; 134
    5336:	e8 2e       	mov	r14, r24
    5338:	8e eb       	ldi	r24, 0xBE	; 190
    533a:	f8 2e       	mov	r15, r24
    533c:	08 c0       	rjmp	.+16     	; 0x534e <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    533e:	96 ea       	ldi	r25, 0xA6	; 166
    5340:	c9 2e       	mov	r12, r25
    5342:	9a e0       	ldi	r25, 0x0A	; 10
    5344:	d9 2e       	mov	r13, r25
    5346:	96 e8       	ldi	r25, 0x86	; 134
    5348:	e9 2e       	mov	r14, r25
    534a:	9e e3       	ldi	r25, 0x3E	; 62
    534c:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    534e:	c7 01       	movw	r24, r14
    5350:	b6 01       	movw	r22, r12
    5352:	ff 90       	pop	r15
    5354:	ef 90       	pop	r14
    5356:	df 90       	pop	r13
    5358:	cf 90       	pop	r12
    535a:	08 95       	ret

0000535c <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    535c:	8f 92       	push	r8
    535e:	9f 92       	push	r9
    5360:	af 92       	push	r10
    5362:	bf 92       	push	r11
    5364:	cf 92       	push	r12
    5366:	df 92       	push	r13
    5368:	ef 92       	push	r14
    536a:	ff 92       	push	r15
    536c:	0f 93       	push	r16
    536e:	1f 93       	push	r17
    5370:	6b 01       	movw	r12, r22
    5372:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    5374:	60 91 99 05 	lds	r22, 0x0599
    5378:	70 91 9a 05 	lds	r23, 0x059A
    537c:	80 91 9b 05 	lds	r24, 0x059B
    5380:	90 91 9c 05 	lds	r25, 0x059C
    5384:	a7 01       	movw	r20, r14
    5386:	96 01       	movw	r18, r12
    5388:	0e 94 72 29 	call	0x52e4	; 0x52e4 <thetascale>
	VectorA = VectorY;
    538c:	00 91 26 05 	lds	r16, 0x0526
    5390:	10 91 27 05 	lds	r17, 0x0527
    5394:	20 91 28 05 	lds	r18, 0x0528
    5398:	30 91 29 05 	lds	r19, 0x0529
    539c:	00 93 b9 05 	sts	0x05B9, r16
    53a0:	10 93 ba 05 	sts	0x05BA, r17
    53a4:	20 93 bb 05 	sts	0x05BB, r18
    53a8:	30 93 bc 05 	sts	0x05BC, r19
	VectorB = VectorZ;
    53ac:	00 91 00 05 	lds	r16, 0x0500
    53b0:	10 91 01 05 	lds	r17, 0x0501
    53b4:	20 91 02 05 	lds	r18, 0x0502
    53b8:	30 91 03 05 	lds	r19, 0x0503
    53bc:	00 93 bd 05 	sts	0x05BD, r16
    53c0:	10 93 be 05 	sts	0x05BE, r17
    53c4:	20 93 bf 05 	sts	0x05BF, r18
    53c8:	30 93 c0 05 	sts	0x05C0, r19
	RotateVector(theta);
    53cc:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <RotateVector>
	VectorY = VectorNewA;
    53d0:	80 91 a5 05 	lds	r24, 0x05A5
    53d4:	90 91 a6 05 	lds	r25, 0x05A6
    53d8:	a0 91 a7 05 	lds	r26, 0x05A7
    53dc:	b0 91 a8 05 	lds	r27, 0x05A8
    53e0:	80 93 26 05 	sts	0x0526, r24
    53e4:	90 93 27 05 	sts	0x0527, r25
    53e8:	a0 93 28 05 	sts	0x0528, r26
    53ec:	b0 93 29 05 	sts	0x0529, r27
	VectorZ = VectorNewB;
    53f0:	80 90 89 05 	lds	r8, 0x0589
    53f4:	90 90 8a 05 	lds	r9, 0x058A
    53f8:	a0 90 8b 05 	lds	r10, 0x058B
    53fc:	b0 90 8c 05 	lds	r11, 0x058C
    5400:	80 92 00 05 	sts	0x0500, r8
    5404:	90 92 01 05 	sts	0x0501, r9
    5408:	a0 92 02 05 	sts	0x0502, r10
    540c:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    5410:	60 91 9d 05 	lds	r22, 0x059D
    5414:	70 91 9e 05 	lds	r23, 0x059E
    5418:	80 91 9f 05 	lds	r24, 0x059F
    541c:	90 91 a0 05 	lds	r25, 0x05A0
    5420:	a7 01       	movw	r20, r14
    5422:	96 01       	movw	r18, r12
    5424:	0e 94 72 29 	call	0x52e4	; 0x52e4 <thetascale>
	VectorA = VectorX;
    5428:	00 91 2a 05 	lds	r16, 0x052A
    542c:	10 91 2b 05 	lds	r17, 0x052B
    5430:	20 91 2c 05 	lds	r18, 0x052C
    5434:	30 91 2d 05 	lds	r19, 0x052D
    5438:	00 93 b9 05 	sts	0x05B9, r16
    543c:	10 93 ba 05 	sts	0x05BA, r17
    5440:	20 93 bb 05 	sts	0x05BB, r18
    5444:	30 93 bc 05 	sts	0x05BC, r19
	VectorB = VectorZ;
    5448:	80 92 bd 05 	sts	0x05BD, r8
    544c:	90 92 be 05 	sts	0x05BE, r9
    5450:	a0 92 bf 05 	sts	0x05BF, r10
    5454:	b0 92 c0 05 	sts	0x05C0, r11
	RotateVector(theta);
    5458:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <RotateVector>
	VectorX = VectorNewA;
    545c:	80 90 a5 05 	lds	r8, 0x05A5
    5460:	90 90 a6 05 	lds	r9, 0x05A6
    5464:	a0 90 a7 05 	lds	r10, 0x05A7
    5468:	b0 90 a8 05 	lds	r11, 0x05A8
    546c:	80 92 2a 05 	sts	0x052A, r8
    5470:	90 92 2b 05 	sts	0x052B, r9
    5474:	a0 92 2c 05 	sts	0x052C, r10
    5478:	b0 92 2d 05 	sts	0x052D, r11
	VectorZ = VectorNewB;
    547c:	80 91 89 05 	lds	r24, 0x0589
    5480:	90 91 8a 05 	lds	r25, 0x058A
    5484:	a0 91 8b 05 	lds	r26, 0x058B
    5488:	b0 91 8c 05 	lds	r27, 0x058C
    548c:	80 93 00 05 	sts	0x0500, r24
    5490:	90 93 01 05 	sts	0x0501, r25
    5494:	a0 93 02 05 	sts	0x0502, r26
    5498:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    549c:	60 91 87 05 	lds	r22, 0x0587
    54a0:	70 91 88 05 	lds	r23, 0x0588
    54a4:	88 27       	eor	r24, r24
    54a6:	77 fd       	sbrc	r23, 7
    54a8:	80 95       	com	r24
    54aa:	98 2f       	mov	r25, r24
    54ac:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    54b0:	a7 01       	movw	r20, r14
    54b2:	96 01       	movw	r18, r12
    54b4:	0e 94 72 29 	call	0x52e4	; 0x52e4 <thetascale>
	VectorA = VectorX;
    54b8:	80 92 b9 05 	sts	0x05B9, r8
    54bc:	90 92 ba 05 	sts	0x05BA, r9
    54c0:	a0 92 bb 05 	sts	0x05BB, r10
    54c4:	b0 92 bc 05 	sts	0x05BC, r11
	VectorB = VectorY;
    54c8:	c0 90 26 05 	lds	r12, 0x0526
    54cc:	d0 90 27 05 	lds	r13, 0x0527
    54d0:	e0 90 28 05 	lds	r14, 0x0528
    54d4:	f0 90 29 05 	lds	r15, 0x0529
    54d8:	c0 92 bd 05 	sts	0x05BD, r12
    54dc:	d0 92 be 05 	sts	0x05BE, r13
    54e0:	e0 92 bf 05 	sts	0x05BF, r14
    54e4:	f0 92 c0 05 	sts	0x05C0, r15
	RotateVector(theta);
    54e8:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <RotateVector>
	VectorX = VectorNewA;
    54ec:	80 91 a5 05 	lds	r24, 0x05A5
    54f0:	90 91 a6 05 	lds	r25, 0x05A6
    54f4:	a0 91 a7 05 	lds	r26, 0x05A7
    54f8:	b0 91 a8 05 	lds	r27, 0x05A8
    54fc:	80 93 2a 05 	sts	0x052A, r24
    5500:	90 93 2b 05 	sts	0x052B, r25
    5504:	a0 93 2c 05 	sts	0x052C, r26
    5508:	b0 93 2d 05 	sts	0x052D, r27
	VectorY = VectorNewB;
    550c:	80 91 89 05 	lds	r24, 0x0589
    5510:	90 91 8a 05 	lds	r25, 0x058A
    5514:	a0 91 8b 05 	lds	r26, 0x058B
    5518:	b0 91 8c 05 	lds	r27, 0x058C
    551c:	80 93 26 05 	sts	0x0526, r24
    5520:	90 93 27 05 	sts	0x0527, r25
    5524:	a0 93 28 05 	sts	0x0528, r26
    5528:	b0 93 29 05 	sts	0x0529, r27
}
    552c:	1f 91       	pop	r17
    552e:	0f 91       	pop	r16
    5530:	ff 90       	pop	r15
    5532:	ef 90       	pop	r14
    5534:	df 90       	pop	r13
    5536:	cf 90       	pop	r12
    5538:	bf 90       	pop	r11
    553a:	af 90       	pop	r10
    553c:	9f 90       	pop	r9
    553e:	8f 90       	pop	r8
    5540:	08 95       	ret

00005542 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    5542:	cf 92       	push	r12
    5544:	df 92       	push	r13
    5546:	ef 92       	push	r14
    5548:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    554a:	20 e0       	ldi	r18, 0x00	; 0
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	44 eb       	ldi	r20, 0xB4	; 180
    5550:	52 e4       	ldi	r21, 0x42	; 66
    5552:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    5556:	6b 01       	movw	r12, r22
    5558:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    555a:	20 e0       	ldi	r18, 0x00	; 0
    555c:	30 e0       	ldi	r19, 0x00	; 0
    555e:	a9 01       	movw	r20, r18
    5560:	60 91 00 05 	lds	r22, 0x0500
    5564:	70 91 01 05 	lds	r23, 0x0501
    5568:	80 91 02 05 	lds	r24, 0x0502
    556c:	90 91 03 05 	lds	r25, 0x0503
    5570:	0e 94 48 4c 	call	0x9890	; 0x9890 <__cmpsf2>
    5574:	87 ff       	sbrs	r24, 7
    5576:	18 c0       	rjmp	.+48     	; 0x55a8 <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    5578:	20 e0       	ldi	r18, 0x00	; 0
    557a:	30 e0       	ldi	r19, 0x00	; 0
    557c:	a9 01       	movw	r20, r18
    557e:	c7 01       	movw	r24, r14
    5580:	b6 01       	movw	r22, r12
    5582:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__gesf2>
		{
			temp = 180 - temp;
    5586:	a7 01       	movw	r20, r14
    5588:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    558a:	18 16       	cp	r1, r24
    558c:	2c f4       	brge	.+10     	; 0x5598 <ext2+0x56>
		{
			temp = 180 - temp;
    558e:	60 e0       	ldi	r22, 0x00	; 0
    5590:	70 e0       	ldi	r23, 0x00	; 0
    5592:	84 e3       	ldi	r24, 0x34	; 52
    5594:	93 e4       	ldi	r25, 0x43	; 67
    5596:	04 c0       	rjmp	.+8      	; 0x55a0 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    5598:	60 e0       	ldi	r22, 0x00	; 0
    559a:	70 e0       	ldi	r23, 0x00	; 0
    559c:	84 e3       	ldi	r24, 0x34	; 52
    559e:	93 ec       	ldi	r25, 0xC3	; 195
    55a0:	0e 94 e3 4b 	call	0x97c6	; 0x97c6 <__subsf3>
    55a4:	6b 01       	movw	r12, r22
    55a6:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    55a8:	c7 01       	movw	r24, r14
    55aa:	b6 01       	movw	r22, r12
    55ac:	ff 90       	pop	r15
    55ae:	ef 90       	pop	r14
    55b0:	df 90       	pop	r13
    55b2:	cf 90       	pop	r12
    55b4:	08 95       	ret

000055b6 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    55b6:	60 91 2a 05 	lds	r22, 0x052A
    55ba:	70 91 2b 05 	lds	r23, 0x052B
    55be:	80 91 2c 05 	lds	r24, 0x052C
    55c2:	90 91 2d 05 	lds	r25, 0x052D
    55c6:	0e 94 a1 2a 	call	0x5542	; 0x5542 <ext2>
    55ca:	60 93 b5 05 	sts	0x05B5, r22
    55ce:	70 93 b6 05 	sts	0x05B6, r23
    55d2:	80 93 b7 05 	sts	0x05B7, r24
    55d6:	90 93 b8 05 	sts	0x05B8, r25
	EulerAnglePitch = ext2(VectorY);
    55da:	60 91 26 05 	lds	r22, 0x0526
    55de:	70 91 27 05 	lds	r23, 0x0527
    55e2:	80 91 28 05 	lds	r24, 0x0528
    55e6:	90 91 29 05 	lds	r25, 0x0529
    55ea:	0e 94 a1 2a 	call	0x5542	; 0x5542 <ext2>
    55ee:	60 93 8d 05 	sts	0x058D, r22
    55f2:	70 93 8e 05 	sts	0x058E, r23
    55f6:	80 93 8f 05 	sts	0x058F, r24
    55fa:	90 93 90 05 	sts	0x0590, r25
    55fe:	08 95       	ret

00005600 <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    5600:	4f 92       	push	r4
    5602:	5f 92       	push	r5
    5604:	6f 92       	push	r6
    5606:	7f 92       	push	r7
    5608:	8f 92       	push	r8
    560a:	9f 92       	push	r9
    560c:	af 92       	push	r10
    560e:	bf 92       	push	r11
    5610:	cf 92       	push	r12
    5612:	df 92       	push	r13
    5614:	ef 92       	push	r14
    5616:	ff 92       	push	r15
    5618:	0f 93       	push	r16
    561a:	1f 93       	push	r17
    561c:	cf 93       	push	r28
    561e:	df 93       	push	r29
    5620:	cd b7       	in	r28, 0x3d	; 61
    5622:	de b7       	in	r29, 0x3e	; 62
    5624:	60 97       	sbiw	r28, 0x10	; 16
    5626:	0f b6       	in	r0, 0x3f	; 63
    5628:	f8 94       	cli
    562a:	de bf       	out	0x3e, r29	; 62
    562c:	0f be       	out	0x3f, r0	; 63
    562e:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    5630:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <__floatunsisf>
    5634:	69 83       	std	Y+1, r22	; 0x01
    5636:	7a 83       	std	Y+2, r23	; 0x02
    5638:	8b 83       	std	Y+3, r24	; 0x03
    563a:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    563c:	20 e8       	ldi	r18, 0x80	; 128
    563e:	36 e9       	ldi	r19, 0x96	; 150
    5640:	48 e1       	ldi	r20, 0x18	; 24
    5642:	5a e4       	ldi	r21, 0x4A	; 74
    5644:	0e 94 4c 4c 	call	0x9898	; 0x9898 <__divsf3>
    5648:	6d 87       	std	Y+13, r22	; 0x0d
    564a:	7e 87       	std	Y+14, r23	; 0x0e
    564c:	8f 87       	std	Y+15, r24	; 0x0f
    564e:	98 8b       	std	Y+16, r25	; 0x10
	//************************************************************
	// Acc LPF
	//************************************************************	

	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    5650:	80 91 eb 05 	lds	r24, 0x05EB
    5654:	60 91 4f 06 	lds	r22, 0x064F
    5658:	82 30       	cpi	r24, 0x02	; 2
    565a:	39 f0       	breq	.+14     	; 0x566a <imu_update+0x6a>
	{
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    565c:	84 e0       	ldi	r24, 0x04	; 4
    565e:	68 02       	muls	r22, r24
    5660:	b0 01       	movw	r22, r0
    5662:	11 24       	eor	r1, r1
    5664:	60 51       	subi	r22, 0x10	; 16
    5666:	77 4e       	sbci	r23, 0xE7	; 231
    5668:	06 c0       	rjmp	.+12     	; 0x5676 <imu_update+0x76>
	}
	else
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
    566a:	94 e0       	ldi	r25, 0x04	; 4
    566c:	69 02       	muls	r22, r25
    566e:	b0 01       	movw	r22, r0
    5670:	11 24       	eor	r1, r1
    5672:	60 53       	subi	r22, 0x30	; 48
    5674:	77 4e       	sbci	r23, 0xE7	; 231
    5676:	44 e0       	ldi	r20, 0x04	; 4
    5678:	50 e0       	ldi	r21, 0x00	; 0
    567a:	ce 01       	movw	r24, r28
    567c:	01 96       	adiw	r24, 0x01	; 1
    567e:	0e 94 9e 4e 	call	0x9d3c	; 0x9d3c <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    5682:	50 90 4f 06 	lds	r5, 0x064F
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    5686:	c9 80       	ldd	r12, Y+1	; 0x01
    5688:	da 80       	ldd	r13, Y+2	; 0x02
    568a:	eb 80       	ldd	r14, Y+3	; 0x03
    568c:	fc 80       	ldd	r15, Y+4	; 0x04
    568e:	2e e3       	ldi	r18, 0x3E	; 62
    5690:	62 2e       	mov	r6, r18
    5692:	25 e0       	ldi	r18, 0x05	; 5
    5694:	72 2e       	mov	r7, r18
    5696:	09 ea       	ldi	r16, 0xA9	; 169
    5698:	15 e0       	ldi	r17, 0x05	; 5
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    569a:	d3 01       	movw	r26, r6
    569c:	6d 91       	ld	r22, X+
    569e:	7d 91       	ld	r23, X+
    56a0:	3d 01       	movw	r6, r26
    56a2:	88 27       	eor	r24, r24
    56a4:	77 fd       	sbrc	r23, 7
    56a6:	80 95       	com	r24
    56a8:	98 2f       	mov	r25, r24
    56aa:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    56ae:	4b 01       	movw	r8, r22
    56b0:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    56b2:	b7 e0       	ldi	r27, 0x07	; 7
    56b4:	5b 16       	cp	r5, r27
    56b6:	f1 f0       	breq	.+60     	; 0x56f4 <imu_update+0xf4>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    56b8:	20 e0       	ldi	r18, 0x00	; 0
    56ba:	30 e0       	ldi	r19, 0x00	; 0
    56bc:	40 e8       	ldi	r20, 0x80	; 128
    56be:	5f e3       	ldi	r21, 0x3F	; 63
    56c0:	c7 01       	movw	r24, r14
    56c2:	b6 01       	movw	r22, r12
    56c4:	0e 94 e3 4b 	call	0x97c6	; 0x97c6 <__subsf3>
    56c8:	f8 01       	movw	r30, r16
    56ca:	20 81       	ld	r18, Z
    56cc:	31 81       	ldd	r19, Z+1	; 0x01
    56ce:	42 81       	ldd	r20, Z+2	; 0x02
    56d0:	53 81       	ldd	r21, Z+3	; 0x03
    56d2:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    56d6:	a5 01       	movw	r20, r10
    56d8:	94 01       	movw	r18, r8
    56da:	0e 94 e3 4b 	call	0x97c6	; 0x97c6 <__subsf3>
    56de:	a7 01       	movw	r20, r14
    56e0:	96 01       	movw	r18, r12
    56e2:	0e 94 4c 4c 	call	0x9898	; 0x9898 <__divsf3>
    56e6:	d8 01       	movw	r26, r16
    56e8:	6d 93       	st	X+, r22
    56ea:	7d 93       	st	X+, r23
    56ec:	8d 93       	st	X+, r24
    56ee:	9c 93       	st	X, r25
    56f0:	13 97       	sbiw	r26, 0x03	; 3
    56f2:	09 c0       	rjmp	.+18     	; 0x5706 <imu_update+0x106>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    56f4:	b7 fa       	bst	r11, 7
    56f6:	b0 94       	com	r11
    56f8:	b7 f8       	bld	r11, 7
    56fa:	b0 94       	com	r11
    56fc:	f8 01       	movw	r30, r16
    56fe:	80 82       	st	Z, r8
    5700:	91 82       	std	Z+1, r9	; 0x01
    5702:	a2 82       	std	Z+2, r10	; 0x02
    5704:	b3 82       	std	Z+3, r11	; 0x03
    5706:	0c 5f       	subi	r16, 0xFC	; 252
    5708:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    570a:	f4 e4       	ldi	r31, 0x44	; 68
    570c:	6f 16       	cp	r6, r31
    570e:	f5 e0       	ldi	r31, 0x05	; 5
    5710:	7f 06       	cpc	r7, r31
    5712:	19 f6       	brne	.-122    	; 0x569a <imu_update+0x9a>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    5714:	23 ec       	ldi	r18, 0xC3	; 195
    5716:	35 ef       	ldi	r19, 0xF5	; 245
    5718:	48 e2       	ldi	r20, 0x28	; 40
    571a:	5f e3       	ldi	r21, 0x3F	; 63
    571c:	60 91 a9 05 	lds	r22, 0x05A9
    5720:	70 91 aa 05 	lds	r23, 0x05AA
    5724:	80 91 ab 05 	lds	r24, 0x05AB
    5728:	90 91 ac 05 	lds	r25, 0x05AC
    572c:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    5730:	6d 83       	std	Y+5, r22	; 0x05
    5732:	7e 83       	std	Y+6, r23	; 0x06
    5734:	8f 83       	std	Y+7, r24	; 0x07
    5736:	98 87       	std	Y+8, r25	; 0x08
    5738:	60 93 91 05 	sts	0x0591, r22
    573c:	70 93 92 05 	sts	0x0592, r23
    5740:	80 93 93 05 	sts	0x0593, r24
    5744:	90 93 94 05 	sts	0x0594, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    5748:	23 ec       	ldi	r18, 0xC3	; 195
    574a:	35 ef       	ldi	r19, 0xF5	; 245
    574c:	48 e2       	ldi	r20, 0x28	; 40
    574e:	5f e3       	ldi	r21, 0x3F	; 63
    5750:	60 91 ad 05 	lds	r22, 0x05AD
    5754:	70 91 ae 05 	lds	r23, 0x05AE
    5758:	80 91 af 05 	lds	r24, 0x05AF
    575c:	90 91 b0 05 	lds	r25, 0x05B0
    5760:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    5764:	69 87       	std	Y+9, r22	; 0x09
    5766:	7a 87       	std	Y+10, r23	; 0x0a
    5768:	8b 87       	std	Y+11, r24	; 0x0b
    576a:	9c 87       	std	Y+12, r25	; 0x0c
    576c:	60 93 95 05 	sts	0x0595, r22
    5770:	70 93 96 05 	sts	0x0596, r23
    5774:	80 93 97 05 	sts	0x0597, r24
    5778:	90 93 98 05 	sts	0x0598, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    577c:	60 91 83 05 	lds	r22, 0x0583
    5780:	70 91 84 05 	lds	r23, 0x0584
    5784:	88 27       	eor	r24, r24
    5786:	77 fd       	sbrc	r23, 7
    5788:	80 95       	com	r24
    578a:	98 2f       	mov	r25, r24
    578c:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    5790:	2b 01       	movw	r4, r22
    5792:	3c 01       	movw	r6, r24
    5794:	60 93 9d 05 	sts	0x059D, r22
    5798:	70 93 9e 05 	sts	0x059E, r23
    579c:	80 93 9f 05 	sts	0x059F, r24
    57a0:	90 93 a0 05 	sts	0x05A0, r25
	GyroPitchVC = gyroADC[PITCH];
    57a4:	60 91 85 05 	lds	r22, 0x0585
    57a8:	70 91 86 05 	lds	r23, 0x0586
    57ac:	88 27       	eor	r24, r24
    57ae:	77 fd       	sbrc	r23, 7
    57b0:	80 95       	com	r24
    57b2:	98 2f       	mov	r25, r24
    57b4:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    57b8:	6b 01       	movw	r12, r22
    57ba:	7c 01       	movw	r14, r24
    57bc:	60 93 99 05 	sts	0x0599, r22
    57c0:	70 93 9a 05 	sts	0x059A, r23
    57c4:	80 93 9b 05 	sts	0x059B, r24
    57c8:	90 93 9c 05 	sts	0x059C, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    57cc:	20 91 3e 05 	lds	r18, 0x053E
    57d0:	30 91 3f 05 	lds	r19, 0x053F
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    57d4:	40 91 40 05 	lds	r20, 0x0540
    57d8:	50 91 41 05 	lds	r21, 0x0541
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    57dc:	e0 91 42 05 	lds	r30, 0x0542
    57e0:	f0 91 43 05 	lds	r31, 0x0543
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    57e4:	44 9f       	mul	r20, r20
    57e6:	40 01       	movw	r8, r0
    57e8:	45 9f       	mul	r20, r21
    57ea:	90 0c       	add	r9, r0
    57ec:	90 0c       	add	r9, r0
    57ee:	11 24       	eor	r1, r1
    57f0:	b4 01       	movw	r22, r8
    57f2:	88 27       	eor	r24, r24
    57f4:	77 fd       	sbrc	r23, 7
    57f6:	80 95       	com	r24
    57f8:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    57fa:	22 9f       	mul	r18, r18
    57fc:	a0 01       	movw	r20, r0
    57fe:	23 9f       	mul	r18, r19
    5800:	50 0d       	add	r21, r0
    5802:	50 0d       	add	r21, r0
    5804:	11 24       	eor	r1, r1
    5806:	8a 01       	movw	r16, r20
    5808:	22 27       	eor	r18, r18
    580a:	17 fd       	sbrc	r17, 7
    580c:	20 95       	com	r18
    580e:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    5810:	60 0f       	add	r22, r16
    5812:	71 1f       	adc	r23, r17
    5814:	82 1f       	adc	r24, r18
    5816:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    5818:	ee 9f       	mul	r30, r30
    581a:	90 01       	movw	r18, r0
    581c:	ef 9f       	mul	r30, r31
    581e:	30 0d       	add	r19, r0
    5820:	30 0d       	add	r19, r0
    5822:	11 24       	eor	r1, r1
    5824:	89 01       	movw	r16, r18
    5826:	22 27       	eor	r18, r18
    5828:	17 fd       	sbrc	r17, 7
    582a:	20 95       	com	r18
    582c:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    582e:	60 0f       	add	r22, r16
    5830:	71 1f       	adc	r23, r17
    5832:	82 1f       	adc	r24, r18
    5834:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    5836:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <__floatunsisf>
    583a:	4b 01       	movw	r8, r22
    583c:	5c 01       	movw	r10, r24
    583e:	20 e0       	ldi	r18, 0x00	; 0
    5840:	34 ef       	ldi	r19, 0xF4	; 244
    5842:	48 e3       	ldi	r20, 0x38	; 56
    5844:	56 e4       	ldi	r21, 0x46	; 70
    5846:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__gesf2>
    584a:	18 16       	cp	r1, r24
    584c:	0c f0       	brlt	.+2      	; 0x5850 <imu_update+0x250>
    584e:	6f c0       	rjmp	.+222    	; 0x592e <imu_update+0x32e>
    5850:	20 e0       	ldi	r18, 0x00	; 0
    5852:	38 e4       	ldi	r19, 0x48	; 72
    5854:	49 ea       	ldi	r20, 0xA9	; 169
    5856:	56 e4       	ldi	r21, 0x46	; 70
    5858:	c5 01       	movw	r24, r10
    585a:	b4 01       	movw	r22, r8
    585c:	0e 94 48 4c 	call	0x9890	; 0x9890 <__cmpsf2>
    5860:	87 ff       	sbrs	r24, 7
    5862:	65 c0       	rjmp	.+202    	; 0x592e <imu_update+0x32e>
    5864:	20 e0       	ldi	r18, 0x00	; 0
    5866:	30 e0       	ldi	r19, 0x00	; 0
    5868:	40 e0       	ldi	r20, 0x00	; 0
    586a:	5f e3       	ldi	r21, 0x3F	; 63
    586c:	60 91 00 05 	lds	r22, 0x0500
    5870:	70 91 01 05 	lds	r23, 0x0501
    5874:	80 91 02 05 	lds	r24, 0x0502
    5878:	90 91 03 05 	lds	r25, 0x0503
    587c:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__gesf2>
    5880:	18 16       	cp	r1, r24
    5882:	0c f0       	brlt	.+2      	; 0x5886 <imu_update+0x286>
    5884:	54 c0       	rjmp	.+168    	; 0x592e <imu_update+0x32e>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    5886:	80 91 51 06 	lds	r24, 0x0651
    588a:	6b e0       	ldi	r22, 0x0B	; 11
    588c:	70 e0       	ldi	r23, 0x00	; 0
    588e:	68 1b       	sub	r22, r24
    5890:	71 09       	sbc	r23, r1
    5892:	87 fd       	sbrc	r24, 7
    5894:	73 95       	inc	r23
    5896:	88 27       	eor	r24, r24
    5898:	77 fd       	sbrc	r23, 7
    589a:	80 95       	com	r24
    589c:	98 2f       	mov	r25, r24
    589e:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    58a2:	4b 01       	movw	r8, r22
    58a4:	5c 01       	movw	r10, r24
    58a6:	2d 81       	ldd	r18, Y+5	; 0x05
    58a8:	3e 81       	ldd	r19, Y+6	; 0x06
    58aa:	4f 81       	ldd	r20, Y+7	; 0x07
    58ac:	58 85       	ldd	r21, Y+8	; 0x08
    58ae:	60 91 b5 05 	lds	r22, 0x05B5
    58b2:	70 91 b6 05 	lds	r23, 0x05B6
    58b6:	80 91 b7 05 	lds	r24, 0x05B7
    58ba:	90 91 b8 05 	lds	r25, 0x05B8
    58be:	0e 94 e3 4b 	call	0x97c6	; 0x97c6 <__subsf3>
    58c2:	a5 01       	movw	r20, r10
    58c4:	94 01       	movw	r18, r8
    58c6:	0e 94 4c 4c 	call	0x9898	; 0x9898 <__divsf3>
    58ca:	9b 01       	movw	r18, r22
    58cc:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    58ce:	c3 01       	movw	r24, r6
    58d0:	b2 01       	movw	r22, r4
    58d2:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__addsf3>
    58d6:	60 93 9d 05 	sts	0x059D, r22
    58da:	70 93 9e 05 	sts	0x059E, r23
    58de:	80 93 9f 05 	sts	0x059F, r24
    58e2:	90 93 a0 05 	sts	0x05A0, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    58e6:	29 85       	ldd	r18, Y+9	; 0x09
    58e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    58ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    58ec:	5c 85       	ldd	r21, Y+12	; 0x0c
    58ee:	60 91 8d 05 	lds	r22, 0x058D
    58f2:	70 91 8e 05 	lds	r23, 0x058E
    58f6:	80 91 8f 05 	lds	r24, 0x058F
    58fa:	90 91 90 05 	lds	r25, 0x0590
    58fe:	0e 94 e3 4b 	call	0x97c6	; 0x97c6 <__subsf3>
    5902:	a5 01       	movw	r20, r10
    5904:	94 01       	movw	r18, r8
    5906:	0e 94 4c 4c 	call	0x9898	; 0x9898 <__divsf3>
    590a:	9b 01       	movw	r18, r22
    590c:	ac 01       	movw	r20, r24
    590e:	69 83       	std	Y+1, r22	; 0x01
    5910:	7a 83       	std	Y+2, r23	; 0x02
    5912:	8b 83       	std	Y+3, r24	; 0x03
    5914:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    5916:	c7 01       	movw	r24, r14
    5918:	b6 01       	movw	r22, r12
    591a:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__addsf3>
    591e:	60 93 99 05 	sts	0x0599, r22
    5922:	70 93 9a 05 	sts	0x059A, r23
    5926:	80 93 9b 05 	sts	0x059B, r24
    592a:	90 93 9c 05 	sts	0x059C, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    592e:	6d 85       	ldd	r22, Y+13	; 0x0d
    5930:	7e 85       	ldd	r23, Y+14	; 0x0e
    5932:	8f 85       	ldd	r24, Y+15	; 0x0f
    5934:	98 89       	ldd	r25, Y+16	; 0x10
    5936:	0e 94 ae 29 	call	0x535c	; 0x535c <Rotate3dVector>
	ExtractEulerAngles();
    593a:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    593e:	20 e0       	ldi	r18, 0x00	; 0
    5940:	30 e0       	ldi	r19, 0x00	; 0
    5942:	48 ec       	ldi	r20, 0xC8	; 200
    5944:	52 ec       	ldi	r21, 0xC2	; 194
    5946:	60 91 b5 05 	lds	r22, 0x05B5
    594a:	70 91 b6 05 	lds	r23, 0x05B6
    594e:	80 91 b7 05 	lds	r24, 0x05B7
    5952:	90 91 b8 05 	lds	r25, 0x05B8
    5956:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    595a:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
    595e:	70 93 a2 05 	sts	0x05A2, r23
    5962:	60 93 a1 05 	sts	0x05A1, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    5966:	20 e0       	ldi	r18, 0x00	; 0
    5968:	30 e0       	ldi	r19, 0x00	; 0
    596a:	48 ec       	ldi	r20, 0xC8	; 200
    596c:	52 ec       	ldi	r21, 0xC2	; 194
    596e:	60 91 8d 05 	lds	r22, 0x058D
    5972:	70 91 8e 05 	lds	r23, 0x058E
    5976:	80 91 8f 05 	lds	r24, 0x058F
    597a:	90 91 90 05 	lds	r25, 0x0590
    597e:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    5982:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
    5986:	70 93 a4 05 	sts	0x05A4, r23
    598a:	60 93 a3 05 	sts	0x05A3, r22
}
    598e:	60 96       	adiw	r28, 0x10	; 16
    5990:	0f b6       	in	r0, 0x3f	; 63
    5992:	f8 94       	cli
    5994:	de bf       	out	0x3e, r29	; 62
    5996:	0f be       	out	0x3f, r0	; 63
    5998:	cd bf       	out	0x3d, r28	; 61
    599a:	df 91       	pop	r29
    599c:	cf 91       	pop	r28
    599e:	1f 91       	pop	r17
    59a0:	0f 91       	pop	r16
    59a2:	ff 90       	pop	r15
    59a4:	ef 90       	pop	r14
    59a6:	df 90       	pop	r13
    59a8:	cf 90       	pop	r12
    59aa:	bf 90       	pop	r11
    59ac:	af 90       	pop	r10
    59ae:	9f 90       	pop	r9
    59b0:	8f 90       	pop	r8
    59b2:	7f 90       	pop	r7
    59b4:	6f 90       	pop	r6
    59b6:	5f 90       	pop	r5
    59b8:	4f 90       	pop	r4
    59ba:	08 95       	ret

000059bc <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    59bc:	10 92 2a 05 	sts	0x052A, r1
    59c0:	10 92 2b 05 	sts	0x052B, r1
    59c4:	10 92 2c 05 	sts	0x052C, r1
    59c8:	10 92 2d 05 	sts	0x052D, r1
	VectorY = 0;
    59cc:	10 92 26 05 	sts	0x0526, r1
    59d0:	10 92 27 05 	sts	0x0527, r1
    59d4:	10 92 28 05 	sts	0x0528, r1
    59d8:	10 92 29 05 	sts	0x0529, r1
	VectorZ = 1;
    59dc:	80 e0       	ldi	r24, 0x00	; 0
    59de:	90 e0       	ldi	r25, 0x00	; 0
    59e0:	a0 e8       	ldi	r26, 0x80	; 128
    59e2:	bf e3       	ldi	r27, 0x3F	; 63
    59e4:	80 93 00 05 	sts	0x0500, r24
    59e8:	90 93 01 05 	sts	0x0501, r25
    59ec:	a0 93 02 05 	sts	0x0502, r26
    59f0:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    59f4:	10 92 b9 05 	sts	0x05B9, r1
    59f8:	10 92 ba 05 	sts	0x05BA, r1
    59fc:	10 92 bb 05 	sts	0x05BB, r1
    5a00:	10 92 bc 05 	sts	0x05BC, r1
	VectorB = 0;
    5a04:	10 92 bd 05 	sts	0x05BD, r1
    5a08:	10 92 be 05 	sts	0x05BE, r1
    5a0c:	10 92 bf 05 	sts	0x05BF, r1
    5a10:	10 92 c0 05 	sts	0x05C0, r1
	EulerAngleRoll = 0;
    5a14:	10 92 b5 05 	sts	0x05B5, r1
    5a18:	10 92 b6 05 	sts	0x05B6, r1
    5a1c:	10 92 b7 05 	sts	0x05B7, r1
    5a20:	10 92 b8 05 	sts	0x05B8, r1
	EulerAnglePitch = 0;
    5a24:	10 92 8d 05 	sts	0x058D, r1
    5a28:	10 92 8e 05 	sts	0x058E, r1
    5a2c:	10 92 8f 05 	sts	0x058F, r1
    5a30:	10 92 90 05 	sts	0x0590, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    5a34:	10 92 f4 07 	sts	0x07F4, r1
    5a38:	10 92 f3 07 	sts	0x07F3, r1
	TCNT1 = 0;			// TCNT1 current time
    5a3c:	10 92 85 00 	sts	0x0085, r1
    5a40:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    5a44:	10 92 1b 05 	sts	0x051B, r1
    5a48:	10 92 1a 05 	sts	0x051A, r1
    5a4c:	08 95       	ret

00005a4e <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    5a4e:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    5a50:	80 e3       	ldi	r24, 0x30	; 48
    5a52:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    5a54:	8c ef       	ldi	r24, 0xFC	; 252
    5a56:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    5a58:	8a e0       	ldi	r24, 0x0A	; 10
    5a5a:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    5a5c:	82 ef       	ldi	r24, 0xF2	; 242
    5a5e:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    5a60:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    5a62:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    5a64:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    5a66:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    5a68:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    5a6a:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    5a6c:	85 ef       	ldi	r24, 0xF5	; 245
    5a6e:	83 b9       	out	0x03, r24	; 3

	//***********************************************************
	// Spektrum receiver binding. Must be done immediately on power-up
	//***********************************************************
	// Bind as master if ONLY button 4 pressed
	if (BUTTON4 == 0)
    5a70:	1c 99       	sbic	0x03, 4	; 3
    5a72:	11 c0       	rjmp	.+34     	; 0x5a96 <init+0x48>
	{
		PIND	= 0x0C;		// Release RX pull up
    5a74:	8c e0       	ldi	r24, 0x0C	; 12
    5a76:	89 b9       	out	0x09, r24	; 9
    5a78:	2f e5       	ldi	r18, 0x5F	; 95
    5a7a:	88 ed       	ldi	r24, 0xD8	; 216
    5a7c:	93 e0       	ldi	r25, 0x03	; 3
    5a7e:	21 50       	subi	r18, 0x01	; 1
    5a80:	80 40       	sbci	r24, 0x00	; 0
    5a82:	90 40       	sbci	r25, 0x00	; 0
    5a84:	e1 f7       	brne	.-8      	; 0x5a7e <init+0x30>
    5a86:	00 c0       	rjmp	.+0      	; 0x5a88 <init+0x3a>
    5a88:	00 00       	nop
		_delay_ms(63);		// Pause while satellite wakes up
							// and pull-ups have time to rise.
							// Tweak until bind pulses about 68ms after power-up		
		DDRD	= 0xF3;		// Switch PD0 to output
    5a8a:	83 ef       	ldi	r24, 0xF3	; 243
    5a8c:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    5a8e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <bind_master>
		DDRD	= 0xF2;		// Reset Port D directions		
    5a92:	82 ef       	ldi	r24, 0xF2	; 242
    5a94:	8a b9       	out	0x0a, r24	; 10
	}

	PIND	= 0x0D;			// Set PD pull-ups (now pull up RX as well)	
    5a96:	8d e0       	ldi	r24, 0x0D	; 13
    5a98:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    5a9a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    5a9c:	85 e0       	ldi	r24, 0x05	; 5
    5a9e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    5aa0:	80 91 6e 00 	lds	r24, 0x006E
    5aa4:	81 60       	ori	r24, 0x01	; 1
    5aa6:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    5aaa:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    5aac:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    5ab0:	80 91 81 00 	lds	r24, 0x0081
    5ab4:	82 60       	ori	r24, 0x02	; 2
    5ab6:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    5aba:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    5abe:	87 e0       	ldi	r24, 0x07	; 7
    5ac0:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    5ac4:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    5ac8:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    5aca:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    5ace:	9a e0       	ldi	r25, 0x0A	; 10
    5ad0:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    5ad4:	9f e0       	ldi	r25, 0x0F	; 15
    5ad6:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    5ad8:	95 e1       	ldi	r25, 0x15	; 21
    5ada:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    5ade:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    5ae0:	10 92 f0 07 	sts	0x07F0, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    5ae4:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <Initial_EEPROM_Config_Load>
    5ae8:	c8 2f       	mov	r28, r24
    5aea:	20 e0       	ldi	r18, 0x00	; 0
    5aec:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    5aee:	46 ea       	ldi	r20, 0xA6	; 166
    5af0:	5e e0       	ldi	r21, 0x0E	; 14
    5af2:	f9 01       	movw	r30, r18
    5af4:	ee 0f       	add	r30, r30
    5af6:	ff 1f       	adc	r31, r31
    5af8:	e0 52       	subi	r30, 0x20	; 32
    5afa:	f8 4f       	sbci	r31, 0xF8	; 248
    5afc:	51 83       	std	Z+1, r21	; 0x01
    5afe:	40 83       	st	Z, r20
    5b00:	2f 5f       	subi	r18, 0xFF	; 255
    5b02:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5b04:	28 30       	cpi	r18, 0x08	; 8
    5b06:	31 05       	cpc	r19, r1
    5b08:	a1 f7       	brne	.-24     	; 0x5af2 <init+0xa4>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    5b0a:	24 ec       	ldi	r18, 0xC4	; 196
    5b0c:	39 e0       	ldi	r19, 0x09	; 9
    5b0e:	30 93 e1 07 	sts	0x07E1, r19
    5b12:	20 93 e0 07 	sts	0x07E0, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    5b16:	0e 94 2c 24 	call	0x4858	; 0x4858 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    5b1a:	0e 94 86 24 	call	0x490c	; 0x490c <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    5b1e:	93 b1       	in	r25, 0x03	; 3
    5b20:	90 7f       	andi	r25, 0xF0	; 240
    5b22:	90 36       	cpi	r25, 0x60	; 96
    5b24:	09 f0       	breq	.+2      	; 0x5b28 <init+0xda>
    5b26:	71 c0       	rjmp	.+226    	; 0x5c0a <init+0x1bc>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5b28:	80 ec       	ldi	r24, 0xC0	; 192
    5b2a:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
		clear_buffer(buffer);
    5b2e:	80 e0       	ldi	r24, 0x00	; 0
    5b30:	91 e0       	ldi	r25, 0x01	; 1
    5b32:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    5b36:	29 e1       	ldi	r18, 0x19	; 25
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	4a e0       	ldi	r20, 0x0A	; 10
    5b3c:	50 e0       	ldi	r21, 0x00	; 0
    5b3e:	63 e7       	ldi	r22, 0x73	; 115
    5b40:	71 e0       	ldi	r23, 0x01	; 1
    5b42:	8b e3       	ldi	r24, 0x3B	; 59
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		write_buffer(buffer);
    5b4a:	80 e0       	ldi	r24, 0x00	; 0
    5b4c:	91 e0       	ldi	r25, 0x01	; 1
    5b4e:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
		clear_buffer(buffer);
    5b52:	80 e0       	ldi	r24, 0x00	; 0
    5b54:	91 e0       	ldi	r25, 0x01	; 1
    5b56:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
    5b5a:	e7 e5       	ldi	r30, 0x57	; 87
    5b5c:	f6 e0       	ldi	r31, 0x06	; 6
    5b5e:	80 e0       	ldi	r24, 0x00	; 0
    5b60:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5b62:	4c ed       	ldi	r20, 0xDC	; 220
    5b64:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5b66:	6c e6       	ldi	r22, 0x6C	; 108
    5b68:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5b6a:	a0 81       	ld	r26, Z
    5b6c:	9c 01       	movw	r18, r24
    5b6e:	22 0f       	add	r18, r18
    5b70:	33 1f       	adc	r19, r19
    5b72:	a2 30       	cpi	r26, 0x02	; 2
    5b74:	39 f4       	brne	.+14     	; 0x5b84 <init+0x136>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5b76:	d9 01       	movw	r26, r18
    5b78:	ad 59       	subi	r26, 0x9D	; 157
    5b7a:	b7 4f       	sbci	r27, 0xF7	; 247
    5b7c:	11 96       	adiw	r26, 0x01	; 1
    5b7e:	7c 93       	st	X, r23
    5b80:	6e 93       	st	-X, r22
    5b82:	06 c0       	rjmp	.+12     	; 0x5b90 <init+0x142>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5b84:	d9 01       	movw	r26, r18
    5b86:	ad 59       	subi	r26, 0x9D	; 157
    5b88:	b7 4f       	sbci	r27, 0xF7	; 247
    5b8a:	11 96       	adiw	r26, 0x01	; 1
    5b8c:	5c 93       	st	X, r21
    5b8e:	4e 93       	st	-X, r20
    5b90:	01 96       	adiw	r24, 0x01	; 1
    5b92:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5b94:	88 30       	cpi	r24, 0x08	; 8
    5b96:	91 05       	cpc	r25, r1
    5b98:	41 f7       	brne	.-48     	; 0x5b6a <init+0x11c>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5b9a:	83 b1       	in	r24, 0x03	; 3
    5b9c:	80 7f       	andi	r24, 0xF0	; 240
    5b9e:	80 36       	cpi	r24, 0x60	; 96
    5ba0:	79 f4       	brne	.+30     	; 0x5bc0 <init+0x172>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5ba2:	6f ef       	ldi	r22, 0xFF	; 255
    5ba4:	83 e6       	ldi	r24, 0x63	; 99
    5ba6:	98 e0       	ldi	r25, 0x08	; 8
    5ba8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <output_servo_ppm_asm>
    5bac:	2f e7       	ldi	r18, 0x7F	; 127
    5bae:	88 e3       	ldi	r24, 0x38	; 56
    5bb0:	91 e0       	ldi	r25, 0x01	; 1
    5bb2:	21 50       	subi	r18, 0x01	; 1
    5bb4:	80 40       	sbci	r24, 0x00	; 0
    5bb6:	90 40       	sbci	r25, 0x00	; 0
    5bb8:	e1 f7       	brne	.-8      	; 0x5bb2 <init+0x164>
    5bba:	00 c0       	rjmp	.+0      	; 0x5bbc <init+0x16e>
    5bbc:	00 00       	nop
    5bbe:	ed cf       	rjmp	.-38     	; 0x5b9a <init+0x14c>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5bc0:	e7 e5       	ldi	r30, 0x57	; 87
    5bc2:	f6 e0       	ldi	r31, 0x06	; 6
    5bc4:	80 e0       	ldi	r24, 0x00	; 0
    5bc6:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5bc8:	2c e4       	ldi	r18, 0x4C	; 76
    5bca:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5bcc:	40 81       	ld	r20, Z
    5bce:	42 30       	cpi	r20, 0x02	; 2
    5bd0:	41 f4       	brne	.+16     	; 0x5be2 <init+0x194>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5bd2:	dc 01       	movw	r26, r24
    5bd4:	aa 0f       	add	r26, r26
    5bd6:	bb 1f       	adc	r27, r27
    5bd8:	ad 59       	subi	r26, 0x9D	; 157
    5bda:	b7 4f       	sbci	r27, 0xF7	; 247
    5bdc:	11 96       	adiw	r26, 0x01	; 1
    5bde:	3c 93       	st	X, r19
    5be0:	2e 93       	st	-X, r18
    5be2:	01 96       	adiw	r24, 0x01	; 1
    5be4:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5be6:	88 30       	cpi	r24, 0x08	; 8
    5be8:	91 05       	cpc	r25, r1
    5bea:	81 f7       	brne	.-32     	; 0x5bcc <init+0x17e>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5bec:	6f ef       	ldi	r22, 0xFF	; 255
    5bee:	83 e6       	ldi	r24, 0x63	; 99
    5bf0:	98 e0       	ldi	r25, 0x08	; 8
    5bf2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <output_servo_ppm_asm>
    5bf6:	2f e7       	ldi	r18, 0x7F	; 127
    5bf8:	88 e3       	ldi	r24, 0x38	; 56
    5bfa:	91 e0       	ldi	r25, 0x01	; 1
    5bfc:	21 50       	subi	r18, 0x01	; 1
    5bfe:	80 40       	sbci	r24, 0x00	; 0
    5c00:	90 40       	sbci	r25, 0x00	; 0
    5c02:	e1 f7       	brne	.-8      	; 0x5bfc <init+0x1ae>
    5c04:	00 c0       	rjmp	.+0      	; 0x5c06 <init+0x1b8>
    5c06:	00 00       	nop
    5c08:	f1 cf       	rjmp	.-30     	; 0x5bec <init+0x19e>
    5c0a:	2f e7       	ldi	r18, 0x7F	; 127
    5c0c:	8f e4       	ldi	r24, 0x4F	; 79
    5c0e:	92 e1       	ldi	r25, 0x12	; 18
    5c10:	21 50       	subi	r18, 0x01	; 1
    5c12:	80 40       	sbci	r24, 0x00	; 0
    5c14:	90 40       	sbci	r25, 0x00	; 0
    5c16:	e1 f7       	brne	.-8      	; 0x5c10 <init+0x1c2>
    5c18:	00 c0       	rjmp	.+0      	; 0x5c1a <init+0x1cc>
    5c1a:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    5c1c:	93 b1       	in	r25, 0x03	; 3
    5c1e:	90 7f       	andi	r25, 0xF0	; 240
    5c20:	90 39       	cpi	r25, 0x90	; 144
    5c22:	51 f5       	brne	.+84     	; 0x5c78 <init+0x22a>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5c24:	80 ec       	ldi	r24, 0xC0	; 192
    5c26:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
		clear_buffer(buffer);
    5c2a:	80 e0       	ldi	r24, 0x00	; 0
    5c2c:	91 e0       	ldi	r25, 0x01	; 1
    5c2e:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    5c32:	29 e1       	ldi	r18, 0x19	; 25
    5c34:	30 e0       	ldi	r19, 0x00	; 0
    5c36:	48 e2       	ldi	r20, 0x28	; 40
    5c38:	50 e0       	ldi	r21, 0x00	; 0
    5c3a:	63 e7       	ldi	r22, 0x73	; 115
    5c3c:	71 e0       	ldi	r23, 0x01	; 1
    5c3e:	86 e0       	ldi	r24, 0x06	; 6
    5c40:	91 e0       	ldi	r25, 0x01	; 1
    5c42:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		write_buffer(buffer);
    5c46:	80 e0       	ldi	r24, 0x00	; 0
    5c48:	91 e0       	ldi	r25, 0x01	; 1
    5c4a:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
		clear_buffer(buffer);
    5c4e:	80 e0       	ldi	r24, 0x00	; 0
    5c50:	91 e0       	ldi	r25, 0x01	; 1
    5c52:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    5c56:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    5c5a:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    5c5e:	80 91 4a 06 	lds	r24, 0x064A
    5c62:	0e 94 23 24 	call	0x4846	; 0x4846 <st7565_set_brightness>
    5c66:	2f e7       	ldi	r18, 0x7F	; 127
    5c68:	84 e8       	ldi	r24, 0x84	; 132
    5c6a:	9e e1       	ldi	r25, 0x1E	; 30
    5c6c:	21 50       	subi	r18, 0x01	; 1
    5c6e:	80 40       	sbci	r24, 0x00	; 0
    5c70:	90 40       	sbci	r25, 0x00	; 0
    5c72:	e1 f7       	brne	.-8      	; 0x5c6c <init+0x21e>
    5c74:	00 c0       	rjmp	.+0      	; 0x5c76 <init+0x228>
    5c76:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    5c78:	cc 23       	and	r28, r28
    5c7a:	21 f1       	breq	.+72     	; 0x5cc4 <init+0x276>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5c7c:	80 ec       	ldi	r24, 0xC0	; 192
    5c7e:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
		clear_buffer(buffer);
    5c82:	80 e0       	ldi	r24, 0x00	; 0
    5c84:	91 e0       	ldi	r25, 0x01	; 1
    5c86:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    5c8a:	2d e0       	ldi	r18, 0x0D	; 13
    5c8c:	30 e0       	ldi	r19, 0x00	; 0
    5c8e:	4e e1       	ldi	r20, 0x1E	; 30
    5c90:	50 e0       	ldi	r21, 0x00	; 0
    5c92:	63 e7       	ldi	r22, 0x73	; 115
    5c94:	71 e0       	ldi	r23, 0x01	; 1
    5c96:	83 e0       	ldi	r24, 0x03	; 3
    5c98:	91 e0       	ldi	r25, 0x01	; 1
    5c9a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    5c9e:	25 e2       	ldi	r18, 0x25	; 37
    5ca0:	30 e0       	ldi	r19, 0x00	; 0
    5ca2:	41 e2       	ldi	r20, 0x21	; 33
    5ca4:	50 e0       	ldi	r21, 0x00	; 0
    5ca6:	63 e7       	ldi	r22, 0x73	; 115
    5ca8:	71 e0       	ldi	r23, 0x01	; 1
    5caa:	84 e0       	ldi	r24, 0x04	; 4
    5cac:	91 e0       	ldi	r25, 0x01	; 1
    5cae:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		write_buffer(buffer);
    5cb2:	80 e0       	ldi	r24, 0x00	; 0
    5cb4:	91 e0       	ldi	r25, 0x01	; 1
    5cb6:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
		clear_buffer(buffer);		
    5cba:	80 e0       	ldi	r24, 0x00	; 0
    5cbc:	91 e0       	ldi	r25, 0x01	; 1
    5cbe:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
    5cc2:	04 c0       	rjmp	.+8      	; 0x5ccc <init+0x27e>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    5cc4:	80 e0       	ldi	r24, 0x00	; 0
    5cc6:	91 e0       	ldi	r25, 0x01	; 1
    5cc8:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
    5ccc:	2f ef       	ldi	r18, 0xFF	; 255
    5cce:	88 e0       	ldi	r24, 0x08	; 8
    5cd0:	9d e3       	ldi	r25, 0x3D	; 61
    5cd2:	21 50       	subi	r18, 0x01	; 1
    5cd4:	80 40       	sbci	r24, 0x00	; 0
    5cd6:	90 40       	sbci	r25, 0x00	; 0
    5cd8:	e1 f7       	brne	.-8      	; 0x5cd2 <init+0x284>
    5cda:	00 c0       	rjmp	.+0      	; 0x5cdc <init+0x28e>
    5cdc:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    5cde:	80 e0       	ldi	r24, 0x00	; 0
    5ce0:	91 e0       	ldi	r25, 0x01	; 1
    5ce2:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
	write_buffer(buffer);
    5ce6:	80 e0       	ldi	r24, 0x00	; 0
    5ce8:	91 e0       	ldi	r25, 0x01	; 1
    5cea:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    5cee:	0e 94 2c 24 	call	0x4858	; 0x4858 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    5cf2:	0e 94 74 4a 	call	0x94e8	; 0x94e8 <i2c_init>
	init_i2c_gyros();
    5cf6:	0e 94 71 28 	call	0x50e2	; 0x50e2 <init_i2c_gyros>
	init_i2c_accs();
    5cfa:	0e 94 a8 11 	call	0x2350	; 0x2350 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    5cfe:	80 e0       	ldi	r24, 0x00	; 0
    5d00:	91 e0       	ldi	r25, 0x01	; 1
    5d02:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5d06:	80 ec       	ldi	r24, 0xC0	; 192
    5d08:	0e 94 1d 24 	call	0x483a	; 0x483a <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    5d0c:	29 e1       	ldi	r18, 0x19	; 25
    5d0e:	30 e0       	ldi	r19, 0x00	; 0
    5d10:	42 e1       	ldi	r20, 0x12	; 18
    5d12:	50 e0       	ldi	r21, 0x00	; 0
    5d14:	63 e7       	ldi	r22, 0x73	; 115
    5d16:	71 e0       	ldi	r23, 0x01	; 1
    5d18:	87 e0       	ldi	r24, 0x07	; 7
    5d1a:	91 e0       	ldi	r25, 0x01	; 1
    5d1c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
	write_buffer(buffer);	
    5d20:	80 e0       	ldi	r24, 0x00	; 0
    5d22:	91 e0       	ldi	r25, 0x01	; 1
    5d24:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
	clear_buffer(buffer);
    5d28:	80 e0       	ldi	r24, 0x00	; 0
    5d2a:	91 e0       	ldi	r25, 0x01	; 1
    5d2c:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    5d30:	0e 94 b2 11 	call	0x2364	; 0x2364 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    5d34:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <init_int>
	init_uart();							// Initialise UART
    5d38:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    5d3c:	0e 94 92 27 	call	0x4f24	; 0x4f24 <CalibrateGyrosSlow>
    5d40:	81 11       	cpse	r24, r1
    5d42:	28 c0       	rjmp	.+80     	; 0x5d94 <init+0x346>
	{
		clear_buffer(buffer);
    5d44:	80 e0       	ldi	r24, 0x00	; 0
    5d46:	91 e0       	ldi	r25, 0x01	; 1
    5d48:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    5d4c:	29 e1       	ldi	r18, 0x19	; 25
    5d4e:	30 e0       	ldi	r19, 0x00	; 0
    5d50:	49 e1       	ldi	r20, 0x19	; 25
    5d52:	50 e0       	ldi	r21, 0x00	; 0
    5d54:	63 e7       	ldi	r22, 0x73	; 115
    5d56:	71 e0       	ldi	r23, 0x01	; 1
    5d58:	8d e3       	ldi	r24, 0x3D	; 61
    5d5a:	90 e0       	ldi	r25, 0x00	; 0
    5d5c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		write_buffer(buffer);
    5d60:	80 e0       	ldi	r24, 0x00	; 0
    5d62:	91 e0       	ldi	r25, 0x01	; 1
    5d64:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
    5d68:	2f ef       	ldi	r18, 0xFF	; 255
    5d6a:	88 e0       	ldi	r24, 0x08	; 8
    5d6c:	9d e3       	ldi	r25, 0x3D	; 61
    5d6e:	21 50       	subi	r18, 0x01	; 1
    5d70:	80 40       	sbci	r24, 0x00	; 0
    5d72:	90 40       	sbci	r25, 0x00	; 0
    5d74:	e1 f7       	brne	.-8      	; 0x5d6e <init+0x320>
    5d76:	00 c0       	rjmp	.+0      	; 0x5d78 <init+0x32a>
    5d78:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    5d7a:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    5d7c:	28 e0       	ldi	r18, 0x08	; 8
    5d7e:	88 e1       	ldi	r24, 0x18	; 24
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	a8 95       	wdr
    5d88:	80 93 60 00 	sts	0x0060, r24
    5d8c:	0f be       	out	0x3f, r0	; 63
    5d8e:	20 93 60 00 	sts	0x0060, r18
    5d92:	ff cf       	rjmp	.-2      	; 0x5d92 <init+0x344>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    5d94:	0e 94 c4 4b 	call	0x9788	; 0x9788 <GetVbat>
    5d98:	90 93 2f 05 	sts	0x052F, r25
    5d9c:	80 93 2e 05 	sts	0x052E, r24
	UpdateLimits();							// Update travel and trigger limits
    5da0:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    5da4:	80 91 4b 06 	lds	r24, 0x064B
    5da8:	81 30       	cpi	r24, 0x01	; 1
    5daa:	29 f4       	brne	.+10     	; 0x5db6 <init+0x368>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    5dac:	80 91 20 05 	lds	r24, 0x0520
    5db0:	84 60       	ori	r24, 0x04	; 4
    5db2:	80 93 20 05 	sts	0x0520, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    5db6:	80 91 f0 07 	lds	r24, 0x07F0
    5dba:	88 23       	and	r24, r24
    5dbc:	69 f0       	breq	.+26     	; 0x5dd8 <init+0x38a>
	{
		RxGetChannels();
    5dbe:	0e 94 ef 48 	call	0x91de	; 0x91de <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    5dc2:	80 91 4f 08 	lds	r24, 0x084F
    5dc6:	90 91 50 08 	lds	r25, 0x0850
    5dca:	c3 97       	sbiw	r24, 0x33	; 51
    5dcc:	2c f0       	brlt	.+10     	; 0x5dd8 <init+0x38a>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    5dce:	80 91 20 05 	lds	r24, 0x0520
    5dd2:	81 60       	ori	r24, 0x01	; 1
    5dd4:	80 93 20 05 	sts	0x0520, r24
		}
	}

	// Reset IMU
	reset_IMU();
    5dd8:	0e 94 de 2c 	call	0x59bc	; 0x59bc <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    5ddc:	29 9a       	sbi	0x05, 1	; 5
    5dde:	2f e9       	ldi	r18, 0x9F	; 159
    5de0:	86 e8       	ldi	r24, 0x86	; 134
    5de2:	91 e0       	ldi	r25, 0x01	; 1
    5de4:	21 50       	subi	r18, 0x01	; 1
    5de6:	80 40       	sbci	r24, 0x00	; 0
    5de8:	90 40       	sbci	r25, 0x00	; 0
    5dea:	e1 f7       	brne	.-8      	; 0x5de4 <init+0x396>
    5dec:	00 c0       	rjmp	.+0      	; 0x5dee <init+0x3a0>
    5dee:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    5df0:	29 98       	cbi	0x05, 1	; 5

#ifdef ERROR_LOG	
	// Log reboot
	add_log(REBOOT);
    5df2:	81 e0       	ldi	r24, 0x01	; 1
#endif
} // init()
    5df4:	cf 91       	pop	r28
	_delay_ms(25);
	LVA = 0;

#ifdef ERROR_LOG	
	// Log reboot
	add_log(REBOOT);
    5df6:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <add_log>

00005dfa <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    5dfa:	1f 92       	push	r1
    5dfc:	0f 92       	push	r0
    5dfe:	0f b6       	in	r0, 0x3f	; 63
    5e00:	0f 92       	push	r0
    5e02:	11 24       	eor	r1, r1
    5e04:	8f 93       	push	r24
    5e06:	9f 93       	push	r25
	TMR0_counter++;
    5e08:	80 91 f3 07 	lds	r24, 0x07F3
    5e0c:	90 91 f4 07 	lds	r25, 0x07F4
    5e10:	01 96       	adiw	r24, 0x01	; 1
    5e12:	90 93 f4 07 	sts	0x07F4, r25
    5e16:	80 93 f3 07 	sts	0x07F3, r24
}
    5e1a:	9f 91       	pop	r25
    5e1c:	8f 91       	pop	r24
    5e1e:	0f 90       	pop	r0
    5e20:	0f be       	out	0x3f, r0	; 63
    5e22:	0f 90       	pop	r0
    5e24:	1f 90       	pop	r1
    5e26:	18 95       	reti

00005e28 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    5e28:	1f 92       	push	r1
    5e2a:	0f 92       	push	r0
    5e2c:	0f b6       	in	r0, 0x3f	; 63
    5e2e:	0f 92       	push	r0
    5e30:	11 24       	eor	r1, r1
    5e32:	2f 93       	push	r18
    5e34:	3f 93       	push	r19
    5e36:	8f 93       	push	r24
    5e38:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    5e3a:	80 91 0a 08 	lds	r24, 0x080A
    5e3e:	88 23       	and	r24, r24
    5e40:	19 f0       	breq	.+6      	; 0x5e48 <__vector_2+0x20>
    5e42:	81 e0       	ldi	r24, 0x01	; 1
    5e44:	80 93 0b 08 	sts	0x080B, r24

	if (RX_ROLL)	// Rising
    5e48:	4b 9b       	sbis	0x09, 3	; 9
    5e4a:	09 c0       	rjmp	.+18     	; 0x5e5e <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    5e4c:	80 91 84 00 	lds	r24, 0x0084
    5e50:	90 91 85 00 	lds	r25, 0x0085
    5e54:	90 93 f8 07 	sts	0x07F8, r25
    5e58:	80 93 f7 07 	sts	0x07F7, r24
    5e5c:	14 c0       	rjmp	.+40     	; 0x5e86 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    5e5e:	80 91 84 00 	lds	r24, 0x0084
    5e62:	90 91 85 00 	lds	r25, 0x0085
    5e66:	20 91 f7 07 	lds	r18, 0x07F7
    5e6a:	30 91 f8 07 	lds	r19, 0x07F8
    5e6e:	82 1b       	sub	r24, r18
    5e70:	93 0b       	sbc	r25, r19
    5e72:	90 93 e3 07 	sts	0x07E3, r25
    5e76:	80 93 e2 07 	sts	0x07E2, r24
		if (Config.PWM_Sync == AILERON) 
    5e7a:	80 91 ec 05 	lds	r24, 0x05EC
    5e7e:	81 30       	cpi	r24, 0x01	; 1
    5e80:	11 f4       	brne	.+4      	; 0x5e86 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5e82:	80 93 f0 07 	sts	0x07F0, r24
		}
	}
}
    5e86:	9f 91       	pop	r25
    5e88:	8f 91       	pop	r24
    5e8a:	3f 91       	pop	r19
    5e8c:	2f 91       	pop	r18
    5e8e:	0f 90       	pop	r0
    5e90:	0f be       	out	0x3f, r0	; 63
    5e92:	0f 90       	pop	r0
    5e94:	1f 90       	pop	r1
    5e96:	18 95       	reti

00005e98 <__vector_1>:

ISR(INT0_vect)
{
    5e98:	1f 92       	push	r1
    5e9a:	0f 92       	push	r0
    5e9c:	0f b6       	in	r0, 0x3f	; 63
    5e9e:	0f 92       	push	r0
    5ea0:	11 24       	eor	r1, r1
    5ea2:	2f 93       	push	r18
    5ea4:	3f 93       	push	r19
    5ea6:	8f 93       	push	r24
    5ea8:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5eaa:	80 91 0a 08 	lds	r24, 0x080A
    5eae:	88 23       	and	r24, r24
    5eb0:	19 f0       	breq	.+6      	; 0x5eb8 <__vector_1+0x20>
    5eb2:	81 e0       	ldi	r24, 0x01	; 1
    5eb4:	80 93 0b 08 	sts	0x080B, r24

	if (RX_PITCH)	// Rising 
    5eb8:	4a 9b       	sbis	0x09, 2	; 9
    5eba:	09 c0       	rjmp	.+18     	; 0x5ece <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    5ebc:	80 91 84 00 	lds	r24, 0x0084
    5ec0:	90 91 85 00 	lds	r25, 0x0085
    5ec4:	90 93 fa 07 	sts	0x07FA, r25
    5ec8:	80 93 f9 07 	sts	0x07F9, r24
    5ecc:	15 c0       	rjmp	.+42     	; 0x5ef8 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    5ece:	80 91 84 00 	lds	r24, 0x0084
    5ed2:	90 91 85 00 	lds	r25, 0x0085
    5ed6:	20 91 f9 07 	lds	r18, 0x07F9
    5eda:	30 91 fa 07 	lds	r19, 0x07FA
    5ede:	82 1b       	sub	r24, r18
    5ee0:	93 0b       	sbc	r25, r19
    5ee2:	90 93 e5 07 	sts	0x07E5, r25
    5ee6:	80 93 e4 07 	sts	0x07E4, r24
		if (Config.PWM_Sync == ELEVATOR) 
    5eea:	80 91 ec 05 	lds	r24, 0x05EC
    5eee:	82 30       	cpi	r24, 0x02	; 2
    5ef0:	19 f4       	brne	.+6      	; 0x5ef8 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5ef2:	81 e0       	ldi	r24, 0x01	; 1
    5ef4:	80 93 f0 07 	sts	0x07F0, r24
		}
	}
}
    5ef8:	9f 91       	pop	r25
    5efa:	8f 91       	pop	r24
    5efc:	3f 91       	pop	r19
    5efe:	2f 91       	pop	r18
    5f00:	0f 90       	pop	r0
    5f02:	0f be       	out	0x3f, r0	; 63
    5f04:	0f 90       	pop	r0
    5f06:	1f 90       	pop	r1
    5f08:	18 95       	reti

00005f0a <__vector_7>:

ISR(PCINT3_vect)
{
    5f0a:	1f 92       	push	r1
    5f0c:	0f 92       	push	r0
    5f0e:	0f b6       	in	r0, 0x3f	; 63
    5f10:	0f 92       	push	r0
    5f12:	11 24       	eor	r1, r1
    5f14:	2f 93       	push	r18
    5f16:	3f 93       	push	r19
    5f18:	8f 93       	push	r24
    5f1a:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5f1c:	80 91 0a 08 	lds	r24, 0x080A
    5f20:	88 23       	and	r24, r24
    5f22:	19 f0       	breq	.+6      	; 0x5f2a <__vector_7+0x20>
    5f24:	81 e0       	ldi	r24, 0x01	; 1
    5f26:	80 93 0b 08 	sts	0x080B, r24
		
	if (RX_COLL)	// Rising
    5f2a:	48 9b       	sbis	0x09, 0	; 9
    5f2c:	09 c0       	rjmp	.+18     	; 0x5f40 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    5f2e:	80 91 84 00 	lds	r24, 0x0084
    5f32:	90 91 85 00 	lds	r25, 0x0085
    5f36:	90 93 f6 07 	sts	0x07F6, r25
    5f3a:	80 93 f5 07 	sts	0x07F5, r24
    5f3e:	15 c0       	rjmp	.+42     	; 0x5f6a <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    5f40:	80 91 84 00 	lds	r24, 0x0084
    5f44:	90 91 85 00 	lds	r25, 0x0085
    5f48:	20 91 f5 07 	lds	r18, 0x07F5
    5f4c:	30 91 f6 07 	lds	r19, 0x07F6
    5f50:	82 1b       	sub	r24, r18
    5f52:	93 0b       	sbc	r25, r19
    5f54:	90 93 e1 07 	sts	0x07E1, r25
    5f58:	80 93 e0 07 	sts	0x07E0, r24
		if (Config.PWM_Sync == THROTTLE) 
    5f5c:	80 91 ec 05 	lds	r24, 0x05EC
    5f60:	81 11       	cpse	r24, r1
    5f62:	03 c0       	rjmp	.+6      	; 0x5f6a <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5f64:	81 e0       	ldi	r24, 0x01	; 1
    5f66:	80 93 f0 07 	sts	0x07F0, r24
		}
	}
}
    5f6a:	9f 91       	pop	r25
    5f6c:	8f 91       	pop	r24
    5f6e:	3f 91       	pop	r19
    5f70:	2f 91       	pop	r18
    5f72:	0f 90       	pop	r0
    5f74:	0f be       	out	0x3f, r0	; 63
    5f76:	0f 90       	pop	r0
    5f78:	1f 90       	pop	r1
    5f7a:	18 95       	reti

00005f7c <__vector_5>:


ISR(PCINT1_vect)
{
    5f7c:	1f 92       	push	r1
    5f7e:	0f 92       	push	r0
    5f80:	0f b6       	in	r0, 0x3f	; 63
    5f82:	0f 92       	push	r0
    5f84:	11 24       	eor	r1, r1
    5f86:	2f 93       	push	r18
    5f88:	3f 93       	push	r19
    5f8a:	8f 93       	push	r24
    5f8c:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    5f8e:	80 91 0a 08 	lds	r24, 0x080A
    5f92:	88 23       	and	r24, r24
    5f94:	19 f0       	breq	.+6      	; 0x5f9c <__vector_5+0x20>
    5f96:	81 e0       	ldi	r24, 0x01	; 1
    5f98:	80 93 0b 08 	sts	0x080B, r24

	if (RX_AUX)	// Rising
    5f9c:	18 9b       	sbis	0x03, 0	; 3
    5f9e:	09 c0       	rjmp	.+18     	; 0x5fb2 <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    5fa0:	80 91 84 00 	lds	r24, 0x0084
    5fa4:	90 91 85 00 	lds	r25, 0x0085
    5fa8:	90 93 fe 07 	sts	0x07FE, r25
    5fac:	80 93 fd 07 	sts	0x07FD, r24
    5fb0:	15 c0       	rjmp	.+42     	; 0x5fdc <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    5fb2:	80 91 84 00 	lds	r24, 0x0084
    5fb6:	90 91 85 00 	lds	r25, 0x0085
    5fba:	20 91 fd 07 	lds	r18, 0x07FD
    5fbe:	30 91 fe 07 	lds	r19, 0x07FE
    5fc2:	82 1b       	sub	r24, r18
    5fc4:	93 0b       	sbc	r25, r19
    5fc6:	90 93 e9 07 	sts	0x07E9, r25
    5fca:	80 93 e8 07 	sts	0x07E8, r24
		if (Config.PWM_Sync == GEAR) 
    5fce:	80 91 ec 05 	lds	r24, 0x05EC
    5fd2:	84 30       	cpi	r24, 0x04	; 4
    5fd4:	19 f4       	brne	.+6      	; 0x5fdc <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5fd6:	81 e0       	ldi	r24, 0x01	; 1
    5fd8:	80 93 f0 07 	sts	0x07F0, r24
		}
	}
}
    5fdc:	9f 91       	pop	r25
    5fde:	8f 91       	pop	r24
    5fe0:	3f 91       	pop	r19
    5fe2:	2f 91       	pop	r18
    5fe4:	0f 90       	pop	r0
    5fe6:	0f be       	out	0x3f, r0	; 63
    5fe8:	0f 90       	pop	r0
    5fea:	1f 90       	pop	r1
    5fec:	18 95       	reti

00005fee <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    5fee:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    5ff0:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    5ff2:	80 91 84 00 	lds	r24, 0x0084
    5ff6:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    5ffa:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    5ffc:	08 95       	ret

00005ffe <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    5ffe:	1f 92       	push	r1
    6000:	0f 92       	push	r0
    6002:	0f b6       	in	r0, 0x3f	; 63
    6004:	0f 92       	push	r0
    6006:	11 24       	eor	r1, r1
    6008:	2f 93       	push	r18
    600a:	3f 93       	push	r19
    600c:	4f 93       	push	r20
    600e:	5f 93       	push	r21
    6010:	6f 93       	push	r22
    6012:	7f 93       	push	r23
    6014:	8f 93       	push	r24
    6016:	9f 93       	push	r25
    6018:	af 93       	push	r26
    601a:	bf 93       	push	r27
    601c:	ef 93       	push	r30
    601e:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    6020:	80 91 0a 08 	lds	r24, 0x080A
    6024:	88 23       	and	r24, r24
    6026:	19 f0       	breq	.+6      	; 0x602e <__vector_3+0x30>
    6028:	81 e0       	ldi	r24, 0x01	; 1
    602a:	80 93 0b 08 	sts	0x080B, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    602e:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    6032:	20 91 ea 05 	lds	r18, 0x05EA
    6036:	22 23       	and	r18, r18
    6038:	d1 f0       	breq	.+52     	; 0x606e <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    603a:	1a 9b       	sbis	0x03, 2	; 3
    603c:	05 c0       	rjmp	.+10     	; 0x6048 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    603e:	90 93 fc 07 	sts	0x07FC, r25
    6042:	80 93 fb 07 	sts	0x07FB, r24
    6046:	86 c0       	rjmp	.+268    	; 0x6154 <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    6048:	20 91 fb 07 	lds	r18, 0x07FB
    604c:	30 91 fc 07 	lds	r19, 0x07FC
    6050:	82 1b       	sub	r24, r18
    6052:	93 0b       	sbc	r25, r19
    6054:	90 93 e7 07 	sts	0x07E7, r25
    6058:	80 93 e6 07 	sts	0x07E6, r24
			if (Config.PWM_Sync == RUDDER) 
    605c:	80 91 ec 05 	lds	r24, 0x05EC
    6060:	83 30       	cpi	r24, 0x03	; 3
    6062:	09 f0       	breq	.+2      	; 0x6066 <__vector_3+0x68>
    6064:	77 c0       	rjmp	.+238    	; 0x6154 <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    6066:	81 e0       	ldi	r24, 0x01	; 1
    6068:	80 93 f0 07 	sts	0x07F0, r24
    606c:	73 c0       	rjmp	.+230    	; 0x6154 <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    606e:	1a 99       	sbic	0x03, 2	; 3
    6070:	71 c0       	rjmp	.+226    	; 0x6154 <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    6072:	20 91 08 08 	lds	r18, 0x0808
    6076:	30 91 09 08 	lds	r19, 0x0809
    607a:	ac 01       	movw	r20, r24
    607c:	42 1b       	sub	r20, r18
    607e:	53 0b       	sbc	r21, r19
    6080:	9a 01       	movw	r18, r20
    6082:	2f 35       	cpi	r18, 0x5F	; 95
    6084:	3a 41       	sbci	r19, 0x1A	; 26
    6086:	58 f4       	brcc	.+22     	; 0x609e <__vector_3+0xa0>
    6088:	20 91 08 08 	lds	r18, 0x0808
    608c:	30 91 09 08 	lds	r19, 0x0809
    6090:	ac 01       	movw	r20, r24
    6092:	42 1b       	sub	r20, r18
    6094:	53 0b       	sbc	r21, r19
    6096:	9a 01       	movw	r18, r20
    6098:	2e 3e       	cpi	r18, 0xEE	; 238
    609a:	32 40       	sbci	r19, 0x02	; 2
    609c:	10 f4       	brcc	.+4      	; 0x60a2 <__vector_3+0xa4>
		{
			ch_num = 0;
    609e:	10 92 07 08 	sts	0x0807, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    60a2:	90 93 09 08 	sts	0x0809, r25
    60a6:	80 93 08 08 	sts	0x0808, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    60aa:	e0 91 07 08 	lds	r30, 0x0807
    60ae:	f0 e0       	ldi	r31, 0x00	; 0
    60b0:	ef 53       	subi	r30, 0x3F	; 63
    60b2:	fa 4f       	sbci	r31, 0xFA	; 250
    60b4:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    60b6:	20 91 07 08 	lds	r18, 0x0807
    60ba:	22 23       	and	r18, r18
    60bc:	39 f0       	breq	.+14     	; 0x60cc <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    60be:	a0 91 07 08 	lds	r26, 0x0807
    60c2:	b0 e0       	ldi	r27, 0x00	; 0
    60c4:	af 53       	subi	r26, 0x3F	; 63
    60c6:	ba 4f       	sbci	r27, 0xFA	; 250
    60c8:	2c 91       	ld	r18, X
    60ca:	01 c0       	rjmp	.+2      	; 0x60ce <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    60cc:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    60ce:	30 91 07 08 	lds	r19, 0x0807
    60d2:	38 30       	cpi	r19, 0x08	; 8
    60d4:	38 f4       	brcc	.+14     	; 0x60e4 <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    60d6:	f0 e0       	ldi	r31, 0x00	; 0
    60d8:	ee 0f       	add	r30, r30
    60da:	ff 1f       	adc	r31, r31
    60dc:	eb 50       	subi	r30, 0x0B	; 11
    60de:	f8 4f       	sbci	r31, 0xF8	; 248
    60e0:	91 83       	std	Z+1, r25	; 0x01
    60e2:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    60e4:	30 91 07 08 	lds	r19, 0x0807
    60e8:	33 23       	and	r19, r19
    60ea:	99 f0       	breq	.+38     	; 0x6112 <__vector_3+0x114>
    60ec:	30 91 07 08 	lds	r19, 0x0807
    60f0:	39 30       	cpi	r19, 0x09	; 9
    60f2:	78 f4       	brcc	.+30     	; 0x6112 <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    60f4:	30 e0       	ldi	r19, 0x00	; 0
    60f6:	22 0f       	add	r18, r18
    60f8:	33 1f       	adc	r19, r19
    60fa:	f9 01       	movw	r30, r18
    60fc:	eb 50       	subi	r30, 0x0B	; 11
    60fe:	f8 4f       	sbci	r31, 0xF8	; 248
    6100:	40 81       	ld	r20, Z
    6102:	51 81       	ldd	r21, Z+1	; 0x01
    6104:	84 1b       	sub	r24, r20
    6106:	95 0b       	sbc	r25, r21
    6108:	f9 01       	movw	r30, r18
    610a:	e0 52       	subi	r30, 0x20	; 32
    610c:	f8 4f       	sbci	r31, 0xF8	; 248
    610e:	91 83       	std	Z+1, r25	; 0x01
    6110:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    6112:	80 91 07 08 	lds	r24, 0x0807
    6116:	8f 5f       	subi	r24, 0xFF	; 255
    6118:	80 93 07 08 	sts	0x0807, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    611c:	90 91 07 08 	lds	r25, 0x0807
    6120:	80 91 f1 07 	lds	r24, 0x07F1
    6124:	89 17       	cp	r24, r25
    6126:	28 f4       	brcc	.+10     	; 0x6132 <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    6128:	80 91 07 08 	lds	r24, 0x0807
    612c:	80 93 f1 07 	sts	0x07F1, r24
    6130:	09 c0       	rjmp	.+18     	; 0x6144 <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    6132:	90 91 07 08 	lds	r25, 0x0807
    6136:	80 91 f1 07 	lds	r24, 0x07F1
    613a:	98 13       	cpse	r25, r24
    613c:	03 c0       	rjmp	.+6      	; 0x6144 <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    613e:	81 e0       	ldi	r24, 0x01	; 1
    6140:	80 93 f0 07 	sts	0x07F0, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    6144:	80 91 19 05 	lds	r24, 0x0519
    6148:	88 23       	and	r24, r24
    614a:	21 f0       	breq	.+8      	; 0x6154 <__vector_3+0x156>
		{
			max_chan = 0;
    614c:	10 92 f1 07 	sts	0x07F1, r1
			Overdue = false;
    6150:	10 92 19 05 	sts	0x0519, r1
		}
	}
} // ISR(INT2_vect)
    6154:	ff 91       	pop	r31
    6156:	ef 91       	pop	r30
    6158:	bf 91       	pop	r27
    615a:	af 91       	pop	r26
    615c:	9f 91       	pop	r25
    615e:	8f 91       	pop	r24
    6160:	7f 91       	pop	r23
    6162:	6f 91       	pop	r22
    6164:	5f 91       	pop	r21
    6166:	4f 91       	pop	r20
    6168:	3f 91       	pop	r19
    616a:	2f 91       	pop	r18
    616c:	0f 90       	pop	r0
    616e:	0f be       	out	0x3f, r0	; 63
    6170:	0f 90       	pop	r0
    6172:	1f 90       	pop	r1
    6174:	18 95       	reti

00006176 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    6176:	1f 92       	push	r1
    6178:	0f 92       	push	r0
    617a:	0f b6       	in	r0, 0x3f	; 63
    617c:	0f 92       	push	r0
    617e:	11 24       	eor	r1, r1
    6180:	2f 93       	push	r18
    6182:	3f 93       	push	r19
    6184:	4f 93       	push	r20
    6186:	5f 93       	push	r21
    6188:	6f 93       	push	r22
    618a:	7f 93       	push	r23
    618c:	8f 93       	push	r24
    618e:	9f 93       	push	r25
    6190:	af 93       	push	r26
    6192:	bf 93       	push	r27
    6194:	cf 93       	push	r28
    6196:	ef 93       	push	r30
    6198:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    619a:	80 91 0a 08 	lds	r24, 0x080A
    619e:	88 23       	and	r24, r24
    61a0:	19 f0       	breq	.+6      	; 0x61a8 <__vector_20+0x32>
    61a2:	81 e0       	ldi	r24, 0x01	; 1
    61a4:	80 93 0b 08 	sts	0x080B, r24

	// Read byte first
	temp = UDR0;
    61a8:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    61ac:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <TIM16_ReadTCNT1>
	
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    61b0:	40 91 08 08 	lds	r20, 0x0808
    61b4:	50 91 09 08 	lds	r21, 0x0809
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    61b8:	40 91 08 08 	lds	r20, 0x0808
    61bc:	50 91 09 08 	lds	r21, 0x0809
    61c0:	9c 01       	movw	r18, r24
    61c2:	24 1b       	sub	r18, r20
    61c4:	35 0b       	sbc	r19, r21
    61c6:	a9 01       	movw	r20, r18
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    61c8:	45 3c       	cpi	r20, 0xC5	; 197
    61ca:	39 e0       	ldi	r19, 0x09	; 9
    61cc:	53 07       	cpc	r21, r19
    61ce:	90 f0       	brcs	.+36     	; 0x61f4 <__vector_20+0x7e>
	{
		// Reset variables
		rcindex = 0;
    61d0:	10 92 df 07 	sts	0x07DF, r1
		bytecount = 0;
    61d4:	10 92 f2 07 	sts	0x07F2, r1
		ch_num = 0;
    61d8:	10 92 07 08 	sts	0x0807, r1
		checksum = 0;
    61dc:	10 92 0d 08 	sts	0x080D, r1
    61e0:	10 92 0c 08 	sts	0x080C, r1
		chanmask16 = 0;
    61e4:	10 92 06 08 	sts	0x0806, r1
    61e8:	10 92 05 08 	sts	0x0805, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    61ec:	50 93 0f 08 	sts	0x080F, r21
    61f0:	40 93 0e 08 	sts	0x080E, r20
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    61f4:	90 93 09 08 	sts	0x0809, r25
    61f8:	80 93 08 08 	sts	0x0808, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    61fc:	80 91 df 07 	lds	r24, 0x07DF
    6200:	86 32       	cpi	r24, 0x26	; 38
    6202:	50 f4       	brcc	.+20     	; 0x6218 <__vector_20+0xa2>
	{
		sBuffer[rcindex++] = temp;			
    6204:	e0 91 df 07 	lds	r30, 0x07DF
    6208:	81 e0       	ldi	r24, 0x01	; 1
    620a:	8e 0f       	add	r24, r30
    620c:	80 93 df 07 	sts	0x07DF, r24
    6210:	f0 e0       	ldi	r31, 0x00	; 0
    6212:	ec 5b       	subi	r30, 0xBC	; 188
    6214:	fa 4f       	sbci	r31, 0xFA	; 250
    6216:	c0 83       	st	Z, r28
	//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
	//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
	//*
	//************************************************************

	if (Config.RxMode == XTREME)
    6218:	80 91 ea 05 	lds	r24, 0x05EA
    621c:	84 30       	cpi	r24, 0x04	; 4
    621e:	09 f0       	breq	.+2      	; 0x6222 <__vector_20+0xac>
    6220:	b3 c0       	rjmp	.+358    	; 0x6388 <__vector_20+0x212>
	{
		// Look at flag byte to see if the data is meant for us
		if (bytecount == 0)
    6222:	80 91 f2 07 	lds	r24, 0x07F2
    6226:	81 11       	cpse	r24, r1
    6228:	0d c0       	rjmp	.+26     	; 0x6244 <__vector_20+0xce>
		{
			// Check top 3 bits for channel bank
			// Trash checksum if not clear
			if (temp & 0xE0)
    622a:	8c 2f       	mov	r24, r28
    622c:	80 7e       	andi	r24, 0xE0	; 224
    622e:	51 f0       	breq	.+20     	; 0x6244 <__vector_20+0xce>
			{
				checksum +=	0x55;
    6230:	80 91 0c 08 	lds	r24, 0x080C
    6234:	90 91 0d 08 	lds	r25, 0x080D
    6238:	8b 5a       	subi	r24, 0xAB	; 171
    623a:	9f 4f       	sbci	r25, 0xFF	; 255
    623c:	90 93 0d 08 	sts	0x080D, r25
    6240:	80 93 0c 08 	sts	0x080C, r24
			}
		}

		// Get MSB of mask byte
		if (bytecount == 2)
    6244:	80 91 f2 07 	lds	r24, 0x07F2
    6248:	2c 2f       	mov	r18, r28
    624a:	30 e0       	ldi	r19, 0x00	; 0
    624c:	82 30       	cpi	r24, 0x02	; 2
    624e:	51 f4       	brne	.+20     	; 0x6264 <__vector_20+0xee>
		{
			chanmask16 = 0;
    6250:	10 92 06 08 	sts	0x0806, r1
    6254:	10 92 05 08 	sts	0x0805, r1
			chanmask16 = temp << 8;		// High byte of Mask
    6258:	92 2f       	mov	r25, r18
    625a:	88 27       	eor	r24, r24
    625c:	90 93 06 08 	sts	0x0806, r25
    6260:	80 93 05 08 	sts	0x0805, r24
		}

		// Combine with LSB of mask byte
		// Work out how many channels there are supposed to be
		if (bytecount == 3)
    6264:	80 91 f2 07 	lds	r24, 0x07F2
    6268:	83 30       	cpi	r24, 0x03	; 3
    626a:	b9 f0       	breq	.+46     	; 0x629a <__vector_20+0x124>
				temp16 &= temp16 - 1;
			}
		}

		// Add up checksum up until final packet
		if (bytecount < ((ch_num << 1) + 4))
    626c:	80 91 07 08 	lds	r24, 0x0807
    6270:	40 91 f2 07 	lds	r20, 0x07F2
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	88 0f       	add	r24, r24
    6278:	99 1f       	adc	r25, r25
    627a:	03 96       	adiw	r24, 0x03	; 3
    627c:	50 e0       	ldi	r21, 0x00	; 0
    627e:	84 17       	cp	r24, r20
    6280:	95 07       	cpc	r25, r21
    6282:	44 f1       	brlt	.+80     	; 0x62d4 <__vector_20+0x15e>
		{
			checksum +=	temp;
    6284:	80 91 0c 08 	lds	r24, 0x080C
    6288:	90 91 0d 08 	lds	r25, 0x080D
    628c:	82 0f       	add	r24, r18
    628e:	93 1f       	adc	r25, r19
    6290:	90 93 0d 08 	sts	0x080D, r25
    6294:	80 93 0c 08 	sts	0x080C, r24
    6298:	7b c1       	rjmp	.+758    	; 0x6590 <__vector_20+0x41a>

		// Combine with LSB of mask byte
		// Work out how many channels there are supposed to be
		if (bytecount == 3)
		{
			chanmask16 += (uint16_t)temp;	// Low byte of Mask
    629a:	80 91 05 08 	lds	r24, 0x0805
    629e:	90 91 06 08 	lds	r25, 0x0806
    62a2:	82 0f       	add	r24, r18
    62a4:	93 1f       	adc	r25, r19
    62a6:	90 93 06 08 	sts	0x0806, r25
    62aa:	80 93 05 08 	sts	0x0805, r24
			temp16 = chanmask16;			// Need to keep a copy od chanmask16
    62ae:	80 91 05 08 	lds	r24, 0x0805
    62b2:	90 91 06 08 	lds	r25, 0x0806

			// Count bits set (number of active channels)				 
			for (ch_num = 0; temp16; ch_num++)
    62b6:	10 92 07 08 	sts	0x0807, r1
    62ba:	00 97       	sbiw	r24, 0x00	; 0
    62bc:	b9 f2       	breq	.-82     	; 0x626c <__vector_20+0xf6>
			{
				temp16 &= temp16 - 1;
    62be:	ac 01       	movw	r20, r24
    62c0:	41 50       	subi	r20, 0x01	; 1
    62c2:	51 09       	sbc	r21, r1
    62c4:	84 23       	and	r24, r20
    62c6:	95 23       	and	r25, r21
		{
			chanmask16 += (uint16_t)temp;	// Low byte of Mask
			temp16 = chanmask16;			// Need to keep a copy od chanmask16

			// Count bits set (number of active channels)				 
			for (ch_num = 0; temp16; ch_num++)
    62c8:	40 91 07 08 	lds	r20, 0x0807
    62cc:	4f 5f       	subi	r20, 0xFF	; 255
    62ce:	40 93 07 08 	sts	0x0807, r20
    62d2:	f3 cf       	rjmp	.-26     	; 0x62ba <__vector_20+0x144>
	
		// Process data when all packets received
		else
		{
			// Check checksum 
			checksum &= 0xff;
    62d4:	80 91 0c 08 	lds	r24, 0x080C
    62d8:	90 91 0d 08 	lds	r25, 0x080D
    62dc:	99 27       	eor	r25, r25
    62de:	90 93 0d 08 	sts	0x080D, r25
    62e2:	80 93 0c 08 	sts	0x080C, r24

			// Ignore packet if checksum wrong
			if (checksum != temp) // temp holds the transmitted checksum byte
    62e6:	80 91 0c 08 	lds	r24, 0x080C
    62ea:	90 91 0d 08 	lds	r25, 0x080D
    62ee:	82 17       	cp	r24, r18
    62f0:	93 07       	cpc	r25, r19
    62f2:	49 f0       	breq	.+18     	; 0x6306 <__vector_20+0x190>
			{
				Interrupted = false;
    62f4:	10 92 f0 07 	sts	0x07F0, r1
				ch_num = 0;
    62f8:	10 92 07 08 	sts	0x0807, r1
				checksum = 0;
    62fc:	10 92 0d 08 	sts	0x080D, r1
    6300:	10 92 0c 08 	sts	0x080C, r1
    6304:	45 c1       	rjmp	.+650    	; 0x6590 <__vector_20+0x41a>
			}
			else
			{
				// RC sync established
				Interrupted = true;	
    6306:	81 e0       	ldi	r24, 0x01	; 1
    6308:	80 93 f0 07 	sts	0x07F0, r24
    630c:	80 e0       	ldi	r24, 0x00	; 0
    630e:	90 e0       	ldi	r25, 0x00	; 0

				// Set start of channel data per format
				sindex = 4; // Channel data from byte 5
    6310:	a4 e0       	ldi	r26, 0x04	; 4
				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
    6312:	61 e0       	ldi	r22, 0x01	; 1
    6314:	70 e0       	ldi	r23, 0x00	; 0
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    6316:	ba e0       	ldi	r27, 0x0A	; 10
				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
    6318:	40 91 05 08 	lds	r20, 0x0805
    631c:	50 91 06 08 	lds	r21, 0x0806
    6320:	9b 01       	movw	r18, r22
    6322:	08 2e       	mov	r0, r24
    6324:	02 c0       	rjmp	.+4      	; 0x632a <__vector_20+0x1b4>
    6326:	22 0f       	add	r18, r18
    6328:	33 1f       	adc	r19, r19
    632a:	0a 94       	dec	r0
    632c:	e2 f7       	brpl	.-8      	; 0x6326 <__vector_20+0x1b0>
    632e:	24 23       	and	r18, r20
    6330:	35 23       	and	r19, r21
    6332:	23 2b       	or	r18, r19
    6334:	21 f1       	breq	.+72     	; 0x637e <__vector_20+0x208>
					{
						// Reconstruct word
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    6336:	ea 2f       	mov	r30, r26
    6338:	f0 e0       	ldi	r31, 0x00	; 0
    633a:	ec 5b       	subi	r30, 0xBC	; 188
    633c:	fa 4f       	sbci	r31, 0xFA	; 250
    633e:	40 81       	ld	r20, Z
    6340:	21 81       	ldd	r18, Z+1	; 0x01

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
    6342:	88 30       	cpi	r24, 0x08	; 8
    6344:	c8 f4       	brcc	.+50     	; 0x6378 <__vector_20+0x202>
    6346:	fc 01       	movw	r30, r24
    6348:	ef 53       	subi	r30, 0x3F	; 63
    634a:	fa 4f       	sbci	r31, 0xFA	; 250
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    634c:	e1 81       	ldd	r30, Z+1	; 0x01
    634e:	f0 e0       	ldi	r31, 0x00	; 0
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
					{
						// Reconstruct word
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    6350:	50 e0       	ldi	r21, 0x00	; 0
    6352:	54 2f       	mov	r21, r20
    6354:	44 27       	eor	r20, r20
    6356:	42 0f       	add	r20, r18
    6358:	51 1d       	adc	r21, r1

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    635a:	b4 9f       	mul	r27, r20
    635c:	90 01       	movw	r18, r0
    635e:	b5 9f       	mul	r27, r21
    6360:	30 0d       	add	r19, r0
    6362:	11 24       	eor	r1, r1
    6364:	36 95       	lsr	r19
    6366:	27 95       	ror	r18
    6368:	36 95       	lsr	r19
    636a:	27 95       	ror	r18
    636c:	ee 0f       	add	r30, r30
    636e:	ff 1f       	adc	r31, r31
    6370:	e0 52       	subi	r30, 0x20	; 32
    6372:	f8 4f       	sbci	r31, 0xF8	; 248
    6374:	31 83       	std	Z+1, r19	; 0x01
    6376:	20 83       	st	Z, r18
						} 		

						// Within the bounds of the buffer
						if (sindex < SBUFFER_SIZE)
    6378:	a6 32       	cpi	r26, 0x26	; 38
    637a:	08 f4       	brcc	.+2      	; 0x637e <__vector_20+0x208>
						{
							sindex += 2;
    637c:	ae 5f       	subi	r26, 0xFE	; 254
    637e:	01 96       	adiw	r24, 0x01	; 1
				// Set start of channel data per format
				sindex = 4; // Channel data from byte 5

				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
    6380:	80 31       	cpi	r24, 0x10	; 16
    6382:	91 05       	cpc	r25, r1
    6384:	49 f6       	brne	.-110    	; 0x6318 <__vector_20+0x1a2>
    6386:	04 c1       	rjmp	.+520    	; 0x6590 <__vector_20+0x41a>
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    6388:	82 30       	cpi	r24, 0x02	; 2
    638a:	09 f0       	breq	.+2      	; 0x638e <__vector_20+0x218>
    638c:	90 c0       	rjmp	.+288    	; 0x64ae <__vector_20+0x338>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    638e:	80 91 f2 07 	lds	r24, 0x07F2
    6392:	88 31       	cpi	r24, 0x18	; 24
    6394:	09 f0       	breq	.+2      	; 0x6398 <__vector_20+0x222>
    6396:	fc c0       	rjmp	.+504    	; 0x6590 <__vector_20+0x41a>
    6398:	cc 23       	and	r28, r28
    639a:	59 f0       	breq	.+22     	; 0x63b2 <__vector_20+0x23c>
    639c:	81 e0       	ldi	r24, 0x01	; 1
    639e:	cf 3c       	cpi	r28, 0xCF	; 207
    63a0:	08 f4       	brcc	.+2      	; 0x63a4 <__vector_20+0x22e>
    63a2:	80 e0       	ldi	r24, 0x00	; 0
    63a4:	91 e3       	ldi	r25, 0x31	; 49
    63a6:	89 9f       	mul	r24, r25
    63a8:	c0 0d       	add	r28, r0
    63aa:	11 24       	eor	r1, r1
    63ac:	c4 30       	cpi	r28, 0x04	; 4
    63ae:	09 f0       	breq	.+2      	; 0x63b2 <__vector_20+0x23c>
    63b0:	ef c0       	rjmp	.+478    	; 0x6590 <__vector_20+0x41a>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    63b2:	80 91 5b 05 	lds	r24, 0x055B
    63b6:	85 fd       	sbrc	r24, 5
    63b8:	eb c0       	rjmp	.+470    	; 0x6590 <__vector_20+0x41a>
			{
				// RC sync established
				Interrupted = true;
    63ba:	81 e0       	ldi	r24, 0x01	; 1
    63bc:	80 93 f0 07 	sts	0x07F0, r24
    63c0:	80 e0       	ldi	r24, 0x00	; 0
    63c2:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    63c4:	fc 01       	movw	r30, r24
    63c6:	ee 0f       	add	r30, r30
    63c8:	ff 1f       	adc	r31, r31
    63ca:	e0 52       	subi	r30, 0x20	; 32
    63cc:	f8 4f       	sbci	r31, 0xF8	; 248
    63ce:	11 82       	std	Z+1, r1	; 0x01
    63d0:	10 82       	st	Z, r1
    63d2:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    63d4:	88 30       	cpi	r24, 0x08	; 8
    63d6:	91 05       	cpc	r25, r1
    63d8:	a9 f7       	brne	.-22     	; 0x63c4 <__vector_20+0x24e>
    63da:	a8 e5       	ldi	r26, 0x58	; 88
    63dc:	70 e0       	ldi	r23, 0x00	; 0
    63de:	c0 e0       	ldi	r28, 0x00	; 0
    63e0:	60 e0       	ldi	r22, 0x00	; 0
    63e2:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    63e4:	21 e0       	ldi	r18, 0x01	; 1
    63e6:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    63e8:	eb 2f       	mov	r30, r27
    63ea:	f0 e0       	ldi	r31, 0x00	; 0
    63ec:	ec 5b       	subi	r30, 0xBC	; 188
    63ee:	fa 4f       	sbci	r31, 0xFA	; 250
    63f0:	80 81       	ld	r24, Z
    63f2:	90 e0       	ldi	r25, 0x00	; 0
    63f4:	06 2e       	mov	r0, r22
    63f6:	02 c0       	rjmp	.+4      	; 0x63fc <__vector_20+0x286>
    63f8:	95 95       	asr	r25
    63fa:	87 95       	ror	r24
    63fc:	0a 94       	dec	r0
    63fe:	e2 f7       	brpl	.-8      	; 0x63f8 <__vector_20+0x282>
    6400:	80 ff       	sbrs	r24, 0
    6402:	17 c0       	rjmp	.+46     	; 0x6432 <__vector_20+0x2bc>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    6404:	ec 2f       	mov	r30, r28
    6406:	f0 e0       	ldi	r31, 0x00	; 0
    6408:	ef 53       	subi	r30, 0x3F	; 63
    640a:	fa 4f       	sbci	r31, 0xFA	; 250
    640c:	e1 81       	ldd	r30, Z+1	; 0x01
    640e:	f0 e0       	ldi	r31, 0x00	; 0
    6410:	ee 0f       	add	r30, r30
    6412:	ff 1f       	adc	r31, r31
    6414:	e0 52       	subi	r30, 0x20	; 32
    6416:	f8 4f       	sbci	r31, 0xF8	; 248
    6418:	80 81       	ld	r24, Z
    641a:	91 81       	ldd	r25, Z+1	; 0x01
    641c:	a9 01       	movw	r20, r18
    641e:	07 2e       	mov	r0, r23
    6420:	02 c0       	rjmp	.+4      	; 0x6426 <__vector_20+0x2b0>
    6422:	44 0f       	add	r20, r20
    6424:	55 1f       	adc	r21, r21
    6426:	0a 94       	dec	r0
    6428:	e2 f7       	brpl	.-8      	; 0x6422 <__vector_20+0x2ac>
    642a:	84 2b       	or	r24, r20
    642c:	95 2b       	or	r25, r21
    642e:	91 83       	std	Z+1, r25	; 0x01
    6430:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    6432:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    6434:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    6436:	68 30       	cpi	r22, 0x08	; 8
    6438:	11 f4       	brne	.+4      	; 0x643e <__vector_20+0x2c8>
                    {
                        chan_mask =0;
                        sindex++;
    643a:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    643c:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    643e:	7b 30       	cpi	r23, 0x0B	; 11
    6440:	11 f4       	brne	.+4      	; 0x6446 <__vector_20+0x2d0>
                    {
                        data_mask =0;
                        chan_shift++;
    6442:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    6444:	70 e0       	ldi	r23, 0x00	; 0
    6446:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    6448:	79 f6       	brne	.-98     	; 0x63e8 <__vector_20+0x272>
    644a:	40 e0       	ldi	r20, 0x00	; 0
    644c:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    644e:	fa 01       	movw	r30, r20
    6450:	ee 0f       	add	r30, r30
    6452:	ff 1f       	adc	r31, r31
    6454:	e0 52       	subi	r30, 0x20	; 32
    6456:	f8 4f       	sbci	r31, 0xF8	; 248
    6458:	20 81       	ld	r18, Z
    645a:	31 81       	ldd	r19, Z+1	; 0x01
    645c:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    645e:	c9 01       	movw	r24, r18
    6460:	95 95       	asr	r25
    6462:	87 95       	ror	r24
    6464:	95 95       	asr	r25
    6466:	87 95       	ror	r24
    6468:	82 0f       	add	r24, r18
    646a:	93 1f       	adc	r25, r19
    646c:	b9 01       	movw	r22, r18
    646e:	a3 e0       	ldi	r26, 0x03	; 3
    6470:	75 95       	asr	r23
    6472:	67 95       	ror	r22
    6474:	aa 95       	dec	r26
    6476:	e1 f7       	brne	.-8      	; 0x6470 <__vector_20+0x2fa>
    6478:	86 0f       	add	r24, r22
    647a:	97 1f       	adc	r25, r23
    647c:	b9 01       	movw	r22, r18
    647e:	b4 e0       	ldi	r27, 0x04	; 4
    6480:	75 95       	asr	r23
    6482:	67 95       	ror	r22
    6484:	ba 95       	dec	r27
    6486:	e1 f7       	brne	.-8      	; 0x6480 <__vector_20+0x30a>
    6488:	86 0f       	add	r24, r22
    648a:	97 1f       	adc	r25, r23
    648c:	c5 e0       	ldi	r28, 0x05	; 5
    648e:	35 95       	asr	r19
    6490:	27 95       	ror	r18
    6492:	ca 95       	dec	r28
    6494:	e1 f7       	brne	.-8      	; 0x648e <__vector_20+0x318>
    6496:	82 0f       	add	r24, r18
    6498:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    649a:	8a 55       	subi	r24, 0x5A	; 90
    649c:	91 4f       	sbci	r25, 0xF1	; 241
    649e:	91 83       	std	Z+1, r25	; 0x01
    64a0:	80 83       	st	Z, r24
    64a2:	4f 5f       	subi	r20, 0xFF	; 255
    64a4:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    64a6:	48 30       	cpi	r20, 0x08	; 8
    64a8:	51 05       	cpc	r21, r1
    64aa:	89 f6       	brne	.-94     	; 0x644e <__vector_20+0x2d8>
    64ac:	71 c0       	rjmp	.+226    	; 0x6590 <__vector_20+0x41a>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    64ae:	83 30       	cpi	r24, 0x03	; 3
    64b0:	09 f0       	breq	.+2      	; 0x64b4 <__vector_20+0x33e>
    64b2:	6e c0       	rjmp	.+220    	; 0x6590 <__vector_20+0x41a>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    64b4:	80 91 f2 07 	lds	r24, 0x07F2
    64b8:	8f 30       	cpi	r24, 0x0F	; 15
    64ba:	08 f4       	brcc	.+2      	; 0x64be <__vector_20+0x348>
    64bc:	69 c0       	rjmp	.+210    	; 0x6590 <__vector_20+0x41a>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    64be:	c0 93 53 05 	sts	0x0553, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    64c2:	80 91 45 05 	lds	r24, 0x0545
    64c6:	84 ff       	sbrs	r24, 4
    64c8:	04 c0       	rjmp	.+8      	; 0x64d2 <__vector_20+0x35c>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    64ca:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    64cc:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    64ce:	78 e7       	ldi	r23, 0x78	; 120
    64d0:	03 c0       	rjmp	.+6      	; 0x64d8 <__vector_20+0x362>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    64d2:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    64d4:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    64d6:	7c e3       	ldi	r23, 0x3C	; 60
    64d8:	e7 e4       	ldi	r30, 0x47	; 71
    64da:	f5 e0       	ldi	r31, 0x05	; 5
    64dc:	df 01       	movw	r26, r30
    64de:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    64e0:	2c 91       	ld	r18, X
    64e2:	82 2f       	mov	r24, r18
    64e4:	87 23       	and	r24, r23
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	06 2e       	mov	r0, r22
    64ea:	02 c0       	rjmp	.+4      	; 0x64f0 <__vector_20+0x37a>
    64ec:	95 95       	asr	r25
    64ee:	87 95       	ror	r24
    64f0:	0a 94       	dec	r0
    64f2:	e2 f7       	brpl	.-8      	; 0x64ec <__vector_20+0x376>
    64f4:	80 93 07 08 	sts	0x0807, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    64f8:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    64fa:	90 91 07 08 	lds	r25, 0x0807
    64fe:	98 30       	cpi	r25, 0x08	; 8
    6500:	f0 f5       	brcc	.+124    	; 0x657e <__vector_20+0x408>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    6502:	2c 23       	and	r18, r28
    6504:	30 e0       	ldi	r19, 0x00	; 0
    6506:	32 2f       	mov	r19, r18
    6508:	22 27       	eor	r18, r18
    650a:	28 0f       	add	r18, r24
    650c:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    650e:	63 30       	cpi	r22, 0x03	; 3
    6510:	11 f4       	brne	.+4      	; 0x6516 <__vector_20+0x3a0>
					{
						itemp16 = temp16 - 1024;
    6512:	34 50       	subi	r19, 0x04	; 4
    6514:	01 c0       	rjmp	.+2      	; 0x6518 <__vector_20+0x3a2>
					}
					else
					{
						itemp16 = temp16 - 512;	
    6516:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    6518:	c9 01       	movw	r24, r18
    651a:	88 0f       	add	r24, r24
    651c:	99 1f       	adc	r25, r25
    651e:	a9 01       	movw	r20, r18
    6520:	55 95       	asr	r21
    6522:	47 95       	ror	r20
    6524:	84 0f       	add	r24, r20
    6526:	95 1f       	adc	r25, r21
    6528:	a9 01       	movw	r20, r18
    652a:	55 95       	asr	r21
    652c:	47 95       	ror	r20
    652e:	55 95       	asr	r21
    6530:	47 95       	ror	r20
    6532:	84 0f       	add	r24, r20
    6534:	95 1f       	adc	r25, r21
    6536:	a9 01       	movw	r20, r18
    6538:	a3 e0       	ldi	r26, 0x03	; 3
    653a:	55 95       	asr	r21
    653c:	47 95       	ror	r20
    653e:	aa 95       	dec	r26
    6540:	e1 f7       	brne	.-8      	; 0x653a <__vector_20+0x3c4>
    6542:	84 0f       	add	r24, r20
    6544:	95 1f       	adc	r25, r21
    6546:	b4 e0       	ldi	r27, 0x04	; 4
    6548:	35 95       	asr	r19
    654a:	27 95       	ror	r18
    654c:	ba 95       	dec	r27
    654e:	e1 f7       	brne	.-8      	; 0x6548 <__vector_20+0x3d2>
    6550:	82 0f       	add	r24, r18
    6552:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    6554:	63 30       	cpi	r22, 0x03	; 3
    6556:	11 f4       	brne	.+4      	; 0x655c <__vector_20+0x3e6>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    6558:	95 95       	asr	r25
    655a:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    655c:	a0 91 07 08 	lds	r26, 0x0807
    6560:	b0 e0       	ldi	r27, 0x00	; 0
    6562:	af 53       	subi	r26, 0x3F	; 63
    6564:	ba 4f       	sbci	r27, 0xFA	; 250
    6566:	11 96       	adiw	r26, 0x01	; 1
    6568:	ac 91       	ld	r26, X
    656a:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    656c:	8a 55       	subi	r24, 0x5A	; 90
    656e:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    6570:	aa 0f       	add	r26, r26
    6572:	bb 1f       	adc	r27, r27
    6574:	a0 52       	subi	r26, 0x20	; 32
    6576:	b8 4f       	sbci	r27, 0xF8	; 248
    6578:	11 96       	adiw	r26, 0x01	; 1
    657a:	9c 93       	st	X, r25
    657c:	8e 93       	st	-X, r24
    657e:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    6580:	25 e0       	ldi	r18, 0x05	; 5
    6582:	e5 35       	cpi	r30, 0x55	; 85
    6584:	f2 07       	cpc	r31, r18
    6586:	09 f0       	breq	.+2      	; 0x658a <__vector_20+0x414>
    6588:	a9 cf       	rjmp	.-174    	; 0x64dc <__vector_20+0x366>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    658a:	81 e0       	ldi	r24, 0x01	; 1
    658c:	80 93 f0 07 	sts	0x07F0, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    6590:	80 91 f2 07 	lds	r24, 0x07F2
    6594:	8f 5f       	subi	r24, 0xFF	; 255
    6596:	80 93 f2 07 	sts	0x07F2, r24
}
    659a:	ff 91       	pop	r31
    659c:	ef 91       	pop	r30
    659e:	cf 91       	pop	r28
    65a0:	bf 91       	pop	r27
    65a2:	af 91       	pop	r26
    65a4:	9f 91       	pop	r25
    65a6:	8f 91       	pop	r24
    65a8:	7f 91       	pop	r23
    65aa:	6f 91       	pop	r22
    65ac:	5f 91       	pop	r21
    65ae:	4f 91       	pop	r20
    65b0:	3f 91       	pop	r19
    65b2:	2f 91       	pop	r18
    65b4:	0f 90       	pop	r0
    65b6:	0f be       	out	0x3f, r0	; 63
    65b8:	0f 90       	pop	r0
    65ba:	1f 90       	pop	r1
    65bc:	18 95       	reti

000065be <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    65be:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    65c0:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    65c4:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    65c8:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    65ca:	e1 ec       	ldi	r30, 0xC1	; 193
    65cc:	f0 e0       	ldi	r31, 0x00	; 0
    65ce:	80 81       	ld	r24, Z
    65d0:	8f 7e       	andi	r24, 0xEF	; 239
    65d2:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    65d4:	80 81       	ld	r24, Z
    65d6:	8f 77       	andi	r24, 0x7F	; 127
    65d8:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    65da:	8f e0       	ldi	r24, 0x0F	; 15
    65dc:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    65de:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    65e0:	78 94       	sei
    65e2:	08 95       	ret

000065e4 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    65e4:	f8 94       	cli
	
	switch (Config.RxMode)
    65e6:	80 91 ea 05 	lds	r24, 0x05EA
    65ea:	81 30       	cpi	r24, 0x01	; 1
    65ec:	c9 f0       	breq	.+50     	; 0x6620 <init_int+0x3c>
    65ee:	44 f4       	brge	.+16     	; 0x6600 <init_int+0x1c>
    65f0:	81 11       	cpse	r24, r1
    65f2:	2c c0       	rjmp	.+88     	; 0x664c <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    65f4:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    65f8:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    65fc:	84 e0       	ldi	r24, 0x04	; 4
    65fe:	1b c0       	rjmp	.+54     	; 0x6636 <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    6600:	85 30       	cpi	r24, 0x05	; 5
    6602:	24 f5       	brge	.+72     	; 0x664c <init_int+0x68>

		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    6604:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    6608:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    660c:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    660e:	80 91 c1 00 	lds	r24, 0x00C1
    6612:	80 68       	ori	r24, 0x80	; 128
    6614:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    6618:	80 91 c1 00 	lds	r24, 0x00C1
    661c:	80 61       	ori	r24, 0x10	; 16
    661e:	14 c0       	rjmp	.+40     	; 0x6648 <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    6620:	80 91 6c 00 	lds	r24, 0x006C
    6624:	81 60       	ori	r24, 0x01	; 1
    6626:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    662a:	80 91 73 00 	lds	r24, 0x0073
    662e:	81 60       	ori	r24, 0x01	; 1
    6630:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    6634:	87 e0       	ldi	r24, 0x07	; 7
    6636:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    6638:	80 91 c1 00 	lds	r24, 0x00C1
    663c:	8f 77       	andi	r24, 0x7F	; 127
    663e:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    6642:	80 91 c1 00 	lds	r24, 0x00C1
    6646:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    6648:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    664c:	8f e0       	ldi	r24, 0x0F	; 15
    664e:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    6650:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    6652:	78 94       	sei
    6654:	08 95       	ret

00006656 <print_menu_frame>:
//************************************************************
// Print basic menu frame
// style = menu style (0 = main, 1 = sub, 2 = alt)
//************************************************************
void print_menu_frame(uint8_t style)
{
    6656:	cf 93       	push	r28
    6658:	c8 2f       	mov	r28, r24
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    665a:	2b e3       	ldi	r18, 0x3B	; 59
    665c:	30 e0       	ldi	r19, 0x00	; 0
    665e:	46 e2       	ldi	r20, 0x26	; 38
    6660:	50 e0       	ldi	r21, 0x00	; 0
    6662:	69 e0       	ldi	r22, 0x09	; 9
    6664:	71 e0       	ldi	r23, 0x01	; 1
    6666:	8a e0       	ldi	r24, 0x0A	; 10
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    666e:	2b e3       	ldi	r18, 0x3B	; 59
    6670:	30 e0       	ldi	r19, 0x00	; 0
    6672:	40 e5       	ldi	r20, 0x50	; 80
    6674:	50 e0       	ldi	r21, 0x00	; 0
    6676:	69 e0       	ldi	r22, 0x09	; 9
    6678:	71 e0       	ldi	r23, 0x01	; 1
    667a:	89 e0       	ldi	r24, 0x09	; 9
    667c:	90 e0       	ldi	r25, 0x00	; 0
    667e:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

	switch (style)
    6682:	c1 30       	cpi	r28, 0x01	; 1
    6684:	11 f1       	breq	.+68     	; 0x66ca <print_menu_frame+0x74>
    6686:	70 f0       	brcs	.+28     	; 0x66a4 <print_menu_frame+0x4e>
    6688:	c3 30       	cpi	r28, 0x03	; 3
    668a:	91 f1       	breq	.+100    	; 0x66f0 <print_menu_frame+0x9a>
    668c:	c0 3a       	cpi	r28, 0xA0	; 160
    668e:	09 f0       	breq	.+2      	; 0x6692 <print_menu_frame+0x3c>
    6690:	43 c0       	rjmp	.+134    	; 0x6718 <print_menu_frame+0xc2>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    6692:	26 e3       	ldi	r18, 0x36	; 54
    6694:	30 e0       	ldi	r19, 0x00	; 0
    6696:	40 e0       	ldi	r20, 0x00	; 0
    6698:	50 e0       	ldi	r21, 0x00	; 0
    669a:	61 e2       	ldi	r22, 0x21	; 33
    669c:	7a e0       	ldi	r23, 0x0A	; 10
    669e:	88 e1       	ldi	r24, 0x18	; 24
    66a0:	91 e0       	ldi	r25, 0x01	; 1
    66a2:	1b c0       	rjmp	.+54     	; 0x66da <print_menu_frame+0x84>

	switch (style)
	{
		case BASIC:
			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    66a4:	29 e3       	ldi	r18, 0x39	; 57
    66a6:	30 e0       	ldi	r19, 0x00	; 0
    66a8:	40 e0       	ldi	r20, 0x00	; 0
    66aa:	50 e0       	ldi	r21, 0x00	; 0
    66ac:	69 e0       	ldi	r22, 0x09	; 9
    66ae:	71 e0       	ldi	r23, 0x01	; 1
    66b0:	8c e0       	ldi	r24, 0x0C	; 12
    66b2:	90 e0       	ldi	r25, 0x00	; 0
    66b4:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    66b8:	29 e3       	ldi	r18, 0x39	; 57
    66ba:	30 e0       	ldi	r19, 0x00	; 0
    66bc:	48 e7       	ldi	r20, 0x78	; 120
    66be:	50 e0       	ldi	r21, 0x00	; 0
    66c0:	69 e0       	ldi	r22, 0x09	; 9
    66c2:	71 e0       	ldi	r23, 0x01	; 1
    66c4:	8b e0       	ldi	r24, 0x0B	; 11
    66c6:	90 e0       	ldi	r25, 0x00	; 0
    66c8:	25 c0       	rjmp	.+74     	; 0x6714 <print_menu_frame+0xbe>
			break;
			
		case EDIT:
			// For editing items
			LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Def.
    66ca:	26 e3       	ldi	r18, 0x36	; 54
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	40 e0       	ldi	r20, 0x00	; 0
    66d0:	50 e0       	ldi	r21, 0x00	; 0
    66d2:	61 e2       	ldi	r22, 0x21	; 33
    66d4:	7a e0       	ldi	r23, 0x0A	; 10
    66d6:	80 e1       	ldi	r24, 0x10	; 16
    66d8:	90 e0       	ldi	r25, 0x00	; 0
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    66da:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    66de:	26 e3       	ldi	r18, 0x36	; 54
    66e0:	30 e0       	ldi	r19, 0x00	; 0
    66e2:	47 e6       	ldi	r20, 0x67	; 103
    66e4:	50 e0       	ldi	r21, 0x00	; 0
    66e6:	61 e2       	ldi	r22, 0x21	; 33
    66e8:	7a e0       	ldi	r23, 0x0A	; 10
    66ea:	81 e1       	ldi	r24, 0x11	; 17
    66ec:	90 e0       	ldi	r25, 0x00	; 0
    66ee:	12 c0       	rjmp	.+36     	; 0x6714 <print_menu_frame+0xbe>
			break;
			
		case LOG:
			// Clear or exit
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    66f0:	29 e3       	ldi	r18, 0x39	; 57
    66f2:	30 e0       	ldi	r19, 0x00	; 0
    66f4:	40 e0       	ldi	r20, 0x00	; 0
    66f6:	50 e0       	ldi	r21, 0x00	; 0
    66f8:	69 e0       	ldi	r22, 0x09	; 9
    66fa:	71 e0       	ldi	r23, 0x01	; 1
    66fc:	8c e0       	ldi	r24, 0x0C	; 12
    66fe:	90 e0       	ldi	r25, 0x00	; 0
    6700:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
			LCD_Display_Text(291, (const unsigned char*)Verdana8, 100, 54);	// Clear
    6704:	26 e3       	ldi	r18, 0x36	; 54
    6706:	30 e0       	ldi	r19, 0x00	; 0
    6708:	44 e6       	ldi	r20, 0x64	; 100
    670a:	50 e0       	ldi	r21, 0x00	; 0
    670c:	61 e2       	ldi	r22, 0x21	; 33
    670e:	7a e0       	ldi	r23, 0x0A	; 10
    6710:	83 e2       	ldi	r24, 0x23	; 35
    6712:	91 e0       	ldi	r25, 0x01	; 1
    6714:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    6718:	80 e0       	ldi	r24, 0x00	; 0
    671a:	91 e0       	ldi	r25, 0x01	; 1
}
    671c:	cf 91       	pop	r28
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    671e:	0c 94 4b 24 	jmp	0x4896	; 0x4896 <write_buffer>

00006722 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    6722:	cf 93       	push	r28
    6724:	df 93       	push	r29
    6726:	cd b7       	in	r28, 0x3d	; 61
    6728:	de b7       	in	r29, 0x3e	; 62
    672a:	2a 97       	sbiw	r28, 0x0a	; 10
    672c:	0f b6       	in	r0, 0x3f	; 63
    672e:	f8 94       	cli
    6730:	de bf       	out	0x3e, r29	; 62
    6732:	0f be       	out	0x3f, r0	; 63
    6734:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    6736:	25 e0       	ldi	r18, 0x05	; 5
    6738:	62 9f       	mul	r22, r18
    673a:	80 0d       	add	r24, r0
    673c:	91 1d       	adc	r25, r1
    673e:	11 24       	eor	r1, r1
    6740:	bc 01       	movw	r22, r24
    6742:	45 e0       	ldi	r20, 0x05	; 5
    6744:	50 e0       	ldi	r21, 0x00	; 0
    6746:	ce 01       	movw	r24, r28
    6748:	06 96       	adiw	r24, 0x06	; 6
    674a:	0e 94 9e 4e 	call	0x9d3c	; 0x9d3c <memcpy_P>
	return (range);
    674e:	85 e0       	ldi	r24, 0x05	; 5
    6750:	fe 01       	movw	r30, r28
    6752:	36 96       	adiw	r30, 0x06	; 6
    6754:	de 01       	movw	r26, r28
    6756:	11 96       	adiw	r26, 0x01	; 1
    6758:	01 90       	ld	r0, Z+
    675a:	0d 92       	st	X+, r0
    675c:	8a 95       	dec	r24
    675e:	e1 f7       	brne	.-8      	; 0x6758 <get_menu_range+0x36>
    6760:	29 81       	ldd	r18, Y+1	; 0x01
    6762:	3a 81       	ldd	r19, Y+2	; 0x02
    6764:	4b 81       	ldd	r20, Y+3	; 0x03
    6766:	5c 81       	ldd	r21, Y+4	; 0x04
    6768:	6d 81       	ldd	r22, Y+5	; 0x05
}
    676a:	70 e0       	ldi	r23, 0x00	; 0
    676c:	80 e0       	ldi	r24, 0x00	; 0
    676e:	90 e0       	ldi	r25, 0x00	; 0
    6770:	2a 96       	adiw	r28, 0x0a	; 10
    6772:	0f b6       	in	r0, 0x3f	; 63
    6774:	f8 94       	cli
    6776:	de bf       	out	0x3e, r29	; 62
    6778:	0f be       	out	0x3f, r0	; 63
    677a:	cd bf       	out	0x3d, r28	; 61
    677c:	df 91       	pop	r29
    677e:	cf 91       	pop	r28
    6780:	08 95       	ret

00006782 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    6782:	0f 93       	push	r16
    6784:	1f 93       	push	r17
    6786:	cf 93       	push	r28
    6788:	df 93       	push	r29
    678a:	fa 01       	movw	r30, r20
    678c:	10 e0       	ldi	r17, 0x00	; 0
    678e:	c2 2f       	mov	r28, r18
    6790:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    6792:	66 23       	and	r22, r22
    6794:	19 f0       	breq	.+6      	; 0x679c <print_menu_text+0x1a>
    6796:	62 50       	subi	r22, 0x02	; 2
    6798:	62 30       	cpi	r22, 0x02	; 2
    679a:	78 f4       	brcc	.+30     	; 0x67ba <print_menu_text+0x38>
    679c:	4a e0       	ldi	r20, 0x0A	; 10
    679e:	6a e6       	ldi	r22, 0x6A	; 106
    67a0:	75 e0       	ldi	r23, 0x05	; 5
    67a2:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    67a6:	98 01       	movw	r18, r16
    67a8:	ae 01       	movw	r20, r28
    67aa:	61 e2       	ldi	r22, 0x21	; 33
    67ac:	7a e0       	ldi	r23, 0x0A	; 10
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    67ae:	df 91       	pop	r29
    67b0:	cf 91       	pop	r28
    67b2:	1f 91       	pop	r17
    67b4:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    67b6:	0c 94 32 44 	jmp	0x8864	; 0x8864 <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    67ba:	98 01       	movw	r18, r16
    67bc:	ae 01       	movw	r20, r28
    67be:	61 e2       	ldi	r22, 0x21	; 33
    67c0:	7a e0       	ldi	r23, 0x0A	; 10
    67c2:	cf 01       	movw	r24, r30
	}
}
    67c4:	df 91       	pop	r29
    67c6:	cf 91       	pop	r28
    67c8:	1f 91       	pop	r17
    67ca:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    67cc:	0c 94 2a 26 	jmp	0x4c54	; 0x4c54 <LCD_Display_Text>

000067d0 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    67d0:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    67d2:	93 b1       	in	r25, 0x03	; 3
    67d4:	90 7f       	andi	r25, 0xF0	; 240
    67d6:	90 93 10 08 	sts	0x0810, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    67da:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    67dc:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    67de:	90 91 10 08 	lds	r25, 0x0810
    67e2:	90 3f       	cpi	r25, 0xF0	; 240
    67e4:	c9 f4       	brne	.+50     	; 0x6818 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    67e6:	83 b1       	in	r24, 0x03	; 3
    67e8:	80 7f       	andi	r24, 0xF0	; 240
    67ea:	e7 ea       	ldi	r30, 0xA7	; 167
    67ec:	f1 e6       	ldi	r31, 0x61	; 97
    67ee:	31 97       	sbiw	r30, 0x01	; 1
    67f0:	f1 f7       	brne	.-4      	; 0x67ee <poll_buttons+0x1e>
    67f2:	00 c0       	rjmp	.+0      	; 0x67f4 <poll_buttons+0x24>
    67f4:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    67f6:	23 b1       	in	r18, 0x03	; 3
    67f8:	48 2f       	mov	r20, r24
    67fa:	50 e0       	ldi	r21, 0x00	; 0
    67fc:	20 7f       	andi	r18, 0xF0	; 240
    67fe:	30 e0       	ldi	r19, 0x00	; 0
    6800:	42 17       	cp	r20, r18
    6802:	53 07       	cpc	r21, r19
    6804:	19 f4       	brne	.+6      	; 0x680c <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    6806:	80 93 10 08 	sts	0x0810, r24
    680a:	01 c0       	rjmp	.+2      	; 0x680e <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    680c:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    680e:	10 92 30 05 	sts	0x0530, r1
		button_multiplier = 1;
    6812:	70 93 11 08 	sts	0x0811, r23
    6816:	e3 cf       	rjmp	.-58     	; 0x67de <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    6818:	66 23       	and	r22, r22
    681a:	71 f0       	breq	.+28     	; 0x6838 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    681c:	90 91 30 05 	lds	r25, 0x0530
    6820:	9f 5f       	subi	r25, 0xFF	; 255
    6822:	90 93 30 05 	sts	0x0530, r25
		if (button_count >= 10)
    6826:	9a 30       	cpi	r25, 0x0A	; 10
    6828:	38 f0       	brcs	.+14     	; 0x6838 <poll_buttons+0x68>
		{
			button_count = 0;
    682a:	10 92 30 05 	sts	0x0530, r1
			button_multiplier ++;
    682e:	90 91 11 08 	lds	r25, 0x0811
    6832:	9f 5f       	subi	r25, 0xFF	; 255
    6834:	90 93 11 08 	sts	0x0811, r25
		}
	}

	return buttons;
}
    6838:	08 95       	ret

0000683a <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    683a:	2f 92       	push	r2
    683c:	3f 92       	push	r3
    683e:	4f 92       	push	r4
    6840:	5f 92       	push	r5
    6842:	6f 92       	push	r6
    6844:	7f 92       	push	r7
    6846:	8f 92       	push	r8
    6848:	9f 92       	push	r9
    684a:	af 92       	push	r10
    684c:	bf 92       	push	r11
    684e:	cf 92       	push	r12
    6850:	df 92       	push	r13
    6852:	ef 92       	push	r14
    6854:	ff 92       	push	r15
    6856:	0f 93       	push	r16
    6858:	1f 93       	push	r17
    685a:	cf 93       	push	r28
    685c:	df 93       	push	r29
    685e:	cd b7       	in	r28, 0x3d	; 61
    6860:	de b7       	in	r29, 0x3e	; 62
    6862:	67 97       	sbiw	r28, 0x17	; 23
    6864:	0f b6       	in	r0, 0x3f	; 63
    6866:	f8 94       	cli
    6868:	de bf       	out	0x3e, r29	; 62
    686a:	0f be       	out	0x3f, r0	; 63
    686c:	cd bf       	out	0x3d, r28	; 61
    686e:	3c 01       	movw	r6, r24
    6870:	79 8b       	std	Y+17, r23	; 0x11
    6872:	68 8b       	std	Y+16, r22	; 0x10
    6874:	4a 87       	std	Y+10, r20	; 0x0a
    6876:	ed 82       	std	Y+5, r14	; 0x05
    6878:	fe 82       	std	Y+6, r15	; 0x06
    687a:	0f 83       	std	Y+7, r16	; 0x07
    687c:	18 87       	std	Y+8, r17	; 0x08
    687e:	29 87       	std	Y+9, r18	; 0x09
    6880:	bd 8a       	std	Y+21, r11	; 0x15
    6882:	ac 8a       	std	Y+20, r10	; 0x14
    6884:	4e 2d       	mov	r20, r14
    6886:	3f 2d       	mov	r19, r15
    6888:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    688a:	fb 01       	movw	r30, r22
    688c:	20 81       	ld	r18, Z
    688e:	a2 2e       	mov	r10, r18
    6890:	bb 24       	eor	r11, r11
    6892:	a7 fc       	sbrc	r10, 7
    6894:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    6896:	12 30       	cpi	r17, 0x02	; 2
    6898:	29 f4       	brne	.+10     	; 0x68a4 <do_menu_item+0x6a>
	{
		value = value * mult;
    689a:	5a 85       	ldd	r21, Y+10	; 0x0a
    689c:	25 03       	mulsu	r18, r21
    689e:	50 01       	movw	r10, r0
    68a0:	11 24       	eor	r1, r1
    68a2:	02 c0       	rjmp	.+4      	; 0x68a8 <do_menu_item+0x6e>
	}
	else mult = 1;
    68a4:	81 e0       	ldi	r24, 0x01	; 1
    68a6:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    68a8:	20 ef       	ldi	r18, 0xF0	; 240
    68aa:	20 93 10 08 	sts	0x0810, r18
				value = (range.default_value * mult);				
			}
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    68ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    68b0:	ef 2f       	mov	r30, r31
    68b2:	f0 e0       	ldi	r31, 0x00	; 0
    68b4:	fb 8b       	std	Y+19, r31	; 0x13
    68b6:	ea 8b       	std	Y+18, r30	; 0x12
    68b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    68ba:	42 03       	mulsu	r20, r18
    68bc:	10 01       	movw	r2, r0
    68be:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    68c0:	32 03       	mulsu	r19, r18
    68c2:	c0 01       	movw	r24, r0
    68c4:	11 24       	eor	r1, r1
    68c6:	9f 87       	std	Y+15, r25	; 0x0f
    68c8:	8e 87       	std	Y+14, r24	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    68ca:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    68cc:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    68ce:	41 2c       	mov	r4, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    68d0:	f1 2c       	mov	r15, r1
		{
			button_inc = 5; // For servos
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    68d2:	01 e0       	ldi	r16, 0x01	; 1
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    68d4:	f3 01       	movw	r30, r6
    68d6:	ee 0f       	add	r30, r30
    68d8:	ff 1f       	adc	r31, r31
    68da:	e8 5f       	subi	r30, 0xF8	; 248
    68dc:	f1 4f       	sbci	r31, 0xF1	; 241
    68de:	fc 87       	std	Y+12, r31	; 0x0c
    68e0:	eb 87       	std	Y+11, r30	; 0x0b
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    68e2:	2c 2d       	mov	r18, r12
    68e4:	33 27       	eor	r19, r19
    68e6:	27 fd       	sbrc	r18, 7
    68e8:	30 95       	com	r19
    68ea:	3f 8b       	std	Y+23, r19	; 0x17
    68ec:	2e 8b       	std	Y+22, r18	; 0x16
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    68ee:	be ef       	ldi	r27, 0xFE	; 254
    68f0:	9b 2e       	mov	r9, r27
    68f2:	91 0e       	add	r9, r17

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    68f4:	86 e2       	ldi	r24, 0x26	; 38
    68f6:	ec a5       	ldd	r30, Y+44	; 0x2c
    68f8:	fd a5       	ldd	r31, Y+45	; 0x2d
    68fa:	8e 9f       	mul	r24, r30
    68fc:	60 01       	movw	r12, r0
    68fe:	8f 9f       	mul	r24, r31
    6900:	d0 0c       	add	r13, r0
    6902:	11 24       	eor	r1, r1
    6904:	96 01       	movw	r18, r12
    6906:	29 5a       	subi	r18, 0xA9	; 169
    6908:	39 4f       	sbci	r19, 0xF9	; 249
    690a:	69 01       	movw	r12, r18
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
    690c:	80 91 10 08 	lds	r24, 0x0810
    6910:	28 2f       	mov	r18, r24
    6912:	2f 7b       	andi	r18, 0xBF	; 191
    6914:	20 3a       	cpi	r18, 0xA0	; 160
    6916:	09 f4       	brne	.+2      	; 0x691a <do_menu_item+0xe0>
    6918:	36 c1       	rjmp	.+620    	; 0x6b86 <do_menu_item+0x34c>
		// Increment loop count so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    691a:	88 20       	and	r8, r8
    691c:	11 f0       	breq	.+4      	; 0x6922 <do_menu_item+0xe8>
		{
			button_inc = 5; // For servos
    691e:	25 e0       	ldi	r18, 0x05	; 5
    6920:	01 c0       	rjmp	.+2      	; 0x6924 <do_menu_item+0xea>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    6922:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    6924:	80 3f       	cpi	r24, 0xF0	; 240
    6926:	19 f0       	breq	.+6      	; 0x692e <do_menu_item+0xf4>
		{
			button_update++;
    6928:	43 94       	inc	r4

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    692a:	24 15       	cp	r18, r4
    692c:	10 f4       	brcc	.+4      	; 0x6932 <do_menu_item+0xf8>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    692e:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    6930:	41 2c       	mov	r4, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    6932:	88 20       	and	r8, r8
    6934:	49 f0       	breq	.+18     	; 0x6948 <do_menu_item+0x10e>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
	{
		// Increment loop count so that we can time various things
		display_update++;
    6936:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    6938:	37 e0       	ldi	r19, 0x07	; 7
    693a:	3f 15       	cp	r19, r15
    693c:	10 f4       	brcc	.+4      	; 0x6942 <do_menu_item+0x108>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    693e:	80 3f       	cpi	r24, 0xF0	; 240
    6940:	19 f4       	brne	.+6      	; 0x6948 <do_menu_item+0x10e>
    6942:	99 23       	and	r25, r25
    6944:	09 f4       	brne	.+2      	; 0x6948 <do_menu_item+0x10e>
    6946:	85 c0       	rjmp	.+266    	; 0x6a52 <do_menu_item+0x218>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    6948:	80 e0       	ldi	r24, 0x00	; 0
    694a:	91 e0       	ldi	r25, 0x01	; 1
    694c:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>

			// Print warning
			if (range.style == 4)
    6950:	14 30       	cpi	r17, 0x04	; 4
    6952:	a9 f4       	brne	.+42     	; 0x697e <do_menu_item+0x144>
			{
				LCD_Display_Text(281,(const unsigned char*)Verdana8,0,0);	// Warning
    6954:	20 e0       	ldi	r18, 0x00	; 0
    6956:	30 e0       	ldi	r19, 0x00	; 0
    6958:	40 e0       	ldi	r20, 0x00	; 0
    695a:	50 e0       	ldi	r21, 0x00	; 0
    695c:	61 e2       	ldi	r22, 0x21	; 33
    695e:	7a e0       	ldi	r23, 0x0A	; 10
    6960:	89 e1       	ldi	r24, 0x19	; 25
    6962:	91 e0       	ldi	r25, 0x01	; 1
    6964:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
    6968:	2c e0       	ldi	r18, 0x0C	; 12
    696a:	30 e0       	ldi	r19, 0x00	; 0
    696c:	49 e1       	ldi	r20, 0x19	; 25
    696e:	50 e0       	ldi	r21, 0x00	; 0
    6970:	61 e2       	ldi	r22, 0x21	; 33
    6972:	7a e0       	ldi	r23, 0x0A	; 10
    6974:	8a e1       	ldi	r24, 0x1A	; 26
    6976:	91 e0       	ldi	r25, 0x01	; 1
    6978:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
    697c:	39 c0       	rjmp	.+114    	; 0x69f0 <do_menu_item+0x1b6>
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    697e:	eb 85       	ldd	r30, Y+11	; 0x0b
    6980:	fc 85       	ldd	r31, Y+12	; 0x0c
    6982:	85 91       	lpm	r24, Z+
    6984:	94 91       	lpm	r25, Z
    6986:	20 e0       	ldi	r18, 0x00	; 0
    6988:	30 e0       	ldi	r19, 0x00	; 0
    698a:	40 e0       	ldi	r20, 0x00	; 0
    698c:	50 e0       	ldi	r21, 0x00	; 0
    698e:	63 e7       	ldi	r22, 0x73	; 115
    6990:	71 e0       	ldi	r23, 0x01	; 1
    6992:	0e 94 33 26 	call	0x4c66	; 0x4c66 <gLCDprint_Menu_P>
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    6996:	11 23       	and	r17, r17
    6998:	19 f0       	breq	.+6      	; 0x69a0 <do_menu_item+0x166>
    699a:	51 e0       	ldi	r21, 0x01	; 1
    699c:	59 15       	cp	r21, r9
    699e:	40 f1       	brcs	.+80     	; 0x69f0 <do_menu_item+0x1b6>
    69a0:	4a e0       	ldi	r20, 0x0A	; 10
    69a2:	6a e6       	ldi	r22, 0x6A	; 106
    69a4:	75 e0       	ldi	r23, 0x05	; 5
    69a6:	c5 01       	movw	r24, r10
    69a8:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    69ac:	ae 01       	movw	r20, r28
    69ae:	4f 5f       	subi	r20, 0xFF	; 255
    69b0:	5f 4f       	sbci	r21, 0xFF	; 255
    69b2:	63 e7       	ldi	r22, 0x73	; 115
    69b4:	71 e0       	ldi	r23, 0x01	; 1
    69b6:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    69ba:	89 81       	ldd	r24, Y+1	; 0x01
    69bc:	9a 81       	ldd	r25, Y+2	; 0x02
    69be:	70 e8       	ldi	r23, 0x80	; 128
    69c0:	e7 2e       	mov	r14, r23
    69c2:	f1 2c       	mov	r15, r1
    69c4:	e8 1a       	sub	r14, r24
    69c6:	f9 0a       	sbc	r15, r25
    69c8:	f6 94       	lsr	r15
    69ca:	e7 94       	ror	r14
    69cc:	8e 89       	ldd	r24, Y+22	; 0x16
    69ce:	9f 89       	ldd	r25, Y+23	; 0x17
    69d0:	e8 0e       	add	r14, r24
    69d2:	f9 1e       	adc	r15, r25
    69d4:	4a e0       	ldi	r20, 0x0A	; 10
    69d6:	6a e6       	ldi	r22, 0x6A	; 106
    69d8:	75 e0       	ldi	r23, 0x05	; 5
    69da:	c5 01       	movw	r24, r10
    69dc:	0e 94 b9 4e 	call	0x9d72	; 0x9d72 <__itoa_ncheck>
    69e0:	29 e1       	ldi	r18, 0x19	; 25
    69e2:	30 e0       	ldi	r19, 0x00	; 0
    69e4:	a7 01       	movw	r20, r14
    69e6:	63 e7       	ldi	r22, 0x73	; 115
    69e8:	71 e0       	ldi	r23, 0x01	; 1
    69ea:	0e 94 32 44 	call	0x8864	; 0x8864 <mugui_lcd_puts>
    69ee:	29 c0       	rjmp	.+82     	; 0x6a42 <do_menu_item+0x208>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    69f0:	ec 88       	ldd	r14, Y+20	; 0x14
    69f2:	fd 88       	ldd	r15, Y+21	; 0x15
    69f4:	ea 0c       	add	r14, r10
    69f6:	fb 1c       	adc	r15, r11
    69f8:	f7 01       	movw	r30, r14
    69fa:	ee 0f       	add	r30, r30
    69fc:	ff 1f       	adc	r31, r31
    69fe:	e8 5f       	subi	r30, 0xF8	; 248
    6a00:	f1 4f       	sbci	r31, 0xF1	; 241
    6a02:	85 91       	lpm	r24, Z+
    6a04:	94 91       	lpm	r25, Z
    6a06:	0e 94 31 43 	call	0x8662	; 0x8662 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    6a0a:	ae 01       	movw	r20, r28
    6a0c:	4f 5f       	subi	r20, 0xFF	; 255
    6a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    6a10:	63 e7       	ldi	r22, 0x73	; 115
    6a12:	71 e0       	ldi	r23, 0x01	; 1
    6a14:	8a e6       	ldi	r24, 0x6A	; 106
    6a16:	95 e0       	ldi	r25, 0x05	; 5
    6a18:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    6a1c:	89 81       	ldd	r24, Y+1	; 0x01
    6a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a20:	40 e8       	ldi	r20, 0x80	; 128
    6a22:	50 e0       	ldi	r21, 0x00	; 0
    6a24:	48 1b       	sub	r20, r24
    6a26:	59 0b       	sbc	r21, r25
    6a28:	56 95       	lsr	r21
    6a2a:	47 95       	ror	r20
    6a2c:	29 e1       	ldi	r18, 0x19	; 25
    6a2e:	30 e0       	ldi	r19, 0x00	; 0
    6a30:	63 e7       	ldi	r22, 0x73	; 115
    6a32:	71 e0       	ldi	r23, 0x01	; 1
    6a34:	c7 01       	movw	r24, r14
    6a36:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
			}

			// Print appropriate menu frame
			// Save/Abort screen
			if (range.style == 4)
    6a3a:	14 30       	cpi	r17, 0x04	; 4
    6a3c:	11 f4       	brne	.+4      	; 0x6a42 <do_menu_item+0x208>
			{
				// Print bottom markers
				print_menu_frame(ABORT);				
    6a3e:	80 ea       	ldi	r24, 0xA0	; 160
    6a40:	01 c0       	rjmp	.+2      	; 0x6a44 <do_menu_item+0x20a>
			}
			// Save/default screen
			else
			{
				// Print bottom markers
				print_menu_frame(EDIT);				
    6a42:	81 e0       	ldi	r24, 0x01	; 1
    6a44:	0e 94 2b 33 	call	0x6656	; 0x6656 <print_menu_frame>
			}

			// Write from buffer
			write_buffer(buffer);
    6a48:	80 e0       	ldi	r24, 0x00	; 0
    6a4a:	91 e0       	ldi	r25, 0x01	; 1
    6a4c:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    6a50:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    6a52:	12 30       	cpi	r17, 0x02	; 2
    6a54:	09 f1       	breq	.+66     	; 0x6a98 <do_menu_item+0x25e>
    6a56:	60 f4       	brcc	.+24     	; 0x6a70 <do_menu_item+0x236>
    6a58:	11 23       	and	r17, r17
    6a5a:	b1 f0       	breq	.+44     	; 0x6a88 <do_menu_item+0x24e>
    6a5c:	11 30       	cpi	r17, 0x01	; 1
    6a5e:	69 f5       	brne	.+90     	; 0x6aba <do_menu_item+0x280>
    6a60:	2f e3       	ldi	r18, 0x3F	; 63
    6a62:	32 e4       	ldi	r19, 0x42	; 66
    6a64:	5f e0       	ldi	r21, 0x0F	; 15
    6a66:	21 50       	subi	r18, 0x01	; 1
    6a68:	30 40       	sbci	r19, 0x00	; 0
    6a6a:	50 40       	sbci	r21, 0x00	; 0
    6a6c:	e1 f7       	brne	.-8      	; 0x6a66 <do_menu_item+0x22c>
    6a6e:	23 c0       	rjmp	.+70     	; 0x6ab6 <do_menu_item+0x27c>
    6a70:	13 30       	cpi	r17, 0x03	; 3
    6a72:	d1 f0       	breq	.+52     	; 0x6aa8 <do_menu_item+0x26e>
    6a74:	14 30       	cpi	r17, 0x04	; 4
    6a76:	09 f5       	brne	.+66     	; 0x6aba <do_menu_item+0x280>
    6a78:	5f e3       	ldi	r21, 0x3F	; 63
    6a7a:	82 e4       	ldi	r24, 0x42	; 66
    6a7c:	9f e0       	ldi	r25, 0x0F	; 15
    6a7e:	51 50       	subi	r21, 0x01	; 1
    6a80:	80 40       	sbci	r24, 0x00	; 0
    6a82:	90 40       	sbci	r25, 0x00	; 0
    6a84:	e1 f7       	brne	.-8      	; 0x6a7e <do_menu_item+0x244>
    6a86:	17 c0       	rjmp	.+46     	; 0x6ab6 <do_menu_item+0x27c>
    6a88:	9f e7       	ldi	r25, 0x7F	; 127
    6a8a:	ea e1       	ldi	r30, 0x1A	; 26
    6a8c:	f6 e0       	ldi	r31, 0x06	; 6
    6a8e:	91 50       	subi	r25, 0x01	; 1
    6a90:	e0 40       	sbci	r30, 0x00	; 0
    6a92:	f0 40       	sbci	r31, 0x00	; 0
    6a94:	e1 f7       	brne	.-8      	; 0x6a8e <do_menu_item+0x254>
    6a96:	0f c0       	rjmp	.+30     	; 0x6ab6 <do_menu_item+0x27c>
    6a98:	8f e7       	ldi	r24, 0x7F	; 127
    6a9a:	9a e1       	ldi	r25, 0x1A	; 26
    6a9c:	e6 e0       	ldi	r30, 0x06	; 6
    6a9e:	81 50       	subi	r24, 0x01	; 1
    6aa0:	90 40       	sbci	r25, 0x00	; 0
    6aa2:	e0 40       	sbci	r30, 0x00	; 0
    6aa4:	e1 f7       	brne	.-8      	; 0x6a9e <do_menu_item+0x264>
    6aa6:	07 c0       	rjmp	.+14     	; 0x6ab6 <do_menu_item+0x27c>
    6aa8:	ff e7       	ldi	r31, 0x7F	; 127
    6aaa:	28 e3       	ldi	r18, 0x38	; 56
    6aac:	31 e0       	ldi	r19, 0x01	; 1
    6aae:	f1 50       	subi	r31, 0x01	; 1
    6ab0:	20 40       	sbci	r18, 0x00	; 0
    6ab2:	30 40       	sbci	r19, 0x00	; 0
    6ab4:	e1 f7       	brne	.-8      	; 0x6aae <do_menu_item+0x274>
    6ab6:	00 c0       	rjmp	.+0      	; 0x6ab8 <do_menu_item+0x27e>
    6ab8:	00 00       	nop
		}

		// Poll buttons when idle.
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    6aba:	88 20       	and	r8, r8
    6abc:	39 f0       	breq	.+14     	; 0x6acc <do_menu_item+0x292>
		{
			button = (PINB & 0xf0);	
    6abe:	83 b1       	in	r24, 0x03	; 3
    6ac0:	80 7f       	andi	r24, 0xF0	; 240
    6ac2:	80 93 10 08 	sts	0x0810, r24
			button_multiplier = 1;
    6ac6:	00 93 11 08 	sts	0x0811, r16
    6aca:	03 c0       	rjmp	.+6      	; 0x6ad2 <do_menu_item+0x298>
		}
		else
		{
			poll_buttons(true);
    6acc:	81 e0       	ldi	r24, 0x01	; 1
    6ace:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    6ad2:	80 91 10 08 	lds	r24, 0x0810
    6ad6:	80 3f       	cpi	r24, 0xF0	; 240
    6ad8:	69 f1       	breq	.+90     	; 0x6b34 <do_menu_item+0x2fa>
    6ada:	88 20       	and	r8, r8
    6adc:	c9 f0       	breq	.+50     	; 0x6b10 <do_menu_item+0x2d6>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6ade:	80 3d       	cpi	r24, 0xD0	; 208
    6ae0:	51 f4       	brne	.+20     	; 0x6af6 <do_menu_item+0x2bc>
		{
			if (button_lock == false)
    6ae2:	51 10       	cpse	r5, r1
    6ae4:	74 c0       	rjmp	.+232    	; 0x6bce <do_menu_item+0x394>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    6ae6:	80 91 11 08 	lds	r24, 0x0811
    6aea:	ed 85       	ldd	r30, Y+13	; 0x0d
    6aec:	e8 9f       	mul	r30, r24
    6aee:	a0 18       	sub	r10, r0
    6af0:	b1 08       	sbc	r11, r1
    6af2:	11 24       	eor	r1, r1
    6af4:	0b c0       	rjmp	.+22     	; 0x6b0c <do_menu_item+0x2d2>
				button_update = 0;
			}
		}

		if (button == UP)
    6af6:	80 3b       	cpi	r24, 0xB0	; 176
    6af8:	81 f4       	brne	.+32     	; 0x6b1a <do_menu_item+0x2e0>
		{
			if (button_lock == false)
    6afa:	51 10       	cpse	r5, r1
    6afc:	68 c0       	rjmp	.+208    	; 0x6bce <do_menu_item+0x394>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    6afe:	80 91 11 08 	lds	r24, 0x0811
    6b02:	fd 85       	ldd	r31, Y+13	; 0x0d
    6b04:	f8 9f       	mul	r31, r24
    6b06:	a0 0c       	add	r10, r0
    6b08:	b1 1c       	adc	r11, r1
    6b0a:	11 24       	eor	r1, r1
				button_update = 0;
    6b0c:	41 2c       	mov	r4, r1
    6b0e:	5f c0       	rjmp	.+190    	; 0x6bce <do_menu_item+0x394>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6b10:	80 3d       	cpi	r24, 0xD0	; 208
    6b12:	49 f3       	breq	.-46     	; 0x6ae6 <do_menu_item+0x2ac>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    6b14:	80 3b       	cpi	r24, 0xB0	; 176
    6b16:	99 f3       	breq	.-26     	; 0x6afe <do_menu_item+0x2c4>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    6b18:	51 2c       	mov	r5, r1
				button_update = 0;
			}
		}

		// Handle button 1
		if (button == BACK)	
    6b1a:	80 37       	cpi	r24, 0x70	; 112
    6b1c:	59 f4       	brne	.+22     	; 0x6b34 <do_menu_item+0x2fa>
		{
			// Save/Abort screen
			if (range.style == 4)
    6b1e:	14 30       	cpi	r17, 0x04	; 4
    6b20:	21 f4       	brne	.+8      	; 0x6b2a <do_menu_item+0x2f0>
			{
				button = ABORT;
    6b22:	80 ea       	ldi	r24, 0xA0	; 160
    6b24:	80 93 10 08 	sts	0x0810, r24
    6b28:	05 c0       	rjmp	.+10     	; 0x6b34 <do_menu_item+0x2fa>
			}
			else
			{
				value = (range.default_value * mult);				
    6b2a:	29 85       	ldd	r18, Y+9	; 0x09
    6b2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    6b2e:	23 03       	mulsu	r18, r19
    6b30:	50 01       	movw	r10, r0
    6b32:	11 24       	eor	r1, r1
    6b34:	a2 14       	cp	r10, r2
    6b36:	b3 04       	cpc	r11, r3
    6b38:	0c f4       	brge	.+2      	; 0x6b3c <do_menu_item+0x302>
    6b3a:	51 01       	movw	r10, r2
    6b3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    6b3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6b40:	8a 15       	cp	r24, r10
    6b42:	9b 05       	cpc	r25, r11
    6b44:	0c f4       	brge	.+2      	; 0x6b48 <do_menu_item+0x30e>
    6b46:	5c 01       	movw	r10, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    6b48:	9f e9       	ldi	r25, 0x9F	; 159
    6b4a:	69 16       	cp	r6, r25
    6b4c:	71 04       	cpc	r7, r1
    6b4e:	19 f4       	brne	.+6      	; 0x6b56 <do_menu_item+0x31c>
		{
			st7565_set_brightness(value);
    6b50:	8a 2d       	mov	r24, r10
    6b52:	0e 94 23 24 	call	0x4846	; 0x4846 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    6b56:	88 20       	and	r8, r8
    6b58:	a1 f0       	breq	.+40     	; 0x6b82 <do_menu_item+0x348>
			(servo_enable) &&
    6b5a:	f6 01       	movw	r30, r12
    6b5c:	80 81       	ld	r24, Z
    6b5e:	82 30       	cpi	r24, 0x02	; 2
    6b60:	81 f0       	breq	.+32     	; 0x6b82 <do_menu_item+0x348>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    6b62:	8a 2d       	mov	r24, r10
    6b64:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6b68:	86 5a       	subi	r24, 0xA6	; 166
    6b6a:	9e 40       	sbci	r25, 0x0E	; 14
    6b6c:	95 95       	asr	r25
    6b6e:	87 95       	ror	r24

			cli();
    6b70:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6b72:	bc 01       	movw	r22, r24
    6b74:	64 52       	subi	r22, 0x24	; 36
    6b76:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    6b78:	8c a5       	ldd	r24, Y+44	; 0x2c
    6b7a:	9d a5       	ldd	r25, Y+45	; 0x2d
    6b7c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <output_servo_ppm_asm3>
			sei();
    6b80:	78 94       	sei
    6b82:	90 e0       	ldi	r25, 0x00	; 0
    6b84:	c3 ce       	rjmp	.-634    	; 0x690c <do_menu_item+0xd2>
		}

	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    6b86:	12 30       	cpi	r17, 0x02	; 2
    6b88:	31 f4       	brne	.+12     	; 0x6b96 <do_menu_item+0x35c>
	{
		value = value / mult;
    6b8a:	c5 01       	movw	r24, r10
    6b8c:	6a 89       	ldd	r22, Y+18	; 0x12
    6b8e:	7b 89       	ldd	r23, Y+19	; 0x13
    6b90:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <__divmodhi4>
    6b94:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    6b96:	e8 89       	ldd	r30, Y+16	; 0x10
    6b98:	f9 89       	ldd	r31, Y+17	; 0x11
    6b9a:	a0 82       	st	Z, r10
}
    6b9c:	67 96       	adiw	r28, 0x17	; 23
    6b9e:	0f b6       	in	r0, 0x3f	; 63
    6ba0:	f8 94       	cli
    6ba2:	de bf       	out	0x3e, r29	; 62
    6ba4:	0f be       	out	0x3f, r0	; 63
    6ba6:	cd bf       	out	0x3d, r28	; 61
    6ba8:	df 91       	pop	r29
    6baa:	cf 91       	pop	r28
    6bac:	1f 91       	pop	r17
    6bae:	0f 91       	pop	r16
    6bb0:	ff 90       	pop	r15
    6bb2:	ef 90       	pop	r14
    6bb4:	df 90       	pop	r13
    6bb6:	cf 90       	pop	r12
    6bb8:	bf 90       	pop	r11
    6bba:	af 90       	pop	r10
    6bbc:	9f 90       	pop	r9
    6bbe:	8f 90       	pop	r8
    6bc0:	7f 90       	pop	r7
    6bc2:	6f 90       	pop	r6
    6bc4:	5f 90       	pop	r5
    6bc6:	4f 90       	pop	r4
    6bc8:	3f 90       	pop	r3
    6bca:	2f 90       	pop	r2
    6bcc:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    6bce:	55 24       	eor	r5, r5
    6bd0:	53 94       	inc	r5
    6bd2:	b0 cf       	rjmp	.-160    	; 0x6b34 <do_menu_item+0x2fa>

00006bd4 <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    6bd4:	90 e0       	ldi	r25, 0x00	; 0
    6bd6:	98 17       	cp	r25, r24
    6bd8:	81 f0       	breq	.+32     	; 0x6bfa <menu_beep+0x26>
	{ 
		LVA = 1;
    6bda:	29 9a       	sbi	0x05, 1	; 5
    6bdc:	ef e0       	ldi	r30, 0x0F	; 15
    6bde:	f7 e2       	ldi	r31, 0x27	; 39
    6be0:	31 97       	sbiw	r30, 0x01	; 1
    6be2:	f1 f7       	brne	.-4      	; 0x6be0 <menu_beep+0xc>
    6be4:	00 c0       	rjmp	.+0      	; 0x6be6 <menu_beep+0x12>
    6be6:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    6be8:	29 98       	cbi	0x05, 1	; 5
    6bea:	ef e0       	ldi	r30, 0x0F	; 15
    6bec:	f7 e2       	ldi	r31, 0x27	; 39
    6bee:	31 97       	sbiw	r30, 0x01	; 1
    6bf0:	f1 f7       	brne	.-4      	; 0x6bee <menu_beep+0x1a>
    6bf2:	00 c0       	rjmp	.+0      	; 0x6bf4 <menu_beep+0x20>
    6bf4:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    6bf6:	9f 5f       	subi	r25, 0xFF	; 255
    6bf8:	ee cf       	rjmp	.-36     	; 0x6bd6 <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    6bfa:	08 95       	ret

00006bfc <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint16_t items, uint16_t start, uint16_t offset, uint8_t button, uint16_t* cursor, uint16_t* top, uint16_t* temp)
{
    6bfc:	6f 92       	push	r6
    6bfe:	7f 92       	push	r7
    6c00:	8f 92       	push	r8
    6c02:	9f 92       	push	r9
    6c04:	af 92       	push	r10
    6c06:	bf 92       	push	r11
    6c08:	cf 92       	push	r12
    6c0a:	df 92       	push	r13
    6c0c:	ef 92       	push	r14
    6c0e:	ff 92       	push	r15
    6c10:	0f 93       	push	r16
    6c12:	1f 93       	push	r17
    6c14:	cf 93       	push	r28
    6c16:	df 93       	push	r29
    6c18:	5c 01       	movw	r10, r24
    6c1a:	4b 01       	movw	r8, r22
    6c1c:	3a 01       	movw	r6, r20
    6c1e:	e8 01       	movw	r28, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    6c20:	d7 01       	movw	r26, r14
    6c22:	ed 91       	ld	r30, X+
    6c24:	fc 91       	ld	r31, X
    6c26:	11 97       	sbiw	r26, 0x01	; 1
    6c28:	e4 0f       	add	r30, r20
    6c2a:	f5 1f       	adc	r31, r21
    6c2c:	ed 93       	st	X+, r30
    6c2e:	fc 93       	st	X, r31
	start = start + offset;
    6c30:	84 0e       	add	r8, r20
    6c32:	95 1e       	adc	r9, r21

	// Calculate which function has been requested
	if (button == ENTER)
    6c34:	20 3e       	cpi	r18, 0xE0	; 224
    6c36:	c1 f4       	brne	.+48     	; 0x6c68 <update_menu+0x6c>
	{
		switch(*cursor) 
    6c38:	88 81       	ld	r24, Y
    6c3a:	99 81       	ldd	r25, Y+1	; 0x01
    6c3c:	8f 30       	cpi	r24, 0x0F	; 15
    6c3e:	91 05       	cpc	r25, r1
    6c40:	61 f0       	breq	.+24     	; 0x6c5a <update_menu+0x5e>
    6c42:	18 f4       	brcc	.+6      	; 0x6c4a <update_menu+0x4e>
    6c44:	03 97       	sbiw	r24, 0x03	; 3
    6c46:	51 f0       	breq	.+20     	; 0x6c5c <update_menu+0x60>
    6c48:	55 c0       	rjmp	.+170    	; 0x6cf4 <update_menu+0xf8>
    6c4a:	8b 31       	cpi	r24, 0x1B	; 27
    6c4c:	91 05       	cpc	r25, r1
    6c4e:	51 f0       	breq	.+20     	; 0x6c64 <update_menu+0x68>
    6c50:	87 97       	sbiw	r24, 0x27	; 39
    6c52:	09 f0       	breq	.+2      	; 0x6c56 <update_menu+0x5a>
    6c54:	4f c0       	rjmp	.+158    	; 0x6cf4 <update_menu+0xf8>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    6c56:	33 96       	adiw	r30, 0x03	; 3
    6c58:	01 c0       	rjmp	.+2      	; 0x6c5c <update_menu+0x60>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    6c5a:	31 96       	adiw	r30, 0x01	; 1
    6c5c:	d6 01       	movw	r26, r12
    6c5e:	ed 93       	st	X+, r30
    6c60:	fc 93       	st	X, r31
				break;	
    6c62:	48 c0       	rjmp	.+144    	; 0x6cf4 <update_menu+0xf8>
			case LINE2:
				*temp = *top + 2;
    6c64:	32 96       	adiw	r30, 0x02	; 2
    6c66:	fa cf       	rjmp	.-12     	; 0x6c5c <update_menu+0x60>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    6c68:	20 3d       	cpi	r18, 0xD0	; 208
    6c6a:	39 f5       	brne	.+78     	; 0x6cba <update_menu+0xbe>
	{
		switch(*cursor) 
    6c6c:	88 81       	ld	r24, Y
    6c6e:	99 81       	ldd	r25, Y+1	; 0x01
    6c70:	8f 30       	cpi	r24, 0x0F	; 15
    6c72:	91 05       	cpc	r25, r1
    6c74:	79 f0       	breq	.+30     	; 0x6c94 <update_menu+0x98>
    6c76:	18 f4       	brcc	.+6      	; 0x6c7e <update_menu+0x82>
    6c78:	03 97       	sbiw	r24, 0x03	; 3
    6c7a:	39 f0       	breq	.+14     	; 0x6c8a <update_menu+0x8e>
    6c7c:	1b c0       	rjmp	.+54     	; 0x6cb4 <update_menu+0xb8>
    6c7e:	8b 31       	cpi	r24, 0x1B	; 27
    6c80:	91 05       	cpc	r25, r1
    6c82:	69 f0       	breq	.+26     	; 0x6c9e <update_menu+0xa2>
    6c84:	87 97       	sbiw	r24, 0x27	; 39
    6c86:	91 f0       	breq	.+36     	; 0x6cac <update_menu+0xb0>
    6c88:	15 c0       	rjmp	.+42     	; 0x6cb4 <update_menu+0xb8>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    6c8a:	b2 e0       	ldi	r27, 0x02	; 2
    6c8c:	ab 16       	cp	r10, r27
    6c8e:	b1 04       	cpc	r11, r1
    6c90:	20 f5       	brcc	.+72     	; 0x6cda <update_menu+0xde>
    6c92:	30 c0       	rjmp	.+96     	; 0x6cf4 <update_menu+0xf8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    6c94:	e3 e0       	ldi	r30, 0x03	; 3
    6c96:	ae 16       	cp	r10, r30
    6c98:	b1 04       	cpc	r11, r1
    6c9a:	60 f1       	brcs	.+88     	; 0x6cf4 <update_menu+0xf8>
    6c9c:	1b c0       	rjmp	.+54     	; 0x6cd4 <update_menu+0xd8>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    6c9e:	f4 e0       	ldi	r31, 0x04	; 4
    6ca0:	af 16       	cp	r10, r31
    6ca2:	b1 04       	cpc	r11, r1
    6ca4:	38 f1       	brcs	.+78     	; 0x6cf4 <update_menu+0xf8>
    6ca6:	87 e2       	ldi	r24, 0x27	; 39
    6ca8:	90 e0       	ldi	r25, 0x00	; 0
    6caa:	1f c0       	rjmp	.+62     	; 0x6cea <update_menu+0xee>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    6cac:	25 e0       	ldi	r18, 0x05	; 5
    6cae:	a2 16       	cp	r10, r18
    6cb0:	b1 04       	cpc	r11, r1
    6cb2:	00 f1       	brcs	.+64     	; 0x6cf4 <update_menu+0xf8>
				break;
			default:
				*cursor = NEXTLINE;
    6cb4:	88 e2       	ldi	r24, 0x28	; 40
    6cb6:	90 e0       	ldi	r25, 0x00	; 0
    6cb8:	18 c0       	rjmp	.+48     	; 0x6cea <update_menu+0xee>
				break;
		}
	}

	if (button == UP)	
    6cba:	20 3b       	cpi	r18, 0xB0	; 176
    6cbc:	c9 f4       	brne	.+50     	; 0x6cf0 <update_menu+0xf4>
	{
		switch(*cursor) 
    6cbe:	88 81       	ld	r24, Y
    6cc0:	99 81       	ldd	r25, Y+1	; 0x01
    6cc2:	8f 30       	cpi	r24, 0x0F	; 15
    6cc4:	91 05       	cpc	r25, r1
    6cc6:	61 f0       	breq	.+24     	; 0x6ce0 <update_menu+0xe4>
    6cc8:	70 f0       	brcs	.+28     	; 0x6ce6 <update_menu+0xea>
    6cca:	8b 31       	cpi	r24, 0x1B	; 27
    6ccc:	91 05       	cpc	r25, r1
    6cce:	29 f0       	breq	.+10     	; 0x6cda <update_menu+0xde>
    6cd0:	87 97       	sbiw	r24, 0x27	; 39
    6cd2:	49 f4       	brne	.+18     	; 0x6ce6 <update_menu+0xea>
		{
			case LINE3:
				*cursor = LINE2;
    6cd4:	8b e1       	ldi	r24, 0x1B	; 27
    6cd6:	90 e0       	ldi	r25, 0x00	; 0
    6cd8:	08 c0       	rjmp	.+16     	; 0x6cea <update_menu+0xee>
				break;	
			case LINE2:
				*cursor = LINE1;
    6cda:	8f e0       	ldi	r24, 0x0F	; 15
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	05 c0       	rjmp	.+10     	; 0x6cea <update_menu+0xee>
				break;
			case LINE1:
				*cursor = LINE0;
    6ce0:	83 e0       	ldi	r24, 0x03	; 3
    6ce2:	90 e0       	ldi	r25, 0x00	; 0
    6ce4:	02 c0       	rjmp	.+4      	; 0x6cea <update_menu+0xee>
				break;
			case LINE0:
				*cursor = PREVLINE;
    6ce6:	82 e0       	ldi	r24, 0x02	; 2
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
    6cea:	99 83       	std	Y+1, r25	; 0x01
    6cec:	88 83       	st	Y, r24
				break;
    6cee:	02 c0       	rjmp	.+4      	; 0x6cf4 <update_menu+0xf8>
				*cursor = PREVLINE;
				break;
		}
	}

	if (button != NONE)	
    6cf0:	20 3f       	cpi	r18, 0xF0	; 240
    6cf2:	61 f0       	breq	.+24     	; 0x6d0c <update_menu+0x110>
	{
		menu_beep(1);
    6cf4:	81 e0       	ldi	r24, 0x01	; 1
    6cf6:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <menu_beep>
    6cfa:	4f ef       	ldi	r20, 0xFF	; 255
    6cfc:	84 e3       	ldi	r24, 0x34	; 52
    6cfe:	9c e0       	ldi	r25, 0x0C	; 12
    6d00:	41 50       	subi	r20, 0x01	; 1
    6d02:	80 40       	sbci	r24, 0x00	; 0
    6d04:	90 40       	sbci	r25, 0x00	; 0
    6d06:	e1 f7       	brne	.-8      	; 0x6d00 <update_menu+0x104>
    6d08:	00 c0       	rjmp	.+0      	; 0x6d0a <update_menu+0x10e>
    6d0a:	00 00       	nop
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    6d0c:	88 81       	ld	r24, Y
    6d0e:	99 81       	ldd	r25, Y+1	; 0x01
    6d10:	02 97       	sbiw	r24, 0x02	; 2
    6d12:	71 f4       	brne	.+28     	; 0x6d30 <update_menu+0x134>
	{
		*cursor  = LINE0;
    6d14:	83 e0       	ldi	r24, 0x03	; 3
    6d16:	90 e0       	ldi	r25, 0x00	; 0
    6d18:	99 83       	std	Y+1, r25	; 0x01
    6d1a:	88 83       	st	Y, r24
		if (*top > start) 
    6d1c:	d7 01       	movw	r26, r14
    6d1e:	8d 91       	ld	r24, X+
    6d20:	9c 91       	ld	r25, X
    6d22:	11 97       	sbiw	r26, 0x01	; 1
    6d24:	88 16       	cp	r8, r24
    6d26:	99 06       	cpc	r9, r25
    6d28:	18 f4       	brcc	.+6      	; 0x6d30 <update_menu+0x134>
		{
			*top = *top - 1;								// Shuffle list up
    6d2a:	01 97       	sbiw	r24, 0x01	; 1
    6d2c:	8d 93       	st	X+, r24
    6d2e:	9c 93       	st	X, r25
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    6d30:	88 81       	ld	r24, Y
    6d32:	99 81       	ldd	r25, Y+1	; 0x01
    6d34:	88 97       	sbiw	r24, 0x28	; 40
    6d36:	b1 f4       	brne	.+44     	; 0x6d64 <update_menu+0x168>
	{
		*cursor  = LINE3;
    6d38:	87 e2       	ldi	r24, 0x27	; 39
    6d3a:	90 e0       	ldi	r25, 0x00	; 0
    6d3c:	99 83       	std	Y+1, r25	; 0x01
    6d3e:	88 83       	st	Y, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    6d40:	f7 01       	movw	r30, r14
    6d42:	80 81       	ld	r24, Z
    6d44:	91 81       	ldd	r25, Z+1	; 0x01
    6d46:	9c 01       	movw	r18, r24
    6d48:	2d 5f       	subi	r18, 0xFD	; 253
    6d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d4c:	f1 e0       	ldi	r31, 0x01	; 1
    6d4e:	af 1a       	sub	r10, r31
    6d50:	b1 08       	sbc	r11, r1
    6d52:	a8 0c       	add	r10, r8
    6d54:	b9 1c       	adc	r11, r9
    6d56:	2a 15       	cp	r18, r10
    6d58:	3b 05       	cpc	r19, r11
    6d5a:	20 f4       	brcc	.+8      	; 0x6d64 <update_menu+0x168>
		{
			*top = *top + 1;								// Shuffle list down
    6d5c:	01 96       	adiw	r24, 0x01	; 1
    6d5e:	d7 01       	movw	r26, r14
    6d60:	8d 93       	st	X+, r24
    6d62:	9c 93       	st	X, r25
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    6d64:	f7 01       	movw	r30, r14
    6d66:	80 81       	ld	r24, Z
    6d68:	91 81       	ldd	r25, Z+1	; 0x01
    6d6a:	86 19       	sub	r24, r6
    6d6c:	97 09       	sbc	r25, r7
    6d6e:	91 83       	std	Z+1, r25	; 0x01
    6d70:	80 83       	st	Z, r24
}
    6d72:	df 91       	pop	r29
    6d74:	cf 91       	pop	r28
    6d76:	1f 91       	pop	r17
    6d78:	0f 91       	pop	r16
    6d7a:	ff 90       	pop	r15
    6d7c:	ef 90       	pop	r14
    6d7e:	df 90       	pop	r13
    6d80:	cf 90       	pop	r12
    6d82:	bf 90       	pop	r11
    6d84:	af 90       	pop	r10
    6d86:	9f 90       	pop	r9
    6d88:	8f 90       	pop	r8
    6d8a:	7f 90       	pop	r7
    6d8c:	6f 90       	pop	r6
    6d8e:	08 95       	ret

00006d90 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    6d90:	28 2f       	mov	r18, r24
    6d92:	30 e0       	ldi	r19, 0x00	; 0
    6d94:	43 e0       	ldi	r20, 0x03	; 3
    6d96:	50 e0       	ldi	r21, 0x00	; 0
    6d98:	69 e0       	ldi	r22, 0x09	; 9
    6d9a:	71 e0       	ldi	r23, 0x01	; 1
    6d9c:	8d e0       	ldi	r24, 0x0D	; 13
    6d9e:	90 e0       	ldi	r25, 0x00	; 0
    6da0:	0c 94 2a 26 	jmp	0x4c54	; 0x4c54 <LCD_Display_Text>

00006da4 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint16_t MenuOffsets, const uint16_t* text_link, uint16_t cursor)
{
    6da4:	2f 92       	push	r2
    6da6:	3f 92       	push	r3
    6da8:	4f 92       	push	r4
    6daa:	5f 92       	push	r5
    6dac:	6f 92       	push	r6
    6dae:	7f 92       	push	r7
    6db0:	8f 92       	push	r8
    6db2:	9f 92       	push	r9
    6db4:	af 92       	push	r10
    6db6:	bf 92       	push	r11
    6db8:	cf 92       	push	r12
    6dba:	df 92       	push	r13
    6dbc:	ef 92       	push	r14
    6dbe:	ff 92       	push	r15
    6dc0:	0f 93       	push	r16
    6dc2:	1f 93       	push	r17
    6dc4:	cf 93       	push	r28
    6dc6:	df 93       	push	r29
    6dc8:	cd b7       	in	r28, 0x3d	; 61
    6dca:	de b7       	in	r29, 0x3e	; 62
    6dcc:	2c 97       	sbiw	r28, 0x0c	; 12
    6dce:	0f b6       	in	r0, 0x3f	; 63
    6dd0:	f8 94       	cli
    6dd2:	de bf       	out	0x3e, r29	; 62
    6dd4:	0f be       	out	0x3f, r0	; 63
    6dd6:	cd bf       	out	0x3d, r28	; 61
    6dd8:	2c 01       	movw	r4, r24
    6dda:	4a 01       	movw	r8, r20
    6ddc:	3f 83       	std	Y+7, r19	; 0x07
    6dde:	2e 83       	std	Y+6, r18	; 0x06
    6de0:	08 87       	std	Y+8, r16	; 0x08
    6de2:	e9 86       	std	Y+9, r14	; 0x09
    6de4:	aa 86       	std	Y+10, r10	; 0x0a
	uint16_t base = 0;
	uint16_t offset = 0;
	uint16_t text = 0;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    6de6:	80 e0       	ldi	r24, 0x00	; 0
    6de8:	91 e0       	ldi	r25, 0x01	; 1
    6dea:	6b 87       	std	Y+11, r22	; 0x0b
    6dec:	7c 87       	std	Y+12, r23	; 0x0c
    6dee:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>
	print_menu_frame(BASIC);
    6df2:	80 e0       	ldi	r24, 0x00	; 0
    6df4:	0e 94 2b 33 	call	0x6656	; 0x6656 <print_menu_frame>
    6df8:	25 e0       	ldi	r18, 0x05	; 5
    6dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    6dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    6dfe:	26 9f       	mul	r18, r22
    6e00:	c0 01       	movw	r24, r0
    6e02:	27 9f       	mul	r18, r23
    6e04:	90 0d       	add	r25, r0
    6e06:	11 24       	eor	r1, r1
    6e08:	2e 80       	ldd	r2, Y+6	; 0x06
    6e0a:	3f 80       	ldd	r3, Y+7	; 0x07
    6e0c:	28 1a       	sub	r2, r24
    6e0e:	39 0a       	sbc	r3, r25
    6e10:	24 9d       	mul	r18, r4
    6e12:	c0 01       	movw	r24, r0
    6e14:	25 9d       	mul	r18, r5
    6e16:	90 0d       	add	r25, r0
    6e18:	11 24       	eor	r1, r1
    6e1a:	28 0e       	add	r2, r24
    6e1c:	39 1e       	adc	r3, r25
    6e1e:	cb 01       	movw	r24, r22
    6e20:	88 0f       	add	r24, r24
    6e22:	99 1f       	adc	r25, r25
    6e24:	c8 1a       	sub	r12, r24
    6e26:	d9 0a       	sbc	r13, r25
    6e28:	c2 01       	movw	r24, r4
    6e2a:	88 0f       	add	r24, r24
    6e2c:	99 1f       	adc	r25, r25
    6e2e:	c8 0e       	add	r12, r24
    6e30:	d9 1e       	adc	r13, r25
    6e32:	72 01       	movw	r14, r4
    6e34:	a1 2c       	mov	r10, r1
    6e36:	b1 2c       	mov	r11, r1
    6e38:	41 2c       	mov	r4, r1
    6e3a:	51 2c       	mov	r5, r1
    6e3c:	80 e1       	ldi	r24, 0x10	; 16
    6e3e:	68 2e       	mov	r6, r24
    6e40:	89 e1       	ldi	r24, 0x19	; 25
    6e42:	78 2e       	mov	r7, r24
    6e44:	6e 18       	sub	r6, r14
    6e46:	7f 08       	sbc	r7, r15
    6e48:	86 1a       	sub	r8, r22
    6e4a:	97 0a       	sbc	r9, r23
    6e4c:	83 01       	movw	r16, r6
    6e4e:	0e 0d       	add	r16, r14
    6e50:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    6e52:	f8 01       	movw	r30, r16
    6e54:	24 91       	lpm	r18, Z
    6e56:	30 e0       	ldi	r19, 0x00	; 0
    6e58:	4a e0       	ldi	r20, 0x0A	; 10
    6e5a:	50 e0       	ldi	r21, 0x00	; 0
    6e5c:	61 e2       	ldi	r22, 0x21	; 33
    6e5e:	7a e0       	ldi	r23, 0x0A	; 10
    6e60:	c7 01       	movw	r24, r14
    6e62:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6e66:	f8 85       	ldd	r31, Y+8	; 0x08
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6e68:	45 e0       	ldi	r20, 0x05	; 5
    6e6a:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6e6c:	f1 11       	cpse	r31, r1
    6e6e:	04 c0       	rjmp	.+8      	; 0x6e78 <print_menu_items+0xd4>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6e70:	b5 01       	movw	r22, r10
    6e72:	62 0d       	add	r22, r2
    6e74:	73 1d       	adc	r23, r3
    6e76:	02 c0       	rjmp	.+4      	; 0x6e7c <print_menu_items+0xd8>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    6e78:	6e 81       	ldd	r22, Y+6	; 0x06
    6e7a:	7f 81       	ldd	r23, Y+7	; 0x07
    6e7c:	ce 01       	movw	r24, r28
    6e7e:	01 96       	adiw	r24, 0x01	; 1
    6e80:	0e 94 9e 4e 	call	0x9d3c	; 0x9d3c <memcpy_P>
    6e84:	f2 01       	movw	r30, r4
    6e86:	ec 0d       	add	r30, r12
    6e88:	fd 1d       	adc	r31, r13
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
    6e8a:	45 91       	lpm	r20, Z+
    6e8c:	54 91       	lpm	r21, Z
    6e8e:	f4 01       	movw	r30, r8
    6e90:	ee 0d       	add	r30, r14
    6e92:	ff 1d       	adc	r31, r15
		offset = values[top + i - start];
    6e94:	80 81       	ld	r24, Z
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    6e96:	f8 01       	movw	r30, r16
    6e98:	04 91       	lpm	r16, Z
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
		offset = values[top + i - start];
    6e9a:	99 27       	eor	r25, r25
    6e9c:	87 fd       	sbrc	r24, 7
    6e9e:	90 95       	com	r25
		text = base + offset;
    6ea0:	48 0f       	add	r20, r24
    6ea2:	59 1f       	adc	r21, r25
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    6ea4:	29 85       	ldd	r18, Y+9	; 0x09
    6ea6:	6c 81       	ldd	r22, Y+4	; 0x04
    6ea8:	0e 94 c1 33 	call	0x6782	; 0x6782 <print_menu_text>
    6eac:	ff ef       	ldi	r31, 0xFF	; 255
    6eae:	ef 1a       	sub	r14, r31
    6eb0:	ff 0a       	sbc	r15, r31
    6eb2:	82 e0       	ldi	r24, 0x02	; 2
    6eb4:	48 0e       	add	r4, r24
    6eb6:	51 1c       	adc	r5, r1
    6eb8:	e5 e0       	ldi	r30, 0x05	; 5
    6eba:	ae 0e       	add	r10, r30
    6ebc:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(BASIC);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    6ebe:	f4 e1       	ldi	r31, 0x14	; 20
    6ec0:	af 16       	cp	r10, r31
    6ec2:	b1 04       	cpc	r11, r1
    6ec4:	09 f0       	breq	.+2      	; 0x6ec8 <print_menu_items+0x124>
    6ec6:	c2 cf       	rjmp	.-124    	; 0x6e4c <print_menu_items+0xa8>
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    6ec8:	8a 85       	ldd	r24, Y+10	; 0x0a
    6eca:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <print_cursor>
	write_buffer(buffer);
    6ece:	80 e0       	ldi	r24, 0x00	; 0
    6ed0:	91 e0       	ldi	r25, 0x01	; 1
    6ed2:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>
	poll_buttons(true);
    6ed6:	81 e0       	ldi	r24, 0x01	; 1
    6ed8:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <poll_buttons>
}
    6edc:	2c 96       	adiw	r28, 0x0c	; 12
    6ede:	0f b6       	in	r0, 0x3f	; 63
    6ee0:	f8 94       	cli
    6ee2:	de bf       	out	0x3e, r29	; 62
    6ee4:	0f be       	out	0x3f, r0	; 63
    6ee6:	cd bf       	out	0x3d, r28	; 61
    6ee8:	df 91       	pop	r29
    6eea:	cf 91       	pop	r28
    6eec:	1f 91       	pop	r17
    6eee:	0f 91       	pop	r16
    6ef0:	ff 90       	pop	r15
    6ef2:	ef 90       	pop	r14
    6ef4:	df 90       	pop	r13
    6ef6:	cf 90       	pop	r12
    6ef8:	bf 90       	pop	r11
    6efa:	af 90       	pop	r10
    6efc:	9f 90       	pop	r9
    6efe:	8f 90       	pop	r8
    6f00:	7f 90       	pop	r7
    6f02:	6f 90       	pop	r6
    6f04:	5f 90       	pop	r5
    6f06:	4f 90       	pop	r4
    6f08:	3f 90       	pop	r3
    6f0a:	2f 90       	pop	r2
    6f0c:	08 95       	ret

00006f0e <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    6f0e:	6f 92       	push	r6
    6f10:	7f 92       	push	r7
    6f12:	8f 92       	push	r8
    6f14:	af 92       	push	r10
    6f16:	bf 92       	push	r11
    6f18:	cf 92       	push	r12
    6f1a:	df 92       	push	r13
    6f1c:	ef 92       	push	r14
    6f1e:	ff 92       	push	r15
    6f20:	0f 93       	push	r16
    6f22:	1f 93       	push	r17
    6f24:	cf 93       	push	r28
    6f26:	df 93       	push	r29
    6f28:	00 d0       	rcall	.+0      	; 0x6f2a <menu_flight+0x1c>
    6f2a:	00 d0       	rcall	.+0      	; 0x6f2c <menu_flight+0x1e>
    6f2c:	1f 92       	push	r1
    6f2e:	cd b7       	in	r28, 0x3d	; 61
    6f30:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6f32:	90 91 12 08 	lds	r25, 0x0812
    6f36:	99 23       	and	r25, r25
    6f38:	41 f0       	breq	.+16     	; 0x6f4a <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    6f3a:	2a ea       	ldi	r18, 0xAA	; 170
    6f3c:	30 e0       	ldi	r19, 0x00	; 0
    6f3e:	30 93 37 05 	sts	0x0537, r19
    6f42:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    6f46:	10 92 12 08 	sts	0x0812, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    6f4a:	92 e1       	ldi	r25, 0x12	; 18
    6f4c:	89 9f       	mul	r24, r25
    6f4e:	30 01       	movw	r6, r0
    6f50:	11 24       	eor	r1, r1
    6f52:	c3 01       	movw	r24, r6
    6f54:	8d 50       	subi	r24, 0x0D	; 13
    6f56:	9a 4f       	sbci	r25, 0xFA	; 250
    6f58:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6f5a:	80 91 10 08 	lds	r24, 0x0810
    6f5e:	80 37       	cpi	r24, 0x70	; 112
    6f60:	09 f4       	brne	.+2      	; 0x6f64 <menu_flight+0x56>
    6f62:	66 c0       	rjmp	.+204    	; 0x7030 <menu_flight+0x122>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const uint16_t*)FlightMenuText, cursor);
    6f64:	a0 90 04 05 	lds	r10, 0x0504
    6f68:	b0 90 05 05 	lds	r11, 0x0505
    6f6c:	3e e6       	ldi	r19, 0x6E	; 110
    6f6e:	c3 2e       	mov	r12, r19
    6f70:	39 e1       	ldi	r19, 0x19	; 25
    6f72:	d3 2e       	mov	r13, r19
    6f74:	4f e4       	ldi	r20, 0x4F	; 79
    6f76:	e4 2e       	mov	r14, r20
    6f78:	f1 2c       	mov	r15, r1
    6f7a:	00 e0       	ldi	r16, 0x00	; 0
    6f7c:	24 e1       	ldi	r18, 0x14	; 20
    6f7e:	39 e1       	ldi	r19, 0x19	; 25
    6f80:	a3 01       	movw	r20, r6
    6f82:	6a ea       	ldi	r22, 0xAA	; 170
    6f84:	70 e0       	ldi	r23, 0x00	; 0
    6f86:	80 91 36 05 	lds	r24, 0x0536
    6f8a:	90 91 37 05 	lds	r25, 0x0537
    6f8e:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6f92:	51 e3       	ldi	r21, 0x31	; 49
    6f94:	c5 2e       	mov	r12, r21
    6f96:	55 e0       	ldi	r21, 0x05	; 5
    6f98:	d5 2e       	mov	r13, r21
    6f9a:	66 e3       	ldi	r22, 0x36	; 54
    6f9c:	e6 2e       	mov	r14, r22
    6f9e:	65 e0       	ldi	r22, 0x05	; 5
    6fa0:	f6 2e       	mov	r15, r22
    6fa2:	04 e0       	ldi	r16, 0x04	; 4
    6fa4:	15 e0       	ldi	r17, 0x05	; 5
    6fa6:	20 91 10 08 	lds	r18, 0x0810
    6faa:	40 e0       	ldi	r20, 0x00	; 0
    6fac:	50 e0       	ldi	r21, 0x00	; 0
    6fae:	6a ea       	ldi	r22, 0xAA	; 170
    6fb0:	70 e0       	ldi	r23, 0x00	; 0
    6fb2:	82 e1       	ldi	r24, 0x12	; 18
    6fb4:	90 e0       	ldi	r25, 0x00	; 0
    6fb6:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    6fba:	60 91 31 05 	lds	r22, 0x0531
    6fbe:	6a 5a       	subi	r22, 0xAA	; 170
    6fc0:	84 e1       	ldi	r24, 0x14	; 20
    6fc2:	99 e1       	ldi	r25, 0x19	; 25
    6fc4:	0e 94 91 33 	call	0x6722	; 0x6722 <get_menu_range>
    6fc8:	29 83       	std	Y+1, r18	; 0x01
    6fca:	3a 83       	std	Y+2, r19	; 0x02
    6fcc:	4b 83       	std	Y+3, r20	; 0x03
    6fce:	5c 83       	std	Y+4, r21	; 0x04
    6fd0:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6fd2:	80 91 10 08 	lds	r24, 0x0810
    6fd6:	80 3e       	cpi	r24, 0xE0	; 224
    6fd8:	f9 f4       	brne	.+62     	; 0x7018 <menu_flight+0x10a>
		{
			text_link = pgm_read_word(&FlightMenuText[menu_temp - FLIGHTSTART]);
    6fda:	80 91 31 05 	lds	r24, 0x0531
    6fde:	90 91 32 05 	lds	r25, 0x0532
    6fe2:	bc 01       	movw	r22, r24
    6fe4:	6a 5a       	subi	r22, 0xAA	; 170
    6fe6:	71 09       	sbc	r23, r1
    6fe8:	fb 01       	movw	r30, r22
    6fea:	ee 0f       	add	r30, r30
    6fec:	ff 1f       	adc	r31, r31
    6fee:	e2 59       	subi	r30, 0x92	; 146
    6ff0:	f6 4e       	sbci	r31, 0xE6	; 230
    6ff2:	a5 90       	lpm	r10, Z+
    6ff4:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    6ff6:	bb 24       	eor	r11, r11
    6ff8:	66 0d       	add	r22, r6
    6ffa:	77 1d       	adc	r23, r7
    6ffc:	1f 92       	push	r1
    6ffe:	1f 92       	push	r1
    7000:	81 2c       	mov	r8, r1
    7002:	c1 2c       	mov	r12, r1
    7004:	e9 80       	ldd	r14, Y+1	; 0x01
    7006:	fa 80       	ldd	r15, Y+2	; 0x02
    7008:	0b 81       	ldd	r16, Y+3	; 0x03
    700a:	1c 81       	ldd	r17, Y+4	; 0x04
    700c:	2d 81       	ldd	r18, Y+5	; 0x05
    700e:	41 e0       	ldi	r20, 0x01	; 1
    7010:	0e 94 1d 34 	call	0x683a	; 0x683a <do_menu_item>
    7014:	0f 90       	pop	r0
    7016:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    7018:	80 91 10 08 	lds	r24, 0x0810
    701c:	80 3e       	cpi	r24, 0xE0	; 224
    701e:	09 f0       	breq	.+2      	; 0x7022 <menu_flight+0x114>
    7020:	9c cf       	rjmp	.-200    	; 0x6f5a <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    7022:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    7026:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    702a:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <Wait_BUTTON4>
    702e:	95 cf       	rjmp	.-214    	; 0x6f5a <menu_flight+0x4c>
		}
	}
}
    7030:	0f 90       	pop	r0
    7032:	0f 90       	pop	r0
    7034:	0f 90       	pop	r0
    7036:	0f 90       	pop	r0
    7038:	0f 90       	pop	r0
    703a:	df 91       	pop	r29
    703c:	cf 91       	pop	r28
    703e:	1f 91       	pop	r17
    7040:	0f 91       	pop	r16
    7042:	ff 90       	pop	r15
    7044:	ef 90       	pop	r14
    7046:	df 90       	pop	r13
    7048:	cf 90       	pop	r12
    704a:	bf 90       	pop	r11
    704c:	af 90       	pop	r10
    704e:	8f 90       	pop	r8
    7050:	7f 90       	pop	r7
    7052:	6f 90       	pop	r6
    7054:	08 95       	ret

00007056 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    7056:	90 e0       	ldi	r25, 0x00	; 0
    7058:	fc 01       	movw	r30, r24
    705a:	ed 54       	subi	r30, 0x4D	; 77
    705c:	f1 09       	sbc	r31, r1
    705e:	e4 31       	cpi	r30, 0x14	; 20
    7060:	f1 05       	cpc	r31, r1
    7062:	80 f5       	brcc	.+96     	; 0x70c4 <do_main_menu_item+0x6e>
    7064:	e7 5b       	subi	r30, 0xB7	; 183
    7066:	ff 4f       	sbci	r31, 0xFF	; 255
    7068:	0c 94 67 4e 	jmp	0x9cce	; 0x9cce <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    706c:	82 e0       	ldi	r24, 0x02	; 2
    706e:	01 c0       	rjmp	.+2      	; 0x7072 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    7070:	81 e0       	ldi	r24, 0x01	; 1
    7072:	0c 94 a5 3a 	jmp	0x754a	; 0x754a <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    7076:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    707a:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    707e:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    7082:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    7086:	80 e0       	ldi	r24, 0x00	; 0
    7088:	01 c0       	rjmp	.+2      	; 0x708c <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    708a:	81 e0       	ldi	r24, 0x01	; 1
    708c:	0c 94 87 37 	jmp	0x6f0e	; 0x6f0e <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    7090:	80 e0       	ldi	r24, 0x00	; 0
    7092:	01 c0       	rjmp	.+2      	; 0x7096 <do_main_menu_item+0x40>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    7094:	81 e0       	ldi	r24, 0x01	; 1
    7096:	0c 94 06 39 	jmp	0x720c	; 0x720c <menu_mixer>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    709a:	82 e0       	ldi	r24, 0x02	; 2
    709c:	fc cf       	rjmp	.-8      	; 0x7096 <do_main_menu_item+0x40>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    709e:	83 e0       	ldi	r24, 0x03	; 3
    70a0:	fa cf       	rjmp	.-12     	; 0x7096 <do_main_menu_item+0x40>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    70a2:	84 e0       	ldi	r24, 0x04	; 4
    70a4:	f8 cf       	rjmp	.-16     	; 0x7096 <do_main_menu_item+0x40>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    70a6:	85 e0       	ldi	r24, 0x05	; 5
    70a8:	f6 cf       	rjmp	.-20     	; 0x7096 <do_main_menu_item+0x40>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    70aa:	86 e0       	ldi	r24, 0x06	; 6
    70ac:	f4 cf       	rjmp	.-24     	; 0x7096 <do_main_menu_item+0x40>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    70ae:	87 e0       	ldi	r24, 0x07	; 7
    70b0:	f2 cf       	rjmp	.-28     	; 0x7096 <do_main_menu_item+0x40>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    70b2:	81 e0       	ldi	r24, 0x01	; 1
    70b4:	03 c0       	rjmp	.+6      	; 0x70bc <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    70b6:	82 e0       	ldi	r24, 0x02	; 2
    70b8:	01 c0       	rjmp	.+2      	; 0x70bc <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    70ba:	83 e0       	ldi	r24, 0x03	; 3
    70bc:	0c 94 aa 39 	jmp	0x7354	; 0x7354 <menu_servo_setup>
			break;
		case MAINSTART+19:
			menu_log();				// 20. Error log
    70c0:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <menu_log>
    70c4:	08 95       	ret

000070c6 <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    70c6:	1f 99       	sbic	0x03, 7	; 3
    70c8:	0a c0       	rjmp	.+20     	; 0x70de <Wait_BUTTON1+0x18>
    70ca:	2f e3       	ldi	r18, 0x3F	; 63
    70cc:	8d e0       	ldi	r24, 0x0D	; 13
    70ce:	93 e0       	ldi	r25, 0x03	; 3
    70d0:	21 50       	subi	r18, 0x01	; 1
    70d2:	80 40       	sbci	r24, 0x00	; 0
    70d4:	90 40       	sbci	r25, 0x00	; 0
    70d6:	e1 f7       	brne	.-8      	; 0x70d0 <Wait_BUTTON1+0xa>
    70d8:	00 c0       	rjmp	.+0      	; 0x70da <Wait_BUTTON1+0x14>
    70da:	00 00       	nop
    70dc:	f4 cf       	rjmp	.-24     	; 0x70c6 <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    70de:	08 95       	ret

000070e0 <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    70e0:	9f 92       	push	r9
    70e2:	af 92       	push	r10
    70e4:	bf 92       	push	r11
    70e6:	cf 92       	push	r12
    70e8:	df 92       	push	r13
    70ea:	ef 92       	push	r14
    70ec:	ff 92       	push	r15
    70ee:	0f 93       	push	r16
    70f0:	1f 93       	push	r17
    70f2:	cf 93       	push	r28
    70f4:	df 93       	push	r29
	static uint16_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    70f6:	80 ef       	ldi	r24, 0xF0	; 240
    70f8:	80 93 10 08 	sts	0x0810, r24

	menu_beep(1);
    70fc:	81 e0       	ldi	r24, 0x01	; 1
    70fe:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <menu_beep>

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    7102:	0e 94 63 38 	call	0x70c6	; 0x70c6 <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    7106:	23 e0       	ldi	r18, 0x03	; 3
    7108:	a2 2e       	mov	r10, r18
    710a:	b1 2c       	mov	r11, r1

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    710c:	30 ef       	ldi	r19, 0xF0	; 240
    710e:	93 2e       	mov	r9, r19
	menu_beep(1);

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    7110:	80 91 10 08 	lds	r24, 0x0810
    7114:	80 37       	cpi	r24, 0x70	; 112
    7116:	09 f4       	brne	.+2      	; 0x711a <menu_main+0x3a>
    7118:	60 c0       	rjmp	.+192    	; 0x71da <menu_main+0xfa>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    711a:	80 e0       	ldi	r24, 0x00	; 0
    711c:	91 e0       	ldi	r25, 0x01	; 1
    711e:	0e 94 7d 24 	call	0x48fa	; 0x48fa <clear_buffer>

		// Print menu
		print_menu_frame(BASIC);													// Frame
    7122:	80 e0       	ldi	r24, 0x00	; 0
    7124:	0e 94 2b 33 	call	0x6656	; 0x6656 <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    7128:	c0 e0       	ldi	r28, 0x00	; 0
    712a:	d0 e0       	ldi	r29, 0x00	; 0
    712c:	fe 01       	movw	r30, r28
    712e:	e0 5f       	subi	r30, 0xF0	; 240
    7130:	f6 4e       	sbci	r31, 0xE6	; 230
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    7132:	24 91       	lpm	r18, Z
    7134:	30 e0       	ldi	r19, 0x00	; 0
    7136:	80 91 08 05 	lds	r24, 0x0508
    713a:	90 91 09 05 	lds	r25, 0x0509
    713e:	4a e0       	ldi	r20, 0x0A	; 10
    7140:	50 e0       	ldi	r21, 0x00	; 0
    7142:	61 e2       	ldi	r22, 0x21	; 33
    7144:	7a e0       	ldi	r23, 0x0A	; 10
    7146:	8c 0f       	add	r24, r28
    7148:	9d 1f       	adc	r25, r29
    714a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(BASIC);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    714e:	21 96       	adiw	r28, 0x01	; 1
    7150:	c4 30       	cpi	r28, 0x04	; 4
    7152:	d1 05       	cpc	r29, r1
    7154:	59 f7       	brne	.-42     	; 0x712c <menu_main+0x4c>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    7156:	80 91 06 05 	lds	r24, 0x0506
    715a:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <print_cursor>
		write_buffer(buffer);
    715e:	80 e0       	ldi	r24, 0x00	; 0
    7160:	91 e0       	ldi	r25, 0x01	; 1
    7162:	0e 94 4b 24 	call	0x4896	; 0x4896 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    7166:	81 e0       	ldi	r24, 0x01	; 1
    7168:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    716c:	84 e3       	ldi	r24, 0x34	; 52
    716e:	c8 2e       	mov	r12, r24
    7170:	85 e0       	ldi	r24, 0x05	; 5
    7172:	d8 2e       	mov	r13, r24
    7174:	98 e0       	ldi	r25, 0x08	; 8
    7176:	e9 2e       	mov	r14, r25
    7178:	95 e0       	ldi	r25, 0x05	; 5
    717a:	f9 2e       	mov	r15, r25
    717c:	06 e0       	ldi	r16, 0x06	; 6
    717e:	15 e0       	ldi	r17, 0x05	; 5
    7180:	20 91 10 08 	lds	r18, 0x0810
    7184:	40 e0       	ldi	r20, 0x00	; 0
    7186:	50 e0       	ldi	r21, 0x00	; 0
    7188:	6d e4       	ldi	r22, 0x4D	; 77
    718a:	70 e0       	ldi	r23, 0x00	; 0
    718c:	84 e1       	ldi	r24, 0x14	; 20
    718e:	90 e0       	ldi	r25, 0x00	; 0
    7190:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    7194:	80 91 34 05 	lds	r24, 0x0534
    7198:	90 91 35 05 	lds	r25, 0x0535
    719c:	20 91 33 05 	lds	r18, 0x0533
    71a0:	30 e0       	ldi	r19, 0x00	; 0
    71a2:	82 17       	cp	r24, r18
    71a4:	93 07       	cpc	r25, r19
    71a6:	69 f0       	breq	.+26     	; 0x71c2 <menu_main+0xe2>
		{
			cursor = LINE0;
    71a8:	b0 92 05 05 	sts	0x0505, r11
    71ac:	a0 92 04 05 	sts	0x0504, r10
			menu_temp = 0;
    71b0:	10 92 32 05 	sts	0x0532, r1
    71b4:	10 92 31 05 	sts	0x0531, r1
			old_menu = main_temp;
    71b8:	80 93 33 05 	sts	0x0533, r24
			menu_flag = 1;
    71bc:	21 e0       	ldi	r18, 0x01	; 1
    71be:	20 93 12 08 	sts	0x0812, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    71c2:	20 91 10 08 	lds	r18, 0x0810
    71c6:	20 3e       	cpi	r18, 0xE0	; 224
    71c8:	09 f0       	breq	.+2      	; 0x71cc <menu_main+0xec>
    71ca:	a2 cf       	rjmp	.-188    	; 0x7110 <menu_main+0x30>
		{
			do_main_menu_item(main_temp);
    71cc:	0e 94 2b 38 	call	0x7056	; 0x7056 <do_main_menu_item>
			button = NONE;
    71d0:	90 92 10 08 	sts	0x0810, r9

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    71d4:	0e 94 63 38 	call	0x70c6	; 0x70c6 <Wait_BUTTON1>
    71d8:	9b cf       	rjmp	.-202    	; 0x7110 <menu_main+0x30>
		}
	}
}
    71da:	df 91       	pop	r29
    71dc:	cf 91       	pop	r28
    71de:	1f 91       	pop	r17
    71e0:	0f 91       	pop	r16
    71e2:	ff 90       	pop	r15
    71e4:	ef 90       	pop	r14
    71e6:	df 90       	pop	r13
    71e8:	cf 90       	pop	r12
    71ea:	bf 90       	pop	r11
    71ec:	af 90       	pop	r10
    71ee:	9f 90       	pop	r9
    71f0:	08 95       	ret

000071f2 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    71f2:	1c 99       	sbic	0x03, 4	; 3
    71f4:	0a c0       	rjmp	.+20     	; 0x720a <Wait_BUTTON4+0x18>
    71f6:	2f e3       	ldi	r18, 0x3F	; 63
    71f8:	8d e0       	ldi	r24, 0x0D	; 13
    71fa:	93 e0       	ldi	r25, 0x03	; 3
    71fc:	21 50       	subi	r18, 0x01	; 1
    71fe:	80 40       	sbci	r24, 0x00	; 0
    7200:	90 40       	sbci	r25, 0x00	; 0
    7202:	e1 f7       	brne	.-8      	; 0x71fc <Wait_BUTTON4+0xa>
    7204:	00 c0       	rjmp	.+0      	; 0x7206 <Wait_BUTTON4+0x14>
    7206:	00 00       	nop
    7208:	f4 cf       	rjmp	.-24     	; 0x71f2 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    720a:	08 95       	ret

0000720c <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    720c:	6f 92       	push	r6
    720e:	7f 92       	push	r7
    7210:	8f 92       	push	r8
    7212:	af 92       	push	r10
    7214:	bf 92       	push	r11
    7216:	cf 92       	push	r12
    7218:	df 92       	push	r13
    721a:	ef 92       	push	r14
    721c:	ff 92       	push	r15
    721e:	0f 93       	push	r16
    7220:	1f 93       	push	r17
    7222:	cf 93       	push	r28
    7224:	df 93       	push	r29
    7226:	00 d0       	rcall	.+0      	; 0x7228 <menu_mixer+0x1c>
    7228:	00 d0       	rcall	.+0      	; 0x722a <menu_mixer+0x1e>
    722a:	1f 92       	push	r1
    722c:	cd b7       	in	r28, 0x3d	; 61
    722e:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    7230:	90 91 12 08 	lds	r25, 0x0812
    7234:	99 23       	and	r25, r25
    7236:	41 f0       	breq	.+16     	; 0x7248 <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    7238:	2e eb       	ldi	r18, 0xBE	; 190
    723a:	30 e0       	ldi	r19, 0x00	; 0
    723c:	30 93 37 05 	sts	0x0537, r19
    7240:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    7244:	10 92 12 08 	sts	0x0812, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    7248:	96 e2       	ldi	r25, 0x26	; 38
    724a:	89 9f       	mul	r24, r25
    724c:	30 01       	movw	r6, r0
    724e:	11 24       	eor	r1, r1
    7250:	c3 01       	movw	r24, r6
    7252:	89 5a       	subi	r24, 0xA9	; 169
    7254:	99 4f       	sbci	r25, 0xF9	; 249
    7256:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    7258:	80 91 10 08 	lds	r24, 0x0810
    725c:	80 37       	cpi	r24, 0x70	; 112
    725e:	09 f4       	brne	.+2      	; 0x7262 <menu_mixer+0x56>
    7260:	66 c0       	rjmp	.+204    	; 0x732e <menu_mixer+0x122>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const uint16_t*)MixerMenuText, cursor);
    7262:	a0 90 04 05 	lds	r10, 0x0504
    7266:	b0 90 05 05 	lds	r11, 0x0505
    726a:	3c e3       	ldi	r19, 0x3C	; 60
    726c:	c3 2e       	mov	r12, r19
    726e:	3a e1       	ldi	r19, 0x1A	; 26
    7270:	d3 2e       	mov	r13, r19
    7272:	49 e5       	ldi	r20, 0x59	; 89
    7274:	e4 2e       	mov	r14, r20
    7276:	f1 2c       	mov	r15, r1
    7278:	00 e0       	ldi	r16, 0x00	; 0
    727a:	22 e9       	ldi	r18, 0x92	; 146
    727c:	39 e1       	ldi	r19, 0x19	; 25
    727e:	a3 01       	movw	r20, r6
    7280:	6e eb       	ldi	r22, 0xBE	; 190
    7282:	70 e0       	ldi	r23, 0x00	; 0
    7284:	80 91 36 05 	lds	r24, 0x0536
    7288:	90 91 37 05 	lds	r25, 0x0537
    728c:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    7290:	51 e3       	ldi	r21, 0x31	; 49
    7292:	c5 2e       	mov	r12, r21
    7294:	55 e0       	ldi	r21, 0x05	; 5
    7296:	d5 2e       	mov	r13, r21
    7298:	66 e3       	ldi	r22, 0x36	; 54
    729a:	e6 2e       	mov	r14, r22
    729c:	65 e0       	ldi	r22, 0x05	; 5
    729e:	f6 2e       	mov	r15, r22
    72a0:	04 e0       	ldi	r16, 0x04	; 4
    72a2:	15 e0       	ldi	r17, 0x05	; 5
    72a4:	20 91 10 08 	lds	r18, 0x0810
    72a8:	40 e0       	ldi	r20, 0x00	; 0
    72aa:	50 e0       	ldi	r21, 0x00	; 0
    72ac:	6e eb       	ldi	r22, 0xBE	; 190
    72ae:	70 e0       	ldi	r23, 0x00	; 0
    72b0:	82 e2       	ldi	r24, 0x22	; 34
    72b2:	90 e0       	ldi	r25, 0x00	; 0
    72b4:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    72b8:	60 91 31 05 	lds	r22, 0x0531
    72bc:	6e 5b       	subi	r22, 0xBE	; 190
    72be:	82 e9       	ldi	r24, 0x92	; 146
    72c0:	99 e1       	ldi	r25, 0x19	; 25
    72c2:	0e 94 91 33 	call	0x6722	; 0x6722 <get_menu_range>
    72c6:	29 83       	std	Y+1, r18	; 0x01
    72c8:	3a 83       	std	Y+2, r19	; 0x02
    72ca:	4b 83       	std	Y+3, r20	; 0x03
    72cc:	5c 83       	std	Y+4, r21	; 0x04
    72ce:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    72d0:	80 91 10 08 	lds	r24, 0x0810
    72d4:	80 3e       	cpi	r24, 0xE0	; 224
    72d6:	f9 f4       	brne	.+62     	; 0x7316 <menu_mixer+0x10a>
		{
			text_link = pgm_read_word(&MixerMenuText[menu_temp - MIXERSTART]);
    72d8:	80 91 31 05 	lds	r24, 0x0531
    72dc:	90 91 32 05 	lds	r25, 0x0532
    72e0:	bc 01       	movw	r22, r24
    72e2:	6e 5b       	subi	r22, 0xBE	; 190
    72e4:	71 09       	sbc	r23, r1
    72e6:	fb 01       	movw	r30, r22
    72e8:	ee 0f       	add	r30, r30
    72ea:	ff 1f       	adc	r31, r31
    72ec:	e4 5c       	subi	r30, 0xC4	; 196
    72ee:	f5 4e       	sbci	r31, 0xE5	; 229
    72f0:	a5 90       	lpm	r10, Z+
    72f2:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    72f4:	bb 24       	eor	r11, r11
    72f6:	66 0d       	add	r22, r6
    72f8:	77 1d       	adc	r23, r7
    72fa:	1f 92       	push	r1
    72fc:	1f 92       	push	r1
    72fe:	81 2c       	mov	r8, r1
    7300:	c1 2c       	mov	r12, r1
    7302:	e9 80       	ldd	r14, Y+1	; 0x01
    7304:	fa 80       	ldd	r15, Y+2	; 0x02
    7306:	0b 81       	ldd	r16, Y+3	; 0x03
    7308:	1c 81       	ldd	r17, Y+4	; 0x04
    730a:	2d 81       	ldd	r18, Y+5	; 0x05
    730c:	41 e0       	ldi	r20, 0x01	; 1
    730e:	0e 94 1d 34 	call	0x683a	; 0x683a <do_menu_item>
    7312:	0f 90       	pop	r0
    7314:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    7316:	80 91 10 08 	lds	r24, 0x0810
    731a:	80 3e       	cpi	r24, 0xE0	; 224
    731c:	09 f0       	breq	.+2      	; 0x7320 <menu_mixer+0x114>
    731e:	9c cf       	rjmp	.-200    	; 0x7258 <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    7320:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    7324:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    7328:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <Wait_BUTTON4>
    732c:	95 cf       	rjmp	.-214    	; 0x7258 <menu_mixer+0x4c>
		}
	}
}
    732e:	0f 90       	pop	r0
    7330:	0f 90       	pop	r0
    7332:	0f 90       	pop	r0
    7334:	0f 90       	pop	r0
    7336:	0f 90       	pop	r0
    7338:	df 91       	pop	r29
    733a:	cf 91       	pop	r28
    733c:	1f 91       	pop	r17
    733e:	0f 91       	pop	r16
    7340:	ff 90       	pop	r15
    7342:	ef 90       	pop	r14
    7344:	df 90       	pop	r13
    7346:	cf 90       	pop	r12
    7348:	bf 90       	pop	r11
    734a:	af 90       	pop	r10
    734c:	8f 90       	pop	r8
    734e:	7f 90       	pop	r7
    7350:	6f 90       	pop	r6
    7352:	08 95       	ret

00007354 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    7354:	2f 92       	push	r2
    7356:	3f 92       	push	r3
    7358:	4f 92       	push	r4
    735a:	5f 92       	push	r5
    735c:	6f 92       	push	r6
    735e:	7f 92       	push	r7
    7360:	8f 92       	push	r8
    7362:	9f 92       	push	r9
    7364:	af 92       	push	r10
    7366:	bf 92       	push	r11
    7368:	cf 92       	push	r12
    736a:	df 92       	push	r13
    736c:	ef 92       	push	r14
    736e:	ff 92       	push	r15
    7370:	0f 93       	push	r16
    7372:	1f 93       	push	r17
    7374:	cf 93       	push	r28
    7376:	df 93       	push	r29
    7378:	cd b7       	in	r28, 0x3d	; 61
    737a:	de b7       	in	r29, 0x3e	; 62
    737c:	28 97       	sbiw	r28, 0x08	; 8
    737e:	0f b6       	in	r0, 0x3f	; 63
    7380:	f8 94       	cli
    7382:	de bf       	out	0x3e, r29	; 62
    7384:	0f be       	out	0x3f, r0	; 63
    7386:	cd bf       	out	0x3d, r28	; 61
    7388:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    738a:	80 91 12 08 	lds	r24, 0x0812
    738e:	88 23       	and	r24, r24
    7390:	41 f0       	breq	.+16     	; 0x73a2 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    7392:	86 ee       	ldi	r24, 0xE6	; 230
    7394:	90 e0       	ldi	r25, 0x00	; 0
    7396:	90 93 37 05 	sts	0x0537, r25
    739a:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    739e:	10 92 12 08 	sts	0x0812, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    73a2:	1e 82       	std	Y+6, r1	; 0x06
    73a4:	a3 e8       	ldi	r26, 0x83	; 131
    73a6:	6a 2e       	mov	r6, r26
    73a8:	a7 e0       	ldi	r26, 0x07	; 7
    73aa:	7a 2e       	mov	r7, r26
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    73ac:	89 2d       	mov	r24, r9
    73ae:	90 e0       	ldi	r25, 0x00	; 0
    73b0:	01 97       	sbiw	r24, 0x01	; 1
    73b2:	25 e0       	ldi	r18, 0x05	; 5
    73b4:	28 9f       	mul	r18, r24
    73b6:	20 01       	movw	r4, r0
    73b8:	29 9f       	mul	r18, r25
    73ba:	50 0c       	add	r5, r0
    73bc:	11 24       	eor	r1, r1
    73be:	92 01       	movw	r18, r4
    73c0:	20 58       	subi	r18, 0x80	; 128
    73c2:	35 4e       	sbci	r19, 0xE5	; 229
    73c4:	29 01       	movw	r4, r18
    73c6:	1c 01       	movw	r2, r24
    73c8:	b4 e0       	ldi	r27, 0x04	; 4
    73ca:	22 0c       	add	r2, r2
    73cc:	33 1c       	adc	r3, r3
    73ce:	ba 95       	dec	r27
    73d0:	e1 f7       	brne	.-8      	; 0x73ca <menu_servo_setup+0x76>
    73d2:	f1 01       	movw	r30, r2
    73d4:	e1 57       	subi	r30, 0x71	; 113
    73d6:	f5 4e       	sbci	r31, 0xE5	; 229
    73d8:	1f 01       	movw	r2, r30
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);

		if (button == ENTER)
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    73da:	9c 01       	movw	r18, r24
    73dc:	13 e0       	ldi	r17, 0x03	; 3
    73de:	22 0f       	add	r18, r18
    73e0:	33 1f       	adc	r19, r19
    73e2:	1a 95       	dec	r17
    73e4:	e1 f7       	brne	.-8      	; 0x73de <menu_servo_setup+0x8a>
    73e6:	38 87       	std	Y+8, r19	; 0x08
    73e8:	2f 83       	std	Y+7, r18	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    73ea:	80 91 10 08 	lds	r24, 0x0810
    73ee:	80 37       	cpi	r24, 0x70	; 112
    73f0:	09 f4       	brne	.+2      	; 0x73f4 <menu_servo_setup+0xa0>
    73f2:	92 c0       	rjmp	.+292    	; 0x7518 <menu_servo_setup+0x1c4>
    73f4:	88 e0       	ldi	r24, 0x08	; 8
    73f6:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    73f8:	32 e0       	ldi	r19, 0x02	; 2
    73fa:	93 16       	cp	r9, r19
    73fc:	61 f0       	breq	.+24     	; 0x7416 <menu_servo_setup+0xc2>
    73fe:	43 e0       	ldi	r20, 0x03	; 3
    7400:	94 12       	cpse	r9, r20
    7402:	11 c0       	rjmp	.+34     	; 0x7426 <menu_servo_setup+0xd2>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    7404:	e1 e0       	ldi	r30, 0x01	; 1
    7406:	ee 83       	std	Y+6, r30	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    7408:	88 24       	eor	r8, r8
    740a:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    740c:	e3 e9       	ldi	r30, 0x93	; 147
    740e:	6e 2e       	mov	r6, r30
    7410:	e7 e0       	ldi	r30, 0x07	; 7
    7412:	7e 2e       	mov	r7, r30
					servo_enable = true;
					zero_setting = true;
					break;
    7414:	08 c0       	rjmp	.+16     	; 0x7426 <menu_servo_setup+0xd2>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    7416:	91 e0       	ldi	r25, 0x01	; 1
    7418:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    741a:	88 24       	eor	r8, r8
    741c:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    741e:	fb e8       	ldi	r31, 0x8B	; 139
    7420:	6f 2e       	mov	r6, r31
    7422:	f7 e0       	ldi	r31, 0x07	; 7
    7424:	7f 2e       	mov	r7, r31
    7426:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    7428:	39 f7       	brne	.-50     	; 0x73f8 <menu_servo_setup+0xa4>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    742a:	a0 90 04 05 	lds	r10, 0x0504
    742e:	b0 90 05 05 	lds	r11, 0x0505
    7432:	61 01       	movw	r12, r2
    7434:	50 e5       	ldi	r21, 0x50	; 80
    7436:	e5 2e       	mov	r14, r21
    7438:	f1 2c       	mov	r15, r1
    743a:	01 e0       	ldi	r16, 0x01	; 1
    743c:	92 01       	movw	r18, r4
    743e:	a3 01       	movw	r20, r6
    7440:	66 ee       	ldi	r22, 0xE6	; 230
    7442:	70 e0       	ldi	r23, 0x00	; 0
    7444:	80 91 36 05 	lds	r24, 0x0536
    7448:	90 91 37 05 	lds	r25, 0x0537
    744c:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    7450:	61 e3       	ldi	r22, 0x31	; 49
    7452:	c6 2e       	mov	r12, r22
    7454:	65 e0       	ldi	r22, 0x05	; 5
    7456:	d6 2e       	mov	r13, r22
    7458:	76 e3       	ldi	r23, 0x36	; 54
    745a:	e7 2e       	mov	r14, r23
    745c:	75 e0       	ldi	r23, 0x05	; 5
    745e:	f7 2e       	mov	r15, r23
    7460:	04 e0       	ldi	r16, 0x04	; 4
    7462:	15 e0       	ldi	r17, 0x05	; 5
    7464:	20 91 10 08 	lds	r18, 0x0810
    7468:	40 e0       	ldi	r20, 0x00	; 0
    746a:	50 e0       	ldi	r21, 0x00	; 0
    746c:	66 ee       	ldi	r22, 0xE6	; 230
    746e:	70 e0       	ldi	r23, 0x00	; 0
    7470:	88 e0       	ldi	r24, 0x08	; 8
    7472:	90 e0       	ldi	r25, 0x00	; 0
    7474:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    7478:	60 e0       	ldi	r22, 0x00	; 0
    747a:	c2 01       	movw	r24, r4
    747c:	0e 94 91 33 	call	0x6722	; 0x6722 <get_menu_range>
    7480:	29 83       	std	Y+1, r18	; 0x01
    7482:	3a 83       	std	Y+2, r19	; 0x02
    7484:	4b 83       	std	Y+3, r20	; 0x03
    7486:	5c 83       	std	Y+4, r21	; 0x04
    7488:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    748a:	80 91 10 08 	lds	r24, 0x0810
    748e:	80 3e       	cpi	r24, 0xE0	; 224
    7490:	b9 f5       	brne	.+110    	; 0x7500 <menu_servo_setup+0x1ac>
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    7492:	80 91 31 05 	lds	r24, 0x0531
    7496:	90 91 32 05 	lds	r25, 0x0532
    749a:	9c 01       	movw	r18, r24
    749c:	26 5e       	subi	r18, 0xE6	; 230
    749e:	31 09       	sbc	r19, r1
    74a0:	ef 81       	ldd	r30, Y+7	; 0x07
    74a2:	f8 85       	ldd	r31, Y+8	; 0x08
    74a4:	e2 0f       	add	r30, r18
    74a6:	f3 1f       	adc	r31, r19
    74a8:	ee 0f       	add	r30, r30
    74aa:	ff 1f       	adc	r31, r31
    74ac:	e1 57       	subi	r30, 0x71	; 113
    74ae:	f5 4e       	sbci	r31, 0xE5	; 229
    74b0:	a5 90       	lpm	r10, Z+
    74b2:	b4 90       	lpm	r11, Z
    74b4:	b3 01       	movw	r22, r6
    74b6:	62 0f       	add	r22, r18
    74b8:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    74ba:	fe 81       	ldd	r31, Y+6	; 0x06
    74bc:	ff 23       	and	r31, r31
    74be:	11 f0       	breq	.+4      	; 0x74c4 <menu_servo_setup+0x170>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    74c0:	fb 01       	movw	r30, r22
    74c2:	10 82       	st	Z, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    74c4:	46 e2       	ldi	r20, 0x26	; 38
    74c6:	42 9f       	mul	r20, r18
    74c8:	f0 01       	movw	r30, r0
    74ca:	43 9f       	mul	r20, r19
    74cc:	f0 0d       	add	r31, r0
    74ce:	11 24       	eor	r1, r1
    74d0:	ef 58       	subi	r30, 0x8F	; 143
    74d2:	f9 4f       	sbci	r31, 0xF9	; 249
    74d4:	40 81       	ld	r20, Z
    74d6:	41 11       	cpse	r20, r1
    74d8:	05 c0       	rjmp	.+10     	; 0x74e4 <menu_servo_setup+0x190>
    74da:	40 91 ea 05 	lds	r20, 0x05EA
    74de:	41 11       	cpse	r20, r1
    74e0:	01 c0       	rjmp	.+2      	; 0x74e4 <menu_servo_setup+0x190>
			{
				servo_enable = false;
    74e2:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    74e4:	bb 24       	eor	r11, r11
    74e6:	3f 93       	push	r19
    74e8:	2f 93       	push	r18
    74ea:	c1 2c       	mov	r12, r1
    74ec:	e9 80       	ldd	r14, Y+1	; 0x01
    74ee:	fa 80       	ldd	r15, Y+2	; 0x02
    74f0:	0b 81       	ldd	r16, Y+3	; 0x03
    74f2:	1c 81       	ldd	r17, Y+4	; 0x04
    74f4:	2d 81       	ldd	r18, Y+5	; 0x05
    74f6:	41 e0       	ldi	r20, 0x01	; 1
    74f8:	0e 94 1d 34 	call	0x683a	; 0x683a <do_menu_item>
    74fc:	0f 90       	pop	r0
    74fe:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    7500:	80 91 10 08 	lds	r24, 0x0810
    7504:	80 3e       	cpi	r24, 0xE0	; 224
    7506:	09 f0       	breq	.+2      	; 0x750a <menu_servo_setup+0x1b6>
    7508:	70 cf       	rjmp	.-288    	; 0x73ea <menu_servo_setup+0x96>
		{
			UpdateLimits();				// Update actual servo trims
    750a:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    750e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    7512:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <Wait_BUTTON4>
    7516:	69 cf       	rjmp	.-302    	; 0x73ea <menu_servo_setup+0x96>
		}
	}
}
    7518:	28 96       	adiw	r28, 0x08	; 8
    751a:	0f b6       	in	r0, 0x3f	; 63
    751c:	f8 94       	cli
    751e:	de bf       	out	0x3e, r29	; 62
    7520:	0f be       	out	0x3f, r0	; 63
    7522:	cd bf       	out	0x3d, r28	; 61
    7524:	df 91       	pop	r29
    7526:	cf 91       	pop	r28
    7528:	1f 91       	pop	r17
    752a:	0f 91       	pop	r16
    752c:	ff 90       	pop	r15
    752e:	ef 90       	pop	r14
    7530:	df 90       	pop	r13
    7532:	cf 90       	pop	r12
    7534:	bf 90       	pop	r11
    7536:	af 90       	pop	r10
    7538:	9f 90       	pop	r9
    753a:	8f 90       	pop	r8
    753c:	7f 90       	pop	r7
    753e:	6f 90       	pop	r6
    7540:	5f 90       	pop	r5
    7542:	4f 90       	pop	r4
    7544:	3f 90       	pop	r3
    7546:	2f 90       	pop	r2
    7548:	08 95       	ret

0000754a <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    754a:	2f 92       	push	r2
    754c:	3f 92       	push	r3
    754e:	4f 92       	push	r4
    7550:	5f 92       	push	r5
    7552:	6f 92       	push	r6
    7554:	7f 92       	push	r7
    7556:	8f 92       	push	r8
    7558:	9f 92       	push	r9
    755a:	af 92       	push	r10
    755c:	bf 92       	push	r11
    755e:	cf 92       	push	r12
    7560:	df 92       	push	r13
    7562:	ef 92       	push	r14
    7564:	ff 92       	push	r15
    7566:	0f 93       	push	r16
    7568:	1f 93       	push	r17
    756a:	cf 93       	push	r28
    756c:	df 93       	push	r29
    756e:	cd b7       	in	r28, 0x3d	; 61
    7570:	de b7       	in	r29, 0x3e	; 62
    7572:	2b 97       	sbiw	r28, 0x0b	; 11
    7574:	0f b6       	in	r0, 0x3f	; 63
    7576:	f8 94       	cli
    7578:	de bf       	out	0x3e, r29	; 62
    757a:	0f be       	out	0x3f, r0	; 63
    757c:	cd bf       	out	0x3d, r28	; 61
    757e:	98 2e       	mov	r9, r24
	uint8_t		i;
	uint16_t	offset = 0;			// Index into channel structure
	uint16_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    7580:	80 91 12 08 	lds	r24, 0x0812
    7584:	88 23       	and	r24, r24
    7586:	41 f0       	breq	.+16     	; 0x7598 <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    7588:	85 e9       	ldi	r24, 0x95	; 149
    758a:	90 e0       	ldi	r25, 0x00	; 0
    758c:	90 93 37 05 	sts	0x0537, r25
    7590:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    7594:	10 92 12 08 	sts	0x0812, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    7598:	27 e0       	ldi	r18, 0x07	; 7
    759a:	30 e0       	ldi	r19, 0x00	; 0
    759c:	39 87       	std	Y+9, r19	; 0x09
    759e:	28 87       	std	Y+8, r18	; 0x08
    75a0:	61 2c       	mov	r6, r1
    75a2:	71 2c       	mov	r7, r1
    75a4:	4a ee       	ldi	r20, 0xEA	; 234
    75a6:	55 e0       	ldi	r21, 0x05	; 5
    75a8:	5f 83       	std	Y+7, r21	; 0x07
    75aa:	4e 83       	std	Y+6, r20	; 0x06

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    75ac:	89 2d       	mov	r24, r9
    75ae:	90 e0       	ldi	r25, 0x00	; 0
    75b0:	01 97       	sbiw	r24, 0x01	; 1
    75b2:	22 e3       	ldi	r18, 0x32	; 50
    75b4:	28 9f       	mul	r18, r24
    75b6:	20 01       	movw	r4, r0
    75b8:	29 9f       	mul	r18, r25
    75ba:	50 0c       	add	r5, r0
    75bc:	11 24       	eor	r1, r1
    75be:	92 01       	movw	r18, r4
    75c0:	21 54       	subi	r18, 0x41	; 65
    75c2:	35 4e       	sbci	r19, 0xE5	; 229
    75c4:	29 01       	movw	r4, r18
    75c6:	24 e1       	ldi	r18, 0x14	; 20
    75c8:	28 9f       	mul	r18, r24
    75ca:	10 01       	movw	r2, r0
    75cc:	29 9f       	mul	r18, r25
    75ce:	30 0c       	add	r3, r0
    75d0:	11 24       	eor	r1, r1
    75d2:	a1 01       	movw	r20, r2
    75d4:	4d 5d       	subi	r20, 0xDD	; 221
    75d6:	54 4e       	sbci	r21, 0xE4	; 228
    75d8:	1a 01       	movw	r2, r20
			Config.Preset = QUADX;			
		}

		if (button == ENTER)
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    75da:	2a e0       	ldi	r18, 0x0A	; 10
    75dc:	28 9f       	mul	r18, r24
    75de:	a0 01       	movw	r20, r0
    75e0:	29 9f       	mul	r18, r25
    75e2:	50 0d       	add	r21, r0
    75e4:	11 24       	eor	r1, r1
    75e6:	5b 87       	std	Y+11, r21	; 0x0b
    75e8:	4a 87       	std	Y+10, r20	; 0x0a
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    75ea:	80 91 10 08 	lds	r24, 0x0810
    75ee:	80 37       	cpi	r24, 0x70	; 112
    75f0:	09 f4       	brne	.+2      	; 0x75f4 <menu_rc_setup+0xaa>
    75f2:	d3 c0       	rjmp	.+422    	; 0x779a <menu_rc_setup+0x250>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    75f4:	52 e0       	ldi	r21, 0x02	; 2
    75f6:	95 12       	cpse	r9, r21
    75f8:	0b c0       	rjmp	.+22     	; 0x7610 <menu_rc_setup+0xc6>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
    75fa:	8a e0       	ldi	r24, 0x0A	; 10
    75fc:	90 e0       	ldi	r25, 0x00	; 0
    75fe:	99 87       	std	Y+9, r25	; 0x09
    7600:	88 87       	std	Y+8, r24	; 0x08
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    7602:	69 e0       	ldi	r22, 0x09	; 9
    7604:	66 2e       	mov	r6, r22
    7606:	71 2c       	mov	r7, r1
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    7608:	29 e4       	ldi	r18, 0x49	; 73
    760a:	36 e0       	ldi	r19, 0x06	; 6
    760c:	3f 83       	std	Y+7, r19	; 0x07
    760e:	2e 83       	std	Y+6, r18	; 0x06
			default:
				break;
		}

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;
    7610:	84 e0       	ldi	r24, 0x04	; 4
    7612:	80 93 52 06 	sts	0x0652, r24

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    7616:	a0 90 04 05 	lds	r10, 0x0504
    761a:	b0 90 05 05 	lds	r11, 0x0505
    761e:	80 91 36 05 	lds	r24, 0x0536
    7622:	90 91 37 05 	lds	r25, 0x0537
    7626:	61 01       	movw	r12, r2
    7628:	3f e4       	ldi	r19, 0x4F	; 79
    762a:	e3 2e       	mov	r14, r19
    762c:	f1 2c       	mov	r15, r1
    762e:	00 e0       	ldi	r16, 0x00	; 0
    7630:	92 01       	movw	r18, r4
    7632:	4e 81       	ldd	r20, Y+6	; 0x06
    7634:	5f 81       	ldd	r21, Y+7	; 0x07
    7636:	b3 01       	movw	r22, r6
    7638:	6b 56       	subi	r22, 0x6B	; 107
    763a:	7f 4f       	sbci	r23, 0xFF	; 255
    763c:	86 0d       	add	r24, r6
    763e:	97 1d       	adc	r25, r7
    7640:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    7644:	41 e3       	ldi	r20, 0x31	; 49
    7646:	c4 2e       	mov	r12, r20
    7648:	45 e0       	ldi	r20, 0x05	; 5
    764a:	d4 2e       	mov	r13, r20
    764c:	56 e3       	ldi	r21, 0x36	; 54
    764e:	e5 2e       	mov	r14, r21
    7650:	55 e0       	ldi	r21, 0x05	; 5
    7652:	f5 2e       	mov	r15, r21
    7654:	04 e0       	ldi	r16, 0x04	; 4
    7656:	15 e0       	ldi	r17, 0x05	; 5
    7658:	20 91 10 08 	lds	r18, 0x0810
    765c:	a3 01       	movw	r20, r6
    765e:	65 e9       	ldi	r22, 0x95	; 149
    7660:	70 e0       	ldi	r23, 0x00	; 0
    7662:	88 85       	ldd	r24, Y+8	; 0x08
    7664:	99 85       	ldd	r25, Y+9	; 0x09
    7666:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    766a:	60 91 31 05 	lds	r22, 0x0531
    766e:	65 59       	subi	r22, 0x95	; 149
    7670:	66 19       	sub	r22, r6
    7672:	c2 01       	movw	r24, r4
    7674:	0e 94 91 33 	call	0x6722	; 0x6722 <get_menu_range>
    7678:	29 83       	std	Y+1, r18	; 0x01
    767a:	3a 83       	std	Y+2, r19	; 0x02
    767c:	4b 83       	std	Y+3, r20	; 0x03
    767e:	5c 83       	std	Y+4, r21	; 0x04
    7680:	6d 83       	std	Y+5, r22	; 0x05

		// If actually editing the preset, show the default setting
		if (menu_temp == PRESETITEM)
    7682:	80 91 31 05 	lds	r24, 0x0531
    7686:	90 91 32 05 	lds	r25, 0x0532
    768a:	87 3a       	cpi	r24, 0xA7	; 167
    768c:	91 05       	cpc	r25, r1
    768e:	11 f4       	brne	.+4      	; 0x7694 <menu_rc_setup+0x14a>
		{
			Config.Preset = QUADX;			
    7690:	10 92 52 06 	sts	0x0652, r1
		}

		if (button == ENTER)
    7694:	20 91 10 08 	lds	r18, 0x0810
    7698:	20 3e       	cpi	r18, 0xE0	; 224
    769a:	09 f5       	brne	.+66     	; 0x76de <menu_rc_setup+0x194>
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    769c:	bc 01       	movw	r22, r24
    769e:	65 59       	subi	r22, 0x95	; 149
    76a0:	71 09       	sbc	r23, r1
    76a2:	66 19       	sub	r22, r6
    76a4:	77 09       	sbc	r23, r7
    76a6:	ea 85       	ldd	r30, Y+10	; 0x0a
    76a8:	fb 85       	ldd	r31, Y+11	; 0x0b
    76aa:	e6 0f       	add	r30, r22
    76ac:	f7 1f       	adc	r31, r23
    76ae:	ee 0f       	add	r30, r30
    76b0:	ff 1f       	adc	r31, r31
    76b2:	ed 5d       	subi	r30, 0xDD	; 221
    76b4:	f4 4e       	sbci	r31, 0xE4	; 228
    76b6:	a5 90       	lpm	r10, Z+
    76b8:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    76ba:	4e 81       	ldd	r20, Y+6	; 0x06
    76bc:	5f 81       	ldd	r21, Y+7	; 0x07
    76be:	64 0f       	add	r22, r20
    76c0:	75 1f       	adc	r23, r21
    76c2:	1f 92       	push	r1
    76c4:	1f 92       	push	r1
    76c6:	81 2c       	mov	r8, r1
    76c8:	c1 2c       	mov	r12, r1
    76ca:	e9 80       	ldd	r14, Y+1	; 0x01
    76cc:	fa 80       	ldd	r15, Y+2	; 0x02
    76ce:	0b 81       	ldd	r16, Y+3	; 0x03
    76d0:	1c 81       	ldd	r17, Y+4	; 0x04
    76d2:	2d 81       	ldd	r18, Y+5	; 0x05
    76d4:	41 e0       	ldi	r20, 0x01	; 1
    76d6:	0e 94 1d 34 	call	0x683a	; 0x683a <do_menu_item>
    76da:	0f 90       	pop	r0
    76dc:	0f 90       	pop	r0
		}

		// Handle abort neatly
		if (button == ABORT)
    76de:	80 91 10 08 	lds	r24, 0x0810
    76e2:	80 3a       	cpi	r24, 0xA0	; 160
    76e4:	41 f4       	brne	.+16     	; 0x76f6 <menu_rc_setup+0x1ac>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    76e6:	0e 94 63 38 	call	0x70c6	; 0x70c6 <Wait_BUTTON1>
			button = NONE;
    76ea:	80 ef       	ldi	r24, 0xF0	; 240
    76ec:	80 93 10 08 	sts	0x0810, r24
			
			// Reset the mixer preset if unchanged
			Config.Preset = OPTIONS;
    76f0:	84 e0       	ldi	r24, 0x04	; 4
    76f2:	80 93 52 06 	sts	0x0652, r24
		}

		if (button == ENTER)
    76f6:	80 91 10 08 	lds	r24, 0x0810
    76fa:	80 3e       	cpi	r24, 0xE0	; 224
    76fc:	09 f0       	breq	.+2      	; 0x7700 <menu_rc_setup+0x1b6>
    76fe:	75 cf       	rjmp	.-278    	; 0x75ea <menu_rc_setup+0xa0>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    7700:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <init_int>
			init_uart();			// and UART
    7704:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    7708:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <UpdateLimits>
			
			// See if mixer preset has changed. Load new preset only if so
			if ((Config.Preset != OPTIONS) && (menu_temp == PRESETITEM))
    770c:	80 91 52 06 	lds	r24, 0x0652
    7710:	84 30       	cpi	r24, 0x04	; 4
    7712:	49 f0       	breq	.+18     	; 0x7726 <menu_rc_setup+0x1dc>
    7714:	20 91 31 05 	lds	r18, 0x0531
    7718:	30 91 32 05 	lds	r19, 0x0532
    771c:	27 3a       	cpi	r18, 0xA7	; 167
    771e:	31 05       	cpc	r19, r1
    7720:	11 f4       	brne	.+4      	; 0x7726 <menu_rc_setup+0x1dc>
			{
				Load_eeprom_preset(Config.Preset);
    7722:	0e 94 93 1a 	call	0x3526	; 0x3526 <Load_eeprom_preset>
			}

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    7726:	46 e0       	ldi	r20, 0x06	; 6
    7728:	80 91 4e 06 	lds	r24, 0x064E
    772c:	48 1b       	sub	r20, r24
    772e:	6a e1       	ldi	r22, 0x1A	; 26
    7730:	80 ed       	ldi	r24, 0xD0	; 208
    7732:	0e 94 88 28 	call	0x5110	; 0x5110 <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    7736:	20 91 ed 05 	lds	r18, 0x05ED
    773a:	a2 ec       	ldi	r26, 0xC2	; 194
    773c:	b5 e0       	ldi	r27, 0x05	; 5
    773e:	80 e0       	ldi	r24, 0x00	; 0
    7740:	90 e0       	ldi	r25, 0x00	; 0
    7742:	fc 01       	movw	r30, r24
    7744:	21 30       	cpi	r18, 0x01	; 1
    7746:	19 f4       	brne	.+6      	; 0x774e <menu_rc_setup+0x204>
    7748:	e0 51       	subi	r30, 0x10	; 16
    774a:	ff 4f       	sbci	r31, 0xFF	; 255
    774c:	02 c0       	rjmp	.+4      	; 0x7752 <menu_rc_setup+0x208>
    774e:	e8 50       	subi	r30, 0x08	; 8
    7750:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    7752:	e4 91       	lpm	r30, Z
    7754:	ec 93       	st	X, r30
    7756:	01 96       	adiw	r24, 0x01	; 1
    7758:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    775a:	88 30       	cpi	r24, 0x08	; 8
    775c:	91 05       	cpc	r25, r1
    775e:	89 f7       	brne	.-30     	; 0x7742 <menu_rc_setup+0x1f8>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    7760:	80 91 ea 05 	lds	r24, 0x05EA
    7764:	82 30       	cpi	r24, 0x02	; 2
    7766:	3c f4       	brge	.+14     	; 0x7776 <menu_rc_setup+0x22c>
    7768:	80 91 eb 05 	lds	r24, 0x05EB
    776c:	82 30       	cpi	r24, 0x02	; 2
    776e:	19 f4       	brne	.+6      	; 0x7776 <menu_rc_setup+0x22c>
			{
				Config.Servo_rate = SYNC;
    7770:	81 e0       	ldi	r24, 0x01	; 1
    7772:	80 93 eb 05 	sts	0x05EB, r24
			}
						
			if (Config.ArmMode == ARMABLE)
    7776:	80 91 4b 06 	lds	r24, 0x064B
    777a:	81 30       	cpi	r24, 0x01	; 1
    777c:	31 f4       	brne	.+12     	; 0x778a <menu_rc_setup+0x240>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    777e:	80 91 20 05 	lds	r24, 0x0520
    7782:	84 60       	ori	r24, 0x04	; 4
    7784:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    7788:	2b 98       	cbi	0x05, 3	; 5
			}

			// Return the preset to "Options" when going back to the General menu
			Config.Preset = OPTIONS;
    778a:	84 e0       	ldi	r24, 0x04	; 4
    778c:	80 93 52 06 	sts	0x0652, r24

			Save_Config_to_EEPROM(); // Save value and return
    7790:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    7794:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <Wait_BUTTON4>
    7798:	28 cf       	rjmp	.-432    	; 0x75ea <menu_rc_setup+0xa0>
		}
	}
}
    779a:	2b 96       	adiw	r28, 0x0b	; 11
    779c:	0f b6       	in	r0, 0x3f	; 63
    779e:	f8 94       	cli
    77a0:	de bf       	out	0x3e, r29	; 62
    77a2:	0f be       	out	0x3f, r0	; 63
    77a4:	cd bf       	out	0x3d, r28	; 61
    77a6:	df 91       	pop	r29
    77a8:	cf 91       	pop	r28
    77aa:	1f 91       	pop	r17
    77ac:	0f 91       	pop	r16
    77ae:	ff 90       	pop	r15
    77b0:	ef 90       	pop	r14
    77b2:	df 90       	pop	r13
    77b4:	cf 90       	pop	r12
    77b6:	bf 90       	pop	r11
    77b8:	af 90       	pop	r10
    77ba:	9f 90       	pop	r9
    77bc:	8f 90       	pop	r8
    77be:	7f 90       	pop	r7
    77c0:	6f 90       	pop	r6
    77c2:	5f 90       	pop	r5
    77c4:	4f 90       	pop	r4
    77c6:	3f 90       	pop	r3
    77c8:	2f 90       	pop	r2
    77ca:	08 95       	ret

000077cc <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    77cc:	6f 92       	push	r6
    77ce:	7f 92       	push	r7
    77d0:	8f 92       	push	r8
    77d2:	9f 92       	push	r9
    77d4:	af 92       	push	r10
    77d6:	bf 92       	push	r11
    77d8:	cf 92       	push	r12
    77da:	df 92       	push	r13
    77dc:	ef 92       	push	r14
    77de:	ff 92       	push	r15
    77e0:	0f 93       	push	r16
    77e2:	1f 93       	push	r17
    77e4:	cf 93       	push	r28
    77e6:	df 93       	push	r29
    77e8:	cd b7       	in	r28, 0x3d	; 61
    77ea:	de b7       	in	r29, 0x3e	; 62
    77ec:	2c 97       	sbiw	r28, 0x0c	; 12
    77ee:	0f b6       	in	r0, 0x3f	; 63
    77f0:	f8 94       	cli
    77f2:	de bf       	out	0x3e, r29	; 62
    77f4:	0f be       	out	0x3f, r0	; 63
    77f6:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    77f8:	80 91 f5 05 	lds	r24, 0x05F5
    77fc:	8f 83       	std	Y+7, r24	; 0x07
    77fe:	80 91 fb 05 	lds	r24, 0x05FB
    7802:	88 87       	std	Y+8, r24	; 0x08
    7804:	80 91 01 06 	lds	r24, 0x0601
    7808:	89 87       	std	Y+9, r24	; 0x09
    780a:	80 91 07 06 	lds	r24, 0x0607
    780e:	8a 87       	std	Y+10, r24	; 0x0a
    7810:	80 91 0d 06 	lds	r24, 0x060D
    7814:	8b 87       	std	Y+11, r24	; 0x0b
    7816:	80 91 13 06 	lds	r24, 0x0613
    781a:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    781c:	80 91 f4 05 	lds	r24, 0x05F4
    7820:	89 83       	std	Y+1, r24	; 0x01
    7822:	80 91 fa 05 	lds	r24, 0x05FA
    7826:	8a 83       	std	Y+2, r24	; 0x02
    7828:	80 91 00 06 	lds	r24, 0x0600
    782c:	8b 83       	std	Y+3, r24	; 0x03
    782e:	80 91 06 06 	lds	r24, 0x0606
    7832:	8c 83       	std	Y+4, r24	; 0x04
    7834:	80 91 0c 06 	lds	r24, 0x060C
    7838:	8d 83       	std	Y+5, r24	; 0x05
    783a:	80 91 12 06 	lds	r24, 0x0612
    783e:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    7840:	80 91 4d 06 	lds	r24, 0x064D
    7844:	99 27       	eor	r25, r25
    7846:	87 fd       	sbrc	r24, 7
    7848:	90 95       	com	r25
    784a:	a9 2f       	mov	r26, r25
    784c:	b9 2f       	mov	r27, r25
    784e:	89 30       	cpi	r24, 0x09	; 9
    7850:	91 05       	cpc	r25, r1
    7852:	08 f5       	brcc	.+66     	; 0x7896 <UpdateLimits+0xca>
    7854:	fc 01       	movw	r30, r24
    7856:	e3 5a       	subi	r30, 0xA3	; 163
    7858:	ff 4f       	sbci	r31, 0xFF	; 255
    785a:	0c 94 67 4e 	jmp	0x9cce	; 0x9cce <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    785e:	80 e4       	ldi	r24, 0x40	; 64
    7860:	91 e0       	ldi	r25, 0x01	; 1
    7862:	14 c0       	rjmp	.+40     	; 0x788c <UpdateLimits+0xc0>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    7864:	8a e4       	ldi	r24, 0x4A	; 74
    7866:	91 e0       	ldi	r25, 0x01	; 1
    7868:	11 c0       	rjmp	.+34     	; 0x788c <UpdateLimits+0xc0>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    786a:	84 e5       	ldi	r24, 0x54	; 84
    786c:	91 e0       	ldi	r25, 0x01	; 1
    786e:	0e c0       	rjmp	.+28     	; 0x788c <UpdateLimits+0xc0>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    7870:	8e e5       	ldi	r24, 0x5E	; 94
    7872:	91 e0       	ldi	r25, 0x01	; 1
    7874:	0b c0       	rjmp	.+22     	; 0x788c <UpdateLimits+0xc0>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    7876:	88 e6       	ldi	r24, 0x68	; 104
    7878:	91 e0       	ldi	r25, 0x01	; 1
    787a:	08 c0       	rjmp	.+16     	; 0x788c <UpdateLimits+0xc0>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    787c:	82 e7       	ldi	r24, 0x72	; 114
    787e:	91 e0       	ldi	r25, 0x01	; 1
    7880:	05 c0       	rjmp	.+10     	; 0x788c <UpdateLimits+0xc0>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    7882:	8c e7       	ldi	r24, 0x7C	; 124
    7884:	91 e0       	ldi	r25, 0x01	; 1
    7886:	02 c0       	rjmp	.+4      	; 0x788c <UpdateLimits+0xc0>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    7888:	86 e8       	ldi	r24, 0x86	; 134
    788a:	91 e0       	ldi	r25, 0x01	; 1
    788c:	90 93 48 06 	sts	0x0648, r25
    7890:	80 93 47 06 	sts	0x0647, r24
			break;
    7894:	04 c0       	rjmp	.+8      	; 0x789e <UpdateLimits+0xd2>
		default:
			Config.PowerTriggerActual = 0;			// Off
    7896:	10 92 48 06 	sts	0x0648, r1
    789a:	10 92 47 06 	sts	0x0647, r1
			break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    789e:	20 91 2e 05 	lds	r18, 0x052E
    78a2:	30 91 2f 05 	lds	r19, 0x052F
    78a6:	80 91 47 06 	lds	r24, 0x0647
    78aa:	90 91 48 06 	lds	r25, 0x0648
    78ae:	26 36       	cpi	r18, 0x66	; 102
    78b0:	48 e0       	ldi	r20, 0x08	; 8
    78b2:	34 07       	cpc	r19, r20
    78b4:	88 f0       	brcs	.+34     	; 0x78d8 <UpdateLimits+0x10c>
	{
		Config.PowerTriggerActual *= 6;
    78b6:	46 e0       	ldi	r20, 0x06	; 6
    78b8:	48 9f       	mul	r20, r24
    78ba:	90 01       	movw	r18, r0
    78bc:	49 9f       	mul	r20, r25
    78be:	30 0d       	add	r19, r0
    78c0:	11 24       	eor	r1, r1
    78c2:	30 93 48 06 	sts	0x0648, r19
    78c6:	20 93 47 06 	sts	0x0647, r18
    78ca:	77 e1       	ldi	r23, 0x17	; 23
    78cc:	a7 2e       	mov	r10, r23
    78ce:	76 e0       	ldi	r23, 0x06	; 6
    78d0:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    78d2:	00 e0       	ldi	r16, 0x00	; 0
    78d4:	10 e0       	ldi	r17, 0x00	; 0
    78d6:	25 c0       	rjmp	.+74     	; 0x7922 <UpdateLimits+0x156>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    78d8:	a9 01       	movw	r20, r18
    78da:	42 5c       	subi	r20, 0xC2	; 194
    78dc:	56 40       	sbci	r21, 0x06	; 6
    78de:	44 3a       	cpi	r20, 0xA4	; 164
    78e0:	51 40       	sbci	r21, 0x01	; 1
    78e2:	10 f4       	brcc	.+4      	; 0x78e8 <UpdateLimits+0x11c>
	{
		Config.PowerTriggerActual *= 5;
    78e4:	45 e0       	ldi	r20, 0x05	; 5
    78e6:	e8 cf       	rjmp	.-48     	; 0x78b8 <UpdateLimits+0xec>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    78e8:	a9 01       	movw	r20, r18
    78ea:	44 51       	subi	r20, 0x14	; 20
    78ec:	55 40       	sbci	r21, 0x05	; 5
    78ee:	4e 3a       	cpi	r20, 0xAE	; 174
    78f0:	51 40       	sbci	r21, 0x01	; 1
    78f2:	28 f4       	brcc	.+10     	; 0x78fe <UpdateLimits+0x132>
	{
		Config.PowerTriggerActual *= 4;
    78f4:	88 0f       	add	r24, r24
    78f6:	99 1f       	adc	r25, r25
    78f8:	88 0f       	add	r24, r24
    78fa:	99 1f       	adc	r25, r25
    78fc:	0d c0       	rjmp	.+26     	; 0x7918 <UpdateLimits+0x14c>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    78fe:	24 58       	subi	r18, 0x84	; 132
    7900:	33 40       	sbci	r19, 0x03	; 3
    7902:	20 39       	cpi	r18, 0x90	; 144
    7904:	31 40       	sbci	r19, 0x01	; 1
    7906:	30 f4       	brcc	.+12     	; 0x7914 <UpdateLimits+0x148>
	{
		Config.PowerTriggerActual *= 3;
    7908:	9c 01       	movw	r18, r24
    790a:	22 0f       	add	r18, r18
    790c:	33 1f       	adc	r19, r19
    790e:	28 0f       	add	r18, r24
    7910:	39 1f       	adc	r19, r25
    7912:	d7 cf       	rjmp	.-82     	; 0x78c2 <UpdateLimits+0xf6>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    7914:	88 0f       	add	r24, r24
    7916:	99 1f       	adc	r25, r25
    7918:	90 93 48 06 	sts	0x0648, r25
    791c:	80 93 47 06 	sts	0x0647, r24
    7920:	d4 cf       	rjmp	.-88     	; 0x78ca <UpdateLimits+0xfe>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7922:	65 01       	movw	r12, r10
    7924:	e1 2c       	mov	r14, r1
    7926:	f1 2c       	mov	r15, r1
    7928:	87 e0       	ldi	r24, 0x07	; 7
    792a:	88 2e       	mov	r8, r24
    792c:	91 2c       	mov	r9, r1
    792e:	8c 0e       	add	r8, r28
    7930:	9d 1e       	adc	r9, r29
    7932:	80 0e       	add	r8, r16
    7934:	91 1e       	adc	r9, r17
    7936:	66 24       	eor	r6, r6
    7938:	63 94       	inc	r6
    793a:	71 2c       	mov	r7, r1
    793c:	6c 0e       	add	r6, r28
    793e:	7d 1e       	adc	r7, r29
    7940:	60 0e       	add	r6, r16
    7942:	71 1e       	adc	r7, r17
    7944:	f4 01       	movw	r30, r8
    7946:	ee 0d       	add	r30, r14
    7948:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    794a:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    794c:	bb 27       	eor	r27, r27
    794e:	a7 fd       	sbrc	r26, 7
    7950:	b0 95       	com	r27
    7952:	20 e8       	ldi	r18, 0x80	; 128
    7954:	32 e0       	ldi	r19, 0x02	; 2
    7956:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <__usmulhisi3>
    795a:	f6 01       	movw	r30, r12
    795c:	61 93       	st	Z+, r22
    795e:	71 93       	st	Z+, r23
    7960:	81 93       	st	Z+, r24
    7962:	91 93       	st	Z+, r25
    7964:	6f 01       	movw	r12, r30
    7966:	f3 01       	movw	r30, r6
    7968:	ee 0d       	add	r30, r14
    796a:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    796c:	20 81       	ld	r18, Z
    796e:	22 23       	and	r18, r18
    7970:	b1 f0       	breq	.+44     	; 0x799e <UpdateLimits+0x1d2>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    7972:	35 e0       	ldi	r19, 0x05	; 5
    7974:	66 0f       	add	r22, r22
    7976:	77 1f       	adc	r23, r23
    7978:	88 1f       	adc	r24, r24
    797a:	99 1f       	adc	r25, r25
    797c:	3a 95       	dec	r19
    797e:	d1 f7       	brne	.-12     	; 0x7974 <UpdateLimits+0x1a8>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    7980:	33 27       	eor	r19, r19
    7982:	27 fd       	sbrc	r18, 7
    7984:	30 95       	com	r19
    7986:	43 2f       	mov	r20, r19
    7988:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    798a:	0e 94 48 4e 	call	0x9c90	; 0x9c90 <__divmodsi4>
    798e:	d6 01       	movw	r26, r12
    7990:	54 96       	adiw	r26, 0x14	; 20
    7992:	2d 93       	st	X+, r18
    7994:	3d 93       	st	X+, r19
    7996:	4d 93       	st	X+, r20
    7998:	5c 93       	st	X, r21
    799a:	57 97       	sbiw	r26, 0x17	; 23
    799c:	05 c0       	rjmp	.+10     	; 0x79a8 <UpdateLimits+0x1dc>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    799e:	f6 01       	movw	r30, r12
    79a0:	14 8a       	std	Z+20, r1	; 0x14
    79a2:	15 8a       	std	Z+21, r1	; 0x15
    79a4:	16 8a       	std	Z+22, r1	; 0x16
    79a6:	17 8a       	std	Z+23, r1	; 0x17
    79a8:	ff ef       	ldi	r31, 0xFF	; 255
    79aa:	ef 1a       	sub	r14, r31
    79ac:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    79ae:	23 e0       	ldi	r18, 0x03	; 3
    79b0:	e2 16       	cp	r14, r18
    79b2:	f1 04       	cpc	r15, r1
    79b4:	39 f6       	brne	.-114    	; 0x7944 <UpdateLimits+0x178>
    79b6:	4c e0       	ldi	r20, 0x0C	; 12
    79b8:	a4 0e       	add	r10, r20
    79ba:	b1 1c       	adc	r11, r1
    79bc:	0d 5f       	subi	r16, 0xFD	; 253
    79be:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    79c0:	06 30       	cpi	r16, 0x06	; 6
    79c2:	11 05       	cpc	r17, r1
    79c4:	09 f0       	breq	.+2      	; 0x79c8 <UpdateLimits+0x1fc>
    79c6:	ad cf       	rjmp	.-166    	; 0x7922 <UpdateLimits+0x156>
    79c8:	8b e8       	ldi	r24, 0x8B	; 139
    79ca:	97 e0       	ldi	r25, 0x07	; 7
    79cc:	ea ec       	ldi	r30, 0xCA	; 202
    79ce:	f5 e0       	ldi	r31, 0x05	; 5
    79d0:	63 e9       	ldi	r22, 0x93	; 147
    79d2:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    79d4:	dc 01       	movw	r26, r24
    79d6:	2d 91       	ld	r18, X+
    79d8:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    79da:	ba e0       	ldi	r27, 0x0A	; 10
    79dc:	2b 02       	muls	r18, r27
    79de:	90 01       	movw	r18, r0
    79e0:	11 24       	eor	r1, r1
    79e2:	2a 55       	subi	r18, 0x5A	; 90
    79e4:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    79e6:	31 83       	std	Z+1, r19	; 0x01
    79e8:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    79ea:	db 01       	movw	r26, r22
    79ec:	2d 91       	ld	r18, X+
    79ee:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    79f0:	ba e0       	ldi	r27, 0x0A	; 10
    79f2:	2b 02       	muls	r18, r27
    79f4:	90 01       	movw	r18, r0
    79f6:	11 24       	eor	r1, r1
    79f8:	2a 55       	subi	r18, 0x5A	; 90
    79fa:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    79fc:	33 83       	std	Z+3, r19	; 0x03
    79fe:	22 83       	std	Z+2, r18	; 0x02
    7a00:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    7a02:	25 e0       	ldi	r18, 0x05	; 5
    7a04:	ea 3e       	cpi	r30, 0xEA	; 234
    7a06:	f2 07       	cpc	r31, r18
    7a08:	29 f7       	brne	.-54     	; 0x79d4 <UpdateLimits+0x208>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    7a0a:	80 91 f8 05 	lds	r24, 0x05F8
    7a0e:	4a e0       	ldi	r20, 0x0A	; 10
    7a10:	84 02       	muls	r24, r20
    7a12:	c0 01       	movw	r24, r0
    7a14:	11 24       	eor	r1, r1
    7a16:	90 93 c1 07 	sts	0x07C1, r25
    7a1a:	80 93 c0 07 	sts	0x07C0, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    7a1e:	80 91 fe 05 	lds	r24, 0x05FE
    7a22:	6a e0       	ldi	r22, 0x0A	; 10
    7a24:	86 02       	muls	r24, r22
    7a26:	c0 01       	movw	r24, r0
    7a28:	11 24       	eor	r1, r1
    7a2a:	90 93 c5 07 	sts	0x07C5, r25
    7a2e:	80 93 c4 07 	sts	0x07C4, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    7a32:	80 91 0a 06 	lds	r24, 0x060A
    7a36:	aa e0       	ldi	r26, 0x0A	; 10
    7a38:	8a 02       	muls	r24, r26
    7a3a:	c0 01       	movw	r24, r0
    7a3c:	11 24       	eor	r1, r1
    7a3e:	90 93 c3 07 	sts	0x07C3, r25
    7a42:	80 93 c2 07 	sts	0x07C2, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    7a46:	80 91 10 06 	lds	r24, 0x0610
    7a4a:	ba e0       	ldi	r27, 0x0A	; 10
    7a4c:	8b 02       	muls	r24, r27
    7a4e:	c0 01       	movw	r24, r0
    7a50:	11 24       	eor	r1, r1
    7a52:	90 93 c7 07 	sts	0x07C7, r25
    7a56:	80 93 c6 07 	sts	0x07C6, r24
	}
}
    7a5a:	2c 96       	adiw	r28, 0x0c	; 12
    7a5c:	0f b6       	in	r0, 0x3f	; 63
    7a5e:	f8 94       	cli
    7a60:	de bf       	out	0x3e, r29	; 62
    7a62:	0f be       	out	0x3f, r0	; 63
    7a64:	cd bf       	out	0x3d, r28	; 61
    7a66:	df 91       	pop	r29
    7a68:	cf 91       	pop	r28
    7a6a:	1f 91       	pop	r17
    7a6c:	0f 91       	pop	r16
    7a6e:	ff 90       	pop	r15
    7a70:	ef 90       	pop	r14
    7a72:	df 90       	pop	r13
    7a74:	cf 90       	pop	r12
    7a76:	bf 90       	pop	r11
    7a78:	af 90       	pop	r10
    7a7a:	9f 90       	pop	r9
    7a7c:	8f 90       	pop	r8
    7a7e:	7f 90       	pop	r7
    7a80:	6f 90       	pop	r6
    7a82:	08 95       	ret

00007a84 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    7a84:	0f 93       	push	r16
    7a86:	1f 93       	push	r17
    7a88:	cf 93       	push	r28
    7a8a:	df 93       	push	r29
    7a8c:	a3 e5       	ldi	r26, 0x53	; 83
    7a8e:	b6 e0       	ldi	r27, 0x06	; 6
    7a90:	03 e8       	ldi	r16, 0x83	; 131
    7a92:	17 e0       	ldi	r17, 0x07	; 7
    7a94:	ea ec       	ldi	r30, 0xCA	; 202
    7a96:	f5 e0       	ldi	r31, 0x05	; 5
    7a98:	80 e0       	ldi	r24, 0x00	; 0
    7a9a:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    7a9c:	2d 91       	ld	r18, X+
    7a9e:	3c 91       	ld	r19, X
    7aa0:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    7aa2:	e8 01       	movw	r28, r16
    7aa4:	49 91       	ld	r20, Y+
    7aa6:	8e 01       	movw	r16, r28
    7aa8:	41 30       	cpi	r20, 0x01	; 1
    7aaa:	19 f4       	brne	.+6      	; 0x7ab2 <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    7aac:	31 95       	neg	r19
    7aae:	21 95       	neg	r18
    7ab0:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    7ab2:	2a 55       	subi	r18, 0x5A	; 90
    7ab4:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    7ab6:	62 81       	ldd	r22, Z+2	; 0x02
    7ab8:	73 81       	ldd	r23, Z+3	; 0x03
    7aba:	ac 01       	movw	r20, r24
    7abc:	44 0f       	add	r20, r20
    7abe:	55 1f       	adc	r21, r21
    7ac0:	62 17       	cp	r22, r18
    7ac2:	73 07       	cpc	r23, r19
    7ac4:	24 f4       	brge	.+8      	; 0x7ace <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    7ac6:	4d 59       	subi	r20, 0x9D	; 157
    7ac8:	57 4f       	sbci	r21, 0xF7	; 247
    7aca:	ea 01       	movw	r28, r20
    7acc:	08 c0       	rjmp	.+16     	; 0x7ade <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    7ace:	60 81       	ld	r22, Z
    7ad0:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7ad2:	4d 59       	subi	r20, 0x9D	; 157
    7ad4:	57 4f       	sbci	r21, 0xF7	; 247
    7ad6:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    7ad8:	26 17       	cp	r18, r22
    7ada:	37 07       	cpc	r19, r23
    7adc:	1c f4       	brge	.+6      	; 0x7ae4 <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7ade:	79 83       	std	Y+1, r23	; 0x01
    7ae0:	68 83       	st	Y, r22
    7ae2:	02 c0       	rjmp	.+4      	; 0x7ae8 <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    7ae4:	39 83       	std	Y+1, r19	; 0x01
    7ae6:	28 83       	st	Y, r18
    7ae8:	01 96       	adiw	r24, 0x01	; 1
    7aea:	96 96       	adiw	r26, 0x26	; 38
    7aec:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    7aee:	88 30       	cpi	r24, 0x08	; 8
    7af0:	91 05       	cpc	r25, r1
    7af2:	a1 f6       	brne	.-88     	; 0x7a9c <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    7af4:	df 91       	pop	r29
    7af6:	cf 91       	pop	r28
    7af8:	1f 91       	pop	r17
    7afa:	0f 91       	pop	r16
    7afc:	08 95       	ret

00007afe <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    7afe:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    7b00:	64 36       	cpi	r22, 0x64	; 100
    7b02:	71 05       	cpc	r23, r1
    7b04:	e9 f0       	breq	.+58     	; 0x7b40 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    7b06:	6c 39       	cpi	r22, 0x9C	; 156
    7b08:	8f ef       	ldi	r24, 0xFF	; 255
    7b0a:	78 07       	cpc	r23, r24
    7b0c:	29 f4       	brne	.+10     	; 0x7b18 <scale32+0x1a>
	{
		return -value16;	
    7b0e:	88 27       	eor	r24, r24
    7b10:	99 27       	eor	r25, r25
    7b12:	82 1b       	sub	r24, r18
    7b14:	93 0b       	sbc	r25, r19
    7b16:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    7b18:	61 15       	cp	r22, r1
    7b1a:	71 05       	cpc	r23, r1
    7b1c:	71 f0       	breq	.+28     	; 0x7b3a <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    7b1e:	db 01       	movw	r26, r22
    7b20:	0e 94 6d 4e 	call	0x9cda	; 0x9cda <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    7b24:	6e 5c       	subi	r22, 0xCE	; 206
    7b26:	7f 4f       	sbci	r23, 0xFF	; 255
    7b28:	8f 4f       	sbci	r24, 0xFF	; 255
    7b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b2c:	24 e6       	ldi	r18, 0x64	; 100
    7b2e:	30 e0       	ldi	r19, 0x00	; 0
    7b30:	40 e0       	ldi	r20, 0x00	; 0
    7b32:	50 e0       	ldi	r21, 0x00	; 0
    7b34:	0e 94 48 4e 	call	0x9c90	; 0x9c90 <__divmodsi4>
    7b38:	03 c0       	rjmp	.+6      	; 0x7b40 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    7b3a:	80 e0       	ldi	r24, 0x00	; 0
    7b3c:	90 e0       	ldi	r25, 0x00	; 0
    7b3e:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    7b40:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    7b42:	08 95       	ret

00007b44 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    7b44:	2f 92       	push	r2
    7b46:	3f 92       	push	r3
    7b48:	4f 92       	push	r4
    7b4a:	5f 92       	push	r5
    7b4c:	6f 92       	push	r6
    7b4e:	7f 92       	push	r7
    7b50:	8f 92       	push	r8
    7b52:	9f 92       	push	r9
    7b54:	af 92       	push	r10
    7b56:	bf 92       	push	r11
    7b58:	cf 92       	push	r12
    7b5a:	df 92       	push	r13
    7b5c:	ef 92       	push	r14
    7b5e:	ff 92       	push	r15
    7b60:	0f 93       	push	r16
    7b62:	1f 93       	push	r17
    7b64:	cf 93       	push	r28
    7b66:	df 93       	push	r29
    7b68:	cd b7       	in	r28, 0x3d	; 61
    7b6a:	de b7       	in	r29, 0x3e	; 62
    7b6c:	e2 97       	sbiw	r28, 0x32	; 50
    7b6e:	0f b6       	in	r0, 0x3f	; 63
    7b70:	f8 94       	cli
    7b72:	de bf       	out	0x3e, r29	; 62
    7b74:	0f be       	out	0x3f, r0	; 63
    7b76:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    7b78:	60 91 a9 05 	lds	r22, 0x05A9
    7b7c:	70 91 aa 05 	lds	r23, 0x05AA
    7b80:	80 91 ab 05 	lds	r24, 0x05AB
    7b84:	90 91 ac 05 	lds	r25, 0x05AC
    7b88:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
    7b8c:	8b 01       	movw	r16, r22
    7b8e:	83 e0       	ldi	r24, 0x03	; 3
    7b90:	00 0f       	add	r16, r16
    7b92:	11 1f       	adc	r17, r17
    7b94:	8a 95       	dec	r24
    7b96:	e1 f7       	brne	.-8      	; 0x7b90 <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    7b98:	60 91 ad 05 	lds	r22, 0x05AD
    7b9c:	70 91 ae 05 	lds	r23, 0x05AE
    7ba0:	80 91 af 05 	lds	r24, 0x05AF
    7ba4:	90 91 b0 05 	lds	r25, 0x05B0
    7ba8:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
    7bac:	93 e0       	ldi	r25, 0x03	; 3
    7bae:	66 0f       	add	r22, r22
    7bb0:	77 1f       	adc	r23, r23
    7bb2:	9a 95       	dec	r25
    7bb4:	e1 f7       	brne	.-8      	; 0x7bae <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    7bb6:	20 91 37 08 	lds	r18, 0x0837
    7bba:	30 91 38 08 	lds	r19, 0x0838
    7bbe:	3e 8f       	std	Y+30, r19	; 0x1e
    7bc0:	2d 8f       	std	Y+29, r18	; 0x1d
    7bc2:	38 8b       	std	Y+16, r19	; 0x10
    7bc4:	2f 87       	std	Y+15, r18	; 0x0f
    7bc6:	40 91 39 08 	lds	r20, 0x0839
    7bca:	50 91 3a 08 	lds	r21, 0x083A
    7bce:	58 a3       	std	Y+32, r21	; 0x20
    7bd0:	4f 8f       	std	Y+31, r20	; 0x1f
    7bd2:	5a 8b       	std	Y+18, r21	; 0x12
    7bd4:	49 8b       	std	Y+17, r20	; 0x11
    7bd6:	20 91 3b 08 	lds	r18, 0x083B
    7bda:	30 91 3c 08 	lds	r19, 0x083C
    7bde:	3a a3       	std	Y+34, r19	; 0x22
    7be0:	29 a3       	std	Y+33, r18	; 0x21
    7be2:	3c 8b       	std	Y+20, r19	; 0x14
    7be4:	2b 8b       	std	Y+19, r18	; 0x13
    7be6:	1e 8b       	std	Y+22, r17	; 0x16
    7be8:	0d 8b       	std	Y+21, r16	; 0x15
    7bea:	78 8f       	std	Y+24, r23	; 0x18
    7bec:	6f 8b       	std	Y+23, r22	; 0x17
    7bee:	40 91 43 08 	lds	r20, 0x0843
    7bf2:	50 91 44 08 	lds	r21, 0x0844
    7bf6:	5c a3       	std	Y+36, r21	; 0x24
    7bf8:	4b a3       	std	Y+35, r20	; 0x23
    7bfa:	5a 8f       	std	Y+26, r21	; 0x1a
    7bfc:	49 8f       	std	Y+25, r20	; 0x19
    7bfe:	20 91 45 08 	lds	r18, 0x0845
    7c02:	30 91 46 08 	lds	r19, 0x0846
    7c06:	3e a3       	std	Y+38, r19	; 0x26
    7c08:	2d a3       	std	Y+37, r18	; 0x25
    7c0a:	3c 8f       	std	Y+28, r19	; 0x1c
    7c0c:	2b 8f       	std	Y+27, r18	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    7c0e:	40 91 3d 08 	lds	r20, 0x083D
    7c12:	50 91 3e 08 	lds	r21, 0x083E
    7c16:	58 a7       	std	Y+40, r21	; 0x28
    7c18:	4f a3       	std	Y+39, r20	; 0x27
    7c1a:	5a 83       	std	Y+2, r21	; 0x02
    7c1c:	49 83       	std	Y+1, r20	; 0x01
    7c1e:	20 91 3f 08 	lds	r18, 0x083F
    7c22:	30 91 40 08 	lds	r19, 0x0840
    7c26:	3a a7       	std	Y+42, r19	; 0x2a
    7c28:	29 a7       	std	Y+41, r18	; 0x29
    7c2a:	3c 83       	std	Y+4, r19	; 0x04
    7c2c:	2b 83       	std	Y+3, r18	; 0x03
    7c2e:	20 90 41 08 	lds	r2, 0x0841
    7c32:	30 90 42 08 	lds	r3, 0x0842
    7c36:	3e 82       	std	Y+6, r3	; 0x06
    7c38:	2d 82       	std	Y+5, r2	; 0x05
    7c3a:	18 87       	std	Y+8, r17	; 0x08
    7c3c:	0f 83       	std	Y+7, r16	; 0x07
    7c3e:	7a 87       	std	Y+10, r23	; 0x0a
    7c40:	69 87       	std	Y+9, r22	; 0x09
    7c42:	40 90 49 08 	lds	r4, 0x0849
    7c46:	50 90 4a 08 	lds	r5, 0x084A
    7c4a:	5c 86       	std	Y+12, r5	; 0x0c
    7c4c:	4b 86       	std	Y+11, r4	; 0x0b
    7c4e:	80 90 4b 08 	lds	r8, 0x084B
    7c52:	90 90 4c 08 	lds	r9, 0x084C
    7c56:	9e 86       	std	Y+14, r9	; 0x0e
    7c58:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (transition < 100)
    7c5a:	a0 90 21 05 	lds	r10, 0x0521
    7c5e:	b0 90 22 05 	lds	r11, 0x0522
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7c62:	40 91 47 08 	lds	r20, 0x0847
    7c66:	50 91 48 08 	lds	r21, 0x0848
    7c6a:	5c a7       	std	Y+44, r21	; 0x2c
    7c6c:	4b a7       	std	Y+43, r20	; 0x2b
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7c6e:	20 91 4d 08 	lds	r18, 0x084D
    7c72:	30 91 4e 08 	lds	r19, 0x084E
    7c76:	3e a7       	std	Y+46, r19	; 0x2e
    7c78:	2d a7       	std	Y+45, r18	; 0x2d
    7c7a:	c1 2c       	mov	r12, r1
    7c7c:	d1 2c       	mov	r13, r1
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7c7e:	4f a1       	ldd	r20, Y+39	; 0x27
    7c80:	58 a5       	ldd	r21, Y+40	; 0x28
    7c82:	51 95       	neg	r21
    7c84:	41 95       	neg	r20
    7c86:	51 09       	sbc	r21, r1
    7c88:	58 ab       	std	Y+48, r21	; 0x30
    7c8a:	4f a7       	std	Y+47, r20	; 0x2f
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    7c8c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7c8e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    7c90:	31 95       	neg	r19
    7c92:	21 95       	neg	r18
    7c94:	31 09       	sbc	r19, r1
    7c96:	3a ab       	std	Y+50, r19	; 0x32
    7c98:	29 ab       	std	Y+49, r18	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (transition < 100)
    7c9a:	34 e6       	ldi	r19, 0x64	; 100
    7c9c:	a3 16       	cp	r10, r19
    7c9e:	b1 04       	cpc	r11, r1
    7ca0:	0c f0       	brlt	.+2      	; 0x7ca4 <ProcessMixer+0x160>
    7ca2:	7b c0       	rjmp	.+246    	; 0x7d9a <ProcessMixer+0x256>
    7ca4:	86 01       	movw	r16, r12
    7ca6:	0f 53       	subi	r16, 0x3F	; 63
    7ca8:	1a 4f       	sbci	r17, 0xFA	; 250
    7caa:	f8 01       	movw	r30, r16
    7cac:	ec 55       	subi	r30, 0x5C	; 92
    7cae:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    7cb0:	80 81       	ld	r24, Z
    7cb2:	81 30       	cpi	r24, 0x01	; 1
    7cb4:	99 f0       	breq	.+38     	; 0x7cdc <ProcessMixer+0x198>
    7cb6:	82 30       	cpi	r24, 0x02	; 2
    7cb8:	d1 f4       	brne	.+52     	; 0x7cee <ProcessMixer+0x1aa>
    7cba:	f8 01       	movw	r30, r16
    7cbc:	e2 56       	subi	r30, 0x62	; 98
    7cbe:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    7cc0:	60 81       	ld	r22, Z
    7cc2:	45 e0       	ldi	r20, 0x05	; 5
    7cc4:	64 02       	muls	r22, r20
    7cc6:	b0 01       	movw	r22, r0
    7cc8:	11 24       	eor	r1, r1
    7cca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7ccc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7cce:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7cd2:	ee 24       	eor	r14, r14
    7cd4:	ff 24       	eor	r15, r15
    7cd6:	e8 1a       	sub	r14, r24
    7cd8:	f9 0a       	sbc	r15, r25
					break;
    7cda:	0e c0       	rjmp	.+28     	; 0x7cf8 <ProcessMixer+0x1b4>
    7cdc:	f8 01       	movw	r30, r16
    7cde:	e2 56       	subi	r30, 0x62	; 98
    7ce0:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7ce2:	80 81       	ld	r24, Z
    7ce4:	87 fd       	sbrc	r24, 7
    7ce6:	06 c0       	rjmp	.+12     	; 0x7cf4 <ProcessMixer+0x1b0>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    7ce8:	e9 a8       	ldd	r14, Y+49	; 0x31
    7cea:	fa a8       	ldd	r15, Y+50	; 0x32
    7cec:	05 c0       	rjmp	.+10     	; 0x7cf8 <ProcessMixer+0x1b4>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7cee:	e1 2c       	mov	r14, r1
    7cf0:	f1 2c       	mov	r15, r1
    7cf2:	02 c0       	rjmp	.+4      	; 0x7cf8 <ProcessMixer+0x1b4>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    7cf4:	ed 8c       	ldd	r14, Y+29	; 0x1d
    7cf6:	fe 8c       	ldd	r15, Y+30	; 0x1e
    7cf8:	f8 01       	movw	r30, r16
    7cfa:	ea 55       	subi	r30, 0x5A	; 90
    7cfc:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    7cfe:	80 81       	ld	r24, Z
    7d00:	81 30       	cpi	r24, 0x01	; 1
    7d02:	89 f0       	breq	.+34     	; 0x7d26 <ProcessMixer+0x1e2>
    7d04:	82 30       	cpi	r24, 0x02	; 2
    7d06:	f1 f4       	brne	.+60     	; 0x7d44 <ProcessMixer+0x200>
    7d08:	f8 01       	movw	r30, r16
    7d0a:	e0 56       	subi	r30, 0x60	; 96
    7d0c:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7d0e:	60 81       	ld	r22, Z
    7d10:	55 e0       	ldi	r21, 0x05	; 5
    7d12:	65 02       	muls	r22, r21
    7d14:	b0 01       	movw	r22, r0
    7d16:	11 24       	eor	r1, r1
    7d18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7d1a:	98 a1       	ldd	r25, Y+32	; 0x20
    7d1c:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7d20:	e8 0e       	add	r14, r24
    7d22:	f9 1e       	adc	r15, r25
					break;
    7d24:	0f c0       	rjmp	.+30     	; 0x7d44 <ProcessMixer+0x200>
    7d26:	f8 01       	movw	r30, r16
    7d28:	e0 56       	subi	r30, 0x60	; 96
    7d2a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7d2c:	80 81       	ld	r24, Z
    7d2e:	87 ff       	sbrs	r24, 7
    7d30:	05 c0       	rjmp	.+10     	; 0x7d3c <ProcessMixer+0x1f8>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    7d32:	2f 8d       	ldd	r18, Y+31	; 0x1f
    7d34:	38 a1       	ldd	r19, Y+32	; 0x20
    7d36:	e2 1a       	sub	r14, r18
    7d38:	f3 0a       	sbc	r15, r19
    7d3a:	04 c0       	rjmp	.+8      	; 0x7d44 <ProcessMixer+0x200>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    7d3c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    7d3e:	58 a1       	ldd	r21, Y+32	; 0x20
    7d40:	e4 0e       	add	r14, r20
    7d42:	f5 1e       	adc	r15, r21
    7d44:	f8 01       	movw	r30, r16
    7d46:	e8 55       	subi	r30, 0x58	; 88
    7d48:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    7d4a:	80 81       	ld	r24, Z
    7d4c:	81 30       	cpi	r24, 0x01	; 1
    7d4e:	89 f0       	breq	.+34     	; 0x7d72 <ProcessMixer+0x22e>
    7d50:	82 30       	cpi	r24, 0x02	; 2
    7d52:	f1 f4       	brne	.+60     	; 0x7d90 <ProcessMixer+0x24c>
    7d54:	f8 01       	movw	r30, r16
    7d56:	ee 55       	subi	r30, 0x5E	; 94
    7d58:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    7d5a:	60 81       	ld	r22, Z
    7d5c:	55 e0       	ldi	r21, 0x05	; 5
    7d5e:	65 02       	muls	r22, r21
    7d60:	b0 01       	movw	r22, r0
    7d62:	11 24       	eor	r1, r1
    7d64:	89 a1       	ldd	r24, Y+33	; 0x21
    7d66:	9a a1       	ldd	r25, Y+34	; 0x22
    7d68:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7d6c:	e8 0e       	add	r14, r24
    7d6e:	f9 1e       	adc	r15, r25
					break;
    7d70:	0f c0       	rjmp	.+30     	; 0x7d90 <ProcessMixer+0x24c>
    7d72:	f8 01       	movw	r30, r16
    7d74:	ee 55       	subi	r30, 0x5E	; 94
    7d76:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_rudder_volume < 0 )
    7d78:	80 81       	ld	r24, Z
    7d7a:	87 ff       	sbrs	r24, 7
    7d7c:	05 c0       	rjmp	.+10     	; 0x7d88 <ProcessMixer+0x244>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    7d7e:	29 a1       	ldd	r18, Y+33	; 0x21
    7d80:	3a a1       	ldd	r19, Y+34	; 0x22
    7d82:	e2 1a       	sub	r14, r18
    7d84:	f3 0a       	sbc	r15, r19
    7d86:	04 c0       	rjmp	.+8      	; 0x7d90 <ProcessMixer+0x24c>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    7d88:	49 a1       	ldd	r20, Y+33	; 0x21
    7d8a:	5a a1       	ldd	r21, Y+34	; 0x22
    7d8c:	e4 0e       	add	r14, r20
    7d8e:	f5 1e       	adc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (transition > 0)
    7d90:	1a 14       	cp	r1, r10
    7d92:	1b 04       	cpc	r1, r11
    7d94:	0c f0       	brlt	.+2      	; 0x7d98 <ProcessMixer+0x254>
    7d96:	7b c0       	rjmp	.+246    	; 0x7e8e <ProcessMixer+0x34a>
    7d98:	02 c0       	rjmp	.+4      	; 0x7d9e <ProcessMixer+0x25a>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7d9a:	e1 2c       	mov	r14, r1
    7d9c:	f1 2c       	mov	r15, r1
    7d9e:	c6 01       	movw	r24, r12
    7da0:	8f 53       	subi	r24, 0x3F	; 63
    7da2:	9a 4f       	sbci	r25, 0xFA	; 250
    7da4:	3c 01       	movw	r6, r24
    7da6:	fc 01       	movw	r30, r24
    7da8:	eb 55       	subi	r30, 0x5B	; 91
    7daa:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (transition > 0)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    7dac:	80 81       	ld	r24, Z
    7dae:	81 30       	cpi	r24, 0x01	; 1
    7db0:	99 f0       	breq	.+38     	; 0x7dd8 <ProcessMixer+0x294>
    7db2:	82 30       	cpi	r24, 0x02	; 2
    7db4:	d1 f4       	brne	.+52     	; 0x7dea <ProcessMixer+0x2a6>
    7db6:	f3 01       	movw	r30, r6
    7db8:	e1 56       	subi	r30, 0x61	; 97
    7dba:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7dbc:	60 81       	ld	r22, Z
    7dbe:	95 e0       	ldi	r25, 0x05	; 5
    7dc0:	69 02       	muls	r22, r25
    7dc2:	b0 01       	movw	r22, r0
    7dc4:	11 24       	eor	r1, r1
    7dc6:	8f a1       	ldd	r24, Y+39	; 0x27
    7dc8:	98 a5       	ldd	r25, Y+40	; 0x28
    7dca:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7dce:	00 27       	eor	r16, r16
    7dd0:	11 27       	eor	r17, r17
    7dd2:	08 1b       	sub	r16, r24
    7dd4:	19 0b       	sbc	r17, r25
					break;
    7dd6:	0e c0       	rjmp	.+28     	; 0x7df4 <ProcessMixer+0x2b0>
    7dd8:	f3 01       	movw	r30, r6
    7dda:	e1 56       	subi	r30, 0x61	; 97
    7ddc:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    7dde:	80 81       	ld	r24, Z
    7de0:	87 fd       	sbrc	r24, 7
    7de2:	06 c0       	rjmp	.+12     	; 0x7df0 <ProcessMixer+0x2ac>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7de4:	0f a5       	ldd	r16, Y+47	; 0x2f
    7de6:	18 a9       	ldd	r17, Y+48	; 0x30
    7de8:	05 c0       	rjmp	.+10     	; 0x7df4 <ProcessMixer+0x2b0>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7dea:	00 e0       	ldi	r16, 0x00	; 0
    7dec:	10 e0       	ldi	r17, 0x00	; 0
    7dee:	02 c0       	rjmp	.+4      	; 0x7df4 <ProcessMixer+0x2b0>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    7df0:	0f a1       	ldd	r16, Y+39	; 0x27
    7df2:	18 a5       	ldd	r17, Y+40	; 0x28
    7df4:	f3 01       	movw	r30, r6
    7df6:	e9 55       	subi	r30, 0x59	; 89
    7df8:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    7dfa:	80 81       	ld	r24, Z
    7dfc:	81 30       	cpi	r24, 0x01	; 1
    7dfe:	89 f0       	breq	.+34     	; 0x7e22 <ProcessMixer+0x2de>
    7e00:	82 30       	cpi	r24, 0x02	; 2
    7e02:	f1 f4       	brne	.+60     	; 0x7e40 <ProcessMixer+0x2fc>
    7e04:	f3 01       	movw	r30, r6
    7e06:	ef 55       	subi	r30, 0x5F	; 95
    7e08:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    7e0a:	60 81       	ld	r22, Z
    7e0c:	55 e0       	ldi	r21, 0x05	; 5
    7e0e:	65 02       	muls	r22, r21
    7e10:	b0 01       	movw	r22, r0
    7e12:	11 24       	eor	r1, r1
    7e14:	89 a5       	ldd	r24, Y+41	; 0x29
    7e16:	9a a5       	ldd	r25, Y+42	; 0x2a
    7e18:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7e1c:	08 0f       	add	r16, r24
    7e1e:	19 1f       	adc	r17, r25
					break;
    7e20:	0f c0       	rjmp	.+30     	; 0x7e40 <ProcessMixer+0x2fc>
    7e22:	f3 01       	movw	r30, r6
    7e24:	ef 55       	subi	r30, 0x5F	; 95
    7e26:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    7e28:	80 81       	ld	r24, Z
    7e2a:	87 ff       	sbrs	r24, 7
    7e2c:	05 c0       	rjmp	.+10     	; 0x7e38 <ProcessMixer+0x2f4>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    7e2e:	29 a5       	ldd	r18, Y+41	; 0x29
    7e30:	3a a5       	ldd	r19, Y+42	; 0x2a
    7e32:	02 1b       	sub	r16, r18
    7e34:	13 0b       	sbc	r17, r19
    7e36:	04 c0       	rjmp	.+8      	; 0x7e40 <ProcessMixer+0x2fc>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    7e38:	49 a5       	ldd	r20, Y+41	; 0x29
    7e3a:	5a a5       	ldd	r21, Y+42	; 0x2a
    7e3c:	04 0f       	add	r16, r20
    7e3e:	15 1f       	adc	r17, r21
    7e40:	f3 01       	movw	r30, r6
    7e42:	e7 55       	subi	r30, 0x57	; 87
    7e44:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    7e46:	80 81       	ld	r24, Z
    7e48:	81 30       	cpi	r24, 0x01	; 1
    7e4a:	81 f0       	breq	.+32     	; 0x7e6c <ProcessMixer+0x328>
    7e4c:	82 30       	cpi	r24, 0x02	; 2
    7e4e:	c9 f4       	brne	.+50     	; 0x7e82 <ProcessMixer+0x33e>
    7e50:	f3 01       	movw	r30, r6
    7e52:	ed 55       	subi	r30, 0x5D	; 93
    7e54:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    7e56:	60 81       	ld	r22, Z
    7e58:	85 e0       	ldi	r24, 0x05	; 5
    7e5a:	68 02       	muls	r22, r24
    7e5c:	b0 01       	movw	r22, r0
    7e5e:	11 24       	eor	r1, r1
    7e60:	c1 01       	movw	r24, r2
    7e62:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7e66:	08 0f       	add	r16, r24
    7e68:	19 1f       	adc	r17, r25
					break;
    7e6a:	0b c0       	rjmp	.+22     	; 0x7e82 <ProcessMixer+0x33e>
    7e6c:	f3 01       	movw	r30, r6
    7e6e:	ed 55       	subi	r30, 0x5D	; 93
    7e70:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    7e72:	80 81       	ld	r24, Z
    7e74:	87 ff       	sbrs	r24, 7
    7e76:	03 c0       	rjmp	.+6      	; 0x7e7e <ProcessMixer+0x33a>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    7e78:	02 19       	sub	r16, r2
    7e7a:	13 09       	sbc	r17, r3
    7e7c:	02 c0       	rjmp	.+4      	; 0x7e82 <ProcessMixer+0x33e>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    7e7e:	02 0d       	add	r16, r2
    7e80:	13 1d       	adc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
    7e82:	94 e6       	ldi	r25, 0x64	; 100
    7e84:	a9 16       	cp	r10, r25
    7e86:	b1 04       	cpc	r11, r1
    7e88:	0c f0       	brlt	.+2      	; 0x7e8c <ProcessMixer+0x348>
    7e8a:	7d c0       	rjmp	.+250    	; 0x7f86 <ProcessMixer+0x442>
    7e8c:	02 c0       	rjmp	.+4      	; 0x7e92 <ProcessMixer+0x34e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7e8e:	00 e0       	ldi	r16, 0x00	; 0
    7e90:	10 e0       	ldi	r17, 0x00	; 0
    7e92:	d6 01       	movw	r26, r12
    7e94:	af 53       	subi	r26, 0x3F	; 63
    7e96:	ba 4f       	sbci	r27, 0xFA	; 250
    7e98:	3d 01       	movw	r6, r26
    7e9a:	fd 01       	movw	r30, r26
    7e9c:	e6 55       	subi	r30, 0x56	; 86
    7e9e:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    7ea0:	80 81       	ld	r24, Z
    7ea2:	81 30       	cpi	r24, 0x01	; 1
    7ea4:	89 f0       	breq	.+34     	; 0x7ec8 <ProcessMixer+0x384>
    7ea6:	82 30       	cpi	r24, 0x02	; 2
    7ea8:	f1 f4       	brne	.+60     	; 0x7ee6 <ProcessMixer+0x3a2>
    7eaa:	fd 01       	movw	r30, r26
    7eac:	e2 56       	subi	r30, 0x62	; 98
    7eae:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    7eb0:	60 81       	ld	r22, Z
    7eb2:	55 e0       	ldi	r21, 0x05	; 5
    7eb4:	65 02       	muls	r22, r21
    7eb6:	b0 01       	movw	r22, r0
    7eb8:	11 24       	eor	r1, r1
    7eba:	8b a1       	ldd	r24, Y+35	; 0x23
    7ebc:	9c a1       	ldd	r25, Y+36	; 0x24
    7ebe:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7ec2:	e8 1a       	sub	r14, r24
    7ec4:	f9 0a       	sbc	r15, r25
					break;
    7ec6:	0f c0       	rjmp	.+30     	; 0x7ee6 <ProcessMixer+0x3a2>
    7ec8:	fd 01       	movw	r30, r26
    7eca:	e2 56       	subi	r30, 0x62	; 98
    7ecc:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7ece:	80 81       	ld	r24, Z
    7ed0:	87 ff       	sbrs	r24, 7
    7ed2:	05 c0       	rjmp	.+10     	; 0x7ede <ProcessMixer+0x39a>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    7ed4:	2b a1       	ldd	r18, Y+35	; 0x23
    7ed6:	3c a1       	ldd	r19, Y+36	; 0x24
    7ed8:	e2 0e       	add	r14, r18
    7eda:	f3 1e       	adc	r15, r19
    7edc:	04 c0       	rjmp	.+8      	; 0x7ee6 <ProcessMixer+0x3a2>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    7ede:	4b a1       	ldd	r20, Y+35	; 0x23
    7ee0:	5c a1       	ldd	r21, Y+36	; 0x24
    7ee2:	e4 1a       	sub	r14, r20
    7ee4:	f5 0a       	sbc	r15, r21
    7ee6:	f3 01       	movw	r30, r6
    7ee8:	e4 55       	subi	r30, 0x54	; 84
    7eea:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    7eec:	80 81       	ld	r24, Z
    7eee:	81 30       	cpi	r24, 0x01	; 1
    7ef0:	89 f0       	breq	.+34     	; 0x7f14 <ProcessMixer+0x3d0>
    7ef2:	82 30       	cpi	r24, 0x02	; 2
    7ef4:	f1 f4       	brne	.+60     	; 0x7f32 <ProcessMixer+0x3ee>
    7ef6:	f3 01       	movw	r30, r6
    7ef8:	e0 56       	subi	r30, 0x60	; 96
    7efa:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7efc:	60 81       	ld	r22, Z
    7efe:	55 e0       	ldi	r21, 0x05	; 5
    7f00:	65 02       	muls	r22, r21
    7f02:	b0 01       	movw	r22, r0
    7f04:	11 24       	eor	r1, r1
    7f06:	8d a1       	ldd	r24, Y+37	; 0x25
    7f08:	9e a1       	ldd	r25, Y+38	; 0x26
    7f0a:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7f0e:	e8 0e       	add	r14, r24
    7f10:	f9 1e       	adc	r15, r25
					break;
    7f12:	0f c0       	rjmp	.+30     	; 0x7f32 <ProcessMixer+0x3ee>
    7f14:	f3 01       	movw	r30, r6
    7f16:	e0 56       	subi	r30, 0x60	; 96
    7f18:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7f1a:	80 81       	ld	r24, Z
    7f1c:	87 ff       	sbrs	r24, 7
    7f1e:	05 c0       	rjmp	.+10     	; 0x7f2a <ProcessMixer+0x3e6>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    7f20:	2d a1       	ldd	r18, Y+37	; 0x25
    7f22:	3e a1       	ldd	r19, Y+38	; 0x26
    7f24:	e2 1a       	sub	r14, r18
    7f26:	f3 0a       	sbc	r15, r19
    7f28:	04 c0       	rjmp	.+8      	; 0x7f32 <ProcessMixer+0x3ee>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    7f2a:	4d a1       	ldd	r20, Y+37	; 0x25
    7f2c:	5e a1       	ldd	r21, Y+38	; 0x26
    7f2e:	e4 0e       	add	r14, r20
    7f30:	f5 1e       	adc	r15, r21
    7f32:	f3 01       	movw	r30, r6
    7f34:	e2 55       	subi	r30, 0x52	; 82
    7f36:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    7f38:	80 81       	ld	r24, Z
    7f3a:	81 30       	cpi	r24, 0x01	; 1
    7f3c:	89 f0       	breq	.+34     	; 0x7f60 <ProcessMixer+0x41c>
    7f3e:	82 30       	cpi	r24, 0x02	; 2
    7f40:	f1 f4       	brne	.+60     	; 0x7f7e <ProcessMixer+0x43a>
    7f42:	f3 01       	movw	r30, r6
    7f44:	e5 56       	subi	r30, 0x65	; 101
    7f46:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    7f48:	60 81       	ld	r22, Z
    7f4a:	55 e0       	ldi	r21, 0x05	; 5
    7f4c:	65 02       	muls	r22, r21
    7f4e:	b0 01       	movw	r22, r0
    7f50:	11 24       	eor	r1, r1
    7f52:	8b a5       	ldd	r24, Y+43	; 0x2b
    7f54:	9c a5       	ldd	r25, Y+44	; 0x2c
    7f56:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7f5a:	e8 1a       	sub	r14, r24
    7f5c:	f9 0a       	sbc	r15, r25
					break;
    7f5e:	0f c0       	rjmp	.+30     	; 0x7f7e <ProcessMixer+0x43a>
    7f60:	f3 01       	movw	r30, r6
    7f62:	e5 56       	subi	r30, 0x65	; 101
    7f64:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    7f66:	80 81       	ld	r24, Z
    7f68:	87 ff       	sbrs	r24, 7
    7f6a:	05 c0       	rjmp	.+10     	; 0x7f76 <ProcessMixer+0x432>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7f6c:	2b a5       	ldd	r18, Y+43	; 0x2b
    7f6e:	3c a5       	ldd	r19, Y+44	; 0x2c
    7f70:	e2 0e       	add	r14, r18
    7f72:	f3 1e       	adc	r15, r19
    7f74:	04 c0       	rjmp	.+8      	; 0x7f7e <ProcessMixer+0x43a>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    7f76:	4b a5       	ldd	r20, Y+43	; 0x2b
    7f78:	5c a5       	ldd	r21, Y+44	; 0x2c
    7f7a:	e4 1a       	sub	r14, r20
    7f7c:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (transition > 0)
    7f7e:	1a 14       	cp	r1, r10
    7f80:	1b 04       	cpc	r1, r11
    7f82:	0c f0       	brlt	.+2      	; 0x7f86 <ProcessMixer+0x442>
    7f84:	71 c0       	rjmp	.+226    	; 0x8068 <ProcessMixer+0x524>
    7f86:	c6 01       	movw	r24, r12
    7f88:	8f 53       	subi	r24, 0x3F	; 63
    7f8a:	9a 4f       	sbci	r25, 0xFA	; 250
    7f8c:	3c 01       	movw	r6, r24
    7f8e:	fc 01       	movw	r30, r24
    7f90:	e5 55       	subi	r30, 0x55	; 85
    7f92:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    7f94:	80 81       	ld	r24, Z
    7f96:	81 30       	cpi	r24, 0x01	; 1
    7f98:	81 f0       	breq	.+32     	; 0x7fba <ProcessMixer+0x476>
    7f9a:	82 30       	cpi	r24, 0x02	; 2
    7f9c:	c9 f4       	brne	.+50     	; 0x7fd0 <ProcessMixer+0x48c>
    7f9e:	f3 01       	movw	r30, r6
    7fa0:	e1 56       	subi	r30, 0x61	; 97
    7fa2:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7fa4:	60 81       	ld	r22, Z
    7fa6:	95 e0       	ldi	r25, 0x05	; 5
    7fa8:	69 02       	muls	r22, r25
    7faa:	b0 01       	movw	r22, r0
    7fac:	11 24       	eor	r1, r1
    7fae:	c2 01       	movw	r24, r4
    7fb0:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7fb4:	08 1b       	sub	r16, r24
    7fb6:	19 0b       	sbc	r17, r25
					break;
    7fb8:	0b c0       	rjmp	.+22     	; 0x7fd0 <ProcessMixer+0x48c>
    7fba:	f3 01       	movw	r30, r6
    7fbc:	e1 56       	subi	r30, 0x61	; 97
    7fbe:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    7fc0:	80 81       	ld	r24, Z
    7fc2:	87 ff       	sbrs	r24, 7
    7fc4:	03 c0       	rjmp	.+6      	; 0x7fcc <ProcessMixer+0x488>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    7fc6:	04 0d       	add	r16, r4
    7fc8:	15 1d       	adc	r17, r5
    7fca:	02 c0       	rjmp	.+4      	; 0x7fd0 <ProcessMixer+0x48c>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    7fcc:	04 19       	sub	r16, r4
    7fce:	15 09       	sbc	r17, r5
    7fd0:	f3 01       	movw	r30, r6
    7fd2:	e3 55       	subi	r30, 0x53	; 83
    7fd4:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    7fd6:	80 81       	ld	r24, Z
    7fd8:	81 30       	cpi	r24, 0x01	; 1
    7fda:	81 f0       	breq	.+32     	; 0x7ffc <ProcessMixer+0x4b8>
    7fdc:	82 30       	cpi	r24, 0x02	; 2
    7fde:	c9 f4       	brne	.+50     	; 0x8012 <ProcessMixer+0x4ce>
    7fe0:	f3 01       	movw	r30, r6
    7fe2:	ef 55       	subi	r30, 0x5F	; 95
    7fe4:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    7fe6:	60 81       	ld	r22, Z
    7fe8:	a5 e0       	ldi	r26, 0x05	; 5
    7fea:	6a 02       	muls	r22, r26
    7fec:	b0 01       	movw	r22, r0
    7fee:	11 24       	eor	r1, r1
    7ff0:	c4 01       	movw	r24, r8
    7ff2:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    7ff6:	08 0f       	add	r16, r24
    7ff8:	19 1f       	adc	r17, r25
					break;
    7ffa:	0b c0       	rjmp	.+22     	; 0x8012 <ProcessMixer+0x4ce>
    7ffc:	f3 01       	movw	r30, r6
    7ffe:	ef 55       	subi	r30, 0x5F	; 95
    8000:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    8002:	80 81       	ld	r24, Z
    8004:	87 ff       	sbrs	r24, 7
    8006:	03 c0       	rjmp	.+6      	; 0x800e <ProcessMixer+0x4ca>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    8008:	08 19       	sub	r16, r8
    800a:	19 09       	sbc	r17, r9
    800c:	02 c0       	rjmp	.+4      	; 0x8012 <ProcessMixer+0x4ce>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    800e:	08 0d       	add	r16, r8
    8010:	19 1d       	adc	r17, r9
    8012:	f3 01       	movw	r30, r6
    8014:	e1 55       	subi	r30, 0x51	; 81
    8016:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    8018:	80 81       	ld	r24, Z
    801a:	81 30       	cpi	r24, 0x01	; 1
    801c:	89 f0       	breq	.+34     	; 0x8040 <ProcessMixer+0x4fc>
    801e:	82 30       	cpi	r24, 0x02	; 2
    8020:	f1 f4       	brne	.+60     	; 0x805e <ProcessMixer+0x51a>
    8022:	f3 01       	movw	r30, r6
    8024:	e4 56       	subi	r30, 0x64	; 100
    8026:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    8028:	60 81       	ld	r22, Z
    802a:	55 e0       	ldi	r21, 0x05	; 5
    802c:	65 02       	muls	r22, r21
    802e:	b0 01       	movw	r22, r0
    8030:	11 24       	eor	r1, r1
    8032:	8d a5       	ldd	r24, Y+45	; 0x2d
    8034:	9e a5       	ldd	r25, Y+46	; 0x2e
    8036:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    803a:	08 1b       	sub	r16, r24
    803c:	19 0b       	sbc	r17, r25
					break;
    803e:	0f c0       	rjmp	.+30     	; 0x805e <ProcessMixer+0x51a>
    8040:	f3 01       	movw	r30, r6
    8042:	e4 56       	subi	r30, 0x64	; 100
    8044:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    8046:	80 81       	ld	r24, Z
    8048:	87 ff       	sbrs	r24, 7
    804a:	05 c0       	rjmp	.+10     	; 0x8056 <ProcessMixer+0x512>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    804c:	2d a5       	ldd	r18, Y+45	; 0x2d
    804e:	3e a5       	ldd	r19, Y+46	; 0x2e
    8050:	02 0f       	add	r16, r18
    8052:	13 1f       	adc	r17, r19
    8054:	04 c0       	rjmp	.+8      	; 0x805e <ProcessMixer+0x51a>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    8056:	4d a5       	ldd	r20, Y+45	; 0x2d
    8058:	5e a5       	ldd	r21, Y+46	; 0x2e
    805a:	04 1b       	sub	r16, r20
    805c:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (transition < 100)
    805e:	84 e6       	ldi	r24, 0x64	; 100
    8060:	a8 16       	cp	r10, r24
    8062:	b1 04       	cpc	r11, r1
    8064:	0c f0       	brlt	.+2      	; 0x8068 <ProcessMixer+0x524>
    8066:	8d c0       	rjmp	.+282    	; 0x8182 <ProcessMixer+0x63e>
    8068:	d6 01       	movw	r26, r12
    806a:	af 53       	subi	r26, 0x3F	; 63
    806c:	ba 4f       	sbci	r27, 0xFA	; 250
    806e:	3d 01       	movw	r6, r26
    8070:	fd 01       	movw	r30, r26
    8072:	e2 56       	subi	r30, 0x62	; 98
    8074:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    8076:	60 81       	ld	r22, Z
    8078:	66 23       	and	r22, r22
    807a:	59 f0       	breq	.+22     	; 0x8092 <ProcessMixer+0x54e>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    807c:	80 91 53 08 	lds	r24, 0x0853
    8080:	90 91 54 08 	lds	r25, 0x0854
    8084:	77 27       	eor	r23, r23
    8086:	67 fd       	sbrc	r22, 7
    8088:	70 95       	com	r23
    808a:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
				P1_solution = P1_solution + temp2;
    808e:	e8 0e       	add	r14, r24
    8090:	f9 1e       	adc	r15, r25
    8092:	f3 01       	movw	r30, r6
    8094:	e0 56       	subi	r30, 0x60	; 96
    8096:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    8098:	60 81       	ld	r22, Z
    809a:	66 23       	and	r22, r22
    809c:	59 f0       	breq	.+22     	; 0x80b4 <ProcessMixer+0x570>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    809e:	80 91 55 08 	lds	r24, 0x0855
    80a2:	90 91 56 08 	lds	r25, 0x0856
    80a6:	77 27       	eor	r23, r23
    80a8:	67 fd       	sbrc	r22, 7
    80aa:	70 95       	com	r23
    80ac:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
				P1_solution = P1_solution + temp2;
    80b0:	e8 0e       	add	r14, r24
    80b2:	f9 1e       	adc	r15, r25
    80b4:	f3 01       	movw	r30, r6
    80b6:	ee 55       	subi	r30, 0x5E	; 94
    80b8:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    80ba:	60 81       	ld	r22, Z
    80bc:	66 23       	and	r22, r22
    80be:	59 f0       	breq	.+22     	; 0x80d6 <ProcessMixer+0x592>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    80c0:	80 91 57 08 	lds	r24, 0x0857
    80c4:	90 91 58 08 	lds	r25, 0x0858
    80c8:	77 27       	eor	r23, r23
    80ca:	67 fd       	sbrc	r22, 7
    80cc:	70 95       	com	r23
    80ce:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
				P1_solution = P1_solution + temp2;
    80d2:	e8 0e       	add	r14, r24
    80d4:	f9 1e       	adc	r15, r25
    80d6:	f3 01       	movw	r30, r6
    80d8:	ef 54       	subi	r30, 0x4F	; 79
    80da:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    80dc:	60 81       	ld	r22, Z
    80de:	66 23       	and	r22, r22
    80e0:	19 f1       	breq	.+70     	; 0x8128 <ProcessMixer+0x5e4>
    80e2:	31 97       	sbiw	r30, 0x01	; 1
    80e4:	80 81       	ld	r24, Z
    80e6:	8f 30       	cpi	r24, 0x0F	; 15
    80e8:	f9 f0       	breq	.+62     	; 0x8128 <ProcessMixer+0x5e4>
    80ea:	e8 2f       	mov	r30, r24
    80ec:	ff 27       	eor	r31, r31
    80ee:	e7 fd       	sbrc	r30, 7
    80f0:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    80f2:	88 30       	cpi	r24, 0x08	; 8
    80f4:	64 f0       	brlt	.+24     	; 0x810e <ProcessMixer+0x5ca>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    80f6:	38 97       	sbiw	r30, 0x08	; 8
    80f8:	ee 0f       	add	r30, r30
    80fa:	ff 1f       	adc	r31, r31
    80fc:	21 e0       	ldi	r18, 0x01	; 1
    80fe:	30 e0       	ldi	r19, 0x00	; 0
    8100:	2c 0f       	add	r18, r28
    8102:	3d 1f       	adc	r19, r29
    8104:	e2 0f       	add	r30, r18
    8106:	f3 1f       	adc	r31, r19
    8108:	86 85       	ldd	r24, Z+14	; 0x0e
    810a:	97 85       	ldd	r25, Z+15	; 0x0f
    810c:	06 c0       	rjmp	.+12     	; 0x811a <ProcessMixer+0x5d6>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    810e:	ee 0f       	add	r30, r30
    8110:	ff 1f       	adc	r31, r31
    8112:	ef 5a       	subi	r30, 0xAF	; 175
    8114:	f7 4f       	sbci	r31, 0xF7	; 247
    8116:	80 81       	ld	r24, Z
    8118:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    811a:	77 27       	eor	r23, r23
    811c:	67 fd       	sbrc	r22, 7
    811e:	70 95       	com	r23
    8120:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
				P1_solution = P1_solution + temp2;
    8124:	e8 0e       	add	r14, r24
    8126:	f9 1e       	adc	r15, r25
    8128:	f3 01       	movw	r30, r6
    812a:	eb 54       	subi	r30, 0x4B	; 75
    812c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    812e:	60 81       	ld	r22, Z
    8130:	66 23       	and	r22, r22
    8132:	19 f1       	breq	.+70     	; 0x817a <ProcessMixer+0x636>
    8134:	31 97       	sbiw	r30, 0x01	; 1
    8136:	80 81       	ld	r24, Z
    8138:	8f 30       	cpi	r24, 0x0F	; 15
    813a:	f9 f0       	breq	.+62     	; 0x817a <ProcessMixer+0x636>
    813c:	e8 2f       	mov	r30, r24
    813e:	ff 27       	eor	r31, r31
    8140:	e7 fd       	sbrc	r30, 7
    8142:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    8144:	88 30       	cpi	r24, 0x08	; 8
    8146:	64 f0       	brlt	.+24     	; 0x8160 <ProcessMixer+0x61c>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    8148:	38 97       	sbiw	r30, 0x08	; 8
    814a:	ee 0f       	add	r30, r30
    814c:	ff 1f       	adc	r31, r31
    814e:	41 e0       	ldi	r20, 0x01	; 1
    8150:	50 e0       	ldi	r21, 0x00	; 0
    8152:	4c 0f       	add	r20, r28
    8154:	5d 1f       	adc	r21, r29
    8156:	e4 0f       	add	r30, r20
    8158:	f5 1f       	adc	r31, r21
    815a:	86 85       	ldd	r24, Z+14	; 0x0e
    815c:	97 85       	ldd	r25, Z+15	; 0x0f
    815e:	06 c0       	rjmp	.+12     	; 0x816c <ProcessMixer+0x628>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    8160:	ee 0f       	add	r30, r30
    8162:	ff 1f       	adc	r31, r31
    8164:	ef 5a       	subi	r30, 0xAF	; 175
    8166:	f7 4f       	sbci	r31, 0xF7	; 247
    8168:	80 81       	ld	r24, Z
    816a:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    816c:	77 27       	eor	r23, r23
    816e:	67 fd       	sbrc	r22, 7
    8170:	70 95       	com	r23
    8172:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
				P1_solution = P1_solution + temp2;
    8176:	e8 0e       	add	r14, r24
    8178:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (transition > 0)	
    817a:	1a 14       	cp	r1, r10
    817c:	1b 04       	cpc	r1, r11
    817e:	0c f0       	brlt	.+2      	; 0x8182 <ProcessMixer+0x63e>
    8180:	85 c0       	rjmp	.+266    	; 0x828c <ProcessMixer+0x748>
    8182:	c6 01       	movw	r24, r12
    8184:	8f 53       	subi	r24, 0x3F	; 63
    8186:	9a 4f       	sbci	r25, 0xFA	; 250
    8188:	3c 01       	movw	r6, r24
    818a:	fc 01       	movw	r30, r24
    818c:	e1 56       	subi	r30, 0x61	; 97
    818e:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    8190:	60 81       	ld	r22, Z
    8192:	66 23       	and	r22, r22
    8194:	59 f0       	breq	.+22     	; 0x81ac <ProcessMixer+0x668>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    8196:	80 91 53 08 	lds	r24, 0x0853
    819a:	90 91 54 08 	lds	r25, 0x0854
    819e:	77 27       	eor	r23, r23
    81a0:	67 fd       	sbrc	r22, 7
    81a2:	70 95       	com	r23
    81a4:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
				P2_solution = P2_solution + temp2;
    81a8:	08 0f       	add	r16, r24
    81aa:	19 1f       	adc	r17, r25
    81ac:	f3 01       	movw	r30, r6
    81ae:	ef 55       	subi	r30, 0x5F	; 95
    81b0:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    81b2:	60 81       	ld	r22, Z
    81b4:	66 23       	and	r22, r22
    81b6:	59 f0       	breq	.+22     	; 0x81ce <ProcessMixer+0x68a>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    81b8:	80 91 55 08 	lds	r24, 0x0855
    81bc:	90 91 56 08 	lds	r25, 0x0856
    81c0:	77 27       	eor	r23, r23
    81c2:	67 fd       	sbrc	r22, 7
    81c4:	70 95       	com	r23
    81c6:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
				P2_solution = P2_solution + temp2;
    81ca:	08 0f       	add	r16, r24
    81cc:	19 1f       	adc	r17, r25
    81ce:	f3 01       	movw	r30, r6
    81d0:	ed 55       	subi	r30, 0x5D	; 93
    81d2:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    81d4:	60 81       	ld	r22, Z
    81d6:	66 23       	and	r22, r22
    81d8:	59 f0       	breq	.+22     	; 0x81f0 <ProcessMixer+0x6ac>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    81da:	80 91 57 08 	lds	r24, 0x0857
    81de:	90 91 58 08 	lds	r25, 0x0858
    81e2:	77 27       	eor	r23, r23
    81e4:	67 fd       	sbrc	r22, 7
    81e6:	70 95       	com	r23
    81e8:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
				P2_solution = P2_solution + temp2;
    81ec:	08 0f       	add	r16, r24
    81ee:	19 1f       	adc	r17, r25
    81f0:	f3 01       	movw	r30, r6
    81f2:	ed 54       	subi	r30, 0x4D	; 77
    81f4:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    81f6:	60 81       	ld	r22, Z
    81f8:	66 23       	and	r22, r22
    81fa:	09 f1       	breq	.+66     	; 0x823e <ProcessMixer+0x6fa>
    81fc:	31 97       	sbiw	r30, 0x01	; 1
    81fe:	80 81       	ld	r24, Z
    8200:	8f 30       	cpi	r24, 0x0F	; 15
    8202:	e9 f0       	breq	.+58     	; 0x823e <ProcessMixer+0x6fa>
    8204:	e8 2f       	mov	r30, r24
    8206:	ff 27       	eor	r31, r31
    8208:	e7 fd       	sbrc	r30, 7
    820a:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    820c:	88 30       	cpi	r24, 0x08	; 8
    820e:	54 f0       	brlt	.+20     	; 0x8224 <ProcessMixer+0x6e0>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    8210:	38 97       	sbiw	r30, 0x08	; 8
    8212:	ee 0f       	add	r30, r30
    8214:	ff 1f       	adc	r31, r31
    8216:	a1 e0       	ldi	r26, 0x01	; 1
    8218:	b0 e0       	ldi	r27, 0x00	; 0
    821a:	ac 0f       	add	r26, r28
    821c:	bd 1f       	adc	r27, r29
    821e:	ea 0f       	add	r30, r26
    8220:	fb 1f       	adc	r31, r27
    8222:	04 c0       	rjmp	.+8      	; 0x822c <ProcessMixer+0x6e8>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    8224:	ee 0f       	add	r30, r30
    8226:	ff 1f       	adc	r31, r31
    8228:	ef 5a       	subi	r30, 0xAF	; 175
    822a:	f7 4f       	sbci	r31, 0xF7	; 247
    822c:	80 81       	ld	r24, Z
    822e:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    8230:	77 27       	eor	r23, r23
    8232:	67 fd       	sbrc	r22, 7
    8234:	70 95       	com	r23
    8236:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
				P2_solution = P2_solution + temp2;
    823a:	08 0f       	add	r16, r24
    823c:	19 1f       	adc	r17, r25
    823e:	f3 01       	movw	r30, r6
    8240:	e9 54       	subi	r30, 0x49	; 73
    8242:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    8244:	60 81       	ld	r22, Z
    8246:	66 23       	and	r22, r22
    8248:	09 f1       	breq	.+66     	; 0x828c <ProcessMixer+0x748>
    824a:	31 97       	sbiw	r30, 0x01	; 1
    824c:	80 81       	ld	r24, Z
    824e:	8f 30       	cpi	r24, 0x0F	; 15
    8250:	e9 f0       	breq	.+58     	; 0x828c <ProcessMixer+0x748>
    8252:	e8 2f       	mov	r30, r24
    8254:	ff 27       	eor	r31, r31
    8256:	e7 fd       	sbrc	r30, 7
    8258:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    825a:	88 30       	cpi	r24, 0x08	; 8
    825c:	54 f0       	brlt	.+20     	; 0x8272 <ProcessMixer+0x72e>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    825e:	38 97       	sbiw	r30, 0x08	; 8
    8260:	ee 0f       	add	r30, r30
    8262:	ff 1f       	adc	r31, r31
    8264:	21 e0       	ldi	r18, 0x01	; 1
    8266:	30 e0       	ldi	r19, 0x00	; 0
    8268:	2c 0f       	add	r18, r28
    826a:	3d 1f       	adc	r19, r29
    826c:	e2 0f       	add	r30, r18
    826e:	f3 1f       	adc	r31, r19
    8270:	04 c0       	rjmp	.+8      	; 0x827a <ProcessMixer+0x736>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    8272:	ee 0f       	add	r30, r30
    8274:	ff 1f       	adc	r31, r31
    8276:	ef 5a       	subi	r30, 0xAF	; 175
    8278:	f7 4f       	sbci	r31, 0xF7	; 247
    827a:	80 81       	ld	r24, Z
    827c:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    827e:	77 27       	eor	r23, r23
    8280:	67 fd       	sbrc	r22, 7
    8282:	70 95       	com	r23
    8284:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
				P2_solution = P2_solution + temp2;
    8288:	08 0f       	add	r16, r24
    828a:	19 1f       	adc	r17, r25
    828c:	c6 01       	movw	r24, r12
    828e:	8f 53       	subi	r24, 0x3F	; 63
    8290:	9a 4f       	sbci	r25, 0xFA	; 250
    8292:	fc 01       	movw	r30, r24
    8294:	ee 56       	subi	r30, 0x6E	; 110
    8296:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    8298:	f1 82       	std	Z+1, r15	; 0x01
    829a:	e0 82       	st	Z, r14
    829c:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    829e:	11 83       	std	Z+1, r17	; 0x01
    82a0:	00 83       	st	Z, r16
    82a2:	36 e2       	ldi	r19, 0x26	; 38
    82a4:	c3 0e       	add	r12, r19
    82a6:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    82a8:	40 e3       	ldi	r20, 0x30	; 48
    82aa:	c4 16       	cp	r12, r20
    82ac:	41 e0       	ldi	r20, 0x01	; 1
    82ae:	d4 06       	cpc	r13, r20
    82b0:	09 f0       	breq	.+2      	; 0x82b4 <ProcessMixer+0x770>
    82b2:	f3 cc       	rjmp	.-1562   	; 0x7c9a <ProcessMixer+0x156>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    82b4:	80 91 ef 05 	lds	r24, 0x05EF
    82b8:	88 23       	and	r24, r24
    82ba:	41 f0       	breq	.+16     	; 0x82cc <ProcessMixer+0x788>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    82bc:	80 91 24 05 	lds	r24, 0x0524
    82c0:	90 91 25 05 	lds	r25, 0x0525
    82c4:	90 93 22 05 	sts	0x0522, r25
    82c8:	80 93 21 05 	sts	0x0521, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    82cc:	00 91 21 05 	lds	r16, 0x0521
    82d0:	10 91 22 05 	lds	r17, 0x0522
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    82d4:	b4 e6       	ldi	r27, 0x64	; 100
    82d6:	cb 2e       	mov	r12, r27
    82d8:	d1 2c       	mov	r13, r1
    82da:	c0 1a       	sub	r12, r16
    82dc:	d1 0a       	sbc	r13, r17
    82de:	83 e5       	ldi	r24, 0x53	; 83
    82e0:	e8 2e       	mov	r14, r24
    82e2:	86 e0       	ldi	r24, 0x06	; 6
    82e4:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    82e6:	01 15       	cp	r16, r1
    82e8:	11 05       	cpc	r17, r1
    82ea:	21 f4       	brne	.+8      	; 0x82f4 <ProcessMixer+0x7b0>
		{
			temp1 = Config.Channel[i].P1_value;
    82ec:	d7 01       	movw	r26, r14
    82ee:	8d 91       	ld	r24, X+
    82f0:	9c 91       	ld	r25, X
    82f2:	16 c0       	rjmp	.+44     	; 0x8320 <ProcessMixer+0x7dc>
		}
		else if (transition >= 100)
    82f4:	04 36       	cpi	r16, 0x64	; 100
    82f6:	11 05       	cpc	r17, r1
    82f8:	24 f0       	brlt	.+8      	; 0x8302 <ProcessMixer+0x7be>
		{
			temp1 = Config.Channel[i].P2_value;
    82fa:	f7 01       	movw	r30, r14
    82fc:	82 81       	ldd	r24, Z+2	; 0x02
    82fe:	93 81       	ldd	r25, Z+3	; 0x03
    8300:	0f c0       	rjmp	.+30     	; 0x8320 <ProcessMixer+0x7dc>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    8302:	b6 01       	movw	r22, r12
    8304:	d7 01       	movw	r26, r14
    8306:	8d 91       	ld	r24, X+
    8308:	9c 91       	ld	r25, X
    830a:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>
    830e:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    8310:	b8 01       	movw	r22, r16
    8312:	f7 01       	movw	r30, r14
    8314:	82 81       	ldd	r24, Z+2	; 0x02
    8316:	93 81       	ldd	r25, Z+3	; 0x03
    8318:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    831c:	8a 0d       	add	r24, r10
    831e:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    8320:	d7 01       	movw	r26, r14
    8322:	8d 93       	st	X+, r24
    8324:	9c 93       	st	X, r25
    8326:	b6 e2       	ldi	r27, 0x26	; 38
    8328:	eb 0e       	add	r14, r27
    832a:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    832c:	e3 e8       	ldi	r30, 0x83	; 131
    832e:	ee 16       	cp	r14, r30
    8330:	e7 e0       	ldi	r30, 0x07	; 7
    8332:	fe 06       	cpc	r15, r30
    8334:	c1 f6       	brne	.-80     	; 0x82e6 <ProcessMixer+0x7a2>
    8336:	6d e5       	ldi	r22, 0x5D	; 93
    8338:	c6 2e       	mov	r12, r22
    833a:	66 e0       	ldi	r22, 0x06	; 6
    833c:	d6 2e       	mov	r13, r22
    833e:	7e e5       	ldi	r23, 0x5E	; 94
    8340:	87 2e       	mov	r8, r23
    8342:	76 e0       	ldi	r23, 0x06	; 6
    8344:	97 2e       	mov	r9, r23
    8346:	e3 e5       	ldi	r30, 0x53	; 83
    8348:	ee 2e       	mov	r14, r30
    834a:	e6 e0       	ldi	r30, 0x06	; 6
    834c:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    834e:	f4 e6       	ldi	r31, 0x64	; 100
    8350:	af 2e       	mov	r10, r31
    8352:	b1 2c       	mov	r11, r1
    8354:	80 2f       	mov	r24, r16
    8356:	99 27       	eor	r25, r25
    8358:	87 fd       	sbrc	r24, 7
    835a:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    835c:	9c 01       	movw	r18, r24
    835e:	25 5b       	subi	r18, 0xB5	; 181
    8360:	34 4e       	sbci	r19, 0xE4	; 228
    8362:	3e 8f       	std	Y+30, r19	; 0x1e
    8364:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    8366:	95 01       	movw	r18, r10
    8368:	28 1b       	sub	r18, r24
    836a:	39 0b       	sbc	r19, r25
    836c:	a9 01       	movw	r20, r18
    836e:	45 5b       	subi	r20, 0xB5	; 181
    8370:	54 4e       	sbci	r21, 0xE4	; 228
    8372:	58 a3       	std	Y+32, r21	; 0x20
    8374:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    8376:	dc 01       	movw	r26, r24
    8378:	a0 55       	subi	r26, 0x50	; 80
    837a:	b4 4e       	sbci	r27, 0xE4	; 228
    837c:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    837e:	f9 01       	movw	r30, r18
    8380:	e0 55       	subi	r30, 0x50	; 80
    8382:	f4 4e       	sbci	r31, 0xE4	; 228
    8384:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    8386:	ae e1       	ldi	r26, 0x1E	; 30
    8388:	6a 2e       	mov	r6, r26
    838a:	ab ef       	ldi	r26, 0xFB	; 251
    838c:	7a 2e       	mov	r7, r26
    838e:	f6 01       	movw	r30, r12
    8390:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    8392:	90 81       	ld	r25, Z
    8394:	d6 01       	movw	r26, r12
    8396:	8c 91       	ld	r24, X
    8398:	91 11       	cpse	r25, r1
    839a:	03 c0       	rjmp	.+6      	; 0x83a2 <ProcessMixer+0x85e>
    839c:	88 23       	and	r24, r24
    839e:	09 f4       	brne	.+2      	; 0x83a2 <ProcessMixer+0x85e>
    83a0:	61 c0       	rjmp	.+194    	; 0x8464 <ProcessMixer+0x920>
    83a2:	29 2f       	mov	r18, r25
    83a4:	33 27       	eor	r19, r19
    83a6:	27 fd       	sbrc	r18, 7
    83a8:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    83aa:	98 17       	cp	r25, r24
    83ac:	09 f4       	brne	.+2      	; 0x83b0 <ProcessMixer+0x86c>
    83ae:	48 c0       	rjmp	.+144    	; 0x8440 <ProcessMixer+0x8fc>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    83b0:	99 27       	eor	r25, r25
    83b2:	87 fd       	sbrc	r24, 7
    83b4:	90 95       	com	r25
    83b6:	82 1b       	sub	r24, r18
    83b8:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    83ba:	96 95       	lsr	r25
    83bc:	98 2f       	mov	r25, r24
    83be:	88 27       	eor	r24, r24
    83c0:	97 95       	ror	r25
    83c2:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    83c4:	b5 01       	movw	r22, r10
    83c6:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    83ca:	36 95       	lsr	r19
    83cc:	32 2f       	mov	r19, r18
    83ce:	22 27       	eor	r18, r18
    83d0:	37 95       	ror	r19
    83d2:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    83d4:	f4 01       	movw	r30, r8
    83d6:	80 81       	ld	r24, Z
    83d8:	81 11       	cpse	r24, r1
    83da:	08 c0       	rjmp	.+16     	; 0x83ec <ProcessMixer+0x8a8>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    83dc:	60 9f       	mul	r22, r16
    83de:	c0 01       	movw	r24, r0
    83e0:	61 9f       	mul	r22, r17
    83e2:	90 0d       	add	r25, r0
    83e4:	70 9f       	mul	r23, r16
    83e6:	90 0d       	add	r25, r0
    83e8:	11 24       	eor	r1, r1
    83ea:	20 c0       	rjmp	.+64     	; 0x842c <ProcessMixer+0x8e8>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    83ec:	81 30       	cpi	r24, 0x01	; 1
    83ee:	31 f4       	brne	.+12     	; 0x83fc <ProcessMixer+0x8b8>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    83f0:	77 ff       	sbrs	r23, 7
    83f2:	02 c0       	rjmp	.+4      	; 0x83f8 <ProcessMixer+0x8b4>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    83f4:	f2 01       	movw	r30, r4
    83f6:	06 c0       	rjmp	.+12     	; 0x8404 <ProcessMixer+0x8c0>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    83f8:	f1 01       	movw	r30, r2
    83fa:	0d c0       	rjmp	.+26     	; 0x8416 <ProcessMixer+0x8d2>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    83fc:	77 ff       	sbrs	r23, 7
    83fe:	09 c0       	rjmp	.+18     	; 0x8412 <ProcessMixer+0x8ce>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    8400:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8402:	f8 a1       	ldd	r31, Y+32	; 0x20
    8404:	84 91       	lpm	r24, Z
    8406:	a5 01       	movw	r20, r10
    8408:	48 1b       	sub	r20, r24
    840a:	51 09       	sbc	r21, r1
    840c:	87 fd       	sbrc	r24, 7
    840e:	53 95       	inc	r21
    8410:	06 c0       	rjmp	.+12     	; 0x841e <ProcessMixer+0x8da>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    8412:	ed 8d       	ldd	r30, Y+29	; 0x1d
    8414:	fe 8d       	ldd	r31, Y+30	; 0x1e
    8416:	44 91       	lpm	r20, Z
    8418:	55 27       	eor	r21, r21
    841a:	47 fd       	sbrc	r20, 7
    841c:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    841e:	64 9f       	mul	r22, r20
    8420:	c0 01       	movw	r24, r0
    8422:	65 9f       	mul	r22, r21
    8424:	90 0d       	add	r25, r0
    8426:	74 9f       	mul	r23, r20
    8428:	90 0d       	add	r25, r0
    842a:	11 24       	eor	r1, r1
    842c:	82 0f       	add	r24, r18
    842e:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    8430:	bc 01       	movw	r22, r24
    8432:	60 5c       	subi	r22, 0xC0	; 192
    8434:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    8436:	66 0f       	add	r22, r22
    8438:	67 2f       	mov	r22, r23
    843a:	66 1f       	adc	r22, r22
    843c:	77 0b       	sbc	r23, r23
    843e:	01 c0       	rjmp	.+2      	; 0x8442 <ProcessMixer+0x8fe>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    8440:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    8442:	80 91 4f 08 	lds	r24, 0x084F
    8446:	90 91 50 08 	lds	r25, 0x0850
    844a:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    844e:	88 5e       	subi	r24, 0xE8	; 232
    8450:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    8452:	d7 01       	movw	r26, r14
    8454:	2d 91       	ld	r18, X+
    8456:	3c 91       	ld	r19, X
    8458:	11 97       	sbiw	r26, 0x01	; 1
    845a:	28 0f       	add	r18, r24
    845c:	39 1f       	adc	r19, r25
    845e:	2d 93       	st	X+, r18
    8460:	3c 93       	st	X, r19
    8462:	08 c0       	rjmp	.+16     	; 0x8474 <ProcessMixer+0x930>
    8464:	f6 01       	movw	r30, r12
    8466:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    8468:	80 81       	ld	r24, Z
    846a:	82 30       	cpi	r24, 0x02	; 2
    846c:	19 f4       	brne	.+6      	; 0x8474 <ProcessMixer+0x930>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    846e:	f7 01       	movw	r30, r14
    8470:	71 82       	std	Z+1, r7	; 0x01
    8472:	60 82       	st	Z, r6
    8474:	f6 e2       	ldi	r31, 0x26	; 38
    8476:	ef 0e       	add	r14, r31
    8478:	f1 1c       	adc	r15, r1
    847a:	26 e2       	ldi	r18, 0x26	; 38
    847c:	c2 0e       	add	r12, r18
    847e:	d1 1c       	adc	r13, r1
    8480:	36 e2       	ldi	r19, 0x26	; 38
    8482:	83 0e       	add	r8, r19
    8484:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    8486:	43 e8       	ldi	r20, 0x83	; 131
    8488:	e4 16       	cp	r14, r20
    848a:	47 e0       	ldi	r20, 0x07	; 7
    848c:	f4 06       	cpc	r15, r20
    848e:	09 f0       	breq	.+2      	; 0x8492 <ProcessMixer+0x94e>
    8490:	7e cf       	rjmp	.-260    	; 0x838e <ProcessMixer+0x84a>
    8492:	eb e5       	ldi	r30, 0x5B	; 91
    8494:	f6 e0       	ldi	r31, 0x06	; 6
    8496:	23 e5       	ldi	r18, 0x53	; 83
    8498:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    849a:	94 e6       	ldi	r25, 0x64	; 100
    849c:	69 2e       	mov	r6, r25
    849e:	71 2c       	mov	r7, r1
    84a0:	df 01       	movw	r26, r30
    84a2:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    84a4:	cc 90       	ld	r12, X
    84a6:	12 96       	adiw	r26, 0x02	; 2
    84a8:	ac 90       	ld	r10, X
    84aa:	50 80       	ld	r5, Z
    84ac:	ca 10       	cpse	r12, r10
    84ae:	03 c0       	rjmp	.+6      	; 0x84b6 <ProcessMixer+0x972>
    84b0:	5c 14       	cp	r5, r12
    84b2:	09 f4       	brne	.+2      	; 0x84b6 <ProcessMixer+0x972>
    84b4:	53 c0       	rjmp	.+166    	; 0x855c <ProcessMixer+0xa18>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    84b6:	bb 24       	eor	r11, r11
    84b8:	a7 fc       	sbrc	r10, 7
    84ba:	b0 94       	com	r11
    84bc:	dd 24       	eor	r13, r13
    84be:	c7 fc       	sbrc	r12, 7
    84c0:	d0 94       	com	r13
    84c2:	c5 01       	movw	r24, r10
    84c4:	8c 19       	sub	r24, r12
    84c6:	9d 09       	sbc	r25, r13
    84c8:	df 01       	movw	r26, r30
    84ca:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    84cc:	ec 90       	ld	r14, X
    84ce:	ff 24       	eor	r15, r15
    84d0:	e7 fc       	sbrc	r14, 7
    84d2:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    84d4:	96 95       	lsr	r25
    84d6:	98 2f       	mov	r25, r24
    84d8:	88 27       	eor	r24, r24
    84da:	97 95       	ror	r25
    84dc:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    84de:	a7 01       	movw	r20, r14
    84e0:	55 95       	asr	r21
    84e2:	47 95       	ror	r20
    84e4:	84 0f       	add	r24, r20
    84e6:	95 1f       	adc	r25, r21
    84e8:	b7 01       	movw	r22, r14
    84ea:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <__divmodhi4>
    84ee:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    84f0:	85 2d       	mov	r24, r5
    84f2:	99 27       	eor	r25, r25
    84f4:	87 fd       	sbrc	r24, 7
    84f6:	90 95       	com	r25
    84f8:	8a 19       	sub	r24, r10
    84fa:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    84fc:	b3 01       	movw	r22, r6
    84fe:	6e 19       	sub	r22, r14
    8500:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    8502:	96 95       	lsr	r25
    8504:	98 2f       	mov	r25, r24
    8506:	88 27       	eor	r24, r24
    8508:	97 95       	ror	r25
    850a:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    850c:	ab 01       	movw	r20, r22
    850e:	55 95       	asr	r21
    8510:	47 95       	ror	r20
    8512:	84 0f       	add	r24, r20
    8514:	95 1f       	adc	r25, r21
    8516:	0e 94 12 4e 	call	0x9c24	; 0x9c24 <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    851a:	d6 94       	lsr	r13
    851c:	dc 2c       	mov	r13, r12
    851e:	cc 24       	eor	r12, r12
    8520:	d7 94       	ror	r13
    8522:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    8524:	40 e0       	ldi	r20, 0x00	; 0
    8526:	84 2f       	mov	r24, r20
    8528:	90 e0       	ldi	r25, 0x00	; 0
    852a:	80 17       	cp	r24, r16
    852c:	91 07       	cpc	r25, r17
    852e:	54 f4       	brge	.+20     	; 0x8544 <ProcessMixer+0xa00>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    8530:	8e 15       	cp	r24, r14
    8532:	9f 05       	cpc	r25, r15
    8534:	1c f4       	brge	.+6      	; 0x853c <ProcessMixer+0x9f8>
				{
					temp3 += Step1;
    8536:	c8 0c       	add	r12, r8
    8538:	d9 1c       	adc	r13, r9
    853a:	02 c0       	rjmp	.+4      	; 0x8540 <ProcessMixer+0x9fc>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    853c:	c6 0e       	add	r12, r22
    853e:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    8540:	4f 5f       	subi	r20, 0xFF	; 255
    8542:	f1 cf       	rjmp	.-30     	; 0x8526 <ProcessMixer+0x9e2>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    8544:	c6 01       	movw	r24, r12
    8546:	80 5c       	subi	r24, 0xC0	; 192
    8548:	9f 4f       	sbci	r25, 0xFF	; 255
    854a:	88 0f       	add	r24, r24
    854c:	89 2f       	mov	r24, r25
    854e:	88 1f       	adc	r24, r24
    8550:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    8552:	5a e0       	ldi	r21, 0x0A	; 10
    8554:	85 02       	muls	r24, r21
    8556:	60 01       	movw	r12, r0
    8558:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    855a:	05 c0       	rjmp	.+10     	; 0x8566 <ProcessMixer+0xa22>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    855c:	85 2d       	mov	r24, r5
    855e:	9a e0       	ldi	r25, 0x0A	; 10
    8560:	89 02       	muls	r24, r25
    8562:	60 01       	movw	r12, r0
    8564:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    8566:	d9 01       	movw	r26, r18
    8568:	4d 91       	ld	r20, X+
    856a:	5c 91       	ld	r21, X
    856c:	11 97       	sbiw	r26, 0x01	; 1
    856e:	4c 0d       	add	r20, r12
    8570:	5d 1d       	adc	r21, r13
    8572:	4d 93       	st	X+, r20
    8574:	5c 93       	st	X, r21
    8576:	2a 5d       	subi	r18, 0xDA	; 218
    8578:	3f 4f       	sbci	r19, 0xFF	; 255
    857a:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    857c:	b7 e0       	ldi	r27, 0x07	; 7
    857e:	eb 38       	cpi	r30, 0x8B	; 139
    8580:	fb 07       	cpc	r31, r27
    8582:	09 f0       	breq	.+2      	; 0x8586 <ProcessMixer+0xa42>
    8584:	8d cf       	rjmp	.-230    	; 0x84a0 <ProcessMixer+0x95c>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    8586:	e2 96       	adiw	r28, 0x32	; 50
    8588:	0f b6       	in	r0, 0x3f	; 63
    858a:	f8 94       	cli
    858c:	de bf       	out	0x3e, r29	; 62
    858e:	0f be       	out	0x3f, r0	; 63
    8590:	cd bf       	out	0x3d, r28	; 61
    8592:	df 91       	pop	r29
    8594:	cf 91       	pop	r28
    8596:	1f 91       	pop	r17
    8598:	0f 91       	pop	r16
    859a:	ff 90       	pop	r15
    859c:	ef 90       	pop	r14
    859e:	df 90       	pop	r13
    85a0:	cf 90       	pop	r12
    85a2:	bf 90       	pop	r11
    85a4:	af 90       	pop	r10
    85a6:	9f 90       	pop	r9
    85a8:	8f 90       	pop	r8
    85aa:	7f 90       	pop	r7
    85ac:	6f 90       	pop	r6
    85ae:	5f 90       	pop	r5
    85b0:	4f 90       	pop	r4
    85b2:	3f 90       	pop	r3
    85b4:	2f 90       	pop	r2
    85b6:	08 95       	ret

000085b8 <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    85b8:	2a e0       	ldi	r18, 0x0A	; 10
    85ba:	82 02       	muls	r24, r18
    85bc:	c0 01       	movw	r24, r0
    85be:	11 24       	eor	r1, r1

	return temp16_2;
}
    85c0:	8a 55       	subi	r24, 0x5A	; 90
    85c2:	91 4f       	sbci	r25, 0xF1	; 241
    85c4:	08 95       	ret

000085c6 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    85c6:	df 92       	push	r13
    85c8:	ef 92       	push	r14
    85ca:	ff 92       	push	r15
    85cc:	0f 93       	push	r16
    85ce:	1f 93       	push	r17
    85d0:	cf 93       	push	r28
    85d2:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    85d4:	dc 01       	movw	r26, r24
    85d6:	0d 90       	ld	r0, X+
    85d8:	00 20       	and	r0, r0
    85da:	e9 f7       	brne	.-6      	; 0x85d6 <mugui_text_sizestring+0x10>
    85dc:	11 97       	sbiw	r26, 0x01	; 1
    85de:	a8 1b       	sub	r26, r24
    85e0:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    85e2:	fb 01       	movw	r30, r22
    85e4:	34 96       	adiw	r30, 0x04	; 4
    85e6:	e4 90       	lpm	r14, Z
    85e8:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    85ea:	32 97       	sbiw	r30, 0x02	; 2
    85ec:	d4 90       	lpm	r13, Z
    85ee:	ec 01       	movw	r28, r24
    85f0:	a8 0f       	add	r26, r24
    85f2:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    85f4:	80 e0       	ldi	r24, 0x00	; 0
    85f6:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    85f8:	ca 17       	cp	r28, r26
    85fa:	db 07       	cpc	r29, r27
    85fc:	29 f1       	breq	.+74     	; 0x8648 <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    85fe:	29 91       	ld	r18, Y+
    8600:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    8602:	30 e0       	ldi	r19, 0x00	; 0
    8604:	22 0f       	add	r18, r18
    8606:	33 1f       	adc	r19, r19
    8608:	f9 01       	movw	r30, r18
    860a:	35 96       	adiw	r30, 0x05	; 5
    860c:	e6 0f       	add	r30, r22
    860e:	f7 1f       	adc	r31, r23
    8610:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    8612:	f9 01       	movw	r30, r18
    8614:	36 96       	adiw	r30, 0x06	; 6
    8616:	e6 0f       	add	r30, r22
    8618:	f7 1f       	adc	r31, r23
    861a:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    861c:	10 e0       	ldi	r17, 0x00	; 0
    861e:	20 e0       	ldi	r18, 0x00	; 0
    8620:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    8622:	32 2f       	mov	r19, r18
    8624:	21 2f       	mov	r18, r17
    8626:	10 2f       	mov	r17, r16
    8628:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    862a:	0e 0f       	add	r16, r30
    862c:	11 1d       	adc	r17, r1
    862e:	21 1d       	adc	r18, r1
    8630:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    8632:	fb 01       	movw	r30, r22
    8634:	e0 0f       	add	r30, r16
    8636:	f1 1f       	adc	r31, r17
    8638:	04 91       	lpm	r16, Z
    863a:	20 2f       	mov	r18, r16
    863c:	30 e0       	ldi	r19, 0x00	; 0
    863e:	2f 5f       	subi	r18, 0xFF	; 255
    8640:	3f 4f       	sbci	r19, 0xFF	; 255
    8642:	82 0f       	add	r24, r18
    8644:	93 1f       	adc	r25, r19
    8646:	d8 cf       	rjmp	.-80     	; 0x85f8 <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    8648:	fa 01       	movw	r30, r20
    864a:	91 83       	std	Z+1, r25	; 0x01
    864c:	80 83       	st	Z, r24
	size->y = height;
    864e:	f3 82       	std	Z+3, r15	; 0x03
    8650:	e2 82       	std	Z+2, r14	; 0x02
}
    8652:	df 91       	pop	r29
    8654:	cf 91       	pop	r28
    8656:	1f 91       	pop	r17
    8658:	0f 91       	pop	r16
    865a:	ff 90       	pop	r15
    865c:	ef 90       	pop	r14
    865e:	df 90       	pop	r13
    8660:	08 95       	ret

00008662 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    8662:	aa e6       	ldi	r26, 0x6A	; 106
    8664:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    8666:	20 e0       	ldi	r18, 0x00	; 0
    8668:	30 e0       	ldi	r19, 0x00	; 0
    866a:	fc 01       	movw	r30, r24
    866c:	e2 0f       	add	r30, r18
    866e:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    8670:	44 91       	lpm	r20, Z
    8672:	44 23       	and	r20, r20
    8674:	41 f0       	breq	.+16     	; 0x8686 <pgm_mugui_scopy+0x24>
    8676:	28 31       	cpi	r18, 0x18	; 24
    8678:	31 05       	cpc	r19, r1
    867a:	29 f0       	breq	.+10     	; 0x8686 <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    867c:	e4 91       	lpm	r30, Z
    867e:	ed 93       	st	X+, r30
		i++;
    8680:	2f 5f       	subi	r18, 0xFF	; 255
    8682:	3f 4f       	sbci	r19, 0xFF	; 255
    8684:	f2 cf       	rjmp	.-28     	; 0x866a <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    8686:	f9 01       	movw	r30, r18
    8688:	e6 59       	subi	r30, 0x96	; 150
    868a:	fa 4f       	sbci	r31, 0xFA	; 250
    868c:	10 82       	st	Z, r1
    868e:	08 95       	ret

00008690 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    8690:	2f 92       	push	r2
    8692:	3f 92       	push	r3
    8694:	4f 92       	push	r4
    8696:	5f 92       	push	r5
    8698:	6f 92       	push	r6
    869a:	7f 92       	push	r7
    869c:	8f 92       	push	r8
    869e:	9f 92       	push	r9
    86a0:	af 92       	push	r10
    86a2:	bf 92       	push	r11
    86a4:	cf 92       	push	r12
    86a6:	df 92       	push	r13
    86a8:	ef 92       	push	r14
    86aa:	ff 92       	push	r15
    86ac:	0f 93       	push	r16
    86ae:	1f 93       	push	r17
    86b0:	cf 93       	push	r28
    86b2:	df 93       	push	r29
    86b4:	cd b7       	in	r28, 0x3d	; 61
    86b6:	de b7       	in	r29, 0x3e	; 62
    86b8:	29 97       	sbiw	r28, 0x09	; 9
    86ba:	0f b6       	in	r0, 0x3f	; 63
    86bc:	f8 94       	cli
    86be:	de bf       	out	0x3e, r29	; 62
    86c0:	0f be       	out	0x3f, r0	; 63
    86c2:	cd bf       	out	0x3d, r28	; 61
    86c4:	4c 83       	std	Y+4, r20	; 0x04
    86c6:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    86c8:	fb 01       	movw	r30, r22
    86ca:	32 96       	adiw	r30, 0x02	; 2
    86cc:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    86ce:	32 96       	adiw	r30, 0x02	; 2
    86d0:	e4 91       	lpm	r30, Z
    86d2:	2e 2e       	mov	r2, r30
    86d4:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    86d6:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    86d8:	90 e0       	ldi	r25, 0x00	; 0
    86da:	88 0f       	add	r24, r24
    86dc:	99 1f       	adc	r25, r25
    86de:	fc 01       	movw	r30, r24
    86e0:	35 96       	adiw	r30, 0x05	; 5
    86e2:	e6 0f       	add	r30, r22
    86e4:	f7 1f       	adc	r31, r23
    86e6:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    86e8:	fc 01       	movw	r30, r24
    86ea:	36 96       	adiw	r30, 0x06	; 6
    86ec:	e6 0f       	add	r30, r22
    86ee:	f7 1f       	adc	r31, r23
    86f0:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    86f2:	06 2d       	mov	r16, r6
    86f4:	10 e0       	ldi	r17, 0x00	; 0
    86f6:	20 e0       	ldi	r18, 0x00	; 0
    86f8:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    86fa:	32 2f       	mov	r19, r18
    86fc:	21 2f       	mov	r18, r17
    86fe:	10 2f       	mov	r17, r16
    8700:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    8702:	08 0f       	add	r16, r24
    8704:	11 1d       	adc	r17, r1
    8706:	21 1d       	adc	r18, r1
    8708:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    870a:	c8 01       	movw	r24, r16
    870c:	fb 01       	movw	r30, r22
    870e:	e0 0f       	add	r30, r16
    8710:	f1 1f       	adc	r31, r17
    8712:	64 90       	lpm	r6, Z
    8714:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    8716:	21 01       	movw	r4, r2
    8718:	21 e0       	ldi	r18, 0x01	; 1
    871a:	42 1a       	sub	r4, r18
    871c:	51 08       	sbc	r5, r1
    871e:	13 e0       	ldi	r17, 0x03	; 3
    8720:	56 94       	lsr	r5
    8722:	47 94       	ror	r4
    8724:	1a 95       	dec	r17
    8726:	e1 f7       	brne	.-8      	; 0x8720 <mugui_lcd_putc+0x90>
    8728:	43 94       	inc	r4
    872a:	a4 2d       	mov	r26, r4
    872c:	b0 e0       	ldi	r27, 0x00	; 0
    872e:	ba 83       	std	Y+2, r27	; 0x02
    8730:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    8732:	a1 2c       	mov	r10, r1
    8734:	b1 2c       	mov	r11, r1
    8736:	00 e0       	ldi	r16, 0x00	; 0
    8738:	10 e0       	ldi	r17, 0x00	; 0
    873a:	4b 01       	movw	r8, r22
    873c:	bf ef       	ldi	r27, 0xFF	; 255
    873e:	8b 1a       	sub	r8, r27
    8740:	9b 0a       	sbc	r9, r27
    8742:	88 0e       	add	r8, r24
    8744:	99 1e       	adc	r9, r25
    8746:	06 15       	cp	r16, r6
    8748:	17 05       	cpc	r17, r7
    874a:	08 f0       	brcs	.+2      	; 0x874e <mugui_lcd_putc+0xbe>
    874c:	43 c0       	rjmp	.+134    	; 0x87d4 <mugui_lcd_putc+0x144>
    874e:	c1 2c       	mov	r12, r1
    8750:	d1 2c       	mov	r13, r1
    8752:	e1 2c       	mov	r14, r1
    8754:	f1 2c       	mov	r15, r1
    8756:	94 01       	movw	r18, r8
    8758:	2a 0d       	add	r18, r10
    875a:	3b 1d       	adc	r19, r11
    875c:	3f 83       	std	Y+7, r19	; 0x07
    875e:	2e 83       	std	Y+6, r18	; 0x06
    8760:	5c 80       	ldd	r5, Y+4	; 0x04
    8762:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    8764:	c4 14       	cp	r12, r4
    8766:	78 f5       	brcc	.+94     	; 0x87c6 <mugui_lcd_putc+0x136>
    8768:	ee 81       	ldd	r30, Y+6	; 0x06
    876a:	ff 81       	ldd	r31, Y+7	; 0x07
    876c:	ec 0d       	add	r30, r12
    876e:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    8770:	34 91       	lpm	r19, Z
    8772:	3b 83       	std	Y+3, r19	; 0x03
    8774:	19 86       	std	Y+9, r1	; 0x09
    8776:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    8778:	e2 14       	cp	r14, r2
    877a:	f3 04       	cpc	r15, r3
    877c:	00 f5       	brcc	.+64     	; 0x87be <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    877e:	81 e0       	ldi	r24, 0x01	; 1
    8780:	90 e0       	ldi	r25, 0x00	; 0
    8782:	08 84       	ldd	r0, Y+8	; 0x08
    8784:	02 c0       	rjmp	.+4      	; 0x878a <mugui_lcd_putc+0xfa>
    8786:	88 0f       	add	r24, r24
    8788:	99 1f       	adc	r25, r25
    878a:	0a 94       	dec	r0
    878c:	e2 f7       	brpl	.-8      	; 0x8786 <mugui_lcd_putc+0xf6>
					bit = data & mask;
    878e:	3b 81       	ldd	r19, Y+3	; 0x03
    8790:	83 23       	and	r24, r19
    8792:	4d 81       	ldd	r20, Y+5	; 0x05
    8794:	4e 0d       	add	r20, r14
					if(bit)
    8796:	88 23       	and	r24, r24
    8798:	11 f0       	breq	.+4      	; 0x879e <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    879a:	21 e0       	ldi	r18, 0x01	; 1
    879c:	01 c0       	rjmp	.+2      	; 0x87a0 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    879e:	20 e0       	ldi	r18, 0x00	; 0
    87a0:	65 2d       	mov	r22, r5
    87a2:	80 e0       	ldi	r24, 0x00	; 0
    87a4:	91 e0       	ldi	r25, 0x01	; 1
    87a6:	0e 94 a4 24 	call	0x4948	; 0x4948 <setpixel>
					}
					ty++;
    87aa:	8f ef       	ldi	r24, 0xFF	; 255
    87ac:	e8 1a       	sub	r14, r24
    87ae:	f8 0a       	sbc	r15, r24
    87b0:	a8 85       	ldd	r26, Y+8	; 0x08
    87b2:	b9 85       	ldd	r27, Y+9	; 0x09
    87b4:	11 96       	adiw	r26, 0x01	; 1
    87b6:	b9 87       	std	Y+9, r27	; 0x09
    87b8:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    87ba:	18 97       	sbiw	r26, 0x08	; 8
    87bc:	e9 f6       	brne	.-70     	; 0x8778 <mugui_lcd_putc+0xe8>
    87be:	bf ef       	ldi	r27, 0xFF	; 255
    87c0:	cb 1a       	sub	r12, r27
    87c2:	db 0a       	sbc	r13, r27
    87c4:	cf cf       	rjmp	.-98     	; 0x8764 <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    87c6:	0f 5f       	subi	r16, 0xFF	; 255
    87c8:	1f 4f       	sbci	r17, 0xFF	; 255
    87ca:	e9 81       	ldd	r30, Y+1	; 0x01
    87cc:	fa 81       	ldd	r31, Y+2	; 0x02
    87ce:	ae 0e       	add	r10, r30
    87d0:	bf 1e       	adc	r11, r31
    87d2:	b9 cf       	rjmp	.-142    	; 0x8746 <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    87d4:	c3 01       	movw	r24, r6
    87d6:	29 96       	adiw	r28, 0x09	; 9
    87d8:	0f b6       	in	r0, 0x3f	; 63
    87da:	f8 94       	cli
    87dc:	de bf       	out	0x3e, r29	; 62
    87de:	0f be       	out	0x3f, r0	; 63
    87e0:	cd bf       	out	0x3d, r28	; 61
    87e2:	df 91       	pop	r29
    87e4:	cf 91       	pop	r28
    87e6:	1f 91       	pop	r17
    87e8:	0f 91       	pop	r16
    87ea:	ff 90       	pop	r15
    87ec:	ef 90       	pop	r14
    87ee:	df 90       	pop	r13
    87f0:	cf 90       	pop	r12
    87f2:	bf 90       	pop	r11
    87f4:	af 90       	pop	r10
    87f6:	9f 90       	pop	r9
    87f8:	8f 90       	pop	r8
    87fa:	7f 90       	pop	r7
    87fc:	6f 90       	pop	r6
    87fe:	5f 90       	pop	r5
    8800:	4f 90       	pop	r4
    8802:	3f 90       	pop	r3
    8804:	2f 90       	pop	r2
    8806:	08 95       	ret

00008808 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    8808:	af 92       	push	r10
    880a:	bf 92       	push	r11
    880c:	cf 92       	push	r12
    880e:	df 92       	push	r13
    8810:	ef 92       	push	r14
    8812:	ff 92       	push	r15
    8814:	0f 93       	push	r16
    8816:	1f 93       	push	r17
    8818:	cf 93       	push	r28
    881a:	df 93       	push	r29
    881c:	ec 01       	movw	r28, r24
    881e:	7b 01       	movw	r14, r22
    8820:	6a 01       	movw	r12, r20
    8822:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    8824:	00 e0       	ldi	r16, 0x00	; 0
    8826:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    8828:	ce 01       	movw	r24, r28
    882a:	fe 01       	movw	r30, r28
    882c:	24 91       	lpm	r18, Z
    882e:	22 23       	and	r18, r18
    8830:	71 f0       	breq	.+28     	; 0x884e <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    8832:	21 96       	adiw	r28, 0x01	; 1
    8834:	fc 01       	movw	r30, r24
    8836:	84 91       	lpm	r24, Z
    8838:	a8 01       	movw	r20, r16
    883a:	4c 0d       	add	r20, r12
    883c:	5d 1d       	adc	r21, r13
    883e:	95 01       	movw	r18, r10
    8840:	b7 01       	movw	r22, r14
    8842:	0e 94 48 43 	call	0x8690	; 0x8690 <mugui_lcd_putc>
    8846:	01 96       	adiw	r24, 0x01	; 1
    8848:	08 0f       	add	r16, r24
    884a:	19 1f       	adc	r17, r25
    884c:	ed cf       	rjmp	.-38     	; 0x8828 <pgm_mugui_lcd_puts+0x20>
	}
}
    884e:	df 91       	pop	r29
    8850:	cf 91       	pop	r28
    8852:	1f 91       	pop	r17
    8854:	0f 91       	pop	r16
    8856:	ff 90       	pop	r15
    8858:	ef 90       	pop	r14
    885a:	df 90       	pop	r13
    885c:	cf 90       	pop	r12
    885e:	bf 90       	pop	r11
    8860:	af 90       	pop	r10
    8862:	08 95       	ret

00008864 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    8864:	8f 92       	push	r8
    8866:	9f 92       	push	r9
    8868:	af 92       	push	r10
    886a:	bf 92       	push	r11
    886c:	cf 92       	push	r12
    886e:	df 92       	push	r13
    8870:	ef 92       	push	r14
    8872:	ff 92       	push	r15
    8874:	0f 93       	push	r16
    8876:	1f 93       	push	r17
    8878:	cf 93       	push	r28
    887a:	df 93       	push	r29
    887c:	6b 01       	movw	r12, r22
    887e:	5a 01       	movw	r10, r20
    8880:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    8882:	ec 01       	movw	r28, r24
    8884:	09 90       	ld	r0, Y+
    8886:	00 20       	and	r0, r0
    8888:	e9 f7       	brne	.-6      	; 0x8884 <mugui_lcd_puts+0x20>
    888a:	8c 01       	movw	r16, r24
    888c:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    888e:	e1 2c       	mov	r14, r1
    8890:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    8892:	0c 17       	cp	r16, r28
    8894:	1d 07       	cpc	r17, r29
    8896:	71 f0       	breq	.+28     	; 0x88b4 <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    8898:	a7 01       	movw	r20, r14
    889a:	4a 0d       	add	r20, r10
    889c:	5b 1d       	adc	r21, r11
    889e:	94 01       	movw	r18, r8
    88a0:	b6 01       	movw	r22, r12
    88a2:	f8 01       	movw	r30, r16
    88a4:	81 91       	ld	r24, Z+
    88a6:	8f 01       	movw	r16, r30
    88a8:	0e 94 48 43 	call	0x8690	; 0x8690 <mugui_lcd_putc>
    88ac:	01 96       	adiw	r24, 0x01	; 1
    88ae:	e8 0e       	add	r14, r24
    88b0:	f9 1e       	adc	r15, r25
    88b2:	ef cf       	rjmp	.-34     	; 0x8892 <mugui_lcd_puts+0x2e>
	}
}
    88b4:	df 91       	pop	r29
    88b6:	cf 91       	pop	r28
    88b8:	1f 91       	pop	r17
    88ba:	0f 91       	pop	r16
    88bc:	ff 90       	pop	r15
    88be:	ef 90       	pop	r14
    88c0:	df 90       	pop	r13
    88c2:	cf 90       	pop	r12
    88c4:	bf 90       	pop	r11
    88c6:	af 90       	pop	r10
    88c8:	9f 90       	pop	r9
    88ca:	8f 90       	pop	r8
    88cc:	08 95       	ret

000088ce <Sensor_PID>:
int32_t PID_AvgAccVert = 0;
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    88ce:	2f 92       	push	r2
    88d0:	3f 92       	push	r3
    88d2:	4f 92       	push	r4
    88d4:	5f 92       	push	r5
    88d6:	6f 92       	push	r6
    88d8:	7f 92       	push	r7
    88da:	8f 92       	push	r8
    88dc:	9f 92       	push	r9
    88de:	af 92       	push	r10
    88e0:	bf 92       	push	r11
    88e2:	cf 92       	push	r12
    88e4:	df 92       	push	r13
    88e6:	ef 92       	push	r14
    88e8:	ff 92       	push	r15
    88ea:	0f 93       	push	r16
    88ec:	1f 93       	push	r17
    88ee:	cf 93       	push	r28
    88f0:	df 93       	push	r29
    88f2:	cd b7       	in	r28, 0x3d	; 61
    88f4:	de b7       	in	r29, 0x3e	; 62
    88f6:	a3 97       	sbiw	r28, 0x23	; 35
    88f8:	0f b6       	in	r0, 0x3f	; 63
    88fa:	f8 94       	cli
    88fc:	de bf       	out	0x3e, r29	; 62
    88fe:	0f be       	out	0x3f, r0	; 63
    8900:	cd bf       	out	0x3d, r28	; 61
    8902:	68 a3       	std	Y+32, r22	; 0x20
    8904:	79 a3       	std	Y+33, r23	; 0x21
    8906:	8a a3       	std	Y+34, r24	; 0x22
    8908:	9b a3       	std	Y+35, r25	; 0x23
	float tempf1 = 0;
    890a:	1d 86       	std	Y+13, r1	; 0x0d
    890c:	1e 86       	std	Y+14, r1	; 0x0e
    890e:	1f 86       	std	Y+15, r1	; 0x0f
    8910:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    8912:	80 91 53 08 	lds	r24, 0x0853
    8916:	90 91 54 08 	lds	r25, 0x0854
    891a:	91 95       	neg	r25
    891c:	81 95       	neg	r24
    891e:	91 09       	sbc	r25, r1
    8920:	98 87       	std	Y+8, r25	; 0x08
    8922:	8f 83       	std	Y+7, r24	; 0x07
    8924:	80 91 55 08 	lds	r24, 0x0855
    8928:	90 91 56 08 	lds	r25, 0x0856
    892c:	9a 87       	std	Y+10, r25	; 0x0a
    892e:	89 87       	std	Y+9, r24	; 0x09
    8930:	80 91 57 08 	lds	r24, 0x0857
    8934:	90 91 58 08 	lds	r25, 0x0858
    8938:	9c 87       	std	Y+12, r25	; 0x0c
    893a:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    893c:	80 91 f6 05 	lds	r24, 0x05F6
    8940:	89 83       	std	Y+1, r24	; 0x01
    8942:	80 91 fc 05 	lds	r24, 0x05FC
    8946:	8a 83       	std	Y+2, r24	; 0x02
    8948:	80 91 02 06 	lds	r24, 0x0602
    894c:	8b 83       	std	Y+3, r24	; 0x03
    894e:	80 91 08 06 	lds	r24, 0x0608
    8952:	8c 83       	std	Y+4, r24	; 0x04
    8954:	80 91 0e 06 	lds	r24, 0x060E
    8958:	8d 83       	std	Y+5, r24	; 0x05
    895a:	80 91 14 06 	lds	r24, 0x0614
    895e:	8e 83       	std	Y+6, r24	; 0x06
    8960:	9e 01       	movw	r18, r28
    8962:	29 5f       	subi	r18, 0xF9	; 249
    8964:	3f 4f       	sbci	r19, 0xFF	; 255
    8966:	39 8f       	std	Y+25, r19	; 0x19
    8968:	28 8f       	std	Y+24, r18	; 0x18
    896a:	ce 01       	movw	r24, r28
    896c:	01 96       	adiw	r24, 0x01	; 1
    896e:	9f 8b       	std	Y+23, r25	; 0x17
    8970:	8e 8b       	std	Y+22, r24	; 0x16
    8972:	fe 01       	movw	r30, r28
    8974:	34 96       	adiw	r30, 0x04	; 4
    8976:	fd 8b       	std	Y+21, r31	; 0x15
    8978:	ec 8b       	std	Y+20, r30	; 0x14
    897a:	03 e1       	ldi	r16, 0x13	; 19
    897c:	18 e0       	ldi	r17, 0x08	; 8
    897e:	2b e3       	ldi	r18, 0x3B	; 59
    8980:	36 e0       	ldi	r19, 0x06	; 6
    8982:	3d 8f       	std	Y+29, r19	; 0x1d
    8984:	2c 8f       	std	Y+28, r18	; 0x1c
    8986:	5b e2       	ldi	r21, 0x2B	; 43
    8988:	25 2e       	mov	r2, r21
    898a:	58 e0       	ldi	r21, 0x08	; 8
    898c:	35 2e       	mov	r3, r21
    898e:	83 e8       	ldi	r24, 0x83	; 131
    8990:	95 e0       	ldi	r25, 0x05	; 5
    8992:	9a 8b       	std	Y+18, r25	; 0x12
    8994:	89 8b       	std	Y+17, r24	; 0x11
    8996:	ef e2       	ldi	r30, 0x2F	; 47
    8998:	f6 e0       	ldi	r31, 0x06	; 6
    899a:	fb 8f       	std	Y+27, r31	; 0x1b
    899c:	ea 8f       	std	Y+26, r30	; 0x1a
	{
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	for (axis = 0; axis <= YAW; axis ++)
    899e:	1b 8a       	std	Y+19, r1	; 0x13
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    89a0:	e8 8d       	ldd	r30, Y+24	; 0x18
    89a2:	f9 8d       	ldd	r31, Y+25	; 0x19
    89a4:	81 91       	ld	r24, Z+
    89a6:	91 91       	ld	r25, Z+
    89a8:	f9 8f       	std	Y+25, r31	; 0x19
    89aa:	e8 8f       	std	Y+24, r30	; 0x18
    89ac:	ee 89       	ldd	r30, Y+22	; 0x16
    89ae:	ff 89       	ldd	r31, Y+23	; 0x17
    89b0:	21 91       	ld	r18, Z+
    89b2:	ff 8b       	std	Y+23, r31	; 0x17
    89b4:	ee 8b       	std	Y+22, r30	; 0x16
    89b6:	36 e0       	ldi	r19, 0x06	; 6
    89b8:	63 2e       	mov	r6, r19
    89ba:	71 2c       	mov	r7, r1
    89bc:	62 1a       	sub	r6, r18
    89be:	71 08       	sbc	r7, r1
    89c0:	27 fd       	sbrc	r18, 7
    89c2:	73 94       	inc	r7
    89c4:	9c 01       	movw	r18, r24
    89c6:	02 c0       	rjmp	.+4      	; 0x89cc <Sensor_PID+0xfe>
    89c8:	35 95       	asr	r19
    89ca:	27 95       	ror	r18
    89cc:	6a 94       	dec	r6
    89ce:	e2 f7       	brpl	.-8      	; 0x89c8 <Sensor_PID+0xfa>
    89d0:	39 01       	movw	r6, r18
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    89d2:	ec 89       	ldd	r30, Y+20	; 0x14
    89d4:	fd 89       	ldd	r31, Y+21	; 0x15
    89d6:	21 91       	ld	r18, Z+
    89d8:	fd 8b       	std	Y+21, r31	; 0x15
    89da:	ec 8b       	std	Y+20, r30	; 0x14
    89dc:	46 e0       	ldi	r20, 0x06	; 6
    89de:	c4 2e       	mov	r12, r20
    89e0:	d1 2c       	mov	r13, r1
    89e2:	c2 1a       	sub	r12, r18
    89e4:	d1 08       	sbc	r13, r1
    89e6:	27 fd       	sbrc	r18, 7
    89e8:	d3 94       	inc	r13
    89ea:	9c 01       	movw	r18, r24
    89ec:	02 c0       	rjmp	.+4      	; 0x89f2 <Sensor_PID+0x124>
    89ee:	35 95       	asr	r19
    89f0:	27 95       	ror	r18
    89f2:	ca 94       	dec	r12
    89f4:	e2 f7       	brpl	.-8      	; 0x89ee <Sensor_PID+0x120>
    89f6:	3f 8f       	std	Y+31, r19	; 0x1f
    89f8:	2e 8f       	std	Y+30, r18	; 0x1e
		// Gyro LPF
		//************************************************************	

		// Lookup LPF value
		// Note: Two sets of values for normal and high-speed mode
		if (Config.Servo_rate != FAST)
    89fa:	80 91 eb 05 	lds	r24, 0x05EB
    89fe:	60 91 50 06 	lds	r22, 0x0650
    8a02:	82 30       	cpi	r24, 0x02	; 2
    8a04:	39 f0       	breq	.+14     	; 0x8a14 <Sensor_PID+0x146>
		{
			memcpy_P(&tempf1, &LPF_lookup[Config.Gyro_LPF], sizeof(float));
    8a06:	34 e0       	ldi	r19, 0x04	; 4
    8a08:	63 02       	muls	r22, r19
    8a0a:	b0 01       	movw	r22, r0
    8a0c:	11 24       	eor	r1, r1
    8a0e:	60 51       	subi	r22, 0x10	; 16
    8a10:	77 4e       	sbci	r23, 0xE7	; 231
    8a12:	06 c0       	rjmp	.+12     	; 0x8a20 <Sensor_PID+0x152>
		}
		else
		{
			memcpy_P(&tempf1, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float));
    8a14:	84 e0       	ldi	r24, 0x04	; 4
    8a16:	68 02       	muls	r22, r24
    8a18:	b0 01       	movw	r22, r0
    8a1a:	11 24       	eor	r1, r1
    8a1c:	60 53       	subi	r22, 0x30	; 48
    8a1e:	77 4e       	sbci	r23, 0xE7	; 231
    8a20:	44 e0       	ldi	r20, 0x04	; 4
    8a22:	50 e0       	ldi	r21, 0x00	; 0
    8a24:	ce 01       	movw	r24, r28
    8a26:	0d 96       	adiw	r24, 0x0d	; 13
    8a28:	0e 94 9e 4e 	call	0x9d3c	; 0x9d3c <memcpy_P>
		}		
			
		gyroADCf = gyroADC[axis]; // Promote gyro signal to suit
    8a2c:	e9 89       	ldd	r30, Y+17	; 0x11
    8a2e:	fa 89       	ldd	r31, Y+18	; 0x12
    8a30:	60 81       	ld	r22, Z
    8a32:	71 81       	ldd	r23, Z+1	; 0x01
    8a34:	88 27       	eor	r24, r24
    8a36:	77 fd       	sbrc	r23, 7
    8a38:	80 95       	com	r24
    8a3a:	98 2f       	mov	r25, r24
    8a3c:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    8a40:	6b 01       	movw	r12, r22
    8a42:	7c 01       	movw	r14, r24

		if (Config.Gyro_LPF != NOFILTER)
    8a44:	80 91 50 06 	lds	r24, 0x0650
    8a48:	87 30       	cpi	r24, 0x07	; 7
    8a4a:	09 f1       	breq	.+66     	; 0x8a8e <Sensor_PID+0x1c0>
		{
			// Gyro LPF
			gyroSmooth[axis] = ((gyroSmooth[axis] * (tempf1 - 1.0f)) + gyroADCf) / tempf1;
    8a4c:	8d 84       	ldd	r8, Y+13	; 0x0d
    8a4e:	9e 84       	ldd	r9, Y+14	; 0x0e
    8a50:	af 84       	ldd	r10, Y+15	; 0x0f
    8a52:	b8 88       	ldd	r11, Y+16	; 0x10
    8a54:	20 e0       	ldi	r18, 0x00	; 0
    8a56:	30 e0       	ldi	r19, 0x00	; 0
    8a58:	40 e8       	ldi	r20, 0x80	; 128
    8a5a:	5f e3       	ldi	r21, 0x3F	; 63
    8a5c:	c5 01       	movw	r24, r10
    8a5e:	b4 01       	movw	r22, r8
    8a60:	0e 94 e3 4b 	call	0x97c6	; 0x97c6 <__subsf3>
    8a64:	f1 01       	movw	r30, r2
    8a66:	20 81       	ld	r18, Z
    8a68:	31 81       	ldd	r19, Z+1	; 0x01
    8a6a:	42 81       	ldd	r20, Z+2	; 0x02
    8a6c:	53 81       	ldd	r21, Z+3	; 0x03
    8a6e:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
    8a72:	a7 01       	movw	r20, r14
    8a74:	96 01       	movw	r18, r12
    8a76:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__addsf3>
    8a7a:	a5 01       	movw	r20, r10
    8a7c:	94 01       	movw	r18, r8
    8a7e:	0e 94 4c 4c 	call	0x9898	; 0x9898 <__divsf3>
    8a82:	f1 01       	movw	r30, r2
    8a84:	60 83       	st	Z, r22
    8a86:	71 83       	std	Z+1, r23	; 0x01
    8a88:	82 83       	std	Z+2, r24	; 0x02
    8a8a:	93 83       	std	Z+3, r25	; 0x03
    8a8c:	05 c0       	rjmp	.+10     	; 0x8a98 <Sensor_PID+0x1ca>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values when filter off
			gyroSmooth[axis] = gyroADCf;
    8a8e:	f1 01       	movw	r30, r2
    8a90:	c0 82       	st	Z, r12
    8a92:	d1 82       	std	Z+1, r13	; 0x01
    8a94:	e2 82       	std	Z+2, r14	; 0x02
    8a96:	f3 82       	std	Z+3, r15	; 0x03
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];	
    8a98:	f1 01       	movw	r30, r2
    8a9a:	60 81       	ld	r22, Z
    8a9c:	71 81       	ldd	r23, Z+1	; 0x01
    8a9e:	82 81       	ldd	r24, Z+2	; 0x02
    8aa0:	93 81       	ldd	r25, Z+3	; 0x03
    8aa2:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
    8aa6:	6b 01       	movw	r12, r22
    8aa8:	7c 01       	movw	r14, r24
    8aaa:	e9 89       	ldd	r30, Y+17	; 0x11
    8aac:	fa 89       	ldd	r31, Y+18	; 0x12
    8aae:	71 83       	std	Z+1, r23	; 0x01
    8ab0:	60 83       	st	Z, r22
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;								// Promote int32_t to float
		factor = period/STANDARDLOOP;
    8ab2:	68 a1       	ldd	r22, Y+32	; 0x20
    8ab4:	79 a1       	ldd	r23, Y+33	; 0x21
    8ab6:	8a a1       	ldd	r24, Y+34	; 0x22
    8ab8:	9b a1       	ldd	r25, Y+35	; 0x23
    8aba:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <__floatunsisf>
    8abe:	20 e0       	ldi	r18, 0x00	; 0
    8ac0:	30 e3       	ldi	r19, 0x30	; 48
    8ac2:	4f e5       	ldi	r20, 0x5F	; 95
    8ac4:	55 e4       	ldi	r21, 0x45	; 69
    8ac6:	0e 94 4c 4c 	call	0x9898	; 0x9898 <__divsf3>
    8aca:	4b 01       	movw	r8, r22
    8acc:	5c 01       	movw	r10, r24
		//************************************************************
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
    8ace:	b3 01       	movw	r22, r6
    8ad0:	6c 0d       	add	r22, r12
    8ad2:	7d 1d       	adc	r23, r13
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;								// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    8ad4:	88 27       	eor	r24, r24
    8ad6:	77 fd       	sbrc	r23, 7
    8ad8:	80 95       	com	r24
    8ada:	98 2f       	mov	r25, r24
    8adc:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    8ae0:	2b 01       	movw	r4, r22
    8ae2:	3c 01       	movw	r6, r24
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
    8ae4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    8ae6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    8ae8:	c2 0e       	add	r12, r18
    8aea:	d3 1e       	adc	r13, r19
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
    8aec:	b6 01       	movw	r22, r12
    8aee:	88 27       	eor	r24, r24
    8af0:	77 fd       	sbrc	r23, 7
    8af2:	80 95       	com	r24
    8af4:	98 2f       	mov	r25, r24
    8af6:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatsisf>
    8afa:	6b 01       	movw	r12, r22
    8afc:	7c 01       	movw	r14, r24
		tempf2 = period;								// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
    8afe:	a5 01       	movw	r20, r10
    8b00:	94 01       	movw	r18, r8
    8b02:	c3 01       	movw	r24, r6
    8b04:	b2 01       	movw	r22, r4
    8b06:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    8b0a:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
		tempf2 = tempf2 * factor;
		P2_temp = (int32_t)tempf2;
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
    8b0e:	f8 01       	movw	r30, r16
    8b10:	40 80       	ld	r4, Z
    8b12:	51 80       	ldd	r5, Z+1	; 0x01
    8b14:	62 80       	ldd	r6, Z+2	; 0x02
    8b16:	73 80       	ldd	r7, Z+3	; 0x03
    8b18:	46 0e       	add	r4, r22
    8b1a:	57 1e       	adc	r5, r23
    8b1c:	68 1e       	adc	r6, r24
    8b1e:	79 1e       	adc	r7, r25
    8b20:	40 82       	st	Z, r4
    8b22:	51 82       	std	Z+1, r5	; 0x01
    8b24:	62 82       	std	Z+2, r6	; 0x02
    8b26:	73 82       	std	Z+3, r7	; 0x03
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
		tempf2 = tempf2 * factor;
    8b28:	a5 01       	movw	r20, r10
    8b2a:	94 01       	movw	r18, r8
    8b2c:	c7 01       	movw	r24, r14
    8b2e:	b6 01       	movw	r22, r12
    8b30:	0e 94 9b 4d 	call	0x9b36	; 0x9b36 <__mulsf3>
		P2_temp = (int32_t)tempf2;
    8b34:	0e 94 b4 4c 	call	0x9968	; 0x9968 <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
		IntegralGyro[P2][axis] += P2_temp;
    8b38:	f8 01       	movw	r30, r16
    8b3a:	c4 84       	ldd	r12, Z+12	; 0x0c
    8b3c:	d5 84       	ldd	r13, Z+13	; 0x0d
    8b3e:	e6 84       	ldd	r14, Z+14	; 0x0e
    8b40:	f7 84       	ldd	r15, Z+15	; 0x0f
    8b42:	c6 0e       	add	r12, r22
    8b44:	d7 1e       	adc	r13, r23
    8b46:	e8 1e       	adc	r14, r24
    8b48:	f9 1e       	adc	r15, r25
    8b4a:	c4 86       	std	Z+12, r12	; 0x0c
    8b4c:	d5 86       	std	Z+13, r13	; 0x0d
    8b4e:	e6 86       	std	Z+14, r14	; 0x0e
    8b50:	f7 86       	std	Z+15, r15	; 0x0f
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    8b52:	ea 8d       	ldd	r30, Y+26	; 0x1a
    8b54:	fb 8d       	ldd	r31, Y+27	; 0x1b
    8b56:	81 91       	ld	r24, Z+
    8b58:	91 91       	ld	r25, Z+
    8b5a:	a1 91       	ld	r26, Z+
    8b5c:	b1 91       	ld	r27, Z+
    8b5e:	fb 8f       	std	Y+27, r31	; 0x1b
    8b60:	ea 8f       	std	Y+26, r30	; 0x1a
    8b62:	84 15       	cp	r24, r4
    8b64:	95 05       	cpc	r25, r5
    8b66:	a6 05       	cpc	r26, r6
    8b68:	b7 05       	cpc	r27, r7
    8b6a:	2c f4       	brge	.+10     	; 0x8b76 <Sensor_PID+0x2a8>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    8b6c:	f8 01       	movw	r30, r16
    8b6e:	80 83       	st	Z, r24
    8b70:	91 83       	std	Z+1, r25	; 0x01
    8b72:	a2 83       	std	Z+2, r26	; 0x02
    8b74:	b3 83       	std	Z+3, r27	; 0x03
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    8b76:	b0 95       	com	r27
    8b78:	a0 95       	com	r26
    8b7a:	90 95       	com	r25
    8b7c:	81 95       	neg	r24
    8b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    8b80:	af 4f       	sbci	r26, 0xFF	; 255
    8b82:	bf 4f       	sbci	r27, 0xFF	; 255
    8b84:	f8 01       	movw	r30, r16
    8b86:	40 81       	ld	r20, Z
    8b88:	51 81       	ldd	r21, Z+1	; 0x01
    8b8a:	62 81       	ldd	r22, Z+2	; 0x02
    8b8c:	73 81       	ldd	r23, Z+3	; 0x03
    8b8e:	48 17       	cp	r20, r24
    8b90:	59 07       	cpc	r21, r25
    8b92:	6a 07       	cpc	r22, r26
    8b94:	7b 07       	cpc	r23, r27
    8b96:	24 f4       	brge	.+8      	; 0x8ba0 <Sensor_PID+0x2d2>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    8b98:	80 83       	st	Z, r24
    8b9a:	91 83       	std	Z+1, r25	; 0x01
    8b9c:	a2 83       	std	Z+2, r26	; 0x02
    8b9e:	b3 83       	std	Z+3, r27	; 0x03
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    8ba0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    8ba2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    8ba4:	81 91       	ld	r24, Z+
    8ba6:	91 91       	ld	r25, Z+
    8ba8:	a1 91       	ld	r26, Z+
    8baa:	b1 91       	ld	r27, Z+
    8bac:	fd 8f       	std	Y+29, r31	; 0x1d
    8bae:	ec 8f       	std	Y+28, r30	; 0x1c
    8bb0:	f8 01       	movw	r30, r16
    8bb2:	44 85       	ldd	r20, Z+12	; 0x0c
    8bb4:	55 85       	ldd	r21, Z+13	; 0x0d
    8bb6:	66 85       	ldd	r22, Z+14	; 0x0e
    8bb8:	77 85       	ldd	r23, Z+15	; 0x0f
    8bba:	84 17       	cp	r24, r20
    8bbc:	95 07       	cpc	r25, r21
    8bbe:	a6 07       	cpc	r26, r22
    8bc0:	b7 07       	cpc	r27, r23
    8bc2:	24 f4       	brge	.+8      	; 0x8bcc <Sensor_PID+0x2fe>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    8bc4:	84 87       	std	Z+12, r24	; 0x0c
    8bc6:	95 87       	std	Z+13, r25	; 0x0d
    8bc8:	a6 87       	std	Z+14, r26	; 0x0e
    8bca:	b7 87       	std	Z+15, r27	; 0x0f
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    8bcc:	b0 95       	com	r27
    8bce:	a0 95       	com	r26
    8bd0:	90 95       	com	r25
    8bd2:	81 95       	neg	r24
    8bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    8bd6:	af 4f       	sbci	r26, 0xFF	; 255
    8bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    8bda:	f8 01       	movw	r30, r16
    8bdc:	44 85       	ldd	r20, Z+12	; 0x0c
    8bde:	55 85       	ldd	r21, Z+13	; 0x0d
    8be0:	66 85       	ldd	r22, Z+14	; 0x0e
    8be2:	77 85       	ldd	r23, Z+15	; 0x0f
    8be4:	48 17       	cp	r20, r24
    8be6:	59 07       	cpc	r21, r25
    8be8:	6a 07       	cpc	r22, r26
    8bea:	7b 07       	cpc	r23, r27
    8bec:	24 f4       	brge	.+8      	; 0x8bf6 <Sensor_PID+0x328>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    8bee:	84 87       	std	Z+12, r24	; 0x0c
    8bf0:	95 87       	std	Z+13, r25	; 0x0d
    8bf2:	a6 87       	std	Z+14, r26	; 0x0e
    8bf4:	b7 87       	std	Z+15, r27	; 0x0f
    8bf6:	fb 89       	ldd	r31, Y+19	; 0x13
    8bf8:	ff 5f       	subi	r31, 0xFF	; 255
    8bfa:	fb 8b       	std	Y+19, r31	; 0x13
    8bfc:	0c 5f       	subi	r16, 0xFC	; 252
    8bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    8c00:	24 e0       	ldi	r18, 0x04	; 4
    8c02:	22 0e       	add	r2, r18
    8c04:	31 1c       	adc	r3, r1
    8c06:	89 89       	ldd	r24, Y+17	; 0x11
    8c08:	9a 89       	ldd	r25, Y+18	; 0x12
    8c0a:	02 96       	adiw	r24, 0x02	; 2
    8c0c:	9a 8b       	std	Y+18, r25	; 0x12
    8c0e:	89 8b       	std	Y+17, r24	; 0x11
	{
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	for (axis = 0; axis <= YAW; axis ++)
    8c10:	f3 30       	cpi	r31, 0x03	; 3
    8c12:	09 f0       	breq	.+2      	; 0x8c16 <Sensor_PID+0x348>
    8c14:	c5 ce       	rjmp	.-630    	; 0x89a0 <Sensor_PID+0xd2>
			}
		}
	}
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    8c16:	40 91 16 05 	lds	r20, 0x0516
    8c1a:	50 91 17 05 	lds	r21, 0x0517
    8c1e:	66 27       	eor	r22, r22
    8c20:	57 fd       	sbrc	r21, 7
    8c22:	60 95       	com	r22
    8c24:	76 2f       	mov	r23, r22
    8c26:	80 91 38 05 	lds	r24, 0x0538
    8c2a:	90 91 39 05 	lds	r25, 0x0539
    8c2e:	a0 91 3a 05 	lds	r26, 0x053A
    8c32:	b0 91 3b 05 	lds	r27, 0x053B
    8c36:	84 0f       	add	r24, r20
    8c38:	95 1f       	adc	r25, r21
    8c3a:	a6 1f       	adc	r26, r22
    8c3c:	b7 1f       	adc	r27, r23
    8c3e:	80 93 38 05 	sts	0x0538, r24
    8c42:	90 93 39 05 	sts	0x0539, r25
    8c46:	a0 93 3a 05 	sts	0x053A, r26
    8c4a:	b0 93 3b 05 	sts	0x053B, r27
}
    8c4e:	a3 96       	adiw	r28, 0x23	; 35
    8c50:	0f b6       	in	r0, 0x3f	; 63
    8c52:	f8 94       	cli
    8c54:	de bf       	out	0x3e, r29	; 62
    8c56:	0f be       	out	0x3f, r0	; 63
    8c58:	cd bf       	out	0x3d, r28	; 61
    8c5a:	df 91       	pop	r29
    8c5c:	cf 91       	pop	r28
    8c5e:	1f 91       	pop	r17
    8c60:	0f 91       	pop	r16
    8c62:	ff 90       	pop	r15
    8c64:	ef 90       	pop	r14
    8c66:	df 90       	pop	r13
    8c68:	cf 90       	pop	r12
    8c6a:	bf 90       	pop	r11
    8c6c:	af 90       	pop	r10
    8c6e:	9f 90       	pop	r9
    8c70:	8f 90       	pop	r8
    8c72:	7f 90       	pop	r7
    8c74:	6f 90       	pop	r6
    8c76:	5f 90       	pop	r5
    8c78:	4f 90       	pop	r4
    8c7a:	3f 90       	pop	r3
    8c7c:	2f 90       	pop	r2
    8c7e:	08 95       	ret

00008c80 <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    8c80:	2f 92       	push	r2
    8c82:	3f 92       	push	r3
    8c84:	4f 92       	push	r4
    8c86:	5f 92       	push	r5
    8c88:	6f 92       	push	r6
    8c8a:	7f 92       	push	r7
    8c8c:	8f 92       	push	r8
    8c8e:	9f 92       	push	r9
    8c90:	af 92       	push	r10
    8c92:	bf 92       	push	r11
    8c94:	cf 92       	push	r12
    8c96:	df 92       	push	r13
    8c98:	ef 92       	push	r14
    8c9a:	ff 92       	push	r15
    8c9c:	0f 93       	push	r16
    8c9e:	1f 93       	push	r17
    8ca0:	cf 93       	push	r28
    8ca2:	df 93       	push	r29
    8ca4:	cd b7       	in	r28, 0x3d	; 61
    8ca6:	de b7       	in	r29, 0x3e	; 62
    8ca8:	ca 54       	subi	r28, 0x4A	; 74
    8caa:	d1 09       	sbc	r29, r1
    8cac:	0f b6       	in	r0, 0x3f	; 63
    8cae:	f8 94       	cli
    8cb0:	de bf       	out	0x3e, r29	; 62
    8cb2:	0f be       	out	0x3f, r0	; 63
    8cb4:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8cb6:	80 91 f3 05 	lds	r24, 0x05F3
    8cba:	8d 8b       	std	Y+21, r24	; 0x15
    8cbc:	80 91 f9 05 	lds	r24, 0x05F9
    8cc0:	8e 8b       	std	Y+22, r24	; 0x16
    8cc2:	80 91 ff 05 	lds	r24, 0x05FF
    8cc6:	8f 8b       	std	Y+23, r24	; 0x17
    8cc8:	80 91 05 06 	lds	r24, 0x0605
    8ccc:	88 8f       	std	Y+24, r24	; 0x18
    8cce:	80 91 0b 06 	lds	r24, 0x060B
    8cd2:	89 8f       	std	Y+25, r24	; 0x19
    8cd4:	80 91 11 06 	lds	r24, 0x0611
    8cd8:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8cda:	80 91 f4 05 	lds	r24, 0x05F4
    8cde:	8f 87       	std	Y+15, r24	; 0x0f
    8ce0:	80 91 fa 05 	lds	r24, 0x05FA
    8ce4:	88 8b       	std	Y+16, r24	; 0x10
    8ce6:	80 91 00 06 	lds	r24, 0x0600
    8cea:	89 8b       	std	Y+17, r24	; 0x11
    8cec:	80 91 06 06 	lds	r24, 0x0606
    8cf0:	8a 8b       	std	Y+18, r24	; 0x12
    8cf2:	80 91 0c 06 	lds	r24, 0x060C
    8cf6:	8b 8b       	std	Y+19, r24	; 0x13
    8cf8:	80 91 12 06 	lds	r24, 0x0612
    8cfc:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8cfe:	80 91 f7 05 	lds	r24, 0x05F7
    8d02:	89 87       	std	Y+9, r24	; 0x09
    8d04:	80 91 fd 05 	lds	r24, 0x05FD
    8d08:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    8d0a:	20 91 04 06 	lds	r18, 0x0604
    8d0e:	29 a7       	std	Y+41, r18	; 0x29
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8d10:	2b 87       	std	Y+11, r18	; 0x0b
    8d12:	80 91 09 06 	lds	r24, 0x0609
    8d16:	8c 87       	std	Y+12, r24	; 0x0c
    8d18:	80 91 0f 06 	lds	r24, 0x060F
    8d1c:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    8d1e:	30 91 16 06 	lds	r19, 0x0616
    8d22:	3a a7       	std	Y+42, r19	; 0x2a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8d24:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    8d26:	80 91 c0 07 	lds	r24, 0x07C0
    8d2a:	90 91 c1 07 	lds	r25, 0x07C1
    8d2e:	9a 83       	std	Y+2, r25	; 0x02
    8d30:	89 83       	std	Y+1, r24	; 0x01
    8d32:	80 91 c4 07 	lds	r24, 0x07C4
    8d36:	90 91 c5 07 	lds	r25, 0x07C5
    8d3a:	9c 83       	std	Y+4, r25	; 0x04
    8d3c:	8b 83       	std	Y+3, r24	; 0x03
    8d3e:	80 91 c2 07 	lds	r24, 0x07C2
    8d42:	90 91 c3 07 	lds	r25, 0x07C3
    8d46:	9e 83       	std	Y+6, r25	; 0x06
    8d48:	8d 83       	std	Y+5, r24	; 0x05
    8d4a:	80 91 c6 07 	lds	r24, 0x07C6
    8d4e:	90 91 c7 07 	lds	r25, 0x07C7
    8d52:	98 87       	std	Y+8, r25	; 0x08
    8d54:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    8d56:	20 91 18 05 	lds	r18, 0x0518
    8d5a:	30 e0       	ldi	r19, 0x00	; 0
    8d5c:	40 e0       	ldi	r20, 0x00	; 0
    8d5e:	50 e0       	ldi	r21, 0x00	; 0
    8d60:	60 91 38 05 	lds	r22, 0x0538
    8d64:	70 91 39 05 	lds	r23, 0x0539
    8d68:	80 91 3a 05 	lds	r24, 0x053A
    8d6c:	90 91 3b 05 	lds	r25, 0x053B
    8d70:	0e 94 48 4e 	call	0x9c90	; 0x9c90 <__divmodsi4>
    8d74:	29 96       	adiw	r28, 0x09	; 9
    8d76:	2c af       	std	Y+60, r18	; 0x3c
    8d78:	3d af       	std	Y+61, r19	; 0x3d
    8d7a:	4e af       	std	Y+62, r20	; 0x3e
    8d7c:	5f af       	std	Y+63, r21	; 0x3f
    8d7e:	29 97       	sbiw	r28, 0x09	; 9
	PID_AvgAccVert = 0;							// Reset average
    8d80:	10 92 38 05 	sts	0x0538, r1
    8d84:	10 92 39 05 	sts	0x0539, r1
    8d88:	10 92 3a 05 	sts	0x053A, r1
    8d8c:	10 92 3b 05 	sts	0x053B, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    8d90:	80 91 03 06 	lds	r24, 0x0603
    8d94:	40 e4       	ldi	r20, 0x40	; 64
    8d96:	84 02       	muls	r24, r20
    8d98:	c0 01       	movw	r24, r0
    8d9a:	11 24       	eor	r1, r1
    8d9c:	9c 01       	movw	r18, r24
    8d9e:	44 27       	eor	r20, r20
    8da0:	37 fd       	sbrc	r19, 7
    8da2:	40 95       	com	r20
    8da4:	54 2f       	mov	r21, r20
    8da6:	29 af       	std	Y+57, r18	; 0x39
    8da8:	3a af       	std	Y+58, r19	; 0x3a
    8daa:	4b af       	std	Y+59, r20	; 0x3b
    8dac:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8dae:	80 91 15 06 	lds	r24, 0x0615
    8db2:	30 e4       	ldi	r19, 0x40	; 64
    8db4:	83 02       	muls	r24, r19
    8db6:	c0 01       	movw	r24, r0
    8db8:	11 24       	eor	r1, r1
    8dba:	9c 01       	movw	r18, r24
    8dbc:	44 27       	eor	r20, r20
    8dbe:	37 fd       	sbrc	r19, 7
    8dc0:	40 95       	com	r20
    8dc2:	54 2f       	mov	r21, r20
    8dc4:	21 96       	adiw	r28, 0x01	; 1
    8dc6:	2c af       	std	Y+60, r18	; 0x3c
    8dc8:	3d af       	std	Y+61, r19	; 0x3d
    8dca:	4e af       	std	Y+62, r20	; 0x3e
    8dcc:	5f af       	std	Y+63, r21	; 0x3f
    8dce:	21 97       	sbiw	r28, 0x01	; 1
    8dd0:	e3 e8       	ldi	r30, 0x83	; 131
    8dd2:	f5 e0       	ldi	r31, 0x05	; 5
    8dd4:	f8 af       	std	Y+56, r31	; 0x38
    8dd6:	ef ab       	std	Y+55, r30	; 0x37
    8dd8:	fe 01       	movw	r30, r28
    8dda:	75 96       	adiw	r30, 0x15	; 21
    8ddc:	fe ab       	std	Y+54, r31	; 0x36
    8dde:	ed ab       	std	Y+53, r30	; 0x35
    8de0:	e3 e1       	ldi	r30, 0x13	; 19
    8de2:	f8 e0       	ldi	r31, 0x08	; 8
    8de4:	fe a3       	std	Y+38, r31	; 0x26
    8de6:	ed a3       	std	Y+37, r30	; 0x25
    8de8:	fe 01       	movw	r30, r28
    8dea:	3f 96       	adiw	r30, 0x0f	; 15
    8dec:	fc ab       	std	Y+52, r31	; 0x34
    8dee:	eb ab       	std	Y+51, r30	; 0x33
    8df0:	39 96       	adiw	r30, 0x09	; 9
    8df2:	fa ab       	std	Y+50, r31	; 0x32
    8df4:	e9 ab       	std	Y+49, r30	; 0x31
    8df6:	36 97       	sbiw	r30, 0x06	; 6
    8df8:	f8 ab       	std	Y+48, r31	; 0x30
    8dfa:	ef a7       	std	Y+47, r30	; 0x2f
    8dfc:	e7 e1       	ldi	r30, 0x17	; 23
    8dfe:	f6 e0       	ldi	r31, 0x06	; 6
    8e00:	fe a7       	std	Y+46, r31	; 0x2e
    8e02:	ed a7       	std	Y+45, r30	; 0x2d
    8e04:	e7 e3       	ldi	r30, 0x37	; 55
    8e06:	f8 e0       	ldi	r31, 0x08	; 8
    8e08:	fc a3       	std	Y+36, r31	; 0x24
    8e0a:	eb a3       	std	Y+35, r30	; 0x23
    8e0c:	e1 ea       	ldi	r30, 0xA1	; 161
    8e0e:	f5 e0       	ldi	r31, 0x05	; 5
    8e10:	f8 a7       	std	Y+40, r31	; 0x28
    8e12:	ef a3       	std	Y+39, r30	; 0x27
    8e14:	fe 01       	movw	r30, r28
    8e16:	31 96       	adiw	r30, 0x01	; 1
    8e18:	fa a3       	std	Y+34, r31	; 0x22
    8e1a:	e9 a3       	std	Y+33, r30	; 0x21
    8e1c:	e3 e4       	ldi	r30, 0x43	; 67
    8e1e:	f8 e0       	ldi	r31, 0x08	; 8
    8e20:	f8 a3       	std	Y+32, r31	; 0x20
    8e22:	ef 8f       	std	Y+31, r30	; 0x1f
    8e24:	1e 01       	movw	r2, r28
    8e26:	fc e0       	ldi	r31, 0x0C	; 12
    8e28:	2f 0e       	add	r2, r31
    8e2a:	31 1c       	adc	r3, r1
    8e2c:	e3 e2       	ldi	r30, 0x23	; 35
    8e2e:	f6 e0       	ldi	r31, 0x06	; 6
    8e30:	fc a7       	std	Y+44, r31	; 0x2c
    8e32:	eb a7       	std	Y+43, r30	; 0x2b
    8e34:	2b 96       	adiw	r28, 0x0b	; 11
    8e36:	1f ae       	std	Y+63, r1	; 0x3f
    8e38:	1e ae       	std	Y+62, r1	; 0x3e
    8e3a:	2b 97       	sbiw	r28, 0x0b	; 11
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    8e3c:	81 2c       	mov	r8, r1
    8e3e:	91 2c       	mov	r9, r1
    8e40:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    8e42:	80 e0       	ldi	r24, 0x00	; 0
    8e44:	90 e0       	ldi	r25, 0x00	; 0
    8e46:	dc 01       	movw	r26, r24
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    8e48:	ef a9       	ldd	r30, Y+55	; 0x37
    8e4a:	f8 ad       	ldd	r31, Y+56	; 0x38
    8e4c:	01 91       	ld	r16, Z+
    8e4e:	11 91       	ld	r17, Z+
    8e50:	f8 af       	std	Y+56, r31	; 0x38
    8e52:	ef ab       	std	Y+55, r30	; 0x37
    8e54:	ed a9       	ldd	r30, Y+53	; 0x35
    8e56:	fe a9       	ldd	r31, Y+54	; 0x36
    8e58:	41 91       	ld	r20, Z+
    8e5a:	fe ab       	std	Y+54, r31	; 0x36
    8e5c:	ed ab       	std	Y+53, r30	; 0x35
    8e5e:	40 03       	mulsu	r20, r16
    8e60:	90 01       	movw	r18, r0
    8e62:	41 9f       	mul	r20, r17
    8e64:	30 0d       	add	r19, r0
    8e66:	11 24       	eor	r1, r1
    8e68:	44 27       	eor	r20, r20
    8e6a:	37 fd       	sbrc	r19, 7
    8e6c:	40 95       	com	r20
    8e6e:	54 2f       	mov	r21, r20
    8e70:	28 0f       	add	r18, r24
    8e72:	39 1f       	adc	r19, r25
    8e74:	4a 1f       	adc	r20, r26
    8e76:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    8e78:	a3 e0       	ldi	r26, 0x03	; 3
    8e7a:	b0 e0       	ldi	r27, 0x00	; 0
    8e7c:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <__muluhisi3>
    8e80:	25 96       	adiw	r28, 0x05	; 5
    8e82:	6c af       	std	Y+60, r22	; 0x3c
    8e84:	7d af       	std	Y+61, r23	; 0x3d
    8e86:	8e af       	std	Y+62, r24	; 0x3e
    8e88:	9f af       	std	Y+63, r25	; 0x3f
    8e8a:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    8e8c:	eb a9       	ldd	r30, Y+51	; 0x33
    8e8e:	fc a9       	ldd	r31, Y+52	; 0x34
    8e90:	a1 91       	ld	r26, Z+
    8e92:	fc ab       	std	Y+52, r31	; 0x34
    8e94:	eb ab       	std	Y+51, r30	; 0x33
    8e96:	ed a1       	ldd	r30, Y+37	; 0x25
    8e98:	fe a1       	ldd	r31, Y+38	; 0x26
    8e9a:	20 81       	ld	r18, Z
    8e9c:	31 81       	ldd	r19, Z+1	; 0x01
    8e9e:	42 81       	ldd	r20, Z+2	; 0x02
    8ea0:	53 81       	ldd	r21, Z+3	; 0x03
    8ea2:	bb 27       	eor	r27, r27
    8ea4:	a7 fd       	sbrc	r26, 7
    8ea6:	b0 95       	com	r27
    8ea8:	0e 94 96 4e 	call	0x9d2c	; 0x9d2c <__mulshisi3>
    8eac:	2b 01       	movw	r4, r22
    8eae:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    8eb0:	85 e0       	ldi	r24, 0x05	; 5
    8eb2:	75 94       	asr	r7
    8eb4:	67 94       	ror	r6
    8eb6:	57 94       	ror	r5
    8eb8:	47 94       	ror	r4
    8eba:	8a 95       	dec	r24
    8ebc:	d1 f7       	brne	.-12     	; 0x8eb2 <Calculate_PID+0x232>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    8ebe:	e9 a9       	ldd	r30, Y+49	; 0x31
    8ec0:	fa a9       	ldd	r31, Y+50	; 0x32
    8ec2:	41 91       	ld	r20, Z+
    8ec4:	fa ab       	std	Y+50, r31	; 0x32
    8ec6:	e9 ab       	std	Y+49, r30	; 0x31
    8ec8:	40 03       	mulsu	r20, r16
    8eca:	90 01       	movw	r18, r0
    8ecc:	41 9f       	mul	r20, r17
    8ece:	30 0d       	add	r19, r0
    8ed0:	11 24       	eor	r1, r1
    8ed2:	44 27       	eor	r20, r20
    8ed4:	37 fd       	sbrc	r19, 7
    8ed6:	40 95       	com	r20
    8ed8:	54 2f       	mov	r21, r20
    8eda:	28 0d       	add	r18, r8
    8edc:	39 1d       	adc	r19, r9
    8ede:	4a 1d       	adc	r20, r10
    8ee0:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    8ee2:	a3 e0       	ldi	r26, 0x03	; 3
    8ee4:	b0 e0       	ldi	r27, 0x00	; 0
    8ee6:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <__muluhisi3>
    8eea:	4b 01       	movw	r8, r22
    8eec:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    8eee:	ef a5       	ldd	r30, Y+47	; 0x2f
    8ef0:	f8 a9       	ldd	r31, Y+48	; 0x30
    8ef2:	a1 91       	ld	r26, Z+
    8ef4:	f8 ab       	std	Y+48, r31	; 0x30
    8ef6:	ef a7       	std	Y+47, r30	; 0x2f
    8ef8:	ed a1       	ldd	r30, Y+37	; 0x25
    8efa:	fe a1       	ldd	r31, Y+38	; 0x26
    8efc:	24 85       	ldd	r18, Z+12	; 0x0c
    8efe:	35 85       	ldd	r19, Z+13	; 0x0d
    8f00:	46 85       	ldd	r20, Z+14	; 0x0e
    8f02:	57 85       	ldd	r21, Z+15	; 0x0f
    8f04:	bb 27       	eor	r27, r27
    8f06:	a7 fd       	sbrc	r26, 7
    8f08:	b0 95       	com	r27
    8f0a:	0e 94 96 4e 	call	0x9d2c	; 0x9d2c <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    8f0e:	25 e0       	ldi	r18, 0x05	; 5
    8f10:	95 95       	asr	r25
    8f12:	87 95       	ror	r24
    8f14:	77 95       	ror	r23
    8f16:	67 95       	ror	r22
    8f18:	2a 95       	dec	r18
    8f1a:	d1 f7       	brne	.-12     	; 0x8f10 <Calculate_PID+0x290>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    8f1c:	ed a5       	ldd	r30, Y+45	; 0x2d
    8f1e:	fe a5       	ldd	r31, Y+46	; 0x2e
    8f20:	c1 90       	ld	r12, Z+
    8f22:	d1 90       	ld	r13, Z+
    8f24:	e1 90       	ld	r14, Z+
    8f26:	f1 90       	ld	r15, Z+
    8f28:	fe a7       	std	Y+46, r31	; 0x2e
    8f2a:	ed a7       	std	Y+45, r30	; 0x2d
    8f2c:	c4 14       	cp	r12, r4
    8f2e:	d5 04       	cpc	r13, r5
    8f30:	e6 04       	cpc	r14, r6
    8f32:	f7 04       	cpc	r15, r7
    8f34:	84 f0       	brlt	.+32     	; 0x8f56 <Calculate_PID+0x2d6>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    8f36:	00 27       	eor	r16, r16
    8f38:	11 27       	eor	r17, r17
    8f3a:	98 01       	movw	r18, r16
    8f3c:	0c 19       	sub	r16, r12
    8f3e:	1d 09       	sbc	r17, r13
    8f40:	2e 09       	sbc	r18, r14
    8f42:	3f 09       	sbc	r19, r15
    8f44:	73 01       	movw	r14, r6
    8f46:	62 01       	movw	r12, r4
    8f48:	40 16       	cp	r4, r16
    8f4a:	51 06       	cpc	r5, r17
    8f4c:	62 06       	cpc	r6, r18
    8f4e:	73 06       	cpc	r7, r19
    8f50:	14 f4       	brge	.+4      	; 0x8f56 <Calculate_PID+0x2d6>
    8f52:	68 01       	movw	r12, r16
    8f54:	79 01       	movw	r14, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    8f56:	eb a5       	ldd	r30, Y+43	; 0x2b
    8f58:	fc a5       	ldd	r31, Y+44	; 0x2c
    8f5a:	21 91       	ld	r18, Z+
    8f5c:	31 91       	ld	r19, Z+
    8f5e:	41 91       	ld	r20, Z+
    8f60:	51 91       	ld	r21, Z+
    8f62:	fc a7       	std	Y+44, r31	; 0x2c
    8f64:	eb a7       	std	Y+43, r30	; 0x2b
    8f66:	2b 8f       	std	Y+27, r18	; 0x1b
    8f68:	3c 8f       	std	Y+28, r19	; 0x1c
    8f6a:	4d 8f       	std	Y+29, r20	; 0x1d
    8f6c:	5e 8f       	std	Y+30, r21	; 0x1e
    8f6e:	26 17       	cp	r18, r22
    8f70:	37 07       	cpc	r19, r23
    8f72:	48 07       	cpc	r20, r24
    8f74:	59 07       	cpc	r21, r25
    8f76:	b4 f0       	brlt	.+44     	; 0x8fa4 <Calculate_PID+0x324>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    8f78:	89 01       	movw	r16, r18
    8f7a:	9a 01       	movw	r18, r20
    8f7c:	30 95       	com	r19
    8f7e:	20 95       	com	r18
    8f80:	10 95       	com	r17
    8f82:	01 95       	neg	r16
    8f84:	1f 4f       	sbci	r17, 0xFF	; 255
    8f86:	2f 4f       	sbci	r18, 0xFF	; 255
    8f88:	3f 4f       	sbci	r19, 0xFF	; 255
    8f8a:	6b 8f       	std	Y+27, r22	; 0x1b
    8f8c:	7c 8f       	std	Y+28, r23	; 0x1c
    8f8e:	8d 8f       	std	Y+29, r24	; 0x1d
    8f90:	9e 8f       	std	Y+30, r25	; 0x1e
    8f92:	60 17       	cp	r22, r16
    8f94:	71 07       	cpc	r23, r17
    8f96:	82 07       	cpc	r24, r18
    8f98:	93 07       	cpc	r25, r19
    8f9a:	24 f4       	brge	.+8      	; 0x8fa4 <Calculate_PID+0x324>
    8f9c:	0b 8f       	std	Y+27, r16	; 0x1b
    8f9e:	1c 8f       	std	Y+28, r17	; 0x1c
    8fa0:	2d 8f       	std	Y+29, r18	; 0x1d
    8fa2:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE);
    8fa4:	25 96       	adiw	r28, 0x05	; 5
    8fa6:	4c ac       	ldd	r4, Y+60	; 0x3c
    8fa8:	5d ac       	ldd	r5, Y+61	; 0x3d
    8faa:	6e ac       	ldd	r6, Y+62	; 0x3e
    8fac:	7f ac       	ldd	r7, Y+63	; 0x3f
    8fae:	25 97       	sbiw	r28, 0x05	; 5
    8fb0:	4c 0c       	add	r4, r12
    8fb2:	5d 1c       	adc	r5, r13
    8fb4:	6e 1c       	adc	r6, r14
    8fb6:	7f 1c       	adc	r7, r15
    8fb8:	16 e0       	ldi	r17, 0x06	; 6
    8fba:	75 94       	asr	r7
    8fbc:	67 94       	ror	r6
    8fbe:	57 94       	ror	r5
    8fc0:	47 94       	ror	r4
    8fc2:	1a 95       	dec	r17
    8fc4:	d1 f7       	brne	.-12     	; 0x8fba <Calculate_PID+0x33a>
    8fc6:	eb a1       	ldd	r30, Y+35	; 0x23
    8fc8:	fc a1       	ldd	r31, Y+36	; 0x24
    8fca:	51 82       	std	Z+1, r5	; 0x01
    8fcc:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    8fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8fd2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8fd4:	be 8d       	ldd	r27, Y+30	; 0x1e
    8fd6:	88 0d       	add	r24, r8
    8fd8:	99 1d       	adc	r25, r9
    8fda:	aa 1d       	adc	r26, r10
    8fdc:	bb 1d       	adc	r27, r11
    8fde:	06 e0       	ldi	r16, 0x06	; 6
    8fe0:	b5 95       	asr	r27
    8fe2:	a7 95       	ror	r26
    8fe4:	97 95       	ror	r25
    8fe6:	87 95       	ror	r24
    8fe8:	0a 95       	dec	r16
    8fea:	d1 f7       	brne	.-12     	; 0x8fe0 <Calculate_PID+0x360>
    8fec:	97 83       	std	Z+7, r25	; 0x07
    8fee:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    8ff0:	2a 96       	adiw	r28, 0x0a	; 10
    8ff2:	ff ad       	ldd	r31, Y+63	; 0x3f
    8ff4:	2a 97       	sbiw	r28, 0x0a	; 10
    8ff6:	f2 30       	cpi	r31, 0x02	; 2
    8ff8:	e9 f1       	breq	.+122    	; 0x9074 <Calculate_PID+0x3f4>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    8ffa:	ef a1       	ldd	r30, Y+39	; 0x27
    8ffc:	f8 a5       	ldd	r31, Y+40	; 0x28
    8ffe:	40 81       	ld	r20, Z
    9000:	51 81       	ldd	r21, Z+1	; 0x01
    9002:	e9 a1       	ldd	r30, Y+33	; 0x21
    9004:	fa a1       	ldd	r31, Y+34	; 0x22
    9006:	80 81       	ld	r24, Z
    9008:	91 81       	ldd	r25, Z+1	; 0x01
    900a:	9a 01       	movw	r18, r20
    900c:	28 1b       	sub	r18, r24
    900e:	39 0b       	sbc	r19, r25
    9010:	a9 e0       	ldi	r26, 0x09	; 9
    9012:	b0 e0       	ldi	r27, 0x00	; 0
    9014:	ac 0f       	add	r26, r28
    9016:	bd 1f       	adc	r27, r29
    9018:	2b 96       	adiw	r28, 0x0b	; 11
    901a:	ee ad       	ldd	r30, Y+62	; 0x3e
    901c:	ff ad       	ldd	r31, Y+63	; 0x3f
    901e:	2b 97       	sbiw	r28, 0x0b	; 11
    9020:	ae 0f       	add	r26, r30
    9022:	bf 1f       	adc	r27, r31
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    9024:	ac 91       	ld	r26, X
    9026:	bb 27       	eor	r27, r27
    9028:	a7 fd       	sbrc	r26, 7
    902a:	b0 95       	com	r27
    902c:	0e 94 6d 4e 	call	0x9cda	; 0x9cda <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    9030:	bb 27       	eor	r27, r27
    9032:	97 fd       	sbrc	r25, 7
    9034:	ba 95       	dec	r27
    9036:	a9 2f       	mov	r26, r25
    9038:	98 2f       	mov	r25, r24
    903a:	87 2f       	mov	r24, r23
    903c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    903e:	f8 a1       	ldd	r31, Y+32	; 0x20
    9040:	91 83       	std	Z+1, r25	; 0x01
    9042:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    9044:	e9 a1       	ldd	r30, Y+33	; 0x21
    9046:	fa a1       	ldd	r31, Y+34	; 0x22
    9048:	84 81       	ldd	r24, Z+4	; 0x04
    904a:	95 81       	ldd	r25, Z+5	; 0x05
    904c:	9a 01       	movw	r18, r20
    904e:	28 1b       	sub	r18, r24
    9050:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    9052:	f1 01       	movw	r30, r2
    9054:	a0 81       	ld	r26, Z
    9056:	bb 27       	eor	r27, r27
    9058:	a7 fd       	sbrc	r26, 7
    905a:	b0 95       	com	r27
    905c:	0e 94 6d 4e 	call	0x9cda	; 0x9cda <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    9060:	bb 27       	eor	r27, r27
    9062:	97 fd       	sbrc	r25, 7
    9064:	ba 95       	dec	r27
    9066:	a9 2f       	mov	r26, r25
    9068:	98 2f       	mov	r25, r24
    906a:	87 2f       	mov	r24, r23
    906c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    906e:	f8 a1       	ldd	r31, Y+32	; 0x20
    9070:	97 83       	std	Z+7, r25	; 0x07
    9072:	86 83       	std	Z+6, r24	; 0x06
	PID_AvgAccVert = 0;							// Reset average

	//************************************************************
	// PID loop
	//************************************************************
	for (axis = 0; axis <= YAW; axis ++)
    9074:	2b 96       	adiw	r28, 0x0b	; 11
    9076:	ee ad       	ldd	r30, Y+62	; 0x3e
    9078:	ff ad       	ldd	r31, Y+63	; 0x3f
    907a:	2b 97       	sbiw	r28, 0x0b	; 11
    907c:	32 97       	sbiw	r30, 0x02	; 2
    907e:	e1 f1       	breq	.+120    	; 0x90f8 <Calculate_PID+0x478>
	{
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    9080:	2a 96       	adiw	r28, 0x0a	; 10
    9082:	ff ad       	ldd	r31, Y+63	; 0x3f
    9084:	2a 97       	sbiw	r28, 0x0a	; 10
    9086:	f1 30       	cpi	r31, 0x01	; 1
    9088:	39 f0       	breq	.+14     	; 0x9098 <Calculate_PID+0x418>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    908a:	81 2c       	mov	r8, r1
    908c:	91 2c       	mov	r9, r1
    908e:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    9090:	80 e0       	ldi	r24, 0x00	; 0
    9092:	90 e0       	ldi	r25, 0x00	; 0
    9094:	dc 01       	movw	r26, r24
    9096:	0a c0       	rjmp	.+20     	; 0x90ac <Calculate_PID+0x42c>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    9098:	21 96       	adiw	r28, 0x01	; 1
    909a:	8c ac       	ldd	r8, Y+60	; 0x3c
    909c:	9d ac       	ldd	r9, Y+61	; 0x3d
    909e:	ae ac       	ldd	r10, Y+62	; 0x3e
    90a0:	bf ac       	ldd	r11, Y+63	; 0x3f
    90a2:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    90a4:	89 ad       	ldd	r24, Y+57	; 0x39
    90a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    90a8:	ab ad       	ldd	r26, Y+59	; 0x3b
    90aa:	bc ad       	ldd	r27, Y+60	; 0x3c
    90ac:	2b 96       	adiw	r28, 0x0b	; 11
    90ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    90b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    90b2:	2b 97       	sbiw	r28, 0x0b	; 11
    90b4:	31 96       	adiw	r30, 0x01	; 1
    90b6:	2b 96       	adiw	r28, 0x0b	; 11
    90b8:	ff af       	std	Y+63, r31	; 0x3f
    90ba:	ee af       	std	Y+62, r30	; 0x3e
    90bc:	2b 97       	sbiw	r28, 0x0b	; 11
    90be:	ed a1       	ldd	r30, Y+37	; 0x25
    90c0:	fe a1       	ldd	r31, Y+38	; 0x26
    90c2:	34 96       	adiw	r30, 0x04	; 4
    90c4:	fe a3       	std	Y+38, r31	; 0x26
    90c6:	ed a3       	std	Y+37, r30	; 0x25
    90c8:	eb a1       	ldd	r30, Y+35	; 0x23
    90ca:	fc a1       	ldd	r31, Y+36	; 0x24
    90cc:	32 96       	adiw	r30, 0x02	; 2
    90ce:	fc a3       	std	Y+36, r31	; 0x24
    90d0:	eb a3       	std	Y+35, r30	; 0x23
    90d2:	ef a1       	ldd	r30, Y+39	; 0x27
    90d4:	f8 a5       	ldd	r31, Y+40	; 0x28
    90d6:	32 96       	adiw	r30, 0x02	; 2
    90d8:	f8 a7       	std	Y+40, r31	; 0x28
    90da:	ef a3       	std	Y+39, r30	; 0x27
    90dc:	e9 a1       	ldd	r30, Y+33	; 0x21
    90de:	fa a1       	ldd	r31, Y+34	; 0x22
    90e0:	32 96       	adiw	r30, 0x02	; 2
    90e2:	fa a3       	std	Y+34, r31	; 0x22
    90e4:	e9 a3       	std	Y+33, r30	; 0x21
    90e6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    90e8:	f8 a1       	ldd	r31, Y+32	; 0x20
    90ea:	32 96       	adiw	r30, 0x02	; 2
    90ec:	f8 a3       	std	Y+32, r31	; 0x20
    90ee:	ef 8f       	std	Y+31, r30	; 0x1f
    90f0:	ff ef       	ldi	r31, 0xFF	; 255
    90f2:	2f 1a       	sub	r2, r31
    90f4:	3f 0a       	sbc	r3, r31
    90f6:	a8 ce       	rjmp	.-688    	; 0x8e48 <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    90f8:	27 96       	adiw	r28, 0x07	; 7
    90fa:	ce ac       	ldd	r12, Y+62	; 0x3e
    90fc:	df ac       	ldd	r13, Y+63	; 0x3f
    90fe:	27 97       	sbiw	r28, 0x07	; 7
    9100:	d1 94       	neg	r13
    9102:	c1 94       	neg	r12
    9104:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    9106:	96 01       	movw	r18, r12
    9108:	f9 a5       	ldd	r31, Y+41	; 0x29
    910a:	af 2f       	mov	r26, r31
    910c:	bb 27       	eor	r27, r27
    910e:	a7 fd       	sbrc	r26, 7
    9110:	b0 95       	com	r27
    9112:	0e 94 6d 4e 	call	0x9cda	; 0x9cda <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    9116:	f4 e0       	ldi	r31, 0x04	; 4
    9118:	95 95       	asr	r25
    911a:	87 95       	ror	r24
    911c:	77 95       	ror	r23
    911e:	67 95       	ror	r22
    9120:	fa 95       	dec	r31
    9122:	d1 f7       	brne	.-12     	; 0x9118 <Calculate_PID+0x498>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    9124:	65 3f       	cpi	r22, 0xF5	; 245
    9126:	21 e0       	ldi	r18, 0x01	; 1
    9128:	72 07       	cpc	r23, r18
    912a:	81 05       	cpc	r24, r1
    912c:	91 05       	cpc	r25, r1
    912e:	64 f4       	brge	.+24     	; 0x9148 <Calculate_PID+0x4c8>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    9130:	6c 30       	cpi	r22, 0x0C	; 12
    9132:	3e ef       	ldi	r19, 0xFE	; 254
    9134:	73 07       	cpc	r23, r19
    9136:	3f ef       	ldi	r19, 0xFF	; 255
    9138:	83 07       	cpc	r24, r19
    913a:	93 07       	cpc	r25, r19
    913c:	4c f4       	brge	.+18     	; 0x9150 <Calculate_PID+0x4d0>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    913e:	6c e0       	ldi	r22, 0x0C	; 12
    9140:	7e ef       	ldi	r23, 0xFE	; 254
    9142:	8f ef       	ldi	r24, 0xFF	; 255
    9144:	9f ef       	ldi	r25, 0xFF	; 255
    9146:	04 c0       	rjmp	.+8      	; 0x9150 <Calculate_PID+0x4d0>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    9148:	64 ef       	ldi	r22, 0xF4	; 244
    914a:	71 e0       	ldi	r23, 0x01	; 1
    914c:	80 e0       	ldi	r24, 0x00	; 0
    914e:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    9150:	70 93 48 08 	sts	0x0848, r23
    9154:	60 93 47 08 	sts	0x0847, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    9158:	96 01       	movw	r18, r12
    915a:	4a a5       	ldd	r20, Y+42	; 0x2a
    915c:	a4 2f       	mov	r26, r20
    915e:	bb 27       	eor	r27, r27
    9160:	a7 fd       	sbrc	r26, 7
    9162:	b0 95       	com	r27
    9164:	0e 94 6d 4e 	call	0x9cda	; 0x9cda <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    9168:	e4 e0       	ldi	r30, 0x04	; 4
    916a:	95 95       	asr	r25
    916c:	87 95       	ror	r24
    916e:	77 95       	ror	r23
    9170:	67 95       	ror	r22
    9172:	ea 95       	dec	r30
    9174:	d1 f7       	brne	.-12     	; 0x916a <Calculate_PID+0x4ea>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    9176:	65 3f       	cpi	r22, 0xF5	; 245
    9178:	51 e0       	ldi	r21, 0x01	; 1
    917a:	75 07       	cpc	r23, r21
    917c:	81 05       	cpc	r24, r1
    917e:	91 05       	cpc	r25, r1
    9180:	64 f4       	brge	.+24     	; 0x919a <Calculate_PID+0x51a>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    9182:	6c 30       	cpi	r22, 0x0C	; 12
    9184:	ae ef       	ldi	r26, 0xFE	; 254
    9186:	7a 07       	cpc	r23, r26
    9188:	af ef       	ldi	r26, 0xFF	; 255
    918a:	8a 07       	cpc	r24, r26
    918c:	9a 07       	cpc	r25, r26
    918e:	4c f4       	brge	.+18     	; 0x91a2 <Calculate_PID+0x522>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    9190:	6c e0       	ldi	r22, 0x0C	; 12
    9192:	7e ef       	ldi	r23, 0xFE	; 254
    9194:	8f ef       	ldi	r24, 0xFF	; 255
    9196:	9f ef       	ldi	r25, 0xFF	; 255
    9198:	04 c0       	rjmp	.+8      	; 0x91a2 <Calculate_PID+0x522>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    919a:	64 ef       	ldi	r22, 0xF4	; 244
    919c:	71 e0       	ldi	r23, 0x01	; 1
    919e:	80 e0       	ldi	r24, 0x00	; 0
    91a0:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    91a2:	70 93 4e 08 	sts	0x084E, r23
    91a6:	60 93 4d 08 	sts	0x084D, r22
	}
}
    91aa:	c6 5b       	subi	r28, 0xB6	; 182
    91ac:	df 4f       	sbci	r29, 0xFF	; 255
    91ae:	0f b6       	in	r0, 0x3f	; 63
    91b0:	f8 94       	cli
    91b2:	de bf       	out	0x3e, r29	; 62
    91b4:	0f be       	out	0x3f, r0	; 63
    91b6:	cd bf       	out	0x3d, r28	; 61
    91b8:	df 91       	pop	r29
    91ba:	cf 91       	pop	r28
    91bc:	1f 91       	pop	r17
    91be:	0f 91       	pop	r16
    91c0:	ff 90       	pop	r15
    91c2:	ef 90       	pop	r14
    91c4:	df 90       	pop	r13
    91c6:	cf 90       	pop	r12
    91c8:	bf 90       	pop	r11
    91ca:	af 90       	pop	r10
    91cc:	9f 90       	pop	r9
    91ce:	8f 90       	pop	r8
    91d0:	7f 90       	pop	r7
    91d2:	6f 90       	pop	r6
    91d4:	5f 90       	pop	r5
    91d6:	4f 90       	pop	r4
    91d8:	3f 90       	pop	r3
    91da:	2f 90       	pop	r2
    91dc:	08 95       	ret

000091de <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    91de:	eb e9       	ldi	r30, 0x9B	; 155
    91e0:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    91e2:	80 e0       	ldi	r24, 0x00	; 0
    91e4:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    91e6:	ac 01       	movw	r20, r24
    91e8:	44 0f       	add	r20, r20
    91ea:	55 1f       	adc	r21, r21
    91ec:	da 01       	movw	r26, r20
    91ee:	a0 52       	subi	r26, 0x20	; 32
    91f0:	b8 4f       	sbci	r27, 0xF8	; 248
    91f2:	2d 91       	ld	r18, X+
    91f4:	3c 91       	ld	r19, X
    91f6:	61 91       	ld	r22, Z+
    91f8:	71 91       	ld	r23, Z+
    91fa:	26 1b       	sub	r18, r22
    91fc:	37 0b       	sbc	r19, r23
    91fe:	da 01       	movw	r26, r20
    9200:	af 5a       	subi	r26, 0xAF	; 175
    9202:	b7 4f       	sbci	r27, 0xF7	; 247
    9204:	11 96       	adiw	r26, 0x01	; 1
    9206:	3c 93       	st	X, r19
    9208:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    920a:	01 96       	adiw	r24, 0x01	; 1
    920c:	88 30       	cpi	r24, 0x08	; 8
    920e:	91 05       	cpc	r25, r1
    9210:	51 f7       	brne	.-44     	; 0x91e6 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    9212:	80 91 e0 07 	lds	r24, 0x07E0
    9216:	90 91 e1 07 	lds	r25, 0x07E1
    921a:	20 91 9b 07 	lds	r18, 0x079B
    921e:	30 91 9c 07 	lds	r19, 0x079C
    9222:	82 1b       	sub	r24, r18
    9224:	93 0b       	sbc	r25, r19
    9226:	90 93 50 08 	sts	0x0850, r25
    922a:	80 93 4f 08 	sts	0x084F, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    922e:	80 91 e0 07 	lds	r24, 0x07E0
    9232:	90 91 e1 07 	lds	r25, 0x07E1
    9236:	86 5a       	subi	r24, 0xA6	; 166
    9238:	9e 40       	sbci	r25, 0x0E	; 14
    923a:	90 93 52 08 	sts	0x0852, r25
    923e:	80 93 51 08 	sts	0x0851, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    9242:	80 91 f1 05 	lds	r24, 0x05F1
    9246:	81 30       	cpi	r24, 0x01	; 1
    9248:	59 f4       	brne	.+22     	; 0x9260 <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    924a:	80 91 53 08 	lds	r24, 0x0853
    924e:	90 91 54 08 	lds	r25, 0x0854
    9252:	91 95       	neg	r25
    9254:	81 95       	neg	r24
    9256:	91 09       	sbc	r25, r1
    9258:	90 93 54 08 	sts	0x0854, r25
    925c:	80 93 53 08 	sts	0x0853, r24
	}

	if (Config.ElevatorPol == REVERSED)
    9260:	80 91 f2 05 	lds	r24, 0x05F2
    9264:	81 30       	cpi	r24, 0x01	; 1
    9266:	59 f4       	brne	.+22     	; 0x927e <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    9268:	80 91 55 08 	lds	r24, 0x0855
    926c:	90 91 56 08 	lds	r25, 0x0856
    9270:	91 95       	neg	r25
    9272:	81 95       	neg	r24
    9274:	91 09       	sbc	r25, r1
    9276:	90 93 56 08 	sts	0x0856, r25
    927a:	80 93 55 08 	sts	0x0855, r24
	}

	if (Config.RudderPol == REVERSED)
    927e:	80 91 c9 07 	lds	r24, 0x07C9
    9282:	81 30       	cpi	r24, 0x01	; 1
    9284:	59 f4       	brne	.+22     	; 0x929c <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    9286:	80 91 57 08 	lds	r24, 0x0857
    928a:	90 91 58 08 	lds	r25, 0x0858
    928e:	91 95       	neg	r25
    9290:	81 95       	neg	r24
    9292:	91 09       	sbc	r25, r1
    9294:	90 93 58 08 	sts	0x0858, r25
    9298:	80 93 57 08 	sts	0x0857, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    929c:	80 91 53 08 	lds	r24, 0x0853
    92a0:	90 91 54 08 	lds	r25, 0x0854
    92a4:	40 91 55 08 	lds	r20, 0x0855
    92a8:	50 91 56 08 	lds	r21, 0x0856
    92ac:	20 91 57 08 	lds	r18, 0x0857
    92b0:	30 91 58 08 	lds	r19, 0x0858
    92b4:	84 0f       	add	r24, r20
    92b6:	95 1f       	adc	r25, r21
    92b8:	82 0f       	add	r24, r18
    92ba:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    92bc:	20 91 3c 05 	lds	r18, 0x053C
    92c0:	30 91 3d 05 	lds	r19, 0x053D
    92c4:	ac 01       	movw	r20, r24
    92c6:	42 1b       	sub	r20, r18
    92c8:	53 0b       	sbc	r21, r19
    92ca:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    92cc:	2b 5f       	subi	r18, 0xFB	; 251
    92ce:	3f 4f       	sbci	r19, 0xFF	; 255
    92d0:	2b 30       	cpi	r18, 0x0B	; 11
    92d2:	31 05       	cpc	r19, r1
    92d4:	38 f4       	brcc	.+14     	; 0x92e4 <RxGetChannels+0x106>
    92d6:	20 91 4f 08 	lds	r18, 0x084F
    92da:	30 91 50 08 	lds	r19, 0x0850
    92de:	23 33       	cpi	r18, 0x33	; 51
    92e0:	31 05       	cpc	r19, r1
    92e2:	24 f0       	brlt	.+8      	; 0x92ec <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    92e4:	20 91 1f 05 	lds	r18, 0x051F
    92e8:	21 60       	ori	r18, 0x01	; 1
    92ea:	03 c0       	rjmp	.+6      	; 0x92f2 <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    92ec:	20 91 1f 05 	lds	r18, 0x051F
    92f0:	2e 7f       	andi	r18, 0xFE	; 254
    92f2:	20 93 1f 05 	sts	0x051F, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    92f6:	10 92 62 08 	sts	0x0862, r1
    92fa:	10 92 61 08 	sts	0x0861, r1

	OldRxSum = RxSum;
    92fe:	90 93 3d 05 	sts	0x053D, r25
    9302:	80 93 3c 05 	sts	0x053C, r24
    9306:	08 95       	ret

00009308 <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    9308:	0f 93       	push	r16
    930a:	1f 93       	push	r17
    930c:	cf 93       	push	r28
    930e:	df 93       	push	r29
    9310:	cd b7       	in	r28, 0x3d	; 61
    9312:	de b7       	in	r29, 0x3e	; 62
    9314:	60 97       	sbiw	r28, 0x10	; 16
    9316:	0f b6       	in	r0, 0x3f	; 63
    9318:	f8 94       	cli
    931a:	de bf       	out	0x3e, r29	; 62
    931c:	0f be       	out	0x3f, r0	; 63
    931e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    9320:	8e 01       	movw	r16, r28
    9322:	0f 5f       	subi	r16, 0xFF	; 255
    9324:	1f 4f       	sbci	r17, 0xFF	; 255
    9326:	80 e1       	ldi	r24, 0x10	; 16
    9328:	d8 01       	movw	r26, r16
    932a:	1d 92       	st	X+, r1
    932c:	8a 95       	dec	r24
    932e:	e9 f7       	brne	.-6      	; 0x932a <CenterSticks+0x22>
    9330:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    9332:	d8 01       	movw	r26, r16
    9334:	80 e0       	ldi	r24, 0x00	; 0
    9336:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    9338:	9c 01       	movw	r18, r24
    933a:	22 0f       	add	r18, r18
    933c:	33 1f       	adc	r19, r19
    933e:	20 52       	subi	r18, 0x20	; 32
    9340:	38 4f       	sbci	r19, 0xF8	; 248
    9342:	f9 01       	movw	r30, r18
    9344:	40 81       	ld	r20, Z
    9346:	51 81       	ldd	r21, Z+1	; 0x01
    9348:	2d 91       	ld	r18, X+
    934a:	3c 91       	ld	r19, X
    934c:	11 97       	sbiw	r26, 0x01	; 1
    934e:	24 0f       	add	r18, r20
    9350:	35 1f       	adc	r19, r21
    9352:	2d 93       	st	X+, r18
    9354:	3d 93       	st	X+, r19
    9356:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    9358:	88 30       	cpi	r24, 0x08	; 8
    935a:	91 05       	cpc	r25, r1
    935c:	69 f7       	brne	.-38     	; 0x9338 <CenterSticks+0x30>
    935e:	ff e7       	ldi	r31, 0x7F	; 127
    9360:	2a e1       	ldi	r18, 0x1A	; 26
    9362:	86 e0       	ldi	r24, 0x06	; 6
    9364:	f1 50       	subi	r31, 0x01	; 1
    9366:	20 40       	sbci	r18, 0x00	; 0
    9368:	80 40       	sbci	r24, 0x00	; 0
    936a:	e1 f7       	brne	.-8      	; 0x9364 <CenterSticks+0x5c>
    936c:	00 c0       	rjmp	.+0      	; 0x936e <CenterSticks+0x66>
    936e:	00 00       	nop
    9370:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    9372:	f9 f6       	brne	.-66     	; 0x9332 <CenterSticks+0x2a>
    9374:	ab e9       	ldi	r26, 0x9B	; 155
    9376:	b7 e0       	ldi	r27, 0x07	; 7
    9378:	9e 01       	movw	r18, r28
    937a:	2f 5e       	subi	r18, 0xEF	; 239
    937c:	3f 4f       	sbci	r19, 0xFF	; 255
    937e:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    9380:	81 91       	ld	r24, Z+
    9382:	91 91       	ld	r25, Z+
    9384:	04 96       	adiw	r24, 0x04	; 4
    9386:	43 e0       	ldi	r20, 0x03	; 3
    9388:	96 95       	lsr	r25
    938a:	87 95       	ror	r24
    938c:	4a 95       	dec	r20
    938e:	e1 f7       	brne	.-8      	; 0x9388 <CenterSticks+0x80>
    9390:	8d 93       	st	X+, r24
    9392:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    9394:	e2 17       	cp	r30, r18
    9396:	f3 07       	cpc	r31, r19
    9398:	99 f7       	brne	.-26     	; 0x9380 <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    939a:	60 96       	adiw	r28, 0x10	; 16
    939c:	0f b6       	in	r0, 0x3f	; 63
    939e:	f8 94       	cli
    93a0:	de bf       	out	0x3e, r29	; 62
    93a2:	0f be       	out	0x3f, r0	; 63
    93a4:	cd bf       	out	0x3d, r28	; 61
    93a6:	df 91       	pop	r29
    93a8:	cf 91       	pop	r28
    93aa:	1f 91       	pop	r17
    93ac:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    93ae:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <Save_Config_to_EEPROM>

000093b2 <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    93b2:	8f 92       	push	r8
    93b4:	9f 92       	push	r9
    93b6:	af 92       	push	r10
    93b8:	bf 92       	push	r11
    93ba:	df 92       	push	r13
    93bc:	ef 92       	push	r14
    93be:	ff 92       	push	r15
    93c0:	0f 93       	push	r16
    93c2:	1f 93       	push	r17
    93c4:	cf 93       	push	r28
    93c6:	df 93       	push	r29
    93c8:	d8 2e       	mov	r13, r24
    93ca:	07 e5       	ldi	r16, 0x57	; 87
    93cc:	16 e0       	ldi	r17, 0x06	; 6
    93ce:	c0 e0       	ldi	r28, 0x00	; 0
    93d0:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    93d2:	ea e0       	ldi	r30, 0x0A	; 10
    93d4:	8e 2e       	mov	r8, r30
    93d6:	91 2c       	mov	r9, r1
    93d8:	a1 2c       	mov	r10, r1
    93da:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    93dc:	7e 01       	movw	r14, r28
    93de:	ee 0c       	add	r14, r14
    93e0:	ff 1c       	adc	r15, r15
    93e2:	f7 01       	movw	r30, r14
    93e4:	ed 59       	subi	r30, 0x9D	; 157
    93e6:	f7 4f       	sbci	r31, 0xF7	; 247
    93e8:	20 81       	ld	r18, Z
    93ea:	31 81       	ldd	r19, Z+1	; 0x01
    93ec:	a9 01       	movw	r20, r18
    93ee:	60 e0       	ldi	r22, 0x00	; 0
    93f0:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    93f2:	f8 01       	movw	r30, r16
    93f4:	80 81       	ld	r24, Z
    93f6:	82 30       	cpi	r24, 0x02	; 2
    93f8:	79 f0       	breq	.+30     	; 0x9418 <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    93fa:	9a 01       	movw	r18, r20
    93fc:	ab 01       	movw	r20, r22
    93fe:	26 5a       	subi	r18, 0xA6	; 166
    9400:	3e 40       	sbci	r19, 0x0E	; 14
    9402:	41 09       	sbc	r20, r1
    9404:	51 09       	sbc	r21, r1
    9406:	56 95       	lsr	r21
    9408:	47 95       	ror	r20
    940a:	37 95       	ror	r19
    940c:	27 95       	ror	r18
    940e:	24 52       	subi	r18, 0x24	; 36
    9410:	3a 4f       	sbci	r19, 0xFA	; 250
    9412:	4f 4f       	sbci	r20, 0xFF	; 255
    9414:	5f 4f       	sbci	r21, 0xFF	; 255
    9416:	11 c0       	rjmp	.+34     	; 0x943a <output_servo_ppm+0x88>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    9418:	cb 01       	movw	r24, r22
    941a:	ba 01       	movw	r22, r20
    941c:	52 e0       	ldi	r21, 0x02	; 2
    941e:	66 0f       	add	r22, r22
    9420:	77 1f       	adc	r23, r23
    9422:	88 1f       	adc	r24, r24
    9424:	99 1f       	adc	r25, r25
    9426:	5a 95       	dec	r21
    9428:	d1 f7       	brne	.-12     	; 0x941e <output_servo_ppm+0x6c>
    942a:	6b 5f       	subi	r22, 0xFB	; 251
    942c:	7f 4f       	sbci	r23, 0xFF	; 255
    942e:	8f 4f       	sbci	r24, 0xFF	; 255
    9430:	9f 4f       	sbci	r25, 0xFF	; 255
    9432:	a5 01       	movw	r20, r10
    9434:	94 01       	movw	r18, r8
    9436:	0e 94 26 4e 	call	0x9c4c	; 0x9c4c <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    943a:	f7 01       	movw	r30, r14
    943c:	ed 59       	subi	r30, 0x9D	; 157
    943e:	f7 4f       	sbci	r31, 0xF7	; 247
    9440:	31 83       	std	Z+1, r19	; 0x01
    9442:	20 83       	st	Z, r18
    9444:	21 96       	adiw	r28, 0x01	; 1
    9446:	0a 5d       	subi	r16, 0xDA	; 218
    9448:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    944a:	c8 30       	cpi	r28, 0x08	; 8
    944c:	d1 05       	cpc	r29, r1
    944e:	31 f6       	brne	.-116    	; 0x93dc <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    9450:	80 91 e0 07 	lds	r24, 0x07E0
    9454:	90 91 e1 07 	lds	r25, 0x07E1
    9458:	20 91 9b 07 	lds	r18, 0x079B
    945c:	30 91 9c 07 	lds	r19, 0x079C
    9460:	82 1b       	sub	r24, r18
    9462:	93 0b       	sbc	r25, r19
    9464:	90 93 50 08 	sts	0x0850, r25
    9468:	80 93 4f 08 	sts	0x084F, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    946c:	80 91 4f 08 	lds	r24, 0x084F
    9470:	90 91 50 08 	lds	r25, 0x0850
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    9474:	c2 97       	sbiw	r24, 0x32	; 50
    9476:	ac f0       	brlt	.+42     	; 0x94a2 <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    9478:	80 91 20 05 	lds	r24, 0x0520
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    947c:	82 fd       	sbrc	r24, 2
    947e:	11 c0       	rjmp	.+34     	; 0x94a2 <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    9480:	80 91 20 05 	lds	r24, 0x0520
    9484:	80 fd       	sbrc	r24, 0
    9486:	24 c0       	rjmp	.+72     	; 0x94d0 <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    9488:	10 92 0b 08 	sts	0x080B, r1
	
		// We now care about interrupts
		JitterGate = true;
    948c:	81 e0       	ldi	r24, 0x01	; 1
    948e:	80 93 0a 08 	sts	0x080A, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    9492:	6d 2d       	mov	r22, r13
    9494:	83 e6       	ldi	r24, 0x63	; 99
    9496:	98 e0       	ldi	r25, 0x08	; 8
    9498:	0e 94 56 0e 	call	0x1cac	; 0x1cac <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    949c:	10 92 0a 08 	sts	0x080A, r1
    94a0:	17 c0       	rjmp	.+46     	; 0x94d0 <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    94a2:	e7 e5       	ldi	r30, 0x57	; 87
    94a4:	f6 e0       	ldi	r31, 0x06	; 6
    94a6:	80 e0       	ldi	r24, 0x00	; 0
    94a8:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    94aa:	28 ee       	ldi	r18, 0xE8	; 232
    94ac:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    94ae:	40 81       	ld	r20, Z
    94b0:	42 30       	cpi	r20, 0x02	; 2
    94b2:	41 f4       	brne	.+16     	; 0x94c4 <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    94b4:	dc 01       	movw	r26, r24
    94b6:	aa 0f       	add	r26, r26
    94b8:	bb 1f       	adc	r27, r27
    94ba:	ad 59       	subi	r26, 0x9D	; 157
    94bc:	b7 4f       	sbci	r27, 0xF7	; 247
    94be:	11 96       	adiw	r26, 0x01	; 1
    94c0:	3c 93       	st	X, r19
    94c2:	2e 93       	st	-X, r18
    94c4:	01 96       	adiw	r24, 0x01	; 1
    94c6:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    94c8:	88 30       	cpi	r24, 0x08	; 8
    94ca:	91 05       	cpc	r25, r1
    94cc:	81 f7       	brne	.-32     	; 0x94ae <output_servo_ppm+0xfc>
    94ce:	d8 cf       	rjmp	.-80     	; 0x9480 <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    94d0:	df 91       	pop	r29
    94d2:	cf 91       	pop	r28
    94d4:	1f 91       	pop	r17
    94d6:	0f 91       	pop	r16
    94d8:	ff 90       	pop	r15
    94da:	ef 90       	pop	r14
    94dc:	df 90       	pop	r13
    94de:	bf 90       	pop	r11
    94e0:	af 90       	pop	r10
    94e2:	9f 90       	pop	r9
    94e4:	8f 90       	pop	r8
    94e6:	08 95       	ret

000094e8 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    94e8:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    94ec:	81 e1       	ldi	r24, 0x11	; 17
    94ee:	80 93 b8 00 	sts	0x00B8, r24
    94f2:	08 95       	ret

000094f4 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    94f4:	94 ea       	ldi	r25, 0xA4	; 164
    94f6:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    94fa:	4f ef       	ldi	r20, 0xFF	; 255
    94fc:	50 e0       	ldi	r21, 0x00	; 0
    94fe:	60 e0       	ldi	r22, 0x00	; 0
    9500:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9502:	90 91 bc 00 	lds	r25, 0x00BC
    9506:	97 fd       	sbrc	r25, 7
    9508:	06 c0       	rjmp	.+12     	; 0x9516 <i2c_start+0x22>
    950a:	41 50       	subi	r20, 0x01	; 1
    950c:	51 09       	sbc	r21, r1
    950e:	61 09       	sbc	r22, r1
    9510:	71 09       	sbc	r23, r1
    9512:	b8 f7       	brcc	.-18     	; 0x9502 <i2c_start+0xe>
    9514:	06 c0       	rjmp	.+12     	; 0x9522 <i2c_start+0x2e>
	if(i2c_timer == 0)
    9516:	45 2b       	or	r20, r21
    9518:	46 2b       	or	r20, r22
    951a:	47 2b       	or	r20, r23
    951c:	11 f4       	brne	.+4      	; 0x9522 <i2c_start+0x2e>
		return 1;
    951e:	81 e0       	ldi	r24, 0x01	; 1
    9520:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    9522:	90 91 b9 00 	lds	r25, 0x00B9
    9526:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    9528:	98 30       	cpi	r25, 0x08	; 8
    952a:	11 f0       	breq	.+4      	; 0x9530 <i2c_start+0x3c>
    952c:	90 31       	cpi	r25, 0x10	; 16
    952e:	b9 f7       	brne	.-18     	; 0x951e <i2c_start+0x2a>

	// send device address
	TWDR = address;
    9530:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    9534:	84 e8       	ldi	r24, 0x84	; 132
    9536:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    953a:	8f ef       	ldi	r24, 0xFF	; 255
    953c:	90 e0       	ldi	r25, 0x00	; 0
    953e:	a0 e0       	ldi	r26, 0x00	; 0
    9540:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9542:	20 91 bc 00 	lds	r18, 0x00BC
    9546:	27 fd       	sbrc	r18, 7
    9548:	05 c0       	rjmp	.+10     	; 0x9554 <i2c_start+0x60>
    954a:	01 97       	sbiw	r24, 0x01	; 1
    954c:	a1 09       	sbc	r26, r1
    954e:	b1 09       	sbc	r27, r1
    9550:	c0 f7       	brcc	.-16     	; 0x9542 <i2c_start+0x4e>
    9552:	04 c0       	rjmp	.+8      	; 0x955c <i2c_start+0x68>
	if(i2c_timer == 0)
    9554:	89 2b       	or	r24, r25
    9556:	8a 2b       	or	r24, r26
    9558:	8b 2b       	or	r24, r27
    955a:	09 f3       	breq	.-62     	; 0x951e <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    955c:	80 91 b9 00 	lds	r24, 0x00B9
    9560:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    9562:	88 31       	cpi	r24, 0x18	; 24
    9564:	11 f0       	breq	.+4      	; 0x956a <i2c_start+0x76>
    9566:	80 34       	cpi	r24, 0x40	; 64
    9568:	d1 f6       	brne	.-76     	; 0x951e <i2c_start+0x2a>

	return 0;
    956a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    956c:	08 95       	ret

0000956e <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    956e:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    9570:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9572:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9574:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9578:	20 e0       	ldi	r18, 0x00	; 0
    957a:	30 e0       	ldi	r19, 0x00	; 0
    957c:	90 91 bc 00 	lds	r25, 0x00BC
    9580:	97 fd       	sbrc	r25, 7
    9582:	06 c0       	rjmp	.+12     	; 0x9590 <i2c_start_wait+0x22>
    9584:	2f 5f       	subi	r18, 0xFF	; 255
    9586:	3f 4f       	sbci	r19, 0xFF	; 255
    9588:	21 15       	cp	r18, r1
    958a:	91 e0       	ldi	r25, 0x01	; 1
    958c:	39 07       	cpc	r19, r25
    958e:	b1 f7       	brne	.-20     	; 0x957c <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    9590:	90 91 b9 00 	lds	r25, 0x00B9
    9594:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    9596:	98 30       	cpi	r25, 0x08	; 8
    9598:	11 f0       	breq	.+4      	; 0x959e <i2c_start_wait+0x30>
    959a:	90 31       	cpi	r25, 0x10	; 16
    959c:	59 f7       	brne	.-42     	; 0x9574 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    959e:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    95a2:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    95a6:	20 e0       	ldi	r18, 0x00	; 0
    95a8:	30 e0       	ldi	r19, 0x00	; 0
    95aa:	90 91 bc 00 	lds	r25, 0x00BC
    95ae:	97 fd       	sbrc	r25, 7
    95b0:	06 c0       	rjmp	.+12     	; 0x95be <i2c_start_wait+0x50>
    95b2:	2f 5f       	subi	r18, 0xFF	; 255
    95b4:	3f 4f       	sbci	r19, 0xFF	; 255
    95b6:	21 15       	cp	r18, r1
    95b8:	91 e0       	ldi	r25, 0x01	; 1
    95ba:	39 07       	cpc	r19, r25
    95bc:	b1 f7       	brne	.-20     	; 0x95aa <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    95be:	90 91 b9 00 	lds	r25, 0x00B9
    95c2:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    95c4:	90 32       	cpi	r25, 0x20	; 32
    95c6:	11 f0       	breq	.+4      	; 0x95cc <i2c_start_wait+0x5e>
    95c8:	98 35       	cpi	r25, 0x58	; 88
    95ca:	79 f4       	brne	.+30     	; 0x95ea <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    95cc:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    95d0:	20 e0       	ldi	r18, 0x00	; 0
    95d2:	30 e0       	ldi	r19, 0x00	; 0
    95d4:	90 91 bc 00 	lds	r25, 0x00BC
    95d8:	94 ff       	sbrs	r25, 4
    95da:	cc cf       	rjmp	.-104    	; 0x9574 <i2c_start_wait+0x6>
    95dc:	2f 5f       	subi	r18, 0xFF	; 255
    95de:	3f 4f       	sbci	r19, 0xFF	; 255
    95e0:	21 15       	cp	r18, r1
    95e2:	91 e0       	ldi	r25, 0x01	; 1
    95e4:	39 07       	cpc	r19, r25
    95e6:	b1 f7       	brne	.-20     	; 0x95d4 <i2c_start_wait+0x66>
    95e8:	c5 cf       	rjmp	.-118    	; 0x9574 <i2c_start_wait+0x6>
    95ea:	08 95       	ret

000095ec <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    95ec:	0c 94 7a 4a 	jmp	0x94f4	; 0x94f4 <i2c_start>

000095f0 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    95f0:	84 e9       	ldi	r24, 0x94	; 148
    95f2:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    95f6:	80 e0       	ldi	r24, 0x00	; 0
    95f8:	90 e0       	ldi	r25, 0x00	; 0
    95fa:	20 91 bc 00 	lds	r18, 0x00BC
    95fe:	24 ff       	sbrs	r18, 4
    9600:	05 c0       	rjmp	.+10     	; 0x960c <i2c_stop+0x1c>
    9602:	01 96       	adiw	r24, 0x01	; 1
    9604:	81 15       	cp	r24, r1
    9606:	21 e0       	ldi	r18, 0x01	; 1
    9608:	92 07       	cpc	r25, r18
    960a:	b9 f7       	brne	.-18     	; 0x95fa <i2c_stop+0xa>
    960c:	08 95       	ret

0000960e <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    960e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    9612:	84 e8       	ldi	r24, 0x84	; 132
    9614:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    9618:	8f ef       	ldi	r24, 0xFF	; 255
    961a:	90 e0       	ldi	r25, 0x00	; 0
    961c:	a0 e0       	ldi	r26, 0x00	; 0
    961e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9620:	20 91 bc 00 	lds	r18, 0x00BC
    9624:	27 fd       	sbrc	r18, 7
    9626:	05 c0       	rjmp	.+10     	; 0x9632 <i2c_write+0x24>
    9628:	01 97       	sbiw	r24, 0x01	; 1
    962a:	a1 09       	sbc	r26, r1
    962c:	b1 09       	sbc	r27, r1
    962e:	c0 f7       	brcc	.-16     	; 0x9620 <i2c_write+0x12>
    9630:	04 c0       	rjmp	.+8      	; 0x963a <i2c_write+0x2c>
	if(i2c_timer == 0)
    9632:	89 2b       	or	r24, r25
    9634:	8a 2b       	or	r24, r26
    9636:	8b 2b       	or	r24, r27
    9638:	41 f0       	breq	.+16     	; 0x964a <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    963a:	90 91 b9 00 	lds	r25, 0x00B9
    963e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    9640:	81 e0       	ldi	r24, 0x01	; 1
    9642:	98 32       	cpi	r25, 0x28	; 40
    9644:	19 f4       	brne	.+6      	; 0x964c <i2c_write+0x3e>
    9646:	80 e0       	ldi	r24, 0x00	; 0
    9648:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    964a:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    964c:	08 95       	ret

0000964e <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    964e:	84 ec       	ldi	r24, 0xC4	; 196
    9650:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    9654:	8f ef       	ldi	r24, 0xFF	; 255
    9656:	90 e0       	ldi	r25, 0x00	; 0
    9658:	a0 e0       	ldi	r26, 0x00	; 0
    965a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    965c:	20 91 bc 00 	lds	r18, 0x00BC
    9660:	27 fd       	sbrc	r18, 7
    9662:	05 c0       	rjmp	.+10     	; 0x966e <i2c_readAck+0x20>
    9664:	01 97       	sbiw	r24, 0x01	; 1
    9666:	a1 09       	sbc	r26, r1
    9668:	b1 09       	sbc	r27, r1
    966a:	c0 f7       	brcc	.-16     	; 0x965c <i2c_readAck+0xe>
    966c:	04 c0       	rjmp	.+8      	; 0x9676 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    966e:	89 2b       	or	r24, r25
    9670:	8a 2b       	or	r24, r26
    9672:	8b 2b       	or	r24, r27
    9674:	19 f0       	breq	.+6      	; 0x967c <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    9676:	80 91 bb 00 	lds	r24, 0x00BB
    967a:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    967c:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    967e:	08 95       	ret

00009680 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    9680:	84 e8       	ldi	r24, 0x84	; 132
    9682:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    9686:	8f ef       	ldi	r24, 0xFF	; 255
    9688:	90 e0       	ldi	r25, 0x00	; 0
    968a:	a0 e0       	ldi	r26, 0x00	; 0
    968c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    968e:	20 91 bc 00 	lds	r18, 0x00BC
    9692:	27 fd       	sbrc	r18, 7
    9694:	05 c0       	rjmp	.+10     	; 0x96a0 <i2c_readNak+0x20>
    9696:	01 97       	sbiw	r24, 0x01	; 1
    9698:	a1 09       	sbc	r26, r1
    969a:	b1 09       	sbc	r27, r1
    969c:	c0 f7       	brcc	.-16     	; 0x968e <i2c_readNak+0xe>
    969e:	04 c0       	rjmp	.+8      	; 0x96a8 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    96a0:	89 2b       	or	r24, r25
    96a2:	8a 2b       	or	r24, r26
    96a4:	8b 2b       	or	r24, r27
    96a6:	19 f0       	breq	.+6      	; 0x96ae <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    96a8:	80 91 bb 00 	lds	r24, 0x00BB
    96ac:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    96ae:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    96b0:	08 95       	ret

000096b2 <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    96b2:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    96b4:	80 91 c1 00 	lds	r24, 0x00C1
    96b8:	8f 77       	andi	r24, 0x7F	; 127
    96ba:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    96be:	80 91 c0 00 	lds	r24, 0x00C0
    96c2:	87 ff       	sbrs	r24, 7
    96c4:	05 c0       	rjmp	.+10     	; 0x96d0 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    96c6:	80 91 c6 00 	lds	r24, 0x00C6
    96ca:	80 93 c2 00 	sts	0x00C2, r24
    96ce:	f7 cf       	rjmp	.-18     	; 0x96be <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    96d0:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    96d4:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    96d8:	86 e0       	ldi	r24, 0x06	; 6
    96da:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    96de:	80 91 ea 05 	lds	r24, 0x05EA
    96e2:	82 30       	cpi	r24, 0x02	; 2
    96e4:	a1 f0       	breq	.+40     	; 0x970e <init_uart+0x5c>
    96e6:	34 f4       	brge	.+12     	; 0x96f4 <init_uart+0x42>
    96e8:	87 fd       	sbrc	r24, 7
    96ea:	4c c0       	rjmp	.+152    	; 0x9784 <init_uart+0xd2>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    96ec:	80 91 c1 00 	lds	r24, 0x00C1
    96f0:	8f 7e       	andi	r24, 0xEF	; 239
    96f2:	46 c0       	rjmp	.+140    	; 0x9780 <init_uart+0xce>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    96f4:	83 30       	cpi	r24, 0x03	; 3
    96f6:	41 f1       	breq	.+80     	; 0x9748 <init_uart+0x96>
    96f8:	84 30       	cpi	r24, 0x04	; 4
    96fa:	09 f0       	breq	.+2      	; 0x96fe <init_uart+0x4c>
    96fc:	43 c0       	rjmp	.+134    	; 0x9784 <init_uart+0xd2>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    96fe:	90 91 c0 00 	lds	r25, 0x00C0
    9702:	9d 7f       	andi	r25, 0xFD	; 253
    9704:	90 93 c0 00 	sts	0x00C0, r25
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    9708:	10 92 c5 00 	sts	0x00C5, r1
    970c:	25 c0       	rjmp	.+74     	; 0x9758 <init_uart+0xa6>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    970e:	80 91 c0 00 	lds	r24, 0x00C0
    9712:	82 60       	ori	r24, 0x02	; 2
    9714:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    9718:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    971c:	88 e1       	ldi	r24, 0x18	; 24
    971e:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    9722:	80 91 c1 00 	lds	r24, 0x00C1
    9726:	80 61       	ori	r24, 0x10	; 16
    9728:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    972c:	80 91 c2 00 	lds	r24, 0x00C2
    9730:	88 60       	ori	r24, 0x08	; 8
    9732:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    9736:	80 91 c2 00 	lds	r24, 0x00C2
    973a:	8f 7e       	andi	r24, 0xEF	; 239
    973c:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    9740:	80 91 c2 00 	lds	r24, 0x00C2
    9744:	80 62       	ori	r24, 0x20	; 32
    9746:	17 c0       	rjmp	.+46     	; 0x9776 <init_uart+0xc4>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    9748:	80 91 c0 00 	lds	r24, 0x00C0
    974c:	8d 7f       	andi	r24, 0xFD	; 253
    974e:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    9752:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    9756:	8a e0       	ldi	r24, 0x0A	; 10
    9758:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    975c:	80 91 c1 00 	lds	r24, 0x00C1
    9760:	80 61       	ori	r24, 0x10	; 16
    9762:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    9766:	80 91 c2 00 	lds	r24, 0x00C2
    976a:	87 7f       	andi	r24, 0xF7	; 247
    976c:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    9770:	80 91 c2 00 	lds	r24, 0x00C2
    9774:	8f 7e       	andi	r24, 0xEF	; 239
    9776:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    977a:	80 91 c1 00 	lds	r24, 0x00C1
    977e:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    9780:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    9784:	78 94       	sei
    9786:	08 95       	ret

00009788 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    9788:	83 e0       	ldi	r24, 0x03	; 3
    978a:	0e 94 b8 11 	call	0x2370	; 0x2370 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    978e:	80 91 78 00 	lds	r24, 0x0078
    9792:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    9796:	9c 01       	movw	r18, r24
    9798:	36 95       	lsr	r19
    979a:	27 95       	ror	r18
    979c:	ac 01       	movw	r20, r24
    979e:	44 0f       	add	r20, r20
    97a0:	55 1f       	adc	r21, r21
    97a2:	24 0f       	add	r18, r20
    97a4:	35 1f       	adc	r19, r21
    97a6:	ac 01       	movw	r20, r24
    97a8:	74 e0       	ldi	r23, 0x04	; 4
    97aa:	56 95       	lsr	r21
    97ac:	47 95       	ror	r20
    97ae:	7a 95       	dec	r23
    97b0:	e1 f7       	brne	.-8      	; 0x97aa <GetVbat+0x22>
    97b2:	24 0f       	add	r18, r20
    97b4:	35 1f       	adc	r19, r21
    97b6:	e6 e0       	ldi	r30, 0x06	; 6
    97b8:	96 95       	lsr	r25
    97ba:	87 95       	ror	r24
    97bc:	ea 95       	dec	r30
    97be:	e1 f7       	brne	.-8      	; 0x97b8 <GetVbat+0x30>

	return vBat;
}
    97c0:	82 0f       	add	r24, r18
    97c2:	93 1f       	adc	r25, r19
    97c4:	08 95       	ret

000097c6 <__subsf3>:
    97c6:	50 58       	subi	r21, 0x80	; 128

000097c8 <__addsf3>:
    97c8:	bb 27       	eor	r27, r27
    97ca:	aa 27       	eor	r26, r26
    97cc:	0e d0       	rcall	.+28     	; 0x97ea <__addsf3x>
    97ce:	75 c1       	rjmp	.+746    	; 0x9aba <__fp_round>
    97d0:	66 d1       	rcall	.+716    	; 0x9a9e <__fp_pscA>
    97d2:	30 f0       	brcs	.+12     	; 0x97e0 <__addsf3+0x18>
    97d4:	6b d1       	rcall	.+726    	; 0x9aac <__fp_pscB>
    97d6:	20 f0       	brcs	.+8      	; 0x97e0 <__addsf3+0x18>
    97d8:	31 f4       	brne	.+12     	; 0x97e6 <__addsf3+0x1e>
    97da:	9f 3f       	cpi	r25, 0xFF	; 255
    97dc:	11 f4       	brne	.+4      	; 0x97e2 <__addsf3+0x1a>
    97de:	1e f4       	brtc	.+6      	; 0x97e6 <__addsf3+0x1e>
    97e0:	5b c1       	rjmp	.+694    	; 0x9a98 <__fp_nan>
    97e2:	0e f4       	brtc	.+2      	; 0x97e6 <__addsf3+0x1e>
    97e4:	e0 95       	com	r30
    97e6:	e7 fb       	bst	r30, 7
    97e8:	51 c1       	rjmp	.+674    	; 0x9a8c <__fp_inf>

000097ea <__addsf3x>:
    97ea:	e9 2f       	mov	r30, r25
    97ec:	77 d1       	rcall	.+750    	; 0x9adc <__fp_split3>
    97ee:	80 f3       	brcs	.-32     	; 0x97d0 <__addsf3+0x8>
    97f0:	ba 17       	cp	r27, r26
    97f2:	62 07       	cpc	r22, r18
    97f4:	73 07       	cpc	r23, r19
    97f6:	84 07       	cpc	r24, r20
    97f8:	95 07       	cpc	r25, r21
    97fa:	18 f0       	brcs	.+6      	; 0x9802 <__addsf3x+0x18>
    97fc:	71 f4       	brne	.+28     	; 0x981a <__addsf3x+0x30>
    97fe:	9e f5       	brtc	.+102    	; 0x9866 <__addsf3x+0x7c>
    9800:	8f c1       	rjmp	.+798    	; 0x9b20 <__fp_zero>
    9802:	0e f4       	brtc	.+2      	; 0x9806 <__addsf3x+0x1c>
    9804:	e0 95       	com	r30
    9806:	0b 2e       	mov	r0, r27
    9808:	ba 2f       	mov	r27, r26
    980a:	a0 2d       	mov	r26, r0
    980c:	0b 01       	movw	r0, r22
    980e:	b9 01       	movw	r22, r18
    9810:	90 01       	movw	r18, r0
    9812:	0c 01       	movw	r0, r24
    9814:	ca 01       	movw	r24, r20
    9816:	a0 01       	movw	r20, r0
    9818:	11 24       	eor	r1, r1
    981a:	ff 27       	eor	r31, r31
    981c:	59 1b       	sub	r21, r25
    981e:	99 f0       	breq	.+38     	; 0x9846 <__addsf3x+0x5c>
    9820:	59 3f       	cpi	r21, 0xF9	; 249
    9822:	50 f4       	brcc	.+20     	; 0x9838 <__addsf3x+0x4e>
    9824:	50 3e       	cpi	r21, 0xE0	; 224
    9826:	68 f1       	brcs	.+90     	; 0x9882 <__addsf3x+0x98>
    9828:	1a 16       	cp	r1, r26
    982a:	f0 40       	sbci	r31, 0x00	; 0
    982c:	a2 2f       	mov	r26, r18
    982e:	23 2f       	mov	r18, r19
    9830:	34 2f       	mov	r19, r20
    9832:	44 27       	eor	r20, r20
    9834:	58 5f       	subi	r21, 0xF8	; 248
    9836:	f3 cf       	rjmp	.-26     	; 0x981e <__addsf3x+0x34>
    9838:	46 95       	lsr	r20
    983a:	37 95       	ror	r19
    983c:	27 95       	ror	r18
    983e:	a7 95       	ror	r26
    9840:	f0 40       	sbci	r31, 0x00	; 0
    9842:	53 95       	inc	r21
    9844:	c9 f7       	brne	.-14     	; 0x9838 <__addsf3x+0x4e>
    9846:	7e f4       	brtc	.+30     	; 0x9866 <__addsf3x+0x7c>
    9848:	1f 16       	cp	r1, r31
    984a:	ba 0b       	sbc	r27, r26
    984c:	62 0b       	sbc	r22, r18
    984e:	73 0b       	sbc	r23, r19
    9850:	84 0b       	sbc	r24, r20
    9852:	ba f0       	brmi	.+46     	; 0x9882 <__addsf3x+0x98>
    9854:	91 50       	subi	r25, 0x01	; 1
    9856:	a1 f0       	breq	.+40     	; 0x9880 <__addsf3x+0x96>
    9858:	ff 0f       	add	r31, r31
    985a:	bb 1f       	adc	r27, r27
    985c:	66 1f       	adc	r22, r22
    985e:	77 1f       	adc	r23, r23
    9860:	88 1f       	adc	r24, r24
    9862:	c2 f7       	brpl	.-16     	; 0x9854 <__addsf3x+0x6a>
    9864:	0e c0       	rjmp	.+28     	; 0x9882 <__addsf3x+0x98>
    9866:	ba 0f       	add	r27, r26
    9868:	62 1f       	adc	r22, r18
    986a:	73 1f       	adc	r23, r19
    986c:	84 1f       	adc	r24, r20
    986e:	48 f4       	brcc	.+18     	; 0x9882 <__addsf3x+0x98>
    9870:	87 95       	ror	r24
    9872:	77 95       	ror	r23
    9874:	67 95       	ror	r22
    9876:	b7 95       	ror	r27
    9878:	f7 95       	ror	r31
    987a:	9e 3f       	cpi	r25, 0xFE	; 254
    987c:	08 f0       	brcs	.+2      	; 0x9880 <__addsf3x+0x96>
    987e:	b3 cf       	rjmp	.-154    	; 0x97e6 <__addsf3+0x1e>
    9880:	93 95       	inc	r25
    9882:	88 0f       	add	r24, r24
    9884:	08 f0       	brcs	.+2      	; 0x9888 <__addsf3x+0x9e>
    9886:	99 27       	eor	r25, r25
    9888:	ee 0f       	add	r30, r30
    988a:	97 95       	ror	r25
    988c:	87 95       	ror	r24
    988e:	08 95       	ret

00009890 <__cmpsf2>:
    9890:	d9 d0       	rcall	.+434    	; 0x9a44 <__fp_cmp>
    9892:	08 f4       	brcc	.+2      	; 0x9896 <__cmpsf2+0x6>
    9894:	81 e0       	ldi	r24, 0x01	; 1
    9896:	08 95       	ret

00009898 <__divsf3>:
    9898:	0c d0       	rcall	.+24     	; 0x98b2 <__divsf3x>
    989a:	0f c1       	rjmp	.+542    	; 0x9aba <__fp_round>
    989c:	07 d1       	rcall	.+526    	; 0x9aac <__fp_pscB>
    989e:	40 f0       	brcs	.+16     	; 0x98b0 <__divsf3+0x18>
    98a0:	fe d0       	rcall	.+508    	; 0x9a9e <__fp_pscA>
    98a2:	30 f0       	brcs	.+12     	; 0x98b0 <__divsf3+0x18>
    98a4:	21 f4       	brne	.+8      	; 0x98ae <__divsf3+0x16>
    98a6:	5f 3f       	cpi	r21, 0xFF	; 255
    98a8:	19 f0       	breq	.+6      	; 0x98b0 <__divsf3+0x18>
    98aa:	f0 c0       	rjmp	.+480    	; 0x9a8c <__fp_inf>
    98ac:	51 11       	cpse	r21, r1
    98ae:	39 c1       	rjmp	.+626    	; 0x9b22 <__fp_szero>
    98b0:	f3 c0       	rjmp	.+486    	; 0x9a98 <__fp_nan>

000098b2 <__divsf3x>:
    98b2:	14 d1       	rcall	.+552    	; 0x9adc <__fp_split3>
    98b4:	98 f3       	brcs	.-26     	; 0x989c <__divsf3+0x4>

000098b6 <__divsf3_pse>:
    98b6:	99 23       	and	r25, r25
    98b8:	c9 f3       	breq	.-14     	; 0x98ac <__divsf3+0x14>
    98ba:	55 23       	and	r21, r21
    98bc:	b1 f3       	breq	.-20     	; 0x98aa <__divsf3+0x12>
    98be:	95 1b       	sub	r25, r21
    98c0:	55 0b       	sbc	r21, r21
    98c2:	bb 27       	eor	r27, r27
    98c4:	aa 27       	eor	r26, r26
    98c6:	62 17       	cp	r22, r18
    98c8:	73 07       	cpc	r23, r19
    98ca:	84 07       	cpc	r24, r20
    98cc:	38 f0       	brcs	.+14     	; 0x98dc <__divsf3_pse+0x26>
    98ce:	9f 5f       	subi	r25, 0xFF	; 255
    98d0:	5f 4f       	sbci	r21, 0xFF	; 255
    98d2:	22 0f       	add	r18, r18
    98d4:	33 1f       	adc	r19, r19
    98d6:	44 1f       	adc	r20, r20
    98d8:	aa 1f       	adc	r26, r26
    98da:	a9 f3       	breq	.-22     	; 0x98c6 <__divsf3_pse+0x10>
    98dc:	33 d0       	rcall	.+102    	; 0x9944 <__divsf3_pse+0x8e>
    98de:	0e 2e       	mov	r0, r30
    98e0:	3a f0       	brmi	.+14     	; 0x98f0 <__divsf3_pse+0x3a>
    98e2:	e0 e8       	ldi	r30, 0x80	; 128
    98e4:	30 d0       	rcall	.+96     	; 0x9946 <__divsf3_pse+0x90>
    98e6:	91 50       	subi	r25, 0x01	; 1
    98e8:	50 40       	sbci	r21, 0x00	; 0
    98ea:	e6 95       	lsr	r30
    98ec:	00 1c       	adc	r0, r0
    98ee:	ca f7       	brpl	.-14     	; 0x98e2 <__divsf3_pse+0x2c>
    98f0:	29 d0       	rcall	.+82     	; 0x9944 <__divsf3_pse+0x8e>
    98f2:	fe 2f       	mov	r31, r30
    98f4:	27 d0       	rcall	.+78     	; 0x9944 <__divsf3_pse+0x8e>
    98f6:	66 0f       	add	r22, r22
    98f8:	77 1f       	adc	r23, r23
    98fa:	88 1f       	adc	r24, r24
    98fc:	bb 1f       	adc	r27, r27
    98fe:	26 17       	cp	r18, r22
    9900:	37 07       	cpc	r19, r23
    9902:	48 07       	cpc	r20, r24
    9904:	ab 07       	cpc	r26, r27
    9906:	b0 e8       	ldi	r27, 0x80	; 128
    9908:	09 f0       	breq	.+2      	; 0x990c <__divsf3_pse+0x56>
    990a:	bb 0b       	sbc	r27, r27
    990c:	80 2d       	mov	r24, r0
    990e:	bf 01       	movw	r22, r30
    9910:	ff 27       	eor	r31, r31
    9912:	93 58       	subi	r25, 0x83	; 131
    9914:	5f 4f       	sbci	r21, 0xFF	; 255
    9916:	2a f0       	brmi	.+10     	; 0x9922 <__divsf3_pse+0x6c>
    9918:	9e 3f       	cpi	r25, 0xFE	; 254
    991a:	51 05       	cpc	r21, r1
    991c:	68 f0       	brcs	.+26     	; 0x9938 <__divsf3_pse+0x82>
    991e:	b6 c0       	rjmp	.+364    	; 0x9a8c <__fp_inf>
    9920:	00 c1       	rjmp	.+512    	; 0x9b22 <__fp_szero>
    9922:	5f 3f       	cpi	r21, 0xFF	; 255
    9924:	ec f3       	brlt	.-6      	; 0x9920 <__divsf3_pse+0x6a>
    9926:	98 3e       	cpi	r25, 0xE8	; 232
    9928:	dc f3       	brlt	.-10     	; 0x9920 <__divsf3_pse+0x6a>
    992a:	86 95       	lsr	r24
    992c:	77 95       	ror	r23
    992e:	67 95       	ror	r22
    9930:	b7 95       	ror	r27
    9932:	f7 95       	ror	r31
    9934:	9f 5f       	subi	r25, 0xFF	; 255
    9936:	c9 f7       	brne	.-14     	; 0x992a <__divsf3_pse+0x74>
    9938:	88 0f       	add	r24, r24
    993a:	91 1d       	adc	r25, r1
    993c:	96 95       	lsr	r25
    993e:	87 95       	ror	r24
    9940:	97 f9       	bld	r25, 7
    9942:	08 95       	ret
    9944:	e1 e0       	ldi	r30, 0x01	; 1
    9946:	66 0f       	add	r22, r22
    9948:	77 1f       	adc	r23, r23
    994a:	88 1f       	adc	r24, r24
    994c:	bb 1f       	adc	r27, r27
    994e:	62 17       	cp	r22, r18
    9950:	73 07       	cpc	r23, r19
    9952:	84 07       	cpc	r24, r20
    9954:	ba 07       	cpc	r27, r26
    9956:	20 f0       	brcs	.+8      	; 0x9960 <__divsf3_pse+0xaa>
    9958:	62 1b       	sub	r22, r18
    995a:	73 0b       	sbc	r23, r19
    995c:	84 0b       	sbc	r24, r20
    995e:	ba 0b       	sbc	r27, r26
    9960:	ee 1f       	adc	r30, r30
    9962:	88 f7       	brcc	.-30     	; 0x9946 <__divsf3_pse+0x90>
    9964:	e0 95       	com	r30
    9966:	08 95       	ret

00009968 <__fixsfsi>:
    9968:	04 d0       	rcall	.+8      	; 0x9972 <__fixunssfsi>
    996a:	68 94       	set
    996c:	b1 11       	cpse	r27, r1
    996e:	d9 c0       	rjmp	.+434    	; 0x9b22 <__fp_szero>
    9970:	08 95       	ret

00009972 <__fixunssfsi>:
    9972:	bc d0       	rcall	.+376    	; 0x9aec <__fp_splitA>
    9974:	88 f0       	brcs	.+34     	; 0x9998 <__fixunssfsi+0x26>
    9976:	9f 57       	subi	r25, 0x7F	; 127
    9978:	90 f0       	brcs	.+36     	; 0x999e <__fixunssfsi+0x2c>
    997a:	b9 2f       	mov	r27, r25
    997c:	99 27       	eor	r25, r25
    997e:	b7 51       	subi	r27, 0x17	; 23
    9980:	a0 f0       	brcs	.+40     	; 0x99aa <__fixunssfsi+0x38>
    9982:	d1 f0       	breq	.+52     	; 0x99b8 <__fixunssfsi+0x46>
    9984:	66 0f       	add	r22, r22
    9986:	77 1f       	adc	r23, r23
    9988:	88 1f       	adc	r24, r24
    998a:	99 1f       	adc	r25, r25
    998c:	1a f0       	brmi	.+6      	; 0x9994 <__fixunssfsi+0x22>
    998e:	ba 95       	dec	r27
    9990:	c9 f7       	brne	.-14     	; 0x9984 <__fixunssfsi+0x12>
    9992:	12 c0       	rjmp	.+36     	; 0x99b8 <__fixunssfsi+0x46>
    9994:	b1 30       	cpi	r27, 0x01	; 1
    9996:	81 f0       	breq	.+32     	; 0x99b8 <__fixunssfsi+0x46>
    9998:	c3 d0       	rcall	.+390    	; 0x9b20 <__fp_zero>
    999a:	b1 e0       	ldi	r27, 0x01	; 1
    999c:	08 95       	ret
    999e:	c0 c0       	rjmp	.+384    	; 0x9b20 <__fp_zero>
    99a0:	67 2f       	mov	r22, r23
    99a2:	78 2f       	mov	r23, r24
    99a4:	88 27       	eor	r24, r24
    99a6:	b8 5f       	subi	r27, 0xF8	; 248
    99a8:	39 f0       	breq	.+14     	; 0x99b8 <__fixunssfsi+0x46>
    99aa:	b9 3f       	cpi	r27, 0xF9	; 249
    99ac:	cc f3       	brlt	.-14     	; 0x99a0 <__fixunssfsi+0x2e>
    99ae:	86 95       	lsr	r24
    99b0:	77 95       	ror	r23
    99b2:	67 95       	ror	r22
    99b4:	b3 95       	inc	r27
    99b6:	d9 f7       	brne	.-10     	; 0x99ae <__fixunssfsi+0x3c>
    99b8:	3e f4       	brtc	.+14     	; 0x99c8 <__fixunssfsi+0x56>
    99ba:	90 95       	com	r25
    99bc:	80 95       	com	r24
    99be:	70 95       	com	r23
    99c0:	61 95       	neg	r22
    99c2:	7f 4f       	sbci	r23, 0xFF	; 255
    99c4:	8f 4f       	sbci	r24, 0xFF	; 255
    99c6:	9f 4f       	sbci	r25, 0xFF	; 255
    99c8:	08 95       	ret

000099ca <__floatunsisf>:
    99ca:	e8 94       	clt
    99cc:	09 c0       	rjmp	.+18     	; 0x99e0 <__floatsisf+0x12>

000099ce <__floatsisf>:
    99ce:	97 fb       	bst	r25, 7
    99d0:	3e f4       	brtc	.+14     	; 0x99e0 <__floatsisf+0x12>
    99d2:	90 95       	com	r25
    99d4:	80 95       	com	r24
    99d6:	70 95       	com	r23
    99d8:	61 95       	neg	r22
    99da:	7f 4f       	sbci	r23, 0xFF	; 255
    99dc:	8f 4f       	sbci	r24, 0xFF	; 255
    99de:	9f 4f       	sbci	r25, 0xFF	; 255
    99e0:	99 23       	and	r25, r25
    99e2:	a9 f0       	breq	.+42     	; 0x9a0e <__floatsisf+0x40>
    99e4:	f9 2f       	mov	r31, r25
    99e6:	96 e9       	ldi	r25, 0x96	; 150
    99e8:	bb 27       	eor	r27, r27
    99ea:	93 95       	inc	r25
    99ec:	f6 95       	lsr	r31
    99ee:	87 95       	ror	r24
    99f0:	77 95       	ror	r23
    99f2:	67 95       	ror	r22
    99f4:	b7 95       	ror	r27
    99f6:	f1 11       	cpse	r31, r1
    99f8:	f8 cf       	rjmp	.-16     	; 0x99ea <__floatsisf+0x1c>
    99fa:	fa f4       	brpl	.+62     	; 0x9a3a <__floatsisf+0x6c>
    99fc:	bb 0f       	add	r27, r27
    99fe:	11 f4       	brne	.+4      	; 0x9a04 <__floatsisf+0x36>
    9a00:	60 ff       	sbrs	r22, 0
    9a02:	1b c0       	rjmp	.+54     	; 0x9a3a <__floatsisf+0x6c>
    9a04:	6f 5f       	subi	r22, 0xFF	; 255
    9a06:	7f 4f       	sbci	r23, 0xFF	; 255
    9a08:	8f 4f       	sbci	r24, 0xFF	; 255
    9a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    9a0c:	16 c0       	rjmp	.+44     	; 0x9a3a <__floatsisf+0x6c>
    9a0e:	88 23       	and	r24, r24
    9a10:	11 f0       	breq	.+4      	; 0x9a16 <__floatsisf+0x48>
    9a12:	96 e9       	ldi	r25, 0x96	; 150
    9a14:	11 c0       	rjmp	.+34     	; 0x9a38 <__floatsisf+0x6a>
    9a16:	77 23       	and	r23, r23
    9a18:	21 f0       	breq	.+8      	; 0x9a22 <__floatsisf+0x54>
    9a1a:	9e e8       	ldi	r25, 0x8E	; 142
    9a1c:	87 2f       	mov	r24, r23
    9a1e:	76 2f       	mov	r23, r22
    9a20:	05 c0       	rjmp	.+10     	; 0x9a2c <__floatsisf+0x5e>
    9a22:	66 23       	and	r22, r22
    9a24:	71 f0       	breq	.+28     	; 0x9a42 <__floatsisf+0x74>
    9a26:	96 e8       	ldi	r25, 0x86	; 134
    9a28:	86 2f       	mov	r24, r22
    9a2a:	70 e0       	ldi	r23, 0x00	; 0
    9a2c:	60 e0       	ldi	r22, 0x00	; 0
    9a2e:	2a f0       	brmi	.+10     	; 0x9a3a <__floatsisf+0x6c>
    9a30:	9a 95       	dec	r25
    9a32:	66 0f       	add	r22, r22
    9a34:	77 1f       	adc	r23, r23
    9a36:	88 1f       	adc	r24, r24
    9a38:	da f7       	brpl	.-10     	; 0x9a30 <__floatsisf+0x62>
    9a3a:	88 0f       	add	r24, r24
    9a3c:	96 95       	lsr	r25
    9a3e:	87 95       	ror	r24
    9a40:	97 f9       	bld	r25, 7
    9a42:	08 95       	ret

00009a44 <__fp_cmp>:
    9a44:	99 0f       	add	r25, r25
    9a46:	00 08       	sbc	r0, r0
    9a48:	55 0f       	add	r21, r21
    9a4a:	aa 0b       	sbc	r26, r26
    9a4c:	e0 e8       	ldi	r30, 0x80	; 128
    9a4e:	fe ef       	ldi	r31, 0xFE	; 254
    9a50:	16 16       	cp	r1, r22
    9a52:	17 06       	cpc	r1, r23
    9a54:	e8 07       	cpc	r30, r24
    9a56:	f9 07       	cpc	r31, r25
    9a58:	c0 f0       	brcs	.+48     	; 0x9a8a <__fp_cmp+0x46>
    9a5a:	12 16       	cp	r1, r18
    9a5c:	13 06       	cpc	r1, r19
    9a5e:	e4 07       	cpc	r30, r20
    9a60:	f5 07       	cpc	r31, r21
    9a62:	98 f0       	brcs	.+38     	; 0x9a8a <__fp_cmp+0x46>
    9a64:	62 1b       	sub	r22, r18
    9a66:	73 0b       	sbc	r23, r19
    9a68:	84 0b       	sbc	r24, r20
    9a6a:	95 0b       	sbc	r25, r21
    9a6c:	39 f4       	brne	.+14     	; 0x9a7c <__fp_cmp+0x38>
    9a6e:	0a 26       	eor	r0, r26
    9a70:	61 f0       	breq	.+24     	; 0x9a8a <__fp_cmp+0x46>
    9a72:	23 2b       	or	r18, r19
    9a74:	24 2b       	or	r18, r20
    9a76:	25 2b       	or	r18, r21
    9a78:	21 f4       	brne	.+8      	; 0x9a82 <__fp_cmp+0x3e>
    9a7a:	08 95       	ret
    9a7c:	0a 26       	eor	r0, r26
    9a7e:	09 f4       	brne	.+2      	; 0x9a82 <__fp_cmp+0x3e>
    9a80:	a1 40       	sbci	r26, 0x01	; 1
    9a82:	a6 95       	lsr	r26
    9a84:	8f ef       	ldi	r24, 0xFF	; 255
    9a86:	81 1d       	adc	r24, r1
    9a88:	81 1d       	adc	r24, r1
    9a8a:	08 95       	ret

00009a8c <__fp_inf>:
    9a8c:	97 f9       	bld	r25, 7
    9a8e:	9f 67       	ori	r25, 0x7F	; 127
    9a90:	80 e8       	ldi	r24, 0x80	; 128
    9a92:	70 e0       	ldi	r23, 0x00	; 0
    9a94:	60 e0       	ldi	r22, 0x00	; 0
    9a96:	08 95       	ret

00009a98 <__fp_nan>:
    9a98:	9f ef       	ldi	r25, 0xFF	; 255
    9a9a:	80 ec       	ldi	r24, 0xC0	; 192
    9a9c:	08 95       	ret

00009a9e <__fp_pscA>:
    9a9e:	00 24       	eor	r0, r0
    9aa0:	0a 94       	dec	r0
    9aa2:	16 16       	cp	r1, r22
    9aa4:	17 06       	cpc	r1, r23
    9aa6:	18 06       	cpc	r1, r24
    9aa8:	09 06       	cpc	r0, r25
    9aaa:	08 95       	ret

00009aac <__fp_pscB>:
    9aac:	00 24       	eor	r0, r0
    9aae:	0a 94       	dec	r0
    9ab0:	12 16       	cp	r1, r18
    9ab2:	13 06       	cpc	r1, r19
    9ab4:	14 06       	cpc	r1, r20
    9ab6:	05 06       	cpc	r0, r21
    9ab8:	08 95       	ret

00009aba <__fp_round>:
    9aba:	09 2e       	mov	r0, r25
    9abc:	03 94       	inc	r0
    9abe:	00 0c       	add	r0, r0
    9ac0:	11 f4       	brne	.+4      	; 0x9ac6 <__fp_round+0xc>
    9ac2:	88 23       	and	r24, r24
    9ac4:	52 f0       	brmi	.+20     	; 0x9ada <__fp_round+0x20>
    9ac6:	bb 0f       	add	r27, r27
    9ac8:	40 f4       	brcc	.+16     	; 0x9ada <__fp_round+0x20>
    9aca:	bf 2b       	or	r27, r31
    9acc:	11 f4       	brne	.+4      	; 0x9ad2 <__fp_round+0x18>
    9ace:	60 ff       	sbrs	r22, 0
    9ad0:	04 c0       	rjmp	.+8      	; 0x9ada <__fp_round+0x20>
    9ad2:	6f 5f       	subi	r22, 0xFF	; 255
    9ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    9ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    9ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    9ada:	08 95       	ret

00009adc <__fp_split3>:
    9adc:	57 fd       	sbrc	r21, 7
    9ade:	90 58       	subi	r25, 0x80	; 128
    9ae0:	44 0f       	add	r20, r20
    9ae2:	55 1f       	adc	r21, r21
    9ae4:	59 f0       	breq	.+22     	; 0x9afc <__fp_splitA+0x10>
    9ae6:	5f 3f       	cpi	r21, 0xFF	; 255
    9ae8:	71 f0       	breq	.+28     	; 0x9b06 <__fp_splitA+0x1a>
    9aea:	47 95       	ror	r20

00009aec <__fp_splitA>:
    9aec:	88 0f       	add	r24, r24
    9aee:	97 fb       	bst	r25, 7
    9af0:	99 1f       	adc	r25, r25
    9af2:	61 f0       	breq	.+24     	; 0x9b0c <__fp_splitA+0x20>
    9af4:	9f 3f       	cpi	r25, 0xFF	; 255
    9af6:	79 f0       	breq	.+30     	; 0x9b16 <__fp_splitA+0x2a>
    9af8:	87 95       	ror	r24
    9afa:	08 95       	ret
    9afc:	12 16       	cp	r1, r18
    9afe:	13 06       	cpc	r1, r19
    9b00:	14 06       	cpc	r1, r20
    9b02:	55 1f       	adc	r21, r21
    9b04:	f2 cf       	rjmp	.-28     	; 0x9aea <__fp_split3+0xe>
    9b06:	46 95       	lsr	r20
    9b08:	f1 df       	rcall	.-30     	; 0x9aec <__fp_splitA>
    9b0a:	08 c0       	rjmp	.+16     	; 0x9b1c <__fp_splitA+0x30>
    9b0c:	16 16       	cp	r1, r22
    9b0e:	17 06       	cpc	r1, r23
    9b10:	18 06       	cpc	r1, r24
    9b12:	99 1f       	adc	r25, r25
    9b14:	f1 cf       	rjmp	.-30     	; 0x9af8 <__fp_splitA+0xc>
    9b16:	86 95       	lsr	r24
    9b18:	71 05       	cpc	r23, r1
    9b1a:	61 05       	cpc	r22, r1
    9b1c:	08 94       	sec
    9b1e:	08 95       	ret

00009b20 <__fp_zero>:
    9b20:	e8 94       	clt

00009b22 <__fp_szero>:
    9b22:	bb 27       	eor	r27, r27
    9b24:	66 27       	eor	r22, r22
    9b26:	77 27       	eor	r23, r23
    9b28:	cb 01       	movw	r24, r22
    9b2a:	97 f9       	bld	r25, 7
    9b2c:	08 95       	ret

00009b2e <__gesf2>:
    9b2e:	8a df       	rcall	.-236    	; 0x9a44 <__fp_cmp>
    9b30:	08 f4       	brcc	.+2      	; 0x9b34 <__gesf2+0x6>
    9b32:	8f ef       	ldi	r24, 0xFF	; 255
    9b34:	08 95       	ret

00009b36 <__mulsf3>:
    9b36:	0b d0       	rcall	.+22     	; 0x9b4e <__mulsf3x>
    9b38:	c0 cf       	rjmp	.-128    	; 0x9aba <__fp_round>
    9b3a:	b1 df       	rcall	.-158    	; 0x9a9e <__fp_pscA>
    9b3c:	28 f0       	brcs	.+10     	; 0x9b48 <__mulsf3+0x12>
    9b3e:	b6 df       	rcall	.-148    	; 0x9aac <__fp_pscB>
    9b40:	18 f0       	brcs	.+6      	; 0x9b48 <__mulsf3+0x12>
    9b42:	95 23       	and	r25, r21
    9b44:	09 f0       	breq	.+2      	; 0x9b48 <__mulsf3+0x12>
    9b46:	a2 cf       	rjmp	.-188    	; 0x9a8c <__fp_inf>
    9b48:	a7 cf       	rjmp	.-178    	; 0x9a98 <__fp_nan>
    9b4a:	11 24       	eor	r1, r1
    9b4c:	ea cf       	rjmp	.-44     	; 0x9b22 <__fp_szero>

00009b4e <__mulsf3x>:
    9b4e:	c6 df       	rcall	.-116    	; 0x9adc <__fp_split3>
    9b50:	a0 f3       	brcs	.-24     	; 0x9b3a <__mulsf3+0x4>

00009b52 <__mulsf3_pse>:
    9b52:	95 9f       	mul	r25, r21
    9b54:	d1 f3       	breq	.-12     	; 0x9b4a <__mulsf3+0x14>
    9b56:	95 0f       	add	r25, r21
    9b58:	50 e0       	ldi	r21, 0x00	; 0
    9b5a:	55 1f       	adc	r21, r21
    9b5c:	62 9f       	mul	r22, r18
    9b5e:	f0 01       	movw	r30, r0
    9b60:	72 9f       	mul	r23, r18
    9b62:	bb 27       	eor	r27, r27
    9b64:	f0 0d       	add	r31, r0
    9b66:	b1 1d       	adc	r27, r1
    9b68:	63 9f       	mul	r22, r19
    9b6a:	aa 27       	eor	r26, r26
    9b6c:	f0 0d       	add	r31, r0
    9b6e:	b1 1d       	adc	r27, r1
    9b70:	aa 1f       	adc	r26, r26
    9b72:	64 9f       	mul	r22, r20
    9b74:	66 27       	eor	r22, r22
    9b76:	b0 0d       	add	r27, r0
    9b78:	a1 1d       	adc	r26, r1
    9b7a:	66 1f       	adc	r22, r22
    9b7c:	82 9f       	mul	r24, r18
    9b7e:	22 27       	eor	r18, r18
    9b80:	b0 0d       	add	r27, r0
    9b82:	a1 1d       	adc	r26, r1
    9b84:	62 1f       	adc	r22, r18
    9b86:	73 9f       	mul	r23, r19
    9b88:	b0 0d       	add	r27, r0
    9b8a:	a1 1d       	adc	r26, r1
    9b8c:	62 1f       	adc	r22, r18
    9b8e:	83 9f       	mul	r24, r19
    9b90:	a0 0d       	add	r26, r0
    9b92:	61 1d       	adc	r22, r1
    9b94:	22 1f       	adc	r18, r18
    9b96:	74 9f       	mul	r23, r20
    9b98:	33 27       	eor	r19, r19
    9b9a:	a0 0d       	add	r26, r0
    9b9c:	61 1d       	adc	r22, r1
    9b9e:	23 1f       	adc	r18, r19
    9ba0:	84 9f       	mul	r24, r20
    9ba2:	60 0d       	add	r22, r0
    9ba4:	21 1d       	adc	r18, r1
    9ba6:	82 2f       	mov	r24, r18
    9ba8:	76 2f       	mov	r23, r22
    9baa:	6a 2f       	mov	r22, r26
    9bac:	11 24       	eor	r1, r1
    9bae:	9f 57       	subi	r25, 0x7F	; 127
    9bb0:	50 40       	sbci	r21, 0x00	; 0
    9bb2:	8a f0       	brmi	.+34     	; 0x9bd6 <__mulsf3_pse+0x84>
    9bb4:	e1 f0       	breq	.+56     	; 0x9bee <__mulsf3_pse+0x9c>
    9bb6:	88 23       	and	r24, r24
    9bb8:	4a f0       	brmi	.+18     	; 0x9bcc <__mulsf3_pse+0x7a>
    9bba:	ee 0f       	add	r30, r30
    9bbc:	ff 1f       	adc	r31, r31
    9bbe:	bb 1f       	adc	r27, r27
    9bc0:	66 1f       	adc	r22, r22
    9bc2:	77 1f       	adc	r23, r23
    9bc4:	88 1f       	adc	r24, r24
    9bc6:	91 50       	subi	r25, 0x01	; 1
    9bc8:	50 40       	sbci	r21, 0x00	; 0
    9bca:	a9 f7       	brne	.-22     	; 0x9bb6 <__mulsf3_pse+0x64>
    9bcc:	9e 3f       	cpi	r25, 0xFE	; 254
    9bce:	51 05       	cpc	r21, r1
    9bd0:	70 f0       	brcs	.+28     	; 0x9bee <__mulsf3_pse+0x9c>
    9bd2:	5c cf       	rjmp	.-328    	; 0x9a8c <__fp_inf>
    9bd4:	a6 cf       	rjmp	.-180    	; 0x9b22 <__fp_szero>
    9bd6:	5f 3f       	cpi	r21, 0xFF	; 255
    9bd8:	ec f3       	brlt	.-6      	; 0x9bd4 <__mulsf3_pse+0x82>
    9bda:	98 3e       	cpi	r25, 0xE8	; 232
    9bdc:	dc f3       	brlt	.-10     	; 0x9bd4 <__mulsf3_pse+0x82>
    9bde:	86 95       	lsr	r24
    9be0:	77 95       	ror	r23
    9be2:	67 95       	ror	r22
    9be4:	b7 95       	ror	r27
    9be6:	f7 95       	ror	r31
    9be8:	e7 95       	ror	r30
    9bea:	9f 5f       	subi	r25, 0xFF	; 255
    9bec:	c1 f7       	brne	.-16     	; 0x9bde <__mulsf3_pse+0x8c>
    9bee:	fe 2b       	or	r31, r30
    9bf0:	88 0f       	add	r24, r24
    9bf2:	91 1d       	adc	r25, r1
    9bf4:	96 95       	lsr	r25
    9bf6:	87 95       	ror	r24
    9bf8:	97 f9       	bld	r25, 7
    9bfa:	08 95       	ret

00009bfc <__udivmodhi4>:
    9bfc:	aa 1b       	sub	r26, r26
    9bfe:	bb 1b       	sub	r27, r27
    9c00:	51 e1       	ldi	r21, 0x11	; 17
    9c02:	07 c0       	rjmp	.+14     	; 0x9c12 <__udivmodhi4_ep>

00009c04 <__udivmodhi4_loop>:
    9c04:	aa 1f       	adc	r26, r26
    9c06:	bb 1f       	adc	r27, r27
    9c08:	a6 17       	cp	r26, r22
    9c0a:	b7 07       	cpc	r27, r23
    9c0c:	10 f0       	brcs	.+4      	; 0x9c12 <__udivmodhi4_ep>
    9c0e:	a6 1b       	sub	r26, r22
    9c10:	b7 0b       	sbc	r27, r23

00009c12 <__udivmodhi4_ep>:
    9c12:	88 1f       	adc	r24, r24
    9c14:	99 1f       	adc	r25, r25
    9c16:	5a 95       	dec	r21
    9c18:	a9 f7       	brne	.-22     	; 0x9c04 <__udivmodhi4_loop>
    9c1a:	80 95       	com	r24
    9c1c:	90 95       	com	r25
    9c1e:	bc 01       	movw	r22, r24
    9c20:	cd 01       	movw	r24, r26
    9c22:	08 95       	ret

00009c24 <__divmodhi4>:
    9c24:	97 fb       	bst	r25, 7
    9c26:	07 2e       	mov	r0, r23
    9c28:	16 f4       	brtc	.+4      	; 0x9c2e <__divmodhi4+0xa>
    9c2a:	00 94       	com	r0
    9c2c:	07 d0       	rcall	.+14     	; 0x9c3c <__divmodhi4_neg1>
    9c2e:	77 fd       	sbrc	r23, 7
    9c30:	09 d0       	rcall	.+18     	; 0x9c44 <__divmodhi4_neg2>
    9c32:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <__udivmodhi4>
    9c36:	07 fc       	sbrc	r0, 7
    9c38:	05 d0       	rcall	.+10     	; 0x9c44 <__divmodhi4_neg2>
    9c3a:	3e f4       	brtc	.+14     	; 0x9c4a <__divmodhi4_exit>

00009c3c <__divmodhi4_neg1>:
    9c3c:	90 95       	com	r25
    9c3e:	81 95       	neg	r24
    9c40:	9f 4f       	sbci	r25, 0xFF	; 255
    9c42:	08 95       	ret

00009c44 <__divmodhi4_neg2>:
    9c44:	70 95       	com	r23
    9c46:	61 95       	neg	r22
    9c48:	7f 4f       	sbci	r23, 0xFF	; 255

00009c4a <__divmodhi4_exit>:
    9c4a:	08 95       	ret

00009c4c <__udivmodsi4>:
    9c4c:	a1 e2       	ldi	r26, 0x21	; 33
    9c4e:	1a 2e       	mov	r1, r26
    9c50:	aa 1b       	sub	r26, r26
    9c52:	bb 1b       	sub	r27, r27
    9c54:	fd 01       	movw	r30, r26
    9c56:	0d c0       	rjmp	.+26     	; 0x9c72 <__udivmodsi4_ep>

00009c58 <__udivmodsi4_loop>:
    9c58:	aa 1f       	adc	r26, r26
    9c5a:	bb 1f       	adc	r27, r27
    9c5c:	ee 1f       	adc	r30, r30
    9c5e:	ff 1f       	adc	r31, r31
    9c60:	a2 17       	cp	r26, r18
    9c62:	b3 07       	cpc	r27, r19
    9c64:	e4 07       	cpc	r30, r20
    9c66:	f5 07       	cpc	r31, r21
    9c68:	20 f0       	brcs	.+8      	; 0x9c72 <__udivmodsi4_ep>
    9c6a:	a2 1b       	sub	r26, r18
    9c6c:	b3 0b       	sbc	r27, r19
    9c6e:	e4 0b       	sbc	r30, r20
    9c70:	f5 0b       	sbc	r31, r21

00009c72 <__udivmodsi4_ep>:
    9c72:	66 1f       	adc	r22, r22
    9c74:	77 1f       	adc	r23, r23
    9c76:	88 1f       	adc	r24, r24
    9c78:	99 1f       	adc	r25, r25
    9c7a:	1a 94       	dec	r1
    9c7c:	69 f7       	brne	.-38     	; 0x9c58 <__udivmodsi4_loop>
    9c7e:	60 95       	com	r22
    9c80:	70 95       	com	r23
    9c82:	80 95       	com	r24
    9c84:	90 95       	com	r25
    9c86:	9b 01       	movw	r18, r22
    9c88:	ac 01       	movw	r20, r24
    9c8a:	bd 01       	movw	r22, r26
    9c8c:	cf 01       	movw	r24, r30
    9c8e:	08 95       	ret

00009c90 <__divmodsi4>:
    9c90:	05 2e       	mov	r0, r21
    9c92:	97 fb       	bst	r25, 7
    9c94:	1e f4       	brtc	.+6      	; 0x9c9c <__divmodsi4+0xc>
    9c96:	00 94       	com	r0
    9c98:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <__negsi2>
    9c9c:	57 fd       	sbrc	r21, 7
    9c9e:	07 d0       	rcall	.+14     	; 0x9cae <__divmodsi4_neg2>
    9ca0:	0e 94 26 4e 	call	0x9c4c	; 0x9c4c <__udivmodsi4>
    9ca4:	07 fc       	sbrc	r0, 7
    9ca6:	03 d0       	rcall	.+6      	; 0x9cae <__divmodsi4_neg2>
    9ca8:	4e f4       	brtc	.+18     	; 0x9cbc <__divmodsi4_exit>
    9caa:	0c 94 5f 4e 	jmp	0x9cbe	; 0x9cbe <__negsi2>

00009cae <__divmodsi4_neg2>:
    9cae:	50 95       	com	r21
    9cb0:	40 95       	com	r20
    9cb2:	30 95       	com	r19
    9cb4:	21 95       	neg	r18
    9cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    9cb8:	4f 4f       	sbci	r20, 0xFF	; 255
    9cba:	5f 4f       	sbci	r21, 0xFF	; 255

00009cbc <__divmodsi4_exit>:
    9cbc:	08 95       	ret

00009cbe <__negsi2>:
    9cbe:	90 95       	com	r25
    9cc0:	80 95       	com	r24
    9cc2:	70 95       	com	r23
    9cc4:	61 95       	neg	r22
    9cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    9cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    9cca:	9f 4f       	sbci	r25, 0xFF	; 255
    9ccc:	08 95       	ret

00009cce <__tablejump2__>:
    9cce:	ee 0f       	add	r30, r30
    9cd0:	ff 1f       	adc	r31, r31

00009cd2 <__tablejump__>:
    9cd2:	05 90       	lpm	r0, Z+
    9cd4:	f4 91       	lpm	r31, Z
    9cd6:	e0 2d       	mov	r30, r0
    9cd8:	09 94       	ijmp

00009cda <__mulhisi3>:
    9cda:	0e 94 75 4e 	call	0x9cea	; 0x9cea <__umulhisi3>
    9cde:	33 23       	and	r19, r19
    9ce0:	12 f4       	brpl	.+4      	; 0x9ce6 <__mulhisi3+0xc>
    9ce2:	8a 1b       	sub	r24, r26
    9ce4:	9b 0b       	sbc	r25, r27
    9ce6:	0c 94 86 4e 	jmp	0x9d0c	; 0x9d0c <__usmulhisi3_tail>

00009cea <__umulhisi3>:
    9cea:	a2 9f       	mul	r26, r18
    9cec:	b0 01       	movw	r22, r0
    9cee:	b3 9f       	mul	r27, r19
    9cf0:	c0 01       	movw	r24, r0
    9cf2:	a3 9f       	mul	r26, r19
    9cf4:	70 0d       	add	r23, r0
    9cf6:	81 1d       	adc	r24, r1
    9cf8:	11 24       	eor	r1, r1
    9cfa:	91 1d       	adc	r25, r1
    9cfc:	b2 9f       	mul	r27, r18
    9cfe:	70 0d       	add	r23, r0
    9d00:	81 1d       	adc	r24, r1
    9d02:	11 24       	eor	r1, r1
    9d04:	91 1d       	adc	r25, r1
    9d06:	08 95       	ret

00009d08 <__usmulhisi3>:
    9d08:	0e 94 75 4e 	call	0x9cea	; 0x9cea <__umulhisi3>

00009d0c <__usmulhisi3_tail>:
    9d0c:	b7 ff       	sbrs	r27, 7
    9d0e:	08 95       	ret
    9d10:	82 1b       	sub	r24, r18
    9d12:	93 0b       	sbc	r25, r19
    9d14:	08 95       	ret

00009d16 <__muluhisi3>:
    9d16:	0e 94 75 4e 	call	0x9cea	; 0x9cea <__umulhisi3>
    9d1a:	a5 9f       	mul	r26, r21
    9d1c:	90 0d       	add	r25, r0
    9d1e:	b4 9f       	mul	r27, r20
    9d20:	90 0d       	add	r25, r0
    9d22:	a4 9f       	mul	r26, r20
    9d24:	80 0d       	add	r24, r0
    9d26:	91 1d       	adc	r25, r1
    9d28:	11 24       	eor	r1, r1
    9d2a:	08 95       	ret

00009d2c <__mulshisi3>:
    9d2c:	b7 ff       	sbrs	r27, 7
    9d2e:	0c 94 8b 4e 	jmp	0x9d16	; 0x9d16 <__muluhisi3>

00009d32 <__mulohisi3>:
    9d32:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <__muluhisi3>
    9d36:	82 1b       	sub	r24, r18
    9d38:	93 0b       	sbc	r25, r19
    9d3a:	08 95       	ret

00009d3c <memcpy_P>:
    9d3c:	fb 01       	movw	r30, r22
    9d3e:	dc 01       	movw	r26, r24
    9d40:	02 c0       	rjmp	.+4      	; 0x9d46 <memcpy_P+0xa>
    9d42:	05 90       	lpm	r0, Z+
    9d44:	0d 92       	st	X+, r0
    9d46:	41 50       	subi	r20, 0x01	; 1
    9d48:	50 40       	sbci	r21, 0x00	; 0
    9d4a:	d8 f7       	brcc	.-10     	; 0x9d42 <memcpy_P+0x6>
    9d4c:	08 95       	ret

00009d4e <memmove>:
    9d4e:	68 17       	cp	r22, r24
    9d50:	79 07       	cpc	r23, r25
    9d52:	68 f4       	brcc	.+26     	; 0x9d6e <memmove+0x20>
    9d54:	fb 01       	movw	r30, r22
    9d56:	dc 01       	movw	r26, r24
    9d58:	e4 0f       	add	r30, r20
    9d5a:	f5 1f       	adc	r31, r21
    9d5c:	a4 0f       	add	r26, r20
    9d5e:	b5 1f       	adc	r27, r21
    9d60:	02 c0       	rjmp	.+4      	; 0x9d66 <memmove+0x18>
    9d62:	02 90       	ld	r0, -Z
    9d64:	0e 92       	st	-X, r0
    9d66:	41 50       	subi	r20, 0x01	; 1
    9d68:	50 40       	sbci	r21, 0x00	; 0
    9d6a:	d8 f7       	brcc	.-10     	; 0x9d62 <memmove+0x14>
    9d6c:	08 95       	ret
    9d6e:	0c 94 04 4f 	jmp	0x9e08	; 0x9e08 <memcpy>

00009d72 <__itoa_ncheck>:
    9d72:	bb 27       	eor	r27, r27
    9d74:	4a 30       	cpi	r20, 0x0A	; 10
    9d76:	31 f4       	brne	.+12     	; 0x9d84 <__itoa_ncheck+0x12>
    9d78:	99 23       	and	r25, r25
    9d7a:	22 f4       	brpl	.+8      	; 0x9d84 <__itoa_ncheck+0x12>
    9d7c:	bd e2       	ldi	r27, 0x2D	; 45
    9d7e:	90 95       	com	r25
    9d80:	81 95       	neg	r24
    9d82:	9f 4f       	sbci	r25, 0xFF	; 255
    9d84:	0c 94 c5 4e 	jmp	0x9d8a	; 0x9d8a <__utoa_common>

00009d88 <__utoa_ncheck>:
    9d88:	bb 27       	eor	r27, r27

00009d8a <__utoa_common>:
    9d8a:	fb 01       	movw	r30, r22
    9d8c:	55 27       	eor	r21, r21
    9d8e:	aa 27       	eor	r26, r26
    9d90:	88 0f       	add	r24, r24
    9d92:	99 1f       	adc	r25, r25
    9d94:	aa 1f       	adc	r26, r26
    9d96:	a4 17       	cp	r26, r20
    9d98:	10 f0       	brcs	.+4      	; 0x9d9e <__utoa_common+0x14>
    9d9a:	a4 1b       	sub	r26, r20
    9d9c:	83 95       	inc	r24
    9d9e:	50 51       	subi	r21, 0x10	; 16
    9da0:	b9 f7       	brne	.-18     	; 0x9d90 <__utoa_common+0x6>
    9da2:	a0 5d       	subi	r26, 0xD0	; 208
    9da4:	aa 33       	cpi	r26, 0x3A	; 58
    9da6:	08 f0       	brcs	.+2      	; 0x9daa <__utoa_common+0x20>
    9da8:	a9 5d       	subi	r26, 0xD9	; 217
    9daa:	a1 93       	st	Z+, r26
    9dac:	00 97       	sbiw	r24, 0x00	; 0
    9dae:	79 f7       	brne	.-34     	; 0x9d8e <__utoa_common+0x4>
    9db0:	b1 11       	cpse	r27, r1
    9db2:	b1 93       	st	Z+, r27
    9db4:	11 92       	st	Z+, r1
    9db6:	cb 01       	movw	r24, r22
    9db8:	0c 94 0d 4f 	jmp	0x9e1a	; 0x9e1a <strrev>

00009dbc <__eerd_block_m644pa>:
    9dbc:	dc 01       	movw	r26, r24
    9dbe:	cb 01       	movw	r24, r22

00009dc0 <__eerd_blraw_m644pa>:
    9dc0:	fc 01       	movw	r30, r24
    9dc2:	f9 99       	sbic	0x1f, 1	; 31
    9dc4:	fe cf       	rjmp	.-4      	; 0x9dc2 <__eerd_blraw_m644pa+0x2>
    9dc6:	06 c0       	rjmp	.+12     	; 0x9dd4 <__eerd_blraw_m644pa+0x14>
    9dc8:	f2 bd       	out	0x22, r31	; 34
    9dca:	e1 bd       	out	0x21, r30	; 33
    9dcc:	f8 9a       	sbi	0x1f, 0	; 31
    9dce:	31 96       	adiw	r30, 0x01	; 1
    9dd0:	00 b4       	in	r0, 0x20	; 32
    9dd2:	0d 92       	st	X+, r0
    9dd4:	41 50       	subi	r20, 0x01	; 1
    9dd6:	50 40       	sbci	r21, 0x00	; 0
    9dd8:	b8 f7       	brcc	.-18     	; 0x9dc8 <__eerd_blraw_m644pa+0x8>
    9dda:	08 95       	ret

00009ddc <__eerd_byte_m644pa>:
    9ddc:	f9 99       	sbic	0x1f, 1	; 31
    9dde:	fe cf       	rjmp	.-4      	; 0x9ddc <__eerd_byte_m644pa>
    9de0:	92 bd       	out	0x22, r25	; 34
    9de2:	81 bd       	out	0x21, r24	; 33
    9de4:	f8 9a       	sbi	0x1f, 0	; 31
    9de6:	99 27       	eor	r25, r25
    9de8:	80 b5       	in	r24, 0x20	; 32
    9dea:	08 95       	ret

00009dec <__eewr_byte_m644pa>:
    9dec:	26 2f       	mov	r18, r22

00009dee <__eewr_r18_m644pa>:
    9dee:	f9 99       	sbic	0x1f, 1	; 31
    9df0:	fe cf       	rjmp	.-4      	; 0x9dee <__eewr_r18_m644pa>
    9df2:	1f ba       	out	0x1f, r1	; 31
    9df4:	92 bd       	out	0x22, r25	; 34
    9df6:	81 bd       	out	0x21, r24	; 33
    9df8:	20 bd       	out	0x20, r18	; 32
    9dfa:	0f b6       	in	r0, 0x3f	; 63
    9dfc:	f8 94       	cli
    9dfe:	fa 9a       	sbi	0x1f, 2	; 31
    9e00:	f9 9a       	sbi	0x1f, 1	; 31
    9e02:	0f be       	out	0x3f, r0	; 63
    9e04:	01 96       	adiw	r24, 0x01	; 1
    9e06:	08 95       	ret

00009e08 <memcpy>:
    9e08:	fb 01       	movw	r30, r22
    9e0a:	dc 01       	movw	r26, r24
    9e0c:	02 c0       	rjmp	.+4      	; 0x9e12 <memcpy+0xa>
    9e0e:	01 90       	ld	r0, Z+
    9e10:	0d 92       	st	X+, r0
    9e12:	41 50       	subi	r20, 0x01	; 1
    9e14:	50 40       	sbci	r21, 0x00	; 0
    9e16:	d8 f7       	brcc	.-10     	; 0x9e0e <memcpy+0x6>
    9e18:	08 95       	ret

00009e1a <strrev>:
    9e1a:	dc 01       	movw	r26, r24
    9e1c:	fc 01       	movw	r30, r24
    9e1e:	67 2f       	mov	r22, r23
    9e20:	71 91       	ld	r23, Z+
    9e22:	77 23       	and	r23, r23
    9e24:	e1 f7       	brne	.-8      	; 0x9e1e <strrev+0x4>
    9e26:	32 97       	sbiw	r30, 0x02	; 2
    9e28:	04 c0       	rjmp	.+8      	; 0x9e32 <strrev+0x18>
    9e2a:	7c 91       	ld	r23, X
    9e2c:	6d 93       	st	X+, r22
    9e2e:	70 83       	st	Z, r23
    9e30:	62 91       	ld	r22, -Z
    9e32:	ae 17       	cp	r26, r30
    9e34:	bf 07       	cpc	r27, r31
    9e36:	c8 f3       	brcs	.-14     	; 0x9e2a <strrev+0x10>
    9e38:	08 95       	ret

00009e3a <_exit>:
    9e3a:	f8 94       	cli

00009e3c <__stop_program>:
    9e3c:	ff cf       	rjmp	.-2      	; 0x9e3c <__stop_program>
