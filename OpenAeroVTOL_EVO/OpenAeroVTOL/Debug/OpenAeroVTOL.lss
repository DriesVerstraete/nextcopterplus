
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000416  00800100  0000a060  0000a0f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000395  00800516  00800516  0000a50a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000a50a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006b0  00000000  00000000  0000a540  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00015b44  00000000  00000000  0000abf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000398f  00000000  00000000  00020734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004449  00000000  00000000  000240c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001530  00000000  00000000  0002850c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002a9b  00000000  00000000  00029a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000097ba  00000000  00000000  0002c4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000588  00000000  00000000  00035c91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__ctors_end>
       4:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__vector_1>
       8:	0c 94 46 2f 	jmp	0x5e8c	; 0x5e8c <__vector_2>
       c:	0c 94 31 30 	jmp	0x6062	; 0x6062 <__vector_3>
      10:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      14:	0c 94 f0 2f 	jmp	0x5fe0	; 0x5fe0 <__vector_5>
      18:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      1c:	0c 94 b7 2f 	jmp	0x5f6e	; 0x5f6e <__vector_7>
      20:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      24:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      28:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      2c:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      30:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      34:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      38:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      3c:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      40:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      44:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      48:	0c 94 2f 2f 	jmp	0x5e5e	; 0x5e5e <__vector_18>
      4c:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      50:	0c 94 ed 30 	jmp	0x61da	; 0x61da <__vector_20>
      54:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      58:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      5c:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      60:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      64:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      68:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      6c:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      70:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      74:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      78:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__bad_interrupt>
      7c:	73 1e       	adc	r7, r19
      7e:	dc 1e       	adc	r13, r28
      80:	dc 1e       	adc	r13, r28
      82:	84 1e       	adc	r8, r20
      84:	91 1e       	adc	r9, r17
      86:	9b 1e       	adc	r9, r27
      88:	97 1e       	adc	r9, r23
      8a:	a7 1e       	adc	r10, r23
      8c:	b3 1e       	adc	r11, r19
      8e:	b7 1e       	adc	r11, r23
      90:	c3 1e       	adc	r12, r19
      92:	68 38       	cpi	r22, 0x88	; 136
      94:	6a 38       	cpi	r22, 0x8A	; 138
      96:	6d 38       	cpi	r22, 0x8D	; 141
      98:	6f 38       	cpi	r22, 0x8F	; 143
      9a:	71 38       	cpi	r23, 0x81	; 129
      9c:	73 38       	cpi	r23, 0x83	; 131
      9e:	75 38       	cpi	r23, 0x85	; 133
      a0:	77 38       	cpi	r23, 0x87	; 135
      a2:	7a 38       	cpi	r23, 0x8A	; 138
      a4:	7c 38       	cpi	r23, 0x8C	; 140
      a6:	7f 38       	cpi	r23, 0x8F	; 143
      a8:	81 38       	cpi	r24, 0x81	; 129
      aa:	83 38       	cpi	r24, 0x83	; 131
      ac:	85 38       	cpi	r24, 0x85	; 133
      ae:	87 38       	cpi	r24, 0x87	; 135
      b0:	89 38       	cpi	r24, 0x89	; 137
      b2:	8b 38       	cpi	r24, 0x8B	; 139
      b4:	8d 38       	cpi	r24, 0x8D	; 141
      b6:	8f 38       	cpi	r24, 0x8F	; 143
      b8:	92 38       	cpi	r25, 0x82	; 130
      ba:	7d 3c       	cpi	r23, 0xCD	; 205
      bc:	61 3c       	cpi	r22, 0xC1	; 193
      be:	64 3c       	cpi	r22, 0xC4	; 196
      c0:	67 3c       	cpi	r22, 0xC7	; 199
      c2:	6a 3c       	cpi	r22, 0xCA	; 202
      c4:	6d 3c       	cpi	r22, 0xCD	; 205
      c6:	70 3c       	cpi	r23, 0xC0	; 192
      c8:	73 3c       	cpi	r23, 0xC3	; 195
      ca:	76 3c       	cpi	r23, 0xC6	; 198

000000cc <Acc_Pol>:
      cc:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      dc:	ff ff                                               ..

000000de <ACC_RPY_Order>:
      de:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      ee:	02 01                                               ..

000000f0 <FUTABA>:
      f0:	01 02 00 03 04 05 06 07                             ........

000000f8 <JR>:
      f8:	00 01 02 03 04 05 06 07                             ........

00000100 <Trans_Matrix>:
     100:	05 02 06 01 05 08 03 07 05                          .........

00000109 <Wingdings>:
     109:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     119:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     129:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     139:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     149:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     159:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     169:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000173 <Verdana14>:
     173:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     183:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     193:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     1a3:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     1b3:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1c3:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1d3:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1e3:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1f3:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     203:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     213:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     223:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     233:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     243:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     253:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     263:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     273:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     283:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     293:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     2a3:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     2b3:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2c3:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2d3:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2e3:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2f3:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     303:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     313:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     323:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     333:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     343:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     353:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     363:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     373:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     383:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     393:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     3a3:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     3b3:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3c3:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3d3:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3e3:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3f3:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     403:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     413:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     423:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     433:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     443:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     453:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     463:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     473:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     483:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     493:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     4a3:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     4b3:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4c3:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4d3:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4e3:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4f3:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     503:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     513:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     523:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     533:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     543:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     553:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     563:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     573:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     583:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     593:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     5a3:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     5b3:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5c3:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5d3:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5e3:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5f3:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     603:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     613:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     623:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     633:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     643:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     653:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     663:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     673:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     683:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     693:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     6a3:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     6b3:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6c3:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6d3:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6e3:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6f3:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     703:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     713:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     723:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     733:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     743:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     753:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     763:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     773:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     783:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     793:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     7a3:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     7b3:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7c3:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7d3:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7e3:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7f3:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     803:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     813:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     823:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     833:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     843:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     853:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     863:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     873:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     883:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     893:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     8a3:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     8b3:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8c3:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8d3:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8e3:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8f3:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     903:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     913:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     923:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     933:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     943:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     953:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     963:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     973:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     983:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     993:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     9a3:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     9b3:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9c3:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9d3:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9e3:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9f3:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     a03:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     a13:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a21 <Verdana8>:
     a21:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a31:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a41:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a51:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a61:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a71:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a81:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a91:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     aa1:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     ab1:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     ac1:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     ad1:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     ae1:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     af1:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     b01:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     b11:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b21:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b31:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b41:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b51:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b61:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b71:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b81:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b91:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     ba1:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     bb1:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bc1:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bd1:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     be1:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bf1:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     c01:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     c11:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c21:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c31:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c41:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c51:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c61:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c71:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c81:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c91:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     ca1:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     cb1:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cc1:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     cd1:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     ce1:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cf1:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     d01:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     d11:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d21:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d31:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d41:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d51:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d61:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d71:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d81:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d91:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     da1:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     db1:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dc1:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dd1:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     de1:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     df1:	01                                                  .

00000df2 <lcd_commmands>:
     df2:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000e00 <pagemap>:
     e00:	07 06 05 04 03 02 01 00                             ........

00000e08 <text_menu>:
     e08:	12 16 0a 11 05 11 00 11 fb 10 f6 10 f1 10 ec 10     ................
     e18:	e7 10 7f 18 77 18 7d 18 7b 18 79 18 72 18 6d 18     ....w.}.{.y.r.m.
     e28:	68 18 63 18 85 12 a5 12 a0 12 9a 12 d7 15 89 18     h.c.............
     e38:	81 18 e1 16 fe 16 f9 16 f3 16 ef 16 eb 16 0f 11     ................
     e48:	eb 12 e2 12 f3 12 db 12 d6 12 30 11 2b 11 26 11     ..........0.+.&.
     e58:	21 11 1c 11 16 11 10 11 c2 12 0f 11 1f 13 17 13     !...............
     e68:	2e 15 29 15 26 15 1c 15 12 15 72 11 6a 11 65 11     ..).&.....r.j.e.
     e78:	0a 13 05 13 fc 12 5b 12 e6 16 4f 12 c6 15 c2 15     ......[...O.....
     e88:	bc 15 b3 15 ac 15 0f 11 12 16 0f 16 8a 11 91 11     ................
     e98:	80 11 0f 11 0f 11 b2 12 ab 12 52 18 40 18 2d 18     ..........R.@.-.
     ea8:	1b 18 05 18 f6 17 e2 17 ce 17 c0 17 b1 17 a2 17     ................
     eb8:	93 17 84 17 75 17 66 17 57 17 43 17 2a 17 11 17     ....u.f.W.C.*...
     ec8:	03 17 0f 11 30 11 2b 11 41 11 46 11 4b 11 50 11     ....0.+.A.F.K.P.
     ed8:	c2 12 f3 12 eb 12 e2 12 db 12 d6 12 d1 12 cc 12     ................
     ee8:	c7 12 c2 12 bb 12 b5 12 a3 15 9c 15 8e 12 78 11     ..............x.
     ef8:	65 11 17 12 0b 12 0f 11 c8 11 bf 11 b6 11 b2 11     e...............
     f08:	a9 11 a1 11 0f 11 0f 11 0f 11 8e 18 92 12 30 12     ..............0.
     f18:	22 12 1d 12 03 12 f8 11 0f 11 9a 11 91 11 0f 11     "...............
     f28:	0f 11 0f 11 f9 16 f3 16 ef 16 06 16 66 15 fc 15     ............f...
     f38:	f1 15 e2 15 d7 15 cb 15 59 10 50 10 8f 15 85 15     ........Y.P.....
     f48:	7d 15 70 15 39 15 34 11 5c 15 52 15 46 15 31 15     }.p.9.4.\.R.F.1.
     f58:	0f 11 0f 11 cd 16 c5 16 b7 16 aa 16 9c 16 91 16     ................
     f68:	88 16 7f 16 70 16 62 16 53 16 47 16 40 16 39 16     ....p.b.S.G.@.9.
     f78:	2c 16 20 16 16 16 d5 16 0f 11 0f 11 0a 15 ff 14     ,. .............
     f88:	ee 14 e1 14 d6 14 c6 14 b6 14 a7 14 97 14 87 14     ................
     f98:	77 14 67 14 57 14 47 14 39 14 2b 14 1c 14 0d 14     w.g.W.G.9.+.....
     fa8:	00 14 f3 13 e7 13 db 13 cf 13 c2 13 b8 13 ae 13     ................
     fb8:	a1 13 96 13 89 13 7e 13 71 13 96 13 64 13 7e 13     ......~.q...d.~.
     fc8:	0f 11 0f 11 1f 13 17 13 11 13 0f 11 f3 11 ee 11     ................
     fd8:	e9 11 e4 11 df 11 da 11 d5 11 d0 11 f3 12 eb 12     ................
     fe8:	e2 12 db 12 d6 12 d1 12 cc 12 c7 12 5b 13 51 13     ............[.Q.
     ff8:	49 13 41 13 38 13 30 13 27 13 c2 12 1f 13 17 13     I.A.8.0.'.......
    1008:	11 13 0f 11 0f 11 46 12 3d 12 7b 12 75 12 69 12     ......F.=.{.u.i.
    1018:	aa 18 a4 18 06 16 9b 18 99 18 97 18 60 11 5c 11     ............`.\.
    1028:	55 11 da 10 d3 10 c9 10 e1 10 c1 10 0f 11 0f 11     U...............
    1038:	5d 18 a7 10 9a 10 0f 11 93 10 85 10 74 10 67 10     ]...........t.g.
    1048:	0f 11 0f 11 0f 11 61 10                             ......a.

00001050 <Debug_2>:
    1050:	50 69 74 63 68 20 44 3a 00                          Pitch D:.

00001059 <Debug_1>:
    1059:	52 6f 6c 6c 20 44 3a 00                             Roll D:.

00001061 <ERROR_MSG_0>:
    1061:	43 6c 65 61 72 00                                   Clear.

00001067 <ERROR_3>:
    1067:	44 69 73 61 72 6d 20 74 69 6d 65 72 00              Disarm timer.

00001074 <ERROR_2>:
    1074:	4e 6f 20 73 69 67 6e 61 6c 20 64 69 73 61 72 6d     No signal disarm
	...

00001085 <ERROR_1>:
    1085:	4d 61 6e 75 61 6c 20 64 69 73 61 72 6d 00           Manual disarm.

00001093 <ERROR_0>:
    1093:	52 65 62 6f 6f 74 00                                Reboot.

0000109a <WARNING_1>:
    109a:	52 45 4d 4f 56 45 20 50 52 4f 50 53 00              REMOVE PROPS.

000010a7 <WARNING_0>:
    10a7:	57 41 52 4e 49 4e 47 20 2d 20 45 72 61 73 65 73     WARNING - Erases
    10b7:	20 73 65 74 74 69 6e 67 73 00                        settings.

000010c1 <PRESET_4>:
    10c1:	4f 70 74 69 6f 6e 73 00                             Options.

000010c9 <PRESET_3>:
    10c9:	54 72 69 63 6f 70 74 65 72 00                       Tricopter.

000010d3 <PRESET_2>:
    10d3:	51 75 61 64 20 50 00                                Quad P.

000010da <PRESET_1>:
    10da:	51 75 61 64 20 58 00                                Quad X.

000010e1 <PRESET_0>:
    10e1:	42 6c 61 6e 6b 00                                   Blank.

000010e7 <VBAT39>:
    10e7:	33 2e 39 56 00                                      3.9V.

000010ec <VBAT38>:
    10ec:	33 2e 38 56 00                                      3.8V.

000010f1 <VBAT37>:
    10f1:	33 2e 37 56 00                                      3.7V.

000010f6 <VBAT36>:
    10f6:	33 2e 36 56 00                                      3.6V.

000010fb <VBAT35>:
    10fb:	33 2e 35 56 00                                      3.5V.

00001100 <VBAT34>:
    1100:	33 2e 34 56 00                                      3.4V.

00001105 <VBAT33>:
    1105:	33 2e 33 56 00                                      3.3V.

0000110a <VBAT32>:
    110a:	33 2e 32 56 00                                      3.2V.

0000110f <Dummy0>:
	...

00001110 <MPU6050LPF7>:
    1110:	32 36 30 48 7a 00                                   260Hz.

00001116 <MPU6050LPF6>:
    1116:	31 38 34 48 7a 00                                   184Hz.

0000111c <MPU6050LPF5>:
    111c:	39 34 48 7a 00                                      94Hz.

00001121 <MPU6050LPF4>:
    1121:	34 34 48 7a 00                                      44Hz.

00001126 <MPU6050LPF3>:
    1126:	32 31 48 7a 00                                      21Hz.

0000112b <MPU6050LPF2>:
    112b:	31 30 48 7a 00                                      10Hz.

00001130 <MPU6050LPF1>:
    1130:	35 48 7a 00                                         5Hz.

00001134 <GeneralText10>:
    1134:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001141 <SWLPF4>:
    1141:	31 37 48 7a 00                                      17Hz.

00001146 <SWLPF3>:
    1146:	32 37 48 7a 00                                      27Hz.

0000114b <SWLPF2>:
    114b:	33 38 48 7a 00                                      38Hz.

00001150 <SWLPF1>:
    1150:	36 37 48 7a 00                                      67Hz.

00001155 <Random12>:
    1155:	73 69 67 6e 61 6c 00                                signal.

0000115c <Random11>:
    115c:	6c 6f 77 00                                         low.

00001160 <Random10>:
    1160:	68 69 67 68 00                                      high.

00001165 <Random1>:
    1165:	48 69 67 68 00                                      High.

0000116a <Safety2>:
    116a:	41 72 6d 61 62 6c 65 00                             Armable.

00001172 <Safety1>:
    1172:	41 72 6d 65 64 00                                   Armed.

00001178 <GeneralText5>:
    1178:	53 79 6e 63 20 52 43 00                             Sync RC.

00001180 <MixerItem16>:
    1180:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

0000118a <MixerItem15>:
    118a:	53 63 61 6c 65 64 00                                Scaled.

00001191 <MixerItem12>:
    1191:	52 65 76 65 72 73 65 64 00                          Reversed.

0000119a <MixerItem11>:
    119a:	4e 6f 72 6d 61 6c 00                                Normal.

000011a1 <MixerMenuItem7>:
    11a1:	50 69 74 63 68 55 70 00                             PitchUp.

000011a9 <MixerMenuItem6>:
    11a9:	53 69 64 65 77 61 79 73 00                          Sideways.

000011b2 <MixerMenuItem5>:
    11b2:	41 66 74 00                                         Aft.

000011b6 <MixerMenuItem4>:
    11b6:	49 6e 76 65 72 74 65 64 00                          Inverted.

000011bf <MixerMenuItem3>:
    11bf:	56 65 72 74 69 63 61 6c 00                          Vertical.

000011c8 <MixerMenuItem2>:
    11c8:	46 6f 72 77 61 72 64 00                             Forward.

000011d0 <MOUT8>:
    11d0:	4f 55 54 38 00                                      OUT8.

000011d5 <MOUT7>:
    11d5:	4f 55 54 37 00                                      OUT7.

000011da <MOUT6>:
    11da:	4f 55 54 36 00                                      OUT6.

000011df <MOUT5>:
    11df:	4f 55 54 35 00                                      OUT5.

000011e4 <MOUT4>:
    11e4:	4f 55 54 34 00                                      OUT4.

000011e9 <MOUT3>:
    11e9:	4f 55 54 33 00                                      OUT3.

000011ee <MOUT2>:
    11ee:	4f 55 54 32 00                                      OUT2.

000011f3 <MOUT1>:
    11f3:	4f 55 54 31 00                                      OUT1.

000011f8 <Status5>:
    11f8:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001203 <Status4>:
    1203:	28 41 72 6d 65 64 29 00                             (Armed).

0000120b <Status2>:
    120b:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

00001217 <Status0>:
    1217:	50 72 65 73 73 00                                   Press.

0000121d <WizardText2>:
    121d:	44 6f 6e 65 00                                      Done.

00001222 <WizardText1>:
    1222:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001230 <WizardText0>:
    1230:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

0000123d <PText6>:
    123d:	73 65 74 74 69 6e 67 73 00                          settings.

00001246 <PText5>:
    1246:	55 70 64 61 74 69 6e 67 00                          Updating.

0000124f <PText4>:
    124f:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

0000125b <PText3>:
    125b:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

00001269 <PText2>:
    1269:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

00001275 <PText1>:
    1275:	52 65 73 65 74 00                                   Reset.

0000127b <PText0>:
    127b:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

00001285 <Disarmed>:
    1285:	44 69 73 61 72 6d 65 64 00                          Disarmed.

0000128e <ErrorText10>:
    128e:	4c 6f 77 00                                         Low.

00001292 <Status3>:
    1292:	42 61 74 74 65 72 79 00                             Battery.

0000129a <ErrorText7>:
    129a:	4d 6f 64 65 6c 00                                   Model.

000012a0 <ErrorText6>:
    12a0:	4c 6f 73 74 00                                      Lost.

000012a5 <ErrorText5>:
    12a5:	45 72 72 6f 72 00                                   Error.

000012ab <ErrorText4>:
    12ab:	53 69 67 6e 61 6c 00                                Signal.

000012b2 <ErrorText3>:
    12b2:	4e 6f 00                                            No.

000012b5 <ChannelRef12>:
    12b5:	45 6c 65 76 2e 00                                   Elev..

000012bb <ChannelRef10>:
    12bb:	54 68 72 6f 74 2e 00                                Throt..

000012c2 <ChannelRef8>:
    12c2:	4e 6f 6e 65 00                                      None.

000012c7 <ChannelRef7>:
    12c7:	41 55 58 33 00                                      AUX3.

000012cc <ChannelRef6>:
    12cc:	41 55 58 32 00                                      AUX2.

000012d1 <ChannelRef5>:
    12d1:	41 55 58 31 00                                      AUX1.

000012d6 <ChannelRef4>:
    12d6:	47 65 61 72 00                                      Gear.

000012db <ChannelRef3>:
    12db:	52 75 64 64 65 72 00                                Rudder.

000012e2 <ChannelRef2>:
    12e2:	45 6c 65 76 61 74 6f 72 00                          Elevator.

000012eb <ChannelRef1>:
    12eb:	41 69 6c 65 72 6f 6e 00                             Aileron.

000012f3 <ChannelRef0>:
    12f3:	54 68 72 6f 74 74 6c 65 00                          Throttle.

000012fc <MixerItem62>:
    12fc:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

00001305 <MixerItem61>:
    1305:	53 69 6e 65 00                                      Sine.

0000130a <MixerItem60>:
    130a:	4c 69 6e 65 61 72 00                                Linear.

00001311 <MixerItem49>:
    1311:	4d 6f 74 6f 72 00                                   Motor.

00001317 <MixerItem41>:
    1317:	44 2e 53 65 72 76 6f 00                             D.Servo.

0000131f <MixerItem40>:
    131f:	41 2e 53 65 72 76 6f 00                             A.Servo.

00001327 <MixerItem81>:
    1327:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001330 <MixerItem80>:
    1330:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

00001338 <MixerItem74>:
    1338:	41 63 63 50 69 74 63 68 00                          AccPitch.

00001341 <MixerItem73>:
    1341:	41 63 63 52 6f 6c 6c 00                             AccRoll.

00001349 <MixerItem72>:
    1349:	47 79 72 6f 59 61 77 00                             GyroYaw.

00001351 <MixerItem71>:
    1351:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

0000135b <MixerItem70>:
    135b:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001364 <MixerItem31>:
    1364:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

00001371 <MixerItem21>:
    1371:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

0000137e <MixerItem30>:
    137e:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

00001389 <MixerItem29>:
    1389:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

00001396 <MixerItem2>:
    1396:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

000013a1 <MixerItem0>:
    13a1:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

000013ae <MixerItem43>:
    13ae:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

000013b8 <MixerItem42>:
    13b8:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

000013c2 <MixerItem28>:
    13c2:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

000013cf <MixerItem3>:
    13cf:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

000013db <MixerItem27>:
    13db:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

000013e7 <MixerItem7>:
    13e7:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

000013f3 <MixerItem26>:
    13f3:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001400 <MixerItem6>:
    1400:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

0000140d <MixerItem25>:
    140d:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

0000141c <MixerItem5>:
    141c:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

0000142b <MixerItem24>:
    142b:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

00001439 <MixerItem4>:
    1439:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

00001447 <MixerItem56>:
    1447:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

00001457 <MixerItem53>:
    1457:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001467 <MixerItem55>:
    1467:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

00001477 <MixerItem52>:
    1477:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

00001487 <MixerItem54>:
    1487:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

00001497 <MixerItem51>:
    1497:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

000014a7 <Mixeritem50>:
    14a7:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

000014b6 <MixerItem33>:
    14b6:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

000014c6 <MixerItem23>:
    14c6:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

000014d6 <MixerItem34>:
    14d6:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

000014e1 <MixerItem35>:
    14e1:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

000014ee <MixerItem36>:
    14ee:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

000014ff <MixerItem20>:
    14ff:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

0000150a <MixerItem1>:
    150a:	44 65 76 69 63 65 3a 00                             Device:.

00001512 <P5text>:
    1512:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

0000151c <P4text>:
    151c:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

00001526 <P3text>:
    1526:	50 32 00                                            P2.

00001529 <P2text>:
    1529:	50 31 2e 6e 00                                      P1.n.

0000152e <P1text>:
    152e:	50 31 00                                            P1.

00001531 <GeneralText20>:
    1531:	50 72 65 73 65 74 3a 00                             Preset:.

00001539 <BattMenuItem2>:
    1539:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

00001546 <GeneralText7>:
    1546:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

00001552 <GeneralText16>:
    1552:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

0000155c <GeneralText6>:
    155c:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

00001566 <GeneralText3>:
    1566:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

00001570 <GeneralText2>:
    1570:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

0000157d <AutoMenuItem2>:
    157d:	53 61 66 65 74 79 3a 00                             Safety:.

00001585 <Contrast>:
    1585:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

0000158f <MixerMenuItem0>:
    158f:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

0000159c <RCMenuItem7>:
    159c:	46 75 74 61 62 61 00                                Futaba.

000015a3 <RCMenuItem6>:
    15a3:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

000015ac <RXMode4>:
    15ac:	58 74 72 65 6d 65 00                                Xtreme.

000015b3 <RXMode3>:
    15b3:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

000015bc <RXMode2>:
    15bc:	53 2d 42 75 73 00                                   S-Bus.

000015c2 <RXMode1>:
    15c2:	50 57 4d 00                                         PWM.

000015c6 <RXMode0>:
    15c6:	43 50 50 4d 00                                      CPPM.

000015cb <Transition_P1n>:
    15cb:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

000015d7 <Transition>:
    15d7:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

000015e2 <RCMenuItem2>:
    15e2:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

000015f1 <RCMenuItem0>:
    15f1:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

000015fc <RCMenuItem20>:
    15fc:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

00001606 <RCMenuItem1>:
    1606:	52 58 20 74 79 70 65 3a 00                          RX type:.

0000160f <AutoMenuItem15>:
    160f:	4f 4e 00                                            ON.

00001612 <AutoMenuItem11>:
    1612:	4f 46 46 00                                         OFF.

00001616 <StabMenuItem30>:
    1616:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

00001620 <StabMenuItem9>:
    1620:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

0000162c <StabMenuItem12>:
    162c:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

00001639 <StabMenuItem8>:
    1639:	59 61 77 20 49 3a 00                                Yaw I:.

00001640 <StabMenuItem7>:
    1640:	59 61 77 20 50 3a 00                                Yaw P:.

00001647 <AutoMenuItem8>:
    1647:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

00001653 <AutoMenuItem21>:
    1653:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

00001662 <StabMenuItem6>:
    1662:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

00001670 <StabMenuItem11>:
    1670:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

0000167f <StabMenuItem5>:
    167f:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00001688 <AutoMenuItem4>:
    1688:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

00001691 <AutoMenuItem7>:
    1691:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

0000169c <AutoMenuItem20>:
    169c:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

000016aa <StabMenuItem3>:
    16aa:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

000016b7 <StabMenuItem10>:
    16b7:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

000016c5 <StabMenuItem2>:
    16c5:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

000016cd <AutoMenuItem1>:
    16cd:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

000016d5 <StabMenuItem13>:
    16d5:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

000016e1 <SensorMenuItem2>:
    16e1:	49 6e 76 2e 00                                      Inv..

000016e6 <SensorMenuItem1>:
    16e6:	43 61 6c 2e 00                                      Cal..

000016eb <PText19>:
    16eb:	41 63 63 00                                         Acc.

000016ef <PText18>:
    16ef:	59 61 77 00                                         Yaw.

000016f3 <PText17>:
    16f3:	50 69 74 63 68 00                                   Pitch.

000016f9 <PText16>:
    16f9:	52 6f 6c 6c 00                                      Roll.

000016fe <PText15>:
    16fe:	47 79 72 6f 00                                      Gyro.

00001703 <MainMenuItem24>:
    1703:	32 30 2e 20 45 72 72 6f 72 20 6c 6f 67 00           20. Error log.

00001711 <MainMenuItem23>:
    1711:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    1721:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000172a <MainMenuItem22>:
    172a:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    173a:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001743 <MainMenuItem20>:
    1743:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    1753:	69 6f 6e 00                                         ion.

00001757 <MainMenuItem18>:
    1757:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

00001766 <MainMenuItem17>:
    1766:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

00001775 <MainMenuItem16>:
    1775:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

00001784 <MainMenuItem15>:
    1784:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

00001793 <MainMenuItem14>:
    1793:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

000017a2 <MainMenuItem13>:
    17a2:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

000017b1 <MainMenuItem12>:
    17b1:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

000017c0 <MainMenuItem11>:
    17c0:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

000017ce <MainMenuItem3>:
    17ce:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    17de:	65 20 32 00                                         e 2.

000017e2 <MainMenuItem2>:
    17e2:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    17f2:	65 20 31 00                                         e 1.

000017f6 <MainMenuItem10>:
    17f6:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

00001805 <MainMenuItem8>:
    1805:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    1815:	61 74 69 6f 6e 00                                   ation.

0000181b <MainMenuItem7>:
    181b:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    182b:	79 00                                               y.

0000182d <MainMenuItem9>:
    182d:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    183d:	74 73 00                                            ts.

00001840 <MainMenuItem1>:
    1840:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    1850:	70 00                                               p.

00001852 <MainMenuItem0>:
    1852:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

0000185d <MenuFrame9>:
    185d:	41 62 6f 72 74 00                                   Abort.

00001863 <MenuFrame8>:
    1863:	53 61 76 65 00                                      Save.

00001868 <MenuFrame7>:
    1868:	44 65 66 2e 00                                      Def..

0000186d <MenuFrame6>:
    186d:	42 61 63 6b 00                                      Back.

00001872 <MenuFrame5>:
    1872:	4d 65 6e 75 00                                      Menu.

00001877 <MenuFrame1>:
    1877:	45 00                                               E.

00001879 <MenuFrame4>:
    1879:	44 00                                               D.

0000187b <MenuFrame3>:
    187b:	43 00                                               C.

0000187d <MenuFrame2>:
    187d:	42 00                                               B.

0000187f <MenuFrame0>:
    187f:	41 00                                               A.

00001881 <StatusText9>:
    1881:	4a 69 74 74 65 72 3a 00                             Jitter:.

00001889 <StatusText8>:
    1889:	50 6f 73 3a 00                                      Pos:.

0000188e <StatusText7>:
    188e:	42 61 74 74 65 72 79 3a 00                          Battery:.

00001897 <StatusText5>:
    1897:	30 00                                               0.

00001899 <StatusText4>:
    1899:	2e 00                                               ..

0000189b <StatusText3>:
    189b:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

000018a4 <StatusText1>:
    18a4:	4d 6f 64 65 3a 00                                   Mode:.

000018aa <StatusText0>:
    18aa:	56 65 72 73 69 6f 6e 3a 20 20 20 31 2e 32 20 42     Version:   1.2 B
    18ba:	33 00                                               3.

000018bc <Gyro_Pol>:
    18bc:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    18cc:	01 01                                               ..

000018ce <Gyro_RPY_Order>:
    18ce:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    18de:	01 00                                               ..

000018e0 <LPF_lookup_HS>:
    18e0:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    18f0:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

00001900 <LPF_lookup>:
    1900:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    1910:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

00001920 <lines>:
    1920:	03 0f 1b 27                                         ...'

00001924 <flight_menu_ranges>:
    1924:	00 7f 01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00     ....(......}....
    1934:	04 01 00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f     ................
    1944:	01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00 04 01     ..(......}......
    1954:	00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f 01 00     ................
    1964:	3c 00 7f 01 00 28 00 7d 01 00 19 00 04 01 00 02     <....(.}........
    1974:	81 7f 01 00 00 00 7f 01 00 32                       .........2

0000197e <FlightMenuText>:
	...

000019a2 <mixer_menu_ranges>:
    19a2:	00 02 01 01 02 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    19b2:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    19c2:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    19d2:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    19e2:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    19f2:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    1a02:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    1a12:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    1a22:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    1a32:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    1a42:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

00001a4c <MixerMenuText>:
    1a4c:	e2 00 00 00 00 00 00 00 00 00 00 00 00 00 38 00     ..............8.
	...
    1a68:	44 00 44 00 44 00 44 00 44 00 44 00 44 00 44 00     D.D.D.D.D.D.D.D.
    1a78:	44 00 44 00 44 00 44 00 ee 00 00 00 ee 00 00 00     D.D.D.D.........
    1a88:	ee 00 00 00 ee 00 00 00                             ........

00001a90 <servo_menu_ranges>:
    1a90:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

00001a9f <ServoMenuText>:
    1a9f:	8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00     ................
	...

00001acf <rc_menu_ranges>:
    1acf:	00 04 01 01 02 00 02 01 01 02 00 04 01 01 04 00     ................
    1adf:	01 01 01 00 00 07 01 01 04 00 28 01 00 00 01 63     ..........(....c
    1aef:	01 00 32 81 7f 01 00 00 81 7f 01 00 00 00 00 00     ..2.............
    1aff:	00 00 00 05 01 01 00 1c 32 01 00 24 00 01 01 01     ........2..$....
    1b0f:	01 00 7f 01 00 1e 00 08 01 01 00 00 06 01 01 03     ................
    1b1f:	00 07 01 01 02 00 07 01 01 07 01 0a 01 00 07 00     ................
    1b2f:	03 01 04 00                                         ....

00001b33 <RCMenuText>:
    1b33:	3e 00 76 00 69 00 74 00 69 00 00 00 00 00 00 00     >.v.i.t.i.......
    1b43:	00 00 00 00 7c 00 00 00 35 00 00 00 00 00 25 00     ....|...5.....%.
    1b53:	25 00 25 00 00 00 11 01                             %.%.....

00001b5b <SQRTSIN>:
    1b5b:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1b6b:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1b7b:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1b8b:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1b9b:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1bab:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1bbb:	64 64 64 64 64                                      ddddd

00001bc0 <SIN>:
    1bc0:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1bd0:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1be0:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1bf0:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1c00:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1c10:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1c20:	64 64 64 64 64 00                                   ddddd.

00001c26 <__ctors_end>:
    1c26:	11 24       	eor	r1, r1
    1c28:	1f be       	out	0x3f, r1	; 63
    1c2a:	cf ef       	ldi	r28, 0xFF	; 255
    1c2c:	d0 e1       	ldi	r29, 0x10	; 16
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	cd bf       	out	0x3d, r28	; 61

00001c32 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1c32:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1c34:	88 e1       	ldi	r24, 0x18	; 24
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	80 93 60 00 	sts	0x0060, r24
    1c3e:	10 92 60 00 	sts	0x0060, r1
    1c42:	0f be       	out	0x3f, r0	; 63

00001c44 <__do_copy_data>:
    1c44:	15 e0       	ldi	r17, 0x05	; 5
    1c46:	a0 e0       	ldi	r26, 0x00	; 0
    1c48:	b1 e0       	ldi	r27, 0x01	; 1
    1c4a:	e0 e6       	ldi	r30, 0x60	; 96
    1c4c:	f0 ea       	ldi	r31, 0xA0	; 160
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <__do_copy_data+0x10>
    1c50:	05 90       	lpm	r0, Z+
    1c52:	0d 92       	st	X+, r0
    1c54:	a6 31       	cpi	r26, 0x16	; 22
    1c56:	b1 07       	cpc	r27, r17
    1c58:	d9 f7       	brne	.-10     	; 0x1c50 <__do_copy_data+0xc>

00001c5a <__do_clear_bss>:
    1c5a:	28 e0       	ldi	r18, 0x08	; 8
    1c5c:	a6 e1       	ldi	r26, 0x16	; 22
    1c5e:	b5 e0       	ldi	r27, 0x05	; 5
    1c60:	01 c0       	rjmp	.+2      	; 0x1c64 <.do_clear_bss_start>

00001c62 <.do_clear_bss_loop>:
    1c62:	1d 92       	st	X+, r1

00001c64 <.do_clear_bss_start>:
    1c64:	ab 3a       	cpi	r26, 0xAB	; 171
    1c66:	b2 07       	cpc	r27, r18
    1c68:	e1 f7       	brne	.-8      	; 0x1c62 <.do_clear_bss_loop>
    1c6a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <main>
    1c6e:	0c 94 2e 50 	jmp	0xa05c	; 0xa05c <_exit>

00001c72 <__bad_interrupt>:
    1c72:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001c76 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1c76:	00 00       	nop
	ret					// 4 (5 cycles)
    1c78:	08 95       	ret

00001c7a <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1c7a:	fd df       	rcall	.-6      	; 0x1c76 <glcd_delay>
	rcall	glcd_delay
    1c7c:	fc df       	rcall	.-8      	; 0x1c76 <glcd_delay>
	rcall	glcd_delay
    1c7e:	fb df       	rcall	.-10     	; 0x1c76 <glcd_delay>
	rcall	glcd_delay
    1c80:	fa df       	rcall	.-12     	; 0x1c76 <glcd_delay>
	ret
    1c82:	08 95       	ret

00001c84 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1c84:	cf 93       	push	r28
	push	XL			//	1
    1c86:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1c88:	a5 e0       	ldi	r26, 0x05	; 5

00001c8a <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1c8a:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1c8c:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1c8e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <VarDelay>
	sbi		BIND		//	2
    1c92:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1c94:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1c96:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <VarDelay>
	dec		XL			//	1
    1c9a:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1c9c:	b1 f7       	brne	.-20     	; 0x1c8a <master_loop>

	pop		XL			//	  1
    1c9e:	af 91       	pop	r26
	pop		YL			//	  1
    1ca0:	cf 91       	pop	r28
	ret					//	  4 
    1ca2:	08 95       	ret

00001ca4 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1ca4:	00 c0       	rjmp	.+0      	; 0x1ca6 <VarDelay+0x2>
	rjmp .+0			// 2
    1ca6:	00 c0       	rjmp	.+0      	; 0x1ca8 <VarDelay+0x4>
	rjmp .+0			// 2
    1ca8:	00 c0       	rjmp	.+0      	; 0x1caa <VarDelay+0x6>
	rjmp .+0			// 2
    1caa:	00 c0       	rjmp	.+0      	; 0x1cac <VarDelay+0x8>
	rjmp .+0			// 2
    1cac:	00 c0       	rjmp	.+0      	; 0x1cae <VarDelay+0xa>
	rjmp .+0			// 2
    1cae:	00 c0       	rjmp	.+0      	; 0x1cb0 <VarDelay+0xc>
	rjmp .+0			// 2
    1cb0:	00 c0       	rjmp	.+0      	; 0x1cb2 <VarDelay+0xe>
	rjmp .+0			// 2
    1cb2:	00 c0       	rjmp	.+0      	; 0x1cb4 <VarDelay+0x10>
	nop					// 1
    1cb4:	00 00       	nop
	dec 	YL			// 1
    1cb6:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1cb8:	a9 f7       	brne	.-22     	; 0x1ca4 <VarDelay>
	ret					//   4 
    1cba:	08 95       	ret

00001cbc <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1cbc:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1cbe:	ef 93       	push	r30
	push	ZH			// 2
    1cc0:	ff 93       	push	r31
	push	XL			// 2
    1cc2:	af 93       	push	r26
	push	XH			// 2
    1cc4:	bf 93       	push	r27
	push	YL			// 2
    1cc6:	cf 93       	push	r28
	push	YH			// 2
    1cc8:	df 93       	push	r29
	push	16			// 2
    1cca:	0f 93       	push	r16
	push	17			// 2
    1ccc:	1f 93       	push	r17
	push	18			// 2
    1cce:	2f 93       	push	r18
	push	19			// 2
    1cd0:	3f 93       	push	r19
	push	20			// 2
    1cd2:	4f 93       	push	r20
	push	21			// 2
    1cd4:	5f 93       	push	r21
	push	22			// 2
    1cd6:	6f 93       	push	r22
	push	23			// 2
    1cd8:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1cda:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1cdc:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1cde:	8f 93       	push	r24
	push	25			// 2
    1ce0:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1ce2:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1ce4:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1ce6:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1ce8:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1cea:	af 93       	push	r26
	push	XH 			// 2
    1cec:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1cee:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1cf0:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1cf2:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1cf4:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1cf6:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1cf8:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1cfa:	af 93       	push	r26
	push	XH 		
    1cfc:	bf 93       	push	r27
	andi	XL,	0x07
    1cfe:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1d00:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1d02:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d04:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1d06:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1d08:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1d0a:	af 93       	push	r26
	push	XH 		
    1d0c:	bf 93       	push	r27
	andi	XL,	0x07
    1d0e:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1d10:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1d12:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d14:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1d16:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1d18:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1d1a:	af 93       	push	r26
	push	XH 	
    1d1c:	bf 93       	push	r27
	andi	XL,	0x07
    1d1e:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1d20:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1d22:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d24:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1d26:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1d28:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1d2a:	af 93       	push	r26
	push	XH 	
    1d2c:	bf 93       	push	r27
	andi	XL,	0x07
    1d2e:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1d30:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1d32:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d34:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1d36:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1d38:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1d3a:	af 93       	push	r26
	push	XH 	
    1d3c:	bf 93       	push	r27
	andi	XL,	0x07
    1d3e:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1d40:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1d42:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d44:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1d46:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1d48:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1d4a:	af 93       	push	r26
	push	XH 
    1d4c:	bf 93       	push	r27
	andi	XL,	0x07
    1d4e:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1d50:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1d52:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1d54:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1d56:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1d58:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1d5a:	af 93       	push	r26
	push	XH 
    1d5c:	bf 93       	push	r27
	andi	XL,	0x07
    1d5e:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1d60:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1d62:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1d64:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1d68:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1d6a:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1d6c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <DelayLow>
// M2
	mov		r25,r22
    1d70:	96 2f       	mov	r25, r22
	call	DelayHigh
    1d72:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1d76:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1d78:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1d7a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <DelayLow>
// M3
	mov		r25,r21
    1d7e:	95 2f       	mov	r25, r21
	call	DelayHigh
    1d80:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1d84:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1d86:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1d88:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <DelayLow>
// M4
	mov		r25,r20
    1d8c:	94 2f       	mov	r25, r20
	call	DelayHigh
    1d8e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1d92:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1d94:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1d96:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <DelayLow>
// M5
	mov		r25,r19
    1d9a:	93 2f       	mov	r25, r19
	call	DelayHigh
    1d9c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1da0:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1da2:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1da4:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <DelayLow>
// M6
	mov		r25,r18
    1da8:	92 2f       	mov	r25, r18
	call	DelayHigh
    1daa:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1dae:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1db0:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1db2:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <DelayLow>
// M7
	mov		r25,r17
    1db6:	91 2f       	mov	r25, r17
	call	DelayHigh
    1db8:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1dbc:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1dbe:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1dc0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <DelayLow>
// M8
	mov		r25,r16
    1dc4:	90 2f       	mov	r25, r16
	call	DelayHigh
    1dc6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1dca:	f7 fc       	sbrc	r15, 7
	sbi 	M8
    1dcc:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1dce:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1dd2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <pwm_delay>
	call    pwm_delay
    1dd6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <pwm_delay>
	call    pwm_delay
    1dda:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1dde:	bf 91       	pop	r27
	pop		XL
    1de0:	af 91       	pop	r26
	call	shuffle_8
    1de2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <shuffle_8>
	mov		r16,XL
    1de6:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1de8:	bf 91       	pop	r27
	pop		XL
    1dea:	af 91       	pop	r26
	call	shuffle_8
    1dec:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <shuffle_8>
	mov		r17,XL
    1df0:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1df2:	bf 91       	pop	r27
	pop		XL
    1df4:	af 91       	pop	r26
	call	shuffle_8
    1df6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <shuffle_8>
	mov		r18,XL
    1dfa:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1dfc:	bf 91       	pop	r27
	pop		XL
    1dfe:	af 91       	pop	r26
	call	shuffle_8
    1e00:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <shuffle_8>
	mov		r19,XL
    1e04:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1e06:	bf 91       	pop	r27
	pop		XL
    1e08:	af 91       	pop	r26
	call	shuffle_8
    1e0a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <shuffle_8>
	mov		r20,XL
    1e0e:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1e10:	bf 91       	pop	r27
	pop		XL
    1e12:	af 91       	pop	r26
	call	shuffle_8
    1e14:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <shuffle_8>
	mov		r21,XL
    1e18:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1e1a:	bf 91       	pop	r27
	pop		XL
    1e1c:	af 91       	pop	r26
	call	shuffle_8
    1e1e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <shuffle_8>
	mov		r22,XL
    1e22:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1e24:	bf 91       	pop	r27
	pop		XL
    1e26:	af 91       	pop	r26
	call	shuffle_8
    1e28:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <shuffle_8>
	mov		r23,XL
    1e2c:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    1e2e:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    1e30:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    1e32:	00 24       	eor	r0, r0

00001e34 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1e34:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1e36:	19 f4       	brne	.+6      	; 0x1e3e <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1e38:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1e3a:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <jj1>

00001e3e <j1>:
j1:
	rjmp 	.+0			// 2
    1e3e:	00 c0       	rjmp	.+0      	; 0x1e40 <j1+0x2>
	rjmp 	.+0			// 2
    1e40:	00 c0       	rjmp	.+0      	; 0x1e42 <jj1>

00001e42 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1e42:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1e44:	19 f4       	brne	.+6      	; 0x1e4c <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1e46:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1e48:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <jj2>

00001e4c <j2>:
j2:
	rjmp	.+0
    1e4c:	00 c0       	rjmp	.+0      	; 0x1e4e <j2+0x2>
	rjmp	.+0
    1e4e:	00 c0       	rjmp	.+0      	; 0x1e50 <jj2>

00001e50 <jj2>:
jj2:
	subi	r21,1
    1e50:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1e52:	19 f4       	brne	.+6      	; 0x1e5a <j3>
	cbi 	M3
    1e54:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1e56:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <jj3>

00001e5a <j3>:
j3:
	rjmp	.+0
    1e5a:	00 c0       	rjmp	.+0      	; 0x1e5c <j3+0x2>
	rjmp	.+0
    1e5c:	00 c0       	rjmp	.+0      	; 0x1e5e <jj3>

00001e5e <jj3>:
jj3:
	subi 	r20,1
    1e5e:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1e60:	19 f4       	brne	.+6      	; 0x1e68 <j4>
	cbi 	M4
    1e62:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1e64:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <jj4>

00001e68 <j4>:
j4:
	rjmp 	.+0
    1e68:	00 c0       	rjmp	.+0      	; 0x1e6a <j4+0x2>
	rjmp 	.+0
    1e6a:	00 c0       	rjmp	.+0      	; 0x1e6c <jj4>

00001e6c <jj4>:
jj4:
	subi	r19,1
    1e6c:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1e6e:	19 f4       	brne	.+6      	; 0x1e76 <j5>
	cbi 	M5
    1e70:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1e72:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <jj5>

00001e76 <j5>:
j5:
	rjmp 	.+0
    1e76:	00 c0       	rjmp	.+0      	; 0x1e78 <j5+0x2>
	rjmp 	.+0
    1e78:	00 c0       	rjmp	.+0      	; 0x1e7a <jj5>

00001e7a <jj5>:
jj5:
	subi	r18,1
    1e7a:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1e7c:	19 f4       	brne	.+6      	; 0x1e84 <j6>
	cbi 	M6
    1e7e:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1e80:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <jj6>

00001e84 <j6>:
j6:
	rjmp 	.+0
    1e84:	00 c0       	rjmp	.+0      	; 0x1e86 <j6+0x2>
	rjmp	.+0
    1e86:	00 c0       	rjmp	.+0      	; 0x1e88 <jj6>

00001e88 <jj6>:
jj6:
	subi	r17,1
    1e88:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1e8a:	19 f4       	brne	.+6      	; 0x1e92 <j7>
	cbi 	M7
    1e8c:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1e8e:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <jj7>

00001e92 <j7>:
j7:
	rjmp 	.+0
    1e92:	00 c0       	rjmp	.+0      	; 0x1e94 <j7+0x2>
	rjmp 	.+0
    1e94:	00 c0       	rjmp	.+0      	; 0x1e96 <jj7>

00001e96 <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1e96:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1e98:	19 f4       	brne	.+6      	; 0x1ea0 <j8>
	cbi 	M8
    1e9a:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1e9c:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <jj8>

00001ea0 <j8>:
j8:
	rjmp 	.+0
    1ea0:	00 c0       	rjmp	.+0      	; 0x1ea2 <j8+0x2>
	rjmp 	.+0
    1ea2:	00 c0       	rjmp	.+0      	; 0x1ea4 <jj8>

00001ea4 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1ea4:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <pad_100_delay>

	subi 	YL,1		// 1
    1ea8:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1eaa:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1eac:	11 f0       	breq	.+4      	; 0x1eb2 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1eae:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <nloop>

00001eb2 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1eb2:	9f 91       	pop	r25
	pop		24			// 		2
    1eb4:	8f 91       	pop	r24
	pop		23			//		2
    1eb6:	7f 91       	pop	r23
	pop		22			//		2
    1eb8:	6f 91       	pop	r22
	pop		21			//		2
    1eba:	5f 91       	pop	r21
	pop		20			//		2
    1ebc:	4f 91       	pop	r20
	pop		19			//		2
    1ebe:	3f 91       	pop	r19
	pop		18			//		2
    1ec0:	2f 91       	pop	r18
	pop		17			//		2
    1ec2:	1f 91       	pop	r17
	pop		16			//		2
    1ec4:	0f 91       	pop	r16
	pop		YH			//		2
    1ec6:	df 91       	pop	r29
	pop		YL			//		2
    1ec8:	cf 91       	pop	r28
	pop		XH			//		2
    1eca:	bf 91       	pop	r27
	pop		XL			//		2
    1ecc:	af 91       	pop	r26
	pop		ZH			// 		2
    1ece:	ff 91       	pop	r31
	pop		ZL			//		2
    1ed0:	ef 91       	pop	r30

	ret					//		4
    1ed2:	08 95       	ret

00001ed4 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1ed4:	0f 93       	push	r16
	push	17
    1ed6:	1f 93       	push	r17
	push	18
    1ed8:	2f 93       	push	r18

	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1eda:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1edc:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1ede:	00 24       	eor	r0, r0

00001ee0 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1ee0:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1ee2:	71 f0       	breq	.+28     	; 0x1f00 <in1>
	cpi		r24,0x01	; 1
    1ee4:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1ee6:	79 f0       	breq	.+30     	; 0x1f06 <in2>
	cpi		r24,0x02	; 2
    1ee8:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1eea:	81 f0       	breq	.+32     	; 0x1f0c <in3>
	cpi		r24,0x03	; 3
    1eec:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1eee:	89 f0       	breq	.+34     	; 0x1f12 <in4>
	cpi		r24,0x04	; 4
    1ef0:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1ef2:	91 f0       	breq	.+36     	; 0x1f18 <in5>
	cpi		r24,0x05	; 5
    1ef4:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1ef6:	99 f0       	breq	.+38     	; 0x1f1e <in6>
	cpi		r24,0x06	; 6
    1ef8:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1efa:	a1 f0       	breq	.+40     	; 0x1f24 <in7>
	cpi		r24,0x07	; 7
    1efc:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1efe:	a9 f0       	breq	.+42     	; 0x1f2a <in8>

00001f00 <in1>:

in1:sbi 	M1			// Set output high
    1f00:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1f02:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <loopin>

00001f06 <in2>:
in2:sbi 	M2
    1f06:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1f08:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <loopin>

00001f0c <in3>:
in3:sbi 	M3	
    1f0c:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1f0e:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <loopin>

00001f12 <in4>:
in4:sbi 	M4
    1f12:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1f14:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <loopin>

00001f18 <in5>:
in5:sbi 	M5
    1f18:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1f1a:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <loopin>

00001f1e <in6>:
in6:sbi 	M6
    1f1e:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1f20:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <loopin>

00001f24 <in7>:
in7:sbi 	M7
    1f24:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1f26:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <loopin>

00001f2a <in8>:
in8:sbi 	M8
    1f2a:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1f2c:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <loopin>

00001f30 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1f30:	00 c0       	rjmp	.+0      	; 0x1f32 <loopin+0x2>
	rjmp .+0			// 2
    1f32:	00 c0       	rjmp	.+0      	; 0x1f34 <loopin+0x4>
	rjmp .+0			// 2
    1f34:	00 c0       	rjmp	.+0      	; 0x1f36 <loopin+0x6>
	rjmp .+0			// 2
    1f36:	00 c0       	rjmp	.+0      	; 0x1f38 <loopin+0x8>
	rjmp .+0			// 2
    1f38:	00 c0       	rjmp	.+0      	; 0x1f3a <loopin+0xa>
	rjmp .+0			// 2
    1f3a:	00 c0       	rjmp	.+0      	; 0x1f3c <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1f3c:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1f3e:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1f42:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1f44:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1f46:	22 b9       	out	0x02, r18	; 2

00001f48 <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1f48:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1f4a:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1f4c:	89 f7       	brne	.-30     	; 0x1f30 <loopin>

	pop		18
    1f4e:	2f 91       	pop	r18
	pop		17			// Restore regs
    1f50:	1f 91       	pop	r17
	pop		16
    1f52:	0f 91       	pop	r16
	ret	
    1f54:	08 95       	ret

00001f56 <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1f56:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1f58:	05 e6       	ldi	r16, 0x65	; 101

00001f5a <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1f5a:	00 c0       	rjmp	.+0      	; 0x1f5c <pwm_loop+0x2>
	rjmp .+0			// 2
    1f5c:	00 c0       	rjmp	.+0      	; 0x1f5e <pwm_loop+0x4>
	rjmp .+0			// 2
    1f5e:	00 c0       	rjmp	.+0      	; 0x1f60 <pwm_loop+0x6>
	subi	r16,1		// 1
    1f60:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1f62:	d9 f7       	brne	.-10     	; 0x1f5a <pwm_loop>

00001f64 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1f64:	0f 91       	pop	r16
	ret					//    4 to return
    1f66:	08 95       	ret

00001f68 <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1f68:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1f6a:	09 e0       	ldi	r16, 0x09	; 9

00001f6c <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1f6c:	00 c0       	rjmp	.+0      	; 0x1f6e <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1f6e:	00 c0       	rjmp	.+0      	; 0x1f70 <pad_100+0x4>
	rjmp .+0			// 2
    1f70:	00 c0       	rjmp	.+0      	; 0x1f72 <pad_100+0x6>

	subi 	16,1		// 1
    1f72:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1f74:	d9 f7       	brne	.-10     	; 0x1f6c <pad_100>

	nop					// 		1		Trim to precisely the right value
    1f76:	00 00       	nop
	rjmp .+0			// 		2
    1f78:	00 c0       	rjmp	.+0      	; 0x1f7a <pad_100+0xe>
	rjmp .+0			// 		2
    1f7a:	00 c0       	rjmp	.+0      	; 0x1f7c <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1f7c:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1f7e:	08 95       	ret

00001f80 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1f80:	00 c0       	rjmp	.+0      	; 0x1f82 <us_delay+0x2>
	rjmp .+0			// 2
    1f82:	00 c0       	rjmp	.+0      	; 0x1f84 <us_delay+0x4>
	rjmp .+0			// 2
    1f84:	00 c0       	rjmp	.+0      	; 0x1f86 <us_delay+0x6>
	rjmp .+0			// 2
    1f86:	00 c0       	rjmp	.+0      	; 0x1f88 <us_delay+0x8>
	ret					// 4 (16 cycles)
    1f88:	08 95       	ret

00001f8a <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1f8a:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1f8c:	a7 95       	ror	r26
	lsr		XH			// 1
    1f8e:	b6 95       	lsr	r27
	ror		XL			// 1
    1f90:	a7 95       	ror	r26
	lsr		XH			// 1
    1f92:	b6 95       	lsr	r27
	ror		XL			// 1
    1f94:	a7 95       	ror	r26
	ret					// 4
    1f96:	08 95       	ret

00001f98 <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1f98:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1f9a:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1f9c:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1f9e:	31 f0       	breq	.+12     	; 0x1fac <LoopHighOut1>

00001fa0 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1fa0:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <us_delay>
	dec 	YL			// 		1	1
    1fa4:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1fa8:	fb cf       	rjmp	.-10     	; 0x1fa0 <LoopHigh>

00001faa <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1faa:	00 c0       	rjmp	.+0      	; 0x1fac <LoopHighOut1>

00001fac <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1fac:	00 00       	nop
    ret					// 4	4	4
    1fae:	08 95       	ret

00001fb0 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1fb0:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1fb2:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1fb4:	31 f0       	breq	.+12     	; 0x1fc2 <LoopLowOut1>

00001fb6 <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1fb6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <us_delay>
	dec 	YL			//		1	1
    1fba:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <LoopLowOut2>
	rjmp	LoopLow		//			2
    1fbe:	fb cf       	rjmp	.-10     	; 0x1fb6 <LoopLow>

00001fc0 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1fc0:	00 c0       	rjmp	.+0      	; 0x1fc2 <LoopLowOut1>

00001fc2 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1fc2:	08 95       	ret

00001fc4 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	2c 97       	sbiw	r28, 0x0c	; 12
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1fd8:	26 e0       	ldi	r18, 0x06	; 6
    1fda:	ae 01       	movw	r20, r28
    1fdc:	4f 5f       	subi	r20, 0xFF	; 255
    1fde:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe0:	6b e3       	ldi	r22, 0x3B	; 59
    1fe2:	80 ed       	ldi	r24, 0xD0	; 208
    1fe4:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	98 2f       	mov	r25, r24
    1fee:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1ff0:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1ff2:	82 0f       	add	r24, r18
    1ff4:	91 1d       	adc	r25, r1
    1ff6:	36 e0       	ldi	r19, 0x06	; 6
    1ff8:	95 95       	asr	r25
    1ffa:	87 95       	ror	r24
    1ffc:	3a 95       	dec	r19
    1ffe:	e1 f7       	brne	.-8      	; 0x1ff8 <get_raw_accs+0x34>
    2000:	98 87       	std	Y+8, r25	; 0x08
    2002:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	98 2f       	mov	r25, r24
    200a:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    200c:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    200e:	82 0f       	add	r24, r18
    2010:	91 1d       	adc	r25, r1
    2012:	56 e0       	ldi	r21, 0x06	; 6
    2014:	95 95       	asr	r25
    2016:	87 95       	ror	r24
    2018:	5a 95       	dec	r21
    201a:	e1 f7       	brne	.-8      	; 0x2014 <get_raw_accs+0x50>
    201c:	91 95       	neg	r25
    201e:	81 95       	neg	r24
    2020:	91 09       	sbc	r25, r1
    2022:	9a 87       	std	Y+10, r25	; 0x0a
    2024:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    2026:	8d 81       	ldd	r24, Y+5	; 0x05
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	98 2f       	mov	r25, r24
    202c:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    202e:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    2030:	82 0f       	add	r24, r18
    2032:	91 1d       	adc	r25, r1
    2034:	76 e0       	ldi	r23, 0x06	; 6
    2036:	95 95       	asr	r25
    2038:	87 95       	ror	r24
    203a:	7a 95       	dec	r23
    203c:	e1 f7       	brne	.-8      	; 0x2036 <get_raw_accs+0x72>
    203e:	9c 87       	std	Y+12, r25	; 0x0c
    2040:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    2042:	20 91 49 06 	lds	r18, 0x0649
    2046:	ae e3       	ldi	r26, 0x3E	; 62
    2048:	b5 e0       	ldi	r27, 0x05	; 5
    204a:	43 e0       	ldi	r20, 0x03	; 3
    204c:	24 02       	muls	r18, r20
    204e:	90 01       	movw	r18, r0
    2050:	11 24       	eor	r1, r1
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	22 52       	subi	r18, 0x22	; 34
    2058:	3f 4f       	sbci	r19, 0xFF	; 255
    205a:	f9 01       	movw	r30, r18
    205c:	e8 0f       	add	r30, r24
    205e:	f9 1f       	adc	r31, r25
    2060:	e4 91       	lpm	r30, Z
    2062:	ee 0f       	add	r30, r30
    2064:	ff 0b       	sbc	r31, r31
    2066:	41 e0       	ldi	r20, 0x01	; 1
    2068:	50 e0       	ldi	r21, 0x00	; 0
    206a:	4c 0f       	add	r20, r28
    206c:	5d 1f       	adc	r21, r29
    206e:	e4 0f       	add	r30, r20
    2070:	f5 1f       	adc	r31, r21
    2072:	46 81       	ldd	r20, Z+6	; 0x06
    2074:	57 81       	ldd	r21, Z+7	; 0x07
    2076:	4d 93       	st	X+, r20
    2078:	5d 93       	st	X+, r21
    207a:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    207c:	83 30       	cpi	r24, 0x03	; 3
    207e:	91 05       	cpc	r25, r1
    2080:	61 f7       	brne	.-40     	; 0x205a <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    2082:	2c 96       	adiw	r28, 0x0c	; 12
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	08 95       	ret

00002094 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    2094:	1f 93       	push	r17
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    209a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    209e:	80 91 c8 07 	lds	r24, 0x07C8
    20a2:	80 fd       	sbrc	r24, 0
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    20a6:	10 92 b0 07 	sts	0x07B0, r1
    20aa:	10 92 af 07 	sts	0x07AF, r1
    20ae:	0e c0       	rjmp	.+28     	; 0x20cc <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    20b0:	80 91 b1 07 	lds	r24, 0x07B1
    20b4:	90 91 b2 07 	lds	r25, 0x07B2
    20b8:	20 91 b5 07 	lds	r18, 0x07B5
    20bc:	30 91 b6 07 	lds	r19, 0x07B6
    20c0:	82 1b       	sub	r24, r18
    20c2:	93 0b       	sbc	r25, r19
    20c4:	90 93 b0 07 	sts	0x07B0, r25
    20c8:	80 93 af 07 	sts	0x07AF, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    20cc:	20 91 49 06 	lds	r18, 0x0649
    20d0:	cb ea       	ldi	r28, 0xAB	; 171
    20d2:	d7 e0       	ldi	r29, 0x07	; 7
    20d4:	ae e3       	ldi	r26, 0x3E	; 62
    20d6:	b5 e0       	ldi	r27, 0x05	; 5
    20d8:	83 e0       	ldi	r24, 0x03	; 3
    20da:	28 02       	muls	r18, r24
    20dc:	90 01       	movw	r18, r0
    20de:	11 24       	eor	r1, r1
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	24 53       	subi	r18, 0x34	; 52
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    20e8:	69 91       	ld	r22, Y+
    20ea:	79 91       	ld	r23, Y+
    20ec:	f9 01       	movw	r30, r18
    20ee:	e8 0f       	add	r30, r24
    20f0:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    20f2:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    20f4:	4d 91       	ld	r20, X+
    20f6:	5c 91       	ld	r21, X
    20f8:	11 97       	sbiw	r26, 0x01	; 1
    20fa:	46 1b       	sub	r20, r22
    20fc:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    20fe:	14 03       	mulsu	r17, r20
    2100:	b0 01       	movw	r22, r0
    2102:	15 9f       	mul	r17, r21
    2104:	70 0d       	add	r23, r0
    2106:	11 24       	eor	r1, r1
    2108:	6d 93       	st	X+, r22
    210a:	7d 93       	st	X+, r23
    210c:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    210e:	83 30       	cpi	r24, 0x03	; 3
    2110:	91 05       	cpc	r25, r1
    2112:	51 f7       	brne	.-44     	; 0x20e8 <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    2114:	60 91 b1 07 	lds	r22, 0x07B1
    2118:	70 91 b2 07 	lds	r23, 0x07B2
    211c:	80 91 af 07 	lds	r24, 0x07AF
    2120:	90 91 b0 07 	lds	r25, 0x07B0
    2124:	68 1b       	sub	r22, r24
    2126:	79 0b       	sbc	r23, r25
    2128:	88 27       	eor	r24, r24
    212a:	77 fd       	sbrc	r23, 7
    212c:	80 95       	com	r24
    212e:	98 2f       	mov	r25, r24
    2130:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    2134:	20 91 b1 05 	lds	r18, 0x05B1
    2138:	30 91 b2 05 	lds	r19, 0x05B2
    213c:	40 91 b3 05 	lds	r20, 0x05B3
    2140:	50 91 b4 05 	lds	r21, 0x05B4
    2144:	0e 94 f5 4c 	call	0x99ea	; 0x99ea <__addsf3>
    2148:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
    214c:	70 93 17 05 	sts	0x0517, r23
    2150:	60 93 16 05 	sts	0x0516, r22
}
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	08 95       	ret

0000215c <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	00 d0       	rcall	.+0      	; 0x2164 <CalibrateAcc+0x8>
    2164:	00 d0       	rcall	.+0      	; 0x2166 <CalibrateAcc+0xa>
    2166:	00 d0       	rcall	.+0      	; 0x2168 <CalibrateAcc+0xc>
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    216c:	1a 82       	std	Y+2, r1	; 0x02
    216e:	19 82       	std	Y+1, r1	; 0x01
    2170:	1c 82       	std	Y+4, r1	; 0x04
    2172:	1b 82       	std	Y+3, r1	; 0x03
    2174:	1e 82       	std	Y+6, r1	; 0x06
    2176:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    2178:	81 11       	cpse	r24, r1
    217a:	72 c0       	rjmp	.+228    	; 0x2260 <CalibrateAcc+0x104>
    217c:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    217e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	20 91 3e 05 	lds	r18, 0x053E
    218a:	30 91 3f 05 	lds	r19, 0x053F
    218e:	82 0f       	add	r24, r18
    2190:	93 1f       	adc	r25, r19
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	9c 81       	ldd	r25, Y+4	; 0x04
    219a:	20 91 40 05 	lds	r18, 0x0540
    219e:	30 91 41 05 	lds	r19, 0x0541
    21a2:	82 0f       	add	r24, r18
    21a4:	93 1f       	adc	r25, r19
    21a6:	9c 83       	std	Y+4, r25	; 0x04
    21a8:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	20 91 42 05 	lds	r18, 0x0542
    21b2:	30 91 43 05 	lds	r19, 0x0543
    21b6:	82 0f       	add	r24, r18
    21b8:	93 1f       	adc	r25, r19
    21ba:	9e 83       	std	Y+6, r25	; 0x06
    21bc:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21be:	8f e4       	ldi	r24, 0x4F	; 79
    21c0:	93 ec       	ldi	r25, 0xC3	; 195
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <CalibrateAcc+0x66>
    21c6:	00 c0       	rjmp	.+0      	; 0x21c8 <CalibrateAcc+0x6c>
    21c8:	00 00       	nop
    21ca:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    21cc:	c1 f6       	brne	.-80     	; 0x217e <CalibrateAcc+0x22>
    21ce:	fe 01       	movw	r30, r28
    21d0:	31 96       	adiw	r30, 0x01	; 1
    21d2:	9e 01       	movw	r18, r28
    21d4:	29 5f       	subi	r18, 0xF9	; 249
    21d6:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    21d8:	80 81       	ld	r24, Z
    21da:	91 81       	ldd	r25, Z+1	; 0x01
    21dc:	40 96       	adiw	r24, 0x10	; 16
    21de:	45 e0       	ldi	r20, 0x05	; 5
    21e0:	95 95       	asr	r25
    21e2:	87 95       	ror	r24
    21e4:	4a 95       	dec	r20
    21e6:	e1 f7       	brne	.-8      	; 0x21e0 <CalibrateAcc+0x84>
    21e8:	81 93       	st	Z+, r24
    21ea:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    21ec:	e2 17       	cp	r30, r18
    21ee:	f3 07       	cpc	r31, r19
    21f0:	99 f7       	brne	.-26     	; 0x21d8 <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	90 93 ac 07 	sts	0x07AC, r25
    21fa:	80 93 ab 07 	sts	0x07AB, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	90 93 ae 07 	sts	0x07AE, r25
    2206:	80 93 ad 07 	sts	0x07AD, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    220a:	80 91 49 06 	lds	r24, 0x0649
    220e:	99 27       	eor	r25, r25
    2210:	87 fd       	sbrc	r24, 7
    2212:	90 95       	com	r25
    2214:	fc 01       	movw	r30, r24
    2216:	ee 0f       	add	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	e8 0f       	add	r30, r24
    221c:	f9 1f       	adc	r31, r25
    221e:	e2 53       	subi	r30, 0x32	; 50
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	44 91       	lpm	r20, Z
    2224:	2d 81       	ldd	r18, Y+5	; 0x05
    2226:	3e 81       	ldd	r19, Y+6	; 0x06
    2228:	42 03       	mulsu	r20, r18
    222a:	c0 01       	movw	r24, r0
    222c:	43 9f       	mul	r20, r19
    222e:	90 0d       	add	r25, r0
    2230:	11 24       	eor	r1, r1
    2232:	90 93 b2 07 	sts	0x07B2, r25
    2236:	80 93 b1 07 	sts	0x07B1, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    223a:	80 91 c8 07 	lds	r24, 0x07C8
    223e:	82 60       	ori	r24, 0x02	; 2
    2240:	80 93 c8 07 	sts	0x07C8, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    2244:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>
		LED1 = 1;
    2248:	2b 9a       	sbi	0x05, 3	; 5
    224a:	9f e7       	ldi	r25, 0x7F	; 127
    224c:	24 e8       	ldi	r18, 0x84	; 132
    224e:	4e e1       	ldi	r20, 0x1E	; 30
    2250:	91 50       	subi	r25, 0x01	; 1
    2252:	20 40       	sbci	r18, 0x00	; 0
    2254:	40 40       	sbci	r20, 0x00	; 0
    2256:	e1 f7       	brne	.-8      	; 0x2250 <CalibrateAcc+0xf4>
    2258:	00 c0       	rjmp	.+0      	; 0x225a <CalibrateAcc+0xfe>
    225a:	00 00       	nop
		_delay_ms(500);
		LED1 = 0;
    225c:	2b 98       	cbi	0x05, 3	; 5
    225e:	76 c0       	rjmp	.+236    	; 0x234c <CalibrateAcc+0x1f0>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    2260:	80 91 c8 07 	lds	r24, 0x07C8
    2264:	81 ff       	sbrs	r24, 1
    2266:	72 c0       	rjmp	.+228    	; 0x234c <CalibrateAcc+0x1f0>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    2268:	10 92 b4 07 	sts	0x07B4, r1
    226c:	10 92 b3 07 	sts	0x07B3, r1
    2270:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    2272:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    2276:	80 91 b3 07 	lds	r24, 0x07B3
    227a:	90 91 b4 07 	lds	r25, 0x07B4
    227e:	20 91 42 05 	lds	r18, 0x0542
    2282:	30 91 43 05 	lds	r19, 0x0543
    2286:	82 0f       	add	r24, r18
    2288:	93 1f       	adc	r25, r19
    228a:	90 93 b4 07 	sts	0x07B4, r25
    228e:	80 93 b3 07 	sts	0x07B3, r24
    2292:	8f e4       	ldi	r24, 0x4F	; 79
    2294:	93 ec       	ldi	r25, 0xC3	; 195
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <CalibrateAcc+0x13a>
    229a:	00 c0       	rjmp	.+0      	; 0x229c <CalibrateAcc+0x140>
    229c:	00 00       	nop
    229e:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    22a0:	41 f7       	brne	.-48     	; 0x2272 <CalibrateAcc+0x116>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    22a2:	80 91 49 06 	lds	r24, 0x0649
    22a6:	99 27       	eor	r25, r25
    22a8:	87 fd       	sbrc	r24, 7
    22aa:	90 95       	com	r25
    22ac:	fc 01       	movw	r30, r24
    22ae:	ee 0f       	add	r30, r30
    22b0:	ff 1f       	adc	r31, r31
    22b2:	e8 0f       	add	r30, r24
    22b4:	f9 1f       	adc	r31, r25
    22b6:	e2 53       	subi	r30, 0x32	; 50
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    22bc:	20 91 b3 07 	lds	r18, 0x07B3
    22c0:	30 91 b4 07 	lds	r19, 0x07B4
    22c4:	20 5f       	subi	r18, 0xF0	; 240
    22c6:	3f 4f       	sbci	r19, 0xFF	; 255
    22c8:	b5 e0       	ldi	r27, 0x05	; 5
    22ca:	35 95       	asr	r19
    22cc:	27 95       	ror	r18
    22ce:	ba 95       	dec	r27
    22d0:	e1 f7       	brne	.-8      	; 0x22ca <CalibrateAcc+0x16e>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    22d2:	42 03       	mulsu	r20, r18
    22d4:	c0 01       	movw	r24, r0
    22d6:	43 9f       	mul	r20, r19
    22d8:	90 0d       	add	r25, r0
    22da:	11 24       	eor	r1, r1
    22dc:	90 93 b4 07 	sts	0x07B4, r25
    22e0:	80 93 b3 07 	sts	0x07B3, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    22e4:	97 ff       	sbrs	r25, 7
    22e6:	32 c0       	rjmp	.+100    	; 0x234c <CalibrateAcc+0x1f0>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    22e8:	20 91 b1 07 	lds	r18, 0x07B1
    22ec:	30 91 b2 07 	lds	r19, 0x07B2
    22f0:	a9 01       	movw	r20, r18
    22f2:	48 1b       	sub	r20, r24
    22f4:	59 0b       	sbc	r21, r25
    22f6:	ca 01       	movw	r24, r20
    22f8:	95 95       	asr	r25
    22fa:	87 95       	ror	r24
    22fc:	90 93 b6 07 	sts	0x07B6, r25
    2300:	80 93 b5 07 	sts	0x07B5, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    2304:	28 1b       	sub	r18, r24
    2306:	39 0b       	sbc	r19, r25
    2308:	30 93 b0 07 	sts	0x07B0, r19
    230c:	20 93 af 07 	sts	0x07AF, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    2310:	80 91 c8 07 	lds	r24, 0x07C8
    2314:	81 60       	ori	r24, 0x01	; 1
    2316:	80 93 c8 07 	sts	0x07C8, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    231a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>
				LED1 = 1;
    231e:	2b 9a       	sbi	0x05, 3	; 5
    2320:	5f e7       	ldi	r21, 0x7F	; 127
    2322:	84 e8       	ldi	r24, 0x84	; 132
    2324:	9e e1       	ldi	r25, 0x1E	; 30
    2326:	51 50       	subi	r21, 0x01	; 1
    2328:	80 40       	sbci	r24, 0x00	; 0
    232a:	90 40       	sbci	r25, 0x00	; 0
    232c:	e1 f7       	brne	.-8      	; 0x2326 <CalibrateAcc+0x1ca>
    232e:	00 c0       	rjmp	.+0      	; 0x2330 <CalibrateAcc+0x1d4>
    2330:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    2332:	2b 98       	cbi	0x05, 3	; 5
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    2334:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
	}
}
    2336:	26 96       	adiw	r28, 0x06	; 6
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	1f 91       	pop	r17
				LED1 = 1;
				_delay_ms(500);
				LED1 = 0;
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    2348:	0c 94 1c 36 	jmp	0x6c38	; 0x6c38 <menu_beep>
			}
		}
	}
}
    234c:	26 96       	adiw	r28, 0x06	; 6
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	1f 91       	pop	r17
    235e:	08 95       	ret

00002360 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	6b e6       	ldi	r22, 0x6B	; 107
    2364:	80 ed       	ldi	r24, 0xD0	; 208
    2366:	0e 94 ba 28 	call	0x5174	; 0x5174 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    236a:	48 e0       	ldi	r20, 0x08	; 8
    236c:	6c e1       	ldi	r22, 0x1C	; 28
    236e:	80 ed       	ldi	r24, 0xD0	; 208
    2370:	0c 94 ba 28 	jmp	0x5174	; 0x5174 <writeI2Cbyte>

00002374 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    2374:	8f ef       	ldi	r24, 0xFF	; 255
    2376:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    237a:	10 92 7b 00 	sts	0x007B, r1
    237e:	08 95       	ret

00002380 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    2380:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    2384:	86 ec       	ldi	r24, 0xC6	; 198
    2386:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    238a:	80 91 7a 00 	lds	r24, 0x007A
    238e:	86 fd       	sbrc	r24, 6
    2390:	fc cf       	rjmp	.-8      	; 0x238a <read_adc+0xa>
}
    2392:	08 95       	ret

00002394 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    2394:	cf 92       	push	r12
    2396:	df 92       	push	r13
    2398:	ef 92       	push	r14
    239a:	0f 93       	push	r16
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    23a0:	cb e0       	ldi	r28, 0x0B	; 11
    23a2:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    23a4:	1f 9b       	sbis	0x03, 7	; 3
    23a6:	7f c0       	rjmp	.+254    	; 0x24a6 <Display_balance+0x112>
	{
		// Read accs
		ReadAcc();
    23a8:	0e 94 4a 10 	call	0x2094	; 0x2094 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	70 e0       	ldi	r23, 0x00	; 0
    23b0:	cb 01       	movw	r24, r22
    23b2:	0e 94 32 2b 	call	0x5664	; 0x5664 <imu_update>
    23b6:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    23b8:	20 97       	sbiw	r28, 0x00	; 0
    23ba:	a1 f7       	brne	.-24     	; 0x23a4 <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e0       	ldi	r20, 0x00	; 0
    23c2:	52 e4       	ldi	r21, 0x42	; 66
    23c4:	60 91 ad 05 	lds	r22, 0x05AD
    23c8:	70 91 ae 05 	lds	r23, 0x05AE
    23cc:	80 91 af 05 	lds	r24, 0x05AF
    23d0:	90 91 b0 05 	lds	r25, 0x05B0
    23d4:	0e 94 f5 4c 	call	0x99ea	; 0x99ea <__addsf3>
    23d8:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
    23dc:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	52 e4       	ldi	r21, 0x42	; 66
    23e6:	60 91 a9 05 	lds	r22, 0x05A9
    23ea:	70 91 aa 05 	lds	r23, 0x05AA
    23ee:	80 91 ab 05 	lds	r24, 0x05AB
    23f2:	90 91 ac 05 	lds	r25, 0x05AC
    23f6:	0e 94 f5 4c 	call	0x99ea	; 0x99ea <__addsf3>
    23fa:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
    23fe:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    2400:	d7 fd       	sbrc	r29, 7
    2402:	06 c0       	rjmp	.+12     	; 0x2410 <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    2404:	c1 34       	cpi	r28, 0x41	; 65
    2406:	d1 05       	cpc	r29, r1
    2408:	2c f0       	brlt	.+10     	; 0x2414 <Display_balance+0x80>
    240a:	c0 e4       	ldi	r28, 0x40	; 64
    240c:	d0 e0       	ldi	r29, 0x00	; 0
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    2410:	c0 e0       	ldi	r28, 0x00	; 0
    2412:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    2414:	d7 fc       	sbrc	r13, 7
    2416:	08 c0       	rjmp	.+16     	; 0x2428 <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    2418:	81 e8       	ldi	r24, 0x81	; 129
    241a:	c8 16       	cp	r12, r24
    241c:	d1 04       	cpc	r13, r1
    241e:	34 f0       	brlt	.+12     	; 0x242c <Display_balance+0x98>
    2420:	80 e8       	ldi	r24, 0x80	; 128
    2422:	c8 2e       	mov	r12, r24
    2424:	d1 2c       	mov	r13, r1
    2426:	02 c0       	rjmp	.+4      	; 0x242c <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    2428:	c1 2c       	mov	r12, r1
    242a:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    242c:	27 e3       	ldi	r18, 0x37	; 55
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	42 e0       	ldi	r20, 0x02	; 2
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	69 e0       	ldi	r22, 0x09	; 9
    2436:	71 e0       	ldi	r23, 0x01	; 1
    2438:	8c e0       	ldi	r24, 0x0C	; 12
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    2440:	ee 24       	eor	r14, r14
    2442:	e3 94       	inc	r14
    2444:	00 e4       	ldi	r16, 0x40	; 64
    2446:	20 e8       	ldi	r18, 0x80	; 128
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	0e 94 79 25 	call	0x4af2	; 0x4af2 <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    2454:	05 e1       	ldi	r16, 0x15	; 21
    2456:	25 e1       	ldi	r18, 0x15	; 21
    2458:	46 e1       	ldi	r20, 0x16	; 22
    245a:	66 e3       	ldi	r22, 0x36	; 54
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	0e 94 79 25 	call	0x4af2	; 0x4af2 <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    2464:	08 e3       	ldi	r16, 0x38	; 56
    2466:	20 e4       	ldi	r18, 0x40	; 64
    2468:	48 e0       	ldi	r20, 0x08	; 8
    246a:	60 e4       	ldi	r22, 0x40	; 64
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    2474:	00 e2       	ldi	r16, 0x20	; 32
    2476:	20 e6       	ldi	r18, 0x60	; 96
    2478:	40 e2       	ldi	r20, 0x20	; 32
    247a:	60 e2       	ldi	r22, 0x20	; 32
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    2484:	01 e0       	ldi	r16, 0x01	; 1
    2486:	28 e0       	ldi	r18, 0x08	; 8
    2488:	4c 2f       	mov	r20, r28
    248a:	6c 2d       	mov	r22, r12
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
			clear_buffer(buffer);
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
    24a4:	7d cf       	rjmp	.-262    	; 0x23a0 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	0f 91       	pop	r16
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	08 95       	ret

000024b4 <add_log>:
// Code
//************************************************************

void add_log(uint8_t error)
{
	Config.Log[Config.log_pointer] = error;
    24b4:	90 91 cc 07 	lds	r25, 0x07CC
    24b8:	e9 2f       	mov	r30, r25
    24ba:	ff 27       	eor	r31, r31
    24bc:	e7 fd       	sbrc	r30, 7
    24be:	f0 95       	com	r31
    24c0:	e3 53       	subi	r30, 0x33	; 51
    24c2:	f8 4f       	sbci	r31, 0xF8	; 248
    24c4:	80 83       	st	Z, r24
	Config.log_pointer++;
    24c6:	9f 5f       	subi	r25, 0xFF	; 255
	
	if (Config.log_pointer >= (LOGLENGTH-1))
    24c8:	93 31       	cpi	r25, 0x13	; 19
    24ca:	1c f4       	brge	.+6      	; 0x24d2 <add_log+0x1e>
//************************************************************

void add_log(uint8_t error)
{
	Config.Log[Config.log_pointer] = error;
	Config.log_pointer++;
    24cc:	90 93 cc 07 	sts	0x07CC, r25
    24d0:	03 c0       	rjmp	.+6      	; 0x24d8 <add_log+0x24>
	
	if (Config.log_pointer >= (LOGLENGTH-1))
	{
		Config.log_pointer = (LOGLENGTH-1);
    24d2:	83 e1       	ldi	r24, 0x13	; 19
    24d4:	80 93 cc 07 	sts	0x07CC, r24
	}
	
	// Save log and log pointer
	Save_Config_to_EEPROM();
    24d8:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>

000024dc <menu_log>:
}

void menu_log(void)
{
    24dc:	af 92       	push	r10
    24de:	bf 92       	push	r11
    24e0:	cf 92       	push	r12
    24e2:	df 92       	push	r13
    24e4:	ef 92       	push	r14
    24e6:	ff 92       	push	r15
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
	int8_t	log_start = 0;
    24f0:	b1 2c       	mov	r11, r1
	while(BUTTON1 != 0)
	{
		if (BUTTON4 == 0)
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    24f2:	9d ec       	ldi	r25, 0xCD	; 205
    24f4:	c9 2e       	mov	r12, r25
    24f6:	97 e0       	ldi	r25, 0x07	; 7
    24f8:	d9 2e       	mov	r13, r25
    24fa:	24 e1       	ldi	r18, 0x14	; 20
    24fc:	a2 2e       	mov	r10, r18

void menu_log(void)
{
	int8_t	log_start = 0;
	
	while(BUTTON1 != 0)
    24fe:	1f 9b       	sbis	0x03, 7	; 3
    2500:	4d c0       	rjmp	.+154    	; 0x259c <menu_log+0xc0>
	{
		if (BUTTON4 == 0)
    2502:	1c 99       	sbic	0x03, 4	; 3
    2504:	09 c0       	rjmp	.+18     	; 0x2518 <menu_log+0x3c>
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    2506:	f6 01       	movw	r30, r12
    2508:	2a 2d       	mov	r18, r10
    250a:	11 92       	st	Z+, r1
    250c:	2a 95       	dec	r18
    250e:	e9 f7       	brne	.-6      	; 0x250a <menu_log+0x2e>
			Config.log_pointer = 0;
    2510:	10 92 cc 07 	sts	0x07CC, r1

			// Save log and log pointer
			Save_Config_to_EEPROM();			
    2514:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>
		}
		
		if (BUTTON2 == 0)
    2518:	1e 99       	sbic	0x03, 6	; 3
    251a:	03 c0       	rjmp	.+6      	; 0x2522 <menu_log+0x46>
		{
			log_start--;
    251c:	ba 94       	dec	r11
    251e:	b7 fc       	sbrc	r11, 7
    2520:	b1 2c       	mov	r11, r1
			{
				log_start = 0;
			}
		}

		if (BUTTON3 == 0)
    2522:	1d 99       	sbic	0x03, 5	; 3
    2524:	06 c0       	rjmp	.+12     	; 0x2532 <menu_log+0x56>
		{
			log_start++;
    2526:	b3 94       	inc	r11
			
			if (log_start >= (LOGLENGTH - 5))
    2528:	8e e0       	ldi	r24, 0x0E	; 14
    252a:	8b 15       	cp	r24, r11
    252c:	14 f4       	brge	.+4      	; 0x2532 <menu_log+0x56>
			{
				log_start = 15;
    252e:	8f e0       	ldi	r24, 0x0F	; 15
    2530:	b8 2e       	mov	r11, r24
    2532:	00 e0       	ldi	r16, 0x00	; 0
    2534:	10 e0       	ldi	r17, 0x00	; 0
    2536:	c0 e0       	ldi	r28, 0x00	; 0
    2538:	d0 e0       	ldi	r29, 0x00	; 0
    253a:	eb 2c       	mov	r14, r11
    253c:	ff 24       	eor	r15, r15
    253e:	e7 fc       	sbrc	r14, 7
    2540:	f0 94       	com	r15
    2542:	f7 01       	movw	r30, r14
    2544:	ef 53       	subi	r30, 0x3F	; 63
    2546:	fa 4f       	sbci	r31, 0xFA	; 250
    2548:	7f 01       	movw	r14, r30
    254a:	f7 01       	movw	r30, r14
    254c:	ec 0f       	add	r30, r28
    254e:	fd 1f       	adc	r31, r29
    2550:	e4 5f       	subi	r30, 0xF4	; 244
    2552:	fd 4f       	sbci	r31, 0xFD	; 253
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
    2554:	80 81       	ld	r24, Z
    2556:	99 27       	eor	r25, r25
    2558:	87 fd       	sbrc	r24, 7
    255a:	90 95       	com	r25
    255c:	98 01       	movw	r18, r16
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	50 e0       	ldi	r21, 0x00	; 0
    2562:	61 e2       	ldi	r22, 0x21	; 33
    2564:	7a e0       	ldi	r23, 0x0A	; 10
    2566:	85 5e       	subi	r24, 0xE5	; 229
    2568:	9e 4f       	sbci	r25, 0xFE	; 254
    256a:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
    256e:	21 96       	adiw	r28, 0x01	; 1
    2570:	06 5f       	subi	r16, 0xF6	; 246
    2572:	1f 4f       	sbci	r17, 0xFF	; 255
				log_start = 15;
			}
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
    2574:	c5 30       	cpi	r28, 0x05	; 5
    2576:	d1 05       	cpc	r29, r1
    2578:	41 f7       	brne	.-48     	; 0x254a <menu_log+0x6e>
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
		}

		print_menu_frame(LOG);
    257a:	83 e0       	ldi	r24, 0x03	; 3
    257c:	0e 94 5d 33 	call	0x66ba	; 0x66ba <print_menu_frame>
		clear_buffer(buffer);
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	91 e0       	ldi	r25, 0x01	; 1
    2584:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
    2588:	ff e7       	ldi	r31, 0x7F	; 127
    258a:	2a e1       	ldi	r18, 0x1A	; 26
    258c:	86 e0       	ldi	r24, 0x06	; 6
    258e:	f1 50       	subi	r31, 0x01	; 1
    2590:	20 40       	sbci	r18, 0x00	; 0
    2592:	80 40       	sbci	r24, 0x00	; 0
    2594:	e1 f7       	brne	.-8      	; 0x258e <menu_log+0xb2>
    2596:	00 c0       	rjmp	.+0      	; 0x2598 <menu_log+0xbc>
    2598:	00 00       	nop
    259a:	b1 cf       	rjmp	.-158    	; 0x24fe <menu_log+0x22>
		
		_delay_ms(100);
	}
}
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	1f 91       	pop	r17
    25a2:	0f 91       	pop	r16
    25a4:	ff 90       	pop	r15
    25a6:	ef 90       	pop	r14
    25a8:	df 90       	pop	r13
    25aa:	cf 90       	pop	r12
    25ac:	bf 90       	pop	r11
    25ae:	af 90       	pop	r10
    25b0:	08 95       	ret

000025b2 <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    25b2:	0e 94 24 33 	call	0x6648	; 0x6648 <init_int>
	
	while(BUTTON1 != 0)
    25b6:	1f 9b       	sbis	0x03, 7	; 3
    25b8:	fa c0       	rjmp	.+500    	; 0x27ae <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    25ba:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    25bc:	0e 94 95 4a 	call	0x952a	; 0x952a <CenterSticks>
		}

		RxGetChannels();
    25c0:	0e 94 00 4a 	call	0x9400	; 0x9400 <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	61 e2       	ldi	r22, 0x21	; 33
    25ce:	7a e0       	ldi	r23, 0x0A	; 10
    25d0:	82 e7       	ldi	r24, 0x72	; 114
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    25d8:	2a e0       	ldi	r18, 0x0A	; 10
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	61 e2       	ldi	r22, 0x21	; 33
    25e2:	7a e0       	ldi	r23, 0x0A	; 10
    25e4:	80 e2       	ldi	r24, 0x20	; 32
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    25ec:	24 e1       	ldi	r18, 0x14	; 20
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	50 e0       	ldi	r21, 0x00	; 0
    25f4:	61 e2       	ldi	r22, 0x21	; 33
    25f6:	7a e0       	ldi	r23, 0x0A	; 10
    25f8:	83 e7       	ldi	r24, 0x73	; 115
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    2600:	2e e1       	ldi	r18, 0x1E	; 30
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	50 e0       	ldi	r21, 0x00	; 0
    2608:	61 e2       	ldi	r22, 0x21	; 33
    260a:	7a e0       	ldi	r23, 0x0A	; 10
    260c:	83 e2       	ldi	r24, 0x23	; 35
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	46 e4       	ldi	r20, 0x46	; 70
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	61 e2       	ldi	r22, 0x21	; 33
    261e:	7a e0       	ldi	r23, 0x0A	; 10
    2620:	8d e6       	ldi	r24, 0x6D	; 109
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    2628:	2a e0       	ldi	r18, 0x0A	; 10
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	46 e4       	ldi	r20, 0x46	; 70
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	61 e2       	ldi	r22, 0x21	; 33
    2632:	7a e0       	ldi	r23, 0x0A	; 10
    2634:	8e e6       	ldi	r24, 0x6E	; 110
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    263c:	24 e1       	ldi	r18, 0x14	; 20
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	46 e4       	ldi	r20, 0x46	; 70
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	61 e2       	ldi	r22, 0x21	; 33
    2646:	7a e0       	ldi	r23, 0x0A	; 10
    2648:	8f e6       	ldi	r24, 0x6F	; 111
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    2650:	2e e1       	ldi	r18, 0x1E	; 30
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	46 e4       	ldi	r20, 0x46	; 70
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	61 e2       	ldi	r22, 0x21	; 33
    265a:	7a e0       	ldi	r23, 0x0A	; 10
    265c:	80 e7       	ldi	r24, 0x70	; 112
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    2664:	80 91 87 08 	lds	r24, 0x0887
    2668:	90 91 88 08 	lds	r25, 0x0888
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    266c:	4a e0       	ldi	r20, 0x0A	; 10
    266e:	6a e6       	ldi	r22, 0x6A	; 106
    2670:	75 e0       	ldi	r23, 0x05	; 5
    2672:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	45 e2       	ldi	r20, 0x25	; 37
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	61 e2       	ldi	r22, 0x21	; 33
    2680:	7a e0       	ldi	r23, 0x0A	; 10
    2682:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    2686:	80 91 8b 08 	lds	r24, 0x088B
    268a:	90 91 8c 08 	lds	r25, 0x088C
    268e:	4a e0       	ldi	r20, 0x0A	; 10
    2690:	6a e6       	ldi	r22, 0x6A	; 106
    2692:	75 e0       	ldi	r23, 0x05	; 5
    2694:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
    2698:	2a e0       	ldi	r18, 0x0A	; 10
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	45 e2       	ldi	r20, 0x25	; 37
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	61 e2       	ldi	r22, 0x21	; 33
    26a2:	7a e0       	ldi	r23, 0x0A	; 10
    26a4:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    26a8:	80 91 8d 08 	lds	r24, 0x088D
    26ac:	90 91 8e 08 	lds	r25, 0x088E
    26b0:	4a e0       	ldi	r20, 0x0A	; 10
    26b2:	6a e6       	ldi	r22, 0x6A	; 106
    26b4:	75 e0       	ldi	r23, 0x05	; 5
    26b6:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
    26ba:	24 e1       	ldi	r18, 0x14	; 20
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	45 e2       	ldi	r20, 0x25	; 37
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	61 e2       	ldi	r22, 0x21	; 33
    26c4:	7a e0       	ldi	r23, 0x0A	; 10
    26c6:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    26ca:	80 91 8f 08 	lds	r24, 0x088F
    26ce:	90 91 90 08 	lds	r25, 0x0890
    26d2:	4a e0       	ldi	r20, 0x0A	; 10
    26d4:	6a e6       	ldi	r22, 0x6A	; 106
    26d6:	75 e0       	ldi	r23, 0x05	; 5
    26d8:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
    26dc:	2e e1       	ldi	r18, 0x1E	; 30
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	45 e2       	ldi	r20, 0x25	; 37
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	61 e2       	ldi	r22, 0x21	; 33
    26e6:	7a e0       	ldi	r23, 0x0A	; 10
    26e8:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    26ec:	80 91 91 08 	lds	r24, 0x0891
    26f0:	90 91 92 08 	lds	r25, 0x0892
    26f4:	4a e0       	ldi	r20, 0x0A	; 10
    26f6:	6a e6       	ldi	r22, 0x6A	; 106
    26f8:	75 e0       	ldi	r23, 0x05	; 5
    26fa:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	44 e6       	ldi	r20, 0x64	; 100
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	61 e2       	ldi	r22, 0x21	; 33
    2708:	7a e0       	ldi	r23, 0x0A	; 10
    270a:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    270e:	80 91 93 08 	lds	r24, 0x0893
    2712:	90 91 94 08 	lds	r25, 0x0894
    2716:	4a e0       	ldi	r20, 0x0A	; 10
    2718:	6a e6       	ldi	r22, 0x6A	; 106
    271a:	75 e0       	ldi	r23, 0x05	; 5
    271c:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
    2720:	2a e0       	ldi	r18, 0x0A	; 10
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	44 e6       	ldi	r20, 0x64	; 100
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	61 e2       	ldi	r22, 0x21	; 33
    272a:	7a e0       	ldi	r23, 0x0A	; 10
    272c:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    2730:	80 91 95 08 	lds	r24, 0x0895
    2734:	90 91 96 08 	lds	r25, 0x0896
    2738:	4a e0       	ldi	r20, 0x0A	; 10
    273a:	6a e6       	ldi	r22, 0x6A	; 106
    273c:	75 e0       	ldi	r23, 0x05	; 5
    273e:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
    2742:	24 e1       	ldi	r18, 0x14	; 20
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	44 e6       	ldi	r20, 0x64	; 100
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	61 e2       	ldi	r22, 0x21	; 33
    274c:	7a e0       	ldi	r23, 0x0A	; 10
    274e:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    2752:	80 91 97 08 	lds	r24, 0x0897
    2756:	90 91 98 08 	lds	r25, 0x0898
    275a:	4a e0       	ldi	r20, 0x0A	; 10
    275c:	6a e6       	ldi	r22, 0x6A	; 106
    275e:	75 e0       	ldi	r23, 0x05	; 5
    2760:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
    2764:	2e e1       	ldi	r18, 0x1E	; 30
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	44 e6       	ldi	r20, 0x64	; 100
    276a:	50 e0       	ldi	r21, 0x00	; 0
    276c:	61 e2       	ldi	r22, 0x21	; 33
    276e:	7a e0       	ldi	r23, 0x0A	; 10
    2770:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2774:	29 e3       	ldi	r18, 0x39	; 57
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	69 e0       	ldi	r22, 0x09	; 9
    277e:	71 e0       	ldi	r23, 0x01	; 1
    2780:	8c e0       	ldi	r24, 0x0C	; 12
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    2788:	27 e3       	ldi	r18, 0x37	; 55
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	4e e6       	ldi	r20, 0x6E	; 110
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	61 e2       	ldi	r22, 0x21	; 33
    2792:	7a e0       	ldi	r23, 0x0A	; 10
    2794:	8c e3       	ldi	r24, 0x3C	; 60
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	91 e0       	ldi	r25, 0x01	; 1
    27a0:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
		clear_buffer(buffer);
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	91 e0       	ldi	r25, 0x01	; 1
    27a8:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
    27ac:	04 cf       	rjmp	.-504    	; 0x25b6 <Display_rcinput+0x4>
	}
}
    27ae:	08 95       	ret

000027b0 <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    27b0:	cf 93       	push	r28
	bool	first_time = true;
	
	clear_buffer(buffer);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	91 e0       	ldi	r25, 0x01	; 1
    27b6:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    27ba:	c1 e0       	ldi	r28, 0x01	; 1
	
	clear_buffer(buffer);
	
	// While BACK not pressed
	while(BUTTON1 != 0)
    27bc:	1f 9b       	sbis	0x03, 7	; 3
    27be:	e7 c0       	rjmp	.+462    	; 0x298e <Display_sensors+0x1de>
	{
		ReadGyros();
    27c0:	0e 94 42 27 	call	0x4e84	; 0x4e84 <ReadGyros>
		ReadAcc();
    27c4:	0e 94 4a 10 	call	0x2094	; 0x2094 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	45 e2       	ldi	r20, 0x25	; 37
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	61 e2       	ldi	r22, 0x21	; 33
    27d2:	7a e0       	ldi	r23, 0x0A	; 10
    27d4:	8a e1       	ldi	r24, 0x1A	; 26
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	4d e4       	ldi	r20, 0x4D	; 77
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	61 e2       	ldi	r22, 0x21	; 33
    27e6:	7a e0       	ldi	r23, 0x0A	; 10
    27e8:	8e e1       	ldi	r24, 0x1E	; 30
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    27f0:	2d e0       	ldi	r18, 0x0D	; 13
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	45 e0       	ldi	r20, 0x05	; 5
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	61 e2       	ldi	r22, 0x21	; 33
    27fa:	7a e0       	ldi	r23, 0x0A	; 10
    27fc:	8b e1       	ldi	r24, 0x1B	; 27
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    2804:	27 e1       	ldi	r18, 0x17	; 23
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	45 e0       	ldi	r20, 0x05	; 5
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	61 e2       	ldi	r22, 0x21	; 33
    280e:	7a e0       	ldi	r23, 0x0A	; 10
    2810:	8c e1       	ldi	r24, 0x1C	; 28
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    2818:	21 e2       	ldi	r18, 0x21	; 33
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	45 e0       	ldi	r20, 0x05	; 5
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	61 e2       	ldi	r22, 0x21	; 33
    2822:	7a e0       	ldi	r23, 0x0A	; 10
    2824:	8d e1       	ldi	r24, 0x1D	; 29
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
    282c:	4a e0       	ldi	r20, 0x0A	; 10
    282e:	6a e6       	ldi	r22, 0x6A	; 106
    2830:	75 e0       	ldi	r23, 0x05	; 5
    2832:	80 91 83 05 	lds	r24, 0x0583
    2836:	90 91 84 05 	lds	r25, 0x0584
    283a:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    283e:	2d e0       	ldi	r18, 0x0D	; 13
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	48 e2       	ldi	r20, 0x28	; 40
    2844:	50 e0       	ldi	r21, 0x00	; 0
    2846:	61 e2       	ldi	r22, 0x21	; 33
    2848:	7a e0       	ldi	r23, 0x0A	; 10
    284a:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
    284e:	4a e0       	ldi	r20, 0x0A	; 10
    2850:	6a e6       	ldi	r22, 0x6A	; 106
    2852:	75 e0       	ldi	r23, 0x05	; 5
    2854:	80 91 85 05 	lds	r24, 0x0585
    2858:	90 91 86 05 	lds	r25, 0x0586
    285c:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    2860:	27 e1       	ldi	r18, 0x17	; 23
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	48 e2       	ldi	r20, 0x28	; 40
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	61 e2       	ldi	r22, 0x21	; 33
    286a:	7a e0       	ldi	r23, 0x0A	; 10
    286c:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
    2870:	4a e0       	ldi	r20, 0x0A	; 10
    2872:	6a e6       	ldi	r22, 0x6A	; 106
    2874:	75 e0       	ldi	r23, 0x05	; 5
    2876:	80 91 87 05 	lds	r24, 0x0587
    287a:	90 91 88 05 	lds	r25, 0x0588
    287e:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2882:	21 e2       	ldi	r18, 0x21	; 33
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	48 e2       	ldi	r20, 0x28	; 40
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	61 e2       	ldi	r22, 0x21	; 33
    288c:	7a e0       	ldi	r23, 0x0A	; 10
    288e:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
    2892:	4a e0       	ldi	r20, 0x0A	; 10
    2894:	6a e6       	ldi	r22, 0x6A	; 106
    2896:	75 e0       	ldi	r23, 0x05	; 5
    2898:	80 91 3e 05 	lds	r24, 0x053E
    289c:	90 91 3f 05 	lds	r25, 0x053F
    28a0:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    28a4:	2d e0       	ldi	r18, 0x0D	; 13
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e5       	ldi	r20, 0x50	; 80
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	61 e2       	ldi	r22, 0x21	; 33
    28ae:	7a e0       	ldi	r23, 0x0A	; 10
    28b0:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
    28b4:	4a e0       	ldi	r20, 0x0A	; 10
    28b6:	6a e6       	ldi	r22, 0x6A	; 106
    28b8:	75 e0       	ldi	r23, 0x05	; 5
    28ba:	80 91 40 05 	lds	r24, 0x0540
    28be:	90 91 41 05 	lds	r25, 0x0541
    28c2:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    28c6:	27 e1       	ldi	r18, 0x17	; 23
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e5       	ldi	r20, 0x50	; 80
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	61 e2       	ldi	r22, 0x21	; 33
    28d0:	7a e0       	ldi	r23, 0x0A	; 10
    28d2:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
    28d6:	4a e0       	ldi	r20, 0x0A	; 10
    28d8:	6a e6       	ldi	r22, 0x6A	; 106
    28da:	75 e0       	ldi	r23, 0x05	; 5
    28dc:	80 91 42 05 	lds	r24, 0x0542
    28e0:	90 91 43 05 	lds	r25, 0x0543
    28e4:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    28e8:	21 e2       	ldi	r18, 0x21	; 33
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e5       	ldi	r20, 0x50	; 80
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	61 e2       	ldi	r22, 0x21	; 33
    28f2:	7a e0       	ldi	r23, 0x0A	; 10
    28f4:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    28f8:	29 e3       	ldi	r18, 0x39	; 57
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	50 e0       	ldi	r21, 0x00	; 0
    2900:	69 e0       	ldi	r22, 0x09	; 9
    2902:	71 e0       	ldi	r23, 0x01	; 1
    2904:	8c e0       	ldi	r24, 0x0C	; 12
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    290c:	27 e3       	ldi	r18, 0x37	; 55
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4c e6       	ldi	r20, 0x6C	; 108
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	61 e2       	ldi	r22, 0x21	; 33
    2916:	7a e0       	ldi	r23, 0x0A	; 10
    2918:	8c e3       	ldi	r24, 0x3C	; 60
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    2920:	27 e3       	ldi	r18, 0x37	; 55
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4b e4       	ldi	r20, 0x4B	; 75
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	61 e2       	ldi	r22, 0x21	; 33
    292a:	7a e0       	ldi	r23, 0x0A	; 10
    292c:	89 e1       	ldi	r24, 0x19	; 25
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	91 e0       	ldi	r25, 0x01	; 1
    2938:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
		clear_buffer(buffer);
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	91 e0       	ldi	r25, 0x01	; 1
    2940:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
	
		if (first_time)
    2944:	c1 11       	cpse	r28, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    2946:	0e 94 2b 39 	call	0x7256	; 0x7256 <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    294a:	1c 99       	sbic	0x03, 4	; 3
    294c:	10 c0       	rjmp	.+32     	; 0x296e <Display_sensors+0x1be>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    294e:	0e 94 2b 39 	call	0x7256	; 0x7256 <Wait_BUTTON4>
    2952:	2f e3       	ldi	r18, 0x3F	; 63
    2954:	82 e4       	ldi	r24, 0x42	; 66
    2956:	9f e0       	ldi	r25, 0x0F	; 15
    2958:	21 50       	subi	r18, 0x01	; 1
    295a:	80 40       	sbci	r24, 0x00	; 0
    295c:	90 40       	sbci	r25, 0x00	; 0
    295e:	e1 f7       	brne	.-8      	; 0x2958 <Display_sensors+0x1a8>
    2960:	00 c0       	rjmp	.+0      	; 0x2962 <Display_sensors+0x1b2>
    2962:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    2964:	0e 94 6f 27 	call	0x4ede	; 0x4ede <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	0e 94 ae 10 	call	0x215c	; 0x215c <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    296e:	1d 99       	sbic	0x03, 5	; 3
    2970:	0c c0       	rjmp	.+24     	; 0x298a <Display_sensors+0x1da>
    2972:	2f e3       	ldi	r18, 0x3F	; 63
    2974:	82 e4       	ldi	r24, 0x42	; 66
    2976:	9f e0       	ldi	r25, 0x0F	; 15
    2978:	21 50       	subi	r18, 0x01	; 1
    297a:	80 40       	sbci	r24, 0x00	; 0
    297c:	90 40       	sbci	r25, 0x00	; 0
    297e:	e1 f7       	brne	.-8      	; 0x2978 <Display_sensors+0x1c8>
    2980:	00 c0       	rjmp	.+0      	; 0x2982 <Display_sensors+0x1d2>
    2982:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	0e 94 ae 10 	call	0x215c	; 0x215c <CalibrateAcc>
    298a:	c0 e0       	ldi	r28, 0x00	; 0
    298c:	17 cf       	rjmp	.-466    	; 0x27bc <Display_sensors+0xc>
		}		
	}
}
    298e:	cf 91       	pop	r28
    2990:	08 95       	ret

00002992 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2992:	bf 92       	push	r11
    2994:	cf 92       	push	r12
    2996:	df 92       	push	r13
    2998:	ef 92       	push	r14
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	00 d0       	rcall	.+0      	; 0x29a6 <Display_status+0x14>
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <Display_status+0x16>
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;
	//uint16_t x_text = 0;

	clear_buffer(buffer);
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	50 e0       	ldi	r21, 0x00	; 0
    29bc:	61 e2       	ldi	r22, 0x21	; 33
    29be:	7a e0       	ldi	r23, 0x0A	; 10
    29c0:	88 e0       	ldi	r24, 0x08	; 8
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    29c8:	2c e0       	ldi	r18, 0x0C	; 12
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	61 e2       	ldi	r22, 0x21	; 33
    29d2:	7a e0       	ldi	r23, 0x0A	; 10
    29d4:	8a e0       	ldi	r24, 0x0A	; 10
    29d6:	91 e0       	ldi	r25, 0x01	; 1
    29d8:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    29dc:	28 e1       	ldi	r18, 0x18	; 24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e0       	ldi	r20, 0x00	; 0
    29e2:	50 e0       	ldi	r21, 0x00	; 0
    29e4:	61 e2       	ldi	r22, 0x21	; 33
    29e6:	7a e0       	ldi	r23, 0x0A	; 10
    29e8:	8b e0       	ldi	r24, 0x0B	; 11
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    29f0:	28 e1       	ldi	r18, 0x18	; 24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	48 e5       	ldi	r20, 0x58	; 88
    29f6:	50 e0       	ldi	r21, 0x00	; 0
    29f8:	61 e2       	ldi	r22, 0x21	; 33
    29fa:	7a e0       	ldi	r23, 0x0A	; 10
    29fc:	87 e1       	ldi	r24, 0x17	; 23
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    2a04:	2b e3       	ldi	r18, 0x3B	; 59
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	69 e0       	ldi	r22, 0x09	; 9
    2a0e:	71 e0       	ldi	r23, 0x01	; 1
    2a10:	89 e0       	ldi	r24, 0x09	; 9
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    2a18:	27 e3       	ldi	r18, 0x37	; 55
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a e0       	ldi	r20, 0x0A	; 10
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	61 e2       	ldi	r22, 0x21	; 33
    2a22:	7a e0       	ldi	r23, 0x0A	; 10
    2a24:	8e e0       	ldi	r24, 0x0E	; 14
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    2a2c:	40 91 ea 05 	lds	r20, 0x05EA
    2a30:	55 27       	eor	r21, r21
    2a32:	47 fd       	sbrc	r20, 7
    2a34:	50 95       	com	r21
    2a36:	42 5c       	subi	r20, 0xC2	; 194
    2a38:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3a:	0c e0       	ldi	r16, 0x0C	; 12
    2a3c:	2d e2       	ldi	r18, 0x2D	; 45
    2a3e:	61 e0       	ldi	r22, 0x01	; 1
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 f3 33 	call	0x67e6	; 0x67e6 <print_menu_text>
    2a48:	4a e0       	ldi	r20, 0x0A	; 10
    2a4a:	6a e6       	ldi	r22, 0x6A	; 106
    2a4c:	75 e0       	ldi	r23, 0x05	; 5
    2a4e:	80 91 21 05 	lds	r24, 0x0521
    2a52:	90 91 22 05 	lds	r25, 0x0522
    2a56:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    2a5a:	28 e1       	ldi	r18, 0x18	; 24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4e e6       	ldi	r20, 0x6E	; 110
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	61 e2       	ldi	r22, 0x21	; 33
    2a64:	7a e0       	ldi	r23, 0x0A	; 10
    2a66:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    2a6a:	80 91 ea 05 	lds	r24, 0x05EA
    2a6e:	81 30       	cpi	r24, 0x01	; 1
    2a70:	d9 f4       	brne	.+54     	; 0x2aa8 <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    2a72:	2c e0       	ldi	r18, 0x0C	; 12
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	4d e4       	ldi	r20, 0x4D	; 77
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	61 e2       	ldi	r22, 0x21	; 33
    2a7c:	7a e0       	ldi	r23, 0x0A	; 10
    2a7e:	88 e1       	ldi	r24, 0x18	; 24
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    2a86:	80 91 1c 05 	lds	r24, 0x051C
    2a8a:	90 91 1d 05 	lds	r25, 0x051D
    2a8e:	4a e0       	ldi	r20, 0x0A	; 10
    2a90:	6a e6       	ldi	r22, 0x6A	; 106
    2a92:	75 e0       	ldi	r23, 0x05	; 5
    2a94:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
    2a98:	2c e0       	ldi	r18, 0x0C	; 12
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	4e e6       	ldi	r20, 0x6E	; 110
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	61 e2       	ldi	r22, 0x21	; 33
    2aa2:	7a e0       	ldi	r23, 0x0A	; 10
    2aa4:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    2aa8:	80 91 21 05 	lds	r24, 0x0521
    2aac:	90 91 22 05 	lds	r25, 0x0522
    2ab0:	18 16       	cp	r1, r24
    2ab2:	19 06       	cpc	r1, r25
    2ab4:	4c f0       	brlt	.+18     	; 0x2ac8 <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    2ab6:	28 e1       	ldi	r18, 0x18	; 24
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4d e2       	ldi	r20, 0x2D	; 45
    2abc:	50 e0       	ldi	r21, 0x00	; 0
    2abe:	61 e2       	ldi	r22, 0x21	; 33
    2ac0:	7a e0       	ldi	r23, 0x0A	; 10
    2ac2:	80 e3       	ldi	r24, 0x30	; 48
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	31 c0       	rjmp	.+98     	; 0x2b2a <Display_status+0x198>
	}
	else if (transition >= 100)
    2ac8:	84 36       	cpi	r24, 0x64	; 100
    2aca:	91 05       	cpc	r25, r1
    2acc:	4c f0       	brlt	.+18     	; 0x2ae0 <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    2ace:	28 e1       	ldi	r18, 0x18	; 24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	4d e2       	ldi	r20, 0x2D	; 45
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	61 e2       	ldi	r22, 0x21	; 33
    2ad8:	7a e0       	ldi	r23, 0x0A	; 10
    2ada:	82 e3       	ldi	r24, 0x32	; 50
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	25 c0       	rjmp	.+74     	; 0x2b2a <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    2ae0:	20 91 f0 05 	lds	r18, 0x05F0
    2ae4:	33 27       	eor	r19, r19
    2ae6:	27 fd       	sbrc	r18, 7
    2ae8:	30 95       	com	r19
    2aea:	82 17       	cp	r24, r18
    2aec:	93 07       	cpc	r25, r19
    2aee:	49 f4       	brne	.+18     	; 0x2b02 <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    2af0:	28 e1       	ldi	r18, 0x18	; 24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	4d e2       	ldi	r20, 0x2D	; 45
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	61 e2       	ldi	r22, 0x21	; 33
    2afa:	7a e0       	ldi	r23, 0x0A	; 10
    2afc:	81 e3       	ldi	r24, 0x31	; 49
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	14 c0       	rjmp	.+40     	; 0x2b2a <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    2b02:	82 17       	cp	r24, r18
    2b04:	93 07       	cpc	r25, r19
    2b06:	4c f4       	brge	.+18     	; 0x2b1a <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    2b08:	28 e1       	ldi	r18, 0x18	; 24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	4d e2       	ldi	r20, 0x2D	; 45
    2b0e:	50 e0       	ldi	r21, 0x00	; 0
    2b10:	61 e2       	ldi	r22, 0x21	; 33
    2b12:	7a e0       	ldi	r23, 0x0A	; 10
    2b14:	83 e3       	ldi	r24, 0x33	; 51
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	08 c0       	rjmp	.+16     	; 0x2b2a <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    2b1a:	28 e1       	ldi	r18, 0x18	; 24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4d e2       	ldi	r20, 0x2D	; 45
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	61 e2       	ldi	r22, 0x21	; 33
    2b24:	7a e0       	ldi	r23, 0x0A	; 10
    2b26:	84 e3       	ldi	r24, 0x34	; 52
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
	}


	// Don't display battery text if there are error messages
	if (General_error == 0)
    2b2e:	80 91 20 05 	lds	r24, 0x0520
    2b32:	81 11       	cpse	r24, r1
    2b34:	85 c0       	rjmp	.+266    	; 0x2c40 <Display_status+0x2ae>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(133,(const unsigned char*)Verdana8,0,36); 	// Battery
    2b36:	24 e2       	ldi	r18, 0x24	; 36
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	61 e2       	ldi	r22, 0x21	; 33
    2b40:	7a e0       	ldi	r23, 0x0A	; 10
    2b42:	85 e8       	ldi	r24, 0x85	; 133
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

		vbat_temp = GetVbat();
    2b4a:	0e 94 d5 4c 	call	0x99aa	; 0x99aa <GetVbat>
    2b4e:	6c 01       	movw	r12, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    2b50:	64 e6       	ldi	r22, 0x64	; 100
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <__udivmodhi4>
    2b58:	8b 01       	movw	r16, r22
    2b5a:	4a e0       	ldi	r20, 0x0A	; 10
    2b5c:	6a e6       	ldi	r22, 0x6A	; 106
    2b5e:	75 e0       	ldi	r23, 0x05	; 5
    2b60:	c8 01       	movw	r24, r16
    2b62:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    2b66:	ae 01       	movw	r20, r28
    2b68:	4f 5f       	subi	r20, 0xFF	; 255
    2b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6c:	61 e2       	ldi	r22, 0x21	; 33
    2b6e:	7a e0       	ldi	r23, 0x0A	; 10
    2b70:	0e 94 15 43 	call	0x862a	; 0x862a <mugui_text_sizestring>
    2b74:	4a e0       	ldi	r20, 0x0A	; 10
    2b76:	6a e6       	ldi	r22, 0x6A	; 106
    2b78:	75 e0       	ldi	r23, 0x05	; 5
    2b7a:	c8 01       	movw	r24, r16
    2b7c:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    2b80:	24 e2       	ldi	r18, 0x24	; 36
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4d e2       	ldi	r20, 0x2D	; 45
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	61 e2       	ldi	r22, 0x21	; 33
    2b8a:	7a e0       	ldi	r23, 0x0A	; 10
    2b8c:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2b90:	2c e9       	ldi	r18, 0x9C	; 156
    2b92:	20 03       	mulsu	r18, r16
    2b94:	70 01       	movw	r14, r0
    2b96:	21 9f       	mul	r18, r17
    2b98:	f0 0c       	add	r15, r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	ec 0c       	add	r14, r12
    2b9e:	fd 1c       	adc	r15, r13

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2ba0:	09 81       	ldd	r16, Y+1	; 0x01
    2ba2:	11 27       	eor	r17, r17
    2ba4:	07 fd       	sbrc	r16, 7
    2ba6:	10 95       	com	r17
    2ba8:	03 5d       	subi	r16, 0xD3	; 211
    2baa:	1f 4f       	sbci	r17, 0xFF	; 255
    2bac:	24 e2       	ldi	r18, 0x24	; 36
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	a8 01       	movw	r20, r16
    2bb2:	61 e2       	ldi	r22, 0x21	; 33
    2bb4:	7a e0       	ldi	r23, 0x0A	; 10
    2bb6:	8c e0       	ldi	r24, 0x0C	; 12
    2bb8:	91 e0       	ldi	r25, 0x01	; 1
    2bba:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2bbe:	ae 01       	movw	r20, r28
    2bc0:	4f 5f       	subi	r20, 0xFF	; 255
    2bc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc4:	61 e2       	ldi	r22, 0x21	; 33
    2bc6:	7a e0       	ldi	r23, 0x0A	; 10
    2bc8:	8a e0       	ldi	r24, 0x0A	; 10
    2bca:	95 e0       	ldi	r25, 0x05	; 5
    2bcc:	0e 94 15 43 	call	0x862a	; 0x862a <mugui_text_sizestring>
		pos3 = size.x;
    2bd0:	c9 80       	ldd	r12, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2bd2:	ae 01       	movw	r20, r28
    2bd4:	4f 5f       	subi	r20, 0xFF	; 255
    2bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd8:	61 e2       	ldi	r22, 0x21	; 33
    2bda:	7a e0       	ldi	r23, 0x0A	; 10
    2bdc:	8c e0       	ldi	r24, 0x0C	; 12
    2bde:	95 e0       	ldi	r25, 0x05	; 5
    2be0:	0e 94 15 43 	call	0x862a	; 0x862a <mugui_text_sizestring>
		pos2 = size.x;
    2be4:	b9 80       	ldd	r11, Y+1	; 0x01
    2be6:	dd 24       	eor	r13, r13
    2be8:	c7 fc       	sbrc	r12, 7
    2bea:	d0 94       	com	r13

		if (vbat_temp >= 10)
    2bec:	8a e0       	ldi	r24, 0x0A	; 10
    2bee:	e8 16       	cp	r14, r24
    2bf0:	f1 04       	cpc	r15, r1
    2bf2:	40 f0       	brcs	.+16     	; 0x2c04 <Display_status+0x272>
    2bf4:	4a e0       	ldi	r20, 0x0A	; 10
    2bf6:	6a e6       	ldi	r22, 0x6A	; 106
    2bf8:	75 e0       	ldi	r23, 0x05	; 5
    2bfa:	c7 01       	movw	r24, r14
    2bfc:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2c00:	a8 01       	movw	r20, r16
    2c02:	16 c0       	rjmp	.+44     	; 0x2c30 <Display_status+0x29e>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2c04:	a8 01       	movw	r20, r16
    2c06:	4c 0d       	add	r20, r12
    2c08:	5d 1d       	adc	r21, r13
    2c0a:	24 e2       	ldi	r18, 0x24	; 36
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	61 e2       	ldi	r22, 0x21	; 33
    2c10:	7a e0       	ldi	r23, 0x0A	; 10
    2c12:	8d e0       	ldi	r24, 0x0D	; 13
    2c14:	91 e0       	ldi	r25, 0x01	; 1
    2c16:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
    2c1a:	4a e0       	ldi	r20, 0x0A	; 10
    2c1c:	6a e6       	ldi	r22, 0x6A	; 106
    2c1e:	75 e0       	ldi	r23, 0x05	; 5
    2c20:	c7 01       	movw	r24, r14
    2c22:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2c26:	a8 01       	movw	r20, r16
    2c28:	4b 0d       	add	r20, r11
    2c2a:	51 1d       	adc	r21, r1
    2c2c:	b7 fc       	sbrc	r11, 7
    2c2e:	5a 95       	dec	r21
    2c30:	4c 0d       	add	r20, r12
    2c32:	5d 1d       	adc	r21, r13
    2c34:	24 e2       	ldi	r18, 0x24	; 36
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	61 e2       	ldi	r22, 0x21	; 33
    2c3a:	7a e0       	ldi	r23, 0x0A	; 10
    2c3c:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
		}
	}
	
	// Display error messages
	if (General_error != 0)
    2c40:	80 91 20 05 	lds	r24, 0x0520
    2c44:	88 23       	and	r24, r24
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <Display_status+0x2b8>
    2c48:	53 c0       	rjmp	.+166    	; 0x2cf0 <Display_status+0x35e>
	{
		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    2c4a:	80 91 20 05 	lds	r24, 0x0520
    2c4e:	83 ff       	sbrs	r24, 3
    2c50:	13 c0       	rjmp	.+38     	; 0x2c78 <Display_status+0x2e6>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    2c52:	25 e2       	ldi	r18, 0x25	; 37
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4f e0       	ldi	r20, 0x0F	; 15
    2c58:	50 e0       	ldi	r21, 0x00	; 0
    2c5a:	63 e7       	ldi	r22, 0x73	; 115
    2c5c:	71 e0       	ldi	r23, 0x01	; 1
    2c5e:	86 e8       	ldi	r24, 0x86	; 134
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    2c66:	25 e2       	ldi	r18, 0x25	; 37
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	4f e4       	ldi	r20, 0x4F	; 79
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	63 e7       	ldi	r22, 0x73	; 115
    2c70:	71 e0       	ldi	r23, 0x01	; 1
    2c72:	8f e0       	ldi	r24, 0x0F	; 15
    2c74:	91 e0       	ldi	r25, 0x01	; 1
    2c76:	3a c0       	rjmp	.+116    	; 0x2cec <Display_status+0x35a>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    2c78:	80 91 20 05 	lds	r24, 0x0520
    2c7c:	81 ff       	sbrs	r24, 1
    2c7e:	13 c0       	rjmp	.+38     	; 0x2ca6 <Display_status+0x314>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    2c80:	25 e2       	ldi	r18, 0x25	; 37
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	4e e1       	ldi	r20, 0x1E	; 30
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	63 e7       	ldi	r22, 0x73	; 115
    2c8a:	71 e0       	ldi	r23, 0x01	; 1
    2c8c:	8b e4       	ldi	r24, 0x4B	; 75
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    2c94:	25 e2       	ldi	r18, 0x25	; 37
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	47 e3       	ldi	r20, 0x37	; 55
    2c9a:	50 e0       	ldi	r21, 0x00	; 0
    2c9c:	63 e7       	ldi	r22, 0x73	; 115
    2c9e:	71 e0       	ldi	r23, 0x01	; 1
    2ca0:	80 e1       	ldi	r24, 0x10	; 16
    2ca2:	91 e0       	ldi	r25, 0x01	; 1
    2ca4:	23 c0       	rjmp	.+70     	; 0x2cec <Display_status+0x35a>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    2ca6:	80 91 20 05 	lds	r24, 0x0520
    2caa:	80 ff       	sbrs	r24, 0
    2cac:	13 c0       	rjmp	.+38     	; 0x2cd4 <Display_status+0x342>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    2cae:	25 e2       	ldi	r18, 0x25	; 37
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	4b e0       	ldi	r20, 0x0B	; 11
    2cb4:	50 e0       	ldi	r21, 0x00	; 0
    2cb6:	63 e7       	ldi	r22, 0x73	; 115
    2cb8:	71 e0       	ldi	r23, 0x01	; 1
    2cba:	89 e6       	ldi	r24, 0x69	; 105
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    2cc2:	25 e2       	ldi	r18, 0x25	; 37
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	42 e5       	ldi	r20, 0x52	; 82
    2cc8:	50 e0       	ldi	r21, 0x00	; 0
    2cca:	63 e7       	ldi	r22, 0x73	; 115
    2ccc:	71 e0       	ldi	r23, 0x01	; 1
    2cce:	8e e0       	ldi	r24, 0x0E	; 14
    2cd0:	91 e0       	ldi	r25, 0x01	; 1
    2cd2:	0c c0       	rjmp	.+24     	; 0x2cec <Display_status+0x35a>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2cd4:	80 91 20 05 	lds	r24, 0x0520
    2cd8:	82 ff       	sbrs	r24, 2
    2cda:	0a c0       	rjmp	.+20     	; 0x2cf0 <Display_status+0x35e>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    2cdc:	25 e2       	ldi	r18, 0x25	; 37
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	49 e1       	ldi	r20, 0x19	; 25
    2ce2:	50 e0       	ldi	r21, 0x00	; 0
    2ce4:	63 e7       	ldi	r22, 0x73	; 115
    2ce6:	71 e0       	ldi	r23, 0x01	; 1
    2ce8:	82 e1       	ldi	r24, 0x12	; 18
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	91 e0       	ldi	r25, 0x01	; 1
    2cf4:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
	clear_buffer(buffer);
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	91 e0       	ldi	r25, 0x01	; 1
    2cfc:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	1f 91       	pop	r17
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	df 90       	pop	r13
    2d16:	cf 90       	pop	r12
    2d18:	bf 90       	pop	r11
    2d1a:	08 95       	ret

00002d1c <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2d1c:	af 92       	push	r10
    2d1e:	bf 92       	push	r11
    2d20:	cf 92       	push	r12
    2d22:	df 92       	push	r13
    2d24:	ef 92       	push	r14
    2d26:	ff 92       	push	r15
    2d28:	0f 93       	push	r16
    2d2a:	1f 93       	push	r17
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2d30:	d0 90 ca 07 	lds	r13, 0x07CA
	temp_elevator = Config.ElevatorPol;
    2d34:	f0 90 cb 07 	lds	r15, 0x07CB
	temp_rudder = Config.RudderPol;
    2d38:	a0 90 c9 07 	lds	r10, 0x07C9

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2d3c:	10 92 ca 07 	sts	0x07CA, r1
	Config.ElevatorPol =  NORMAL;
    2d40:	10 92 cb 07 	sts	0x07CB, r1
	Config.RudderPol = NORMAL;
    2d44:	10 92 c9 07 	sts	0x07C9, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2d48:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2d4a:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2d4c:	1f 9b       	sbis	0x03, 7	; 3
    2d4e:	d2 c0       	rjmp	.+420    	; 0x2ef4 <Display_sticks+0x1d8>
    2d50:	c1 11       	cpse	r28, r1
    2d52:	d2 c0       	rjmp	.+420    	; 0x2ef8 <Display_sticks+0x1dc>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	91 e0       	ldi	r25, 0x01	; 1
    2d58:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
    2d5c:	92 e0       	ldi	r25, 0x02	; 2
    2d5e:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2d60:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2d62:	61 e1       	ldi	r22, 0x11	; 17
    2d64:	61 0f       	add	r22, r17
    2d66:	ee 24       	eor	r14, r14
    2d68:	e3 94       	inc	r14
    2d6a:	08 e2       	ldi	r16, 0x28	; 40
    2d6c:	28 e2       	ldi	r18, 0x28	; 40
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	91 e0       	ldi	r25, 0x01	; 1
    2d74:	0e 94 79 25 	call	0x4af2	; 0x4af2 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2d78:	86 e2       	ldi	r24, 0x26	; 38
    2d7a:	b8 2e       	mov	r11, r24
    2d7c:	b1 0e       	add	r11, r17
    2d7e:	20 e3       	ldi	r18, 0x30	; 48
    2d80:	21 0f       	add	r18, r17
    2d82:	03 e0       	ldi	r16, 0x03	; 3
    2d84:	44 e1       	ldi	r20, 0x14	; 20
    2d86:	6b 2d       	mov	r22, r11
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2d90:	28 e3       	ldi	r18, 0x38	; 56
    2d92:	21 0f       	add	r18, r17
    2d94:	69 e2       	ldi	r22, 0x29	; 41
    2d96:	61 0f       	add	r22, r17
    2d98:	06 e0       	ldi	r16, 0x06	; 6
    2d9a:	45 e1       	ldi	r20, 0x15	; 21
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	91 e0       	ldi	r25, 0x01	; 1
    2da0:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2da4:	01 e0       	ldi	r16, 0x01	; 1
    2da6:	22 e0       	ldi	r18, 0x02	; 2
    2da8:	45 e1       	ldi	r20, 0x15	; 21
    2daa:	6b 2d       	mov	r22, r11
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	91 e0       	ldi	r25, 0x01	; 1
    2db0:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2db4:	63 e3       	ldi	r22, 0x33	; 51
    2db6:	61 0f       	add	r22, r17
    2db8:	24 e0       	ldi	r18, 0x04	; 4
    2dba:	45 e0       	ldi	r20, 0x05	; 5
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <fillcircle>
    2dc4:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2dc6:	11 f0       	breq	.+4      	; 0x2dcc <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2dc8:	14 e3       	ldi	r17, 0x34	; 52
    2dca:	cb cf       	rjmp	.-106    	; 0x2d62 <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2dcc:	29 e3       	ldi	r18, 0x39	; 57
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	50 e0       	ldi	r21, 0x00	; 0
    2dd4:	69 e0       	ldi	r22, 0x09	; 9
    2dd6:	71 e0       	ldi	r23, 0x01	; 1
    2dd8:	8c e0       	ldi	r24, 0x0C	; 12
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2de0:	0e 94 00 4a 	call	0x9400	; 0x9400 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2de4:	80 91 8b 08 	lds	r24, 0x088B
    2de8:	90 91 8c 08 	lds	r25, 0x088C
    2dec:	80 33       	cpi	r24, 0x30	; 48
    2dee:	98 4f       	sbci	r25, 0xF8	; 248
    2df0:	3c f0       	brlt	.+14     	; 0x2e00 <Display_sticks+0xe4>
    2df2:	80 91 8b 08 	lds	r24, 0x088B
    2df6:	90 91 8c 08 	lds	r25, 0x088C
    2dfa:	81 3d       	cpi	r24, 0xD1	; 209
    2dfc:	97 40       	sbci	r25, 0x07	; 7
    2dfe:	6c f0       	brlt	.+26     	; 0x2e1a <Display_sticks+0xfe>
    2e00:	d1 11       	cpse	r29, r1
    2e02:	0b c0       	rjmp	.+22     	; 0x2e1a <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2e04:	2b e2       	ldi	r18, 0x2B	; 43
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e1       	ldi	r20, 0x10	; 16
    2e0a:	50 e0       	ldi	r21, 0x00	; 0
    2e0c:	63 e7       	ldi	r22, 0x73	; 115
    2e0e:	71 e0       	ldi	r23, 0x01	; 1
    2e10:	87 e8       	ldi	r24, 0x87	; 135
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
    2e18:	68 c0       	rjmp	.+208    	; 0x2eea <Display_sticks+0x1ce>
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2e1a:	80 91 8b 08 	lds	r24, 0x088B
    2e1e:	90 91 8c 08 	lds	r25, 0x088C
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
    2e22:	84 3f       	cpi	r24, 0xF4	; 244
    2e24:	91 40       	sbci	r25, 0x01	; 1
    2e26:	3c f4       	brge	.+14     	; 0x2e36 <Display_sticks+0x11a>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2e28:	80 91 8b 08 	lds	r24, 0x088B
    2e2c:	90 91 8c 08 	lds	r25, 0x088C
    2e30:	8d 30       	cpi	r24, 0x0D	; 13
    2e32:	9e 4f       	sbci	r25, 0xFE	; 254
    2e34:	e4 f4       	brge	.+56     	; 0x2e6e <Display_sticks+0x152>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    2e36:	80 91 8d 08 	lds	r24, 0x088D
    2e3a:	90 91 8e 08 	lds	r25, 0x088E
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2e3e:	84 3f       	cpi	r24, 0xF4	; 244
    2e40:	91 40       	sbci	r25, 0x01	; 1
    2e42:	3c f4       	brge	.+14     	; 0x2e52 <Display_sticks+0x136>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    2e44:	80 91 8d 08 	lds	r24, 0x088D
    2e48:	90 91 8e 08 	lds	r25, 0x088E
    2e4c:	8d 30       	cpi	r24, 0x0D	; 13
    2e4e:	9e 4f       	sbci	r25, 0xFE	; 254
    2e50:	74 f4       	brge	.+28     	; 0x2e6e <Display_sticks+0x152>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    2e52:	80 91 8f 08 	lds	r24, 0x088F
    2e56:	90 91 90 08 	lds	r25, 0x0890
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    2e5a:	84 3f       	cpi	r24, 0xF4	; 244
    2e5c:	91 40       	sbci	r25, 0x01	; 1
    2e5e:	9c f4       	brge	.+38     	; 0x2e86 <Display_sticks+0x16a>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    2e60:	80 91 8f 08 	lds	r24, 0x088F
    2e64:	90 91 90 08 	lds	r25, 0x0890
    2e68:	8d 30       	cpi	r24, 0x0D	; 13
    2e6a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e6c:	64 f0       	brlt	.+24     	; 0x2e86 <Display_sticks+0x16a>
					)
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2e6e:	2b e2       	ldi	r18, 0x2B	; 43
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	49 e0       	ldi	r20, 0x09	; 9
    2e74:	50 e0       	ldi	r21, 0x00	; 0
    2e76:	63 e7       	ldi	r22, 0x73	; 115
    2e78:	71 e0       	ldi	r23, 0x01	; 1
    2e7a:	88 e8       	ldi	r24, 0x88	; 136
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
					)
			{
				CalibrateStarted = true;
    2e82:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2e84:	32 c0       	rjmp	.+100    	; 0x2eea <Display_sticks+0x1ce>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2e86:	80 91 8b 08 	lds	r24, 0x088B
    2e8a:	90 91 8c 08 	lds	r25, 0x088C
    2e8e:	97 ff       	sbrs	r25, 7
    2e90:	03 c0       	rjmp	.+6      	; 0x2e98 <Display_sticks+0x17c>
				{
					Config.AileronPol = REVERSED;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	80 93 ca 07 	sts	0x07CA, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2e98:	80 91 8d 08 	lds	r24, 0x088D
    2e9c:	90 91 8e 08 	lds	r25, 0x088E
    2ea0:	97 ff       	sbrs	r25, 7
    2ea2:	03 c0       	rjmp	.+6      	; 0x2eaa <Display_sticks+0x18e>
				{
					Config.ElevatorPol = REVERSED;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	80 93 cb 07 	sts	0x07CB, r24
				}

				if (RCinputs[RUDDER] < 0)
    2eaa:	80 91 8f 08 	lds	r24, 0x088F
    2eae:	90 91 90 08 	lds	r25, 0x0890
    2eb2:	97 ff       	sbrs	r25, 7
    2eb4:	03 c0       	rjmp	.+6      	; 0x2ebc <Display_sticks+0x1a0>
				{
					Config.RudderPol = REVERSED;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	80 93 c9 07 	sts	0x07C9, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2ebc:	80 91 8b 08 	lds	r24, 0x088B
    2ec0:	90 91 8c 08 	lds	r25, 0x088C
    2ec4:	18 16       	cp	r1, r24
    2ec6:	19 06       	cpc	r1, r25
    2ec8:	84 f4       	brge	.+32     	; 0x2eea <Display_sticks+0x1ce>
    2eca:	80 91 8d 08 	lds	r24, 0x088D
    2ece:	90 91 8e 08 	lds	r25, 0x088E
    2ed2:	18 16       	cp	r1, r24
    2ed4:	19 06       	cpc	r1, r25
    2ed6:	4c f4       	brge	.+18     	; 0x2eea <Display_sticks+0x1ce>
    2ed8:	80 91 8f 08 	lds	r24, 0x088F
    2edc:	90 91 90 08 	lds	r25, 0x0890
    2ee0:	c1 e0       	ldi	r28, 0x01	; 1
    2ee2:	18 16       	cp	r1, r24
    2ee4:	19 06       	cpc	r1, r25
    2ee6:	0c f0       	brlt	.+2      	; 0x2eea <Display_sticks+0x1ce>
    2ee8:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	91 e0       	ldi	r25, 0x01	; 1
    2eee:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
    2ef2:	2c cf       	rjmp	.-424    	; 0x2d4c <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2ef4:	cc 23       	and	r28, r28
    2ef6:	39 f1       	breq	.+78     	; 0x2f46 <Display_sticks+0x22a>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2ef8:	2b e2       	ldi	r18, 0x2B	; 43
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	48 e2       	ldi	r20, 0x28	; 40
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	63 e7       	ldi	r22, 0x73	; 115
    2f02:	71 e0       	ldi	r23, 0x01	; 1
    2f04:	89 e8       	ldi	r24, 0x89	; 137
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	91 e0       	ldi	r25, 0x01	; 1
    2f10:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
		clear_buffer(buffer);
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	91 e0       	ldi	r25, 0x01	; 1
    2f18:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
    2f1c:	8f e7       	ldi	r24, 0x7F	; 127
    2f1e:	94 e8       	ldi	r25, 0x84	; 132
    2f20:	2e e1       	ldi	r18, 0x1E	; 30
    2f22:	81 50       	subi	r24, 0x01	; 1
    2f24:	90 40       	sbci	r25, 0x00	; 0
    2f26:	20 40       	sbci	r18, 0x00	; 0
    2f28:	e1 f7       	brne	.-8      	; 0x2f22 <Display_sticks+0x206>
    2f2a:	00 c0       	rjmp	.+0      	; 0x2f2c <Display_sticks+0x210>
    2f2c:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
    2f36:	ff 90       	pop	r15
    2f38:	ef 90       	pop	r14
    2f3a:	df 90       	pop	r13
    2f3c:	cf 90       	pop	r12
    2f3e:	bf 90       	pop	r11
    2f40:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2f42:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2f46:	d0 92 ca 07 	sts	0x07CA, r13
		Config.ElevatorPol = temp_elevator;
    2f4a:	f0 92 cb 07 	sts	0x07CB, r15
		Config.RudderPol = temp_rudder;
    2f4e:	a0 92 c9 07 	sts	0x07C9, r10
	}
}
    2f52:	df 91       	pop	r29
    2f54:	cf 91       	pop	r28
    2f56:	1f 91       	pop	r17
    2f58:	0f 91       	pop	r16
    2f5a:	ff 90       	pop	r15
    2f5c:	ef 90       	pop	r14
    2f5e:	df 90       	pop	r13
    2f60:	cf 90       	pop	r12
    2f62:	bf 90       	pop	r11
    2f64:	af 90       	pop	r10
    2f66:	08 95       	ret

00002f68 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2f68:	0f 93       	push	r16
    2f6a:	1f 93       	push	r17
    2f6c:	cf 93       	push	r28
    2f6e:	df 93       	push	r29
    2f70:	1f 92       	push	r1
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2f78:	69 83       	std	Y+1, r22	; 0x01
    2f7a:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__eerd_byte_m644pa>
    2f7e:	69 81       	ldd	r22, Y+1	; 0x01
    2f80:	86 17       	cp	r24, r22
    2f82:	41 f0       	breq	.+16     	; 0x2f94 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2f84:	c8 01       	movw	r24, r16
	}
}
    2f86:	0f 90       	pop	r0
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2f90:	0c 94 07 50 	jmp	0xa00e	; 0xa00e <__eewr_byte_m644pa>
	}
}
    2f94:	0f 90       	pop	r0
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	1f 91       	pop	r17
    2f9c:	0f 91       	pop	r16
    2f9e:	08 95       	ret

00002fa0 <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    2fa0:	ef 92       	push	r14
    2fa2:	ff 92       	push	r15
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	ec 01       	movw	r28, r24
    2fae:	8b 01       	movw	r16, r22
    2fb0:	7a 01       	movw	r14, r20
    2fb2:	e8 0e       	add	r14, r24
    2fb4:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2fb6:	ce 15       	cp	r28, r14
    2fb8:	df 05       	cpc	r29, r15
    2fba:	39 f0       	breq	.+14     	; 0x2fca <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2fbc:	69 91       	ld	r22, Y+
    2fbe:	c8 01       	movw	r24, r16
    2fc0:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <eeprom_write_byte_changed>
		src++;
		dest++;
    2fc4:	0f 5f       	subi	r16, 0xFF	; 255
    2fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc8:	f6 cf       	rjmp	.-20     	; 0x2fb6 <eeprom_write_block_changes+0x16>
	}
}
    2fca:	df 91       	pop	r29
    2fcc:	cf 91       	pop	r28
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	ff 90       	pop	r15
    2fd4:	ef 90       	pop	r14
    2fd6:	08 95       	ret

00002fd8 <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2fd8:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2fda:	40 e2       	ldi	r20, 0x20	; 32
    2fdc:	52 e0       	ldi	r21, 0x02	; 2
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	81 ec       	ldi	r24, 0xC1	; 193
    2fe4:	95 e0       	ldi	r25, 0x05	; 5
    2fe6:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <eeprom_write_block_changes>
	sei();
    2fea:	78 94       	sei
    2fec:	08 95       	ret

00002fee <Update_V1_0_to_V1_1_B7>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 Beta 7 structure
void Update_V1_0_to_V1_1_B7(void)
{
    2fee:	2f 92       	push	r2
    2ff0:	3f 92       	push	r3
    2ff2:	4f 92       	push	r4
    2ff4:	5f 92       	push	r5
    2ff6:	6f 92       	push	r6
    2ff8:	7f 92       	push	r7
    2ffa:	8f 92       	push	r8
    2ffc:	9f 92       	push	r9
    2ffe:	af 92       	push	r10
    3000:	bf 92       	push	r11
    3002:	cf 92       	push	r12
    3004:	df 92       	push	r13
    3006:	ef 92       	push	r14
    3008:	ff 92       	push	r15
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	cf 93       	push	r28
    3010:	df 93       	push	r29
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	c5 54       	subi	r28, 0x45	; 69
    3018:	d1 40       	sbci	r29, 0x01	; 1
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	f8 94       	cli
    301e:	de bf       	out	0x3e, r29	; 62
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume. For some reason it gets clobbered.
	// We mustn't use hard-coded values are these change each version.
	// Use an offset from the current Config structure address
	memcpy((void*)&temp,(void*)((&Config.setup) + (377)),1);
    3024:	40 91 3a 07 	lds	r20, 0x073A
    3028:	cf 5b       	subi	r28, 0xBF	; 191
    302a:	de 4f       	sbci	r29, 0xFE	; 254
    302c:	48 83       	st	Y, r20
    302e:	c1 54       	subi	r28, 0x41	; 65
    3030:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
    3032:	4a e4       	ldi	r20, 0x4A	; 74
    3034:	50 e0       	ldi	r21, 0x00	; 0
    3036:	6b e3       	ldi	r22, 0x3B	; 59
    3038:	77 e0       	ldi	r23, 0x07	; 7
    303a:	83 e8       	ldi	r24, 0x83	; 131
    303c:	97 e0       	ldi	r25, 0x07	; 7
    303e:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <memmove>
    3042:	23 e5       	ldi	r18, 0x53	; 83
    3044:	36 e0       	ldi	r19, 0x06	; 6
    3046:	ae 01       	movw	r20, r28
    3048:	4f 5c       	subi	r20, 0xCF	; 207
    304a:	5e 4f       	sbci	r21, 0xFE	; 254
    304c:	ce 01       	movw	r24, r28
    304e:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    3050:	6d e1       	ldi	r22, 0x1D	; 29
    3052:	f9 01       	movw	r30, r18
    3054:	dc 01       	movw	r26, r24
    3056:	76 2f       	mov	r23, r22
    3058:	01 90       	ld	r0, Z+
    305a:	0d 92       	st	X+, r0
    305c:	7a 95       	dec	r23
    305e:	e1 f7       	brne	.-8      	; 0x3058 <Update_V1_0_to_V1_1_B7+0x6a>
    3060:	86 96       	adiw	r24, 0x26	; 38
    3062:	23 5e       	subi	r18, 0xE3	; 227
    3064:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    3066:	84 17       	cp	r24, r20
    3068:	95 07       	cpc	r25, r21
    306a:	99 f7       	brne	.-26     	; 0x3052 <Update_V1_0_to_V1_1_B7+0x64>
    306c:	4e 01       	movw	r8, r28
    306e:	83 e1       	ldi	r24, 0x13	; 19
    3070:	88 0e       	add	r8, r24
    3072:	91 1c       	adc	r9, r1
    3074:	5e 01       	movw	r10, r28
    3076:	94 e1       	ldi	r25, 0x14	; 20
    3078:	a9 0e       	add	r10, r25
    307a:	b1 1c       	adc	r11, r1
    307c:	6e 01       	movw	r12, r28
    307e:	e5 e1       	ldi	r30, 0x15	; 21
    3080:	ce 0e       	add	r12, r30
    3082:	d1 1c       	adc	r13, r1
    3084:	ce 01       	movw	r24, r28
    3086:	46 96       	adiw	r24, 0x16	; 22
    3088:	cf 5c       	subi	r28, 0xCF	; 207
    308a:	de 4f       	sbci	r29, 0xFE	; 254
    308c:	99 83       	std	Y+1, r25	; 0x01
    308e:	88 83       	st	Y, r24
    3090:	c1 53       	subi	r28, 0x31	; 49
    3092:	d1 40       	sbci	r29, 0x01	; 1
    3094:	8e 01       	movw	r16, r28
    3096:	02 5e       	subi	r16, 0xE2	; 226
    3098:	1f 4f       	sbci	r17, 0xFF	; 255
    309a:	fe 01       	movw	r30, r28
    309c:	7d 96       	adiw	r30, 0x1d	; 29
    309e:	c7 5c       	subi	r28, 0xC7	; 199
    30a0:	de 4f       	sbci	r29, 0xFE	; 254
    30a2:	f9 83       	std	Y+1, r31	; 0x01
    30a4:	e8 83       	st	Y, r30
    30a6:	c9 53       	subi	r28, 0x39	; 57
    30a8:	d1 40       	sbci	r29, 0x01	; 1
    30aa:	06 96       	adiw	r24, 0x06	; 6
    30ac:	cd 5c       	subi	r28, 0xCD	; 205
    30ae:	de 4f       	sbci	r29, 0xFE	; 254
    30b0:	99 83       	std	Y+1, r25	; 0x01
    30b2:	88 83       	st	Y, r24
    30b4:	c3 53       	subi	r28, 0x33	; 51
    30b6:	d1 40       	sbci	r29, 0x01	; 1
    30b8:	32 97       	sbiw	r30, 0x02	; 2
    30ba:	c3 5c       	subi	r28, 0xC3	; 195
    30bc:	de 4f       	sbci	r29, 0xFE	; 254
    30be:	f9 83       	std	Y+1, r31	; 0x01
    30c0:	e8 83       	st	Y, r30
    30c2:	cd 53       	subi	r28, 0x3D	; 61
    30c4:	d1 40       	sbci	r29, 0x01	; 1
    30c6:	02 97       	sbiw	r24, 0x02	; 2
    30c8:	c9 5c       	subi	r28, 0xC9	; 201
    30ca:	de 4f       	sbci	r29, 0xFE	; 254
    30cc:	99 83       	std	Y+1, r25	; 0x01
    30ce:	88 83       	st	Y, r24
    30d0:	c7 53       	subi	r28, 0x37	; 55
    30d2:	d1 40       	sbci	r29, 0x01	; 1
    30d4:	32 97       	sbiw	r30, 0x02	; 2
    30d6:	c5 5c       	subi	r28, 0xC5	; 197
    30d8:	de 4f       	sbci	r29, 0xFE	; 254
    30da:	f9 83       	std	Y+1, r31	; 0x01
    30dc:	e8 83       	st	Y, r30
    30de:	cb 53       	subi	r28, 0x3B	; 59
    30e0:	d1 40       	sbci	r29, 0x01	; 1
    30e2:	02 97       	sbiw	r24, 0x02	; 2
    30e4:	cb 5c       	subi	r28, 0xCB	; 203
    30e6:	de 4f       	sbci	r29, 0xFE	; 254
    30e8:	99 83       	std	Y+1, r25	; 0x01
    30ea:	88 83       	st	Y, r24
    30ec:	c5 53       	subi	r28, 0x35	; 53
    30ee:	d1 40       	sbci	r29, 0x01	; 1
    30f0:	7e 01       	movw	r14, r28
    30f2:	97 e1       	ldi	r25, 0x17	; 23
    30f4:	e9 0e       	add	r14, r25
    30f6:	f1 1c       	adc	r15, r1
    30f8:	3e 01       	movw	r6, r28
    30fa:	e5 e0       	ldi	r30, 0x05	; 5
    30fc:	6e 0e       	add	r6, r30
    30fe:	71 1c       	adc	r7, r1
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	8c 0f       	add	r24, r28
    3106:	9d 1f       	adc	r25, r29
    3108:	83 5b       	subi	r24, 0xB3	; 179
    310a:	9e 4f       	sbci	r25, 0xFE	; 254
    310c:	ce 5b       	subi	r28, 0xBE	; 190
    310e:	de 4f       	sbci	r29, 0xFE	; 254
    3110:	99 83       	std	Y+1, r25	; 0x01
    3112:	88 83       	st	Y, r24
    3114:	c2 54       	subi	r28, 0x42	; 66
    3116:	d1 40       	sbci	r29, 0x01	; 1
    3118:	fe 01       	movw	r30, r28
    311a:	31 96       	adiw	r30, 0x01	; 1
    311c:	c1 5c       	subi	r28, 0xC1	; 193
    311e:	de 4f       	sbci	r29, 0xFE	; 254
    3120:	f9 83       	std	Y+1, r31	; 0x01
    3122:	e8 83       	st	Y, r30
    3124:	cf 53       	subi	r28, 0x3F	; 63
    3126:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    312c:	44 24       	eor	r4, r4
    312e:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    3130:	49 e1       	ldi	r20, 0x19	; 25
    3132:	50 e0       	ldi	r21, 0x00	; 0
    3134:	b3 01       	movw	r22, r6
    3136:	c8 01       	movw	r24, r16
    3138:	48 97       	sbiw	r24, 0x18	; 24
    313a:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    313e:	f4 01       	movw	r30, r8
    3140:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    3142:	f5 01       	movw	r30, r10
    3144:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    3146:	f6 01       	movw	r30, r12
    3148:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    314a:	cf 5c       	subi	r28, 0xCF	; 207
    314c:	de 4f       	sbci	r29, 0xFE	; 254
    314e:	e8 81       	ld	r30, Y
    3150:	f9 81       	ldd	r31, Y+1	; 0x01
    3152:	c1 53       	subi	r28, 0x31	; 49
    3154:	d1 40       	sbci	r29, 0x01	; 1
    3156:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    3158:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    315a:	36 fe       	sbrs	r3, 6
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <Update_V1_0_to_V1_1_B7+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    315e:	50 82       	st	Z, r5
    3160:	01 c0       	rjmp	.+2      	; 0x3164 <Update_V1_0_to_V1_1_B7+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    3162:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    3164:	48 e0       	ldi	r20, 0x08	; 8
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	b7 01       	movw	r22, r14
    316a:	c8 01       	movw	r24, r16
    316c:	01 96       	adiw	r24, 0x01	; 1
    316e:	cc 5b       	subi	r28, 0xBC	; 188
    3170:	de 4f       	sbci	r29, 0xFE	; 254
    3172:	28 83       	st	Y, r18
    3174:	c4 54       	subi	r28, 0x44	; 68
    3176:	d1 40       	sbci	r29, 0x01	; 1
    3178:	cb 5b       	subi	r28, 0xBB	; 187
    317a:	de 4f       	sbci	r29, 0xFE	; 254
    317c:	38 83       	st	Y, r19
    317e:	c5 54       	subi	r28, 0x45	; 69
    3180:	d1 40       	sbci	r29, 0x01	; 1
    3182:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <memmove>
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	cb 5b       	subi	r28, 0xBB	; 187
    318c:	de 4f       	sbci	r29, 0xFE	; 254
    318e:	38 81       	ld	r19, Y
    3190:	c5 54       	subi	r28, 0x45	; 69
    3192:	d1 40       	sbci	r29, 0x01	; 1
    3194:	cc 5b       	subi	r28, 0xBC	; 188
    3196:	de 4f       	sbci	r29, 0xFE	; 254
    3198:	28 81       	ld	r18, Y
    319a:	c4 54       	subi	r28, 0x44	; 68
    319c:	d1 40       	sbci	r29, 0x01	; 1
    319e:	c1 5c       	subi	r28, 0xC1	; 193
    31a0:	de 4f       	sbci	r29, 0xFE	; 254
    31a2:	e8 81       	ld	r30, Y
    31a4:	f9 81       	ldd	r31, Y+1	; 0x01
    31a6:	cf 53       	subi	r28, 0x3F	; 63
    31a8:	d1 40       	sbci	r29, 0x01	; 1
    31aa:	e8 0f       	add	r30, r24
    31ac:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    31ae:	46 8d       	ldd	r20, Z+30	; 0x1e
    31b0:	4d 30       	cpi	r20, 0x0D	; 13
    31b2:	11 f4       	brne	.+4      	; 0x31b8 <Update_V1_0_to_V1_1_B7+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    31b4:	4f e0       	ldi	r20, 0x0F	; 15
    31b6:	46 8f       	std	Z+30, r20	; 0x1e
    31b8:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    31ba:	88 30       	cpi	r24, 0x08	; 8
    31bc:	91 05       	cpc	r25, r1
    31be:	79 f7       	brne	.-34     	; 0x319e <Update_V1_0_to_V1_1_B7+0x1b0>
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    31c0:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    31c2:	30 fe       	sbrs	r3, 0
    31c4:	06 c0       	rjmp	.+12     	; 0x31d2 <Update_V1_0_to_V1_1_B7+0x1e4>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    31c6:	30 ff       	sbrs	r19, 0
    31c8:	02 c0       	rjmp	.+4      	; 0x31ce <Update_V1_0_to_V1_1_B7+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    31ca:	50 82       	st	Z, r5
    31cc:	03 c0       	rjmp	.+6      	; 0x31d4 <Update_V1_0_to_V1_1_B7+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    31ce:	40 82       	st	Z, r4
    31d0:	01 c0       	rjmp	.+2      	; 0x31d4 <Update_V1_0_to_V1_1_B7+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    31d2:	10 82       	st	Z, r1
		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
		{
			if ((P2_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    31d4:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    31d6:	20 ff       	sbrs	r18, 0
    31d8:	06 c0       	rjmp	.+12     	; 0x31e6 <Update_V1_0_to_V1_1_B7+0x1f8>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    31da:	20 fe       	sbrs	r2, 0
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <Update_V1_0_to_V1_1_B7+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    31de:	50 82       	st	Z, r5
    31e0:	03 c0       	rjmp	.+6      	; 0x31e8 <Update_V1_0_to_V1_1_B7+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    31e2:	40 82       	st	Z, r4
    31e4:	01 c0       	rjmp	.+2      	; 0x31e8 <Update_V1_0_to_V1_1_B7+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    31e6:	10 82       	st	Z, r1
		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    31e8:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    31ea:	31 fe       	sbrs	r3, 1
    31ec:	06 c0       	rjmp	.+12     	; 0x31fa <Update_V1_0_to_V1_1_B7+0x20c>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    31ee:	31 ff       	sbrs	r19, 1
    31f0:	02 c0       	rjmp	.+4      	; 0x31f6 <Update_V1_0_to_V1_1_B7+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    31f2:	50 82       	st	Z, r5
    31f4:	03 c0       	rjmp	.+6      	; 0x31fc <Update_V1_0_to_V1_1_B7+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    31f6:	40 82       	st	Z, r4
    31f8:	01 c0       	rjmp	.+2      	; 0x31fc <Update_V1_0_to_V1_1_B7+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    31fa:	10 82       	st	Z, r1
		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    31fc:	cf 5c       	subi	r28, 0xCF	; 207
    31fe:	de 4f       	sbci	r29, 0xFE	; 254
    3200:	e8 81       	ld	r30, Y
    3202:	f9 81       	ldd	r31, Y+1	; 0x01
    3204:	c1 53       	subi	r28, 0x31	; 49
    3206:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    3208:	21 ff       	sbrs	r18, 1
    320a:	06 c0       	rjmp	.+12     	; 0x3218 <Update_V1_0_to_V1_1_B7+0x22a>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    320c:	21 fe       	sbrs	r2, 1
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <Update_V1_0_to_V1_1_B7+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    3210:	50 82       	st	Z, r5
    3212:	03 c0       	rjmp	.+6      	; 0x321a <Update_V1_0_to_V1_1_B7+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    3214:	40 82       	st	Z, r4
    3216:	01 c0       	rjmp	.+2      	; 0x321a <Update_V1_0_to_V1_1_B7+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    3218:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
		{
			if ((P1_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    321a:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    321c:	32 fe       	sbrs	r3, 2
    321e:	06 c0       	rjmp	.+12     	; 0x322c <Update_V1_0_to_V1_1_B7+0x23e>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    3220:	32 ff       	sbrs	r19, 2
    3222:	02 c0       	rjmp	.+4      	; 0x3228 <Update_V1_0_to_V1_1_B7+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    3224:	50 82       	st	Z, r5
    3226:	03 c0       	rjmp	.+6      	; 0x322e <Update_V1_0_to_V1_1_B7+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    3228:	40 82       	st	Z, r4
    322a:	01 c0       	rjmp	.+2      	; 0x322e <Update_V1_0_to_V1_1_B7+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    322c:	10 82       	st	Z, r1
		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
		{
			if ((P2_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    322e:	cb 5c       	subi	r28, 0xCB	; 203
    3230:	de 4f       	sbci	r29, 0xFE	; 254
    3232:	e8 81       	ld	r30, Y
    3234:	f9 81       	ldd	r31, Y+1	; 0x01
    3236:	c5 53       	subi	r28, 0x35	; 53
    3238:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    323a:	22 ff       	sbrs	r18, 2
    323c:	06 c0       	rjmp	.+12     	; 0x324a <Update_V1_0_to_V1_1_B7+0x25c>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    323e:	22 fe       	sbrs	r2, 2
    3240:	02 c0       	rjmp	.+4      	; 0x3246 <Update_V1_0_to_V1_1_B7+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    3242:	50 82       	st	Z, r5
    3244:	03 c0       	rjmp	.+6      	; 0x324c <Update_V1_0_to_V1_1_B7+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    3246:	40 82       	st	Z, r4
    3248:	01 c0       	rjmp	.+2      	; 0x324c <Update_V1_0_to_V1_1_B7+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    324a:	10 82       	st	Z, r1
		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    324c:	c5 5c       	subi	r28, 0xC5	; 197
    324e:	de 4f       	sbci	r29, 0xFE	; 254
    3250:	e8 81       	ld	r30, Y
    3252:	f9 81       	ldd	r31, Y+1	; 0x01
    3254:	cb 53       	subi	r28, 0x3B	; 59
    3256:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    3258:	33 fe       	sbrs	r3, 3
    325a:	06 c0       	rjmp	.+12     	; 0x3268 <Update_V1_0_to_V1_1_B7+0x27a>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    325c:	33 ff       	sbrs	r19, 3
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <Update_V1_0_to_V1_1_B7+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    3260:	50 82       	st	Z, r5
    3262:	03 c0       	rjmp	.+6      	; 0x326a <Update_V1_0_to_V1_1_B7+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    3264:	40 82       	st	Z, r4
    3266:	01 c0       	rjmp	.+2      	; 0x326a <Update_V1_0_to_V1_1_B7+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    3268:	10 82       	st	Z, r1
		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    326a:	c9 5c       	subi	r28, 0xC9	; 201
    326c:	de 4f       	sbci	r29, 0xFE	; 254
    326e:	e8 81       	ld	r30, Y
    3270:	f9 81       	ldd	r31, Y+1	; 0x01
    3272:	c7 53       	subi	r28, 0x37	; 55
    3274:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    3276:	23 ff       	sbrs	r18, 3
    3278:	06 c0       	rjmp	.+12     	; 0x3286 <Update_V1_0_to_V1_1_B7+0x298>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    327a:	23 fe       	sbrs	r2, 3
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <Update_V1_0_to_V1_1_B7+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    327e:	50 82       	st	Z, r5
    3280:	03 c0       	rjmp	.+6      	; 0x3288 <Update_V1_0_to_V1_1_B7+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    3282:	40 82       	st	Z, r4
    3284:	01 c0       	rjmp	.+2      	; 0x3288 <Update_V1_0_to_V1_1_B7+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    3286:	10 82       	st	Z, r1
		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    3288:	c3 5c       	subi	r28, 0xC3	; 195
    328a:	de 4f       	sbci	r29, 0xFE	; 254
    328c:	e8 81       	ld	r30, Y
    328e:	f9 81       	ldd	r31, Y+1	; 0x01
    3290:	cd 53       	subi	r28, 0x3D	; 61
    3292:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    3294:	34 fe       	sbrs	r3, 4
    3296:	06 c0       	rjmp	.+12     	; 0x32a4 <Update_V1_0_to_V1_1_B7+0x2b6>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    3298:	34 ff       	sbrs	r19, 4
    329a:	02 c0       	rjmp	.+4      	; 0x32a0 <Update_V1_0_to_V1_1_B7+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    329c:	50 82       	st	Z, r5
    329e:	03 c0       	rjmp	.+6      	; 0x32a6 <Update_V1_0_to_V1_1_B7+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    32a0:	40 82       	st	Z, r4
    32a2:	01 c0       	rjmp	.+2      	; 0x32a6 <Update_V1_0_to_V1_1_B7+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    32a4:	10 82       	st	Z, r1
		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    32a6:	cd 5c       	subi	r28, 0xCD	; 205
    32a8:	de 4f       	sbci	r29, 0xFE	; 254
    32aa:	e8 81       	ld	r30, Y
    32ac:	f9 81       	ldd	r31, Y+1	; 0x01
    32ae:	c3 53       	subi	r28, 0x33	; 51
    32b0:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    32b2:	24 ff       	sbrs	r18, 4
    32b4:	06 c0       	rjmp	.+12     	; 0x32c2 <Update_V1_0_to_V1_1_B7+0x2d4>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    32b6:	24 fe       	sbrs	r2, 4
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <Update_V1_0_to_V1_1_B7+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    32ba:	50 82       	st	Z, r5
    32bc:	03 c0       	rjmp	.+6      	; 0x32c4 <Update_V1_0_to_V1_1_B7+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    32be:	40 82       	st	Z, r4
    32c0:	01 c0       	rjmp	.+2      	; 0x32c4 <Update_V1_0_to_V1_1_B7+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    32c2:	10 82       	st	Z, r1
		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    32c4:	c7 5c       	subi	r28, 0xC7	; 199
    32c6:	de 4f       	sbci	r29, 0xFE	; 254
    32c8:	e8 81       	ld	r30, Y
    32ca:	f9 81       	ldd	r31, Y+1	; 0x01
    32cc:	c9 53       	subi	r28, 0x39	; 57
    32ce:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
    32d0:	35 fe       	sbrs	r3, 5
    32d2:	06 c0       	rjmp	.+12     	; 0x32e0 <Update_V1_0_to_V1_1_B7+0x2f2>
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
    32d4:	35 ff       	sbrs	r19, 5
    32d6:	02 c0       	rjmp	.+4      	; 0x32dc <Update_V1_0_to_V1_1_B7+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    32d8:	50 82       	st	Z, r5
    32da:	03 c0       	rjmp	.+6      	; 0x32e2 <Update_V1_0_to_V1_1_B7+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    32dc:	40 82       	st	Z, r4
    32de:	01 c0       	rjmp	.+2      	; 0x32e2 <Update_V1_0_to_V1_1_B7+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    32e0:	10 82       	st	Z, r1
		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    32e2:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
    32e4:	25 ff       	sbrs	r18, 5
    32e6:	06 c0       	rjmp	.+12     	; 0x32f4 <Update_V1_0_to_V1_1_B7+0x306>
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
    32e8:	25 fe       	sbrs	r2, 5
    32ea:	02 c0       	rjmp	.+4      	; 0x32f0 <Update_V1_0_to_V1_1_B7+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    32ec:	50 82       	st	Z, r5
    32ee:	03 c0       	rjmp	.+6      	; 0x32f6 <Update_V1_0_to_V1_1_B7+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    32f0:	40 82       	st	Z, r4
    32f2:	01 c0       	rjmp	.+2      	; 0x32f6 <Update_V1_0_to_V1_1_B7+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    32f4:	10 82       	st	Z, r1
    32f6:	c1 5c       	subi	r28, 0xC1	; 193
    32f8:	de 4f       	sbci	r29, 0xFE	; 254
    32fa:	88 81       	ld	r24, Y
    32fc:	99 81       	ldd	r25, Y+1	; 0x01
    32fe:	cf 53       	subi	r28, 0x3F	; 63
    3300:	d1 40       	sbci	r29, 0x01	; 1
    3302:	86 96       	adiw	r24, 0x26	; 38
    3304:	c1 5c       	subi	r28, 0xC1	; 193
    3306:	de 4f       	sbci	r29, 0xFE	; 254
    3308:	99 83       	std	Y+1, r25	; 0x01
    330a:	88 83       	st	Y, r24
    330c:	cf 53       	subi	r28, 0x3F	; 63
    330e:	d1 40       	sbci	r29, 0x01	; 1
    3310:	96 e2       	ldi	r25, 0x26	; 38
    3312:	89 0e       	add	r8, r25
    3314:	91 1c       	adc	r9, r1
    3316:	e6 e2       	ldi	r30, 0x26	; 38
    3318:	ae 0e       	add	r10, r30
    331a:	b1 1c       	adc	r11, r1
    331c:	f6 e2       	ldi	r31, 0x26	; 38
    331e:	cf 0e       	add	r12, r31
    3320:	d1 1c       	adc	r13, r1
    3322:	cf 5c       	subi	r28, 0xCF	; 207
    3324:	de 4f       	sbci	r29, 0xFE	; 254
    3326:	88 81       	ld	r24, Y
    3328:	99 81       	ldd	r25, Y+1	; 0x01
    332a:	c1 53       	subi	r28, 0x31	; 49
    332c:	d1 40       	sbci	r29, 0x01	; 1
    332e:	86 96       	adiw	r24, 0x26	; 38
    3330:	cf 5c       	subi	r28, 0xCF	; 207
    3332:	de 4f       	sbci	r29, 0xFE	; 254
    3334:	99 83       	std	Y+1, r25	; 0x01
    3336:	88 83       	st	Y, r24
    3338:	c1 53       	subi	r28, 0x31	; 49
    333a:	d1 40       	sbci	r29, 0x01	; 1
    333c:	0a 5d       	subi	r16, 0xDA	; 218
    333e:	1f 4f       	sbci	r17, 0xFF	; 255
    3340:	c7 5c       	subi	r28, 0xC7	; 199
    3342:	de 4f       	sbci	r29, 0xFE	; 254
    3344:	e8 81       	ld	r30, Y
    3346:	f9 81       	ldd	r31, Y+1	; 0x01
    3348:	c9 53       	subi	r28, 0x39	; 57
    334a:	d1 40       	sbci	r29, 0x01	; 1
    334c:	b6 96       	adiw	r30, 0x26	; 38
    334e:	c7 5c       	subi	r28, 0xC7	; 199
    3350:	de 4f       	sbci	r29, 0xFE	; 254
    3352:	f9 83       	std	Y+1, r31	; 0x01
    3354:	e8 83       	st	Y, r30
    3356:	c9 53       	subi	r28, 0x39	; 57
    3358:	d1 40       	sbci	r29, 0x01	; 1
    335a:	cd 5c       	subi	r28, 0xCD	; 205
    335c:	de 4f       	sbci	r29, 0xFE	; 254
    335e:	88 81       	ld	r24, Y
    3360:	99 81       	ldd	r25, Y+1	; 0x01
    3362:	c3 53       	subi	r28, 0x33	; 51
    3364:	d1 40       	sbci	r29, 0x01	; 1
    3366:	86 96       	adiw	r24, 0x26	; 38
    3368:	cd 5c       	subi	r28, 0xCD	; 205
    336a:	de 4f       	sbci	r29, 0xFE	; 254
    336c:	99 83       	std	Y+1, r25	; 0x01
    336e:	88 83       	st	Y, r24
    3370:	c3 53       	subi	r28, 0x33	; 51
    3372:	d1 40       	sbci	r29, 0x01	; 1
    3374:	c3 5c       	subi	r28, 0xC3	; 195
    3376:	de 4f       	sbci	r29, 0xFE	; 254
    3378:	e8 81       	ld	r30, Y
    337a:	f9 81       	ldd	r31, Y+1	; 0x01
    337c:	cd 53       	subi	r28, 0x3D	; 61
    337e:	d1 40       	sbci	r29, 0x01	; 1
    3380:	b6 96       	adiw	r30, 0x26	; 38
    3382:	c3 5c       	subi	r28, 0xC3	; 195
    3384:	de 4f       	sbci	r29, 0xFE	; 254
    3386:	f9 83       	std	Y+1, r31	; 0x01
    3388:	e8 83       	st	Y, r30
    338a:	cd 53       	subi	r28, 0x3D	; 61
    338c:	d1 40       	sbci	r29, 0x01	; 1
    338e:	c9 5c       	subi	r28, 0xC9	; 201
    3390:	de 4f       	sbci	r29, 0xFE	; 254
    3392:	88 81       	ld	r24, Y
    3394:	99 81       	ldd	r25, Y+1	; 0x01
    3396:	c7 53       	subi	r28, 0x37	; 55
    3398:	d1 40       	sbci	r29, 0x01	; 1
    339a:	86 96       	adiw	r24, 0x26	; 38
    339c:	c9 5c       	subi	r28, 0xC9	; 201
    339e:	de 4f       	sbci	r29, 0xFE	; 254
    33a0:	99 83       	std	Y+1, r25	; 0x01
    33a2:	88 83       	st	Y, r24
    33a4:	c7 53       	subi	r28, 0x37	; 55
    33a6:	d1 40       	sbci	r29, 0x01	; 1
    33a8:	c5 5c       	subi	r28, 0xC5	; 197
    33aa:	de 4f       	sbci	r29, 0xFE	; 254
    33ac:	e8 81       	ld	r30, Y
    33ae:	f9 81       	ldd	r31, Y+1	; 0x01
    33b0:	cb 53       	subi	r28, 0x3B	; 59
    33b2:	d1 40       	sbci	r29, 0x01	; 1
    33b4:	b6 96       	adiw	r30, 0x26	; 38
    33b6:	c5 5c       	subi	r28, 0xC5	; 197
    33b8:	de 4f       	sbci	r29, 0xFE	; 254
    33ba:	f9 83       	std	Y+1, r31	; 0x01
    33bc:	e8 83       	st	Y, r30
    33be:	cb 53       	subi	r28, 0x3B	; 59
    33c0:	d1 40       	sbci	r29, 0x01	; 1
    33c2:	cb 5c       	subi	r28, 0xCB	; 203
    33c4:	de 4f       	sbci	r29, 0xFE	; 254
    33c6:	88 81       	ld	r24, Y
    33c8:	99 81       	ldd	r25, Y+1	; 0x01
    33ca:	c5 53       	subi	r28, 0x35	; 53
    33cc:	d1 40       	sbci	r29, 0x01	; 1
    33ce:	86 96       	adiw	r24, 0x26	; 38
    33d0:	cb 5c       	subi	r28, 0xCB	; 203
    33d2:	de 4f       	sbci	r29, 0xFE	; 254
    33d4:	99 83       	std	Y+1, r25	; 0x01
    33d6:	88 83       	st	Y, r24
    33d8:	c5 53       	subi	r28, 0x35	; 53
    33da:	d1 40       	sbci	r29, 0x01	; 1
    33dc:	96 e2       	ldi	r25, 0x26	; 38
    33de:	e9 0e       	add	r14, r25
    33e0:	f1 1c       	adc	r15, r1
    33e2:	e6 e2       	ldi	r30, 0x26	; 38
    33e4:	6e 0e       	add	r6, r30
    33e6:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    33e8:	ce 5b       	subi	r28, 0xBE	; 190
    33ea:	de 4f       	sbci	r29, 0xFE	; 254
    33ec:	88 81       	ld	r24, Y
    33ee:	99 81       	ldd	r25, Y+1	; 0x01
    33f0:	c2 54       	subi	r28, 0x42	; 66
    33f2:	d1 40       	sbci	r29, 0x01	; 1
    33f4:	08 17       	cp	r16, r24
    33f6:	19 07       	cpc	r17, r25
    33f8:	09 f0       	breq	.+2      	; 0x33fc <Update_V1_0_to_V1_1_B7+0x40e>
    33fa:	9a ce       	rjmp	.-716    	; 0x3130 <Update_V1_0_to_V1_1_B7+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    33fc:	8f e2       	ldi	r24, 0x2F	; 47
    33fe:	91 e0       	ldi	r25, 0x01	; 1
    3400:	fe 01       	movw	r30, r28
    3402:	31 96       	adiw	r30, 0x01	; 1
    3404:	a3 e5       	ldi	r26, 0x53	; 83
    3406:	b6 e0       	ldi	r27, 0x06	; 6
    3408:	01 90       	ld	r0, Z+
    340a:	0d 92       	st	X+, r0
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	e1 f7       	brne	.-8      	; 0x3408 <Update_V1_0_to_V1_1_B7+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; 
    3410:	cf 5b       	subi	r28, 0xBF	; 191
    3412:	de 4f       	sbci	r29, 0xFE	; 254
    3414:	98 81       	ld	r25, Y
    3416:	c1 54       	subi	r28, 0x41	; 65
    3418:	d1 40       	sbci	r29, 0x01	; 1
    341a:	90 93 82 07 	sts	0x0782, r25

	// Set magic number to V1.1 Beta 7 signature
	Config.setup = V1_1_B7_SIGNATURE;
    341e:	86 e3       	ldi	r24, 0x36	; 54
    3420:	80 93 c1 05 	sts	0x05C1, r24
}
    3424:	cb 5b       	subi	r28, 0xBB	; 187
    3426:	de 4f       	sbci	r29, 0xFE	; 254
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	df 91       	pop	r29
    3434:	cf 91       	pop	r28
    3436:	1f 91       	pop	r17
    3438:	0f 91       	pop	r16
    343a:	ff 90       	pop	r15
    343c:	ef 90       	pop	r14
    343e:	df 90       	pop	r13
    3440:	cf 90       	pop	r12
    3442:	bf 90       	pop	r11
    3444:	af 90       	pop	r10
    3446:	9f 90       	pop	r9
    3448:	8f 90       	pop	r8
    344a:	7f 90       	pop	r7
    344c:	6f 90       	pop	r6
    344e:	5f 90       	pop	r5
    3450:	4f 90       	pop	r4
    3452:	3f 90       	pop	r3
    3454:	2f 90       	pop	r2
    3456:	08 95       	ret

00003458 <Update_V1_1_to_V1_1_B8>:

// Upgrade V1.1 beta 7 structure to V1.1 Beta 8 structure
void Update_V1_1_to_V1_1_B8(void)
{
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	2c 97       	sbiw	r28, 0x0c	; 12
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	cd bf       	out	0x3d, r28	; 61
	int8_t	buffer[12];
	int8_t	temp = 0;
	
	// RC items - working perfectly, but really mustn't use variable names 
	// here as they MIGHT CHANGE LOCATION. Use an offset from the start instead
	buffer[0] = Config.RxMode;			// RxMode. Same as old RxMode
    346c:	80 91 ea 05 	lds	r24, 0x05EA
    3470:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = Config.MPU6050_LPF;		// Servo_rate
    3472:	80 91 4e 06 	lds	r24, 0x064E
    3476:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = Config.Servo_rate;		// PWM_Sync
    3478:	80 91 eb 05 	lds	r24, 0x05EB
    347c:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = Config.PWM_Sync;		// TxSeq
    347e:	80 91 ec 05 	lds	r24, 0x05EC
    3482:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = Config.TxSeq;			// FlightChan
    3484:	80 91 ed 05 	lds	r24, 0x05ED
    3488:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = Config.D_mult_roll;		// TransitionSpeed
    348a:	90 91 f1 05 	lds	r25, 0x05F1
    348e:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6] = Config.D_mult_pitch;	// Transition_P1n
    3490:	90 91 f2 05 	lds	r25, 0x05F2
    3494:	9f 83       	std	Y+7, r25	; 0x07
	buffer[7] = Config.FlightChan;		// AileronPol
    3496:	90 91 ee 05 	lds	r25, 0x05EE
    349a:	98 87       	std	Y+8, r25	; 0x08
	buffer[8] = Config.TransitionSpeed;	// ElevatorPol
    349c:	90 91 ef 05 	lds	r25, 0x05EF
    34a0:	99 87       	std	Y+9, r25	; 0x09
	
	// General items
	memcpy((void*)&temp,(void*)((&Config.CF_factor) + (1)),1);
    34a2:	20 91 52 06 	lds	r18, 0x0652
	buffer[9] = temp;					// Old MPU6050LPF value
    34a6:	2a 87       	std	Y+10, r18	; 0x0a
	buffer[10] = Config.Transition_P1n; // Old RudderPol value
    34a8:	90 91 f0 05 	lds	r25, 0x05F0
    34ac:	9b 87       	std	Y+11, r25	; 0x0b
		
	// Copy back to RC items structure
	memcpy(&Config.RxMode, &buffer,9);
    34ae:	39 e0       	ldi	r19, 0x09	; 9
    34b0:	fe 01       	movw	r30, r28
    34b2:	31 96       	adiw	r30, 0x01	; 1
    34b4:	aa ee       	ldi	r26, 0xEA	; 234
    34b6:	b5 e0       	ldi	r27, 0x05	; 5
    34b8:	01 90       	ld	r0, Z+
    34ba:	0d 92       	st	X+, r0
    34bc:	3a 95       	dec	r19
    34be:	e1 f7       	brne	.-8      	; 0x34b8 <Update_V1_1_to_V1_1_B8+0x60>
	
	// Copy back to General items structure
	Config.MPU6050_LPF = buffer[9];
    34c0:	20 93 4e 06 	sts	0x064E, r18
	temp = buffer[10];					// Pass through the RudderPol value
	memcpy((void*)((&Config.CF_factor) + (1)), (void*)&temp,1);
    34c4:	90 93 52 06 	sts	0x0652, r25
	
	// "None" no longer an option for this channel
	if (Config.FlightChan == NOCHAN)
    34c8:	88 30       	cpi	r24, 0x08	; 8
    34ca:	19 f4       	brne	.+6      	; 0x34d2 <Update_V1_1_to_V1_1_B8+0x7a>
	{
		Config.FlightChan = AUX3;
    34cc:	87 e0       	ldi	r24, 0x07	; 7
    34ce:	80 93 ee 05 	sts	0x05EE, r24
	}
	
	// Set magic number to V1.1 Beta 8 signature
	Config.setup = V1_1_B8_SIGNATURE;
    34d2:	87 e3       	ldi	r24, 0x37	; 55
    34d4:	80 93 c1 05 	sts	0x05C1, r24
}
    34d8:	2c 96       	adiw	r28, 0x0c	; 12
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	de bf       	out	0x3e, r29	; 62
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	cd bf       	out	0x3d, r28	; 61
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	08 95       	ret

000034ea <Update_V1_1B8_to_V1_1_B10>:

// Upgrade V1.1 B8 settings to V1.1 Beta 10 settings
void Update_V1_1B8_to_V1_1_B10(void)
{
	// Reset filters to more appropriate values
	Config.Acc_LPF = convert_filter_B8_B10(Config.Acc_LPF);
    34ea:	e0 91 4f 06 	lds	r30, 0x064F
    34ee:	e7 30       	cpi	r30, 0x07	; 7
    34f0:	28 f4       	brcc	.+10     	; 0x34fc <Update_V1_1B8_to_V1_1_B10+0x12>
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	e2 5f       	subi	r30, 0xF2	; 242
    34f6:	fa 4f       	sbci	r31, 0xFA	; 250
    34f8:	80 81       	ld	r24, Z
    34fa:	01 c0       	rjmp	.+2      	; 0x34fe <Update_V1_1B8_to_V1_1_B10+0x14>
    34fc:	87 e0       	ldi	r24, 0x07	; 7
    34fe:	80 93 4f 06 	sts	0x064F, r24
	Config.Gyro_LPF = convert_filter_B8_B10(Config.Gyro_LPF);
    3502:	e0 91 50 06 	lds	r30, 0x0650
    3506:	e7 30       	cpi	r30, 0x07	; 7
    3508:	28 f4       	brcc	.+10     	; 0x3514 <Update_V1_1B8_to_V1_1_B10+0x2a>
    350a:	f0 e0       	ldi	r31, 0x00	; 0
    350c:	e2 5f       	subi	r30, 0xF2	; 242
    350e:	fa 4f       	sbci	r31, 0xFA	; 250
    3510:	80 81       	ld	r24, Z
    3512:	01 c0       	rjmp	.+2      	; 0x3516 <Update_V1_1B8_to_V1_1_B10+0x2c>
    3514:	87 e0       	ldi	r24, 0x07	; 7
    3516:	80 93 50 06 	sts	0x0650, r24

	// Set magic number to V1.1 Beta 10 signature
	Config.setup = V1_1_B10_SIGNATURE;
    351a:	88 e3       	ldi	r24, 0x38	; 56
    351c:	80 93 c1 05 	sts	0x05C1, r24
    3520:	08 95       	ret

00003522 <Update_V1_1B10_to_V1_1_B12>:

// Upgrade V1.1 B10+ settings to V1.1 Beta 12 settings
void Update_V1_1B10_to_V1_1_B12(void)
{
	// Copy old RudderPol value to new location
	Config.RudderPol = Config.Preset;
    3522:	e2 e5       	ldi	r30, 0x52	; 82
    3524:	f6 e0       	ldi	r31, 0x06	; 6
    3526:	80 81       	ld	r24, Z
    3528:	80 93 c9 07 	sts	0x07C9, r24
	
	// Set preset to default and load it
	Config.Preset = QUADX;
    352c:	10 82       	st	Z, r1

	// Set magic number to V1.1 Beta 11 signature
	Config.setup = V1_1_B12_SIGNATURE;
    352e:	89 e3       	ldi	r24, 0x39	; 57
    3530:	80 93 c1 05 	sts	0x05C1, r24
    3534:	08 95       	ret

00003536 <Update_V1_1B12_to_V1_1_B18>:

// Upgrade V1.1 B12+ settings to V1.1 Beta 18 settings
void Update_V1_1B12_to_V1_1_B18(void)
{
	// Copy old AileronPol value (now in D_mult_roll) to new location
	Config.AileronPol = Config.D_mult_roll;
    3536:	80 91 f1 05 	lds	r24, 0x05F1
    353a:	80 93 ca 07 	sts	0x07CA, r24

	// Copy old ElevatorPol value (now in D_mult_pitch) to new location
	Config.ElevatorPol = Config.D_mult_pitch;
    353e:	80 91 f2 05 	lds	r24, 0x05F2
    3542:	80 93 cb 07 	sts	0x07CB, r24

	// Set magic number to V1.1 Beta 18 signature
	Config.setup = V1_1_B18_SIGNATURE;
    3546:	8a e3       	ldi	r24, 0x3A	; 58
    3548:	80 93 c1 05 	sts	0x05C1, r24
    354c:	08 95       	ret

0000354e <Load_eeprom_preset>:
	Load_eeprom_preset(QUADX);
	Config.Preset = OPTIONS; // Menu will display "Options"
}

void Load_eeprom_preset(uint8_t preset)
{
    354e:	0f 93       	push	r16
    3550:	1f 93       	push	r17
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
	uint8_t i;

	// Erase current profile settings
	memset(&Config.FlightMode[P1],0,sizeof(flight_control_t));
    3556:	92 e1       	ldi	r25, 0x12	; 18
    3558:	e3 ef       	ldi	r30, 0xF3	; 243
    355a:	f5 e0       	ldi	r31, 0x05	; 5
    355c:	df 01       	movw	r26, r30
    355e:	29 2f       	mov	r18, r25
    3560:	1d 92       	st	X+, r1
    3562:	2a 95       	dec	r18
    3564:	e9 f7       	brne	.-6      	; 0x3560 <Load_eeprom_preset+0x12>
	memset(&Config.FlightMode[P2],0,sizeof(flight_control_t));
    3566:	e5 e0       	ldi	r30, 0x05	; 5
    3568:	f6 e0       	ldi	r31, 0x06	; 6
    356a:	df 01       	movw	r26, r30
    356c:	1d 92       	st	X+, r1
    356e:	9a 95       	dec	r25
    3570:	e9 f7       	brne	.-6      	; 0x356c <Load_eeprom_preset+0x1e>

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);
    3572:	20 e3       	ldi	r18, 0x30	; 48
    3574:	31 e0       	ldi	r19, 0x01	; 1
    3576:	e3 e5       	ldi	r30, 0x53	; 83
    3578:	f6 e0       	ldi	r31, 0x06	; 6
    357a:	df 01       	movw	r26, r30
    357c:	a9 01       	movw	r20, r18
    357e:	1d 92       	st	X+, r1
    3580:	41 50       	subi	r20, 0x01	; 1
    3582:	50 40       	sbci	r21, 0x00	; 0
    3584:	e1 f7       	brne	.-8      	; 0x357e <Load_eeprom_preset+0x30>
    3586:	e7 e7       	ldi	r30, 0x77	; 119
    3588:	f6 e0       	ldi	r31, 0x06	; 6
    358a:	cb e8       	ldi	r28, 0x8B	; 139
    358c:	d7 e0       	ldi	r29, 0x07	; 7
    358e:	03 e9       	ldi	r16, 0x93	; 147
    3590:	17 e0       	ldi	r17, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3592:	72 e3       	ldi	r23, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3594:	9f e0       	ldi	r25, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    3596:	6c e9       	ldi	r22, 0x9C	; 156
		Config.max_travel[i] = 100;
    3598:	44 e6       	ldi	r20, 0x64	; 100
    359a:	9f 01       	movw	r18, r30
    359c:	2e 51       	subi	r18, 0x1E	; 30
    359e:	31 09       	sbc	r19, r1
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    35a0:	52 e3       	ldi	r21, 0x32	; 50
    35a2:	d9 01       	movw	r26, r18
    35a4:	7c 93       	st	X, r23
    35a6:	28 5e       	subi	r18, 0xE8	; 232
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_a 	= NOMIX;
    35aa:	d9 01       	movw	r26, r18
    35ac:	9c 93       	st	X, r25
    35ae:	2c 5f       	subi	r18, 0xFC	; 252
    35b0:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_b 	= NOMIX;
    35b2:	d9 01       	movw	r26, r18
    35b4:	9c 93       	st	X, r25
    35b6:	22 50       	subi	r18, 0x02	; 2
    35b8:	31 09       	sbc	r19, r1
		Config.Channel[i].P2_source_a 	= NOMIX;
    35ba:	d9 01       	movw	r26, r18
    35bc:	9c 93       	st	X, r25
		Config.Channel[i].P2_source_b 	= NOMIX;
    35be:	90 83       	st	Z, r25
		Config.min_travel[i] = -100;
    35c0:	69 93       	st	Y+, r22
		Config.max_travel[i] = 100;
    35c2:	24 e6       	ldi	r18, 0x64	; 100
    35c4:	d8 01       	movw	r26, r16
    35c6:	4d 93       	st	X+, r20
    35c8:	8d 01       	movw	r16, r26
    35ca:	b6 96       	adiw	r30, 0x26	; 38

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    35cc:	b7 e0       	ldi	r27, 0x07	; 7
    35ce:	e7 3a       	cpi	r30, 0xA7	; 167
    35d0:	fb 07       	cpc	r31, r27
    35d2:	19 f7       	brne	.-58     	; 0x359a <Load_eeprom_preset+0x4c>
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	switch (preset)
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	61 f0       	breq	.+24     	; 0x35f0 <Load_eeprom_preset+0xa2>
    35d8:	08 f4       	brcc	.+2      	; 0x35dc <Load_eeprom_preset+0x8e>
    35da:	ce c0       	rjmp	.+412    	; 0x3778 <Load_eeprom_preset+0x22a>
    35dc:	82 30       	cpi	r24, 0x02	; 2
    35de:	09 f4       	brne	.+2      	; 0x35e2 <Load_eeprom_preset+0x94>
    35e0:	87 c1       	rjmp	.+782    	; 0x38f0 <Load_eeprom_preset+0x3a2>
    35e2:	83 30       	cpi	r24, 0x03	; 3
    35e4:	09 f0       	breq	.+2      	; 0x35e8 <Load_eeprom_preset+0x9a>
    35e6:	45 c2       	rjmp	.+1162   	; 0x3a72 <Load_eeprom_preset+0x524>
	{
		case BLANK:
			Config.ArmMode = ARMABLE;
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	80 93 4b 06 	sts	0x064B, r24
	
			break;
    35ee:	41 c2       	rjmp	.+1154   	; 0x3a72 <Load_eeprom_preset+0x524>
		
		case QUADP:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    35f0:	80 93 4b 06 	sts	0x064B, r24
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 50;
    35f4:	50 93 f3 05 	sts	0x05F3, r21
			Config.FlightMode[P1].Roll_I_mult = 10;
    35f8:	9a e0       	ldi	r25, 0x0A	; 10
    35fa:	90 93 f4 05 	sts	0x05F4, r25
			Config.FlightMode[P1].Roll_limit = 10;
    35fe:	90 93 f5 05 	sts	0x05F5, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    3602:	22 e0       	ldi	r18, 0x02	; 2
    3604:	20 93 f6 05 	sts	0x05F6, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    3608:	90 93 f7 05 	sts	0x05F7, r25
			
			Config.FlightMode[P1].Pitch_P_mult = 50;
    360c:	50 93 f9 05 	sts	0x05F9, r21
			Config.FlightMode[P1].Pitch_I_mult = 10;
    3610:	90 93 fa 05 	sts	0x05FA, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    3614:	90 93 fb 05 	sts	0x05FB, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    3618:	20 93 fc 05 	sts	0x05FC, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    361c:	90 93 fd 05 	sts	0x05FD, r25
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    3620:	4c e3       	ldi	r20, 0x3C	; 60
    3622:	40 93 ff 05 	sts	0x05FF, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    3626:	98 e2       	ldi	r25, 0x28	; 40
    3628:	90 93 00 06 	sts	0x0600, r25
			Config.FlightMode[P1].Yaw_limit = 25;
    362c:	39 e1       	ldi	r19, 0x19	; 25
    362e:	30 93 01 06 	sts	0x0601, r19
			Config.FlightMode[P1].Yaw_Rate = 2;
    3632:	20 93 02 06 	sts	0x0602, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    3636:	50 93 04 06 	sts	0x0604, r21
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    363a:	90 93 05 06 	sts	0x0605, r25
			Config.FlightMode[P2].Roll_I_mult = 19;
    363e:	63 e1       	ldi	r22, 0x13	; 19
    3640:	60 93 06 06 	sts	0x0606, r22
			Config.FlightMode[P2].Roll_limit = 14;
    3644:	5e e0       	ldi	r21, 0x0E	; 14
    3646:	50 93 07 06 	sts	0x0607, r21
			Config.FlightMode[P2].Roll_Rate = 3;
    364a:	23 e0       	ldi	r18, 0x03	; 3
    364c:	20 93 08 06 	sts	0x0608, r18
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3650:	80 93 09 06 	sts	0x0609, r24
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    3654:	90 93 0b 06 	sts	0x060B, r25
			Config.FlightMode[P2].Pitch_I_mult = 19;
    3658:	60 93 0c 06 	sts	0x060C, r22
			Config.FlightMode[P2].Pitch_limit = 14;
    365c:	50 93 0d 06 	sts	0x060D, r21
			Config.FlightMode[P2].Pitch_Rate = 3;
    3660:	20 93 0e 06 	sts	0x060E, r18
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    3664:	80 93 0f 06 	sts	0x060F, r24
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    3668:	40 93 11 06 	sts	0x0611, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    366c:	90 93 12 06 	sts	0x0612, r25
			Config.FlightMode[P2].Yaw_limit = 25;
    3670:	30 93 13 06 	sts	0x0613, r19
			Config.FlightMode[P2].Yaw_Rate = 3;
    3674:	20 93 14 06 	sts	0x0614, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3678:	8e e1       	ldi	r24, 0x1E	; 30
    367a:	80 93 16 06 	sts	0x0616, r24
    367e:	e0 e7       	ldi	r30, 0x70	; 112
    3680:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3682:	34 e6       	ldi	r19, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    3684:	42 e0       	ldi	r20, 0x02	; 2
				Config.Channel[i].P1_Z_delta_acc = ON;
    3686:	21 e0       	ldi	r18, 0x01	; 1
    3688:	df 01       	movw	r26, r30
    368a:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    368c:	94 e6       	ldi	r25, 0x64	; 100
    368e:	3c 93       	st	X, r19
    3690:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    3692:	3c 93       	st	X, r19
    3694:	16 97       	sbiw	r26, 0x06	; 6
				Config.Channel[i].Motor_marker = MOTOR;
    3696:	4c 93       	st	X, r20
    3698:	58 96       	adiw	r26, 0x18	; 24
				Config.Channel[i].P1_Z_delta_acc = ON;
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	2c 93       	st	X, r18
				Config.Channel[i].P2_Z_delta_acc = ON;
    369e:	20 83       	st	Z, r18
    36a0:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    36a2:	57 e0       	ldi	r21, 0x07	; 7
    36a4:	e8 30       	cpi	r30, 0x08	; 8
    36a6:	f5 07       	cpc	r31, r21
    36a8:	79 f7       	brne	.-34     	; 0x3688 <Load_eeprom_preset+0x13a>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 0;
    36aa:	10 92 5f 06 	sts	0x065F, r1
			Config.Channel[OUT1].P2_aileron_volume = 0;
    36ae:	10 92 60 06 	sts	0x0660, r1
			Config.Channel[OUT1].P1_elevator_volume = -20;
    36b2:	2c ee       	ldi	r18, 0xEC	; 236
    36b4:	20 93 61 06 	sts	0x0661, r18
			Config.Channel[OUT1].P2_elevator_volume = -30;
    36b8:	32 ee       	ldi	r19, 0xE2	; 226
    36ba:	30 93 62 06 	sts	0x0662, r19
			Config.Channel[OUT1].P1_rudder_volume = -30;
    36be:	30 93 63 06 	sts	0x0663, r19
			Config.Channel[OUT1].P2_rudder_volume = -40;
    36c2:	68 ed       	ldi	r22, 0xD8	; 216
    36c4:	60 93 64 06 	sts	0x0664, r22
			Config.Channel[OUT1].P1_Pitch_gyro = ON;
    36c8:	80 93 67 06 	sts	0x0667, r24
			Config.Channel[OUT1].P1_Pitch_acc = ON;
    36cc:	80 93 6d 06 	sts	0x066D, r24
			Config.Channel[OUT1].P2_Pitch_gyro = ON;
    36d0:	80 93 68 06 	sts	0x0668, r24
			Config.Channel[OUT1].P2_Pitch_acc = ON;
    36d4:	80 93 6e 06 	sts	0x066E, r24
			Config.Channel[OUT1].P1_Yaw_gyro = ON;
    36d8:	80 93 69 06 	sts	0x0669, r24
			Config.Channel[OUT1].P2_Yaw_gyro = ON;
    36dc:	80 93 6a 06 	sts	0x066A, r24
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -20;
    36e0:	20 93 85 06 	sts	0x0685, r18
			Config.Channel[OUT2].P2_aileron_volume = -30;
    36e4:	30 93 86 06 	sts	0x0686, r19
			Config.Channel[OUT2].P1_elevator_volume = 0;
    36e8:	10 92 87 06 	sts	0x0687, r1
			Config.Channel[OUT2].P2_elevator_volume = 0;
    36ec:	10 92 88 06 	sts	0x0688, r1
			Config.Channel[OUT2].P1_rudder_volume = 30;
    36f0:	2e e1       	ldi	r18, 0x1E	; 30
    36f2:	20 93 89 06 	sts	0x0689, r18
			Config.Channel[OUT2].P2_rudder_volume = 40;
    36f6:	48 e2       	ldi	r20, 0x28	; 40
    36f8:	40 93 8a 06 	sts	0x068A, r20
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    36fc:	80 93 8b 06 	sts	0x068B, r24
			Config.Channel[OUT2].P1_Roll_acc = ON;
    3700:	80 93 91 06 	sts	0x0691, r24
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    3704:	80 93 8c 06 	sts	0x068C, r24
			Config.Channel[OUT2].P2_Roll_acc = ON;
    3708:	80 93 92 06 	sts	0x0692, r24
			Config.Channel[OUT2].P1_Yaw_gyro = ON;
    370c:	80 93 8f 06 	sts	0x068F, r24
			Config.Channel[OUT2].P2_Yaw_gyro = ON;
    3710:	80 93 90 06 	sts	0x0690, r24
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = 0;
    3714:	10 92 ab 06 	sts	0x06AB, r1
			Config.Channel[OUT3].P2_aileron_volume = 0;
    3718:	10 92 ac 06 	sts	0x06AC, r1
			Config.Channel[OUT3].P1_elevator_volume = 20;
    371c:	54 e1       	ldi	r21, 0x14	; 20
    371e:	50 93 ad 06 	sts	0x06AD, r21
			Config.Channel[OUT3].P2_elevator_volume = 30;
    3722:	20 93 ae 06 	sts	0x06AE, r18
			Config.Channel[OUT3].P1_rudder_volume = -30;
    3726:	30 93 af 06 	sts	0x06AF, r19
			Config.Channel[OUT3].P2_rudder_volume = -40;
    372a:	60 93 b0 06 	sts	0x06B0, r22
			Config.Channel[OUT3].P1_Pitch_gyro = ON;
    372e:	80 93 b3 06 	sts	0x06B3, r24
			Config.Channel[OUT3].P1_Pitch_acc = ON;
    3732:	80 93 b9 06 	sts	0x06B9, r24
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    3736:	80 93 b4 06 	sts	0x06B4, r24
			Config.Channel[OUT3].P2_Pitch_acc = ON;
    373a:	80 93 ba 06 	sts	0x06BA, r24
			Config.Channel[OUT3].P1_Yaw_gyro = ON;
    373e:	80 93 b5 06 	sts	0x06B5, r24
			Config.Channel[OUT3].P2_Yaw_gyro = ON;
    3742:	80 93 b6 06 	sts	0x06B6, r24
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 20;
    3746:	50 93 d1 06 	sts	0x06D1, r21
			Config.Channel[OUT4].P2_aileron_volume = 30;
    374a:	20 93 d2 06 	sts	0x06D2, r18
			Config.Channel[OUT4].P1_elevator_volume = 0;
    374e:	10 92 d3 06 	sts	0x06D3, r1
			Config.Channel[OUT4].P2_elevator_volume = 0;
    3752:	10 92 d4 06 	sts	0x06D4, r1
			Config.Channel[OUT4].P1_rudder_volume = 30;
    3756:	20 93 d5 06 	sts	0x06D5, r18
			Config.Channel[OUT4].P2_rudder_volume = 40;
    375a:	40 93 d6 06 	sts	0x06D6, r20
			Config.Channel[OUT4].P1_Roll_gyro = ON;
    375e:	80 93 d7 06 	sts	0x06D7, r24
			Config.Channel[OUT4].P1_Roll_acc = ON;
    3762:	80 93 dd 06 	sts	0x06DD, r24
			Config.Channel[OUT4].P2_Roll_gyro = ON;
    3766:	80 93 d8 06 	sts	0x06D8, r24
			Config.Channel[OUT4].P2_Roll_acc = ON;
    376a:	80 93 de 06 	sts	0x06DE, r24
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    376e:	80 93 db 06 	sts	0x06DB, r24
			Config.Channel[OUT4].P2_Yaw_gyro = ON;		
    3772:	80 93 dc 06 	sts	0x06DC, r24
    3776:	a9 c0       	rjmp	.+338    	; 0x38ca <Load_eeprom_preset+0x37c>
			Config.Channel[OUT8].P2_offset = 100;			
			break;
				
		case QUADX:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    3778:	31 e0       	ldi	r19, 0x01	; 1
    377a:	30 93 4b 06 	sts	0x064B, r19
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    377e:	88 e2       	ldi	r24, 0x28	; 40
    3780:	80 93 f3 05 	sts	0x05F3, r24
			Config.FlightMode[P1].Roll_I_mult = 10;
    3784:	9a e0       	ldi	r25, 0x0A	; 10
    3786:	90 93 f4 05 	sts	0x05F4, r25
			Config.FlightMode[P1].Roll_limit = 10;
    378a:	90 93 f5 05 	sts	0x05F5, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    378e:	22 e0       	ldi	r18, 0x02	; 2
    3790:	20 93 f6 05 	sts	0x05F6, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    3794:	90 93 f7 05 	sts	0x05F7, r25
	
			Config.FlightMode[P1].Pitch_P_mult = 40;
    3798:	80 93 f9 05 	sts	0x05F9, r24
			Config.FlightMode[P1].Pitch_I_mult = 10;
    379c:	90 93 fa 05 	sts	0x05FA, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    37a0:	90 93 fb 05 	sts	0x05FB, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    37a4:	20 93 fc 05 	sts	0x05FC, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    37a8:	90 93 fd 05 	sts	0x05FD, r25
	
			Config.FlightMode[P1].Yaw_P_mult = 60;
    37ac:	4c e3       	ldi	r20, 0x3C	; 60
    37ae:	40 93 ff 05 	sts	0x05FF, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    37b2:	80 93 00 06 	sts	0x0600, r24
			Config.FlightMode[P1].Yaw_limit = 25;
    37b6:	99 e1       	ldi	r25, 0x19	; 25
    37b8:	90 93 01 06 	sts	0x0601, r25
			Config.FlightMode[P1].Yaw_Rate = 2;
    37bc:	20 93 02 06 	sts	0x0602, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    37c0:	50 93 04 06 	sts	0x0604, r21
	
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    37c4:	80 93 05 06 	sts	0x0605, r24
			Config.FlightMode[P2].Roll_I_mult = 19;
    37c8:	73 e1       	ldi	r23, 0x13	; 19
    37ca:	70 93 06 06 	sts	0x0606, r23
			Config.FlightMode[P2].Roll_limit = 14;
    37ce:	6e e0       	ldi	r22, 0x0E	; 14
    37d0:	60 93 07 06 	sts	0x0607, r22
			Config.FlightMode[P2].Roll_Rate = 3;
    37d4:	53 e0       	ldi	r21, 0x03	; 3
    37d6:	50 93 08 06 	sts	0x0608, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    37da:	30 93 09 06 	sts	0x0609, r19
	
			Config.FlightMode[P2].Pitch_P_mult = 40;
    37de:	80 93 0b 06 	sts	0x060B, r24
			Config.FlightMode[P2].Pitch_I_mult = 19;
    37e2:	70 93 0c 06 	sts	0x060C, r23
			Config.FlightMode[P2].Pitch_limit = 14;
    37e6:	60 93 0d 06 	sts	0x060D, r22
			Config.FlightMode[P2].Pitch_Rate = 3;
    37ea:	50 93 0e 06 	sts	0x060E, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    37ee:	30 93 0f 06 	sts	0x060F, r19
	
			Config.FlightMode[P2].Yaw_P_mult = 60;
    37f2:	40 93 11 06 	sts	0x0611, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    37f6:	80 93 12 06 	sts	0x0612, r24
			Config.FlightMode[P2].Yaw_limit = 25;
    37fa:	90 93 13 06 	sts	0x0613, r25
			Config.FlightMode[P2].Yaw_Rate = 2;
    37fe:	20 93 14 06 	sts	0x0614, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3802:	8e e1       	ldi	r24, 0x1E	; 30
    3804:	80 93 16 06 	sts	0x0616, r24
    3808:	e0 e7       	ldi	r30, 0x70	; 112
    380a:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    380c:	24 e6       	ldi	r18, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    380e:	32 e0       	ldi	r19, 0x02	; 2
				Config.Channel[i].P1_Roll_gyro = ON;
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	df 01       	movw	r26, r30
    3814:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3816:	94 e6       	ldi	r25, 0x64	; 100
    3818:	2c 93       	st	X, r18
    381a:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    381c:	2c 93       	st	X, r18
    381e:	16 97       	sbiw	r26, 0x06	; 6
				Config.Channel[i].Motor_marker = MOTOR;
    3820:	3c 93       	st	X, r19
    3822:	1e 96       	adiw	r26, 0x0e	; 14
				Config.Channel[i].P1_Roll_gyro = ON;
    3824:	8c 93       	st	X, r24
    3826:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Roll_acc = ON;
    3828:	8c 93       	st	X, r24
    382a:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Roll_gyro = ON;
    382c:	8c 93       	st	X, r24
    382e:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Roll_acc = ON;
    3830:	8c 93       	st	X, r24
    3832:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Pitch_gyro = ON;
    3834:	8c 93       	st	X, r24
    3836:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Pitch_acc = ON;
    3838:	8c 93       	st	X, r24
    383a:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Pitch_gyro = ON;
    383c:	8c 93       	st	X, r24
    383e:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Pitch_acc = ON;
    3840:	8c 93       	st	X, r24
    3842:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Yaw_gyro = ON;
    3844:	8c 93       	st	X, r24
    3846:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_Yaw_gyro = ON;
    3848:	8c 93       	st	X, r24
    384a:	15 96       	adiw	r26, 0x05	; 5
				Config.Channel[i].P1_Z_delta_acc = ON;
    384c:	8c 93       	st	X, r24
				Config.Channel[i].P2_Z_delta_acc = ON;
    384e:	80 83       	st	Z, r24
    3850:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    3852:	a7 e0       	ldi	r26, 0x07	; 7
    3854:	e8 30       	cpi	r30, 0x08	; 8
    3856:	fa 07       	cpc	r31, r26
    3858:	e1 f6       	brne	.-72     	; 0x3812 <Load_eeprom_preset+0x2c4>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 15;
    385a:	2f e0       	ldi	r18, 0x0F	; 15
    385c:	20 93 5f 06 	sts	0x065F, r18
			Config.Channel[OUT1].P2_aileron_volume = 20;
    3860:	84 e1       	ldi	r24, 0x14	; 20
    3862:	80 93 60 06 	sts	0x0660, r24
			Config.Channel[OUT1].P1_elevator_volume = -15;
    3866:	41 ef       	ldi	r20, 0xF1	; 241
    3868:	40 93 61 06 	sts	0x0661, r20
			Config.Channel[OUT1].P2_elevator_volume = -20;
    386c:	3c ee       	ldi	r19, 0xEC	; 236
    386e:	30 93 62 06 	sts	0x0662, r19
			Config.Channel[OUT1].P1_rudder_volume = -40;
    3872:	e8 ed       	ldi	r30, 0xD8	; 216
    3874:	e0 93 63 06 	sts	0x0663, r30
			Config.Channel[OUT1].P2_rudder_volume = -50;
    3878:	7e ec       	ldi	r23, 0xCE	; 206
    387a:	70 93 64 06 	sts	0x0664, r23
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -15;
    387e:	40 93 85 06 	sts	0x0685, r20
			Config.Channel[OUT2].P2_aileron_volume = -20;
    3882:	30 93 86 06 	sts	0x0686, r19
			Config.Channel[OUT2].P1_elevator_volume = -15;
    3886:	40 93 87 06 	sts	0x0687, r20
			Config.Channel[OUT2].P2_elevator_volume = -20;
    388a:	30 93 88 06 	sts	0x0688, r19
			Config.Channel[OUT2].P1_rudder_volume = 40;
    388e:	68 e2       	ldi	r22, 0x28	; 40
    3890:	60 93 89 06 	sts	0x0689, r22
			Config.Channel[OUT2].P2_rudder_volume = 50;
    3894:	52 e3       	ldi	r21, 0x32	; 50
    3896:	50 93 8a 06 	sts	0x068A, r21
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = -15;
    389a:	40 93 ab 06 	sts	0x06AB, r20
			Config.Channel[OUT3].P2_aileron_volume = -20;
    389e:	30 93 ac 06 	sts	0x06AC, r19
			Config.Channel[OUT3].P1_elevator_volume = 15;
    38a2:	20 93 ad 06 	sts	0x06AD, r18
			Config.Channel[OUT3].P2_elevator_volume = 20;
    38a6:	80 93 ae 06 	sts	0x06AE, r24
			Config.Channel[OUT3].P1_rudder_volume = -40;
    38aa:	e0 93 af 06 	sts	0x06AF, r30
			Config.Channel[OUT3].P2_rudder_volume = -50;
    38ae:	70 93 b0 06 	sts	0x06B0, r23
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 15;
    38b2:	20 93 d1 06 	sts	0x06D1, r18
			Config.Channel[OUT4].P2_aileron_volume = 20;
    38b6:	80 93 d2 06 	sts	0x06D2, r24
			Config.Channel[OUT4].P1_elevator_volume = 15;
    38ba:	20 93 d3 06 	sts	0x06D3, r18
			Config.Channel[OUT4].P2_elevator_volume = 20;
    38be:	80 93 d4 06 	sts	0x06D4, r24
			Config.Channel[OUT4].P1_rudder_volume = 40;
    38c2:	60 93 d5 06 	sts	0x06D5, r22
			Config.Channel[OUT4].P2_rudder_volume = 50;
    38c6:	50 93 d6 06 	sts	0x06D6, r21

			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    38ca:	8b e4       	ldi	r24, 0x4B	; 75
    38cc:	80 93 f9 06 	sts	0x06F9, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    38d0:	90 93 fa 06 	sts	0x06FA, r25
			
			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    38d4:	80 93 1d 07 	sts	0x071D, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    38d8:	90 93 1e 07 	sts	0x071E, r25
						
			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    38dc:	80 93 47 07 	sts	0x0747, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    38e0:	90 93 48 07 	sts	0x0748, r25
									
			// OUT8
			Config.Channel[OUT8].P1_offset = -100;
    38e4:	8c e9       	ldi	r24, 0x9C	; 156
    38e6:	80 93 62 07 	sts	0x0762, r24
			Config.Channel[OUT8].P2_offset = 100;
    38ea:	90 93 65 07 	sts	0x0765, r25
			break;
    38ee:	c1 c0       	rjmp	.+386    	; 0x3a72 <Load_eeprom_preset+0x524>
		
		case TRICOPTER:
			// Preset simple mixing for primary channels
			Config.ArmMode = ARMABLE;
    38f0:	91 e0       	ldi	r25, 0x01	; 1
    38f2:	90 93 4b 06 	sts	0x064B, r25
		
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    38f6:	38 e2       	ldi	r19, 0x28	; 40
    38f8:	30 93 f3 05 	sts	0x05F3, r19
			Config.FlightMode[P1].Roll_I_mult = 10;
    38fc:	4a e0       	ldi	r20, 0x0A	; 10
    38fe:	40 93 f4 05 	sts	0x05F4, r20
			Config.FlightMode[P1].Roll_limit = 10;
    3902:	40 93 f5 05 	sts	0x05F5, r20
			Config.FlightMode[P1].Roll_Rate = 2;
    3906:	80 93 f6 05 	sts	0x05F6, r24
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    390a:	40 93 f7 05 	sts	0x05F7, r20
			
			Config.FlightMode[P1].Pitch_P_mult = 40;
    390e:	30 93 f9 05 	sts	0x05F9, r19
			Config.FlightMode[P1].Pitch_I_mult = 10;
    3912:	40 93 fa 05 	sts	0x05FA, r20
			Config.FlightMode[P1].Pitch_limit = 10;
    3916:	40 93 fb 05 	sts	0x05FB, r20
			Config.FlightMode[P1].Pitch_Rate = 2;
    391a:	80 93 fc 05 	sts	0x05FC, r24
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    391e:	40 93 fd 05 	sts	0x05FD, r20
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    3922:	6c e3       	ldi	r22, 0x3C	; 60
    3924:	60 93 ff 05 	sts	0x05FF, r22
			Config.FlightMode[P1].Yaw_I_mult = 40;
    3928:	30 93 00 06 	sts	0x0600, r19
			Config.FlightMode[P1].Yaw_limit = 25;
    392c:	49 e1       	ldi	r20, 0x19	; 25
    392e:	40 93 01 06 	sts	0x0601, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    3932:	80 93 02 06 	sts	0x0602, r24
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    3936:	50 93 04 06 	sts	0x0604, r21
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    393a:	30 93 05 06 	sts	0x0605, r19
			Config.FlightMode[P2].Roll_I_mult = 19;
    393e:	e3 e1       	ldi	r30, 0x13	; 19
    3940:	e0 93 06 06 	sts	0x0606, r30
			Config.FlightMode[P2].Roll_limit = 14;
    3944:	7e e0       	ldi	r23, 0x0E	; 14
    3946:	70 93 07 06 	sts	0x0607, r23
			Config.FlightMode[P2].Roll_Rate = 3;
    394a:	53 e0       	ldi	r21, 0x03	; 3
    394c:	50 93 08 06 	sts	0x0608, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3950:	90 93 09 06 	sts	0x0609, r25
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    3954:	30 93 0b 06 	sts	0x060B, r19
			Config.FlightMode[P2].Pitch_I_mult = 19;
    3958:	e0 93 0c 06 	sts	0x060C, r30
			Config.FlightMode[P2].Pitch_limit = 14;
    395c:	70 93 0d 06 	sts	0x060D, r23
			Config.FlightMode[P2].Pitch_Rate = 3;
    3960:	50 93 0e 06 	sts	0x060E, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    3964:	90 93 0f 06 	sts	0x060F, r25
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    3968:	60 93 11 06 	sts	0x0611, r22
			Config.FlightMode[P2].Yaw_I_mult = 40;
    396c:	30 93 12 06 	sts	0x0612, r19
			Config.FlightMode[P2].Yaw_limit = 25;
    3970:	40 93 13 06 	sts	0x0613, r20
			Config.FlightMode[P2].Yaw_Rate = 2;
    3974:	80 93 14 06 	sts	0x0614, r24
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3978:	4e e1       	ldi	r20, 0x1E	; 30
    397a:	40 93 16 06 	sts	0x0616, r20
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    397e:	20 93 5c 06 	sts	0x065C, r18
				Config.Channel[i].P2_throttle_volume = 100;
    3982:	20 93 5d 06 	sts	0x065D, r18
				Config.Channel[i].Motor_marker = MOTOR;
    3986:	80 93 57 06 	sts	0x0657, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    398a:	20 93 82 06 	sts	0x0682, r18
				Config.Channel[i].P2_throttle_volume = 100;
    398e:	20 93 83 06 	sts	0x0683, r18
				Config.Channel[i].Motor_marker = MOTOR;
    3992:	80 93 7d 06 	sts	0x067D, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3996:	20 93 a8 06 	sts	0x06A8, r18
				Config.Channel[i].P2_throttle_volume = 100;
    399a:	20 93 a9 06 	sts	0x06A9, r18
				Config.Channel[i].Motor_marker = MOTOR;
    399e:	80 93 a3 06 	sts	0x06A3, r24
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 30;
    39a2:	40 93 5f 06 	sts	0x065F, r20
			Config.Channel[OUT1].P2_aileron_volume = 40;
    39a6:	30 93 60 06 	sts	0x0660, r19
			Config.Channel[OUT1].P1_elevator_volume = -15;
    39aa:	61 ef       	ldi	r22, 0xF1	; 241
    39ac:	60 93 61 06 	sts	0x0661, r22
			Config.Channel[OUT1].P2_elevator_volume = -20;
    39b0:	5c ee       	ldi	r21, 0xEC	; 236
    39b2:	50 93 62 06 	sts	0x0662, r21
			Config.Channel[OUT1].P1_Roll_gyro = ON;
    39b6:	90 93 65 06 	sts	0x0665, r25
			Config.Channel[OUT1].P1_Roll_acc = ON;
    39ba:	90 93 6b 06 	sts	0x066B, r25
			Config.Channel[OUT1].P2_Roll_gyro = ON;
    39be:	90 93 66 06 	sts	0x0666, r25
			Config.Channel[OUT1].P2_Roll_acc = ON;
    39c2:	90 93 6c 06 	sts	0x066C, r25
			Config.Channel[OUT1].P1_Pitch_gyro = SCALE;
    39c6:	80 93 67 06 	sts	0x0667, r24
			Config.Channel[OUT1].P1_Pitch_acc = SCALE;
    39ca:	80 93 6d 06 	sts	0x066D, r24
			Config.Channel[OUT1].P2_Pitch_gyro = SCALE;
    39ce:	80 93 68 06 	sts	0x0668, r24
			Config.Channel[OUT1].P2_Pitch_acc = SCALE;
    39d2:	80 93 6e 06 	sts	0x066E, r24
			Config.Channel[OUT1].P1_Z_delta_acc = ON;
    39d6:	90 93 6f 06 	sts	0x066F, r25
			Config.Channel[OUT1].P2_Z_delta_acc = ON;
    39da:	90 93 70 06 	sts	0x0670, r25
		
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -30;
    39de:	72 ee       	ldi	r23, 0xE2	; 226
    39e0:	70 93 85 06 	sts	0x0685, r23
			Config.Channel[OUT2].P2_aileron_volume = -40;
    39e4:	78 ed       	ldi	r23, 0xD8	; 216
    39e6:	70 93 86 06 	sts	0x0686, r23
			Config.Channel[OUT2].P1_elevator_volume = -15;
    39ea:	60 93 87 06 	sts	0x0687, r22
			Config.Channel[OUT2].P2_elevator_volume = -20;
    39ee:	50 93 88 06 	sts	0x0688, r21
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    39f2:	90 93 8b 06 	sts	0x068B, r25
			Config.Channel[OUT2].P1_Roll_acc = ON;
    39f6:	90 93 91 06 	sts	0x0691, r25
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    39fa:	90 93 8c 06 	sts	0x068C, r25
			Config.Channel[OUT2].P2_Roll_acc = ON;
    39fe:	90 93 92 06 	sts	0x0692, r25
			Config.Channel[OUT2].P1_Pitch_gyro = SCALE;
    3a02:	80 93 8d 06 	sts	0x068D, r24
			Config.Channel[OUT2].P1_Pitch_acc = SCALE;
    3a06:	80 93 93 06 	sts	0x0693, r24
			Config.Channel[OUT2].P2_Pitch_gyro = SCALE;
    3a0a:	80 93 8e 06 	sts	0x068E, r24
			Config.Channel[OUT2].P2_Pitch_acc = SCALE;
    3a0e:	80 93 94 06 	sts	0x0694, r24
			Config.Channel[OUT2].P1_Z_delta_acc = ON;
    3a12:	90 93 95 06 	sts	0x0695, r25
			Config.Channel[OUT2].P2_Z_delta_acc = ON;
    3a16:	90 93 96 06 	sts	0x0696, r25
		
			// OUT3
			Config.Channel[OUT3].P1_elevator_volume = 30;
    3a1a:	40 93 ad 06 	sts	0x06AD, r20
			Config.Channel[OUT3].P2_elevator_volume = 40;
    3a1e:	30 93 ae 06 	sts	0x06AE, r19
			Config.Channel[OUT3].P1_Pitch_gyro = SCALE;
    3a22:	80 93 b3 06 	sts	0x06B3, r24
			Config.Channel[OUT3].P1_Pitch_acc = SCALE;
    3a26:	80 93 b9 06 	sts	0x06B9, r24
			Config.Channel[OUT3].P2_Pitch_gyro = SCALE;
    3a2a:	80 93 b4 06 	sts	0x06B4, r24
			Config.Channel[OUT3].P2_Pitch_acc = SCALE;
    3a2e:	80 93 ba 06 	sts	0x06BA, r24
			Config.Channel[OUT3].P1_Z_delta_acc = ON;
    3a32:	90 93 bb 06 	sts	0x06BB, r25
			Config.Channel[OUT3].P2_Z_delta_acc = ON;
    3a36:	90 93 bc 06 	sts	0x06BC, r25
			
			// OUT4
			Config.Channel[OUT4].Motor_marker = ASERVO;
    3a3a:	10 92 c9 06 	sts	0x06C9, r1
			Config.Channel[OUT4].P1_rudder_volume = 75;
    3a3e:	8b e4       	ldi	r24, 0x4B	; 75
    3a40:	80 93 d5 06 	sts	0x06D5, r24
			Config.Channel[OUT4].P2_rudder_volume = 100;
    3a44:	20 93 d6 06 	sts	0x06D6, r18
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    3a48:	90 93 db 06 	sts	0x06DB, r25
			Config.Channel[OUT4].P2_Yaw_gyro = ON;
    3a4c:	90 93 dc 06 	sts	0x06DC, r25
			
			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    3a50:	80 93 f9 06 	sts	0x06F9, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    3a54:	20 93 fa 06 	sts	0x06FA, r18

			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    3a58:	80 93 1d 07 	sts	0x071D, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    3a5c:	20 93 1e 07 	sts	0x071E, r18

			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    3a60:	80 93 47 07 	sts	0x0747, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    3a64:	20 93 48 07 	sts	0x0748, r18

			// OUT8
			Config.Channel[OUT8].P1_offset = -100;
    3a68:	8c e9       	ldi	r24, 0x9C	; 156
    3a6a:	80 93 62 07 	sts	0x0762, r24
			Config.Channel[OUT8].P2_offset = 100;
    3a6e:	20 93 65 07 	sts	0x0765, r18
			break;
		
		default:
			break;
	}
    3a72:	df 91       	pop	r29
    3a74:	cf 91       	pop	r28
    3a76:	1f 91       	pop	r17
    3a78:	0f 91       	pop	r16
    3a7a:	08 95       	ret

00003a7c <Set_EEPROM_Default_Config>:
	return new_filter;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    3a7c:	cf 93       	push	r28
    3a7e:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    3a80:	80 e2       	ldi	r24, 0x20	; 32
    3a82:	92 e0       	ldi	r25, 0x02	; 2
    3a84:	e1 ec       	ldi	r30, 0xC1	; 193
    3a86:	f5 e0       	ldi	r31, 0x05	; 5
    3a88:	df 01       	movw	r26, r30
    3a8a:	9c 01       	movw	r18, r24
    3a8c:	1d 92       	st	X+, r1
    3a8e:	21 50       	subi	r18, 0x01	; 1
    3a90:	30 40       	sbci	r19, 0x00	; 0
    3a92:	e1 f7       	brne	.-8      	; 0x3a8c <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    3a94:	8a e3       	ldi	r24, 0x3A	; 58
    3a96:	80 93 c1 05 	sts	0x05C1, r24

	// General
	Config.RxMode = SBUS;
    3a9a:	82 e0       	ldi	r24, 0x02	; 2
    3a9c:	80 93 ea 05 	sts	0x05EA, r24
	Config.FlightChan = GEAR;
    3aa0:	94 e0       	ldi	r25, 0x04	; 4
    3aa2:	90 93 ee 05 	sts	0x05EE, r25
	Config.ArmMode = ARMABLE;
    3aa6:	21 e0       	ldi	r18, 0x01	; 1
    3aa8:	20 93 4b 06 	sts	0x064B, r18
	Config.Servo_rate = FAST;
    3aac:	80 93 eb 05 	sts	0x05EB, r24
	Config.PWM_Sync = GEAR;
    3ab0:	90 93 ec 05 	sts	0x05EC, r25
	Config.Acc_LPF = HZ21;
    3ab4:	80 93 4f 06 	sts	0x064F, r24
	Config.Gyro_LPF = NOFILTER;
    3ab8:	87 e0       	ldi	r24, 0x07	; 7
    3aba:	80 93 50 06 	sts	0x0650, r24
	Config.MPU6050_LPF = HZ44;
    3abe:	93 e0       	ldi	r25, 0x03	; 3
    3ac0:	90 93 4e 06 	sts	0x064E, r25
	Config.CF_factor = 7;
    3ac4:	80 93 51 06 	sts	0x0651, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    3ac8:	8e e1       	ldi	r24, 0x1E	; 30
    3aca:	80 93 4c 06 	sts	0x064C, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    3ace:	82 e3       	ldi	r24, 0x32	; 50
    3ad0:	80 93 f0 05 	sts	0x05F0, r24
	
	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    3ad4:	80 e8       	ldi	r24, 0x80	; 128
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	90 93 b2 07 	sts	0x07B2, r25
    3adc:	80 93 b1 07 	sts	0x07B1, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    3ae0:	84 e2       	ldi	r24, 0x24	; 36
    3ae2:	80 93 4a 06 	sts	0x064A, r24
    3ae6:	e8 ef       	ldi	r30, 0xF8	; 248
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	c2 ec       	ldi	r28, 0xC2	; 194
    3aec:	d5 e0       	ldi	r29, 0x05	; 5
    3aee:	ab e9       	ldi	r26, 0x9B	; 155
    3af0:	b7 e0       	ldi	r27, 0x07	; 7
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    3af2:	86 ea       	ldi	r24, 0xA6	; 166
    3af4:	9e e0       	ldi	r25, 0x0E	; 14
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    3af6:	24 91       	lpm	r18, Z
    3af8:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    3afa:	8d 93       	st	X+, r24
    3afc:	9d 93       	st	X+, r25
    3afe:	31 96       	adiw	r30, 0x01	; 1
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    3b00:	31 e0       	ldi	r19, 0x01	; 1
    3b02:	e0 30       	cpi	r30, 0x00	; 0
    3b04:	f3 07       	cpc	r31, r19
    3b06:	b9 f7       	brne	.-18     	; 0x3af6 <Set_EEPROM_Default_Config+0x7a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    3b08:	8e eb       	ldi	r24, 0xBE	; 190
    3b0a:	9a e0       	ldi	r25, 0x0A	; 10
    3b0c:	90 93 9c 07 	sts	0x079C, r25
    3b10:	80 93 9b 07 	sts	0x079B, r24
    3b14:	e7 e7       	ldi	r30, 0x77	; 119
    3b16:	f6 e0       	ldi	r31, 0x06	; 6
    3b18:	cb e8       	ldi	r28, 0x8B	; 139
    3b1a:	d7 e0       	ldi	r29, 0x07	; 7
    3b1c:	63 e9       	ldi	r22, 0x93	; 147
    3b1e:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3b20:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3b22:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    3b24:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    3b26:	34 e6       	ldi	r19, 0x64	; 100
    3b28:	cf 01       	movw	r24, r30
    3b2a:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	5c 93       	st	X, r21
    3b30:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3b32:	dc 01       	movw	r26, r24
    3b34:	2c 93       	st	X, r18
    3b36:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    3b38:	dc 01       	movw	r26, r24
    3b3a:	2c 93       	st	X, r18
    3b3c:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    3b3e:	dc 01       	movw	r26, r24
    3b40:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3b42:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    3b44:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    3b46:	db 01       	movw	r26, r22
    3b48:	3d 93       	st	X+, r19
    3b4a:	bd 01       	movw	r22, r26
    3b4c:	b6 96       	adiw	r30, 0x26	; 38
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3b4e:	b7 e0       	ldi	r27, 0x07	; 7
    3b50:	e7 3a       	cpi	r30, 0xA7	; 167
    3b52:	fb 07       	cpc	r31, r27
    3b54:	49 f7       	brne	.-46     	; 0x3b28 <Set_EEPROM_Default_Config+0xac>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Load manual defaults
	Load_eeprom_preset(QUADX);
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	0e 94 a7 1a 	call	0x354e	; 0x354e <Load_eeprom_preset>
	Config.Preset = OPTIONS; // Menu will display "Options"
    3b5c:	84 e0       	ldi	r24, 0x04	; 4
    3b5e:	80 93 52 06 	sts	0x0652, r24
}
    3b62:	df 91       	pop	r29
    3b64:	cf 91       	pop	r28
    3b66:	08 95       	ret

00003b68 <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	1f 92       	push	r1
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    3b72:	40 e2       	ldi	r20, 0x20	; 32
    3b74:	52 e0       	ldi	r21, 0x02	; 2
    3b76:	60 e0       	ldi	r22, 0x00	; 0
    3b78:	70 e0       	ldi	r23, 0x00	; 0
    3b7a:	81 ec       	ldi	r24, 0xC1	; 193
    3b7c:	95 e0       	ldi	r25, 0x05	; 5
    3b7e:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    3b82:	80 91 c1 05 	lds	r24, 0x05C1
    3b86:	87 33       	cpi	r24, 0x37	; 55
    3b88:	81 f0       	breq	.+32     	; 0x3baa <Initial_EEPROM_Config_Load+0x42>
    3b8a:	28 f4       	brcc	.+10     	; 0x3b96 <Initial_EEPROM_Config_Load+0x2e>
    3b8c:	85 33       	cpi	r24, 0x35	; 53
    3b8e:	49 f0       	breq	.+18     	; 0x3ba2 <Initial_EEPROM_Config_Load+0x3a>
    3b90:	86 33       	cpi	r24, 0x36	; 54
    3b92:	49 f0       	breq	.+18     	; 0x3ba6 <Initial_EEPROM_Config_Load+0x3e>
    3b94:	12 c0       	rjmp	.+36     	; 0x3bba <Initial_EEPROM_Config_Load+0x52>
    3b96:	89 33       	cpi	r24, 0x39	; 57
    3b98:	61 f0       	breq	.+24     	; 0x3bb2 <Initial_EEPROM_Config_Load+0x4a>
    3b9a:	48 f0       	brcs	.+18     	; 0x3bae <Initial_EEPROM_Config_Load+0x46>
    3b9c:	8a 33       	cpi	r24, 0x3A	; 58
    3b9e:	79 f0       	breq	.+30     	; 0x3bbe <Initial_EEPROM_Config_Load+0x56>
    3ba0:	0c c0       	rjmp	.+24     	; 0x3bba <Initial_EEPROM_Config_Load+0x52>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1_B7();
    3ba2:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Update_V1_0_to_V1_1_B7>
			// Fall through...

		case V1_1_B7_SIGNATURE:				// V1.1 Beta 7 (or below) detected
			Update_V1_1_to_V1_1_B8();	
    3ba6:	0e 94 2c 1a 	call	0x3458	; 0x3458 <Update_V1_1_to_V1_1_B8>
			// Fall through...

		case V1_1_B8_SIGNATURE:				// V1.1 Beta 8-9 detected
			Update_V1_1B8_to_V1_1_B10();
    3baa:	0e 94 75 1a 	call	0x34ea	; 0x34ea <Update_V1_1B8_to_V1_1_B10>
			// Fall through...

		case V1_1_B10_SIGNATURE:			// V1.1 Beta 10+ detected
			Update_V1_1B10_to_V1_1_B12();
    3bae:	0e 94 91 1a 	call	0x3522	; 0x3522 <Update_V1_1B10_to_V1_1_B12>
			// Fall through...

		case V1_1_B12_SIGNATURE:			// V1.1 Beta 12 detected
			Update_V1_1B12_to_V1_1_B18();
    3bb2:	0e 94 9b 1a 	call	0x3536	; 0x3536 <Update_V1_1B12_to_V1_1_B18>
			updated = true;
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	03 c0       	rjmp	.+6      	; 0x3bc0 <Initial_EEPROM_Config_Load+0x58>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    3bba:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    3bc0:	89 83       	std	Y+1, r24	; 0x01
    3bc2:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	0f 90       	pop	r0
    3bca:	df 91       	pop	r29
    3bcc:	cf 91       	pop	r28
    3bce:	08 95       	ret

00003bd0 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    3bd0:	cf 93       	push	r28
    3bd2:	df 93       	push	r29
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    3bd8:	ac 97       	sbiw	r28, 0x2c	; 44
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	
	// Do all init tasks
	init();
    3be4:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <init>
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    3be8:	b3 e0       	ldi	r27, 0x03	; 3
    3bea:	8b 2e       	mov	r8, r27
    3bec:	91 2c       	mov	r9, r1
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    3bee:	19 a6       	std	Y+41, r1	; 0x29
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    3bf0:	18 a6       	std	Y+40, r1	; 0x28
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    3bf2:	13 e0       	ldi	r17, 0x03	; 3
    3bf4:	71 2e       	mov	r7, r17

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    3bf6:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    3bf8:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    3bfa:	b1 2c       	mov	r11, r1
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    3bfc:	1f 8a       	std	Y+23, r1	; 0x17
    3bfe:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;
    3c00:	1f a2       	std	Y+39, r1	; 0x27
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    3c02:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    3c04:	1d a2       	std	Y+37, r1	; 0x25
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    3c06:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    3c08:	1b a2       	std	Y+35, r1	; 0x23
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    3c0a:	1a a2       	std	Y+34, r1	; 0x22

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    3c0c:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    3c0e:	18 a2       	std	Y+32, r1	; 0x20
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    3c10:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    3c12:	41 2c       	mov	r4, r1
    3c14:	51 2c       	mov	r5, r1
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    3c16:	21 2c       	mov	r2, r1
    3c18:	31 2c       	mov	r3, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    3c1a:	1b 8a       	std	Y+19, r1	; 0x13
    3c1c:	1a 8a       	std	Y+18, r1	; 0x12
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    3c1e:	19 8a       	std	Y+17, r1	; 0x11
    3c20:	18 8a       	std	Y+16, r1	; 0x10
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    3c22:	1c a6       	std	Y+44, r1	; 0x2c
    3c24:	1b a6       	std	Y+43, r1	; 0x2b
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    3c26:	1e 8e       	std	Y+30, r1	; 0x1e
    3c28:	1d 8e       	std	Y+29, r1	; 0x1d
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    3c2a:	1a 8e       	std	Y+26, r1	; 0x1a
    3c2c:	19 8e       	std	Y+25, r1	; 0x19
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    3c2e:	1f 86       	std	Y+15, r1	; 0x0f
    3c30:	1e 86       	std	Y+14, r1	; 0x0e
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    3c32:	01 e6       	ldi	r16, 0x61	; 97
    3c34:	c0 2e       	mov	r12, r16
    3c36:	01 e5       	ldi	r16, 0x51	; 81
    3c38:	d0 2e       	mov	r13, r16
    3c3a:	e1 2c       	mov	r14, r1
    3c3c:	f1 2c       	mov	r15, r1
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    3c3e:	1e 82       	std	Y+6, r1	; 0x06
    3c40:	1f 82       	std	Y+7, r1	; 0x07
    3c42:	18 86       	std	Y+8, r1	; 0x08
    3c44:	19 86       	std	Y+9, r1	; 0x09
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    3c46:	1a 82       	std	Y+2, r1	; 0x02
    3c48:	1b 82       	std	Y+3, r1	; 0x03
    3c4a:	1c 82       	std	Y+4, r1	; 0x04
    3c4c:	1d 82       	std	Y+5, r1	; 0x05
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    3c4e:	21 e0       	ldi	r18, 0x01	; 1
    3c50:	2a 87       	std	Y+10, r18	; 0x0a
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    3c52:	00 e0       	ldi	r16, 0x00	; 0
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    3c54:	1c 8e       	std	Y+28, r1	; 0x1c
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    3c56:	1b 86       	std	Y+11, r1	; 0x0b
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    3c58:	1d 86       	std	Y+13, r1	; 0x0d
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    3c5a:	1c 86       	std	Y+12, r1	; 0x0c

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    3c5c:	19 82       	std	Y+1, r1	; 0x01

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    3c5e:	80 91 18 05 	lds	r24, 0x0518
    3c62:	8f 5f       	subi	r24, 0xFF	; 255
    3c64:	80 93 18 05 	sts	0x0518, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    3c68:	80 91 0d 08 	lds	r24, 0x080D
    3c6c:	88 23       	and	r24, r24
    3c6e:	31 f0       	breq	.+12     	; 0x3c7c <main+0xac>
		{
			InterruptCounter++;
    3c70:	4e 89       	ldd	r20, Y+22	; 0x16
    3c72:	5f 89       	ldd	r21, Y+23	; 0x17
    3c74:	4f 5f       	subi	r20, 0xFF	; 255
    3c76:	5f 4f       	sbci	r21, 0xFF	; 255
    3c78:	5f 8b       	std	Y+23, r21	; 0x17
    3c7a:	4e 8b       	std	Y+22, r20	; 0x16
		//* - Do an RC rate resample
		//* - Check the battery voltage
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    3c7c:	2e 85       	ldd	r18, Y+14	; 0x0e
    3c7e:	3f 85       	ldd	r19, Y+15	; 0x0f
    3c80:	2c 34       	cpi	r18, 0x4C	; 76
    3c82:	3c 44       	sbci	r19, 0x4C	; 76
    3c84:	28 f1       	brcs	.+74     	; 0x3cd0 <main+0x100>
		{
			Status_seconds++;
    3c86:	28 8d       	ldd	r18, Y+24	; 0x18
    3c88:	2f 5f       	subi	r18, 0xFF	; 255
    3c8a:	28 8f       	std	Y+24, r18	; 0x18
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    3c8c:	4e 89       	ldd	r20, Y+22	; 0x16
    3c8e:	5f 89       	ldd	r21, Y+23	; 0x17
    3c90:	50 93 1d 05 	sts	0x051D, r21
    3c94:	40 93 1c 05 	sts	0x051C, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3c98:	80 91 eb 05 	lds	r24, 0x05EB
    3c9c:	82 30       	cpi	r24, 0x02	; 2
    3c9e:	11 f4       	brne	.+4      	; 0x3ca4 <main+0xd4>
			{
				ResampleRCRate = true;
    3ca0:	21 e0       	ldi	r18, 0x01	; 1
    3ca2:	2c 8f       	std	Y+28, r18	; 0x1c
			}
	
			// Check if Vbat lower than trigger
			if (GetVbat() < Config.PowerTriggerActual)
    3ca4:	0e 94 d5 4c 	call	0x99aa	; 0x99aa <GetVbat>
    3ca8:	20 91 47 06 	lds	r18, 0x0647
    3cac:	30 91 48 06 	lds	r19, 0x0648
    3cb0:	82 17       	cp	r24, r18
    3cb2:	93 07       	cpc	r25, r19
    3cb4:	20 f4       	brcc	.+8      	; 0x3cbe <main+0xee>
			{
				General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    3cb6:	80 91 20 05 	lds	r24, 0x0520
    3cba:	88 60       	ori	r24, 0x08	; 8
    3cbc:	03 c0       	rjmp	.+6      	; 0x3cc4 <main+0xf4>
			}
			else
			{
				General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    3cbe:	80 91 20 05 	lds	r24, 0x0520
    3cc2:	87 7f       	andi	r24, 0xF7	; 247
    3cc4:	80 93 20 05 	sts	0x0520, r24
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    3cc8:	1f 8a       	std	Y+23, r1	; 0x17
    3cca:	1e 8a       	std	Y+22, r1	; 0x16

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    3ccc:	1f 86       	std	Y+15, r1	; 0x0f
    3cce:	1e 86       	std	Y+14, r1	; 0x0e
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    3cd0:	81 2f       	mov	r24, r17
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	8b 30       	cpi	r24, 0x0B	; 11
    3cd6:	91 05       	cpc	r25, r1
    3cd8:	08 f0       	brcs	.+2      	; 0x3cdc <main+0x10c>
    3cda:	6e c0       	rjmp	.+220    	; 0x3db8 <main+0x1e8>
    3cdc:	fc 01       	movw	r30, r24
    3cde:	e2 5c       	subi	r30, 0xC2	; 194
    3ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce2:	0c 94 78 4f 	jmp	0x9ef0	; 0x9ef0 <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    3ce6:	83 b1       	in	r24, 0x03	; 3
    3ce8:	80 7f       	andi	r24, 0xF0	; 240
    3cea:	80 3f       	cpi	r24, 0xF0	; 240
    3cec:	41 f0       	breq	.+16     	; 0x3cfe <main+0x12e>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    3cee:	80 91 6e 00 	lds	r24, 0x006E
    3cf2:	81 60       	ori	r24, 0x01	; 1
    3cf4:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    3cf8:	13 e0       	ldi	r17, 0x03	; 3
					// Reset the status screen timeout
					Status_seconds = 0;
    3cfa:	18 8e       	std	Y+24, r1	; 0x18
    3cfc:	5d c0       	rjmp	.+186    	; 0x3db8 <main+0x1e8>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    3cfe:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	85 bb       	out	0x15, r24	; 21
    3d06:	58 c0       	rjmp	.+176    	; 0x3db8 <main+0x1e8>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3d08:	80 91 f2 07 	lds	r24, 0x07F2
    3d0c:	81 11       	cpse	r24, r1
    3d0e:	49 c0       	rjmp	.+146    	; 0x3da2 <main+0x1d2>
    3d10:	01 11       	cpse	r16, r1
    3d12:	47 c0       	rjmp	.+142    	; 0x3da2 <main+0x1d2>
    3d14:	80 91 19 05 	lds	r24, 0x0519
    3d18:	88 23       	and	r24, r24
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <main+0x14e>
    3d1c:	4d c0       	rjmp	.+154    	; 0x3db8 <main+0x1e8>
				{
					// Ready to move on
					Menu_mode = STATUS;
    3d1e:	14 e0       	ldi	r17, 0x04	; 4
    3d20:	4d c0       	rjmp	.+154    	; 0x3dbc <main+0x1ec>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    3d22:	0e 94 c9 14 	call	0x2992	; 0x2992 <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    3d26:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    3d28:	1a 8e       	std	Y+26, r1	; 0x1a
    3d2a:	19 8e       	std	Y+25, r1	; 0x19
    3d2c:	47 c0       	rjmp	.+142    	; 0x3dbc <main+0x1ec>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    3d2e:	1f 9b       	sbis	0x03, 7	; 3
    3d30:	43 c0       	rjmp	.+134    	; 0x3db8 <main+0x1e8>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    3d32:	15 e0       	ldi	r17, 0x05	; 5
    3d34:	41 c0       	rjmp	.+130    	; 0x3db8 <main+0x1e8>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
    3d36:	38 8d       	ldd	r19, Y+24	; 0x18
    3d38:	3a 30       	cpi	r19, 0x0A	; 10
    3d3a:	b0 f5       	brcc	.+108    	; 0x3da8 <main+0x1d8>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    3d3c:	1f 9b       	sbis	0x03, 7	; 3
    3d3e:	36 c0       	rjmp	.+108    	; 0x3dac <main+0x1dc>
					// Prevent PWM output
					PWMOverride = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    3d40:	49 8d       	ldd	r20, Y+25	; 0x19
    3d42:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3d44:	43 31       	cpi	r20, 0x13	; 19
    3d46:	53 41       	sbci	r21, 0x13	; 19
    3d48:	b8 f1       	brcs	.+110    	; 0x3db8 <main+0x1e8>
				{
					Menu_mode = PRESTATUS;
    3d4a:	13 e0       	ldi	r17, 0x03	; 3
    3d4c:	37 c0       	rjmp	.+110    	; 0x3dbc <main+0x1ec>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3d4e:	80 91 f2 07 	lds	r24, 0x07F2
    3d52:	81 11       	cpse	r24, r1
    3d54:	2d c0       	rjmp	.+90     	; 0x3db0 <main+0x1e0>
    3d56:	01 11       	cpse	r16, r1
    3d58:	2b c0       	rjmp	.+86     	; 0x3db0 <main+0x1e0>
    3d5a:	80 91 19 05 	lds	r24, 0x0519
    3d5e:	88 23       	and	r24, r24
    3d60:	69 f1       	breq	.+90     	; 0x3dbc <main+0x1ec>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    3d62:	18 e0       	ldi	r17, 0x08	; 8
    3d64:	29 c0       	rjmp	.+82     	; 0x3db8 <main+0x1e8>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    3d66:	0e 94 67 26 	call	0x4cce	; 0x4cce <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    3d6a:	19 e0       	ldi	r17, 0x09	; 9
    3d6c:	27 c0       	rjmp	.+78     	; 0x3dbc <main+0x1ec>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3d6e:	80 91 f2 07 	lds	r24, 0x07F2
    3d72:	81 11       	cpse	r24, r1
    3d74:	1f c0       	rjmp	.+62     	; 0x3db4 <main+0x1e4>
    3d76:	01 11       	cpse	r16, r1
    3d78:	1d c0       	rjmp	.+58     	; 0x3db4 <main+0x1e4>
    3d7a:	80 91 19 05 	lds	r24, 0x0519
    3d7e:	88 23       	and	r24, r24
    3d80:	e9 f0       	breq	.+58     	; 0x3dbc <main+0x1ec>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3d82:	10 e0       	ldi	r17, 0x00	; 0
    3d84:	19 c0       	rjmp	.+50     	; 0x3db8 <main+0x1e8>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    3d86:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    3d88:	80 91 20 05 	lds	r24, 0x0520
    3d8c:	84 60       	ori	r24, 0x04	; 4
    3d8e:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    3d92:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    3d94:	0e 94 a2 38 	call	0x7144	; 0x7144 <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    3d98:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    3d9c:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    3d9e:	18 8e       	std	Y+24, r1	; 0x18
    3da0:	0d c0       	rjmp	.+26     	; 0x3dbc <main+0x1ec>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    3da2:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3da4:	00 e0       	ldi	r16, 0x00	; 0
    3da6:	0a c0       	rjmp	.+20     	; 0x3dbc <main+0x1ec>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    3da8:	17 e0       	ldi	r17, 0x07	; 7
    3daa:	06 c0       	rjmp	.+12     	; 0x3db8 <main+0x1e8>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    3dac:	1a e0       	ldi	r17, 0x0A	; 10
    3dae:	06 c0       	rjmp	.+12     	; 0x3dbc <main+0x1ec>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    3db0:	18 e0       	ldi	r17, 0x08	; 8
    3db2:	01 c0       	rjmp	.+2      	; 0x3db6 <main+0x1e6>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3db4:	10 e0       	ldi	r17, 0x00	; 0
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3db6:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    3db8:	a1 2c       	mov	r10, r1
    3dba:	02 c0       	rjmp	.+4      	; 0x3dc0 <main+0x1f0>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    3dbc:	aa 24       	eor	r10, r10
    3dbe:	a3 94       	inc	r10
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message
		if (Overdue)
    3dc0:	80 91 19 05 	lds	r24, 0x0519
    3dc4:	88 23       	and	r24, r24
    3dc6:	a1 f0       	breq	.+40     	; 0x3df0 <main+0x220>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    3dc8:	80 91 20 05 	lds	r24, 0x0520
    3dcc:	82 60       	ori	r24, 0x02	; 2
    3dce:	80 93 20 05 	sts	0x0520, r24

			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    3dd2:	80 91 4b 06 	lds	r24, 0x064B
    3dd6:	81 30       	cpi	r24, 0x01	; 1
    3dd8:	81 f4       	brne	.+32     	; 0x3dfa <main+0x22a>
    3dda:	80 91 20 05 	lds	r24, 0x0520
    3dde:	82 fd       	sbrc	r24, 2
    3de0:	0c c0       	rjmp	.+24     	; 0x3dfa <main+0x22a>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    3de2:	80 91 20 05 	lds	r24, 0x0520
    3de6:	84 60       	ori	r24, 0x04	; 4
    3de8:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;							// Signal that FC is now disarmed
    3dec:	2b 98       	cbi	0x05, 3	; 5
    3dee:	05 c0       	rjmp	.+10     	; 0x3dfa <main+0x22a>

		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    3df0:	80 91 20 05 	lds	r24, 0x0520
    3df4:	8d 7f       	andi	r24, 0xFD	; 253
    3df6:	80 93 20 05 	sts	0x0520, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    3dfa:	80 91 20 05 	lds	r24, 0x0520
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    3dfe:	83 fd       	sbrc	r24, 3
    3e00:	08 c0       	rjmp	.+16     	; 0x3e12 <main+0x242>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3e02:	80 91 20 05 	lds	r24, 0x0520
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    3e06:	81 fd       	sbrc	r24, 1
    3e08:	04 c0       	rjmp	.+8      	; 0x3e12 <main+0x242>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    3e0a:	80 91 20 05 	lds	r24, 0x0520

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3e0e:	80 ff       	sbrs	r24, 0
    3e10:	06 c0       	rjmp	.+12     	; 0x3e1e <main+0x24e>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    3e12:	80 91 1e 05 	lds	r24, 0x051E
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    3e16:	84 ff       	sbrs	r24, 4
    3e18:	02 c0       	rjmp	.+4      	; 0x3e1e <main+0x24e>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    3e1a:	29 9a       	sbi	0x05, 1	; 5
    3e1c:	01 c0       	rjmp	.+2      	; 0x3e20 <main+0x250>
		}
		else 
		{
			LVA = 0;
    3e1e:	29 98       	cbi	0x05, 1	; 5
		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		// All cases - reset arm timer
		if (Config.ArmMode == ARMABLE)
    3e20:	80 91 4b 06 	lds	r24, 0x064B
    3e24:	81 30       	cpi	r24, 0x01	; 1
    3e26:	09 f0       	breq	.+2      	; 0x3e2a <main+0x25a>
    3e28:	9d c0       	rjmp	.+314    	; 0x3f64 <main+0x394>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3e2a:	80 91 8b 08 	lds	r24, 0x088B
    3e2e:	90 91 8c 08 	lds	r25, 0x088C
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    3e32:	81 34       	cpi	r24, 0x41	; 65
    3e34:	9c 4f       	sbci	r25, 0xFC	; 252
    3e36:	3c f0       	brlt	.+14     	; 0x3e46 <main+0x276>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3e38:	80 91 8b 08 	lds	r24, 0x088B
    3e3c:	90 91 8c 08 	lds	r25, 0x088C
    3e40:	80 3c       	cpi	r24, 0xC0	; 192
    3e42:	93 40       	sbci	r25, 0x03	; 3
    3e44:	14 f1       	brlt	.+68     	; 0x3e8a <main+0x2ba>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3e46:	80 91 8d 08 	lds	r24, 0x088D
    3e4a:	90 91 8e 08 	lds	r25, 0x088E
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3e4e:	81 34       	cpi	r24, 0x41	; 65
    3e50:	9c 4f       	sbci	r25, 0xFC	; 252
    3e52:	3c f0       	brlt	.+14     	; 0x3e62 <main+0x292>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3e54:	80 91 8d 08 	lds	r24, 0x088D
    3e58:	90 91 8e 08 	lds	r25, 0x088E
    3e5c:	80 3c       	cpi	r24, 0xC0	; 192
    3e5e:	93 40       	sbci	r25, 0x03	; 3
    3e60:	a4 f0       	brlt	.+40     	; 0x3e8a <main+0x2ba>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3e62:	80 91 8f 08 	lds	r24, 0x088F
    3e66:	90 91 90 08 	lds	r25, 0x0890
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3e6a:	81 34       	cpi	r24, 0x41	; 65
    3e6c:	9c 4f       	sbci	r25, 0xFC	; 252
    3e6e:	3c f0       	brlt	.+14     	; 0x3e7e <main+0x2ae>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3e70:	80 91 8f 08 	lds	r24, 0x088F
    3e74:	90 91 90 08 	lds	r25, 0x0890
    3e78:	80 3c       	cpi	r24, 0xC0	; 192
    3e7a:	93 40       	sbci	r25, 0x03	; 3
    3e7c:	34 f0       	brlt	.+12     	; 0x3e8a <main+0x2ba>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    3e7e:	80 91 87 08 	lds	r24, 0x0887
    3e82:	90 91 88 08 	lds	r25, 0x0888
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3e86:	c3 97       	sbiw	r24, 0x33	; 51
    3e88:	24 f0       	brlt	.+8      	; 0x3e92 <main+0x2c2>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
			   )
			{
				Arm_timer = 0;
    3e8a:	1a 82       	std	Y+2, r1	; 0x02
    3e8c:	1b 82       	std	Y+3, r1	; 0x03
    3e8e:	1c 82       	std	Y+4, r1	; 0x04
    3e90:	1d 82       	std	Y+5, r1	; 0x05
			}
			
			// If disarmed
			if ((General_error & (1 << DISARMED)) != 0)
    3e92:	80 91 20 05 	lds	r24, 0x0520
				Disarm_timer = 0;
				Disarm_seconds = 0;
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    3e96:	2a 81       	ldd	r18, Y+2	; 0x02
    3e98:	3b 81       	ldd	r19, Y+3	; 0x03
    3e9a:	4c 81       	ldd	r20, Y+4	; 0x04
    3e9c:	5d 81       	ldd	r21, Y+5	; 0x05
			{
				Arm_timer = 0;
			}
			
			// If disarmed
			if ((General_error & (1 << DISARMED)) != 0)
    3e9e:	82 ff       	sbrs	r24, 2
    3ea0:	20 c0       	rjmp	.+64     	; 0x3ee2 <main+0x312>
				Disarm_timer = 0;
				Disarm_seconds = 0;
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    3ea2:	2c 34       	cpi	r18, 0x4C	; 76
    3ea4:	3c 44       	sbci	r19, 0x4C	; 76
    3ea6:	41 05       	cpc	r20, r1
    3ea8:	51 05       	cpc	r21, r1
    3eaa:	08 f4       	brcc	.+2      	; 0x3eae <main+0x2de>
    3eac:	62 c0       	rjmp	.+196    	; 0x3f72 <main+0x3a2>
    3eae:	80 91 8b 08 	lds	r24, 0x088B
    3eb2:	90 91 8c 08 	lds	r25, 0x088C
    3eb6:	80 34       	cpi	r24, 0x40	; 64
    3eb8:	9c 4f       	sbci	r25, 0xFC	; 252
    3eba:	0c f0       	brlt	.+2      	; 0x3ebe <main+0x2ee>
    3ebc:	5a c0       	rjmp	.+180    	; 0x3f72 <main+0x3a2>
				{
					Arm_timer = 0;
					General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    3ebe:	80 91 20 05 	lds	r24, 0x0520
    3ec2:	8b 7f       	andi	r24, 0xFB	; 251
    3ec4:	80 93 20 05 	sts	0x0520, r24
					CalibrateGyrosSlow();					// Calibrate gyros
    3ec8:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <CalibrateGyrosSlow>
					LED1 = 1;								// Signal that FC is ready
    3ecc:	2b 9a       	sbi	0x05, 3	; 5
					reset_IMU();							// Reset IMU just in case...
    3ece:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <reset_IMU>
			// If disarmed
			if ((General_error & (1 << DISARMED)) != 0)
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
				Disarm_seconds = 0;
    3ed2:	b1 2c       	mov	r11, r1
			
			// If disarmed
			if ((General_error & (1 << DISARMED)) != 0)
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    3ed4:	21 2c       	mov	r2, r1
    3ed6:	31 2c       	mov	r3, r1
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    3ed8:	1a 82       	std	Y+2, r1	; 0x02
    3eda:	1b 82       	std	Y+3, r1	; 0x03
    3edc:	1c 82       	std	Y+4, r1	; 0x04
    3ede:	1d 82       	std	Y+5, r1	; 0x05
    3ee0:	4b c0       	rjmp	.+150    	; 0x3f78 <main+0x3a8>
		
			// If armed
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    3ee2:	22 3e       	cpi	r18, 0xE2	; 226
    3ee4:	34 4e       	sbci	r19, 0xE4	; 228
    3ee6:	41 05       	cpc	r20, r1
    3ee8:	51 05       	cpc	r21, r1
    3eea:	a0 f0       	brcs	.+40     	; 0x3f14 <main+0x344>
    3eec:	80 91 8b 08 	lds	r24, 0x088B
    3ef0:	90 91 8c 08 	lds	r25, 0x088C
    3ef4:	81 3c       	cpi	r24, 0xC1	; 193
    3ef6:	93 40       	sbci	r25, 0x03	; 3
    3ef8:	6c f0       	brlt	.+26     	; 0x3f14 <main+0x344>
				{
					Arm_timer = 0;
					General_error |= (1 << DISARMED);		// Set flags to disarmed
    3efa:	80 91 20 05 	lds	r24, 0x0520
    3efe:	84 60       	ori	r24, 0x04	; 4
    3f00:	80 93 20 05 	sts	0x0520, r24
					LED1 = 0;								// Signal that FC is now disarmed
    3f04:	2b 98       	cbi	0x05, 3	; 5
#ifdef ERROR_LOG
add_log(MANUAL);
    3f06:	82 e0       	ldi	r24, 0x02	; 2
    3f08:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <add_log>
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    3f0c:	1a 82       	std	Y+2, r1	; 0x02
    3f0e:	1b 82       	std	Y+3, r1	; 0x03
    3f10:	1c 82       	std	Y+4, r1	; 0x04
    3f12:	1d 82       	std	Y+5, r1	; 0x05
#endif			
				}

				// Automatic disarm
				// Reset auto-disarm count if any RX activity or set to zero
				if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0))
    3f14:	80 91 1f 05 	lds	r24, 0x051F
    3f18:	80 fd       	sbrc	r24, 0
    3f1a:	0a c0       	rjmp	.+20     	; 0x3f30 <main+0x360>
    3f1c:	80 91 4c 06 	lds	r24, 0x064C
    3f20:	88 23       	and	r24, r24
    3f22:	31 f0       	breq	.+12     	; 0x3f30 <main+0x360>
					Disarm_timer = 0;
					Disarm_seconds = 0;
				}
		
				// Increment disarm timer (seconds) if armed
				if (Disarm_timer > SECOND_TIMER)
    3f24:	bc e4       	ldi	r27, 0x4C	; 76
    3f26:	2b 16       	cp	r2, r27
    3f28:	3b 06       	cpc	r3, r27
    3f2a:	28 f0       	brcs	.+10     	; 0x3f36 <main+0x366>
				{
					Disarm_seconds++;
    3f2c:	b3 94       	inc	r11
    3f2e:	01 c0       	rjmp	.+2      	; 0x3f32 <main+0x362>
    3f30:	b1 2c       	mov	r11, r1
    3f32:	21 2c       	mov	r2, r1
    3f34:	31 2c       	mov	r3, r1
					Disarm_timer = 0;
				}

				// Auto-disarm model if timeout enabled and due
				// Don't allow disarms less than 30 seconds. That's just silly...
				if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))
    3f36:	40 91 4c 06 	lds	r20, 0x064C
    3f3a:	2b 2d       	mov	r18, r11
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	84 2f       	mov	r24, r20
    3f40:	99 27       	eor	r25, r25
    3f42:	87 fd       	sbrc	r24, 7
    3f44:	90 95       	com	r25
    3f46:	28 17       	cp	r18, r24
    3f48:	39 07       	cpc	r19, r25
    3f4a:	b4 f0       	brlt	.+44     	; 0x3f78 <main+0x3a8>
    3f4c:	4e 31       	cpi	r20, 0x1E	; 30
    3f4e:	a4 f0       	brlt	.+40     	; 0x3f78 <main+0x3a8>
				{
					// Disarm the FC
					General_error |= (1 << DISARMED);		// Set flags to disarmed
    3f50:	80 91 20 05 	lds	r24, 0x0520
    3f54:	84 60       	ori	r24, 0x04	; 4
    3f56:	80 93 20 05 	sts	0x0520, r24
					LED1 = 0;								// Signal that FC is now disarmed
    3f5a:	2b 98       	cbi	0x05, 3	; 5
#ifdef ERROR_LOG
add_log(TIMER);
    3f5c:	84 e0       	ldi	r24, 0x04	; 4
    3f5e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <add_log>
    3f62:	0a c0       	rjmp	.+20     	; 0x3f78 <main+0x3a8>
		}
		
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    3f64:	80 91 20 05 	lds	r24, 0x0520
    3f68:	8b 7f       	andi	r24, 0xFB	; 251
    3f6a:	80 93 20 05 	sts	0x0520, r24
			LED1 = 1;
    3f6e:	2b 9a       	sbi	0x05, 3	; 5
    3f70:	03 c0       	rjmp	.+6      	; 0x3f78 <main+0x3a8>
			// If disarmed
			if ((General_error & (1 << DISARMED)) != 0)
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
				Disarm_seconds = 0;
    3f72:	b1 2c       	mov	r11, r1
			
			// If disarmed
			if ((General_error & (1 << DISARMED)) != 0)
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    3f74:	21 2c       	mov	r2, r1
    3f76:	31 2c       	mov	r3, r1
			LED1 = 1;
		}

		// All code based on RC inputs is redundant until new RC data is ready,
		// otherwise the same data will be read back each and every time.
		if (Interrupted)
    3f78:	80 91 f2 07 	lds	r24, 0x07F2
    3f7c:	88 23       	and	r24, r24
    3f7e:	09 f4       	brne	.+2      	; 0x3f82 <main+0x3b2>
    3f80:	76 c1       	rjmp	.+748    	; 0x426e <main+0x69e>
			//************************************************************
			//* Get RC data
			//************************************************************

			// Update zeroed RC channel data
			RxGetChannels();
    3f82:	0e 94 00 4a 	call	0x9400	; 0x9400 <RxGetChannels>

			// Check for throttle reset
			if (MonopolarThrottle < THROTTLEIDLE)
    3f86:	80 91 87 08 	lds	r24, 0x0887
    3f8a:	90 91 88 08 	lds	r25, 0x0888
    3f8e:	c2 97       	sbiw	r24, 0x32	; 50
    3f90:	5c f4       	brge	.+22     	; 0x3fa8 <main+0x3d8>
			{
				// Clear throttle high error
				General_error &= ~(1 << THROTTLE_HIGH);	
    3f92:	80 91 20 05 	lds	r24, 0x0520
    3f96:	8e 7f       	andi	r24, 0xFE	; 254
    3f98:	80 93 20 05 	sts	0x0520, r24

				// Reset I-terms at throttle cut. Using memset saves code space
				memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    3f9c:	88 e1       	ldi	r24, 0x18	; 24
    3f9e:	e1 e2       	ldi	r30, 0x21	; 33
    3fa0:	f8 e0       	ldi	r31, 0x08	; 8
    3fa2:	11 92       	st	Z+, r1
    3fa4:	8a 95       	dec	r24
    3fa6:	e9 f7       	brne	.-6      	; 0x3fa2 <main+0x3d2>
			//* by the Config.TransitionSpeed setting.
			//* The transition will hold at P1n position if directed to.
			//************************************************************

			// P2 transition point hard-coded to 50% above center
			if 	(RCinputs[Config.FlightChan] > 500)
    3fa8:	80 91 ee 05 	lds	r24, 0x05EE
    3fac:	88 0f       	add	r24, r24
    3fae:	99 0b       	sbc	r25, r25
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	e7 57       	subi	r30, 0x77	; 119
    3fb4:	f7 4f       	sbci	r31, 0xF7	; 247
    3fb6:	20 81       	ld	r18, Z
    3fb8:	31 81       	ldd	r19, Z+1	; 0x01
    3fba:	25 3f       	cpi	r18, 0xF5	; 245
    3fbc:	31 40       	sbci	r19, 0x01	; 1
    3fbe:	14 f0       	brlt	.+4      	; 0x3fc4 <main+0x3f4>
			{
				Config.FlightSel = 2;			// Flight mode 2 (P2)
    3fc0:	22 e0       	ldi	r18, 0x02	; 2
    3fc2:	06 c0       	rjmp	.+12     	; 0x3fd0 <main+0x400>
			}
			// P1.n transition point hard-coded to 50% below center
			else if (RCinputs[Config.FlightChan] > -500)
    3fc4:	20 81       	ld	r18, Z
    3fc6:	31 81       	ldd	r19, Z+1	; 0x01
    3fc8:	2d 30       	cpi	r18, 0x0D	; 13
    3fca:	3e 4f       	sbci	r19, 0xFE	; 254
    3fcc:	24 f0       	brlt	.+8      	; 0x3fd6 <main+0x406>
			{
				Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    3fce:	21 e0       	ldi	r18, 0x01	; 1
    3fd0:	20 93 bf 07 	sts	0x07BF, r18
    3fd4:	02 c0       	rjmp	.+4      	; 0x3fda <main+0x40a>
			}
			// Otherwise the default is P1
			else
			{
				Config.FlightSel = 0;			// Flight mode 0 (P1)
    3fd6:	10 92 bf 07 	sts	0x07BF, r1
			//* Set up the correct state for the current setting.
			//* Check for initial startup - the only time that old_flight should be "3".
			//* Also, re-initialise if the transition setting is changed
			//************************************************************

			if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    3fda:	a3 e0       	ldi	r26, 0x03	; 3
    3fdc:	7a 16       	cp	r7, r26
    3fde:	29 f0       	breq	.+10     	; 0x3fea <main+0x41a>
    3fe0:	20 91 ef 05 	lds	r18, 0x05EF
    3fe4:	38 a5       	ldd	r19, Y+40	; 0x28
    3fe6:	32 17       	cp	r19, r18
    3fe8:	51 f1       	breq	.+84     	; 0x403e <main+0x46e>
			{
				switch(Config.FlightSel)
    3fea:	70 90 bf 07 	lds	r7, 0x07BF
    3fee:	41 e0       	ldi	r20, 0x01	; 1
    3ff0:	74 16       	cp	r7, r20
    3ff2:	61 f0       	breq	.+24     	; 0x400c <main+0x43c>
    3ff4:	52 e0       	ldi	r21, 0x02	; 2
    3ff6:	75 16       	cp	r7, r21
    3ff8:	b1 f0       	breq	.+44     	; 0x4026 <main+0x456>
    3ffa:	71 10       	cpse	r7, r1
    3ffc:	1d c0       	rjmp	.+58     	; 0x4038 <main+0x468>
				{
					case 0:
						Transition_state = TRANS_P1;
    3ffe:	10 92 23 05 	sts	0x0523, r1
						transition_counter = 0;
    4002:	10 92 25 05 	sts	0x0525, r1
    4006:	10 92 24 05 	sts	0x0524, r1
						break;
    400a:	16 c0       	rjmp	.+44     	; 0x4038 <main+0x468>
					case 1:
						Transition_state = TRANS_P1n;
    400c:	24 e0       	ldi	r18, 0x04	; 4
    400e:	20 93 23 05 	sts	0x0523, r18
						transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    4012:	20 91 f0 05 	lds	r18, 0x05F0
    4016:	33 27       	eor	r19, r19
    4018:	27 fd       	sbrc	r18, 7
    401a:	30 95       	com	r19
    401c:	30 93 25 05 	sts	0x0525, r19
    4020:	20 93 24 05 	sts	0x0524, r18
						break;
    4024:	09 c0       	rjmp	.+18     	; 0x4038 <main+0x468>
					case 2:
						Transition_state = TRANS_P2;
    4026:	29 e0       	ldi	r18, 0x09	; 9
    4028:	20 93 23 05 	sts	0x0523, r18
						transition_counter = 100;
    402c:	a4 e6       	ldi	r26, 0x64	; 100
    402e:	b0 e0       	ldi	r27, 0x00	; 0
    4030:	b0 93 25 05 	sts	0x0525, r27
    4034:	a0 93 24 05 	sts	0x0524, r26
						break;
					default:
						break;
				}		 
				old_flight = Config.FlightSel;
				old_trans_mode = Config.TransitionSpeed;
    4038:	20 91 ef 05 	lds	r18, 0x05EF
    403c:	28 a7       	std	Y+40, r18	; 0x28
			//************************************************************
			//* Transition state handling
			//************************************************************

			// Update timed transition when changing flight modes
			if (Config.FlightSel != old_flight)
    403e:	30 91 bf 07 	lds	r19, 0x07BF
    4042:	3b 8f       	std	Y+27, r19	; 0x1b
    4044:	31 e0       	ldi	r19, 0x01	; 1
    4046:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4048:	47 11       	cpse	r20, r7
    404a:	01 c0       	rjmp	.+2      	; 0x404e <main+0x47e>
    404c:	30 e0       	ldi	r19, 0x00	; 0
				TransitionUpdated = true;
			}

			// Work out transition number when manually transitioning
			// Convert number to percentage (0 to 100%)
			if (Config.TransitionSpeed == 0)
    404e:	20 91 ef 05 	lds	r18, 0x05EF
    4052:	21 11       	cpse	r18, r1
    4054:	1b c0       	rjmp	.+54     	; 0x408c <main+0x4bc>
			{
				// Offset RC input to (approx) -250 to 2250
				temp1 = RCinputs[Config.FlightChan] + 1000;
    4056:	fc 01       	movw	r30, r24
    4058:	e7 57       	subi	r30, 0x77	; 119
    405a:	f7 4f       	sbci	r31, 0xF7	; 247
    405c:	80 81       	ld	r24, Z
    405e:	91 81       	ldd	r25, Z+1	; 0x01
    4060:	88 51       	subi	r24, 0x18	; 24
    4062:	9c 4f       	sbci	r25, 0xFC	; 252
    4064:	97 ff       	sbrs	r25, 7
    4066:	02 c0       	rjmp	.+4      	; 0x406c <main+0x49c>
    4068:	80 e0       	ldi	r24, 0x00	; 0
    406a:	90 e0       	ldi	r25, 0x00	; 0
				// Trim lower end to zero (0 to 2250)
				if (temp1 < 0) temp1 = 0;

				// Convert 0 to 2250 to 0 to 125. Divide by 20
				// Round to avoid truncation errors
				transition = (temp1 + 10) / 20;
    406c:	0a 96       	adiw	r24, 0x0a	; 10
    406e:	64 e1       	ldi	r22, 0x14	; 20
    4070:	70 e0       	ldi	r23, 0x00	; 0
    4072:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <__divmodhi4>

				// transition now has a range of 0 to 101 for 0 to 2000 input
				// Limit extent of transition value 0 to 100 (101 steps)
				if (transition > 100) transition = 100;
    4076:	65 36       	cpi	r22, 0x65	; 101
    4078:	71 05       	cpc	r23, r1
    407a:	0c f4       	brge	.+2      	; 0x407e <main+0x4ae>
    407c:	b4 c3       	rjmp	.+1896   	; 0x47e6 <main+0xc16>
    407e:	84 e6       	ldi	r24, 0x64	; 100
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	90 93 22 05 	sts	0x0522, r25
    4086:	80 93 21 05 	sts	0x0521, r24
    408a:	b1 c3       	rjmp	.+1890   	; 0x47ee <main+0xc1e>
			}
			else
			{
				// transition_counter counts from 0 to 100 (101 steps)
				transition = transition_counter;
    408c:	80 91 24 05 	lds	r24, 0x0524
    4090:	90 91 25 05 	lds	r25, 0x0525
    4094:	90 93 22 05 	sts	0x0522, r25
    4098:	80 93 21 05 	sts	0x0521, r24
			{
				Transition_state = TRANSITIONING;
			}

			// Update transition state change when control value or flight mode changes
			if (TransitionUpdated)
    409c:	33 23       	and	r19, r19
    409e:	99 f0       	breq	.+38     	; 0x40c6 <main+0x4f6>
			{
				// Update transition state from matrix
				Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    40a0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    40a2:	84 2f       	mov	r24, r20
    40a4:	99 27       	eor	r25, r25
    40a6:	87 fd       	sbrc	r24, 7
    40a8:	90 95       	com	r25
    40aa:	fc 01       	movw	r30, r24
    40ac:	ee 0f       	add	r30, r30
    40ae:	ff 1f       	adc	r31, r31
    40b0:	e8 0f       	add	r30, r24
    40b2:	f9 1f       	adc	r31, r25
    40b4:	e7 0d       	add	r30, r7
    40b6:	f1 1d       	adc	r31, r1
    40b8:	77 fc       	sbrc	r7, 7
    40ba:	fa 95       	dec	r31
    40bc:	e0 50       	subi	r30, 0x00	; 0
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	e4 91       	lpm	r30, Z
    40c2:	e0 93 23 05 	sts	0x0523, r30

			// Calculate transition time from user's setting
			transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
			// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
			if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    40c6:	22 23       	and	r18, r18
    40c8:	49 f0       	breq	.+18     	; 0x40dc <main+0x50c>
				// Update transition state from matrix
				Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
			}

			// Calculate transition time from user's setting
			transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    40ca:	53 ec       	ldi	r21, 0xC3	; 195
    40cc:	25 03       	mulsu	r18, r21
    40ce:	c0 01       	movw	r24, r0
    40d0:	11 24       	eor	r1, r1
		
			// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
			if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    40d2:	4a 89       	ldd	r20, Y+18	; 0x12
    40d4:	5b 89       	ldd	r21, Y+19	; 0x13
    40d6:	84 17       	cp	r24, r20
    40d8:	95 07       	cpc	r25, r21
    40da:	18 f0       	brcs	.+6      	; 0x40e2 <main+0x512>
    40dc:	33 23       	and	r19, r19
    40de:	09 f4       	brne	.+2      	; 0x40e2 <main+0x512>
    40e0:	a9 c0       	rjmp	.+338    	; 0x4234 <main+0x664>
			{
				Transition_timeout = 0;
				TransitionUpdated = false;

				// Fixed, end-point states
				if (Transition_state == TRANS_P1)
    40e2:	80 91 23 05 	lds	r24, 0x0523
    40e6:	81 11       	cpse	r24, r1
    40e8:	05 c0       	rjmp	.+10     	; 0x40f4 <main+0x524>
				{
					transition_counter = 0;
    40ea:	10 92 25 05 	sts	0x0525, r1
    40ee:	10 92 24 05 	sts	0x0524, r1
    40f2:	22 c0       	rjmp	.+68     	; 0x4138 <main+0x568>
				}
				else if (Transition_state == TRANS_P1n)
    40f4:	84 30       	cpi	r24, 0x04	; 4
    40f6:	31 f4       	brne	.+12     	; 0x4104 <main+0x534>
				{
					transition_counter = Config.Transition_P1n;
    40f8:	80 91 f0 05 	lds	r24, 0x05F0
    40fc:	99 27       	eor	r25, r25
    40fe:	87 fd       	sbrc	r24, 7
    4100:	90 95       	com	r25
    4102:	04 c0       	rjmp	.+8      	; 0x410c <main+0x53c>
				}
				else if (Transition_state == TRANS_P2)
    4104:	89 30       	cpi	r24, 0x09	; 9
    4106:	39 f4       	brne	.+14     	; 0x4116 <main+0x546>
				{
					transition_counter = 100;
    4108:	84 e6       	ldi	r24, 0x64	; 100
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	90 93 25 05 	sts	0x0525, r25
    4110:	80 93 24 05 	sts	0x0524, r24
    4114:	11 c0       	rjmp	.+34     	; 0x4138 <main+0x568>
				}		

				// Over-ride users requesting silly states
				// If transition_counter is above P1.n but request is P1 to P1.n or 
				// if transition_counter is below P1.n but request is P2 to P1.n...
				if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    4116:	81 30       	cpi	r24, 0x01	; 1
    4118:	79 f4       	brne	.+30     	; 0x4138 <main+0x568>
    411a:	80 91 f0 05 	lds	r24, 0x05F0
    411e:	99 27       	eor	r25, r25
    4120:	87 fd       	sbrc	r24, 7
    4122:	90 95       	com	r25
    4124:	20 91 24 05 	lds	r18, 0x0524
    4128:	30 91 25 05 	lds	r19, 0x0525
    412c:	82 17       	cp	r24, r18
    412e:	93 07       	cpc	r25, r19
    4130:	1c f4       	brge	.+6      	; 0x4138 <main+0x568>
				{
					// Reset state to a more appropriate one
					Transition_state = TRANS_P2_to_P1n_start;
    4132:	88 e0       	ldi	r24, 0x08	; 8
    4134:	80 93 23 05 	sts	0x0523, r24
				}

				if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    4138:	80 91 23 05 	lds	r24, 0x0523
    413c:	88 30       	cpi	r24, 0x08	; 8
    413e:	79 f4       	brne	.+30     	; 0x415e <main+0x58e>
    4140:	80 91 f0 05 	lds	r24, 0x05F0
    4144:	99 27       	eor	r25, r25
    4146:	87 fd       	sbrc	r24, 7
    4148:	90 95       	com	r25
    414a:	20 91 24 05 	lds	r18, 0x0524
    414e:	30 91 25 05 	lds	r19, 0x0525
    4152:	28 17       	cp	r18, r24
    4154:	39 07       	cpc	r19, r25
    4156:	1c f4       	brge	.+6      	; 0x415e <main+0x58e>
				{
					// Reset state to a more appropriate one
					Transition_state = TRANS_P1_to_P1n_start;
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	80 93 23 05 	sts	0x0523, r24
				}

				// Handle timed transition towards P1
				if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    415e:	80 91 23 05 	lds	r24, 0x0523
    4162:	8b 7f       	andi	r24, 0xFB	; 251
    4164:	82 30       	cpi	r24, 0x02	; 2
    4166:	91 f4       	brne	.+36     	; 0x418c <main+0x5bc>
				{
					transition_counter--;
    4168:	80 91 24 05 	lds	r24, 0x0524
    416c:	90 91 25 05 	lds	r25, 0x0525
    4170:	01 97       	sbiw	r24, 0x01	; 1
    4172:	90 93 25 05 	sts	0x0525, r25
    4176:	80 93 24 05 	sts	0x0524, r24
					if (transition_counter <= 0)
    417a:	18 16       	cp	r1, r24
    417c:	19 06       	cpc	r1, r25
    417e:	34 f0       	brlt	.+12     	; 0x418c <main+0x5bc>
					{
						transition_counter = 0;
    4180:	10 92 25 05 	sts	0x0525, r1
    4184:	10 92 24 05 	sts	0x0524, r1
						Transition_state = TRANS_P1;
    4188:	10 92 23 05 	sts	0x0523, r1
					}
				}

				// Handle timed transition between P1.n and P1
				if (Transition_state == TRANS_P1_to_P1n_start)
    418c:	80 91 23 05 	lds	r24, 0x0523
    4190:	81 30       	cpi	r24, 0x01	; 1
    4192:	c1 f4       	brne	.+48     	; 0x41c4 <main+0x5f4>
				{
					transition_counter++;
    4194:	80 91 24 05 	lds	r24, 0x0524
    4198:	90 91 25 05 	lds	r25, 0x0525
    419c:	01 96       	adiw	r24, 0x01	; 1
    419e:	90 93 25 05 	sts	0x0525, r25
    41a2:	80 93 24 05 	sts	0x0524, r24
					if (transition_counter >= Config.Transition_P1n)
    41a6:	20 91 f0 05 	lds	r18, 0x05F0
    41aa:	33 27       	eor	r19, r19
    41ac:	27 fd       	sbrc	r18, 7
    41ae:	30 95       	com	r19
    41b0:	82 17       	cp	r24, r18
    41b2:	93 07       	cpc	r25, r19
    41b4:	3c f0       	brlt	.+14     	; 0x41c4 <main+0x5f4>
					{
						transition_counter = Config.Transition_P1n;
    41b6:	30 93 25 05 	sts	0x0525, r19
    41ba:	20 93 24 05 	sts	0x0524, r18
						Transition_state = TRANS_P1n;
    41be:	84 e0       	ldi	r24, 0x04	; 4
    41c0:	80 93 23 05 	sts	0x0523, r24
					}
				}			
				
				// Handle timed transition between P1.n and P2
				if (Transition_state == TRANS_P2_to_P1n_start)
    41c4:	80 91 23 05 	lds	r24, 0x0523
    41c8:	88 30       	cpi	r24, 0x08	; 8
    41ca:	c1 f4       	brne	.+48     	; 0x41fc <main+0x62c>
				{
					transition_counter--;
    41cc:	80 91 24 05 	lds	r24, 0x0524
    41d0:	90 91 25 05 	lds	r25, 0x0525
    41d4:	01 97       	sbiw	r24, 0x01	; 1
    41d6:	90 93 25 05 	sts	0x0525, r25
    41da:	80 93 24 05 	sts	0x0524, r24
					if (transition_counter <= Config.Transition_P1n)
    41de:	20 91 f0 05 	lds	r18, 0x05F0
    41e2:	33 27       	eor	r19, r19
    41e4:	27 fd       	sbrc	r18, 7
    41e6:	30 95       	com	r19
    41e8:	28 17       	cp	r18, r24
    41ea:	39 07       	cpc	r19, r25
    41ec:	3c f0       	brlt	.+14     	; 0x41fc <main+0x62c>
					{
						transition_counter = Config.Transition_P1n;
    41ee:	30 93 25 05 	sts	0x0525, r19
    41f2:	20 93 24 05 	sts	0x0524, r18
						Transition_state = TRANS_P1n;
    41f6:	84 e0       	ldi	r24, 0x04	; 4
    41f8:	80 93 23 05 	sts	0x0523, r24
					}
				}

				// Handle timed transition towards P2
				if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    41fc:	80 91 23 05 	lds	r24, 0x0523
    4200:	8b 7f       	andi	r24, 0xFB	; 251
    4202:	83 30       	cpi	r24, 0x03	; 3
    4204:	a9 f4       	brne	.+42     	; 0x4230 <main+0x660>
				{
					transition_counter++;
    4206:	80 91 24 05 	lds	r24, 0x0524
    420a:	90 91 25 05 	lds	r25, 0x0525
    420e:	01 96       	adiw	r24, 0x01	; 1
    4210:	90 93 25 05 	sts	0x0525, r25
    4214:	80 93 24 05 	sts	0x0524, r24
					if (transition_counter >= 100)
    4218:	84 36       	cpi	r24, 0x64	; 100
    421a:	91 05       	cpc	r25, r1
    421c:	4c f0       	brlt	.+18     	; 0x4230 <main+0x660>
					{
						transition_counter = 100;
    421e:	a4 e6       	ldi	r26, 0x64	; 100
    4220:	b0 e0       	ldi	r27, 0x00	; 0
    4222:	b0 93 25 05 	sts	0x0525, r27
    4226:	a0 93 24 05 	sts	0x0524, r26
						Transition_state = TRANS_P2;
    422a:	89 e0       	ldi	r24, 0x09	; 9
    422c:	80 93 23 05 	sts	0x0523, r24
			// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
			if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
				// Update immediately
				TransitionUpdated)
			{
				Transition_timeout = 0;
    4230:	1b 8a       	std	Y+19, r1	; 0x13
    4232:	1a 8a       	std	Y+18, r1	; 0x12
				}

			} // Update transition_counter

			// Zero the I-terms of the opposite state so as to ensure a bump-less transition
			if ((Transition_state == TRANS_P1) || (transition == 0))
    4234:	20 91 23 05 	lds	r18, 0x0523
    4238:	22 23       	and	r18, r18
    423a:	31 f0       	breq	.+12     	; 0x4248 <main+0x678>
    423c:	80 91 21 05 	lds	r24, 0x0521
    4240:	90 91 22 05 	lds	r25, 0x0522
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	39 f4       	brne	.+14     	; 0x4256 <main+0x686>
			{
				// Clear P2 I-term while fully in P1
				memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    4248:	8c e0       	ldi	r24, 0x0C	; 12
    424a:	ed e2       	ldi	r30, 0x2D	; 45
    424c:	f8 e0       	ldi	r31, 0x08	; 8
    424e:	11 92       	st	Z+, r1
    4250:	8a 95       	dec	r24
    4252:	e9 f7       	brne	.-6      	; 0x424e <main+0x67e>
    4254:	0d c0       	rjmp	.+26     	; 0x4270 <main+0x6a0>
			}
			else if ((Transition_state == TRANS_P2) || (transition == 100))
    4256:	29 30       	cpi	r18, 0x09	; 9
    4258:	19 f0       	breq	.+6      	; 0x4260 <main+0x690>
    425a:	84 36       	cpi	r24, 0x64	; 100
    425c:	91 05       	cpc	r25, r1
    425e:	41 f4       	brne	.+16     	; 0x4270 <main+0x6a0>
			{
				// Clear P1 I-term while fully in P2
				memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    4260:	8c e0       	ldi	r24, 0x0C	; 12
    4262:	a1 e2       	ldi	r26, 0x21	; 33
    4264:	b8 e0       	ldi	r27, 0x08	; 8
    4266:	1d 92       	st	X+, r1
    4268:	8a 95       	dec	r24
    426a:	e9 f7       	brne	.-6      	; 0x4266 <main+0x696>
    426c:	01 c0       	rjmp	.+2      	; 0x4270 <main+0x6a0>
    426e:	7b 8e       	std	Y+27, r7	; 0x1b
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    4270:	0e 94 29 30 	call	0x6052	; 0x6052 <TIM16_ReadTCNT1>
    4274:	9d 8b       	std	Y+21, r25	; 0x15
    4276:	8c 8b       	std	Y+20, r24	; 0x14
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    4278:	84 15       	cp	r24, r4
    427a:	95 05       	cpc	r25, r5
    427c:	b8 f4       	brcc	.+46     	; 0x42ac <main+0x6dc>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	a1 e0       	ldi	r26, 0x01	; 1
    4284:	b0 e0       	ldi	r27, 0x00	; 0
    4286:	84 19       	sub	r24, r4
    4288:	95 09       	sbc	r25, r5
    428a:	a1 09       	sbc	r26, r1
    428c:	b1 09       	sbc	r27, r1
    428e:	2c 89       	ldd	r18, Y+20	; 0x14
    4290:	3d 89       	ldd	r19, Y+21	; 0x15
    4292:	82 0f       	add	r24, r18
    4294:	93 1f       	adc	r25, r19
    4296:	a1 1d       	adc	r26, r1
    4298:	b1 1d       	adc	r27, r1
    429a:	2e 81       	ldd	r18, Y+6	; 0x06
    429c:	3f 81       	ldd	r19, Y+7	; 0x07
    429e:	48 85       	ldd	r20, Y+8	; 0x08
    42a0:	59 85       	ldd	r21, Y+9	; 0x09
    42a2:	28 0f       	add	r18, r24
    42a4:	39 1f       	adc	r19, r25
    42a6:	4a 1f       	adc	r20, r26
    42a8:	5b 1f       	adc	r21, r27
    42aa:	0c c0       	rjmp	.+24     	; 0x42c4 <main+0x6f4>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    42ac:	8c 89       	ldd	r24, Y+20	; 0x14
    42ae:	9d 89       	ldd	r25, Y+21	; 0x15
    42b0:	84 19       	sub	r24, r4
    42b2:	95 09       	sbc	r25, r5
    42b4:	2e 81       	ldd	r18, Y+6	; 0x06
    42b6:	3f 81       	ldd	r19, Y+7	; 0x07
    42b8:	48 85       	ldd	r20, Y+8	; 0x08
    42ba:	59 85       	ldd	r21, Y+9	; 0x09
    42bc:	28 0f       	add	r18, r24
    42be:	39 1f       	adc	r19, r25
    42c0:	41 1d       	adc	r20, r1
    42c2:	51 1d       	adc	r21, r1
    42c4:	2e 83       	std	Y+6, r18	; 0x06
    42c6:	3f 83       	std	Y+7, r19	; 0x07
    42c8:	48 87       	std	Y+8, r20	; 0x08
    42ca:	59 87       	std	Y+9, r21	; 0x09
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    42cc:	80 91 b2 00 	lds	r24, 0x00B2
    42d0:	3b a1       	ldd	r19, Y+35	; 0x23
    42d2:	83 1b       	sub	r24, r19
    42d4:	2a 81       	ldd	r18, Y+2	; 0x02
    42d6:	3b 81       	ldd	r19, Y+3	; 0x03
    42d8:	4c 81       	ldd	r20, Y+4	; 0x04
    42da:	5d 81       	ldd	r21, Y+5	; 0x05
    42dc:	28 0f       	add	r18, r24
    42de:	31 1d       	adc	r19, r1
    42e0:	41 1d       	adc	r20, r1
    42e2:	51 1d       	adc	r21, r1
    42e4:	2a 83       	std	Y+2, r18	; 0x02
    42e6:	3b 83       	std	Y+3, r19	; 0x03
    42e8:	4c 83       	std	Y+4, r20	; 0x04
    42ea:	5d 83       	std	Y+5, r21	; 0x05
		Arm_TCNT2 = TCNT2;
    42ec:	30 91 b2 00 	lds	r19, 0x00B2
    42f0:	3b a3       	std	Y+35, r19	; 0x23

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    42f2:	80 91 b2 00 	lds	r24, 0x00B2
    42f6:	4e a1       	ldd	r20, Y+38	; 0x26
    42f8:	84 1b       	sub	r24, r20
    42fa:	28 89       	ldd	r18, Y+16	; 0x10
    42fc:	39 89       	ldd	r19, Y+17	; 0x11
    42fe:	28 0f       	add	r18, r24
    4300:	31 1d       	adc	r19, r1
    4302:	39 8b       	std	Y+17, r19	; 0x11
    4304:	28 8b       	std	Y+16, r18	; 0x10
		ServoRate_TCNT2 = TCNT2;
    4306:	30 91 b2 00 	lds	r19, 0x00B2
    430a:	3e a3       	std	Y+38, r19	; 0x26
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    430c:	80 91 b2 00 	lds	r24, 0x00B2
    4310:	4d a1       	ldd	r20, Y+37	; 0x25
    4312:	84 1b       	sub	r24, r20
    4314:	2b a5       	ldd	r18, Y+43	; 0x2b
    4316:	3c a5       	ldd	r19, Y+44	; 0x2c
    4318:	28 0f       	add	r18, r24
    431a:	31 1d       	adc	r19, r1
    431c:	3c a7       	std	Y+44, r19	; 0x2c
    431e:	2b a7       	std	Y+43, r18	; 0x2b
		Servo_TCNT2 = TCNT2;
    4320:	30 91 b2 00 	lds	r19, 0x00B2
    4324:	3d a3       	std	Y+37, r19	; 0x25
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    4326:	80 91 b2 00 	lds	r24, 0x00B2
    432a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    432c:	84 1b       	sub	r24, r20
    432e:	2a 89       	ldd	r18, Y+18	; 0x12
    4330:	3b 89       	ldd	r19, Y+19	; 0x13
    4332:	28 0f       	add	r18, r24
    4334:	31 1d       	adc	r19, r1
    4336:	3b 8b       	std	Y+19, r19	; 0x13
    4338:	2a 8b       	std	Y+18, r18	; 0x12
		Transition_TCNT2 = TCNT2;
    433a:	30 91 b2 00 	lds	r19, 0x00B2
    433e:	3f 8f       	std	Y+31, r19	; 0x1f

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    4340:	80 91 b2 00 	lds	r24, 0x00B2
    4344:	48 a1       	ldd	r20, Y+32	; 0x20
    4346:	84 1b       	sub	r24, r20
    4348:	2e 85       	ldd	r18, Y+14	; 0x0e
    434a:	3f 85       	ldd	r19, Y+15	; 0x0f
    434c:	28 0f       	add	r18, r24
    434e:	31 1d       	adc	r19, r1
    4350:	3f 87       	std	Y+15, r19	; 0x0f
    4352:	2e 87       	std	Y+14, r18	; 0x0e
		Status_TCNT2 = TCNT2;
    4354:	30 91 b2 00 	lds	r19, 0x00B2
    4358:	38 a3       	std	Y+32, r19	; 0x20
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    435a:	80 91 b2 00 	lds	r24, 0x00B2
    435e:	49 a1       	ldd	r20, Y+33	; 0x21
    4360:	84 1b       	sub	r24, r20
    4362:	29 8d       	ldd	r18, Y+25	; 0x19
    4364:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4366:	28 0f       	add	r18, r24
    4368:	31 1d       	adc	r19, r1
    436a:	3a 8f       	std	Y+26, r19	; 0x1a
    436c:	29 8f       	std	Y+25, r18	; 0x19
		Refresh_TCNT2 = TCNT2;
    436e:	30 91 b2 00 	lds	r19, 0x00B2
    4372:	39 a3       	std	Y+33, r19	; 0x21

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    4374:	80 91 b2 00 	lds	r24, 0x00B2
    4378:	4a a1       	ldd	r20, Y+34	; 0x22
    437a:	84 1b       	sub	r24, r20
    437c:	28 0e       	add	r2, r24
    437e:	31 1c       	adc	r3, r1
		Disarm_TCNT2 = TCNT2;
    4380:	20 91 b2 00 	lds	r18, 0x00B2
    4384:	2a a3       	std	Y+34, r18	; 0x22

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    4386:	80 91 b2 00 	lds	r24, 0x00B2
    438a:	3c a1       	ldd	r19, Y+36	; 0x24
    438c:	83 1b       	sub	r24, r19
    438e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4390:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4392:	48 0f       	add	r20, r24
    4394:	51 1d       	adc	r21, r1
    4396:	5e 8f       	std	Y+30, r21	; 0x1e
    4398:	4d 8f       	std	Y+29, r20	; 0x1d
		Ticker_TCNT2 = TCNT2;
    439a:	20 91 b2 00 	lds	r18, 0x00B2
    439e:	2c a3       	std	Y+36, r18	; 0x24
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    43a0:	80 91 1e 05 	lds	r24, 0x051E
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    43a4:	53 ff       	sbrs	r21, 3
    43a6:	02 c0       	rjmp	.+4      	; 0x43ac <main+0x7dc>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    43a8:	80 61       	ori	r24, 0x10	; 16
    43aa:	01 c0       	rjmp	.+2      	; 0x43ae <main+0x7de>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    43ac:	8f 7e       	andi	r24, 0xEF	; 239
    43ae:	80 93 1e 05 	sts	0x051E, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    43b2:	48 89       	ldd	r20, Y+16	; 0x10
    43b4:	59 89       	ldd	r21, Y+17	; 0x11
    43b6:	4d 32       	cpi	r20, 0x2D	; 45
    43b8:	51 40       	sbci	r21, 0x01	; 1
    43ba:	20 f0       	brcs	.+8      	; 0x43c4 <main+0x7f4>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    43bc:	19 8a       	std	Y+17, r1	; 0x11
    43be:	18 8a       	std	Y+16, r1	; 0x10
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    43c0:	21 e0       	ldi	r18, 0x01	; 1
    43c2:	2b 87       	std	Y+11, r18	; 0x0b
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    43c4:	4b a5       	ldd	r20, Y+43	; 0x2b
    43c6:	5c a5       	ldd	r21, Y+44	; 0x2c
    43c8:	46 32       	cpi	r20, 0x26	; 38
    43ca:	56 42       	sbci	r21, 0x26	; 38
    43cc:	90 f0       	brcs	.+36     	; 0x43f2 <main+0x822>
		{
#ifdef ERROR_LOG
			// Log the no signal event if previously NOT overdue, armable and armed
			// This makes sure we only get one log per event
			if ((!Overdue) && (Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    43ce:	80 91 19 05 	lds	r24, 0x0519
    43d2:	81 11       	cpse	r24, r1
    43d4:	0b c0       	rjmp	.+22     	; 0x43ec <main+0x81c>
    43d6:	80 91 4b 06 	lds	r24, 0x064B
    43da:	81 30       	cpi	r24, 0x01	; 1
    43dc:	39 f4       	brne	.+14     	; 0x43ec <main+0x81c>
    43de:	80 91 20 05 	lds	r24, 0x0520
    43e2:	82 fd       	sbrc	r24, 2
    43e4:	03 c0       	rjmp	.+6      	; 0x43ec <main+0x81c>
			{
				add_log(NOSIGNAL);
    43e6:	83 e0       	ldi	r24, 0x03	; 3
    43e8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <add_log>
			}
#endif			
			Overdue = true;	// This results in a "No Signal" error
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	80 93 19 05 	sts	0x0519, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    43f2:	0e 94 42 27 	call	0x4e84	; 0x4e84 <ReadGyros>
		ReadAcc();
    43f6:	0e 94 4a 10 	call	0x2094	; 0x2094 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    43fa:	0e 94 29 30 	call	0x6052	; 0x6052 <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    43fe:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    4400:	20 91 1a 05 	lds	r18, 0x051A
    4404:	30 91 1b 05 	lds	r19, 0x051B
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    4408:	20 91 1a 05 	lds	r18, 0x051A
    440c:	30 91 1b 05 	lds	r19, 0x051B
    4410:	ac 01       	movw	r20, r24
    4412:	42 1b       	sub	r20, r18
    4414:	53 0b       	sbc	r21, r19
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    4416:	90 93 1b 05 	sts	0x051B, r25
    441a:	80 93 1a 05 	sts	0x051A, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    441e:	80 91 f5 07 	lds	r24, 0x07F5
    4422:	90 91 f6 07 	lds	r25, 0x07F6
    4426:	60 e0       	ldi	r22, 0x00	; 0
    4428:	70 e0       	ldi	r23, 0x00	; 0
    442a:	02 97       	sbiw	r24, 0x02	; 2
    442c:	18 f4       	brcc	.+6      	; 0x4434 <main+0x864>
		{
			interval = ticker_16; // uint16_t
    442e:	2a 01       	movw	r4, r20
    4430:	3b 01       	movw	r6, r22
    4432:	11 c0       	rjmp	.+34     	; 0x4456 <main+0x886>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    4434:	40 90 f5 07 	lds	r4, 0x07F5
    4438:	50 90 f6 07 	lds	r5, 0x07F6
    443c:	61 2c       	mov	r6, r1
    443e:	71 2c       	mov	r7, r1
    4440:	ef e0       	ldi	r30, 0x0F	; 15
    4442:	44 0c       	add	r4, r4
    4444:	55 1c       	adc	r5, r5
    4446:	66 1c       	adc	r6, r6
    4448:	77 1c       	adc	r7, r7
    444a:	ea 95       	dec	r30
    444c:	d1 f7       	brne	.-12     	; 0x4442 <main+0x872>
    444e:	44 0e       	add	r4, r20
    4450:	55 1e       	adc	r5, r21
    4452:	66 1e       	adc	r6, r22
    4454:	77 1e       	adc	r7, r23
		}

		TMR0_counter = 0;
    4456:	10 92 f6 07 	sts	0x07F6, r1
    445a:	10 92 f5 07 	sts	0x07F5, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    445e:	c3 01       	movw	r24, r6
    4460:	b2 01       	movw	r22, r4
    4462:	0e 94 32 2b 	call	0x5664	; 0x5664 <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    4466:	c3 01       	movw	r24, r6
    4468:	b2 01       	movw	r22, r4
    446a:	0e 94 99 44 	call	0x8932	; 0x8932 <Sensor_PID>
		//* FrameRate = Serial frame gap as measured by the ISR.
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//************************************************************

		if (Interrupted)
    446e:	80 91 f2 07 	lds	r24, 0x07F2
    4472:	88 23       	and	r24, r24
    4474:	09 f4       	brne	.+2      	; 0x4478 <main+0x8a8>
    4476:	c6 c0       	rjmp	.+396    	; 0x4604 <main+0xa34>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer if not in FAST mode.
			if (Config.Servo_rate < FAST)
    4478:	80 91 eb 05 	lds	r24, 0x05EB
    447c:	82 30       	cpi	r24, 0x02	; 2
    447e:	64 f4       	brge	.+24     	; 0x4498 <main+0x8c8>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    4480:	21 e0       	ldi	r18, 0x01	; 1
    4482:	2a 87       	std	Y+10, r18	; 0x0a
    4484:	2e 81       	ldd	r18, Y+6	; 0x06
    4486:	3f 81       	ldd	r19, Y+7	; 0x07
    4488:	48 85       	ldd	r20, Y+8	; 0x08
    448a:	59 85       	ldd	r21, Y+9	; 0x09
    448c:	24 3c       	cpi	r18, 0xC4	; 196
    448e:	32 4a       	sbci	r19, 0xA2	; 162
    4490:	41 05       	cpc	r20, r1
    4492:	51 05       	cpc	r21, r1
    4494:	08 f4       	brcc	.+2      	; 0x4498 <main+0x8c8>
    4496:	1a 86       	std	Y+10, r1	; 0x0a
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    4498:	29 81       	ldd	r18, Y+1	; 0x01
    449a:	21 11       	cpse	r18, r1
    449c:	0e c0       	rjmp	.+28     	; 0x44ba <main+0x8ea>
    449e:	82 30       	cpi	r24, 0x02	; 2
    44a0:	09 f0       	breq	.+2      	; 0x44a4 <main+0x8d4>
    44a2:	a9 c1       	rjmp	.+850    	; 0x47f6 <main+0xc26>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    44a4:	80 91 10 08 	lds	r24, 0x0810
    44a8:	90 91 11 08 	lds	r25, 0x0811
    44ac:	31 e0       	ldi	r19, 0x01	; 1
    44ae:	3a 87       	std	Y+10, r19	; 0x0a
    44b0:	84 3c       	cpi	r24, 0xC4	; 196
    44b2:	92 4a       	sbci	r25, 0xA2	; 162
    44b4:	40 f4       	brcc	.+16     	; 0x44c6 <main+0x8f6>
    44b6:	1a 86       	std	Y+10, r1	; 0x0a
    44b8:	3b c0       	rjmp	.+118    	; 0x4530 <main+0x960>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the serial data gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    44ba:	82 30       	cpi	r24, 0x02	; 2
    44bc:	09 f0       	breq	.+2      	; 0x44c0 <main+0x8f0>
    44be:	9b c1       	rjmp	.+822    	; 0x47f6 <main+0xc26>
				// Slow packets (19.7ms gap). Pulse spans just two input packets.
				// 38.8s available space for S.Bus, 40ms for Satellite and 39.92ms for Xtreme.
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
    44c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    44c2:	22 23       	and	r18, r18
    44c4:	a9 f1       	breq	.+106    	; 0x4530 <main+0x960>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
    44c6:	38 ec       	ldi	r19, 0xC8	; 200
    44c8:	c3 16       	cp	r12, r19
    44ca:	3b e4       	ldi	r19, 0x4B	; 75
    44cc:	d3 06       	cpc	r13, r19
    44ce:	e1 04       	cpc	r14, r1
    44d0:	f1 04       	cpc	r15, r1
    44d2:	08 f0       	brcs	.+2      	; 0x44d6 <main+0x906>
    44d4:	94 c1       	rjmp	.+808    	; 0x47fe <main+0xc2e>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
    44d6:	46 e2       	ldi	r20, 0x26	; 38
    44d8:	c4 16       	cp	r12, r20
    44da:	4f e3       	ldi	r20, 0x3F	; 63
    44dc:	d4 06       	cpc	r13, r20
    44de:	e1 04       	cpc	r14, r1
    44e0:	f1 04       	cpc	r15, r1
    44e2:	08 f0       	brcs	.+2      	; 0x44e6 <main+0x916>
    44e4:	90 c1       	rjmp	.+800    	; 0x4806 <main+0xc36>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
    44e6:	51 e2       	ldi	r21, 0x21	; 33
    44e8:	c5 16       	cp	r12, r21
    44ea:	56 e3       	ldi	r21, 0x36	; 54
    44ec:	d5 06       	cpc	r13, r21
    44ee:	e1 04       	cpc	r14, r1
    44f0:	f1 04       	cpc	r15, r1
    44f2:	08 f0       	brcs	.+2      	; 0x44f6 <main+0x926>
    44f4:	8c c1       	rjmp	.+792    	; 0x480e <main+0xc3e>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
    44f6:	8d e5       	ldi	r24, 0x5D	; 93
    44f8:	c8 16       	cp	r12, r24
    44fa:	8f e2       	ldi	r24, 0x2F	; 47
    44fc:	d8 06       	cpc	r13, r24
    44fe:	e1 04       	cpc	r14, r1
    4500:	f1 04       	cpc	r15, r1
    4502:	08 f0       	brcs	.+2      	; 0x4506 <main+0x936>
    4504:	88 c1       	rjmp	.+784    	; 0x4816 <main+0xc46>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
    4506:	9c ec       	ldi	r25, 0xCC	; 204
    4508:	c9 16       	cp	r12, r25
    450a:	99 e2       	ldi	r25, 0x29	; 41
    450c:	d9 06       	cpc	r13, r25
    450e:	e1 04       	cpc	r14, r1
    4510:	f1 04       	cpc	r15, r1
    4512:	08 f0       	brcs	.+2      	; 0x4516 <main+0x946>
    4514:	84 c1       	rjmp	.+776    	; 0x481e <main+0xc4e>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
    4516:	a4 ee       	ldi	r26, 0xE4	; 228
    4518:	ca 16       	cp	r12, r26
    451a:	a5 e2       	ldi	r26, 0x25	; 37
    451c:	da 06       	cpc	r13, r26
    451e:	e1 04       	cpc	r14, r1
    4520:	f1 04       	cpc	r15, r1
    4522:	98 f5       	brcc	.+102    	; 0x458a <main+0x9ba>
    4524:	21 e0       	ldi	r18, 0x01	; 1
    4526:	29 83       	std	Y+1, r18	; 0x01
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    4528:	7a e0       	ldi	r23, 0x0A	; 10
    452a:	87 2e       	mov	r8, r23
    452c:	91 2c       	mov	r9, r1
    452e:	38 c0       	rjmp	.+112    	; 0x45a0 <main+0x9d0>

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
    4530:	3d ec       	ldi	r19, 0xCD	; 205
    4532:	c3 16       	cp	r12, r19
    4534:	36 e4       	ldi	r19, 0x46	; 70
    4536:	d3 06       	cpc	r13, r19
    4538:	e1 04       	cpc	r14, r1
    453a:	f1 04       	cpc	r15, r1
    453c:	08 f0       	brcs	.+2      	; 0x4540 <main+0x970>
    453e:	75 c1       	rjmp	.+746    	; 0x482a <main+0xc5a>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
    4540:	44 ea       	ldi	r20, 0xA4	; 164
    4542:	c4 16       	cp	r12, r20
    4544:	48 e3       	ldi	r20, 0x38	; 56
    4546:	d4 06       	cpc	r13, r20
    4548:	e1 04       	cpc	r14, r1
    454a:	f1 04       	cpc	r15, r1
    454c:	08 f0       	brcs	.+2      	; 0x4550 <main+0x980>
    454e:	71 c1       	rjmp	.+738    	; 0x4832 <main+0xc62>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
    4550:	53 e3       	ldi	r21, 0x33	; 51
    4552:	c5 16       	cp	r12, r21
    4554:	5f e2       	ldi	r21, 0x2F	; 47
    4556:	d5 06       	cpc	r13, r21
    4558:	e1 04       	cpc	r14, r1
    455a:	f1 04       	cpc	r15, r1
    455c:	08 f0       	brcs	.+2      	; 0x4560 <main+0x990>
    455e:	6d c1       	rjmp	.+730    	; 0x483a <main+0xc6a>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
    4560:	85 e7       	ldi	r24, 0x75	; 117
    4562:	c8 16       	cp	r12, r24
    4564:	88 e2       	ldi	r24, 0x28	; 40
    4566:	d8 06       	cpc	r13, r24
    4568:	e1 04       	cpc	r14, r1
    456a:	f1 04       	cpc	r15, r1
    456c:	08 f0       	brcs	.+2      	; 0x4570 <main+0x9a0>
    456e:	69 c1       	rjmp	.+722    	; 0x4842 <main+0xc72>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
    4570:	96 e6       	ldi	r25, 0x66	; 102
    4572:	c9 16       	cp	r12, r25
    4574:	93 e2       	ldi	r25, 0x23	; 35
    4576:	d9 06       	cpc	r13, r25
    4578:	e1 04       	cpc	r14, r1
    457a:	f1 04       	cpc	r15, r1
    457c:	60 f4       	brcc	.+24     	; 0x4596 <main+0x9c6>
    457e:	21 e0       	ldi	r18, 0x01	; 1
    4580:	29 83       	std	Y+1, r18	; 0x01
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 275Hz
    4582:	68 e0       	ldi	r22, 0x08	; 8
    4584:	86 2e       	mov	r8, r22
    4586:	91 2c       	mov	r9, r1
    4588:	0b c0       	rjmp	.+22     	; 0x45a0 <main+0x9d0>
    458a:	31 e0       	ldi	r19, 0x01	; 1
    458c:	39 83       	std	Y+1, r19	; 0x01
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
    458e:	59 e0       	ldi	r21, 0x09	; 9
    4590:	85 2e       	mov	r8, r21
    4592:	91 2c       	mov	r9, r1
    4594:	05 c0       	rjmp	.+10     	; 0x45a0 <main+0x9d0>
    4596:	41 e0       	ldi	r20, 0x01	; 1
    4598:	49 83       	std	Y+1, r20	; 0x01
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
    459a:	47 e0       	ldi	r20, 0x07	; 7
    459c:	84 2e       	mov	r8, r20
    459e:	91 2c       	mov	r9, r1

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
    45a0:	10 92 19 05 	sts	0x0519, r1
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    45a4:	0e 94 29 30 	call	0x6052	; 0x6052 <TIM16_ReadTCNT1>
    45a8:	9d 8b       	std	Y+21, r25	; 0x15
    45aa:	8c 8b       	std	Y+20, r24	; 0x14
			//* output when serial RC formats are used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    45ac:	80 91 eb 05 	lds	r24, 0x05EB
    45b0:	82 30       	cpi	r24, 0x02	; 2
    45b2:	b9 f4       	brne	.+46     	; 0x45e2 <main+0xa12>
    45b4:	29 81       	ldd	r18, Y+1	; 0x01
    45b6:	22 23       	and	r18, r18
    45b8:	a1 f0       	breq	.+40     	; 0x45e2 <main+0xa12>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    45ba:	3c 8d       	ldd	r19, Y+28	; 0x1c
    45bc:	31 11       	cpse	r19, r1
    45be:	18 c0       	rjmp	.+48     	; 0x45f0 <main+0xa20>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    45c0:	80 91 f2 07 	lds	r24, 0x07F2
    45c4:	81 11       	cpse	r24, r1
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    45c6:	01 e0       	ldi	r16, 0x01	; 1
					}
					
					Interrupted = false;		// Cancel pending interrupts
    45c8:	10 92 f2 07 	sts	0x07F2, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    45cc:	0e 94 11 33 	call	0x6622	; 0x6622 <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    45d0:	1c a6       	std	Y+44, r1	; 0x2c
    45d2:	1b a6       	std	Y+43, r1	; 0x2b

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    45d4:	1e 82       	std	Y+6, r1	; 0x06
    45d6:	1f 82       	std	Y+7, r1	; 0x07
    45d8:	18 86       	std	Y+8, r1	; 0x08
    45da:	19 86       	std	Y+9, r1	; 0x09
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    45dc:	1d 86       	std	Y+13, r1	; 0x0d
					PWMBlocked = false;			// Enable PWM generation	
    45de:	1c 86       	std	Y+12, r1	; 0x0c
    45e0:	11 c0       	rjmp	.+34     	; 0x4604 <main+0xa34>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    45e2:	1c a6       	std	Y+44, r1	; 0x2c
    45e4:	1b a6       	std	Y+43, r1	; 0x2b

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    45e6:	1e 82       	std	Y+6, r1	; 0x06
    45e8:	1f 82       	std	Y+7, r1	; 0x07
    45ea:	18 86       	std	Y+8, r1	; 0x08
    45ec:	19 86       	std	Y+9, r1	; 0x09
    45ee:	0a c0       	rjmp	.+20     	; 0x4604 <main+0xa34>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    45f0:	1c a6       	std	Y+44, r1	; 0x2c
    45f2:	1b a6       	std	Y+43, r1	; 0x2b

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    45f4:	1e 82       	std	Y+6, r1	; 0x06
    45f6:	1f 82       	std	Y+7, r1	; 0x07
    45f8:	18 86       	std	Y+8, r1	; 0x08
    45fa:	19 86       	std	Y+9, r1	; 0x09
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    45fc:	1c 8e       	std	Y+28, r1	; 0x1c
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    45fe:	41 e0       	ldi	r20, 0x01	; 1
    4600:	4c 87       	std	Y+12, r20	; 0x0c
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    4602:	19 82       	std	Y+1, r1	; 0x01
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    4604:	80 91 f2 07 	lds	r24, 0x07F2
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    4608:	81 11       	cpse	r24, r1
    460a:	08 c0       	rjmp	.+16     	; 0x461c <main+0xa4c>
				(Interrupted) ||											// Run at RC rate
    460c:	80 91 eb 05 	lds	r24, 0x05EB
    4610:	82 30       	cpi	r24, 0x02	; 2
    4612:	09 f0       	breq	.+2      	; 0x4616 <main+0xa46>
    4614:	c6 c0       	rjmp	.+396    	; 0x47a2 <main+0xbd2>
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    4616:	2c 85       	ldd	r18, Y+12	; 0x0c
    4618:	21 11       	cpse	r18, r1
    461a:	a3 c0       	rjmp	.+326    	; 0x4762 <main+0xb92>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    461c:	80 91 f2 07 	lds	r24, 0x07F2
    4620:	88 23       	and	r24, r24
    4622:	19 f0       	breq	.+6      	; 0x462a <main+0xa5a>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    4624:	10 92 f2 07 	sts	0x07F2, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    4628:	01 e0       	ldi	r16, 0x01	; 1
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    462a:	90 91 eb 05 	lds	r25, 0x05EB
    462e:	e7 e5       	ldi	r30, 0x57	; 87
    4630:	f6 e0       	ldi	r31, 0x06	; 6
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    4636:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    4638:	92 30       	cpi	r25, 0x02	; 2
    463a:	29 f4       	brne	.+10     	; 0x4646 <main+0xa76>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    463c:	40 81       	ld	r20, Z
    463e:	44 23       	and	r20, r20
    4640:	09 f4       	brne	.+2      	; 0x4644 <main+0xa74>
    4642:	05 c1       	rjmp	.+522    	; 0x484e <main+0xc7e>
    4644:	0b c0       	rjmp	.+22     	; 0x465c <main+0xa8c>
    4646:	91 30       	cpi	r25, 0x01	; 1
    4648:	39 f4       	brne	.+14     	; 0x4658 <main+0xa88>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    464a:	40 81       	ld	r20, Z
    464c:	41 11       	cpse	r20, r1
    464e:	06 c0       	rjmp	.+12     	; 0x465c <main+0xa8c>
    4650:	4a 85       	ldd	r20, Y+10	; 0x0a
    4652:	41 11       	cpse	r20, r1
    4654:	0f c0       	rjmp	.+30     	; 0x4674 <main+0xaa4>
    4656:	fb c0       	rjmp	.+502    	; 0x484e <main+0xc7e>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    4658:	19 16       	cp	r1, r25
    465a:	24 f4       	brge	.+8      	; 0x4664 <main+0xa94>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    465c:	40 81       	ld	r20, Z
    465e:	14 16       	cp	r1, r20
    4660:	4c f0       	brlt	.+18     	; 0x4674 <main+0xaa4>
    4662:	10 c0       	rjmp	.+32     	; 0x4684 <main+0xab4>
    4664:	91 11       	cpse	r25, r1
    4666:	0e c0       	rjmp	.+28     	; 0x4684 <main+0xab4>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    4668:	4a 85       	ldd	r20, Y+10	; 0x0a
    466a:	41 11       	cpse	r20, r1
    466c:	03 c0       	rjmp	.+6      	; 0x4674 <main+0xaa4>
    466e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4670:	44 23       	and	r20, r20
    4672:	41 f0       	breq	.+16     	; 0x4684 <main+0xab4>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
					)
				{
					ServoFlag |= (1 << i);
    4674:	41 e0       	ldi	r20, 0x01	; 1
    4676:	50 e0       	ldi	r21, 0x00	; 0
    4678:	02 2e       	mov	r0, r18
    467a:	01 c0       	rjmp	.+2      	; 0x467e <main+0xaae>
    467c:	44 0f       	add	r20, r20
    467e:	0a 94       	dec	r0
    4680:	ea f7       	brpl	.-6      	; 0x467c <main+0xaac>
    4682:	84 2b       	or	r24, r20
    4684:	2f 5f       	subi	r18, 0xFF	; 255
    4686:	3f 4f       	sbci	r19, 0xFF	; 255
    4688:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    468a:	28 30       	cpi	r18, 0x08	; 8
    468c:	31 05       	cpc	r19, r1
    468e:	a1 f6       	brne	.-88     	; 0x4638 <main+0xa68>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    4690:	2b 85       	ldd	r18, Y+11	; 0x0b
    4692:	22 23       	and	r18, r18
    4694:	11 f0       	breq	.+4      	; 0x469a <main+0xaca>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    4696:	19 8a       	std	Y+17, r1	; 0x11
    4698:	18 8a       	std	Y+16, r1	; 0x10
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    469a:	31 e0       	ldi	r19, 0x01	; 1
    469c:	83 16       	cp	r8, r19
    469e:	91 04       	cpc	r9, r1
    46a0:	19 f5       	brne	.+70     	; 0x46e8 <main+0xb18>
    46a2:	92 30       	cpi	r25, 0x02	; 2
    46a4:	09 f5       	brne	.+66     	; 0x46e8 <main+0xb18>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
    46a6:	4d e8       	ldi	r20, 0x8D	; 141
    46a8:	44 16       	cp	r4, r20
    46aa:	40 e2       	ldi	r20, 0x20	; 32
    46ac:	54 06       	cpc	r5, r20
    46ae:	61 04       	cpc	r6, r1
    46b0:	71 04       	cpc	r7, r1
    46b2:	90 f0       	brcs	.+36     	; 0x46d8 <main+0xb08>
    46b4:	73 01       	movw	r14, r6
    46b6:	62 01       	movw	r12, r4
    46b8:	52 e6       	ldi	r21, 0x62	; 98
    46ba:	45 16       	cp	r4, r21
    46bc:	51 e5       	ldi	r21, 0x51	; 81
    46be:	55 06       	cpc	r5, r21
    46c0:	61 04       	cpc	r6, r1
    46c2:	71 04       	cpc	r7, r1
    46c4:	30 f0       	brcs	.+12     	; 0x46d2 <main+0xb02>
    46c6:	31 e6       	ldi	r19, 0x61	; 97
    46c8:	c3 2e       	mov	r12, r19
    46ca:	31 e5       	ldi	r19, 0x51	; 81
    46cc:	d3 2e       	mov	r13, r19
    46ce:	e1 2c       	mov	r14, r1
    46d0:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    46d2:	21 e0       	ldi	r18, 0x01	; 1
    46d4:	2c 87       	std	Y+12, r18	; 0x0c
    46d6:	08 c0       	rjmp	.+16     	; 0x46e8 <main+0xb18>
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
				{
					PWM_interval = PWM_PERIOD_BEST;
    46d8:	2d e8       	ldi	r18, 0x8D	; 141
    46da:	c2 2e       	mov	r12, r18
    46dc:	20 e2       	ldi	r18, 0x20	; 32
    46de:	d2 2e       	mov	r13, r18
    46e0:	e1 2c       	mov	r14, r1
    46e2:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    46e4:	31 e0       	ldi	r19, 0x01	; 1
    46e6:	3c 87       	std	Y+12, r19	; 0x0c
				{
					PWM_interval = interval;		// Actual interval
				}
			}
			
			Calculate_PID();						// Calculate PID values
    46e8:	8a a7       	std	Y+42, r24	; 0x2a
    46ea:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <Calculate_PID>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
    46ee:	0e 94 d4 3d 	call	0x7ba8	; 0x7ba8 <ProcessMixer>
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits				
    46f2:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <UpdateServos>

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    46f6:	90 91 19 05 	lds	r25, 0x0519
    46fa:	8a a5       	ldd	r24, Y+42	; 0x2a
    46fc:	91 11       	cpse	r25, r1
    46fe:	09 c0       	rjmp	.+18     	; 0x4712 <main+0xb42>
			}
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    4700:	aa 20       	and	r10, r10
    4702:	f9 f0       	breq	.+62     	; 0x4742 <main+0xb72>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4704:	8b ee       	ldi	r24, 0xEB	; 235
    4706:	9c e2       	ldi	r25, 0x2C	; 44
    4708:	01 97       	sbiw	r24, 0x01	; 1
    470a:	f1 f7       	brne	.-4      	; 0x4708 <main+0xb38>
    470c:	00 c0       	rjmp	.+0      	; 0x470e <main+0xb3e>
    470e:	00 00       	nop
    4710:	1a c0       	rjmp	.+52     	; 0x4746 <main+0xb76>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits				

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    4712:	e7 e5       	ldi	r30, 0x57	; 87
    4714:	f6 e0       	ldi	r31, 0x06	; 6
    4716:	20 e0       	ldi	r18, 0x00	; 0
    4718:	30 e0       	ldi	r19, 0x00	; 0
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
				{
					// Check for motor marker
					if (Config.Channel[i].Motor_marker == MOTOR)
    471a:	90 81       	ld	r25, Z
    471c:	92 30       	cpi	r25, 0x02	; 2
    471e:	51 f4       	brne	.+20     	; 0x4734 <main+0xb64>
					{
						// Set output to maximum pulse width
						ServoOut[i] = MOTOR_0;
    4720:	d9 01       	movw	r26, r18
    4722:	aa 0f       	add	r26, r26
    4724:	bb 1f       	adc	r27, r27
    4726:	a5 56       	subi	r26, 0x65	; 101
    4728:	b7 4f       	sbci	r27, 0xF7	; 247
    472a:	4c e4       	ldi	r20, 0x4C	; 76
    472c:	54 e0       	ldi	r21, 0x04	; 4
    472e:	11 96       	adiw	r26, 0x01	; 1
    4730:	5c 93       	st	X, r21
    4732:	4e 93       	st	-X, r20
    4734:	2f 5f       	subi	r18, 0xFF	; 255
    4736:	3f 4f       	sbci	r19, 0xFF	; 255
    4738:	b6 96       	adiw	r30, 0x26	; 38

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
    473a:	28 30       	cpi	r18, 0x08	; 8
    473c:	31 05       	cpc	r19, r1
    473e:	69 f7       	brne	.-38     	; 0x471a <main+0xb4a>
    4740:	df cf       	rjmp	.-66     	; 0x4700 <main+0xb30>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    4742:	0e 94 ea 4a 	call	0x95d4	; 0x95d4 <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    4746:	80 91 eb 05 	lds	r24, 0x05EB
    474a:	82 30       	cpi	r24, 0x02	; 2
    474c:	31 f4       	brne	.+12     	; 0x475a <main+0xb8a>
    474e:	18 14       	cp	r1, r8
    4750:	19 04       	cpc	r1, r9
    4752:	1c f4       	brge	.+6      	; 0x475a <main+0xb8a>
			{
				PWM_pulses--;
    4754:	91 e0       	ldi	r25, 0x01	; 1
    4756:	89 1a       	sub	r8, r25
    4758:	91 08       	sbc	r9, r1
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    475a:	10 92 18 05 	sts	0x0518, r1
    475e:	1b 86       	std	Y+11, r1	; 0x0b
    4760:	20 c0       	rjmp	.+64     	; 0x47a2 <main+0xbd2>
		}
		
		// In FAST mode and in-between bursts, sync up with the RC so that the time from Interrupt to PWM is constant.
		// This helps tighten up the number of pulses allowable
		else if ((Config.Servo_rate == FAST) && (PWMBlocked == true) && (RCrateMeasured == true) && (RCInterruptsON == true) && (Overdue == false))
    4762:	29 81       	ldd	r18, Y+1	; 0x01
    4764:	22 23       	and	r18, r18
    4766:	81 f1       	breq	.+96     	; 0x47c8 <main+0xbf8>
    4768:	3d 85       	ldd	r19, Y+13	; 0x0d
    476a:	33 23       	and	r19, r19
    476c:	09 f4       	brne	.+2      	; 0x4770 <main+0xba0>
    476e:	73 c0       	rjmp	.+230    	; 0x4856 <main+0xc86>
    4770:	80 91 19 05 	lds	r24, 0x0519
    4774:	81 11       	cpse	r24, r1
    4776:	15 c0       	rjmp	.+42     	; 0x47a2 <main+0xbd2>
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	90 e0       	ldi	r25, 0x00	; 0
		{
			fast_sync_timer = 0;
			
			// Wait here until interrupted or timed out (15ms)
			while ((Interrupted == false) && (fast_sync_timer < FASTSYNCLIMIT))
    477c:	20 91 f2 07 	lds	r18, 0x07F2
    4780:	21 11       	cpse	r18, r1
    4782:	0e c0       	rjmp	.+28     	; 0x47a0 <main+0xbd0>
    4784:	85 32       	cpi	r24, 0x25	; 37
    4786:	31 e0       	ldi	r19, 0x01	; 1
    4788:	93 07       	cpc	r25, r19
    478a:	50 f4       	brcc	.+20     	; 0x47a0 <main+0xbd0>
			{
				fast_sync_timer += (uint8_t)(TCNT2 - fast_sync_TCNT2);
    478c:	20 91 b2 00 	lds	r18, 0x00B2
    4790:	4f a1       	ldd	r20, Y+39	; 0x27
    4792:	24 1b       	sub	r18, r20
    4794:	82 0f       	add	r24, r18
    4796:	91 1d       	adc	r25, r1
				fast_sync_TCNT2 = TCNT2;
    4798:	20 91 b2 00 	lds	r18, 0x00B2
    479c:	2f a3       	std	Y+39, r18	; 0x27
    479e:	ee cf       	rjmp	.-36     	; 0x477c <main+0xbac>
			}
			
			// Debug - Whhaaaat? - delete this unless I recall why it is even here.
			Interrupted_Clone = false;
    47a0:	00 e0       	ldi	r16, 0x00	; 0
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    47a2:	18 14       	cp	r1, r8
    47a4:	19 04       	cpc	r1, r9
    47a6:	84 f0       	brlt	.+32     	; 0x47c8 <main+0xbf8>
    47a8:	49 81       	ldd	r20, Y+1	; 0x01
    47aa:	44 23       	and	r20, r20
    47ac:	69 f0       	breq	.+26     	; 0x47c8 <main+0xbf8>
    47ae:	2d 85       	ldd	r18, Y+13	; 0x0d
    47b0:	21 11       	cpse	r18, r1
    47b2:	0a c0       	rjmp	.+20     	; 0x47c8 <main+0xbf8>
    47b4:	80 91 eb 05 	lds	r24, 0x05EB
    47b8:	82 30       	cpi	r24, 0x02	; 2
    47ba:	29 f4       	brne	.+10     	; 0x47c6 <main+0xbf6>
		{
			init_int();					// Re-enable interrupts
    47bc:	0e 94 24 33 	call	0x6648	; 0x6648 <init_int>
			RCInterruptsON = true;
    47c0:	31 e0       	ldi	r19, 0x01	; 1
    47c2:	3d 87       	std	Y+13, r19	; 0x0d
    47c4:	01 c0       	rjmp	.+2      	; 0x47c8 <main+0xbf8>
    47c6:	1d 86       	std	Y+13, r1	; 0x0d
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    47c8:	80 91 20 05 	lds	r24, 0x0520
    47cc:	49 a5       	ldd	r20, Y+41	; 0x29
    47ce:	48 17       	cp	r20, r24
    47d0:	19 f0       	breq	.+6      	; 0x47d8 <main+0xc08>
    47d2:	11 11       	cpse	r17, r1
    47d4:	01 c0       	rjmp	.+2      	; 0x47d8 <main+0xc08>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    47d6:	17 e0       	ldi	r17, 0x07	; 7
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    47d8:	20 91 20 05 	lds	r18, 0x0520
    47dc:	29 a7       	std	Y+41, r18	; 0x29
	
	} // while loop
    47de:	7b 8c       	ldd	r7, Y+27	; 0x1b
    47e0:	4c 88       	ldd	r4, Y+20	; 0x14
    47e2:	5d 88       	ldd	r5, Y+21	; 0x15
    47e4:	3c ca       	rjmp	.-2952   	; 0x3c5e <main+0x8e>
				// Trim lower end to zero (0 to 2250)
				if (temp1 < 0) temp1 = 0;

				// Convert 0 to 2250 to 0 to 125. Divide by 20
				// Round to avoid truncation errors
				transition = (temp1 + 10) / 20;
    47e6:	70 93 22 05 	sts	0x0522, r23
    47ea:	60 93 21 05 	sts	0x0521, r22

			// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
			// This prevents state changes when controlled by a channel
			if (Config.TransitionSpeed == 0)
			{
				Transition_state = TRANSITIONING;
    47ee:	85 e0       	ldi	r24, 0x05	; 5
    47f0:	80 93 23 05 	sts	0x0523, r24
    47f4:	53 cc       	rjmp	.-1882   	; 0x409c <main+0x4cc>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    47f6:	88 24       	eor	r8, r8
    47f8:	83 94       	inc	r8
    47fa:	91 2c       	mov	r9, r1
    47fc:	d1 ce       	rjmp	.-606    	; 0x45a0 <main+0x9d0>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
    47fe:	e4 e0       	ldi	r30, 0x04	; 4
    4800:	8e 2e       	mov	r8, r30
    4802:	91 2c       	mov	r9, r1
    4804:	0f c0       	rjmp	.+30     	; 0x4824 <main+0xc54>
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
    4806:	75 e0       	ldi	r23, 0x05	; 5
    4808:	87 2e       	mov	r8, r23
    480a:	91 2c       	mov	r9, r1
    480c:	0b c0       	rjmp	.+22     	; 0x4824 <main+0xc54>
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
    480e:	66 e0       	ldi	r22, 0x06	; 6
    4810:	86 2e       	mov	r8, r22
    4812:	91 2c       	mov	r9, r1
    4814:	07 c0       	rjmp	.+14     	; 0x4824 <main+0xc54>
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
    4816:	57 e0       	ldi	r21, 0x07	; 7
    4818:	85 2e       	mov	r8, r21
    481a:	91 2c       	mov	r9, r1
    481c:	03 c0       	rjmp	.+6      	; 0x4824 <main+0xc54>
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    481e:	48 e0       	ldi	r20, 0x08	; 8
    4820:	84 2e       	mov	r8, r20
    4822:	91 2c       	mov	r9, r1
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    4824:	31 e0       	ldi	r19, 0x01	; 1
    4826:	39 83       	std	Y+1, r19	; 0x01
    4828:	bb ce       	rjmp	.-650    	; 0x45a0 <main+0x9d0>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 29ms is safe for all formats.

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
    482a:	33 e0       	ldi	r19, 0x03	; 3
    482c:	83 2e       	mov	r8, r19
    482e:	91 2c       	mov	r9, r1
    4830:	0b c0       	rjmp	.+22     	; 0x4848 <main+0xc78>
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
    4832:	24 e0       	ldi	r18, 0x04	; 4
    4834:	82 2e       	mov	r8, r18
    4836:	91 2c       	mov	r9, r1
    4838:	07 c0       	rjmp	.+14     	; 0x4848 <main+0xc78>
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
    483a:	95 e0       	ldi	r25, 0x05	; 5
    483c:	89 2e       	mov	r8, r25
    483e:	91 2c       	mov	r9, r1
    4840:	03 c0       	rjmp	.+6      	; 0x4848 <main+0xc78>
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    4842:	86 e0       	ldi	r24, 0x06	; 6
    4844:	88 2e       	mov	r8, r24
    4846:	91 2c       	mov	r9, r1
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    4848:	41 e0       	ldi	r20, 0x01	; 1
    484a:	49 83       	std	Y+1, r20	; 0x01
    484c:	a9 ce       	rjmp	.-686    	; 0x45a0 <main+0x9d0>
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    484e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4850:	41 11       	cpse	r20, r1
    4852:	10 cf       	rjmp	.-480    	; 0x4674 <main+0xaa4>
    4854:	03 cf       	rjmp	.-506    	; 0x465c <main+0xa8c>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    4856:	18 14       	cp	r1, r8
    4858:	19 04       	cpc	r1, r9
    485a:	0c f4       	brge	.+2      	; 0x485e <main+0xc8e>
    485c:	b5 cf       	rjmp	.-150    	; 0x47c8 <main+0xbf8>
    485e:	aa cf       	rjmp	.-172    	; 0x47b4 <main+0xbe4>

00004860 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    4860:	0f 93       	push	r16
    4862:	1f 93       	push	r17
    4864:	cf 93       	push	r28
    4866:	df 93       	push	r29
    4868:	c7 e0       	ldi	r28, 0x07	; 7
    486a:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    486c:	08 2f       	mov	r16, r24
    486e:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    4870:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    4872:	c8 01       	movw	r24, r16
    4874:	0c 2e       	mov	r0, r28
    4876:	02 c0       	rjmp	.+4      	; 0x487c <spiwrite+0x1c>
    4878:	95 95       	asr	r25
    487a:	87 95       	ror	r24
    487c:	0a 94       	dec	r0
    487e:	e2 f7       	brpl	.-8      	; 0x4878 <spiwrite+0x18>
    4880:	80 ff       	sbrs	r24, 0
    4882:	02 c0       	rjmp	.+4      	; 0x4888 <spiwrite+0x28>
		{
			LCD_SI = 1;
    4884:	59 9a       	sbi	0x0b, 1	; 11
    4886:	01 c0       	rjmp	.+2      	; 0x488a <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    4888:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    488a:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    488c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <glcd_delay>
    4890:	21 97       	sbiw	r28, 0x01	; 1
    4892:	70 f7       	brcc	.-36     	; 0x4870 <spiwrite+0x10>
	}
}
    4894:	df 91       	pop	r29
    4896:	cf 91       	pop	r28
    4898:	1f 91       	pop	r17
    489a:	0f 91       	pop	r16
    489c:	08 95       	ret

0000489e <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    489e:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    48a0:	0c 94 30 24 	jmp	0x4860	; 0x4860 <spiwrite>

000048a4 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    48a4:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    48a6:	0c 94 30 24 	jmp	0x4860	; 0x4860 <spiwrite>

000048aa <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    48aa:	cf 93       	push	r28
    48ac:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    48ae:	81 e8       	ldi	r24, 0x81	; 129
    48b0:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
	st7565_command(val);
    48b4:	8c 2f       	mov	r24, r28
}
    48b6:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    48b8:	0c 94 4f 24 	jmp	0x489e	; 0x489e <st7565_command>

000048bc <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    48bc:	cf 93       	push	r28
    48be:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    48c0:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    48c2:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    48c4:	87 e8       	ldi	r24, 0x87	; 135
    48c6:	93 e1       	ldi	r25, 0x13	; 19
    48c8:	01 97       	sbiw	r24, 0x01	; 1
    48ca:	f1 f7       	brne	.-4      	; 0x48c8 <st7565_init+0xc>
    48cc:	00 c0       	rjmp	.+0      	; 0x48ce <st7565_init+0x12>
    48ce:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    48d0:	5e 9a       	sbi	0x0b, 6	; 11
    48d2:	c2 ef       	ldi	r28, 0xF2	; 242
    48d4:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    48d6:	fe 01       	movw	r30, r28
    48d8:	84 91       	lpm	r24, Z
    48da:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
    48de:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    48e0:	fe e0       	ldi	r31, 0x0E	; 14
    48e2:	c0 30       	cpi	r28, 0x00	; 0
    48e4:	df 07       	cpc	r29, r31
    48e6:	b9 f7       	brne	.-18     	; 0x48d6 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    48e8:	80 91 4a 06 	lds	r24, 0x064A
    48ec:	0e 94 55 24 	call	0x48aa	; 0x48aa <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    48f0:	88 ec       	ldi	r24, 0xC8	; 200
}
    48f2:	df 91       	pop	r29
    48f4:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    48f6:	0c 94 4f 24 	jmp	0x489e	; 0x489e <st7565_command>

000048fa <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    48fa:	df 92       	push	r13
    48fc:	ef 92       	push	r14
    48fe:	ff 92       	push	r15
    4900:	0f 93       	push	r16
    4902:	1f 93       	push	r17
    4904:	cf 93       	push	r28
    4906:	df 93       	push	r29
    4908:	c0 e0       	ldi	r28, 0x00	; 0
    490a:	de e0       	ldi	r29, 0x0E	; 14
    490c:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    490e:	fe 01       	movw	r30, r28
    4910:	84 91       	lpm	r24, Z
    4912:	80 6b       	ori	r24, 0xB0	; 176
    4914:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    4918:	80 e0       	ldi	r24, 0x00	; 0
    491a:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    491e:	80 e1       	ldi	r24, 0x10	; 16
    4920:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    4924:	80 ee       	ldi	r24, 0xE0	; 224
    4926:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
    492a:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    492c:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    492e:	f7 01       	movw	r30, r14
    4930:	81 91       	ld	r24, Z+
    4932:	7f 01       	movw	r14, r30
    4934:	0e 94 52 24 	call	0x48a4	; 0x48a4 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    4938:	d3 94       	inc	r13
    493a:	f0 e8       	ldi	r31, 0x80	; 128
    493c:	df 12       	cpse	r13, r31
    493e:	f7 cf       	rjmp	.-18     	; 0x492e <write_buffer+0x34>
    4940:	21 96       	adiw	r28, 0x01	; 1
    4942:	00 58       	subi	r16, 0x80	; 128
    4944:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    4946:	8e e0       	ldi	r24, 0x0E	; 14
    4948:	c8 30       	cpi	r28, 0x08	; 8
    494a:	d8 07       	cpc	r29, r24
    494c:	01 f7       	brne	.-64     	; 0x490e <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    494e:	df 91       	pop	r29
    4950:	cf 91       	pop	r28
    4952:	1f 91       	pop	r17
    4954:	0f 91       	pop	r16
    4956:	ff 90       	pop	r15
    4958:	ef 90       	pop	r14
    495a:	df 90       	pop	r13
    495c:	08 95       	ret

0000495e <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    495e:	20 e0       	ldi	r18, 0x00	; 0
    4960:	34 e0       	ldi	r19, 0x04	; 4
    4962:	fc 01       	movw	r30, r24
    4964:	a9 01       	movw	r20, r18
    4966:	11 92       	st	Z+, r1
    4968:	41 50       	subi	r20, 0x01	; 1
    496a:	50 40       	sbci	r21, 0x00	; 0
    496c:	e1 f7       	brne	.-8      	; 0x4966 <clear_buffer+0x8>
    496e:	08 95       	ret

00004970 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    4970:	cf 93       	push	r28
    4972:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4974:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    4976:	8d 2f       	mov	r24, r29
    4978:	80 6b       	ori	r24, 0xB0	; 176
    497a:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    497e:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    4980:	8c 2f       	mov	r24, r28
    4982:	8f 70       	andi	r24, 0x0F	; 15
    4984:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    4988:	8c 2f       	mov	r24, r28
    498a:	82 95       	swap	r24
    498c:	8f 70       	andi	r24, 0x0F	; 15
    498e:	80 61       	ori	r24, 0x10	; 16
    4990:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
			st7565_data(0x00);											// Clear data
    4994:	80 e0       	ldi	r24, 0x00	; 0
    4996:	0e 94 52 24 	call	0x48a4	; 0x48a4 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    499a:	cf 5f       	subi	r28, 0xFF	; 255
    499c:	c0 38       	cpi	r28, 0x80	; 128
    499e:	81 f7       	brne	.-32     	; 0x4980 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    49a0:	df 5f       	subi	r29, 0xFF	; 255
    49a2:	d8 30       	cpi	r29, 0x08	; 8
    49a4:	41 f7       	brne	.-48     	; 0x4976 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    49a6:	df 91       	pop	r29
    49a8:	cf 91       	pop	r28
    49aa:	08 95       	ret

000049ac <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    49ac:	67 fd       	sbrc	r22, 7
    49ae:	36 c0       	rjmp	.+108    	; 0x4a1c <setpixel+0x70>
    49b0:	40 34       	cpi	r20, 0x40	; 64
    49b2:	a0 f5       	brcc	.+104    	; 0x4a1c <setpixel+0x70>
    49b4:	34 2f       	mov	r19, r20
    49b6:	36 95       	lsr	r19
    49b8:	36 95       	lsr	r19
    49ba:	36 95       	lsr	r19
    49bc:	e6 2f       	mov	r30, r22
    49be:	f0 e0       	ldi	r31, 0x00	; 0
    49c0:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    49c2:	22 23       	and	r18, r18
    49c4:	a9 f0       	breq	.+42     	; 0x49f0 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    49c6:	20 e8       	ldi	r18, 0x80	; 128
    49c8:	32 9f       	mul	r19, r18
    49ca:	e0 0d       	add	r30, r0
    49cc:	f1 1d       	adc	r31, r1
    49ce:	11 24       	eor	r1, r1
    49d0:	e8 0f       	add	r30, r24
    49d2:	f9 1f       	adc	r31, r25
    49d4:	40 95       	com	r20
    49d6:	50 95       	com	r21
    49d8:	47 70       	andi	r20, 0x07	; 7
    49da:	55 27       	eor	r21, r21
    49dc:	81 e0       	ldi	r24, 0x01	; 1
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	04 2e       	mov	r0, r20
    49e2:	01 c0       	rjmp	.+2      	; 0x49e6 <setpixel+0x3a>
    49e4:	88 0f       	add	r24, r24
    49e6:	0a 94       	dec	r0
    49e8:	ea f7       	brpl	.-6      	; 0x49e4 <setpixel+0x38>
    49ea:	90 81       	ld	r25, Z
    49ec:	98 2b       	or	r25, r24
    49ee:	15 c0       	rjmp	.+42     	; 0x4a1a <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    49f0:	20 e8       	ldi	r18, 0x80	; 128
    49f2:	32 9f       	mul	r19, r18
    49f4:	e0 0d       	add	r30, r0
    49f6:	f1 1d       	adc	r31, r1
    49f8:	11 24       	eor	r1, r1
    49fa:	e8 0f       	add	r30, r24
    49fc:	f9 1f       	adc	r31, r25
    49fe:	40 95       	com	r20
    4a00:	50 95       	com	r21
    4a02:	47 70       	andi	r20, 0x07	; 7
    4a04:	55 27       	eor	r21, r21
    4a06:	81 e0       	ldi	r24, 0x01	; 1
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	04 2e       	mov	r0, r20
    4a0c:	01 c0       	rjmp	.+2      	; 0x4a10 <setpixel+0x64>
    4a0e:	88 0f       	add	r24, r24
    4a10:	0a 94       	dec	r0
    4a12:	ea f7       	brpl	.-6      	; 0x4a0e <setpixel+0x62>
    4a14:	80 95       	com	r24
    4a16:	90 81       	ld	r25, Z
    4a18:	98 23       	and	r25, r24
    4a1a:	90 83       	st	Z, r25
    4a1c:	08 95       	ret

00004a1e <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    4a1e:	9f 92       	push	r9
    4a20:	af 92       	push	r10
    4a22:	bf 92       	push	r11
    4a24:	cf 92       	push	r12
    4a26:	df 92       	push	r13
    4a28:	ef 92       	push	r14
    4a2a:	ff 92       	push	r15
    4a2c:	0f 93       	push	r16
    4a2e:	1f 93       	push	r17
    4a30:	cf 93       	push	r28
    4a32:	df 93       	push	r29
    4a34:	ec 01       	movw	r28, r24
    4a36:	16 2f       	mov	r17, r22
    4a38:	f4 2e       	mov	r15, r20
    4a3a:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    4a3c:	a0 2f       	mov	r26, r16
    4a3e:	b0 e0       	ldi	r27, 0x00	; 0
    4a40:	a4 1b       	sub	r26, r20
    4a42:	b1 09       	sbc	r27, r1
    4a44:	b7 ff       	sbrs	r27, 7
    4a46:	03 c0       	rjmp	.+6      	; 0x4a4e <drawline+0x30>
    4a48:	b1 95       	neg	r27
    4a4a:	a1 95       	neg	r26
    4a4c:	b1 09       	sbc	r27, r1
    4a4e:	ed 2d       	mov	r30, r13
    4a50:	f0 e0       	ldi	r31, 0x00	; 0
    4a52:	e1 1b       	sub	r30, r17
    4a54:	f1 09       	sbc	r31, r1
    4a56:	f7 ff       	sbrs	r31, 7
    4a58:	03 c0       	rjmp	.+6      	; 0x4a60 <drawline+0x42>
    4a5a:	f1 95       	neg	r31
    4a5c:	e1 95       	neg	r30
    4a5e:	f1 09       	sbc	r31, r1
    4a60:	bb 24       	eor	r11, r11
    4a62:	b3 94       	inc	r11
    4a64:	ea 17       	cp	r30, r26
    4a66:	fb 07       	cpc	r31, r27
    4a68:	14 f0       	brlt	.+4      	; 0x4a6e <drawline+0x50>
    4a6a:	b1 2c       	mov	r11, r1
    4a6c:	06 c0       	rjmp	.+12     	; 0x4a7a <drawline+0x5c>
    4a6e:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    4a70:	d0 2e       	mov	r13, r16
    4a72:	08 2f       	mov	r16, r24
    4a74:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    4a76:	1f 2d       	mov	r17, r15
    4a78:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    4a7a:	d1 16       	cp	r13, r17
    4a7c:	30 f4       	brcc	.+12     	; 0x4a8a <drawline+0x6c>
    4a7e:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    4a80:	f0 2e       	mov	r15, r16
    4a82:	08 2f       	mov	r16, r24
    4a84:	81 2f       	mov	r24, r17
    4a86:	1d 2d       	mov	r17, r13
    4a88:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    4a8a:	ad 2c       	mov	r10, r13
    4a8c:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    4a8e:	e0 2f       	mov	r30, r16
    4a90:	f0 e0       	ldi	r31, 0x00	; 0
    4a92:	ef 19       	sub	r30, r15
    4a94:	f1 09       	sbc	r31, r1
    4a96:	f7 ff       	sbrs	r31, 7
    4a98:	03 c0       	rjmp	.+6      	; 0x4aa0 <drawline+0x82>
    4a9a:	f1 95       	neg	r31
    4a9c:	e1 95       	neg	r30
    4a9e:	f1 09       	sbc	r31, r1
    4aa0:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    4aa2:	ca 2c       	mov	r12, r10
    4aa4:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    4aa6:	f0 16       	cp	r15, r16
    4aa8:	10 f4       	brcc	.+4      	; 0x4aae <drawline+0x90>
	{
		ystep = 1;
    4aaa:	01 e0       	ldi	r16, 0x01	; 1
    4aac:	10 c0       	rjmp	.+32     	; 0x4ace <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    4aae:	0f ef       	ldi	r16, 0xFF	; 255
    4ab0:	0e c0       	rjmp	.+28     	; 0x4ace <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    4ab2:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    4ab4:	bb 20       	and	r11, r11
    4ab6:	71 f0       	breq	.+28     	; 0x4ad4 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    4ab8:	41 2f       	mov	r20, r17
    4aba:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4abc:	ce 01       	movw	r24, r28
    4abe:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>
		}
		err -= dy;
    4ac2:	c9 18       	sub	r12, r9
		if (err < 0) 
    4ac4:	c7 fe       	sbrs	r12, 7
    4ac6:	02 c0       	rjmp	.+4      	; 0x4acc <drawline+0xae>
		{
			y0 += ystep;
    4ac8:	f0 0e       	add	r15, r16
			err += dx;
    4aca:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    4acc:	1f 5f       	subi	r17, 0xFF	; 255
    4ace:	1d 15       	cp	r17, r13
    4ad0:	80 f3       	brcs	.-32     	; 0x4ab2 <drawline+0x94>
    4ad2:	03 c0       	rjmp	.+6      	; 0x4ada <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4ad4:	4f 2d       	mov	r20, r15
    4ad6:	61 2f       	mov	r22, r17
    4ad8:	f1 cf       	rjmp	.-30     	; 0x4abc <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    4ada:	df 91       	pop	r29
    4adc:	cf 91       	pop	r28
    4ade:	1f 91       	pop	r17
    4ae0:	0f 91       	pop	r16
    4ae2:	ff 90       	pop	r15
    4ae4:	ef 90       	pop	r14
    4ae6:	df 90       	pop	r13
    4ae8:	cf 90       	pop	r12
    4aea:	bf 90       	pop	r11
    4aec:	af 90       	pop	r10
    4aee:	9f 90       	pop	r9
    4af0:	08 95       	ret

00004af2 <drawrect>:
	}
}

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    4af2:	9f 92       	push	r9
    4af4:	af 92       	push	r10
    4af6:	bf 92       	push	r11
    4af8:	cf 92       	push	r12
    4afa:	df 92       	push	r13
    4afc:	ef 92       	push	r14
    4afe:	ff 92       	push	r15
    4b00:	0f 93       	push	r16
    4b02:	1f 93       	push	r17
    4b04:	cf 93       	push	r28
    4b06:	df 93       	push	r29
    4b08:	ec 01       	movw	r28, r24
    4b0a:	f6 2e       	mov	r15, r22
    4b0c:	b4 2e       	mov	r11, r20
    4b0e:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4b10:	16 2f       	mov	r17, r22
    4b12:	c2 2e       	mov	r12, r18
    4b14:	d1 2c       	mov	r13, r1
    4b16:	c6 0e       	add	r12, r22
    4b18:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    4b1a:	aa 24       	eor	r10, r10
    4b1c:	aa 94       	dec	r10
    4b1e:	a0 0e       	add	r10, r16
    4b20:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4b22:	81 2f       	mov	r24, r17
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	8c 15       	cp	r24, r12
    4b28:	9d 05       	cpc	r25, r13
    4b2a:	74 f4       	brge	.+28     	; 0x4b48 <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    4b2c:	2e 2d       	mov	r18, r14
    4b2e:	4b 2d       	mov	r20, r11
    4b30:	61 2f       	mov	r22, r17
    4b32:	ce 01       	movw	r24, r28
    4b34:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>
		setpixel(buff, i, y+h-1, color);
    4b38:	2e 2d       	mov	r18, r14
    4b3a:	4a 2d       	mov	r20, r10
    4b3c:	61 2f       	mov	r22, r17
    4b3e:	ce 01       	movw	r24, r28
    4b40:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4b44:	1f 5f       	subi	r17, 0xFF	; 255
    4b46:	ed cf       	rjmp	.-38     	; 0x4b22 <drawrect+0x30>
    4b48:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4b4a:	10 e0       	ldi	r17, 0x00	; 0
    4b4c:	0b 0d       	add	r16, r11
    4b4e:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    4b50:	cc 24       	eor	r12, r12
    4b52:	ca 94       	dec	r12
    4b54:	c9 0c       	add	r12, r9
    4b56:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4b58:	8d 2d       	mov	r24, r13
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	80 17       	cp	r24, r16
    4b5e:	91 07       	cpc	r25, r17
    4b60:	74 f4       	brge	.+28     	; 0x4b7e <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    4b62:	2e 2d       	mov	r18, r14
    4b64:	4d 2d       	mov	r20, r13
    4b66:	6f 2d       	mov	r22, r15
    4b68:	ce 01       	movw	r24, r28
    4b6a:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>
		setpixel(buff, x+w-1, i, color);
    4b6e:	2e 2d       	mov	r18, r14
    4b70:	4d 2d       	mov	r20, r13
    4b72:	6c 2d       	mov	r22, r12
    4b74:	ce 01       	movw	r24, r28
    4b76:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4b7a:	d3 94       	inc	r13
    4b7c:	ed cf       	rjmp	.-38     	; 0x4b58 <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    4b7e:	df 91       	pop	r29
    4b80:	cf 91       	pop	r28
    4b82:	1f 91       	pop	r17
    4b84:	0f 91       	pop	r16
    4b86:	ff 90       	pop	r15
    4b88:	ef 90       	pop	r14
    4b8a:	df 90       	pop	r13
    4b8c:	cf 90       	pop	r12
    4b8e:	bf 90       	pop	r11
    4b90:	af 90       	pop	r10
    4b92:	9f 90       	pop	r9
    4b94:	08 95       	ret

00004b96 <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    4b96:	4f 92       	push	r4
    4b98:	5f 92       	push	r5
    4b9a:	6f 92       	push	r6
    4b9c:	7f 92       	push	r7
    4b9e:	8f 92       	push	r8
    4ba0:	9f 92       	push	r9
    4ba2:	af 92       	push	r10
    4ba4:	bf 92       	push	r11
    4ba6:	cf 92       	push	r12
    4ba8:	df 92       	push	r13
    4baa:	ef 92       	push	r14
    4bac:	ff 92       	push	r15
    4bae:	0f 93       	push	r16
    4bb0:	1f 93       	push	r17
    4bb2:	cf 93       	push	r28
    4bb4:	df 93       	push	r29
    4bb6:	ec 01       	movw	r28, r24
    4bb8:	96 2e       	mov	r9, r22
    4bba:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    4bbc:	bb 24       	eor	r11, r11
    4bbe:	b3 94       	inc	r11
    4bc0:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    4bc2:	82 2e       	mov	r8, r18
    4bc4:	81 94       	neg	r8
    4bc6:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    4bc8:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4bca:	74 2e       	mov	r7, r20
    4bcc:	72 1a       	sub	r7, r18
    4bce:	e4 2e       	mov	r14, r20
    4bd0:	f1 2c       	mov	r15, r1
    4bd2:	67 01       	movw	r12, r14
    4bd4:	c2 0e       	add	r12, r18
    4bd6:	d1 1c       	adc	r13, r1
    4bd8:	87 2d       	mov	r24, r7
    4bda:	99 27       	eor	r25, r25
    4bdc:	87 fd       	sbrc	r24, 7
    4bde:	90 95       	com	r25
    4be0:	c8 16       	cp	r12, r24
    4be2:	d9 06       	cpc	r13, r25
    4be4:	44 f0       	brlt	.+16     	; 0x4bf6 <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    4be6:	20 2f       	mov	r18, r16
    4be8:	47 2d       	mov	r20, r7
    4bea:	69 2d       	mov	r22, r9
    4bec:	ce 01       	movw	r24, r28
    4bee:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>
    4bf2:	73 94       	inc	r7
    4bf4:	f1 cf       	rjmp	.-30     	; 0x4bd8 <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4bf6:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    4bf8:	71 16       	cp	r7, r17
    4bfa:	0c f0       	brlt	.+2      	; 0x4bfe <fillcircle+0x68>
    4bfc:	4c c0       	rjmp	.+152    	; 0x4c96 <fillcircle+0x100>
	{
		if (f >= 0) 
    4bfe:	b7 fc       	sbrc	r11, 7
    4c00:	04 c0       	rjmp	.+8      	; 0x4c0a <fillcircle+0x74>
		{
			y--;
    4c02:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    4c04:	83 94       	inc	r8
    4c06:	83 94       	inc	r8
			f += ddF_y;
    4c08:	b8 0c       	add	r11, r8
    4c0a:	73 94       	inc	r7
    4c0c:	87 2d       	mov	r24, r7
    4c0e:	88 0f       	add	r24, r24
    4c10:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    4c12:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    4c14:	6a 2c       	mov	r6, r10
    4c16:	61 1a       	sub	r6, r17
    4c18:	67 01       	movw	r12, r14
    4c1a:	c1 0e       	add	r12, r17
    4c1c:	d1 1c       	adc	r13, r1
    4c1e:	17 fd       	sbrc	r17, 7
    4c20:	da 94       	dec	r13
    4c22:	47 2c       	mov	r4, r7
    4c24:	49 0c       	add	r4, r9
    4c26:	59 2c       	mov	r5, r9
    4c28:	57 18       	sub	r5, r7
    4c2a:	86 2d       	mov	r24, r6
    4c2c:	99 27       	eor	r25, r25
    4c2e:	87 fd       	sbrc	r24, 7
    4c30:	90 95       	com	r25
    4c32:	c8 16       	cp	r12, r24
    4c34:	d9 06       	cpc	r13, r25
    4c36:	74 f0       	brlt	.+28     	; 0x4c54 <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    4c38:	20 2f       	mov	r18, r16
    4c3a:	46 2d       	mov	r20, r6
    4c3c:	64 2d       	mov	r22, r4
    4c3e:	ce 01       	movw	r24, r28
    4c40:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>
			setpixel(buff, x0-x, i, color);
    4c44:	20 2f       	mov	r18, r16
    4c46:	46 2d       	mov	r20, r6
    4c48:	65 2d       	mov	r22, r5
    4c4a:	ce 01       	movw	r24, r28
    4c4c:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>
    4c50:	63 94       	inc	r6
    4c52:	eb cf       	rjmp	.-42     	; 0x4c2a <fillcircle+0x94>
    4c54:	6a 2c       	mov	r6, r10
    4c56:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4c58:	67 01       	movw	r12, r14
    4c5a:	c7 0c       	add	r12, r7
    4c5c:	d1 1c       	adc	r13, r1
    4c5e:	77 fc       	sbrc	r7, 7
    4c60:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    4c62:	41 2e       	mov	r4, r17
    4c64:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    4c66:	59 2c       	mov	r5, r9
    4c68:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4c6a:	86 2d       	mov	r24, r6
    4c6c:	99 27       	eor	r25, r25
    4c6e:	87 fd       	sbrc	r24, 7
    4c70:	90 95       	com	r25
    4c72:	c8 16       	cp	r12, r24
    4c74:	d9 06       	cpc	r13, r25
    4c76:	0c f4       	brge	.+2      	; 0x4c7a <fillcircle+0xe4>
    4c78:	bf cf       	rjmp	.-130    	; 0x4bf8 <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    4c7a:	20 2f       	mov	r18, r16
    4c7c:	46 2d       	mov	r20, r6
    4c7e:	64 2d       	mov	r22, r4
    4c80:	ce 01       	movw	r24, r28
    4c82:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>
			setpixel(buff, x0-y, i, color);
    4c86:	20 2f       	mov	r18, r16
    4c88:	46 2d       	mov	r20, r6
    4c8a:	65 2d       	mov	r22, r5
    4c8c:	ce 01       	movw	r24, r28
    4c8e:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>
    4c92:	63 94       	inc	r6
    4c94:	ea cf       	rjmp	.-44     	; 0x4c6a <fillcircle+0xd4>
		}    
	}
}
    4c96:	df 91       	pop	r29
    4c98:	cf 91       	pop	r28
    4c9a:	1f 91       	pop	r17
    4c9c:	0f 91       	pop	r16
    4c9e:	ff 90       	pop	r15
    4ca0:	ef 90       	pop	r14
    4ca2:	df 90       	pop	r13
    4ca4:	cf 90       	pop	r12
    4ca6:	bf 90       	pop	r11
    4ca8:	af 90       	pop	r10
    4caa:	9f 90       	pop	r9
    4cac:	8f 90       	pop	r8
    4cae:	7f 90       	pop	r7
    4cb0:	6f 90       	pop	r6
    4cb2:	5f 90       	pop	r5
    4cb4:	4f 90       	pop	r4
    4cb6:	08 95       	ret

00004cb8 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    4cb8:	88 0f       	add	r24, r24
    4cba:	99 1f       	adc	r25, r25
    4cbc:	88 5f       	subi	r24, 0xF8	; 248
    4cbe:	91 4f       	sbci	r25, 0xF1	; 241
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	85 91       	lpm	r24, Z+
    4cc4:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    4cc6:	0c 94 36 44 	jmp	0x886c	; 0x886c <pgm_mugui_lcd_puts>

00004cca <gLCDprint_Menu_P>:
    4cca:	0c 94 36 44 	jmp	0x886c	; 0x886c <pgm_mugui_lcd_puts>

00004cce <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    4cce:	80 e0       	ldi	r24, 0x00	; 0
    4cd0:	91 e0       	ldi	r25, 0x01	; 1
    4cd2:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    4cd6:	23 e0       	ldi	r18, 0x03	; 3
    4cd8:	30 e0       	ldi	r19, 0x00	; 0
    4cda:	49 e2       	ldi	r20, 0x29	; 41
    4cdc:	50 e0       	ldi	r21, 0x00	; 0
    4cde:	63 e7       	ldi	r22, 0x73	; 115
    4ce0:	71 e0       	ldi	r23, 0x01	; 1
    4ce2:	89 e7       	ldi	r24, 0x79	; 121
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    4cea:	27 e1       	ldi	r18, 0x17	; 23
    4cec:	30 e0       	ldi	r19, 0x00	; 0
    4cee:	48 e1       	ldi	r20, 0x18	; 24
    4cf0:	50 e0       	ldi	r21, 0x00	; 0
    4cf2:	63 e7       	ldi	r22, 0x73	; 115
    4cf4:	71 e0       	ldi	r23, 0x01	; 1
    4cf6:	8a e7       	ldi	r24, 0x7A	; 122
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    4cfe:	80 91 20 05 	lds	r24, 0x0520
    4d02:	83 ff       	sbrs	r24, 3
    4d04:	13 c0       	rjmp	.+38     	; 0x4d2c <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    4d06:	2b e2       	ldi	r18, 0x2B	; 43
    4d08:	30 e0       	ldi	r19, 0x00	; 0
    4d0a:	4c e0       	ldi	r20, 0x0C	; 12
    4d0c:	50 e0       	ldi	r21, 0x00	; 0
    4d0e:	63 e7       	ldi	r22, 0x73	; 115
    4d10:	71 e0       	ldi	r23, 0x01	; 1
    4d12:	86 e8       	ldi	r24, 0x86	; 134
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    4d1a:	2b e2       	ldi	r18, 0x2B	; 43
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	40 e5       	ldi	r20, 0x50	; 80
    4d20:	50 e0       	ldi	r21, 0x00	; 0
    4d22:	63 e7       	ldi	r22, 0x73	; 115
    4d24:	71 e0       	ldi	r23, 0x01	; 1
    4d26:	86 e7       	ldi	r24, 0x76	; 118
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	41 c0       	rjmp	.+130    	; 0x4dae <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)				// No signal
    4d2c:	80 91 20 05 	lds	r24, 0x0520
    4d30:	81 ff       	sbrs	r24, 1
    4d32:	13 c0       	rjmp	.+38     	; 0x4d5a <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    4d34:	2b e2       	ldi	r18, 0x2B	; 43
    4d36:	30 e0       	ldi	r19, 0x00	; 0
    4d38:	4c e1       	ldi	r20, 0x1C	; 28
    4d3a:	50 e0       	ldi	r21, 0x00	; 0
    4d3c:	63 e7       	ldi	r22, 0x73	; 115
    4d3e:	71 e0       	ldi	r23, 0x01	; 1
    4d40:	8b e4       	ldi	r24, 0x4B	; 75
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    4d48:	2b e2       	ldi	r18, 0x2B	; 43
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	46 e3       	ldi	r20, 0x36	; 54
    4d4e:	50 e0       	ldi	r21, 0x00	; 0
    4d50:	63 e7       	ldi	r22, 0x73	; 115
    4d52:	71 e0       	ldi	r23, 0x01	; 1
    4d54:	8c e4       	ldi	r24, 0x4C	; 76
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	2a c0       	rjmp	.+84     	; 0x4dae <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)			// Throttle high
    4d5a:	80 91 20 05 	lds	r24, 0x0520
    4d5e:	80 ff       	sbrs	r24, 0
    4d60:	13 c0       	rjmp	.+38     	; 0x4d88 <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    4d62:	2b e2       	ldi	r18, 0x2B	; 43
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	4a e0       	ldi	r20, 0x0A	; 10
    4d68:	50 e0       	ldi	r21, 0x00	; 0
    4d6a:	63 e7       	ldi	r22, 0x73	; 115
    4d6c:	71 e0       	ldi	r23, 0x01	; 1
    4d6e:	89 e6       	ldi	r24, 0x69	; 105
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    4d76:	2b e2       	ldi	r18, 0x2B	; 43
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	41 e5       	ldi	r20, 0x51	; 81
    4d7c:	50 e0       	ldi	r21, 0x00	; 0
    4d7e:	63 e7       	ldi	r22, 0x73	; 115
    4d80:	71 e0       	ldi	r23, 0x01	; 1
    4d82:	87 e3       	ldi	r24, 0x37	; 55
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	13 c0       	rjmp	.+38     	; 0x4dae <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4d88:	80 91 20 05 	lds	r24, 0x0520
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4d8c:	2b e2       	ldi	r18, 0x2B	; 43
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4d90:	82 ff       	sbrs	r24, 2
    4d92:	07 c0       	rjmp	.+14     	; 0x4da2 <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4d94:	44 e1       	ldi	r20, 0x14	; 20
    4d96:	50 e0       	ldi	r21, 0x00	; 0
    4d98:	63 e7       	ldi	r22, 0x73	; 115
    4d9a:	71 e0       	ldi	r23, 0x01	; 1
    4d9c:	8b e8       	ldi	r24, 0x8B	; 139
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	06 c0       	rjmp	.+12     	; 0x4dae <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    4da2:	4c e1       	ldi	r20, 0x1C	; 28
    4da4:	50 e0       	ldi	r21, 0x00	; 0
    4da6:	63 e7       	ldi	r22, 0x73	; 115
    4da8:	71 e0       	ldi	r23, 0x01	; 1
    4daa:	8a e8       	ldi	r24, 0x8A	; 138
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
	}

	write_buffer(buffer);
    4db2:	80 e0       	ldi	r24, 0x00	; 0
    4db4:	91 e0       	ldi	r25, 0x01	; 1
    4db6:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <write_buffer>

00004dba <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    4dba:	cf 93       	push	r28
    4dbc:	df 93       	push	r29
    4dbe:	cd b7       	in	r28, 0x3d	; 61
    4dc0:	de b7       	in	r29, 0x3e	; 62
    4dc2:	2c 97       	sbiw	r28, 0x0c	; 12
    4dc4:	0f b6       	in	r0, 0x3f	; 63
    4dc6:	f8 94       	cli
    4dc8:	de bf       	out	0x3e, r29	; 62
    4dca:	0f be       	out	0x3f, r0	; 63
    4dcc:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    4dce:	26 e0       	ldi	r18, 0x06	; 6
    4dd0:	ae 01       	movw	r20, r28
    4dd2:	4f 5f       	subi	r20, 0xFF	; 255
    4dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    4dd6:	63 e4       	ldi	r22, 0x43	; 67
    4dd8:	80 ed       	ldi	r24, 0xD0	; 208
    4dda:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    4dde:	89 81       	ldd	r24, Y+1	; 0x01
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	98 2f       	mov	r25, r24
    4de4:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    4de6:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    4de8:	82 0f       	add	r24, r18
    4dea:	91 1d       	adc	r25, r1
    4dec:	34 e0       	ldi	r19, 0x04	; 4
    4dee:	95 95       	asr	r25
    4df0:	87 95       	ror	r24
    4df2:	3a 95       	dec	r19
    4df4:	e1 f7       	brne	.-8      	; 0x4dee <get_raw_gyros+0x34>
    4df6:	9a 87       	std	Y+10, r25	; 0x0a
    4df8:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    4dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	98 2f       	mov	r25, r24
    4e00:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    4e02:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    4e04:	82 0f       	add	r24, r18
    4e06:	91 1d       	adc	r25, r1
    4e08:	54 e0       	ldi	r21, 0x04	; 4
    4e0a:	95 95       	asr	r25
    4e0c:	87 95       	ror	r24
    4e0e:	5a 95       	dec	r21
    4e10:	e1 f7       	brne	.-8      	; 0x4e0a <get_raw_gyros+0x50>
    4e12:	98 87       	std	Y+8, r25	; 0x08
    4e14:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    4e16:	8d 81       	ldd	r24, Y+5	; 0x05
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	98 2f       	mov	r25, r24
    4e1c:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    4e1e:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    4e20:	82 0f       	add	r24, r18
    4e22:	91 1d       	adc	r25, r1
    4e24:	74 e0       	ldi	r23, 0x04	; 4
    4e26:	95 95       	asr	r25
    4e28:	87 95       	ror	r24
    4e2a:	7a 95       	dec	r23
    4e2c:	e1 f7       	brne	.-8      	; 0x4e26 <get_raw_gyros+0x6c>
    4e2e:	9c 87       	std	Y+12, r25	; 0x0c
    4e30:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    4e32:	20 91 49 06 	lds	r18, 0x0649
    4e36:	a3 e8       	ldi	r26, 0x83	; 131
    4e38:	b5 e0       	ldi	r27, 0x05	; 5
    4e3a:	43 e0       	ldi	r20, 0x03	; 3
    4e3c:	24 02       	muls	r18, r20
    4e3e:	90 01       	movw	r18, r0
    4e40:	11 24       	eor	r1, r1
    4e42:	80 e0       	ldi	r24, 0x00	; 0
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	22 53       	subi	r18, 0x32	; 50
    4e48:	37 4e       	sbci	r19, 0xE7	; 231
    4e4a:	f9 01       	movw	r30, r18
    4e4c:	e8 0f       	add	r30, r24
    4e4e:	f9 1f       	adc	r31, r25
    4e50:	e4 91       	lpm	r30, Z
    4e52:	ee 0f       	add	r30, r30
    4e54:	ff 0b       	sbc	r31, r31
    4e56:	41 e0       	ldi	r20, 0x01	; 1
    4e58:	50 e0       	ldi	r21, 0x00	; 0
    4e5a:	4c 0f       	add	r20, r28
    4e5c:	5d 1f       	adc	r21, r29
    4e5e:	e4 0f       	add	r30, r20
    4e60:	f5 1f       	adc	r31, r21
    4e62:	46 81       	ldd	r20, Z+6	; 0x06
    4e64:	57 81       	ldd	r21, Z+7	; 0x07
    4e66:	4d 93       	st	X+, r20
    4e68:	5d 93       	st	X+, r21
    4e6a:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    4e6c:	83 30       	cpi	r24, 0x03	; 3
    4e6e:	91 05       	cpc	r25, r1
    4e70:	61 f7       	brne	.-40     	; 0x4e4a <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    4e72:	2c 96       	adiw	r28, 0x0c	; 12
    4e74:	0f b6       	in	r0, 0x3f	; 63
    4e76:	f8 94       	cli
    4e78:	de bf       	out	0x3e, r29	; 62
    4e7a:	0f be       	out	0x3f, r0	; 63
    4e7c:	cd bf       	out	0x3d, r28	; 61
    4e7e:	df 91       	pop	r29
    4e80:	cf 91       	pop	r28
    4e82:	08 95       	ret

00004e84 <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    4e84:	1f 93       	push	r17
    4e86:	cf 93       	push	r28
    4e88:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    4e8a:	0e 94 dd 26 	call	0x4dba	; 0x4dba <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4e8e:	20 91 49 06 	lds	r18, 0x0649
    4e92:	c7 eb       	ldi	r28, 0xB7	; 183
    4e94:	d7 e0       	ldi	r29, 0x07	; 7
    4e96:	a3 e8       	ldi	r26, 0x83	; 131
    4e98:	b5 e0       	ldi	r27, 0x05	; 5
    4e9a:	83 e0       	ldi	r24, 0x03	; 3
    4e9c:	28 02       	muls	r18, r24
    4e9e:	90 01       	movw	r18, r0
    4ea0:	11 24       	eor	r1, r1
    4ea2:	80 e0       	ldi	r24, 0x00	; 0
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	24 54       	subi	r18, 0x44	; 68
    4ea8:	37 4e       	sbci	r19, 0xE7	; 231
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4eaa:	69 91       	ld	r22, Y+
    4eac:	79 91       	ld	r23, Y+
    4eae:	f9 01       	movw	r30, r18
    4eb0:	e8 0f       	add	r30, r24
    4eb2:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4eb4:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4eb6:	4d 91       	ld	r20, X+
    4eb8:	5c 91       	ld	r21, X
    4eba:	11 97       	sbiw	r26, 0x01	; 1
    4ebc:	46 1b       	sub	r20, r22
    4ebe:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4ec0:	14 03       	mulsu	r17, r20
    4ec2:	b0 01       	movw	r22, r0
    4ec4:	15 9f       	mul	r17, r21
    4ec6:	70 0d       	add	r23, r0
    4ec8:	11 24       	eor	r1, r1
    4eca:	6d 93       	st	X+, r22
    4ecc:	7d 93       	st	X+, r23
    4ece:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    4ed0:	83 30       	cpi	r24, 0x03	; 3
    4ed2:	91 05       	cpc	r25, r1
    4ed4:	51 f7       	brne	.-44     	; 0x4eaa <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    4ed6:	df 91       	pop	r29
    4ed8:	cf 91       	pop	r28
    4eda:	1f 91       	pop	r17
    4edc:	08 95       	ret

00004ede <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    4ede:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    4ee0:	86 e0       	ldi	r24, 0x06	; 6
    4ee2:	e7 eb       	ldi	r30, 0xB7	; 183
    4ee4:	f7 e0       	ldi	r31, 0x07	; 7
    4ee6:	df 01       	movw	r26, r30
    4ee8:	1d 92       	st	X+, r1
    4eea:	8a 95       	dec	r24
    4eec:	e9 f7       	brne	.-6      	; 0x4ee8 <CalibrateGyrosFast+0xa>
    4eee:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    4ef0:	0e 94 dd 26 	call	0x4dba	; 0x4dba <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    4ef4:	40 91 b7 07 	lds	r20, 0x07B7
    4ef8:	50 91 b8 07 	lds	r21, 0x07B8
    4efc:	80 91 83 05 	lds	r24, 0x0583
    4f00:	90 91 84 05 	lds	r25, 0x0584
    4f04:	48 0f       	add	r20, r24
    4f06:	59 1f       	adc	r21, r25
    4f08:	50 93 b8 07 	sts	0x07B8, r21
    4f0c:	40 93 b7 07 	sts	0x07B7, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    4f10:	20 91 b9 07 	lds	r18, 0x07B9
    4f14:	30 91 ba 07 	lds	r19, 0x07BA
    4f18:	80 91 85 05 	lds	r24, 0x0585
    4f1c:	90 91 86 05 	lds	r25, 0x0586
    4f20:	28 0f       	add	r18, r24
    4f22:	39 1f       	adc	r19, r25
    4f24:	30 93 ba 07 	sts	0x07BA, r19
    4f28:	20 93 b9 07 	sts	0x07B9, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    4f2c:	80 91 bb 07 	lds	r24, 0x07BB
    4f30:	90 91 bc 07 	lds	r25, 0x07BC
    4f34:	60 91 87 05 	lds	r22, 0x0587
    4f38:	70 91 88 05 	lds	r23, 0x0588
    4f3c:	86 0f       	add	r24, r22
    4f3e:	97 1f       	adc	r25, r23
    4f40:	90 93 bc 07 	sts	0x07BC, r25
    4f44:	80 93 bb 07 	sts	0x07BB, r24
    4f48:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    4f4a:	91 f6       	brne	.-92     	; 0x4ef0 <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    4f4c:	e5 e0       	ldi	r30, 0x05	; 5
    4f4e:	55 95       	asr	r21
    4f50:	47 95       	ror	r20
    4f52:	ea 95       	dec	r30
    4f54:	e1 f7       	brne	.-8      	; 0x4f4e <CalibrateGyrosFast+0x70>
    4f56:	50 93 b8 07 	sts	0x07B8, r21
    4f5a:	40 93 b7 07 	sts	0x07B7, r20
    4f5e:	f5 e0       	ldi	r31, 0x05	; 5
    4f60:	35 95       	asr	r19
    4f62:	27 95       	ror	r18
    4f64:	fa 95       	dec	r31
    4f66:	e1 f7       	brne	.-8      	; 0x4f60 <CalibrateGyrosFast+0x82>
    4f68:	30 93 ba 07 	sts	0x07BA, r19
    4f6c:	20 93 b9 07 	sts	0x07B9, r18
    4f70:	a5 e0       	ldi	r26, 0x05	; 5
    4f72:	95 95       	asr	r25
    4f74:	87 95       	ror	r24
    4f76:	aa 95       	dec	r26
    4f78:	e1 f7       	brne	.-8      	; 0x4f72 <CalibrateGyrosFast+0x94>
    4f7a:	90 93 bc 07 	sts	0x07BC, r25
    4f7e:	80 93 bb 07 	sts	0x07BB, r24
	}

	Save_Config_to_EEPROM();
}
    4f82:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    4f84:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>

00004f88 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    4f88:	2f 92       	push	r2
    4f8a:	3f 92       	push	r3
    4f8c:	4f 92       	push	r4
    4f8e:	5f 92       	push	r5
    4f90:	6f 92       	push	r6
    4f92:	7f 92       	push	r7
    4f94:	8f 92       	push	r8
    4f96:	9f 92       	push	r9
    4f98:	af 92       	push	r10
    4f9a:	bf 92       	push	r11
    4f9c:	cf 92       	push	r12
    4f9e:	df 92       	push	r13
    4fa0:	ef 92       	push	r14
    4fa2:	ff 92       	push	r15
    4fa4:	0f 93       	push	r16
    4fa6:	1f 93       	push	r17
    4fa8:	cf 93       	push	r28
    4faa:	df 93       	push	r29
    4fac:	cd b7       	in	r28, 0x3d	; 61
    4fae:	de b7       	in	r29, 0x3e	; 62
    4fb0:	65 97       	sbiw	r28, 0x15	; 21
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	f8 94       	cli
    4fb6:	de bf       	out	0x3e, r29	; 62
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    4fbc:	1e 86       	std	Y+14, r1	; 0x0e
    4fbe:	1d 86       	std	Y+13, r1	; 0x0d
    4fc0:	18 8a       	std	Y+16, r1	; 0x10
    4fc2:	1f 86       	std	Y+15, r1	; 0x0f
    4fc4:	1a 8a       	std	Y+18, r1	; 0x12
    4fc6:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    4fc8:	0e 94 6f 27 	call	0x4ede	; 0x4ede <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    4fcc:	60 91 b7 07 	lds	r22, 0x07B7
    4fd0:	70 91 b8 07 	lds	r23, 0x07B8
    4fd4:	88 27       	eor	r24, r24
    4fd6:	77 fd       	sbrc	r23, 7
    4fd8:	80 95       	com	r24
    4fda:	98 2f       	mov	r25, r24
    4fdc:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    4fe0:	69 83       	std	Y+1, r22	; 0x01
    4fe2:	7a 83       	std	Y+2, r23	; 0x02
    4fe4:	8b 83       	std	Y+3, r24	; 0x03
    4fe6:	9c 83       	std	Y+4, r25	; 0x04
    4fe8:	60 91 b9 07 	lds	r22, 0x07B9
    4fec:	70 91 ba 07 	lds	r23, 0x07BA
    4ff0:	88 27       	eor	r24, r24
    4ff2:	77 fd       	sbrc	r23, 7
    4ff4:	80 95       	com	r24
    4ff6:	98 2f       	mov	r25, r24
    4ff8:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    4ffc:	6d 83       	std	Y+5, r22	; 0x05
    4ffe:	7e 83       	std	Y+6, r23	; 0x06
    5000:	8f 83       	std	Y+7, r24	; 0x07
    5002:	98 87       	std	Y+8, r25	; 0x08
    5004:	60 91 bb 07 	lds	r22, 0x07BB
    5008:	70 91 bc 07 	lds	r23, 0x07BC
    500c:	88 27       	eor	r24, r24
    500e:	77 fd       	sbrc	r23, 7
    5010:	80 95       	com	r24
    5012:	98 2f       	mov	r25, r24
    5014:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    5018:	69 87       	std	Y+9, r22	; 0x09
    501a:	7a 87       	std	Y+10, r23	; 0x0a
    501c:	8b 87       	std	Y+11, r24	; 0x0b
    501e:	9c 87       	std	Y+12, r25	; 0x0c
    5020:	1d 8a       	std	Y+21, r1	; 0x15
    5022:	1b 8a       	std	Y+19, r1	; 0x13
    5024:	e1 2c       	mov	r14, r1
    5026:	f1 2c       	mov	r15, r1
    5028:	00 e0       	ldi	r16, 0x00	; 0
    502a:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    502c:	80 91 b2 00 	lds	r24, 0x00B2
    5030:	9d 89       	ldd	r25, Y+21	; 0x15
    5032:	89 1b       	sub	r24, r25
    5034:	e8 0e       	add	r14, r24
    5036:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    5038:	e0 91 b2 00 	lds	r30, 0x00B2
    503c:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    503e:	fc e4       	ldi	r31, 0x4C	; 76
    5040:	ef 16       	cp	r14, r31
    5042:	ff 06       	cpc	r15, r31
    5044:	28 f0       	brcs	.+10     	; 0x5050 <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    5046:	8b 89       	ldd	r24, Y+19	; 0x13
    5048:	8f 5f       	subi	r24, 0xFF	; 255
    504a:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    504c:	e1 2c       	mov	r14, r1
    504e:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    5050:	0e 94 dd 26 	call	0x4dba	; 0x4dba <get_raw_gyros>
    5054:	fe 01       	movw	r30, r28
    5056:	31 96       	adiw	r30, 0x01	; 1
    5058:	6f 01       	movw	r12, r30
    505a:	b3 e8       	ldi	r27, 0x83	; 131
    505c:	2b 2e       	mov	r2, r27
    505e:	b5 e0       	ldi	r27, 0x05	; 5
    5060:	3b 2e       	mov	r3, r27
    5062:	ce 01       	movw	r24, r28
    5064:	0d 96       	adiw	r24, 0x0d	; 13
    5066:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    5068:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    506a:	f1 01       	movw	r30, r2
    506c:	81 90       	ld	r8, Z+
    506e:	91 90       	ld	r9, Z+
    5070:	1f 01       	movw	r2, r30
    5072:	20 e0       	ldi	r18, 0x00	; 0
    5074:	30 ec       	ldi	r19, 0xC0	; 192
    5076:	49 e7       	ldi	r20, 0x79	; 121
    5078:	54 e4       	ldi	r21, 0x44	; 68
    507a:	f6 01       	movw	r30, r12
    507c:	60 81       	ld	r22, Z
    507e:	71 81       	ldd	r23, Z+1	; 0x01
    5080:	82 81       	ldd	r24, Z+2	; 0x02
    5082:	93 81       	ldd	r25, Z+3	; 0x03
    5084:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    5088:	2b 01       	movw	r4, r22
    508a:	3c 01       	movw	r6, r24
    508c:	b4 01       	movw	r22, r8
    508e:	88 27       	eor	r24, r24
    5090:	77 fd       	sbrc	r23, 7
    5092:	80 95       	com	r24
    5094:	98 2f       	mov	r25, r24
    5096:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    509a:	9b 01       	movw	r18, r22
    509c:	ac 01       	movw	r20, r24
    509e:	c3 01       	movw	r24, r6
    50a0:	b2 01       	movw	r22, r4
    50a2:	0e 94 f5 4c 	call	0x99ea	; 0x99ea <__addsf3>
    50a6:	20 e0       	ldi	r18, 0x00	; 0
    50a8:	30 e0       	ldi	r19, 0x00	; 0
    50aa:	4a e7       	ldi	r20, 0x7A	; 122
    50ac:	54 e4       	ldi	r21, 0x44	; 68
    50ae:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <__divsf3>
    50b2:	f6 01       	movw	r30, r12
    50b4:	60 83       	st	Z, r22
    50b6:	71 83       	std	Z+1, r23	; 0x01
    50b8:	82 83       	std	Z+2, r24	; 0x02
    50ba:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    50bc:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
    50c0:	f5 01       	movw	r30, r10
    50c2:	20 81       	ld	r18, Z
    50c4:	31 81       	ldd	r19, Z+1	; 0x01
    50c6:	26 17       	cp	r18, r22
    50c8:	37 07       	cpc	r19, r23
    50ca:	11 f0       	breq	.+4      	; 0x50d0 <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    50cc:	00 e0       	ldi	r16, 0x00	; 0
    50ce:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    50d0:	f5 01       	movw	r30, r10
    50d2:	61 93       	st	Z+, r22
    50d4:	71 93       	st	Z+, r23
    50d6:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    50d8:	fc 89       	ldd	r31, Y+20	; 0x14
    50da:	ff 5f       	subi	r31, 0xFF	; 255
    50dc:	fc 8b       	std	Y+20, r31	; 0x14
    50de:	84 e0       	ldi	r24, 0x04	; 4
    50e0:	c8 0e       	add	r12, r24
    50e2:	d1 1c       	adc	r13, r1
    50e4:	f3 30       	cpi	r31, 0x03	; 3
    50e6:	09 f6       	brne	.-126    	; 0x506a <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    50e8:	0f 5f       	subi	r16, 0xFF	; 255
    50ea:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    50ec:	09 3c       	cpi	r16, 0xC9	; 201
    50ee:	11 05       	cpc	r17, r1
    50f0:	20 f0       	brcs	.+8      	; 0x50fa <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    50f2:	0e 94 6f 27 	call	0x4ede	; 0x4ede <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    50f6:	81 e0       	ldi	r24, 0x01	; 1
    50f8:	01 c0       	rjmp	.+2      	; 0x50fc <CalibrateGyrosSlow+0x174>
    50fa:	80 e0       	ldi	r24, 0x00	; 0
    50fc:	e7 e8       	ldi	r30, 0x87	; 135
    50fe:	f3 e1       	ldi	r31, 0x13	; 19
    5100:	31 97       	sbiw	r30, 0x01	; 1
    5102:	f1 f7       	brne	.-4      	; 0x5100 <CalibrateGyrosSlow+0x178>
    5104:	00 c0       	rjmp	.+0      	; 0x5106 <CalibrateGyrosSlow+0x17e>
    5106:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    5108:	81 11       	cpse	r24, r1
    510a:	04 c0       	rjmp	.+8      	; 0x5114 <CalibrateGyrosSlow+0x18c>
    510c:	fb 89       	ldd	r31, Y+19	; 0x13
    510e:	f6 30       	cpi	r31, 0x06	; 6
    5110:	08 f4       	brcc	.+2      	; 0x5114 <CalibrateGyrosSlow+0x18c>
    5112:	8c cf       	rjmp	.-232    	; 0x502c <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    5114:	65 96       	adiw	r28, 0x15	; 21
    5116:	0f b6       	in	r0, 0x3f	; 63
    5118:	f8 94       	cli
    511a:	de bf       	out	0x3e, r29	; 62
    511c:	0f be       	out	0x3f, r0	; 63
    511e:	cd bf       	out	0x3d, r28	; 61
    5120:	df 91       	pop	r29
    5122:	cf 91       	pop	r28
    5124:	1f 91       	pop	r17
    5126:	0f 91       	pop	r16
    5128:	ff 90       	pop	r15
    512a:	ef 90       	pop	r14
    512c:	df 90       	pop	r13
    512e:	cf 90       	pop	r12
    5130:	bf 90       	pop	r11
    5132:	af 90       	pop	r10
    5134:	9f 90       	pop	r9
    5136:	8f 90       	pop	r8
    5138:	7f 90       	pop	r7
    513a:	6f 90       	pop	r6
    513c:	5f 90       	pop	r5
    513e:	4f 90       	pop	r4
    5140:	3f 90       	pop	r3
    5142:	2f 90       	pop	r2
    5144:	08 95       	ret

00005146 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    5146:	41 e0       	ldi	r20, 0x01	; 1
    5148:	6b e6       	ldi	r22, 0x6B	; 107
    514a:	80 ed       	ldi	r24, 0xD0	; 208
    514c:	0e 94 ba 28 	call	0x5174	; 0x5174 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    5150:	40 e4       	ldi	r20, 0x40	; 64
    5152:	67 e3       	ldi	r22, 0x37	; 55
    5154:	80 ed       	ldi	r24, 0xD0	; 208
    5156:	0e 94 ba 28 	call	0x5174	; 0x5174 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    515a:	46 e0       	ldi	r20, 0x06	; 6
    515c:	80 91 4e 06 	lds	r24, 0x064E
    5160:	48 1b       	sub	r20, r24
    5162:	6a e1       	ldi	r22, 0x1A	; 26
    5164:	80 ed       	ldi	r24, 0xD0	; 208
    5166:	0e 94 ba 28 	call	0x5174	; 0x5174 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    516a:	48 e1       	ldi	r20, 0x18	; 24
    516c:	6b e1       	ldi	r22, 0x1B	; 27
    516e:	80 ed       	ldi	r24, 0xD0	; 208
    5170:	0c 94 ba 28 	jmp	0x5174	; 0x5174 <writeI2Cbyte>

00005174 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    5174:	cf 93       	push	r28
    5176:	df 93       	push	r29
    5178:	00 d0       	rcall	.+0      	; 0x517a <writeI2Cbyte+0x6>
    517a:	cd b7       	in	r28, 0x3d	; 61
    517c:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    517e:	4a 83       	std	Y+2, r20	; 0x02
    5180:	69 83       	std	Y+1, r22	; 0x01
    5182:	0e 94 c8 4b 	call	0x9790	; 0x9790 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    5186:	69 81       	ldd	r22, Y+1	; 0x01
    5188:	86 2f       	mov	r24, r22
    518a:	0e 94 18 4c 	call	0x9830	; 0x9830 <i2c_write>
    i2c_write(value); 								// Write byte
    518e:	4a 81       	ldd	r20, Y+2	; 0x02
    5190:	84 2f       	mov	r24, r20
    5192:	0e 94 18 4c 	call	0x9830	; 0x9830 <i2c_write>
    i2c_stop();
}
    5196:	0f 90       	pop	r0
    5198:	0f 90       	pop	r0
    519a:	df 91       	pop	r29
    519c:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    519e:	0c 94 09 4c 	jmp	0x9812	; 0x9812 <i2c_stop>

000051a2 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    51a2:	cf 92       	push	r12
    51a4:	df 92       	push	r13
    51a6:	ef 92       	push	r14
    51a8:	ff 92       	push	r15
    51aa:	0f 93       	push	r16
    51ac:	1f 93       	push	r17
    51ae:	cf 93       	push	r28
    51b0:	df 93       	push	r29
    51b2:	00 d0       	rcall	.+0      	; 0x51b4 <readI2CbyteArray+0x12>
    51b4:	1f 92       	push	r1
    51b6:	cd b7       	in	r28, 0x3d	; 61
    51b8:	de b7       	in	r29, 0x3e	; 62
    51ba:	18 2f       	mov	r17, r24
    51bc:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    51be:	4a 83       	std	Y+2, r20	; 0x02
    51c0:	5b 83       	std	Y+3, r21	; 0x03
    51c2:	69 83       	std	Y+1, r22	; 0x01
    51c4:	0e 94 c8 4b 	call	0x9790	; 0x9790 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    51c8:	69 81       	ldd	r22, Y+1	; 0x01
    51ca:	86 2f       	mov	r24, r22
    51cc:	0e 94 18 4c 	call	0x9830	; 0x9830 <i2c_write>
    i2c_rep_start(address+I2C_READ);
    51d0:	81 e0       	ldi	r24, 0x01	; 1
    51d2:	81 0f       	add	r24, r17
    51d4:	0e 94 07 4c 	call	0x980e	; 0x980e <i2c_rep_start>
    51d8:	4a 81       	ldd	r20, Y+2	; 0x02
    51da:	c4 2e       	mov	r12, r20
    51dc:	5b 81       	ldd	r21, Y+3	; 0x03
    51de:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    51e0:	00 e0       	ldi	r16, 0x00	; 0
    51e2:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    51e4:	f1 2c       	mov	r15, r1
    51e6:	0e 15       	cp	r16, r14
    51e8:	1f 05       	cpc	r17, r15
    51ea:	84 f4       	brge	.+32     	; 0x520c <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    51ec:	0f 5f       	subi	r16, 0xFF	; 255
    51ee:	1f 4f       	sbci	r17, 0xFF	; 255
    51f0:	0e 15       	cp	r16, r14
    51f2:	1f 05       	cpc	r17, r15
    51f4:	19 f0       	breq	.+6      	; 0x51fc <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    51f6:	0e 94 38 4c 	call	0x9870	; 0x9870 <i2c_readAck>
    51fa:	02 c0       	rjmp	.+4      	; 0x5200 <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    51fc:	0e 94 51 4c 	call	0x98a2	; 0x98a2 <i2c_readNak>
    5200:	f6 01       	movw	r30, r12
    5202:	80 83       	st	Z, r24
    5204:	ff ef       	ldi	r31, 0xFF	; 255
    5206:	cf 1a       	sub	r12, r31
    5208:	df 0a       	sbc	r13, r31
    520a:	ed cf       	rjmp	.-38     	; 0x51e6 <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    520c:	0f 90       	pop	r0
    520e:	0f 90       	pop	r0
    5210:	0f 90       	pop	r0
    5212:	df 91       	pop	r29
    5214:	cf 91       	pop	r28
    5216:	1f 91       	pop	r17
    5218:	0f 91       	pop	r16
    521a:	ff 90       	pop	r15
    521c:	ef 90       	pop	r14
    521e:	df 90       	pop	r13
    5220:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    5222:	0c 94 09 4c 	jmp	0x9812	; 0x9812 <i2c_stop>

00005226 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    5226:	4f 92       	push	r4
    5228:	5f 92       	push	r5
    522a:	6f 92       	push	r6
    522c:	7f 92       	push	r7
    522e:	8f 92       	push	r8
    5230:	9f 92       	push	r9
    5232:	af 92       	push	r10
    5234:	bf 92       	push	r11
    5236:	cf 92       	push	r12
    5238:	df 92       	push	r13
    523a:	ef 92       	push	r14
    523c:	ff 92       	push	r15
    523e:	cf 93       	push	r28
    5240:	df 93       	push	r29
    5242:	cd b7       	in	r28, 0x3d	; 61
    5244:	de b7       	in	r29, 0x3e	; 62
    5246:	28 97       	sbiw	r28, 0x08	; 8
    5248:	0f b6       	in	r0, 0x3f	; 63
    524a:	f8 94       	cli
    524c:	de bf       	out	0x3e, r29	; 62
    524e:	0f be       	out	0x3f, r0	; 63
    5250:	cd bf       	out	0x3d, r28	; 61
    5252:	6b 01       	movw	r12, r22
    5254:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    5256:	80 90 b9 05 	lds	r8, 0x05B9
    525a:	90 90 ba 05 	lds	r9, 0x05BA
    525e:	a0 90 bb 05 	lds	r10, 0x05BB
    5262:	b0 90 bc 05 	lds	r11, 0x05BC
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    5266:	9b 01       	movw	r18, r22
    5268:	ac 01       	movw	r20, r24
    526a:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	30 e0       	ldi	r19, 0x00	; 0
    5272:	40 e0       	ldi	r20, 0x00	; 0
    5274:	5f e3       	ldi	r21, 0x3F	; 63
    5276:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    527a:	9b 01       	movw	r18, r22
    527c:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    527e:	60 e0       	ldi	r22, 0x00	; 0
    5280:	70 e0       	ldi	r23, 0x00	; 0
    5282:	80 e8       	ldi	r24, 0x80	; 128
    5284:	9f e3       	ldi	r25, 0x3F	; 63
    5286:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <__subsf3>
    528a:	69 83       	std	Y+1, r22	; 0x01
    528c:	7a 83       	std	Y+2, r23	; 0x02
    528e:	8b 83       	std	Y+3, r24	; 0x03
    5290:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    5292:	40 90 bd 05 	lds	r4, 0x05BD
    5296:	50 90 be 05 	lds	r5, 0x05BE
    529a:	60 90 bf 05 	lds	r6, 0x05BF
    529e:	70 90 c0 05 	lds	r7, 0x05C0
    52a2:	9b 01       	movw	r18, r22
    52a4:	ac 01       	movw	r20, r24
    52a6:	c5 01       	movw	r24, r10
    52a8:	b4 01       	movw	r22, r8
    52aa:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    52ae:	6d 83       	std	Y+5, r22	; 0x05
    52b0:	7e 83       	std	Y+6, r23	; 0x06
    52b2:	8f 83       	std	Y+7, r24	; 0x07
    52b4:	98 87       	std	Y+8, r25	; 0x08
    52b6:	a7 01       	movw	r20, r14
    52b8:	96 01       	movw	r18, r12
    52ba:	c3 01       	movw	r24, r6
    52bc:	b2 01       	movw	r22, r4
    52be:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    52c2:	9b 01       	movw	r18, r22
    52c4:	ac 01       	movw	r20, r24
    52c6:	6d 81       	ldd	r22, Y+5	; 0x05
    52c8:	7e 81       	ldd	r23, Y+6	; 0x06
    52ca:	8f 81       	ldd	r24, Y+7	; 0x07
    52cc:	98 85       	ldd	r25, Y+8	; 0x08
    52ce:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <__subsf3>
    52d2:	60 93 a5 05 	sts	0x05A5, r22
    52d6:	70 93 a6 05 	sts	0x05A6, r23
    52da:	80 93 a7 05 	sts	0x05A7, r24
    52de:	90 93 a8 05 	sts	0x05A8, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    52e2:	a7 01       	movw	r20, r14
    52e4:	96 01       	movw	r18, r12
    52e6:	c5 01       	movw	r24, r10
    52e8:	b4 01       	movw	r22, r8
    52ea:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    52ee:	6b 01       	movw	r12, r22
    52f0:	7c 01       	movw	r14, r24
    52f2:	29 81       	ldd	r18, Y+1	; 0x01
    52f4:	3a 81       	ldd	r19, Y+2	; 0x02
    52f6:	4b 81       	ldd	r20, Y+3	; 0x03
    52f8:	5c 81       	ldd	r21, Y+4	; 0x04
    52fa:	c3 01       	movw	r24, r6
    52fc:	b2 01       	movw	r22, r4
    52fe:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    5302:	9b 01       	movw	r18, r22
    5304:	ac 01       	movw	r20, r24
    5306:	c7 01       	movw	r24, r14
    5308:	b6 01       	movw	r22, r12
    530a:	0e 94 f5 4c 	call	0x99ea	; 0x99ea <__addsf3>
    530e:	60 93 89 05 	sts	0x0589, r22
    5312:	70 93 8a 05 	sts	0x058A, r23
    5316:	80 93 8b 05 	sts	0x058B, r24
    531a:	90 93 8c 05 	sts	0x058C, r25
}
    531e:	28 96       	adiw	r28, 0x08	; 8
    5320:	0f b6       	in	r0, 0x3f	; 63
    5322:	f8 94       	cli
    5324:	de bf       	out	0x3e, r29	; 62
    5326:	0f be       	out	0x3f, r0	; 63
    5328:	cd bf       	out	0x3d, r28	; 61
    532a:	df 91       	pop	r29
    532c:	cf 91       	pop	r28
    532e:	ff 90       	pop	r15
    5330:	ef 90       	pop	r14
    5332:	df 90       	pop	r13
    5334:	cf 90       	pop	r12
    5336:	bf 90       	pop	r11
    5338:	af 90       	pop	r10
    533a:	9f 90       	pop	r9
    533c:	8f 90       	pop	r8
    533e:	7f 90       	pop	r7
    5340:	6f 90       	pop	r6
    5342:	5f 90       	pop	r5
    5344:	4f 90       	pop	r4
    5346:	08 95       	ret

00005348 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    5348:	cf 92       	push	r12
    534a:	df 92       	push	r13
    534c:	ef 92       	push	r14
    534e:	ff 92       	push	r15
    5350:	69 01       	movw	r12, r18
    5352:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    5354:	25 ef       	ldi	r18, 0xF5	; 245
    5356:	31 ea       	ldi	r19, 0xA1	; 161
    5358:	4b e8       	ldi	r20, 0x8B	; 139
    535a:	5c e3       	ldi	r21, 0x3C	; 60
    535c:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    5360:	a7 01       	movw	r20, r14
    5362:	96 01       	movw	r18, r12
    5364:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    5368:	6b 01       	movw	r12, r22
    536a:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    536c:	26 ea       	ldi	r18, 0xA6	; 166
    536e:	3a e0       	ldi	r19, 0x0A	; 10
    5370:	46 e8       	ldi	r20, 0x86	; 134
    5372:	5e e3       	ldi	r21, 0x3E	; 62
    5374:	0e 94 a8 4e 	call	0x9d50	; 0x9d50 <__gesf2>
    5378:	18 16       	cp	r1, r24
    537a:	9c f0       	brlt	.+38     	; 0x53a2 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    537c:	26 ea       	ldi	r18, 0xA6	; 166
    537e:	3a e0       	ldi	r19, 0x0A	; 10
    5380:	46 e8       	ldi	r20, 0x86	; 134
    5382:	5e eb       	ldi	r21, 0xBE	; 190
    5384:	c7 01       	movw	r24, r14
    5386:	b6 01       	movw	r22, r12
    5388:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <__cmpsf2>
    538c:	87 ff       	sbrs	r24, 7
    538e:	11 c0       	rjmp	.+34     	; 0x53b2 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    5390:	86 ea       	ldi	r24, 0xA6	; 166
    5392:	c8 2e       	mov	r12, r24
    5394:	8a e0       	ldi	r24, 0x0A	; 10
    5396:	d8 2e       	mov	r13, r24
    5398:	86 e8       	ldi	r24, 0x86	; 134
    539a:	e8 2e       	mov	r14, r24
    539c:	8e eb       	ldi	r24, 0xBE	; 190
    539e:	f8 2e       	mov	r15, r24
    53a0:	08 c0       	rjmp	.+16     	; 0x53b2 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    53a2:	96 ea       	ldi	r25, 0xA6	; 166
    53a4:	c9 2e       	mov	r12, r25
    53a6:	9a e0       	ldi	r25, 0x0A	; 10
    53a8:	d9 2e       	mov	r13, r25
    53aa:	96 e8       	ldi	r25, 0x86	; 134
    53ac:	e9 2e       	mov	r14, r25
    53ae:	9e e3       	ldi	r25, 0x3E	; 62
    53b0:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    53b2:	c7 01       	movw	r24, r14
    53b4:	b6 01       	movw	r22, r12
    53b6:	ff 90       	pop	r15
    53b8:	ef 90       	pop	r14
    53ba:	df 90       	pop	r13
    53bc:	cf 90       	pop	r12
    53be:	08 95       	ret

000053c0 <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    53c0:	8f 92       	push	r8
    53c2:	9f 92       	push	r9
    53c4:	af 92       	push	r10
    53c6:	bf 92       	push	r11
    53c8:	cf 92       	push	r12
    53ca:	df 92       	push	r13
    53cc:	ef 92       	push	r14
    53ce:	ff 92       	push	r15
    53d0:	0f 93       	push	r16
    53d2:	1f 93       	push	r17
    53d4:	6b 01       	movw	r12, r22
    53d6:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    53d8:	60 91 99 05 	lds	r22, 0x0599
    53dc:	70 91 9a 05 	lds	r23, 0x059A
    53e0:	80 91 9b 05 	lds	r24, 0x059B
    53e4:	90 91 9c 05 	lds	r25, 0x059C
    53e8:	a7 01       	movw	r20, r14
    53ea:	96 01       	movw	r18, r12
    53ec:	0e 94 a4 29 	call	0x5348	; 0x5348 <thetascale>
	VectorA = VectorY;
    53f0:	00 91 26 05 	lds	r16, 0x0526
    53f4:	10 91 27 05 	lds	r17, 0x0527
    53f8:	20 91 28 05 	lds	r18, 0x0528
    53fc:	30 91 29 05 	lds	r19, 0x0529
    5400:	00 93 b9 05 	sts	0x05B9, r16
    5404:	10 93 ba 05 	sts	0x05BA, r17
    5408:	20 93 bb 05 	sts	0x05BB, r18
    540c:	30 93 bc 05 	sts	0x05BC, r19
	VectorB = VectorZ;
    5410:	00 91 00 05 	lds	r16, 0x0500
    5414:	10 91 01 05 	lds	r17, 0x0501
    5418:	20 91 02 05 	lds	r18, 0x0502
    541c:	30 91 03 05 	lds	r19, 0x0503
    5420:	00 93 bd 05 	sts	0x05BD, r16
    5424:	10 93 be 05 	sts	0x05BE, r17
    5428:	20 93 bf 05 	sts	0x05BF, r18
    542c:	30 93 c0 05 	sts	0x05C0, r19
	RotateVector(theta);
    5430:	0e 94 13 29 	call	0x5226	; 0x5226 <RotateVector>
	VectorY = VectorNewA;
    5434:	80 91 a5 05 	lds	r24, 0x05A5
    5438:	90 91 a6 05 	lds	r25, 0x05A6
    543c:	a0 91 a7 05 	lds	r26, 0x05A7
    5440:	b0 91 a8 05 	lds	r27, 0x05A8
    5444:	80 93 26 05 	sts	0x0526, r24
    5448:	90 93 27 05 	sts	0x0527, r25
    544c:	a0 93 28 05 	sts	0x0528, r26
    5450:	b0 93 29 05 	sts	0x0529, r27
	VectorZ = VectorNewB;
    5454:	80 90 89 05 	lds	r8, 0x0589
    5458:	90 90 8a 05 	lds	r9, 0x058A
    545c:	a0 90 8b 05 	lds	r10, 0x058B
    5460:	b0 90 8c 05 	lds	r11, 0x058C
    5464:	80 92 00 05 	sts	0x0500, r8
    5468:	90 92 01 05 	sts	0x0501, r9
    546c:	a0 92 02 05 	sts	0x0502, r10
    5470:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    5474:	60 91 9d 05 	lds	r22, 0x059D
    5478:	70 91 9e 05 	lds	r23, 0x059E
    547c:	80 91 9f 05 	lds	r24, 0x059F
    5480:	90 91 a0 05 	lds	r25, 0x05A0
    5484:	a7 01       	movw	r20, r14
    5486:	96 01       	movw	r18, r12
    5488:	0e 94 a4 29 	call	0x5348	; 0x5348 <thetascale>
	VectorA = VectorX;
    548c:	00 91 2a 05 	lds	r16, 0x052A
    5490:	10 91 2b 05 	lds	r17, 0x052B
    5494:	20 91 2c 05 	lds	r18, 0x052C
    5498:	30 91 2d 05 	lds	r19, 0x052D
    549c:	00 93 b9 05 	sts	0x05B9, r16
    54a0:	10 93 ba 05 	sts	0x05BA, r17
    54a4:	20 93 bb 05 	sts	0x05BB, r18
    54a8:	30 93 bc 05 	sts	0x05BC, r19
	VectorB = VectorZ;
    54ac:	80 92 bd 05 	sts	0x05BD, r8
    54b0:	90 92 be 05 	sts	0x05BE, r9
    54b4:	a0 92 bf 05 	sts	0x05BF, r10
    54b8:	b0 92 c0 05 	sts	0x05C0, r11
	RotateVector(theta);
    54bc:	0e 94 13 29 	call	0x5226	; 0x5226 <RotateVector>
	VectorX = VectorNewA;
    54c0:	80 90 a5 05 	lds	r8, 0x05A5
    54c4:	90 90 a6 05 	lds	r9, 0x05A6
    54c8:	a0 90 a7 05 	lds	r10, 0x05A7
    54cc:	b0 90 a8 05 	lds	r11, 0x05A8
    54d0:	80 92 2a 05 	sts	0x052A, r8
    54d4:	90 92 2b 05 	sts	0x052B, r9
    54d8:	a0 92 2c 05 	sts	0x052C, r10
    54dc:	b0 92 2d 05 	sts	0x052D, r11
	VectorZ = VectorNewB;
    54e0:	80 91 89 05 	lds	r24, 0x0589
    54e4:	90 91 8a 05 	lds	r25, 0x058A
    54e8:	a0 91 8b 05 	lds	r26, 0x058B
    54ec:	b0 91 8c 05 	lds	r27, 0x058C
    54f0:	80 93 00 05 	sts	0x0500, r24
    54f4:	90 93 01 05 	sts	0x0501, r25
    54f8:	a0 93 02 05 	sts	0x0502, r26
    54fc:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    5500:	60 91 87 05 	lds	r22, 0x0587
    5504:	70 91 88 05 	lds	r23, 0x0588
    5508:	88 27       	eor	r24, r24
    550a:	77 fd       	sbrc	r23, 7
    550c:	80 95       	com	r24
    550e:	98 2f       	mov	r25, r24
    5510:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    5514:	a7 01       	movw	r20, r14
    5516:	96 01       	movw	r18, r12
    5518:	0e 94 a4 29 	call	0x5348	; 0x5348 <thetascale>
	VectorA = VectorX;
    551c:	80 92 b9 05 	sts	0x05B9, r8
    5520:	90 92 ba 05 	sts	0x05BA, r9
    5524:	a0 92 bb 05 	sts	0x05BB, r10
    5528:	b0 92 bc 05 	sts	0x05BC, r11
	VectorB = VectorY;
    552c:	c0 90 26 05 	lds	r12, 0x0526
    5530:	d0 90 27 05 	lds	r13, 0x0527
    5534:	e0 90 28 05 	lds	r14, 0x0528
    5538:	f0 90 29 05 	lds	r15, 0x0529
    553c:	c0 92 bd 05 	sts	0x05BD, r12
    5540:	d0 92 be 05 	sts	0x05BE, r13
    5544:	e0 92 bf 05 	sts	0x05BF, r14
    5548:	f0 92 c0 05 	sts	0x05C0, r15
	RotateVector(theta);
    554c:	0e 94 13 29 	call	0x5226	; 0x5226 <RotateVector>
	VectorX = VectorNewA;
    5550:	80 91 a5 05 	lds	r24, 0x05A5
    5554:	90 91 a6 05 	lds	r25, 0x05A6
    5558:	a0 91 a7 05 	lds	r26, 0x05A7
    555c:	b0 91 a8 05 	lds	r27, 0x05A8
    5560:	80 93 2a 05 	sts	0x052A, r24
    5564:	90 93 2b 05 	sts	0x052B, r25
    5568:	a0 93 2c 05 	sts	0x052C, r26
    556c:	b0 93 2d 05 	sts	0x052D, r27
	VectorY = VectorNewB;
    5570:	80 91 89 05 	lds	r24, 0x0589
    5574:	90 91 8a 05 	lds	r25, 0x058A
    5578:	a0 91 8b 05 	lds	r26, 0x058B
    557c:	b0 91 8c 05 	lds	r27, 0x058C
    5580:	80 93 26 05 	sts	0x0526, r24
    5584:	90 93 27 05 	sts	0x0527, r25
    5588:	a0 93 28 05 	sts	0x0528, r26
    558c:	b0 93 29 05 	sts	0x0529, r27
}
    5590:	1f 91       	pop	r17
    5592:	0f 91       	pop	r16
    5594:	ff 90       	pop	r15
    5596:	ef 90       	pop	r14
    5598:	df 90       	pop	r13
    559a:	cf 90       	pop	r12
    559c:	bf 90       	pop	r11
    559e:	af 90       	pop	r10
    55a0:	9f 90       	pop	r9
    55a2:	8f 90       	pop	r8
    55a4:	08 95       	ret

000055a6 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    55a6:	cf 92       	push	r12
    55a8:	df 92       	push	r13
    55aa:	ef 92       	push	r14
    55ac:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    55ae:	20 e0       	ldi	r18, 0x00	; 0
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	44 eb       	ldi	r20, 0xB4	; 180
    55b4:	52 e4       	ldi	r21, 0x42	; 66
    55b6:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    55ba:	6b 01       	movw	r12, r22
    55bc:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    55be:	20 e0       	ldi	r18, 0x00	; 0
    55c0:	30 e0       	ldi	r19, 0x00	; 0
    55c2:	a9 01       	movw	r20, r18
    55c4:	60 91 00 05 	lds	r22, 0x0500
    55c8:	70 91 01 05 	lds	r23, 0x0501
    55cc:	80 91 02 05 	lds	r24, 0x0502
    55d0:	90 91 03 05 	lds	r25, 0x0503
    55d4:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <__cmpsf2>
    55d8:	87 ff       	sbrs	r24, 7
    55da:	18 c0       	rjmp	.+48     	; 0x560c <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    55dc:	20 e0       	ldi	r18, 0x00	; 0
    55de:	30 e0       	ldi	r19, 0x00	; 0
    55e0:	a9 01       	movw	r20, r18
    55e2:	c7 01       	movw	r24, r14
    55e4:	b6 01       	movw	r22, r12
    55e6:	0e 94 a8 4e 	call	0x9d50	; 0x9d50 <__gesf2>
		{
			temp = 180 - temp;
    55ea:	a7 01       	movw	r20, r14
    55ec:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    55ee:	18 16       	cp	r1, r24
    55f0:	2c f4       	brge	.+10     	; 0x55fc <ext2+0x56>
		{
			temp = 180 - temp;
    55f2:	60 e0       	ldi	r22, 0x00	; 0
    55f4:	70 e0       	ldi	r23, 0x00	; 0
    55f6:	84 e3       	ldi	r24, 0x34	; 52
    55f8:	93 e4       	ldi	r25, 0x43	; 67
    55fa:	04 c0       	rjmp	.+8      	; 0x5604 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    55fc:	60 e0       	ldi	r22, 0x00	; 0
    55fe:	70 e0       	ldi	r23, 0x00	; 0
    5600:	84 e3       	ldi	r24, 0x34	; 52
    5602:	93 ec       	ldi	r25, 0xC3	; 195
    5604:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <__subsf3>
    5608:	6b 01       	movw	r12, r22
    560a:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    560c:	c7 01       	movw	r24, r14
    560e:	b6 01       	movw	r22, r12
    5610:	ff 90       	pop	r15
    5612:	ef 90       	pop	r14
    5614:	df 90       	pop	r13
    5616:	cf 90       	pop	r12
    5618:	08 95       	ret

0000561a <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    561a:	60 91 2a 05 	lds	r22, 0x052A
    561e:	70 91 2b 05 	lds	r23, 0x052B
    5622:	80 91 2c 05 	lds	r24, 0x052C
    5626:	90 91 2d 05 	lds	r25, 0x052D
    562a:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <ext2>
    562e:	60 93 b5 05 	sts	0x05B5, r22
    5632:	70 93 b6 05 	sts	0x05B6, r23
    5636:	80 93 b7 05 	sts	0x05B7, r24
    563a:	90 93 b8 05 	sts	0x05B8, r25
	EulerAnglePitch = ext2(VectorY);
    563e:	60 91 26 05 	lds	r22, 0x0526
    5642:	70 91 27 05 	lds	r23, 0x0527
    5646:	80 91 28 05 	lds	r24, 0x0528
    564a:	90 91 29 05 	lds	r25, 0x0529
    564e:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <ext2>
    5652:	60 93 8d 05 	sts	0x058D, r22
    5656:	70 93 8e 05 	sts	0x058E, r23
    565a:	80 93 8f 05 	sts	0x058F, r24
    565e:	90 93 90 05 	sts	0x0590, r25
    5662:	08 95       	ret

00005664 <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    5664:	4f 92       	push	r4
    5666:	5f 92       	push	r5
    5668:	6f 92       	push	r6
    566a:	7f 92       	push	r7
    566c:	8f 92       	push	r8
    566e:	9f 92       	push	r9
    5670:	af 92       	push	r10
    5672:	bf 92       	push	r11
    5674:	cf 92       	push	r12
    5676:	df 92       	push	r13
    5678:	ef 92       	push	r14
    567a:	ff 92       	push	r15
    567c:	0f 93       	push	r16
    567e:	1f 93       	push	r17
    5680:	cf 93       	push	r28
    5682:	df 93       	push	r29
    5684:	cd b7       	in	r28, 0x3d	; 61
    5686:	de b7       	in	r29, 0x3e	; 62
    5688:	60 97       	sbiw	r28, 0x10	; 16
    568a:	0f b6       	in	r0, 0x3f	; 63
    568c:	f8 94       	cli
    568e:	de bf       	out	0x3e, r29	; 62
    5690:	0f be       	out	0x3f, r0	; 63
    5692:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    5694:	0e 94 f6 4d 	call	0x9bec	; 0x9bec <__floatunsisf>
    5698:	69 83       	std	Y+1, r22	; 0x01
    569a:	7a 83       	std	Y+2, r23	; 0x02
    569c:	8b 83       	std	Y+3, r24	; 0x03
    569e:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    56a0:	20 e8       	ldi	r18, 0x80	; 128
    56a2:	36 e9       	ldi	r19, 0x96	; 150
    56a4:	48 e1       	ldi	r20, 0x18	; 24
    56a6:	5a e4       	ldi	r21, 0x4A	; 74
    56a8:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <__divsf3>
    56ac:	6d 87       	std	Y+13, r22	; 0x0d
    56ae:	7e 87       	std	Y+14, r23	; 0x0e
    56b0:	8f 87       	std	Y+15, r24	; 0x0f
    56b2:	98 8b       	std	Y+16, r25	; 0x10
	//************************************************************
	// Acc LPF
	//************************************************************	

	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    56b4:	80 91 eb 05 	lds	r24, 0x05EB
    56b8:	60 91 4f 06 	lds	r22, 0x064F
    56bc:	82 30       	cpi	r24, 0x02	; 2
    56be:	39 f0       	breq	.+14     	; 0x56ce <imu_update+0x6a>
	{
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    56c0:	84 e0       	ldi	r24, 0x04	; 4
    56c2:	68 02       	muls	r22, r24
    56c4:	b0 01       	movw	r22, r0
    56c6:	11 24       	eor	r1, r1
    56c8:	60 50       	subi	r22, 0x00	; 0
    56ca:	77 4e       	sbci	r23, 0xE7	; 231
    56cc:	06 c0       	rjmp	.+12     	; 0x56da <imu_update+0x76>
	}
	else
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
    56ce:	94 e0       	ldi	r25, 0x04	; 4
    56d0:	69 02       	muls	r22, r25
    56d2:	b0 01       	movw	r22, r0
    56d4:	11 24       	eor	r1, r1
    56d6:	60 52       	subi	r22, 0x20	; 32
    56d8:	77 4e       	sbci	r23, 0xE7	; 231
    56da:	44 e0       	ldi	r20, 0x04	; 4
    56dc:	50 e0       	ldi	r21, 0x00	; 0
    56de:	ce 01       	movw	r24, r28
    56e0:	01 96       	adiw	r24, 0x01	; 1
    56e2:	0e 94 af 4f 	call	0x9f5e	; 0x9f5e <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    56e6:	50 90 4f 06 	lds	r5, 0x064F
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    56ea:	c9 80       	ldd	r12, Y+1	; 0x01
    56ec:	da 80       	ldd	r13, Y+2	; 0x02
    56ee:	eb 80       	ldd	r14, Y+3	; 0x03
    56f0:	fc 80       	ldd	r15, Y+4	; 0x04
    56f2:	2e e3       	ldi	r18, 0x3E	; 62
    56f4:	62 2e       	mov	r6, r18
    56f6:	25 e0       	ldi	r18, 0x05	; 5
    56f8:	72 2e       	mov	r7, r18
    56fa:	09 ea       	ldi	r16, 0xA9	; 169
    56fc:	15 e0       	ldi	r17, 0x05	; 5
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    56fe:	d3 01       	movw	r26, r6
    5700:	6d 91       	ld	r22, X+
    5702:	7d 91       	ld	r23, X+
    5704:	3d 01       	movw	r6, r26
    5706:	88 27       	eor	r24, r24
    5708:	77 fd       	sbrc	r23, 7
    570a:	80 95       	com	r24
    570c:	98 2f       	mov	r25, r24
    570e:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    5712:	4b 01       	movw	r8, r22
    5714:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    5716:	b7 e0       	ldi	r27, 0x07	; 7
    5718:	5b 16       	cp	r5, r27
    571a:	f1 f0       	breq	.+60     	; 0x5758 <imu_update+0xf4>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    571c:	20 e0       	ldi	r18, 0x00	; 0
    571e:	30 e0       	ldi	r19, 0x00	; 0
    5720:	40 e8       	ldi	r20, 0x80	; 128
    5722:	5f e3       	ldi	r21, 0x3F	; 63
    5724:	c7 01       	movw	r24, r14
    5726:	b6 01       	movw	r22, r12
    5728:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <__subsf3>
    572c:	f8 01       	movw	r30, r16
    572e:	20 81       	ld	r18, Z
    5730:	31 81       	ldd	r19, Z+1	; 0x01
    5732:	42 81       	ldd	r20, Z+2	; 0x02
    5734:	53 81       	ldd	r21, Z+3	; 0x03
    5736:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    573a:	a5 01       	movw	r20, r10
    573c:	94 01       	movw	r18, r8
    573e:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <__subsf3>
    5742:	a7 01       	movw	r20, r14
    5744:	96 01       	movw	r18, r12
    5746:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <__divsf3>
    574a:	d8 01       	movw	r26, r16
    574c:	6d 93       	st	X+, r22
    574e:	7d 93       	st	X+, r23
    5750:	8d 93       	st	X+, r24
    5752:	9c 93       	st	X, r25
    5754:	13 97       	sbiw	r26, 0x03	; 3
    5756:	09 c0       	rjmp	.+18     	; 0x576a <imu_update+0x106>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    5758:	b7 fa       	bst	r11, 7
    575a:	b0 94       	com	r11
    575c:	b7 f8       	bld	r11, 7
    575e:	b0 94       	com	r11
    5760:	f8 01       	movw	r30, r16
    5762:	80 82       	st	Z, r8
    5764:	91 82       	std	Z+1, r9	; 0x01
    5766:	a2 82       	std	Z+2, r10	; 0x02
    5768:	b3 82       	std	Z+3, r11	; 0x03
    576a:	0c 5f       	subi	r16, 0xFC	; 252
    576c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    576e:	f4 e4       	ldi	r31, 0x44	; 68
    5770:	6f 16       	cp	r6, r31
    5772:	f5 e0       	ldi	r31, 0x05	; 5
    5774:	7f 06       	cpc	r7, r31
    5776:	19 f6       	brne	.-122    	; 0x56fe <imu_update+0x9a>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    5778:	23 ec       	ldi	r18, 0xC3	; 195
    577a:	35 ef       	ldi	r19, 0xF5	; 245
    577c:	48 e2       	ldi	r20, 0x28	; 40
    577e:	5f e3       	ldi	r21, 0x3F	; 63
    5780:	60 91 a9 05 	lds	r22, 0x05A9
    5784:	70 91 aa 05 	lds	r23, 0x05AA
    5788:	80 91 ab 05 	lds	r24, 0x05AB
    578c:	90 91 ac 05 	lds	r25, 0x05AC
    5790:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    5794:	6d 83       	std	Y+5, r22	; 0x05
    5796:	7e 83       	std	Y+6, r23	; 0x06
    5798:	8f 83       	std	Y+7, r24	; 0x07
    579a:	98 87       	std	Y+8, r25	; 0x08
    579c:	60 93 91 05 	sts	0x0591, r22
    57a0:	70 93 92 05 	sts	0x0592, r23
    57a4:	80 93 93 05 	sts	0x0593, r24
    57a8:	90 93 94 05 	sts	0x0594, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    57ac:	23 ec       	ldi	r18, 0xC3	; 195
    57ae:	35 ef       	ldi	r19, 0xF5	; 245
    57b0:	48 e2       	ldi	r20, 0x28	; 40
    57b2:	5f e3       	ldi	r21, 0x3F	; 63
    57b4:	60 91 ad 05 	lds	r22, 0x05AD
    57b8:	70 91 ae 05 	lds	r23, 0x05AE
    57bc:	80 91 af 05 	lds	r24, 0x05AF
    57c0:	90 91 b0 05 	lds	r25, 0x05B0
    57c4:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    57c8:	69 87       	std	Y+9, r22	; 0x09
    57ca:	7a 87       	std	Y+10, r23	; 0x0a
    57cc:	8b 87       	std	Y+11, r24	; 0x0b
    57ce:	9c 87       	std	Y+12, r25	; 0x0c
    57d0:	60 93 95 05 	sts	0x0595, r22
    57d4:	70 93 96 05 	sts	0x0596, r23
    57d8:	80 93 97 05 	sts	0x0597, r24
    57dc:	90 93 98 05 	sts	0x0598, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    57e0:	60 91 83 05 	lds	r22, 0x0583
    57e4:	70 91 84 05 	lds	r23, 0x0584
    57e8:	88 27       	eor	r24, r24
    57ea:	77 fd       	sbrc	r23, 7
    57ec:	80 95       	com	r24
    57ee:	98 2f       	mov	r25, r24
    57f0:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    57f4:	2b 01       	movw	r4, r22
    57f6:	3c 01       	movw	r6, r24
    57f8:	60 93 9d 05 	sts	0x059D, r22
    57fc:	70 93 9e 05 	sts	0x059E, r23
    5800:	80 93 9f 05 	sts	0x059F, r24
    5804:	90 93 a0 05 	sts	0x05A0, r25
	GyroPitchVC = gyroADC[PITCH];
    5808:	60 91 85 05 	lds	r22, 0x0585
    580c:	70 91 86 05 	lds	r23, 0x0586
    5810:	88 27       	eor	r24, r24
    5812:	77 fd       	sbrc	r23, 7
    5814:	80 95       	com	r24
    5816:	98 2f       	mov	r25, r24
    5818:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    581c:	6b 01       	movw	r12, r22
    581e:	7c 01       	movw	r14, r24
    5820:	60 93 99 05 	sts	0x0599, r22
    5824:	70 93 9a 05 	sts	0x059A, r23
    5828:	80 93 9b 05 	sts	0x059B, r24
    582c:	90 93 9c 05 	sts	0x059C, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    5830:	20 91 3e 05 	lds	r18, 0x053E
    5834:	30 91 3f 05 	lds	r19, 0x053F
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    5838:	40 91 40 05 	lds	r20, 0x0540
    583c:	50 91 41 05 	lds	r21, 0x0541
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    5840:	e0 91 42 05 	lds	r30, 0x0542
    5844:	f0 91 43 05 	lds	r31, 0x0543
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    5848:	44 9f       	mul	r20, r20
    584a:	40 01       	movw	r8, r0
    584c:	45 9f       	mul	r20, r21
    584e:	90 0c       	add	r9, r0
    5850:	90 0c       	add	r9, r0
    5852:	11 24       	eor	r1, r1
    5854:	b4 01       	movw	r22, r8
    5856:	88 27       	eor	r24, r24
    5858:	77 fd       	sbrc	r23, 7
    585a:	80 95       	com	r24
    585c:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    585e:	22 9f       	mul	r18, r18
    5860:	a0 01       	movw	r20, r0
    5862:	23 9f       	mul	r18, r19
    5864:	50 0d       	add	r21, r0
    5866:	50 0d       	add	r21, r0
    5868:	11 24       	eor	r1, r1
    586a:	8a 01       	movw	r16, r20
    586c:	22 27       	eor	r18, r18
    586e:	17 fd       	sbrc	r17, 7
    5870:	20 95       	com	r18
    5872:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    5874:	60 0f       	add	r22, r16
    5876:	71 1f       	adc	r23, r17
    5878:	82 1f       	adc	r24, r18
    587a:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    587c:	ee 9f       	mul	r30, r30
    587e:	90 01       	movw	r18, r0
    5880:	ef 9f       	mul	r30, r31
    5882:	30 0d       	add	r19, r0
    5884:	30 0d       	add	r19, r0
    5886:	11 24       	eor	r1, r1
    5888:	89 01       	movw	r16, r18
    588a:	22 27       	eor	r18, r18
    588c:	17 fd       	sbrc	r17, 7
    588e:	20 95       	com	r18
    5890:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    5892:	60 0f       	add	r22, r16
    5894:	71 1f       	adc	r23, r17
    5896:	82 1f       	adc	r24, r18
    5898:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    589a:	0e 94 f6 4d 	call	0x9bec	; 0x9bec <__floatunsisf>
    589e:	4b 01       	movw	r8, r22
    58a0:	5c 01       	movw	r10, r24
    58a2:	20 e0       	ldi	r18, 0x00	; 0
    58a4:	34 ef       	ldi	r19, 0xF4	; 244
    58a6:	48 e3       	ldi	r20, 0x38	; 56
    58a8:	56 e4       	ldi	r21, 0x46	; 70
    58aa:	0e 94 a8 4e 	call	0x9d50	; 0x9d50 <__gesf2>
    58ae:	18 16       	cp	r1, r24
    58b0:	0c f0       	brlt	.+2      	; 0x58b4 <imu_update+0x250>
    58b2:	6f c0       	rjmp	.+222    	; 0x5992 <imu_update+0x32e>
    58b4:	20 e0       	ldi	r18, 0x00	; 0
    58b6:	38 e4       	ldi	r19, 0x48	; 72
    58b8:	49 ea       	ldi	r20, 0xA9	; 169
    58ba:	56 e4       	ldi	r21, 0x46	; 70
    58bc:	c5 01       	movw	r24, r10
    58be:	b4 01       	movw	r22, r8
    58c0:	0e 94 59 4d 	call	0x9ab2	; 0x9ab2 <__cmpsf2>
    58c4:	87 ff       	sbrs	r24, 7
    58c6:	65 c0       	rjmp	.+202    	; 0x5992 <imu_update+0x32e>
    58c8:	20 e0       	ldi	r18, 0x00	; 0
    58ca:	30 e0       	ldi	r19, 0x00	; 0
    58cc:	40 e0       	ldi	r20, 0x00	; 0
    58ce:	5f e3       	ldi	r21, 0x3F	; 63
    58d0:	60 91 00 05 	lds	r22, 0x0500
    58d4:	70 91 01 05 	lds	r23, 0x0501
    58d8:	80 91 02 05 	lds	r24, 0x0502
    58dc:	90 91 03 05 	lds	r25, 0x0503
    58e0:	0e 94 a8 4e 	call	0x9d50	; 0x9d50 <__gesf2>
    58e4:	18 16       	cp	r1, r24
    58e6:	0c f0       	brlt	.+2      	; 0x58ea <imu_update+0x286>
    58e8:	54 c0       	rjmp	.+168    	; 0x5992 <imu_update+0x32e>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    58ea:	80 91 51 06 	lds	r24, 0x0651
    58ee:	6b e0       	ldi	r22, 0x0B	; 11
    58f0:	70 e0       	ldi	r23, 0x00	; 0
    58f2:	68 1b       	sub	r22, r24
    58f4:	71 09       	sbc	r23, r1
    58f6:	87 fd       	sbrc	r24, 7
    58f8:	73 95       	inc	r23
    58fa:	88 27       	eor	r24, r24
    58fc:	77 fd       	sbrc	r23, 7
    58fe:	80 95       	com	r24
    5900:	98 2f       	mov	r25, r24
    5902:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    5906:	4b 01       	movw	r8, r22
    5908:	5c 01       	movw	r10, r24
    590a:	2d 81       	ldd	r18, Y+5	; 0x05
    590c:	3e 81       	ldd	r19, Y+6	; 0x06
    590e:	4f 81       	ldd	r20, Y+7	; 0x07
    5910:	58 85       	ldd	r21, Y+8	; 0x08
    5912:	60 91 b5 05 	lds	r22, 0x05B5
    5916:	70 91 b6 05 	lds	r23, 0x05B6
    591a:	80 91 b7 05 	lds	r24, 0x05B7
    591e:	90 91 b8 05 	lds	r25, 0x05B8
    5922:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <__subsf3>
    5926:	a5 01       	movw	r20, r10
    5928:	94 01       	movw	r18, r8
    592a:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <__divsf3>
    592e:	9b 01       	movw	r18, r22
    5930:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    5932:	c3 01       	movw	r24, r6
    5934:	b2 01       	movw	r22, r4
    5936:	0e 94 f5 4c 	call	0x99ea	; 0x99ea <__addsf3>
    593a:	60 93 9d 05 	sts	0x059D, r22
    593e:	70 93 9e 05 	sts	0x059E, r23
    5942:	80 93 9f 05 	sts	0x059F, r24
    5946:	90 93 a0 05 	sts	0x05A0, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    594a:	29 85       	ldd	r18, Y+9	; 0x09
    594c:	3a 85       	ldd	r19, Y+10	; 0x0a
    594e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5950:	5c 85       	ldd	r21, Y+12	; 0x0c
    5952:	60 91 8d 05 	lds	r22, 0x058D
    5956:	70 91 8e 05 	lds	r23, 0x058E
    595a:	80 91 8f 05 	lds	r24, 0x058F
    595e:	90 91 90 05 	lds	r25, 0x0590
    5962:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <__subsf3>
    5966:	a5 01       	movw	r20, r10
    5968:	94 01       	movw	r18, r8
    596a:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <__divsf3>
    596e:	9b 01       	movw	r18, r22
    5970:	ac 01       	movw	r20, r24
    5972:	69 83       	std	Y+1, r22	; 0x01
    5974:	7a 83       	std	Y+2, r23	; 0x02
    5976:	8b 83       	std	Y+3, r24	; 0x03
    5978:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    597a:	c7 01       	movw	r24, r14
    597c:	b6 01       	movw	r22, r12
    597e:	0e 94 f5 4c 	call	0x99ea	; 0x99ea <__addsf3>
    5982:	60 93 99 05 	sts	0x0599, r22
    5986:	70 93 9a 05 	sts	0x059A, r23
    598a:	80 93 9b 05 	sts	0x059B, r24
    598e:	90 93 9c 05 	sts	0x059C, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    5992:	6d 85       	ldd	r22, Y+13	; 0x0d
    5994:	7e 85       	ldd	r23, Y+14	; 0x0e
    5996:	8f 85       	ldd	r24, Y+15	; 0x0f
    5998:	98 89       	ldd	r25, Y+16	; 0x10
    599a:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <Rotate3dVector>
	ExtractEulerAngles();
    599e:	0e 94 0d 2b 	call	0x561a	; 0x561a <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    59a2:	20 e0       	ldi	r18, 0x00	; 0
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	48 ec       	ldi	r20, 0xC8	; 200
    59a8:	52 ec       	ldi	r21, 0xC2	; 194
    59aa:	60 91 b5 05 	lds	r22, 0x05B5
    59ae:	70 91 b6 05 	lds	r23, 0x05B6
    59b2:	80 91 b7 05 	lds	r24, 0x05B7
    59b6:	90 91 b8 05 	lds	r25, 0x05B8
    59ba:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    59be:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
    59c2:	70 93 a2 05 	sts	0x05A2, r23
    59c6:	60 93 a1 05 	sts	0x05A1, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    59ca:	20 e0       	ldi	r18, 0x00	; 0
    59cc:	30 e0       	ldi	r19, 0x00	; 0
    59ce:	48 ec       	ldi	r20, 0xC8	; 200
    59d0:	52 ec       	ldi	r21, 0xC2	; 194
    59d2:	60 91 8d 05 	lds	r22, 0x058D
    59d6:	70 91 8e 05 	lds	r23, 0x058E
    59da:	80 91 8f 05 	lds	r24, 0x058F
    59de:	90 91 90 05 	lds	r25, 0x0590
    59e2:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    59e6:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
    59ea:	70 93 a4 05 	sts	0x05A4, r23
    59ee:	60 93 a3 05 	sts	0x05A3, r22
}
    59f2:	60 96       	adiw	r28, 0x10	; 16
    59f4:	0f b6       	in	r0, 0x3f	; 63
    59f6:	f8 94       	cli
    59f8:	de bf       	out	0x3e, r29	; 62
    59fa:	0f be       	out	0x3f, r0	; 63
    59fc:	cd bf       	out	0x3d, r28	; 61
    59fe:	df 91       	pop	r29
    5a00:	cf 91       	pop	r28
    5a02:	1f 91       	pop	r17
    5a04:	0f 91       	pop	r16
    5a06:	ff 90       	pop	r15
    5a08:	ef 90       	pop	r14
    5a0a:	df 90       	pop	r13
    5a0c:	cf 90       	pop	r12
    5a0e:	bf 90       	pop	r11
    5a10:	af 90       	pop	r10
    5a12:	9f 90       	pop	r9
    5a14:	8f 90       	pop	r8
    5a16:	7f 90       	pop	r7
    5a18:	6f 90       	pop	r6
    5a1a:	5f 90       	pop	r5
    5a1c:	4f 90       	pop	r4
    5a1e:	08 95       	ret

00005a20 <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    5a20:	10 92 2a 05 	sts	0x052A, r1
    5a24:	10 92 2b 05 	sts	0x052B, r1
    5a28:	10 92 2c 05 	sts	0x052C, r1
    5a2c:	10 92 2d 05 	sts	0x052D, r1
	VectorY = 0;
    5a30:	10 92 26 05 	sts	0x0526, r1
    5a34:	10 92 27 05 	sts	0x0527, r1
    5a38:	10 92 28 05 	sts	0x0528, r1
    5a3c:	10 92 29 05 	sts	0x0529, r1
	VectorZ = 1;
    5a40:	80 e0       	ldi	r24, 0x00	; 0
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	a0 e8       	ldi	r26, 0x80	; 128
    5a46:	bf e3       	ldi	r27, 0x3F	; 63
    5a48:	80 93 00 05 	sts	0x0500, r24
    5a4c:	90 93 01 05 	sts	0x0501, r25
    5a50:	a0 93 02 05 	sts	0x0502, r26
    5a54:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    5a58:	10 92 b9 05 	sts	0x05B9, r1
    5a5c:	10 92 ba 05 	sts	0x05BA, r1
    5a60:	10 92 bb 05 	sts	0x05BB, r1
    5a64:	10 92 bc 05 	sts	0x05BC, r1
	VectorB = 0;
    5a68:	10 92 bd 05 	sts	0x05BD, r1
    5a6c:	10 92 be 05 	sts	0x05BE, r1
    5a70:	10 92 bf 05 	sts	0x05BF, r1
    5a74:	10 92 c0 05 	sts	0x05C0, r1
	EulerAngleRoll = 0;
    5a78:	10 92 b5 05 	sts	0x05B5, r1
    5a7c:	10 92 b6 05 	sts	0x05B6, r1
    5a80:	10 92 b7 05 	sts	0x05B7, r1
    5a84:	10 92 b8 05 	sts	0x05B8, r1
	EulerAnglePitch = 0;
    5a88:	10 92 8d 05 	sts	0x058D, r1
    5a8c:	10 92 8e 05 	sts	0x058E, r1
    5a90:	10 92 8f 05 	sts	0x058F, r1
    5a94:	10 92 90 05 	sts	0x0590, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    5a98:	10 92 f6 07 	sts	0x07F6, r1
    5a9c:	10 92 f5 07 	sts	0x07F5, r1
	TCNT1 = 0;			// TCNT1 current time
    5aa0:	10 92 85 00 	sts	0x0085, r1
    5aa4:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    5aa8:	10 92 1b 05 	sts	0x051B, r1
    5aac:	10 92 1a 05 	sts	0x051A, r1
    5ab0:	08 95       	ret

00005ab2 <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    5ab2:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    5ab4:	80 e3       	ldi	r24, 0x30	; 48
    5ab6:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    5ab8:	8c ef       	ldi	r24, 0xFC	; 252
    5aba:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    5abc:	8a e0       	ldi	r24, 0x0A	; 10
    5abe:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    5ac0:	82 ef       	ldi	r24, 0xF2	; 242
    5ac2:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    5ac4:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    5ac6:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    5ac8:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    5aca:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    5acc:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    5ace:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    5ad0:	85 ef       	ldi	r24, 0xF5	; 245
    5ad2:	83 b9       	out	0x03, r24	; 3

	//***********************************************************
	// Spektrum receiver binding. Must be done immediately on power-up
	//***********************************************************
	// Bind as master if ONLY button 4 pressed
	if (BUTTON4 == 0)
    5ad4:	1c 99       	sbic	0x03, 4	; 3
    5ad6:	11 c0       	rjmp	.+34     	; 0x5afa <init+0x48>
	{
		PIND	= 0x0C;		// Release RX pull up
    5ad8:	8c e0       	ldi	r24, 0x0C	; 12
    5ada:	89 b9       	out	0x09, r24	; 9
    5adc:	2f e5       	ldi	r18, 0x5F	; 95
    5ade:	88 ed       	ldi	r24, 0xD8	; 216
    5ae0:	93 e0       	ldi	r25, 0x03	; 3
    5ae2:	21 50       	subi	r18, 0x01	; 1
    5ae4:	80 40       	sbci	r24, 0x00	; 0
    5ae6:	90 40       	sbci	r25, 0x00	; 0
    5ae8:	e1 f7       	brne	.-8      	; 0x5ae2 <init+0x30>
    5aea:	00 c0       	rjmp	.+0      	; 0x5aec <init+0x3a>
    5aec:	00 00       	nop
		_delay_ms(63);		// Pause while satellite wakes up
							// and pull-ups have time to rise.
							// Tweak until bind pulses about 68ms after power-up		
		DDRD	= 0xF3;		// Switch PD0 to output
    5aee:	83 ef       	ldi	r24, 0xF3	; 243
    5af0:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    5af2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <bind_master>
		DDRD	= 0xF2;		// Reset Port D directions		
    5af6:	82 ef       	ldi	r24, 0xF2	; 242
    5af8:	8a b9       	out	0x0a, r24	; 10
	}

	PIND	= 0x0D;			// Set PD pull-ups (now pull up RX as well)	
    5afa:	8d e0       	ldi	r24, 0x0D	; 13
    5afc:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    5afe:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    5b00:	85 e0       	ldi	r24, 0x05	; 5
    5b02:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    5b04:	80 91 6e 00 	lds	r24, 0x006E
    5b08:	81 60       	ori	r24, 0x01	; 1
    5b0a:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    5b0e:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    5b10:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    5b14:	80 91 81 00 	lds	r24, 0x0081
    5b18:	82 60       	ori	r24, 0x02	; 2
    5b1a:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    5b1e:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    5b22:	87 e0       	ldi	r24, 0x07	; 7
    5b24:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    5b28:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    5b2c:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    5b2e:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    5b32:	9a e0       	ldi	r25, 0x0A	; 10
    5b34:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    5b38:	9f e0       	ldi	r25, 0x0F	; 15
    5b3a:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    5b3c:	95 e1       	ldi	r25, 0x15	; 21
    5b3e:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    5b42:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    5b44:	10 92 f2 07 	sts	0x07F2, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    5b48:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <Initial_EEPROM_Config_Load>
    5b4c:	c8 2f       	mov	r28, r24
    5b4e:	20 e0       	ldi	r18, 0x00	; 0
    5b50:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    5b52:	46 ea       	ldi	r20, 0xA6	; 166
    5b54:	5e e0       	ldi	r21, 0x0E	; 14
    5b56:	f9 01       	movw	r30, r18
    5b58:	ee 0f       	add	r30, r30
    5b5a:	ff 1f       	adc	r31, r31
    5b5c:	ee 51       	subi	r30, 0x1E	; 30
    5b5e:	f8 4f       	sbci	r31, 0xF8	; 248
    5b60:	51 83       	std	Z+1, r21	; 0x01
    5b62:	40 83       	st	Z, r20
    5b64:	2f 5f       	subi	r18, 0xFF	; 255
    5b66:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5b68:	28 30       	cpi	r18, 0x08	; 8
    5b6a:	31 05       	cpc	r19, r1
    5b6c:	a1 f7       	brne	.-24     	; 0x5b56 <init+0xa4>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    5b6e:	24 ec       	ldi	r18, 0xC4	; 196
    5b70:	39 e0       	ldi	r19, 0x09	; 9
    5b72:	30 93 e3 07 	sts	0x07E3, r19
    5b76:	20 93 e2 07 	sts	0x07E2, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    5b7a:	0e 94 5e 24 	call	0x48bc	; 0x48bc <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    5b7e:	0e 94 b8 24 	call	0x4970	; 0x4970 <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    5b82:	93 b1       	in	r25, 0x03	; 3
    5b84:	90 7f       	andi	r25, 0xF0	; 240
    5b86:	90 36       	cpi	r25, 0x60	; 96
    5b88:	09 f0       	breq	.+2      	; 0x5b8c <init+0xda>
    5b8a:	71 c0       	rjmp	.+226    	; 0x5c6e <init+0x1bc>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5b8c:	80 ec       	ldi	r24, 0xC0	; 192
    5b8e:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
		clear_buffer(buffer);
    5b92:	80 e0       	ldi	r24, 0x00	; 0
    5b94:	91 e0       	ldi	r25, 0x01	; 1
    5b96:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    5b9a:	29 e1       	ldi	r18, 0x19	; 25
    5b9c:	30 e0       	ldi	r19, 0x00	; 0
    5b9e:	4a e0       	ldi	r20, 0x0A	; 10
    5ba0:	50 e0       	ldi	r21, 0x00	; 0
    5ba2:	63 e7       	ldi	r22, 0x73	; 115
    5ba4:	71 e0       	ldi	r23, 0x01	; 1
    5ba6:	8b e3       	ldi	r24, 0x3B	; 59
    5ba8:	90 e0       	ldi	r25, 0x00	; 0
    5baa:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		write_buffer(buffer);
    5bae:	80 e0       	ldi	r24, 0x00	; 0
    5bb0:	91 e0       	ldi	r25, 0x01	; 1
    5bb2:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
		clear_buffer(buffer);
    5bb6:	80 e0       	ldi	r24, 0x00	; 0
    5bb8:	91 e0       	ldi	r25, 0x01	; 1
    5bba:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
    5bbe:	e7 e5       	ldi	r30, 0x57	; 87
    5bc0:	f6 e0       	ldi	r31, 0x06	; 6
    5bc2:	80 e0       	ldi	r24, 0x00	; 0
    5bc4:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5bc6:	4c ed       	ldi	r20, 0xDC	; 220
    5bc8:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5bca:	6c e6       	ldi	r22, 0x6C	; 108
    5bcc:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5bce:	a0 81       	ld	r26, Z
    5bd0:	9c 01       	movw	r18, r24
    5bd2:	22 0f       	add	r18, r18
    5bd4:	33 1f       	adc	r19, r19
    5bd6:	a2 30       	cpi	r26, 0x02	; 2
    5bd8:	39 f4       	brne	.+14     	; 0x5be8 <init+0x136>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5bda:	d9 01       	movw	r26, r18
    5bdc:	a5 56       	subi	r26, 0x65	; 101
    5bde:	b7 4f       	sbci	r27, 0xF7	; 247
    5be0:	11 96       	adiw	r26, 0x01	; 1
    5be2:	7c 93       	st	X, r23
    5be4:	6e 93       	st	-X, r22
    5be6:	06 c0       	rjmp	.+12     	; 0x5bf4 <init+0x142>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5be8:	d9 01       	movw	r26, r18
    5bea:	a5 56       	subi	r26, 0x65	; 101
    5bec:	b7 4f       	sbci	r27, 0xF7	; 247
    5bee:	11 96       	adiw	r26, 0x01	; 1
    5bf0:	5c 93       	st	X, r21
    5bf2:	4e 93       	st	-X, r20
    5bf4:	01 96       	adiw	r24, 0x01	; 1
    5bf6:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5bf8:	88 30       	cpi	r24, 0x08	; 8
    5bfa:	91 05       	cpc	r25, r1
    5bfc:	41 f7       	brne	.-48     	; 0x5bce <init+0x11c>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5bfe:	83 b1       	in	r24, 0x03	; 3
    5c00:	80 7f       	andi	r24, 0xF0	; 240
    5c02:	80 36       	cpi	r24, 0x60	; 96
    5c04:	79 f4       	brne	.+30     	; 0x5c24 <init+0x172>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5c06:	6f ef       	ldi	r22, 0xFF	; 255
    5c08:	8b e9       	ldi	r24, 0x9B	; 155
    5c0a:	98 e0       	ldi	r25, 0x08	; 8
    5c0c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <output_servo_ppm_asm>
    5c10:	2f e7       	ldi	r18, 0x7F	; 127
    5c12:	88 e3       	ldi	r24, 0x38	; 56
    5c14:	91 e0       	ldi	r25, 0x01	; 1
    5c16:	21 50       	subi	r18, 0x01	; 1
    5c18:	80 40       	sbci	r24, 0x00	; 0
    5c1a:	90 40       	sbci	r25, 0x00	; 0
    5c1c:	e1 f7       	brne	.-8      	; 0x5c16 <init+0x164>
    5c1e:	00 c0       	rjmp	.+0      	; 0x5c20 <init+0x16e>
    5c20:	00 00       	nop
    5c22:	ed cf       	rjmp	.-38     	; 0x5bfe <init+0x14c>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5c24:	e7 e5       	ldi	r30, 0x57	; 87
    5c26:	f6 e0       	ldi	r31, 0x06	; 6
    5c28:	80 e0       	ldi	r24, 0x00	; 0
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5c2c:	2c e4       	ldi	r18, 0x4C	; 76
    5c2e:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5c30:	40 81       	ld	r20, Z
    5c32:	42 30       	cpi	r20, 0x02	; 2
    5c34:	41 f4       	brne	.+16     	; 0x5c46 <init+0x194>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5c36:	dc 01       	movw	r26, r24
    5c38:	aa 0f       	add	r26, r26
    5c3a:	bb 1f       	adc	r27, r27
    5c3c:	a5 56       	subi	r26, 0x65	; 101
    5c3e:	b7 4f       	sbci	r27, 0xF7	; 247
    5c40:	11 96       	adiw	r26, 0x01	; 1
    5c42:	3c 93       	st	X, r19
    5c44:	2e 93       	st	-X, r18
    5c46:	01 96       	adiw	r24, 0x01	; 1
    5c48:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5c4a:	88 30       	cpi	r24, 0x08	; 8
    5c4c:	91 05       	cpc	r25, r1
    5c4e:	81 f7       	brne	.-32     	; 0x5c30 <init+0x17e>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5c50:	6f ef       	ldi	r22, 0xFF	; 255
    5c52:	8b e9       	ldi	r24, 0x9B	; 155
    5c54:	98 e0       	ldi	r25, 0x08	; 8
    5c56:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <output_servo_ppm_asm>
    5c5a:	2f e7       	ldi	r18, 0x7F	; 127
    5c5c:	88 e3       	ldi	r24, 0x38	; 56
    5c5e:	91 e0       	ldi	r25, 0x01	; 1
    5c60:	21 50       	subi	r18, 0x01	; 1
    5c62:	80 40       	sbci	r24, 0x00	; 0
    5c64:	90 40       	sbci	r25, 0x00	; 0
    5c66:	e1 f7       	brne	.-8      	; 0x5c60 <init+0x1ae>
    5c68:	00 c0       	rjmp	.+0      	; 0x5c6a <init+0x1b8>
    5c6a:	00 00       	nop
    5c6c:	f1 cf       	rjmp	.-30     	; 0x5c50 <init+0x19e>
    5c6e:	2f e7       	ldi	r18, 0x7F	; 127
    5c70:	8f e4       	ldi	r24, 0x4F	; 79
    5c72:	92 e1       	ldi	r25, 0x12	; 18
    5c74:	21 50       	subi	r18, 0x01	; 1
    5c76:	80 40       	sbci	r24, 0x00	; 0
    5c78:	90 40       	sbci	r25, 0x00	; 0
    5c7a:	e1 f7       	brne	.-8      	; 0x5c74 <init+0x1c2>
    5c7c:	00 c0       	rjmp	.+0      	; 0x5c7e <init+0x1cc>
    5c7e:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    5c80:	93 b1       	in	r25, 0x03	; 3
    5c82:	90 7f       	andi	r25, 0xF0	; 240
    5c84:	90 39       	cpi	r25, 0x90	; 144
    5c86:	51 f5       	brne	.+84     	; 0x5cdc <init+0x22a>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5c88:	80 ec       	ldi	r24, 0xC0	; 192
    5c8a:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
		clear_buffer(buffer);
    5c8e:	80 e0       	ldi	r24, 0x00	; 0
    5c90:	91 e0       	ldi	r25, 0x01	; 1
    5c92:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    5c96:	29 e1       	ldi	r18, 0x19	; 25
    5c98:	30 e0       	ldi	r19, 0x00	; 0
    5c9a:	48 e2       	ldi	r20, 0x28	; 40
    5c9c:	50 e0       	ldi	r21, 0x00	; 0
    5c9e:	63 e7       	ldi	r22, 0x73	; 115
    5ca0:	71 e0       	ldi	r23, 0x01	; 1
    5ca2:	86 e0       	ldi	r24, 0x06	; 6
    5ca4:	91 e0       	ldi	r25, 0x01	; 1
    5ca6:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		write_buffer(buffer);
    5caa:	80 e0       	ldi	r24, 0x00	; 0
    5cac:	91 e0       	ldi	r25, 0x01	; 1
    5cae:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
		clear_buffer(buffer);
    5cb2:	80 e0       	ldi	r24, 0x00	; 0
    5cb4:	91 e0       	ldi	r25, 0x01	; 1
    5cb6:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    5cba:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    5cbe:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    5cc2:	80 91 4a 06 	lds	r24, 0x064A
    5cc6:	0e 94 55 24 	call	0x48aa	; 0x48aa <st7565_set_brightness>
    5cca:	2f e7       	ldi	r18, 0x7F	; 127
    5ccc:	84 e8       	ldi	r24, 0x84	; 132
    5cce:	9e e1       	ldi	r25, 0x1E	; 30
    5cd0:	21 50       	subi	r18, 0x01	; 1
    5cd2:	80 40       	sbci	r24, 0x00	; 0
    5cd4:	90 40       	sbci	r25, 0x00	; 0
    5cd6:	e1 f7       	brne	.-8      	; 0x5cd0 <init+0x21e>
    5cd8:	00 c0       	rjmp	.+0      	; 0x5cda <init+0x228>
    5cda:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    5cdc:	cc 23       	and	r28, r28
    5cde:	21 f1       	breq	.+72     	; 0x5d28 <init+0x276>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5ce0:	80 ec       	ldi	r24, 0xC0	; 192
    5ce2:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
		clear_buffer(buffer);
    5ce6:	80 e0       	ldi	r24, 0x00	; 0
    5ce8:	91 e0       	ldi	r25, 0x01	; 1
    5cea:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    5cee:	2d e0       	ldi	r18, 0x0D	; 13
    5cf0:	30 e0       	ldi	r19, 0x00	; 0
    5cf2:	4e e1       	ldi	r20, 0x1E	; 30
    5cf4:	50 e0       	ldi	r21, 0x00	; 0
    5cf6:	63 e7       	ldi	r22, 0x73	; 115
    5cf8:	71 e0       	ldi	r23, 0x01	; 1
    5cfa:	83 e0       	ldi	r24, 0x03	; 3
    5cfc:	91 e0       	ldi	r25, 0x01	; 1
    5cfe:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    5d02:	25 e2       	ldi	r18, 0x25	; 37
    5d04:	30 e0       	ldi	r19, 0x00	; 0
    5d06:	41 e2       	ldi	r20, 0x21	; 33
    5d08:	50 e0       	ldi	r21, 0x00	; 0
    5d0a:	63 e7       	ldi	r22, 0x73	; 115
    5d0c:	71 e0       	ldi	r23, 0x01	; 1
    5d0e:	84 e0       	ldi	r24, 0x04	; 4
    5d10:	91 e0       	ldi	r25, 0x01	; 1
    5d12:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		write_buffer(buffer);
    5d16:	80 e0       	ldi	r24, 0x00	; 0
    5d18:	91 e0       	ldi	r25, 0x01	; 1
    5d1a:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
		clear_buffer(buffer);		
    5d1e:	80 e0       	ldi	r24, 0x00	; 0
    5d20:	91 e0       	ldi	r25, 0x01	; 1
    5d22:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
    5d26:	04 c0       	rjmp	.+8      	; 0x5d30 <init+0x27e>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    5d28:	80 e0       	ldi	r24, 0x00	; 0
    5d2a:	91 e0       	ldi	r25, 0x01	; 1
    5d2c:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
    5d30:	2f ef       	ldi	r18, 0xFF	; 255
    5d32:	88 e0       	ldi	r24, 0x08	; 8
    5d34:	9d e3       	ldi	r25, 0x3D	; 61
    5d36:	21 50       	subi	r18, 0x01	; 1
    5d38:	80 40       	sbci	r24, 0x00	; 0
    5d3a:	90 40       	sbci	r25, 0x00	; 0
    5d3c:	e1 f7       	brne	.-8      	; 0x5d36 <init+0x284>
    5d3e:	00 c0       	rjmp	.+0      	; 0x5d40 <init+0x28e>
    5d40:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    5d42:	80 e0       	ldi	r24, 0x00	; 0
    5d44:	91 e0       	ldi	r25, 0x01	; 1
    5d46:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
	write_buffer(buffer);
    5d4a:	80 e0       	ldi	r24, 0x00	; 0
    5d4c:	91 e0       	ldi	r25, 0x01	; 1
    5d4e:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    5d52:	0e 94 5e 24 	call	0x48bc	; 0x48bc <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    5d56:	0e 94 85 4b 	call	0x970a	; 0x970a <i2c_init>
	init_i2c_gyros();
    5d5a:	0e 94 a3 28 	call	0x5146	; 0x5146 <init_i2c_gyros>
	init_i2c_accs();
    5d5e:	0e 94 b0 11 	call	0x2360	; 0x2360 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    5d62:	80 e0       	ldi	r24, 0x00	; 0
    5d64:	91 e0       	ldi	r25, 0x01	; 1
    5d66:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5d6a:	80 ec       	ldi	r24, 0xC0	; 192
    5d6c:	0e 94 4f 24 	call	0x489e	; 0x489e <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    5d70:	29 e1       	ldi	r18, 0x19	; 25
    5d72:	30 e0       	ldi	r19, 0x00	; 0
    5d74:	42 e1       	ldi	r20, 0x12	; 18
    5d76:	50 e0       	ldi	r21, 0x00	; 0
    5d78:	63 e7       	ldi	r22, 0x73	; 115
    5d7a:	71 e0       	ldi	r23, 0x01	; 1
    5d7c:	87 e0       	ldi	r24, 0x07	; 7
    5d7e:	91 e0       	ldi	r25, 0x01	; 1
    5d80:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
	write_buffer(buffer);	
    5d84:	80 e0       	ldi	r24, 0x00	; 0
    5d86:	91 e0       	ldi	r25, 0x01	; 1
    5d88:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
	clear_buffer(buffer);
    5d8c:	80 e0       	ldi	r24, 0x00	; 0
    5d8e:	91 e0       	ldi	r25, 0x01	; 1
    5d90:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    5d94:	0e 94 ba 11 	call	0x2374	; 0x2374 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    5d98:	0e 94 24 33 	call	0x6648	; 0x6648 <init_int>
	init_uart();							// Initialise UART
    5d9c:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    5da0:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <CalibrateGyrosSlow>
    5da4:	81 11       	cpse	r24, r1
    5da6:	28 c0       	rjmp	.+80     	; 0x5df8 <init+0x346>
	{
		clear_buffer(buffer);
    5da8:	80 e0       	ldi	r24, 0x00	; 0
    5daa:	91 e0       	ldi	r25, 0x01	; 1
    5dac:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    5db0:	29 e1       	ldi	r18, 0x19	; 25
    5db2:	30 e0       	ldi	r19, 0x00	; 0
    5db4:	49 e1       	ldi	r20, 0x19	; 25
    5db6:	50 e0       	ldi	r21, 0x00	; 0
    5db8:	63 e7       	ldi	r22, 0x73	; 115
    5dba:	71 e0       	ldi	r23, 0x01	; 1
    5dbc:	8d e3       	ldi	r24, 0x3D	; 61
    5dbe:	90 e0       	ldi	r25, 0x00	; 0
    5dc0:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		write_buffer(buffer);
    5dc4:	80 e0       	ldi	r24, 0x00	; 0
    5dc6:	91 e0       	ldi	r25, 0x01	; 1
    5dc8:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
    5dcc:	2f ef       	ldi	r18, 0xFF	; 255
    5dce:	88 e0       	ldi	r24, 0x08	; 8
    5dd0:	9d e3       	ldi	r25, 0x3D	; 61
    5dd2:	21 50       	subi	r18, 0x01	; 1
    5dd4:	80 40       	sbci	r24, 0x00	; 0
    5dd6:	90 40       	sbci	r25, 0x00	; 0
    5dd8:	e1 f7       	brne	.-8      	; 0x5dd2 <init+0x320>
    5dda:	00 c0       	rjmp	.+0      	; 0x5ddc <init+0x32a>
    5ddc:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    5dde:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    5de0:	28 e0       	ldi	r18, 0x08	; 8
    5de2:	88 e1       	ldi	r24, 0x18	; 24
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	0f b6       	in	r0, 0x3f	; 63
    5de8:	f8 94       	cli
    5dea:	a8 95       	wdr
    5dec:	80 93 60 00 	sts	0x0060, r24
    5df0:	0f be       	out	0x3f, r0	; 63
    5df2:	20 93 60 00 	sts	0x0060, r18
    5df6:	ff cf       	rjmp	.-2      	; 0x5df6 <init+0x344>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    5df8:	0e 94 d5 4c 	call	0x99aa	; 0x99aa <GetVbat>
    5dfc:	90 93 2f 05 	sts	0x052F, r25
    5e00:	80 93 2e 05 	sts	0x052E, r24
	UpdateLimits();							// Update travel and trigger limits
    5e04:	0e 94 18 3c 	call	0x7830	; 0x7830 <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    5e08:	80 91 4b 06 	lds	r24, 0x064B
    5e0c:	81 30       	cpi	r24, 0x01	; 1
    5e0e:	29 f4       	brne	.+10     	; 0x5e1a <init+0x368>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    5e10:	80 91 20 05 	lds	r24, 0x0520
    5e14:	84 60       	ori	r24, 0x04	; 4
    5e16:	80 93 20 05 	sts	0x0520, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    5e1a:	80 91 f2 07 	lds	r24, 0x07F2
    5e1e:	88 23       	and	r24, r24
    5e20:	69 f0       	breq	.+26     	; 0x5e3c <init+0x38a>
	{
		RxGetChannels();
    5e22:	0e 94 00 4a 	call	0x9400	; 0x9400 <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    5e26:	80 91 87 08 	lds	r24, 0x0887
    5e2a:	90 91 88 08 	lds	r25, 0x0888
    5e2e:	c3 97       	sbiw	r24, 0x33	; 51
    5e30:	2c f0       	brlt	.+10     	; 0x5e3c <init+0x38a>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    5e32:	80 91 20 05 	lds	r24, 0x0520
    5e36:	81 60       	ori	r24, 0x01	; 1
    5e38:	80 93 20 05 	sts	0x0520, r24
		}
	}

	// Reset IMU
	reset_IMU();
    5e3c:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    5e40:	29 9a       	sbi	0x05, 1	; 5
    5e42:	2f e9       	ldi	r18, 0x9F	; 159
    5e44:	86 e8       	ldi	r24, 0x86	; 134
    5e46:	91 e0       	ldi	r25, 0x01	; 1
    5e48:	21 50       	subi	r18, 0x01	; 1
    5e4a:	80 40       	sbci	r24, 0x00	; 0
    5e4c:	90 40       	sbci	r25, 0x00	; 0
    5e4e:	e1 f7       	brne	.-8      	; 0x5e48 <init+0x396>
    5e50:	00 c0       	rjmp	.+0      	; 0x5e52 <init+0x3a0>
    5e52:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    5e54:	29 98       	cbi	0x05, 1	; 5

#ifdef ERROR_LOG	
	// Log reboot
	add_log(REBOOT);
    5e56:	81 e0       	ldi	r24, 0x01	; 1
#endif
} // init()
    5e58:	cf 91       	pop	r28
	_delay_ms(25);
	LVA = 0;

#ifdef ERROR_LOG	
	// Log reboot
	add_log(REBOOT);
    5e5a:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <add_log>

00005e5e <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    5e5e:	1f 92       	push	r1
    5e60:	0f 92       	push	r0
    5e62:	0f b6       	in	r0, 0x3f	; 63
    5e64:	0f 92       	push	r0
    5e66:	11 24       	eor	r1, r1
    5e68:	8f 93       	push	r24
    5e6a:	9f 93       	push	r25
	TMR0_counter++;
    5e6c:	80 91 f5 07 	lds	r24, 0x07F5
    5e70:	90 91 f6 07 	lds	r25, 0x07F6
    5e74:	01 96       	adiw	r24, 0x01	; 1
    5e76:	90 93 f6 07 	sts	0x07F6, r25
    5e7a:	80 93 f5 07 	sts	0x07F5, r24
}
    5e7e:	9f 91       	pop	r25
    5e80:	8f 91       	pop	r24
    5e82:	0f 90       	pop	r0
    5e84:	0f be       	out	0x3f, r0	; 63
    5e86:	0f 90       	pop	r0
    5e88:	1f 90       	pop	r1
    5e8a:	18 95       	reti

00005e8c <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    5e8c:	1f 92       	push	r1
    5e8e:	0f 92       	push	r0
    5e90:	0f b6       	in	r0, 0x3f	; 63
    5e92:	0f 92       	push	r0
    5e94:	11 24       	eor	r1, r1
    5e96:	2f 93       	push	r18
    5e98:	3f 93       	push	r19
    5e9a:	8f 93       	push	r24
    5e9c:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    5e9e:	80 91 0c 08 	lds	r24, 0x080C
    5ea2:	88 23       	and	r24, r24
    5ea4:	19 f0       	breq	.+6      	; 0x5eac <__vector_2+0x20>
    5ea6:	81 e0       	ldi	r24, 0x01	; 1
    5ea8:	80 93 0d 08 	sts	0x080D, r24

	if (RX_ROLL)	// Rising
    5eac:	4b 9b       	sbis	0x09, 3	; 9
    5eae:	09 c0       	rjmp	.+18     	; 0x5ec2 <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    5eb0:	80 91 84 00 	lds	r24, 0x0084
    5eb4:	90 91 85 00 	lds	r25, 0x0085
    5eb8:	90 93 fa 07 	sts	0x07FA, r25
    5ebc:	80 93 f9 07 	sts	0x07F9, r24
    5ec0:	14 c0       	rjmp	.+40     	; 0x5eea <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    5ec2:	80 91 84 00 	lds	r24, 0x0084
    5ec6:	90 91 85 00 	lds	r25, 0x0085
    5eca:	20 91 f9 07 	lds	r18, 0x07F9
    5ece:	30 91 fa 07 	lds	r19, 0x07FA
    5ed2:	82 1b       	sub	r24, r18
    5ed4:	93 0b       	sbc	r25, r19
    5ed6:	90 93 e5 07 	sts	0x07E5, r25
    5eda:	80 93 e4 07 	sts	0x07E4, r24
		if (Config.PWM_Sync == AILERON) 
    5ede:	80 91 ec 05 	lds	r24, 0x05EC
    5ee2:	81 30       	cpi	r24, 0x01	; 1
    5ee4:	11 f4       	brne	.+4      	; 0x5eea <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5ee6:	80 93 f2 07 	sts	0x07F2, r24
		}
	}
}
    5eea:	9f 91       	pop	r25
    5eec:	8f 91       	pop	r24
    5eee:	3f 91       	pop	r19
    5ef0:	2f 91       	pop	r18
    5ef2:	0f 90       	pop	r0
    5ef4:	0f be       	out	0x3f, r0	; 63
    5ef6:	0f 90       	pop	r0
    5ef8:	1f 90       	pop	r1
    5efa:	18 95       	reti

00005efc <__vector_1>:

ISR(INT0_vect)
{
    5efc:	1f 92       	push	r1
    5efe:	0f 92       	push	r0
    5f00:	0f b6       	in	r0, 0x3f	; 63
    5f02:	0f 92       	push	r0
    5f04:	11 24       	eor	r1, r1
    5f06:	2f 93       	push	r18
    5f08:	3f 93       	push	r19
    5f0a:	8f 93       	push	r24
    5f0c:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5f0e:	80 91 0c 08 	lds	r24, 0x080C
    5f12:	88 23       	and	r24, r24
    5f14:	19 f0       	breq	.+6      	; 0x5f1c <__vector_1+0x20>
    5f16:	81 e0       	ldi	r24, 0x01	; 1
    5f18:	80 93 0d 08 	sts	0x080D, r24

	if (RX_PITCH)	// Rising 
    5f1c:	4a 9b       	sbis	0x09, 2	; 9
    5f1e:	09 c0       	rjmp	.+18     	; 0x5f32 <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    5f20:	80 91 84 00 	lds	r24, 0x0084
    5f24:	90 91 85 00 	lds	r25, 0x0085
    5f28:	90 93 fc 07 	sts	0x07FC, r25
    5f2c:	80 93 fb 07 	sts	0x07FB, r24
    5f30:	15 c0       	rjmp	.+42     	; 0x5f5c <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    5f32:	80 91 84 00 	lds	r24, 0x0084
    5f36:	90 91 85 00 	lds	r25, 0x0085
    5f3a:	20 91 fb 07 	lds	r18, 0x07FB
    5f3e:	30 91 fc 07 	lds	r19, 0x07FC
    5f42:	82 1b       	sub	r24, r18
    5f44:	93 0b       	sbc	r25, r19
    5f46:	90 93 e7 07 	sts	0x07E7, r25
    5f4a:	80 93 e6 07 	sts	0x07E6, r24
		if (Config.PWM_Sync == ELEVATOR) 
    5f4e:	80 91 ec 05 	lds	r24, 0x05EC
    5f52:	82 30       	cpi	r24, 0x02	; 2
    5f54:	19 f4       	brne	.+6      	; 0x5f5c <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5f56:	81 e0       	ldi	r24, 0x01	; 1
    5f58:	80 93 f2 07 	sts	0x07F2, r24
		}
	}
}
    5f5c:	9f 91       	pop	r25
    5f5e:	8f 91       	pop	r24
    5f60:	3f 91       	pop	r19
    5f62:	2f 91       	pop	r18
    5f64:	0f 90       	pop	r0
    5f66:	0f be       	out	0x3f, r0	; 63
    5f68:	0f 90       	pop	r0
    5f6a:	1f 90       	pop	r1
    5f6c:	18 95       	reti

00005f6e <__vector_7>:

ISR(PCINT3_vect)
{
    5f6e:	1f 92       	push	r1
    5f70:	0f 92       	push	r0
    5f72:	0f b6       	in	r0, 0x3f	; 63
    5f74:	0f 92       	push	r0
    5f76:	11 24       	eor	r1, r1
    5f78:	2f 93       	push	r18
    5f7a:	3f 93       	push	r19
    5f7c:	8f 93       	push	r24
    5f7e:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5f80:	80 91 0c 08 	lds	r24, 0x080C
    5f84:	88 23       	and	r24, r24
    5f86:	19 f0       	breq	.+6      	; 0x5f8e <__vector_7+0x20>
    5f88:	81 e0       	ldi	r24, 0x01	; 1
    5f8a:	80 93 0d 08 	sts	0x080D, r24
		
	if (RX_COLL)	// Rising
    5f8e:	48 9b       	sbis	0x09, 0	; 9
    5f90:	09 c0       	rjmp	.+18     	; 0x5fa4 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    5f92:	80 91 84 00 	lds	r24, 0x0084
    5f96:	90 91 85 00 	lds	r25, 0x0085
    5f9a:	90 93 f8 07 	sts	0x07F8, r25
    5f9e:	80 93 f7 07 	sts	0x07F7, r24
    5fa2:	15 c0       	rjmp	.+42     	; 0x5fce <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    5fa4:	80 91 84 00 	lds	r24, 0x0084
    5fa8:	90 91 85 00 	lds	r25, 0x0085
    5fac:	20 91 f7 07 	lds	r18, 0x07F7
    5fb0:	30 91 f8 07 	lds	r19, 0x07F8
    5fb4:	82 1b       	sub	r24, r18
    5fb6:	93 0b       	sbc	r25, r19
    5fb8:	90 93 e3 07 	sts	0x07E3, r25
    5fbc:	80 93 e2 07 	sts	0x07E2, r24
		if (Config.PWM_Sync == THROTTLE) 
    5fc0:	80 91 ec 05 	lds	r24, 0x05EC
    5fc4:	81 11       	cpse	r24, r1
    5fc6:	03 c0       	rjmp	.+6      	; 0x5fce <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5fc8:	81 e0       	ldi	r24, 0x01	; 1
    5fca:	80 93 f2 07 	sts	0x07F2, r24
		}
	}
}
    5fce:	9f 91       	pop	r25
    5fd0:	8f 91       	pop	r24
    5fd2:	3f 91       	pop	r19
    5fd4:	2f 91       	pop	r18
    5fd6:	0f 90       	pop	r0
    5fd8:	0f be       	out	0x3f, r0	; 63
    5fda:	0f 90       	pop	r0
    5fdc:	1f 90       	pop	r1
    5fde:	18 95       	reti

00005fe0 <__vector_5>:


ISR(PCINT1_vect)
{
    5fe0:	1f 92       	push	r1
    5fe2:	0f 92       	push	r0
    5fe4:	0f b6       	in	r0, 0x3f	; 63
    5fe6:	0f 92       	push	r0
    5fe8:	11 24       	eor	r1, r1
    5fea:	2f 93       	push	r18
    5fec:	3f 93       	push	r19
    5fee:	8f 93       	push	r24
    5ff0:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    5ff2:	80 91 0c 08 	lds	r24, 0x080C
    5ff6:	88 23       	and	r24, r24
    5ff8:	19 f0       	breq	.+6      	; 0x6000 <__vector_5+0x20>
    5ffa:	81 e0       	ldi	r24, 0x01	; 1
    5ffc:	80 93 0d 08 	sts	0x080D, r24

	if (RX_AUX)	// Rising
    6000:	18 9b       	sbis	0x03, 0	; 3
    6002:	09 c0       	rjmp	.+18     	; 0x6016 <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    6004:	80 91 84 00 	lds	r24, 0x0084
    6008:	90 91 85 00 	lds	r25, 0x0085
    600c:	90 93 00 08 	sts	0x0800, r25
    6010:	80 93 ff 07 	sts	0x07FF, r24
    6014:	15 c0       	rjmp	.+42     	; 0x6040 <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    6016:	80 91 84 00 	lds	r24, 0x0084
    601a:	90 91 85 00 	lds	r25, 0x0085
    601e:	20 91 ff 07 	lds	r18, 0x07FF
    6022:	30 91 00 08 	lds	r19, 0x0800
    6026:	82 1b       	sub	r24, r18
    6028:	93 0b       	sbc	r25, r19
    602a:	90 93 eb 07 	sts	0x07EB, r25
    602e:	80 93 ea 07 	sts	0x07EA, r24
		if (Config.PWM_Sync == GEAR) 
    6032:	80 91 ec 05 	lds	r24, 0x05EC
    6036:	84 30       	cpi	r24, 0x04	; 4
    6038:	19 f4       	brne	.+6      	; 0x6040 <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    603a:	81 e0       	ldi	r24, 0x01	; 1
    603c:	80 93 f2 07 	sts	0x07F2, r24
		}
	}
}
    6040:	9f 91       	pop	r25
    6042:	8f 91       	pop	r24
    6044:	3f 91       	pop	r19
    6046:	2f 91       	pop	r18
    6048:	0f 90       	pop	r0
    604a:	0f be       	out	0x3f, r0	; 63
    604c:	0f 90       	pop	r0
    604e:	1f 90       	pop	r1
    6050:	18 95       	reti

00006052 <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    6052:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    6054:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    6056:	80 91 84 00 	lds	r24, 0x0084
    605a:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    605e:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    6060:	08 95       	ret

00006062 <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    6062:	1f 92       	push	r1
    6064:	0f 92       	push	r0
    6066:	0f b6       	in	r0, 0x3f	; 63
    6068:	0f 92       	push	r0
    606a:	11 24       	eor	r1, r1
    606c:	2f 93       	push	r18
    606e:	3f 93       	push	r19
    6070:	4f 93       	push	r20
    6072:	5f 93       	push	r21
    6074:	6f 93       	push	r22
    6076:	7f 93       	push	r23
    6078:	8f 93       	push	r24
    607a:	9f 93       	push	r25
    607c:	af 93       	push	r26
    607e:	bf 93       	push	r27
    6080:	ef 93       	push	r30
    6082:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    6084:	80 91 0c 08 	lds	r24, 0x080C
    6088:	88 23       	and	r24, r24
    608a:	19 f0       	breq	.+6      	; 0x6092 <__vector_3+0x30>
    608c:	81 e0       	ldi	r24, 0x01	; 1
    608e:	80 93 0d 08 	sts	0x080D, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    6092:	0e 94 29 30 	call	0x6052	; 0x6052 <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    6096:	20 91 ea 05 	lds	r18, 0x05EA
    609a:	22 23       	and	r18, r18
    609c:	d1 f0       	breq	.+52     	; 0x60d2 <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    609e:	1a 9b       	sbis	0x03, 2	; 3
    60a0:	05 c0       	rjmp	.+10     	; 0x60ac <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    60a2:	90 93 fe 07 	sts	0x07FE, r25
    60a6:	80 93 fd 07 	sts	0x07FD, r24
    60aa:	86 c0       	rjmp	.+268    	; 0x61b8 <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    60ac:	20 91 fd 07 	lds	r18, 0x07FD
    60b0:	30 91 fe 07 	lds	r19, 0x07FE
    60b4:	82 1b       	sub	r24, r18
    60b6:	93 0b       	sbc	r25, r19
    60b8:	90 93 e9 07 	sts	0x07E9, r25
    60bc:	80 93 e8 07 	sts	0x07E8, r24
			if (Config.PWM_Sync == RUDDER) 
    60c0:	80 91 ec 05 	lds	r24, 0x05EC
    60c4:	83 30       	cpi	r24, 0x03	; 3
    60c6:	09 f0       	breq	.+2      	; 0x60ca <__vector_3+0x68>
    60c8:	77 c0       	rjmp	.+238    	; 0x61b8 <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    60ca:	81 e0       	ldi	r24, 0x01	; 1
    60cc:	80 93 f2 07 	sts	0x07F2, r24
    60d0:	73 c0       	rjmp	.+230    	; 0x61b8 <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    60d2:	1a 99       	sbic	0x03, 2	; 3
    60d4:	71 c0       	rjmp	.+226    	; 0x61b8 <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    60d6:	20 91 0a 08 	lds	r18, 0x080A
    60da:	30 91 0b 08 	lds	r19, 0x080B
    60de:	ac 01       	movw	r20, r24
    60e0:	42 1b       	sub	r20, r18
    60e2:	53 0b       	sbc	r21, r19
    60e4:	9a 01       	movw	r18, r20
    60e6:	2f 35       	cpi	r18, 0x5F	; 95
    60e8:	3a 41       	sbci	r19, 0x1A	; 26
    60ea:	58 f4       	brcc	.+22     	; 0x6102 <__vector_3+0xa0>
    60ec:	20 91 0a 08 	lds	r18, 0x080A
    60f0:	30 91 0b 08 	lds	r19, 0x080B
    60f4:	ac 01       	movw	r20, r24
    60f6:	42 1b       	sub	r20, r18
    60f8:	53 0b       	sbc	r21, r19
    60fa:	9a 01       	movw	r18, r20
    60fc:	2e 3e       	cpi	r18, 0xEE	; 238
    60fe:	32 40       	sbci	r19, 0x02	; 2
    6100:	10 f4       	brcc	.+4      	; 0x6106 <__vector_3+0xa4>
		{
			ch_num = 0;
    6102:	10 92 09 08 	sts	0x0809, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    6106:	90 93 0b 08 	sts	0x080B, r25
    610a:	80 93 0a 08 	sts	0x080A, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    610e:	e0 91 09 08 	lds	r30, 0x0809
    6112:	f0 e0       	ldi	r31, 0x00	; 0
    6114:	ef 53       	subi	r30, 0x3F	; 63
    6116:	fa 4f       	sbci	r31, 0xFA	; 250
    6118:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    611a:	20 91 09 08 	lds	r18, 0x0809
    611e:	22 23       	and	r18, r18
    6120:	39 f0       	breq	.+14     	; 0x6130 <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    6122:	a0 91 09 08 	lds	r26, 0x0809
    6126:	b0 e0       	ldi	r27, 0x00	; 0
    6128:	af 53       	subi	r26, 0x3F	; 63
    612a:	ba 4f       	sbci	r27, 0xFA	; 250
    612c:	2c 91       	ld	r18, X
    612e:	01 c0       	rjmp	.+2      	; 0x6132 <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    6130:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    6132:	30 91 09 08 	lds	r19, 0x0809
    6136:	38 30       	cpi	r19, 0x08	; 8
    6138:	38 f4       	brcc	.+14     	; 0x6148 <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    613a:	f0 e0       	ldi	r31, 0x00	; 0
    613c:	ee 0f       	add	r30, r30
    613e:	ff 1f       	adc	r31, r31
    6140:	e9 50       	subi	r30, 0x09	; 9
    6142:	f8 4f       	sbci	r31, 0xF8	; 248
    6144:	91 83       	std	Z+1, r25	; 0x01
    6146:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    6148:	30 91 09 08 	lds	r19, 0x0809
    614c:	33 23       	and	r19, r19
    614e:	99 f0       	breq	.+38     	; 0x6176 <__vector_3+0x114>
    6150:	30 91 09 08 	lds	r19, 0x0809
    6154:	39 30       	cpi	r19, 0x09	; 9
    6156:	78 f4       	brcc	.+30     	; 0x6176 <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    6158:	30 e0       	ldi	r19, 0x00	; 0
    615a:	22 0f       	add	r18, r18
    615c:	33 1f       	adc	r19, r19
    615e:	f9 01       	movw	r30, r18
    6160:	e9 50       	subi	r30, 0x09	; 9
    6162:	f8 4f       	sbci	r31, 0xF8	; 248
    6164:	40 81       	ld	r20, Z
    6166:	51 81       	ldd	r21, Z+1	; 0x01
    6168:	84 1b       	sub	r24, r20
    616a:	95 0b       	sbc	r25, r21
    616c:	f9 01       	movw	r30, r18
    616e:	ee 51       	subi	r30, 0x1E	; 30
    6170:	f8 4f       	sbci	r31, 0xF8	; 248
    6172:	91 83       	std	Z+1, r25	; 0x01
    6174:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    6176:	80 91 09 08 	lds	r24, 0x0809
    617a:	8f 5f       	subi	r24, 0xFF	; 255
    617c:	80 93 09 08 	sts	0x0809, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    6180:	90 91 09 08 	lds	r25, 0x0809
    6184:	80 91 f3 07 	lds	r24, 0x07F3
    6188:	89 17       	cp	r24, r25
    618a:	28 f4       	brcc	.+10     	; 0x6196 <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    618c:	80 91 09 08 	lds	r24, 0x0809
    6190:	80 93 f3 07 	sts	0x07F3, r24
    6194:	09 c0       	rjmp	.+18     	; 0x61a8 <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    6196:	90 91 09 08 	lds	r25, 0x0809
    619a:	80 91 f3 07 	lds	r24, 0x07F3
    619e:	98 13       	cpse	r25, r24
    61a0:	03 c0       	rjmp	.+6      	; 0x61a8 <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    61a2:	81 e0       	ldi	r24, 0x01	; 1
    61a4:	80 93 f2 07 	sts	0x07F2, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    61a8:	80 91 19 05 	lds	r24, 0x0519
    61ac:	88 23       	and	r24, r24
    61ae:	21 f0       	breq	.+8      	; 0x61b8 <__vector_3+0x156>
		{
			max_chan = 0;
    61b0:	10 92 f3 07 	sts	0x07F3, r1
			Overdue = false;
    61b4:	10 92 19 05 	sts	0x0519, r1
		}
	}
} // ISR(INT2_vect)
    61b8:	ff 91       	pop	r31
    61ba:	ef 91       	pop	r30
    61bc:	bf 91       	pop	r27
    61be:	af 91       	pop	r26
    61c0:	9f 91       	pop	r25
    61c2:	8f 91       	pop	r24
    61c4:	7f 91       	pop	r23
    61c6:	6f 91       	pop	r22
    61c8:	5f 91       	pop	r21
    61ca:	4f 91       	pop	r20
    61cc:	3f 91       	pop	r19
    61ce:	2f 91       	pop	r18
    61d0:	0f 90       	pop	r0
    61d2:	0f be       	out	0x3f, r0	; 63
    61d4:	0f 90       	pop	r0
    61d6:	1f 90       	pop	r1
    61d8:	18 95       	reti

000061da <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    61da:	1f 92       	push	r1
    61dc:	0f 92       	push	r0
    61de:	0f b6       	in	r0, 0x3f	; 63
    61e0:	0f 92       	push	r0
    61e2:	11 24       	eor	r1, r1
    61e4:	2f 93       	push	r18
    61e6:	3f 93       	push	r19
    61e8:	4f 93       	push	r20
    61ea:	5f 93       	push	r21
    61ec:	6f 93       	push	r22
    61ee:	7f 93       	push	r23
    61f0:	8f 93       	push	r24
    61f2:	9f 93       	push	r25
    61f4:	af 93       	push	r26
    61f6:	bf 93       	push	r27
    61f8:	cf 93       	push	r28
    61fa:	ef 93       	push	r30
    61fc:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    61fe:	80 91 0c 08 	lds	r24, 0x080C
    6202:	88 23       	and	r24, r24
    6204:	19 f0       	breq	.+6      	; 0x620c <__vector_20+0x32>
    6206:	81 e0       	ldi	r24, 0x01	; 1
    6208:	80 93 0d 08 	sts	0x080D, r24

	// Read byte first
	temp = UDR0;
    620c:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    6210:	0e 94 29 30 	call	0x6052	; 0x6052 <TIM16_ReadTCNT1>
	
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    6214:	40 91 0a 08 	lds	r20, 0x080A
    6218:	50 91 0b 08 	lds	r21, 0x080B
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    621c:	40 91 0a 08 	lds	r20, 0x080A
    6220:	50 91 0b 08 	lds	r21, 0x080B
    6224:	9c 01       	movw	r18, r24
    6226:	24 1b       	sub	r18, r20
    6228:	35 0b       	sbc	r19, r21
    622a:	a9 01       	movw	r20, r18
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    622c:	45 3c       	cpi	r20, 0xC5	; 197
    622e:	39 e0       	ldi	r19, 0x09	; 9
    6230:	53 07       	cpc	r21, r19
    6232:	90 f0       	brcs	.+36     	; 0x6258 <__vector_20+0x7e>
	{
		// Reset variables
		rcindex = 0;
    6234:	10 92 e1 07 	sts	0x07E1, r1
		bytecount = 0;
    6238:	10 92 f4 07 	sts	0x07F4, r1
		ch_num = 0;
    623c:	10 92 09 08 	sts	0x0809, r1
		checksum = 0;
    6240:	10 92 0f 08 	sts	0x080F, r1
    6244:	10 92 0e 08 	sts	0x080E, r1
		chanmask16 = 0;
    6248:	10 92 08 08 	sts	0x0808, r1
    624c:	10 92 07 08 	sts	0x0807, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    6250:	50 93 11 08 	sts	0x0811, r21
    6254:	40 93 10 08 	sts	0x0810, r20
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    6258:	90 93 0b 08 	sts	0x080B, r25
    625c:	80 93 0a 08 	sts	0x080A, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    6260:	80 91 e1 07 	lds	r24, 0x07E1
    6264:	86 32       	cpi	r24, 0x26	; 38
    6266:	50 f4       	brcc	.+20     	; 0x627c <__vector_20+0xa2>
	{
		sBuffer[rcindex++] = temp;			
    6268:	e0 91 e1 07 	lds	r30, 0x07E1
    626c:	81 e0       	ldi	r24, 0x01	; 1
    626e:	8e 0f       	add	r24, r30
    6270:	80 93 e1 07 	sts	0x07E1, r24
    6274:	f0 e0       	ldi	r31, 0x00	; 0
    6276:	ec 5b       	subi	r30, 0xBC	; 188
    6278:	fa 4f       	sbci	r31, 0xFA	; 250
    627a:	c0 83       	st	Z, r28
	//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
	//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
	//*
	//************************************************************

	if (Config.RxMode == XTREME)
    627c:	80 91 ea 05 	lds	r24, 0x05EA
    6280:	84 30       	cpi	r24, 0x04	; 4
    6282:	09 f0       	breq	.+2      	; 0x6286 <__vector_20+0xac>
    6284:	b3 c0       	rjmp	.+358    	; 0x63ec <__vector_20+0x212>
	{
		// Look at flag byte to see if the data is meant for us
		if (bytecount == 0)
    6286:	80 91 f4 07 	lds	r24, 0x07F4
    628a:	81 11       	cpse	r24, r1
    628c:	0d c0       	rjmp	.+26     	; 0x62a8 <__vector_20+0xce>
		{
			// Check top 3 bits for channel bank
			// Trash checksum if not clear
			if (temp & 0xE0)
    628e:	8c 2f       	mov	r24, r28
    6290:	80 7e       	andi	r24, 0xE0	; 224
    6292:	51 f0       	breq	.+20     	; 0x62a8 <__vector_20+0xce>
			{
				checksum +=	0x55;
    6294:	80 91 0e 08 	lds	r24, 0x080E
    6298:	90 91 0f 08 	lds	r25, 0x080F
    629c:	8b 5a       	subi	r24, 0xAB	; 171
    629e:	9f 4f       	sbci	r25, 0xFF	; 255
    62a0:	90 93 0f 08 	sts	0x080F, r25
    62a4:	80 93 0e 08 	sts	0x080E, r24
			}
		}

		// Get MSB of mask byte
		if (bytecount == 2)
    62a8:	80 91 f4 07 	lds	r24, 0x07F4
    62ac:	2c 2f       	mov	r18, r28
    62ae:	30 e0       	ldi	r19, 0x00	; 0
    62b0:	82 30       	cpi	r24, 0x02	; 2
    62b2:	51 f4       	brne	.+20     	; 0x62c8 <__vector_20+0xee>
		{
			chanmask16 = 0;
    62b4:	10 92 08 08 	sts	0x0808, r1
    62b8:	10 92 07 08 	sts	0x0807, r1
			chanmask16 = temp << 8;		// High byte of Mask
    62bc:	92 2f       	mov	r25, r18
    62be:	88 27       	eor	r24, r24
    62c0:	90 93 08 08 	sts	0x0808, r25
    62c4:	80 93 07 08 	sts	0x0807, r24
		}

		// Combine with LSB of mask byte
		// Work out how many channels there are supposed to be
		if (bytecount == 3)
    62c8:	80 91 f4 07 	lds	r24, 0x07F4
    62cc:	83 30       	cpi	r24, 0x03	; 3
    62ce:	b9 f0       	breq	.+46     	; 0x62fe <__vector_20+0x124>
				temp16 &= temp16 - 1;
			}
		}

		// Add up checksum up until final packet
		if (bytecount < ((ch_num << 1) + 4))
    62d0:	80 91 09 08 	lds	r24, 0x0809
    62d4:	40 91 f4 07 	lds	r20, 0x07F4
    62d8:	90 e0       	ldi	r25, 0x00	; 0
    62da:	88 0f       	add	r24, r24
    62dc:	99 1f       	adc	r25, r25
    62de:	03 96       	adiw	r24, 0x03	; 3
    62e0:	50 e0       	ldi	r21, 0x00	; 0
    62e2:	84 17       	cp	r24, r20
    62e4:	95 07       	cpc	r25, r21
    62e6:	44 f1       	brlt	.+80     	; 0x6338 <__vector_20+0x15e>
		{
			checksum +=	temp;
    62e8:	80 91 0e 08 	lds	r24, 0x080E
    62ec:	90 91 0f 08 	lds	r25, 0x080F
    62f0:	82 0f       	add	r24, r18
    62f2:	93 1f       	adc	r25, r19
    62f4:	90 93 0f 08 	sts	0x080F, r25
    62f8:	80 93 0e 08 	sts	0x080E, r24
    62fc:	7b c1       	rjmp	.+758    	; 0x65f4 <__vector_20+0x41a>

		// Combine with LSB of mask byte
		// Work out how many channels there are supposed to be
		if (bytecount == 3)
		{
			chanmask16 += (uint16_t)temp;	// Low byte of Mask
    62fe:	80 91 07 08 	lds	r24, 0x0807
    6302:	90 91 08 08 	lds	r25, 0x0808
    6306:	82 0f       	add	r24, r18
    6308:	93 1f       	adc	r25, r19
    630a:	90 93 08 08 	sts	0x0808, r25
    630e:	80 93 07 08 	sts	0x0807, r24
			temp16 = chanmask16;			// Need to keep a copy od chanmask16
    6312:	80 91 07 08 	lds	r24, 0x0807
    6316:	90 91 08 08 	lds	r25, 0x0808

			// Count bits set (number of active channels)				 
			for (ch_num = 0; temp16; ch_num++)
    631a:	10 92 09 08 	sts	0x0809, r1
    631e:	00 97       	sbiw	r24, 0x00	; 0
    6320:	b9 f2       	breq	.-82     	; 0x62d0 <__vector_20+0xf6>
			{
				temp16 &= temp16 - 1;
    6322:	ac 01       	movw	r20, r24
    6324:	41 50       	subi	r20, 0x01	; 1
    6326:	51 09       	sbc	r21, r1
    6328:	84 23       	and	r24, r20
    632a:	95 23       	and	r25, r21
		{
			chanmask16 += (uint16_t)temp;	// Low byte of Mask
			temp16 = chanmask16;			// Need to keep a copy od chanmask16

			// Count bits set (number of active channels)				 
			for (ch_num = 0; temp16; ch_num++)
    632c:	40 91 09 08 	lds	r20, 0x0809
    6330:	4f 5f       	subi	r20, 0xFF	; 255
    6332:	40 93 09 08 	sts	0x0809, r20
    6336:	f3 cf       	rjmp	.-26     	; 0x631e <__vector_20+0x144>
	
		// Process data when all packets received
		else
		{
			// Check checksum 
			checksum &= 0xff;
    6338:	80 91 0e 08 	lds	r24, 0x080E
    633c:	90 91 0f 08 	lds	r25, 0x080F
    6340:	99 27       	eor	r25, r25
    6342:	90 93 0f 08 	sts	0x080F, r25
    6346:	80 93 0e 08 	sts	0x080E, r24

			// Ignore packet if checksum wrong
			if (checksum != temp) // temp holds the transmitted checksum byte
    634a:	80 91 0e 08 	lds	r24, 0x080E
    634e:	90 91 0f 08 	lds	r25, 0x080F
    6352:	82 17       	cp	r24, r18
    6354:	93 07       	cpc	r25, r19
    6356:	49 f0       	breq	.+18     	; 0x636a <__vector_20+0x190>
			{
				Interrupted = false;
    6358:	10 92 f2 07 	sts	0x07F2, r1
				ch_num = 0;
    635c:	10 92 09 08 	sts	0x0809, r1
				checksum = 0;
    6360:	10 92 0f 08 	sts	0x080F, r1
    6364:	10 92 0e 08 	sts	0x080E, r1
    6368:	45 c1       	rjmp	.+650    	; 0x65f4 <__vector_20+0x41a>
			}
			else
			{
				// RC sync established
				Interrupted = true;	
    636a:	81 e0       	ldi	r24, 0x01	; 1
    636c:	80 93 f2 07 	sts	0x07F2, r24
    6370:	80 e0       	ldi	r24, 0x00	; 0
    6372:	90 e0       	ldi	r25, 0x00	; 0

				// Set start of channel data per format
				sindex = 4; // Channel data from byte 5
    6374:	a4 e0       	ldi	r26, 0x04	; 4
				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
    6376:	61 e0       	ldi	r22, 0x01	; 1
    6378:	70 e0       	ldi	r23, 0x00	; 0
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    637a:	ba e0       	ldi	r27, 0x0A	; 10
				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
    637c:	40 91 07 08 	lds	r20, 0x0807
    6380:	50 91 08 08 	lds	r21, 0x0808
    6384:	9b 01       	movw	r18, r22
    6386:	08 2e       	mov	r0, r24
    6388:	02 c0       	rjmp	.+4      	; 0x638e <__vector_20+0x1b4>
    638a:	22 0f       	add	r18, r18
    638c:	33 1f       	adc	r19, r19
    638e:	0a 94       	dec	r0
    6390:	e2 f7       	brpl	.-8      	; 0x638a <__vector_20+0x1b0>
    6392:	24 23       	and	r18, r20
    6394:	35 23       	and	r19, r21
    6396:	23 2b       	or	r18, r19
    6398:	21 f1       	breq	.+72     	; 0x63e2 <__vector_20+0x208>
					{
						// Reconstruct word
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    639a:	ea 2f       	mov	r30, r26
    639c:	f0 e0       	ldi	r31, 0x00	; 0
    639e:	ec 5b       	subi	r30, 0xBC	; 188
    63a0:	fa 4f       	sbci	r31, 0xFA	; 250
    63a2:	40 81       	ld	r20, Z
    63a4:	21 81       	ldd	r18, Z+1	; 0x01

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
    63a6:	88 30       	cpi	r24, 0x08	; 8
    63a8:	c8 f4       	brcc	.+50     	; 0x63dc <__vector_20+0x202>
    63aa:	fc 01       	movw	r30, r24
    63ac:	ef 53       	subi	r30, 0x3F	; 63
    63ae:	fa 4f       	sbci	r31, 0xFA	; 250
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    63b0:	e1 81       	ldd	r30, Z+1	; 0x01
    63b2:	f0 e0       	ldi	r31, 0x00	; 0
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
					{
						// Reconstruct word
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    63b4:	50 e0       	ldi	r21, 0x00	; 0
    63b6:	54 2f       	mov	r21, r20
    63b8:	44 27       	eor	r20, r20
    63ba:	42 0f       	add	r20, r18
    63bc:	51 1d       	adc	r21, r1

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    63be:	b4 9f       	mul	r27, r20
    63c0:	90 01       	movw	r18, r0
    63c2:	b5 9f       	mul	r27, r21
    63c4:	30 0d       	add	r19, r0
    63c6:	11 24       	eor	r1, r1
    63c8:	36 95       	lsr	r19
    63ca:	27 95       	ror	r18
    63cc:	36 95       	lsr	r19
    63ce:	27 95       	ror	r18
    63d0:	ee 0f       	add	r30, r30
    63d2:	ff 1f       	adc	r31, r31
    63d4:	ee 51       	subi	r30, 0x1E	; 30
    63d6:	f8 4f       	sbci	r31, 0xF8	; 248
    63d8:	31 83       	std	Z+1, r19	; 0x01
    63da:	20 83       	st	Z, r18
						} 		

						// Within the bounds of the buffer
						if (sindex < SBUFFER_SIZE)
    63dc:	a6 32       	cpi	r26, 0x26	; 38
    63de:	08 f4       	brcc	.+2      	; 0x63e2 <__vector_20+0x208>
						{
							sindex += 2;
    63e0:	ae 5f       	subi	r26, 0xFE	; 254
    63e2:	01 96       	adiw	r24, 0x01	; 1
				// Set start of channel data per format
				sindex = 4; // Channel data from byte 5

				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
    63e4:	80 31       	cpi	r24, 0x10	; 16
    63e6:	91 05       	cpc	r25, r1
    63e8:	49 f6       	brne	.-110    	; 0x637c <__vector_20+0x1a2>
    63ea:	04 c1       	rjmp	.+520    	; 0x65f4 <__vector_20+0x41a>
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    63ec:	82 30       	cpi	r24, 0x02	; 2
    63ee:	09 f0       	breq	.+2      	; 0x63f2 <__vector_20+0x218>
    63f0:	90 c0       	rjmp	.+288    	; 0x6512 <__vector_20+0x338>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    63f2:	80 91 f4 07 	lds	r24, 0x07F4
    63f6:	88 31       	cpi	r24, 0x18	; 24
    63f8:	09 f0       	breq	.+2      	; 0x63fc <__vector_20+0x222>
    63fa:	fc c0       	rjmp	.+504    	; 0x65f4 <__vector_20+0x41a>
    63fc:	cc 23       	and	r28, r28
    63fe:	59 f0       	breq	.+22     	; 0x6416 <__vector_20+0x23c>
    6400:	81 e0       	ldi	r24, 0x01	; 1
    6402:	cf 3c       	cpi	r28, 0xCF	; 207
    6404:	08 f4       	brcc	.+2      	; 0x6408 <__vector_20+0x22e>
    6406:	80 e0       	ldi	r24, 0x00	; 0
    6408:	91 e3       	ldi	r25, 0x31	; 49
    640a:	89 9f       	mul	r24, r25
    640c:	c0 0d       	add	r28, r0
    640e:	11 24       	eor	r1, r1
    6410:	c4 30       	cpi	r28, 0x04	; 4
    6412:	09 f0       	breq	.+2      	; 0x6416 <__vector_20+0x23c>
    6414:	ef c0       	rjmp	.+478    	; 0x65f4 <__vector_20+0x41a>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    6416:	80 91 5b 05 	lds	r24, 0x055B
    641a:	85 fd       	sbrc	r24, 5
    641c:	eb c0       	rjmp	.+470    	; 0x65f4 <__vector_20+0x41a>
			{
				// RC sync established
				Interrupted = true;
    641e:	81 e0       	ldi	r24, 0x01	; 1
    6420:	80 93 f2 07 	sts	0x07F2, r24
    6424:	80 e0       	ldi	r24, 0x00	; 0
    6426:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    6428:	fc 01       	movw	r30, r24
    642a:	ee 0f       	add	r30, r30
    642c:	ff 1f       	adc	r31, r31
    642e:	ee 51       	subi	r30, 0x1E	; 30
    6430:	f8 4f       	sbci	r31, 0xF8	; 248
    6432:	11 82       	std	Z+1, r1	; 0x01
    6434:	10 82       	st	Z, r1
    6436:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    6438:	88 30       	cpi	r24, 0x08	; 8
    643a:	91 05       	cpc	r25, r1
    643c:	a9 f7       	brne	.-22     	; 0x6428 <__vector_20+0x24e>
    643e:	a8 e5       	ldi	r26, 0x58	; 88
    6440:	70 e0       	ldi	r23, 0x00	; 0
    6442:	c0 e0       	ldi	r28, 0x00	; 0
    6444:	60 e0       	ldi	r22, 0x00	; 0
    6446:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    6448:	21 e0       	ldi	r18, 0x01	; 1
    644a:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    644c:	eb 2f       	mov	r30, r27
    644e:	f0 e0       	ldi	r31, 0x00	; 0
    6450:	ec 5b       	subi	r30, 0xBC	; 188
    6452:	fa 4f       	sbci	r31, 0xFA	; 250
    6454:	80 81       	ld	r24, Z
    6456:	90 e0       	ldi	r25, 0x00	; 0
    6458:	06 2e       	mov	r0, r22
    645a:	02 c0       	rjmp	.+4      	; 0x6460 <__vector_20+0x286>
    645c:	95 95       	asr	r25
    645e:	87 95       	ror	r24
    6460:	0a 94       	dec	r0
    6462:	e2 f7       	brpl	.-8      	; 0x645c <__vector_20+0x282>
    6464:	80 ff       	sbrs	r24, 0
    6466:	17 c0       	rjmp	.+46     	; 0x6496 <__vector_20+0x2bc>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    6468:	ec 2f       	mov	r30, r28
    646a:	f0 e0       	ldi	r31, 0x00	; 0
    646c:	ef 53       	subi	r30, 0x3F	; 63
    646e:	fa 4f       	sbci	r31, 0xFA	; 250
    6470:	e1 81       	ldd	r30, Z+1	; 0x01
    6472:	f0 e0       	ldi	r31, 0x00	; 0
    6474:	ee 0f       	add	r30, r30
    6476:	ff 1f       	adc	r31, r31
    6478:	ee 51       	subi	r30, 0x1E	; 30
    647a:	f8 4f       	sbci	r31, 0xF8	; 248
    647c:	80 81       	ld	r24, Z
    647e:	91 81       	ldd	r25, Z+1	; 0x01
    6480:	a9 01       	movw	r20, r18
    6482:	07 2e       	mov	r0, r23
    6484:	02 c0       	rjmp	.+4      	; 0x648a <__vector_20+0x2b0>
    6486:	44 0f       	add	r20, r20
    6488:	55 1f       	adc	r21, r21
    648a:	0a 94       	dec	r0
    648c:	e2 f7       	brpl	.-8      	; 0x6486 <__vector_20+0x2ac>
    648e:	84 2b       	or	r24, r20
    6490:	95 2b       	or	r25, r21
    6492:	91 83       	std	Z+1, r25	; 0x01
    6494:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    6496:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    6498:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    649a:	68 30       	cpi	r22, 0x08	; 8
    649c:	11 f4       	brne	.+4      	; 0x64a2 <__vector_20+0x2c8>
                    {
                        chan_mask =0;
                        sindex++;
    649e:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    64a0:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    64a2:	7b 30       	cpi	r23, 0x0B	; 11
    64a4:	11 f4       	brne	.+4      	; 0x64aa <__vector_20+0x2d0>
                    {
                        data_mask =0;
                        chan_shift++;
    64a6:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    64a8:	70 e0       	ldi	r23, 0x00	; 0
    64aa:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    64ac:	79 f6       	brne	.-98     	; 0x644c <__vector_20+0x272>
    64ae:	40 e0       	ldi	r20, 0x00	; 0
    64b0:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    64b2:	fa 01       	movw	r30, r20
    64b4:	ee 0f       	add	r30, r30
    64b6:	ff 1f       	adc	r31, r31
    64b8:	ee 51       	subi	r30, 0x1E	; 30
    64ba:	f8 4f       	sbci	r31, 0xF8	; 248
    64bc:	20 81       	ld	r18, Z
    64be:	31 81       	ldd	r19, Z+1	; 0x01
    64c0:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    64c2:	c9 01       	movw	r24, r18
    64c4:	95 95       	asr	r25
    64c6:	87 95       	ror	r24
    64c8:	95 95       	asr	r25
    64ca:	87 95       	ror	r24
    64cc:	82 0f       	add	r24, r18
    64ce:	93 1f       	adc	r25, r19
    64d0:	b9 01       	movw	r22, r18
    64d2:	a3 e0       	ldi	r26, 0x03	; 3
    64d4:	75 95       	asr	r23
    64d6:	67 95       	ror	r22
    64d8:	aa 95       	dec	r26
    64da:	e1 f7       	brne	.-8      	; 0x64d4 <__vector_20+0x2fa>
    64dc:	86 0f       	add	r24, r22
    64de:	97 1f       	adc	r25, r23
    64e0:	b9 01       	movw	r22, r18
    64e2:	b4 e0       	ldi	r27, 0x04	; 4
    64e4:	75 95       	asr	r23
    64e6:	67 95       	ror	r22
    64e8:	ba 95       	dec	r27
    64ea:	e1 f7       	brne	.-8      	; 0x64e4 <__vector_20+0x30a>
    64ec:	86 0f       	add	r24, r22
    64ee:	97 1f       	adc	r25, r23
    64f0:	c5 e0       	ldi	r28, 0x05	; 5
    64f2:	35 95       	asr	r19
    64f4:	27 95       	ror	r18
    64f6:	ca 95       	dec	r28
    64f8:	e1 f7       	brne	.-8      	; 0x64f2 <__vector_20+0x318>
    64fa:	82 0f       	add	r24, r18
    64fc:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    64fe:	8a 55       	subi	r24, 0x5A	; 90
    6500:	91 4f       	sbci	r25, 0xF1	; 241
    6502:	91 83       	std	Z+1, r25	; 0x01
    6504:	80 83       	st	Z, r24
    6506:	4f 5f       	subi	r20, 0xFF	; 255
    6508:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    650a:	48 30       	cpi	r20, 0x08	; 8
    650c:	51 05       	cpc	r21, r1
    650e:	89 f6       	brne	.-94     	; 0x64b2 <__vector_20+0x2d8>
    6510:	71 c0       	rjmp	.+226    	; 0x65f4 <__vector_20+0x41a>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    6512:	83 30       	cpi	r24, 0x03	; 3
    6514:	09 f0       	breq	.+2      	; 0x6518 <__vector_20+0x33e>
    6516:	6e c0       	rjmp	.+220    	; 0x65f4 <__vector_20+0x41a>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    6518:	80 91 f4 07 	lds	r24, 0x07F4
    651c:	8f 30       	cpi	r24, 0x0F	; 15
    651e:	08 f4       	brcc	.+2      	; 0x6522 <__vector_20+0x348>
    6520:	69 c0       	rjmp	.+210    	; 0x65f4 <__vector_20+0x41a>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    6522:	c0 93 53 05 	sts	0x0553, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    6526:	80 91 45 05 	lds	r24, 0x0545
    652a:	84 ff       	sbrs	r24, 4
    652c:	04 c0       	rjmp	.+8      	; 0x6536 <__vector_20+0x35c>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    652e:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    6530:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    6532:	78 e7       	ldi	r23, 0x78	; 120
    6534:	03 c0       	rjmp	.+6      	; 0x653c <__vector_20+0x362>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    6536:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    6538:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    653a:	7c e3       	ldi	r23, 0x3C	; 60
    653c:	e7 e4       	ldi	r30, 0x47	; 71
    653e:	f5 e0       	ldi	r31, 0x05	; 5
    6540:	df 01       	movw	r26, r30
    6542:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    6544:	2c 91       	ld	r18, X
    6546:	82 2f       	mov	r24, r18
    6548:	87 23       	and	r24, r23
    654a:	90 e0       	ldi	r25, 0x00	; 0
    654c:	06 2e       	mov	r0, r22
    654e:	02 c0       	rjmp	.+4      	; 0x6554 <__vector_20+0x37a>
    6550:	95 95       	asr	r25
    6552:	87 95       	ror	r24
    6554:	0a 94       	dec	r0
    6556:	e2 f7       	brpl	.-8      	; 0x6550 <__vector_20+0x376>
    6558:	80 93 09 08 	sts	0x0809, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    655c:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    655e:	90 91 09 08 	lds	r25, 0x0809
    6562:	98 30       	cpi	r25, 0x08	; 8
    6564:	f0 f5       	brcc	.+124    	; 0x65e2 <__vector_20+0x408>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    6566:	2c 23       	and	r18, r28
    6568:	30 e0       	ldi	r19, 0x00	; 0
    656a:	32 2f       	mov	r19, r18
    656c:	22 27       	eor	r18, r18
    656e:	28 0f       	add	r18, r24
    6570:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    6572:	63 30       	cpi	r22, 0x03	; 3
    6574:	11 f4       	brne	.+4      	; 0x657a <__vector_20+0x3a0>
					{
						itemp16 = temp16 - 1024;
    6576:	34 50       	subi	r19, 0x04	; 4
    6578:	01 c0       	rjmp	.+2      	; 0x657c <__vector_20+0x3a2>
					}
					else
					{
						itemp16 = temp16 - 512;	
    657a:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    657c:	c9 01       	movw	r24, r18
    657e:	88 0f       	add	r24, r24
    6580:	99 1f       	adc	r25, r25
    6582:	a9 01       	movw	r20, r18
    6584:	55 95       	asr	r21
    6586:	47 95       	ror	r20
    6588:	84 0f       	add	r24, r20
    658a:	95 1f       	adc	r25, r21
    658c:	a9 01       	movw	r20, r18
    658e:	55 95       	asr	r21
    6590:	47 95       	ror	r20
    6592:	55 95       	asr	r21
    6594:	47 95       	ror	r20
    6596:	84 0f       	add	r24, r20
    6598:	95 1f       	adc	r25, r21
    659a:	a9 01       	movw	r20, r18
    659c:	a3 e0       	ldi	r26, 0x03	; 3
    659e:	55 95       	asr	r21
    65a0:	47 95       	ror	r20
    65a2:	aa 95       	dec	r26
    65a4:	e1 f7       	brne	.-8      	; 0x659e <__vector_20+0x3c4>
    65a6:	84 0f       	add	r24, r20
    65a8:	95 1f       	adc	r25, r21
    65aa:	b4 e0       	ldi	r27, 0x04	; 4
    65ac:	35 95       	asr	r19
    65ae:	27 95       	ror	r18
    65b0:	ba 95       	dec	r27
    65b2:	e1 f7       	brne	.-8      	; 0x65ac <__vector_20+0x3d2>
    65b4:	82 0f       	add	r24, r18
    65b6:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    65b8:	63 30       	cpi	r22, 0x03	; 3
    65ba:	11 f4       	brne	.+4      	; 0x65c0 <__vector_20+0x3e6>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    65bc:	95 95       	asr	r25
    65be:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    65c0:	a0 91 09 08 	lds	r26, 0x0809
    65c4:	b0 e0       	ldi	r27, 0x00	; 0
    65c6:	af 53       	subi	r26, 0x3F	; 63
    65c8:	ba 4f       	sbci	r27, 0xFA	; 250
    65ca:	11 96       	adiw	r26, 0x01	; 1
    65cc:	ac 91       	ld	r26, X
    65ce:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    65d0:	8a 55       	subi	r24, 0x5A	; 90
    65d2:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    65d4:	aa 0f       	add	r26, r26
    65d6:	bb 1f       	adc	r27, r27
    65d8:	ae 51       	subi	r26, 0x1E	; 30
    65da:	b8 4f       	sbci	r27, 0xF8	; 248
    65dc:	11 96       	adiw	r26, 0x01	; 1
    65de:	9c 93       	st	X, r25
    65e0:	8e 93       	st	-X, r24
    65e2:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    65e4:	25 e0       	ldi	r18, 0x05	; 5
    65e6:	e5 35       	cpi	r30, 0x55	; 85
    65e8:	f2 07       	cpc	r31, r18
    65ea:	09 f0       	breq	.+2      	; 0x65ee <__vector_20+0x414>
    65ec:	a9 cf       	rjmp	.-174    	; 0x6540 <__vector_20+0x366>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    65ee:	81 e0       	ldi	r24, 0x01	; 1
    65f0:	80 93 f2 07 	sts	0x07F2, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    65f4:	80 91 f4 07 	lds	r24, 0x07F4
    65f8:	8f 5f       	subi	r24, 0xFF	; 255
    65fa:	80 93 f4 07 	sts	0x07F4, r24
}
    65fe:	ff 91       	pop	r31
    6600:	ef 91       	pop	r30
    6602:	cf 91       	pop	r28
    6604:	bf 91       	pop	r27
    6606:	af 91       	pop	r26
    6608:	9f 91       	pop	r25
    660a:	8f 91       	pop	r24
    660c:	7f 91       	pop	r23
    660e:	6f 91       	pop	r22
    6610:	5f 91       	pop	r21
    6612:	4f 91       	pop	r20
    6614:	3f 91       	pop	r19
    6616:	2f 91       	pop	r18
    6618:	0f 90       	pop	r0
    661a:	0f be       	out	0x3f, r0	; 63
    661c:	0f 90       	pop	r0
    661e:	1f 90       	pop	r1
    6620:	18 95       	reti

00006622 <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    6622:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    6624:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    6628:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    662c:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    662e:	e1 ec       	ldi	r30, 0xC1	; 193
    6630:	f0 e0       	ldi	r31, 0x00	; 0
    6632:	80 81       	ld	r24, Z
    6634:	8f 7e       	andi	r24, 0xEF	; 239
    6636:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    6638:	80 81       	ld	r24, Z
    663a:	8f 77       	andi	r24, 0x7F	; 127
    663c:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    663e:	8f e0       	ldi	r24, 0x0F	; 15
    6640:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    6642:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    6644:	78 94       	sei
    6646:	08 95       	ret

00006648 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    6648:	f8 94       	cli
	
	switch (Config.RxMode)
    664a:	80 91 ea 05 	lds	r24, 0x05EA
    664e:	81 30       	cpi	r24, 0x01	; 1
    6650:	c9 f0       	breq	.+50     	; 0x6684 <init_int+0x3c>
    6652:	44 f4       	brge	.+16     	; 0x6664 <init_int+0x1c>
    6654:	81 11       	cpse	r24, r1
    6656:	2c c0       	rjmp	.+88     	; 0x66b0 <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    6658:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    665c:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    6660:	84 e0       	ldi	r24, 0x04	; 4
    6662:	1b c0       	rjmp	.+54     	; 0x669a <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    6664:	85 30       	cpi	r24, 0x05	; 5
    6666:	24 f5       	brge	.+72     	; 0x66b0 <init_int+0x68>

		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    6668:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    666c:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    6670:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    6672:	80 91 c1 00 	lds	r24, 0x00C1
    6676:	80 68       	ori	r24, 0x80	; 128
    6678:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    667c:	80 91 c1 00 	lds	r24, 0x00C1
    6680:	80 61       	ori	r24, 0x10	; 16
    6682:	14 c0       	rjmp	.+40     	; 0x66ac <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    6684:	80 91 6c 00 	lds	r24, 0x006C
    6688:	81 60       	ori	r24, 0x01	; 1
    668a:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    668e:	80 91 73 00 	lds	r24, 0x0073
    6692:	81 60       	ori	r24, 0x01	; 1
    6694:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    6698:	87 e0       	ldi	r24, 0x07	; 7
    669a:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    669c:	80 91 c1 00 	lds	r24, 0x00C1
    66a0:	8f 77       	andi	r24, 0x7F	; 127
    66a2:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    66a6:	80 91 c1 00 	lds	r24, 0x00C1
    66aa:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    66ac:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    66b0:	8f e0       	ldi	r24, 0x0F	; 15
    66b2:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    66b4:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    66b6:	78 94       	sei
    66b8:	08 95       	ret

000066ba <print_menu_frame>:
//************************************************************
// Print basic menu frame
// style = menu style (0 = main, 1 = sub, 2 = alt)
//************************************************************
void print_menu_frame(uint8_t style)
{
    66ba:	cf 93       	push	r28
    66bc:	c8 2f       	mov	r28, r24
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    66be:	2b e3       	ldi	r18, 0x3B	; 59
    66c0:	30 e0       	ldi	r19, 0x00	; 0
    66c2:	46 e2       	ldi	r20, 0x26	; 38
    66c4:	50 e0       	ldi	r21, 0x00	; 0
    66c6:	69 e0       	ldi	r22, 0x09	; 9
    66c8:	71 e0       	ldi	r23, 0x01	; 1
    66ca:	8a e0       	ldi	r24, 0x0A	; 10
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    66d2:	2b e3       	ldi	r18, 0x3B	; 59
    66d4:	30 e0       	ldi	r19, 0x00	; 0
    66d6:	40 e5       	ldi	r20, 0x50	; 80
    66d8:	50 e0       	ldi	r21, 0x00	; 0
    66da:	69 e0       	ldi	r22, 0x09	; 9
    66dc:	71 e0       	ldi	r23, 0x01	; 1
    66de:	89 e0       	ldi	r24, 0x09	; 9
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

	switch (style)
    66e6:	c1 30       	cpi	r28, 0x01	; 1
    66e8:	11 f1       	breq	.+68     	; 0x672e <print_menu_frame+0x74>
    66ea:	70 f0       	brcs	.+28     	; 0x6708 <print_menu_frame+0x4e>
    66ec:	c3 30       	cpi	r28, 0x03	; 3
    66ee:	91 f1       	breq	.+100    	; 0x6754 <print_menu_frame+0x9a>
    66f0:	c0 3a       	cpi	r28, 0xA0	; 160
    66f2:	09 f0       	breq	.+2      	; 0x66f6 <print_menu_frame+0x3c>
    66f4:	43 c0       	rjmp	.+134    	; 0x677c <print_menu_frame+0xc2>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    66f6:	26 e3       	ldi	r18, 0x36	; 54
    66f8:	30 e0       	ldi	r19, 0x00	; 0
    66fa:	40 e0       	ldi	r20, 0x00	; 0
    66fc:	50 e0       	ldi	r21, 0x00	; 0
    66fe:	61 e2       	ldi	r22, 0x21	; 33
    6700:	7a e0       	ldi	r23, 0x0A	; 10
    6702:	88 e1       	ldi	r24, 0x18	; 24
    6704:	91 e0       	ldi	r25, 0x01	; 1
    6706:	1b c0       	rjmp	.+54     	; 0x673e <print_menu_frame+0x84>

	switch (style)
	{
		case BASIC:
			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    6708:	29 e3       	ldi	r18, 0x39	; 57
    670a:	30 e0       	ldi	r19, 0x00	; 0
    670c:	40 e0       	ldi	r20, 0x00	; 0
    670e:	50 e0       	ldi	r21, 0x00	; 0
    6710:	69 e0       	ldi	r22, 0x09	; 9
    6712:	71 e0       	ldi	r23, 0x01	; 1
    6714:	8c e0       	ldi	r24, 0x0C	; 12
    6716:	90 e0       	ldi	r25, 0x00	; 0
    6718:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    671c:	29 e3       	ldi	r18, 0x39	; 57
    671e:	30 e0       	ldi	r19, 0x00	; 0
    6720:	48 e7       	ldi	r20, 0x78	; 120
    6722:	50 e0       	ldi	r21, 0x00	; 0
    6724:	69 e0       	ldi	r22, 0x09	; 9
    6726:	71 e0       	ldi	r23, 0x01	; 1
    6728:	8b e0       	ldi	r24, 0x0B	; 11
    672a:	90 e0       	ldi	r25, 0x00	; 0
    672c:	25 c0       	rjmp	.+74     	; 0x6778 <print_menu_frame+0xbe>
			break;
			
		case EDIT:
			// For editing items
			LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Def.
    672e:	26 e3       	ldi	r18, 0x36	; 54
    6730:	30 e0       	ldi	r19, 0x00	; 0
    6732:	40 e0       	ldi	r20, 0x00	; 0
    6734:	50 e0       	ldi	r21, 0x00	; 0
    6736:	61 e2       	ldi	r22, 0x21	; 33
    6738:	7a e0       	ldi	r23, 0x0A	; 10
    673a:	80 e1       	ldi	r24, 0x10	; 16
    673c:	90 e0       	ldi	r25, 0x00	; 0
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    673e:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    6742:	26 e3       	ldi	r18, 0x36	; 54
    6744:	30 e0       	ldi	r19, 0x00	; 0
    6746:	47 e6       	ldi	r20, 0x67	; 103
    6748:	50 e0       	ldi	r21, 0x00	; 0
    674a:	61 e2       	ldi	r22, 0x21	; 33
    674c:	7a e0       	ldi	r23, 0x0A	; 10
    674e:	81 e1       	ldi	r24, 0x11	; 17
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	12 c0       	rjmp	.+36     	; 0x6778 <print_menu_frame+0xbe>
			break;
			
		case LOG:
			// Clear or exit
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    6754:	29 e3       	ldi	r18, 0x39	; 57
    6756:	30 e0       	ldi	r19, 0x00	; 0
    6758:	40 e0       	ldi	r20, 0x00	; 0
    675a:	50 e0       	ldi	r21, 0x00	; 0
    675c:	69 e0       	ldi	r22, 0x09	; 9
    675e:	71 e0       	ldi	r23, 0x01	; 1
    6760:	8c e0       	ldi	r24, 0x0C	; 12
    6762:	90 e0       	ldi	r25, 0x00	; 0
    6764:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
			LCD_Display_Text(291, (const unsigned char*)Verdana8, 100, 54);	// Clear
    6768:	26 e3       	ldi	r18, 0x36	; 54
    676a:	30 e0       	ldi	r19, 0x00	; 0
    676c:	44 e6       	ldi	r20, 0x64	; 100
    676e:	50 e0       	ldi	r21, 0x00	; 0
    6770:	61 e2       	ldi	r22, 0x21	; 33
    6772:	7a e0       	ldi	r23, 0x0A	; 10
    6774:	83 e2       	ldi	r24, 0x23	; 35
    6776:	91 e0       	ldi	r25, 0x01	; 1
    6778:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    677c:	80 e0       	ldi	r24, 0x00	; 0
    677e:	91 e0       	ldi	r25, 0x01	; 1
}
    6780:	cf 91       	pop	r28
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    6782:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <write_buffer>

00006786 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    6786:	cf 93       	push	r28
    6788:	df 93       	push	r29
    678a:	cd b7       	in	r28, 0x3d	; 61
    678c:	de b7       	in	r29, 0x3e	; 62
    678e:	2a 97       	sbiw	r28, 0x0a	; 10
    6790:	0f b6       	in	r0, 0x3f	; 63
    6792:	f8 94       	cli
    6794:	de bf       	out	0x3e, r29	; 62
    6796:	0f be       	out	0x3f, r0	; 63
    6798:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    679a:	25 e0       	ldi	r18, 0x05	; 5
    679c:	62 9f       	mul	r22, r18
    679e:	80 0d       	add	r24, r0
    67a0:	91 1d       	adc	r25, r1
    67a2:	11 24       	eor	r1, r1
    67a4:	bc 01       	movw	r22, r24
    67a6:	45 e0       	ldi	r20, 0x05	; 5
    67a8:	50 e0       	ldi	r21, 0x00	; 0
    67aa:	ce 01       	movw	r24, r28
    67ac:	06 96       	adiw	r24, 0x06	; 6
    67ae:	0e 94 af 4f 	call	0x9f5e	; 0x9f5e <memcpy_P>
	return (range);
    67b2:	85 e0       	ldi	r24, 0x05	; 5
    67b4:	fe 01       	movw	r30, r28
    67b6:	36 96       	adiw	r30, 0x06	; 6
    67b8:	de 01       	movw	r26, r28
    67ba:	11 96       	adiw	r26, 0x01	; 1
    67bc:	01 90       	ld	r0, Z+
    67be:	0d 92       	st	X+, r0
    67c0:	8a 95       	dec	r24
    67c2:	e1 f7       	brne	.-8      	; 0x67bc <get_menu_range+0x36>
    67c4:	29 81       	ldd	r18, Y+1	; 0x01
    67c6:	3a 81       	ldd	r19, Y+2	; 0x02
    67c8:	4b 81       	ldd	r20, Y+3	; 0x03
    67ca:	5c 81       	ldd	r21, Y+4	; 0x04
    67cc:	6d 81       	ldd	r22, Y+5	; 0x05
}
    67ce:	70 e0       	ldi	r23, 0x00	; 0
    67d0:	80 e0       	ldi	r24, 0x00	; 0
    67d2:	90 e0       	ldi	r25, 0x00	; 0
    67d4:	2a 96       	adiw	r28, 0x0a	; 10
    67d6:	0f b6       	in	r0, 0x3f	; 63
    67d8:	f8 94       	cli
    67da:	de bf       	out	0x3e, r29	; 62
    67dc:	0f be       	out	0x3f, r0	; 63
    67de:	cd bf       	out	0x3d, r28	; 61
    67e0:	df 91       	pop	r29
    67e2:	cf 91       	pop	r28
    67e4:	08 95       	ret

000067e6 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    67e6:	0f 93       	push	r16
    67e8:	1f 93       	push	r17
    67ea:	cf 93       	push	r28
    67ec:	df 93       	push	r29
    67ee:	fa 01       	movw	r30, r20
    67f0:	10 e0       	ldi	r17, 0x00	; 0
    67f2:	c2 2f       	mov	r28, r18
    67f4:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    67f6:	66 23       	and	r22, r22
    67f8:	19 f0       	breq	.+6      	; 0x6800 <print_menu_text+0x1a>
    67fa:	62 50       	subi	r22, 0x02	; 2
    67fc:	62 30       	cpi	r22, 0x02	; 2
    67fe:	78 f4       	brcc	.+30     	; 0x681e <print_menu_text+0x38>
    6800:	4a e0       	ldi	r20, 0x0A	; 10
    6802:	6a e6       	ldi	r22, 0x6A	; 106
    6804:	75 e0       	ldi	r23, 0x05	; 5
    6806:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    680a:	98 01       	movw	r18, r16
    680c:	ae 01       	movw	r20, r28
    680e:	61 e2       	ldi	r22, 0x21	; 33
    6810:	7a e0       	ldi	r23, 0x0A	; 10
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    6812:	df 91       	pop	r29
    6814:	cf 91       	pop	r28
    6816:	1f 91       	pop	r17
    6818:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    681a:	0c 94 64 44 	jmp	0x88c8	; 0x88c8 <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    681e:	98 01       	movw	r18, r16
    6820:	ae 01       	movw	r20, r28
    6822:	61 e2       	ldi	r22, 0x21	; 33
    6824:	7a e0       	ldi	r23, 0x0A	; 10
    6826:	cf 01       	movw	r24, r30
	}
}
    6828:	df 91       	pop	r29
    682a:	cf 91       	pop	r28
    682c:	1f 91       	pop	r17
    682e:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    6830:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <LCD_Display_Text>

00006834 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    6834:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    6836:	93 b1       	in	r25, 0x03	; 3
    6838:	90 7f       	andi	r25, 0xF0	; 240
    683a:	90 93 12 08 	sts	0x0812, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    683e:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    6840:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    6842:	90 91 12 08 	lds	r25, 0x0812
    6846:	90 3f       	cpi	r25, 0xF0	; 240
    6848:	c9 f4       	brne	.+50     	; 0x687c <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    684a:	83 b1       	in	r24, 0x03	; 3
    684c:	80 7f       	andi	r24, 0xF0	; 240
    684e:	e7 ea       	ldi	r30, 0xA7	; 167
    6850:	f1 e6       	ldi	r31, 0x61	; 97
    6852:	31 97       	sbiw	r30, 0x01	; 1
    6854:	f1 f7       	brne	.-4      	; 0x6852 <poll_buttons+0x1e>
    6856:	00 c0       	rjmp	.+0      	; 0x6858 <poll_buttons+0x24>
    6858:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    685a:	23 b1       	in	r18, 0x03	; 3
    685c:	48 2f       	mov	r20, r24
    685e:	50 e0       	ldi	r21, 0x00	; 0
    6860:	20 7f       	andi	r18, 0xF0	; 240
    6862:	30 e0       	ldi	r19, 0x00	; 0
    6864:	42 17       	cp	r20, r18
    6866:	53 07       	cpc	r21, r19
    6868:	19 f4       	brne	.+6      	; 0x6870 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    686a:	80 93 12 08 	sts	0x0812, r24
    686e:	01 c0       	rjmp	.+2      	; 0x6872 <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    6870:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    6872:	10 92 30 05 	sts	0x0530, r1
		button_multiplier = 1;
    6876:	70 93 13 08 	sts	0x0813, r23
    687a:	e3 cf       	rjmp	.-58     	; 0x6842 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    687c:	66 23       	and	r22, r22
    687e:	71 f0       	breq	.+28     	; 0x689c <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    6880:	90 91 30 05 	lds	r25, 0x0530
    6884:	9f 5f       	subi	r25, 0xFF	; 255
    6886:	90 93 30 05 	sts	0x0530, r25
		if (button_count >= 10)
    688a:	9a 30       	cpi	r25, 0x0A	; 10
    688c:	38 f0       	brcs	.+14     	; 0x689c <poll_buttons+0x68>
		{
			button_count = 0;
    688e:	10 92 30 05 	sts	0x0530, r1
			button_multiplier ++;
    6892:	90 91 13 08 	lds	r25, 0x0813
    6896:	9f 5f       	subi	r25, 0xFF	; 255
    6898:	90 93 13 08 	sts	0x0813, r25
		}
	}

	return buttons;
}
    689c:	08 95       	ret

0000689e <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    689e:	2f 92       	push	r2
    68a0:	3f 92       	push	r3
    68a2:	4f 92       	push	r4
    68a4:	5f 92       	push	r5
    68a6:	6f 92       	push	r6
    68a8:	7f 92       	push	r7
    68aa:	8f 92       	push	r8
    68ac:	9f 92       	push	r9
    68ae:	af 92       	push	r10
    68b0:	bf 92       	push	r11
    68b2:	cf 92       	push	r12
    68b4:	df 92       	push	r13
    68b6:	ef 92       	push	r14
    68b8:	ff 92       	push	r15
    68ba:	0f 93       	push	r16
    68bc:	1f 93       	push	r17
    68be:	cf 93       	push	r28
    68c0:	df 93       	push	r29
    68c2:	cd b7       	in	r28, 0x3d	; 61
    68c4:	de b7       	in	r29, 0x3e	; 62
    68c6:	67 97       	sbiw	r28, 0x17	; 23
    68c8:	0f b6       	in	r0, 0x3f	; 63
    68ca:	f8 94       	cli
    68cc:	de bf       	out	0x3e, r29	; 62
    68ce:	0f be       	out	0x3f, r0	; 63
    68d0:	cd bf       	out	0x3d, r28	; 61
    68d2:	3c 01       	movw	r6, r24
    68d4:	79 8b       	std	Y+17, r23	; 0x11
    68d6:	68 8b       	std	Y+16, r22	; 0x10
    68d8:	4a 87       	std	Y+10, r20	; 0x0a
    68da:	ed 82       	std	Y+5, r14	; 0x05
    68dc:	fe 82       	std	Y+6, r15	; 0x06
    68de:	0f 83       	std	Y+7, r16	; 0x07
    68e0:	18 87       	std	Y+8, r17	; 0x08
    68e2:	29 87       	std	Y+9, r18	; 0x09
    68e4:	bd 8a       	std	Y+21, r11	; 0x15
    68e6:	ac 8a       	std	Y+20, r10	; 0x14
    68e8:	4e 2d       	mov	r20, r14
    68ea:	3f 2d       	mov	r19, r15
    68ec:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    68ee:	fb 01       	movw	r30, r22
    68f0:	20 81       	ld	r18, Z
    68f2:	a2 2e       	mov	r10, r18
    68f4:	bb 24       	eor	r11, r11
    68f6:	a7 fc       	sbrc	r10, 7
    68f8:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    68fa:	12 30       	cpi	r17, 0x02	; 2
    68fc:	29 f4       	brne	.+10     	; 0x6908 <do_menu_item+0x6a>
	{
		value = value * mult;
    68fe:	5a 85       	ldd	r21, Y+10	; 0x0a
    6900:	25 03       	mulsu	r18, r21
    6902:	50 01       	movw	r10, r0
    6904:	11 24       	eor	r1, r1
    6906:	02 c0       	rjmp	.+4      	; 0x690c <do_menu_item+0x6e>
	}
	else mult = 1;
    6908:	81 e0       	ldi	r24, 0x01	; 1
    690a:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    690c:	20 ef       	ldi	r18, 0xF0	; 240
    690e:	20 93 12 08 	sts	0x0812, r18
				value = (range.default_value * mult);				
			}
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    6912:	fa 85       	ldd	r31, Y+10	; 0x0a
    6914:	ef 2f       	mov	r30, r31
    6916:	f0 e0       	ldi	r31, 0x00	; 0
    6918:	fb 8b       	std	Y+19, r31	; 0x13
    691a:	ea 8b       	std	Y+18, r30	; 0x12
    691c:	2a 85       	ldd	r18, Y+10	; 0x0a
    691e:	42 03       	mulsu	r20, r18
    6920:	10 01       	movw	r2, r0
    6922:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    6924:	32 03       	mulsu	r19, r18
    6926:	c0 01       	movw	r24, r0
    6928:	11 24       	eor	r1, r1
    692a:	9f 87       	std	Y+15, r25	; 0x0f
    692c:	8e 87       	std	Y+14, r24	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    692e:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    6930:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    6932:	41 2c       	mov	r4, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    6934:	f1 2c       	mov	r15, r1
		{
			button_inc = 5; // For servos
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    6936:	01 e0       	ldi	r16, 0x01	; 1
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    6938:	f3 01       	movw	r30, r6
    693a:	ee 0f       	add	r30, r30
    693c:	ff 1f       	adc	r31, r31
    693e:	e8 5f       	subi	r30, 0xF8	; 248
    6940:	f1 4f       	sbci	r31, 0xF1	; 241
    6942:	fc 87       	std	Y+12, r31	; 0x0c
    6944:	eb 87       	std	Y+11, r30	; 0x0b
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    6946:	2c 2d       	mov	r18, r12
    6948:	33 27       	eor	r19, r19
    694a:	27 fd       	sbrc	r18, 7
    694c:	30 95       	com	r19
    694e:	3f 8b       	std	Y+23, r19	; 0x17
    6950:	2e 8b       	std	Y+22, r18	; 0x16
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    6952:	be ef       	ldi	r27, 0xFE	; 254
    6954:	9b 2e       	mov	r9, r27
    6956:	91 0e       	add	r9, r17

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    6958:	86 e2       	ldi	r24, 0x26	; 38
    695a:	ec a5       	ldd	r30, Y+44	; 0x2c
    695c:	fd a5       	ldd	r31, Y+45	; 0x2d
    695e:	8e 9f       	mul	r24, r30
    6960:	60 01       	movw	r12, r0
    6962:	8f 9f       	mul	r24, r31
    6964:	d0 0c       	add	r13, r0
    6966:	11 24       	eor	r1, r1
    6968:	96 01       	movw	r18, r12
    696a:	29 5a       	subi	r18, 0xA9	; 169
    696c:	39 4f       	sbci	r19, 0xF9	; 249
    696e:	69 01       	movw	r12, r18
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
    6970:	80 91 12 08 	lds	r24, 0x0812
    6974:	28 2f       	mov	r18, r24
    6976:	2f 7b       	andi	r18, 0xBF	; 191
    6978:	20 3a       	cpi	r18, 0xA0	; 160
    697a:	09 f4       	brne	.+2      	; 0x697e <do_menu_item+0xe0>
    697c:	36 c1       	rjmp	.+620    	; 0x6bea <do_menu_item+0x34c>
		// Increment loop count so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    697e:	88 20       	and	r8, r8
    6980:	11 f0       	breq	.+4      	; 0x6986 <do_menu_item+0xe8>
		{
			button_inc = 5; // For servos
    6982:	25 e0       	ldi	r18, 0x05	; 5
    6984:	01 c0       	rjmp	.+2      	; 0x6988 <do_menu_item+0xea>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    6986:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    6988:	80 3f       	cpi	r24, 0xF0	; 240
    698a:	19 f0       	breq	.+6      	; 0x6992 <do_menu_item+0xf4>
		{
			button_update++;
    698c:	43 94       	inc	r4

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    698e:	24 15       	cp	r18, r4
    6990:	10 f4       	brcc	.+4      	; 0x6996 <do_menu_item+0xf8>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    6992:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    6994:	41 2c       	mov	r4, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    6996:	88 20       	and	r8, r8
    6998:	49 f0       	breq	.+18     	; 0x69ac <do_menu_item+0x10e>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
	{
		// Increment loop count so that we can time various things
		display_update++;
    699a:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    699c:	37 e0       	ldi	r19, 0x07	; 7
    699e:	3f 15       	cp	r19, r15
    69a0:	10 f4       	brcc	.+4      	; 0x69a6 <do_menu_item+0x108>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    69a2:	80 3f       	cpi	r24, 0xF0	; 240
    69a4:	19 f4       	brne	.+6      	; 0x69ac <do_menu_item+0x10e>
    69a6:	99 23       	and	r25, r25
    69a8:	09 f4       	brne	.+2      	; 0x69ac <do_menu_item+0x10e>
    69aa:	85 c0       	rjmp	.+266    	; 0x6ab6 <do_menu_item+0x218>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    69ac:	80 e0       	ldi	r24, 0x00	; 0
    69ae:	91 e0       	ldi	r25, 0x01	; 1
    69b0:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>

			// Print warning
			if (range.style == 4)
    69b4:	14 30       	cpi	r17, 0x04	; 4
    69b6:	a9 f4       	brne	.+42     	; 0x69e2 <do_menu_item+0x144>
			{
				LCD_Display_Text(281,(const unsigned char*)Verdana8,0,0);	// Warning
    69b8:	20 e0       	ldi	r18, 0x00	; 0
    69ba:	30 e0       	ldi	r19, 0x00	; 0
    69bc:	40 e0       	ldi	r20, 0x00	; 0
    69be:	50 e0       	ldi	r21, 0x00	; 0
    69c0:	61 e2       	ldi	r22, 0x21	; 33
    69c2:	7a e0       	ldi	r23, 0x0A	; 10
    69c4:	89 e1       	ldi	r24, 0x19	; 25
    69c6:	91 e0       	ldi	r25, 0x01	; 1
    69c8:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
    69cc:	2c e0       	ldi	r18, 0x0C	; 12
    69ce:	30 e0       	ldi	r19, 0x00	; 0
    69d0:	49 e1       	ldi	r20, 0x19	; 25
    69d2:	50 e0       	ldi	r21, 0x00	; 0
    69d4:	61 e2       	ldi	r22, 0x21	; 33
    69d6:	7a e0       	ldi	r23, 0x0A	; 10
    69d8:	8a e1       	ldi	r24, 0x1A	; 26
    69da:	91 e0       	ldi	r25, 0x01	; 1
    69dc:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
    69e0:	39 c0       	rjmp	.+114    	; 0x6a54 <do_menu_item+0x1b6>
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    69e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    69e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    69e6:	85 91       	lpm	r24, Z+
    69e8:	94 91       	lpm	r25, Z
    69ea:	20 e0       	ldi	r18, 0x00	; 0
    69ec:	30 e0       	ldi	r19, 0x00	; 0
    69ee:	40 e0       	ldi	r20, 0x00	; 0
    69f0:	50 e0       	ldi	r21, 0x00	; 0
    69f2:	63 e7       	ldi	r22, 0x73	; 115
    69f4:	71 e0       	ldi	r23, 0x01	; 1
    69f6:	0e 94 65 26 	call	0x4cca	; 0x4cca <gLCDprint_Menu_P>
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    69fa:	11 23       	and	r17, r17
    69fc:	19 f0       	breq	.+6      	; 0x6a04 <do_menu_item+0x166>
    69fe:	51 e0       	ldi	r21, 0x01	; 1
    6a00:	59 15       	cp	r21, r9
    6a02:	40 f1       	brcs	.+80     	; 0x6a54 <do_menu_item+0x1b6>
    6a04:	4a e0       	ldi	r20, 0x0A	; 10
    6a06:	6a e6       	ldi	r22, 0x6A	; 106
    6a08:	75 e0       	ldi	r23, 0x05	; 5
    6a0a:	c5 01       	movw	r24, r10
    6a0c:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    6a10:	ae 01       	movw	r20, r28
    6a12:	4f 5f       	subi	r20, 0xFF	; 255
    6a14:	5f 4f       	sbci	r21, 0xFF	; 255
    6a16:	63 e7       	ldi	r22, 0x73	; 115
    6a18:	71 e0       	ldi	r23, 0x01	; 1
    6a1a:	0e 94 15 43 	call	0x862a	; 0x862a <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    6a1e:	89 81       	ldd	r24, Y+1	; 0x01
    6a20:	9a 81       	ldd	r25, Y+2	; 0x02
    6a22:	70 e8       	ldi	r23, 0x80	; 128
    6a24:	e7 2e       	mov	r14, r23
    6a26:	f1 2c       	mov	r15, r1
    6a28:	e8 1a       	sub	r14, r24
    6a2a:	f9 0a       	sbc	r15, r25
    6a2c:	f6 94       	lsr	r15
    6a2e:	e7 94       	ror	r14
    6a30:	8e 89       	ldd	r24, Y+22	; 0x16
    6a32:	9f 89       	ldd	r25, Y+23	; 0x17
    6a34:	e8 0e       	add	r14, r24
    6a36:	f9 1e       	adc	r15, r25
    6a38:	4a e0       	ldi	r20, 0x0A	; 10
    6a3a:	6a e6       	ldi	r22, 0x6A	; 106
    6a3c:	75 e0       	ldi	r23, 0x05	; 5
    6a3e:	c5 01       	movw	r24, r10
    6a40:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <__itoa_ncheck>
    6a44:	29 e1       	ldi	r18, 0x19	; 25
    6a46:	30 e0       	ldi	r19, 0x00	; 0
    6a48:	a7 01       	movw	r20, r14
    6a4a:	63 e7       	ldi	r22, 0x73	; 115
    6a4c:	71 e0       	ldi	r23, 0x01	; 1
    6a4e:	0e 94 64 44 	call	0x88c8	; 0x88c8 <mugui_lcd_puts>
    6a52:	29 c0       	rjmp	.+82     	; 0x6aa6 <do_menu_item+0x208>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    6a54:	ec 88       	ldd	r14, Y+20	; 0x14
    6a56:	fd 88       	ldd	r15, Y+21	; 0x15
    6a58:	ea 0c       	add	r14, r10
    6a5a:	fb 1c       	adc	r15, r11
    6a5c:	f7 01       	movw	r30, r14
    6a5e:	ee 0f       	add	r30, r30
    6a60:	ff 1f       	adc	r31, r31
    6a62:	e8 5f       	subi	r30, 0xF8	; 248
    6a64:	f1 4f       	sbci	r31, 0xF1	; 241
    6a66:	85 91       	lpm	r24, Z+
    6a68:	94 91       	lpm	r25, Z
    6a6a:	0e 94 63 43 	call	0x86c6	; 0x86c6 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    6a6e:	ae 01       	movw	r20, r28
    6a70:	4f 5f       	subi	r20, 0xFF	; 255
    6a72:	5f 4f       	sbci	r21, 0xFF	; 255
    6a74:	63 e7       	ldi	r22, 0x73	; 115
    6a76:	71 e0       	ldi	r23, 0x01	; 1
    6a78:	8a e6       	ldi	r24, 0x6A	; 106
    6a7a:	95 e0       	ldi	r25, 0x05	; 5
    6a7c:	0e 94 15 43 	call	0x862a	; 0x862a <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    6a80:	89 81       	ldd	r24, Y+1	; 0x01
    6a82:	9a 81       	ldd	r25, Y+2	; 0x02
    6a84:	40 e8       	ldi	r20, 0x80	; 128
    6a86:	50 e0       	ldi	r21, 0x00	; 0
    6a88:	48 1b       	sub	r20, r24
    6a8a:	59 0b       	sbc	r21, r25
    6a8c:	56 95       	lsr	r21
    6a8e:	47 95       	ror	r20
    6a90:	29 e1       	ldi	r18, 0x19	; 25
    6a92:	30 e0       	ldi	r19, 0x00	; 0
    6a94:	63 e7       	ldi	r22, 0x73	; 115
    6a96:	71 e0       	ldi	r23, 0x01	; 1
    6a98:	c7 01       	movw	r24, r14
    6a9a:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
			}

			// Print appropriate menu frame
			// Save/Abort screen
			if (range.style == 4)
    6a9e:	14 30       	cpi	r17, 0x04	; 4
    6aa0:	11 f4       	brne	.+4      	; 0x6aa6 <do_menu_item+0x208>
			{
				// Print bottom markers
				print_menu_frame(ABORT);				
    6aa2:	80 ea       	ldi	r24, 0xA0	; 160
    6aa4:	01 c0       	rjmp	.+2      	; 0x6aa8 <do_menu_item+0x20a>
			}
			// Save/default screen
			else
			{
				// Print bottom markers
				print_menu_frame(EDIT);				
    6aa6:	81 e0       	ldi	r24, 0x01	; 1
    6aa8:	0e 94 5d 33 	call	0x66ba	; 0x66ba <print_menu_frame>
			}

			// Write from buffer
			write_buffer(buffer);
    6aac:	80 e0       	ldi	r24, 0x00	; 0
    6aae:	91 e0       	ldi	r25, 0x01	; 1
    6ab0:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    6ab4:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    6ab6:	12 30       	cpi	r17, 0x02	; 2
    6ab8:	09 f1       	breq	.+66     	; 0x6afc <do_menu_item+0x25e>
    6aba:	60 f4       	brcc	.+24     	; 0x6ad4 <do_menu_item+0x236>
    6abc:	11 23       	and	r17, r17
    6abe:	b1 f0       	breq	.+44     	; 0x6aec <do_menu_item+0x24e>
    6ac0:	11 30       	cpi	r17, 0x01	; 1
    6ac2:	69 f5       	brne	.+90     	; 0x6b1e <do_menu_item+0x280>
    6ac4:	2f e3       	ldi	r18, 0x3F	; 63
    6ac6:	32 e4       	ldi	r19, 0x42	; 66
    6ac8:	5f e0       	ldi	r21, 0x0F	; 15
    6aca:	21 50       	subi	r18, 0x01	; 1
    6acc:	30 40       	sbci	r19, 0x00	; 0
    6ace:	50 40       	sbci	r21, 0x00	; 0
    6ad0:	e1 f7       	brne	.-8      	; 0x6aca <do_menu_item+0x22c>
    6ad2:	23 c0       	rjmp	.+70     	; 0x6b1a <do_menu_item+0x27c>
    6ad4:	13 30       	cpi	r17, 0x03	; 3
    6ad6:	d1 f0       	breq	.+52     	; 0x6b0c <do_menu_item+0x26e>
    6ad8:	14 30       	cpi	r17, 0x04	; 4
    6ada:	09 f5       	brne	.+66     	; 0x6b1e <do_menu_item+0x280>
    6adc:	5f e3       	ldi	r21, 0x3F	; 63
    6ade:	82 e4       	ldi	r24, 0x42	; 66
    6ae0:	9f e0       	ldi	r25, 0x0F	; 15
    6ae2:	51 50       	subi	r21, 0x01	; 1
    6ae4:	80 40       	sbci	r24, 0x00	; 0
    6ae6:	90 40       	sbci	r25, 0x00	; 0
    6ae8:	e1 f7       	brne	.-8      	; 0x6ae2 <do_menu_item+0x244>
    6aea:	17 c0       	rjmp	.+46     	; 0x6b1a <do_menu_item+0x27c>
    6aec:	9f e7       	ldi	r25, 0x7F	; 127
    6aee:	ea e1       	ldi	r30, 0x1A	; 26
    6af0:	f6 e0       	ldi	r31, 0x06	; 6
    6af2:	91 50       	subi	r25, 0x01	; 1
    6af4:	e0 40       	sbci	r30, 0x00	; 0
    6af6:	f0 40       	sbci	r31, 0x00	; 0
    6af8:	e1 f7       	brne	.-8      	; 0x6af2 <do_menu_item+0x254>
    6afa:	0f c0       	rjmp	.+30     	; 0x6b1a <do_menu_item+0x27c>
    6afc:	8f e7       	ldi	r24, 0x7F	; 127
    6afe:	9a e1       	ldi	r25, 0x1A	; 26
    6b00:	e6 e0       	ldi	r30, 0x06	; 6
    6b02:	81 50       	subi	r24, 0x01	; 1
    6b04:	90 40       	sbci	r25, 0x00	; 0
    6b06:	e0 40       	sbci	r30, 0x00	; 0
    6b08:	e1 f7       	brne	.-8      	; 0x6b02 <do_menu_item+0x264>
    6b0a:	07 c0       	rjmp	.+14     	; 0x6b1a <do_menu_item+0x27c>
    6b0c:	ff e7       	ldi	r31, 0x7F	; 127
    6b0e:	28 e3       	ldi	r18, 0x38	; 56
    6b10:	31 e0       	ldi	r19, 0x01	; 1
    6b12:	f1 50       	subi	r31, 0x01	; 1
    6b14:	20 40       	sbci	r18, 0x00	; 0
    6b16:	30 40       	sbci	r19, 0x00	; 0
    6b18:	e1 f7       	brne	.-8      	; 0x6b12 <do_menu_item+0x274>
    6b1a:	00 c0       	rjmp	.+0      	; 0x6b1c <do_menu_item+0x27e>
    6b1c:	00 00       	nop
		}

		// Poll buttons when idle.
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    6b1e:	88 20       	and	r8, r8
    6b20:	39 f0       	breq	.+14     	; 0x6b30 <do_menu_item+0x292>
		{
			button = (PINB & 0xf0);	
    6b22:	83 b1       	in	r24, 0x03	; 3
    6b24:	80 7f       	andi	r24, 0xF0	; 240
    6b26:	80 93 12 08 	sts	0x0812, r24
			button_multiplier = 1;
    6b2a:	00 93 13 08 	sts	0x0813, r16
    6b2e:	03 c0       	rjmp	.+6      	; 0x6b36 <do_menu_item+0x298>
		}
		else
		{
			poll_buttons(true);
    6b30:	81 e0       	ldi	r24, 0x01	; 1
    6b32:	0e 94 1a 34 	call	0x6834	; 0x6834 <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    6b36:	80 91 12 08 	lds	r24, 0x0812
    6b3a:	80 3f       	cpi	r24, 0xF0	; 240
    6b3c:	69 f1       	breq	.+90     	; 0x6b98 <do_menu_item+0x2fa>
    6b3e:	88 20       	and	r8, r8
    6b40:	c9 f0       	breq	.+50     	; 0x6b74 <do_menu_item+0x2d6>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6b42:	80 3d       	cpi	r24, 0xD0	; 208
    6b44:	51 f4       	brne	.+20     	; 0x6b5a <do_menu_item+0x2bc>
		{
			if (button_lock == false)
    6b46:	51 10       	cpse	r5, r1
    6b48:	74 c0       	rjmp	.+232    	; 0x6c32 <do_menu_item+0x394>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    6b4a:	80 91 13 08 	lds	r24, 0x0813
    6b4e:	ed 85       	ldd	r30, Y+13	; 0x0d
    6b50:	e8 9f       	mul	r30, r24
    6b52:	a0 18       	sub	r10, r0
    6b54:	b1 08       	sbc	r11, r1
    6b56:	11 24       	eor	r1, r1
    6b58:	0b c0       	rjmp	.+22     	; 0x6b70 <do_menu_item+0x2d2>
				button_update = 0;
			}
		}

		if (button == UP)
    6b5a:	80 3b       	cpi	r24, 0xB0	; 176
    6b5c:	81 f4       	brne	.+32     	; 0x6b7e <do_menu_item+0x2e0>
		{
			if (button_lock == false)
    6b5e:	51 10       	cpse	r5, r1
    6b60:	68 c0       	rjmp	.+208    	; 0x6c32 <do_menu_item+0x394>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    6b62:	80 91 13 08 	lds	r24, 0x0813
    6b66:	fd 85       	ldd	r31, Y+13	; 0x0d
    6b68:	f8 9f       	mul	r31, r24
    6b6a:	a0 0c       	add	r10, r0
    6b6c:	b1 1c       	adc	r11, r1
    6b6e:	11 24       	eor	r1, r1
				button_update = 0;
    6b70:	41 2c       	mov	r4, r1
    6b72:	5f c0       	rjmp	.+190    	; 0x6c32 <do_menu_item+0x394>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6b74:	80 3d       	cpi	r24, 0xD0	; 208
    6b76:	49 f3       	breq	.-46     	; 0x6b4a <do_menu_item+0x2ac>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    6b78:	80 3b       	cpi	r24, 0xB0	; 176
    6b7a:	99 f3       	breq	.-26     	; 0x6b62 <do_menu_item+0x2c4>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    6b7c:	51 2c       	mov	r5, r1
				button_update = 0;
			}
		}

		// Handle button 1
		if (button == BACK)	
    6b7e:	80 37       	cpi	r24, 0x70	; 112
    6b80:	59 f4       	brne	.+22     	; 0x6b98 <do_menu_item+0x2fa>
		{
			// Save/Abort screen
			if (range.style == 4)
    6b82:	14 30       	cpi	r17, 0x04	; 4
    6b84:	21 f4       	brne	.+8      	; 0x6b8e <do_menu_item+0x2f0>
			{
				button = ABORT;
    6b86:	80 ea       	ldi	r24, 0xA0	; 160
    6b88:	80 93 12 08 	sts	0x0812, r24
    6b8c:	05 c0       	rjmp	.+10     	; 0x6b98 <do_menu_item+0x2fa>
			}
			else
			{
				value = (range.default_value * mult);				
    6b8e:	29 85       	ldd	r18, Y+9	; 0x09
    6b90:	3a 85       	ldd	r19, Y+10	; 0x0a
    6b92:	23 03       	mulsu	r18, r19
    6b94:	50 01       	movw	r10, r0
    6b96:	11 24       	eor	r1, r1
    6b98:	a2 14       	cp	r10, r2
    6b9a:	b3 04       	cpc	r11, r3
    6b9c:	0c f4       	brge	.+2      	; 0x6ba0 <do_menu_item+0x302>
    6b9e:	51 01       	movw	r10, r2
    6ba0:	8e 85       	ldd	r24, Y+14	; 0x0e
    6ba2:	9f 85       	ldd	r25, Y+15	; 0x0f
    6ba4:	8a 15       	cp	r24, r10
    6ba6:	9b 05       	cpc	r25, r11
    6ba8:	0c f4       	brge	.+2      	; 0x6bac <do_menu_item+0x30e>
    6baa:	5c 01       	movw	r10, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    6bac:	9f e9       	ldi	r25, 0x9F	; 159
    6bae:	69 16       	cp	r6, r25
    6bb0:	71 04       	cpc	r7, r1
    6bb2:	19 f4       	brne	.+6      	; 0x6bba <do_menu_item+0x31c>
		{
			st7565_set_brightness(value);
    6bb4:	8a 2d       	mov	r24, r10
    6bb6:	0e 94 55 24 	call	0x48aa	; 0x48aa <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    6bba:	88 20       	and	r8, r8
    6bbc:	a1 f0       	breq	.+40     	; 0x6be6 <do_menu_item+0x348>
			(servo_enable) &&
    6bbe:	f6 01       	movw	r30, r12
    6bc0:	80 81       	ld	r24, Z
    6bc2:	82 30       	cpi	r24, 0x02	; 2
    6bc4:	81 f0       	breq	.+32     	; 0x6be6 <do_menu_item+0x348>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    6bc6:	8a 2d       	mov	r24, r10
    6bc8:	0e 94 0e 43 	call	0x861c	; 0x861c <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6bcc:	86 5a       	subi	r24, 0xA6	; 166
    6bce:	9e 40       	sbci	r25, 0x0E	; 14
    6bd0:	95 95       	asr	r25
    6bd2:	87 95       	ror	r24

			cli();
    6bd4:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6bd6:	bc 01       	movw	r22, r24
    6bd8:	64 52       	subi	r22, 0x24	; 36
    6bda:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    6bdc:	8c a5       	ldd	r24, Y+44	; 0x2c
    6bde:	9d a5       	ldd	r25, Y+45	; 0x2d
    6be0:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <output_servo_ppm_asm3>
			sei();
    6be4:	78 94       	sei
    6be6:	90 e0       	ldi	r25, 0x00	; 0
    6be8:	c3 ce       	rjmp	.-634    	; 0x6970 <do_menu_item+0xd2>
		}

	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    6bea:	12 30       	cpi	r17, 0x02	; 2
    6bec:	31 f4       	brne	.+12     	; 0x6bfa <do_menu_item+0x35c>
	{
		value = value / mult;
    6bee:	c5 01       	movw	r24, r10
    6bf0:	6a 89       	ldd	r22, Y+18	; 0x12
    6bf2:	7b 89       	ldd	r23, Y+19	; 0x13
    6bf4:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <__divmodhi4>
    6bf8:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    6bfa:	e8 89       	ldd	r30, Y+16	; 0x10
    6bfc:	f9 89       	ldd	r31, Y+17	; 0x11
    6bfe:	a0 82       	st	Z, r10
}
    6c00:	67 96       	adiw	r28, 0x17	; 23
    6c02:	0f b6       	in	r0, 0x3f	; 63
    6c04:	f8 94       	cli
    6c06:	de bf       	out	0x3e, r29	; 62
    6c08:	0f be       	out	0x3f, r0	; 63
    6c0a:	cd bf       	out	0x3d, r28	; 61
    6c0c:	df 91       	pop	r29
    6c0e:	cf 91       	pop	r28
    6c10:	1f 91       	pop	r17
    6c12:	0f 91       	pop	r16
    6c14:	ff 90       	pop	r15
    6c16:	ef 90       	pop	r14
    6c18:	df 90       	pop	r13
    6c1a:	cf 90       	pop	r12
    6c1c:	bf 90       	pop	r11
    6c1e:	af 90       	pop	r10
    6c20:	9f 90       	pop	r9
    6c22:	8f 90       	pop	r8
    6c24:	7f 90       	pop	r7
    6c26:	6f 90       	pop	r6
    6c28:	5f 90       	pop	r5
    6c2a:	4f 90       	pop	r4
    6c2c:	3f 90       	pop	r3
    6c2e:	2f 90       	pop	r2
    6c30:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    6c32:	55 24       	eor	r5, r5
    6c34:	53 94       	inc	r5
    6c36:	b0 cf       	rjmp	.-160    	; 0x6b98 <do_menu_item+0x2fa>

00006c38 <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    6c38:	90 e0       	ldi	r25, 0x00	; 0
    6c3a:	98 17       	cp	r25, r24
    6c3c:	81 f0       	breq	.+32     	; 0x6c5e <menu_beep+0x26>
	{ 
		LVA = 1;
    6c3e:	29 9a       	sbi	0x05, 1	; 5
    6c40:	ef e0       	ldi	r30, 0x0F	; 15
    6c42:	f7 e2       	ldi	r31, 0x27	; 39
    6c44:	31 97       	sbiw	r30, 0x01	; 1
    6c46:	f1 f7       	brne	.-4      	; 0x6c44 <menu_beep+0xc>
    6c48:	00 c0       	rjmp	.+0      	; 0x6c4a <menu_beep+0x12>
    6c4a:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    6c4c:	29 98       	cbi	0x05, 1	; 5
    6c4e:	ef e0       	ldi	r30, 0x0F	; 15
    6c50:	f7 e2       	ldi	r31, 0x27	; 39
    6c52:	31 97       	sbiw	r30, 0x01	; 1
    6c54:	f1 f7       	brne	.-4      	; 0x6c52 <menu_beep+0x1a>
    6c56:	00 c0       	rjmp	.+0      	; 0x6c58 <menu_beep+0x20>
    6c58:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    6c5a:	9f 5f       	subi	r25, 0xFF	; 255
    6c5c:	ee cf       	rjmp	.-36     	; 0x6c3a <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    6c5e:	08 95       	ret

00006c60 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint16_t items, uint16_t start, uint16_t offset, uint8_t button, uint16_t* cursor, uint16_t* top, uint16_t* temp)
{
    6c60:	6f 92       	push	r6
    6c62:	7f 92       	push	r7
    6c64:	8f 92       	push	r8
    6c66:	9f 92       	push	r9
    6c68:	af 92       	push	r10
    6c6a:	bf 92       	push	r11
    6c6c:	cf 92       	push	r12
    6c6e:	df 92       	push	r13
    6c70:	ef 92       	push	r14
    6c72:	ff 92       	push	r15
    6c74:	0f 93       	push	r16
    6c76:	1f 93       	push	r17
    6c78:	cf 93       	push	r28
    6c7a:	df 93       	push	r29
    6c7c:	5c 01       	movw	r10, r24
    6c7e:	4b 01       	movw	r8, r22
    6c80:	3a 01       	movw	r6, r20
    6c82:	e8 01       	movw	r28, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    6c84:	d7 01       	movw	r26, r14
    6c86:	ed 91       	ld	r30, X+
    6c88:	fc 91       	ld	r31, X
    6c8a:	11 97       	sbiw	r26, 0x01	; 1
    6c8c:	e4 0f       	add	r30, r20
    6c8e:	f5 1f       	adc	r31, r21
    6c90:	ed 93       	st	X+, r30
    6c92:	fc 93       	st	X, r31
	start = start + offset;
    6c94:	84 0e       	add	r8, r20
    6c96:	95 1e       	adc	r9, r21

	// Calculate which function has been requested
	if (button == ENTER)
    6c98:	20 3e       	cpi	r18, 0xE0	; 224
    6c9a:	c1 f4       	brne	.+48     	; 0x6ccc <update_menu+0x6c>
	{
		switch(*cursor) 
    6c9c:	88 81       	ld	r24, Y
    6c9e:	99 81       	ldd	r25, Y+1	; 0x01
    6ca0:	8f 30       	cpi	r24, 0x0F	; 15
    6ca2:	91 05       	cpc	r25, r1
    6ca4:	61 f0       	breq	.+24     	; 0x6cbe <update_menu+0x5e>
    6ca6:	18 f4       	brcc	.+6      	; 0x6cae <update_menu+0x4e>
    6ca8:	03 97       	sbiw	r24, 0x03	; 3
    6caa:	51 f0       	breq	.+20     	; 0x6cc0 <update_menu+0x60>
    6cac:	55 c0       	rjmp	.+170    	; 0x6d58 <update_menu+0xf8>
    6cae:	8b 31       	cpi	r24, 0x1B	; 27
    6cb0:	91 05       	cpc	r25, r1
    6cb2:	51 f0       	breq	.+20     	; 0x6cc8 <update_menu+0x68>
    6cb4:	87 97       	sbiw	r24, 0x27	; 39
    6cb6:	09 f0       	breq	.+2      	; 0x6cba <update_menu+0x5a>
    6cb8:	4f c0       	rjmp	.+158    	; 0x6d58 <update_menu+0xf8>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    6cba:	33 96       	adiw	r30, 0x03	; 3
    6cbc:	01 c0       	rjmp	.+2      	; 0x6cc0 <update_menu+0x60>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    6cbe:	31 96       	adiw	r30, 0x01	; 1
    6cc0:	d6 01       	movw	r26, r12
    6cc2:	ed 93       	st	X+, r30
    6cc4:	fc 93       	st	X, r31
				break;	
    6cc6:	48 c0       	rjmp	.+144    	; 0x6d58 <update_menu+0xf8>
			case LINE2:
				*temp = *top + 2;
    6cc8:	32 96       	adiw	r30, 0x02	; 2
    6cca:	fa cf       	rjmp	.-12     	; 0x6cc0 <update_menu+0x60>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    6ccc:	20 3d       	cpi	r18, 0xD0	; 208
    6cce:	39 f5       	brne	.+78     	; 0x6d1e <update_menu+0xbe>
	{
		switch(*cursor) 
    6cd0:	88 81       	ld	r24, Y
    6cd2:	99 81       	ldd	r25, Y+1	; 0x01
    6cd4:	8f 30       	cpi	r24, 0x0F	; 15
    6cd6:	91 05       	cpc	r25, r1
    6cd8:	79 f0       	breq	.+30     	; 0x6cf8 <update_menu+0x98>
    6cda:	18 f4       	brcc	.+6      	; 0x6ce2 <update_menu+0x82>
    6cdc:	03 97       	sbiw	r24, 0x03	; 3
    6cde:	39 f0       	breq	.+14     	; 0x6cee <update_menu+0x8e>
    6ce0:	1b c0       	rjmp	.+54     	; 0x6d18 <update_menu+0xb8>
    6ce2:	8b 31       	cpi	r24, 0x1B	; 27
    6ce4:	91 05       	cpc	r25, r1
    6ce6:	69 f0       	breq	.+26     	; 0x6d02 <update_menu+0xa2>
    6ce8:	87 97       	sbiw	r24, 0x27	; 39
    6cea:	91 f0       	breq	.+36     	; 0x6d10 <update_menu+0xb0>
    6cec:	15 c0       	rjmp	.+42     	; 0x6d18 <update_menu+0xb8>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    6cee:	b2 e0       	ldi	r27, 0x02	; 2
    6cf0:	ab 16       	cp	r10, r27
    6cf2:	b1 04       	cpc	r11, r1
    6cf4:	20 f5       	brcc	.+72     	; 0x6d3e <update_menu+0xde>
    6cf6:	30 c0       	rjmp	.+96     	; 0x6d58 <update_menu+0xf8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    6cf8:	e3 e0       	ldi	r30, 0x03	; 3
    6cfa:	ae 16       	cp	r10, r30
    6cfc:	b1 04       	cpc	r11, r1
    6cfe:	60 f1       	brcs	.+88     	; 0x6d58 <update_menu+0xf8>
    6d00:	1b c0       	rjmp	.+54     	; 0x6d38 <update_menu+0xd8>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    6d02:	f4 e0       	ldi	r31, 0x04	; 4
    6d04:	af 16       	cp	r10, r31
    6d06:	b1 04       	cpc	r11, r1
    6d08:	38 f1       	brcs	.+78     	; 0x6d58 <update_menu+0xf8>
    6d0a:	87 e2       	ldi	r24, 0x27	; 39
    6d0c:	90 e0       	ldi	r25, 0x00	; 0
    6d0e:	1f c0       	rjmp	.+62     	; 0x6d4e <update_menu+0xee>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    6d10:	25 e0       	ldi	r18, 0x05	; 5
    6d12:	a2 16       	cp	r10, r18
    6d14:	b1 04       	cpc	r11, r1
    6d16:	00 f1       	brcs	.+64     	; 0x6d58 <update_menu+0xf8>
				break;
			default:
				*cursor = NEXTLINE;
    6d18:	88 e2       	ldi	r24, 0x28	; 40
    6d1a:	90 e0       	ldi	r25, 0x00	; 0
    6d1c:	18 c0       	rjmp	.+48     	; 0x6d4e <update_menu+0xee>
				break;
		}
	}

	if (button == UP)	
    6d1e:	20 3b       	cpi	r18, 0xB0	; 176
    6d20:	c9 f4       	brne	.+50     	; 0x6d54 <update_menu+0xf4>
	{
		switch(*cursor) 
    6d22:	88 81       	ld	r24, Y
    6d24:	99 81       	ldd	r25, Y+1	; 0x01
    6d26:	8f 30       	cpi	r24, 0x0F	; 15
    6d28:	91 05       	cpc	r25, r1
    6d2a:	61 f0       	breq	.+24     	; 0x6d44 <update_menu+0xe4>
    6d2c:	70 f0       	brcs	.+28     	; 0x6d4a <update_menu+0xea>
    6d2e:	8b 31       	cpi	r24, 0x1B	; 27
    6d30:	91 05       	cpc	r25, r1
    6d32:	29 f0       	breq	.+10     	; 0x6d3e <update_menu+0xde>
    6d34:	87 97       	sbiw	r24, 0x27	; 39
    6d36:	49 f4       	brne	.+18     	; 0x6d4a <update_menu+0xea>
		{
			case LINE3:
				*cursor = LINE2;
    6d38:	8b e1       	ldi	r24, 0x1B	; 27
    6d3a:	90 e0       	ldi	r25, 0x00	; 0
    6d3c:	08 c0       	rjmp	.+16     	; 0x6d4e <update_menu+0xee>
				break;	
			case LINE2:
				*cursor = LINE1;
    6d3e:	8f e0       	ldi	r24, 0x0F	; 15
    6d40:	90 e0       	ldi	r25, 0x00	; 0
    6d42:	05 c0       	rjmp	.+10     	; 0x6d4e <update_menu+0xee>
				break;
			case LINE1:
				*cursor = LINE0;
    6d44:	83 e0       	ldi	r24, 0x03	; 3
    6d46:	90 e0       	ldi	r25, 0x00	; 0
    6d48:	02 c0       	rjmp	.+4      	; 0x6d4e <update_menu+0xee>
				break;
			case LINE0:
				*cursor = PREVLINE;
    6d4a:	82 e0       	ldi	r24, 0x02	; 2
    6d4c:	90 e0       	ldi	r25, 0x00	; 0
    6d4e:	99 83       	std	Y+1, r25	; 0x01
    6d50:	88 83       	st	Y, r24
				break;
    6d52:	02 c0       	rjmp	.+4      	; 0x6d58 <update_menu+0xf8>
				*cursor = PREVLINE;
				break;
		}
	}

	if (button != NONE)	
    6d54:	20 3f       	cpi	r18, 0xF0	; 240
    6d56:	61 f0       	breq	.+24     	; 0x6d70 <update_menu+0x110>
	{
		menu_beep(1);
    6d58:	81 e0       	ldi	r24, 0x01	; 1
    6d5a:	0e 94 1c 36 	call	0x6c38	; 0x6c38 <menu_beep>
    6d5e:	4f ef       	ldi	r20, 0xFF	; 255
    6d60:	84 e3       	ldi	r24, 0x34	; 52
    6d62:	9c e0       	ldi	r25, 0x0C	; 12
    6d64:	41 50       	subi	r20, 0x01	; 1
    6d66:	80 40       	sbci	r24, 0x00	; 0
    6d68:	90 40       	sbci	r25, 0x00	; 0
    6d6a:	e1 f7       	brne	.-8      	; 0x6d64 <update_menu+0x104>
    6d6c:	00 c0       	rjmp	.+0      	; 0x6d6e <update_menu+0x10e>
    6d6e:	00 00       	nop
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    6d70:	88 81       	ld	r24, Y
    6d72:	99 81       	ldd	r25, Y+1	; 0x01
    6d74:	02 97       	sbiw	r24, 0x02	; 2
    6d76:	71 f4       	brne	.+28     	; 0x6d94 <update_menu+0x134>
	{
		*cursor  = LINE0;
    6d78:	83 e0       	ldi	r24, 0x03	; 3
    6d7a:	90 e0       	ldi	r25, 0x00	; 0
    6d7c:	99 83       	std	Y+1, r25	; 0x01
    6d7e:	88 83       	st	Y, r24
		if (*top > start) 
    6d80:	d7 01       	movw	r26, r14
    6d82:	8d 91       	ld	r24, X+
    6d84:	9c 91       	ld	r25, X
    6d86:	11 97       	sbiw	r26, 0x01	; 1
    6d88:	88 16       	cp	r8, r24
    6d8a:	99 06       	cpc	r9, r25
    6d8c:	18 f4       	brcc	.+6      	; 0x6d94 <update_menu+0x134>
		{
			*top = *top - 1;								// Shuffle list up
    6d8e:	01 97       	sbiw	r24, 0x01	; 1
    6d90:	8d 93       	st	X+, r24
    6d92:	9c 93       	st	X, r25
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    6d94:	88 81       	ld	r24, Y
    6d96:	99 81       	ldd	r25, Y+1	; 0x01
    6d98:	88 97       	sbiw	r24, 0x28	; 40
    6d9a:	b1 f4       	brne	.+44     	; 0x6dc8 <update_menu+0x168>
	{
		*cursor  = LINE3;
    6d9c:	87 e2       	ldi	r24, 0x27	; 39
    6d9e:	90 e0       	ldi	r25, 0x00	; 0
    6da0:	99 83       	std	Y+1, r25	; 0x01
    6da2:	88 83       	st	Y, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    6da4:	f7 01       	movw	r30, r14
    6da6:	80 81       	ld	r24, Z
    6da8:	91 81       	ldd	r25, Z+1	; 0x01
    6daa:	9c 01       	movw	r18, r24
    6dac:	2d 5f       	subi	r18, 0xFD	; 253
    6dae:	3f 4f       	sbci	r19, 0xFF	; 255
    6db0:	f1 e0       	ldi	r31, 0x01	; 1
    6db2:	af 1a       	sub	r10, r31
    6db4:	b1 08       	sbc	r11, r1
    6db6:	a8 0c       	add	r10, r8
    6db8:	b9 1c       	adc	r11, r9
    6dba:	2a 15       	cp	r18, r10
    6dbc:	3b 05       	cpc	r19, r11
    6dbe:	20 f4       	brcc	.+8      	; 0x6dc8 <update_menu+0x168>
		{
			*top = *top + 1;								// Shuffle list down
    6dc0:	01 96       	adiw	r24, 0x01	; 1
    6dc2:	d7 01       	movw	r26, r14
    6dc4:	8d 93       	st	X+, r24
    6dc6:	9c 93       	st	X, r25
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    6dc8:	f7 01       	movw	r30, r14
    6dca:	80 81       	ld	r24, Z
    6dcc:	91 81       	ldd	r25, Z+1	; 0x01
    6dce:	86 19       	sub	r24, r6
    6dd0:	97 09       	sbc	r25, r7
    6dd2:	91 83       	std	Z+1, r25	; 0x01
    6dd4:	80 83       	st	Z, r24
}
    6dd6:	df 91       	pop	r29
    6dd8:	cf 91       	pop	r28
    6dda:	1f 91       	pop	r17
    6ddc:	0f 91       	pop	r16
    6dde:	ff 90       	pop	r15
    6de0:	ef 90       	pop	r14
    6de2:	df 90       	pop	r13
    6de4:	cf 90       	pop	r12
    6de6:	bf 90       	pop	r11
    6de8:	af 90       	pop	r10
    6dea:	9f 90       	pop	r9
    6dec:	8f 90       	pop	r8
    6dee:	7f 90       	pop	r7
    6df0:	6f 90       	pop	r6
    6df2:	08 95       	ret

00006df4 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    6df4:	28 2f       	mov	r18, r24
    6df6:	30 e0       	ldi	r19, 0x00	; 0
    6df8:	43 e0       	ldi	r20, 0x03	; 3
    6dfa:	50 e0       	ldi	r21, 0x00	; 0
    6dfc:	69 e0       	ldi	r22, 0x09	; 9
    6dfe:	71 e0       	ldi	r23, 0x01	; 1
    6e00:	8d e0       	ldi	r24, 0x0D	; 13
    6e02:	90 e0       	ldi	r25, 0x00	; 0
    6e04:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <LCD_Display_Text>

00006e08 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint16_t MenuOffsets, const uint16_t* text_link, uint16_t cursor)
{
    6e08:	2f 92       	push	r2
    6e0a:	3f 92       	push	r3
    6e0c:	4f 92       	push	r4
    6e0e:	5f 92       	push	r5
    6e10:	6f 92       	push	r6
    6e12:	7f 92       	push	r7
    6e14:	8f 92       	push	r8
    6e16:	9f 92       	push	r9
    6e18:	af 92       	push	r10
    6e1a:	bf 92       	push	r11
    6e1c:	cf 92       	push	r12
    6e1e:	df 92       	push	r13
    6e20:	ef 92       	push	r14
    6e22:	ff 92       	push	r15
    6e24:	0f 93       	push	r16
    6e26:	1f 93       	push	r17
    6e28:	cf 93       	push	r28
    6e2a:	df 93       	push	r29
    6e2c:	cd b7       	in	r28, 0x3d	; 61
    6e2e:	de b7       	in	r29, 0x3e	; 62
    6e30:	2c 97       	sbiw	r28, 0x0c	; 12
    6e32:	0f b6       	in	r0, 0x3f	; 63
    6e34:	f8 94       	cli
    6e36:	de bf       	out	0x3e, r29	; 62
    6e38:	0f be       	out	0x3f, r0	; 63
    6e3a:	cd bf       	out	0x3d, r28	; 61
    6e3c:	2c 01       	movw	r4, r24
    6e3e:	4a 01       	movw	r8, r20
    6e40:	3f 83       	std	Y+7, r19	; 0x07
    6e42:	2e 83       	std	Y+6, r18	; 0x06
    6e44:	08 87       	std	Y+8, r16	; 0x08
    6e46:	e9 86       	std	Y+9, r14	; 0x09
    6e48:	aa 86       	std	Y+10, r10	; 0x0a
	uint16_t base = 0;
	uint16_t offset = 0;
	uint16_t text = 0;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    6e4a:	80 e0       	ldi	r24, 0x00	; 0
    6e4c:	91 e0       	ldi	r25, 0x01	; 1
    6e4e:	6b 87       	std	Y+11, r22	; 0x0b
    6e50:	7c 87       	std	Y+12, r23	; 0x0c
    6e52:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>
	print_menu_frame(BASIC);
    6e56:	80 e0       	ldi	r24, 0x00	; 0
    6e58:	0e 94 5d 33 	call	0x66ba	; 0x66ba <print_menu_frame>
    6e5c:	25 e0       	ldi	r18, 0x05	; 5
    6e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e62:	26 9f       	mul	r18, r22
    6e64:	c0 01       	movw	r24, r0
    6e66:	27 9f       	mul	r18, r23
    6e68:	90 0d       	add	r25, r0
    6e6a:	11 24       	eor	r1, r1
    6e6c:	2e 80       	ldd	r2, Y+6	; 0x06
    6e6e:	3f 80       	ldd	r3, Y+7	; 0x07
    6e70:	28 1a       	sub	r2, r24
    6e72:	39 0a       	sbc	r3, r25
    6e74:	24 9d       	mul	r18, r4
    6e76:	c0 01       	movw	r24, r0
    6e78:	25 9d       	mul	r18, r5
    6e7a:	90 0d       	add	r25, r0
    6e7c:	11 24       	eor	r1, r1
    6e7e:	28 0e       	add	r2, r24
    6e80:	39 1e       	adc	r3, r25
    6e82:	cb 01       	movw	r24, r22
    6e84:	88 0f       	add	r24, r24
    6e86:	99 1f       	adc	r25, r25
    6e88:	c8 1a       	sub	r12, r24
    6e8a:	d9 0a       	sbc	r13, r25
    6e8c:	c2 01       	movw	r24, r4
    6e8e:	88 0f       	add	r24, r24
    6e90:	99 1f       	adc	r25, r25
    6e92:	c8 0e       	add	r12, r24
    6e94:	d9 1e       	adc	r13, r25
    6e96:	72 01       	movw	r14, r4
    6e98:	a1 2c       	mov	r10, r1
    6e9a:	b1 2c       	mov	r11, r1
    6e9c:	41 2c       	mov	r4, r1
    6e9e:	51 2c       	mov	r5, r1
    6ea0:	80 e2       	ldi	r24, 0x20	; 32
    6ea2:	68 2e       	mov	r6, r24
    6ea4:	89 e1       	ldi	r24, 0x19	; 25
    6ea6:	78 2e       	mov	r7, r24
    6ea8:	6e 18       	sub	r6, r14
    6eaa:	7f 08       	sbc	r7, r15
    6eac:	86 1a       	sub	r8, r22
    6eae:	97 0a       	sbc	r9, r23
    6eb0:	83 01       	movw	r16, r6
    6eb2:	0e 0d       	add	r16, r14
    6eb4:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    6eb6:	f8 01       	movw	r30, r16
    6eb8:	24 91       	lpm	r18, Z
    6eba:	30 e0       	ldi	r19, 0x00	; 0
    6ebc:	4a e0       	ldi	r20, 0x0A	; 10
    6ebe:	50 e0       	ldi	r21, 0x00	; 0
    6ec0:	61 e2       	ldi	r22, 0x21	; 33
    6ec2:	7a e0       	ldi	r23, 0x0A	; 10
    6ec4:	c7 01       	movw	r24, r14
    6ec6:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6eca:	f8 85       	ldd	r31, Y+8	; 0x08
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6ecc:	45 e0       	ldi	r20, 0x05	; 5
    6ece:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6ed0:	f1 11       	cpse	r31, r1
    6ed2:	04 c0       	rjmp	.+8      	; 0x6edc <print_menu_items+0xd4>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6ed4:	b5 01       	movw	r22, r10
    6ed6:	62 0d       	add	r22, r2
    6ed8:	73 1d       	adc	r23, r3
    6eda:	02 c0       	rjmp	.+4      	; 0x6ee0 <print_menu_items+0xd8>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    6edc:	6e 81       	ldd	r22, Y+6	; 0x06
    6ede:	7f 81       	ldd	r23, Y+7	; 0x07
    6ee0:	ce 01       	movw	r24, r28
    6ee2:	01 96       	adiw	r24, 0x01	; 1
    6ee4:	0e 94 af 4f 	call	0x9f5e	; 0x9f5e <memcpy_P>
    6ee8:	f2 01       	movw	r30, r4
    6eea:	ec 0d       	add	r30, r12
    6eec:	fd 1d       	adc	r31, r13
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
    6eee:	45 91       	lpm	r20, Z+
    6ef0:	54 91       	lpm	r21, Z
    6ef2:	f4 01       	movw	r30, r8
    6ef4:	ee 0d       	add	r30, r14
    6ef6:	ff 1d       	adc	r31, r15
		offset = values[top + i - start];
    6ef8:	80 81       	ld	r24, Z
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    6efa:	f8 01       	movw	r30, r16
    6efc:	04 91       	lpm	r16, Z
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
		offset = values[top + i - start];
    6efe:	99 27       	eor	r25, r25
    6f00:	87 fd       	sbrc	r24, 7
    6f02:	90 95       	com	r25
		text = base + offset;
    6f04:	48 0f       	add	r20, r24
    6f06:	59 1f       	adc	r21, r25
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    6f08:	29 85       	ldd	r18, Y+9	; 0x09
    6f0a:	6c 81       	ldd	r22, Y+4	; 0x04
    6f0c:	0e 94 f3 33 	call	0x67e6	; 0x67e6 <print_menu_text>
    6f10:	ff ef       	ldi	r31, 0xFF	; 255
    6f12:	ef 1a       	sub	r14, r31
    6f14:	ff 0a       	sbc	r15, r31
    6f16:	82 e0       	ldi	r24, 0x02	; 2
    6f18:	48 0e       	add	r4, r24
    6f1a:	51 1c       	adc	r5, r1
    6f1c:	e5 e0       	ldi	r30, 0x05	; 5
    6f1e:	ae 0e       	add	r10, r30
    6f20:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(BASIC);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    6f22:	f4 e1       	ldi	r31, 0x14	; 20
    6f24:	af 16       	cp	r10, r31
    6f26:	b1 04       	cpc	r11, r1
    6f28:	09 f0       	breq	.+2      	; 0x6f2c <print_menu_items+0x124>
    6f2a:	c2 cf       	rjmp	.-124    	; 0x6eb0 <print_menu_items+0xa8>
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    6f2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    6f2e:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <print_cursor>
	write_buffer(buffer);
    6f32:	80 e0       	ldi	r24, 0x00	; 0
    6f34:	91 e0       	ldi	r25, 0x01	; 1
    6f36:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>
	poll_buttons(true);
    6f3a:	81 e0       	ldi	r24, 0x01	; 1
    6f3c:	0e 94 1a 34 	call	0x6834	; 0x6834 <poll_buttons>
}
    6f40:	2c 96       	adiw	r28, 0x0c	; 12
    6f42:	0f b6       	in	r0, 0x3f	; 63
    6f44:	f8 94       	cli
    6f46:	de bf       	out	0x3e, r29	; 62
    6f48:	0f be       	out	0x3f, r0	; 63
    6f4a:	cd bf       	out	0x3d, r28	; 61
    6f4c:	df 91       	pop	r29
    6f4e:	cf 91       	pop	r28
    6f50:	1f 91       	pop	r17
    6f52:	0f 91       	pop	r16
    6f54:	ff 90       	pop	r15
    6f56:	ef 90       	pop	r14
    6f58:	df 90       	pop	r13
    6f5a:	cf 90       	pop	r12
    6f5c:	bf 90       	pop	r11
    6f5e:	af 90       	pop	r10
    6f60:	9f 90       	pop	r9
    6f62:	8f 90       	pop	r8
    6f64:	7f 90       	pop	r7
    6f66:	6f 90       	pop	r6
    6f68:	5f 90       	pop	r5
    6f6a:	4f 90       	pop	r4
    6f6c:	3f 90       	pop	r3
    6f6e:	2f 90       	pop	r2
    6f70:	08 95       	ret

00006f72 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    6f72:	6f 92       	push	r6
    6f74:	7f 92       	push	r7
    6f76:	8f 92       	push	r8
    6f78:	af 92       	push	r10
    6f7a:	bf 92       	push	r11
    6f7c:	cf 92       	push	r12
    6f7e:	df 92       	push	r13
    6f80:	ef 92       	push	r14
    6f82:	ff 92       	push	r15
    6f84:	0f 93       	push	r16
    6f86:	1f 93       	push	r17
    6f88:	cf 93       	push	r28
    6f8a:	df 93       	push	r29
    6f8c:	00 d0       	rcall	.+0      	; 0x6f8e <menu_flight+0x1c>
    6f8e:	00 d0       	rcall	.+0      	; 0x6f90 <menu_flight+0x1e>
    6f90:	1f 92       	push	r1
    6f92:	cd b7       	in	r28, 0x3d	; 61
    6f94:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6f96:	90 91 14 08 	lds	r25, 0x0814
    6f9a:	99 23       	and	r25, r25
    6f9c:	41 f0       	breq	.+16     	; 0x6fae <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    6f9e:	2a ea       	ldi	r18, 0xAA	; 170
    6fa0:	30 e0       	ldi	r19, 0x00	; 0
    6fa2:	30 93 37 05 	sts	0x0537, r19
    6fa6:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    6faa:	10 92 14 08 	sts	0x0814, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    6fae:	92 e1       	ldi	r25, 0x12	; 18
    6fb0:	89 9f       	mul	r24, r25
    6fb2:	30 01       	movw	r6, r0
    6fb4:	11 24       	eor	r1, r1
    6fb6:	c3 01       	movw	r24, r6
    6fb8:	8d 50       	subi	r24, 0x0D	; 13
    6fba:	9a 4f       	sbci	r25, 0xFA	; 250
    6fbc:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6fbe:	80 91 12 08 	lds	r24, 0x0812
    6fc2:	80 37       	cpi	r24, 0x70	; 112
    6fc4:	09 f4       	brne	.+2      	; 0x6fc8 <menu_flight+0x56>
    6fc6:	66 c0       	rjmp	.+204    	; 0x7094 <menu_flight+0x122>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const uint16_t*)FlightMenuText, cursor);
    6fc8:	a0 90 04 05 	lds	r10, 0x0504
    6fcc:	b0 90 05 05 	lds	r11, 0x0505
    6fd0:	3e e7       	ldi	r19, 0x7E	; 126
    6fd2:	c3 2e       	mov	r12, r19
    6fd4:	39 e1       	ldi	r19, 0x19	; 25
    6fd6:	d3 2e       	mov	r13, r19
    6fd8:	4f e4       	ldi	r20, 0x4F	; 79
    6fda:	e4 2e       	mov	r14, r20
    6fdc:	f1 2c       	mov	r15, r1
    6fde:	00 e0       	ldi	r16, 0x00	; 0
    6fe0:	24 e2       	ldi	r18, 0x24	; 36
    6fe2:	39 e1       	ldi	r19, 0x19	; 25
    6fe4:	a3 01       	movw	r20, r6
    6fe6:	6a ea       	ldi	r22, 0xAA	; 170
    6fe8:	70 e0       	ldi	r23, 0x00	; 0
    6fea:	80 91 36 05 	lds	r24, 0x0536
    6fee:	90 91 37 05 	lds	r25, 0x0537
    6ff2:	0e 94 04 37 	call	0x6e08	; 0x6e08 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6ff6:	51 e3       	ldi	r21, 0x31	; 49
    6ff8:	c5 2e       	mov	r12, r21
    6ffa:	55 e0       	ldi	r21, 0x05	; 5
    6ffc:	d5 2e       	mov	r13, r21
    6ffe:	66 e3       	ldi	r22, 0x36	; 54
    7000:	e6 2e       	mov	r14, r22
    7002:	65 e0       	ldi	r22, 0x05	; 5
    7004:	f6 2e       	mov	r15, r22
    7006:	04 e0       	ldi	r16, 0x04	; 4
    7008:	15 e0       	ldi	r17, 0x05	; 5
    700a:	20 91 12 08 	lds	r18, 0x0812
    700e:	40 e0       	ldi	r20, 0x00	; 0
    7010:	50 e0       	ldi	r21, 0x00	; 0
    7012:	6a ea       	ldi	r22, 0xAA	; 170
    7014:	70 e0       	ldi	r23, 0x00	; 0
    7016:	82 e1       	ldi	r24, 0x12	; 18
    7018:	90 e0       	ldi	r25, 0x00	; 0
    701a:	0e 94 30 36 	call	0x6c60	; 0x6c60 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    701e:	60 91 31 05 	lds	r22, 0x0531
    7022:	6a 5a       	subi	r22, 0xAA	; 170
    7024:	84 e2       	ldi	r24, 0x24	; 36
    7026:	99 e1       	ldi	r25, 0x19	; 25
    7028:	0e 94 c3 33 	call	0x6786	; 0x6786 <get_menu_range>
    702c:	29 83       	std	Y+1, r18	; 0x01
    702e:	3a 83       	std	Y+2, r19	; 0x02
    7030:	4b 83       	std	Y+3, r20	; 0x03
    7032:	5c 83       	std	Y+4, r21	; 0x04
    7034:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    7036:	80 91 12 08 	lds	r24, 0x0812
    703a:	80 3e       	cpi	r24, 0xE0	; 224
    703c:	f9 f4       	brne	.+62     	; 0x707c <menu_flight+0x10a>
		{
			text_link = pgm_read_word(&FlightMenuText[menu_temp - FLIGHTSTART]);
    703e:	80 91 31 05 	lds	r24, 0x0531
    7042:	90 91 32 05 	lds	r25, 0x0532
    7046:	bc 01       	movw	r22, r24
    7048:	6a 5a       	subi	r22, 0xAA	; 170
    704a:	71 09       	sbc	r23, r1
    704c:	fb 01       	movw	r30, r22
    704e:	ee 0f       	add	r30, r30
    7050:	ff 1f       	adc	r31, r31
    7052:	e2 58       	subi	r30, 0x82	; 130
    7054:	f6 4e       	sbci	r31, 0xE6	; 230
    7056:	a5 90       	lpm	r10, Z+
    7058:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    705a:	bb 24       	eor	r11, r11
    705c:	66 0d       	add	r22, r6
    705e:	77 1d       	adc	r23, r7
    7060:	1f 92       	push	r1
    7062:	1f 92       	push	r1
    7064:	81 2c       	mov	r8, r1
    7066:	c1 2c       	mov	r12, r1
    7068:	e9 80       	ldd	r14, Y+1	; 0x01
    706a:	fa 80       	ldd	r15, Y+2	; 0x02
    706c:	0b 81       	ldd	r16, Y+3	; 0x03
    706e:	1c 81       	ldd	r17, Y+4	; 0x04
    7070:	2d 81       	ldd	r18, Y+5	; 0x05
    7072:	41 e0       	ldi	r20, 0x01	; 1
    7074:	0e 94 4f 34 	call	0x689e	; 0x689e <do_menu_item>
    7078:	0f 90       	pop	r0
    707a:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    707c:	80 91 12 08 	lds	r24, 0x0812
    7080:	80 3e       	cpi	r24, 0xE0	; 224
    7082:	09 f0       	breq	.+2      	; 0x7086 <menu_flight+0x114>
    7084:	9c cf       	rjmp	.-200    	; 0x6fbe <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    7086:	0e 94 18 3c 	call	0x7830	; 0x7830 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    708a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    708e:	0e 94 2b 39 	call	0x7256	; 0x7256 <Wait_BUTTON4>
    7092:	95 cf       	rjmp	.-214    	; 0x6fbe <menu_flight+0x4c>
		}
	}
}
    7094:	0f 90       	pop	r0
    7096:	0f 90       	pop	r0
    7098:	0f 90       	pop	r0
    709a:	0f 90       	pop	r0
    709c:	0f 90       	pop	r0
    709e:	df 91       	pop	r29
    70a0:	cf 91       	pop	r28
    70a2:	1f 91       	pop	r17
    70a4:	0f 91       	pop	r16
    70a6:	ff 90       	pop	r15
    70a8:	ef 90       	pop	r14
    70aa:	df 90       	pop	r13
    70ac:	cf 90       	pop	r12
    70ae:	bf 90       	pop	r11
    70b0:	af 90       	pop	r10
    70b2:	8f 90       	pop	r8
    70b4:	7f 90       	pop	r7
    70b6:	6f 90       	pop	r6
    70b8:	08 95       	ret

000070ba <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    70ba:	90 e0       	ldi	r25, 0x00	; 0
    70bc:	fc 01       	movw	r30, r24
    70be:	ed 54       	subi	r30, 0x4D	; 77
    70c0:	f1 09       	sbc	r31, r1
    70c2:	e4 31       	cpi	r30, 0x14	; 20
    70c4:	f1 05       	cpc	r31, r1
    70c6:	80 f5       	brcc	.+96     	; 0x7128 <do_main_menu_item+0x6e>
    70c8:	e7 5b       	subi	r30, 0xB7	; 183
    70ca:	ff 4f       	sbci	r31, 0xFF	; 255
    70cc:	0c 94 78 4f 	jmp	0x9ef0	; 0x9ef0 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    70d0:	82 e0       	ldi	r24, 0x02	; 2
    70d2:	01 c0       	rjmp	.+2      	; 0x70d6 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    70d4:	81 e0       	ldi	r24, 0x01	; 1
    70d6:	0c 94 d7 3a 	jmp	0x75ae	; 0x75ae <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    70da:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    70de:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    70e2:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    70e6:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    70ea:	80 e0       	ldi	r24, 0x00	; 0
    70ec:	01 c0       	rjmp	.+2      	; 0x70f0 <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    70ee:	81 e0       	ldi	r24, 0x01	; 1
    70f0:	0c 94 b9 37 	jmp	0x6f72	; 0x6f72 <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    70f4:	80 e0       	ldi	r24, 0x00	; 0
    70f6:	01 c0       	rjmp	.+2      	; 0x70fa <do_main_menu_item+0x40>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    70f8:	81 e0       	ldi	r24, 0x01	; 1
    70fa:	0c 94 38 39 	jmp	0x7270	; 0x7270 <menu_mixer>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    70fe:	82 e0       	ldi	r24, 0x02	; 2
    7100:	fc cf       	rjmp	.-8      	; 0x70fa <do_main_menu_item+0x40>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    7102:	83 e0       	ldi	r24, 0x03	; 3
    7104:	fa cf       	rjmp	.-12     	; 0x70fa <do_main_menu_item+0x40>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    7106:	84 e0       	ldi	r24, 0x04	; 4
    7108:	f8 cf       	rjmp	.-16     	; 0x70fa <do_main_menu_item+0x40>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    710a:	85 e0       	ldi	r24, 0x05	; 5
    710c:	f6 cf       	rjmp	.-20     	; 0x70fa <do_main_menu_item+0x40>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    710e:	86 e0       	ldi	r24, 0x06	; 6
    7110:	f4 cf       	rjmp	.-24     	; 0x70fa <do_main_menu_item+0x40>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    7112:	87 e0       	ldi	r24, 0x07	; 7
    7114:	f2 cf       	rjmp	.-28     	; 0x70fa <do_main_menu_item+0x40>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    7116:	81 e0       	ldi	r24, 0x01	; 1
    7118:	03 c0       	rjmp	.+6      	; 0x7120 <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    711a:	82 e0       	ldi	r24, 0x02	; 2
    711c:	01 c0       	rjmp	.+2      	; 0x7120 <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    711e:	83 e0       	ldi	r24, 0x03	; 3
    7120:	0c 94 dc 39 	jmp	0x73b8	; 0x73b8 <menu_servo_setup>
			break;
		case MAINSTART+19:
			menu_log();				// 20. Error log
    7124:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <menu_log>
    7128:	08 95       	ret

0000712a <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    712a:	1f 99       	sbic	0x03, 7	; 3
    712c:	0a c0       	rjmp	.+20     	; 0x7142 <Wait_BUTTON1+0x18>
    712e:	2f e3       	ldi	r18, 0x3F	; 63
    7130:	8d e0       	ldi	r24, 0x0D	; 13
    7132:	93 e0       	ldi	r25, 0x03	; 3
    7134:	21 50       	subi	r18, 0x01	; 1
    7136:	80 40       	sbci	r24, 0x00	; 0
    7138:	90 40       	sbci	r25, 0x00	; 0
    713a:	e1 f7       	brne	.-8      	; 0x7134 <Wait_BUTTON1+0xa>
    713c:	00 c0       	rjmp	.+0      	; 0x713e <Wait_BUTTON1+0x14>
    713e:	00 00       	nop
    7140:	f4 cf       	rjmp	.-24     	; 0x712a <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    7142:	08 95       	ret

00007144 <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    7144:	9f 92       	push	r9
    7146:	af 92       	push	r10
    7148:	bf 92       	push	r11
    714a:	cf 92       	push	r12
    714c:	df 92       	push	r13
    714e:	ef 92       	push	r14
    7150:	ff 92       	push	r15
    7152:	0f 93       	push	r16
    7154:	1f 93       	push	r17
    7156:	cf 93       	push	r28
    7158:	df 93       	push	r29
	static uint16_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    715a:	80 ef       	ldi	r24, 0xF0	; 240
    715c:	80 93 12 08 	sts	0x0812, r24

	menu_beep(1);
    7160:	81 e0       	ldi	r24, 0x01	; 1
    7162:	0e 94 1c 36 	call	0x6c38	; 0x6c38 <menu_beep>

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    7166:	0e 94 95 38 	call	0x712a	; 0x712a <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    716a:	23 e0       	ldi	r18, 0x03	; 3
    716c:	a2 2e       	mov	r10, r18
    716e:	b1 2c       	mov	r11, r1

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    7170:	30 ef       	ldi	r19, 0xF0	; 240
    7172:	93 2e       	mov	r9, r19
	menu_beep(1);

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    7174:	80 91 12 08 	lds	r24, 0x0812
    7178:	80 37       	cpi	r24, 0x70	; 112
    717a:	09 f4       	brne	.+2      	; 0x717e <menu_main+0x3a>
    717c:	60 c0       	rjmp	.+192    	; 0x723e <menu_main+0xfa>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    717e:	80 e0       	ldi	r24, 0x00	; 0
    7180:	91 e0       	ldi	r25, 0x01	; 1
    7182:	0e 94 af 24 	call	0x495e	; 0x495e <clear_buffer>

		// Print menu
		print_menu_frame(BASIC);													// Frame
    7186:	80 e0       	ldi	r24, 0x00	; 0
    7188:	0e 94 5d 33 	call	0x66ba	; 0x66ba <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    718c:	c0 e0       	ldi	r28, 0x00	; 0
    718e:	d0 e0       	ldi	r29, 0x00	; 0
    7190:	fe 01       	movw	r30, r28
    7192:	e0 5e       	subi	r30, 0xE0	; 224
    7194:	f6 4e       	sbci	r31, 0xE6	; 230
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    7196:	24 91       	lpm	r18, Z
    7198:	30 e0       	ldi	r19, 0x00	; 0
    719a:	80 91 08 05 	lds	r24, 0x0508
    719e:	90 91 09 05 	lds	r25, 0x0509
    71a2:	4a e0       	ldi	r20, 0x0A	; 10
    71a4:	50 e0       	ldi	r21, 0x00	; 0
    71a6:	61 e2       	ldi	r22, 0x21	; 33
    71a8:	7a e0       	ldi	r23, 0x0A	; 10
    71aa:	8c 0f       	add	r24, r28
    71ac:	9d 1f       	adc	r25, r29
    71ae:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(BASIC);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    71b2:	21 96       	adiw	r28, 0x01	; 1
    71b4:	c4 30       	cpi	r28, 0x04	; 4
    71b6:	d1 05       	cpc	r29, r1
    71b8:	59 f7       	brne	.-42     	; 0x7190 <menu_main+0x4c>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    71ba:	80 91 06 05 	lds	r24, 0x0506
    71be:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <print_cursor>
		write_buffer(buffer);
    71c2:	80 e0       	ldi	r24, 0x00	; 0
    71c4:	91 e0       	ldi	r25, 0x01	; 1
    71c6:	0e 94 7d 24 	call	0x48fa	; 0x48fa <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    71ca:	81 e0       	ldi	r24, 0x01	; 1
    71cc:	0e 94 1a 34 	call	0x6834	; 0x6834 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    71d0:	84 e3       	ldi	r24, 0x34	; 52
    71d2:	c8 2e       	mov	r12, r24
    71d4:	85 e0       	ldi	r24, 0x05	; 5
    71d6:	d8 2e       	mov	r13, r24
    71d8:	98 e0       	ldi	r25, 0x08	; 8
    71da:	e9 2e       	mov	r14, r25
    71dc:	95 e0       	ldi	r25, 0x05	; 5
    71de:	f9 2e       	mov	r15, r25
    71e0:	06 e0       	ldi	r16, 0x06	; 6
    71e2:	15 e0       	ldi	r17, 0x05	; 5
    71e4:	20 91 12 08 	lds	r18, 0x0812
    71e8:	40 e0       	ldi	r20, 0x00	; 0
    71ea:	50 e0       	ldi	r21, 0x00	; 0
    71ec:	6d e4       	ldi	r22, 0x4D	; 77
    71ee:	70 e0       	ldi	r23, 0x00	; 0
    71f0:	84 e1       	ldi	r24, 0x14	; 20
    71f2:	90 e0       	ldi	r25, 0x00	; 0
    71f4:	0e 94 30 36 	call	0x6c60	; 0x6c60 <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    71f8:	80 91 34 05 	lds	r24, 0x0534
    71fc:	90 91 35 05 	lds	r25, 0x0535
    7200:	20 91 33 05 	lds	r18, 0x0533
    7204:	30 e0       	ldi	r19, 0x00	; 0
    7206:	82 17       	cp	r24, r18
    7208:	93 07       	cpc	r25, r19
    720a:	69 f0       	breq	.+26     	; 0x7226 <menu_main+0xe2>
		{
			cursor = LINE0;
    720c:	b0 92 05 05 	sts	0x0505, r11
    7210:	a0 92 04 05 	sts	0x0504, r10
			menu_temp = 0;
    7214:	10 92 32 05 	sts	0x0532, r1
    7218:	10 92 31 05 	sts	0x0531, r1
			old_menu = main_temp;
    721c:	80 93 33 05 	sts	0x0533, r24
			menu_flag = 1;
    7220:	21 e0       	ldi	r18, 0x01	; 1
    7222:	20 93 14 08 	sts	0x0814, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    7226:	20 91 12 08 	lds	r18, 0x0812
    722a:	20 3e       	cpi	r18, 0xE0	; 224
    722c:	09 f0       	breq	.+2      	; 0x7230 <menu_main+0xec>
    722e:	a2 cf       	rjmp	.-188    	; 0x7174 <menu_main+0x30>
		{
			do_main_menu_item(main_temp);
    7230:	0e 94 5d 38 	call	0x70ba	; 0x70ba <do_main_menu_item>
			button = NONE;
    7234:	90 92 12 08 	sts	0x0812, r9

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    7238:	0e 94 95 38 	call	0x712a	; 0x712a <Wait_BUTTON1>
    723c:	9b cf       	rjmp	.-202    	; 0x7174 <menu_main+0x30>
		}
	}
}
    723e:	df 91       	pop	r29
    7240:	cf 91       	pop	r28
    7242:	1f 91       	pop	r17
    7244:	0f 91       	pop	r16
    7246:	ff 90       	pop	r15
    7248:	ef 90       	pop	r14
    724a:	df 90       	pop	r13
    724c:	cf 90       	pop	r12
    724e:	bf 90       	pop	r11
    7250:	af 90       	pop	r10
    7252:	9f 90       	pop	r9
    7254:	08 95       	ret

00007256 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    7256:	1c 99       	sbic	0x03, 4	; 3
    7258:	0a c0       	rjmp	.+20     	; 0x726e <Wait_BUTTON4+0x18>
    725a:	2f e3       	ldi	r18, 0x3F	; 63
    725c:	8d e0       	ldi	r24, 0x0D	; 13
    725e:	93 e0       	ldi	r25, 0x03	; 3
    7260:	21 50       	subi	r18, 0x01	; 1
    7262:	80 40       	sbci	r24, 0x00	; 0
    7264:	90 40       	sbci	r25, 0x00	; 0
    7266:	e1 f7       	brne	.-8      	; 0x7260 <Wait_BUTTON4+0xa>
    7268:	00 c0       	rjmp	.+0      	; 0x726a <Wait_BUTTON4+0x14>
    726a:	00 00       	nop
    726c:	f4 cf       	rjmp	.-24     	; 0x7256 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    726e:	08 95       	ret

00007270 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    7270:	6f 92       	push	r6
    7272:	7f 92       	push	r7
    7274:	8f 92       	push	r8
    7276:	af 92       	push	r10
    7278:	bf 92       	push	r11
    727a:	cf 92       	push	r12
    727c:	df 92       	push	r13
    727e:	ef 92       	push	r14
    7280:	ff 92       	push	r15
    7282:	0f 93       	push	r16
    7284:	1f 93       	push	r17
    7286:	cf 93       	push	r28
    7288:	df 93       	push	r29
    728a:	00 d0       	rcall	.+0      	; 0x728c <menu_mixer+0x1c>
    728c:	00 d0       	rcall	.+0      	; 0x728e <menu_mixer+0x1e>
    728e:	1f 92       	push	r1
    7290:	cd b7       	in	r28, 0x3d	; 61
    7292:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    7294:	90 91 14 08 	lds	r25, 0x0814
    7298:	99 23       	and	r25, r25
    729a:	41 f0       	breq	.+16     	; 0x72ac <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    729c:	2e eb       	ldi	r18, 0xBE	; 190
    729e:	30 e0       	ldi	r19, 0x00	; 0
    72a0:	30 93 37 05 	sts	0x0537, r19
    72a4:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    72a8:	10 92 14 08 	sts	0x0814, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    72ac:	96 e2       	ldi	r25, 0x26	; 38
    72ae:	89 9f       	mul	r24, r25
    72b0:	30 01       	movw	r6, r0
    72b2:	11 24       	eor	r1, r1
    72b4:	c3 01       	movw	r24, r6
    72b6:	89 5a       	subi	r24, 0xA9	; 169
    72b8:	99 4f       	sbci	r25, 0xF9	; 249
    72ba:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    72bc:	80 91 12 08 	lds	r24, 0x0812
    72c0:	80 37       	cpi	r24, 0x70	; 112
    72c2:	09 f4       	brne	.+2      	; 0x72c6 <menu_mixer+0x56>
    72c4:	66 c0       	rjmp	.+204    	; 0x7392 <menu_mixer+0x122>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const uint16_t*)MixerMenuText, cursor);
    72c6:	a0 90 04 05 	lds	r10, 0x0504
    72ca:	b0 90 05 05 	lds	r11, 0x0505
    72ce:	3c e4       	ldi	r19, 0x4C	; 76
    72d0:	c3 2e       	mov	r12, r19
    72d2:	3a e1       	ldi	r19, 0x1A	; 26
    72d4:	d3 2e       	mov	r13, r19
    72d6:	49 e5       	ldi	r20, 0x59	; 89
    72d8:	e4 2e       	mov	r14, r20
    72da:	f1 2c       	mov	r15, r1
    72dc:	00 e0       	ldi	r16, 0x00	; 0
    72de:	22 ea       	ldi	r18, 0xA2	; 162
    72e0:	39 e1       	ldi	r19, 0x19	; 25
    72e2:	a3 01       	movw	r20, r6
    72e4:	6e eb       	ldi	r22, 0xBE	; 190
    72e6:	70 e0       	ldi	r23, 0x00	; 0
    72e8:	80 91 36 05 	lds	r24, 0x0536
    72ec:	90 91 37 05 	lds	r25, 0x0537
    72f0:	0e 94 04 37 	call	0x6e08	; 0x6e08 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    72f4:	51 e3       	ldi	r21, 0x31	; 49
    72f6:	c5 2e       	mov	r12, r21
    72f8:	55 e0       	ldi	r21, 0x05	; 5
    72fa:	d5 2e       	mov	r13, r21
    72fc:	66 e3       	ldi	r22, 0x36	; 54
    72fe:	e6 2e       	mov	r14, r22
    7300:	65 e0       	ldi	r22, 0x05	; 5
    7302:	f6 2e       	mov	r15, r22
    7304:	04 e0       	ldi	r16, 0x04	; 4
    7306:	15 e0       	ldi	r17, 0x05	; 5
    7308:	20 91 12 08 	lds	r18, 0x0812
    730c:	40 e0       	ldi	r20, 0x00	; 0
    730e:	50 e0       	ldi	r21, 0x00	; 0
    7310:	6e eb       	ldi	r22, 0xBE	; 190
    7312:	70 e0       	ldi	r23, 0x00	; 0
    7314:	82 e2       	ldi	r24, 0x22	; 34
    7316:	90 e0       	ldi	r25, 0x00	; 0
    7318:	0e 94 30 36 	call	0x6c60	; 0x6c60 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    731c:	60 91 31 05 	lds	r22, 0x0531
    7320:	6e 5b       	subi	r22, 0xBE	; 190
    7322:	82 ea       	ldi	r24, 0xA2	; 162
    7324:	99 e1       	ldi	r25, 0x19	; 25
    7326:	0e 94 c3 33 	call	0x6786	; 0x6786 <get_menu_range>
    732a:	29 83       	std	Y+1, r18	; 0x01
    732c:	3a 83       	std	Y+2, r19	; 0x02
    732e:	4b 83       	std	Y+3, r20	; 0x03
    7330:	5c 83       	std	Y+4, r21	; 0x04
    7332:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    7334:	80 91 12 08 	lds	r24, 0x0812
    7338:	80 3e       	cpi	r24, 0xE0	; 224
    733a:	f9 f4       	brne	.+62     	; 0x737a <menu_mixer+0x10a>
		{
			text_link = pgm_read_word(&MixerMenuText[menu_temp - MIXERSTART]);
    733c:	80 91 31 05 	lds	r24, 0x0531
    7340:	90 91 32 05 	lds	r25, 0x0532
    7344:	bc 01       	movw	r22, r24
    7346:	6e 5b       	subi	r22, 0xBE	; 190
    7348:	71 09       	sbc	r23, r1
    734a:	fb 01       	movw	r30, r22
    734c:	ee 0f       	add	r30, r30
    734e:	ff 1f       	adc	r31, r31
    7350:	e4 5b       	subi	r30, 0xB4	; 180
    7352:	f5 4e       	sbci	r31, 0xE5	; 229
    7354:	a5 90       	lpm	r10, Z+
    7356:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    7358:	bb 24       	eor	r11, r11
    735a:	66 0d       	add	r22, r6
    735c:	77 1d       	adc	r23, r7
    735e:	1f 92       	push	r1
    7360:	1f 92       	push	r1
    7362:	81 2c       	mov	r8, r1
    7364:	c1 2c       	mov	r12, r1
    7366:	e9 80       	ldd	r14, Y+1	; 0x01
    7368:	fa 80       	ldd	r15, Y+2	; 0x02
    736a:	0b 81       	ldd	r16, Y+3	; 0x03
    736c:	1c 81       	ldd	r17, Y+4	; 0x04
    736e:	2d 81       	ldd	r18, Y+5	; 0x05
    7370:	41 e0       	ldi	r20, 0x01	; 1
    7372:	0e 94 4f 34 	call	0x689e	; 0x689e <do_menu_item>
    7376:	0f 90       	pop	r0
    7378:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    737a:	80 91 12 08 	lds	r24, 0x0812
    737e:	80 3e       	cpi	r24, 0xE0	; 224
    7380:	09 f0       	breq	.+2      	; 0x7384 <menu_mixer+0x114>
    7382:	9c cf       	rjmp	.-200    	; 0x72bc <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    7384:	0e 94 18 3c 	call	0x7830	; 0x7830 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    7388:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    738c:	0e 94 2b 39 	call	0x7256	; 0x7256 <Wait_BUTTON4>
    7390:	95 cf       	rjmp	.-214    	; 0x72bc <menu_mixer+0x4c>
		}
	}
}
    7392:	0f 90       	pop	r0
    7394:	0f 90       	pop	r0
    7396:	0f 90       	pop	r0
    7398:	0f 90       	pop	r0
    739a:	0f 90       	pop	r0
    739c:	df 91       	pop	r29
    739e:	cf 91       	pop	r28
    73a0:	1f 91       	pop	r17
    73a2:	0f 91       	pop	r16
    73a4:	ff 90       	pop	r15
    73a6:	ef 90       	pop	r14
    73a8:	df 90       	pop	r13
    73aa:	cf 90       	pop	r12
    73ac:	bf 90       	pop	r11
    73ae:	af 90       	pop	r10
    73b0:	8f 90       	pop	r8
    73b2:	7f 90       	pop	r7
    73b4:	6f 90       	pop	r6
    73b6:	08 95       	ret

000073b8 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    73b8:	2f 92       	push	r2
    73ba:	3f 92       	push	r3
    73bc:	4f 92       	push	r4
    73be:	5f 92       	push	r5
    73c0:	6f 92       	push	r6
    73c2:	7f 92       	push	r7
    73c4:	8f 92       	push	r8
    73c6:	9f 92       	push	r9
    73c8:	af 92       	push	r10
    73ca:	bf 92       	push	r11
    73cc:	cf 92       	push	r12
    73ce:	df 92       	push	r13
    73d0:	ef 92       	push	r14
    73d2:	ff 92       	push	r15
    73d4:	0f 93       	push	r16
    73d6:	1f 93       	push	r17
    73d8:	cf 93       	push	r28
    73da:	df 93       	push	r29
    73dc:	cd b7       	in	r28, 0x3d	; 61
    73de:	de b7       	in	r29, 0x3e	; 62
    73e0:	28 97       	sbiw	r28, 0x08	; 8
    73e2:	0f b6       	in	r0, 0x3f	; 63
    73e4:	f8 94       	cli
    73e6:	de bf       	out	0x3e, r29	; 62
    73e8:	0f be       	out	0x3f, r0	; 63
    73ea:	cd bf       	out	0x3d, r28	; 61
    73ec:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    73ee:	80 91 14 08 	lds	r24, 0x0814
    73f2:	88 23       	and	r24, r24
    73f4:	41 f0       	breq	.+16     	; 0x7406 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    73f6:	86 ee       	ldi	r24, 0xE6	; 230
    73f8:	90 e0       	ldi	r25, 0x00	; 0
    73fa:	90 93 37 05 	sts	0x0537, r25
    73fe:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    7402:	10 92 14 08 	sts	0x0814, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    7406:	1e 82       	std	Y+6, r1	; 0x06
    7408:	a3 e8       	ldi	r26, 0x83	; 131
    740a:	6a 2e       	mov	r6, r26
    740c:	a7 e0       	ldi	r26, 0x07	; 7
    740e:	7a 2e       	mov	r7, r26
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    7410:	89 2d       	mov	r24, r9
    7412:	90 e0       	ldi	r25, 0x00	; 0
    7414:	01 97       	sbiw	r24, 0x01	; 1
    7416:	25 e0       	ldi	r18, 0x05	; 5
    7418:	28 9f       	mul	r18, r24
    741a:	20 01       	movw	r4, r0
    741c:	29 9f       	mul	r18, r25
    741e:	50 0c       	add	r5, r0
    7420:	11 24       	eor	r1, r1
    7422:	92 01       	movw	r18, r4
    7424:	20 57       	subi	r18, 0x70	; 112
    7426:	35 4e       	sbci	r19, 0xE5	; 229
    7428:	29 01       	movw	r4, r18
    742a:	1c 01       	movw	r2, r24
    742c:	b4 e0       	ldi	r27, 0x04	; 4
    742e:	22 0c       	add	r2, r2
    7430:	33 1c       	adc	r3, r3
    7432:	ba 95       	dec	r27
    7434:	e1 f7       	brne	.-8      	; 0x742e <menu_servo_setup+0x76>
    7436:	f1 01       	movw	r30, r2
    7438:	e1 56       	subi	r30, 0x61	; 97
    743a:	f5 4e       	sbci	r31, 0xE5	; 229
    743c:	1f 01       	movw	r2, r30
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);

		if (button == ENTER)
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    743e:	9c 01       	movw	r18, r24
    7440:	13 e0       	ldi	r17, 0x03	; 3
    7442:	22 0f       	add	r18, r18
    7444:	33 1f       	adc	r19, r19
    7446:	1a 95       	dec	r17
    7448:	e1 f7       	brne	.-8      	; 0x7442 <menu_servo_setup+0x8a>
    744a:	38 87       	std	Y+8, r19	; 0x08
    744c:	2f 83       	std	Y+7, r18	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    744e:	80 91 12 08 	lds	r24, 0x0812
    7452:	80 37       	cpi	r24, 0x70	; 112
    7454:	09 f4       	brne	.+2      	; 0x7458 <menu_servo_setup+0xa0>
    7456:	92 c0       	rjmp	.+292    	; 0x757c <menu_servo_setup+0x1c4>
    7458:	88 e0       	ldi	r24, 0x08	; 8
    745a:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    745c:	32 e0       	ldi	r19, 0x02	; 2
    745e:	93 16       	cp	r9, r19
    7460:	61 f0       	breq	.+24     	; 0x747a <menu_servo_setup+0xc2>
    7462:	43 e0       	ldi	r20, 0x03	; 3
    7464:	94 12       	cpse	r9, r20
    7466:	11 c0       	rjmp	.+34     	; 0x748a <menu_servo_setup+0xd2>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    7468:	e1 e0       	ldi	r30, 0x01	; 1
    746a:	ee 83       	std	Y+6, r30	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    746c:	88 24       	eor	r8, r8
    746e:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    7470:	e3 e9       	ldi	r30, 0x93	; 147
    7472:	6e 2e       	mov	r6, r30
    7474:	e7 e0       	ldi	r30, 0x07	; 7
    7476:	7e 2e       	mov	r7, r30
					servo_enable = true;
					zero_setting = true;
					break;
    7478:	08 c0       	rjmp	.+16     	; 0x748a <menu_servo_setup+0xd2>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    747a:	91 e0       	ldi	r25, 0x01	; 1
    747c:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    747e:	88 24       	eor	r8, r8
    7480:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    7482:	fb e8       	ldi	r31, 0x8B	; 139
    7484:	6f 2e       	mov	r6, r31
    7486:	f7 e0       	ldi	r31, 0x07	; 7
    7488:	7f 2e       	mov	r7, r31
    748a:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    748c:	39 f7       	brne	.-50     	; 0x745c <menu_servo_setup+0xa4>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    748e:	a0 90 04 05 	lds	r10, 0x0504
    7492:	b0 90 05 05 	lds	r11, 0x0505
    7496:	61 01       	movw	r12, r2
    7498:	50 e5       	ldi	r21, 0x50	; 80
    749a:	e5 2e       	mov	r14, r21
    749c:	f1 2c       	mov	r15, r1
    749e:	01 e0       	ldi	r16, 0x01	; 1
    74a0:	92 01       	movw	r18, r4
    74a2:	a3 01       	movw	r20, r6
    74a4:	66 ee       	ldi	r22, 0xE6	; 230
    74a6:	70 e0       	ldi	r23, 0x00	; 0
    74a8:	80 91 36 05 	lds	r24, 0x0536
    74ac:	90 91 37 05 	lds	r25, 0x0537
    74b0:	0e 94 04 37 	call	0x6e08	; 0x6e08 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    74b4:	61 e3       	ldi	r22, 0x31	; 49
    74b6:	c6 2e       	mov	r12, r22
    74b8:	65 e0       	ldi	r22, 0x05	; 5
    74ba:	d6 2e       	mov	r13, r22
    74bc:	76 e3       	ldi	r23, 0x36	; 54
    74be:	e7 2e       	mov	r14, r23
    74c0:	75 e0       	ldi	r23, 0x05	; 5
    74c2:	f7 2e       	mov	r15, r23
    74c4:	04 e0       	ldi	r16, 0x04	; 4
    74c6:	15 e0       	ldi	r17, 0x05	; 5
    74c8:	20 91 12 08 	lds	r18, 0x0812
    74cc:	40 e0       	ldi	r20, 0x00	; 0
    74ce:	50 e0       	ldi	r21, 0x00	; 0
    74d0:	66 ee       	ldi	r22, 0xE6	; 230
    74d2:	70 e0       	ldi	r23, 0x00	; 0
    74d4:	88 e0       	ldi	r24, 0x08	; 8
    74d6:	90 e0       	ldi	r25, 0x00	; 0
    74d8:	0e 94 30 36 	call	0x6c60	; 0x6c60 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    74dc:	60 e0       	ldi	r22, 0x00	; 0
    74de:	c2 01       	movw	r24, r4
    74e0:	0e 94 c3 33 	call	0x6786	; 0x6786 <get_menu_range>
    74e4:	29 83       	std	Y+1, r18	; 0x01
    74e6:	3a 83       	std	Y+2, r19	; 0x02
    74e8:	4b 83       	std	Y+3, r20	; 0x03
    74ea:	5c 83       	std	Y+4, r21	; 0x04
    74ec:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    74ee:	80 91 12 08 	lds	r24, 0x0812
    74f2:	80 3e       	cpi	r24, 0xE0	; 224
    74f4:	b9 f5       	brne	.+110    	; 0x7564 <menu_servo_setup+0x1ac>
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    74f6:	80 91 31 05 	lds	r24, 0x0531
    74fa:	90 91 32 05 	lds	r25, 0x0532
    74fe:	9c 01       	movw	r18, r24
    7500:	26 5e       	subi	r18, 0xE6	; 230
    7502:	31 09       	sbc	r19, r1
    7504:	ef 81       	ldd	r30, Y+7	; 0x07
    7506:	f8 85       	ldd	r31, Y+8	; 0x08
    7508:	e2 0f       	add	r30, r18
    750a:	f3 1f       	adc	r31, r19
    750c:	ee 0f       	add	r30, r30
    750e:	ff 1f       	adc	r31, r31
    7510:	e1 56       	subi	r30, 0x61	; 97
    7512:	f5 4e       	sbci	r31, 0xE5	; 229
    7514:	a5 90       	lpm	r10, Z+
    7516:	b4 90       	lpm	r11, Z
    7518:	b3 01       	movw	r22, r6
    751a:	62 0f       	add	r22, r18
    751c:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    751e:	fe 81       	ldd	r31, Y+6	; 0x06
    7520:	ff 23       	and	r31, r31
    7522:	11 f0       	breq	.+4      	; 0x7528 <menu_servo_setup+0x170>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    7524:	fb 01       	movw	r30, r22
    7526:	10 82       	st	Z, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    7528:	46 e2       	ldi	r20, 0x26	; 38
    752a:	42 9f       	mul	r20, r18
    752c:	f0 01       	movw	r30, r0
    752e:	43 9f       	mul	r20, r19
    7530:	f0 0d       	add	r31, r0
    7532:	11 24       	eor	r1, r1
    7534:	ef 58       	subi	r30, 0x8F	; 143
    7536:	f9 4f       	sbci	r31, 0xF9	; 249
    7538:	40 81       	ld	r20, Z
    753a:	41 11       	cpse	r20, r1
    753c:	05 c0       	rjmp	.+10     	; 0x7548 <menu_servo_setup+0x190>
    753e:	40 91 ea 05 	lds	r20, 0x05EA
    7542:	41 11       	cpse	r20, r1
    7544:	01 c0       	rjmp	.+2      	; 0x7548 <menu_servo_setup+0x190>
			{
				servo_enable = false;
    7546:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    7548:	bb 24       	eor	r11, r11
    754a:	3f 93       	push	r19
    754c:	2f 93       	push	r18
    754e:	c1 2c       	mov	r12, r1
    7550:	e9 80       	ldd	r14, Y+1	; 0x01
    7552:	fa 80       	ldd	r15, Y+2	; 0x02
    7554:	0b 81       	ldd	r16, Y+3	; 0x03
    7556:	1c 81       	ldd	r17, Y+4	; 0x04
    7558:	2d 81       	ldd	r18, Y+5	; 0x05
    755a:	41 e0       	ldi	r20, 0x01	; 1
    755c:	0e 94 4f 34 	call	0x689e	; 0x689e <do_menu_item>
    7560:	0f 90       	pop	r0
    7562:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    7564:	80 91 12 08 	lds	r24, 0x0812
    7568:	80 3e       	cpi	r24, 0xE0	; 224
    756a:	09 f0       	breq	.+2      	; 0x756e <menu_servo_setup+0x1b6>
    756c:	70 cf       	rjmp	.-288    	; 0x744e <menu_servo_setup+0x96>
		{
			UpdateLimits();				// Update actual servo trims
    756e:	0e 94 18 3c 	call	0x7830	; 0x7830 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    7572:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    7576:	0e 94 2b 39 	call	0x7256	; 0x7256 <Wait_BUTTON4>
    757a:	69 cf       	rjmp	.-302    	; 0x744e <menu_servo_setup+0x96>
		}
	}
}
    757c:	28 96       	adiw	r28, 0x08	; 8
    757e:	0f b6       	in	r0, 0x3f	; 63
    7580:	f8 94       	cli
    7582:	de bf       	out	0x3e, r29	; 62
    7584:	0f be       	out	0x3f, r0	; 63
    7586:	cd bf       	out	0x3d, r28	; 61
    7588:	df 91       	pop	r29
    758a:	cf 91       	pop	r28
    758c:	1f 91       	pop	r17
    758e:	0f 91       	pop	r16
    7590:	ff 90       	pop	r15
    7592:	ef 90       	pop	r14
    7594:	df 90       	pop	r13
    7596:	cf 90       	pop	r12
    7598:	bf 90       	pop	r11
    759a:	af 90       	pop	r10
    759c:	9f 90       	pop	r9
    759e:	8f 90       	pop	r8
    75a0:	7f 90       	pop	r7
    75a2:	6f 90       	pop	r6
    75a4:	5f 90       	pop	r5
    75a6:	4f 90       	pop	r4
    75a8:	3f 90       	pop	r3
    75aa:	2f 90       	pop	r2
    75ac:	08 95       	ret

000075ae <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    75ae:	2f 92       	push	r2
    75b0:	3f 92       	push	r3
    75b2:	4f 92       	push	r4
    75b4:	5f 92       	push	r5
    75b6:	6f 92       	push	r6
    75b8:	7f 92       	push	r7
    75ba:	8f 92       	push	r8
    75bc:	9f 92       	push	r9
    75be:	af 92       	push	r10
    75c0:	bf 92       	push	r11
    75c2:	cf 92       	push	r12
    75c4:	df 92       	push	r13
    75c6:	ef 92       	push	r14
    75c8:	ff 92       	push	r15
    75ca:	0f 93       	push	r16
    75cc:	1f 93       	push	r17
    75ce:	cf 93       	push	r28
    75d0:	df 93       	push	r29
    75d2:	cd b7       	in	r28, 0x3d	; 61
    75d4:	de b7       	in	r29, 0x3e	; 62
    75d6:	2b 97       	sbiw	r28, 0x0b	; 11
    75d8:	0f b6       	in	r0, 0x3f	; 63
    75da:	f8 94       	cli
    75dc:	de bf       	out	0x3e, r29	; 62
    75de:	0f be       	out	0x3f, r0	; 63
    75e0:	cd bf       	out	0x3d, r28	; 61
    75e2:	98 2e       	mov	r9, r24
	uint8_t		i;
	uint16_t	offset = 0;			// Index into channel structure
	uint16_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    75e4:	80 91 14 08 	lds	r24, 0x0814
    75e8:	88 23       	and	r24, r24
    75ea:	41 f0       	breq	.+16     	; 0x75fc <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    75ec:	85 e9       	ldi	r24, 0x95	; 149
    75ee:	90 e0       	ldi	r25, 0x00	; 0
    75f0:	90 93 37 05 	sts	0x0537, r25
    75f4:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    75f8:	10 92 14 08 	sts	0x0814, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    75fc:	29 e0       	ldi	r18, 0x09	; 9
    75fe:	30 e0       	ldi	r19, 0x00	; 0
    7600:	39 87       	std	Y+9, r19	; 0x09
    7602:	28 87       	std	Y+8, r18	; 0x08
    7604:	61 2c       	mov	r6, r1
    7606:	71 2c       	mov	r7, r1
    7608:	4a ee       	ldi	r20, 0xEA	; 234
    760a:	55 e0       	ldi	r21, 0x05	; 5
    760c:	5f 83       	std	Y+7, r21	; 0x07
    760e:	4e 83       	std	Y+6, r20	; 0x06

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    7610:	89 2d       	mov	r24, r9
    7612:	90 e0       	ldi	r25, 0x00	; 0
    7614:	01 97       	sbiw	r24, 0x01	; 1
    7616:	22 e3       	ldi	r18, 0x32	; 50
    7618:	28 9f       	mul	r18, r24
    761a:	20 01       	movw	r4, r0
    761c:	29 9f       	mul	r18, r25
    761e:	50 0c       	add	r5, r0
    7620:	11 24       	eor	r1, r1
    7622:	92 01       	movw	r18, r4
    7624:	21 53       	subi	r18, 0x31	; 49
    7626:	35 4e       	sbci	r19, 0xE5	; 229
    7628:	29 01       	movw	r4, r18
    762a:	24 e1       	ldi	r18, 0x14	; 20
    762c:	28 9f       	mul	r18, r24
    762e:	10 01       	movw	r2, r0
    7630:	29 9f       	mul	r18, r25
    7632:	30 0c       	add	r3, r0
    7634:	11 24       	eor	r1, r1
    7636:	a1 01       	movw	r20, r2
    7638:	4d 5c       	subi	r20, 0xCD	; 205
    763a:	54 4e       	sbci	r21, 0xE4	; 228
    763c:	1a 01       	movw	r2, r20
			Config.Preset = QUADX;			
		}

		if (button == ENTER)
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    763e:	2a e0       	ldi	r18, 0x0A	; 10
    7640:	28 9f       	mul	r18, r24
    7642:	a0 01       	movw	r20, r0
    7644:	29 9f       	mul	r18, r25
    7646:	50 0d       	add	r21, r0
    7648:	11 24       	eor	r1, r1
    764a:	5b 87       	std	Y+11, r21	; 0x0b
    764c:	4a 87       	std	Y+10, r20	; 0x0a
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    764e:	80 91 12 08 	lds	r24, 0x0812
    7652:	80 37       	cpi	r24, 0x70	; 112
    7654:	09 f4       	brne	.+2      	; 0x7658 <menu_rc_setup+0xaa>
    7656:	d3 c0       	rjmp	.+422    	; 0x77fe <menu_rc_setup+0x250>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    7658:	52 e0       	ldi	r21, 0x02	; 2
    765a:	95 12       	cpse	r9, r21
    765c:	0b c0       	rjmp	.+22     	; 0x7674 <menu_rc_setup+0xc6>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
    765e:	8a e0       	ldi	r24, 0x0A	; 10
    7660:	90 e0       	ldi	r25, 0x00	; 0
    7662:	99 87       	std	Y+9, r25	; 0x09
    7664:	88 87       	std	Y+8, r24	; 0x08
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    7666:	69 e0       	ldi	r22, 0x09	; 9
    7668:	66 2e       	mov	r6, r22
    766a:	71 2c       	mov	r7, r1
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    766c:	29 e4       	ldi	r18, 0x49	; 73
    766e:	36 e0       	ldi	r19, 0x06	; 6
    7670:	3f 83       	std	Y+7, r19	; 0x07
    7672:	2e 83       	std	Y+6, r18	; 0x06
			default:
				break;
		}

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;
    7674:	84 e0       	ldi	r24, 0x04	; 4
    7676:	80 93 52 06 	sts	0x0652, r24

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    767a:	a0 90 04 05 	lds	r10, 0x0504
    767e:	b0 90 05 05 	lds	r11, 0x0505
    7682:	80 91 36 05 	lds	r24, 0x0536
    7686:	90 91 37 05 	lds	r25, 0x0537
    768a:	61 01       	movw	r12, r2
    768c:	3f e4       	ldi	r19, 0x4F	; 79
    768e:	e3 2e       	mov	r14, r19
    7690:	f1 2c       	mov	r15, r1
    7692:	00 e0       	ldi	r16, 0x00	; 0
    7694:	92 01       	movw	r18, r4
    7696:	4e 81       	ldd	r20, Y+6	; 0x06
    7698:	5f 81       	ldd	r21, Y+7	; 0x07
    769a:	b3 01       	movw	r22, r6
    769c:	6b 56       	subi	r22, 0x6B	; 107
    769e:	7f 4f       	sbci	r23, 0xFF	; 255
    76a0:	86 0d       	add	r24, r6
    76a2:	97 1d       	adc	r25, r7
    76a4:	0e 94 04 37 	call	0x6e08	; 0x6e08 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    76a8:	41 e3       	ldi	r20, 0x31	; 49
    76aa:	c4 2e       	mov	r12, r20
    76ac:	45 e0       	ldi	r20, 0x05	; 5
    76ae:	d4 2e       	mov	r13, r20
    76b0:	56 e3       	ldi	r21, 0x36	; 54
    76b2:	e5 2e       	mov	r14, r21
    76b4:	55 e0       	ldi	r21, 0x05	; 5
    76b6:	f5 2e       	mov	r15, r21
    76b8:	04 e0       	ldi	r16, 0x04	; 4
    76ba:	15 e0       	ldi	r17, 0x05	; 5
    76bc:	20 91 12 08 	lds	r18, 0x0812
    76c0:	a3 01       	movw	r20, r6
    76c2:	65 e9       	ldi	r22, 0x95	; 149
    76c4:	70 e0       	ldi	r23, 0x00	; 0
    76c6:	88 85       	ldd	r24, Y+8	; 0x08
    76c8:	99 85       	ldd	r25, Y+9	; 0x09
    76ca:	0e 94 30 36 	call	0x6c60	; 0x6c60 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    76ce:	60 91 31 05 	lds	r22, 0x0531
    76d2:	65 59       	subi	r22, 0x95	; 149
    76d4:	66 19       	sub	r22, r6
    76d6:	c2 01       	movw	r24, r4
    76d8:	0e 94 c3 33 	call	0x6786	; 0x6786 <get_menu_range>
    76dc:	29 83       	std	Y+1, r18	; 0x01
    76de:	3a 83       	std	Y+2, r19	; 0x02
    76e0:	4b 83       	std	Y+3, r20	; 0x03
    76e2:	5c 83       	std	Y+4, r21	; 0x04
    76e4:	6d 83       	std	Y+5, r22	; 0x05

		// If actually editing the preset, show the default setting
		if (menu_temp == PRESETITEM)
    76e6:	80 91 31 05 	lds	r24, 0x0531
    76ea:	90 91 32 05 	lds	r25, 0x0532
    76ee:	87 3a       	cpi	r24, 0xA7	; 167
    76f0:	91 05       	cpc	r25, r1
    76f2:	11 f4       	brne	.+4      	; 0x76f8 <menu_rc_setup+0x14a>
		{
			Config.Preset = QUADX;			
    76f4:	10 92 52 06 	sts	0x0652, r1
		}

		if (button == ENTER)
    76f8:	20 91 12 08 	lds	r18, 0x0812
    76fc:	20 3e       	cpi	r18, 0xE0	; 224
    76fe:	09 f5       	brne	.+66     	; 0x7742 <menu_rc_setup+0x194>
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    7700:	bc 01       	movw	r22, r24
    7702:	65 59       	subi	r22, 0x95	; 149
    7704:	71 09       	sbc	r23, r1
    7706:	66 19       	sub	r22, r6
    7708:	77 09       	sbc	r23, r7
    770a:	ea 85       	ldd	r30, Y+10	; 0x0a
    770c:	fb 85       	ldd	r31, Y+11	; 0x0b
    770e:	e6 0f       	add	r30, r22
    7710:	f7 1f       	adc	r31, r23
    7712:	ee 0f       	add	r30, r30
    7714:	ff 1f       	adc	r31, r31
    7716:	ed 5c       	subi	r30, 0xCD	; 205
    7718:	f4 4e       	sbci	r31, 0xE4	; 228
    771a:	a5 90       	lpm	r10, Z+
    771c:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    771e:	4e 81       	ldd	r20, Y+6	; 0x06
    7720:	5f 81       	ldd	r21, Y+7	; 0x07
    7722:	64 0f       	add	r22, r20
    7724:	75 1f       	adc	r23, r21
    7726:	1f 92       	push	r1
    7728:	1f 92       	push	r1
    772a:	81 2c       	mov	r8, r1
    772c:	c1 2c       	mov	r12, r1
    772e:	e9 80       	ldd	r14, Y+1	; 0x01
    7730:	fa 80       	ldd	r15, Y+2	; 0x02
    7732:	0b 81       	ldd	r16, Y+3	; 0x03
    7734:	1c 81       	ldd	r17, Y+4	; 0x04
    7736:	2d 81       	ldd	r18, Y+5	; 0x05
    7738:	41 e0       	ldi	r20, 0x01	; 1
    773a:	0e 94 4f 34 	call	0x689e	; 0x689e <do_menu_item>
    773e:	0f 90       	pop	r0
    7740:	0f 90       	pop	r0
		}

		// Handle abort neatly
		if (button == ABORT)
    7742:	80 91 12 08 	lds	r24, 0x0812
    7746:	80 3a       	cpi	r24, 0xA0	; 160
    7748:	41 f4       	brne	.+16     	; 0x775a <menu_rc_setup+0x1ac>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    774a:	0e 94 95 38 	call	0x712a	; 0x712a <Wait_BUTTON1>
			button = NONE;
    774e:	80 ef       	ldi	r24, 0xF0	; 240
    7750:	80 93 12 08 	sts	0x0812, r24
			
			// Reset the mixer preset if unchanged
			Config.Preset = OPTIONS;
    7754:	84 e0       	ldi	r24, 0x04	; 4
    7756:	80 93 52 06 	sts	0x0652, r24
		}

		if (button == ENTER)
    775a:	80 91 12 08 	lds	r24, 0x0812
    775e:	80 3e       	cpi	r24, 0xE0	; 224
    7760:	09 f0       	breq	.+2      	; 0x7764 <menu_rc_setup+0x1b6>
    7762:	75 cf       	rjmp	.-278    	; 0x764e <menu_rc_setup+0xa0>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    7764:	0e 94 24 33 	call	0x6648	; 0x6648 <init_int>
			init_uart();			// and UART
    7768:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    776c:	0e 94 18 3c 	call	0x7830	; 0x7830 <UpdateLimits>
			
			// See if mixer preset has changed. Load new preset only if so
			if ((Config.Preset != OPTIONS) && (menu_temp == PRESETITEM))
    7770:	80 91 52 06 	lds	r24, 0x0652
    7774:	84 30       	cpi	r24, 0x04	; 4
    7776:	49 f0       	breq	.+18     	; 0x778a <menu_rc_setup+0x1dc>
    7778:	20 91 31 05 	lds	r18, 0x0531
    777c:	30 91 32 05 	lds	r19, 0x0532
    7780:	27 3a       	cpi	r18, 0xA7	; 167
    7782:	31 05       	cpc	r19, r1
    7784:	11 f4       	brne	.+4      	; 0x778a <menu_rc_setup+0x1dc>
			{
				Load_eeprom_preset(Config.Preset);
    7786:	0e 94 a7 1a 	call	0x354e	; 0x354e <Load_eeprom_preset>
			}

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    778a:	46 e0       	ldi	r20, 0x06	; 6
    778c:	80 91 4e 06 	lds	r24, 0x064E
    7790:	48 1b       	sub	r20, r24
    7792:	6a e1       	ldi	r22, 0x1A	; 26
    7794:	80 ed       	ldi	r24, 0xD0	; 208
    7796:	0e 94 ba 28 	call	0x5174	; 0x5174 <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    779a:	20 91 ed 05 	lds	r18, 0x05ED
    779e:	a2 ec       	ldi	r26, 0xC2	; 194
    77a0:	b5 e0       	ldi	r27, 0x05	; 5
    77a2:	80 e0       	ldi	r24, 0x00	; 0
    77a4:	90 e0       	ldi	r25, 0x00	; 0
    77a6:	fc 01       	movw	r30, r24
    77a8:	21 30       	cpi	r18, 0x01	; 1
    77aa:	19 f4       	brne	.+6      	; 0x77b2 <menu_rc_setup+0x204>
    77ac:	e0 51       	subi	r30, 0x10	; 16
    77ae:	ff 4f       	sbci	r31, 0xFF	; 255
    77b0:	02 c0       	rjmp	.+4      	; 0x77b6 <menu_rc_setup+0x208>
    77b2:	e8 50       	subi	r30, 0x08	; 8
    77b4:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    77b6:	e4 91       	lpm	r30, Z
    77b8:	ec 93       	st	X, r30
    77ba:	01 96       	adiw	r24, 0x01	; 1
    77bc:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    77be:	88 30       	cpi	r24, 0x08	; 8
    77c0:	91 05       	cpc	r25, r1
    77c2:	89 f7       	brne	.-30     	; 0x77a6 <menu_rc_setup+0x1f8>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    77c4:	80 91 ea 05 	lds	r24, 0x05EA
    77c8:	82 30       	cpi	r24, 0x02	; 2
    77ca:	3c f4       	brge	.+14     	; 0x77da <menu_rc_setup+0x22c>
    77cc:	80 91 eb 05 	lds	r24, 0x05EB
    77d0:	82 30       	cpi	r24, 0x02	; 2
    77d2:	19 f4       	brne	.+6      	; 0x77da <menu_rc_setup+0x22c>
			{
				Config.Servo_rate = SYNC;
    77d4:	81 e0       	ldi	r24, 0x01	; 1
    77d6:	80 93 eb 05 	sts	0x05EB, r24
			}
						
			if (Config.ArmMode == ARMABLE)
    77da:	80 91 4b 06 	lds	r24, 0x064B
    77de:	81 30       	cpi	r24, 0x01	; 1
    77e0:	31 f4       	brne	.+12     	; 0x77ee <menu_rc_setup+0x240>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    77e2:	80 91 20 05 	lds	r24, 0x0520
    77e6:	84 60       	ori	r24, 0x04	; 4
    77e8:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    77ec:	2b 98       	cbi	0x05, 3	; 5
			}

			// Return the preset to "Options" when going back to the General menu
			Config.Preset = OPTIONS;
    77ee:	84 e0       	ldi	r24, 0x04	; 4
    77f0:	80 93 52 06 	sts	0x0652, r24

			Save_Config_to_EEPROM(); // Save value and return
    77f4:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    77f8:	0e 94 2b 39 	call	0x7256	; 0x7256 <Wait_BUTTON4>
    77fc:	28 cf       	rjmp	.-432    	; 0x764e <menu_rc_setup+0xa0>
		}
	}
}
    77fe:	2b 96       	adiw	r28, 0x0b	; 11
    7800:	0f b6       	in	r0, 0x3f	; 63
    7802:	f8 94       	cli
    7804:	de bf       	out	0x3e, r29	; 62
    7806:	0f be       	out	0x3f, r0	; 63
    7808:	cd bf       	out	0x3d, r28	; 61
    780a:	df 91       	pop	r29
    780c:	cf 91       	pop	r28
    780e:	1f 91       	pop	r17
    7810:	0f 91       	pop	r16
    7812:	ff 90       	pop	r15
    7814:	ef 90       	pop	r14
    7816:	df 90       	pop	r13
    7818:	cf 90       	pop	r12
    781a:	bf 90       	pop	r11
    781c:	af 90       	pop	r10
    781e:	9f 90       	pop	r9
    7820:	8f 90       	pop	r8
    7822:	7f 90       	pop	r7
    7824:	6f 90       	pop	r6
    7826:	5f 90       	pop	r5
    7828:	4f 90       	pop	r4
    782a:	3f 90       	pop	r3
    782c:	2f 90       	pop	r2
    782e:	08 95       	ret

00007830 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7830:	6f 92       	push	r6
    7832:	7f 92       	push	r7
    7834:	8f 92       	push	r8
    7836:	9f 92       	push	r9
    7838:	af 92       	push	r10
    783a:	bf 92       	push	r11
    783c:	cf 92       	push	r12
    783e:	df 92       	push	r13
    7840:	ef 92       	push	r14
    7842:	ff 92       	push	r15
    7844:	0f 93       	push	r16
    7846:	1f 93       	push	r17
    7848:	cf 93       	push	r28
    784a:	df 93       	push	r29
    784c:	cd b7       	in	r28, 0x3d	; 61
    784e:	de b7       	in	r29, 0x3e	; 62
    7850:	2c 97       	sbiw	r28, 0x0c	; 12
    7852:	0f b6       	in	r0, 0x3f	; 63
    7854:	f8 94       	cli
    7856:	de bf       	out	0x3e, r29	; 62
    7858:	0f be       	out	0x3f, r0	; 63
    785a:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    785c:	80 91 f5 05 	lds	r24, 0x05F5
    7860:	8f 83       	std	Y+7, r24	; 0x07
    7862:	80 91 fb 05 	lds	r24, 0x05FB
    7866:	88 87       	std	Y+8, r24	; 0x08
    7868:	80 91 01 06 	lds	r24, 0x0601
    786c:	89 87       	std	Y+9, r24	; 0x09
    786e:	80 91 07 06 	lds	r24, 0x0607
    7872:	8a 87       	std	Y+10, r24	; 0x0a
    7874:	80 91 0d 06 	lds	r24, 0x060D
    7878:	8b 87       	std	Y+11, r24	; 0x0b
    787a:	80 91 13 06 	lds	r24, 0x0613
    787e:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    7880:	80 91 f4 05 	lds	r24, 0x05F4
    7884:	89 83       	std	Y+1, r24	; 0x01
    7886:	80 91 fa 05 	lds	r24, 0x05FA
    788a:	8a 83       	std	Y+2, r24	; 0x02
    788c:	80 91 00 06 	lds	r24, 0x0600
    7890:	8b 83       	std	Y+3, r24	; 0x03
    7892:	80 91 06 06 	lds	r24, 0x0606
    7896:	8c 83       	std	Y+4, r24	; 0x04
    7898:	80 91 0c 06 	lds	r24, 0x060C
    789c:	8d 83       	std	Y+5, r24	; 0x05
    789e:	80 91 12 06 	lds	r24, 0x0612
    78a2:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    78a4:	80 91 4d 06 	lds	r24, 0x064D
    78a8:	99 27       	eor	r25, r25
    78aa:	87 fd       	sbrc	r24, 7
    78ac:	90 95       	com	r25
    78ae:	a9 2f       	mov	r26, r25
    78b0:	b9 2f       	mov	r27, r25
    78b2:	89 30       	cpi	r24, 0x09	; 9
    78b4:	91 05       	cpc	r25, r1
    78b6:	08 f5       	brcc	.+66     	; 0x78fa <UpdateLimits+0xca>
    78b8:	fc 01       	movw	r30, r24
    78ba:	e3 5a       	subi	r30, 0xA3	; 163
    78bc:	ff 4f       	sbci	r31, 0xFF	; 255
    78be:	0c 94 78 4f 	jmp	0x9ef0	; 0x9ef0 <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    78c2:	80 e4       	ldi	r24, 0x40	; 64
    78c4:	91 e0       	ldi	r25, 0x01	; 1
    78c6:	14 c0       	rjmp	.+40     	; 0x78f0 <UpdateLimits+0xc0>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    78c8:	8a e4       	ldi	r24, 0x4A	; 74
    78ca:	91 e0       	ldi	r25, 0x01	; 1
    78cc:	11 c0       	rjmp	.+34     	; 0x78f0 <UpdateLimits+0xc0>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    78ce:	84 e5       	ldi	r24, 0x54	; 84
    78d0:	91 e0       	ldi	r25, 0x01	; 1
    78d2:	0e c0       	rjmp	.+28     	; 0x78f0 <UpdateLimits+0xc0>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    78d4:	8e e5       	ldi	r24, 0x5E	; 94
    78d6:	91 e0       	ldi	r25, 0x01	; 1
    78d8:	0b c0       	rjmp	.+22     	; 0x78f0 <UpdateLimits+0xc0>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    78da:	88 e6       	ldi	r24, 0x68	; 104
    78dc:	91 e0       	ldi	r25, 0x01	; 1
    78de:	08 c0       	rjmp	.+16     	; 0x78f0 <UpdateLimits+0xc0>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    78e0:	82 e7       	ldi	r24, 0x72	; 114
    78e2:	91 e0       	ldi	r25, 0x01	; 1
    78e4:	05 c0       	rjmp	.+10     	; 0x78f0 <UpdateLimits+0xc0>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    78e6:	8c e7       	ldi	r24, 0x7C	; 124
    78e8:	91 e0       	ldi	r25, 0x01	; 1
    78ea:	02 c0       	rjmp	.+4      	; 0x78f0 <UpdateLimits+0xc0>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    78ec:	86 e8       	ldi	r24, 0x86	; 134
    78ee:	91 e0       	ldi	r25, 0x01	; 1
    78f0:	90 93 48 06 	sts	0x0648, r25
    78f4:	80 93 47 06 	sts	0x0647, r24
			break;
    78f8:	04 c0       	rjmp	.+8      	; 0x7902 <UpdateLimits+0xd2>
		default:
			Config.PowerTriggerActual = 0;			// Off
    78fa:	10 92 48 06 	sts	0x0648, r1
    78fe:	10 92 47 06 	sts	0x0647, r1
			break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    7902:	20 91 2e 05 	lds	r18, 0x052E
    7906:	30 91 2f 05 	lds	r19, 0x052F
    790a:	80 91 47 06 	lds	r24, 0x0647
    790e:	90 91 48 06 	lds	r25, 0x0648
    7912:	26 36       	cpi	r18, 0x66	; 102
    7914:	48 e0       	ldi	r20, 0x08	; 8
    7916:	34 07       	cpc	r19, r20
    7918:	88 f0       	brcs	.+34     	; 0x793c <UpdateLimits+0x10c>
	{
		Config.PowerTriggerActual *= 6;
    791a:	46 e0       	ldi	r20, 0x06	; 6
    791c:	48 9f       	mul	r20, r24
    791e:	90 01       	movw	r18, r0
    7920:	49 9f       	mul	r20, r25
    7922:	30 0d       	add	r19, r0
    7924:	11 24       	eor	r1, r1
    7926:	30 93 48 06 	sts	0x0648, r19
    792a:	20 93 47 06 	sts	0x0647, r18
    792e:	77 e1       	ldi	r23, 0x17	; 23
    7930:	a7 2e       	mov	r10, r23
    7932:	76 e0       	ldi	r23, 0x06	; 6
    7934:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7936:	00 e0       	ldi	r16, 0x00	; 0
    7938:	10 e0       	ldi	r17, 0x00	; 0
    793a:	25 c0       	rjmp	.+74     	; 0x7986 <UpdateLimits+0x156>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    793c:	a9 01       	movw	r20, r18
    793e:	42 5c       	subi	r20, 0xC2	; 194
    7940:	56 40       	sbci	r21, 0x06	; 6
    7942:	44 3a       	cpi	r20, 0xA4	; 164
    7944:	51 40       	sbci	r21, 0x01	; 1
    7946:	10 f4       	brcc	.+4      	; 0x794c <UpdateLimits+0x11c>
	{
		Config.PowerTriggerActual *= 5;
    7948:	45 e0       	ldi	r20, 0x05	; 5
    794a:	e8 cf       	rjmp	.-48     	; 0x791c <UpdateLimits+0xec>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    794c:	a9 01       	movw	r20, r18
    794e:	44 51       	subi	r20, 0x14	; 20
    7950:	55 40       	sbci	r21, 0x05	; 5
    7952:	4e 3a       	cpi	r20, 0xAE	; 174
    7954:	51 40       	sbci	r21, 0x01	; 1
    7956:	28 f4       	brcc	.+10     	; 0x7962 <UpdateLimits+0x132>
	{
		Config.PowerTriggerActual *= 4;
    7958:	88 0f       	add	r24, r24
    795a:	99 1f       	adc	r25, r25
    795c:	88 0f       	add	r24, r24
    795e:	99 1f       	adc	r25, r25
    7960:	0d c0       	rjmp	.+26     	; 0x797c <UpdateLimits+0x14c>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    7962:	24 58       	subi	r18, 0x84	; 132
    7964:	33 40       	sbci	r19, 0x03	; 3
    7966:	20 39       	cpi	r18, 0x90	; 144
    7968:	31 40       	sbci	r19, 0x01	; 1
    796a:	30 f4       	brcc	.+12     	; 0x7978 <UpdateLimits+0x148>
	{
		Config.PowerTriggerActual *= 3;
    796c:	9c 01       	movw	r18, r24
    796e:	22 0f       	add	r18, r18
    7970:	33 1f       	adc	r19, r19
    7972:	28 0f       	add	r18, r24
    7974:	39 1f       	adc	r19, r25
    7976:	d7 cf       	rjmp	.-82     	; 0x7926 <UpdateLimits+0xf6>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    7978:	88 0f       	add	r24, r24
    797a:	99 1f       	adc	r25, r25
    797c:	90 93 48 06 	sts	0x0648, r25
    7980:	80 93 47 06 	sts	0x0647, r24
    7984:	d4 cf       	rjmp	.-88     	; 0x792e <UpdateLimits+0xfe>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7986:	65 01       	movw	r12, r10
    7988:	e1 2c       	mov	r14, r1
    798a:	f1 2c       	mov	r15, r1
    798c:	87 e0       	ldi	r24, 0x07	; 7
    798e:	88 2e       	mov	r8, r24
    7990:	91 2c       	mov	r9, r1
    7992:	8c 0e       	add	r8, r28
    7994:	9d 1e       	adc	r9, r29
    7996:	80 0e       	add	r8, r16
    7998:	91 1e       	adc	r9, r17
    799a:	66 24       	eor	r6, r6
    799c:	63 94       	inc	r6
    799e:	71 2c       	mov	r7, r1
    79a0:	6c 0e       	add	r6, r28
    79a2:	7d 1e       	adc	r7, r29
    79a4:	60 0e       	add	r6, r16
    79a6:	71 1e       	adc	r7, r17
    79a8:	f4 01       	movw	r30, r8
    79aa:	ee 0d       	add	r30, r14
    79ac:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    79ae:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    79b0:	bb 27       	eor	r27, r27
    79b2:	a7 fd       	sbrc	r26, 7
    79b4:	b0 95       	com	r27
    79b6:	20 e8       	ldi	r18, 0x80	; 128
    79b8:	32 e0       	ldi	r19, 0x02	; 2
    79ba:	0e 94 95 4f 	call	0x9f2a	; 0x9f2a <__usmulhisi3>
    79be:	f6 01       	movw	r30, r12
    79c0:	61 93       	st	Z+, r22
    79c2:	71 93       	st	Z+, r23
    79c4:	81 93       	st	Z+, r24
    79c6:	91 93       	st	Z+, r25
    79c8:	6f 01       	movw	r12, r30
    79ca:	f3 01       	movw	r30, r6
    79cc:	ee 0d       	add	r30, r14
    79ce:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    79d0:	20 81       	ld	r18, Z
    79d2:	22 23       	and	r18, r18
    79d4:	b1 f0       	breq	.+44     	; 0x7a02 <UpdateLimits+0x1d2>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    79d6:	35 e0       	ldi	r19, 0x05	; 5
    79d8:	66 0f       	add	r22, r22
    79da:	77 1f       	adc	r23, r23
    79dc:	88 1f       	adc	r24, r24
    79de:	99 1f       	adc	r25, r25
    79e0:	3a 95       	dec	r19
    79e2:	d1 f7       	brne	.-12     	; 0x79d8 <UpdateLimits+0x1a8>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    79e4:	33 27       	eor	r19, r19
    79e6:	27 fd       	sbrc	r18, 7
    79e8:	30 95       	com	r19
    79ea:	43 2f       	mov	r20, r19
    79ec:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    79ee:	0e 94 59 4f 	call	0x9eb2	; 0x9eb2 <__divmodsi4>
    79f2:	d6 01       	movw	r26, r12
    79f4:	54 96       	adiw	r26, 0x14	; 20
    79f6:	2d 93       	st	X+, r18
    79f8:	3d 93       	st	X+, r19
    79fa:	4d 93       	st	X+, r20
    79fc:	5c 93       	st	X, r21
    79fe:	57 97       	sbiw	r26, 0x17	; 23
    7a00:	05 c0       	rjmp	.+10     	; 0x7a0c <UpdateLimits+0x1dc>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    7a02:	f6 01       	movw	r30, r12
    7a04:	14 8a       	std	Z+20, r1	; 0x14
    7a06:	15 8a       	std	Z+21, r1	; 0x15
    7a08:	16 8a       	std	Z+22, r1	; 0x16
    7a0a:	17 8a       	std	Z+23, r1	; 0x17
    7a0c:	ff ef       	ldi	r31, 0xFF	; 255
    7a0e:	ef 1a       	sub	r14, r31
    7a10:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    7a12:	23 e0       	ldi	r18, 0x03	; 3
    7a14:	e2 16       	cp	r14, r18
    7a16:	f1 04       	cpc	r15, r1
    7a18:	39 f6       	brne	.-114    	; 0x79a8 <UpdateLimits+0x178>
    7a1a:	4c e0       	ldi	r20, 0x0C	; 12
    7a1c:	a4 0e       	add	r10, r20
    7a1e:	b1 1c       	adc	r11, r1
    7a20:	0d 5f       	subi	r16, 0xFD	; 253
    7a22:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    7a24:	06 30       	cpi	r16, 0x06	; 6
    7a26:	11 05       	cpc	r17, r1
    7a28:	09 f0       	breq	.+2      	; 0x7a2c <UpdateLimits+0x1fc>
    7a2a:	ad cf       	rjmp	.-166    	; 0x7986 <UpdateLimits+0x156>
    7a2c:	8b e8       	ldi	r24, 0x8B	; 139
    7a2e:	97 e0       	ldi	r25, 0x07	; 7
    7a30:	ea ec       	ldi	r30, 0xCA	; 202
    7a32:	f5 e0       	ldi	r31, 0x05	; 5
    7a34:	63 e9       	ldi	r22, 0x93	; 147
    7a36:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    7a38:	dc 01       	movw	r26, r24
    7a3a:	2d 91       	ld	r18, X+
    7a3c:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7a3e:	ba e0       	ldi	r27, 0x0A	; 10
    7a40:	2b 02       	muls	r18, r27
    7a42:	90 01       	movw	r18, r0
    7a44:	11 24       	eor	r1, r1
    7a46:	2a 55       	subi	r18, 0x5A	; 90
    7a48:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    7a4a:	31 83       	std	Z+1, r19	; 0x01
    7a4c:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    7a4e:	db 01       	movw	r26, r22
    7a50:	2d 91       	ld	r18, X+
    7a52:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7a54:	ba e0       	ldi	r27, 0x0A	; 10
    7a56:	2b 02       	muls	r18, r27
    7a58:	90 01       	movw	r18, r0
    7a5a:	11 24       	eor	r1, r1
    7a5c:	2a 55       	subi	r18, 0x5A	; 90
    7a5e:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    7a60:	33 83       	std	Z+3, r19	; 0x03
    7a62:	22 83       	std	Z+2, r18	; 0x02
    7a64:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    7a66:	25 e0       	ldi	r18, 0x05	; 5
    7a68:	ea 3e       	cpi	r30, 0xEA	; 234
    7a6a:	f2 07       	cpc	r31, r18
    7a6c:	29 f7       	brne	.-54     	; 0x7a38 <UpdateLimits+0x208>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    7a6e:	80 91 f8 05 	lds	r24, 0x05F8
    7a72:	4a e0       	ldi	r20, 0x0A	; 10
    7a74:	84 02       	muls	r24, r20
    7a76:	c0 01       	movw	r24, r0
    7a78:	11 24       	eor	r1, r1
    7a7a:	90 93 c1 07 	sts	0x07C1, r25
    7a7e:	80 93 c0 07 	sts	0x07C0, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    7a82:	80 91 fe 05 	lds	r24, 0x05FE
    7a86:	6a e0       	ldi	r22, 0x0A	; 10
    7a88:	86 02       	muls	r24, r22
    7a8a:	c0 01       	movw	r24, r0
    7a8c:	11 24       	eor	r1, r1
    7a8e:	90 93 c5 07 	sts	0x07C5, r25
    7a92:	80 93 c4 07 	sts	0x07C4, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    7a96:	80 91 0a 06 	lds	r24, 0x060A
    7a9a:	aa e0       	ldi	r26, 0x0A	; 10
    7a9c:	8a 02       	muls	r24, r26
    7a9e:	c0 01       	movw	r24, r0
    7aa0:	11 24       	eor	r1, r1
    7aa2:	90 93 c3 07 	sts	0x07C3, r25
    7aa6:	80 93 c2 07 	sts	0x07C2, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    7aaa:	80 91 10 06 	lds	r24, 0x0610
    7aae:	ba e0       	ldi	r27, 0x0A	; 10
    7ab0:	8b 02       	muls	r24, r27
    7ab2:	c0 01       	movw	r24, r0
    7ab4:	11 24       	eor	r1, r1
    7ab6:	90 93 c7 07 	sts	0x07C7, r25
    7aba:	80 93 c6 07 	sts	0x07C6, r24
	}
}
    7abe:	2c 96       	adiw	r28, 0x0c	; 12
    7ac0:	0f b6       	in	r0, 0x3f	; 63
    7ac2:	f8 94       	cli
    7ac4:	de bf       	out	0x3e, r29	; 62
    7ac6:	0f be       	out	0x3f, r0	; 63
    7ac8:	cd bf       	out	0x3d, r28	; 61
    7aca:	df 91       	pop	r29
    7acc:	cf 91       	pop	r28
    7ace:	1f 91       	pop	r17
    7ad0:	0f 91       	pop	r16
    7ad2:	ff 90       	pop	r15
    7ad4:	ef 90       	pop	r14
    7ad6:	df 90       	pop	r13
    7ad8:	cf 90       	pop	r12
    7ada:	bf 90       	pop	r11
    7adc:	af 90       	pop	r10
    7ade:	9f 90       	pop	r9
    7ae0:	8f 90       	pop	r8
    7ae2:	7f 90       	pop	r7
    7ae4:	6f 90       	pop	r6
    7ae6:	08 95       	ret

00007ae8 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    7ae8:	0f 93       	push	r16
    7aea:	1f 93       	push	r17
    7aec:	cf 93       	push	r28
    7aee:	df 93       	push	r29
    7af0:	a3 e5       	ldi	r26, 0x53	; 83
    7af2:	b6 e0       	ldi	r27, 0x06	; 6
    7af4:	03 e8       	ldi	r16, 0x83	; 131
    7af6:	17 e0       	ldi	r17, 0x07	; 7
    7af8:	ea ec       	ldi	r30, 0xCA	; 202
    7afa:	f5 e0       	ldi	r31, 0x05	; 5
    7afc:	80 e0       	ldi	r24, 0x00	; 0
    7afe:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    7b00:	2d 91       	ld	r18, X+
    7b02:	3c 91       	ld	r19, X
    7b04:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    7b06:	e8 01       	movw	r28, r16
    7b08:	49 91       	ld	r20, Y+
    7b0a:	8e 01       	movw	r16, r28
    7b0c:	41 30       	cpi	r20, 0x01	; 1
    7b0e:	19 f4       	brne	.+6      	; 0x7b16 <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    7b10:	31 95       	neg	r19
    7b12:	21 95       	neg	r18
    7b14:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    7b16:	2a 55       	subi	r18, 0x5A	; 90
    7b18:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    7b1a:	62 81       	ldd	r22, Z+2	; 0x02
    7b1c:	73 81       	ldd	r23, Z+3	; 0x03
    7b1e:	ac 01       	movw	r20, r24
    7b20:	44 0f       	add	r20, r20
    7b22:	55 1f       	adc	r21, r21
    7b24:	62 17       	cp	r22, r18
    7b26:	73 07       	cpc	r23, r19
    7b28:	24 f4       	brge	.+8      	; 0x7b32 <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    7b2a:	45 56       	subi	r20, 0x65	; 101
    7b2c:	57 4f       	sbci	r21, 0xF7	; 247
    7b2e:	ea 01       	movw	r28, r20
    7b30:	08 c0       	rjmp	.+16     	; 0x7b42 <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    7b32:	60 81       	ld	r22, Z
    7b34:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7b36:	45 56       	subi	r20, 0x65	; 101
    7b38:	57 4f       	sbci	r21, 0xF7	; 247
    7b3a:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    7b3c:	26 17       	cp	r18, r22
    7b3e:	37 07       	cpc	r19, r23
    7b40:	1c f4       	brge	.+6      	; 0x7b48 <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7b42:	79 83       	std	Y+1, r23	; 0x01
    7b44:	68 83       	st	Y, r22
    7b46:	02 c0       	rjmp	.+4      	; 0x7b4c <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    7b48:	39 83       	std	Y+1, r19	; 0x01
    7b4a:	28 83       	st	Y, r18
    7b4c:	01 96       	adiw	r24, 0x01	; 1
    7b4e:	96 96       	adiw	r26, 0x26	; 38
    7b50:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    7b52:	88 30       	cpi	r24, 0x08	; 8
    7b54:	91 05       	cpc	r25, r1
    7b56:	a1 f6       	brne	.-88     	; 0x7b00 <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    7b58:	df 91       	pop	r29
    7b5a:	cf 91       	pop	r28
    7b5c:	1f 91       	pop	r17
    7b5e:	0f 91       	pop	r16
    7b60:	08 95       	ret

00007b62 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    7b62:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    7b64:	64 36       	cpi	r22, 0x64	; 100
    7b66:	71 05       	cpc	r23, r1
    7b68:	e9 f0       	breq	.+58     	; 0x7ba4 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    7b6a:	6c 39       	cpi	r22, 0x9C	; 156
    7b6c:	8f ef       	ldi	r24, 0xFF	; 255
    7b6e:	78 07       	cpc	r23, r24
    7b70:	29 f4       	brne	.+10     	; 0x7b7c <scale32+0x1a>
	{
		return -value16;	
    7b72:	88 27       	eor	r24, r24
    7b74:	99 27       	eor	r25, r25
    7b76:	82 1b       	sub	r24, r18
    7b78:	93 0b       	sbc	r25, r19
    7b7a:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    7b7c:	61 15       	cp	r22, r1
    7b7e:	71 05       	cpc	r23, r1
    7b80:	71 f0       	breq	.+28     	; 0x7b9e <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    7b82:	db 01       	movw	r26, r22
    7b84:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    7b88:	6e 5c       	subi	r22, 0xCE	; 206
    7b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    7b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    7b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    7b90:	24 e6       	ldi	r18, 0x64	; 100
    7b92:	30 e0       	ldi	r19, 0x00	; 0
    7b94:	40 e0       	ldi	r20, 0x00	; 0
    7b96:	50 e0       	ldi	r21, 0x00	; 0
    7b98:	0e 94 59 4f 	call	0x9eb2	; 0x9eb2 <__divmodsi4>
    7b9c:	03 c0       	rjmp	.+6      	; 0x7ba4 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    7b9e:	80 e0       	ldi	r24, 0x00	; 0
    7ba0:	90 e0       	ldi	r25, 0x00	; 0
    7ba2:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    7ba4:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    7ba6:	08 95       	ret

00007ba8 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    7ba8:	2f 92       	push	r2
    7baa:	3f 92       	push	r3
    7bac:	4f 92       	push	r4
    7bae:	5f 92       	push	r5
    7bb0:	6f 92       	push	r6
    7bb2:	7f 92       	push	r7
    7bb4:	8f 92       	push	r8
    7bb6:	9f 92       	push	r9
    7bb8:	af 92       	push	r10
    7bba:	bf 92       	push	r11
    7bbc:	cf 92       	push	r12
    7bbe:	df 92       	push	r13
    7bc0:	ef 92       	push	r14
    7bc2:	ff 92       	push	r15
    7bc4:	0f 93       	push	r16
    7bc6:	1f 93       	push	r17
    7bc8:	cf 93       	push	r28
    7bca:	df 93       	push	r29
    7bcc:	cd b7       	in	r28, 0x3d	; 61
    7bce:	de b7       	in	r29, 0x3e	; 62
    7bd0:	e2 97       	sbiw	r28, 0x32	; 50
    7bd2:	0f b6       	in	r0, 0x3f	; 63
    7bd4:	f8 94       	cli
    7bd6:	de bf       	out	0x3e, r29	; 62
    7bd8:	0f be       	out	0x3f, r0	; 63
    7bda:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    7bdc:	60 91 a9 05 	lds	r22, 0x05A9
    7be0:	70 91 aa 05 	lds	r23, 0x05AA
    7be4:	80 91 ab 05 	lds	r24, 0x05AB
    7be8:	90 91 ac 05 	lds	r25, 0x05AC
    7bec:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
    7bf0:	8b 01       	movw	r16, r22
    7bf2:	83 e0       	ldi	r24, 0x03	; 3
    7bf4:	00 0f       	add	r16, r16
    7bf6:	11 1f       	adc	r17, r17
    7bf8:	8a 95       	dec	r24
    7bfa:	e1 f7       	brne	.-8      	; 0x7bf4 <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    7bfc:	60 91 ad 05 	lds	r22, 0x05AD
    7c00:	70 91 ae 05 	lds	r23, 0x05AE
    7c04:	80 91 af 05 	lds	r24, 0x05AF
    7c08:	90 91 b0 05 	lds	r25, 0x05B0
    7c0c:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
    7c10:	93 e0       	ldi	r25, 0x03	; 3
    7c12:	66 0f       	add	r22, r22
    7c14:	77 1f       	adc	r23, r23
    7c16:	9a 95       	dec	r25
    7c18:	e1 f7       	brne	.-8      	; 0x7c12 <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    7c1a:	20 91 51 08 	lds	r18, 0x0851
    7c1e:	30 91 52 08 	lds	r19, 0x0852
    7c22:	3e 8f       	std	Y+30, r19	; 0x1e
    7c24:	2d 8f       	std	Y+29, r18	; 0x1d
    7c26:	38 8b       	std	Y+16, r19	; 0x10
    7c28:	2f 87       	std	Y+15, r18	; 0x0f
    7c2a:	40 91 53 08 	lds	r20, 0x0853
    7c2e:	50 91 54 08 	lds	r21, 0x0854
    7c32:	58 a3       	std	Y+32, r21	; 0x20
    7c34:	4f 8f       	std	Y+31, r20	; 0x1f
    7c36:	5a 8b       	std	Y+18, r21	; 0x12
    7c38:	49 8b       	std	Y+17, r20	; 0x11
    7c3a:	20 91 55 08 	lds	r18, 0x0855
    7c3e:	30 91 56 08 	lds	r19, 0x0856
    7c42:	3a a3       	std	Y+34, r19	; 0x22
    7c44:	29 a3       	std	Y+33, r18	; 0x21
    7c46:	3c 8b       	std	Y+20, r19	; 0x14
    7c48:	2b 8b       	std	Y+19, r18	; 0x13
    7c4a:	1e 8b       	std	Y+22, r17	; 0x16
    7c4c:	0d 8b       	std	Y+21, r16	; 0x15
    7c4e:	78 8f       	std	Y+24, r23	; 0x18
    7c50:	6f 8b       	std	Y+23, r22	; 0x17
    7c52:	40 91 63 08 	lds	r20, 0x0863
    7c56:	50 91 64 08 	lds	r21, 0x0864
    7c5a:	5c a3       	std	Y+36, r21	; 0x24
    7c5c:	4b a3       	std	Y+35, r20	; 0x23
    7c5e:	5a 8f       	std	Y+26, r21	; 0x1a
    7c60:	49 8f       	std	Y+25, r20	; 0x19
    7c62:	20 91 65 08 	lds	r18, 0x0865
    7c66:	30 91 66 08 	lds	r19, 0x0866
    7c6a:	3e a3       	std	Y+38, r19	; 0x26
    7c6c:	2d a3       	std	Y+37, r18	; 0x25
    7c6e:	3c 8f       	std	Y+28, r19	; 0x1c
    7c70:	2b 8f       	std	Y+27, r18	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    7c72:	40 91 57 08 	lds	r20, 0x0857
    7c76:	50 91 58 08 	lds	r21, 0x0858
    7c7a:	58 a7       	std	Y+40, r21	; 0x28
    7c7c:	4f a3       	std	Y+39, r20	; 0x27
    7c7e:	5a 83       	std	Y+2, r21	; 0x02
    7c80:	49 83       	std	Y+1, r20	; 0x01
    7c82:	20 91 59 08 	lds	r18, 0x0859
    7c86:	30 91 5a 08 	lds	r19, 0x085A
    7c8a:	3a a7       	std	Y+42, r19	; 0x2a
    7c8c:	29 a7       	std	Y+41, r18	; 0x29
    7c8e:	3c 83       	std	Y+4, r19	; 0x04
    7c90:	2b 83       	std	Y+3, r18	; 0x03
    7c92:	20 90 5b 08 	lds	r2, 0x085B
    7c96:	30 90 5c 08 	lds	r3, 0x085C
    7c9a:	3e 82       	std	Y+6, r3	; 0x06
    7c9c:	2d 82       	std	Y+5, r2	; 0x05
    7c9e:	18 87       	std	Y+8, r17	; 0x08
    7ca0:	0f 83       	std	Y+7, r16	; 0x07
    7ca2:	7a 87       	std	Y+10, r23	; 0x0a
    7ca4:	69 87       	std	Y+9, r22	; 0x09
    7ca6:	40 90 69 08 	lds	r4, 0x0869
    7caa:	50 90 6a 08 	lds	r5, 0x086A
    7cae:	5c 86       	std	Y+12, r5	; 0x0c
    7cb0:	4b 86       	std	Y+11, r4	; 0x0b
    7cb2:	80 90 6b 08 	lds	r8, 0x086B
    7cb6:	90 90 6c 08 	lds	r9, 0x086C
    7cba:	9e 86       	std	Y+14, r9	; 0x0e
    7cbc:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (transition < 100)
    7cbe:	a0 90 21 05 	lds	r10, 0x0521
    7cc2:	b0 90 22 05 	lds	r11, 0x0522
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7cc6:	40 91 67 08 	lds	r20, 0x0867
    7cca:	50 91 68 08 	lds	r21, 0x0868
    7cce:	5c a7       	std	Y+44, r21	; 0x2c
    7cd0:	4b a7       	std	Y+43, r20	; 0x2b
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7cd2:	20 91 6d 08 	lds	r18, 0x086D
    7cd6:	30 91 6e 08 	lds	r19, 0x086E
    7cda:	3e a7       	std	Y+46, r19	; 0x2e
    7cdc:	2d a7       	std	Y+45, r18	; 0x2d
    7cde:	c1 2c       	mov	r12, r1
    7ce0:	d1 2c       	mov	r13, r1
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7ce2:	4f a1       	ldd	r20, Y+39	; 0x27
    7ce4:	58 a5       	ldd	r21, Y+40	; 0x28
    7ce6:	51 95       	neg	r21
    7ce8:	41 95       	neg	r20
    7cea:	51 09       	sbc	r21, r1
    7cec:	58 ab       	std	Y+48, r21	; 0x30
    7cee:	4f a7       	std	Y+47, r20	; 0x2f
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    7cf0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7cf2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    7cf4:	31 95       	neg	r19
    7cf6:	21 95       	neg	r18
    7cf8:	31 09       	sbc	r19, r1
    7cfa:	3a ab       	std	Y+50, r19	; 0x32
    7cfc:	29 ab       	std	Y+49, r18	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (transition < 100)
    7cfe:	34 e6       	ldi	r19, 0x64	; 100
    7d00:	a3 16       	cp	r10, r19
    7d02:	b1 04       	cpc	r11, r1
    7d04:	0c f0       	brlt	.+2      	; 0x7d08 <ProcessMixer+0x160>
    7d06:	7b c0       	rjmp	.+246    	; 0x7dfe <ProcessMixer+0x256>
    7d08:	86 01       	movw	r16, r12
    7d0a:	0f 53       	subi	r16, 0x3F	; 63
    7d0c:	1a 4f       	sbci	r17, 0xFA	; 250
    7d0e:	f8 01       	movw	r30, r16
    7d10:	ec 55       	subi	r30, 0x5C	; 92
    7d12:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    7d14:	80 81       	ld	r24, Z
    7d16:	81 30       	cpi	r24, 0x01	; 1
    7d18:	99 f0       	breq	.+38     	; 0x7d40 <ProcessMixer+0x198>
    7d1a:	82 30       	cpi	r24, 0x02	; 2
    7d1c:	d1 f4       	brne	.+52     	; 0x7d52 <ProcessMixer+0x1aa>
    7d1e:	f8 01       	movw	r30, r16
    7d20:	e2 56       	subi	r30, 0x62	; 98
    7d22:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    7d24:	60 81       	ld	r22, Z
    7d26:	45 e0       	ldi	r20, 0x05	; 5
    7d28:	64 02       	muls	r22, r20
    7d2a:	b0 01       	movw	r22, r0
    7d2c:	11 24       	eor	r1, r1
    7d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7d30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7d32:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    7d36:	ee 24       	eor	r14, r14
    7d38:	ff 24       	eor	r15, r15
    7d3a:	e8 1a       	sub	r14, r24
    7d3c:	f9 0a       	sbc	r15, r25
					break;
    7d3e:	0e c0       	rjmp	.+28     	; 0x7d5c <ProcessMixer+0x1b4>
    7d40:	f8 01       	movw	r30, r16
    7d42:	e2 56       	subi	r30, 0x62	; 98
    7d44:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7d46:	80 81       	ld	r24, Z
    7d48:	87 fd       	sbrc	r24, 7
    7d4a:	06 c0       	rjmp	.+12     	; 0x7d58 <ProcessMixer+0x1b0>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    7d4c:	e9 a8       	ldd	r14, Y+49	; 0x31
    7d4e:	fa a8       	ldd	r15, Y+50	; 0x32
    7d50:	05 c0       	rjmp	.+10     	; 0x7d5c <ProcessMixer+0x1b4>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7d52:	e1 2c       	mov	r14, r1
    7d54:	f1 2c       	mov	r15, r1
    7d56:	02 c0       	rjmp	.+4      	; 0x7d5c <ProcessMixer+0x1b4>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    7d58:	ed 8c       	ldd	r14, Y+29	; 0x1d
    7d5a:	fe 8c       	ldd	r15, Y+30	; 0x1e
    7d5c:	f8 01       	movw	r30, r16
    7d5e:	ea 55       	subi	r30, 0x5A	; 90
    7d60:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    7d62:	80 81       	ld	r24, Z
    7d64:	81 30       	cpi	r24, 0x01	; 1
    7d66:	89 f0       	breq	.+34     	; 0x7d8a <ProcessMixer+0x1e2>
    7d68:	82 30       	cpi	r24, 0x02	; 2
    7d6a:	f1 f4       	brne	.+60     	; 0x7da8 <ProcessMixer+0x200>
    7d6c:	f8 01       	movw	r30, r16
    7d6e:	e0 56       	subi	r30, 0x60	; 96
    7d70:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7d72:	60 81       	ld	r22, Z
    7d74:	55 e0       	ldi	r21, 0x05	; 5
    7d76:	65 02       	muls	r22, r21
    7d78:	b0 01       	movw	r22, r0
    7d7a:	11 24       	eor	r1, r1
    7d7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7d7e:	98 a1       	ldd	r25, Y+32	; 0x20
    7d80:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    7d84:	e8 0e       	add	r14, r24
    7d86:	f9 1e       	adc	r15, r25
					break;
    7d88:	0f c0       	rjmp	.+30     	; 0x7da8 <ProcessMixer+0x200>
    7d8a:	f8 01       	movw	r30, r16
    7d8c:	e0 56       	subi	r30, 0x60	; 96
    7d8e:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7d90:	80 81       	ld	r24, Z
    7d92:	87 ff       	sbrs	r24, 7
    7d94:	05 c0       	rjmp	.+10     	; 0x7da0 <ProcessMixer+0x1f8>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    7d96:	2f 8d       	ldd	r18, Y+31	; 0x1f
    7d98:	38 a1       	ldd	r19, Y+32	; 0x20
    7d9a:	e2 1a       	sub	r14, r18
    7d9c:	f3 0a       	sbc	r15, r19
    7d9e:	04 c0       	rjmp	.+8      	; 0x7da8 <ProcessMixer+0x200>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    7da0:	4f 8d       	ldd	r20, Y+31	; 0x1f
    7da2:	58 a1       	ldd	r21, Y+32	; 0x20
    7da4:	e4 0e       	add	r14, r20
    7da6:	f5 1e       	adc	r15, r21
    7da8:	f8 01       	movw	r30, r16
    7daa:	e8 55       	subi	r30, 0x58	; 88
    7dac:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    7dae:	80 81       	ld	r24, Z
    7db0:	81 30       	cpi	r24, 0x01	; 1
    7db2:	89 f0       	breq	.+34     	; 0x7dd6 <ProcessMixer+0x22e>
    7db4:	82 30       	cpi	r24, 0x02	; 2
    7db6:	f1 f4       	brne	.+60     	; 0x7df4 <ProcessMixer+0x24c>
    7db8:	f8 01       	movw	r30, r16
    7dba:	ee 55       	subi	r30, 0x5E	; 94
    7dbc:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    7dbe:	60 81       	ld	r22, Z
    7dc0:	55 e0       	ldi	r21, 0x05	; 5
    7dc2:	65 02       	muls	r22, r21
    7dc4:	b0 01       	movw	r22, r0
    7dc6:	11 24       	eor	r1, r1
    7dc8:	89 a1       	ldd	r24, Y+33	; 0x21
    7dca:	9a a1       	ldd	r25, Y+34	; 0x22
    7dcc:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    7dd0:	e8 0e       	add	r14, r24
    7dd2:	f9 1e       	adc	r15, r25
					break;
    7dd4:	0f c0       	rjmp	.+30     	; 0x7df4 <ProcessMixer+0x24c>
    7dd6:	f8 01       	movw	r30, r16
    7dd8:	ee 55       	subi	r30, 0x5E	; 94
    7dda:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_rudder_volume < 0 )
    7ddc:	80 81       	ld	r24, Z
    7dde:	87 ff       	sbrs	r24, 7
    7de0:	05 c0       	rjmp	.+10     	; 0x7dec <ProcessMixer+0x244>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    7de2:	29 a1       	ldd	r18, Y+33	; 0x21
    7de4:	3a a1       	ldd	r19, Y+34	; 0x22
    7de6:	e2 1a       	sub	r14, r18
    7de8:	f3 0a       	sbc	r15, r19
    7dea:	04 c0       	rjmp	.+8      	; 0x7df4 <ProcessMixer+0x24c>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    7dec:	49 a1       	ldd	r20, Y+33	; 0x21
    7dee:	5a a1       	ldd	r21, Y+34	; 0x22
    7df0:	e4 0e       	add	r14, r20
    7df2:	f5 1e       	adc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (transition > 0)
    7df4:	1a 14       	cp	r1, r10
    7df6:	1b 04       	cpc	r1, r11
    7df8:	0c f0       	brlt	.+2      	; 0x7dfc <ProcessMixer+0x254>
    7dfa:	7b c0       	rjmp	.+246    	; 0x7ef2 <ProcessMixer+0x34a>
    7dfc:	02 c0       	rjmp	.+4      	; 0x7e02 <ProcessMixer+0x25a>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7dfe:	e1 2c       	mov	r14, r1
    7e00:	f1 2c       	mov	r15, r1
    7e02:	c6 01       	movw	r24, r12
    7e04:	8f 53       	subi	r24, 0x3F	; 63
    7e06:	9a 4f       	sbci	r25, 0xFA	; 250
    7e08:	3c 01       	movw	r6, r24
    7e0a:	fc 01       	movw	r30, r24
    7e0c:	eb 55       	subi	r30, 0x5B	; 91
    7e0e:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (transition > 0)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    7e10:	80 81       	ld	r24, Z
    7e12:	81 30       	cpi	r24, 0x01	; 1
    7e14:	99 f0       	breq	.+38     	; 0x7e3c <ProcessMixer+0x294>
    7e16:	82 30       	cpi	r24, 0x02	; 2
    7e18:	d1 f4       	brne	.+52     	; 0x7e4e <ProcessMixer+0x2a6>
    7e1a:	f3 01       	movw	r30, r6
    7e1c:	e1 56       	subi	r30, 0x61	; 97
    7e1e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7e20:	60 81       	ld	r22, Z
    7e22:	95 e0       	ldi	r25, 0x05	; 5
    7e24:	69 02       	muls	r22, r25
    7e26:	b0 01       	movw	r22, r0
    7e28:	11 24       	eor	r1, r1
    7e2a:	8f a1       	ldd	r24, Y+39	; 0x27
    7e2c:	98 a5       	ldd	r25, Y+40	; 0x28
    7e2e:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    7e32:	00 27       	eor	r16, r16
    7e34:	11 27       	eor	r17, r17
    7e36:	08 1b       	sub	r16, r24
    7e38:	19 0b       	sbc	r17, r25
					break;
    7e3a:	0e c0       	rjmp	.+28     	; 0x7e58 <ProcessMixer+0x2b0>
    7e3c:	f3 01       	movw	r30, r6
    7e3e:	e1 56       	subi	r30, 0x61	; 97
    7e40:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    7e42:	80 81       	ld	r24, Z
    7e44:	87 fd       	sbrc	r24, 7
    7e46:	06 c0       	rjmp	.+12     	; 0x7e54 <ProcessMixer+0x2ac>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7e48:	0f a5       	ldd	r16, Y+47	; 0x2f
    7e4a:	18 a9       	ldd	r17, Y+48	; 0x30
    7e4c:	05 c0       	rjmp	.+10     	; 0x7e58 <ProcessMixer+0x2b0>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7e4e:	00 e0       	ldi	r16, 0x00	; 0
    7e50:	10 e0       	ldi	r17, 0x00	; 0
    7e52:	02 c0       	rjmp	.+4      	; 0x7e58 <ProcessMixer+0x2b0>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    7e54:	0f a1       	ldd	r16, Y+39	; 0x27
    7e56:	18 a5       	ldd	r17, Y+40	; 0x28
    7e58:	f3 01       	movw	r30, r6
    7e5a:	e9 55       	subi	r30, 0x59	; 89
    7e5c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    7e5e:	80 81       	ld	r24, Z
    7e60:	81 30       	cpi	r24, 0x01	; 1
    7e62:	89 f0       	breq	.+34     	; 0x7e86 <ProcessMixer+0x2de>
    7e64:	82 30       	cpi	r24, 0x02	; 2
    7e66:	f1 f4       	brne	.+60     	; 0x7ea4 <ProcessMixer+0x2fc>
    7e68:	f3 01       	movw	r30, r6
    7e6a:	ef 55       	subi	r30, 0x5F	; 95
    7e6c:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    7e6e:	60 81       	ld	r22, Z
    7e70:	55 e0       	ldi	r21, 0x05	; 5
    7e72:	65 02       	muls	r22, r21
    7e74:	b0 01       	movw	r22, r0
    7e76:	11 24       	eor	r1, r1
    7e78:	89 a5       	ldd	r24, Y+41	; 0x29
    7e7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    7e7c:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    7e80:	08 0f       	add	r16, r24
    7e82:	19 1f       	adc	r17, r25
					break;
    7e84:	0f c0       	rjmp	.+30     	; 0x7ea4 <ProcessMixer+0x2fc>
    7e86:	f3 01       	movw	r30, r6
    7e88:	ef 55       	subi	r30, 0x5F	; 95
    7e8a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    7e8c:	80 81       	ld	r24, Z
    7e8e:	87 ff       	sbrs	r24, 7
    7e90:	05 c0       	rjmp	.+10     	; 0x7e9c <ProcessMixer+0x2f4>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    7e92:	29 a5       	ldd	r18, Y+41	; 0x29
    7e94:	3a a5       	ldd	r19, Y+42	; 0x2a
    7e96:	02 1b       	sub	r16, r18
    7e98:	13 0b       	sbc	r17, r19
    7e9a:	04 c0       	rjmp	.+8      	; 0x7ea4 <ProcessMixer+0x2fc>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    7e9c:	49 a5       	ldd	r20, Y+41	; 0x29
    7e9e:	5a a5       	ldd	r21, Y+42	; 0x2a
    7ea0:	04 0f       	add	r16, r20
    7ea2:	15 1f       	adc	r17, r21
    7ea4:	f3 01       	movw	r30, r6
    7ea6:	e7 55       	subi	r30, 0x57	; 87
    7ea8:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    7eaa:	80 81       	ld	r24, Z
    7eac:	81 30       	cpi	r24, 0x01	; 1
    7eae:	81 f0       	breq	.+32     	; 0x7ed0 <ProcessMixer+0x328>
    7eb0:	82 30       	cpi	r24, 0x02	; 2
    7eb2:	c9 f4       	brne	.+50     	; 0x7ee6 <ProcessMixer+0x33e>
    7eb4:	f3 01       	movw	r30, r6
    7eb6:	ed 55       	subi	r30, 0x5D	; 93
    7eb8:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    7eba:	60 81       	ld	r22, Z
    7ebc:	85 e0       	ldi	r24, 0x05	; 5
    7ebe:	68 02       	muls	r22, r24
    7ec0:	b0 01       	movw	r22, r0
    7ec2:	11 24       	eor	r1, r1
    7ec4:	c1 01       	movw	r24, r2
    7ec6:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    7eca:	08 0f       	add	r16, r24
    7ecc:	19 1f       	adc	r17, r25
					break;
    7ece:	0b c0       	rjmp	.+22     	; 0x7ee6 <ProcessMixer+0x33e>
    7ed0:	f3 01       	movw	r30, r6
    7ed2:	ed 55       	subi	r30, 0x5D	; 93
    7ed4:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    7ed6:	80 81       	ld	r24, Z
    7ed8:	87 ff       	sbrs	r24, 7
    7eda:	03 c0       	rjmp	.+6      	; 0x7ee2 <ProcessMixer+0x33a>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    7edc:	02 19       	sub	r16, r2
    7ede:	13 09       	sbc	r17, r3
    7ee0:	02 c0       	rjmp	.+4      	; 0x7ee6 <ProcessMixer+0x33e>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    7ee2:	02 0d       	add	r16, r2
    7ee4:	13 1d       	adc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
    7ee6:	94 e6       	ldi	r25, 0x64	; 100
    7ee8:	a9 16       	cp	r10, r25
    7eea:	b1 04       	cpc	r11, r1
    7eec:	0c f0       	brlt	.+2      	; 0x7ef0 <ProcessMixer+0x348>
    7eee:	7d c0       	rjmp	.+250    	; 0x7fea <ProcessMixer+0x442>
    7ef0:	02 c0       	rjmp	.+4      	; 0x7ef6 <ProcessMixer+0x34e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7ef2:	00 e0       	ldi	r16, 0x00	; 0
    7ef4:	10 e0       	ldi	r17, 0x00	; 0
    7ef6:	d6 01       	movw	r26, r12
    7ef8:	af 53       	subi	r26, 0x3F	; 63
    7efa:	ba 4f       	sbci	r27, 0xFA	; 250
    7efc:	3d 01       	movw	r6, r26
    7efe:	fd 01       	movw	r30, r26
    7f00:	e6 55       	subi	r30, 0x56	; 86
    7f02:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    7f04:	80 81       	ld	r24, Z
    7f06:	81 30       	cpi	r24, 0x01	; 1
    7f08:	89 f0       	breq	.+34     	; 0x7f2c <ProcessMixer+0x384>
    7f0a:	82 30       	cpi	r24, 0x02	; 2
    7f0c:	f1 f4       	brne	.+60     	; 0x7f4a <ProcessMixer+0x3a2>
    7f0e:	fd 01       	movw	r30, r26
    7f10:	e2 56       	subi	r30, 0x62	; 98
    7f12:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    7f14:	60 81       	ld	r22, Z
    7f16:	55 e0       	ldi	r21, 0x05	; 5
    7f18:	65 02       	muls	r22, r21
    7f1a:	b0 01       	movw	r22, r0
    7f1c:	11 24       	eor	r1, r1
    7f1e:	8b a1       	ldd	r24, Y+35	; 0x23
    7f20:	9c a1       	ldd	r25, Y+36	; 0x24
    7f22:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    7f26:	e8 1a       	sub	r14, r24
    7f28:	f9 0a       	sbc	r15, r25
					break;
    7f2a:	0f c0       	rjmp	.+30     	; 0x7f4a <ProcessMixer+0x3a2>
    7f2c:	fd 01       	movw	r30, r26
    7f2e:	e2 56       	subi	r30, 0x62	; 98
    7f30:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7f32:	80 81       	ld	r24, Z
    7f34:	87 ff       	sbrs	r24, 7
    7f36:	05 c0       	rjmp	.+10     	; 0x7f42 <ProcessMixer+0x39a>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    7f38:	2b a1       	ldd	r18, Y+35	; 0x23
    7f3a:	3c a1       	ldd	r19, Y+36	; 0x24
    7f3c:	e2 0e       	add	r14, r18
    7f3e:	f3 1e       	adc	r15, r19
    7f40:	04 c0       	rjmp	.+8      	; 0x7f4a <ProcessMixer+0x3a2>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    7f42:	4b a1       	ldd	r20, Y+35	; 0x23
    7f44:	5c a1       	ldd	r21, Y+36	; 0x24
    7f46:	e4 1a       	sub	r14, r20
    7f48:	f5 0a       	sbc	r15, r21
    7f4a:	f3 01       	movw	r30, r6
    7f4c:	e4 55       	subi	r30, 0x54	; 84
    7f4e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    7f50:	80 81       	ld	r24, Z
    7f52:	81 30       	cpi	r24, 0x01	; 1
    7f54:	89 f0       	breq	.+34     	; 0x7f78 <ProcessMixer+0x3d0>
    7f56:	82 30       	cpi	r24, 0x02	; 2
    7f58:	f1 f4       	brne	.+60     	; 0x7f96 <ProcessMixer+0x3ee>
    7f5a:	f3 01       	movw	r30, r6
    7f5c:	e0 56       	subi	r30, 0x60	; 96
    7f5e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7f60:	60 81       	ld	r22, Z
    7f62:	55 e0       	ldi	r21, 0x05	; 5
    7f64:	65 02       	muls	r22, r21
    7f66:	b0 01       	movw	r22, r0
    7f68:	11 24       	eor	r1, r1
    7f6a:	8d a1       	ldd	r24, Y+37	; 0x25
    7f6c:	9e a1       	ldd	r25, Y+38	; 0x26
    7f6e:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    7f72:	e8 0e       	add	r14, r24
    7f74:	f9 1e       	adc	r15, r25
					break;
    7f76:	0f c0       	rjmp	.+30     	; 0x7f96 <ProcessMixer+0x3ee>
    7f78:	f3 01       	movw	r30, r6
    7f7a:	e0 56       	subi	r30, 0x60	; 96
    7f7c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7f7e:	80 81       	ld	r24, Z
    7f80:	87 ff       	sbrs	r24, 7
    7f82:	05 c0       	rjmp	.+10     	; 0x7f8e <ProcessMixer+0x3e6>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    7f84:	2d a1       	ldd	r18, Y+37	; 0x25
    7f86:	3e a1       	ldd	r19, Y+38	; 0x26
    7f88:	e2 1a       	sub	r14, r18
    7f8a:	f3 0a       	sbc	r15, r19
    7f8c:	04 c0       	rjmp	.+8      	; 0x7f96 <ProcessMixer+0x3ee>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    7f8e:	4d a1       	ldd	r20, Y+37	; 0x25
    7f90:	5e a1       	ldd	r21, Y+38	; 0x26
    7f92:	e4 0e       	add	r14, r20
    7f94:	f5 1e       	adc	r15, r21
    7f96:	f3 01       	movw	r30, r6
    7f98:	e2 55       	subi	r30, 0x52	; 82
    7f9a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    7f9c:	80 81       	ld	r24, Z
    7f9e:	81 30       	cpi	r24, 0x01	; 1
    7fa0:	89 f0       	breq	.+34     	; 0x7fc4 <ProcessMixer+0x41c>
    7fa2:	82 30       	cpi	r24, 0x02	; 2
    7fa4:	f1 f4       	brne	.+60     	; 0x7fe2 <ProcessMixer+0x43a>
    7fa6:	f3 01       	movw	r30, r6
    7fa8:	e5 56       	subi	r30, 0x65	; 101
    7faa:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    7fac:	60 81       	ld	r22, Z
    7fae:	55 e0       	ldi	r21, 0x05	; 5
    7fb0:	65 02       	muls	r22, r21
    7fb2:	b0 01       	movw	r22, r0
    7fb4:	11 24       	eor	r1, r1
    7fb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    7fb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    7fba:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    7fbe:	e8 1a       	sub	r14, r24
    7fc0:	f9 0a       	sbc	r15, r25
					break;
    7fc2:	0f c0       	rjmp	.+30     	; 0x7fe2 <ProcessMixer+0x43a>
    7fc4:	f3 01       	movw	r30, r6
    7fc6:	e5 56       	subi	r30, 0x65	; 101
    7fc8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    7fca:	80 81       	ld	r24, Z
    7fcc:	87 ff       	sbrs	r24, 7
    7fce:	05 c0       	rjmp	.+10     	; 0x7fda <ProcessMixer+0x432>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7fd0:	2b a5       	ldd	r18, Y+43	; 0x2b
    7fd2:	3c a5       	ldd	r19, Y+44	; 0x2c
    7fd4:	e2 0e       	add	r14, r18
    7fd6:	f3 1e       	adc	r15, r19
    7fd8:	04 c0       	rjmp	.+8      	; 0x7fe2 <ProcessMixer+0x43a>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    7fda:	4b a5       	ldd	r20, Y+43	; 0x2b
    7fdc:	5c a5       	ldd	r21, Y+44	; 0x2c
    7fde:	e4 1a       	sub	r14, r20
    7fe0:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (transition > 0)
    7fe2:	1a 14       	cp	r1, r10
    7fe4:	1b 04       	cpc	r1, r11
    7fe6:	0c f0       	brlt	.+2      	; 0x7fea <ProcessMixer+0x442>
    7fe8:	71 c0       	rjmp	.+226    	; 0x80cc <ProcessMixer+0x524>
    7fea:	c6 01       	movw	r24, r12
    7fec:	8f 53       	subi	r24, 0x3F	; 63
    7fee:	9a 4f       	sbci	r25, 0xFA	; 250
    7ff0:	3c 01       	movw	r6, r24
    7ff2:	fc 01       	movw	r30, r24
    7ff4:	e5 55       	subi	r30, 0x55	; 85
    7ff6:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    7ff8:	80 81       	ld	r24, Z
    7ffa:	81 30       	cpi	r24, 0x01	; 1
    7ffc:	81 f0       	breq	.+32     	; 0x801e <ProcessMixer+0x476>
    7ffe:	82 30       	cpi	r24, 0x02	; 2
    8000:	c9 f4       	brne	.+50     	; 0x8034 <ProcessMixer+0x48c>
    8002:	f3 01       	movw	r30, r6
    8004:	e1 56       	subi	r30, 0x61	; 97
    8006:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    8008:	60 81       	ld	r22, Z
    800a:	95 e0       	ldi	r25, 0x05	; 5
    800c:	69 02       	muls	r22, r25
    800e:	b0 01       	movw	r22, r0
    8010:	11 24       	eor	r1, r1
    8012:	c2 01       	movw	r24, r4
    8014:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    8018:	08 1b       	sub	r16, r24
    801a:	19 0b       	sbc	r17, r25
					break;
    801c:	0b c0       	rjmp	.+22     	; 0x8034 <ProcessMixer+0x48c>
    801e:	f3 01       	movw	r30, r6
    8020:	e1 56       	subi	r30, 0x61	; 97
    8022:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    8024:	80 81       	ld	r24, Z
    8026:	87 ff       	sbrs	r24, 7
    8028:	03 c0       	rjmp	.+6      	; 0x8030 <ProcessMixer+0x488>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    802a:	04 0d       	add	r16, r4
    802c:	15 1d       	adc	r17, r5
    802e:	02 c0       	rjmp	.+4      	; 0x8034 <ProcessMixer+0x48c>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    8030:	04 19       	sub	r16, r4
    8032:	15 09       	sbc	r17, r5
    8034:	f3 01       	movw	r30, r6
    8036:	e3 55       	subi	r30, 0x53	; 83
    8038:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    803a:	80 81       	ld	r24, Z
    803c:	81 30       	cpi	r24, 0x01	; 1
    803e:	81 f0       	breq	.+32     	; 0x8060 <ProcessMixer+0x4b8>
    8040:	82 30       	cpi	r24, 0x02	; 2
    8042:	c9 f4       	brne	.+50     	; 0x8076 <ProcessMixer+0x4ce>
    8044:	f3 01       	movw	r30, r6
    8046:	ef 55       	subi	r30, 0x5F	; 95
    8048:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    804a:	60 81       	ld	r22, Z
    804c:	a5 e0       	ldi	r26, 0x05	; 5
    804e:	6a 02       	muls	r22, r26
    8050:	b0 01       	movw	r22, r0
    8052:	11 24       	eor	r1, r1
    8054:	c4 01       	movw	r24, r8
    8056:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    805a:	08 0f       	add	r16, r24
    805c:	19 1f       	adc	r17, r25
					break;
    805e:	0b c0       	rjmp	.+22     	; 0x8076 <ProcessMixer+0x4ce>
    8060:	f3 01       	movw	r30, r6
    8062:	ef 55       	subi	r30, 0x5F	; 95
    8064:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    8066:	80 81       	ld	r24, Z
    8068:	87 ff       	sbrs	r24, 7
    806a:	03 c0       	rjmp	.+6      	; 0x8072 <ProcessMixer+0x4ca>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    806c:	08 19       	sub	r16, r8
    806e:	19 09       	sbc	r17, r9
    8070:	02 c0       	rjmp	.+4      	; 0x8076 <ProcessMixer+0x4ce>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    8072:	08 0d       	add	r16, r8
    8074:	19 1d       	adc	r17, r9
    8076:	f3 01       	movw	r30, r6
    8078:	e1 55       	subi	r30, 0x51	; 81
    807a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    807c:	80 81       	ld	r24, Z
    807e:	81 30       	cpi	r24, 0x01	; 1
    8080:	89 f0       	breq	.+34     	; 0x80a4 <ProcessMixer+0x4fc>
    8082:	82 30       	cpi	r24, 0x02	; 2
    8084:	f1 f4       	brne	.+60     	; 0x80c2 <ProcessMixer+0x51a>
    8086:	f3 01       	movw	r30, r6
    8088:	e4 56       	subi	r30, 0x64	; 100
    808a:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    808c:	60 81       	ld	r22, Z
    808e:	55 e0       	ldi	r21, 0x05	; 5
    8090:	65 02       	muls	r22, r21
    8092:	b0 01       	movw	r22, r0
    8094:	11 24       	eor	r1, r1
    8096:	8d a5       	ldd	r24, Y+45	; 0x2d
    8098:	9e a5       	ldd	r25, Y+46	; 0x2e
    809a:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    809e:	08 1b       	sub	r16, r24
    80a0:	19 0b       	sbc	r17, r25
					break;
    80a2:	0f c0       	rjmp	.+30     	; 0x80c2 <ProcessMixer+0x51a>
    80a4:	f3 01       	movw	r30, r6
    80a6:	e4 56       	subi	r30, 0x64	; 100
    80a8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    80aa:	80 81       	ld	r24, Z
    80ac:	87 ff       	sbrs	r24, 7
    80ae:	05 c0       	rjmp	.+10     	; 0x80ba <ProcessMixer+0x512>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    80b0:	2d a5       	ldd	r18, Y+45	; 0x2d
    80b2:	3e a5       	ldd	r19, Y+46	; 0x2e
    80b4:	02 0f       	add	r16, r18
    80b6:	13 1f       	adc	r17, r19
    80b8:	04 c0       	rjmp	.+8      	; 0x80c2 <ProcessMixer+0x51a>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    80ba:	4d a5       	ldd	r20, Y+45	; 0x2d
    80bc:	5e a5       	ldd	r21, Y+46	; 0x2e
    80be:	04 1b       	sub	r16, r20
    80c0:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (transition < 100)
    80c2:	84 e6       	ldi	r24, 0x64	; 100
    80c4:	a8 16       	cp	r10, r24
    80c6:	b1 04       	cpc	r11, r1
    80c8:	0c f0       	brlt	.+2      	; 0x80cc <ProcessMixer+0x524>
    80ca:	8d c0       	rjmp	.+282    	; 0x81e6 <ProcessMixer+0x63e>
    80cc:	d6 01       	movw	r26, r12
    80ce:	af 53       	subi	r26, 0x3F	; 63
    80d0:	ba 4f       	sbci	r27, 0xFA	; 250
    80d2:	3d 01       	movw	r6, r26
    80d4:	fd 01       	movw	r30, r26
    80d6:	e2 56       	subi	r30, 0x62	; 98
    80d8:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume != 0) 					// Mix in dedicated aileron
    80da:	60 81       	ld	r22, Z
    80dc:	66 23       	and	r22, r22
    80de:	59 f0       	breq	.+22     	; 0x80f6 <ProcessMixer+0x54e>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    80e0:	80 91 8b 08 	lds	r24, 0x088B
    80e4:	90 91 8c 08 	lds	r25, 0x088C
    80e8:	77 27       	eor	r23, r23
    80ea:	67 fd       	sbrc	r22, 7
    80ec:	70 95       	com	r23
    80ee:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
				P1_solution = P1_solution + temp2;
    80f2:	e8 0e       	add	r14, r24
    80f4:	f9 1e       	adc	r15, r25
    80f6:	f3 01       	movw	r30, r6
    80f8:	e0 56       	subi	r30, 0x60	; 96
    80fa:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume != 0) 					// Mix in dedicated elevator
    80fc:	60 81       	ld	r22, Z
    80fe:	66 23       	and	r22, r22
    8100:	59 f0       	breq	.+22     	; 0x8118 <ProcessMixer+0x570>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    8102:	80 91 8d 08 	lds	r24, 0x088D
    8106:	90 91 8e 08 	lds	r25, 0x088E
    810a:	77 27       	eor	r23, r23
    810c:	67 fd       	sbrc	r22, 7
    810e:	70 95       	com	r23
    8110:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
				P1_solution = P1_solution + temp2;
    8114:	e8 0e       	add	r14, r24
    8116:	f9 1e       	adc	r15, r25
    8118:	f3 01       	movw	r30, r6
    811a:	ee 55       	subi	r30, 0x5E	; 94
    811c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume != 0) 					// Mix in dedicated rudder
    811e:	60 81       	ld	r22, Z
    8120:	66 23       	and	r22, r22
    8122:	59 f0       	breq	.+22     	; 0x813a <ProcessMixer+0x592>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    8124:	80 91 8f 08 	lds	r24, 0x088F
    8128:	90 91 90 08 	lds	r25, 0x0890
    812c:	77 27       	eor	r23, r23
    812e:	67 fd       	sbrc	r22, 7
    8130:	70 95       	com	r23
    8132:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
				P1_solution = P1_solution + temp2;
    8136:	e8 0e       	add	r14, r24
    8138:	f9 1e       	adc	r15, r25
    813a:	f3 01       	movw	r30, r6
    813c:	ef 54       	subi	r30, 0x4F	; 79
    813e:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume != 0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    8140:	60 81       	ld	r22, Z
    8142:	66 23       	and	r22, r22
    8144:	19 f1       	breq	.+70     	; 0x818c <ProcessMixer+0x5e4>
    8146:	31 97       	sbiw	r30, 0x01	; 1
    8148:	80 81       	ld	r24, Z
    814a:	8f 30       	cpi	r24, 0x0F	; 15
    814c:	f9 f0       	breq	.+62     	; 0x818c <ProcessMixer+0x5e4>
    814e:	e8 2f       	mov	r30, r24
    8150:	ff 27       	eor	r31, r31
    8152:	e7 fd       	sbrc	r30, 7
    8154:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    8156:	88 30       	cpi	r24, 0x08	; 8
    8158:	64 f0       	brlt	.+24     	; 0x8172 <ProcessMixer+0x5ca>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    815a:	38 97       	sbiw	r30, 0x08	; 8
    815c:	ee 0f       	add	r30, r30
    815e:	ff 1f       	adc	r31, r31
    8160:	21 e0       	ldi	r18, 0x01	; 1
    8162:	30 e0       	ldi	r19, 0x00	; 0
    8164:	2c 0f       	add	r18, r28
    8166:	3d 1f       	adc	r19, r29
    8168:	e2 0f       	add	r30, r18
    816a:	f3 1f       	adc	r31, r19
    816c:	86 85       	ldd	r24, Z+14	; 0x0e
    816e:	97 85       	ldd	r25, Z+15	; 0x0f
    8170:	06 c0       	rjmp	.+12     	; 0x817e <ProcessMixer+0x5d6>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    8172:	ee 0f       	add	r30, r30
    8174:	ff 1f       	adc	r31, r31
    8176:	e7 57       	subi	r30, 0x77	; 119
    8178:	f7 4f       	sbci	r31, 0xF7	; 247
    817a:	80 81       	ld	r24, Z
    817c:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    817e:	77 27       	eor	r23, r23
    8180:	67 fd       	sbrc	r22, 7
    8182:	70 95       	com	r23
    8184:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
				P1_solution = P1_solution + temp2;
    8188:	e8 0e       	add	r14, r24
    818a:	f9 1e       	adc	r15, r25
    818c:	f3 01       	movw	r30, r6
    818e:	eb 54       	subi	r30, 0x4B	; 75
    8190:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume != 0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    8192:	60 81       	ld	r22, Z
    8194:	66 23       	and	r22, r22
    8196:	19 f1       	breq	.+70     	; 0x81de <ProcessMixer+0x636>
    8198:	31 97       	sbiw	r30, 0x01	; 1
    819a:	80 81       	ld	r24, Z
    819c:	8f 30       	cpi	r24, 0x0F	; 15
    819e:	f9 f0       	breq	.+62     	; 0x81de <ProcessMixer+0x636>
    81a0:	e8 2f       	mov	r30, r24
    81a2:	ff 27       	eor	r31, r31
    81a4:	e7 fd       	sbrc	r30, 7
    81a6:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    81a8:	88 30       	cpi	r24, 0x08	; 8
    81aa:	64 f0       	brlt	.+24     	; 0x81c4 <ProcessMixer+0x61c>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    81ac:	38 97       	sbiw	r30, 0x08	; 8
    81ae:	ee 0f       	add	r30, r30
    81b0:	ff 1f       	adc	r31, r31
    81b2:	41 e0       	ldi	r20, 0x01	; 1
    81b4:	50 e0       	ldi	r21, 0x00	; 0
    81b6:	4c 0f       	add	r20, r28
    81b8:	5d 1f       	adc	r21, r29
    81ba:	e4 0f       	add	r30, r20
    81bc:	f5 1f       	adc	r31, r21
    81be:	86 85       	ldd	r24, Z+14	; 0x0e
    81c0:	97 85       	ldd	r25, Z+15	; 0x0f
    81c2:	06 c0       	rjmp	.+12     	; 0x81d0 <ProcessMixer+0x628>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    81c4:	ee 0f       	add	r30, r30
    81c6:	ff 1f       	adc	r31, r31
    81c8:	e7 57       	subi	r30, 0x77	; 119
    81ca:	f7 4f       	sbci	r31, 0xF7	; 247
    81cc:	80 81       	ld	r24, Z
    81ce:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    81d0:	77 27       	eor	r23, r23
    81d2:	67 fd       	sbrc	r22, 7
    81d4:	70 95       	com	r23
    81d6:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
				P1_solution = P1_solution + temp2;
    81da:	e8 0e       	add	r14, r24
    81dc:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (transition > 0)	
    81de:	1a 14       	cp	r1, r10
    81e0:	1b 04       	cpc	r1, r11
    81e2:	0c f0       	brlt	.+2      	; 0x81e6 <ProcessMixer+0x63e>
    81e4:	85 c0       	rjmp	.+266    	; 0x82f0 <ProcessMixer+0x748>
    81e6:	c6 01       	movw	r24, r12
    81e8:	8f 53       	subi	r24, 0x3F	; 63
    81ea:	9a 4f       	sbci	r25, 0xFA	; 250
    81ec:	3c 01       	movw	r6, r24
    81ee:	fc 01       	movw	r30, r24
    81f0:	e1 56       	subi	r30, 0x61	; 97
    81f2:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume != 0) 					// Mix in dedicated aileron
    81f4:	60 81       	ld	r22, Z
    81f6:	66 23       	and	r22, r22
    81f8:	59 f0       	breq	.+22     	; 0x8210 <ProcessMixer+0x668>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    81fa:	80 91 8b 08 	lds	r24, 0x088B
    81fe:	90 91 8c 08 	lds	r25, 0x088C
    8202:	77 27       	eor	r23, r23
    8204:	67 fd       	sbrc	r22, 7
    8206:	70 95       	com	r23
    8208:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
				P2_solution = P2_solution + temp2;
    820c:	08 0f       	add	r16, r24
    820e:	19 1f       	adc	r17, r25
    8210:	f3 01       	movw	r30, r6
    8212:	ef 55       	subi	r30, 0x5F	; 95
    8214:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume != 0) 					// Mix in dedicated elevator
    8216:	60 81       	ld	r22, Z
    8218:	66 23       	and	r22, r22
    821a:	59 f0       	breq	.+22     	; 0x8232 <ProcessMixer+0x68a>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    821c:	80 91 8d 08 	lds	r24, 0x088D
    8220:	90 91 8e 08 	lds	r25, 0x088E
    8224:	77 27       	eor	r23, r23
    8226:	67 fd       	sbrc	r22, 7
    8228:	70 95       	com	r23
    822a:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
				P2_solution = P2_solution + temp2;
    822e:	08 0f       	add	r16, r24
    8230:	19 1f       	adc	r17, r25
    8232:	f3 01       	movw	r30, r6
    8234:	ed 55       	subi	r30, 0x5D	; 93
    8236:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume != 0) 					// Mix in dedicated rudder
    8238:	60 81       	ld	r22, Z
    823a:	66 23       	and	r22, r22
    823c:	59 f0       	breq	.+22     	; 0x8254 <ProcessMixer+0x6ac>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    823e:	80 91 8f 08 	lds	r24, 0x088F
    8242:	90 91 90 08 	lds	r25, 0x0890
    8246:	77 27       	eor	r23, r23
    8248:	67 fd       	sbrc	r22, 7
    824a:	70 95       	com	r23
    824c:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
				P2_solution = P2_solution + temp2;
    8250:	08 0f       	add	r16, r24
    8252:	19 1f       	adc	r17, r25
    8254:	f3 01       	movw	r30, r6
    8256:	ed 54       	subi	r30, 0x4D	; 77
    8258:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume != 0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    825a:	60 81       	ld	r22, Z
    825c:	66 23       	and	r22, r22
    825e:	09 f1       	breq	.+66     	; 0x82a2 <ProcessMixer+0x6fa>
    8260:	31 97       	sbiw	r30, 0x01	; 1
    8262:	80 81       	ld	r24, Z
    8264:	8f 30       	cpi	r24, 0x0F	; 15
    8266:	e9 f0       	breq	.+58     	; 0x82a2 <ProcessMixer+0x6fa>
    8268:	e8 2f       	mov	r30, r24
    826a:	ff 27       	eor	r31, r31
    826c:	e7 fd       	sbrc	r30, 7
    826e:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    8270:	88 30       	cpi	r24, 0x08	; 8
    8272:	54 f0       	brlt	.+20     	; 0x8288 <ProcessMixer+0x6e0>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    8274:	38 97       	sbiw	r30, 0x08	; 8
    8276:	ee 0f       	add	r30, r30
    8278:	ff 1f       	adc	r31, r31
    827a:	a1 e0       	ldi	r26, 0x01	; 1
    827c:	b0 e0       	ldi	r27, 0x00	; 0
    827e:	ac 0f       	add	r26, r28
    8280:	bd 1f       	adc	r27, r29
    8282:	ea 0f       	add	r30, r26
    8284:	fb 1f       	adc	r31, r27
    8286:	04 c0       	rjmp	.+8      	; 0x8290 <ProcessMixer+0x6e8>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    8288:	ee 0f       	add	r30, r30
    828a:	ff 1f       	adc	r31, r31
    828c:	e7 57       	subi	r30, 0x77	; 119
    828e:	f7 4f       	sbci	r31, 0xF7	; 247
    8290:	80 81       	ld	r24, Z
    8292:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    8294:	77 27       	eor	r23, r23
    8296:	67 fd       	sbrc	r22, 7
    8298:	70 95       	com	r23
    829a:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
				P2_solution = P2_solution + temp2;
    829e:	08 0f       	add	r16, r24
    82a0:	19 1f       	adc	r17, r25
    82a2:	f3 01       	movw	r30, r6
    82a4:	e9 54       	subi	r30, 0x49	; 73
    82a6:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume != 0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    82a8:	60 81       	ld	r22, Z
    82aa:	66 23       	and	r22, r22
    82ac:	09 f1       	breq	.+66     	; 0x82f0 <ProcessMixer+0x748>
    82ae:	31 97       	sbiw	r30, 0x01	; 1
    82b0:	80 81       	ld	r24, Z
    82b2:	8f 30       	cpi	r24, 0x0F	; 15
    82b4:	e9 f0       	breq	.+58     	; 0x82f0 <ProcessMixer+0x748>
    82b6:	e8 2f       	mov	r30, r24
    82b8:	ff 27       	eor	r31, r31
    82ba:	e7 fd       	sbrc	r30, 7
    82bc:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    82be:	88 30       	cpi	r24, 0x08	; 8
    82c0:	54 f0       	brlt	.+20     	; 0x82d6 <ProcessMixer+0x72e>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    82c2:	38 97       	sbiw	r30, 0x08	; 8
    82c4:	ee 0f       	add	r30, r30
    82c6:	ff 1f       	adc	r31, r31
    82c8:	21 e0       	ldi	r18, 0x01	; 1
    82ca:	30 e0       	ldi	r19, 0x00	; 0
    82cc:	2c 0f       	add	r18, r28
    82ce:	3d 1f       	adc	r19, r29
    82d0:	e2 0f       	add	r30, r18
    82d2:	f3 1f       	adc	r31, r19
    82d4:	04 c0       	rjmp	.+8      	; 0x82de <ProcessMixer+0x736>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    82d6:	ee 0f       	add	r30, r30
    82d8:	ff 1f       	adc	r31, r31
    82da:	e7 57       	subi	r30, 0x77	; 119
    82dc:	f7 4f       	sbci	r31, 0xF7	; 247
    82de:	80 81       	ld	r24, Z
    82e0:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    82e2:	77 27       	eor	r23, r23
    82e4:	67 fd       	sbrc	r22, 7
    82e6:	70 95       	com	r23
    82e8:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
				P2_solution = P2_solution + temp2;
    82ec:	08 0f       	add	r16, r24
    82ee:	19 1f       	adc	r17, r25
    82f0:	c6 01       	movw	r24, r12
    82f2:	8f 53       	subi	r24, 0x3F	; 63
    82f4:	9a 4f       	sbci	r25, 0xFA	; 250
    82f6:	fc 01       	movw	r30, r24
    82f8:	ee 56       	subi	r30, 0x6E	; 110
    82fa:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    82fc:	f1 82       	std	Z+1, r15	; 0x01
    82fe:	e0 82       	st	Z, r14
    8300:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    8302:	11 83       	std	Z+1, r17	; 0x01
    8304:	00 83       	st	Z, r16
    8306:	36 e2       	ldi	r19, 0x26	; 38
    8308:	c3 0e       	add	r12, r19
    830a:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    830c:	40 e3       	ldi	r20, 0x30	; 48
    830e:	c4 16       	cp	r12, r20
    8310:	41 e0       	ldi	r20, 0x01	; 1
    8312:	d4 06       	cpc	r13, r20
    8314:	09 f0       	breq	.+2      	; 0x8318 <ProcessMixer+0x770>
    8316:	f3 cc       	rjmp	.-1562   	; 0x7cfe <ProcessMixer+0x156>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    8318:	80 91 ef 05 	lds	r24, 0x05EF
    831c:	88 23       	and	r24, r24
    831e:	41 f0       	breq	.+16     	; 0x8330 <ProcessMixer+0x788>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    8320:	80 91 24 05 	lds	r24, 0x0524
    8324:	90 91 25 05 	lds	r25, 0x0525
    8328:	90 93 22 05 	sts	0x0522, r25
    832c:	80 93 21 05 	sts	0x0521, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    8330:	00 91 21 05 	lds	r16, 0x0521
    8334:	10 91 22 05 	lds	r17, 0x0522
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    8338:	b4 e6       	ldi	r27, 0x64	; 100
    833a:	cb 2e       	mov	r12, r27
    833c:	d1 2c       	mov	r13, r1
    833e:	c0 1a       	sub	r12, r16
    8340:	d1 0a       	sbc	r13, r17
    8342:	83 e5       	ldi	r24, 0x53	; 83
    8344:	e8 2e       	mov	r14, r24
    8346:	86 e0       	ldi	r24, 0x06	; 6
    8348:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    834a:	01 15       	cp	r16, r1
    834c:	11 05       	cpc	r17, r1
    834e:	21 f4       	brne	.+8      	; 0x8358 <ProcessMixer+0x7b0>
		{
			temp1 = Config.Channel[i].P1_value;
    8350:	d7 01       	movw	r26, r14
    8352:	8d 91       	ld	r24, X+
    8354:	9c 91       	ld	r25, X
    8356:	16 c0       	rjmp	.+44     	; 0x8384 <ProcessMixer+0x7dc>
		}
		else if (transition >= 100)
    8358:	04 36       	cpi	r16, 0x64	; 100
    835a:	11 05       	cpc	r17, r1
    835c:	24 f0       	brlt	.+8      	; 0x8366 <ProcessMixer+0x7be>
		{
			temp1 = Config.Channel[i].P2_value;
    835e:	f7 01       	movw	r30, r14
    8360:	82 81       	ldd	r24, Z+2	; 0x02
    8362:	93 81       	ldd	r25, Z+3	; 0x03
    8364:	0f c0       	rjmp	.+30     	; 0x8384 <ProcessMixer+0x7dc>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    8366:	b6 01       	movw	r22, r12
    8368:	d7 01       	movw	r26, r14
    836a:	8d 91       	ld	r24, X+
    836c:	9c 91       	ld	r25, X
    836e:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>
    8372:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    8374:	b8 01       	movw	r22, r16
    8376:	f7 01       	movw	r30, r14
    8378:	82 81       	ldd	r24, Z+2	; 0x02
    837a:	93 81       	ldd	r25, Z+3	; 0x03
    837c:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    8380:	8a 0d       	add	r24, r10
    8382:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    8384:	d7 01       	movw	r26, r14
    8386:	8d 93       	st	X+, r24
    8388:	9c 93       	st	X, r25
    838a:	b6 e2       	ldi	r27, 0x26	; 38
    838c:	eb 0e       	add	r14, r27
    838e:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    8390:	e3 e8       	ldi	r30, 0x83	; 131
    8392:	ee 16       	cp	r14, r30
    8394:	e7 e0       	ldi	r30, 0x07	; 7
    8396:	fe 06       	cpc	r15, r30
    8398:	c1 f6       	brne	.-80     	; 0x834a <ProcessMixer+0x7a2>
    839a:	6d e5       	ldi	r22, 0x5D	; 93
    839c:	c6 2e       	mov	r12, r22
    839e:	66 e0       	ldi	r22, 0x06	; 6
    83a0:	d6 2e       	mov	r13, r22
    83a2:	7e e5       	ldi	r23, 0x5E	; 94
    83a4:	87 2e       	mov	r8, r23
    83a6:	76 e0       	ldi	r23, 0x06	; 6
    83a8:	97 2e       	mov	r9, r23
    83aa:	e3 e5       	ldi	r30, 0x53	; 83
    83ac:	ee 2e       	mov	r14, r30
    83ae:	e6 e0       	ldi	r30, 0x06	; 6
    83b0:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    83b2:	f4 e6       	ldi	r31, 0x64	; 100
    83b4:	af 2e       	mov	r10, r31
    83b6:	b1 2c       	mov	r11, r1
    83b8:	80 2f       	mov	r24, r16
    83ba:	99 27       	eor	r25, r25
    83bc:	87 fd       	sbrc	r24, 7
    83be:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    83c0:	9c 01       	movw	r18, r24
    83c2:	25 5a       	subi	r18, 0xA5	; 165
    83c4:	34 4e       	sbci	r19, 0xE4	; 228
    83c6:	3e 8f       	std	Y+30, r19	; 0x1e
    83c8:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    83ca:	95 01       	movw	r18, r10
    83cc:	28 1b       	sub	r18, r24
    83ce:	39 0b       	sbc	r19, r25
    83d0:	a9 01       	movw	r20, r18
    83d2:	45 5a       	subi	r20, 0xA5	; 165
    83d4:	54 4e       	sbci	r21, 0xE4	; 228
    83d6:	58 a3       	std	Y+32, r21	; 0x20
    83d8:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    83da:	dc 01       	movw	r26, r24
    83dc:	a0 54       	subi	r26, 0x40	; 64
    83de:	b4 4e       	sbci	r27, 0xE4	; 228
    83e0:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    83e2:	f9 01       	movw	r30, r18
    83e4:	e0 54       	subi	r30, 0x40	; 64
    83e6:	f4 4e       	sbci	r31, 0xE4	; 228
    83e8:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    83ea:	ae e1       	ldi	r26, 0x1E	; 30
    83ec:	6a 2e       	mov	r6, r26
    83ee:	ab ef       	ldi	r26, 0xFB	; 251
    83f0:	7a 2e       	mov	r7, r26
    83f2:	f6 01       	movw	r30, r12
    83f4:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    83f6:	90 81       	ld	r25, Z
    83f8:	d6 01       	movw	r26, r12
    83fa:	8c 91       	ld	r24, X
    83fc:	91 11       	cpse	r25, r1
    83fe:	03 c0       	rjmp	.+6      	; 0x8406 <ProcessMixer+0x85e>
    8400:	88 23       	and	r24, r24
    8402:	09 f4       	brne	.+2      	; 0x8406 <ProcessMixer+0x85e>
    8404:	61 c0       	rjmp	.+194    	; 0x84c8 <ProcessMixer+0x920>
    8406:	29 2f       	mov	r18, r25
    8408:	33 27       	eor	r19, r19
    840a:	27 fd       	sbrc	r18, 7
    840c:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    840e:	98 17       	cp	r25, r24
    8410:	09 f4       	brne	.+2      	; 0x8414 <ProcessMixer+0x86c>
    8412:	48 c0       	rjmp	.+144    	; 0x84a4 <ProcessMixer+0x8fc>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    8414:	99 27       	eor	r25, r25
    8416:	87 fd       	sbrc	r24, 7
    8418:	90 95       	com	r25
    841a:	82 1b       	sub	r24, r18
    841c:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    841e:	96 95       	lsr	r25
    8420:	98 2f       	mov	r25, r24
    8422:	88 27       	eor	r24, r24
    8424:	97 95       	ror	r25
    8426:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    8428:	b5 01       	movw	r22, r10
    842a:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    842e:	36 95       	lsr	r19
    8430:	32 2f       	mov	r19, r18
    8432:	22 27       	eor	r18, r18
    8434:	37 95       	ror	r19
    8436:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    8438:	f4 01       	movw	r30, r8
    843a:	80 81       	ld	r24, Z
    843c:	81 11       	cpse	r24, r1
    843e:	08 c0       	rjmp	.+16     	; 0x8450 <ProcessMixer+0x8a8>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    8440:	60 9f       	mul	r22, r16
    8442:	c0 01       	movw	r24, r0
    8444:	61 9f       	mul	r22, r17
    8446:	90 0d       	add	r25, r0
    8448:	70 9f       	mul	r23, r16
    844a:	90 0d       	add	r25, r0
    844c:	11 24       	eor	r1, r1
    844e:	20 c0       	rjmp	.+64     	; 0x8490 <ProcessMixer+0x8e8>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    8450:	81 30       	cpi	r24, 0x01	; 1
    8452:	31 f4       	brne	.+12     	; 0x8460 <ProcessMixer+0x8b8>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    8454:	77 ff       	sbrs	r23, 7
    8456:	02 c0       	rjmp	.+4      	; 0x845c <ProcessMixer+0x8b4>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    8458:	f2 01       	movw	r30, r4
    845a:	06 c0       	rjmp	.+12     	; 0x8468 <ProcessMixer+0x8c0>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    845c:	f1 01       	movw	r30, r2
    845e:	0d c0       	rjmp	.+26     	; 0x847a <ProcessMixer+0x8d2>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    8460:	77 ff       	sbrs	r23, 7
    8462:	09 c0       	rjmp	.+18     	; 0x8476 <ProcessMixer+0x8ce>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    8464:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8466:	f8 a1       	ldd	r31, Y+32	; 0x20
    8468:	84 91       	lpm	r24, Z
    846a:	a5 01       	movw	r20, r10
    846c:	48 1b       	sub	r20, r24
    846e:	51 09       	sbc	r21, r1
    8470:	87 fd       	sbrc	r24, 7
    8472:	53 95       	inc	r21
    8474:	06 c0       	rjmp	.+12     	; 0x8482 <ProcessMixer+0x8da>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    8476:	ed 8d       	ldd	r30, Y+29	; 0x1d
    8478:	fe 8d       	ldd	r31, Y+30	; 0x1e
    847a:	44 91       	lpm	r20, Z
    847c:	55 27       	eor	r21, r21
    847e:	47 fd       	sbrc	r20, 7
    8480:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    8482:	64 9f       	mul	r22, r20
    8484:	c0 01       	movw	r24, r0
    8486:	65 9f       	mul	r22, r21
    8488:	90 0d       	add	r25, r0
    848a:	74 9f       	mul	r23, r20
    848c:	90 0d       	add	r25, r0
    848e:	11 24       	eor	r1, r1
    8490:	82 0f       	add	r24, r18
    8492:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    8494:	bc 01       	movw	r22, r24
    8496:	60 5c       	subi	r22, 0xC0	; 192
    8498:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    849a:	66 0f       	add	r22, r22
    849c:	67 2f       	mov	r22, r23
    849e:	66 1f       	adc	r22, r22
    84a0:	77 0b       	sbc	r23, r23
    84a2:	01 c0       	rjmp	.+2      	; 0x84a6 <ProcessMixer+0x8fe>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    84a4:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    84a6:	80 91 87 08 	lds	r24, 0x0887
    84aa:	90 91 88 08 	lds	r25, 0x0888
    84ae:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    84b2:	88 5e       	subi	r24, 0xE8	; 232
    84b4:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    84b6:	d7 01       	movw	r26, r14
    84b8:	2d 91       	ld	r18, X+
    84ba:	3c 91       	ld	r19, X
    84bc:	11 97       	sbiw	r26, 0x01	; 1
    84be:	28 0f       	add	r18, r24
    84c0:	39 1f       	adc	r19, r25
    84c2:	2d 93       	st	X+, r18
    84c4:	3c 93       	st	X, r19
    84c6:	08 c0       	rjmp	.+16     	; 0x84d8 <ProcessMixer+0x930>
    84c8:	f6 01       	movw	r30, r12
    84ca:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    84cc:	80 81       	ld	r24, Z
    84ce:	82 30       	cpi	r24, 0x02	; 2
    84d0:	19 f4       	brne	.+6      	; 0x84d8 <ProcessMixer+0x930>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    84d2:	f7 01       	movw	r30, r14
    84d4:	71 82       	std	Z+1, r7	; 0x01
    84d6:	60 82       	st	Z, r6
    84d8:	f6 e2       	ldi	r31, 0x26	; 38
    84da:	ef 0e       	add	r14, r31
    84dc:	f1 1c       	adc	r15, r1
    84de:	26 e2       	ldi	r18, 0x26	; 38
    84e0:	c2 0e       	add	r12, r18
    84e2:	d1 1c       	adc	r13, r1
    84e4:	36 e2       	ldi	r19, 0x26	; 38
    84e6:	83 0e       	add	r8, r19
    84e8:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    84ea:	43 e8       	ldi	r20, 0x83	; 131
    84ec:	e4 16       	cp	r14, r20
    84ee:	47 e0       	ldi	r20, 0x07	; 7
    84f0:	f4 06       	cpc	r15, r20
    84f2:	09 f0       	breq	.+2      	; 0x84f6 <ProcessMixer+0x94e>
    84f4:	7e cf       	rjmp	.-260    	; 0x83f2 <ProcessMixer+0x84a>
    84f6:	eb e5       	ldi	r30, 0x5B	; 91
    84f8:	f6 e0       	ldi	r31, 0x06	; 6
    84fa:	23 e5       	ldi	r18, 0x53	; 83
    84fc:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    84fe:	94 e6       	ldi	r25, 0x64	; 100
    8500:	69 2e       	mov	r6, r25
    8502:	71 2c       	mov	r7, r1
    8504:	df 01       	movw	r26, r30
    8506:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    8508:	cc 90       	ld	r12, X
    850a:	12 96       	adiw	r26, 0x02	; 2
    850c:	ac 90       	ld	r10, X
    850e:	50 80       	ld	r5, Z
    8510:	ca 10       	cpse	r12, r10
    8512:	03 c0       	rjmp	.+6      	; 0x851a <ProcessMixer+0x972>
    8514:	5c 14       	cp	r5, r12
    8516:	09 f4       	brne	.+2      	; 0x851a <ProcessMixer+0x972>
    8518:	53 c0       	rjmp	.+166    	; 0x85c0 <ProcessMixer+0xa18>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    851a:	bb 24       	eor	r11, r11
    851c:	a7 fc       	sbrc	r10, 7
    851e:	b0 94       	com	r11
    8520:	dd 24       	eor	r13, r13
    8522:	c7 fc       	sbrc	r12, 7
    8524:	d0 94       	com	r13
    8526:	c5 01       	movw	r24, r10
    8528:	8c 19       	sub	r24, r12
    852a:	9d 09       	sbc	r25, r13
    852c:	df 01       	movw	r26, r30
    852e:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    8530:	ec 90       	ld	r14, X
    8532:	ff 24       	eor	r15, r15
    8534:	e7 fc       	sbrc	r14, 7
    8536:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    8538:	96 95       	lsr	r25
    853a:	98 2f       	mov	r25, r24
    853c:	88 27       	eor	r24, r24
    853e:	97 95       	ror	r25
    8540:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    8542:	a7 01       	movw	r20, r14
    8544:	55 95       	asr	r21
    8546:	47 95       	ror	r20
    8548:	84 0f       	add	r24, r20
    854a:	95 1f       	adc	r25, r21
    854c:	b7 01       	movw	r22, r14
    854e:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <__divmodhi4>
    8552:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    8554:	85 2d       	mov	r24, r5
    8556:	99 27       	eor	r25, r25
    8558:	87 fd       	sbrc	r24, 7
    855a:	90 95       	com	r25
    855c:	8a 19       	sub	r24, r10
    855e:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    8560:	b3 01       	movw	r22, r6
    8562:	6e 19       	sub	r22, r14
    8564:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    8566:	96 95       	lsr	r25
    8568:	98 2f       	mov	r25, r24
    856a:	88 27       	eor	r24, r24
    856c:	97 95       	ror	r25
    856e:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    8570:	ab 01       	movw	r20, r22
    8572:	55 95       	asr	r21
    8574:	47 95       	ror	r20
    8576:	84 0f       	add	r24, r20
    8578:	95 1f       	adc	r25, r21
    857a:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    857e:	d6 94       	lsr	r13
    8580:	dc 2c       	mov	r13, r12
    8582:	cc 24       	eor	r12, r12
    8584:	d7 94       	ror	r13
    8586:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    8588:	40 e0       	ldi	r20, 0x00	; 0
    858a:	84 2f       	mov	r24, r20
    858c:	90 e0       	ldi	r25, 0x00	; 0
    858e:	80 17       	cp	r24, r16
    8590:	91 07       	cpc	r25, r17
    8592:	54 f4       	brge	.+20     	; 0x85a8 <ProcessMixer+0xa00>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    8594:	8e 15       	cp	r24, r14
    8596:	9f 05       	cpc	r25, r15
    8598:	1c f4       	brge	.+6      	; 0x85a0 <ProcessMixer+0x9f8>
				{
					temp3 += Step1;
    859a:	c8 0c       	add	r12, r8
    859c:	d9 1c       	adc	r13, r9
    859e:	02 c0       	rjmp	.+4      	; 0x85a4 <ProcessMixer+0x9fc>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    85a0:	c6 0e       	add	r12, r22
    85a2:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    85a4:	4f 5f       	subi	r20, 0xFF	; 255
    85a6:	f1 cf       	rjmp	.-30     	; 0x858a <ProcessMixer+0x9e2>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    85a8:	c6 01       	movw	r24, r12
    85aa:	80 5c       	subi	r24, 0xC0	; 192
    85ac:	9f 4f       	sbci	r25, 0xFF	; 255
    85ae:	88 0f       	add	r24, r24
    85b0:	89 2f       	mov	r24, r25
    85b2:	88 1f       	adc	r24, r24
    85b4:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    85b6:	5a e0       	ldi	r21, 0x0A	; 10
    85b8:	85 02       	muls	r24, r21
    85ba:	60 01       	movw	r12, r0
    85bc:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    85be:	05 c0       	rjmp	.+10     	; 0x85ca <ProcessMixer+0xa22>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    85c0:	85 2d       	mov	r24, r5
    85c2:	9a e0       	ldi	r25, 0x0A	; 10
    85c4:	89 02       	muls	r24, r25
    85c6:	60 01       	movw	r12, r0
    85c8:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    85ca:	d9 01       	movw	r26, r18
    85cc:	4d 91       	ld	r20, X+
    85ce:	5c 91       	ld	r21, X
    85d0:	11 97       	sbiw	r26, 0x01	; 1
    85d2:	4c 0d       	add	r20, r12
    85d4:	5d 1d       	adc	r21, r13
    85d6:	4d 93       	st	X+, r20
    85d8:	5c 93       	st	X, r21
    85da:	2a 5d       	subi	r18, 0xDA	; 218
    85dc:	3f 4f       	sbci	r19, 0xFF	; 255
    85de:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    85e0:	b7 e0       	ldi	r27, 0x07	; 7
    85e2:	eb 38       	cpi	r30, 0x8B	; 139
    85e4:	fb 07       	cpc	r31, r27
    85e6:	09 f0       	breq	.+2      	; 0x85ea <ProcessMixer+0xa42>
    85e8:	8d cf       	rjmp	.-230    	; 0x8504 <ProcessMixer+0x95c>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    85ea:	e2 96       	adiw	r28, 0x32	; 50
    85ec:	0f b6       	in	r0, 0x3f	; 63
    85ee:	f8 94       	cli
    85f0:	de bf       	out	0x3e, r29	; 62
    85f2:	0f be       	out	0x3f, r0	; 63
    85f4:	cd bf       	out	0x3d, r28	; 61
    85f6:	df 91       	pop	r29
    85f8:	cf 91       	pop	r28
    85fa:	1f 91       	pop	r17
    85fc:	0f 91       	pop	r16
    85fe:	ff 90       	pop	r15
    8600:	ef 90       	pop	r14
    8602:	df 90       	pop	r13
    8604:	cf 90       	pop	r12
    8606:	bf 90       	pop	r11
    8608:	af 90       	pop	r10
    860a:	9f 90       	pop	r9
    860c:	8f 90       	pop	r8
    860e:	7f 90       	pop	r7
    8610:	6f 90       	pop	r6
    8612:	5f 90       	pop	r5
    8614:	4f 90       	pop	r4
    8616:	3f 90       	pop	r3
    8618:	2f 90       	pop	r2
    861a:	08 95       	ret

0000861c <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    861c:	2a e0       	ldi	r18, 0x0A	; 10
    861e:	82 02       	muls	r24, r18
    8620:	c0 01       	movw	r24, r0
    8622:	11 24       	eor	r1, r1

	return temp16_2;
}
    8624:	8a 55       	subi	r24, 0x5A	; 90
    8626:	91 4f       	sbci	r25, 0xF1	; 241
    8628:	08 95       	ret

0000862a <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    862a:	df 92       	push	r13
    862c:	ef 92       	push	r14
    862e:	ff 92       	push	r15
    8630:	0f 93       	push	r16
    8632:	1f 93       	push	r17
    8634:	cf 93       	push	r28
    8636:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    8638:	dc 01       	movw	r26, r24
    863a:	0d 90       	ld	r0, X+
    863c:	00 20       	and	r0, r0
    863e:	e9 f7       	brne	.-6      	; 0x863a <mugui_text_sizestring+0x10>
    8640:	11 97       	sbiw	r26, 0x01	; 1
    8642:	a8 1b       	sub	r26, r24
    8644:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    8646:	fb 01       	movw	r30, r22
    8648:	34 96       	adiw	r30, 0x04	; 4
    864a:	e4 90       	lpm	r14, Z
    864c:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    864e:	32 97       	sbiw	r30, 0x02	; 2
    8650:	d4 90       	lpm	r13, Z
    8652:	ec 01       	movw	r28, r24
    8654:	a8 0f       	add	r26, r24
    8656:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    8658:	80 e0       	ldi	r24, 0x00	; 0
    865a:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    865c:	ca 17       	cp	r28, r26
    865e:	db 07       	cpc	r29, r27
    8660:	29 f1       	breq	.+74     	; 0x86ac <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    8662:	29 91       	ld	r18, Y+
    8664:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    8666:	30 e0       	ldi	r19, 0x00	; 0
    8668:	22 0f       	add	r18, r18
    866a:	33 1f       	adc	r19, r19
    866c:	f9 01       	movw	r30, r18
    866e:	35 96       	adiw	r30, 0x05	; 5
    8670:	e6 0f       	add	r30, r22
    8672:	f7 1f       	adc	r31, r23
    8674:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    8676:	f9 01       	movw	r30, r18
    8678:	36 96       	adiw	r30, 0x06	; 6
    867a:	e6 0f       	add	r30, r22
    867c:	f7 1f       	adc	r31, r23
    867e:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    8680:	10 e0       	ldi	r17, 0x00	; 0
    8682:	20 e0       	ldi	r18, 0x00	; 0
    8684:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    8686:	32 2f       	mov	r19, r18
    8688:	21 2f       	mov	r18, r17
    868a:	10 2f       	mov	r17, r16
    868c:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    868e:	0e 0f       	add	r16, r30
    8690:	11 1d       	adc	r17, r1
    8692:	21 1d       	adc	r18, r1
    8694:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    8696:	fb 01       	movw	r30, r22
    8698:	e0 0f       	add	r30, r16
    869a:	f1 1f       	adc	r31, r17
    869c:	04 91       	lpm	r16, Z
    869e:	20 2f       	mov	r18, r16
    86a0:	30 e0       	ldi	r19, 0x00	; 0
    86a2:	2f 5f       	subi	r18, 0xFF	; 255
    86a4:	3f 4f       	sbci	r19, 0xFF	; 255
    86a6:	82 0f       	add	r24, r18
    86a8:	93 1f       	adc	r25, r19
    86aa:	d8 cf       	rjmp	.-80     	; 0x865c <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    86ac:	fa 01       	movw	r30, r20
    86ae:	91 83       	std	Z+1, r25	; 0x01
    86b0:	80 83       	st	Z, r24
	size->y = height;
    86b2:	f3 82       	std	Z+3, r15	; 0x03
    86b4:	e2 82       	std	Z+2, r14	; 0x02
}
    86b6:	df 91       	pop	r29
    86b8:	cf 91       	pop	r28
    86ba:	1f 91       	pop	r17
    86bc:	0f 91       	pop	r16
    86be:	ff 90       	pop	r15
    86c0:	ef 90       	pop	r14
    86c2:	df 90       	pop	r13
    86c4:	08 95       	ret

000086c6 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    86c6:	aa e6       	ldi	r26, 0x6A	; 106
    86c8:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    86ca:	20 e0       	ldi	r18, 0x00	; 0
    86cc:	30 e0       	ldi	r19, 0x00	; 0
    86ce:	fc 01       	movw	r30, r24
    86d0:	e2 0f       	add	r30, r18
    86d2:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    86d4:	44 91       	lpm	r20, Z
    86d6:	44 23       	and	r20, r20
    86d8:	41 f0       	breq	.+16     	; 0x86ea <pgm_mugui_scopy+0x24>
    86da:	28 31       	cpi	r18, 0x18	; 24
    86dc:	31 05       	cpc	r19, r1
    86de:	29 f0       	breq	.+10     	; 0x86ea <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    86e0:	e4 91       	lpm	r30, Z
    86e2:	ed 93       	st	X+, r30
		i++;
    86e4:	2f 5f       	subi	r18, 0xFF	; 255
    86e6:	3f 4f       	sbci	r19, 0xFF	; 255
    86e8:	f2 cf       	rjmp	.-28     	; 0x86ce <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    86ea:	f9 01       	movw	r30, r18
    86ec:	e6 59       	subi	r30, 0x96	; 150
    86ee:	fa 4f       	sbci	r31, 0xFA	; 250
    86f0:	10 82       	st	Z, r1
    86f2:	08 95       	ret

000086f4 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    86f4:	2f 92       	push	r2
    86f6:	3f 92       	push	r3
    86f8:	4f 92       	push	r4
    86fa:	5f 92       	push	r5
    86fc:	6f 92       	push	r6
    86fe:	7f 92       	push	r7
    8700:	8f 92       	push	r8
    8702:	9f 92       	push	r9
    8704:	af 92       	push	r10
    8706:	bf 92       	push	r11
    8708:	cf 92       	push	r12
    870a:	df 92       	push	r13
    870c:	ef 92       	push	r14
    870e:	ff 92       	push	r15
    8710:	0f 93       	push	r16
    8712:	1f 93       	push	r17
    8714:	cf 93       	push	r28
    8716:	df 93       	push	r29
    8718:	cd b7       	in	r28, 0x3d	; 61
    871a:	de b7       	in	r29, 0x3e	; 62
    871c:	29 97       	sbiw	r28, 0x09	; 9
    871e:	0f b6       	in	r0, 0x3f	; 63
    8720:	f8 94       	cli
    8722:	de bf       	out	0x3e, r29	; 62
    8724:	0f be       	out	0x3f, r0	; 63
    8726:	cd bf       	out	0x3d, r28	; 61
    8728:	4c 83       	std	Y+4, r20	; 0x04
    872a:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    872c:	fb 01       	movw	r30, r22
    872e:	32 96       	adiw	r30, 0x02	; 2
    8730:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    8732:	32 96       	adiw	r30, 0x02	; 2
    8734:	e4 91       	lpm	r30, Z
    8736:	2e 2e       	mov	r2, r30
    8738:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    873a:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    873c:	90 e0       	ldi	r25, 0x00	; 0
    873e:	88 0f       	add	r24, r24
    8740:	99 1f       	adc	r25, r25
    8742:	fc 01       	movw	r30, r24
    8744:	35 96       	adiw	r30, 0x05	; 5
    8746:	e6 0f       	add	r30, r22
    8748:	f7 1f       	adc	r31, r23
    874a:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    874c:	fc 01       	movw	r30, r24
    874e:	36 96       	adiw	r30, 0x06	; 6
    8750:	e6 0f       	add	r30, r22
    8752:	f7 1f       	adc	r31, r23
    8754:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    8756:	06 2d       	mov	r16, r6
    8758:	10 e0       	ldi	r17, 0x00	; 0
    875a:	20 e0       	ldi	r18, 0x00	; 0
    875c:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    875e:	32 2f       	mov	r19, r18
    8760:	21 2f       	mov	r18, r17
    8762:	10 2f       	mov	r17, r16
    8764:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    8766:	08 0f       	add	r16, r24
    8768:	11 1d       	adc	r17, r1
    876a:	21 1d       	adc	r18, r1
    876c:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    876e:	c8 01       	movw	r24, r16
    8770:	fb 01       	movw	r30, r22
    8772:	e0 0f       	add	r30, r16
    8774:	f1 1f       	adc	r31, r17
    8776:	64 90       	lpm	r6, Z
    8778:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    877a:	21 01       	movw	r4, r2
    877c:	21 e0       	ldi	r18, 0x01	; 1
    877e:	42 1a       	sub	r4, r18
    8780:	51 08       	sbc	r5, r1
    8782:	13 e0       	ldi	r17, 0x03	; 3
    8784:	56 94       	lsr	r5
    8786:	47 94       	ror	r4
    8788:	1a 95       	dec	r17
    878a:	e1 f7       	brne	.-8      	; 0x8784 <mugui_lcd_putc+0x90>
    878c:	43 94       	inc	r4
    878e:	a4 2d       	mov	r26, r4
    8790:	b0 e0       	ldi	r27, 0x00	; 0
    8792:	ba 83       	std	Y+2, r27	; 0x02
    8794:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    8796:	a1 2c       	mov	r10, r1
    8798:	b1 2c       	mov	r11, r1
    879a:	00 e0       	ldi	r16, 0x00	; 0
    879c:	10 e0       	ldi	r17, 0x00	; 0
    879e:	4b 01       	movw	r8, r22
    87a0:	bf ef       	ldi	r27, 0xFF	; 255
    87a2:	8b 1a       	sub	r8, r27
    87a4:	9b 0a       	sbc	r9, r27
    87a6:	88 0e       	add	r8, r24
    87a8:	99 1e       	adc	r9, r25
    87aa:	06 15       	cp	r16, r6
    87ac:	17 05       	cpc	r17, r7
    87ae:	08 f0       	brcs	.+2      	; 0x87b2 <mugui_lcd_putc+0xbe>
    87b0:	43 c0       	rjmp	.+134    	; 0x8838 <mugui_lcd_putc+0x144>
    87b2:	c1 2c       	mov	r12, r1
    87b4:	d1 2c       	mov	r13, r1
    87b6:	e1 2c       	mov	r14, r1
    87b8:	f1 2c       	mov	r15, r1
    87ba:	94 01       	movw	r18, r8
    87bc:	2a 0d       	add	r18, r10
    87be:	3b 1d       	adc	r19, r11
    87c0:	3f 83       	std	Y+7, r19	; 0x07
    87c2:	2e 83       	std	Y+6, r18	; 0x06
    87c4:	5c 80       	ldd	r5, Y+4	; 0x04
    87c6:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    87c8:	c4 14       	cp	r12, r4
    87ca:	78 f5       	brcc	.+94     	; 0x882a <mugui_lcd_putc+0x136>
    87cc:	ee 81       	ldd	r30, Y+6	; 0x06
    87ce:	ff 81       	ldd	r31, Y+7	; 0x07
    87d0:	ec 0d       	add	r30, r12
    87d2:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    87d4:	34 91       	lpm	r19, Z
    87d6:	3b 83       	std	Y+3, r19	; 0x03
    87d8:	19 86       	std	Y+9, r1	; 0x09
    87da:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    87dc:	e2 14       	cp	r14, r2
    87de:	f3 04       	cpc	r15, r3
    87e0:	00 f5       	brcc	.+64     	; 0x8822 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    87e2:	81 e0       	ldi	r24, 0x01	; 1
    87e4:	90 e0       	ldi	r25, 0x00	; 0
    87e6:	08 84       	ldd	r0, Y+8	; 0x08
    87e8:	02 c0       	rjmp	.+4      	; 0x87ee <mugui_lcd_putc+0xfa>
    87ea:	88 0f       	add	r24, r24
    87ec:	99 1f       	adc	r25, r25
    87ee:	0a 94       	dec	r0
    87f0:	e2 f7       	brpl	.-8      	; 0x87ea <mugui_lcd_putc+0xf6>
					bit = data & mask;
    87f2:	3b 81       	ldd	r19, Y+3	; 0x03
    87f4:	83 23       	and	r24, r19
    87f6:	4d 81       	ldd	r20, Y+5	; 0x05
    87f8:	4e 0d       	add	r20, r14
					if(bit)
    87fa:	88 23       	and	r24, r24
    87fc:	11 f0       	breq	.+4      	; 0x8802 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    87fe:	21 e0       	ldi	r18, 0x01	; 1
    8800:	01 c0       	rjmp	.+2      	; 0x8804 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    8802:	20 e0       	ldi	r18, 0x00	; 0
    8804:	65 2d       	mov	r22, r5
    8806:	80 e0       	ldi	r24, 0x00	; 0
    8808:	91 e0       	ldi	r25, 0x01	; 1
    880a:	0e 94 d6 24 	call	0x49ac	; 0x49ac <setpixel>
					}
					ty++;
    880e:	8f ef       	ldi	r24, 0xFF	; 255
    8810:	e8 1a       	sub	r14, r24
    8812:	f8 0a       	sbc	r15, r24
    8814:	a8 85       	ldd	r26, Y+8	; 0x08
    8816:	b9 85       	ldd	r27, Y+9	; 0x09
    8818:	11 96       	adiw	r26, 0x01	; 1
    881a:	b9 87       	std	Y+9, r27	; 0x09
    881c:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    881e:	18 97       	sbiw	r26, 0x08	; 8
    8820:	e9 f6       	brne	.-70     	; 0x87dc <mugui_lcd_putc+0xe8>
    8822:	bf ef       	ldi	r27, 0xFF	; 255
    8824:	cb 1a       	sub	r12, r27
    8826:	db 0a       	sbc	r13, r27
    8828:	cf cf       	rjmp	.-98     	; 0x87c8 <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    882a:	0f 5f       	subi	r16, 0xFF	; 255
    882c:	1f 4f       	sbci	r17, 0xFF	; 255
    882e:	e9 81       	ldd	r30, Y+1	; 0x01
    8830:	fa 81       	ldd	r31, Y+2	; 0x02
    8832:	ae 0e       	add	r10, r30
    8834:	bf 1e       	adc	r11, r31
    8836:	b9 cf       	rjmp	.-142    	; 0x87aa <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    8838:	c3 01       	movw	r24, r6
    883a:	29 96       	adiw	r28, 0x09	; 9
    883c:	0f b6       	in	r0, 0x3f	; 63
    883e:	f8 94       	cli
    8840:	de bf       	out	0x3e, r29	; 62
    8842:	0f be       	out	0x3f, r0	; 63
    8844:	cd bf       	out	0x3d, r28	; 61
    8846:	df 91       	pop	r29
    8848:	cf 91       	pop	r28
    884a:	1f 91       	pop	r17
    884c:	0f 91       	pop	r16
    884e:	ff 90       	pop	r15
    8850:	ef 90       	pop	r14
    8852:	df 90       	pop	r13
    8854:	cf 90       	pop	r12
    8856:	bf 90       	pop	r11
    8858:	af 90       	pop	r10
    885a:	9f 90       	pop	r9
    885c:	8f 90       	pop	r8
    885e:	7f 90       	pop	r7
    8860:	6f 90       	pop	r6
    8862:	5f 90       	pop	r5
    8864:	4f 90       	pop	r4
    8866:	3f 90       	pop	r3
    8868:	2f 90       	pop	r2
    886a:	08 95       	ret

0000886c <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    886c:	af 92       	push	r10
    886e:	bf 92       	push	r11
    8870:	cf 92       	push	r12
    8872:	df 92       	push	r13
    8874:	ef 92       	push	r14
    8876:	ff 92       	push	r15
    8878:	0f 93       	push	r16
    887a:	1f 93       	push	r17
    887c:	cf 93       	push	r28
    887e:	df 93       	push	r29
    8880:	ec 01       	movw	r28, r24
    8882:	7b 01       	movw	r14, r22
    8884:	6a 01       	movw	r12, r20
    8886:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    8888:	00 e0       	ldi	r16, 0x00	; 0
    888a:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    888c:	ce 01       	movw	r24, r28
    888e:	fe 01       	movw	r30, r28
    8890:	24 91       	lpm	r18, Z
    8892:	22 23       	and	r18, r18
    8894:	71 f0       	breq	.+28     	; 0x88b2 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    8896:	21 96       	adiw	r28, 0x01	; 1
    8898:	fc 01       	movw	r30, r24
    889a:	84 91       	lpm	r24, Z
    889c:	a8 01       	movw	r20, r16
    889e:	4c 0d       	add	r20, r12
    88a0:	5d 1d       	adc	r21, r13
    88a2:	95 01       	movw	r18, r10
    88a4:	b7 01       	movw	r22, r14
    88a6:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <mugui_lcd_putc>
    88aa:	01 96       	adiw	r24, 0x01	; 1
    88ac:	08 0f       	add	r16, r24
    88ae:	19 1f       	adc	r17, r25
    88b0:	ed cf       	rjmp	.-38     	; 0x888c <pgm_mugui_lcd_puts+0x20>
	}
}
    88b2:	df 91       	pop	r29
    88b4:	cf 91       	pop	r28
    88b6:	1f 91       	pop	r17
    88b8:	0f 91       	pop	r16
    88ba:	ff 90       	pop	r15
    88bc:	ef 90       	pop	r14
    88be:	df 90       	pop	r13
    88c0:	cf 90       	pop	r12
    88c2:	bf 90       	pop	r11
    88c4:	af 90       	pop	r10
    88c6:	08 95       	ret

000088c8 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    88c8:	8f 92       	push	r8
    88ca:	9f 92       	push	r9
    88cc:	af 92       	push	r10
    88ce:	bf 92       	push	r11
    88d0:	cf 92       	push	r12
    88d2:	df 92       	push	r13
    88d4:	ef 92       	push	r14
    88d6:	ff 92       	push	r15
    88d8:	0f 93       	push	r16
    88da:	1f 93       	push	r17
    88dc:	cf 93       	push	r28
    88de:	df 93       	push	r29
    88e0:	6b 01       	movw	r12, r22
    88e2:	5a 01       	movw	r10, r20
    88e4:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    88e6:	ec 01       	movw	r28, r24
    88e8:	09 90       	ld	r0, Y+
    88ea:	00 20       	and	r0, r0
    88ec:	e9 f7       	brne	.-6      	; 0x88e8 <mugui_lcd_puts+0x20>
    88ee:	8c 01       	movw	r16, r24
    88f0:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    88f2:	e1 2c       	mov	r14, r1
    88f4:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    88f6:	0c 17       	cp	r16, r28
    88f8:	1d 07       	cpc	r17, r29
    88fa:	71 f0       	breq	.+28     	; 0x8918 <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    88fc:	a7 01       	movw	r20, r14
    88fe:	4a 0d       	add	r20, r10
    8900:	5b 1d       	adc	r21, r11
    8902:	94 01       	movw	r18, r8
    8904:	b6 01       	movw	r22, r12
    8906:	f8 01       	movw	r30, r16
    8908:	81 91       	ld	r24, Z+
    890a:	8f 01       	movw	r16, r30
    890c:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <mugui_lcd_putc>
    8910:	01 96       	adiw	r24, 0x01	; 1
    8912:	e8 0e       	add	r14, r24
    8914:	f9 1e       	adc	r15, r25
    8916:	ef cf       	rjmp	.-34     	; 0x88f6 <mugui_lcd_puts+0x2e>
	}
}
    8918:	df 91       	pop	r29
    891a:	cf 91       	pop	r28
    891c:	1f 91       	pop	r17
    891e:	0f 91       	pop	r16
    8920:	ff 90       	pop	r15
    8922:	ef 90       	pop	r14
    8924:	df 90       	pop	r13
    8926:	cf 90       	pop	r12
    8928:	bf 90       	pop	r11
    892a:	af 90       	pop	r10
    892c:	9f 90       	pop	r9
    892e:	8f 90       	pop	r8
    8930:	08 95       	ret

00008932 <Sensor_PID>:

int16_t OldgyroADC[NUMBEROFAXIS];					// Holds previous Gyro values
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    8932:	2f 92       	push	r2
    8934:	3f 92       	push	r3
    8936:	4f 92       	push	r4
    8938:	5f 92       	push	r5
    893a:	6f 92       	push	r6
    893c:	7f 92       	push	r7
    893e:	8f 92       	push	r8
    8940:	9f 92       	push	r9
    8942:	af 92       	push	r10
    8944:	bf 92       	push	r11
    8946:	cf 92       	push	r12
    8948:	df 92       	push	r13
    894a:	ef 92       	push	r14
    894c:	ff 92       	push	r15
    894e:	0f 93       	push	r16
    8950:	1f 93       	push	r17
    8952:	cf 93       	push	r28
    8954:	df 93       	push	r29
    8956:	cd b7       	in	r28, 0x3d	; 61
    8958:	de b7       	in	r29, 0x3e	; 62
    895a:	ab 97       	sbiw	r28, 0x2b	; 43
    895c:	0f b6       	in	r0, 0x3f	; 63
    895e:	f8 94       	cli
    8960:	de bf       	out	0x3e, r29	; 62
    8962:	0f be       	out	0x3f, r0	; 63
    8964:	cd bf       	out	0x3d, r28	; 61
    8966:	68 a7       	std	Y+40, r22	; 0x28
    8968:	79 a7       	std	Y+41, r23	; 0x29
    896a:	8a a7       	std	Y+42, r24	; 0x2a
    896c:	9b a7       	std	Y+43, r25	; 0x2b
	float tempf1 = 0;
    896e:	1d 86       	std	Y+13, r1	; 0x0d
    8970:	1e 86       	std	Y+14, r1	; 0x0e
    8972:	1f 86       	std	Y+15, r1	; 0x0f
    8974:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    8976:	80 91 8b 08 	lds	r24, 0x088B
    897a:	90 91 8c 08 	lds	r25, 0x088C
    897e:	91 95       	neg	r25
    8980:	81 95       	neg	r24
    8982:	91 09       	sbc	r25, r1
    8984:	98 87       	std	Y+8, r25	; 0x08
    8986:	8f 83       	std	Y+7, r24	; 0x07
    8988:	80 91 8d 08 	lds	r24, 0x088D
    898c:	90 91 8e 08 	lds	r25, 0x088E
    8990:	9a 87       	std	Y+10, r25	; 0x0a
    8992:	89 87       	std	Y+9, r24	; 0x09
    8994:	80 91 8f 08 	lds	r24, 0x088F
    8998:	90 91 90 08 	lds	r25, 0x0890
    899c:	9c 87       	std	Y+12, r25	; 0x0c
    899e:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    89a0:	80 91 f6 05 	lds	r24, 0x05F6
    89a4:	89 83       	std	Y+1, r24	; 0x01
    89a6:	80 91 fc 05 	lds	r24, 0x05FC
    89aa:	8a 83       	std	Y+2, r24	; 0x02
    89ac:	80 91 02 06 	lds	r24, 0x0602
    89b0:	8b 83       	std	Y+3, r24	; 0x03
    89b2:	80 91 08 06 	lds	r24, 0x0608
    89b6:	8c 83       	std	Y+4, r24	; 0x04
    89b8:	80 91 0e 06 	lds	r24, 0x060E
    89bc:	8d 83       	std	Y+5, r24	; 0x05
    89be:	80 91 14 06 	lds	r24, 0x0614
    89c2:	8e 83       	std	Y+6, r24	; 0x06
    89c4:	9e 01       	movw	r18, r28
    89c6:	29 5f       	subi	r18, 0xF9	; 249
    89c8:	3f 4f       	sbci	r19, 0xFF	; 255
    89ca:	3b a3       	std	Y+35, r19	; 0x23
    89cc:	2a a3       	std	Y+34, r18	; 0x22
    89ce:	ae 01       	movw	r20, r28
    89d0:	4f 5f       	subi	r20, 0xFF	; 255
    89d2:	5f 4f       	sbci	r21, 0xFF	; 255
    89d4:	59 a3       	std	Y+33, r21	; 0x21
    89d6:	48 a3       	std	Y+32, r20	; 0x20
    89d8:	ce 01       	movw	r24, r28
    89da:	04 96       	adiw	r24, 0x04	; 4
    89dc:	9f 8f       	std	Y+31, r25	; 0x1f
    89de:	8e 8f       	std	Y+30, r24	; 0x1e
    89e0:	ef e6       	ldi	r30, 0x6F	; 111
    89e2:	f8 e0       	ldi	r31, 0x08	; 8
    89e4:	fd 8b       	std	Y+21, r31	; 0x15
    89e6:	ec 8b       	std	Y+20, r30	; 0x14
    89e8:	25 e1       	ldi	r18, 0x15	; 21
    89ea:	38 e0       	ldi	r19, 0x08	; 8
    89ec:	3f 8b       	std	Y+23, r19	; 0x17
    89ee:	2e 8b       	std	Y+22, r18	; 0x16
    89f0:	4d e5       	ldi	r20, 0x5D	; 93
    89f2:	58 e0       	ldi	r21, 0x08	; 8
    89f4:	59 8f       	std	Y+25, r21	; 0x19
    89f6:	48 8f       	std	Y+24, r20	; 0x18
    89f8:	01 e2       	ldi	r16, 0x21	; 33
    89fa:	18 e0       	ldi	r17, 0x08	; 8
    89fc:	8b e3       	ldi	r24, 0x3B	; 59
    89fe:	96 e0       	ldi	r25, 0x06	; 6
    8a00:	9f a3       	std	Y+39, r25	; 0x27
    8a02:	8e a3       	std	Y+38, r24	; 0x26
    8a04:	45 e4       	ldi	r20, 0x45	; 69
    8a06:	24 2e       	mov	r2, r20
    8a08:	48 e0       	ldi	r20, 0x08	; 8
    8a0a:	34 2e       	mov	r3, r20
    8a0c:	e3 e8       	ldi	r30, 0x83	; 131
    8a0e:	f5 e0       	ldi	r31, 0x05	; 5
    8a10:	fa 8b       	std	Y+18, r31	; 0x12
    8a12:	e9 8b       	std	Y+17, r30	; 0x11
    8a14:	2f e2       	ldi	r18, 0x2F	; 47
    8a16:	36 e0       	ldi	r19, 0x06	; 6
    8a18:	3d a3       	std	Y+37, r19	; 0x25
    8a1a:	2c a3       	std	Y+36, r18	; 0x24
	{
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	for (axis = 0; axis <= YAW; axis ++)
    8a1c:	1b 8a       	std	Y+19, r1	; 0x13
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    8a1e:	ea a1       	ldd	r30, Y+34	; 0x22
    8a20:	fb a1       	ldd	r31, Y+35	; 0x23
    8a22:	81 91       	ld	r24, Z+
    8a24:	91 91       	ld	r25, Z+
    8a26:	fb a3       	std	Y+35, r31	; 0x23
    8a28:	ea a3       	std	Y+34, r30	; 0x22
    8a2a:	e8 a1       	ldd	r30, Y+32	; 0x20
    8a2c:	f9 a1       	ldd	r31, Y+33	; 0x21
    8a2e:	21 91       	ld	r18, Z+
    8a30:	f9 a3       	std	Y+33, r31	; 0x21
    8a32:	e8 a3       	std	Y+32, r30	; 0x20
    8a34:	36 e0       	ldi	r19, 0x06	; 6
    8a36:	63 2e       	mov	r6, r19
    8a38:	71 2c       	mov	r7, r1
    8a3a:	62 1a       	sub	r6, r18
    8a3c:	71 08       	sbc	r7, r1
    8a3e:	27 fd       	sbrc	r18, 7
    8a40:	73 94       	inc	r7
    8a42:	9c 01       	movw	r18, r24
    8a44:	02 c0       	rjmp	.+4      	; 0x8a4a <Sensor_PID+0x118>
    8a46:	35 95       	asr	r19
    8a48:	27 95       	ror	r18
    8a4a:	6a 94       	dec	r6
    8a4c:	e2 f7       	brpl	.-8      	; 0x8a46 <Sensor_PID+0x114>
    8a4e:	39 01       	movw	r6, r18
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    8a50:	ee 8d       	ldd	r30, Y+30	; 0x1e
    8a52:	ff 8d       	ldd	r31, Y+31	; 0x1f
    8a54:	21 91       	ld	r18, Z+
    8a56:	ff 8f       	std	Y+31, r31	; 0x1f
    8a58:	ee 8f       	std	Y+30, r30	; 0x1e
    8a5a:	46 e0       	ldi	r20, 0x06	; 6
    8a5c:	50 e0       	ldi	r21, 0x00	; 0
    8a5e:	42 1b       	sub	r20, r18
    8a60:	51 09       	sbc	r21, r1
    8a62:	27 fd       	sbrc	r18, 7
    8a64:	53 95       	inc	r21
    8a66:	fc 01       	movw	r30, r24
    8a68:	04 2e       	mov	r0, r20
    8a6a:	02 c0       	rjmp	.+4      	; 0x8a70 <Sensor_PID+0x13e>
    8a6c:	f5 95       	asr	r31
    8a6e:	e7 95       	ror	r30
    8a70:	0a 94       	dec	r0
    8a72:	e2 f7       	brpl	.-8      	; 0x8a6c <Sensor_PID+0x13a>
    8a74:	fb 8f       	std	Y+27, r31	; 0x1b
    8a76:	ea 8f       	std	Y+26, r30	; 0x1a
		// Gyro LPF
		//************************************************************	

		// Lookup LPF value
		// Note: Two sets of values for normal and high-speed mode
		if (Config.Servo_rate != FAST)
    8a78:	80 91 eb 05 	lds	r24, 0x05EB
    8a7c:	60 91 50 06 	lds	r22, 0x0650
    8a80:	82 30       	cpi	r24, 0x02	; 2
    8a82:	39 f0       	breq	.+14     	; 0x8a92 <Sensor_PID+0x160>
		{
			memcpy_P(&tempf1, &LPF_lookup[Config.Gyro_LPF], sizeof(float));
    8a84:	f4 e0       	ldi	r31, 0x04	; 4
    8a86:	6f 02       	muls	r22, r31
    8a88:	b0 01       	movw	r22, r0
    8a8a:	11 24       	eor	r1, r1
    8a8c:	60 50       	subi	r22, 0x00	; 0
    8a8e:	77 4e       	sbci	r23, 0xE7	; 231
    8a90:	06 c0       	rjmp	.+12     	; 0x8a9e <Sensor_PID+0x16c>
		}
		else
		{
			memcpy_P(&tempf1, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float));
    8a92:	24 e0       	ldi	r18, 0x04	; 4
    8a94:	62 02       	muls	r22, r18
    8a96:	b0 01       	movw	r22, r0
    8a98:	11 24       	eor	r1, r1
    8a9a:	60 52       	subi	r22, 0x20	; 32
    8a9c:	77 4e       	sbci	r23, 0xE7	; 231
    8a9e:	44 e0       	ldi	r20, 0x04	; 4
    8aa0:	50 e0       	ldi	r21, 0x00	; 0
    8aa2:	ce 01       	movw	r24, r28
    8aa4:	0d 96       	adiw	r24, 0x0d	; 13
    8aa6:	0e 94 af 4f 	call	0x9f5e	; 0x9f5e <memcpy_P>
		}		
			
		gyroADCf = gyroADC[axis]; // Promote gyro signal to suit
    8aaa:	e9 89       	ldd	r30, Y+17	; 0x11
    8aac:	fa 89       	ldd	r31, Y+18	; 0x12
    8aae:	60 81       	ld	r22, Z
    8ab0:	71 81       	ldd	r23, Z+1	; 0x01
    8ab2:	88 27       	eor	r24, r24
    8ab4:	77 fd       	sbrc	r23, 7
    8ab6:	80 95       	com	r24
    8ab8:	98 2f       	mov	r25, r24
    8aba:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    8abe:	6b 01       	movw	r12, r22
    8ac0:	7c 01       	movw	r14, r24

		if (Config.Gyro_LPF != NOFILTER)
    8ac2:	80 91 50 06 	lds	r24, 0x0650
    8ac6:	87 30       	cpi	r24, 0x07	; 7
    8ac8:	09 f1       	breq	.+66     	; 0x8b0c <Sensor_PID+0x1da>
		{
			// Gyro LPF
			gyroSmooth[axis] = ((gyroSmooth[axis] * (tempf1 - 1.0f)) + gyroADCf) / tempf1;
    8aca:	8d 84       	ldd	r8, Y+13	; 0x0d
    8acc:	9e 84       	ldd	r9, Y+14	; 0x0e
    8ace:	af 84       	ldd	r10, Y+15	; 0x0f
    8ad0:	b8 88       	ldd	r11, Y+16	; 0x10
    8ad2:	20 e0       	ldi	r18, 0x00	; 0
    8ad4:	30 e0       	ldi	r19, 0x00	; 0
    8ad6:	40 e8       	ldi	r20, 0x80	; 128
    8ad8:	5f e3       	ldi	r21, 0x3F	; 63
    8ada:	c5 01       	movw	r24, r10
    8adc:	b4 01       	movw	r22, r8
    8ade:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <__subsf3>
    8ae2:	f1 01       	movw	r30, r2
    8ae4:	20 81       	ld	r18, Z
    8ae6:	31 81       	ldd	r19, Z+1	; 0x01
    8ae8:	42 81       	ldd	r20, Z+2	; 0x02
    8aea:	53 81       	ldd	r21, Z+3	; 0x03
    8aec:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
    8af0:	a7 01       	movw	r20, r14
    8af2:	96 01       	movw	r18, r12
    8af4:	0e 94 f5 4c 	call	0x99ea	; 0x99ea <__addsf3>
    8af8:	a5 01       	movw	r20, r10
    8afa:	94 01       	movw	r18, r8
    8afc:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <__divsf3>
    8b00:	f1 01       	movw	r30, r2
    8b02:	60 83       	st	Z, r22
    8b04:	71 83       	std	Z+1, r23	; 0x01
    8b06:	82 83       	std	Z+2, r24	; 0x02
    8b08:	93 83       	std	Z+3, r25	; 0x03
    8b0a:	05 c0       	rjmp	.+10     	; 0x8b16 <Sensor_PID+0x1e4>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values when filter off
			gyroSmooth[axis] = gyroADCf;
    8b0c:	f1 01       	movw	r30, r2
    8b0e:	c0 82       	st	Z, r12
    8b10:	d1 82       	std	Z+1, r13	; 0x01
    8b12:	e2 82       	std	Z+2, r14	; 0x02
    8b14:	f3 82       	std	Z+3, r15	; 0x03
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];	
    8b16:	f1 01       	movw	r30, r2
    8b18:	60 81       	ld	r22, Z
    8b1a:	71 81       	ldd	r23, Z+1	; 0x01
    8b1c:	82 81       	ldd	r24, Z+2	; 0x02
    8b1e:	93 81       	ldd	r25, Z+3	; 0x03
    8b20:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
    8b24:	4b 01       	movw	r8, r22
    8b26:	5c 01       	movw	r10, r24
    8b28:	e9 89       	ldd	r30, Y+17	; 0x11
    8b2a:	fa 89       	ldd	r31, Y+18	; 0x12
    8b2c:	71 83       	std	Z+1, r23	; 0x01
    8b2e:	60 83       	st	Z, r22
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
    8b30:	68 a5       	ldd	r22, Y+40	; 0x28
    8b32:	79 a5       	ldd	r23, Y+41	; 0x29
    8b34:	8a a5       	ldd	r24, Y+42	; 0x2a
    8b36:	9b a5       	ldd	r25, Y+43	; 0x2b
    8b38:	0e 94 f6 4d 	call	0x9bec	; 0x9bec <__floatunsisf>
    8b3c:	20 e0       	ldi	r18, 0x00	; 0
    8b3e:	30 e3       	ldi	r19, 0x30	; 48
    8b40:	4f e5       	ldi	r20, 0x5F	; 95
    8b42:	55 e4       	ldi	r21, 0x45	; 69
    8b44:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <__divsf3>
    8b48:	6b 01       	movw	r12, r22
    8b4a:	7c 01       	movw	r14, r24
		//************************************************************
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
    8b4c:	b3 01       	movw	r22, r6
    8b4e:	68 0d       	add	r22, r8
    8b50:	79 1d       	adc	r23, r9
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    8b52:	88 27       	eor	r24, r24
    8b54:	77 fd       	sbrc	r23, 7
    8b56:	80 95       	com	r24
    8b58:	98 2f       	mov	r25, r24
    8b5a:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    8b5e:	2b 01       	movw	r4, r22
    8b60:	3c 01       	movw	r6, r24
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
    8b62:	6a 8d       	ldd	r22, Y+26	; 0x1a
    8b64:	7b 8d       	ldd	r23, Y+27	; 0x1b
    8b66:	68 0d       	add	r22, r8
    8b68:	79 1d       	adc	r23, r9
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
    8b6a:	88 27       	eor	r24, r24
    8b6c:	77 fd       	sbrc	r23, 7
    8b6e:	80 95       	com	r24
    8b70:	98 2f       	mov	r25, r24
    8b72:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <__floatsisf>
    8b76:	6a 8f       	std	Y+26, r22	; 0x1a
    8b78:	7b 8f       	std	Y+27, r23	; 0x1b
    8b7a:	8c 8f       	std	Y+28, r24	; 0x1c
    8b7c:	9d 8f       	std	Y+29, r25	; 0x1d
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
    8b7e:	a7 01       	movw	r20, r14
    8b80:	96 01       	movw	r18, r12
    8b82:	c3 01       	movw	r24, r6
    8b84:	b2 01       	movw	r22, r4
    8b86:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    8b8a:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
		tempf2 = tempf2 * factor;
		P2_temp = (int32_t)tempf2;
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
    8b8e:	f8 01       	movw	r30, r16
    8b90:	40 80       	ld	r4, Z
    8b92:	51 80       	ldd	r5, Z+1	; 0x01
    8b94:	62 80       	ldd	r6, Z+2	; 0x02
    8b96:	73 80       	ldd	r7, Z+3	; 0x03
    8b98:	46 0e       	add	r4, r22
    8b9a:	57 1e       	adc	r5, r23
    8b9c:	68 1e       	adc	r6, r24
    8b9e:	79 1e       	adc	r7, r25
    8ba0:	40 82       	st	Z, r4
    8ba2:	51 82       	std	Z+1, r5	; 0x01
    8ba4:	62 82       	std	Z+2, r6	; 0x02
    8ba6:	73 82       	std	Z+3, r7	; 0x03
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
		tempf2 = tempf2 * factor;
    8ba8:	a7 01       	movw	r20, r14
    8baa:	96 01       	movw	r18, r12
    8bac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    8bae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    8bb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8bb2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8bb4:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <__mulsf3>
		P2_temp = (int32_t)tempf2;
    8bb8:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
		IntegralGyro[P2][axis] += P2_temp;
    8bbc:	f8 01       	movw	r30, r16
    8bbe:	c4 84       	ldd	r12, Z+12	; 0x0c
    8bc0:	d5 84       	ldd	r13, Z+13	; 0x0d
    8bc2:	e6 84       	ldd	r14, Z+14	; 0x0e
    8bc4:	f7 84       	ldd	r15, Z+15	; 0x0f
    8bc6:	c6 0e       	add	r12, r22
    8bc8:	d7 1e       	adc	r13, r23
    8bca:	e8 1e       	adc	r14, r24
    8bcc:	f9 1e       	adc	r15, r25
    8bce:	c4 86       	std	Z+12, r12	; 0x0c
    8bd0:	d5 86       	std	Z+13, r13	; 0x0d
    8bd2:	e6 86       	std	Z+14, r14	; 0x0e
    8bd4:	f7 86       	std	Z+15, r15	; 0x0f
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    8bd6:	ec a1       	ldd	r30, Y+36	; 0x24
    8bd8:	fd a1       	ldd	r31, Y+37	; 0x25
    8bda:	81 91       	ld	r24, Z+
    8bdc:	91 91       	ld	r25, Z+
    8bde:	a1 91       	ld	r26, Z+
    8be0:	b1 91       	ld	r27, Z+
    8be2:	fd a3       	std	Y+37, r31	; 0x25
    8be4:	ec a3       	std	Y+36, r30	; 0x24
    8be6:	84 15       	cp	r24, r4
    8be8:	95 05       	cpc	r25, r5
    8bea:	a6 05       	cpc	r26, r6
    8bec:	b7 05       	cpc	r27, r7
    8bee:	2c f4       	brge	.+10     	; 0x8bfa <Sensor_PID+0x2c8>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    8bf0:	f8 01       	movw	r30, r16
    8bf2:	80 83       	st	Z, r24
    8bf4:	91 83       	std	Z+1, r25	; 0x01
    8bf6:	a2 83       	std	Z+2, r26	; 0x02
    8bf8:	b3 83       	std	Z+3, r27	; 0x03
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    8bfa:	b0 95       	com	r27
    8bfc:	a0 95       	com	r26
    8bfe:	90 95       	com	r25
    8c00:	81 95       	neg	r24
    8c02:	9f 4f       	sbci	r25, 0xFF	; 255
    8c04:	af 4f       	sbci	r26, 0xFF	; 255
    8c06:	bf 4f       	sbci	r27, 0xFF	; 255
    8c08:	f8 01       	movw	r30, r16
    8c0a:	40 81       	ld	r20, Z
    8c0c:	51 81       	ldd	r21, Z+1	; 0x01
    8c0e:	62 81       	ldd	r22, Z+2	; 0x02
    8c10:	73 81       	ldd	r23, Z+3	; 0x03
    8c12:	48 17       	cp	r20, r24
    8c14:	59 07       	cpc	r21, r25
    8c16:	6a 07       	cpc	r22, r26
    8c18:	7b 07       	cpc	r23, r27
    8c1a:	24 f4       	brge	.+8      	; 0x8c24 <Sensor_PID+0x2f2>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    8c1c:	80 83       	st	Z, r24
    8c1e:	91 83       	std	Z+1, r25	; 0x01
    8c20:	a2 83       	std	Z+2, r26	; 0x02
    8c22:	b3 83       	std	Z+3, r27	; 0x03
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    8c24:	ee a1       	ldd	r30, Y+38	; 0x26
    8c26:	ff a1       	ldd	r31, Y+39	; 0x27
    8c28:	81 91       	ld	r24, Z+
    8c2a:	91 91       	ld	r25, Z+
    8c2c:	a1 91       	ld	r26, Z+
    8c2e:	b1 91       	ld	r27, Z+
    8c30:	ff a3       	std	Y+39, r31	; 0x27
    8c32:	ee a3       	std	Y+38, r30	; 0x26
    8c34:	f8 01       	movw	r30, r16
    8c36:	44 85       	ldd	r20, Z+12	; 0x0c
    8c38:	55 85       	ldd	r21, Z+13	; 0x0d
    8c3a:	66 85       	ldd	r22, Z+14	; 0x0e
    8c3c:	77 85       	ldd	r23, Z+15	; 0x0f
    8c3e:	84 17       	cp	r24, r20
    8c40:	95 07       	cpc	r25, r21
    8c42:	a6 07       	cpc	r26, r22
    8c44:	b7 07       	cpc	r27, r23
    8c46:	24 f4       	brge	.+8      	; 0x8c50 <Sensor_PID+0x31e>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    8c48:	84 87       	std	Z+12, r24	; 0x0c
    8c4a:	95 87       	std	Z+13, r25	; 0x0d
    8c4c:	a6 87       	std	Z+14, r26	; 0x0e
    8c4e:	b7 87       	std	Z+15, r27	; 0x0f
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    8c50:	b0 95       	com	r27
    8c52:	a0 95       	com	r26
    8c54:	90 95       	com	r25
    8c56:	81 95       	neg	r24
    8c58:	9f 4f       	sbci	r25, 0xFF	; 255
    8c5a:	af 4f       	sbci	r26, 0xFF	; 255
    8c5c:	bf 4f       	sbci	r27, 0xFF	; 255
    8c5e:	f8 01       	movw	r30, r16
    8c60:	44 85       	ldd	r20, Z+12	; 0x0c
    8c62:	55 85       	ldd	r21, Z+13	; 0x0d
    8c64:	66 85       	ldd	r22, Z+14	; 0x0e
    8c66:	77 85       	ldd	r23, Z+15	; 0x0f
    8c68:	48 17       	cp	r20, r24
    8c6a:	59 07       	cpc	r21, r25
    8c6c:	6a 07       	cpc	r22, r26
    8c6e:	7b 07       	cpc	r23, r27
    8c70:	24 f4       	brge	.+8      	; 0x8c7a <Sensor_PID+0x348>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    8c72:	84 87       	std	Z+12, r24	; 0x0c
    8c74:	95 87       	std	Z+13, r25	; 0x0d
    8c76:	a6 87       	std	Z+14, r26	; 0x0e
    8c78:	b7 87       	std	Z+15, r27	; 0x0f

		//************************************************************
		// Sum gyro readings for P-terms for later averaging
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
    8c7a:	a4 01       	movw	r20, r8
    8c7c:	66 27       	eor	r22, r22
    8c7e:	57 fd       	sbrc	r21, 7
    8c80:	60 95       	com	r22
    8c82:	76 2f       	mov	r23, r22
    8c84:	ec 89       	ldd	r30, Y+20	; 0x14
    8c86:	fd 89       	ldd	r31, Y+21	; 0x15
    8c88:	80 81       	ld	r24, Z
    8c8a:	91 81       	ldd	r25, Z+1	; 0x01
    8c8c:	a2 81       	ldd	r26, Z+2	; 0x02
    8c8e:	b3 81       	ldd	r27, Z+3	; 0x03
    8c90:	84 0f       	add	r24, r20
    8c92:	95 1f       	adc	r25, r21
    8c94:	a6 1f       	adc	r26, r22
    8c96:	b7 1f       	adc	r27, r23
    8c98:	81 93       	st	Z+, r24
    8c9a:	91 93       	st	Z+, r25
    8c9c:	a1 93       	st	Z+, r26
    8c9e:	b1 93       	st	Z+, r27
    8ca0:	fd 8b       	std	Y+21, r31	; 0x15
    8ca2:	ec 8b       	std	Y+20, r30	; 0x14
		//************************************************************
		// Apply a D-term to each axis (use raw gyro as error)
		//************************************************************		
		
		// Debug use 1/factor to normalise the D-term with the loop rate 
		PID_AvgGyroDTerm[axis] += (gyroADC[axis] - OldgyroADC[axis]);
    8ca4:	e8 8d       	ldd	r30, Y+24	; 0x18
    8ca6:	f9 8d       	ldd	r31, Y+25	; 0x19
    8ca8:	80 81       	ld	r24, Z
    8caa:	91 81       	ldd	r25, Z+1	; 0x01
    8cac:	a4 01       	movw	r20, r8
    8cae:	48 1b       	sub	r20, r24
    8cb0:	59 0b       	sbc	r21, r25
    8cb2:	66 27       	eor	r22, r22
    8cb4:	57 fd       	sbrc	r21, 7
    8cb6:	60 95       	com	r22
    8cb8:	76 2f       	mov	r23, r22
    8cba:	ee 89       	ldd	r30, Y+22	; 0x16
    8cbc:	ff 89       	ldd	r31, Y+23	; 0x17
    8cbe:	80 81       	ld	r24, Z
    8cc0:	91 81       	ldd	r25, Z+1	; 0x01
    8cc2:	a2 81       	ldd	r26, Z+2	; 0x02
    8cc4:	b3 81       	ldd	r27, Z+3	; 0x03
    8cc6:	84 0f       	add	r24, r20
    8cc8:	95 1f       	adc	r25, r21
    8cca:	a6 1f       	adc	r26, r22
    8ccc:	b7 1f       	adc	r27, r23
    8cce:	81 93       	st	Z+, r24
    8cd0:	91 93       	st	Z+, r25
    8cd2:	a1 93       	st	Z+, r26
    8cd4:	b1 93       	st	Z+, r27
    8cd6:	ff 8b       	std	Y+23, r31	; 0x17
    8cd8:	ee 8b       	std	Y+22, r30	; 0x16
		OldgyroADC[axis] = gyroADC[axis];
    8cda:	e8 8d       	ldd	r30, Y+24	; 0x18
    8cdc:	f9 8d       	ldd	r31, Y+25	; 0x19
    8cde:	81 92       	st	Z+, r8
    8ce0:	91 92       	st	Z+, r9
    8ce2:	f9 8f       	std	Y+25, r31	; 0x19
    8ce4:	e8 8f       	std	Y+24, r30	; 0x18
    8ce6:	fb 89       	ldd	r31, Y+19	; 0x13
    8ce8:	ff 5f       	subi	r31, 0xFF	; 255
    8cea:	fb 8b       	std	Y+19, r31	; 0x13
    8cec:	0c 5f       	subi	r16, 0xFC	; 252
    8cee:	1f 4f       	sbci	r17, 0xFF	; 255
    8cf0:	24 e0       	ldi	r18, 0x04	; 4
    8cf2:	22 0e       	add	r2, r18
    8cf4:	31 1c       	adc	r3, r1
    8cf6:	49 89       	ldd	r20, Y+17	; 0x11
    8cf8:	5a 89       	ldd	r21, Y+18	; 0x12
    8cfa:	4e 5f       	subi	r20, 0xFE	; 254
    8cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    8cfe:	5a 8b       	std	Y+18, r21	; 0x12
    8d00:	49 8b       	std	Y+17, r20	; 0x11
	{
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	for (axis = 0; axis <= YAW; axis ++)
    8d02:	f3 30       	cpi	r31, 0x03	; 3
    8d04:	09 f0       	breq	.+2      	; 0x8d08 <Sensor_PID+0x3d6>
    8d06:	8b ce       	rjmp	.-746    	; 0x8a1e <Sensor_PID+0xec>
		OldgyroADC[axis] = gyroADC[axis];
		
	} // for (axis = 0; axis <= YAW; axis ++)
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    8d08:	40 91 16 05 	lds	r20, 0x0516
    8d0c:	50 91 17 05 	lds	r21, 0x0517
    8d10:	66 27       	eor	r22, r22
    8d12:	57 fd       	sbrc	r21, 7
    8d14:	60 95       	com	r22
    8d16:	76 2f       	mov	r23, r22
    8d18:	80 91 38 05 	lds	r24, 0x0538
    8d1c:	90 91 39 05 	lds	r25, 0x0539
    8d20:	a0 91 3a 05 	lds	r26, 0x053A
    8d24:	b0 91 3b 05 	lds	r27, 0x053B
    8d28:	84 0f       	add	r24, r20
    8d2a:	95 1f       	adc	r25, r21
    8d2c:	a6 1f       	adc	r26, r22
    8d2e:	b7 1f       	adc	r27, r23
    8d30:	80 93 38 05 	sts	0x0538, r24
    8d34:	90 93 39 05 	sts	0x0539, r25
    8d38:	a0 93 3a 05 	sts	0x053A, r26
    8d3c:	b0 93 3b 05 	sts	0x053B, r27
}
    8d40:	ab 96       	adiw	r28, 0x2b	; 43
    8d42:	0f b6       	in	r0, 0x3f	; 63
    8d44:	f8 94       	cli
    8d46:	de bf       	out	0x3e, r29	; 62
    8d48:	0f be       	out	0x3f, r0	; 63
    8d4a:	cd bf       	out	0x3d, r28	; 61
    8d4c:	df 91       	pop	r29
    8d4e:	cf 91       	pop	r28
    8d50:	1f 91       	pop	r17
    8d52:	0f 91       	pop	r16
    8d54:	ff 90       	pop	r15
    8d56:	ef 90       	pop	r14
    8d58:	df 90       	pop	r13
    8d5a:	cf 90       	pop	r12
    8d5c:	bf 90       	pop	r11
    8d5e:	af 90       	pop	r10
    8d60:	9f 90       	pop	r9
    8d62:	8f 90       	pop	r8
    8d64:	7f 90       	pop	r7
    8d66:	6f 90       	pop	r6
    8d68:	5f 90       	pop	r5
    8d6a:	4f 90       	pop	r4
    8d6c:	3f 90       	pop	r3
    8d6e:	2f 90       	pop	r2
    8d70:	08 95       	ret

00008d72 <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    8d72:	2f 92       	push	r2
    8d74:	3f 92       	push	r3
    8d76:	4f 92       	push	r4
    8d78:	5f 92       	push	r5
    8d7a:	6f 92       	push	r6
    8d7c:	7f 92       	push	r7
    8d7e:	8f 92       	push	r8
    8d80:	9f 92       	push	r9
    8d82:	af 92       	push	r10
    8d84:	bf 92       	push	r11
    8d86:	cf 92       	push	r12
    8d88:	df 92       	push	r13
    8d8a:	ef 92       	push	r14
    8d8c:	ff 92       	push	r15
    8d8e:	0f 93       	push	r16
    8d90:	1f 93       	push	r17
    8d92:	cf 93       	push	r28
    8d94:	df 93       	push	r29
    8d96:	cd b7       	in	r28, 0x3d	; 61
    8d98:	de b7       	in	r29, 0x3e	; 62
    8d9a:	cd 55       	subi	r28, 0x5D	; 93
    8d9c:	d1 09       	sbc	r29, r1
    8d9e:	0f b6       	in	r0, 0x3f	; 63
    8da0:	f8 94       	cli
    8da2:	de bf       	out	0x3e, r29	; 62
    8da4:	0f be       	out	0x3f, r0	; 63
    8da6:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8da8:	80 91 f3 05 	lds	r24, 0x05F3
    8dac:	8b 8f       	std	Y+27, r24	; 0x1b
    8dae:	80 91 f9 05 	lds	r24, 0x05F9
    8db2:	8c 8f       	std	Y+28, r24	; 0x1c
    8db4:	80 91 ff 05 	lds	r24, 0x05FF
    8db8:	8d 8f       	std	Y+29, r24	; 0x1d
    8dba:	80 91 05 06 	lds	r24, 0x0605
    8dbe:	8e 8f       	std	Y+30, r24	; 0x1e
    8dc0:	80 91 0b 06 	lds	r24, 0x060B
    8dc4:	8f 8f       	std	Y+31, r24	; 0x1f
    8dc6:	80 91 11 06 	lds	r24, 0x0611
    8dca:	88 a3       	std	Y+32, r24	; 0x20
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8dcc:	80 91 f4 05 	lds	r24, 0x05F4
    8dd0:	8d 8b       	std	Y+21, r24	; 0x15
    8dd2:	80 91 fa 05 	lds	r24, 0x05FA
    8dd6:	8e 8b       	std	Y+22, r24	; 0x16
    8dd8:	80 91 00 06 	lds	r24, 0x0600
    8ddc:	8f 8b       	std	Y+23, r24	; 0x17
    8dde:	80 91 06 06 	lds	r24, 0x0606
    8de2:	88 8f       	std	Y+24, r24	; 0x18
    8de4:	80 91 0c 06 	lds	r24, 0x060C
    8de8:	89 8f       	std	Y+25, r24	; 0x19
    8dea:	80 91 12 06 	lds	r24, 0x0612
    8dee:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8df0:	80 91 f7 05 	lds	r24, 0x05F7
    8df4:	8f 87       	std	Y+15, r24	; 0x0f
    8df6:	80 91 fd 05 	lds	r24, 0x05FD
    8dfa:	88 8b       	std	Y+16, r24	; 0x10
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    8dfc:	20 91 04 06 	lds	r18, 0x0604
    8e00:	2f ab       	std	Y+55, r18	; 0x37
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8e02:	29 8b       	std	Y+17, r18	; 0x11
    8e04:	80 91 09 06 	lds	r24, 0x0609
    8e08:	8a 8b       	std	Y+18, r24	; 0x12
    8e0a:	80 91 0f 06 	lds	r24, 0x060F
    8e0e:	8b 8b       	std	Y+19, r24	; 0x13
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    8e10:	30 91 16 06 	lds	r19, 0x0616
    8e14:	38 af       	std	Y+56, r19	; 0x38
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8e16:	3c 8b       	std	Y+20, r19	; 0x14
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    8e18:	80 91 c0 07 	lds	r24, 0x07C0
    8e1c:	90 91 c1 07 	lds	r25, 0x07C1
    8e20:	9a 83       	std	Y+2, r25	; 0x02
    8e22:	89 83       	std	Y+1, r24	; 0x01
    8e24:	80 91 c4 07 	lds	r24, 0x07C4
    8e28:	90 91 c5 07 	lds	r25, 0x07C5
    8e2c:	9c 83       	std	Y+4, r25	; 0x04
    8e2e:	8b 83       	std	Y+3, r24	; 0x03
    8e30:	80 91 c2 07 	lds	r24, 0x07C2
    8e34:	90 91 c3 07 	lds	r25, 0x07C3
    8e38:	9e 83       	std	Y+6, r25	; 0x06
    8e3a:	8d 83       	std	Y+5, r24	; 0x05
    8e3c:	80 91 c6 07 	lds	r24, 0x07C6
    8e40:	90 91 c7 07 	lds	r25, 0x07C7
    8e44:	98 87       	std	Y+8, r25	; 0x08
    8e46:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// D-terms (same for all profiles for now)
	int16_t	D_gain[NUMBEROFAXIS] =
    8e48:	80 91 f1 05 	lds	r24, 0x05F1
    8e4c:	99 27       	eor	r25, r25
    8e4e:	87 fd       	sbrc	r24, 7
    8e50:	90 95       	com	r25
    8e52:	9a 87       	std	Y+10, r25	; 0x0a
    8e54:	89 87       	std	Y+9, r24	; 0x09
    8e56:	80 91 f2 05 	lds	r24, 0x05F2
    8e5a:	99 27       	eor	r25, r25
    8e5c:	87 fd       	sbrc	r24, 7
    8e5e:	90 95       	com	r25
    8e60:	9c 87       	std	Y+12, r25	; 0x0c
    8e62:	8b 87       	std	Y+11, r24	; 0x0b
    8e64:	1e 86       	std	Y+14, r1	; 0x0e
    8e66:	1d 86       	std	Y+13, r1	; 0x0d
		{
			Config.D_mult_roll, Config.D_mult_pitch, 0
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    8e68:	20 91 18 05 	lds	r18, 0x0518
    8e6c:	30 e0       	ldi	r19, 0x00	; 0
    8e6e:	40 e0       	ldi	r20, 0x00	; 0
    8e70:	50 e0       	ldi	r21, 0x00	; 0
    8e72:	60 91 38 05 	lds	r22, 0x0538
    8e76:	70 91 39 05 	lds	r23, 0x0539
    8e7a:	80 91 3a 05 	lds	r24, 0x053A
    8e7e:	90 91 3b 05 	lds	r25, 0x053B
    8e82:	0e 94 59 4f 	call	0x9eb2	; 0x9eb2 <__divmodsi4>
    8e86:	6d 96       	adiw	r28, 0x1d	; 29
    8e88:	2c af       	std	Y+60, r18	; 0x3c
    8e8a:	3d af       	std	Y+61, r19	; 0x3d
    8e8c:	4e af       	std	Y+62, r20	; 0x3e
    8e8e:	5f af       	std	Y+63, r21	; 0x3f
    8e90:	6d 97       	sbiw	r28, 0x1d	; 29
	PID_AvgAccVert = 0;							// Reset average
    8e92:	10 92 38 05 	sts	0x0538, r1
    8e96:	10 92 39 05 	sts	0x0539, r1
    8e9a:	10 92 3a 05 	sts	0x053A, r1
    8e9e:	10 92 3b 05 	sts	0x053B, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    8ea2:	80 91 03 06 	lds	r24, 0x0603
    8ea6:	40 e4       	ldi	r20, 0x40	; 64
    8ea8:	84 02       	muls	r24, r20
    8eaa:	c0 01       	movw	r24, r0
    8eac:	11 24       	eor	r1, r1
    8eae:	9c 01       	movw	r18, r24
    8eb0:	44 27       	eor	r20, r20
    8eb2:	37 fd       	sbrc	r19, 7
    8eb4:	40 95       	com	r20
    8eb6:	54 2f       	mov	r21, r20
    8eb8:	2d 96       	adiw	r28, 0x0d	; 13
    8eba:	2c af       	std	Y+60, r18	; 0x3c
    8ebc:	3d af       	std	Y+61, r19	; 0x3d
    8ebe:	4e af       	std	Y+62, r20	; 0x3e
    8ec0:	5f af       	std	Y+63, r21	; 0x3f
    8ec2:	2d 97       	sbiw	r28, 0x0d	; 13
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8ec4:	80 91 15 06 	lds	r24, 0x0615
    8ec8:	30 e4       	ldi	r19, 0x40	; 64
    8eca:	83 02       	muls	r24, r19
    8ecc:	c0 01       	movw	r24, r0
    8ece:	11 24       	eor	r1, r1
    8ed0:	9c 01       	movw	r18, r24
    8ed2:	44 27       	eor	r20, r20
    8ed4:	37 fd       	sbrc	r19, 7
    8ed6:	40 95       	com	r20
    8ed8:	54 2f       	mov	r21, r20
    8eda:	61 96       	adiw	r28, 0x11	; 17
    8edc:	2c af       	std	Y+60, r18	; 0x3c
    8ede:	3d af       	std	Y+61, r19	; 0x3d
    8ee0:	4e af       	std	Y+62, r20	; 0x3e
    8ee2:	5f af       	std	Y+63, r21	; 0x3f
    8ee4:	61 97       	sbiw	r28, 0x11	; 17
    8ee6:	4f e6       	ldi	r20, 0x6F	; 111
    8ee8:	58 e0       	ldi	r21, 0x08	; 8
    8eea:	5c a7       	std	Y+44, r21	; 0x2c
    8eec:	4b a7       	std	Y+43, r20	; 0x2b
    8eee:	83 e8       	ldi	r24, 0x83	; 131
    8ef0:	95 e0       	ldi	r25, 0x05	; 5
    8ef2:	23 96       	adiw	r28, 0x03	; 3
    8ef4:	9f af       	std	Y+63, r25	; 0x3f
    8ef6:	8e af       	std	Y+62, r24	; 0x3e
    8ef8:	23 97       	sbiw	r28, 0x03	; 3
    8efa:	a5 e1       	ldi	r26, 0x15	; 21
    8efc:	b8 e0       	ldi	r27, 0x08	; 8
    8efe:	ba a7       	std	Y+42, r27	; 0x2a
    8f00:	a9 a7       	std	Y+41, r26	; 0x29
    8f02:	e9 e3       	ldi	r30, 0x39	; 57
    8f04:	f8 e0       	ldi	r31, 0x08	; 8
    8f06:	21 96       	adiw	r28, 0x01	; 1
    8f08:	ff af       	std	Y+63, r31	; 0x3f
    8f0a:	ee af       	std	Y+62, r30	; 0x3e
    8f0c:	21 97       	sbiw	r28, 0x01	; 1
    8f0e:	21 e5       	ldi	r18, 0x51	; 81
    8f10:	38 e0       	ldi	r19, 0x08	; 8
    8f12:	38 a7       	std	Y+40, r19	; 0x28
    8f14:	2f a3       	std	Y+39, r18	; 0x27
    8f16:	41 ea       	ldi	r20, 0xA1	; 161
    8f18:	55 e0       	ldi	r21, 0x05	; 5
    8f1a:	58 ab       	std	Y+48, r21	; 0x30
    8f1c:	4f a7       	std	Y+47, r20	; 0x2f
    8f1e:	ce 01       	movw	r24, r28
    8f20:	01 96       	adiw	r24, 0x01	; 1
    8f22:	9e a3       	std	Y+38, r25	; 0x26
    8f24:	8d a3       	std	Y+37, r24	; 0x25
    8f26:	a3 e6       	ldi	r26, 0x63	; 99
    8f28:	b8 e0       	ldi	r27, 0x08	; 8
    8f2a:	bc a3       	std	Y+36, r27	; 0x24
    8f2c:	ab a3       	std	Y+35, r26	; 0x23
    8f2e:	fe 01       	movw	r30, r28
    8f30:	72 96       	adiw	r30, 0x12	; 18
    8f32:	fe a7       	std	Y+46, r31	; 0x2e
    8f34:	ed a7       	std	Y+45, r30	; 0x2d
    8f36:	23 e2       	ldi	r18, 0x23	; 35
    8f38:	36 e0       	ldi	r19, 0x06	; 6
    8f3a:	3e ab       	std	Y+54, r19	; 0x36
    8f3c:	2d ab       	std	Y+53, r18	; 0x35
    8f3e:	ae 01       	movw	r20, r28
    8f40:	45 5e       	subi	r20, 0xE5	; 229
    8f42:	5f 4f       	sbci	r21, 0xFF	; 255
    8f44:	5a ab       	std	Y+50, r21	; 0x32
    8f46:	49 ab       	std	Y+49, r20	; 0x31
    8f48:	81 e2       	ldi	r24, 0x21	; 33
    8f4a:	98 e0       	ldi	r25, 0x08	; 8
    8f4c:	9a a3       	std	Y+34, r25	; 0x22
    8f4e:	89 a3       	std	Y+33, r24	; 0x21
    8f50:	de 01       	movw	r26, r28
    8f52:	55 96       	adiw	r26, 0x15	; 21
    8f54:	ba af       	std	Y+58, r27	; 0x3a
    8f56:	a9 af       	std	Y+57, r26	; 0x39
    8f58:	3c 96       	adiw	r30, 0x0c	; 12
    8f5a:	fc af       	std	Y+60, r31	; 0x3c
    8f5c:	eb af       	std	Y+59, r30	; 0x3b
    8f5e:	9e 01       	movw	r18, r28
    8f60:	28 5e       	subi	r18, 0xE8	; 232
    8f62:	3f 4f       	sbci	r19, 0xFF	; 255
    8f64:	3e af       	std	Y+62, r19	; 0x3e
    8f66:	2d af       	std	Y+61, r18	; 0x3d
    8f68:	42 51       	subi	r20, 0x12	; 18
    8f6a:	51 09       	sbc	r21, r1
    8f6c:	5c ab       	std	Y+52, r21	; 0x34
    8f6e:	4b ab       	std	Y+51, r20	; 0x33
    8f70:	87 e1       	ldi	r24, 0x17	; 23
    8f72:	96 e0       	ldi	r25, 0x06	; 6
    8f74:	25 96       	adiw	r28, 0x05	; 5
    8f76:	9f af       	std	Y+63, r25	; 0x3f
    8f78:	8e af       	std	Y+62, r24	; 0x3e
    8f7a:	25 97       	sbiw	r28, 0x05	; 5
    8f7c:	21 2c       	mov	r2, r1
    8f7e:	31 2c       	mov	r3, r1
	{
		//************************************************************
		// Get average gyro readings for P-terms
		//************************************************************

		gyroADC[axis] = (int16_t)(PID_AvgGyro[axis] / LoopCount);
    8f80:	20 91 18 05 	lds	r18, 0x0518
    8f84:	30 e0       	ldi	r19, 0x00	; 0
    8f86:	40 e0       	ldi	r20, 0x00	; 0
    8f88:	50 e0       	ldi	r21, 0x00	; 0
    8f8a:	ab a5       	ldd	r26, Y+43	; 0x2b
    8f8c:	bc a5       	ldd	r27, Y+44	; 0x2c
    8f8e:	6d 91       	ld	r22, X+
    8f90:	7d 91       	ld	r23, X+
    8f92:	8d 91       	ld	r24, X+
    8f94:	9c 91       	ld	r25, X
    8f96:	0e 94 59 4f 	call	0x9eb2	; 0x9eb2 <__divmodsi4>
    8f9a:	69 01       	movw	r12, r18
    8f9c:	7a 01       	movw	r14, r20
    8f9e:	23 96       	adiw	r28, 0x03	; 3
    8fa0:	ee ad       	ldd	r30, Y+62	; 0x3e
    8fa2:	ff ad       	ldd	r31, Y+63	; 0x3f
    8fa4:	23 97       	sbiw	r28, 0x03	; 3
    8fa6:	21 93       	st	Z+, r18
    8fa8:	31 93       	st	Z+, r19
    8faa:	23 96       	adiw	r28, 0x03	; 3
    8fac:	ff af       	std	Y+63, r31	; 0x3f
    8fae:	ee af       	std	Y+62, r30	; 0x3e
    8fb0:	23 97       	sbiw	r28, 0x03	; 3
		PID_AvgGyro[axis] = 0;					// Reset average
    8fb2:	ab a5       	ldd	r26, Y+43	; 0x2b
    8fb4:	bc a5       	ldd	r27, Y+44	; 0x2c
    8fb6:	1d 92       	st	X+, r1
    8fb8:	1d 92       	st	X+, r1
    8fba:	1d 92       	st	X+, r1
    8fbc:	1c 92       	st	X, r1
    8fbe:	13 97       	sbiw	r26, 0x03	; 3
		//************************************************************
		// Get average gyro readings for D-terms
		//************************************************************
#ifdef D_METHOD
		// Average the D-terms previously generated from raw gyro differences
		GyroDTerm[axis] = (PID_AvgGyroDTerm[axis] / LoopCount);
    8fc0:	20 91 18 05 	lds	r18, 0x0518
    8fc4:	30 e0       	ldi	r19, 0x00	; 0
    8fc6:	40 e0       	ldi	r20, 0x00	; 0
    8fc8:	50 e0       	ldi	r21, 0x00	; 0
    8fca:	e9 a5       	ldd	r30, Y+41	; 0x29
    8fcc:	fa a5       	ldd	r31, Y+42	; 0x2a
    8fce:	60 81       	ld	r22, Z
    8fd0:	71 81       	ldd	r23, Z+1	; 0x01
    8fd2:	82 81       	ldd	r24, Z+2	; 0x02
    8fd4:	93 81       	ldd	r25, Z+3	; 0x03
    8fd6:	0e 94 59 4f 	call	0x9eb2	; 0x9eb2 <__divmodsi4>
    8fda:	29 96       	adiw	r28, 0x09	; 9
    8fdc:	2c af       	std	Y+60, r18	; 0x3c
    8fde:	3d af       	std	Y+61, r19	; 0x3d
    8fe0:	4e af       	std	Y+62, r20	; 0x3e
    8fe2:	5f af       	std	Y+63, r21	; 0x3f
    8fe4:	29 97       	sbiw	r28, 0x09	; 9
    8fe6:	21 96       	adiw	r28, 0x01	; 1
    8fe8:	ae ad       	ldd	r26, Y+62	; 0x3e
    8fea:	bf ad       	ldd	r27, Y+63	; 0x3f
    8fec:	21 97       	sbiw	r28, 0x01	; 1
    8fee:	2d 93       	st	X+, r18
    8ff0:	3d 93       	st	X+, r19
    8ff2:	4d 93       	st	X+, r20
    8ff4:	5d 93       	st	X+, r21
    8ff6:	21 96       	adiw	r28, 0x01	; 1
    8ff8:	bf af       	std	Y+63, r27	; 0x3f
    8ffa:	ae af       	std	Y+62, r26	; 0x3e
    8ffc:	21 97       	sbiw	r28, 0x01	; 1
		PID_AvgGyroDTerm[axis] = 0;				// Reset average
    8ffe:	e9 a5       	ldd	r30, Y+41	; 0x29
    9000:	fa a5       	ldd	r31, Y+42	; 0x2a
    9002:	10 82       	st	Z, r1
    9004:	11 82       	std	Z+1, r1	; 0x01
    9006:	12 82       	std	Z+2, r1	; 0x02
    9008:	13 82       	std	Z+3, r1	; 0x03
    900a:	6e 96       	adiw	r28, 0x1e	; 30
    900c:	2f ae       	std	Y+63, r2	; 0x3f
    900e:	6e 97       	sbiw	r28, 0x1e	; 30
#endif
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    9010:	f2 2d       	mov	r31, r2
    9012:	f2 30       	cpi	r31, 0x02	; 2
    9014:	39 f0       	breq	.+14     	; 0x9024 <Calculate_PID+0x2b2>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    9016:	41 2c       	mov	r4, r1
    9018:	51 2c       	mov	r5, r1
    901a:	32 01       	movw	r6, r4
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    901c:	81 2c       	mov	r8, r1
    901e:	91 2c       	mov	r9, r1
    9020:	54 01       	movw	r10, r8
    9022:	0c c0       	rjmp	.+24     	; 0x903c <Calculate_PID+0x2ca>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    9024:	61 96       	adiw	r28, 0x11	; 17
    9026:	4c ac       	ldd	r4, Y+60	; 0x3c
    9028:	5d ac       	ldd	r5, Y+61	; 0x3d
    902a:	6e ac       	ldd	r6, Y+62	; 0x3e
    902c:	7f ac       	ldd	r7, Y+63	; 0x3f
    902e:	61 97       	sbiw	r28, 0x11	; 17
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    9030:	2d 96       	adiw	r28, 0x0d	; 13
    9032:	8c ac       	ldd	r8, Y+60	; 0x3c
    9034:	9d ac       	ldd	r9, Y+61	; 0x3d
    9036:	ae ac       	ldd	r10, Y+62	; 0x3e
    9038:	bf ac       	ldd	r11, Y+63	; 0x3f
    903a:	2d 97       	sbiw	r28, 0x0d	; 13
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    903c:	a9 a9       	ldd	r26, Y+49	; 0x31
    903e:	ba a9       	ldd	r27, Y+50	; 0x32
    9040:	2d 91       	ld	r18, X+
    9042:	ba ab       	std	Y+50, r27	; 0x32
    9044:	a9 ab       	std	Y+49, r26	; 0x31
    9046:	33 27       	eor	r19, r19
    9048:	27 fd       	sbrc	r18, 7
    904a:	30 95       	com	r19
    904c:	2c 9d       	mul	r18, r12
    904e:	c0 01       	movw	r24, r0
    9050:	2d 9d       	mul	r18, r13
    9052:	90 0d       	add	r25, r0
    9054:	3c 9d       	mul	r19, r12
    9056:	90 0d       	add	r25, r0
    9058:	11 24       	eor	r1, r1
    905a:	9c 01       	movw	r18, r24
    905c:	44 27       	eor	r20, r20
    905e:	37 fd       	sbrc	r19, 7
    9060:	40 95       	com	r20
    9062:	54 2f       	mov	r21, r20
    9064:	28 0d       	add	r18, r8
    9066:	39 1d       	adc	r19, r9
    9068:	4a 1d       	adc	r20, r10
    906a:	5b 1d       	adc	r21, r11
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    906c:	a3 e0       	ldi	r26, 0x03	; 3
    906e:	b0 e0       	ldi	r27, 0x00	; 0
    9070:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <__muluhisi3>
    9074:	65 96       	adiw	r28, 0x15	; 21
    9076:	6c af       	std	Y+60, r22	; 0x3c
    9078:	7d af       	std	Y+61, r23	; 0x3d
    907a:	8e af       	std	Y+62, r24	; 0x3e
    907c:	9f af       	std	Y+63, r25	; 0x3f
    907e:	65 97       	sbiw	r28, 0x15	; 21

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    9080:	e9 ad       	ldd	r30, Y+57	; 0x39
    9082:	fa ad       	ldd	r31, Y+58	; 0x3a
    9084:	81 91       	ld	r24, Z+
    9086:	fa af       	std	Y+58, r31	; 0x3a
    9088:	e9 af       	std	Y+57, r30	; 0x39
    908a:	a9 a1       	ldd	r26, Y+33	; 0x21
    908c:	ba a1       	ldd	r27, Y+34	; 0x22
    908e:	2d 91       	ld	r18, X+
    9090:	3d 91       	ld	r19, X+
    9092:	4d 91       	ld	r20, X+
    9094:	5c 91       	ld	r21, X
    9096:	a8 2f       	mov	r26, r24
    9098:	bb 27       	eor	r27, r27
    909a:	a7 fd       	sbrc	r26, 7
    909c:	b0 95       	com	r27
    909e:	0e 94 a7 4f 	call	0x9f4e	; 0x9f4e <__mulshisi3>
    90a2:	4b 01       	movw	r8, r22
    90a4:	5c 01       	movw	r10, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    90a6:	05 e0       	ldi	r16, 0x05	; 5
    90a8:	b5 94       	asr	r11
    90aa:	a7 94       	ror	r10
    90ac:	97 94       	ror	r9
    90ae:	87 94       	ror	r8
    90b0:	0a 95       	dec	r16
    90b2:	d1 f7       	brne	.-12     	; 0x90a8 <Calculate_PID+0x336>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    90b4:	eb ad       	ldd	r30, Y+59	; 0x3b
    90b6:	fc ad       	ldd	r31, Y+60	; 0x3c
    90b8:	81 91       	ld	r24, Z+
    90ba:	fc af       	std	Y+60, r31	; 0x3c
    90bc:	eb af       	std	Y+59, r30	; 0x3b
    90be:	99 27       	eor	r25, r25
    90c0:	87 fd       	sbrc	r24, 7
    90c2:	90 95       	com	r25
    90c4:	8c 9d       	mul	r24, r12
    90c6:	90 01       	movw	r18, r0
    90c8:	8d 9d       	mul	r24, r13
    90ca:	30 0d       	add	r19, r0
    90cc:	9c 9d       	mul	r25, r12
    90ce:	30 0d       	add	r19, r0
    90d0:	11 24       	eor	r1, r1
    90d2:	44 27       	eor	r20, r20
    90d4:	37 fd       	sbrc	r19, 7
    90d6:	40 95       	com	r20
    90d8:	54 2f       	mov	r21, r20
    90da:	24 0d       	add	r18, r4
    90dc:	35 1d       	adc	r19, r5
    90de:	46 1d       	adc	r20, r6
    90e0:	57 1d       	adc	r21, r7
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    90e2:	a3 e0       	ldi	r26, 0x03	; 3
    90e4:	b0 e0       	ldi	r27, 0x00	; 0
    90e6:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <__muluhisi3>
    90ea:	69 96       	adiw	r28, 0x19	; 25
    90ec:	6c af       	std	Y+60, r22	; 0x3c
    90ee:	7d af       	std	Y+61, r23	; 0x3d
    90f0:	8e af       	std	Y+62, r24	; 0x3e
    90f2:	9f af       	std	Y+63, r25	; 0x3f
    90f4:	69 97       	sbiw	r28, 0x19	; 25

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    90f6:	ad ad       	ldd	r26, Y+61	; 0x3d
    90f8:	be ad       	ldd	r27, Y+62	; 0x3e
    90fa:	8d 91       	ld	r24, X+
    90fc:	be af       	std	Y+62, r27	; 0x3e
    90fe:	ad af       	std	Y+61, r26	; 0x3d
    9100:	e9 a1       	ldd	r30, Y+33	; 0x21
    9102:	fa a1       	ldd	r31, Y+34	; 0x22
    9104:	24 85       	ldd	r18, Z+12	; 0x0c
    9106:	35 85       	ldd	r19, Z+13	; 0x0d
    9108:	46 85       	ldd	r20, Z+14	; 0x0e
    910a:	57 85       	ldd	r21, Z+15	; 0x0f
    910c:	a8 2f       	mov	r26, r24
    910e:	bb 27       	eor	r27, r27
    9110:	a7 fd       	sbrc	r26, 7
    9112:	b0 95       	com	r27
    9114:	0e 94 a7 4f 	call	0x9f4e	; 0x9f4e <__mulshisi3>
    9118:	6b 01       	movw	r12, r22
    911a:	7c 01       	movw	r14, r24
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    911c:	85 e0       	ldi	r24, 0x05	; 5
    911e:	f5 94       	asr	r15
    9120:	e7 94       	ror	r14
    9122:	d7 94       	ror	r13
    9124:	c7 94       	ror	r12
    9126:	8a 95       	dec	r24
    9128:	d1 f7       	brne	.-12     	; 0x911e <Calculate_PID+0x3ac>

		// Gyro D-terms
		PID_gyro_D = GyroDTerm[axis] * D_gain[axis] * 2;				// Debug
    912a:	eb a9       	ldd	r30, Y+51	; 0x33
    912c:	fc a9       	ldd	r31, Y+52	; 0x34
    912e:	a1 91       	ld	r26, Z+
    9130:	b1 91       	ld	r27, Z+
    9132:	fc ab       	std	Y+52, r31	; 0x34
    9134:	eb ab       	std	Y+51, r30	; 0x33
    9136:	29 96       	adiw	r28, 0x09	; 9
    9138:	2c ad       	ldd	r18, Y+60	; 0x3c
    913a:	3d ad       	ldd	r19, Y+61	; 0x3d
    913c:	4e ad       	ldd	r20, Y+62	; 0x3e
    913e:	5f ad       	ldd	r21, Y+63	; 0x3f
    9140:	29 97       	sbiw	r28, 0x09	; 9
    9142:	0e 94 a7 4f 	call	0x9f4e	; 0x9f4e <__mulshisi3>
    9146:	66 0f       	add	r22, r22
    9148:	77 1f       	adc	r23, r23
    914a:	88 1f       	adc	r24, r24
    914c:	99 1f       	adc	r25, r25
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    914e:	25 96       	adiw	r28, 0x05	; 5
    9150:	ae ad       	ldd	r26, Y+62	; 0x3e
    9152:	bf ad       	ldd	r27, Y+63	; 0x3f
    9154:	25 97       	sbiw	r28, 0x05	; 5
    9156:	4d 90       	ld	r4, X+
    9158:	5d 90       	ld	r5, X+
    915a:	6d 90       	ld	r6, X+
    915c:	7d 90       	ld	r7, X+
    915e:	25 96       	adiw	r28, 0x05	; 5
    9160:	bf af       	std	Y+63, r27	; 0x3f
    9162:	ae af       	std	Y+62, r26	; 0x3e
    9164:	25 97       	sbiw	r28, 0x05	; 5
    9166:	48 14       	cp	r4, r8
    9168:	59 04       	cpc	r5, r9
    916a:	6a 04       	cpc	r6, r10
    916c:	7b 04       	cpc	r7, r11
    916e:	84 f0       	brlt	.+32     	; 0x9190 <Calculate_PID+0x41e>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    9170:	00 27       	eor	r16, r16
    9172:	11 27       	eor	r17, r17
    9174:	98 01       	movw	r18, r16
    9176:	04 19       	sub	r16, r4
    9178:	15 09       	sbc	r17, r5
    917a:	26 09       	sbc	r18, r6
    917c:	37 09       	sbc	r19, r7
    917e:	24 01       	movw	r4, r8
    9180:	35 01       	movw	r6, r10
    9182:	80 16       	cp	r8, r16
    9184:	91 06       	cpc	r9, r17
    9186:	a2 06       	cpc	r10, r18
    9188:	b3 06       	cpc	r11, r19
    918a:	14 f4       	brge	.+4      	; 0x9190 <Calculate_PID+0x41e>
    918c:	28 01       	movw	r4, r16
    918e:	39 01       	movw	r6, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    9190:	ed a9       	ldd	r30, Y+53	; 0x35
    9192:	fe a9       	ldd	r31, Y+54	; 0x36
    9194:	01 91       	ld	r16, Z+
    9196:	11 91       	ld	r17, Z+
    9198:	21 91       	ld	r18, Z+
    919a:	31 91       	ld	r19, Z+
    919c:	fe ab       	std	Y+54, r31	; 0x36
    919e:	ed ab       	std	Y+53, r30	; 0x35
    91a0:	0c 15       	cp	r16, r12
    91a2:	1d 05       	cpc	r17, r13
    91a4:	2e 05       	cpc	r18, r14
    91a6:	3f 05       	cpc	r19, r15
    91a8:	84 f0       	brlt	.+32     	; 0x91ca <Calculate_PID+0x458>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    91aa:	88 24       	eor	r8, r8
    91ac:	99 24       	eor	r9, r9
    91ae:	54 01       	movw	r10, r8
    91b0:	80 1a       	sub	r8, r16
    91b2:	91 0a       	sbc	r9, r17
    91b4:	a2 0a       	sbc	r10, r18
    91b6:	b3 0a       	sbc	r11, r19
    91b8:	97 01       	movw	r18, r14
    91ba:	86 01       	movw	r16, r12
    91bc:	c8 14       	cp	r12, r8
    91be:	d9 04       	cpc	r13, r9
    91c0:	ea 04       	cpc	r14, r10
    91c2:	fb 04       	cpc	r15, r11
    91c4:	14 f4       	brge	.+4      	; 0x91ca <Calculate_PID+0x458>
    91c6:	95 01       	movw	r18, r10
    91c8:	84 01       	movw	r16, r8

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1 + PID_gyro_D) >> PID_SCALE); // Currently PID_SCALE = 6 so /64
    91ca:	65 96       	adiw	r28, 0x15	; 21
    91cc:	cc ac       	ldd	r12, Y+60	; 0x3c
    91ce:	dd ac       	ldd	r13, Y+61	; 0x3d
    91d0:	ee ac       	ldd	r14, Y+62	; 0x3e
    91d2:	ff ac       	ldd	r15, Y+63	; 0x3f
    91d4:	65 97       	sbiw	r28, 0x15	; 21
    91d6:	c4 0c       	add	r12, r4
    91d8:	d5 1c       	adc	r13, r5
    91da:	e6 1c       	adc	r14, r6
    91dc:	f7 1c       	adc	r15, r7
    91de:	c6 0e       	add	r12, r22
    91e0:	d7 1e       	adc	r13, r23
    91e2:	e8 1e       	adc	r14, r24
    91e4:	f9 1e       	adc	r15, r25
    91e6:	b6 e0       	ldi	r27, 0x06	; 6
    91e8:	f5 94       	asr	r15
    91ea:	e7 94       	ror	r14
    91ec:	d7 94       	ror	r13
    91ee:	c7 94       	ror	r12
    91f0:	ba 95       	dec	r27
    91f2:	d1 f7       	brne	.-12     	; 0x91e8 <Calculate_PID+0x476>
    91f4:	af a1       	ldd	r26, Y+39	; 0x27
    91f6:	b8 a5       	ldd	r27, Y+40	; 0x28
    91f8:	11 96       	adiw	r26, 0x01	; 1
    91fa:	dc 92       	st	X, r13
    91fc:	ce 92       	st	-X, r12
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2 + PID_gyro_D) >> PID_SCALE);
    91fe:	69 96       	adiw	r28, 0x19	; 25
    9200:	4c ac       	ldd	r4, Y+60	; 0x3c
    9202:	5d ac       	ldd	r5, Y+61	; 0x3d
    9204:	6e ac       	ldd	r6, Y+62	; 0x3e
    9206:	7f ac       	ldd	r7, Y+63	; 0x3f
    9208:	69 97       	sbiw	r28, 0x19	; 25
    920a:	40 0e       	add	r4, r16
    920c:	51 1e       	adc	r5, r17
    920e:	62 1e       	adc	r6, r18
    9210:	73 1e       	adc	r7, r19
    9212:	46 0e       	add	r4, r22
    9214:	57 1e       	adc	r5, r23
    9216:	68 1e       	adc	r6, r24
    9218:	79 1e       	adc	r7, r25
    921a:	16 e0       	ldi	r17, 0x06	; 6
    921c:	75 94       	asr	r7
    921e:	67 94       	ror	r6
    9220:	57 94       	ror	r5
    9222:	47 94       	ror	r4
    9224:	1a 95       	dec	r17
    9226:	d1 f7       	brne	.-12     	; 0x921c <Calculate_PID+0x4aa>
    9228:	17 96       	adiw	r26, 0x07	; 7
    922a:	5c 92       	st	X, r5
    922c:	4e 92       	st	-X, r4
    922e:	16 97       	sbiw	r26, 0x06	; 6

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    9230:	6e 96       	adiw	r28, 0x1e	; 30
    9232:	ef ad       	ldd	r30, Y+63	; 0x3f
    9234:	6e 97       	sbiw	r28, 0x1e	; 30
    9236:	e2 30       	cpi	r30, 0x02	; 2
    9238:	e1 f1       	breq	.+120    	; 0x92b2 <Calculate_PID+0x540>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    923a:	af a5       	ldd	r26, Y+47	; 0x2f
    923c:	b8 a9       	ldd	r27, Y+48	; 0x30
    923e:	4d 91       	ld	r20, X+
    9240:	5c 91       	ld	r21, X
    9242:	ed a1       	ldd	r30, Y+37	; 0x25
    9244:	fe a1       	ldd	r31, Y+38	; 0x26
    9246:	80 81       	ld	r24, Z
    9248:	91 81       	ldd	r25, Z+1	; 0x01
    924a:	9a 01       	movw	r18, r20
    924c:	28 1b       	sub	r18, r24
    924e:	39 0b       	sbc	r19, r25
    9250:	ef e0       	ldi	r30, 0x0F	; 15
    9252:	f0 e0       	ldi	r31, 0x00	; 0
    9254:	ec 0f       	add	r30, r28
    9256:	fd 1f       	adc	r31, r29
    9258:	e2 0d       	add	r30, r2
    925a:	f3 1d       	adc	r31, r3
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    925c:	a0 81       	ld	r26, Z
    925e:	bb 27       	eor	r27, r27
    9260:	a7 fd       	sbrc	r26, 7
    9262:	b0 95       	com	r27
    9264:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    9268:	bb 27       	eor	r27, r27
    926a:	97 fd       	sbrc	r25, 7
    926c:	ba 95       	dec	r27
    926e:	a9 2f       	mov	r26, r25
    9270:	98 2f       	mov	r25, r24
    9272:	87 2f       	mov	r24, r23
    9274:	eb a1       	ldd	r30, Y+35	; 0x23
    9276:	fc a1       	ldd	r31, Y+36	; 0x24
    9278:	91 83       	std	Z+1, r25	; 0x01
    927a:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    927c:	ad a1       	ldd	r26, Y+37	; 0x25
    927e:	be a1       	ldd	r27, Y+38	; 0x26
    9280:	14 96       	adiw	r26, 0x04	; 4
    9282:	8d 91       	ld	r24, X+
    9284:	9c 91       	ld	r25, X
    9286:	15 97       	sbiw	r26, 0x05	; 5
    9288:	9a 01       	movw	r18, r20
    928a:	28 1b       	sub	r18, r24
    928c:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    928e:	ed a5       	ldd	r30, Y+45	; 0x2d
    9290:	fe a5       	ldd	r31, Y+46	; 0x2e
    9292:	a0 81       	ld	r26, Z
    9294:	bb 27       	eor	r27, r27
    9296:	a7 fd       	sbrc	r26, 7
    9298:	b0 95       	com	r27
    929a:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    929e:	bb 27       	eor	r27, r27
    92a0:	97 fd       	sbrc	r25, 7
    92a2:	ba 95       	dec	r27
    92a4:	a9 2f       	mov	r26, r25
    92a6:	98 2f       	mov	r25, r24
    92a8:	87 2f       	mov	r24, r23
    92aa:	eb a1       	ldd	r30, Y+35	; 0x23
    92ac:	fc a1       	ldd	r31, Y+36	; 0x24
    92ae:	97 83       	std	Z+7, r25	; 0x07
    92b0:	86 83       	std	Z+6, r24	; 0x06
    92b2:	ff ef       	ldi	r31, 0xFF	; 255
    92b4:	2f 1a       	sub	r2, r31
    92b6:	3f 0a       	sbc	r3, r31
    92b8:	2b a5       	ldd	r18, Y+43	; 0x2b
    92ba:	3c a5       	ldd	r19, Y+44	; 0x2c
    92bc:	2c 5f       	subi	r18, 0xFC	; 252
    92be:	3f 4f       	sbci	r19, 0xFF	; 255
    92c0:	3c a7       	std	Y+44, r19	; 0x2c
    92c2:	2b a7       	std	Y+43, r18	; 0x2b
    92c4:	49 a5       	ldd	r20, Y+41	; 0x29
    92c6:	5a a5       	ldd	r21, Y+42	; 0x2a
    92c8:	4c 5f       	subi	r20, 0xFC	; 252
    92ca:	5f 4f       	sbci	r21, 0xFF	; 255
    92cc:	5a a7       	std	Y+42, r21	; 0x2a
    92ce:	49 a7       	std	Y+41, r20	; 0x29
    92d0:	8f a1       	ldd	r24, Y+39	; 0x27
    92d2:	98 a5       	ldd	r25, Y+40	; 0x28
    92d4:	02 96       	adiw	r24, 0x02	; 2
    92d6:	98 a7       	std	Y+40, r25	; 0x28
    92d8:	8f a3       	std	Y+39, r24	; 0x27
    92da:	af a5       	ldd	r26, Y+47	; 0x2f
    92dc:	b8 a9       	ldd	r27, Y+48	; 0x30
    92de:	12 96       	adiw	r26, 0x02	; 2
    92e0:	b8 ab       	std	Y+48, r27	; 0x30
    92e2:	af a7       	std	Y+47, r26	; 0x2f
    92e4:	ed a1       	ldd	r30, Y+37	; 0x25
    92e6:	fe a1       	ldd	r31, Y+38	; 0x26
    92e8:	32 96       	adiw	r30, 0x02	; 2
    92ea:	fe a3       	std	Y+38, r31	; 0x26
    92ec:	ed a3       	std	Y+37, r30	; 0x25
    92ee:	2b a1       	ldd	r18, Y+35	; 0x23
    92f0:	3c a1       	ldd	r19, Y+36	; 0x24
    92f2:	2e 5f       	subi	r18, 0xFE	; 254
    92f4:	3f 4f       	sbci	r19, 0xFF	; 255
    92f6:	3c a3       	std	Y+36, r19	; 0x24
    92f8:	2b a3       	std	Y+35, r18	; 0x23
    92fa:	4d a5       	ldd	r20, Y+45	; 0x2d
    92fc:	5e a5       	ldd	r21, Y+46	; 0x2e
    92fe:	4f 5f       	subi	r20, 0xFF	; 255
    9300:	5f 4f       	sbci	r21, 0xFF	; 255
    9302:	5e a7       	std	Y+46, r21	; 0x2e
    9304:	4d a7       	std	Y+45, r20	; 0x2d
    9306:	89 a1       	ldd	r24, Y+33	; 0x21
    9308:	9a a1       	ldd	r25, Y+34	; 0x22
    930a:	04 96       	adiw	r24, 0x04	; 4
    930c:	9a a3       	std	Y+34, r25	; 0x22
    930e:	89 a3       	std	Y+33, r24	; 0x21

	//************************************************************
	// PID loop
	//************************************************************
	
	for (axis = 0; axis <= YAW; axis ++)
    9310:	93 e0       	ldi	r25, 0x03	; 3
    9312:	29 16       	cp	r2, r25
    9314:	31 04       	cpc	r3, r1
    9316:	09 f0       	breq	.+2      	; 0x931a <Calculate_PID+0x5a8>
    9318:	33 ce       	rjmp	.-922    	; 0x8f80 <Calculate_PID+0x20e>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    931a:	6b 96       	adiw	r28, 0x1b	; 27
    931c:	4e ad       	ldd	r20, Y+62	; 0x3e
    931e:	5f ad       	ldd	r21, Y+63	; 0x3f
    9320:	6b 97       	sbiw	r28, 0x1b	; 27
    9322:	51 95       	neg	r21
    9324:	41 95       	neg	r20
    9326:	51 09       	sbc	r21, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    9328:	9a 01       	movw	r18, r20
    932a:	ef a9       	ldd	r30, Y+55	; 0x37
    932c:	ae 2f       	mov	r26, r30
    932e:	bb 27       	eor	r27, r27
    9330:	a7 fd       	sbrc	r26, 7
    9332:	b0 95       	com	r27
    9334:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    9338:	e4 e0       	ldi	r30, 0x04	; 4
    933a:	95 95       	asr	r25
    933c:	87 95       	ror	r24
    933e:	77 95       	ror	r23
    9340:	67 95       	ror	r22
    9342:	ea 95       	dec	r30
    9344:	d1 f7       	brne	.-12     	; 0x933a <Calculate_PID+0x5c8>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    9346:	65 3f       	cpi	r22, 0xF5	; 245
    9348:	f1 e0       	ldi	r31, 0x01	; 1
    934a:	7f 07       	cpc	r23, r31
    934c:	81 05       	cpc	r24, r1
    934e:	91 05       	cpc	r25, r1
    9350:	64 f4       	brge	.+24     	; 0x936a <Calculate_PID+0x5f8>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    9352:	6c 30       	cpi	r22, 0x0C	; 12
    9354:	2e ef       	ldi	r18, 0xFE	; 254
    9356:	72 07       	cpc	r23, r18
    9358:	2f ef       	ldi	r18, 0xFF	; 255
    935a:	82 07       	cpc	r24, r18
    935c:	92 07       	cpc	r25, r18
    935e:	4c f4       	brge	.+18     	; 0x9372 <Calculate_PID+0x600>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    9360:	6c e0       	ldi	r22, 0x0C	; 12
    9362:	7e ef       	ldi	r23, 0xFE	; 254
    9364:	8f ef       	ldi	r24, 0xFF	; 255
    9366:	9f ef       	ldi	r25, 0xFF	; 255
    9368:	04 c0       	rjmp	.+8      	; 0x9372 <Calculate_PID+0x600>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    936a:	64 ef       	ldi	r22, 0xF4	; 244
    936c:	71 e0       	ldi	r23, 0x01	; 1
    936e:	80 e0       	ldi	r24, 0x00	; 0
    9370:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    9372:	70 93 68 08 	sts	0x0868, r23
    9376:	60 93 67 08 	sts	0x0867, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    937a:	9a 01       	movw	r18, r20
    937c:	48 ad       	ldd	r20, Y+56	; 0x38
    937e:	a4 2f       	mov	r26, r20
    9380:	bb 27       	eor	r27, r27
    9382:	a7 fd       	sbrc	r26, 7
    9384:	b0 95       	com	r27
    9386:	0e 94 7e 4f 	call	0x9efc	; 0x9efc <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    938a:	54 e0       	ldi	r21, 0x04	; 4
    938c:	95 95       	asr	r25
    938e:	87 95       	ror	r24
    9390:	77 95       	ror	r23
    9392:	67 95       	ror	r22
    9394:	5a 95       	dec	r21
    9396:	d1 f7       	brne	.-12     	; 0x938c <Calculate_PID+0x61a>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    9398:	65 3f       	cpi	r22, 0xF5	; 245
    939a:	51 e0       	ldi	r21, 0x01	; 1
    939c:	75 07       	cpc	r23, r21
    939e:	81 05       	cpc	r24, r1
    93a0:	91 05       	cpc	r25, r1
    93a2:	64 f4       	brge	.+24     	; 0x93bc <Calculate_PID+0x64a>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    93a4:	6c 30       	cpi	r22, 0x0C	; 12
    93a6:	ae ef       	ldi	r26, 0xFE	; 254
    93a8:	7a 07       	cpc	r23, r26
    93aa:	af ef       	ldi	r26, 0xFF	; 255
    93ac:	8a 07       	cpc	r24, r26
    93ae:	9a 07       	cpc	r25, r26
    93b0:	4c f4       	brge	.+18     	; 0x93c4 <Calculate_PID+0x652>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    93b2:	6c e0       	ldi	r22, 0x0C	; 12
    93b4:	7e ef       	ldi	r23, 0xFE	; 254
    93b6:	8f ef       	ldi	r24, 0xFF	; 255
    93b8:	9f ef       	ldi	r25, 0xFF	; 255
    93ba:	04 c0       	rjmp	.+8      	; 0x93c4 <Calculate_PID+0x652>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    93bc:	64 ef       	ldi	r22, 0xF4	; 244
    93be:	71 e0       	ldi	r23, 0x01	; 1
    93c0:	80 e0       	ldi	r24, 0x00	; 0
    93c2:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    93c4:	70 93 6e 08 	sts	0x086E, r23
    93c8:	60 93 6d 08 	sts	0x086D, r22
	}
}
    93cc:	c3 5a       	subi	r28, 0xA3	; 163
    93ce:	df 4f       	sbci	r29, 0xFF	; 255
    93d0:	0f b6       	in	r0, 0x3f	; 63
    93d2:	f8 94       	cli
    93d4:	de bf       	out	0x3e, r29	; 62
    93d6:	0f be       	out	0x3f, r0	; 63
    93d8:	cd bf       	out	0x3d, r28	; 61
    93da:	df 91       	pop	r29
    93dc:	cf 91       	pop	r28
    93de:	1f 91       	pop	r17
    93e0:	0f 91       	pop	r16
    93e2:	ff 90       	pop	r15
    93e4:	ef 90       	pop	r14
    93e6:	df 90       	pop	r13
    93e8:	cf 90       	pop	r12
    93ea:	bf 90       	pop	r11
    93ec:	af 90       	pop	r10
    93ee:	9f 90       	pop	r9
    93f0:	8f 90       	pop	r8
    93f2:	7f 90       	pop	r7
    93f4:	6f 90       	pop	r6
    93f6:	5f 90       	pop	r5
    93f8:	4f 90       	pop	r4
    93fa:	3f 90       	pop	r3
    93fc:	2f 90       	pop	r2
    93fe:	08 95       	ret

00009400 <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    9400:	eb e9       	ldi	r30, 0x9B	; 155
    9402:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    9404:	80 e0       	ldi	r24, 0x00	; 0
    9406:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    9408:	ac 01       	movw	r20, r24
    940a:	44 0f       	add	r20, r20
    940c:	55 1f       	adc	r21, r21
    940e:	da 01       	movw	r26, r20
    9410:	ae 51       	subi	r26, 0x1E	; 30
    9412:	b8 4f       	sbci	r27, 0xF8	; 248
    9414:	2d 91       	ld	r18, X+
    9416:	3c 91       	ld	r19, X
    9418:	61 91       	ld	r22, Z+
    941a:	71 91       	ld	r23, Z+
    941c:	26 1b       	sub	r18, r22
    941e:	37 0b       	sbc	r19, r23
    9420:	da 01       	movw	r26, r20
    9422:	a7 57       	subi	r26, 0x77	; 119
    9424:	b7 4f       	sbci	r27, 0xF7	; 247
    9426:	11 96       	adiw	r26, 0x01	; 1
    9428:	3c 93       	st	X, r19
    942a:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    942c:	01 96       	adiw	r24, 0x01	; 1
    942e:	88 30       	cpi	r24, 0x08	; 8
    9430:	91 05       	cpc	r25, r1
    9432:	51 f7       	brne	.-44     	; 0x9408 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    9434:	80 91 e2 07 	lds	r24, 0x07E2
    9438:	90 91 e3 07 	lds	r25, 0x07E3
    943c:	20 91 9b 07 	lds	r18, 0x079B
    9440:	30 91 9c 07 	lds	r19, 0x079C
    9444:	82 1b       	sub	r24, r18
    9446:	93 0b       	sbc	r25, r19
    9448:	90 93 88 08 	sts	0x0888, r25
    944c:	80 93 87 08 	sts	0x0887, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    9450:	80 91 e2 07 	lds	r24, 0x07E2
    9454:	90 91 e3 07 	lds	r25, 0x07E3
    9458:	86 5a       	subi	r24, 0xA6	; 166
    945a:	9e 40       	sbci	r25, 0x0E	; 14
    945c:	90 93 8a 08 	sts	0x088A, r25
    9460:	80 93 89 08 	sts	0x0889, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    9464:	80 91 ca 07 	lds	r24, 0x07CA
    9468:	81 30       	cpi	r24, 0x01	; 1
    946a:	59 f4       	brne	.+22     	; 0x9482 <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    946c:	80 91 8b 08 	lds	r24, 0x088B
    9470:	90 91 8c 08 	lds	r25, 0x088C
    9474:	91 95       	neg	r25
    9476:	81 95       	neg	r24
    9478:	91 09       	sbc	r25, r1
    947a:	90 93 8c 08 	sts	0x088C, r25
    947e:	80 93 8b 08 	sts	0x088B, r24
	}

	if (Config.ElevatorPol == REVERSED)
    9482:	80 91 cb 07 	lds	r24, 0x07CB
    9486:	81 30       	cpi	r24, 0x01	; 1
    9488:	59 f4       	brne	.+22     	; 0x94a0 <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    948a:	80 91 8d 08 	lds	r24, 0x088D
    948e:	90 91 8e 08 	lds	r25, 0x088E
    9492:	91 95       	neg	r25
    9494:	81 95       	neg	r24
    9496:	91 09       	sbc	r25, r1
    9498:	90 93 8e 08 	sts	0x088E, r25
    949c:	80 93 8d 08 	sts	0x088D, r24
	}

	if (Config.RudderPol == REVERSED)
    94a0:	80 91 c9 07 	lds	r24, 0x07C9
    94a4:	81 30       	cpi	r24, 0x01	; 1
    94a6:	59 f4       	brne	.+22     	; 0x94be <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    94a8:	80 91 8f 08 	lds	r24, 0x088F
    94ac:	90 91 90 08 	lds	r25, 0x0890
    94b0:	91 95       	neg	r25
    94b2:	81 95       	neg	r24
    94b4:	91 09       	sbc	r25, r1
    94b6:	90 93 90 08 	sts	0x0890, r25
    94ba:	80 93 8f 08 	sts	0x088F, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    94be:	80 91 8b 08 	lds	r24, 0x088B
    94c2:	90 91 8c 08 	lds	r25, 0x088C
    94c6:	40 91 8d 08 	lds	r20, 0x088D
    94ca:	50 91 8e 08 	lds	r21, 0x088E
    94ce:	20 91 8f 08 	lds	r18, 0x088F
    94d2:	30 91 90 08 	lds	r19, 0x0890
    94d6:	84 0f       	add	r24, r20
    94d8:	95 1f       	adc	r25, r21
    94da:	82 0f       	add	r24, r18
    94dc:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    94de:	20 91 3c 05 	lds	r18, 0x053C
    94e2:	30 91 3d 05 	lds	r19, 0x053D
    94e6:	ac 01       	movw	r20, r24
    94e8:	42 1b       	sub	r20, r18
    94ea:	53 0b       	sbc	r21, r19
    94ec:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    94ee:	2b 5f       	subi	r18, 0xFB	; 251
    94f0:	3f 4f       	sbci	r19, 0xFF	; 255
    94f2:	2b 30       	cpi	r18, 0x0B	; 11
    94f4:	31 05       	cpc	r19, r1
    94f6:	38 f4       	brcc	.+14     	; 0x9506 <RxGetChannels+0x106>
    94f8:	20 91 87 08 	lds	r18, 0x0887
    94fc:	30 91 88 08 	lds	r19, 0x0888
    9500:	23 33       	cpi	r18, 0x33	; 51
    9502:	31 05       	cpc	r19, r1
    9504:	24 f0       	brlt	.+8      	; 0x950e <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    9506:	20 91 1f 05 	lds	r18, 0x051F
    950a:	21 60       	ori	r18, 0x01	; 1
    950c:	03 c0       	rjmp	.+6      	; 0x9514 <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    950e:	20 91 1f 05 	lds	r18, 0x051F
    9512:	2e 7f       	andi	r18, 0xFE	; 254
    9514:	20 93 1f 05 	sts	0x051F, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    9518:	10 92 9a 08 	sts	0x089A, r1
    951c:	10 92 99 08 	sts	0x0899, r1

	OldRxSum = RxSum;
    9520:	90 93 3d 05 	sts	0x053D, r25
    9524:	80 93 3c 05 	sts	0x053C, r24
    9528:	08 95       	ret

0000952a <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    952a:	0f 93       	push	r16
    952c:	1f 93       	push	r17
    952e:	cf 93       	push	r28
    9530:	df 93       	push	r29
    9532:	cd b7       	in	r28, 0x3d	; 61
    9534:	de b7       	in	r29, 0x3e	; 62
    9536:	60 97       	sbiw	r28, 0x10	; 16
    9538:	0f b6       	in	r0, 0x3f	; 63
    953a:	f8 94       	cli
    953c:	de bf       	out	0x3e, r29	; 62
    953e:	0f be       	out	0x3f, r0	; 63
    9540:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    9542:	8e 01       	movw	r16, r28
    9544:	0f 5f       	subi	r16, 0xFF	; 255
    9546:	1f 4f       	sbci	r17, 0xFF	; 255
    9548:	80 e1       	ldi	r24, 0x10	; 16
    954a:	d8 01       	movw	r26, r16
    954c:	1d 92       	st	X+, r1
    954e:	8a 95       	dec	r24
    9550:	e9 f7       	brne	.-6      	; 0x954c <CenterSticks+0x22>
    9552:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    9554:	d8 01       	movw	r26, r16
    9556:	80 e0       	ldi	r24, 0x00	; 0
    9558:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    955a:	9c 01       	movw	r18, r24
    955c:	22 0f       	add	r18, r18
    955e:	33 1f       	adc	r19, r19
    9560:	2e 51       	subi	r18, 0x1E	; 30
    9562:	38 4f       	sbci	r19, 0xF8	; 248
    9564:	f9 01       	movw	r30, r18
    9566:	40 81       	ld	r20, Z
    9568:	51 81       	ldd	r21, Z+1	; 0x01
    956a:	2d 91       	ld	r18, X+
    956c:	3c 91       	ld	r19, X
    956e:	11 97       	sbiw	r26, 0x01	; 1
    9570:	24 0f       	add	r18, r20
    9572:	35 1f       	adc	r19, r21
    9574:	2d 93       	st	X+, r18
    9576:	3d 93       	st	X+, r19
    9578:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    957a:	88 30       	cpi	r24, 0x08	; 8
    957c:	91 05       	cpc	r25, r1
    957e:	69 f7       	brne	.-38     	; 0x955a <CenterSticks+0x30>
    9580:	ff e7       	ldi	r31, 0x7F	; 127
    9582:	2a e1       	ldi	r18, 0x1A	; 26
    9584:	86 e0       	ldi	r24, 0x06	; 6
    9586:	f1 50       	subi	r31, 0x01	; 1
    9588:	20 40       	sbci	r18, 0x00	; 0
    958a:	80 40       	sbci	r24, 0x00	; 0
    958c:	e1 f7       	brne	.-8      	; 0x9586 <CenterSticks+0x5c>
    958e:	00 c0       	rjmp	.+0      	; 0x9590 <CenterSticks+0x66>
    9590:	00 00       	nop
    9592:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    9594:	f9 f6       	brne	.-66     	; 0x9554 <CenterSticks+0x2a>
    9596:	ab e9       	ldi	r26, 0x9B	; 155
    9598:	b7 e0       	ldi	r27, 0x07	; 7
    959a:	9e 01       	movw	r18, r28
    959c:	2f 5e       	subi	r18, 0xEF	; 239
    959e:	3f 4f       	sbci	r19, 0xFF	; 255
    95a0:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    95a2:	81 91       	ld	r24, Z+
    95a4:	91 91       	ld	r25, Z+
    95a6:	04 96       	adiw	r24, 0x04	; 4
    95a8:	43 e0       	ldi	r20, 0x03	; 3
    95aa:	96 95       	lsr	r25
    95ac:	87 95       	ror	r24
    95ae:	4a 95       	dec	r20
    95b0:	e1 f7       	brne	.-8      	; 0x95aa <CenterSticks+0x80>
    95b2:	8d 93       	st	X+, r24
    95b4:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    95b6:	e2 17       	cp	r30, r18
    95b8:	f3 07       	cpc	r31, r19
    95ba:	99 f7       	brne	.-26     	; 0x95a2 <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    95bc:	60 96       	adiw	r28, 0x10	; 16
    95be:	0f b6       	in	r0, 0x3f	; 63
    95c0:	f8 94       	cli
    95c2:	de bf       	out	0x3e, r29	; 62
    95c4:	0f be       	out	0x3f, r0	; 63
    95c6:	cd bf       	out	0x3d, r28	; 61
    95c8:	df 91       	pop	r29
    95ca:	cf 91       	pop	r28
    95cc:	1f 91       	pop	r17
    95ce:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    95d0:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <Save_Config_to_EEPROM>

000095d4 <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    95d4:	8f 92       	push	r8
    95d6:	9f 92       	push	r9
    95d8:	af 92       	push	r10
    95da:	bf 92       	push	r11
    95dc:	df 92       	push	r13
    95de:	ef 92       	push	r14
    95e0:	ff 92       	push	r15
    95e2:	0f 93       	push	r16
    95e4:	1f 93       	push	r17
    95e6:	cf 93       	push	r28
    95e8:	df 93       	push	r29
    95ea:	d8 2e       	mov	r13, r24
    95ec:	07 e5       	ldi	r16, 0x57	; 87
    95ee:	16 e0       	ldi	r17, 0x06	; 6
    95f0:	c0 e0       	ldi	r28, 0x00	; 0
    95f2:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    95f4:	ea e0       	ldi	r30, 0x0A	; 10
    95f6:	8e 2e       	mov	r8, r30
    95f8:	91 2c       	mov	r9, r1
    95fa:	a1 2c       	mov	r10, r1
    95fc:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    95fe:	7e 01       	movw	r14, r28
    9600:	ee 0c       	add	r14, r14
    9602:	ff 1c       	adc	r15, r15
    9604:	f7 01       	movw	r30, r14
    9606:	e5 56       	subi	r30, 0x65	; 101
    9608:	f7 4f       	sbci	r31, 0xF7	; 247
    960a:	20 81       	ld	r18, Z
    960c:	31 81       	ldd	r19, Z+1	; 0x01
    960e:	a9 01       	movw	r20, r18
    9610:	60 e0       	ldi	r22, 0x00	; 0
    9612:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    9614:	f8 01       	movw	r30, r16
    9616:	80 81       	ld	r24, Z
    9618:	82 30       	cpi	r24, 0x02	; 2
    961a:	79 f0       	breq	.+30     	; 0x963a <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    961c:	9a 01       	movw	r18, r20
    961e:	ab 01       	movw	r20, r22
    9620:	26 5a       	subi	r18, 0xA6	; 166
    9622:	3e 40       	sbci	r19, 0x0E	; 14
    9624:	41 09       	sbc	r20, r1
    9626:	51 09       	sbc	r21, r1
    9628:	56 95       	lsr	r21
    962a:	47 95       	ror	r20
    962c:	37 95       	ror	r19
    962e:	27 95       	ror	r18
    9630:	24 52       	subi	r18, 0x24	; 36
    9632:	3a 4f       	sbci	r19, 0xFA	; 250
    9634:	4f 4f       	sbci	r20, 0xFF	; 255
    9636:	5f 4f       	sbci	r21, 0xFF	; 255
    9638:	11 c0       	rjmp	.+34     	; 0x965c <output_servo_ppm+0x88>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    963a:	cb 01       	movw	r24, r22
    963c:	ba 01       	movw	r22, r20
    963e:	52 e0       	ldi	r21, 0x02	; 2
    9640:	66 0f       	add	r22, r22
    9642:	77 1f       	adc	r23, r23
    9644:	88 1f       	adc	r24, r24
    9646:	99 1f       	adc	r25, r25
    9648:	5a 95       	dec	r21
    964a:	d1 f7       	brne	.-12     	; 0x9640 <output_servo_ppm+0x6c>
    964c:	6b 5f       	subi	r22, 0xFB	; 251
    964e:	7f 4f       	sbci	r23, 0xFF	; 255
    9650:	8f 4f       	sbci	r24, 0xFF	; 255
    9652:	9f 4f       	sbci	r25, 0xFF	; 255
    9654:	a5 01       	movw	r20, r10
    9656:	94 01       	movw	r18, r8
    9658:	0e 94 37 4f 	call	0x9e6e	; 0x9e6e <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    965c:	f7 01       	movw	r30, r14
    965e:	e5 56       	subi	r30, 0x65	; 101
    9660:	f7 4f       	sbci	r31, 0xF7	; 247
    9662:	31 83       	std	Z+1, r19	; 0x01
    9664:	20 83       	st	Z, r18
    9666:	21 96       	adiw	r28, 0x01	; 1
    9668:	0a 5d       	subi	r16, 0xDA	; 218
    966a:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    966c:	c8 30       	cpi	r28, 0x08	; 8
    966e:	d1 05       	cpc	r29, r1
    9670:	31 f6       	brne	.-116    	; 0x95fe <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    9672:	80 91 e2 07 	lds	r24, 0x07E2
    9676:	90 91 e3 07 	lds	r25, 0x07E3
    967a:	20 91 9b 07 	lds	r18, 0x079B
    967e:	30 91 9c 07 	lds	r19, 0x079C
    9682:	82 1b       	sub	r24, r18
    9684:	93 0b       	sbc	r25, r19
    9686:	90 93 88 08 	sts	0x0888, r25
    968a:	80 93 87 08 	sts	0x0887, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    968e:	80 91 87 08 	lds	r24, 0x0887
    9692:	90 91 88 08 	lds	r25, 0x0888
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    9696:	c2 97       	sbiw	r24, 0x32	; 50
    9698:	ac f0       	brlt	.+42     	; 0x96c4 <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    969a:	80 91 20 05 	lds	r24, 0x0520
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    969e:	82 fd       	sbrc	r24, 2
    96a0:	11 c0       	rjmp	.+34     	; 0x96c4 <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    96a2:	80 91 20 05 	lds	r24, 0x0520
    96a6:	80 fd       	sbrc	r24, 0
    96a8:	24 c0       	rjmp	.+72     	; 0x96f2 <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    96aa:	10 92 0d 08 	sts	0x080D, r1
	
		// We now care about interrupts
		JitterGate = true;
    96ae:	81 e0       	ldi	r24, 0x01	; 1
    96b0:	80 93 0c 08 	sts	0x080C, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    96b4:	6d 2d       	mov	r22, r13
    96b6:	8b e9       	ldi	r24, 0x9B	; 155
    96b8:	98 e0       	ldi	r25, 0x08	; 8
    96ba:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    96be:	10 92 0c 08 	sts	0x080C, r1
    96c2:	17 c0       	rjmp	.+46     	; 0x96f2 <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    96c4:	e7 e5       	ldi	r30, 0x57	; 87
    96c6:	f6 e0       	ldi	r31, 0x06	; 6
    96c8:	80 e0       	ldi	r24, 0x00	; 0
    96ca:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    96cc:	28 ee       	ldi	r18, 0xE8	; 232
    96ce:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    96d0:	40 81       	ld	r20, Z
    96d2:	42 30       	cpi	r20, 0x02	; 2
    96d4:	41 f4       	brne	.+16     	; 0x96e6 <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    96d6:	dc 01       	movw	r26, r24
    96d8:	aa 0f       	add	r26, r26
    96da:	bb 1f       	adc	r27, r27
    96dc:	a5 56       	subi	r26, 0x65	; 101
    96de:	b7 4f       	sbci	r27, 0xF7	; 247
    96e0:	11 96       	adiw	r26, 0x01	; 1
    96e2:	3c 93       	st	X, r19
    96e4:	2e 93       	st	-X, r18
    96e6:	01 96       	adiw	r24, 0x01	; 1
    96e8:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    96ea:	88 30       	cpi	r24, 0x08	; 8
    96ec:	91 05       	cpc	r25, r1
    96ee:	81 f7       	brne	.-32     	; 0x96d0 <output_servo_ppm+0xfc>
    96f0:	d8 cf       	rjmp	.-80     	; 0x96a2 <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    96f2:	df 91       	pop	r29
    96f4:	cf 91       	pop	r28
    96f6:	1f 91       	pop	r17
    96f8:	0f 91       	pop	r16
    96fa:	ff 90       	pop	r15
    96fc:	ef 90       	pop	r14
    96fe:	df 90       	pop	r13
    9700:	bf 90       	pop	r11
    9702:	af 90       	pop	r10
    9704:	9f 90       	pop	r9
    9706:	8f 90       	pop	r8
    9708:	08 95       	ret

0000970a <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    970a:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    970e:	81 e1       	ldi	r24, 0x11	; 17
    9710:	80 93 b8 00 	sts	0x00B8, r24
    9714:	08 95       	ret

00009716 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9716:	94 ea       	ldi	r25, 0xA4	; 164
    9718:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    971c:	4f ef       	ldi	r20, 0xFF	; 255
    971e:	50 e0       	ldi	r21, 0x00	; 0
    9720:	60 e0       	ldi	r22, 0x00	; 0
    9722:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9724:	90 91 bc 00 	lds	r25, 0x00BC
    9728:	97 fd       	sbrc	r25, 7
    972a:	06 c0       	rjmp	.+12     	; 0x9738 <i2c_start+0x22>
    972c:	41 50       	subi	r20, 0x01	; 1
    972e:	51 09       	sbc	r21, r1
    9730:	61 09       	sbc	r22, r1
    9732:	71 09       	sbc	r23, r1
    9734:	b8 f7       	brcc	.-18     	; 0x9724 <i2c_start+0xe>
    9736:	06 c0       	rjmp	.+12     	; 0x9744 <i2c_start+0x2e>
	if(i2c_timer == 0)
    9738:	45 2b       	or	r20, r21
    973a:	46 2b       	or	r20, r22
    973c:	47 2b       	or	r20, r23
    973e:	11 f4       	brne	.+4      	; 0x9744 <i2c_start+0x2e>
		return 1;
    9740:	81 e0       	ldi	r24, 0x01	; 1
    9742:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    9744:	90 91 b9 00 	lds	r25, 0x00B9
    9748:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    974a:	98 30       	cpi	r25, 0x08	; 8
    974c:	11 f0       	breq	.+4      	; 0x9752 <i2c_start+0x3c>
    974e:	90 31       	cpi	r25, 0x10	; 16
    9750:	b9 f7       	brne	.-18     	; 0x9740 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    9752:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    9756:	84 e8       	ldi	r24, 0x84	; 132
    9758:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    975c:	8f ef       	ldi	r24, 0xFF	; 255
    975e:	90 e0       	ldi	r25, 0x00	; 0
    9760:	a0 e0       	ldi	r26, 0x00	; 0
    9762:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9764:	20 91 bc 00 	lds	r18, 0x00BC
    9768:	27 fd       	sbrc	r18, 7
    976a:	05 c0       	rjmp	.+10     	; 0x9776 <i2c_start+0x60>
    976c:	01 97       	sbiw	r24, 0x01	; 1
    976e:	a1 09       	sbc	r26, r1
    9770:	b1 09       	sbc	r27, r1
    9772:	c0 f7       	brcc	.-16     	; 0x9764 <i2c_start+0x4e>
    9774:	04 c0       	rjmp	.+8      	; 0x977e <i2c_start+0x68>
	if(i2c_timer == 0)
    9776:	89 2b       	or	r24, r25
    9778:	8a 2b       	or	r24, r26
    977a:	8b 2b       	or	r24, r27
    977c:	09 f3       	breq	.-62     	; 0x9740 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    977e:	80 91 b9 00 	lds	r24, 0x00B9
    9782:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    9784:	88 31       	cpi	r24, 0x18	; 24
    9786:	11 f0       	breq	.+4      	; 0x978c <i2c_start+0x76>
    9788:	80 34       	cpi	r24, 0x40	; 64
    978a:	d1 f6       	brne	.-76     	; 0x9740 <i2c_start+0x2a>

	return 0;
    978c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    978e:	08 95       	ret

00009790 <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9790:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    9792:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9794:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9796:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    979a:	20 e0       	ldi	r18, 0x00	; 0
    979c:	30 e0       	ldi	r19, 0x00	; 0
    979e:	90 91 bc 00 	lds	r25, 0x00BC
    97a2:	97 fd       	sbrc	r25, 7
    97a4:	06 c0       	rjmp	.+12     	; 0x97b2 <i2c_start_wait+0x22>
    97a6:	2f 5f       	subi	r18, 0xFF	; 255
    97a8:	3f 4f       	sbci	r19, 0xFF	; 255
    97aa:	21 15       	cp	r18, r1
    97ac:	91 e0       	ldi	r25, 0x01	; 1
    97ae:	39 07       	cpc	r19, r25
    97b0:	b1 f7       	brne	.-20     	; 0x979e <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    97b2:	90 91 b9 00 	lds	r25, 0x00B9
    97b6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    97b8:	98 30       	cpi	r25, 0x08	; 8
    97ba:	11 f0       	breq	.+4      	; 0x97c0 <i2c_start_wait+0x30>
    97bc:	90 31       	cpi	r25, 0x10	; 16
    97be:	59 f7       	brne	.-42     	; 0x9796 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    97c0:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    97c4:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    97c8:	20 e0       	ldi	r18, 0x00	; 0
    97ca:	30 e0       	ldi	r19, 0x00	; 0
    97cc:	90 91 bc 00 	lds	r25, 0x00BC
    97d0:	97 fd       	sbrc	r25, 7
    97d2:	06 c0       	rjmp	.+12     	; 0x97e0 <i2c_start_wait+0x50>
    97d4:	2f 5f       	subi	r18, 0xFF	; 255
    97d6:	3f 4f       	sbci	r19, 0xFF	; 255
    97d8:	21 15       	cp	r18, r1
    97da:	91 e0       	ldi	r25, 0x01	; 1
    97dc:	39 07       	cpc	r19, r25
    97de:	b1 f7       	brne	.-20     	; 0x97cc <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    97e0:	90 91 b9 00 	lds	r25, 0x00B9
    97e4:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    97e6:	90 32       	cpi	r25, 0x20	; 32
    97e8:	11 f0       	breq	.+4      	; 0x97ee <i2c_start_wait+0x5e>
    97ea:	98 35       	cpi	r25, 0x58	; 88
    97ec:	79 f4       	brne	.+30     	; 0x980c <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    97ee:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    97f2:	20 e0       	ldi	r18, 0x00	; 0
    97f4:	30 e0       	ldi	r19, 0x00	; 0
    97f6:	90 91 bc 00 	lds	r25, 0x00BC
    97fa:	94 ff       	sbrs	r25, 4
    97fc:	cc cf       	rjmp	.-104    	; 0x9796 <i2c_start_wait+0x6>
    97fe:	2f 5f       	subi	r18, 0xFF	; 255
    9800:	3f 4f       	sbci	r19, 0xFF	; 255
    9802:	21 15       	cp	r18, r1
    9804:	91 e0       	ldi	r25, 0x01	; 1
    9806:	39 07       	cpc	r19, r25
    9808:	b1 f7       	brne	.-20     	; 0x97f6 <i2c_start_wait+0x66>
    980a:	c5 cf       	rjmp	.-118    	; 0x9796 <i2c_start_wait+0x6>
    980c:	08 95       	ret

0000980e <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    980e:	0c 94 8b 4b 	jmp	0x9716	; 0x9716 <i2c_start>

00009812 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9812:	84 e9       	ldi	r24, 0x94	; 148
    9814:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    9818:	80 e0       	ldi	r24, 0x00	; 0
    981a:	90 e0       	ldi	r25, 0x00	; 0
    981c:	20 91 bc 00 	lds	r18, 0x00BC
    9820:	24 ff       	sbrs	r18, 4
    9822:	05 c0       	rjmp	.+10     	; 0x982e <i2c_stop+0x1c>
    9824:	01 96       	adiw	r24, 0x01	; 1
    9826:	81 15       	cp	r24, r1
    9828:	21 e0       	ldi	r18, 0x01	; 1
    982a:	92 07       	cpc	r25, r18
    982c:	b9 f7       	brne	.-18     	; 0x981c <i2c_stop+0xa>
    982e:	08 95       	ret

00009830 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    9830:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    9834:	84 e8       	ldi	r24, 0x84	; 132
    9836:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    983a:	8f ef       	ldi	r24, 0xFF	; 255
    983c:	90 e0       	ldi	r25, 0x00	; 0
    983e:	a0 e0       	ldi	r26, 0x00	; 0
    9840:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9842:	20 91 bc 00 	lds	r18, 0x00BC
    9846:	27 fd       	sbrc	r18, 7
    9848:	05 c0       	rjmp	.+10     	; 0x9854 <i2c_write+0x24>
    984a:	01 97       	sbiw	r24, 0x01	; 1
    984c:	a1 09       	sbc	r26, r1
    984e:	b1 09       	sbc	r27, r1
    9850:	c0 f7       	brcc	.-16     	; 0x9842 <i2c_write+0x12>
    9852:	04 c0       	rjmp	.+8      	; 0x985c <i2c_write+0x2c>
	if(i2c_timer == 0)
    9854:	89 2b       	or	r24, r25
    9856:	8a 2b       	or	r24, r26
    9858:	8b 2b       	or	r24, r27
    985a:	41 f0       	breq	.+16     	; 0x986c <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    985c:	90 91 b9 00 	lds	r25, 0x00B9
    9860:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    9862:	81 e0       	ldi	r24, 0x01	; 1
    9864:	98 32       	cpi	r25, 0x28	; 40
    9866:	19 f4       	brne	.+6      	; 0x986e <i2c_write+0x3e>
    9868:	80 e0       	ldi	r24, 0x00	; 0
    986a:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    986c:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    986e:	08 95       	ret

00009870 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    9870:	84 ec       	ldi	r24, 0xC4	; 196
    9872:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    9876:	8f ef       	ldi	r24, 0xFF	; 255
    9878:	90 e0       	ldi	r25, 0x00	; 0
    987a:	a0 e0       	ldi	r26, 0x00	; 0
    987c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    987e:	20 91 bc 00 	lds	r18, 0x00BC
    9882:	27 fd       	sbrc	r18, 7
    9884:	05 c0       	rjmp	.+10     	; 0x9890 <i2c_readAck+0x20>
    9886:	01 97       	sbiw	r24, 0x01	; 1
    9888:	a1 09       	sbc	r26, r1
    988a:	b1 09       	sbc	r27, r1
    988c:	c0 f7       	brcc	.-16     	; 0x987e <i2c_readAck+0xe>
    988e:	04 c0       	rjmp	.+8      	; 0x9898 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    9890:	89 2b       	or	r24, r25
    9892:	8a 2b       	or	r24, r26
    9894:	8b 2b       	or	r24, r27
    9896:	19 f0       	breq	.+6      	; 0x989e <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    9898:	80 91 bb 00 	lds	r24, 0x00BB
    989c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    989e:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    98a0:	08 95       	ret

000098a2 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    98a2:	84 e8       	ldi	r24, 0x84	; 132
    98a4:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    98a8:	8f ef       	ldi	r24, 0xFF	; 255
    98aa:	90 e0       	ldi	r25, 0x00	; 0
    98ac:	a0 e0       	ldi	r26, 0x00	; 0
    98ae:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    98b0:	20 91 bc 00 	lds	r18, 0x00BC
    98b4:	27 fd       	sbrc	r18, 7
    98b6:	05 c0       	rjmp	.+10     	; 0x98c2 <i2c_readNak+0x20>
    98b8:	01 97       	sbiw	r24, 0x01	; 1
    98ba:	a1 09       	sbc	r26, r1
    98bc:	b1 09       	sbc	r27, r1
    98be:	c0 f7       	brcc	.-16     	; 0x98b0 <i2c_readNak+0xe>
    98c0:	04 c0       	rjmp	.+8      	; 0x98ca <i2c_readNak+0x28>
	if(i2c_timer == 0)
    98c2:	89 2b       	or	r24, r25
    98c4:	8a 2b       	or	r24, r26
    98c6:	8b 2b       	or	r24, r27
    98c8:	19 f0       	breq	.+6      	; 0x98d0 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    98ca:	80 91 bb 00 	lds	r24, 0x00BB
    98ce:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    98d0:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    98d2:	08 95       	ret

000098d4 <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    98d4:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    98d6:	80 91 c1 00 	lds	r24, 0x00C1
    98da:	8f 77       	andi	r24, 0x7F	; 127
    98dc:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    98e0:	80 91 c0 00 	lds	r24, 0x00C0
    98e4:	87 ff       	sbrs	r24, 7
    98e6:	05 c0       	rjmp	.+10     	; 0x98f2 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    98e8:	80 91 c6 00 	lds	r24, 0x00C6
    98ec:	80 93 c2 00 	sts	0x00C2, r24
    98f0:	f7 cf       	rjmp	.-18     	; 0x98e0 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    98f2:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    98f6:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    98fa:	86 e0       	ldi	r24, 0x06	; 6
    98fc:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    9900:	80 91 ea 05 	lds	r24, 0x05EA
    9904:	82 30       	cpi	r24, 0x02	; 2
    9906:	a1 f0       	breq	.+40     	; 0x9930 <init_uart+0x5c>
    9908:	34 f4       	brge	.+12     	; 0x9916 <init_uart+0x42>
    990a:	87 fd       	sbrc	r24, 7
    990c:	4c c0       	rjmp	.+152    	; 0x99a6 <init_uart+0xd2>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    990e:	80 91 c1 00 	lds	r24, 0x00C1
    9912:	8f 7e       	andi	r24, 0xEF	; 239
    9914:	46 c0       	rjmp	.+140    	; 0x99a2 <init_uart+0xce>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    9916:	83 30       	cpi	r24, 0x03	; 3
    9918:	41 f1       	breq	.+80     	; 0x996a <init_uart+0x96>
    991a:	84 30       	cpi	r24, 0x04	; 4
    991c:	09 f0       	breq	.+2      	; 0x9920 <init_uart+0x4c>
    991e:	43 c0       	rjmp	.+134    	; 0x99a6 <init_uart+0xd2>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    9920:	90 91 c0 00 	lds	r25, 0x00C0
    9924:	9d 7f       	andi	r25, 0xFD	; 253
    9926:	90 93 c0 00 	sts	0x00C0, r25
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    992a:	10 92 c5 00 	sts	0x00C5, r1
    992e:	25 c0       	rjmp	.+74     	; 0x997a <init_uart+0xa6>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    9930:	80 91 c0 00 	lds	r24, 0x00C0
    9934:	82 60       	ori	r24, 0x02	; 2
    9936:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    993a:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    993e:	88 e1       	ldi	r24, 0x18	; 24
    9940:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    9944:	80 91 c1 00 	lds	r24, 0x00C1
    9948:	80 61       	ori	r24, 0x10	; 16
    994a:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    994e:	80 91 c2 00 	lds	r24, 0x00C2
    9952:	88 60       	ori	r24, 0x08	; 8
    9954:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    9958:	80 91 c2 00 	lds	r24, 0x00C2
    995c:	8f 7e       	andi	r24, 0xEF	; 239
    995e:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    9962:	80 91 c2 00 	lds	r24, 0x00C2
    9966:	80 62       	ori	r24, 0x20	; 32
    9968:	17 c0       	rjmp	.+46     	; 0x9998 <init_uart+0xc4>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    996a:	80 91 c0 00 	lds	r24, 0x00C0
    996e:	8d 7f       	andi	r24, 0xFD	; 253
    9970:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    9974:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    9978:	8a e0       	ldi	r24, 0x0A	; 10
    997a:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    997e:	80 91 c1 00 	lds	r24, 0x00C1
    9982:	80 61       	ori	r24, 0x10	; 16
    9984:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    9988:	80 91 c2 00 	lds	r24, 0x00C2
    998c:	87 7f       	andi	r24, 0xF7	; 247
    998e:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    9992:	80 91 c2 00 	lds	r24, 0x00C2
    9996:	8f 7e       	andi	r24, 0xEF	; 239
    9998:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    999c:	80 91 c1 00 	lds	r24, 0x00C1
    99a0:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    99a2:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    99a6:	78 94       	sei
    99a8:	08 95       	ret

000099aa <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    99aa:	83 e0       	ldi	r24, 0x03	; 3
    99ac:	0e 94 c0 11 	call	0x2380	; 0x2380 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    99b0:	80 91 78 00 	lds	r24, 0x0078
    99b4:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    99b8:	9c 01       	movw	r18, r24
    99ba:	36 95       	lsr	r19
    99bc:	27 95       	ror	r18
    99be:	ac 01       	movw	r20, r24
    99c0:	44 0f       	add	r20, r20
    99c2:	55 1f       	adc	r21, r21
    99c4:	24 0f       	add	r18, r20
    99c6:	35 1f       	adc	r19, r21
    99c8:	ac 01       	movw	r20, r24
    99ca:	74 e0       	ldi	r23, 0x04	; 4
    99cc:	56 95       	lsr	r21
    99ce:	47 95       	ror	r20
    99d0:	7a 95       	dec	r23
    99d2:	e1 f7       	brne	.-8      	; 0x99cc <GetVbat+0x22>
    99d4:	24 0f       	add	r18, r20
    99d6:	35 1f       	adc	r19, r21
    99d8:	e6 e0       	ldi	r30, 0x06	; 6
    99da:	96 95       	lsr	r25
    99dc:	87 95       	ror	r24
    99de:	ea 95       	dec	r30
    99e0:	e1 f7       	brne	.-8      	; 0x99da <GetVbat+0x30>

	return vBat;
}
    99e2:	82 0f       	add	r24, r18
    99e4:	93 1f       	adc	r25, r19
    99e6:	08 95       	ret

000099e8 <__subsf3>:
    99e8:	50 58       	subi	r21, 0x80	; 128

000099ea <__addsf3>:
    99ea:	bb 27       	eor	r27, r27
    99ec:	aa 27       	eor	r26, r26
    99ee:	0e d0       	rcall	.+28     	; 0x9a0c <__addsf3x>
    99f0:	75 c1       	rjmp	.+746    	; 0x9cdc <__fp_round>
    99f2:	66 d1       	rcall	.+716    	; 0x9cc0 <__fp_pscA>
    99f4:	30 f0       	brcs	.+12     	; 0x9a02 <__addsf3+0x18>
    99f6:	6b d1       	rcall	.+726    	; 0x9cce <__fp_pscB>
    99f8:	20 f0       	brcs	.+8      	; 0x9a02 <__addsf3+0x18>
    99fa:	31 f4       	brne	.+12     	; 0x9a08 <__addsf3+0x1e>
    99fc:	9f 3f       	cpi	r25, 0xFF	; 255
    99fe:	11 f4       	brne	.+4      	; 0x9a04 <__addsf3+0x1a>
    9a00:	1e f4       	brtc	.+6      	; 0x9a08 <__addsf3+0x1e>
    9a02:	5b c1       	rjmp	.+694    	; 0x9cba <__fp_nan>
    9a04:	0e f4       	brtc	.+2      	; 0x9a08 <__addsf3+0x1e>
    9a06:	e0 95       	com	r30
    9a08:	e7 fb       	bst	r30, 7
    9a0a:	51 c1       	rjmp	.+674    	; 0x9cae <__fp_inf>

00009a0c <__addsf3x>:
    9a0c:	e9 2f       	mov	r30, r25
    9a0e:	77 d1       	rcall	.+750    	; 0x9cfe <__fp_split3>
    9a10:	80 f3       	brcs	.-32     	; 0x99f2 <__addsf3+0x8>
    9a12:	ba 17       	cp	r27, r26
    9a14:	62 07       	cpc	r22, r18
    9a16:	73 07       	cpc	r23, r19
    9a18:	84 07       	cpc	r24, r20
    9a1a:	95 07       	cpc	r25, r21
    9a1c:	18 f0       	brcs	.+6      	; 0x9a24 <__addsf3x+0x18>
    9a1e:	71 f4       	brne	.+28     	; 0x9a3c <__addsf3x+0x30>
    9a20:	9e f5       	brtc	.+102    	; 0x9a88 <__addsf3x+0x7c>
    9a22:	8f c1       	rjmp	.+798    	; 0x9d42 <__fp_zero>
    9a24:	0e f4       	brtc	.+2      	; 0x9a28 <__addsf3x+0x1c>
    9a26:	e0 95       	com	r30
    9a28:	0b 2e       	mov	r0, r27
    9a2a:	ba 2f       	mov	r27, r26
    9a2c:	a0 2d       	mov	r26, r0
    9a2e:	0b 01       	movw	r0, r22
    9a30:	b9 01       	movw	r22, r18
    9a32:	90 01       	movw	r18, r0
    9a34:	0c 01       	movw	r0, r24
    9a36:	ca 01       	movw	r24, r20
    9a38:	a0 01       	movw	r20, r0
    9a3a:	11 24       	eor	r1, r1
    9a3c:	ff 27       	eor	r31, r31
    9a3e:	59 1b       	sub	r21, r25
    9a40:	99 f0       	breq	.+38     	; 0x9a68 <__addsf3x+0x5c>
    9a42:	59 3f       	cpi	r21, 0xF9	; 249
    9a44:	50 f4       	brcc	.+20     	; 0x9a5a <__addsf3x+0x4e>
    9a46:	50 3e       	cpi	r21, 0xE0	; 224
    9a48:	68 f1       	brcs	.+90     	; 0x9aa4 <__addsf3x+0x98>
    9a4a:	1a 16       	cp	r1, r26
    9a4c:	f0 40       	sbci	r31, 0x00	; 0
    9a4e:	a2 2f       	mov	r26, r18
    9a50:	23 2f       	mov	r18, r19
    9a52:	34 2f       	mov	r19, r20
    9a54:	44 27       	eor	r20, r20
    9a56:	58 5f       	subi	r21, 0xF8	; 248
    9a58:	f3 cf       	rjmp	.-26     	; 0x9a40 <__addsf3x+0x34>
    9a5a:	46 95       	lsr	r20
    9a5c:	37 95       	ror	r19
    9a5e:	27 95       	ror	r18
    9a60:	a7 95       	ror	r26
    9a62:	f0 40       	sbci	r31, 0x00	; 0
    9a64:	53 95       	inc	r21
    9a66:	c9 f7       	brne	.-14     	; 0x9a5a <__addsf3x+0x4e>
    9a68:	7e f4       	brtc	.+30     	; 0x9a88 <__addsf3x+0x7c>
    9a6a:	1f 16       	cp	r1, r31
    9a6c:	ba 0b       	sbc	r27, r26
    9a6e:	62 0b       	sbc	r22, r18
    9a70:	73 0b       	sbc	r23, r19
    9a72:	84 0b       	sbc	r24, r20
    9a74:	ba f0       	brmi	.+46     	; 0x9aa4 <__addsf3x+0x98>
    9a76:	91 50       	subi	r25, 0x01	; 1
    9a78:	a1 f0       	breq	.+40     	; 0x9aa2 <__addsf3x+0x96>
    9a7a:	ff 0f       	add	r31, r31
    9a7c:	bb 1f       	adc	r27, r27
    9a7e:	66 1f       	adc	r22, r22
    9a80:	77 1f       	adc	r23, r23
    9a82:	88 1f       	adc	r24, r24
    9a84:	c2 f7       	brpl	.-16     	; 0x9a76 <__addsf3x+0x6a>
    9a86:	0e c0       	rjmp	.+28     	; 0x9aa4 <__addsf3x+0x98>
    9a88:	ba 0f       	add	r27, r26
    9a8a:	62 1f       	adc	r22, r18
    9a8c:	73 1f       	adc	r23, r19
    9a8e:	84 1f       	adc	r24, r20
    9a90:	48 f4       	brcc	.+18     	; 0x9aa4 <__addsf3x+0x98>
    9a92:	87 95       	ror	r24
    9a94:	77 95       	ror	r23
    9a96:	67 95       	ror	r22
    9a98:	b7 95       	ror	r27
    9a9a:	f7 95       	ror	r31
    9a9c:	9e 3f       	cpi	r25, 0xFE	; 254
    9a9e:	08 f0       	brcs	.+2      	; 0x9aa2 <__addsf3x+0x96>
    9aa0:	b3 cf       	rjmp	.-154    	; 0x9a08 <__addsf3+0x1e>
    9aa2:	93 95       	inc	r25
    9aa4:	88 0f       	add	r24, r24
    9aa6:	08 f0       	brcs	.+2      	; 0x9aaa <__addsf3x+0x9e>
    9aa8:	99 27       	eor	r25, r25
    9aaa:	ee 0f       	add	r30, r30
    9aac:	97 95       	ror	r25
    9aae:	87 95       	ror	r24
    9ab0:	08 95       	ret

00009ab2 <__cmpsf2>:
    9ab2:	d9 d0       	rcall	.+434    	; 0x9c66 <__fp_cmp>
    9ab4:	08 f4       	brcc	.+2      	; 0x9ab8 <__cmpsf2+0x6>
    9ab6:	81 e0       	ldi	r24, 0x01	; 1
    9ab8:	08 95       	ret

00009aba <__divsf3>:
    9aba:	0c d0       	rcall	.+24     	; 0x9ad4 <__divsf3x>
    9abc:	0f c1       	rjmp	.+542    	; 0x9cdc <__fp_round>
    9abe:	07 d1       	rcall	.+526    	; 0x9cce <__fp_pscB>
    9ac0:	40 f0       	brcs	.+16     	; 0x9ad2 <__divsf3+0x18>
    9ac2:	fe d0       	rcall	.+508    	; 0x9cc0 <__fp_pscA>
    9ac4:	30 f0       	brcs	.+12     	; 0x9ad2 <__divsf3+0x18>
    9ac6:	21 f4       	brne	.+8      	; 0x9ad0 <__divsf3+0x16>
    9ac8:	5f 3f       	cpi	r21, 0xFF	; 255
    9aca:	19 f0       	breq	.+6      	; 0x9ad2 <__divsf3+0x18>
    9acc:	f0 c0       	rjmp	.+480    	; 0x9cae <__fp_inf>
    9ace:	51 11       	cpse	r21, r1
    9ad0:	39 c1       	rjmp	.+626    	; 0x9d44 <__fp_szero>
    9ad2:	f3 c0       	rjmp	.+486    	; 0x9cba <__fp_nan>

00009ad4 <__divsf3x>:
    9ad4:	14 d1       	rcall	.+552    	; 0x9cfe <__fp_split3>
    9ad6:	98 f3       	brcs	.-26     	; 0x9abe <__divsf3+0x4>

00009ad8 <__divsf3_pse>:
    9ad8:	99 23       	and	r25, r25
    9ada:	c9 f3       	breq	.-14     	; 0x9ace <__divsf3+0x14>
    9adc:	55 23       	and	r21, r21
    9ade:	b1 f3       	breq	.-20     	; 0x9acc <__divsf3+0x12>
    9ae0:	95 1b       	sub	r25, r21
    9ae2:	55 0b       	sbc	r21, r21
    9ae4:	bb 27       	eor	r27, r27
    9ae6:	aa 27       	eor	r26, r26
    9ae8:	62 17       	cp	r22, r18
    9aea:	73 07       	cpc	r23, r19
    9aec:	84 07       	cpc	r24, r20
    9aee:	38 f0       	brcs	.+14     	; 0x9afe <__divsf3_pse+0x26>
    9af0:	9f 5f       	subi	r25, 0xFF	; 255
    9af2:	5f 4f       	sbci	r21, 0xFF	; 255
    9af4:	22 0f       	add	r18, r18
    9af6:	33 1f       	adc	r19, r19
    9af8:	44 1f       	adc	r20, r20
    9afa:	aa 1f       	adc	r26, r26
    9afc:	a9 f3       	breq	.-22     	; 0x9ae8 <__divsf3_pse+0x10>
    9afe:	33 d0       	rcall	.+102    	; 0x9b66 <__divsf3_pse+0x8e>
    9b00:	0e 2e       	mov	r0, r30
    9b02:	3a f0       	brmi	.+14     	; 0x9b12 <__divsf3_pse+0x3a>
    9b04:	e0 e8       	ldi	r30, 0x80	; 128
    9b06:	30 d0       	rcall	.+96     	; 0x9b68 <__divsf3_pse+0x90>
    9b08:	91 50       	subi	r25, 0x01	; 1
    9b0a:	50 40       	sbci	r21, 0x00	; 0
    9b0c:	e6 95       	lsr	r30
    9b0e:	00 1c       	adc	r0, r0
    9b10:	ca f7       	brpl	.-14     	; 0x9b04 <__divsf3_pse+0x2c>
    9b12:	29 d0       	rcall	.+82     	; 0x9b66 <__divsf3_pse+0x8e>
    9b14:	fe 2f       	mov	r31, r30
    9b16:	27 d0       	rcall	.+78     	; 0x9b66 <__divsf3_pse+0x8e>
    9b18:	66 0f       	add	r22, r22
    9b1a:	77 1f       	adc	r23, r23
    9b1c:	88 1f       	adc	r24, r24
    9b1e:	bb 1f       	adc	r27, r27
    9b20:	26 17       	cp	r18, r22
    9b22:	37 07       	cpc	r19, r23
    9b24:	48 07       	cpc	r20, r24
    9b26:	ab 07       	cpc	r26, r27
    9b28:	b0 e8       	ldi	r27, 0x80	; 128
    9b2a:	09 f0       	breq	.+2      	; 0x9b2e <__divsf3_pse+0x56>
    9b2c:	bb 0b       	sbc	r27, r27
    9b2e:	80 2d       	mov	r24, r0
    9b30:	bf 01       	movw	r22, r30
    9b32:	ff 27       	eor	r31, r31
    9b34:	93 58       	subi	r25, 0x83	; 131
    9b36:	5f 4f       	sbci	r21, 0xFF	; 255
    9b38:	2a f0       	brmi	.+10     	; 0x9b44 <__divsf3_pse+0x6c>
    9b3a:	9e 3f       	cpi	r25, 0xFE	; 254
    9b3c:	51 05       	cpc	r21, r1
    9b3e:	68 f0       	brcs	.+26     	; 0x9b5a <__divsf3_pse+0x82>
    9b40:	b6 c0       	rjmp	.+364    	; 0x9cae <__fp_inf>
    9b42:	00 c1       	rjmp	.+512    	; 0x9d44 <__fp_szero>
    9b44:	5f 3f       	cpi	r21, 0xFF	; 255
    9b46:	ec f3       	brlt	.-6      	; 0x9b42 <__divsf3_pse+0x6a>
    9b48:	98 3e       	cpi	r25, 0xE8	; 232
    9b4a:	dc f3       	brlt	.-10     	; 0x9b42 <__divsf3_pse+0x6a>
    9b4c:	86 95       	lsr	r24
    9b4e:	77 95       	ror	r23
    9b50:	67 95       	ror	r22
    9b52:	b7 95       	ror	r27
    9b54:	f7 95       	ror	r31
    9b56:	9f 5f       	subi	r25, 0xFF	; 255
    9b58:	c9 f7       	brne	.-14     	; 0x9b4c <__divsf3_pse+0x74>
    9b5a:	88 0f       	add	r24, r24
    9b5c:	91 1d       	adc	r25, r1
    9b5e:	96 95       	lsr	r25
    9b60:	87 95       	ror	r24
    9b62:	97 f9       	bld	r25, 7
    9b64:	08 95       	ret
    9b66:	e1 e0       	ldi	r30, 0x01	; 1
    9b68:	66 0f       	add	r22, r22
    9b6a:	77 1f       	adc	r23, r23
    9b6c:	88 1f       	adc	r24, r24
    9b6e:	bb 1f       	adc	r27, r27
    9b70:	62 17       	cp	r22, r18
    9b72:	73 07       	cpc	r23, r19
    9b74:	84 07       	cpc	r24, r20
    9b76:	ba 07       	cpc	r27, r26
    9b78:	20 f0       	brcs	.+8      	; 0x9b82 <__divsf3_pse+0xaa>
    9b7a:	62 1b       	sub	r22, r18
    9b7c:	73 0b       	sbc	r23, r19
    9b7e:	84 0b       	sbc	r24, r20
    9b80:	ba 0b       	sbc	r27, r26
    9b82:	ee 1f       	adc	r30, r30
    9b84:	88 f7       	brcc	.-30     	; 0x9b68 <__divsf3_pse+0x90>
    9b86:	e0 95       	com	r30
    9b88:	08 95       	ret

00009b8a <__fixsfsi>:
    9b8a:	04 d0       	rcall	.+8      	; 0x9b94 <__fixunssfsi>
    9b8c:	68 94       	set
    9b8e:	b1 11       	cpse	r27, r1
    9b90:	d9 c0       	rjmp	.+434    	; 0x9d44 <__fp_szero>
    9b92:	08 95       	ret

00009b94 <__fixunssfsi>:
    9b94:	bc d0       	rcall	.+376    	; 0x9d0e <__fp_splitA>
    9b96:	88 f0       	brcs	.+34     	; 0x9bba <__fixunssfsi+0x26>
    9b98:	9f 57       	subi	r25, 0x7F	; 127
    9b9a:	90 f0       	brcs	.+36     	; 0x9bc0 <__fixunssfsi+0x2c>
    9b9c:	b9 2f       	mov	r27, r25
    9b9e:	99 27       	eor	r25, r25
    9ba0:	b7 51       	subi	r27, 0x17	; 23
    9ba2:	a0 f0       	brcs	.+40     	; 0x9bcc <__fixunssfsi+0x38>
    9ba4:	d1 f0       	breq	.+52     	; 0x9bda <__fixunssfsi+0x46>
    9ba6:	66 0f       	add	r22, r22
    9ba8:	77 1f       	adc	r23, r23
    9baa:	88 1f       	adc	r24, r24
    9bac:	99 1f       	adc	r25, r25
    9bae:	1a f0       	brmi	.+6      	; 0x9bb6 <__fixunssfsi+0x22>
    9bb0:	ba 95       	dec	r27
    9bb2:	c9 f7       	brne	.-14     	; 0x9ba6 <__fixunssfsi+0x12>
    9bb4:	12 c0       	rjmp	.+36     	; 0x9bda <__fixunssfsi+0x46>
    9bb6:	b1 30       	cpi	r27, 0x01	; 1
    9bb8:	81 f0       	breq	.+32     	; 0x9bda <__fixunssfsi+0x46>
    9bba:	c3 d0       	rcall	.+390    	; 0x9d42 <__fp_zero>
    9bbc:	b1 e0       	ldi	r27, 0x01	; 1
    9bbe:	08 95       	ret
    9bc0:	c0 c0       	rjmp	.+384    	; 0x9d42 <__fp_zero>
    9bc2:	67 2f       	mov	r22, r23
    9bc4:	78 2f       	mov	r23, r24
    9bc6:	88 27       	eor	r24, r24
    9bc8:	b8 5f       	subi	r27, 0xF8	; 248
    9bca:	39 f0       	breq	.+14     	; 0x9bda <__fixunssfsi+0x46>
    9bcc:	b9 3f       	cpi	r27, 0xF9	; 249
    9bce:	cc f3       	brlt	.-14     	; 0x9bc2 <__fixunssfsi+0x2e>
    9bd0:	86 95       	lsr	r24
    9bd2:	77 95       	ror	r23
    9bd4:	67 95       	ror	r22
    9bd6:	b3 95       	inc	r27
    9bd8:	d9 f7       	brne	.-10     	; 0x9bd0 <__fixunssfsi+0x3c>
    9bda:	3e f4       	brtc	.+14     	; 0x9bea <__fixunssfsi+0x56>
    9bdc:	90 95       	com	r25
    9bde:	80 95       	com	r24
    9be0:	70 95       	com	r23
    9be2:	61 95       	neg	r22
    9be4:	7f 4f       	sbci	r23, 0xFF	; 255
    9be6:	8f 4f       	sbci	r24, 0xFF	; 255
    9be8:	9f 4f       	sbci	r25, 0xFF	; 255
    9bea:	08 95       	ret

00009bec <__floatunsisf>:
    9bec:	e8 94       	clt
    9bee:	09 c0       	rjmp	.+18     	; 0x9c02 <__floatsisf+0x12>

00009bf0 <__floatsisf>:
    9bf0:	97 fb       	bst	r25, 7
    9bf2:	3e f4       	brtc	.+14     	; 0x9c02 <__floatsisf+0x12>
    9bf4:	90 95       	com	r25
    9bf6:	80 95       	com	r24
    9bf8:	70 95       	com	r23
    9bfa:	61 95       	neg	r22
    9bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    9bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    9c00:	9f 4f       	sbci	r25, 0xFF	; 255
    9c02:	99 23       	and	r25, r25
    9c04:	a9 f0       	breq	.+42     	; 0x9c30 <__floatsisf+0x40>
    9c06:	f9 2f       	mov	r31, r25
    9c08:	96 e9       	ldi	r25, 0x96	; 150
    9c0a:	bb 27       	eor	r27, r27
    9c0c:	93 95       	inc	r25
    9c0e:	f6 95       	lsr	r31
    9c10:	87 95       	ror	r24
    9c12:	77 95       	ror	r23
    9c14:	67 95       	ror	r22
    9c16:	b7 95       	ror	r27
    9c18:	f1 11       	cpse	r31, r1
    9c1a:	f8 cf       	rjmp	.-16     	; 0x9c0c <__floatsisf+0x1c>
    9c1c:	fa f4       	brpl	.+62     	; 0x9c5c <__floatsisf+0x6c>
    9c1e:	bb 0f       	add	r27, r27
    9c20:	11 f4       	brne	.+4      	; 0x9c26 <__floatsisf+0x36>
    9c22:	60 ff       	sbrs	r22, 0
    9c24:	1b c0       	rjmp	.+54     	; 0x9c5c <__floatsisf+0x6c>
    9c26:	6f 5f       	subi	r22, 0xFF	; 255
    9c28:	7f 4f       	sbci	r23, 0xFF	; 255
    9c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    9c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    9c2e:	16 c0       	rjmp	.+44     	; 0x9c5c <__floatsisf+0x6c>
    9c30:	88 23       	and	r24, r24
    9c32:	11 f0       	breq	.+4      	; 0x9c38 <__floatsisf+0x48>
    9c34:	96 e9       	ldi	r25, 0x96	; 150
    9c36:	11 c0       	rjmp	.+34     	; 0x9c5a <__floatsisf+0x6a>
    9c38:	77 23       	and	r23, r23
    9c3a:	21 f0       	breq	.+8      	; 0x9c44 <__floatsisf+0x54>
    9c3c:	9e e8       	ldi	r25, 0x8E	; 142
    9c3e:	87 2f       	mov	r24, r23
    9c40:	76 2f       	mov	r23, r22
    9c42:	05 c0       	rjmp	.+10     	; 0x9c4e <__floatsisf+0x5e>
    9c44:	66 23       	and	r22, r22
    9c46:	71 f0       	breq	.+28     	; 0x9c64 <__floatsisf+0x74>
    9c48:	96 e8       	ldi	r25, 0x86	; 134
    9c4a:	86 2f       	mov	r24, r22
    9c4c:	70 e0       	ldi	r23, 0x00	; 0
    9c4e:	60 e0       	ldi	r22, 0x00	; 0
    9c50:	2a f0       	brmi	.+10     	; 0x9c5c <__floatsisf+0x6c>
    9c52:	9a 95       	dec	r25
    9c54:	66 0f       	add	r22, r22
    9c56:	77 1f       	adc	r23, r23
    9c58:	88 1f       	adc	r24, r24
    9c5a:	da f7       	brpl	.-10     	; 0x9c52 <__floatsisf+0x62>
    9c5c:	88 0f       	add	r24, r24
    9c5e:	96 95       	lsr	r25
    9c60:	87 95       	ror	r24
    9c62:	97 f9       	bld	r25, 7
    9c64:	08 95       	ret

00009c66 <__fp_cmp>:
    9c66:	99 0f       	add	r25, r25
    9c68:	00 08       	sbc	r0, r0
    9c6a:	55 0f       	add	r21, r21
    9c6c:	aa 0b       	sbc	r26, r26
    9c6e:	e0 e8       	ldi	r30, 0x80	; 128
    9c70:	fe ef       	ldi	r31, 0xFE	; 254
    9c72:	16 16       	cp	r1, r22
    9c74:	17 06       	cpc	r1, r23
    9c76:	e8 07       	cpc	r30, r24
    9c78:	f9 07       	cpc	r31, r25
    9c7a:	c0 f0       	brcs	.+48     	; 0x9cac <__fp_cmp+0x46>
    9c7c:	12 16       	cp	r1, r18
    9c7e:	13 06       	cpc	r1, r19
    9c80:	e4 07       	cpc	r30, r20
    9c82:	f5 07       	cpc	r31, r21
    9c84:	98 f0       	brcs	.+38     	; 0x9cac <__fp_cmp+0x46>
    9c86:	62 1b       	sub	r22, r18
    9c88:	73 0b       	sbc	r23, r19
    9c8a:	84 0b       	sbc	r24, r20
    9c8c:	95 0b       	sbc	r25, r21
    9c8e:	39 f4       	brne	.+14     	; 0x9c9e <__fp_cmp+0x38>
    9c90:	0a 26       	eor	r0, r26
    9c92:	61 f0       	breq	.+24     	; 0x9cac <__fp_cmp+0x46>
    9c94:	23 2b       	or	r18, r19
    9c96:	24 2b       	or	r18, r20
    9c98:	25 2b       	or	r18, r21
    9c9a:	21 f4       	brne	.+8      	; 0x9ca4 <__fp_cmp+0x3e>
    9c9c:	08 95       	ret
    9c9e:	0a 26       	eor	r0, r26
    9ca0:	09 f4       	brne	.+2      	; 0x9ca4 <__fp_cmp+0x3e>
    9ca2:	a1 40       	sbci	r26, 0x01	; 1
    9ca4:	a6 95       	lsr	r26
    9ca6:	8f ef       	ldi	r24, 0xFF	; 255
    9ca8:	81 1d       	adc	r24, r1
    9caa:	81 1d       	adc	r24, r1
    9cac:	08 95       	ret

00009cae <__fp_inf>:
    9cae:	97 f9       	bld	r25, 7
    9cb0:	9f 67       	ori	r25, 0x7F	; 127
    9cb2:	80 e8       	ldi	r24, 0x80	; 128
    9cb4:	70 e0       	ldi	r23, 0x00	; 0
    9cb6:	60 e0       	ldi	r22, 0x00	; 0
    9cb8:	08 95       	ret

00009cba <__fp_nan>:
    9cba:	9f ef       	ldi	r25, 0xFF	; 255
    9cbc:	80 ec       	ldi	r24, 0xC0	; 192
    9cbe:	08 95       	ret

00009cc0 <__fp_pscA>:
    9cc0:	00 24       	eor	r0, r0
    9cc2:	0a 94       	dec	r0
    9cc4:	16 16       	cp	r1, r22
    9cc6:	17 06       	cpc	r1, r23
    9cc8:	18 06       	cpc	r1, r24
    9cca:	09 06       	cpc	r0, r25
    9ccc:	08 95       	ret

00009cce <__fp_pscB>:
    9cce:	00 24       	eor	r0, r0
    9cd0:	0a 94       	dec	r0
    9cd2:	12 16       	cp	r1, r18
    9cd4:	13 06       	cpc	r1, r19
    9cd6:	14 06       	cpc	r1, r20
    9cd8:	05 06       	cpc	r0, r21
    9cda:	08 95       	ret

00009cdc <__fp_round>:
    9cdc:	09 2e       	mov	r0, r25
    9cde:	03 94       	inc	r0
    9ce0:	00 0c       	add	r0, r0
    9ce2:	11 f4       	brne	.+4      	; 0x9ce8 <__fp_round+0xc>
    9ce4:	88 23       	and	r24, r24
    9ce6:	52 f0       	brmi	.+20     	; 0x9cfc <__fp_round+0x20>
    9ce8:	bb 0f       	add	r27, r27
    9cea:	40 f4       	brcc	.+16     	; 0x9cfc <__fp_round+0x20>
    9cec:	bf 2b       	or	r27, r31
    9cee:	11 f4       	brne	.+4      	; 0x9cf4 <__fp_round+0x18>
    9cf0:	60 ff       	sbrs	r22, 0
    9cf2:	04 c0       	rjmp	.+8      	; 0x9cfc <__fp_round+0x20>
    9cf4:	6f 5f       	subi	r22, 0xFF	; 255
    9cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    9cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    9cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    9cfc:	08 95       	ret

00009cfe <__fp_split3>:
    9cfe:	57 fd       	sbrc	r21, 7
    9d00:	90 58       	subi	r25, 0x80	; 128
    9d02:	44 0f       	add	r20, r20
    9d04:	55 1f       	adc	r21, r21
    9d06:	59 f0       	breq	.+22     	; 0x9d1e <__fp_splitA+0x10>
    9d08:	5f 3f       	cpi	r21, 0xFF	; 255
    9d0a:	71 f0       	breq	.+28     	; 0x9d28 <__fp_splitA+0x1a>
    9d0c:	47 95       	ror	r20

00009d0e <__fp_splitA>:
    9d0e:	88 0f       	add	r24, r24
    9d10:	97 fb       	bst	r25, 7
    9d12:	99 1f       	adc	r25, r25
    9d14:	61 f0       	breq	.+24     	; 0x9d2e <__fp_splitA+0x20>
    9d16:	9f 3f       	cpi	r25, 0xFF	; 255
    9d18:	79 f0       	breq	.+30     	; 0x9d38 <__fp_splitA+0x2a>
    9d1a:	87 95       	ror	r24
    9d1c:	08 95       	ret
    9d1e:	12 16       	cp	r1, r18
    9d20:	13 06       	cpc	r1, r19
    9d22:	14 06       	cpc	r1, r20
    9d24:	55 1f       	adc	r21, r21
    9d26:	f2 cf       	rjmp	.-28     	; 0x9d0c <__fp_split3+0xe>
    9d28:	46 95       	lsr	r20
    9d2a:	f1 df       	rcall	.-30     	; 0x9d0e <__fp_splitA>
    9d2c:	08 c0       	rjmp	.+16     	; 0x9d3e <__fp_splitA+0x30>
    9d2e:	16 16       	cp	r1, r22
    9d30:	17 06       	cpc	r1, r23
    9d32:	18 06       	cpc	r1, r24
    9d34:	99 1f       	adc	r25, r25
    9d36:	f1 cf       	rjmp	.-30     	; 0x9d1a <__fp_splitA+0xc>
    9d38:	86 95       	lsr	r24
    9d3a:	71 05       	cpc	r23, r1
    9d3c:	61 05       	cpc	r22, r1
    9d3e:	08 94       	sec
    9d40:	08 95       	ret

00009d42 <__fp_zero>:
    9d42:	e8 94       	clt

00009d44 <__fp_szero>:
    9d44:	bb 27       	eor	r27, r27
    9d46:	66 27       	eor	r22, r22
    9d48:	77 27       	eor	r23, r23
    9d4a:	cb 01       	movw	r24, r22
    9d4c:	97 f9       	bld	r25, 7
    9d4e:	08 95       	ret

00009d50 <__gesf2>:
    9d50:	8a df       	rcall	.-236    	; 0x9c66 <__fp_cmp>
    9d52:	08 f4       	brcc	.+2      	; 0x9d56 <__gesf2+0x6>
    9d54:	8f ef       	ldi	r24, 0xFF	; 255
    9d56:	08 95       	ret

00009d58 <__mulsf3>:
    9d58:	0b d0       	rcall	.+22     	; 0x9d70 <__mulsf3x>
    9d5a:	c0 cf       	rjmp	.-128    	; 0x9cdc <__fp_round>
    9d5c:	b1 df       	rcall	.-158    	; 0x9cc0 <__fp_pscA>
    9d5e:	28 f0       	brcs	.+10     	; 0x9d6a <__mulsf3+0x12>
    9d60:	b6 df       	rcall	.-148    	; 0x9cce <__fp_pscB>
    9d62:	18 f0       	brcs	.+6      	; 0x9d6a <__mulsf3+0x12>
    9d64:	95 23       	and	r25, r21
    9d66:	09 f0       	breq	.+2      	; 0x9d6a <__mulsf3+0x12>
    9d68:	a2 cf       	rjmp	.-188    	; 0x9cae <__fp_inf>
    9d6a:	a7 cf       	rjmp	.-178    	; 0x9cba <__fp_nan>
    9d6c:	11 24       	eor	r1, r1
    9d6e:	ea cf       	rjmp	.-44     	; 0x9d44 <__fp_szero>

00009d70 <__mulsf3x>:
    9d70:	c6 df       	rcall	.-116    	; 0x9cfe <__fp_split3>
    9d72:	a0 f3       	brcs	.-24     	; 0x9d5c <__mulsf3+0x4>

00009d74 <__mulsf3_pse>:
    9d74:	95 9f       	mul	r25, r21
    9d76:	d1 f3       	breq	.-12     	; 0x9d6c <__mulsf3+0x14>
    9d78:	95 0f       	add	r25, r21
    9d7a:	50 e0       	ldi	r21, 0x00	; 0
    9d7c:	55 1f       	adc	r21, r21
    9d7e:	62 9f       	mul	r22, r18
    9d80:	f0 01       	movw	r30, r0
    9d82:	72 9f       	mul	r23, r18
    9d84:	bb 27       	eor	r27, r27
    9d86:	f0 0d       	add	r31, r0
    9d88:	b1 1d       	adc	r27, r1
    9d8a:	63 9f       	mul	r22, r19
    9d8c:	aa 27       	eor	r26, r26
    9d8e:	f0 0d       	add	r31, r0
    9d90:	b1 1d       	adc	r27, r1
    9d92:	aa 1f       	adc	r26, r26
    9d94:	64 9f       	mul	r22, r20
    9d96:	66 27       	eor	r22, r22
    9d98:	b0 0d       	add	r27, r0
    9d9a:	a1 1d       	adc	r26, r1
    9d9c:	66 1f       	adc	r22, r22
    9d9e:	82 9f       	mul	r24, r18
    9da0:	22 27       	eor	r18, r18
    9da2:	b0 0d       	add	r27, r0
    9da4:	a1 1d       	adc	r26, r1
    9da6:	62 1f       	adc	r22, r18
    9da8:	73 9f       	mul	r23, r19
    9daa:	b0 0d       	add	r27, r0
    9dac:	a1 1d       	adc	r26, r1
    9dae:	62 1f       	adc	r22, r18
    9db0:	83 9f       	mul	r24, r19
    9db2:	a0 0d       	add	r26, r0
    9db4:	61 1d       	adc	r22, r1
    9db6:	22 1f       	adc	r18, r18
    9db8:	74 9f       	mul	r23, r20
    9dba:	33 27       	eor	r19, r19
    9dbc:	a0 0d       	add	r26, r0
    9dbe:	61 1d       	adc	r22, r1
    9dc0:	23 1f       	adc	r18, r19
    9dc2:	84 9f       	mul	r24, r20
    9dc4:	60 0d       	add	r22, r0
    9dc6:	21 1d       	adc	r18, r1
    9dc8:	82 2f       	mov	r24, r18
    9dca:	76 2f       	mov	r23, r22
    9dcc:	6a 2f       	mov	r22, r26
    9dce:	11 24       	eor	r1, r1
    9dd0:	9f 57       	subi	r25, 0x7F	; 127
    9dd2:	50 40       	sbci	r21, 0x00	; 0
    9dd4:	8a f0       	brmi	.+34     	; 0x9df8 <__mulsf3_pse+0x84>
    9dd6:	e1 f0       	breq	.+56     	; 0x9e10 <__mulsf3_pse+0x9c>
    9dd8:	88 23       	and	r24, r24
    9dda:	4a f0       	brmi	.+18     	; 0x9dee <__mulsf3_pse+0x7a>
    9ddc:	ee 0f       	add	r30, r30
    9dde:	ff 1f       	adc	r31, r31
    9de0:	bb 1f       	adc	r27, r27
    9de2:	66 1f       	adc	r22, r22
    9de4:	77 1f       	adc	r23, r23
    9de6:	88 1f       	adc	r24, r24
    9de8:	91 50       	subi	r25, 0x01	; 1
    9dea:	50 40       	sbci	r21, 0x00	; 0
    9dec:	a9 f7       	brne	.-22     	; 0x9dd8 <__mulsf3_pse+0x64>
    9dee:	9e 3f       	cpi	r25, 0xFE	; 254
    9df0:	51 05       	cpc	r21, r1
    9df2:	70 f0       	brcs	.+28     	; 0x9e10 <__mulsf3_pse+0x9c>
    9df4:	5c cf       	rjmp	.-328    	; 0x9cae <__fp_inf>
    9df6:	a6 cf       	rjmp	.-180    	; 0x9d44 <__fp_szero>
    9df8:	5f 3f       	cpi	r21, 0xFF	; 255
    9dfa:	ec f3       	brlt	.-6      	; 0x9df6 <__mulsf3_pse+0x82>
    9dfc:	98 3e       	cpi	r25, 0xE8	; 232
    9dfe:	dc f3       	brlt	.-10     	; 0x9df6 <__mulsf3_pse+0x82>
    9e00:	86 95       	lsr	r24
    9e02:	77 95       	ror	r23
    9e04:	67 95       	ror	r22
    9e06:	b7 95       	ror	r27
    9e08:	f7 95       	ror	r31
    9e0a:	e7 95       	ror	r30
    9e0c:	9f 5f       	subi	r25, 0xFF	; 255
    9e0e:	c1 f7       	brne	.-16     	; 0x9e00 <__mulsf3_pse+0x8c>
    9e10:	fe 2b       	or	r31, r30
    9e12:	88 0f       	add	r24, r24
    9e14:	91 1d       	adc	r25, r1
    9e16:	96 95       	lsr	r25
    9e18:	87 95       	ror	r24
    9e1a:	97 f9       	bld	r25, 7
    9e1c:	08 95       	ret

00009e1e <__udivmodhi4>:
    9e1e:	aa 1b       	sub	r26, r26
    9e20:	bb 1b       	sub	r27, r27
    9e22:	51 e1       	ldi	r21, 0x11	; 17
    9e24:	07 c0       	rjmp	.+14     	; 0x9e34 <__udivmodhi4_ep>

00009e26 <__udivmodhi4_loop>:
    9e26:	aa 1f       	adc	r26, r26
    9e28:	bb 1f       	adc	r27, r27
    9e2a:	a6 17       	cp	r26, r22
    9e2c:	b7 07       	cpc	r27, r23
    9e2e:	10 f0       	brcs	.+4      	; 0x9e34 <__udivmodhi4_ep>
    9e30:	a6 1b       	sub	r26, r22
    9e32:	b7 0b       	sbc	r27, r23

00009e34 <__udivmodhi4_ep>:
    9e34:	88 1f       	adc	r24, r24
    9e36:	99 1f       	adc	r25, r25
    9e38:	5a 95       	dec	r21
    9e3a:	a9 f7       	brne	.-22     	; 0x9e26 <__udivmodhi4_loop>
    9e3c:	80 95       	com	r24
    9e3e:	90 95       	com	r25
    9e40:	bc 01       	movw	r22, r24
    9e42:	cd 01       	movw	r24, r26
    9e44:	08 95       	ret

00009e46 <__divmodhi4>:
    9e46:	97 fb       	bst	r25, 7
    9e48:	07 2e       	mov	r0, r23
    9e4a:	16 f4       	brtc	.+4      	; 0x9e50 <__divmodhi4+0xa>
    9e4c:	00 94       	com	r0
    9e4e:	07 d0       	rcall	.+14     	; 0x9e5e <__divmodhi4_neg1>
    9e50:	77 fd       	sbrc	r23, 7
    9e52:	09 d0       	rcall	.+18     	; 0x9e66 <__divmodhi4_neg2>
    9e54:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <__udivmodhi4>
    9e58:	07 fc       	sbrc	r0, 7
    9e5a:	05 d0       	rcall	.+10     	; 0x9e66 <__divmodhi4_neg2>
    9e5c:	3e f4       	brtc	.+14     	; 0x9e6c <__divmodhi4_exit>

00009e5e <__divmodhi4_neg1>:
    9e5e:	90 95       	com	r25
    9e60:	81 95       	neg	r24
    9e62:	9f 4f       	sbci	r25, 0xFF	; 255
    9e64:	08 95       	ret

00009e66 <__divmodhi4_neg2>:
    9e66:	70 95       	com	r23
    9e68:	61 95       	neg	r22
    9e6a:	7f 4f       	sbci	r23, 0xFF	; 255

00009e6c <__divmodhi4_exit>:
    9e6c:	08 95       	ret

00009e6e <__udivmodsi4>:
    9e6e:	a1 e2       	ldi	r26, 0x21	; 33
    9e70:	1a 2e       	mov	r1, r26
    9e72:	aa 1b       	sub	r26, r26
    9e74:	bb 1b       	sub	r27, r27
    9e76:	fd 01       	movw	r30, r26
    9e78:	0d c0       	rjmp	.+26     	; 0x9e94 <__udivmodsi4_ep>

00009e7a <__udivmodsi4_loop>:
    9e7a:	aa 1f       	adc	r26, r26
    9e7c:	bb 1f       	adc	r27, r27
    9e7e:	ee 1f       	adc	r30, r30
    9e80:	ff 1f       	adc	r31, r31
    9e82:	a2 17       	cp	r26, r18
    9e84:	b3 07       	cpc	r27, r19
    9e86:	e4 07       	cpc	r30, r20
    9e88:	f5 07       	cpc	r31, r21
    9e8a:	20 f0       	brcs	.+8      	; 0x9e94 <__udivmodsi4_ep>
    9e8c:	a2 1b       	sub	r26, r18
    9e8e:	b3 0b       	sbc	r27, r19
    9e90:	e4 0b       	sbc	r30, r20
    9e92:	f5 0b       	sbc	r31, r21

00009e94 <__udivmodsi4_ep>:
    9e94:	66 1f       	adc	r22, r22
    9e96:	77 1f       	adc	r23, r23
    9e98:	88 1f       	adc	r24, r24
    9e9a:	99 1f       	adc	r25, r25
    9e9c:	1a 94       	dec	r1
    9e9e:	69 f7       	brne	.-38     	; 0x9e7a <__udivmodsi4_loop>
    9ea0:	60 95       	com	r22
    9ea2:	70 95       	com	r23
    9ea4:	80 95       	com	r24
    9ea6:	90 95       	com	r25
    9ea8:	9b 01       	movw	r18, r22
    9eaa:	ac 01       	movw	r20, r24
    9eac:	bd 01       	movw	r22, r26
    9eae:	cf 01       	movw	r24, r30
    9eb0:	08 95       	ret

00009eb2 <__divmodsi4>:
    9eb2:	05 2e       	mov	r0, r21
    9eb4:	97 fb       	bst	r25, 7
    9eb6:	1e f4       	brtc	.+6      	; 0x9ebe <__divmodsi4+0xc>
    9eb8:	00 94       	com	r0
    9eba:	0e 94 70 4f 	call	0x9ee0	; 0x9ee0 <__negsi2>
    9ebe:	57 fd       	sbrc	r21, 7
    9ec0:	07 d0       	rcall	.+14     	; 0x9ed0 <__divmodsi4_neg2>
    9ec2:	0e 94 37 4f 	call	0x9e6e	; 0x9e6e <__udivmodsi4>
    9ec6:	07 fc       	sbrc	r0, 7
    9ec8:	03 d0       	rcall	.+6      	; 0x9ed0 <__divmodsi4_neg2>
    9eca:	4e f4       	brtc	.+18     	; 0x9ede <__divmodsi4_exit>
    9ecc:	0c 94 70 4f 	jmp	0x9ee0	; 0x9ee0 <__negsi2>

00009ed0 <__divmodsi4_neg2>:
    9ed0:	50 95       	com	r21
    9ed2:	40 95       	com	r20
    9ed4:	30 95       	com	r19
    9ed6:	21 95       	neg	r18
    9ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    9eda:	4f 4f       	sbci	r20, 0xFF	; 255
    9edc:	5f 4f       	sbci	r21, 0xFF	; 255

00009ede <__divmodsi4_exit>:
    9ede:	08 95       	ret

00009ee0 <__negsi2>:
    9ee0:	90 95       	com	r25
    9ee2:	80 95       	com	r24
    9ee4:	70 95       	com	r23
    9ee6:	61 95       	neg	r22
    9ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    9eea:	8f 4f       	sbci	r24, 0xFF	; 255
    9eec:	9f 4f       	sbci	r25, 0xFF	; 255
    9eee:	08 95       	ret

00009ef0 <__tablejump2__>:
    9ef0:	ee 0f       	add	r30, r30
    9ef2:	ff 1f       	adc	r31, r31

00009ef4 <__tablejump__>:
    9ef4:	05 90       	lpm	r0, Z+
    9ef6:	f4 91       	lpm	r31, Z
    9ef8:	e0 2d       	mov	r30, r0
    9efa:	09 94       	ijmp

00009efc <__mulhisi3>:
    9efc:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__umulhisi3>
    9f00:	33 23       	and	r19, r19
    9f02:	12 f4       	brpl	.+4      	; 0x9f08 <__mulhisi3+0xc>
    9f04:	8a 1b       	sub	r24, r26
    9f06:	9b 0b       	sbc	r25, r27
    9f08:	0c 94 97 4f 	jmp	0x9f2e	; 0x9f2e <__usmulhisi3_tail>

00009f0c <__umulhisi3>:
    9f0c:	a2 9f       	mul	r26, r18
    9f0e:	b0 01       	movw	r22, r0
    9f10:	b3 9f       	mul	r27, r19
    9f12:	c0 01       	movw	r24, r0
    9f14:	a3 9f       	mul	r26, r19
    9f16:	70 0d       	add	r23, r0
    9f18:	81 1d       	adc	r24, r1
    9f1a:	11 24       	eor	r1, r1
    9f1c:	91 1d       	adc	r25, r1
    9f1e:	b2 9f       	mul	r27, r18
    9f20:	70 0d       	add	r23, r0
    9f22:	81 1d       	adc	r24, r1
    9f24:	11 24       	eor	r1, r1
    9f26:	91 1d       	adc	r25, r1
    9f28:	08 95       	ret

00009f2a <__usmulhisi3>:
    9f2a:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__umulhisi3>

00009f2e <__usmulhisi3_tail>:
    9f2e:	b7 ff       	sbrs	r27, 7
    9f30:	08 95       	ret
    9f32:	82 1b       	sub	r24, r18
    9f34:	93 0b       	sbc	r25, r19
    9f36:	08 95       	ret

00009f38 <__muluhisi3>:
    9f38:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__umulhisi3>
    9f3c:	a5 9f       	mul	r26, r21
    9f3e:	90 0d       	add	r25, r0
    9f40:	b4 9f       	mul	r27, r20
    9f42:	90 0d       	add	r25, r0
    9f44:	a4 9f       	mul	r26, r20
    9f46:	80 0d       	add	r24, r0
    9f48:	91 1d       	adc	r25, r1
    9f4a:	11 24       	eor	r1, r1
    9f4c:	08 95       	ret

00009f4e <__mulshisi3>:
    9f4e:	b7 ff       	sbrs	r27, 7
    9f50:	0c 94 9c 4f 	jmp	0x9f38	; 0x9f38 <__muluhisi3>

00009f54 <__mulohisi3>:
    9f54:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <__muluhisi3>
    9f58:	82 1b       	sub	r24, r18
    9f5a:	93 0b       	sbc	r25, r19
    9f5c:	08 95       	ret

00009f5e <memcpy_P>:
    9f5e:	fb 01       	movw	r30, r22
    9f60:	dc 01       	movw	r26, r24
    9f62:	02 c0       	rjmp	.+4      	; 0x9f68 <memcpy_P+0xa>
    9f64:	05 90       	lpm	r0, Z+
    9f66:	0d 92       	st	X+, r0
    9f68:	41 50       	subi	r20, 0x01	; 1
    9f6a:	50 40       	sbci	r21, 0x00	; 0
    9f6c:	d8 f7       	brcc	.-10     	; 0x9f64 <memcpy_P+0x6>
    9f6e:	08 95       	ret

00009f70 <memmove>:
    9f70:	68 17       	cp	r22, r24
    9f72:	79 07       	cpc	r23, r25
    9f74:	68 f4       	brcc	.+26     	; 0x9f90 <memmove+0x20>
    9f76:	fb 01       	movw	r30, r22
    9f78:	dc 01       	movw	r26, r24
    9f7a:	e4 0f       	add	r30, r20
    9f7c:	f5 1f       	adc	r31, r21
    9f7e:	a4 0f       	add	r26, r20
    9f80:	b5 1f       	adc	r27, r21
    9f82:	02 c0       	rjmp	.+4      	; 0x9f88 <memmove+0x18>
    9f84:	02 90       	ld	r0, -Z
    9f86:	0e 92       	st	-X, r0
    9f88:	41 50       	subi	r20, 0x01	; 1
    9f8a:	50 40       	sbci	r21, 0x00	; 0
    9f8c:	d8 f7       	brcc	.-10     	; 0x9f84 <memmove+0x14>
    9f8e:	08 95       	ret
    9f90:	0c 94 15 50 	jmp	0xa02a	; 0xa02a <memcpy>

00009f94 <__itoa_ncheck>:
    9f94:	bb 27       	eor	r27, r27
    9f96:	4a 30       	cpi	r20, 0x0A	; 10
    9f98:	31 f4       	brne	.+12     	; 0x9fa6 <__itoa_ncheck+0x12>
    9f9a:	99 23       	and	r25, r25
    9f9c:	22 f4       	brpl	.+8      	; 0x9fa6 <__itoa_ncheck+0x12>
    9f9e:	bd e2       	ldi	r27, 0x2D	; 45
    9fa0:	90 95       	com	r25
    9fa2:	81 95       	neg	r24
    9fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    9fa6:	0c 94 d6 4f 	jmp	0x9fac	; 0x9fac <__utoa_common>

00009faa <__utoa_ncheck>:
    9faa:	bb 27       	eor	r27, r27

00009fac <__utoa_common>:
    9fac:	fb 01       	movw	r30, r22
    9fae:	55 27       	eor	r21, r21
    9fb0:	aa 27       	eor	r26, r26
    9fb2:	88 0f       	add	r24, r24
    9fb4:	99 1f       	adc	r25, r25
    9fb6:	aa 1f       	adc	r26, r26
    9fb8:	a4 17       	cp	r26, r20
    9fba:	10 f0       	brcs	.+4      	; 0x9fc0 <__utoa_common+0x14>
    9fbc:	a4 1b       	sub	r26, r20
    9fbe:	83 95       	inc	r24
    9fc0:	50 51       	subi	r21, 0x10	; 16
    9fc2:	b9 f7       	brne	.-18     	; 0x9fb2 <__utoa_common+0x6>
    9fc4:	a0 5d       	subi	r26, 0xD0	; 208
    9fc6:	aa 33       	cpi	r26, 0x3A	; 58
    9fc8:	08 f0       	brcs	.+2      	; 0x9fcc <__utoa_common+0x20>
    9fca:	a9 5d       	subi	r26, 0xD9	; 217
    9fcc:	a1 93       	st	Z+, r26
    9fce:	00 97       	sbiw	r24, 0x00	; 0
    9fd0:	79 f7       	brne	.-34     	; 0x9fb0 <__utoa_common+0x4>
    9fd2:	b1 11       	cpse	r27, r1
    9fd4:	b1 93       	st	Z+, r27
    9fd6:	11 92       	st	Z+, r1
    9fd8:	cb 01       	movw	r24, r22
    9fda:	0c 94 1e 50 	jmp	0xa03c	; 0xa03c <strrev>

00009fde <__eerd_block_m644pa>:
    9fde:	dc 01       	movw	r26, r24
    9fe0:	cb 01       	movw	r24, r22

00009fe2 <__eerd_blraw_m644pa>:
    9fe2:	fc 01       	movw	r30, r24
    9fe4:	f9 99       	sbic	0x1f, 1	; 31
    9fe6:	fe cf       	rjmp	.-4      	; 0x9fe4 <__eerd_blraw_m644pa+0x2>
    9fe8:	06 c0       	rjmp	.+12     	; 0x9ff6 <__eerd_blraw_m644pa+0x14>
    9fea:	f2 bd       	out	0x22, r31	; 34
    9fec:	e1 bd       	out	0x21, r30	; 33
    9fee:	f8 9a       	sbi	0x1f, 0	; 31
    9ff0:	31 96       	adiw	r30, 0x01	; 1
    9ff2:	00 b4       	in	r0, 0x20	; 32
    9ff4:	0d 92       	st	X+, r0
    9ff6:	41 50       	subi	r20, 0x01	; 1
    9ff8:	50 40       	sbci	r21, 0x00	; 0
    9ffa:	b8 f7       	brcc	.-18     	; 0x9fea <__eerd_blraw_m644pa+0x8>
    9ffc:	08 95       	ret

00009ffe <__eerd_byte_m644pa>:
    9ffe:	f9 99       	sbic	0x1f, 1	; 31
    a000:	fe cf       	rjmp	.-4      	; 0x9ffe <__eerd_byte_m644pa>
    a002:	92 bd       	out	0x22, r25	; 34
    a004:	81 bd       	out	0x21, r24	; 33
    a006:	f8 9a       	sbi	0x1f, 0	; 31
    a008:	99 27       	eor	r25, r25
    a00a:	80 b5       	in	r24, 0x20	; 32
    a00c:	08 95       	ret

0000a00e <__eewr_byte_m644pa>:
    a00e:	26 2f       	mov	r18, r22

0000a010 <__eewr_r18_m644pa>:
    a010:	f9 99       	sbic	0x1f, 1	; 31
    a012:	fe cf       	rjmp	.-4      	; 0xa010 <__eewr_r18_m644pa>
    a014:	1f ba       	out	0x1f, r1	; 31
    a016:	92 bd       	out	0x22, r25	; 34
    a018:	81 bd       	out	0x21, r24	; 33
    a01a:	20 bd       	out	0x20, r18	; 32
    a01c:	0f b6       	in	r0, 0x3f	; 63
    a01e:	f8 94       	cli
    a020:	fa 9a       	sbi	0x1f, 2	; 31
    a022:	f9 9a       	sbi	0x1f, 1	; 31
    a024:	0f be       	out	0x3f, r0	; 63
    a026:	01 96       	adiw	r24, 0x01	; 1
    a028:	08 95       	ret

0000a02a <memcpy>:
    a02a:	fb 01       	movw	r30, r22
    a02c:	dc 01       	movw	r26, r24
    a02e:	02 c0       	rjmp	.+4      	; 0xa034 <memcpy+0xa>
    a030:	01 90       	ld	r0, Z+
    a032:	0d 92       	st	X+, r0
    a034:	41 50       	subi	r20, 0x01	; 1
    a036:	50 40       	sbci	r21, 0x00	; 0
    a038:	d8 f7       	brcc	.-10     	; 0xa030 <memcpy+0x6>
    a03a:	08 95       	ret

0000a03c <strrev>:
    a03c:	dc 01       	movw	r26, r24
    a03e:	fc 01       	movw	r30, r24
    a040:	67 2f       	mov	r22, r23
    a042:	71 91       	ld	r23, Z+
    a044:	77 23       	and	r23, r23
    a046:	e1 f7       	brne	.-8      	; 0xa040 <strrev+0x4>
    a048:	32 97       	sbiw	r30, 0x02	; 2
    a04a:	04 c0       	rjmp	.+8      	; 0xa054 <strrev+0x18>
    a04c:	7c 91       	ld	r23, X
    a04e:	6d 93       	st	X+, r22
    a050:	70 83       	st	Z, r23
    a052:	62 91       	ld	r22, -Z
    a054:	ae 17       	cp	r26, r30
    a056:	bf 07       	cpc	r27, r31
    a058:	c8 f3       	brcs	.-14     	; 0xa04c <strrev+0x10>
    a05a:	08 95       	ret

0000a05c <_exit>:
    a05c:	f8 94       	cli

0000a05e <__stop_program>:
    a05e:	ff cf       	rjmp	.-2      	; 0xa05e <__stop_program>
