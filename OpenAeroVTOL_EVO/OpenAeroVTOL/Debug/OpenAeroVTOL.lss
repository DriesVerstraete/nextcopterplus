
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000426  00800100  0000e072  0000e106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e072  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047f  00800526  00800526  0000e52c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000e52c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000e55c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000788  00000000  00000000  0000e5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e2c4  00000000  00000000  0000ed28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046e2  00000000  00000000  0002cfec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000050a8  00000000  00000000  000316ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001924  00000000  00000000  00036778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000034be  00000000  00000000  0003809c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c705  00000000  00000000  0003b55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  00047c5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__ctors_end>
       4:	0c 94 df 42 	jmp	0x85be	; 0x85be <__vector_1>
       8:	0c 94 9d 42 	jmp	0x853a	; 0x853a <__vector_2>
       c:	0c 94 b0 43 	jmp	0x8760	; 0x8760 <__vector_3>
      10:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      14:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__vector_5>
      18:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      1c:	0c 94 22 43 	jmp	0x8644	; 0x8644 <__vector_7>
      20:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      24:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      28:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      2c:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      30:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      34:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      38:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      3c:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      40:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      44:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      48:	0c 94 86 42 	jmp	0x850c	; 0x850c <__vector_18>
      4c:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      50:	0c 94 7e 44 	jmp	0x88fc	; 0x88fc <__vector_20>
      54:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      58:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      5c:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      60:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      64:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      68:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      6c:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      70:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      74:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      78:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__bad_interrupt>
      7c:	97 2e       	mov	r9, r23
      7e:	a9 2e       	mov	r10, r25
      80:	a9 2e       	mov	r10, r25
      82:	a9 2e       	mov	r10, r25
      84:	99 2e       	mov	r9, r25
      86:	a9 2e       	mov	r10, r25
      88:	a9 2e       	mov	r10, r25
      8a:	a9 2e       	mov	r10, r25
      8c:	9b 2e       	mov	r9, r27
      8e:	9d 2e       	mov	r9, r29
      90:	9f 2e       	mov	r9, r31
      92:	a1 2e       	mov	r10, r17
      94:	a3 2e       	mov	r10, r19
      96:	a5 2e       	mov	r10, r21
      98:	ab 2e       	mov	r10, r27
      9a:	ab 2e       	mov	r10, r27
      9c:	42 2f       	mov	r20, r18
      9e:	c5 2f       	mov	r28, r21
      a0:	c5 2f       	mov	r28, r21
      a2:	54 2f       	mov	r21, r20
      a4:	63 2f       	mov	r22, r19
      a6:	6f 2f       	mov	r22, r31
      a8:	6a 2f       	mov	r22, r26
      aa:	85 2f       	mov	r24, r21
      ac:	91 2f       	mov	r25, r17
      ae:	97 2f       	mov	r25, r23
      b0:	aa 2f       	mov	r26, r26
      b2:	4c 4e       	sbci	r20, 0xEC	; 236
      b4:	40 4e       	sbci	r20, 0xE0	; 224
      b6:	42 4e       	sbci	r20, 0xE2	; 226
      b8:	44 4e       	sbci	r20, 0xE4	; 228
      ba:	46 4e       	sbci	r20, 0xE6	; 230
      bc:	48 4e       	sbci	r20, 0xE8	; 232
      be:	4a 4e       	sbci	r20, 0xEA	; 234
      c0:	4a 4e       	sbci	r20, 0xEA	; 234
      c2:	a5 4e       	sbci	r26, 0xE5	; 229
      c4:	a9 4e       	sbci	r26, 0xE9	; 233
      c6:	ad 4e       	sbci	r26, 0xED	; 237
      c8:	b1 4e       	sbci	r27, 0xE1	; 225
      ca:	b5 4e       	sbci	r27, 0xE5	; 229
      cc:	b9 4e       	sbci	r27, 0xE9	; 233
      ce:	be 4e       	sbci	r27, 0xEE	; 238
      d0:	cb 4e       	sbci	r28, 0xEB	; 235
      d2:	cf 4e       	sbci	r28, 0xEF	; 239
      d4:	d3 4e       	sbci	r29, 0xE3	; 227
      d6:	d7 4e       	sbci	r29, 0xE7	; 231
      d8:	db 4e       	sbci	r29, 0xEB	; 235
      da:	df 4e       	sbci	r29, 0xEF	; 239
      dc:	e2 4e       	sbci	r30, 0xE2	; 226
      de:	d9 4f       	sbci	r29, 0xF9	; 249
      e0:	dd 4f       	sbci	r29, 0xFD	; 253
      e2:	e1 4f       	sbci	r30, 0xF1	; 241
      e4:	e5 4f       	sbci	r30, 0xF5	; 245
      e6:	e9 4f       	sbci	r30, 0xF9	; 249
      e8:	ed 4f       	sbci	r30, 0xFD	; 253
      ea:	f0 4f       	sbci	r31, 0xF0	; 240
      ec:	f4 4f       	sbci	r31, 0xF4	; 244
      ee:	01 50       	subi	r16, 0x01	; 1
      f0:	04 50       	subi	r16, 0x04	; 4
      f2:	08 50       	subi	r16, 0x08	; 8
      f4:	0c 50       	subi	r16, 0x0C	; 12
      f6:	10 50       	subi	r17, 0x00	; 0
      f8:	17 50       	subi	r17, 0x07	; 7
      fa:	1a 50       	subi	r17, 0x0A	; 10
      fc:	21 50       	subi	r18, 0x01	; 1
      fe:	cf 52       	subi	r28, 0x2F	; 47
     100:	d1 52       	subi	r29, 0x21	; 33
     102:	d4 52       	subi	r29, 0x24	; 36
     104:	d6 52       	subi	r29, 0x26	; 38
     106:	d8 52       	subi	r29, 0x28	; 40
     108:	da 52       	subi	r29, 0x2A	; 42
     10a:	dc 52       	subi	r29, 0x2C	; 44
     10c:	de 52       	subi	r29, 0x2E	; 46
     10e:	e1 52       	subi	r30, 0x21	; 33
     110:	e3 52       	subi	r30, 0x23	; 35
     112:	e5 52       	subi	r30, 0x25	; 37
     114:	e7 52       	subi	r30, 0x27	; 39
     116:	ea 52       	subi	r30, 0x2A	; 42
     118:	ec 52       	subi	r30, 0x2C	; 44
     11a:	ee 52       	subi	r30, 0x2E	; 46
     11c:	f0 52       	subi	r31, 0x20	; 32
     11e:	f2 52       	subi	r31, 0x22	; 34
     120:	f4 52       	subi	r31, 0x24	; 36
     122:	f6 52       	subi	r31, 0x26	; 38
     124:	f8 52       	subi	r31, 0x28	; 40
     126:	fa 52       	subi	r31, 0x2A	; 42
     128:	fd 52       	subi	r31, 0x2D	; 45
     12a:	ff 52       	subi	r31, 0x2F	; 47
     12c:	01 53       	subi	r16, 0x31	; 49
     12e:	a3 57       	subi	r26, 0x73	; 115
     130:	87 57       	subi	r24, 0x77	; 119
     132:	8a 57       	subi	r24, 0x7A	; 122
     134:	8d 57       	subi	r24, 0x7D	; 125
     136:	90 57       	subi	r25, 0x70	; 112
     138:	93 57       	subi	r25, 0x73	; 115
     13a:	96 57       	subi	r25, 0x76	; 118
     13c:	99 57       	subi	r25, 0x79	; 121
     13e:	9c 57       	subi	r25, 0x7C	; 124
     140:	a3 6c       	ori	r26, 0xC3	; 195
     142:	a3 6c       	ori	r26, 0xC3	; 195
     144:	69 6c       	ori	r22, 0xC9	; 201
     146:	86 6c       	ori	r24, 0xC6	; 198
     148:	60 6c       	ori	r22, 0xC0	; 192
     14a:	86 6c       	ori	r24, 0xC6	; 198
     14c:	86 6c       	ori	r24, 0xC6	; 198

0000014e <Acc_Pol>:
     14e:	ff ff 01 01 ff 01 01 01 01 ff 01 01 ff ff ff 01     ................
     15e:	ff ff 01 ff 01 ff ff 01 01 ff ff ff ff ff ff 01     ................
     16e:	ff 01 01 ff 01 01 ff ff 01 ff ff 01 01 01 01 01     ................
     17e:	01 ff ff 01 01 ff 01 01 01 01 ff 01 ff 01 ff ff     ................
     18e:	ff ff ff ff 01 ff 01 01                             ........

00000196 <ACC_RPY_Order>:
     196:	00 01 02 01 00 02 00 01 02 01 00 02 00 02 01 01     ................
     1a6:	02 00 00 02 01 01 02 00 00 01 02 01 00 02 00 01     ................
     1b6:	02 01 00 02 00 02 01 01 02 00 00 02 01 01 02 00     ................
     1c6:	02 00 01 02 01 00 02 00 01 02 01 00 02 00 01 02     ................
     1d6:	01 00 02 00 01 02 01 00                             ........

000001de <MPX>:
     1de:	01 02 03 05 00 04 06 07                             ........

000001e6 <FUTABA>:
     1e6:	01 02 00 03 04 05 06 07                             ........

000001ee <JR>:
     1ee:	00 01 02 03 04 05 06 07                             ........

000001f6 <Trans_Matrix>:
     1f6:	05 02 06 01 05 08 03 07 05                          .........

000001ff <Wingdings>:
     1ff:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     20f:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     21f:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     22f:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     23f:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     24f:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     25f:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000269 <Verdana22>:
     269:	01 02 2d 0d 1d 00 1f 00 44 00 44 00 44 00 7d 00     ..-.....D.D.D.}.
     279:	aa 00 e3 01 1c 01 5d 01 92 01 cb 02 04 02 3d 09     ......].......=.
     289:	00 70 00 00 00 70 00 00 00 70 00 00 00 70 00 00     .p...p...p...p..
     299:	00 70 00 00 00 70 00 00 00 70 00 00 00 70 00 00     .p...p...p...p..
     2a9:	00 70 00 00 0e 80 ff 01 00 f0 ff 0f 00 f8 ff 1f     .p..............
     2b9:	00 7c 00 3e 00 1e 00 78 00 0e 00 70 00 0e 00 70     .|.>...x...p...p
     2c9:	00 0e 00 70 00 0e 00 70 00 1e 00 78 00 7c 00 3e     ...p...p...x.|.>
     2d9:	00 f8 ff 1f 00 f0 ff 0f 00 80 ff 01 00 0b 70 00     ..............p.
     2e9:	70 00 70 00 70 00 70 00 70 00 78 00 70 00 fc ff     p.p.p.p.p.x.p...
     2f9:	7f 00 fe ff 7f 00 fe ff 7f 00 00 00 70 00 00 00     ............p...
     309:	70 00 00 00 70 00 00 00 70 00 0e 00 00 78 00 1c     p...p...p....x..
     319:	00 7c 00 1c 00 7e 00 0e 00 77 00 0e 00 77 00 0e     .|...~...w...w..
     329:	80 73 00 0e c0 71 00 0e e0 70 00 1e 78 70 00 1e     .s...q...p..xp..
     339:	3c 70 00 fc 1f 70 00 f8 07 70 00 f0 03 70 00 00     <p...p...p...p..
     349:	00 70 00 0e 00 00 38 00 1c 00 38 00 1c 00 70 00     .p....8...8...p.
     359:	0e 00 70 00 0e 00 70 00 0e 1c 70 00 0e 1c 70 00     ..p...p...p...p.
     369:	0e 1c 70 00 0e 1c 70 00 0e 3e 78 00 1c 37 3c 00     ..p...p..>x..7<.
     379:	fc f3 3f 00 f8 e3 1f 00 f0 c0 07 00 10 00 e0 01     ..?.............
     389:	00 00 f0 01 00 00 fc 01 00 00 fe 01 00 00 df 01     ................
     399:	00 80 cf 01 00 e0 c3 01 00 f0 c1 01 00 f8 c0 01     ................
     3a9:	00 7c c0 01 00 fe ff 7f 00 fe ff 7f 00 fe ff 7f     .|..............
     3b9:	00 00 c0 01 00 00 c0 01 00 00 c0 01 00 0d 00 00     ................
     3c9:	38 00 fe 1f 38 00 fe 0f 70 00 fe 0f 70 00 0e 0e     8...8...p...p...
     3d9:	70 00 0e 0e 70 00 0e 0e 70 00 0e 0e 70 00 0e 1e     p...p...p...p...
     3e9:	78 00 0e 3c 3c 00 0e fc 1f 00 0e f8 0f 00 0e e0     x..<<...........
     3f9:	07 00 0e 00 fe 03 00 c0 ff 0f 00 f0 ff 1f 00 f8     ................
     409:	1c 3e 00 3c 0c 78 00 1c 0e 70 00 1e 0e 70 00 0e     .>.<.x...p...p..
     419:	0e 70 00 0e 0e 70 00 0e 1e 78 00 0e 3c 3c 00 1e     .p...p...x..<<..
     429:	fc 1f 00 00 f8 0f 00 00 e0 07 00 0e 0e 00 00 00     ................
     439:	0e 00 00 00 0e 00 40 00 0e 00 70 00 0e 00 7c 00     ......@...p...|.
     449:	0e 00 7f 00 0e c0 1f 00 0e f0 07 00 0e fc 00 00     ................
     459:	0e 3f 00 00 ce 0f 00 00 fe 03 00 00 fe 00 00 00     .?..............
     469:	3e 00 00 00 0e 00 c0 07 00 f0 e1 1f 00 f8 f3 3f     >..............?
     479:	00 fc 3f 3c 00 1e 1f 78 00 0e 0e 70 00 0e 0c 70     ..?<...x...p...p
     489:	00 0e 1c 70 00 0e 18 70 00 1e 3c 78 00 fc 7f 3c     ...p...p..<x...<
     499:	00 f8 f3 3f 00 f0 e1 1f 00 00 c0 07 00 0e e0 07     ...?............
     4a9:	00 00 f0 1f 00 00 f8 3f 78 00 3c 3c 70 00 1e 78     .......?x.<<p..x
     4b9:	70 00 0e 70 70 00 0e 70 70 00 0e 70 78 00 0e 70     p..pp..pp..px..p
     4c9:	38 00 1e 30 3c 00 7c 38 1f 00 f8 ff 0f 00 f0 ff     8..0<.|8........
     4d9:	03 00 c0 7f 00 00                                   ......

000004df <Verdana14>:
     4df:	01 02 20 5f 13 00 c3 00 cd 00 d4 00 e7 01 0c 01     .. _............
     4ef:	28 01 5f 01 87 01 8e 01 a1 01 b4 01 d0 01 f5 02     (._.............
     4ff:	02 02 15 02 1c 02 35 02 54 02 6d 02 89 02 a5 02     ......5.T.m.....
     50f:	c4 02 e0 02 ff 03 1b 03 3a 03 59 03 60 03 6d 03     ........:.Y.`.m.
     51f:	8f 03 b1 03 d3 03 ec 04 1d 04 45 04 64 04 86 04     ..........E.d...
     52f:	ab 04 c7 04 e3 05 0b 05 2a 05 3d 05 53 05 75 05     ........*.=.S.u.
     53f:	91 05 b6 05 d5 05 fd 06 16 06 3e 06 60 06 82 06     ..........>.`...
     54f:	a7 06 c6 06 ee 07 22 07 44 07 69 07 8b 07 9b 07     ......".D.i.....
     55f:	b4 07 c4 07 e9 08 0e 08 1b 08 34 08 50 08 69 08     ..........4.P.i.
     56f:	85 08 a1 08 b4 08 d0 08 e9 08 f0 09 00 09 1c 09     ................
     57f:	23 09 4e 09 67 09 86 09 a2 09 be 09 d1 09 ea 09     #.N.g...........
     58f:	fd 0a 16 0a 32 0a 5d 0a 79 0a 95 0a ae 0a ca 0a     ....2.].y.......
     59f:	d1 0a ed 03 00 00 00 00 00 00 00 00 00 02 fe 67     ...............g
     5af:	00 fe 67 00 06 1f 00 00 1f 00 00 00 00 00 00 00     ..g.............
     5bf:	00 1f 00 00 1f 00 00 0c 00 04 00 20 04 00 20 64     ........... .. d
     5cf:	00 20 1f 00 f8 04 00 26 04 00 20 64 00 20 1f 00     . .....&.. d. ..
     5df:	f8 04 00 26 04 00 20 04 00 20 00 00 09 e0 30 00     ...&.. .. ....0.
     5ef:	f0 61 00 98 61 00 18 63 00 ff ff 03 18 63 00 18     .a..a..c.....c..
     5ff:	62 00 18 3e 00 18 1c 00 12 78 00 00 fe 01 00 02     b..>.....x......
     60f:	01 00 02 01 00 02 01 00 fe 41 00 78 70 00 00 1c     .........A.xp...
     61f:	00 00 07 00 e0 00 00 38 00 00 0e 1e 00 82 7f 00     .......8........
     62f:	80 40 00 80 40 00 80 40 00 80 7f 00 00 1e 00 0d     .@..@..@........
     63f:	00 1e 00 3c 3f 00 fc 71 00 c6 60 00 c6 60 00 c6     ...<?..q..`..`..
     64f:	61 00 7e 63 00 3c 36 00 00 1c 00 80 1f 00 80 37     a.~c.<6........7
     65f:	00 00 60 00 00 40 00 02 1f 00 00 1f 00 00 06 c0     ..`..@..........
     66f:	1f 00 f8 ff 00 3c e0 01 07 00 07 03 00 06 01 00     .....<..........
     67f:	04 06 01 00 04 03 00 06 07 00 07 3c e0 01 f8 ff     ...........<....
     68f:	00 c0 1f 00 09 c6 00 00 44 00 00 6c 00 00 28 00     ........D..l..(.
     69f:	00 ff 01 00 28 00 00 6c 00 00 44 00 00 c6 00 00     ....(..l..D.....
     6af:	0c 00 03 00 00 03 00 00 03 00 00 03 00 00 03 00     ................
     6bf:	f8 7f 00 f8 7f 00 00 03 00 00 03 00 00 03 00 00     ................
     6cf:	03 00 00 03 00 04 00 00 03 00 f0 03 00 70 00 00     .............p..
     6df:	10 00 06 00 03 00 00 03 00 00 03 00 00 03 00 00     ................
     6ef:	03 00 00 03 00 02 00 70 00 00 70 00 08 00 00 03     .......p..p.....
     6ff:	00 e0 03 00 fc 01 80 3f 00 f0 07 00 fe 00 00 1f     .......?........
     70f:	00 00 03 00 00 0a f0 0f 00 fc 3f 00 0c 30 00 06     ..........?..0..
     71f:	60 00 06 60 00 06 60 00 06 60 00 0c 30 00 fc 3f     `..`..`..`..0..?
     72f:	00 f0 0f 00 08 18 60 00 18 60 00 18 60 00 fe 7f     ......`..`..`...
     73f:	00 fe 7f 00 00 60 00 00 60 00 00 60 00 09 0c 70     .....`..`..`...p
     74f:	00 06 78 00 06 6c 00 06 66 00 06 63 00 8e 61 00     ..x..l..f..c..a.
     75f:	fc 60 00 78 60 00 00 60 00 09 0c 30 00 06 60 00     .`.x`..`...0..`.
     76f:	06 60 00 86 61 00 86 61 00 86 61 00 ce 73 00 7c     .`..a..a..a..s.|
     77f:	3f 00 38 1e 00 0a 00 07 00 80 07 00 c0 07 00 f0     ?.8.............
     78f:	06 00 38 06 00 1c 06 00 fe 7f 00 fe 7f 00 00 06     ..8.............
     79f:	00 00 06 00 09 00 30 00 fe 60 00 fe 60 00 c6 60     ......0..`..`..`
     7af:	00 c6 60 00 c6 60 00 c6 31 00 86 3f 00 06 0f 00     ..`..`..1..?....
     7bf:	0a e0 0f 00 f0 3f 00 9c 30 00 cc 60 00 c6 60 00     .....?..0..`..`.
     7cf:	c6 60 00 c6 60 00 c6 31 00 86 3f 00 00 0f 00 09     .`..`..1..?.....
     7df:	06 00 00 06 40 00 06 70 00 06 7c 00 06 0f 00 c6     ....@..p..|.....
     7ef:	03 00 f6 00 00 3e 00 00 0e 00 00 0a 38 1e 00 7c     .....>......8..|
     7ff:	3f 00 ce 71 00 c6 60 00 c6 60 00 86 61 00 86 61     ?..q..`..`..a..a
     80f:	00 4e 73 00 7c 3f 00 38 1e 00 0a f0 00 00 fc 61     .Ns.|?.8.......a
     81f:	00 8c 63 00 06 63 00 06 63 00 06 63 00 06 33 00     ..c..c..c..c..3.
     82f:	0c 39 00 fc 1f 00 f0 07 00 02 70 70 00 70 70 00     .9........pp.pp.
     83f:	04 00 00 03 70 f0 03 70 70 00 00 10 00 0b 00 01     ....p..pp.......
     84f:	00 80 03 00 80 03 00 c0 06 00 c0 06 00 60 0c 00     .............`..
     85f:	60 0c 00 30 18 00 30 18 00 18 30 00 18 30 00 0b     `..0..0...0..0..
     86f:	c0 0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0     ................
     87f:	0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0 0c     ................
     88f:	00 0b 18 30 00 18 30 00 30 18 00 30 18 00 60 0c     ...0..0.0..0..`.
     89f:	00 60 0c 00 c0 06 00 c0 06 00 80 03 00 80 03 00     .`..............
     8af:	00 01 00 08 0c 00 00 06 00 00 06 67 00 06 67 00     ...........g..g.
     8bf:	86 01 00 ce 00 00 fc 00 00 38 00 00 10 c0 0f 00     .........8......
     8cf:	f0 3f 00 38 70 00 0c c0 00 84 8f 00 c6 9f 01 62     .?.8p..........b
     8df:	30 01 22 20 01 22 20 01 22 10 01 e2 3f 01 e4 bf     0." ." ."...?...
     8ef:	01 0c 20 00 38 20 00 f0 3f 00 c0 0f 00 0d 00 40     .. .8 ..?......@
     8ff:	00 00 78 00 00 3f 00 c0 07 00 f8 06 00 3e 06 00     ..x..?.......>..
     90f:	06 06 00 3e 06 00 f8 06 00 c0 07 00 00 3f 00 00     ...>.........?..
     91f:	78 00 00 40 00 0a fe 7f 00 fe 7f 00 86 61 00 86     x..@.........a..
     92f:	61 00 86 61 00 86 61 00 c6 61 00 7c 73 00 3c 3f     a..a..a..a.|s.<?
     93f:	00 00 1e 00 0b e0 07 00 f8 1f 00 1c 38 00 0c 30     ............8..0
     94f:	00 06 60 00 06 60 00 06 60 00 06 60 00 06 60 00     ..`..`..`..`..`.
     95f:	06 20 00 0c 30 00 0c fe 7f 00 fe 7f 00 06 60 00     . ..0.........`.
     96f:	06 60 00 06 60 00 06 60 00 06 60 00 0e 70 00 0c     .`..`..`..`..p..
     97f:	30 00 38 1c 00 f8 0f 00 e0 07 00 09 fe 7f 00 fe     0.8.............
     98f:	7f 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 c6 60     ...`..`..`..`..`
     99f:	00 c6 60 00 c6 60 00 09 fe 7f 00 fe 7f 00 86 01     ..`..`..........
     9af:	00 86 01 00 86 01 00 86 01 00 86 01 00 86 01 00     ................
     9bf:	06 00 00 0d e0 07 00 f8 1f 00 3c 3c 00 0c 30 00     ..........<<..0.
     9cf:	0e 70 00 06 60 00 06 60 00 06 63 00 06 63 00 06     .p..`..`..c..c..
     9df:	63 00 06 63 00 0c 3f 00 0c 3f 00 0a fe 7f 00 fe     c..c..?..?......
     9ef:	7f 00 c0 00 00 c0 00 00 c0 00 00 c0 00 00 c0 00     ................
     9ff:	00 c0 00 00 fe 7f 00 fe 7f 00 06 06 60 00 06 60     ............`..`
     a0f:	00 fe 7f 00 fe 7f 00 06 60 00 06 60 00 07 00 60     ........`..`...`
     a1f:	00 00 60 00 06 60 00 06 60 00 06 70 00 fe 3f 00     ..`..`..`..p..?.
     a2f:	fe 1f 00 0b fe 7f 00 fe 7f 00 80 03 00 c0 01 00     ................
     a3f:	e0 03 00 70 07 00 38 1c 00 1c 38 00 0e 70 00 06     ...p..8...8..p..
     a4f:	60 00 02 40 00 09 fe 7f 00 fe 7f 00 00 60 00 00     `..@.........`..
     a5f:	60 00 00 60 00 00 60 00 00 60 00 00 60 00 00 60     `..`..`..`..`..`
     a6f:	00 0c fe 7f 00 fe 7f 00 0e 00 00 38 00 00 e0 01     ...........8....
     a7f:	00 80 07 00 00 07 00 e0 01 00 38 00 00 0e 00 00     ..........8.....
     a8f:	fe 7f 00 fe 7f 00 0a fe 7f 00 fe 7f 00 0e 00 00     ................
     a9f:	3c 00 00 e0 00 00 80 03 00 00 1e 00 00 78 00 fe     <............x..
     aaf:	7f 00 fe 7f 00 0d e0 07 00 f8 1f 00 1c 38 00 0c     .............8..
     abf:	30 00 06 60 00 06 60 00 06 60 00 06 60 00 06 60     0..`..`..`..`..`
     acf:	00 0c 30 00 1c 38 00 f8 1f 00 e0 07 00 08 fe 7f     ..0..8..........
     adf:	00 fe 7f 00 06 03 00 06 03 00 06 03 00 8e 03 00     ................
     aef:	fc 01 00 f8 00 00 0d e0 07 00 f8 1f 00 1c 38 00     ..............8.
     aff:	0c 30 00 06 60 00 06 60 00 06 60 00 06 e0 01 06     .0..`..`..`.....
     b0f:	e0 03 0c 30 07 1c 38 06 f8 1f 06 e0 07 06 0b fe     ...0..8.........
     b1f:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 07     ................
     b2f:	00 ce 0e 00 fc 1c 00 78 70 00 00 60 00 00 40 00     .......xp..`..@.
     b3f:	0b 78 30 00 fc 70 00 ce 60 00 86 61 00 86 61 00     .x0..p..`..a..a.
     b4f:	86 61 00 86 61 00 86 61 00 06 33 00 0c 3f 00 00     .a..a..a..3..?..
     b5f:	1e 00 0c 06 00 00 06 00 00 06 00 00 06 00 00 06     ................
     b6f:	00 00 fe 7f 00 fe 7f 00 06 00 00 06 00 00 06 00     ................
     b7f:	00 06 00 00 06 00 00 0a fe 0f 00 fe 3f 00 00 70     ............?..p
     b8f:	00 00 60 00 00 60 00 00 60 00 00 60 00 00 70 00     ..`..`..`..`..p.
     b9f:	fe 3f 00 fe 0f 00 0d 02 00 00 1e 00 00 fc 00 00     .?..............
     baf:	e0 03 00 80 1f 00 00 7c 00 00 60 00 00 7c 00 80     .......|..`..|..
     bbf:	1f 00 e0 03 00 fc 00 00 1e 00 00 02 00 00 11 06     ................
     bcf:	00 00 7e 00 00 f8 07 00 80 3f 00 00 78 00 00 7c     ..~......?..x..|
     bdf:	00 c0 0f 00 7e 00 00 06 00 00 7e 00 00 e0 07 00     ....~.....~.....
     bef:	00 7e 00 00 70 00 80 7f 00 f8 07 00 7e 00 00 06     .~..p.......~...
     bff:	00 00 0b 02 40 00 06 60 00 1e 78 00 38 1c 00 e0     ....@..`..x.8...
     c0f:	07 00 80 01 00 e0 07 00 38 1e 00 1e 78 00 06 60     ........8...x..`
     c1f:	00 02 40 00 0c 02 00 00 06 00 00 1e 00 00 78 00     ..@...........x.
     c2f:	00 e0 00 00 c0 7f 00 c0 7f 00 e0 00 00 78 00 00     .............x..
     c3f:	1e 00 00 06 00 00 02 00 00 0b 06 70 00 06 78 00     ...........p..x.
     c4f:	06 7c 00 06 6e 00 06 67 00 c6 63 00 e6 60 00 76     .|..n..g..c..`.v
     c5f:	60 00 3e 60 00 1e 60 00 0e 60 00 05 ff ff 07 ff     `.>`..`..`......
     c6f:	ff 07 01 00 04 01 00 04 01 00 04 08 03 00 00 1f     ................
     c7f:	00 00 fe 00 00 f0 07 00 80 3f 00 00 fc 01 00 e0     .........?......
     c8f:	03 00 00 03 05 01 00 04 01 00 04 01 00 04 ff ff     ................
     c9f:	07 ff ff 07 0c 80 00 00 c0 00 00 60 00 00 38 00     ...........`..8.
     caf:	00 0c 00 00 06 00 00 06 00 00 1c 00 00 38 00 00     .............8..
     cbf:	60 00 00 c0 00 00 80 00 00 0c 00 00 02 00 00 02     `...............
     ccf:	00 00 02 00 00 02 00 00 02 00 00 02 00 00 02 00     ................
     cdf:	00 02 00 00 02 00 00 02 00 00 02 00 00 02 04 01     ................
     cef:	00 00 03 00 00 07 00 00 04 00 00 08 00 3c 00 30     .............<.0
     cff:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     d0f:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     d1f:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     d2f:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     d3f:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     d4f:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     d5f:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     d6f:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     d7f:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     d8f:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     d9f:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     daf:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     dbf:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     dcf:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     ddf:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     def:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     dff:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     e0f:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     e1f:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     e2f:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     e3f:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     e4f:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     e5f:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     e6f:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     e7f:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     e8f:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     e9f:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     eaf:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     ebf:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     ecf:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     edf:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     eef:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     eff:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     f0f:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     f1f:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     f2f:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     f3f:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     f4f:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     f5f:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     f6f:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     f7f:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000f8d <Verdana8>:
     f8d:	01 02 20 5f 0b 00 c3 00 c6 00 c9 00 d0 00 df 00     .. _............
     f9d:	ea 00 ff 01 0e 01 11 01 18 01 1f 01 2a 01 39 01     ............*.9.
     fad:	3e 01 45 01 48 01 53 01 5e 01 69 01 74 01 7f 01     >.E.H.S.^.i.t...
     fbd:	8c 01 97 01 a2 01 ad 01 b8 01 c3 01 c6 01 cb 01     ................
     fcd:	d8 01 e7 01 f4 01 fd 02 0e 02 1b 02 28 02 37 02     ............(.7.
     fdd:	46 02 51 02 5c 02 6b 02 78 02 7f 02 88 02 95 02     F.Q.\.k.x.......
     fed:	a0 02 af 02 bc 02 cb 02 d6 02 e5 02 f2 02 ff 03     ................
     ffd:	0e 03 1b 03 28 03 3b 03 48 03 57 03 64 03 6b 03     ....(.;.H.W.d.k.
    100d:	76 03 7d 03 8c 03 9b 03 a0 03 ab 03 b6 03 c1 03     v.}.............
    101d:	cc 03 d7 03 e0 03 eb 03 f6 03 f9 04 00 04 0b 04     ................
    102d:	0e 04 21 04 2c 04 37 04 42 04 4d 04 56 04 5f 04     ..!.,.7.B.M.V._.
    103d:	68 04 73 04 7e 04 8d 04 98 04 a3 04 ac 04 b7 04     h.s.~...........
    104d:	ba 04 c5 01 00 00 01 7e 01 03 07 00 00 00 07 00     .......~........
    105d:	07 40 00 c8 01 78 00 ce 01 78 00 4e 00 08 00 05     .@...x...x.N....
    106d:	18 01 24 01 ff 07 24 01 c4 00 0a 0c 00 12 00 12     ..$...$.........
    107d:	00 8c 01 60 00 18 00 c6 00 20 01 20 01 c0 00 07     ...`..... . ....
    108d:	ec 00 12 01 12 01 2c 01 c0 00 b0 00 00 01 01 07     ......,.........
    109d:	00 03 f8 00 06 03 01 04 03 01 04 06 03 f8 00 05     ................
    10ad:	0a 00 04 00 1f 00 04 00 0a 00 07 20 00 20 00 20     ........... . . 
    10bd:	00 fc 01 20 00 20 00 20 00 02 00 04 80 03 03 20     ... . . ....... 
    10cd:	00 20 00 20 00 01 80 01 05 00 03 c0 00 30 00 0c     . . .........0..
    10dd:	00 03 00 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
    10ed:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
    10fd:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
    110d:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
    111d:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
    112d:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
    113d:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
    114d:	00 7c 00 01 98 01 02 00 04 98 03 06 20 00 20 00     .|.......... . .
    115d:	50 00 50 00 88 00 88 00 07 50 00 50 00 50 00 50     P.P......P.P.P.P
    116d:	00 50 00 50 00 50 00 06 88 00 88 00 50 00 50 00     .P.P.P......P.P.
    117d:	20 00 20 00 04 02 00 62 01 12 00 0c 00 08 f8 00      . ....b........
    118d:	04 01 72 02 8a 02 8a 02 7a 02 82 00 7c 00 06 c0     ..r.....z...|...
    119d:	01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12 01     .x.F.F.x........
    11ad:	12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01 02     .........x......
    11bd:	01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02 01     ................
    11cd:	02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01 12     ....x...........
    11dd:	01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00 84     .............x..
    11ed:	00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10 00     ....."."........
    11fd:	10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01 04     ................
    120d:	00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00 48     ........... .0.H
    121d:	00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00 01     ................
    122d:	07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01 06     .......`........
    123d:	fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00 84     ......`......x..
    124d:	00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22 00     .........x....".
    125d:	22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01 02     "."....x........
    126d:	03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c 00     ...x....".".b...
    127d:	00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00 07     ........."."....
    128d:	02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06 fe     ................
    129d:	00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70 00     ..............p.
    12ad:	80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01 78     ....p......x...x
    12bd:	00 06 00 78 00 80 01 78 00 06 00 06 86 01 48 00     ...x...x......H.
    12cd:	30 00 30 00 48 00 86 01 07 02 00 04 00 08 00 f0     0.0.H...........
    12dd:	01 08 00 04 00 02 00 06 82 01 42 01 22 01 12 01     ..........B."...
    12ed:	0a 01 06 01 03 ff 07 01 04 01 04 05 03 00 0c 00     ................
    12fd:	30 00 c0 00 00 03 03 01 04 01 04 ff 07 07 10 00     0...............
    130d:	08 00 04 00 02 00 04 00 08 00 10 00 07 00 04 00     ................
    131d:	04 00 04 00 04 00 04 00 04 00 04 02 01 00 02 00     ................
    132d:	05 c0 00 28 01 28 01 28 01 f0 01 05 ff 01 08 01     ...(.(.(........
    133d:	08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01 90     ................
    134d:	00 05 f0 00 08 01 08 01 08 01 ff 01 05 f0 00 28     ...............(
    135d:	01 28 01 28 01 b0 00 04 08 00 fe 01 09 00 09 00     .(.(............
    136d:	05 f0 00 08 05 08 05 08 05 f8 03 05 ff 01 08 00     ................
    137d:	08 00 08 00 f0 01 01 f9 01 03 00 04 08 04 f9 03     ................
    138d:	05 ff 01 40 00 60 00 90 00 08 01 01 ff 01 09 f8     ...@.`..........
    139d:	01 08 00 08 00 08 00 f0 01 08 00 08 00 08 00 f0     ................
    13ad:	01 05 f8 01 08 00 08 00 08 00 f0 01 05 f0 00 08     ................
    13bd:	01 08 01 08 01 f0 00 05 f8 07 08 01 08 01 08 01     ................
    13cd:	f0 00 05 f0 00 08 01 08 01 08 01 f8 07 04 f8 01     ................
    13dd:	10 00 08 00 08 00 04 30 01 28 01 48 01 c8 00 04     .......0.(.H....
    13ed:	08 00 fe 00 08 01 08 01 05 f8 00 00 01 00 01 00     ................
    13fd:	01 f8 01 05 18 00 60 00 80 01 60 00 18 00 07 78     ......`...`....x
    140d:	00 80 01 60 00 18 00 60 00 80 01 78 00 05 08 01     ...`...`...x....
    141d:	90 00 60 00 90 00 08 01 05 08 00 70 04 80 03 70     ..`........p...p
    142d:	00 08 00 04 88 01 48 01 28 01 18 01                 ......H.(...

00001439 <lcd_commmands>:
    1439:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00001447 <pagemap>:
    1447:	07 06 05 04 03 02 01 00                             ........

0000144f <text_menu>:
    144f:	f6 20 53 1a 4e 1a 49 1a 44 1a 3f 1a 3a 1a 35 1a     . S.N.I.D.?.:.5.
    145f:	30 1a d8 23 d0 23 d6 23 d4 23 d2 23 cb 23 c6 23     0..#.#.#.#.#.#.#
    146f:	c1 23 bc 23 b2 1c d2 1c cd 1c c7 1c ba 20 e2 23     .#.#......... .#
    147f:	da 23 f0 21 11 22 0c 22 06 22 02 22 fe 21 fa 21     .#.!.".".".".!.!
    148f:	18 1d 0f 1d 20 1d 08 1d 03 1d 79 1a 74 1a 6f 1a     .... .....y.t.o.
    149f:	6a 1a 65 1a 5f 1a 59 1a ef 1c 58 1a 4c 1d 44 1d     j.e._.Y...X.L.D.
    14af:	4c 1f 47 1f 44 1f 3a 1f 30 1f a7 1a 9f 1a 9a 1a     L.G.D.:.0.......
    14bf:	37 1d 32 1d 29 1d 88 1c f5 21 7c 1c 58 1a 58 1a     7.2.)....!|.X.X.
    14cf:	58 1a 58 1a 58 1a 58 1a f6 20 f3 20 bf 1a c6 1a     X.X.X.X.. . ....
    14df:	b5 1a 1b 19 58 1a df 1c d8 1c ab 23 99 23 86 23     ....X......#.#.#
    14ef:	74 23 5e 23 4f 23 3b 23 27 23 1d 23 0a 23 fb 22     t#^#O#;#'#.#.#."
    14ff:	ec 22 dd 22 ce 22 bf 22 b0 22 a1 22 92 22 7e 22     ."."."."."."."~"
    150f:	65 22 4c 22 37 22 24 22 16 22 58 1a 58 1a 58 1a     e"L"7"$"."X.X.X.
    151f:	58 1a 20 1d 18 1d 0f 1d 08 1d 03 1d fe 1c f9 1c     X. .............
    152f:	f4 1c ef 1c e8 1c e2 1c 58 1a 58 1a bb 1c ad 1a     ........X.X.....
    153f:	9a 1a 44 1c 38 1c 58 1a f5 1b ec 1b e3 1b df 1b     ..D.8.X.........
    154f:	d6 1b ce 1b 05 20 fe 1f f4 1f ed 1f bf 1c 5d 1c     ..... ........].
    155f:	4f 1c 4a 1c 30 1c 25 1c 58 1a cf 1a c6 1a 0c 22     O.J.0.%.X......"
    156f:	06 22 02 22 ea 20 aa 1f e0 20 d5 20 c6 20 65 20     .".". ... . . e 
    157f:	55 20 aa 20 9a 20 89 20 76 20 45 20 e0 1f d3 1f     U . . . v E ....
    158f:	c9 1f c1 1f b4 1f 7d 1f 7d 1a a0 1f 96 1f 8a 1f     ......}.}.......
    159f:	75 1f 6d 1f 58 1a 58 1a e8 21 e0 21 d2 21 c5 21     u.m.X.X..!.!.!.!
    15af:	b5 21 9b 21 92 21 89 21 7a 21 6c 21 5b 21 4f 21     .!.!.!.!z!l![!O!
    15bf:	48 21 41 21 34 21 28 21 1e 21 14 21 0a 21 fa 20     H!A!4!(!.!.!.!. 
    15cf:	28 1f 18 1f 08 1f fa 1e ea 1e da 1e ca 1e ba 1e     (...............
    15df:	aa 1e 9a 1e 8c 1e 7e 1e 6f 1e 60 1e 53 1e 46 1e     ......~.o.`.S.F.
    15ef:	3a 1e 2e 1e 16 1e 09 1e fb 1d ed 1d e0 1d d5 1d     :...............
    15ff:	c8 1d bd 1d b0 1d d5 1d a3 1d bd 1d 58 1a 58 1a     ............X.X.
    160f:	58 1a 58 1a 4c 1d 44 1d 3e 1d a5 19 20 1c 1b 1c     X.X.L.D.>... ...
    161f:	16 1c 11 1c 0c 1c 07 1c 02 1c fd 1b 58 1a 58 1a     ............X.X.
    162f:	58 1a 58 1a 58 1a 58 1a 58 1a 58 1a 58 1a 58 1a     X.X.X.X.X.X.X.X.
    163f:	58 1a 58 1a 58 1a 58 1a 58 1a ef 1c 4c 1d 44 1d     X.X.X.X.X...L.D.
    164f:	3e 1d 58 1a 58 1a 73 1c 6a 1c a8 1c a2 1c 96 1c     >.X.X.s.j.......
    165f:	03 24 fd 23 ea 20 f4 23 f2 23 f0 23 95 1a 91 1a     .$.#. .#.#.#....
    166f:	8a 1a 23 1a 1c 1a 12 1a 2a 1a 0a 1a 58 1a 58 1a     ..#.....*...X.X.
    167f:	b6 23 f0 19 e3 19 58 1a dc 19 ce 19 bd 19 b0 19     .#....X.........
    168f:	58 1a e7 23 58 1a aa 19 58 1a 58 1a 58 1a c5 1b     X..#X...X.X.X...
    169f:	bc 1b b2 1b a8 1b 9e 1b 94 1b 8c 1b 81 1b 76 1b     ..............v.
    16af:	6a 1b 5e 1b 53 1b 48 1b 3c 1b 33 1b 28 1b 1e 1b     j.^.S.H.<.3.(...
    16bf:	13 1b 0b 1b 01 1b f6 1a eb 1a e2 1a d6 1a 58 1a     ..............X.
    16cf:	df 1c 8c 19 97 19 58 1a 60 1f 53 1f 51 1f 4f 1f     ......X.`.S.Q.O.
    16df:	e8 21 e0 21 d2 21 c5 21 a6 21 9b 21 92 21 89 21     .!.!.!.!.!.!.!.!
    16ef:	7a 21 6c 21 5b 21 4f 21 48 21 41 21 34 21 28 21     z!l![!O!H!A!4!(!
    16ff:	1e 21 14 21 0a 21 fa 20 28 1f 18 1f 08 1f fa 1e     .!.!.!. (.......
    170f:	ea 1e da 1e ca 1e ba 1e aa 1e 9a 1e 8c 1e 7e 1e     ..............~.
    171f:	6f 1e 60 1e 53 1e 46 1e 23 1e 2e 1e 16 1e 09 1e     o.`.S.F.#.......
    172f:	fb 1d ed 1d e0 1d d5 1d c8 1d bd 1d b0 1d d5 1d     ................
    173f:	a3 1d bd 1d 58 1a 58 1a 58 1a 58 1a 58 1a 58 1a     ....X.X.X.X.X.X.
    174f:	84 18 75 18 66 18 57 18 48 18 39 18 2a 18 1b 18     ..u.f.W.H.9.*...
    175f:	58 1a 58 1a 58 1a 58 1a 40 20 3c 20 36 20 2d 20     X.X.X.X.@ < 6 - 
    176f:	26 20 1b 20 11 20 7a 19 68 19 54 19 40 19 30 19     & . . z.h.T.@.0.
    177f:	20 19 58 1a 17 19 13 19 0f 19 0b 19 06 19 01 19      .X.............
    178f:	fc 18 f7 18 ef 1c 58 1a 58 1a 17 19 e4 18 dc 18     ......X.X.......
    179f:	ec 18 17 19 13 19 0f 19 0b 19 06 19 01 19 fc 18     ................
    17af:	f7 18 9a 1d 90 1d 88 1d 82 1d 7c 1d 6e 1d 65 1d     ..........|.n.e.
    17bf:	54 1d ef 1c 17 19 e4 18 dc 18 ec 18 17 19 13 19     T...............
    17cf:	0f 19 0b 19 06 19 01 19 fc 18 f7 18 9a 1d 90 1d     ................
    17df:	88 1d 76 1d 7c 1d 5e 1d 65 1d 54 1d ef 1c 58 1a     ..v.|.^.e.T...X.
    17ef:	58 1a 58 1a 58 1a 58 1a d9 18 d6 18 d3 18 d0 18     X.X.X.X.........
    17ff:	cd 18 ca 18 c7 18 c4 18 c0 18 bb 18 b6 18 b1 18     ................
    180f:	ac 18 a7 18 a2 18 9d 18 98 18 93 18                 ............

0000181b <Ch8>:
    181b:	43 68 2e 38 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.8 Function:.

0000182a <Ch7>:
    182a:	43 68 2e 37 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.7 Function:.

00001839 <Ch6>:
    1839:	43 68 2e 36 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.6 Function:.

00001848 <Ch5>:
    1848:	43 68 2e 35 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.5 Function:.

00001857 <Ch4>:
    1857:	43 68 2e 34 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.4 Function:.

00001866 <Ch3>:
    1866:	43 68 2e 33 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.3 Function:.

00001875 <Ch2>:
    1875:	43 68 2e 32 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.2 Function:.

00001884 <Ch1>:
    1884:	43 68 2e 31 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.1 Function:.

00001893 <O7>:
    1893:	41 58 33 3a 00                                      AX3:.

00001898 <O6>:
    1898:	41 58 32 3a 00                                      AX2:.

0000189d <O5>:
    189d:	41 58 31 3a 00                                      AX1:.

000018a2 <O4>:
    18a2:	47 45 52 3a 00                                      GER:.

000018a7 <O3>:
    18a7:	52 55 44 3a 00                                      RUD:.

000018ac <O2>:
    18ac:	45 4c 45 3a 00                                      ELE:.

000018b1 <O1>:
    18b1:	41 49 4c 3a 00                                      AIL:.

000018b6 <O0>:
    18b6:	54 48 52 3a 00                                      THR:.

000018bb <I10>:
    18bb:	4f 55 54 3a 00                                      OUT:.

000018c0 <I9>:
    18c0:	50 6e 3a 00                                         Pn:.

000018c4 <I8>:
    18c4:	38 3a 00                                            8:.

000018c7 <I7>:
    18c7:	37 3a 00                                            7:.

000018ca <I6>:
    18ca:	36 3a 00                                            6:.

000018cd <I5>:
    18cd:	35 3a 00                                            5:.

000018d0 <I4>:
    18d0:	34 3a 00                                            4:.

000018d3 <I3>:
    18d3:	33 3a 00                                            3:.

000018d6 <I2>:
    18d6:	32 3a 00                                            2:.

000018d9 <I1>:
    18d9:	31 3a 00                                            1:.

000018dc <Uni4>:
    18dc:	43 75 72 76 65 20 44 00                             Curve D.

000018e4 <Uni3>:
    18e4:	43 75 72 76 65 20 43 00                             Curve C.

000018ec <Uni1>:
    18ec:	43 6f 6c 6c 65 63 74 69 76 65 00                    Collective.

000018f7 <Chan7>:
    18f7:	41 55 58 33 00                                      AUX3.

000018fc <Chan6>:
    18fc:	41 55 58 32 00                                      AUX2.

00001901 <Chan5>:
    1901:	41 55 58 31 00                                      AUX1.

00001906 <Chan4>:
    1906:	47 45 41 52 00                                      GEAR.

0000190b <Chan3>:
    190b:	52 55 44 00                                         RUD.

0000190f <Chan2>:
    190f:	45 4c 45 00                                         ELE.

00001913 <Chan1>:
    1913:	41 49 4c 00                                         AIL.

00001917 <Chan0>:
    1917:	54 48 52 00                                         THR.

0000191b <Misc_1>:
    191b:	43 52 43 3a 00                                      CRC:.

00001920 <Curve_5>:
    1920:	47 65 6e 65 72 69 63 20 43 75 72 76 65 20 44 00     Generic Curve D.

00001930 <Curve_4>:
    1930:	47 65 6e 65 72 69 63 20 43 75 72 76 65 20 43 00     Generic Curve C.

00001940 <Curve_3>:
    1940:	50 32 20 43 6f 6c 6c 65 63 74 69 76 65 20 43 75     P2 Collective Cu
    1950:	72 76 65 00                                         rve.

00001954 <Curve_2>:
    1954:	50 31 20 43 6f 6c 6c 65 63 74 69 76 65 20 43 75     P1 Collective Cu
    1964:	72 76 65 00                                         rve.

00001968 <Curve_1>:
    1968:	50 32 20 54 68 72 6f 74 74 6c 65 20 43 75 72 76     P2 Throttle Curv
    1978:	65 00                                               e.

0000197a <Curve_0>:
    197a:	50 31 20 54 68 72 6f 74 74 6c 65 20 43 75 72 76     P1 Throttle Curv
    198a:	65 00                                               e.

0000198c <Reference_1>:
    198c:	45 61 72 74 68 20 72 65 66 2e 00                    Earth ref..

00001997 <Reference_0>:
    1997:	56 65 72 74 2e 20 41 50 20 72 65 66 2e 00           Vert. AP ref..

000019a5 <Misc_Msg01>:
    19a5:	41 6c 74 2e 00                                      Alt..

000019aa <ERROR_MSG_0>:
    19aa:	43 6c 65 61 72 00                                   Clear.

000019b0 <ERROR_3>:
    19b0:	44 69 73 61 72 6d 20 74 69 6d 65 72 00              Disarm timer.

000019bd <ERROR_2>:
    19bd:	4e 6f 20 73 69 67 6e 61 6c 20 64 69 73 61 72 6d     No signal disarm
	...

000019ce <ERROR_1>:
    19ce:	4d 61 6e 75 61 6c 20 64 69 73 61 72 6d 00           Manual disarm.

000019dc <ERROR_0>:
    19dc:	52 65 62 6f 6f 74 00                                Reboot.

000019e3 <WARNING_1>:
    19e3:	52 45 4d 4f 56 45 20 50 52 4f 50 53 00              REMOVE PROPS.

000019f0 <WARNING_0>:
    19f0:	57 41 52 4e 49 4e 47 20 2d 20 45 72 61 73 65 73     WARNING - Erases
    1a00:	20 73 65 74 74 69 6e 67 73 00                        settings.

00001a0a <PRESET_4>:
    1a0a:	4f 70 74 69 6f 6e 73 00                             Options.

00001a12 <PRESET_3>:
    1a12:	54 72 69 63 6f 70 74 65 72 00                       Tricopter.

00001a1c <PRESET_2>:
    1a1c:	51 75 61 64 20 50 00                                Quad P.

00001a23 <PRESET_1>:
    1a23:	51 75 61 64 20 58 00                                Quad X.

00001a2a <PRESET_0>:
    1a2a:	42 6c 61 6e 6b 00                                   Blank.

00001a30 <VBAT39>:
    1a30:	33 2e 39 56 00                                      3.9V.

00001a35 <VBAT38>:
    1a35:	33 2e 38 56 00                                      3.8V.

00001a3a <VBAT37>:
    1a3a:	33 2e 37 56 00                                      3.7V.

00001a3f <VBAT36>:
    1a3f:	33 2e 36 56 00                                      3.6V.

00001a44 <VBAT35>:
    1a44:	33 2e 35 56 00                                      3.5V.

00001a49 <VBAT34>:
    1a49:	33 2e 34 56 00                                      3.4V.

00001a4e <VBAT33>:
    1a4e:	33 2e 33 56 00                                      3.3V.

00001a53 <VBAT32>:
    1a53:	33 2e 32 56 00                                      3.2V.

00001a58 <Dummy0>:
	...

00001a59 <MPU6050LPF7>:
    1a59:	32 36 30 48 7a 00                                   260Hz.

00001a5f <MPU6050LPF6>:
    1a5f:	31 38 34 48 7a 00                                   184Hz.

00001a65 <MPU6050LPF5>:
    1a65:	39 34 48 7a 00                                      94Hz.

00001a6a <MPU6050LPF4>:
    1a6a:	34 34 48 7a 00                                      44Hz.

00001a6f <MPU6050LPF3>:
    1a6f:	32 31 48 7a 00                                      21Hz.

00001a74 <MPU6050LPF2>:
    1a74:	31 30 48 7a 00                                      10Hz.

00001a79 <MPU6050LPF1>:
    1a79:	35 48 7a 00                                         5Hz.

00001a7d <GeneralText10>:
    1a7d:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001a8a <Random12>:
    1a8a:	73 69 67 6e 61 6c 00                                signal.

00001a91 <Random11>:
    1a91:	6c 6f 77 00                                         low.

00001a95 <Random10>:
    1a95:	68 69 67 68 00                                      high.

00001a9a <Random1>:
    1a9a:	48 69 67 68 00                                      High.

00001a9f <Safety2>:
    1a9f:	41 72 6d 61 62 6c 65 00                             Armable.

00001aa7 <Safety1>:
    1aa7:	41 72 6d 65 64 00                                   Armed.

00001aad <GeneralText5>:
    1aad:	53 79 6e 63 20 52 43 00                             Sync RC.

00001ab5 <MixerItem16>:
    1ab5:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

00001abf <MixerItem15>:
    1abf:	53 63 61 6c 65 64 00                                Scaled.

00001ac6 <MixerItem12>:
    1ac6:	52 65 76 65 72 73 65 64 00                          Reversed.

00001acf <MixerItem11>:
    1acf:	4e 6f 72 6d 61 6c 00                                Normal.

00001ad6 <Orientation24>:
    1ad6:	52 69 67 68 74 2d 46 72 6f 6e 74 00                 Right-Front.

00001ae2 <Orientation23>:
    1ae2:	52 69 67 68 74 2d 55 70 00                          Right-Up.

00001aeb <Orientation22>:
    1aeb:	52 69 67 68 74 2d 42 61 63 6b 00                    Right-Back.

00001af6 <Orientation21>:
    1af6:	52 69 67 68 74 2d 44 6f 77 6e 00                    Right-Down.

00001b01 <Orientation20>:
    1b01:	4c 65 66 74 2d 42 61 63 6b 00                       Left-Back.

00001b0b <Orientation19>:
    1b0b:	4c 65 66 74 2d 55 70 00                             Left-Up.

00001b13 <Orientation18>:
    1b13:	4c 65 66 74 2d 46 72 6f 6e 74 00                    Left-Front.

00001b1e <Orientation17>:
    1b1e:	4c 65 66 74 2d 44 6f 77 6e 00                       Left-Down.

00001b28 <Orientation16>:
    1b28:	46 72 6f 6e 74 2d 4c 65 66 74 00                    Front-Left.

00001b33 <Orientation15>:
    1b33:	46 72 6f 6e 74 2d 55 70 00                          Front-Up.

00001b3c <Orientation14>:
    1b3c:	46 72 6f 6e 74 2d 52 69 67 68 74 00                 Front-Right.

00001b48 <Orientation13>:
    1b48:	46 72 6f 6e 74 2d 44 6f 77 6e 00                    Front-Down.

00001b53 <Orientation12>:
    1b53:	42 6f 74 74 2e 2d 4c 65 66 74 00                    Bott.-Left.

00001b5e <Orientation11>:
    1b5e:	42 6f 74 74 2e 2d 46 72 6f 6e 74 00                 Bott.-Front.

00001b6a <Orientation10>:
    1b6a:	42 6f 74 74 2e 2d 52 69 67 68 74 00                 Bott.-Right.

00001b76 <Orientation9>:
    1b76:	42 6f 74 74 2e 2d 42 61 63 6b 00                    Bott.-Back.

00001b81 <Orientation8>:
    1b81:	42 61 63 6b 2d 52 69 67 68 74 00                    Back-Right.

00001b8c <Orientation7>:
    1b8c:	42 61 63 6b 2d 55 70 00                             Back-Up.

00001b94 <Orientation6>:
    1b94:	42 61 63 6b 2d 4c 65 66 74 00                       Back-Left.

00001b9e <Orientation5>:
    1b9e:	42 61 63 6b 2d 44 6f 77 6e 00                       Back-Down.

00001ba8 <Orientation4>:
    1ba8:	54 6f 70 2d 52 69 67 68 74 00                       Top-Right.

00001bb2 <Orientation3>:
    1bb2:	54 6f 70 2d 46 72 6f 6e 74 00                       Top-Front.

00001bbc <Orientation2>:
    1bbc:	54 6f 70 2d 4c 65 66 74 00                          Top-Left.

00001bc5 <Orientation1>:
    1bc5:	54 6f 70 2d 52 65 61 72 00                          Top-Rear.

00001bce <MixerMenuItem7>:
    1bce:	50 69 74 63 68 55 70 00                             PitchUp.

00001bd6 <MixerMenuItem6>:
    1bd6:	53 69 64 65 77 61 79 73 00                          Sideways.

00001bdf <MixerMenuItem5>:
    1bdf:	41 66 74 00                                         Aft.

00001be3 <MixerMenuItem4>:
    1be3:	49 6e 76 65 72 74 65 64 00                          Inverted.

00001bec <MixerMenuItem3>:
    1bec:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001bf5 <MixerMenuItem2>:
    1bf5:	46 6f 72 77 61 72 64 00                             Forward.

00001bfd <MOUT8>:
    1bfd:	4f 55 54 38 00                                      OUT8.

00001c02 <MOUT7>:
    1c02:	4f 55 54 37 00                                      OUT7.

00001c07 <MOUT6>:
    1c07:	4f 55 54 36 00                                      OUT6.

00001c0c <MOUT5>:
    1c0c:	4f 55 54 35 00                                      OUT5.

00001c11 <MOUT4>:
    1c11:	4f 55 54 34 00                                      OUT4.

00001c16 <MOUT3>:
    1c16:	4f 55 54 33 00                                      OUT3.

00001c1b <MOUT2>:
    1c1b:	4f 55 54 32 00                                      OUT2.

00001c20 <MOUT1>:
    1c20:	4f 55 54 31 00                                      OUT1.

00001c25 <Status5>:
    1c25:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001c30 <Status4>:
    1c30:	28 41 72 6d 65 64 29 00                             (Armed).

00001c38 <Status2>:
    1c38:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

00001c44 <Status0>:
    1c44:	50 72 65 73 73 00                                   Press.

00001c4a <WizardText2>:
    1c4a:	44 6f 6e 65 00                                      Done.

00001c4f <WizardText1>:
    1c4f:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001c5d <WizardText0>:
    1c5d:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

00001c6a <PText6>:
    1c6a:	73 65 74 74 69 6e 67 73 00                          settings.

00001c73 <PText5>:
    1c73:	55 70 64 61 74 69 6e 67 00                          Updating.

00001c7c <PText4>:
    1c7c:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

00001c88 <PText3>:
    1c88:	45 53 43 20 63 61 6c 69 62 72 61 74 65 00           ESC calibrate.

00001c96 <PText2>:
    1c96:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

00001ca2 <PText1>:
    1ca2:	52 65 73 65 74 00                                   Reset.

00001ca8 <PText0>:
    1ca8:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

00001cb2 <Disarmed>:
    1cb2:	44 69 73 61 72 6d 65 64 00                          Disarmed.

00001cbb <ErrorText10>:
    1cbb:	4c 6f 77 00                                         Low.

00001cbf <Status3>:
    1cbf:	42 61 74 74 65 72 79 00                             Battery.

00001cc7 <ErrorText7>:
    1cc7:	4d 6f 64 65 6c 00                                   Model.

00001ccd <ErrorText6>:
    1ccd:	4c 6f 73 74 00                                      Lost.

00001cd2 <ErrorText5>:
    1cd2:	45 72 72 6f 72 00                                   Error.

00001cd8 <ErrorText4>:
    1cd8:	53 69 67 6e 61 6c 00                                Signal.

00001cdf <ErrorText3>:
    1cdf:	4e 6f 00                                            No.

00001ce2 <ChannelRef12>:
    1ce2:	45 6c 65 76 2e 00                                   Elev..

00001ce8 <ChannelRef10>:
    1ce8:	54 68 72 6f 74 2e 00                                Throt..

00001cef <ChannelRef8>:
    1cef:	4e 6f 6e 65 00                                      None.

00001cf4 <ChannelRef7>:
    1cf4:	41 55 58 33 00                                      AUX3.

00001cf9 <ChannelRef6>:
    1cf9:	41 55 58 32 00                                      AUX2.

00001cfe <ChannelRef5>:
    1cfe:	41 55 58 31 00                                      AUX1.

00001d03 <ChannelRef4>:
    1d03:	47 65 61 72 00                                      Gear.

00001d08 <ChannelRef3>:
    1d08:	52 75 64 64 65 72 00                                Rudder.

00001d0f <ChannelRef2>:
    1d0f:	45 6c 65 76 61 74 6f 72 00                          Elevator.

00001d18 <ChannelRef1>:
    1d18:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001d20 <ChannelRef0>:
    1d20:	54 68 72 6f 74 74 6c 65 00                          Throttle.

00001d29 <MixerItem62>:
    1d29:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

00001d32 <MixerItem61>:
    1d32:	53 69 6e 65 00                                      Sine.

00001d37 <MixerItem60>:
    1d37:	4c 69 6e 65 61 72 00                                Linear.

00001d3e <MixerItem49>:
    1d3e:	4d 6f 74 6f 72 00                                   Motor.

00001d44 <MixerItem41>:
    1d44:	44 2e 53 65 72 76 6f 00                             D.Servo.

00001d4c <MixerItem40>:
    1d4c:	41 2e 53 65 72 76 6f 00                             A.Servo.

00001d54 <MixerItem420>:
    1d54:	41 6c 74 2e 20 64 61 6d 70 00                       Alt. damp.

00001d5e <MixerItem800>:
    1d5e:	41 4c 20 59 61 77 00                                AL Yaw.

00001d65 <MixerItem81>:
    1d65:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001d6e <MixerItem80>:
    1d6e:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

00001d76 <MixerItemP730>:
    1d76:	41 63 63 20 5a 00                                   Acc Z.

00001d7c <MixerItemP74>:
    1d7c:	41 63 63 20 59 00                                   Acc Y.

00001d82 <MixerItemP73>:
    1d82:	41 63 63 20 58 00                                   Acc X.

00001d88 <MixerItem72>:
    1d88:	47 79 72 6f 59 61 77 00                             GyroYaw.

00001d90 <MixerItem71>:
    1d90:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

00001d9a <MixerItem70>:
    1d9a:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001da3 <MixerItem31>:
    1da3:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

00001db0 <MixerItem21>:
    1db0:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

00001dbd <MixerItem30>:
    1dbd:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

00001dc8 <MixerItem29>:
    1dc8:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

00001dd5 <MixerItem2>:
    1dd5:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

00001de0 <MixerItem0>:
    1de0:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

00001ded <MixerItem43>:
    1ded:	50 32 20 41 6c 74 2e 20 64 61 6d 70 3a 00           P2 Alt. damp:.

00001dfb <MixerItem42>:
    1dfb:	50 31 20 41 6c 74 2e 20 64 61 6d 70 3a 00           P1 Alt. damp:.

00001e09 <MixerItem28>:
    1e09:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001e16 <MixerItem3>:
    1e16:	50 31 20 50 69 74 63 68 20 41 4c 3a 00              P1 Pitch AL:.

00001e23 <MixerItem700>:
    1e23:	50 31 20 59 61 77 20 41 4c 3a 00                    P1 Yaw AL:.

00001e2e <MixerItem27>:
    1e2e:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

00001e3a <MixerItem7>:
    1e3a:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001e46 <MixerItem26>:
    1e46:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001e53 <MixerItem6>:
    1e53:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

00001e60 <MixerItem25>:
    1e60:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

00001e6f <MixerItem5>:
    1e6f:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

00001e7e <MixerItem24>:
    1e7e:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

00001e8c <MixerItem4>:
    1e8c:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

00001e9a <MixerItem56>:
    1e9a:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

00001eaa <MixerItem53>:
    1eaa:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001eba <MixerItem55>:
    1eba:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

00001eca <MixerItem52>:
    1eca:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

00001eda <MixerItem54>:
    1eda:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

00001eea <MixerItem51>:
    1eea:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

00001efa <Mixeritem50>:
    1efa:	54 72 61 6e 73 2e 20 63 75 72 76 65 3a 00           Trans. curve:.

00001f08 <MixerItem33>:
    1f08:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

00001f18 <MixerItem23>:
    1f18:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

00001f28 <MixerItem1>:
    1f28:	44 65 76 69 63 65 3a 00                             Device:.

00001f30 <P5text>:
    1f30:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

00001f3a <P4text>:
    1f3a:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

00001f44 <P3text>:
    1f44:	50 32 00                                            P2.

00001f47 <P2text>:
    1f47:	50 31 2e 6e 00                                      P1.n.

00001f4c <P1text>:
    1f4c:	50 31 00                                            P1.

00001f4f <AdvancedDummy1>:
    1f4f:	20 00                                                .

00001f51 <AdvancedDummy0>:
    1f51:	20 00                                                .

00001f53 <MixerMenuItem8>:
    1f53:	50 31 20 72 65 66 72 6e 63 65 2e 3a 00              P1 refrnce.:.

00001f60 <MixerMenuItem1>:
    1f60:	50 31 20 6f 72 69 65 6e 74 6e 2e 3a 00              P1 orientn.:.

00001f6d <GeneralText21>:
    1f6d:	42 75 7a 7a 65 72 3a 00                             Buzzer:.

00001f75 <GeneralText20>:
    1f75:	50 72 65 73 65 74 3a 00                             Preset:.

00001f7d <BattMenuItem2>:
    1f7d:	4c 6f 77 20 56 20 61 6c 61 72 6d 3a 00              Low V alarm:.

00001f8a <GeneralText7>:
    1f8a:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

00001f96 <GeneralText16>:
    1f96:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

00001fa0 <GeneralText6>:
    1fa0:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

00001faa <GeneralText3>:
    1faa:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

00001fb4 <GeneralText2>:
    1fb4:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

00001fc1 <AutoMenuItem2>:
    1fc1:	53 61 66 65 74 79 3a 00                             Safety:.

00001fc9 <Contrast>:
    1fc9:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

00001fd3 <GeneralText100>:
    1fd3:	54 61 69 6c 20 73 69 74 74 65 72 3a 00              Tail sitter:.

00001fe0 <MixerMenuItem0>:
    1fe0:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

00001fed <RCMenuItem9>:
    1fed:	43 75 73 74 6f 6d 00                                Custom.

00001ff4 <RCMenuItem8>:
    1ff4:	4d 75 6c 74 69 70 6c 65 78 00                       Multiplex.

00001ffe <RCMenuItem7>:
    1ffe:	46 75 74 61 62 61 00                                Futaba.

00002005 <RCMenuItem6>:
    2005:	4a 52 2f 53 70 65 6b 74 72 75 6d 00                 JR/Spektrum.

00002011 <RXMode6>:
    2011:	48 6f 54 54 20 53 55 4d 44 00                       HoTT SUMD.

0000201b <RXMode5>:
    201b:	4d 6f 64 65 20 42 2f 55 44 49 00                    Mode B/UDI.

00002026 <RXMode4>:
    2026:	58 74 72 65 6d 65 00                                Xtreme.

0000202d <RXMode3>:
    202d:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

00002036 <RXMode2>:
    2036:	53 2d 42 75 73 00                                   S-Bus.

0000203c <RXMode1>:
    203c:	50 57 4d 00                                         PWM.

00002040 <RXMode0>:
    2040:	43 50 50 4d 00                                      CPPM.

00002045 <RCMenuItem300>:
    2045:	41 63 63 56 65 72 74 20 66 69 6c 74 65 72 3a 00     AccVert filter:.

00002055 <TransitionIn>:
    2055:	49 6e 62 6f 75 6e 64 20 74 72 61 6e 73 2e 3a 00     Inbound trans.:.

00002065 <TransitionOut>:
    2065:	4f 75 74 62 6f 75 6e 64 20 74 72 61 6e 73 2e 3a     Outbound trans.:
	...

00002076 <RCMenuItem30>:
    2076:	56 69 62 72 61 74 69 6f 6e 20 64 69 73 70 6c 61     Vibration displa
    2086:	79 3a 00                                            y:.

00002089 <Transition_P2>:
    2089:	54 72 61 6e 73 69 74 69 6f 6e 20 68 69 67 68 3a     Transition high:
	...

0000209a <Transition_P1n>:
    209a:	54 72 61 6e 73 69 74 69 6f 6e 20 6d 69 64 3a 00     Transition mid:.

000020aa <Transition_P1>:
    20aa:	54 72 61 6e 73 69 74 69 6f 6e 20 6c 6f 77 3a 00     Transition low:.

000020ba <Transition>:
    20ba:	54 72 61 6e 73 69 74 69 6f 6e 3a 00                 Transition:.

000020c6 <RCMenuItem2>:
    20c6:	50 72 6f 66 69 6c 65 20 63 68 61 6e 2e 3a 00        Profile chan.:.

000020d5 <RCMenuItem0>:
    20d5:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

000020e0 <RCMenuItem20>:
    20e0:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

000020ea <RCMenuItem1>:
    20ea:	52 58 20 74 79 70 65 3a 00                          RX type:.

000020f3 <AutoMenuItem15>:
    20f3:	4f 4e 00                                            ON.

000020f6 <AutoMenuItem11>:
    20f6:	4f 46 46 00                                         OFF.

000020fa <StabMenuItem132>:
    20fa:	5a 2d 61 78 69 73 20 49 20 6c 69 6d 69 74 3a 00     Z-axis I limit:.

0000210a <StabMenuItem131>:
    210a:	5a 2d 61 78 69 73 20 49 3a 00                       Z-axis I:.

00002114 <StabMenuItem13>:
    2114:	5a 2d 61 78 69 73 20 50 3a 00                       Z-axis P:.

0000211e <StabMenuItem30>:
    211e:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

00002128 <StabMenuItem9>:
    2128:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

00002134 <StabMenuItem12>:
    2134:	59 61 77 20 49 20 6c 69 6d 69 74 3a 00              Yaw I limit:.

00002141 <StabMenuItem8>:
    2141:	59 61 77 20 49 3a 00                                Yaw I:.

00002148 <StabMenuItem7>:
    2148:	59 61 77 20 50 3a 00                                Yaw P:.

0000214f <AutoMenuItem8>:
    214f:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

0000215b <AutoMenuItem21>:
    215b:	50 69 74 63 68 20 61 75 74 6f 6c 65 76 65 6c 3a     Pitch autolevel:
	...

0000216c <StabMenuItem6>:
    216c:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

0000217a <StabMenuItem11>:
    217a:	50 69 74 63 68 20 49 20 6c 69 6d 69 74 3a 00        Pitch I limit:.

00002189 <StabMenuItem5>:
    2189:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00002192 <AutoMenuItem4>:
    2192:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

0000219b <AutoMenuItem7>:
    219b:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

000021a6 <AutoMenuItem200>:
    21a6:	59 61 77 20 61 75 74 6f 6c 65 76 65 6c 3a 00        Yaw autolevel:.

000021b5 <AutoMenuItem20>:
    21b5:	52 6f 6c 6c 20 61 75 74 6f 6c 65 76 65 6c 3a 00     Roll autolevel:.

000021c5 <StabMenuItem3>:
    21c5:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

000021d2 <StabMenuItem10>:
    21d2:	52 6f 6c 6c 20 49 20 6c 69 6d 69 74 3a 00           Roll I limit:.

000021e0 <StabMenuItem2>:
    21e0:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

000021e8 <AutoMenuItem1>:
    21e8:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

000021f0 <SensorMenuItem2>:
    21f0:	49 6e 76 2e 00                                      Inv..

000021f5 <SensorMenuItem1>:
    21f5:	43 61 6c 2e 00                                      Cal..

000021fa <PText20>:
    21fa:	49 4d 55 00                                         IMU.

000021fe <PText19>:
    21fe:	41 63 63 00                                         Acc.

00002202 <PText18>:
    2202:	59 61 77 00                                         Yaw.

00002206 <PText17>:
    2206:	50 69 74 63 68 00                                   Pitch.

0000220c <PText16>:
    220c:	52 6f 6c 6c 00                                      Roll.

00002211 <PText15>:
    2211:	47 79 72 6f 00                                      Gyro.

00002216 <MainMenuItem24>:
    2216:	32 34 2e 20 45 72 72 6f 72 20 6c 6f 67 00           24. Error log.

00002224 <MainMenuItem31>:
    2224:	32 33 2e 20 49 6e 2f 4f 75 74 20 64 69 73 70 6c     23. In/Out displ
    2234:	61 79 00                                            ay.

00002237 <MainMenuItem32>:
    2237:	32 32 2e 20 43 75 73 74 6f 6d 20 43 68 2e 20 6f     22. Custom Ch. o
    2247:	72 64 65 72 00                                      rder.

0000224c <MainMenuItem23>:
    224c:	32 31 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     21. Pos. Servo t
    225c:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00002265 <MainMenuItem22>:
    2265:	32 30 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     20. Neg. Servo t
    2275:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000227e <MainMenuItem20>:
    227e:	31 39 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     19. Servo direct
    228e:	69 6f 6e 00                                         ion.

00002292 <MainMenuItem18>:
    2292:	31 38 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        18. OUT8 Mixer.

000022a1 <MainMenuItem17>:
    22a1:	31 37 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        17. OUT7 Mixer.

000022b0 <MainMenuItem16>:
    22b0:	31 36 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        16. OUT6 Mixer.

000022bf <MainMenuItem15>:
    22bf:	31 35 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        15. OUT5 Mixer.

000022ce <MainMenuItem14>:
    22ce:	31 34 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        14. OUT4 Mixer.

000022dd <MainMenuItem13>:
    22dd:	31 33 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        13. OUT3 Mixer.

000022ec <MainMenuItem12>:
    22ec:	31 32 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        12. OUT2 Mixer.

000022fb <MainMenuItem11>:
    22fb:	31 31 2e 20 4f 55 54 31 20 4d 69 78 65 72 00        11. OUT1 Mixer.

0000230a <MainMenuItem25>:
    230a:	31 30 2e 20 4f 75 74 70 75 74 20 6f 66 66 73 65     10. Output offse
    231a:	74 73 00                                            ts.

0000231d <MainMenuItem30>:
    231d:	39 2e 20 43 75 72 76 65 73 00                       9. Curves.

00002327 <MainMenuItem3>:
    2327:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    2337:	65 20 32 00                                         e 2.

0000233b <MainMenuItem2>:
    233b:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    234b:	65 20 31 00                                         e 1.

0000234f <MainMenuItem10>:
    234f:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

0000235e <MainMenuItem8>:
    235e:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    236e:	61 74 69 6f 6e 00                                   ation.

00002374 <MainMenuItem7>:
    2374:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    2384:	79 00                                               y.

00002386 <MainMenuItem9>:
    2386:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    2396:	74 73 00                                            ts.

00002399 <MainMenuItem1>:
    2399:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    23a9:	70 00                                               p.

000023ab <MainMenuItem0>:
    23ab:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

000023b6 <MenuFrame9>:
    23b6:	41 62 6f 72 74 00                                   Abort.

000023bc <MenuFrame8>:
    23bc:	53 61 76 65 00                                      Save.

000023c1 <MenuFrame7>:
    23c1:	44 65 66 2e 00                                      Def..

000023c6 <MenuFrame6>:
    23c6:	42 61 63 6b 00                                      Back.

000023cb <MenuFrame5>:
    23cb:	4d 65 6e 75 00                                      Menu.

000023d0 <MenuFrame1>:
    23d0:	45 00                                               E.

000023d2 <MenuFrame4>:
    23d2:	44 00                                               D.

000023d4 <MenuFrame3>:
    23d4:	43 00                                               C.

000023d6 <MenuFrame2>:
    23d6:	42 00                                               B.

000023d8 <MenuFrame0>:
    23d8:	41 00                                               A.

000023da <StatusText9>:
    23da:	4a 69 74 74 65 72 3a 00                             Jitter:.

000023e2 <StatusText8>:
    23e2:	50 6f 73 3a 00                                      Pos:.

000023e7 <StatusText7>:
    23e7:	42 61 74 74 65 72 79 3a 00                          Battery:.

000023f0 <StatusText5>:
    23f0:	30 00                                               0.

000023f2 <StatusText4>:
    23f2:	2e 00                                               ..

000023f4 <StatusText3>:
    23f4:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

000023fd <StatusText1>:
    23fd:	4d 6f 64 65 3a 00                                   Mode:.

00002403 <StatusText0>:
    2403:	56 65 72 73 69 6f 6e 3a 20 31 2e 35 20 42 33 00     Version: 1.5 B3.

00002413 <Gyro_Pol>:
    2413:	01 01 01 ff 01 01 ff ff 01 01 ff 01 ff 01 01 ff     ................
    2423:	01 ff ff ff ff ff ff 01 01 ff ff ff ff ff ff 01     ................
    2433:	ff 01 01 ff 01 ff 01 01 ff ff 01 01 ff 01 01 01     ................
    2443:	ff ff 01 ff ff ff 01 ff ff 01 ff 01 01 01 01 01     ................
    2453:	01 ff ff 01 ff ff 01 01                             ........

0000245b <Gyro_RPY_Order>:
    245b:	00 01 02 01 00 02 00 01 02 01 00 02 02 01 00 02     ................
    246b:	00 01 02 01 00 02 00 01 00 01 02 01 00 02 00 01     ................
    247b:	02 01 00 02 02 01 00 02 00 01 02 01 00 02 00 01     ................
    248b:	01 02 00 00 02 01 01 02 00 00 02 01 01 02 00 00     ................
    249b:	02 01 01 02 00 00 02 01                             ........

000024a3 <LPF_lookup_HS>:
    24a3:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    24b3:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

000024c3 <LPF_lookup>:
    24c3:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    24d3:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

000024e3 <Ch_menu_ranges>:
    24e3:	00 07 01 01 00 00 07 01 01 01 00 07 01 01 02 00     ................
    24f3:	07 01 01 03 00 07 01 01 04 00 07 01 01 05 00 07     ................
    2503:	01 01 06 00 07 01 01 07                             ........

0000250b <ChMenuOffsets>:
    250b:	55 00 55 00 55 00 55 00 55 00 55 00 55 00 55 00     U.U.U.U.U.U.U.U.

0000251b <ChMenuText>:
    251b:	69 00 69 00 69 00 69 00 69 00 69 00 69 00 69 00     i.i.i.i.i.i.i.i.

0000252b <Curves_menu_ranges>:
    252b:	00 64 01 00 00 00 64 01 00 11 00 64 01 00 21 00     .d....d....d..!.
    253b:	64 01 00 32 00 64 01 00 42 00 64 01 00 53 00 64     d..2.d..B.d..S.d
    254b:	01 00 64 00 00 01 01 00 00 64 01 00 00 00 64 01     ..d......d....d.
    255b:	00 11 00 64 01 00 21 00 64 01 00 32 00 64 01 00     ...d..!.d..2.d..
    256b:	42 00 64 01 00 53 00 64 01 00 64 00 00 01 01 00     B.d..S.d..d.....
    257b:	9c 64 01 00 9c 9c 64 01 00 be 9c 64 01 00 df 9c     .d....d....d....
    258b:	64 01 00 00 9c 64 01 00 21 9c 64 01 00 42 9c 64     d....d..!.d..B.d
    259b:	01 00 64 00 00 01 01 00 9c 64 01 00 9c 9c 64 01     ..d......d....d.
    25ab:	00 be 9c 64 01 00 df 9c 64 01 00 00 9c 64 01 00     ...d....d....d..
    25bb:	21 9c 64 01 00 42 9c 64 01 00 64 00 00 01 01 00     !.d..B.d..d.....
    25cb:	9c 64 01 00 9c 9c 64 01 00 be 9c 64 01 00 df 9c     .d....d....d....
    25db:	64 01 00 00 9c 64 01 00 21 9c 64 01 00 42 9c 64     d....d..!.d..B.d
    25eb:	01 00 64 04 14 01 01 14 9c 64 01 00 9c 9c 64 01     ..d......d....d.
    25fb:	00 be 9c 64 01 00 df 9c 64 01 00 00 9c 64 01 00     ...d....d....d..
    260b:	21 9c 64 01 00 42 9c 64 01 00 64 04 14 01 01 14     !.d..B.d..d.....

0000261b <CurvesMenuOffsets>:
    261b:	80 00 80 00 80 00 80 00 80 00 80 00                 ............

00002627 <CurvesMenuText>:
	...

00002633 <lines>:
    2633:	03 0f 1b 27                                         ...'

00002637 <flight_menu_ranges>:
    2637:	00 7f 01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00     ....(......}....
    2647:	07 01 00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f     ................
    2657:	01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00 07 01     ..(......}......
    2667:	00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f 01 00     ................
    2677:	3c 00 7f 01 00 28 00 7d 01 00 19 00 07 01 00 02     <....(.}........
    2687:	81 7f 01 00 00 00 7f 01 00 28 00 7f 01 00 14 00     .........(......
    2697:	7d 01 00 0a                                         }...

0000269b <FlightMenuOffsets>:
    269b:	55 00 55 00 55 00 55 00 55 00 55 00 55 00 55 00     U.U.U.U.U.U.U.U.
    26ab:	55 00 55 00 55 00 55 00 55 00 55 00 55 00 55 00     U.U.U.U.U.U.U.U.
    26bb:	55 00 55 00 55 00 55 00                             U.U.U.U.

000026c3 <FlightMenuText>:
	...

000026eb <mixer_menu_ranges>:
    26eb:	00 02 01 01 02 00 7d 01 00 64 00 7d 01 00 64 00     ......}..d.}..d.
    26fb:	02 01 01 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     .....}....}....}
    270b:	01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01     ....}....}....}.
    271b:	00 00 00 02 01 01 00 00 02 01 01 00 00 02 01 01     ................
    272b:	00 00 02 01 01 00 00 02 01 01 00 00 02 01 01 00     ................
    273b:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    274b:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 01 14     ................
    275b:	01 01 14 83 7d 01 00 00 01 14 01 01 14 83 7d 01     ....}.........}.
    276b:	00 00 01 14 01 01 14 83 7d 01 00 00 01 14 01 01     ........}.......
    277b:	14 83 7d 01 00 00                                   ..}...

00002781 <MixerMenuOffsets>:
    2781:	55 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00     U.\.\.\.\.\.\.\.
    2791:	5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00     \.\.\.\.\.\.\.\.
    27a1:	5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 4d 00 4d 00     \.\.\.\.\.\.M.M.
    27b1:	4d 00 4d 00 4d 00 4d 00 4d 00 4d 00                 M.M.M.M.M.M.

000027bd <MixerMenuTextM>:
    27bd:	e2 00 00 00 00 00 38 00 00 00 00 00 00 00 00 00     ......8.........
    27cd:	00 00 00 00 44 00 44 00 44 00 44 00 44 00 44 00     ....D.D.D.D.D.D.
    27dd:	44 00 44 00 44 00 44 00 44 00 44 00 ba 01 00 00     D.D.D.D.D.D.....
    27ed:	a5 01 00 00 ba 01 00 00 a5 01 00 00                 ............

000027f9 <MixerMenuTextE>:
    27f9:	e2 00 00 00 00 00 38 00 00 00 00 00 00 00 00 00     ......8.........
    2809:	00 00 00 00 44 00 44 00 44 00 44 00 44 00 44 00     ....D.D.D.D.D.D.
    2819:	44 00 44 00 44 00 44 00 44 00 44 00 a5 01 00 00     D.D.D.D.D.D.....
    2829:	a5 01 00 00 a5 01 00 00 a5 01 00 00                 ............

00002835 <Offsets_menu_ranges>:
    2835:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    2845:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    2855:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    2865:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    2875:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........
    2885:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    2895:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    28a5:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    28b5:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    28c5:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........
    28d5:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    28e5:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    28f5:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    2905:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    2915:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........
    2925:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    2935:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    2945:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    2955:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    2965:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........

00002975 <OffsetsMenuOffsets>:
    2975:	80 00 80 00 80 00 80 00 80 00 80 00 80 00 80 00     ................

00002985 <OffsetsMenuText>:
	...

00002995 <servo_menu_ranges>:
    2995:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

000029a4 <ServoMenuOffsets>:
    29a4:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.
    29b4:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.
    29c4:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.

000029d4 <ServoMenuText>:
    29d4:	8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00     ................
	...

00002a04 <P1_Orientation_LUT>:
    2a04:	04 05 06 07 0a 0b 08 09 0c 0d 0e 0f 02 03 00 01     ................
    2a14:	11 12 13 10 17 14 15 16                             ........

00002a1c <rc_menu_ranges>:
    2a1c:	00 06 01 01 02 00 02 01 01 02 00 04 01 01 04 00     ................
    2a2c:	03 01 01 00 00 07 01 01 04 00 28 01 00 00 00 28     ..........(....(
    2a3c:	01 00 00 00 63 01 00 00 01 63 01 00 32 01 64 01     ....c....c..2.d.
    2a4c:	00 64 00 01 01 01 00 00 7f 01 00 14 00 17 01 01     .d..............
    2a5c:	00 00 02 01 01 00 1c 32 01 00 24 00 01 01 01 01     .......2..$.....
    2a6c:	00 7f 01 00 1e 00 08 01 01 00 00 06 01 01 03 00     ................
    2a7c:	07 01 01 02 00 07 01 01 07 02 0b 01 00 06 00 03     ................
    2a8c:	01 04 00 00 01 01 01 01                             ........

00002a94 <RCMenuOffsets>:
    2a94:	41 00 41 00 41 00 3c 00 4b 00 5f 00 5f 00 5f 00     A.A.A.<.K._._._.
    2aa4:	5f 00 5f 00 5f 00 5f 00 46 00 43 00 43 00 43 00     _._._._.F.C.C.C.
    2ab4:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.

00002ac4 <RCMenuText>:
    2ac4:	8c 01 76 00 69 00 82 00 69 00 00 00 00 00 00 00     ..v.i...i.......
    2ad4:	00 00 00 00 44 00 00 00 27 01 40 01 00 00 35 00     ....D...'.@...5.
    2ae4:	00 00 00 00 25 00 25 00 25 00 00 00 11 01 44 00     ....%.%.%.....D.

00002af4 <SQRTSIN>:
    2af4:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    2b04:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    2b14:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    2b24:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    2b34:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    2b44:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    2b54:	64 64 64 64 64                                      ddddd

00002b59 <SIN>:
    2b59:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    2b69:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    2b79:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    2b89:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    2b99:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    2ba9:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    2bb9:	64 64 64 64 64                                      ddddd

00002bbe <__ctors_end>:
    2bbe:	11 24       	eor	r1, r1
    2bc0:	1f be       	out	0x3f, r1	; 63
    2bc2:	cf ef       	ldi	r28, 0xFF	; 255
    2bc4:	d0 e1       	ldi	r29, 0x10	; 16
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	cd bf       	out	0x3d, r28	; 61

00002bca <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    2bca:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	a8 95       	wdr
    2bd2:	80 91 60 00 	lds	r24, 0x0060
    2bd6:	88 61       	ori	r24, 0x18	; 24
    2bd8:	80 93 60 00 	sts	0x0060, r24
    2bdc:	10 92 60 00 	sts	0x0060, r1
    2be0:	0f be       	out	0x3f, r0	; 63

00002be2 <__do_copy_data>:
    2be2:	15 e0       	ldi	r17, 0x05	; 5
    2be4:	a0 e0       	ldi	r26, 0x00	; 0
    2be6:	b1 e0       	ldi	r27, 0x01	; 1
    2be8:	e2 e7       	ldi	r30, 0x72	; 114
    2bea:	f0 ee       	ldi	r31, 0xE0	; 224
    2bec:	02 c0       	rjmp	.+4      	; 0x2bf2 <__do_copy_data+0x10>
    2bee:	05 90       	lpm	r0, Z+
    2bf0:	0d 92       	st	X+, r0
    2bf2:	a6 32       	cpi	r26, 0x26	; 38
    2bf4:	b1 07       	cpc	r27, r17
    2bf6:	d9 f7       	brne	.-10     	; 0x2bee <__do_copy_data+0xc>

00002bf8 <__do_clear_bss>:
    2bf8:	29 e0       	ldi	r18, 0x09	; 9
    2bfa:	a6 e2       	ldi	r26, 0x26	; 38
    2bfc:	b5 e0       	ldi	r27, 0x05	; 5
    2bfe:	01 c0       	rjmp	.+2      	; 0x2c02 <.do_clear_bss_start>

00002c00 <.do_clear_bss_loop>:
    2c00:	1d 92       	st	X+, r1

00002c02 <.do_clear_bss_start>:
    2c02:	a5 3a       	cpi	r26, 0xA5	; 165
    2c04:	b2 07       	cpc	r27, r18
    2c06:	e1 f7       	brne	.-8      	; 0x2c00 <.do_clear_bss_loop>
    2c08:	0e 94 b4 2e 	call	0x5d68	; 0x5d68 <main>
    2c0c:	0c 94 37 70 	jmp	0xe06e	; 0xe06e <_exit>

00002c10 <__bad_interrupt>:
    2c10:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002c14 <glcd_delay>:
    2c14:	00 00       	nop
    2c16:	08 95       	ret

00002c18 <glcd_delay_1us>:
    2c18:	fd df       	rcall	.-6      	; 0x2c14 <glcd_delay>
    2c1a:	fc df       	rcall	.-8      	; 0x2c14 <glcd_delay>
    2c1c:	fb df       	rcall	.-10     	; 0x2c14 <glcd_delay>
    2c1e:	fa df       	rcall	.-12     	; 0x2c14 <glcd_delay>
    2c20:	08 95       	ret

00002c22 <bind_master>:
    2c22:	cf 93       	push	r28

00002c24 <master_loop>:
    2c24:	58 98       	cbi	0x0b, 0	; 11
    2c26:	c6 e7       	ldi	r28, 0x76	; 118
    2c28:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <VarDelay>
    2c2c:	58 9a       	sbi	0x0b, 0	; 11
    2c2e:	ca e7       	ldi	r28, 0x7A	; 122
    2c30:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <VarDelay>
    2c34:	8a 95       	dec	r24
    2c36:	b1 f7       	brne	.-20     	; 0x2c24 <master_loop>
    2c38:	cf 91       	pop	r28
    2c3a:	08 95       	ret

00002c3c <VarDelay>:
    2c3c:	00 c0       	rjmp	.+0      	; 0x2c3e <VarDelay+0x2>
    2c3e:	00 c0       	rjmp	.+0      	; 0x2c40 <VarDelay+0x4>
    2c40:	00 c0       	rjmp	.+0      	; 0x2c42 <VarDelay+0x6>
    2c42:	00 c0       	rjmp	.+0      	; 0x2c44 <VarDelay+0x8>
    2c44:	00 c0       	rjmp	.+0      	; 0x2c46 <VarDelay+0xa>
    2c46:	00 c0       	rjmp	.+0      	; 0x2c48 <VarDelay+0xc>
    2c48:	00 c0       	rjmp	.+0      	; 0x2c4a <VarDelay+0xe>
    2c4a:	00 c0       	rjmp	.+0      	; 0x2c4c <VarDelay+0x10>
    2c4c:	00 00       	nop
    2c4e:	ca 95       	dec	r28
    2c50:	a9 f7       	brne	.-22     	; 0x2c3c <VarDelay>
    2c52:	08 95       	ret

00002c54 <output_servo_ppm_asm>:
    2c54:	f6 2e       	mov	r15, r22
    2c56:	ef 93       	push	r30
    2c58:	ff 93       	push	r31
    2c5a:	af 93       	push	r26
    2c5c:	bf 93       	push	r27
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	2f 93       	push	r18
    2c68:	3f 93       	push	r19
    2c6a:	4f 93       	push	r20
    2c6c:	5f 93       	push	r21
    2c6e:	6f 93       	push	r22
    2c70:	7f 93       	push	r23
    2c72:	e8 2f       	mov	r30, r24
    2c74:	f9 2f       	mov	r31, r25
    2c76:	8f 93       	push	r24
    2c78:	9f 93       	push	r25
    2c7a:	a1 91       	ld	r26, Z+
    2c7c:	b1 91       	ld	r27, Z+
    2c7e:	a6 5c       	subi	r26, 0xC6	; 198
    2c80:	b0 40       	sbci	r27, 0x00	; 0
    2c82:	af 93       	push	r26
    2c84:	bf 93       	push	r27
    2c86:	a7 70       	andi	r26, 0x07	; 7
    2c88:	7a 2f       	mov	r23, r26
    2c8a:	a1 91       	ld	r26, Z+
    2c8c:	b1 91       	ld	r27, Z+
    2c8e:	ae 5b       	subi	r26, 0xBE	; 190
    2c90:	b0 40       	sbci	r27, 0x00	; 0
    2c92:	af 93       	push	r26
    2c94:	bf 93       	push	r27
    2c96:	a7 70       	andi	r26, 0x07	; 7
    2c98:	6a 2f       	mov	r22, r26
    2c9a:	a1 91       	ld	r26, Z+
    2c9c:	b1 91       	ld	r27, Z+
    2c9e:	a6 5b       	subi	r26, 0xB6	; 182
    2ca0:	b0 40       	sbci	r27, 0x00	; 0
    2ca2:	af 93       	push	r26
    2ca4:	bf 93       	push	r27
    2ca6:	a7 70       	andi	r26, 0x07	; 7
    2ca8:	5a 2f       	mov	r21, r26
    2caa:	a1 91       	ld	r26, Z+
    2cac:	b1 91       	ld	r27, Z+
    2cae:	ae 5a       	subi	r26, 0xAE	; 174
    2cb0:	b0 40       	sbci	r27, 0x00	; 0
    2cb2:	af 93       	push	r26
    2cb4:	bf 93       	push	r27
    2cb6:	a7 70       	andi	r26, 0x07	; 7
    2cb8:	4a 2f       	mov	r20, r26
    2cba:	a1 91       	ld	r26, Z+
    2cbc:	b1 91       	ld	r27, Z+
    2cbe:	a5 5a       	subi	r26, 0xA5	; 165
    2cc0:	b0 40       	sbci	r27, 0x00	; 0
    2cc2:	af 93       	push	r26
    2cc4:	bf 93       	push	r27
    2cc6:	a7 70       	andi	r26, 0x07	; 7
    2cc8:	3a 2f       	mov	r19, r26
    2cca:	a1 91       	ld	r26, Z+
    2ccc:	b1 91       	ld	r27, Z+
    2cce:	ad 59       	subi	r26, 0x9D	; 157
    2cd0:	b0 40       	sbci	r27, 0x00	; 0
    2cd2:	af 93       	push	r26
    2cd4:	bf 93       	push	r27
    2cd6:	a7 70       	andi	r26, 0x07	; 7
    2cd8:	2a 2f       	mov	r18, r26
    2cda:	a1 91       	ld	r26, Z+
    2cdc:	b1 91       	ld	r27, Z+
    2cde:	a5 59       	subi	r26, 0x95	; 149
    2ce0:	b0 40       	sbci	r27, 0x00	; 0
    2ce2:	af 93       	push	r26
    2ce4:	bf 93       	push	r27
    2ce6:	a7 70       	andi	r26, 0x07	; 7
    2ce8:	1a 2f       	mov	r17, r26
    2cea:	a1 91       	ld	r26, Z+
    2cec:	b1 91       	ld	r27, Z+
    2cee:	ad 58       	subi	r26, 0x8D	; 141
    2cf0:	b0 40       	sbci	r27, 0x00	; 0
    2cf2:	af 93       	push	r26
    2cf4:	bf 93       	push	r27
    2cf6:	a7 70       	andi	r26, 0x07	; 7
    2cf8:	0a 2f       	mov	r16, r26
    2cfa:	97 2f       	mov	r25, r23
    2cfc:	0e 94 98 17 	call	0x2f30	; 0x2f30 <DelayHigh>
    2d00:	f0 fc       	sbrc	r15, 0
    2d02:	46 9a       	sbi	0x08, 6	; 8
    2d04:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <DelayLow>
    2d08:	96 2f       	mov	r25, r22
    2d0a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <DelayHigh>
    2d0e:	f1 fc       	sbrc	r15, 1
    2d10:	44 9a       	sbi	0x08, 4	; 8
    2d12:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <DelayLow>
    2d16:	95 2f       	mov	r25, r21
    2d18:	0e 94 98 17 	call	0x2f30	; 0x2f30 <DelayHigh>
    2d1c:	f2 fc       	sbrc	r15, 2
    2d1e:	42 9a       	sbi	0x08, 2	; 8
    2d20:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <DelayLow>
    2d24:	94 2f       	mov	r25, r20
    2d26:	0e 94 98 17 	call	0x2f30	; 0x2f30 <DelayHigh>
    2d2a:	f3 fc       	sbrc	r15, 3
    2d2c:	43 9a       	sbi	0x08, 3	; 8
    2d2e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <DelayLow>
    2d32:	93 2f       	mov	r25, r19
    2d34:	0e 94 98 17 	call	0x2f30	; 0x2f30 <DelayHigh>
    2d38:	f4 fc       	sbrc	r15, 4
    2d3a:	14 9a       	sbi	0x02, 4	; 2
    2d3c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <DelayLow>
    2d40:	92 2f       	mov	r25, r18
    2d42:	0e 94 98 17 	call	0x2f30	; 0x2f30 <DelayHigh>
    2d46:	f5 fc       	sbrc	r15, 5
    2d48:	15 9a       	sbi	0x02, 5	; 2
    2d4a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <DelayLow>
    2d4e:	91 2f       	mov	r25, r17
    2d50:	0e 94 98 17 	call	0x2f30	; 0x2f30 <DelayHigh>
    2d54:	f6 fc       	sbrc	r15, 6
    2d56:	45 9a       	sbi	0x08, 5	; 8
    2d58:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <DelayLow>
    2d5c:	90 2f       	mov	r25, r16
    2d5e:	0e 94 98 17 	call	0x2f30	; 0x2f30 <DelayHigh>
    2d62:	f7 fc       	sbrc	r15, 7
    2d64:	47 9a       	sbi	0x08, 7	; 8
    2d66:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <DelayLow>
    2d6a:	0e 94 77 17 	call	0x2eee	; 0x2eee <pwm_delay>
    2d6e:	0e 94 77 17 	call	0x2eee	; 0x2eee <pwm_delay>
    2d72:	0e 94 77 17 	call	0x2eee	; 0x2eee <pwm_delay>
    2d76:	bf 91       	pop	r27
    2d78:	af 91       	pop	r26
    2d7a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <shuffle_8>
    2d7e:	0a 2f       	mov	r16, r26
    2d80:	bf 91       	pop	r27
    2d82:	af 91       	pop	r26
    2d84:	0e 94 91 17 	call	0x2f22	; 0x2f22 <shuffle_8>
    2d88:	1a 2f       	mov	r17, r26
    2d8a:	bf 91       	pop	r27
    2d8c:	af 91       	pop	r26
    2d8e:	0e 94 91 17 	call	0x2f22	; 0x2f22 <shuffle_8>
    2d92:	2a 2f       	mov	r18, r26
    2d94:	bf 91       	pop	r27
    2d96:	af 91       	pop	r26
    2d98:	0e 94 91 17 	call	0x2f22	; 0x2f22 <shuffle_8>
    2d9c:	3a 2f       	mov	r19, r26
    2d9e:	bf 91       	pop	r27
    2da0:	af 91       	pop	r26
    2da2:	0e 94 91 17 	call	0x2f22	; 0x2f22 <shuffle_8>
    2da6:	4a 2f       	mov	r20, r26
    2da8:	bf 91       	pop	r27
    2daa:	af 91       	pop	r26
    2dac:	0e 94 91 17 	call	0x2f22	; 0x2f22 <shuffle_8>
    2db0:	5a 2f       	mov	r21, r26
    2db2:	bf 91       	pop	r27
    2db4:	af 91       	pop	r26
    2db6:	0e 94 91 17 	call	0x2f22	; 0x2f22 <shuffle_8>
    2dba:	6a 2f       	mov	r22, r26
    2dbc:	bf 91       	pop	r27
    2dbe:	af 91       	pop	r26
    2dc0:	0e 94 91 17 	call	0x2f22	; 0x2f22 <shuffle_8>
    2dc4:	7a 2f       	mov	r23, r26
    2dc6:	cf ef       	ldi	r28, 0xFF	; 255
    2dc8:	d0 e0       	ldi	r29, 0x00	; 0
    2dca:	00 24       	eor	r0, r0

00002dcc <nloop>:
    2dcc:	71 50       	subi	r23, 0x01	; 1
    2dce:	19 f4       	brne	.+6      	; 0x2dd6 <j1>
    2dd0:	46 98       	cbi	0x08, 6	; 8
    2dd2:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <jj1>

00002dd6 <j1>:
    2dd6:	00 c0       	rjmp	.+0      	; 0x2dd8 <j1+0x2>
    2dd8:	00 c0       	rjmp	.+0      	; 0x2dda <jj1>

00002dda <jj1>:
    2dda:	61 50       	subi	r22, 0x01	; 1
    2ddc:	19 f4       	brne	.+6      	; 0x2de4 <j2>
    2dde:	44 98       	cbi	0x08, 4	; 8
    2de0:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <jj2>

00002de4 <j2>:
    2de4:	00 c0       	rjmp	.+0      	; 0x2de6 <j2+0x2>
    2de6:	00 c0       	rjmp	.+0      	; 0x2de8 <jj2>

00002de8 <jj2>:
    2de8:	51 50       	subi	r21, 0x01	; 1
    2dea:	19 f4       	brne	.+6      	; 0x2df2 <j3>
    2dec:	42 98       	cbi	0x08, 2	; 8
    2dee:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <jj3>

00002df2 <j3>:
    2df2:	00 c0       	rjmp	.+0      	; 0x2df4 <j3+0x2>
    2df4:	00 c0       	rjmp	.+0      	; 0x2df6 <jj3>

00002df6 <jj3>:
    2df6:	41 50       	subi	r20, 0x01	; 1
    2df8:	19 f4       	brne	.+6      	; 0x2e00 <j4>
    2dfa:	43 98       	cbi	0x08, 3	; 8
    2dfc:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <jj4>

00002e00 <j4>:
    2e00:	00 c0       	rjmp	.+0      	; 0x2e02 <j4+0x2>
    2e02:	00 c0       	rjmp	.+0      	; 0x2e04 <jj4>

00002e04 <jj4>:
    2e04:	31 50       	subi	r19, 0x01	; 1
    2e06:	19 f4       	brne	.+6      	; 0x2e0e <j5>
    2e08:	14 98       	cbi	0x02, 4	; 2
    2e0a:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <jj5>

00002e0e <j5>:
    2e0e:	00 c0       	rjmp	.+0      	; 0x2e10 <j5+0x2>
    2e10:	00 c0       	rjmp	.+0      	; 0x2e12 <jj5>

00002e12 <jj5>:
    2e12:	21 50       	subi	r18, 0x01	; 1
    2e14:	19 f4       	brne	.+6      	; 0x2e1c <j6>
    2e16:	15 98       	cbi	0x02, 5	; 2
    2e18:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <jj6>

00002e1c <j6>:
    2e1c:	00 c0       	rjmp	.+0      	; 0x2e1e <j6+0x2>
    2e1e:	00 c0       	rjmp	.+0      	; 0x2e20 <jj6>

00002e20 <jj6>:
    2e20:	11 50       	subi	r17, 0x01	; 1
    2e22:	19 f4       	brne	.+6      	; 0x2e2a <j7>
    2e24:	45 98       	cbi	0x08, 5	; 8
    2e26:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <jj7>

00002e2a <j7>:
    2e2a:	00 c0       	rjmp	.+0      	; 0x2e2c <j7+0x2>
    2e2c:	00 c0       	rjmp	.+0      	; 0x2e2e <jj7>

00002e2e <jj7>:
    2e2e:	01 50       	subi	r16, 0x01	; 1
    2e30:	19 f4       	brne	.+6      	; 0x2e38 <j8>
    2e32:	47 98       	cbi	0x08, 7	; 8
    2e34:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <jj8>

00002e38 <j8>:
    2e38:	00 c0       	rjmp	.+0      	; 0x2e3a <j8+0x2>
    2e3a:	00 c0       	rjmp	.+0      	; 0x2e3c <jj8>

00002e3c <jj8>:
    2e3c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <pad_100_delay>
    2e40:	c1 50       	subi	r28, 0x01	; 1
    2e42:	d0 09       	sbc	r29, r0
    2e44:	11 f0       	breq	.+4      	; 0x2e4a <skiploop>
    2e46:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <nloop>

00002e4a <skiploop>:
    2e4a:	9f 91       	pop	r25
    2e4c:	8f 91       	pop	r24
    2e4e:	7f 91       	pop	r23
    2e50:	6f 91       	pop	r22
    2e52:	5f 91       	pop	r21
    2e54:	4f 91       	pop	r20
    2e56:	3f 91       	pop	r19
    2e58:	2f 91       	pop	r18
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	bf 91       	pop	r27
    2e64:	af 91       	pop	r26
    2e66:	ff 91       	pop	r31
    2e68:	ef 91       	pop	r30
    2e6a:	08 95       	ret

00002e6c <output_servo_ppm_asm3>:
    2e6c:	0f 93       	push	r16
    2e6e:	1f 93       	push	r17
    2e70:	2f 93       	push	r18
    2e72:	0c ef       	ldi	r16, 0xFC	; 252
    2e74:	18 e0       	ldi	r17, 0x08	; 8
    2e76:	00 24       	eor	r0, r0

00002e78 <jump_table>:
    2e78:	80 30       	cpi	r24, 0x00	; 0
    2e7a:	71 f0       	breq	.+28     	; 0x2e98 <in1>
    2e7c:	81 30       	cpi	r24, 0x01	; 1
    2e7e:	79 f0       	breq	.+30     	; 0x2e9e <in2>
    2e80:	82 30       	cpi	r24, 0x02	; 2
    2e82:	81 f0       	breq	.+32     	; 0x2ea4 <in3>
    2e84:	83 30       	cpi	r24, 0x03	; 3
    2e86:	89 f0       	breq	.+34     	; 0x2eaa <in4>
    2e88:	84 30       	cpi	r24, 0x04	; 4
    2e8a:	91 f0       	breq	.+36     	; 0x2eb0 <in5>
    2e8c:	85 30       	cpi	r24, 0x05	; 5
    2e8e:	99 f0       	breq	.+38     	; 0x2eb6 <in6>
    2e90:	86 30       	cpi	r24, 0x06	; 6
    2e92:	a1 f0       	breq	.+40     	; 0x2ebc <in7>
    2e94:	87 30       	cpi	r24, 0x07	; 7
    2e96:	a9 f0       	breq	.+42     	; 0x2ec2 <in8>

00002e98 <in1>:
    2e98:	46 9a       	sbi	0x08, 6	; 8
    2e9a:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <loopin>

00002e9e <in2>:
    2e9e:	44 9a       	sbi	0x08, 4	; 8
    2ea0:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <loopin>

00002ea4 <in3>:
    2ea4:	42 9a       	sbi	0x08, 2	; 8
    2ea6:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <loopin>

00002eaa <in4>:
    2eaa:	43 9a       	sbi	0x08, 3	; 8
    2eac:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <loopin>

00002eb0 <in5>:
    2eb0:	14 9a       	sbi	0x02, 4	; 2
    2eb2:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <loopin>

00002eb6 <in6>:
    2eb6:	15 9a       	sbi	0x02, 5	; 2
    2eb8:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <loopin>

00002ebc <in7>:
    2ebc:	45 9a       	sbi	0x08, 5	; 8
    2ebe:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <loopin>

00002ec2 <in8>:
    2ec2:	47 9a       	sbi	0x08, 7	; 8
    2ec4:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <loopin>

00002ec8 <loopin>:
    2ec8:	00 c0       	rjmp	.+0      	; 0x2eca <loopin+0x2>
    2eca:	00 c0       	rjmp	.+0      	; 0x2ecc <loopin+0x4>
    2ecc:	00 c0       	rjmp	.+0      	; 0x2ece <loopin+0x6>
    2ece:	00 c0       	rjmp	.+0      	; 0x2ed0 <loopin+0x8>
    2ed0:	00 c0       	rjmp	.+0      	; 0x2ed2 <loopin+0xa>
    2ed2:	00 c0       	rjmp	.+0      	; 0x2ed4 <loopin+0xc>
    2ed4:	61 50       	subi	r22, 0x01	; 1
    2ed6:	70 09       	sbc	r23, r0
    2ed8:	19 f4       	brne	.+6      	; 0x2ee0 <loopout>
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	28 b9       	out	0x08, r18	; 8
    2ede:	22 b9       	out	0x02, r18	; 2

00002ee0 <loopout>:
    2ee0:	01 50       	subi	r16, 0x01	; 1
    2ee2:	10 09       	sbc	r17, r0
    2ee4:	89 f7       	brne	.-30     	; 0x2ec8 <loopin>
    2ee6:	2f 91       	pop	r18
    2ee8:	1f 91       	pop	r17
    2eea:	0f 91       	pop	r16
    2eec:	08 95       	ret

00002eee <pwm_delay>:
    2eee:	0f 93       	push	r16
    2ef0:	05 e6       	ldi	r16, 0x65	; 101

00002ef2 <pwm_loop>:
    2ef2:	00 c0       	rjmp	.+0      	; 0x2ef4 <pwm_loop+0x2>
    2ef4:	00 c0       	rjmp	.+0      	; 0x2ef6 <pwm_loop+0x4>
    2ef6:	00 c0       	rjmp	.+0      	; 0x2ef8 <pwm_loop+0x6>
    2ef8:	01 50       	subi	r16, 0x01	; 1
    2efa:	d9 f7       	brne	.-10     	; 0x2ef2 <pwm_loop>

00002efc <pwm_exit>:
    2efc:	0f 91       	pop	r16
    2efe:	08 95       	ret

00002f00 <pad_100_delay>:
    2f00:	0f 93       	push	r16
    2f02:	09 e0       	ldi	r16, 0x09	; 9

00002f04 <pad_100>:
    2f04:	00 c0       	rjmp	.+0      	; 0x2f06 <pad_100+0x2>
    2f06:	00 c0       	rjmp	.+0      	; 0x2f08 <pad_100+0x4>
    2f08:	00 c0       	rjmp	.+0      	; 0x2f0a <pad_100+0x6>
    2f0a:	01 50       	subi	r16, 0x01	; 1
    2f0c:	d9 f7       	brne	.-10     	; 0x2f04 <pad_100>
    2f0e:	00 00       	nop
    2f10:	00 c0       	rjmp	.+0      	; 0x2f12 <pad_100+0xe>
    2f12:	00 c0       	rjmp	.+0      	; 0x2f14 <pad_100+0x10>
    2f14:	0f 91       	pop	r16
    2f16:	08 95       	ret

00002f18 <us_delay>:
    2f18:	00 c0       	rjmp	.+0      	; 0x2f1a <us_delay+0x2>
    2f1a:	00 c0       	rjmp	.+0      	; 0x2f1c <us_delay+0x4>
    2f1c:	00 c0       	rjmp	.+0      	; 0x2f1e <us_delay+0x6>
    2f1e:	00 c0       	rjmp	.+0      	; 0x2f20 <us_delay+0x8>
    2f20:	08 95       	ret

00002f22 <shuffle_8>:
    2f22:	b6 95       	lsr	r27
    2f24:	a7 95       	ror	r26
    2f26:	b6 95       	lsr	r27
    2f28:	a7 95       	ror	r26
    2f2a:	b6 95       	lsr	r27
    2f2c:	a7 95       	ror	r26
    2f2e:	08 95       	ret

00002f30 <DelayHigh>:
    2f30:	c7 e0       	ldi	r28, 0x07	; 7
    2f32:	97 70       	andi	r25, 0x07	; 7
    2f34:	c9 27       	eor	r28, r25
    2f36:	31 f0       	breq	.+12     	; 0x2f44 <LoopHighOut1>

00002f38 <LoopHigh>:
    2f38:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <us_delay>
    2f3c:	ca 95       	dec	r28
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <LoopHighOut2>
    2f40:	fb cf       	rjmp	.-10     	; 0x2f38 <LoopHigh>

00002f42 <LoopHighOut2>:
    2f42:	00 c0       	rjmp	.+0      	; 0x2f44 <LoopHighOut1>

00002f44 <LoopHighOut1>:
    2f44:	00 00       	nop
    2f46:	08 95       	ret

00002f48 <DelayLow>:
    2f48:	c9 2f       	mov	r28, r25
    2f4a:	c7 70       	andi	r28, 0x07	; 7
    2f4c:	31 f0       	breq	.+12     	; 0x2f5a <LoopLowOut1>

00002f4e <LoopLow>:
    2f4e:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <us_delay>
    2f52:	ca 95       	dec	r28
    2f54:	09 f0       	breq	.+2      	; 0x2f58 <LoopLowOut2>
    2f56:	fb cf       	rjmp	.-10     	; 0x2f4e <LoopLow>

00002f58 <LoopLowOut2>:
    2f58:	00 c0       	rjmp	.+0      	; 0x2f5a <LoopLowOut1>

00002f5a <LoopLowOut1>:
    2f5a:	08 95       	ret

00002f5c <get_raw_accs>:
// routine used by the zeroing calibration routine. Chicken | Egg.
// We also cannot merge P1 and P2 here as each have their own zeros.
//***************************************************************

void get_raw_accs(void)
{
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	2c 97       	sbiw	r28, 0x0c	; 12
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61

	// Get data from MPU6050
	uint8_t Accs[6];

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    2f74:	26 e0       	ldi	r18, 0x06	; 6
    2f76:	ae 01       	movw	r20, r28
    2f78:	4f 5f       	subi	r20, 0xFF	; 255
    2f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f7c:	6b e3       	ldi	r22, 0x3B	; 59
    2f7e:	80 ed       	ldi	r24, 0xD0	; 208
    2f80:	0e 94 c7 3b 	call	0x778e	; 0x778e <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise.
	// This notation is true to the chip, but not the board orientation.
	RawADC[ROLL] = (Accs[0] << 8) + Accs[1];
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	98 2f       	mov	r25, r24
    2f8a:	88 27       	eor	r24, r24
    2f8c:	2a 81       	ldd	r18, Y+2	; 0x02
    2f8e:	82 0f       	add	r24, r18
    2f90:	91 1d       	adc	r25, r1
    2f92:	98 87       	std	Y+8, r25	; 0x08
    2f94:	8f 83       	std	Y+7, r24	; 0x07
	RawADC[PITCH] = -((Accs[2] << 8) + Accs[3]);
    2f96:	8b 81       	ldd	r24, Y+3	; 0x03
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	98 2f       	mov	r25, r24
    2f9c:	88 27       	eor	r24, r24
    2f9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2fa0:	82 0f       	add	r24, r18
    2fa2:	91 1d       	adc	r25, r1
    2fa4:	91 95       	neg	r25
    2fa6:	81 95       	neg	r24
    2fa8:	91 09       	sbc	r25, r1
    2faa:	9a 87       	std	Y+10, r25	; 0x0a
    2fac:	89 87       	std	Y+9, r24	; 0x09
	RawADC[YAW] = (Accs[4] << 8) + Accs[5];
    2fae:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	98 2f       	mov	r25, r24
    2fb4:	88 27       	eor	r24, r24
    2fb6:	2e 81       	ldd	r18, Y+6	; 0x06
    2fb8:	82 0f       	add	r24, r18
    2fba:	91 1d       	adc	r25, r1
    2fbc:	9c 87       	std	Y+12, r25	; 0x0c
    2fbe:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		accADC_P1[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P1][i])] >> 6;
    2fc0:	40 91 63 08 	lds	r20, 0x0863
		accADC_P2[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P2][i])] >> 6;
    2fc4:	20 91 d8 06 	lds	r18, 0x06D8
    2fc8:	6a e6       	ldi	r22, 0x6A	; 106
    2fca:	75 e0       	ldi	r23, 0x05	; 5
    2fcc:	a6 e7       	ldi	r26, 0x76	; 118
    2fce:	b5 e0       	ldi	r27, 0x05	; 5
    2fd0:	03 e0       	ldi	r16, 0x03	; 3
    2fd2:	40 02       	muls	r20, r16
    2fd4:	a0 01       	movw	r20, r0
    2fd6:	11 24       	eor	r1, r1
    2fd8:	13 e0       	ldi	r17, 0x03	; 3
    2fda:	21 02       	muls	r18, r17
    2fdc:	90 01       	movw	r18, r0
    2fde:	11 24       	eor	r1, r1
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	e4 0f       	add	r30, r20
    2fe8:	f5 1f       	adc	r31, r21
    2fea:	ea 56       	subi	r30, 0x6A	; 106
    2fec:	fe 4f       	sbci	r31, 0xFE	; 254

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		accADC_P1[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P1][i])] >> 6;
    2fee:	e4 91       	lpm	r30, Z
    2ff0:	ee 0f       	add	r30, r30
    2ff2:	ff 0b       	sbc	r31, r31
    2ff4:	01 e0       	ldi	r16, 0x01	; 1
    2ff6:	10 e0       	ldi	r17, 0x00	; 0
    2ff8:	0c 0f       	add	r16, r28
    2ffa:	1d 1f       	adc	r17, r29
    2ffc:	e0 0f       	add	r30, r16
    2ffe:	f1 1f       	adc	r31, r17
    3000:	06 80       	ldd	r0, Z+6	; 0x06
    3002:	f7 81       	ldd	r31, Z+7	; 0x07
    3004:	e0 2d       	mov	r30, r0
    3006:	8f 01       	movw	r16, r30
    3008:	e6 e0       	ldi	r30, 0x06	; 6
    300a:	15 95       	asr	r17
    300c:	07 95       	ror	r16
    300e:	ea 95       	dec	r30
    3010:	e1 f7       	brne	.-8      	; 0x300a <get_raw_accs+0xae>
    3012:	fb 01       	movw	r30, r22
    3014:	01 93       	st	Z+, r16
    3016:	11 93       	st	Z+, r17
    3018:	bf 01       	movw	r22, r30
    301a:	fc 01       	movw	r30, r24
    301c:	e2 0f       	add	r30, r18
    301e:	f3 1f       	adc	r31, r19
    3020:	ea 56       	subi	r30, 0x6A	; 106
    3022:	fe 4f       	sbci	r31, 0xFE	; 254
		accADC_P2[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P2][i])] >> 6;
    3024:	e4 91       	lpm	r30, Z
    3026:	ee 0f       	add	r30, r30
    3028:	ff 0b       	sbc	r31, r31
    302a:	01 e0       	ldi	r16, 0x01	; 1
    302c:	10 e0       	ldi	r17, 0x00	; 0
    302e:	0c 0f       	add	r16, r28
    3030:	1d 1f       	adc	r17, r29
    3032:	e0 0f       	add	r30, r16
    3034:	f1 1f       	adc	r31, r17
    3036:	06 80       	ldd	r0, Z+6	; 0x06
    3038:	f7 81       	ldd	r31, Z+7	; 0x07
    303a:	e0 2d       	mov	r30, r0
    303c:	16 e0       	ldi	r17, 0x06	; 6
    303e:	f5 95       	asr	r31
    3040:	e7 95       	ror	r30
    3042:	1a 95       	dec	r17
    3044:	e1 f7       	brne	.-8      	; 0x303e <get_raw_accs+0xe2>
    3046:	ed 93       	st	X+, r30
    3048:	fd 93       	st	X+, r31
    304a:	01 96       	adiw	r24, 0x01	; 1
	RawADC[ROLL] = (Accs[0] << 8) + Accs[1];
	RawADC[PITCH] = -((Accs[2] << 8) + Accs[3]);
	RawADC[YAW] = (Accs[4] << 8) + Accs[5];

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
    304c:	83 30       	cpi	r24, 0x03	; 3
    304e:	91 05       	cpc	r25, r1
    3050:	49 f6       	brne	.-110    	; 0x2fe4 <get_raw_accs+0x88>
	{
		// Rearrange the sensors for both orientations
		accADC_P1[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P1][i])] >> 6;
		accADC_P2[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P2][i])] >> 6;
	}
}
    3052:	2c 96       	adiw	r28, 0x0c	; 12
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	08 95       	ret

00003068 <ReadAcc>:
int16_t accADC_P1[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order (P1)
int16_t accADC_P2[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order (P2)
float accVertf = 0.0;				// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    3068:	4f 92       	push	r4
    306a:	5f 92       	push	r5
    306c:	6f 92       	push	r6
    306e:	7f 92       	push	r7
    3070:	8f 92       	push	r8
    3072:	9f 92       	push	r9
    3074:	af 92       	push	r10
    3076:	bf 92       	push	r11
    3078:	cf 92       	push	r12
    307a:	df 92       	push	r13
    307c:	ef 92       	push	r14
    307e:	ff 92       	push	r15
    3080:	0f 93       	push	r16
    3082:	1f 93       	push	r17
    3084:	cf 93       	push	r28
    3086:	df 93       	push	r29
	uint8_t i;
	int16_t temp1, temp2;

	get_raw_accs();					// Updates accADC_P1[] and accADC_P2[] (RPY)
    3088:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <get_raw_accs>

	// P1
	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inverse calibration
	if (!(Config.Main_flags & (1 << inv_cal_done_P1)))
    308c:	20 91 39 08 	lds	r18, 0x0839
    3090:	20 fd       	sbrc	r18, 0
    3092:	05 c0       	rjmp	.+10     	; 0x309e <ReadAcc+0x36>
	{
		Config.AccZero_P1[YAW] = 0;
    3094:	10 92 21 08 	sts	0x0821, r1
    3098:	10 92 20 08 	sts	0x0820, r1
    309c:	0e c0       	rjmp	.+28     	; 0x30ba <ReadAcc+0x52>
	}
	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have valid values
	else
	{
		Config.AccZero_P1[YAW] = Config.AccZeroNormZ_P1 - Config.AccZeroDiff_P1;
    309e:	80 91 22 08 	lds	r24, 0x0822
    30a2:	90 91 23 08 	lds	r25, 0x0823
    30a6:	40 91 26 08 	lds	r20, 0x0826
    30aa:	50 91 27 08 	lds	r21, 0x0827
    30ae:	84 1b       	sub	r24, r20
    30b0:	95 0b       	sbc	r25, r21
    30b2:	90 93 21 08 	sts	0x0821, r25
    30b6:	80 93 20 08 	sts	0x0820, r24
	}
	
	// P2
	if (!(Config.Main_flags & (1 << inv_cal_done_P2)))
    30ba:	22 fd       	sbrc	r18, 2
    30bc:	05 c0       	rjmp	.+10     	; 0x30c8 <ReadAcc+0x60>
	{
		Config.AccZero_P2[YAW] = 0;
    30be:	10 92 56 08 	sts	0x0856, r1
    30c2:	10 92 55 08 	sts	0x0855, r1
    30c6:	0e c0       	rjmp	.+28     	; 0x30e4 <ReadAcc+0x7c>
	}
	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have valid values
	else
	{
		Config.AccZero_P2[YAW] = Config.AccZeroNormZ_P2 - Config.AccZeroDiff_P2;
    30c8:	80 91 57 08 	lds	r24, 0x0857
    30cc:	90 91 58 08 	lds	r25, 0x0858
    30d0:	20 91 5b 08 	lds	r18, 0x085B
    30d4:	30 91 5c 08 	lds	r19, 0x085C
    30d8:	82 1b       	sub	r24, r18
    30da:	93 0b       	sbc	r25, r19
    30dc:	90 93 56 08 	sts	0x0856, r25
    30e0:	80 93 55 08 	sts	0x0855, r24
    30e4:	6a e6       	ldi	r22, 0x6A	; 106
    30e6:	66 2e       	mov	r6, r22
    30e8:	65 e0       	ldi	r22, 0x05	; 5
    30ea:	76 2e       	mov	r7, r22
    30ec:	76 e7       	ldi	r23, 0x76	; 118
    30ee:	c7 2e       	mov	r12, r23
    30f0:	75 e0       	ldi	r23, 0x05	; 5
    30f2:	d7 2e       	mov	r13, r23
    30f4:	01 e5       	ldi	r16, 0x51	; 81
    30f6:	18 e0       	ldi	r17, 0x08	; 8
    30f8:	e0 e7       	ldi	r30, 0x70	; 112
    30fa:	ee 2e       	mov	r14, r30
    30fc:	e5 e0       	ldi	r30, 0x05	; 5
    30fe:	fe 2e       	mov	r15, r30
    3100:	c0 e0       	ldi	r28, 0x00	; 0
    3102:	d0 e0       	ldi	r29, 0x00	; 0
			// Change polarity - use the zeros from the appropriate calibrate
			temp1 = ((accADC_P1[i] - Config.AccZero_P1[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][i]));
			temp2 = ((accADC_P2[i] - Config.AccZero_P2[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][i]));
			
			// Get P1 value
			temp1 = scale32(temp1, (100 - transition));
    3104:	f4 e6       	ldi	r31, 0x64	; 100
    3106:	4f 2e       	mov	r4, r31
    3108:	51 2c       	mov	r5, r1

	// Roll and Pitch are handled normally
	for (i = 0; i < (NUMBEROFAXIS - 1); i++)
	{
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    310a:	80 91 d9 06 	lds	r24, 0x06D9
    310e:	30 91 d8 06 	lds	r19, 0x06D8
    3112:	88 23       	and	r24, r24
    3114:	09 f4       	brne	.+2      	; 0x3118 <ReadAcc+0xb0>
    3116:	4c c0       	rjmp	.+152    	; 0x31b0 <ReadAcc+0x148>
		{
			// Change polarity - use the zeros from the appropriate calibrate
			temp1 = ((accADC_P1[i] - Config.AccZero_P1[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][i]));
    3118:	80 91 63 08 	lds	r24, 0x0863
    311c:	08 2e       	mov	r0, r24
    311e:	00 0c       	add	r0, r0
    3120:	99 0b       	sbc	r25, r25
    3122:	fc 01       	movw	r30, r24
    3124:	ee 0f       	add	r30, r30
    3126:	ff 1f       	adc	r31, r31
    3128:	8e 0f       	add	r24, r30
    312a:	9f 1f       	adc	r25, r31
    312c:	8c 0f       	add	r24, r28
    312e:	9d 1f       	adc	r25, r29
    3130:	fc 01       	movw	r30, r24
    3132:	e2 5b       	subi	r30, 0xB2	; 178
    3134:	fe 4f       	sbci	r31, 0xFE	; 254
    3136:	24 91       	lpm	r18, Z
    3138:	f3 01       	movw	r30, r6
    313a:	40 81       	ld	r20, Z
    313c:	51 81       	ldd	r21, Z+1	; 0x01
    313e:	f8 01       	movw	r30, r16
    3140:	f5 97       	sbiw	r30, 0x35	; 53
    3142:	80 81       	ld	r24, Z
    3144:	91 81       	ldd	r25, Z+1	; 0x01
    3146:	48 1b       	sub	r20, r24
    3148:	59 0b       	sbc	r21, r25
    314a:	24 03       	mulsu	r18, r20
    314c:	c0 01       	movw	r24, r0
    314e:	25 9f       	mul	r18, r21
    3150:	90 0d       	add	r25, r0
    3152:	11 24       	eor	r1, r1
			temp2 = ((accADC_P2[i] - Config.AccZero_P2[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][i]));
    3154:	e3 2f       	mov	r30, r19
    3156:	33 0f       	add	r19, r19
    3158:	ff 0b       	sbc	r31, r31
    315a:	9f 01       	movw	r18, r30
    315c:	22 0f       	add	r18, r18
    315e:	33 1f       	adc	r19, r19
    3160:	e2 0f       	add	r30, r18
    3162:	f3 1f       	adc	r31, r19
    3164:	ec 0f       	add	r30, r28
    3166:	fd 1f       	adc	r31, r29
    3168:	e2 5b       	subi	r30, 0xB2	; 178
    316a:	fe 4f       	sbci	r31, 0xFE	; 254
    316c:	24 91       	lpm	r18, Z
    316e:	f6 01       	movw	r30, r12
    3170:	40 81       	ld	r20, Z
    3172:	51 81       	ldd	r21, Z+1	; 0x01
    3174:	f8 01       	movw	r30, r16
    3176:	60 81       	ld	r22, Z
    3178:	71 81       	ldd	r23, Z+1	; 0x01
    317a:	46 1b       	sub	r20, r22
    317c:	57 0b       	sbc	r21, r23
    317e:	24 03       	mulsu	r18, r20
    3180:	40 01       	movw	r8, r0
    3182:	25 9f       	mul	r18, r21
    3184:	90 0c       	add	r9, r0
    3186:	11 24       	eor	r1, r1
			
			// Get P1 value
			temp1 = scale32(temp1, (100 - transition));
    3188:	20 91 38 05 	lds	r18, 0x0538
    318c:	30 91 39 05 	lds	r19, 0x0539
    3190:	b2 01       	movw	r22, r4
    3192:	62 1b       	sub	r22, r18
    3194:	73 0b       	sbc	r23, r19
    3196:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    319a:	5c 01       	movw	r10, r24

			// Get P2 value
			temp2 = scale32(temp2, transition);
    319c:	60 91 38 05 	lds	r22, 0x0538
    31a0:	70 91 39 05 	lds	r23, 0x0539
    31a4:	c4 01       	movw	r24, r8
    31a6:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>

			// Sum the two values
			accADC[i] = temp1 + temp2;
    31aa:	8a 0d       	add	r24, r10
    31ac:	9b 1d       	adc	r25, r11
    31ae:	1a c0       	rjmp	.+52     	; 0x31e4 <ReadAcc+0x17c>
		}
		else
		{
			accADC[i] = ((accADC_P2[i] - Config.AccZero_P2[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][i]));
    31b0:	e3 2f       	mov	r30, r19
    31b2:	33 0f       	add	r19, r19
    31b4:	ff 0b       	sbc	r31, r31
    31b6:	cf 01       	movw	r24, r30
    31b8:	88 0f       	add	r24, r24
    31ba:	99 1f       	adc	r25, r25
    31bc:	e8 0f       	add	r30, r24
    31be:	f9 1f       	adc	r31, r25
    31c0:	ec 0f       	add	r30, r28
    31c2:	fd 1f       	adc	r31, r29
    31c4:	e2 5b       	subi	r30, 0xB2	; 178
    31c6:	fe 4f       	sbci	r31, 0xFE	; 254
    31c8:	24 91       	lpm	r18, Z
    31ca:	f6 01       	movw	r30, r12
    31cc:	40 81       	ld	r20, Z
    31ce:	51 81       	ldd	r21, Z+1	; 0x01
    31d0:	f8 01       	movw	r30, r16
    31d2:	80 81       	ld	r24, Z
    31d4:	91 81       	ldd	r25, Z+1	; 0x01
    31d6:	48 1b       	sub	r20, r24
    31d8:	59 0b       	sbc	r21, r25
    31da:	24 03       	mulsu	r18, r20
    31dc:	c0 01       	movw	r24, r0
    31de:	25 9f       	mul	r18, r21
    31e0:	90 0d       	add	r25, r0
    31e2:	11 24       	eor	r1, r1
    31e4:	f7 01       	movw	r30, r14
    31e6:	91 83       	std	Z+1, r25	; 0x01
    31e8:	80 83       	st	Z, r24
    31ea:	f2 e0       	ldi	r31, 0x02	; 2
    31ec:	6f 0e       	add	r6, r31
    31ee:	71 1c       	adc	r7, r1
    31f0:	82 e0       	ldi	r24, 0x02	; 2
    31f2:	c8 0e       	add	r12, r24
    31f4:	d1 1c       	adc	r13, r1
    31f6:	0e 5f       	subi	r16, 0xFE	; 254
    31f8:	1f 4f       	sbci	r17, 0xFF	; 255
    31fa:	e2 e0       	ldi	r30, 0x02	; 2
    31fc:	ee 0e       	add	r14, r30
    31fe:	f1 1c       	adc	r15, r1
	{
		Config.AccZero_P2[YAW] = Config.AccZeroNormZ_P2 - Config.AccZeroDiff_P2;
	}

	// Roll and Pitch are handled normally
	for (i = 0; i < (NUMBEROFAXIS - 1); i++)
    3200:	21 97       	sbiw	r28, 0x01	; 1
    3202:	19 f0       	breq	.+6      	; 0x320a <ReadAcc+0x1a2>
    3204:	c1 e0       	ldi	r28, 0x01	; 1
    3206:	d0 e0       	ldi	r29, 0x00	; 0
    3208:	80 cf       	rjmp	.-256    	; 0x310a <ReadAcc+0xa2>
		}
	}
	
	// Z -axis requires special handling as the zeros are already polarity corrected
	// Only need to do this if the orientations differ
	if (Config.P1_Reference != NO_ORIENT)
    320a:	80 91 d9 06 	lds	r24, 0x06D9
    320e:	90 91 d8 06 	lds	r25, 0x06D8
    3212:	60 91 7a 05 	lds	r22, 0x057A
    3216:	70 91 7b 05 	lds	r23, 0x057B
    321a:	40 91 55 08 	lds	r20, 0x0855
    321e:	50 91 56 08 	lds	r21, 0x0856
    3222:	88 23       	and	r24, r24
    3224:	09 f4       	brne	.+2      	; 0x3228 <ReadAcc+0x1c0>
    3226:	44 c0       	rjmp	.+136    	; 0x32b0 <ReadAcc+0x248>
	{
		// Change polarity - use the zeros from the appropriate calibrate
		temp1 = ((accADC_P1[YAW] * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]) - Config.AccZero_P1[YAW]));
    3228:	e0 91 63 08 	lds	r30, 0x0863
    322c:	0e 2e       	mov	r0, r30
    322e:	00 0c       	add	r0, r0
    3230:	ff 0b       	sbc	r31, r31
    3232:	9f 01       	movw	r18, r30
    3234:	22 0f       	add	r18, r18
    3236:	33 1f       	adc	r19, r19
    3238:	e2 0f       	add	r30, r18
    323a:	f3 1f       	adc	r31, r19
    323c:	e0 5b       	subi	r30, 0xB0	; 176
    323e:	fe 4f       	sbci	r31, 0xFE	; 254
    3240:	24 91       	lpm	r18, Z
    3242:	00 91 6e 05 	lds	r16, 0x056E
    3246:	10 91 6f 05 	lds	r17, 0x056F
    324a:	20 03       	mulsu	r18, r16
    324c:	d0 01       	movw	r26, r0
    324e:	21 9f       	mul	r18, r17
    3250:	b0 0d       	add	r27, r0
    3252:	11 24       	eor	r1, r1
    3254:	20 91 20 08 	lds	r18, 0x0820
    3258:	30 91 21 08 	lds	r19, 0x0821
    325c:	a2 1b       	sub	r26, r18
    325e:	b3 0b       	sbc	r27, r19
		temp2 = ((accADC_P2[YAW] * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]) - Config.AccZero_P2[YAW]));
    3260:	e9 2f       	mov	r30, r25
    3262:	99 0f       	add	r25, r25
    3264:	ff 0b       	sbc	r31, r31
    3266:	cf 01       	movw	r24, r30
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	e8 0f       	add	r30, r24
    326e:	f9 1f       	adc	r31, r25
    3270:	e0 5b       	subi	r30, 0xB0	; 176
    3272:	fe 4f       	sbci	r31, 0xFE	; 254
    3274:	24 91       	lpm	r18, Z
    3276:	26 03       	mulsu	r18, r22
    3278:	80 01       	movw	r16, r0
    327a:	27 9f       	mul	r18, r23
    327c:	10 0d       	add	r17, r0
    327e:	11 24       	eor	r1, r1
    3280:	04 1b       	sub	r16, r20
    3282:	15 0b       	sbc	r17, r21
			
		// Get P1 value
		temp1 = scale32(temp1, (100 - transition));
    3284:	80 91 38 05 	lds	r24, 0x0538
    3288:	90 91 39 05 	lds	r25, 0x0539
    328c:	64 e6       	ldi	r22, 0x64	; 100
    328e:	70 e0       	ldi	r23, 0x00	; 0
    3290:	68 1b       	sub	r22, r24
    3292:	79 0b       	sbc	r23, r25
    3294:	cd 01       	movw	r24, r26
    3296:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    329a:	ec 01       	movw	r28, r24

		// Get P2 value
		temp2 = scale32(temp2, transition);
    329c:	60 91 38 05 	lds	r22, 0x0538
    32a0:	70 91 39 05 	lds	r23, 0x0539
    32a4:	c8 01       	movw	r24, r16
    32a6:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>

		// Sum the two values
		accADC[YAW] = temp1 + temp2;
    32aa:	8c 0f       	add	r24, r28
    32ac:	9d 1f       	adc	r25, r29
    32ae:	12 c0       	rjmp	.+36     	; 0x32d4 <ReadAcc+0x26c>
	}
	else
	{
		accADC[YAW] = ((accADC_P2[YAW] * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]) - Config.AccZero_P2[YAW]));
    32b0:	e9 2f       	mov	r30, r25
    32b2:	99 0f       	add	r25, r25
    32b4:	ff 0b       	sbc	r31, r31
    32b6:	cf 01       	movw	r24, r30
    32b8:	88 0f       	add	r24, r24
    32ba:	99 1f       	adc	r25, r25
    32bc:	e8 0f       	add	r30, r24
    32be:	f9 1f       	adc	r31, r25
    32c0:	e0 5b       	subi	r30, 0xB0	; 176
    32c2:	fe 4f       	sbci	r31, 0xFE	; 254
    32c4:	24 91       	lpm	r18, Z
    32c6:	26 03       	mulsu	r18, r22
    32c8:	c0 01       	movw	r24, r0
    32ca:	27 9f       	mul	r18, r23
    32cc:	90 0d       	add	r25, r0
    32ce:	11 24       	eor	r1, r1
    32d0:	84 1b       	sub	r24, r20
    32d2:	95 0b       	sbc	r25, r21
    32d4:	90 93 75 05 	sts	0x0575, r25
    32d8:	80 93 74 05 	sts	0x0574, r24
	
	// Note also that accSmooth[] has already got the correct acc orientations, 
	// so only needs the zeroing value merged from one to the other.

	// Only need to do this if the orientations differ
	if (Config.P1_Reference != NO_ORIENT)
    32dc:	80 91 d9 06 	lds	r24, 0x06D9
    32e0:	c0 91 57 08 	lds	r28, 0x0857
    32e4:	d0 91 58 08 	lds	r29, 0x0858
    32e8:	00 91 55 08 	lds	r16, 0x0855
    32ec:	10 91 56 08 	lds	r17, 0x0856
    32f0:	88 23       	and	r24, r24
    32f2:	09 f4       	brne	.+2      	; 0x32f6 <ReadAcc+0x28e>
    32f4:	5c c0       	rjmp	.+184    	; 0x33ae <ReadAcc+0x346>
	{
		// Calculate the correct Z-axis data based on the orientation
		temp1 = accSmooth[YAW] + (Config.AccZeroNormZ_P1 - Config.AccZero_P1[YAW]); 
    32f6:	c0 90 29 06 	lds	r12, 0x0629
    32fa:	d0 90 2a 06 	lds	r13, 0x062A
    32fe:	e0 90 2b 06 	lds	r14, 0x062B
    3302:	f0 90 2c 06 	lds	r15, 0x062C
    3306:	80 91 22 08 	lds	r24, 0x0822
    330a:	90 91 23 08 	lds	r25, 0x0823
    330e:	20 91 20 08 	lds	r18, 0x0820
    3312:	30 91 21 08 	lds	r19, 0x0821
    3316:	82 1b       	sub	r24, r18
    3318:	93 0b       	sbc	r25, r19
    331a:	bc 01       	movw	r22, r24
    331c:	99 0f       	add	r25, r25
    331e:	88 0b       	sbc	r24, r24
    3320:	99 0b       	sbc	r25, r25
    3322:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    3326:	9b 01       	movw	r18, r22
    3328:	ac 01       	movw	r20, r24
    332a:	c7 01       	movw	r24, r14
    332c:	b6 01       	movw	r22, r12
    332e:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    3332:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    3336:	4b 01       	movw	r8, r22
    3338:	5c 01       	movw	r10, r24
		temp2 = accSmooth[YAW] + (Config.AccZeroNormZ_P2 - Config.AccZero_P2[YAW]); 
    333a:	c0 1b       	sub	r28, r16
    333c:	d1 0b       	sbc	r29, r17
    333e:	be 01       	movw	r22, r28
    3340:	dd 0f       	add	r29, r29
    3342:	88 0b       	sbc	r24, r24
    3344:	99 0b       	sbc	r25, r25
    3346:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    334a:	9b 01       	movw	r18, r22
    334c:	ac 01       	movw	r20, r24
    334e:	c7 01       	movw	r24, r14
    3350:	b6 01       	movw	r22, r12
    3352:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    3356:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    335a:	6b 01       	movw	r12, r22
    335c:	7c 01       	movw	r14, r24
	
		// Merge with transition
		temp1 = scale32(temp1, (100 - transition));
    335e:	80 91 38 05 	lds	r24, 0x0538
    3362:	90 91 39 05 	lds	r25, 0x0539
    3366:	24 e6       	ldi	r18, 0x64	; 100
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	b9 01       	movw	r22, r18
    336c:	68 1b       	sub	r22, r24
    336e:	79 0b       	sbc	r23, r25
    3370:	c4 01       	movw	r24, r8
    3372:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    3376:	8c 01       	movw	r16, r24
		temp2 = scale32(temp2, transition);
    3378:	60 91 38 05 	lds	r22, 0x0538
    337c:	70 91 39 05 	lds	r23, 0x0539
    3380:	c6 01       	movw	r24, r12
    3382:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    3386:	ec 01       	movw	r28, r24
	 
		accVertf = (float)temp1 + temp2;
    3388:	b8 01       	movw	r22, r16
    338a:	11 0f       	add	r17, r17
    338c:	88 0b       	sbc	r24, r24
    338e:	99 0b       	sbc	r25, r25
    3390:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    3394:	6b 01       	movw	r12, r22
    3396:	7c 01       	movw	r14, r24
    3398:	be 01       	movw	r22, r28
    339a:	dd 0f       	add	r29, r29
    339c:	88 0b       	sbc	r24, r24
    339e:	99 0b       	sbc	r25, r25
    33a0:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    33a4:	9b 01       	movw	r18, r22
    33a6:	ac 01       	movw	r20, r24
    33a8:	c7 01       	movw	r24, r14
    33aa:	b6 01       	movw	r22, r12
    33ac:	13 c0       	rjmp	.+38     	; 0x33d4 <ReadAcc+0x36c>
	}
	// Just use the P2 value
	else
	{
		// Calculate the correct Z-axis data based on the orientation
		accVertf = accSmooth[YAW] + (float)(Config.AccZeroNormZ_P2 - Config.AccZero_P2[YAW]);		
    33ae:	be 01       	movw	r22, r28
    33b0:	60 1b       	sub	r22, r16
    33b2:	71 0b       	sbc	r23, r17
    33b4:	07 2e       	mov	r0, r23
    33b6:	00 0c       	add	r0, r0
    33b8:	88 0b       	sbc	r24, r24
    33ba:	99 0b       	sbc	r25, r25
    33bc:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    33c0:	9b 01       	movw	r18, r22
    33c2:	ac 01       	movw	r20, r24
    33c4:	60 91 29 06 	lds	r22, 0x0629
    33c8:	70 91 2a 06 	lds	r23, 0x062A
    33cc:	80 91 2b 06 	lds	r24, 0x062B
    33d0:	90 91 2c 06 	lds	r25, 0x062C
    33d4:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    33d8:	60 93 26 05 	sts	0x0526, r22
    33dc:	70 93 27 05 	sts	0x0527, r23
    33e0:	80 93 28 05 	sts	0x0528, r24
    33e4:	90 93 29 05 	sts	0x0529, r25
	}
}
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	1f 91       	pop	r17
    33ee:	0f 91       	pop	r16
    33f0:	ff 90       	pop	r15
    33f2:	ef 90       	pop	r14
    33f4:	df 90       	pop	r13
    33f6:	cf 90       	pop	r12
    33f8:	bf 90       	pop	r11
    33fa:	af 90       	pop	r10
    33fc:	9f 90       	pop	r9
    33fe:	8f 90       	pop	r8
    3400:	7f 90       	pop	r7
    3402:	6f 90       	pop	r6
    3404:	5f 90       	pop	r5
    3406:	4f 90       	pop	r4
    3408:	08 95       	ret

0000340a <CalibrateAcc>:
// For V1.2 onwards we have to be able to calibrate both
// orientations when there are more than one.
//***************************************************************

void CalibrateAcc(int8_t type)
{
    340a:	1f 93       	push	r17
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	00 d0       	rcall	.+0      	; 0x3412 <CalibrateAcc+0x8>
    3412:	00 d0       	rcall	.+0      	; 0x3414 <CalibrateAcc+0xa>
    3414:	00 d0       	rcall	.+0      	; 0x3416 <CalibrateAcc+0xc>
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    341a:	1a 82       	std	Y+2, r1	; 0x02
    341c:	19 82       	std	Y+1, r1	; 0x01
    341e:	1c 82       	std	Y+4, r1	; 0x04
    3420:	1b 82       	std	Y+3, r1	; 0x03
    3422:	1e 82       	std	Y+6, r1	; 0x06
    3424:	1d 82       	std	Y+5, r1	; 0x05
    3426:	20 91 38 05 	lds	r18, 0x0538
    342a:	30 91 39 05 	lds	r19, 0x0539

	// Calibrate acc
	// P2
	if (type == NORMAL)
    342e:	81 11       	cpse	r24, r1
    3430:	e0 c0       	rjmp	.+448    	; 0x35f2 <CalibrateAcc+0x1e8>
	{
		// Work out which orientation we are calibrating.
		// Only need to do this if the orientations differ.
		// Just do P2 if orientations the same.
		// Will not save new calibration when different and not firmly in P1 or p2.
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    3432:	20 36       	cpi	r18, 0x60	; 96
    3434:	31 05       	cpc	r19, r1
    3436:	24 f4       	brge	.+8      	; 0x3440 <CalibrateAcc+0x36>
    3438:	80 91 d9 06 	lds	r24, 0x06D9
    343c:	81 11       	cpse	r24, r1
    343e:	63 c0       	rjmp	.+198    	; 0x3506 <CalibrateAcc+0xfc>
    3440:	10 e2       	ldi	r17, 0x20	; 32
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
			{
				get_raw_accs();						// Updates accADC_P1[] and accADC_P2[] (RPY)
    3442:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <get_raw_accs>
				accZero[ROLL] += accADC_P2[ROLL];
    3446:	29 81       	ldd	r18, Y+1	; 0x01
    3448:	3a 81       	ldd	r19, Y+2	; 0x02
    344a:	80 91 76 05 	lds	r24, 0x0576
    344e:	90 91 77 05 	lds	r25, 0x0577
    3452:	82 0f       	add	r24, r18
    3454:	93 1f       	adc	r25, r19
    3456:	9a 83       	std	Y+2, r25	; 0x02
    3458:	89 83       	std	Y+1, r24	; 0x01
				accZero[PITCH] += accADC_P2[PITCH];
    345a:	2b 81       	ldd	r18, Y+3	; 0x03
    345c:	3c 81       	ldd	r19, Y+4	; 0x04
    345e:	80 91 78 05 	lds	r24, 0x0578
    3462:	90 91 79 05 	lds	r25, 0x0579
    3466:	82 0f       	add	r24, r18
    3468:	93 1f       	adc	r25, r19
    346a:	9c 83       	std	Y+4, r25	; 0x04
    346c:	8b 83       	std	Y+3, r24	; 0x03
				accZero[YAW] += accADC_P2[YAW];
    346e:	2d 81       	ldd	r18, Y+5	; 0x05
    3470:	3e 81       	ldd	r19, Y+6	; 0x06
    3472:	80 91 7a 05 	lds	r24, 0x057A
    3476:	90 91 7b 05 	lds	r25, 0x057B
    347a:	82 0f       	add	r24, r18
    347c:	93 1f       	adc	r25, r19
    347e:	9e 83       	std	Y+6, r25	; 0x06
    3480:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3482:	8f e4       	ldi	r24, 0x4F	; 79
    3484:	93 ec       	ldi	r25, 0xC3	; 195
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <CalibrateAcc+0x7c>
    348a:	00 c0       	rjmp	.+0      	; 0x348c <CalibrateAcc+0x82>
    348c:	00 00       	nop
    348e:	11 50       	subi	r17, 0x01	; 1
		// Just do P2 if orientations the same.
		// Will not save new calibration when different and not firmly in P1 or p2.
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
    3490:	c1 f6       	brne	.-80     	; 0x3442 <CalibrateAcc+0x38>
    3492:	fe 01       	movw	r30, r28
    3494:	31 96       	adiw	r30, 0x01	; 1
    3496:	9e 01       	movw	r18, r28
    3498:	29 5f       	subi	r18, 0xF9	; 249
    349a:	3f 4f       	sbci	r19, 0xFF	; 255
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
			{
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
    349c:	80 81       	ld	r24, Z
    349e:	91 81       	ldd	r25, Z+1	; 0x01
    34a0:	40 96       	adiw	r24, 0x10	; 16
    34a2:	65 e0       	ldi	r22, 0x05	; 5
    34a4:	95 95       	asr	r25
    34a6:	87 95       	ror	r24
    34a8:	6a 95       	dec	r22
    34aa:	e1 f7       	brne	.-8      	; 0x34a4 <CalibrateAcc+0x9a>
    34ac:	81 93       	st	Z+, r24
    34ae:	91 93       	st	Z+, r25
				accZero[YAW] += accADC_P2[YAW];
				_delay_ms(10);						// Get a better acc average over time
			}
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    34b0:	e2 17       	cp	r30, r18
    34b2:	f3 07       	cpc	r31, r19
    34b4:	99 f7       	brne	.-26     	; 0x349c <CalibrateAcc+0x92>
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
			}

			// Reset zeros to normal cal
			Config.AccZero_P2[ROLL] = accZero[ROLL];
    34b6:	89 81       	ldd	r24, Y+1	; 0x01
    34b8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ba:	90 93 52 08 	sts	0x0852, r25
    34be:	80 93 51 08 	sts	0x0851, r24
			Config.AccZero_P2[PITCH] = accZero[PITCH];
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	9c 81       	ldd	r25, Y+4	; 0x04
    34c6:	90 93 54 08 	sts	0x0854, r25
    34ca:	80 93 53 08 	sts	0x0853, r24
			Config.AccZeroNormZ_P2 = accZero[YAW];
			
			// Correct polarity of AccZeroNormZ as per orientation
			Config.AccZeroNormZ_P2 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]);
    34ce:	e0 91 d8 06 	lds	r30, 0x06D8
    34d2:	0e 2e       	mov	r0, r30
    34d4:	00 0c       	add	r0, r0
    34d6:	ff 0b       	sbc	r31, r31
    34d8:	cf 01       	movw	r24, r30
    34da:	88 0f       	add	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	e8 0f       	add	r30, r24
    34e0:	f9 1f       	adc	r31, r25
    34e2:	e0 5b       	subi	r30, 0xB0	; 176
    34e4:	fe 4f       	sbci	r31, 0xFE	; 254
    34e6:	24 91       	lpm	r18, Z
    34e8:	4d 81       	ldd	r20, Y+5	; 0x05
    34ea:	5e 81       	ldd	r21, Y+6	; 0x06
    34ec:	24 03       	mulsu	r18, r20
    34ee:	c0 01       	movw	r24, r0
    34f0:	25 9f       	mul	r18, r21
    34f2:	90 0d       	add	r25, r0
    34f4:	11 24       	eor	r1, r1
    34f6:	90 93 58 08 	sts	0x0858, r25
    34fa:	80 93 57 08 	sts	0x0857, r24
			
			// Flag that normal cal done
			Config.Main_flags |= (1 << normal_cal_done_P2);
    34fe:	80 91 39 08 	lds	r24, 0x0839
    3502:	88 60       	ori	r24, 0x08	; 8
    3504:	66 c0       	rjmp	.+204    	; 0x35d2 <CalibrateAcc+0x1c8>
			LED1 = 1;
			_delay_ms(500);
			LED1 = 0;
		}
		// P1
		else if (transition <= 5)
    3506:	26 30       	cpi	r18, 0x06	; 6
    3508:	31 05       	cpc	r19, r1
    350a:	0c f0       	brlt	.+2      	; 0x350e <CalibrateAcc+0x104>
    350c:	47 c1       	rjmp	.+654    	; 0x379c <CalibrateAcc+0x392>
    350e:	10 e2       	ldi	r17, 0x20	; 32
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
			{
				get_raw_accs();						// Updates accADC_P1[] and accADC_P2[] (RPY)
    3510:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <get_raw_accs>
				accZero[ROLL] += accADC_P1[ROLL];
    3514:	29 81       	ldd	r18, Y+1	; 0x01
    3516:	3a 81       	ldd	r19, Y+2	; 0x02
    3518:	80 91 6a 05 	lds	r24, 0x056A
    351c:	90 91 6b 05 	lds	r25, 0x056B
    3520:	82 0f       	add	r24, r18
    3522:	93 1f       	adc	r25, r19
    3524:	9a 83       	std	Y+2, r25	; 0x02
    3526:	89 83       	std	Y+1, r24	; 0x01
				accZero[PITCH] += accADC_P1[PITCH];
    3528:	2b 81       	ldd	r18, Y+3	; 0x03
    352a:	3c 81       	ldd	r19, Y+4	; 0x04
    352c:	80 91 6c 05 	lds	r24, 0x056C
    3530:	90 91 6d 05 	lds	r25, 0x056D
    3534:	82 0f       	add	r24, r18
    3536:	93 1f       	adc	r25, r19
    3538:	9c 83       	std	Y+4, r25	; 0x04
    353a:	8b 83       	std	Y+3, r24	; 0x03
				accZero[YAW] += accADC_P1[YAW];
    353c:	2d 81       	ldd	r18, Y+5	; 0x05
    353e:	3e 81       	ldd	r19, Y+6	; 0x06
    3540:	80 91 6e 05 	lds	r24, 0x056E
    3544:	90 91 6f 05 	lds	r25, 0x056F
    3548:	82 0f       	add	r24, r18
    354a:	93 1f       	adc	r25, r19
    354c:	9e 83       	std	Y+6, r25	; 0x06
    354e:	8d 83       	std	Y+5, r24	; 0x05
    3550:	8f e4       	ldi	r24, 0x4F	; 79
    3552:	93 ec       	ldi	r25, 0xC3	; 195
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <CalibrateAcc+0x14a>
    3558:	00 c0       	rjmp	.+0      	; 0x355a <CalibrateAcc+0x150>
    355a:	00 00       	nop
    355c:	11 50       	subi	r17, 0x01	; 1
		}
		// P1
		else if (transition <= 5)
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
    355e:	c1 f6       	brne	.-80     	; 0x3510 <CalibrateAcc+0x106>
    3560:	fe 01       	movw	r30, r28
    3562:	31 96       	adiw	r30, 0x01	; 1
    3564:	9e 01       	movw	r18, r28
    3566:	29 5f       	subi	r18, 0xF9	; 249
    3568:	3f 4f       	sbci	r19, 0xFF	; 255
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
			{
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
    356a:	80 81       	ld	r24, Z
    356c:	91 81       	ldd	r25, Z+1	; 0x01
    356e:	40 96       	adiw	r24, 0x10	; 16
    3570:	45 e0       	ldi	r20, 0x05	; 5
    3572:	95 95       	asr	r25
    3574:	87 95       	ror	r24
    3576:	4a 95       	dec	r20
    3578:	e1 f7       	brne	.-8      	; 0x3572 <CalibrateAcc+0x168>
    357a:	81 93       	st	Z+, r24
    357c:	91 93       	st	Z+, r25
				accZero[YAW] += accADC_P1[YAW];
				_delay_ms(10);						// Get a better acc average over time
			}
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    357e:	e2 17       	cp	r30, r18
    3580:	f3 07       	cpc	r31, r19
    3582:	99 f7       	brne	.-26     	; 0x356a <CalibrateAcc+0x160>
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
			}

			// Reset zeros to normal cal
			Config.AccZero_P1[ROLL] = accZero[ROLL];
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	9a 81       	ldd	r25, Y+2	; 0x02
    3588:	90 93 1d 08 	sts	0x081D, r25
    358c:	80 93 1c 08 	sts	0x081C, r24
			Config.AccZero_P1[PITCH] = accZero[PITCH];
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	90 93 1f 08 	sts	0x081F, r25
    3598:	80 93 1e 08 	sts	0x081E, r24
			Config.AccZeroNormZ_P1 = accZero[YAW];
			
			// Correct polarity of AccZeroNormZ as per orientation
			Config.AccZeroNormZ_P1 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]);
    359c:	e0 91 63 08 	lds	r30, 0x0863
    35a0:	0e 2e       	mov	r0, r30
    35a2:	00 0c       	add	r0, r0
    35a4:	ff 0b       	sbc	r31, r31
    35a6:	cf 01       	movw	r24, r30
    35a8:	88 0f       	add	r24, r24
    35aa:	99 1f       	adc	r25, r25
    35ac:	e8 0f       	add	r30, r24
    35ae:	f9 1f       	adc	r31, r25
    35b0:	e0 5b       	subi	r30, 0xB0	; 176
    35b2:	fe 4f       	sbci	r31, 0xFE	; 254
    35b4:	24 91       	lpm	r18, Z
    35b6:	4d 81       	ldd	r20, Y+5	; 0x05
    35b8:	5e 81       	ldd	r21, Y+6	; 0x06
    35ba:	24 03       	mulsu	r18, r20
    35bc:	c0 01       	movw	r24, r0
    35be:	25 9f       	mul	r18, r21
    35c0:	90 0d       	add	r25, r0
    35c2:	11 24       	eor	r1, r1
    35c4:	90 93 23 08 	sts	0x0823, r25
    35c8:	80 93 22 08 	sts	0x0822, r24
			
			// Flag that normal cal done
			Config.Main_flags |= (1 << normal_cal_done_P1);
    35cc:	80 91 39 08 	lds	r24, 0x0839
    35d0:	82 60       	ori	r24, 0x02	; 2
    35d2:	80 93 39 08 	sts	0x0839, r24

			// Save new calibration and flash LED for confirmation
			Save_Config_to_EEPROM();
    35d6:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
			LED1 = 1;
    35da:	2b 9a       	sbi	0x05, 3	; 5
    35dc:	9f e7       	ldi	r25, 0x7F	; 127
    35de:	24 e8       	ldi	r18, 0x84	; 132
    35e0:	8e e1       	ldi	r24, 0x1E	; 30
    35e2:	91 50       	subi	r25, 0x01	; 1
    35e4:	20 40       	sbci	r18, 0x00	; 0
    35e6:	80 40       	sbci	r24, 0x00	; 0
    35e8:	e1 f7       	brne	.-8      	; 0x35e2 <CalibrateAcc+0x1d8>
    35ea:	00 c0       	rjmp	.+0      	; 0x35ec <CalibrateAcc+0x1e2>
    35ec:	00 00       	nop
			_delay_ms(500);
			LED1 = 0;
    35ee:	2b 98       	cbi	0x05, 3	; 5
    35f0:	d5 c0       	rjmp	.+426    	; 0x379c <CalibrateAcc+0x392>
    35f2:	80 91 39 08 	lds	r24, 0x0839

	else
	// Calibrate inverted acc
	{
		// P2 or same
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    35f6:	20 36       	cpi	r18, 0x60	; 96
    35f8:	31 05       	cpc	r19, r1
    35fa:	24 f4       	brge	.+8      	; 0x3604 <CalibrateAcc+0x1fa>
    35fc:	90 91 d9 06 	lds	r25, 0x06D9
    3600:	91 11       	cpse	r25, r1
    3602:	59 c0       	rjmp	.+178    	; 0x36b6 <CalibrateAcc+0x2ac>
		{
			// Only update the inverted cal value if preceded by a normal calibration
			if (Config.Main_flags & (1 << normal_cal_done_P2))
    3604:	83 ff       	sbrs	r24, 3
    3606:	ca c0       	rjmp	.+404    	; 0x379c <CalibrateAcc+0x392>
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P2 = 0;
    3608:	10 92 5a 08 	sts	0x085A, r1
    360c:	10 92 59 08 	sts	0x0859, r1
    3610:	10 e2       	ldi	r17, 0x20	; 32

				for (i = 0; i < 32; i++)
				{
					get_raw_accs();					// Updates accADC_P1[] and accADC_P2[] (RPY)
    3612:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <get_raw_accs>
					Config.AccZeroInvZ_P2 += accADC_P2[YAW];
    3616:	20 91 59 08 	lds	r18, 0x0859
    361a:	30 91 5a 08 	lds	r19, 0x085A
    361e:	80 91 7a 05 	lds	r24, 0x057A
    3622:	90 91 7b 05 	lds	r25, 0x057B
    3626:	82 0f       	add	r24, r18
    3628:	93 1f       	adc	r25, r19
    362a:	90 93 5a 08 	sts	0x085A, r25
    362e:	80 93 59 08 	sts	0x0859, r24
    3632:	8f e4       	ldi	r24, 0x4F	; 79
    3634:	93 ec       	ldi	r25, 0xC3	; 195
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	f1 f7       	brne	.-4      	; 0x3636 <CalibrateAcc+0x22c>
    363a:	00 c0       	rjmp	.+0      	; 0x363c <CalibrateAcc+0x232>
    363c:	00 00       	nop
    363e:	11 50       	subi	r17, 0x01	; 1
			if (Config.Main_flags & (1 << normal_cal_done_P2))
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P2 = 0;

				for (i = 0; i < 32; i++)
    3640:	41 f7       	brne	.-48     	; 0x3612 <CalibrateAcc+0x208>

				// Round and divide by 32
				Config.AccZeroInvZ_P2 = ((Config.AccZeroInvZ_P2 + 16) >> 5);		// Inverted zero point
				
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P2 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]);
    3642:	e0 91 d8 06 	lds	r30, 0x06D8
    3646:	0e 2e       	mov	r0, r30
    3648:	00 0c       	add	r0, r0
    364a:	ff 0b       	sbc	r31, r31
    364c:	cf 01       	movw	r24, r30
    364e:	88 0f       	add	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	e8 0f       	add	r30, r24
    3654:	f9 1f       	adc	r31, r25
    3656:	e0 5b       	subi	r30, 0xB0	; 176
    3658:	fe 4f       	sbci	r31, 0xFE	; 254
    365a:	24 91       	lpm	r18, Z
					Config.AccZeroInvZ_P2 += accADC_P2[YAW];
					_delay_ms(10);					// Get a better acc average over time
				}

				// Round and divide by 32
				Config.AccZeroInvZ_P2 = ((Config.AccZeroInvZ_P2 + 16) >> 5);		// Inverted zero point
    365c:	40 91 59 08 	lds	r20, 0x0859
    3660:	50 91 5a 08 	lds	r21, 0x085A
    3664:	40 5f       	subi	r20, 0xF0	; 240
    3666:	5f 4f       	sbci	r21, 0xFF	; 255
    3668:	b5 e0       	ldi	r27, 0x05	; 5
    366a:	55 95       	asr	r21
    366c:	47 95       	ror	r20
    366e:	ba 95       	dec	r27
    3670:	e1 f7       	brne	.-8      	; 0x366a <CalibrateAcc+0x260>
				
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P2 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]);
    3672:	24 03       	mulsu	r18, r20
    3674:	b0 01       	movw	r22, r0
    3676:	25 9f       	mul	r18, r21
    3678:	70 0d       	add	r23, r0
    367a:	11 24       	eor	r1, r1
    367c:	70 93 5a 08 	sts	0x085A, r23
    3680:	60 93 59 08 	sts	0x0859, r22

				// Test if board is actually inverted relative to board orientation.
				if (Config.AccZeroInvZ_P2 < 0)
    3684:	77 ff       	sbrs	r23, 7
    3686:	8a c0       	rjmp	.+276    	; 0x379c <CalibrateAcc+0x392>
				{
					// Reset zero to halfway between min and max Z
					Config.AccZeroDiff_P2 = ((Config.AccZeroNormZ_P2 - Config.AccZeroInvZ_P2) >> 1);
    3688:	80 91 57 08 	lds	r24, 0x0857
    368c:	90 91 58 08 	lds	r25, 0x0858
    3690:	9c 01       	movw	r18, r24
    3692:	26 1b       	sub	r18, r22
    3694:	37 0b       	sbc	r19, r23
    3696:	35 95       	asr	r19
    3698:	27 95       	ror	r18
    369a:	30 93 5c 08 	sts	0x085C, r19
    369e:	20 93 5b 08 	sts	0x085B, r18
					
					 // Config.AccZero_P2[YAW] is now half-way in between
					Config.AccZero_P2[YAW] = Config.AccZeroNormZ_P2 - Config.AccZeroDiff_P2;
    36a2:	82 1b       	sub	r24, r18
    36a4:	93 0b       	sbc	r25, r19
    36a6:	90 93 56 08 	sts	0x0856, r25
    36aa:	80 93 55 08 	sts	0x0855, r24

					// Flag that inverted cal done
					Config.Main_flags |= (1 << inv_cal_done_P2);
    36ae:	80 91 39 08 	lds	r24, 0x0839
    36b2:	84 60       	ori	r24, 0x04	; 4
    36b4:	58 c0       	rjmp	.+176    	; 0x3766 <CalibrateAcc+0x35c>
		
		// P1
		else 
		{
			// Only update the inverted cal value if preceded by a normal calibration
			if (Config.Main_flags & (1 << normal_cal_done_P1))
    36b6:	81 ff       	sbrs	r24, 1
    36b8:	71 c0       	rjmp	.+226    	; 0x379c <CalibrateAcc+0x392>
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P1 = 0;
    36ba:	10 92 25 08 	sts	0x0825, r1
    36be:	10 92 24 08 	sts	0x0824, r1
    36c2:	10 e2       	ldi	r17, 0x20	; 32

				for (i = 0; i < 32; i++)
				{
					get_raw_accs();					// Updates accADC_P1[] and accADC_P2[] (RPY)
    36c4:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <get_raw_accs>
					Config.AccZeroInvZ_P1 += accADC_P1[YAW];
    36c8:	20 91 24 08 	lds	r18, 0x0824
    36cc:	30 91 25 08 	lds	r19, 0x0825
    36d0:	80 91 6e 05 	lds	r24, 0x056E
    36d4:	90 91 6f 05 	lds	r25, 0x056F
    36d8:	82 0f       	add	r24, r18
    36da:	93 1f       	adc	r25, r19
    36dc:	90 93 25 08 	sts	0x0825, r25
    36e0:	80 93 24 08 	sts	0x0824, r24
    36e4:	8f e4       	ldi	r24, 0x4F	; 79
    36e6:	93 ec       	ldi	r25, 0xC3	; 195
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	f1 f7       	brne	.-4      	; 0x36e8 <CalibrateAcc+0x2de>
    36ec:	00 c0       	rjmp	.+0      	; 0x36ee <CalibrateAcc+0x2e4>
    36ee:	00 00       	nop
    36f0:	11 50       	subi	r17, 0x01	; 1
			if (Config.Main_flags & (1 << normal_cal_done_P1))
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P1 = 0;

				for (i = 0; i < 32; i++)
    36f2:	41 f7       	brne	.-48     	; 0x36c4 <CalibrateAcc+0x2ba>

				// Round and divide by 32
				Config.AccZeroInvZ_P1 = ((Config.AccZeroInvZ_P1 + 16) >> 5);		// Inverted zero point
			
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P1 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]);
    36f4:	e0 91 63 08 	lds	r30, 0x0863
    36f8:	0e 2e       	mov	r0, r30
    36fa:	00 0c       	add	r0, r0
    36fc:	ff 0b       	sbc	r31, r31
    36fe:	cf 01       	movw	r24, r30
    3700:	88 0f       	add	r24, r24
    3702:	99 1f       	adc	r25, r25
    3704:	e8 0f       	add	r30, r24
    3706:	f9 1f       	adc	r31, r25
    3708:	e0 5b       	subi	r30, 0xB0	; 176
    370a:	fe 4f       	sbci	r31, 0xFE	; 254
    370c:	24 91       	lpm	r18, Z
					Config.AccZeroInvZ_P1 += accADC_P1[YAW];
					_delay_ms(10);					// Get a better acc average over time
				}

				// Round and divide by 32
				Config.AccZeroInvZ_P1 = ((Config.AccZeroInvZ_P1 + 16) >> 5);		// Inverted zero point
    370e:	40 91 24 08 	lds	r20, 0x0824
    3712:	50 91 25 08 	lds	r21, 0x0825
    3716:	40 5f       	subi	r20, 0xF0	; 240
    3718:	5f 4f       	sbci	r21, 0xFF	; 255
    371a:	65 e0       	ldi	r22, 0x05	; 5
    371c:	55 95       	asr	r21
    371e:	47 95       	ror	r20
    3720:	6a 95       	dec	r22
    3722:	e1 f7       	brne	.-8      	; 0x371c <CalibrateAcc+0x312>
			
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P1 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]);
    3724:	24 03       	mulsu	r18, r20
    3726:	b0 01       	movw	r22, r0
    3728:	25 9f       	mul	r18, r21
    372a:	70 0d       	add	r23, r0
    372c:	11 24       	eor	r1, r1
    372e:	70 93 25 08 	sts	0x0825, r23
    3732:	60 93 24 08 	sts	0x0824, r22

				// Test if board is actually inverted relative to board orientation.
				if (Config.AccZeroInvZ_P1 < 0)
    3736:	77 ff       	sbrs	r23, 7
    3738:	31 c0       	rjmp	.+98     	; 0x379c <CalibrateAcc+0x392>
				{
					// Reset zero to halfway between min and max Z
					Config.AccZeroDiff_P1 = ((Config.AccZeroNormZ_P1 - Config.AccZeroInvZ_P1) >> 1);
    373a:	80 91 22 08 	lds	r24, 0x0822
    373e:	90 91 23 08 	lds	r25, 0x0823
    3742:	9c 01       	movw	r18, r24
    3744:	26 1b       	sub	r18, r22
    3746:	37 0b       	sbc	r19, r23
    3748:	35 95       	asr	r19
    374a:	27 95       	ror	r18
    374c:	30 93 27 08 	sts	0x0827, r19
    3750:	20 93 26 08 	sts	0x0826, r18
					
					// Config.AccZero_P1[YAW] is now half-way in between
					Config.AccZero_P1[YAW] = Config.AccZeroNormZ_P1 - Config.AccZeroDiff_P1;
    3754:	82 1b       	sub	r24, r18
    3756:	93 0b       	sbc	r25, r19
    3758:	90 93 21 08 	sts	0x0821, r25
    375c:	80 93 20 08 	sts	0x0820, r24

					// Flag that inverted cal done
					Config.Main_flags |= (1 << inv_cal_done_P1);
    3760:	80 91 39 08 	lds	r24, 0x0839
    3764:	81 60       	ori	r24, 0x01	; 1
    3766:	80 93 39 08 	sts	0x0839, r24

					// Save new calibration and flash LED for confirmation
					Save_Config_to_EEPROM();
    376a:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
					LED1 = 1;
    376e:	2b 9a       	sbi	0x05, 3	; 5
    3770:	9f e7       	ldi	r25, 0x7F	; 127
    3772:	24 e8       	ldi	r18, 0x84	; 132
    3774:	8e e1       	ldi	r24, 0x1E	; 30
    3776:	91 50       	subi	r25, 0x01	; 1
    3778:	20 40       	sbci	r18, 0x00	; 0
    377a:	80 40       	sbci	r24, 0x00	; 0
    377c:	e1 f7       	brne	.-8      	; 0x3776 <CalibrateAcc+0x36c>
    377e:	00 c0       	rjmp	.+0      	; 0x3780 <CalibrateAcc+0x376>
    3780:	00 00       	nop
					_delay_ms(500);
					LED1 = 0;
    3782:	2b 98       	cbi	0x05, 3	; 5
				
					// Chirp as well. The LED might be hard to see.
					menu_beep(5);
    3784:	85 e0       	ldi	r24, 0x05	; 5
				}
			}			
		}

	} // Calibrate inverted acc
}
    3786:	26 96       	adiw	r28, 0x06	; 6
    3788:	0f b6       	in	r0, 0x3f	; 63
    378a:	f8 94       	cli
    378c:	de bf       	out	0x3e, r29	; 62
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	cd bf       	out	0x3d, r28	; 61
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	1f 91       	pop	r17
					LED1 = 1;
					_delay_ms(500);
					LED1 = 0;
				
					// Chirp as well. The LED might be hard to see.
					menu_beep(5);
    3798:	0c 94 6b 50 	jmp	0xa0d6	; 0xa0d6 <menu_beep>
				}
			}			
		}

	} // Calibrate inverted acc
}
    379c:	26 96       	adiw	r28, 0x06	; 6
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	f8 94       	cli
    37a2:	de bf       	out	0x3e, r29	; 62
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	cd bf       	out	0x3d, r28	; 61
    37a8:	df 91       	pop	r29
    37aa:	cf 91       	pop	r28
    37ac:	1f 91       	pop	r17
    37ae:	08 95       	ret

000037b0 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    37b0:	41 e0       	ldi	r20, 0x01	; 1
    37b2:	6b e6       	ldi	r22, 0x6B	; 107
    37b4:	80 ed       	ldi	r24, 0xD0	; 208
    37b6:	0e 94 b0 3b 	call	0x7760	; 0x7760 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    37ba:	48 e0       	ldi	r20, 0x08	; 8
    37bc:	6c e1       	ldi	r22, 0x1C	; 28
    37be:	80 ed       	ldi	r24, 0xD0	; 208
    37c0:	0c 94 b0 3b 	jmp	0x7760	; 0x7760 <writeI2Cbyte>

000037c4 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    37c4:	8f ef       	ldi	r24, 0xFF	; 255
    37c6:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    37ca:	10 92 7b 00 	sts	0x007B, r1
    37ce:	08 95       	ret

000037d0 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    37d0:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    37d4:	86 ec       	ldi	r24, 0xC6	; 198
    37d6:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    37da:	80 91 7a 00 	lds	r24, 0x007A
    37de:	86 fd       	sbrc	r24, 6
    37e0:	fc cf       	rjmp	.-8      	; 0x37da <read_adc+0xa>
}
    37e2:	08 95       	ret

000037e4 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    37e4:	cf 92       	push	r12
    37e6:	df 92       	push	r13
    37e8:	ef 92       	push	r14
    37ea:	0f 93       	push	r16
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    37f0:	cb e0       	ldi	r28, 0x0B	; 11
    37f2:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    37f4:	1f 9b       	sbis	0x03, 7	; 3
    37f6:	82 c0       	rjmp	.+260    	; 0x38fc <Display_balance+0x118>
	{
		RxGetChannels();						// Check state of transition switch
    37f8:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <RxGetChannels>
		UpdateTransition();						// Update the transition variable
    37fc:	0e 94 5e 6a 	call	0xd4bc	; 0xd4bc <UpdateTransition>

		// Read accs
		ReadAcc();
    3800:	0e 94 34 18 	call	0x3068	; 0x3068 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    3804:	60 e0       	ldi	r22, 0x00	; 0
    3806:	70 e0       	ldi	r23, 0x00	; 0
    3808:	cb 01       	movw	r24, r22
    380a:	0e 94 27 3e 	call	0x7c4e	; 0x7c4e <imu_update>
    380e:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    3810:	89 f7       	brne	.-30     	; 0x37f4 <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	40 e0       	ldi	r20, 0x00	; 0
    3818:	52 e4       	ldi	r21, 0x42	; 66
    381a:	60 91 25 06 	lds	r22, 0x0625
    381e:	70 91 26 06 	lds	r23, 0x0626
    3822:	80 91 27 06 	lds	r24, 0x0627
    3826:	90 91 28 06 	lds	r25, 0x0628
    382a:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    382e:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    3832:	6b 01       	movw	r12, r22
			y_pos = accSmooth[ROLL] + 64;
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	40 e8       	ldi	r20, 0x80	; 128
    383a:	52 e4       	ldi	r21, 0x42	; 66
    383c:	60 91 21 06 	lds	r22, 0x0621
    3840:	70 91 22 06 	lds	r23, 0x0622
    3844:	80 91 23 06 	lds	r24, 0x0623
    3848:	90 91 24 06 	lds	r25, 0x0624
    384c:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    3850:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    3854:	eb 01       	movw	r28, r22

			if (x_pos < 0) x_pos = 0;
    3856:	d7 fc       	sbrc	r13, 7
    3858:	08 c0       	rjmp	.+16     	; 0x386a <Display_balance+0x86>
			if (x_pos > 64) x_pos = 64;
    385a:	81 e4       	ldi	r24, 0x41	; 65
    385c:	c8 16       	cp	r12, r24
    385e:	d1 04       	cpc	r13, r1
    3860:	34 f0       	brlt	.+12     	; 0x386e <Display_balance+0x8a>
    3862:	80 e4       	ldi	r24, 0x40	; 64
    3864:	c8 2e       	mov	r12, r24
    3866:	d1 2c       	mov	r13, r1
    3868:	02 c0       	rjmp	.+4      	; 0x386e <Display_balance+0x8a>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    386a:	c1 2c       	mov	r12, r1
    386c:	d1 2c       	mov	r13, r1
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    386e:	d7 fd       	sbrc	r29, 7
    3870:	06 c0       	rjmp	.+12     	; 0x387e <Display_balance+0x9a>
			if (y_pos > 128) y_pos = 128;
    3872:	c1 38       	cpi	r28, 0x81	; 129
    3874:	d1 05       	cpc	r29, r1
    3876:	2c f0       	brlt	.+10     	; 0x3882 <Display_balance+0x9e>
    3878:	c0 e8       	ldi	r28, 0x80	; 128
    387a:	d0 e0       	ldi	r29, 0x00	; 0
    387c:	02 c0       	rjmp	.+4      	; 0x3882 <Display_balance+0x9e>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    387e:	c0 e0       	ldi	r28, 0x00	; 0
    3880:	d0 e0       	ldi	r29, 0x00	; 0
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    3882:	27 e3       	ldi	r18, 0x37	; 55
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	42 e0       	ldi	r20, 0x02	; 2
    3888:	50 e0       	ldi	r21, 0x00	; 0
    388a:	6f ef       	ldi	r22, 0xFF	; 255
    388c:	71 e0       	ldi	r23, 0x01	; 1
    388e:	8c e0       	ldi	r24, 0x0C	; 12
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    3896:	ee 24       	eor	r14, r14
    3898:	e3 94       	inc	r14
    389a:	00 e4       	ldi	r16, 0x40	; 64
    389c:	20 e8       	ldi	r18, 0x80	; 128
    389e:	40 e0       	ldi	r20, 0x00	; 0
    38a0:	60 e0       	ldi	r22, 0x00	; 0
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	91 e0       	ldi	r25, 0x01	; 1
    38a6:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    38aa:	05 e1       	ldi	r16, 0x15	; 21
    38ac:	25 e1       	ldi	r18, 0x15	; 21
    38ae:	46 e1       	ldi	r20, 0x16	; 22
    38b0:	66 e3       	ldi	r22, 0x36	; 54
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	91 e0       	ldi	r25, 0x01	; 1
    38b6:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    38ba:	08 e3       	ldi	r16, 0x38	; 56
    38bc:	20 e4       	ldi	r18, 0x40	; 64
    38be:	48 e0       	ldi	r20, 0x08	; 8
    38c0:	60 e4       	ldi	r22, 0x40	; 64
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	91 e0       	ldi	r25, 0x01	; 1
    38c6:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    38ca:	00 e2       	ldi	r16, 0x20	; 32
    38cc:	20 e6       	ldi	r18, 0x60	; 96
    38ce:	40 e2       	ldi	r20, 0x20	; 32
    38d0:	60 e2       	ldi	r22, 0x20	; 32
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	91 e0       	ldi	r25, 0x01	; 1
    38d6:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    38da:	01 e0       	ldi	r16, 0x01	; 1
    38dc:	28 e0       	ldi	r18, 0x08	; 8
    38de:	4c 2d       	mov	r20, r12
    38e0:	6c 2f       	mov	r22, r28
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	91 e0       	ldi	r25, 0x01	; 1
    38e6:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	91 e0       	ldi	r25, 0x01	; 1
    38ee:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
			clear_buffer(buffer);
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	91 e0       	ldi	r25, 0x01	; 1
    38f6:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
    38fa:	7a cf       	rjmp	.-268    	; 0x37f0 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	0f 91       	pop	r16
    3902:	ef 90       	pop	r14
    3904:	df 90       	pop	r13
    3906:	cf 90       	pop	r12
    3908:	08 95       	ret

0000390a <Display_in_out>:
//************************************************************
// Code
//************************************************************

void Display_in_out(void)
{
    390a:	2f 92       	push	r2
    390c:	3f 92       	push	r3
    390e:	4f 92       	push	r4
    3910:	5f 92       	push	r5
    3912:	6f 92       	push	r6
    3914:	7f 92       	push	r7
    3916:	8f 92       	push	r8
    3918:	9f 92       	push	r9
    391a:	af 92       	push	r10
    391c:	bf 92       	push	r11
    391e:	cf 92       	push	r12
    3920:	df 92       	push	r13
    3922:	ef 92       	push	r14
    3924:	ff 92       	push	r15
    3926:	0f 93       	push	r16
    3928:	1f 93       	push	r17
    392a:	cf 93       	push	r28
    392c:	df 93       	push	r29
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	a5 97       	sbiw	r28, 0x25	; 37
    3934:	0f b6       	in	r0, 0x3f	; 63
    3936:	f8 94       	cli
    3938:	de bf       	out	0x3e, r29	; 62
    393a:	0f be       	out	0x3f, r0	; 63
    393c:	cd bf       	out	0x3d, r28	; 61
	uint16_t ticker_16 = 0;
	uint32_t interval = 0;			// IMU interval	
	float	tempf1 = 0.0;
	
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
    393e:	0e 94 14 48 	call	0x9028	; 0x9028 <init_int>
				temp = ((temp - 3750) >> 1) + SERVO_CENTER; // SERVO_CENTER = 1500
			}
			else
			{
				// Scale motor from 2500~5000 to 1000~2000
				temp = ((temp << 2) + 5) / 10; 	// Round and convert
    3942:	0a e0       	ldi	r16, 0x0A	; 10
    3944:	20 2e       	mov	r2, r16
    3946:	31 2c       	mov	r3, r1
			{
				// Check for motor marker
				if (Config.Channel[i].Motor_marker == MOTOR)
				{
					// Set output to minimum pulse width (1000us)
					ServoOut[i] = MOTORMIN;
    3948:	88 ee       	ldi	r24, 0xE8	; 232
    394a:	48 2e       	mov	r4, r24
    394c:	83 e0       	ldi	r24, 0x03	; 3
    394e:	58 2e       	mov	r5, r24
			{
				Outputs[i] = (Outputs[i] + 2) / 5; // Convert to percentages +/-500 = +/-100%
			}
			else
			{
				Outputs[i] = (Outputs[i] - 2) / 5; 
    3950:	95 e0       	ldi	r25, 0x05	; 5
    3952:	a9 2e       	mov	r10, r25
    3954:	b1 2c       	mov	r11, r1
		LCD_Display_Text(480,(const unsigned char*)Verdana8,0,23);
		LCD_Display_Text(481,(const unsigned char*)Verdana8,0,33);
		LCD_Display_Text(482,(const unsigned char*)Verdana8,0,43);
		LCD_Display_Text(483,(const unsigned char*)Verdana8,0,53);
		
		mugui_lcd_puts(itoa((MonopolarThrottle / 20),pBuffer,10),(const unsigned char*)Verdana8,25,3);
    3956:	24 e1       	ldi	r18, 0x14	; 20
    3958:	62 2e       	mov	r6, r18
    395a:	71 2c       	mov	r7, r1
		// Display the transition number as 1.00 to 2.00
		uint8_t x_loc = 104;		// X location of transition display
		uint8_t y_loc = 53;		// Y location of transition display

		utemp = transition + 100;
		temp = utemp/100;		// Display whole decimal part first
    395c:	34 e6       	ldi	r19, 0x64	; 100
    395e:	83 2e       	mov	r8, r19
    3960:	91 2c       	mov	r9, r1
	
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
	
	// While back button not pressed
	while(BUTTON1 != 0)
    3962:	1f 9b       	sbis	0x03, 7	; 3
    3964:	2e c3       	rjmp	.+1628   	; 0x3fc2 <Display_in_out+0x6b8>
	{
		RxGetChannels();
    3966:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <RxGetChannels>
		ReadGyros();
    396a:	0e 94 39 39 	call	0x7272	; 0x7272 <ReadGyros>
		ReadAcc();
    396e:	0e 94 34 18 	call	0x3068	; 0x3068 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3972:	0e 94 a8 43 	call	0x8750	; 0x8750 <TIM16_ReadTCNT1>

		// Reset Timer0 count
		TCNT0 = 0;
    3976:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    3978:	20 91 2f 05 	lds	r18, 0x052F
    397c:	30 91 30 05 	lds	r19, 0x0530
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    3980:	20 91 2f 05 	lds	r18, 0x052F
    3984:	30 91 30 05 	lds	r19, 0x0530
    3988:	6c 01       	movw	r12, r24
    398a:	c2 1a       	sub	r12, r18
    398c:	d3 0a       	sbc	r13, r19
		}
		
		interval = ticker_16; // uint16_t
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    398e:	90 93 30 05 	sts	0x0530, r25
    3992:	80 93 2f 05 	sts	0x052F, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    3996:	80 91 01 09 	lds	r24, 0x0901
    399a:	90 91 02 09 	lds	r25, 0x0902
    399e:	e1 2c       	mov	r14, r1
    39a0:	f1 2c       	mov	r15, r1
    39a2:	02 97       	sbiw	r24, 0x02	; 2
    39a4:	88 f0       	brcs	.+34     	; 0x39c8 <Display_in_out+0xbe>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    39a6:	80 91 01 09 	lds	r24, 0x0901
    39aa:	90 91 02 09 	lds	r25, 0x0902
    39ae:	a0 e0       	ldi	r26, 0x00	; 0
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	1f e0       	ldi	r17, 0x0F	; 15
    39b4:	88 0f       	add	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	aa 1f       	adc	r26, r26
    39ba:	bb 1f       	adc	r27, r27
    39bc:	1a 95       	dec	r17
    39be:	d1 f7       	brne	.-12     	; 0x39b4 <Display_in_out+0xaa>
    39c0:	c8 0e       	add	r12, r24
    39c2:	d9 1e       	adc	r13, r25
    39c4:	ea 1e       	adc	r14, r26
    39c6:	fb 1e       	adc	r15, r27
		}

		TMR0_counter = 0;
    39c8:	10 92 02 09 	sts	0x0902, r1
    39cc:	10 92 01 09 	sts	0x0901, r1

		// Refresh accSmooth values and AccVert
		imu_update(interval);
    39d0:	c7 01       	movw	r24, r14
    39d2:	b6 01       	movw	r22, r12
    39d4:	0e 94 27 3e 	call	0x7c4e	; 0x7c4e <imu_update>
		Sensor_PID(interval);
    39d8:	c7 01       	movw	r24, r14
    39da:	b6 01       	movw	r22, r12
    39dc:	0e 94 24 63 	call	0xc648	; 0xc648 <Sensor_PID>
		Calculate_PID();		// Calculate PID values
    39e0:	0e 94 95 66 	call	0xcd2a	; 0xcd2a <Calculate_PID>

		UpdateTransition();		// Update the transition variable
    39e4:	0e 94 5e 6a 	call	0xd4bc	; 0xd4bc <UpdateTransition>
		ProcessMixer();			// Do all the mixer tasks
    39e8:	0e 94 18 5b 	call	0xb630	; 0xb630 <ProcessMixer>
		UpdateServos();			// Transfer Config.Channel[i].value data to ServoOut[i]
    39ec:	0e 94 1e 59 	call	0xb23c	; 0xb23c <UpdateServos>
    39f0:	08 ee       	ldi	r16, 0xE8	; 232
    39f2:	16 e0       	ldi	r17, 0x06	; 6
    39f4:	78 01       	movw	r14, r16
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0

		// Re-span numbers from internal values (2500 to 5000) to microseconds
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			temp = ServoOut[i];					// Promote to 16 bits
    39fa:	f9 01       	movw	r30, r18
    39fc:	ee 0f       	add	r30, r30
    39fe:	ff 1f       	adc	r31, r31
    3a00:	df 01       	movw	r26, r30
    3a02:	ab 56       	subi	r26, 0x6B	; 107
    3a04:	b6 4f       	sbci	r27, 0xF6	; 246
    3a06:	8d 91       	ld	r24, X+
    3a08:	9c 91       	ld	r25, X

			// Check for motor marker and ignore if set
			if (Config.Channel[i].Motor_marker != MOTOR)
    3a0a:	d7 01       	movw	r26, r14
    3a0c:	4c 91       	ld	r20, X
    3a0e:	42 30       	cpi	r20, 0x02	; 2
    3a10:	51 f0       	breq	.+20     	; 0x3a26 <Display_in_out+0x11c>
			{
				// Scale servo from 2500~5000 to 875~2125
				temp = ((temp - 3750) >> 1) + SERVO_CENTER; // SERVO_CENTER = 1500
    3a12:	bc 01       	movw	r22, r24
    3a14:	66 5a       	subi	r22, 0xA6	; 166
    3a16:	7e 40       	sbci	r23, 0x0E	; 14
    3a18:	cb 01       	movw	r24, r22
    3a1a:	95 95       	asr	r25
    3a1c:	87 95       	ror	r24
    3a1e:	bc 01       	movw	r22, r24
    3a20:	64 52       	subi	r22, 0x24	; 36
    3a22:	7a 4f       	sbci	r23, 0xFA	; 250
    3a24:	08 c0       	rjmp	.+16     	; 0x3a36 <Display_in_out+0x12c>
			}
			else
			{
				// Scale motor from 2500~5000 to 1000~2000
				temp = ((temp << 2) + 5) / 10; 	// Round and convert
    3a26:	88 0f       	add	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	88 0f       	add	r24, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	05 96       	adiw	r24, 0x05	; 5
    3a30:	b1 01       	movw	r22, r2
    3a32:	0e 94 2c 6f 	call	0xde58	; 0xde58 <__divmodhi4>
			}
		
			ServoOut[i] = (uint16_t)temp;
    3a36:	eb 56       	subi	r30, 0x6B	; 107
    3a38:	f6 4f       	sbci	r31, 0xF6	; 246
    3a3a:	71 83       	std	Z+1, r23	; 0x01
    3a3c:	60 83       	st	Z, r22
    3a3e:	2f 5f       	subi	r18, 0xFF	; 255
    3a40:	3f 4f       	sbci	r19, 0xFF	; 255
    3a42:	b2 e2       	ldi	r27, 0x22	; 34
    3a44:	eb 0e       	add	r14, r27
    3a46:	f1 1c       	adc	r15, r1
		UpdateTransition();		// Update the transition variable
		ProcessMixer();			// Do all the mixer tasks
		UpdateServos();			// Transfer Config.Channel[i].value data to ServoOut[i]

		// Re-span numbers from internal values (2500 to 5000) to microseconds
		for (i = 0; i < MAX_OUTPUTS; i++)
    3a48:	28 30       	cpi	r18, 0x08	; 8
    3a4a:	31 05       	cpc	r19, r1
    3a4c:	b1 f6       	brne	.-84     	; 0x39fa <Display_in_out+0xf0>
    3a4e:	e9 e3       	ldi	r30, 0x39	; 57
    3a50:	f6 e0       	ldi	r31, 0x06	; 6
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
		}

		// Check limits in microsecond units.
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			temp = ServoOut[i];
    3a56:	a9 01       	movw	r20, r18
    3a58:	44 0f       	add	r20, r20
    3a5a:	55 1f       	adc	r21, r21
    3a5c:	da 01       	movw	r26, r20
    3a5e:	ab 56       	subi	r26, 0x6B	; 107
    3a60:	b6 4f       	sbci	r27, 0xF6	; 246
    3a62:	0d 90       	ld	r0, X+
    3a64:	bc 91       	ld	r27, X
    3a66:	a0 2d       	mov	r26, r0
			
			// Enforce min, max travel limits
			if (temp > Config.Limits[i].maximum)
    3a68:	83 85       	ldd	r24, Z+11	; 0x0b
    3a6a:	94 85       	ldd	r25, Z+12	; 0x0c
    3a6c:	8a 17       	cp	r24, r26
    3a6e:	9b 07       	cpc	r25, r27
    3a70:	3c f0       	brlt	.+14     	; 0x3a80 <Display_in_out+0x176>
			{
				temp = Config.Limits[i].maximum;
			}

			else if (temp < Config.Limits[i].minimum)
    3a72:	61 85       	ldd	r22, Z+9	; 0x09
    3a74:	72 85       	ldd	r23, Z+10	; 0x0a
    3a76:	cd 01       	movw	r24, r26
    3a78:	a6 17       	cp	r26, r22
    3a7a:	b7 07       	cpc	r27, r23
    3a7c:	0c f4       	brge	.+2      	; 0x3a80 <Display_in_out+0x176>
    3a7e:	cb 01       	movw	r24, r22
			{
				temp = Config.Limits[i].minimum;
			}
			
			ServoOut[i] = temp;
    3a80:	da 01       	movw	r26, r20
    3a82:	ab 56       	subi	r26, 0x6B	; 107
    3a84:	b6 4f       	sbci	r27, 0xF6	; 246
    3a86:	11 96       	adiw	r26, 0x01	; 1
    3a88:	9c 93       	st	X, r25
    3a8a:	8e 93       	st	-X, r24
    3a8c:	2f 5f       	subi	r18, 0xFF	; 255
    3a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a90:	34 96       	adiw	r30, 0x04	; 4
		
			ServoOut[i] = (uint16_t)temp;
		}

		// Check limits in microsecond units.
		for (i = 0; i < MAX_OUTPUTS; i++)
    3a92:	28 30       	cpi	r18, 0x08	; 8
    3a94:	31 05       	cpc	r19, r1
    3a96:	f9 f6       	brne	.-66     	; 0x3a56 <Display_in_out+0x14c>
		}
		
		// Servos are now in microsecond units.
		
		// Check for motor flags if throttle is below arming minimum
		if (MonopolarThrottle < THROTTLEIDLE) // THROTTLEIDLE = 50
    3a98:	80 91 81 09 	lds	r24, 0x0981
    3a9c:	90 91 82 09 	lds	r25, 0x0982
    3aa0:	c2 97       	sbiw	r24, 0x32	; 50
    3aa2:	2c f0       	brlt	.+10     	; 0x3aae <Display_in_out+0x1a4>
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	71 96       	adiw	r30, 0x11	; 17
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	14 c0       	rjmp	.+40     	; 0x3ad6 <Display_in_out+0x1cc>
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
		{
			// For each output
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Check for motor marker
				if (Config.Channel[i].Motor_marker == MOTOR)
    3ab2:	f8 01       	movw	r30, r16
    3ab4:	20 81       	ld	r18, Z
    3ab6:	22 30       	cpi	r18, 0x02	; 2
    3ab8:	39 f4       	brne	.+14     	; 0x3ac8 <Display_in_out+0x1be>
				{
					// Set output to minimum pulse width (1000us)
					ServoOut[i] = MOTORMIN;
    3aba:	fc 01       	movw	r30, r24
    3abc:	ee 0f       	add	r30, r30
    3abe:	ff 1f       	adc	r31, r31
    3ac0:	eb 56       	subi	r30, 0x6B	; 107
    3ac2:	f6 4f       	sbci	r31, 0xF6	; 246
    3ac4:	51 82       	std	Z+1, r5	; 0x01
    3ac6:	40 82       	st	Z, r4
    3ac8:	01 96       	adiw	r24, 0x01	; 1
    3aca:	0e 5d       	subi	r16, 0xDE	; 222
    3acc:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// Check for motor flags if throttle is below arming minimum
		if (MonopolarThrottle < THROTTLEIDLE) // THROTTLEIDLE = 50
		{
			// For each output
			for (i = 0; i < MAX_OUTPUTS; i++)
    3ace:	88 30       	cpi	r24, 0x08	; 8
    3ad0:	91 05       	cpc	r25, r1
    3ad2:	79 f7       	brne	.-34     	; 0x3ab2 <Display_in_out+0x1a8>
    3ad4:	e7 cf       	rjmp	.-50     	; 0x3aa4 <Display_in_out+0x19a>
		}

		// Convert outputs to percentages (center and divide by 4)
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			Outputs[i] = (int16_t)ServoOut[i];
    3ad6:	d9 01       	movw	r26, r18
    3ad8:	aa 0f       	add	r26, r26
    3ada:	bb 1f       	adc	r27, r27
    3adc:	ab 56       	subi	r26, 0x6B	; 107
    3ade:	b6 4f       	sbci	r27, 0xF6	; 246
    3ae0:	8d 91       	ld	r24, X+
    3ae2:	9c 91       	ld	r25, X
			Outputs[i] = Outputs[i] - SERVO_CENTER;
    3ae4:	ac 01       	movw	r20, r24
    3ae6:	4c 5d       	subi	r20, 0xDC	; 220
    3ae8:	55 40       	sbci	r21, 0x05	; 5
    3aea:	51 83       	std	Z+1, r21	; 0x01
    3aec:	40 83       	st	Z, r20
			
			// Round correctly in both directions
			if (Outputs[i] >= 0)
    3aee:	57 fd       	sbrc	r21, 7
    3af0:	03 c0       	rjmp	.+6      	; 0x3af8 <Display_in_out+0x1ee>
			{
				Outputs[i] = (Outputs[i] + 2) / 5; // Convert to percentages +/-500 = +/-100%
    3af2:	8a 5d       	subi	r24, 0xDA	; 218
    3af4:	95 40       	sbci	r25, 0x05	; 5
    3af6:	02 c0       	rjmp	.+4      	; 0x3afc <Display_in_out+0x1f2>
			}
			else
			{
				Outputs[i] = (Outputs[i] - 2) / 5; 
    3af8:	8e 5d       	subi	r24, 0xDE	; 222
    3afa:	95 40       	sbci	r25, 0x05	; 5
    3afc:	b5 01       	movw	r22, r10
    3afe:	0e 94 2c 6f 	call	0xde58	; 0xde58 <__divmodhi4>
    3b02:	71 83       	std	Z+1, r23	; 0x01
    3b04:	60 83       	st	Z, r22
    3b06:	2f 5f       	subi	r18, 0xFF	; 255
    3b08:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0a:	32 96       	adiw	r30, 0x02	; 2
				}
			}
		}

		// Convert outputs to percentages (center and divide by 4)
		for (i = 0; i < MAX_OUTPUTS; i++)
    3b0c:	28 30       	cpi	r18, 0x08	; 8
    3b0e:	31 05       	cpc	r19, r1
    3b10:	11 f7       	brne	.-60     	; 0x3ad6 <Display_in_out+0x1cc>
    3b12:	ae 01       	movw	r20, r28
    3b14:	4f 5f       	subi	r20, 0xFF	; 255
    3b16:	5f 4f       	sbci	r21, 0xFF	; 255
    3b18:	7a 01       	movw	r14, r20
    3b1a:	00 e0       	ldi	r16, 0x00	; 0
    3b1c:	10 e0       	ldi	r17, 0x00	; 0
		}

		// Convert inputs to percentages (center and divide by 10)
		for (i = 0; i < MAX_RC_CHANNELS; i++)
		{
			tempf1 = (float)RCinputs[i];
    3b1e:	f8 01       	movw	r30, r16
    3b20:	ee 0f       	add	r30, r30
    3b22:	ff 1f       	adc	r31, r31
    3b24:	ed 57       	subi	r30, 0x7D	; 125
    3b26:	f6 4f       	sbci	r31, 0xF6	; 246
    3b28:	60 81       	ld	r22, Z
    3b2a:	71 81       	ldd	r23, Z+1	; 0x01
    3b2c:	07 2e       	mov	r0, r23
    3b2e:	00 0c       	add	r0, r0
    3b30:	88 0b       	sbc	r24, r24
    3b32:	99 0b       	sbc	r25, r25
    3b34:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
			Inputs[i] = (int16_t)(tempf1 / 10.0f);
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	40 e2       	ldi	r20, 0x20	; 32
    3b3e:	51 e4       	ldi	r21, 0x41	; 65
    3b40:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    3b44:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    3b48:	d7 01       	movw	r26, r14
    3b4a:	6d 93       	st	X+, r22
    3b4c:	7d 93       	st	X+, r23
    3b4e:	7d 01       	movw	r14, r26
    3b50:	0f 5f       	subi	r16, 0xFF	; 255
    3b52:	1f 4f       	sbci	r17, 0xFF	; 255
				Outputs[i] = (Outputs[i] - 2) / 5; 
			}
		}

		// Convert inputs to percentages (center and divide by 10)
		for (i = 0; i < MAX_RC_CHANNELS; i++)
    3b54:	08 30       	cpi	r16, 0x08	; 8
    3b56:	11 05       	cpc	r17, r1
    3b58:	11 f7       	brne	.-60     	; 0x3b1e <Display_in_out+0x214>
			tempf1 = (float)RCinputs[i];
			Inputs[i] = (int16_t)(tempf1 / 10.0f);
		}

		// Column 1
		LCD_Display_Text(478,(const unsigned char*)Verdana8,0,3);
    3b5a:	23 e0       	ldi	r18, 0x03	; 3
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	40 e0       	ldi	r20, 0x00	; 0
    3b60:	50 e0       	ldi	r21, 0x00	; 0
    3b62:	6d e8       	ldi	r22, 0x8D	; 141
    3b64:	7f e0       	ldi	r23, 0x0F	; 15
    3b66:	8e ed       	ldi	r24, 0xDE	; 222
    3b68:	91 e0       	ldi	r25, 0x01	; 1
    3b6a:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(479,(const unsigned char*)Verdana8,0,13);
    3b6e:	2d e0       	ldi	r18, 0x0D	; 13
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e0       	ldi	r20, 0x00	; 0
    3b74:	50 e0       	ldi	r21, 0x00	; 0
    3b76:	6d e8       	ldi	r22, 0x8D	; 141
    3b78:	7f e0       	ldi	r23, 0x0F	; 15
    3b7a:	8f ed       	ldi	r24, 0xDF	; 223
    3b7c:	91 e0       	ldi	r25, 0x01	; 1
    3b7e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(480,(const unsigned char*)Verdana8,0,23);
    3b82:	27 e1       	ldi	r18, 0x17	; 23
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	40 e0       	ldi	r20, 0x00	; 0
    3b88:	50 e0       	ldi	r21, 0x00	; 0
    3b8a:	6d e8       	ldi	r22, 0x8D	; 141
    3b8c:	7f e0       	ldi	r23, 0x0F	; 15
    3b8e:	80 ee       	ldi	r24, 0xE0	; 224
    3b90:	91 e0       	ldi	r25, 0x01	; 1
    3b92:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(481,(const unsigned char*)Verdana8,0,33);
    3b96:	21 e2       	ldi	r18, 0x21	; 33
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	40 e0       	ldi	r20, 0x00	; 0
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	6d e8       	ldi	r22, 0x8D	; 141
    3ba0:	7f e0       	ldi	r23, 0x0F	; 15
    3ba2:	81 ee       	ldi	r24, 0xE1	; 225
    3ba4:	91 e0       	ldi	r25, 0x01	; 1
    3ba6:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(482,(const unsigned char*)Verdana8,0,43);
    3baa:	2b e2       	ldi	r18, 0x2B	; 43
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	40 e0       	ldi	r20, 0x00	; 0
    3bb0:	50 e0       	ldi	r21, 0x00	; 0
    3bb2:	6d e8       	ldi	r22, 0x8D	; 141
    3bb4:	7f e0       	ldi	r23, 0x0F	; 15
    3bb6:	82 ee       	ldi	r24, 0xE2	; 226
    3bb8:	91 e0       	ldi	r25, 0x01	; 1
    3bba:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(483,(const unsigned char*)Verdana8,0,53);
    3bbe:	25 e3       	ldi	r18, 0x35	; 53
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	50 e0       	ldi	r21, 0x00	; 0
    3bc6:	6d e8       	ldi	r22, 0x8D	; 141
    3bc8:	7f e0       	ldi	r23, 0x0F	; 15
    3bca:	83 ee       	ldi	r24, 0xE3	; 227
    3bcc:	91 e0       	ldi	r25, 0x01	; 1
    3bce:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		
		mugui_lcd_puts(itoa((MonopolarThrottle / 20),pBuffer,10),(const unsigned char*)Verdana8,25,3);
    3bd2:	80 91 81 09 	lds	r24, 0x0981
    3bd6:	90 91 82 09 	lds	r25, 0x0982
    3bda:	b3 01       	movw	r22, r6
    3bdc:	0e 94 2c 6f 	call	0xde58	; 0xde58 <__divmodhi4>
    3be0:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3be2:	4a e0       	ldi	r20, 0x0A	; 10
    3be4:	62 ec       	ldi	r22, 0xC2	; 194
    3be6:	75 e0       	ldi	r23, 0x05	; 5
    3be8:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    3bec:	23 e0       	ldi	r18, 0x03	; 3
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	49 e1       	ldi	r20, 0x19	; 25
    3bf2:	50 e0       	ldi	r21, 0x00	; 0
    3bf4:	6d e8       	ldi	r22, 0x8D	; 141
    3bf6:	7f e0       	ldi	r23, 0x0F	; 15
    3bf8:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3bfc:	4a e0       	ldi	r20, 0x0A	; 10
    3bfe:	62 ec       	ldi	r22, 0xC2	; 194
    3c00:	75 e0       	ldi	r23, 0x05	; 5
    3c02:	8b 81       	ldd	r24, Y+3	; 0x03
    3c04:	9c 81       	ldd	r25, Y+4	; 0x04
    3c06:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,25,13);
    3c0a:	2d e0       	ldi	r18, 0x0D	; 13
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	49 e1       	ldi	r20, 0x19	; 25
    3c10:	50 e0       	ldi	r21, 0x00	; 0
    3c12:	6d e8       	ldi	r22, 0x8D	; 141
    3c14:	7f e0       	ldi	r23, 0x0F	; 15
    3c16:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3c1a:	4a e0       	ldi	r20, 0x0A	; 10
    3c1c:	62 ec       	ldi	r22, 0xC2	; 194
    3c1e:	75 e0       	ldi	r23, 0x05	; 5
    3c20:	8d 81       	ldd	r24, Y+5	; 0x05
    3c22:	9e 81       	ldd	r25, Y+6	; 0x06
    3c24:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,25,23);
    3c28:	27 e1       	ldi	r18, 0x17	; 23
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	49 e1       	ldi	r20, 0x19	; 25
    3c2e:	50 e0       	ldi	r21, 0x00	; 0
    3c30:	6d e8       	ldi	r22, 0x8D	; 141
    3c32:	7f e0       	ldi	r23, 0x0F	; 15
    3c34:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3c38:	4a e0       	ldi	r20, 0x0A	; 10
    3c3a:	62 ec       	ldi	r22, 0xC2	; 194
    3c3c:	75 e0       	ldi	r23, 0x05	; 5
    3c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c40:	98 85       	ldd	r25, Y+8	; 0x08
    3c42:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,25,33);
    3c46:	21 e2       	ldi	r18, 0x21	; 33
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	49 e1       	ldi	r20, 0x19	; 25
    3c4c:	50 e0       	ldi	r21, 0x00	; 0
    3c4e:	6d e8       	ldi	r22, 0x8D	; 141
    3c50:	7f e0       	ldi	r23, 0x0F	; 15
    3c52:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3c56:	4a e0       	ldi	r20, 0x0A	; 10
    3c58:	62 ec       	ldi	r22, 0xC2	; 194
    3c5a:	75 e0       	ldi	r23, 0x05	; 5
    3c5c:	89 85       	ldd	r24, Y+9	; 0x09
    3c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c60:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,25,43);
    3c64:	2b e2       	ldi	r18, 0x2B	; 43
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	49 e1       	ldi	r20, 0x19	; 25
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	6d e8       	ldi	r22, 0x8D	; 141
    3c6e:	7f e0       	ldi	r23, 0x0F	; 15
    3c70:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3c74:	4a e0       	ldi	r20, 0x0A	; 10
    3c76:	62 ec       	ldi	r22, 0xC2	; 194
    3c78:	75 e0       	ldi	r23, 0x05	; 5
    3c7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c7e:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,25,53);
    3c82:	25 e3       	ldi	r18, 0x35	; 53
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	49 e1       	ldi	r20, 0x19	; 25
    3c88:	50 e0       	ldi	r21, 0x00	; 0
    3c8a:	6d e8       	ldi	r22, 0x8D	; 141
    3c8c:	7f e0       	ldi	r23, 0x0F	; 15
    3c8e:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		
		// Column 2
		LCD_Display_Text(484,(const unsigned char*)Verdana8,48,3);
    3c92:	23 e0       	ldi	r18, 0x03	; 3
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	40 e3       	ldi	r20, 0x30	; 48
    3c98:	50 e0       	ldi	r21, 0x00	; 0
    3c9a:	6d e8       	ldi	r22, 0x8D	; 141
    3c9c:	7f e0       	ldi	r23, 0x0F	; 15
    3c9e:	84 ee       	ldi	r24, 0xE4	; 228
    3ca0:	91 e0       	ldi	r25, 0x01	; 1
    3ca2:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(485,(const unsigned char*)Verdana8,48,13);
    3ca6:	2d e0       	ldi	r18, 0x0D	; 13
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	40 e3       	ldi	r20, 0x30	; 48
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	6d e8       	ldi	r22, 0x8D	; 141
    3cb0:	7f e0       	ldi	r23, 0x0F	; 15
    3cb2:	85 ee       	ldi	r24, 0xE5	; 229
    3cb4:	91 e0       	ldi	r25, 0x01	; 1
    3cb6:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(477,(const unsigned char*)Verdana8,48,23); // OUT
    3cba:	27 e1       	ldi	r18, 0x17	; 23
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	40 e3       	ldi	r20, 0x30	; 48
    3cc0:	50 e0       	ldi	r21, 0x00	; 0
    3cc2:	6d e8       	ldi	r22, 0x8D	; 141
    3cc4:	7f e0       	ldi	r23, 0x0F	; 15
    3cc6:	8d ed       	ldi	r24, 0xDD	; 221
    3cc8:	91 e0       	ldi	r25, 0x01	; 1
    3cca:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(468,(const unsigned char*)Verdana8,48,33);
    3cce:	21 e2       	ldi	r18, 0x21	; 33
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	40 e3       	ldi	r20, 0x30	; 48
    3cd4:	50 e0       	ldi	r21, 0x00	; 0
    3cd6:	6d e8       	ldi	r22, 0x8D	; 141
    3cd8:	7f e0       	ldi	r23, 0x0F	; 15
    3cda:	84 ed       	ldi	r24, 0xD4	; 212
    3cdc:	91 e0       	ldi	r25, 0x01	; 1
    3cde:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(469,(const unsigned char*)Verdana8,48,43);
    3ce2:	2b e2       	ldi	r18, 0x2B	; 43
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	40 e3       	ldi	r20, 0x30	; 48
    3ce8:	50 e0       	ldi	r21, 0x00	; 0
    3cea:	6d e8       	ldi	r22, 0x8D	; 141
    3cec:	7f e0       	ldi	r23, 0x0F	; 15
    3cee:	85 ed       	ldi	r24, 0xD5	; 213
    3cf0:	91 e0       	ldi	r25, 0x01	; 1
    3cf2:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(470,(const unsigned char*)Verdana8,48,53);		
    3cf6:	25 e3       	ldi	r18, 0x35	; 53
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	40 e3       	ldi	r20, 0x30	; 48
    3cfc:	50 e0       	ldi	r21, 0x00	; 0
    3cfe:	6d e8       	ldi	r22, 0x8D	; 141
    3d00:	7f e0       	ldi	r23, 0x0F	; 15
    3d02:	86 ed       	ldi	r24, 0xD6	; 214
    3d04:	91 e0       	ldi	r25, 0x01	; 1
    3d06:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
    3d0a:	4a e0       	ldi	r20, 0x0A	; 10
    3d0c:	62 ec       	ldi	r22, 0xC2	; 194
    3d0e:	75 e0       	ldi	r23, 0x05	; 5
    3d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d14:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,71,3);
    3d18:	23 e0       	ldi	r18, 0x03	; 3
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	47 e4       	ldi	r20, 0x47	; 71
    3d1e:	50 e0       	ldi	r21, 0x00	; 0
    3d20:	6d e8       	ldi	r22, 0x8D	; 141
    3d22:	7f e0       	ldi	r23, 0x0F	; 15
    3d24:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3d28:	4a e0       	ldi	r20, 0x0A	; 10
    3d2a:	62 ec       	ldi	r22, 0xC2	; 194
    3d2c:	75 e0       	ldi	r23, 0x05	; 5
    3d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d30:	98 89       	ldd	r25, Y+16	; 0x10
    3d32:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,71,13);
    3d36:	2d e0       	ldi	r18, 0x0D	; 13
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	47 e4       	ldi	r20, 0x47	; 71
    3d3c:	50 e0       	ldi	r21, 0x00	; 0
    3d3e:	6d e8       	ldi	r22, 0x8D	; 141
    3d40:	7f e0       	ldi	r23, 0x0F	; 15
    3d42:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3d46:	4a e0       	ldi	r20, 0x0A	; 10
    3d48:	62 ec       	ldi	r22, 0xC2	; 194
    3d4a:	75 e0       	ldi	r23, 0x05	; 5
    3d4c:	89 89       	ldd	r24, Y+17	; 0x11
    3d4e:	9a 89       	ldd	r25, Y+18	; 0x12
    3d50:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[0],pBuffer,10),(const unsigned char*)Verdana8,57,33);
    3d54:	21 e2       	ldi	r18, 0x21	; 33
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	49 e3       	ldi	r20, 0x39	; 57
    3d5a:	50 e0       	ldi	r21, 0x00	; 0
    3d5c:	6d e8       	ldi	r22, 0x8D	; 141
    3d5e:	7f e0       	ldi	r23, 0x0F	; 15
    3d60:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3d64:	4a e0       	ldi	r20, 0x0A	; 10
    3d66:	62 ec       	ldi	r22, 0xC2	; 194
    3d68:	75 e0       	ldi	r23, 0x05	; 5
    3d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d6e:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[1],pBuffer,10),(const unsigned char*)Verdana8,57,43);
    3d72:	2b e2       	ldi	r18, 0x2B	; 43
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	49 e3       	ldi	r20, 0x39	; 57
    3d78:	50 e0       	ldi	r21, 0x00	; 0
    3d7a:	6d e8       	ldi	r22, 0x8D	; 141
    3d7c:	7f e0       	ldi	r23, 0x0F	; 15
    3d7e:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3d82:	4a e0       	ldi	r20, 0x0A	; 10
    3d84:	62 ec       	ldi	r22, 0xC2	; 194
    3d86:	75 e0       	ldi	r23, 0x05	; 5
    3d88:	8d 89       	ldd	r24, Y+21	; 0x15
    3d8a:	9e 89       	ldd	r25, Y+22	; 0x16
    3d8c:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[2],pBuffer,10),(const unsigned char*)Verdana8,57,53);
    3d90:	25 e3       	ldi	r18, 0x35	; 53
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	49 e3       	ldi	r20, 0x39	; 57
    3d96:	50 e0       	ldi	r21, 0x00	; 0
    3d98:	6d e8       	ldi	r22, 0x8D	; 141
    3d9a:	7f e0       	ldi	r23, 0x0F	; 15
    3d9c:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		
		// Column 3
		LCD_Display_Text(471,(const unsigned char*)Verdana8,94,3);
    3da0:	23 e0       	ldi	r18, 0x03	; 3
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	4e e5       	ldi	r20, 0x5E	; 94
    3da6:	50 e0       	ldi	r21, 0x00	; 0
    3da8:	6d e8       	ldi	r22, 0x8D	; 141
    3daa:	7f e0       	ldi	r23, 0x0F	; 15
    3dac:	87 ed       	ldi	r24, 0xD7	; 215
    3dae:	91 e0       	ldi	r25, 0x01	; 1
    3db0:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(472,(const unsigned char*)Verdana8,94,13);
    3db4:	2d e0       	ldi	r18, 0x0D	; 13
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	4e e5       	ldi	r20, 0x5E	; 94
    3dba:	50 e0       	ldi	r21, 0x00	; 0
    3dbc:	6d e8       	ldi	r22, 0x8D	; 141
    3dbe:	7f e0       	ldi	r23, 0x0F	; 15
    3dc0:	88 ed       	ldi	r24, 0xD8	; 216
    3dc2:	91 e0       	ldi	r25, 0x01	; 1
    3dc4:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(473,(const unsigned char*)Verdana8,94,23);
    3dc8:	27 e1       	ldi	r18, 0x17	; 23
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	4e e5       	ldi	r20, 0x5E	; 94
    3dce:	50 e0       	ldi	r21, 0x00	; 0
    3dd0:	6d e8       	ldi	r22, 0x8D	; 141
    3dd2:	7f e0       	ldi	r23, 0x0F	; 15
    3dd4:	89 ed       	ldi	r24, 0xD9	; 217
    3dd6:	91 e0       	ldi	r25, 0x01	; 1
    3dd8:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(474,(const unsigned char*)Verdana8,94,33);
    3ddc:	21 e2       	ldi	r18, 0x21	; 33
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	4e e5       	ldi	r20, 0x5E	; 94
    3de2:	50 e0       	ldi	r21, 0x00	; 0
    3de4:	6d e8       	ldi	r22, 0x8D	; 141
    3de6:	7f e0       	ldi	r23, 0x0F	; 15
    3de8:	8a ed       	ldi	r24, 0xDA	; 218
    3dea:	91 e0       	ldi	r25, 0x01	; 1
    3dec:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(475,(const unsigned char*)Verdana8,94,43);
    3df0:	2b e2       	ldi	r18, 0x2B	; 43
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	4e e5       	ldi	r20, 0x5E	; 94
    3df6:	50 e0       	ldi	r21, 0x00	; 0
    3df8:	6d e8       	ldi	r22, 0x8D	; 141
    3dfa:	7f e0       	ldi	r23, 0x0F	; 15
    3dfc:	8b ed       	ldi	r24, 0xDB	; 219
    3dfe:	91 e0       	ldi	r25, 0x01	; 1
    3e00:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(476,(const unsigned char*)Verdana8,88,53); // Pn.
    3e04:	25 e3       	ldi	r18, 0x35	; 53
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	48 e5       	ldi	r20, 0x58	; 88
    3e0a:	50 e0       	ldi	r21, 0x00	; 0
    3e0c:	6d e8       	ldi	r22, 0x8D	; 141
    3e0e:	7f e0       	ldi	r23, 0x0F	; 15
    3e10:	8c ed       	ldi	r24, 0xDC	; 220
    3e12:	91 e0       	ldi	r25, 0x01	; 1
    3e14:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
    3e18:	4a e0       	ldi	r20, 0x0A	; 10
    3e1a:	62 ec       	ldi	r22, 0xC2	; 194
    3e1c:	75 e0       	ldi	r23, 0x05	; 5
    3e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3e20:	98 8d       	ldd	r25, Y+24	; 0x18
    3e22:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>


		mugui_lcd_puts(itoa(Outputs[3],pBuffer,10),(const unsigned char*)Verdana8,104,3);
    3e26:	23 e0       	ldi	r18, 0x03	; 3
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	48 e6       	ldi	r20, 0x68	; 104
    3e2c:	50 e0       	ldi	r21, 0x00	; 0
    3e2e:	6d e8       	ldi	r22, 0x8D	; 141
    3e30:	7f e0       	ldi	r23, 0x0F	; 15
    3e32:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3e36:	4a e0       	ldi	r20, 0x0A	; 10
    3e38:	62 ec       	ldi	r22, 0xC2	; 194
    3e3a:	75 e0       	ldi	r23, 0x05	; 5
    3e3c:	89 8d       	ldd	r24, Y+25	; 0x19
    3e3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e40:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[4],pBuffer,10),(const unsigned char*)Verdana8,104,13);
    3e44:	2d e0       	ldi	r18, 0x0D	; 13
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	48 e6       	ldi	r20, 0x68	; 104
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	6d e8       	ldi	r22, 0x8D	; 141
    3e4e:	7f e0       	ldi	r23, 0x0F	; 15
    3e50:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3e54:	4a e0       	ldi	r20, 0x0A	; 10
    3e56:	62 ec       	ldi	r22, 0xC2	; 194
    3e58:	75 e0       	ldi	r23, 0x05	; 5
    3e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e5e:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[5],pBuffer,10),(const unsigned char*)Verdana8,104,23);
    3e62:	27 e1       	ldi	r18, 0x17	; 23
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	48 e6       	ldi	r20, 0x68	; 104
    3e68:	50 e0       	ldi	r21, 0x00	; 0
    3e6a:	6d e8       	ldi	r22, 0x8D	; 141
    3e6c:	7f e0       	ldi	r23, 0x0F	; 15
    3e6e:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3e72:	4a e0       	ldi	r20, 0x0A	; 10
    3e74:	62 ec       	ldi	r22, 0xC2	; 194
    3e76:	75 e0       	ldi	r23, 0x05	; 5
    3e78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e7c:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[6],pBuffer,10),(const unsigned char*)Verdana8,104,33);
    3e80:	21 e2       	ldi	r18, 0x21	; 33
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	48 e6       	ldi	r20, 0x68	; 104
    3e86:	50 e0       	ldi	r21, 0x00	; 0
    3e88:	6d e8       	ldi	r22, 0x8D	; 141
    3e8a:	7f e0       	ldi	r23, 0x0F	; 15
    3e8c:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    3e90:	4a e0       	ldi	r20, 0x0A	; 10
    3e92:	62 ec       	ldi	r22, 0xC2	; 194
    3e94:	75 e0       	ldi	r23, 0x05	; 5
    3e96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e98:	98 a1       	ldd	r25, Y+32	; 0x20
    3e9a:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[7],pBuffer,10),(const unsigned char*)Verdana8,104,43);
    3e9e:	2b e2       	ldi	r18, 0x2B	; 43
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	48 e6       	ldi	r20, 0x68	; 104
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	6d e8       	ldi	r22, 0x8D	; 141
    3ea8:	7f e0       	ldi	r23, 0x0F	; 15
    3eaa:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>

		// Display the transition number as 1.00 to 2.00
		uint8_t x_loc = 104;		// X location of transition display
		uint8_t y_loc = 53;		// Y location of transition display

		utemp = transition + 100;
    3eae:	c0 90 38 05 	lds	r12, 0x0538
    3eb2:	d0 90 39 05 	lds	r13, 0x0539
    3eb6:	86 01       	movw	r16, r12
    3eb8:	0c 59       	subi	r16, 0x9C	; 156
    3eba:	1f 4f       	sbci	r17, 0xFF	; 255
		temp = utemp/100;		// Display whole decimal part first
    3ebc:	c8 01       	movw	r24, r16
    3ebe:	b4 01       	movw	r22, r8
    3ec0:	0e 94 18 6f 	call	0xde30	; 0xde30 <__udivmodhi4>
    3ec4:	7b 01       	movw	r14, r22
    3ec6:	4a e0       	ldi	r20, 0x0A	; 10
    3ec8:	62 ec       	ldi	r22, 0xC2	; 194
    3eca:	75 e0       	ldi	r23, 0x05	; 5
    3ecc:	c7 01       	movw	r24, r14
    3ece:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    3ed2:	ae 01       	movw	r20, r28
    3ed4:	4f 5d       	subi	r20, 0xDF	; 223
    3ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed8:	6d e8       	ldi	r22, 0x8D	; 141
    3eda:	7f e0       	ldi	r23, 0x0F	; 15
    3edc:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
    3ee0:	4a e0       	ldi	r20, 0x0A	; 10
    3ee2:	62 ec       	ldi	r22, 0xC2	; 194
    3ee4:	75 e0       	ldi	r23, 0x05	; 5
    3ee6:	c7 01       	movw	r24, r14
    3ee8:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    3eec:	25 e3       	ldi	r18, 0x35	; 53
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	48 e6       	ldi	r20, 0x68	; 104
    3ef2:	50 e0       	ldi	r21, 0x00	; 0
    3ef4:	6d e8       	ldi	r22, 0x8D	; 141
    3ef6:	7f e0       	ldi	r23, 0x0F	; 15
    3ef8:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		pos1 = size.x;

		utemp = utemp - (temp * 100); // Now display the parts to the right of the decimal point
    3efc:	2c e9       	ldi	r18, 0x9C	; 156
    3efe:	a7 01       	movw	r20, r14
    3f00:	24 03       	mulsu	r18, r20
    3f02:	60 01       	movw	r12, r0
    3f04:	25 9f       	mul	r18, r21
    3f06:	d0 0c       	add	r13, r0
    3f08:	11 24       	eor	r1, r1
    3f0a:	c0 0e       	add	r12, r16
    3f0c:	d1 1e       	adc	r13, r17

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    3f0e:	09 a1       	ldd	r16, Y+33	; 0x21
    3f10:	00 2e       	mov	r0, r16
    3f12:	00 0c       	add	r0, r0
    3f14:	11 0b       	sbc	r17, r17
    3f16:	08 59       	subi	r16, 0x98	; 152
    3f18:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1a:	25 e3       	ldi	r18, 0x35	; 53
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	a8 01       	movw	r20, r16
    3f20:	6d e8       	ldi	r22, 0x8D	; 141
    3f22:	7f e0       	ldi	r23, 0x0F	; 15
    3f24:	8c e0       	ldi	r24, 0x0C	; 12
    3f26:	91 e0       	ldi	r25, 0x01	; 1
    3f28:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    3f2c:	ae 01       	movw	r20, r28
    3f2e:	4f 5d       	subi	r20, 0xDF	; 223
    3f30:	5f 4f       	sbci	r21, 0xFF	; 255
    3f32:	6d e8       	ldi	r22, 0x8D	; 141
    3f34:	7f e0       	ldi	r23, 0x0F	; 15
    3f36:	8b e0       	ldi	r24, 0x0B	; 11
    3f38:	95 e0       	ldi	r25, 0x05	; 5
    3f3a:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
		pos3 = size.x;
    3f3e:	e9 a0       	ldd	r14, Y+33	; 0x21
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    3f40:	ae 01       	movw	r20, r28
    3f42:	4f 5d       	subi	r20, 0xDF	; 223
    3f44:	5f 4f       	sbci	r21, 0xFF	; 255
    3f46:	6d e8       	ldi	r22, 0x8D	; 141
    3f48:	7f e0       	ldi	r23, 0x0F	; 15
    3f4a:	8d e0       	ldi	r24, 0x0D	; 13
    3f4c:	95 e0       	ldi	r25, 0x05	; 5
    3f4e:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
		pos2 = size.x;
    3f52:	59 a1       	ldd	r21, Y+33	; 0x21
    3f54:	5d a3       	std	Y+37, r21	; 0x25
    3f56:	0e 2c       	mov	r0, r14
    3f58:	00 0c       	add	r0, r0
    3f5a:	ff 08       	sbc	r15, r15

		if (utemp >= 10)
    3f5c:	8a e0       	ldi	r24, 0x0A	; 10
    3f5e:	c8 16       	cp	r12, r24
    3f60:	d1 04       	cpc	r13, r1
    3f62:	38 f0       	brcs	.+14     	; 0x3f72 <Display_in_out+0x668>
    3f64:	4a e0       	ldi	r20, 0x0A	; 10
    3f66:	62 ec       	ldi	r22, 0xC2	; 194
    3f68:	75 e0       	ldi	r23, 0x05	; 5
    3f6a:	c6 01       	movw	r24, r12
    3f6c:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    3f70:	16 c0       	rjmp	.+44     	; 0x3f9e <Display_in_out+0x694>
		{
			mugui_lcd_puts(itoa(utemp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    3f72:	a8 01       	movw	r20, r16
    3f74:	4e 0d       	add	r20, r14
    3f76:	5f 1d       	adc	r21, r15
    3f78:	25 e3       	ldi	r18, 0x35	; 53
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	6d e8       	ldi	r22, 0x8D	; 141
    3f7e:	7f e0       	ldi	r23, 0x0F	; 15
    3f80:	8d e0       	ldi	r24, 0x0D	; 13
    3f82:	91 e0       	ldi	r25, 0x01	; 1
    3f84:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
    3f88:	4a e0       	ldi	r20, 0x0A	; 10
    3f8a:	62 ec       	ldi	r22, 0xC2	; 194
    3f8c:	75 e0       	ldi	r23, 0x05	; 5
    3f8e:	c6 01       	movw	r24, r12
    3f90:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
			mugui_lcd_puts(itoa(utemp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    3f94:	ad a1       	ldd	r26, Y+37	; 0x25
    3f96:	0a 0f       	add	r16, r26
    3f98:	11 1d       	adc	r17, r1
    3f9a:	a7 fd       	sbrc	r26, 7
    3f9c:	1a 95       	dec	r17
    3f9e:	a8 01       	movw	r20, r16
    3fa0:	4e 0d       	add	r20, r14
    3fa2:	5f 1d       	adc	r21, r15
    3fa4:	25 e3       	ldi	r18, 0x35	; 53
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	6d e8       	ldi	r22, 0x8D	; 141
    3faa:	7f e0       	ldi	r23, 0x0F	; 15
    3fac:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		}

		// mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,104,53);		

		// Update buffer
		write_buffer(buffer);
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
    3fb2:	91 e0       	ldi	r25, 0x01	; 1
    3fb4:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
		clear_buffer(buffer);
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	91 e0       	ldi	r25, 0x01	; 1
    3fbc:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
    3fc0:	d0 cc       	rjmp	.-1632   	; 0x3962 <Display_in_out+0x58>
	}
}
    3fc2:	a5 96       	adiw	r28, 0x25	; 37
    3fc4:	0f b6       	in	r0, 0x3f	; 63
    3fc6:	f8 94       	cli
    3fc8:	de bf       	out	0x3e, r29	; 62
    3fca:	0f be       	out	0x3f, r0	; 63
    3fcc:	cd bf       	out	0x3d, r28	; 61
    3fce:	df 91       	pop	r29
    3fd0:	cf 91       	pop	r28
    3fd2:	1f 91       	pop	r17
    3fd4:	0f 91       	pop	r16
    3fd6:	ff 90       	pop	r15
    3fd8:	ef 90       	pop	r14
    3fda:	df 90       	pop	r13
    3fdc:	cf 90       	pop	r12
    3fde:	bf 90       	pop	r11
    3fe0:	af 90       	pop	r10
    3fe2:	9f 90       	pop	r9
    3fe4:	8f 90       	pop	r8
    3fe6:	7f 90       	pop	r7
    3fe8:	6f 90       	pop	r6
    3fea:	5f 90       	pop	r5
    3fec:	4f 90       	pop	r4
    3fee:	3f 90       	pop	r3
    3ff0:	2f 90       	pop	r2
    3ff2:	08 95       	ret

00003ff4 <menu_log>:
	// Save log and log pointer
	Save_Config_to_EEPROM();
}

void menu_log(void)
{
    3ff4:	cf 92       	push	r12
    3ff6:	df 92       	push	r13
    3ff8:	ef 92       	push	r14
    3ffa:	ff 92       	push	r15
    3ffc:	0f 93       	push	r16
    3ffe:	1f 93       	push	r17
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
	int8_t	log_start = 0;
    4004:	c0 e0       	ldi	r28, 0x00	; 0
	while(BUTTON1 != 0)
	{
		if (BUTTON4 == 0)
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    4006:	8d e3       	ldi	r24, 0x3D	; 61
    4008:	c8 2e       	mov	r12, r24
    400a:	88 e0       	ldi	r24, 0x08	; 8
    400c:	d8 2e       	mov	r13, r24
    400e:	d4 e1       	ldi	r29, 0x14	; 20

void menu_log(void)
{
	int8_t	log_start = 0;
	
	while(BUTTON1 != 0)
    4010:	1f 9b       	sbis	0x03, 7	; 3
    4012:	45 c0       	rjmp	.+138    	; 0x409e <menu_log+0xaa>
	{
		if (BUTTON4 == 0)
    4014:	1c 99       	sbic	0x03, 4	; 3
    4016:	09 c0       	rjmp	.+18     	; 0x402a <menu_log+0x36>
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    4018:	f6 01       	movw	r30, r12
    401a:	2d 2f       	mov	r18, r29
    401c:	11 92       	st	Z+, r1
    401e:	2a 95       	dec	r18
    4020:	e9 f7       	brne	.-6      	; 0x401c <menu_log+0x28>
			Config.log_pointer = 0;
    4022:	10 92 3c 08 	sts	0x083C, r1

			// Save log and log pointer
			Save_Config_to_EEPROM();			
    4026:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
		}
		
		if (BUTTON2 == 0)
    402a:	1e 99       	sbic	0x03, 6	; 3
    402c:	03 c0       	rjmp	.+6      	; 0x4034 <menu_log+0x40>
		{
			log_start--;
    402e:	c1 50       	subi	r28, 0x01	; 1
    4030:	c7 fd       	sbrc	r28, 7
    4032:	c0 e0       	ldi	r28, 0x00	; 0
			{
				log_start = 0;
			}
		}

		if (BUTTON3 == 0)
    4034:	1d 99       	sbic	0x03, 5	; 3
    4036:	04 c0       	rjmp	.+8      	; 0x4040 <menu_log+0x4c>
		{
			log_start++;
    4038:	cf 5f       	subi	r28, 0xFF	; 255
			
			if (log_start >= (LOGLENGTH - 5))
    403a:	cf 30       	cpi	r28, 0x0F	; 15
    403c:	0c f0       	brlt	.+2      	; 0x4040 <menu_log+0x4c>
			{
				log_start = 15;
    403e:	cf e0       	ldi	r28, 0x0F	; 15
    4040:	8c 2f       	mov	r24, r28
    4042:	0c 2e       	mov	r0, r28
    4044:	00 0c       	add	r0, r0
    4046:	99 0b       	sbc	r25, r25
    4048:	fc 01       	movw	r30, r24
    404a:	e3 5c       	subi	r30, 0xC3	; 195
    404c:	f7 4f       	sbci	r31, 0xF7	; 247
    404e:	7f 01       	movw	r14, r30
    4050:	00 e0       	ldi	r16, 0x00	; 0
    4052:	10 e0       	ldi	r17, 0x00	; 0
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
    4054:	f7 01       	movw	r30, r14
    4056:	81 91       	ld	r24, Z+
    4058:	7f 01       	movw	r14, r30
    405a:	08 2e       	mov	r0, r24
    405c:	00 0c       	add	r0, r0
    405e:	99 0b       	sbc	r25, r25
    4060:	98 01       	movw	r18, r16
    4062:	40 e0       	ldi	r20, 0x00	; 0
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	6d e8       	ldi	r22, 0x8D	; 141
    4068:	7f e0       	ldi	r23, 0x0F	; 15
    406a:	85 5e       	subi	r24, 0xE5	; 229
    406c:	9e 4f       	sbci	r25, 0xFE	; 254
    406e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
    4072:	06 5f       	subi	r16, 0xF6	; 246
    4074:	1f 4f       	sbci	r17, 0xFF	; 255
				log_start = 15;
			}
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
    4076:	02 33       	cpi	r16, 0x32	; 50
    4078:	11 05       	cpc	r17, r1
    407a:	61 f7       	brne	.-40     	; 0x4054 <menu_log+0x60>
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
		}

		print_menu_frame(LOG);
    407c:	83 e0       	ldi	r24, 0x03	; 3
    407e:	0e 94 6d 49 	call	0x92da	; 0x92da <print_menu_frame>
		clear_buffer(buffer);
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	91 e0       	ldi	r25, 0x01	; 1
    4086:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
    408a:	ff e7       	ldi	r31, 0x7F	; 127
    408c:	2a e1       	ldi	r18, 0x1A	; 26
    408e:	36 e0       	ldi	r19, 0x06	; 6
    4090:	f1 50       	subi	r31, 0x01	; 1
    4092:	20 40       	sbci	r18, 0x00	; 0
    4094:	30 40       	sbci	r19, 0x00	; 0
    4096:	e1 f7       	brne	.-8      	; 0x4090 <menu_log+0x9c>
    4098:	00 c0       	rjmp	.+0      	; 0x409a <menu_log+0xa6>
    409a:	00 00       	nop
    409c:	b9 cf       	rjmp	.-142    	; 0x4010 <menu_log+0x1c>
		
		_delay_ms(100);
	}
}
    409e:	df 91       	pop	r29
    40a0:	cf 91       	pop	r28
    40a2:	1f 91       	pop	r17
    40a4:	0f 91       	pop	r16
    40a6:	ff 90       	pop	r15
    40a8:	ef 90       	pop	r14
    40aa:	df 90       	pop	r13
    40ac:	cf 90       	pop	r12
    40ae:	08 95       	ret

000040b0 <Display_rcinput>:
	int16_t itemp1 = 0;
	int16_t value = 0;
#endif	
	
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
    40b0:	0e 94 14 48 	call	0x9028	; 0x9028 <init_int>

	// Just normal RX display
	while(BUTTON1 != 0)
    40b4:	1f 9b       	sbis	0x03, 7	; 3
    40b6:	fa c0       	rjmp	.+500    	; 0x42ac <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    40b8:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    40ba:	0e 94 03 6a 	call	0xd406	; 0xd406 <CenterSticks>
		}

		RxGetChannels();
    40be:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	40 e0       	ldi	r20, 0x00	; 0
    40c8:	50 e0       	ldi	r21, 0x00	; 0
    40ca:	6d e8       	ldi	r22, 0x8D	; 141
    40cc:	7f e0       	ldi	r23, 0x0F	; 15
    40ce:	82 e7       	ldi	r24, 0x72	; 114
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    40d6:	2a e0       	ldi	r18, 0x0A	; 10
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	40 e0       	ldi	r20, 0x00	; 0
    40dc:	50 e0       	ldi	r21, 0x00	; 0
    40de:	6d e8       	ldi	r22, 0x8D	; 141
    40e0:	7f e0       	ldi	r23, 0x0F	; 15
    40e2:	80 e2       	ldi	r24, 0x20	; 32
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    40ea:	24 e1       	ldi	r18, 0x14	; 20
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	40 e0       	ldi	r20, 0x00	; 0
    40f0:	50 e0       	ldi	r21, 0x00	; 0
    40f2:	6d e8       	ldi	r22, 0x8D	; 141
    40f4:	7f e0       	ldi	r23, 0x0F	; 15
    40f6:	83 e7       	ldi	r24, 0x73	; 115
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    40fe:	2e e1       	ldi	r18, 0x1E	; 30
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 e0       	ldi	r20, 0x00	; 0
    4104:	50 e0       	ldi	r21, 0x00	; 0
    4106:	6d e8       	ldi	r22, 0x8D	; 141
    4108:	7f e0       	ldi	r23, 0x0F	; 15
    410a:	83 e2       	ldi	r24, 0x23	; 35
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	46 e4       	ldi	r20, 0x46	; 70
    4118:	50 e0       	ldi	r21, 0x00	; 0
    411a:	6d e8       	ldi	r22, 0x8D	; 141
    411c:	7f e0       	ldi	r23, 0x0F	; 15
    411e:	8d e6       	ldi	r24, 0x6D	; 109
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    4126:	2a e0       	ldi	r18, 0x0A	; 10
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	46 e4       	ldi	r20, 0x46	; 70
    412c:	50 e0       	ldi	r21, 0x00	; 0
    412e:	6d e8       	ldi	r22, 0x8D	; 141
    4130:	7f e0       	ldi	r23, 0x0F	; 15
    4132:	8e e6       	ldi	r24, 0x6E	; 110
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    413a:	24 e1       	ldi	r18, 0x14	; 20
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	46 e4       	ldi	r20, 0x46	; 70
    4140:	50 e0       	ldi	r21, 0x00	; 0
    4142:	6d e8       	ldi	r22, 0x8D	; 141
    4144:	7f e0       	ldi	r23, 0x0F	; 15
    4146:	8f e6       	ldi	r24, 0x6F	; 111
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    414e:	2e e1       	ldi	r18, 0x1E	; 30
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	46 e4       	ldi	r20, 0x46	; 70
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	6d e8       	ldi	r22, 0x8D	; 141
    4158:	7f e0       	ldi	r23, 0x0F	; 15
    415a:	80 e7       	ldi	r24, 0x70	; 112
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    4162:	80 91 81 09 	lds	r24, 0x0981
    4166:	90 91 82 09 	lds	r25, 0x0982
    416a:	4a e0       	ldi	r20, 0x0A	; 10
    416c:	62 ec       	ldi	r22, 0xC2	; 194
    416e:	75 e0       	ldi	r23, 0x05	; 5
    4170:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	45 e2       	ldi	r20, 0x25	; 37
    417a:	50 e0       	ldi	r21, 0x00	; 0
    417c:	6d e8       	ldi	r22, 0x8D	; 141
    417e:	7f e0       	ldi	r23, 0x0F	; 15
    4180:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    4184:	80 91 85 09 	lds	r24, 0x0985
    4188:	90 91 86 09 	lds	r25, 0x0986
    418c:	4a e0       	ldi	r20, 0x0A	; 10
    418e:	62 ec       	ldi	r22, 0xC2	; 194
    4190:	75 e0       	ldi	r23, 0x05	; 5
    4192:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    4196:	2a e0       	ldi	r18, 0x0A	; 10
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	45 e2       	ldi	r20, 0x25	; 37
    419c:	50 e0       	ldi	r21, 0x00	; 0
    419e:	6d e8       	ldi	r22, 0x8D	; 141
    41a0:	7f e0       	ldi	r23, 0x0F	; 15
    41a2:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    41a6:	80 91 87 09 	lds	r24, 0x0987
    41aa:	90 91 88 09 	lds	r25, 0x0988
    41ae:	4a e0       	ldi	r20, 0x0A	; 10
    41b0:	62 ec       	ldi	r22, 0xC2	; 194
    41b2:	75 e0       	ldi	r23, 0x05	; 5
    41b4:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    41b8:	24 e1       	ldi	r18, 0x14	; 20
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	45 e2       	ldi	r20, 0x25	; 37
    41be:	50 e0       	ldi	r21, 0x00	; 0
    41c0:	6d e8       	ldi	r22, 0x8D	; 141
    41c2:	7f e0       	ldi	r23, 0x0F	; 15
    41c4:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    41c8:	80 91 89 09 	lds	r24, 0x0989
    41cc:	90 91 8a 09 	lds	r25, 0x098A
    41d0:	4a e0       	ldi	r20, 0x0A	; 10
    41d2:	62 ec       	ldi	r22, 0xC2	; 194
    41d4:	75 e0       	ldi	r23, 0x05	; 5
    41d6:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    41da:	2e e1       	ldi	r18, 0x1E	; 30
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	45 e2       	ldi	r20, 0x25	; 37
    41e0:	50 e0       	ldi	r21, 0x00	; 0
    41e2:	6d e8       	ldi	r22, 0x8D	; 141
    41e4:	7f e0       	ldi	r23, 0x0F	; 15
    41e6:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    41ea:	80 91 8b 09 	lds	r24, 0x098B
    41ee:	90 91 8c 09 	lds	r25, 0x098C
    41f2:	4a e0       	ldi	r20, 0x0A	; 10
    41f4:	62 ec       	ldi	r22, 0xC2	; 194
    41f6:	75 e0       	ldi	r23, 0x05	; 5
    41f8:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	44 e6       	ldi	r20, 0x64	; 100
    4202:	50 e0       	ldi	r21, 0x00	; 0
    4204:	6d e8       	ldi	r22, 0x8D	; 141
    4206:	7f e0       	ldi	r23, 0x0F	; 15
    4208:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    420c:	80 91 8d 09 	lds	r24, 0x098D
    4210:	90 91 8e 09 	lds	r25, 0x098E
    4214:	4a e0       	ldi	r20, 0x0A	; 10
    4216:	62 ec       	ldi	r22, 0xC2	; 194
    4218:	75 e0       	ldi	r23, 0x05	; 5
    421a:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    421e:	2a e0       	ldi	r18, 0x0A	; 10
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	44 e6       	ldi	r20, 0x64	; 100
    4224:	50 e0       	ldi	r21, 0x00	; 0
    4226:	6d e8       	ldi	r22, 0x8D	; 141
    4228:	7f e0       	ldi	r23, 0x0F	; 15
    422a:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    422e:	80 91 8f 09 	lds	r24, 0x098F
    4232:	90 91 90 09 	lds	r25, 0x0990
    4236:	4a e0       	ldi	r20, 0x0A	; 10
    4238:	62 ec       	ldi	r22, 0xC2	; 194
    423a:	75 e0       	ldi	r23, 0x05	; 5
    423c:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    4240:	24 e1       	ldi	r18, 0x14	; 20
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	44 e6       	ldi	r20, 0x64	; 100
    4246:	50 e0       	ldi	r21, 0x00	; 0
    4248:	6d e8       	ldi	r22, 0x8D	; 141
    424a:	7f e0       	ldi	r23, 0x0F	; 15
    424c:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    4250:	80 91 91 09 	lds	r24, 0x0991
    4254:	90 91 92 09 	lds	r25, 0x0992
    4258:	4a e0       	ldi	r20, 0x0A	; 10
    425a:	62 ec       	ldi	r22, 0xC2	; 194
    425c:	75 e0       	ldi	r23, 0x05	; 5
    425e:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    4262:	2e e1       	ldi	r18, 0x1E	; 30
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	44 e6       	ldi	r20, 0x64	; 100
    4268:	50 e0       	ldi	r21, 0x00	; 0
    426a:	6d e8       	ldi	r22, 0x8D	; 141
    426c:	7f e0       	ldi	r23, 0x0F	; 15
    426e:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		//itemp = Process_curve(GEN_CURVE_C, BIPOLAR, RCinputs[GEAR]);
		mugui_lcd_puts(itoa(itemp1,pBuffer,10),(const unsigned char*)Verdana8,100,40);
		mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana8,37,40);
#endif
		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    4272:	29 e3       	ldi	r18, 0x39	; 57
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	40 e0       	ldi	r20, 0x00	; 0
    4278:	50 e0       	ldi	r21, 0x00	; 0
    427a:	6f ef       	ldi	r22, 0xFF	; 255
    427c:	71 e0       	ldi	r23, 0x01	; 1
    427e:	8c e0       	ldi	r24, 0x0C	; 12
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    4286:	27 e3       	ldi	r18, 0x37	; 55
    4288:	30 e0       	ldi	r19, 0x00	; 0
    428a:	4e e6       	ldi	r20, 0x6E	; 110
    428c:	50 e0       	ldi	r21, 0x00	; 0
    428e:	6d e8       	ldi	r22, 0x8D	; 141
    4290:	7f e0       	ldi	r23, 0x0F	; 15
    4292:	8c e3       	ldi	r24, 0x3C	; 60
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    429a:	80 e0       	ldi	r24, 0x00	; 0
    429c:	91 e0       	ldi	r25, 0x01	; 1
    429e:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
		clear_buffer(buffer);
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	91 e0       	ldi	r25, 0x01	; 1
    42a6:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
    42aa:	04 cf       	rjmp	.-504    	; 0x40b4 <Display_rcinput+0x4>
	}
}
    42ac:	08 95       	ret

000042ae <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    42ae:	cf 92       	push	r12
    42b0:	df 92       	push	r13
    42b2:	ef 92       	push	r14
    42b4:	ff 92       	push	r15
    42b6:	1f 93       	push	r17
    42b8:	cf 93       	push	r28
    42ba:	df 93       	push	r29
	bool	first_time = true;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint32_t interval = 0;			// IMU interval	
	
	clear_buffer(buffer);
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	91 e0       	ldi	r25, 0x01	; 1
    42c0:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    42c4:	11 e0       	ldi	r17, 0x01	; 1
		mugui_lcd_puts(itoa(gyroADCalt[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
		mugui_lcd_puts(itoa(gyroADCalt[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,75,13);
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,75,23);
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,75,33);
		mugui_lcd_puts(itoa(angle[ROLL]/100,pBuffer,10),(const unsigned char*)Verdana8,107,13);
    42c6:	c4 e6       	ldi	r28, 0x64	; 100
    42c8:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t interval = 0;			// IMU interval	
	
	clear_buffer(buffer);
	
	// While BACK not pressed
	while(BUTTON1 != 0)
    42ca:	1f 9b       	sbis	0x03, 7	; 3
    42cc:	79 c1       	rjmp	.+754    	; 0x45c0 <Display_sensors+0x312>
	{
		RxGetChannels();						// Check state of transition switch
    42ce:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <RxGetChannels>
		UpdateTransition();						// Update the transition variable
    42d2:	0e 94 5e 6a 	call	0xd4bc	; 0xd4bc <UpdateTransition>

		ReadGyros();
    42d6:	0e 94 39 39 	call	0x7272	; 0x7272 <ReadGyros>
		ReadAcc();
    42da:	0e 94 34 18 	call	0x3068	; 0x3068 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    42de:	0e 94 a8 43 	call	0x8750	; 0x8750 <TIM16_ReadTCNT1>

		// Reset Timer0 count
		TCNT0 = 0;
    42e2:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    42e4:	20 91 2f 05 	lds	r18, 0x052F
    42e8:	30 91 30 05 	lds	r19, 0x0530
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    42ec:	20 91 2f 05 	lds	r18, 0x052F
    42f0:	30 91 30 05 	lds	r19, 0x0530
    42f4:	6c 01       	movw	r12, r24
    42f6:	c2 1a       	sub	r12, r18
    42f8:	d3 0a       	sbc	r13, r19
		}
		
		interval = ticker_16; // uint16_t
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    42fa:	90 93 30 05 	sts	0x0530, r25
    42fe:	80 93 2f 05 	sts	0x052F, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    4302:	80 91 01 09 	lds	r24, 0x0901
    4306:	90 91 02 09 	lds	r25, 0x0902
    430a:	e1 2c       	mov	r14, r1
    430c:	f1 2c       	mov	r15, r1
    430e:	02 97       	sbiw	r24, 0x02	; 2
    4310:	88 f0       	brcs	.+34     	; 0x4334 <Display_sensors+0x86>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    4312:	80 91 01 09 	lds	r24, 0x0901
    4316:	90 91 02 09 	lds	r25, 0x0902
    431a:	a0 e0       	ldi	r26, 0x00	; 0
    431c:	b0 e0       	ldi	r27, 0x00	; 0
    431e:	2f e0       	ldi	r18, 0x0F	; 15
    4320:	88 0f       	add	r24, r24
    4322:	99 1f       	adc	r25, r25
    4324:	aa 1f       	adc	r26, r26
    4326:	bb 1f       	adc	r27, r27
    4328:	2a 95       	dec	r18
    432a:	d1 f7       	brne	.-12     	; 0x4320 <Display_sensors+0x72>
    432c:	c8 0e       	add	r12, r24
    432e:	d9 1e       	adc	r13, r25
    4330:	ea 1e       	adc	r14, r26
    4332:	fb 1e       	adc	r15, r27
		}

		TMR0_counter = 0;
    4334:	10 92 02 09 	sts	0x0902, r1
    4338:	10 92 01 09 	sts	0x0901, r1
		
		// Refresh accSmooth values and AccVert
		imu_update(interval);
    433c:	c7 01       	movw	r24, r14
    433e:	b6 01       	movw	r22, r12
    4340:	0e 94 27 3e 	call	0x7c4e	; 0x7c4e <imu_update>

		// Update I-terms, average gyro values each loop
		Sensor_PID(interval);
    4344:	c7 01       	movw	r24, r14
    4346:	b6 01       	movw	r22, r12
    4348:	0e 94 24 63 	call	0xc648	; 0xc648 <Sensor_PID>
		
		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	45 e2       	ldi	r20, 0x25	; 37
    4352:	50 e0       	ldi	r21, 0x00	; 0
    4354:	6d e8       	ldi	r22, 0x8D	; 141
    4356:	7f e0       	ldi	r23, 0x0F	; 15
    4358:	8a e1       	ldi	r24, 0x1A	; 26
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,72,0); 	// Acc
    4360:	20 e0       	ldi	r18, 0x00	; 0
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	48 e4       	ldi	r20, 0x48	; 72
    4366:	50 e0       	ldi	r21, 0x00	; 0
    4368:	6d e8       	ldi	r22, 0x8D	; 141
    436a:	7f e0       	ldi	r23, 0x0F	; 15
    436c:	8e e1       	ldi	r24, 0x1E	; 30
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(31,(const unsigned char*)Verdana8,107,0); 	// IMU
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	4b e6       	ldi	r20, 0x6B	; 107
    437a:	50 e0       	ldi	r21, 0x00	; 0
    437c:	6d e8       	ldi	r22, 0x8D	; 141
    437e:	7f e0       	ldi	r23, 0x0F	; 15
    4380:	8f e1       	ldi	r24, 0x1F	; 31
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    4388:	2d e0       	ldi	r18, 0x0D	; 13
    438a:	30 e0       	ldi	r19, 0x00	; 0
    438c:	45 e0       	ldi	r20, 0x05	; 5
    438e:	50 e0       	ldi	r21, 0x00	; 0
    4390:	6d e8       	ldi	r22, 0x8D	; 141
    4392:	7f e0       	ldi	r23, 0x0F	; 15
    4394:	8b e1       	ldi	r24, 0x1B	; 27
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    439c:	27 e1       	ldi	r18, 0x17	; 23
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	45 e0       	ldi	r20, 0x05	; 5
    43a2:	50 e0       	ldi	r21, 0x00	; 0
    43a4:	6d e8       	ldi	r22, 0x8D	; 141
    43a6:	7f e0       	ldi	r23, 0x0F	; 15
    43a8:	8c e1       	ldi	r24, 0x1C	; 28
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    43b0:	21 e2       	ldi	r18, 0x21	; 33
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	45 e0       	ldi	r20, 0x05	; 5
    43b6:	50 e0       	ldi	r21, 0x00	; 0
    43b8:	6d e8       	ldi	r22, 0x8D	; 141
    43ba:	7f e0       	ldi	r23, 0x0F	; 15
    43bc:	8d e1       	ldi	r24, 0x1D	; 29
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
    43c4:	4a e0       	ldi	r20, 0x0A	; 10
    43c6:	62 ec       	ldi	r22, 0xC2	; 194
    43c8:	75 e0       	ldi	r23, 0x05	; 5
    43ca:	80 91 ed 05 	lds	r24, 0x05ED
    43ce:	90 91 ee 05 	lds	r25, 0x05EE
    43d2:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADCalt[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    43d6:	2d e0       	ldi	r18, 0x0D	; 13
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	48 e2       	ldi	r20, 0x28	; 40
    43dc:	50 e0       	ldi	r21, 0x00	; 0
    43de:	6d e8       	ldi	r22, 0x8D	; 141
    43e0:	7f e0       	ldi	r23, 0x0F	; 15
    43e2:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    43e6:	4a e0       	ldi	r20, 0x0A	; 10
    43e8:	62 ec       	ldi	r22, 0xC2	; 194
    43ea:	75 e0       	ldi	r23, 0x05	; 5
    43ec:	80 91 ef 05 	lds	r24, 0x05EF
    43f0:	90 91 f0 05 	lds	r25, 0x05F0
    43f4:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADCalt[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    43f8:	27 e1       	ldi	r18, 0x17	; 23
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	48 e2       	ldi	r20, 0x28	; 40
    43fe:	50 e0       	ldi	r21, 0x00	; 0
    4400:	6d e8       	ldi	r22, 0x8D	; 141
    4402:	7f e0       	ldi	r23, 0x0F	; 15
    4404:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    4408:	4a e0       	ldi	r20, 0x0A	; 10
    440a:	62 ec       	ldi	r22, 0xC2	; 194
    440c:	75 e0       	ldi	r23, 0x05	; 5
    440e:	80 91 f1 05 	lds	r24, 0x05F1
    4412:	90 91 f2 05 	lds	r25, 0x05F2
    4416:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADCalt[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    441a:	21 e2       	ldi	r18, 0x21	; 33
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	48 e2       	ldi	r20, 0x28	; 40
    4420:	50 e0       	ldi	r21, 0x00	; 0
    4422:	6d e8       	ldi	r22, 0x8D	; 141
    4424:	7f e0       	ldi	r23, 0x0F	; 15
    4426:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    442a:	4a e0       	ldi	r20, 0x0A	; 10
    442c:	62 ec       	ldi	r22, 0xC2	; 194
    442e:	75 e0       	ldi	r23, 0x05	; 5
    4430:	80 91 70 05 	lds	r24, 0x0570
    4434:	90 91 71 05 	lds	r25, 0x0571
    4438:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,75,13);
    443c:	2d e0       	ldi	r18, 0x0D	; 13
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	4b e4       	ldi	r20, 0x4B	; 75
    4442:	50 e0       	ldi	r21, 0x00	; 0
    4444:	6d e8       	ldi	r22, 0x8D	; 141
    4446:	7f e0       	ldi	r23, 0x0F	; 15
    4448:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    444c:	4a e0       	ldi	r20, 0x0A	; 10
    444e:	62 ec       	ldi	r22, 0xC2	; 194
    4450:	75 e0       	ldi	r23, 0x05	; 5
    4452:	80 91 72 05 	lds	r24, 0x0572
    4456:	90 91 73 05 	lds	r25, 0x0573
    445a:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,75,23);
    445e:	27 e1       	ldi	r18, 0x17	; 23
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	4b e4       	ldi	r20, 0x4B	; 75
    4464:	50 e0       	ldi	r21, 0x00	; 0
    4466:	6d e8       	ldi	r22, 0x8D	; 141
    4468:	7f e0       	ldi	r23, 0x0F	; 15
    446a:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    446e:	4a e0       	ldi	r20, 0x0A	; 10
    4470:	62 ec       	ldi	r22, 0xC2	; 194
    4472:	75 e0       	ldi	r23, 0x05	; 5
    4474:	80 91 74 05 	lds	r24, 0x0574
    4478:	90 91 75 05 	lds	r25, 0x0575
    447c:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,75,33);
    4480:	21 e2       	ldi	r18, 0x21	; 33
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	4b e4       	ldi	r20, 0x4B	; 75
    4486:	50 e0       	ldi	r21, 0x00	; 0
    4488:	6d e8       	ldi	r22, 0x8D	; 141
    448a:	7f e0       	ldi	r23, 0x0F	; 15
    448c:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		mugui_lcd_puts(itoa(angle[ROLL]/100,pBuffer,10),(const unsigned char*)Verdana8,107,13);
    4490:	80 91 19 06 	lds	r24, 0x0619
    4494:	90 91 1a 06 	lds	r25, 0x061A
    4498:	be 01       	movw	r22, r28
    449a:	0e 94 2c 6f 	call	0xde58	; 0xde58 <__divmodhi4>
    449e:	cb 01       	movw	r24, r22
    44a0:	4a e0       	ldi	r20, 0x0A	; 10
    44a2:	62 ec       	ldi	r22, 0xC2	; 194
    44a4:	75 e0       	ldi	r23, 0x05	; 5
    44a6:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    44aa:	2d e0       	ldi	r18, 0x0D	; 13
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	4b e6       	ldi	r20, 0x6B	; 107
    44b0:	50 e0       	ldi	r21, 0x00	; 0
    44b2:	6d e8       	ldi	r22, 0x8D	; 141
    44b4:	7f e0       	ldi	r23, 0x0F	; 15
    44b6:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		mugui_lcd_puts(itoa(angle[PITCH]/100,pBuffer,10),(const unsigned char*)Verdana8,107,23);
    44ba:	80 91 1b 06 	lds	r24, 0x061B
    44be:	90 91 1c 06 	lds	r25, 0x061C
    44c2:	be 01       	movw	r22, r28
    44c4:	0e 94 2c 6f 	call	0xde58	; 0xde58 <__divmodhi4>
    44c8:	cb 01       	movw	r24, r22
    44ca:	4a e0       	ldi	r20, 0x0A	; 10
    44cc:	62 ec       	ldi	r22, 0xC2	; 194
    44ce:	75 e0       	ldi	r23, 0x05	; 5
    44d0:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    44d4:	27 e1       	ldi	r18, 0x17	; 23
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	4b e6       	ldi	r20, 0x6B	; 107
    44da:	50 e0       	ldi	r21, 0x00	; 0
    44dc:	6d e8       	ldi	r22, 0x8D	; 141
    44de:	7f e0       	ldi	r23, 0x0F	; 15
    44e0:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		
		// AccVertf
		LCD_Display_Text(229,(const unsigned char*)Verdana8,5,45);	// AccVert
    44e4:	2d e2       	ldi	r18, 0x2D	; 45
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	45 e0       	ldi	r20, 0x05	; 5
    44ea:	50 e0       	ldi	r21, 0x00	; 0
    44ec:	6d e8       	ldi	r22, 0x8D	; 141
    44ee:	7f e0       	ldi	r23, 0x0F	; 15
    44f0:	85 ee       	ldi	r24, 0xE5	; 229
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		mugui_lcd_puts(itoa((int16_t)accVertf,pBuffer,10),(const unsigned char*)Verdana8,40,45);
    44f8:	60 91 26 05 	lds	r22, 0x0526
    44fc:	70 91 27 05 	lds	r23, 0x0527
    4500:	80 91 28 05 	lds	r24, 0x0528
    4504:	90 91 29 05 	lds	r25, 0x0529
    4508:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    450c:	dc 01       	movw	r26, r24
    450e:	cb 01       	movw	r24, r22
    4510:	4a e0       	ldi	r20, 0x0A	; 10
    4512:	62 ec       	ldi	r22, 0xC2	; 194
    4514:	75 e0       	ldi	r23, 0x05	; 5
    4516:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    451a:	2d e2       	ldi	r18, 0x2D	; 45
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	48 e2       	ldi	r20, 0x28	; 40
    4520:	50 e0       	ldi	r21, 0x00	; 0
    4522:	6d e8       	ldi	r22, 0x8D	; 141
    4524:	7f e0       	ldi	r23, 0x0F	; 15
    4526:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    452a:	29 e3       	ldi	r18, 0x39	; 57
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	40 e0       	ldi	r20, 0x00	; 0
    4530:	50 e0       	ldi	r21, 0x00	; 0
    4532:	6f ef       	ldi	r22, 0xFF	; 255
    4534:	71 e0       	ldi	r23, 0x01	; 1
    4536:	8c e0       	ldi	r24, 0x0C	; 12
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    453e:	27 e3       	ldi	r18, 0x37	; 55
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	4c e6       	ldi	r20, 0x6C	; 108
    4544:	50 e0       	ldi	r21, 0x00	; 0
    4546:	6d e8       	ldi	r22, 0x8D	; 141
    4548:	7f e0       	ldi	r23, 0x0F	; 15
    454a:	8c e3       	ldi	r24, 0x3C	; 60
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    4552:	27 e3       	ldi	r18, 0x37	; 55
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	4b e4       	ldi	r20, 0x4B	; 75
    4558:	50 e0       	ldi	r21, 0x00	; 0
    455a:	6d e8       	ldi	r22, 0x8D	; 141
    455c:	7f e0       	ldi	r23, 0x0F	; 15
    455e:	89 e1       	ldi	r24, 0x19	; 25
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    4566:	80 e0       	ldi	r24, 0x00	; 0
    4568:	91 e0       	ldi	r25, 0x01	; 1
    456a:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
		clear_buffer(buffer);
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	91 e0       	ldi	r25, 0x01	; 1
    4572:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
	
		if (first_time)
    4576:	11 11       	cpse	r17, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    4578:	0e 94 9a 53 	call	0xa734	; 0xa734 <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    457c:	1c 99       	sbic	0x03, 4	; 3
    457e:	10 c0       	rjmp	.+32     	; 0x45a0 <Display_sensors+0x2f2>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    4580:	0e 94 9a 53 	call	0xa734	; 0xa734 <Wait_BUTTON4>
    4584:	2f e3       	ldi	r18, 0x3F	; 63
    4586:	82 e4       	ldi	r24, 0x42	; 66
    4588:	9f e0       	ldi	r25, 0x0F	; 15
    458a:	21 50       	subi	r18, 0x01	; 1
    458c:	80 40       	sbci	r24, 0x00	; 0
    458e:	90 40       	sbci	r25, 0x00	; 0
    4590:	e1 f7       	brne	.-8      	; 0x458a <Display_sensors+0x2dc>
    4592:	00 c0       	rjmp	.+0      	; 0x4594 <Display_sensors+0x2e6>
    4594:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    4596:	0e 94 06 3a 	call	0x740c	; 0x740c <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	0e 94 05 1a 	call	0x340a	; 0x340a <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    45a0:	1d 99       	sbic	0x03, 5	; 3
    45a2:	0c c0       	rjmp	.+24     	; 0x45bc <Display_sensors+0x30e>
    45a4:	2f e3       	ldi	r18, 0x3F	; 63
    45a6:	82 e4       	ldi	r24, 0x42	; 66
    45a8:	9f e0       	ldi	r25, 0x0F	; 15
    45aa:	21 50       	subi	r18, 0x01	; 1
    45ac:	80 40       	sbci	r24, 0x00	; 0
    45ae:	90 40       	sbci	r25, 0x00	; 0
    45b0:	e1 f7       	brne	.-8      	; 0x45aa <Display_sensors+0x2fc>
    45b2:	00 c0       	rjmp	.+0      	; 0x45b4 <Display_sensors+0x306>
    45b4:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	0e 94 05 1a 	call	0x340a	; 0x340a <CalibrateAcc>
    45bc:	10 e0       	ldi	r17, 0x00	; 0
    45be:	85 ce       	rjmp	.-758    	; 0x42ca <Display_sensors+0x1c>
		}
	}
}
    45c0:	df 91       	pop	r29
    45c2:	cf 91       	pop	r28
    45c4:	1f 91       	pop	r17
    45c6:	ff 90       	pop	r15
    45c8:	ef 90       	pop	r14
    45ca:	df 90       	pop	r13
    45cc:	cf 90       	pop	r12
    45ce:	08 95       	ret

000045d0 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    45d0:	bf 92       	push	r11
    45d2:	cf 92       	push	r12
    45d4:	df 92       	push	r13
    45d6:	ef 92       	push	r14
    45d8:	ff 92       	push	r15
    45da:	0f 93       	push	r16
    45dc:	1f 93       	push	r17
    45de:	cf 93       	push	r28
    45e0:	df 93       	push	r29
    45e2:	00 d0       	rcall	.+0      	; 0x45e4 <Display_status+0x14>
    45e4:	00 d0       	rcall	.+0      	; 0x45e6 <Display_status+0x16>
    45e6:	cd b7       	in	r28, 0x3d	; 61
    45e8:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    45ea:	80 e0       	ldi	r24, 0x00	; 0
    45ec:	91 e0       	ldi	r25, 0x01	; 1
    45ee:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
	//mugui_lcd_puts(itoa(((void*)&Config.FlightMode[P1].Roll_P_mult - (void*)&Config.setup),pBuffer,10),(const unsigned char*)Verdana8,0,0); //53 - OK
	//mugui_lcd_puts(itoa(((void*)&Config.Raw_I_Limits[P1][0] - (void*)&Config.setup),pBuffer,10),(const unsigned char*)Verdana8,0,0); // 93 - OK
	//mugui_lcd_puts(itoa(((void*)&Config.Raw_I_Constrain[P1][0] - (void*)&Config.setup),pBuffer,10),(const unsigned char*)Verdana8,0,0); // 125 - NG (not 121) out by 4

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	40 e0       	ldi	r20, 0x00	; 0
    45f8:	50 e0       	ldi	r21, 0x00	; 0
    45fa:	6d e8       	ldi	r22, 0x8D	; 141
    45fc:	7f e0       	ldi	r23, 0x0F	; 15
    45fe:	88 e0       	ldi	r24, 0x08	; 8
    4600:	91 e0       	ldi	r25, 0x01	; 1
    4602:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    4606:	2c e0       	ldi	r18, 0x0C	; 12
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	40 e0       	ldi	r20, 0x00	; 0
    460c:	50 e0       	ldi	r21, 0x00	; 0
    460e:	6d e8       	ldi	r22, 0x8D	; 141
    4610:	7f e0       	ldi	r23, 0x0F	; 15
    4612:	8a e0       	ldi	r24, 0x0A	; 10
    4614:	91 e0       	ldi	r25, 0x01	; 1
    4616:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    461a:	28 e1       	ldi	r18, 0x18	; 24
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	40 e0       	ldi	r20, 0x00	; 0
    4620:	50 e0       	ldi	r21, 0x00	; 0
    4622:	6d e8       	ldi	r22, 0x8D	; 141
    4624:	7f e0       	ldi	r23, 0x0F	; 15
    4626:	8b e0       	ldi	r24, 0x0B	; 11
    4628:	91 e0       	ldi	r25, 0x01	; 1
    462a:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    462e:	28 e1       	ldi	r18, 0x18	; 24
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	48 e5       	ldi	r20, 0x58	; 88
    4634:	50 e0       	ldi	r21, 0x00	; 0
    4636:	6d e8       	ldi	r22, 0x8D	; 141
    4638:	7f e0       	ldi	r23, 0x0F	; 15
    463a:	87 e1       	ldi	r24, 0x17	; 23
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    4642:	2b e3       	ldi	r18, 0x3B	; 59
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	40 e0       	ldi	r20, 0x00	; 0
    4648:	50 e0       	ldi	r21, 0x00	; 0
    464a:	6f ef       	ldi	r22, 0xFF	; 255
    464c:	71 e0       	ldi	r23, 0x01	; 1
    464e:	89 e0       	ldi	r24, 0x09	; 9
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    4656:	27 e3       	ldi	r18, 0x37	; 55
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	4a e0       	ldi	r20, 0x0A	; 10
    465c:	50 e0       	ldi	r21, 0x00	; 0
    465e:	6d e8       	ldi	r22, 0x8D	; 141
    4660:	7f e0       	ldi	r23, 0x0F	; 15
    4662:	8e e0       	ldi	r24, 0x0E	; 14
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (396 + Config.RxMode), 45, 12);		// Rx mode
    466a:	40 91 62 06 	lds	r20, 0x0662
    466e:	04 2e       	mov	r0, r20
    4670:	00 0c       	add	r0, r0
    4672:	55 0b       	sbc	r21, r21
    4674:	44 57       	subi	r20, 0x74	; 116
    4676:	5e 4f       	sbci	r21, 0xFE	; 254
    4678:	0c e0       	ldi	r16, 0x0C	; 12
    467a:	2d e2       	ldi	r18, 0x2D	; 45
    467c:	61 e0       	ldi	r22, 0x01	; 1
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	0e 94 3a 4a 	call	0x9474	; 0x9474 <print_menu_text>
    4686:	4a e0       	ldi	r20, 0x0A	; 10
    4688:	62 ec       	ldi	r22, 0xC2	; 194
    468a:	75 e0       	ldi	r23, 0x05	; 5
    468c:	80 91 38 05 	lds	r24, 0x0538
    4690:	90 91 39 05 	lds	r25, 0x0539
    4694:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    4698:	28 e1       	ldi	r18, 0x18	; 24
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	4e e6       	ldi	r20, 0x6E	; 110
    469e:	50 e0       	ldi	r21, 0x00	; 0
    46a0:	6d e8       	ldi	r22, 0x8D	; 141
    46a2:	7f e0       	ldi	r23, 0x0F	; 15
    46a4:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    46a8:	80 91 62 06 	lds	r24, 0x0662
    46ac:	81 30       	cpi	r24, 0x01	; 1
    46ae:	d9 f4       	brne	.+54     	; 0x46e6 <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    46b0:	2c e0       	ldi	r18, 0x0C	; 12
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	4d e4       	ldi	r20, 0x4D	; 77
    46b6:	50 e0       	ldi	r21, 0x00	; 0
    46b8:	6d e8       	ldi	r22, 0x8D	; 141
    46ba:	7f e0       	ldi	r23, 0x0F	; 15
    46bc:	88 e1       	ldi	r24, 0x18	; 24
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    46c4:	80 91 31 05 	lds	r24, 0x0531
    46c8:	90 91 32 05 	lds	r25, 0x0532
    46cc:	4a e0       	ldi	r20, 0x0A	; 10
    46ce:	62 ec       	ldi	r22, 0xC2	; 194
    46d0:	75 e0       	ldi	r23, 0x05	; 5
    46d2:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    46d6:	2c e0       	ldi	r18, 0x0C	; 12
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	4e e6       	ldi	r20, 0x6E	; 110
    46dc:	50 e0       	ldi	r21, 0x00	; 0
    46de:	6d e8       	ldi	r22, 0x8D	; 141
    46e0:	7f e0       	ldi	r23, 0x0F	; 15
    46e2:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    46e6:	20 91 38 05 	lds	r18, 0x0538
    46ea:	30 91 39 05 	lds	r19, 0x0539
    46ee:	12 16       	cp	r1, r18
    46f0:	13 06       	cpc	r1, r19
    46f2:	4c f0       	brlt	.+18     	; 0x4706 <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    46f4:	28 e1       	ldi	r18, 0x18	; 24
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	4d e2       	ldi	r20, 0x2D	; 45
    46fa:	50 e0       	ldi	r21, 0x00	; 0
    46fc:	6d e8       	ldi	r22, 0x8D	; 141
    46fe:	7f e0       	ldi	r23, 0x0F	; 15
    4700:	80 e3       	ldi	r24, 0x30	; 48
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	31 c0       	rjmp	.+98     	; 0x4768 <Display_status+0x198>
	}
	else if (transition >= 100)
    4706:	24 36       	cpi	r18, 0x64	; 100
    4708:	31 05       	cpc	r19, r1
    470a:	4c f0       	brlt	.+18     	; 0x471e <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    470c:	28 e1       	ldi	r18, 0x18	; 24
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	4d e2       	ldi	r20, 0x2D	; 45
    4712:	50 e0       	ldi	r21, 0x00	; 0
    4714:	6d e8       	ldi	r22, 0x8D	; 141
    4716:	7f e0       	ldi	r23, 0x0F	; 15
    4718:	82 e3       	ldi	r24, 0x32	; 50
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	25 c0       	rjmp	.+74     	; 0x4768 <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    471e:	80 91 6a 06 	lds	r24, 0x066A
    4722:	08 2e       	mov	r0, r24
    4724:	00 0c       	add	r0, r0
    4726:	99 0b       	sbc	r25, r25
    4728:	28 17       	cp	r18, r24
    472a:	39 07       	cpc	r19, r25
    472c:	49 f4       	brne	.+18     	; 0x4740 <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    472e:	28 e1       	ldi	r18, 0x18	; 24
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	4d e2       	ldi	r20, 0x2D	; 45
    4734:	50 e0       	ldi	r21, 0x00	; 0
    4736:	6d e8       	ldi	r22, 0x8D	; 141
    4738:	7f e0       	ldi	r23, 0x0F	; 15
    473a:	81 e3       	ldi	r24, 0x31	; 49
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	14 c0       	rjmp	.+40     	; 0x4768 <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    4740:	28 17       	cp	r18, r24
    4742:	39 07       	cpc	r19, r25
    4744:	4c f4       	brge	.+18     	; 0x4758 <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    4746:	28 e1       	ldi	r18, 0x18	; 24
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	4d e2       	ldi	r20, 0x2D	; 45
    474c:	50 e0       	ldi	r21, 0x00	; 0
    474e:	6d e8       	ldi	r22, 0x8D	; 141
    4750:	7f e0       	ldi	r23, 0x0F	; 15
    4752:	83 e3       	ldi	r24, 0x33	; 51
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	08 c0       	rjmp	.+16     	; 0x4768 <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    4758:	28 e1       	ldi	r18, 0x18	; 24
    475a:	30 e0       	ldi	r19, 0x00	; 0
    475c:	4d e2       	ldi	r20, 0x2D	; 45
    475e:	50 e0       	ldi	r21, 0x00	; 0
    4760:	6d e8       	ldi	r22, 0x8D	; 141
    4762:	7f e0       	ldi	r23, 0x0F	; 15
    4764:	84 e3       	ldi	r24, 0x34	; 52
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
	}

	// Don't display battery text if there are error messages
	if (General_error == 0)
    476c:	80 91 35 05 	lds	r24, 0x0535
    4770:	81 11       	cpse	r24, r1
    4772:	ca c0       	rjmp	.+404    	; 0x4908 <Display_status+0x338>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(289,(const unsigned char*)Verdana8,0,36); 	// Battery
    4774:	24 e2       	ldi	r18, 0x24	; 36
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	40 e0       	ldi	r20, 0x00	; 0
    477a:	50 e0       	ldi	r21, 0x00	; 0
    477c:	6d e8       	ldi	r22, 0x8D	; 141
    477e:	7f e0       	ldi	r23, 0x0F	; 15
    4780:	81 e2       	ldi	r24, 0x21	; 33
    4782:	91 e0       	ldi	r25, 0x01	; 1
    4784:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

		vbat_temp = GetVbat();
    4788:	0e 94 bb 6c 	call	0xd976	; 0xd976 <GetVbat>
    478c:	7c 01       	movw	r14, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    478e:	64 e6       	ldi	r22, 0x64	; 100
    4790:	70 e0       	ldi	r23, 0x00	; 0
    4792:	0e 94 18 6f 	call	0xde30	; 0xde30 <__udivmodhi4>
    4796:	8b 01       	movw	r16, r22
    4798:	4a e0       	ldi	r20, 0x0A	; 10
    479a:	62 ec       	ldi	r22, 0xC2	; 194
    479c:	75 e0       	ldi	r23, 0x05	; 5
    479e:	c8 01       	movw	r24, r16
    47a0:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    47a4:	ae 01       	movw	r20, r28
    47a6:	4f 5f       	subi	r20, 0xFF	; 255
    47a8:	5f 4f       	sbci	r21, 0xFF	; 255
    47aa:	6d e8       	ldi	r22, 0x8D	; 141
    47ac:	7f e0       	ldi	r23, 0x0F	; 15
    47ae:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
    47b2:	4a e0       	ldi	r20, 0x0A	; 10
    47b4:	62 ec       	ldi	r22, 0xC2	; 194
    47b6:	75 e0       	ldi	r23, 0x05	; 5
    47b8:	c8 01       	movw	r24, r16
    47ba:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    47be:	24 e2       	ldi	r18, 0x24	; 36
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	4d e2       	ldi	r20, 0x2D	; 45
    47c4:	50 e0       	ldi	r21, 0x00	; 0
    47c6:	6d e8       	ldi	r22, 0x8D	; 141
    47c8:	7f e0       	ldi	r23, 0x0F	; 15
    47ca:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    47ce:	2c e9       	ldi	r18, 0x9C	; 156
    47d0:	20 03       	mulsu	r18, r16
    47d2:	60 01       	movw	r12, r0
    47d4:	21 9f       	mul	r18, r17
    47d6:	d0 0c       	add	r13, r0
    47d8:	11 24       	eor	r1, r1
    47da:	ce 0c       	add	r12, r14
    47dc:	df 1c       	adc	r13, r15

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    47de:	09 81       	ldd	r16, Y+1	; 0x01
    47e0:	00 2e       	mov	r0, r16
    47e2:	00 0c       	add	r0, r0
    47e4:	11 0b       	sbc	r17, r17
    47e6:	03 5d       	subi	r16, 0xD3	; 211
    47e8:	1f 4f       	sbci	r17, 0xFF	; 255
    47ea:	24 e2       	ldi	r18, 0x24	; 36
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	a8 01       	movw	r20, r16
    47f0:	6d e8       	ldi	r22, 0x8D	; 141
    47f2:	7f e0       	ldi	r23, 0x0F	; 15
    47f4:	8c e0       	ldi	r24, 0x0C	; 12
    47f6:	91 e0       	ldi	r25, 0x01	; 1
    47f8:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    47fc:	ae 01       	movw	r20, r28
    47fe:	4f 5f       	subi	r20, 0xFF	; 255
    4800:	5f 4f       	sbci	r21, 0xFF	; 255
    4802:	6d e8       	ldi	r22, 0x8D	; 141
    4804:	7f e0       	ldi	r23, 0x0F	; 15
    4806:	8b e0       	ldi	r24, 0x0B	; 11
    4808:	95 e0       	ldi	r25, 0x05	; 5
    480a:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
		pos3 = size.x;
    480e:	e9 80       	ldd	r14, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    4810:	ae 01       	movw	r20, r28
    4812:	4f 5f       	subi	r20, 0xFF	; 255
    4814:	5f 4f       	sbci	r21, 0xFF	; 255
    4816:	6d e8       	ldi	r22, 0x8D	; 141
    4818:	7f e0       	ldi	r23, 0x0F	; 15
    481a:	8d e0       	ldi	r24, 0x0D	; 13
    481c:	95 e0       	ldi	r25, 0x05	; 5
    481e:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
		pos2 = size.x;
    4822:	b9 80       	ldd	r11, Y+1	; 0x01
    4824:	0e 2c       	mov	r0, r14
    4826:	00 0c       	add	r0, r0
    4828:	ff 08       	sbc	r15, r15

		if (vbat_temp >= 10)
    482a:	8a e0       	ldi	r24, 0x0A	; 10
    482c:	c8 16       	cp	r12, r24
    482e:	d1 04       	cpc	r13, r1
    4830:	38 f0       	brcs	.+14     	; 0x4840 <Display_status+0x270>
    4832:	4a e0       	ldi	r20, 0x0A	; 10
    4834:	62 ec       	ldi	r22, 0xC2	; 194
    4836:	75 e0       	ldi	r23, 0x05	; 5
    4838:	c6 01       	movw	r24, r12
    483a:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    483e:	15 c0       	rjmp	.+42     	; 0x486a <Display_status+0x29a>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    4840:	a8 01       	movw	r20, r16
    4842:	4e 0d       	add	r20, r14
    4844:	5f 1d       	adc	r21, r15
    4846:	24 e2       	ldi	r18, 0x24	; 36
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	6d e8       	ldi	r22, 0x8D	; 141
    484c:	7f e0       	ldi	r23, 0x0F	; 15
    484e:	8d e0       	ldi	r24, 0x0D	; 13
    4850:	91 e0       	ldi	r25, 0x01	; 1
    4852:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
    4856:	4a e0       	ldi	r20, 0x0A	; 10
    4858:	62 ec       	ldi	r22, 0xC2	; 194
    485a:	75 e0       	ldi	r23, 0x05	; 5
    485c:	c6 01       	movw	r24, r12
    485e:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    4862:	0b 0d       	add	r16, r11
    4864:	11 1d       	adc	r17, r1
    4866:	b7 fc       	sbrc	r11, 7
    4868:	1a 95       	dec	r17
    486a:	a8 01       	movw	r20, r16
    486c:	4e 0d       	add	r20, r14
    486e:	5f 1d       	adc	r21, r15
    4870:	24 e2       	ldi	r18, 0x24	; 36
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	6d e8       	ldi	r22, 0x8D	; 141
    4876:	7f e0       	ldi	r23, 0x0F	; 15
    4878:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		}
	
		// Display vibration info is set to "ON"
		if (Config.Vibration == ON)
    487c:	80 91 6c 06 	lds	r24, 0x066C
    4880:	81 30       	cpi	r24, 0x01	; 1
    4882:	09 f0       	breq	.+2      	; 0x4886 <Display_status+0x2b6>
    4884:	94 c0       	rjmp	.+296    	; 0x49ae <Display_status+0x3de>
		{
			// Create message box
			fillrect(buffer, 29,11, 70, 42, 0);		// White box
    4886:	e1 2c       	mov	r14, r1
    4888:	0a e2       	ldi	r16, 0x2A	; 42
    488a:	26 e4       	ldi	r18, 0x46	; 70
    488c:	4b e0       	ldi	r20, 0x0B	; 11
    488e:	6d e1       	ldi	r22, 0x1D	; 29
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	91 e0       	ldi	r25, 0x01	; 1
    4894:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <fillrect>
			drawrect(buffer, 29,11, 70, 42, 1); 	// Outline
    4898:	ee 24       	eor	r14, r14
    489a:	e3 94       	inc	r14
    489c:	26 e4       	ldi	r18, 0x46	; 70
    489e:	4b e0       	ldi	r20, 0x0B	; 11
    48a0:	6d e1       	ldi	r22, 0x1D	; 29
    48a2:	80 e0       	ldi	r24, 0x00	; 0
    48a4:	91 e0       	ldi	r25, 0x01	; 1
    48a6:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <drawrect>

			// Display vibration data
			temp = (int16_t)GyroAvgNoise;
    48aa:	60 91 7d 09 	lds	r22, 0x097D
    48ae:	70 91 7e 09 	lds	r23, 0x097E
    48b2:	80 91 7f 09 	lds	r24, 0x097F
    48b6:	90 91 80 09 	lds	r25, 0x0980
    48ba:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    48be:	6b 01       	movw	r12, r22
    48c0:	7c 01       	movw	r14, r24
    48c2:	4a e0       	ldi	r20, 0x0A	; 10
    48c4:	62 ec       	ldi	r22, 0xC2	; 194
    48c6:	75 e0       	ldi	r23, 0x05	; 5
    48c8:	c6 01       	movw	r24, r12
    48ca:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
			
			// Work out pixel size of number to display
			mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana22, &size);
    48ce:	ae 01       	movw	r20, r28
    48d0:	4f 5f       	subi	r20, 0xFF	; 255
    48d2:	5f 4f       	sbci	r21, 0xFF	; 255
    48d4:	69 e6       	ldi	r22, 0x69	; 105
    48d6:	72 e0       	ldi	r23, 0x02	; 2
    48d8:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
			
			// Center the number in the box automatically
			mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana22,64 - (size.x / 2),20);
    48dc:	29 81       	ldd	r18, Y+1	; 0x01
    48de:	3a 81       	ldd	r19, Y+2	; 0x02
    48e0:	36 95       	lsr	r19
    48e2:	27 95       	ror	r18
    48e4:	00 e4       	ldi	r16, 0x40	; 64
    48e6:	10 e0       	ldi	r17, 0x00	; 0
    48e8:	02 1b       	sub	r16, r18
    48ea:	13 0b       	sbc	r17, r19
    48ec:	4a e0       	ldi	r20, 0x0A	; 10
    48ee:	62 ec       	ldi	r22, 0xC2	; 194
    48f0:	75 e0       	ldi	r23, 0x05	; 5
    48f2:	c6 01       	movw	r24, r12
    48f4:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    48f8:	24 e1       	ldi	r18, 0x14	; 20
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	a8 01       	movw	r20, r16
    48fe:	69 e6       	ldi	r22, 0x69	; 105
    4900:	72 e0       	ldi	r23, 0x02	; 2
    4902:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    4906:	53 c0       	rjmp	.+166    	; 0x49ae <Display_status+0x3de>
	
	// Display error messages
	else
	{
		// Prioritise error from top to bottom
		if(General_error & (1 << LVA_ALARM))
    4908:	80 91 35 05 	lds	r24, 0x0535
    490c:	83 ff       	sbrs	r24, 3
    490e:	13 c0       	rjmp	.+38     	; 0x4936 <Display_status+0x366>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    4910:	25 e2       	ldi	r18, 0x25	; 37
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	4f e0       	ldi	r20, 0x0F	; 15
    4916:	50 e0       	ldi	r21, 0x00	; 0
    4918:	6f ed       	ldi	r22, 0xDF	; 223
    491a:	74 e0       	ldi	r23, 0x04	; 4
    491c:	86 e8       	ldi	r24, 0x86	; 134
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    4924:	25 e2       	ldi	r18, 0x25	; 37
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	4f e4       	ldi	r20, 0x4F	; 79
    492a:	50 e0       	ldi	r21, 0x00	; 0
    492c:	6f ed       	ldi	r22, 0xDF	; 223
    492e:	74 e0       	ldi	r23, 0x04	; 4
    4930:	8f e0       	ldi	r24, 0x0F	; 15
    4932:	91 e0       	ldi	r25, 0x01	; 1
    4934:	3a c0       	rjmp	.+116    	; 0x49aa <Display_status+0x3da>
		}
		else if(General_error & (1 << NO_SIGNAL))
    4936:	80 91 35 05 	lds	r24, 0x0535
    493a:	81 ff       	sbrs	r24, 1
    493c:	13 c0       	rjmp	.+38     	; 0x4964 <Display_status+0x394>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    493e:	25 e2       	ldi	r18, 0x25	; 37
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	4e e1       	ldi	r20, 0x1E	; 30
    4944:	50 e0       	ldi	r21, 0x00	; 0
    4946:	6f ed       	ldi	r22, 0xDF	; 223
    4948:	74 e0       	ldi	r23, 0x04	; 4
    494a:	8b e4       	ldi	r24, 0x4B	; 75
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    4952:	25 e2       	ldi	r18, 0x25	; 37
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	47 e3       	ldi	r20, 0x37	; 55
    4958:	50 e0       	ldi	r21, 0x00	; 0
    495a:	6f ed       	ldi	r22, 0xDF	; 223
    495c:	74 e0       	ldi	r23, 0x04	; 4
    495e:	80 e1       	ldi	r24, 0x10	; 16
    4960:	91 e0       	ldi	r25, 0x01	; 1
    4962:	23 c0       	rjmp	.+70     	; 0x49aa <Display_status+0x3da>
		}
		else if(General_error & (1 << THROTTLE_HIGH))
    4964:	80 91 35 05 	lds	r24, 0x0535
    4968:	80 ff       	sbrs	r24, 0
    496a:	13 c0       	rjmp	.+38     	; 0x4992 <Display_status+0x3c2>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    496c:	25 e2       	ldi	r18, 0x25	; 37
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	4b e0       	ldi	r20, 0x0B	; 11
    4972:	50 e0       	ldi	r21, 0x00	; 0
    4974:	6f ed       	ldi	r22, 0xDF	; 223
    4976:	74 e0       	ldi	r23, 0x04	; 4
    4978:	89 e6       	ldi	r24, 0x69	; 105
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    4980:	25 e2       	ldi	r18, 0x25	; 37
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	42 e5       	ldi	r20, 0x52	; 82
    4986:	50 e0       	ldi	r21, 0x00	; 0
    4988:	6f ed       	ldi	r22, 0xDF	; 223
    498a:	74 e0       	ldi	r23, 0x04	; 4
    498c:	8e e0       	ldi	r24, 0x0E	; 14
    498e:	91 e0       	ldi	r25, 0x01	; 1
    4990:	0c c0       	rjmp	.+24     	; 0x49aa <Display_status+0x3da>
		}
		else if(General_error & (1 << DISARMED))
    4992:	80 91 35 05 	lds	r24, 0x0535
    4996:	82 ff       	sbrs	r24, 2
    4998:	0a c0       	rjmp	.+20     	; 0x49ae <Display_status+0x3de>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    499a:	25 e2       	ldi	r18, 0x25	; 37
    499c:	30 e0       	ldi	r19, 0x00	; 0
    499e:	49 e1       	ldi	r20, 0x19	; 25
    49a0:	50 e0       	ldi	r21, 0x00	; 0
    49a2:	6f ed       	ldi	r22, 0xDF	; 223
    49a4:	74 e0       	ldi	r23, 0x04	; 4
    49a6:	82 e1       	ldi	r24, 0x12	; 18
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	91 e0       	ldi	r25, 0x01	; 1
    49b2:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
	clear_buffer(buffer);
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	91 e0       	ldi	r25, 0x01	; 1
    49ba:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
}
    49be:	0f 90       	pop	r0
    49c0:	0f 90       	pop	r0
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	df 91       	pop	r29
    49c8:	cf 91       	pop	r28
    49ca:	1f 91       	pop	r17
    49cc:	0f 91       	pop	r16
    49ce:	ff 90       	pop	r15
    49d0:	ef 90       	pop	r14
    49d2:	df 90       	pop	r13
    49d4:	cf 90       	pop	r12
    49d6:	bf 90       	pop	r11
    49d8:	08 95       	ret

000049da <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    49da:	af 92       	push	r10
    49dc:	bf 92       	push	r11
    49de:	cf 92       	push	r12
    49e0:	df 92       	push	r13
    49e2:	ef 92       	push	r14
    49e4:	ff 92       	push	r15
    49e6:	0f 93       	push	r16
    49e8:	1f 93       	push	r17
    49ea:	cf 93       	push	r28
    49ec:	df 93       	push	r29
    49ee:	00 d0       	rcall	.+0      	; 0x49f0 <Display_sticks+0x16>
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    49f4:	b0 90 3b 08 	lds	r11, 0x083B
	temp_elevator = Config.ElevatorPol;
    49f8:	c0 90 dc 08 	lds	r12, 0x08DC
	temp_rudder = Config.RudderPol;
    49fc:	d0 90 3a 08 	lds	r13, 0x083A

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    4a00:	10 92 3b 08 	sts	0x083B, r1
	Config.ElevatorPol =  NORMAL;
    4a04:	10 92 dc 08 	sts	0x08DC, r1
	Config.RudderPol = NORMAL;
    4a08:	10 92 3a 08 	sts	0x083A, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    4a0c:	10 e0       	ldi	r17, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    4a0e:	a1 2c       	mov	r10, r1
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    4a10:	1f 9b       	sbis	0x03, 7	; 3
    4a12:	d9 c0       	rjmp	.+434    	; 0x4bc6 <Display_sticks+0x1ec>
    4a14:	a1 10       	cpse	r10, r1
    4a16:	d9 c0       	rjmp	.+434    	; 0x4bca <Display_sticks+0x1f0>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	91 e0       	ldi	r25, 0x01	; 1
    4a1c:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
    4a20:	32 e0       	ldi	r19, 0x02	; 2

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    4a22:	50 e0       	ldi	r21, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    4a24:	61 e1       	ldi	r22, 0x11	; 17
    4a26:	65 0f       	add	r22, r21
    4a28:	ee 24       	eor	r14, r14
    4a2a:	e3 94       	inc	r14
    4a2c:	08 e2       	ldi	r16, 0x28	; 40
    4a2e:	28 e2       	ldi	r18, 0x28	; 40
    4a30:	40 e0       	ldi	r20, 0x00	; 0
    4a32:	80 e0       	ldi	r24, 0x00	; 0
    4a34:	91 e0       	ldi	r25, 0x01	; 1
    4a36:	3a 83       	std	Y+2, r19	; 0x02
    4a38:	59 83       	std	Y+1, r21	; 0x01
    4a3a:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    4a3e:	59 81       	ldd	r21, Y+1	; 0x01
    4a40:	86 e2       	ldi	r24, 0x26	; 38
    4a42:	f8 2e       	mov	r15, r24
    4a44:	f5 0e       	add	r15, r21
    4a46:	20 e3       	ldi	r18, 0x30	; 48
    4a48:	25 0f       	add	r18, r21
    4a4a:	03 e0       	ldi	r16, 0x03	; 3
    4a4c:	44 e1       	ldi	r20, 0x14	; 20
    4a4e:	6f 2d       	mov	r22, r15
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	91 e0       	ldi	r25, 0x01	; 1
    4a54:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    4a58:	59 81       	ldd	r21, Y+1	; 0x01
    4a5a:	28 e3       	ldi	r18, 0x38	; 56
    4a5c:	25 0f       	add	r18, r21
    4a5e:	69 e2       	ldi	r22, 0x29	; 41
    4a60:	65 0f       	add	r22, r21
    4a62:	06 e0       	ldi	r16, 0x06	; 6
    4a64:	45 e1       	ldi	r20, 0x15	; 21
    4a66:	80 e0       	ldi	r24, 0x00	; 0
    4a68:	91 e0       	ldi	r25, 0x01	; 1
    4a6a:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    4a6e:	01 e0       	ldi	r16, 0x01	; 1
    4a70:	22 e0       	ldi	r18, 0x02	; 2
    4a72:	45 e1       	ldi	r20, 0x15	; 21
    4a74:	6f 2d       	mov	r22, r15
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	91 e0       	ldi	r25, 0x01	; 1
    4a7a:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    4a7e:	59 81       	ldd	r21, Y+1	; 0x01
    4a80:	63 e3       	ldi	r22, 0x33	; 51
    4a82:	65 0f       	add	r22, r21
    4a84:	24 e0       	ldi	r18, 0x04	; 4
    4a86:	45 e0       	ldi	r20, 0x05	; 5
    4a88:	80 e0       	ldi	r24, 0x00	; 0
    4a8a:	91 e0       	ldi	r25, 0x01	; 1
    4a8c:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <fillcircle>

			// Draw second stick on the right
			offset = 52;
    4a90:	54 e3       	ldi	r21, 0x34	; 52

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    4a92:	3a 81       	ldd	r19, Y+2	; 0x02
    4a94:	31 30       	cpi	r19, 0x01	; 1
    4a96:	11 f0       	breq	.+4      	; 0x4a9c <Display_sticks+0xc2>
    4a98:	31 e0       	ldi	r19, 0x01	; 1
    4a9a:	c4 cf       	rjmp	.-120    	; 0x4a24 <Display_sticks+0x4a>
			// Draw second stick on the right
			offset = 52;
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    4a9c:	29 e3       	ldi	r18, 0x39	; 57
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	40 e0       	ldi	r20, 0x00	; 0
    4aa2:	50 e0       	ldi	r21, 0x00	; 0
    4aa4:	6f ef       	ldi	r22, 0xFF	; 255
    4aa6:	71 e0       	ldi	r23, 0x01	; 1
    4aa8:	8c e0       	ldi	r24, 0x0C	; 12
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    4ab0:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    4ab4:	80 91 85 09 	lds	r24, 0x0985
    4ab8:	90 91 86 09 	lds	r25, 0x0986
    4abc:	80 33       	cpi	r24, 0x30	; 48
    4abe:	98 4f       	sbci	r25, 0xF8	; 248
    4ac0:	3c f0       	brlt	.+14     	; 0x4ad0 <Display_sticks+0xf6>
    4ac2:	80 91 85 09 	lds	r24, 0x0985
    4ac6:	90 91 86 09 	lds	r25, 0x0986
    4aca:	81 3d       	cpi	r24, 0xD1	; 209
    4acc:	97 40       	sbci	r25, 0x07	; 7
    4ace:	6c f0       	brlt	.+26     	; 0x4aea <Display_sticks+0x110>
    4ad0:	11 11       	cpse	r17, r1
    4ad2:	0b c0       	rjmp	.+22     	; 0x4aea <Display_sticks+0x110>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    4ad4:	2b e2       	ldi	r18, 0x2B	; 43
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	40 e1       	ldi	r20, 0x10	; 16
    4ada:	50 e0       	ldi	r21, 0x00	; 0
    4adc:	6f ed       	ldi	r22, 0xDF	; 223
    4ade:	74 e0       	ldi	r23, 0x04	; 4
    4ae0:	87 e8       	ldi	r24, 0x87	; 135
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
    4ae8:	69 c0       	rjmp	.+210    	; 0x4bbc <Display_sticks+0x1e2>
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    4aea:	80 91 85 09 	lds	r24, 0x0985
    4aee:	90 91 86 09 	lds	r25, 0x0986
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
    4af2:	84 3f       	cpi	r24, 0xF4	; 244
    4af4:	91 40       	sbci	r25, 0x01	; 1
    4af6:	3c f4       	brge	.+14     	; 0x4b06 <Display_sticks+0x12c>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    4af8:	80 91 85 09 	lds	r24, 0x0985
    4afc:	90 91 86 09 	lds	r25, 0x0986
    4b00:	8d 30       	cpi	r24, 0x0D	; 13
    4b02:	9e 4f       	sbci	r25, 0xFE	; 254
    4b04:	e4 f4       	brge	.+56     	; 0x4b3e <Display_sticks+0x164>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    4b06:	80 91 87 09 	lds	r24, 0x0987
    4b0a:	90 91 88 09 	lds	r25, 0x0988
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    4b0e:	84 3f       	cpi	r24, 0xF4	; 244
    4b10:	91 40       	sbci	r25, 0x01	; 1
    4b12:	3c f4       	brge	.+14     	; 0x4b22 <Display_sticks+0x148>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    4b14:	80 91 87 09 	lds	r24, 0x0987
    4b18:	90 91 88 09 	lds	r25, 0x0988
    4b1c:	8d 30       	cpi	r24, 0x0D	; 13
    4b1e:	9e 4f       	sbci	r25, 0xFE	; 254
    4b20:	74 f4       	brge	.+28     	; 0x4b3e <Display_sticks+0x164>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    4b22:	80 91 89 09 	lds	r24, 0x0989
    4b26:	90 91 8a 09 	lds	r25, 0x098A
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    4b2a:	84 3f       	cpi	r24, 0xF4	; 244
    4b2c:	91 40       	sbci	r25, 0x01	; 1
    4b2e:	9c f4       	brge	.+38     	; 0x4b56 <Display_sticks+0x17c>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    4b30:	80 91 89 09 	lds	r24, 0x0989
    4b34:	90 91 8a 09 	lds	r25, 0x098A
    4b38:	8d 30       	cpi	r24, 0x0D	; 13
    4b3a:	9e 4f       	sbci	r25, 0xFE	; 254
    4b3c:	64 f0       	brlt	.+24     	; 0x4b56 <Display_sticks+0x17c>
					)
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    4b3e:	2b e2       	ldi	r18, 0x2B	; 43
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	49 e0       	ldi	r20, 0x09	; 9
    4b44:	50 e0       	ldi	r21, 0x00	; 0
    4b46:	6f ed       	ldi	r22, 0xDF	; 223
    4b48:	74 e0       	ldi	r23, 0x04	; 4
    4b4a:	88 e8       	ldi	r24, 0x88	; 136
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
					)
			{
				CalibrateStarted = true;
    4b52:	11 e0       	ldi	r17, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    4b54:	33 c0       	rjmp	.+102    	; 0x4bbc <Display_sticks+0x1e2>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    4b56:	80 91 85 09 	lds	r24, 0x0985
    4b5a:	90 91 86 09 	lds	r25, 0x0986
    4b5e:	97 ff       	sbrs	r25, 7
    4b60:	03 c0       	rjmp	.+6      	; 0x4b68 <Display_sticks+0x18e>
				{
					Config.AileronPol = REVERSED;
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	80 93 3b 08 	sts	0x083B, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    4b68:	80 91 87 09 	lds	r24, 0x0987
    4b6c:	90 91 88 09 	lds	r25, 0x0988
    4b70:	97 ff       	sbrs	r25, 7
    4b72:	03 c0       	rjmp	.+6      	; 0x4b7a <Display_sticks+0x1a0>
				{
					Config.ElevatorPol = REVERSED;
    4b74:	81 e0       	ldi	r24, 0x01	; 1
    4b76:	80 93 dc 08 	sts	0x08DC, r24
				}

				if (RCinputs[RUDDER] < 0)
    4b7a:	80 91 89 09 	lds	r24, 0x0989
    4b7e:	90 91 8a 09 	lds	r25, 0x098A
    4b82:	97 ff       	sbrs	r25, 7
    4b84:	03 c0       	rjmp	.+6      	; 0x4b8c <Display_sticks+0x1b2>
				{
					Config.RudderPol = REVERSED;
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	80 93 3a 08 	sts	0x083A, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    4b8c:	80 91 85 09 	lds	r24, 0x0985
    4b90:	90 91 86 09 	lds	r25, 0x0986
    4b94:	18 16       	cp	r1, r24
    4b96:	19 06       	cpc	r1, r25
    4b98:	8c f4       	brge	.+34     	; 0x4bbc <Display_sticks+0x1e2>
    4b9a:	80 91 87 09 	lds	r24, 0x0987
    4b9e:	90 91 88 09 	lds	r25, 0x0988
    4ba2:	18 16       	cp	r1, r24
    4ba4:	19 06       	cpc	r1, r25
    4ba6:	54 f4       	brge	.+20     	; 0x4bbc <Display_sticks+0x1e2>
    4ba8:	80 91 89 09 	lds	r24, 0x0989
    4bac:	90 91 8a 09 	lds	r25, 0x098A
    4bb0:	aa 24       	eor	r10, r10
    4bb2:	a3 94       	inc	r10
    4bb4:	18 16       	cp	r1, r24
    4bb6:	19 06       	cpc	r1, r25
    4bb8:	0c f0       	brlt	.+2      	; 0x4bbc <Display_sticks+0x1e2>
    4bba:	a1 2c       	mov	r10, r1
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	91 e0       	ldi	r25, 0x01	; 1
    4bc0:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
    4bc4:	25 cf       	rjmp	.-438    	; 0x4a10 <Display_sticks+0x36>
	}

	// Save value and return
	if (CalibrateDone)
    4bc6:	aa 20       	and	r10, r10
    4bc8:	49 f1       	breq	.+82     	; 0x4c1c <Display_sticks+0x242>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    4bca:	2b e2       	ldi	r18, 0x2B	; 43
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	48 e2       	ldi	r20, 0x28	; 40
    4bd0:	50 e0       	ldi	r21, 0x00	; 0
    4bd2:	6f ed       	ldi	r22, 0xDF	; 223
    4bd4:	74 e0       	ldi	r23, 0x04	; 4
    4bd6:	89 e8       	ldi	r24, 0x89	; 137
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    4bde:	80 e0       	ldi	r24, 0x00	; 0
    4be0:	91 e0       	ldi	r25, 0x01	; 1
    4be2:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
		clear_buffer(buffer);
    4be6:	80 e0       	ldi	r24, 0x00	; 0
    4be8:	91 e0       	ldi	r25, 0x01	; 1
    4bea:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
    4bee:	8f e7       	ldi	r24, 0x7F	; 127
    4bf0:	94 e8       	ldi	r25, 0x84	; 132
    4bf2:	2e e1       	ldi	r18, 0x1E	; 30
    4bf4:	81 50       	subi	r24, 0x01	; 1
    4bf6:	90 40       	sbci	r25, 0x00	; 0
    4bf8:	20 40       	sbci	r18, 0x00	; 0
    4bfa:	e1 f7       	brne	.-8      	; 0x4bf4 <Display_sticks+0x21a>
    4bfc:	00 c0       	rjmp	.+0      	; 0x4bfe <Display_sticks+0x224>
    4bfe:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    4c00:	0f 90       	pop	r0
    4c02:	0f 90       	pop	r0
    4c04:	df 91       	pop	r29
    4c06:	cf 91       	pop	r28
    4c08:	1f 91       	pop	r17
    4c0a:	0f 91       	pop	r16
    4c0c:	ff 90       	pop	r15
    4c0e:	ef 90       	pop	r14
    4c10:	df 90       	pop	r13
    4c12:	cf 90       	pop	r12
    4c14:	bf 90       	pop	r11
    4c16:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    4c18:	0c 94 5a 26 	jmp	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    4c1c:	b0 92 3b 08 	sts	0x083B, r11
		Config.ElevatorPol = temp_elevator;
    4c20:	c0 92 dc 08 	sts	0x08DC, r12
		Config.RudderPol = temp_rudder;
    4c24:	d0 92 3a 08 	sts	0x083A, r13
	}
}
    4c28:	0f 90       	pop	r0
    4c2a:	0f 90       	pop	r0
    4c2c:	df 91       	pop	r29
    4c2e:	cf 91       	pop	r28
    4c30:	1f 91       	pop	r17
    4c32:	0f 91       	pop	r16
    4c34:	ff 90       	pop	r15
    4c36:	ef 90       	pop	r14
    4c38:	df 90       	pop	r13
    4c3a:	cf 90       	pop	r12
    4c3c:	bf 90       	pop	r11
    4c3e:	af 90       	pop	r10
    4c40:	08 95       	ret

00004c42 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    4c42:	0f 93       	push	r16
    4c44:	1f 93       	push	r17
    4c46:	cf 93       	push	r28
    4c48:	df 93       	push	r29
    4c4a:	1f 92       	push	r1
    4c4c:	cd b7       	in	r28, 0x3d	; 61
    4c4e:	de b7       	in	r29, 0x3e	; 62
    4c50:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    4c52:	69 83       	std	Y+1, r22	; 0x01
    4c54:	0e 94 21 70 	call	0xe042	; 0xe042 <eeprom_read_byte>
    4c58:	69 81       	ldd	r22, Y+1	; 0x01
    4c5a:	86 17       	cp	r24, r22
    4c5c:	41 f0       	breq	.+16     	; 0x4c6e <eeprom_write_byte_changed+0x2c>
	{
		eeprom_write_byte(addr, value);
    4c5e:	c8 01       	movw	r24, r16
	}
}
    4c60:	0f 90       	pop	r0
    4c62:	df 91       	pop	r29
    4c64:	cf 91       	pop	r28
    4c66:	1f 91       	pop	r17
    4c68:	0f 91       	pop	r16
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		eeprom_write_byte(addr, value);
    4c6a:	0c 94 29 70 	jmp	0xe052	; 0xe052 <eeprom_write_byte>
	}
}
    4c6e:	0f 90       	pop	r0
    4c70:	df 91       	pop	r29
    4c72:	cf 91       	pop	r28
    4c74:	1f 91       	pop	r17
    4c76:	0f 91       	pop	r16
    4c78:	08 95       	ret

00004c7a <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    4c7a:	ef 92       	push	r14
    4c7c:	ff 92       	push	r15
    4c7e:	0f 93       	push	r16
    4c80:	1f 93       	push	r17
    4c82:	cf 93       	push	r28
    4c84:	df 93       	push	r29
    4c86:	ec 01       	movw	r28, r24
    4c88:	7b 01       	movw	r14, r22
    4c8a:	8c 01       	movw	r16, r24
    4c8c:	04 0f       	add	r16, r20
    4c8e:	15 1f       	adc	r17, r21
	uint16_t len;
	uint8_t value;

	for (len = 0; len < size; len++)
    4c90:	c0 17       	cp	r28, r16
    4c92:	d1 07       	cpc	r29, r17
    4c94:	41 f0       	breq	.+16     	; 0x4ca6 <eeprom_write_block_changes+0x2c>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    4c96:	69 91       	ld	r22, Y+
    4c98:	c7 01       	movw	r24, r14
    4c9a:	0e 94 21 26 	call	0x4c42	; 0x4c42 <eeprom_write_byte_changed>
		src++;
		dest++;
    4c9e:	8f ef       	ldi	r24, 0xFF	; 255
    4ca0:	e8 1a       	sub	r14, r24
    4ca2:	f8 0a       	sbc	r15, r24
    4ca4:	f5 cf       	rjmp	.-22     	; 0x4c90 <eeprom_write_block_changes+0x16>
	}
}
    4ca6:	df 91       	pop	r29
    4ca8:	cf 91       	pop	r28
    4caa:	1f 91       	pop	r17
    4cac:	0f 91       	pop	r16
    4cae:	ff 90       	pop	r15
    4cb0:	ef 90       	pop	r14
    4cb2:	08 95       	ret

00004cb4 <Save_Config_to_EEPROM>:
const int8_t	MPX[MAX_RC_CHANNELS] PROGMEM	= {1,2,3,5,0,4,6,7}; 	// Multiplex channel sequence (AER1TG23)
	
void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    4cb4:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    4cb6:	44 ea       	ldi	r20, 0xA4	; 164
    4cb8:	52 e0       	ldi	r21, 0x02	; 2
    4cba:	60 e0       	ldi	r22, 0x00	; 0
    4cbc:	70 e0       	ldi	r23, 0x00	; 0
    4cbe:	89 e3       	ldi	r24, 0x39	; 57
    4cc0:	96 e0       	ldi	r25, 0x06	; 6
    4cc2:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <eeprom_write_block_changes>
	sei();
    4cc6:	78 94       	sei
    4cc8:	08 95       	ret

00004cca <Update_V1_0_to_V1_1>:
//************************************************************
// Config data restructure code
//************************************************************
// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    4cca:	2f 92       	push	r2
    4ccc:	3f 92       	push	r3
    4cce:	4f 92       	push	r4
    4cd0:	5f 92       	push	r5
    4cd2:	6f 92       	push	r6
    4cd4:	7f 92       	push	r7
    4cd6:	8f 92       	push	r8
    4cd8:	9f 92       	push	r9
    4cda:	af 92       	push	r10
    4cdc:	bf 92       	push	r11
    4cde:	cf 92       	push	r12
    4ce0:	df 92       	push	r13
    4ce2:	ef 92       	push	r14
    4ce4:	ff 92       	push	r15
    4ce6:	0f 93       	push	r16
    4ce8:	1f 93       	push	r17
    4cea:	cf 93       	push	r28
    4cec:	df 93       	push	r29
    4cee:	cd b7       	in	r28, 0x3d	; 61
    4cf0:	de b7       	in	r29, 0x3e	; 62
    4cf2:	c3 55       	subi	r28, 0x53	; 83
    4cf4:	d1 40       	sbci	r29, 0x01	; 1
    4cf6:	0f b6       	in	r0, 0x3f	; 63
    4cf8:	f8 94       	cli
    4cfa:	de bf       	out	0x3e, r29	; 62
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	cd bf       	out	0x3d, r28	; 61

	int8_t		buffer[12];
	int8_t		temp = 0;
	
	// RC items
	memcpy((void*)&buffer[0],(void*)((&Config.setup) + (RCITEMS_V1_0)),1);		// RxMode
    4d00:	80 91 62 06 	lds	r24, 0x0662
    4d04:	cf 5c       	subi	r28, 0xCF	; 207
    4d06:	de 4f       	sbci	r29, 0xFE	; 254
    4d08:	88 83       	st	Y, r24
    4d0a:	c1 53       	subi	r28, 0x31	; 49
    4d0c:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[1],(void*)((&Config.setup) + (GENITEMS_V1_0 + 5)),1);	// Servo_rate
    4d0e:	80 91 c6 06 	lds	r24, 0x06C6
    4d12:	ce 5c       	subi	r28, 0xCE	; 206
    4d14:	de 4f       	sbci	r29, 0xFE	; 254
    4d16:	88 83       	st	Y, r24
    4d18:	c2 53       	subi	r28, 0x32	; 50
    4d1a:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[2],(void*)((&Config.setup) + (RCITEMS_V1_0 + 1)),1);	// PWM_Sync
    4d1c:	80 91 63 06 	lds	r24, 0x0663
    4d20:	cd 5c       	subi	r28, 0xCD	; 205
    4d22:	de 4f       	sbci	r29, 0xFE	; 254
    4d24:	88 83       	st	Y, r24
    4d26:	c3 53       	subi	r28, 0x33	; 51
    4d28:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[3],(void*)((&Config.setup) + (RCITEMS_V1_0 + 2)),1);	// TxSeq
    4d2a:	80 91 64 06 	lds	r24, 0x0664
    4d2e:	cc 5c       	subi	r28, 0xCC	; 204
    4d30:	de 4f       	sbci	r29, 0xFE	; 254
    4d32:	88 83       	st	Y, r24
    4d34:	c4 53       	subi	r28, 0x34	; 52
    4d36:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[4],(void*)((&Config.setup) + (RCITEMS_V1_0 + 3)),1);	// FlightChan
    4d38:	80 91 65 06 	lds	r24, 0x0665
    4d3c:	cb 5c       	subi	r28, 0xCB	; 203
    4d3e:	de 4f       	sbci	r29, 0xFE	; 254
    4d40:	88 83       	st	Y, r24
    4d42:	c5 53       	subi	r28, 0x35	; 53
    4d44:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[5],(void*)((&Config.setup) + (RCITEMS_V1_0 + 7)),1);	// TransitionSpeed
    4d46:	90 91 69 06 	lds	r25, 0x0669
    4d4a:	ca 5c       	subi	r28, 0xCA	; 202
    4d4c:	de 4f       	sbci	r29, 0xFE	; 254
    4d4e:	98 83       	st	Y, r25
    4d50:	c6 53       	subi	r28, 0x36	; 54
    4d52:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[6],(void*)((&Config.setup) + (RCITEMS_V1_0 + 8)),1);	// Transition_P1n
    4d54:	90 91 6a 06 	lds	r25, 0x066A
    4d58:	c9 5c       	subi	r28, 0xC9	; 201
    4d5a:	de 4f       	sbci	r29, 0xFE	; 254
    4d5c:	98 83       	st	Y, r25
    4d5e:	c7 53       	subi	r28, 0x37	; 55
    4d60:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[7],(void*)((&Config.setup) + (RCITEMS_V1_0 + 4)),1);	// AileronPol
    4d62:	90 91 66 06 	lds	r25, 0x0666
    4d66:	c8 5c       	subi	r28, 0xC8	; 200
    4d68:	de 4f       	sbci	r29, 0xFE	; 254
    4d6a:	98 83       	st	Y, r25
    4d6c:	c8 53       	subi	r28, 0x38	; 56
    4d6e:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[8],(void*)((&Config.setup) + (RCITEMS_V1_0 + 5)),1);	// ElevatorPol
    4d70:	90 91 67 06 	lds	r25, 0x0667
    4d74:	c7 5c       	subi	r28, 0xC7	; 199
    4d76:	de 4f       	sbci	r29, 0xFE	; 254
    4d78:	98 83       	st	Y, r25
    4d7a:	c9 53       	subi	r28, 0x39	; 57
    4d7c:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[9],(void*)((&Config.setup) + (RCITEMS_V1_0 + 6)),1);	// RudderPol
    4d7e:	20 90 68 06 	lds	r2, 0x0668
    4d82:	c6 5c       	subi	r28, 0xC6	; 198
    4d84:	de 4f       	sbci	r29, 0xFE	; 254
    4d86:	28 82       	st	Y, r2
    4d88:	ca 53       	subi	r28, 0x3A	; 58
    4d8a:	d1 40       	sbci	r29, 0x01	; 1
	
	// Copy back to new RC items structure
	memcpy((void*)((&Config.setup) + (RCITEMS_V1_0)), &buffer, 9);				// RxMode to ElevatorPol (9 items)
    4d8c:	99 e0       	ldi	r25, 0x09	; 9
    4d8e:	fe 01       	movw	r30, r28
    4d90:	ef 5c       	subi	r30, 0xCF	; 207
    4d92:	fe 4f       	sbci	r31, 0xFE	; 254
    4d94:	a2 e6       	ldi	r26, 0x62	; 98
    4d96:	b6 e0       	ldi	r27, 0x06	; 6
    4d98:	01 90       	ld	r0, Z+
    4d9a:	0d 92       	st	X+, r0
    4d9c:	9a 95       	dec	r25
    4d9e:	e1 f7       	brne	.-8      	; 0x4d98 <Update_V1_0_to_V1_1+0xce>
		
	// New General items - MPU6050LPF to AL correct (4 items)
	memcpy((void*)&buffer[0],(void*)((&Config.setup) + (GENITEMS_V1_0 + 9)),1);	// MPU6050LPF
    4da0:	90 91 ca 06 	lds	r25, 0x06CA
    4da4:	cf 5c       	subi	r28, 0xCF	; 207
    4da6:	de 4f       	sbci	r29, 0xFE	; 254
    4da8:	98 83       	st	Y, r25
    4daa:	c1 53       	subi	r28, 0x31	; 49
    4dac:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[1],(void*)((&Config.setup) + (GENITEMS_V1_0 + 6)),1);	// AccLPF
    4dae:	90 91 c7 06 	lds	r25, 0x06C7
    4db2:	cf 5a       	subi	r28, 0xAF	; 175
    4db4:	de 4f       	sbci	r29, 0xFE	; 254
    4db6:	98 83       	st	Y, r25
    4db8:	c1 55       	subi	r28, 0x51	; 81
    4dba:	d1 40       	sbci	r29, 0x01	; 1
    4dbc:	ce 5c       	subi	r28, 0xCE	; 206
    4dbe:	de 4f       	sbci	r29, 0xFE	; 254
    4dc0:	98 83       	st	Y, r25
    4dc2:	c2 53       	subi	r28, 0x32	; 50
    4dc4:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[2],(void*)((&Config.setup) + (GENITEMS_V1_0 + 7)),1);	// GyroLPF
    4dc6:	e0 91 c8 06 	lds	r30, 0x06C8
    4dca:	ce 5a       	subi	r28, 0xAE	; 174
    4dcc:	de 4f       	sbci	r29, 0xFE	; 254
    4dce:	e8 83       	st	Y, r30
    4dd0:	c2 55       	subi	r28, 0x52	; 82
    4dd2:	d1 40       	sbci	r29, 0x01	; 1
    4dd4:	cd 5c       	subi	r28, 0xCD	; 205
    4dd6:	de 4f       	sbci	r29, 0xFE	; 254
    4dd8:	e8 83       	st	Y, r30
    4dda:	c3 53       	subi	r28, 0x33	; 51
    4ddc:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[3],(void*)((&Config.setup) + (GENITEMS_V1_0 + 8)),1);	// AL correct
    4dde:	90 91 c9 06 	lds	r25, 0x06C9
    4de2:	cc 5c       	subi	r28, 0xCC	; 204
    4de4:	de 4f       	sbci	r29, 0xFE	; 254
    4de6:	98 83       	st	Y, r25
    4de8:	c4 53       	subi	r28, 0x34	; 52
    4dea:	d1 40       	sbci	r29, 0x01	; 1
	
	// Copy back to new General items structure
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 + 5)), &buffer, 4);
    4dec:	cf 5c       	subi	r28, 0xCF	; 207
    4dee:	de 4f       	sbci	r29, 0xFE	; 254
    4df0:	48 81       	ld	r20, Y
    4df2:	59 81       	ldd	r21, Y+1	; 0x01
    4df4:	6a 81       	ldd	r22, Y+2	; 0x02
    4df6:	7b 81       	ldd	r23, Y+3	; 0x03
    4df8:	c1 53       	subi	r28, 0x31	; 49
    4dfa:	d1 40       	sbci	r29, 0x01	; 1
    4dfc:	40 93 c6 06 	sts	0x06C6, r20
    4e00:	50 93 c7 06 	sts	0x06C7, r21
    4e04:	60 93 c8 06 	sts	0x06C8, r22
    4e08:	70 93 c9 06 	sts	0x06C9, r23
	
	// "None" no longer an option for this channel, so set to AUX3
	memcpy((void*)&temp,(void*)((&Config.setup) + (RCITEMS_V1_0 + 4)),1);		// FlightChan

	if (temp == NOCHAN)
    4e0c:	88 30       	cpi	r24, 0x08	; 8
    4e0e:	19 f4       	brne	.+6      	; 0x4e16 <Update_V1_0_to_V1_1+0x14c>
	{
		temp = AUX3;
		memcpy((void*)((&Config.setup) + (RCITEMS_V1_0 + 4)), &temp, 1);
    4e10:	87 e0       	ldi	r24, 0x07	; 7
    4e12:	80 93 66 06 	sts	0x0666, r24
	}

	// Set mixer preset to default
	memset((void*)((&Config.setup) + (GENITEMS_V1_0 + 9)), QUADX, 1);			// Preset
    4e16:	10 92 ca 06 	sts	0x06CA, r1
	
	// Move data that exists after the channel mixer to new location
	memmove((void*)((&Config.setup) + (SERVOREV_V1_1)), (void*)((&Config.setup) + (SERVOREV_V1_0)), 72); // (New channel_t size - old size = 72)
    4e1a:	48 e4       	ldi	r20, 0x48	; 72
    4e1c:	50 e0       	ldi	r21, 0x00	; 0
    4e1e:	63 eb       	ldi	r22, 0xB3	; 179
    4e20:	77 e0       	ldi	r23, 0x07	; 7
    4e22:	8b ef       	ldi	r24, 0xFB	; 251
    4e24:	97 e0       	ldi	r25, 0x07	; 7
    4e26:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>
    4e2a:	9e 01       	movw	r18, r28
    4e2c:	2f 5f       	subi	r18, 0xFF	; 255
    4e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e30:	80 e0       	ldi	r24, 0x00	; 0
    4e32:	90 e0       	ldi	r25, 0x00	; 0
	{
		src = (void*)((&Config.setup) + (CHANNEL_V1_0));
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    4e34:	4d e1       	ldi	r20, 0x1D	; 29
    4e36:	fc 01       	movw	r30, r24
    4e38:	e5 53       	subi	r30, 0x35	; 53
    4e3a:	f9 4f       	sbci	r31, 0xF9	; 249
    4e3c:	d9 01       	movw	r26, r18
    4e3e:	54 2f       	mov	r21, r20
    4e40:	01 90       	ld	r0, Z+
    4e42:	0d 92       	st	X+, r0
    4e44:	5a 95       	dec	r21
    4e46:	e1 f7       	brne	.-8      	; 0x4e40 <Update_V1_0_to_V1_1+0x176>
    4e48:	2a 5d       	subi	r18, 0xDA	; 218
    4e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4c:	4d 96       	adiw	r24, 0x1d	; 29
	
	// Move data that exists after the channel mixer to new location
	memmove((void*)((&Config.setup) + (SERVOREV_V1_1)), (void*)((&Config.setup) + (SERVOREV_V1_0)), 72); // (New channel_t size - old size = 72)
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    4e4e:	88 3e       	cpi	r24, 0xE8	; 232
    4e50:	91 05       	cpc	r25, r1
    4e52:	89 f7       	brne	.-30     	; 0x4e36 <Update_V1_0_to_V1_1+0x16c>
    4e54:	4e 01       	movw	r8, r28
    4e56:	f5 e0       	ldi	r31, 0x05	; 5
    4e58:	8f 0e       	add	r8, r31
    4e5a:	91 1c       	adc	r9, r1
    4e5c:	ce 01       	movw	r24, r28
    4e5e:	43 96       	adiw	r24, 0x13	; 19
    4e60:	c1 5c       	subi	r28, 0xC1	; 193
    4e62:	de 4f       	sbci	r29, 0xFE	; 254
    4e64:	99 83       	std	Y+1, r25	; 0x01
    4e66:	88 83       	st	Y, r24
    4e68:	cf 53       	subi	r28, 0x3F	; 63
    4e6a:	d1 40       	sbci	r29, 0x01	; 1
    4e6c:	fe 01       	movw	r30, r28
    4e6e:	74 96       	adiw	r30, 0x14	; 20
    4e70:	cd 5b       	subi	r28, 0xBD	; 189
    4e72:	de 4f       	sbci	r29, 0xFE	; 254
    4e74:	f9 83       	std	Y+1, r31	; 0x01
    4e76:	e8 83       	st	Y, r30
    4e78:	c3 54       	subi	r28, 0x43	; 67
    4e7a:	d1 40       	sbci	r29, 0x01	; 1
    4e7c:	02 96       	adiw	r24, 0x02	; 2
    4e7e:	cf 5b       	subi	r28, 0xBF	; 191
    4e80:	de 4f       	sbci	r29, 0xFE	; 254
    4e82:	99 83       	std	Y+1, r25	; 0x01
    4e84:	88 83       	st	Y, r24
    4e86:	c1 54       	subi	r28, 0x41	; 65
    4e88:	d1 40       	sbci	r29, 0x01	; 1
    4e8a:	6e 01       	movw	r12, r28
    4e8c:	96 e1       	ldi	r25, 0x16	; 22
    4e8e:	c9 0e       	add	r12, r25
    4e90:	d1 1c       	adc	r13, r1
    4e92:	7e 01       	movw	r14, r28
    4e94:	ee e1       	ldi	r30, 0x1E	; 30
    4e96:	ee 0e       	add	r14, r30
    4e98:	f1 1c       	adc	r15, r1
    4e9a:	ce 01       	movw	r24, r28
    4e9c:	4d 96       	adiw	r24, 0x1d	; 29
    4e9e:	c5 5b       	subi	r28, 0xB5	; 181
    4ea0:	de 4f       	sbci	r29, 0xFE	; 254
    4ea2:	99 83       	std	Y+1, r25	; 0x01
    4ea4:	88 83       	st	Y, r24
    4ea6:	cb 54       	subi	r28, 0x4B	; 75
    4ea8:	d1 40       	sbci	r29, 0x01	; 1
    4eaa:	fe 01       	movw	r30, r28
    4eac:	7c 96       	adiw	r30, 0x1c	; 28
    4eae:	c7 5b       	subi	r28, 0xB7	; 183
    4eb0:	de 4f       	sbci	r29, 0xFE	; 254
    4eb2:	f9 83       	std	Y+1, r31	; 0x01
    4eb4:	e8 83       	st	Y, r30
    4eb6:	c9 54       	subi	r28, 0x49	; 73
    4eb8:	d1 40       	sbci	r29, 0x01	; 1
    4eba:	02 97       	sbiw	r24, 0x02	; 2
    4ebc:	c9 5b       	subi	r28, 0xB9	; 185
    4ebe:	de 4f       	sbci	r29, 0xFE	; 254
    4ec0:	99 83       	std	Y+1, r25	; 0x01
    4ec2:	88 83       	st	Y, r24
    4ec4:	c7 54       	subi	r28, 0x47	; 71
    4ec6:	d1 40       	sbci	r29, 0x01	; 1
    4ec8:	32 97       	sbiw	r30, 0x02	; 2
    4eca:	cb 5b       	subi	r28, 0xBB	; 187
    4ecc:	de 4f       	sbci	r29, 0xFE	; 254
    4ece:	f9 83       	std	Y+1, r31	; 0x01
    4ed0:	e8 83       	st	Y, r30
    4ed2:	c5 54       	subi	r28, 0x45	; 69
    4ed4:	d1 40       	sbci	r29, 0x01	; 1
    4ed6:	02 97       	sbiw	r24, 0x02	; 2
    4ed8:	c1 5b       	subi	r28, 0xB1	; 177
    4eda:	de 4f       	sbci	r29, 0xFE	; 254
    4edc:	99 83       	std	Y+1, r25	; 0x01
    4ede:	88 83       	st	Y, r24
    4ee0:	cf 54       	subi	r28, 0x4F	; 79
    4ee2:	d1 40       	sbci	r29, 0x01	; 1
    4ee4:	32 97       	sbiw	r30, 0x02	; 2
    4ee6:	c3 5b       	subi	r28, 0xB3	; 179
    4ee8:	de 4f       	sbci	r29, 0xFE	; 254
    4eea:	f9 83       	std	Y+1, r31	; 0x01
    4eec:	e8 83       	st	Y, r30
    4eee:	cd 54       	subi	r28, 0x4D	; 77
    4ef0:	d1 40       	sbci	r29, 0x01	; 1
    4ef2:	5e 01       	movw	r10, r28
    4ef4:	f7 e1       	ldi	r31, 0x17	; 23
    4ef6:	af 0e       	add	r10, r31
    4ef8:	b1 1c       	adc	r11, r1
    4efa:	8b 5c       	subi	r24, 0xCB	; 203
    4efc:	9e 4f       	sbci	r25, 0xFE	; 254
    4efe:	c3 5c       	subi	r28, 0xC3	; 195
    4f00:	de 4f       	sbci	r29, 0xFE	; 254
    4f02:	99 83       	std	Y+1, r25	; 0x01
    4f04:	88 83       	st	Y, r24
    4f06:	cd 53       	subi	r28, 0x3D	; 61
    4f08:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    4f0a:	12 e0       	ldi	r17, 0x02	; 2
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    4f0c:	01 e0       	ldi	r16, 0x01	; 1
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    4f0e:	49 e1       	ldi	r20, 0x19	; 25
    4f10:	50 e0       	ldi	r21, 0x00	; 0
    4f12:	b4 01       	movw	r22, r8
    4f14:	c7 01       	movw	r24, r14
    4f16:	48 97       	sbiw	r24, 0x18	; 24
    4f18:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    4f1c:	c1 5c       	subi	r28, 0xC1	; 193
    4f1e:	de 4f       	sbci	r29, 0xFE	; 254
    4f20:	e8 81       	ld	r30, Y
    4f22:	f9 81       	ldd	r31, Y+1	; 0x01
    4f24:	cf 53       	subi	r28, 0x3F	; 63
    4f26:	d1 40       	sbci	r29, 0x01	; 1
    4f28:	50 80       	ld	r5, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    4f2a:	cd 5b       	subi	r28, 0xBD	; 189
    4f2c:	de 4f       	sbci	r29, 0xFE	; 254
    4f2e:	e8 81       	ld	r30, Y
    4f30:	f9 81       	ldd	r31, Y+1	; 0x01
    4f32:	c3 54       	subi	r28, 0x43	; 67
    4f34:	d1 40       	sbci	r29, 0x01	; 1
    4f36:	30 80       	ld	r3, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    4f38:	cf 5b       	subi	r28, 0xBF	; 191
    4f3a:	de 4f       	sbci	r29, 0xFE	; 254
    4f3c:	e8 81       	ld	r30, Y
    4f3e:	f9 81       	ldd	r31, Y+1	; 0x01
    4f40:	c1 54       	subi	r28, 0x41	; 65
    4f42:	d1 40       	sbci	r29, 0x01	; 1
    4f44:	20 81       	ld	r18, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    4f46:	f6 01       	movw	r30, r12
    4f48:	40 80       	ld	r4, Z
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    4f4a:	f4 01       	movw	r30, r8
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
    4f4c:	56 fe       	sbrs	r5, 6
    4f4e:	02 c0       	rjmp	.+4      	; 0x4f54 <Update_V1_0_to_V1_1+0x28a>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    4f50:	10 83       	st	Z, r17
    4f52:	01 c0       	rjmp	.+2      	; 0x4f56 <Update_V1_0_to_V1_1+0x28c>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    4f54:	10 82       	st	Z, r1
    4f56:	37 01       	movw	r6, r14
    4f58:	ff ef       	ldi	r31, 0xFF	; 255
    4f5a:	6f 1a       	sub	r6, r31
    4f5c:	7f 0a       	sbc	r7, r31
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    4f5e:	48 e0       	ldi	r20, 0x08	; 8
    4f60:	50 e0       	ldi	r21, 0x00	; 0
    4f62:	b5 01       	movw	r22, r10
    4f64:	c3 01       	movw	r24, r6
    4f66:	cd 5a       	subi	r28, 0xAD	; 173
    4f68:	de 4f       	sbci	r29, 0xFE	; 254
    4f6a:	28 83       	st	Y, r18
    4f6c:	c3 55       	subi	r28, 0x53	; 83
    4f6e:	d1 40       	sbci	r29, 0x01	; 1
    4f70:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>

		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    4f74:	80 e0       	ldi	r24, 0x00	; 0
    4f76:	cd 5a       	subi	r28, 0xAD	; 173
    4f78:	de 4f       	sbci	r29, 0xFE	; 254
    4f7a:	28 81       	ld	r18, Y
    4f7c:	c3 55       	subi	r28, 0x53	; 83
    4f7e:	d1 40       	sbci	r29, 0x01	; 1
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    4f80:	f3 01       	movw	r30, r6
    4f82:	90 81       	ld	r25, Z
    4f84:	9d 30       	cpi	r25, 0x0D	; 13
    4f86:	11 f4       	brne	.+4      	; 0x4f8c <Update_V1_0_to_V1_1+0x2c2>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    4f88:	94 e1       	ldi	r25, 0x14	; 20
    4f8a:	90 83       	st	Z, r25
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);

		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    4f8c:	8e 5f       	subi	r24, 0xFE	; 254
    4f8e:	e2 e0       	ldi	r30, 0x02	; 2
    4f90:	6e 0e       	add	r6, r30
    4f92:	71 1c       	adc	r7, r1
    4f94:	88 30       	cpi	r24, 0x08	; 8
    4f96:	a1 f7       	brne	.-24     	; 0x4f80 <Update_V1_0_to_V1_1+0x2b6>
		// P1 roll gyro
		if (P1_sensors & (1 << RollGyro))
		{
			if (P1_scale & (1 << RollScale))
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    4f98:	c1 5c       	subi	r28, 0xC1	; 193
    4f9a:	de 4f       	sbci	r29, 0xFE	; 254
    4f9c:	e8 81       	ld	r30, Y
    4f9e:	f9 81       	ldd	r31, Y+1	; 0x01
    4fa0:	cf 53       	subi	r28, 0x3F	; 63
    4fa2:	d1 40       	sbci	r29, 0x01	; 1
			}
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if (P1_sensors & (1 << RollGyro))
    4fa4:	50 fe       	sbrs	r5, 0
    4fa6:	06 c0       	rjmp	.+12     	; 0x4fb4 <Update_V1_0_to_V1_1+0x2ea>
		{
			if (P1_scale & (1 << RollScale))
    4fa8:	20 ff       	sbrs	r18, 0
    4faa:	02 c0       	rjmp	.+4      	; 0x4fb0 <Update_V1_0_to_V1_1+0x2e6>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    4fac:	10 83       	st	Z, r17
    4fae:	03 c0       	rjmp	.+6      	; 0x4fb6 <Update_V1_0_to_V1_1+0x2ec>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    4fb0:	00 83       	st	Z, r16
    4fb2:	01 c0       	rjmp	.+2      	; 0x4fb6 <Update_V1_0_to_V1_1+0x2ec>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    4fb4:	10 82       	st	Z, r1
		// P2 roll gyro
		if (P2_sensors & (1 << RollGyro))
		{
			if (P2_scale & (1 << RollScale))
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    4fb6:	cd 5b       	subi	r28, 0xBD	; 189
    4fb8:	de 4f       	sbci	r29, 0xFE	; 254
    4fba:	e8 81       	ld	r30, Y
    4fbc:	f9 81       	ldd	r31, Y+1	; 0x01
    4fbe:	c3 54       	subi	r28, 0x43	; 67
    4fc0:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if (P2_sensors & (1 << RollGyro))
    4fc2:	30 fe       	sbrs	r3, 0
    4fc4:	06 c0       	rjmp	.+12     	; 0x4fd2 <Update_V1_0_to_V1_1+0x308>
		{
			if (P2_scale & (1 << RollScale))
    4fc6:	40 fe       	sbrs	r4, 0
    4fc8:	02 c0       	rjmp	.+4      	; 0x4fce <Update_V1_0_to_V1_1+0x304>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    4fca:	10 83       	st	Z, r17
    4fcc:	03 c0       	rjmp	.+6      	; 0x4fd4 <Update_V1_0_to_V1_1+0x30a>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    4fce:	00 83       	st	Z, r16
    4fd0:	01 c0       	rjmp	.+2      	; 0x4fd4 <Update_V1_0_to_V1_1+0x30a>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    4fd2:	10 82       	st	Z, r1
		// P1 pitch gyro
		if (P1_sensors & (1 << PitchGyro))
		{
			if (P1_scale & (1 << PitchScale))
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    4fd4:	cf 5b       	subi	r28, 0xBF	; 191
    4fd6:	de 4f       	sbci	r29, 0xFE	; 254
    4fd8:	e8 81       	ld	r30, Y
    4fda:	f9 81       	ldd	r31, Y+1	; 0x01
    4fdc:	c1 54       	subi	r28, 0x41	; 65
    4fde:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if (P1_sensors & (1 << PitchGyro))
    4fe0:	51 fe       	sbrs	r5, 1
    4fe2:	06 c0       	rjmp	.+12     	; 0x4ff0 <Update_V1_0_to_V1_1+0x326>
		{
			if (P1_scale & (1 << PitchScale))
    4fe4:	21 ff       	sbrs	r18, 1
    4fe6:	02 c0       	rjmp	.+4      	; 0x4fec <Update_V1_0_to_V1_1+0x322>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    4fe8:	10 83       	st	Z, r17
    4fea:	03 c0       	rjmp	.+6      	; 0x4ff2 <Update_V1_0_to_V1_1+0x328>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    4fec:	00 83       	st	Z, r16
    4fee:	01 c0       	rjmp	.+2      	; 0x4ff2 <Update_V1_0_to_V1_1+0x328>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    4ff0:	10 82       	st	Z, r1
		// P2 pitch gyro
		if (P2_sensors & (1 << PitchGyro))
		{
			if (P2_scale & (1 << PitchScale))
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    4ff2:	f6 01       	movw	r30, r12
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if (P2_sensors & (1 << PitchGyro))
    4ff4:	31 fe       	sbrs	r3, 1
    4ff6:	06 c0       	rjmp	.+12     	; 0x5004 <Update_V1_0_to_V1_1+0x33a>
		{
			if (P2_scale & (1 << PitchScale))
    4ff8:	41 fe       	sbrs	r4, 1
    4ffa:	02 c0       	rjmp	.+4      	; 0x5000 <Update_V1_0_to_V1_1+0x336>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    4ffc:	10 83       	st	Z, r17
    4ffe:	03 c0       	rjmp	.+6      	; 0x5006 <Update_V1_0_to_V1_1+0x33c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    5000:	00 83       	st	Z, r16
    5002:	01 c0       	rjmp	.+2      	; 0x5006 <Update_V1_0_to_V1_1+0x33c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    5004:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if (P1_sensors & (1 << YawGyro))
		{
			if (P1_scale & (1 << YawScale))
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    5006:	f5 01       	movw	r30, r10
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if (P1_sensors & (1 << YawGyro))
    5008:	52 fe       	sbrs	r5, 2
    500a:	06 c0       	rjmp	.+12     	; 0x5018 <Update_V1_0_to_V1_1+0x34e>
		{
			if (P1_scale & (1 << YawScale))
    500c:	22 ff       	sbrs	r18, 2
    500e:	02 c0       	rjmp	.+4      	; 0x5014 <Update_V1_0_to_V1_1+0x34a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    5010:	10 83       	st	Z, r17
    5012:	03 c0       	rjmp	.+6      	; 0x501a <Update_V1_0_to_V1_1+0x350>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    5014:	00 83       	st	Z, r16
    5016:	01 c0       	rjmp	.+2      	; 0x501a <Update_V1_0_to_V1_1+0x350>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    5018:	10 82       	st	Z, r1
		// P2 yaw gyro
		if (P2_sensors & (1 << YawGyro))
		{
			if (P2_scale & (1 << YawScale))
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    501a:	c3 5b       	subi	r28, 0xB3	; 179
    501c:	de 4f       	sbci	r29, 0xFE	; 254
    501e:	e8 81       	ld	r30, Y
    5020:	f9 81       	ldd	r31, Y+1	; 0x01
    5022:	cd 54       	subi	r28, 0x4D	; 77
    5024:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if (P2_sensors & (1 << YawGyro))
    5026:	32 fe       	sbrs	r3, 2
    5028:	06 c0       	rjmp	.+12     	; 0x5036 <Update_V1_0_to_V1_1+0x36c>
		{
			if (P2_scale & (1 << YawScale))
    502a:	42 fe       	sbrs	r4, 2
    502c:	02 c0       	rjmp	.+4      	; 0x5032 <Update_V1_0_to_V1_1+0x368>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    502e:	10 83       	st	Z, r17
    5030:	03 c0       	rjmp	.+6      	; 0x5038 <Update_V1_0_to_V1_1+0x36e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    5032:	00 83       	st	Z, r16
    5034:	01 c0       	rjmp	.+2      	; 0x5038 <Update_V1_0_to_V1_1+0x36e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    5036:	10 82       	st	Z, r1
		// P1 roll acc
		if (P1_sensors & (1 << RollAcc))
		{
			if (P1_scale & (1 << AccRollScale))
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    5038:	c1 5b       	subi	r28, 0xB1	; 177
    503a:	de 4f       	sbci	r29, 0xFE	; 254
    503c:	e8 81       	ld	r30, Y
    503e:	f9 81       	ldd	r31, Y+1	; 0x01
    5040:	cf 54       	subi	r28, 0x4F	; 79
    5042:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if (P1_sensors & (1 << RollAcc))
    5044:	53 fe       	sbrs	r5, 3
    5046:	06 c0       	rjmp	.+12     	; 0x5054 <Update_V1_0_to_V1_1+0x38a>
		{
			if (P1_scale & (1 << AccRollScale))
    5048:	23 ff       	sbrs	r18, 3
    504a:	02 c0       	rjmp	.+4      	; 0x5050 <Update_V1_0_to_V1_1+0x386>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    504c:	10 83       	st	Z, r17
    504e:	03 c0       	rjmp	.+6      	; 0x5056 <Update_V1_0_to_V1_1+0x38c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    5050:	00 83       	st	Z, r16
    5052:	01 c0       	rjmp	.+2      	; 0x5056 <Update_V1_0_to_V1_1+0x38c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    5054:	10 82       	st	Z, r1
		// P2 roll acc
		if (P2_sensors & (1 << RollAcc))
		{
			if (P2_scale & (1 << AccRollScale))
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    5056:	cb 5b       	subi	r28, 0xBB	; 187
    5058:	de 4f       	sbci	r29, 0xFE	; 254
    505a:	e8 81       	ld	r30, Y
    505c:	f9 81       	ldd	r31, Y+1	; 0x01
    505e:	c5 54       	subi	r28, 0x45	; 69
    5060:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if (P2_sensors & (1 << RollAcc))
    5062:	33 fe       	sbrs	r3, 3
    5064:	06 c0       	rjmp	.+12     	; 0x5072 <Update_V1_0_to_V1_1+0x3a8>
		{
			if (P2_scale & (1 << AccRollScale))
    5066:	43 fe       	sbrs	r4, 3
    5068:	02 c0       	rjmp	.+4      	; 0x506e <Update_V1_0_to_V1_1+0x3a4>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    506a:	10 83       	st	Z, r17
    506c:	03 c0       	rjmp	.+6      	; 0x5074 <Update_V1_0_to_V1_1+0x3aa>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    506e:	00 83       	st	Z, r16
    5070:	01 c0       	rjmp	.+2      	; 0x5074 <Update_V1_0_to_V1_1+0x3aa>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    5072:	10 82       	st	Z, r1
		// P1 pitch acc
		if (P1_sensors & (1 << PitchAcc))
		{
			if (P1_scale & (1 << AccPitchScale))
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    5074:	c9 5b       	subi	r28, 0xB9	; 185
    5076:	de 4f       	sbci	r29, 0xFE	; 254
    5078:	e8 81       	ld	r30, Y
    507a:	f9 81       	ldd	r31, Y+1	; 0x01
    507c:	c7 54       	subi	r28, 0x47	; 71
    507e:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if (P1_sensors & (1 << PitchAcc))
    5080:	54 fe       	sbrs	r5, 4
    5082:	06 c0       	rjmp	.+12     	; 0x5090 <Update_V1_0_to_V1_1+0x3c6>
		{
			if (P1_scale & (1 << AccPitchScale))
    5084:	24 ff       	sbrs	r18, 4
    5086:	02 c0       	rjmp	.+4      	; 0x508c <Update_V1_0_to_V1_1+0x3c2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    5088:	10 83       	st	Z, r17
    508a:	03 c0       	rjmp	.+6      	; 0x5092 <Update_V1_0_to_V1_1+0x3c8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    508c:	00 83       	st	Z, r16
    508e:	01 c0       	rjmp	.+2      	; 0x5092 <Update_V1_0_to_V1_1+0x3c8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    5090:	10 82       	st	Z, r1
		// P2 pitch acc
		if (P2_sensors & (1 << PitchAcc))
		{
			if (P2_scale & (1 << AccPitchScale))
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    5092:	c7 5b       	subi	r28, 0xB7	; 183
    5094:	de 4f       	sbci	r29, 0xFE	; 254
    5096:	e8 81       	ld	r30, Y
    5098:	f9 81       	ldd	r31, Y+1	; 0x01
    509a:	c9 54       	subi	r28, 0x49	; 73
    509c:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if (P2_sensors & (1 << PitchAcc))
    509e:	34 fe       	sbrs	r3, 4
    50a0:	06 c0       	rjmp	.+12     	; 0x50ae <Update_V1_0_to_V1_1+0x3e4>
		{
			if (P2_scale & (1 << AccPitchScale))
    50a2:	44 fe       	sbrs	r4, 4
    50a4:	02 c0       	rjmp	.+4      	; 0x50aa <Update_V1_0_to_V1_1+0x3e0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    50a6:	10 83       	st	Z, r17
    50a8:	03 c0       	rjmp	.+6      	; 0x50b0 <Update_V1_0_to_V1_1+0x3e6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    50aa:	00 83       	st	Z, r16
    50ac:	01 c0       	rjmp	.+2      	; 0x50b0 <Update_V1_0_to_V1_1+0x3e6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    50ae:	10 82       	st	Z, r1
		// P1 Z delta acc
		if (P1_sensors & (1 << ZDeltaAcc))
		{
			if (P1_scale & (1 << AccZScale))
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    50b0:	c5 5b       	subi	r28, 0xB5	; 181
    50b2:	de 4f       	sbci	r29, 0xFE	; 254
    50b4:	e8 81       	ld	r30, Y
    50b6:	f9 81       	ldd	r31, Y+1	; 0x01
    50b8:	cb 54       	subi	r28, 0x4B	; 75
    50ba:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if (P1_sensors & (1 << ZDeltaAcc))
    50bc:	55 fe       	sbrs	r5, 5
    50be:	06 c0       	rjmp	.+12     	; 0x50cc <Update_V1_0_to_V1_1+0x402>
		{
			if (P1_scale & (1 << AccZScale))
    50c0:	25 ff       	sbrs	r18, 5
    50c2:	02 c0       	rjmp	.+4      	; 0x50c8 <Update_V1_0_to_V1_1+0x3fe>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    50c4:	10 83       	st	Z, r17
    50c6:	03 c0       	rjmp	.+6      	; 0x50ce <Update_V1_0_to_V1_1+0x404>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    50c8:	00 83       	st	Z, r16
    50ca:	01 c0       	rjmp	.+2      	; 0x50ce <Update_V1_0_to_V1_1+0x404>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    50cc:	10 82       	st	Z, r1
		// P2 Z delta acc
		if (P2_sensors & (1 << ZDeltaAcc))
		{
			if (P2_scale & (1 << AccZScale))
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    50ce:	f7 01       	movw	r30, r14
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if (P2_sensors & (1 << ZDeltaAcc))
    50d0:	35 fe       	sbrs	r3, 5
    50d2:	06 c0       	rjmp	.+12     	; 0x50e0 <Update_V1_0_to_V1_1+0x416>
		{
			if (P2_scale & (1 << AccZScale))
    50d4:	45 fe       	sbrs	r4, 5
    50d6:	02 c0       	rjmp	.+4      	; 0x50dc <Update_V1_0_to_V1_1+0x412>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    50d8:	10 83       	st	Z, r17
    50da:	03 c0       	rjmp	.+6      	; 0x50e2 <Update_V1_0_to_V1_1+0x418>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    50dc:	00 83       	st	Z, r16
    50de:	01 c0       	rjmp	.+2      	; 0x50e2 <Update_V1_0_to_V1_1+0x418>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    50e0:	10 82       	st	Z, r1
    50e2:	f6 e2       	ldi	r31, 0x26	; 38
    50e4:	8f 0e       	add	r8, r31
    50e6:	91 1c       	adc	r9, r1
    50e8:	c1 5c       	subi	r28, 0xC1	; 193
    50ea:	de 4f       	sbci	r29, 0xFE	; 254
    50ec:	88 81       	ld	r24, Y
    50ee:	99 81       	ldd	r25, Y+1	; 0x01
    50f0:	cf 53       	subi	r28, 0x3F	; 63
    50f2:	d1 40       	sbci	r29, 0x01	; 1
    50f4:	86 96       	adiw	r24, 0x26	; 38
    50f6:	c1 5c       	subi	r28, 0xC1	; 193
    50f8:	de 4f       	sbci	r29, 0xFE	; 254
    50fa:	99 83       	std	Y+1, r25	; 0x01
    50fc:	88 83       	st	Y, r24
    50fe:	cf 53       	subi	r28, 0x3F	; 63
    5100:	d1 40       	sbci	r29, 0x01	; 1
    5102:	cd 5b       	subi	r28, 0xBD	; 189
    5104:	de 4f       	sbci	r29, 0xFE	; 254
    5106:	e8 81       	ld	r30, Y
    5108:	f9 81       	ldd	r31, Y+1	; 0x01
    510a:	c3 54       	subi	r28, 0x43	; 67
    510c:	d1 40       	sbci	r29, 0x01	; 1
    510e:	b6 96       	adiw	r30, 0x26	; 38
    5110:	cd 5b       	subi	r28, 0xBD	; 189
    5112:	de 4f       	sbci	r29, 0xFE	; 254
    5114:	f9 83       	std	Y+1, r31	; 0x01
    5116:	e8 83       	st	Y, r30
    5118:	c3 54       	subi	r28, 0x43	; 67
    511a:	d1 40       	sbci	r29, 0x01	; 1
    511c:	cf 5b       	subi	r28, 0xBF	; 191
    511e:	de 4f       	sbci	r29, 0xFE	; 254
    5120:	88 81       	ld	r24, Y
    5122:	99 81       	ldd	r25, Y+1	; 0x01
    5124:	c1 54       	subi	r28, 0x41	; 65
    5126:	d1 40       	sbci	r29, 0x01	; 1
    5128:	86 96       	adiw	r24, 0x26	; 38
    512a:	cf 5b       	subi	r28, 0xBF	; 191
    512c:	de 4f       	sbci	r29, 0xFE	; 254
    512e:	99 83       	std	Y+1, r25	; 0x01
    5130:	88 83       	st	Y, r24
    5132:	c1 54       	subi	r28, 0x41	; 65
    5134:	d1 40       	sbci	r29, 0x01	; 1
    5136:	96 e2       	ldi	r25, 0x26	; 38
    5138:	c9 0e       	add	r12, r25
    513a:	d1 1c       	adc	r13, r1
    513c:	e6 e2       	ldi	r30, 0x26	; 38
    513e:	ee 0e       	add	r14, r30
    5140:	f1 1c       	adc	r15, r1
    5142:	c5 5b       	subi	r28, 0xB5	; 181
    5144:	de 4f       	sbci	r29, 0xFE	; 254
    5146:	88 81       	ld	r24, Y
    5148:	99 81       	ldd	r25, Y+1	; 0x01
    514a:	cb 54       	subi	r28, 0x4B	; 75
    514c:	d1 40       	sbci	r29, 0x01	; 1
    514e:	86 96       	adiw	r24, 0x26	; 38
    5150:	c5 5b       	subi	r28, 0xB5	; 181
    5152:	de 4f       	sbci	r29, 0xFE	; 254
    5154:	99 83       	std	Y+1, r25	; 0x01
    5156:	88 83       	st	Y, r24
    5158:	cb 54       	subi	r28, 0x4B	; 75
    515a:	d1 40       	sbci	r29, 0x01	; 1
    515c:	c7 5b       	subi	r28, 0xB7	; 183
    515e:	de 4f       	sbci	r29, 0xFE	; 254
    5160:	e8 81       	ld	r30, Y
    5162:	f9 81       	ldd	r31, Y+1	; 0x01
    5164:	c9 54       	subi	r28, 0x49	; 73
    5166:	d1 40       	sbci	r29, 0x01	; 1
    5168:	b6 96       	adiw	r30, 0x26	; 38
    516a:	c7 5b       	subi	r28, 0xB7	; 183
    516c:	de 4f       	sbci	r29, 0xFE	; 254
    516e:	f9 83       	std	Y+1, r31	; 0x01
    5170:	e8 83       	st	Y, r30
    5172:	c9 54       	subi	r28, 0x49	; 73
    5174:	d1 40       	sbci	r29, 0x01	; 1
    5176:	c9 5b       	subi	r28, 0xB9	; 185
    5178:	de 4f       	sbci	r29, 0xFE	; 254
    517a:	88 81       	ld	r24, Y
    517c:	99 81       	ldd	r25, Y+1	; 0x01
    517e:	c7 54       	subi	r28, 0x47	; 71
    5180:	d1 40       	sbci	r29, 0x01	; 1
    5182:	86 96       	adiw	r24, 0x26	; 38
    5184:	c9 5b       	subi	r28, 0xB9	; 185
    5186:	de 4f       	sbci	r29, 0xFE	; 254
    5188:	99 83       	std	Y+1, r25	; 0x01
    518a:	88 83       	st	Y, r24
    518c:	c7 54       	subi	r28, 0x47	; 71
    518e:	d1 40       	sbci	r29, 0x01	; 1
    5190:	cb 5b       	subi	r28, 0xBB	; 187
    5192:	de 4f       	sbci	r29, 0xFE	; 254
    5194:	e8 81       	ld	r30, Y
    5196:	f9 81       	ldd	r31, Y+1	; 0x01
    5198:	c5 54       	subi	r28, 0x45	; 69
    519a:	d1 40       	sbci	r29, 0x01	; 1
    519c:	b6 96       	adiw	r30, 0x26	; 38
    519e:	cb 5b       	subi	r28, 0xBB	; 187
    51a0:	de 4f       	sbci	r29, 0xFE	; 254
    51a2:	f9 83       	std	Y+1, r31	; 0x01
    51a4:	e8 83       	st	Y, r30
    51a6:	c5 54       	subi	r28, 0x45	; 69
    51a8:	d1 40       	sbci	r29, 0x01	; 1
    51aa:	c1 5b       	subi	r28, 0xB1	; 177
    51ac:	de 4f       	sbci	r29, 0xFE	; 254
    51ae:	88 81       	ld	r24, Y
    51b0:	99 81       	ldd	r25, Y+1	; 0x01
    51b2:	cf 54       	subi	r28, 0x4F	; 79
    51b4:	d1 40       	sbci	r29, 0x01	; 1
    51b6:	86 96       	adiw	r24, 0x26	; 38
    51b8:	c1 5b       	subi	r28, 0xB1	; 177
    51ba:	de 4f       	sbci	r29, 0xFE	; 254
    51bc:	99 83       	std	Y+1, r25	; 0x01
    51be:	88 83       	st	Y, r24
    51c0:	cf 54       	subi	r28, 0x4F	; 79
    51c2:	d1 40       	sbci	r29, 0x01	; 1
    51c4:	c3 5b       	subi	r28, 0xB3	; 179
    51c6:	de 4f       	sbci	r29, 0xFE	; 254
    51c8:	e8 81       	ld	r30, Y
    51ca:	f9 81       	ldd	r31, Y+1	; 0x01
    51cc:	cd 54       	subi	r28, 0x4D	; 77
    51ce:	d1 40       	sbci	r29, 0x01	; 1
    51d0:	b6 96       	adiw	r30, 0x26	; 38
    51d2:	c3 5b       	subi	r28, 0xB3	; 179
    51d4:	de 4f       	sbci	r29, 0xFE	; 254
    51d6:	f9 83       	std	Y+1, r31	; 0x01
    51d8:	e8 83       	st	Y, r30
    51da:	cd 54       	subi	r28, 0x4D	; 77
    51dc:	d1 40       	sbci	r29, 0x01	; 1
    51de:	f6 e2       	ldi	r31, 0x26	; 38
    51e0:	af 0e       	add	r10, r31
    51e2:	b1 1c       	adc	r11, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time
	for (i = 0; i < MAX_OUTPUTS; i++)
    51e4:	c3 5c       	subi	r28, 0xC3	; 195
    51e6:	de 4f       	sbci	r29, 0xFE	; 254
    51e8:	88 81       	ld	r24, Y
    51ea:	99 81       	ldd	r25, Y+1	; 0x01
    51ec:	cd 53       	subi	r28, 0x3D	; 61
    51ee:	d1 40       	sbci	r29, 0x01	; 1
    51f0:	e8 16       	cp	r14, r24
    51f2:	f9 06       	cpc	r15, r25
    51f4:	09 f0       	breq	.+2      	; 0x51f8 <Update_V1_0_to_V1_1+0x52e>
    51f6:	8b ce       	rjmp	.-746    	; 0x4f0e <Update_V1_0_to_V1_1+0x244>
	}
	
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)((&Config.setup) + (CHANNEL_V1_0));
	memcpy(dst, src, sizeof(mixer_buffer));
    51f8:	80 e3       	ldi	r24, 0x30	; 48
    51fa:	91 e0       	ldi	r25, 0x01	; 1
    51fc:	fe 01       	movw	r30, r28
    51fe:	31 96       	adiw	r30, 0x01	; 1
    5200:	ab ec       	ldi	r26, 0xCB	; 203
    5202:	b6 e0       	ldi	r27, 0x06	; 6
    5204:	01 90       	ld	r0, Z+
    5206:	0d 92       	st	X+, r0
    5208:	01 97       	sbiw	r24, 0x01	; 1
    520a:	e1 f7       	brne	.-8      	; 0x5204 <Update_V1_0_to_V1_1+0x53a>
    520c:	cf 5a       	subi	r28, 0xAF	; 175
    520e:	de 4f       	sbci	r29, 0xFE	; 254
    5210:	98 81       	ld	r25, Y
    5212:	c1 55       	subi	r28, 0x51	; 81
    5214:	d1 40       	sbci	r29, 0x01	; 1
    5216:	97 30       	cpi	r25, 0x07	; 7
    5218:	30 f4       	brcc	.+12     	; 0x5226 <Update_V1_0_to_V1_1+0x55c>
    521a:	e9 2f       	mov	r30, r25
    521c:	f0 e0       	ldi	r31, 0x00	; 0
    521e:	e1 5f       	subi	r30, 0xF1	; 241
    5220:	fa 4f       	sbci	r31, 0xFA	; 250
    5222:	80 81       	ld	r24, Z
    5224:	01 c0       	rjmp	.+2      	; 0x5228 <Update_V1_0_to_V1_1+0x55e>
	
	// Convert old filter values to more appropriate ones
	memcpy((void*)&temp,(void*)((&Config.setup) + (GENITEMS_V1_0 + 6)),1);		// Config.Acc_LPF
	temp = convert_filter_V1_0_V1_1(temp);
    5226:	87 e0       	ldi	r24, 0x07	; 7
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 + 6)), &temp, 1);
    5228:	80 93 c7 06 	sts	0x06C7, r24
    522c:	ce 5a       	subi	r28, 0xAE	; 174
    522e:	de 4f       	sbci	r29, 0xFE	; 254
    5230:	e8 81       	ld	r30, Y
    5232:	c2 55       	subi	r28, 0x52	; 82
    5234:	d1 40       	sbci	r29, 0x01	; 1
    5236:	e7 30       	cpi	r30, 0x07	; 7
    5238:	28 f4       	brcc	.+10     	; 0x5244 <Update_V1_0_to_V1_1+0x57a>
    523a:	f0 e0       	ldi	r31, 0x00	; 0
    523c:	e1 5f       	subi	r30, 0xF1	; 241
    523e:	fa 4f       	sbci	r31, 0xFA	; 250
    5240:	80 81       	ld	r24, Z
    5242:	01 c0       	rjmp	.+2      	; 0x5246 <Update_V1_0_to_V1_1+0x57c>

	memcpy((void*)&temp,(void*)((&Config.setup) + (GENITEMS_V1_0 + 7)),1);		// Config.Gyro_LPF
	temp = convert_filter_V1_0_V1_1(temp);
    5244:	87 e0       	ldi	r24, 0x07	; 7
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 + 7)), &temp, 1);	
    5246:	80 93 c8 06 	sts	0x06C8, r24
	
	// Finally, copy the RudderPol value up into its new location
	memcpy((void*)((&Config.setup) + (RUDDERPOL_V1_1)),(void*)&buffer[9],1);	// RudderPol
    524a:	20 92 41 08 	sts	0x0841, r2
}
    524e:	cd 5a       	subi	r28, 0xAD	; 173
    5250:	de 4f       	sbci	r29, 0xFE	; 254
    5252:	0f b6       	in	r0, 0x3f	; 63
    5254:	f8 94       	cli
    5256:	de bf       	out	0x3e, r29	; 62
    5258:	0f be       	out	0x3f, r0	; 63
    525a:	cd bf       	out	0x3d, r28	; 61
    525c:	df 91       	pop	r29
    525e:	cf 91       	pop	r28
    5260:	1f 91       	pop	r17
    5262:	0f 91       	pop	r16
    5264:	ff 90       	pop	r15
    5266:	ef 90       	pop	r14
    5268:	df 90       	pop	r13
    526a:	cf 90       	pop	r12
    526c:	bf 90       	pop	r11
    526e:	af 90       	pop	r10
    5270:	9f 90       	pop	r9
    5272:	8f 90       	pop	r8
    5274:	7f 90       	pop	r7
    5276:	6f 90       	pop	r6
    5278:	5f 90       	pop	r5
    527a:	4f 90       	pop	r4
    527c:	3f 90       	pop	r3
    527e:	2f 90       	pop	r2
    5280:	08 95       	ret

00005282 <Update_V1_1_to_V1_2>:

// Upgrade V1.1 structure to V1.2
void Update_V1_1_to_V1_2(void)
{
    5282:	cf 93       	push	r28
    5284:	e0 91 c9 06 	lds	r30, 0x06C9
    5288:	e1 50       	subi	r30, 0x01	; 1
    528a:	ea 30       	cpi	r30, 0x0A	; 10
    528c:	28 f4       	brcc	.+10     	; 0x5298 <Update_V1_1_to_V1_2+0x16>
    528e:	f0 e0       	ldi	r31, 0x00	; 0
    5290:	e5 5e       	subi	r30, 0xE5	; 229
    5292:	fa 4f       	sbci	r31, 0xFA	; 250
    5294:	80 81       	ld	r24, Z
    5296:	01 c0       	rjmp	.+2      	; 0x529a <Update_V1_1_to_V1_2+0x18>
	memcpy((void*)&temp,(void*)((&Config.setup) + (ALCORRECT_V1_1)),1);			// Config.CF_factor

	// Convert old Config.CF_factor to new
	// (old) 1 = 10% 2 = 11%, 3 = 12.5%, 4 = 14%, 5 = 17%, 60= 20%, 7 = 25%, 8 = 33%, 9 = 50%, 10 = 100%
	// (newest) 11 = 10%, 10 = 20%, 9 = 30%, 8 = 40%, 7 = 50%, 6 = 60%, 5 = 70%, 4 = 80%, 3 = 90%, 2 = 100%
	switch(temp)
    5298:	86 e0       	ldi	r24, 0x06	; 6
			temp = 6;
			break;		
	}
	
	// Write updated Config.CF_factor value
	memcpy((void*)((&Config.setup) + (ALCORRECT_V1_1)),(void*)&temp,1);
    529a:	80 93 c9 06 	sts	0x06C9, r24
		
	// Copy AileronPol from RCitems to its new location
	memcpy((void*)((&Config.setup) + (RUDDERPOL_V1_1 + 1)),(void*)((&Config.setup) + (RCITEMS_V1_0 + 7)),1);
    529e:	80 91 69 06 	lds	r24, 0x0669
    52a2:	80 93 42 08 	sts	0x0842, r24
	
	// Set the new Vibe value to OFF
	memset((void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), OFF, 1);
    52a6:	10 92 69 06 	sts	0x0669, r1
    52aa:	e0 91 c1 06 	lds	r30, 0x06C1
    52ae:	e1 50       	subi	r30, 0x01	; 1
    52b0:	e5 30       	cpi	r30, 0x05	; 5
    52b2:	28 f4       	brcc	.+10     	; 0x52be <Update_V1_1_to_V1_2+0x3c>
    52b4:	f0 e0       	ldi	r31, 0x00	; 0
    52b6:	ea 5e       	subi	r30, 0xEA	; 234
    52b8:	fa 4f       	sbci	r31, 0xFA	; 250
    52ba:	c0 81       	ld	r28, Z
    52bc:	01 c0       	rjmp	.+2      	; 0x52c0 <Update_V1_1_to_V1_2+0x3e>

	// Update the orientation byte to be the P2 orientation
	memcpy((void*)&Orientation_P2,(void*)((&Config.setup) + (GENITEMS_V1_0)),1);
	
	// Convert to new 24-orientation system
	switch(Orientation_P2)
    52be:	c0 e0       	ldi	r28, 0x00	; 0
			Orientation_P2 = UP_BACK;
			break;	
	}

	// Clear new data area at end of data											// Log pointer onwards
	memset((void*)((&Config.setup) + (V1_2_NEWDATA)), 0, 43);
    52c0:	8b e2       	ldi	r24, 0x2B	; 43
    52c2:	e3 e4       	ldi	r30, 0x43	; 67
    52c4:	f8 e0       	ldi	r31, 0x08	; 8
    52c6:	df 01       	movw	r26, r30
    52c8:	1d 92       	st	X+, r1
    52ca:	8a 95       	dec	r24
    52cc:	e9 f7       	brne	.-6      	; 0x52c8 <Update_V1_1_to_V1_2+0x46>
	
	// Move everything from Config.Contrast up by one byte to make room for Config.P1_Reference	
	// AileronPol has already been moved up past RudderPol so we need to add one byte
	memmove((void*)((&Config.setup) + (GENITEMS_V1_0 + 2)), (void*)((&Config.setup) + (GENITEMS_V1_0 + 1)), ((RUDDERPOL_V1_1 + 1) - (GENITEMS_V1_0 + 1))); // (520 + 1 - 136 + 1 = 386 bytes)
    52ce:	40 e8       	ldi	r20, 0x80	; 128
    52d0:	51 e0       	ldi	r21, 0x01	; 1
    52d2:	62 ec       	ldi	r22, 0xC2	; 194
    52d4:	76 e0       	ldi	r23, 0x06	; 6
    52d6:	83 ec       	ldi	r24, 0xC3	; 195
    52d8:	96 e0       	ldi	r25, 0x06	; 6
    52da:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>

	// Save updated orientation
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 )),(void*)&Orientation_P2,1);	// Updated P2 orientation value
    52de:	c0 93 c1 06 	sts	0x06C1, r28
	memset((void*)((&Config.setup) + (GENITEMS_V1_0 + 1)), NO_ORIENT, 1);			// New P1_Reference
    52e2:	10 92 c2 06 	sts	0x06C2, r1
	
}
    52e6:	cf 91       	pop	r28
    52e8:	08 95       	ret

000052ea <Update_V1_2_to_V1_3B1>:

// Upgrade V1.2 structure to V1.3
void Update_V1_2_to_V1_3B1(void)
{
    52ea:	e0 ef       	ldi	r30, 0xF0	; 240
    52ec:	f6 e0       	ldi	r31, 0x06	; 6
    52ee:	df 01       	movw	r26, r30
    52f0:	16 97       	sbiw	r26, 0x06	; 6

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    52f2:	8c 91       	ld	r24, X
    52f4:	8c 5f       	subi	r24, 0xFC	; 252
	
	// Update all source settings in output mixers
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), 1);	// P1_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    52f6:	8c 93       	st	X, r24
    52f8:	12 96       	adiw	r26, 0x02	; 2

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    52fa:	8c 91       	ld	r24, X
    52fc:	8c 5f       	subi	r24, 0xFC	; 252
	{
		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), 1);	// P1_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), convert_source_V1_2_V1_3(source), 1);

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), 1);	// P2_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    52fe:	8c 93       	st	X, r24
    5300:	12 96       	adiw	r26, 0x02	; 2

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    5302:	8c 91       	ld	r24, X
    5304:	8c 5f       	subi	r24, 0xFC	; 252

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), 1);	// P2_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), convert_source_V1_2_V1_3(source), 1);

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), 1);	// P1_source_b
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    5306:	8c 93       	st	X, r24

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    5308:	80 81       	ld	r24, Z
    530a:	8c 5f       	subi	r24, 0xFC	; 252

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), 1);	// P1_source_b
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), convert_source_V1_2_V1_3(source), 1);

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 36 + (i * 38))), 1);	// P2_source_b
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 36 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    530c:	80 83       	st	Z, r24
    530e:	b6 96       	adiw	r30, 0x26	; 38
	
	// So why all this weird code? Rememeber we cannot use any structure references in *this code* to reference old structures.
	// As such all references must be hard-coded with offsets to the version they were originally compiled with.
	
	// Update all source settings in output mixers
	for (i = 0; i < MAX_OUTPUTS; i++)
    5310:	68 e0       	ldi	r22, 0x08	; 8
    5312:	e0 32       	cpi	r30, 0x20	; 32
    5314:	f6 07       	cpc	r31, r22
    5316:	59 f7       	brne	.-42     	; 0x52ee <Update_V1_2_to_V1_3B1+0x4>

	// Set new data to defaults
	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), 0, 1);		// Config.Curve[i].Point1
    5318:	10 92 6c 08 	sts	0x086C, r1
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), 17, 1);	// Config.Curve[i].Point2
    531c:	51 e1       	ldi	r21, 0x11	; 17
    531e:	50 93 6d 08 	sts	0x086D, r21
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), 33, 1);	// Config.Curve[i].Point3
    5322:	41 e2       	ldi	r20, 0x21	; 33
    5324:	40 93 6e 08 	sts	0x086E, r20
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 50, 1);	// Config.Curve[i].Point4
    5328:	32 e3       	ldi	r19, 0x32	; 50
    532a:	30 93 6f 08 	sts	0x086F, r19
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 67, 1);	// Config.Curve[i].Point5
    532e:	23 e4       	ldi	r18, 0x43	; 67
    5330:	20 93 70 08 	sts	0x0870, r18
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 83, 1);	// Config.Curve[i].Point6
    5334:	93 e5       	ldi	r25, 0x53	; 83
    5336:	90 93 71 08 	sts	0x0871, r25
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
    533a:	84 e6       	ldi	r24, 0x64	; 100
    533c:	80 93 72 08 	sts	0x0872, r24

	// Set new data to defaults
	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), 0, 1);		// Config.Curve[i].Point1
    5340:	10 92 74 08 	sts	0x0874, r1
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), 17, 1);	// Config.Curve[i].Point2
    5344:	50 93 75 08 	sts	0x0875, r21
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), 33, 1);	// Config.Curve[i].Point3
    5348:	40 93 76 08 	sts	0x0876, r20
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 50, 1);	// Config.Curve[i].Point4
    534c:	30 93 77 08 	sts	0x0877, r19
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 67, 1);	// Config.Curve[i].Point5
    5350:	20 93 78 08 	sts	0x0878, r18
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 83, 1);	// Config.Curve[i].Point6
    5354:	90 93 79 08 	sts	0x0879, r25
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
    5358:	80 93 7a 08 	sts	0x087A, r24
    535c:	ec e7       	ldi	r30, 0x7C	; 124
    535e:	f8 e0       	ldi	r31, 0x08	; 8
	}

	// Curves 2 to 6
	for (i = 2; i < NUMBEROFCURVES; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), -100, 1);	// Config.Curve[i].Point1
    5360:	5c e9       	ldi	r21, 0x9C	; 156
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), -67, 1);	// Config.Curve[i].Point2
    5362:	4d eb       	ldi	r20, 0xBD	; 189
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), -33, 1);	// Config.Curve[i].Point3
    5364:	3f ed       	ldi	r19, 0xDF	; 223
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 0, 1);		// Config.Curve[i].Point4
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 33, 1);	// Config.Curve[i].Point5
    5366:	21 e2       	ldi	r18, 0x21	; 33
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 67, 1);	// Config.Curve[i].Point6
    5368:	93 e4       	ldi	r25, 0x43	; 67
	}

	// Curves 2 to 6
	for (i = 2; i < NUMBEROFCURVES; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), -100, 1);	// Config.Curve[i].Point1
    536a:	50 83       	st	Z, r21
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), -67, 1);	// Config.Curve[i].Point2
    536c:	41 83       	std	Z+1, r20	; 0x01
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), -33, 1);	// Config.Curve[i].Point3
    536e:	32 83       	std	Z+2, r19	; 0x02
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 0, 1);		// Config.Curve[i].Point4
    5370:	13 82       	std	Z+3, r1	; 0x03
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 33, 1);	// Config.Curve[i].Point5
    5372:	24 83       	std	Z+4, r18	; 0x04
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 67, 1);	// Config.Curve[i].Point6
    5374:	95 83       	std	Z+5, r25	; 0x05
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
    5376:	86 83       	std	Z+6, r24	; 0x06
    5378:	38 96       	adiw	r30, 0x08	; 8
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 83, 1);	// Config.Curve[i].Point6
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
	}

	// Curves 2 to 6
	for (i = 2; i < NUMBEROFCURVES; i++)
    537a:	68 e0       	ldi	r22, 0x08	; 8
    537c:	ec 39       	cpi	r30, 0x9C	; 156
    537e:	f6 07       	cpc	r31, r22
    5380:	a1 f7       	brne	.-24     	; 0x536a <Update_V1_2_to_V1_3B1+0x80>
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 67, 1);	// Config.Curve[i].Point6
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
	}

	// Set curve channel sources
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 7)), THROTTLE, 1);	// Config.Curve[0].channel
    5382:	10 92 73 08 	sts	0x0873, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 15)), THROTTLE, 1);	// Config.Curve[1].channel
    5386:	10 92 7b 08 	sts	0x087B, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 23)), THROTTLE, 1);	// Config.Curve[2].channel
    538a:	10 92 83 08 	sts	0x0883, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 31)), THROTTLE, 1);	// Config.Curve[3].channel
    538e:	10 92 8b 08 	sts	0x088B, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 39)), NOMIX, 1);		// Config.Curve[4].channel
    5392:	84 e1       	ldi	r24, 0x14	; 20
    5394:	80 93 93 08 	sts	0x0893, r24
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 47)), NOMIX, 1);		// Config.Curve[5].channel
    5398:	80 93 9b 08 	sts	0x089B, r24
    539c:	80 e0       	ldi	r24, 0x00	; 0
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	fc 01       	movw	r30, r24
    53a2:	e2 51       	subi	r30, 0x12	; 18
    53a4:	fe 4f       	sbci	r31, 0xFE	; 254

	// Preset custom channel order to JR
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		memset((void*)((&Config.setup) + (CUSTOM_CH_ORD_V1_3_B1 + i)), pgm_read_byte(&JR[i]), 1);
    53a6:	e4 91       	lpm	r30, Z
    53a8:	dc 01       	movw	r26, r24
    53aa:	a4 56       	subi	r26, 0x64	; 100
    53ac:	b7 4f       	sbci	r27, 0xF7	; 247
    53ae:	ec 93       	st	X, r30
    53b0:	01 96       	adiw	r24, 0x01	; 1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 31)), THROTTLE, 1);	// Config.Curve[3].channel
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 39)), NOMIX, 1);		// Config.Curve[4].channel
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 47)), NOMIX, 1);		// Config.Curve[5].channel

	// Preset custom channel order to JR
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    53b2:	88 30       	cpi	r24, 0x08	; 8
    53b4:	91 05       	cpc	r25, r1
    53b6:	a1 f7       	brne	.-24     	; 0x53a0 <Update_V1_2_to_V1_3B1+0xb6>
	{
		memset((void*)((&Config.setup) + (CUSTOM_CH_ORD_V1_3_B1 + i)), pgm_read_byte(&JR[i]), 1);
	}
}
    53b8:	08 95       	ret

000053ba <Update_V1_3B1_to_V1_3B14>:

void Update_V1_3B1_to_V1_3B14(void)
{
    53ba:	1f 93       	push	r17
    53bc:	cf 93       	push	r28
    53be:	df 93       	push	r29
	int8_t TransitionSpeedOut = 0;
	
	// Copy Config.TransitionSpeedOut locally
	memcpy((void*)&TransitionSpeedOut, (void*)((&Config.setup) + (RCITEMS_V1_0 + 5)), 1);
    53c0:	c9 e3       	ldi	r28, 0x39	; 57
    53c2:	d6 e0       	ldi	r29, 0x06	; 6
    53c4:	1e a5       	ldd	r17, Y+46	; 0x2e
	
	// Move everything from Config.Transition_P1n up by one byte to make room for Config.TransitionSpeedIn
	memmove((void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), (void*)((&Config.setup) + (RCITEMS_V1_0 + 6)), (LAST_BYTE_V1_3B14 - (RCITEMS_V1_0 + 6))); // 619 - (41 + 6) = 572 bytes)
    53c6:	4c e3       	ldi	r20, 0x3C	; 60
    53c8:	52 e0       	ldi	r21, 0x02	; 2
    53ca:	68 e6       	ldi	r22, 0x68	; 104
    53cc:	76 e0       	ldi	r23, 0x06	; 6
    53ce:	89 e6       	ldi	r24, 0x69	; 105
    53d0:	96 e0       	ldi	r25, 0x06	; 6
    53d2:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>

	// Preset new variable to same as TransitionSpeedOut;
	Config.TransitionSpeedIn = TransitionSpeedOut;
    53d6:	1f a7       	std	Y+47, r17	; 0x2f

	// Set magic number to V1.3 B1 signature
	Config.setup = V1_3_B14_SIGNATURE;
    53d8:	8f e3       	ldi	r24, 0x3F	; 63
    53da:	88 83       	st	Y, r24
}
    53dc:	df 91       	pop	r29
    53de:	cf 91       	pop	r28
    53e0:	1f 91       	pop	r17
    53e2:	08 95       	ret

000053e4 <Update_V1_3B14_to_V1_3B15>:

// Upgrade V1.3 B14 structure to V1.3 B15 structure
void Update_V1_3B14_to_V1_3B15(void)
{
    53e4:	0f 93       	push	r16
    53e6:	1f 93       	push	r17
    53e8:	cf 93       	push	r28
    53ea:	df 93       	push	r29
    53ec:	cd b7       	in	r28, 0x3d	; 61
    53ee:	de b7       	in	r29, 0x3e	; 62
    53f0:	c0 53       	subi	r28, 0x30	; 48
    53f2:	d1 40       	sbci	r29, 0x01	; 1
    53f4:	0f b6       	in	r0, 0x3f	; 63
    53f6:	f8 94       	cli
    53f8:	de bf       	out	0x3e, r29	; 62
    53fa:	0f be       	out	0x3f, r0	; 63
    53fc:	cd bf       	out	0x3d, r28	; 61
	uint8_t		*src;
	uint8_t		*dst;
	uint8_t		mixer_buffer[V1_3_OLDSIZE * 8];	// 38 * 8 = 304 bytes

	// Copy the old channel[] structure into buffer
	memcpy((void*)mixer_buffer, (void*)((&Config.setup) + (CHANNEL_V1_3_B14)), (V1_3_OLDSIZE * 8)); // 148, 38
    53fe:	80 e3       	ldi	r24, 0x30	; 48
    5400:	91 e0       	ldi	r25, 0x01	; 1
    5402:	ed ec       	ldi	r30, 0xCD	; 205
    5404:	f6 e0       	ldi	r31, 0x06	; 6
    5406:	de 01       	movw	r26, r28
    5408:	11 96       	adiw	r26, 0x01	; 1
    540a:	01 90       	ld	r0, Z+
    540c:	0d 92       	st	X+, r0
    540e:	01 97       	sbiw	r24, 0x01	; 1
    5410:	e1 f7       	brne	.-8      	; 0x540a <Update_V1_3B14_to_V1_3B15+0x26>
    5412:	ce 01       	movw	r24, r28
    5414:	01 96       	adiw	r24, 0x01	; 1
    5416:	20 e0       	ldi	r18, 0x00	; 0
    5418:	30 e0       	ldi	r19, 0x00	; 0
	{
		dst = (void*)((&Config.setup) + (CHANNEL_V1_3_B15)); // 148
		src = (void*)mixer_buffer;
		dst += (i * V1_3_NEWSIZE);			// Step to next location for new data in the buffer
		src += (i * V1_3_OLDSIZE);			// Step to next old data in (corrupted) config structure
		memcpy(dst, src, 5);				// Move the five bytes (P1_value, P2_value and Motor_marker bytes)
    541a:	45 e0       	ldi	r20, 0x05	; 5
    541c:	d9 01       	movw	r26, r18
    541e:	a3 53       	subi	r26, 0x33	; 51
    5420:	b9 4f       	sbci	r27, 0xF9	; 249
    5422:	fc 01       	movw	r30, r24
    5424:	54 2f       	mov	r21, r20
    5426:	01 90       	ld	r0, Z+
    5428:	0d 92       	st	X+, r0
    542a:	5a 95       	dec	r21
    542c:	e1 f7       	brne	.-8      	; 0x5426 <Update_V1_3B14_to_V1_3B15+0x42>
    542e:	2e 5d       	subi	r18, 0xDE	; 222
    5430:	3f 4f       	sbci	r19, 0xFF	; 255
    5432:	86 96       	adiw	r24, 0x26	; 38
	// Copy the old channel[] structure into buffer
	memcpy((void*)mixer_buffer, (void*)((&Config.setup) + (CHANNEL_V1_3_B14)), (V1_3_OLDSIZE * 8)); // 148, 38

	// Copy the old channel[] structure out of the buffer buffer, compressed to match the new (smaller) structure
	// Start with the P1_value, P2_value and Motor_marker bytes (5 bytes)
	for (i = 0; i < MAX_OUTPUTS; i++)
    5434:	20 31       	cpi	r18, 0x10	; 16
    5436:	51 e0       	ldi	r21, 0x01	; 1
    5438:	35 07       	cpc	r19, r21
    543a:	81 f7       	brne	.-32     	; 0x541c <Update_V1_3B14_to_V1_3B15+0x38>
    543c:	9e 01       	movw	r18, r28
    543e:	26 5f       	subi	r18, 0xF6	; 246
    5440:	3f 4f       	sbci	r19, 0xFF	; 255
    5442:	80 e0       	ldi	r24, 0x00	; 0
    5444:	90 e0       	ldi	r25, 0x00	; 0
		dst = (void*)((&Config.setup) + (P1_THR_V1_3_B15)); // 153
		src = (void*)mixer_buffer;
		src += (P1_THR_V1_3_B14 - CHANNEL_V1_3_B15);	// 9 byte offset to P1_throttle_volume. 157 - 148 = 9
		dst += (i * V1_3_NEWSIZE);						// Step to next location for new data in the buffer
		src += (i * V1_3_OLDSIZE);						// Step to next old data in (corrupted) config structure
		memcpy(dst, src, 29);							// Move the 29 bytes (P1_throttle_volume to end)
    5446:	4d e1       	ldi	r20, 0x1D	; 29
    5448:	dc 01       	movw	r26, r24
    544a:	ae 52       	subi	r26, 0x2E	; 46
    544c:	b9 4f       	sbci	r27, 0xF9	; 249
    544e:	f9 01       	movw	r30, r18
    5450:	54 2f       	mov	r21, r20
    5452:	01 90       	ld	r0, Z+
    5454:	0d 92       	st	X+, r0
    5456:	5a 95       	dec	r21
    5458:	e1 f7       	brne	.-8      	; 0x5452 <Update_V1_3B14_to_V1_3B15+0x6e>
    545a:	82 96       	adiw	r24, 0x22	; 34
    545c:	2a 5d       	subi	r18, 0xDA	; 218
    545e:	3f 4f       	sbci	r19, 0xFF	; 255
		memcpy(dst, src, 5);				// Move the five bytes (P1_value, P2_value and Motor_marker bytes)
	}

	// Copy the rest of the old channel[] structure out of the buffer buffer, compressed to match the new (smaller) structure
	// Start with the P1_throttle_volume and end with the P2_source_b_volume byte (29 bytes)
	for (i = 0; i < MAX_OUTPUTS; i++)
    5460:	80 31       	cpi	r24, 0x10	; 16
    5462:	a1 e0       	ldi	r26, 0x01	; 1
    5464:	9a 07       	cpc	r25, r26
    5466:	81 f7       	brne	.-32     	; 0x5448 <Update_V1_3B14_to_V1_3B15+0x64>
		src += (i * V1_3_OLDSIZE);						// Step to next old data in (corrupted) config structure
		memcpy(dst, src, 29);							// Move the 29 bytes (P1_throttle_volume to end)
	}

	// Move data that exists after the B14 channel mixer to new location
	memmove((void*)((&Config.setup) + (SERVOREV_V1_3B15)), (void*)((&Config.setup) + (SERVOREV_V1_3B14)), (LAST_BYTE_V1_3B14 - SERVOREV_V1_3B14)); // (619-452 = 167 bytes)
    5468:	47 ea       	ldi	r20, 0xA7	; 167
    546a:	50 e0       	ldi	r21, 0x00	; 0
    546c:	6d ef       	ldi	r22, 0xFD	; 253
    546e:	77 e0       	ldi	r23, 0x07	; 7
    5470:	8d ed       	ldi	r24, 0xDD	; 221
    5472:	97 e0       	ldi	r25, 0x07	; 7
    5474:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>

	// Clear new offset curves to zero (flat)
	memset((void*)((&Config.setup) + (OFFSETS_V1_3_B15)), 0, (sizeof(curve_t) * MAX_OUTPUTS));
    5478:	10 e4       	ldi	r17, 0x40	; 64
    547a:	e5 e8       	ldi	r30, 0x85	; 133
    547c:	f8 e0       	ldi	r31, 0x08	; 8
    547e:	df 01       	movw	r26, r30
    5480:	51 2f       	mov	r21, r17
    5482:	1d 92       	st	X+, r1
    5484:	5a 95       	dec	r21
    5486:	e9 f7       	brne	.-6      	; 0x5482 <Update_V1_3B14_to_V1_3B15+0x9e>

	// Adjust for new Config.Transition_P1, Config.Transition_P2 variables
	// Copy Config.TransitionSpeedOut locally
	memcpy((void*)&Transition_P1n, (void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), 1);
    5488:	00 91 69 06 	lds	r16, 0x0669
	
	// Move everything from Config.Transition_P1n up by two bytes to make room for new variables
	memmove((void*)((&Config.setup) + (RCITEMS_V1_0 + 9)), (void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), (LAST_BYTE_V1_3B15 - (RCITEMS_V1_0 + 7))); // 653 - (41 + 7) = 605 bytes)
    548c:	4d e5       	ldi	r20, 0x5D	; 93
    548e:	52 e0       	ldi	r21, 0x02	; 2
    5490:	69 e6       	ldi	r22, 0x69	; 105
    5492:	76 e0       	ldi	r23, 0x06	; 6
    5494:	8b e6       	ldi	r24, 0x6B	; 107
    5496:	96 e0       	ldi	r25, 0x06	; 6
    5498:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>

	// Preset new variables
	Config.Transition_P1 = 0;
    549c:	10 92 69 06 	sts	0x0669, r1
	Config.Transition_P1n = Transition_P1n;
    54a0:	00 93 6a 06 	sts	0x066A, r16
	Config.Transition_P2 = 100;
    54a4:	84 e6       	ldi	r24, 0x64	; 100
    54a6:	80 93 6b 06 	sts	0x066B, r24
		
	// Set magic number to V1.3 B15 signature
	Config.setup = V1_3_B15_SIGNATURE;
    54aa:	10 93 39 06 	sts	0x0639, r17
}
    54ae:	c0 5d       	subi	r28, 0xD0	; 208
    54b0:	de 4f       	sbci	r29, 0xFE	; 254
    54b2:	0f b6       	in	r0, 0x3f	; 63
    54b4:	f8 94       	cli
    54b6:	de bf       	out	0x3e, r29	; 62
    54b8:	0f be       	out	0x3f, r0	; 63
    54ba:	cd bf       	out	0x3d, r28	; 61
    54bc:	df 91       	pop	r29
    54be:	cf 91       	pop	r28
    54c0:	1f 91       	pop	r17
    54c2:	0f 91       	pop	r16
    54c4:	08 95       	ret

000054c6 <Update_V1_3B15_to_V1_3B17>:

void Update_V1_3B15_to_V1_3B17(void)
{
    54c6:	e4 e0       	ldi	r30, 0x04	; 4
    54c8:	f7 e0       	ldi	r31, 0x07	; 7

	// Fix any sources that have "NONE" to match new source list.
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// V1.3 B15 "NONE" will read as "Alt. Damp in B17
		if (Config.Channel[i].P1_source_a == SRC20) Config.Channel[i].P1_source_a = NOMIX;
    54ca:	84 e1       	ldi	r24, 0x14	; 20
    54cc:	df 01       	movw	r26, r30
    54ce:	16 97       	sbiw	r26, 0x06	; 6
    54d0:	9c 91       	ld	r25, X
    54d2:	93 31       	cpi	r25, 0x13	; 19
    54d4:	09 f4       	brne	.+2      	; 0x54d8 <Update_V1_3B15_to_V1_3B17+0x12>
    54d6:	8c 93       	st	X, r24
    54d8:	df 01       	movw	r26, r30
    54da:	12 97       	sbiw	r26, 0x02	; 2
		if (Config.Channel[i].P1_source_b == SRC20) Config.Channel[i].P1_source_b = NOMIX;
    54dc:	9c 91       	ld	r25, X
    54de:	93 31       	cpi	r25, 0x13	; 19
    54e0:	09 f4       	brne	.+2      	; 0x54e4 <Update_V1_3B15_to_V1_3B17+0x1e>
    54e2:	8c 93       	st	X, r24
    54e4:	df 01       	movw	r26, r30
    54e6:	14 97       	sbiw	r26, 0x04	; 4
		if (Config.Channel[i].P2_source_a == SRC20) Config.Channel[i].P2_source_a = NOMIX;
    54e8:	9c 91       	ld	r25, X
    54ea:	93 31       	cpi	r25, 0x13	; 19
    54ec:	09 f4       	brne	.+2      	; 0x54f0 <Update_V1_3B15_to_V1_3B17+0x2a>
    54ee:	8c 93       	st	X, r24
		if (Config.Channel[i].P2_source_b == SRC20) Config.Channel[i].P2_source_b = NOMIX;
    54f0:	90 81       	ld	r25, Z
    54f2:	93 31       	cpi	r25, 0x13	; 19
    54f4:	09 f4       	brne	.+2      	; 0x54f8 <Update_V1_3B15_to_V1_3B17+0x32>
    54f6:	80 83       	st	Z, r24
    54f8:	b2 96       	adiw	r30, 0x22	; 34
void Update_V1_3B15_to_V1_3B17(void)
{
	uint8_t		i;

	// Fix any sources that have "NONE" to match new source list.
	for (i = 0; i < MAX_OUTPUTS; i++)
    54fa:	98 e0       	ldi	r25, 0x08	; 8
    54fc:	e4 31       	cpi	r30, 0x14	; 20
    54fe:	f9 07       	cpc	r31, r25
    5500:	29 f7       	brne	.-54     	; 0x54cc <Update_V1_3B15_to_V1_3B17+0x6>
		if (Config.Channel[i].P2_source_a == SRC20) Config.Channel[i].P2_source_a = NOMIX;
		if (Config.Channel[i].P2_source_b == SRC20) Config.Channel[i].P2_source_b = NOMIX;
	}
	
	// Set magic number to V1.3 B17 signature
	Config.setup = V1_3_B17_SIGNATURE;	
    5502:	81 e4       	ldi	r24, 0x41	; 65
    5504:	80 93 39 06 	sts	0x0639, r24
    5508:	08 95       	ret

0000550a <Update_V1_3_to_V1_4B2>:
}

void Update_V1_3_to_V1_4B2(void)
{
    550a:	ff 92       	push	r15
    550c:	0f 93       	push	r16
    550e:	1f 93       	push	r17
    5510:	cf 93       	push	r28
    5512:	df 93       	push	r29
	int8_t elevator_polarity = 0;
	
	// Copy elevator_polarity locally
	memcpy((void*)&elevator_polarity, (void*)((&Config.setup) + (ELE_POL_V1_3)), 1);
    5514:	c9 e3       	ldi	r28, 0x39	; 57
    5516:	d6 e0       	ldi	r29, 0x06	; 6
    5518:	fc a8       	ldd	r15, Y+52	; 0x34
	
	// Set the new AccVertFilter to the default of 20 (old elevator polarity location)
	memset((void*)((&Config.setup) + (ELE_POL_V1_3)), 20, 1);
    551a:	14 e1       	ldi	r17, 0x14	; 20
    551c:	10 93 6d 06 	sts	0x066D, r17
	
	// Move everything from Config.PowerTriggerActual down by 12 bytes to make room for new variables
	memmove((void*)((&Config.setup) + (POWER_TRIG_V1_4)), (void*)((&Config.setup) + (POWER_TRIG_V1_3)), (LAST_BYTE_V1_3B15 - POWER_TRIG_V1_3)); // 653 - 137 = 516 bytes
    5520:	44 e0       	ldi	r20, 0x04	; 4
    5522:	52 e0       	ldi	r21, 0x02	; 2
    5524:	62 ec       	ldi	r22, 0xC2	; 194
    5526:	76 e0       	ldi	r23, 0x06	; 6
    5528:	86 ed       	ldi	r24, 0xD6	; 214
    552a:	96 e0       	ldi	r25, 0x06	; 6
    552c:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>
	
	// Move raw I constraints down 8 bytes
	memmove((void*)((&Config.setup) + (SERVO_CONS_V1_4B8)), (void*)((&Config.setup) + (SERVO_CONS_V1_3)), 24); // 4 x [FLIGHT_MODES][NUMBEROFAXIS] = 24 bytes
    5530:	48 e1       	ldi	r20, 0x18	; 24
    5532:	50 e0       	ldi	r21, 0x00	; 0
    5534:	6a ea       	ldi	r22, 0xAA	; 170
    5536:	76 e0       	ldi	r23, 0x06	; 6
    5538:	86 eb       	ldi	r24, 0xB6	; 182
    553a:	96 e0       	ldi	r25, 0x06	; 6
    553c:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>
	
	// Clear all the I-term constraints as they will be recalculated
	memset((void*)((&Config.setup) + (SERVO_CONS_V1_4B8)), 0, 32);
    5540:	00 e2       	ldi	r16, 0x20	; 32
    5542:	e6 eb       	ldi	r30, 0xB6	; 182
    5544:	f6 e0       	ldi	r31, 0x06	; 6
    5546:	df 01       	movw	r26, r30
    5548:	80 2f       	mov	r24, r16
    554a:	1d 92       	st	X+, r1
    554c:	8a 95       	dec	r24
    554e:	e9 f7       	brne	.-6      	; 0x554a <Update_V1_3_to_V1_4B2+0x40>
	
	// Move raw I limits down 4 bytes
	memmove((void*)((&Config.setup) + (SERVO_LIMS_V1_4B8)), (void*)((&Config.setup) + (SERVO_LIMS_V1_3)), 24); // 4 x [FLIGHT_MODES][NUMBEROFAXIS] = 24 bytes
    5550:	48 e1       	ldi	r20, 0x18	; 24
    5552:	50 e0       	ldi	r21, 0x00	; 0
    5554:	62 e9       	ldi	r22, 0x92	; 146
    5556:	76 e0       	ldi	r23, 0x06	; 6
    5558:	86 e9       	ldi	r24, 0x96	; 150
    555a:	96 e0       	ldi	r25, 0x06	; 6
    555c:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>
	
	// Clear all the I-term limits as they will be recalculated
	memset((void*)((&Config.setup) + (SERVO_LIMS_V1_4B8)), 0, 32);
    5560:	e6 e9       	ldi	r30, 0x96	; 150
    5562:	f6 e0       	ldi	r31, 0x06	; 6
    5564:	df 01       	movw	r26, r30
    5566:	1d 92       	st	X+, r1
    5568:	0a 95       	dec	r16
    556a:	e9 f7       	brne	.-6      	; 0x5566 <Update_V1_3_to_V1_4B2+0x5c>
	
	
	// Move P2 profile down 2 bytes
	memmove((void*)((&Config.setup) + (P2_PROFILE_V1_4B8)), (void*)((&Config.setup) + (P2_PROFILE_V1_3)), (P2_PROFILE_V1_4B8 - P1_PROFILE_V1_4B8)); // (73 - 53 = 18 bytes)
    556c:	44 e1       	ldi	r20, 0x14	; 20
    556e:	50 e0       	ldi	r21, 0x00	; 0
    5570:	60 e8       	ldi	r22, 0x80	; 128
    5572:	76 e0       	ldi	r23, 0x06	; 6
    5574:	82 e8       	ldi	r24, 0x82	; 130
    5576:	96 e0       	ldi	r25, 0x06	; 6
    5578:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>

	// Set the new Z parameters for P1
	memset((void*)((&Config.setup) + (P1_PROFILE_V1_4B8 + 17)), 40, 1);
    557c:	88 e2       	ldi	r24, 0x28	; 40
    557e:	80 93 7f 06 	sts	0x067F, r24
	memset((void*)((&Config.setup) + (P1_PROFILE_V1_4B8 + 18)), 20, 1);
    5582:	10 93 80 06 	sts	0x0680, r17
	memset((void*)((&Config.setup) + (P1_PROFILE_V1_4B8 + 19)), 10, 1);
    5586:	8a e0       	ldi	r24, 0x0A	; 10
    5588:	80 93 81 06 	sts	0x0681, r24

	// Set the new Z parameters for P2
	memset((void*)((&Config.setup) + (P2_PROFILE_V1_4B8 + 17)), 0, 3);
    558c:	10 92 93 06 	sts	0x0693, r1
    5590:	10 92 94 06 	sts	0x0694, r1
    5594:	10 92 95 06 	sts	0x0695, r1
			
	// Preset new variable to same as elevator_polarity
	memset((void*)((&Config.setup) + (ELE_POL_V1_4B8)), elevator_polarity, 1);
    5598:	f0 92 db 08 	sts	0x08DB, r15
	//Config.ElevatorPol = elevator_polarity;

	// Set magic number to V1.4 B2 signature
	Config.setup = V1_4_B2_SIGNATURE;	
    559c:	82 e4       	ldi	r24, 0x42	; 66
    559e:	88 83       	st	Y, r24
}
    55a0:	df 91       	pop	r29
    55a2:	cf 91       	pop	r28
    55a4:	1f 91       	pop	r17
    55a6:	0f 91       	pop	r16
    55a8:	ff 90       	pop	r15
    55aa:	08 95       	ret

000055ac <Update_V1_4B2_to_V1_4B8>:

void Update_V1_4B2_to_V1_4B8(void)
{
	// Move everything from Config.Buzzer down by 1 byte to make room for Config.Buzzer
	memmove((void*)((&Config.setup) + (BUZZER_V1_4B2 + 1)), (void*)((&Config.setup) + (BUZZER_V1_4B2)), (LAST_BYTE_V1_4B2 - BUZZER_V1_4B2)); // 674 - 170 = 504 bytes
    55ac:	48 ef       	ldi	r20, 0xF8	; 248
    55ae:	51 e0       	ldi	r21, 0x01	; 1
    55b0:	63 ee       	ldi	r22, 0xE3	; 227
    55b2:	76 e0       	ldi	r23, 0x06	; 6
    55b4:	84 ee       	ldi	r24, 0xE4	; 228
    55b6:	96 e0       	ldi	r25, 0x06	; 6
    55b8:	0e 94 c1 6f 	call	0xdf82	; 0xdf82 <memmove>

	// Preset Buzzer to ON
	memset((void*)((&Config.setup) + (BUZZER_V1_4B2)), ON, 1);
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	80 93 e3 06 	sts	0x06E3, r24

	// Set magic number to V1.4 B8 signature
	Config.setup = V1_4_B8_SIGNATURE;	
    55c2:	83 e4       	ldi	r24, 0x43	; 67
    55c4:	80 93 39 06 	sts	0x0639, r24
    55c8:	08 95       	ret

000055ca <Load_eeprom_preset>:
	Load_eeprom_preset(QUADX);
	Config.Preset = OPTIONS; // Menu will display "Options"
}

void Load_eeprom_preset(uint8_t preset)
{
    55ca:	cf 93       	push	r28
	uint8_t i;

	// Erase current profile settings
	memset(&Config.FlightMode[P1],0,sizeof(flight_control_t));
    55cc:	94 e1       	ldi	r25, 0x14	; 20
    55ce:	ee e6       	ldi	r30, 0x6E	; 110
    55d0:	f6 e0       	ldi	r31, 0x06	; 6
    55d2:	df 01       	movw	r26, r30
    55d4:	29 2f       	mov	r18, r25
    55d6:	1d 92       	st	X+, r1
    55d8:	2a 95       	dec	r18
    55da:	e9 f7       	brne	.-6      	; 0x55d6 <Load_eeprom_preset+0xc>
	memset(&Config.FlightMode[P2],0,sizeof(flight_control_t));
    55dc:	e2 e8       	ldi	r30, 0x82	; 130
    55de:	f6 e0       	ldi	r31, 0x06	; 6
    55e0:	df 01       	movw	r26, r30
    55e2:	1d 92       	st	X+, r1
    55e4:	9a 95       	dec	r25
    55e6:	e9 f7       	brne	.-6      	; 0x55e2 <Load_eeprom_preset+0x18>

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);
    55e8:	20 e1       	ldi	r18, 0x10	; 16
    55ea:	31 e0       	ldi	r19, 0x01	; 1
    55ec:	e4 ee       	ldi	r30, 0xE4	; 228
    55ee:	f6 e0       	ldi	r31, 0x06	; 6
    55f0:	df 01       	movw	r26, r30
    55f2:	a9 01       	movw	r20, r18
    55f4:	1d 92       	st	X+, r1
    55f6:	41 50       	subi	r20, 0x01	; 1
    55f8:	50 40       	sbci	r21, 0x00	; 0
    55fa:	e1 f7       	brne	.-8      	; 0x55f4 <Load_eeprom_preset+0x2a>
    55fc:	a4 e0       	ldi	r26, 0x04	; 4
    55fe:	b8 e0       	ldi	r27, 0x08	; 8
    5600:	60 e0       	ldi	r22, 0x00	; 0
    5602:	70 e0       	ldi	r23, 0x00	; 0

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5604:	94 e1       	ldi	r25, 0x14	; 20
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    5606:	cc e9       	ldi	r28, 0x9C	; 156
		Config.max_travel[i] = 100;
    5608:	54 e6       	ldi	r21, 0x64	; 100
    560a:	9b 01       	movw	r18, r22
    560c:	27 5c       	subi	r18, 0xC7	; 199
    560e:	39 4f       	sbci	r19, 0xF9	; 249
    5610:	f9 01       	movw	r30, r18
    5612:	eb 53       	subi	r30, 0x3B	; 59
    5614:	ff 4f       	sbci	r31, 0xFF	; 255
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5616:	44 e1       	ldi	r20, 0x14	; 20
    5618:	90 83       	st	Z, r25
    561a:	34 96       	adiw	r30, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    561c:	90 83       	st	Z, r25
    561e:	32 97       	sbiw	r30, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    5620:	90 83       	st	Z, r25
    5622:	34 96       	adiw	r30, 0x04	; 4
		Config.Channel[i].P2_source_b 	= NOMIX;
    5624:	90 83       	st	Z, r25
    5626:	fd 01       	movw	r30, r26
    5628:	38 97       	sbiw	r30, 0x08	; 8
		Config.min_travel[i] = -100;
    562a:	c0 83       	st	Z, r28
		Config.max_travel[i] = 100;
    562c:	24 e6       	ldi	r18, 0x64	; 100
    562e:	5d 93       	st	X+, r21
    5630:	6e 5d       	subi	r22, 0xDE	; 222
    5632:	7f 4f       	sbci	r23, 0xFF	; 255

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    5634:	60 31       	cpi	r22, 0x10	; 16
    5636:	31 e0       	ldi	r19, 0x01	; 1
    5638:	73 07       	cpc	r23, r19
    563a:	39 f7       	brne	.-50     	; 0x560a <Load_eeprom_preset+0x40>
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	switch (preset)
    563c:	81 30       	cpi	r24, 0x01	; 1
    563e:	61 f0       	breq	.+24     	; 0x5658 <Load_eeprom_preset+0x8e>
    5640:	08 f4       	brcc	.+2      	; 0x5644 <Load_eeprom_preset+0x7a>
    5642:	e7 c0       	rjmp	.+462    	; 0x5812 <Load_eeprom_preset+0x248>
    5644:	82 30       	cpi	r24, 0x02	; 2
    5646:	09 f4       	brne	.+2      	; 0x564a <Load_eeprom_preset+0x80>
    5648:	b3 c1       	rjmp	.+870    	; 0x59b0 <Load_eeprom_preset+0x3e6>
    564a:	83 30       	cpi	r24, 0x03	; 3
    564c:	09 f0       	breq	.+2      	; 0x5650 <Load_eeprom_preset+0x86>
    564e:	83 c2       	rjmp	.+1286   	; 0x5b56 <Load_eeprom_preset+0x58c>
	{
		case BLANK:
			Config.ArmMode = ARMABLE;
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	80 93 db 06 	sts	0x06DB, r24
	
			break;
    5656:	7f c2       	rjmp	.+1278   	; 0x5b56 <Load_eeprom_preset+0x58c>
		
		case QUADP:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    5658:	80 93 db 06 	sts	0x06DB, r24
	
			// Preset AccVertFilter
			Config.AccVertFilter = 20;
    565c:	40 93 6d 06 	sts	0x066D, r20

			// Preset Z-terms for all
			Config.FlightMode[P1].A_Zed_P_mult = 40;
    5660:	28 e2       	ldi	r18, 0x28	; 40
    5662:	20 93 7f 06 	sts	0x067F, r18
			Config.FlightMode[P1].A_Zed_I_mult = 20;
    5666:	40 93 80 06 	sts	0x0680, r20
			Config.FlightMode[P1].A_Zed_limit = 10;
    566a:	9a e0       	ldi	r25, 0x0A	; 10
    566c:	90 93 81 06 	sts	0x0681, r25
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 50;
    5670:	42 e3       	ldi	r20, 0x32	; 50
    5672:	40 93 6e 06 	sts	0x066E, r20
			Config.FlightMode[P1].Roll_I_mult = 10;
    5676:	90 93 6f 06 	sts	0x066F, r25
			Config.FlightMode[P1].Roll_limit = 10;
    567a:	90 93 70 06 	sts	0x0670, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    567e:	32 e0       	ldi	r19, 0x02	; 2
    5680:	30 93 71 06 	sts	0x0671, r19
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    5684:	90 93 72 06 	sts	0x0672, r25
			
			Config.FlightMode[P1].Pitch_P_mult = 50;
    5688:	40 93 74 06 	sts	0x0674, r20
			Config.FlightMode[P1].Pitch_I_mult = 10;
    568c:	90 93 75 06 	sts	0x0675, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    5690:	90 93 76 06 	sts	0x0676, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    5694:	30 93 77 06 	sts	0x0677, r19
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    5698:	90 93 78 06 	sts	0x0678, r25
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    569c:	5c e3       	ldi	r21, 0x3C	; 60
    569e:	50 93 7a 06 	sts	0x067A, r21
			Config.FlightMode[P1].Yaw_I_mult = 40;
    56a2:	20 93 7b 06 	sts	0x067B, r18
			Config.FlightMode[P1].Yaw_limit = 25;
    56a6:	49 e1       	ldi	r20, 0x19	; 25
    56a8:	40 93 7c 06 	sts	0x067C, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    56ac:	30 93 7d 06 	sts	0x067D, r19
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    56b0:	20 93 82 06 	sts	0x0682, r18
			Config.FlightMode[P2].Roll_I_mult = 19;
    56b4:	63 e1       	ldi	r22, 0x13	; 19
    56b6:	60 93 83 06 	sts	0x0683, r22
			Config.FlightMode[P2].Roll_limit = 14;
    56ba:	3e e0       	ldi	r19, 0x0E	; 14
    56bc:	30 93 84 06 	sts	0x0684, r19
			Config.FlightMode[P2].Roll_Rate = 3;
    56c0:	93 e0       	ldi	r25, 0x03	; 3
    56c2:	90 93 85 06 	sts	0x0685, r25
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    56c6:	80 93 86 06 	sts	0x0686, r24
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    56ca:	20 93 88 06 	sts	0x0688, r18
			Config.FlightMode[P2].Pitch_I_mult = 19;
    56ce:	60 93 89 06 	sts	0x0689, r22
			Config.FlightMode[P2].Pitch_limit = 14;
    56d2:	30 93 8a 06 	sts	0x068A, r19
			Config.FlightMode[P2].Pitch_Rate = 3;
    56d6:	90 93 8b 06 	sts	0x068B, r25
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    56da:	80 93 8c 06 	sts	0x068C, r24
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    56de:	50 93 8e 06 	sts	0x068E, r21
			Config.FlightMode[P2].Yaw_I_mult = 40;
    56e2:	20 93 8f 06 	sts	0x068F, r18
			Config.FlightMode[P2].Yaw_limit = 25;
    56e6:	40 93 90 06 	sts	0x0690, r20
			Config.FlightMode[P2].Yaw_Rate = 3;
    56ea:	90 93 91 06 	sts	0x0691, r25
    56ee:	40 e0       	ldi	r20, 0x00	; 0
    56f0:	50 e0       	ldi	r21, 0x00	; 0
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    56f2:	74 e6       	ldi	r23, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    56f4:	a2 e0       	ldi	r26, 0x02	; 2
				Config.Channel[i].P1_Z_delta_acc = ON;
    56f6:	61 e0       	ldi	r22, 0x01	; 1
    56f8:	9a 01       	movw	r18, r20
    56fa:	27 5c       	subi	r18, 0xC7	; 199
    56fc:	39 4f       	sbci	r19, 0xF9	; 249
    56fe:	f9 01       	movw	r30, r18
    5700:	e0 55       	subi	r30, 0x50	; 80
    5702:	ff 4f       	sbci	r31, 0xFF	; 255
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5704:	94 e6       	ldi	r25, 0x64	; 100
    5706:	70 83       	st	Z, r23
    5708:	31 96       	adiw	r30, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    570a:	70 83       	st	Z, r23
    570c:	32 97       	sbiw	r30, 0x02	; 2
				Config.Channel[i].Motor_marker = MOTOR;
    570e:	a0 83       	st	Z, r26
    5710:	74 96       	adiw	r30, 0x14	; 20
				Config.Channel[i].P1_Z_delta_acc = ON;
    5712:	81 e0       	ldi	r24, 0x01	; 1
    5714:	60 83       	st	Z, r22
    5716:	31 96       	adiw	r30, 0x01	; 1
				Config.Channel[i].P2_Z_delta_acc = ON;
    5718:	60 83       	st	Z, r22
    571a:	4e 5d       	subi	r20, 0xDE	; 222
    571c:	5f 4f       	sbci	r21, 0xFF	; 255
			Config.FlightMode[P2].Yaw_P_mult = 60;
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
	
			for (i = 0; i <= OUT4; i++)
    571e:	48 38       	cpi	r20, 0x88	; 136
    5720:	51 05       	cpc	r21, r1
    5722:	51 f7       	brne	.-44     	; 0x56f8 <Load_eeprom_preset+0x12e>
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 0;
			Config.Channel[OUT1].P2_aileron_volume = 0;
			Config.Channel[OUT1].P1_elevator_volume = -20;
    5724:	2c ee       	ldi	r18, 0xEC	; 236
    5726:	20 93 ee 06 	sts	0x06EE, r18
			Config.Channel[OUT1].P2_elevator_volume = -30;
    572a:	32 ee       	ldi	r19, 0xE2	; 226
    572c:	30 93 ef 06 	sts	0x06EF, r19
			Config.Channel[OUT1].P1_rudder_volume = -30;
    5730:	30 93 f0 06 	sts	0x06F0, r19
			Config.Channel[OUT1].P2_rudder_volume = -40;
    5734:	68 ed       	ldi	r22, 0xD8	; 216
    5736:	60 93 f1 06 	sts	0x06F1, r22
			Config.Channel[OUT1].P1_Pitch_gyro = ON;
    573a:	80 93 f4 06 	sts	0x06F4, r24
			Config.Channel[OUT1].P1_Pitch_acc = ON;
    573e:	80 93 fa 06 	sts	0x06FA, r24
			Config.Channel[OUT1].P2_Pitch_gyro = ON;
    5742:	80 93 f5 06 	sts	0x06F5, r24
			Config.Channel[OUT1].P2_Pitch_acc = ON;
    5746:	80 93 fb 06 	sts	0x06FB, r24
			Config.Channel[OUT1].P1_Yaw_gyro = ON;
    574a:	80 93 f6 06 	sts	0x06F6, r24
			Config.Channel[OUT1].P2_Yaw_gyro = ON;
    574e:	80 93 f7 06 	sts	0x06F7, r24
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -20;
    5752:	20 93 0e 07 	sts	0x070E, r18
			Config.Channel[OUT2].P2_aileron_volume = -30;
    5756:	30 93 0f 07 	sts	0x070F, r19
			Config.Channel[OUT2].P1_elevator_volume = 0;
			Config.Channel[OUT2].P2_elevator_volume = 0;
			Config.Channel[OUT2].P1_rudder_volume = 30;
    575a:	2e e1       	ldi	r18, 0x1E	; 30
    575c:	20 93 12 07 	sts	0x0712, r18
			Config.Channel[OUT2].P2_rudder_volume = 40;
    5760:	48 e2       	ldi	r20, 0x28	; 40
    5762:	40 93 13 07 	sts	0x0713, r20
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    5766:	80 93 14 07 	sts	0x0714, r24
			Config.Channel[OUT2].P1_Roll_acc = ON;
    576a:	80 93 1a 07 	sts	0x071A, r24
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    576e:	80 93 15 07 	sts	0x0715, r24
			Config.Channel[OUT2].P2_Roll_acc = ON;
    5772:	80 93 1b 07 	sts	0x071B, r24
			Config.Channel[OUT2].P1_Yaw_gyro = ON;
    5776:	80 93 18 07 	sts	0x0718, r24
			Config.Channel[OUT2].P2_Yaw_gyro = ON;
    577a:	80 93 19 07 	sts	0x0719, r24
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = 0;
			Config.Channel[OUT3].P2_aileron_volume = 0;
			Config.Channel[OUT3].P1_elevator_volume = 20;
    577e:	54 e1       	ldi	r21, 0x14	; 20
    5780:	50 93 32 07 	sts	0x0732, r21
			Config.Channel[OUT3].P2_elevator_volume = 30;
    5784:	20 93 33 07 	sts	0x0733, r18
			Config.Channel[OUT3].P1_rudder_volume = -30;
    5788:	30 93 34 07 	sts	0x0734, r19
			Config.Channel[OUT3].P2_rudder_volume = -40;
    578c:	60 93 35 07 	sts	0x0735, r22
			Config.Channel[OUT3].P1_Pitch_gyro = ON;
    5790:	80 93 38 07 	sts	0x0738, r24
			Config.Channel[OUT3].P1_Pitch_acc = ON;
    5794:	80 93 3e 07 	sts	0x073E, r24
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    5798:	80 93 39 07 	sts	0x0739, r24
			Config.Channel[OUT3].P2_Pitch_acc = ON;
    579c:	80 93 3f 07 	sts	0x073F, r24
			Config.Channel[OUT3].P1_Yaw_gyro = ON;
    57a0:	80 93 3a 07 	sts	0x073A, r24
			Config.Channel[OUT3].P2_Yaw_gyro = ON;
    57a4:	80 93 3b 07 	sts	0x073B, r24
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 20;
    57a8:	50 93 52 07 	sts	0x0752, r21
			Config.Channel[OUT4].P2_aileron_volume = 30;
    57ac:	20 93 53 07 	sts	0x0753, r18
			Config.Channel[OUT4].P1_elevator_volume = 0;
			Config.Channel[OUT4].P2_elevator_volume = 0;
			Config.Channel[OUT4].P1_rudder_volume = 30;
    57b0:	20 93 56 07 	sts	0x0756, r18
			Config.Channel[OUT4].P2_rudder_volume = 40;
    57b4:	40 93 57 07 	sts	0x0757, r20
			Config.Channel[OUT4].P1_Roll_gyro = ON;
    57b8:	80 93 58 07 	sts	0x0758, r24
			Config.Channel[OUT4].P1_Roll_acc = ON;
    57bc:	80 93 5e 07 	sts	0x075E, r24
			Config.Channel[OUT4].P2_Roll_gyro = ON;
    57c0:	80 93 59 07 	sts	0x0759, r24
			Config.Channel[OUT4].P2_Roll_acc = ON;
    57c4:	80 93 5f 07 	sts	0x075F, r24
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    57c8:	80 93 5c 07 	sts	0x075C, r24
			Config.Channel[OUT4].P2_Yaw_gyro = ON;		
    57cc:	80 93 5d 07 	sts	0x075D, r24

			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    57d0:	8b e4       	ldi	r24, 0x4B	; 75
    57d2:	80 93 76 07 	sts	0x0776, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    57d6:	90 93 77 07 	sts	0x0777, r25

			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    57da:	80 93 96 07 	sts	0x0796, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    57de:	90 93 97 07 	sts	0x0797, r25

			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    57e2:	80 93 bc 07 	sts	0x07BC, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    57e6:	90 93 bd 07 	sts	0x07BD, r25

			// OUT8
			Config.Offsets[OUT8].Point1 = -100;
    57ea:	8c e9       	ldi	r24, 0x9C	; 156
    57ec:	80 93 d4 08 	sts	0x08D4, r24
			Config.Offsets[OUT8].Point2 = -67;
    57f0:	8d eb       	ldi	r24, 0xBD	; 189
    57f2:	80 93 d5 08 	sts	0x08D5, r24
			Config.Offsets[OUT8].Point3 = -33;
    57f6:	8f ed       	ldi	r24, 0xDF	; 223
    57f8:	80 93 d6 08 	sts	0x08D6, r24
			Config.Offsets[OUT8].Point4 = 0;
    57fc:	10 92 d7 08 	sts	0x08D7, r1
			Config.Offsets[OUT8].Point5 = 33;
    5800:	81 e2       	ldi	r24, 0x21	; 33
    5802:	80 93 d8 08 	sts	0x08D8, r24
			Config.Offsets[OUT8].Point6 = 67;
    5806:	83 e4       	ldi	r24, 0x43	; 67
    5808:	80 93 d9 08 	sts	0x08D9, r24
			Config.Offsets[OUT8].Point7 = 100;	
    580c:	90 93 da 08 	sts	0x08DA, r25
			break;
    5810:	a2 c1       	rjmp	.+836    	; 0x5b56 <Load_eeprom_preset+0x58c>
				
		case QUADX:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    5812:	31 e0       	ldi	r19, 0x01	; 1
    5814:	30 93 db 06 	sts	0x06DB, r19

			// Preset AccVertFilter
			Config.AccVertFilter = 20;
    5818:	40 93 6d 06 	sts	0x066D, r20

			// Preset Z-terms for all
			Config.FlightMode[P1].A_Zed_P_mult = 40;
    581c:	88 e2       	ldi	r24, 0x28	; 40
    581e:	80 93 7f 06 	sts	0x067F, r24
			Config.FlightMode[P1].A_Zed_I_mult = 20;
    5822:	40 93 80 06 	sts	0x0680, r20
			Config.FlightMode[P1].A_Zed_limit = 10;
    5826:	9a e0       	ldi	r25, 0x0A	; 10
    5828:	90 93 81 06 	sts	0x0681, r25
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    582c:	80 93 6e 06 	sts	0x066E, r24
			Config.FlightMode[P1].Roll_I_mult = 10;
    5830:	90 93 6f 06 	sts	0x066F, r25
			Config.FlightMode[P1].Roll_limit = 10;
    5834:	90 93 70 06 	sts	0x0670, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    5838:	22 e0       	ldi	r18, 0x02	; 2
    583a:	20 93 71 06 	sts	0x0671, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    583e:	90 93 72 06 	sts	0x0672, r25
	
			Config.FlightMode[P1].Pitch_P_mult = 40;
    5842:	80 93 74 06 	sts	0x0674, r24
			Config.FlightMode[P1].Pitch_I_mult = 10;
    5846:	90 93 75 06 	sts	0x0675, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    584a:	90 93 76 06 	sts	0x0676, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    584e:	20 93 77 06 	sts	0x0677, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    5852:	90 93 78 06 	sts	0x0678, r25
	
			Config.FlightMode[P1].Yaw_P_mult = 60;
    5856:	4c e3       	ldi	r20, 0x3C	; 60
    5858:	40 93 7a 06 	sts	0x067A, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    585c:	80 93 7b 06 	sts	0x067B, r24
			Config.FlightMode[P1].Yaw_limit = 25;
    5860:	99 e1       	ldi	r25, 0x19	; 25
    5862:	90 93 7c 06 	sts	0x067C, r25
			Config.FlightMode[P1].Yaw_Rate = 2;
    5866:	20 93 7d 06 	sts	0x067D, r18
	
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    586a:	80 93 82 06 	sts	0x0682, r24
			Config.FlightMode[P2].Roll_I_mult = 19;
    586e:	73 e1       	ldi	r23, 0x13	; 19
    5870:	70 93 83 06 	sts	0x0683, r23
			Config.FlightMode[P2].Roll_limit = 14;
    5874:	6e e0       	ldi	r22, 0x0E	; 14
    5876:	60 93 84 06 	sts	0x0684, r22
			Config.FlightMode[P2].Roll_Rate = 3;
    587a:	53 e0       	ldi	r21, 0x03	; 3
    587c:	50 93 85 06 	sts	0x0685, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    5880:	30 93 86 06 	sts	0x0686, r19
	
			Config.FlightMode[P2].Pitch_P_mult = 40;
    5884:	80 93 88 06 	sts	0x0688, r24
			Config.FlightMode[P2].Pitch_I_mult = 19;
    5888:	70 93 89 06 	sts	0x0689, r23
			Config.FlightMode[P2].Pitch_limit = 14;
    588c:	60 93 8a 06 	sts	0x068A, r22
			Config.FlightMode[P2].Pitch_Rate = 3;
    5890:	50 93 8b 06 	sts	0x068B, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    5894:	30 93 8c 06 	sts	0x068C, r19
	
			Config.FlightMode[P2].Yaw_P_mult = 60;
    5898:	40 93 8e 06 	sts	0x068E, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    589c:	80 93 8f 06 	sts	0x068F, r24
			Config.FlightMode[P2].Yaw_limit = 25;
    58a0:	90 93 90 06 	sts	0x0690, r25
			Config.FlightMode[P2].Yaw_Rate = 2;
    58a4:	20 93 91 06 	sts	0x0691, r18
    58a8:	89 e3       	ldi	r24, 0x39	; 57
    58aa:	96 e0       	ldi	r25, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    58ac:	44 e6       	ldi	r20, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    58ae:	52 e0       	ldi	r21, 0x02	; 2
				Config.Channel[i].P1_Roll_gyro = ON;
    58b0:	21 e0       	ldi	r18, 0x01	; 1
    58b2:	fc 01       	movw	r30, r24
    58b4:	e0 55       	subi	r30, 0x50	; 80
    58b6:	ff 4f       	sbci	r31, 0xFF	; 255
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    58b8:	34 e6       	ldi	r19, 0x64	; 100
    58ba:	40 83       	st	Z, r20
    58bc:	31 96       	adiw	r30, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    58be:	40 83       	st	Z, r20
    58c0:	32 97       	sbiw	r30, 0x02	; 2
				Config.Channel[i].Motor_marker = MOTOR;
    58c2:	50 83       	st	Z, r21
    58c4:	3a 96       	adiw	r30, 0x0a	; 10
				Config.Channel[i].P1_Roll_gyro = ON;
    58c6:	20 83       	st	Z, r18
    58c8:	36 96       	adiw	r30, 0x06	; 6
				Config.Channel[i].P1_Roll_acc = ON;
    58ca:	20 83       	st	Z, r18
    58cc:	35 97       	sbiw	r30, 0x05	; 5
				Config.Channel[i].P2_Roll_gyro = ON;
    58ce:	20 83       	st	Z, r18
    58d0:	36 96       	adiw	r30, 0x06	; 6
				Config.Channel[i].P2_Roll_acc = ON;
    58d2:	20 83       	st	Z, r18
    58d4:	35 97       	sbiw	r30, 0x05	; 5
				Config.Channel[i].P1_Pitch_gyro = ON;
    58d6:	20 83       	st	Z, r18
    58d8:	36 96       	adiw	r30, 0x06	; 6
				Config.Channel[i].P1_Pitch_acc = ON;
    58da:	20 83       	st	Z, r18
    58dc:	35 97       	sbiw	r30, 0x05	; 5
				Config.Channel[i].P2_Pitch_gyro = ON;
    58de:	20 83       	st	Z, r18
    58e0:	36 96       	adiw	r30, 0x06	; 6
				Config.Channel[i].P2_Pitch_acc = ON;
    58e2:	20 83       	st	Z, r18
    58e4:	35 97       	sbiw	r30, 0x05	; 5
				Config.Channel[i].P1_Yaw_gyro = ON;
    58e6:	20 83       	st	Z, r18
    58e8:	31 96       	adiw	r30, 0x01	; 1
				Config.Channel[i].P2_Yaw_gyro = ON;
    58ea:	20 83       	st	Z, r18
    58ec:	35 96       	adiw	r30, 0x05	; 5
				Config.Channel[i].P1_Z_delta_acc = ON;
    58ee:	20 83       	st	Z, r18
    58f0:	31 96       	adiw	r30, 0x01	; 1
				Config.Channel[i].P2_Z_delta_acc = ON;
    58f2:	20 83       	st	Z, r18
    58f4:	82 96       	adiw	r24, 0x22	; 34
			Config.FlightMode[P2].Yaw_P_mult = 60;
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
	
			for (i = 0; i <= OUT4; i++)
    58f6:	66 e0       	ldi	r22, 0x06	; 6
    58f8:	81 3c       	cpi	r24, 0xC1	; 193
    58fa:	96 07       	cpc	r25, r22
    58fc:	d1 f6       	brne	.-76     	; 0x58b2 <Load_eeprom_preset+0x2e8>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 15;
    58fe:	9f e0       	ldi	r25, 0x0F	; 15
    5900:	90 93 ec 06 	sts	0x06EC, r25
			Config.Channel[OUT1].P2_aileron_volume = 20;
    5904:	84 e1       	ldi	r24, 0x14	; 20
    5906:	80 93 ed 06 	sts	0x06ED, r24
			Config.Channel[OUT1].P1_elevator_volume = -15;
    590a:	41 ef       	ldi	r20, 0xF1	; 241
    590c:	40 93 ee 06 	sts	0x06EE, r20
			Config.Channel[OUT1].P2_elevator_volume = -20;
    5910:	2c ee       	ldi	r18, 0xEC	; 236
    5912:	20 93 ef 06 	sts	0x06EF, r18
			Config.Channel[OUT1].P1_rudder_volume = -40;
    5916:	e8 ed       	ldi	r30, 0xD8	; 216
    5918:	e0 93 f0 06 	sts	0x06F0, r30
			Config.Channel[OUT1].P2_rudder_volume = -50;
    591c:	7e ec       	ldi	r23, 0xCE	; 206
    591e:	70 93 f1 06 	sts	0x06F1, r23
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -15;
    5922:	40 93 0e 07 	sts	0x070E, r20
			Config.Channel[OUT2].P2_aileron_volume = -20;
    5926:	20 93 0f 07 	sts	0x070F, r18
			Config.Channel[OUT2].P1_elevator_volume = -15;
    592a:	40 93 10 07 	sts	0x0710, r20
			Config.Channel[OUT2].P2_elevator_volume = -20;
    592e:	20 93 11 07 	sts	0x0711, r18
			Config.Channel[OUT2].P1_rudder_volume = 40;
    5932:	68 e2       	ldi	r22, 0x28	; 40
    5934:	60 93 12 07 	sts	0x0712, r22
			Config.Channel[OUT2].P2_rudder_volume = 50;
    5938:	52 e3       	ldi	r21, 0x32	; 50
    593a:	50 93 13 07 	sts	0x0713, r21
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = -15;
    593e:	40 93 30 07 	sts	0x0730, r20
			Config.Channel[OUT3].P2_aileron_volume = -20;
    5942:	20 93 31 07 	sts	0x0731, r18
			Config.Channel[OUT3].P1_elevator_volume = 15;
    5946:	90 93 32 07 	sts	0x0732, r25
			Config.Channel[OUT3].P2_elevator_volume = 20;
    594a:	80 93 33 07 	sts	0x0733, r24
			Config.Channel[OUT3].P1_rudder_volume = -40;
    594e:	e0 93 34 07 	sts	0x0734, r30
			Config.Channel[OUT3].P2_rudder_volume = -50;
    5952:	70 93 35 07 	sts	0x0735, r23
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 15;
    5956:	90 93 52 07 	sts	0x0752, r25
			Config.Channel[OUT4].P2_aileron_volume = 20;
    595a:	80 93 53 07 	sts	0x0753, r24
			Config.Channel[OUT4].P1_elevator_volume = 15;
    595e:	90 93 54 07 	sts	0x0754, r25
			Config.Channel[OUT4].P2_elevator_volume = 20;
    5962:	80 93 55 07 	sts	0x0755, r24
			Config.Channel[OUT4].P1_rudder_volume = 40;
    5966:	60 93 56 07 	sts	0x0756, r22
			Config.Channel[OUT4].P2_rudder_volume = 50;
    596a:	50 93 57 07 	sts	0x0757, r21

			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    596e:	8b e4       	ldi	r24, 0x4B	; 75
    5970:	80 93 76 07 	sts	0x0776, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    5974:	30 93 77 07 	sts	0x0777, r19
			
			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    5978:	80 93 96 07 	sts	0x0796, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    597c:	30 93 97 07 	sts	0x0797, r19
						
			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    5980:	80 93 bc 07 	sts	0x07BC, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    5984:	30 93 bd 07 	sts	0x07BD, r19
									
			// OUT8
			Config.Offsets[OUT8].Point1 = -100;
    5988:	8c e9       	ldi	r24, 0x9C	; 156
    598a:	80 93 d4 08 	sts	0x08D4, r24
			Config.Offsets[OUT8].Point2 = -67;
    598e:	8d eb       	ldi	r24, 0xBD	; 189
    5990:	80 93 d5 08 	sts	0x08D5, r24
			Config.Offsets[OUT8].Point3 = -33;
    5994:	8f ed       	ldi	r24, 0xDF	; 223
    5996:	80 93 d6 08 	sts	0x08D6, r24
			Config.Offsets[OUT8].Point4 = 0;
    599a:	10 92 d7 08 	sts	0x08D7, r1
			Config.Offsets[OUT8].Point5 = 33;
    599e:	81 e2       	ldi	r24, 0x21	; 33
    59a0:	80 93 d8 08 	sts	0x08D8, r24
			Config.Offsets[OUT8].Point6 = 67;
    59a4:	83 e4       	ldi	r24, 0x43	; 67
    59a6:	80 93 d9 08 	sts	0x08D9, r24
			Config.Offsets[OUT8].Point7 = 100;
    59aa:	30 93 da 08 	sts	0x08DA, r19
			break;
    59ae:	d3 c0       	rjmp	.+422    	; 0x5b56 <Load_eeprom_preset+0x58c>
		
		case TRICOPTER:
			// Preset simple mixing for primary channels
			Config.ArmMode = ARMABLE;
    59b0:	91 e0       	ldi	r25, 0x01	; 1
    59b2:	90 93 db 06 	sts	0x06DB, r25

			// Preset AccVertFilter
			Config.AccVertFilter = 20;
    59b6:	40 93 6d 06 	sts	0x066D, r20

			// Preset Z-terms for all
			Config.FlightMode[P1].A_Zed_P_mult = 40;
    59ba:	38 e2       	ldi	r19, 0x28	; 40
    59bc:	30 93 7f 06 	sts	0x067F, r19
			Config.FlightMode[P1].A_Zed_I_mult = 20;
    59c0:	40 93 80 06 	sts	0x0680, r20
			Config.FlightMode[P1].A_Zed_limit = 10;
    59c4:	4a e0       	ldi	r20, 0x0A	; 10
    59c6:	40 93 81 06 	sts	0x0681, r20
					
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    59ca:	30 93 6e 06 	sts	0x066E, r19
			Config.FlightMode[P1].Roll_I_mult = 10;
    59ce:	40 93 6f 06 	sts	0x066F, r20
			Config.FlightMode[P1].Roll_limit = 10;
    59d2:	40 93 70 06 	sts	0x0670, r20
			Config.FlightMode[P1].Roll_Rate = 2;
    59d6:	80 93 71 06 	sts	0x0671, r24
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    59da:	40 93 72 06 	sts	0x0672, r20
			
			Config.FlightMode[P1].Pitch_P_mult = 40;
    59de:	30 93 74 06 	sts	0x0674, r19
			Config.FlightMode[P1].Pitch_I_mult = 10;
    59e2:	40 93 75 06 	sts	0x0675, r20
			Config.FlightMode[P1].Pitch_limit = 10;
    59e6:	40 93 76 06 	sts	0x0676, r20
			Config.FlightMode[P1].Pitch_Rate = 2;
    59ea:	80 93 77 06 	sts	0x0677, r24
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    59ee:	40 93 78 06 	sts	0x0678, r20
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    59f2:	5c e3       	ldi	r21, 0x3C	; 60
    59f4:	50 93 7a 06 	sts	0x067A, r21
			Config.FlightMode[P1].Yaw_I_mult = 40;
    59f8:	30 93 7b 06 	sts	0x067B, r19
			Config.FlightMode[P1].Yaw_limit = 25;
    59fc:	49 e1       	ldi	r20, 0x19	; 25
    59fe:	40 93 7c 06 	sts	0x067C, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    5a02:	80 93 7d 06 	sts	0x067D, r24
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    5a06:	30 93 82 06 	sts	0x0682, r19
			Config.FlightMode[P2].Roll_I_mult = 19;
    5a0a:	e3 e1       	ldi	r30, 0x13	; 19
    5a0c:	e0 93 83 06 	sts	0x0683, r30
			Config.FlightMode[P2].Roll_limit = 14;
    5a10:	7e e0       	ldi	r23, 0x0E	; 14
    5a12:	70 93 84 06 	sts	0x0684, r23
			Config.FlightMode[P2].Roll_Rate = 3;
    5a16:	63 e0       	ldi	r22, 0x03	; 3
    5a18:	60 93 85 06 	sts	0x0685, r22
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    5a1c:	90 93 86 06 	sts	0x0686, r25
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    5a20:	30 93 88 06 	sts	0x0688, r19
			Config.FlightMode[P2].Pitch_I_mult = 19;
    5a24:	e0 93 89 06 	sts	0x0689, r30
			Config.FlightMode[P2].Pitch_limit = 14;
    5a28:	70 93 8a 06 	sts	0x068A, r23
			Config.FlightMode[P2].Pitch_Rate = 3;
    5a2c:	60 93 8b 06 	sts	0x068B, r22
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    5a30:	90 93 8c 06 	sts	0x068C, r25
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    5a34:	50 93 8e 06 	sts	0x068E, r21
			Config.FlightMode[P2].Yaw_I_mult = 40;
    5a38:	30 93 8f 06 	sts	0x068F, r19
			Config.FlightMode[P2].Yaw_limit = 25;
    5a3c:	40 93 90 06 	sts	0x0690, r20
			Config.FlightMode[P2].Yaw_Rate = 2;
    5a40:	80 93 91 06 	sts	0x0691, r24
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5a44:	20 93 e9 06 	sts	0x06E9, r18
				Config.Channel[i].P2_throttle_volume = 100;
    5a48:	20 93 ea 06 	sts	0x06EA, r18
				Config.Channel[i].Motor_marker = MOTOR;
    5a4c:	80 93 e8 06 	sts	0x06E8, r24
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5a50:	20 93 0b 07 	sts	0x070B, r18
				Config.Channel[i].P2_throttle_volume = 100;
    5a54:	20 93 0c 07 	sts	0x070C, r18
				Config.Channel[i].Motor_marker = MOTOR;
    5a58:	80 93 0a 07 	sts	0x070A, r24
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5a5c:	20 93 2d 07 	sts	0x072D, r18
				Config.Channel[i].P2_throttle_volume = 100;
    5a60:	20 93 2e 07 	sts	0x072E, r18
				Config.Channel[i].Motor_marker = MOTOR;
    5a64:	80 93 2c 07 	sts	0x072C, r24
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 30;
    5a68:	4e e1       	ldi	r20, 0x1E	; 30
    5a6a:	40 93 ec 06 	sts	0x06EC, r20
			Config.Channel[OUT1].P2_aileron_volume = 40;
    5a6e:	30 93 ed 06 	sts	0x06ED, r19
			Config.Channel[OUT1].P1_elevator_volume = -15;
    5a72:	61 ef       	ldi	r22, 0xF1	; 241
    5a74:	60 93 ee 06 	sts	0x06EE, r22
			Config.Channel[OUT1].P2_elevator_volume = -20;
    5a78:	5c ee       	ldi	r21, 0xEC	; 236
    5a7a:	50 93 ef 06 	sts	0x06EF, r21
			Config.Channel[OUT1].P1_Roll_gyro = ON;
    5a7e:	90 93 f2 06 	sts	0x06F2, r25
			Config.Channel[OUT1].P1_Roll_acc = ON;
    5a82:	90 93 f8 06 	sts	0x06F8, r25
			Config.Channel[OUT1].P2_Roll_gyro = ON;
    5a86:	90 93 f3 06 	sts	0x06F3, r25
			Config.Channel[OUT1].P2_Roll_acc = ON;
    5a8a:	90 93 f9 06 	sts	0x06F9, r25
			Config.Channel[OUT1].P1_Pitch_gyro = SCALE;
    5a8e:	80 93 f4 06 	sts	0x06F4, r24
			Config.Channel[OUT1].P1_Pitch_acc = SCALE;
    5a92:	80 93 fa 06 	sts	0x06FA, r24
			Config.Channel[OUT1].P2_Pitch_gyro = SCALE;
    5a96:	80 93 f5 06 	sts	0x06F5, r24
			Config.Channel[OUT1].P2_Pitch_acc = SCALE;
    5a9a:	80 93 fb 06 	sts	0x06FB, r24
			Config.Channel[OUT1].P1_Z_delta_acc = ON;
    5a9e:	90 93 fc 06 	sts	0x06FC, r25
			Config.Channel[OUT1].P2_Z_delta_acc = ON;
    5aa2:	90 93 fd 06 	sts	0x06FD, r25
		
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -30;
    5aa6:	72 ee       	ldi	r23, 0xE2	; 226
    5aa8:	70 93 0e 07 	sts	0x070E, r23
			Config.Channel[OUT2].P2_aileron_volume = -40;
    5aac:	78 ed       	ldi	r23, 0xD8	; 216
    5aae:	70 93 0f 07 	sts	0x070F, r23
			Config.Channel[OUT2].P1_elevator_volume = -15;
    5ab2:	60 93 10 07 	sts	0x0710, r22
			Config.Channel[OUT2].P2_elevator_volume = -20;
    5ab6:	50 93 11 07 	sts	0x0711, r21
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    5aba:	90 93 14 07 	sts	0x0714, r25
			Config.Channel[OUT2].P1_Roll_acc = ON;
    5abe:	90 93 1a 07 	sts	0x071A, r25
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    5ac2:	90 93 15 07 	sts	0x0715, r25
			Config.Channel[OUT2].P2_Roll_acc = ON;
    5ac6:	90 93 1b 07 	sts	0x071B, r25
			Config.Channel[OUT2].P1_Pitch_gyro = SCALE;
    5aca:	80 93 16 07 	sts	0x0716, r24
			Config.Channel[OUT2].P1_Pitch_acc = SCALE;
    5ace:	80 93 1c 07 	sts	0x071C, r24
			Config.Channel[OUT2].P2_Pitch_gyro = SCALE;
    5ad2:	80 93 17 07 	sts	0x0717, r24
			Config.Channel[OUT2].P2_Pitch_acc = SCALE;
    5ad6:	80 93 1d 07 	sts	0x071D, r24
			Config.Channel[OUT2].P1_Z_delta_acc = ON;
    5ada:	90 93 1e 07 	sts	0x071E, r25
			Config.Channel[OUT2].P2_Z_delta_acc = ON;
    5ade:	90 93 1f 07 	sts	0x071F, r25
		
			// OUT3
			Config.Channel[OUT3].P1_elevator_volume = 30;
    5ae2:	40 93 32 07 	sts	0x0732, r20
			Config.Channel[OUT3].P2_elevator_volume = 40;
    5ae6:	30 93 33 07 	sts	0x0733, r19
			Config.Channel[OUT3].P1_Pitch_gyro = SCALE;
    5aea:	80 93 38 07 	sts	0x0738, r24
			Config.Channel[OUT3].P1_Pitch_acc = SCALE;
    5aee:	80 93 3e 07 	sts	0x073E, r24
			Config.Channel[OUT3].P2_Pitch_gyro = SCALE;
    5af2:	80 93 39 07 	sts	0x0739, r24
			Config.Channel[OUT3].P2_Pitch_acc = SCALE;
    5af6:	80 93 3f 07 	sts	0x073F, r24
			Config.Channel[OUT3].P1_Z_delta_acc = ON;
    5afa:	90 93 40 07 	sts	0x0740, r25
			Config.Channel[OUT3].P2_Z_delta_acc = ON;
    5afe:	90 93 41 07 	sts	0x0741, r25
			
			// OUT4
			Config.Channel[OUT4].Motor_marker = ASERVO;
    5b02:	10 92 4e 07 	sts	0x074E, r1
			Config.Channel[OUT4].P1_rudder_volume = 75;
    5b06:	8b e4       	ldi	r24, 0x4B	; 75
    5b08:	80 93 56 07 	sts	0x0756, r24
			Config.Channel[OUT4].P2_rudder_volume = 100;
    5b0c:	20 93 57 07 	sts	0x0757, r18
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    5b10:	90 93 5c 07 	sts	0x075C, r25
			Config.Channel[OUT4].P2_Yaw_gyro = ON;
    5b14:	90 93 5d 07 	sts	0x075D, r25
			
			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    5b18:	80 93 76 07 	sts	0x0776, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    5b1c:	20 93 77 07 	sts	0x0777, r18

			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    5b20:	80 93 96 07 	sts	0x0796, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    5b24:	20 93 97 07 	sts	0x0797, r18

			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    5b28:	80 93 bc 07 	sts	0x07BC, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    5b2c:	20 93 bd 07 	sts	0x07BD, r18

			// OUT8
			Config.Offsets[OUT8].Point1 = -100;
    5b30:	8c e9       	ldi	r24, 0x9C	; 156
    5b32:	80 93 d4 08 	sts	0x08D4, r24
			Config.Offsets[OUT8].Point2 = -67;
    5b36:	8d eb       	ldi	r24, 0xBD	; 189
    5b38:	80 93 d5 08 	sts	0x08D5, r24
			Config.Offsets[OUT8].Point3 = -33;
    5b3c:	8f ed       	ldi	r24, 0xDF	; 223
    5b3e:	80 93 d6 08 	sts	0x08D6, r24
			Config.Offsets[OUT8].Point4 = 0;
    5b42:	10 92 d7 08 	sts	0x08D7, r1
			Config.Offsets[OUT8].Point5 = 33;
    5b46:	81 e2       	ldi	r24, 0x21	; 33
    5b48:	80 93 d8 08 	sts	0x08D8, r24
			Config.Offsets[OUT8].Point6 = 67;
    5b4c:	83 e4       	ldi	r24, 0x43	; 67
    5b4e:	80 93 d9 08 	sts	0x08D9, r24
			Config.Offsets[OUT8].Point7 = 100;
    5b52:	20 93 da 08 	sts	0x08DA, r18
			break;
		
		default:
			break;
	}
    5b56:	cf 91       	pop	r28
    5b58:	08 95       	ret

00005b5a <Set_EEPROM_Default_Config>:
	return new_source;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    5b5a:	cf 93       	push	r28
    5b5c:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    5b5e:	84 ea       	ldi	r24, 0xA4	; 164
    5b60:	92 e0       	ldi	r25, 0x02	; 2
    5b62:	e9 e3       	ldi	r30, 0x39	; 57
    5b64:	f6 e0       	ldi	r31, 0x06	; 6
    5b66:	df 01       	movw	r26, r30
    5b68:	9c 01       	movw	r18, r24
    5b6a:	1d 92       	st	X+, r1
    5b6c:	21 50       	subi	r18, 0x01	; 1
    5b6e:	30 40       	sbci	r19, 0x00	; 0
    5b70:	e1 f7       	brne	.-8      	; 0x5b6a <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    5b72:	84 e4       	ldi	r24, 0x44	; 68
    5b74:	80 93 39 06 	sts	0x0639, r24

	// General
	Config.Orientation_P2 = UP_BACK;
	Config.RxMode = SBUS;
    5b78:	82 e0       	ldi	r24, 0x02	; 2
    5b7a:	80 93 62 06 	sts	0x0662, r24
	Config.FlightChan = GEAR;
    5b7e:	24 e0       	ldi	r18, 0x04	; 4
    5b80:	20 93 66 06 	sts	0x0666, r18
	Config.ArmMode = ARMABLE;
    5b84:	91 e0       	ldi	r25, 0x01	; 1
    5b86:	90 93 db 06 	sts	0x06DB, r25
	Config.Servo_rate = FAST;
    5b8a:	80 93 63 06 	sts	0x0663, r24
	Config.PWM_Sync = GEAR;
    5b8e:	20 93 64 06 	sts	0x0664, r18
	Config.Acc_LPF = HZ21;
    5b92:	80 93 df 06 	sts	0x06DF, r24
	Config.Gyro_LPF = NOFILTER;
    5b96:	87 e0       	ldi	r24, 0x07	; 7
    5b98:	80 93 e0 06 	sts	0x06E0, r24
	Config.MPU6050_LPF = HZ44;
    5b9c:	83 e0       	ldi	r24, 0x03	; 3
    5b9e:	80 93 de 06 	sts	0x06DE, r24
	Config.CF_factor = 6;
    5ba2:	86 e0       	ldi	r24, 0x06	; 6
    5ba4:	80 93 e1 06 	sts	0x06E1, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    5ba8:	8e e1       	ldi	r24, 0x1E	; 30
    5baa:	80 93 dc 06 	sts	0x06DC, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    5bae:	82 e3       	ldi	r24, 0x32	; 50
    5bb0:	80 93 6a 06 	sts	0x066A, r24
	Config.Transition_P1 = 0;
	Config.Transition_P2 = 100;	
    5bb4:	84 e6       	ldi	r24, 0x64	; 100
    5bb6:	80 93 6b 06 	sts	0x066B, r24
	Config.AccVertFilter = 20;
    5bba:	84 e1       	ldi	r24, 0x14	; 20
    5bbc:	80 93 6d 06 	sts	0x066D, r24
	Config.Buzzer = ON;
    5bc0:	90 93 e3 06 	sts	0x06E3, r25
	// Advanced
	Config.Orientation_P1 = UP_BACK;
	Config.P1_Reference = NO_ORIENT;
	
	// Preset AccZeroNormZ
	Config.AccZeroNormZ_P1		= 128;
    5bc4:	80 e8       	ldi	r24, 0x80	; 128
    5bc6:	90 e0       	ldi	r25, 0x00	; 0
    5bc8:	90 93 23 08 	sts	0x0823, r25
    5bcc:	80 93 22 08 	sts	0x0822, r24
	Config.AccZeroNormZ_P2		= 128;
    5bd0:	90 93 58 08 	sts	0x0858, r25
    5bd4:	80 93 57 08 	sts	0x0857, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    5bd8:	84 e2       	ldi	r24, 0x24	; 36
    5bda:	80 93 da 06 	sts	0x06DA, r24
    5bde:	ac e0       	ldi	r26, 0x0C	; 12
    5be0:	b8 e0       	ldi	r27, 0x08	; 8
    5be2:	80 e0       	ldi	r24, 0x00	; 0
    5be4:	90 e0       	ldi	r25, 0x00	; 0
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    5be6:	26 ea       	ldi	r18, 0xA6	; 166
    5be8:	3e e0       	ldi	r19, 0x0E	; 14
    5bea:	fc 01       	movw	r30, r24
    5bec:	e2 51       	subi	r30, 0x12	; 18
    5bee:	fe 4f       	sbci	r31, 0xFE	; 254
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    5bf0:	e4 91       	lpm	r30, Z
    5bf2:	ec 01       	movw	r28, r24
    5bf4:	c7 5c       	subi	r28, 0xC7	; 199
    5bf6:	d9 4f       	sbci	r29, 0xF9	; 249
    5bf8:	e9 83       	std	Y+1, r30	; 0x01
		Config.RxChannelZeroOffset[i] = 3750;
    5bfa:	2d 93       	st	X+, r18
    5bfc:	3d 93       	st	X+, r19
    5bfe:	01 96       	adiw	r24, 0x01	; 1
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5c00:	88 30       	cpi	r24, 0x08	; 8
    5c02:	91 05       	cpc	r25, r1
    5c04:	91 f7       	brne	.-28     	; 0x5bea <Set_EEPROM_Default_Config+0x90>
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	// Otherwise the thorttle high alarm will go off on first power-up
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    5c06:	8e eb       	ldi	r24, 0xBE	; 190
    5c08:	9a e0       	ldi	r25, 0x0A	; 10
    5c0a:	90 93 0d 08 	sts	0x080D, r25
    5c0e:	80 93 0c 08 	sts	0x080C, r24
    5c12:	a4 e0       	ldi	r26, 0x04	; 4
    5c14:	b8 e0       	ldi	r27, 0x08	; 8
    5c16:	20 e0       	ldi	r18, 0x00	; 0
    5c18:	30 e0       	ldi	r19, 0x00	; 0

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5c1a:	44 e1       	ldi	r20, 0x14	; 20
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    5c1c:	6c e9       	ldi	r22, 0x9C	; 156
		Config.max_travel[i] = 100;
    5c1e:	54 e6       	ldi	r21, 0x64	; 100
    5c20:	c9 01       	movw	r24, r18
    5c22:	87 5c       	subi	r24, 0xC7	; 199
    5c24:	99 4f       	sbci	r25, 0xF9	; 249
    5c26:	fc 01       	movw	r30, r24
    5c28:	eb 53       	subi	r30, 0x3B	; 59
    5c2a:	ff 4f       	sbci	r31, 0xFF	; 255
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5c2c:	40 83       	st	Z, r20
    5c2e:	34 96       	adiw	r30, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    5c30:	40 83       	st	Z, r20
    5c32:	32 97       	sbiw	r30, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    5c34:	40 83       	st	Z, r20
    5c36:	34 96       	adiw	r30, 0x04	; 4
		Config.Channel[i].P2_source_b 	= NOMIX;
    5c38:	40 83       	st	Z, r20
    5c3a:	fd 01       	movw	r30, r26
    5c3c:	38 97       	sbiw	r30, 0x08	; 8
		Config.min_travel[i] = -100;
    5c3e:	60 83       	st	Z, r22
		Config.max_travel[i] = 100;
    5c40:	84 e6       	ldi	r24, 0x64	; 100
    5c42:	5d 93       	st	X+, r21
    5c44:	2e 5d       	subi	r18, 0xDE	; 222
    5c46:	3f 4f       	sbci	r19, 0xFF	; 255
	// Monopolar throttle is a special case. Set to -100% or -1000
	// Otherwise the thorttle high alarm will go off on first power-up
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    5c48:	20 31       	cpi	r18, 0x10	; 16
    5c4a:	91 e0       	ldi	r25, 0x01	; 1
    5c4c:	39 07       	cpc	r19, r25
    5c4e:	41 f7       	brne	.-48     	; 0x5c20 <Set_EEPROM_Default_Config+0xc6>

	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		Config.Curve[i].Point1 = 0;
		Config.Curve[i].Point2 = 17;
    5c50:	51 e1       	ldi	r21, 0x11	; 17
    5c52:	50 93 65 08 	sts	0x0865, r21
		Config.Curve[i].Point3 = 33;
    5c56:	41 e2       	ldi	r20, 0x21	; 33
    5c58:	40 93 66 08 	sts	0x0866, r20
		Config.Curve[i].Point4 = 50;
    5c5c:	32 e3       	ldi	r19, 0x32	; 50
    5c5e:	30 93 67 08 	sts	0x0867, r19
		Config.Curve[i].Point5 = 67;
    5c62:	23 e4       	ldi	r18, 0x43	; 67
    5c64:	20 93 68 08 	sts	0x0868, r18
		Config.Curve[i].Point6 = 83;
    5c68:	93 e5       	ldi	r25, 0x53	; 83
    5c6a:	90 93 69 08 	sts	0x0869, r25
		Config.Curve[i].Point7 = 100;
    5c6e:	80 93 6a 08 	sts	0x086A, r24

	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		Config.Curve[i].Point1 = 0;
		Config.Curve[i].Point2 = 17;
    5c72:	50 93 6d 08 	sts	0x086D, r21
		Config.Curve[i].Point3 = 33;
    5c76:	40 93 6e 08 	sts	0x086E, r20
		Config.Curve[i].Point4 = 50;
    5c7a:	30 93 6f 08 	sts	0x086F, r19
		Config.Curve[i].Point5 = 67;
    5c7e:	20 93 70 08 	sts	0x0870, r18
		Config.Curve[i].Point6 = 83;
    5c82:	90 93 71 08 	sts	0x0871, r25
		Config.Curve[i].Point7 = 100;
    5c86:	80 93 72 08 	sts	0x0872, r24
    5c8a:	89 e3       	ldi	r24, 0x39	; 57
    5c8c:	96 e0       	ldi	r25, 0x06	; 6
	}

	// Curves 2 to 6	
	for (i = 2; i < 6; i++)
	{
		Config.Curve[i].Point1 = -100;
    5c8e:	7c e9       	ldi	r23, 0x9C	; 156
		Config.Curve[i].Point2 = -67;
    5c90:	6d eb       	ldi	r22, 0xBD	; 189
		Config.Curve[i].Point3 = -33;
    5c92:	5f ed       	ldi	r21, 0xDF	; 223
		Config.Curve[i].Point4 = 0;
		Config.Curve[i].Point5 = 33;
		Config.Curve[i].Point6 = 67;
    5c94:	33 e4       	ldi	r19, 0x43	; 67
		Config.Curve[i].Point7 = 100;
    5c96:	24 e6       	ldi	r18, 0x64	; 100
    5c98:	fc 01       	movw	r30, r24
    5c9a:	e5 5c       	subi	r30, 0xC5	; 197
    5c9c:	fd 4f       	sbci	r31, 0xFD	; 253
	}

	// Curves 2 to 6	
	for (i = 2; i < 6; i++)
	{
		Config.Curve[i].Point1 = -100;
    5c9e:	70 83       	st	Z, r23
    5ca0:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point2 = -67;
    5ca2:	60 83       	st	Z, r22
    5ca4:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point3 = -33;
    5ca6:	50 83       	st	Z, r21
    5ca8:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point4 = 0;
    5caa:	10 82       	st	Z, r1
    5cac:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point5 = 33;
    5cae:	40 83       	st	Z, r20
    5cb0:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point6 = 67;
    5cb2:	30 83       	st	Z, r19
    5cb4:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point7 = 100;
    5cb6:	20 83       	st	Z, r18
    5cb8:	08 96       	adiw	r24, 0x08	; 8
		Config.Curve[i].Point6 = 83;
		Config.Curve[i].Point7 = 100;
	}

	// Curves 2 to 6	
	for (i = 2; i < 6; i++)
    5cba:	a6 e0       	ldi	r26, 0x06	; 6
    5cbc:	89 35       	cpi	r24, 0x59	; 89
    5cbe:	9a 07       	cpc	r25, r26
    5cc0:	59 f7       	brne	.-42     	; 0x5c98 <Set_EEPROM_Default_Config+0x13e>

	Config.Curve[0].channel = THROTTLE;
	Config.Curve[1].channel = THROTTLE;
	Config.Curve[2].channel = THROTTLE;
	Config.Curve[3].channel = THROTTLE;
	Config.Curve[4].channel = NOMIX;
    5cc2:	84 e1       	ldi	r24, 0x14	; 20
    5cc4:	80 93 8b 08 	sts	0x088B, r24
	Config.Curve[5].channel = NOMIX;
    5cc8:	80 93 93 08 	sts	0x0893, r24
    5ccc:	80 e0       	ldi	r24, 0x00	; 0
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	fc 01       	movw	r30, r24
    5cd2:	e2 51       	subi	r30, 0x12	; 18
    5cd4:	fe 4f       	sbci	r31, 0xFE	; 254
	
	// Preset custom channel order to JR
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.CustomChannelOrder[i] = pgm_read_byte(&JR[i]);
    5cd6:	e4 91       	lpm	r30, Z
    5cd8:	dc 01       	movw	r26, r24
    5cda:	ac 56       	subi	r26, 0x6C	; 108
    5cdc:	b7 4f       	sbci	r27, 0xF7	; 247
    5cde:	ec 93       	st	X, r30
    5ce0:	01 96       	adiw	r24, 0x01	; 1
	Config.Curve[3].channel = THROTTLE;
	Config.Curve[4].channel = NOMIX;
	Config.Curve[5].channel = NOMIX;
	
	// Preset custom channel order to JR
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5ce2:	88 30       	cpi	r24, 0x08	; 8
    5ce4:	91 05       	cpc	r25, r1
    5ce6:	a1 f7       	brne	.-24     	; 0x5cd0 <Set_EEPROM_Default_Config+0x176>
		Config.CustomChannelOrder[i] = pgm_read_byte(&JR[i]);
	}

					
	// Load manual defaults
	Load_eeprom_preset(QUADX);
    5ce8:	80 e0       	ldi	r24, 0x00	; 0
    5cea:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <Load_eeprom_preset>
	Config.Preset = OPTIONS; // Menu will display "Options"
    5cee:	84 e0       	ldi	r24, 0x04	; 4
    5cf0:	80 93 e2 06 	sts	0x06E2, r24
}
    5cf4:	df 91       	pop	r29
    5cf6:	cf 91       	pop	r28
    5cf8:	08 95       	ret

00005cfa <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    5cfa:	cf 93       	push	r28
    5cfc:	df 93       	push	r29
    5cfe:	1f 92       	push	r1
    5d00:	cd b7       	in	r28, 0x3d	; 61
    5d02:	de b7       	in	r29, 0x3e	; 62
	bool updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    5d04:	44 ea       	ldi	r20, 0xA4	; 164
    5d06:	52 e0       	ldi	r21, 0x02	; 2
    5d08:	60 e0       	ldi	r22, 0x00	; 0
    5d0a:	70 e0       	ldi	r23, 0x00	; 0
    5d0c:	89 e3       	ldi	r24, 0x39	; 57
    5d0e:	96 e0       	ldi	r25, 0x06	; 6
    5d10:	0e 94 11 70 	call	0xe022	; 0xe022 <eeprom_read_block>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    5d14:	e0 91 39 06 	lds	r30, 0x0639
    5d18:	8e 2f       	mov	r24, r30
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	fc 01       	movw	r30, r24
    5d1e:	f5 97       	sbiw	r30, 0x35	; 53
    5d20:	e0 31       	cpi	r30, 0x10	; 16
    5d22:	f1 05       	cpc	r31, r1
    5d24:	b0 f4       	brcc	.+44     	; 0x5d52 <Initial_EEPROM_Config_Load+0x58>
    5d26:	e2 5c       	subi	r30, 0xC2	; 194
    5d28:	ff 4f       	sbci	r31, 0xFF	; 255
    5d2a:	0c 94 5f 6f 	jmp	0xdebe	; 0xdebe <__tablejump2__>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    5d2e:	0e 94 65 26 	call	0x4cca	; 0x4cca <Update_V1_0_to_V1_1>
			updated = true;
			// Fall through...

		case V1_1_SIGNATURE:				// V1.1 detected
			Update_V1_1_to_V1_2();
    5d32:	0e 94 41 29 	call	0x5282	; 0x5282 <Update_V1_1_to_V1_2>
			updated = true;
			// Fall through...

		case V1_2_SIGNATURE:				// V1.2 detected
			Update_V1_2_to_V1_3B1();
    5d36:	0e 94 75 29 	call	0x52ea	; 0x52ea <Update_V1_2_to_V1_3B1>
			updated = true;
			// Fall through...

		case V1_3_B1_SIGNATURE:				// V1.3 B1 detected
			Update_V1_3B1_to_V1_3B14();
    5d3a:	0e 94 dd 29 	call	0x53ba	; 0x53ba <Update_V1_3B1_to_V1_3B14>
			updated = true;
			// Fall through...

		case V1_3_B14_SIGNATURE:			// V1.3 B14 detected
			Update_V1_3B14_to_V1_3B15();
    5d3e:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <Update_V1_3B14_to_V1_3B15>
			updated = true;
			// Fall through...
			
		case V1_3_B15_SIGNATURE:			// V1.3 B15 detected
			Update_V1_3B15_to_V1_3B17();
    5d42:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <Update_V1_3B15_to_V1_3B17>
			updated = true;
			// Fall through...

		case V1_3_B17_SIGNATURE:			// V1.3 B17 (V1.3 release) detected
			Update_V1_3_to_V1_4B2();
    5d46:	0e 94 85 2a 	call	0x550a	; 0x550a <Update_V1_3_to_V1_4B2>
			updated = true;
			// Fall through...

		case V1_4_B2_SIGNATURE:				// V1.4 B2-7 detected (V1.4 Beta release)
			Update_V1_4B2_to_V1_4B8();
    5d4a:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <Update_V1_4B2_to_V1_4B8>
			updated = true;
    5d4e:	81 e0       	ldi	r24, 0x01	; 1
    5d50:	03 c0       	rjmp	.+6      	; 0x5d58 <Initial_EEPROM_Config_Load+0x5e>
		case V1_5_B3_SIGNATURE:				// V1.5B3+
			break;
			
		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    5d52:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool updated = false;
    5d56:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    5d58:	89 83       	std	Y+1, r24	; 0x01
    5d5a:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    5d5e:	89 81       	ldd	r24, Y+1	; 0x01
    5d60:	0f 90       	pop	r0
    5d62:	df 91       	pop	r29
    5d64:	cf 91       	pop	r28
    5d66:	08 95       	ret

00005d68 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    5d68:	cf 93       	push	r28
    5d6a:	df 93       	push	r29
    5d6c:	cd b7       	in	r28, 0x3d	; 61
    5d6e:	de b7       	in	r29, 0x3e	; 62
    5d70:	e0 97       	sbiw	r28, 0x30	; 48
    5d72:	0f b6       	in	r0, 0x3f	; 63
    5d74:	f8 94       	cli
    5d76:	de bf       	out	0x3e, r29	; 62
    5d78:	0f be       	out	0x3f, r0	; 63
    5d7a:	cd bf       	out	0x3d, r28	; 61
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	uint8_t transition_direction = P2;
	
	// Do all init tasks
	init();
    5d7c:	0e 94 90 40 	call	0x8120	; 0x8120 <init>
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	uint8_t transition_direction = P2;
    5d80:	21 e0       	ldi	r18, 0x01	; 1
    5d82:	2a 83       	std	Y+2, r18	; 0x02
	int8_t	old_trans_mode = 0;		// Old transition mode
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    5d84:	03 e0       	ldi	r16, 0x03	; 3
    5d86:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    5d88:	1b a6       	std	Y+43, r1	; 0x2b
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    5d8a:	91 2c       	mov	r9, r1
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    5d8c:	33 e0       	ldi	r19, 0x03	; 3
    5d8e:	39 83       	std	Y+1, r19	; 0x01

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    5d90:	48 e0       	ldi	r20, 0x08	; 8
    5d92:	48 ab       	std	Y+48, r20	; 0x30
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    5d94:	1a 8e       	std	Y+26, r1	; 0x1a
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    5d96:	1a 86       	std	Y+10, r1	; 0x0a
	//uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    5d98:	19 8e       	std	Y+25, r1	; 0x19
    5d9a:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	//uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;
    5d9c:	1a a6       	std	Y+42, r1	; 0x2a
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	//uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    5d9e:	19 a2       	std	Y+33, r1	; 0x21
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    5da0:	19 a6       	std	Y+41, r1	; 0x29
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    5da2:	18 a6       	std	Y+40, r1	; 0x28
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    5da4:	1f a2       	std	Y+39, r1	; 0x27

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    5da6:	1e a2       	std	Y+38, r1	; 0x26
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    5da8:	1d a2       	std	Y+37, r1	; 0x25
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    5daa:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    5dac:	a1 2c       	mov	r10, r1
    5dae:	b1 2c       	mov	r11, r1
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t FastServo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    5db0:	61 2c       	mov	r6, r1
    5db2:	71 2c       	mov	r7, r1
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t FastServo_Rate = 0;
	uint16_t Transition_timeout = 0;
    5db4:	1f 86       	std	Y+15, r1	; 0x0f
    5db6:	1e 86       	std	Y+14, r1	; 0x0e
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t FastServo_Rate = 0;
    5db8:	1d 8a       	std	Y+21, r1	; 0x15
    5dba:	1c 8a       	std	Y+20, r1	; 0x14
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    5dbc:	1c 86       	std	Y+12, r1	; 0x0c
    5dbe:	1b 86       	std	Y+11, r1	; 0x0b
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    5dc0:	18 a2       	std	Y+32, r1	; 0x20
    5dc2:	1f 8e       	std	Y+31, r1	; 0x1f
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    5dc4:	1d 8e       	std	Y+29, r1	; 0x1d
    5dc6:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    5dc8:	1b 8a       	std	Y+19, r1	; 0x13
    5dca:	1a 8a       	std	Y+18, r1	; 0x12
	bool LastLoopOverdue = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    5dcc:	61 e6       	ldi	r22, 0x61	; 97
    5dce:	c6 2e       	mov	r12, r22
    5dd0:	61 e5       	ldi	r22, 0x51	; 81
    5dd2:	d6 2e       	mov	r13, r22
    5dd4:	e1 2c       	mov	r14, r1
    5dd6:	f1 2c       	mov	r15, r1
	bool SlowRC = true;
	bool LastLoopOverdue = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    5dd8:	1e 82       	std	Y+6, r1	; 0x06
    5dda:	1f 82       	std	Y+7, r1	; 0x07
    5ddc:	18 86       	std	Y+8, r1	; 0x08
    5dde:	19 86       	std	Y+9, r1	; 0x09
	bool Interrupted_Clone = false;
	bool SlowRC = true;
	bool LastLoopOverdue = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    5de0:	21 2c       	mov	r2, r1
    5de2:	31 2c       	mov	r3, r1
    5de4:	21 01       	movw	r4, r2
	bool FastServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
	bool LastLoopOverdue = false;
    5de6:	1b a2       	std	Y+35, r1	; 0x23
	bool ServoTick = false;
	bool FastServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    5de8:	51 e0       	ldi	r21, 0x01	; 1
    5dea:	5d 87       	std	Y+13, r21	; 0x0d
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool FastServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    5dec:	1c 82       	std	Y+4, r1	; 0x04
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool FastServoTick = false;
	bool ResampleRCRate = false;
    5dee:	1e 8e       	std	Y+30, r1	; 0x1e
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool FastServoTick = false;
    5df0:	1b 8e       	std	Y+27, r1	; 0x1b
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    5df2:	1d 82       	std	Y+5, r1	; 0x05
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    5df4:	19 8a       	std	Y+17, r1	; 0x11
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    5df6:	18 8a       	std	Y+16, r1	; 0x10

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    5df8:	1b 82       	std	Y+3, r1	; 0x03

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    5dfa:	80 91 2d 05 	lds	r24, 0x052D
    5dfe:	8f 5f       	subi	r24, 0xFF	; 255
    5e00:	80 93 2d 05 	sts	0x052D, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    5e04:	80 91 1a 09 	lds	r24, 0x091A
    5e08:	88 23       	and	r24, r24
    5e0a:	31 f0       	breq	.+12     	; 0x5e18 <main+0xb0>
		{
			InterruptCounter++;
    5e0c:	28 8d       	ldd	r18, Y+24	; 0x18
    5e0e:	39 8d       	ldd	r19, Y+25	; 0x19
    5e10:	2f 5f       	subi	r18, 0xFF	; 255
    5e12:	3f 4f       	sbci	r19, 0xFF	; 255
    5e14:	39 8f       	std	Y+25, r19	; 0x19
    5e16:	28 8f       	std	Y+24, r18	; 0x18
		//* - Do an RC rate resample
		//* - Check the battery voltage
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    5e18:	4a 89       	ldd	r20, Y+18	; 0x12
    5e1a:	5b 89       	ldd	r21, Y+19	; 0x13
    5e1c:	4c 34       	cpi	r20, 0x4C	; 76
    5e1e:	5c 44       	sbci	r21, 0x4C	; 76
    5e20:	28 f1       	brcs	.+74     	; 0x5e6c <main+0x104>
		{
			Status_seconds++;
    5e22:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5e24:	2f 5f       	subi	r18, 0xFF	; 255
    5e26:	2a 8f       	std	Y+26, r18	; 0x1a
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    5e28:	48 8d       	ldd	r20, Y+24	; 0x18
    5e2a:	59 8d       	ldd	r21, Y+25	; 0x19
    5e2c:	50 93 32 05 	sts	0x0532, r21
    5e30:	40 93 31 05 	sts	0x0531, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    5e34:	80 91 63 06 	lds	r24, 0x0663
    5e38:	82 30       	cpi	r24, 0x02	; 2
    5e3a:	11 f4       	brne	.+4      	; 0x5e40 <main+0xd8>
			{
				ResampleRCRate = true;
    5e3c:	51 e0       	ldi	r21, 0x01	; 1
    5e3e:	5e 8f       	std	Y+30, r21	; 0x1e
			}
	
			// Check if Vbat lower than trigger
			if (GetVbat() < Config.PowerTriggerActual)
    5e40:	0e 94 bb 6c 	call	0xd976	; 0xd976 <GetVbat>
    5e44:	20 91 d6 06 	lds	r18, 0x06D6
    5e48:	30 91 d7 06 	lds	r19, 0x06D7
    5e4c:	82 17       	cp	r24, r18
    5e4e:	93 07       	cpc	r25, r19
    5e50:	20 f4       	brcc	.+8      	; 0x5e5a <main+0xf2>
			{
				General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    5e52:	80 91 35 05 	lds	r24, 0x0535
    5e56:	88 60       	ori	r24, 0x08	; 8
    5e58:	03 c0       	rjmp	.+6      	; 0x5e60 <main+0xf8>
			}
			else
			{
				General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    5e5a:	80 91 35 05 	lds	r24, 0x0535
    5e5e:	87 7f       	andi	r24, 0xF7	; 247
    5e60:	80 93 35 05 	sts	0x0535, r24
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    5e64:	19 8e       	std	Y+25, r1	; 0x19
    5e66:	18 8e       	std	Y+24, r1	; 0x18

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    5e68:	1b 8a       	std	Y+19, r1	; 0x13
    5e6a:	1a 8a       	std	Y+18, r1	; 0x12
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    5e6c:	28 a9       	ldd	r18, Y+48	; 0x30
    5e6e:	82 2f       	mov	r24, r18
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	8b 30       	cpi	r24, 0x0B	; 11
    5e74:	91 05       	cpc	r25, r1
    5e76:	08 f0       	brcs	.+2      	; 0x5e7a <main+0x112>
    5e78:	88 c0       	rjmp	.+272    	; 0x5f8a <main+0x222>
    5e7a:	fc 01       	movw	r30, r24
    5e7c:	e2 5b       	subi	r30, 0xB2	; 178
    5e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e80:	0c 94 5f 6f 	jmp	0xdebe	; 0xdebe <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    5e84:	83 b1       	in	r24, 0x03	; 3
    5e86:	80 7f       	andi	r24, 0xF0	; 240
    5e88:	80 3f       	cpi	r24, 0xF0	; 240
    5e8a:	49 f0       	breq	.+18     	; 0x5e9e <main+0x136>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    5e8c:	80 91 6e 00 	lds	r24, 0x006E
    5e90:	81 60       	ori	r24, 0x01	; 1
    5e92:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    5e96:	33 e0       	ldi	r19, 0x03	; 3
    5e98:	38 ab       	std	Y+48, r19	; 0x30
					// Reset the status screen timeout
					Status_seconds = 0;
    5e9a:	1a 8e       	std	Y+26, r1	; 0x1a
    5e9c:	76 c0       	rjmp	.+236    	; 0x5f8a <main+0x222>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    5e9e:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    5ea2:	81 e0       	ldi	r24, 0x01	; 1
    5ea4:	85 bb       	out	0x15, r24	; 21
    5ea6:	71 c0       	rjmp	.+226    	; 0x5f8a <main+0x222>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    5ea8:	80 91 ee 08 	lds	r24, 0x08EE
    5eac:	81 11       	cpse	r24, r1
    5eae:	61 c0       	rjmp	.+194    	; 0x5f72 <main+0x20a>
    5eb0:	4c 81       	ldd	r20, Y+4	; 0x04
    5eb2:	41 11       	cpse	r20, r1
    5eb4:	62 c0       	rjmp	.+196    	; 0x5f7a <main+0x212>
    5eb6:	80 91 2e 05 	lds	r24, 0x052E
    5eba:	88 23       	and	r24, r24
    5ebc:	09 f4       	brne	.+2      	; 0x5ec0 <main+0x158>
    5ebe:	65 c0       	rjmp	.+202    	; 0x5f8a <main+0x222>
				{
					// Ready to move on
					Menu_mode = STATUS;
    5ec0:	44 e0       	ldi	r20, 0x04	; 4
    5ec2:	48 ab       	std	Y+48, r20	; 0x30
    5ec4:	78 c0       	rjmp	.+240    	; 0x5fb6 <main+0x24e>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    5ec6:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    5eca:	56 e0       	ldi	r21, 0x06	; 6
    5ecc:	58 ab       	std	Y+48, r21	; 0x30
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    5ece:	1d 8e       	std	Y+29, r1	; 0x1d
    5ed0:	1c 8e       	std	Y+28, r1	; 0x1c
    5ed2:	69 c0       	rjmp	.+210    	; 0x5fa6 <main+0x23e>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    5ed4:	1f 9b       	sbis	0x03, 7	; 3
    5ed6:	59 c0       	rjmp	.+178    	; 0x5f8a <main+0x222>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    5ed8:	35 e0       	ldi	r19, 0x05	; 5
    5eda:	38 ab       	std	Y+48, r19	; 0x30
    5edc:	56 c0       	rjmp	.+172    	; 0x5f8a <main+0x222>
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				// If in vibration test mode, stay in Status
				if ((Status_seconds >= 10) && (Config.Vibration == OFF))
    5ede:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5ee0:	4a 30       	cpi	r20, 0x0A	; 10
    5ee2:	28 f0       	brcs	.+10     	; 0x5eee <main+0x186>
    5ee4:	80 91 6c 06 	lds	r24, 0x066C
    5ee8:	88 23       	and	r24, r24
    5eea:	09 f4       	brne	.+2      	; 0x5eee <main+0x186>
    5eec:	4c c0       	rjmp	.+152    	; 0x5f86 <main+0x21e>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    5eee:	1f 9b       	sbis	0x03, 7	; 3
    5ef0:	4e c0       	rjmp	.+156    	; 0x5f8e <main+0x226>
					// Prevent PWM output
					PWMOverride = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    5ef2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    5ef4:	3d 8d       	ldd	r19, Y+29	; 0x1d
    5ef6:	23 31       	cpi	r18, 0x13	; 19
    5ef8:	33 41       	sbci	r19, 0x13	; 19
    5efa:	08 f0       	brcs	.+2      	; 0x5efe <main+0x196>
    5efc:	4a c0       	rjmp	.+148    	; 0x5f92 <main+0x22a>
				{
					// Enable PWM output
					PWMOverride = false;					

					// Unblock motors if blocked
					Flight_flags &= ~(1 << ARM_blocker);
    5efe:	80 91 34 05 	lds	r24, 0x0534
    5f02:	8d 7f       	andi	r24, 0xFD	; 253
    5f04:	80 93 34 05 	sts	0x0534, r24
    5f08:	40 c0       	rjmp	.+128    	; 0x5f8a <main+0x222>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    5f0a:	80 91 ee 08 	lds	r24, 0x08EE
    5f0e:	81 11       	cpse	r24, r1
    5f10:	43 c0       	rjmp	.+134    	; 0x5f98 <main+0x230>
    5f12:	5c 81       	ldd	r21, Y+4	; 0x04
    5f14:	51 11       	cpse	r21, r1
    5f16:	44 c0       	rjmp	.+136    	; 0x5fa0 <main+0x238>
    5f18:	80 91 2e 05 	lds	r24, 0x052E
    5f1c:	81 11       	cpse	r24, r1
    5f1e:	46 c0       	rjmp	.+140    	; 0x5fac <main+0x244>
    5f20:	42 c0       	rjmp	.+132    	; 0x5fa6 <main+0x23e>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    5f22:	0e 94 45 38 	call	0x708a	; 0x708a <idle_screen>
				
				// Make sure that these are cleared
				Interrupted = false;
    5f26:	10 92 ee 08 	sts	0x08EE, r1
				Interrupted_Clone = false;

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    5f2a:	39 e0       	ldi	r19, 0x09	; 9
    5f2c:	36 c0       	rjmp	.+108    	; 0x5f9a <main+0x232>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    5f2e:	80 91 ee 08 	lds	r24, 0x08EE
    5f32:	81 11       	cpse	r24, r1
    5f34:	07 c0       	rjmp	.+14     	; 0x5f44 <main+0x1dc>
    5f36:	5c 81       	ldd	r21, Y+4	; 0x04
    5f38:	51 11       	cpse	r21, r1
    5f3a:	04 c0       	rjmp	.+8      	; 0x5f44 <main+0x1dc>
    5f3c:	80 91 2e 05 	lds	r24, 0x052E
    5f40:	88 23       	and	r24, r24
    5f42:	c9 f1       	breq	.+114    	; 0x5fb6 <main+0x24e>
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
														
					// Unblock motors if blocked
					Flight_flags &= ~(1 << ARM_blocker);
    5f44:	80 91 34 05 	lds	r24, 0x0534
    5f48:	8d 7f       	andi	r24, 0xFD	; 253
    5f4a:	80 93 34 05 	sts	0x0534, r24
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    5f4e:	18 aa       	std	Y+48, r1	; 0x30
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    5f50:	1c 82       	std	Y+4, r1	; 0x04
    5f52:	1b c0       	rjmp	.+54     	; 0x5f8a <main+0x222>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    5f54:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    5f56:	80 91 35 05 	lds	r24, 0x0535
    5f5a:	84 60       	ori	r24, 0x04	; 4
    5f5c:	80 93 35 05 	sts	0x0535, r24
				LED1 = 0;
    5f60:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    5f62:	0e 94 11 53 	call	0xa622	; 0xa622 <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = PRESTATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    5f66:	0e 94 47 40 	call	0x808e	; 0x808e <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = PRESTATUS;
    5f6a:	23 e0       	ldi	r18, 0x03	; 3
    5f6c:	28 ab       	std	Y+48, r18	; 0x30
				// Reset timeout once back in status screen
				Status_seconds = 0;
    5f6e:	1a 8e       	std	Y+26, r1	; 0x1a
    5f70:	07 c0       	rjmp	.+14     	; 0x5f80 <main+0x218>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    5f72:	44 e0       	ldi	r20, 0x04	; 4
    5f74:	48 ab       	std	Y+48, r20	; 0x30
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    5f76:	1c 82       	std	Y+4, r1	; 0x04
    5f78:	1e c0       	rjmp	.+60     	; 0x5fb6 <main+0x24e>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    5f7a:	24 e0       	ldi	r18, 0x04	; 4
    5f7c:	28 ab       	std	Y+48, r18	; 0x30
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    5f7e:	1c 82       	std	Y+4, r1	; 0x04
				{
					// Ready to move on
					Menu_mode = STATUS;
							
					// Prevent PWM output
					PWMOverride = true;		
    5f80:	31 e0       	ldi	r19, 0x01	; 1
    5f82:	3f a7       	std	Y+47, r19	; 0x2f
    5f84:	1a c0       	rjmp	.+52     	; 0x5fba <main+0x252>
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				// If in vibration test mode, stay in Status
				if ((Status_seconds >= 10) && (Config.Vibration == OFF))
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    5f86:	27 e0       	ldi	r18, 0x07	; 7
    5f88:	28 ab       	std	Y+48, r18	; 0x30
					
					// Enable PWM output
					PWMOverride = false;
    5f8a:	1f a6       	std	Y+47, r1	; 0x2f
    5f8c:	16 c0       	rjmp	.+44     	; 0x5fba <main+0x252>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    5f8e:	3a e0       	ldi	r19, 0x0A	; 10
    5f90:	0e c0       	rjmp	.+28     	; 0x5fae <main+0x246>
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
				{
					Menu_mode = PRESTATUS;
    5f92:	53 e0       	ldi	r21, 0x03	; 3
    5f94:	58 ab       	std	Y+48, r21	; 0x30
    5f96:	07 c0       	rjmp	.+14     	; 0x5fa6 <main+0x23e>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    5f98:	38 e0       	ldi	r19, 0x08	; 8
    5f9a:	38 ab       	std	Y+48, r19	; 0x30
				
					// Prevent PWM output going into STATUS_TIMEOUT
					PWMOverride = true;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    5f9c:	1c 82       	std	Y+4, r1	; 0x04
    5f9e:	08 c0       	rjmp	.+16     	; 0x5fb0 <main+0x248>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    5fa0:	58 e0       	ldi	r21, 0x08	; 8
    5fa2:	58 ab       	std	Y+48, r21	; 0x30
				
					// Prevent PWM output going into STATUS_TIMEOUT
					PWMOverride = true;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    5fa4:	1c 82       	std	Y+4, r1	; 0x04
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
				
					// Prevent PWM output going into STATUS_TIMEOUT
					PWMOverride = true;
    5fa6:	21 e0       	ldi	r18, 0x01	; 1
    5fa8:	2f a7       	std	Y+47, r18	; 0x2f
    5faa:	07 c0       	rjmp	.+14     	; 0x5fba <main+0x252>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    5fac:	38 e0       	ldi	r19, 0x08	; 8
    5fae:	38 ab       	std	Y+48, r19	; 0x30
				
					// Prevent PWM output going into STATUS_TIMEOUT
					PWMOverride = true;
    5fb0:	41 e0       	ldi	r20, 0x01	; 1
    5fb2:	4f a7       	std	Y+47, r20	; 0x2f
    5fb4:	02 c0       	rjmp	.+4      	; 0x5fba <main+0x252>
					Flight_flags &= ~(1 << ARM_blocker);
				}
				else
				{
					// Prevent PWM output until at least when next RC arrives
					PWMOverride = true;			
    5fb6:	51 e0       	ldi	r21, 0x01	; 1
    5fb8:	5f a7       	std	Y+47, r21	; 0x2f
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message
		if (Overdue)
    5fba:	80 91 2e 05 	lds	r24, 0x052E
    5fbe:	88 23       	and	r24, r24
    5fc0:	21 f0       	breq	.+8      	; 0x5fca <main+0x262>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    5fc2:	80 91 35 05 	lds	r24, 0x0535
    5fc6:	82 60       	ori	r24, 0x02	; 2
    5fc8:	03 c0       	rjmp	.+6      	; 0x5fd0 <main+0x268>
		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    5fca:	80 91 35 05 	lds	r24, 0x0535
    5fce:	8d 7f       	andi	r24, 0xFD	; 253
    5fd0:	80 93 35 05 	sts	0x0535, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    5fd4:	80 91 35 05 	lds	r24, 0x0535
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    5fd8:	83 fd       	sbrc	r24, 3
    5fda:	08 c0       	rjmp	.+16     	; 0x5fec <main+0x284>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    5fdc:	80 91 35 05 	lds	r24, 0x0535
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    5fe0:	81 fd       	sbrc	r24, 1
    5fe2:	04 c0       	rjmp	.+8      	; 0x5fec <main+0x284>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    5fe4:	80 91 35 05 	lds	r24, 0x0535

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    5fe8:	80 ff       	sbrs	r24, 0
    5fea:	0a c0       	rjmp	.+20     	; 0x6000 <main+0x298>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    5fec:	80 91 33 05 	lds	r24, 0x0533
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    5ff0:	84 ff       	sbrs	r24, 4
    5ff2:	06 c0       	rjmp	.+12     	; 0x6000 <main+0x298>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			// Check buzzer mode first
			if (Config.Buzzer == ON)
    5ff4:	80 91 e3 06 	lds	r24, 0x06E3
    5ff8:	81 30       	cpi	r24, 0x01	; 1
    5ffa:	19 f4       	brne	.+6      	; 0x6002 <main+0x29a>
			{
				LVA = 1;
    5ffc:	29 9a       	sbi	0x05, 1	; 5
    5ffe:	01 c0       	rjmp	.+2      	; 0x6002 <main+0x29a>
			}
		}
		else 
		{
			LVA = 0;
    6000:	29 98       	cbi	0x05, 1	; 5
		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		// All cases - reset arm timer
		if (Config.ArmMode == ARMABLE)
    6002:	80 91 db 06 	lds	r24, 0x06DB
    6006:	81 30       	cpi	r24, 0x01	; 1
    6008:	09 f0       	breq	.+2      	; 0x600c <main+0x2a4>
    600a:	a0 c0       	rjmp	.+320    	; 0x614c <main+0x3e4>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    600c:	80 91 85 09 	lds	r24, 0x0985
    6010:	90 91 86 09 	lds	r25, 0x0986
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    6014:	81 34       	cpi	r24, 0x41	; 65
    6016:	9c 4f       	sbci	r25, 0xFC	; 252
    6018:	3c f0       	brlt	.+14     	; 0x6028 <main+0x2c0>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    601a:	80 91 85 09 	lds	r24, 0x0985
    601e:	90 91 86 09 	lds	r25, 0x0986
    6022:	80 3c       	cpi	r24, 0xC0	; 192
    6024:	93 40       	sbci	r25, 0x03	; 3
    6026:	14 f1       	brlt	.+68     	; 0x606c <main+0x304>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    6028:	80 91 87 09 	lds	r24, 0x0987
    602c:	90 91 88 09 	lds	r25, 0x0988
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    6030:	81 34       	cpi	r24, 0x41	; 65
    6032:	9c 4f       	sbci	r25, 0xFC	; 252
    6034:	3c f0       	brlt	.+14     	; 0x6044 <main+0x2dc>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    6036:	80 91 87 09 	lds	r24, 0x0987
    603a:	90 91 88 09 	lds	r25, 0x0988
    603e:	80 3c       	cpi	r24, 0xC0	; 192
    6040:	93 40       	sbci	r25, 0x03	; 3
    6042:	a4 f0       	brlt	.+40     	; 0x606c <main+0x304>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    6044:	80 91 89 09 	lds	r24, 0x0989
    6048:	90 91 8a 09 	lds	r25, 0x098A
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    604c:	81 34       	cpi	r24, 0x41	; 65
    604e:	9c 4f       	sbci	r25, 0xFC	; 252
    6050:	3c f0       	brlt	.+14     	; 0x6060 <main+0x2f8>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    6052:	80 91 89 09 	lds	r24, 0x0989
    6056:	90 91 8a 09 	lds	r25, 0x098A
    605a:	80 3c       	cpi	r24, 0xC0	; 192
    605c:	93 40       	sbci	r25, 0x03	; 3
    605e:	34 f0       	brlt	.+12     	; 0x606c <main+0x304>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    6060:	80 91 81 09 	lds	r24, 0x0981
    6064:	90 91 82 09 	lds	r25, 0x0982
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    6068:	c3 97       	sbiw	r24, 0x33	; 51
    606a:	1c f0       	brlt	.+6      	; 0x6072 <main+0x30a>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
			   )
			{
				Arm_timer = 0;
    606c:	21 2c       	mov	r2, r1
    606e:	31 2c       	mov	r3, r1
    6070:	21 01       	movw	r4, r2
			}
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
    6072:	80 91 35 05 	lds	r24, 0x0535
    6076:	82 ff       	sbrs	r24, 2
    6078:	23 c0       	rjmp	.+70     	; 0x60c0 <main+0x358>
				Disarm_timer = 0;
				Disarm_seconds = 0;
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    607a:	8c e4       	ldi	r24, 0x4C	; 76
    607c:	28 16       	cp	r2, r24
    607e:	38 06       	cpc	r3, r24
    6080:	41 04       	cpc	r4, r1
    6082:	51 04       	cpc	r5, r1
    6084:	08 f4       	brcc	.+2      	; 0x6088 <main+0x320>
    6086:	69 c0       	rjmp	.+210    	; 0x615a <main+0x3f2>
    6088:	80 91 85 09 	lds	r24, 0x0985
    608c:	90 91 86 09 	lds	r25, 0x0986
    6090:	80 34       	cpi	r24, 0x40	; 64
    6092:	9c 4f       	sbci	r25, 0xFC	; 252
    6094:	0c f0       	brlt	.+2      	; 0x6098 <main+0x330>
    6096:	61 c0       	rjmp	.+194    	; 0x615a <main+0x3f2>
				{
					Arm_timer = 0;
					General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    6098:	80 91 35 05 	lds	r24, 0x0535
    609c:	8b 7f       	andi	r24, 0xFB	; 251
    609e:	80 93 35 05 	sts	0x0535, r24
					CalibrateGyrosSlow();					// Calibrate gyros
    60a2:	0e 94 ba 3a 	call	0x7574	; 0x7574 <CalibrateGyrosSlow>
					LED1 = 1;								// Signal that FC is ready
    60a6:	2b 9a       	sbi	0x05, 3	; 5

					Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove arm glitch
    60a8:	80 91 34 05 	lds	r24, 0x0534
    60ac:	82 60       	ori	r24, 0x02	; 2
    60ae:	80 93 34 05 	sts	0x0534, r24
					Servo_Rate = 0;

					// Force Menu to IDLE immediately unless in vibration test mode
					if (Config.Vibration == OFF)
    60b2:	80 91 6c 06 	lds	r24, 0x066C
    60b6:	81 11       	cpse	r24, r1
    60b8:	54 c0       	rjmp	.+168    	; 0x6162 <main+0x3fa>
					{
						Menu_mode = PRESTATUS_TIMEOUT;		// Previously IDLE, which was wrong. 
    60ba:	27 e0       	ldi	r18, 0x07	; 7
    60bc:	28 ab       	std	Y+48, r18	; 0x30
    60be:	51 c0       	rjmp	.+162    	; 0x6162 <main+0x3fa>
		
			// If armed, disarm if sticks held
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    60c0:	32 ee       	ldi	r19, 0xE2	; 226
    60c2:	23 16       	cp	r2, r19
    60c4:	34 ee       	ldi	r19, 0xE4	; 228
    60c6:	33 06       	cpc	r3, r19
    60c8:	41 04       	cpc	r4, r1
    60ca:	51 04       	cpc	r5, r1
    60cc:	b8 f0       	brcs	.+46     	; 0x60fc <main+0x394>
    60ce:	80 91 85 09 	lds	r24, 0x0985
    60d2:	90 91 86 09 	lds	r25, 0x0986
    60d6:	81 3c       	cpi	r24, 0xC1	; 193
    60d8:	93 40       	sbci	r25, 0x03	; 3
    60da:	84 f0       	brlt	.+32     	; 0x60fc <main+0x394>
				{
					Arm_timer = 0;
					General_error |= (1 << DISARMED);		// Set flags to disarmed
    60dc:	80 91 35 05 	lds	r24, 0x0535
    60e0:	84 60       	ori	r24, 0x04	; 4
    60e2:	80 93 35 05 	sts	0x0535, r24
					LED1 = 0;								// Signal that FC is now disarmed
    60e6:	2b 98       	cbi	0x05, 3	; 5
					
					Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove arm glitch
    60e8:	80 91 34 05 	lds	r24, 0x0534
    60ec:	82 60       	ori	r24, 0x02	; 2
    60ee:	80 93 34 05 	sts	0x0534, r24
					Servo_Rate = 0;
    60f2:	1c 86       	std	Y+12, r1	; 0x0c
    60f4:	1b 86       	std	Y+11, r1	; 0x0b
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    60f6:	21 2c       	mov	r2, r1
    60f8:	31 2c       	mov	r3, r1
    60fa:	21 01       	movw	r4, r2
#endif			
				}

				// Automatic disarm
				// Reset auto-disarm count if any RX activity or set to zero
				if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0))
    60fc:	80 91 34 05 	lds	r24, 0x0534
    6100:	80 fd       	sbrc	r24, 0
    6102:	0c c0       	rjmp	.+24     	; 0x611c <main+0x3b4>
    6104:	80 91 dc 06 	lds	r24, 0x06DC
    6108:	88 23       	and	r24, r24
    610a:	41 f0       	breq	.+16     	; 0x611c <main+0x3b4>
					Disarm_timer = 0;
					Disarm_seconds = 0;
				}
		
				// Increment disarm timer (seconds) if armed
				if (Disarm_timer > SECOND_TIMER)
    610c:	5c e4       	ldi	r21, 0x4C	; 76
    610e:	65 16       	cp	r6, r21
    6110:	75 06       	cpc	r7, r21
    6112:	38 f0       	brcs	.+14     	; 0x6122 <main+0x3ba>
				{
					Disarm_seconds++;
    6114:	2a 85       	ldd	r18, Y+10	; 0x0a
    6116:	2f 5f       	subi	r18, 0xFF	; 255
    6118:	2a 87       	std	Y+10, r18	; 0x0a
    611a:	01 c0       	rjmp	.+2      	; 0x611e <main+0x3b6>
    611c:	1a 86       	std	Y+10, r1	; 0x0a
    611e:	61 2c       	mov	r6, r1
    6120:	71 2c       	mov	r7, r1
					Disarm_timer = 0;
				}

				// Auto-disarm model if timeout enabled and due
				// Don't allow disarms less than 30 seconds. That's just silly...
				if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))
    6122:	40 91 dc 06 	lds	r20, 0x06DC
    6126:	3a 85       	ldd	r19, Y+10	; 0x0a
    6128:	83 2f       	mov	r24, r19
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	24 2f       	mov	r18, r20
    612e:	04 2e       	mov	r0, r20
    6130:	00 0c       	add	r0, r0
    6132:	33 0b       	sbc	r19, r19
    6134:	82 17       	cp	r24, r18
    6136:	93 07       	cpc	r25, r19
    6138:	e4 f0       	brlt	.+56     	; 0x6172 <main+0x40a>
    613a:	4e 31       	cpi	r20, 0x1E	; 30
    613c:	d4 f0       	brlt	.+52     	; 0x6172 <main+0x40a>
				{
					// Disarm the FC
					General_error |= (1 << DISARMED);		// Set flags to disarmed
    613e:	80 91 35 05 	lds	r24, 0x0535
    6142:	84 60       	ori	r24, 0x04	; 4
    6144:	80 93 35 05 	sts	0x0535, r24
					LED1 = 0;								// Signal that FC is now disarmed
    6148:	2b 98       	cbi	0x05, 3	; 5
    614a:	13 c0       	rjmp	.+38     	; 0x6172 <main+0x40a>
		} // if (Config.ArmMode == ARMABLE)
		
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    614c:	80 91 35 05 	lds	r24, 0x0535
    6150:	8b 7f       	andi	r24, 0xFB	; 251
    6152:	80 93 35 05 	sts	0x0535, r24
			LED1 = 1;
    6156:	2b 9a       	sbi	0x05, 3	; 5
    6158:	0c c0       	rjmp	.+24     	; 0x6172 <main+0x40a>
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
				Disarm_seconds = 0;
    615a:	1a 86       	std	Y+10, r1	; 0x0a
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    615c:	61 2c       	mov	r6, r1
    615e:	71 2c       	mov	r7, r1
    6160:	08 c0       	rjmp	.+16     	; 0x6172 <main+0x40a>
				Disarm_seconds = 0;
    6162:	1a 86       	std	Y+10, r1	; 0x0a
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    6164:	61 2c       	mov	r6, r1
    6166:	71 2c       	mov	r7, r1
					General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
					CalibrateGyrosSlow();					// Calibrate gyros
					LED1 = 1;								// Signal that FC is ready

					Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove arm glitch
					Servo_Rate = 0;
    6168:	1c 86       	std	Y+12, r1	; 0x0c
    616a:	1b 86       	std	Y+11, r1	; 0x0b
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    616c:	21 2c       	mov	r2, r1
    616e:	31 2c       	mov	r3, r1
    6170:	21 01       	movw	r4, r2
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    6172:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <RxGetChannels>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to.
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    6176:	e0 91 66 06 	lds	r30, 0x0666
    617a:	ee 0f       	add	r30, r30
    617c:	ff 0b       	sbc	r31, r31
    617e:	ed 57       	subi	r30, 0x7D	; 125
    6180:	f6 4f       	sbci	r31, 0xF6	; 246
    6182:	80 81       	ld	r24, Z
    6184:	91 81       	ldd	r25, Z+1	; 0x01
    6186:	85 3f       	cpi	r24, 0xF5	; 245
    6188:	91 40       	sbci	r25, 0x01	; 1
    618a:	64 f0       	brlt	.+24     	; 0x61a4 <main+0x43c>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    618c:	82 e0       	ldi	r24, 0x02	; 2
    618e:	80 93 30 08 	sts	0x0830, r24
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeedOut))
    6192:	59 81       	ldd	r21, Y+1	; 0x01
    6194:	53 30       	cpi	r21, 0x03	; 3
    6196:	e9 f1       	breq	.+122    	; 0x6212 <main+0x4aa>
    6198:	20 91 67 06 	lds	r18, 0x0667
    619c:	2a a3       	std	Y+34, r18	; 0x22
    619e:	92 12       	cpse	r9, r18
    61a0:	13 c0       	rjmp	.+38     	; 0x61c8 <main+0x460>
    61a2:	48 c0       	rjmp	.+144    	; 0x6234 <main+0x4cc>
		if 	(RCinputs[Config.FlightChan] > 500)
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    61a4:	80 81       	ld	r24, Z
    61a6:	91 81       	ldd	r25, Z+1	; 0x01
    61a8:	8d 30       	cpi	r24, 0x0D	; 13
    61aa:	9e 4f       	sbci	r25, 0xFE	; 254
    61ac:	3c f0       	brlt	.+14     	; 0x61bc <main+0x454>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    61ae:	81 e0       	ldi	r24, 0x01	; 1
    61b0:	80 93 30 08 	sts	0x0830, r24
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeedOut))
    61b4:	49 81       	ldd	r20, Y+1	; 0x01
    61b6:	43 30       	cpi	r20, 0x03	; 3
    61b8:	79 f7       	brne	.-34     	; 0x6198 <main+0x430>
    61ba:	1c c0       	rjmp	.+56     	; 0x61f4 <main+0x48c>
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    61bc:	10 92 30 08 	sts	0x0830, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeedOut))
    61c0:	59 81       	ldd	r21, Y+1	; 0x01
    61c2:	53 30       	cpi	r21, 0x03	; 3
    61c4:	49 f7       	brne	.-46     	; 0x6198 <main+0x430>
    61c6:	09 c0       	rjmp	.+18     	; 0x61da <main+0x472>
		{
			switch(Config.FlightSel)
    61c8:	20 91 30 08 	lds	r18, 0x0830
    61cc:	29 83       	std	Y+1, r18	; 0x01
    61ce:	21 30       	cpi	r18, 0x01	; 1
    61d0:	89 f0       	breq	.+34     	; 0x61f4 <main+0x48c>
    61d2:	22 30       	cpi	r18, 0x02	; 2
    61d4:	f1 f0       	breq	.+60     	; 0x6212 <main+0x4aa>
    61d6:	21 11       	cpse	r18, r1
    61d8:	2a c0       	rjmp	.+84     	; 0x622e <main+0x4c6>
			{
				case 0:
					Transition_state = TRANS_P1;
    61da:	10 92 3b 05 	sts	0x053B, r1
					transition_counter = Config.Transition_P1;
    61de:	80 91 69 06 	lds	r24, 0x0669
    61e2:	08 2e       	mov	r0, r24
    61e4:	00 0c       	add	r0, r0
    61e6:	99 0b       	sbc	r25, r25
    61e8:	90 93 3d 05 	sts	0x053D, r25
    61ec:	80 93 3c 05 	sts	0x053C, r24
					break;
    61f0:	19 82       	std	Y+1, r1	; 0x01
    61f2:	1d c0       	rjmp	.+58     	; 0x622e <main+0x4c6>
				case 1:
					Transition_state = TRANS_P1n;
    61f4:	84 e0       	ldi	r24, 0x04	; 4
    61f6:	80 93 3b 05 	sts	0x053B, r24
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    61fa:	80 91 6a 06 	lds	r24, 0x066A
    61fe:	08 2e       	mov	r0, r24
    6200:	00 0c       	add	r0, r0
    6202:	99 0b       	sbc	r25, r25
    6204:	90 93 3d 05 	sts	0x053D, r25
    6208:	80 93 3c 05 	sts	0x053C, r24
					break;
    620c:	31 e0       	ldi	r19, 0x01	; 1
    620e:	39 83       	std	Y+1, r19	; 0x01
    6210:	0e c0       	rjmp	.+28     	; 0x622e <main+0x4c6>
				case 2:
					Transition_state = TRANS_P2;
    6212:	89 e0       	ldi	r24, 0x09	; 9
    6214:	80 93 3b 05 	sts	0x053B, r24
					transition_counter = Config.Transition_P2;
    6218:	80 91 6b 06 	lds	r24, 0x066B
    621c:	08 2e       	mov	r0, r24
    621e:	00 0c       	add	r0, r0
    6220:	99 0b       	sbc	r25, r25
    6222:	90 93 3d 05 	sts	0x053D, r25
    6226:	80 93 3c 05 	sts	0x053C, r24
					break;
    622a:	42 e0       	ldi	r20, 0x02	; 2
    622c:	49 83       	std	Y+1, r20	; 0x01
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeedOut;
    622e:	50 91 67 06 	lds	r21, 0x0667
    6232:	5a a3       	std	Y+34, r21	; 0x22
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    6234:	99 24       	eor	r9, r9
    6236:	93 94       	inc	r9
    6238:	80 91 30 08 	lds	r24, 0x0830
    623c:	29 81       	ldd	r18, Y+1	; 0x01
    623e:	82 13       	cpse	r24, r18
    6240:	01 c0       	rjmp	.+2      	; 0x6244 <main+0x4dc>
    6242:	91 2c       	mov	r9, r1
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeedOut == 0)
    6244:	80 91 67 06 	lds	r24, 0x0667
    6248:	81 11       	cpse	r24, r1
    624a:	03 c0       	rjmp	.+6      	; 0x6252 <main+0x4ea>
		{
			// Update the transition variable based on the selected RC channel
			UpdateTransition();
    624c:	0e 94 5e 6a 	call	0xd4bc	; 0xd4bc <UpdateTransition>
    6250:	08 c0       	rjmp	.+16     	; 0x6262 <main+0x4fa>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    6252:	80 91 3c 05 	lds	r24, 0x053C
    6256:	90 91 3d 05 	lds	r25, 0x053D
    625a:	90 93 39 05 	sts	0x0539, r25
    625e:	80 93 38 05 	sts	0x0538, r24
		}

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeedOut == 0)
    6262:	40 91 67 06 	lds	r20, 0x0667
    6266:	41 11       	cpse	r20, r1
    6268:	03 c0       	rjmp	.+6      	; 0x6270 <main+0x508>
		{
			Transition_state = TRANSITIONING;
    626a:	85 e0       	ldi	r24, 0x05	; 5
    626c:	80 93 3b 05 	sts	0x053B, r24
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    6270:	99 20       	and	r9, r9
    6272:	a1 f0       	breq	.+40     	; 0x629c <main+0x534>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    6274:	80 91 30 08 	lds	r24, 0x0830
    6278:	08 2e       	mov	r0, r24
    627a:	00 0c       	add	r0, r0
    627c:	99 0b       	sbc	r25, r25
    627e:	fc 01       	movw	r30, r24
    6280:	ee 0f       	add	r30, r30
    6282:	ff 1f       	adc	r31, r31
    6284:	e8 0f       	add	r30, r24
    6286:	f9 1f       	adc	r31, r25
    6288:	39 81       	ldd	r19, Y+1	; 0x01
    628a:	e3 0f       	add	r30, r19
    628c:	f1 1d       	adc	r31, r1
    628e:	37 fd       	sbrc	r19, 7
    6290:	fa 95       	dec	r31
    6292:	ea 50       	subi	r30, 0x0A	; 10
    6294:	fe 4f       	sbci	r31, 0xFE	; 254
    6296:	e4 91       	lpm	r30, Z
    6298:	e0 93 3b 05 	sts	0x053B, r30
		}

		// Calculate transition time from user's setting based on the direction of travel
		if (transition_direction == P2)
    629c:	5a 81       	ldd	r21, Y+2	; 0x02
    629e:	51 30       	cpi	r21, 0x01	; 1
    62a0:	29 f4       	brne	.+10     	; 0x62ac <main+0x544>
		{
			transition_time = TRANSITION_TIMER * Config.TransitionSpeedOut; // Outbound transition speed	
    62a2:	23 ec       	ldi	r18, 0xC3	; 195
    62a4:	42 03       	mulsu	r20, r18
    62a6:	c0 01       	movw	r24, r0
    62a8:	11 24       	eor	r1, r1
    62aa:	06 c0       	rjmp	.+12     	; 0x62b8 <main+0x550>
		}
		else 
		{
			transition_time = TRANSITION_TIMER * Config.TransitionSpeedIn; // Inbound transition speed		
    62ac:	20 91 68 06 	lds	r18, 0x0668
    62b0:	33 ec       	ldi	r19, 0xC3	; 195
    62b2:	23 03       	mulsu	r18, r19
    62b4:	c0 01       	movw	r24, r0
    62b6:	11 24       	eor	r1, r1
		}
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeedOut != 0) && (Transition_timeout > transition_time)) ||
    62b8:	44 23       	and	r20, r20
    62ba:	29 f0       	breq	.+10     	; 0x62c6 <main+0x55e>
    62bc:	2e 85       	ldd	r18, Y+14	; 0x0e
    62be:	3f 85       	ldd	r19, Y+15	; 0x0f
    62c0:	82 17       	cp	r24, r18
    62c2:	93 07       	cpc	r25, r19
    62c4:	18 f0       	brcs	.+6      	; 0x62cc <main+0x564>
    62c6:	99 20       	and	r9, r9
    62c8:	09 f4       	brne	.+2      	; 0x62cc <main+0x564>
    62ca:	ca c0       	rjmp	.+404    	; 0x6460 <main+0x6f8>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    62cc:	80 91 3b 05 	lds	r24, 0x053B
    62d0:	81 11       	cpse	r24, r1
    62d2:	03 c0       	rjmp	.+6      	; 0x62da <main+0x572>
			{
				transition_counter = Config.Transition_P1;
    62d4:	80 91 69 06 	lds	r24, 0x0669
    62d8:	09 c0       	rjmp	.+18     	; 0x62ec <main+0x584>
			}
			else if (Transition_state == TRANS_P1n)
    62da:	84 30       	cpi	r24, 0x04	; 4
    62dc:	19 f4       	brne	.+6      	; 0x62e4 <main+0x57c>
			{
				transition_counter = Config.Transition_P1n;
    62de:	80 91 6a 06 	lds	r24, 0x066A
    62e2:	04 c0       	rjmp	.+8      	; 0x62ec <main+0x584>
			}
			else if (Transition_state == TRANS_P2)
    62e4:	89 30       	cpi	r24, 0x09	; 9
    62e6:	51 f4       	brne	.+20     	; 0x62fc <main+0x594>
			{
				transition_counter = Config.Transition_P2;
    62e8:	80 91 6b 06 	lds	r24, 0x066B
    62ec:	08 2e       	mov	r0, r24
    62ee:	00 0c       	add	r0, r0
    62f0:	99 0b       	sbc	r25, r25
    62f2:	90 93 3d 05 	sts	0x053D, r25
    62f6:	80 93 3c 05 	sts	0x053C, r24
    62fa:	26 c0       	rjmp	.+76     	; 0x6348 <main+0x5e0>
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
			}
*/
			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    62fc:	82 30       	cpi	r24, 0x02	; 2
    62fe:	69 f4       	brne	.+26     	; 0x631a <main+0x5b2>
			{
				if (transition_counter > Config.Transition_P1)
    6300:	80 91 3c 05 	lds	r24, 0x053C
    6304:	90 91 3d 05 	lds	r25, 0x053D
    6308:	20 91 69 06 	lds	r18, 0x0669
    630c:	02 2e       	mov	r0, r18
    630e:	00 0c       	add	r0, r0
    6310:	33 0b       	sbc	r19, r19
    6312:	28 17       	cp	r18, r24
    6314:	39 07       	cpc	r19, r25
    6316:	24 f0       	brlt	.+8      	; 0x6320 <main+0x5b8>
    6318:	0c c0       	rjmp	.+24     	; 0x6332 <main+0x5ca>
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
			}
*/
			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    631a:	86 30       	cpi	r24, 0x06	; 6
    631c:	89 f3       	breq	.-30     	; 0x6300 <main+0x598>
    631e:	14 c0       	rjmp	.+40     	; 0x6348 <main+0x5e0>
			{
				if (transition_counter > Config.Transition_P1)
				{
					transition_counter--;
    6320:	01 97       	sbiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter <= Config.Transition_P1)
    6322:	28 17       	cp	r18, r24
    6324:	39 07       	cpc	r19, r25
    6326:	4c f4       	brge	.+18     	; 0x633a <main+0x5d2>
			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
			{
				if (transition_counter > Config.Transition_P1)
				{
					transition_counter--;
    6328:	90 93 3d 05 	sts	0x053D, r25
    632c:	80 93 3c 05 	sts	0x053C, r24
    6330:	0a c0       	rjmp	.+20     	; 0x6346 <main+0x5de>
						Transition_state = TRANS_P1;
					}
				}
				else
				{
					transition_counter++;
    6332:	01 96       	adiw	r24, 0x01	; 1
			
					// Check end point
					if (transition_counter >= Config.Transition_P1)
    6334:	82 17       	cp	r24, r18
    6336:	93 07       	cpc	r25, r19
    6338:	bc f3       	brlt	.-18     	; 0x6328 <main+0x5c0>
					{
						transition_counter = Config.Transition_P1;
    633a:	30 93 3d 05 	sts	0x053D, r19
    633e:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P1;
    6342:	10 92 3b 05 	sts	0x053B, r1
					}
				}
				
				transition_direction = P1;
    6346:	1a 82       	std	Y+2, r1	; 0x02
			}

			// Handle timed transition between P1 and P1.n
			if (Transition_state == TRANS_P1_to_P1n_start)
    6348:	80 91 3b 05 	lds	r24, 0x053B
    634c:	81 30       	cpi	r24, 0x01	; 1
    634e:	71 f5       	brne	.+92     	; 0x63ac <main+0x644>
			{
				if (transition_counter > Config.Transition_P1n)
    6350:	80 91 3c 05 	lds	r24, 0x053C
    6354:	90 91 3d 05 	lds	r25, 0x053D
    6358:	20 91 6a 06 	lds	r18, 0x066A
    635c:	02 2e       	mov	r0, r18
    635e:	00 0c       	add	r0, r0
    6360:	33 0b       	sbc	r19, r19
    6362:	28 17       	cp	r18, r24
    6364:	39 07       	cpc	r19, r25
    6366:	ac f4       	brge	.+42     	; 0x6392 <main+0x62a>
				{
					transition_counter--;
    6368:	01 97       	sbiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter <= Config.Transition_P1n)
    636a:	28 17       	cp	r18, r24
    636c:	39 07       	cpc	r19, r25
    636e:	3c f4       	brge	.+14     	; 0x637e <main+0x616>
			// Handle timed transition between P1 and P1.n
			if (Transition_state == TRANS_P1_to_P1n_start)
			{
				if (transition_counter > Config.Transition_P1n)
				{
					transition_counter--;
    6370:	90 93 3d 05 	sts	0x053D, r25
    6374:	80 93 3c 05 	sts	0x053C, r24
						transition_counter = Config.Transition_P1n;
						Transition_state = TRANS_P1n;
					}
				}

				transition_direction = P2;
    6378:	31 e0       	ldi	r19, 0x01	; 1
    637a:	3a 83       	std	Y+2, r19	; 0x02
    637c:	17 c0       	rjmp	.+46     	; 0x63ac <main+0x644>
					transition_counter--;
					
					// Check end point
					if (transition_counter <= Config.Transition_P1n)
					{
						transition_counter = Config.Transition_P1n;
    637e:	30 93 3d 05 	sts	0x053D, r19
    6382:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P1n;
    6386:	84 e0       	ldi	r24, 0x04	; 4
    6388:	80 93 3b 05 	sts	0x053B, r24
						transition_counter = Config.Transition_P1n;
						Transition_state = TRANS_P1n;
					}
				}

				transition_direction = P2;
    638c:	51 e0       	ldi	r21, 0x01	; 1
    638e:	5a 83       	std	Y+2, r21	; 0x02
    6390:	0d c0       	rjmp	.+26     	; 0x63ac <main+0x644>
						Transition_state = TRANS_P1n;
					}
				}
				else
				{
					transition_counter++;
    6392:	01 96       	adiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter >= Config.Transition_P1n)
    6394:	82 17       	cp	r24, r18
    6396:	93 07       	cpc	r25, r19
    6398:	5c f3       	brlt	.-42     	; 0x6370 <main+0x608>
					{
						transition_counter = Config.Transition_P1n;
    639a:	30 93 3d 05 	sts	0x053D, r19
    639e:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P1n;
    63a2:	84 e0       	ldi	r24, 0x04	; 4
    63a4:	80 93 3b 05 	sts	0x053B, r24
					}
				}

				transition_direction = P2;
    63a8:	21 e0       	ldi	r18, 0x01	; 1
    63aa:	2a 83       	std	Y+2, r18	; 0x02
			}			
				
			// Handle timed transition between P2 and P1.n
			if (Transition_state == TRANS_P2_to_P1n_start)
    63ac:	80 91 3b 05 	lds	r24, 0x053B
    63b0:	88 30       	cpi	r24, 0x08	; 8
    63b2:	09 f5       	brne	.+66     	; 0x63f6 <main+0x68e>
			{
				if (transition_counter > Config.Transition_P1n)
    63b4:	80 91 3c 05 	lds	r24, 0x053C
    63b8:	90 91 3d 05 	lds	r25, 0x053D
    63bc:	20 91 6a 06 	lds	r18, 0x066A
    63c0:	02 2e       	mov	r0, r18
    63c2:	00 0c       	add	r0, r0
    63c4:	33 0b       	sbc	r19, r19
    63c6:	28 17       	cp	r18, r24
    63c8:	39 07       	cpc	r19, r25
    63ca:	4c f4       	brge	.+18     	; 0x63de <main+0x676>
				{
					transition_counter--;
    63cc:	01 97       	sbiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter <= Config.Transition_P1n)
    63ce:	28 17       	cp	r18, r24
    63d0:	39 07       	cpc	r19, r25
    63d2:	4c f4       	brge	.+18     	; 0x63e6 <main+0x67e>
			// Handle timed transition between P2 and P1.n
			if (Transition_state == TRANS_P2_to_P1n_start)
			{
				if (transition_counter > Config.Transition_P1n)
				{
					transition_counter--;
    63d4:	90 93 3d 05 	sts	0x053D, r25
    63d8:	80 93 3c 05 	sts	0x053C, r24
    63dc:	0b c0       	rjmp	.+22     	; 0x63f4 <main+0x68c>
						Transition_state = TRANS_P1n;
					}
				}
				else
				{
					transition_counter++;
    63de:	01 96       	adiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter >= Config.Transition_P1n)
    63e0:	82 17       	cp	r24, r18
    63e2:	93 07       	cpc	r25, r19
    63e4:	bc f3       	brlt	.-18     	; 0x63d4 <main+0x66c>
					{
						transition_counter = Config.Transition_P1n;
    63e6:	30 93 3d 05 	sts	0x053D, r19
    63ea:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P1n;
    63ee:	84 e0       	ldi	r24, 0x04	; 4
    63f0:	80 93 3b 05 	sts	0x053B, r24
					}
				}

				transition_direction = P1;
    63f4:	1a 82       	std	Y+2, r1	; 0x02
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    63f6:	80 91 3b 05 	lds	r24, 0x053B
    63fa:	8b 7f       	andi	r24, 0xFB	; 251
    63fc:	83 30       	cpi	r24, 0x03	; 3
    63fe:	71 f5       	brne	.+92     	; 0x645c <main+0x6f4>
			{
				if (transition_counter > Config.Transition_P2)
    6400:	80 91 3c 05 	lds	r24, 0x053C
    6404:	90 91 3d 05 	lds	r25, 0x053D
    6408:	20 91 6b 06 	lds	r18, 0x066B
    640c:	02 2e       	mov	r0, r18
    640e:	00 0c       	add	r0, r0
    6410:	33 0b       	sbc	r19, r19
    6412:	28 17       	cp	r18, r24
    6414:	39 07       	cpc	r19, r25
    6416:	ac f4       	brge	.+42     	; 0x6442 <main+0x6da>
				{
					transition_counter--;
    6418:	01 97       	sbiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter <= Config.Transition_P2)
    641a:	28 17       	cp	r18, r24
    641c:	39 07       	cpc	r19, r25
    641e:	3c f4       	brge	.+14     	; 0x642e <main+0x6c6>
			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
			{
				if (transition_counter > Config.Transition_P2)
				{
					transition_counter--;
    6420:	90 93 3d 05 	sts	0x053D, r25
    6424:	80 93 3c 05 	sts	0x053C, r24
						transition_counter = Config.Transition_P2;
						Transition_state = TRANS_P2;
					}
				}

				transition_direction = P2;
    6428:	31 e0       	ldi	r19, 0x01	; 1
    642a:	3a 83       	std	Y+2, r19	; 0x02
    642c:	17 c0       	rjmp	.+46     	; 0x645c <main+0x6f4>
					transition_counter--;
					
					// Check end point
					if (transition_counter <= Config.Transition_P2)
					{
						transition_counter = Config.Transition_P2;
    642e:	30 93 3d 05 	sts	0x053D, r19
    6432:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P2;
    6436:	89 e0       	ldi	r24, 0x09	; 9
    6438:	80 93 3b 05 	sts	0x053B, r24
						transition_counter = Config.Transition_P2;
						Transition_state = TRANS_P2;
					}
				}

				transition_direction = P2;
    643c:	51 e0       	ldi	r21, 0x01	; 1
    643e:	5a 83       	std	Y+2, r21	; 0x02
    6440:	0d c0       	rjmp	.+26     	; 0x645c <main+0x6f4>
						Transition_state = TRANS_P2;
					}
				}
				else
				{
					transition_counter++;
    6442:	01 96       	adiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter >= Config.Transition_P2)
    6444:	82 17       	cp	r24, r18
    6446:	93 07       	cpc	r25, r19
    6448:	5c f3       	brlt	.-42     	; 0x6420 <main+0x6b8>
					{
						transition_counter = Config.Transition_P2;
    644a:	30 93 3d 05 	sts	0x053D, r19
    644e:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P2;
    6452:	89 e0       	ldi	r24, 0x09	; 9
    6454:	80 93 3b 05 	sts	0x053B, r24
					}
				}

				transition_direction = P2;
    6458:	21 e0       	ldi	r18, 0x01	; 1
    645a:	2a 83       	std	Y+2, r18	; 0x02
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeedOut != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    645c:	1f 86       	std	Y+15, r1	; 0x0f
    645e:	1e 86       	std	Y+14, r1	; 0x0e
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == Config.Transition_P1))
    6460:	50 91 3b 05 	lds	r21, 0x053B
    6464:	55 23       	and	r21, r21
    6466:	61 f0       	breq	.+24     	; 0x6480 <main+0x718>
    6468:	20 91 38 05 	lds	r18, 0x0538
    646c:	30 91 39 05 	lds	r19, 0x0539
    6470:	80 91 69 06 	lds	r24, 0x0669
    6474:	08 2e       	mov	r0, r24
    6476:	00 0c       	add	r0, r0
    6478:	99 0b       	sbc	r25, r25
    647a:	28 17       	cp	r18, r24
    647c:	39 07       	cpc	r19, r25
    647e:	79 f4       	brne	.+30     	; 0x649e <main+0x736>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    6480:	8c e0       	ldi	r24, 0x0C	; 12
    6482:	ed e2       	ldi	r30, 0x2D	; 45
    6484:	f9 e0       	ldi	r31, 0x09	; 9
    6486:	11 92       	st	Z+, r1
    6488:	8a 95       	dec	r24
    648a:	e9 f7       	brne	.-6      	; 0x6486 <main+0x71e>
			IntegralAccVertf[P2] = 0.0;
    648c:	10 92 49 09 	sts	0x0949, r1
    6490:	10 92 4a 09 	sts	0x094A, r1
    6494:	10 92 4b 09 	sts	0x094B, r1
    6498:	10 92 4c 09 	sts	0x094C, r1
    649c:	18 c0       	rjmp	.+48     	; 0x64ce <main+0x766>
		}
		else if ((Transition_state == TRANS_P2) || (transition == Config.Transition_P2))
    649e:	59 30       	cpi	r21, 0x09	; 9
    64a0:	41 f0       	breq	.+16     	; 0x64b2 <main+0x74a>
    64a2:	80 91 6b 06 	lds	r24, 0x066B
    64a6:	08 2e       	mov	r0, r24
    64a8:	00 0c       	add	r0, r0
    64aa:	99 0b       	sbc	r25, r25
    64ac:	28 17       	cp	r18, r24
    64ae:	39 07       	cpc	r19, r25
    64b0:	71 f4       	brne	.+28     	; 0x64ce <main+0x766>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    64b2:	8c e0       	ldi	r24, 0x0C	; 12
    64b4:	e1 e2       	ldi	r30, 0x21	; 33
    64b6:	f9 e0       	ldi	r31, 0x09	; 9
    64b8:	11 92       	st	Z+, r1
    64ba:	8a 95       	dec	r24
    64bc:	e9 f7       	brne	.-6      	; 0x64b8 <main+0x750>
			IntegralAccVertf[P1] = 0.0;
    64be:	10 92 45 09 	sts	0x0945, r1
    64c2:	10 92 46 09 	sts	0x0946, r1
    64c6:	10 92 47 09 	sts	0x0947, r1
    64ca:	10 92 48 09 	sts	0x0948, r1
		
		//**********************************************************************
		//* Reset the IMU when using two orientations and just leaving P1 or P2
		//**********************************************************************
		
		if (Config.P1_Reference != NO_ORIENT)
    64ce:	80 91 d9 06 	lds	r24, 0x06D9
    64d2:	88 23       	and	r24, r24
    64d4:	59 f1       	breq	.+86     	; 0x652c <main+0x7c4>
		{
			// If Config.FlightSel has changed (switch based) and TransitionSpeed not set to zero, the transition state will change.
			if ((Config.TransitionSpeedOut != 0) && (Transition_state != Old_transition_state) && ((Old_transition_state == TRANS_P1) || (Old_transition_state == TRANS_P2)))
    64d6:	44 23       	and	r20, r20
    64d8:	59 f0       	breq	.+22     	; 0x64f0 <main+0x788>
    64da:	80 91 3a 05 	lds	r24, 0x053A
    64de:	58 17       	cp	r21, r24
    64e0:	29 f1       	breq	.+74     	; 0x652c <main+0x7c4>
    64e2:	88 23       	and	r24, r24
    64e4:	11 f0       	breq	.+4      	; 0x64ea <main+0x782>
    64e6:	89 30       	cpi	r24, 0x09	; 9
    64e8:	09 f5       	brne	.+66     	; 0x652c <main+0x7c4>
			{
				reset_IMU();
    64ea:	0e 94 47 40 	call	0x808e	; 0x808e <reset_IMU>
    64ee:	1e c0       	rjmp	.+60     	; 0x652c <main+0x7c4>
			
			// If TransitionSpeed = 0, the state is always TRANSITIONING so we can't use the old/new state changes.
			// If user is using a knob or TX-slowed switch, TransitionSpeed will be 0.
			else if (
						(Config.TransitionSpeedOut == 0) &&														// Manual transition mode and...
						(((old_transition == Config.Transition_P1) && (transition > Config.Transition_P1)) ||	// Was in P1 or P2
    64f0:	80 91 36 05 	lds	r24, 0x0536
    64f4:	90 91 37 05 	lds	r25, 0x0537
    64f8:	20 91 69 06 	lds	r18, 0x0669
    64fc:	02 2e       	mov	r0, r18
    64fe:	00 0c       	add	r0, r0
    6500:	33 0b       	sbc	r19, r19
    6502:	40 91 38 05 	lds	r20, 0x0538
    6506:	50 91 39 05 	lds	r21, 0x0539
			}
			
			// If TransitionSpeed = 0, the state is always TRANSITIONING so we can't use the old/new state changes.
			// If user is using a knob or TX-slowed switch, TransitionSpeed will be 0.
			else if (
						(Config.TransitionSpeedOut == 0) &&														// Manual transition mode and...
    650a:	82 17       	cp	r24, r18
    650c:	93 07       	cpc	r25, r19
    650e:	19 f4       	brne	.+6      	; 0x6516 <main+0x7ae>
						(((old_transition == Config.Transition_P1) && (transition > Config.Transition_P1)) ||	// Was in P1 or P2
    6510:	84 17       	cp	r24, r20
    6512:	95 07       	cpc	r25, r21
    6514:	54 f3       	brlt	.-44     	; 0x64ea <main+0x782>
						((old_transition == Config.Transition_P2) && (transition < Config.Transition_P2)))		// Is not somewhere in-between.
    6516:	20 91 6b 06 	lds	r18, 0x066B
    651a:	02 2e       	mov	r0, r18
    651c:	00 0c       	add	r0, r0
    651e:	33 0b       	sbc	r19, r19
			
			// If TransitionSpeed = 0, the state is always TRANSITIONING so we can't use the old/new state changes.
			// If user is using a knob or TX-slowed switch, TransitionSpeed will be 0.
			else if (
						(Config.TransitionSpeedOut == 0) &&														// Manual transition mode and...
						(((old_transition == Config.Transition_P1) && (transition > Config.Transition_P1)) ||	// Was in P1 or P2
    6520:	82 17       	cp	r24, r18
    6522:	93 07       	cpc	r25, r19
    6524:	19 f4       	brne	.+6      	; 0x652c <main+0x7c4>
						((old_transition == Config.Transition_P2) && (transition < Config.Transition_P2)))		// Is not somewhere in-between.
    6526:	48 17       	cp	r20, r24
    6528:	59 07       	cpc	r21, r25
    652a:	fc f2       	brlt	.-66     	; 0x64ea <main+0x782>
				reset_IMU();
			}
		}
		
		// Save current flight mode
		old_flight = Config.FlightSel;
    652c:	20 91 30 08 	lds	r18, 0x0830
    6530:	29 83       	std	Y+1, r18	; 0x01
		
		// Save old transtion state;
		Old_transition_state = Transition_state;
    6532:	80 91 3b 05 	lds	r24, 0x053B
    6536:	80 93 3a 05 	sts	0x053A, r24
		
		// Save last transition value
		old_transition = transition;
    653a:	80 91 38 05 	lds	r24, 0x0538
    653e:	90 91 39 05 	lds	r25, 0x0539
    6542:	90 93 37 05 	sts	0x0537, r25
    6546:	80 93 36 05 	sts	0x0536, r24
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    654a:	0e 94 a8 43 	call	0x8750	; 0x8750 <TIM16_ReadTCNT1>
    654e:	9f 8b       	std	Y+23, r25	; 0x17
    6550:	8e 8b       	std	Y+22, r24	; 0x16
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    6552:	8a 15       	cp	r24, r10
    6554:	9b 05       	cpc	r25, r11
    6556:	b8 f4       	brcc	.+46     	; 0x6586 <main+0x81e>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    6558:	80 e0       	ldi	r24, 0x00	; 0
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	a1 e0       	ldi	r26, 0x01	; 1
    655e:	b0 e0       	ldi	r27, 0x00	; 0
    6560:	8a 19       	sub	r24, r10
    6562:	9b 09       	sbc	r25, r11
    6564:	a1 09       	sbc	r26, r1
    6566:	b1 09       	sbc	r27, r1
    6568:	4e 89       	ldd	r20, Y+22	; 0x16
    656a:	5f 89       	ldd	r21, Y+23	; 0x17
    656c:	84 0f       	add	r24, r20
    656e:	95 1f       	adc	r25, r21
    6570:	a1 1d       	adc	r26, r1
    6572:	b1 1d       	adc	r27, r1
    6574:	2e 81       	ldd	r18, Y+6	; 0x06
    6576:	3f 81       	ldd	r19, Y+7	; 0x07
    6578:	48 85       	ldd	r20, Y+8	; 0x08
    657a:	59 85       	ldd	r21, Y+9	; 0x09
    657c:	28 0f       	add	r18, r24
    657e:	39 1f       	adc	r19, r25
    6580:	4a 1f       	adc	r20, r26
    6582:	5b 1f       	adc	r21, r27
    6584:	0c c0       	rjmp	.+24     	; 0x659e <main+0x836>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    6586:	8e 89       	ldd	r24, Y+22	; 0x16
    6588:	9f 89       	ldd	r25, Y+23	; 0x17
    658a:	8a 19       	sub	r24, r10
    658c:	9b 09       	sbc	r25, r11
    658e:	2e 81       	ldd	r18, Y+6	; 0x06
    6590:	3f 81       	ldd	r19, Y+7	; 0x07
    6592:	48 85       	ldd	r20, Y+8	; 0x08
    6594:	59 85       	ldd	r21, Y+9	; 0x09
    6596:	28 0f       	add	r18, r24
    6598:	39 1f       	adc	r19, r25
    659a:	41 1d       	adc	r20, r1
    659c:	51 1d       	adc	r21, r1
    659e:	2e 83       	std	Y+6, r18	; 0x06
    65a0:	3f 83       	std	Y+7, r19	; 0x07
    65a2:	48 87       	std	Y+8, r20	; 0x08
    65a4:	59 87       	std	Y+9, r21	; 0x09
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    65a6:	80 91 b2 00 	lds	r24, 0x00B2
    65aa:	38 a5       	ldd	r19, Y+40	; 0x28
    65ac:	83 1b       	sub	r24, r19
    65ae:	28 0e       	add	r2, r24
    65b0:	31 1c       	adc	r3, r1
    65b2:	41 1c       	adc	r4, r1
    65b4:	51 1c       	adc	r5, r1
		Arm_TCNT2 = TCNT2;
    65b6:	40 91 b2 00 	lds	r20, 0x00B2
    65ba:	48 a7       	std	Y+40, r20	; 0x28

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    65bc:	80 91 b2 00 	lds	r24, 0x00B2
    65c0:	59 a1       	ldd	r21, Y+33	; 0x21
    65c2:	85 1b       	sub	r24, r21
    65c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    65c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    65c8:	28 0f       	add	r18, r24
    65ca:	31 1d       	adc	r19, r1
    65cc:	3c 87       	std	Y+12, r19	; 0x0c
    65ce:	2b 87       	std	Y+11, r18	; 0x0b
		FastServo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    65d0:	80 91 b2 00 	lds	r24, 0x00B2
    65d4:	85 1b       	sub	r24, r21
    65d6:	4c 89       	ldd	r20, Y+20	; 0x14
    65d8:	5d 89       	ldd	r21, Y+21	; 0x15
    65da:	48 0f       	add	r20, r24
    65dc:	51 1d       	adc	r21, r1
    65de:	5d 8b       	std	Y+21, r21	; 0x15
    65e0:	4c 8b       	std	Y+20, r20	; 0x14
		ServoRate_TCNT2 = TCNT2;
    65e2:	50 91 b2 00 	lds	r21, 0x00B2
    65e6:	59 a3       	std	Y+33, r21	; 0x21
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    65e8:	20 91 b2 00 	lds	r18, 0x00B2
    65ec:	30 91 2c 05 	lds	r19, 0x052C
    65f0:	80 91 2a 05 	lds	r24, 0x052A
    65f4:	90 91 2b 05 	lds	r25, 0x052B
    65f8:	23 1b       	sub	r18, r19
    65fa:	82 0f       	add	r24, r18
    65fc:	91 1d       	adc	r25, r1
    65fe:	90 93 2b 05 	sts	0x052B, r25
    6602:	80 93 2a 05 	sts	0x052A, r24
		Servo_TCNT2 = TCNT2;
    6606:	80 91 b2 00 	lds	r24, 0x00B2
    660a:	80 93 2c 05 	sts	0x052C, r24
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    660e:	80 91 b2 00 	lds	r24, 0x00B2
    6612:	2c a1       	ldd	r18, Y+36	; 0x24
    6614:	82 1b       	sub	r24, r18
    6616:	4e 85       	ldd	r20, Y+14	; 0x0e
    6618:	5f 85       	ldd	r21, Y+15	; 0x0f
    661a:	48 0f       	add	r20, r24
    661c:	51 1d       	adc	r21, r1
    661e:	5f 87       	std	Y+15, r21	; 0x0f
    6620:	4e 87       	std	Y+14, r20	; 0x0e
		Transition_TCNT2 = TCNT2;
    6622:	50 91 b2 00 	lds	r21, 0x00B2
    6626:	5c a3       	std	Y+36, r21	; 0x24

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    6628:	80 91 b2 00 	lds	r24, 0x00B2
    662c:	2d a1       	ldd	r18, Y+37	; 0x25
    662e:	82 1b       	sub	r24, r18
    6630:	4a 89       	ldd	r20, Y+18	; 0x12
    6632:	5b 89       	ldd	r21, Y+19	; 0x13
    6634:	48 0f       	add	r20, r24
    6636:	51 1d       	adc	r21, r1
    6638:	5b 8b       	std	Y+19, r21	; 0x13
    663a:	4a 8b       	std	Y+18, r20	; 0x12
		Status_TCNT2 = TCNT2;
    663c:	50 91 b2 00 	lds	r21, 0x00B2
    6640:	5d a3       	std	Y+37, r21	; 0x25
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    6642:	80 91 b2 00 	lds	r24, 0x00B2
    6646:	2e a1       	ldd	r18, Y+38	; 0x26
    6648:	82 1b       	sub	r24, r18
    664a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    664c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    664e:	48 0f       	add	r20, r24
    6650:	51 1d       	adc	r21, r1
    6652:	5d 8f       	std	Y+29, r21	; 0x1d
    6654:	4c 8f       	std	Y+28, r20	; 0x1c
		Refresh_TCNT2 = TCNT2;
    6656:	50 91 b2 00 	lds	r21, 0x00B2
    665a:	5e a3       	std	Y+38, r21	; 0x26

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    665c:	80 91 b2 00 	lds	r24, 0x00B2
    6660:	2f a1       	ldd	r18, Y+39	; 0x27
    6662:	82 1b       	sub	r24, r18
    6664:	68 0e       	add	r6, r24
    6666:	71 1c       	adc	r7, r1
		Disarm_TCNT2 = TCNT2;
    6668:	30 91 b2 00 	lds	r19, 0x00B2
    666c:	3f a3       	std	Y+39, r19	; 0x27

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    666e:	80 91 b2 00 	lds	r24, 0x00B2
    6672:	49 a5       	ldd	r20, Y+41	; 0x29
    6674:	84 1b       	sub	r24, r20
    6676:	2f 8d       	ldd	r18, Y+31	; 0x1f
    6678:	38 a1       	ldd	r19, Y+32	; 0x20
    667a:	28 0f       	add	r18, r24
    667c:	31 1d       	adc	r19, r1
    667e:	38 a3       	std	Y+32, r19	; 0x20
    6680:	2f 8f       	std	Y+31, r18	; 0x1f
		Ticker_TCNT2 = TCNT2;
    6682:	30 91 b2 00 	lds	r19, 0x00B2
    6686:	39 a7       	std	Y+41, r19	; 0x29
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    6688:	4f 8d       	ldd	r20, Y+31	; 0x1f
    668a:	58 a1       	ldd	r21, Y+32	; 0x20
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    668c:	80 91 33 05 	lds	r24, 0x0533
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    6690:	53 ff       	sbrs	r21, 3
    6692:	02 c0       	rjmp	.+4      	; 0x6698 <main+0x930>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    6694:	80 61       	ori	r24, 0x10	; 16
    6696:	01 c0       	rjmp	.+2      	; 0x669a <main+0x932>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    6698:	8f 7e       	andi	r24, 0xEF	; 239
    669a:	80 93 33 05 	sts	0x0533, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    669e:	2b 85       	ldd	r18, Y+11	; 0x0b
    66a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    66a2:	2d 32       	cpi	r18, 0x2D	; 45
    66a4:	31 40       	sbci	r19, 0x01	; 1
    66a6:	20 f0       	brcs	.+8      	; 0x66b0 <main+0x948>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    66a8:	1c 86       	std	Y+12, r1	; 0x0c
    66aa:	1b 86       	std	Y+11, r1	; 0x0b
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    66ac:	51 e0       	ldi	r21, 0x01	; 1
    66ae:	5d 83       	std	Y+5, r21	; 0x05
			Servo_Rate = 0;
		}
		
		if (FastServo_Rate > SERVO_RATE_HIGH)
    66b0:	2c 89       	ldd	r18, Y+20	; 0x14
    66b2:	3d 89       	ldd	r19, Y+21	; 0x15
    66b4:	2a 3d       	cpi	r18, 0xDA	; 218
    66b6:	31 05       	cpc	r19, r1
    66b8:	20 f0       	brcs	.+8      	; 0x66c2 <main+0x95a>
		{
			FastServoTick = true;	// Slow device is ready for output generation
			FastServo_Rate = 0;
    66ba:	1d 8a       	std	Y+21, r1	; 0x15
    66bc:	1c 8a       	std	Y+20, r1	; 0x14
			Servo_Rate = 0;
		}
		
		if (FastServo_Rate > SERVO_RATE_HIGH)
		{
			FastServoTick = true;	// Slow device is ready for output generation
    66be:	31 e0       	ldi	r19, 0x01	; 1
    66c0:	3b 8f       	std	Y+27, r19	; 0x1b
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (50ms)
		if (RC_Timeout > RC_OVERDUE)
    66c2:	80 91 2a 05 	lds	r24, 0x052A
    66c6:	90 91 2b 05 	lds	r25, 0x052B
    66ca:	82 3d       	cpi	r24, 0xD2	; 210
    66cc:	93 40       	sbci	r25, 0x03	; 3
    66ce:	18 f0       	brcs	.+6      	; 0x66d6 <main+0x96e>
			if ((!Overdue) && (Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
			{
				add_log(NOSIGNAL);
			}
#endif			
			Overdue = true;	// This results in a "No Signal" error
    66d0:	81 e0       	ldi	r24, 0x01	; 1
    66d2:	80 93 2e 05 	sts	0x052E, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    66d6:	0e 94 39 39 	call	0x7272	; 0x7272 <ReadGyros>
		ReadAcc();
    66da:	0e 94 34 18 	call	0x3068	; 0x3068 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    66de:	0e 94 a8 43 	call	0x8750	; 0x8750 <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    66e2:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    66e4:	20 91 2f 05 	lds	r18, 0x052F
    66e8:	30 91 30 05 	lds	r19, 0x0530
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    66ec:	20 91 2f 05 	lds	r18, 0x052F
    66f0:	30 91 30 05 	lds	r19, 0x0530
    66f4:	4c 01       	movw	r8, r24
    66f6:	82 1a       	sub	r8, r18
    66f8:	93 0a       	sbc	r9, r19
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    66fa:	90 93 30 05 	sts	0x0530, r25
    66fe:	80 93 2f 05 	sts	0x052F, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    6702:	80 91 01 09 	lds	r24, 0x0901
    6706:	90 91 02 09 	lds	r25, 0x0902
    670a:	a1 2c       	mov	r10, r1
    670c:	b1 2c       	mov	r11, r1
    670e:	02 97       	sbiw	r24, 0x02	; 2
    6710:	88 f0       	brcs	.+34     	; 0x6734 <main+0x9cc>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    6712:	80 91 01 09 	lds	r24, 0x0901
    6716:	90 91 02 09 	lds	r25, 0x0902
    671a:	a0 e0       	ldi	r26, 0x00	; 0
    671c:	b0 e0       	ldi	r27, 0x00	; 0
    671e:	4f e0       	ldi	r20, 0x0F	; 15
    6720:	88 0f       	add	r24, r24
    6722:	99 1f       	adc	r25, r25
    6724:	aa 1f       	adc	r26, r26
    6726:	bb 1f       	adc	r27, r27
    6728:	4a 95       	dec	r20
    672a:	d1 f7       	brne	.-12     	; 0x6720 <main+0x9b8>
    672c:	88 0e       	add	r8, r24
    672e:	99 1e       	adc	r9, r25
    6730:	aa 1e       	adc	r10, r26
    6732:	bb 1e       	adc	r11, r27
		}

		TMR0_counter = 0;
    6734:	10 92 02 09 	sts	0x0902, r1
    6738:	10 92 01 09 	sts	0x0901, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    673c:	c5 01       	movw	r24, r10
    673e:	b4 01       	movw	r22, r8
    6740:	0e 94 27 3e 	call	0x7c4e	; 0x7c4e <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    6744:	c5 01       	movw	r24, r10
    6746:	b4 01       	movw	r22, r8
    6748:	0e 94 24 63 	call	0xc648	; 0xc648 <Sensor_PID>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)  // THROTTLEIDLE = 50
    674c:	80 91 81 09 	lds	r24, 0x0981
    6750:	90 91 82 09 	lds	r25, 0x0982
    6754:	c2 97       	sbiw	r24, 0x32	; 50
    6756:	dc f4       	brge	.+54     	; 0x678e <main+0xa26>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);
    6758:	80 91 35 05 	lds	r24, 0x0535
    675c:	8e 7f       	andi	r24, 0xFE	; 254
    675e:	80 93 35 05 	sts	0x0535, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6);
    6762:	88 e1       	ldi	r24, 0x18	; 24
    6764:	e1 e2       	ldi	r30, 0x21	; 33
    6766:	f9 e0       	ldi	r31, 0x09	; 9
    6768:	11 92       	st	Z+, r1
    676a:	8a 95       	dec	r24
    676c:	e9 f7       	brne	.-6      	; 0x6768 <main+0xa00>
			IntegralAccVertf[P1] = 0.0;
    676e:	10 92 45 09 	sts	0x0945, r1
    6772:	10 92 46 09 	sts	0x0946, r1
    6776:	10 92 47 09 	sts	0x0947, r1
    677a:	10 92 48 09 	sts	0x0948, r1
			IntegralAccVertf[P2] = 0.0;
    677e:	10 92 49 09 	sts	0x0949, r1
    6782:	10 92 4a 09 	sts	0x094A, r1
    6786:	10 92 4b 09 	sts	0x094B, r1
    678a:	10 92 4c 09 	sts	0x094C, r1
		//* FrameRate = Serial frame gap as measured by the ISR.
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//************************************************************

		if (Interrupted)
    678e:	80 91 ee 08 	lds	r24, 0x08EE
    6792:	88 23       	and	r24, r24
    6794:	09 f4       	brne	.+2      	; 0x6798 <main+0xa30>
    6796:	bc c0       	rjmp	.+376    	; 0x6910 <main+0xba8>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer if not in FAST mode.
			if (Config.Servo_rate < FAST)
    6798:	80 91 63 06 	lds	r24, 0x0663
    679c:	82 30       	cpi	r24, 0x02	; 2
    679e:	64 f4       	brge	.+24     	; 0x67b8 <main+0xa50>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    67a0:	21 e0       	ldi	r18, 0x01	; 1
    67a2:	2d 87       	std	Y+13, r18	; 0x0d
    67a4:	2e 81       	ldd	r18, Y+6	; 0x06
    67a6:	3f 81       	ldd	r19, Y+7	; 0x07
    67a8:	48 85       	ldd	r20, Y+8	; 0x08
    67aa:	59 85       	ldd	r21, Y+9	; 0x09
    67ac:	24 3c       	cpi	r18, 0xC4	; 196
    67ae:	32 4a       	sbci	r19, 0xA2	; 162
    67b0:	41 05       	cpc	r20, r1
    67b2:	51 05       	cpc	r21, r1
    67b4:	08 f4       	brcc	.+2      	; 0x67b8 <main+0xa50>
    67b6:	1d 86       	std	Y+13, r1	; 0x0d
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    67b8:	2b 81       	ldd	r18, Y+3	; 0x03
    67ba:	21 11       	cpse	r18, r1
    67bc:	0e c0       	rjmp	.+28     	; 0x67da <main+0xa72>
    67be:	82 30       	cpi	r24, 0x02	; 2
    67c0:	09 f0       	breq	.+2      	; 0x67c4 <main+0xa5c>
    67c2:	d4 c1       	rjmp	.+936    	; 0x6b6c <main+0xe04>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    67c4:	80 91 1d 09 	lds	r24, 0x091D
    67c8:	90 91 1e 09 	lds	r25, 0x091E
    67cc:	31 e0       	ldi	r19, 0x01	; 1
    67ce:	3d 87       	std	Y+13, r19	; 0x0d
    67d0:	84 3c       	cpi	r24, 0xC4	; 196
    67d2:	92 4a       	sbci	r25, 0xA2	; 162
    67d4:	40 f4       	brcc	.+16     	; 0x67e6 <main+0xa7e>
    67d6:	1d 86       	std	Y+13, r1	; 0x0d
    67d8:	3a c0       	rjmp	.+116    	; 0x684e <main+0xae6>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the serial data gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    67da:	82 30       	cpi	r24, 0x02	; 2
    67dc:	09 f0       	breq	.+2      	; 0x67e0 <main+0xa78>
    67de:	c6 c1       	rjmp	.+908    	; 0x6b6c <main+0xe04>
				// Slow packets (19.7ms gap). Pulse spans just two input packets.
				// 38.8s available space for S.Bus, 40ms for Satellite and 39.92ms for Xtreme.
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
    67e0:	5d 85       	ldd	r21, Y+13	; 0x0d
    67e2:	55 23       	and	r21, r21
    67e4:	a1 f1       	breq	.+104    	; 0x684e <main+0xae6>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
    67e6:	88 ec       	ldi	r24, 0xC8	; 200
    67e8:	c8 16       	cp	r12, r24
    67ea:	8b e4       	ldi	r24, 0x4B	; 75
    67ec:	d8 06       	cpc	r13, r24
    67ee:	e1 04       	cpc	r14, r1
    67f0:	f1 04       	cpc	r15, r1
    67f2:	08 f0       	brcs	.+2      	; 0x67f6 <main+0xa8e>
    67f4:	be c1       	rjmp	.+892    	; 0x6b72 <main+0xe0a>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
    67f6:	96 e2       	ldi	r25, 0x26	; 38
    67f8:	c9 16       	cp	r12, r25
    67fa:	9f e3       	ldi	r25, 0x3F	; 63
    67fc:	d9 06       	cpc	r13, r25
    67fe:	e1 04       	cpc	r14, r1
    6800:	f1 04       	cpc	r15, r1
    6802:	08 f0       	brcs	.+2      	; 0x6806 <main+0xa9e>
    6804:	b9 c1       	rjmp	.+882    	; 0x6b78 <main+0xe10>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
    6806:	e1 e2       	ldi	r30, 0x21	; 33
    6808:	ce 16       	cp	r12, r30
    680a:	e6 e3       	ldi	r30, 0x36	; 54
    680c:	de 06       	cpc	r13, r30
    680e:	e1 04       	cpc	r14, r1
    6810:	f1 04       	cpc	r15, r1
    6812:	08 f0       	brcs	.+2      	; 0x6816 <main+0xaae>
    6814:	b4 c1       	rjmp	.+872    	; 0x6b7e <main+0xe16>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
    6816:	fd e5       	ldi	r31, 0x5D	; 93
    6818:	cf 16       	cp	r12, r31
    681a:	ff e2       	ldi	r31, 0x2F	; 47
    681c:	df 06       	cpc	r13, r31
    681e:	e1 04       	cpc	r14, r1
    6820:	f1 04       	cpc	r15, r1
    6822:	08 f0       	brcs	.+2      	; 0x6826 <main+0xabe>
    6824:	af c1       	rjmp	.+862    	; 0x6b84 <main+0xe1c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
    6826:	2c ec       	ldi	r18, 0xCC	; 204
    6828:	c2 16       	cp	r12, r18
    682a:	29 e2       	ldi	r18, 0x29	; 41
    682c:	d2 06       	cpc	r13, r18
    682e:	e1 04       	cpc	r14, r1
    6830:	f1 04       	cpc	r15, r1
    6832:	08 f0       	brcs	.+2      	; 0x6836 <main+0xace>
    6834:	aa c1       	rjmp	.+852    	; 0x6b8a <main+0xe22>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
    6836:	34 ee       	ldi	r19, 0xE4	; 228
    6838:	c3 16       	cp	r12, r19
    683a:	35 e2       	ldi	r19, 0x25	; 37
    683c:	d3 06       	cpc	r13, r19
    683e:	e1 04       	cpc	r14, r1
    6840:	f1 04       	cpc	r15, r1
    6842:	88 f1       	brcs	.+98     	; 0x68a6 <main+0xb3e>
    6844:	41 e0       	ldi	r20, 0x01	; 1
    6846:	4b 83       	std	Y+3, r20	; 0x03
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
    6848:	09 e0       	ldi	r16, 0x09	; 9
    684a:	10 e0       	ldi	r17, 0x00	; 0
    684c:	35 c0       	rjmp	.+106    	; 0x68b8 <main+0xb50>

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
    684e:	5d ec       	ldi	r21, 0xCD	; 205
    6850:	c5 16       	cp	r12, r21
    6852:	56 e4       	ldi	r21, 0x46	; 70
    6854:	d5 06       	cpc	r13, r21
    6856:	e1 04       	cpc	r14, r1
    6858:	f1 04       	cpc	r15, r1
    685a:	08 f0       	brcs	.+2      	; 0x685e <main+0xaf6>
    685c:	9b c1       	rjmp	.+822    	; 0x6b94 <main+0xe2c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
    685e:	84 ea       	ldi	r24, 0xA4	; 164
    6860:	c8 16       	cp	r12, r24
    6862:	88 e3       	ldi	r24, 0x38	; 56
    6864:	d8 06       	cpc	r13, r24
    6866:	e1 04       	cpc	r14, r1
    6868:	f1 04       	cpc	r15, r1
    686a:	08 f0       	brcs	.+2      	; 0x686e <main+0xb06>
    686c:	96 c1       	rjmp	.+812    	; 0x6b9a <main+0xe32>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
    686e:	93 e3       	ldi	r25, 0x33	; 51
    6870:	c9 16       	cp	r12, r25
    6872:	9f e2       	ldi	r25, 0x2F	; 47
    6874:	d9 06       	cpc	r13, r25
    6876:	e1 04       	cpc	r14, r1
    6878:	f1 04       	cpc	r15, r1
    687a:	08 f0       	brcs	.+2      	; 0x687e <main+0xb16>
    687c:	91 c1       	rjmp	.+802    	; 0x6ba0 <main+0xe38>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
    687e:	e5 e7       	ldi	r30, 0x75	; 117
    6880:	ce 16       	cp	r12, r30
    6882:	e8 e2       	ldi	r30, 0x28	; 40
    6884:	de 06       	cpc	r13, r30
    6886:	e1 04       	cpc	r14, r1
    6888:	f1 04       	cpc	r15, r1
    688a:	08 f0       	brcs	.+2      	; 0x688e <main+0xb26>
    688c:	8c c1       	rjmp	.+792    	; 0x6ba6 <main+0xe3e>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
    688e:	f6 e6       	ldi	r31, 0x66	; 102
    6890:	cf 16       	cp	r12, r31
    6892:	f3 e2       	ldi	r31, 0x23	; 35
    6894:	df 06       	cpc	r13, r31
    6896:	e1 04       	cpc	r14, r1
    6898:	f1 04       	cpc	r15, r1
    689a:	50 f0       	brcs	.+20     	; 0x68b0 <main+0xb48>
    689c:	21 e0       	ldi	r18, 0x01	; 1
    689e:	2b 83       	std	Y+3, r18	; 0x03
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
    68a0:	07 e0       	ldi	r16, 0x07	; 7
    68a2:	10 e0       	ldi	r17, 0x00	; 0
    68a4:	09 c0       	rjmp	.+18     	; 0x68b8 <main+0xb50>
    68a6:	31 e0       	ldi	r19, 0x01	; 1
    68a8:	3b 83       	std	Y+3, r19	; 0x03
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    68aa:	0a e0       	ldi	r16, 0x0A	; 10
    68ac:	10 e0       	ldi	r17, 0x00	; 0
    68ae:	04 c0       	rjmp	.+8      	; 0x68b8 <main+0xb50>
    68b0:	41 e0       	ldi	r20, 0x01	; 1
    68b2:	4b 83       	std	Y+3, r20	; 0x03
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 275Hz
    68b4:	08 e0       	ldi	r16, 0x08	; 8
    68b6:	10 e0       	ldi	r17, 0x00	; 0
				PWM_pulses = 1;
			}
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    68b8:	0e 94 a8 43 	call	0x8750	; 0x8750 <TIM16_ReadTCNT1>
    68bc:	9f 8b       	std	Y+23, r25	; 0x17
    68be:	8e 8b       	std	Y+22, r24	; 0x16
			//* output when serial RC formats are used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    68c0:	80 91 63 06 	lds	r24, 0x0663
    68c4:	82 30       	cpi	r24, 0x02	; 2
    68c6:	b9 f4       	brne	.+46     	; 0x68f6 <main+0xb8e>
    68c8:	5b 81       	ldd	r21, Y+3	; 0x03
    68ca:	55 23       	and	r21, r21
    68cc:	a1 f0       	breq	.+40     	; 0x68f6 <main+0xb8e>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    68ce:	2e 8d       	ldd	r18, Y+30	; 0x1e
    68d0:	21 11       	cpse	r18, r1
    68d2:	16 c0       	rjmp	.+44     	; 0x6900 <main+0xb98>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    68d4:	80 91 ee 08 	lds	r24, 0x08EE
    68d8:	88 23       	and	r24, r24
    68da:	11 f0       	breq	.+4      	; 0x68e0 <main+0xb78>
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    68dc:	31 e0       	ldi	r19, 0x01	; 1
    68de:	3c 83       	std	Y+4, r19	; 0x04
					}
					
					Interrupted = false;		// Cancel pending interrupts
    68e0:	10 92 ee 08 	sts	0x08EE, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    68e4:	0e 94 01 48 	call	0x9002	; 0x9002 <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    68e8:	1e 82       	std	Y+6, r1	; 0x06
    68ea:	1f 82       	std	Y+7, r1	; 0x07
    68ec:	18 86       	std	Y+8, r1	; 0x08
    68ee:	19 86       	std	Y+9, r1	; 0x09
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    68f0:	19 8a       	std	Y+17, r1	; 0x11
					PWMBlocked = false;			// Enable PWM generation	
    68f2:	18 8a       	std	Y+16, r1	; 0x10
    68f4:	0d c0       	rjmp	.+26     	; 0x6910 <main+0xba8>
			{
				PWM_pulses = 1;
			}
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    68f6:	1e 82       	std	Y+6, r1	; 0x06
    68f8:	1f 82       	std	Y+7, r1	; 0x07
    68fa:	18 86       	std	Y+8, r1	; 0x08
    68fc:	19 86       	std	Y+9, r1	; 0x09
    68fe:	08 c0       	rjmp	.+16     	; 0x6910 <main+0xba8>
    6900:	1e 82       	std	Y+6, r1	; 0x06
    6902:	1f 82       	std	Y+7, r1	; 0x07
    6904:	18 86       	std	Y+8, r1	; 0x08
    6906:	19 86       	std	Y+9, r1	; 0x09
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    6908:	1e 8e       	std	Y+30, r1	; 0x1e
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    690a:	41 e0       	ldi	r20, 0x01	; 1
    690c:	48 8b       	std	Y+16, r20	; 0x10
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    690e:	1b 82       	std	Y+3, r1	; 0x03
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    6910:	80 91 ee 08 	lds	r24, 0x08EE
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    6914:	81 11       	cpse	r24, r1
    6916:	0c c0       	rjmp	.+24     	; 0x6930 <main+0xbc8>
				(Interrupted) ||											// Run at RC rate
				((Config.Servo_rate == FAST) && (!PWMBlocked)) ||			// Run at full loop rate if allowed
    6918:	80 91 63 06 	lds	r24, 0x0663
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    691c:	82 30       	cpi	r24, 0x02	; 2
    691e:	19 f4       	brne	.+6      	; 0x6926 <main+0xbbe>
				((Config.Servo_rate == FAST) && (!PWMBlocked)) ||			// Run at full loop rate if allowed
    6920:	58 89       	ldd	r21, Y+16	; 0x10
    6922:	55 23       	and	r21, r21
    6924:	29 f0       	breq	.+10     	; 0x6930 <main+0xbc8>
    6926:	90 91 2e 05 	lds	r25, 0x052E
    692a:	99 23       	and	r25, r25
    692c:	09 f4       	brne	.+2      	; 0x6930 <main+0xbc8>
    692e:	d6 c0       	rjmp	.+428    	; 0x6adc <main+0xd74>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed (loop rate) in FAST mode
			//******************************************************************

			if (Interrupted)
    6930:	80 91 ee 08 	lds	r24, 0x08EE
    6934:	88 23       	and	r24, r24
    6936:	21 f0       	breq	.+8      	; 0x6940 <main+0xbd8>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    6938:	10 92 ee 08 	sts	0x08EE, r1
			//* High speed (loop rate) in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    693c:	21 e0       	ldi	r18, 0x01	; 1
    693e:	2c 83       	std	Y+4, r18	; 0x04
			{
				// Mark bits depending on the selected output type
				if	(
						// Frame rates regardless of signal presence/absence
						(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    6940:	90 91 63 06 	lds	r25, 0x0663
    6944:	68 ee       	ldi	r22, 0xE8	; 232
    6946:	76 e0       	ldi	r23, 0x06	; 6
    6948:	fb 01       	movw	r30, r22
    694a:	20 e0       	ldi	r18, 0x00	; 0
    694c:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    694e:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    6950:	92 30       	cpi	r25, 0x02	; 2
    6952:	49 f4       	brne	.+18     	; 0x6966 <main+0xbfe>
						// Frame rates regardless of signal presence/absence
						(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    6954:	40 81       	ld	r20, Z
    6956:	41 11       	cpse	r20, r1
    6958:	04 c0       	rjmp	.+8      	; 0x6962 <main+0xbfa>
    695a:	4d 81       	ldd	r20, Y+5	; 0x05
    695c:	41 11       	cpse	r20, r1
    695e:	2e c0       	rjmp	.+92     	; 0x69bc <main+0xc54>
    6960:	02 c0       	rjmp	.+4      	; 0x6966 <main+0xbfe>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker > ASERVO))									// Always for D.Servo and Motor in FAST modes when signal present
    6962:	14 16       	cp	r1, r20
    6964:	5c f1       	brlt	.+86     	; 0x69bc <main+0xc54>
						
						||
						
						// Frame rates when signal present
						(
						(!Overdue) &&
    6966:	40 91 2e 05 	lds	r20, 0x052E
						(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker > ASERVO))									// Always for D.Servo and Motor in FAST modes when signal present
						)
						
						||
    696a:	41 11       	cpse	r20, r1
    696c:	0f c0       	rjmp	.+30     	; 0x698c <main+0xc24>
						
						// Frame rates when signal present
						(
						(!Overdue) &&
    696e:	91 30       	cpi	r25, 0x01	; 1
    6970:	29 f4       	brne	.+10     	; 0x697c <main+0xc14>
						(
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    6972:	40 81       	ld	r20, Z
    6974:	44 23       	and	r20, r20
    6976:	21 f0       	breq	.+8      	; 0x6980 <main+0xc18>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC when signal present
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// At RC rate for D.Servo and Motor when signal present
    6978:	0c f5       	brge	.+66     	; 0x69bc <main+0xc54>
    697a:	08 c0       	rjmp	.+16     	; 0x698c <main+0xc24>
    697c:	91 11       	cpse	r25, r1
    697e:	06 c0       	rjmp	.+12     	; 0x698c <main+0xc24>

						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    6980:	5d 85       	ldd	r21, Y+13	; 0x0d
    6982:	51 11       	cpse	r21, r1
    6984:	1b c0       	rjmp	.+54     	; 0x69bc <main+0xc54>
    6986:	4d 81       	ldd	r20, Y+5	; 0x05
    6988:	41 11       	cpse	r20, r1
    698a:	18 c0       	rjmp	.+48     	; 0x69bc <main+0xc54>
						
						||
						
						// Rates when no signal
						(
						(Overdue) &&
    698c:	40 91 2e 05 	lds	r20, 0x052E
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC when signal present
						)
						)
						
						||
    6990:	44 23       	and	r20, r20
    6992:	e1 f0       	breq	.+56     	; 0x69cc <main+0xc64>
						
						// Rates when no signal
						(
						(Overdue) &&
    6994:	91 30       	cpi	r25, 0x01	; 1
    6996:	69 f4       	brne	.+26     	; 0x69b2 <main+0xc4a>
						(
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo when no signal present
    6998:	40 81       	ld	r20, Z
    699a:	44 23       	and	r20, r20
    699c:	61 f0       	breq	.+24     	; 0x69b6 <main+0xc4e>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker > ASERVO) && (!SlowRC) && FastServoTick) ||	// At FastServoTick for A.Servo in SYNC with Fast RC
    699e:	b4 f0       	brlt	.+44     	; 0x69cc <main+0xc64>
    69a0:	4d 85       	ldd	r20, Y+13	; 0x0d
    69a2:	41 11       	cpse	r20, r1
    69a4:	02 c0       	rjmp	.+4      	; 0x69aa <main+0xc42>
    69a6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    69a8:	07 c0       	rjmp	.+14     	; 0x69b8 <main+0xc50>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker > ASERVO) && (SlowRC) && ServoTick) ||		// At ServoTick for A.Servo in SYNC with slow RC
    69aa:	4d 81       	ldd	r20, Y+5	; 0x05
    69ac:	41 11       	cpse	r20, r1
    69ae:	06 c0       	rjmp	.+12     	; 0x69bc <main+0xc54>
    69b0:	0d c0       	rjmp	.+26     	; 0x69cc <main+0xc64>
    69b2:	91 11       	cpse	r25, r1
    69b4:	0b c0       	rjmp	.+22     	; 0x69cc <main+0xc64>
	
						((Config.Servo_rate == LOW) && ServoTick)																	// All outputs at ServoTick in LOW mode
    69b6:	5d 81       	ldd	r21, Y+5	; 0x05
    69b8:	55 23       	and	r21, r21
    69ba:	41 f0       	breq	.+16     	; 0x69cc <main+0xc64>
						)
						)
					)
				{
					ServoFlag |= (1 << i);
    69bc:	41 e0       	ldi	r20, 0x01	; 1
    69be:	50 e0       	ldi	r21, 0x00	; 0
    69c0:	02 2e       	mov	r0, r18
    69c2:	01 c0       	rjmp	.+2      	; 0x69c6 <main+0xc5e>
    69c4:	44 0f       	add	r20, r20
    69c6:	0a 94       	dec	r0
    69c8:	ea f7       	brpl	.-6      	; 0x69c4 <main+0xc5c>
    69ca:	84 2b       	or	r24, r20
    69cc:	2f 5f       	subi	r18, 0xFF	; 255
    69ce:	3f 4f       	sbci	r19, 0xFF	; 255
    69d0:	b2 96       	adiw	r30, 0x22	; 34
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    69d2:	28 30       	cpi	r18, 0x08	; 8
    69d4:	31 05       	cpc	r19, r1
    69d6:	09 f0       	breq	.+2      	; 0x69da <main+0xc72>
    69d8:	bb cf       	rjmp	.-138    	; 0x6950 <main+0xbe8>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    69da:	2d 81       	ldd	r18, Y+5	; 0x05
    69dc:	22 23       	and	r18, r18
    69de:	11 f0       	breq	.+4      	; 0x69e4 <main+0xc7c>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    69e0:	1c 86       	std	Y+12, r1	; 0x0c
    69e2:	1b 86       	std	Y+11, r1	; 0x0b
			}

			if (FastServoTick)
    69e4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    69e6:	33 23       	and	r19, r19
    69e8:	11 f0       	breq	.+4      	; 0x69ee <main+0xc86>
			{
				FastServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				FastServo_Rate = 0;
    69ea:	1d 8a       	std	Y+21, r1	; 0x15
    69ec:	1c 8a       	std	Y+20, r1	; 0x14
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    69ee:	01 30       	cpi	r16, 0x01	; 1
    69f0:	11 05       	cpc	r17, r1
    69f2:	19 f5       	brne	.+70     	; 0x6a3a <main+0xcd2>
    69f4:	92 30       	cpi	r25, 0x02	; 2
    69f6:	09 f5       	brne	.+66     	; 0x6a3a <main+0xcd2>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
    69f8:	4d e8       	ldi	r20, 0x8D	; 141
    69fa:	84 16       	cp	r8, r20
    69fc:	40 e2       	ldi	r20, 0x20	; 32
    69fe:	94 06       	cpc	r9, r20
    6a00:	a1 04       	cpc	r10, r1
    6a02:	b1 04       	cpc	r11, r1
    6a04:	90 f0       	brcs	.+36     	; 0x6a2a <main+0xcc2>
    6a06:	75 01       	movw	r14, r10
    6a08:	64 01       	movw	r12, r8
    6a0a:	52 e6       	ldi	r21, 0x62	; 98
    6a0c:	85 16       	cp	r8, r21
    6a0e:	51 e5       	ldi	r21, 0x51	; 81
    6a10:	95 06       	cpc	r9, r21
    6a12:	a1 04       	cpc	r10, r1
    6a14:	b1 04       	cpc	r11, r1
    6a16:	30 f0       	brcs	.+12     	; 0x6a24 <main+0xcbc>
    6a18:	31 e6       	ldi	r19, 0x61	; 97
    6a1a:	c3 2e       	mov	r12, r19
    6a1c:	31 e5       	ldi	r19, 0x51	; 81
    6a1e:	d3 2e       	mov	r13, r19
    6a20:	e1 2c       	mov	r14, r1
    6a22:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    6a24:	21 e0       	ldi	r18, 0x01	; 1
    6a26:	28 8b       	std	Y+16, r18	; 0x10
    6a28:	08 c0       	rjmp	.+16     	; 0x6a3a <main+0xcd2>
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
				{
					PWM_interval = PWM_PERIOD_BEST;
    6a2a:	2d e8       	ldi	r18, 0x8D	; 141
    6a2c:	c2 2e       	mov	r12, r18
    6a2e:	20 e2       	ldi	r18, 0x20	; 32
    6a30:	d2 2e       	mov	r13, r18
    6a32:	e1 2c       	mov	r14, r1
    6a34:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    6a36:	31 e0       	ldi	r19, 0x01	; 1
    6a38:	38 8b       	std	Y+16, r19	; 0x10
				{
					PWM_interval = interval;		// Actual interval
				}
			}
			
			Calculate_PID();						// Calculate PID values
    6a3a:	6d a7       	std	Y+45, r22	; 0x2d
    6a3c:	7e a7       	std	Y+46, r23	; 0x2e
    6a3e:	8c a7       	std	Y+44, r24	; 0x2c
    6a40:	0e 94 95 66 	call	0xcd2a	; 0xcd2a <Calculate_PID>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
    6a44:	0e 94 18 5b 	call	0xb630	; 0xb630 <ProcessMixer>
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits. 
    6a48:	0e 94 1e 59 	call	0xb23c	; 0xb23c <UpdateServos>
													// Note that values are now at system levels (were centered around zero, now centered around 3750).				

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    6a4c:	90 91 2e 05 	lds	r25, 0x052E
    6a50:	6d a5       	ldd	r22, Y+45	; 0x2d
    6a52:	7e a5       	ldd	r23, Y+46	; 0x2e
    6a54:	8c a5       	ldd	r24, Y+44	; 0x2c
    6a56:	91 11       	cpse	r25, r1
    6a58:	04 c0       	rjmp	.+8      	; 0x6a62 <main+0xcfa>
				}
			}
		
			// Note: This is probably pointless as it's too late to save the PWM just mangled
			// Has overdue become false this loop?
			if (LastLoopOverdue && !Overdue)
    6a5a:	4b a1       	ldd	r20, Y+35	; 0x23
    6a5c:	41 11       	cpse	r20, r1
    6a5e:	18 c0       	rjmp	.+48     	; 0x6a90 <main+0xd28>
    6a60:	20 c0       	rjmp	.+64     	; 0x6aa2 <main+0xd3a>
    6a62:	20 e0       	ldi	r18, 0x00	; 0
    6a64:	30 e0       	ldi	r19, 0x00	; 0
			if (Overdue)
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
				{
					// Check for motor marker
					if (Config.Channel[i].Motor_marker == MOTOR)
    6a66:	fb 01       	movw	r30, r22
    6a68:	90 81       	ld	r25, Z
    6a6a:	92 30       	cpi	r25, 0x02	; 2
    6a6c:	49 f4       	brne	.+18     	; 0x6a80 <main+0xd18>
					{
						// Set output to motor idle pulse width
						ServoOut[i] = MOTOR_0_SYSTEM;
    6a6e:	f9 01       	movw	r30, r18
    6a70:	ee 0f       	add	r30, r30
    6a72:	ff 1f       	adc	r31, r31
    6a74:	eb 56       	subi	r30, 0x6B	; 107
    6a76:	f6 4f       	sbci	r31, 0xF6	; 246
    6a78:	4e eb       	ldi	r20, 0xBE	; 190
    6a7a:	5a e0       	ldi	r21, 0x0A	; 10
    6a7c:	51 83       	std	Z+1, r21	; 0x01
    6a7e:	40 83       	st	Z, r20
    6a80:	2f 5f       	subi	r18, 0xFF	; 255
    6a82:	3f 4f       	sbci	r19, 0xFF	; 255
    6a84:	6e 5d       	subi	r22, 0xDE	; 222
    6a86:	7f 4f       	sbci	r23, 0xFF	; 255

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
    6a88:	28 30       	cpi	r18, 0x08	; 8
    6a8a:	31 05       	cpc	r19, r1
    6a8c:	61 f7       	brne	.-40     	; 0x6a66 <main+0xcfe>
    6a8e:	e5 cf       	rjmp	.-54     	; 0x6a5a <main+0xcf2>
				}
			}
		
			// Note: This is probably pointless as it's too late to save the PWM just mangled
			// Has overdue become false this loop?
			if (LastLoopOverdue && !Overdue)
    6a90:	90 91 2e 05 	lds	r25, 0x052E
    6a94:	91 11       	cpse	r25, r1
    6a96:	05 c0       	rjmp	.+10     	; 0x6aa2 <main+0xd3a>
			{
				Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove glitch
    6a98:	90 91 34 05 	lds	r25, 0x0534
    6a9c:	92 60       	ori	r25, 0x02	; 2
    6a9e:	90 93 34 05 	sts	0x0534, r25
			}
		
			// Save Overdue status of current loop
			LastLoopOverdue = Overdue;
    6aa2:	50 91 2e 05 	lds	r21, 0x052E
    6aa6:	5b a3       	std	Y+35, r21	; 0x23
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    6aa8:	2f a5       	ldd	r18, Y+47	; 0x2f
    6aaa:	22 23       	and	r18, r18
    6aac:	39 f0       	breq	.+14     	; 0x6abc <main+0xd54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6aae:	8b ee       	ldi	r24, 0xEB	; 235
    6ab0:	9c e2       	ldi	r25, 0x2C	; 44
    6ab2:	01 97       	sbiw	r24, 0x01	; 1
    6ab4:	f1 f7       	brne	.-4      	; 0x6ab2 <main+0xd4a>
    6ab6:	00 c0       	rjmp	.+0      	; 0x6ab8 <main+0xd50>
    6ab8:	00 00       	nop
    6aba:	02 c0       	rjmp	.+4      	; 0x6ac0 <main+0xd58>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    6abc:	0e 94 80 6a 	call	0xd500	; 0xd500 <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    6ac0:	80 91 63 06 	lds	r24, 0x0663
    6ac4:	82 30       	cpi	r24, 0x02	; 2
    6ac6:	29 f4       	brne	.+10     	; 0x6ad2 <main+0xd6a>
    6ac8:	10 16       	cp	r1, r16
    6aca:	11 06       	cpc	r1, r17
    6acc:	14 f4       	brge	.+4      	; 0x6ad2 <main+0xd6a>
			{
				PWM_pulses--;
    6ace:	01 50       	subi	r16, 0x01	; 1
    6ad0:	11 09       	sbc	r17, r1
			}
			
			LoopCount = 0;						// Reset loop counter for averaging sensors
    6ad2:	10 92 2d 05 	sts	0x052D, r1
    6ad6:	1b 8e       	std	Y+27, r1	; 0x1b
    6ad8:	1d 82       	std	Y+5, r1	; 0x05
    6ada:	24 c0       	rjmp	.+72     	; 0x6b24 <main+0xdbc>
		}
		
		// In FAST mode and in-between bursts, sync up with the RC so that the time from Interrupt to PWM is constant.
		// This helps tighten up the number of pulses allowable
		else if ((Config.Servo_rate == FAST) && (PWMBlocked == true) && (RCrateMeasured == true) && (RCInterruptsON == true) && (Overdue == false))
    6adc:	82 30       	cpi	r24, 0x02	; 2
    6ade:	11 f5       	brne	.+68     	; 0x6b24 <main+0xdbc>
    6ae0:	28 89       	ldd	r18, Y+16	; 0x10
    6ae2:	22 23       	and	r18, r18
    6ae4:	f9 f0       	breq	.+62     	; 0x6b24 <main+0xdbc>
    6ae6:	3b 81       	ldd	r19, Y+3	; 0x03
    6ae8:	33 23       	and	r19, r19
    6aea:	79 f1       	breq	.+94     	; 0x6b4a <main+0xde2>
    6aec:	49 89       	ldd	r20, Y+17	; 0x11
    6aee:	44 23       	and	r20, r20
    6af0:	09 f4       	brne	.+2      	; 0x6af4 <main+0xd8c>
    6af2:	5e c0       	rjmp	.+188    	; 0x6bb0 <main+0xe48>
    6af4:	80 91 2e 05 	lds	r24, 0x052E
    6af8:	81 11       	cpse	r24, r1
    6afa:	14 c0       	rjmp	.+40     	; 0x6b24 <main+0xdbc>
    6afc:	80 e0       	ldi	r24, 0x00	; 0
    6afe:	90 e0       	ldi	r25, 0x00	; 0
		{
			fast_sync_timer = 0;
			
			// Wait here until interrupted or timed out (15ms)
			while ((Interrupted == false) && (fast_sync_timer < FASTSYNCLIMIT))
    6b00:	20 91 ee 08 	lds	r18, 0x08EE
    6b04:	21 11       	cpse	r18, r1
    6b06:	0e c0       	rjmp	.+28     	; 0x6b24 <main+0xdbc>
    6b08:	85 32       	cpi	r24, 0x25	; 37
    6b0a:	31 e0       	ldi	r19, 0x01	; 1
    6b0c:	93 07       	cpc	r25, r19
    6b0e:	50 f4       	brcc	.+20     	; 0x6b24 <main+0xdbc>
			{
				fast_sync_timer += (uint8_t)(TCNT2 - fast_sync_TCNT2);
    6b10:	20 91 b2 00 	lds	r18, 0x00B2
    6b14:	5a a5       	ldd	r21, Y+42	; 0x2a
    6b16:	25 1b       	sub	r18, r21
    6b18:	82 0f       	add	r24, r18
    6b1a:	91 1d       	adc	r25, r1
				fast_sync_TCNT2 = TCNT2;
    6b1c:	20 91 b2 00 	lds	r18, 0x00B2
    6b20:	2a a7       	std	Y+42, r18	; 0x2a
    6b22:	ee cf       	rjmp	.-36     	; 0x6b00 <main+0xd98>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    6b24:	10 16       	cp	r1, r16
    6b26:	11 06       	cpc	r1, r17
    6b28:	84 f0       	brlt	.+32     	; 0x6b4a <main+0xde2>
    6b2a:	4b 81       	ldd	r20, Y+3	; 0x03
    6b2c:	44 23       	and	r20, r20
    6b2e:	69 f0       	breq	.+26     	; 0x6b4a <main+0xde2>
    6b30:	59 89       	ldd	r21, Y+17	; 0x11
    6b32:	51 11       	cpse	r21, r1
    6b34:	0a c0       	rjmp	.+20     	; 0x6b4a <main+0xde2>
    6b36:	80 91 63 06 	lds	r24, 0x0663
    6b3a:	82 30       	cpi	r24, 0x02	; 2
    6b3c:	29 f4       	brne	.+10     	; 0x6b48 <main+0xde0>
		{
			init_int();					// Re-enable interrupts
    6b3e:	0e 94 14 48 	call	0x9028	; 0x9028 <init_int>
			RCInterruptsON = true;
    6b42:	21 e0       	ldi	r18, 0x01	; 1
    6b44:	29 8b       	std	Y+17, r18	; 0x11
    6b46:	01 c0       	rjmp	.+2      	; 0x6b4a <main+0xde2>
    6b48:	19 8a       	std	Y+17, r1	; 0x11
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    6b4a:	80 91 35 05 	lds	r24, 0x0535
    6b4e:	3b a5       	ldd	r19, Y+43	; 0x2b
    6b50:	38 17       	cp	r19, r24
    6b52:	29 f0       	breq	.+10     	; 0x6b5e <main+0xdf6>
    6b54:	48 a9       	ldd	r20, Y+48	; 0x30
    6b56:	41 11       	cpse	r20, r1
    6b58:	02 c0       	rjmp	.+4      	; 0x6b5e <main+0xdf6>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    6b5a:	57 e0       	ldi	r21, 0x07	; 7
    6b5c:	58 ab       	std	Y+48, r21	; 0x30
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    6b5e:	20 91 35 05 	lds	r18, 0x0535
    6b62:	2b a7       	std	Y+43, r18	; 0x2b
		
	} // while loop
    6b64:	9a a0       	ldd	r9, Y+34	; 0x22
    6b66:	ae 88       	ldd	r10, Y+22	; 0x16
    6b68:	bf 88       	ldd	r11, Y+23	; 0x17
    6b6a:	47 c9       	rjmp	.-3442   	; 0x5dfa <main+0x92>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    6b6c:	01 e0       	ldi	r16, 0x01	; 1
    6b6e:	10 e0       	ldi	r17, 0x00	; 0
    6b70:	a3 ce       	rjmp	.-698    	; 0x68b8 <main+0xb50>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
    6b72:	04 e0       	ldi	r16, 0x04	; 4
    6b74:	10 e0       	ldi	r17, 0x00	; 0
    6b76:	0b c0       	rjmp	.+22     	; 0x6b8e <main+0xe26>
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
    6b78:	05 e0       	ldi	r16, 0x05	; 5
    6b7a:	10 e0       	ldi	r17, 0x00	; 0
    6b7c:	08 c0       	rjmp	.+16     	; 0x6b8e <main+0xe26>
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
    6b7e:	06 e0       	ldi	r16, 0x06	; 6
    6b80:	10 e0       	ldi	r17, 0x00	; 0
    6b82:	05 c0       	rjmp	.+10     	; 0x6b8e <main+0xe26>
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
    6b84:	07 e0       	ldi	r16, 0x07	; 7
    6b86:	10 e0       	ldi	r17, 0x00	; 0
    6b88:	02 c0       	rjmp	.+4      	; 0x6b8e <main+0xe26>
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    6b8a:	08 e0       	ldi	r16, 0x08	; 8
    6b8c:	10 e0       	ldi	r17, 0x00	; 0
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    6b8e:	31 e0       	ldi	r19, 0x01	; 1
    6b90:	3b 83       	std	Y+3, r19	; 0x03
    6b92:	92 ce       	rjmp	.-732    	; 0x68b8 <main+0xb50>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 29ms is safe for all formats.

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
    6b94:	03 e0       	ldi	r16, 0x03	; 3
    6b96:	10 e0       	ldi	r17, 0x00	; 0
    6b98:	08 c0       	rjmp	.+16     	; 0x6baa <main+0xe42>
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
    6b9a:	04 e0       	ldi	r16, 0x04	; 4
    6b9c:	10 e0       	ldi	r17, 0x00	; 0
    6b9e:	05 c0       	rjmp	.+10     	; 0x6baa <main+0xe42>
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
    6ba0:	05 e0       	ldi	r16, 0x05	; 5
    6ba2:	10 e0       	ldi	r17, 0x00	; 0
    6ba4:	02 c0       	rjmp	.+4      	; 0x6baa <main+0xe42>
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    6ba6:	06 e0       	ldi	r16, 0x06	; 6
    6ba8:	10 e0       	ldi	r17, 0x00	; 0
			Servo_Rate = 0;
		}
		
		if (FastServo_Rate > SERVO_RATE_HIGH)
		{
			FastServoTick = true;	// Slow device is ready for output generation
    6baa:	41 e0       	ldi	r20, 0x01	; 1
    6bac:	4b 83       	std	Y+3, r20	; 0x03
    6bae:	84 ce       	rjmp	.-760    	; 0x68b8 <main+0xb50>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    6bb0:	10 16       	cp	r1, r16
    6bb2:	11 06       	cpc	r1, r17
    6bb4:	54 f2       	brlt	.-108    	; 0x6b4a <main+0xde2>
    6bb6:	bf cf       	rjmp	.-130    	; 0x6b36 <main+0xdce>

00006bb8 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    6bb8:	0f 93       	push	r16
    6bba:	1f 93       	push	r17
    6bbc:	cf 93       	push	r28
    6bbe:	df 93       	push	r29
    6bc0:	c7 e0       	ldi	r28, 0x07	; 7
    6bc2:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    6bc4:	08 2f       	mov	r16, r24
    6bc6:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    6bc8:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    6bca:	c8 01       	movw	r24, r16
    6bcc:	0c 2e       	mov	r0, r28
    6bce:	02 c0       	rjmp	.+4      	; 0x6bd4 <spiwrite+0x1c>
    6bd0:	95 95       	asr	r25
    6bd2:	87 95       	ror	r24
    6bd4:	0a 94       	dec	r0
    6bd6:	e2 f7       	brpl	.-8      	; 0x6bd0 <spiwrite+0x18>
    6bd8:	80 ff       	sbrs	r24, 0
    6bda:	02 c0       	rjmp	.+4      	; 0x6be0 <spiwrite+0x28>
		{
			LCD_SI = 1;
    6bdc:	59 9a       	sbi	0x0b, 1	; 11
    6bde:	01 c0       	rjmp	.+2      	; 0x6be2 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    6be0:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    6be2:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    6be4:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <glcd_delay>
    6be8:	21 97       	sbiw	r28, 0x01	; 1
    6bea:	70 f7       	brcc	.-36     	; 0x6bc8 <spiwrite+0x10>
	}
}
    6bec:	df 91       	pop	r29
    6bee:	cf 91       	pop	r28
    6bf0:	1f 91       	pop	r17
    6bf2:	0f 91       	pop	r16
    6bf4:	08 95       	ret

00006bf6 <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    6bf6:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    6bf8:	0c 94 dc 35 	jmp	0x6bb8	; 0x6bb8 <spiwrite>

00006bfc <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    6bfc:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    6bfe:	0c 94 dc 35 	jmp	0x6bb8	; 0x6bb8 <spiwrite>

00006c02 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    6c02:	cf 93       	push	r28
    6c04:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);		// 0x81
    6c06:	81 e8       	ldi	r24, 0x81	; 129
    6c08:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
	st7565_command(val);
    6c0c:	8c 2f       	mov	r24, r28
}
    6c0e:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);		// 0x81
	st7565_command(val);
    6c10:	0c 94 fb 35 	jmp	0x6bf6	; 0x6bf6 <st7565_command>

00006c14 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    6c14:	cf 93       	push	r28
    6c16:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    6c18:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    6c1a:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6c1c:	87 e8       	ldi	r24, 0x87	; 135
    6c1e:	93 e1       	ldi	r25, 0x13	; 19
    6c20:	01 97       	sbiw	r24, 0x01	; 1
    6c22:	f1 f7       	brne	.-4      	; 0x6c20 <st7565_init+0xc>
    6c24:	00 c0       	rjmp	.+0      	; 0x6c26 <st7565_init+0x12>
    6c26:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    6c28:	5e 9a       	sbi	0x0b, 6	; 11
    6c2a:	c9 e3       	ldi	r28, 0x39	; 57
    6c2c:	d4 e1       	ldi	r29, 0x14	; 20

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    6c2e:	fe 01       	movw	r30, r28
    6c30:	84 91       	lpm	r24, Z
    6c32:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
    6c36:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    6c38:	f4 e1       	ldi	r31, 0x14	; 20
    6c3a:	c7 34       	cpi	r28, 0x47	; 71
    6c3c:	df 07       	cpc	r29, r31
    6c3e:	b9 f7       	brne	.-18     	; 0x6c2e <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    6c40:	80 91 da 06 	lds	r24, 0x06DA
    6c44:	0e 94 01 36 	call	0x6c02	; 0x6c02 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    6c48:	88 ec       	ldi	r24, 0xC8	; 200
}
    6c4a:	df 91       	pop	r29
    6c4c:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    6c4e:	0c 94 fb 35 	jmp	0x6bf6	; 0x6bf6 <st7565_command>

00006c52 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    6c52:	cf 92       	push	r12
    6c54:	df 92       	push	r13
    6c56:	ef 92       	push	r14
    6c58:	ff 92       	push	r15
    6c5a:	0f 93       	push	r16
    6c5c:	1f 93       	push	r17
    6c5e:	cf 93       	push	r28
    6c60:	df 93       	push	r29
    6c62:	8c 01       	movw	r16, r24
    6c64:	c7 e4       	ldi	r28, 0x47	; 71
    6c66:	d4 e1       	ldi	r29, 0x14	; 20
    6c68:	ec 2e       	mov	r14, r28
    6c6a:	88 e0       	ldi	r24, 0x08	; 8
    6c6c:	e8 0e       	add	r14, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    6c6e:	fe 01       	movw	r30, r28
    6c70:	84 91       	lpm	r24, Z
    6c72:	80 6b       	ori	r24, 0xB0	; 176
    6c74:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    6c78:	80 e0       	ldi	r24, 0x00	; 0
    6c7a:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    6c7e:	80 e1       	ldi	r24, 0x10	; 16
    6c80:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    6c84:	80 ee       	ldi	r24, 0xE0	; 224
    6c86:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
    6c8a:	68 01       	movw	r12, r16

		for(c = 0; c < 128; c++) 
    6c8c:	f1 2c       	mov	r15, r1
		{
			st7565_data(buffer[(128*p)+c]);
    6c8e:	f6 01       	movw	r30, r12
    6c90:	81 91       	ld	r24, Z+
    6c92:	6f 01       	movw	r12, r30
    6c94:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    6c98:	f3 94       	inc	r15
    6c9a:	f0 e8       	ldi	r31, 0x80	; 128
    6c9c:	ff 12       	cpse	r15, r31
    6c9e:	f7 cf       	rjmp	.-18     	; 0x6c8e <write_buffer+0x3c>
    6ca0:	21 96       	adiw	r28, 0x01	; 1
    6ca2:	00 58       	subi	r16, 0x80	; 128
    6ca4:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    6ca6:	ec 12       	cpse	r14, r28
    6ca8:	e2 cf       	rjmp	.-60     	; 0x6c6e <write_buffer+0x1c>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    6caa:	df 91       	pop	r29
    6cac:	cf 91       	pop	r28
    6cae:	1f 91       	pop	r17
    6cb0:	0f 91       	pop	r16
    6cb2:	ff 90       	pop	r15
    6cb4:	ef 90       	pop	r14
    6cb6:	df 90       	pop	r13
    6cb8:	cf 90       	pop	r12
    6cba:	08 95       	ret

00006cbc <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    6cbc:	20 e0       	ldi	r18, 0x00	; 0
    6cbe:	34 e0       	ldi	r19, 0x04	; 4
    6cc0:	fc 01       	movw	r30, r24
    6cc2:	a9 01       	movw	r20, r18
    6cc4:	11 92       	st	Z+, r1
    6cc6:	41 50       	subi	r20, 0x01	; 1
    6cc8:	50 40       	sbci	r21, 0x00	; 0
    6cca:	e1 f7       	brne	.-8      	; 0x6cc4 <clear_buffer+0x8>
    6ccc:	08 95       	ret

00006cce <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    6cce:	cf 93       	push	r28
    6cd0:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    6cd2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    6cd4:	8d 2f       	mov	r24, r29
    6cd6:	80 6b       	ori	r24, 0xB0	; 176
    6cd8:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    6cdc:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    6cde:	8c 2f       	mov	r24, r28
    6ce0:	8f 70       	andi	r24, 0x0F	; 15
    6ce2:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    6ce6:	8c 2f       	mov	r24, r28
    6ce8:	82 95       	swap	r24
    6cea:	8f 70       	andi	r24, 0x0F	; 15
    6cec:	80 61       	ori	r24, 0x10	; 16
    6cee:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
			st7565_data(0x00);											// Clear data
    6cf2:	80 e0       	ldi	r24, 0x00	; 0
    6cf4:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    6cf8:	cf 5f       	subi	r28, 0xFF	; 255
    6cfa:	c0 38       	cpi	r28, 0x80	; 128
    6cfc:	81 f7       	brne	.-32     	; 0x6cde <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    6cfe:	df 5f       	subi	r29, 0xFF	; 255
    6d00:	d8 30       	cpi	r29, 0x08	; 8
    6d02:	41 f7       	brne	.-48     	; 0x6cd4 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    6d04:	df 91       	pop	r29
    6d06:	cf 91       	pop	r28
    6d08:	08 95       	ret

00006d0a <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    6d0a:	67 fd       	sbrc	r22, 7
    6d0c:	35 c0       	rjmp	.+106    	; 0x6d78 <setpixel+0x6e>
    6d0e:	40 34       	cpi	r20, 0x40	; 64
    6d10:	98 f5       	brcc	.+102    	; 0x6d78 <setpixel+0x6e>
    6d12:	34 2f       	mov	r19, r20
    6d14:	36 95       	lsr	r19
    6d16:	36 95       	lsr	r19
    6d18:	36 95       	lsr	r19
    6d1a:	70 e0       	ldi	r23, 0x00	; 0
    6d1c:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    6d1e:	22 23       	and	r18, r18
    6d20:	a9 f0       	breq	.+42     	; 0x6d4c <setpixel+0x42>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    6d22:	20 e8       	ldi	r18, 0x80	; 128
    6d24:	32 9f       	mul	r19, r18
    6d26:	60 0d       	add	r22, r0
    6d28:	71 1d       	adc	r23, r1
    6d2a:	11 24       	eor	r1, r1
    6d2c:	fc 01       	movw	r30, r24
    6d2e:	e6 0f       	add	r30, r22
    6d30:	f7 1f       	adc	r31, r23
    6d32:	40 95       	com	r20
    6d34:	50 95       	com	r21
    6d36:	47 70       	andi	r20, 0x07	; 7
    6d38:	55 27       	eor	r21, r21
    6d3a:	81 e0       	ldi	r24, 0x01	; 1
    6d3c:	90 e0       	ldi	r25, 0x00	; 0
    6d3e:	01 c0       	rjmp	.+2      	; 0x6d42 <setpixel+0x38>
    6d40:	88 0f       	add	r24, r24
    6d42:	4a 95       	dec	r20
    6d44:	ea f7       	brpl	.-6      	; 0x6d40 <setpixel+0x36>
    6d46:	90 81       	ld	r25, Z
    6d48:	89 2b       	or	r24, r25
    6d4a:	15 c0       	rjmp	.+42     	; 0x6d76 <setpixel+0x6c>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    6d4c:	20 e8       	ldi	r18, 0x80	; 128
    6d4e:	32 9f       	mul	r19, r18
    6d50:	60 0d       	add	r22, r0
    6d52:	71 1d       	adc	r23, r1
    6d54:	11 24       	eor	r1, r1
    6d56:	fc 01       	movw	r30, r24
    6d58:	e6 0f       	add	r30, r22
    6d5a:	f7 1f       	adc	r31, r23
    6d5c:	40 95       	com	r20
    6d5e:	50 95       	com	r21
    6d60:	47 70       	andi	r20, 0x07	; 7
    6d62:	55 27       	eor	r21, r21
    6d64:	81 e0       	ldi	r24, 0x01	; 1
    6d66:	90 e0       	ldi	r25, 0x00	; 0
    6d68:	01 c0       	rjmp	.+2      	; 0x6d6c <setpixel+0x62>
    6d6a:	88 0f       	add	r24, r24
    6d6c:	4a 95       	dec	r20
    6d6e:	ea f7       	brpl	.-6      	; 0x6d6a <setpixel+0x60>
    6d70:	80 95       	com	r24
    6d72:	90 81       	ld	r25, Z
    6d74:	89 23       	and	r24, r25
    6d76:	80 83       	st	Z, r24
    6d78:	08 95       	ret

00006d7a <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    6d7a:	9f 92       	push	r9
    6d7c:	af 92       	push	r10
    6d7e:	bf 92       	push	r11
    6d80:	cf 92       	push	r12
    6d82:	df 92       	push	r13
    6d84:	ef 92       	push	r14
    6d86:	ff 92       	push	r15
    6d88:	0f 93       	push	r16
    6d8a:	1f 93       	push	r17
    6d8c:	cf 93       	push	r28
    6d8e:	df 93       	push	r29
    6d90:	6c 01       	movw	r12, r24
    6d92:	c6 2f       	mov	r28, r22
    6d94:	d4 2f       	mov	r29, r20
    6d96:	12 2f       	mov	r17, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    6d98:	40 2f       	mov	r20, r16
    6d9a:	50 e0       	ldi	r21, 0x00	; 0
    6d9c:	4d 1b       	sub	r20, r29
    6d9e:	51 09       	sbc	r21, r1
    6da0:	57 ff       	sbrs	r21, 7
    6da2:	03 c0       	rjmp	.+6      	; 0x6daa <drawline+0x30>
    6da4:	51 95       	neg	r21
    6da6:	41 95       	neg	r20
    6da8:	51 09       	sbc	r21, r1
    6daa:	81 2f       	mov	r24, r17
    6dac:	90 e0       	ldi	r25, 0x00	; 0
    6dae:	8c 1b       	sub	r24, r28
    6db0:	91 09       	sbc	r25, r1
    6db2:	97 ff       	sbrs	r25, 7
    6db4:	03 c0       	rjmp	.+6      	; 0x6dbc <drawline+0x42>
    6db6:	91 95       	neg	r25
    6db8:	81 95       	neg	r24
    6dba:	91 09       	sbc	r25, r1
    6dbc:	aa 24       	eor	r10, r10
    6dbe:	a3 94       	inc	r10
    6dc0:	84 17       	cp	r24, r20
    6dc2:	95 07       	cpc	r25, r21
    6dc4:	14 f0       	brlt	.+4      	; 0x6dca <drawline+0x50>
    6dc6:	a1 2c       	mov	r10, r1
    6dc8:	06 c0       	rjmp	.+12     	; 0x6dd6 <drawline+0x5c>
	if (steep) 
    6dca:	81 2f       	mov	r24, r17
	{
		swap(x0, y0);
		swap(x1, y1);
    6dcc:	10 2f       	mov	r17, r16
    6dce:	08 2f       	mov	r16, r24

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
    6dd0:	8c 2f       	mov	r24, r28
	{
		swap(x0, y0);
    6dd2:	cd 2f       	mov	r28, r29
    6dd4:	d8 2f       	mov	r29, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    6dd6:	1c 17       	cp	r17, r28
    6dd8:	30 f4       	brcc	.+12     	; 0x6de6 <drawline+0x6c>
    6dda:	8d 2f       	mov	r24, r29
	{
		swap(x0, x1);
		swap(y0, y1);
    6ddc:	d0 2f       	mov	r29, r16
    6dde:	08 2f       	mov	r16, r24
	{
		swap(x0, y0);
		swap(x1, y1);
	}

	if (x0 > x1) 
    6de0:	8c 2f       	mov	r24, r28
    6de2:	c1 2f       	mov	r28, r17
    6de4:	18 2f       	mov	r17, r24
		swap(x0, x1);
		swap(y0, y1);
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    6de6:	91 2e       	mov	r9, r17
    6de8:	9c 1a       	sub	r9, r28
	dy = abs(y1 - y0);
    6dea:	40 2f       	mov	r20, r16
    6dec:	50 e0       	ldi	r21, 0x00	; 0
    6dee:	4d 1b       	sub	r20, r29
    6df0:	51 09       	sbc	r21, r1
    6df2:	57 ff       	sbrs	r21, 7
    6df4:	03 c0       	rjmp	.+6      	; 0x6dfc <drawline+0x82>
    6df6:	51 95       	neg	r21
    6df8:	41 95       	neg	r20
    6dfa:	51 09       	sbc	r21, r1
    6dfc:	f4 2e       	mov	r15, r20

	int8_t err = dx / 2;
    6dfe:	b9 2c       	mov	r11, r9
    6e00:	b6 94       	lsr	r11
	int8_t ystep;

	if (y0 < y1) 
    6e02:	d0 17       	cp	r29, r16
    6e04:	10 f0       	brcs	.+4      	; 0x6e0a <drawline+0x90>
	{
		ystep = 1;
	} 
	else 
	{
		ystep = -1;
    6e06:	0f ef       	ldi	r16, 0xFF	; 255
    6e08:	10 c0       	rjmp	.+32     	; 0x6e2a <drawline+0xb0>
	int8_t err = dx / 2;
	int8_t ystep;

	if (y0 < y1) 
	{
		ystep = 1;
    6e0a:	01 e0       	ldi	r16, 0x01	; 1
    6e0c:	0e c0       	rjmp	.+28     	; 0x6e2a <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    6e0e:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    6e10:	aa 20       	and	r10, r10
    6e12:	71 f0       	breq	.+28     	; 0x6e30 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    6e14:	4c 2f       	mov	r20, r28
    6e16:	6d 2f       	mov	r22, r29
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    6e18:	c6 01       	movw	r24, r12
    6e1a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
		}
		err -= dy;
    6e1e:	bf 18       	sub	r11, r15
		if (err < 0) 
    6e20:	b7 fe       	sbrs	r11, 7
    6e22:	02 c0       	rjmp	.+4      	; 0x6e28 <drawline+0xae>
		{
			y0 += ystep;
    6e24:	d0 0f       	add	r29, r16
			err += dx;
    6e26:	b9 0c       	add	r11, r9
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    6e28:	cf 5f       	subi	r28, 0xFF	; 255
    6e2a:	c1 17       	cp	r28, r17
    6e2c:	80 f3       	brcs	.-32     	; 0x6e0e <drawline+0x94>
    6e2e:	03 c0       	rjmp	.+6      	; 0x6e36 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    6e30:	4d 2f       	mov	r20, r29
    6e32:	6c 2f       	mov	r22, r28
    6e34:	f1 cf       	rjmp	.-30     	; 0x6e18 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    6e36:	df 91       	pop	r29
    6e38:	cf 91       	pop	r28
    6e3a:	1f 91       	pop	r17
    6e3c:	0f 91       	pop	r16
    6e3e:	ff 90       	pop	r15
    6e40:	ef 90       	pop	r14
    6e42:	df 90       	pop	r13
    6e44:	cf 90       	pop	r12
    6e46:	bf 90       	pop	r11
    6e48:	af 90       	pop	r10
    6e4a:	9f 90       	pop	r9
    6e4c:	08 95       	ret

00006e4e <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    6e4e:	af 92       	push	r10
    6e50:	bf 92       	push	r11
    6e52:	cf 92       	push	r12
    6e54:	df 92       	push	r13
    6e56:	ef 92       	push	r14
    6e58:	ff 92       	push	r15
    6e5a:	0f 93       	push	r16
    6e5c:	1f 93       	push	r17
    6e5e:	cf 93       	push	r28
    6e60:	df 93       	push	r29
    6e62:	5c 01       	movw	r10, r24
    6e64:	f4 2e       	mov	r15, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6e66:	c6 2f       	mov	r28, r22
    6e68:	c2 2e       	mov	r12, r18
    6e6a:	d1 2c       	mov	r13, r1
    6e6c:	c6 0e       	add	r12, r22
    6e6e:	d1 1c       	adc	r13, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    6e70:	10 e0       	ldi	r17, 0x00	; 0
    6e72:	04 0f       	add	r16, r20
    6e74:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6e76:	8c 2f       	mov	r24, r28
    6e78:	90 e0       	ldi	r25, 0x00	; 0
    6e7a:	8c 15       	cp	r24, r12
    6e7c:	9d 05       	cpc	r25, r13
    6e7e:	84 f4       	brge	.+32     	; 0x6ea0 <fillrect+0x52>
    6e80:	df 2d       	mov	r29, r15
	{
		for (uint8_t j=y; j<y+h; j++) 
    6e82:	8d 2f       	mov	r24, r29
    6e84:	90 e0       	ldi	r25, 0x00	; 0
    6e86:	80 17       	cp	r24, r16
    6e88:	91 07       	cpc	r25, r17
    6e8a:	44 f4       	brge	.+16     	; 0x6e9c <fillrect+0x4e>
		{
			setpixel(buff, i, j, color);
    6e8c:	2e 2d       	mov	r18, r14
    6e8e:	4d 2f       	mov	r20, r29
    6e90:	6c 2f       	mov	r22, r28
    6e92:	c5 01       	movw	r24, r10
    6e94:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    6e98:	df 5f       	subi	r29, 0xFF	; 255
    6e9a:	f3 cf       	rjmp	.-26     	; 0x6e82 <fillrect+0x34>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6e9c:	cf 5f       	subi	r28, 0xFF	; 255
    6e9e:	eb cf       	rjmp	.-42     	; 0x6e76 <fillrect+0x28>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    6ea0:	df 91       	pop	r29
    6ea2:	cf 91       	pop	r28
    6ea4:	1f 91       	pop	r17
    6ea6:	0f 91       	pop	r16
    6ea8:	ff 90       	pop	r15
    6eaa:	ef 90       	pop	r14
    6eac:	df 90       	pop	r13
    6eae:	cf 90       	pop	r12
    6eb0:	bf 90       	pop	r11
    6eb2:	af 90       	pop	r10
    6eb4:	08 95       	ret

00006eb6 <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    6eb6:	9f 92       	push	r9
    6eb8:	af 92       	push	r10
    6eba:	bf 92       	push	r11
    6ebc:	cf 92       	push	r12
    6ebe:	df 92       	push	r13
    6ec0:	ef 92       	push	r14
    6ec2:	ff 92       	push	r15
    6ec4:	0f 93       	push	r16
    6ec6:	1f 93       	push	r17
    6ec8:	cf 93       	push	r28
    6eca:	df 93       	push	r29
    6ecc:	6c 01       	movw	r12, r24
    6ece:	f6 2e       	mov	r15, r22
    6ed0:	c4 2f       	mov	r28, r20
    6ed2:	d2 2f       	mov	r29, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6ed4:	16 2f       	mov	r17, r22
    6ed6:	a2 2e       	mov	r10, r18
    6ed8:	b1 2c       	mov	r11, r1
    6eda:	a6 0e       	add	r10, r22
    6edc:	b1 1c       	adc	r11, r1
    6ede:	99 24       	eor	r9, r9
    6ee0:	9a 94       	dec	r9
    6ee2:	90 0e       	add	r9, r16
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    6ee4:	94 0e       	add	r9, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6ee6:	81 2f       	mov	r24, r17
    6ee8:	90 e0       	ldi	r25, 0x00	; 0
    6eea:	8a 15       	cp	r24, r10
    6eec:	9b 05       	cpc	r25, r11
    6eee:	74 f4       	brge	.+28     	; 0x6f0c <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    6ef0:	2e 2d       	mov	r18, r14
    6ef2:	4c 2f       	mov	r20, r28
    6ef4:	61 2f       	mov	r22, r17
    6ef6:	c6 01       	movw	r24, r12
    6ef8:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
		setpixel(buff, i, y+h-1, color);
    6efc:	2e 2d       	mov	r18, r14
    6efe:	49 2d       	mov	r20, r9
    6f00:	61 2f       	mov	r22, r17
    6f02:	c6 01       	movw	r24, r12
    6f04:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6f08:	1f 5f       	subi	r17, 0xFF	; 255
    6f0a:	ed cf       	rjmp	.-38     	; 0x6ee6 <drawrect+0x30>
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    6f0c:	10 e0       	ldi	r17, 0x00	; 0
    6f0e:	0c 0f       	add	r16, r28
    6f10:	11 1d       	adc	r17, r1
    6f12:	d1 50       	subi	r29, 0x01	; 1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    6f14:	df 0d       	add	r29, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    6f16:	8c 2f       	mov	r24, r28
    6f18:	90 e0       	ldi	r25, 0x00	; 0
    6f1a:	80 17       	cp	r24, r16
    6f1c:	91 07       	cpc	r25, r17
    6f1e:	74 f4       	brge	.+28     	; 0x6f3c <drawrect+0x86>
	{
		setpixel(buff, x, i, color);
    6f20:	2e 2d       	mov	r18, r14
    6f22:	4c 2f       	mov	r20, r28
    6f24:	6f 2d       	mov	r22, r15
    6f26:	c6 01       	movw	r24, r12
    6f28:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
		setpixel(buff, x+w-1, i, color);
    6f2c:	2e 2d       	mov	r18, r14
    6f2e:	4c 2f       	mov	r20, r28
    6f30:	6d 2f       	mov	r22, r29
    6f32:	c6 01       	movw	r24, r12
    6f34:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    6f38:	cf 5f       	subi	r28, 0xFF	; 255
    6f3a:	ed cf       	rjmp	.-38     	; 0x6f16 <drawrect+0x60>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    6f3c:	df 91       	pop	r29
    6f3e:	cf 91       	pop	r28
    6f40:	1f 91       	pop	r17
    6f42:	0f 91       	pop	r16
    6f44:	ff 90       	pop	r15
    6f46:	ef 90       	pop	r14
    6f48:	df 90       	pop	r13
    6f4a:	cf 90       	pop	r12
    6f4c:	bf 90       	pop	r11
    6f4e:	af 90       	pop	r10
    6f50:	9f 90       	pop	r9
    6f52:	08 95       	ret

00006f54 <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    6f54:	4f 92       	push	r4
    6f56:	5f 92       	push	r5
    6f58:	6f 92       	push	r6
    6f5a:	7f 92       	push	r7
    6f5c:	8f 92       	push	r8
    6f5e:	9f 92       	push	r9
    6f60:	af 92       	push	r10
    6f62:	bf 92       	push	r11
    6f64:	cf 92       	push	r12
    6f66:	df 92       	push	r13
    6f68:	ef 92       	push	r14
    6f6a:	ff 92       	push	r15
    6f6c:	0f 93       	push	r16
    6f6e:	1f 93       	push	r17
    6f70:	cf 93       	push	r28
    6f72:	df 93       	push	r29
    6f74:	6c 01       	movw	r12, r24
    6f76:	e6 2e       	mov	r14, r22
    6f78:	64 2e       	mov	r6, r20
	int8_t f = 1 - r;
    6f7a:	11 e0       	ldi	r17, 0x01	; 1
    6f7c:	12 1b       	sub	r17, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    6f7e:	f2 2e       	mov	r15, r18
    6f80:	f1 94       	neg	r15
    6f82:	ff 0c       	add	r15, r15
	int8_t x = 0;
	int8_t y = r;
    6f84:	c2 2f       	mov	r28, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    6f86:	d4 2f       	mov	r29, r20
    6f88:	d2 1b       	sub	r29, r18
    6f8a:	a4 2e       	mov	r10, r20
    6f8c:	b1 2c       	mov	r11, r1
    6f8e:	45 01       	movw	r8, r10
    6f90:	82 0e       	add	r8, r18
    6f92:	91 1c       	adc	r9, r1
    6f94:	8d 2f       	mov	r24, r29
    6f96:	0d 2e       	mov	r0, r29
    6f98:	00 0c       	add	r0, r0
    6f9a:	99 0b       	sbc	r25, r25
    6f9c:	88 16       	cp	r8, r24
    6f9e:	99 06       	cpc	r9, r25
    6fa0:	44 f0       	brlt	.+16     	; 0x6fb2 <fillcircle+0x5e>
	{
		setpixel(buff, x0, i, color);
    6fa2:	20 2f       	mov	r18, r16
    6fa4:	4d 2f       	mov	r20, r29
    6fa6:	6e 2d       	mov	r22, r14
    6fa8:	c6 01       	movw	r24, r12
    6faa:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
    6fae:	df 5f       	subi	r29, 0xFF	; 255
    6fb0:	f1 cf       	rjmp	.-30     	; 0x6f94 <fillcircle+0x40>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    6fb2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    6fb4:	dc 17       	cp	r29, r28
    6fb6:	0c f0       	brlt	.+2      	; 0x6fba <fillcircle+0x66>
    6fb8:	4c c0       	rjmp	.+152    	; 0x7052 <fillcircle+0xfe>
	{
		if (f >= 0) 
    6fba:	17 fd       	sbrc	r17, 7
    6fbc:	04 c0       	rjmp	.+8      	; 0x6fc6 <fillcircle+0x72>
		{
			y--;
    6fbe:	c1 50       	subi	r28, 0x01	; 1
			ddF_y += 2;
    6fc0:	f3 94       	inc	r15
    6fc2:	f3 94       	inc	r15
			f += ddF_y;
    6fc4:	1f 0d       	add	r17, r15
    6fc6:	df 5f       	subi	r29, 0xFF	; 255
    6fc8:	8d 2f       	mov	r24, r29
    6fca:	88 0f       	add	r24, r24
    6fcc:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    6fce:	18 0f       	add	r17, r24

		for (i=y0-y; i<=y0+y; i++) 
    6fd0:	76 2c       	mov	r7, r6
    6fd2:	7c 1a       	sub	r7, r28
    6fd4:	45 01       	movw	r8, r10
    6fd6:	8c 0e       	add	r8, r28
    6fd8:	91 1c       	adc	r9, r1
    6fda:	c7 fd       	sbrc	r28, 7
    6fdc:	9a 94       	dec	r9
    6fde:	5d 2e       	mov	r5, r29
    6fe0:	5e 0c       	add	r5, r14
    6fe2:	4e 2c       	mov	r4, r14
    6fe4:	4d 1a       	sub	r4, r29
    6fe6:	87 2d       	mov	r24, r7
    6fe8:	07 2c       	mov	r0, r7
    6fea:	00 0c       	add	r0, r0
    6fec:	99 0b       	sbc	r25, r25
    6fee:	88 16       	cp	r8, r24
    6ff0:	99 06       	cpc	r9, r25
    6ff2:	74 f0       	brlt	.+28     	; 0x7010 <fillcircle+0xbc>
		{
			setpixel(buff, x0+x, i, color);
    6ff4:	20 2f       	mov	r18, r16
    6ff6:	47 2d       	mov	r20, r7
    6ff8:	65 2d       	mov	r22, r5
    6ffa:	c6 01       	movw	r24, r12
    6ffc:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
			setpixel(buff, x0-x, i, color);
    7000:	20 2f       	mov	r18, r16
    7002:	47 2d       	mov	r20, r7
    7004:	64 2d       	mov	r22, r4
    7006:	c6 01       	movw	r24, r12
    7008:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
    700c:	73 94       	inc	r7
    700e:	eb cf       	rjmp	.-42     	; 0x6fe6 <fillcircle+0x92>
    7010:	76 2c       	mov	r7, r6
    7012:	7d 1a       	sub	r7, r29
		} 
		for (i=y0-x; i<=y0+x; i++) 
    7014:	45 01       	movw	r8, r10
    7016:	8d 0e       	add	r8, r29
    7018:	91 1c       	adc	r9, r1
    701a:	d7 fd       	sbrc	r29, 7
    701c:	9a 94       	dec	r9
		{
			setpixel(buff, x0+y, i, color);
    701e:	5c 2e       	mov	r5, r28
    7020:	5e 0c       	add	r5, r14
			setpixel(buff, x0-y, i, color);
    7022:	4e 2c       	mov	r4, r14
    7024:	4c 1a       	sub	r4, r28
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    7026:	87 2d       	mov	r24, r7
    7028:	07 2c       	mov	r0, r7
    702a:	00 0c       	add	r0, r0
    702c:	99 0b       	sbc	r25, r25
    702e:	88 16       	cp	r8, r24
    7030:	99 06       	cpc	r9, r25
    7032:	0c f4       	brge	.+2      	; 0x7036 <fillcircle+0xe2>
    7034:	bf cf       	rjmp	.-130    	; 0x6fb4 <fillcircle+0x60>
		{
			setpixel(buff, x0+y, i, color);
    7036:	20 2f       	mov	r18, r16
    7038:	47 2d       	mov	r20, r7
    703a:	65 2d       	mov	r22, r5
    703c:	c6 01       	movw	r24, r12
    703e:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
			setpixel(buff, x0-y, i, color);
    7042:	20 2f       	mov	r18, r16
    7044:	47 2d       	mov	r20, r7
    7046:	64 2d       	mov	r22, r4
    7048:	c6 01       	movw	r24, r12
    704a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
    704e:	73 94       	inc	r7
    7050:	ea cf       	rjmp	.-44     	; 0x7026 <fillcircle+0xd2>
		}    
	}
}
    7052:	df 91       	pop	r29
    7054:	cf 91       	pop	r28
    7056:	1f 91       	pop	r17
    7058:	0f 91       	pop	r16
    705a:	ff 90       	pop	r15
    705c:	ef 90       	pop	r14
    705e:	df 90       	pop	r13
    7060:	cf 90       	pop	r12
    7062:	bf 90       	pop	r11
    7064:	af 90       	pop	r10
    7066:	9f 90       	pop	r9
    7068:	8f 90       	pop	r8
    706a:	7f 90       	pop	r7
    706c:	6f 90       	pop	r6
    706e:	5f 90       	pop	r5
    7070:	4f 90       	pop	r4
    7072:	08 95       	ret

00007074 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    7074:	88 0f       	add	r24, r24
    7076:	99 1f       	adc	r25, r25
    7078:	fc 01       	movw	r30, r24
    707a:	e1 5b       	subi	r30, 0xB1	; 177
    707c:	fb 4e       	sbci	r31, 0xEB	; 235
    707e:	85 91       	lpm	r24, Z+
    7080:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    7082:	0c 94 c1 62 	jmp	0xc582	; 0xc582 <pgm_mugui_lcd_puts>

00007086 <gLCDprint_Menu_P>:
    7086:	0c 94 c1 62 	jmp	0xc582	; 0xc582 <pgm_mugui_lcd_puts>

0000708a <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    708a:	80 e0       	ldi	r24, 0x00	; 0
    708c:	91 e0       	ldi	r25, 0x01	; 1
    708e:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    7092:	23 e0       	ldi	r18, 0x03	; 3
    7094:	30 e0       	ldi	r19, 0x00	; 0
    7096:	49 e2       	ldi	r20, 0x29	; 41
    7098:	50 e0       	ldi	r21, 0x00	; 0
    709a:	6f ed       	ldi	r22, 0xDF	; 223
    709c:	74 e0       	ldi	r23, 0x04	; 4
    709e:	89 e7       	ldi	r24, 0x79	; 121
    70a0:	90 e0       	ldi	r25, 0x00	; 0
    70a2:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    70a6:	27 e1       	ldi	r18, 0x17	; 23
    70a8:	30 e0       	ldi	r19, 0x00	; 0
    70aa:	48 e1       	ldi	r20, 0x18	; 24
    70ac:	50 e0       	ldi	r21, 0x00	; 0
    70ae:	6f ed       	ldi	r22, 0xDF	; 223
    70b0:	74 e0       	ldi	r23, 0x04	; 4
    70b2:	8a e7       	ldi	r24, 0x7A	; 122
    70b4:	90 e0       	ldi	r25, 0x00	; 0
    70b6:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

	// Display most important error
	if (General_error & (1 << LVA_ALARM))							// Low voltage
    70ba:	80 91 35 05 	lds	r24, 0x0535
    70be:	83 ff       	sbrs	r24, 3
    70c0:	13 c0       	rjmp	.+38     	; 0x70e8 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    70c2:	2b e2       	ldi	r18, 0x2B	; 43
    70c4:	30 e0       	ldi	r19, 0x00	; 0
    70c6:	4c e0       	ldi	r20, 0x0C	; 12
    70c8:	50 e0       	ldi	r21, 0x00	; 0
    70ca:	6f ed       	ldi	r22, 0xDF	; 223
    70cc:	74 e0       	ldi	r23, 0x04	; 4
    70ce:	86 e8       	ldi	r24, 0x86	; 134
    70d0:	90 e0       	ldi	r25, 0x00	; 0
    70d2:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    70d6:	2b e2       	ldi	r18, 0x2B	; 43
    70d8:	30 e0       	ldi	r19, 0x00	; 0
    70da:	40 e5       	ldi	r20, 0x50	; 80
    70dc:	50 e0       	ldi	r21, 0x00	; 0
    70de:	6f ed       	ldi	r22, 0xDF	; 223
    70e0:	74 e0       	ldi	r23, 0x04	; 4
    70e2:	86 e7       	ldi	r24, 0x76	; 118
    70e4:	90 e0       	ldi	r25, 0x00	; 0
    70e6:	41 c0       	rjmp	.+130    	; 0x716a <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << NO_SIGNAL))						// No signal
    70e8:	80 91 35 05 	lds	r24, 0x0535
    70ec:	81 ff       	sbrs	r24, 1
    70ee:	13 c0       	rjmp	.+38     	; 0x7116 <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    70f0:	2b e2       	ldi	r18, 0x2B	; 43
    70f2:	30 e0       	ldi	r19, 0x00	; 0
    70f4:	4c e1       	ldi	r20, 0x1C	; 28
    70f6:	50 e0       	ldi	r21, 0x00	; 0
    70f8:	6f ed       	ldi	r22, 0xDF	; 223
    70fa:	74 e0       	ldi	r23, 0x04	; 4
    70fc:	8b e4       	ldi	r24, 0x4B	; 75
    70fe:	90 e0       	ldi	r25, 0x00	; 0
    7100:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    7104:	2b e2       	ldi	r18, 0x2B	; 43
    7106:	30 e0       	ldi	r19, 0x00	; 0
    7108:	46 e3       	ldi	r20, 0x36	; 54
    710a:	50 e0       	ldi	r21, 0x00	; 0
    710c:	6f ed       	ldi	r22, 0xDF	; 223
    710e:	74 e0       	ldi	r23, 0x04	; 4
    7110:	8c e4       	ldi	r24, 0x4C	; 76
    7112:	90 e0       	ldi	r25, 0x00	; 0
    7114:	2a c0       	rjmp	.+84     	; 0x716a <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << THROTTLE_HIGH))					// Throttle high
    7116:	80 91 35 05 	lds	r24, 0x0535
    711a:	80 ff       	sbrs	r24, 0
    711c:	13 c0       	rjmp	.+38     	; 0x7144 <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    711e:	2b e2       	ldi	r18, 0x2B	; 43
    7120:	30 e0       	ldi	r19, 0x00	; 0
    7122:	4a e0       	ldi	r20, 0x0A	; 10
    7124:	50 e0       	ldi	r21, 0x00	; 0
    7126:	6f ed       	ldi	r22, 0xDF	; 223
    7128:	74 e0       	ldi	r23, 0x04	; 4
    712a:	89 e6       	ldi	r24, 0x69	; 105
    712c:	90 e0       	ldi	r25, 0x00	; 0
    712e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    7132:	2b e2       	ldi	r18, 0x2B	; 43
    7134:	30 e0       	ldi	r19, 0x00	; 0
    7136:	41 e5       	ldi	r20, 0x51	; 81
    7138:	50 e0       	ldi	r21, 0x00	; 0
    713a:	6f ed       	ldi	r22, 0xDF	; 223
    713c:	74 e0       	ldi	r23, 0x04	; 4
    713e:	87 e3       	ldi	r24, 0x37	; 55
    7140:	90 e0       	ldi	r25, 0x00	; 0
    7142:	13 c0       	rjmp	.+38     	; 0x716a <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << DISARMED))						// Disarmed
    7144:	80 91 35 05 	lds	r24, 0x0535
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    7148:	2b e2       	ldi	r18, 0x2B	; 43
    714a:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if (General_error & (1 << DISARMED))						// Disarmed
    714c:	82 ff       	sbrs	r24, 2
    714e:	07 c0       	rjmp	.+14     	; 0x715e <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    7150:	44 e1       	ldi	r20, 0x14	; 20
    7152:	50 e0       	ldi	r21, 0x00	; 0
    7154:	6f ed       	ldi	r22, 0xDF	; 223
    7156:	74 e0       	ldi	r23, 0x04	; 4
    7158:	8b e8       	ldi	r24, 0x8B	; 139
    715a:	90 e0       	ldi	r25, 0x00	; 0
    715c:	06 c0       	rjmp	.+12     	; 0x716a <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    715e:	4c e1       	ldi	r20, 0x1C	; 28
    7160:	50 e0       	ldi	r21, 0x00	; 0
    7162:	6f ed       	ldi	r22, 0xDF	; 223
    7164:	74 e0       	ldi	r23, 0x04	; 4
    7166:	8a e8       	ldi	r24, 0x8A	; 138
    7168:	90 e0       	ldi	r25, 0x00	; 0
    716a:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
	}

	write_buffer(buffer);
    716e:	80 e0       	ldi	r24, 0x00	; 0
    7170:	91 e0       	ldi	r25, 0x01	; 1
    7172:	0c 94 29 36 	jmp	0x6c52	; 0x6c52 <write_buffer>

00007176 <get_raw_gyros>:
// routine used by the zeroing calibration routine. Chicken | Egg.
// We also cannot merge P1 and P2 here as each have their own zeros.
//***************************************************************

void get_raw_gyros(void)
{
    7176:	0f 93       	push	r16
    7178:	1f 93       	push	r17
    717a:	cf 93       	push	r28
    717c:	df 93       	push	r29
    717e:	00 d0       	rcall	.+0      	; 0x7180 <get_raw_gyros+0xa>
    7180:	00 d0       	rcall	.+0      	; 0x7182 <get_raw_gyros+0xc>
    7182:	00 d0       	rcall	.+0      	; 0x7184 <get_raw_gyros+0xe>
    7184:	cd b7       	in	r28, 0x3d	; 61
    7186:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t Gyros[6];

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    7188:	26 e0       	ldi	r18, 0x06	; 6
    718a:	ae 01       	movw	r20, r28
    718c:	4f 5f       	subi	r20, 0xFF	; 255
    718e:	5f 4f       	sbci	r21, 0xFF	; 255
    7190:	63 e4       	ldi	r22, 0x43	; 67
    7192:	80 ed       	ldi	r24, 0xD0	; 208
    7194:	0e 94 c7 3b 	call	0x778e	; 0x778e <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	gyroADC_raw[PITCH] = (Gyros[0] << 8) + Gyros[1];
    7198:	89 81       	ldd	r24, Y+1	; 0x01
    719a:	90 e0       	ldi	r25, 0x00	; 0
    719c:	98 2f       	mov	r25, r24
    719e:	88 27       	eor	r24, r24
    71a0:	2a 81       	ldd	r18, Y+2	; 0x02
    71a2:	82 0f       	add	r24, r18
    71a4:	91 1d       	adc	r25, r1
    71a6:	90 93 e4 05 	sts	0x05E4, r25
    71aa:	80 93 e3 05 	sts	0x05E3, r24
	gyroADC_raw[ROLL] = (Gyros[2] << 8) + Gyros[3];
    71ae:	8b 81       	ldd	r24, Y+3	; 0x03
    71b0:	90 e0       	ldi	r25, 0x00	; 0
    71b2:	98 2f       	mov	r25, r24
    71b4:	88 27       	eor	r24, r24
    71b6:	2c 81       	ldd	r18, Y+4	; 0x04
    71b8:	82 0f       	add	r24, r18
    71ba:	91 1d       	adc	r25, r1
    71bc:	90 93 e2 05 	sts	0x05E2, r25
    71c0:	80 93 e1 05 	sts	0x05E1, r24
	gyroADC_raw[YAW] = (Gyros[4] << 8) + Gyros[5];
    71c4:	8d 81       	ldd	r24, Y+5	; 0x05
    71c6:	90 e0       	ldi	r25, 0x00	; 0
    71c8:	98 2f       	mov	r25, r24
    71ca:	88 27       	eor	r24, r24
    71cc:	2e 81       	ldd	r18, Y+6	; 0x06
    71ce:	82 0f       	add	r24, r18
    71d0:	91 1d       	adc	r25, r1
    71d2:	90 93 e6 05 	sts	0x05E6, r25
    71d6:	80 93 e5 05 	sts	0x05E5, r24

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		gyroADC_P1[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P1][i])] >> GYRODIV;
    71da:	40 91 63 08 	lds	r20, 0x0863
		gyroADC_P2[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P2][i])] >> GYRODIV;
    71de:	20 91 d8 06 	lds	r18, 0x06D8
    71e2:	67 ee       	ldi	r22, 0xE7	; 231
    71e4:	75 e0       	ldi	r23, 0x05	; 5
    71e6:	a3 ef       	ldi	r26, 0xF3	; 243
    71e8:	b5 e0       	ldi	r27, 0x05	; 5
    71ea:	83 e0       	ldi	r24, 0x03	; 3
    71ec:	48 02       	muls	r20, r24
    71ee:	a0 01       	movw	r20, r0
    71f0:	11 24       	eor	r1, r1
    71f2:	e3 e0       	ldi	r30, 0x03	; 3
    71f4:	2e 02       	muls	r18, r30
    71f6:	90 01       	movw	r18, r0
    71f8:	11 24       	eor	r1, r1
    71fa:	80 e0       	ldi	r24, 0x00	; 0
    71fc:	90 e0       	ldi	r25, 0x00	; 0
    71fe:	fc 01       	movw	r30, r24
    7200:	e4 0f       	add	r30, r20
    7202:	f5 1f       	adc	r31, r21
    7204:	e5 5a       	subi	r30, 0xA5	; 165
    7206:	fb 4d       	sbci	r31, 0xDB	; 219

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		gyroADC_P1[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P1][i])] >> GYRODIV;
    7208:	e4 91       	lpm	r30, Z
    720a:	ee 0f       	add	r30, r30
    720c:	ff 0b       	sbc	r31, r31
    720e:	ef 51       	subi	r30, 0x1F	; 31
    7210:	fa 4f       	sbci	r31, 0xFA	; 250
    7212:	01 90       	ld	r0, Z+
    7214:	f0 81       	ld	r31, Z
    7216:	e0 2d       	mov	r30, r0
    7218:	8f 01       	movw	r16, r30
    721a:	e4 e0       	ldi	r30, 0x04	; 4
    721c:	15 95       	asr	r17
    721e:	07 95       	ror	r16
    7220:	ea 95       	dec	r30
    7222:	e1 f7       	brne	.-8      	; 0x721c <get_raw_gyros+0xa6>
    7224:	fb 01       	movw	r30, r22
    7226:	01 93       	st	Z+, r16
    7228:	11 93       	st	Z+, r17
    722a:	bf 01       	movw	r22, r30
    722c:	fc 01       	movw	r30, r24
    722e:	e2 0f       	add	r30, r18
    7230:	f3 1f       	adc	r31, r19
    7232:	e5 5a       	subi	r30, 0xA5	; 165
    7234:	fb 4d       	sbci	r31, 0xDB	; 219
		gyroADC_P2[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P2][i])] >> GYRODIV;
    7236:	e4 91       	lpm	r30, Z
    7238:	ee 0f       	add	r30, r30
    723a:	ff 0b       	sbc	r31, r31
    723c:	ef 51       	subi	r30, 0x1F	; 31
    723e:	fa 4f       	sbci	r31, 0xFA	; 250
    7240:	01 90       	ld	r0, Z+
    7242:	f0 81       	ld	r31, Z
    7244:	e0 2d       	mov	r30, r0
    7246:	14 e0       	ldi	r17, 0x04	; 4
    7248:	f5 95       	asr	r31
    724a:	e7 95       	ror	r30
    724c:	1a 95       	dec	r17
    724e:	e1 f7       	brne	.-8      	; 0x7248 <get_raw_gyros+0xd2>
    7250:	ed 93       	st	X+, r30
    7252:	fd 93       	st	X+, r31
    7254:	01 96       	adiw	r24, 0x01	; 1
	gyroADC_raw[PITCH] = (Gyros[0] << 8) + Gyros[1];
	gyroADC_raw[ROLL] = (Gyros[2] << 8) + Gyros[3];
	gyroADC_raw[YAW] = (Gyros[4] << 8) + Gyros[5];

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
    7256:	83 30       	cpi	r24, 0x03	; 3
    7258:	91 05       	cpc	r25, r1
    725a:	89 f6       	brne	.-94     	; 0x71fe <get_raw_gyros+0x88>
	{
		// Rearrange the sensors for both orientations
		gyroADC_P1[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P1][i])] >> GYRODIV;
		gyroADC_P2[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P2][i])] >> GYRODIV;
	}
}
    725c:	26 96       	adiw	r28, 0x06	; 6
    725e:	0f b6       	in	r0, 0x3f	; 63
    7260:	f8 94       	cli
    7262:	de bf       	out	0x3e, r29	; 62
    7264:	0f be       	out	0x3f, r0	; 63
    7266:	cd bf       	out	0x3d, r28	; 61
    7268:	df 91       	pop	r29
    726a:	cf 91       	pop	r28
    726c:	1f 91       	pop	r17
    726e:	0f 91       	pop	r16
    7270:	08 95       	ret

00007272 <ReadGyros>:
// Only when EARTH-oriented TS is gyroADC_P1 unique.
//
//***************************************************************

void ReadGyros(void)					// Conventional orientation
{
    7272:	2f 92       	push	r2
    7274:	3f 92       	push	r3
    7276:	4f 92       	push	r4
    7278:	5f 92       	push	r5
    727a:	6f 92       	push	r6
    727c:	7f 92       	push	r7
    727e:	8f 92       	push	r8
    7280:	9f 92       	push	r9
    7282:	af 92       	push	r10
    7284:	bf 92       	push	r11
    7286:	cf 92       	push	r12
    7288:	df 92       	push	r13
    728a:	ef 92       	push	r14
    728c:	ff 92       	push	r15
    728e:	0f 93       	push	r16
    7290:	1f 93       	push	r17
    7292:	cf 93       	push	r28
    7294:	df 93       	push	r29
	uint8_t i;
	int16_t temp1, temp2, temp3;

	get_raw_gyros();					// Updates gyroADC_P1[] and gyroADC_P2[]
    7296:	0e 94 bb 38 	call	0x7176	; 0x7176 <get_raw_gyros>
    729a:	6b ed       	ldi	r22, 0xDB	; 219
    729c:	e6 2e       	mov	r14, r22
    729e:	65 e0       	ldi	r22, 0x05	; 5
    72a0:	f6 2e       	mov	r15, r22
    72a2:	73 ef       	ldi	r23, 0xF3	; 243
    72a4:	a7 2e       	mov	r10, r23
    72a6:	75 e0       	ldi	r23, 0x05	; 5
    72a8:	b7 2e       	mov	r11, r23
    72aa:	0d e5       	ldi	r16, 0x5D	; 93
    72ac:	18 e0       	ldi	r17, 0x08	; 8
    72ae:	ed ee       	ldi	r30, 0xED	; 237
    72b0:	ce 2e       	mov	r12, r30
    72b2:	e5 e0       	ldi	r30, 0x05	; 5
    72b4:	de 2e       	mov	r13, r30
    72b6:	f7 ee       	ldi	r31, 0xE7	; 231
    72b8:	6f 2e       	mov	r6, r31
    72ba:	f5 e0       	ldi	r31, 0x05	; 5
    72bc:	7f 2e       	mov	r7, r31
    72be:	c0 e0       	ldi	r28, 0x00	; 0
    72c0:	d0 e0       	ldi	r29, 0x00	; 0

			// P2 orientation
			temp2 = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);

			// Merge the two gyros per transition percentage
			temp3 = scale32(temp1, (100 - transition)) + scale32(temp2, transition); // Sum the two values
    72c2:	a4 e6       	ldi	r26, 0x64	; 100
    72c4:	2a 2e       	mov	r2, r26
    72c6:	31 2c       	mov	r3, r1
	get_raw_gyros();					// Updates gyroADC_P1[] and gyroADC_P2[]

	for (i = 0; i < NUMBEROFAXIS; i++)	
	{
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    72c8:	80 91 d9 06 	lds	r24, 0x06D9
    72cc:	90 91 d8 06 	lds	r25, 0x06D8
    72d0:	88 23       	and	r24, r24
    72d2:	09 f4       	brne	.+2      	; 0x72d6 <ReadGyros+0x64>
    72d4:	55 c0       	rjmp	.+170    	; 0x7380 <ReadGyros+0x10e>
		{
			// P1 alternate (original) orientation. Swap zeros so that they match.
			temp1 = (gyroADC_P1[i] - Config.gyroZero_P1[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P1][i]);
    72d6:	e0 91 63 08 	lds	r30, 0x0863
    72da:	0e 2e       	mov	r0, r30
    72dc:	00 0c       	add	r0, r0
    72de:	ff 0b       	sbc	r31, r31
    72e0:	af 01       	movw	r20, r30
    72e2:	44 0f       	add	r20, r20
    72e4:	55 1f       	adc	r21, r21
    72e6:	e4 0f       	add	r30, r20
    72e8:	f5 1f       	adc	r31, r21
    72ea:	ec 0f       	add	r30, r28
    72ec:	fd 1f       	adc	r31, r29
    72ee:	ed 5e       	subi	r30, 0xED	; 237
    72f0:	fb 4d       	sbci	r31, 0xDB	; 219
    72f2:	44 91       	lpm	r20, Z

			// P2 orientation
			temp2 = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);
    72f4:	e9 2f       	mov	r30, r25
    72f6:	99 0f       	add	r25, r25
    72f8:	ff 0b       	sbc	r31, r31
    72fa:	cf 01       	movw	r24, r30
    72fc:	88 0f       	add	r24, r24
    72fe:	99 1f       	adc	r25, r25
    7300:	e8 0f       	add	r30, r24
    7302:	f9 1f       	adc	r31, r25
    7304:	ec 0f       	add	r30, r28
    7306:	fd 1f       	adc	r31, r29
    7308:	ed 5e       	subi	r30, 0xED	; 237
    730a:	fb 4d       	sbci	r31, 0xDB	; 219
    730c:	24 91       	lpm	r18, Z
    730e:	f5 01       	movw	r30, r10
    7310:	60 81       	ld	r22, Z
    7312:	71 81       	ldd	r23, Z+1	; 0x01
    7314:	f8 01       	movw	r30, r16
    7316:	80 81       	ld	r24, Z
    7318:	91 81       	ldd	r25, Z+1	; 0x01
    731a:	68 1b       	sub	r22, r24
    731c:	79 0b       	sbc	r23, r25
    731e:	26 03       	mulsu	r18, r22
    7320:	20 01       	movw	r4, r0
    7322:	27 9f       	mul	r18, r23
    7324:	50 0c       	add	r5, r0
    7326:	11 24       	eor	r1, r1

			// Merge the two gyros per transition percentage
			temp3 = scale32(temp1, (100 - transition)) + scale32(temp2, transition); // Sum the two values
    7328:	80 91 38 05 	lds	r24, 0x0538
    732c:	90 91 39 05 	lds	r25, 0x0539
    7330:	b1 01       	movw	r22, r2
    7332:	68 1b       	sub	r22, r24
    7334:	79 0b       	sbc	r23, r25
	{
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
		{
			// P1 alternate (original) orientation. Swap zeros so that they match.
			temp1 = (gyroADC_P1[i] - Config.gyroZero_P1[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P1][i]);
    7336:	f3 01       	movw	r30, r6
    7338:	20 81       	ld	r18, Z
    733a:	31 81       	ldd	r19, Z+1	; 0x01
    733c:	f8 01       	movw	r30, r16
    733e:	f5 97       	sbiw	r30, 0x35	; 53
    7340:	80 81       	ld	r24, Z
    7342:	91 81       	ldd	r25, Z+1	; 0x01
    7344:	28 1b       	sub	r18, r24
    7346:	39 0b       	sbc	r19, r25

			// P2 orientation
			temp2 = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);

			// Merge the two gyros per transition percentage
			temp3 = scale32(temp1, (100 - transition)) + scale32(temp2, transition); // Sum the two values
    7348:	42 03       	mulsu	r20, r18
    734a:	c0 01       	movw	r24, r0
    734c:	43 9f       	mul	r20, r19
    734e:	90 0d       	add	r25, r0
    7350:	11 24       	eor	r1, r1
    7352:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    7356:	4c 01       	movw	r8, r24
    7358:	60 91 38 05 	lds	r22, 0x0538
    735c:	70 91 39 05 	lds	r23, 0x0539
    7360:	c2 01       	movw	r24, r4
    7362:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    7366:	88 0d       	add	r24, r8
    7368:	99 1d       	adc	r25, r9

			// Gyro alt is always per orientation
			gyroADCalt[i] = temp3;
    736a:	f6 01       	movw	r30, r12
    736c:	91 83       	std	Z+1, r25	; 0x01
    736e:	80 83       	st	Z, r24

			// If the P1 reference is MODEL, always use the same gyros as P2
			if (Config.P1_Reference == MODEL)
    7370:	20 91 d9 06 	lds	r18, 0x06D9
			{
				// Use P2 orientation
				gyroADC[i] = temp2;	
    7374:	f7 01       	movw	r30, r14

			// Gyro alt is always per orientation
			gyroADCalt[i] = temp3;

			// If the P1 reference is MODEL, always use the same gyros as P2
			if (Config.P1_Reference == MODEL)
    7376:	22 30       	cpi	r18, 0x02	; 2
    7378:	09 f5       	brne	.+66     	; 0x73bc <ReadGyros+0x14a>
			{
				// Use P2 orientation
				gyroADC[i] = temp2;	
    737a:	51 82       	std	Z+1, r5	; 0x01
    737c:	40 82       	st	Z, r4
    737e:	20 c0       	rjmp	.+64     	; 0x73c0 <ReadGyros+0x14e>
		}
		// Single-orientation models
		else
		{
			// Change polarity using P2 orientation by default
			gyroADC[i] = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);	
    7380:	e9 2f       	mov	r30, r25
    7382:	99 0f       	add	r25, r25
    7384:	ff 0b       	sbc	r31, r31
    7386:	cf 01       	movw	r24, r30
    7388:	88 0f       	add	r24, r24
    738a:	99 1f       	adc	r25, r25
    738c:	e8 0f       	add	r30, r24
    738e:	f9 1f       	adc	r31, r25
    7390:	ec 0f       	add	r30, r28
    7392:	fd 1f       	adc	r31, r29
    7394:	ed 5e       	subi	r30, 0xED	; 237
    7396:	fb 4d       	sbci	r31, 0xDB	; 219
    7398:	24 91       	lpm	r18, Z
    739a:	f5 01       	movw	r30, r10
    739c:	40 81       	ld	r20, Z
    739e:	51 81       	ldd	r21, Z+1	; 0x01
    73a0:	f8 01       	movw	r30, r16
    73a2:	80 81       	ld	r24, Z
    73a4:	91 81       	ldd	r25, Z+1	; 0x01
    73a6:	48 1b       	sub	r20, r24
    73a8:	59 0b       	sbc	r21, r25
    73aa:	24 03       	mulsu	r18, r20
    73ac:	c0 01       	movw	r24, r0
    73ae:	25 9f       	mul	r18, r21
    73b0:	90 0d       	add	r25, r0
    73b2:	11 24       	eor	r1, r1
    73b4:	f7 01       	movw	r30, r14
    73b6:	91 83       	std	Z+1, r25	; 0x01
    73b8:	80 83       	st	Z, r24
				
			// Copy to alternate set of gyro values
			gyroADCalt[i] = gyroADC[i];
    73ba:	f6 01       	movw	r30, r12
    73bc:	91 83       	std	Z+1, r25	; 0x01
    73be:	80 83       	st	Z, r24
    73c0:	21 96       	adiw	r28, 0x01	; 1
    73c2:	f2 e0       	ldi	r31, 0x02	; 2
    73c4:	ef 0e       	add	r14, r31
    73c6:	f1 1c       	adc	r15, r1
    73c8:	82 e0       	ldi	r24, 0x02	; 2
    73ca:	a8 0e       	add	r10, r24
    73cc:	b1 1c       	adc	r11, r1
    73ce:	0e 5f       	subi	r16, 0xFE	; 254
    73d0:	1f 4f       	sbci	r17, 0xFF	; 255
    73d2:	e2 e0       	ldi	r30, 0x02	; 2
    73d4:	ce 0e       	add	r12, r30
    73d6:	d1 1c       	adc	r13, r1
    73d8:	f2 e0       	ldi	r31, 0x02	; 2
    73da:	6f 0e       	add	r6, r31
    73dc:	71 1c       	adc	r7, r1
	uint8_t i;
	int16_t temp1, temp2, temp3;

	get_raw_gyros();					// Updates gyroADC_P1[] and gyroADC_P2[]

	for (i = 0; i < NUMBEROFAXIS; i++)	
    73de:	c3 30       	cpi	r28, 0x03	; 3
    73e0:	d1 05       	cpc	r29, r1
    73e2:	09 f0       	breq	.+2      	; 0x73e6 <ReadGyros+0x174>
    73e4:	71 cf       	rjmp	.-286    	; 0x72c8 <ReadGyros+0x56>
				
			// Copy to alternate set of gyro values
			gyroADCalt[i] = gyroADC[i];
		}
	}
}
    73e6:	df 91       	pop	r29
    73e8:	cf 91       	pop	r28
    73ea:	1f 91       	pop	r17
    73ec:	0f 91       	pop	r16
    73ee:	ff 90       	pop	r15
    73f0:	ef 90       	pop	r14
    73f2:	df 90       	pop	r13
    73f4:	cf 90       	pop	r12
    73f6:	bf 90       	pop	r11
    73f8:	af 90       	pop	r10
    73fa:	9f 90       	pop	r9
    73fc:	8f 90       	pop	r8
    73fe:	7f 90       	pop	r7
    7400:	6f 90       	pop	r6
    7402:	5f 90       	pop	r5
    7404:	4f 90       	pop	r4
    7406:	3f 90       	pop	r3
    7408:	2f 90       	pop	r2
    740a:	08 95       	ret

0000740c <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    740c:	cf 93       	push	r28
	
	// Work out which orientation we are calibrating.
	// Only need to do this if the orientations differ.
	// Just do P2 if orientations the same.
	// Will not save new calibration when different and not firmly in P1 or p2.
	if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    740e:	80 91 38 05 	lds	r24, 0x0538
    7412:	90 91 39 05 	lds	r25, 0x0539
    7416:	80 36       	cpi	r24, 0x60	; 96
    7418:	91 05       	cpc	r25, r1
    741a:	24 f4       	brge	.+8      	; 0x7424 <CalibrateGyrosFast+0x18>
    741c:	20 91 d9 06 	lds	r18, 0x06D9
    7420:	21 11       	cpse	r18, r1
    7422:	54 c0       	rjmp	.+168    	; 0x74cc <CalibrateGyrosFast+0xc0>
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P2[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    7424:	86 e0       	ldi	r24, 0x06	; 6
    7426:	ed e5       	ldi	r30, 0x5D	; 93
    7428:	f8 e0       	ldi	r31, 0x08	; 8
    742a:	df 01       	movw	r26, r30
    742c:	1d 92       	st	X+, r1
    742e:	8a 95       	dec	r24
    7430:	e9 f7       	brne	.-6      	; 0x742c <CalibrateGyrosFast+0x20>
    7432:	c0 e2       	ldi	r28, 0x20	; 32

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
		{
			get_raw_gyros();				// Updates gyroADC_P1/P2[] with the correct orientation-based RPY
    7434:	0e 94 bb 38 	call	0x7176	; 0x7176 <get_raw_gyros>

			Config.gyroZero_P2[ROLL] 	+= gyroADC_P2[ROLL];
    7438:	40 91 5d 08 	lds	r20, 0x085D
    743c:	50 91 5e 08 	lds	r21, 0x085E
    7440:	80 91 f3 05 	lds	r24, 0x05F3
    7444:	90 91 f4 05 	lds	r25, 0x05F4
    7448:	48 0f       	add	r20, r24
    744a:	59 1f       	adc	r21, r25
    744c:	50 93 5e 08 	sts	0x085E, r21
    7450:	40 93 5d 08 	sts	0x085D, r20
			Config.gyroZero_P2[PITCH] 	+= gyroADC_P2[PITCH];
    7454:	20 91 5f 08 	lds	r18, 0x085F
    7458:	30 91 60 08 	lds	r19, 0x0860
    745c:	80 91 f5 05 	lds	r24, 0x05F5
    7460:	90 91 f6 05 	lds	r25, 0x05F6
    7464:	28 0f       	add	r18, r24
    7466:	39 1f       	adc	r19, r25
    7468:	30 93 60 08 	sts	0x0860, r19
    746c:	20 93 5f 08 	sts	0x085F, r18
			Config.gyroZero_P2[YAW] 	+= gyroADC_P2[YAW];
    7470:	60 91 61 08 	lds	r22, 0x0861
    7474:	70 91 62 08 	lds	r23, 0x0862
    7478:	80 91 f7 05 	lds	r24, 0x05F7
    747c:	90 91 f8 05 	lds	r25, 0x05F8
    7480:	86 0f       	add	r24, r22
    7482:	97 1f       	adc	r25, r23
    7484:	90 93 62 08 	sts	0x0862, r25
    7488:	80 93 61 08 	sts	0x0861, r24
    748c:	c1 50       	subi	r28, 0x01	; 1
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P2[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
    748e:	91 f6       	brne	.-92     	; 0x7434 <CalibrateGyrosFast+0x28>
		}

		// Average readings for all axis
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			Config.gyroZero_P2[i] 	= (Config.gyroZero_P2[i] >> 5);
    7490:	f5 e0       	ldi	r31, 0x05	; 5
    7492:	55 95       	asr	r21
    7494:	47 95       	ror	r20
    7496:	fa 95       	dec	r31
    7498:	e1 f7       	brne	.-8      	; 0x7492 <CalibrateGyrosFast+0x86>
    749a:	50 93 5e 08 	sts	0x085E, r21
    749e:	40 93 5d 08 	sts	0x085D, r20
    74a2:	a5 e0       	ldi	r26, 0x05	; 5
    74a4:	35 95       	asr	r19
    74a6:	27 95       	ror	r18
    74a8:	aa 95       	dec	r26
    74aa:	e1 f7       	brne	.-8      	; 0x74a4 <CalibrateGyrosFast+0x98>
    74ac:	30 93 60 08 	sts	0x0860, r19
    74b0:	20 93 5f 08 	sts	0x085F, r18
    74b4:	b5 e0       	ldi	r27, 0x05	; 5
    74b6:	95 95       	asr	r25
    74b8:	87 95       	ror	r24
    74ba:	ba 95       	dec	r27
    74bc:	e1 f7       	brne	.-8      	; 0x74b6 <CalibrateGyrosFast+0xaa>
    74be:	90 93 62 08 	sts	0x0862, r25
    74c2:	80 93 61 08 	sts	0x0861, r24
			Config.gyroZero_P1[i] 	= (Config.gyroZero_P1[i] >> 5);	// Divide by 32
		}
	}
	
	Save_Config_to_EEPROM();
}
    74c6:	cf 91       	pop	r28
		{
			Config.gyroZero_P1[i] 	= (Config.gyroZero_P1[i] >> 5);	// Divide by 32
		}
	}
	
	Save_Config_to_EEPROM();
    74c8:	0c 94 5a 26 	jmp	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
		{
			Config.gyroZero_P2[i] 	= (Config.gyroZero_P2[i] >> 5);
		}
	}
	// P1
	else if (transition <= 5)
    74cc:	06 97       	sbiw	r24, 0x06	; 6
    74ce:	dc f7       	brge	.-10     	; 0x74c6 <CalibrateGyrosFast+0xba>
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P1[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    74d0:	86 e0       	ldi	r24, 0x06	; 6
    74d2:	e8 e2       	ldi	r30, 0x28	; 40
    74d4:	f8 e0       	ldi	r31, 0x08	; 8
    74d6:	df 01       	movw	r26, r30
    74d8:	1d 92       	st	X+, r1
    74da:	8a 95       	dec	r24
    74dc:	e9 f7       	brne	.-6      	; 0x74d8 <CalibrateGyrosFast+0xcc>
    74de:	c0 e2       	ldi	r28, 0x20	; 32

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
		{
			get_raw_gyros();				// Updates gyroADC_P1/P2[] with the correct orientation-based RPY
    74e0:	0e 94 bb 38 	call	0x7176	; 0x7176 <get_raw_gyros>

			Config.gyroZero_P1[ROLL] 	+= gyroADC_P1[ROLL];
    74e4:	40 91 28 08 	lds	r20, 0x0828
    74e8:	50 91 29 08 	lds	r21, 0x0829
    74ec:	80 91 e7 05 	lds	r24, 0x05E7
    74f0:	90 91 e8 05 	lds	r25, 0x05E8
    74f4:	48 0f       	add	r20, r24
    74f6:	59 1f       	adc	r21, r25
    74f8:	50 93 29 08 	sts	0x0829, r21
    74fc:	40 93 28 08 	sts	0x0828, r20
			Config.gyroZero_P1[PITCH] 	+= gyroADC_P1[PITCH];
    7500:	20 91 2a 08 	lds	r18, 0x082A
    7504:	30 91 2b 08 	lds	r19, 0x082B
    7508:	80 91 e9 05 	lds	r24, 0x05E9
    750c:	90 91 ea 05 	lds	r25, 0x05EA
    7510:	28 0f       	add	r18, r24
    7512:	39 1f       	adc	r19, r25
    7514:	30 93 2b 08 	sts	0x082B, r19
    7518:	20 93 2a 08 	sts	0x082A, r18
			Config.gyroZero_P1[YAW] 	+= gyroADC_P1[YAW];
    751c:	60 91 2c 08 	lds	r22, 0x082C
    7520:	70 91 2d 08 	lds	r23, 0x082D
    7524:	80 91 eb 05 	lds	r24, 0x05EB
    7528:	90 91 ec 05 	lds	r25, 0x05EC
    752c:	86 0f       	add	r24, r22
    752e:	97 1f       	adc	r25, r23
    7530:	90 93 2d 08 	sts	0x082D, r25
    7534:	80 93 2c 08 	sts	0x082C, r24
    7538:	c1 50       	subi	r28, 0x01	; 1
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P1[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
    753a:	91 f6       	brne	.-92     	; 0x74e0 <CalibrateGyrosFast+0xd4>
		}

		// Average readings for all axis
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			Config.gyroZero_P1[i] 	= (Config.gyroZero_P1[i] >> 5);	// Divide by 32
    753c:	65 e0       	ldi	r22, 0x05	; 5
    753e:	55 95       	asr	r21
    7540:	47 95       	ror	r20
    7542:	6a 95       	dec	r22
    7544:	e1 f7       	brne	.-8      	; 0x753e <CalibrateGyrosFast+0x132>
    7546:	50 93 29 08 	sts	0x0829, r21
    754a:	40 93 28 08 	sts	0x0828, r20
    754e:	75 e0       	ldi	r23, 0x05	; 5
    7550:	35 95       	asr	r19
    7552:	27 95       	ror	r18
    7554:	7a 95       	dec	r23
    7556:	e1 f7       	brne	.-8      	; 0x7550 <CalibrateGyrosFast+0x144>
    7558:	30 93 2b 08 	sts	0x082B, r19
    755c:	20 93 2a 08 	sts	0x082A, r18
    7560:	e5 e0       	ldi	r30, 0x05	; 5
    7562:	95 95       	asr	r25
    7564:	87 95       	ror	r24
    7566:	ea 95       	dec	r30
    7568:	e1 f7       	brne	.-8      	; 0x7562 <CalibrateGyrosFast+0x156>
    756a:	90 93 2d 08 	sts	0x082D, r25
    756e:	80 93 2c 08 	sts	0x082C, r24
    7572:	a9 cf       	rjmp	.-174    	; 0x74c6 <CalibrateGyrosFast+0xba>

00007574 <CalibrateGyrosSlow>:
	
	Save_Config_to_EEPROM();
}

bool CalibrateGyrosSlow(void)
{
    7574:	2f 92       	push	r2
    7576:	3f 92       	push	r3
    7578:	4f 92       	push	r4
    757a:	5f 92       	push	r5
    757c:	6f 92       	push	r6
    757e:	7f 92       	push	r7
    7580:	8f 92       	push	r8
    7582:	9f 92       	push	r9
    7584:	af 92       	push	r10
    7586:	bf 92       	push	r11
    7588:	cf 92       	push	r12
    758a:	df 92       	push	r13
    758c:	ef 92       	push	r14
    758e:	ff 92       	push	r15
    7590:	0f 93       	push	r16
    7592:	1f 93       	push	r17
    7594:	cf 93       	push	r28
    7596:	df 93       	push	r29
    7598:	cd b7       	in	r28, 0x3d	; 61
    759a:	de b7       	in	r29, 0x3e	; 62
    759c:	66 97       	sbiw	r28, 0x16	; 22
    759e:	0f b6       	in	r0, 0x3f	; 63
    75a0:	f8 94       	cli
    75a2:	de bf       	out	0x3e, r29	; 62
    75a4:	0f be       	out	0x3f, r0	; 63
    75a6:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    75a8:	1e 86       	std	Y+14, r1	; 0x0e
    75aa:	1d 86       	std	Y+13, r1	; 0x0d
    75ac:	18 8a       	std	Y+16, r1	; 0x10
    75ae:	1f 86       	std	Y+15, r1	; 0x0f
    75b0:	1a 8a       	std	Y+18, r1	; 0x12
    75b2:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate setting much more quickly
	CalibrateGyrosFast();	
    75b4:	0e 94 06 3a 	call	0x740c	; 0x740c <CalibrateGyrosFast>
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		// Work out which orientation we are calibrating
		// Only need to do this if the orientations differ
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    75b8:	c0 90 38 05 	lds	r12, 0x0538
    75bc:	d0 90 39 05 	lds	r13, 0x0539
    75c0:	b0 90 d9 06 	lds	r11, 0x06D9
    75c4:	ce 01       	movw	r24, r28
    75c6:	01 96       	adiw	r24, 0x01	; 1
    75c8:	7c 01       	movw	r14, r24
    75ca:	00 e0       	ldi	r16, 0x00	; 0
    75cc:	10 e0       	ldi	r17, 0x00	; 0
    75ce:	f8 01       	movw	r30, r16
    75d0:	90 e6       	ldi	r25, 0x60	; 96
    75d2:	c9 16       	cp	r12, r25
    75d4:	d1 04       	cpc	r13, r1
    75d6:	14 f4       	brge	.+4      	; 0x75dc <CalibrateGyrosSlow+0x68>
    75d8:	b1 10       	cpse	r11, r1
    75da:	03 c0       	rjmp	.+6      	; 0x75e2 <CalibrateGyrosSlow+0x6e>
    75dc:	e3 5a       	subi	r30, 0xA3	; 163
    75de:	f7 4f       	sbci	r31, 0xF7	; 247
    75e0:	02 c0       	rjmp	.+4      	; 0x75e6 <CalibrateGyrosSlow+0x72>
    75e2:	e8 5d       	subi	r30, 0xD8	; 216
    75e4:	f7 4f       	sbci	r31, 0xF7	; 247
		{
			GyroSmooth[axis] = Config.gyroZero_P2[axis];
		}
		else
		{
			GyroSmooth[axis] = Config.gyroZero_P1[axis];	
    75e6:	60 81       	ld	r22, Z
    75e8:	71 81       	ldd	r23, Z+1	; 0x01
    75ea:	07 2e       	mov	r0, r23
    75ec:	00 0c       	add	r0, r0
    75ee:	88 0b       	sbc	r24, r24
    75f0:	99 0b       	sbc	r25, r25
    75f2:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    75f6:	f7 01       	movw	r30, r14
    75f8:	60 83       	st	Z, r22
    75fa:	71 83       	std	Z+1, r23	; 0x01
    75fc:	82 83       	std	Z+2, r24	; 0x02
    75fe:	93 83       	std	Z+3, r25	; 0x03
    7600:	0e 5f       	subi	r16, 0xFE	; 254
    7602:	1f 4f       	sbci	r17, 0xFF	; 255
    7604:	f4 e0       	ldi	r31, 0x04	; 4
    7606:	ef 0e       	add	r14, r31
    7608:	f1 1c       	adc	r15, r1
	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate setting much more quickly
	CalibrateGyrosFast();	
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    760a:	06 30       	cpi	r16, 0x06	; 6
    760c:	11 05       	cpc	r17, r1
    760e:	f9 f6       	brne	.-66     	; 0x75ce <CalibrateGyrosSlow+0x5a>
    7610:	1c 8a       	std	Y+20, r1	; 0x14
    7612:	1b 8a       	std	Y+19, r1	; 0x13
    7614:	00 e0       	ldi	r16, 0x00	; 0
    7616:	10 e0       	ldi	r17, 0x00	; 0
    7618:	e1 2c       	mov	r14, r1
    761a:	f1 2c       	mov	r15, r1
    761c:	4e 01       	movw	r8, r28
    761e:	8d e0       	ldi	r24, 0x0D	; 13
    7620:	88 0e       	add	r8, r24
    7622:	91 1c       	adc	r9, r1
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    7624:	80 91 b2 00 	lds	r24, 0x00B2
    7628:	9c 89       	ldd	r25, Y+20	; 0x14
    762a:	89 1b       	sub	r24, r25
    762c:	e8 0e       	add	r14, r24
    762e:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    7630:	e0 91 b2 00 	lds	r30, 0x00B2
    7634:	ec 8b       	std	Y+20, r30	; 0x14

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    7636:	fc e4       	ldi	r31, 0x4C	; 76
    7638:	ef 16       	cp	r14, r31
    763a:	ff 06       	cpc	r15, r31
    763c:	28 f0       	brcs	.+10     	; 0x7648 <CalibrateGyrosSlow+0xd4>
		{
			Gyro_seconds++;
    763e:	8b 89       	ldd	r24, Y+19	; 0x13
    7640:	8f 5f       	subi	r24, 0xFF	; 255
    7642:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    7644:	e1 2c       	mov	r14, r1
    7646:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    7648:	0e 94 bb 38 	call	0x7176	; 0x7176 <get_raw_gyros>
    764c:	eb ed       	ldi	r30, 0xDB	; 219
    764e:	f5 e0       	ldi	r31, 0x05	; 5
    7650:	fe 8b       	std	Y+22, r31	; 0x16
    7652:	ed 8b       	std	Y+21, r30	; 0x15
    7654:	14 01       	movw	r2, r8
    7656:	ce 01       	movw	r24, r28
    7658:	01 96       	adiw	r24, 0x01	; 1
    765a:	6c 01       	movw	r12, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    765c:	ed 89       	ldd	r30, Y+21	; 0x15
    765e:	fe 89       	ldd	r31, Y+22	; 0x16
    7660:	a1 90       	ld	r10, Z+
    7662:	b1 90       	ld	r11, Z+
    7664:	fe 8b       	std	Y+22, r31	; 0x16
    7666:	ed 8b       	std	Y+21, r30	; 0x15
    7668:	20 e0       	ldi	r18, 0x00	; 0
    766a:	30 ec       	ldi	r19, 0xC0	; 192
    766c:	49 e7       	ldi	r20, 0x79	; 121
    766e:	54 e4       	ldi	r21, 0x44	; 68
    7670:	f6 01       	movw	r30, r12
    7672:	60 81       	ld	r22, Z
    7674:	71 81       	ldd	r23, Z+1	; 0x01
    7676:	82 81       	ldd	r24, Z+2	; 0x02
    7678:	93 81       	ldd	r25, Z+3	; 0x03
    767a:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    767e:	2b 01       	movw	r4, r22
    7680:	3c 01       	movw	r6, r24
    7682:	b5 01       	movw	r22, r10
    7684:	bb 0c       	add	r11, r11
    7686:	88 0b       	sbc	r24, r24
    7688:	99 0b       	sbc	r25, r25
    768a:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    768e:	9b 01       	movw	r18, r22
    7690:	ac 01       	movw	r20, r24
    7692:	c3 01       	movw	r24, r6
    7694:	b2 01       	movw	r22, r4
    7696:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    769a:	20 e0       	ldi	r18, 0x00	; 0
    769c:	30 e0       	ldi	r19, 0x00	; 0
    769e:	4a e7       	ldi	r20, 0x7A	; 122
    76a0:	54 e4       	ldi	r21, 0x44	; 68
    76a2:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    76a6:	f6 01       	movw	r30, r12
    76a8:	61 93       	st	Z+, r22
    76aa:	71 93       	st	Z+, r23
    76ac:	81 93       	st	Z+, r24
    76ae:	91 93       	st	Z+, r25
    76b0:	6f 01       	movw	r12, r30
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    76b2:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    76b6:	f1 01       	movw	r30, r2
    76b8:	20 81       	ld	r18, Z
    76ba:	31 81       	ldd	r19, Z+1	; 0x01
    76bc:	26 17       	cp	r18, r22
    76be:	37 07       	cpc	r19, r23
    76c0:	11 f0       	breq	.+4      	; 0x76c6 <CalibrateGyrosSlow+0x152>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    76c2:	00 e0       	ldi	r16, 0x00	; 0
    76c4:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    76c6:	f1 01       	movw	r30, r2
    76c8:	61 93       	st	Z+, r22
    76ca:	71 93       	st	Z+, r23
    76cc:	1f 01       	movw	r2, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    76ce:	c8 14       	cp	r12, r8
    76d0:	d9 04       	cpc	r13, r9
    76d2:	21 f6       	brne	.-120    	; 0x765c <CalibrateGyrosSlow+0xe8>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    76d4:	0f 5f       	subi	r16, 0xFF	; 255
    76d6:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    76d8:	09 3c       	cpi	r16, 0xC9	; 201
    76da:	11 05       	cpc	r17, r1
    76dc:	20 f0       	brcs	.+8      	; 0x76e6 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    76de:	0e 94 06 3a 	call	0x740c	; 0x740c <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    76e2:	81 e0       	ldi	r24, 0x01	; 1
    76e4:	01 c0       	rjmp	.+2      	; 0x76e8 <CalibrateGyrosSlow+0x174>
    76e6:	80 e0       	ldi	r24, 0x00	; 0
    76e8:	e7 e8       	ldi	r30, 0x87	; 135
    76ea:	f3 e1       	ldi	r31, 0x13	; 19
    76ec:	31 97       	sbiw	r30, 0x01	; 1
    76ee:	f1 f7       	brne	.-4      	; 0x76ec <CalibrateGyrosSlow+0x178>
    76f0:	00 c0       	rjmp	.+0      	; 0x76f2 <CalibrateGyrosSlow+0x17e>
    76f2:	00 00       	nop
			GyroSmooth[axis] = Config.gyroZero_P1[axis];	
		}		
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    76f4:	81 11       	cpse	r24, r1
    76f6:	04 c0       	rjmp	.+8      	; 0x7700 <CalibrateGyrosSlow+0x18c>
    76f8:	fb 89       	ldd	r31, Y+19	; 0x13
    76fa:	f6 30       	cpi	r31, 0x06	; 6
    76fc:	08 f4       	brcc	.+2      	; 0x7700 <CalibrateGyrosSlow+0x18c>
    76fe:	92 cf       	rjmp	.-220    	; 0x7624 <CalibrateGyrosSlow+0xb0>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    7700:	66 96       	adiw	r28, 0x16	; 22
    7702:	0f b6       	in	r0, 0x3f	; 63
    7704:	f8 94       	cli
    7706:	de bf       	out	0x3e, r29	; 62
    7708:	0f be       	out	0x3f, r0	; 63
    770a:	cd bf       	out	0x3d, r28	; 61
    770c:	df 91       	pop	r29
    770e:	cf 91       	pop	r28
    7710:	1f 91       	pop	r17
    7712:	0f 91       	pop	r16
    7714:	ff 90       	pop	r15
    7716:	ef 90       	pop	r14
    7718:	df 90       	pop	r13
    771a:	cf 90       	pop	r12
    771c:	bf 90       	pop	r11
    771e:	af 90       	pop	r10
    7720:	9f 90       	pop	r9
    7722:	8f 90       	pop	r8
    7724:	7f 90       	pop	r7
    7726:	6f 90       	pop	r6
    7728:	5f 90       	pop	r5
    772a:	4f 90       	pop	r4
    772c:	3f 90       	pop	r3
    772e:	2f 90       	pop	r2
    7730:	08 95       	ret

00007732 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    7732:	41 e0       	ldi	r20, 0x01	; 1
    7734:	6b e6       	ldi	r22, 0x6B	; 107
    7736:	80 ed       	ldi	r24, 0xD0	; 208
    7738:	0e 94 b0 3b 	call	0x7760	; 0x7760 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    773c:	40 e4       	ldi	r20, 0x40	; 64
    773e:	67 e3       	ldi	r22, 0x37	; 55
    7740:	80 ed       	ldi	r24, 0xD0	; 208
    7742:	0e 94 b0 3b 	call	0x7760	; 0x7760 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    7746:	80 91 de 06 	lds	r24, 0x06DE
    774a:	46 e0       	ldi	r20, 0x06	; 6
    774c:	48 1b       	sub	r20, r24
    774e:	6a e1       	ldi	r22, 0x1A	; 26
    7750:	80 ed       	ldi	r24, 0xD0	; 208
    7752:	0e 94 b0 3b 	call	0x7760	; 0x7760 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    7756:	48 e1       	ldi	r20, 0x18	; 24
    7758:	6b e1       	ldi	r22, 0x1B	; 27
    775a:	80 ed       	ldi	r24, 0xD0	; 208
    775c:	0c 94 b0 3b 	jmp	0x7760	; 0x7760 <writeI2Cbyte>

00007760 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    7760:	cf 93       	push	r28
    7762:	df 93       	push	r29
    7764:	00 d0       	rcall	.+0      	; 0x7766 <writeI2Cbyte+0x6>
    7766:	cd b7       	in	r28, 0x3d	; 61
    7768:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    776a:	4a 83       	std	Y+2, r20	; 0x02
    776c:	69 83       	std	Y+1, r22	; 0x01
    776e:	0e 94 98 6b 	call	0xd730	; 0xd730 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    7772:	69 81       	ldd	r22, Y+1	; 0x01
    7774:	86 2f       	mov	r24, r22
    7776:	0e 94 e8 6b 	call	0xd7d0	; 0xd7d0 <i2c_write>
    i2c_write(value); 								// Write byte
    777a:	4a 81       	ldd	r20, Y+2	; 0x02
    777c:	84 2f       	mov	r24, r20
    777e:	0e 94 e8 6b 	call	0xd7d0	; 0xd7d0 <i2c_write>
    i2c_stop();
}
    7782:	0f 90       	pop	r0
    7784:	0f 90       	pop	r0
    7786:	df 91       	pop	r29
    7788:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    778a:	0c 94 d9 6b 	jmp	0xd7b2	; 0xd7b2 <i2c_stop>

0000778e <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    778e:	cf 92       	push	r12
    7790:	df 92       	push	r13
    7792:	ef 92       	push	r14
    7794:	ff 92       	push	r15
    7796:	0f 93       	push	r16
    7798:	1f 93       	push	r17
    779a:	cf 93       	push	r28
    779c:	df 93       	push	r29
    779e:	00 d0       	rcall	.+0      	; 0x77a0 <readI2CbyteArray+0x12>
    77a0:	1f 92       	push	r1
    77a2:	cd b7       	in	r28, 0x3d	; 61
    77a4:	de b7       	in	r29, 0x3e	; 62
    77a6:	18 2f       	mov	r17, r24
    77a8:	02 2f       	mov	r16, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    77aa:	4a 83       	std	Y+2, r20	; 0x02
    77ac:	5b 83       	std	Y+3, r21	; 0x03
    77ae:	69 83       	std	Y+1, r22	; 0x01
    77b0:	0e 94 98 6b 	call	0xd730	; 0xd730 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    77b4:	69 81       	ldd	r22, Y+1	; 0x01
    77b6:	86 2f       	mov	r24, r22
    77b8:	0e 94 e8 6b 	call	0xd7d0	; 0xd7d0 <i2c_write>
    i2c_rep_start(address+I2C_READ);
    77bc:	81 e0       	ldi	r24, 0x01	; 1
    77be:	81 0f       	add	r24, r17
    77c0:	0e 94 d7 6b 	call	0xd7ae	; 0xd7ae <i2c_rep_start>
    77c4:	4a 81       	ldd	r20, Y+2	; 0x02
    77c6:	c4 2e       	mov	r12, r20
    77c8:	5b 81       	ldd	r21, Y+3	; 0x03
    77ca:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    77cc:	e1 2c       	mov	r14, r1
    77ce:	f1 2c       	mov	r15, r1

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    77d0:	10 e0       	ldi	r17, 0x00	; 0
    77d2:	e0 16       	cp	r14, r16
    77d4:	f1 06       	cpc	r15, r17
    77d6:	8c f4       	brge	.+34     	; 0x77fa <readI2CbyteArray+0x6c>
	{
		if ((i+1)!=size)
    77d8:	8f ef       	ldi	r24, 0xFF	; 255
    77da:	e8 1a       	sub	r14, r24
    77dc:	f8 0a       	sbc	r15, r24
    77de:	e0 16       	cp	r14, r16
    77e0:	f1 06       	cpc	r15, r17
    77e2:	19 f0       	breq	.+6      	; 0x77ea <readI2CbyteArray+0x5c>
		{
			array[i]=i2c_readAck();
    77e4:	0e 94 08 6c 	call	0xd810	; 0xd810 <i2c_readAck>
    77e8:	02 c0       	rjmp	.+4      	; 0x77ee <readI2CbyteArray+0x60>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    77ea:	0e 94 21 6c 	call	0xd842	; 0xd842 <i2c_readNak>
    77ee:	f6 01       	movw	r30, r12
    77f0:	80 83       	st	Z, r24
    77f2:	ff ef       	ldi	r31, 0xFF	; 255
    77f4:	cf 1a       	sub	r12, r31
    77f6:	df 0a       	sbc	r13, r31
    77f8:	ec cf       	rjmp	.-40     	; 0x77d2 <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    77fa:	0f 90       	pop	r0
    77fc:	0f 90       	pop	r0
    77fe:	0f 90       	pop	r0
    7800:	df 91       	pop	r29
    7802:	cf 91       	pop	r28
    7804:	1f 91       	pop	r17
    7806:	0f 91       	pop	r16
    7808:	ff 90       	pop	r15
    780a:	ef 90       	pop	r14
    780c:	df 90       	pop	r13
    780e:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    7810:	0c 94 d9 6b 	jmp	0xd7b2	; 0xd7b2 <i2c_stop>

00007814 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    7814:	4f 92       	push	r4
    7816:	5f 92       	push	r5
    7818:	6f 92       	push	r6
    781a:	7f 92       	push	r7
    781c:	8f 92       	push	r8
    781e:	9f 92       	push	r9
    7820:	af 92       	push	r10
    7822:	bf 92       	push	r11
    7824:	cf 92       	push	r12
    7826:	df 92       	push	r13
    7828:	ef 92       	push	r14
    782a:	ff 92       	push	r15
    782c:	cf 93       	push	r28
    782e:	df 93       	push	r29
    7830:	cd b7       	in	r28, 0x3d	; 61
    7832:	de b7       	in	r29, 0x3e	; 62
    7834:	28 97       	sbiw	r28, 0x08	; 8
    7836:	0f b6       	in	r0, 0x3f	; 63
    7838:	f8 94       	cli
    783a:	de bf       	out	0x3e, r29	; 62
    783c:	0f be       	out	0x3f, r0	; 63
    783e:	cd bf       	out	0x3d, r28	; 61
    7840:	6b 01       	movw	r12, r22
    7842:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    7844:	80 90 31 06 	lds	r8, 0x0631
    7848:	90 90 32 06 	lds	r9, 0x0632
    784c:	a0 90 33 06 	lds	r10, 0x0633
    7850:	b0 90 34 06 	lds	r11, 0x0634
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    7854:	9b 01       	movw	r18, r22
    7856:	ac 01       	movw	r20, r24
    7858:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    785c:	20 e0       	ldi	r18, 0x00	; 0
    785e:	30 e0       	ldi	r19, 0x00	; 0
    7860:	40 e0       	ldi	r20, 0x00	; 0
    7862:	5f e3       	ldi	r21, 0x3F	; 63
    7864:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    7868:	9b 01       	movw	r18, r22
    786a:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    786c:	60 e0       	ldi	r22, 0x00	; 0
    786e:	70 e0       	ldi	r23, 0x00	; 0
    7870:	80 e8       	ldi	r24, 0x80	; 128
    7872:	9f e3       	ldi	r25, 0x3F	; 63
    7874:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    7878:	69 83       	std	Y+1, r22	; 0x01
    787a:	7a 83       	std	Y+2, r23	; 0x02
    787c:	8b 83       	std	Y+3, r24	; 0x03
    787e:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    7880:	40 90 35 06 	lds	r4, 0x0635
    7884:	50 90 36 06 	lds	r5, 0x0636
    7888:	60 90 37 06 	lds	r6, 0x0637
    788c:	70 90 38 06 	lds	r7, 0x0638
    7890:	9b 01       	movw	r18, r22
    7892:	ac 01       	movw	r20, r24
    7894:	c5 01       	movw	r24, r10
    7896:	b4 01       	movw	r22, r8
    7898:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    789c:	6d 83       	std	Y+5, r22	; 0x05
    789e:	7e 83       	std	Y+6, r23	; 0x06
    78a0:	8f 83       	std	Y+7, r24	; 0x07
    78a2:	98 87       	std	Y+8, r25	; 0x08
    78a4:	a7 01       	movw	r20, r14
    78a6:	96 01       	movw	r18, r12
    78a8:	c3 01       	movw	r24, r6
    78aa:	b2 01       	movw	r22, r4
    78ac:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    78b0:	9b 01       	movw	r18, r22
    78b2:	ac 01       	movw	r20, r24
    78b4:	6d 81       	ldd	r22, Y+5	; 0x05
    78b6:	7e 81       	ldd	r23, Y+6	; 0x06
    78b8:	8f 81       	ldd	r24, Y+7	; 0x07
    78ba:	98 85       	ldd	r25, Y+8	; 0x08
    78bc:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    78c0:	60 93 1d 06 	sts	0x061D, r22
    78c4:	70 93 1e 06 	sts	0x061E, r23
    78c8:	80 93 1f 06 	sts	0x061F, r24
    78cc:	90 93 20 06 	sts	0x0620, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    78d0:	a7 01       	movw	r20, r14
    78d2:	96 01       	movw	r18, r12
    78d4:	c5 01       	movw	r24, r10
    78d6:	b4 01       	movw	r22, r8
    78d8:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    78dc:	6b 01       	movw	r12, r22
    78de:	7c 01       	movw	r14, r24
    78e0:	29 81       	ldd	r18, Y+1	; 0x01
    78e2:	3a 81       	ldd	r19, Y+2	; 0x02
    78e4:	4b 81       	ldd	r20, Y+3	; 0x03
    78e6:	5c 81       	ldd	r21, Y+4	; 0x04
    78e8:	c3 01       	movw	r24, r6
    78ea:	b2 01       	movw	r22, r4
    78ec:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    78f0:	9b 01       	movw	r18, r22
    78f2:	ac 01       	movw	r20, r24
    78f4:	c7 01       	movw	r24, r14
    78f6:	b6 01       	movw	r22, r12
    78f8:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    78fc:	60 93 f9 05 	sts	0x05F9, r22
    7900:	70 93 fa 05 	sts	0x05FA, r23
    7904:	80 93 fb 05 	sts	0x05FB, r24
    7908:	90 93 fc 05 	sts	0x05FC, r25
}
    790c:	28 96       	adiw	r28, 0x08	; 8
    790e:	0f b6       	in	r0, 0x3f	; 63
    7910:	f8 94       	cli
    7912:	de bf       	out	0x3e, r29	; 62
    7914:	0f be       	out	0x3f, r0	; 63
    7916:	cd bf       	out	0x3d, r28	; 61
    7918:	df 91       	pop	r29
    791a:	cf 91       	pop	r28
    791c:	ff 90       	pop	r15
    791e:	ef 90       	pop	r14
    7920:	df 90       	pop	r13
    7922:	cf 90       	pop	r12
    7924:	bf 90       	pop	r11
    7926:	af 90       	pop	r10
    7928:	9f 90       	pop	r9
    792a:	8f 90       	pop	r8
    792c:	7f 90       	pop	r7
    792e:	6f 90       	pop	r6
    7930:	5f 90       	pop	r5
    7932:	4f 90       	pop	r4
    7934:	08 95       	ret

00007936 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    7936:	cf 92       	push	r12
    7938:	df 92       	push	r13
    793a:	ef 92       	push	r14
    793c:	ff 92       	push	r15
    793e:	69 01       	movw	r12, r18
    7940:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    7942:	25 ef       	ldi	r18, 0xF5	; 245
    7944:	31 ea       	ldi	r19, 0xA1	; 161
    7946:	4b e8       	ldi	r20, 0x8B	; 139
    7948:	5c e3       	ldi	r21, 0x3C	; 60
    794a:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    794e:	a7 01       	movw	r20, r14
    7950:	96 01       	movw	r18, r12
    7952:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    7956:	6b 01       	movw	r12, r22
    7958:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    795a:	26 ea       	ldi	r18, 0xA6	; 166
    795c:	3a e0       	ldi	r19, 0x0A	; 10
    795e:	46 e8       	ldi	r20, 0x86	; 134
    7960:	5e e3       	ldi	r21, 0x3E	; 62
    7962:	0e 94 a6 6e 	call	0xdd4c	; 0xdd4c <__gesf2>
    7966:	18 16       	cp	r1, r24
    7968:	9c f0       	brlt	.+38     	; 0x7990 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    796a:	26 ea       	ldi	r18, 0xA6	; 166
    796c:	3a e0       	ldi	r19, 0x0A	; 10
    796e:	46 e8       	ldi	r20, 0x86	; 134
    7970:	5e eb       	ldi	r21, 0xBE	; 190
    7972:	c7 01       	movw	r24, r14
    7974:	b6 01       	movw	r22, r12
    7976:	0e 94 47 6d 	call	0xda8e	; 0xda8e <__cmpsf2>
    797a:	87 ff       	sbrs	r24, 7
    797c:	11 c0       	rjmp	.+34     	; 0x79a0 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    797e:	96 ea       	ldi	r25, 0xA6	; 166
    7980:	c9 2e       	mov	r12, r25
    7982:	9a e0       	ldi	r25, 0x0A	; 10
    7984:	d9 2e       	mov	r13, r25
    7986:	96 e8       	ldi	r25, 0x86	; 134
    7988:	e9 2e       	mov	r14, r25
    798a:	9e eb       	ldi	r25, 0xBE	; 190
    798c:	f9 2e       	mov	r15, r25
    798e:	08 c0       	rjmp	.+16     	; 0x79a0 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    7990:	86 ea       	ldi	r24, 0xA6	; 166
    7992:	c8 2e       	mov	r12, r24
    7994:	8a e0       	ldi	r24, 0x0A	; 10
    7996:	d8 2e       	mov	r13, r24
    7998:	86 e8       	ldi	r24, 0x86	; 134
    799a:	e8 2e       	mov	r14, r24
    799c:	8e e3       	ldi	r24, 0x3E	; 62
    799e:	f8 2e       	mov	r15, r24
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    79a0:	c7 01       	movw	r24, r14
    79a2:	b6 01       	movw	r22, r12
    79a4:	ff 90       	pop	r15
    79a6:	ef 90       	pop	r14
    79a8:	df 90       	pop	r13
    79aa:	cf 90       	pop	r12
    79ac:	08 95       	ret

000079ae <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    79ae:	8f 92       	push	r8
    79b0:	9f 92       	push	r9
    79b2:	af 92       	push	r10
    79b4:	bf 92       	push	r11
    79b6:	cf 92       	push	r12
    79b8:	df 92       	push	r13
    79ba:	ef 92       	push	r14
    79bc:	ff 92       	push	r15
    79be:	0f 93       	push	r16
    79c0:	1f 93       	push	r17
    79c2:	6b 01       	movw	r12, r22
    79c4:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    79c6:	60 91 0d 06 	lds	r22, 0x060D
    79ca:	70 91 0e 06 	lds	r23, 0x060E
    79ce:	80 91 0f 06 	lds	r24, 0x060F
    79d2:	90 91 10 06 	lds	r25, 0x0610
    79d6:	a7 01       	movw	r20, r14
    79d8:	96 01       	movw	r18, r12
    79da:	0e 94 9b 3c 	call	0x7936	; 0x7936 <thetascale>
	VectorA = VectorY;
    79de:	00 91 3e 05 	lds	r16, 0x053E
    79e2:	10 91 3f 05 	lds	r17, 0x053F
    79e6:	20 91 40 05 	lds	r18, 0x0540
    79ea:	30 91 41 05 	lds	r19, 0x0541
    79ee:	00 93 31 06 	sts	0x0631, r16
    79f2:	10 93 32 06 	sts	0x0632, r17
    79f6:	20 93 33 06 	sts	0x0633, r18
    79fa:	30 93 34 06 	sts	0x0634, r19
	VectorB = VectorZ;
    79fe:	00 91 00 05 	lds	r16, 0x0500
    7a02:	10 91 01 05 	lds	r17, 0x0501
    7a06:	20 91 02 05 	lds	r18, 0x0502
    7a0a:	30 91 03 05 	lds	r19, 0x0503
    7a0e:	00 93 35 06 	sts	0x0635, r16
    7a12:	10 93 36 06 	sts	0x0636, r17
    7a16:	20 93 37 06 	sts	0x0637, r18
    7a1a:	30 93 38 06 	sts	0x0638, r19
	RotateVector(theta);
    7a1e:	0e 94 0a 3c 	call	0x7814	; 0x7814 <RotateVector>
	VectorY = VectorNewA;
    7a22:	80 91 1d 06 	lds	r24, 0x061D
    7a26:	90 91 1e 06 	lds	r25, 0x061E
    7a2a:	a0 91 1f 06 	lds	r26, 0x061F
    7a2e:	b0 91 20 06 	lds	r27, 0x0620
    7a32:	80 93 3e 05 	sts	0x053E, r24
    7a36:	90 93 3f 05 	sts	0x053F, r25
    7a3a:	a0 93 40 05 	sts	0x0540, r26
    7a3e:	b0 93 41 05 	sts	0x0541, r27
	VectorZ = VectorNewB;
    7a42:	80 90 f9 05 	lds	r8, 0x05F9
    7a46:	90 90 fa 05 	lds	r9, 0x05FA
    7a4a:	a0 90 fb 05 	lds	r10, 0x05FB
    7a4e:	b0 90 fc 05 	lds	r11, 0x05FC
    7a52:	80 92 00 05 	sts	0x0500, r8
    7a56:	90 92 01 05 	sts	0x0501, r9
    7a5a:	a0 92 02 05 	sts	0x0502, r10
    7a5e:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    7a62:	60 91 11 06 	lds	r22, 0x0611
    7a66:	70 91 12 06 	lds	r23, 0x0612
    7a6a:	80 91 13 06 	lds	r24, 0x0613
    7a6e:	90 91 14 06 	lds	r25, 0x0614
    7a72:	a7 01       	movw	r20, r14
    7a74:	96 01       	movw	r18, r12
    7a76:	0e 94 9b 3c 	call	0x7936	; 0x7936 <thetascale>
	VectorA = VectorX;
    7a7a:	00 91 42 05 	lds	r16, 0x0542
    7a7e:	10 91 43 05 	lds	r17, 0x0543
    7a82:	20 91 44 05 	lds	r18, 0x0544
    7a86:	30 91 45 05 	lds	r19, 0x0545
    7a8a:	00 93 31 06 	sts	0x0631, r16
    7a8e:	10 93 32 06 	sts	0x0632, r17
    7a92:	20 93 33 06 	sts	0x0633, r18
    7a96:	30 93 34 06 	sts	0x0634, r19
	VectorB = VectorZ;
    7a9a:	80 92 35 06 	sts	0x0635, r8
    7a9e:	90 92 36 06 	sts	0x0636, r9
    7aa2:	a0 92 37 06 	sts	0x0637, r10
    7aa6:	b0 92 38 06 	sts	0x0638, r11
	RotateVector(theta);
    7aaa:	0e 94 0a 3c 	call	0x7814	; 0x7814 <RotateVector>
	VectorX = VectorNewA;
    7aae:	80 90 1d 06 	lds	r8, 0x061D
    7ab2:	90 90 1e 06 	lds	r9, 0x061E
    7ab6:	a0 90 1f 06 	lds	r10, 0x061F
    7aba:	b0 90 20 06 	lds	r11, 0x0620
    7abe:	80 92 42 05 	sts	0x0542, r8
    7ac2:	90 92 43 05 	sts	0x0543, r9
    7ac6:	a0 92 44 05 	sts	0x0544, r10
    7aca:	b0 92 45 05 	sts	0x0545, r11
	VectorZ = VectorNewB;
    7ace:	80 91 f9 05 	lds	r24, 0x05F9
    7ad2:	90 91 fa 05 	lds	r25, 0x05FA
    7ad6:	a0 91 fb 05 	lds	r26, 0x05FB
    7ada:	b0 91 fc 05 	lds	r27, 0x05FC
    7ade:	80 93 00 05 	sts	0x0500, r24
    7ae2:	90 93 01 05 	sts	0x0501, r25
    7ae6:	a0 93 02 05 	sts	0x0502, r26
    7aea:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(GyroYawVC, intervalf);
    7aee:	60 91 15 06 	lds	r22, 0x0615
    7af2:	70 91 16 06 	lds	r23, 0x0616
    7af6:	80 91 17 06 	lds	r24, 0x0617
    7afa:	90 91 18 06 	lds	r25, 0x0618
    7afe:	a7 01       	movw	r20, r14
    7b00:	96 01       	movw	r18, r12
    7b02:	0e 94 9b 3c 	call	0x7936	; 0x7936 <thetascale>
	VectorA = VectorX;
    7b06:	80 92 31 06 	sts	0x0631, r8
    7b0a:	90 92 32 06 	sts	0x0632, r9
    7b0e:	a0 92 33 06 	sts	0x0633, r10
    7b12:	b0 92 34 06 	sts	0x0634, r11
	VectorB = VectorY;
    7b16:	c0 90 3e 05 	lds	r12, 0x053E
    7b1a:	d0 90 3f 05 	lds	r13, 0x053F
    7b1e:	e0 90 40 05 	lds	r14, 0x0540
    7b22:	f0 90 41 05 	lds	r15, 0x0541
    7b26:	c0 92 35 06 	sts	0x0635, r12
    7b2a:	d0 92 36 06 	sts	0x0636, r13
    7b2e:	e0 92 37 06 	sts	0x0637, r14
    7b32:	f0 92 38 06 	sts	0x0638, r15
	RotateVector(theta);
    7b36:	0e 94 0a 3c 	call	0x7814	; 0x7814 <RotateVector>
	VectorX = VectorNewA;
    7b3a:	80 91 1d 06 	lds	r24, 0x061D
    7b3e:	90 91 1e 06 	lds	r25, 0x061E
    7b42:	a0 91 1f 06 	lds	r26, 0x061F
    7b46:	b0 91 20 06 	lds	r27, 0x0620
    7b4a:	80 93 42 05 	sts	0x0542, r24
    7b4e:	90 93 43 05 	sts	0x0543, r25
    7b52:	a0 93 44 05 	sts	0x0544, r26
    7b56:	b0 93 45 05 	sts	0x0545, r27
	VectorY = VectorNewB;
    7b5a:	80 91 f9 05 	lds	r24, 0x05F9
    7b5e:	90 91 fa 05 	lds	r25, 0x05FA
    7b62:	a0 91 fb 05 	lds	r26, 0x05FB
    7b66:	b0 91 fc 05 	lds	r27, 0x05FC
    7b6a:	80 93 3e 05 	sts	0x053E, r24
    7b6e:	90 93 3f 05 	sts	0x053F, r25
    7b72:	a0 93 40 05 	sts	0x0540, r26
    7b76:	b0 93 41 05 	sts	0x0541, r27
}
    7b7a:	1f 91       	pop	r17
    7b7c:	0f 91       	pop	r16
    7b7e:	ff 90       	pop	r15
    7b80:	ef 90       	pop	r14
    7b82:	df 90       	pop	r13
    7b84:	cf 90       	pop	r12
    7b86:	bf 90       	pop	r11
    7b88:	af 90       	pop	r10
    7b8a:	9f 90       	pop	r9
    7b8c:	8f 90       	pop	r8
    7b8e:	08 95       	ret

00007b90 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    7b90:	cf 92       	push	r12
    7b92:	df 92       	push	r13
    7b94:	ef 92       	push	r14
    7b96:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    7b98:	20 e0       	ldi	r18, 0x00	; 0
    7b9a:	30 e0       	ldi	r19, 0x00	; 0
    7b9c:	44 eb       	ldi	r20, 0xB4	; 180
    7b9e:	52 e4       	ldi	r21, 0x42	; 66
    7ba0:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    7ba4:	6b 01       	movw	r12, r22
    7ba6:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    7ba8:	20 e0       	ldi	r18, 0x00	; 0
    7baa:	30 e0       	ldi	r19, 0x00	; 0
    7bac:	a9 01       	movw	r20, r18
    7bae:	60 91 00 05 	lds	r22, 0x0500
    7bb2:	70 91 01 05 	lds	r23, 0x0501
    7bb6:	80 91 02 05 	lds	r24, 0x0502
    7bba:	90 91 03 05 	lds	r25, 0x0503
    7bbe:	0e 94 47 6d 	call	0xda8e	; 0xda8e <__cmpsf2>
    7bc2:	87 ff       	sbrs	r24, 7
    7bc4:	18 c0       	rjmp	.+48     	; 0x7bf6 <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    7bc6:	20 e0       	ldi	r18, 0x00	; 0
    7bc8:	30 e0       	ldi	r19, 0x00	; 0
    7bca:	a9 01       	movw	r20, r18
    7bcc:	c7 01       	movw	r24, r14
    7bce:	b6 01       	movw	r22, r12
    7bd0:	0e 94 a6 6e 	call	0xdd4c	; 0xdd4c <__gesf2>
		{
			temp = 180 - temp;
    7bd4:	a7 01       	movw	r20, r14
    7bd6:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    7bd8:	18 16       	cp	r1, r24
    7bda:	2c f4       	brge	.+10     	; 0x7be6 <ext2+0x56>
		{
			temp = 180 - temp;
    7bdc:	60 e0       	ldi	r22, 0x00	; 0
    7bde:	70 e0       	ldi	r23, 0x00	; 0
    7be0:	84 e3       	ldi	r24, 0x34	; 52
    7be2:	93 e4       	ldi	r25, 0x43	; 67
    7be4:	04 c0       	rjmp	.+8      	; 0x7bee <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    7be6:	60 e0       	ldi	r22, 0x00	; 0
    7be8:	70 e0       	ldi	r23, 0x00	; 0
    7bea:	84 e3       	ldi	r24, 0x34	; 52
    7bec:	93 ec       	ldi	r25, 0xC3	; 195
    7bee:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    7bf2:	6b 01       	movw	r12, r22
    7bf4:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    7bf6:	c7 01       	movw	r24, r14
    7bf8:	b6 01       	movw	r22, r12
    7bfa:	ff 90       	pop	r15
    7bfc:	ef 90       	pop	r14
    7bfe:	df 90       	pop	r13
    7c00:	cf 90       	pop	r12
    7c02:	08 95       	ret

00007c04 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    7c04:	60 91 42 05 	lds	r22, 0x0542
    7c08:	70 91 43 05 	lds	r23, 0x0543
    7c0c:	80 91 44 05 	lds	r24, 0x0544
    7c10:	90 91 45 05 	lds	r25, 0x0545
    7c14:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <ext2>
    7c18:	60 93 2d 06 	sts	0x062D, r22
    7c1c:	70 93 2e 06 	sts	0x062E, r23
    7c20:	80 93 2f 06 	sts	0x062F, r24
    7c24:	90 93 30 06 	sts	0x0630, r25
	EulerAnglePitch = ext2(VectorY);
    7c28:	60 91 3e 05 	lds	r22, 0x053E
    7c2c:	70 91 3f 05 	lds	r23, 0x053F
    7c30:	80 91 40 05 	lds	r24, 0x0540
    7c34:	90 91 41 05 	lds	r25, 0x0541
    7c38:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <ext2>
    7c3c:	60 93 01 06 	sts	0x0601, r22
    7c40:	70 93 02 06 	sts	0x0602, r23
    7c44:	80 93 03 06 	sts	0x0603, r24
    7c48:	90 93 04 06 	sts	0x0604, r25
    7c4c:	08 95       	ret

00007c4e <imu_update>:
//
//************************************************************
//

void imu_update(uint32_t period)
{
    7c4e:	4f 92       	push	r4
    7c50:	5f 92       	push	r5
    7c52:	6f 92       	push	r6
    7c54:	7f 92       	push	r7
    7c56:	8f 92       	push	r8
    7c58:	9f 92       	push	r9
    7c5a:	af 92       	push	r10
    7c5c:	bf 92       	push	r11
    7c5e:	cf 92       	push	r12
    7c60:	df 92       	push	r13
    7c62:	ef 92       	push	r14
    7c64:	ff 92       	push	r15
    7c66:	0f 93       	push	r16
    7c68:	1f 93       	push	r17
    7c6a:	cf 93       	push	r28
    7c6c:	df 93       	push	r29
    7c6e:	cd b7       	in	r28, 0x3d	; 61
    7c70:	de b7       	in	r29, 0x3e	; 62
    7c72:	2c 97       	sbiw	r28, 0x0c	; 12
    7c74:	0f b6       	in	r0, 0x3f	; 63
    7c76:	f8 94       	cli
    7c78:	de bf       	out	0x3e, r29	; 62
    7c7a:	0f be       	out	0x3f, r0	; 63
    7c7c:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    7c7e:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <__floatunsisf>
    7c82:	69 83       	std	Y+1, r22	; 0x01
    7c84:	7a 83       	std	Y+2, r23	; 0x02
    7c86:	8b 83       	std	Y+3, r24	; 0x03
    7c88:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    7c8a:	20 e8       	ldi	r18, 0x80	; 128
    7c8c:	36 e9       	ldi	r19, 0x96	; 150
    7c8e:	48 e1       	ldi	r20, 0x18	; 24
    7c90:	5a e4       	ldi	r21, 0x4A	; 74
    7c92:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    7c96:	60 93 fd 05 	sts	0x05FD, r22
    7c9a:	70 93 fe 05 	sts	0x05FE, r23
    7c9e:	80 93 ff 05 	sts	0x05FF, r24
    7ca2:	90 93 00 06 	sts	0x0600, r25
	//************************************************************
	// Acc LPF
	//************************************************************	

	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    7ca6:	80 91 63 06 	lds	r24, 0x0663
    7caa:	60 91 df 06 	lds	r22, 0x06DF
    7cae:	82 30       	cpi	r24, 0x02	; 2
    7cb0:	39 f0       	breq	.+14     	; 0x7cc0 <imu_update+0x72>
	{
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    7cb2:	04 e0       	ldi	r16, 0x04	; 4
    7cb4:	60 02       	muls	r22, r16
    7cb6:	b0 01       	movw	r22, r0
    7cb8:	11 24       	eor	r1, r1
    7cba:	6d 53       	subi	r22, 0x3D	; 61
    7cbc:	7b 4d       	sbci	r23, 0xDB	; 219
    7cbe:	06 c0       	rjmp	.+12     	; 0x7ccc <imu_update+0x7e>
	}
	else
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
    7cc0:	14 e0       	ldi	r17, 0x04	; 4
    7cc2:	61 02       	muls	r22, r17
    7cc4:	b0 01       	movw	r22, r0
    7cc6:	11 24       	eor	r1, r1
    7cc8:	6d 55       	subi	r22, 0x5D	; 93
    7cca:	7b 4d       	sbci	r23, 0xDB	; 219
    7ccc:	44 e0       	ldi	r20, 0x04	; 4
    7cce:	50 e0       	ldi	r21, 0x00	; 0
    7cd0:	ce 01       	movw	r24, r28
    7cd2:	01 96       	adiw	r24, 0x01	; 1
    7cd4:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    7cd8:	90 90 df 06 	lds	r9, 0x06DF
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    7cdc:	49 80       	ldd	r4, Y+1	; 0x01
    7cde:	5a 80       	ldd	r5, Y+2	; 0x02
    7ce0:	6b 80       	ldd	r6, Y+3	; 0x03
    7ce2:	7c 80       	ldd	r7, Y+4	; 0x04
    7ce4:	80 e7       	ldi	r24, 0x70	; 112
    7ce6:	a8 2e       	mov	r10, r24
    7ce8:	85 e0       	ldi	r24, 0x05	; 5
    7cea:	b8 2e       	mov	r11, r24
    7cec:	01 e2       	ldi	r16, 0x21	; 33
    7cee:	16 e0       	ldi	r17, 0x06	; 6
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    7cf0:	d5 01       	movw	r26, r10
    7cf2:	6d 91       	ld	r22, X+
    7cf4:	7d 91       	ld	r23, X+
    7cf6:	5d 01       	movw	r10, r26
    7cf8:	07 2e       	mov	r0, r23
    7cfa:	00 0c       	add	r0, r0
    7cfc:	88 0b       	sbc	r24, r24
    7cfe:	99 0b       	sbc	r25, r25
    7d00:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    7d04:	6b 01       	movw	r12, r22
    7d06:	7c 01       	movw	r14, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    7d08:	b7 e0       	ldi	r27, 0x07	; 7
    7d0a:	9b 16       	cp	r9, r27
    7d0c:	f1 f0       	breq	.+60     	; 0x7d4a <imu_update+0xfc>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    7d0e:	20 e0       	ldi	r18, 0x00	; 0
    7d10:	30 e0       	ldi	r19, 0x00	; 0
    7d12:	40 e8       	ldi	r20, 0x80	; 128
    7d14:	5f e3       	ldi	r21, 0x3F	; 63
    7d16:	c3 01       	movw	r24, r6
    7d18:	b2 01       	movw	r22, r4
    7d1a:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    7d1e:	f8 01       	movw	r30, r16
    7d20:	20 81       	ld	r18, Z
    7d22:	31 81       	ldd	r19, Z+1	; 0x01
    7d24:	42 81       	ldd	r20, Z+2	; 0x02
    7d26:	53 81       	ldd	r21, Z+3	; 0x03
    7d28:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    7d2c:	a7 01       	movw	r20, r14
    7d2e:	96 01       	movw	r18, r12
    7d30:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    7d34:	a3 01       	movw	r20, r6
    7d36:	92 01       	movw	r18, r4
    7d38:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    7d3c:	d8 01       	movw	r26, r16
    7d3e:	6d 93       	st	X+, r22
    7d40:	7d 93       	st	X+, r23
    7d42:	8d 93       	st	X+, r24
    7d44:	9c 93       	st	X, r25
    7d46:	13 97       	sbiw	r26, 0x03	; 3
    7d48:	09 c0       	rjmp	.+18     	; 0x7d5c <imu_update+0x10e>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    7d4a:	f7 fa       	bst	r15, 7
    7d4c:	f0 94       	com	r15
    7d4e:	f7 f8       	bld	r15, 7
    7d50:	f0 94       	com	r15
    7d52:	f8 01       	movw	r30, r16
    7d54:	c0 82       	st	Z, r12
    7d56:	d1 82       	std	Z+1, r13	; 0x01
    7d58:	e2 82       	std	Z+2, r14	; 0x02
    7d5a:	f3 82       	std	Z+3, r15	; 0x03
    7d5c:	0c 5f       	subi	r16, 0xFC	; 252
    7d5e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    7d60:	f6 e0       	ldi	r31, 0x06	; 6
    7d62:	0d 32       	cpi	r16, 0x2D	; 45
    7d64:	1f 07       	cpc	r17, r31
    7d66:	21 f6       	brne	.-120    	; 0x7cf0 <imu_update+0xa2>
	
	// Z Acc LPF for long-term zero
	//accVertZerof = ((accVertZerof * (ZACCLPF - 1.0f)) - accVertf) / ZACCLPF; // Heavy filter
		
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    7d68:	23 ec       	ldi	r18, 0xC3	; 195
    7d6a:	35 ef       	ldi	r19, 0xF5	; 245
    7d6c:	48 e2       	ldi	r20, 0x28	; 40
    7d6e:	5f e3       	ldi	r21, 0x3F	; 63
    7d70:	60 91 21 06 	lds	r22, 0x0621
    7d74:	70 91 22 06 	lds	r23, 0x0622
    7d78:	80 91 23 06 	lds	r24, 0x0623
    7d7c:	90 91 24 06 	lds	r25, 0x0624
    7d80:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    7d84:	6d 83       	std	Y+5, r22	; 0x05
    7d86:	7e 83       	std	Y+6, r23	; 0x06
    7d88:	8f 83       	std	Y+7, r24	; 0x07
    7d8a:	98 87       	std	Y+8, r25	; 0x08
    7d8c:	60 93 05 06 	sts	0x0605, r22
    7d90:	70 93 06 06 	sts	0x0606, r23
    7d94:	80 93 07 06 	sts	0x0607, r24
    7d98:	90 93 08 06 	sts	0x0608, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    7d9c:	23 ec       	ldi	r18, 0xC3	; 195
    7d9e:	35 ef       	ldi	r19, 0xF5	; 245
    7da0:	48 e2       	ldi	r20, 0x28	; 40
    7da2:	5f e3       	ldi	r21, 0x3F	; 63
    7da4:	60 91 25 06 	lds	r22, 0x0625
    7da8:	70 91 26 06 	lds	r23, 0x0626
    7dac:	80 91 27 06 	lds	r24, 0x0627
    7db0:	90 91 28 06 	lds	r25, 0x0628
    7db4:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    7db8:	69 87       	std	Y+9, r22	; 0x09
    7dba:	7a 87       	std	Y+10, r23	; 0x0a
    7dbc:	8b 87       	std	Y+11, r24	; 0x0b
    7dbe:	9c 87       	std	Y+12, r25	; 0x0c
    7dc0:	60 93 09 06 	sts	0x0609, r22
    7dc4:	70 93 0a 06 	sts	0x060A, r23
    7dc8:	80 93 0b 06 	sts	0x060B, r24
    7dcc:	90 93 0c 06 	sts	0x060C, r25

	// Alter the gyro sources to the IMU as required.
	// Using gyroADCalt[] always assures that the right gyros are associated with the IMU
	GyroRollVC = gyroADCalt[ROLL];
    7dd0:	60 91 ed 05 	lds	r22, 0x05ED
    7dd4:	70 91 ee 05 	lds	r23, 0x05EE
    7dd8:	07 2e       	mov	r0, r23
    7dda:	00 0c       	add	r0, r0
    7ddc:	88 0b       	sbc	r24, r24
    7dde:	99 0b       	sbc	r25, r25
    7de0:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    7de4:	2b 01       	movw	r4, r22
    7de6:	3c 01       	movw	r6, r24
    7de8:	60 93 11 06 	sts	0x0611, r22
    7dec:	70 93 12 06 	sts	0x0612, r23
    7df0:	80 93 13 06 	sts	0x0613, r24
    7df4:	90 93 14 06 	sts	0x0614, r25
	GyroPitchVC = gyroADCalt[PITCH];
    7df8:	60 91 ef 05 	lds	r22, 0x05EF
    7dfc:	70 91 f0 05 	lds	r23, 0x05F0
    7e00:	07 2e       	mov	r0, r23
    7e02:	00 0c       	add	r0, r0
    7e04:	88 0b       	sbc	r24, r24
    7e06:	99 0b       	sbc	r25, r25
    7e08:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    7e0c:	4b 01       	movw	r8, r22
    7e0e:	5c 01       	movw	r10, r24
    7e10:	60 93 0d 06 	sts	0x060D, r22
    7e14:	70 93 0e 06 	sts	0x060E, r23
    7e18:	80 93 0f 06 	sts	0x060F, r24
    7e1c:	90 93 10 06 	sts	0x0610, r25
	GyroYawVC = gyroADCalt[YAW];
    7e20:	60 91 f1 05 	lds	r22, 0x05F1
    7e24:	70 91 f2 05 	lds	r23, 0x05F2
    7e28:	07 2e       	mov	r0, r23
    7e2a:	00 0c       	add	r0, r0
    7e2c:	88 0b       	sbc	r24, r24
    7e2e:	99 0b       	sbc	r25, r25
    7e30:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    7e34:	60 93 15 06 	sts	0x0615, r22
    7e38:	70 93 16 06 	sts	0x0616, r23
    7e3c:	80 93 17 06 	sts	0x0617, r24
    7e40:	90 93 18 06 	sts	0x0618, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    7e44:	e0 91 70 05 	lds	r30, 0x0570
    7e48:	f0 91 71 05 	lds	r31, 0x0571
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    7e4c:	80 91 72 05 	lds	r24, 0x0572
    7e50:	90 91 73 05 	lds	r25, 0x0573
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    7e54:	20 91 74 05 	lds	r18, 0x0574
    7e58:	30 91 75 05 	lds	r19, 0x0575
	GyroPitchVC = gyroADCalt[PITCH];
	GyroYawVC = gyroADCalt[YAW];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    7e5c:	88 9f       	mul	r24, r24
    7e5e:	a0 01       	movw	r20, r0
    7e60:	89 9f       	mul	r24, r25
    7e62:	50 0d       	add	r21, r0
    7e64:	50 0d       	add	r21, r0
    7e66:	11 24       	eor	r1, r1
    7e68:	05 2e       	mov	r0, r21
    7e6a:	00 0c       	add	r0, r0
    7e6c:	66 0b       	sbc	r22, r22
    7e6e:	77 0b       	sbc	r23, r23
	GyroRollVC = gyroADCalt[ROLL];
	GyroPitchVC = gyroADCalt[PITCH];
	GyroYawVC = gyroADCalt[YAW];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    7e70:	ee 9f       	mul	r30, r30
    7e72:	c0 01       	movw	r24, r0
    7e74:	ef 9f       	mul	r30, r31
    7e76:	90 0d       	add	r25, r0
    7e78:	90 0d       	add	r25, r0
    7e7a:	11 24       	eor	r1, r1
    7e7c:	09 2e       	mov	r0, r25
    7e7e:	00 0c       	add	r0, r0
    7e80:	aa 0b       	sbc	r26, r26
    7e82:	bb 0b       	sbc	r27, r27
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    7e84:	48 0f       	add	r20, r24
    7e86:	59 1f       	adc	r21, r25
    7e88:	6a 1f       	adc	r22, r26
    7e8a:	7b 1f       	adc	r23, r27
	GyroYawVC = gyroADCalt[YAW];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    7e8c:	22 9f       	mul	r18, r18
    7e8e:	c0 01       	movw	r24, r0
    7e90:	23 9f       	mul	r18, r19
    7e92:	90 0d       	add	r25, r0
    7e94:	90 0d       	add	r25, r0
    7e96:	11 24       	eor	r1, r1
    7e98:	09 2e       	mov	r0, r25
    7e9a:	00 0c       	add	r0, r0
    7e9c:	aa 0b       	sbc	r26, r26
    7e9e:	bb 0b       	sbc	r27, r27
	AccMag = roll_sq + pitch_sq + yaw_sq;
    7ea0:	8a 01       	movw	r16, r20
    7ea2:	9b 01       	movw	r18, r22
    7ea4:	08 0f       	add	r16, r24
    7ea6:	19 1f       	adc	r17, r25
    7ea8:	2a 1f       	adc	r18, r26
    7eaa:	3b 1f       	adc	r19, r27
    7eac:	c9 01       	movw	r24, r18
    7eae:	b8 01       	movw	r22, r16
	// NB: new dual autolevel code needs acc correction at least temporarily when switching profiles.
	// This is actually a kind of Complementary Filter
	//if ((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5)) // Original code
	
	// New test code - only adjust when in acc mag limits and when upright or dual AL code
	if	(((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5) && (Config.P1_Reference == NO_ORIENT)) || // Same as always when "Same" 
    7eb0:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <__floatunsisf>
    7eb4:	6b 01       	movw	r12, r22
    7eb6:	7c 01       	movw	r14, r24
    7eb8:	20 e0       	ldi	r18, 0x00	; 0
    7eba:	34 ef       	ldi	r19, 0xF4	; 244
    7ebc:	48 e3       	ldi	r20, 0x38	; 56
    7ebe:	56 e4       	ldi	r21, 0x46	; 70
    7ec0:	0e 94 a6 6e 	call	0xdd4c	; 0xdd4c <__gesf2>
    7ec4:	18 16       	cp	r1, r24
    7ec6:	f4 f4       	brge	.+60     	; 0x7f04 <imu_update+0x2b6>
    7ec8:	20 e0       	ldi	r18, 0x00	; 0
    7eca:	38 e4       	ldi	r19, 0x48	; 72
    7ecc:	49 ea       	ldi	r20, 0xA9	; 169
    7ece:	56 e4       	ldi	r21, 0x46	; 70
    7ed0:	c7 01       	movw	r24, r14
    7ed2:	b6 01       	movw	r22, r12
    7ed4:	0e 94 47 6d 	call	0xda8e	; 0xda8e <__cmpsf2>
    7ed8:	87 ff       	sbrs	r24, 7
    7eda:	14 c0       	rjmp	.+40     	; 0x7f04 <imu_update+0x2b6>
    7edc:	20 e0       	ldi	r18, 0x00	; 0
    7ede:	30 e0       	ldi	r19, 0x00	; 0
    7ee0:	40 e0       	ldi	r20, 0x00	; 0
    7ee2:	5f e3       	ldi	r21, 0x3F	; 63
    7ee4:	60 91 00 05 	lds	r22, 0x0500
    7ee8:	70 91 01 05 	lds	r23, 0x0501
    7eec:	80 91 02 05 	lds	r24, 0x0502
    7ef0:	90 91 03 05 	lds	r25, 0x0503
    7ef4:	0e 94 a6 6e 	call	0xdd4c	; 0xdd4c <__gesf2>
    7ef8:	18 16       	cp	r1, r24
    7efa:	24 f4       	brge	.+8      	; 0x7f04 <imu_update+0x2b6>
    7efc:	80 91 d9 06 	lds	r24, 0x06D9
    7f00:	88 23       	and	r24, r24
    7f02:	d1 f0       	breq	.+52     	; 0x7f38 <imu_update+0x2ea>
    7f04:	20 e0       	ldi	r18, 0x00	; 0
    7f06:	30 ed       	ldi	r19, 0xD0	; 208
    7f08:	43 e2       	ldi	r20, 0x23	; 35
    7f0a:	55 e4       	ldi	r21, 0x45	; 69
    7f0c:	c7 01       	movw	r24, r14
    7f0e:	b6 01       	movw	r22, r12
    7f10:	0e 94 a6 6e 	call	0xdd4c	; 0xdd4c <__gesf2>
    7f14:	18 16       	cp	r1, r24
    7f16:	0c f0       	brlt	.+2      	; 0x7f1a <imu_update+0x2cc>
    7f18:	6f c0       	rjmp	.+222    	; 0x7ff8 <imu_update+0x3aa>
		 ((AccMag > acc_0_4G_SQ) && (AccMag < acc_1_6G_SQ) && (Config.P1_Reference != NO_ORIENT))) 
    7f1a:	20 e0       	ldi	r18, 0x00	; 0
    7f1c:	37 ed       	ldi	r19, 0xD7	; 215
    7f1e:	43 e2       	ldi	r20, 0x23	; 35
    7f20:	57 e4       	ldi	r21, 0x47	; 71
    7f22:	c7 01       	movw	r24, r14
    7f24:	b6 01       	movw	r22, r12
    7f26:	0e 94 47 6d 	call	0xda8e	; 0xda8e <__cmpsf2>
    7f2a:	87 ff       	sbrs	r24, 7
    7f2c:	65 c0       	rjmp	.+202    	; 0x7ff8 <imu_update+0x3aa>
    7f2e:	80 91 d9 06 	lds	r24, 0x06D9
    7f32:	88 23       	and	r24, r24
    7f34:	09 f4       	brne	.+2      	; 0x7f38 <imu_update+0x2ea>
    7f36:	60 c0       	rjmp	.+192    	; 0x7ff8 <imu_update+0x3aa>
	{
		// Default Config.CF_factor is 6 (1 - 10 = 10% to 100%, 6 = 60%)
		tempf = (EulerAngleRoll - AccAngleRoll) / 10;
		tempf = tempf * (12 - Config.CF_factor); 
    7f38:	80 91 e1 06 	lds	r24, 0x06E1
    7f3c:	6c e0       	ldi	r22, 0x0C	; 12
    7f3e:	70 e0       	ldi	r23, 0x00	; 0
    7f40:	68 1b       	sub	r22, r24
    7f42:	71 09       	sbc	r23, r1
    7f44:	87 fd       	sbrc	r24, 7
    7f46:	73 95       	inc	r23
    7f48:	07 2e       	mov	r0, r23
    7f4a:	00 0c       	add	r0, r0
    7f4c:	88 0b       	sbc	r24, r24
    7f4e:	99 0b       	sbc	r25, r25
    7f50:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    7f54:	6b 01       	movw	r12, r22
    7f56:	7c 01       	movw	r14, r24
	// New test code - only adjust when in acc mag limits and when upright or dual AL code
	if	(((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5) && (Config.P1_Reference == NO_ORIENT)) || // Same as always when "Same" 
		 ((AccMag > acc_0_4G_SQ) && (AccMag < acc_1_6G_SQ) && (Config.P1_Reference != NO_ORIENT))) 
	{
		// Default Config.CF_factor is 6 (1 - 10 = 10% to 100%, 6 = 60%)
		tempf = (EulerAngleRoll - AccAngleRoll) / 10;
    7f58:	2d 81       	ldd	r18, Y+5	; 0x05
    7f5a:	3e 81       	ldd	r19, Y+6	; 0x06
    7f5c:	4f 81       	ldd	r20, Y+7	; 0x07
    7f5e:	58 85       	ldd	r21, Y+8	; 0x08
    7f60:	60 91 2d 06 	lds	r22, 0x062D
    7f64:	70 91 2e 06 	lds	r23, 0x062E
    7f68:	80 91 2f 06 	lds	r24, 0x062F
    7f6c:	90 91 30 06 	lds	r25, 0x0630
    7f70:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    7f74:	20 e0       	ldi	r18, 0x00	; 0
    7f76:	30 e0       	ldi	r19, 0x00	; 0
    7f78:	40 e2       	ldi	r20, 0x20	; 32
    7f7a:	51 e4       	ldi	r21, 0x41	; 65
    7f7c:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
		tempf = tempf * (12 - Config.CF_factor); 
    7f80:	a7 01       	movw	r20, r14
    7f82:	96 01       	movw	r18, r12
    7f84:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    7f88:	9b 01       	movw	r18, r22
    7f8a:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    7f8c:	c3 01       	movw	r24, r6
    7f8e:	b2 01       	movw	r22, r4
    7f90:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    7f94:	60 93 11 06 	sts	0x0611, r22
    7f98:	70 93 12 06 	sts	0x0612, r23
    7f9c:	80 93 13 06 	sts	0x0613, r24
    7fa0:	90 93 14 06 	sts	0x0614, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) / 10;
    7fa4:	29 85       	ldd	r18, Y+9	; 0x09
    7fa6:	3a 85       	ldd	r19, Y+10	; 0x0a
    7fa8:	4b 85       	ldd	r20, Y+11	; 0x0b
    7faa:	5c 85       	ldd	r21, Y+12	; 0x0c
    7fac:	60 91 01 06 	lds	r22, 0x0601
    7fb0:	70 91 02 06 	lds	r23, 0x0602
    7fb4:	80 91 03 06 	lds	r24, 0x0603
    7fb8:	90 91 04 06 	lds	r25, 0x0604
    7fbc:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    7fc0:	20 e0       	ldi	r18, 0x00	; 0
    7fc2:	30 e0       	ldi	r19, 0x00	; 0
    7fc4:	40 e2       	ldi	r20, 0x20	; 32
    7fc6:	51 e4       	ldi	r21, 0x41	; 65
    7fc8:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
		tempf = tempf * (12 - Config.CF_factor);
    7fcc:	a7 01       	movw	r20, r14
    7fce:	96 01       	movw	r18, r12
    7fd0:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    7fd4:	9b 01       	movw	r18, r22
    7fd6:	ac 01       	movw	r20, r24
    7fd8:	69 83       	std	Y+1, r22	; 0x01
    7fda:	7a 83       	std	Y+2, r23	; 0x02
    7fdc:	8b 83       	std	Y+3, r24	; 0x03
    7fde:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    7fe0:	c5 01       	movw	r24, r10
    7fe2:	b4 01       	movw	r22, r8
    7fe4:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    7fe8:	60 93 0d 06 	sts	0x060D, r22
    7fec:	70 93 0e 06 	sts	0x060E, r23
    7ff0:	80 93 0f 06 	sts	0x060F, r24
    7ff4:	90 93 10 06 	sts	0x0610, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    7ff8:	60 91 fd 05 	lds	r22, 0x05FD
    7ffc:	70 91 fe 05 	lds	r23, 0x05FE
    8000:	80 91 ff 05 	lds	r24, 0x05FF
    8004:	90 91 00 06 	lds	r25, 0x0600
    8008:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <Rotate3dVector>
	ExtractEulerAngles();
    800c:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    8010:	20 e0       	ldi	r18, 0x00	; 0
    8012:	30 e0       	ldi	r19, 0x00	; 0
    8014:	48 ec       	ldi	r20, 0xC8	; 200
    8016:	52 ec       	ldi	r21, 0xC2	; 194
    8018:	60 91 2d 06 	lds	r22, 0x062D
    801c:	70 91 2e 06 	lds	r23, 0x062E
    8020:	80 91 2f 06 	lds	r24, 0x062F
    8024:	90 91 30 06 	lds	r25, 0x0630
    8028:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    802c:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    8030:	70 93 1a 06 	sts	0x061A, r23
    8034:	60 93 19 06 	sts	0x0619, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    8038:	20 e0       	ldi	r18, 0x00	; 0
    803a:	30 e0       	ldi	r19, 0x00	; 0
    803c:	48 ec       	ldi	r20, 0xC8	; 200
    803e:	52 ec       	ldi	r21, 0xC2	; 194
    8040:	60 91 01 06 	lds	r22, 0x0601
    8044:	70 91 02 06 	lds	r23, 0x0602
    8048:	80 91 03 06 	lds	r24, 0x0603
    804c:	90 91 04 06 	lds	r25, 0x0604
    8050:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    8054:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    8058:	70 93 1c 06 	sts	0x061C, r23
    805c:	60 93 1b 06 	sts	0x061B, r22
}
    8060:	2c 96       	adiw	r28, 0x0c	; 12
    8062:	0f b6       	in	r0, 0x3f	; 63
    8064:	f8 94       	cli
    8066:	de bf       	out	0x3e, r29	; 62
    8068:	0f be       	out	0x3f, r0	; 63
    806a:	cd bf       	out	0x3d, r28	; 61
    806c:	df 91       	pop	r29
    806e:	cf 91       	pop	r28
    8070:	1f 91       	pop	r17
    8072:	0f 91       	pop	r16
    8074:	ff 90       	pop	r15
    8076:	ef 90       	pop	r14
    8078:	df 90       	pop	r13
    807a:	cf 90       	pop	r12
    807c:	bf 90       	pop	r11
    807e:	af 90       	pop	r10
    8080:	9f 90       	pop	r9
    8082:	8f 90       	pop	r8
    8084:	7f 90       	pop	r7
    8086:	6f 90       	pop	r6
    8088:	5f 90       	pop	r5
    808a:	4f 90       	pop	r4
    808c:	08 95       	ret

0000808e <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    808e:	10 92 42 05 	sts	0x0542, r1
    8092:	10 92 43 05 	sts	0x0543, r1
    8096:	10 92 44 05 	sts	0x0544, r1
    809a:	10 92 45 05 	sts	0x0545, r1
	VectorY = 0;
    809e:	10 92 3e 05 	sts	0x053E, r1
    80a2:	10 92 3f 05 	sts	0x053F, r1
    80a6:	10 92 40 05 	sts	0x0540, r1
    80aa:	10 92 41 05 	sts	0x0541, r1
	VectorZ = 1;
    80ae:	80 e0       	ldi	r24, 0x00	; 0
    80b0:	90 e0       	ldi	r25, 0x00	; 0
    80b2:	a0 e8       	ldi	r26, 0x80	; 128
    80b4:	bf e3       	ldi	r27, 0x3F	; 63
    80b6:	80 93 00 05 	sts	0x0500, r24
    80ba:	90 93 01 05 	sts	0x0501, r25
    80be:	a0 93 02 05 	sts	0x0502, r26
    80c2:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    80c6:	10 92 31 06 	sts	0x0631, r1
    80ca:	10 92 32 06 	sts	0x0632, r1
    80ce:	10 92 33 06 	sts	0x0633, r1
    80d2:	10 92 34 06 	sts	0x0634, r1
	VectorB = 0;
    80d6:	10 92 35 06 	sts	0x0635, r1
    80da:	10 92 36 06 	sts	0x0636, r1
    80de:	10 92 37 06 	sts	0x0637, r1
    80e2:	10 92 38 06 	sts	0x0638, r1
	EulerAngleRoll = 0;
    80e6:	10 92 2d 06 	sts	0x062D, r1
    80ea:	10 92 2e 06 	sts	0x062E, r1
    80ee:	10 92 2f 06 	sts	0x062F, r1
    80f2:	10 92 30 06 	sts	0x0630, r1
	EulerAnglePitch = 0;
    80f6:	10 92 01 06 	sts	0x0601, r1
    80fa:	10 92 02 06 	sts	0x0602, r1
    80fe:	10 92 03 06 	sts	0x0603, r1
    8102:	10 92 04 06 	sts	0x0604, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    8106:	10 92 02 09 	sts	0x0902, r1
    810a:	10 92 01 09 	sts	0x0901, r1
	TCNT1 = 0;			// TCNT1 current time
    810e:	10 92 85 00 	sts	0x0085, r1
    8112:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    8116:	10 92 30 05 	sts	0x0530, r1
    811a:	10 92 2f 05 	sts	0x052F, r1
    811e:	08 95       	ret

00008120 <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    8120:	cf 93       	push	r28
    8122:	df 93       	push	r29
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    8124:	80 e3       	ldi	r24, 0x30	; 48
    8126:	81 b9       	out	0x01, r24	; 1
	DDRB		= 0x0A;		// Port B
    8128:	8a e0       	ldi	r24, 0x0A	; 10
    812a:	84 b9       	out	0x04, r24	; 4
	DDRC		= 0xFC;		// Port C
    812c:	8c ef       	ldi	r24, 0xFC	; 252
    812e:	87 b9       	out	0x07, r24	; 7
	DDRD		= 0xF2;		// Port D
    8130:	82 ef       	ldi	r24, 0xF2	; 242
    8132:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    8134:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    8136:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    8138:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    813a:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    813c:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    813e:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    8140:	85 ef       	ldi	r24, 0xF5	; 245
    8142:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    8144:	8c e0       	ldi	r24, 0x0C	; 12
    8146:	89 b9       	out	0x09, r24	; 9
	// 5 low pulses: DSM2 2048/11ms
	// 7 low pulses: DSMX 1024/22ms
	// 9 low pulses: DSMX 2048/11ms
	//***********************************************************

	PIND	= 0x0C;			// Release RX pull up on PD0
    8148:	89 b9       	out	0x09, r24	; 9
    814a:	2f e5       	ldi	r18, 0x5F	; 95
    814c:	88 ed       	ldi	r24, 0xD8	; 216
    814e:	93 e0       	ldi	r25, 0x03	; 3
    8150:	21 50       	subi	r18, 0x01	; 1
    8152:	80 40       	sbci	r24, 0x00	; 0
    8154:	90 40       	sbci	r25, 0x00	; 0
    8156:	e1 f7       	brne	.-8      	; 0x8150 <init+0x30>
    8158:	00 c0       	rjmp	.+0      	; 0x815a <init+0x3a>
    815a:	00 00       	nop
							// Tweak until bind pulses about 68ms after power-up		
		
	// Bind as master if any single button pressed.
	// NB: Have to wait until the button pull-ups rise before testing for a button press.
	// Button 1
	if ((PINB & 0xf0) == 0x70)
    815c:	83 b1       	in	r24, 0x03	; 3
    815e:	80 7f       	andi	r24, 0xF0	; 240
    8160:	80 37       	cpi	r24, 0x70	; 112
    8162:	29 f4       	brne	.+10     	; 0x816e <init+0x4e>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    8164:	83 ef       	ldi	r24, 0xF3	; 243
    8166:	8a b9       	out	0x0a, r24	; 10
		bind_master(3);
    8168:	83 e0       	ldi	r24, 0x03	; 3
    816a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <bind_master>
		
	}
	// Button 2	
	if ((PINB & 0xf0) == 0xb0)
    816e:	83 b1       	in	r24, 0x03	; 3
    8170:	80 7f       	andi	r24, 0xF0	; 240
    8172:	80 3b       	cpi	r24, 0xB0	; 176
    8174:	29 f4       	brne	.+10     	; 0x8180 <init+0x60>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    8176:	83 ef       	ldi	r24, 0xF3	; 243
    8178:	8a b9       	out	0x0a, r24	; 10
		bind_master(5);
    817a:	85 e0       	ldi	r24, 0x05	; 5
    817c:	0e 94 11 16 	call	0x2c22	; 0x2c22 <bind_master>
	}
	// Button 3	
	if ((PINB & 0xf0) == 0xd0)
    8180:	83 b1       	in	r24, 0x03	; 3
    8182:	80 7f       	andi	r24, 0xF0	; 240
    8184:	80 3d       	cpi	r24, 0xD0	; 208
    8186:	29 f4       	brne	.+10     	; 0x8192 <init+0x72>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    8188:	83 ef       	ldi	r24, 0xF3	; 243
    818a:	8a b9       	out	0x0a, r24	; 10
		bind_master(7);
    818c:	87 e0       	ldi	r24, 0x07	; 7
    818e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <bind_master>
	}
	
	// Button 4
	if ((PINB & 0xf0) == 0xE0)
    8192:	83 b1       	in	r24, 0x03	; 3
    8194:	80 7f       	andi	r24, 0xF0	; 240
    8196:	80 3e       	cpi	r24, 0xE0	; 224
    8198:	29 f4       	brne	.+10     	; 0x81a4 <init+0x84>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    819a:	83 ef       	ldi	r24, 0xF3	; 243
    819c:	8a b9       	out	0x0a, r24	; 10
		bind_master(9);
    819e:	89 e0       	ldi	r24, 0x09	; 9
    81a0:	0e 94 11 16 	call	0x2c22	; 0x2c22 <bind_master>
	}
	
	DDRD	= 0xF2;			// Reset Port D directions
    81a4:	82 ef       	ldi	r24, 0xF2	; 242
    81a6:	8a b9       	out	0x0a, r24	; 10
	PIND	= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    81a8:	8d e0       	ldi	r24, 0x0D	; 13
    81aa:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    81ac:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    81ae:	85 e0       	ldi	r24, 0x05	; 5
    81b0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    81b2:	80 91 6e 00 	lds	r24, 0x006E
    81b6:	81 60       	ori	r24, 0x01	; 1
    81b8:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    81bc:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    81be:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    81c2:	80 91 81 00 	lds	r24, 0x0081
    81c6:	82 60       	ori	r24, 0x02	; 2
    81c8:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    81cc:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    81d0:	87 e0       	ldi	r24, 0x07	; 7
    81d2:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    81d6:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    81da:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    81dc:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    81e0:	9a e0       	ldi	r25, 0x0A	; 10
    81e2:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    81e6:	9f e0       	ldi	r25, 0x0F	; 15
    81e8:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    81ea:	95 e1       	ldi	r25, 0x15	; 21
    81ec:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    81f0:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    81f2:	10 92 ee 08 	sts	0x08EE, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    81f6:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <Initial_EEPROM_Config_Load>
    81fa:	c8 2f       	mov	r28, r24
    81fc:	20 e0       	ldi	r18, 0x00	; 0
    81fe:	30 e0       	ldi	r19, 0x00	; 0
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		RxChannel[i] = 3750;
    8200:	86 ea       	ldi	r24, 0xA6	; 166
    8202:	9e e0       	ldi	r25, 0x0E	; 14
    8204:	f9 01       	movw	r30, r18
    8206:	ee 0f       	add	r30, r30
    8208:	ff 1f       	adc	r31, r31
    820a:	e2 52       	subi	r30, 0x22	; 34
    820c:	f7 4f       	sbci	r31, 0xF7	; 247
    820e:	91 83       	std	Z+1, r25	; 0x01
    8210:	80 83       	st	Z, r24
    8212:	2f 5f       	subi	r18, 0xFF	; 255
    8214:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    8216:	28 30       	cpi	r18, 0x08	; 8
    8218:	31 05       	cpc	r19, r1
    821a:	a1 f7       	brne	.-24     	; 0x8204 <init+0xe4>
	{
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    821c:	84 ec       	ldi	r24, 0xC4	; 196
    821e:	99 e0       	ldi	r25, 0x09	; 9
    8220:	90 93 df 08 	sts	0x08DF, r25
    8224:	80 93 de 08 	sts	0x08DE, r24
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    8228:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    822c:	0e 94 67 36 	call	0x6cce	; 0x6cce <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((BUTTON1 == 0) && (BUTTON4 == 0))
    8230:	1f 99       	sbic	0x03, 7	; 3
    8232:	72 c0       	rjmp	.+228    	; 0x8318 <init+0x1f8>
    8234:	1c 99       	sbic	0x03, 4	; 3
    8236:	70 c0       	rjmp	.+224    	; 0x8318 <init+0x1f8>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    8238:	80 ec       	ldi	r24, 0xC0	; 192
    823a:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
		clear_buffer(buffer);
    823e:	80 e0       	ldi	r24, 0x00	; 0
    8240:	91 e0       	ldi	r25, 0x01	; 1
    8242:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    8246:	29 e1       	ldi	r18, 0x19	; 25
    8248:	30 e0       	ldi	r19, 0x00	; 0
    824a:	4a e0       	ldi	r20, 0x0A	; 10
    824c:	50 e0       	ldi	r21, 0x00	; 0
    824e:	6f ed       	ldi	r22, 0xDF	; 223
    8250:	74 e0       	ldi	r23, 0x04	; 4
    8252:	8b e3       	ldi	r24, 0x3B	; 59
    8254:	90 e0       	ldi	r25, 0x00	; 0
    8256:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		write_buffer(buffer);
    825a:	80 e0       	ldi	r24, 0x00	; 0
    825c:	91 e0       	ldi	r25, 0x01	; 1
    825e:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
		clear_buffer(buffer);
    8262:	80 e0       	ldi	r24, 0x00	; 0
    8264:	91 e0       	ldi	r25, 0x01	; 1
    8266:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
    826a:	c8 ee       	ldi	r28, 0xE8	; 232
    826c:	d6 e0       	ldi	r29, 0x06	; 6
    826e:	fe 01       	movw	r30, r28
    8270:	20 e0       	ldi	r18, 0x00	; 0
    8272:	30 e0       	ldi	r19, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    8274:	4c ed       	ldi	r20, 0xDC	; 220
    8276:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    8278:	6c e6       	ldi	r22, 0x6C	; 108
    827a:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    827c:	a0 81       	ld	r26, Z
    827e:	c9 01       	movw	r24, r18
    8280:	88 0f       	add	r24, r24
    8282:	99 1f       	adc	r25, r25
    8284:	a2 30       	cpi	r26, 0x02	; 2
    8286:	39 f4       	brne	.+14     	; 0x8296 <init+0x176>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    8288:	dc 01       	movw	r26, r24
    828a:	ab 56       	subi	r26, 0x6B	; 107
    828c:	b6 4f       	sbci	r27, 0xF6	; 246
    828e:	11 96       	adiw	r26, 0x01	; 1
    8290:	7c 93       	st	X, r23
    8292:	6e 93       	st	-X, r22
    8294:	06 c0       	rjmp	.+12     	; 0x82a2 <init+0x182>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    8296:	dc 01       	movw	r26, r24
    8298:	ab 56       	subi	r26, 0x6B	; 107
    829a:	b6 4f       	sbci	r27, 0xF6	; 246
    829c:	11 96       	adiw	r26, 0x01	; 1
    829e:	5c 93       	st	X, r21
    82a0:	4e 93       	st	-X, r20
    82a2:	2f 5f       	subi	r18, 0xFF	; 255
    82a4:	3f 4f       	sbci	r19, 0xFF	; 255
    82a6:	b2 96       	adiw	r30, 0x22	; 34
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    82a8:	28 30       	cpi	r18, 0x08	; 8
    82aa:	31 05       	cpc	r19, r1
    82ac:	39 f7       	brne	.-50     	; 0x827c <init+0x15c>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    82ae:	83 b1       	in	r24, 0x03	; 3
    82b0:	80 7f       	andi	r24, 0xF0	; 240
    82b2:	80 36       	cpi	r24, 0x60	; 96
    82b4:	79 f4       	brne	.+30     	; 0x82d4 <init+0x1b4>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    82b6:	6f ef       	ldi	r22, 0xFF	; 255
    82b8:	85 e9       	ldi	r24, 0x95	; 149
    82ba:	99 e0       	ldi	r25, 0x09	; 9
    82bc:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <output_servo_ppm_asm>
    82c0:	2f e7       	ldi	r18, 0x7F	; 127
    82c2:	88 e3       	ldi	r24, 0x38	; 56
    82c4:	91 e0       	ldi	r25, 0x01	; 1
    82c6:	21 50       	subi	r18, 0x01	; 1
    82c8:	80 40       	sbci	r24, 0x00	; 0
    82ca:	90 40       	sbci	r25, 0x00	; 0
    82cc:	e1 f7       	brne	.-8      	; 0x82c6 <init+0x1a6>
    82ce:	00 c0       	rjmp	.+0      	; 0x82d0 <init+0x1b0>
    82d0:	00 00       	nop
    82d2:	ed cf       	rjmp	.-38     	; 0x82ae <init+0x18e>
    82d4:	80 e0       	ldi	r24, 0x00	; 0
    82d6:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    82d8:	2c e4       	ldi	r18, 0x4C	; 76
    82da:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    82dc:	48 81       	ld	r20, Y
    82de:	42 30       	cpi	r20, 0x02	; 2
    82e0:	39 f4       	brne	.+14     	; 0x82f0 <init+0x1d0>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    82e2:	fc 01       	movw	r30, r24
    82e4:	ee 0f       	add	r30, r30
    82e6:	ff 1f       	adc	r31, r31
    82e8:	eb 56       	subi	r30, 0x6B	; 107
    82ea:	f6 4f       	sbci	r31, 0xF6	; 246
    82ec:	31 83       	std	Z+1, r19	; 0x01
    82ee:	20 83       	st	Z, r18
    82f0:	01 96       	adiw	r24, 0x01	; 1
    82f2:	a2 96       	adiw	r28, 0x22	; 34
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    82f4:	88 30       	cpi	r24, 0x08	; 8
    82f6:	91 05       	cpc	r25, r1
    82f8:	89 f7       	brne	.-30     	; 0x82dc <init+0x1bc>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    82fa:	6f ef       	ldi	r22, 0xFF	; 255
    82fc:	85 e9       	ldi	r24, 0x95	; 149
    82fe:	99 e0       	ldi	r25, 0x09	; 9
    8300:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <output_servo_ppm_asm>
    8304:	2f e7       	ldi	r18, 0x7F	; 127
    8306:	88 e3       	ldi	r24, 0x38	; 56
    8308:	91 e0       	ldi	r25, 0x01	; 1
    830a:	21 50       	subi	r18, 0x01	; 1
    830c:	80 40       	sbci	r24, 0x00	; 0
    830e:	90 40       	sbci	r25, 0x00	; 0
    8310:	e1 f7       	brne	.-8      	; 0x830a <init+0x1ea>
    8312:	00 c0       	rjmp	.+0      	; 0x8314 <init+0x1f4>
    8314:	00 00       	nop
    8316:	f1 cf       	rjmp	.-30     	; 0x82fa <init+0x1da>
    8318:	2f e7       	ldi	r18, 0x7F	; 127
    831a:	8f e4       	ldi	r24, 0x4F	; 79
    831c:	92 e1       	ldi	r25, 0x12	; 18
    831e:	21 50       	subi	r18, 0x01	; 1
    8320:	80 40       	sbci	r24, 0x00	; 0
    8322:	90 40       	sbci	r25, 0x00	; 0
    8324:	e1 f7       	brne	.-8      	; 0x831e <init+0x1fe>
    8326:	00 c0       	rjmp	.+0      	; 0x8328 <init+0x208>
    8328:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((BUTTON2 == 0) && (BUTTON3 == 0))
    832a:	1e 99       	sbic	0x03, 6	; 3
    832c:	2c c0       	rjmp	.+88     	; 0x8386 <init+0x266>
    832e:	1d 99       	sbic	0x03, 5	; 3
    8330:	2a c0       	rjmp	.+84     	; 0x8386 <init+0x266>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    8332:	80 ec       	ldi	r24, 0xC0	; 192
    8334:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
		clear_buffer(buffer);
    8338:	80 e0       	ldi	r24, 0x00	; 0
    833a:	91 e0       	ldi	r25, 0x01	; 1
    833c:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    8340:	29 e1       	ldi	r18, 0x19	; 25
    8342:	30 e0       	ldi	r19, 0x00	; 0
    8344:	48 e2       	ldi	r20, 0x28	; 40
    8346:	50 e0       	ldi	r21, 0x00	; 0
    8348:	6f ed       	ldi	r22, 0xDF	; 223
    834a:	74 e0       	ldi	r23, 0x04	; 4
    834c:	86 e0       	ldi	r24, 0x06	; 6
    834e:	91 e0       	ldi	r25, 0x01	; 1
    8350:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		write_buffer(buffer);
    8354:	80 e0       	ldi	r24, 0x00	; 0
    8356:	91 e0       	ldi	r25, 0x01	; 1
    8358:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
		clear_buffer(buffer);
    835c:	80 e0       	ldi	r24, 0x00	; 0
    835e:	91 e0       	ldi	r25, 0x01	; 1
    8360:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    8364:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <Set_EEPROM_Default_Config>

		// Save settings
		Save_Config_to_EEPROM();
    8368:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    836c:	80 91 da 06 	lds	r24, 0x06DA
    8370:	0e 94 01 36 	call	0x6c02	; 0x6c02 <st7565_set_brightness>
    8374:	2f e7       	ldi	r18, 0x7F	; 127
    8376:	84 e8       	ldi	r24, 0x84	; 132
    8378:	9e e1       	ldi	r25, 0x1E	; 30
    837a:	21 50       	subi	r18, 0x01	; 1
    837c:	80 40       	sbci	r24, 0x00	; 0
    837e:	90 40       	sbci	r25, 0x00	; 0
    8380:	e1 f7       	brne	.-8      	; 0x837a <init+0x25a>
    8382:	00 c0       	rjmp	.+0      	; 0x8384 <init+0x264>
    8384:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    8386:	cc 23       	and	r28, r28
    8388:	21 f1       	breq	.+72     	; 0x83d2 <init+0x2b2>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    838a:	80 ec       	ldi	r24, 0xC0	; 192
    838c:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
		clear_buffer(buffer);
    8390:	80 e0       	ldi	r24, 0x00	; 0
    8392:	91 e0       	ldi	r25, 0x01	; 1
    8394:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    8398:	2d e0       	ldi	r18, 0x0D	; 13
    839a:	30 e0       	ldi	r19, 0x00	; 0
    839c:	4e e1       	ldi	r20, 0x1E	; 30
    839e:	50 e0       	ldi	r21, 0x00	; 0
    83a0:	6f ed       	ldi	r22, 0xDF	; 223
    83a2:	74 e0       	ldi	r23, 0x04	; 4
    83a4:	83 e0       	ldi	r24, 0x03	; 3
    83a6:	91 e0       	ldi	r25, 0x01	; 1
    83a8:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    83ac:	25 e2       	ldi	r18, 0x25	; 37
    83ae:	30 e0       	ldi	r19, 0x00	; 0
    83b0:	41 e2       	ldi	r20, 0x21	; 33
    83b2:	50 e0       	ldi	r21, 0x00	; 0
    83b4:	6f ed       	ldi	r22, 0xDF	; 223
    83b6:	74 e0       	ldi	r23, 0x04	; 4
    83b8:	84 e0       	ldi	r24, 0x04	; 4
    83ba:	91 e0       	ldi	r25, 0x01	; 1
    83bc:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		write_buffer(buffer);
    83c0:	80 e0       	ldi	r24, 0x00	; 0
    83c2:	91 e0       	ldi	r25, 0x01	; 1
    83c4:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
		clear_buffer(buffer);		
    83c8:	80 e0       	ldi	r24, 0x00	; 0
    83ca:	91 e0       	ldi	r25, 0x01	; 1
    83cc:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
    83d0:	04 c0       	rjmp	.+8      	; 0x83da <init+0x2ba>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    83d2:	80 e0       	ldi	r24, 0x00	; 0
    83d4:	91 e0       	ldi	r25, 0x01	; 1
    83d6:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
    83da:	2f ef       	ldi	r18, 0xFF	; 255
    83dc:	88 e0       	ldi	r24, 0x08	; 8
    83de:	9d e3       	ldi	r25, 0x3D	; 61
    83e0:	21 50       	subi	r18, 0x01	; 1
    83e2:	80 40       	sbci	r24, 0x00	; 0
    83e4:	90 40       	sbci	r25, 0x00	; 0
    83e6:	e1 f7       	brne	.-8      	; 0x83e0 <init+0x2c0>
    83e8:	00 c0       	rjmp	.+0      	; 0x83ea <init+0x2ca>
    83ea:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    83ec:	80 e0       	ldi	r24, 0x00	; 0
    83ee:	91 e0       	ldi	r25, 0x01	; 1
    83f0:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
	write_buffer(buffer);
    83f4:	80 e0       	ldi	r24, 0x00	; 0
    83f6:	91 e0       	ldi	r25, 0x01	; 1
    83f8:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    83fc:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    8400:	0e 94 55 6b 	call	0xd6aa	; 0xd6aa <i2c_init>
	init_i2c_gyros();
    8404:	0e 94 99 3b 	call	0x7732	; 0x7732 <init_i2c_gyros>
	init_i2c_accs();
    8408:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    840c:	80 e0       	ldi	r24, 0x00	; 0
    840e:	91 e0       	ldi	r25, 0x01	; 1
    8410:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    8414:	80 ec       	ldi	r24, 0xC0	; 192
    8416:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    841a:	29 e1       	ldi	r18, 0x19	; 25
    841c:	30 e0       	ldi	r19, 0x00	; 0
    841e:	42 e1       	ldi	r20, 0x12	; 18
    8420:	50 e0       	ldi	r21, 0x00	; 0
    8422:	6f ed       	ldi	r22, 0xDF	; 223
    8424:	74 e0       	ldi	r23, 0x04	; 4
    8426:	87 e0       	ldi	r24, 0x07	; 7
    8428:	91 e0       	ldi	r25, 0x01	; 1
    842a:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
	write_buffer(buffer);	
    842e:	80 e0       	ldi	r24, 0x00	; 0
    8430:	91 e0       	ldi	r25, 0x01	; 1
    8432:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
	clear_buffer(buffer);
    8436:	80 e0       	ldi	r24, 0x00	; 0
    8438:	91 e0       	ldi	r25, 0x01	; 1
    843a:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    843e:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    8442:	0e 94 14 48 	call	0x9028	; 0x9028 <init_int>
	init_uart();							// Initialise UART
    8446:	0e 94 3a 6c 	call	0xd874	; 0xd874 <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    844a:	0e 94 ba 3a 	call	0x7574	; 0x7574 <CalibrateGyrosSlow>
    844e:	81 11       	cpse	r24, r1
    8450:	27 c0       	rjmp	.+78     	; 0x84a0 <init+0x380>
	{
		clear_buffer(buffer);
    8452:	80 e0       	ldi	r24, 0x00	; 0
    8454:	91 e0       	ldi	r25, 0x01	; 1
    8456:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    845a:	29 e1       	ldi	r18, 0x19	; 25
    845c:	30 e0       	ldi	r19, 0x00	; 0
    845e:	49 e1       	ldi	r20, 0x19	; 25
    8460:	50 e0       	ldi	r21, 0x00	; 0
    8462:	6f ed       	ldi	r22, 0xDF	; 223
    8464:	74 e0       	ldi	r23, 0x04	; 4
    8466:	8d e3       	ldi	r24, 0x3D	; 61
    8468:	90 e0       	ldi	r25, 0x00	; 0
    846a:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		write_buffer(buffer);
    846e:	80 e0       	ldi	r24, 0x00	; 0
    8470:	91 e0       	ldi	r25, 0x01	; 1
    8472:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
    8476:	2f ef       	ldi	r18, 0xFF	; 255
    8478:	88 e0       	ldi	r24, 0x08	; 8
    847a:	9d e3       	ldi	r25, 0x3D	; 61
    847c:	21 50       	subi	r18, 0x01	; 1
    847e:	80 40       	sbci	r24, 0x00	; 0
    8480:	90 40       	sbci	r25, 0x00	; 0
    8482:	e1 f7       	brne	.-8      	; 0x847c <init+0x35c>
    8484:	00 c0       	rjmp	.+0      	; 0x8486 <init+0x366>
    8486:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    8488:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    848a:	98 e0       	ldi	r25, 0x08	; 8
    848c:	88 e1       	ldi	r24, 0x18	; 24
    848e:	0f b6       	in	r0, 0x3f	; 63
    8490:	f8 94       	cli
    8492:	a8 95       	wdr
    8494:	80 93 60 00 	sts	0x0060, r24
    8498:	0f be       	out	0x3f, r0	; 63
    849a:	90 93 60 00 	sts	0x0060, r25
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
		while(1);							// Wait for reboot
    849e:	ff cf       	rjmp	.-2      	; 0x849e <init+0x37e>
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    84a0:	0e 94 bb 6c 	call	0xd976	; 0xd976 <GetVbat>
    84a4:	90 93 47 05 	sts	0x0547, r25
    84a8:	80 93 46 05 	sts	0x0546, r24
	UpdateLimits();							// Update travel and trigger limits
    84ac:	0e 94 32 57 	call	0xae64	; 0xae64 <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    84b0:	80 91 db 06 	lds	r24, 0x06DB
    84b4:	81 30       	cpi	r24, 0x01	; 1
    84b6:	29 f4       	brne	.+10     	; 0x84c2 <init+0x3a2>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    84b8:	80 91 35 05 	lds	r24, 0x0535
    84bc:	84 60       	ori	r24, 0x04	; 4
    84be:	80 93 35 05 	sts	0x0535, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    84c2:	80 91 ee 08 	lds	r24, 0x08EE
    84c6:	88 23       	and	r24, r24
    84c8:	69 f0       	breq	.+26     	; 0x84e4 <init+0x3c4>
	{
		RxGetChannels();
    84ca:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE) // THROTTLEIDLE = 50
    84ce:	80 91 81 09 	lds	r24, 0x0981
    84d2:	90 91 82 09 	lds	r25, 0x0982
    84d6:	c3 97       	sbiw	r24, 0x33	; 51
    84d8:	2c f0       	brlt	.+10     	; 0x84e4 <init+0x3c4>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    84da:	80 91 35 05 	lds	r24, 0x0535
    84de:	81 60       	ori	r24, 0x01	; 1
    84e0:	80 93 35 05 	sts	0x0535, r24
		}
	}

	// Reset IMU
	reset_IMU();
    84e4:	0e 94 47 40 	call	0x808e	; 0x808e <reset_IMU>

	// Beep that init is complete
	// Check buzzer mode first
	if (Config.Buzzer == ON)
    84e8:	80 91 e3 06 	lds	r24, 0x06E3
    84ec:	81 30       	cpi	r24, 0x01	; 1
    84ee:	59 f4       	brne	.+22     	; 0x8506 <init+0x3e6>
	{
		LVA = 1;
    84f0:	29 9a       	sbi	0x05, 1	; 5
    84f2:	2f e9       	ldi	r18, 0x9F	; 159
    84f4:	86 e8       	ldi	r24, 0x86	; 134
    84f6:	91 e0       	ldi	r25, 0x01	; 1
    84f8:	21 50       	subi	r18, 0x01	; 1
    84fa:	80 40       	sbci	r24, 0x00	; 0
    84fc:	90 40       	sbci	r25, 0x00	; 0
    84fe:	e1 f7       	brne	.-8      	; 0x84f8 <init+0x3d8>
    8500:	00 c0       	rjmp	.+0      	; 0x8502 <init+0x3e2>
    8502:	00 00       	nop
		_delay_ms(25);
		LVA = 0;
    8504:	29 98       	cbi	0x05, 1	; 5

#ifdef ERROR_LOG	
	// Log reboot
	add_log(REBOOT);
#endif
} // init()
    8506:	df 91       	pop	r29
    8508:	cf 91       	pop	r28
    850a:	08 95       	ret

0000850c <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    850c:	1f 92       	push	r1
    850e:	0f 92       	push	r0
    8510:	0f b6       	in	r0, 0x3f	; 63
    8512:	0f 92       	push	r0
    8514:	11 24       	eor	r1, r1
    8516:	8f 93       	push	r24
    8518:	9f 93       	push	r25
	TMR0_counter++;
    851a:	80 91 01 09 	lds	r24, 0x0901
    851e:	90 91 02 09 	lds	r25, 0x0902
    8522:	01 96       	adiw	r24, 0x01	; 1
    8524:	90 93 02 09 	sts	0x0902, r25
    8528:	80 93 01 09 	sts	0x0901, r24
}
    852c:	9f 91       	pop	r25
    852e:	8f 91       	pop	r24
    8530:	0f 90       	pop	r0
    8532:	0f be       	out	0x3f, r0	; 63
    8534:	0f 90       	pop	r0
    8536:	1f 90       	pop	r1
    8538:	18 95       	reti

0000853a <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    853a:	1f 92       	push	r1
    853c:	0f 92       	push	r0
    853e:	0f b6       	in	r0, 0x3f	; 63
    8540:	0f 92       	push	r0
    8542:	11 24       	eor	r1, r1
    8544:	2f 93       	push	r18
    8546:	3f 93       	push	r19
    8548:	8f 93       	push	r24
    854a:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    854c:	80 91 19 09 	lds	r24, 0x0919
    8550:	88 23       	and	r24, r24
    8552:	19 f0       	breq	.+6      	; 0x855a <__vector_2+0x20>
    8554:	81 e0       	ldi	r24, 0x01	; 1
    8556:	80 93 1a 09 	sts	0x091A, r24

	if (RX_ROLL)	// Rising
    855a:	4b 9b       	sbis	0x09, 3	; 9
    855c:	09 c0       	rjmp	.+18     	; 0x8570 <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    855e:	80 91 84 00 	lds	r24, 0x0084
    8562:	90 91 85 00 	lds	r25, 0x0085
    8566:	90 93 06 09 	sts	0x0906, r25
    856a:	80 93 05 09 	sts	0x0905, r24
    856e:	1e c0       	rjmp	.+60     	; 0x85ac <__vector_2+0x72>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    8570:	80 91 84 00 	lds	r24, 0x0084
    8574:	90 91 85 00 	lds	r25, 0x0085
    8578:	20 91 05 09 	lds	r18, 0x0905
    857c:	30 91 06 09 	lds	r19, 0x0906
    8580:	82 1b       	sub	r24, r18
    8582:	93 0b       	sbc	r25, r19
    8584:	90 93 e1 08 	sts	0x08E1, r25
    8588:	80 93 e0 08 	sts	0x08E0, r24
		if (Config.PWM_Sync == AILERON) 
    858c:	80 91 64 06 	lds	r24, 0x0664
    8590:	81 30       	cpi	r24, 0x01	; 1
    8592:	61 f4       	brne	.+24     	; 0x85ac <__vector_2+0x72>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    8594:	80 93 ee 08 	sts	0x08EE, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    8598:	80 91 b2 00 	lds	r24, 0x00B2
    859c:	80 93 2c 05 	sts	0x052C, r24
			RC_Timeout = 0;
    85a0:	10 92 2b 05 	sts	0x052B, r1
    85a4:	10 92 2a 05 	sts	0x052A, r1
			Overdue = false;
    85a8:	10 92 2e 05 	sts	0x052E, r1
		}
	}
}
    85ac:	9f 91       	pop	r25
    85ae:	8f 91       	pop	r24
    85b0:	3f 91       	pop	r19
    85b2:	2f 91       	pop	r18
    85b4:	0f 90       	pop	r0
    85b6:	0f be       	out	0x3f, r0	; 63
    85b8:	0f 90       	pop	r0
    85ba:	1f 90       	pop	r1
    85bc:	18 95       	reti

000085be <__vector_1>:

ISR(INT0_vect)
{
    85be:	1f 92       	push	r1
    85c0:	0f 92       	push	r0
    85c2:	0f b6       	in	r0, 0x3f	; 63
    85c4:	0f 92       	push	r0
    85c6:	11 24       	eor	r1, r1
    85c8:	2f 93       	push	r18
    85ca:	3f 93       	push	r19
    85cc:	8f 93       	push	r24
    85ce:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    85d0:	80 91 19 09 	lds	r24, 0x0919
    85d4:	88 23       	and	r24, r24
    85d6:	19 f0       	breq	.+6      	; 0x85de <__vector_1+0x20>
    85d8:	81 e0       	ldi	r24, 0x01	; 1
    85da:	80 93 1a 09 	sts	0x091A, r24

	if (RX_PITCH)	// Rising 
    85de:	4a 9b       	sbis	0x09, 2	; 9
    85e0:	09 c0       	rjmp	.+18     	; 0x85f4 <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    85e2:	80 91 84 00 	lds	r24, 0x0084
    85e6:	90 91 85 00 	lds	r25, 0x0085
    85ea:	90 93 08 09 	sts	0x0908, r25
    85ee:	80 93 07 09 	sts	0x0907, r24
    85f2:	1f c0       	rjmp	.+62     	; 0x8632 <__vector_1+0x74>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    85f4:	80 91 84 00 	lds	r24, 0x0084
    85f8:	90 91 85 00 	lds	r25, 0x0085
    85fc:	20 91 07 09 	lds	r18, 0x0907
    8600:	30 91 08 09 	lds	r19, 0x0908
    8604:	82 1b       	sub	r24, r18
    8606:	93 0b       	sbc	r25, r19
    8608:	90 93 e3 08 	sts	0x08E3, r25
    860c:	80 93 e2 08 	sts	0x08E2, r24
		if (Config.PWM_Sync == ELEVATOR) 
    8610:	80 91 64 06 	lds	r24, 0x0664
    8614:	82 30       	cpi	r24, 0x02	; 2
    8616:	69 f4       	brne	.+26     	; 0x8632 <__vector_1+0x74>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    8618:	81 e0       	ldi	r24, 0x01	; 1
    861a:	80 93 ee 08 	sts	0x08EE, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    861e:	80 91 b2 00 	lds	r24, 0x00B2
    8622:	80 93 2c 05 	sts	0x052C, r24
			RC_Timeout = 0;
    8626:	10 92 2b 05 	sts	0x052B, r1
    862a:	10 92 2a 05 	sts	0x052A, r1
			Overdue = false;
    862e:	10 92 2e 05 	sts	0x052E, r1
		}
	}
}
    8632:	9f 91       	pop	r25
    8634:	8f 91       	pop	r24
    8636:	3f 91       	pop	r19
    8638:	2f 91       	pop	r18
    863a:	0f 90       	pop	r0
    863c:	0f be       	out	0x3f, r0	; 63
    863e:	0f 90       	pop	r0
    8640:	1f 90       	pop	r1
    8642:	18 95       	reti

00008644 <__vector_7>:

ISR(PCINT3_vect)
{
    8644:	1f 92       	push	r1
    8646:	0f 92       	push	r0
    8648:	0f b6       	in	r0, 0x3f	; 63
    864a:	0f 92       	push	r0
    864c:	11 24       	eor	r1, r1
    864e:	2f 93       	push	r18
    8650:	3f 93       	push	r19
    8652:	8f 93       	push	r24
    8654:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    8656:	80 91 19 09 	lds	r24, 0x0919
    865a:	88 23       	and	r24, r24
    865c:	19 f0       	breq	.+6      	; 0x8664 <__vector_7+0x20>
    865e:	81 e0       	ldi	r24, 0x01	; 1
    8660:	80 93 1a 09 	sts	0x091A, r24
		
	if (RX_COLL)	// Rising
    8664:	48 9b       	sbis	0x09, 0	; 9
    8666:	09 c0       	rjmp	.+18     	; 0x867a <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    8668:	80 91 84 00 	lds	r24, 0x0084
    866c:	90 91 85 00 	lds	r25, 0x0085
    8670:	90 93 04 09 	sts	0x0904, r25
    8674:	80 93 03 09 	sts	0x0903, r24
    8678:	1f c0       	rjmp	.+62     	; 0x86b8 <__vector_7+0x74>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    867a:	80 91 84 00 	lds	r24, 0x0084
    867e:	90 91 85 00 	lds	r25, 0x0085
    8682:	20 91 03 09 	lds	r18, 0x0903
    8686:	30 91 04 09 	lds	r19, 0x0904
    868a:	82 1b       	sub	r24, r18
    868c:	93 0b       	sbc	r25, r19
    868e:	90 93 df 08 	sts	0x08DF, r25
    8692:	80 93 de 08 	sts	0x08DE, r24
		if (Config.PWM_Sync == THROTTLE) 
    8696:	80 91 64 06 	lds	r24, 0x0664
    869a:	81 11       	cpse	r24, r1
    869c:	0d c0       	rjmp	.+26     	; 0x86b8 <__vector_7+0x74>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    869e:	81 e0       	ldi	r24, 0x01	; 1
    86a0:	80 93 ee 08 	sts	0x08EE, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    86a4:	80 91 b2 00 	lds	r24, 0x00B2
    86a8:	80 93 2c 05 	sts	0x052C, r24
			RC_Timeout = 0;
    86ac:	10 92 2b 05 	sts	0x052B, r1
    86b0:	10 92 2a 05 	sts	0x052A, r1
			Overdue = false;
    86b4:	10 92 2e 05 	sts	0x052E, r1
		}
	}
}
    86b8:	9f 91       	pop	r25
    86ba:	8f 91       	pop	r24
    86bc:	3f 91       	pop	r19
    86be:	2f 91       	pop	r18
    86c0:	0f 90       	pop	r0
    86c2:	0f be       	out	0x3f, r0	; 63
    86c4:	0f 90       	pop	r0
    86c6:	1f 90       	pop	r1
    86c8:	18 95       	reti

000086ca <__vector_5>:


ISR(PCINT1_vect)
{
    86ca:	1f 92       	push	r1
    86cc:	0f 92       	push	r0
    86ce:	0f b6       	in	r0, 0x3f	; 63
    86d0:	0f 92       	push	r0
    86d2:	11 24       	eor	r1, r1
    86d4:	2f 93       	push	r18
    86d6:	3f 93       	push	r19
    86d8:	8f 93       	push	r24
    86da:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    86dc:	80 91 19 09 	lds	r24, 0x0919
    86e0:	88 23       	and	r24, r24
    86e2:	19 f0       	breq	.+6      	; 0x86ea <__vector_5+0x20>
    86e4:	81 e0       	ldi	r24, 0x01	; 1
    86e6:	80 93 1a 09 	sts	0x091A, r24

	if (RX_AUX)	// Rising
    86ea:	18 9b       	sbis	0x03, 0	; 3
    86ec:	09 c0       	rjmp	.+18     	; 0x8700 <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    86ee:	80 91 84 00 	lds	r24, 0x0084
    86f2:	90 91 85 00 	lds	r25, 0x0085
    86f6:	90 93 0c 09 	sts	0x090C, r25
    86fa:	80 93 0b 09 	sts	0x090B, r24
    86fe:	1f c0       	rjmp	.+62     	; 0x873e <__vector_5+0x74>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    8700:	80 91 84 00 	lds	r24, 0x0084
    8704:	90 91 85 00 	lds	r25, 0x0085
    8708:	20 91 0b 09 	lds	r18, 0x090B
    870c:	30 91 0c 09 	lds	r19, 0x090C
    8710:	82 1b       	sub	r24, r18
    8712:	93 0b       	sbc	r25, r19
    8714:	90 93 e7 08 	sts	0x08E7, r25
    8718:	80 93 e6 08 	sts	0x08E6, r24
		if (Config.PWM_Sync == GEAR) 
    871c:	80 91 64 06 	lds	r24, 0x0664
    8720:	84 30       	cpi	r24, 0x04	; 4
    8722:	69 f4       	brne	.+26     	; 0x873e <__vector_5+0x74>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    8724:	81 e0       	ldi	r24, 0x01	; 1
    8726:	80 93 ee 08 	sts	0x08EE, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    872a:	80 91 b2 00 	lds	r24, 0x00B2
    872e:	80 93 2c 05 	sts	0x052C, r24
			RC_Timeout = 0;
    8732:	10 92 2b 05 	sts	0x052B, r1
    8736:	10 92 2a 05 	sts	0x052A, r1
			Overdue = false;
    873a:	10 92 2e 05 	sts	0x052E, r1
		}
	}
}
    873e:	9f 91       	pop	r25
    8740:	8f 91       	pop	r24
    8742:	3f 91       	pop	r19
    8744:	2f 91       	pop	r18
    8746:	0f 90       	pop	r0
    8748:	0f be       	out	0x3f, r0	; 63
    874a:	0f 90       	pop	r0
    874c:	1f 90       	pop	r1
    874e:	18 95       	reti

00008750 <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    8750:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    8752:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    8754:	80 91 84 00 	lds	r24, 0x0084
    8758:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    875c:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    875e:	08 95       	ret

00008760 <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    8760:	1f 92       	push	r1
    8762:	0f 92       	push	r0
    8764:	0f b6       	in	r0, 0x3f	; 63
    8766:	0f 92       	push	r0
    8768:	11 24       	eor	r1, r1
    876a:	2f 93       	push	r18
    876c:	3f 93       	push	r19
    876e:	4f 93       	push	r20
    8770:	5f 93       	push	r21
    8772:	6f 93       	push	r22
    8774:	7f 93       	push	r23
    8776:	8f 93       	push	r24
    8778:	9f 93       	push	r25
    877a:	af 93       	push	r26
    877c:	bf 93       	push	r27
    877e:	ef 93       	push	r30
    8780:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    8782:	80 91 19 09 	lds	r24, 0x0919
    8786:	88 23       	and	r24, r24
    8788:	19 f0       	breq	.+6      	; 0x8790 <__vector_3+0x30>
    878a:	81 e0       	ldi	r24, 0x01	; 1
    878c:	80 93 1a 09 	sts	0x091A, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    8790:	0e 94 a8 43 	call	0x8750	; 0x8750 <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    8794:	20 91 62 06 	lds	r18, 0x0662
    8798:	22 23       	and	r18, r18
    879a:	11 f1       	breq	.+68     	; 0x87e0 <__vector_3+0x80>
	{
		if (RX_YAW)	// Rising
    879c:	1a 9b       	sbis	0x03, 2	; 3
    879e:	05 c0       	rjmp	.+10     	; 0x87aa <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    87a0:	90 93 0a 09 	sts	0x090A, r25
    87a4:	80 93 09 09 	sts	0x0909, r24
    87a8:	98 c0       	rjmp	.+304    	; 0x88da <__vector_3+0x17a>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    87aa:	20 91 09 09 	lds	r18, 0x0909
    87ae:	30 91 0a 09 	lds	r19, 0x090A
    87b2:	82 1b       	sub	r24, r18
    87b4:	93 0b       	sbc	r25, r19
    87b6:	90 93 e5 08 	sts	0x08E5, r25
    87ba:	80 93 e4 08 	sts	0x08E4, r24
			if (Config.PWM_Sync == RUDDER) 
    87be:	80 91 64 06 	lds	r24, 0x0664
    87c2:	83 30       	cpi	r24, 0x03	; 3
    87c4:	09 f0       	breq	.+2      	; 0x87c8 <__vector_3+0x68>
    87c6:	89 c0       	rjmp	.+274    	; 0x88da <__vector_3+0x17a>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    87c8:	81 e0       	ldi	r24, 0x01	; 1
    87ca:	80 93 ee 08 	sts	0x08EE, r24
				Servo_TCNT2 = TCNT2;				// Reset signal loss timer and Overdue state 
    87ce:	80 91 b2 00 	lds	r24, 0x00B2
    87d2:	80 93 2c 05 	sts	0x052C, r24
				RC_Timeout = 0;
    87d6:	10 92 2b 05 	sts	0x052B, r1
    87da:	10 92 2a 05 	sts	0x052A, r1
    87de:	7b c0       	rjmp	.+246    	; 0x88d6 <__vector_3+0x176>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    87e0:	1a 99       	sbic	0x03, 2	; 3
    87e2:	7b c0       	rjmp	.+246    	; 0x88da <__vector_3+0x17a>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    87e4:	20 91 17 09 	lds	r18, 0x0917
    87e8:	30 91 18 09 	lds	r19, 0x0918
    87ec:	ac 01       	movw	r20, r24
    87ee:	42 1b       	sub	r20, r18
    87f0:	53 0b       	sbc	r21, r19
    87f2:	9a 01       	movw	r18, r20
    87f4:	2f 35       	cpi	r18, 0x5F	; 95
    87f6:	3a 41       	sbci	r19, 0x1A	; 26
    87f8:	58 f4       	brcc	.+22     	; 0x8810 <__vector_3+0xb0>
    87fa:	20 91 17 09 	lds	r18, 0x0917
    87fe:	30 91 18 09 	lds	r19, 0x0918
    8802:	ac 01       	movw	r20, r24
    8804:	42 1b       	sub	r20, r18
    8806:	53 0b       	sbc	r21, r19
    8808:	9a 01       	movw	r18, r20
    880a:	2e 3e       	cpi	r18, 0xEE	; 238
    880c:	32 40       	sbci	r19, 0x02	; 2
    880e:	10 f4       	brcc	.+4      	; 0x8814 <__vector_3+0xb4>
		{
			ch_num = 0;
    8810:	10 92 16 09 	sts	0x0916, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    8814:	90 93 18 09 	sts	0x0918, r25
    8818:	80 93 17 09 	sts	0x0917, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    881c:	e0 91 16 09 	lds	r30, 0x0916
    8820:	f0 e0       	ldi	r31, 0x00	; 0
    8822:	e7 5c       	subi	r30, 0xC7	; 199
    8824:	f9 4f       	sbci	r31, 0xF9	; 249
    8826:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    8828:	20 91 16 09 	lds	r18, 0x0916
    882c:	22 23       	and	r18, r18
    882e:	39 f0       	breq	.+14     	; 0x883e <__vector_3+0xde>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    8830:	a0 91 16 09 	lds	r26, 0x0916
    8834:	b0 e0       	ldi	r27, 0x00	; 0
    8836:	a7 5c       	subi	r26, 0xC7	; 199
    8838:	b9 4f       	sbci	r27, 0xF9	; 249
    883a:	2c 91       	ld	r18, X
    883c:	01 c0       	rjmp	.+2      	; 0x8840 <__vector_3+0xe0>
		}
		else
		{
			prevChannel = 0;
    883e:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    8840:	30 91 16 09 	lds	r19, 0x0916
    8844:	38 30       	cpi	r19, 0x08	; 8
    8846:	38 f4       	brcc	.+14     	; 0x8856 <__vector_3+0xf6>
		{
            RxChannelStart[curChannel] = tCount;
    8848:	f0 e0       	ldi	r31, 0x00	; 0
    884a:	ee 0f       	add	r30, r30
    884c:	ff 1f       	adc	r31, r31
    884e:	ed 5f       	subi	r30, 0xFD	; 253
    8850:	f6 4f       	sbci	r31, 0xF6	; 246
    8852:	91 83       	std	Z+1, r25	; 0x01
    8854:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    8856:	30 91 16 09 	lds	r19, 0x0916
    885a:	33 23       	and	r19, r19
    885c:	99 f0       	breq	.+38     	; 0x8884 <__vector_3+0x124>
    885e:	30 91 16 09 	lds	r19, 0x0916
    8862:	39 30       	cpi	r19, 0x09	; 9
    8864:	78 f4       	brcc	.+30     	; 0x8884 <__vector_3+0x124>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    8866:	30 e0       	ldi	r19, 0x00	; 0
    8868:	22 0f       	add	r18, r18
    886a:	33 1f       	adc	r19, r19
    886c:	f9 01       	movw	r30, r18
    886e:	ed 5f       	subi	r30, 0xFD	; 253
    8870:	f6 4f       	sbci	r31, 0xF6	; 246
    8872:	40 81       	ld	r20, Z
    8874:	51 81       	ldd	r21, Z+1	; 0x01
    8876:	84 1b       	sub	r24, r20
    8878:	95 0b       	sbc	r25, r21
    887a:	f9 01       	movw	r30, r18
    887c:	e2 52       	subi	r30, 0x22	; 34
    887e:	f7 4f       	sbci	r31, 0xF7	; 247
    8880:	91 83       	std	Z+1, r25	; 0x01
    8882:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    8884:	80 91 16 09 	lds	r24, 0x0916
    8888:	8f 5f       	subi	r24, 0xFF	; 255
    888a:	80 93 16 09 	sts	0x0916, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    888e:	90 91 16 09 	lds	r25, 0x0916
    8892:	80 91 ef 08 	lds	r24, 0x08EF
    8896:	89 17       	cp	r24, r25
    8898:	28 f4       	brcc	.+10     	; 0x88a4 <__vector_3+0x144>
		{
			max_chan = ch_num;					// Update max channel number
    889a:	80 91 16 09 	lds	r24, 0x0916
    889e:	80 93 ef 08 	sts	0x08EF, r24
    88a2:	13 c0       	rjmp	.+38     	; 0x88ca <__vector_3+0x16a>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    88a4:	90 91 16 09 	lds	r25, 0x0916
    88a8:	80 91 ef 08 	lds	r24, 0x08EF
    88ac:	98 13       	cpse	r25, r24
    88ae:	0d c0       	rjmp	.+26     	; 0x88ca <__vector_3+0x16a>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    88b0:	81 e0       	ldi	r24, 0x01	; 1
    88b2:	80 93 ee 08 	sts	0x08EE, r24
			Servo_TCNT2 = TCNT2;				// Reset signal loss timer and Overdue state 
    88b6:	80 91 b2 00 	lds	r24, 0x00B2
    88ba:	80 93 2c 05 	sts	0x052C, r24
			RC_Timeout = 0;
    88be:	10 92 2b 05 	sts	0x052B, r1
    88c2:	10 92 2a 05 	sts	0x052A, r1
			Overdue = false;
    88c6:	10 92 2e 05 	sts	0x052E, r1
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    88ca:	80 91 2e 05 	lds	r24, 0x052E
    88ce:	88 23       	and	r24, r24
    88d0:	21 f0       	breq	.+8      	; 0x88da <__vector_3+0x17a>
		{
			max_chan = 0;
    88d2:	10 92 ef 08 	sts	0x08EF, r1
			Overdue = false;
    88d6:	10 92 2e 05 	sts	0x052E, r1
		}
	}
} // ISR(INT2_vect)
    88da:	ff 91       	pop	r31
    88dc:	ef 91       	pop	r30
    88de:	bf 91       	pop	r27
    88e0:	af 91       	pop	r26
    88e2:	9f 91       	pop	r25
    88e4:	8f 91       	pop	r24
    88e6:	7f 91       	pop	r23
    88e8:	6f 91       	pop	r22
    88ea:	5f 91       	pop	r21
    88ec:	4f 91       	pop	r20
    88ee:	3f 91       	pop	r19
    88f0:	2f 91       	pop	r18
    88f2:	0f 90       	pop	r0
    88f4:	0f be       	out	0x3f, r0	; 63
    88f6:	0f 90       	pop	r0
    88f8:	1f 90       	pop	r1
    88fa:	18 95       	reti

000088fc <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    88fc:	1f 92       	push	r1
    88fe:	0f 92       	push	r0
    8900:	0f b6       	in	r0, 0x3f	; 63
    8902:	0f 92       	push	r0
    8904:	11 24       	eor	r1, r1
    8906:	2f 93       	push	r18
    8908:	3f 93       	push	r19
    890a:	4f 93       	push	r20
    890c:	5f 93       	push	r21
    890e:	6f 93       	push	r22
    8910:	7f 93       	push	r23
    8912:	8f 93       	push	r24
    8914:	9f 93       	push	r25
    8916:	af 93       	push	r26
    8918:	bf 93       	push	r27
    891a:	cf 93       	push	r28
    891c:	df 93       	push	r29
    891e:	ef 93       	push	r30
    8920:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    8922:	80 91 19 09 	lds	r24, 0x0919
    8926:	88 23       	and	r24, r24
    8928:	19 f0       	breq	.+6      	; 0x8930 <__vector_20+0x34>
    892a:	81 e0       	ldi	r24, 0x01	; 1
    892c:	80 93 1a 09 	sts	0x091A, r24

	// Read error flags first
	temp =  UCSR0A;
    8930:	80 91 c0 00 	lds	r24, 0x00C0

	// Check Framing error, Parity error bits
	if (temp & ((1<<FE0)|(1<<UPE0)))
    8934:	98 2f       	mov	r25, r24
    8936:	94 71       	andi	r25, 0x14	; 20
    8938:	21 f4       	brne	.+8      	; 0x8942 <__vector_20+0x46>
		// Read byte to remove from buffer
		temp = UDR0;
	}

	// Check all for Data overrun
	else if (temp & (1<<DOR0))
    893a:	83 ff       	sbrs	r24, 3
    893c:	05 c0       	rjmp	.+10     	; 0x8948 <__vector_20+0x4c>
	{
		// Read byte to remove from buffer
		temp = UDR0;
    893e:	80 91 c6 00 	lds	r24, 0x00C6
		// Read byte to remove from buffer
		temp = UDR0;
    8942:	80 91 c6 00 	lds	r24, 0x00C6
    8946:	4a c3       	rjmp	.+1684   	; 0x8fdc <__vector_20+0x6e0>

	// Valid data
	else
	{
		// Read byte first
		temp = UDR0;
    8948:	c0 91 c6 00 	lds	r28, 0x00C6

		// Save current time stamp
		Save_TCNT1 = TIM16_ReadTCNT1();
    894c:	0e 94 a8 43 	call	0x8750	; 0x8750 <TIM16_ReadTCNT1>
	
		// Work out frame rate properly
		// Note that CurrentPeriod cannot be larger than 26.2ms
	
		//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
		if (Save_TCNT1 < PPMSyncStart)
    8950:	20 91 17 09 	lds	r18, 0x0917
    8954:	30 91 18 09 	lds	r19, 0x0918
    8958:	82 17       	cp	r24, r18
    895a:	93 07       	cpc	r25, r19
    895c:	48 f4       	brcc	.+18     	; 0x8970 <__vector_20+0x74>
		{
			CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
    895e:	20 91 17 09 	lds	r18, 0x0917
    8962:	30 91 18 09 	lds	r19, 0x0918
    8966:	ac 01       	movw	r20, r24
    8968:	42 1b       	sub	r20, r18
    896a:	53 0b       	sbc	r21, r19
    896c:	9a 01       	movw	r18, r20
    896e:	08 c0       	rjmp	.+16     	; 0x8980 <__vector_20+0x84>
		}
		else
		{
			CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    8970:	20 91 17 09 	lds	r18, 0x0917
    8974:	30 91 18 09 	lds	r19, 0x0918
    8978:	dc 01       	movw	r26, r24
    897a:	a2 1b       	sub	r26, r18
    897c:	b3 0b       	sbc	r27, r19
    897e:	9d 01       	movw	r18, r26
		}

		// Handle start of new packet
		if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    8980:	25 3c       	cpi	r18, 0xC5	; 197
    8982:	b9 e0       	ldi	r27, 0x09	; 9
    8984:	3b 07       	cpc	r19, r27
    8986:	c8 f0       	brcs	.+50     	; 0x89ba <__vector_20+0xbe>
		{
			// Reset variables
			rcindex = 0;
    8988:	10 92 dd 08 	sts	0x08DD, r1
			bytecount = 0;
    898c:	10 92 f0 08 	sts	0x08F0, r1
			ch_num = 0;
    8990:	10 92 16 09 	sts	0x0916, r1
			checksum = 0;
    8994:	10 92 1c 09 	sts	0x091C, r1
    8998:	10 92 1b 09 	sts	0x091B, r1
			chanmask16 = 0;
    899c:	10 92 14 09 	sts	0x0914, r1
    89a0:	10 92 13 09 	sts	0x0913, r1

			// Save frame rate to global
			FrameRate = CurrentPeriod;
    89a4:	30 93 1e 09 	sts	0x091E, r19
    89a8:	20 93 1d 09 	sts	0x091D, r18
			
			// Clear buffer
			memset(&sBuffer[0],0,SBUFFER_SIZE);
    89ac:	26 e4       	ldi	r18, 0x46	; 70
    89ae:	ec e7       	ldi	r30, 0x7C	; 124
    89b0:	f5 e0       	ldi	r31, 0x05	; 5
    89b2:	df 01       	movw	r26, r30
    89b4:	1d 92       	st	X+, r1
    89b6:	2a 95       	dec	r18
    89b8:	e9 f7       	brne	.-6      	; 0x89b4 <__vector_20+0xb8>
		}

		// Timestamp this interrupt
		PPMSyncStart = Save_TCNT1;
    89ba:	90 93 18 09 	sts	0x0918, r25
    89be:	80 93 17 09 	sts	0x0917, r24
	
		// Put received byte in buffer if space available
		if (rcindex < SBUFFER_SIZE)
    89c2:	80 91 dd 08 	lds	r24, 0x08DD
    89c6:	86 34       	cpi	r24, 0x46	; 70
    89c8:	50 f4       	brcc	.+20     	; 0x89de <__vector_20+0xe2>
		{
			sBuffer[rcindex++] = temp;			
    89ca:	e0 91 dd 08 	lds	r30, 0x08DD
    89ce:	81 e0       	ldi	r24, 0x01	; 1
    89d0:	8e 0f       	add	r24, r30
    89d2:	80 93 dd 08 	sts	0x08DD, r24
    89d6:	f0 e0       	ldi	r31, 0x00	; 0
    89d8:	e4 58       	subi	r30, 0x84	; 132
    89da:	fa 4f       	sbci	r31, 0xFA	; 250
    89dc:	c0 83       	st	Z, r28
		//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
		//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
		//*
		//************************************************************

		if (Config.RxMode == XTREME)
    89de:	90 91 62 06 	lds	r25, 0x0662
    89e2:	94 30       	cpi	r25, 0x04	; 4
    89e4:	09 f0       	breq	.+2      	; 0x89e8 <__vector_20+0xec>
    89e6:	c2 c0       	rjmp	.+388    	; 0x8b6c <__vector_20+0x270>
		{
			// Look at flag byte to see if the data is meant for us
			if (bytecount == 0)
    89e8:	80 91 f0 08 	lds	r24, 0x08F0
    89ec:	81 11       	cpse	r24, r1
    89ee:	0d c0       	rjmp	.+26     	; 0x8a0a <__vector_20+0x10e>
			{
				// Check top 3 bits for channel bank
				// Trash checksum if not clear
				if (temp & 0xE0)
    89f0:	8c 2f       	mov	r24, r28
    89f2:	80 7e       	andi	r24, 0xE0	; 224
    89f4:	51 f0       	breq	.+20     	; 0x8a0a <__vector_20+0x10e>
				{
					checksum +=	0x55;
    89f6:	80 91 1b 09 	lds	r24, 0x091B
    89fa:	90 91 1c 09 	lds	r25, 0x091C
    89fe:	8b 5a       	subi	r24, 0xAB	; 171
    8a00:	9f 4f       	sbci	r25, 0xFF	; 255
    8a02:	90 93 1c 09 	sts	0x091C, r25
    8a06:	80 93 1b 09 	sts	0x091B, r24
				}
			}

			// Get MSB of mask byte
			if (bytecount == 2)
    8a0a:	20 91 f0 08 	lds	r18, 0x08F0
    8a0e:	8c 2f       	mov	r24, r28
    8a10:	90 e0       	ldi	r25, 0x00	; 0
    8a12:	22 30       	cpi	r18, 0x02	; 2
    8a14:	51 f4       	brne	.+20     	; 0x8a2a <__vector_20+0x12e>
			{
				chanmask16 = 0;
    8a16:	10 92 14 09 	sts	0x0914, r1
    8a1a:	10 92 13 09 	sts	0x0913, r1
				chanmask16 = temp << 8;		// High byte of Mask
    8a1e:	38 2f       	mov	r19, r24
    8a20:	22 27       	eor	r18, r18
    8a22:	30 93 14 09 	sts	0x0914, r19
    8a26:	20 93 13 09 	sts	0x0913, r18
			}

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
    8a2a:	20 91 f0 08 	lds	r18, 0x08F0
    8a2e:	23 30       	cpi	r18, 0x03	; 3
    8a30:	c1 f0       	breq	.+48     	; 0x8a62 <__vector_20+0x166>
					temp16 &= temp16 - 1;
				}
			}

			// Add up checksum up until final packet
			if (bytecount < ((ch_num << 1) + 4))
    8a32:	20 91 16 09 	lds	r18, 0x0916
    8a36:	40 91 f0 08 	lds	r20, 0x08F0
    8a3a:	30 e0       	ldi	r19, 0x00	; 0
    8a3c:	22 0f       	add	r18, r18
    8a3e:	33 1f       	adc	r19, r19
    8a40:	2d 5f       	subi	r18, 0xFD	; 253
    8a42:	3f 4f       	sbci	r19, 0xFF	; 255
    8a44:	50 e0       	ldi	r21, 0x00	; 0
    8a46:	24 17       	cp	r18, r20
    8a48:	35 07       	cpc	r19, r21
    8a4a:	4c f1       	brlt	.+82     	; 0x8a9e <__vector_20+0x1a2>
			{
				checksum +=	temp;
    8a4c:	20 91 1b 09 	lds	r18, 0x091B
    8a50:	30 91 1c 09 	lds	r19, 0x091C
    8a54:	82 0f       	add	r24, r18
    8a56:	93 1f       	adc	r25, r19
    8a58:	90 93 1c 09 	sts	0x091C, r25
    8a5c:	80 93 1b 09 	sts	0x091B, r24
    8a60:	1d c2       	rjmp	.+1082   	; 0x8e9c <__vector_20+0x5a0>

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
			{
				chanmask16 += (uint16_t)temp;	// Low byte of Mask
    8a62:	20 91 13 09 	lds	r18, 0x0913
    8a66:	30 91 14 09 	lds	r19, 0x0914
    8a6a:	28 0f       	add	r18, r24
    8a6c:	39 1f       	adc	r19, r25
    8a6e:	30 93 14 09 	sts	0x0914, r19
    8a72:	20 93 13 09 	sts	0x0913, r18
				temp16 = chanmask16;			// Need to keep a copy od chanmask16
    8a76:	20 91 13 09 	lds	r18, 0x0913
    8a7a:	30 91 14 09 	lds	r19, 0x0914

				// Count bits set (number of active channels)				 
				for (ch_num = 0; temp16; ch_num++)
    8a7e:	10 92 16 09 	sts	0x0916, r1
    8a82:	21 15       	cp	r18, r1
    8a84:	31 05       	cpc	r19, r1
    8a86:	a9 f2       	breq	.-86     	; 0x8a32 <__vector_20+0x136>
				{
					temp16 &= temp16 - 1;
    8a88:	a9 01       	movw	r20, r18
    8a8a:	41 50       	subi	r20, 0x01	; 1
    8a8c:	51 09       	sbc	r21, r1
    8a8e:	24 23       	and	r18, r20
    8a90:	35 23       	and	r19, r21
			{
				chanmask16 += (uint16_t)temp;	// Low byte of Mask
				temp16 = chanmask16;			// Need to keep a copy od chanmask16

				// Count bits set (number of active channels)				 
				for (ch_num = 0; temp16; ch_num++)
    8a92:	40 91 16 09 	lds	r20, 0x0916
    8a96:	4f 5f       	subi	r20, 0xFF	; 255
    8a98:	40 93 16 09 	sts	0x0916, r20
    8a9c:	f2 cf       	rjmp	.-28     	; 0x8a82 <__vector_20+0x186>
	
			// Process data when all packets received
			else
			{
				// Check checksum 
				checksum &= 0xff;
    8a9e:	20 91 1b 09 	lds	r18, 0x091B
    8aa2:	30 91 1c 09 	lds	r19, 0x091C
    8aa6:	33 27       	eor	r19, r19
    8aa8:	30 93 1c 09 	sts	0x091C, r19
    8aac:	20 93 1b 09 	sts	0x091B, r18

				// Ignore packet if checksum wrong
				if (checksum != temp) // temp holds the transmitted checksum byte
    8ab0:	20 91 1b 09 	lds	r18, 0x091B
    8ab4:	30 91 1c 09 	lds	r19, 0x091C
    8ab8:	28 17       	cp	r18, r24
    8aba:	39 07       	cpc	r19, r25
    8abc:	49 f0       	breq	.+18     	; 0x8ad0 <__vector_20+0x1d4>
				{
					Interrupted = false;
    8abe:	10 92 ee 08 	sts	0x08EE, r1
					ch_num = 0;
    8ac2:	10 92 16 09 	sts	0x0916, r1
					checksum = 0;
    8ac6:	10 92 1c 09 	sts	0x091C, r1
    8aca:	10 92 1b 09 	sts	0x091B, r1
    8ace:	e6 c1       	rjmp	.+972    	; 0x8e9c <__vector_20+0x5a0>
				}
				else
				{
					// RC sync established
					Interrupted = true;	
    8ad0:	81 e0       	ldi	r24, 0x01	; 1
    8ad2:	80 93 ee 08 	sts	0x08EE, r24

					// Reset signal loss timer and Overdue state 
					Servo_TCNT2 = TCNT2;
    8ad6:	80 91 b2 00 	lds	r24, 0x00B2
    8ada:	80 93 2c 05 	sts	0x052C, r24
					RC_Timeout = 0;
    8ade:	10 92 2b 05 	sts	0x052B, r1
    8ae2:	10 92 2a 05 	sts	0x052A, r1
					Overdue = false;
    8ae6:	10 92 2e 05 	sts	0x052E, r1
    8aea:	20 e0       	ldi	r18, 0x00	; 0
    8aec:	30 e0       	ldi	r19, 0x00	; 0
			
					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5
    8aee:	44 e0       	ldi	r20, 0x04	; 4
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    8af0:	61 e0       	ldi	r22, 0x01	; 1
    8af2:	70 e0       	ldi	r23, 0x00	; 0
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    8af4:	5a e0       	ldi	r21, 0x0A	; 10
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    8af6:	80 91 13 09 	lds	r24, 0x0913
    8afa:	90 91 14 09 	lds	r25, 0x0914
    8afe:	fb 01       	movw	r30, r22
    8b00:	02 2e       	mov	r0, r18
    8b02:	02 c0       	rjmp	.+4      	; 0x8b08 <__vector_20+0x20c>
    8b04:	ee 0f       	add	r30, r30
    8b06:	ff 1f       	adc	r31, r31
    8b08:	0a 94       	dec	r0
    8b0a:	e2 f7       	brpl	.-8      	; 0x8b04 <__vector_20+0x208>
    8b0c:	8e 23       	and	r24, r30
    8b0e:	9f 23       	and	r25, r31
    8b10:	89 2b       	or	r24, r25
    8b12:	31 f1       	breq	.+76     	; 0x8b60 <__vector_20+0x264>
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    8b14:	e4 2f       	mov	r30, r20
    8b16:	f0 e0       	ldi	r31, 0x00	; 0
    8b18:	e4 58       	subi	r30, 0x84	; 132
    8b1a:	fa 4f       	sbci	r31, 0xFA	; 250
    8b1c:	80 81       	ld	r24, Z
    8b1e:	f1 81       	ldd	r31, Z+1	; 0x01

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
    8b20:	28 30       	cpi	r18, 0x08	; 8
    8b22:	31 05       	cpc	r19, r1
    8b24:	d0 f4       	brcc	.+52     	; 0x8b5a <__vector_20+0x25e>
    8b26:	d9 01       	movw	r26, r18
    8b28:	a7 5c       	subi	r26, 0xC7	; 199
    8b2a:	b9 4f       	sbci	r27, 0xF9	; 249
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    8b2c:	11 96       	adiw	r26, 0x01	; 1
    8b2e:	ec 91       	ld	r30, X
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    8b30:	90 e0       	ldi	r25, 0x00	; 0
    8b32:	98 2f       	mov	r25, r24
    8b34:	88 27       	eor	r24, r24
    8b36:	8f 0f       	add	r24, r31
    8b38:	91 1d       	adc	r25, r1

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    8b3a:	58 9f       	mul	r21, r24
    8b3c:	d0 01       	movw	r26, r0
    8b3e:	59 9f       	mul	r21, r25
    8b40:	b0 0d       	add	r27, r0
    8b42:	11 24       	eor	r1, r1
    8b44:	cd 01       	movw	r24, r26
    8b46:	96 95       	lsr	r25
    8b48:	87 95       	ror	r24
    8b4a:	96 95       	lsr	r25
    8b4c:	87 95       	ror	r24
    8b4e:	ee 0f       	add	r30, r30
    8b50:	ff 0b       	sbc	r31, r31
    8b52:	e2 52       	subi	r30, 0x22	; 34
    8b54:	f7 4f       	sbci	r31, 0xF7	; 247
    8b56:	91 83       	std	Z+1, r25	; 0x01
    8b58:	80 83       	st	Z, r24
							} 		

							// Within the bounds of the buffer
							if (sindex < SBUFFER_SIZE)
    8b5a:	46 34       	cpi	r20, 0x46	; 70
    8b5c:	08 f4       	brcc	.+2      	; 0x8b60 <__vector_20+0x264>
							{
								sindex += 2;
    8b5e:	4e 5f       	subi	r20, 0xFE	; 254
    8b60:	2f 5f       	subi	r18, 0xFF	; 255
    8b62:	3f 4f       	sbci	r19, 0xFF	; 255
					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5

					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
    8b64:	20 31       	cpi	r18, 0x10	; 16
    8b66:	31 05       	cpc	r19, r1
    8b68:	31 f6       	brne	.-116    	; 0x8af6 <__vector_20+0x1fa>
    8b6a:	98 c1       	rjmp	.+816    	; 0x8e9c <__vector_20+0x5a0>
		//* 1824	= 2020us
		//* 2047 	= 2160us
		//*
		//************************************************************

		if (Config.RxMode == SBUS)
    8b6c:	92 30       	cpi	r25, 0x02	; 2
    8b6e:	09 f0       	breq	.+2      	; 0x8b72 <__vector_20+0x276>
    8b70:	76 c0       	rjmp	.+236    	; 0x8c5e <__vector_20+0x362>
		{
			// Flag that packet has completed
			// End bytes can be 00, 04, 14, 24, 34 and possibly 08 for FASSTest 12-channel
			//if ((bytecount == 24) && ((temp == 0x00) || (temp == 0x04) || (temp == 0x14) || (temp == 0x24) || (temp == 0x34) || (temp == 0x08)))
			if (bytecount == 24)
    8b72:	80 91 f0 08 	lds	r24, 0x08F0
    8b76:	88 31       	cpi	r24, 0x18	; 24
    8b78:	09 f0       	breq	.+2      	; 0x8b7c <__vector_20+0x280>
    8b7a:	90 c1       	rjmp	.+800    	; 0x8e9c <__vector_20+0x5a0>
			{
				// RC sync established
				Interrupted = true;
    8b7c:	81 e0       	ldi	r24, 0x01	; 1
    8b7e:	80 93 ee 08 	sts	0x08EE, r24
				Servo_TCNT2 = TCNT2;
    8b82:	80 91 b2 00 	lds	r24, 0x00B2
    8b86:	80 93 2c 05 	sts	0x052C, r24
				RC_Timeout = 0;
    8b8a:	10 92 2b 05 	sts	0x052B, r1
    8b8e:	10 92 2a 05 	sts	0x052A, r1
				Overdue = false;
    8b92:	10 92 2e 05 	sts	0x052E, r1
    8b96:	80 e0       	ldi	r24, 0x00	; 0
    8b98:	90 e0       	ldi	r25, 0x00	; 0
				
				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    8b9a:	fc 01       	movw	r30, r24
    8b9c:	ee 0f       	add	r30, r30
    8b9e:	ff 1f       	adc	r31, r31
    8ba0:	e2 52       	subi	r30, 0x22	; 34
    8ba2:	f7 4f       	sbci	r31, 0xF7	; 247
    8ba4:	11 82       	std	Z+1, r1	; 0x01
    8ba6:	10 82       	st	Z, r1
    8ba8:	01 96       	adiw	r24, 0x01	; 1
				Servo_TCNT2 = TCNT2;
				RC_Timeout = 0;
				Overdue = false;
				
				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    8baa:	88 30       	cpi	r24, 0x08	; 8
    8bac:	91 05       	cpc	r25, r1
    8bae:	a9 f7       	brne	.-22     	; 0x8b9a <__vector_20+0x29e>
    8bb0:	48 e5       	ldi	r20, 0x58	; 88
    8bb2:	90 e0       	ldi	r25, 0x00	; 0
    8bb4:	60 e0       	ldi	r22, 0x00	; 0
    8bb6:	80 e0       	ldi	r24, 0x00	; 0
    8bb8:	51 e0       	ldi	r21, 0x01	; 1
				for (j = 0; j < 88; j++)
				{
					if (sBuffer[sindex] & (1<<chan_mask))
					{
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    8bba:	a1 e0       	ldi	r26, 0x01	; 1
    8bbc:	b0 e0       	ldi	r27, 0x00	; 0

				// Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
				for (j = 0; j < 88; j++)
				{
					if (sBuffer[sindex] & (1<<chan_mask))
    8bbe:	e5 2f       	mov	r30, r21
    8bc0:	f0 e0       	ldi	r31, 0x00	; 0
    8bc2:	e4 58       	subi	r30, 0x84	; 132
    8bc4:	fa 4f       	sbci	r31, 0xFA	; 250
    8bc6:	20 81       	ld	r18, Z
    8bc8:	30 e0       	ldi	r19, 0x00	; 0
    8bca:	08 2e       	mov	r0, r24
    8bcc:	02 c0       	rjmp	.+4      	; 0x8bd2 <__vector_20+0x2d6>
    8bce:	35 95       	asr	r19
    8bd0:	27 95       	ror	r18
    8bd2:	0a 94       	dec	r0
    8bd4:	e2 f7       	brpl	.-8      	; 0x8bce <__vector_20+0x2d2>
    8bd6:	20 ff       	sbrs	r18, 0
    8bd8:	16 c0       	rjmp	.+44     	; 0x8c06 <__vector_20+0x30a>
					{
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    8bda:	e6 2f       	mov	r30, r22
    8bdc:	f0 e0       	ldi	r31, 0x00	; 0
    8bde:	e7 5c       	subi	r30, 0xC7	; 199
    8be0:	f9 4f       	sbci	r31, 0xF9	; 249
    8be2:	e1 81       	ldd	r30, Z+1	; 0x01
    8be4:	ee 0f       	add	r30, r30
    8be6:	ff 0b       	sbc	r31, r31
    8be8:	e2 52       	subi	r30, 0x22	; 34
    8bea:	f7 4f       	sbci	r31, 0xF7	; 247
    8bec:	c0 81       	ld	r28, Z
    8bee:	d1 81       	ldd	r29, Z+1	; 0x01
    8bf0:	9d 01       	movw	r18, r26
    8bf2:	09 2e       	mov	r0, r25
    8bf4:	02 c0       	rjmp	.+4      	; 0x8bfa <__vector_20+0x2fe>
    8bf6:	22 0f       	add	r18, r18
    8bf8:	33 1f       	adc	r19, r19
    8bfa:	0a 94       	dec	r0
    8bfc:	e2 f7       	brpl	.-8      	; 0x8bf6 <__vector_20+0x2fa>
    8bfe:	2c 2b       	or	r18, r28
    8c00:	3d 2b       	or	r19, r29
    8c02:	31 83       	std	Z+1, r19	; 0x01
    8c04:	20 83       	st	Z, r18
					}

					chan_mask++;
    8c06:	8f 5f       	subi	r24, 0xFF	; 255
					data_mask++;
    8c08:	9f 5f       	subi	r25, 0xFF	; 255

					// If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    8c0a:	88 30       	cpi	r24, 0x08	; 8
    8c0c:	11 f4       	brne	.+4      	; 0x8c12 <__vector_20+0x316>
					{
						chan_mask = 0;
						sindex++;
    8c0e:	5f 5f       	subi	r21, 0xFF	; 255
					data_mask++;

					// If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
					{
						chan_mask = 0;
    8c10:	80 e0       	ldi	r24, 0x00	; 0
						sindex++;
					}

					// If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    8c12:	9b 30       	cpi	r25, 0x0B	; 11
    8c14:	11 f4       	brne	.+4      	; 0x8c1a <__vector_20+0x31e>
					{
						data_mask =0;
						chan_shift++;
    8c16:	6f 5f       	subi	r22, 0xFF	; 255

					// If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
					{
						data_mask =0;
    8c18:	90 e0       	ldi	r25, 0x00	; 0
    8c1a:	41 50       	subi	r20, 0x01	; 1
				// Start from second byte
				sindex = 1;

				// Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
				for (j = 0; j < 88; j++)
    8c1c:	81 f6       	brne	.-96     	; 0x8bbe <__vector_20+0x2c2>
    8c1e:	20 e0       	ldi	r18, 0x00	; 0
    8c20:	30 e0       	ldi	r19, 0x00	; 0

				// Convert to  OpenAero2 values
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract Futaba offset
					itemp16 = RxChannel[j] - 1024;
    8c22:	f9 01       	movw	r30, r18
    8c24:	ee 0f       	add	r30, r30
    8c26:	ff 1f       	adc	r31, r31
    8c28:	e2 52       	subi	r30, 0x22	; 34
    8c2a:	f7 4f       	sbci	r31, 0xF7	; 247
    8c2c:	80 81       	ld	r24, Z
    8c2e:	91 81       	ldd	r25, Z+1	; 0x01
    8c30:	94 50       	subi	r25, 0x04	; 4
						
					// Expand into OpenAero2 units x1.562 (1.562) (1250/800)
					itemp16 = itemp16 + (itemp16 >> 1) + (itemp16 >> 4);
    8c32:	ac 01       	movw	r20, r24
    8c34:	55 95       	asr	r21
    8c36:	47 95       	ror	r20
    8c38:	48 0f       	add	r20, r24
    8c3a:	59 1f       	adc	r21, r25
    8c3c:	c4 e0       	ldi	r28, 0x04	; 4
    8c3e:	95 95       	asr	r25
    8c40:	87 95       	ror	r24
    8c42:	ca 95       	dec	r28
    8c44:	e1 f7       	brne	.-8      	; 0x8c3e <__vector_20+0x342>
    8c46:	84 0f       	add	r24, r20
    8c48:	95 1f       	adc	r25, r21

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;		
    8c4a:	8a 55       	subi	r24, 0x5A	; 90
    8c4c:	91 4f       	sbci	r25, 0xF1	; 241
    8c4e:	91 83       	std	Z+1, r25	; 0x01
    8c50:	80 83       	st	Z, r24
    8c52:	2f 5f       	subi	r18, 0xFF	; 255
    8c54:	3f 4f       	sbci	r19, 0xFF	; 255
						chan_shift++;
					}
				}

				// Convert to  OpenAero2 values
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    8c56:	28 30       	cpi	r18, 0x08	; 8
    8c58:	31 05       	cpc	r19, r1
    8c5a:	19 f7       	brne	.-58     	; 0x8c22 <__vector_20+0x326>
    8c5c:	1f c1       	rjmp	.+574    	; 0x8e9c <__vector_20+0x5a0>
		//* 2047 	= 2100us
		//*
		//************************************************************

		// Handle Spektrum format
		if (Config.RxMode == SPEKTRUM)
    8c5e:	93 30       	cpi	r25, 0x03	; 3
    8c60:	09 f0       	breq	.+2      	; 0x8c64 <__vector_20+0x368>
    8c62:	72 c0       	rjmp	.+228    	; 0x8d48 <__vector_20+0x44c>
		{
			// Process data when all packets received
			if (bytecount == 15)
    8c64:	80 91 f0 08 	lds	r24, 0x08F0
    8c68:	8f 30       	cpi	r24, 0x0F	; 15
    8c6a:	09 f0       	breq	.+2      	; 0x8c6e <__vector_20+0x372>
    8c6c:	17 c1       	rjmp	.+558    	; 0x8e9c <__vector_20+0x5a0>
			{
				// Just stick the last byte into the buffer manually...(hides)
				sBuffer[15] = temp;
    8c6e:	c0 93 8b 05 	sts	0x058B, r28

				// Set start of channel data per format
				sindex = 2; // Channel data from byte 3

				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    8c72:	80 91 7d 05 	lds	r24, 0x057D
    8c76:	84 fd       	sbrc	r24, 4
    8c78:	04 c0       	rjmp	.+8      	; 0x8c82 <__vector_20+0x386>
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
					data_mask = 0x03;
    8c7a:	63 e0       	ldi	r22, 0x03	; 3
					chan_shift = 0x02;
    8c7c:	42 e0       	ldi	r20, 0x02	; 2
					data_mask = 0x07;
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
    8c7e:	5c e3       	ldi	r21, 0x3C	; 60
    8c80:	03 c0       	rjmp	.+6      	; 0x8c88 <__vector_20+0x38c>

				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
				{
					chan_mask = 0x78;	// 11 bit (2048)
					data_mask = 0x07;
    8c82:	67 e0       	ldi	r22, 0x07	; 7
					chan_shift = 0x03;
    8c84:	43 e0       	ldi	r20, 0x03	; 3
				sindex = 2; // Channel data from byte 3

				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
				{
					chan_mask = 0x78;	// 11 bit (2048)
    8c86:	58 e7       	ldi	r21, 0x78	; 120
					data_mask = 0x07;
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
    8c88:	20 e0       	ldi	r18, 0x00	; 0
    8c8a:	30 e0       	ldi	r19, 0x00	; 0
    8c8c:	d9 01       	movw	r26, r18
    8c8e:	a4 58       	subi	r26, 0x84	; 132
    8c90:	ba 4f       	sbci	r27, 0xFA	; 250
				// Work out which channel the data is intended for from the channel number data
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    8c92:	12 96       	adiw	r26, 0x02	; 2
    8c94:	8c 91       	ld	r24, X
    8c96:	12 97       	sbiw	r26, 0x02	; 2
    8c98:	e8 2f       	mov	r30, r24
    8c9a:	e5 23       	and	r30, r21
    8c9c:	f0 e0       	ldi	r31, 0x00	; 0
    8c9e:	04 2e       	mov	r0, r20
    8ca0:	02 c0       	rjmp	.+4      	; 0x8ca6 <__vector_20+0x3aa>
    8ca2:	f5 95       	asr	r31
    8ca4:	e7 95       	ror	r30
    8ca6:	0a 94       	dec	r0
    8ca8:	e2 f7       	brpl	.-8      	; 0x8ca2 <__vector_20+0x3a6>
    8caa:	e0 93 16 09 	sts	0x0916, r30

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    8cae:	13 96       	adiw	r26, 0x03	; 3
    8cb0:	7c 91       	ld	r23, X

					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16
					if (ch_num < MAX_RC_CHANNELS)
    8cb2:	90 91 16 09 	lds	r25, 0x0916
    8cb6:	98 30       	cpi	r25, 0x08	; 8
    8cb8:	98 f5       	brcc	.+102    	; 0x8d20 <__vector_20+0x424>
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    8cba:	86 23       	and	r24, r22
    8cbc:	90 e0       	ldi	r25, 0x00	; 0
    8cbe:	98 2f       	mov	r25, r24
    8cc0:	88 27       	eor	r24, r24
    8cc2:	87 0f       	add	r24, r23
    8cc4:	91 1d       	adc	r25, r1
					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16
					if (ch_num < MAX_RC_CHANNELS)
					{
						// Subtract Spektrum center offset
						if (chan_shift == 0x03) // 11-bit
    8cc6:	43 30       	cpi	r20, 0x03	; 3
    8cc8:	11 f4       	brne	.+4      	; 0x8cce <__vector_20+0x3d2>
						{
							itemp16 = temp16 - 1024;
    8cca:	94 50       	subi	r25, 0x04	; 4
    8ccc:	01 c0       	rjmp	.+2      	; 0x8cd0 <__vector_20+0x3d4>
						}
						else
						{
							itemp16 = temp16 - 512;	
    8cce:	92 50       	subi	r25, 0x02	; 2
						}					

						// Spektrum to System
						// Expand into OpenAero2 units (1250/867.5) x2 = 2.8818 (2.875) 2+.5+.25-1/8
						itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3);
    8cd0:	dc 01       	movw	r26, r24
    8cd2:	aa 0f       	add	r26, r26
    8cd4:	bb 1f       	adc	r27, r27
    8cd6:	fc 01       	movw	r30, r24
    8cd8:	f5 95       	asr	r31
    8cda:	e7 95       	ror	r30
    8cdc:	ea 0f       	add	r30, r26
    8cde:	fb 1f       	adc	r31, r27
    8ce0:	dc 01       	movw	r26, r24
    8ce2:	b5 95       	asr	r27
    8ce4:	a7 95       	ror	r26
    8ce6:	b5 95       	asr	r27
    8ce8:	a7 95       	ror	r26
    8cea:	ea 0f       	add	r30, r26
    8cec:	fb 1f       	adc	r31, r27
    8cee:	73 e0       	ldi	r23, 0x03	; 3
    8cf0:	95 95       	asr	r25
    8cf2:	87 95       	ror	r24
    8cf4:	7a 95       	dec	r23
    8cf6:	e1 f7       	brne	.-8      	; 0x8cf0 <__vector_20+0x3f4>
    8cf8:	8e 0f       	add	r24, r30
    8cfa:	9f 1f       	adc	r25, r31

						if (chan_shift == 0x03) // 11-bit
    8cfc:	43 30       	cpi	r20, 0x03	; 3
    8cfe:	11 f4       	brne	.+4      	; 0x8d04 <__vector_20+0x408>
						{
							// Divide in case of 11-bit value
							itemp16 = itemp16 >> 1;								
    8d00:	95 95       	asr	r25
    8d02:	87 95       	ror	r24
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    8d04:	e0 91 16 09 	lds	r30, 0x0916
    8d08:	f0 e0       	ldi	r31, 0x00	; 0
    8d0a:	e7 5c       	subi	r30, 0xC7	; 199
    8d0c:	f9 4f       	sbci	r31, 0xF9	; 249
    8d0e:	e1 81       	ldd	r30, Z+1	; 0x01
							// Divide in case of 11-bit value
							itemp16 = itemp16 >> 1;								
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										
    8d10:	8a 55       	subi	r24, 0x5A	; 90
    8d12:	91 4f       	sbci	r25, 0xF1	; 241

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    8d14:	ee 0f       	add	r30, r30
    8d16:	ff 0b       	sbc	r31, r31
    8d18:	e2 52       	subi	r30, 0x22	; 34
    8d1a:	f7 4f       	sbci	r31, 0xF7	; 247
    8d1c:	91 83       	std	Z+1, r25	; 0x01
    8d1e:	80 83       	st	Z, r24
    8d20:	2e 5f       	subi	r18, 0xFE	; 254
    8d22:	3f 4f       	sbci	r19, 0xFF	; 255
					chan_shift = 0x02;
				}

				// Work out which channel the data is intended for from the channel number data
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
    8d24:	2e 30       	cpi	r18, 0x0E	; 14
    8d26:	31 05       	cpc	r19, r1
    8d28:	09 f0       	breq	.+2      	; 0x8d2c <__vector_20+0x430>
    8d2a:	b0 cf       	rjmp	.-160    	; 0x8c8c <__vector_20+0x390>
					sindex += 2;

				} // For each pair of bytes
			
				// RC sync established
				Interrupted = true;
    8d2c:	81 e0       	ldi	r24, 0x01	; 1
    8d2e:	80 93 ee 08 	sts	0x08EE, r24
				
				// Reset signal loss timer and Overdue state 
				Servo_TCNT2 = TCNT2;
    8d32:	80 91 b2 00 	lds	r24, 0x00B2
    8d36:	80 93 2c 05 	sts	0x052C, r24
				RC_Timeout = 0;
    8d3a:	10 92 2b 05 	sts	0x052B, r1
    8d3e:	10 92 2a 05 	sts	0x052A, r1
				Overdue = false;
    8d42:	10 92 2e 05 	sts	0x052E, r1
    8d46:	aa c0       	rjmp	.+340    	; 0x8e9c <__vector_20+0x5a0>
		//* 4095 	= 2200us		 
		//*
		//************************************************************
		
		// Handle SXRL format
		if (Config.RxMode == MODEB)
    8d48:	95 30       	cpi	r25, 0x05	; 5
    8d4a:	09 f0       	breq	.+2      	; 0x8d4e <__vector_20+0x452>
    8d4c:	a7 c0       	rjmp	.+334    	; 0x8e9c <__vector_20+0x5a0>
		{
			// Work out the expected number of bytes based on the vendor ID (1st byte)
			if (bytecount == 0)
    8d4e:	80 91 f0 08 	lds	r24, 0x08F0
    8d52:	81 11       	cpse	r24, r1
    8d54:	09 c0       	rjmp	.+18     	; 0x8d68 <__vector_20+0x46c>
			{
				// Process data when all packets received
				if (sBuffer[0] == MODEB_SYNCBYTE)		// 12-channel packet
    8d56:	80 91 7c 05 	lds	r24, 0x057C
    8d5a:	81 3a       	cpi	r24, 0xA1	; 161
    8d5c:	11 f4       	brne	.+4      	; 0x8d62 <__vector_20+0x466>
				{
					packet_size = XBUS_FRAME_SIZE_12;
    8d5e:	8b e1       	ldi	r24, 0x1B	; 27
    8d60:	01 c0       	rjmp	.+2      	; 0x8d64 <__vector_20+0x468>
				}
				else									// Probably a 16-channel packet
				{
					packet_size = XBUS_FRAME_SIZE_16;
    8d62:	83 e2       	ldi	r24, 0x23	; 35
    8d64:	80 93 15 09 	sts	0x0915, r24
				}
			}

			// Check checksum when all data received
			if (bytecount == (packet_size - 1))
    8d68:	20 91 f0 08 	lds	r18, 0x08F0
    8d6c:	80 91 15 09 	lds	r24, 0x0915
    8d70:	30 e0       	ldi	r19, 0x00	; 0
    8d72:	90 e0       	ldi	r25, 0x00	; 0
    8d74:	01 97       	sbiw	r24, 0x01	; 1
    8d76:	28 17       	cp	r18, r24
    8d78:	39 07       	cpc	r19, r25
    8d7a:	09 f0       	breq	.+2      	; 0x8d7e <__vector_20+0x482>
    8d7c:	8f c0       	rjmp	.+286    	; 0x8e9c <__vector_20+0x5a0>
    8d7e:	80 e0       	ldi	r24, 0x00	; 0
    8d80:	90 e0       	ldi	r25, 0x00	; 0
    8d82:	c0 e0       	ldi	r28, 0x00	; 0
			{
				crc = 0;
			
				// Add up checksum for all bytes up to but not including the checksum
				for (j = 0; j < (packet_size - 2); j++)
    8d84:	4c 2f       	mov	r20, r28
    8d86:	50 e0       	ldi	r21, 0x00	; 0
    8d88:	20 91 15 09 	lds	r18, 0x0915
    8d8c:	30 e0       	ldi	r19, 0x00	; 0
    8d8e:	22 50       	subi	r18, 0x02	; 2
    8d90:	31 09       	sbc	r19, r1
    8d92:	42 17       	cp	r20, r18
    8d94:	53 07       	cpc	r21, r19
    8d96:	44 f4       	brge	.+16     	; 0x8da8 <__vector_20+0x4ac>
				{
					crc = CRC16(crc, sBuffer[j]);
    8d98:	fa 01       	movw	r30, r20
    8d9a:	e4 58       	subi	r30, 0x84	; 132
    8d9c:	fa 4f       	sbci	r31, 0xFA	; 250
    8d9e:	60 81       	ld	r22, Z
    8da0:	0e 94 aa 6c 	call	0xd954	; 0xd954 <CRC16>
			if (bytecount == (packet_size - 1))
			{
				crc = 0;
			
				// Add up checksum for all bytes up to but not including the checksum
				for (j = 0; j < (packet_size - 2); j++)
    8da4:	cf 5f       	subi	r28, 0xFF	; 255
    8da6:	ee cf       	rjmp	.-36     	; 0x8d84 <__vector_20+0x488>
				{
					crc = CRC16(crc, sBuffer[j]);
				}
			
				// Extract the packet's own checksum
				checkcrc = ((uint16_t)(sBuffer[packet_size - 2] << 8) | (uint16_t)(sBuffer[packet_size - 1]));
    8da8:	a0 91 15 09 	lds	r26, 0x0915
    8dac:	e0 91 15 09 	lds	r30, 0x0915
    8db0:	b0 e0       	ldi	r27, 0x00	; 0
    8db2:	a6 58       	subi	r26, 0x86	; 134
    8db4:	ba 4f       	sbci	r27, 0xFA	; 250
    8db6:	2c 91       	ld	r18, X
    8db8:	30 e0       	ldi	r19, 0x00	; 0
    8dba:	32 2f       	mov	r19, r18
    8dbc:	22 27       	eor	r18, r18
    8dbe:	f0 e0       	ldi	r31, 0x00	; 0
    8dc0:	e5 58       	subi	r30, 0x85	; 133
    8dc2:	fa 4f       	sbci	r31, 0xFA	; 250
    8dc4:	40 81       	ld	r20, Z
    8dc6:	24 2b       	or	r18, r20
				
				// Compare with the calculated one and process data if ok
				if (checkcrc == crc)
    8dc8:	28 17       	cp	r18, r24
    8dca:	39 07       	cpc	r19, r25
    8dcc:	09 f0       	breq	.+2      	; 0x8dd0 <__vector_20+0x4d4>
    8dce:	66 c0       	rjmp	.+204    	; 0x8e9c <__vector_20+0x5a0>
				{
					// RC sync established
					Interrupted = true;
    8dd0:	81 e0       	ldi	r24, 0x01	; 1
    8dd2:	80 93 ee 08 	sts	0x08EE, r24
					
					// Reset signal loss timer and Overdue state 					
					Servo_TCNT2 = TCNT2;
    8dd6:	80 91 b2 00 	lds	r24, 0x00B2
    8dda:	80 93 2c 05 	sts	0x052C, r24
					RC_Timeout = 0;
    8dde:	10 92 2b 05 	sts	0x052B, r1
    8de2:	10 92 2a 05 	sts	0x052A, r1
					Overdue = false;
    8de6:	10 92 2e 05 	sts	0x052E, r1
    8dea:	20 e0       	ldi	r18, 0x00	; 0
    8dec:	30 e0       	ldi	r19, 0x00	; 0
			
					// Copy unconverted channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Combine bytes from buffer
						TempRxChannel[j] = (uint16_t)(sBuffer[(j << 1) + 1] << 8) | (sBuffer[(j << 1) + 2]);
    8dee:	a9 01       	movw	r20, r18
    8df0:	44 0f       	add	r20, r20
    8df2:	55 1f       	adc	r21, r21
    8df4:	fa 01       	movw	r30, r20
    8df6:	e4 58       	subi	r30, 0x84	; 132
    8df8:	fa 4f       	sbci	r31, 0xFA	; 250
    8dfa:	81 81       	ldd	r24, Z+1	; 0x01
    8dfc:	90 e0       	ldi	r25, 0x00	; 0
    8dfe:	98 2f       	mov	r25, r24
    8e00:	88 27       	eor	r24, r24
    8e02:	62 81       	ldd	r22, Z+2	; 0x02
    8e04:	86 2b       	or	r24, r22
    8e06:	fa 01       	movw	r30, r20
    8e08:	ef 50       	subi	r30, 0x0F	; 15
    8e0a:	f7 4f       	sbci	r31, 0xF7	; 247
    8e0c:	91 83       	std	Z+1, r25	; 0x01
    8e0e:	80 83       	st	Z, r24
    8e10:	2f 5f       	subi	r18, 0xFF	; 255
    8e12:	3f 4f       	sbci	r19, 0xFF	; 255
					Servo_TCNT2 = TCNT2;
					RC_Timeout = 0;
					Overdue = false;
			
					// Copy unconverted channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    8e14:	28 30       	cpi	r18, 0x08	; 8
    8e16:	31 05       	cpc	r19, r1
    8e18:	51 f7       	brne	.-44     	; 0x8dee <__vector_20+0x4f2>
    8e1a:	20 e0       	ldi	r18, 0x00	; 0
    8e1c:	30 e0       	ldi	r19, 0x00	; 0

					// Convert to system values
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Subtract MODEB offset
						itemp16 = TempRxChannel[j] - 2048;
    8e1e:	f9 01       	movw	r30, r18
    8e20:	ee 0f       	add	r30, r30
    8e22:	ff 1f       	adc	r31, r31
    8e24:	ef 50       	subi	r30, 0x0F	; 15
    8e26:	f7 4f       	sbci	r31, 0xF7	; 247
    8e28:	80 81       	ld	r24, Z
    8e2a:	91 81       	ldd	r25, Z+1	; 0x01
    8e2c:	98 50       	subi	r25, 0x08	; 8
						
						// Expand into OpenAero2 units x0.8544 (0.8555)	(1250/1463)
						itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 7) + (itemp16 >> 8);
    8e2e:	bc 01       	movw	r22, r24
    8e30:	75 95       	asr	r23
    8e32:	67 95       	ror	r22
    8e34:	ac 01       	movw	r20, r24
    8e36:	55 95       	asr	r21
    8e38:	47 95       	ror	r20
    8e3a:	55 95       	asr	r21
    8e3c:	47 95       	ror	r20
    8e3e:	46 0f       	add	r20, r22
    8e40:	57 1f       	adc	r21, r23
    8e42:	bc 01       	movw	r22, r24
    8e44:	f4 e0       	ldi	r31, 0x04	; 4
    8e46:	75 95       	asr	r23
    8e48:	67 95       	ror	r22
    8e4a:	fa 95       	dec	r31
    8e4c:	e1 f7       	brne	.-8      	; 0x8e46 <__vector_20+0x54a>
    8e4e:	46 0f       	add	r20, r22
    8e50:	57 1f       	adc	r21, r23
    8e52:	bc 01       	movw	r22, r24
    8e54:	a5 e0       	ldi	r26, 0x05	; 5
    8e56:	75 95       	asr	r23
    8e58:	67 95       	ror	r22
    8e5a:	aa 95       	dec	r26
    8e5c:	e1 f7       	brne	.-8      	; 0x8e56 <__vector_20+0x55a>
    8e5e:	46 0f       	add	r20, r22
    8e60:	57 1f       	adc	r21, r23
    8e62:	bc 01       	movw	r22, r24
    8e64:	66 0f       	add	r22, r22
    8e66:	67 2f       	mov	r22, r23
    8e68:	66 1f       	adc	r22, r22
    8e6a:	77 0b       	sbc	r23, r23
    8e6c:	46 0f       	add	r20, r22
    8e6e:	57 1f       	adc	r21, r23
    8e70:	89 2f       	mov	r24, r25
    8e72:	99 0f       	add	r25, r25
    8e74:	99 0b       	sbc	r25, r25
    8e76:	f9 01       	movw	r30, r18
    8e78:	e7 5c       	subi	r30, 0xC7	; 199
    8e7a:	f9 4f       	sbci	r31, 0xF9	; 249

						// Add back in OpenAero2 offset
						RxChannel[Config.ChannelOrder[j]] = itemp16 + 3750;
    8e7c:	e1 81       	ldd	r30, Z+1	; 0x01
					{
						// Subtract MODEB offset
						itemp16 = TempRxChannel[j] - 2048;
						
						// Expand into OpenAero2 units x0.8544 (0.8555)	(1250/1463)
						itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 7) + (itemp16 >> 8);
    8e7e:	84 0f       	add	r24, r20
    8e80:	95 1f       	adc	r25, r21

						// Add back in OpenAero2 offset
						RxChannel[Config.ChannelOrder[j]] = itemp16 + 3750;
    8e82:	8a 55       	subi	r24, 0x5A	; 90
    8e84:	91 4f       	sbci	r25, 0xF1	; 241
    8e86:	ee 0f       	add	r30, r30
    8e88:	ff 0b       	sbc	r31, r31
    8e8a:	e2 52       	subi	r30, 0x22	; 34
    8e8c:	f7 4f       	sbci	r31, 0xF7	; 247
    8e8e:	91 83       	std	Z+1, r25	; 0x01
    8e90:	80 83       	st	Z, r24
    8e92:	2f 5f       	subi	r18, 0xFF	; 255
    8e94:	3f 4f       	sbci	r19, 0xFF	; 255
						// Combine bytes from buffer
						TempRxChannel[j] = (uint16_t)(sBuffer[(j << 1) + 1] << 8) | (sBuffer[(j << 1) + 2]);
					}

					// Convert to system values
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    8e96:	28 30       	cpi	r18, 0x08	; 8
    8e98:	31 05       	cpc	r19, r1
    8e9a:	09 f6       	brne	.-126    	; 0x8e1e <__vector_20+0x522>
		//* 16000	= 2000us
		//*
		//************************************************************
		
		// Handle HoTT SUMD format
		if (Config.RxMode == SUMD)
    8e9c:	80 91 62 06 	lds	r24, 0x0662
    8ea0:	86 30       	cpi	r24, 0x06	; 6
    8ea2:	31 f0       	breq	.+12     	; 0x8eb0 <__vector_20+0x5b4>
		//************************************************************
		//* Common exit code
		//************************************************************

		// Increment byte count
		bytecount++;
    8ea4:	80 91 f0 08 	lds	r24, 0x08F0
    8ea8:	8f 5f       	subi	r24, 0xFF	; 255
    8eaa:	80 93 f0 08 	sts	0x08F0, r24
    8eae:	96 c0       	rjmp	.+300    	; 0x8fdc <__vector_20+0x6e0>
		
		// Handle HoTT SUMD format
		if (Config.RxMode == SUMD)
		{
			// Work out the expected number of bytes based on the channel info (3rd byte)
			if (bytecount == 2)
    8eb0:	80 91 f0 08 	lds	r24, 0x08F0
    8eb4:	82 30       	cpi	r24, 0x02	; 2
    8eb6:	69 f4       	brne	.+26     	; 0x8ed2 <__vector_20+0x5d6>
			{
				// Look at the number of channels x 2 + 2(CRC) + 3(Header)
				packet_size = (sBuffer[2] << 1) + 5;
    8eb8:	80 91 7e 05 	lds	r24, 0x057E
    8ebc:	88 0f       	add	r24, r24
    8ebe:	8b 5f       	subi	r24, 0xFB	; 251
    8ec0:	80 93 15 09 	sts	0x0915, r24
				
				// Sanity check for packet size
				if (packet_size > MAXSUMDPACKET)
    8ec4:	80 91 15 09 	lds	r24, 0x0915
    8ec8:	86 34       	cpi	r24, 0x46	; 70
    8eca:	18 f0       	brcs	.+6      	; 0x8ed2 <__vector_20+0x5d6>
				{
					packet_size = MAXSUMDPACKET;
    8ecc:	85 e4       	ldi	r24, 0x45	; 69
    8ece:	80 93 15 09 	sts	0x0915, r24
				}
			}

			// Check checksum when all data received and packet size determined
			if ((packet_size > 0) && (bytecount == (packet_size - 1)))
    8ed2:	80 91 15 09 	lds	r24, 0x0915
    8ed6:	88 23       	and	r24, r24
    8ed8:	29 f3       	breq	.-54     	; 0x8ea4 <__vector_20+0x5a8>
    8eda:	20 91 f0 08 	lds	r18, 0x08F0
    8ede:	80 91 15 09 	lds	r24, 0x0915
    8ee2:	30 e0       	ldi	r19, 0x00	; 0
    8ee4:	90 e0       	ldi	r25, 0x00	; 0
    8ee6:	01 97       	sbiw	r24, 0x01	; 1
    8ee8:	28 17       	cp	r18, r24
    8eea:	39 07       	cpc	r19, r25
    8eec:	d9 f6       	brne	.-74     	; 0x8ea4 <__vector_20+0x5a8>
    8eee:	80 e0       	ldi	r24, 0x00	; 0
    8ef0:	90 e0       	ldi	r25, 0x00	; 0
    8ef2:	c0 e0       	ldi	r28, 0x00	; 0
			{
				crc = 0;
			
				// Add up checksum for all bytes up to but not including the checksum
				for (j = 0; j < (packet_size - 2); j++)
    8ef4:	4c 2f       	mov	r20, r28
    8ef6:	50 e0       	ldi	r21, 0x00	; 0
    8ef8:	20 91 15 09 	lds	r18, 0x0915
    8efc:	30 e0       	ldi	r19, 0x00	; 0
    8efe:	22 50       	subi	r18, 0x02	; 2
    8f00:	31 09       	sbc	r19, r1
    8f02:	42 17       	cp	r20, r18
    8f04:	53 07       	cpc	r21, r19
    8f06:	44 f4       	brge	.+16     	; 0x8f18 <__vector_20+0x61c>
				{
					crc = CRC16(crc, sBuffer[j]);
    8f08:	fa 01       	movw	r30, r20
    8f0a:	e4 58       	subi	r30, 0x84	; 132
    8f0c:	fa 4f       	sbci	r31, 0xFA	; 250
    8f0e:	60 81       	ld	r22, Z
    8f10:	0e 94 aa 6c 	call	0xd954	; 0xd954 <CRC16>
			if ((packet_size > 0) && (bytecount == (packet_size - 1)))
			{
				crc = 0;
			
				// Add up checksum for all bytes up to but not including the checksum
				for (j = 0; j < (packet_size - 2); j++)
    8f14:	cf 5f       	subi	r28, 0xFF	; 255
    8f16:	ee cf       	rjmp	.-36     	; 0x8ef4 <__vector_20+0x5f8>
				{
					crc = CRC16(crc, sBuffer[j]);
				}
			
				// Extract the packet's own checksum
				checkcrc = ((uint16_t)(sBuffer[packet_size - 2] << 8) | (uint16_t)(sBuffer[packet_size - 1]));
    8f18:	a0 91 15 09 	lds	r26, 0x0915
    8f1c:	e0 91 15 09 	lds	r30, 0x0915
    8f20:	b0 e0       	ldi	r27, 0x00	; 0
    8f22:	a6 58       	subi	r26, 0x86	; 134
    8f24:	ba 4f       	sbci	r27, 0xFA	; 250
    8f26:	2c 91       	ld	r18, X
    8f28:	30 e0       	ldi	r19, 0x00	; 0
    8f2a:	32 2f       	mov	r19, r18
    8f2c:	22 27       	eor	r18, r18
    8f2e:	f0 e0       	ldi	r31, 0x00	; 0
    8f30:	e5 58       	subi	r30, 0x85	; 133
    8f32:	fa 4f       	sbci	r31, 0xFA	; 250
    8f34:	40 81       	ld	r20, Z
    8f36:	24 2b       	or	r18, r20
				
				// Compare with the calculated one and process data if ok
				if (checkcrc == crc)
    8f38:	28 17       	cp	r18, r24
    8f3a:	39 07       	cpc	r19, r25
    8f3c:	09 f0       	breq	.+2      	; 0x8f40 <__vector_20+0x644>
    8f3e:	b2 cf       	rjmp	.-156    	; 0x8ea4 <__vector_20+0x5a8>
				{
					// RC sync established
					Interrupted = true;
    8f40:	81 e0       	ldi	r24, 0x01	; 1
    8f42:	80 93 ee 08 	sts	0x08EE, r24
					
					// Reset signal loss timer and Overdue state 					
					Servo_TCNT2 = TCNT2;
    8f46:	80 91 b2 00 	lds	r24, 0x00B2
    8f4a:	80 93 2c 05 	sts	0x052C, r24
					RC_Timeout = 0;
    8f4e:	10 92 2b 05 	sts	0x052B, r1
    8f52:	10 92 2a 05 	sts	0x052A, r1
					Overdue = false;
    8f56:	10 92 2e 05 	sts	0x052E, r1
    8f5a:	20 e0       	ldi	r18, 0x00	; 0
    8f5c:	30 e0       	ldi	r19, 0x00	; 0
			
					// Copy unconverted channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Combine bytes from buffer
						TempRxChannel[j] = (uint16_t)(sBuffer[(j << 1) + 3] << 8) | (sBuffer[(j << 1) + 4]);
    8f5e:	a9 01       	movw	r20, r18
    8f60:	44 0f       	add	r20, r20
    8f62:	55 1f       	adc	r21, r21
    8f64:	fa 01       	movw	r30, r20
    8f66:	e4 58       	subi	r30, 0x84	; 132
    8f68:	fa 4f       	sbci	r31, 0xFA	; 250
    8f6a:	83 81       	ldd	r24, Z+3	; 0x03
    8f6c:	90 e0       	ldi	r25, 0x00	; 0
    8f6e:	98 2f       	mov	r25, r24
    8f70:	88 27       	eor	r24, r24
    8f72:	64 81       	ldd	r22, Z+4	; 0x04
    8f74:	86 2b       	or	r24, r22
    8f76:	fa 01       	movw	r30, r20
    8f78:	ef 50       	subi	r30, 0x0F	; 15
    8f7a:	f7 4f       	sbci	r31, 0xF7	; 247
    8f7c:	91 83       	std	Z+1, r25	; 0x01
    8f7e:	80 83       	st	Z, r24
    8f80:	2f 5f       	subi	r18, 0xFF	; 255
    8f82:	3f 4f       	sbci	r19, 0xFF	; 255
					Servo_TCNT2 = TCNT2;
					RC_Timeout = 0;
					Overdue = false;
			
					// Copy unconverted channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    8f84:	28 30       	cpi	r18, 0x08	; 8
    8f86:	31 05       	cpc	r19, r1
    8f88:	51 f7       	brne	.-44     	; 0x8f5e <__vector_20+0x662>
    8f8a:	20 e0       	ldi	r18, 0x00	; 0
    8f8c:	30 e0       	ldi	r19, 0x00	; 0

					// Convert to system values
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Subtract SUMD offset
						itemp16 = TempRxChannel[j] - 12000;
    8f8e:	f9 01       	movw	r30, r18
    8f90:	ee 0f       	add	r30, r30
    8f92:	ff 1f       	adc	r31, r31
    8f94:	ef 50       	subi	r30, 0x0F	; 15
    8f96:	f7 4f       	sbci	r31, 0xF7	; 247
    8f98:	80 81       	ld	r24, Z
    8f9a:	91 81       	ldd	r25, Z+1	; 0x01
    8f9c:	80 5e       	subi	r24, 0xE0	; 224
    8f9e:	9e 42       	sbci	r25, 0x2E	; 46
						
						// Expand into OpenAero2 units x0.3125 (0.3125)	(1250/4000)
						// 0.25 + 0.0625 (1/4 + 1/16)
						itemp16 = (itemp16 >> 2) + (itemp16 >> 4);
    8fa0:	ac 01       	movw	r20, r24
    8fa2:	55 95       	asr	r21
    8fa4:	47 95       	ror	r20
    8fa6:	55 95       	asr	r21
    8fa8:	47 95       	ror	r20
    8faa:	74 e0       	ldi	r23, 0x04	; 4
    8fac:	95 95       	asr	r25
    8fae:	87 95       	ror	r24
    8fb0:	7a 95       	dec	r23
    8fb2:	e1 f7       	brne	.-8      	; 0x8fac <__vector_20+0x6b0>
    8fb4:	f9 01       	movw	r30, r18
    8fb6:	e7 5c       	subi	r30, 0xC7	; 199
    8fb8:	f9 4f       	sbci	r31, 0xF9	; 249

						// Add back in OpenAero2 offset
						RxChannel[Config.ChannelOrder[j]] = itemp16 + 3750;
    8fba:	e1 81       	ldd	r30, Z+1	; 0x01
						// Subtract SUMD offset
						itemp16 = TempRxChannel[j] - 12000;
						
						// Expand into OpenAero2 units x0.3125 (0.3125)	(1250/4000)
						// 0.25 + 0.0625 (1/4 + 1/16)
						itemp16 = (itemp16 >> 2) + (itemp16 >> 4);
    8fbc:	84 0f       	add	r24, r20
    8fbe:	95 1f       	adc	r25, r21

						// Add back in OpenAero2 offset
						RxChannel[Config.ChannelOrder[j]] = itemp16 + 3750;
    8fc0:	8a 55       	subi	r24, 0x5A	; 90
    8fc2:	91 4f       	sbci	r25, 0xF1	; 241
    8fc4:	ee 0f       	add	r30, r30
    8fc6:	ff 0b       	sbc	r31, r31
    8fc8:	e2 52       	subi	r30, 0x22	; 34
    8fca:	f7 4f       	sbci	r31, 0xF7	; 247
    8fcc:	91 83       	std	Z+1, r25	; 0x01
    8fce:	80 83       	st	Z, r24
    8fd0:	2f 5f       	subi	r18, 0xFF	; 255
    8fd2:	3f 4f       	sbci	r19, 0xFF	; 255
						// Combine bytes from buffer
						TempRxChannel[j] = (uint16_t)(sBuffer[(j << 1) + 3] << 8) | (sBuffer[(j << 1) + 4]);
					}

					// Convert to system values
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    8fd4:	28 30       	cpi	r18, 0x08	; 8
    8fd6:	31 05       	cpc	r19, r1
    8fd8:	d1 f6       	brne	.-76     	; 0x8f8e <__vector_20+0x692>
    8fda:	64 cf       	rjmp	.-312    	; 0x8ea4 <__vector_20+0x5a8>

		// Increment byte count
		bytecount++;
	
	} // Valid data
}
    8fdc:	ff 91       	pop	r31
    8fde:	ef 91       	pop	r30
    8fe0:	df 91       	pop	r29
    8fe2:	cf 91       	pop	r28
    8fe4:	bf 91       	pop	r27
    8fe6:	af 91       	pop	r26
    8fe8:	9f 91       	pop	r25
    8fea:	8f 91       	pop	r24
    8fec:	7f 91       	pop	r23
    8fee:	6f 91       	pop	r22
    8ff0:	5f 91       	pop	r21
    8ff2:	4f 91       	pop	r20
    8ff4:	3f 91       	pop	r19
    8ff6:	2f 91       	pop	r18
    8ff8:	0f 90       	pop	r0
    8ffa:	0f be       	out	0x3f, r0	; 63
    8ffc:	0f 90       	pop	r0
    8ffe:	1f 90       	pop	r1
    9000:	18 95       	reti

00009002 <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    9002:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    9004:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    9008:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    900c:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    900e:	e1 ec       	ldi	r30, 0xC1	; 193
    9010:	f0 e0       	ldi	r31, 0x00	; 0
    9012:	80 81       	ld	r24, Z
    9014:	8f 7e       	andi	r24, 0xEF	; 239
    9016:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    9018:	80 81       	ld	r24, Z
    901a:	8f 77       	andi	r24, 0x7F	; 127
    901c:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    901e:	8f e0       	ldi	r24, 0x0F	; 15
    9020:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    9022:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    9024:	78 94       	sei
    9026:	08 95       	ret

00009028 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    9028:	f8 94       	cli
	
	switch (Config.RxMode)
    902a:	80 91 62 06 	lds	r24, 0x0662
    902e:	81 30       	cpi	r24, 0x01	; 1
    9030:	e9 f0       	breq	.+58     	; 0x906c <init_int+0x44>
    9032:	44 f4       	brge	.+16     	; 0x9044 <init_int+0x1c>
    9034:	81 11       	cpse	r24, r1
    9036:	30 c0       	rjmp	.+96     	; 0x9098 <init_int+0x70>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    9038:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    903c:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    9040:	84 e0       	ldi	r24, 0x04	; 4
    9042:	1f c0       	rjmp	.+62     	; 0x9082 <init_int+0x5a>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    9044:	87 30       	cpi	r24, 0x07	; 7
    9046:	44 f5       	brge	.+80     	; 0x9098 <init_int+0x70>
		case MODEB:
		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    9048:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    904c:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    9050:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    9052:	80 91 c1 00 	lds	r24, 0x00C1
    9056:	80 68       	ori	r24, 0x80	; 128
    9058:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    905c:	80 91 c1 00 	lds	r24, 0x00C1
    9060:	80 61       	ori	r24, 0x10	; 16
    9062:	80 93 c1 00 	sts	0x00C1, r24
			
			packet_size = 0;					// Reset packet size until new data comes in
    9066:	10 92 15 09 	sts	0x0915, r1
			
			break;
    906a:	16 c0       	rjmp	.+44     	; 0x9098 <init_int+0x70>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    906c:	80 91 6c 00 	lds	r24, 0x006C
    9070:	81 60       	ori	r24, 0x01	; 1
    9072:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    9076:	80 91 73 00 	lds	r24, 0x0073
    907a:	81 60       	ori	r24, 0x01	; 1
    907c:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    9080:	87 e0       	ldi	r24, 0x07	; 7
    9082:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    9084:	80 91 c1 00 	lds	r24, 0x00C1
    9088:	8f 77       	andi	r24, 0x7F	; 127
    908a:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    908e:	80 91 c1 00 	lds	r24, 0x00C1
    9092:	8f 7e       	andi	r24, 0xEF	; 239
    9094:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    9098:	8f e0       	ldi	r24, 0x0F	; 15
    909a:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    909c:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    909e:	78 94       	sei
    90a0:	08 95       	ret

000090a2 <menu_channel>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_channel(void)
{
    90a2:	8f 92       	push	r8
    90a4:	9f 92       	push	r9
    90a6:	af 92       	push	r10
    90a8:	bf 92       	push	r11
    90aa:	cf 92       	push	r12
    90ac:	df 92       	push	r13
    90ae:	ef 92       	push	r14
    90b0:	ff 92       	push	r15
    90b2:	0f 93       	push	r16
    90b4:	1f 93       	push	r17
    90b6:	cf 93       	push	r28
    90b8:	df 93       	push	r29
    90ba:	00 d0       	rcall	.+0      	; 0x90bc <menu_channel+0x1a>
    90bc:	00 d0       	rcall	.+0      	; 0x90be <menu_channel+0x1c>
    90be:	1f 92       	push	r1
    90c0:	cd b7       	in	r28, 0x3d	; 61
    90c2:	de b7       	in	r29, 0x3e	; 62
	menu_range_t range;
	uint8_t text_link;
	uint16_t reference = CHSTART;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    90c4:	80 91 08 05 	lds	r24, 0x0508
    90c8:	88 23       	and	r24, r24
    90ca:	41 f0       	breq	.+16     	; 0x90dc <menu_channel+0x3a>
	{
		sub_top = CHSTART;
    90cc:	80 e8       	ldi	r24, 0x80	; 128
    90ce:	91 e0       	ldi	r25, 0x01	; 1
    90d0:	90 93 4f 05 	sts	0x054F, r25
    90d4:	80 93 4e 05 	sts	0x054E, r24
		menu_flag = 0;
    90d8:	10 92 08 05 	sts	0x0508, r1
	while(button != BACK)
	{
		value_ptr = &Config.CustomChannelOrder[0];

		// Print menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)Ch_menu_ranges, 0, (const uint16_t*)ChMenuOffsets, (const uint16_t*)ChMenuText, cursor);
    90dc:	84 e9       	ldi	r24, 0x94	; 148
    90de:	98 e0       	ldi	r25, 0x08	; 8
    90e0:	78 e0       	ldi	r23, 0x08	; 8
    90e2:	97 2e       	mov	r9, r23
    90e4:	98 0e       	add	r9, r24
	{
		sub_top = CHSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    90e6:	80 91 1f 09 	lds	r24, 0x091F
    90ea:	80 37       	cpi	r24, 0x70	; 112
    90ec:	09 f4       	brne	.+2      	; 0x90f0 <menu_channel+0x4e>
    90ee:	73 c0       	rjmp	.+230    	; 0x91d6 <menu_channel+0x134>
	{
		value_ptr = &Config.CustomChannelOrder[0];

		// Print menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)Ch_menu_ranges, 0, (const uint16_t*)ChMenuOffsets, (const uint16_t*)ChMenuText, cursor);
    90f0:	a0 90 04 05 	lds	r10, 0x0504
    90f4:	b0 90 05 05 	lds	r11, 0x0505
    90f8:	3b e1       	ldi	r19, 0x1B	; 27
    90fa:	c3 2e       	mov	r12, r19
    90fc:	35 e2       	ldi	r19, 0x25	; 37
    90fe:	d3 2e       	mov	r13, r19
    9100:	4b e0       	ldi	r20, 0x0B	; 11
    9102:	e4 2e       	mov	r14, r20
    9104:	45 e2       	ldi	r20, 0x25	; 37
    9106:	f4 2e       	mov	r15, r20
    9108:	00 e0       	ldi	r16, 0x00	; 0
    910a:	23 ee       	ldi	r18, 0xE3	; 227
    910c:	34 e2       	ldi	r19, 0x24	; 36
    910e:	44 e9       	ldi	r20, 0x94	; 148
    9110:	58 e0       	ldi	r21, 0x08	; 8
    9112:	60 e8       	ldi	r22, 0x80	; 128
    9114:	71 e0       	ldi	r23, 0x01	; 1
    9116:	80 91 4e 05 	lds	r24, 0x054E
    911a:	90 91 4f 05 	lds	r25, 0x054F
    911e:	0e 94 54 51 	call	0xa2a8	; 0xa2a8 <print_menu_items>

		// Handle menu changes
		update_menu(CHITEMS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    9122:	59 e4       	ldi	r21, 0x49	; 73
    9124:	c5 2e       	mov	r12, r21
    9126:	55 e0       	ldi	r21, 0x05	; 5
    9128:	d5 2e       	mov	r13, r21
    912a:	6e e4       	ldi	r22, 0x4E	; 78
    912c:	e6 2e       	mov	r14, r22
    912e:	65 e0       	ldi	r22, 0x05	; 5
    9130:	f6 2e       	mov	r15, r22
    9132:	04 e0       	ldi	r16, 0x04	; 4
    9134:	15 e0       	ldi	r17, 0x05	; 5
    9136:	20 91 1f 09 	lds	r18, 0x091F
    913a:	40 e0       	ldi	r20, 0x00	; 0
    913c:	50 e0       	ldi	r21, 0x00	; 0
    913e:	60 e8       	ldi	r22, 0x80	; 128
    9140:	71 e0       	ldi	r23, 0x01	; 1
    9142:	88 e0       	ldi	r24, 0x08	; 8
    9144:	90 e0       	ldi	r25, 0x00	; 0
    9146:	0e 94 83 50 	call	0xa106	; 0xa106 <update_menu>
		range = get_menu_range ((const unsigned char*)Ch_menu_ranges, (menu_temp - reference));
    914a:	60 91 49 05 	lds	r22, 0x0549
    914e:	60 58       	subi	r22, 0x80	; 128
    9150:	83 ee       	ldi	r24, 0xE3	; 227
    9152:	94 e2       	ldi	r25, 0x24	; 36
    9154:	0e 94 0a 4a 	call	0x9414	; 0x9414 <get_menu_range>
    9158:	29 83       	std	Y+1, r18	; 0x01
    915a:	3a 83       	std	Y+2, r19	; 0x02
    915c:	4b 83       	std	Y+3, r20	; 0x03
    915e:	5c 83       	std	Y+4, r21	; 0x04
    9160:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    9162:	80 91 1f 09 	lds	r24, 0x091F
    9166:	80 3e       	cpi	r24, 0xE0	; 224
    9168:	f9 f4       	brne	.+62     	; 0x91a8 <menu_channel+0x106>
		{
			text_link = pgm_read_word(&ChMenuText[menu_temp - reference]);
    916a:	80 91 49 05 	lds	r24, 0x0549
    916e:	90 91 4a 05 	lds	r25, 0x054A
    9172:	bc 01       	movw	r22, r24
    9174:	60 58       	subi	r22, 0x80	; 128
    9176:	71 40       	sbci	r23, 0x01	; 1
    9178:	fb 01       	movw	r30, r22
    917a:	ee 0f       	add	r30, r30
    917c:	ff 1f       	adc	r31, r31
    917e:	e5 5e       	subi	r30, 0xE5	; 229
    9180:	fa 4d       	sbci	r31, 0xDA	; 218
    9182:	a5 90       	lpm	r10, Z+
    9184:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - reference), 1, range, 0, text_link, false, 0);
    9186:	bb 24       	eor	r11, r11
    9188:	6c 56       	subi	r22, 0x6C	; 108
    918a:	77 4f       	sbci	r23, 0xF7	; 247
    918c:	1f 92       	push	r1
    918e:	1f 92       	push	r1
    9190:	81 2c       	mov	r8, r1
    9192:	c1 2c       	mov	r12, r1
    9194:	e9 80       	ldd	r14, Y+1	; 0x01
    9196:	fa 80       	ldd	r15, Y+2	; 0x02
    9198:	0b 81       	ldd	r16, Y+3	; 0x03
    919a:	1c 81       	ldd	r17, Y+4	; 0x04
    919c:	2d 81       	ldd	r18, Y+5	; 0x05
    919e:	41 e0       	ldi	r20, 0x01	; 1
    91a0:	0e 94 98 4a 	call	0x9530	; 0x9530 <do_menu_item>
    91a4:	0f 90       	pop	r0
    91a6:	0f 90       	pop	r0
		}

		// Update when exiting
		if (button == ENTER)
    91a8:	80 91 1f 09 	lds	r24, 0x091F
    91ac:	80 3e       	cpi	r24, 0xE0	; 224
    91ae:	09 f0       	breq	.+2      	; 0x91b2 <menu_channel+0x110>
    91b0:	9a cf       	rjmp	.-204    	; 0x90e6 <menu_channel+0x44>
		{
			// Update current channel order with the custom one on exit
			if (Config.TxSeq == CUSTOM)
    91b2:	80 91 65 06 	lds	r24, 0x0665
    91b6:	83 30       	cpi	r24, 0x03	; 3
    91b8:	49 f4       	brne	.+18     	; 0x91cc <menu_channel+0x12a>
    91ba:	e4 e9       	ldi	r30, 0x94	; 148
    91bc:	f8 e0       	ldi	r31, 0x08	; 8
			{
				for (i = 0; i < MAX_RC_CHANNELS; i++)
				{
					Config.ChannelOrder[i] = Config.CustomChannelOrder[i];
    91be:	81 91       	ld	r24, Z+
    91c0:	df 01       	movw	r26, r30
    91c2:	ab 55       	subi	r26, 0x5B	; 91
    91c4:	b2 40       	sbci	r27, 0x02	; 2
    91c6:	8c 93       	st	X, r24
		if (button == ENTER)
		{
			// Update current channel order with the custom one on exit
			if (Config.TxSeq == CUSTOM)
			{
				for (i = 0; i < MAX_RC_CHANNELS; i++)
    91c8:	9e 12       	cpse	r9, r30
    91ca:	f9 cf       	rjmp	.-14     	; 0x91be <menu_channel+0x11c>
				{
					Config.ChannelOrder[i] = Config.CustomChannelOrder[i];
				}
			}
			
			Save_Config_to_EEPROM(); // Save value and return
    91cc:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    91d0:	0e 94 9a 53 	call	0xa734	; 0xa734 <Wait_BUTTON4>
    91d4:	88 cf       	rjmp	.-240    	; 0x90e6 <menu_channel+0x44>
		}
	}
}
    91d6:	0f 90       	pop	r0
    91d8:	0f 90       	pop	r0
    91da:	0f 90       	pop	r0
    91dc:	0f 90       	pop	r0
    91de:	0f 90       	pop	r0
    91e0:	df 91       	pop	r29
    91e2:	cf 91       	pop	r28
    91e4:	1f 91       	pop	r17
    91e6:	0f 91       	pop	r16
    91e8:	ff 90       	pop	r15
    91ea:	ef 90       	pop	r14
    91ec:	df 90       	pop	r13
    91ee:	cf 90       	pop	r12
    91f0:	bf 90       	pop	r11
    91f2:	af 90       	pop	r10
    91f4:	9f 90       	pop	r9
    91f6:	8f 90       	pop	r8
    91f8:	08 95       	ret

000091fa <menu_curves>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_curves(void)
{
    91fa:	af 92       	push	r10
    91fc:	bf 92       	push	r11
    91fe:	cf 92       	push	r12
    9200:	df 92       	push	r13
    9202:	ef 92       	push	r14
    9204:	ff 92       	push	r15
    9206:	0f 93       	push	r16
    9208:	1f 93       	push	r17
    920a:	cf 93       	push	r28
	int8_t *value_ptr;
	uint16_t reference = CURVESSTARTE;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    920c:	80 91 08 05 	lds	r24, 0x0508
    9210:	88 23       	and	r24, r24
    9212:	41 f0       	breq	.+16     	; 0x9224 <menu_curves+0x2a>
	{
		sub_top = CURVESSTARTE;			
    9214:	83 e9       	ldi	r24, 0x93	; 147
    9216:	91 e0       	ldi	r25, 0x01	; 1
    9218:	90 93 4f 05 	sts	0x054F, r25
    921c:	80 93 4e 05 	sts	0x054E, r24
		menu_flag = 0;
    9220:	10 92 08 05 	sts	0x0508, r1

		// Stop unwanted exit to main menu
		if (button == ABORT)
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
			button = NONE;
    9224:	c0 ef       	ldi	r28, 0xF0	; 240
	{
		sub_top = CURVESSTARTE;			
		menu_flag = 0;
	}

	while(button != BACK)
    9226:	80 91 1f 09 	lds	r24, 0x091F
    922a:	80 37       	cpi	r24, 0x70	; 112
    922c:	09 f4       	brne	.+2      	; 0x9230 <menu_curves+0x36>
    922e:	4b c0       	rjmp	.+150    	; 0x92c6 <menu_curves+0xcc>
	{
		value_ptr = &Config.Curve[0].Point1;

		// Print top level menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)Curves_menu_ranges, 0, (const uint16_t*)CurvesMenuOffsets, (const uint16_t*)CurvesMenuText, cursor);
    9230:	a0 90 04 05 	lds	r10, 0x0504
    9234:	b0 90 05 05 	lds	r11, 0x0505
    9238:	87 e2       	ldi	r24, 0x27	; 39
    923a:	c8 2e       	mov	r12, r24
    923c:	86 e2       	ldi	r24, 0x26	; 38
    923e:	d8 2e       	mov	r13, r24
    9240:	9b e1       	ldi	r25, 0x1B	; 27
    9242:	e9 2e       	mov	r14, r25
    9244:	96 e2       	ldi	r25, 0x26	; 38
    9246:	f9 2e       	mov	r15, r25
    9248:	00 e0       	ldi	r16, 0x00	; 0
    924a:	2b e2       	ldi	r18, 0x2B	; 43
    924c:	35 e2       	ldi	r19, 0x25	; 37
    924e:	44 e6       	ldi	r20, 0x64	; 100
    9250:	58 e0       	ldi	r21, 0x08	; 8
    9252:	63 e9       	ldi	r22, 0x93	; 147
    9254:	71 e0       	ldi	r23, 0x01	; 1
    9256:	80 91 4e 05 	lds	r24, 0x054E
    925a:	90 91 4f 05 	lds	r25, 0x054F
    925e:	0e 94 54 51 	call	0xa2a8	; 0xa2a8 <print_menu_items>

		// Handle menu navigation
		update_menu(NUMBEROFCURVES, reference, 0, button, &cursor, &sub_top, &menu_temp);
    9262:	29 e4       	ldi	r18, 0x49	; 73
    9264:	c2 2e       	mov	r12, r18
    9266:	25 e0       	ldi	r18, 0x05	; 5
    9268:	d2 2e       	mov	r13, r18
    926a:	3e e4       	ldi	r19, 0x4E	; 78
    926c:	e3 2e       	mov	r14, r19
    926e:	35 e0       	ldi	r19, 0x05	; 5
    9270:	f3 2e       	mov	r15, r19
    9272:	04 e0       	ldi	r16, 0x04	; 4
    9274:	15 e0       	ldi	r17, 0x05	; 5
    9276:	20 91 1f 09 	lds	r18, 0x091F
    927a:	40 e0       	ldi	r20, 0x00	; 0
    927c:	50 e0       	ldi	r21, 0x00	; 0
    927e:	63 e9       	ldi	r22, 0x93	; 147
    9280:	71 e0       	ldi	r23, 0x01	; 1
    9282:	86 e0       	ldi	r24, 0x06	; 6
    9284:	90 e0       	ldi	r25, 0x00	; 0
    9286:	0e 94 83 50 	call	0xa106	; 0xa106 <update_menu>

		// Edit selected curve
		if (button == ENTER)
    928a:	80 91 1f 09 	lds	r24, 0x091F
    928e:	80 3e       	cpi	r24, 0xE0	; 224
    9290:	31 f4       	brne	.+12     	; 0x929e <menu_curves+0xa4>
		{
			edit_curve_item(menu_temp - reference, CURVE);
    9292:	80 91 49 05 	lds	r24, 0x0549
    9296:	64 e0       	ldi	r22, 0x04	; 4
    9298:	83 59       	subi	r24, 0x93	; 147
    929a:	0e 94 81 4c 	call	0x9902	; 0x9902 <edit_curve_item>
		}

		// Stop unwanted exit to main menu
		if (button == ABORT)
    929e:	80 91 1f 09 	lds	r24, 0x091F
    92a2:	80 3a       	cpi	r24, 0xA0	; 160
    92a4:	21 f4       	brne	.+8      	; 0x92ae <menu_curves+0xb4>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    92a6:	0e 94 04 53 	call	0xa608	; 0xa608 <Wait_BUTTON1>
			button = NONE;
    92aa:	c0 93 1f 09 	sts	0x091F, r28
		}

		// Save and exit 
		if (button == ENTER)
    92ae:	80 91 1f 09 	lds	r24, 0x091F
    92b2:	80 3e       	cpi	r24, 0xE0	; 224
    92b4:	09 f0       	breq	.+2      	; 0x92b8 <menu_curves+0xbe>
    92b6:	b7 cf       	rjmp	.-146    	; 0x9226 <menu_curves+0x2c>
		{
			Save_Config_to_EEPROM(); // Save value and return
    92b8:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    92bc:	0e 94 9a 53 	call	0xa734	; 0xa734 <Wait_BUTTON4>
			Wait_BUTTON1();	
    92c0:	0e 94 04 53 	call	0xa608	; 0xa608 <Wait_BUTTON1>
    92c4:	b0 cf       	rjmp	.-160    	; 0x9226 <menu_curves+0x2c>
		}
	}
}
    92c6:	cf 91       	pop	r28
    92c8:	1f 91       	pop	r17
    92ca:	0f 91       	pop	r16
    92cc:	ff 90       	pop	r15
    92ce:	ef 90       	pop	r14
    92d0:	df 90       	pop	r13
    92d2:	cf 90       	pop	r12
    92d4:	bf 90       	pop	r11
    92d6:	af 90       	pop	r10
    92d8:	08 95       	ret

000092da <print_menu_frame>:
//************************************************************
// Print basic menu frame
// style = menu style
//************************************************************
void print_menu_frame(uint8_t style)
{
    92da:	cf 93       	push	r28
    92dc:	c8 2f       	mov	r28, r24
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    92de:	2b e3       	ldi	r18, 0x3B	; 59
    92e0:	30 e0       	ldi	r19, 0x00	; 0
    92e2:	46 e2       	ldi	r20, 0x26	; 38
    92e4:	50 e0       	ldi	r21, 0x00	; 0
    92e6:	6f ef       	ldi	r22, 0xFF	; 255
    92e8:	71 e0       	ldi	r23, 0x01	; 1
    92ea:	8a e0       	ldi	r24, 0x0A	; 10
    92ec:	90 e0       	ldi	r25, 0x00	; 0
    92ee:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    92f2:	2b e3       	ldi	r18, 0x3B	; 59
    92f4:	30 e0       	ldi	r19, 0x00	; 0
    92f6:	40 e5       	ldi	r20, 0x50	; 80
    92f8:	50 e0       	ldi	r21, 0x00	; 0
    92fa:	6f ef       	ldi	r22, 0xFF	; 255
    92fc:	71 e0       	ldi	r23, 0x01	; 1
    92fe:	89 e0       	ldi	r24, 0x09	; 9
    9300:	90 e0       	ldi	r25, 0x00	; 0
    9302:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

	switch (style)
    9306:	c3 30       	cpi	r28, 0x03	; 3
    9308:	41 f1       	breq	.+80     	; 0x935a <print_menu_frame+0x80>
    930a:	70 f4       	brcc	.+28     	; 0x9328 <print_menu_frame+0x4e>
    930c:	cc 23       	and	r28, r28
    930e:	c1 f1       	breq	.+112    	; 0x9380 <print_menu_frame+0xa6>
    9310:	c1 30       	cpi	r28, 0x01	; 1
    9312:	09 f0       	breq	.+2      	; 0x9316 <print_menu_frame+0x3c>
    9314:	7a c0       	rjmp	.+244    	; 0x940a <print_menu_frame+0x130>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
			break;
			
		case EDIT:
			// For editing items
			LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Def.
    9316:	26 e3       	ldi	r18, 0x36	; 54
    9318:	30 e0       	ldi	r19, 0x00	; 0
    931a:	40 e0       	ldi	r20, 0x00	; 0
    931c:	50 e0       	ldi	r21, 0x00	; 0
    931e:	6d e8       	ldi	r22, 0x8D	; 141
    9320:	7f e0       	ldi	r23, 0x0F	; 15
    9322:	80 e1       	ldi	r24, 0x10	; 16
    9324:	90 e0       	ldi	r25, 0x00	; 0
    9326:	0e c0       	rjmp	.+28     	; 0x9344 <print_menu_frame+0x6a>
void print_menu_frame(uint8_t style)
{
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down

	switch (style)
    9328:	c5 30       	cpi	r28, 0x05	; 5
    932a:	e9 f1       	breq	.+122    	; 0x93a6 <print_menu_frame+0xcc>
    932c:	48 f1       	brcs	.+82     	; 0x9380 <print_menu_frame+0xa6>
    932e:	c0 3a       	cpi	r28, 0xA0	; 160
    9330:	09 f0       	breq	.+2      	; 0x9334 <print_menu_frame+0x5a>
    9332:	6b c0       	rjmp	.+214    	; 0x940a <print_menu_frame+0x130>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    9334:	26 e3       	ldi	r18, 0x36	; 54
    9336:	30 e0       	ldi	r19, 0x00	; 0
    9338:	40 e0       	ldi	r20, 0x00	; 0
    933a:	50 e0       	ldi	r21, 0x00	; 0
    933c:	6d e8       	ldi	r22, 0x8D	; 141
    933e:	7f e0       	ldi	r23, 0x0F	; 15
    9340:	88 e1       	ldi	r24, 0x18	; 24
    9342:	91 e0       	ldi	r25, 0x01	; 1
    9344:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    9348:	26 e3       	ldi	r18, 0x36	; 54
    934a:	30 e0       	ldi	r19, 0x00	; 0
    934c:	47 e6       	ldi	r20, 0x67	; 103
    934e:	50 e0       	ldi	r21, 0x00	; 0
    9350:	6d e8       	ldi	r22, 0x8D	; 141
    9352:	7f e0       	ldi	r23, 0x0F	; 15
    9354:	81 e1       	ldi	r24, 0x11	; 17
    9356:	90 e0       	ldi	r25, 0x00	; 0
    9358:	56 c0       	rjmp	.+172    	; 0x9406 <print_menu_frame+0x12c>
			break;
			
		case LOG:
			// Clear or exit
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    935a:	29 e3       	ldi	r18, 0x39	; 57
    935c:	30 e0       	ldi	r19, 0x00	; 0
    935e:	40 e0       	ldi	r20, 0x00	; 0
    9360:	50 e0       	ldi	r21, 0x00	; 0
    9362:	6f ef       	ldi	r22, 0xFF	; 255
    9364:	71 e0       	ldi	r23, 0x01	; 1
    9366:	8c e0       	ldi	r24, 0x0C	; 12
    9368:	90 e0       	ldi	r25, 0x00	; 0
    936a:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			LCD_Display_Text(291, (const unsigned char*)Verdana8, 100, 54);	// Clear
    936e:	26 e3       	ldi	r18, 0x36	; 54
    9370:	30 e0       	ldi	r19, 0x00	; 0
    9372:	44 e6       	ldi	r20, 0x64	; 100
    9374:	50 e0       	ldi	r21, 0x00	; 0
    9376:	6d e8       	ldi	r22, 0x8D	; 141
    9378:	7f e0       	ldi	r23, 0x0F	; 15
    937a:	83 e2       	ldi	r24, 0x23	; 35
    937c:	91 e0       	ldi	r25, 0x01	; 1
    937e:	43 c0       	rjmp	.+134    	; 0x9406 <print_menu_frame+0x12c>
			break;			

		case CURVE:
			// Curve edit screen
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    9380:	29 e3       	ldi	r18, 0x39	; 57
    9382:	30 e0       	ldi	r19, 0x00	; 0
    9384:	40 e0       	ldi	r20, 0x00	; 0
    9386:	50 e0       	ldi	r21, 0x00	; 0
    9388:	6f ef       	ldi	r22, 0xFF	; 255
    938a:	71 e0       	ldi	r23, 0x01	; 1
    938c:	8c e0       	ldi	r24, 0x0C	; 12
    938e:	90 e0       	ldi	r25, 0x00	; 0
    9390:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    9394:	29 e3       	ldi	r18, 0x39	; 57
    9396:	30 e0       	ldi	r19, 0x00	; 0
    9398:	48 e7       	ldi	r20, 0x78	; 120
    939a:	50 e0       	ldi	r21, 0x00	; 0
    939c:	6f ef       	ldi	r22, 0xFF	; 255
    939e:	71 e0       	ldi	r23, 0x01	; 1
    93a0:	8b e0       	ldi	r24, 0x0B	; 11
    93a2:	90 e0       	ldi	r25, 0x00	; 0
    93a4:	30 c0       	rjmp	.+96     	; 0x9406 <print_menu_frame+0x12c>
			break;

		case OFFSET:
			// Offset curve edit screen
			LCD_Display_Text(48, (const unsigned char*)Verdana8, 10, 54); 	// P1
    93a6:	26 e3       	ldi	r18, 0x36	; 54
    93a8:	30 e0       	ldi	r19, 0x00	; 0
    93aa:	4a e0       	ldi	r20, 0x0A	; 10
    93ac:	50 e0       	ldi	r21, 0x00	; 0
    93ae:	6d e8       	ldi	r22, 0x8D	; 141
    93b0:	7f e0       	ldi	r23, 0x0F	; 15
    93b2:	80 e3       	ldi	r24, 0x30	; 48
    93b4:	90 e0       	ldi	r25, 0x00	; 0
    93b6:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    93ba:	29 e3       	ldi	r18, 0x39	; 57
    93bc:	30 e0       	ldi	r19, 0x00	; 0
    93be:	40 e0       	ldi	r20, 0x00	; 0
    93c0:	50 e0       	ldi	r21, 0x00	; 0
    93c2:	6f ef       	ldi	r22, 0xFF	; 255
    93c4:	71 e0       	ldi	r23, 0x01	; 1
    93c6:	8c e0       	ldi	r24, 0x0C	; 12
    93c8:	90 e0       	ldi	r25, 0x00	; 0
    93ca:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			LCD_Display_Text(49, (const unsigned char*)Verdana8, 55, 54); 	// P1.n	
    93ce:	26 e3       	ldi	r18, 0x36	; 54
    93d0:	30 e0       	ldi	r19, 0x00	; 0
    93d2:	47 e3       	ldi	r20, 0x37	; 55
    93d4:	50 e0       	ldi	r21, 0x00	; 0
    93d6:	6d e8       	ldi	r22, 0x8D	; 141
    93d8:	7f e0       	ldi	r23, 0x0F	; 15
    93da:	81 e3       	ldi	r24, 0x31	; 49
    93dc:	90 e0       	ldi	r25, 0x00	; 0
    93de:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    93e2:	29 e3       	ldi	r18, 0x39	; 57
    93e4:	30 e0       	ldi	r19, 0x00	; 0
    93e6:	48 e7       	ldi	r20, 0x78	; 120
    93e8:	50 e0       	ldi	r21, 0x00	; 0
    93ea:	6f ef       	ldi	r22, 0xFF	; 255
    93ec:	71 e0       	ldi	r23, 0x01	; 1
    93ee:	8b e0       	ldi	r24, 0x0B	; 11
    93f0:	90 e0       	ldi	r25, 0x00	; 0
    93f2:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			LCD_Display_Text(50, (const unsigned char*)Verdana8, 107, 54);	// P2
    93f6:	26 e3       	ldi	r18, 0x36	; 54
    93f8:	30 e0       	ldi	r19, 0x00	; 0
    93fa:	4b e6       	ldi	r20, 0x6B	; 107
    93fc:	50 e0       	ldi	r21, 0x00	; 0
    93fe:	6d e8       	ldi	r22, 0x8D	; 141
    9400:	7f e0       	ldi	r23, 0x0F	; 15
    9402:	82 e3       	ldi	r24, 0x32	; 50
    9404:	90 e0       	ldi	r25, 0x00	; 0
    9406:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    940a:	80 e0       	ldi	r24, 0x00	; 0
    940c:	91 e0       	ldi	r25, 0x01	; 1
}
    940e:	cf 91       	pop	r28
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    9410:	0c 94 29 36 	jmp	0x6c52	; 0x6c52 <write_buffer>

00009414 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    9414:	cf 93       	push	r28
    9416:	df 93       	push	r29
    9418:	cd b7       	in	r28, 0x3d	; 61
    941a:	de b7       	in	r29, 0x3e	; 62
    941c:	2a 97       	sbiw	r28, 0x0a	; 10
    941e:	0f b6       	in	r0, 0x3f	; 63
    9420:	f8 94       	cli
    9422:	de bf       	out	0x3e, r29	; 62
    9424:	0f be       	out	0x3f, r0	; 63
    9426:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    9428:	25 e0       	ldi	r18, 0x05	; 5
    942a:	62 9f       	mul	r22, r18
    942c:	80 0d       	add	r24, r0
    942e:	91 1d       	adc	r25, r1
    9430:	11 24       	eor	r1, r1
    9432:	bc 01       	movw	r22, r24
    9434:	45 e0       	ldi	r20, 0x05	; 5
    9436:	50 e0       	ldi	r21, 0x00	; 0
    9438:	ce 01       	movw	r24, r28
    943a:	06 96       	adiw	r24, 0x06	; 6
    943c:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <memcpy_P>
	return (range);
    9440:	85 e0       	ldi	r24, 0x05	; 5
    9442:	fe 01       	movw	r30, r28
    9444:	36 96       	adiw	r30, 0x06	; 6
    9446:	de 01       	movw	r26, r28
    9448:	11 96       	adiw	r26, 0x01	; 1
    944a:	01 90       	ld	r0, Z+
    944c:	0d 92       	st	X+, r0
    944e:	8a 95       	dec	r24
    9450:	e1 f7       	brne	.-8      	; 0x944a <get_menu_range+0x36>
    9452:	29 81       	ldd	r18, Y+1	; 0x01
    9454:	3a 81       	ldd	r19, Y+2	; 0x02
    9456:	4b 81       	ldd	r20, Y+3	; 0x03
    9458:	5c 81       	ldd	r21, Y+4	; 0x04
    945a:	6d 81       	ldd	r22, Y+5	; 0x05
}
    945c:	70 e0       	ldi	r23, 0x00	; 0
    945e:	80 e0       	ldi	r24, 0x00	; 0
    9460:	90 e0       	ldi	r25, 0x00	; 0
    9462:	2a 96       	adiw	r28, 0x0a	; 10
    9464:	0f b6       	in	r0, 0x3f	; 63
    9466:	f8 94       	cli
    9468:	de bf       	out	0x3e, r29	; 62
    946a:	0f be       	out	0x3f, r0	; 63
    946c:	cd bf       	out	0x3d, r28	; 61
    946e:	df 91       	pop	r29
    9470:	cf 91       	pop	r28
    9472:	08 95       	ret

00009474 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    9474:	0f 93       	push	r16
    9476:	1f 93       	push	r17
    9478:	cf 93       	push	r28
    947a:	df 93       	push	r29
    947c:	fa 01       	movw	r30, r20
    947e:	10 e0       	ldi	r17, 0x00	; 0
    9480:	c2 2f       	mov	r28, r18
    9482:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    9484:	66 23       	and	r22, r22
    9486:	19 f0       	breq	.+6      	; 0x948e <print_menu_text+0x1a>
    9488:	62 50       	subi	r22, 0x02	; 2
    948a:	62 30       	cpi	r22, 0x02	; 2
    948c:	78 f4       	brcc	.+30     	; 0x94ac <print_menu_text+0x38>
    948e:	4a e0       	ldi	r20, 0x0A	; 10
    9490:	62 ec       	ldi	r22, 0xC2	; 194
    9492:	75 e0       	ldi	r23, 0x05	; 5
    9494:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    9498:	98 01       	movw	r18, r16
    949a:	ae 01       	movw	r20, r28
    949c:	6d e8       	ldi	r22, 0x8D	; 141
    949e:	7f e0       	ldi	r23, 0x0F	; 15
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    94a0:	df 91       	pop	r29
    94a2:	cf 91       	pop	r28
    94a4:	1f 91       	pop	r17
    94a6:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    94a8:	0c 94 ef 62 	jmp	0xc5de	; 0xc5de <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    94ac:	98 01       	movw	r18, r16
    94ae:	ae 01       	movw	r20, r28
    94b0:	6d e8       	ldi	r22, 0x8D	; 141
    94b2:	7f e0       	ldi	r23, 0x0F	; 15
    94b4:	cf 01       	movw	r24, r30
	}
}
    94b6:	df 91       	pop	r29
    94b8:	cf 91       	pop	r28
    94ba:	1f 91       	pop	r17
    94bc:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    94be:	0c 94 3a 38 	jmp	0x7074	; 0x7074 <LCD_Display_Text>

000094c2 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    94c2:	48 2f       	mov	r20, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    94c4:	93 b1       	in	r25, 0x03	; 3
    94c6:	90 7f       	andi	r25, 0xF0	; 240
    94c8:	90 93 1f 09 	sts	0x091F, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    94cc:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    94ce:	51 e0       	ldi	r21, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    94d0:	90 91 1f 09 	lds	r25, 0x091F
    94d4:	90 3f       	cpi	r25, 0xF0	; 240
    94d6:	d1 f4       	brne	.+52     	; 0x950c <poll_buttons+0x4a>
	{
		buttons = (PINB & 0xf0);	
    94d8:	93 b1       	in	r25, 0x03	; 3
    94da:	89 2f       	mov	r24, r25
    94dc:	80 7f       	andi	r24, 0xF0	; 240
    94de:	e7 ea       	ldi	r30, 0xA7	; 167
    94e0:	f1 e6       	ldi	r31, 0x61	; 97
    94e2:	31 97       	sbiw	r30, 0x01	; 1
    94e4:	f1 f7       	brne	.-4      	; 0x94e2 <poll_buttons+0x20>
    94e6:	00 c0       	rjmp	.+0      	; 0x94e8 <poll_buttons+0x26>
    94e8:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    94ea:	23 b1       	in	r18, 0x03	; 3
    94ec:	68 2f       	mov	r22, r24
    94ee:	70 e0       	ldi	r23, 0x00	; 0
    94f0:	20 7f       	andi	r18, 0xF0	; 240
    94f2:	30 e0       	ldi	r19, 0x00	; 0
    94f4:	62 17       	cp	r22, r18
    94f6:	73 07       	cpc	r23, r19
    94f8:	19 f4       	brne	.+6      	; 0x9500 <poll_buttons+0x3e>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    94fa:	80 93 1f 09 	sts	0x091F, r24
    94fe:	01 c0       	rjmp	.+2      	; 0x9502 <poll_buttons+0x40>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    9500:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    9502:	10 92 48 05 	sts	0x0548, r1
		button_multiplier = 1;
    9506:	50 93 20 09 	sts	0x0920, r21
    950a:	e2 cf       	rjmp	.-60     	; 0x94d0 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    950c:	44 23       	and	r20, r20
    950e:	79 f0       	breq	.+30     	; 0x952e <poll_buttons+0x6c>
	{
		// Count the number of times incremented
		button_count++; 
    9510:	90 91 48 05 	lds	r25, 0x0548
    9514:	9f 5f       	subi	r25, 0xFF	; 255
		if (button_count >= 10)
    9516:	9a 30       	cpi	r25, 0x0A	; 10
    9518:	18 f4       	brcc	.+6      	; 0x9520 <poll_buttons+0x5e>

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
	{
		// Count the number of times incremented
		button_count++; 
    951a:	90 93 48 05 	sts	0x0548, r25
    951e:	08 95       	ret
		if (button_count >= 10)
		{
			button_count = 0;
    9520:	10 92 48 05 	sts	0x0548, r1
			button_multiplier ++;
    9524:	90 91 20 09 	lds	r25, 0x0920
    9528:	9f 5f       	subi	r25, 0xFF	; 255
    952a:	90 93 20 09 	sts	0x0920, r25
		}
	}

	return buttons;
}
    952e:	08 95       	ret

00009530 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    9530:	2f 92       	push	r2
    9532:	3f 92       	push	r3
    9534:	4f 92       	push	r4
    9536:	5f 92       	push	r5
    9538:	6f 92       	push	r6
    953a:	7f 92       	push	r7
    953c:	8f 92       	push	r8
    953e:	9f 92       	push	r9
    9540:	af 92       	push	r10
    9542:	bf 92       	push	r11
    9544:	cf 92       	push	r12
    9546:	df 92       	push	r13
    9548:	ef 92       	push	r14
    954a:	ff 92       	push	r15
    954c:	0f 93       	push	r16
    954e:	1f 93       	push	r17
    9550:	cf 93       	push	r28
    9552:	df 93       	push	r29
    9554:	cd b7       	in	r28, 0x3d	; 61
    9556:	de b7       	in	r29, 0x3e	; 62
    9558:	66 97       	sbiw	r28, 0x16	; 22
    955a:	0f b6       	in	r0, 0x3f	; 63
    955c:	f8 94       	cli
    955e:	de bf       	out	0x3e, r29	; 62
    9560:	0f be       	out	0x3f, r0	; 63
    9562:	cd bf       	out	0x3d, r28	; 61
    9564:	3c 01       	movw	r6, r24
    9566:	7e 87       	std	Y+14, r23	; 0x0e
    9568:	6d 87       	std	Y+13, r22	; 0x0d
    956a:	4a 87       	std	Y+10, r20	; 0x0a
    956c:	9e 2d       	mov	r25, r14
    956e:	ed 82       	std	Y+5, r14	; 0x05
    9570:	8f 2d       	mov	r24, r15
    9572:	fe 82       	std	Y+6, r15	; 0x06
    9574:	90 2e       	mov	r9, r16
    9576:	0f 83       	std	Y+7, r16	; 0x07
    9578:	18 87       	std	Y+8, r17	; 0x08
    957a:	29 87       	std	Y+9, r18	; 0x09
    957c:	ba 8a       	std	Y+18, r11	; 0x12
    957e:	a9 8a       	std	Y+17, r10	; 0x11
    9580:	ac 01       	movw	r20, r24
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    9582:	fb 01       	movw	r30, r22
    9584:	20 81       	ld	r18, Z
    9586:	a2 2e       	mov	r10, r18
    9588:	02 2e       	mov	r0, r18
    958a:	00 0c       	add	r0, r0
    958c:	bb 08       	sbc	r11, r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    958e:	12 30       	cpi	r17, 0x02	; 2
    9590:	29 f4       	brne	.+10     	; 0x959c <do_menu_item+0x6c>
	{
		value = value * mult;
    9592:	3a 85       	ldd	r19, Y+10	; 0x0a
    9594:	23 03       	mulsu	r18, r19
    9596:	50 01       	movw	r10, r0
    9598:	11 24       	eor	r1, r1
    959a:	02 c0       	rjmp	.+4      	; 0x95a0 <do_menu_item+0x70>
	}
	else mult = 1;
    959c:	81 e0       	ldi	r24, 0x01	; 1
    959e:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    95a0:	20 ef       	ldi	r18, 0xF0	; 240
    95a2:	20 93 1f 09 	sts	0x091F, r18
				value = (range.default_value * mult);				
			}
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    95a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    95a8:	ef 2f       	mov	r30, r31
    95aa:	f0 e0       	ldi	r31, 0x00	; 0
    95ac:	f8 8b       	std	Y+16, r31	; 0x10
    95ae:	ef 87       	std	Y+15, r30	; 0x0f
    95b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    95b2:	52 03       	mulsu	r21, r18
    95b4:	10 01       	movw	r2, r0
    95b6:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    95b8:	42 03       	mulsu	r20, r18
    95ba:	c0 01       	movw	r24, r0
    95bc:	11 24       	eor	r1, r1
    95be:	9c 87       	std	Y+12, r25	; 0x0c
    95c0:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    95c2:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    95c4:	00 e0       	ldi	r16, 0x00	; 0
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    95c6:	f1 2c       	mov	r15, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    95c8:	51 2c       	mov	r5, r1
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    95ca:	93 01       	movw	r18, r6
    95cc:	22 0f       	add	r18, r18
    95ce:	33 1f       	adc	r19, r19
    95d0:	a9 01       	movw	r20, r18
    95d2:	41 5b       	subi	r20, 0xB1	; 177
    95d4:	5b 4e       	sbci	r21, 0xEB	; 235
    95d6:	5c 8b       	std	Y+20, r21	; 0x14
    95d8:	4b 8b       	std	Y+19, r20	; 0x13
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    95da:	0c 2c       	mov	r0, r12
    95dc:	00 0c       	add	r0, r0
    95de:	dd 08       	sbc	r13, r13
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    95e0:	ae ef       	ldi	r26, 0xFE	; 254
    95e2:	ea 2e       	mov	r14, r26
    95e4:	e1 0e       	add	r14, r17

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
				(servo_enable) &&
				(Config.Channel[servo_number].Motor_marker != MOTOR)
    95e6:	82 e2       	ldi	r24, 0x22	; 34
    95e8:	eb a5       	ldd	r30, Y+43	; 0x2b
    95ea:	fc a5       	ldd	r31, Y+44	; 0x2c
    95ec:	8e 9f       	mul	r24, r30
    95ee:	90 01       	movw	r18, r0
    95f0:	8f 9f       	mul	r24, r31
    95f2:	30 0d       	add	r19, r0
    95f4:	11 24       	eor	r1, r1
    95f6:	a9 01       	movw	r20, r18
    95f8:	48 51       	subi	r20, 0x18	; 24
    95fa:	59 4f       	sbci	r21, 0xF9	; 249
    95fc:	5e 8b       	std	Y+22, r21	; 0x16
    95fe:	4d 8b       	std	Y+21, r20	; 0x15
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
    9600:	80 91 1f 09 	lds	r24, 0x091F
    9604:	28 2f       	mov	r18, r24
    9606:	2f 7b       	andi	r18, 0xBF	; 191
    9608:	20 3a       	cpi	r18, 0xA0	; 160
    960a:	19 f0       	breq	.+6      	; 0x9612 <do_menu_item+0xe2>
		// Increment loop count so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    960c:	81 10       	cpse	r8, r1
    960e:	2a c0       	rjmp	.+84     	; 0x9664 <do_menu_item+0x134>
    9610:	24 c0       	rjmp	.+72     	; 0x965a <do_menu_item+0x12a>
		}

	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    9612:	12 30       	cpi	r17, 0x02	; 2
    9614:	31 f4       	brne	.+12     	; 0x9622 <do_menu_item+0xf2>
	{
		value = value / mult;
    9616:	c5 01       	movw	r24, r10
    9618:	6f 85       	ldd	r22, Y+15	; 0x0f
    961a:	78 89       	ldd	r23, Y+16	; 0x10
    961c:	0e 94 2c 6f 	call	0xde58	; 0xde58 <__divmodhi4>
    9620:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    9622:	ed 85       	ldd	r30, Y+13	; 0x0d
    9624:	fe 85       	ldd	r31, Y+14	; 0x0e
    9626:	a0 82       	st	Z, r10
}
    9628:	66 96       	adiw	r28, 0x16	; 22
    962a:	0f b6       	in	r0, 0x3f	; 63
    962c:	f8 94       	cli
    962e:	de bf       	out	0x3e, r29	; 62
    9630:	0f be       	out	0x3f, r0	; 63
    9632:	cd bf       	out	0x3d, r28	; 61
    9634:	df 91       	pop	r29
    9636:	cf 91       	pop	r28
    9638:	1f 91       	pop	r17
    963a:	0f 91       	pop	r16
    963c:	ff 90       	pop	r15
    963e:	ef 90       	pop	r14
    9640:	df 90       	pop	r13
    9642:	cf 90       	pop	r12
    9644:	bf 90       	pop	r11
    9646:	af 90       	pop	r10
    9648:	9f 90       	pop	r9
    964a:	8f 90       	pop	r8
    964c:	7f 90       	pop	r7
    964e:	6f 90       	pop	r6
    9650:	5f 90       	pop	r5
    9652:	4f 90       	pop	r4
    9654:	3f 90       	pop	r3
    9656:	2f 90       	pop	r2
    9658:	08 95       	ret
		{
			button_inc = 1;	// For everything else (numbers)
		}

		// Increment button timer when pressed
		if (button != NONE)
    965a:	80 3f       	cpi	r24, 0xF0	; 240
    965c:	09 f4       	brne	.+2      	; 0x9660 <do_menu_item+0x130>
    965e:	4b c1       	rjmp	.+662    	; 0x98f6 <do_menu_item+0x3c6>
		{
			button_inc = 5; // For servos
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    9660:	21 e0       	ldi	r18, 0x01	; 1
    9662:	04 c0       	rjmp	.+8      	; 0x966c <do_menu_item+0x13c>
		}

		// Increment button timer when pressed
		if (button != NONE)
    9664:	80 3f       	cpi	r24, 0xF0	; 240
    9666:	09 f4       	brne	.+2      	; 0x966a <do_menu_item+0x13a>
    9668:	49 c1       	rjmp	.+658    	; 0x98fc <do_menu_item+0x3cc>
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
		{
			button_inc = 5; // For servos
    966a:	25 e0       	ldi	r18, 0x05	; 5
		}

		// Increment button timer when pressed
		if (button != NONE)
		{
			button_update++;
    966c:	f3 94       	inc	r15

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    966e:	2f 15       	cp	r18, r15
    9670:	10 f4       	brcc	.+4      	; 0x9676 <do_menu_item+0x146>
			{
				button_lock = false;
    9672:	00 e0       	ldi	r16, 0x00	; 0
				button_update = 0;
    9674:	f1 2c       	mov	r15, r1
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    9676:	88 20       	and	r8, r8
    9678:	49 f0       	breq	.+18     	; 0x968c <do_menu_item+0x15c>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
	{
		// Increment loop count so that we can time various things
		display_update++;
    967a:	53 94       	inc	r5
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    967c:	57 e0       	ldi	r21, 0x07	; 7
    967e:	55 15       	cp	r21, r5
    9680:	10 f4       	brcc	.+4      	; 0x9686 <do_menu_item+0x156>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    9682:	80 3f       	cpi	r24, 0xF0	; 240
    9684:	19 f4       	brne	.+6      	; 0x968c <do_menu_item+0x15c>
    9686:	99 23       	and	r25, r25
    9688:	09 f4       	brne	.+2      	; 0x968c <do_menu_item+0x15c>
    968a:	9b c0       	rjmp	.+310    	; 0x97c2 <do_menu_item+0x292>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    968c:	80 e0       	ldi	r24, 0x00	; 0
    968e:	91 e0       	ldi	r25, 0x01	; 1
    9690:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>

			// Print warning
			if (range.style == 4)
    9694:	14 30       	cpi	r17, 0x04	; 4
    9696:	a9 f4       	brne	.+42     	; 0x96c2 <do_menu_item+0x192>
			{
				LCD_Display_Text(281,(const unsigned char*)Verdana8,0,0);	// Warning
    9698:	20 e0       	ldi	r18, 0x00	; 0
    969a:	30 e0       	ldi	r19, 0x00	; 0
    969c:	40 e0       	ldi	r20, 0x00	; 0
    969e:	50 e0       	ldi	r21, 0x00	; 0
    96a0:	6d e8       	ldi	r22, 0x8D	; 141
    96a2:	7f e0       	ldi	r23, 0x0F	; 15
    96a4:	89 e1       	ldi	r24, 0x19	; 25
    96a6:	91 e0       	ldi	r25, 0x01	; 1
    96a8:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
    96ac:	2c e0       	ldi	r18, 0x0C	; 12
    96ae:	30 e0       	ldi	r19, 0x00	; 0
    96b0:	49 e1       	ldi	r20, 0x19	; 25
    96b2:	50 e0       	ldi	r21, 0x00	; 0
    96b4:	6d e8       	ldi	r22, 0x8D	; 141
    96b6:	7f e0       	ldi	r23, 0x0F	; 15
    96b8:	8a e1       	ldi	r24, 0x1A	; 26
    96ba:	91 e0       	ldi	r25, 0x01	; 1
    96bc:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
    96c0:	37 c0       	rjmp	.+110    	; 0x9730 <do_menu_item+0x200>
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    96c2:	eb 89       	ldd	r30, Y+19	; 0x13
    96c4:	fc 89       	ldd	r31, Y+20	; 0x14
    96c6:	85 91       	lpm	r24, Z+
    96c8:	94 91       	lpm	r25, Z
    96ca:	20 e0       	ldi	r18, 0x00	; 0
    96cc:	30 e0       	ldi	r19, 0x00	; 0
    96ce:	40 e0       	ldi	r20, 0x00	; 0
    96d0:	50 e0       	ldi	r21, 0x00	; 0
    96d2:	6f ed       	ldi	r22, 0xDF	; 223
    96d4:	74 e0       	ldi	r23, 0x04	; 4
    96d6:	0e 94 43 38 	call	0x7086	; 0x7086 <gLCDprint_Menu_P>
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    96da:	11 23       	and	r17, r17
    96dc:	19 f0       	breq	.+6      	; 0x96e4 <do_menu_item+0x1b4>
    96de:	81 e0       	ldi	r24, 0x01	; 1
    96e0:	8e 15       	cp	r24, r14
    96e2:	30 f1       	brcs	.+76     	; 0x9730 <do_menu_item+0x200>
    96e4:	4a e0       	ldi	r20, 0x0A	; 10
    96e6:	62 ec       	ldi	r22, 0xC2	; 194
    96e8:	75 e0       	ldi	r23, 0x05	; 5
    96ea:	c5 01       	movw	r24, r10
    96ec:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    96f0:	ae 01       	movw	r20, r28
    96f2:	4f 5f       	subi	r20, 0xFF	; 255
    96f4:	5f 4f       	sbci	r21, 0xFF	; 255
    96f6:	6f ed       	ldi	r22, 0xDF	; 223
    96f8:	74 e0       	ldi	r23, 0x04	; 4
    96fa:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    96fe:	89 81       	ldd	r24, Y+1	; 0x01
    9700:	9a 81       	ldd	r25, Y+2	; 0x02
    9702:	70 e8       	ldi	r23, 0x80	; 128
    9704:	47 2e       	mov	r4, r23
    9706:	51 2c       	mov	r5, r1
    9708:	48 1a       	sub	r4, r24
    970a:	59 0a       	sbc	r5, r25
    970c:	56 94       	lsr	r5
    970e:	47 94       	ror	r4
    9710:	4c 0c       	add	r4, r12
    9712:	5d 1c       	adc	r5, r13
    9714:	4a e0       	ldi	r20, 0x0A	; 10
    9716:	62 ec       	ldi	r22, 0xC2	; 194
    9718:	75 e0       	ldi	r23, 0x05	; 5
    971a:	c5 01       	movw	r24, r10
    971c:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
    9720:	29 e1       	ldi	r18, 0x19	; 25
    9722:	30 e0       	ldi	r19, 0x00	; 0
    9724:	a2 01       	movw	r20, r4
    9726:	6f ed       	ldi	r22, 0xDF	; 223
    9728:	74 e0       	ldi	r23, 0x04	; 4
    972a:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
    972e:	29 c0       	rjmp	.+82     	; 0x9782 <do_menu_item+0x252>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    9730:	49 88       	ldd	r4, Y+17	; 0x11
    9732:	5a 88       	ldd	r5, Y+18	; 0x12
    9734:	4a 0c       	add	r4, r10
    9736:	5b 1c       	adc	r5, r11
    9738:	f2 01       	movw	r30, r4
    973a:	ee 0f       	add	r30, r30
    973c:	ff 1f       	adc	r31, r31
    973e:	e1 5b       	subi	r30, 0xB1	; 177
    9740:	fb 4e       	sbci	r31, 0xEB	; 235
    9742:	85 91       	lpm	r24, Z+
    9744:	94 91       	lpm	r25, Z
    9746:	0e 94 ee 61 	call	0xc3dc	; 0xc3dc <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    974a:	ae 01       	movw	r20, r28
    974c:	4f 5f       	subi	r20, 0xFF	; 255
    974e:	5f 4f       	sbci	r21, 0xFF	; 255
    9750:	6f ed       	ldi	r22, 0xDF	; 223
    9752:	74 e0       	ldi	r23, 0x04	; 4
    9754:	82 ec       	ldi	r24, 0xC2	; 194
    9756:	95 e0       	ldi	r25, 0x05	; 5
    9758:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    975c:	89 81       	ldd	r24, Y+1	; 0x01
    975e:	9a 81       	ldd	r25, Y+2	; 0x02
    9760:	40 e8       	ldi	r20, 0x80	; 128
    9762:	50 e0       	ldi	r21, 0x00	; 0
    9764:	48 1b       	sub	r20, r24
    9766:	59 0b       	sbc	r21, r25
    9768:	56 95       	lsr	r21
    976a:	47 95       	ror	r20
    976c:	29 e1       	ldi	r18, 0x19	; 25
    976e:	30 e0       	ldi	r19, 0x00	; 0
    9770:	6f ed       	ldi	r22, 0xDF	; 223
    9772:	74 e0       	ldi	r23, 0x04	; 4
    9774:	c2 01       	movw	r24, r4
    9776:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			}

			// Print appropriate menu frame
			// Save/Abort screen
			if (range.style == 4)
    977a:	14 30       	cpi	r17, 0x04	; 4
    977c:	11 f4       	brne	.+4      	; 0x9782 <do_menu_item+0x252>
			{
				// Print bottom markers
				print_menu_frame(ABORT);				
    977e:	80 ea       	ldi	r24, 0xA0	; 160
    9780:	01 c0       	rjmp	.+2      	; 0x9784 <do_menu_item+0x254>
			}
			// Save/default screen
			else
			{
				// Print bottom markers
				print_menu_frame(EDIT);				
    9782:	81 e0       	ldi	r24, 0x01	; 1
    9784:	0e 94 6d 49 	call	0x92da	; 0x92da <print_menu_frame>
			}

			// Write from buffer
			write_buffer(buffer);
    9788:	80 e0       	ldi	r24, 0x00	; 0
    978a:	91 e0       	ldi	r25, 0x01	; 1
    978c:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    9790:	12 30       	cpi	r17, 0x02	; 2
    9792:	31 f1       	breq	.+76     	; 0x97e0 <do_menu_item+0x2b0>
    9794:	38 f4       	brcc	.+14     	; 0x97a4 <do_menu_item+0x274>
    9796:	11 23       	and	r17, r17
    9798:	59 f0       	breq	.+22     	; 0x97b0 <do_menu_item+0x280>
    979a:	11 30       	cpi	r17, 0x01	; 1
    979c:	09 f0       	breq	.+2      	; 0x97a0 <do_menu_item+0x270>
    979e:	40 c0       	rjmp	.+128    	; 0x9820 <do_menu_item+0x2f0>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    97a0:	51 2c       	mov	r5, r1
    97a2:	16 c0       	rjmp	.+44     	; 0x97d0 <do_menu_item+0x2a0>
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    97a4:	13 30       	cpi	r17, 0x03	; 3
    97a6:	29 f1       	breq	.+74     	; 0x97f2 <do_menu_item+0x2c2>
    97a8:	14 30       	cpi	r17, 0x04	; 4
    97aa:	d1 f5       	brne	.+116    	; 0x9820 <do_menu_item+0x2f0>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    97ac:	51 2c       	mov	r5, r1
    97ae:	2e c0       	rjmp	.+92     	; 0x980c <do_menu_item+0x2dc>
    97b0:	51 2c       	mov	r5, r1
    97b2:	9f e7       	ldi	r25, 0x7F	; 127
    97b4:	ea e1       	ldi	r30, 0x1A	; 26
    97b6:	f6 e0       	ldi	r31, 0x06	; 6
    97b8:	91 50       	subi	r25, 0x01	; 1
    97ba:	e0 40       	sbci	r30, 0x00	; 0
    97bc:	f0 40       	sbci	r31, 0x00	; 0
    97be:	e1 f7       	brne	.-8      	; 0x97b8 <do_menu_item+0x288>
    97c0:	2c c0       	rjmp	.+88     	; 0x981a <do_menu_item+0x2ea>
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    97c2:	12 30       	cpi	r17, 0x02	; 2
    97c4:	71 f0       	breq	.+28     	; 0x97e2 <do_menu_item+0x2b2>
    97c6:	f0 f4       	brcc	.+60     	; 0x9804 <do_menu_item+0x2d4>
    97c8:	11 23       	and	r17, r17
    97ca:	99 f3       	breq	.-26     	; 0x97b2 <do_menu_item+0x282>
    97cc:	11 30       	cpi	r17, 0x01	; 1
    97ce:	59 f5       	brne	.+86     	; 0x9826 <do_menu_item+0x2f6>
    97d0:	2f e3       	ldi	r18, 0x3F	; 63
    97d2:	32 e4       	ldi	r19, 0x42	; 66
    97d4:	4f e0       	ldi	r20, 0x0F	; 15
    97d6:	21 50       	subi	r18, 0x01	; 1
    97d8:	30 40       	sbci	r19, 0x00	; 0
    97da:	40 40       	sbci	r20, 0x00	; 0
    97dc:	e1 f7       	brne	.-8      	; 0x97d6 <do_menu_item+0x2a6>
    97de:	1d c0       	rjmp	.+58     	; 0x981a <do_menu_item+0x2ea>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    97e0:	51 2c       	mov	r5, r1
    97e2:	5f e7       	ldi	r21, 0x7F	; 127
    97e4:	8a e1       	ldi	r24, 0x1A	; 26
    97e6:	96 e0       	ldi	r25, 0x06	; 6
    97e8:	51 50       	subi	r21, 0x01	; 1
    97ea:	80 40       	sbci	r24, 0x00	; 0
    97ec:	90 40       	sbci	r25, 0x00	; 0
    97ee:	e1 f7       	brne	.-8      	; 0x97e8 <do_menu_item+0x2b8>
    97f0:	14 c0       	rjmp	.+40     	; 0x981a <do_menu_item+0x2ea>
    97f2:	51 2c       	mov	r5, r1
    97f4:	ef e7       	ldi	r30, 0x7F	; 127
    97f6:	f8 e3       	ldi	r31, 0x38	; 56
    97f8:	21 e0       	ldi	r18, 0x01	; 1
    97fa:	e1 50       	subi	r30, 0x01	; 1
    97fc:	f0 40       	sbci	r31, 0x00	; 0
    97fe:	20 40       	sbci	r18, 0x00	; 0
    9800:	e1 f7       	brne	.-8      	; 0x97fa <do_menu_item+0x2ca>
    9802:	0b c0       	rjmp	.+22     	; 0x981a <do_menu_item+0x2ea>
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    9804:	13 30       	cpi	r17, 0x03	; 3
    9806:	b1 f3       	breq	.-20     	; 0x97f4 <do_menu_item+0x2c4>
    9808:	14 30       	cpi	r17, 0x04	; 4
    980a:	69 f4       	brne	.+26     	; 0x9826 <do_menu_item+0x2f6>
    980c:	3f e3       	ldi	r19, 0x3F	; 63
    980e:	42 e4       	ldi	r20, 0x42	; 66
    9810:	5f e0       	ldi	r21, 0x0F	; 15
    9812:	31 50       	subi	r19, 0x01	; 1
    9814:	40 40       	sbci	r20, 0x00	; 0
    9816:	50 40       	sbci	r21, 0x00	; 0
    9818:	e1 f7       	brne	.-8      	; 0x9812 <do_menu_item+0x2e2>
    981a:	00 c0       	rjmp	.+0      	; 0x981c <do_menu_item+0x2ec>
    981c:	00 00       	nop
    981e:	01 c0       	rjmp	.+2      	; 0x9822 <do_menu_item+0x2f2>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    9820:	51 2c       	mov	r5, r1
		}

		// Poll buttons when idle.
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    9822:	88 20       	and	r8, r8
    9824:	41 f0       	breq	.+16     	; 0x9836 <do_menu_item+0x306>
		{
			button = (PINB & 0xf0);	
    9826:	83 b1       	in	r24, 0x03	; 3
    9828:	80 7f       	andi	r24, 0xF0	; 240
    982a:	80 93 1f 09 	sts	0x091F, r24
			button_multiplier = 1;
    982e:	81 e0       	ldi	r24, 0x01	; 1
    9830:	80 93 20 09 	sts	0x0920, r24
    9834:	03 c0       	rjmp	.+6      	; 0x983c <do_menu_item+0x30c>
		}
		else
		{
			poll_buttons(true);
    9836:	81 e0       	ldi	r24, 0x01	; 1
    9838:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    983c:	80 91 1f 09 	lds	r24, 0x091F
    9840:	80 3f       	cpi	r24, 0xF0	; 240
    9842:	59 f1       	breq	.+86     	; 0x989a <do_menu_item+0x36a>
    9844:	88 20       	and	r8, r8
    9846:	b9 f0       	breq	.+46     	; 0x9876 <do_menu_item+0x346>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    9848:	80 3d       	cpi	r24, 0xD0	; 208
    984a:	49 f4       	brne	.+18     	; 0x985e <do_menu_item+0x32e>
		{
			if (button_lock == false)
    984c:	01 11       	cpse	r16, r1
    984e:	51 c0       	rjmp	.+162    	; 0x98f2 <do_menu_item+0x3c2>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    9850:	80 91 20 09 	lds	r24, 0x0920
    9854:	98 9e       	mul	r9, r24
    9856:	a0 18       	sub	r10, r0
    9858:	b1 08       	sbc	r11, r1
    985a:	11 24       	eor	r1, r1
    985c:	0a c0       	rjmp	.+20     	; 0x9872 <do_menu_item+0x342>
				button_update = 0;
			}
		}

		if (button == UP)
    985e:	80 3b       	cpi	r24, 0xB0	; 176
    9860:	79 f4       	brne	.+30     	; 0x9880 <do_menu_item+0x350>
		{
			if (button_lock == false)
    9862:	01 11       	cpse	r16, r1
    9864:	46 c0       	rjmp	.+140    	; 0x98f2 <do_menu_item+0x3c2>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    9866:	80 91 20 09 	lds	r24, 0x0920
    986a:	98 9e       	mul	r9, r24
    986c:	a0 0c       	add	r10, r0
    986e:	b1 1c       	adc	r11, r1
    9870:	11 24       	eor	r1, r1
				button_update = 0;
    9872:	f1 2c       	mov	r15, r1
    9874:	3e c0       	rjmp	.+124    	; 0x98f2 <do_menu_item+0x3c2>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    9876:	80 3d       	cpi	r24, 0xD0	; 208
    9878:	59 f3       	breq	.-42     	; 0x9850 <do_menu_item+0x320>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    987a:	80 3b       	cpi	r24, 0xB0	; 176
    987c:	a1 f3       	breq	.-24     	; 0x9866 <do_menu_item+0x336>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    987e:	00 e0       	ldi	r16, 0x00	; 0
				button_update = 0;
			}
		}

		// Handle button 1
		if (button == BACK)	
    9880:	80 37       	cpi	r24, 0x70	; 112
    9882:	59 f4       	brne	.+22     	; 0x989a <do_menu_item+0x36a>
		{
			// Save/Abort screen
			if (range.style == 4)
    9884:	14 30       	cpi	r17, 0x04	; 4
    9886:	21 f4       	brne	.+8      	; 0x9890 <do_menu_item+0x360>
			{
				button = ABORT;
    9888:	80 ea       	ldi	r24, 0xA0	; 160
    988a:	80 93 1f 09 	sts	0x091F, r24
    988e:	05 c0       	rjmp	.+10     	; 0x989a <do_menu_item+0x36a>
			}
			else
			{
				value = (range.default_value * mult);				
    9890:	29 85       	ldd	r18, Y+9	; 0x09
    9892:	3a 85       	ldd	r19, Y+10	; 0x0a
    9894:	23 03       	mulsu	r18, r19
    9896:	50 01       	movw	r10, r0
    9898:	11 24       	eor	r1, r1
    989a:	a2 14       	cp	r10, r2
    989c:	b3 04       	cpc	r11, r3
    989e:	0c f4       	brge	.+2      	; 0x98a2 <do_menu_item+0x372>
    98a0:	51 01       	movw	r10, r2
    98a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    98a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    98a6:	4a 15       	cp	r20, r10
    98a8:	5b 05       	cpc	r21, r11
    98aa:	0c f4       	brge	.+2      	; 0x98ae <do_menu_item+0x37e>
    98ac:	5a 01       	movw	r10, r20
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    98ae:	50 ea       	ldi	r21, 0xA0	; 160
    98b0:	65 16       	cp	r6, r21
    98b2:	71 04       	cpc	r7, r1
    98b4:	19 f4       	brne	.+6      	; 0x98bc <do_menu_item+0x38c>
		{
			st7565_set_brightness(value);
    98b6:	8a 2d       	mov	r24, r10
    98b8:	0e 94 01 36 	call	0x6c02	; 0x6c02 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    98bc:	88 20       	and	r8, r8
    98be:	b9 f0       	breq	.+46     	; 0x98ee <do_menu_item+0x3be>
				(servo_enable) &&
    98c0:	ed 89       	ldd	r30, Y+21	; 0x15
    98c2:	fe 89       	ldd	r31, Y+22	; 0x16
    98c4:	80 81       	ld	r24, Z
    98c6:	82 30       	cpi	r24, 0x02	; 2
    98c8:	91 f0       	breq	.+36     	; 0x98ee <do_menu_item+0x3be>
				(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    98ca:	8a 2d       	mov	r24, r10
    98cc:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale_percent>

			// Scale motor from 2500~5000 to 1000~2000
			temp16 = ((temp16 << 2) + 5) / 10; 	// Round and convert
    98d0:	88 0f       	add	r24, r24
    98d2:	99 1f       	adc	r25, r25
    98d4:	88 0f       	add	r24, r24
    98d6:	99 1f       	adc	r25, r25
    98d8:	05 96       	adiw	r24, 0x05	; 5

			cli();
    98da:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale motor from 2500~5000 to 1000~2000
			temp16 = ((temp16 << 2) + 5) / 10; 	// Round and convert
    98dc:	6a e0       	ldi	r22, 0x0A	; 10
    98de:	70 e0       	ldi	r23, 0x00	; 0
    98e0:	0e 94 2c 6f 	call	0xde58	; 0xde58 <__divmodhi4>

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    98e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    98e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    98e8:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <output_servo_ppm_asm3>
			sei();
    98ec:	78 94       	sei
    98ee:	90 e0       	ldi	r25, 0x00	; 0
    98f0:	87 ce       	rjmp	.-754    	; 0x9600 <do_menu_item+0xd0>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    98f2:	01 e0       	ldi	r16, 0x01	; 1
    98f4:	d2 cf       	rjmp	.-92     	; 0x989a <do_menu_item+0x36a>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    98f6:	00 e0       	ldi	r16, 0x00	; 0
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    98f8:	f1 2c       	mov	r15, r1
    98fa:	c8 ce       	rjmp	.-624    	; 0x968c <do_menu_item+0x15c>
			button_lock = false;
    98fc:	00 e0       	ldi	r16, 0x00	; 0
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    98fe:	f1 2c       	mov	r15, r1
    9900:	bc ce       	rjmp	.-648    	; 0x967a <do_menu_item+0x14a>

00009902 <edit_curve_item>:
// type					= CURVE or OFFSET
// Curves_menu_ranges	= pointer to list of ranges for this curve
//************************************************************

void edit_curve_item(uint8_t curve, uint8_t type)
{
    9902:	2f 92       	push	r2
    9904:	3f 92       	push	r3
    9906:	4f 92       	push	r4
    9908:	5f 92       	push	r5
    990a:	6f 92       	push	r6
    990c:	7f 92       	push	r7
    990e:	8f 92       	push	r8
    9910:	9f 92       	push	r9
    9912:	af 92       	push	r10
    9914:	bf 92       	push	r11
    9916:	cf 92       	push	r12
    9918:	df 92       	push	r13
    991a:	ef 92       	push	r14
    991c:	ff 92       	push	r15
    991e:	0f 93       	push	r16
    9920:	1f 93       	push	r17
    9922:	cf 93       	push	r28
    9924:	df 93       	push	r29
    9926:	cd b7       	in	r28, 0x3d	; 61
    9928:	de b7       	in	r29, 0x3e	; 62
    992a:	e2 97       	sbiw	r28, 0x32	; 50
    992c:	0f b6       	in	r0, 0x3f	; 63
    992e:	f8 94       	cli
    9930:	de bf       	out	0x3e, r29	; 62
    9932:	0f be       	out	0x3f, r0	; 63
    9934:	cd bf       	out	0x3d, r28	; 61
    9936:	88 a3       	std	Y+32, r24	; 0x20
    9938:	16 2f       	mov	r17, r22
	int8_t varbox_y = 0;
	int8_t chanbox_y = 0;	
	int8_t channel = THROTTLE;
	uint16_t reference = CURVESTARTE;
	
	button = NONE;
    993a:	80 ef       	ldi	r24, 0xF0	; 240
    993c:	80 93 1f 09 	sts	0x091F, r24

	// Set the correct text list for the selected reference
	if (Config.P1_Reference != MODEL)
    9940:	80 91 d9 06 	lds	r24, 0x06D9
    9944:	82 30       	cpi	r24, 0x02	; 2
    9946:	29 f4       	brne	.+10     	; 0x9952 <edit_curve_item+0x50>
	{
		reference = CURVESTARTE;
	}
	else
	{
		reference = CURVESTARTM;
    9948:	2a eb       	ldi	r18, 0xBA	; 186
    994a:	31 e0       	ldi	r19, 0x01	; 1
    994c:	3c a3       	std	Y+36, r19	; 0x24
    994e:	2b a3       	std	Y+35, r18	; 0x23
    9950:	04 c0       	rjmp	.+8      	; 0x995a <edit_curve_item+0x58>
	button = NONE;

	// Set the correct text list for the selected reference
	if (Config.P1_Reference != MODEL)
	{
		reference = CURVESTARTE;
    9952:	45 ea       	ldi	r20, 0xA5	; 165
    9954:	51 e0       	ldi	r21, 0x01	; 1
    9956:	5c a3       	std	Y+36, r21	; 0x24
    9958:	4b a3       	std	Y+35, r20	; 0x23
		{
			chanbox_y = 12;
		}
		else
		{
			chanbox_y = 51;
    995a:	1f 8e       	std	Y+31, r1	; 0x1f
    995c:	f1 2c       	mov	r15, r1
    995e:	c1 2c       	mov	r12, r1
    9960:	d1 2c       	mov	r13, r1
    9962:	98 a1       	ldd	r25, Y+32	; 0x20
    9964:	89 2f       	mov	r24, r25
    9966:	90 e0       	ldi	r25, 0x00	; 0
    9968:	9a a3       	std	Y+34, r25	; 0x22
    996a:	89 a3       	std	Y+33, r24	; 0x21
			Points[6] = Config.Offsets[curve].Point7;
			channel	= Config.Offsets[curve].channel;
		}
		else
		{
			Points[0] = Config.Curve[curve].Point1;
    996c:	1c 01       	movw	r2, r24
    996e:	e3 e0       	ldi	r30, 0x03	; 3
    9970:	22 0c       	add	r2, r2
    9972:	33 1c       	adc	r3, r3
    9974:	ea 95       	dec	r30
    9976:	e1 f7       	brne	.-8      	; 0x9970 <edit_curve_item+0x6e>
			Points[1] = Config.Curve[curve].Point2;
			Points[2] = Config.Curve[curve].Point3;
			Points[3] = Config.Curve[curve].Point4;
			Points[4] = Config.Curve[curve].Point5;
			Points[5] = Config.Curve[curve].Point6;
    9978:	8a 5b       	subi	r24, 0xBA	; 186
    997a:	9f 4f       	sbci	r25, 0xFF	; 255
    997c:	fc 01       	movw	r30, r24
    997e:	a3 e0       	ldi	r26, 0x03	; 3
    9980:	ee 0f       	add	r30, r30
    9982:	ff 1f       	adc	r31, r31
    9984:	aa 95       	dec	r26
    9986:	e1 f7       	brne	.-8      	; 0x9980 <edit_curve_item+0x7e>
    9988:	fe a3       	std	Y+38, r31	; 0x26
    998a:	ed a3       	std	Y+37, r30	; 0x25
			Points[0] = Config.Offsets[curve].Point1;
			Points[1] = Config.Offsets[curve].Point2;
			Points[2] = Config.Offsets[curve].Point3;
			Points[3] = Config.Offsets[curve].Point4;
			Points[4] = Config.Offsets[curve].Point5;
			Points[5] = Config.Offsets[curve].Point6;
    998c:	91 01       	movw	r18, r2
    998e:	2f 55       	subi	r18, 0x5F	; 95
    9990:	37 4f       	sbci	r19, 0xF7	; 247
    9992:	39 a7       	std	Y+41, r19	; 0x29
    9994:	28 a7       	std	Y+40, r18	; 0x28
					break;
			}
		}
		
		// Move value box when point 1 is in the way
		if (((Config.Curve[curve].Point1 < 50) && (type == CURVE)) || ((Config.Offsets[curve].Point1 < 50) && (type == OFFSET)))
    9996:	a1 01       	movw	r20, r2
    9998:	47 5c       	subi	r20, 0xC7	; 199
    999a:	59 4f       	sbci	r21, 0xF9	; 249
    999c:	5a 01       	movw	r10, r20
    999e:	ca 01       	movw	r24, r20
    99a0:	8d 59       	subi	r24, 0x9D	; 157
    99a2:	9d 4f       	sbci	r25, 0xFD	; 253
    99a4:	9e a7       	std	Y+46, r25	; 0x2e
    99a6:	8d a7       	std	Y+45, r24	; 0x2d
					break;
				case 4:
					Config.Curve[curve].Point5 = value;
					break;
				case 5:
					Config.Curve[curve].Point6 = value;
    99a8:	e7 5c       	subi	r30, 0xC7	; 199
    99aa:	f9 4f       	sbci	r31, 0xF9	; 249
    99ac:	f8 ab       	std	Y+48, r31	; 0x30
    99ae:	ef a7       	std	Y+47, r30	; 0x2f
	{
		reference = CURVESTARTM;
	}

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	while ((button != ENTER) && (button != ABORT))
    99b0:	80 91 1f 09 	lds	r24, 0x091F
    99b4:	8f 7b       	andi	r24, 0xBF	; 191
    99b6:	80 3a       	cpi	r24, 0xA0	; 160
    99b8:	09 f4       	brne	.+2      	; 0x99bc <edit_curve_item+0xba>
    99ba:	74 c3       	rjmp	.+1768   	; 0xa0a4 <edit_curve_item+0x7a2>
	{
		// Handle offset curves differently
		if (type == OFFSET)
		{
			// Get curve point ranges
			range = get_menu_range ((const unsigned char*)Offsets_menu_ranges[curve], Point_ref);
    99bc:	28 e2       	ldi	r18, 0x28	; 40

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	while ((button != ENTER) && (button != ABORT))
	{
		// Handle offset curves differently
		if (type == OFFSET)
    99be:	15 30       	cpi	r17, 0x05	; 5
    99c0:	59 f4       	brne	.+22     	; 0x99d8 <edit_curve_item+0xd6>
		{
			// Get curve point ranges
			range = get_menu_range ((const unsigned char*)Offsets_menu_ranges[curve], Point_ref);
    99c2:	e9 a1       	ldd	r30, Y+33	; 0x21
    99c4:	fa a1       	ldd	r31, Y+34	; 0x22
    99c6:	2e 9f       	mul	r18, r30
    99c8:	c0 01       	movw	r24, r0
    99ca:	2f 9f       	mul	r18, r31
    99cc:	90 0d       	add	r25, r0
    99ce:	11 24       	eor	r1, r1
    99d0:	6f 2d       	mov	r22, r15
    99d2:	8b 5c       	subi	r24, 0xCB	; 203
    99d4:	97 4d       	sbci	r25, 0xD7	; 215
    99d6:	0a c0       	rjmp	.+20     	; 0x99ec <edit_curve_item+0xea>
		}
		else
		{
			range = get_menu_range ((const unsigned char*)Curves_menu_ranges[curve], Point_ref);
    99d8:	49 a1       	ldd	r20, Y+33	; 0x21
    99da:	5a a1       	ldd	r21, Y+34	; 0x22
    99dc:	24 9f       	mul	r18, r20
    99de:	c0 01       	movw	r24, r0
    99e0:	25 9f       	mul	r18, r21
    99e2:	90 0d       	add	r25, r0
    99e4:	11 24       	eor	r1, r1
    99e6:	6f 2d       	mov	r22, r15
    99e8:	85 5d       	subi	r24, 0xD5	; 213
    99ea:	9a 4d       	sbci	r25, 0xDA	; 218
    99ec:	0e 94 0a 4a 	call	0x9414	; 0x9414 <get_menu_range>
    99f0:	2e 8b       	std	Y+22, r18	; 0x16
    99f2:	3f 8b       	std	Y+23, r19	; 0x17
    99f4:	48 8f       	std	Y+24, r20	; 0x18
    99f6:	59 8f       	std	Y+25, r21	; 0x19
    99f8:	6a 8f       	std	Y+26, r22	; 0x1a
    99fa:	2b a7       	std	Y+43, r18	; 0x2b
    99fc:	3c a7       	std	Y+44, r19	; 0x2c
    99fe:	4f a3       	std	Y+39, r20	; 0x27
		}

		// Display update
		clear_buffer(buffer);
    9a00:	80 e0       	ldi	r24, 0x00	; 0
    9a02:	91 e0       	ldi	r25, 0x01	; 1
    9a04:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
		
		// Handle offset curves differently
		if (type == OFFSET)
    9a08:	15 30       	cpi	r17, 0x05	; 5
    9a0a:	39 f4       	brne	.+14     	; 0x9a1a <edit_curve_item+0x118>
		{
			// Print graph frame
			print_menu_frame(OFFSET);
    9a0c:	85 e0       	ldi	r24, 0x05	; 5
    9a0e:	0e 94 6d 49 	call	0x92da	; 0x92da <print_menu_frame>
		}
		
		// Print axes
		if (type == OFFSET)
		{
			drawline(buffer, 64, 0, 64, 52, 1);		// Vertical
    9a12:	ee 24       	eor	r14, r14
    9a14:	e3 94       	inc	r14
    9a16:	04 e3       	ldi	r16, 0x34	; 52
    9a18:	06 c0       	rjmp	.+12     	; 0x9a26 <edit_curve_item+0x124>
			print_menu_frame(OFFSET);
		}
		else
		{
			// Print graph frame
			print_menu_frame(CURVE);
    9a1a:	84 e0       	ldi	r24, 0x04	; 4
    9a1c:	0e 94 6d 49 	call	0x92da	; 0x92da <print_menu_frame>
		{
			drawline(buffer, 64, 0, 64, 52, 1);		// Vertical
		}
		else
		{
			drawline(buffer, 64, 0, 64, 57, 1);		// Vertical
    9a20:	ee 24       	eor	r14, r14
    9a22:	e3 94       	inc	r14
    9a24:	09 e3       	ldi	r16, 0x39	; 57
    9a26:	20 e4       	ldi	r18, 0x40	; 64
    9a28:	40 e0       	ldi	r20, 0x00	; 0
    9a2a:	60 e4       	ldi	r22, 0x40	; 64
    9a2c:	80 e0       	ldi	r24, 0x00	; 0
    9a2e:	91 e0       	ldi	r25, 0x01	; 1
    9a30:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
		}
		
		drawline(buffer, 0, 29, 128, 29, 1);	// Horizontal
    9a34:	ee 24       	eor	r14, r14
    9a36:	e3 94       	inc	r14
    9a38:	0d e1       	ldi	r16, 0x1D	; 29
    9a3a:	20 e8       	ldi	r18, 0x80	; 128
    9a3c:	4d e1       	ldi	r20, 0x1D	; 29
    9a3e:	60 e0       	ldi	r22, 0x00	; 0
    9a40:	80 e0       	ldi	r24, 0x00	; 0
    9a42:	91 e0       	ldi	r25, 0x01	; 1
    9a44:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
				
		// Get the current curve's data
		if (type == OFFSET)
		{
			Points[0] = Config.Offsets[curve].Point1;
    9a48:	c1 01       	movw	r24, r2
    9a4a:	87 5c       	subi	r24, 0xC7	; 199
    9a4c:	99 4f       	sbci	r25, 0xF9	; 249
    9a4e:	fc 01       	movw	r30, r24
		}
		
		drawline(buffer, 0, 29, 128, 29, 1);	// Horizontal
				
		// Get the current curve's data
		if (type == OFFSET)
    9a50:	15 30       	cpi	r17, 0x05	; 5
    9a52:	c9 f5       	brne	.+114    	; 0x9ac6 <edit_curve_item+0x1c4>
		{
			Points[0] = Config.Offsets[curve].Point1;
    9a54:	ed 59       	subi	r30, 0x9D	; 157
    9a56:	fd 4f       	sbci	r31, 0xFD	; 253
    9a58:	20 81       	ld	r18, Z
    9a5a:	02 2e       	mov	r0, r18
    9a5c:	00 0c       	add	r0, r0
    9a5e:	33 0b       	sbc	r19, r19
    9a60:	3a 83       	std	Y+2, r19	; 0x02
    9a62:	29 83       	std	Y+1, r18	; 0x01
			Points[1] = Config.Offsets[curve].Point2;
    9a64:	31 96       	adiw	r30, 0x01	; 1
    9a66:	20 81       	ld	r18, Z
    9a68:	02 2e       	mov	r0, r18
    9a6a:	00 0c       	add	r0, r0
    9a6c:	33 0b       	sbc	r19, r19
    9a6e:	3c 83       	std	Y+4, r19	; 0x04
    9a70:	2b 83       	std	Y+3, r18	; 0x03
			Points[2] = Config.Offsets[curve].Point3;
    9a72:	31 96       	adiw	r30, 0x01	; 1
    9a74:	20 81       	ld	r18, Z
    9a76:	02 2e       	mov	r0, r18
    9a78:	00 0c       	add	r0, r0
    9a7a:	33 0b       	sbc	r19, r19
    9a7c:	3e 83       	std	Y+6, r19	; 0x06
    9a7e:	2d 83       	std	Y+5, r18	; 0x05
			Points[3] = Config.Offsets[curve].Point4;
    9a80:	31 96       	adiw	r30, 0x01	; 1
    9a82:	20 81       	ld	r18, Z
    9a84:	02 2e       	mov	r0, r18
    9a86:	00 0c       	add	r0, r0
    9a88:	33 0b       	sbc	r19, r19
    9a8a:	38 87       	std	Y+8, r19	; 0x08
    9a8c:	2f 83       	std	Y+7, r18	; 0x07
			Points[4] = Config.Offsets[curve].Point5;
    9a8e:	31 96       	adiw	r30, 0x01	; 1
    9a90:	20 81       	ld	r18, Z
    9a92:	02 2e       	mov	r0, r18
    9a94:	00 0c       	add	r0, r0
    9a96:	33 0b       	sbc	r19, r19
    9a98:	3a 87       	std	Y+10, r19	; 0x0a
    9a9a:	29 87       	std	Y+9, r18	; 0x09
			Points[5] = Config.Offsets[curve].Point6;
    9a9c:	e8 a5       	ldd	r30, Y+40	; 0x28
    9a9e:	f9 a5       	ldd	r31, Y+41	; 0x29
    9aa0:	20 81       	ld	r18, Z
    9aa2:	02 2e       	mov	r0, r18
    9aa4:	00 0c       	add	r0, r0
    9aa6:	33 0b       	sbc	r19, r19
    9aa8:	3c 87       	std	Y+12, r19	; 0x0c
    9aaa:	2b 87       	std	Y+11, r18	; 0x0b
			Points[6] = Config.Offsets[curve].Point7;
    9aac:	fc 01       	movw	r30, r24
    9aae:	e7 59       	subi	r30, 0x97	; 151
    9ab0:	fd 4f       	sbci	r31, 0xFD	; 253
    9ab2:	20 81       	ld	r18, Z
    9ab4:	02 2e       	mov	r0, r18
    9ab6:	00 0c       	add	r0, r0
    9ab8:	33 0b       	sbc	r19, r19
    9aba:	3e 87       	std	Y+14, r19	; 0x0e
    9abc:	2d 87       	std	Y+13, r18	; 0x0d
			channel	= Config.Offsets[curve].channel;
    9abe:	31 96       	adiw	r30, 0x01	; 1
    9ac0:	20 81       	ld	r18, Z
    9ac2:	2a a7       	std	Y+42, r18	; 0x2a
    9ac4:	3a c0       	rjmp	.+116    	; 0x9b3a <edit_curve_item+0x238>
		}
		else
		{
			Points[0] = Config.Curve[curve].Point1;
    9ac6:	e5 5d       	subi	r30, 0xD5	; 213
    9ac8:	fd 4f       	sbci	r31, 0xFD	; 253
    9aca:	20 81       	ld	r18, Z
    9acc:	02 2e       	mov	r0, r18
    9ace:	00 0c       	add	r0, r0
    9ad0:	33 0b       	sbc	r19, r19
    9ad2:	3a 83       	std	Y+2, r19	; 0x02
    9ad4:	29 83       	std	Y+1, r18	; 0x01
			Points[1] = Config.Curve[curve].Point2;
    9ad6:	31 96       	adiw	r30, 0x01	; 1
    9ad8:	20 81       	ld	r18, Z
    9ada:	02 2e       	mov	r0, r18
    9adc:	00 0c       	add	r0, r0
    9ade:	33 0b       	sbc	r19, r19
    9ae0:	3c 83       	std	Y+4, r19	; 0x04
    9ae2:	2b 83       	std	Y+3, r18	; 0x03
			Points[2] = Config.Curve[curve].Point3;
    9ae4:	31 96       	adiw	r30, 0x01	; 1
    9ae6:	20 81       	ld	r18, Z
    9ae8:	02 2e       	mov	r0, r18
    9aea:	00 0c       	add	r0, r0
    9aec:	33 0b       	sbc	r19, r19
    9aee:	3e 83       	std	Y+6, r19	; 0x06
    9af0:	2d 83       	std	Y+5, r18	; 0x05
			Points[3] = Config.Curve[curve].Point4;
    9af2:	31 96       	adiw	r30, 0x01	; 1
    9af4:	20 81       	ld	r18, Z
    9af6:	02 2e       	mov	r0, r18
    9af8:	00 0c       	add	r0, r0
    9afa:	33 0b       	sbc	r19, r19
    9afc:	38 87       	std	Y+8, r19	; 0x08
    9afe:	2f 83       	std	Y+7, r18	; 0x07
			Points[4] = Config.Curve[curve].Point5;
    9b00:	31 96       	adiw	r30, 0x01	; 1
    9b02:	20 81       	ld	r18, Z
    9b04:	02 2e       	mov	r0, r18
    9b06:	00 0c       	add	r0, r0
    9b08:	33 0b       	sbc	r19, r19
    9b0a:	3a 87       	std	Y+10, r19	; 0x0a
    9b0c:	29 87       	std	Y+9, r18	; 0x09
			Points[5] = Config.Curve[curve].Point6;
    9b0e:	ed a1       	ldd	r30, Y+37	; 0x25
    9b10:	fe a1       	ldd	r31, Y+38	; 0x26
    9b12:	e7 5c       	subi	r30, 0xC7	; 199
    9b14:	f9 4f       	sbci	r31, 0xF9	; 249
    9b16:	20 81       	ld	r18, Z
    9b18:	02 2e       	mov	r0, r18
    9b1a:	00 0c       	add	r0, r0
    9b1c:	33 0b       	sbc	r19, r19
    9b1e:	3c 87       	std	Y+12, r19	; 0x0c
    9b20:	2b 87       	std	Y+11, r18	; 0x0b
			Points[6] = Config.Curve[curve].Point7;
    9b22:	fc 01       	movw	r30, r24
    9b24:	ef 5c       	subi	r30, 0xCF	; 207
    9b26:	fd 4f       	sbci	r31, 0xFD	; 253
    9b28:	20 81       	ld	r18, Z
    9b2a:	02 2e       	mov	r0, r18
    9b2c:	00 0c       	add	r0, r0
    9b2e:	33 0b       	sbc	r19, r19
    9b30:	3e 87       	std	Y+14, r19	; 0x0e
    9b32:	2d 87       	std	Y+13, r18	; 0x0d
			channel	= Config.Curve[curve].channel;			
    9b34:	31 96       	adiw	r30, 0x01	; 1
    9b36:	30 81       	ld	r19, Z
    9b38:	3a a7       	std	Y+42, r19	; 0x2a
    9b3a:	4e 01       	movw	r8, r28
    9b3c:	4f e0       	ldi	r20, 0x0F	; 15
    9b3e:	84 0e       	add	r8, r20
    9b40:	91 1c       	adc	r9, r1
    9b42:	ce 01       	movw	r24, r28
    9b44:	01 96       	adiw	r24, 0x01	; 1
    9b46:	2c 01       	movw	r4, r24
		}

		// Calculate and draw points
		for (i = 0; i < 7; i++)
    9b48:	30 e0       	ldi	r19, 0x00	; 0
				}
			}
			// Curves -125 to -125
			else
			{
				InterPoints[i] = (int8_t)(29 - ((Points[i] * 50) / 250));
    9b4a:	6d e1       	ldi	r22, 0x1D	; 29
    9b4c:	76 2e       	mov	r7, r22
			if (type == CURVE)
			{
				// Curves 0 to 100
				if (curve < 2)
				{
					InterPoints[i] = (int8_t)(54 - ((Points[i] * 50) / 100));				
    9b4e:	76 e3       	ldi	r23, 0x36	; 54
    9b50:	67 2e       	mov	r6, r23

		// Calculate and draw points
		for (i = 0; i < 7; i++)
		{
			// Interpolate points for the offset graph
			if (type == CURVE)
    9b52:	14 30       	cpi	r17, 0x04	; 4
    9b54:	c1 f4       	brne	.+48     	; 0x9b86 <edit_curve_item+0x284>
			{
				// Curves 0 to 100
				if (curve < 2)
    9b56:	98 a1       	ldd	r25, Y+32	; 0x20
				{
					InterPoints[i] = (int8_t)(54 - ((Points[i] * 50) / 100));				
    9b58:	f2 01       	movw	r30, r4
		{
			// Interpolate points for the offset graph
			if (type == CURVE)
			{
				// Curves 0 to 100
				if (curve < 2)
    9b5a:	92 30       	cpi	r25, 0x02	; 2
    9b5c:	40 f4       	brcc	.+16     	; 0x9b6e <edit_curve_item+0x26c>
				{
					InterPoints[i] = (int8_t)(54 - ((Points[i] * 50) / 100));				
    9b5e:	80 81       	ld	r24, Z
    9b60:	91 81       	ldd	r25, Z+1	; 0x01
    9b62:	97 fd       	sbrc	r25, 7
    9b64:	01 96       	adiw	r24, 0x01	; 1
    9b66:	95 95       	asr	r25
    9b68:	87 95       	ror	r24
    9b6a:	f6 2d       	mov	r31, r6
    9b6c:	09 c0       	rjmp	.+18     	; 0x9b80 <edit_curve_item+0x27e>
				}
				// Curves -100 to -100
				else
				{
					InterPoints[i] = (int8_t)(29 - ((Points[i] * 50) / 200));			
    9b6e:	80 81       	ld	r24, Z
    9b70:	91 81       	ldd	r25, Z+1	; 0x01
    9b72:	97 fd       	sbrc	r25, 7
    9b74:	03 96       	adiw	r24, 0x03	; 3
    9b76:	95 95       	asr	r25
    9b78:	87 95       	ror	r24
    9b7a:	95 95       	asr	r25
    9b7c:	87 95       	ror	r24
    9b7e:	f7 2d       	mov	r31, r7
    9b80:	f8 1b       	sub	r31, r24
    9b82:	8f 2f       	mov	r24, r31
    9b84:	09 c0       	rjmp	.+18     	; 0x9b98 <edit_curve_item+0x296>
				}
			}
			// Curves -125 to -125
			else
			{
				InterPoints[i] = (int8_t)(29 - ((Points[i] * 50) / 250));
    9b86:	f2 01       	movw	r30, r4
    9b88:	80 81       	ld	r24, Z
    9b8a:	91 81       	ldd	r25, Z+1	; 0x01
    9b8c:	65 e0       	ldi	r22, 0x05	; 5
    9b8e:	70 e0       	ldi	r23, 0x00	; 0
    9b90:	0e 94 2c 6f 	call	0xde58	; 0xde58 <__divmodhi4>
    9b94:	87 2d       	mov	r24, r7
    9b96:	86 1b       	sub	r24, r22
    9b98:	f4 01       	movw	r30, r8
    9b9a:	80 83       	st	Z, r24
			}

			// Draw boxes on the five points
			switch(i)
    9b9c:	33 30       	cpi	r19, 0x03	; 3
    9b9e:	79 f0       	breq	.+30     	; 0x9bbe <edit_curve_item+0x2bc>
    9ba0:	2c f4       	brge	.+10     	; 0x9bac <edit_curve_item+0x2aa>
    9ba2:	31 30       	cpi	r19, 0x01	; 1
    9ba4:	a1 f0       	breq	.+40     	; 0x9bce <edit_curve_item+0x2cc>
    9ba6:	32 30       	cpi	r19, 0x02	; 2
    9ba8:	41 f0       	breq	.+16     	; 0x9bba <edit_curve_item+0x2b8>
    9baa:	05 c0       	rjmp	.+10     	; 0x9bb6 <edit_curve_item+0x2b4>
    9bac:	35 30       	cpi	r19, 0x05	; 5
    9bae:	59 f0       	breq	.+22     	; 0x9bc6 <edit_curve_item+0x2c4>
    9bb0:	44 f0       	brlt	.+16     	; 0x9bc2 <edit_curve_item+0x2c0>
    9bb2:	36 30       	cpi	r19, 0x06	; 6
    9bb4:	51 f0       	breq	.+20     	; 0x9bca <edit_curve_item+0x2c8>
			{
				case 0:
					Point_x = 2;
    9bb6:	52 e0       	ldi	r21, 0x02	; 2
    9bb8:	0b c0       	rjmp	.+22     	; 0x9bd0 <edit_curve_item+0x2ce>
					break;
				case 1:
					Point_x = 22;
					break;
				case 2:
					Point_x = 42;
    9bba:	5a e2       	ldi	r21, 0x2A	; 42
					break;
    9bbc:	09 c0       	rjmp	.+18     	; 0x9bd0 <edit_curve_item+0x2ce>
				case 3:
					Point_x = 62;
    9bbe:	5e e3       	ldi	r21, 0x3E	; 62
					break;
    9bc0:	07 c0       	rjmp	.+14     	; 0x9bd0 <edit_curve_item+0x2ce>
				case 4:
					Point_x = 82;
    9bc2:	52 e5       	ldi	r21, 0x52	; 82
					break;
    9bc4:	05 c0       	rjmp	.+10     	; 0x9bd0 <edit_curve_item+0x2ce>
				case 5:
					Point_x = 102;
    9bc6:	56 e6       	ldi	r21, 0x66	; 102
					break;
    9bc8:	03 c0       	rjmp	.+6      	; 0x9bd0 <edit_curve_item+0x2ce>
				case 6:
					Point_x = 121;
    9bca:	59 e7       	ldi	r21, 0x79	; 121
					break;
    9bcc:	01 c0       	rjmp	.+2      	; 0x9bd0 <edit_curve_item+0x2ce>
			{
				case 0:
					Point_x = 2;
					break;
				case 1:
					Point_x = 22;
    9bce:	56 e1       	ldi	r21, 0x16	; 22
					Point_x = 121;
					break;
			}
			
			// Black box surrounding point (vertical origin is offset by 2)
			fillrect(buffer, Point_x, InterPoints[i] - 2, 5, 5, 1);
    9bd0:	f4 01       	movw	r30, r8
    9bd2:	41 91       	ld	r20, Z+
    9bd4:	4f 01       	movw	r8, r30
    9bd6:	42 50       	subi	r20, 0x02	; 2
    9bd8:	ee 24       	eor	r14, r14
    9bda:	e3 94       	inc	r14
    9bdc:	05 e0       	ldi	r16, 0x05	; 5
    9bde:	25 e0       	ldi	r18, 0x05	; 5
    9be0:	65 2f       	mov	r22, r21
    9be2:	80 e0       	ldi	r24, 0x00	; 0
    9be4:	91 e0       	ldi	r25, 0x01	; 1
    9be6:	39 ab       	std	Y+49, r19	; 0x31
    9be8:	5a ab       	std	Y+50, r21	; 0x32
    9bea:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <fillrect>
    9bee:	39 a9       	ldd	r19, Y+49	; 0x31
    9bf0:	3f 5f       	subi	r19, 0xFF	; 255
    9bf2:	f2 e0       	ldi	r31, 0x02	; 2
    9bf4:	4f 0e       	add	r4, r31
    9bf6:	51 1c       	adc	r5, r1
			Points[6] = Config.Curve[curve].Point7;
			channel	= Config.Curve[curve].channel;			
		}

		// Calculate and draw points
		for (i = 0; i < 7; i++)
    9bf8:	37 30       	cpi	r19, 0x07	; 7
    9bfa:	09 f0       	breq	.+2      	; 0x9bfe <edit_curve_item+0x2fc>
    9bfc:	aa cf       	rjmp	.-172    	; 0x9b52 <edit_curve_item+0x250>
			// Black box surrounding point (vertical origin is offset by 2)
			fillrect(buffer, Point_x, InterPoints[i] - 2, 5, 5, 1);
		}

		// Draw lines between the points
		drawline(buffer, 4, InterPoints[0], 24, InterPoints[1], 1);
    9bfe:	98 88       	ldd	r9, Y+16	; 0x10
    9c00:	09 2d       	mov	r16, r9
    9c02:	28 e1       	ldi	r18, 0x18	; 24
    9c04:	4f 85       	ldd	r20, Y+15	; 0x0f
    9c06:	64 e0       	ldi	r22, 0x04	; 4
    9c08:	80 e0       	ldi	r24, 0x00	; 0
    9c0a:	91 e0       	ldi	r25, 0x01	; 1
    9c0c:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
		drawline(buffer, 24, InterPoints[1], 44, InterPoints[2], 1);
    9c10:	89 88       	ldd	r8, Y+17	; 0x11
    9c12:	08 2d       	mov	r16, r8
    9c14:	2c e2       	ldi	r18, 0x2C	; 44
    9c16:	49 2d       	mov	r20, r9
    9c18:	68 e1       	ldi	r22, 0x18	; 24
    9c1a:	80 e0       	ldi	r24, 0x00	; 0
    9c1c:	91 e0       	ldi	r25, 0x01	; 1
    9c1e:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
		drawline(buffer, 44, InterPoints[2], 64, InterPoints[3], 1);
    9c22:	9a 88       	ldd	r9, Y+18	; 0x12
    9c24:	09 2d       	mov	r16, r9
    9c26:	20 e4       	ldi	r18, 0x40	; 64
    9c28:	48 2d       	mov	r20, r8
    9c2a:	6c e2       	ldi	r22, 0x2C	; 44
    9c2c:	80 e0       	ldi	r24, 0x00	; 0
    9c2e:	91 e0       	ldi	r25, 0x01	; 1
    9c30:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
		drawline(buffer, 64, InterPoints[3], 84, InterPoints[4], 1);
    9c34:	8b 88       	ldd	r8, Y+19	; 0x13
    9c36:	08 2d       	mov	r16, r8
    9c38:	24 e5       	ldi	r18, 0x54	; 84
    9c3a:	49 2d       	mov	r20, r9
    9c3c:	60 e4       	ldi	r22, 0x40	; 64
    9c3e:	80 e0       	ldi	r24, 0x00	; 0
    9c40:	91 e0       	ldi	r25, 0x01	; 1
    9c42:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
		drawline(buffer, 84, InterPoints[4], 104, InterPoints[5], 1);
    9c46:	9c 88       	ldd	r9, Y+20	; 0x14
    9c48:	09 2d       	mov	r16, r9
    9c4a:	28 e6       	ldi	r18, 0x68	; 104
    9c4c:	48 2d       	mov	r20, r8
    9c4e:	64 e5       	ldi	r22, 0x54	; 84
    9c50:	80 e0       	ldi	r24, 0x00	; 0
    9c52:	91 e0       	ldi	r25, 0x01	; 1
    9c54:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>
		drawline(buffer, 104, InterPoints[5], 123, InterPoints[6], 1);
    9c58:	0d 89       	ldd	r16, Y+21	; 0x15
    9c5a:	2b e7       	ldi	r18, 0x7B	; 123
    9c5c:	49 2d       	mov	r20, r9
    9c5e:	68 e6       	ldi	r22, 0x68	; 104
    9c60:	80 e0       	ldi	r24, 0x00	; 0
    9c62:	91 e0       	ldi	r25, 0x01	; 1
    9c64:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <drawline>

		// Highlight the current point
		switch(Point_ref)
    9c68:	4f 2c       	mov	r4, r15
    9c6a:	51 2c       	mov	r5, r1
    9c6c:	5a a9       	ldd	r21, Y+50	; 0x32
    9c6e:	28 e0       	ldi	r18, 0x08	; 8
    9c70:	42 16       	cp	r4, r18
    9c72:	51 04       	cpc	r5, r1
    9c74:	90 f4       	brcc	.+36     	; 0x9c9a <edit_curve_item+0x398>
    9c76:	f2 01       	movw	r30, r4
    9c78:	e7 5a       	subi	r30, 0xA7	; 167
    9c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    9c7c:	0c 94 5f 6f 	jmp	0xdebe	; 0xdebe <__tablejump2__>
		{
			case 0:
			Point_x = 0;
			break;
			case 1:
			Point_x = 20;
    9c80:	54 e1       	ldi	r21, 0x14	; 20
			break;
    9c82:	0b c0       	rjmp	.+22     	; 0x9c9a <edit_curve_item+0x398>
			case 2:
			Point_x = 40;
    9c84:	58 e2       	ldi	r21, 0x28	; 40
			break;
    9c86:	09 c0       	rjmp	.+18     	; 0x9c9a <edit_curve_item+0x398>
			case 3:
			Point_x = 60;
    9c88:	5c e3       	ldi	r21, 0x3C	; 60
			break;
    9c8a:	07 c0       	rjmp	.+14     	; 0x9c9a <edit_curve_item+0x398>
			case 4:
			Point_x = 80;
    9c8c:	50 e5       	ldi	r21, 0x50	; 80
			break;
    9c8e:	05 c0       	rjmp	.+10     	; 0x9c9a <edit_curve_item+0x398>
			case 5:
			Point_x = 100;
    9c90:	54 e6       	ldi	r21, 0x64	; 100
			break;
    9c92:	03 c0       	rjmp	.+6      	; 0x9c9a <edit_curve_item+0x398>
			case 6:
			Point_x = 119;
			break;
			case 7:
			Point_x = 119;
    9c94:	57 e7       	ldi	r21, 0x77	; 119
			break;
    9c96:	01 c0       	rjmp	.+2      	; 0x9c9a <edit_curve_item+0x398>

		// Highlight the current point
		switch(Point_ref)
		{
			case 0:
			Point_x = 0;
    9c98:	50 e0       	ldi	r21, 0x00	; 0
			Point_x = 119;
			break;
		}
		
		// Adjust box coordinates
		Point_y = (InterPoints[Point_ref] - 4);
    9c9a:	ef e0       	ldi	r30, 0x0F	; 15
    9c9c:	f0 e0       	ldi	r31, 0x00	; 0
    9c9e:	ec 0f       	add	r30, r28
    9ca0:	fd 1f       	adc	r31, r29
    9ca2:	ef 0d       	add	r30, r15
    9ca4:	f1 1d       	adc	r31, r1
    9ca6:	40 81       	ld	r20, Z

		// Channel numbers are highlighted differently
		if (Point_ref == 7)
    9ca8:	37 e0       	ldi	r19, 0x07	; 7
    9caa:	f3 12       	cpse	r15, r19
    9cac:	38 c0       	rjmp	.+112    	; 0x9d1e <edit_curve_item+0x41c>
		{
			pgm_mugui_scopy((char*)pgm_read_word(&text_menu[reference + Config.Curve[curve].channel]));		// Copy string to pBuffer
    9cae:	a1 01       	movw	r20, r2
    9cb0:	47 5c       	subi	r20, 0xC7	; 199
    9cb2:	59 4f       	sbci	r21, 0xF9	; 249
    9cb4:	6a 01       	movw	r12, r20
    9cb6:	4a 01       	movw	r8, r20
    9cb8:	5e ec       	ldi	r21, 0xCE	; 206
    9cba:	85 1a       	sub	r8, r21
    9cbc:	5d ef       	ldi	r21, 0xFD	; 253
    9cbe:	95 0a       	sbc	r9, r21
    9cc0:	f4 01       	movw	r30, r8
    9cc2:	80 81       	ld	r24, Z
    9cc4:	eb a1       	ldd	r30, Y+35	; 0x23
    9cc6:	fc a1       	ldd	r31, Y+36	; 0x24
    9cc8:	e8 0f       	add	r30, r24
    9cca:	f1 1d       	adc	r31, r1
    9ccc:	87 fd       	sbrc	r24, 7
    9cce:	fa 95       	dec	r31
    9cd0:	ee 0f       	add	r30, r30
    9cd2:	ff 1f       	adc	r31, r31
    9cd4:	e1 5b       	subi	r30, 0xB1	; 177
    9cd6:	fb 4e       	sbci	r31, 0xEB	; 235
    9cd8:	85 91       	lpm	r24, Z+
    9cda:	94 91       	lpm	r25, Z
    9cdc:	0e 94 ee 61 	call	0xc3dc	; 0xc3dc <pgm_mugui_scopy>
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
    9ce0:	ae 01       	movw	r20, r28
    9ce2:	45 5e       	subi	r20, 0xE5	; 229
    9ce4:	5f 4f       	sbci	r21, 0xFF	; 255
    9ce6:	6d e8       	ldi	r22, 0x8D	; 141
    9ce8:	7f e0       	ldi	r23, 0x0F	; 15
    9cea:	82 ec       	ldi	r24, 0xC2	; 194
    9cec:	95 e0       	ldi	r25, 0x05	; 5
    9cee:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
			drawrect(buffer,(123 - size.x),(chanbox_y - 1 - size.y), (size.x + 5), (size.y + 4), 1);		// Outline
    9cf2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    9cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9cf6:	04 e0       	ldi	r16, 0x04	; 4
    9cf8:	04 0f       	add	r16, r20
    9cfa:	25 e0       	ldi	r18, 0x05	; 5
    9cfc:	28 0f       	add	r18, r24
    9cfe:	40 95       	com	r20
    9d00:	ff 8d       	ldd	r31, Y+31	; 0x1f
    9d02:	4f 0f       	add	r20, r31
    9d04:	6b e7       	ldi	r22, 0x7B	; 123
    9d06:	68 1b       	sub	r22, r24
    9d08:	ee 24       	eor	r14, r14
    9d0a:	e3 94       	inc	r14
    9d0c:	80 e0       	ldi	r24, 0x00	; 0
    9d0e:	91 e0       	ldi	r25, 0x01	; 1
    9d10:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <drawrect>
		{
			drawrect(buffer,Point_x,Point_y, 9, 9, 1);
		}

		// Print value of current object in a box somewhere
		if (type == CURVE)
    9d14:	14 30       	cpi	r17, 0x04	; 4
    9d16:	09 f0       	breq	.+2      	; 0x9d1a <edit_curve_item+0x418>
    9d18:	59 c0       	rjmp	.+178    	; 0x9dcc <edit_curve_item+0x4ca>
					break;
				case 6:
					value = Config.Curve[curve].Point7;
					break;
				case 7:
					value = Config.Curve[curve].channel;
    9d1a:	f4 01       	movw	r30, r8
    9d1c:	5a c0       	rjmp	.+180    	; 0x9dd2 <edit_curve_item+0x4d0>
			Point_x = 119;
			break;
		}
		
		// Adjust box coordinates
		Point_y = (InterPoints[Point_ref] - 4);
    9d1e:	44 50       	subi	r20, 0x04	; 4
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
			drawrect(buffer,(123 - size.x),(chanbox_y - 1 - size.y), (size.x + 5), (size.y + 4), 1);		// Outline
		}
		else
		{
			drawrect(buffer,Point_x,Point_y, 9, 9, 1);
    9d20:	ee 24       	eor	r14, r14
    9d22:	e3 94       	inc	r14
    9d24:	09 e0       	ldi	r16, 0x09	; 9
    9d26:	29 e0       	ldi	r18, 0x09	; 9
    9d28:	65 2f       	mov	r22, r21
    9d2a:	80 e0       	ldi	r24, 0x00	; 0
    9d2c:	91 e0       	ldi	r25, 0x01	; 1
    9d2e:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <drawrect>
		}

		// Print value of current object in a box somewhere
		if (type == CURVE)
    9d32:	14 30       	cpi	r17, 0x04	; 4
    9d34:	39 f5       	brne	.+78     	; 0x9d84 <edit_curve_item+0x482>
		{
			switch(Point_ref)
    9d36:	27 e0       	ldi	r18, 0x07	; 7
    9d38:	42 16       	cp	r4, r18
    9d3a:	51 04       	cpc	r5, r1
    9d3c:	08 f0       	brcs	.+2      	; 0x9d40 <edit_curve_item+0x43e>
    9d3e:	4d c0       	rjmp	.+154    	; 0x9dda <edit_curve_item+0x4d8>
    9d40:	f2 01       	movw	r30, r4
    9d42:	ef 59       	subi	r30, 0x9F	; 159
    9d44:	ff 4f       	sbci	r31, 0xFF	; 255
    9d46:	0c 94 5f 6f 	jmp	0xdebe	; 0xdebe <__tablejump2__>
			{
				case 0:
					value = Config.Curve[curve].Point1;
    9d4a:	f1 01       	movw	r30, r2
    9d4c:	ec 59       	subi	r30, 0x9C	; 156
    9d4e:	f7 4f       	sbci	r31, 0xF7	; 247
    9d50:	40 c0       	rjmp	.+128    	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 1:
					value = Config.Curve[curve].Point2;
    9d52:	f1 01       	movw	r30, r2
    9d54:	eb 59       	subi	r30, 0x9B	; 155
    9d56:	f7 4f       	sbci	r31, 0xF7	; 247
    9d58:	3c c0       	rjmp	.+120    	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 2:
					value = Config.Curve[curve].Point3;
    9d5a:	f1 01       	movw	r30, r2
    9d5c:	ea 59       	subi	r30, 0x9A	; 154
    9d5e:	f7 4f       	sbci	r31, 0xF7	; 247
    9d60:	38 c0       	rjmp	.+112    	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 3:
					value = Config.Curve[curve].Point4;
    9d62:	f1 01       	movw	r30, r2
    9d64:	e9 59       	subi	r30, 0x99	; 153
    9d66:	f7 4f       	sbci	r31, 0xF7	; 247
    9d68:	34 c0       	rjmp	.+104    	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 4:
					value = Config.Curve[curve].Point5;
    9d6a:	f1 01       	movw	r30, r2
    9d6c:	e8 59       	subi	r30, 0x98	; 152
    9d6e:	f7 4f       	sbci	r31, 0xF7	; 247
    9d70:	30 c0       	rjmp	.+96     	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 5:
					value = Config.Curve[curve].Point6;
    9d72:	ed a1       	ldd	r30, Y+37	; 0x25
    9d74:	fe a1       	ldd	r31, Y+38	; 0x26
    9d76:	e7 5c       	subi	r30, 0xC7	; 199
    9d78:	f9 4f       	sbci	r31, 0xF9	; 249
    9d7a:	2b c0       	rjmp	.+86     	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 6:
					value = Config.Curve[curve].Point7;
    9d7c:	f1 01       	movw	r30, r2
    9d7e:	e6 59       	subi	r30, 0x96	; 150
    9d80:	f7 4f       	sbci	r31, 0xF7	; 247
    9d82:	27 c0       	rjmp	.+78     	; 0x9dd2 <edit_curve_item+0x4d0>
			}
		}
		// Offsets
		else
		{
			switch(Point_ref)
    9d84:	f7 e0       	ldi	r31, 0x07	; 7
    9d86:	4f 16       	cp	r4, r31
    9d88:	51 04       	cpc	r5, r1
    9d8a:	38 f5       	brcc	.+78     	; 0x9dda <edit_curve_item+0x4d8>
    9d8c:	f2 01       	movw	r30, r4
    9d8e:	e8 59       	subi	r30, 0x98	; 152
    9d90:	ff 4f       	sbci	r31, 0xFF	; 255
    9d92:	0c 94 5f 6f 	jmp	0xdebe	; 0xdebe <__tablejump2__>
			{
				case 0:
					value = Config.Offsets[curve].Point1;
    9d96:	f1 01       	movw	r30, r2
    9d98:	e4 56       	subi	r30, 0x64	; 100
    9d9a:	f7 4f       	sbci	r31, 0xF7	; 247
    9d9c:	1a c0       	rjmp	.+52     	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 1:
					value = Config.Offsets[curve].Point2;
    9d9e:	f1 01       	movw	r30, r2
    9da0:	e3 56       	subi	r30, 0x63	; 99
    9da2:	f7 4f       	sbci	r31, 0xF7	; 247
    9da4:	16 c0       	rjmp	.+44     	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 2:
					value = Config.Offsets[curve].Point3;
    9da6:	f1 01       	movw	r30, r2
    9da8:	e2 56       	subi	r30, 0x62	; 98
    9daa:	f7 4f       	sbci	r31, 0xF7	; 247
    9dac:	12 c0       	rjmp	.+36     	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 3:
					value = Config.Offsets[curve].Point4;
    9dae:	f1 01       	movw	r30, r2
    9db0:	e1 56       	subi	r30, 0x61	; 97
    9db2:	f7 4f       	sbci	r31, 0xF7	; 247
    9db4:	0e c0       	rjmp	.+28     	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 4:
					value = Config.Offsets[curve].Point5;
    9db6:	f1 01       	movw	r30, r2
    9db8:	e0 56       	subi	r30, 0x60	; 96
    9dba:	f7 4f       	sbci	r31, 0xF7	; 247
    9dbc:	0a c0       	rjmp	.+20     	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 5:
					value = Config.Offsets[curve].Point6;
    9dbe:	e8 a5       	ldd	r30, Y+40	; 0x28
    9dc0:	f9 a5       	ldd	r31, Y+41	; 0x29
    9dc2:	07 c0       	rjmp	.+14     	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 6:
					value = Config.Offsets[curve].Point7;
    9dc4:	f1 01       	movw	r30, r2
    9dc6:	ee 55       	subi	r30, 0x5E	; 94
    9dc8:	f7 4f       	sbci	r31, 0xF7	; 247
    9dca:	03 c0       	rjmp	.+6      	; 0x9dd2 <edit_curve_item+0x4d0>
					break;
				case 7:
					value = Config.Offsets[curve].channel;
    9dcc:	f6 01       	movw	r30, r12
    9dce:	e6 59       	subi	r30, 0x96	; 150
    9dd0:	fd 4f       	sbci	r31, 0xFD	; 253
    9dd2:	c0 80       	ld	r12, Z
    9dd4:	0c 2c       	mov	r0, r12
    9dd6:	00 0c       	add	r0, r0
    9dd8:	dd 08       	sbc	r13, r13
					break;
			}
		}
		
		// Move value box when point 1 is in the way
		if (((Config.Curve[curve].Point1 < 50) && (type == CURVE)) || ((Config.Offsets[curve].Point1 < 50) && (type == OFFSET)))
    9dda:	f1 01       	movw	r30, r2
    9ddc:	ec 59       	subi	r30, 0x9C	; 156
    9dde:	f7 4f       	sbci	r31, 0xF7	; 247
    9de0:	80 81       	ld	r24, Z
    9de2:	82 33       	cpi	r24, 0x32	; 50
    9de4:	14 f4       	brge	.+4      	; 0x9dea <edit_curve_item+0x4e8>
    9de6:	14 30       	cpi	r17, 0x04	; 4
    9de8:	39 f0       	breq	.+14     	; 0x9df8 <edit_curve_item+0x4f6>
    9dea:	ed a5       	ldd	r30, Y+45	; 0x2d
    9dec:	fe a5       	ldd	r31, Y+46	; 0x2e
    9dee:	80 81       	ld	r24, Z
    9df0:	82 33       	cpi	r24, 0x32	; 50
    9df2:	24 f4       	brge	.+8      	; 0x9dfc <edit_curve_item+0x4fa>
    9df4:	15 30       	cpi	r17, 0x05	; 5
    9df6:	11 f4       	brne	.+4      	; 0x9dfc <edit_curve_item+0x4fa>
		{
			varbox_y = 0;
    9df8:	91 2c       	mov	r9, r1
    9dfa:	02 c0       	rjmp	.+4      	; 0x9e00 <edit_curve_item+0x4fe>
		}
		else
		{
			varbox_y = 40;			
    9dfc:	98 e2       	ldi	r25, 0x28	; 40
    9dfe:	99 2e       	mov	r9, r25
		}

		// Move channel box when points 6 and 7 are in the way
		if (((Config.Curve[curve].Point6 + Config.Curve[curve].Point7) < 0) && (type == CURVE))
    9e00:	ed a1       	ldd	r30, Y+37	; 0x25
    9e02:	fe a1       	ldd	r31, Y+38	; 0x26
    9e04:	e7 5c       	subi	r30, 0xC7	; 199
    9e06:	f9 4f       	sbci	r31, 0xF9	; 249
    9e08:	20 81       	ld	r18, Z
    9e0a:	f5 01       	movw	r30, r10
    9e0c:	ef 5c       	subi	r30, 0xCF	; 207
    9e0e:	fd 4f       	sbci	r31, 0xFD	; 253
    9e10:	80 81       	ld	r24, Z
    9e12:	08 2e       	mov	r0, r24
    9e14:	00 0c       	add	r0, r0
    9e16:	99 0b       	sbc	r25, r25
    9e18:	82 0f       	add	r24, r18
    9e1a:	91 1d       	adc	r25, r1
    9e1c:	27 fd       	sbrc	r18, 7
    9e1e:	9a 95       	dec	r25
    9e20:	97 ff       	sbrs	r25, 7
    9e22:	05 c0       	rjmp	.+10     	; 0x9e2e <edit_curve_item+0x52c>
    9e24:	14 30       	cpi	r17, 0x04	; 4
    9e26:	31 f4       	brne	.+12     	; 0x9e34 <edit_curve_item+0x532>
		{
			chanbox_y = 12;
    9e28:	fc e0       	ldi	r31, 0x0C	; 12
    9e2a:	ff 8f       	std	Y+31, r31	; 0x1f
    9e2c:	05 c0       	rjmp	.+10     	; 0x9e38 <edit_curve_item+0x536>
		}
		else
		{
			chanbox_y = 51;
    9e2e:	23 e3       	ldi	r18, 0x33	; 51
    9e30:	2f 8f       	std	Y+31, r18	; 0x1f
    9e32:	02 c0       	rjmp	.+4      	; 0x9e38 <edit_curve_item+0x536>
    9e34:	33 e3       	ldi	r19, 0x33	; 51
    9e36:	3f 8f       	std	Y+31, r19	; 0x1f
		}
		
		// Print the graph point values
		if (Point_ref < 7)
    9e38:	46 e0       	ldi	r20, 0x06	; 6
    9e3a:	4f 15       	cp	r20, r15
    9e3c:	a8 f1       	brcs	.+106    	; 0x9ea8 <edit_curve_item+0x5a6>
    9e3e:	4a e0       	ldi	r20, 0x0A	; 10
    9e40:	62 ec       	ldi	r22, 0xC2	; 194
    9e42:	75 e0       	ldi	r23, 0x05	; 5
    9e44:	c6 01       	movw	r24, r12
    9e46:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
		{
			mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana8, &size);			// Get dimensions of text
    9e4a:	ae 01       	movw	r20, r28
    9e4c:	45 5e       	subi	r20, 0xE5	; 229
    9e4e:	5f 4f       	sbci	r21, 0xFF	; 255
    9e50:	6d e8       	ldi	r22, 0x8D	; 141
    9e52:	7f e0       	ldi	r23, 0x0F	; 15
    9e54:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
			fillrect(buffer,varbox_x,varbox_y, (size.x + 5), (size.y + 4), 0);								// White box
    9e58:	0d 8d       	ldd	r16, Y+29	; 0x1d
    9e5a:	0c 5f       	subi	r16, 0xFC	; 252
    9e5c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9e5e:	2b 5f       	subi	r18, 0xFB	; 251
    9e60:	e1 2c       	mov	r14, r1
    9e62:	49 2d       	mov	r20, r9
    9e64:	60 e0       	ldi	r22, 0x00	; 0
    9e66:	80 e0       	ldi	r24, 0x00	; 0
    9e68:	91 e0       	ldi	r25, 0x01	; 1
    9e6a:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <fillrect>
			drawrect(buffer,varbox_x,varbox_y, (size.x + 5), (size.y + 4), 1);								// Outline
    9e6e:	0d 8d       	ldd	r16, Y+29	; 0x1d
    9e70:	0c 5f       	subi	r16, 0xFC	; 252
    9e72:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9e74:	2b 5f       	subi	r18, 0xFB	; 251
    9e76:	ee 24       	eor	r14, r14
    9e78:	e3 94       	inc	r14
    9e7a:	49 2d       	mov	r20, r9
    9e7c:	60 e0       	ldi	r22, 0x00	; 0
    9e7e:	80 e0       	ldi	r24, 0x00	; 0
    9e80:	91 e0       	ldi	r25, 0x01	; 1
    9e82:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <drawrect>
    9e86:	4a e0       	ldi	r20, 0x0A	; 10
    9e88:	62 ec       	ldi	r22, 0xC2	; 194
    9e8a:	75 e0       	ldi	r23, 0x05	; 5
    9e8c:	c6 01       	movw	r24, r12
    9e8e:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <__itoa_ncheck>
			mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana8,varbox_x + 3,varbox_y + 3);// Value
    9e92:	29 2d       	mov	r18, r9
    9e94:	99 0c       	add	r9, r9
    9e96:	33 0b       	sbc	r19, r19
    9e98:	2d 5f       	subi	r18, 0xFD	; 253
    9e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    9e9c:	43 e0       	ldi	r20, 0x03	; 3
    9e9e:	50 e0       	ldi	r21, 0x00	; 0
    9ea0:	6d e8       	ldi	r22, 0x8D	; 141
    9ea2:	7f e0       	ldi	r23, 0x0F	; 15
    9ea4:	0e 94 ef 62 	call	0xc5de	; 0xc5de <mugui_lcd_puts>
		}
		
		// Print associated channel somewhere for the Generic curve
		if ((curve >= 4) && (type == CURVE))
    9ea8:	58 a1       	ldd	r21, Y+32	; 0x20
    9eaa:	54 30       	cpi	r21, 0x04	; 4
    9eac:	08 f4       	brcc	.+2      	; 0x9eb0 <edit_curve_item+0x5ae>
    9eae:	41 c0       	rjmp	.+130    	; 0x9f32 <edit_curve_item+0x630>
    9eb0:	14 30       	cpi	r17, 0x04	; 4
    9eb2:	09 f0       	breq	.+2      	; 0x9eb6 <edit_curve_item+0x5b4>
    9eb4:	3e c0       	rjmp	.+124    	; 0x9f32 <edit_curve_item+0x630>
		{
			pgm_mugui_scopy((char*)pgm_read_word(&text_menu[reference + Config.Curve[curve].channel]));		// Copy string to pBuffer
    9eb6:	f5 01       	movw	r30, r10
    9eb8:	ee 5c       	subi	r30, 0xCE	; 206
    9eba:	fd 4f       	sbci	r31, 0xFD	; 253
    9ebc:	80 81       	ld	r24, Z
    9ebe:	eb a1       	ldd	r30, Y+35	; 0x23
    9ec0:	fc a1       	ldd	r31, Y+36	; 0x24
    9ec2:	e8 0f       	add	r30, r24
    9ec4:	f1 1d       	adc	r31, r1
    9ec6:	87 fd       	sbrc	r24, 7
    9ec8:	fa 95       	dec	r31
    9eca:	ee 0f       	add	r30, r30
    9ecc:	ff 1f       	adc	r31, r31
    9ece:	e1 5b       	subi	r30, 0xB1	; 177
    9ed0:	fb 4e       	sbci	r31, 0xEB	; 235
    9ed2:	85 91       	lpm	r24, Z+
    9ed4:	94 91       	lpm	r25, Z
    9ed6:	0e 94 ee 61 	call	0xc3dc	; 0xc3dc <pgm_mugui_scopy>
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
    9eda:	ae 01       	movw	r20, r28
    9edc:	45 5e       	subi	r20, 0xE5	; 229
    9ede:	5f 4f       	sbci	r21, 0xFF	; 255
    9ee0:	6d e8       	ldi	r22, 0x8D	; 141
    9ee2:	7f e0       	ldi	r23, 0x0F	; 15
    9ee4:	82 ec       	ldi	r24, 0xC2	; 194
    9ee6:	95 e0       	ldi	r25, 0x05	; 5
    9ee8:	0e 94 9c 61 	call	0xc338	; 0xc338 <mugui_text_sizestring>
			fillrect(buffer,(124 - size.x),(chanbox_y - size.y), (size.x + 3), (size.y + 2), 0);			// White box
    9eec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    9eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9ef0:	02 e0       	ldi	r16, 0x02	; 2
    9ef2:	09 0f       	add	r16, r25
    9ef4:	23 e0       	ldi	r18, 0x03	; 3
    9ef6:	28 0f       	add	r18, r24
    9ef8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    9efa:	49 1b       	sub	r20, r25
    9efc:	6c e7       	ldi	r22, 0x7C	; 124
    9efe:	68 1b       	sub	r22, r24
    9f00:	e1 2c       	mov	r14, r1
    9f02:	80 e0       	ldi	r24, 0x00	; 0
    9f04:	91 e0       	ldi	r25, 0x01	; 1
    9f06:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <fillrect>
    9f0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9f0c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    9f0e:	28 1b       	sub	r18, r24
			print_menu_text(0, 1, (reference + channel), (126 - size.x), (chanbox_y + 2 - size.y));			// Channel
    9f10:	2e 5f       	subi	r18, 0xFE	; 254
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    9f12:	30 e0       	ldi	r19, 0x00	; 0
		if ((curve >= 4) && (type == CURVE))
		{
			pgm_mugui_scopy((char*)pgm_read_word(&text_menu[reference + Config.Curve[curve].channel]));		// Copy string to pBuffer
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
			fillrect(buffer,(124 - size.x),(chanbox_y - size.y), (size.x + 3), (size.y + 2), 0);			// White box
			print_menu_text(0, 1, (reference + channel), (126 - size.x), (chanbox_y + 2 - size.y));			// Channel
    9f14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9f16:	4e e7       	ldi	r20, 0x7E	; 126
    9f18:	48 1b       	sub	r20, r24
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    9f1a:	50 e0       	ldi	r21, 0x00	; 0
    9f1c:	6d e8       	ldi	r22, 0x8D	; 141
    9f1e:	7f e0       	ldi	r23, 0x0F	; 15
    9f20:	8b a1       	ldd	r24, Y+35	; 0x23
    9f22:	9c a1       	ldd	r25, Y+36	; 0x24
    9f24:	ea a5       	ldd	r30, Y+42	; 0x2a
    9f26:	8e 0f       	add	r24, r30
    9f28:	91 1d       	adc	r25, r1
    9f2a:	e7 fd       	sbrc	r30, 7
    9f2c:	9a 95       	dec	r25
    9f2e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
			fillrect(buffer,(124 - size.x),(chanbox_y - size.y), (size.x + 3), (size.y + 2), 0);			// White box
			print_menu_text(0, 1, (reference + channel), (126 - size.x), (chanbox_y + 2 - size.y));			// Channel
		}

		// Write from buffer
		write_buffer(buffer);
    9f32:	80 e0       	ldi	r24, 0x00	; 0
    9f34:	91 e0       	ldi	r25, 0x01	; 1
    9f36:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
    9f3a:	ff e7       	ldi	r31, 0x7F	; 127
    9f3c:	2a e1       	ldi	r18, 0x1A	; 26
    9f3e:	36 e0       	ldi	r19, 0x06	; 6
    9f40:	f1 50       	subi	r31, 0x01	; 1
    9f42:	20 40       	sbci	r18, 0x00	; 0
    9f44:	30 40       	sbci	r19, 0x00	; 0
    9f46:	e1 f7       	brne	.-8      	; 0x9f40 <edit_curve_item+0x63e>
    9f48:	00 c0       	rjmp	.+0      	; 0x9f4a <edit_curve_item+0x648>
    9f4a:	00 00       	nop

		// Slow the loop rate
		_delay_ms(100);		

		// Poll buttons when idle. This updates the button multiplier
		poll_buttons(true);
    9f4c:	81 e0       	ldi	r24, 0x01	; 1
    9f4e:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <poll_buttons>
	
		// Handle cursor Up/Down limits
		if (button == DOWN)
    9f52:	80 91 1f 09 	lds	r24, 0x091F
    9f56:	80 3d       	cpi	r24, 0xD0	; 208
    9f58:	79 f4       	brne	.+30     	; 0x9f78 <edit_curve_item+0x676>
		{
			value = value - (range.increment * button_multiplier);
    9f5a:	90 91 20 09 	lds	r25, 0x0920
			
			// Limit values to set ranges
			if (value <= range.lower)
    9f5e:	4b a5       	ldd	r20, Y+43	; 0x2b
    9f60:	24 2f       	mov	r18, r20
    9f62:	44 0f       	add	r20, r20
    9f64:	33 0b       	sbc	r19, r19
    9f66:	5f a1       	ldd	r21, Y+39	; 0x27
    9f68:	59 9f       	mul	r21, r25
    9f6a:	c0 18       	sub	r12, r0
    9f6c:	d1 08       	sbc	r13, r1
    9f6e:	11 24       	eor	r1, r1
    9f70:	c2 16       	cp	r12, r18
    9f72:	d3 06       	cpc	r13, r19
    9f74:	94 f4       	brge	.+36     	; 0x9f9a <edit_curve_item+0x698>
    9f76:	10 c0       	rjmp	.+32     	; 0x9f98 <edit_curve_item+0x696>
			{
				value = range.lower;
			}
		}

		if (button == UP)
    9f78:	80 3b       	cpi	r24, 0xB0	; 176
    9f7a:	79 f4       	brne	.+30     	; 0x9f9a <edit_curve_item+0x698>
		{
			value = value + (range.increment * button_multiplier);
    9f7c:	90 91 20 09 	lds	r25, 0x0920
			
			// Limit values to set ranges
			if (value >= range.upper)
    9f80:	ec a5       	ldd	r30, Y+44	; 0x2c
    9f82:	2e 2f       	mov	r18, r30
    9f84:	ee 0f       	add	r30, r30
    9f86:	33 0b       	sbc	r19, r19
    9f88:	ff a1       	ldd	r31, Y+39	; 0x27
    9f8a:	f9 9f       	mul	r31, r25
    9f8c:	c0 0c       	add	r12, r0
    9f8e:	d1 1c       	adc	r13, r1
    9f90:	11 24       	eor	r1, r1
    9f92:	2c 15       	cp	r18, r12
    9f94:	3d 05       	cpc	r19, r13
    9f96:	0c f4       	brge	.+2      	; 0x9f9a <edit_curve_item+0x698>
    9f98:	69 01       	movw	r12, r18
				value = range.upper;
			}
		}

		// Update values for next loop
		if (type == CURVE)
    9f9a:	14 30       	cpi	r17, 0x04	; 4
    9f9c:	49 f5       	brne	.+82     	; 0x9ff0 <edit_curve_item+0x6ee>
		{
			switch(Point_ref)
    9f9e:	28 e0       	ldi	r18, 0x08	; 8
    9fa0:	42 16       	cp	r4, r18
    9fa2:	51 04       	cpc	r5, r1
    9fa4:	08 f0       	brcs	.+2      	; 0x9fa8 <edit_curve_item+0x6a6>
    9fa6:	54 c0       	rjmp	.+168    	; 0xa050 <edit_curve_item+0x74e>
    9fa8:	f2 01       	movw	r30, r4
    9faa:	e1 59       	subi	r30, 0x91	; 145
    9fac:	ff 4f       	sbci	r31, 0xFF	; 255
    9fae:	0c 94 5f 6f 	jmp	0xdebe	; 0xdebe <__tablejump2__>
			{
				case 0:
					Config.Curve[curve].Point1 = value;
    9fb2:	f5 01       	movw	r30, r10
    9fb4:	e5 5d       	subi	r30, 0xD5	; 213
    9fb6:	fd 4f       	sbci	r31, 0xFD	; 253
    9fb8:	36 c0       	rjmp	.+108    	; 0xa026 <edit_curve_item+0x724>
					break;
				case 1:
					Config.Curve[curve].Point2 = value;
    9fba:	f5 01       	movw	r30, r10
    9fbc:	e4 5d       	subi	r30, 0xD4	; 212
    9fbe:	fd 4f       	sbci	r31, 0xFD	; 253
    9fc0:	32 c0       	rjmp	.+100    	; 0xa026 <edit_curve_item+0x724>
					break;
				case 2:
					Config.Curve[curve].Point3 = value;
    9fc2:	f5 01       	movw	r30, r10
    9fc4:	e3 5d       	subi	r30, 0xD3	; 211
    9fc6:	fd 4f       	sbci	r31, 0xFD	; 253
    9fc8:	2e c0       	rjmp	.+92     	; 0xa026 <edit_curve_item+0x724>
					break;
				case 3:
					Config.Curve[curve].Point4 = value;
    9fca:	f5 01       	movw	r30, r10
    9fcc:	e2 5d       	subi	r30, 0xD2	; 210
    9fce:	fd 4f       	sbci	r31, 0xFD	; 253
    9fd0:	2a c0       	rjmp	.+84     	; 0xa026 <edit_curve_item+0x724>
					break;
				case 4:
					Config.Curve[curve].Point5 = value;
    9fd2:	f5 01       	movw	r30, r10
    9fd4:	e1 5d       	subi	r30, 0xD1	; 209
    9fd6:	fd 4f       	sbci	r31, 0xFD	; 253
    9fd8:	26 c0       	rjmp	.+76     	; 0xa026 <edit_curve_item+0x724>
					break;
				case 5:
					Config.Curve[curve].Point6 = value;
    9fda:	ef a5       	ldd	r30, Y+47	; 0x2f
    9fdc:	f8 a9       	ldd	r31, Y+48	; 0x30
    9fde:	23 c0       	rjmp	.+70     	; 0xa026 <edit_curve_item+0x724>
					break;
				case 6:
					Config.Curve[curve].Point7 = value;
    9fe0:	f5 01       	movw	r30, r10
    9fe2:	ef 5c       	subi	r30, 0xCF	; 207
    9fe4:	fd 4f       	sbci	r31, 0xFD	; 253
    9fe6:	29 c0       	rjmp	.+82     	; 0xa03a <edit_curve_item+0x738>
					break;
				case 7:
					Config.Curve[curve].channel = value;
    9fe8:	f5 01       	movw	r30, r10
    9fea:	ee 5c       	subi	r30, 0xCE	; 206
    9fec:	fd 4f       	sbci	r31, 0xFD	; 253
    9fee:	2c c0       	rjmp	.+88     	; 0xa048 <edit_curve_item+0x746>
					break;
			}
		}
		else
		{
			switch(Point_ref)
    9ff0:	f8 e0       	ldi	r31, 0x08	; 8
    9ff2:	4f 16       	cp	r4, r31
    9ff4:	51 04       	cpc	r5, r1
    9ff6:	60 f5       	brcc	.+88     	; 0xa050 <edit_curve_item+0x74e>
    9ff8:	f2 01       	movw	r30, r4
    9ffa:	e9 58       	subi	r30, 0x89	; 137
    9ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    9ffe:	0c 94 5f 6f 	jmp	0xdebe	; 0xdebe <__tablejump2__>
			{
				case 0:
					Config.Offsets[curve].Point1 = value;
    a002:	ed a5       	ldd	r30, Y+45	; 0x2d
    a004:	fe a5       	ldd	r31, Y+46	; 0x2e
    a006:	0f c0       	rjmp	.+30     	; 0xa026 <edit_curve_item+0x724>
					break;
				case 1:
					Config.Offsets[curve].Point2 = value;
    a008:	f5 01       	movw	r30, r10
    a00a:	ec 59       	subi	r30, 0x9C	; 156
    a00c:	fd 4f       	sbci	r31, 0xFD	; 253
    a00e:	0b c0       	rjmp	.+22     	; 0xa026 <edit_curve_item+0x724>
					break;
				case 2:
					Config.Offsets[curve].Point3 = value;
    a010:	f5 01       	movw	r30, r10
    a012:	eb 59       	subi	r30, 0x9B	; 155
    a014:	fd 4f       	sbci	r31, 0xFD	; 253
    a016:	07 c0       	rjmp	.+14     	; 0xa026 <edit_curve_item+0x724>
					break;
				case 3:
					Config.Offsets[curve].Point4 = value;
    a018:	f5 01       	movw	r30, r10
    a01a:	ea 59       	subi	r30, 0x9A	; 154
    a01c:	fd 4f       	sbci	r31, 0xFD	; 253
    a01e:	03 c0       	rjmp	.+6      	; 0xa026 <edit_curve_item+0x724>
					break;
				case 4:
					Config.Offsets[curve].Point5 = value;
    a020:	f5 01       	movw	r30, r10
    a022:	e9 59       	subi	r30, 0x99	; 153
    a024:	fd 4f       	sbci	r31, 0xFD	; 253
    a026:	c0 82       	st	Z, r12
					break;
			}
		}

		// Handle button 4
		if (button == ENTER)
    a028:	80 3e       	cpi	r24, 0xE0	; 224
    a02a:	71 f5       	brne	.+92     	; 0xa088 <edit_curve_item+0x786>
    a02c:	29 c0       	rjmp	.+82     	; 0xa080 <edit_curve_item+0x77e>
					break;
				case 4:
					Config.Offsets[curve].Point5 = value;
					break;
				case 5:
					Config.Offsets[curve].Point6 = value;
    a02e:	e8 a5       	ldd	r30, Y+40	; 0x28
    a030:	f9 a5       	ldd	r31, Y+41	; 0x29
    a032:	f9 cf       	rjmp	.-14     	; 0xa026 <edit_curve_item+0x724>
					break;
				case 6:
					Config.Offsets[curve].Point7 = value;
    a034:	f5 01       	movw	r30, r10
    a036:	e7 59       	subi	r30, 0x97	; 151
    a038:	fd 4f       	sbci	r31, 0xFD	; 253
    a03a:	c0 82       	st	Z, r12
					break;
			}
		}

		// Handle button 4
		if (button == ENTER)
    a03c:	80 3e       	cpi	r24, 0xE0	; 224
    a03e:	21 f5       	brne	.+72     	; 0xa088 <edit_curve_item+0x786>
    a040:	0c c0       	rjmp	.+24     	; 0xa05a <edit_curve_item+0x758>
					break;
				case 6:
					Config.Offsets[curve].Point7 = value;
					break;
				case 7:
					Config.Offsets[curve].channel = value;
    a042:	f5 01       	movw	r30, r10
    a044:	e6 59       	subi	r30, 0x96	; 150
    a046:	fd 4f       	sbci	r31, 0xFD	; 253
    a048:	c0 82       	st	Z, r12
					break;
			}
		}

		// Handle button 4
		if (button == ENTER)
    a04a:	80 3e       	cpi	r24, 0xE0	; 224
    a04c:	e9 f4       	brne	.+58     	; 0xa088 <edit_curve_item+0x786>
    a04e:	0c c0       	rjmp	.+24     	; 0xa068 <edit_curve_item+0x766>
    a050:	80 3e       	cpi	r24, 0xE0	; 224
    a052:	d1 f4       	brne	.+52     	; 0xa088 <edit_curve_item+0x786>
		{
			// Cursor at far right
			if  (
    a054:	f6 e0       	ldi	r31, 0x06	; 6
    a056:	ff 12       	cpse	r15, r31
    a058:	04 c0       	rjmp	.+8      	; 0xa062 <edit_curve_item+0x760>
					((Point_ref == (NUMBEROFPOINTS - 1)) && (curve < 4) && (type == CURVE)) ||
    a05a:	28 a1       	ldd	r18, Y+32	; 0x20
    a05c:	24 30       	cpi	r18, 0x04	; 4
    a05e:	40 f0       	brcs	.+16     	; 0xa070 <edit_curve_item+0x76e>
    a060:	09 c0       	rjmp	.+18     	; 0xa074 <edit_curve_item+0x772>
    a062:	37 e0       	ldi	r19, 0x07	; 7
    a064:	f3 12       	cpse	r15, r19
    a066:	0c c0       	rjmp	.+24     	; 0xa080 <edit_curve_item+0x77e>
					((Point_ref == NUMBEROFPOINTS) && (curve >= 4) && (type == CURVE)) ||
    a068:	48 a1       	ldd	r20, Y+32	; 0x20
    a06a:	44 30       	cpi	r20, 0x04	; 4
    a06c:	38 f4       	brcc	.+14     	; 0xa07c <edit_curve_item+0x77a>
    a06e:	08 c0       	rjmp	.+16     	; 0xa080 <edit_curve_item+0x77e>
		// Handle button 4
		if (button == ENTER)
		{
			// Cursor at far right
			if  (
					((Point_ref == (NUMBEROFPOINTS - 1)) && (curve < 4) && (type == CURVE)) ||
    a070:	14 30       	cpi	r17, 0x04	; 4
    a072:	11 f0       	breq	.+4      	; 0xa078 <edit_curve_item+0x776>
					((Point_ref == NUMBEROFPOINTS) && (curve >= 4) && (type == CURVE)) ||
					((Point_ref == (NUMBEROFPOINTS - 1)) && (type == OFFSET))
    a074:	15 30       	cpi	r17, 0x05	; 5
    a076:	21 f4       	brne	.+8      	; 0xa080 <edit_curve_item+0x77e>
				)
			{
				button = ENTER;
    a078:	80 ee       	ldi	r24, 0xE0	; 224
    a07a:	04 c0       	rjmp	.+8      	; 0xa084 <edit_curve_item+0x782>
		// Handle button 4
		if (button == ENTER)
		{
			// Cursor at far right
			if  (
					((Point_ref == (NUMBEROFPOINTS - 1)) && (curve < 4) && (type == CURVE)) ||
    a07c:	14 30       	cpi	r17, 0x04	; 4
    a07e:	e1 f3       	breq	.-8      	; 0xa078 <edit_curve_item+0x776>
				button = ENTER;
			}
			// Move cursor right
			else
			{
				Point_ref++;
    a080:	f3 94       	inc	r15
				button = NONE;	
    a082:	80 ef       	ldi	r24, 0xF0	; 240
    a084:	80 93 1f 09 	sts	0x091F, r24
			}
		}

		// Handle button 1
		if (button == BACK)
    a088:	80 91 1f 09 	lds	r24, 0x091F
    a08c:	80 37       	cpi	r24, 0x70	; 112
    a08e:	09 f0       	breq	.+2      	; 0xa092 <edit_curve_item+0x790>
    a090:	8f cc       	rjmp	.-1762   	; 0x99b0 <edit_curve_item+0xae>
		{
			// Cursor at far left
			if (Point_ref == 0)
    a092:	f1 10       	cpse	r15, r1
    a094:	02 c0       	rjmp	.+4      	; 0xa09a <edit_curve_item+0x798>
			{
				//button = ABORT;
				button = ENTER;
    a096:	80 ee       	ldi	r24, 0xE0	; 224
    a098:	02 c0       	rjmp	.+4      	; 0xa09e <edit_curve_item+0x79c>
			}
			// Move cursor left
			else
			{
				Point_ref--;
    a09a:	fa 94       	dec	r15
				button = NONE;
    a09c:	80 ef       	ldi	r24, 0xF0	; 240
    a09e:	80 93 1f 09 	sts	0x091F, r24
    a0a2:	86 cc       	rjmp	.-1780   	; 0x99b0 <edit_curve_item+0xae>
			}
		}

	} // while ((button != ENTER) && (button != ABORT))
}
    a0a4:	e2 96       	adiw	r28, 0x32	; 50
    a0a6:	0f b6       	in	r0, 0x3f	; 63
    a0a8:	f8 94       	cli
    a0aa:	de bf       	out	0x3e, r29	; 62
    a0ac:	0f be       	out	0x3f, r0	; 63
    a0ae:	cd bf       	out	0x3d, r28	; 61
    a0b0:	df 91       	pop	r29
    a0b2:	cf 91       	pop	r28
    a0b4:	1f 91       	pop	r17
    a0b6:	0f 91       	pop	r16
    a0b8:	ff 90       	pop	r15
    a0ba:	ef 90       	pop	r14
    a0bc:	df 90       	pop	r13
    a0be:	cf 90       	pop	r12
    a0c0:	bf 90       	pop	r11
    a0c2:	af 90       	pop	r10
    a0c4:	9f 90       	pop	r9
    a0c6:	8f 90       	pop	r8
    a0c8:	7f 90       	pop	r7
    a0ca:	6f 90       	pop	r6
    a0cc:	5f 90       	pop	r5
    a0ce:	4f 90       	pop	r4
    a0d0:	3f 90       	pop	r3
    a0d2:	2f 90       	pop	r2
    a0d4:	08 95       	ret

0000a0d6 <menu_beep>:
void menu_beep(uint8_t beeps)
{
	uint8_t i;

	// Check buzzer mode first
	if (Config.Buzzer == ON)
    a0d6:	90 91 e3 06 	lds	r25, 0x06E3
    a0da:	91 30       	cpi	r25, 0x01	; 1
    a0dc:	99 f4       	brne	.+38     	; 0xa104 <menu_beep+0x2e>
    a0de:	90 e0       	ldi	r25, 0x00	; 0
	{
		for (i=0; i < beeps; i++)
    a0e0:	98 17       	cp	r25, r24
    a0e2:	81 f0       	breq	.+32     	; 0xa104 <menu_beep+0x2e>
		{
			LVA = 1;
    a0e4:	29 9a       	sbi	0x05, 1	; 5
    a0e6:	e7 e8       	ldi	r30, 0x87	; 135
    a0e8:	f3 e1       	ldi	r31, 0x13	; 19
    a0ea:	31 97       	sbiw	r30, 0x01	; 1
    a0ec:	f1 f7       	brne	.-4      	; 0xa0ea <menu_beep+0x14>
    a0ee:	00 c0       	rjmp	.+0      	; 0xa0f0 <menu_beep+0x1a>
    a0f0:	00 00       	nop
			_delay_ms(1);
			LVA = 0;
    a0f2:	29 98       	cbi	0x05, 1	; 5
    a0f4:	e7 e9       	ldi	r30, 0x97	; 151
    a0f6:	fa e3       	ldi	r31, 0x3A	; 58
    a0f8:	31 97       	sbiw	r30, 0x01	; 1
    a0fa:	f1 f7       	brne	.-4      	; 0xa0f8 <menu_beep+0x22>
    a0fc:	00 c0       	rjmp	.+0      	; 0xa0fe <menu_beep+0x28>
    a0fe:	00 00       	nop
	uint8_t i;

	// Check buzzer mode first
	if (Config.Buzzer == ON)
	{
		for (i=0; i < beeps; i++)
    a100:	9f 5f       	subi	r25, 0xFF	; 255
    a102:	ee cf       	rjmp	.-36     	; 0xa0e0 <menu_beep+0xa>
    a104:	08 95       	ret

0000a106 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint16_t items, uint16_t start, uint16_t offset, uint8_t button, uint16_t* cursor, uint16_t* top, uint16_t* temp)
{
    a106:	8f 92       	push	r8
    a108:	9f 92       	push	r9
    a10a:	af 92       	push	r10
    a10c:	bf 92       	push	r11
    a10e:	cf 92       	push	r12
    a110:	df 92       	push	r13
    a112:	ef 92       	push	r14
    a114:	ff 92       	push	r15
    a116:	0f 93       	push	r16
    a118:	1f 93       	push	r17
    a11a:	cf 93       	push	r28
    a11c:	df 93       	push	r29
    a11e:	5c 01       	movw	r10, r24
    a120:	4a 01       	movw	r8, r20
    a122:	e8 01       	movw	r28, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    a124:	d7 01       	movw	r26, r14
    a126:	8d 91       	ld	r24, X+
    a128:	9c 91       	ld	r25, X
    a12a:	11 97       	sbiw	r26, 0x01	; 1
    a12c:	fc 01       	movw	r30, r24
    a12e:	e4 0f       	add	r30, r20
    a130:	f5 1f       	adc	r31, r21
    a132:	ed 93       	st	X+, r30
    a134:	fc 93       	st	X, r31
	start = start + offset;
    a136:	8a 01       	movw	r16, r20
    a138:	06 0f       	add	r16, r22
    a13a:	17 1f       	adc	r17, r23

	// Calculate which function has been requested
	if (button == ENTER)
    a13c:	20 3e       	cpi	r18, 0xE0	; 224
    a13e:	c1 f4       	brne	.+48     	; 0xa170 <update_menu+0x6a>
	{
		switch(*cursor) 
    a140:	88 81       	ld	r24, Y
    a142:	99 81       	ldd	r25, Y+1	; 0x01
    a144:	8f 30       	cpi	r24, 0x0F	; 15
    a146:	91 05       	cpc	r25, r1
    a148:	61 f0       	breq	.+24     	; 0xa162 <update_menu+0x5c>
    a14a:	18 f4       	brcc	.+6      	; 0xa152 <update_menu+0x4c>
    a14c:	03 97       	sbiw	r24, 0x03	; 3
    a14e:	51 f0       	breq	.+20     	; 0xa164 <update_menu+0x5e>
    a150:	55 c0       	rjmp	.+170    	; 0xa1fc <update_menu+0xf6>
    a152:	8b 31       	cpi	r24, 0x1B	; 27
    a154:	91 05       	cpc	r25, r1
    a156:	51 f0       	breq	.+20     	; 0xa16c <update_menu+0x66>
    a158:	87 97       	sbiw	r24, 0x27	; 39
    a15a:	09 f0       	breq	.+2      	; 0xa15e <update_menu+0x58>
    a15c:	4f c0       	rjmp	.+158    	; 0xa1fc <update_menu+0xf6>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    a15e:	33 96       	adiw	r30, 0x03	; 3
    a160:	01 c0       	rjmp	.+2      	; 0xa164 <update_menu+0x5e>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    a162:	31 96       	adiw	r30, 0x01	; 1
    a164:	d6 01       	movw	r26, r12
    a166:	ed 93       	st	X+, r30
    a168:	fc 93       	st	X, r31
				break;	
    a16a:	48 c0       	rjmp	.+144    	; 0xa1fc <update_menu+0xf6>
			case LINE2:
				*temp = *top + 2;
    a16c:	32 96       	adiw	r30, 0x02	; 2
    a16e:	fa cf       	rjmp	.-12     	; 0xa164 <update_menu+0x5e>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    a170:	20 3d       	cpi	r18, 0xD0	; 208
    a172:	39 f5       	brne	.+78     	; 0xa1c2 <update_menu+0xbc>
	{
		switch(*cursor) 
    a174:	88 81       	ld	r24, Y
    a176:	99 81       	ldd	r25, Y+1	; 0x01
    a178:	8f 30       	cpi	r24, 0x0F	; 15
    a17a:	91 05       	cpc	r25, r1
    a17c:	79 f0       	breq	.+30     	; 0xa19c <update_menu+0x96>
    a17e:	18 f4       	brcc	.+6      	; 0xa186 <update_menu+0x80>
    a180:	03 97       	sbiw	r24, 0x03	; 3
    a182:	39 f0       	breq	.+14     	; 0xa192 <update_menu+0x8c>
    a184:	1b c0       	rjmp	.+54     	; 0xa1bc <update_menu+0xb6>
    a186:	8b 31       	cpi	r24, 0x1B	; 27
    a188:	91 05       	cpc	r25, r1
    a18a:	69 f0       	breq	.+26     	; 0xa1a6 <update_menu+0xa0>
    a18c:	87 97       	sbiw	r24, 0x27	; 39
    a18e:	91 f0       	breq	.+36     	; 0xa1b4 <update_menu+0xae>
    a190:	15 c0       	rjmp	.+42     	; 0xa1bc <update_menu+0xb6>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    a192:	b2 e0       	ldi	r27, 0x02	; 2
    a194:	ab 16       	cp	r10, r27
    a196:	b1 04       	cpc	r11, r1
    a198:	20 f5       	brcc	.+72     	; 0xa1e2 <update_menu+0xdc>
    a19a:	30 c0       	rjmp	.+96     	; 0xa1fc <update_menu+0xf6>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    a19c:	e3 e0       	ldi	r30, 0x03	; 3
    a19e:	ae 16       	cp	r10, r30
    a1a0:	b1 04       	cpc	r11, r1
    a1a2:	60 f1       	brcs	.+88     	; 0xa1fc <update_menu+0xf6>
    a1a4:	1b c0       	rjmp	.+54     	; 0xa1dc <update_menu+0xd6>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    a1a6:	f4 e0       	ldi	r31, 0x04	; 4
    a1a8:	af 16       	cp	r10, r31
    a1aa:	b1 04       	cpc	r11, r1
    a1ac:	38 f1       	brcs	.+78     	; 0xa1fc <update_menu+0xf6>
    a1ae:	87 e2       	ldi	r24, 0x27	; 39
    a1b0:	90 e0       	ldi	r25, 0x00	; 0
    a1b2:	1f c0       	rjmp	.+62     	; 0xa1f2 <update_menu+0xec>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    a1b4:	25 e0       	ldi	r18, 0x05	; 5
    a1b6:	a2 16       	cp	r10, r18
    a1b8:	b1 04       	cpc	r11, r1
    a1ba:	00 f1       	brcs	.+64     	; 0xa1fc <update_menu+0xf6>
				break;
			default:
				*cursor = NEXTLINE;
    a1bc:	88 e2       	ldi	r24, 0x28	; 40
    a1be:	90 e0       	ldi	r25, 0x00	; 0
    a1c0:	18 c0       	rjmp	.+48     	; 0xa1f2 <update_menu+0xec>
				break;
		}
	}

	if (button == UP)	
    a1c2:	20 3b       	cpi	r18, 0xB0	; 176
    a1c4:	c9 f4       	brne	.+50     	; 0xa1f8 <update_menu+0xf2>
	{
		switch(*cursor) 
    a1c6:	88 81       	ld	r24, Y
    a1c8:	99 81       	ldd	r25, Y+1	; 0x01
    a1ca:	8f 30       	cpi	r24, 0x0F	; 15
    a1cc:	91 05       	cpc	r25, r1
    a1ce:	61 f0       	breq	.+24     	; 0xa1e8 <update_menu+0xe2>
    a1d0:	70 f0       	brcs	.+28     	; 0xa1ee <update_menu+0xe8>
    a1d2:	8b 31       	cpi	r24, 0x1B	; 27
    a1d4:	91 05       	cpc	r25, r1
    a1d6:	29 f0       	breq	.+10     	; 0xa1e2 <update_menu+0xdc>
    a1d8:	87 97       	sbiw	r24, 0x27	; 39
    a1da:	49 f4       	brne	.+18     	; 0xa1ee <update_menu+0xe8>
		{
			case LINE3:
				*cursor = LINE2;
    a1dc:	8b e1       	ldi	r24, 0x1B	; 27
    a1de:	90 e0       	ldi	r25, 0x00	; 0
    a1e0:	08 c0       	rjmp	.+16     	; 0xa1f2 <update_menu+0xec>
				break;	
			case LINE2:
				*cursor = LINE1;
    a1e2:	8f e0       	ldi	r24, 0x0F	; 15
    a1e4:	90 e0       	ldi	r25, 0x00	; 0
    a1e6:	05 c0       	rjmp	.+10     	; 0xa1f2 <update_menu+0xec>
				break;
			case LINE1:
				*cursor = LINE0;
    a1e8:	83 e0       	ldi	r24, 0x03	; 3
    a1ea:	90 e0       	ldi	r25, 0x00	; 0
    a1ec:	02 c0       	rjmp	.+4      	; 0xa1f2 <update_menu+0xec>
				break;
			case LINE0:
				*cursor = PREVLINE;
    a1ee:	82 e0       	ldi	r24, 0x02	; 2
    a1f0:	90 e0       	ldi	r25, 0x00	; 0
    a1f2:	99 83       	std	Y+1, r25	; 0x01
    a1f4:	88 83       	st	Y, r24
				break;
    a1f6:	02 c0       	rjmp	.+4      	; 0xa1fc <update_menu+0xf6>
				*cursor = PREVLINE;
				break;
		}
	}

	if (button != NONE)	
    a1f8:	20 3f       	cpi	r18, 0xF0	; 240
    a1fa:	61 f0       	breq	.+24     	; 0xa214 <update_menu+0x10e>
	{
		menu_beep(1);
    a1fc:	81 e0       	ldi	r24, 0x01	; 1
    a1fe:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <menu_beep>
    a202:	4f ef       	ldi	r20, 0xFF	; 255
    a204:	84 e3       	ldi	r24, 0x34	; 52
    a206:	9c e0       	ldi	r25, 0x0C	; 12
    a208:	41 50       	subi	r20, 0x01	; 1
    a20a:	80 40       	sbci	r24, 0x00	; 0
    a20c:	90 40       	sbci	r25, 0x00	; 0
    a20e:	e1 f7       	brne	.-8      	; 0xa208 <update_menu+0x102>
    a210:	00 c0       	rjmp	.+0      	; 0xa212 <update_menu+0x10c>
    a212:	00 00       	nop
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    a214:	88 81       	ld	r24, Y
    a216:	99 81       	ldd	r25, Y+1	; 0x01
    a218:	02 97       	sbiw	r24, 0x02	; 2
    a21a:	71 f4       	brne	.+28     	; 0xa238 <update_menu+0x132>
	{
		*cursor  = LINE0;
    a21c:	83 e0       	ldi	r24, 0x03	; 3
    a21e:	90 e0       	ldi	r25, 0x00	; 0
    a220:	99 83       	std	Y+1, r25	; 0x01
    a222:	88 83       	st	Y, r24
		if (*top > start) 
    a224:	d7 01       	movw	r26, r14
    a226:	8d 91       	ld	r24, X+
    a228:	9c 91       	ld	r25, X
    a22a:	11 97       	sbiw	r26, 0x01	; 1
    a22c:	08 17       	cp	r16, r24
    a22e:	19 07       	cpc	r17, r25
    a230:	18 f4       	brcc	.+6      	; 0xa238 <update_menu+0x132>
		{
			*top = *top - 1;								// Shuffle list up
    a232:	01 97       	sbiw	r24, 0x01	; 1
    a234:	8d 93       	st	X+, r24
    a236:	9c 93       	st	X, r25
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    a238:	88 81       	ld	r24, Y
    a23a:	99 81       	ldd	r25, Y+1	; 0x01
    a23c:	88 97       	sbiw	r24, 0x28	; 40
    a23e:	b1 f4       	brne	.+44     	; 0xa26c <update_menu+0x166>
	{
		*cursor  = LINE3;
    a240:	87 e2       	ldi	r24, 0x27	; 39
    a242:	90 e0       	ldi	r25, 0x00	; 0
    a244:	99 83       	std	Y+1, r25	; 0x01
    a246:	88 83       	st	Y, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    a248:	f7 01       	movw	r30, r14
    a24a:	80 81       	ld	r24, Z
    a24c:	91 81       	ldd	r25, Z+1	; 0x01
    a24e:	9c 01       	movw	r18, r24
    a250:	2d 5f       	subi	r18, 0xFD	; 253
    a252:	3f 4f       	sbci	r19, 0xFF	; 255
    a254:	f1 e0       	ldi	r31, 0x01	; 1
    a256:	af 1a       	sub	r10, r31
    a258:	b1 08       	sbc	r11, r1
    a25a:	a0 0e       	add	r10, r16
    a25c:	b1 1e       	adc	r11, r17
    a25e:	2a 15       	cp	r18, r10
    a260:	3b 05       	cpc	r19, r11
    a262:	20 f4       	brcc	.+8      	; 0xa26c <update_menu+0x166>
		{
			*top = *top + 1;								// Shuffle list down
    a264:	01 96       	adiw	r24, 0x01	; 1
    a266:	d7 01       	movw	r26, r14
    a268:	8d 93       	st	X+, r24
    a26a:	9c 93       	st	X, r25
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    a26c:	f7 01       	movw	r30, r14
    a26e:	80 81       	ld	r24, Z
    a270:	91 81       	ldd	r25, Z+1	; 0x01
    a272:	88 19       	sub	r24, r8
    a274:	99 09       	sbc	r25, r9
    a276:	91 83       	std	Z+1, r25	; 0x01
    a278:	80 83       	st	Z, r24
}
    a27a:	df 91       	pop	r29
    a27c:	cf 91       	pop	r28
    a27e:	1f 91       	pop	r17
    a280:	0f 91       	pop	r16
    a282:	ff 90       	pop	r15
    a284:	ef 90       	pop	r14
    a286:	df 90       	pop	r13
    a288:	cf 90       	pop	r12
    a28a:	bf 90       	pop	r11
    a28c:	af 90       	pop	r10
    a28e:	9f 90       	pop	r9
    a290:	8f 90       	pop	r8
    a292:	08 95       	ret

0000a294 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    a294:	28 2f       	mov	r18, r24
    a296:	30 e0       	ldi	r19, 0x00	; 0
    a298:	43 e0       	ldi	r20, 0x03	; 3
    a29a:	50 e0       	ldi	r21, 0x00	; 0
    a29c:	6f ef       	ldi	r22, 0xFF	; 255
    a29e:	71 e0       	ldi	r23, 0x01	; 1
    a2a0:	8d e0       	ldi	r24, 0x0D	; 13
    a2a2:	90 e0       	ldi	r25, 0x00	; 0
    a2a4:	0c 94 3a 38 	jmp	0x7074	; 0x7074 <LCD_Display_Text>

0000a2a8 <print_menu_items>:
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************

void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, const uint16_t* MenuOffsets, const uint16_t* text_link, uint16_t cursor)
{
    a2a8:	2f 92       	push	r2
    a2aa:	3f 92       	push	r3
    a2ac:	4f 92       	push	r4
    a2ae:	5f 92       	push	r5
    a2b0:	6f 92       	push	r6
    a2b2:	7f 92       	push	r7
    a2b4:	8f 92       	push	r8
    a2b6:	9f 92       	push	r9
    a2b8:	af 92       	push	r10
    a2ba:	cf 92       	push	r12
    a2bc:	df 92       	push	r13
    a2be:	ef 92       	push	r14
    a2c0:	ff 92       	push	r15
    a2c2:	0f 93       	push	r16
    a2c4:	1f 93       	push	r17
    a2c6:	cf 93       	push	r28
    a2c8:	df 93       	push	r29
    a2ca:	cd b7       	in	r28, 0x3d	; 61
    a2cc:	de b7       	in	r29, 0x3e	; 62
    a2ce:	2f 97       	sbiw	r28, 0x0f	; 15
    a2d0:	0f b6       	in	r0, 0x3f	; 63
    a2d2:	f8 94       	cli
    a2d4:	de bf       	out	0x3e, r29	; 62
    a2d6:	0f be       	out	0x3f, r0	; 63
    a2d8:	cd bf       	out	0x3d, r28	; 61
    a2da:	2c 01       	movw	r4, r24
    a2dc:	4b 01       	movw	r8, r22
    a2de:	5b 87       	std	Y+11, r21	; 0x0b
    a2e0:	4a 87       	std	Y+10, r20	; 0x0a
    a2e2:	39 01       	movw	r6, r18
    a2e4:	10 2f       	mov	r17, r16
    a2e6:	fd 86       	std	Y+13, r15	; 0x0d
    a2e8:	ec 86       	std	Y+12, r14	; 0x0c
    a2ea:	df 86       	std	Y+15, r13	; 0x0f
    a2ec:	ce 86       	std	Y+14, r12	; 0x0e
	uint16_t offset = 0;
	uint16_t text = 0;
	uint8_t text_offset = 0;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    a2ee:	80 e0       	ldi	r24, 0x00	; 0
    a2f0:	91 e0       	ldi	r25, 0x01	; 1
    a2f2:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>
	print_menu_frame(BASIC);
    a2f6:	80 e0       	ldi	r24, 0x00	; 0
    a2f8:	0e 94 6d 49 	call	0x92da	; 0x92da <print_menu_frame>
    a2fc:	83 e3       	ldi	r24, 0x33	; 51
    a2fe:	28 2e       	mov	r2, r24
    a300:	86 e2       	ldi	r24, 0x26	; 38
    a302:	38 2e       	mov	r3, r24
    a304:	c2 01       	movw	r24, r4
    a306:	88 19       	sub	r24, r8
    a308:	99 09       	sbc	r25, r9
    a30a:	25 e0       	ldi	r18, 0x05	; 5
    a30c:	28 9f       	mul	r18, r24
    a30e:	a0 01       	movw	r20, r0
    a310:	29 9f       	mul	r18, r25
    a312:	50 0d       	add	r21, r0
    a314:	11 24       	eor	r1, r1
    a316:	59 87       	std	Y+9, r21	; 0x09
    a318:	48 87       	std	Y+8, r20	; 0x08
    a31a:	fc 01       	movw	r30, r24
    a31c:	ee 0f       	add	r30, r30
    a31e:	ff 1f       	adc	r31, r31
    a320:	ff 83       	std	Y+7, r31	; 0x07
    a322:	ee 83       	std	Y+6, r30	; 0x06
    a324:	72 01       	movw	r14, r4
    a326:	c1 2c       	mov	r12, r1
    a328:	d1 2c       	mov	r13, r1
    a32a:	41 2c       	mov	r4, r1
    a32c:	51 2c       	mov	r5, r1
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    a32e:	f1 01       	movw	r30, r2
    a330:	24 91       	lpm	r18, Z
    a332:	30 e0       	ldi	r19, 0x00	; 0
    a334:	4a e0       	ldi	r20, 0x0A	; 10
    a336:	50 e0       	ldi	r21, 0x00	; 0
    a338:	6d e8       	ldi	r22, 0x8D	; 141
    a33a:	7f e0       	ldi	r23, 0x0F	; 15
    a33c:	c7 01       	movw	r24, r14
    a33e:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    a342:	11 11       	cpse	r17, r1
    a344:	09 c0       	rjmp	.+18     	; 0xa358 <print_menu_items+0xb0>
    a346:	68 85       	ldd	r22, Y+8	; 0x08
    a348:	79 85       	ldd	r23, Y+9	; 0x09
    a34a:	6c 0d       	add	r22, r12
    a34c:	7d 1d       	adc	r23, r13
    a34e:	66 0d       	add	r22, r6
    a350:	77 1d       	adc	r23, r7
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    a352:	45 e0       	ldi	r20, 0x05	; 5
    a354:	50 e0       	ldi	r21, 0x00	; 0
    a356:	03 c0       	rjmp	.+6      	; 0xa35e <print_menu_items+0xb6>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    a358:	45 e0       	ldi	r20, 0x05	; 5
    a35a:	50 e0       	ldi	r21, 0x00	; 0
    a35c:	b3 01       	movw	r22, r6
    a35e:	ce 01       	movw	r24, r28
    a360:	01 96       	adiw	r24, 0x01	; 1
    a362:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <memcpy_P>
    a366:	2e 81       	ldd	r18, Y+6	; 0x06
    a368:	3f 81       	ldd	r19, Y+7	; 0x07
    a36a:	24 0d       	add	r18, r4
    a36c:	35 1d       	adc	r19, r5
    a36e:	ee 85       	ldd	r30, Y+14	; 0x0e
    a370:	ff 85       	ldd	r31, Y+15	; 0x0f
    a372:	e2 0f       	add	r30, r18
    a374:	f3 1f       	adc	r31, r19
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
    a376:	45 91       	lpm	r20, Z+
    a378:	54 91       	lpm	r21, Z
    a37a:	f7 01       	movw	r30, r14
    a37c:	e8 19       	sub	r30, r8
    a37e:	f9 09       	sbc	r31, r9
    a380:	8a 85       	ldd	r24, Y+10	; 0x0a
    a382:	9b 85       	ldd	r25, Y+11	; 0x0b
    a384:	e8 0f       	add	r30, r24
    a386:	f9 1f       	adc	r31, r25
		offset = values[top + i - start];
    a388:	80 81       	ld	r24, Z
    a38a:	ec 85       	ldd	r30, Y+12	; 0x0c
    a38c:	fd 85       	ldd	r31, Y+13	; 0x0d
    a38e:	e2 0f       	add	r30, r18
    a390:	f3 1f       	adc	r31, r19
		text = base + offset;
		
		// Calculate horizontal offset of text to display
		text_offset = (uint8_t)pgm_read_word(&MenuOffsets[top + i - start]);
    a392:	25 91       	lpm	r18, Z+
    a394:	34 91       	lpm	r19, Z
		
		
		print_menu_text((values[top+i - start]), range1.style, text, text_offset, (uint8_t)pgm_read_byte(&lines[i]));
    a396:	f1 01       	movw	r30, r2
    a398:	04 91       	lpm	r16, Z
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
		offset = values[top + i - start];
    a39a:	08 2e       	mov	r0, r24
    a39c:	00 0c       	add	r0, r0
    a39e:	99 0b       	sbc	r25, r25
		text = base + offset;
    a3a0:	48 0f       	add	r20, r24
    a3a2:	59 1f       	adc	r21, r25
		
		// Calculate horizontal offset of text to display
		text_offset = (uint8_t)pgm_read_word(&MenuOffsets[top + i - start]);
		
		
		print_menu_text((values[top+i - start]), range1.style, text, text_offset, (uint8_t)pgm_read_byte(&lines[i]));
    a3a4:	6c 81       	ldd	r22, Y+4	; 0x04
    a3a6:	0e 94 3a 4a 	call	0x9474	; 0x9474 <print_menu_text>
    a3aa:	ff ef       	ldi	r31, 0xFF	; 255
    a3ac:	2f 1a       	sub	r2, r31
    a3ae:	3f 0a       	sbc	r3, r31
    a3b0:	2f ef       	ldi	r18, 0xFF	; 255
    a3b2:	e2 1a       	sub	r14, r18
    a3b4:	f2 0a       	sbc	r15, r18
    a3b6:	32 e0       	ldi	r19, 0x02	; 2
    a3b8:	43 0e       	add	r4, r19
    a3ba:	51 1c       	adc	r5, r1
    a3bc:	45 e0       	ldi	r20, 0x05	; 5
    a3be:	c4 0e       	add	r12, r20
    a3c0:	d1 1c       	adc	r13, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(BASIC);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    a3c2:	54 e1       	ldi	r21, 0x14	; 20
    a3c4:	c5 16       	cp	r12, r21
    a3c6:	d1 04       	cpc	r13, r1
    a3c8:	09 f0       	breq	.+2      	; 0xa3cc <print_menu_items+0x124>
    a3ca:	b1 cf       	rjmp	.-158    	; 0xa32e <print_menu_items+0x86>
		
		
		print_menu_text((values[top+i - start]), range1.style, text, text_offset, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    a3cc:	8a 2d       	mov	r24, r10
    a3ce:	0e 94 4a 51 	call	0xa294	; 0xa294 <print_cursor>
	write_buffer(buffer);
    a3d2:	80 e0       	ldi	r24, 0x00	; 0
    a3d4:	91 e0       	ldi	r25, 0x01	; 1
    a3d6:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>
	poll_buttons(true);
    a3da:	81 e0       	ldi	r24, 0x01	; 1
    a3dc:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <poll_buttons>
}
    a3e0:	2f 96       	adiw	r28, 0x0f	; 15
    a3e2:	0f b6       	in	r0, 0x3f	; 63
    a3e4:	f8 94       	cli
    a3e6:	de bf       	out	0x3e, r29	; 62
    a3e8:	0f be       	out	0x3f, r0	; 63
    a3ea:	cd bf       	out	0x3d, r28	; 61
    a3ec:	df 91       	pop	r29
    a3ee:	cf 91       	pop	r28
    a3f0:	1f 91       	pop	r17
    a3f2:	0f 91       	pop	r16
    a3f4:	ff 90       	pop	r15
    a3f6:	ef 90       	pop	r14
    a3f8:	df 90       	pop	r13
    a3fa:	cf 90       	pop	r12
    a3fc:	af 90       	pop	r10
    a3fe:	9f 90       	pop	r9
    a400:	8f 90       	pop	r8
    a402:	7f 90       	pop	r7
    a404:	6f 90       	pop	r6
    a406:	5f 90       	pop	r5
    a408:	4f 90       	pop	r4
    a40a:	3f 90       	pop	r3
    a40c:	2f 90       	pop	r2
    a40e:	08 95       	ret

0000a410 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    a410:	4f 92       	push	r4
    a412:	5f 92       	push	r5
    a414:	6f 92       	push	r6
    a416:	7f 92       	push	r7
    a418:	8f 92       	push	r8
    a41a:	af 92       	push	r10
    a41c:	bf 92       	push	r11
    a41e:	cf 92       	push	r12
    a420:	df 92       	push	r13
    a422:	ef 92       	push	r14
    a424:	ff 92       	push	r15
    a426:	0f 93       	push	r16
    a428:	1f 93       	push	r17
    a42a:	cf 93       	push	r28
    a42c:	df 93       	push	r29
    a42e:	00 d0       	rcall	.+0      	; 0xa430 <menu_flight+0x20>
    a430:	00 d0       	rcall	.+0      	; 0xa432 <menu_flight+0x22>
    a432:	1f 92       	push	r1
    a434:	cd b7       	in	r28, 0x3d	; 61
    a436:	de b7       	in	r29, 0x3e	; 62
	menu_range_t range;
	uint8_t text_link;
	uint16_t reference;

	// Set the correct text list for the selected reference
	if ((Config.P1_Reference == MODEL) && (mode == P1))
    a438:	90 91 d9 06 	lds	r25, 0x06D9
    a43c:	92 30       	cpi	r25, 0x02	; 2
    a43e:	39 f4       	brne	.+14     	; 0xa44e <menu_flight+0x3e>
    a440:	81 11       	cpse	r24, r1
    a442:	05 c0       	rjmp	.+10     	; 0xa44e <menu_flight+0x3e>
	{
		reference = FLIGHTSTARTM;
    a444:	e8 e4       	ldi	r30, 0x48	; 72
    a446:	4e 2e       	mov	r4, r30
    a448:	55 24       	eor	r5, r5
    a44a:	53 94       	inc	r5
    a44c:	03 c0       	rjmp	.+6      	; 0xa454 <menu_flight+0x44>
	}
	else
	{
		reference = FLIGHTSTARTE;
    a44e:	7c ea       	ldi	r23, 0xAC	; 172
    a450:	47 2e       	mov	r4, r23
    a452:	51 2c       	mov	r5, r1
	}

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    a454:	20 91 08 05 	lds	r18, 0x0508
    a458:	22 23       	and	r18, r18
    a45a:	79 f0       	breq	.+30     	; 0xa47a <menu_flight+0x6a>
	{
		if ((Config.P1_Reference == MODEL) && (mode == P1))
    a45c:	92 30       	cpi	r25, 0x02	; 2
    a45e:	29 f4       	brne	.+10     	; 0xa46a <menu_flight+0x5a>
    a460:	81 11       	cpse	r24, r1
    a462:	03 c0       	rjmp	.+6      	; 0xa46a <menu_flight+0x5a>
		{
			sub_top = FLIGHTSTARTM;		
    a464:	28 e4       	ldi	r18, 0x48	; 72
    a466:	31 e0       	ldi	r19, 0x01	; 1
    a468:	02 c0       	rjmp	.+4      	; 0xa46e <menu_flight+0x5e>
		}
		else
		{
			sub_top = FLIGHTSTARTE;			
    a46a:	2c ea       	ldi	r18, 0xAC	; 172
    a46c:	30 e0       	ldi	r19, 0x00	; 0
    a46e:	30 93 4f 05 	sts	0x054F, r19
    a472:	20 93 4e 05 	sts	0x054E, r18
		}

		menu_flag = 0;
    a476:	10 92 08 05 	sts	0x0508, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    a47a:	24 e1       	ldi	r18, 0x14	; 20
    a47c:	82 9f       	mul	r24, r18
    a47e:	c0 01       	movw	r24, r0
    a480:	11 24       	eor	r1, r1
    a482:	9c 01       	movw	r18, r24
    a484:	22 59       	subi	r18, 0x92	; 146
    a486:	39 4f       	sbci	r19, 0xF9	; 249
    a488:	39 01       	movw	r6, r18
		}

		menu_flag = 0;
	}

	while(button != BACK)
    a48a:	80 91 1f 09 	lds	r24, 0x091F
    a48e:	80 37       	cpi	r24, 0x70	; 112
    a490:	09 f4       	brne	.+2      	; 0xa494 <menu_flight+0x84>
    a492:	65 c0       	rjmp	.+202    	; 0xa55e <menu_flight+0x14e>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)flight_menu_ranges, 0, (const uint16_t*)FlightMenuOffsets, (const uint16_t*)FlightMenuText, cursor);
    a494:	a0 90 04 05 	lds	r10, 0x0504
    a498:	b0 90 05 05 	lds	r11, 0x0505
    a49c:	33 ec       	ldi	r19, 0xC3	; 195
    a49e:	c3 2e       	mov	r12, r19
    a4a0:	36 e2       	ldi	r19, 0x26	; 38
    a4a2:	d3 2e       	mov	r13, r19
    a4a4:	4b e9       	ldi	r20, 0x9B	; 155
    a4a6:	e4 2e       	mov	r14, r20
    a4a8:	46 e2       	ldi	r20, 0x26	; 38
    a4aa:	f4 2e       	mov	r15, r20
    a4ac:	00 e0       	ldi	r16, 0x00	; 0
    a4ae:	27 e3       	ldi	r18, 0x37	; 55
    a4b0:	36 e2       	ldi	r19, 0x26	; 38
    a4b2:	a3 01       	movw	r20, r6
    a4b4:	b2 01       	movw	r22, r4
    a4b6:	80 91 4e 05 	lds	r24, 0x054E
    a4ba:	90 91 4f 05 	lds	r25, 0x054F
    a4be:	0e 94 54 51 	call	0xa2a8	; 0xa2a8 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    a4c2:	59 e4       	ldi	r21, 0x49	; 73
    a4c4:	c5 2e       	mov	r12, r21
    a4c6:	55 e0       	ldi	r21, 0x05	; 5
    a4c8:	d5 2e       	mov	r13, r21
    a4ca:	6e e4       	ldi	r22, 0x4E	; 78
    a4cc:	e6 2e       	mov	r14, r22
    a4ce:	65 e0       	ldi	r22, 0x05	; 5
    a4d0:	f6 2e       	mov	r15, r22
    a4d2:	04 e0       	ldi	r16, 0x04	; 4
    a4d4:	15 e0       	ldi	r17, 0x05	; 5
    a4d6:	20 91 1f 09 	lds	r18, 0x091F
    a4da:	40 e0       	ldi	r20, 0x00	; 0
    a4dc:	50 e0       	ldi	r21, 0x00	; 0
    a4de:	b2 01       	movw	r22, r4
    a4e0:	84 e1       	ldi	r24, 0x14	; 20
    a4e2:	90 e0       	ldi	r25, 0x00	; 0
    a4e4:	0e 94 83 50 	call	0xa106	; 0xa106 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - reference));
    a4e8:	60 91 49 05 	lds	r22, 0x0549
    a4ec:	64 19       	sub	r22, r4
    a4ee:	87 e3       	ldi	r24, 0x37	; 55
    a4f0:	96 e2       	ldi	r25, 0x26	; 38
    a4f2:	0e 94 0a 4a 	call	0x9414	; 0x9414 <get_menu_range>
    a4f6:	29 83       	std	Y+1, r18	; 0x01
    a4f8:	3a 83       	std	Y+2, r19	; 0x02
    a4fa:	4b 83       	std	Y+3, r20	; 0x03
    a4fc:	5c 83       	std	Y+4, r21	; 0x04
    a4fe:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    a500:	80 91 1f 09 	lds	r24, 0x091F
    a504:	80 3e       	cpi	r24, 0xE0	; 224
    a506:	f9 f4       	brne	.+62     	; 0xa546 <menu_flight+0x136>
		{
			text_link = pgm_read_word(&FlightMenuText[menu_temp - reference]);
    a508:	80 91 49 05 	lds	r24, 0x0549
    a50c:	90 91 4a 05 	lds	r25, 0x054A
    a510:	bc 01       	movw	r22, r24
    a512:	64 19       	sub	r22, r4
    a514:	75 09       	sbc	r23, r5
    a516:	fb 01       	movw	r30, r22
    a518:	ee 0f       	add	r30, r30
    a51a:	ff 1f       	adc	r31, r31
    a51c:	ed 53       	subi	r30, 0x3D	; 61
    a51e:	f9 4d       	sbci	r31, 0xD9	; 217
    a520:	a5 90       	lpm	r10, Z+
    a522:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - reference), 1, range, 0, text_link, false, 0);
    a524:	bb 24       	eor	r11, r11
    a526:	66 0d       	add	r22, r6
    a528:	77 1d       	adc	r23, r7
    a52a:	1f 92       	push	r1
    a52c:	1f 92       	push	r1
    a52e:	81 2c       	mov	r8, r1
    a530:	c1 2c       	mov	r12, r1
    a532:	e9 80       	ldd	r14, Y+1	; 0x01
    a534:	fa 80       	ldd	r15, Y+2	; 0x02
    a536:	0b 81       	ldd	r16, Y+3	; 0x03
    a538:	1c 81       	ldd	r17, Y+4	; 0x04
    a53a:	2d 81       	ldd	r18, Y+5	; 0x05
    a53c:	41 e0       	ldi	r20, 0x01	; 1
    a53e:	0e 94 98 4a 	call	0x9530	; 0x9530 <do_menu_item>
    a542:	0f 90       	pop	r0
    a544:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    a546:	80 91 1f 09 	lds	r24, 0x091F
    a54a:	80 3e       	cpi	r24, 0xE0	; 224
    a54c:	09 f0       	breq	.+2      	; 0xa550 <menu_flight+0x140>
    a54e:	9d cf       	rjmp	.-198    	; 0xa48a <menu_flight+0x7a>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    a550:	0e 94 32 57 	call	0xae64	; 0xae64 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    a554:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    a558:	0e 94 9a 53 	call	0xa734	; 0xa734 <Wait_BUTTON4>
    a55c:	96 cf       	rjmp	.-212    	; 0xa48a <menu_flight+0x7a>
		}
	}
}
    a55e:	0f 90       	pop	r0
    a560:	0f 90       	pop	r0
    a562:	0f 90       	pop	r0
    a564:	0f 90       	pop	r0
    a566:	0f 90       	pop	r0
    a568:	df 91       	pop	r29
    a56a:	cf 91       	pop	r28
    a56c:	1f 91       	pop	r17
    a56e:	0f 91       	pop	r16
    a570:	ff 90       	pop	r15
    a572:	ef 90       	pop	r14
    a574:	df 90       	pop	r13
    a576:	cf 90       	pop	r12
    a578:	bf 90       	pop	r11
    a57a:	af 90       	pop	r10
    a57c:	8f 90       	pop	r8
    a57e:	7f 90       	pop	r7
    a580:	6f 90       	pop	r6
    a582:	5f 90       	pop	r5
    a584:	4f 90       	pop	r4
    a586:	08 95       	ret

0000a588 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    a588:	90 e0       	ldi	r25, 0x00	; 0
    a58a:	fc 01       	movw	r30, r24
    a58c:	ed 54       	subi	r30, 0x4D	; 77
    a58e:	f1 09       	sbc	r31, r1
    a590:	e8 31       	cpi	r30, 0x18	; 24
    a592:	f1 05       	cpc	r31, r1
    a594:	c0 f5       	brcc	.+112    	; 0xa606 <do_main_menu_item+0x7e>
    a596:	e1 58       	subi	r30, 0x81	; 129
    a598:	ff 4f       	sbci	r31, 0xFF	; 255
    a59a:	0c 94 5f 6f 	jmp	0xdebe	; 0xdebe <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    a59e:	82 e0       	ldi	r24, 0x02	; 2
    a5a0:	01 c0       	rjmp	.+2      	; 0xa5a4 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup
    a5a2:	81 e0       	ldi	r24, 0x01	; 1
    a5a4:	0c 94 dd 55 	jmp	0xabba	; 0xabba <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    a5a8:	0c 94 58 20 	jmp	0x40b0	; 0x40b0 <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity
    a5ac:	0c 94 ed 24 	jmp	0x49da	; 0x49da <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    a5b0:	0c 94 57 21 	jmp	0x42ae	; 0x42ae <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    a5b4:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    a5b8:	80 e0       	ldi	r24, 0x00	; 0
    a5ba:	01 c0       	rjmp	.+2      	; 0xa5be <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    a5bc:	81 e0       	ldi	r24, 0x01	; 1
    a5be:	0c 94 08 52 	jmp	0xa410	; 0xa410 <menu_flight>
			break;
		case MAINSTART+8:
			menu_curves();			// 9.Curves menu
    a5c2:	0c 94 fd 48 	jmp	0x91fa	; 0x91fa <menu_curves>
			break;
		case MAINSTART+9:
			menu_offsets();			// 10.Output offsets
    a5c6:	0c 94 70 54 	jmp	0xa8e0	; 0xa8e0 <menu_offsets>
			break;
		case MAINSTART+10:
			menu_mixer(0);			// 11.OUT1 Mixer
    a5ca:	80 e0       	ldi	r24, 0x00	; 0
    a5cc:	01 c0       	rjmp	.+2      	; 0xa5d0 <do_main_menu_item+0x48>
			break;
		case MAINSTART+11:
			menu_mixer(1);			// 12.OUT2 Mixer
    a5ce:	81 e0       	ldi	r24, 0x01	; 1
    a5d0:	0c 94 a7 53 	jmp	0xa74e	; 0xa74e <menu_mixer>
			break;
		case MAINSTART+12:
			menu_mixer(2);			// 13.OUT3 Mixer
    a5d4:	82 e0       	ldi	r24, 0x02	; 2
    a5d6:	fc cf       	rjmp	.-8      	; 0xa5d0 <do_main_menu_item+0x48>
			break;
		case MAINSTART+13:
			menu_mixer(3);			// 14.OUT4 Mixer
    a5d8:	83 e0       	ldi	r24, 0x03	; 3
    a5da:	fa cf       	rjmp	.-12     	; 0xa5d0 <do_main_menu_item+0x48>
			break;
		case MAINSTART+14:
			menu_mixer(4);			// 15.OUT5 Mixer
    a5dc:	84 e0       	ldi	r24, 0x04	; 4
    a5de:	f8 cf       	rjmp	.-16     	; 0xa5d0 <do_main_menu_item+0x48>
			break;
		case MAINSTART+15:
			menu_mixer(5);			// 16.OUT6 Mixer
    a5e0:	85 e0       	ldi	r24, 0x05	; 5
    a5e2:	f6 cf       	rjmp	.-20     	; 0xa5d0 <do_main_menu_item+0x48>
			break;
		case MAINSTART+16:
			menu_mixer(6);			// 17.OUT7 Mixer
    a5e4:	86 e0       	ldi	r24, 0x06	; 6
    a5e6:	f4 cf       	rjmp	.-24     	; 0xa5d0 <do_main_menu_item+0x48>
			break;
		case MAINSTART+17:
			menu_mixer(7);			// 18.OUT8 Mixer
    a5e8:	87 e0       	ldi	r24, 0x07	; 7
    a5ea:	f2 cf       	rjmp	.-28     	; 0xa5d0 <do_main_menu_item+0x48>
			break;
		case MAINSTART+18:
			menu_servo_setup(1);	// 19.Servo direction
    a5ec:	81 e0       	ldi	r24, 0x01	; 1
    a5ee:	03 c0       	rjmp	.+6      	; 0xa5f6 <do_main_menu_item+0x6e>
			break;
		case MAINSTART+19:
			menu_servo_setup(2); 	// 20.Neg. Servo trvl. (%)
    a5f0:	82 e0       	ldi	r24, 0x02	; 2
    a5f2:	01 c0       	rjmp	.+2      	; 0xa5f6 <do_main_menu_item+0x6e>
			break;
		case MAINSTART+20:
			menu_servo_setup(3); 	// 21.Pos. Servo trvl. (%)
    a5f4:	83 e0       	ldi	r24, 0x03	; 3
    a5f6:	0c 94 e0 54 	jmp	0xa9c0	; 0xa9c0 <menu_servo_setup>
			break;
		case MAINSTART+21:
			menu_channel();			// 22.Custom Ch. order
    a5fa:	0c 94 51 48 	jmp	0x90a2	; 0x90a2 <menu_channel>
			break;
		case MAINSTART+22:
			Display_in_out();		// 23.IO menu
    a5fe:	0c 94 85 1c 	jmp	0x390a	; 0x390a <Display_in_out>
			break;
		case MAINSTART+23:
			menu_log();				// 24.Error log
    a602:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <menu_log>
    a606:	08 95       	ret

0000a608 <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    a608:	1f 99       	sbic	0x03, 7	; 3
    a60a:	0a c0       	rjmp	.+20     	; 0xa620 <Wait_BUTTON1+0x18>
    a60c:	2f e3       	ldi	r18, 0x3F	; 63
    a60e:	8d e0       	ldi	r24, 0x0D	; 13
    a610:	93 e0       	ldi	r25, 0x03	; 3
    a612:	21 50       	subi	r18, 0x01	; 1
    a614:	80 40       	sbci	r24, 0x00	; 0
    a616:	90 40       	sbci	r25, 0x00	; 0
    a618:	e1 f7       	brne	.-8      	; 0xa612 <Wait_BUTTON1+0xa>
    a61a:	00 c0       	rjmp	.+0      	; 0xa61c <Wait_BUTTON1+0x14>
    a61c:	00 00       	nop
    a61e:	f4 cf       	rjmp	.-24     	; 0xa608 <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    a620:	08 95       	ret

0000a622 <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag = 1;

void menu_main(void)
{
    a622:	9f 92       	push	r9
    a624:	af 92       	push	r10
    a626:	bf 92       	push	r11
    a628:	cf 92       	push	r12
    a62a:	df 92       	push	r13
    a62c:	ef 92       	push	r14
    a62e:	ff 92       	push	r15
    a630:	0f 93       	push	r16
    a632:	1f 93       	push	r17
    a634:	cf 93       	push	r28
    a636:	df 93       	push	r29
	static uint16_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    a638:	80 ef       	ldi	r24, 0xF0	; 240
    a63a:	80 93 1f 09 	sts	0x091F, r24

	menu_beep(1);
    a63e:	81 e0       	ldi	r24, 0x01	; 1
    a640:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <menu_beep>

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    a644:	0e 94 04 53 	call	0xa608	; 0xa608 <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    a648:	23 e0       	ldi	r18, 0x03	; 3
    a64a:	a2 2e       	mov	r10, r18
    a64c:	b1 2c       	mov	r11, r1

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    a64e:	30 ef       	ldi	r19, 0xF0	; 240
    a650:	93 2e       	mov	r9, r19
	menu_beep(1);

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    a652:	80 91 1f 09 	lds	r24, 0x091F
    a656:	80 37       	cpi	r24, 0x70	; 112
    a658:	09 f4       	brne	.+2      	; 0xa65c <menu_main+0x3a>
    a65a:	60 c0       	rjmp	.+192    	; 0xa71c <menu_main+0xfa>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    a65c:	80 e0       	ldi	r24, 0x00	; 0
    a65e:	91 e0       	ldi	r25, 0x01	; 1
    a660:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <clear_buffer>

		// Print menu
		print_menu_frame(BASIC);													// Frame
    a664:	80 e0       	ldi	r24, 0x00	; 0
    a666:	0e 94 6d 49 	call	0x92da	; 0x92da <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    a66a:	c0 e0       	ldi	r28, 0x00	; 0
    a66c:	d0 e0       	ldi	r29, 0x00	; 0
    a66e:	fe 01       	movw	r30, r28
    a670:	ed 5c       	subi	r30, 0xCD	; 205
    a672:	f9 4d       	sbci	r31, 0xD9	; 217
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    a674:	24 91       	lpm	r18, Z
    a676:	30 e0       	ldi	r19, 0x00	; 0
    a678:	80 91 09 05 	lds	r24, 0x0509
    a67c:	90 91 0a 05 	lds	r25, 0x050A
    a680:	4a e0       	ldi	r20, 0x0A	; 10
    a682:	50 e0       	ldi	r21, 0x00	; 0
    a684:	6d e8       	ldi	r22, 0x8D	; 141
    a686:	7f e0       	ldi	r23, 0x0F	; 15
    a688:	8c 0f       	add	r24, r28
    a68a:	9d 1f       	adc	r25, r29
    a68c:	0e 94 3a 38 	call	0x7074	; 0x7074 <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(BASIC);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    a690:	21 96       	adiw	r28, 0x01	; 1
    a692:	c4 30       	cpi	r28, 0x04	; 4
    a694:	d1 05       	cpc	r29, r1
    a696:	59 f7       	brne	.-42     	; 0xa66e <menu_main+0x4c>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    a698:	80 91 06 05 	lds	r24, 0x0506
    a69c:	0e 94 4a 51 	call	0xa294	; 0xa294 <print_cursor>
		write_buffer(buffer);
    a6a0:	80 e0       	ldi	r24, 0x00	; 0
    a6a2:	91 e0       	ldi	r25, 0x01	; 1
    a6a4:	0e 94 29 36 	call	0x6c52	; 0x6c52 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    a6a8:	81 e0       	ldi	r24, 0x01	; 1
    a6aa:	0e 94 61 4a 	call	0x94c2	; 0x94c2 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    a6ae:	8c e4       	ldi	r24, 0x4C	; 76
    a6b0:	c8 2e       	mov	r12, r24
    a6b2:	85 e0       	ldi	r24, 0x05	; 5
    a6b4:	d8 2e       	mov	r13, r24
    a6b6:	99 e0       	ldi	r25, 0x09	; 9
    a6b8:	e9 2e       	mov	r14, r25
    a6ba:	95 e0       	ldi	r25, 0x05	; 5
    a6bc:	f9 2e       	mov	r15, r25
    a6be:	06 e0       	ldi	r16, 0x06	; 6
    a6c0:	15 e0       	ldi	r17, 0x05	; 5
    a6c2:	20 91 1f 09 	lds	r18, 0x091F
    a6c6:	40 e0       	ldi	r20, 0x00	; 0
    a6c8:	50 e0       	ldi	r21, 0x00	; 0
    a6ca:	6d e4       	ldi	r22, 0x4D	; 77
    a6cc:	70 e0       	ldi	r23, 0x00	; 0
    a6ce:	87 e1       	ldi	r24, 0x17	; 23
    a6d0:	90 e0       	ldi	r25, 0x00	; 0
    a6d2:	0e 94 83 50 	call	0xa106	; 0xa106 <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    a6d6:	80 91 4c 05 	lds	r24, 0x054C
    a6da:	90 91 4d 05 	lds	r25, 0x054D
    a6de:	20 91 4b 05 	lds	r18, 0x054B
    a6e2:	30 e0       	ldi	r19, 0x00	; 0
    a6e4:	82 17       	cp	r24, r18
    a6e6:	93 07       	cpc	r25, r19
    a6e8:	69 f0       	breq	.+26     	; 0xa704 <menu_main+0xe2>
		{
			cursor = LINE0;
    a6ea:	b0 92 05 05 	sts	0x0505, r11
    a6ee:	a0 92 04 05 	sts	0x0504, r10
			menu_temp = 0;
    a6f2:	10 92 4a 05 	sts	0x054A, r1
    a6f6:	10 92 49 05 	sts	0x0549, r1
			old_menu = main_temp;
    a6fa:	80 93 4b 05 	sts	0x054B, r24
			menu_flag = 1;
    a6fe:	21 e0       	ldi	r18, 0x01	; 1
    a700:	20 93 08 05 	sts	0x0508, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    a704:	20 91 1f 09 	lds	r18, 0x091F
    a708:	20 3e       	cpi	r18, 0xE0	; 224
    a70a:	09 f0       	breq	.+2      	; 0xa70e <menu_main+0xec>
    a70c:	a2 cf       	rjmp	.-188    	; 0xa652 <menu_main+0x30>
		{
			do_main_menu_item(main_temp);
    a70e:	0e 94 c4 52 	call	0xa588	; 0xa588 <do_main_menu_item>
			button = NONE;
    a712:	90 92 1f 09 	sts	0x091F, r9

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    a716:	0e 94 04 53 	call	0xa608	; 0xa608 <Wait_BUTTON1>
    a71a:	9b cf       	rjmp	.-202    	; 0xa652 <menu_main+0x30>
		}
	}
}
    a71c:	df 91       	pop	r29
    a71e:	cf 91       	pop	r28
    a720:	1f 91       	pop	r17
    a722:	0f 91       	pop	r16
    a724:	ff 90       	pop	r15
    a726:	ef 90       	pop	r14
    a728:	df 90       	pop	r13
    a72a:	cf 90       	pop	r12
    a72c:	bf 90       	pop	r11
    a72e:	af 90       	pop	r10
    a730:	9f 90       	pop	r9
    a732:	08 95       	ret

0000a734 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    a734:	1c 99       	sbic	0x03, 4	; 3
    a736:	0a c0       	rjmp	.+20     	; 0xa74c <Wait_BUTTON4+0x18>
    a738:	2f e3       	ldi	r18, 0x3F	; 63
    a73a:	8d e0       	ldi	r24, 0x0D	; 13
    a73c:	93 e0       	ldi	r25, 0x03	; 3
    a73e:	21 50       	subi	r18, 0x01	; 1
    a740:	80 40       	sbci	r24, 0x00	; 0
    a742:	90 40       	sbci	r25, 0x00	; 0
    a744:	e1 f7       	brne	.-8      	; 0xa73e <Wait_BUTTON4+0xa>
    a746:	00 c0       	rjmp	.+0      	; 0xa748 <Wait_BUTTON4+0x14>
    a748:	00 00       	nop
    a74a:	f4 cf       	rjmp	.-24     	; 0xa734 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    a74c:	08 95       	ret

0000a74e <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    a74e:	4f 92       	push	r4
    a750:	5f 92       	push	r5
    a752:	6f 92       	push	r6
    a754:	7f 92       	push	r7
    a756:	8f 92       	push	r8
    a758:	af 92       	push	r10
    a75a:	bf 92       	push	r11
    a75c:	cf 92       	push	r12
    a75e:	df 92       	push	r13
    a760:	ef 92       	push	r14
    a762:	ff 92       	push	r15
    a764:	0f 93       	push	r16
    a766:	1f 93       	push	r17
    a768:	cf 93       	push	r28
    a76a:	df 93       	push	r29
    a76c:	00 d0       	rcall	.+0      	; 0xa76e <menu_mixer+0x20>
    a76e:	00 d0       	rcall	.+0      	; 0xa770 <menu_mixer+0x22>
    a770:	1f 92       	push	r1
    a772:	cd b7       	in	r28, 0x3d	; 61
    a774:	de b7       	in	r29, 0x3e	; 62
	menu_range_t range;
	uint16_t text_link = 0;
	uint16_t reference;

	// Set the correct text list for the selected reference
	if (Config.P1_Reference != MODEL)
    a776:	90 91 d9 06 	lds	r25, 0x06D9
    a77a:	92 30       	cpi	r25, 0x02	; 2
    a77c:	29 f4       	brne	.+10     	; 0xa788 <menu_mixer+0x3a>
	{
		reference = MIXERSTARTE;
	}
	else
	{
		reference = MIXERSTARTM;
    a77e:	ac e5       	ldi	r26, 0x5C	; 92
    a780:	6a 2e       	mov	r6, r26
    a782:	77 24       	eor	r7, r7
    a784:	73 94       	inc	r7
    a786:	03 c0       	rjmp	.+6      	; 0xa78e <menu_mixer+0x40>
	uint16_t reference;

	// Set the correct text list for the selected reference
	if (Config.P1_Reference != MODEL)
	{
		reference = MIXERSTARTE;
    a788:	f0 ec       	ldi	r31, 0xC0	; 192
    a78a:	6f 2e       	mov	r6, r31
    a78c:	71 2c       	mov	r7, r1
	{
		reference = MIXERSTARTM;
	}
	
	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    a78e:	20 91 08 05 	lds	r18, 0x0508
    a792:	22 23       	and	r18, r18
    a794:	69 f0       	breq	.+26     	; 0xa7b0 <menu_mixer+0x62>
	{
		// Set the correct text list for the selected reference
		if (Config.P1_Reference != MODEL)
    a796:	92 30       	cpi	r25, 0x02	; 2
    a798:	19 f0       	breq	.+6      	; 0xa7a0 <menu_mixer+0x52>
		{
			sub_top = MIXERSTARTE;
    a79a:	20 ec       	ldi	r18, 0xC0	; 192
    a79c:	30 e0       	ldi	r19, 0x00	; 0
    a79e:	02 c0       	rjmp	.+4      	; 0xa7a4 <menu_mixer+0x56>
		}
		else
		{
			sub_top = MIXERSTARTM;
    a7a0:	2c e5       	ldi	r18, 0x5C	; 92
    a7a2:	31 e0       	ldi	r19, 0x01	; 1
    a7a4:	30 93 4f 05 	sts	0x054F, r19
    a7a8:	20 93 4e 05 	sts	0x054E, r18
		}
		menu_flag = 0;
    a7ac:	10 92 08 05 	sts	0x0508, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    a7b0:	22 e2       	ldi	r18, 0x22	; 34
    a7b2:	82 9f       	mul	r24, r18
    a7b4:	c0 01       	movw	r24, r0
    a7b6:	11 24       	eor	r1, r1
    a7b8:	9c 01       	movw	r18, r24
    a7ba:	28 51       	subi	r18, 0x18	; 24
    a7bc:	39 4f       	sbci	r19, 0xF9	; 249
    a7be:	29 01       	movw	r4, r18
			sub_top = MIXERSTARTM;
		}
		menu_flag = 0;
	}

	while(button != BACK)
    a7c0:	80 91 1f 09 	lds	r24, 0x091F
    a7c4:	80 37       	cpi	r24, 0x70	; 112
    a7c6:	09 f4       	brne	.+2      	; 0xa7ca <menu_mixer+0x7c>
    a7c8:	76 c0       	rjmp	.+236    	; 0xa8b6 <menu_mixer+0x168>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		// Set the correct text list for the selected reference
		if (Config.P1_Reference != MODEL)
    a7ca:	20 91 d9 06 	lds	r18, 0x06D9
    a7ce:	a0 90 04 05 	lds	r10, 0x0504
    a7d2:	b0 90 05 05 	lds	r11, 0x0505
    a7d6:	80 91 4e 05 	lds	r24, 0x054E
    a7da:	90 91 4f 05 	lds	r25, 0x054F
    a7de:	22 30       	cpi	r18, 0x02	; 2
    a7e0:	29 f0       	breq	.+10     	; 0xa7ec <menu_mixer+0x9e>
		{
			print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, (const uint16_t*) MixerMenuOffsets, (const uint16_t*)MixerMenuTextE, cursor);
    a7e2:	e9 ef       	ldi	r30, 0xF9	; 249
    a7e4:	ce 2e       	mov	r12, r30
    a7e6:	e7 e2       	ldi	r30, 0x27	; 39
    a7e8:	de 2e       	mov	r13, r30
    a7ea:	04 c0       	rjmp	.+8      	; 0xa7f4 <menu_mixer+0xa6>
		}
		else
		{
			print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, (const uint16_t*) MixerMenuOffsets, (const uint16_t*)MixerMenuTextM, cursor);
    a7ec:	7d eb       	ldi	r23, 0xBD	; 189
    a7ee:	c7 2e       	mov	r12, r23
    a7f0:	77 e2       	ldi	r23, 0x27	; 39
    a7f2:	d7 2e       	mov	r13, r23
    a7f4:	41 e8       	ldi	r20, 0x81	; 129
    a7f6:	e4 2e       	mov	r14, r20
    a7f8:	47 e2       	ldi	r20, 0x27	; 39
    a7fa:	f4 2e       	mov	r15, r20
    a7fc:	00 e0       	ldi	r16, 0x00	; 0
    a7fe:	2b ee       	ldi	r18, 0xEB	; 235
    a800:	36 e2       	ldi	r19, 0x26	; 38
    a802:	a2 01       	movw	r20, r4
    a804:	b3 01       	movw	r22, r6
    a806:	0e 94 54 51 	call	0xa2a8	; 0xa2a8 <print_menu_items>
		}

		// Handle menu changes
		update_menu(MIXERITEMS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    a80a:	59 e4       	ldi	r21, 0x49	; 73
    a80c:	c5 2e       	mov	r12, r21
    a80e:	55 e0       	ldi	r21, 0x05	; 5
    a810:	d5 2e       	mov	r13, r21
    a812:	6e e4       	ldi	r22, 0x4E	; 78
    a814:	e6 2e       	mov	r14, r22
    a816:	65 e0       	ldi	r22, 0x05	; 5
    a818:	f6 2e       	mov	r15, r22
    a81a:	04 e0       	ldi	r16, 0x04	; 4
    a81c:	15 e0       	ldi	r17, 0x05	; 5
    a81e:	20 91 1f 09 	lds	r18, 0x091F
    a822:	40 e0       	ldi	r20, 0x00	; 0
    a824:	50 e0       	ldi	r21, 0x00	; 0
    a826:	b3 01       	movw	r22, r6
    a828:	8e e1       	ldi	r24, 0x1E	; 30
    a82a:	90 e0       	ldi	r25, 0x00	; 0
    a82c:	0e 94 83 50 	call	0xa106	; 0xa106 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - reference);
    a830:	60 91 49 05 	lds	r22, 0x0549
    a834:	66 19       	sub	r22, r6
    a836:	8b ee       	ldi	r24, 0xEB	; 235
    a838:	96 e2       	ldi	r25, 0x26	; 38
    a83a:	0e 94 0a 4a 	call	0x9414	; 0x9414 <get_menu_range>
    a83e:	29 83       	std	Y+1, r18	; 0x01
    a840:	3a 83       	std	Y+2, r19	; 0x02
    a842:	4b 83       	std	Y+3, r20	; 0x03
    a844:	5c 83       	std	Y+4, r21	; 0x04
    a846:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    a848:	80 91 1f 09 	lds	r24, 0x091F
    a84c:	80 3e       	cpi	r24, 0xE0	; 224
    a84e:	39 f5       	brne	.+78     	; 0xa89e <menu_mixer+0x150>
		{
			// Set the correct text list for the selected reference
			if (Config.P1_Reference != MODEL)
    a850:	20 91 d9 06 	lds	r18, 0x06D9
    a854:	80 91 49 05 	lds	r24, 0x0549
    a858:	90 91 4a 05 	lds	r25, 0x054A
			{
				text_link = pgm_read_word(&MixerMenuTextE[menu_temp - reference]);
    a85c:	fc 01       	movw	r30, r24
    a85e:	e6 19       	sub	r30, r6
    a860:	f7 09       	sbc	r31, r7
    a862:	ee 0f       	add	r30, r30
    a864:	ff 1f       	adc	r31, r31
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - reference);

		if (button == ENTER)
		{
			// Set the correct text list for the selected reference
			if (Config.P1_Reference != MODEL)
    a866:	22 30       	cpi	r18, 0x02	; 2
    a868:	19 f0       	breq	.+6      	; 0xa870 <menu_mixer+0x122>
			{
				text_link = pgm_read_word(&MixerMenuTextE[menu_temp - reference]);
    a86a:	e7 50       	subi	r30, 0x07	; 7
    a86c:	f8 4d       	sbci	r31, 0xD8	; 216
    a86e:	02 c0       	rjmp	.+4      	; 0xa874 <menu_mixer+0x126>
			}
			else
			{
				text_link = pgm_read_word(&MixerMenuTextM[menu_temp - reference]);
    a870:	e3 54       	subi	r30, 0x43	; 67
    a872:	f8 4d       	sbci	r31, 0xD8	; 216
    a874:	a5 90       	lpm	r10, Z+
    a876:	b4 90       	lpm	r11, Z
			}
			
			do_menu_item(menu_temp, value_ptr + (menu_temp - reference), 1, range, 0, text_link, false, 0);
    a878:	bc 01       	movw	r22, r24
    a87a:	66 19       	sub	r22, r6
    a87c:	77 09       	sbc	r23, r7
    a87e:	64 0d       	add	r22, r4
    a880:	75 1d       	adc	r23, r5
    a882:	1f 92       	push	r1
    a884:	1f 92       	push	r1
    a886:	81 2c       	mov	r8, r1
    a888:	c1 2c       	mov	r12, r1
    a88a:	e9 80       	ldd	r14, Y+1	; 0x01
    a88c:	fa 80       	ldd	r15, Y+2	; 0x02
    a88e:	0b 81       	ldd	r16, Y+3	; 0x03
    a890:	1c 81       	ldd	r17, Y+4	; 0x04
    a892:	2d 81       	ldd	r18, Y+5	; 0x05
    a894:	41 e0       	ldi	r20, 0x01	; 1
    a896:	0e 94 98 4a 	call	0x9530	; 0x9530 <do_menu_item>
    a89a:	0f 90       	pop	r0
    a89c:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    a89e:	80 91 1f 09 	lds	r24, 0x091F
    a8a2:	80 3e       	cpi	r24, 0xE0	; 224
    a8a4:	09 f0       	breq	.+2      	; 0xa8a8 <menu_mixer+0x15a>
    a8a6:	8c cf       	rjmp	.-232    	; 0xa7c0 <menu_mixer+0x72>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    a8a8:	0e 94 32 57 	call	0xae64	; 0xae64 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    a8ac:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    a8b0:	0e 94 9a 53 	call	0xa734	; 0xa734 <Wait_BUTTON4>
    a8b4:	85 cf       	rjmp	.-246    	; 0xa7c0 <menu_mixer+0x72>
		}
	}
}
    a8b6:	0f 90       	pop	r0
    a8b8:	0f 90       	pop	r0
    a8ba:	0f 90       	pop	r0
    a8bc:	0f 90       	pop	r0
    a8be:	0f 90       	pop	r0
    a8c0:	df 91       	pop	r29
    a8c2:	cf 91       	pop	r28
    a8c4:	1f 91       	pop	r17
    a8c6:	0f 91       	pop	r16
    a8c8:	ff 90       	pop	r15
    a8ca:	ef 90       	pop	r14
    a8cc:	df 90       	pop	r13
    a8ce:	cf 90       	pop	r12
    a8d0:	bf 90       	pop	r11
    a8d2:	af 90       	pop	r10
    a8d4:	8f 90       	pop	r8
    a8d6:	7f 90       	pop	r7
    a8d8:	6f 90       	pop	r6
    a8da:	5f 90       	pop	r5
    a8dc:	4f 90       	pop	r4
    a8de:	08 95       	ret

0000a8e0 <menu_offsets>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_offsets(void)
{
    a8e0:	af 92       	push	r10
    a8e2:	bf 92       	push	r11
    a8e4:	cf 92       	push	r12
    a8e6:	df 92       	push	r13
    a8e8:	ef 92       	push	r14
    a8ea:	ff 92       	push	r15
    a8ec:	0f 93       	push	r16
    a8ee:	1f 93       	push	r17
    a8f0:	cf 93       	push	r28
	int8_t *value_ptr;
	uint16_t reference = OFFSETSSTART;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    a8f2:	80 91 08 05 	lds	r24, 0x0508
    a8f6:	88 23       	and	r24, r24
    a8f8:	41 f0       	breq	.+16     	; 0xa90a <menu_offsets+0x2a>
	{
		sub_top = OFFSETSSTART;			
    a8fa:	86 ee       	ldi	r24, 0xE6	; 230
    a8fc:	90 e0       	ldi	r25, 0x00	; 0
    a8fe:	90 93 4f 05 	sts	0x054F, r25
    a902:	80 93 4e 05 	sts	0x054E, r24
		menu_flag = 0;
    a906:	10 92 08 05 	sts	0x0508, r1

		// Stop unwanted exit to main menu
		if (button == ABORT)
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
			button = NONE;
    a90a:	c0 ef       	ldi	r28, 0xF0	; 240
	{
		sub_top = OFFSETSSTART;			
		menu_flag = 0;
	}

	while(button != BACK)
    a90c:	80 91 1f 09 	lds	r24, 0x091F
    a910:	80 37       	cpi	r24, 0x70	; 112
    a912:	09 f4       	brne	.+2      	; 0xa916 <menu_offsets+0x36>
    a914:	4b c0       	rjmp	.+150    	; 0xa9ac <menu_offsets+0xcc>
	{
		value_ptr = &Config.Offsets[0].Point1;

		// Print top level menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)Offsets_menu_ranges, 0, (const uint16_t*)OffsetsMenuOffsets, (const uint16_t*)OffsetsMenuText, cursor);
    a916:	a0 90 04 05 	lds	r10, 0x0504
    a91a:	b0 90 05 05 	lds	r11, 0x0505
    a91e:	85 e8       	ldi	r24, 0x85	; 133
    a920:	c8 2e       	mov	r12, r24
    a922:	89 e2       	ldi	r24, 0x29	; 41
    a924:	d8 2e       	mov	r13, r24
    a926:	95 e7       	ldi	r25, 0x75	; 117
    a928:	e9 2e       	mov	r14, r25
    a92a:	99 e2       	ldi	r25, 0x29	; 41
    a92c:	f9 2e       	mov	r15, r25
    a92e:	00 e0       	ldi	r16, 0x00	; 0
    a930:	25 e3       	ldi	r18, 0x35	; 53
    a932:	38 e2       	ldi	r19, 0x28	; 40
    a934:	4c e9       	ldi	r20, 0x9C	; 156
    a936:	58 e0       	ldi	r21, 0x08	; 8
    a938:	66 ee       	ldi	r22, 0xE6	; 230
    a93a:	70 e0       	ldi	r23, 0x00	; 0
    a93c:	80 91 4e 05 	lds	r24, 0x054E
    a940:	90 91 4f 05 	lds	r25, 0x054F
    a944:	0e 94 54 51 	call	0xa2a8	; 0xa2a8 <print_menu_items>

		// Handle menu navigation
		update_menu(MAX_OUTPUTS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    a948:	29 e4       	ldi	r18, 0x49	; 73
    a94a:	c2 2e       	mov	r12, r18
    a94c:	25 e0       	ldi	r18, 0x05	; 5
    a94e:	d2 2e       	mov	r13, r18
    a950:	3e e4       	ldi	r19, 0x4E	; 78
    a952:	e3 2e       	mov	r14, r19
    a954:	35 e0       	ldi	r19, 0x05	; 5
    a956:	f3 2e       	mov	r15, r19
    a958:	04 e0       	ldi	r16, 0x04	; 4
    a95a:	15 e0       	ldi	r17, 0x05	; 5
    a95c:	20 91 1f 09 	lds	r18, 0x091F
    a960:	40 e0       	ldi	r20, 0x00	; 0
    a962:	50 e0       	ldi	r21, 0x00	; 0
    a964:	66 ee       	ldi	r22, 0xE6	; 230
    a966:	70 e0       	ldi	r23, 0x00	; 0
    a968:	88 e0       	ldi	r24, 0x08	; 8
    a96a:	90 e0       	ldi	r25, 0x00	; 0
    a96c:	0e 94 83 50 	call	0xa106	; 0xa106 <update_menu>

		// Edit selected curve
		if (button == ENTER)
    a970:	80 91 1f 09 	lds	r24, 0x091F
    a974:	80 3e       	cpi	r24, 0xE0	; 224
    a976:	31 f4       	brne	.+12     	; 0xa984 <menu_offsets+0xa4>
		{
			edit_curve_item(menu_temp - reference, OFFSET); // Curves after NUMBEROFCURVES are offsets
    a978:	80 91 49 05 	lds	r24, 0x0549
    a97c:	65 e0       	ldi	r22, 0x05	; 5
    a97e:	86 5e       	subi	r24, 0xE6	; 230
    a980:	0e 94 81 4c 	call	0x9902	; 0x9902 <edit_curve_item>
		}

		// Stop unwanted exit to main menu
		if (button == ABORT)
    a984:	80 91 1f 09 	lds	r24, 0x091F
    a988:	80 3a       	cpi	r24, 0xA0	; 160
    a98a:	21 f4       	brne	.+8      	; 0xa994 <menu_offsets+0xb4>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    a98c:	0e 94 04 53 	call	0xa608	; 0xa608 <Wait_BUTTON1>
			button = NONE;
    a990:	c0 93 1f 09 	sts	0x091F, r28
		}

		// Save and exit
		if (button == ENTER)
    a994:	80 91 1f 09 	lds	r24, 0x091F
    a998:	80 3e       	cpi	r24, 0xE0	; 224
    a99a:	09 f0       	breq	.+2      	; 0xa99e <menu_offsets+0xbe>
    a99c:	b7 cf       	rjmp	.-146    	; 0xa90c <menu_offsets+0x2c>
		{
			Save_Config_to_EEPROM(); // Save value and return
    a99e:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    a9a2:	0e 94 9a 53 	call	0xa734	; 0xa734 <Wait_BUTTON4>
			Wait_BUTTON1();	
    a9a6:	0e 94 04 53 	call	0xa608	; 0xa608 <Wait_BUTTON1>
    a9aa:	b0 cf       	rjmp	.-160    	; 0xa90c <menu_offsets+0x2c>
		}
	}
}
    a9ac:	cf 91       	pop	r28
    a9ae:	1f 91       	pop	r17
    a9b0:	0f 91       	pop	r16
    a9b2:	ff 90       	pop	r15
    a9b4:	ef 90       	pop	r14
    a9b6:	df 90       	pop	r13
    a9b8:	cf 90       	pop	r12
    a9ba:	bf 90       	pop	r11
    a9bc:	af 90       	pop	r10
    a9be:	08 95       	ret

0000a9c0 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    a9c0:	2f 92       	push	r2
    a9c2:	3f 92       	push	r3
    a9c4:	4f 92       	push	r4
    a9c6:	5f 92       	push	r5
    a9c8:	6f 92       	push	r6
    a9ca:	7f 92       	push	r7
    a9cc:	8f 92       	push	r8
    a9ce:	9f 92       	push	r9
    a9d0:	af 92       	push	r10
    a9d2:	bf 92       	push	r11
    a9d4:	cf 92       	push	r12
    a9d6:	df 92       	push	r13
    a9d8:	ef 92       	push	r14
    a9da:	ff 92       	push	r15
    a9dc:	0f 93       	push	r16
    a9de:	1f 93       	push	r17
    a9e0:	cf 93       	push	r28
    a9e2:	df 93       	push	r29
    a9e4:	cd b7       	in	r28, 0x3d	; 61
    a9e6:	de b7       	in	r29, 0x3e	; 62
    a9e8:	2a 97       	sbiw	r28, 0x0a	; 10
    a9ea:	0f b6       	in	r0, 0x3f	; 63
    a9ec:	f8 94       	cli
    a9ee:	de bf       	out	0x3e, r29	; 62
    a9f0:	0f be       	out	0x3f, r0	; 63
    a9f2:	cd bf       	out	0x3d, r28	; 61
    a9f4:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    a9f6:	80 91 08 05 	lds	r24, 0x0508
    a9fa:	88 23       	and	r24, r24
    a9fc:	41 f0       	breq	.+16     	; 0xaa0e <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    a9fe:	86 ee       	ldi	r24, 0xE6	; 230
    aa00:	90 e0       	ldi	r25, 0x00	; 0
    aa02:	90 93 4f 05 	sts	0x054F, r25
    aa06:	80 93 4e 05 	sts	0x054E, r24
		menu_flag = 0;
    aa0a:	10 92 08 05 	sts	0x0508, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    aa0e:	1e 82       	std	Y+6, r1	; 0x06
    aa10:	74 ef       	ldi	r23, 0xF4	; 244
    aa12:	67 2e       	mov	r6, r23
    aa14:	77 e0       	ldi	r23, 0x07	; 7
    aa16:	77 2e       	mov	r7, r23
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, (const uint16_t*)ServoMenuOffsets[section - 1], (const uint16_t*)ServoMenuText[section - 1], cursor);
    aa18:	29 2c       	mov	r2, r9
    aa1a:	31 2c       	mov	r3, r1
    aa1c:	21 e0       	ldi	r18, 0x01	; 1
    aa1e:	22 1a       	sub	r2, r18
    aa20:	31 08       	sbc	r3, r1
    aa22:	25 e0       	ldi	r18, 0x05	; 5
    aa24:	22 9d       	mul	r18, r2
    aa26:	c0 01       	movw	r24, r0
    aa28:	23 9d       	mul	r18, r3
    aa2a:	90 0d       	add	r25, r0
    aa2c:	11 24       	eor	r1, r1
    aa2e:	fc 01       	movw	r30, r24
    aa30:	eb 56       	subi	r30, 0x6B	; 107
    aa32:	f6 4d       	sbci	r31, 0xD6	; 214
    aa34:	2f 01       	movw	r4, r30
    aa36:	c1 01       	movw	r24, r2
    aa38:	e4 e0       	ldi	r30, 0x04	; 4
    aa3a:	88 0f       	add	r24, r24
    aa3c:	99 1f       	adc	r25, r25
    aa3e:	ea 95       	dec	r30
    aa40:	e1 f7       	brne	.-8      	; 0xaa3a <menu_servo_setup+0x7a>
    aa42:	9c 01       	movw	r18, r24
    aa44:	2c 52       	subi	r18, 0x2C	; 44
    aa46:	36 4d       	sbci	r19, 0xD6	; 214
    aa48:	38 87       	std	Y+8, r19	; 0x08
    aa4a:	2f 83       	std	Y+7, r18	; 0x07
    aa4c:	fc 01       	movw	r30, r24
    aa4e:	ec 55       	subi	r30, 0x5C	; 92
    aa50:	f6 4d       	sbci	r31, 0xD6	; 214
    aa52:	fa 87       	std	Y+10, r31	; 0x0a
    aa54:	e9 87       	std	Y+9, r30	; 0x09
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);

		if (button == ENTER)
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    aa56:	f3 e0       	ldi	r31, 0x03	; 3
    aa58:	22 0c       	add	r2, r2
    aa5a:	33 1c       	adc	r3, r3
    aa5c:	fa 95       	dec	r31
    aa5e:	e1 f7       	brne	.-8      	; 0xaa58 <menu_servo_setup+0x98>
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    aa60:	80 91 1f 09 	lds	r24, 0x091F
    aa64:	80 37       	cpi	r24, 0x70	; 112
    aa66:	09 f4       	brne	.+2      	; 0xaa6a <menu_servo_setup+0xaa>
    aa68:	8f c0       	rjmp	.+286    	; 0xab88 <menu_servo_setup+0x1c8>
    aa6a:	c3 01       	movw	r24, r6
    aa6c:	28 e0       	ldi	r18, 0x08	; 8
    aa6e:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    aa70:	f2 e0       	ldi	r31, 0x02	; 2
    aa72:	9f 16       	cp	r9, r31
    aa74:	51 f0       	breq	.+20     	; 0xaa8a <menu_servo_setup+0xca>
    aa76:	33 e0       	ldi	r19, 0x03	; 3
    aa78:	93 12       	cpse	r9, r19
    aa7a:	0d c0       	rjmp	.+26     	; 0xaa96 <menu_servo_setup+0xd6>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    aa7c:	41 e0       	ldi	r20, 0x01	; 1
    aa7e:	4e 83       	std	Y+6, r20	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    aa80:	88 24       	eor	r8, r8
    aa82:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    aa84:	84 e0       	ldi	r24, 0x04	; 4
    aa86:	98 e0       	ldi	r25, 0x08	; 8
					servo_enable = true;
					zero_setting = true;
					break;
    aa88:	06 c0       	rjmp	.+12     	; 0xaa96 <menu_servo_setup+0xd6>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    aa8a:	81 e0       	ldi	r24, 0x01	; 1
    aa8c:	8e 83       	std	Y+6, r24	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    aa8e:	88 24       	eor	r8, r8
    aa90:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    aa92:	8c ef       	ldi	r24, 0xFC	; 252
    aa94:	97 e0       	ldi	r25, 0x07	; 7
    aa96:	21 50       	subi	r18, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    aa98:	59 f7       	brne	.-42     	; 0xaa70 <menu_servo_setup+0xb0>
    aa9a:	3c 01       	movw	r6, r24
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, (const uint16_t*)ServoMenuOffsets[section - 1], (const uint16_t*)ServoMenuText[section - 1], cursor);
    aa9c:	a0 90 04 05 	lds	r10, 0x0504
    aaa0:	b0 90 05 05 	lds	r11, 0x0505
    aaa4:	cf 80       	ldd	r12, Y+7	; 0x07
    aaa6:	d8 84       	ldd	r13, Y+8	; 0x08
    aaa8:	e9 84       	ldd	r14, Y+9	; 0x09
    aaaa:	fa 84       	ldd	r15, Y+10	; 0x0a
    aaac:	01 e0       	ldi	r16, 0x01	; 1
    aaae:	92 01       	movw	r18, r4
    aab0:	ac 01       	movw	r20, r24
    aab2:	66 ee       	ldi	r22, 0xE6	; 230
    aab4:	70 e0       	ldi	r23, 0x00	; 0
    aab6:	80 91 4e 05 	lds	r24, 0x054E
    aaba:	90 91 4f 05 	lds	r25, 0x054F
    aabe:	0e 94 54 51 	call	0xa2a8	; 0xa2a8 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    aac2:	59 e4       	ldi	r21, 0x49	; 73
    aac4:	c5 2e       	mov	r12, r21
    aac6:	55 e0       	ldi	r21, 0x05	; 5
    aac8:	d5 2e       	mov	r13, r21
    aaca:	6e e4       	ldi	r22, 0x4E	; 78
    aacc:	e6 2e       	mov	r14, r22
    aace:	65 e0       	ldi	r22, 0x05	; 5
    aad0:	f6 2e       	mov	r15, r22
    aad2:	04 e0       	ldi	r16, 0x04	; 4
    aad4:	15 e0       	ldi	r17, 0x05	; 5
    aad6:	20 91 1f 09 	lds	r18, 0x091F
    aada:	40 e0       	ldi	r20, 0x00	; 0
    aadc:	50 e0       	ldi	r21, 0x00	; 0
    aade:	66 ee       	ldi	r22, 0xE6	; 230
    aae0:	70 e0       	ldi	r23, 0x00	; 0
    aae2:	88 e0       	ldi	r24, 0x08	; 8
    aae4:	90 e0       	ldi	r25, 0x00	; 0
    aae6:	0e 94 83 50 	call	0xa106	; 0xa106 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    aaea:	60 e0       	ldi	r22, 0x00	; 0
    aaec:	c2 01       	movw	r24, r4
    aaee:	0e 94 0a 4a 	call	0x9414	; 0x9414 <get_menu_range>
    aaf2:	29 83       	std	Y+1, r18	; 0x01
    aaf4:	3a 83       	std	Y+2, r19	; 0x02
    aaf6:	4b 83       	std	Y+3, r20	; 0x03
    aaf8:	5c 83       	std	Y+4, r21	; 0x04
    aafa:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    aafc:	80 91 1f 09 	lds	r24, 0x091F
    ab00:	80 3e       	cpi	r24, 0xE0	; 224
    ab02:	b1 f5       	brne	.+108    	; 0xab70 <menu_servo_setup+0x1b0>
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    ab04:	80 91 49 05 	lds	r24, 0x0549
    ab08:	90 91 4a 05 	lds	r25, 0x054A
    ab0c:	9c 01       	movw	r18, r24
    ab0e:	26 5e       	subi	r18, 0xE6	; 230
    ab10:	31 09       	sbc	r19, r1
    ab12:	f9 01       	movw	r30, r18
    ab14:	e2 0d       	add	r30, r2
    ab16:	f3 1d       	adc	r31, r3
    ab18:	ee 0f       	add	r30, r30
    ab1a:	ff 1f       	adc	r31, r31
    ab1c:	ec 52       	subi	r30, 0x2C	; 44
    ab1e:	f6 4d       	sbci	r31, 0xD6	; 214
    ab20:	a5 90       	lpm	r10, Z+
    ab22:	b4 90       	lpm	r11, Z
    ab24:	b3 01       	movw	r22, r6
    ab26:	62 0f       	add	r22, r18
    ab28:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    ab2a:	ee 81       	ldd	r30, Y+6	; 0x06
    ab2c:	ee 23       	and	r30, r30
    ab2e:	11 f0       	breq	.+4      	; 0xab34 <menu_servo_setup+0x174>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    ab30:	fb 01       	movw	r30, r22
    ab32:	10 82       	st	Z, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    ab34:	42 e2       	ldi	r20, 0x22	; 34
    ab36:	42 9f       	mul	r20, r18
    ab38:	f0 01       	movw	r30, r0
    ab3a:	43 9f       	mul	r20, r19
    ab3c:	f0 0d       	add	r31, r0
    ab3e:	11 24       	eor	r1, r1
    ab40:	e2 50       	subi	r30, 0x02	; 2
    ab42:	f9 4f       	sbci	r31, 0xF9	; 249
    ab44:	40 81       	ld	r20, Z
    ab46:	41 11       	cpse	r20, r1
    ab48:	05 c0       	rjmp	.+10     	; 0xab54 <menu_servo_setup+0x194>
    ab4a:	40 91 62 06 	lds	r20, 0x0662
    ab4e:	41 11       	cpse	r20, r1
    ab50:	01 c0       	rjmp	.+2      	; 0xab54 <menu_servo_setup+0x194>
			{
				servo_enable = false;
    ab52:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    ab54:	bb 24       	eor	r11, r11
    ab56:	3f 93       	push	r19
    ab58:	2f 93       	push	r18
    ab5a:	c1 2c       	mov	r12, r1
    ab5c:	e9 80       	ldd	r14, Y+1	; 0x01
    ab5e:	fa 80       	ldd	r15, Y+2	; 0x02
    ab60:	0b 81       	ldd	r16, Y+3	; 0x03
    ab62:	1c 81       	ldd	r17, Y+4	; 0x04
    ab64:	2d 81       	ldd	r18, Y+5	; 0x05
    ab66:	41 e0       	ldi	r20, 0x01	; 1
    ab68:	0e 94 98 4a 	call	0x9530	; 0x9530 <do_menu_item>
    ab6c:	0f 90       	pop	r0
    ab6e:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    ab70:	80 91 1f 09 	lds	r24, 0x091F
    ab74:	80 3e       	cpi	r24, 0xE0	; 224
    ab76:	09 f0       	breq	.+2      	; 0xab7a <menu_servo_setup+0x1ba>
    ab78:	73 cf       	rjmp	.-282    	; 0xaa60 <menu_servo_setup+0xa0>
		{
			UpdateLimits();				// Update actual servo trims
    ab7a:	0e 94 32 57 	call	0xae64	; 0xae64 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    ab7e:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    ab82:	0e 94 9a 53 	call	0xa734	; 0xa734 <Wait_BUTTON4>
    ab86:	6c cf       	rjmp	.-296    	; 0xaa60 <menu_servo_setup+0xa0>
		}
	}
}
    ab88:	2a 96       	adiw	r28, 0x0a	; 10
    ab8a:	0f b6       	in	r0, 0x3f	; 63
    ab8c:	f8 94       	cli
    ab8e:	de bf       	out	0x3e, r29	; 62
    ab90:	0f be       	out	0x3f, r0	; 63
    ab92:	cd bf       	out	0x3d, r28	; 61
    ab94:	df 91       	pop	r29
    ab96:	cf 91       	pop	r28
    ab98:	1f 91       	pop	r17
    ab9a:	0f 91       	pop	r16
    ab9c:	ff 90       	pop	r15
    ab9e:	ef 90       	pop	r14
    aba0:	df 90       	pop	r13
    aba2:	cf 90       	pop	r12
    aba4:	bf 90       	pop	r11
    aba6:	af 90       	pop	r10
    aba8:	9f 90       	pop	r9
    abaa:	8f 90       	pop	r8
    abac:	7f 90       	pop	r7
    abae:	6f 90       	pop	r6
    abb0:	5f 90       	pop	r5
    abb2:	4f 90       	pop	r4
    abb4:	3f 90       	pop	r3
    abb6:	2f 90       	pop	r2
    abb8:	08 95       	ret

0000abba <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    abba:	2f 92       	push	r2
    abbc:	3f 92       	push	r3
    abbe:	4f 92       	push	r4
    abc0:	5f 92       	push	r5
    abc2:	6f 92       	push	r6
    abc4:	7f 92       	push	r7
    abc6:	8f 92       	push	r8
    abc8:	9f 92       	push	r9
    abca:	af 92       	push	r10
    abcc:	bf 92       	push	r11
    abce:	cf 92       	push	r12
    abd0:	df 92       	push	r13
    abd2:	ef 92       	push	r14
    abd4:	ff 92       	push	r15
    abd6:	0f 93       	push	r16
    abd8:	1f 93       	push	r17
    abda:	cf 93       	push	r28
    abdc:	df 93       	push	r29
    abde:	cd b7       	in	r28, 0x3d	; 61
    abe0:	de b7       	in	r29, 0x3e	; 62
    abe2:	2b 97       	sbiw	r28, 0x0b	; 11
    abe4:	0f b6       	in	r0, 0x3f	; 63
    abe6:	f8 94       	cli
    abe8:	de bf       	out	0x3e, r29	; 62
    abea:	0f be       	out	0x3f, r0	; 63
    abec:	cd bf       	out	0x3d, r28	; 61
    abee:	98 2e       	mov	r9, r24
	uint8_t		i;
	uint16_t	offset = 0;			// Index into channel structure
	uint16_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    abf0:	80 91 08 05 	lds	r24, 0x0508
    abf4:	88 23       	and	r24, r24
    abf6:	41 f0       	breq	.+16     	; 0xac08 <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    abf8:	82 e9       	ldi	r24, 0x92	; 146
    abfa:	90 e0       	ldi	r25, 0x00	; 0
    abfc:	90 93 4f 05 	sts	0x054F, r25
    ac00:	80 93 4e 05 	sts	0x054E, r24
		menu_flag = 0;
    ac04:	10 92 08 05 	sts	0x0508, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    ac08:	61 2c       	mov	r6, r1
    ac0a:	71 2c       	mov	r7, r1
    ac0c:	72 e6       	ldi	r23, 0x62	; 98
    ac0e:	47 2e       	mov	r4, r23
    ac10:	76 e0       	ldi	r23, 0x06	; 6
    ac12:	57 2e       	mov	r5, r23

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, (const uint16_t*)RCMenuOffsets[section - 1], (const uint16_t*)RCMenuText[section - 1], cursor);
    ac14:	89 2d       	mov	r24, r9
    ac16:	90 e0       	ldi	r25, 0x00	; 0
    ac18:	01 97       	sbiw	r24, 0x01	; 1
    ac1a:	4c e3       	ldi	r20, 0x3C	; 60
    ac1c:	48 9f       	mul	r20, r24
    ac1e:	90 01       	movw	r18, r0
    ac20:	49 9f       	mul	r20, r25
    ac22:	30 0d       	add	r19, r0
    ac24:	11 24       	eor	r1, r1
    ac26:	a9 01       	movw	r20, r18
    ac28:	44 5e       	subi	r20, 0xE4	; 228
    ac2a:	55 4d       	sbci	r21, 0xD5	; 213
    ac2c:	1a 01       	movw	r2, r20
    ac2e:	48 e1       	ldi	r20, 0x18	; 24
    ac30:	48 9f       	mul	r20, r24
    ac32:	90 01       	movw	r18, r0
    ac34:	49 9f       	mul	r20, r25
    ac36:	30 0d       	add	r19, r0
    ac38:	11 24       	eor	r1, r1
    ac3a:	a9 01       	movw	r20, r18
    ac3c:	4c 53       	subi	r20, 0x3C	; 60
    ac3e:	55 4d       	sbci	r21, 0xD5	; 213
    ac40:	5f 83       	std	Y+7, r21	; 0x07
    ac42:	4e 83       	std	Y+6, r20	; 0x06
    ac44:	a9 01       	movw	r20, r18
    ac46:	4c 56       	subi	r20, 0x6C	; 108
    ac48:	55 4d       	sbci	r21, 0xD5	; 213
    ac4a:	59 87       	std	Y+9, r21	; 0x09
    ac4c:	48 87       	std	Y+8, r20	; 0x08
			Config.Preset = QUADX;			
		}

		if (button == ENTER)
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    ac4e:	2c e0       	ldi	r18, 0x0C	; 12
    ac50:	28 9f       	mul	r18, r24
    ac52:	a0 01       	movw	r20, r0
    ac54:	29 9f       	mul	r18, r25
    ac56:	50 0d       	add	r21, r0
    ac58:	11 24       	eor	r1, r1
    ac5a:	5b 87       	std	Y+11, r21	; 0x0b
    ac5c:	4a 87       	std	Y+10, r20	; 0x0a
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    ac5e:	80 91 1f 09 	lds	r24, 0x091F
    ac62:	80 37       	cpi	r24, 0x70	; 112
    ac64:	09 f4       	brne	.+2      	; 0xac68 <menu_rc_setup+0xae>
    ac66:	e5 c0       	rjmp	.+458    	; 0xae32 <menu_rc_setup+0x278>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General, 3 = Advanced
		switch(section)
    ac68:	52 e0       	ldi	r21, 0x02	; 2
    ac6a:	95 12       	cpse	r9, r21
    ac6c:	07 c0       	rjmp	.+14     	; 0xac7c <menu_rc_setup+0xc2>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    ac6e:	5c e0       	ldi	r21, 0x0C	; 12
    ac70:	65 2e       	mov	r6, r21
    ac72:	71 2c       	mov	r7, r1
				items = GENERALITEMS;
				value_ptr = &Config.Orientation_P2;
    ac74:	68 ed       	ldi	r22, 0xD8	; 216
    ac76:	46 2e       	mov	r4, r22
    ac78:	66 e0       	ldi	r22, 0x06	; 6
    ac7a:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;
    ac7c:	84 e0       	ldi	r24, 0x04	; 4
    ac7e:	80 93 e2 06 	sts	0x06E2, r24

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, (const uint16_t*)RCMenuOffsets[section - 1], (const uint16_t*)RCMenuText[section - 1], cursor);
    ac82:	a0 90 04 05 	lds	r10, 0x0504
    ac86:	b0 90 05 05 	lds	r11, 0x0505
    ac8a:	80 91 4e 05 	lds	r24, 0x054E
    ac8e:	90 91 4f 05 	lds	r25, 0x054F
    ac92:	ce 80       	ldd	r12, Y+6	; 0x06
    ac94:	df 80       	ldd	r13, Y+7	; 0x07
    ac96:	e8 84       	ldd	r14, Y+8	; 0x08
    ac98:	f9 84       	ldd	r15, Y+9	; 0x09
    ac9a:	00 e0       	ldi	r16, 0x00	; 0
    ac9c:	91 01       	movw	r18, r2
    ac9e:	a2 01       	movw	r20, r4
    aca0:	b3 01       	movw	r22, r6
    aca2:	6e 56       	subi	r22, 0x6E	; 110
    aca4:	7f 4f       	sbci	r23, 0xFF	; 255
    aca6:	86 0d       	add	r24, r6
    aca8:	97 1d       	adc	r25, r7
    acaa:	0e 94 54 51 	call	0xa2a8	; 0xa2a8 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    acae:	39 e4       	ldi	r19, 0x49	; 73
    acb0:	c3 2e       	mov	r12, r19
    acb2:	35 e0       	ldi	r19, 0x05	; 5
    acb4:	d3 2e       	mov	r13, r19
    acb6:	4e e4       	ldi	r20, 0x4E	; 78
    acb8:	e4 2e       	mov	r14, r20
    acba:	45 e0       	ldi	r20, 0x05	; 5
    acbc:	f4 2e       	mov	r15, r20
    acbe:	04 e0       	ldi	r16, 0x04	; 4
    acc0:	15 e0       	ldi	r17, 0x05	; 5
    acc2:	20 91 1f 09 	lds	r18, 0x091F
    acc6:	a3 01       	movw	r20, r6
    acc8:	62 e9       	ldi	r22, 0x92	; 146
    acca:	70 e0       	ldi	r23, 0x00	; 0
    accc:	8c e0       	ldi	r24, 0x0C	; 12
    acce:	90 e0       	ldi	r25, 0x00	; 0
    acd0:	0e 94 83 50 	call	0xa106	; 0xa106 <update_menu>
    acd4:	60 91 49 05 	lds	r22, 0x0549
    acd8:	62 59       	subi	r22, 0x92	; 146
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    acda:	66 19       	sub	r22, r6
    acdc:	c1 01       	movw	r24, r2
    acde:	0e 94 0a 4a 	call	0x9414	; 0x9414 <get_menu_range>
    ace2:	29 83       	std	Y+1, r18	; 0x01
    ace4:	3a 83       	std	Y+2, r19	; 0x02
    ace6:	4b 83       	std	Y+3, r20	; 0x03
    ace8:	5c 83       	std	Y+4, r21	; 0x04
    acea:	6d 83       	std	Y+5, r22	; 0x05

		// If actually editing the preset, show the default setting
		if (menu_temp == PRESETITEM)
    acec:	80 91 49 05 	lds	r24, 0x0549
    acf0:	90 91 4a 05 	lds	r25, 0x054A
    acf4:	8b 3a       	cpi	r24, 0xAB	; 171
    acf6:	91 05       	cpc	r25, r1
    acf8:	11 f4       	brne	.+4      	; 0xacfe <menu_rc_setup+0x144>
		{
			Config.Preset = QUADX;			
    acfa:	10 92 e2 06 	sts	0x06E2, r1
		}

		if (button == ENTER)
    acfe:	20 91 1f 09 	lds	r18, 0x091F
    ad02:	20 3e       	cpi	r18, 0xE0	; 224
    ad04:	f9 f4       	brne	.+62     	; 0xad44 <menu_rc_setup+0x18a>
    ad06:	bc 01       	movw	r22, r24
    ad08:	62 59       	subi	r22, 0x92	; 146
    ad0a:	71 09       	sbc	r23, r1
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    ad0c:	66 19       	sub	r22, r6
    ad0e:	77 09       	sbc	r23, r7
    ad10:	ea 85       	ldd	r30, Y+10	; 0x0a
    ad12:	fb 85       	ldd	r31, Y+11	; 0x0b
    ad14:	e6 0f       	add	r30, r22
    ad16:	f7 1f       	adc	r31, r23
    ad18:	ee 0f       	add	r30, r30
    ad1a:	ff 1f       	adc	r31, r31
    ad1c:	ec 53       	subi	r30, 0x3C	; 60
    ad1e:	f5 4d       	sbci	r31, 0xD5	; 213
    ad20:	a5 90       	lpm	r10, Z+
    ad22:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    ad24:	64 0d       	add	r22, r4
    ad26:	75 1d       	adc	r23, r5
    ad28:	1f 92       	push	r1
    ad2a:	1f 92       	push	r1
    ad2c:	81 2c       	mov	r8, r1
    ad2e:	c1 2c       	mov	r12, r1
    ad30:	e9 80       	ldd	r14, Y+1	; 0x01
    ad32:	fa 80       	ldd	r15, Y+2	; 0x02
    ad34:	0b 81       	ldd	r16, Y+3	; 0x03
    ad36:	1c 81       	ldd	r17, Y+4	; 0x04
    ad38:	2d 81       	ldd	r18, Y+5	; 0x05
    ad3a:	41 e0       	ldi	r20, 0x01	; 1
    ad3c:	0e 94 98 4a 	call	0x9530	; 0x9530 <do_menu_item>
    ad40:	0f 90       	pop	r0
    ad42:	0f 90       	pop	r0
		}

		// Handle abort neatly
		if (button == ABORT)
    ad44:	80 91 1f 09 	lds	r24, 0x091F
    ad48:	80 3a       	cpi	r24, 0xA0	; 160
    ad4a:	41 f4       	brne	.+16     	; 0xad5c <menu_rc_setup+0x1a2>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    ad4c:	0e 94 04 53 	call	0xa608	; 0xa608 <Wait_BUTTON1>
			button = NONE;
    ad50:	80 ef       	ldi	r24, 0xF0	; 240
    ad52:	80 93 1f 09 	sts	0x091F, r24
			
			// Reset the mixer preset if unchanged
			Config.Preset = OPTIONS;
    ad56:	84 e0       	ldi	r24, 0x04	; 4
    ad58:	80 93 e2 06 	sts	0x06E2, r24
		}

		// Post-processing on exit
		if (button == ENTER)
    ad5c:	80 91 1f 09 	lds	r24, 0x091F
    ad60:	80 3e       	cpi	r24, 0xE0	; 224
    ad62:	09 f0       	breq	.+2      	; 0xad66 <menu_rc_setup+0x1ac>
    ad64:	7c cf       	rjmp	.-264    	; 0xac5e <menu_rc_setup+0xa4>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    ad66:	0e 94 14 48 	call	0x9028	; 0x9028 <init_int>
			init_uart();			// and UART
    ad6a:	0e 94 3a 6c 	call	0xd874	; 0xd874 <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    ad6e:	0e 94 32 57 	call	0xae64	; 0xae64 <UpdateLimits>
			
			// See if mixer preset has changed. Load new preset only if so
			if ((Config.Preset != OPTIONS) && (menu_temp == PRESETITEM))
    ad72:	80 91 e2 06 	lds	r24, 0x06E2
    ad76:	84 30       	cpi	r24, 0x04	; 4
    ad78:	49 f0       	breq	.+18     	; 0xad8c <menu_rc_setup+0x1d2>
    ad7a:	20 91 49 05 	lds	r18, 0x0549
    ad7e:	30 91 4a 05 	lds	r19, 0x054A
    ad82:	2b 3a       	cpi	r18, 0xAB	; 171
    ad84:	31 05       	cpc	r19, r1
    ad86:	11 f4       	brne	.+4      	; 0xad8c <menu_rc_setup+0x1d2>
			{
				Load_eeprom_preset(Config.Preset);
    ad88:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <Load_eeprom_preset>
			}

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    ad8c:	80 91 de 06 	lds	r24, 0x06DE
    ad90:	46 e0       	ldi	r20, 0x06	; 6
    ad92:	48 1b       	sub	r20, r24
    ad94:	6a e1       	ldi	r22, 0x1A	; 26
    ad96:	80 ed       	ldi	r24, 0xD0	; 208
    ad98:	0e 94 b0 3b 	call	0x7760	; 0x7760 <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    ad9c:	20 91 65 06 	lds	r18, 0x0665
    ada0:	aa e3       	ldi	r26, 0x3A	; 58
    ada2:	b6 e0       	ldi	r27, 0x06	; 6
    ada4:	80 e0       	ldi	r24, 0x00	; 0
    ada6:	90 e0       	ldi	r25, 0x00	; 0
    ada8:	21 30       	cpi	r18, 0x01	; 1
    adaa:	21 f4       	brne	.+8      	; 0xadb4 <menu_rc_setup+0x1fa>
    adac:	fc 01       	movw	r30, r24
    adae:	ea 51       	subi	r30, 0x1A	; 26
    adb0:	fe 4f       	sbci	r31, 0xFE	; 254
    adb2:	05 c0       	rjmp	.+10     	; 0xadbe <menu_rc_setup+0x204>
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else if (Config.TxSeq == JRSEQ)
    adb4:	21 11       	cpse	r18, r1
    adb6:	06 c0       	rjmp	.+12     	; 0xadc4 <menu_rc_setup+0x20a>
    adb8:	fc 01       	movw	r30, r24
    adba:	e2 51       	subi	r30, 0x12	; 18
    adbc:	fe 4f       	sbci	r31, 0xFE	; 254
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    adbe:	e4 91       	lpm	r30, Z
    adc0:	ec 93       	st	X, r30
    adc2:	0b c0       	rjmp	.+22     	; 0xadda <menu_rc_setup+0x220>
				}
				else if (Config.TxSeq == MPXSEQ)
    adc4:	22 30       	cpi	r18, 0x02	; 2
    adc6:	21 f4       	brne	.+8      	; 0xadd0 <menu_rc_setup+0x216>
    adc8:	fc 01       	movw	r30, r24
    adca:	e2 52       	subi	r30, 0x22	; 34
    adcc:	fe 4f       	sbci	r31, 0xFE	; 254
    adce:	f7 cf       	rjmp	.-18     	; 0xadbe <menu_rc_setup+0x204>
    add0:	fd 01       	movw	r30, r26
    add2:	e6 5a       	subi	r30, 0xA6	; 166
    add4:	fd 4f       	sbci	r31, 0xFD	; 253
					Config.ChannelOrder[i] = pgm_read_byte(&MPX[i]);
				}
				// Load from custom channel order
				else
				{
					Config.ChannelOrder[i] = Config.CustomChannelOrder[i];
    add6:	30 81       	ld	r19, Z
    add8:	3c 93       	st	X, r19
    adda:	01 96       	adiw	r24, 0x01	; 1
    addc:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    adde:	88 30       	cpi	r24, 0x08	; 8
    ade0:	91 05       	cpc	r25, r1
    ade2:	11 f7       	brne	.-60     	; 0xada8 <menu_rc_setup+0x1ee>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    ade4:	80 91 62 06 	lds	r24, 0x0662
    ade8:	82 30       	cpi	r24, 0x02	; 2
    adea:	3c f4       	brge	.+14     	; 0xadfa <menu_rc_setup+0x240>
    adec:	80 91 63 06 	lds	r24, 0x0663
    adf0:	82 30       	cpi	r24, 0x02	; 2
    adf2:	19 f4       	brne	.+6      	; 0xadfa <menu_rc_setup+0x240>
			{
				Config.Servo_rate = SYNC;
    adf4:	81 e0       	ldi	r24, 0x01	; 1
    adf6:	80 93 63 06 	sts	0x0663, r24
			}
						
			if (Config.ArmMode == ARMABLE)
    adfa:	80 91 db 06 	lds	r24, 0x06DB
    adfe:	81 30       	cpi	r24, 0x01	; 1
    ae00:	31 f4       	brne	.+12     	; 0xae0e <menu_rc_setup+0x254>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    ae02:	80 91 35 05 	lds	r24, 0x0535
    ae06:	84 60       	ori	r24, 0x04	; 4
    ae08:	80 93 35 05 	sts	0x0535, r24
				LED1 = 0;
    ae0c:	2b 98       	cbi	0x05, 3	; 5
			}

			// Work out the P1 orientation from the user's P2 orientation setting
			Config.Orientation_P1 = (int8_t)pgm_read_byte(&P1_Orientation_LUT[Config.Orientation_P2]);
    ae0e:	e0 91 d8 06 	lds	r30, 0x06D8
    ae12:	0e 2e       	mov	r0, r30
    ae14:	00 0c       	add	r0, r0
    ae16:	ff 0b       	sbc	r31, r31
    ae18:	ec 5f       	subi	r30, 0xFC	; 252
    ae1a:	f5 4d       	sbci	r31, 0xD5	; 213
    ae1c:	e4 91       	lpm	r30, Z
    ae1e:	e0 93 63 08 	sts	0x0863, r30

			// Return the preset to "Options" when going back to the General menu
			Config.Preset = OPTIONS;
    ae22:	84 e0       	ldi	r24, 0x04	; 4
    ae24:	80 93 e2 06 	sts	0x06E2, r24

			Save_Config_to_EEPROM(); // Save value and return
    ae28:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    ae2c:	0e 94 9a 53 	call	0xa734	; 0xa734 <Wait_BUTTON4>
    ae30:	16 cf       	rjmp	.-468    	; 0xac5e <menu_rc_setup+0xa4>
		}
	}
}
    ae32:	2b 96       	adiw	r28, 0x0b	; 11
    ae34:	0f b6       	in	r0, 0x3f	; 63
    ae36:	f8 94       	cli
    ae38:	de bf       	out	0x3e, r29	; 62
    ae3a:	0f be       	out	0x3f, r0	; 63
    ae3c:	cd bf       	out	0x3d, r28	; 61
    ae3e:	df 91       	pop	r29
    ae40:	cf 91       	pop	r28
    ae42:	1f 91       	pop	r17
    ae44:	0f 91       	pop	r16
    ae46:	ff 90       	pop	r15
    ae48:	ef 90       	pop	r14
    ae4a:	df 90       	pop	r13
    ae4c:	cf 90       	pop	r12
    ae4e:	bf 90       	pop	r11
    ae50:	af 90       	pop	r10
    ae52:	9f 90       	pop	r9
    ae54:	8f 90       	pop	r8
    ae56:	7f 90       	pop	r7
    ae58:	6f 90       	pop	r6
    ae5a:	5f 90       	pop	r5
    ae5c:	4f 90       	pop	r4
    ae5e:	3f 90       	pop	r3
    ae60:	2f 90       	pop	r2
    ae62:	08 95       	ret

0000ae64 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    ae64:	6f 92       	push	r6
    ae66:	7f 92       	push	r7
    ae68:	8f 92       	push	r8
    ae6a:	9f 92       	push	r9
    ae6c:	af 92       	push	r10
    ae6e:	bf 92       	push	r11
    ae70:	cf 92       	push	r12
    ae72:	df 92       	push	r13
    ae74:	ef 92       	push	r14
    ae76:	ff 92       	push	r15
    ae78:	0f 93       	push	r16
    ae7a:	1f 93       	push	r17
    ae7c:	cf 93       	push	r28
    ae7e:	df 93       	push	r29
    ae80:	cd b7       	in	r28, 0x3d	; 61
    ae82:	de b7       	in	r29, 0x3e	; 62
    ae84:	60 97       	sbiw	r28, 0x10	; 16
    ae86:	0f b6       	in	r0, 0x3f	; 63
    ae88:	f8 94       	cli
    ae8a:	de bf       	out	0x3e, r29	; 62
    ae8c:	0f be       	out	0x3f, r0	; 63
    ae8e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	// RPY + Z damp
	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS+1] = 
    ae90:	80 91 70 06 	lds	r24, 0x0670
    ae94:	89 87       	std	Y+9, r24	; 0x09
    ae96:	80 91 76 06 	lds	r24, 0x0676
    ae9a:	8a 87       	std	Y+10, r24	; 0x0a
    ae9c:	80 91 7c 06 	lds	r24, 0x067C
    aea0:	8b 87       	std	Y+11, r24	; 0x0b
    aea2:	80 91 81 06 	lds	r24, 0x0681
    aea6:	8c 87       	std	Y+12, r24	; 0x0c
    aea8:	80 91 84 06 	lds	r24, 0x0684
    aeac:	8d 87       	std	Y+13, r24	; 0x0d
    aeae:	80 91 8a 06 	lds	r24, 0x068A
    aeb2:	8e 87       	std	Y+14, r24	; 0x0e
    aeb4:	80 91 90 06 	lds	r24, 0x0690
    aeb8:	8f 87       	std	Y+15, r24	; 0x0f
    aeba:	80 91 95 06 	lds	r24, 0x0695
    aebe:	88 8b       	std	Y+16, r24	; 0x10
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit, Config.FlightMode[P1].A_Zed_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit, Config.FlightMode[P2].A_Zed_limit}
		};

	// RPY + Z damp
	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS+1] = 
    aec0:	80 91 6f 06 	lds	r24, 0x066F
    aec4:	89 83       	std	Y+1, r24	; 0x01
    aec6:	80 91 75 06 	lds	r24, 0x0675
    aeca:	8a 83       	std	Y+2, r24	; 0x02
    aecc:	80 91 7b 06 	lds	r24, 0x067B
    aed0:	8b 83       	std	Y+3, r24	; 0x03
    aed2:	80 91 80 06 	lds	r24, 0x0680
    aed6:	8c 83       	std	Y+4, r24	; 0x04
    aed8:	80 91 83 06 	lds	r24, 0x0683
    aedc:	8d 83       	std	Y+5, r24	; 0x05
    aede:	80 91 89 06 	lds	r24, 0x0689
    aee2:	8e 83       	std	Y+6, r24	; 0x06
    aee4:	80 91 8f 06 	lds	r24, 0x068F
    aee8:	8f 83       	std	Y+7, r24	; 0x07
    aeea:	80 91 94 06 	lds	r24, 0x0694
    aeee:	88 87       	std	Y+8, r24	; 0x08
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult, Config.FlightMode[P2].A_Zed_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    aef0:	e0 91 dd 06 	lds	r30, 0x06DD
    aef4:	8e 2f       	mov	r24, r30
    aef6:	ee 0f       	add	r30, r30
    aef8:	99 0b       	sbc	r25, r25
    aefa:	aa 0b       	sbc	r26, r26
    aefc:	bb 0b       	sbc	r27, r27
    aefe:	89 30       	cpi	r24, 0x09	; 9
    af00:	91 05       	cpc	r25, r1
    af02:	08 f5       	brcc	.+66     	; 0xaf46 <UpdateLimits+0xe2>
    af04:	fc 01       	movw	r30, r24
    af06:	e9 56       	subi	r30, 0x69	; 105
    af08:	ff 4f       	sbci	r31, 0xFF	; 255
    af0a:	0c 94 5f 6f 	jmp	0xdebe	; 0xdebe <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    af0e:	80 e4       	ldi	r24, 0x40	; 64
    af10:	91 e0       	ldi	r25, 0x01	; 1
    af12:	14 c0       	rjmp	.+40     	; 0xaf3c <UpdateLimits+0xd8>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    af14:	8a e4       	ldi	r24, 0x4A	; 74
    af16:	91 e0       	ldi	r25, 0x01	; 1
    af18:	11 c0       	rjmp	.+34     	; 0xaf3c <UpdateLimits+0xd8>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    af1a:	84 e5       	ldi	r24, 0x54	; 84
    af1c:	91 e0       	ldi	r25, 0x01	; 1
    af1e:	0e c0       	rjmp	.+28     	; 0xaf3c <UpdateLimits+0xd8>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    af20:	8e e5       	ldi	r24, 0x5E	; 94
    af22:	91 e0       	ldi	r25, 0x01	; 1
    af24:	0b c0       	rjmp	.+22     	; 0xaf3c <UpdateLimits+0xd8>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    af26:	88 e6       	ldi	r24, 0x68	; 104
    af28:	91 e0       	ldi	r25, 0x01	; 1
    af2a:	08 c0       	rjmp	.+16     	; 0xaf3c <UpdateLimits+0xd8>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    af2c:	82 e7       	ldi	r24, 0x72	; 114
    af2e:	91 e0       	ldi	r25, 0x01	; 1
    af30:	05 c0       	rjmp	.+10     	; 0xaf3c <UpdateLimits+0xd8>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    af32:	8c e7       	ldi	r24, 0x7C	; 124
    af34:	91 e0       	ldi	r25, 0x01	; 1
    af36:	02 c0       	rjmp	.+4      	; 0xaf3c <UpdateLimits+0xd8>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    af38:	86 e8       	ldi	r24, 0x86	; 134
    af3a:	91 e0       	ldi	r25, 0x01	; 1
    af3c:	90 93 d7 06 	sts	0x06D7, r25
    af40:	80 93 d6 06 	sts	0x06D6, r24
			break;
    af44:	04 c0       	rjmp	.+8      	; 0xaf4e <UpdateLimits+0xea>
		default:
			Config.PowerTriggerActual = 0;			// Off
    af46:	10 92 d7 06 	sts	0x06D7, r1
    af4a:	10 92 d6 06 	sts	0x06D6, r1
			break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    af4e:	20 91 46 05 	lds	r18, 0x0546
    af52:	30 91 47 05 	lds	r19, 0x0547
    af56:	80 91 d6 06 	lds	r24, 0x06D6
    af5a:	90 91 d7 06 	lds	r25, 0x06D7
    af5e:	26 36       	cpi	r18, 0x66	; 102
    af60:	48 e0       	ldi	r20, 0x08	; 8
    af62:	34 07       	cpc	r19, r20
    af64:	78 f0       	brcs	.+30     	; 0xaf84 <UpdateLimits+0x120>
	{
		Config.PowerTriggerActual *= 6;
    af66:	46 e0       	ldi	r20, 0x06	; 6
    af68:	48 9f       	mul	r20, r24
    af6a:	90 01       	movw	r18, r0
    af6c:	49 9f       	mul	r20, r25
    af6e:	30 0d       	add	r19, r0
    af70:	11 24       	eor	r1, r1
    af72:	30 93 d7 06 	sts	0x06D7, r19
    af76:	20 93 d6 06 	sts	0x06D6, r18
    af7a:	02 ec       	ldi	r16, 0xC2	; 194
    af7c:	16 e0       	ldi	r17, 0x06	; 6

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    af7e:	e1 2c       	mov	r14, r1
    af80:	f1 2c       	mov	r15, r1
    af82:	25 c0       	rjmp	.+74     	; 0xafce <UpdateLimits+0x16a>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    af84:	a9 01       	movw	r20, r18
    af86:	42 5c       	subi	r20, 0xC2	; 194
    af88:	56 40       	sbci	r21, 0x06	; 6
    af8a:	44 3a       	cpi	r20, 0xA4	; 164
    af8c:	51 40       	sbci	r21, 0x01	; 1
    af8e:	10 f4       	brcc	.+4      	; 0xaf94 <UpdateLimits+0x130>
	{
		Config.PowerTriggerActual *= 5;
    af90:	45 e0       	ldi	r20, 0x05	; 5
    af92:	ea cf       	rjmp	.-44     	; 0xaf68 <UpdateLimits+0x104>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    af94:	a9 01       	movw	r20, r18
    af96:	44 51       	subi	r20, 0x14	; 20
    af98:	55 40       	sbci	r21, 0x05	; 5
    af9a:	4e 3a       	cpi	r20, 0xAE	; 174
    af9c:	51 40       	sbci	r21, 0x01	; 1
    af9e:	28 f4       	brcc	.+10     	; 0xafaa <UpdateLimits+0x146>
	{
		Config.PowerTriggerActual *= 4;
    afa0:	88 0f       	add	r24, r24
    afa2:	99 1f       	adc	r25, r25
    afa4:	88 0f       	add	r24, r24
    afa6:	99 1f       	adc	r25, r25
    afa8:	0d c0       	rjmp	.+26     	; 0xafc4 <UpdateLimits+0x160>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    afaa:	24 58       	subi	r18, 0x84	; 132
    afac:	33 40       	sbci	r19, 0x03	; 3
    afae:	20 39       	cpi	r18, 0x90	; 144
    afb0:	31 40       	sbci	r19, 0x01	; 1
    afb2:	30 f4       	brcc	.+12     	; 0xafc0 <UpdateLimits+0x15c>
	{
		Config.PowerTriggerActual *= 3;
    afb4:	9c 01       	movw	r18, r24
    afb6:	22 0f       	add	r18, r18
    afb8:	33 1f       	adc	r19, r19
    afba:	82 0f       	add	r24, r18
    afbc:	93 1f       	adc	r25, r19
    afbe:	02 c0       	rjmp	.+4      	; 0xafc4 <UpdateLimits+0x160>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    afc0:	88 0f       	add	r24, r24
    afc2:	99 1f       	adc	r25, r25
    afc4:	90 93 d7 06 	sts	0x06D7, r25
    afc8:	80 93 d6 06 	sts	0x06D6, r24
    afcc:	d6 cf       	rjmp	.-84     	; 0xaf7a <UpdateLimits+0x116>
    afce:	58 01       	movw	r10, r16
    afd0:	fc e2       	ldi	r31, 0x2C	; 44
    afd2:	af 1a       	sub	r10, r31
    afd4:	b1 08       	sbc	r11, r1

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    afd6:	c1 2c       	mov	r12, r1
    afd8:	d1 2c       	mov	r13, r1
    afda:	89 e0       	ldi	r24, 0x09	; 9
    afdc:	88 2e       	mov	r8, r24
    afde:	91 2c       	mov	r9, r1
    afe0:	8c 0e       	add	r8, r28
    afe2:	9d 1e       	adc	r9, r29
    afe4:	8e 0c       	add	r8, r14
    afe6:	9f 1c       	adc	r9, r15
    afe8:	66 24       	eor	r6, r6
    afea:	63 94       	inc	r6
    afec:	71 2c       	mov	r7, r1
    afee:	6c 0e       	add	r6, r28
    aff0:	7d 1e       	adc	r7, r29
    aff2:	6e 0c       	add	r6, r14
    aff4:	7f 1c       	adc	r7, r15
    aff6:	f4 01       	movw	r30, r8
    aff8:	ec 0d       	add	r30, r12
    affa:	fd 1d       	adc	r31, r13
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		// Limits calculation is different for gyros and accs
		for (i = 0; i < (NUMBEROFAXIS); i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    affc:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    affe:	0a 2e       	mov	r0, r26
    b000:	00 0c       	add	r0, r0
    b002:	bb 0b       	sbc	r27, r27
    b004:	20 e8       	ldi	r18, 0x80	; 128
    b006:	32 e0       	ldi	r19, 0x02	; 2
    b008:	0e 94 7c 6f 	call	0xdef8	; 0xdef8 <__usmulhisi3>
    b00c:	f5 01       	movw	r30, r10
    b00e:	61 93       	st	Z+, r22
    b010:	71 93       	st	Z+, r23
    b012:	81 93       	st	Z+, r24
    b014:	91 93       	st	Z+, r25
    b016:	5f 01       	movw	r10, r30
    b018:	f3 01       	movw	r30, r6
    b01a:	ec 0d       	add	r30, r12
    b01c:	fd 1d       	adc	r31, r13

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 
			if (gains[j][i] != 0)
    b01e:	20 81       	ld	r18, Z
    b020:	22 23       	and	r18, r18
    b022:	b1 f0       	breq	.+44     	; 0xb050 <UpdateLimits+0x1ec>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    b024:	45 e0       	ldi	r20, 0x05	; 5
    b026:	66 0f       	add	r22, r22
    b028:	77 1f       	adc	r23, r23
    b02a:	88 1f       	adc	r24, r24
    b02c:	99 1f       	adc	r25, r25
    b02e:	4a 95       	dec	r20
    b030:	d1 f7       	brne	.-12     	; 0xb026 <UpdateLimits+0x1c2>
			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 
			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    b032:	02 2e       	mov	r0, r18
    b034:	00 0c       	add	r0, r0
    b036:	33 0b       	sbc	r19, r19
    b038:	44 0b       	sbc	r20, r20
    b03a:	55 0b       	sbc	r21, r21
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    b03c:	0e 94 40 6f 	call	0xde80	; 0xde80 <__divmodsi4>
    b040:	d5 01       	movw	r26, r10
    b042:	5c 96       	adiw	r26, 0x1c	; 28
    b044:	2d 93       	st	X+, r18
    b046:	3d 93       	st	X+, r19
    b048:	4d 93       	st	X+, r20
    b04a:	5c 93       	st	X, r21
    b04c:	5f 97       	sbiw	r26, 0x1f	; 31
    b04e:	05 c0       	rjmp	.+10     	; 0xb05a <UpdateLimits+0x1f6>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    b050:	f5 01       	movw	r30, r10
    b052:	14 8e       	std	Z+28, r1	; 0x1c
    b054:	15 8e       	std	Z+29, r1	; 0x1d
    b056:	16 8e       	std	Z+30, r1	; 0x1e
    b058:	17 8e       	std	Z+31, r1	; 0x1f
    b05a:	ff ef       	ldi	r31, 0xFF	; 255
    b05c:	cf 1a       	sub	r12, r31
    b05e:	df 0a       	sbc	r13, r31

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		// Limits calculation is different for gyros and accs
		for (i = 0; i < (NUMBEROFAXIS); i++)
    b060:	23 e0       	ldi	r18, 0x03	; 3
    b062:	c2 16       	cp	r12, r18
    b064:	d1 04       	cpc	r13, r1
    b066:	39 f6       	brne	.-114    	; 0xaff6 <UpdateLimits+0x192>
				Config.Raw_I_Constrain[j][i] = 0;
			}
		}
		
		// Accs
		temp32 	= limits[j][ZED]; 						// Promote limit %
    b068:	f4 01       	movw	r30, r8
    b06a:	a3 81       	ldd	r26, Z+3	; 0x03

		// I-term output (throw). Convert from % to actual count
		// A value of 80,000 results in +/- 1250 or full throw at the output stage
		// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
		Config.Raw_I_Limits[j][ZED] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    b06c:	0a 2e       	mov	r0, r26
    b06e:	00 0c       	add	r0, r0
    b070:	bb 0b       	sbc	r27, r27
    b072:	20 e8       	ldi	r18, 0x80	; 128
    b074:	32 e0       	ldi	r19, 0x02	; 2
    b076:	0e 94 7c 6f 	call	0xdef8	; 0xdef8 <__usmulhisi3>
    b07a:	f8 01       	movw	r30, r16
    b07c:	b0 97       	sbiw	r30, 0x20	; 32
    b07e:	60 83       	st	Z, r22
    b080:	71 83       	std	Z+1, r23	; 0x01
    b082:	82 83       	std	Z+2, r24	; 0x02
    b084:	93 83       	std	Z+3, r25	; 0x03

		// I-term source limits. These have to be different due to the I-term gain setting
		// I-term = (gyro * gain) / 4, so the gyro count for a particular gain and limit is
		// Gyro = (I-term * 4) / gain :)
		if (gains[j][ZED] != 0)
    b086:	d3 01       	movw	r26, r6
    b088:	13 96       	adiw	r26, 0x03	; 3
    b08a:	2c 91       	ld	r18, X
    b08c:	22 23       	and	r18, r18
    b08e:	a1 f0       	breq	.+40     	; 0xb0b8 <UpdateLimits+0x254>
		{
			gain32 = gains[j][ZED];						// Promote gain value
			Config.Raw_I_Constrain[j][ZED] = (Config.Raw_I_Limits[j][ZED] << 2) / gain32;
    b090:	32 e0       	ldi	r19, 0x02	; 2
    b092:	66 0f       	add	r22, r22
    b094:	77 1f       	adc	r23, r23
    b096:	88 1f       	adc	r24, r24
    b098:	99 1f       	adc	r25, r25
    b09a:	3a 95       	dec	r19
    b09c:	d1 f7       	brne	.-12     	; 0xb092 <UpdateLimits+0x22e>
		// I-term source limits. These have to be different due to the I-term gain setting
		// I-term = (gyro * gain) / 4, so the gyro count for a particular gain and limit is
		// Gyro = (I-term * 4) / gain :)
		if (gains[j][ZED] != 0)
		{
			gain32 = gains[j][ZED];						// Promote gain value
    b09e:	02 2e       	mov	r0, r18
    b0a0:	00 0c       	add	r0, r0
    b0a2:	33 0b       	sbc	r19, r19
    b0a4:	44 0b       	sbc	r20, r20
    b0a6:	55 0b       	sbc	r21, r21
			Config.Raw_I_Constrain[j][ZED] = (Config.Raw_I_Limits[j][ZED] << 2) / gain32;
    b0a8:	0e 94 40 6f 	call	0xde80	; 0xde80 <__divmodsi4>
    b0ac:	f8 01       	movw	r30, r16
    b0ae:	20 83       	st	Z, r18
    b0b0:	31 83       	std	Z+1, r19	; 0x01
    b0b2:	42 83       	std	Z+2, r20	; 0x02
    b0b4:	53 83       	std	Z+3, r21	; 0x03
    b0b6:	06 c0       	rjmp	.+12     	; 0xb0c4 <UpdateLimits+0x260>
		}
		else
		{
			Config.Raw_I_Constrain[j][ZED] = 0;
    b0b8:	d8 01       	movw	r26, r16
    b0ba:	1d 92       	st	X+, r1
    b0bc:	1d 92       	st	X+, r1
    b0be:	1d 92       	st	X+, r1
    b0c0:	1c 92       	st	X, r1
    b0c2:	13 97       	sbiw	r26, 0x03	; 3
    b0c4:	00 5f       	subi	r16, 0xF0	; 240
    b0c6:	1f 4f       	sbci	r17, 0xFF	; 255
    b0c8:	b4 e0       	ldi	r27, 0x04	; 4
    b0ca:	eb 0e       	add	r14, r27
    b0cc:	f1 1c       	adc	r15, r1
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    b0ce:	e8 e0       	ldi	r30, 0x08	; 8
    b0d0:	ee 16       	cp	r14, r30
    b0d2:	f1 04       	cpc	r15, r1
    b0d4:	09 f0       	breq	.+2      	; 0xb0d8 <UpdateLimits+0x274>
    b0d6:	7b cf       	rjmp	.-266    	; 0xafce <UpdateLimits+0x16a>
    b0d8:	e9 e3       	ldi	r30, 0x39	; 57
    b0da:	f6 e0       	ldi	r31, 0x06	; 6
    b0dc:	44 e0       	ldi	r20, 0x04	; 4
    b0de:	58 e0       	ldi	r21, 0x08	; 8
    b0e0:	ca 01       	movw	r24, r20
    b0e2:	08 97       	sbiw	r24, 0x08	; 8
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_micros(Config.min_travel[i]);
    b0e4:	dc 01       	movw	r26, r24
    b0e6:	8c 91       	ld	r24, X
int16_t scale_micros(int8_t value)
{
	int16_t temp16;

	// 100% = 1000 to 2000
	temp16 = (int16_t)((value * 5) + SERVO_CENTER); // SERVO_CENTER = 1500
    b0e8:	b5 e0       	ldi	r27, 0x05	; 5
    b0ea:	8b 02       	muls	r24, r27
    b0ec:	c0 01       	movw	r24, r0
    b0ee:	11 24       	eor	r1, r1
    b0f0:	84 52       	subi	r24, 0x24	; 36
    b0f2:	9a 4f       	sbci	r25, 0xFA	; 250
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_micros(Config.min_travel[i]);
    b0f4:	92 87       	std	Z+10, r25	; 0x0a
    b0f6:	81 87       	std	Z+9, r24	; 0x09
		Config.Limits[i].maximum = scale_micros(Config.max_travel[i]);
    b0f8:	da 01       	movw	r26, r20
    b0fa:	8d 91       	ld	r24, X+
    b0fc:	ad 01       	movw	r20, r26
int16_t scale_micros(int8_t value)
{
	int16_t temp16;

	// 100% = 1000 to 2000
	temp16 = (int16_t)((value * 5) + SERVO_CENTER); // SERVO_CENTER = 1500
    b0fe:	b5 e0       	ldi	r27, 0x05	; 5
    b100:	8b 02       	muls	r24, r27
    b102:	c0 01       	movw	r24, r0
    b104:	11 24       	eor	r1, r1
    b106:	84 52       	subi	r24, 0x24	; 36
    b108:	9a 4f       	sbci	r25, 0xFA	; 250

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_micros(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_micros(Config.max_travel[i]);
    b10a:	94 87       	std	Z+12, r25	; 0x0c
    b10c:	83 87       	std	Z+11, r24	; 0x0b
    b10e:	34 96       	adiw	r30, 0x04	; 4
			Config.Raw_I_Constrain[j][ZED] = 0;
		}	
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    b110:	26 e0       	ldi	r18, 0x06	; 6
    b112:	e9 35       	cpi	r30, 0x59	; 89
    b114:	f2 07       	cpc	r31, r18
    b116:	21 f7       	brne	.-56     	; 0xb0e0 <UpdateLimits+0x27c>
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 100 = 12700 which in 1/100ths of a degree equates to potentially 127 degrees
	// In reality though, with a more realistic P gain of 10, this equates to potentially 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 100;
    b118:	80 91 73 06 	lds	r24, 0x0673
    b11c:	44 e6       	ldi	r20, 0x64	; 100
    b11e:	84 02       	muls	r24, r20
    b120:	c0 01       	movw	r24, r0
    b122:	11 24       	eor	r1, r1
    b124:	90 93 32 08 	sts	0x0832, r25
    b128:	80 93 31 08 	sts	0x0831, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 100;
    b12c:	80 91 79 06 	lds	r24, 0x0679
    b130:	64 e6       	ldi	r22, 0x64	; 100
    b132:	86 02       	muls	r24, r22
    b134:	c0 01       	movw	r24, r0
    b136:	11 24       	eor	r1, r1
    b138:	90 93 36 08 	sts	0x0836, r25
    b13c:	80 93 35 08 	sts	0x0835, r24
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 100 = 12700 which in 1/100ths of a degree equates to potentially 127 degrees
	// In reality though, with a more realistic P gain of 10, this equates to potentially 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 100;
    b140:	80 91 87 06 	lds	r24, 0x0687
    b144:	a4 e6       	ldi	r26, 0x64	; 100
    b146:	8a 02       	muls	r24, r26
    b148:	c0 01       	movw	r24, r0
    b14a:	11 24       	eor	r1, r1
    b14c:	90 93 34 08 	sts	0x0834, r25
    b150:	80 93 33 08 	sts	0x0833, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 100;
    b154:	80 91 8d 06 	lds	r24, 0x068D
    b158:	b4 e6       	ldi	r27, 0x64	; 100
    b15a:	8b 02       	muls	r24, r27
    b15c:	c0 01       	movw	r24, r0
    b15e:	11 24       	eor	r1, r1
    b160:	90 93 38 08 	sts	0x0838, r25
    b164:	80 93 37 08 	sts	0x0837, r24
	// Move any menu post-processing here so that it happens post-reboot

	// Update channel sequence
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		if (Config.TxSeq == FUTABASEQ)
    b168:	20 91 65 06 	lds	r18, 0x0665
    b16c:	aa e3       	ldi	r26, 0x3A	; 58
    b16e:	b6 e0       	ldi	r27, 0x06	; 6
    b170:	80 e0       	ldi	r24, 0x00	; 0
    b172:	90 e0       	ldi	r25, 0x00	; 0
    b174:	21 30       	cpi	r18, 0x01	; 1
    b176:	21 f4       	brne	.+8      	; 0xb180 <UpdateLimits+0x31c>
    b178:	fc 01       	movw	r30, r24
    b17a:	ea 51       	subi	r30, 0x1A	; 26
    b17c:	fe 4f       	sbci	r31, 0xFE	; 254
    b17e:	05 c0       	rjmp	.+10     	; 0xb18a <UpdateLimits+0x326>
		{
			Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
		}
		else if (Config.TxSeq == JRSEQ)
    b180:	21 11       	cpse	r18, r1
    b182:	06 c0       	rjmp	.+12     	; 0xb190 <UpdateLimits+0x32c>
    b184:	fc 01       	movw	r30, r24
    b186:	e2 51       	subi	r30, 0x12	; 18
    b188:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    b18a:	e4 91       	lpm	r30, Z
    b18c:	ec 93       	st	X, r30
    b18e:	0b c0       	rjmp	.+22     	; 0xb1a6 <UpdateLimits+0x342>
		}
		else if (Config.TxSeq == MPXSEQ)
    b190:	22 30       	cpi	r18, 0x02	; 2
    b192:	21 f4       	brne	.+8      	; 0xb19c <UpdateLimits+0x338>
    b194:	fc 01       	movw	r30, r24
    b196:	e2 52       	subi	r30, 0x22	; 34
    b198:	fe 4f       	sbci	r31, 0xFE	; 254
    b19a:	f7 cf       	rjmp	.-18     	; 0xb18a <UpdateLimits+0x326>
    b19c:	fd 01       	movw	r30, r26
    b19e:	e6 5a       	subi	r30, 0xA6	; 166
    b1a0:	fd 4f       	sbci	r31, 0xFD	; 253
			Config.ChannelOrder[i] = pgm_read_byte(&MPX[i]);
		}
		// Load from custom channel order
		else
		{
			Config.ChannelOrder[i] = Config.CustomChannelOrder[i];
    b1a2:	30 81       	ld	r19, Z
    b1a4:	3c 93       	st	X, r19
    b1a6:	01 96       	adiw	r24, 0x01	; 1
    b1a8:	11 96       	adiw	r26, 0x01	; 1

	// Additional tasks to ensure compatibility with the GUI
	// Move any menu post-processing here so that it happens post-reboot

	// Update channel sequence
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    b1aa:	88 30       	cpi	r24, 0x08	; 8
    b1ac:	91 05       	cpc	r25, r1
    b1ae:	11 f7       	brne	.-60     	; 0xb174 <UpdateLimits+0x310>
		}
	}

	// See if mixer preset has changed. The only time it will ever NOT
	// be "Options" is when the GUI has changed it.
	if (Config.Preset != OPTIONS)
    b1b0:	80 91 e2 06 	lds	r24, 0x06E2
    b1b4:	84 30       	cpi	r24, 0x04	; 4
    b1b6:	29 f0       	breq	.+10     	; 0xb1c2 <UpdateLimits+0x35e>
	{
		Load_eeprom_preset(Config.Preset);
    b1b8:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <Load_eeprom_preset>
		
		// Reset the mixer preset
		Config.Preset = OPTIONS;
    b1bc:	84 e0       	ldi	r24, 0x04	; 4
    b1be:	80 93 e2 06 	sts	0x06E2, r24
	}
	
	// Update MPU6050 LPF and reverse sense of menu items
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    b1c2:	80 91 de 06 	lds	r24, 0x06DE
    b1c6:	46 e0       	ldi	r20, 0x06	; 6
    b1c8:	48 1b       	sub	r20, r24
    b1ca:	6a e1       	ldi	r22, 0x1A	; 26
    b1cc:	80 ed       	ldi	r24, 0xD0	; 208
    b1ce:	0e 94 b0 3b 	call	0x7760	; 0x7760 <writeI2Cbyte>

	// Check validity of RX type and PWM speed selection
	// If illegal setting, drop down to RC Sync
	if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    b1d2:	80 91 62 06 	lds	r24, 0x0662
    b1d6:	82 30       	cpi	r24, 0x02	; 2
    b1d8:	3c f4       	brge	.+14     	; 0xb1e8 <UpdateLimits+0x384>
    b1da:	80 91 63 06 	lds	r24, 0x0663
    b1de:	82 30       	cpi	r24, 0x02	; 2
    b1e0:	19 f4       	brne	.+6      	; 0xb1e8 <UpdateLimits+0x384>
	{
		Config.Servo_rate = SYNC;
    b1e2:	81 e0       	ldi	r24, 0x01	; 1
    b1e4:	80 93 63 06 	sts	0x0663, r24
	}
		
	// If mode switched to ARMABLE, make sure to disarm	
	if (Config.ArmMode == ARMABLE)
    b1e8:	80 91 db 06 	lds	r24, 0x06DB
    b1ec:	81 30       	cpi	r24, 0x01	; 1
    b1ee:	31 f4       	brne	.+12     	; 0xb1fc <UpdateLimits+0x398>
	{
		General_error |= (1 << DISARMED);	// Set flags to disarmed
    b1f0:	80 91 35 05 	lds	r24, 0x0535
    b1f4:	84 60       	ori	r24, 0x04	; 4
    b1f6:	80 93 35 05 	sts	0x0535, r24
		LED1 = 0;
    b1fa:	2b 98       	cbi	0x05, 3	; 5
	}	

	// Work out the P1 orientation from the user's P2 orientation setting
	Config.Orientation_P1 = (int8_t)pgm_read_byte(&P1_Orientation_LUT[Config.Orientation_P2]);
    b1fc:	e0 91 d8 06 	lds	r30, 0x06D8
    b200:	0e 2e       	mov	r0, r30
    b202:	00 0c       	add	r0, r0
    b204:	ff 0b       	sbc	r31, r31
    b206:	ec 5f       	subi	r30, 0xFC	; 252
    b208:	f5 4d       	sbci	r31, 0xD5	; 213
    b20a:	e4 91       	lpm	r30, Z
    b20c:	e0 93 63 08 	sts	0x0863, r30

	Save_Config_to_EEPROM(); // Save values and return
}
    b210:	60 96       	adiw	r28, 0x10	; 16
    b212:	0f b6       	in	r0, 0x3f	; 63
    b214:	f8 94       	cli
    b216:	de bf       	out	0x3e, r29	; 62
    b218:	0f be       	out	0x3f, r0	; 63
    b21a:	cd bf       	out	0x3d, r28	; 61
    b21c:	df 91       	pop	r29
    b21e:	cf 91       	pop	r28
    b220:	1f 91       	pop	r17
    b222:	0f 91       	pop	r16
    b224:	ff 90       	pop	r15
    b226:	ef 90       	pop	r14
    b228:	df 90       	pop	r13
    b22a:	cf 90       	pop	r12
    b22c:	bf 90       	pop	r11
    b22e:	af 90       	pop	r10
    b230:	9f 90       	pop	r9
    b232:	8f 90       	pop	r8
    b234:	7f 90       	pop	r7
    b236:	6f 90       	pop	r6
	}	

	// Work out the P1 orientation from the user's P2 orientation setting
	Config.Orientation_P1 = (int8_t)pgm_read_byte(&P1_Orientation_LUT[Config.Orientation_P2]);

	Save_Config_to_EEPROM(); // Save values and return
    b238:	0c 94 5a 26 	jmp	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>

0000b23c <UpdateServos>:
}

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    b23c:	e4 ee       	ldi	r30, 0xE4	; 228
    b23e:	f6 e0       	ldi	r31, 0x06	; 6
    b240:	80 e0       	ldi	r24, 0x00	; 0
    b242:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    b244:	20 81       	ld	r18, Z
    b246:	31 81       	ldd	r19, Z+1	; 0x01
    b248:	dc 01       	movw	r26, r24
    b24a:	ac 50       	subi	r26, 0x0C	; 12
    b24c:	b8 4f       	sbci	r27, 0xF8	; 248

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    b24e:	4c 91       	ld	r20, X
    b250:	41 30       	cpi	r20, 0x01	; 1
    b252:	19 f4       	brne	.+6      	; 0xb25a <UpdateServos+0x1e>
		{	
			temp1 = -temp1;
    b254:	31 95       	neg	r19
    b256:	21 95       	neg	r18
    b258:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    b25a:	2a 55       	subi	r18, 0x5A	; 90
    b25c:	31 4f       	sbci	r19, 0xF1	; 241

		// Transfer value to servo
		ServoOut[i] = temp1;
    b25e:	dc 01       	movw	r26, r24
    b260:	aa 0f       	add	r26, r26
    b262:	bb 1f       	adc	r27, r27
    b264:	ab 56       	subi	r26, 0x6B	; 107
    b266:	b6 4f       	sbci	r27, 0xF6	; 246
    b268:	11 96       	adiw	r26, 0x01	; 1
    b26a:	3c 93       	st	X, r19
    b26c:	2e 93       	st	-X, r18
    b26e:	01 96       	adiw	r24, 0x01	; 1
    b270:	b2 96       	adiw	r30, 0x22	; 34
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    b272:	88 30       	cpi	r24, 0x08	; 8
    b274:	91 05       	cpc	r25, r1
    b276:	31 f7       	brne	.-52     	; 0xb244 <UpdateServos+0x8>
		temp1 += 3750;

		// Transfer value to servo
		ServoOut[i] = temp1;
	}
}
    b278:	08 95       	ret

0000b27a <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    b27a:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    b27c:	64 36       	cpi	r22, 0x64	; 100
    b27e:	71 05       	cpc	r23, r1
    b280:	c9 f0       	breq	.+50     	; 0xb2b4 <scale32+0x3a>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    b282:	6c 39       	cpi	r22, 0x9C	; 156
    b284:	8f ef       	ldi	r24, 0xFF	; 255
    b286:	78 07       	cpc	r23, r24
    b288:	29 f4       	brne	.+10     	; 0xb294 <scale32+0x1a>
	{
		return -value16;	
    b28a:	88 27       	eor	r24, r24
    b28c:	99 27       	eor	r25, r25
    b28e:	82 1b       	sub	r24, r18
    b290:	93 0b       	sbc	r25, r19
    b292:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    b294:	61 15       	cp	r22, r1
    b296:	71 05       	cpc	r23, r1
    b298:	79 f0       	breq	.+30     	; 0xb2b8 <scale32+0x3e>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    b29a:	db 01       	movw	r26, r22
    b29c:	0e 94 65 6f 	call	0xdeca	; 0xdeca <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    b2a0:	6e 5c       	subi	r22, 0xCE	; 206
    b2a2:	7f 4f       	sbci	r23, 0xFF	; 255
    b2a4:	8f 4f       	sbci	r24, 0xFF	; 255
    b2a6:	9f 4f       	sbci	r25, 0xFF	; 255
    b2a8:	24 e6       	ldi	r18, 0x64	; 100
    b2aa:	30 e0       	ldi	r19, 0x00	; 0
    b2ac:	40 e0       	ldi	r20, 0x00	; 0
    b2ae:	50 e0       	ldi	r21, 0x00	; 0
    b2b0:	0e 94 40 6f 	call	0xde80	; 0xde80 <__divmodsi4>
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    b2b4:	c9 01       	movw	r24, r18
    b2b6:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    b2b8:	80 e0       	ldi	r24, 0x00	; 0
    b2ba:	90 e0       	ldi	r25, 0x00	; 0
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    b2bc:	08 95       	ret

0000b2be <scale_percent>:
{
	int16_t temp16;
	float tempf;

	// 100% = 2500 to 5000
	tempf = (float)value; // Promote
    b2be:	68 2f       	mov	r22, r24
    b2c0:	88 0f       	add	r24, r24
    b2c2:	77 0b       	sbc	r23, r23
    b2c4:	88 0b       	sbc	r24, r24
    b2c6:	99 0b       	sbc	r25, r25
    b2c8:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
	temp16 = (int16_t)((tempf * 12.5f) + 3750.0f);
    b2cc:	20 e0       	ldi	r18, 0x00	; 0
    b2ce:	30 e0       	ldi	r19, 0x00	; 0
    b2d0:	48 e4       	ldi	r20, 0x48	; 72
    b2d2:	51 e4       	ldi	r21, 0x41	; 65
    b2d4:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    b2d8:	20 e0       	ldi	r18, 0x00	; 0
    b2da:	30 e6       	ldi	r19, 0x60	; 96
    b2dc:	4a e6       	ldi	r20, 0x6A	; 106
    b2de:	55 e4       	ldi	r21, 0x45	; 69
    b2e0:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    b2e4:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>

	return temp16;
}
    b2e8:	cb 01       	movw	r24, r22
    b2ea:	08 95       	ret

0000b2ec <Process_curve>:
// Process curves. Maximum input values are +/-1000 for Bipolar curves and 0-2000 for monopolar curves.
// Curve number > NUMBEROFCURVES are the offset curves.
// Seven points 0, 17%, 33%, 50%, 67%, 83%, 100%	(Monopolar)
// Seven points -100, 67%, -33%, 0%, 33%, 67%, 100% (Bipolar)
int16_t Process_curve(uint8_t curve, uint8_t type, int16_t input_value)
{
    b2ec:	af 92       	push	r10
    b2ee:	bf 92       	push	r11
    b2f0:	cf 92       	push	r12
    b2f2:	df 92       	push	r13
    b2f4:	ef 92       	push	r14
    b2f6:	ff 92       	push	r15
    b2f8:	0f 93       	push	r16
    b2fa:	1f 93       	push	r17
    b2fc:	cf 93       	push	r28
    b2fe:	df 93       	push	r29
    b300:	26 2f       	mov	r18, r22
    b302:	ea 01       	movw	r28, r20
	int16_t end_pos = 0;
	int32_t temp1 = 0;
	int32_t temp2 = 0;
	int32_t	Step1 = 0;

	if (type == BIPOLAR)
    b304:	61 30       	cpi	r22, 0x01	; 1
    b306:	71 f4       	brne	.+28     	; 0xb324 <Process_curve+0x38>
	{
		// Limit input value to +/-100% (+/-1000)
		if (input_value < -1000)
    b308:	48 31       	cpi	r20, 0x18	; 24
    b30a:	3c ef       	ldi	r19, 0xFC	; 252
    b30c:	53 07       	cpc	r21, r19
    b30e:	f4 f1       	brlt	.+124    	; 0xb38c <Process_curve+0xa0>
		{
			input_value = -1000;
		}
		if (input_value > 1000)
    b310:	49 3e       	cpi	r20, 0xE9	; 233
    b312:	93 e0       	ldi	r25, 0x03	; 3
    b314:	59 07       	cpc	r21, r25
    b316:	0c f0       	brlt	.+2      	; 0xb31a <Process_curve+0x2e>
    b318:	69 c1       	rjmp	.+722    	; 0xb5ec <Process_curve+0x300>
	}

	if (type == BIPOLAR)
	{
		// Work out which zone we are in
		if (input_value < -667)
    b31a:	45 36       	cpi	r20, 0x65	; 101
    b31c:	3d ef       	ldi	r19, 0xFD	; 253
    b31e:	53 07       	cpc	r21, r19
    b320:	6c f4       	brge	.+26     	; 0xb33c <Process_curve+0x50>
    b322:	36 c0       	rjmp	.+108    	; 0xb390 <Process_curve+0xa4>
		}
	}
	else // Monopolar
	{
		// Limit input value to 0 to 100% (0 to 2000)
		if (input_value < 0)
    b324:	57 fd       	sbrc	r21, 7
    b326:	37 c0       	rjmp	.+110    	; 0xb396 <Process_curve+0xaa>
		{
			input_value = 0;
		}
		if (input_value > 2000)
    b328:	41 3d       	cpi	r20, 0xD1	; 209
    b32a:	97 e0       	ldi	r25, 0x07	; 7
    b32c:	59 07       	cpc	r21, r25
    b32e:	0c f0       	brlt	.+2      	; 0xb332 <Process_curve+0x46>
    b330:	60 c1       	rjmp	.+704    	; 0xb5f2 <Process_curve+0x306>
		}
	}
	else // Monopolar
	{
		// Work out which zone we are in
		if (input_value < 333)
    b332:	4d 34       	cpi	r20, 0x4D	; 77
    b334:	31 e0       	ldi	r19, 0x01	; 1
    b336:	53 07       	cpc	r21, r19
    b338:	9c f4       	brge	.+38     	; 0xb360 <Process_curve+0x74>
    b33a:	2f c0       	rjmp	.+94     	; 0xb39a <Process_curve+0xae>
		if (input_value < -667)
		{
			zone = 0;
			bracket = -1000;			
		}
		else if (input_value < -333)
    b33c:	43 3b       	cpi	r20, 0xB3	; 179
    b33e:	9e ef       	ldi	r25, 0xFE	; 254
    b340:	59 07       	cpc	r21, r25
    b342:	d4 f1       	brlt	.+116    	; 0xb3b8 <Process_curve+0xcc>
		{
			zone = 1;
			bracket = -667;
		}
		else if (input_value < 0)
    b344:	57 fd       	sbrc	r21, 7
    b346:	2c c1       	rjmp	.+600    	; 0xb5a0 <Process_curve+0x2b4>
		{
			zone = 2;
			bracket = -333;
		}	
		else if (input_value > 667)
    b348:	4c 39       	cpi	r20, 0x9C	; 156
    b34a:	32 e0       	ldi	r19, 0x02	; 2
    b34c:	53 07       	cpc	r21, r19
    b34e:	0c f0       	brlt	.+2      	; 0xb352 <Process_curve+0x66>
    b350:	53 c1       	rjmp	.+678    	; 0xb5f8 <Process_curve+0x30c>
		{
			zone = 5;
			bracket = 667;
		}		
		else if (input_value > 333)
    b352:	4e 34       	cpi	r20, 0x4E	; 78
    b354:	51 40       	sbci	r21, 0x01	; 1
    b356:	0c f0       	brlt	.+2      	; 0xb35a <Process_curve+0x6e>
    b358:	40 c0       	rjmp	.+128    	; 0xb3da <Process_curve+0xee>
			bracket = 333;
		}
		else if (input_value >= 0)
		{
			zone = 3;
			bracket = 0;
    b35a:	00 e0       	ldi	r16, 0x00	; 0
    b35c:	10 e0       	ldi	r17, 0x00	; 0
    b35e:	33 c1       	rjmp	.+614    	; 0xb5c6 <Process_curve+0x2da>
		if (input_value < 333)
		{
			zone = 0;
			bracket = 0;
		}
		else if (input_value < 667)
    b360:	4b 39       	cpi	r20, 0x9B	; 155
    b362:	32 e0       	ldi	r19, 0x02	; 2
    b364:	53 07       	cpc	r21, r19
    b366:	0c f4       	brge	.+2      	; 0xb36a <Process_curve+0x7e>
    b368:	16 c1       	rjmp	.+556    	; 0xb596 <Process_curve+0x2aa>
		{
			zone = 1;
			bracket = 333;
		}
		else if (input_value < 1000)
    b36a:	48 3e       	cpi	r20, 0xE8	; 232
    b36c:	93 e0       	ldi	r25, 0x03	; 3
    b36e:	59 07       	cpc	r21, r25
    b370:	0c f4       	brge	.+2      	; 0xb374 <Process_curve+0x88>
    b372:	19 c1       	rjmp	.+562    	; 0xb5a6 <Process_curve+0x2ba>
		{
			zone = 2;
			bracket = 667;
		}
		else if (input_value > 1667)
    b374:	44 38       	cpi	r20, 0x84	; 132
    b376:	36 e0       	ldi	r19, 0x06	; 6
    b378:	53 07       	cpc	r21, r19
    b37a:	0c f0       	brlt	.+2      	; 0xb37e <Process_curve+0x92>
    b37c:	40 c1       	rjmp	.+640    	; 0xb5fe <Process_curve+0x312>
		{
			zone = 5;
			bracket = 1667;
		}
		else if (input_value > 1333)
    b37e:	46 33       	cpi	r20, 0x36	; 54
    b380:	55 40       	sbci	r21, 0x05	; 5
    b382:	0c f0       	brlt	.+2      	; 0xb386 <Process_curve+0x9a>
    b384:	2e c1       	rjmp	.+604    	; 0xb5e2 <Process_curve+0x2f6>
			bracket = 1333;
		}
		else if (input_value >= 1000)
		{
			zone = 3;
			bracket = 1000;
    b386:	08 ee       	ldi	r16, 0xE8	; 232
    b388:	13 e0       	ldi	r17, 0x03	; 3
    b38a:	1d c1       	rjmp	.+570    	; 0xb5c6 <Process_curve+0x2da>
	if (type == BIPOLAR)
	{
		// Limit input value to +/-100% (+/-1000)
		if (input_value < -1000)
		{
			input_value = -1000;
    b38c:	c8 e1       	ldi	r28, 0x18	; 24
    b38e:	dc ef       	ldi	r29, 0xFC	; 252
	{
		// Work out which zone we are in
		if (input_value < -667)
		{
			zone = 0;
			bracket = -1000;			
    b390:	08 e1       	ldi	r16, 0x18	; 24
    b392:	1c ef       	ldi	r17, 0xFC	; 252
    b394:	04 c0       	rjmp	.+8      	; 0xb39e <Process_curve+0xb2>
	else // Monopolar
	{
		// Limit input value to 0 to 100% (0 to 2000)
		if (input_value < 0)
		{
			input_value = 0;
    b396:	c0 e0       	ldi	r28, 0x00	; 0
    b398:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// Work out which zone we are in
		if (input_value < 333)
		{
			zone = 0;
			bracket = 0;
    b39a:	00 e0       	ldi	r16, 0x00	; 0
    b39c:	10 e0       	ldi	r17, 0x00	; 0
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b39e:	86 30       	cpi	r24, 0x06	; 6
    b3a0:	08 f0       	brcs	.+2      	; 0xb3a4 <Process_curve+0xb8>
    b3a2:	9a c0       	rjmp	.+308    	; 0xb4d8 <Process_curve+0x1ec>
	{
		switch(zone)
		{
			case 0:
				start = Config.Curve[curve].Point1;
    b3a4:	38 e0       	ldi	r19, 0x08	; 8
    b3a6:	83 9f       	mul	r24, r19
    b3a8:	c0 01       	movw	r24, r0
    b3aa:	11 24       	eor	r1, r1
    b3ac:	87 5c       	subi	r24, 0xC7	; 199
    b3ae:	99 4f       	sbci	r25, 0xF9	; 249
    b3b0:	fc 01       	movw	r30, r24
    b3b2:	e5 5d       	subi	r30, 0xD5	; 213
    b3b4:	fd 4f       	sbci	r31, 0xFD	; 253
    b3b6:	0e c0       	rjmp	.+28     	; 0xb3d4 <Process_curve+0xe8>
			bracket = -1000;			
		}
		else if (input_value < -333)
		{
			zone = 1;
			bracket = -667;
    b3b8:	05 e6       	ldi	r16, 0x65	; 101
    b3ba:	1d ef       	ldi	r17, 0xFD	; 253
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b3bc:	86 30       	cpi	r24, 0x06	; 6
    b3be:	08 f0       	brcs	.+2      	; 0xb3c2 <Process_curve+0xd6>
    b3c0:	ed c0       	rjmp	.+474    	; 0xb59c <Process_curve+0x2b0>
			case 0:
				start = Config.Curve[curve].Point1;
				end = Config.Curve[curve].Point2;
				break;
			case 1:	
				start = Config.Curve[curve].Point2;
    b3c2:	38 e0       	ldi	r19, 0x08	; 8
    b3c4:	83 9f       	mul	r24, r19
    b3c6:	c0 01       	movw	r24, r0
    b3c8:	11 24       	eor	r1, r1
    b3ca:	87 5c       	subi	r24, 0xC7	; 199
    b3cc:	99 4f       	sbci	r25, 0xF9	; 249
    b3ce:	fc 01       	movw	r30, r24
    b3d0:	e4 5d       	subi	r30, 0xD4	; 212
    b3d2:	fd 4f       	sbci	r31, 0xFD	; 253
    b3d4:	60 81       	ld	r22, Z
				end = Config.Curve[curve].Point3;
    b3d6:	31 96       	adiw	r30, 0x01	; 1
    b3d8:	17 c0       	rjmp	.+46     	; 0xb408 <Process_curve+0x11c>
			bracket = 667;
		}		
		else if (input_value > 333)
		{
			zone = 4;
			bracket = 333;
    b3da:	0d e4       	ldi	r16, 0x4D	; 77
    b3dc:	11 e0       	ldi	r17, 0x01	; 1
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b3de:	86 30       	cpi	r24, 0x06	; 6
    b3e0:	08 f0       	brcs	.+2      	; 0xb3e4 <Process_curve+0xf8>
    b3e2:	02 c1       	rjmp	.+516    	; 0xb5e8 <Process_curve+0x2fc>
			case 3:
				start = Config.Curve[curve].Point4;
				end = Config.Curve[curve].Point5;
				break;
			case 4:
				start = Config.Curve[curve].Point5;
    b3e4:	90 e0       	ldi	r25, 0x00	; 0
    b3e6:	fc 01       	movw	r30, r24
    b3e8:	a3 e0       	ldi	r26, 0x03	; 3
    b3ea:	ee 0f       	add	r30, r30
    b3ec:	ff 1f       	adc	r31, r31
    b3ee:	aa 95       	dec	r26
    b3f0:	e1 f7       	brne	.-8      	; 0xb3ea <Process_curve+0xfe>
    b3f2:	e8 59       	subi	r30, 0x98	; 152
    b3f4:	f7 4f       	sbci	r31, 0xF7	; 247
    b3f6:	60 81       	ld	r22, Z
				end = Config.Curve[curve].Point6;
    b3f8:	b3 e0       	ldi	r27, 0x03	; 3
    b3fa:	88 0f       	add	r24, r24
    b3fc:	99 1f       	adc	r25, r25
    b3fe:	ba 95       	dec	r27
    b400:	e1 f7       	brne	.-8      	; 0xb3fa <Process_curve+0x10e>
    b402:	fc 01       	movw	r30, r24
    b404:	e7 59       	subi	r30, 0x97	; 151
    b406:	f7 4f       	sbci	r31, 0xF7	; 247
				start = Config.Offsets[curve].Point5;
				end = Config.Offsets[curve].Point6;
				break;
			case 5:
				start = Config.Offsets[curve].Point6;
				end = Config.Offsets[curve].Point7;
    b408:	c0 80       	ld	r12, Z
    b40a:	06 2e       	mov	r0, r22
    b40c:	00 0c       	add	r0, r0
    b40e:	77 0b       	sbc	r23, r23
    b410:	88 0b       	sbc	r24, r24
    b412:	99 0b       	sbc	r25, r25
    b414:	0c 2c       	mov	r0, r12
    b416:	00 0c       	add	r0, r0
    b418:	dd 08       	sbc	r13, r13
    b41a:	ee 08       	sbc	r14, r14
    b41c:	ff 08       	sbc	r15, r15
		}		
	}
	
	// Work out distance to cover
	// Convert percentages to positions
	if (type == BIPOLAR)
    b41e:	21 30       	cpi	r18, 0x01	; 1
    b420:	a1 f4       	brne	.+40     	; 0xb44a <Process_curve+0x15e>
int16_t scale_throttle_curve_percent_bipolar(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    b422:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
	temp16 = (int16_t)(tempf * 10.0f);
    b426:	20 e0       	ldi	r18, 0x00	; 0
    b428:	30 e0       	ldi	r19, 0x00	; 0
    b42a:	40 e2       	ldi	r20, 0x20	; 32
    b42c:	51 e4       	ldi	r21, 0x41	; 65
    b42e:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    b432:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    b436:	5b 01       	movw	r10, r22
int16_t scale_throttle_curve_percent_bipolar(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    b438:	c7 01       	movw	r24, r14
    b43a:	b6 01       	movw	r22, r12
    b43c:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
	temp16 = (int16_t)(tempf * 10.0f);
    b440:	20 e0       	ldi	r18, 0x00	; 0
    b442:	30 e0       	ldi	r19, 0x00	; 0
    b444:	40 e2       	ldi	r20, 0x20	; 32
    b446:	51 e4       	ldi	r21, 0x41	; 65
    b448:	13 c0       	rjmp	.+38     	; 0xb470 <Process_curve+0x184>
int16_t scale_throttle_curve_percent_mono(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    b44a:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
	temp16 = (int16_t)(tempf * 20.0f);
    b44e:	20 e0       	ldi	r18, 0x00	; 0
    b450:	30 e0       	ldi	r19, 0x00	; 0
    b452:	40 ea       	ldi	r20, 0xA0	; 160
    b454:	51 e4       	ldi	r21, 0x41	; 65
    b456:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    b45a:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    b45e:	5b 01       	movw	r10, r22
int16_t scale_throttle_curve_percent_mono(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    b460:	c7 01       	movw	r24, r14
    b462:	b6 01       	movw	r22, r12
    b464:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
	temp16 = (int16_t)(tempf * 20.0f);
    b468:	20 e0       	ldi	r18, 0x00	; 0
    b46a:	30 e0       	ldi	r19, 0x00	; 0
    b46c:	40 ea       	ldi	r20, 0xA0	; 160
    b46e:	51 e4       	ldi	r21, 0x41	; 65
    b470:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    b474:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
		start_pos = scale_throttle_curve_percent_mono(start);
		end_pos = scale_throttle_curve_percent_mono(end);
	}

	// Upscale span for best resolution (x 65536)
	temp1 = (int32_t)(end_pos - start_pos);
    b478:	6a 19       	sub	r22, r10
    b47a:	7b 09       	sbc	r23, r11
    b47c:	cb 01       	movw	r24, r22
    b47e:	77 0f       	add	r23, r23
    b480:	aa 0b       	sbc	r26, r26
    b482:	bb 0b       	sbc	r27, r27
	temp1 = temp1 << 16;

	// Divide distance into steps that cover the interval
	Step1 = (int32_t)(temp1 / (int32_t)334) ;

	temp2 = start_pos;
    b484:	a5 01       	movw	r20, r10
    b486:	bb 0c       	add	r11, r11
    b488:	66 0b       	sbc	r22, r22
    b48a:	77 0b       	sbc	r23, r23
	temp2 = temp2 << 16;
    b48c:	7a 01       	movw	r14, r20
    b48e:	dd 24       	eor	r13, r13
    b490:	cc 24       	eor	r12, r12
	temp2 += ((input_value - bracket) * Step1);
    b492:	c0 1b       	sub	r28, r16
    b494:	d1 0b       	sbc	r29, r17
		end_pos = scale_throttle_curve_percent_mono(end);
	}

	// Upscale span for best resolution (x 65536)
	temp1 = (int32_t)(end_pos - start_pos);
	temp1 = temp1 << 16;
    b496:	77 27       	eor	r23, r23
    b498:	66 27       	eor	r22, r22

	// Divide distance into steps that cover the interval
	Step1 = (int32_t)(temp1 / (int32_t)334) ;
    b49a:	2e e4       	ldi	r18, 0x4E	; 78
    b49c:	31 e0       	ldi	r19, 0x01	; 1
    b49e:	40 e0       	ldi	r20, 0x00	; 0
    b4a0:	50 e0       	ldi	r21, 0x00	; 0
    b4a2:	0e 94 40 6f 	call	0xde80	; 0xde80 <__divmodsi4>

	temp2 = start_pos;
	temp2 = temp2 << 16;
	temp2 += ((input_value - bracket) * Step1);
    b4a6:	de 01       	movw	r26, r28
    b4a8:	0e 94 8e 6f 	call	0xdf1c	; 0xdf1c <__mulshisi3>
    b4ac:	dc 01       	movw	r26, r24
    b4ae:	cb 01       	movw	r24, r22
    b4b0:	8c 0d       	add	r24, r12
    b4b2:	9d 1d       	adc	r25, r13
    b4b4:	ae 1d       	adc	r26, r14
    b4b6:	bf 1d       	adc	r27, r15

	// Reformat into a system-compatible value
	// Divide by 65536
	output_value = (int16_t)(temp2 >> 16);
    b4b8:	cd 01       	movw	r24, r26
    b4ba:	bb 27       	eor	r27, r27
    b4bc:	97 fd       	sbrc	r25, 7
    b4be:	b0 95       	com	r27
    b4c0:	ab 2f       	mov	r26, r27

	return output_value;
}
    b4c2:	df 91       	pop	r29
    b4c4:	cf 91       	pop	r28
    b4c6:	1f 91       	pop	r17
    b4c8:	0f 91       	pop	r16
    b4ca:	ff 90       	pop	r15
    b4cc:	ef 90       	pop	r14
    b4ce:	df 90       	pop	r13
    b4d0:	cf 90       	pop	r12
    b4d2:	bf 90       	pop	r11
    b4d4:	af 90       	pop	r10
    b4d6:	08 95       	ret
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b4d8:	30 e0       	ldi	r19, 0x00	; 0
	}
	// Offsets
	else
	{
		// Correct curve number
		curve = curve - NUMBEROFCURVES;
    b4da:	86 50       	subi	r24, 0x06	; 6
    b4dc:	90 e0       	ldi	r25, 0x00	; 0

		switch(zone)
    b4de:	33 30       	cpi	r19, 0x03	; 3
    b4e0:	59 f1       	breq	.+86     	; 0xb538 <Process_curve+0x24c>
    b4e2:	2c f4       	brge	.+10     	; 0xb4ee <Process_curve+0x202>
    b4e4:	31 30       	cpi	r19, 0x01	; 1
    b4e6:	91 f0       	breq	.+36     	; 0xb50c <Process_curve+0x220>
    b4e8:	32 30       	cpi	r19, 0x02	; 2
    b4ea:	d9 f0       	breq	.+54     	; 0xb522 <Process_curve+0x236>
    b4ec:	04 c0       	rjmp	.+8      	; 0xb4f6 <Process_curve+0x20a>
    b4ee:	34 30       	cpi	r19, 0x04	; 4
    b4f0:	71 f1       	breq	.+92     	; 0xb54e <Process_curve+0x262>
    b4f2:	35 30       	cpi	r19, 0x05	; 5
    b4f4:	f1 f1       	breq	.+124    	; 0xb572 <Process_curve+0x286>
		{
			case 0:
				start = Config.Offsets[curve].Point1;
    b4f6:	63 e0       	ldi	r22, 0x03	; 3
    b4f8:	88 0f       	add	r24, r24
    b4fa:	99 1f       	adc	r25, r25
    b4fc:	6a 95       	dec	r22
    b4fe:	e1 f7       	brne	.-8      	; 0xb4f8 <Process_curve+0x20c>
    b500:	87 5c       	subi	r24, 0xC7	; 199
    b502:	99 4f       	sbci	r25, 0xF9	; 249
    b504:	fc 01       	movw	r30, r24
    b506:	ed 59       	subi	r30, 0x9D	; 157
    b508:	fd 4f       	sbci	r31, 0xFD	; 253
    b50a:	64 cf       	rjmp	.-312    	; 0xb3d4 <Process_curve+0xe8>
				end = Config.Offsets[curve].Point2;
				break;
			case 1:
				start = Config.Offsets[curve].Point2;
    b50c:	53 e0       	ldi	r21, 0x03	; 3
    b50e:	88 0f       	add	r24, r24
    b510:	99 1f       	adc	r25, r25
    b512:	5a 95       	dec	r21
    b514:	e1 f7       	brne	.-8      	; 0xb50e <Process_curve+0x222>
    b516:	87 5c       	subi	r24, 0xC7	; 199
    b518:	99 4f       	sbci	r25, 0xF9	; 249
    b51a:	fc 01       	movw	r30, r24
    b51c:	ec 59       	subi	r30, 0x9C	; 156
    b51e:	fd 4f       	sbci	r31, 0xFD	; 253
    b520:	59 cf       	rjmp	.-334    	; 0xb3d4 <Process_curve+0xe8>
				end = Config.Offsets[curve].Point3;
				break;
			case 2:
				start = Config.Offsets[curve].Point3;
    b522:	43 e0       	ldi	r20, 0x03	; 3
    b524:	88 0f       	add	r24, r24
    b526:	99 1f       	adc	r25, r25
    b528:	4a 95       	dec	r20
    b52a:	e1 f7       	brne	.-8      	; 0xb524 <Process_curve+0x238>
    b52c:	87 5c       	subi	r24, 0xC7	; 199
    b52e:	99 4f       	sbci	r25, 0xF9	; 249
    b530:	fc 01       	movw	r30, r24
    b532:	eb 59       	subi	r30, 0x9B	; 155
    b534:	fd 4f       	sbci	r31, 0xFD	; 253
    b536:	4e cf       	rjmp	.-356    	; 0xb3d4 <Process_curve+0xe8>
				end = Config.Offsets[curve].Point4;
				break;
			case 3:
				start = Config.Offsets[curve].Point4;
    b538:	33 e0       	ldi	r19, 0x03	; 3
    b53a:	88 0f       	add	r24, r24
    b53c:	99 1f       	adc	r25, r25
    b53e:	3a 95       	dec	r19
    b540:	e1 f7       	brne	.-8      	; 0xb53a <Process_curve+0x24e>
    b542:	87 5c       	subi	r24, 0xC7	; 199
    b544:	99 4f       	sbci	r25, 0xF9	; 249
    b546:	fc 01       	movw	r30, r24
    b548:	ea 59       	subi	r30, 0x9A	; 154
    b54a:	fd 4f       	sbci	r31, 0xFD	; 253
    b54c:	43 cf       	rjmp	.-378    	; 0xb3d4 <Process_curve+0xe8>
				end = Config.Offsets[curve].Point5;
				break;
			case 4:
				start = Config.Offsets[curve].Point5;
    b54e:	fc 01       	movw	r30, r24
    b550:	a3 e0       	ldi	r26, 0x03	; 3
    b552:	ee 0f       	add	r30, r30
    b554:	ff 1f       	adc	r31, r31
    b556:	aa 95       	dec	r26
    b558:	e1 f7       	brne	.-8      	; 0xb552 <Process_curve+0x266>
    b55a:	e0 56       	subi	r30, 0x60	; 96
    b55c:	f7 4f       	sbci	r31, 0xF7	; 247
    b55e:	60 81       	ld	r22, Z
				end = Config.Offsets[curve].Point6;
    b560:	b3 e0       	ldi	r27, 0x03	; 3
    b562:	88 0f       	add	r24, r24
    b564:	99 1f       	adc	r25, r25
    b566:	ba 95       	dec	r27
    b568:	e1 f7       	brne	.-8      	; 0xb562 <Process_curve+0x276>
    b56a:	fc 01       	movw	r30, r24
    b56c:	ef 55       	subi	r30, 0x5F	; 95
    b56e:	f7 4f       	sbci	r31, 0xF7	; 247
    b570:	4b cf       	rjmp	.-362    	; 0xb408 <Process_curve+0x11c>
				break;
			case 5:
				start = Config.Offsets[curve].Point6;
    b572:	fc 01       	movw	r30, r24
    b574:	53 e0       	ldi	r21, 0x03	; 3
    b576:	ee 0f       	add	r30, r30
    b578:	ff 1f       	adc	r31, r31
    b57a:	5a 95       	dec	r21
    b57c:	e1 f7       	brne	.-8      	; 0xb576 <Process_curve+0x28a>
    b57e:	ef 55       	subi	r30, 0x5F	; 95
    b580:	f7 4f       	sbci	r31, 0xF7	; 247
    b582:	60 81       	ld	r22, Z
				end = Config.Offsets[curve].Point7;
    b584:	73 e0       	ldi	r23, 0x03	; 3
    b586:	88 0f       	add	r24, r24
    b588:	99 1f       	adc	r25, r25
    b58a:	7a 95       	dec	r23
    b58c:	e1 f7       	brne	.-8      	; 0xb586 <Process_curve+0x29a>
    b58e:	fc 01       	movw	r30, r24
    b590:	ee 55       	subi	r30, 0x5E	; 94
    b592:	f7 4f       	sbci	r31, 0xF7	; 247
    b594:	39 cf       	rjmp	.-398    	; 0xb408 <Process_curve+0x11c>
			bracket = 0;
		}
		else if (input_value < 667)
		{
			zone = 1;
			bracket = 333;
    b596:	0d e4       	ldi	r16, 0x4D	; 77
    b598:	11 e0       	ldi	r17, 0x01	; 1
    b59a:	10 cf       	rjmp	.-480    	; 0xb3bc <Process_curve+0xd0>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b59c:	31 e0       	ldi	r19, 0x01	; 1
    b59e:	9d cf       	rjmp	.-198    	; 0xb4da <Process_curve+0x1ee>
			bracket = -667;
		}
		else if (input_value < 0)
		{
			zone = 2;
			bracket = -333;
    b5a0:	03 eb       	ldi	r16, 0xB3	; 179
    b5a2:	1e ef       	ldi	r17, 0xFE	; 254
    b5a4:	02 c0       	rjmp	.+4      	; 0xb5aa <Process_curve+0x2be>
			bracket = 333;
		}
		else if (input_value < 1000)
		{
			zone = 2;
			bracket = 667;
    b5a6:	0b e9       	ldi	r16, 0x9B	; 155
    b5a8:	12 e0       	ldi	r17, 0x02	; 2
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b5aa:	86 30       	cpi	r24, 0x06	; 6
    b5ac:	50 f4       	brcc	.+20     	; 0xb5c2 <Process_curve+0x2d6>
			case 1:	
				start = Config.Curve[curve].Point2;
				end = Config.Curve[curve].Point3;
				break;
			case 2:
				start = Config.Curve[curve].Point3;
    b5ae:	38 e0       	ldi	r19, 0x08	; 8
    b5b0:	83 9f       	mul	r24, r19
    b5b2:	c0 01       	movw	r24, r0
    b5b4:	11 24       	eor	r1, r1
    b5b6:	87 5c       	subi	r24, 0xC7	; 199
    b5b8:	99 4f       	sbci	r25, 0xF9	; 249
    b5ba:	fc 01       	movw	r30, r24
    b5bc:	e3 5d       	subi	r30, 0xD3	; 211
    b5be:	fd 4f       	sbci	r31, 0xFD	; 253
    b5c0:	09 cf       	rjmp	.-494    	; 0xb3d4 <Process_curve+0xe8>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b5c2:	32 e0       	ldi	r19, 0x02	; 2
    b5c4:	8a cf       	rjmp	.-236    	; 0xb4da <Process_curve+0x1ee>
    b5c6:	86 30       	cpi	r24, 0x06	; 6
    b5c8:	50 f4       	brcc	.+20     	; 0xb5de <Process_curve+0x2f2>
			case 2:
				start = Config.Curve[curve].Point3;
				end = Config.Curve[curve].Point4;
				break;
			case 3:
				start = Config.Curve[curve].Point4;
    b5ca:	38 e0       	ldi	r19, 0x08	; 8
    b5cc:	83 9f       	mul	r24, r19
    b5ce:	c0 01       	movw	r24, r0
    b5d0:	11 24       	eor	r1, r1
    b5d2:	87 5c       	subi	r24, 0xC7	; 199
    b5d4:	99 4f       	sbci	r25, 0xF9	; 249
    b5d6:	fc 01       	movw	r30, r24
    b5d8:	e2 5d       	subi	r30, 0xD2	; 210
    b5da:	fd 4f       	sbci	r31, 0xFD	; 253
    b5dc:	fb ce       	rjmp	.-522    	; 0xb3d4 <Process_curve+0xe8>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b5de:	33 e0       	ldi	r19, 0x03	; 3
    b5e0:	7c cf       	rjmp	.-264    	; 0xb4da <Process_curve+0x1ee>
			bracket = 1667;
		}
		else if (input_value > 1333)
		{
			zone = 4;
			bracket = 1333;
    b5e2:	05 e3       	ldi	r16, 0x35	; 53
    b5e4:	15 e0       	ldi	r17, 0x05	; 5
    b5e6:	fb ce       	rjmp	.-522    	; 0xb3de <Process_curve+0xf2>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b5e8:	34 e0       	ldi	r19, 0x04	; 4
    b5ea:	77 cf       	rjmp	.-274    	; 0xb4da <Process_curve+0x1ee>
		{
			input_value = -1000;
		}
		if (input_value > 1000)
		{
			input_value = 1000;
    b5ec:	c8 ee       	ldi	r28, 0xE8	; 232
    b5ee:	d3 e0       	ldi	r29, 0x03	; 3
    b5f0:	03 c0       	rjmp	.+6      	; 0xb5f8 <Process_curve+0x30c>
		{
			input_value = 0;
		}
		if (input_value > 2000)
		{
			input_value = 2000;
    b5f2:	c0 ed       	ldi	r28, 0xD0	; 208
    b5f4:	d7 e0       	ldi	r29, 0x07	; 7
    b5f6:	03 c0       	rjmp	.+6      	; 0xb5fe <Process_curve+0x312>
			bracket = -333;
		}	
		else if (input_value > 667)
		{
			zone = 5;
			bracket = 667;
    b5f8:	0b e9       	ldi	r16, 0x9B	; 155
    b5fa:	12 e0       	ldi	r17, 0x02	; 2
    b5fc:	02 c0       	rjmp	.+4      	; 0xb602 <Process_curve+0x316>
			bracket = 667;
		}
		else if (input_value > 1667)
		{
			zone = 5;
			bracket = 1667;
    b5fe:	03 e8       	ldi	r16, 0x83	; 131
    b600:	16 e0       	ldi	r17, 0x06	; 6
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b602:	86 30       	cpi	r24, 0x06	; 6
    b604:	98 f4       	brcc	.+38     	; 0xb62c <Process_curve+0x340>
			case 4:
				start = Config.Curve[curve].Point5;
				end = Config.Curve[curve].Point6;
				break;
			case 5:
				start = Config.Curve[curve].Point6;
    b606:	90 e0       	ldi	r25, 0x00	; 0
    b608:	fc 01       	movw	r30, r24
    b60a:	73 e0       	ldi	r23, 0x03	; 3
    b60c:	ee 0f       	add	r30, r30
    b60e:	ff 1f       	adc	r31, r31
    b610:	7a 95       	dec	r23
    b612:	e1 f7       	brne	.-8      	; 0xb60c <Process_curve+0x320>
    b614:	e7 59       	subi	r30, 0x97	; 151
    b616:	f7 4f       	sbci	r31, 0xF7	; 247
    b618:	60 81       	ld	r22, Z
				end = Config.Curve[curve].Point7;
    b61a:	e3 e0       	ldi	r30, 0x03	; 3
    b61c:	88 0f       	add	r24, r24
    b61e:	99 1f       	adc	r25, r25
    b620:	ea 95       	dec	r30
    b622:	e1 f7       	brne	.-8      	; 0xb61c <Process_curve+0x330>
    b624:	fc 01       	movw	r30, r24
    b626:	e6 59       	subi	r30, 0x96	; 150
    b628:	f7 4f       	sbci	r31, 0xF7	; 247
    b62a:	ee ce       	rjmp	.-548    	; 0xb408 <Process_curve+0x11c>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b62c:	35 e0       	ldi	r19, 0x05	; 5
    b62e:	55 cf       	rjmp	.-342    	; 0xb4da <Process_curve+0x1ee>

0000b630 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    b630:	2f 92       	push	r2
    b632:	3f 92       	push	r3
    b634:	4f 92       	push	r4
    b636:	5f 92       	push	r5
    b638:	6f 92       	push	r6
    b63a:	7f 92       	push	r7
    b63c:	8f 92       	push	r8
    b63e:	9f 92       	push	r9
    b640:	af 92       	push	r10
    b642:	bf 92       	push	r11
    b644:	cf 92       	push	r12
    b646:	df 92       	push	r13
    b648:	ef 92       	push	r14
    b64a:	ff 92       	push	r15
    b64c:	0f 93       	push	r16
    b64e:	1f 93       	push	r17
    b650:	cf 93       	push	r28
    b652:	df 93       	push	r29
    b654:	cd b7       	in	r28, 0x3d	; 61
    b656:	de b7       	in	r29, 0x3e	; 62
    b658:	c2 57       	subi	r28, 0x72	; 114
    b65a:	d1 09       	sbc	r29, r1
    b65c:	0f b6       	in	r0, 0x3f	; 63
    b65e:	f8 94       	cli
    b660:	de bf       	out	0x3e, r29	; 62
    b662:	0f be       	out	0x3f, r0	; 63
    b664:	cd bf       	out	0x3d, r28	; 61
	int8_t	P1_acc_roll_volume_source = 0;
	int8_t	P1_gyro_roll_volume_source = 0;
	int8_t	P1_gyro_yaw_volume_source = 0;

	// Process curves
	P1_throttle = Process_curve(P1_THR_CURVE, MONOPOLAR, MonopolarThrottle);
    b666:	40 91 81 09 	lds	r20, 0x0981
    b66a:	50 91 82 09 	lds	r21, 0x0982
    b66e:	60 e0       	ldi	r22, 0x00	; 0
    b670:	80 e0       	ldi	r24, 0x00	; 0
    b672:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <Process_curve>
    b676:	1c 01       	movw	r2, r24
	P2_throttle = Process_curve(P2_THR_CURVE, MONOPOLAR, MonopolarThrottle);
    b678:	40 91 81 09 	lds	r20, 0x0981
    b67c:	50 91 82 09 	lds	r21, 0x0982
    b680:	60 e0       	ldi	r22, 0x00	; 0
    b682:	81 e0       	ldi	r24, 0x01	; 1
    b684:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <Process_curve>
    b688:	7c 01       	movw	r14, r24
	P1_collective = Process_curve(P1_COLL_CURVE, BIPOLAR, RCinputs[THROTTLE]);
    b68a:	40 91 83 09 	lds	r20, 0x0983
    b68e:	50 91 84 09 	lds	r21, 0x0984
    b692:	61 e0       	ldi	r22, 0x01	; 1
    b694:	82 e0       	ldi	r24, 0x02	; 2
    b696:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <Process_curve>
    b69a:	5c 01       	movw	r10, r24
	P2_collective = Process_curve(P2_COLL_CURVE, BIPOLAR, RCinputs[THROTTLE]);
    b69c:	40 91 83 09 	lds	r20, 0x0983
    b6a0:	50 91 84 09 	lds	r21, 0x0984
    b6a4:	61 e0       	ldi	r22, 0x01	; 1
    b6a6:	83 e0       	ldi	r24, 0x03	; 3
    b6a8:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <Process_curve>
    b6ac:	6c 01       	movw	r12, r24

	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    b6ae:	60 91 21 06 	lds	r22, 0x0621
    b6b2:	70 91 22 06 	lds	r23, 0x0622
    b6b6:	80 91 23 06 	lds	r24, 0x0623
    b6ba:	90 91 24 06 	lds	r25, 0x0624
    b6be:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    b6c2:	8b 01       	movw	r16, r22
    b6c4:	63 e0       	ldi	r22, 0x03	; 3
    b6c6:	00 0f       	add	r16, r16
    b6c8:	11 1f       	adc	r17, r17
    b6ca:	6a 95       	dec	r22
    b6cc:	e1 f7       	brne	.-8      	; 0xb6c6 <ProcessMixer+0x96>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    b6ce:	60 91 25 06 	lds	r22, 0x0625
    b6d2:	70 91 26 06 	lds	r23, 0x0626
    b6d6:	80 91 27 06 	lds	r24, 0x0627
    b6da:	90 91 28 06 	lds	r25, 0x0628
    b6de:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    b6e2:	e3 e0       	ldi	r30, 0x03	; 3
    b6e4:	66 0f       	add	r22, r22
    b6e6:	77 1f       	adc	r23, r23
    b6e8:	ea 95       	dec	r30
    b6ea:	e1 f7       	brne	.-8      	; 0xb6e4 <ProcessMixer+0xb4>
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b6ec:	3c a6       	std	Y+44, r3	; 0x2c
    b6ee:	2b a6       	std	Y+43, r2	; 0x2b
    b6f0:	80 91 56 05 	lds	r24, 0x0556
    b6f4:	90 91 57 05 	lds	r25, 0x0557
    b6f8:	9e a7       	std	Y+46, r25	; 0x2e
    b6fa:	8d a7       	std	Y+45, r24	; 0x2d
    b6fc:	80 91 52 05 	lds	r24, 0x0552
    b700:	90 91 53 05 	lds	r25, 0x0553
    b704:	98 ab       	std	Y+48, r25	; 0x30
    b706:	8f a7       	std	Y+47, r24	; 0x2f
    b708:	ba aa       	std	Y+50, r11	; 0x32
    b70a:	a9 aa       	std	Y+49, r10	; 0x31
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b70c:	80 91 83 09 	lds	r24, 0x0983
    b710:	90 91 84 09 	lds	r25, 0x0984
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b714:	9c ab       	std	Y+52, r25	; 0x34
    b716:	8b ab       	std	Y+51, r24	; 0x33
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b718:	80 91 85 09 	lds	r24, 0x0985
    b71c:	90 91 86 09 	lds	r25, 0x0986
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b720:	9e ab       	std	Y+54, r25	; 0x36
    b722:	8d ab       	std	Y+53, r24	; 0x35
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b724:	80 91 87 09 	lds	r24, 0x0987
    b728:	90 91 88 09 	lds	r25, 0x0988
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b72c:	98 af       	std	Y+56, r25	; 0x38
    b72e:	8f ab       	std	Y+55, r24	; 0x37
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b730:	80 91 89 09 	lds	r24, 0x0989
    b734:	90 91 8a 09 	lds	r25, 0x098A
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b738:	9a af       	std	Y+58, r25	; 0x3a
    b73a:	89 af       	std	Y+57, r24	; 0x39
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b73c:	80 91 8b 09 	lds	r24, 0x098B
    b740:	90 91 8c 09 	lds	r25, 0x098C
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b744:	9c af       	std	Y+60, r25	; 0x3c
    b746:	8b af       	std	Y+59, r24	; 0x3b
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b748:	80 91 8d 09 	lds	r24, 0x098D
    b74c:	90 91 8e 09 	lds	r25, 0x098E
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b750:	9e af       	std	Y+62, r25	; 0x3e
    b752:	8d af       	std	Y+61, r24	; 0x3d
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b754:	80 91 8f 09 	lds	r24, 0x098F
    b758:	90 91 90 09 	lds	r25, 0x0990
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b75c:	21 96       	adiw	r28, 0x01	; 1
    b75e:	9f af       	std	Y+63, r25	; 0x3f
    b760:	8e af       	std	Y+62, r24	; 0x3e
    b762:	21 97       	sbiw	r28, 0x01	; 1
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b764:	80 91 91 09 	lds	r24, 0x0991
    b768:	90 91 92 09 	lds	r25, 0x0992
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b76c:	23 96       	adiw	r28, 0x03	; 3
    b76e:	9f af       	std	Y+63, r25	; 0x3f
    b770:	8e af       	std	Y+62, r24	; 0x3e
    b772:	23 97       	sbiw	r28, 0x03	; 3
    b774:	40 90 59 09 	lds	r4, 0x0959
    b778:	50 90 5a 09 	lds	r5, 0x095A
    b77c:	25 96       	adiw	r28, 0x05	; 5
    b77e:	5f ae       	std	Y+63, r5	; 0x3f
    b780:	4e ae       	std	Y+62, r4	; 0x3e
    b782:	25 97       	sbiw	r28, 0x05	; 5
    b784:	20 91 5b 09 	lds	r18, 0x095B
    b788:	30 91 5c 09 	lds	r19, 0x095C
    b78c:	69 96       	adiw	r28, 0x19	; 25
    b78e:	3f af       	std	Y+63, r19	; 0x3f
    b790:	2e af       	std	Y+62, r18	; 0x3e
    b792:	69 97       	sbiw	r28, 0x19	; 25
    b794:	27 96       	adiw	r28, 0x07	; 7
    b796:	3f af       	std	Y+63, r19	; 0x3f
    b798:	2e af       	std	Y+62, r18	; 0x3e
    b79a:	27 97       	sbiw	r28, 0x07	; 7
    b79c:	20 91 5d 09 	lds	r18, 0x095D
    b7a0:	30 91 5e 09 	lds	r19, 0x095E
    b7a4:	6b 96       	adiw	r28, 0x1b	; 27
    b7a6:	3f af       	std	Y+63, r19	; 0x3f
    b7a8:	2e af       	std	Y+62, r18	; 0x3e
    b7aa:	6b 97       	sbiw	r28, 0x1b	; 27
    b7ac:	29 96       	adiw	r28, 0x09	; 9
    b7ae:	3f af       	std	Y+63, r19	; 0x3f
    b7b0:	2e af       	std	Y+62, r18	; 0x3e
    b7b2:	29 97       	sbiw	r28, 0x09	; 9
    b7b4:	2b 96       	adiw	r28, 0x0b	; 11
    b7b6:	1f af       	std	Y+63, r17	; 0x3f
    b7b8:	0e af       	std	Y+62, r16	; 0x3e
    b7ba:	2b 97       	sbiw	r28, 0x0b	; 11
    b7bc:	2d 96       	adiw	r28, 0x0d	; 13
    b7be:	7f af       	std	Y+63, r23	; 0x3f
    b7c0:	6e af       	std	Y+62, r22	; 0x3e
    b7c2:	2d 97       	sbiw	r28, 0x0d	; 13
    b7c4:	80 91 65 09 	lds	r24, 0x0965
    b7c8:	90 91 66 09 	lds	r25, 0x0966
    b7cc:	2f 96       	adiw	r28, 0x0f	; 15
    b7ce:	9f af       	std	Y+63, r25	; 0x3f
    b7d0:	8e af       	std	Y+62, r24	; 0x3e
    b7d2:	2f 97       	sbiw	r28, 0x0f	; 15
    b7d4:	80 91 67 09 	lds	r24, 0x0967
    b7d8:	90 91 68 09 	lds	r25, 0x0968
    b7dc:	61 96       	adiw	r28, 0x11	; 17
    b7de:	9f af       	std	Y+63, r25	; 0x3f
    b7e0:	8e af       	std	Y+62, r24	; 0x3e
    b7e2:	61 97       	sbiw	r28, 0x11	; 17
    b7e4:	80 91 69 09 	lds	r24, 0x0969
    b7e8:	90 91 6a 09 	lds	r25, 0x096A
    b7ec:	63 96       	adiw	r28, 0x13	; 19
    b7ee:	9f af       	std	Y+63, r25	; 0x3f
    b7f0:	8e af       	std	Y+62, r24	; 0x3e
    b7f2:	63 97       	sbiw	r28, 0x13	; 19
    b7f4:	65 96       	adiw	r28, 0x15	; 21
    b7f6:	1f ae       	std	Y+63, r1	; 0x3f
    b7f8:	1e ae       	std	Y+62, r1	; 0x3e
    b7fa:	65 97       	sbiw	r28, 0x15	; 21
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b7fc:	fa 82       	std	Y+2, r15	; 0x02
    b7fe:	e9 82       	std	Y+1, r14	; 0x01
    b800:	80 91 54 05 	lds	r24, 0x0554
    b804:	90 91 55 05 	lds	r25, 0x0555
    b808:	9c 83       	std	Y+4, r25	; 0x04
    b80a:	8b 83       	std	Y+3, r24	; 0x03
    b80c:	80 91 50 05 	lds	r24, 0x0550
    b810:	90 91 51 05 	lds	r25, 0x0551
    b814:	9e 83       	std	Y+6, r25	; 0x06
    b816:	8d 83       	std	Y+5, r24	; 0x05
    b818:	d8 86       	std	Y+8, r13	; 0x08
    b81a:	cf 82       	std	Y+7, r12	; 0x07
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b81c:	80 91 83 09 	lds	r24, 0x0983
    b820:	90 91 84 09 	lds	r25, 0x0984
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b824:	9a 87       	std	Y+10, r25	; 0x0a
    b826:	89 87       	std	Y+9, r24	; 0x09
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b828:	80 91 85 09 	lds	r24, 0x0985
    b82c:	90 91 86 09 	lds	r25, 0x0986
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b830:	9c 87       	std	Y+12, r25	; 0x0c
    b832:	8b 87       	std	Y+11, r24	; 0x0b
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b834:	80 91 87 09 	lds	r24, 0x0987
    b838:	90 91 88 09 	lds	r25, 0x0988
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b83c:	9e 87       	std	Y+14, r25	; 0x0e
    b83e:	8d 87       	std	Y+13, r24	; 0x0d
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b840:	80 91 89 09 	lds	r24, 0x0989
    b844:	90 91 8a 09 	lds	r25, 0x098A
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b848:	98 8b       	std	Y+16, r25	; 0x10
    b84a:	8f 87       	std	Y+15, r24	; 0x0f
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b84c:	80 91 8b 09 	lds	r24, 0x098B
    b850:	90 91 8c 09 	lds	r25, 0x098C
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b854:	9a 8b       	std	Y+18, r25	; 0x12
    b856:	89 8b       	std	Y+17, r24	; 0x11
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b858:	80 91 8d 09 	lds	r24, 0x098D
    b85c:	90 91 8e 09 	lds	r25, 0x098E
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b860:	9c 8b       	std	Y+20, r25	; 0x14
    b862:	8b 8b       	std	Y+19, r24	; 0x13
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b864:	80 91 8f 09 	lds	r24, 0x098F
    b868:	90 91 90 09 	lds	r25, 0x0990
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b86c:	9e 8b       	std	Y+22, r25	; 0x16
    b86e:	8d 8b       	std	Y+21, r24	; 0x15
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b870:	80 91 91 09 	lds	r24, 0x0991
    b874:	90 91 92 09 	lds	r25, 0x0992
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b878:	98 8f       	std	Y+24, r25	; 0x18
    b87a:	8f 8b       	std	Y+23, r24	; 0x17
    b87c:	20 91 5f 09 	lds	r18, 0x095F
    b880:	30 91 60 09 	lds	r19, 0x0960
    b884:	6d 96       	adiw	r28, 0x1d	; 29
    b886:	3f af       	std	Y+63, r19	; 0x3f
    b888:	2e af       	std	Y+62, r18	; 0x3e
    b88a:	6d 97       	sbiw	r28, 0x1d	; 29
    b88c:	3a 8f       	std	Y+26, r19	; 0x1a
    b88e:	29 8f       	std	Y+25, r18	; 0x19
    b890:	80 91 61 09 	lds	r24, 0x0961
    b894:	90 91 62 09 	lds	r25, 0x0962
    b898:	9c 8f       	std	Y+28, r25	; 0x1c
    b89a:	8b 8f       	std	Y+27, r24	; 0x1b
    b89c:	80 91 63 09 	lds	r24, 0x0963
    b8a0:	90 91 64 09 	lds	r25, 0x0964
    b8a4:	9e 8f       	std	Y+30, r25	; 0x1e
    b8a6:	8d 8f       	std	Y+29, r24	; 0x1d
    b8a8:	18 a3       	std	Y+32, r17	; 0x20
    b8aa:	0f 8f       	std	Y+31, r16	; 0x1f
    b8ac:	7a a3       	std	Y+34, r23	; 0x22
    b8ae:	69 a3       	std	Y+33, r22	; 0x21
    b8b0:	80 91 6b 09 	lds	r24, 0x096B
    b8b4:	90 91 6c 09 	lds	r25, 0x096C
    b8b8:	9c a3       	std	Y+36, r25	; 0x24
    b8ba:	8b a3       	std	Y+35, r24	; 0x23
    b8bc:	80 91 6d 09 	lds	r24, 0x096D
    b8c0:	90 91 6e 09 	lds	r25, 0x096E
    b8c4:	9e a3       	std	Y+38, r25	; 0x26
    b8c6:	8d a3       	std	Y+37, r24	; 0x25
    b8c8:	80 91 6f 09 	lds	r24, 0x096F
    b8cc:	90 91 70 09 	lds	r25, 0x0970
    b8d0:	98 a7       	std	Y+40, r25	; 0x28
    b8d2:	8f a3       	std	Y+39, r24	; 0x27
    b8d4:	1a a6       	std	Y+42, r1	; 0x2a
    b8d6:	19 a6       	std	Y+41, r1	; 0x29
	//************************************************************
	// Generic curves
	//************************************************************
	
	// Only process generic curves if they have a source selected
	if (Config.Curve[GEN_CURVE_C].channel != NOMIX)
    b8d8:	00 91 8b 08 	lds	r16, 0x088B
    b8dc:	04 31       	cpi	r16, 0x14	; 20
    b8de:	f9 f0       	breq	.+62     	; 0xb91e <ProcessMixer+0x2ee>
	{
		P1_curve_C = Process_curve(GEN_CURVE_C, BIPOLAR, UniversalP1[Config.Curve[GEN_CURVE_C].channel]);		
    b8e0:	00 0f       	add	r16, r16
    b8e2:	11 0b       	sbc	r17, r17
    b8e4:	41 e0       	ldi	r20, 0x01	; 1
    b8e6:	50 e0       	ldi	r21, 0x00	; 0
    b8e8:	4c 0f       	add	r20, r28
    b8ea:	5d 1f       	adc	r21, r29
    b8ec:	04 0f       	add	r16, r20
    b8ee:	15 1f       	adc	r17, r21
    b8f0:	f8 01       	movw	r30, r16
    b8f2:	42 a5       	ldd	r20, Z+42	; 0x2a
    b8f4:	53 a5       	ldd	r21, Z+43	; 0x2b
    b8f6:	61 e0       	ldi	r22, 0x01	; 1
    b8f8:	84 e0       	ldi	r24, 0x04	; 4
    b8fa:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <Process_curve>
    b8fe:	90 93 57 05 	sts	0x0557, r25
    b902:	80 93 56 05 	sts	0x0556, r24
		P2_curve_C = Process_curve(GEN_CURVE_C, BIPOLAR, UniversalP2[Config.Curve[GEN_CURVE_C].channel]);	
    b906:	f8 01       	movw	r30, r16
    b908:	40 81       	ld	r20, Z
    b90a:	51 81       	ldd	r21, Z+1	; 0x01
    b90c:	61 e0       	ldi	r22, 0x01	; 1
    b90e:	84 e0       	ldi	r24, 0x04	; 4
    b910:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <Process_curve>
    b914:	90 93 55 05 	sts	0x0555, r25
    b918:	80 93 54 05 	sts	0x0554, r24
    b91c:	04 c0       	rjmp	.+8      	; 0xb926 <ProcessMixer+0x2f6>
	}
	else
	{
		P2_curve_C = 0;
    b91e:	10 92 55 05 	sts	0x0555, r1
    b922:	10 92 54 05 	sts	0x0554, r1
	}
	
	if (Config.Curve[GEN_CURVE_D].channel != NOMIX)
    b926:	00 91 93 08 	lds	r16, 0x0893
    b92a:	04 31       	cpi	r16, 0x14	; 20
    b92c:	f9 f0       	breq	.+62     	; 0xb96c <ProcessMixer+0x33c>
	{
		P1_curve_D = Process_curve(GEN_CURVE_D, BIPOLAR, UniversalP1[Config.Curve[GEN_CURVE_D].channel]);
    b92e:	00 0f       	add	r16, r16
    b930:	11 0b       	sbc	r17, r17
    b932:	21 e0       	ldi	r18, 0x01	; 1
    b934:	30 e0       	ldi	r19, 0x00	; 0
    b936:	2c 0f       	add	r18, r28
    b938:	3d 1f       	adc	r19, r29
    b93a:	02 0f       	add	r16, r18
    b93c:	13 1f       	adc	r17, r19
    b93e:	f8 01       	movw	r30, r16
    b940:	42 a5       	ldd	r20, Z+42	; 0x2a
    b942:	53 a5       	ldd	r21, Z+43	; 0x2b
    b944:	61 e0       	ldi	r22, 0x01	; 1
    b946:	85 e0       	ldi	r24, 0x05	; 5
    b948:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <Process_curve>
    b94c:	90 93 53 05 	sts	0x0553, r25
    b950:	80 93 52 05 	sts	0x0552, r24
		P2_curve_D = Process_curve(GEN_CURVE_D, BIPOLAR, UniversalP2[Config.Curve[GEN_CURVE_D].channel]);
    b954:	f8 01       	movw	r30, r16
    b956:	40 81       	ld	r20, Z
    b958:	51 81       	ldd	r21, Z+1	; 0x01
    b95a:	61 e0       	ldi	r22, 0x01	; 1
    b95c:	85 e0       	ldi	r24, 0x05	; 5
    b95e:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <Process_curve>
    b962:	90 93 51 05 	sts	0x0551, r25
    b966:	80 93 50 05 	sts	0x0550, r24
    b96a:	04 c0       	rjmp	.+8      	; 0xb974 <ProcessMixer+0x344>
	}
	else
	{
		P2_curve_D = 0;
    b96c:	10 92 51 05 	sts	0x0551, r1
    b970:	10 92 50 05 	sts	0x0550, r1
		//************************************************************ 

		// If the user wants earth reference for tail-sitter hover, swap the related stick sources.
		// The secret is understanding WHICH STICK is controlling movement on the AXIS in the selected REFERENCE
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    b974:	20 91 d9 06 	lds	r18, 0x06D9
    b978:	af 96       	adiw	r28, 0x2f	; 47
    b97a:	2f af       	std	Y+63, r18	; 0x3f
    b97c:	af 97       	sbiw	r28, 0x2f	; 47
			P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
			P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;
		}
		
		// P1 gyros
		if (transition < 100)
    b97e:	a0 90 38 05 	lds	r10, 0x0538
    b982:	b0 90 39 05 	lds	r11, 0x0539
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    b986:	44 27       	eor	r20, r20
    b988:	55 27       	eor	r21, r21
    b98a:	44 19       	sub	r20, r4
    b98c:	55 09       	sbc	r21, r5
    b98e:	e1 96       	adiw	r28, 0x31	; 49
    b990:	5f af       	std	Y+63, r21	; 0x3f
    b992:	4e af       	std	Y+62, r20	; 0x3e
    b994:	e1 97       	sbiw	r28, 0x31	; 49
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    b996:	6d 96       	adiw	r28, 0x1d	; 29
    b998:	2e ad       	ldd	r18, Y+62	; 0x3e
    b99a:	3f ad       	ldd	r19, Y+63	; 0x3f
    b99c:	6d 97       	sbiw	r28, 0x1d	; 29
    b99e:	31 95       	neg	r19
    b9a0:	21 95       	neg	r18
    b9a2:	31 09       	sbc	r19, r1
    b9a4:	e3 96       	adiw	r28, 0x33	; 51
    b9a6:	3f af       	std	Y+63, r19	; 0x3f
    b9a8:	2e af       	std	Y+62, r18	; 0x3e
    b9aa:	e3 97       	sbiw	r28, 0x33	; 51
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    b9ac:	40 91 61 09 	lds	r20, 0x0961
    b9b0:	50 91 62 09 	lds	r21, 0x0962
    b9b4:	6f 96       	adiw	r28, 0x1f	; 31
    b9b6:	5f af       	std	Y+63, r21	; 0x3f
    b9b8:	4e af       	std	Y+62, r20	; 0x3e
    b9ba:	6f 97       	sbiw	r28, 0x1f	; 31
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    b9bc:	20 91 63 09 	lds	r18, 0x0963
    b9c0:	30 91 64 09 	lds	r19, 0x0964
    b9c4:	a1 96       	adiw	r28, 0x21	; 33
    b9c6:	3f af       	std	Y+63, r19	; 0x3f
    b9c8:	2e af       	std	Y+62, r18	; 0x3e
    b9ca:	a1 97       	sbiw	r28, 0x21	; 33
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    b9cc:	40 91 65 09 	lds	r20, 0x0965
    b9d0:	50 91 66 09 	lds	r21, 0x0966
    b9d4:	a3 96       	adiw	r28, 0x23	; 35
    b9d6:	5f af       	std	Y+63, r21	; 0x3f
    b9d8:	4e af       	std	Y+62, r20	; 0x3e
    b9da:	a3 97       	sbiw	r28, 0x23	; 35
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    b9dc:	20 91 67 09 	lds	r18, 0x0967
    b9e0:	30 91 68 09 	lds	r19, 0x0968
    b9e4:	a5 96       	adiw	r28, 0x25	; 37
    b9e6:	3f af       	std	Y+63, r19	; 0x3f
    b9e8:	2e af       	std	Y+62, r18	; 0x3e
    b9ea:	a5 97       	sbiw	r28, 0x25	; 37
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    b9ec:	40 91 69 09 	lds	r20, 0x0969
    b9f0:	50 91 6a 09 	lds	r21, 0x096A
    b9f4:	a7 96       	adiw	r28, 0x27	; 39
    b9f6:	5f af       	std	Y+63, r21	; 0x3f
    b9f8:	4e af       	std	Y+62, r20	; 0x3e
    b9fa:	a7 97       	sbiw	r28, 0x27	; 39
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    b9fc:	20 91 6b 09 	lds	r18, 0x096B
    ba00:	30 91 6c 09 	lds	r19, 0x096C
    ba04:	a9 96       	adiw	r28, 0x29	; 41
    ba06:	3f af       	std	Y+63, r19	; 0x3f
    ba08:	2e af       	std	Y+62, r18	; 0x3e
    ba0a:	a9 97       	sbiw	r28, 0x29	; 41

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    ba0c:	40 91 6d 09 	lds	r20, 0x096D
    ba10:	50 91 6e 09 	lds	r21, 0x096E
    ba14:	ab 96       	adiw	r28, 0x2b	; 43
    ba16:	5f af       	std	Y+63, r21	; 0x3f
    ba18:	4e af       	std	Y+62, r20	; 0x3e
    ba1a:	ab 97       	sbiw	r28, 0x2b	; 43
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    ba1c:	20 91 6f 09 	lds	r18, 0x096F
    ba20:	30 91 70 09 	lds	r19, 0x0970
    ba24:	ad 96       	adiw	r28, 0x2d	; 45
    ba26:	3f af       	std	Y+63, r19	; 0x3f
    ba28:	2e af       	std	Y+62, r18	; 0x3e
    ba2a:	ad 97       	sbiw	r28, 0x2d	; 45
    ba2c:	09 e3       	ldi	r16, 0x39	; 57
    ba2e:	16 e0       	ldi	r17, 0x06	; 6
    ba30:	38 e0       	ldi	r19, 0x08	; 8
    ba32:	ae 96       	adiw	r28, 0x2e	; 46
    ba34:	3f af       	std	Y+63, r19	; 0x3f
    ba36:	ae 97       	sbiw	r28, 0x2e	; 46
    ba38:	d8 01       	movw	r26, r16
    ba3a:	ad 54       	subi	r26, 0x4D	; 77
    ba3c:	bf 4f       	sbci	r27, 0xFF	; 255
    ba3e:	f8 01       	movw	r30, r16
    ba40:	e9 54       	subi	r30, 0x49	; 73
    ba42:	ff 4f       	sbci	r31, 0xFF	; 255
		//************************************************************ 

		// If the user wants earth reference for tail-sitter hover, swap the related stick sources.
		// The secret is understanding WHICH STICK is controlling movement on the AXIS in the selected REFERENCE
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    ba44:	af 96       	adiw	r28, 0x2f	; 47
    ba46:	4f ad       	ldd	r20, Y+63	; 0x3f
    ba48:	af 97       	sbiw	r28, 0x2f	; 47
    ba4a:	44 23       	and	r20, r20
    ba4c:	49 f0       	breq	.+18     	; 0xba60 <ProcessMixer+0x430>
		{
			// EARTH-Referenced tail-sitter
			if (Config.P1_Reference == EARTH)
    ba4e:	41 30       	cpi	r20, 0x01	; 1
    ba50:	39 f0       	breq	.+14     	; 0xba60 <ProcessMixer+0x430>
				P1_gyro_yaw_volume_source = Config.Channel[i].P1_rudder_volume;		// These are always the same
			}
			// MODEL-Referenced tail-sitter
			else
			{
				P1_acc_roll_volume_source = Config.Channel[i].P1_rudder_volume;
    ba52:	70 80       	ld	r7, Z
				P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
    ba54:	5c 91       	ld	r21, X
    ba56:	66 96       	adiw	r28, 0x16	; 22
    ba58:	5f af       	std	Y+63, r21	; 0x3f
    ba5a:	66 97       	sbiw	r28, 0x16	; 22
				P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;			
    ba5c:	67 2c       	mov	r6, r7
    ba5e:	05 c0       	rjmp	.+10     	; 0xba6a <ProcessMixer+0x43a>
			}
		}
		// Normal case
		else
		{
			P1_acc_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
    ba60:	7c 90       	ld	r7, X
			P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
			P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;
    ba62:	60 80       	ld	r6, Z
		}
		// Normal case
		else
		{
			P1_acc_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
			P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
    ba64:	66 96       	adiw	r28, 0x16	; 22
    ba66:	7f ae       	std	Y+63, r7	; 0x3f
    ba68:	66 97       	sbiw	r28, 0x16	; 22
			P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;
		}
		
		// P1 gyros
		if (transition < 100)
    ba6a:	84 e6       	ldi	r24, 0x64	; 100
    ba6c:	a8 16       	cp	r10, r24
    ba6e:	b1 04       	cpc	r11, r1
    ba70:	0c f0       	brlt	.+2      	; 0xba74 <ProcessMixer+0x444>
    ba72:	73 c0       	rjmp	.+230    	; 0xbb5a <ProcessMixer+0x52a>
    ba74:	f8 01       	movw	r30, r16
    ba76:	e7 54       	subi	r30, 0x47	; 71
    ba78:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    ba7a:	80 81       	ld	r24, Z
    ba7c:	81 30       	cpi	r24, 0x01	; 1
    ba7e:	89 f0       	breq	.+34     	; 0xbaa2 <ProcessMixer+0x472>
    ba80:	82 30       	cpi	r24, 0x02	; 2
    ba82:	c9 f4       	brne	.+50     	; 0xbab6 <ProcessMixer+0x486>
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], P1_gyro_roll_volume_source * 5); 
    ba84:	66 96       	adiw	r28, 0x16	; 22
    ba86:	3f ad       	ldd	r19, Y+63	; 0x3f
    ba88:	66 97       	sbiw	r28, 0x16	; 22
    ba8a:	45 e0       	ldi	r20, 0x05	; 5
    ba8c:	34 02       	muls	r19, r20
    ba8e:	b0 01       	movw	r22, r0
    ba90:	11 24       	eor	r1, r1
    ba92:	c2 01       	movw	r24, r4
    ba94:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    ba98:	88 24       	eor	r8, r8
    ba9a:	99 24       	eor	r9, r9
    ba9c:	88 1a       	sub	r8, r24
    ba9e:	99 0a       	sbc	r9, r25
					break;
    baa0:	0e c0       	rjmp	.+28     	; 0xbabe <ProcessMixer+0x48e>
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (P1_gyro_roll_volume_source < 0 )
    baa2:	66 96       	adiw	r28, 0x16	; 22
    baa4:	2f ad       	ldd	r18, Y+63	; 0x3f
    baa6:	66 97       	sbiw	r28, 0x16	; 22
    baa8:	27 fd       	sbrc	r18, 7
    baaa:	08 c0       	rjmp	.+16     	; 0xbabc <ProcessMixer+0x48c>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    baac:	e1 96       	adiw	r28, 0x31	; 49
    baae:	8e ac       	ldd	r8, Y+62	; 0x3e
    bab0:	9f ac       	ldd	r9, Y+63	; 0x3f
    bab2:	e1 97       	sbiw	r28, 0x31	; 49
    bab4:	04 c0       	rjmp	.+8      	; 0xbabe <ProcessMixer+0x48e>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    bab6:	81 2c       	mov	r8, r1
    bab8:	91 2c       	mov	r9, r1
    baba:	01 c0       	rjmp	.+2      	; 0xbabe <ProcessMixer+0x48e>
				case OFF:
					break;
				case ON:
					if (P1_gyro_roll_volume_source < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    babc:	42 01       	movw	r8, r4
    babe:	f8 01       	movw	r30, r16
    bac0:	e5 54       	subi	r30, 0x45	; 69
    bac2:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    bac4:	80 81       	ld	r24, Z
    bac6:	81 30       	cpi	r24, 0x01	; 1
    bac8:	99 f0       	breq	.+38     	; 0xbaf0 <ProcessMixer+0x4c0>
    baca:	82 30       	cpi	r24, 0x02	; 2
    bacc:	01 f5       	brne	.+64     	; 0xbb0e <ProcessMixer+0x4de>
    bace:	f8 01       	movw	r30, r16
    bad0:	eb 54       	subi	r30, 0x4B	; 75
    bad2:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    bad4:	60 81       	ld	r22, Z
    bad6:	35 e0       	ldi	r19, 0x05	; 5
    bad8:	63 02       	muls	r22, r19
    bada:	b0 01       	movw	r22, r0
    badc:	11 24       	eor	r1, r1
    bade:	69 96       	adiw	r28, 0x19	; 25
    bae0:	8e ad       	ldd	r24, Y+62	; 0x3e
    bae2:	9f ad       	ldd	r25, Y+63	; 0x3f
    bae4:	69 97       	sbiw	r28, 0x19	; 25
    bae6:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    baea:	88 0e       	add	r8, r24
    baec:	99 1e       	adc	r9, r25
					break;
    baee:	0f c0       	rjmp	.+30     	; 0xbb0e <ProcessMixer+0x4de>
    baf0:	f8 01       	movw	r30, r16
    baf2:	eb 54       	subi	r30, 0x4B	; 75
    baf4:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    baf6:	80 81       	ld	r24, Z
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    baf8:	69 96       	adiw	r28, 0x19	; 25
    bafa:	2e ad       	ldd	r18, Y+62	; 0x3e
    bafc:	3f ad       	ldd	r19, Y+63	; 0x3f
    bafe:	69 97       	sbiw	r28, 0x19	; 25
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    bb00:	87 ff       	sbrs	r24, 7
    bb02:	03 c0       	rjmp	.+6      	; 0xbb0a <ProcessMixer+0x4da>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    bb04:	82 1a       	sub	r8, r18
    bb06:	93 0a       	sbc	r9, r19
    bb08:	02 c0       	rjmp	.+4      	; 0xbb0e <ProcessMixer+0x4de>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    bb0a:	82 0e       	add	r8, r18
    bb0c:	93 1e       	adc	r9, r19
    bb0e:	f8 01       	movw	r30, r16
    bb10:	e3 54       	subi	r30, 0x43	; 67
    bb12:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    bb14:	80 81       	ld	r24, Z
    bb16:	81 30       	cpi	r24, 0x01	; 1
    bb18:	81 f0       	breq	.+32     	; 0xbb3a <ProcessMixer+0x50a>
    bb1a:	82 30       	cpi	r24, 0x02	; 2
    bb1c:	c9 f4       	brne	.+50     	; 0xbb50 <ProcessMixer+0x520>
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], P1_gyro_yaw_volume_source * 5);
    bb1e:	36 2d       	mov	r19, r6
    bb20:	45 e0       	ldi	r20, 0x05	; 5
    bb22:	34 02       	muls	r19, r20
    bb24:	b0 01       	movw	r22, r0
    bb26:	11 24       	eor	r1, r1
    bb28:	6b 96       	adiw	r28, 0x1b	; 27
    bb2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    bb2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    bb2e:	6b 97       	sbiw	r28, 0x1b	; 27
    bb30:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    bb34:	88 0e       	add	r8, r24
    bb36:	99 1e       	adc	r9, r25
					break;
    bb38:	0b c0       	rjmp	.+22     	; 0xbb50 <ProcessMixer+0x520>
				case OFF:
					break;
				case ON:
					if (P1_gyro_yaw_volume_source < 0 )
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    bb3a:	6b 96       	adiw	r28, 0x1b	; 27
    bb3c:	2e ad       	ldd	r18, Y+62	; 0x3e
    bb3e:	3f ad       	ldd	r19, Y+63	; 0x3f
    bb40:	6b 97       	sbiw	r28, 0x1b	; 27
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (P1_gyro_yaw_volume_source < 0 )
    bb42:	67 fe       	sbrs	r6, 7
    bb44:	03 c0       	rjmp	.+6      	; 0xbb4c <ProcessMixer+0x51c>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    bb46:	82 1a       	sub	r8, r18
    bb48:	93 0a       	sbc	r9, r19
    bb4a:	02 c0       	rjmp	.+4      	; 0xbb50 <ProcessMixer+0x520>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    bb4c:	82 0e       	add	r8, r18
    bb4e:	93 1e       	adc	r9, r19
					break;
			}
		}

		// P2 gyros
		if (transition > 0)
    bb50:	1a 14       	cp	r1, r10
    bb52:	1b 04       	cpc	r1, r11
    bb54:	0c f0       	brlt	.+2      	; 0xbb58 <ProcessMixer+0x528>
    bb56:	8e c0       	rjmp	.+284    	; 0xbc74 <ProcessMixer+0x644>
    bb58:	02 c0       	rjmp	.+4      	; 0xbb5e <ProcessMixer+0x52e>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    bb5a:	81 2c       	mov	r8, r1
    bb5c:	91 2c       	mov	r9, r1
    bb5e:	f8 01       	movw	r30, r16
    bb60:	e6 54       	subi	r30, 0x46	; 70
    bb62:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (transition > 0)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    bb64:	80 81       	ld	r24, Z
    bb66:	81 30       	cpi	r24, 0x01	; 1
    bb68:	a9 f0       	breq	.+42     	; 0xbb94 <ProcessMixer+0x564>
    bb6a:	82 30       	cpi	r24, 0x02	; 2
    bb6c:	f1 f4       	brne	.+60     	; 0xbbaa <ProcessMixer+0x57a>
    bb6e:	f8 01       	movw	r30, r16
    bb70:	ec 54       	subi	r30, 0x4C	; 76
    bb72:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    bb74:	60 81       	ld	r22, Z
    bb76:	55 e0       	ldi	r21, 0x05	; 5
    bb78:	65 02       	muls	r22, r21
    bb7a:	b0 01       	movw	r22, r0
    bb7c:	11 24       	eor	r1, r1
    bb7e:	6d 96       	adiw	r28, 0x1d	; 29
    bb80:	8e ad       	ldd	r24, Y+62	; 0x3e
    bb82:	9f ad       	ldd	r25, Y+63	; 0x3f
    bb84:	6d 97       	sbiw	r28, 0x1d	; 29
    bb86:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    bb8a:	cc 24       	eor	r12, r12
    bb8c:	dd 24       	eor	r13, r13
    bb8e:	c8 1a       	sub	r12, r24
    bb90:	d9 0a       	sbc	r13, r25
					break;
    bb92:	12 c0       	rjmp	.+36     	; 0xbbb8 <ProcessMixer+0x588>
    bb94:	f8 01       	movw	r30, r16
    bb96:	ec 54       	subi	r30, 0x4C	; 76
    bb98:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    bb9a:	80 81       	ld	r24, Z
    bb9c:	87 ff       	sbrs	r24, 7
    bb9e:	08 c0       	rjmp	.+16     	; 0xbbb0 <ProcessMixer+0x580>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    bba0:	6d 96       	adiw	r28, 0x1d	; 29
    bba2:	ce ac       	ldd	r12, Y+62	; 0x3e
    bba4:	df ac       	ldd	r13, Y+63	; 0x3f
    bba6:	6d 97       	sbiw	r28, 0x1d	; 29
    bba8:	07 c0       	rjmp	.+14     	; 0xbbb8 <ProcessMixer+0x588>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    bbaa:	c1 2c       	mov	r12, r1
    bbac:	d1 2c       	mov	r13, r1
    bbae:	04 c0       	rjmp	.+8      	; 0xbbb8 <ProcessMixer+0x588>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    bbb0:	e3 96       	adiw	r28, 0x33	; 51
    bbb2:	ce ac       	ldd	r12, Y+62	; 0x3e
    bbb4:	df ac       	ldd	r13, Y+63	; 0x3f
    bbb6:	e3 97       	sbiw	r28, 0x33	; 51
    bbb8:	f8 01       	movw	r30, r16
    bbba:	e4 54       	subi	r30, 0x44	; 68
    bbbc:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    bbbe:	80 81       	ld	r24, Z
    bbc0:	81 30       	cpi	r24, 0x01	; 1
    bbc2:	99 f0       	breq	.+38     	; 0xbbea <ProcessMixer+0x5ba>
    bbc4:	82 30       	cpi	r24, 0x02	; 2
    bbc6:	21 f5       	brne	.+72     	; 0xbc10 <ProcessMixer+0x5e0>
    bbc8:	f8 01       	movw	r30, r16
    bbca:	ea 54       	subi	r30, 0x4A	; 74
    bbcc:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    bbce:	60 81       	ld	r22, Z
    bbd0:	55 e0       	ldi	r21, 0x05	; 5
    bbd2:	65 02       	muls	r22, r21
    bbd4:	b0 01       	movw	r22, r0
    bbd6:	11 24       	eor	r1, r1
    bbd8:	6f 96       	adiw	r28, 0x1f	; 31
    bbda:	8e ad       	ldd	r24, Y+62	; 0x3e
    bbdc:	9f ad       	ldd	r25, Y+63	; 0x3f
    bbde:	6f 97       	sbiw	r28, 0x1f	; 31
    bbe0:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    bbe4:	c8 0e       	add	r12, r24
    bbe6:	d9 1e       	adc	r13, r25
					break;
    bbe8:	13 c0       	rjmp	.+38     	; 0xbc10 <ProcessMixer+0x5e0>
    bbea:	f8 01       	movw	r30, r16
    bbec:	ea 54       	subi	r30, 0x4A	; 74
    bbee:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    bbf0:	80 81       	ld	r24, Z
    bbf2:	87 ff       	sbrs	r24, 7
    bbf4:	07 c0       	rjmp	.+14     	; 0xbc04 <ProcessMixer+0x5d4>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    bbf6:	6f 96       	adiw	r28, 0x1f	; 31
    bbf8:	2e ad       	ldd	r18, Y+62	; 0x3e
    bbfa:	3f ad       	ldd	r19, Y+63	; 0x3f
    bbfc:	6f 97       	sbiw	r28, 0x1f	; 31
    bbfe:	c2 1a       	sub	r12, r18
    bc00:	d3 0a       	sbc	r13, r19
    bc02:	06 c0       	rjmp	.+12     	; 0xbc10 <ProcessMixer+0x5e0>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    bc04:	6f 96       	adiw	r28, 0x1f	; 31
    bc06:	4e ad       	ldd	r20, Y+62	; 0x3e
    bc08:	5f ad       	ldd	r21, Y+63	; 0x3f
    bc0a:	6f 97       	sbiw	r28, 0x1f	; 31
    bc0c:	c4 0e       	add	r12, r20
    bc0e:	d5 1e       	adc	r13, r21
    bc10:	f8 01       	movw	r30, r16
    bc12:	e2 54       	subi	r30, 0x42	; 66
    bc14:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    bc16:	80 81       	ld	r24, Z
    bc18:	81 30       	cpi	r24, 0x01	; 1
    bc1a:	99 f0       	breq	.+38     	; 0xbc42 <ProcessMixer+0x612>
    bc1c:	82 30       	cpi	r24, 0x02	; 2
    bc1e:	21 f5       	brne	.+72     	; 0xbc68 <ProcessMixer+0x638>
    bc20:	f8 01       	movw	r30, r16
    bc22:	e8 54       	subi	r30, 0x48	; 72
    bc24:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    bc26:	60 81       	ld	r22, Z
    bc28:	55 e0       	ldi	r21, 0x05	; 5
    bc2a:	65 02       	muls	r22, r21
    bc2c:	b0 01       	movw	r22, r0
    bc2e:	11 24       	eor	r1, r1
    bc30:	a1 96       	adiw	r28, 0x21	; 33
    bc32:	8e ad       	ldd	r24, Y+62	; 0x3e
    bc34:	9f ad       	ldd	r25, Y+63	; 0x3f
    bc36:	a1 97       	sbiw	r28, 0x21	; 33
    bc38:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    bc3c:	c8 0e       	add	r12, r24
    bc3e:	d9 1e       	adc	r13, r25
					break;
    bc40:	13 c0       	rjmp	.+38     	; 0xbc68 <ProcessMixer+0x638>
    bc42:	f8 01       	movw	r30, r16
    bc44:	e8 54       	subi	r30, 0x48	; 72
    bc46:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    bc48:	80 81       	ld	r24, Z
    bc4a:	87 ff       	sbrs	r24, 7
    bc4c:	07 c0       	rjmp	.+14     	; 0xbc5c <ProcessMixer+0x62c>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    bc4e:	a1 96       	adiw	r28, 0x21	; 33
    bc50:	2e ad       	ldd	r18, Y+62	; 0x3e
    bc52:	3f ad       	ldd	r19, Y+63	; 0x3f
    bc54:	a1 97       	sbiw	r28, 0x21	; 33
    bc56:	c2 1a       	sub	r12, r18
    bc58:	d3 0a       	sbc	r13, r19
    bc5a:	06 c0       	rjmp	.+12     	; 0xbc68 <ProcessMixer+0x638>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    bc5c:	a1 96       	adiw	r28, 0x21	; 33
    bc5e:	4e ad       	ldd	r20, Y+62	; 0x3e
    bc60:	5f ad       	ldd	r21, Y+63	; 0x3f
    bc62:	a1 97       	sbiw	r28, 0x21	; 33
    bc64:	c4 0e       	add	r12, r20
    bc66:	d5 1e       	adc	r13, r21

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
    bc68:	84 e6       	ldi	r24, 0x64	; 100
    bc6a:	a8 16       	cp	r10, r24
    bc6c:	b1 04       	cpc	r11, r1
    bc6e:	0c f0       	brlt	.+2      	; 0xbc72 <ProcessMixer+0x642>
    bc70:	84 c0       	rjmp	.+264    	; 0xbd7a <ProcessMixer+0x74a>
    bc72:	02 c0       	rjmp	.+4      	; 0xbc78 <ProcessMixer+0x648>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    bc74:	c1 2c       	mov	r12, r1
    bc76:	d1 2c       	mov	r13, r1
    bc78:	f8 01       	movw	r30, r16
    bc7a:	e1 54       	subi	r30, 0x41	; 65
    bc7c:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    bc7e:	80 81       	ld	r24, Z
    bc80:	81 30       	cpi	r24, 0x01	; 1
    bc82:	81 f0       	breq	.+32     	; 0xbca4 <ProcessMixer+0x674>
    bc84:	82 30       	cpi	r24, 0x02	; 2
    bc86:	e9 f4       	brne	.+58     	; 0xbcc2 <ProcessMixer+0x692>
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], P1_acc_roll_volume_source * 5);
    bc88:	57 2d       	mov	r21, r7
    bc8a:	85 e0       	ldi	r24, 0x05	; 5
    bc8c:	58 02       	muls	r21, r24
    bc8e:	b0 01       	movw	r22, r0
    bc90:	11 24       	eor	r1, r1
    bc92:	a3 96       	adiw	r28, 0x23	; 35
    bc94:	8e ad       	ldd	r24, Y+62	; 0x3e
    bc96:	9f ad       	ldd	r25, Y+63	; 0x3f
    bc98:	a3 97       	sbiw	r28, 0x23	; 35
    bc9a:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    bc9e:	88 1a       	sub	r8, r24
    bca0:	99 0a       	sbc	r9, r25
					break;
    bca2:	0f c0       	rjmp	.+30     	; 0xbcc2 <ProcessMixer+0x692>
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (P1_acc_roll_volume_source < 0 )
    bca4:	77 fe       	sbrs	r7, 7
    bca6:	07 c0       	rjmp	.+14     	; 0xbcb6 <ProcessMixer+0x686>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    bca8:	a3 96       	adiw	r28, 0x23	; 35
    bcaa:	2e ad       	ldd	r18, Y+62	; 0x3e
    bcac:	3f ad       	ldd	r19, Y+63	; 0x3f
    bcae:	a3 97       	sbiw	r28, 0x23	; 35
    bcb0:	82 0e       	add	r8, r18
    bcb2:	93 1e       	adc	r9, r19
    bcb4:	06 c0       	rjmp	.+12     	; 0xbcc2 <ProcessMixer+0x692>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    bcb6:	a3 96       	adiw	r28, 0x23	; 35
    bcb8:	4e ad       	ldd	r20, Y+62	; 0x3e
    bcba:	5f ad       	ldd	r21, Y+63	; 0x3f
    bcbc:	a3 97       	sbiw	r28, 0x23	; 35
    bcbe:	84 1a       	sub	r8, r20
    bcc0:	95 0a       	sbc	r9, r21
    bcc2:	f8 01       	movw	r30, r16
    bcc4:	ef 53       	subi	r30, 0x3F	; 63
    bcc6:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    bcc8:	80 81       	ld	r24, Z
    bcca:	81 30       	cpi	r24, 0x01	; 1
    bccc:	99 f0       	breq	.+38     	; 0xbcf4 <ProcessMixer+0x6c4>
    bcce:	82 30       	cpi	r24, 0x02	; 2
    bcd0:	21 f5       	brne	.+72     	; 0xbd1a <ProcessMixer+0x6ea>
    bcd2:	f8 01       	movw	r30, r16
    bcd4:	eb 54       	subi	r30, 0x4B	; 75
    bcd6:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    bcd8:	60 81       	ld	r22, Z
    bcda:	55 e0       	ldi	r21, 0x05	; 5
    bcdc:	65 02       	muls	r22, r21
    bcde:	b0 01       	movw	r22, r0
    bce0:	11 24       	eor	r1, r1
    bce2:	a5 96       	adiw	r28, 0x25	; 37
    bce4:	8e ad       	ldd	r24, Y+62	; 0x3e
    bce6:	9f ad       	ldd	r25, Y+63	; 0x3f
    bce8:	a5 97       	sbiw	r28, 0x25	; 37
    bcea:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    bcee:	88 0e       	add	r8, r24
    bcf0:	99 1e       	adc	r9, r25
					break;
    bcf2:	13 c0       	rjmp	.+38     	; 0xbd1a <ProcessMixer+0x6ea>
    bcf4:	f8 01       	movw	r30, r16
    bcf6:	eb 54       	subi	r30, 0x4B	; 75
    bcf8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    bcfa:	80 81       	ld	r24, Z
    bcfc:	87 ff       	sbrs	r24, 7
    bcfe:	07 c0       	rjmp	.+14     	; 0xbd0e <ProcessMixer+0x6de>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    bd00:	a5 96       	adiw	r28, 0x25	; 37
    bd02:	2e ad       	ldd	r18, Y+62	; 0x3e
    bd04:	3f ad       	ldd	r19, Y+63	; 0x3f
    bd06:	a5 97       	sbiw	r28, 0x25	; 37
    bd08:	82 1a       	sub	r8, r18
    bd0a:	93 0a       	sbc	r9, r19
    bd0c:	06 c0       	rjmp	.+12     	; 0xbd1a <ProcessMixer+0x6ea>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    bd0e:	a5 96       	adiw	r28, 0x25	; 37
    bd10:	4e ad       	ldd	r20, Y+62	; 0x3e
    bd12:	5f ad       	ldd	r21, Y+63	; 0x3f
    bd14:	a5 97       	sbiw	r28, 0x25	; 37
    bd16:	84 0e       	add	r8, r20
    bd18:	95 1e       	adc	r9, r21
    bd1a:	f8 01       	movw	r30, r16
    bd1c:	ed 53       	subi	r30, 0x3D	; 61
    bd1e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    bd20:	80 81       	ld	r24, Z
    bd22:	81 30       	cpi	r24, 0x01	; 1
    bd24:	99 f0       	breq	.+38     	; 0xbd4c <ProcessMixer+0x71c>
    bd26:	82 30       	cpi	r24, 0x02	; 2
    bd28:	21 f5       	brne	.+72     	; 0xbd72 <ProcessMixer+0x742>
    bd2a:	f8 01       	movw	r30, r16
    bd2c:	e0 55       	subi	r30, 0x50	; 80
    bd2e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    bd30:	60 81       	ld	r22, Z
    bd32:	55 e0       	ldi	r21, 0x05	; 5
    bd34:	65 02       	muls	r22, r21
    bd36:	b0 01       	movw	r22, r0
    bd38:	11 24       	eor	r1, r1
    bd3a:	a7 96       	adiw	r28, 0x27	; 39
    bd3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    bd3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    bd40:	a7 97       	sbiw	r28, 0x27	; 39
    bd42:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    bd46:	88 1a       	sub	r8, r24
    bd48:	99 0a       	sbc	r9, r25
					break;
    bd4a:	13 c0       	rjmp	.+38     	; 0xbd72 <ProcessMixer+0x742>
    bd4c:	f8 01       	movw	r30, r16
    bd4e:	e0 55       	subi	r30, 0x50	; 80
    bd50:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    bd52:	80 81       	ld	r24, Z
    bd54:	87 ff       	sbrs	r24, 7
    bd56:	07 c0       	rjmp	.+14     	; 0xbd66 <ProcessMixer+0x736>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    bd58:	a7 96       	adiw	r28, 0x27	; 39
    bd5a:	2e ad       	ldd	r18, Y+62	; 0x3e
    bd5c:	3f ad       	ldd	r19, Y+63	; 0x3f
    bd5e:	a7 97       	sbiw	r28, 0x27	; 39
    bd60:	82 0e       	add	r8, r18
    bd62:	93 1e       	adc	r9, r19
    bd64:	06 c0       	rjmp	.+12     	; 0xbd72 <ProcessMixer+0x742>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    bd66:	a7 96       	adiw	r28, 0x27	; 39
    bd68:	4e ad       	ldd	r20, Y+62	; 0x3e
    bd6a:	5f ad       	ldd	r21, Y+63	; 0x3f
    bd6c:	a7 97       	sbiw	r28, 0x27	; 39
    bd6e:	84 1a       	sub	r8, r20
    bd70:	95 0a       	sbc	r9, r21
					break;
			}
		}

		// P2
		if (transition > 0)
    bd72:	1a 14       	cp	r1, r10
    bd74:	1b 04       	cpc	r1, r11
    bd76:	0c f0       	brlt	.+2      	; 0xbd7a <ProcessMixer+0x74a>
    bd78:	89 c0       	rjmp	.+274    	; 0xbe8c <ProcessMixer+0x85c>
    bd7a:	f8 01       	movw	r30, r16
    bd7c:	e0 54       	subi	r30, 0x40	; 64
    bd7e:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    bd80:	80 81       	ld	r24, Z
    bd82:	81 30       	cpi	r24, 0x01	; 1
    bd84:	99 f0       	breq	.+38     	; 0xbdac <ProcessMixer+0x77c>
    bd86:	82 30       	cpi	r24, 0x02	; 2
    bd88:	21 f5       	brne	.+72     	; 0xbdd2 <ProcessMixer+0x7a2>
    bd8a:	f8 01       	movw	r30, r16
    bd8c:	ec 54       	subi	r30, 0x4C	; 76
    bd8e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    bd90:	60 81       	ld	r22, Z
    bd92:	55 e0       	ldi	r21, 0x05	; 5
    bd94:	65 02       	muls	r22, r21
    bd96:	b0 01       	movw	r22, r0
    bd98:	11 24       	eor	r1, r1
    bd9a:	a9 96       	adiw	r28, 0x29	; 41
    bd9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    bd9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    bda0:	a9 97       	sbiw	r28, 0x29	; 41
    bda2:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    bda6:	c8 1a       	sub	r12, r24
    bda8:	d9 0a       	sbc	r13, r25
					break;
    bdaa:	13 c0       	rjmp	.+38     	; 0xbdd2 <ProcessMixer+0x7a2>
    bdac:	f8 01       	movw	r30, r16
    bdae:	ec 54       	subi	r30, 0x4C	; 76
    bdb0:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    bdb2:	80 81       	ld	r24, Z
    bdb4:	87 ff       	sbrs	r24, 7
    bdb6:	07 c0       	rjmp	.+14     	; 0xbdc6 <ProcessMixer+0x796>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    bdb8:	a9 96       	adiw	r28, 0x29	; 41
    bdba:	2e ad       	ldd	r18, Y+62	; 0x3e
    bdbc:	3f ad       	ldd	r19, Y+63	; 0x3f
    bdbe:	a9 97       	sbiw	r28, 0x29	; 41
    bdc0:	c2 0e       	add	r12, r18
    bdc2:	d3 1e       	adc	r13, r19
    bdc4:	06 c0       	rjmp	.+12     	; 0xbdd2 <ProcessMixer+0x7a2>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    bdc6:	a9 96       	adiw	r28, 0x29	; 41
    bdc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    bdca:	5f ad       	ldd	r21, Y+63	; 0x3f
    bdcc:	a9 97       	sbiw	r28, 0x29	; 41
    bdce:	c4 1a       	sub	r12, r20
    bdd0:	d5 0a       	sbc	r13, r21
    bdd2:	f8 01       	movw	r30, r16
    bdd4:	ee 53       	subi	r30, 0x3E	; 62
    bdd6:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    bdd8:	80 81       	ld	r24, Z
    bdda:	81 30       	cpi	r24, 0x01	; 1
    bddc:	99 f0       	breq	.+38     	; 0xbe04 <ProcessMixer+0x7d4>
    bdde:	82 30       	cpi	r24, 0x02	; 2
    bde0:	21 f5       	brne	.+72     	; 0xbe2a <ProcessMixer+0x7fa>
    bde2:	f8 01       	movw	r30, r16
    bde4:	ea 54       	subi	r30, 0x4A	; 74
    bde6:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    bde8:	60 81       	ld	r22, Z
    bdea:	55 e0       	ldi	r21, 0x05	; 5
    bdec:	65 02       	muls	r22, r21
    bdee:	b0 01       	movw	r22, r0
    bdf0:	11 24       	eor	r1, r1
    bdf2:	ab 96       	adiw	r28, 0x2b	; 43
    bdf4:	8e ad       	ldd	r24, Y+62	; 0x3e
    bdf6:	9f ad       	ldd	r25, Y+63	; 0x3f
    bdf8:	ab 97       	sbiw	r28, 0x2b	; 43
    bdfa:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    bdfe:	c8 0e       	add	r12, r24
    be00:	d9 1e       	adc	r13, r25
					break;
    be02:	13 c0       	rjmp	.+38     	; 0xbe2a <ProcessMixer+0x7fa>
    be04:	f8 01       	movw	r30, r16
    be06:	ea 54       	subi	r30, 0x4A	; 74
    be08:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    be0a:	80 81       	ld	r24, Z
    be0c:	87 ff       	sbrs	r24, 7
    be0e:	07 c0       	rjmp	.+14     	; 0xbe1e <ProcessMixer+0x7ee>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    be10:	ab 96       	adiw	r28, 0x2b	; 43
    be12:	2e ad       	ldd	r18, Y+62	; 0x3e
    be14:	3f ad       	ldd	r19, Y+63	; 0x3f
    be16:	ab 97       	sbiw	r28, 0x2b	; 43
    be18:	c2 1a       	sub	r12, r18
    be1a:	d3 0a       	sbc	r13, r19
    be1c:	06 c0       	rjmp	.+12     	; 0xbe2a <ProcessMixer+0x7fa>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    be1e:	ab 96       	adiw	r28, 0x2b	; 43
    be20:	4e ad       	ldd	r20, Y+62	; 0x3e
    be22:	5f ad       	ldd	r21, Y+63	; 0x3f
    be24:	ab 97       	sbiw	r28, 0x2b	; 43
    be26:	c4 0e       	add	r12, r20
    be28:	d5 1e       	adc	r13, r21
    be2a:	f8 01       	movw	r30, r16
    be2c:	ec 53       	subi	r30, 0x3C	; 60
    be2e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    be30:	80 81       	ld	r24, Z
    be32:	81 30       	cpi	r24, 0x01	; 1
    be34:	99 f0       	breq	.+38     	; 0xbe5c <ProcessMixer+0x82c>
    be36:	82 30       	cpi	r24, 0x02	; 2
    be38:	21 f5       	brne	.+72     	; 0xbe82 <ProcessMixer+0x852>
    be3a:	f8 01       	movw	r30, r16
    be3c:	ef 54       	subi	r30, 0x4F	; 79
    be3e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    be40:	60 81       	ld	r22, Z
    be42:	55 e0       	ldi	r21, 0x05	; 5
    be44:	65 02       	muls	r22, r21
    be46:	b0 01       	movw	r22, r0
    be48:	11 24       	eor	r1, r1
    be4a:	ad 96       	adiw	r28, 0x2d	; 45
    be4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    be4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    be50:	ad 97       	sbiw	r28, 0x2d	; 45
    be52:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    be56:	c8 1a       	sub	r12, r24
    be58:	d9 0a       	sbc	r13, r25
					break;
    be5a:	13 c0       	rjmp	.+38     	; 0xbe82 <ProcessMixer+0x852>
    be5c:	f8 01       	movw	r30, r16
    be5e:	ef 54       	subi	r30, 0x4F	; 79
    be60:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    be62:	80 81       	ld	r24, Z
    be64:	87 ff       	sbrs	r24, 7
    be66:	07 c0       	rjmp	.+14     	; 0xbe76 <ProcessMixer+0x846>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    be68:	ad 96       	adiw	r28, 0x2d	; 45
    be6a:	2e ad       	ldd	r18, Y+62	; 0x3e
    be6c:	3f ad       	ldd	r19, Y+63	; 0x3f
    be6e:	ad 97       	sbiw	r28, 0x2d	; 45
    be70:	c2 0e       	add	r12, r18
    be72:	d3 1e       	adc	r13, r19
    be74:	06 c0       	rjmp	.+12     	; 0xbe82 <ProcessMixer+0x852>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    be76:	ad 96       	adiw	r28, 0x2d	; 45
    be78:	4e ad       	ldd	r20, Y+62	; 0x3e
    be7a:	5f ad       	ldd	r21, Y+63	; 0x3f
    be7c:	ad 97       	sbiw	r28, 0x2d	; 45
    be7e:	c4 1a       	sub	r12, r20
    be80:	d5 0a       	sbc	r13, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (transition < 100)
    be82:	84 e6       	ldi	r24, 0x64	; 100
    be84:	a8 16       	cp	r10, r24
    be86:	b1 04       	cpc	r11, r1
    be88:	0c f0       	brlt	.+2      	; 0xbe8c <ProcessMixer+0x85c>
    be8a:	68 c0       	rjmp	.+208    	; 0xbf5c <ProcessMixer+0x92c>
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume != 0) 					// Mix in dedicated aileron
    be8c:	66 96       	adiw	r28, 0x16	; 22
    be8e:	2f ad       	ldd	r18, Y+63	; 0x3f
    be90:	66 97       	sbiw	r28, 0x16	; 22
    be92:	22 23       	and	r18, r18
    be94:	59 f0       	breq	.+22     	; 0xbeac <ProcessMixer+0x87c>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    be96:	80 91 85 09 	lds	r24, 0x0985
    be9a:	90 91 86 09 	lds	r25, 0x0986
    be9e:	62 2f       	mov	r22, r18
    bea0:	22 0f       	add	r18, r18
    bea2:	77 0b       	sbc	r23, r23
    bea4:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
				P1_solution = P1_solution + temp2;
    bea8:	88 0e       	add	r8, r24
    beaa:	99 1e       	adc	r9, r25
    beac:	f8 01       	movw	r30, r16
    beae:	eb 54       	subi	r30, 0x4B	; 75
    beb0:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume != 0) 					// Mix in dedicated elevator
    beb2:	60 81       	ld	r22, Z
    beb4:	66 23       	and	r22, r22
    beb6:	59 f0       	breq	.+22     	; 0xbece <ProcessMixer+0x89e>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    beb8:	80 91 87 09 	lds	r24, 0x0987
    bebc:	90 91 88 09 	lds	r25, 0x0988
    bec0:	06 2e       	mov	r0, r22
    bec2:	00 0c       	add	r0, r0
    bec4:	77 0b       	sbc	r23, r23
    bec6:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
				P1_solution = P1_solution + temp2;
    beca:	88 0e       	add	r8, r24
    becc:	99 1e       	adc	r9, r25
			}
			if (Config.Channel[i].P1_rudder_volume != 0) 					// Mix in dedicated rudder
    bece:	66 20       	and	r6, r6
    bed0:	59 f0       	breq	.+22     	; 0xbee8 <ProcessMixer+0x8b8>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    bed2:	80 91 89 09 	lds	r24, 0x0989
    bed6:	90 91 8a 09 	lds	r25, 0x098A
    beda:	66 2d       	mov	r22, r6
    bedc:	66 0c       	add	r6, r6
    bede:	77 0b       	sbc	r23, r23
    bee0:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
				P1_solution = P1_solution + temp2;
    bee4:	88 0e       	add	r8, r24
    bee6:	99 1e       	adc	r9, r25
    bee8:	f8 01       	movw	r30, r16
    beea:	ea 53       	subi	r30, 0x3A	; 58
    beec:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume != 0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    beee:	60 81       	ld	r22, Z
    bef0:	66 23       	and	r22, r22
    bef2:	a9 f0       	breq	.+42     	; 0xbf1e <ProcessMixer+0x8ee>
    bef4:	31 97       	sbiw	r30, 0x01	; 1
    bef6:	e0 81       	ld	r30, Z
    bef8:	e4 31       	cpi	r30, 0x14	; 20
    befa:	89 f0       	breq	.+34     	; 0xbf1e <ProcessMixer+0x8ee>
			{
				temp2 = UniversalP1[Config.Channel[i].P1_source_a];
    befc:	ee 0f       	add	r30, r30
    befe:	ff 0b       	sbc	r31, r31
    bf00:	41 e0       	ldi	r20, 0x01	; 1
    bf02:	50 e0       	ldi	r21, 0x00	; 0
    bf04:	4c 0f       	add	r20, r28
    bf06:	5d 1f       	adc	r21, r29
    bf08:	e4 0f       	add	r30, r20
    bf0a:	f5 1f       	adc	r31, r21
				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    bf0c:	06 2e       	mov	r0, r22
    bf0e:	00 0c       	add	r0, r0
    bf10:	77 0b       	sbc	r23, r23
    bf12:	82 a5       	ldd	r24, Z+42	; 0x2a
    bf14:	93 a5       	ldd	r25, Z+43	; 0x2b
    bf16:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
				P1_solution = P1_solution + temp2;
    bf1a:	88 0e       	add	r8, r24
    bf1c:	99 1e       	adc	r9, r25
    bf1e:	f8 01       	movw	r30, r16
    bf20:	e6 53       	subi	r30, 0x36	; 54
    bf22:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume != 0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    bf24:	60 81       	ld	r22, Z
    bf26:	66 23       	and	r22, r22
    bf28:	a9 f0       	breq	.+42     	; 0xbf54 <ProcessMixer+0x924>
    bf2a:	31 97       	sbiw	r30, 0x01	; 1
    bf2c:	e0 81       	ld	r30, Z
    bf2e:	e4 31       	cpi	r30, 0x14	; 20
    bf30:	89 f0       	breq	.+34     	; 0xbf54 <ProcessMixer+0x924>
			{
				temp2 = UniversalP1[Config.Channel[i].P1_source_b];
    bf32:	ee 0f       	add	r30, r30
    bf34:	ff 0b       	sbc	r31, r31
    bf36:	81 e0       	ldi	r24, 0x01	; 1
    bf38:	90 e0       	ldi	r25, 0x00	; 0
    bf3a:	8c 0f       	add	r24, r28
    bf3c:	9d 1f       	adc	r25, r29
    bf3e:	e8 0f       	add	r30, r24
    bf40:	f9 1f       	adc	r31, r25
				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    bf42:	06 2e       	mov	r0, r22
    bf44:	00 0c       	add	r0, r0
    bf46:	77 0b       	sbc	r23, r23
    bf48:	82 a5       	ldd	r24, Z+42	; 0x2a
    bf4a:	93 a5       	ldd	r25, Z+43	; 0x2b
    bf4c:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
				P1_solution = P1_solution + temp2;
    bf50:	88 0e       	add	r8, r24
    bf52:	99 1e       	adc	r9, r25
			}
		}

		// Mix in other outputs here (P2)
		if (transition > 0)	
    bf54:	1a 14       	cp	r1, r10
    bf56:	1b 04       	cpc	r1, r11
    bf58:	0c f0       	brlt	.+2      	; 0xbf5c <ProcessMixer+0x92c>
    bf5a:	69 c0       	rjmp	.+210    	; 0xc02e <ProcessMixer+0x9fe>
    bf5c:	f8 01       	movw	r30, r16
    bf5e:	ec 54       	subi	r30, 0x4C	; 76
    bf60:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume != 0) 					// Mix in dedicated aileron
    bf62:	60 81       	ld	r22, Z
    bf64:	66 23       	and	r22, r22
    bf66:	59 f0       	breq	.+22     	; 0xbf7e <ProcessMixer+0x94e>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    bf68:	80 91 85 09 	lds	r24, 0x0985
    bf6c:	90 91 86 09 	lds	r25, 0x0986
    bf70:	06 2e       	mov	r0, r22
    bf72:	00 0c       	add	r0, r0
    bf74:	77 0b       	sbc	r23, r23
    bf76:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
				P2_solution = P2_solution + temp2;
    bf7a:	c8 0e       	add	r12, r24
    bf7c:	d9 1e       	adc	r13, r25
    bf7e:	f8 01       	movw	r30, r16
    bf80:	ea 54       	subi	r30, 0x4A	; 74
    bf82:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume != 0) 					// Mix in dedicated elevator
    bf84:	60 81       	ld	r22, Z
    bf86:	66 23       	and	r22, r22
    bf88:	59 f0       	breq	.+22     	; 0xbfa0 <ProcessMixer+0x970>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    bf8a:	80 91 87 09 	lds	r24, 0x0987
    bf8e:	90 91 88 09 	lds	r25, 0x0988
    bf92:	06 2e       	mov	r0, r22
    bf94:	00 0c       	add	r0, r0
    bf96:	77 0b       	sbc	r23, r23
    bf98:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
				P2_solution = P2_solution + temp2;
    bf9c:	c8 0e       	add	r12, r24
    bf9e:	d9 1e       	adc	r13, r25
    bfa0:	f8 01       	movw	r30, r16
    bfa2:	e8 54       	subi	r30, 0x48	; 72
    bfa4:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume != 0) 					// Mix in dedicated rudder
    bfa6:	60 81       	ld	r22, Z
    bfa8:	66 23       	and	r22, r22
    bfaa:	59 f0       	breq	.+22     	; 0xbfc2 <ProcessMixer+0x992>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    bfac:	80 91 89 09 	lds	r24, 0x0989
    bfb0:	90 91 8a 09 	lds	r25, 0x098A
    bfb4:	06 2e       	mov	r0, r22
    bfb6:	00 0c       	add	r0, r0
    bfb8:	77 0b       	sbc	r23, r23
    bfba:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
				P2_solution = P2_solution + temp2;
    bfbe:	c8 0e       	add	r12, r24
    bfc0:	d9 1e       	adc	r13, r25
    bfc2:	f8 01       	movw	r30, r16
    bfc4:	e8 53       	subi	r30, 0x38	; 56
    bfc6:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume != 0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    bfc8:	60 81       	ld	r22, Z
    bfca:	66 23       	and	r22, r22
    bfcc:	a9 f0       	breq	.+42     	; 0xbff8 <ProcessMixer+0x9c8>
    bfce:	31 97       	sbiw	r30, 0x01	; 1
    bfd0:	e0 81       	ld	r30, Z
    bfd2:	e4 31       	cpi	r30, 0x14	; 20
    bfd4:	89 f0       	breq	.+34     	; 0xbff8 <ProcessMixer+0x9c8>
			{
				temp2 = UniversalP2[Config.Channel[i].P2_source_a];
    bfd6:	ee 0f       	add	r30, r30
    bfd8:	ff 0b       	sbc	r31, r31
    bfda:	21 e0       	ldi	r18, 0x01	; 1
    bfdc:	30 e0       	ldi	r19, 0x00	; 0
    bfde:	2c 0f       	add	r18, r28
    bfe0:	3d 1f       	adc	r19, r29
    bfe2:	e2 0f       	add	r30, r18
    bfe4:	f3 1f       	adc	r31, r19
				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    bfe6:	06 2e       	mov	r0, r22
    bfe8:	00 0c       	add	r0, r0
    bfea:	77 0b       	sbc	r23, r23
    bfec:	80 81       	ld	r24, Z
    bfee:	91 81       	ldd	r25, Z+1	; 0x01
    bff0:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
				P2_solution = P2_solution + temp2;
    bff4:	c8 0e       	add	r12, r24
    bff6:	d9 1e       	adc	r13, r25
    bff8:	f8 01       	movw	r30, r16
    bffa:	e4 53       	subi	r30, 0x34	; 52
    bffc:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume != 0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    bffe:	60 81       	ld	r22, Z
    c000:	66 23       	and	r22, r22
    c002:	a9 f0       	breq	.+42     	; 0xc02e <ProcessMixer+0x9fe>
    c004:	31 97       	sbiw	r30, 0x01	; 1
    c006:	e0 81       	ld	r30, Z
    c008:	e4 31       	cpi	r30, 0x14	; 20
    c00a:	89 f0       	breq	.+34     	; 0xc02e <ProcessMixer+0x9fe>
			{
				temp2 = UniversalP2[Config.Channel[i].P2_source_b];
    c00c:	ee 0f       	add	r30, r30
    c00e:	ff 0b       	sbc	r31, r31
    c010:	41 e0       	ldi	r20, 0x01	; 1
    c012:	50 e0       	ldi	r21, 0x00	; 0
    c014:	4c 0f       	add	r20, r28
    c016:	5d 1f       	adc	r21, r29
    c018:	e4 0f       	add	r30, r20
    c01a:	f5 1f       	adc	r31, r21
				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    c01c:	06 2e       	mov	r0, r22
    c01e:	00 0c       	add	r0, r0
    c020:	77 0b       	sbc	r23, r23
    c022:	80 81       	ld	r24, Z
    c024:	91 81       	ldd	r25, Z+1	; 0x01
    c026:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
				P2_solution = P2_solution + temp2;
    c02a:	c8 0e       	add	r12, r24
    c02c:	d9 1e       	adc	r13, r25
    c02e:	f8 01       	movw	r30, r16
    c030:	e5 55       	subi	r30, 0x55	; 85
    c032:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    c034:	91 82       	std	Z+1, r9	; 0x01
    c036:	80 82       	st	Z, r8
    c038:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    c03a:	d1 82       	std	Z+1, r13	; 0x01
    c03c:	c0 82       	st	Z, r12
    c03e:	ae 96       	adiw	r28, 0x2e	; 46
    c040:	5f ad       	ldd	r21, Y+63	; 0x3f
    c042:	ae 97       	sbiw	r28, 0x2e	; 46
    c044:	51 50       	subi	r21, 0x01	; 1
    c046:	ae 96       	adiw	r28, 0x2e	; 46
    c048:	5f af       	std	Y+63, r21	; 0x3f
    c04a:	ae 97       	sbiw	r28, 0x2e	; 46
    c04c:	0e 5d       	subi	r16, 0xDE	; 222
    c04e:	1f 4f       	sbci	r17, 0xFF	; 255
	
	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    c050:	51 11       	cpse	r21, r1
    c052:	f2 cc       	rjmp	.-1564   	; 0xba38 <ProcessMixer+0x408>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeedOut != 0) 
    c054:	80 91 67 06 	lds	r24, 0x0667
    c058:	88 23       	and	r24, r24
    c05a:	41 f0       	breq	.+16     	; 0xc06c <ProcessMixer+0xa3c>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    c05c:	80 91 3c 05 	lds	r24, 0x053C
    c060:	90 91 3d 05 	lds	r25, 0x053D
    c064:	90 93 39 05 	sts	0x0539, r25
    c068:	80 93 38 05 	sts	0x0538, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    c06c:	00 91 38 05 	lds	r16, 0x0538
    c070:	10 91 39 05 	lds	r17, 0x0539
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    c074:	84 e6       	ldi	r24, 0x64	; 100
    c076:	90 e0       	ldi	r25, 0x00	; 0
    c078:	5c 01       	movw	r10, r24
    c07a:	a0 1a       	sub	r10, r16
    c07c:	b1 0a       	sbc	r11, r17
    c07e:	54 ee       	ldi	r21, 0xE4	; 228
    c080:	65 2e       	mov	r6, r21
    c082:	56 e0       	ldi	r21, 0x06	; 6
    c084:	75 2e       	mov	r7, r21
    c086:	43 01       	movw	r8, r6

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    c088:	01 15       	cp	r16, r1
    c08a:	11 05       	cpc	r17, r1
    c08c:	21 f4       	brne	.+8      	; 0xc096 <ProcessMixer+0xa66>
		{
			temp1 = Config.Channel[i].P1_value;
    c08e:	f4 01       	movw	r30, r8
    c090:	80 81       	ld	r24, Z
    c092:	91 81       	ldd	r25, Z+1	; 0x01
    c094:	16 c0       	rjmp	.+44     	; 0xc0c2 <ProcessMixer+0xa92>
		}
		else if (transition >= 100)
    c096:	04 36       	cpi	r16, 0x64	; 100
    c098:	11 05       	cpc	r17, r1
    c09a:	24 f0       	brlt	.+8      	; 0xc0a4 <ProcessMixer+0xa74>
		{
			temp1 = Config.Channel[i].P2_value;
    c09c:	f4 01       	movw	r30, r8
    c09e:	82 81       	ldd	r24, Z+2	; 0x02
    c0a0:	93 81       	ldd	r25, Z+3	; 0x03
    c0a2:	0f c0       	rjmp	.+30     	; 0xc0c2 <ProcessMixer+0xa92>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    c0a4:	b5 01       	movw	r22, r10
    c0a6:	f4 01       	movw	r30, r8
    c0a8:	80 81       	ld	r24, Z
    c0aa:	91 81       	ldd	r25, Z+1	; 0x01
    c0ac:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>
    c0b0:	6c 01       	movw	r12, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    c0b2:	b8 01       	movw	r22, r16
    c0b4:	f4 01       	movw	r30, r8
    c0b6:	82 81       	ldd	r24, Z+2	; 0x02
    c0b8:	93 81       	ldd	r25, Z+3	; 0x03
    c0ba:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    c0be:	8c 0d       	add	r24, r12
    c0c0:	9d 1d       	adc	r25, r13
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    c0c2:	f4 01       	movw	r30, r8
    c0c4:	91 83       	std	Z+1, r25	; 0x01
    c0c6:	80 83       	st	Z, r24
    c0c8:	f2 e2       	ldi	r31, 0x22	; 34
    c0ca:	8f 0e       	add	r8, r31
    c0cc:	91 1c       	adc	r9, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    c0ce:	24 ef       	ldi	r18, 0xF4	; 244
    c0d0:	82 16       	cp	r8, r18
    c0d2:	27 e0       	ldi	r18, 0x07	; 7
    c0d4:	92 06       	cpc	r9, r18
    c0d6:	c1 f6       	brne	.-80     	; 0xc088 <ProcessMixer+0xa58>
	// Work out the resultant Monopolar throttle value based on
	// P1_throttle, P2_throttle and the transition number
	//************************************************************ 

	// Only process if there is a difference
	if (P1_throttle != P2_throttle)
    c0d8:	2e 14       	cp	r2, r14
    c0da:	3f 04       	cpc	r3, r15
    c0dc:	99 f1       	breq	.+102    	; 0xc144 <ProcessMixer+0xb14>
	{
		// Speed up the easy ones :)
		if (transition == 0)
    c0de:	01 15       	cp	r16, r1
    c0e0:	11 05       	cpc	r17, r1
    c0e2:	81 f1       	breq	.+96     	; 0xc144 <ProcessMixer+0xb14>
		{
			e32temp3 = P1_throttle;
		}
		else if (transition >= 100)
    c0e4:	04 36       	cpi	r16, 0x64	; 100
    c0e6:	11 05       	cpc	r17, r1
    c0e8:	2c f0       	brlt	.+10     	; 0xc0f4 <ProcessMixer+0xac4>
		{
			e32temp3 = P2_throttle;
    c0ea:	c7 01       	movw	r24, r14
    c0ec:	ff 0c       	add	r15, r15
    c0ee:	aa 0b       	sbc	r26, r26
    c0f0:	bb 0b       	sbc	r27, r27
    c0f2:	2c c0       	rjmp	.+88     	; 0xc14c <ProcessMixer+0xb1c>
		}
		else
		{
			// Calculate step difference in 1/100ths and round
			e32temp1 = (P2_throttle - P1_throttle);
    c0f4:	b7 01       	movw	r22, r14
    c0f6:	62 19       	sub	r22, r2
    c0f8:	73 09       	sbc	r23, r3
    c0fa:	cb 01       	movw	r24, r22
    c0fc:	77 0f       	add	r23, r23
    c0fe:	aa 0b       	sbc	r26, r26
    c100:	bb 0b       	sbc	r27, r27
			e32temp1 = e32temp1 << 16; 						// Multiply by 65536 so divide gives reasonable step values
			e32Step1 = e32temp1 / (int32_t)100;

			// Set start (P1) point
			e32temp2 = P1_throttle;							// Promote to 32 bits
    c102:	a1 01       	movw	r20, r2
    c104:	33 0c       	add	r3, r3
    c106:	66 0b       	sbc	r22, r22
    c108:	77 0b       	sbc	r23, r23
			e32temp2 = e32temp2 << 16;
    c10a:	7a 01       	movw	r14, r20
    c10c:	dd 24       	eor	r13, r13
    c10e:	cc 24       	eor	r12, r12
		}
		else
		{
			// Calculate step difference in 1/100ths and round
			e32temp1 = (P2_throttle - P1_throttle);
			e32temp1 = e32temp1 << 16; 						// Multiply by 65536 so divide gives reasonable step values
    c110:	77 27       	eor	r23, r23
    c112:	66 27       	eor	r22, r22
			e32Step1 = e32temp1 / (int32_t)100;
    c114:	24 e6       	ldi	r18, 0x64	; 100
    c116:	30 e0       	ldi	r19, 0x00	; 0
    c118:	40 e0       	ldi	r20, 0x00	; 0
    c11a:	50 e0       	ldi	r21, 0x00	; 0
    c11c:	0e 94 40 6f 	call	0xde80	; 0xde80 <__divmodsi4>
			// Set start (P1) point
			e32temp2 = P1_throttle;							// Promote to 32 bits
			e32temp2 = e32temp2 << 16;

			// Multiply [transition] steps (0 to 100)
			e32temp3 = e32temp2 + (e32Step1 * transition);
    c120:	d8 01       	movw	r26, r16
    c122:	0e 94 8e 6f 	call	0xdf1c	; 0xdf1c <__mulshisi3>
    c126:	dc 01       	movw	r26, r24
    c128:	cb 01       	movw	r24, r22
    c12a:	8c 0d       	add	r24, r12
    c12c:	9d 1d       	adc	r25, r13
    c12e:	ae 1d       	adc	r26, r14
    c130:	bf 1d       	adc	r27, r15

			// Round, then rescale to normal value
			e32temp3 = e32temp3 + (int32_t)32768;
    c132:	90 58       	subi	r25, 0x80	; 128
    c134:	af 4f       	sbci	r26, 0xFF	; 255
    c136:	bf 4f       	sbci	r27, 0xFF	; 255
			e32temp3 = e32temp3 >> 16;			
    c138:	cd 01       	movw	r24, r26
    c13a:	bb 27       	eor	r27, r27
    c13c:	97 fd       	sbrc	r25, 7
    c13e:	b0 95       	com	r27
    c140:	ab 2f       	mov	r26, r27
    c142:	04 c0       	rjmp	.+8      	; 0xc14c <ProcessMixer+0xb1c>
			
	// No curve
	else
	{
		// Just use the value of P1_throttle as there is no curve
		e32temp3 = P1_throttle; // Promote to 16 bits
    c144:	c1 01       	movw	r24, r2
    c146:	33 0c       	add	r3, r3
    c148:	aa 0b       	sbc	r26, r26
    c14a:	bb 0b       	sbc	r27, r27
	}

	// Copy to monopolar throttle
	monothrottle = (int16_t)e32temp3;
    c14c:	1c 01       	movw	r2, r24
    c14e:	6a ee       	ldi	r22, 0xEA	; 234
    c150:	e6 2e       	mov	r14, r22
    c152:	66 e0       	ldi	r22, 0x06	; 6
    c154:	f6 2e       	mov	r15, r22
    c156:	74 ee       	ldi	r23, 0xE4	; 228
    c158:	c7 2e       	mov	r12, r23
    c15a:	76 e0       	ldi	r23, 0x06	; 6
    c15c:	d7 2e       	mov	r13, r23
    c15e:	a1 2c       	mov	r10, r1
    c160:	b1 2c       	mov	r11, r1
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    c162:	e4 e6       	ldi	r30, 0x64	; 100
    c164:	8e 2e       	mov	r8, r30
    c166:	91 2c       	mov	r9, r1
    c168:	80 2f       	mov	r24, r16
    c16a:	00 2e       	mov	r0, r16
    c16c:	00 0c       	add	r0, r0
    c16e:	99 0b       	sbc	r25, r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    c170:	ac 01       	movw	r20, r24
    c172:	4c 50       	subi	r20, 0x0C	; 12
    c174:	55 4d       	sbci	r21, 0xD5	; 213
    c176:	67 96       	adiw	r28, 0x17	; 23
    c178:	5f af       	std	Y+63, r21	; 0x3f
    c17a:	4e af       	std	Y+62, r20	; 0x3e
    c17c:	67 97       	sbiw	r28, 0x17	; 23
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    c17e:	94 01       	movw	r18, r8
    c180:	28 1b       	sub	r18, r24
    c182:	39 0b       	sbc	r19, r25
    c184:	a9 01       	movw	r20, r18
    c186:	4c 50       	subi	r20, 0x0C	; 12
    c188:	55 4d       	sbci	r21, 0xD5	; 213
    c18a:	69 96       	adiw	r28, 0x19	; 25
    c18c:	5f af       	std	Y+63, r21	; 0x3f
    c18e:	4e af       	std	Y+62, r20	; 0x3e
    c190:	69 97       	sbiw	r28, 0x19	; 25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    c192:	ac 01       	movw	r20, r24
    c194:	47 5a       	subi	r20, 0xA7	; 167
    c196:	54 4d       	sbci	r21, 0xD4	; 212
    c198:	6b 96       	adiw	r28, 0x1b	; 27
    c19a:	5f af       	std	Y+63, r21	; 0x3f
    c19c:	4e af       	std	Y+62, r20	; 0x3e
    c19e:	6b 97       	sbiw	r28, 0x1b	; 27
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    c1a0:	a9 01       	movw	r20, r18
    c1a2:	47 5a       	subi	r20, 0xA7	; 167
    c1a4:	54 4d       	sbci	r21, 0xD4	; 212
    c1a6:	6d 96       	adiw	r28, 0x1d	; 29
    c1a8:	5f af       	std	Y+63, r21	; 0x3f
    c1aa:	4e af       	std	Y+62, r20	; 0x3e
    c1ac:	6d 97       	sbiw	r28, 0x1d	; 29
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms. THROTTLEOFFSET = 1250
    c1ae:	fe e1       	ldi	r31, 0x1E	; 30
    c1b0:	4f 2e       	mov	r4, r31
    c1b2:	fb ef       	ldi	r31, 0xFB	; 251
    c1b4:	5f 2e       	mov	r5, r31
    c1b6:	f7 01       	movw	r30, r14
    c1b8:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    c1ba:	90 81       	ld	r25, Z
    c1bc:	f7 01       	movw	r30, r14
    c1be:	80 81       	ld	r24, Z
    c1c0:	91 11       	cpse	r25, r1
    c1c2:	03 c0       	rjmp	.+6      	; 0xc1ca <ProcessMixer+0xb9a>
    c1c4:	88 23       	and	r24, r24
    c1c6:	09 f4       	brne	.+2      	; 0xc1ca <ProcessMixer+0xb9a>
    c1c8:	6b c0       	rjmp	.+214    	; 0xc2a0 <ProcessMixer+0xc70>
    c1ca:	29 2f       	mov	r18, r25
    c1cc:	09 2e       	mov	r0, r25
    c1ce:	00 0c       	add	r0, r0
    c1d0:	33 0b       	sbc	r19, r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    c1d2:	98 17       	cp	r25, r24
    c1d4:	09 f4       	brne	.+2      	; 0xc1d8 <ProcessMixer+0xba8>
    c1d6:	56 c0       	rjmp	.+172    	; 0xc284 <ProcessMixer+0xc54>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    c1d8:	08 2e       	mov	r0, r24
    c1da:	00 0c       	add	r0, r0
    c1dc:	99 0b       	sbc	r25, r25
    c1de:	82 1b       	sub	r24, r18
    c1e0:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    c1e2:	96 95       	lsr	r25
    c1e4:	98 2f       	mov	r25, r24
    c1e6:	88 27       	eor	r24, r24
    c1e8:	97 95       	ror	r25
    c1ea:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    c1ec:	b4 01       	movw	r22, r8
    c1ee:	0e 94 2c 6f 	call	0xde58	; 0xde58 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    c1f2:	c9 01       	movw	r24, r18
    c1f4:	96 95       	lsr	r25
    c1f6:	98 2f       	mov	r25, r24
    c1f8:	88 27       	eor	r24, r24
    c1fa:	97 95       	ror	r25
    c1fc:	87 95       	ror	r24
    c1fe:	f5 01       	movw	r30, r10
    c200:	e5 51       	subi	r30, 0x15	; 21
    c202:	f9 4f       	sbci	r31, 0xF9	; 249

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    c204:	20 81       	ld	r18, Z
    c206:	21 11       	cpse	r18, r1
    c208:	08 c0       	rjmp	.+16     	; 0xc21a <ProcessMixer+0xbea>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    c20a:	60 9f       	mul	r22, r16
    c20c:	a0 01       	movw	r20, r0
    c20e:	61 9f       	mul	r22, r17
    c210:	50 0d       	add	r21, r0
    c212:	70 9f       	mul	r23, r16
    c214:	50 0d       	add	r21, r0
    c216:	11 24       	eor	r1, r1
    c218:	2b c0       	rjmp	.+86     	; 0xc270 <ProcessMixer+0xc40>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    c21a:	21 30       	cpi	r18, 0x01	; 1
    c21c:	61 f4       	brne	.+24     	; 0xc236 <ProcessMixer+0xc06>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    c21e:	77 ff       	sbrs	r23, 7
    c220:	05 c0       	rjmp	.+10     	; 0xc22c <ProcessMixer+0xbfc>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    c222:	6d 96       	adiw	r28, 0x1d	; 29
    c224:	ee ad       	ldd	r30, Y+62	; 0x3e
    c226:	ff ad       	ldd	r31, Y+63	; 0x3f
    c228:	6d 97       	sbiw	r28, 0x1d	; 29
    c22a:	0b c0       	rjmp	.+22     	; 0xc242 <ProcessMixer+0xc12>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    c22c:	6b 96       	adiw	r28, 0x1b	; 27
    c22e:	ee ad       	ldd	r30, Y+62	; 0x3e
    c230:	ff ad       	ldd	r31, Y+63	; 0x3f
    c232:	6b 97       	sbiw	r28, 0x1b	; 27
    c234:	12 c0       	rjmp	.+36     	; 0xc25a <ProcessMixer+0xc2a>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    c236:	77 ff       	sbrs	r23, 7
    c238:	0c c0       	rjmp	.+24     	; 0xc252 <ProcessMixer+0xc22>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    c23a:	69 96       	adiw	r28, 0x19	; 25
    c23c:	ee ad       	ldd	r30, Y+62	; 0x3e
    c23e:	ff ad       	ldd	r31, Y+63	; 0x3f
    c240:	69 97       	sbiw	r28, 0x19	; 25
    c242:	24 91       	lpm	r18, Z
    c244:	a4 01       	movw	r20, r8
    c246:	42 1b       	sub	r20, r18
    c248:	51 09       	sbc	r21, r1
    c24a:	27 fd       	sbrc	r18, 7
    c24c:	53 95       	inc	r21
    c24e:	9a 01       	movw	r18, r20
    c250:	08 c0       	rjmp	.+16     	; 0xc262 <ProcessMixer+0xc32>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    c252:	67 96       	adiw	r28, 0x17	; 23
    c254:	ee ad       	ldd	r30, Y+62	; 0x3e
    c256:	ff ad       	ldd	r31, Y+63	; 0x3f
    c258:	67 97       	sbiw	r28, 0x17	; 23
    c25a:	24 91       	lpm	r18, Z
    c25c:	02 2e       	mov	r0, r18
    c25e:	00 0c       	add	r0, r0
    c260:	33 0b       	sbc	r19, r19
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    c262:	62 9f       	mul	r22, r18
    c264:	a0 01       	movw	r20, r0
    c266:	63 9f       	mul	r22, r19
    c268:	50 0d       	add	r21, r0
    c26a:	72 9f       	mul	r23, r18
    c26c:	50 0d       	add	r21, r0
    c26e:	11 24       	eor	r1, r1
    c270:	84 0f       	add	r24, r20
    c272:	95 1f       	adc	r25, r21
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    c274:	bc 01       	movw	r22, r24
    c276:	60 5c       	subi	r22, 0xC0	; 192
    c278:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    c27a:	66 0f       	add	r22, r22
    c27c:	67 2f       	mov	r22, r23
    c27e:	66 1f       	adc	r22, r22
    c280:	77 0b       	sbc	r23, r23
    c282:	01 c0       	rjmp	.+2      	; 0xc286 <ProcessMixer+0xc56>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    c284:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(monothrottle, temp3);
    c286:	c1 01       	movw	r24, r2
    c288:	0e 94 3d 59 	call	0xb27a	; 0xb27a <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of -1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    c28c:	88 5e       	subi	r24, 0xE8	; 232
    c28e:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    c290:	f6 01       	movw	r30, r12
    c292:	20 81       	ld	r18, Z
    c294:	31 81       	ldd	r19, Z+1	; 0x01
    c296:	82 0f       	add	r24, r18
    c298:	93 1f       	adc	r25, r19
    c29a:	91 83       	std	Z+1, r25	; 0x01
    c29c:	80 83       	st	Z, r24
    c29e:	08 c0       	rjmp	.+16     	; 0xc2b0 <ProcessMixer+0xc80>
    c2a0:	f7 01       	movw	r30, r14
    c2a2:	32 97       	sbiw	r30, 0x02	; 2

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    c2a4:	80 81       	ld	r24, Z
    c2a6:	82 30       	cpi	r24, 0x02	; 2
    c2a8:	19 f4       	brne	.+6      	; 0xc2b0 <ProcessMixer+0xc80>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms. THROTTLEOFFSET = 1250
    c2aa:	f6 01       	movw	r30, r12
    c2ac:	51 82       	std	Z+1, r5	; 0x01
    c2ae:	40 82       	st	Z, r4
    c2b0:	f2 e2       	ldi	r31, 0x22	; 34
    c2b2:	af 0e       	add	r10, r31
    c2b4:	b1 1c       	adc	r11, r1
    c2b6:	22 e2       	ldi	r18, 0x22	; 34
    c2b8:	c2 0e       	add	r12, r18
    c2ba:	d1 1c       	adc	r13, r1
    c2bc:	32 e2       	ldi	r19, 0x22	; 34
    c2be:	e3 0e       	add	r14, r19
    c2c0:	f1 1c       	adc	r15, r1
	// Groovy transition curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    c2c2:	40 e1       	ldi	r20, 0x10	; 16
    c2c4:	a4 16       	cp	r10, r20
    c2c6:	41 e0       	ldi	r20, 0x01	; 1
    c2c8:	b4 06       	cpc	r11, r20
    c2ca:	09 f0       	breq	.+2      	; 0xc2ce <ProcessMixer+0xc9e>
    c2cc:	74 cf       	rjmp	.-280    	; 0xc1b6 <ProcessMixer+0xb86>
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// The input to the curves will be the transition number, altered to appear as -1000 to 1000.
		temp1 = (transition - 50) * 20; // 0 - 100 -> -1000 to 1000
    c2ce:	02 53       	subi	r16, 0x32	; 50
    c2d0:	11 09       	sbc	r17, r1
    c2d2:	84 e1       	ldi	r24, 0x14	; 20
    c2d4:	80 9f       	mul	r24, r16
    c2d6:	70 01       	movw	r14, r0
    c2d8:	81 9f       	mul	r24, r17
    c2da:	f0 0c       	add	r15, r0
    c2dc:	11 24       	eor	r1, r1
    c2de:	16 e0       	ldi	r17, 0x06	; 6

		// Process as 7-point offset curve. All are BIPOLAR types.
		// Temporarily add NUMBEROFCURVES to the curve number to identify 
		// them to Process_curve() as being offsets, not the other curves.
		temp2 = Process_curve(i + NUMBEROFCURVES, BIPOLAR, temp1);
    c2e0:	a7 01       	movw	r20, r14
    c2e2:	61 e0       	ldi	r22, 0x01	; 1
    c2e4:	81 2f       	mov	r24, r17
    c2e6:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <Process_curve>
		
		// Add offset to channel value
		Config.Channel[i].P1_value += temp2;
    c2ea:	f3 01       	movw	r30, r6
    c2ec:	20 81       	ld	r18, Z
    c2ee:	31 81       	ldd	r19, Z+1	; 0x01
    c2f0:	82 0f       	add	r24, r18
    c2f2:	93 1f       	adc	r25, r19
    c2f4:	91 83       	std	Z+1, r25	; 0x01
    c2f6:	80 83       	st	Z, r24
    c2f8:	1f 5f       	subi	r17, 0xFF	; 255
    c2fa:	f2 e2       	ldi	r31, 0x22	; 34
    c2fc:	6f 0e       	add	r6, r31
    c2fe:	71 1c       	adc	r7, r1
	//************************************************************
	// Per-channel 7-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    c300:	1e 30       	cpi	r17, 0x0E	; 14
    c302:	71 f7       	brne	.-36     	; 0xc2e0 <ProcessMixer+0xcb0>
		
		// Add offset to channel value
		Config.Channel[i].P1_value += temp2;
	}

} // ProcessMixer()
    c304:	ce 58       	subi	r28, 0x8E	; 142
    c306:	df 4f       	sbci	r29, 0xFF	; 255
    c308:	0f b6       	in	r0, 0x3f	; 63
    c30a:	f8 94       	cli
    c30c:	de bf       	out	0x3e, r29	; 62
    c30e:	0f be       	out	0x3f, r0	; 63
    c310:	cd bf       	out	0x3d, r28	; 61
    c312:	df 91       	pop	r29
    c314:	cf 91       	pop	r28
    c316:	1f 91       	pop	r17
    c318:	0f 91       	pop	r16
    c31a:	ff 90       	pop	r15
    c31c:	ef 90       	pop	r14
    c31e:	df 90       	pop	r13
    c320:	cf 90       	pop	r12
    c322:	bf 90       	pop	r11
    c324:	af 90       	pop	r10
    c326:	9f 90       	pop	r9
    c328:	8f 90       	pop	r8
    c32a:	7f 90       	pop	r7
    c32c:	6f 90       	pop	r6
    c32e:	5f 90       	pop	r5
    c330:	4f 90       	pop	r4
    c332:	3f 90       	pop	r3
    c334:	2f 90       	pop	r2
    c336:	08 95       	ret

0000c338 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    c338:	df 92       	push	r13
    c33a:	ef 92       	push	r14
    c33c:	ff 92       	push	r15
    c33e:	0f 93       	push	r16
    c340:	1f 93       	push	r17
    c342:	cf 93       	push	r28
    c344:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    c346:	fc 01       	movw	r30, r24
    c348:	01 90       	ld	r0, Z+
    c34a:	00 20       	and	r0, r0
    c34c:	e9 f7       	brne	.-6      	; 0xc348 <mugui_text_sizestring+0x10>
    c34e:	31 97       	sbiw	r30, 0x01	; 1
    c350:	9f 01       	movw	r18, r30
    c352:	28 1b       	sub	r18, r24
    c354:	39 0b       	sbc	r19, r25
	height = pgm_read_byte(&font[4]);
    c356:	fb 01       	movw	r30, r22
    c358:	34 96       	adiw	r30, 0x04	; 4
    c35a:	e4 91       	lpm	r30, Z
    c35c:	ce 2f       	mov	r28, r30
    c35e:	d0 e0       	ldi	r29, 0x00	; 0

	startcharacter = pgm_read_byte(&font[2]);
    c360:	fb 01       	movw	r30, r22
    c362:	32 96       	adiw	r30, 0x02	; 2
    c364:	d4 90       	lpm	r13, Z
    c366:	dc 01       	movw	r26, r24
    c368:	82 0f       	add	r24, r18
    c36a:	93 1f       	adc	r25, r19
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    c36c:	e1 2c       	mov	r14, r1
    c36e:	f1 2c       	mov	r15, r1
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    c370:	a8 17       	cp	r26, r24
    c372:	b9 07       	cpc	r27, r25
    c374:	31 f1       	breq	.+76     	; 0xc3c2 <mugui_text_sizestring+0x8a>
	{
		index = s[i] - startcharacter;
    c376:	2d 91       	ld	r18, X+
    c378:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    c37a:	30 e0       	ldi	r19, 0x00	; 0
    c37c:	22 0f       	add	r18, r18
    c37e:	33 1f       	adc	r19, r19
    c380:	f9 01       	movw	r30, r18
    c382:	35 96       	adiw	r30, 0x05	; 5
    c384:	e6 0f       	add	r30, r22
    c386:	f7 1f       	adc	r31, r23
    c388:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    c38a:	f9 01       	movw	r30, r18
    c38c:	36 96       	adiw	r30, 0x06	; 6
    c38e:	e6 0f       	add	r30, r22
    c390:	f7 1f       	adc	r31, r23
    c392:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    c394:	10 e0       	ldi	r17, 0x00	; 0
    c396:	20 e0       	ldi	r18, 0x00	; 0
    c398:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    c39a:	32 2f       	mov	r19, r18
    c39c:	21 2f       	mov	r18, r17
    c39e:	10 2f       	mov	r17, r16
    c3a0:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    c3a2:	0e 0f       	add	r16, r30
    c3a4:	11 1d       	adc	r17, r1
    c3a6:	21 1d       	adc	r18, r1
    c3a8:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    c3aa:	fb 01       	movw	r30, r22
    c3ac:	e0 0f       	add	r30, r16
    c3ae:	f1 1f       	adc	r31, r17
    c3b0:	04 91       	lpm	r16, Z
    c3b2:	e0 2f       	mov	r30, r16
    c3b4:	f0 e0       	ldi	r31, 0x00	; 0
    c3b6:	8f 01       	movw	r16, r30
    c3b8:	0f 5f       	subi	r16, 0xFF	; 255
    c3ba:	1f 4f       	sbci	r17, 0xFF	; 255
    c3bc:	e0 0e       	add	r14, r16
    c3be:	f1 1e       	adc	r15, r17
    c3c0:	d7 cf       	rjmp	.-82     	; 0xc370 <mugui_text_sizestring+0x38>
	}

	/* prepare return value */
	size->x = width;
    c3c2:	fa 01       	movw	r30, r20
    c3c4:	f1 82       	std	Z+1, r15	; 0x01
    c3c6:	e0 82       	st	Z, r14
	size->y = height;
    c3c8:	d3 83       	std	Z+3, r29	; 0x03
    c3ca:	c2 83       	std	Z+2, r28	; 0x02
}
    c3cc:	df 91       	pop	r29
    c3ce:	cf 91       	pop	r28
    c3d0:	1f 91       	pop	r17
    c3d2:	0f 91       	pop	r16
    c3d4:	ff 90       	pop	r15
    c3d6:	ef 90       	pop	r14
    c3d8:	df 90       	pop	r13
    c3da:	08 95       	ret

0000c3dc <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    c3dc:	a2 ec       	ldi	r26, 0xC2	; 194
    c3de:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    c3e0:	20 e0       	ldi	r18, 0x00	; 0
    c3e2:	30 e0       	ldi	r19, 0x00	; 0
    c3e4:	fc 01       	movw	r30, r24
    c3e6:	e2 0f       	add	r30, r18
    c3e8:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    c3ea:	44 91       	lpm	r20, Z
    c3ec:	44 23       	and	r20, r20
    c3ee:	41 f0       	breq	.+16     	; 0xc400 <pgm_mugui_scopy+0x24>
    c3f0:	28 31       	cpi	r18, 0x18	; 24
    c3f2:	31 05       	cpc	r19, r1
    c3f4:	29 f0       	breq	.+10     	; 0xc400 <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    c3f6:	e4 91       	lpm	r30, Z
    c3f8:	ed 93       	st	X+, r30
		i++;
    c3fa:	2f 5f       	subi	r18, 0xFF	; 255
    c3fc:	3f 4f       	sbci	r19, 0xFF	; 255
    c3fe:	f2 cf       	rjmp	.-28     	; 0xc3e4 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    c400:	f9 01       	movw	r30, r18
    c402:	ee 53       	subi	r30, 0x3E	; 62
    c404:	fa 4f       	sbci	r31, 0xFA	; 250
    c406:	10 82       	st	Z, r1
    c408:	08 95       	ret

0000c40a <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    c40a:	2f 92       	push	r2
    c40c:	3f 92       	push	r3
    c40e:	4f 92       	push	r4
    c410:	5f 92       	push	r5
    c412:	6f 92       	push	r6
    c414:	7f 92       	push	r7
    c416:	8f 92       	push	r8
    c418:	9f 92       	push	r9
    c41a:	af 92       	push	r10
    c41c:	bf 92       	push	r11
    c41e:	cf 92       	push	r12
    c420:	df 92       	push	r13
    c422:	ef 92       	push	r14
    c424:	ff 92       	push	r15
    c426:	0f 93       	push	r16
    c428:	1f 93       	push	r17
    c42a:	cf 93       	push	r28
    c42c:	df 93       	push	r29
    c42e:	cd b7       	in	r28, 0x3d	; 61
    c430:	de b7       	in	r29, 0x3e	; 62
    c432:	27 97       	sbiw	r28, 0x07	; 7
    c434:	0f b6       	in	r0, 0x3f	; 63
    c436:	f8 94       	cli
    c438:	de bf       	out	0x3e, r29	; 62
    c43a:	0f be       	out	0x3f, r0	; 63
    c43c:	cd bf       	out	0x3d, r28	; 61
    c43e:	7b 01       	movw	r14, r22
    c440:	4c 83       	std	Y+4, r20	; 0x04
    c442:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    c444:	fb 01       	movw	r30, r22
    c446:	32 96       	adiw	r30, 0x02	; 2
    c448:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    c44a:	32 96       	adiw	r30, 0x02	; 2
    c44c:	e4 91       	lpm	r30, Z
    c44e:	4e 2e       	mov	r4, r30
    c450:	51 2c       	mov	r5, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    c452:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    c454:	90 e0       	ldi	r25, 0x00	; 0
    c456:	88 0f       	add	r24, r24
    c458:	99 1f       	adc	r25, r25
    c45a:	fc 01       	movw	r30, r24
    c45c:	35 96       	adiw	r30, 0x05	; 5
    c45e:	e6 0f       	add	r30, r22
    c460:	f7 1f       	adc	r31, r23
    c462:	44 91       	lpm	r20, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    c464:	06 96       	adiw	r24, 0x06	; 6
    c466:	fb 01       	movw	r30, r22
    c468:	e8 0f       	add	r30, r24
    c46a:	f9 1f       	adc	r31, r25
    c46c:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    c46e:	50 e0       	ldi	r21, 0x00	; 0
    c470:	60 e0       	ldi	r22, 0x00	; 0
    c472:	70 e0       	ldi	r23, 0x00	; 0
	indexaddress = indexaddress << 8;
    c474:	76 2f       	mov	r23, r22
    c476:	65 2f       	mov	r22, r21
    c478:	54 2f       	mov	r21, r20
    c47a:	44 27       	eor	r20, r20
	indexaddress += indexlowbyte;
    c47c:	8a 01       	movw	r16, r20
    c47e:	9b 01       	movw	r18, r22
    c480:	08 0f       	add	r16, r24
    c482:	11 1d       	adc	r17, r1
    c484:	21 1d       	adc	r18, r1
    c486:	31 1d       	adc	r19, r1
    c488:	d9 01       	movw	r26, r18
    c48a:	c8 01       	movw	r24, r16
	width = pgm_read_byte(&font[indexaddress]);
    c48c:	f7 01       	movw	r30, r14
    c48e:	e0 0f       	add	r30, r16
    c490:	f1 1f       	adc	r31, r17
    c492:	e4 91       	lpm	r30, Z
    c494:	0e 2f       	mov	r16, r30
    c496:	10 e0       	ldi	r17, 0x00	; 0

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    c498:	92 01       	movw	r18, r4
    c49a:	21 50       	subi	r18, 0x01	; 1
    c49c:	31 09       	sbc	r19, r1
    c49e:	43 e0       	ldi	r20, 0x03	; 3
    c4a0:	36 95       	lsr	r19
    c4a2:	27 95       	ror	r18
    c4a4:	4a 95       	dec	r20
    c4a6:	e1 f7       	brne	.-8      	; 0xc4a0 <mugui_lcd_putc+0x96>
    c4a8:	41 e0       	ldi	r20, 0x01	; 1
    c4aa:	42 0f       	add	r20, r18
    c4ac:	49 83       	std	Y+1, r20	; 0x01
    c4ae:	24 2e       	mov	r2, r20
    c4b0:	31 2c       	mov	r3, r1
    c4b2:	fc 01       	movw	r30, r24
    c4b4:	31 96       	adiw	r30, 0x01	; 1
    c4b6:	ff 83       	std	Y+7, r31	; 0x07
    c4b8:	ee 83       	std	Y+6, r30	; 0x06
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    c4ba:	c1 2c       	mov	r12, r1
    c4bc:	d1 2c       	mov	r13, r1
    c4be:	c0 16       	cp	r12, r16
    c4c0:	d1 06       	cpc	r13, r17
    c4c2:	08 f0       	brcs	.+2      	; 0xc4c6 <mugui_lcd_putc+0xbc>
    c4c4:	44 c0       	rjmp	.+136    	; 0xc54e <mugui_lcd_putc+0x144>
    c4c6:	a1 2c       	mov	r10, r1
    c4c8:	b1 2c       	mov	r11, r1
    c4ca:	81 2c       	mov	r8, r1
    c4cc:	91 2c       	mov	r9, r1
    c4ce:	3c 81       	ldd	r19, Y+4	; 0x04
    c4d0:	3c 0d       	add	r19, r12
    c4d2:	3a 83       	std	Y+2, r19	; 0x02
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    c4d4:	39 81       	ldd	r19, Y+1	; 0x01
    c4d6:	a3 16       	cp	r10, r19
    c4d8:	80 f5       	brcc	.+96     	; 0xc53a <mugui_lcd_putc+0x130>
    c4da:	ee 81       	ldd	r30, Y+6	; 0x06
    c4dc:	ff 81       	ldd	r31, Y+7	; 0x07
    c4de:	ea 0d       	add	r30, r10
    c4e0:	fb 1d       	adc	r31, r11
    c4e2:	ee 0d       	add	r30, r14
    c4e4:	ff 1d       	adc	r31, r15
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    c4e6:	34 91       	lpm	r19, Z
    c4e8:	3b 83       	std	Y+3, r19	; 0x03
    c4ea:	61 2c       	mov	r6, r1
    c4ec:	71 2c       	mov	r7, r1
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    c4ee:	84 14       	cp	r8, r4
    c4f0:	95 04       	cpc	r9, r5
    c4f2:	f8 f4       	brcc	.+62     	; 0xc532 <mugui_lcd_putc+0x128>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    c4f4:	81 e0       	ldi	r24, 0x01	; 1
    c4f6:	90 e0       	ldi	r25, 0x00	; 0
    c4f8:	06 2c       	mov	r0, r6
    c4fa:	01 c0       	rjmp	.+2      	; 0xc4fe <mugui_lcd_putc+0xf4>
    c4fc:	88 0f       	add	r24, r24
    c4fe:	0a 94       	dec	r0
    c500:	ea f7       	brpl	.-6      	; 0xc4fc <mugui_lcd_putc+0xf2>
					bit = data & mask;
    c502:	3b 81       	ldd	r19, Y+3	; 0x03
    c504:	83 23       	and	r24, r19
    c506:	4d 81       	ldd	r20, Y+5	; 0x05
    c508:	48 0d       	add	r20, r8
					if(bit)
    c50a:	88 23       	and	r24, r24
    c50c:	11 f0       	breq	.+4      	; 0xc512 <mugui_lcd_putc+0x108>
					{
						setpixel(buffer,tx+x,ty+y,1);
    c50e:	21 e0       	ldi	r18, 0x01	; 1
    c510:	01 c0       	rjmp	.+2      	; 0xc514 <mugui_lcd_putc+0x10a>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    c512:	20 e0       	ldi	r18, 0x00	; 0
    c514:	6a 81       	ldd	r22, Y+2	; 0x02
    c516:	80 e0       	ldi	r24, 0x00	; 0
    c518:	91 e0       	ldi	r25, 0x01	; 1
    c51a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <setpixel>
					}
					ty++;
    c51e:	4f ef       	ldi	r20, 0xFF	; 255
    c520:	84 1a       	sub	r8, r20
    c522:	94 0a       	sbc	r9, r20
    c524:	8f ef       	ldi	r24, 0xFF	; 255
    c526:	68 1a       	sub	r6, r24
    c528:	78 0a       	sbc	r7, r24
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    c52a:	98 e0       	ldi	r25, 0x08	; 8
    c52c:	69 16       	cp	r6, r25
    c52e:	71 04       	cpc	r7, r1
    c530:	f1 f6       	brne	.-68     	; 0xc4ee <mugui_lcd_putc+0xe4>
    c532:	af ef       	ldi	r26, 0xFF	; 255
    c534:	aa 1a       	sub	r10, r26
    c536:	ba 0a       	sbc	r11, r26
    c538:	cd cf       	rjmp	.-102    	; 0xc4d4 <mugui_lcd_putc+0xca>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    c53a:	4f ef       	ldi	r20, 0xFF	; 255
    c53c:	c4 1a       	sub	r12, r20
    c53e:	d4 0a       	sbc	r13, r20
    c540:	8e 81       	ldd	r24, Y+6	; 0x06
    c542:	9f 81       	ldd	r25, Y+7	; 0x07
    c544:	82 0d       	add	r24, r2
    c546:	93 1d       	adc	r25, r3
    c548:	9f 83       	std	Y+7, r25	; 0x07
    c54a:	8e 83       	std	Y+6, r24	; 0x06
    c54c:	b8 cf       	rjmp	.-144    	; 0xc4be <mugui_lcd_putc+0xb4>
			}
		}
	}

	return width;
}
    c54e:	c8 01       	movw	r24, r16
    c550:	27 96       	adiw	r28, 0x07	; 7
    c552:	0f b6       	in	r0, 0x3f	; 63
    c554:	f8 94       	cli
    c556:	de bf       	out	0x3e, r29	; 62
    c558:	0f be       	out	0x3f, r0	; 63
    c55a:	cd bf       	out	0x3d, r28	; 61
    c55c:	df 91       	pop	r29
    c55e:	cf 91       	pop	r28
    c560:	1f 91       	pop	r17
    c562:	0f 91       	pop	r16
    c564:	ff 90       	pop	r15
    c566:	ef 90       	pop	r14
    c568:	df 90       	pop	r13
    c56a:	cf 90       	pop	r12
    c56c:	bf 90       	pop	r11
    c56e:	af 90       	pop	r10
    c570:	9f 90       	pop	r9
    c572:	8f 90       	pop	r8
    c574:	7f 90       	pop	r7
    c576:	6f 90       	pop	r6
    c578:	5f 90       	pop	r5
    c57a:	4f 90       	pop	r4
    c57c:	3f 90       	pop	r3
    c57e:	2f 90       	pop	r2
    c580:	08 95       	ret

0000c582 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    c582:	af 92       	push	r10
    c584:	bf 92       	push	r11
    c586:	cf 92       	push	r12
    c588:	df 92       	push	r13
    c58a:	ef 92       	push	r14
    c58c:	ff 92       	push	r15
    c58e:	0f 93       	push	r16
    c590:	1f 93       	push	r17
    c592:	cf 93       	push	r28
    c594:	df 93       	push	r29
    c596:	ec 01       	movw	r28, r24
    c598:	7b 01       	movw	r14, r22
    c59a:	6a 01       	movw	r12, r20
    c59c:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    c59e:	00 e0       	ldi	r16, 0x00	; 0
    c5a0:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    c5a2:	ce 01       	movw	r24, r28
    c5a4:	fe 01       	movw	r30, r28
    c5a6:	24 91       	lpm	r18, Z
    c5a8:	22 23       	and	r18, r18
    c5aa:	71 f0       	breq	.+28     	; 0xc5c8 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    c5ac:	21 96       	adiw	r28, 0x01	; 1
    c5ae:	fc 01       	movw	r30, r24
    c5b0:	84 91       	lpm	r24, Z
    c5b2:	a8 01       	movw	r20, r16
    c5b4:	4c 0d       	add	r20, r12
    c5b6:	5d 1d       	adc	r21, r13
    c5b8:	95 01       	movw	r18, r10
    c5ba:	b7 01       	movw	r22, r14
    c5bc:	0e 94 05 62 	call	0xc40a	; 0xc40a <mugui_lcd_putc>
    c5c0:	01 96       	adiw	r24, 0x01	; 1
    c5c2:	08 0f       	add	r16, r24
    c5c4:	19 1f       	adc	r17, r25
    c5c6:	ed cf       	rjmp	.-38     	; 0xc5a2 <pgm_mugui_lcd_puts+0x20>
	}
}
    c5c8:	df 91       	pop	r29
    c5ca:	cf 91       	pop	r28
    c5cc:	1f 91       	pop	r17
    c5ce:	0f 91       	pop	r16
    c5d0:	ff 90       	pop	r15
    c5d2:	ef 90       	pop	r14
    c5d4:	df 90       	pop	r13
    c5d6:	cf 90       	pop	r12
    c5d8:	bf 90       	pop	r11
    c5da:	af 90       	pop	r10
    c5dc:	08 95       	ret

0000c5de <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    c5de:	8f 92       	push	r8
    c5e0:	9f 92       	push	r9
    c5e2:	af 92       	push	r10
    c5e4:	bf 92       	push	r11
    c5e6:	cf 92       	push	r12
    c5e8:	df 92       	push	r13
    c5ea:	ef 92       	push	r14
    c5ec:	ff 92       	push	r15
    c5ee:	0f 93       	push	r16
    c5f0:	1f 93       	push	r17
    c5f2:	cf 93       	push	r28
    c5f4:	df 93       	push	r29
    c5f6:	7b 01       	movw	r14, r22
    c5f8:	6a 01       	movw	r12, r20
    c5fa:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    c5fc:	fc 01       	movw	r30, r24
    c5fe:	01 90       	ld	r0, Z+
    c600:	00 20       	and	r0, r0
    c602:	e9 f7       	brne	.-6      	; 0xc5fe <mugui_lcd_puts+0x20>
    c604:	ec 01       	movw	r28, r24
    c606:	cf 01       	movw	r24, r30
    c608:	01 97       	sbiw	r24, 0x01	; 1
    c60a:	4c 01       	movw	r8, r24
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    c60c:	00 e0       	ldi	r16, 0x00	; 0
    c60e:	10 e0       	ldi	r17, 0x00	; 0
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    c610:	c8 15       	cp	r28, r8
    c612:	d9 05       	cpc	r29, r9
    c614:	61 f0       	breq	.+24     	; 0xc62e <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    c616:	a8 01       	movw	r20, r16
    c618:	4c 0d       	add	r20, r12
    c61a:	5d 1d       	adc	r21, r13
    c61c:	95 01       	movw	r18, r10
    c61e:	b7 01       	movw	r22, r14
    c620:	89 91       	ld	r24, Y+
    c622:	0e 94 05 62 	call	0xc40a	; 0xc40a <mugui_lcd_putc>
    c626:	01 96       	adiw	r24, 0x01	; 1
    c628:	08 0f       	add	r16, r24
    c62a:	19 1f       	adc	r17, r25
    c62c:	f1 cf       	rjmp	.-30     	; 0xc610 <mugui_lcd_puts+0x32>
	}
}
    c62e:	df 91       	pop	r29
    c630:	cf 91       	pop	r28
    c632:	1f 91       	pop	r17
    c634:	0f 91       	pop	r16
    c636:	ff 90       	pop	r15
    c638:	ef 90       	pop	r14
    c63a:	df 90       	pop	r13
    c63c:	cf 90       	pop	r12
    c63e:	bf 90       	pop	r11
    c640:	af 90       	pop	r10
    c642:	9f 90       	pop	r9
    c644:	8f 90       	pop	r8
    c646:	08 95       	ret

0000c648 <Sensor_PID>:
float HPF_I = 0;
float fsample = 0;
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    c648:	2f 92       	push	r2
    c64a:	3f 92       	push	r3
    c64c:	4f 92       	push	r4
    c64e:	5f 92       	push	r5
    c650:	6f 92       	push	r6
    c652:	7f 92       	push	r7
    c654:	8f 92       	push	r8
    c656:	9f 92       	push	r9
    c658:	af 92       	push	r10
    c65a:	bf 92       	push	r11
    c65c:	cf 92       	push	r12
    c65e:	df 92       	push	r13
    c660:	ef 92       	push	r14
    c662:	ff 92       	push	r15
    c664:	0f 93       	push	r16
    c666:	1f 93       	push	r17
    c668:	cf 93       	push	r28
    c66a:	df 93       	push	r29
    c66c:	cd b7       	in	r28, 0x3d	; 61
    c66e:	de b7       	in	r29, 0x3e	; 62
    c670:	a7 97       	sbiw	r28, 0x27	; 39
    c672:	0f b6       	in	r0, 0x3f	; 63
    c674:	f8 94       	cli
    c676:	de bf       	out	0x3e, r29	; 62
    c678:	0f be       	out	0x3f, r0	; 63
    c67a:	cd bf       	out	0x3d, r28	; 61
    c67c:	6c a3       	std	Y+36, r22	; 0x24
    c67e:	7d a3       	std	Y+37, r23	; 0x25
    c680:	8e a3       	std	Y+38, r24	; 0x26
    c682:	9f a3       	std	Y+39, r25	; 0x27
	float tempf1 = 0;
    c684:	1d 86       	std	Y+13, r1	; 0x0d
    c686:	1e 86       	std	Y+14, r1	; 0x0e
    c688:	1f 86       	std	Y+15, r1	; 0x0f
    c68a:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    c68c:	80 91 85 09 	lds	r24, 0x0985
    c690:	90 91 86 09 	lds	r25, 0x0986
    c694:	91 95       	neg	r25
    c696:	81 95       	neg	r24
    c698:	91 09       	sbc	r25, r1
    c69a:	98 87       	std	Y+8, r25	; 0x08
    c69c:	8f 83       	std	Y+7, r24	; 0x07
    c69e:	80 91 87 09 	lds	r24, 0x0987
    c6a2:	90 91 88 09 	lds	r25, 0x0988
    c6a6:	9a 87       	std	Y+10, r25	; 0x0a
    c6a8:	89 87       	std	Y+9, r24	; 0x09
    c6aa:	80 91 89 09 	lds	r24, 0x0989
    c6ae:	90 91 8a 09 	lds	r25, 0x098A
    c6b2:	9c 87       	std	Y+12, r25	; 0x0c
    c6b4:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    c6b6:	80 91 71 06 	lds	r24, 0x0671
    c6ba:	89 83       	std	Y+1, r24	; 0x01
    c6bc:	80 91 77 06 	lds	r24, 0x0677
    c6c0:	8a 83       	std	Y+2, r24	; 0x02
    c6c2:	80 91 7d 06 	lds	r24, 0x067D
    c6c6:	8b 83       	std	Y+3, r24	; 0x03
    c6c8:	80 91 85 06 	lds	r24, 0x0685
    c6cc:	8c 83       	std	Y+4, r24	; 0x04
    c6ce:	80 91 8b 06 	lds	r24, 0x068B
    c6d2:	8d 83       	std	Y+5, r24	; 0x05
    c6d4:	80 91 91 06 	lds	r24, 0x0691
    c6d8:	8e 83       	std	Y+6, r24	; 0x06
	//************************************************************
	// Create a measure of gyro noise
	//************************************************************

	// Only bother when display vibration info is set to "ON"
	if (Config.Vibration == ON)
    c6da:	80 91 6c 06 	lds	r24, 0x066C
    c6de:	81 30       	cpi	r24, 0x01	; 1
    c6e0:	09 f0       	breq	.+2      	; 0xc6e4 <Sensor_PID+0x9c>
    c6e2:	d8 c0       	rjmp	.+432    	; 0xc894 <Sensor_PID+0x24c>
	{
		// Work out quick average of all raw gyros and take the absolute value
		fsample = (float)(gyroADC_raw[ROLL] + gyroADC_raw[PITCH] + gyroADC_raw[YAW]);
    c6e4:	60 91 e1 05 	lds	r22, 0x05E1
    c6e8:	70 91 e2 05 	lds	r23, 0x05E2
    c6ec:	80 91 e3 05 	lds	r24, 0x05E3
    c6f0:	90 91 e4 05 	lds	r25, 0x05E4
    c6f4:	68 0f       	add	r22, r24
    c6f6:	79 1f       	adc	r23, r25
    c6f8:	80 91 e5 05 	lds	r24, 0x05E5
    c6fc:	90 91 e6 05 	lds	r25, 0x05E6
    c700:	68 0f       	add	r22, r24
    c702:	79 1f       	adc	r23, r25
    c704:	07 2e       	mov	r0, r23
    c706:	00 0c       	add	r0, r0
    c708:	88 0b       	sbc	r24, r24
    c70a:	99 0b       	sbc	r25, r25
    c70c:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    c710:	4b 01       	movw	r8, r22
    c712:	5c 01       	movw	r10, r24

		// HPF example from http://www.codeproject.com/Tips/681745/Csharp-Discrete-Time-RLC-Low-High-Pass-Filter-Rout
		// Some values preset for a 10Hz cutoff at 500Hz sample rate
		HPF_T = (fsample * HPF_O) - HPF_V;
    c714:	40 90 64 05 	lds	r4, 0x0564
    c718:	50 90 65 05 	lds	r5, 0x0565
    c71c:	60 90 66 05 	lds	r6, 0x0566
    c720:	70 90 67 05 	lds	r7, 0x0567
    c724:	2d ef       	ldi	r18, 0xFD	; 253
    c726:	3d ea       	ldi	r19, 0xAD	; 173
    c728:	40 e8       	ldi	r20, 0x80	; 128
    c72a:	5e e3       	ldi	r21, 0x3E	; 62
    c72c:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    c730:	a3 01       	movw	r20, r6
    c732:	92 01       	movw	r18, r4
    c734:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    c738:	6b 01       	movw	r12, r22
    c73a:	7c 01       	movw	r14, r24
    c73c:	60 93 60 05 	sts	0x0560, r22
    c740:	70 93 61 05 	sts	0x0561, r23
    c744:	80 93 62 05 	sts	0x0562, r24
    c748:	90 93 63 05 	sts	0x0563, r25
		HPF_V += (HPF_I + HPF_T) / HPF_C;
    c74c:	80 91 5c 05 	lds	r24, 0x055C
    c750:	90 91 5d 05 	lds	r25, 0x055D
    c754:	a0 91 5e 05 	lds	r26, 0x055E
    c758:	b0 91 5f 05 	lds	r27, 0x055F
    c75c:	89 8b       	std	Y+17, r24	; 0x11
    c75e:	9a 8b       	std	Y+18, r25	; 0x12
    c760:	ab 8b       	std	Y+19, r26	; 0x13
    c762:	bc 8b       	std	Y+20, r27	; 0x14
    c764:	a7 01       	movw	r20, r14
    c766:	96 01       	movw	r18, r12
    c768:	bc 01       	movw	r22, r24
    c76a:	cd 01       	movw	r24, r26
    c76c:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    c770:	2d ed       	ldi	r18, 0xDD	; 221
    c772:	35 ea       	ldi	r19, 0xA5	; 165
    c774:	4e e7       	ldi	r20, 0x7E	; 126
    c776:	50 e4       	ldi	r21, 0x40	; 64
    c778:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    c77c:	9b 01       	movw	r18, r22
    c77e:	ac 01       	movw	r20, r24
    c780:	c3 01       	movw	r24, r6
    c782:	b2 01       	movw	r22, r4
    c784:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    c788:	2b 01       	movw	r4, r22
    c78a:	3c 01       	movw	r6, r24
    c78c:	60 93 64 05 	sts	0x0564, r22
    c790:	70 93 65 05 	sts	0x0565, r23
    c794:	80 93 66 05 	sts	0x0566, r24
    c798:	90 93 67 05 	sts	0x0567, r25
		HPF_I += HPF_T / HPF_L;
    c79c:	2d ed       	ldi	r18, 0xDD	; 221
    c79e:	35 ea       	ldi	r19, 0xA5	; 165
    c7a0:	4e e7       	ldi	r20, 0x7E	; 126
    c7a2:	50 e4       	ldi	r21, 0x40	; 64
    c7a4:	c7 01       	movw	r24, r14
    c7a6:	b6 01       	movw	r22, r12
    c7a8:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    c7ac:	9b 01       	movw	r18, r22
    c7ae:	ac 01       	movw	r20, r24
    c7b0:	69 89       	ldd	r22, Y+17	; 0x11
    c7b2:	7a 89       	ldd	r23, Y+18	; 0x12
    c7b4:	8b 89       	ldd	r24, Y+19	; 0x13
    c7b6:	9c 89       	ldd	r25, Y+20	; 0x14
    c7b8:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    c7bc:	60 93 5c 05 	sts	0x055C, r22
    c7c0:	70 93 5d 05 	sts	0x055D, r23
    c7c4:	80 93 5e 05 	sts	0x055E, r24
    c7c8:	90 93 5f 05 	sts	0x055F, r25
		fsample -= HPF_V / HPF_O;
    c7cc:	2d ef       	ldi	r18, 0xFD	; 253
    c7ce:	3d ea       	ldi	r19, 0xAD	; 173
    c7d0:	40 e8       	ldi	r20, 0x80	; 128
    c7d2:	5e e3       	ldi	r21, 0x3E	; 62
    c7d4:	c3 01       	movw	r24, r6
    c7d6:	b2 01       	movw	r22, r4
    c7d8:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    c7dc:	9b 01       	movw	r18, r22
    c7de:	ac 01       	movw	r20, r24
    c7e0:	c5 01       	movw	r24, r10
    c7e2:	b4 01       	movw	r22, r8
    c7e4:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    c7e8:	4b 01       	movw	r8, r22
    c7ea:	5c 01       	movw	r10, r24
    c7ec:	60 93 58 05 	sts	0x0558, r22
    c7f0:	70 93 59 05 	sts	0x0559, r23
    c7f4:	80 93 5a 05 	sts	0x055A, r24
    c7f8:	90 93 5b 05 	sts	0x055B, r25

		// LPF filter the readings so that they are more persistent
		GyroAvgNoise = ((GyroAvgNoise * 99.0f) + abs(fsample)) / 100.0f;
    c7fc:	20 e0       	ldi	r18, 0x00	; 0
    c7fe:	30 e0       	ldi	r19, 0x00	; 0
    c800:	46 ec       	ldi	r20, 0xC6	; 198
    c802:	52 e4       	ldi	r21, 0x42	; 66
    c804:	60 91 7d 09 	lds	r22, 0x097D
    c808:	70 91 7e 09 	lds	r23, 0x097E
    c80c:	80 91 7f 09 	lds	r24, 0x097F
    c810:	90 91 80 09 	lds	r25, 0x0980
    c814:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    c818:	6b 01       	movw	r12, r22
    c81a:	7c 01       	movw	r14, r24
    c81c:	c5 01       	movw	r24, r10
    c81e:	b4 01       	movw	r22, r8
    c820:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    c824:	9b 01       	movw	r18, r22
    c826:	77 ff       	sbrs	r23, 7
    c828:	04 c0       	rjmp	.+8      	; 0xc832 <Sensor_PID+0x1ea>
    c82a:	22 27       	eor	r18, r18
    c82c:	33 27       	eor	r19, r19
    c82e:	26 1b       	sub	r18, r22
    c830:	37 0b       	sbc	r19, r23
    c832:	b9 01       	movw	r22, r18
    c834:	33 0f       	add	r19, r19
    c836:	88 0b       	sbc	r24, r24
    c838:	99 0b       	sbc	r25, r25
    c83a:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    c83e:	9b 01       	movw	r18, r22
    c840:	ac 01       	movw	r20, r24
    c842:	c7 01       	movw	r24, r14
    c844:	b6 01       	movw	r22, r12
    c846:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    c84a:	20 e0       	ldi	r18, 0x00	; 0
    c84c:	30 e0       	ldi	r19, 0x00	; 0
    c84e:	48 ec       	ldi	r20, 0xC8	; 200
    c850:	52 e4       	ldi	r21, 0x42	; 66
    c852:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    c856:	6b 01       	movw	r12, r22
    c858:	7c 01       	movw	r14, r24

		// Limit noise reading to 999
		if (GyroAvgNoise > 999.0f)
    c85a:	20 e0       	ldi	r18, 0x00	; 0
    c85c:	30 ec       	ldi	r19, 0xC0	; 192
    c85e:	49 e7       	ldi	r20, 0x79	; 121
    c860:	54 e4       	ldi	r21, 0x44	; 68
    c862:	0e 94 a6 6e 	call	0xdd4c	; 0xdd4c <__gesf2>
    c866:	18 16       	cp	r1, r24
    c868:	4c f0       	brlt	.+18     	; 0xc87c <Sensor_PID+0x234>
		HPF_V += (HPF_I + HPF_T) / HPF_C;
		HPF_I += HPF_T / HPF_L;
		fsample -= HPF_V / HPF_O;

		// LPF filter the readings so that they are more persistent
		GyroAvgNoise = ((GyroAvgNoise * 99.0f) + abs(fsample)) / 100.0f;
    c86a:	c0 92 7d 09 	sts	0x097D, r12
    c86e:	d0 92 7e 09 	sts	0x097E, r13
    c872:	e0 92 7f 09 	sts	0x097F, r14
    c876:	f0 92 80 09 	sts	0x0980, r15
    c87a:	0c c0       	rjmp	.+24     	; 0xc894 <Sensor_PID+0x24c>

		// Limit noise reading to 999
		if (GyroAvgNoise > 999.0f)
		{
			GyroAvgNoise = 999.0f;
    c87c:	80 e0       	ldi	r24, 0x00	; 0
    c87e:	90 ec       	ldi	r25, 0xC0	; 192
    c880:	a9 e7       	ldi	r26, 0x79	; 121
    c882:	b4 e4       	ldi	r27, 0x44	; 68
    c884:	80 93 7d 09 	sts	0x097D, r24
    c888:	90 93 7e 09 	sts	0x097E, r25
    c88c:	a0 93 7f 09 	sts	0x097F, r26
    c890:	b0 93 80 09 	sts	0x0980, r27
    c894:	de 01       	movw	r26, r28
    c896:	11 96       	adiw	r26, 0x01	; 1
    c898:	b9 a3       	std	Y+33, r27	; 0x21
    c89a:	a8 a3       	std	Y+32, r26	; 0x20
    c89c:	e1 e7       	ldi	r30, 0x71	; 113
    c89e:	f9 e0       	ldi	r31, 0x09	; 9
    c8a0:	fe 8f       	std	Y+30, r31	; 0x1e
    c8a2:	ed 8f       	std	Y+29, r30	; 0x1d
    c8a4:	01 e2       	ldi	r16, 0x21	; 33
    c8a6:	19 e0       	ldi	r17, 0x09	; 9
    c8a8:	29 e3       	ldi	r18, 0x39	; 57
    c8aa:	36 e0       	ldi	r19, 0x06	; 6
    c8ac:	38 8f       	std	Y+24, r19	; 0x18
    c8ae:	2f 8b       	std	Y+23, r18	; 0x17
    c8b0:	8d e4       	ldi	r24, 0x4D	; 77
    c8b2:	99 e0       	ldi	r25, 0x09	; 9
    c8b4:	9a 8b       	std	Y+18, r25	; 0x12
    c8b6:	89 8b       	std	Y+17, r24	; 0x11
    c8b8:	ab ed       	ldi	r26, 0xDB	; 219
    c8ba:	b5 e0       	ldi	r27, 0x05	; 5
    c8bc:	be 8b       	std	Y+22, r27	; 0x16
    c8be:	ad 8b       	std	Y+21, r26	; 0x15
    c8c0:	1e 01       	movw	r2, r28
    c8c2:	b7 e0       	ldi	r27, 0x07	; 7
    c8c4:	2b 0e       	add	r2, r27
    c8c6:	31 1c       	adc	r3, r1
    c8c8:	fe 01       	movw	r30, r28
    c8ca:	34 96       	adiw	r30, 0x04	; 4
    c8cc:	fb a3       	std	Y+35, r31	; 0x23
    c8ce:	ea a3       	std	Y+34, r30	; 0x22
float HPF_I = 0;
float fsample = 0;
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    c8d0:	1f 8e       	std	Y+31, r1	; 0x1f
		//************************************************************
		// Work out stick rate divider. 0 is slowest, 7 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244), /2 (488), /1 (976), *2 (1952)
		//************************************************************

		if (Stick_rates[P1][axis] <= 6)
    c8d2:	a8 a1       	ldd	r26, Y+32	; 0x20
    c8d4:	b9 a1       	ldd	r27, Y+33	; 0x21
    c8d6:	2d 91       	ld	r18, X+
    c8d8:	b9 a3       	std	Y+33, r27	; 0x21
    c8da:	a8 a3       	std	Y+32, r26	; 0x20
    c8dc:	82 2f       	mov	r24, r18
    c8de:	02 2e       	mov	r0, r18
    c8e0:	00 0c       	add	r0, r0
    c8e2:	99 0b       	sbc	r25, r25
    c8e4:	27 30       	cpi	r18, 0x07	; 7
    c8e6:	6c f4       	brge	.+26     	; 0xc902 <Sensor_PID+0x2ba>
		{
			stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    c8e8:	e6 e0       	ldi	r30, 0x06	; 6
    c8ea:	f0 e0       	ldi	r31, 0x00	; 0
    c8ec:	e8 1b       	sub	r30, r24
    c8ee:	f9 0b       	sbc	r31, r25
    c8f0:	d1 01       	movw	r26, r2
    c8f2:	6d 90       	ld	r6, X+
    c8f4:	7c 90       	ld	r7, X
    c8f6:	02 c0       	rjmp	.+4      	; 0xc8fc <Sensor_PID+0x2b4>
    c8f8:	75 94       	asr	r7
    c8fa:	67 94       	ror	r6
    c8fc:	ea 95       	dec	r30
    c8fe:	e2 f7       	brpl	.-8      	; 0xc8f8 <Sensor_PID+0x2b0>
    c900:	09 c0       	rjmp	.+18     	; 0xc914 <Sensor_PID+0x2cc>
		}
		else
		{
			stick_P1 = RCinputsAxis[axis] << ((Stick_rates[P1][axis]) - 6);
    c902:	06 97       	sbiw	r24, 0x06	; 6
    c904:	f1 01       	movw	r30, r2
    c906:	60 80       	ld	r6, Z
    c908:	71 80       	ldd	r7, Z+1	; 0x01
    c90a:	02 c0       	rjmp	.+4      	; 0xc910 <Sensor_PID+0x2c8>
    c90c:	66 0c       	add	r6, r6
    c90e:	77 1c       	adc	r7, r7
    c910:	8a 95       	dec	r24
    c912:	e2 f7       	brpl	.-8      	; 0xc90c <Sensor_PID+0x2c4>
		}
		
		if (Stick_rates[P2][axis] <= 6)
    c914:	aa a1       	ldd	r26, Y+34	; 0x22
    c916:	bb a1       	ldd	r27, Y+35	; 0x23
    c918:	2d 91       	ld	r18, X+
    c91a:	bb a3       	std	Y+35, r27	; 0x23
    c91c:	aa a3       	std	Y+34, r26	; 0x22
    c91e:	82 2f       	mov	r24, r18
    c920:	02 2e       	mov	r0, r18
    c922:	00 0c       	add	r0, r0
    c924:	99 0b       	sbc	r25, r25
    c926:	27 30       	cpi	r18, 0x07	; 7
    c928:	6c f4       	brge	.+26     	; 0xc944 <Sensor_PID+0x2fc>
		{
			stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    c92a:	e6 e0       	ldi	r30, 0x06	; 6
    c92c:	f0 e0       	ldi	r31, 0x00	; 0
    c92e:	e8 1b       	sub	r30, r24
    c930:	f9 0b       	sbc	r31, r25
    c932:	d1 01       	movw	r26, r2
    c934:	4d 90       	ld	r4, X+
    c936:	5c 90       	ld	r5, X
    c938:	02 c0       	rjmp	.+4      	; 0xc93e <Sensor_PID+0x2f6>
    c93a:	55 94       	asr	r5
    c93c:	47 94       	ror	r4
    c93e:	ea 95       	dec	r30
    c940:	e2 f7       	brpl	.-8      	; 0xc93a <Sensor_PID+0x2f2>
    c942:	09 c0       	rjmp	.+18     	; 0xc956 <Sensor_PID+0x30e>
		}
		else
		{
			stick_P2 = RCinputsAxis[axis] << ((Stick_rates[P2][axis]) - 6);
    c944:	06 97       	sbiw	r24, 0x06	; 6
    c946:	f1 01       	movw	r30, r2
    c948:	40 80       	ld	r4, Z
    c94a:	51 80       	ldd	r5, Z+1	; 0x01
    c94c:	02 c0       	rjmp	.+4      	; 0xc952 <Sensor_PID+0x30a>
    c94e:	44 0c       	add	r4, r4
    c950:	55 1c       	adc	r5, r5
    c952:	8a 95       	dec	r24
    c954:	e2 f7       	brpl	.-8      	; 0xc94e <Sensor_PID+0x306>
		// Gyro LPF
		//************************************************************	

		// Lookup LPF value
		// Note: Two sets of values for normal and high-speed mode
		if (Config.Servo_rate != FAST)
    c956:	80 91 63 06 	lds	r24, 0x0663
    c95a:	60 91 e0 06 	lds	r22, 0x06E0
    c95e:	82 30       	cpi	r24, 0x02	; 2
    c960:	39 f0       	breq	.+14     	; 0xc970 <Sensor_PID+0x328>
		{
			memcpy_P(&tempf1, &LPF_lookup[Config.Gyro_LPF], sizeof(float));
    c962:	f4 e0       	ldi	r31, 0x04	; 4
    c964:	6f 02       	muls	r22, r31
    c966:	b0 01       	movw	r22, r0
    c968:	11 24       	eor	r1, r1
    c96a:	6d 53       	subi	r22, 0x3D	; 61
    c96c:	7b 4d       	sbci	r23, 0xDB	; 219
    c96e:	06 c0       	rjmp	.+12     	; 0xc97c <Sensor_PID+0x334>
		}
		else
		{
			memcpy_P(&tempf1, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float));
    c970:	24 e0       	ldi	r18, 0x04	; 4
    c972:	62 02       	muls	r22, r18
    c974:	b0 01       	movw	r22, r0
    c976:	11 24       	eor	r1, r1
    c978:	6d 55       	subi	r22, 0x5D	; 93
    c97a:	7b 4d       	sbci	r23, 0xDB	; 219
    c97c:	44 e0       	ldi	r20, 0x04	; 4
    c97e:	50 e0       	ldi	r21, 0x00	; 0
    c980:	ce 01       	movw	r24, r28
    c982:	0d 96       	adiw	r24, 0x0d	; 13
    c984:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <memcpy_P>
		}		
			
		gyroADCf = gyroADC[axis]; // Promote gyro signal to suit
    c988:	ad 89       	ldd	r26, Y+21	; 0x15
    c98a:	be 89       	ldd	r27, Y+22	; 0x16
    c98c:	6d 91       	ld	r22, X+
    c98e:	7c 91       	ld	r23, X
    c990:	07 2e       	mov	r0, r23
    c992:	00 0c       	add	r0, r0
    c994:	88 0b       	sbc	r24, r24
    c996:	99 0b       	sbc	r25, r25
    c998:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    c99c:	6b 01       	movw	r12, r22
    c99e:	7c 01       	movw	r14, r24

		if (Config.Gyro_LPF != NOFILTER)
    c9a0:	80 91 e0 06 	lds	r24, 0x06E0
    c9a4:	87 30       	cpi	r24, 0x07	; 7
    c9a6:	21 f1       	breq	.+72     	; 0xc9f0 <Sensor_PID+0x3a8>
		{
			// Gyro LPF
			gyroSmooth[axis] = ((gyroSmooth[axis] * (tempf1 - 1.0f)) + gyroADCf) / tempf1;
    c9a8:	8d 84       	ldd	r8, Y+13	; 0x0d
    c9aa:	9e 84       	ldd	r9, Y+14	; 0x0e
    c9ac:	af 84       	ldd	r10, Y+15	; 0x0f
    c9ae:	b8 88       	ldd	r11, Y+16	; 0x10
    c9b0:	20 e0       	ldi	r18, 0x00	; 0
    c9b2:	30 e0       	ldi	r19, 0x00	; 0
    c9b4:	40 e8       	ldi	r20, 0x80	; 128
    c9b6:	5f e3       	ldi	r21, 0x3F	; 63
    c9b8:	c5 01       	movw	r24, r10
    c9ba:	b4 01       	movw	r22, r8
    c9bc:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    c9c0:	e9 89       	ldd	r30, Y+17	; 0x11
    c9c2:	fa 89       	ldd	r31, Y+18	; 0x12
    c9c4:	20 81       	ld	r18, Z
    c9c6:	31 81       	ldd	r19, Z+1	; 0x01
    c9c8:	42 81       	ldd	r20, Z+2	; 0x02
    c9ca:	53 81       	ldd	r21, Z+3	; 0x03
    c9cc:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    c9d0:	a7 01       	movw	r20, r14
    c9d2:	96 01       	movw	r18, r12
    c9d4:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    c9d8:	a5 01       	movw	r20, r10
    c9da:	94 01       	movw	r18, r8
    c9dc:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    c9e0:	a9 89       	ldd	r26, Y+17	; 0x11
    c9e2:	ba 89       	ldd	r27, Y+18	; 0x12
    c9e4:	6d 93       	st	X+, r22
    c9e6:	7d 93       	st	X+, r23
    c9e8:	8d 93       	st	X+, r24
    c9ea:	9c 93       	st	X, r25
    c9ec:	13 97       	sbiw	r26, 0x03	; 3
    c9ee:	06 c0       	rjmp	.+12     	; 0xc9fc <Sensor_PID+0x3b4>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values when filter is off
			gyroSmooth[axis] = gyroADCf;
    c9f0:	e9 89       	ldd	r30, Y+17	; 0x11
    c9f2:	fa 89       	ldd	r31, Y+18	; 0x12
    c9f4:	c0 82       	st	Z, r12
    c9f6:	d1 82       	std	Z+1, r13	; 0x01
    c9f8:	e2 82       	std	Z+2, r14	; 0x02
    c9fa:	f3 82       	std	Z+3, r15	; 0x03
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];	
    c9fc:	a9 89       	ldd	r26, Y+17	; 0x11
    c9fe:	ba 89       	ldd	r27, Y+18	; 0x12
    ca00:	6d 91       	ld	r22, X+
    ca02:	7d 91       	ld	r23, X+
    ca04:	8d 91       	ld	r24, X+
    ca06:	9c 91       	ld	r25, X
    ca08:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    ca0c:	69 8f       	std	Y+25, r22	; 0x19
    ca0e:	7a 8f       	std	Y+26, r23	; 0x1a
    ca10:	8b 8f       	std	Y+27, r24	; 0x1b
    ca12:	9c 8f       	std	Y+28, r25	; 0x1c
    ca14:	29 8d       	ldd	r18, Y+25	; 0x19
    ca16:	3a 8d       	ldd	r19, Y+26	; 0x1a
    ca18:	ed 89       	ldd	r30, Y+21	; 0x15
    ca1a:	fe 89       	ldd	r31, Y+22	; 0x16
    ca1c:	31 83       	std	Z+1, r19	; 0x01
    ca1e:	20 83       	st	Z, r18
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
    ca20:	6c a1       	ldd	r22, Y+36	; 0x24
    ca22:	7d a1       	ldd	r23, Y+37	; 0x25
    ca24:	8e a1       	ldd	r24, Y+38	; 0x26
    ca26:	9f a1       	ldd	r25, Y+39	; 0x27
    ca28:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <__floatunsisf>
    ca2c:	20 e0       	ldi	r18, 0x00	; 0
    ca2e:	30 e3       	ldi	r19, 0x30	; 48
    ca30:	4f e5       	ldi	r20, 0x5F	; 95
    ca32:	55 e4       	ldi	r21, 0x45	; 69
    ca34:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    ca38:	4b 01       	movw	r8, r22
    ca3a:	5c 01       	movw	r10, r24
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************

		P1_temp = gyroADC[axis] + stick_P1;
    ca3c:	69 8d       	ldd	r22, Y+25	; 0x19
    ca3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    ca40:	66 0d       	add	r22, r6
    ca42:	77 1d       	adc	r23, r7
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    ca44:	07 2e       	mov	r0, r23
    ca46:	00 0c       	add	r0, r0
    ca48:	88 0b       	sbc	r24, r24
    ca4a:	99 0b       	sbc	r25, r25
    ca4c:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    ca50:	6b 01       	movw	r12, r22
    ca52:	7c 01       	movw	r14, r24
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************

		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
    ca54:	69 8d       	ldd	r22, Y+25	; 0x19
    ca56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    ca58:	64 0d       	add	r22, r4
    ca5a:	75 1d       	adc	r23, r5
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
    ca5c:	07 2e       	mov	r0, r23
    ca5e:	00 0c       	add	r0, r0
    ca60:	88 0b       	sbc	r24, r24
    ca62:	99 0b       	sbc	r25, r25
    ca64:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    ca68:	2b 01       	movw	r4, r22
    ca6a:	3c 01       	movw	r6, r24
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
    ca6c:	a5 01       	movw	r20, r10
    ca6e:	94 01       	movw	r18, r8
    ca70:	c7 01       	movw	r24, r14
    ca72:	b6 01       	movw	r22, r12
    ca74:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    ca78:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
		// Increment gyro I-terms
		//************************************************************
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
    ca7c:	d8 01       	movw	r26, r16
    ca7e:	cd 90       	ld	r12, X+
    ca80:	dd 90       	ld	r13, X+
    ca82:	ed 90       	ld	r14, X+
    ca84:	fc 90       	ld	r15, X
    ca86:	c6 0e       	add	r12, r22
    ca88:	d7 1e       	adc	r13, r23
    ca8a:	e8 1e       	adc	r14, r24
    ca8c:	f9 1e       	adc	r15, r25
    ca8e:	f8 01       	movw	r30, r16
    ca90:	c0 82       	st	Z, r12
    ca92:	d1 82       	std	Z+1, r13	; 0x01
    ca94:	e2 82       	std	Z+2, r14	; 0x02
    ca96:	f3 82       	std	Z+3, r15	; 0x03
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
		tempf2 = tempf2 * factor;
    ca98:	a5 01       	movw	r20, r10
    ca9a:	94 01       	movw	r18, r8
    ca9c:	c3 01       	movw	r24, r6
    ca9e:	b2 01       	movw	r22, r4
    caa0:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
		P2_temp = (int32_t)tempf2;
    caa4:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
		//************************************************************
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
		IntegralGyro[P2][axis] += P2_temp;
    caa8:	d8 01       	movw	r26, r16
    caaa:	1c 96       	adiw	r26, 0x0c	; 12
    caac:	8d 90       	ld	r8, X+
    caae:	9d 90       	ld	r9, X+
    cab0:	ad 90       	ld	r10, X+
    cab2:	bc 90       	ld	r11, X
    cab4:	1f 97       	sbiw	r26, 0x0f	; 15
    cab6:	dc 01       	movw	r26, r24
    cab8:	cb 01       	movw	r24, r22
    caba:	88 0d       	add	r24, r8
    cabc:	99 1d       	adc	r25, r9
    cabe:	aa 1d       	adc	r26, r10
    cac0:	bb 1d       	adc	r27, r11
    cac2:	f8 01       	movw	r30, r16
    cac4:	84 87       	std	Z+12, r24	; 0x0c
    cac6:	95 87       	std	Z+13, r25	; 0x0d
    cac8:	a6 87       	std	Z+14, r26	; 0x0e
    caca:	b7 87       	std	Z+15, r27	; 0x0f
    cacc:	ef 89       	ldd	r30, Y+23	; 0x17
    cace:	f8 8d       	ldd	r31, Y+24	; 0x18
    cad0:	e3 58       	subi	r30, 0x83	; 131
    cad2:	ff 4f       	sbci	r31, 0xFF	; 255
		// Limit the I-terms to the user-set limits
		//************************************************************
		
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    cad4:	80 81       	ld	r24, Z
    cad6:	91 81       	ldd	r25, Z+1	; 0x01
    cad8:	a2 81       	ldd	r26, Z+2	; 0x02
    cada:	b3 81       	ldd	r27, Z+3	; 0x03
    cadc:	8c 15       	cp	r24, r12
    cade:	9d 05       	cpc	r25, r13
    cae0:	ae 05       	cpc	r26, r14
    cae2:	bf 05       	cpc	r27, r15
    cae4:	2c f4       	brge	.+10     	; 0xcaf0 <Sensor_PID+0x4a8>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    cae6:	f8 01       	movw	r30, r16
    cae8:	80 83       	st	Z, r24
    caea:	91 83       	std	Z+1, r25	; 0x01
    caec:	a2 83       	std	Z+2, r26	; 0x02
    caee:	b3 83       	std	Z+3, r27	; 0x03
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    caf0:	b0 95       	com	r27
    caf2:	a0 95       	com	r26
    caf4:	90 95       	com	r25
    caf6:	81 95       	neg	r24
    caf8:	9f 4f       	sbci	r25, 0xFF	; 255
    cafa:	af 4f       	sbci	r26, 0xFF	; 255
    cafc:	bf 4f       	sbci	r27, 0xFF	; 255
    cafe:	f8 01       	movw	r30, r16
    cb00:	40 81       	ld	r20, Z
    cb02:	51 81       	ldd	r21, Z+1	; 0x01
    cb04:	62 81       	ldd	r22, Z+2	; 0x02
    cb06:	73 81       	ldd	r23, Z+3	; 0x03
    cb08:	48 17       	cp	r20, r24
    cb0a:	59 07       	cpc	r21, r25
    cb0c:	6a 07       	cpc	r22, r26
    cb0e:	7b 07       	cpc	r23, r27
    cb10:	24 f4       	brge	.+8      	; 0xcb1a <Sensor_PID+0x4d2>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    cb12:	80 83       	st	Z, r24
    cb14:	91 83       	std	Z+1, r25	; 0x01
    cb16:	a2 83       	std	Z+2, r26	; 0x02
    cb18:	b3 83       	std	Z+3, r27	; 0x03
    cb1a:	ef 89       	ldd	r30, Y+23	; 0x17
    cb1c:	f8 8d       	ldd	r31, Y+24	; 0x18
    cb1e:	e3 57       	subi	r30, 0x73	; 115
    cb20:	ff 4f       	sbci	r31, 0xFF	; 255
		// Limit the I-terms to the user-set limits
		//************************************************************
		
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    cb22:	80 81       	ld	r24, Z
    cb24:	91 81       	ldd	r25, Z+1	; 0x01
    cb26:	a2 81       	ldd	r26, Z+2	; 0x02
    cb28:	b3 81       	ldd	r27, Z+3	; 0x03
    cb2a:	f8 01       	movw	r30, r16
    cb2c:	44 85       	ldd	r20, Z+12	; 0x0c
    cb2e:	55 85       	ldd	r21, Z+13	; 0x0d
    cb30:	66 85       	ldd	r22, Z+14	; 0x0e
    cb32:	77 85       	ldd	r23, Z+15	; 0x0f
    cb34:	84 17       	cp	r24, r20
    cb36:	95 07       	cpc	r25, r21
    cb38:	a6 07       	cpc	r26, r22
    cb3a:	b7 07       	cpc	r27, r23
    cb3c:	24 f4       	brge	.+8      	; 0xcb46 <Sensor_PID+0x4fe>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    cb3e:	84 87       	std	Z+12, r24	; 0x0c
    cb40:	95 87       	std	Z+13, r25	; 0x0d
    cb42:	a6 87       	std	Z+14, r26	; 0x0e
    cb44:	b7 87       	std	Z+15, r27	; 0x0f
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    cb46:	b0 95       	com	r27
    cb48:	a0 95       	com	r26
    cb4a:	90 95       	com	r25
    cb4c:	81 95       	neg	r24
    cb4e:	9f 4f       	sbci	r25, 0xFF	; 255
    cb50:	af 4f       	sbci	r26, 0xFF	; 255
    cb52:	bf 4f       	sbci	r27, 0xFF	; 255
    cb54:	f8 01       	movw	r30, r16
    cb56:	44 85       	ldd	r20, Z+12	; 0x0c
    cb58:	55 85       	ldd	r21, Z+13	; 0x0d
    cb5a:	66 85       	ldd	r22, Z+14	; 0x0e
    cb5c:	77 85       	ldd	r23, Z+15	; 0x0f
    cb5e:	48 17       	cp	r20, r24
    cb60:	59 07       	cpc	r21, r25
    cb62:	6a 07       	cpc	r22, r26
    cb64:	7b 07       	cpc	r23, r27
    cb66:	24 f4       	brge	.+8      	; 0xcb70 <Sensor_PID+0x528>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    cb68:	84 87       	std	Z+12, r24	; 0x0c
    cb6a:	95 87       	std	Z+13, r25	; 0x0d
    cb6c:	a6 87       	std	Z+14, r26	; 0x0e
    cb6e:	b7 87       	std	Z+15, r27	; 0x0f

		//************************************************************
		// Sum gyro readings for P-terms for later averaging
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
    cb70:	29 8d       	ldd	r18, Y+25	; 0x19
    cb72:	3a 8d       	ldd	r19, Y+26	; 0x1a
    cb74:	c9 01       	movw	r24, r18
    cb76:	33 0f       	add	r19, r19
    cb78:	aa 0b       	sbc	r26, r26
    cb7a:	bb 0b       	sbc	r27, r27
    cb7c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    cb7e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    cb80:	40 81       	ld	r20, Z
    cb82:	51 81       	ldd	r21, Z+1	; 0x01
    cb84:	62 81       	ldd	r22, Z+2	; 0x02
    cb86:	73 81       	ldd	r23, Z+3	; 0x03
    cb88:	84 0f       	add	r24, r20
    cb8a:	95 1f       	adc	r25, r21
    cb8c:	a6 1f       	adc	r26, r22
    cb8e:	b7 1f       	adc	r27, r23
    cb90:	81 93       	st	Z+, r24
    cb92:	91 93       	st	Z+, r25
    cb94:	a1 93       	st	Z+, r26
    cb96:	b1 93       	st	Z+, r27
    cb98:	fe 8f       	std	Y+30, r31	; 0x1e
    cb9a:	ed 8f       	std	Y+29, r30	; 0x1d
    cb9c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    cb9e:	ff 5f       	subi	r31, 0xFF	; 255
    cba0:	ff 8f       	std	Y+31, r31	; 0x1f
    cba2:	0c 5f       	subi	r16, 0xFC	; 252
    cba4:	1f 4f       	sbci	r17, 0xFF	; 255
    cba6:	2f 89       	ldd	r18, Y+23	; 0x17
    cba8:	38 8d       	ldd	r19, Y+24	; 0x18
    cbaa:	2c 5f       	subi	r18, 0xFC	; 252
    cbac:	3f 4f       	sbci	r19, 0xFF	; 255
    cbae:	38 8f       	std	Y+24, r19	; 0x18
    cbb0:	2f 8b       	std	Y+23, r18	; 0x17
    cbb2:	89 89       	ldd	r24, Y+17	; 0x11
    cbb4:	9a 89       	ldd	r25, Y+18	; 0x12
    cbb6:	04 96       	adiw	r24, 0x04	; 4
    cbb8:	9a 8b       	std	Y+18, r25	; 0x12
    cbba:	89 8b       	std	Y+17, r24	; 0x11
    cbbc:	ad 89       	ldd	r26, Y+21	; 0x15
    cbbe:	be 89       	ldd	r27, Y+22	; 0x16
    cbc0:	12 96       	adiw	r26, 0x02	; 2
    cbc2:	be 8b       	std	Y+22, r27	; 0x16
    cbc4:	ad 8b       	std	Y+21, r26	; 0x15
    cbc6:	b2 e0       	ldi	r27, 0x02	; 2
    cbc8:	2b 0e       	add	r2, r27
    cbca:	31 1c       	adc	r3, r1
		{
			GyroAvgNoise = 999.0f;
		}
	}

	for (axis = 0; axis <= YAW; axis ++)
    cbcc:	f3 30       	cpi	r31, 0x03	; 3
    cbce:	09 f0       	breq	.+2      	; 0xcbd2 <Sensor_PID+0x58a>
    cbd0:	80 ce       	rjmp	.-768    	; 0xc8d2 <Sensor_PID+0x28a>
		IntegralAccVertf[P2] += (accVertf + accVertZerof);		
	}

	else
	{
*/		IntegralAccVertf[P1] += accVertf;
    cbd2:	c0 90 26 05 	lds	r12, 0x0526
    cbd6:	d0 90 27 05 	lds	r13, 0x0527
    cbda:	e0 90 28 05 	lds	r14, 0x0528
    cbde:	f0 90 29 05 	lds	r15, 0x0529
		IntegralAccVertf[P2] += accVertf;		
    cbe2:	20 91 49 09 	lds	r18, 0x0949
    cbe6:	30 91 4a 09 	lds	r19, 0x094A
    cbea:	40 91 4b 09 	lds	r20, 0x094B
    cbee:	50 91 4c 09 	lds	r21, 0x094C
    cbf2:	c7 01       	movw	r24, r14
    cbf4:	b6 01       	movw	r22, r12
    cbf6:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
    cbfa:	4b 01       	movw	r8, r22
    cbfc:	5c 01       	movw	r10, r24

/*	
	IntegralAccVertf[P1] = IntegralAccVertf[P1] * 0.9995f;			// Decimator. Shrink integrals by .05%
	IntegralAccVertf[P2] = IntegralAccVertf[P2] * 0.9995f;
*/
	tempf1 = Config.AccVertFilter;	// Promote AccVertfilter (0 to 127)
    cbfe:	80 91 6d 06 	lds	r24, 0x066D
    cc02:	68 2f       	mov	r22, r24
    cc04:	88 0f       	add	r24, r24
    cc06:	77 0b       	sbc	r23, r23
    cc08:	88 0b       	sbc	r24, r24
    cc0a:	99 0b       	sbc	r25, r25
    cc0c:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
	tempf1 = tempf1 / 10000.0f;
    cc10:	20 e0       	ldi	r18, 0x00	; 0
    cc12:	30 e4       	ldi	r19, 0x40	; 64
    cc14:	4c e1       	ldi	r20, 0x1C	; 28
    cc16:	56 e4       	ldi	r21, 0x46	; 70
    cc18:	0e 94 4c 6d 	call	0xda98	; 0xda98 <__divsf3>
    cc1c:	9b 01       	movw	r18, r22
    cc1e:	ac 01       	movw	r20, r24
	tempf1 = 1.0f - tempf1;
    cc20:	60 e0       	ldi	r22, 0x00	; 0
    cc22:	70 e0       	ldi	r23, 0x00	; 0
    cc24:	80 e8       	ldi	r24, 0x80	; 128
    cc26:	9f e3       	ldi	r25, 0x3F	; 63
    cc28:	0e 94 da 6c 	call	0xd9b4	; 0xd9b4 <__subsf3>
    cc2c:	2b 01       	movw	r4, r22
    cc2e:	3c 01       	movw	r6, r24
		IntegralAccVertf[P2] += (accVertf + accVertZerof);		
	}

	else
	{
*/		IntegralAccVertf[P1] += accVertf;
    cc30:	20 91 45 09 	lds	r18, 0x0945
    cc34:	30 91 46 09 	lds	r19, 0x0946
    cc38:	40 91 47 09 	lds	r20, 0x0947
    cc3c:	50 91 48 09 	lds	r21, 0x0948
    cc40:	c7 01       	movw	r24, r14
    cc42:	b6 01       	movw	r22, r12
    cc44:	0e 94 db 6c 	call	0xd9b6	; 0xd9b6 <__addsf3>
*/
	tempf1 = Config.AccVertFilter;	// Promote AccVertfilter (0 to 127)
	tempf1 = tempf1 / 10000.0f;
	tempf1 = 1.0f - tempf1;
	
	IntegralAccVertf[P1] = IntegralAccVertf[P1] * tempf1;			// Decimator. Shrink integrals by user-set amount
    cc48:	a3 01       	movw	r20, r6
    cc4a:	92 01       	movw	r18, r4
    cc4c:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    cc50:	60 93 45 09 	sts	0x0945, r22
    cc54:	70 93 46 09 	sts	0x0946, r23
    cc58:	80 93 47 09 	sts	0x0947, r24
    cc5c:	90 93 48 09 	sts	0x0948, r25
	IntegralAccVertf[P2] = IntegralAccVertf[P2] * tempf1;
    cc60:	a3 01       	movw	r20, r6
    cc62:	92 01       	movw	r18, r4
    cc64:	c5 01       	movw	r24, r10
    cc66:	b4 01       	movw	r22, r8
    cc68:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <__mulsf3>
    cc6c:	60 93 49 09 	sts	0x0949, r22
    cc70:	70 93 4a 09 	sts	0x094A, r23
    cc74:	80 93 4b 09 	sts	0x094B, r24
    cc78:	90 93 4c 09 	sts	0x094C, r25
    cc7c:	05 e4       	ldi	r16, 0x45	; 69
    cc7e:	19 e0       	ldi	r17, 0x09	; 9
    cc80:	a1 2c       	mov	r10, r1
    cc82:	b1 2c       	mov	r11, r1
    cc84:	f5 01       	movw	r30, r10
    cc86:	ee 53       	subi	r30, 0x3E	; 62
    cc88:	f9 4f       	sbci	r31, 0xF9	; 249
	//************************************************************
	// Limit the Z-acc I-terms to the user-set limits
	//************************************************************
	for (i = P1; i <= P2; i++)
	{
		tempf1 = Config.Raw_I_Constrain[i][ZED];	// Promote
    cc8a:	60 81       	ld	r22, Z
    cc8c:	71 81       	ldd	r23, Z+1	; 0x01
    cc8e:	82 81       	ldd	r24, Z+2	; 0x02
    cc90:	93 81       	ldd	r25, Z+3	; 0x03
    cc92:	0e 94 f6 6d 	call	0xdbec	; 0xdbec <__floatsisf>
    cc96:	6b 01       	movw	r12, r22
    cc98:	7c 01       	movw	r14, r24
		
		if (IntegralAccVertf[i] > tempf1)
    cc9a:	9b 01       	movw	r18, r22
    cc9c:	ac 01       	movw	r20, r24
    cc9e:	f8 01       	movw	r30, r16
    cca0:	60 81       	ld	r22, Z
    cca2:	71 81       	ldd	r23, Z+1	; 0x01
    cca4:	82 81       	ldd	r24, Z+2	; 0x02
    cca6:	93 81       	ldd	r25, Z+3	; 0x03
    cca8:	0e 94 a6 6e 	call	0xdd4c	; 0xdd4c <__gesf2>
    ccac:	18 16       	cp	r1, r24
    ccae:	34 f4       	brge	.+12     	; 0xccbc <Sensor_PID+0x674>
		{
			IntegralAccVertf[i] = tempf1;
    ccb0:	d8 01       	movw	r26, r16
    ccb2:	cd 92       	st	X+, r12
    ccb4:	dd 92       	st	X+, r13
    ccb6:	ed 92       	st	X+, r14
    ccb8:	fc 92       	st	X, r15
    ccba:	13 97       	sbiw	r26, 0x03	; 3
		}
			
		if (IntegralAccVertf[i] < -tempf1)
    ccbc:	f7 fa       	bst	r15, 7
    ccbe:	f0 94       	com	r15
    ccc0:	f7 f8       	bld	r15, 7
    ccc2:	f0 94       	com	r15
    ccc4:	a7 01       	movw	r20, r14
    ccc6:	96 01       	movw	r18, r12
    ccc8:	f8 01       	movw	r30, r16
    ccca:	60 81       	ld	r22, Z
    cccc:	71 81       	ldd	r23, Z+1	; 0x01
    ccce:	82 81       	ldd	r24, Z+2	; 0x02
    ccd0:	93 81       	ldd	r25, Z+3	; 0x03
    ccd2:	0e 94 47 6d 	call	0xda8e	; 0xda8e <__cmpsf2>
    ccd6:	87 ff       	sbrs	r24, 7
    ccd8:	06 c0       	rjmp	.+12     	; 0xcce6 <Sensor_PID+0x69e>
		{
			IntegralAccVertf[i] = -tempf1;
    ccda:	d8 01       	movw	r26, r16
    ccdc:	cd 92       	st	X+, r12
    ccde:	dd 92       	st	X+, r13
    cce0:	ed 92       	st	X+, r14
    cce2:	fc 92       	st	X, r15
    cce4:	13 97       	sbiw	r26, 0x03	; 3
    cce6:	b0 e1       	ldi	r27, 0x10	; 16
    cce8:	ab 0e       	add	r10, r27
    ccea:	b1 1c       	adc	r11, r1
    ccec:	0c 5f       	subi	r16, 0xFC	; 252
    ccee:	1f 4f       	sbci	r17, 0xFF	; 255

	
	//************************************************************
	// Limit the Z-acc I-terms to the user-set limits
	//************************************************************
	for (i = P1; i <= P2; i++)
    ccf0:	e0 e2       	ldi	r30, 0x20	; 32
    ccf2:	ae 16       	cp	r10, r30
    ccf4:	b1 04       	cpc	r11, r1
    ccf6:	31 f6       	brne	.-116    	; 0xcc84 <Sensor_PID+0x63c>
		if (IntegralAccVertf[i] < -tempf1)
		{
			IntegralAccVertf[i] = -tempf1;
		}
	}
}
    ccf8:	a7 96       	adiw	r28, 0x27	; 39
    ccfa:	0f b6       	in	r0, 0x3f	; 63
    ccfc:	f8 94       	cli
    ccfe:	de bf       	out	0x3e, r29	; 62
    cd00:	0f be       	out	0x3f, r0	; 63
    cd02:	cd bf       	out	0x3d, r28	; 61
    cd04:	df 91       	pop	r29
    cd06:	cf 91       	pop	r28
    cd08:	1f 91       	pop	r17
    cd0a:	0f 91       	pop	r16
    cd0c:	ff 90       	pop	r15
    cd0e:	ef 90       	pop	r14
    cd10:	df 90       	pop	r13
    cd12:	cf 90       	pop	r12
    cd14:	bf 90       	pop	r11
    cd16:	af 90       	pop	r10
    cd18:	9f 90       	pop	r9
    cd1a:	8f 90       	pop	r8
    cd1c:	7f 90       	pop	r7
    cd1e:	6f 90       	pop	r6
    cd20:	5f 90       	pop	r5
    cd22:	4f 90       	pop	r4
    cd24:	3f 90       	pop	r3
    cd26:	2f 90       	pop	r2
    cd28:	08 95       	ret

0000cd2a <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    cd2a:	2f 92       	push	r2
    cd2c:	3f 92       	push	r3
    cd2e:	4f 92       	push	r4
    cd30:	5f 92       	push	r5
    cd32:	6f 92       	push	r6
    cd34:	7f 92       	push	r7
    cd36:	8f 92       	push	r8
    cd38:	9f 92       	push	r9
    cd3a:	af 92       	push	r10
    cd3c:	bf 92       	push	r11
    cd3e:	cf 92       	push	r12
    cd40:	df 92       	push	r13
    cd42:	ef 92       	push	r14
    cd44:	ff 92       	push	r15
    cd46:	0f 93       	push	r16
    cd48:	1f 93       	push	r17
    cd4a:	cf 93       	push	r28
    cd4c:	df 93       	push	r29
    cd4e:	cd b7       	in	r28, 0x3d	; 61
    cd50:	de b7       	in	r29, 0x3e	; 62
    cd52:	c4 54       	subi	r28, 0x44	; 68
    cd54:	d1 09       	sbc	r29, r1
    cd56:	0f b6       	in	r0, 0x3f	; 63
    cd58:	f8 94       	cli
    cd5a:	de bf       	out	0x3e, r29	; 62
    cd5c:	0f be       	out	0x3f, r0	; 63
    cd5e:	cd bf       	out	0x3d, r28	; 61
	int32_t PID_Gyro_I_actual2 = 0;			// P2
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    cd60:	80 91 6e 06 	lds	r24, 0x066E
    cd64:	8f 8b       	std	Y+23, r24	; 0x17
    cd66:	80 91 74 06 	lds	r24, 0x0674
    cd6a:	88 8f       	std	Y+24, r24	; 0x18
    cd6c:	80 91 7a 06 	lds	r24, 0x067A
    cd70:	89 8f       	std	Y+25, r24	; 0x19
    cd72:	80 91 82 06 	lds	r24, 0x0682
    cd76:	8a 8f       	std	Y+26, r24	; 0x1a
    cd78:	80 91 88 06 	lds	r24, 0x0688
    cd7c:	8b 8f       	std	Y+27, r24	; 0x1b
    cd7e:	80 91 8e 06 	lds	r24, 0x068E
    cd82:	8c 8f       	std	Y+28, r24	; 0x1c
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS+1] = 
    cd84:	80 91 6f 06 	lds	r24, 0x066F
    cd88:	89 87       	std	Y+9, r24	; 0x09
    cd8a:	80 91 75 06 	lds	r24, 0x0675
    cd8e:	8a 87       	std	Y+10, r24	; 0x0a
    cd90:	80 91 7b 06 	lds	r24, 0x067B
    cd94:	8b 87       	std	Y+11, r24	; 0x0b
    cd96:	80 91 80 06 	lds	r24, 0x0680
    cd9a:	8c 87       	std	Y+12, r24	; 0x0c
    cd9c:	80 91 83 06 	lds	r24, 0x0683
    cda0:	8d 87       	std	Y+13, r24	; 0x0d
    cda2:	80 91 89 06 	lds	r24, 0x0689
    cda6:	8e 87       	std	Y+14, r24	; 0x0e
    cda8:	80 91 8f 06 	lds	r24, 0x068F
    cdac:	8f 87       	std	Y+15, r24	; 0x0f
    cdae:	80 91 94 06 	lds	r24, 0x0694
    cdb2:	88 8b       	std	Y+16, r24	; 0x10
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult, Config.FlightMode[P1].A_Zed_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult, Config.FlightMode[P2].A_Zed_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    cdb4:	80 91 72 06 	lds	r24, 0x0672
    cdb8:	89 8b       	std	Y+17, r24	; 0x11
    cdba:	80 91 78 06 	lds	r24, 0x0678
    cdbe:	8a 8b       	std	Y+18, r24	; 0x12
    cdc0:	80 91 7f 06 	lds	r24, 0x067F
    cdc4:	8b 8b       	std	Y+19, r24	; 0x13
    cdc6:	80 91 86 06 	lds	r24, 0x0686
    cdca:	8c 8b       	std	Y+20, r24	; 0x14
    cdcc:	80 91 8c 06 	lds	r24, 0x068C
    cdd0:	8d 8b       	std	Y+21, r24	; 0x15
    cdd2:	80 91 93 06 	lds	r24, 0x0693
    cdd6:	8e 8b       	std	Y+22, r24	; 0x16
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    cdd8:	80 91 31 08 	lds	r24, 0x0831
    cddc:	90 91 32 08 	lds	r25, 0x0832
    cde0:	9a 83       	std	Y+2, r25	; 0x02
    cde2:	89 83       	std	Y+1, r24	; 0x01
    cde4:	80 91 35 08 	lds	r24, 0x0835
    cde8:	90 91 36 08 	lds	r25, 0x0836
    cdec:	9c 83       	std	Y+4, r25	; 0x04
    cdee:	8b 83       	std	Y+3, r24	; 0x03
    cdf0:	80 91 33 08 	lds	r24, 0x0833
    cdf4:	90 91 34 08 	lds	r25, 0x0834
    cdf8:	9e 83       	std	Y+6, r25	; 0x06
    cdfa:	8d 83       	std	Y+5, r24	; 0x05
    cdfc:	80 91 37 08 	lds	r24, 0x0837
    ce00:	90 91 38 08 	lds	r25, 0x0838
    ce04:	98 87       	std	Y+8, r25	; 0x08
    ce06:	8f 83       	std	Y+7, r24	; 0x07
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    ce08:	80 91 7e 06 	lds	r24, 0x067E
    ce0c:	20 e4       	ldi	r18, 0x40	; 64
    ce0e:	82 02       	muls	r24, r18
    ce10:	c0 01       	movw	r24, r0
    ce12:	11 24       	eor	r1, r1
    ce14:	6c 01       	movw	r12, r24
    ce16:	99 0f       	add	r25, r25
    ce18:	ee 08       	sbc	r14, r14
    ce1a:	ff 08       	sbc	r15, r15
    ce1c:	c9 ae       	std	Y+57, r12	; 0x39
    ce1e:	da ae       	std	Y+58, r13	; 0x3a
    ce20:	eb ae       	std	Y+59, r14	; 0x3b
    ce22:	fc ae       	std	Y+60, r15	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    ce24:	80 91 92 06 	lds	r24, 0x0692
    ce28:	20 e4       	ldi	r18, 0x40	; 64
    ce2a:	82 02       	muls	r24, r18
    ce2c:	c0 01       	movw	r24, r0
    ce2e:	11 24       	eor	r1, r1
    ce30:	6c 01       	movw	r12, r24
    ce32:	99 0f       	add	r25, r25
    ce34:	ee 08       	sbc	r14, r14
    ce36:	ff 08       	sbc	r15, r15
    ce38:	21 96       	adiw	r28, 0x01	; 1
    ce3a:	cc ae       	std	Y+60, r12	; 0x3c
    ce3c:	dd ae       	std	Y+61, r13	; 0x3d
    ce3e:	ee ae       	std	Y+62, r14	; 0x3e
    ce40:	ff ae       	std	Y+63, r15	; 0x3f
    ce42:	21 97       	sbiw	r28, 0x01	; 1
    ce44:	21 e7       	ldi	r18, 0x71	; 113
    ce46:	39 e0       	ldi	r19, 0x09	; 9
    ce48:	3a a3       	std	Y+34, r19	; 0x22
    ce4a:	29 a3       	std	Y+33, r18	; 0x21
    ce4c:	4b ed       	ldi	r20, 0xDB	; 219
    ce4e:	55 e0       	ldi	r21, 0x05	; 5
    ce50:	5e ab       	std	Y+54, r21	; 0x36
    ce52:	4d ab       	std	Y+53, r20	; 0x35
    ce54:	89 e5       	ldi	r24, 0x59	; 89
    ce56:	99 e0       	ldi	r25, 0x09	; 9
    ce58:	9a a7       	std	Y+42, r25	; 0x2a
    ce5a:	89 a7       	std	Y+41, r24	; 0x29
    ce5c:	e9 e1       	ldi	r30, 0x19	; 25
    ce5e:	f6 e0       	ldi	r31, 0x06	; 6
    ce60:	fc a7       	std	Y+44, r31	; 0x2c
    ce62:	eb a7       	std	Y+43, r30	; 0x2b
    ce64:	9e 01       	movw	r18, r28
    ce66:	2f 5f       	subi	r18, 0xFF	; 255
    ce68:	3f 4f       	sbci	r19, 0xFF	; 255
    ce6a:	38 a7       	std	Y+40, r19	; 0x28
    ce6c:	2f a3       	std	Y+39, r18	; 0x27
    ce6e:	45 e6       	ldi	r20, 0x65	; 101
    ce70:	59 e0       	ldi	r21, 0x09	; 9
    ce72:	5e a7       	std	Y+46, r21	; 0x2e
    ce74:	4d a7       	std	Y+45, r20	; 0x2d
    ce76:	09 e3       	ldi	r16, 0x39	; 57
    ce78:	16 e0       	ldi	r17, 0x06	; 6
    ce7a:	ce 01       	movw	r24, r28
    ce7c:	47 96       	adiw	r24, 0x17	; 23
    ce7e:	98 af       	std	Y+56, r25	; 0x38
    ce80:	8f ab       	std	Y+55, r24	; 0x37
    ce82:	e1 e2       	ldi	r30, 0x21	; 33
    ce84:	f9 e0       	ldi	r31, 0x09	; 9
    ce86:	f8 a3       	std	Y+32, r31	; 0x20
    ce88:	ef 8f       	std	Y+31, r30	; 0x1f
    ce8a:	28 5f       	subi	r18, 0xF8	; 248
    ce8c:	3f 4f       	sbci	r19, 0xFF	; 255
    ce8e:	3c ab       	std	Y+52, r19	; 0x34
    ce90:	2b ab       	std	Y+51, r18	; 0x33
    ce92:	ae 01       	movw	r20, r28
    ce94:	46 5e       	subi	r20, 0xE6	; 230
    ce96:	5f 4f       	sbci	r21, 0xFF	; 255
    ce98:	5a ab       	std	Y+50, r21	; 0x32
    ce9a:	49 ab       	std	Y+49, r20	; 0x31
    ce9c:	0a 97       	sbiw	r24, 0x0a	; 10
    ce9e:	98 ab       	std	Y+48, r25	; 0x30
    cea0:	8f a7       	std	Y+47, r24	; 0x2f
    cea2:	e5 e6       	ldi	r30, 0x65	; 101
    cea4:	f9 e0       	ldi	r31, 0x09	; 9
    cea6:	fe a3       	std	Y+38, r31	; 0x26
    cea8:	ed a3       	std	Y+37, r30	; 0x25
    ceaa:	21 2c       	mov	r2, r1
    ceac:	31 2c       	mov	r3, r1

	//************************************************************
	// PID loop
	//************************************************************
	
	for (axis = 0; axis <= YAW; axis ++)
    ceae:	1d 8e       	std	Y+29, r1	; 0x1d
	{
		//************************************************************
		// Get average gyro readings for P-terms
		//************************************************************

		gyroADC[axis] = (int16_t)(PID_AvgGyro[axis] / LoopCount);
    ceb0:	20 91 2d 05 	lds	r18, 0x052D
    ceb4:	30 e0       	ldi	r19, 0x00	; 0
    ceb6:	40 e0       	ldi	r20, 0x00	; 0
    ceb8:	50 e0       	ldi	r21, 0x00	; 0
    ceba:	e9 a1       	ldd	r30, Y+33	; 0x21
    cebc:	fa a1       	ldd	r31, Y+34	; 0x22
    cebe:	60 81       	ld	r22, Z
    cec0:	71 81       	ldd	r23, Z+1	; 0x01
    cec2:	82 81       	ldd	r24, Z+2	; 0x02
    cec4:	93 81       	ldd	r25, Z+3	; 0x03
    cec6:	0e 94 40 6f 	call	0xde80	; 0xde80 <__divmodsi4>
    ceca:	49 01       	movw	r8, r18
    cecc:	5a 01       	movw	r10, r20
    cece:	ed a9       	ldd	r30, Y+53	; 0x35
    ced0:	fe a9       	ldd	r31, Y+54	; 0x36
    ced2:	21 93       	st	Z+, r18
    ced4:	31 93       	st	Z+, r19
    ced6:	fe ab       	std	Y+54, r31	; 0x36
    ced8:	ed ab       	std	Y+53, r30	; 0x35
		PID_AvgGyro[axis] = 0;					// Reset average
    ceda:	e9 a1       	ldd	r30, Y+33	; 0x21
    cedc:	fa a1       	ldd	r31, Y+34	; 0x22
    cede:	10 82       	st	Z, r1
    cee0:	11 82       	std	Z+1, r1	; 0x01
    cee2:	12 82       	std	Z+2, r1	; 0x02
    cee4:	13 82       	std	Z+3, r1	; 0x03

		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    cee6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    cee8:	f2 30       	cpi	r31, 0x02	; 2
    ceea:	39 f0       	breq	.+14     	; 0xcefa <Calculate_PID+0x1d0>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    ceec:	41 2c       	mov	r4, r1
    ceee:	51 2c       	mov	r5, r1
    cef0:	32 01       	movw	r6, r4
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    cef2:	c1 2c       	mov	r12, r1
    cef4:	d1 2c       	mov	r13, r1
    cef6:	76 01       	movw	r14, r12
    cef8:	0a c0       	rjmp	.+20     	; 0xcf0e <Calculate_PID+0x1e4>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    cefa:	21 96       	adiw	r28, 0x01	; 1
    cefc:	4c ac       	ldd	r4, Y+60	; 0x3c
    cefe:	5d ac       	ldd	r5, Y+61	; 0x3d
    cf00:	6e ac       	ldd	r6, Y+62	; 0x3e
    cf02:	7f ac       	ldd	r7, Y+63	; 0x3f
    cf04:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    cf06:	c9 ac       	ldd	r12, Y+57	; 0x39
    cf08:	da ac       	ldd	r13, Y+58	; 0x3a
    cf0a:	eb ac       	ldd	r14, Y+59	; 0x3b
    cf0c:	fc ac       	ldd	r15, Y+60	; 0x3c
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    cf0e:	ef a9       	ldd	r30, Y+55	; 0x37
    cf10:	f8 ad       	ldd	r31, Y+56	; 0x38
    cf12:	41 91       	ld	r20, Z+
    cf14:	f8 af       	std	Y+56, r31	; 0x38
    cf16:	ef ab       	std	Y+55, r30	; 0x37
    cf18:	04 2e       	mov	r0, r20
    cf1a:	00 0c       	add	r0, r0
    cf1c:	55 0b       	sbc	r21, r21
    cf1e:	48 9d       	mul	r20, r8
    cf20:	c0 01       	movw	r24, r0
    cf22:	49 9d       	mul	r20, r9
    cf24:	90 0d       	add	r25, r0
    cf26:	58 9d       	mul	r21, r8
    cf28:	90 0d       	add	r25, r0
    cf2a:	11 24       	eor	r1, r1
    cf2c:	09 2e       	mov	r0, r25
    cf2e:	00 0c       	add	r0, r0
    cf30:	aa 0b       	sbc	r26, r26
    cf32:	bb 0b       	sbc	r27, r27
    cf34:	a7 01       	movw	r20, r14
    cf36:	96 01       	movw	r18, r12
    cf38:	28 0f       	add	r18, r24
    cf3a:	39 1f       	adc	r19, r25
    cf3c:	4a 1f       	adc	r20, r26
    cf3e:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    cf40:	a3 e0       	ldi	r26, 0x03	; 3
    cf42:	b0 e0       	ldi	r27, 0x00	; 0
    cf44:	0e 94 83 6f 	call	0xdf06	; 0xdf06 <__muluhisi3>
    cf48:	25 96       	adiw	r28, 0x05	; 5
    cf4a:	6c af       	std	Y+60, r22	; 0x3c
    cf4c:	7d af       	std	Y+61, r23	; 0x3d
    cf4e:	8e af       	std	Y+62, r24	; 0x3e
    cf50:	9f af       	std	Y+63, r25	; 0x3f
    cf52:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    cf54:	eb a9       	ldd	r30, Y+51	; 0x33
    cf56:	fc a9       	ldd	r31, Y+52	; 0x34
    cf58:	a1 91       	ld	r26, Z+
    cf5a:	fc ab       	std	Y+52, r31	; 0x34
    cf5c:	eb ab       	std	Y+51, r30	; 0x33
    cf5e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    cf60:	f8 a1       	ldd	r31, Y+32	; 0x20
    cf62:	20 81       	ld	r18, Z
    cf64:	31 81       	ldd	r19, Z+1	; 0x01
    cf66:	42 81       	ldd	r20, Z+2	; 0x02
    cf68:	53 81       	ldd	r21, Z+3	; 0x03
    cf6a:	0a 2e       	mov	r0, r26
    cf6c:	00 0c       	add	r0, r0
    cf6e:	bb 0b       	sbc	r27, r27
    cf70:	0e 94 8e 6f 	call	0xdf1c	; 0xdf1c <__mulshisi3>
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    cf74:	6b 01       	movw	r12, r22
    cf76:	7c 01       	movw	r14, r24
    cf78:	45 e0       	ldi	r20, 0x05	; 5
    cf7a:	f5 94       	asr	r15
    cf7c:	e7 94       	ror	r14
    cf7e:	d7 94       	ror	r13
    cf80:	c7 94       	ror	r12
    cf82:	4a 95       	dec	r20
    cf84:	d1 f7       	brne	.-12     	; 0xcf7a <Calculate_PID+0x250>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    cf86:	e9 a9       	ldd	r30, Y+49	; 0x31
    cf88:	fa a9       	ldd	r31, Y+50	; 0x32
    cf8a:	81 91       	ld	r24, Z+
    cf8c:	fa ab       	std	Y+50, r31	; 0x32
    cf8e:	e9 ab       	std	Y+49, r30	; 0x31
    cf90:	08 2e       	mov	r0, r24
    cf92:	00 0c       	add	r0, r0
    cf94:	99 0b       	sbc	r25, r25
    cf96:	88 9d       	mul	r24, r8
    cf98:	90 01       	movw	r18, r0
    cf9a:	89 9d       	mul	r24, r9
    cf9c:	30 0d       	add	r19, r0
    cf9e:	98 9d       	mul	r25, r8
    cfa0:	30 0d       	add	r19, r0
    cfa2:	11 24       	eor	r1, r1
    cfa4:	c9 01       	movw	r24, r18
    cfa6:	33 0f       	add	r19, r19
    cfa8:	aa 0b       	sbc	r26, r26
    cfaa:	bb 0b       	sbc	r27, r27
    cfac:	a3 01       	movw	r20, r6
    cfae:	92 01       	movw	r18, r4
    cfb0:	28 0f       	add	r18, r24
    cfb2:	39 1f       	adc	r19, r25
    cfb4:	4a 1f       	adc	r20, r26
    cfb6:	5b 1f       	adc	r21, r27
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    cfb8:	a3 e0       	ldi	r26, 0x03	; 3
    cfba:	b0 e0       	ldi	r27, 0x00	; 0
    cfbc:	0e 94 83 6f 	call	0xdf06	; 0xdf06 <__muluhisi3>
    cfc0:	4b 01       	movw	r8, r22
    cfc2:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    cfc4:	ef a5       	ldd	r30, Y+47	; 0x2f
    cfc6:	f8 a9       	ldd	r31, Y+48	; 0x30
    cfc8:	a1 91       	ld	r26, Z+
    cfca:	f8 ab       	std	Y+48, r31	; 0x30
    cfcc:	ef a7       	std	Y+47, r30	; 0x2f
    cfce:	ef 8d       	ldd	r30, Y+31	; 0x1f
    cfd0:	f8 a1       	ldd	r31, Y+32	; 0x20
    cfd2:	24 85       	ldd	r18, Z+12	; 0x0c
    cfd4:	35 85       	ldd	r19, Z+13	; 0x0d
    cfd6:	46 85       	ldd	r20, Z+14	; 0x0e
    cfd8:	57 85       	ldd	r21, Z+15	; 0x0f
    cfda:	0a 2e       	mov	r0, r26
    cfdc:	00 0c       	add	r0, r0
    cfde:	bb 0b       	sbc	r27, r27
    cfe0:	0e 94 8e 6f 	call	0xdf1c	; 0xdf1c <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    cfe4:	2b 01       	movw	r4, r22
    cfe6:	3c 01       	movw	r6, r24
    cfe8:	55 e0       	ldi	r21, 0x05	; 5
    cfea:	75 94       	asr	r7
    cfec:	67 94       	ror	r6
    cfee:	57 94       	ror	r5
    cff0:	47 94       	ror	r4
    cff2:	5a 95       	dec	r21
    cff4:	d1 f7       	brne	.-12     	; 0xcfea <Calculate_PID+0x2c0>
    cff6:	f8 01       	movw	r30, r16
    cff8:	e3 5a       	subi	r30, 0xA3	; 163
    cffa:	ff 4f       	sbci	r31, 0xFF	; 255
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    cffc:	40 81       	ld	r20, Z
    cffe:	51 81       	ldd	r21, Z+1	; 0x01
    d000:	62 81       	ldd	r22, Z+2	; 0x02
    d002:	73 81       	ldd	r23, Z+3	; 0x03
    d004:	4c 15       	cp	r20, r12
    d006:	5d 05       	cpc	r21, r13
    d008:	6e 05       	cpc	r22, r14
    d00a:	7f 05       	cpc	r23, r15
    d00c:	84 f0       	brlt	.+32     	; 0xd02e <Calculate_PID+0x304>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    d00e:	88 27       	eor	r24, r24
    d010:	99 27       	eor	r25, r25
    d012:	dc 01       	movw	r26, r24
    d014:	84 1b       	sub	r24, r20
    d016:	95 0b       	sbc	r25, r21
    d018:	a6 0b       	sbc	r26, r22
    d01a:	b7 0b       	sbc	r27, r23
    d01c:	b7 01       	movw	r22, r14
    d01e:	a6 01       	movw	r20, r12
    d020:	c8 16       	cp	r12, r24
    d022:	d9 06       	cpc	r13, r25
    d024:	ea 06       	cpc	r14, r26
    d026:	fb 06       	cpc	r15, r27
    d028:	14 f4       	brge	.+4      	; 0xd02e <Calculate_PID+0x304>
    d02a:	ac 01       	movw	r20, r24
    d02c:	bd 01       	movw	r22, r26
    d02e:	f8 01       	movw	r30, r16
    d030:	e3 59       	subi	r30, 0x93	; 147
    d032:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    d034:	80 81       	ld	r24, Z
    d036:	91 81       	ldd	r25, Z+1	; 0x01
    d038:	a2 81       	ldd	r26, Z+2	; 0x02
    d03a:	b3 81       	ldd	r27, Z+3	; 0x03
    d03c:	84 15       	cp	r24, r4
    d03e:	95 05       	cpc	r25, r5
    d040:	a6 05       	cpc	r26, r6
    d042:	b7 05       	cpc	r27, r7
    d044:	84 f0       	brlt	.+32     	; 0xd066 <Calculate_PID+0x33c>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    d046:	cc 24       	eor	r12, r12
    d048:	dd 24       	eor	r13, r13
    d04a:	76 01       	movw	r14, r12
    d04c:	c8 1a       	sub	r12, r24
    d04e:	d9 0a       	sbc	r13, r25
    d050:	ea 0a       	sbc	r14, r26
    d052:	fb 0a       	sbc	r15, r27
    d054:	d3 01       	movw	r26, r6
    d056:	c2 01       	movw	r24, r4
    d058:	4c 14       	cp	r4, r12
    d05a:	5d 04       	cpc	r5, r13
    d05c:	6e 04       	cpc	r6, r14
    d05e:	7f 04       	cpc	r7, r15
    d060:	14 f4       	brge	.+4      	; 0xd066 <Calculate_PID+0x33c>
    d062:	d7 01       	movw	r26, r14
    d064:	c6 01       	movw	r24, r12

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE); // Currently PID_SCALE = 6 so /64
    d066:	25 96       	adiw	r28, 0x05	; 5
    d068:	cc ac       	ldd	r12, Y+60	; 0x3c
    d06a:	dd ac       	ldd	r13, Y+61	; 0x3d
    d06c:	ee ac       	ldd	r14, Y+62	; 0x3e
    d06e:	ff ac       	ldd	r15, Y+63	; 0x3f
    d070:	25 97       	sbiw	r28, 0x05	; 5
    d072:	4c 0d       	add	r20, r12
    d074:	5d 1d       	adc	r21, r13
    d076:	6e 1d       	adc	r22, r14
    d078:	7f 1d       	adc	r23, r15
    d07a:	26 e0       	ldi	r18, 0x06	; 6
    d07c:	75 95       	asr	r23
    d07e:	67 95       	ror	r22
    d080:	57 95       	ror	r21
    d082:	47 95       	ror	r20
    d084:	2a 95       	dec	r18
    d086:	d1 f7       	brne	.-12     	; 0xd07c <Calculate_PID+0x352>
    d088:	e9 a5       	ldd	r30, Y+41	; 0x29
    d08a:	fa a5       	ldd	r31, Y+42	; 0x2a
    d08c:	51 83       	std	Z+1, r21	; 0x01
    d08e:	40 83       	st	Z, r20
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    d090:	88 0e       	add	r8, r24
    d092:	99 1e       	adc	r9, r25
    d094:	aa 1e       	adc	r10, r26
    d096:	bb 1e       	adc	r11, r27
    d098:	36 e0       	ldi	r19, 0x06	; 6
    d09a:	b5 94       	asr	r11
    d09c:	a7 94       	ror	r10
    d09e:	97 94       	ror	r9
    d0a0:	87 94       	ror	r8
    d0a2:	3a 95       	dec	r19
    d0a4:	d1 f7       	brne	.-12     	; 0xd09a <Calculate_PID+0x370>
    d0a6:	97 82       	std	Z+7, r9	; 0x07
    d0a8:	86 82       	std	Z+6, r8	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    d0aa:	fd 8d       	ldd	r31, Y+29	; 0x1d
    d0ac:	f2 30       	cpi	r31, 0x02	; 2
    d0ae:	d9 f1       	breq	.+118    	; 0xd126 <Calculate_PID+0x3fc>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    d0b0:	eb a5       	ldd	r30, Y+43	; 0x2b
    d0b2:	fc a5       	ldd	r31, Y+44	; 0x2c
    d0b4:	40 81       	ld	r20, Z
    d0b6:	51 81       	ldd	r21, Z+1	; 0x01
    d0b8:	ef a1       	ldd	r30, Y+39	; 0x27
    d0ba:	f8 a5       	ldd	r31, Y+40	; 0x28
    d0bc:	80 81       	ld	r24, Z
    d0be:	91 81       	ldd	r25, Z+1	; 0x01
    d0c0:	9a 01       	movw	r18, r20
    d0c2:	28 1b       	sub	r18, r24
    d0c4:	39 0b       	sbc	r19, r25
    d0c6:	61 e1       	ldi	r22, 0x11	; 17
    d0c8:	e6 2e       	mov	r14, r22
    d0ca:	f1 2c       	mov	r15, r1
    d0cc:	ec 0e       	add	r14, r28
    d0ce:	fd 1e       	adc	r15, r29
    d0d0:	e2 0c       	add	r14, r2
    d0d2:	f3 1c       	adc	r15, r3
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    d0d4:	f7 01       	movw	r30, r14
    d0d6:	a0 81       	ld	r26, Z
    d0d8:	0a 2e       	mov	r0, r26
    d0da:	00 0c       	add	r0, r0
    d0dc:	bb 0b       	sbc	r27, r27
    d0de:	0e 94 65 6f 	call	0xdeca	; 0xdeca <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    d0e2:	bb 27       	eor	r27, r27
    d0e4:	97 fd       	sbrc	r25, 7
    d0e6:	ba 95       	dec	r27
    d0e8:	a9 2f       	mov	r26, r25
    d0ea:	98 2f       	mov	r25, r24
    d0ec:	87 2f       	mov	r24, r23
    d0ee:	ed a1       	ldd	r30, Y+37	; 0x25
    d0f0:	fe a1       	ldd	r31, Y+38	; 0x26
    d0f2:	91 83       	std	Z+1, r25	; 0x01
    d0f4:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    d0f6:	ef a1       	ldd	r30, Y+39	; 0x27
    d0f8:	f8 a5       	ldd	r31, Y+40	; 0x28
    d0fa:	84 81       	ldd	r24, Z+4	; 0x04
    d0fc:	95 81       	ldd	r25, Z+5	; 0x05
    d0fe:	9a 01       	movw	r18, r20
    d100:	28 1b       	sub	r18, r24
    d102:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    d104:	f7 01       	movw	r30, r14
    d106:	a3 81       	ldd	r26, Z+3	; 0x03
    d108:	0a 2e       	mov	r0, r26
    d10a:	00 0c       	add	r0, r0
    d10c:	bb 0b       	sbc	r27, r27
    d10e:	0e 94 65 6f 	call	0xdeca	; 0xdeca <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    d112:	bb 27       	eor	r27, r27
    d114:	97 fd       	sbrc	r25, 7
    d116:	ba 95       	dec	r27
    d118:	a9 2f       	mov	r26, r25
    d11a:	98 2f       	mov	r25, r24
    d11c:	87 2f       	mov	r24, r23
    d11e:	ed a1       	ldd	r30, Y+37	; 0x25
    d120:	fe a1       	ldd	r31, Y+38	; 0x26
    d122:	97 83       	std	Z+7, r25	; 0x07
    d124:	86 83       	std	Z+6, r24	; 0x06
    d126:	fd 8d       	ldd	r31, Y+29	; 0x1d
    d128:	ff 5f       	subi	r31, 0xFF	; 255
    d12a:	fd 8f       	std	Y+29, r31	; 0x1d
    d12c:	2f ef       	ldi	r18, 0xFF	; 255
    d12e:	22 1a       	sub	r2, r18
    d130:	32 0a       	sbc	r3, r18
    d132:	49 a1       	ldd	r20, Y+33	; 0x21
    d134:	5a a1       	ldd	r21, Y+34	; 0x22
    d136:	4c 5f       	subi	r20, 0xFC	; 252
    d138:	5f 4f       	sbci	r21, 0xFF	; 255
    d13a:	5a a3       	std	Y+34, r21	; 0x22
    d13c:	49 a3       	std	Y+33, r20	; 0x21
    d13e:	89 a5       	ldd	r24, Y+41	; 0x29
    d140:	9a a5       	ldd	r25, Y+42	; 0x2a
    d142:	02 96       	adiw	r24, 0x02	; 2
    d144:	9a a7       	std	Y+42, r25	; 0x2a
    d146:	89 a7       	std	Y+41, r24	; 0x29
    d148:	eb a5       	ldd	r30, Y+43	; 0x2b
    d14a:	fc a5       	ldd	r31, Y+44	; 0x2c
    d14c:	32 96       	adiw	r30, 0x02	; 2
    d14e:	fc a7       	std	Y+44, r31	; 0x2c
    d150:	eb a7       	std	Y+43, r30	; 0x2b
    d152:	2f a1       	ldd	r18, Y+39	; 0x27
    d154:	38 a5       	ldd	r19, Y+40	; 0x28
    d156:	2e 5f       	subi	r18, 0xFE	; 254
    d158:	3f 4f       	sbci	r19, 0xFF	; 255
    d15a:	38 a7       	std	Y+40, r19	; 0x28
    d15c:	2f a3       	std	Y+39, r18	; 0x27
    d15e:	4d a1       	ldd	r20, Y+37	; 0x25
    d160:	5e a1       	ldd	r21, Y+38	; 0x26
    d162:	4e 5f       	subi	r20, 0xFE	; 254
    d164:	5f 4f       	sbci	r21, 0xFF	; 255
    d166:	5e a3       	std	Y+38, r21	; 0x26
    d168:	4d a3       	std	Y+37, r20	; 0x25
    d16a:	0c 5f       	subi	r16, 0xFC	; 252
    d16c:	1f 4f       	sbci	r17, 0xFF	; 255
    d16e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d170:	98 a1       	ldd	r25, Y+32	; 0x20
    d172:	04 96       	adiw	r24, 0x04	; 4
    d174:	98 a3       	std	Y+32, r25	; 0x20
    d176:	8f 8f       	std	Y+31, r24	; 0x1f

	//************************************************************
	// PID loop
	//************************************************************
	
	for (axis = 0; axis <= YAW; axis ++)
    d178:	9d 8d       	ldd	r25, Y+29	; 0x1d
    d17a:	93 30       	cpi	r25, 0x03	; 3
    d17c:	09 f0       	breq	.+2      	; 0xd180 <Calculate_PID+0x456>
    d17e:	98 ce       	rjmp	.-720    	; 0xceb0 <Calculate_PID+0x186>

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		// P-term
		PID_acc_temp1 = (int32_t)-accVertf;					// Zeroed AccSmooth signal. Negate to oppose G
    d180:	80 91 26 05 	lds	r24, 0x0526
    d184:	90 91 27 05 	lds	r25, 0x0527
    d188:	a0 91 28 05 	lds	r26, 0x0528
    d18c:	b0 91 29 05 	lds	r27, 0x0529
    d190:	bc 01       	movw	r22, r24
    d192:	cd 01       	movw	r24, r26
    d194:	90 58       	subi	r25, 0x80	; 128
    d196:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    d19a:	69 a3       	std	Y+33, r22	; 0x21
    d19c:	7a a3       	std	Y+34, r23	; 0x22
    d19e:	8b a3       	std	Y+35, r24	; 0x23
    d1a0:	9c a3       	std	Y+36, r25	; 0x24
    d1a2:	1e 01       	movw	r2, r28
    d1a4:	e3 e1       	ldi	r30, 0x13	; 19
    d1a6:	2e 0e       	add	r2, r30
    d1a8:	31 1c       	adc	r3, r1
    d1aa:	25 e4       	ldi	r18, 0x45	; 69
    d1ac:	39 e0       	ldi	r19, 0x09	; 9
    d1ae:	38 a3       	std	Y+32, r19	; 0x20
    d1b0:	2f 8f       	std	Y+31, r18	; 0x1f
    d1b2:	ae 01       	movw	r20, r28
    d1b4:	44 5f       	subi	r20, 0xF4	; 244
    d1b6:	5f 4f       	sbci	r21, 0xFF	; 255
    d1b8:	5e 8f       	std	Y+30, r21	; 0x1e
    d1ba:	4d 8f       	std	Y+29, r20	; 0x1d
    d1bc:	00 e0       	ldi	r16, 0x00	; 0
    d1be:	10 e0       	ldi	r17, 0x00	; 0
		PID_acc_temp1 *= L_gain[i][YAW];					// Multiply P-term (Max gain of 127)
    d1c0:	f1 01       	movw	r30, r2
    d1c2:	a0 81       	ld	r26, Z
    d1c4:	0a 2e       	mov	r0, r26
    d1c6:	00 0c       	add	r0, r0
    d1c8:	bb 0b       	sbc	r27, r27
    d1ca:	29 a1       	ldd	r18, Y+33	; 0x21
    d1cc:	3a a1       	ldd	r19, Y+34	; 0x22
    d1ce:	4b a1       	ldd	r20, Y+35	; 0x23
    d1d0:	5c a1       	ldd	r21, Y+36	; 0x24
    d1d2:	0e 94 8e 6f 	call	0xdf1c	; 0xdf1c <__mulshisi3>
    d1d6:	2b 01       	movw	r4, r22
    d1d8:	3c 01       	movw	r6, r24
		PID_acc_temp1 = PID_acc_temp1 * (int32_t)3;			// Multiply by 3

		// I-term
		PID_acc_temp2 = (int32_t)-IntegralAccVertf[i];		// Get and copy integrated Z-acc value. Negate to oppose G
    d1da:	ef 8d       	ldd	r30, Y+31	; 0x1f
    d1dc:	f8 a1       	ldd	r31, Y+32	; 0x20
    d1de:	81 91       	ld	r24, Z+
    d1e0:	91 91       	ld	r25, Z+
    d1e2:	a1 91       	ld	r26, Z+
    d1e4:	b1 91       	ld	r27, Z+
    d1e6:	f8 a3       	std	Y+32, r31	; 0x20
    d1e8:	ef 8f       	std	Y+31, r30	; 0x1f
    d1ea:	bc 01       	movw	r22, r24
    d1ec:	cd 01       	movw	r24, r26
    d1ee:	90 58       	subi	r25, 0x80	; 128
    d1f0:	0e 94 be 6d 	call	0xdb7c	; 0xdb7c <__fixsfsi>
    d1f4:	9b 01       	movw	r18, r22
    d1f6:	ac 01       	movw	r20, r24
		PID_acc_temp2 *= I_gain[i][ZED];					// Multiply I-term (Max gain of 127)
    d1f8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    d1fa:	fe 8d       	ldd	r31, Y+30	; 0x1e
    d1fc:	a0 81       	ld	r26, Z
    d1fe:	0a 2e       	mov	r0, r26
    d200:	00 0c       	add	r0, r0
    d202:	bb 0b       	sbc	r27, r27
    d204:	0e 94 8e 6f 	call	0xdf1c	; 0xdf1c <__mulshisi3>
    d208:	f8 01       	movw	r30, r16
    d20a:	ee 55       	subi	r30, 0x5E	; 94
    d20c:	f9 4f       	sbci	r31, 0xF9	; 249
		PID_acc_temp2 = PID_acc_temp2 >> 2;					// Divide by 4

		if (PID_acc_temp2 > Config.Raw_I_Limits[i][ZED])	// Limit I-term outputs to user-set percentage
    d20e:	80 80       	ld	r8, Z
    d210:	91 80       	ldd	r9, Z+1	; 0x01
    d212:	a2 80       	ldd	r10, Z+2	; 0x02
    d214:	b3 80       	ldd	r11, Z+3	; 0x03
    d216:	6b 01       	movw	r12, r22
    d218:	7c 01       	movw	r14, r24
    d21a:	92 e0       	ldi	r25, 0x02	; 2
    d21c:	f5 94       	asr	r15
    d21e:	e7 94       	ror	r14
    d220:	d7 94       	ror	r13
    d222:	c7 94       	ror	r12
    d224:	9a 95       	dec	r25
    d226:	d1 f7       	brne	.-12     	; 0xd21c <Calculate_PID+0x4f2>
    d228:	8c 14       	cp	r8, r12
    d22a:	9d 04       	cpc	r9, r13
    d22c:	ae 04       	cpc	r10, r14
    d22e:	bf 04       	cpc	r11, r15
    d230:	14 f4       	brge	.+4      	; 0xd236 <Calculate_PID+0x50c>
    d232:	75 01       	movw	r14, r10
    d234:	64 01       	movw	r12, r8
		{
			PID_acc_temp2 = Config.Raw_I_Limits[i][ZED];
		}
		if (PID_acc_temp2 < -Config.Raw_I_Limits[i][ZED])
    d236:	b0 94       	com	r11
    d238:	a0 94       	com	r10
    d23a:	90 94       	com	r9
    d23c:	80 94       	com	r8
    d23e:	81 1c       	adc	r8, r1
    d240:	91 1c       	adc	r9, r1
    d242:	a1 1c       	adc	r10, r1
    d244:	b1 1c       	adc	r11, r1
	for (i = P1; i <= P2; i++)
	{
		// P-term
		PID_acc_temp1 = (int32_t)-accVertf;					// Zeroed AccSmooth signal. Negate to oppose G
		PID_acc_temp1 *= L_gain[i][YAW];					// Multiply P-term (Max gain of 127)
		PID_acc_temp1 = PID_acc_temp1 * (int32_t)3;			// Multiply by 3
    d246:	a3 e0       	ldi	r26, 0x03	; 3
    d248:	b0 e0       	ldi	r27, 0x00	; 0
    d24a:	a3 01       	movw	r20, r6
    d24c:	92 01       	movw	r18, r4
    d24e:	0e 94 83 6f 	call	0xdf06	; 0xdf06 <__muluhisi3>
    d252:	c8 14       	cp	r12, r8
    d254:	d9 04       	cpc	r13, r9
    d256:	ea 04       	cpc	r14, r10
    d258:	fb 04       	cpc	r15, r11
    d25a:	14 f4       	brge	.+4      	; 0xd260 <Calculate_PID+0x536>
    d25c:	75 01       	movw	r14, r10
    d25e:	64 01       	movw	r12, r8
		{
			PID_acc_temp2 = -Config.Raw_I_Limits[i][ZED];
		}

		// Formulate PI value and scale
		PID_ACCs[i][YAW] = (int16_t)((PID_acc_temp1 + PID_acc_temp2) >> PID_SCALE); // Copy to global values
    d260:	c6 0e       	add	r12, r22
    d262:	d7 1e       	adc	r13, r23
    d264:	e8 1e       	adc	r14, r24
    d266:	f9 1e       	adc	r15, r25
    d268:	86 e0       	ldi	r24, 0x06	; 6
    d26a:	f5 94       	asr	r15
    d26c:	e7 94       	ror	r14
    d26e:	d7 94       	ror	r13
    d270:	c7 94       	ror	r12
    d272:	8a 95       	dec	r24
    d274:	d1 f7       	brne	.-12     	; 0xd26a <Calculate_PID+0x540>
    d276:	ed a5       	ldd	r30, Y+45	; 0x2d
    d278:	fe a5       	ldd	r31, Y+46	; 0x2e
    d27a:	d5 82       	std	Z+5, r13	; 0x05
    d27c:	c4 82       	std	Z+4, r12	; 0x04
    d27e:	f3 e0       	ldi	r31, 0x03	; 3
    d280:	2f 0e       	add	r2, r31
    d282:	31 1c       	adc	r3, r1
    d284:	2d 8d       	ldd	r18, Y+29	; 0x1d
    d286:	3e 8d       	ldd	r19, Y+30	; 0x1e
    d288:	2c 5f       	subi	r18, 0xFC	; 252
    d28a:	3f 4f       	sbci	r19, 0xFF	; 255
    d28c:	3e 8f       	std	Y+30, r19	; 0x1e
    d28e:	2d 8f       	std	Y+29, r18	; 0x1d
    d290:	00 5f       	subi	r16, 0xF0	; 240
    d292:	1f 4f       	sbci	r17, 0xFF	; 255
    d294:	4d a5       	ldd	r20, Y+45	; 0x2d
    d296:	5e a5       	ldd	r21, Y+46	; 0x2e
    d298:	4a 5f       	subi	r20, 0xFA	; 250
    d29a:	5f 4f       	sbci	r21, 0xFF	; 255
    d29c:	5e a7       	std	Y+46, r21	; 0x2e
    d29e:	4d a7       	std	Y+45, r20	; 0x2d
	//************************************************************
	// Calculate an Acc-Z PI value 
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
    d2a0:	00 32       	cpi	r16, 0x20	; 32
    d2a2:	11 05       	cpc	r17, r1
    d2a4:	09 f0       	breq	.+2      	; 0xd2a8 <Calculate_PID+0x57e>
    d2a6:	8c cf       	rjmp	.-232    	; 0xd1c0 <Calculate_PID+0x496>
		}

		// Formulate PI value and scale
		PID_ACCs[i][YAW] = (int16_t)((PID_acc_temp1 + PID_acc_temp2) >> PID_SCALE); // Copy to global values
	}
}
    d2a8:	cc 5b       	subi	r28, 0xBC	; 188
    d2aa:	df 4f       	sbci	r29, 0xFF	; 255
    d2ac:	0f b6       	in	r0, 0x3f	; 63
    d2ae:	f8 94       	cli
    d2b0:	de bf       	out	0x3e, r29	; 62
    d2b2:	0f be       	out	0x3f, r0	; 63
    d2b4:	cd bf       	out	0x3d, r28	; 61
    d2b6:	df 91       	pop	r29
    d2b8:	cf 91       	pop	r28
    d2ba:	1f 91       	pop	r17
    d2bc:	0f 91       	pop	r16
    d2be:	ff 90       	pop	r15
    d2c0:	ef 90       	pop	r14
    d2c2:	df 90       	pop	r13
    d2c4:	cf 90       	pop	r12
    d2c6:	bf 90       	pop	r11
    d2c8:	af 90       	pop	r10
    d2ca:	9f 90       	pop	r9
    d2cc:	8f 90       	pop	r8
    d2ce:	7f 90       	pop	r7
    d2d0:	6f 90       	pop	r6
    d2d2:	5f 90       	pop	r5
    d2d4:	4f 90       	pop	r4
    d2d6:	3f 90       	pop	r3
    d2d8:	2f 90       	pop	r2
    d2da:	08 95       	ret

0000d2dc <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    d2dc:	ec e0       	ldi	r30, 0x0C	; 12
    d2de:	f8 e0       	ldi	r31, 0x08	; 8
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    d2e0:	80 e0       	ldi	r24, 0x00	; 0
    d2e2:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    d2e4:	9c 01       	movw	r18, r24
    d2e6:	22 0f       	add	r18, r18
    d2e8:	33 1f       	adc	r19, r19
    d2ea:	d9 01       	movw	r26, r18
    d2ec:	a2 52       	subi	r26, 0x22	; 34
    d2ee:	b7 4f       	sbci	r27, 0xF7	; 247
    d2f0:	4d 91       	ld	r20, X+
    d2f2:	5c 91       	ld	r21, X
    d2f4:	61 91       	ld	r22, Z+
    d2f6:	71 91       	ld	r23, Z+
    d2f8:	46 1b       	sub	r20, r22
    d2fa:	57 0b       	sbc	r21, r23
    d2fc:	d9 01       	movw	r26, r18
    d2fe:	ad 57       	subi	r26, 0x7D	; 125
    d300:	b6 4f       	sbci	r27, 0xF6	; 246
    d302:	11 96       	adiw	r26, 0x01	; 1
    d304:	5c 93       	st	X, r21
    d306:	4e 93       	st	-X, r20
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    d308:	01 96       	adiw	r24, 0x01	; 1
    d30a:	88 30       	cpi	r24, 0x08	; 8
    d30c:	91 05       	cpc	r25, r1
    d30e:	51 f7       	brne	.-44     	; 0xd2e4 <RxGetChannels+0x8>
	}

	// Special handling for monopolar throttle
	// Preset to RxChannelZeroOffset[THROTTLE] = 2750 (-250 to 2250) for safety. 
	// Normally MonopolarThrottle is referenced to the lowest throttle position.
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE]; 
    d310:	80 91 de 08 	lds	r24, 0x08DE
    d314:	90 91 df 08 	lds	r25, 0x08DF
    d318:	20 91 0c 08 	lds	r18, 0x080C
    d31c:	30 91 0d 08 	lds	r19, 0x080D
    d320:	82 1b       	sub	r24, r18
    d322:	93 0b       	sbc	r25, r19
    d324:	90 93 82 09 	sts	0x0982, r25
    d328:	80 93 81 09 	sts	0x0981, r24

	// Bipolar throttle must use the nominal mid-point as calibration is done at throttle minimum
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    d32c:	80 91 de 08 	lds	r24, 0x08DE
    d330:	90 91 df 08 	lds	r25, 0x08DF
    d334:	86 5a       	subi	r24, 0xA6	; 166
    d336:	9e 40       	sbci	r25, 0x0E	; 14
    d338:	90 93 84 09 	sts	0x0984, r25
    d33c:	80 93 83 09 	sts	0x0983, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    d340:	80 91 3b 08 	lds	r24, 0x083B
    d344:	81 30       	cpi	r24, 0x01	; 1
    d346:	59 f4       	brne	.+22     	; 0xd35e <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    d348:	80 91 85 09 	lds	r24, 0x0985
    d34c:	90 91 86 09 	lds	r25, 0x0986
    d350:	91 95       	neg	r25
    d352:	81 95       	neg	r24
    d354:	91 09       	sbc	r25, r1
    d356:	90 93 86 09 	sts	0x0986, r25
    d35a:	80 93 85 09 	sts	0x0985, r24
	}

	if (Config.ElevatorPol == REVERSED)
    d35e:	80 91 dc 08 	lds	r24, 0x08DC
    d362:	81 30       	cpi	r24, 0x01	; 1
    d364:	59 f4       	brne	.+22     	; 0xd37c <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    d366:	80 91 87 09 	lds	r24, 0x0987
    d36a:	90 91 88 09 	lds	r25, 0x0988
    d36e:	91 95       	neg	r25
    d370:	81 95       	neg	r24
    d372:	91 09       	sbc	r25, r1
    d374:	90 93 88 09 	sts	0x0988, r25
    d378:	80 93 87 09 	sts	0x0987, r24
	}

	if (Config.RudderPol == REVERSED)
    d37c:	80 91 3a 08 	lds	r24, 0x083A
    d380:	81 30       	cpi	r24, 0x01	; 1
    d382:	59 f4       	brne	.+22     	; 0xd39a <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    d384:	80 91 89 09 	lds	r24, 0x0989
    d388:	90 91 8a 09 	lds	r25, 0x098A
    d38c:	91 95       	neg	r25
    d38e:	81 95       	neg	r24
    d390:	91 09       	sbc	r25, r1
    d392:	90 93 8a 09 	sts	0x098A, r25
    d396:	80 93 89 09 	sts	0x0989, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    d39a:	40 91 85 09 	lds	r20, 0x0985
    d39e:	50 91 86 09 	lds	r21, 0x0986
    d3a2:	80 91 87 09 	lds	r24, 0x0987
    d3a6:	90 91 88 09 	lds	r25, 0x0988
    d3aa:	20 91 89 09 	lds	r18, 0x0989
    d3ae:	30 91 8a 09 	lds	r19, 0x098A
    d3b2:	84 0f       	add	r24, r20
    d3b4:	95 1f       	adc	r25, r21
    d3b6:	82 0f       	add	r24, r18
    d3b8:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    d3ba:	20 91 68 05 	lds	r18, 0x0568
    d3be:	30 91 69 05 	lds	r19, 0x0569
    d3c2:	ac 01       	movw	r20, r24
    d3c4:	42 1b       	sub	r20, r18
    d3c6:	53 0b       	sbc	r21, r19
    d3c8:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    d3ca:	2b 5f       	subi	r18, 0xFB	; 251
    d3cc:	3f 4f       	sbci	r19, 0xFF	; 255
    d3ce:	2b 30       	cpi	r18, 0x0B	; 11
    d3d0:	31 05       	cpc	r19, r1
    d3d2:	38 f4       	brcc	.+14     	; 0xd3e2 <RxGetChannels+0x106>
    d3d4:	20 91 81 09 	lds	r18, 0x0981
    d3d8:	30 91 82 09 	lds	r19, 0x0982
    d3dc:	23 33       	cpi	r18, 0x33	; 51
    d3de:	31 05       	cpc	r19, r1
    d3e0:	24 f0       	brlt	.+8      	; 0xd3ea <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    d3e2:	20 91 34 05 	lds	r18, 0x0534
    d3e6:	21 60       	ori	r18, 0x01	; 1
    d3e8:	03 c0       	rjmp	.+6      	; 0xd3f0 <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    d3ea:	20 91 34 05 	lds	r18, 0x0534
    d3ee:	2e 7f       	andi	r18, 0xFE	; 254
    d3f0:	20 93 34 05 	sts	0x0534, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    d3f4:	10 92 94 09 	sts	0x0994, r1
    d3f8:	10 92 93 09 	sts	0x0993, r1

	OldRxSum = RxSum;
    d3fc:	90 93 69 05 	sts	0x0569, r25
    d400:	80 93 68 05 	sts	0x0568, r24
    d404:	08 95       	ret

0000d406 <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    d406:	ef 92       	push	r14
    d408:	ff 92       	push	r15
    d40a:	0f 93       	push	r16
    d40c:	1f 93       	push	r17
    d40e:	cf 93       	push	r28
    d410:	df 93       	push	r29
    d412:	cd b7       	in	r28, 0x3d	; 61
    d414:	de b7       	in	r29, 0x3e	; 62
    d416:	60 97       	sbiw	r28, 0x10	; 16
    d418:	0f b6       	in	r0, 0x3f	; 63
    d41a:	f8 94       	cli
    d41c:	de bf       	out	0x3e, r29	; 62
    d41e:	0f be       	out	0x3f, r0	; 63
    d420:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    d422:	9e 01       	movw	r18, r28
    d424:	2f 5f       	subi	r18, 0xFF	; 255
    d426:	3f 4f       	sbci	r19, 0xFF	; 255
    d428:	80 e1       	ldi	r24, 0x10	; 16
    d42a:	f9 01       	movw	r30, r18
    d42c:	11 92       	st	Z+, r1
    d42e:	8a 95       	dec	r24
    d430:	e9 f7       	brne	.-6      	; 0xd42c <CenterSticks+0x26>
    d432:	48 e0       	ldi	r20, 0x08	; 8
    d434:	79 01       	movw	r14, r18
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    d436:	d9 01       	movw	r26, r18
    d438:	80 e0       	ldi	r24, 0x00	; 0
    d43a:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i = 0; i < 8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    d43c:	bc 01       	movw	r22, r24
    d43e:	66 0f       	add	r22, r22
    d440:	77 1f       	adc	r23, r23
    d442:	62 52       	subi	r22, 0x22	; 34
    d444:	77 4f       	sbci	r23, 0xF7	; 247
    d446:	fb 01       	movw	r30, r22
    d448:	60 81       	ld	r22, Z
    d44a:	71 81       	ldd	r23, Z+1	; 0x01
    d44c:	0d 91       	ld	r16, X+
    d44e:	1c 91       	ld	r17, X
    d450:	11 97       	sbiw	r26, 0x01	; 1
    d452:	60 0f       	add	r22, r16
    d454:	71 1f       	adc	r23, r17
    d456:	6d 93       	st	X+, r22
    d458:	7d 93       	st	X+, r23
    d45a:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i = 0; i < 8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    d45c:	88 30       	cpi	r24, 0x08	; 8
    d45e:	91 05       	cpc	r25, r1
    d460:	69 f7       	brne	.-38     	; 0xd43c <CenterSticks+0x36>
    d462:	ff e7       	ldi	r31, 0x7F	; 127
    d464:	5a e1       	ldi	r21, 0x1A	; 26
    d466:	86 e0       	ldi	r24, 0x06	; 6
    d468:	f1 50       	subi	r31, 0x01	; 1
    d46a:	50 40       	sbci	r21, 0x00	; 0
    d46c:	80 40       	sbci	r24, 0x00	; 0
    d46e:	e1 f7       	brne	.-8      	; 0xd468 <CenterSticks+0x62>
    d470:	00 c0       	rjmp	.+0      	; 0xd472 <CenterSticks+0x6c>
    d472:	00 00       	nop
    d474:	41 50       	subi	r20, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i = 0; i < 8; i++)
    d476:	f1 f6       	brne	.-68     	; 0xd434 <CenterSticks+0x2e>
    d478:	ac e0       	ldi	r26, 0x0C	; 12
    d47a:	b8 e0       	ldi	r27, 0x08	; 8
    d47c:	9e 01       	movw	r18, r28
    d47e:	2f 5e       	subi	r18, 0xEF	; 239
    d480:	3f 4f       	sbci	r19, 0xFF	; 255
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    d482:	f7 01       	movw	r30, r14
    d484:	81 91       	ld	r24, Z+
    d486:	91 91       	ld	r25, Z+
    d488:	7f 01       	movw	r14, r30
    d48a:	04 96       	adiw	r24, 0x04	; 4
    d48c:	43 e0       	ldi	r20, 0x03	; 3
    d48e:	96 95       	lsr	r25
    d490:	87 95       	ror	r24
    d492:	4a 95       	dec	r20
    d494:	e1 f7       	brne	.-8      	; 0xd48e <CenterSticks+0x88>
    d496:	8d 93       	st	X+, r24
    d498:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    d49a:	e2 17       	cp	r30, r18
    d49c:	f3 07       	cpc	r31, r19
    d49e:	89 f7       	brne	.-30     	; 0xd482 <CenterSticks+0x7c>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    d4a0:	60 96       	adiw	r28, 0x10	; 16
    d4a2:	0f b6       	in	r0, 0x3f	; 63
    d4a4:	f8 94       	cli
    d4a6:	de bf       	out	0x3e, r29	; 62
    d4a8:	0f be       	out	0x3f, r0	; 63
    d4aa:	cd bf       	out	0x3d, r28	; 61
    d4ac:	df 91       	pop	r29
    d4ae:	cf 91       	pop	r28
    d4b0:	1f 91       	pop	r17
    d4b2:	0f 91       	pop	r16
    d4b4:	ff 90       	pop	r15
    d4b6:	ef 90       	pop	r14
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    d4b8:	0c 94 5a 26 	jmp	0x4cb4	; 0x4cb4 <Save_Config_to_EEPROM>

0000d4bc <UpdateTransition>:
void UpdateTransition(void)
{
	int16_t temp = 0;
	
	// Offset RC input to (approx) -250 to 2250
	temp = RCinputs[Config.FlightChan] + 1000;
    d4bc:	e0 91 66 06 	lds	r30, 0x0666
    d4c0:	ee 0f       	add	r30, r30
    d4c2:	ff 0b       	sbc	r31, r31
    d4c4:	ed 57       	subi	r30, 0x7D	; 125
    d4c6:	f6 4f       	sbci	r31, 0xF6	; 246
    d4c8:	80 81       	ld	r24, Z
    d4ca:	91 81       	ldd	r25, Z+1	; 0x01
    d4cc:	88 51       	subi	r24, 0x18	; 24
    d4ce:	9c 4f       	sbci	r25, 0xFC	; 252
    d4d0:	97 ff       	sbrs	r25, 7
    d4d2:	02 c0       	rjmp	.+4      	; 0xd4d8 <UpdateTransition+0x1c>
    d4d4:	80 e0       	ldi	r24, 0x00	; 0
    d4d6:	90 e0       	ldi	r25, 0x00	; 0
	// Trim lower end to zero (0 to 2250)
	if (temp < 0) temp = 0;

	// Convert 0 to 2250 to 0 to 125. Divide by 20
	// Round to avoid truncation errors
	transition = (temp + 10) / 20;
    d4d8:	0a 96       	adiw	r24, 0x0a	; 10
    d4da:	64 e1       	ldi	r22, 0x14	; 20
    d4dc:	70 e0       	ldi	r23, 0x00	; 0
    d4de:	0e 94 2c 6f 	call	0xde58	; 0xde58 <__divmodhi4>

	// transition now has a range of 0 to 101 for 0 to 2000 input
	// Limit extent of transition value 0 to 100 (101 steps)
	if (transition > 100) transition = 100;
    d4e2:	65 36       	cpi	r22, 0x65	; 101
    d4e4:	71 05       	cpc	r23, r1
    d4e6:	2c f4       	brge	.+10     	; 0xd4f2 <UpdateTransition+0x36>
	// Trim lower end to zero (0 to 2250)
	if (temp < 0) temp = 0;

	// Convert 0 to 2250 to 0 to 125. Divide by 20
	// Round to avoid truncation errors
	transition = (temp + 10) / 20;
    d4e8:	70 93 39 05 	sts	0x0539, r23
    d4ec:	60 93 38 05 	sts	0x0538, r22
    d4f0:	08 95       	ret

	// transition now has a range of 0 to 101 for 0 to 2000 input
	// Limit extent of transition value 0 to 100 (101 steps)
	if (transition > 100) transition = 100;
    d4f2:	84 e6       	ldi	r24, 0x64	; 100
    d4f4:	90 e0       	ldi	r25, 0x00	; 0
    d4f6:	90 93 39 05 	sts	0x0539, r25
    d4fa:	80 93 38 05 	sts	0x0538, r24
    d4fe:	08 95       	ret

0000d500 <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    d500:	3f 92       	push	r3
    d502:	4f 92       	push	r4
    d504:	5f 92       	push	r5
    d506:	6f 92       	push	r6
    d508:	7f 92       	push	r7
    d50a:	8f 92       	push	r8
    d50c:	9f 92       	push	r9
    d50e:	af 92       	push	r10
    d510:	bf 92       	push	r11
    d512:	cf 92       	push	r12
    d514:	df 92       	push	r13
    d516:	ef 92       	push	r14
    d518:	ff 92       	push	r15
    d51a:	0f 93       	push	r16
    d51c:	1f 93       	push	r17
    d51e:	cf 93       	push	r28
    d520:	df 93       	push	r29
    d522:	00 d0       	rcall	.+0      	; 0xd524 <output_servo_ppm+0x24>
    d524:	00 d0       	rcall	.+0      	; 0xd526 <output_servo_ppm+0x26>
    d526:	cd b7       	in	r28, 0x3d	; 61
    d528:	de b7       	in	r29, 0x3e	; 62
    d52a:	38 2e       	mov	r3, r24
    d52c:	e8 ee       	ldi	r30, 0xE8	; 232
    d52e:	ce 2e       	mov	r12, r30
    d530:	e6 e0       	ldi	r30, 0x06	; 6
    d532:	de 2e       	mov	r13, r30
    d534:	09 e3       	ldi	r16, 0x39	; 57
    d536:	16 e0       	ldi	r17, 0x06	; 6
    d538:	da 82       	std	Y+2, r13	; 0x02
    d53a:	c9 82       	std	Y+1, r12	; 0x01
    d53c:	1c 82       	std	Y+4, r1	; 0x04
    d53e:	1b 82       	std	Y+3, r1	; 0x03
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    d540:	fa e0       	ldi	r31, 0x0A	; 10
    d542:	4f 2e       	mov	r4, r31
    d544:	51 2c       	mov	r5, r1
    d546:	61 2c       	mov	r6, r1
    d548:	71 2c       	mov	r7, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds and check limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    d54a:	eb 80       	ldd	r14, Y+3	; 0x03
    d54c:	fc 80       	ldd	r15, Y+4	; 0x04
    d54e:	ee 0c       	add	r14, r14
    d550:	ff 1c       	adc	r15, r15
    d552:	f7 01       	movw	r30, r14
    d554:	eb 56       	subi	r30, 0x6B	; 107
    d556:	f6 4f       	sbci	r31, 0xF6	; 246
    d558:	20 81       	ld	r18, Z
    d55a:	31 81       	ldd	r19, Z+1	; 0x01
    d55c:	a9 01       	movw	r20, r18
    d55e:	60 e0       	ldi	r22, 0x00	; 0
    d560:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    d562:	e9 81       	ldd	r30, Y+1	; 0x01
    d564:	fa 81       	ldd	r31, Y+2	; 0x02
    d566:	80 81       	ld	r24, Z
    d568:	82 30       	cpi	r24, 0x02	; 2
    d56a:	89 f0       	breq	.+34     	; 0xd58e <output_servo_ppm+0x8e>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    d56c:	db 01       	movw	r26, r22
    d56e:	ca 01       	movw	r24, r20
    d570:	86 5a       	subi	r24, 0xA6	; 166
    d572:	9e 40       	sbci	r25, 0x0E	; 14
    d574:	a1 09       	sbc	r26, r1
    d576:	b1 09       	sbc	r27, r1
    d578:	b5 95       	asr	r27
    d57a:	a7 95       	ror	r26
    d57c:	97 95       	ror	r25
    d57e:	87 95       	ror	r24
    d580:	9c 01       	movw	r18, r24
    d582:	ad 01       	movw	r20, r26
    d584:	24 52       	subi	r18, 0x24	; 36
    d586:	3a 4f       	sbci	r19, 0xFA	; 250
    d588:	4f 4f       	sbci	r20, 0xFF	; 255
    d58a:	5f 4f       	sbci	r21, 0xFF	; 255
    d58c:	13 c0       	rjmp	.+38     	; 0xd5b4 <output_servo_ppm+0xb4>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    d58e:	db 01       	movw	r26, r22
    d590:	ca 01       	movw	r24, r20
    d592:	52 e0       	ldi	r21, 0x02	; 2
    d594:	88 0f       	add	r24, r24
    d596:	99 1f       	adc	r25, r25
    d598:	aa 1f       	adc	r26, r26
    d59a:	bb 1f       	adc	r27, r27
    d59c:	5a 95       	dec	r21
    d59e:	d1 f7       	brne	.-12     	; 0xd594 <output_servo_ppm+0x94>
    d5a0:	bc 01       	movw	r22, r24
    d5a2:	cd 01       	movw	r24, r26
    d5a4:	6b 5f       	subi	r22, 0xFB	; 251
    d5a6:	7f 4f       	sbci	r23, 0xFF	; 255
    d5a8:	8f 4f       	sbci	r24, 0xFF	; 255
    d5aa:	9f 4f       	sbci	r25, 0xFF	; 255
    d5ac:	a3 01       	movw	r20, r6
    d5ae:	92 01       	movw	r18, r4
    d5b0:	0e 94 40 6f 	call	0xde80	; 0xde80 <__divmodsi4>
		}
		
		// Enforce min, max travel limits in microseconds
		if (temp > Config.Limits[i].maximum)
    d5b4:	f8 01       	movw	r30, r16
    d5b6:	83 85       	ldd	r24, Z+11	; 0x0b
    d5b8:	94 85       	ldd	r25, Z+12	; 0x0c
    d5ba:	09 2e       	mov	r0, r25
    d5bc:	00 0c       	add	r0, r0
    d5be:	aa 0b       	sbc	r26, r26
    d5c0:	bb 0b       	sbc	r27, r27
    d5c2:	82 17       	cp	r24, r18
    d5c4:	93 07       	cpc	r25, r19
    d5c6:	a4 07       	cpc	r26, r20
    d5c8:	b5 07       	cpc	r27, r21
    d5ca:	7c f0       	brlt	.+30     	; 0xd5ea <output_servo_ppm+0xea>
		{
			temp = Config.Limits[i].maximum;
		}

		else if (temp < Config.Limits[i].minimum)
    d5cc:	81 85       	ldd	r24, Z+9	; 0x09
    d5ce:	92 85       	ldd	r25, Z+10	; 0x0a
    d5d0:	4c 01       	movw	r8, r24
    d5d2:	99 0f       	add	r25, r25
    d5d4:	aa 08       	sbc	r10, r10
    d5d6:	bb 08       	sbc	r11, r11
    d5d8:	da 01       	movw	r26, r20
    d5da:	c9 01       	movw	r24, r18
    d5dc:	28 15       	cp	r18, r8
    d5de:	39 05       	cpc	r19, r9
    d5e0:	4a 05       	cpc	r20, r10
    d5e2:	5b 05       	cpc	r21, r11
    d5e4:	14 f4       	brge	.+4      	; 0xd5ea <output_servo_ppm+0xea>
    d5e6:	d5 01       	movw	r26, r10
    d5e8:	c4 01       	movw	r24, r8
		{
			temp = Config.Limits[i].minimum;
		}

		ServoOut[i] = (uint16_t)temp;
    d5ea:	f7 01       	movw	r30, r14
    d5ec:	eb 56       	subi	r30, 0x6B	; 107
    d5ee:	f6 4f       	sbci	r31, 0xF6	; 246
    d5f0:	91 83       	std	Z+1, r25	; 0x01
    d5f2:	80 83       	st	Z, r24
    d5f4:	8b 81       	ldd	r24, Y+3	; 0x03
    d5f6:	9c 81       	ldd	r25, Y+4	; 0x04
    d5f8:	01 96       	adiw	r24, 0x01	; 1
    d5fa:	9c 83       	std	Y+4, r25	; 0x04
    d5fc:	8b 83       	std	Y+3, r24	; 0x03
    d5fe:	e9 81       	ldd	r30, Y+1	; 0x01
    d600:	fa 81       	ldd	r31, Y+2	; 0x02
    d602:	b2 96       	adiw	r30, 0x22	; 34
    d604:	fa 83       	std	Y+2, r31	; 0x02
    d606:	e9 83       	std	Y+1, r30	; 0x01
    d608:	0c 5f       	subi	r16, 0xFC	; 252
    d60a:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds and check limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    d60c:	08 97       	sbiw	r24, 0x08	; 8
    d60e:	09 f0       	breq	.+2      	; 0xd612 <output_servo_ppm+0x112>
    d610:	9c cf       	rjmp	.-200    	; 0xd54a <output_servo_ppm+0x4a>
	}

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so.
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    d612:	80 91 81 09 	lds	r24, 0x0981
    d616:	90 91 82 09 	lds	r25, 0x0982
		ServoOut[i] = (uint16_t)temp;
	}

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so.
	if 	(
    d61a:	c2 97       	sbiw	r24, 0x32	; 50
    d61c:	4c f0       	brlt	.+18     	; 0xd630 <output_servo_ppm+0x130>
			(MonopolarThrottle < THROTTLEIDLE) || 
			(General_error & (1 << DISARMED))
    d61e:	80 91 35 05 	lds	r24, 0x0535
	}

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so.
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    d622:	82 fd       	sbrc	r24, 2
    d624:	05 c0       	rjmp	.+10     	; 0xd630 <output_servo_ppm+0x130>

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
			((General_error & (1 << THROTTLE_HIGH)) == 0) &&
    d626:	80 91 35 05 	lds	r24, 0x0535
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
    d62a:	80 ff       	sbrs	r24, 0
    d62c:	18 c0       	rjmp	.+48     	; 0xd65e <output_servo_ppm+0x15e>
    d62e:	27 c0       	rjmp	.+78     	; 0xd67e <output_servo_ppm+0x17e>
    d630:	80 e0       	ldi	r24, 0x00	; 0
    d632:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    d634:	28 ee       	ldi	r18, 0xE8	; 232
    d636:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    d638:	f6 01       	movw	r30, r12
    d63a:	40 81       	ld	r20, Z
    d63c:	42 30       	cpi	r20, 0x02	; 2
    d63e:	39 f4       	brne	.+14     	; 0xd64e <output_servo_ppm+0x14e>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    d640:	fc 01       	movw	r30, r24
    d642:	ee 0f       	add	r30, r30
    d644:	ff 1f       	adc	r31, r31
    d646:	eb 56       	subi	r30, 0x6B	; 107
    d648:	f6 4f       	sbci	r31, 0xF6	; 246
    d64a:	31 83       	std	Z+1, r19	; 0x01
    d64c:	20 83       	st	Z, r18
    d64e:	01 96       	adiw	r24, 0x01	; 1
    d650:	f2 e2       	ldi	r31, 0x22	; 34
    d652:	cf 0e       	add	r12, r31
    d654:	d1 1c       	adc	r13, r1
			(MonopolarThrottle < THROTTLEIDLE) || 
			(General_error & (1 << DISARMED))
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    d656:	88 30       	cpi	r24, 0x08	; 8
    d658:	91 05       	cpc	r25, r1
    d65a:	71 f7       	brne	.-36     	; 0xd638 <output_servo_ppm+0x138>
    d65c:	e4 cf       	rjmp	.-56     	; 0xd626 <output_servo_ppm+0x126>
	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
			((General_error & (1 << THROTTLE_HIGH)) == 0) &&
			((Flight_flags & (1 << ARM_blocker)) == 0)
    d65e:	80 91 34 05 	lds	r24, 0x0534

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
			((General_error & (1 << THROTTLE_HIGH)) == 0) &&
    d662:	81 fd       	sbrc	r24, 1
    d664:	0c c0       	rjmp	.+24     	; 0xd67e <output_servo_ppm+0x17e>
    d666:	63 2d       	mov	r22, r3
			((Flight_flags & (1 << ARM_blocker)) == 0)
	   )
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    d668:	10 92 1a 09 	sts	0x091A, r1
	
		// We now care about interrupts
		JitterGate = true;
    d66c:	81 e0       	ldi	r24, 0x01	; 1
    d66e:	80 93 19 09 	sts	0x0919, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    d672:	85 e9       	ldi	r24, 0x95	; 149
    d674:	99 e0       	ldi	r25, 0x09	; 9
    d676:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    d67a:	10 92 19 09 	sts	0x0919, r1
	}
}
    d67e:	0f 90       	pop	r0
    d680:	0f 90       	pop	r0
    d682:	0f 90       	pop	r0
    d684:	0f 90       	pop	r0
    d686:	df 91       	pop	r29
    d688:	cf 91       	pop	r28
    d68a:	1f 91       	pop	r17
    d68c:	0f 91       	pop	r16
    d68e:	ff 90       	pop	r15
    d690:	ef 90       	pop	r14
    d692:	df 90       	pop	r13
    d694:	cf 90       	pop	r12
    d696:	bf 90       	pop	r11
    d698:	af 90       	pop	r10
    d69a:	9f 90       	pop	r9
    d69c:	8f 90       	pop	r8
    d69e:	7f 90       	pop	r7
    d6a0:	6f 90       	pop	r6
    d6a2:	5f 90       	pop	r5
    d6a4:	4f 90       	pop	r4
    d6a6:	3f 90       	pop	r3
    d6a8:	08 95       	ret

0000d6aa <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    d6aa:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    d6ae:	81 e1       	ldi	r24, 0x11	; 17
    d6b0:	80 93 b8 00 	sts	0x00B8, r24
    d6b4:	08 95       	ret

0000d6b6 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    d6b6:	94 ea       	ldi	r25, 0xA4	; 164
    d6b8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    d6bc:	4f ef       	ldi	r20, 0xFF	; 255
    d6be:	50 e0       	ldi	r21, 0x00	; 0
    d6c0:	60 e0       	ldi	r22, 0x00	; 0
    d6c2:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d6c4:	90 91 bc 00 	lds	r25, 0x00BC
    d6c8:	97 fd       	sbrc	r25, 7
    d6ca:	06 c0       	rjmp	.+12     	; 0xd6d8 <i2c_start+0x22>
    d6cc:	41 50       	subi	r20, 0x01	; 1
    d6ce:	51 09       	sbc	r21, r1
    d6d0:	61 09       	sbc	r22, r1
    d6d2:	71 09       	sbc	r23, r1
    d6d4:	b8 f7       	brcc	.-18     	; 0xd6c4 <i2c_start+0xe>
    d6d6:	06 c0       	rjmp	.+12     	; 0xd6e4 <i2c_start+0x2e>
	if(i2c_timer == 0)
    d6d8:	45 2b       	or	r20, r21
    d6da:	46 2b       	or	r20, r22
    d6dc:	47 2b       	or	r20, r23
    d6de:	11 f4       	brne	.+4      	; 0xd6e4 <i2c_start+0x2e>
		return 1;
    d6e0:	81 e0       	ldi	r24, 0x01	; 1
    d6e2:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    d6e4:	90 91 b9 00 	lds	r25, 0x00B9
    d6e8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    d6ea:	98 30       	cpi	r25, 0x08	; 8
    d6ec:	11 f0       	breq	.+4      	; 0xd6f2 <i2c_start+0x3c>
    d6ee:	90 31       	cpi	r25, 0x10	; 16
    d6f0:	b9 f7       	brne	.-18     	; 0xd6e0 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    d6f2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    d6f6:	84 e8       	ldi	r24, 0x84	; 132
    d6f8:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    d6fc:	8f ef       	ldi	r24, 0xFF	; 255
    d6fe:	90 e0       	ldi	r25, 0x00	; 0
    d700:	a0 e0       	ldi	r26, 0x00	; 0
    d702:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d704:	20 91 bc 00 	lds	r18, 0x00BC
    d708:	27 fd       	sbrc	r18, 7
    d70a:	05 c0       	rjmp	.+10     	; 0xd716 <i2c_start+0x60>
    d70c:	01 97       	sbiw	r24, 0x01	; 1
    d70e:	a1 09       	sbc	r26, r1
    d710:	b1 09       	sbc	r27, r1
    d712:	c0 f7       	brcc	.-16     	; 0xd704 <i2c_start+0x4e>
    d714:	04 c0       	rjmp	.+8      	; 0xd71e <i2c_start+0x68>
	if(i2c_timer == 0)
    d716:	89 2b       	or	r24, r25
    d718:	8a 2b       	or	r24, r26
    d71a:	8b 2b       	or	r24, r27
    d71c:	09 f3       	breq	.-62     	; 0xd6e0 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    d71e:	80 91 b9 00 	lds	r24, 0x00B9
    d722:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    d724:	88 31       	cpi	r24, 0x18	; 24
    d726:	11 f0       	breq	.+4      	; 0xd72c <i2c_start+0x76>
    d728:	80 34       	cpi	r24, 0x40	; 64
    d72a:	d1 f6       	brne	.-76     	; 0xd6e0 <i2c_start+0x2a>

	return 0;
    d72c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    d72e:	08 95       	ret

0000d730 <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    d730:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    d732:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    d734:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    d736:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d73a:	20 e0       	ldi	r18, 0x00	; 0
    d73c:	30 e0       	ldi	r19, 0x00	; 0
    d73e:	90 91 bc 00 	lds	r25, 0x00BC
    d742:	97 fd       	sbrc	r25, 7
    d744:	06 c0       	rjmp	.+12     	; 0xd752 <i2c_start_wait+0x22>
    d746:	2f 5f       	subi	r18, 0xFF	; 255
    d748:	3f 4f       	sbci	r19, 0xFF	; 255
    d74a:	21 15       	cp	r18, r1
    d74c:	91 e0       	ldi	r25, 0x01	; 1
    d74e:	39 07       	cpc	r19, r25
    d750:	b1 f7       	brne	.-20     	; 0xd73e <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    d752:	90 91 b9 00 	lds	r25, 0x00B9
    d756:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    d758:	98 30       	cpi	r25, 0x08	; 8
    d75a:	11 f0       	breq	.+4      	; 0xd760 <i2c_start_wait+0x30>
    d75c:	90 31       	cpi	r25, 0x10	; 16
    d75e:	59 f7       	brne	.-42     	; 0xd736 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    d760:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    d764:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d768:	20 e0       	ldi	r18, 0x00	; 0
    d76a:	30 e0       	ldi	r19, 0x00	; 0
    d76c:	90 91 bc 00 	lds	r25, 0x00BC
    d770:	97 fd       	sbrc	r25, 7
    d772:	06 c0       	rjmp	.+12     	; 0xd780 <i2c_start_wait+0x50>
    d774:	2f 5f       	subi	r18, 0xFF	; 255
    d776:	3f 4f       	sbci	r19, 0xFF	; 255
    d778:	21 15       	cp	r18, r1
    d77a:	91 e0       	ldi	r25, 0x01	; 1
    d77c:	39 07       	cpc	r19, r25
    d77e:	b1 f7       	brne	.-20     	; 0xd76c <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    d780:	90 91 b9 00 	lds	r25, 0x00B9
    d784:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    d786:	90 32       	cpi	r25, 0x20	; 32
    d788:	11 f0       	breq	.+4      	; 0xd78e <i2c_start_wait+0x5e>
    d78a:	98 35       	cpi	r25, 0x58	; 88
    d78c:	79 f4       	brne	.+30     	; 0xd7ac <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    d78e:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    d792:	20 e0       	ldi	r18, 0x00	; 0
    d794:	30 e0       	ldi	r19, 0x00	; 0
    d796:	90 91 bc 00 	lds	r25, 0x00BC
    d79a:	94 ff       	sbrs	r25, 4
    d79c:	cc cf       	rjmp	.-104    	; 0xd736 <i2c_start_wait+0x6>
    d79e:	2f 5f       	subi	r18, 0xFF	; 255
    d7a0:	3f 4f       	sbci	r19, 0xFF	; 255
    d7a2:	21 15       	cp	r18, r1
    d7a4:	91 e0       	ldi	r25, 0x01	; 1
    d7a6:	39 07       	cpc	r19, r25
    d7a8:	b1 f7       	brne	.-20     	; 0xd796 <i2c_start_wait+0x66>
    d7aa:	c5 cf       	rjmp	.-118    	; 0xd736 <i2c_start_wait+0x6>
    d7ac:	08 95       	ret

0000d7ae <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    d7ae:	0c 94 5b 6b 	jmp	0xd6b6	; 0xd6b6 <i2c_start>

0000d7b2 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    d7b2:	84 e9       	ldi	r24, 0x94	; 148
    d7b4:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    d7b8:	80 e0       	ldi	r24, 0x00	; 0
    d7ba:	90 e0       	ldi	r25, 0x00	; 0
    d7bc:	20 91 bc 00 	lds	r18, 0x00BC
    d7c0:	24 ff       	sbrs	r18, 4
    d7c2:	05 c0       	rjmp	.+10     	; 0xd7ce <i2c_stop+0x1c>
    d7c4:	01 96       	adiw	r24, 0x01	; 1
    d7c6:	81 15       	cp	r24, r1
    d7c8:	21 e0       	ldi	r18, 0x01	; 1
    d7ca:	92 07       	cpc	r25, r18
    d7cc:	b9 f7       	brne	.-18     	; 0xd7bc <i2c_stop+0xa>
    d7ce:	08 95       	ret

0000d7d0 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    d7d0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    d7d4:	84 e8       	ldi	r24, 0x84	; 132
    d7d6:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    d7da:	8f ef       	ldi	r24, 0xFF	; 255
    d7dc:	90 e0       	ldi	r25, 0x00	; 0
    d7de:	a0 e0       	ldi	r26, 0x00	; 0
    d7e0:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d7e2:	20 91 bc 00 	lds	r18, 0x00BC
    d7e6:	27 fd       	sbrc	r18, 7
    d7e8:	05 c0       	rjmp	.+10     	; 0xd7f4 <i2c_write+0x24>
    d7ea:	01 97       	sbiw	r24, 0x01	; 1
    d7ec:	a1 09       	sbc	r26, r1
    d7ee:	b1 09       	sbc	r27, r1
    d7f0:	c0 f7       	brcc	.-16     	; 0xd7e2 <i2c_write+0x12>
    d7f2:	04 c0       	rjmp	.+8      	; 0xd7fc <i2c_write+0x2c>
	if(i2c_timer == 0)
    d7f4:	89 2b       	or	r24, r25
    d7f6:	8a 2b       	or	r24, r26
    d7f8:	8b 2b       	or	r24, r27
    d7fa:	41 f0       	breq	.+16     	; 0xd80c <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    d7fc:	90 91 b9 00 	lds	r25, 0x00B9
    d800:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    d802:	81 e0       	ldi	r24, 0x01	; 1
    d804:	98 32       	cpi	r25, 0x28	; 40
    d806:	19 f4       	brne	.+6      	; 0xd80e <i2c_write+0x3e>
    d808:	80 e0       	ldi	r24, 0x00	; 0
    d80a:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    d80c:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    d80e:	08 95       	ret

0000d810 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    d810:	84 ec       	ldi	r24, 0xC4	; 196
    d812:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    d816:	8f ef       	ldi	r24, 0xFF	; 255
    d818:	90 e0       	ldi	r25, 0x00	; 0
    d81a:	a0 e0       	ldi	r26, 0x00	; 0
    d81c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d81e:	20 91 bc 00 	lds	r18, 0x00BC
    d822:	27 fd       	sbrc	r18, 7
    d824:	05 c0       	rjmp	.+10     	; 0xd830 <i2c_readAck+0x20>
    d826:	01 97       	sbiw	r24, 0x01	; 1
    d828:	a1 09       	sbc	r26, r1
    d82a:	b1 09       	sbc	r27, r1
    d82c:	c0 f7       	brcc	.-16     	; 0xd81e <i2c_readAck+0xe>
    d82e:	04 c0       	rjmp	.+8      	; 0xd838 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    d830:	89 2b       	or	r24, r25
    d832:	8a 2b       	or	r24, r26
    d834:	8b 2b       	or	r24, r27
    d836:	19 f0       	breq	.+6      	; 0xd83e <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    d838:	80 91 bb 00 	lds	r24, 0x00BB
    d83c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    d83e:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    d840:	08 95       	ret

0000d842 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    d842:	84 e8       	ldi	r24, 0x84	; 132
    d844:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    d848:	8f ef       	ldi	r24, 0xFF	; 255
    d84a:	90 e0       	ldi	r25, 0x00	; 0
    d84c:	a0 e0       	ldi	r26, 0x00	; 0
    d84e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d850:	20 91 bc 00 	lds	r18, 0x00BC
    d854:	27 fd       	sbrc	r18, 7
    d856:	05 c0       	rjmp	.+10     	; 0xd862 <i2c_readNak+0x20>
    d858:	01 97       	sbiw	r24, 0x01	; 1
    d85a:	a1 09       	sbc	r26, r1
    d85c:	b1 09       	sbc	r27, r1
    d85e:	c0 f7       	brcc	.-16     	; 0xd850 <i2c_readNak+0xe>
    d860:	04 c0       	rjmp	.+8      	; 0xd86a <i2c_readNak+0x28>
	if(i2c_timer == 0)
    d862:	89 2b       	or	r24, r25
    d864:	8a 2b       	or	r24, r26
    d866:	8b 2b       	or	r24, r27
    d868:	19 f0       	breq	.+6      	; 0xd870 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    d86a:	80 91 bb 00 	lds	r24, 0x00BB
    d86e:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    d870:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    d872:	08 95       	ret

0000d874 <init_uart>:
#define XBUS_CRC_POLY 0x1021

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    d874:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    d876:	80 91 c1 00 	lds	r24, 0x00C1
    d87a:	8f 77       	andi	r24, 0x7F	; 127
    d87c:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    d880:	80 91 c0 00 	lds	r24, 0x00C0
    d884:	87 ff       	sbrs	r24, 7
    d886:	05 c0       	rjmp	.+10     	; 0xd892 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    d888:	80 91 c6 00 	lds	r24, 0x00C6
    d88c:	80 93 c2 00 	sts	0x00C2, r24
    d890:	f7 cf       	rjmp	.-18     	; 0xd880 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    d892:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    d896:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    d89a:	86 e0       	ldi	r24, 0x06	; 6
    d89c:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    d8a0:	e0 91 62 06 	lds	r30, 0x0662
    d8a4:	8e 2f       	mov	r24, r30
    d8a6:	ee 0f       	add	r30, r30
    d8a8:	99 0b       	sbc	r25, r25
    d8aa:	aa 0b       	sbc	r26, r26
    d8ac:	bb 0b       	sbc	r27, r27
    d8ae:	87 30       	cpi	r24, 0x07	; 7
    d8b0:	91 05       	cpc	r25, r1
    d8b2:	08 f0       	brcs	.+2      	; 0xd8b6 <init_uart+0x42>
    d8b4:	4d c0       	rjmp	.+154    	; 0xd950 <init_uart+0xdc>
    d8b6:	fc 01       	movw	r30, r24
    d8b8:	e0 56       	subi	r30, 0x60	; 96
    d8ba:	ff 4f       	sbci	r31, 0xFF	; 255
    d8bc:	0c 94 5f 6f 	jmp	0xdebe	; 0xdebe <__tablejump2__>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    d8c0:	80 91 c0 00 	lds	r24, 0x00C0
    d8c4:	8d 7f       	andi	r24, 0xFD	; 253
    d8c6:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    d8ca:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_XTREME & 0xff;		// 0x04
    d8ce:	84 e0       	ldi	r24, 0x04	; 4
    d8d0:	25 c0       	rjmp	.+74     	; 0xd91c <init_uart+0xa8>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    d8d2:	80 91 c0 00 	lds	r24, 0x00C0
    d8d6:	82 60       	ori	r24, 0x02	; 2
    d8d8:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    d8dc:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    d8e0:	88 e1       	ldi	r24, 0x18	; 24
    d8e2:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    d8e6:	80 91 c1 00 	lds	r24, 0x00C1
    d8ea:	80 61       	ori	r24, 0x10	; 16
    d8ec:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    d8f0:	80 91 c2 00 	lds	r24, 0x00C2
    d8f4:	88 60       	ori	r24, 0x08	; 8
    d8f6:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    d8fa:	80 91 c2 00 	lds	r24, 0x00C2
    d8fe:	8f 7e       	andi	r24, 0xEF	; 239
    d900:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    d904:	80 91 c2 00 	lds	r24, 0x00C2
    d908:	80 62       	ori	r24, 0x20	; 32
    d90a:	17 c0       	rjmp	.+46     	; 0xd93a <init_uart+0xc6>

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps) (Same for MODEB/UDI, SUMD)
		case SUMD:
		case MODEB:
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    d90c:	80 91 c0 00 	lds	r24, 0x00C0
    d910:	8d 7f       	andi	r24, 0xFD	; 253
    d912:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    d916:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    d91a:	8a e0       	ldi	r24, 0x0A	; 10
    d91c:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    d920:	80 91 c1 00 	lds	r24, 0x00C1
    d924:	80 61       	ori	r24, 0x10	; 16
    d926:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    d92a:	80 91 c2 00 	lds	r24, 0x00C2
    d92e:	87 7f       	andi	r24, 0xF7	; 247
    d930:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    d934:	80 91 c2 00 	lds	r24, 0x00C2
    d938:	8f 7e       	andi	r24, 0xEF	; 239
    d93a:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    d93e:	80 91 c1 00 	lds	r24, 0x00C1
    d942:	80 68       	ori	r24, 0x80	; 128
    d944:	03 c0       	rjmp	.+6      	; 0xd94c <init_uart+0xd8>
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    d946:	80 91 c1 00 	lds	r24, 0x00C1
    d94a:	8f 7e       	andi	r24, 0xEF	; 239
    d94c:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    d950:	78 94       	sei
    d952:	08 95       	ret

0000d954 <CRC16>:
// CRC16 checksum
uint16_t CRC16(uint16_t crc, uint8_t value)
{
	uint8_t i;
	
	crc = crc ^ (uint16_t)value << 8;
    d954:	96 27       	eor	r25, r22
    d956:	28 e0       	ldi	r18, 0x08	; 8
    d958:	ac 01       	movw	r20, r24
    d95a:	44 0f       	add	r20, r20
    d95c:	55 1f       	adc	r21, r21
	
	for (i = 0; i < 8; i++)
	{
		if (crc & 0x8000)
    d95e:	97 ff       	sbrs	r25, 7
    d960:	06 c0       	rjmp	.+12     	; 0xd96e <CRC16+0x1a>
		{
			crc = crc << 1 ^XBUS_CRC_POLY;
    d962:	ca 01       	movw	r24, r20
    d964:	31 e2       	ldi	r19, 0x21	; 33
    d966:	83 27       	eor	r24, r19
    d968:	30 e1       	ldi	r19, 0x10	; 16
    d96a:	93 27       	eor	r25, r19
    d96c:	01 c0       	rjmp	.+2      	; 0xd970 <CRC16+0x1c>
		}
		else
		{
			crc = crc << 1;
    d96e:	ca 01       	movw	r24, r20
    d970:	21 50       	subi	r18, 0x01	; 1
{
	uint8_t i;
	
	crc = crc ^ (uint16_t)value << 8;
	
	for (i = 0; i < 8; i++)
    d972:	91 f7       	brne	.-28     	; 0xd958 <CRC16+0x4>
			crc = crc << 1;
		}
	}

	return crc;
    d974:	08 95       	ret

0000d976 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    d976:	83 e0       	ldi	r24, 0x03	; 3
    d978:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    d97c:	20 91 78 00 	lds	r18, 0x0078
    d980:	30 91 79 00 	lds	r19, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    d984:	a9 01       	movw	r20, r18
    d986:	56 95       	lsr	r21
    d988:	47 95       	ror	r20
    d98a:	c9 01       	movw	r24, r18
    d98c:	88 0f       	add	r24, r24
    d98e:	99 1f       	adc	r25, r25
    d990:	84 0f       	add	r24, r20
    d992:	95 1f       	adc	r25, r21
    d994:	a9 01       	movw	r20, r18
    d996:	74 e0       	ldi	r23, 0x04	; 4
    d998:	56 95       	lsr	r21
    d99a:	47 95       	ror	r20
    d99c:	7a 95       	dec	r23
    d99e:	e1 f7       	brne	.-8      	; 0xd998 <GetVbat+0x22>
    d9a0:	84 0f       	add	r24, r20
    d9a2:	95 1f       	adc	r25, r21
    d9a4:	e6 e0       	ldi	r30, 0x06	; 6
    d9a6:	36 95       	lsr	r19
    d9a8:	27 95       	ror	r18
    d9aa:	ea 95       	dec	r30
    d9ac:	e1 f7       	brne	.-8      	; 0xd9a6 <GetVbat+0x30>

	return vBat;
}
    d9ae:	82 0f       	add	r24, r18
    d9b0:	93 1f       	adc	r25, r19
    d9b2:	08 95       	ret

0000d9b4 <__subsf3>:
    d9b4:	50 58       	subi	r21, 0x80	; 128

0000d9b6 <__addsf3>:
    d9b6:	bb 27       	eor	r27, r27
    d9b8:	aa 27       	eor	r26, r26
    d9ba:	0e 94 f2 6c 	call	0xd9e4	; 0xd9e4 <__addsf3x>
    d9be:	0c 94 6c 6e 	jmp	0xdcd8	; 0xdcd8 <__fp_round>
    d9c2:	0e 94 5e 6e 	call	0xdcbc	; 0xdcbc <__fp_pscA>
    d9c6:	38 f0       	brcs	.+14     	; 0xd9d6 <__addsf3+0x20>
    d9c8:	0e 94 65 6e 	call	0xdcca	; 0xdcca <__fp_pscB>
    d9cc:	20 f0       	brcs	.+8      	; 0xd9d6 <__addsf3+0x20>
    d9ce:	39 f4       	brne	.+14     	; 0xd9de <__addsf3+0x28>
    d9d0:	9f 3f       	cpi	r25, 0xFF	; 255
    d9d2:	19 f4       	brne	.+6      	; 0xd9da <__addsf3+0x24>
    d9d4:	26 f4       	brtc	.+8      	; 0xd9de <__addsf3+0x28>
    d9d6:	0c 94 5b 6e 	jmp	0xdcb6	; 0xdcb6 <__fp_nan>
    d9da:	0e f4       	brtc	.+2      	; 0xd9de <__addsf3+0x28>
    d9dc:	e0 95       	com	r30
    d9de:	e7 fb       	bst	r30, 7
    d9e0:	0c 94 55 6e 	jmp	0xdcaa	; 0xdcaa <__fp_inf>

0000d9e4 <__addsf3x>:
    d9e4:	e9 2f       	mov	r30, r25
    d9e6:	0e 94 7d 6e 	call	0xdcfa	; 0xdcfa <__fp_split3>
    d9ea:	58 f3       	brcs	.-42     	; 0xd9c2 <__addsf3+0xc>
    d9ec:	ba 17       	cp	r27, r26
    d9ee:	62 07       	cpc	r22, r18
    d9f0:	73 07       	cpc	r23, r19
    d9f2:	84 07       	cpc	r24, r20
    d9f4:	95 07       	cpc	r25, r21
    d9f6:	20 f0       	brcs	.+8      	; 0xda00 <__addsf3x+0x1c>
    d9f8:	79 f4       	brne	.+30     	; 0xda18 <__addsf3x+0x34>
    d9fa:	a6 f5       	brtc	.+104    	; 0xda64 <__addsf3x+0x80>
    d9fc:	0c 94 9f 6e 	jmp	0xdd3e	; 0xdd3e <__fp_zero>
    da00:	0e f4       	brtc	.+2      	; 0xda04 <__addsf3x+0x20>
    da02:	e0 95       	com	r30
    da04:	0b 2e       	mov	r0, r27
    da06:	ba 2f       	mov	r27, r26
    da08:	a0 2d       	mov	r26, r0
    da0a:	0b 01       	movw	r0, r22
    da0c:	b9 01       	movw	r22, r18
    da0e:	90 01       	movw	r18, r0
    da10:	0c 01       	movw	r0, r24
    da12:	ca 01       	movw	r24, r20
    da14:	a0 01       	movw	r20, r0
    da16:	11 24       	eor	r1, r1
    da18:	ff 27       	eor	r31, r31
    da1a:	59 1b       	sub	r21, r25
    da1c:	99 f0       	breq	.+38     	; 0xda44 <__addsf3x+0x60>
    da1e:	59 3f       	cpi	r21, 0xF9	; 249
    da20:	50 f4       	brcc	.+20     	; 0xda36 <__addsf3x+0x52>
    da22:	50 3e       	cpi	r21, 0xE0	; 224
    da24:	68 f1       	brcs	.+90     	; 0xda80 <__addsf3x+0x9c>
    da26:	1a 16       	cp	r1, r26
    da28:	f0 40       	sbci	r31, 0x00	; 0
    da2a:	a2 2f       	mov	r26, r18
    da2c:	23 2f       	mov	r18, r19
    da2e:	34 2f       	mov	r19, r20
    da30:	44 27       	eor	r20, r20
    da32:	58 5f       	subi	r21, 0xF8	; 248
    da34:	f3 cf       	rjmp	.-26     	; 0xda1c <__addsf3x+0x38>
    da36:	46 95       	lsr	r20
    da38:	37 95       	ror	r19
    da3a:	27 95       	ror	r18
    da3c:	a7 95       	ror	r26
    da3e:	f0 40       	sbci	r31, 0x00	; 0
    da40:	53 95       	inc	r21
    da42:	c9 f7       	brne	.-14     	; 0xda36 <__addsf3x+0x52>
    da44:	7e f4       	brtc	.+30     	; 0xda64 <__addsf3x+0x80>
    da46:	1f 16       	cp	r1, r31
    da48:	ba 0b       	sbc	r27, r26
    da4a:	62 0b       	sbc	r22, r18
    da4c:	73 0b       	sbc	r23, r19
    da4e:	84 0b       	sbc	r24, r20
    da50:	ba f0       	brmi	.+46     	; 0xda80 <__addsf3x+0x9c>
    da52:	91 50       	subi	r25, 0x01	; 1
    da54:	a1 f0       	breq	.+40     	; 0xda7e <__addsf3x+0x9a>
    da56:	ff 0f       	add	r31, r31
    da58:	bb 1f       	adc	r27, r27
    da5a:	66 1f       	adc	r22, r22
    da5c:	77 1f       	adc	r23, r23
    da5e:	88 1f       	adc	r24, r24
    da60:	c2 f7       	brpl	.-16     	; 0xda52 <__addsf3x+0x6e>
    da62:	0e c0       	rjmp	.+28     	; 0xda80 <__addsf3x+0x9c>
    da64:	ba 0f       	add	r27, r26
    da66:	62 1f       	adc	r22, r18
    da68:	73 1f       	adc	r23, r19
    da6a:	84 1f       	adc	r24, r20
    da6c:	48 f4       	brcc	.+18     	; 0xda80 <__addsf3x+0x9c>
    da6e:	87 95       	ror	r24
    da70:	77 95       	ror	r23
    da72:	67 95       	ror	r22
    da74:	b7 95       	ror	r27
    da76:	f7 95       	ror	r31
    da78:	9e 3f       	cpi	r25, 0xFE	; 254
    da7a:	08 f0       	brcs	.+2      	; 0xda7e <__addsf3x+0x9a>
    da7c:	b0 cf       	rjmp	.-160    	; 0xd9de <__addsf3+0x28>
    da7e:	93 95       	inc	r25
    da80:	88 0f       	add	r24, r24
    da82:	08 f0       	brcs	.+2      	; 0xda86 <__addsf3x+0xa2>
    da84:	99 27       	eor	r25, r25
    da86:	ee 0f       	add	r30, r30
    da88:	97 95       	ror	r25
    da8a:	87 95       	ror	r24
    da8c:	08 95       	ret

0000da8e <__cmpsf2>:
    da8e:	0e 94 31 6e 	call	0xdc62	; 0xdc62 <__fp_cmp>
    da92:	08 f4       	brcc	.+2      	; 0xda96 <__cmpsf2+0x8>
    da94:	81 e0       	ldi	r24, 0x01	; 1
    da96:	08 95       	ret

0000da98 <__divsf3>:
    da98:	0e 94 60 6d 	call	0xdac0	; 0xdac0 <__divsf3x>
    da9c:	0c 94 6c 6e 	jmp	0xdcd8	; 0xdcd8 <__fp_round>
    daa0:	0e 94 65 6e 	call	0xdcca	; 0xdcca <__fp_pscB>
    daa4:	58 f0       	brcs	.+22     	; 0xdabc <__divsf3+0x24>
    daa6:	0e 94 5e 6e 	call	0xdcbc	; 0xdcbc <__fp_pscA>
    daaa:	40 f0       	brcs	.+16     	; 0xdabc <__divsf3+0x24>
    daac:	29 f4       	brne	.+10     	; 0xdab8 <__divsf3+0x20>
    daae:	5f 3f       	cpi	r21, 0xFF	; 255
    dab0:	29 f0       	breq	.+10     	; 0xdabc <__divsf3+0x24>
    dab2:	0c 94 55 6e 	jmp	0xdcaa	; 0xdcaa <__fp_inf>
    dab6:	51 11       	cpse	r21, r1
    dab8:	0c 94 a0 6e 	jmp	0xdd40	; 0xdd40 <__fp_szero>
    dabc:	0c 94 5b 6e 	jmp	0xdcb6	; 0xdcb6 <__fp_nan>

0000dac0 <__divsf3x>:
    dac0:	0e 94 7d 6e 	call	0xdcfa	; 0xdcfa <__fp_split3>
    dac4:	68 f3       	brcs	.-38     	; 0xdaa0 <__divsf3+0x8>

0000dac6 <__divsf3_pse>:
    dac6:	99 23       	and	r25, r25
    dac8:	b1 f3       	breq	.-20     	; 0xdab6 <__divsf3+0x1e>
    daca:	55 23       	and	r21, r21
    dacc:	91 f3       	breq	.-28     	; 0xdab2 <__divsf3+0x1a>
    dace:	95 1b       	sub	r25, r21
    dad0:	55 0b       	sbc	r21, r21
    dad2:	bb 27       	eor	r27, r27
    dad4:	aa 27       	eor	r26, r26
    dad6:	62 17       	cp	r22, r18
    dad8:	73 07       	cpc	r23, r19
    dada:	84 07       	cpc	r24, r20
    dadc:	38 f0       	brcs	.+14     	; 0xdaec <__divsf3_pse+0x26>
    dade:	9f 5f       	subi	r25, 0xFF	; 255
    dae0:	5f 4f       	sbci	r21, 0xFF	; 255
    dae2:	22 0f       	add	r18, r18
    dae4:	33 1f       	adc	r19, r19
    dae6:	44 1f       	adc	r20, r20
    dae8:	aa 1f       	adc	r26, r26
    daea:	a9 f3       	breq	.-22     	; 0xdad6 <__divsf3_pse+0x10>
    daec:	35 d0       	rcall	.+106    	; 0xdb58 <__divsf3_pse+0x92>
    daee:	0e 2e       	mov	r0, r30
    daf0:	3a f0       	brmi	.+14     	; 0xdb00 <__divsf3_pse+0x3a>
    daf2:	e0 e8       	ldi	r30, 0x80	; 128
    daf4:	32 d0       	rcall	.+100    	; 0xdb5a <__divsf3_pse+0x94>
    daf6:	91 50       	subi	r25, 0x01	; 1
    daf8:	50 40       	sbci	r21, 0x00	; 0
    dafa:	e6 95       	lsr	r30
    dafc:	00 1c       	adc	r0, r0
    dafe:	ca f7       	brpl	.-14     	; 0xdaf2 <__divsf3_pse+0x2c>
    db00:	2b d0       	rcall	.+86     	; 0xdb58 <__divsf3_pse+0x92>
    db02:	fe 2f       	mov	r31, r30
    db04:	29 d0       	rcall	.+82     	; 0xdb58 <__divsf3_pse+0x92>
    db06:	66 0f       	add	r22, r22
    db08:	77 1f       	adc	r23, r23
    db0a:	88 1f       	adc	r24, r24
    db0c:	bb 1f       	adc	r27, r27
    db0e:	26 17       	cp	r18, r22
    db10:	37 07       	cpc	r19, r23
    db12:	48 07       	cpc	r20, r24
    db14:	ab 07       	cpc	r26, r27
    db16:	b0 e8       	ldi	r27, 0x80	; 128
    db18:	09 f0       	breq	.+2      	; 0xdb1c <__divsf3_pse+0x56>
    db1a:	bb 0b       	sbc	r27, r27
    db1c:	80 2d       	mov	r24, r0
    db1e:	bf 01       	movw	r22, r30
    db20:	ff 27       	eor	r31, r31
    db22:	93 58       	subi	r25, 0x83	; 131
    db24:	5f 4f       	sbci	r21, 0xFF	; 255
    db26:	3a f0       	brmi	.+14     	; 0xdb36 <__divsf3_pse+0x70>
    db28:	9e 3f       	cpi	r25, 0xFE	; 254
    db2a:	51 05       	cpc	r21, r1
    db2c:	78 f0       	brcs	.+30     	; 0xdb4c <__divsf3_pse+0x86>
    db2e:	0c 94 55 6e 	jmp	0xdcaa	; 0xdcaa <__fp_inf>
    db32:	0c 94 a0 6e 	jmp	0xdd40	; 0xdd40 <__fp_szero>
    db36:	5f 3f       	cpi	r21, 0xFF	; 255
    db38:	e4 f3       	brlt	.-8      	; 0xdb32 <__divsf3_pse+0x6c>
    db3a:	98 3e       	cpi	r25, 0xE8	; 232
    db3c:	d4 f3       	brlt	.-12     	; 0xdb32 <__divsf3_pse+0x6c>
    db3e:	86 95       	lsr	r24
    db40:	77 95       	ror	r23
    db42:	67 95       	ror	r22
    db44:	b7 95       	ror	r27
    db46:	f7 95       	ror	r31
    db48:	9f 5f       	subi	r25, 0xFF	; 255
    db4a:	c9 f7       	brne	.-14     	; 0xdb3e <__divsf3_pse+0x78>
    db4c:	88 0f       	add	r24, r24
    db4e:	91 1d       	adc	r25, r1
    db50:	96 95       	lsr	r25
    db52:	87 95       	ror	r24
    db54:	97 f9       	bld	r25, 7
    db56:	08 95       	ret
    db58:	e1 e0       	ldi	r30, 0x01	; 1
    db5a:	66 0f       	add	r22, r22
    db5c:	77 1f       	adc	r23, r23
    db5e:	88 1f       	adc	r24, r24
    db60:	bb 1f       	adc	r27, r27
    db62:	62 17       	cp	r22, r18
    db64:	73 07       	cpc	r23, r19
    db66:	84 07       	cpc	r24, r20
    db68:	ba 07       	cpc	r27, r26
    db6a:	20 f0       	brcs	.+8      	; 0xdb74 <__divsf3_pse+0xae>
    db6c:	62 1b       	sub	r22, r18
    db6e:	73 0b       	sbc	r23, r19
    db70:	84 0b       	sbc	r24, r20
    db72:	ba 0b       	sbc	r27, r26
    db74:	ee 1f       	adc	r30, r30
    db76:	88 f7       	brcc	.-30     	; 0xdb5a <__divsf3_pse+0x94>
    db78:	e0 95       	com	r30
    db7a:	08 95       	ret

0000db7c <__fixsfsi>:
    db7c:	0e 94 c5 6d 	call	0xdb8a	; 0xdb8a <__fixunssfsi>
    db80:	68 94       	set
    db82:	b1 11       	cpse	r27, r1
    db84:	0c 94 a0 6e 	jmp	0xdd40	; 0xdd40 <__fp_szero>
    db88:	08 95       	ret

0000db8a <__fixunssfsi>:
    db8a:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__fp_splitA>
    db8e:	88 f0       	brcs	.+34     	; 0xdbb2 <__fixunssfsi+0x28>
    db90:	9f 57       	subi	r25, 0x7F	; 127
    db92:	98 f0       	brcs	.+38     	; 0xdbba <__fixunssfsi+0x30>
    db94:	b9 2f       	mov	r27, r25
    db96:	99 27       	eor	r25, r25
    db98:	b7 51       	subi	r27, 0x17	; 23
    db9a:	b0 f0       	brcs	.+44     	; 0xdbc8 <__fixunssfsi+0x3e>
    db9c:	e1 f0       	breq	.+56     	; 0xdbd6 <__fixunssfsi+0x4c>
    db9e:	66 0f       	add	r22, r22
    dba0:	77 1f       	adc	r23, r23
    dba2:	88 1f       	adc	r24, r24
    dba4:	99 1f       	adc	r25, r25
    dba6:	1a f0       	brmi	.+6      	; 0xdbae <__fixunssfsi+0x24>
    dba8:	ba 95       	dec	r27
    dbaa:	c9 f7       	brne	.-14     	; 0xdb9e <__fixunssfsi+0x14>
    dbac:	14 c0       	rjmp	.+40     	; 0xdbd6 <__fixunssfsi+0x4c>
    dbae:	b1 30       	cpi	r27, 0x01	; 1
    dbb0:	91 f0       	breq	.+36     	; 0xdbd6 <__fixunssfsi+0x4c>
    dbb2:	0e 94 9f 6e 	call	0xdd3e	; 0xdd3e <__fp_zero>
    dbb6:	b1 e0       	ldi	r27, 0x01	; 1
    dbb8:	08 95       	ret
    dbba:	0c 94 9f 6e 	jmp	0xdd3e	; 0xdd3e <__fp_zero>
    dbbe:	67 2f       	mov	r22, r23
    dbc0:	78 2f       	mov	r23, r24
    dbc2:	88 27       	eor	r24, r24
    dbc4:	b8 5f       	subi	r27, 0xF8	; 248
    dbc6:	39 f0       	breq	.+14     	; 0xdbd6 <__fixunssfsi+0x4c>
    dbc8:	b9 3f       	cpi	r27, 0xF9	; 249
    dbca:	cc f3       	brlt	.-14     	; 0xdbbe <__fixunssfsi+0x34>
    dbcc:	86 95       	lsr	r24
    dbce:	77 95       	ror	r23
    dbd0:	67 95       	ror	r22
    dbd2:	b3 95       	inc	r27
    dbd4:	d9 f7       	brne	.-10     	; 0xdbcc <__fixunssfsi+0x42>
    dbd6:	3e f4       	brtc	.+14     	; 0xdbe6 <__fixunssfsi+0x5c>
    dbd8:	90 95       	com	r25
    dbda:	80 95       	com	r24
    dbdc:	70 95       	com	r23
    dbde:	61 95       	neg	r22
    dbe0:	7f 4f       	sbci	r23, 0xFF	; 255
    dbe2:	8f 4f       	sbci	r24, 0xFF	; 255
    dbe4:	9f 4f       	sbci	r25, 0xFF	; 255
    dbe6:	08 95       	ret

0000dbe8 <__floatunsisf>:
    dbe8:	e8 94       	clt
    dbea:	09 c0       	rjmp	.+18     	; 0xdbfe <__floatsisf+0x12>

0000dbec <__floatsisf>:
    dbec:	97 fb       	bst	r25, 7
    dbee:	3e f4       	brtc	.+14     	; 0xdbfe <__floatsisf+0x12>
    dbf0:	90 95       	com	r25
    dbf2:	80 95       	com	r24
    dbf4:	70 95       	com	r23
    dbf6:	61 95       	neg	r22
    dbf8:	7f 4f       	sbci	r23, 0xFF	; 255
    dbfa:	8f 4f       	sbci	r24, 0xFF	; 255
    dbfc:	9f 4f       	sbci	r25, 0xFF	; 255
    dbfe:	99 23       	and	r25, r25
    dc00:	a9 f0       	breq	.+42     	; 0xdc2c <__floatsisf+0x40>
    dc02:	f9 2f       	mov	r31, r25
    dc04:	96 e9       	ldi	r25, 0x96	; 150
    dc06:	bb 27       	eor	r27, r27
    dc08:	93 95       	inc	r25
    dc0a:	f6 95       	lsr	r31
    dc0c:	87 95       	ror	r24
    dc0e:	77 95       	ror	r23
    dc10:	67 95       	ror	r22
    dc12:	b7 95       	ror	r27
    dc14:	f1 11       	cpse	r31, r1
    dc16:	f8 cf       	rjmp	.-16     	; 0xdc08 <__floatsisf+0x1c>
    dc18:	fa f4       	brpl	.+62     	; 0xdc58 <__floatsisf+0x6c>
    dc1a:	bb 0f       	add	r27, r27
    dc1c:	11 f4       	brne	.+4      	; 0xdc22 <__floatsisf+0x36>
    dc1e:	60 ff       	sbrs	r22, 0
    dc20:	1b c0       	rjmp	.+54     	; 0xdc58 <__floatsisf+0x6c>
    dc22:	6f 5f       	subi	r22, 0xFF	; 255
    dc24:	7f 4f       	sbci	r23, 0xFF	; 255
    dc26:	8f 4f       	sbci	r24, 0xFF	; 255
    dc28:	9f 4f       	sbci	r25, 0xFF	; 255
    dc2a:	16 c0       	rjmp	.+44     	; 0xdc58 <__floatsisf+0x6c>
    dc2c:	88 23       	and	r24, r24
    dc2e:	11 f0       	breq	.+4      	; 0xdc34 <__floatsisf+0x48>
    dc30:	96 e9       	ldi	r25, 0x96	; 150
    dc32:	11 c0       	rjmp	.+34     	; 0xdc56 <__floatsisf+0x6a>
    dc34:	77 23       	and	r23, r23
    dc36:	21 f0       	breq	.+8      	; 0xdc40 <__floatsisf+0x54>
    dc38:	9e e8       	ldi	r25, 0x8E	; 142
    dc3a:	87 2f       	mov	r24, r23
    dc3c:	76 2f       	mov	r23, r22
    dc3e:	05 c0       	rjmp	.+10     	; 0xdc4a <__floatsisf+0x5e>
    dc40:	66 23       	and	r22, r22
    dc42:	71 f0       	breq	.+28     	; 0xdc60 <__floatsisf+0x74>
    dc44:	96 e8       	ldi	r25, 0x86	; 134
    dc46:	86 2f       	mov	r24, r22
    dc48:	70 e0       	ldi	r23, 0x00	; 0
    dc4a:	60 e0       	ldi	r22, 0x00	; 0
    dc4c:	2a f0       	brmi	.+10     	; 0xdc58 <__floatsisf+0x6c>
    dc4e:	9a 95       	dec	r25
    dc50:	66 0f       	add	r22, r22
    dc52:	77 1f       	adc	r23, r23
    dc54:	88 1f       	adc	r24, r24
    dc56:	da f7       	brpl	.-10     	; 0xdc4e <__floatsisf+0x62>
    dc58:	88 0f       	add	r24, r24
    dc5a:	96 95       	lsr	r25
    dc5c:	87 95       	ror	r24
    dc5e:	97 f9       	bld	r25, 7
    dc60:	08 95       	ret

0000dc62 <__fp_cmp>:
    dc62:	99 0f       	add	r25, r25
    dc64:	00 08       	sbc	r0, r0
    dc66:	55 0f       	add	r21, r21
    dc68:	aa 0b       	sbc	r26, r26
    dc6a:	e0 e8       	ldi	r30, 0x80	; 128
    dc6c:	fe ef       	ldi	r31, 0xFE	; 254
    dc6e:	16 16       	cp	r1, r22
    dc70:	17 06       	cpc	r1, r23
    dc72:	e8 07       	cpc	r30, r24
    dc74:	f9 07       	cpc	r31, r25
    dc76:	c0 f0       	brcs	.+48     	; 0xdca8 <__fp_cmp+0x46>
    dc78:	12 16       	cp	r1, r18
    dc7a:	13 06       	cpc	r1, r19
    dc7c:	e4 07       	cpc	r30, r20
    dc7e:	f5 07       	cpc	r31, r21
    dc80:	98 f0       	brcs	.+38     	; 0xdca8 <__fp_cmp+0x46>
    dc82:	62 1b       	sub	r22, r18
    dc84:	73 0b       	sbc	r23, r19
    dc86:	84 0b       	sbc	r24, r20
    dc88:	95 0b       	sbc	r25, r21
    dc8a:	39 f4       	brne	.+14     	; 0xdc9a <__fp_cmp+0x38>
    dc8c:	0a 26       	eor	r0, r26
    dc8e:	61 f0       	breq	.+24     	; 0xdca8 <__fp_cmp+0x46>
    dc90:	23 2b       	or	r18, r19
    dc92:	24 2b       	or	r18, r20
    dc94:	25 2b       	or	r18, r21
    dc96:	21 f4       	brne	.+8      	; 0xdca0 <__fp_cmp+0x3e>
    dc98:	08 95       	ret
    dc9a:	0a 26       	eor	r0, r26
    dc9c:	09 f4       	brne	.+2      	; 0xdca0 <__fp_cmp+0x3e>
    dc9e:	a1 40       	sbci	r26, 0x01	; 1
    dca0:	a6 95       	lsr	r26
    dca2:	8f ef       	ldi	r24, 0xFF	; 255
    dca4:	81 1d       	adc	r24, r1
    dca6:	81 1d       	adc	r24, r1
    dca8:	08 95       	ret

0000dcaa <__fp_inf>:
    dcaa:	97 f9       	bld	r25, 7
    dcac:	9f 67       	ori	r25, 0x7F	; 127
    dcae:	80 e8       	ldi	r24, 0x80	; 128
    dcb0:	70 e0       	ldi	r23, 0x00	; 0
    dcb2:	60 e0       	ldi	r22, 0x00	; 0
    dcb4:	08 95       	ret

0000dcb6 <__fp_nan>:
    dcb6:	9f ef       	ldi	r25, 0xFF	; 255
    dcb8:	80 ec       	ldi	r24, 0xC0	; 192
    dcba:	08 95       	ret

0000dcbc <__fp_pscA>:
    dcbc:	00 24       	eor	r0, r0
    dcbe:	0a 94       	dec	r0
    dcc0:	16 16       	cp	r1, r22
    dcc2:	17 06       	cpc	r1, r23
    dcc4:	18 06       	cpc	r1, r24
    dcc6:	09 06       	cpc	r0, r25
    dcc8:	08 95       	ret

0000dcca <__fp_pscB>:
    dcca:	00 24       	eor	r0, r0
    dccc:	0a 94       	dec	r0
    dcce:	12 16       	cp	r1, r18
    dcd0:	13 06       	cpc	r1, r19
    dcd2:	14 06       	cpc	r1, r20
    dcd4:	05 06       	cpc	r0, r21
    dcd6:	08 95       	ret

0000dcd8 <__fp_round>:
    dcd8:	09 2e       	mov	r0, r25
    dcda:	03 94       	inc	r0
    dcdc:	00 0c       	add	r0, r0
    dcde:	11 f4       	brne	.+4      	; 0xdce4 <__fp_round+0xc>
    dce0:	88 23       	and	r24, r24
    dce2:	52 f0       	brmi	.+20     	; 0xdcf8 <__fp_round+0x20>
    dce4:	bb 0f       	add	r27, r27
    dce6:	40 f4       	brcc	.+16     	; 0xdcf8 <__fp_round+0x20>
    dce8:	bf 2b       	or	r27, r31
    dcea:	11 f4       	brne	.+4      	; 0xdcf0 <__fp_round+0x18>
    dcec:	60 ff       	sbrs	r22, 0
    dcee:	04 c0       	rjmp	.+8      	; 0xdcf8 <__fp_round+0x20>
    dcf0:	6f 5f       	subi	r22, 0xFF	; 255
    dcf2:	7f 4f       	sbci	r23, 0xFF	; 255
    dcf4:	8f 4f       	sbci	r24, 0xFF	; 255
    dcf6:	9f 4f       	sbci	r25, 0xFF	; 255
    dcf8:	08 95       	ret

0000dcfa <__fp_split3>:
    dcfa:	57 fd       	sbrc	r21, 7
    dcfc:	90 58       	subi	r25, 0x80	; 128
    dcfe:	44 0f       	add	r20, r20
    dd00:	55 1f       	adc	r21, r21
    dd02:	59 f0       	breq	.+22     	; 0xdd1a <__fp_splitA+0x10>
    dd04:	5f 3f       	cpi	r21, 0xFF	; 255
    dd06:	71 f0       	breq	.+28     	; 0xdd24 <__fp_splitA+0x1a>
    dd08:	47 95       	ror	r20

0000dd0a <__fp_splitA>:
    dd0a:	88 0f       	add	r24, r24
    dd0c:	97 fb       	bst	r25, 7
    dd0e:	99 1f       	adc	r25, r25
    dd10:	61 f0       	breq	.+24     	; 0xdd2a <__fp_splitA+0x20>
    dd12:	9f 3f       	cpi	r25, 0xFF	; 255
    dd14:	79 f0       	breq	.+30     	; 0xdd34 <__fp_splitA+0x2a>
    dd16:	87 95       	ror	r24
    dd18:	08 95       	ret
    dd1a:	12 16       	cp	r1, r18
    dd1c:	13 06       	cpc	r1, r19
    dd1e:	14 06       	cpc	r1, r20
    dd20:	55 1f       	adc	r21, r21
    dd22:	f2 cf       	rjmp	.-28     	; 0xdd08 <__fp_split3+0xe>
    dd24:	46 95       	lsr	r20
    dd26:	f1 df       	rcall	.-30     	; 0xdd0a <__fp_splitA>
    dd28:	08 c0       	rjmp	.+16     	; 0xdd3a <__fp_splitA+0x30>
    dd2a:	16 16       	cp	r1, r22
    dd2c:	17 06       	cpc	r1, r23
    dd2e:	18 06       	cpc	r1, r24
    dd30:	99 1f       	adc	r25, r25
    dd32:	f1 cf       	rjmp	.-30     	; 0xdd16 <__fp_splitA+0xc>
    dd34:	86 95       	lsr	r24
    dd36:	71 05       	cpc	r23, r1
    dd38:	61 05       	cpc	r22, r1
    dd3a:	08 94       	sec
    dd3c:	08 95       	ret

0000dd3e <__fp_zero>:
    dd3e:	e8 94       	clt

0000dd40 <__fp_szero>:
    dd40:	bb 27       	eor	r27, r27
    dd42:	66 27       	eor	r22, r22
    dd44:	77 27       	eor	r23, r23
    dd46:	cb 01       	movw	r24, r22
    dd48:	97 f9       	bld	r25, 7
    dd4a:	08 95       	ret

0000dd4c <__gesf2>:
    dd4c:	0e 94 31 6e 	call	0xdc62	; 0xdc62 <__fp_cmp>
    dd50:	08 f4       	brcc	.+2      	; 0xdd54 <__gesf2+0x8>
    dd52:	8f ef       	ldi	r24, 0xFF	; 255
    dd54:	08 95       	ret

0000dd56 <__mulsf3>:
    dd56:	0e 94 be 6e 	call	0xdd7c	; 0xdd7c <__mulsf3x>
    dd5a:	0c 94 6c 6e 	jmp	0xdcd8	; 0xdcd8 <__fp_round>
    dd5e:	0e 94 5e 6e 	call	0xdcbc	; 0xdcbc <__fp_pscA>
    dd62:	38 f0       	brcs	.+14     	; 0xdd72 <__mulsf3+0x1c>
    dd64:	0e 94 65 6e 	call	0xdcca	; 0xdcca <__fp_pscB>
    dd68:	20 f0       	brcs	.+8      	; 0xdd72 <__mulsf3+0x1c>
    dd6a:	95 23       	and	r25, r21
    dd6c:	11 f0       	breq	.+4      	; 0xdd72 <__mulsf3+0x1c>
    dd6e:	0c 94 55 6e 	jmp	0xdcaa	; 0xdcaa <__fp_inf>
    dd72:	0c 94 5b 6e 	jmp	0xdcb6	; 0xdcb6 <__fp_nan>
    dd76:	11 24       	eor	r1, r1
    dd78:	0c 94 a0 6e 	jmp	0xdd40	; 0xdd40 <__fp_szero>

0000dd7c <__mulsf3x>:
    dd7c:	0e 94 7d 6e 	call	0xdcfa	; 0xdcfa <__fp_split3>
    dd80:	70 f3       	brcs	.-36     	; 0xdd5e <__mulsf3+0x8>

0000dd82 <__mulsf3_pse>:
    dd82:	95 9f       	mul	r25, r21
    dd84:	c1 f3       	breq	.-16     	; 0xdd76 <__mulsf3+0x20>
    dd86:	95 0f       	add	r25, r21
    dd88:	50 e0       	ldi	r21, 0x00	; 0
    dd8a:	55 1f       	adc	r21, r21
    dd8c:	62 9f       	mul	r22, r18
    dd8e:	f0 01       	movw	r30, r0
    dd90:	72 9f       	mul	r23, r18
    dd92:	bb 27       	eor	r27, r27
    dd94:	f0 0d       	add	r31, r0
    dd96:	b1 1d       	adc	r27, r1
    dd98:	63 9f       	mul	r22, r19
    dd9a:	aa 27       	eor	r26, r26
    dd9c:	f0 0d       	add	r31, r0
    dd9e:	b1 1d       	adc	r27, r1
    dda0:	aa 1f       	adc	r26, r26
    dda2:	64 9f       	mul	r22, r20
    dda4:	66 27       	eor	r22, r22
    dda6:	b0 0d       	add	r27, r0
    dda8:	a1 1d       	adc	r26, r1
    ddaa:	66 1f       	adc	r22, r22
    ddac:	82 9f       	mul	r24, r18
    ddae:	22 27       	eor	r18, r18
    ddb0:	b0 0d       	add	r27, r0
    ddb2:	a1 1d       	adc	r26, r1
    ddb4:	62 1f       	adc	r22, r18
    ddb6:	73 9f       	mul	r23, r19
    ddb8:	b0 0d       	add	r27, r0
    ddba:	a1 1d       	adc	r26, r1
    ddbc:	62 1f       	adc	r22, r18
    ddbe:	83 9f       	mul	r24, r19
    ddc0:	a0 0d       	add	r26, r0
    ddc2:	61 1d       	adc	r22, r1
    ddc4:	22 1f       	adc	r18, r18
    ddc6:	74 9f       	mul	r23, r20
    ddc8:	33 27       	eor	r19, r19
    ddca:	a0 0d       	add	r26, r0
    ddcc:	61 1d       	adc	r22, r1
    ddce:	23 1f       	adc	r18, r19
    ddd0:	84 9f       	mul	r24, r20
    ddd2:	60 0d       	add	r22, r0
    ddd4:	21 1d       	adc	r18, r1
    ddd6:	82 2f       	mov	r24, r18
    ddd8:	76 2f       	mov	r23, r22
    ddda:	6a 2f       	mov	r22, r26
    dddc:	11 24       	eor	r1, r1
    ddde:	9f 57       	subi	r25, 0x7F	; 127
    dde0:	50 40       	sbci	r21, 0x00	; 0
    dde2:	9a f0       	brmi	.+38     	; 0xde0a <__mulsf3_pse+0x88>
    dde4:	f1 f0       	breq	.+60     	; 0xde22 <__mulsf3_pse+0xa0>
    dde6:	88 23       	and	r24, r24
    dde8:	4a f0       	brmi	.+18     	; 0xddfc <__mulsf3_pse+0x7a>
    ddea:	ee 0f       	add	r30, r30
    ddec:	ff 1f       	adc	r31, r31
    ddee:	bb 1f       	adc	r27, r27
    ddf0:	66 1f       	adc	r22, r22
    ddf2:	77 1f       	adc	r23, r23
    ddf4:	88 1f       	adc	r24, r24
    ddf6:	91 50       	subi	r25, 0x01	; 1
    ddf8:	50 40       	sbci	r21, 0x00	; 0
    ddfa:	a9 f7       	brne	.-22     	; 0xdde6 <__mulsf3_pse+0x64>
    ddfc:	9e 3f       	cpi	r25, 0xFE	; 254
    ddfe:	51 05       	cpc	r21, r1
    de00:	80 f0       	brcs	.+32     	; 0xde22 <__mulsf3_pse+0xa0>
    de02:	0c 94 55 6e 	jmp	0xdcaa	; 0xdcaa <__fp_inf>
    de06:	0c 94 a0 6e 	jmp	0xdd40	; 0xdd40 <__fp_szero>
    de0a:	5f 3f       	cpi	r21, 0xFF	; 255
    de0c:	e4 f3       	brlt	.-8      	; 0xde06 <__mulsf3_pse+0x84>
    de0e:	98 3e       	cpi	r25, 0xE8	; 232
    de10:	d4 f3       	brlt	.-12     	; 0xde06 <__mulsf3_pse+0x84>
    de12:	86 95       	lsr	r24
    de14:	77 95       	ror	r23
    de16:	67 95       	ror	r22
    de18:	b7 95       	ror	r27
    de1a:	f7 95       	ror	r31
    de1c:	e7 95       	ror	r30
    de1e:	9f 5f       	subi	r25, 0xFF	; 255
    de20:	c1 f7       	brne	.-16     	; 0xde12 <__mulsf3_pse+0x90>
    de22:	fe 2b       	or	r31, r30
    de24:	88 0f       	add	r24, r24
    de26:	91 1d       	adc	r25, r1
    de28:	96 95       	lsr	r25
    de2a:	87 95       	ror	r24
    de2c:	97 f9       	bld	r25, 7
    de2e:	08 95       	ret

0000de30 <__udivmodhi4>:
    de30:	aa 1b       	sub	r26, r26
    de32:	bb 1b       	sub	r27, r27
    de34:	51 e1       	ldi	r21, 0x11	; 17
    de36:	07 c0       	rjmp	.+14     	; 0xde46 <__udivmodhi4_ep>

0000de38 <__udivmodhi4_loop>:
    de38:	aa 1f       	adc	r26, r26
    de3a:	bb 1f       	adc	r27, r27
    de3c:	a6 17       	cp	r26, r22
    de3e:	b7 07       	cpc	r27, r23
    de40:	10 f0       	brcs	.+4      	; 0xde46 <__udivmodhi4_ep>
    de42:	a6 1b       	sub	r26, r22
    de44:	b7 0b       	sbc	r27, r23

0000de46 <__udivmodhi4_ep>:
    de46:	88 1f       	adc	r24, r24
    de48:	99 1f       	adc	r25, r25
    de4a:	5a 95       	dec	r21
    de4c:	a9 f7       	brne	.-22     	; 0xde38 <__udivmodhi4_loop>
    de4e:	80 95       	com	r24
    de50:	90 95       	com	r25
    de52:	bc 01       	movw	r22, r24
    de54:	cd 01       	movw	r24, r26
    de56:	08 95       	ret

0000de58 <__divmodhi4>:
    de58:	97 fb       	bst	r25, 7
    de5a:	07 2e       	mov	r0, r23
    de5c:	16 f4       	brtc	.+4      	; 0xde62 <__divmodhi4+0xa>
    de5e:	00 94       	com	r0
    de60:	07 d0       	rcall	.+14     	; 0xde70 <__divmodhi4_neg1>
    de62:	77 fd       	sbrc	r23, 7
    de64:	09 d0       	rcall	.+18     	; 0xde78 <__divmodhi4_neg2>
    de66:	0e 94 18 6f 	call	0xde30	; 0xde30 <__udivmodhi4>
    de6a:	07 fc       	sbrc	r0, 7
    de6c:	05 d0       	rcall	.+10     	; 0xde78 <__divmodhi4_neg2>
    de6e:	3e f4       	brtc	.+14     	; 0xde7e <__divmodhi4_exit>

0000de70 <__divmodhi4_neg1>:
    de70:	90 95       	com	r25
    de72:	81 95       	neg	r24
    de74:	9f 4f       	sbci	r25, 0xFF	; 255
    de76:	08 95       	ret

0000de78 <__divmodhi4_neg2>:
    de78:	70 95       	com	r23
    de7a:	61 95       	neg	r22
    de7c:	7f 4f       	sbci	r23, 0xFF	; 255

0000de7e <__divmodhi4_exit>:
    de7e:	08 95       	ret

0000de80 <__divmodsi4>:
    de80:	05 2e       	mov	r0, r21
    de82:	97 fb       	bst	r25, 7
    de84:	1e f4       	brtc	.+6      	; 0xde8c <__divmodsi4+0xc>
    de86:	00 94       	com	r0
    de88:	0e 94 57 6f 	call	0xdeae	; 0xdeae <__negsi2>
    de8c:	57 fd       	sbrc	r21, 7
    de8e:	07 d0       	rcall	.+14     	; 0xde9e <__divmodsi4_neg2>
    de90:	0e 94 96 6f 	call	0xdf2c	; 0xdf2c <__udivmodsi4>
    de94:	07 fc       	sbrc	r0, 7
    de96:	03 d0       	rcall	.+6      	; 0xde9e <__divmodsi4_neg2>
    de98:	4e f4       	brtc	.+18     	; 0xdeac <__divmodsi4_exit>
    de9a:	0c 94 57 6f 	jmp	0xdeae	; 0xdeae <__negsi2>

0000de9e <__divmodsi4_neg2>:
    de9e:	50 95       	com	r21
    dea0:	40 95       	com	r20
    dea2:	30 95       	com	r19
    dea4:	21 95       	neg	r18
    dea6:	3f 4f       	sbci	r19, 0xFF	; 255
    dea8:	4f 4f       	sbci	r20, 0xFF	; 255
    deaa:	5f 4f       	sbci	r21, 0xFF	; 255

0000deac <__divmodsi4_exit>:
    deac:	08 95       	ret

0000deae <__negsi2>:
    deae:	90 95       	com	r25
    deb0:	80 95       	com	r24
    deb2:	70 95       	com	r23
    deb4:	61 95       	neg	r22
    deb6:	7f 4f       	sbci	r23, 0xFF	; 255
    deb8:	8f 4f       	sbci	r24, 0xFF	; 255
    deba:	9f 4f       	sbci	r25, 0xFF	; 255
    debc:	08 95       	ret

0000debe <__tablejump2__>:
    debe:	ee 0f       	add	r30, r30
    dec0:	ff 1f       	adc	r31, r31
    dec2:	05 90       	lpm	r0, Z+
    dec4:	f4 91       	lpm	r31, Z
    dec6:	e0 2d       	mov	r30, r0
    dec8:	09 94       	ijmp

0000deca <__mulhisi3>:
    deca:	0e 94 6d 6f 	call	0xdeda	; 0xdeda <__umulhisi3>
    dece:	33 23       	and	r19, r19
    ded0:	12 f4       	brpl	.+4      	; 0xded6 <__mulhisi3+0xc>
    ded2:	8a 1b       	sub	r24, r26
    ded4:	9b 0b       	sbc	r25, r27
    ded6:	0c 94 7e 6f 	jmp	0xdefc	; 0xdefc <__usmulhisi3_tail>

0000deda <__umulhisi3>:
    deda:	a2 9f       	mul	r26, r18
    dedc:	b0 01       	movw	r22, r0
    dede:	b3 9f       	mul	r27, r19
    dee0:	c0 01       	movw	r24, r0
    dee2:	a3 9f       	mul	r26, r19
    dee4:	70 0d       	add	r23, r0
    dee6:	81 1d       	adc	r24, r1
    dee8:	11 24       	eor	r1, r1
    deea:	91 1d       	adc	r25, r1
    deec:	b2 9f       	mul	r27, r18
    deee:	70 0d       	add	r23, r0
    def0:	81 1d       	adc	r24, r1
    def2:	11 24       	eor	r1, r1
    def4:	91 1d       	adc	r25, r1
    def6:	08 95       	ret

0000def8 <__usmulhisi3>:
    def8:	0e 94 6d 6f 	call	0xdeda	; 0xdeda <__umulhisi3>

0000defc <__usmulhisi3_tail>:
    defc:	b7 ff       	sbrs	r27, 7
    defe:	08 95       	ret
    df00:	82 1b       	sub	r24, r18
    df02:	93 0b       	sbc	r25, r19
    df04:	08 95       	ret

0000df06 <__muluhisi3>:
    df06:	0e 94 6d 6f 	call	0xdeda	; 0xdeda <__umulhisi3>
    df0a:	a5 9f       	mul	r26, r21
    df0c:	90 0d       	add	r25, r0
    df0e:	b4 9f       	mul	r27, r20
    df10:	90 0d       	add	r25, r0
    df12:	a4 9f       	mul	r26, r20
    df14:	80 0d       	add	r24, r0
    df16:	91 1d       	adc	r25, r1
    df18:	11 24       	eor	r1, r1
    df1a:	08 95       	ret

0000df1c <__mulshisi3>:
    df1c:	b7 ff       	sbrs	r27, 7
    df1e:	0c 94 83 6f 	jmp	0xdf06	; 0xdf06 <__muluhisi3>

0000df22 <__mulohisi3>:
    df22:	0e 94 83 6f 	call	0xdf06	; 0xdf06 <__muluhisi3>
    df26:	82 1b       	sub	r24, r18
    df28:	93 0b       	sbc	r25, r19
    df2a:	08 95       	ret

0000df2c <__udivmodsi4>:
    df2c:	a1 e2       	ldi	r26, 0x21	; 33
    df2e:	1a 2e       	mov	r1, r26
    df30:	aa 1b       	sub	r26, r26
    df32:	bb 1b       	sub	r27, r27
    df34:	fd 01       	movw	r30, r26
    df36:	0d c0       	rjmp	.+26     	; 0xdf52 <__udivmodsi4_ep>

0000df38 <__udivmodsi4_loop>:
    df38:	aa 1f       	adc	r26, r26
    df3a:	bb 1f       	adc	r27, r27
    df3c:	ee 1f       	adc	r30, r30
    df3e:	ff 1f       	adc	r31, r31
    df40:	a2 17       	cp	r26, r18
    df42:	b3 07       	cpc	r27, r19
    df44:	e4 07       	cpc	r30, r20
    df46:	f5 07       	cpc	r31, r21
    df48:	20 f0       	brcs	.+8      	; 0xdf52 <__udivmodsi4_ep>
    df4a:	a2 1b       	sub	r26, r18
    df4c:	b3 0b       	sbc	r27, r19
    df4e:	e4 0b       	sbc	r30, r20
    df50:	f5 0b       	sbc	r31, r21

0000df52 <__udivmodsi4_ep>:
    df52:	66 1f       	adc	r22, r22
    df54:	77 1f       	adc	r23, r23
    df56:	88 1f       	adc	r24, r24
    df58:	99 1f       	adc	r25, r25
    df5a:	1a 94       	dec	r1
    df5c:	69 f7       	brne	.-38     	; 0xdf38 <__udivmodsi4_loop>
    df5e:	60 95       	com	r22
    df60:	70 95       	com	r23
    df62:	80 95       	com	r24
    df64:	90 95       	com	r25
    df66:	9b 01       	movw	r18, r22
    df68:	ac 01       	movw	r20, r24
    df6a:	bd 01       	movw	r22, r26
    df6c:	cf 01       	movw	r24, r30
    df6e:	08 95       	ret

0000df70 <memcpy_P>:
    df70:	fb 01       	movw	r30, r22
    df72:	dc 01       	movw	r26, r24
    df74:	02 c0       	rjmp	.+4      	; 0xdf7a <memcpy_P+0xa>
    df76:	05 90       	lpm	r0, Z+
    df78:	0d 92       	st	X+, r0
    df7a:	41 50       	subi	r20, 0x01	; 1
    df7c:	50 40       	sbci	r21, 0x00	; 0
    df7e:	d8 f7       	brcc	.-10     	; 0xdf76 <memcpy_P+0x6>
    df80:	08 95       	ret

0000df82 <memmove>:
    df82:	68 17       	cp	r22, r24
    df84:	79 07       	cpc	r23, r25
    df86:	68 f4       	brcc	.+26     	; 0xdfa2 <memmove+0x20>
    df88:	fb 01       	movw	r30, r22
    df8a:	dc 01       	movw	r26, r24
    df8c:	e4 0f       	add	r30, r20
    df8e:	f5 1f       	adc	r31, r21
    df90:	a4 0f       	add	r26, r20
    df92:	b5 1f       	adc	r27, r21
    df94:	02 c0       	rjmp	.+4      	; 0xdf9a <memmove+0x18>
    df96:	02 90       	ld	r0, -Z
    df98:	0e 92       	st	-X, r0
    df9a:	41 50       	subi	r20, 0x01	; 1
    df9c:	50 40       	sbci	r21, 0x00	; 0
    df9e:	d8 f7       	brcc	.-10     	; 0xdf96 <memmove+0x14>
    dfa0:	08 95       	ret
    dfa2:	0c 94 f8 6f 	jmp	0xdff0	; 0xdff0 <memcpy>

0000dfa6 <__itoa_ncheck>:
    dfa6:	bb 27       	eor	r27, r27
    dfa8:	4a 30       	cpi	r20, 0x0A	; 10
    dfaa:	31 f4       	brne	.+12     	; 0xdfb8 <__itoa_ncheck+0x12>
    dfac:	99 23       	and	r25, r25
    dfae:	22 f4       	brpl	.+8      	; 0xdfb8 <__itoa_ncheck+0x12>
    dfb0:	bd e2       	ldi	r27, 0x2D	; 45
    dfb2:	90 95       	com	r25
    dfb4:	81 95       	neg	r24
    dfb6:	9f 4f       	sbci	r25, 0xFF	; 255
    dfb8:	0c 94 df 6f 	jmp	0xdfbe	; 0xdfbe <__utoa_common>

0000dfbc <__utoa_ncheck>:
    dfbc:	bb 27       	eor	r27, r27

0000dfbe <__utoa_common>:
    dfbe:	fb 01       	movw	r30, r22
    dfc0:	55 27       	eor	r21, r21
    dfc2:	aa 27       	eor	r26, r26
    dfc4:	88 0f       	add	r24, r24
    dfc6:	99 1f       	adc	r25, r25
    dfc8:	aa 1f       	adc	r26, r26
    dfca:	a4 17       	cp	r26, r20
    dfcc:	10 f0       	brcs	.+4      	; 0xdfd2 <__utoa_common+0x14>
    dfce:	a4 1b       	sub	r26, r20
    dfd0:	83 95       	inc	r24
    dfd2:	50 51       	subi	r21, 0x10	; 16
    dfd4:	b9 f7       	brne	.-18     	; 0xdfc4 <__utoa_common+0x6>
    dfd6:	a0 5d       	subi	r26, 0xD0	; 208
    dfd8:	aa 33       	cpi	r26, 0x3A	; 58
    dfda:	08 f0       	brcs	.+2      	; 0xdfde <__utoa_common+0x20>
    dfdc:	a9 5d       	subi	r26, 0xD9	; 217
    dfde:	a1 93       	st	Z+, r26
    dfe0:	00 97       	sbiw	r24, 0x00	; 0
    dfe2:	79 f7       	brne	.-34     	; 0xdfc2 <__utoa_common+0x4>
    dfe4:	b1 11       	cpse	r27, r1
    dfe6:	b1 93       	st	Z+, r27
    dfe8:	11 92       	st	Z+, r1
    dfea:	cb 01       	movw	r24, r22
    dfec:	0c 94 01 70 	jmp	0xe002	; 0xe002 <strrev>

0000dff0 <memcpy>:
    dff0:	fb 01       	movw	r30, r22
    dff2:	dc 01       	movw	r26, r24
    dff4:	02 c0       	rjmp	.+4      	; 0xdffa <memcpy+0xa>
    dff6:	01 90       	ld	r0, Z+
    dff8:	0d 92       	st	X+, r0
    dffa:	41 50       	subi	r20, 0x01	; 1
    dffc:	50 40       	sbci	r21, 0x00	; 0
    dffe:	d8 f7       	brcc	.-10     	; 0xdff6 <memcpy+0x6>
    e000:	08 95       	ret

0000e002 <strrev>:
    e002:	dc 01       	movw	r26, r24
    e004:	fc 01       	movw	r30, r24
    e006:	67 2f       	mov	r22, r23
    e008:	71 91       	ld	r23, Z+
    e00a:	77 23       	and	r23, r23
    e00c:	e1 f7       	brne	.-8      	; 0xe006 <strrev+0x4>
    e00e:	32 97       	sbiw	r30, 0x02	; 2
    e010:	04 c0       	rjmp	.+8      	; 0xe01a <strrev+0x18>
    e012:	7c 91       	ld	r23, X
    e014:	6d 93       	st	X+, r22
    e016:	70 83       	st	Z, r23
    e018:	62 91       	ld	r22, -Z
    e01a:	ae 17       	cp	r26, r30
    e01c:	bf 07       	cpc	r27, r31
    e01e:	c8 f3       	brcs	.-14     	; 0xe012 <strrev+0x10>
    e020:	08 95       	ret

0000e022 <eeprom_read_block>:
    e022:	dc 01       	movw	r26, r24
    e024:	cb 01       	movw	r24, r22

0000e026 <eeprom_read_blraw>:
    e026:	fc 01       	movw	r30, r24
    e028:	f9 99       	sbic	0x1f, 1	; 31
    e02a:	fe cf       	rjmp	.-4      	; 0xe028 <eeprom_read_blraw+0x2>
    e02c:	06 c0       	rjmp	.+12     	; 0xe03a <eeprom_read_blraw+0x14>
    e02e:	f2 bd       	out	0x22, r31	; 34
    e030:	e1 bd       	out	0x21, r30	; 33
    e032:	f8 9a       	sbi	0x1f, 0	; 31
    e034:	31 96       	adiw	r30, 0x01	; 1
    e036:	00 b4       	in	r0, 0x20	; 32
    e038:	0d 92       	st	X+, r0
    e03a:	41 50       	subi	r20, 0x01	; 1
    e03c:	50 40       	sbci	r21, 0x00	; 0
    e03e:	b8 f7       	brcc	.-18     	; 0xe02e <eeprom_read_blraw+0x8>
    e040:	08 95       	ret

0000e042 <eeprom_read_byte>:
    e042:	f9 99       	sbic	0x1f, 1	; 31
    e044:	fe cf       	rjmp	.-4      	; 0xe042 <eeprom_read_byte>
    e046:	92 bd       	out	0x22, r25	; 34
    e048:	81 bd       	out	0x21, r24	; 33
    e04a:	f8 9a       	sbi	0x1f, 0	; 31
    e04c:	99 27       	eor	r25, r25
    e04e:	80 b5       	in	r24, 0x20	; 32
    e050:	08 95       	ret

0000e052 <eeprom_write_byte>:
    e052:	26 2f       	mov	r18, r22

0000e054 <eeprom_write_r18>:
    e054:	f9 99       	sbic	0x1f, 1	; 31
    e056:	fe cf       	rjmp	.-4      	; 0xe054 <eeprom_write_r18>
    e058:	1f ba       	out	0x1f, r1	; 31
    e05a:	92 bd       	out	0x22, r25	; 34
    e05c:	81 bd       	out	0x21, r24	; 33
    e05e:	20 bd       	out	0x20, r18	; 32
    e060:	0f b6       	in	r0, 0x3f	; 63
    e062:	f8 94       	cli
    e064:	fa 9a       	sbi	0x1f, 2	; 31
    e066:	f9 9a       	sbi	0x1f, 1	; 31
    e068:	0f be       	out	0x3f, r0	; 63
    e06a:	01 96       	adiw	r24, 0x01	; 1
    e06c:	08 95       	ret

0000e06e <_exit>:
    e06e:	f8 94       	cli

0000e070 <__stop_program>:
    e070:	ff cf       	rjmp	.-2      	; 0xe070 <__stop_program>
