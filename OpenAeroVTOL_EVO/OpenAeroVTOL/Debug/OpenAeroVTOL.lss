
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000416  00800100  0000a358  0000a3ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000382  00800516  00800516  0000a802  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000a802  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006b0  00000000  00000000  0000a838  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00015c74  00000000  00000000  0000aee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000039a0  00000000  00000000  00020b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004478  00000000  00000000  000244fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001530  00000000  00000000  00028974  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002a1b  00000000  00000000  00029ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000975e  00000000  00000000  0002c8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000588  00000000  00000000  0003601d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__ctors_end>
       4:	0c 94 a4 31 	jmp	0x6348	; 0x6348 <__vector_1>
       8:	0c 94 6c 31 	jmp	0x62d8	; 0x62d8 <__vector_2>
       c:	0c 94 57 32 	jmp	0x64ae	; 0x64ae <__vector_3>
      10:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      14:	0c 94 16 32 	jmp	0x642c	; 0x642c <__vector_5>
      18:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      1c:	0c 94 dd 31 	jmp	0x63ba	; 0x63ba <__vector_7>
      20:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      24:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      28:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      2c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      30:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      34:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      38:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      3c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      40:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      44:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      48:	0c 94 55 31 	jmp	0x62aa	; 0x62aa <__vector_18>
      4c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      50:	0c 94 13 33 	jmp	0x6626	; 0x6626 <__vector_20>
      54:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      58:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      5c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      60:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      64:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      68:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      6c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      70:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      74:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      78:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      7c:	41 20       	and	r4, r1
      7e:	ae 20       	and	r10, r14
      80:	ae 20       	and	r10, r14
      82:	52 20       	and	r5, r2
      84:	5f 20       	and	r5, r15
      86:	69 20       	and	r6, r9
      88:	65 20       	and	r6, r5
      8a:	79 20       	and	r7, r9
      8c:	85 20       	and	r8, r5
      8e:	89 20       	and	r8, r9
      90:	95 20       	and	r9, r5
      92:	78 3a       	cpi	r23, 0xA8	; 168
      94:	7a 3a       	cpi	r23, 0xAA	; 170
      96:	7d 3a       	cpi	r23, 0xAD	; 173
      98:	7f 3a       	cpi	r23, 0xAF	; 175
      9a:	81 3a       	cpi	r24, 0xA1	; 161
      9c:	83 3a       	cpi	r24, 0xA3	; 163
      9e:	85 3a       	cpi	r24, 0xA5	; 165
      a0:	87 3a       	cpi	r24, 0xA7	; 167
      a2:	8a 3a       	cpi	r24, 0xAA	; 170
      a4:	8c 3a       	cpi	r24, 0xAC	; 172
      a6:	8f 3a       	cpi	r24, 0xAF	; 175
      a8:	91 3a       	cpi	r25, 0xA1	; 161
      aa:	93 3a       	cpi	r25, 0xA3	; 163
      ac:	95 3a       	cpi	r25, 0xA5	; 165
      ae:	97 3a       	cpi	r25, 0xA7	; 167
      b0:	99 3a       	cpi	r25, 0xA9	; 169
      b2:	9b 3a       	cpi	r25, 0xAB	; 171
      b4:	9d 3a       	cpi	r25, 0xAD	; 173
      b6:	9f 3a       	cpi	r25, 0xAF	; 175
      b8:	a2 3a       	cpi	r26, 0xA2	; 162
      ba:	8d 3e       	cpi	r24, 0xED	; 237
      bc:	71 3e       	cpi	r23, 0xE1	; 225
      be:	74 3e       	cpi	r23, 0xE4	; 228
      c0:	77 3e       	cpi	r23, 0xE7	; 231
      c2:	7a 3e       	cpi	r23, 0xEA	; 234
      c4:	7d 3e       	cpi	r23, 0xED	; 237
      c6:	80 3e       	cpi	r24, 0xE0	; 224
      c8:	83 3e       	cpi	r24, 0xE3	; 227
      ca:	86 3e       	cpi	r24, 0xE6	; 230

000000cc <Acc_Pol>:
      cc:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      dc:	ff ff                                               ..

000000de <ACC_RPY_Order>:
      de:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      ee:	02 01                                               ..

000000f0 <FUTABA>:
      f0:	01 02 00 03 04 05 06 07                             ........

000000f8 <JR>:
      f8:	00 01 02 03 04 05 06 07                             ........

00000100 <Trans_Matrix>:
     100:	05 02 06 01 05 08 03 07 05                          .........

00000109 <Wingdings>:
     109:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     119:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     129:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     139:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     149:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     159:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     169:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000173 <Verdana22>:
     173:	01 02 2d 0d 1d 00 1f 00 44 00 44 00 44 00 7d 00     ..-.....D.D.D.}.
     183:	aa 00 e3 01 1c 01 5d 01 92 01 cb 02 04 02 3d 09     ......].......=.
     193:	00 70 00 00 00 70 00 00 00 70 00 00 00 70 00 00     .p...p...p...p..
     1a3:	00 70 00 00 00 70 00 00 00 70 00 00 00 70 00 00     .p...p...p...p..
     1b3:	00 70 00 00 0e 80 ff 01 00 f0 ff 0f 00 f8 ff 1f     .p..............
     1c3:	00 7c 00 3e 00 1e 00 78 00 0e 00 70 00 0e 00 70     .|.>...x...p...p
     1d3:	00 0e 00 70 00 0e 00 70 00 1e 00 78 00 7c 00 3e     ...p...p...x.|.>
     1e3:	00 f8 ff 1f 00 f0 ff 0f 00 80 ff 01 00 0b 70 00     ..............p.
     1f3:	70 00 70 00 70 00 70 00 70 00 78 00 70 00 fc ff     p.p.p.p.p.x.p...
     203:	7f 00 fe ff 7f 00 fe ff 7f 00 00 00 70 00 00 00     ............p...
     213:	70 00 00 00 70 00 00 00 70 00 0e 00 00 78 00 1c     p...p...p....x..
     223:	00 7c 00 1c 00 7e 00 0e 00 77 00 0e 00 77 00 0e     .|...~...w...w..
     233:	80 73 00 0e c0 71 00 0e e0 70 00 1e 78 70 00 1e     .s...q...p..xp..
     243:	3c 70 00 fc 1f 70 00 f8 07 70 00 f0 03 70 00 00     <p...p...p...p..
     253:	00 70 00 0e 00 00 38 00 1c 00 38 00 1c 00 70 00     .p....8...8...p.
     263:	0e 00 70 00 0e 00 70 00 0e 1c 70 00 0e 1c 70 00     ..p...p...p...p.
     273:	0e 1c 70 00 0e 1c 70 00 0e 3e 78 00 1c 37 3c 00     ..p...p..>x..7<.
     283:	fc f3 3f 00 f8 e3 1f 00 f0 c0 07 00 10 00 e0 01     ..?.............
     293:	00 00 f0 01 00 00 fc 01 00 00 fe 01 00 00 df 01     ................
     2a3:	00 80 cf 01 00 e0 c3 01 00 f0 c1 01 00 f8 c0 01     ................
     2b3:	00 7c c0 01 00 fe ff 7f 00 fe ff 7f 00 fe ff 7f     .|..............
     2c3:	00 00 c0 01 00 00 c0 01 00 00 c0 01 00 0d 00 00     ................
     2d3:	38 00 fe 1f 38 00 fe 0f 70 00 fe 0f 70 00 0e 0e     8...8...p...p...
     2e3:	70 00 0e 0e 70 00 0e 0e 70 00 0e 0e 70 00 0e 1e     p...p...p...p...
     2f3:	78 00 0e 3c 3c 00 0e fc 1f 00 0e f8 0f 00 0e e0     x..<<...........
     303:	07 00 0e 00 fe 03 00 c0 ff 0f 00 f0 ff 1f 00 f8     ................
     313:	1c 3e 00 3c 0c 78 00 1c 0e 70 00 1e 0e 70 00 0e     .>.<.x...p...p..
     323:	0e 70 00 0e 0e 70 00 0e 1e 78 00 0e 3c 3c 00 1e     .p...p...x..<<..
     333:	fc 1f 00 00 f8 0f 00 00 e0 07 00 0e 0e 00 00 00     ................
     343:	0e 00 00 00 0e 00 40 00 0e 00 70 00 0e 00 7c 00     ......@...p...|.
     353:	0e 00 7f 00 0e c0 1f 00 0e f0 07 00 0e fc 00 00     ................
     363:	0e 3f 00 00 ce 0f 00 00 fe 03 00 00 fe 00 00 00     .?..............
     373:	3e 00 00 00 0e 00 c0 07 00 f0 e1 1f 00 f8 f3 3f     >..............?
     383:	00 fc 3f 3c 00 1e 1f 78 00 0e 0e 70 00 0e 0c 70     ..?<...x...p...p
     393:	00 0e 1c 70 00 0e 18 70 00 1e 3c 78 00 fc 7f 3c     ...p...p..<x...<
     3a3:	00 f8 f3 3f 00 f0 e1 1f 00 00 c0 07 00 0e e0 07     ...?............
     3b3:	00 00 f0 1f 00 00 f8 3f 78 00 3c 3c 70 00 1e 78     .......?x.<<p..x
     3c3:	70 00 0e 70 70 00 0e 70 70 00 0e 70 78 00 0e 70     p..pp..pp..px..p
     3d3:	38 00 1e 30 3c 00 7c 38 1f 00 f8 ff 0f 00 f0 ff     8..0<.|8........
     3e3:	03 00 c0 7f 00 00                                   ......

000003e9 <Verdana14>:
     3e9:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     3f9:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     409:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     419:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     429:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     439:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     449:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     459:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     469:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     479:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     489:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     499:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     4a9:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     4b9:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     4c9:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     4d9:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     4e9:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     4f9:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     509:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     519:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     529:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     539:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     549:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     559:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     569:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     579:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     589:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     599:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     5a9:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     5b9:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     5c9:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     5d9:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     5e9:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     5f9:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     609:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     619:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     629:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     639:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     649:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     659:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     669:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     679:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     689:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     699:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     6a9:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     6b9:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     6c9:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     6d9:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     6e9:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     6f9:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     709:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     719:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     729:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     739:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     749:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     759:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     769:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     779:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     789:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     799:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     7a9:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     7b9:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     7c9:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     7d9:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     7e9:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     7f9:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     809:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     819:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     829:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     839:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     849:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     859:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     869:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     879:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     889:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     899:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     8a9:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     8b9:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     8c9:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     8d9:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     8e9:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     8f9:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     909:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     919:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     929:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     939:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     949:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     959:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     969:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     979:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     989:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     999:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     9a9:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     9b9:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     9c9:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     9d9:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     9e9:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     9f9:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     a09:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     a19:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     a29:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     a39:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     a49:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     a59:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     a69:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     a79:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     a89:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     a99:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     aa9:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     ab9:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     ac9:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     ad9:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     ae9:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     af9:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     b09:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     b19:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     b29:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     b39:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     b49:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     b59:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     b69:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     b79:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     b89:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     b99:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     ba9:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     bb9:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     bc9:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     bd9:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     be9:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     bf9:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     c09:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     c19:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     c29:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     c39:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     c49:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     c59:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     c69:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     c79:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     c89:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000c97 <Verdana8>:
     c97:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     ca7:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     cb7:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     cc7:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     cd7:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     ce7:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     cf7:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     d07:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     d17:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     d27:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     d37:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     d47:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     d57:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     d67:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     d77:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     d87:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     d97:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     da7:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     db7:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     dc7:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     dd7:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     de7:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     df7:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     e07:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     e17:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     e27:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     e37:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     e47:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     e57:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     e67:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     e77:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     e87:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     e97:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     ea7:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     eb7:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     ec7:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     ed7:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     ee7:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     ef7:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     f07:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     f17:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     f27:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     f37:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     f47:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     f57:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     f67:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     f77:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     f87:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     f97:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     fa7:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     fb7:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     fc7:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     fd7:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     fe7:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     ff7:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
    1007:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
    1017:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
    1027:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
    1037:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
    1047:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
    1057:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
    1067:	01                                                  .

00001068 <lcd_commmands>:
    1068:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00001076 <pagemap>:
    1076:	07 06 05 04 03 02 01 00                             ........

0000107e <text_menu>:
    107e:	85 18 6f 13 6a 13 65 13 60 13 5b 13 56 13 51 13     ..o.j.e.`.[.V.Q.
    108e:	4c 13 f2 1a ea 1a f0 1a ee 1a ec 1a e5 1a e0 1a     L...............
    109e:	db 1a d6 1a ea 14 0a 15 05 15 ff 14 4a 18 fc 1a     ............J...
    10ae:	f4 1a 54 19 71 19 6c 19 66 19 62 19 5e 19 74 13     ..T.q.l.f.b.^.t.
    10be:	50 15 47 15 58 15 40 15 3b 15 95 13 90 13 8b 13     P.G.X.@.;.......
    10ce:	86 13 81 13 7b 13 75 13 27 15 74 13 84 15 7c 15     ....{.u.'.t...|.
    10de:	93 17 8e 17 8b 17 81 17 77 17 d7 13 cf 13 ca 13     ........w.......
    10ee:	6f 15 6a 15 61 15 c0 14 59 19 b4 14 2b 18 27 18     o.j.a...Y...+.'.
    10fe:	21 18 18 18 11 18 74 13 85 18 82 18 ef 13 f6 13     !.....t.........
    110e:	e5 13 74 13 74 13 17 15 10 15 c5 1a b3 1a a0 1a     ..t.t...........
    111e:	8e 1a 78 1a 69 1a 55 1a 41 1a 33 1a 24 1a 15 1a     ..x.i.U.A.3.$...
    112e:	06 1a f7 19 e8 19 d9 19 ca 19 b6 19 9d 19 84 19     ................
    113e:	76 19 74 13 95 13 90 13 a6 13 ab 13 b0 13 b5 13     v.t.............
    114e:	27 15 58 15 50 15 47 15 40 15 3b 15 36 15 31 15     '.X.P.G.@.;.6.1.
    115e:	2c 15 27 15 20 15 1a 15 08 18 01 18 f3 14 dd 13     ,.'. ...........
    116e:	ca 13 7c 14 70 14 74 13 2d 14 24 14 1b 14 17 14     ..|.p.t.-.$.....
    117e:	0e 14 06 14 74 13 74 13 74 13 01 1b f7 14 95 14     ....t.t.t.......
    118e:	87 14 82 14 68 14 5d 14 74 13 ff 13 f6 13 74 13     ....h.].t.....t.
    119e:	74 13 74 13 6c 19 66 19 62 19 79 18 cb 17 6f 18     t.t.l.f.b.y...o.
    11ae:	64 18 55 18 4a 18 3e 18 30 18 74 13 f4 17 ea 17     d.U.J.>.0.t.....
    11be:	e2 17 d5 17 9e 17 99 13 c1 17 b7 17 ab 17 96 17     ................
    11ce:	74 13 74 13 40 19 38 19 2a 19 1d 19 0f 19 04 19     t.t.@.8.*.......
    11de:	fb 18 f2 18 e3 18 d5 18 c6 18 ba 18 b3 18 ac 18     ................
    11ee:	9f 18 93 18 89 18 48 19 74 13 74 13 6f 17 64 17     ......H.t.t.o.d.
    11fe:	53 17 46 17 3b 17 2b 17 1b 17 0c 17 fc 16 ec 16     S.F.;.+.........
    120e:	dc 16 cc 16 bc 16 ac 16 9e 16 90 16 81 16 72 16     ..............r.
    121e:	65 16 58 16 4c 16 40 16 34 16 27 16 1d 16 13 16     e.X.L.@.4.'.....
    122e:	06 16 fb 15 ee 15 e3 15 d6 15 fb 15 c9 15 e3 15     ................
    123e:	74 13 74 13 84 15 7c 15 76 15 74 13 58 14 53 14     t.t...|.v.t.X.S.
    124e:	4e 14 49 14 44 14 3f 14 3a 14 35 14 58 15 50 15     N.I.D.?.:.5.X.P.
    125e:	47 15 40 15 3b 15 36 15 31 15 2c 15 c0 15 b6 15     G.@.;.6.1.,.....
    126e:	ae 15 a6 15 9d 15 95 15 8c 15 27 15 84 15 7c 15     ..........'...|.
    127e:	76 15 74 13 74 13 ab 14 a2 14 e0 14 da 14 ce 14     v.t.t...........
    128e:	1d 1b 17 1b 79 18 0e 1b 0c 1b 0a 1b c5 13 c1 13     ....y...........
    129e:	ba 13 3f 13 38 13 2e 13 46 13 26 13 74 13 74 13     ..?.8...F.&.t.t.
    12ae:	d0 1a 0c 13 ff 12 74 13 f8 12 ea 12 d9 12 cc 12     ......t.........
    12be:	74 13 74 13 74 13 c6 12                             t.t.t...

000012c6 <ERROR_MSG_0>:
    12c6:	43 6c 65 61 72 00                                   Clear.

000012cc <ERROR_3>:
    12cc:	44 69 73 61 72 6d 20 74 69 6d 65 72 00              Disarm timer.

000012d9 <ERROR_2>:
    12d9:	4e 6f 20 73 69 67 6e 61 6c 20 64 69 73 61 72 6d     No signal disarm
	...

000012ea <ERROR_1>:
    12ea:	4d 61 6e 75 61 6c 20 64 69 73 61 72 6d 00           Manual disarm.

000012f8 <ERROR_0>:
    12f8:	52 65 62 6f 6f 74 00                                Reboot.

000012ff <WARNING_1>:
    12ff:	52 45 4d 4f 56 45 20 50 52 4f 50 53 00              REMOVE PROPS.

0000130c <WARNING_0>:
    130c:	57 41 52 4e 49 4e 47 20 2d 20 45 72 61 73 65 73     WARNING - Erases
    131c:	20 73 65 74 74 69 6e 67 73 00                        settings.

00001326 <PRESET_4>:
    1326:	4f 70 74 69 6f 6e 73 00                             Options.

0000132e <PRESET_3>:
    132e:	54 72 69 63 6f 70 74 65 72 00                       Tricopter.

00001338 <PRESET_2>:
    1338:	51 75 61 64 20 50 00                                Quad P.

0000133f <PRESET_1>:
    133f:	51 75 61 64 20 58 00                                Quad X.

00001346 <PRESET_0>:
    1346:	42 6c 61 6e 6b 00                                   Blank.

0000134c <VBAT39>:
    134c:	33 2e 39 56 00                                      3.9V.

00001351 <VBAT38>:
    1351:	33 2e 38 56 00                                      3.8V.

00001356 <VBAT37>:
    1356:	33 2e 37 56 00                                      3.7V.

0000135b <VBAT36>:
    135b:	33 2e 36 56 00                                      3.6V.

00001360 <VBAT35>:
    1360:	33 2e 35 56 00                                      3.5V.

00001365 <VBAT34>:
    1365:	33 2e 34 56 00                                      3.4V.

0000136a <VBAT33>:
    136a:	33 2e 33 56 00                                      3.3V.

0000136f <VBAT32>:
    136f:	33 2e 32 56 00                                      3.2V.

00001374 <Dummy0>:
	...

00001375 <MPU6050LPF7>:
    1375:	32 36 30 48 7a 00                                   260Hz.

0000137b <MPU6050LPF6>:
    137b:	31 38 34 48 7a 00                                   184Hz.

00001381 <MPU6050LPF5>:
    1381:	39 34 48 7a 00                                      94Hz.

00001386 <MPU6050LPF4>:
    1386:	34 34 48 7a 00                                      44Hz.

0000138b <MPU6050LPF3>:
    138b:	32 31 48 7a 00                                      21Hz.

00001390 <MPU6050LPF2>:
    1390:	31 30 48 7a 00                                      10Hz.

00001395 <MPU6050LPF1>:
    1395:	35 48 7a 00                                         5Hz.

00001399 <GeneralText10>:
    1399:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

000013a6 <SWLPF4>:
    13a6:	31 37 48 7a 00                                      17Hz.

000013ab <SWLPF3>:
    13ab:	32 37 48 7a 00                                      27Hz.

000013b0 <SWLPF2>:
    13b0:	33 38 48 7a 00                                      38Hz.

000013b5 <SWLPF1>:
    13b5:	36 37 48 7a 00                                      67Hz.

000013ba <Random12>:
    13ba:	73 69 67 6e 61 6c 00                                signal.

000013c1 <Random11>:
    13c1:	6c 6f 77 00                                         low.

000013c5 <Random10>:
    13c5:	68 69 67 68 00                                      high.

000013ca <Random1>:
    13ca:	48 69 67 68 00                                      High.

000013cf <Safety2>:
    13cf:	41 72 6d 61 62 6c 65 00                             Armable.

000013d7 <Safety1>:
    13d7:	41 72 6d 65 64 00                                   Armed.

000013dd <GeneralText5>:
    13dd:	53 79 6e 63 20 52 43 00                             Sync RC.

000013e5 <MixerItem16>:
    13e5:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

000013ef <MixerItem15>:
    13ef:	53 63 61 6c 65 64 00                                Scaled.

000013f6 <MixerItem12>:
    13f6:	52 65 76 65 72 73 65 64 00                          Reversed.

000013ff <MixerItem11>:
    13ff:	4e 6f 72 6d 61 6c 00                                Normal.

00001406 <MixerMenuItem7>:
    1406:	50 69 74 63 68 55 70 00                             PitchUp.

0000140e <MixerMenuItem6>:
    140e:	53 69 64 65 77 61 79 73 00                          Sideways.

00001417 <MixerMenuItem5>:
    1417:	41 66 74 00                                         Aft.

0000141b <MixerMenuItem4>:
    141b:	49 6e 76 65 72 74 65 64 00                          Inverted.

00001424 <MixerMenuItem3>:
    1424:	56 65 72 74 69 63 61 6c 00                          Vertical.

0000142d <MixerMenuItem2>:
    142d:	46 6f 72 77 61 72 64 00                             Forward.

00001435 <MOUT8>:
    1435:	4f 55 54 38 00                                      OUT8.

0000143a <MOUT7>:
    143a:	4f 55 54 37 00                                      OUT7.

0000143f <MOUT6>:
    143f:	4f 55 54 36 00                                      OUT6.

00001444 <MOUT5>:
    1444:	4f 55 54 35 00                                      OUT5.

00001449 <MOUT4>:
    1449:	4f 55 54 34 00                                      OUT4.

0000144e <MOUT3>:
    144e:	4f 55 54 33 00                                      OUT3.

00001453 <MOUT2>:
    1453:	4f 55 54 32 00                                      OUT2.

00001458 <MOUT1>:
    1458:	4f 55 54 31 00                                      OUT1.

0000145d <Status5>:
    145d:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001468 <Status4>:
    1468:	28 41 72 6d 65 64 29 00                             (Armed).

00001470 <Status2>:
    1470:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

0000147c <Status0>:
    147c:	50 72 65 73 73 00                                   Press.

00001482 <WizardText2>:
    1482:	44 6f 6e 65 00                                      Done.

00001487 <WizardText1>:
    1487:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001495 <WizardText0>:
    1495:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

000014a2 <PText6>:
    14a2:	73 65 74 74 69 6e 67 73 00                          settings.

000014ab <PText5>:
    14ab:	55 70 64 61 74 69 6e 67 00                          Updating.

000014b4 <PText4>:
    14b4:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

000014c0 <PText3>:
    14c0:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

000014ce <PText2>:
    14ce:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

000014da <PText1>:
    14da:	52 65 73 65 74 00                                   Reset.

000014e0 <PText0>:
    14e0:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

000014ea <Disarmed>:
    14ea:	44 69 73 61 72 6d 65 64 00                          Disarmed.

000014f3 <ErrorText10>:
    14f3:	4c 6f 77 00                                         Low.

000014f7 <Status3>:
    14f7:	42 61 74 74 65 72 79 00                             Battery.

000014ff <ErrorText7>:
    14ff:	4d 6f 64 65 6c 00                                   Model.

00001505 <ErrorText6>:
    1505:	4c 6f 73 74 00                                      Lost.

0000150a <ErrorText5>:
    150a:	45 72 72 6f 72 00                                   Error.

00001510 <ErrorText4>:
    1510:	53 69 67 6e 61 6c 00                                Signal.

00001517 <ErrorText3>:
    1517:	4e 6f 00                                            No.

0000151a <ChannelRef12>:
    151a:	45 6c 65 76 2e 00                                   Elev..

00001520 <ChannelRef10>:
    1520:	54 68 72 6f 74 2e 00                                Throt..

00001527 <ChannelRef8>:
    1527:	4e 6f 6e 65 00                                      None.

0000152c <ChannelRef7>:
    152c:	41 55 58 33 00                                      AUX3.

00001531 <ChannelRef6>:
    1531:	41 55 58 32 00                                      AUX2.

00001536 <ChannelRef5>:
    1536:	41 55 58 31 00                                      AUX1.

0000153b <ChannelRef4>:
    153b:	47 65 61 72 00                                      Gear.

00001540 <ChannelRef3>:
    1540:	52 75 64 64 65 72 00                                Rudder.

00001547 <ChannelRef2>:
    1547:	45 6c 65 76 61 74 6f 72 00                          Elevator.

00001550 <ChannelRef1>:
    1550:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001558 <ChannelRef0>:
    1558:	54 68 72 6f 74 74 6c 65 00                          Throttle.

00001561 <MixerItem62>:
    1561:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

0000156a <MixerItem61>:
    156a:	53 69 6e 65 00                                      Sine.

0000156f <MixerItem60>:
    156f:	4c 69 6e 65 61 72 00                                Linear.

00001576 <MixerItem49>:
    1576:	4d 6f 74 6f 72 00                                   Motor.

0000157c <MixerItem41>:
    157c:	44 2e 53 65 72 76 6f 00                             D.Servo.

00001584 <MixerItem40>:
    1584:	41 2e 53 65 72 76 6f 00                             A.Servo.

0000158c <MixerItem81>:
    158c:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001595 <MixerItem80>:
    1595:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

0000159d <MixerItem74>:
    159d:	41 63 63 50 69 74 63 68 00                          AccPitch.

000015a6 <MixerItem73>:
    15a6:	41 63 63 52 6f 6c 6c 00                             AccRoll.

000015ae <MixerItem72>:
    15ae:	47 79 72 6f 59 61 77 00                             GyroYaw.

000015b6 <MixerItem71>:
    15b6:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000015c0 <MixerItem70>:
    15c0:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

000015c9 <MixerItem31>:
    15c9:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

000015d6 <MixerItem21>:
    15d6:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

000015e3 <MixerItem30>:
    15e3:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

000015ee <MixerItem29>:
    15ee:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

000015fb <MixerItem2>:
    15fb:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

00001606 <MixerItem0>:
    1606:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

00001613 <MixerItem43>:
    1613:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

0000161d <MixerItem42>:
    161d:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

00001627 <MixerItem28>:
    1627:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001634 <MixerItem3>:
    1634:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

00001640 <MixerItem27>:
    1640:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

0000164c <MixerItem7>:
    164c:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001658 <MixerItem26>:
    1658:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001665 <MixerItem6>:
    1665:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

00001672 <MixerItem25>:
    1672:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

00001681 <MixerItem5>:
    1681:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

00001690 <MixerItem24>:
    1690:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

0000169e <MixerItem4>:
    169e:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

000016ac <MixerItem56>:
    16ac:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

000016bc <MixerItem53>:
    16bc:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

000016cc <MixerItem55>:
    16cc:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

000016dc <MixerItem52>:
    16dc:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

000016ec <MixerItem54>:
    16ec:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

000016fc <MixerItem51>:
    16fc:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

0000170c <Mixeritem50>:
    170c:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

0000171b <MixerItem33>:
    171b:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

0000172b <MixerItem23>:
    172b:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

0000173b <MixerItem34>:
    173b:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

00001746 <MixerItem35>:
    1746:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

00001753 <MixerItem36>:
    1753:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

00001764 <MixerItem20>:
    1764:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

0000176f <MixerItem1>:
    176f:	44 65 76 69 63 65 3a 00                             Device:.

00001777 <P5text>:
    1777:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

00001781 <P4text>:
    1781:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

0000178b <P3text>:
    178b:	50 32 00                                            P2.

0000178e <P2text>:
    178e:	50 31 2e 6e 00                                      P1.n.

00001793 <P1text>:
    1793:	50 31 00                                            P1.

00001796 <GeneralText20>:
    1796:	50 72 65 73 65 74 3a 00                             Preset:.

0000179e <BattMenuItem2>:
    179e:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

000017ab <GeneralText7>:
    17ab:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

000017b7 <GeneralText16>:
    17b7:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

000017c1 <GeneralText6>:
    17c1:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

000017cb <GeneralText3>:
    17cb:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

000017d5 <GeneralText2>:
    17d5:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

000017e2 <AutoMenuItem2>:
    17e2:	53 61 66 65 74 79 3a 00                             Safety:.

000017ea <Contrast>:
    17ea:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

000017f4 <MixerMenuItem0>:
    17f4:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

00001801 <RCMenuItem7>:
    1801:	46 75 74 61 62 61 00                                Futaba.

00001808 <RCMenuItem6>:
    1808:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

00001811 <RXMode4>:
    1811:	58 74 72 65 6d 65 00                                Xtreme.

00001818 <RXMode3>:
    1818:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

00001821 <RXMode2>:
    1821:	53 2d 42 75 73 00                                   S-Bus.

00001827 <RXMode1>:
    1827:	50 57 4d 00                                         PWM.

0000182b <RXMode0>:
    182b:	43 50 50 4d 00                                      CPPM.

00001830 <RCMenuItem30>:
    1830:	56 69 62 65 20 64 69 73 70 6c 61 79 3a 00           Vibe display:.

0000183e <Transition_P1n>:
    183e:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

0000184a <Transition>:
    184a:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

00001855 <RCMenuItem2>:
    1855:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

00001864 <RCMenuItem0>:
    1864:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

0000186f <RCMenuItem20>:
    186f:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

00001879 <RCMenuItem1>:
    1879:	52 58 20 74 79 70 65 3a 00                          RX type:.

00001882 <AutoMenuItem15>:
    1882:	4f 4e 00                                            ON.

00001885 <AutoMenuItem11>:
    1885:	4f 46 46 00                                         OFF.

00001889 <StabMenuItem30>:
    1889:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

00001893 <StabMenuItem9>:
    1893:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

0000189f <StabMenuItem12>:
    189f:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

000018ac <StabMenuItem8>:
    18ac:	59 61 77 20 49 3a 00                                Yaw I:.

000018b3 <StabMenuItem7>:
    18b3:	59 61 77 20 50 3a 00                                Yaw P:.

000018ba <AutoMenuItem8>:
    18ba:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

000018c6 <AutoMenuItem21>:
    18c6:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

000018d5 <StabMenuItem6>:
    18d5:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

000018e3 <StabMenuItem11>:
    18e3:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

000018f2 <StabMenuItem5>:
    18f2:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

000018fb <AutoMenuItem4>:
    18fb:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

00001904 <AutoMenuItem7>:
    1904:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

0000190f <AutoMenuItem20>:
    190f:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

0000191d <StabMenuItem3>:
    191d:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

0000192a <StabMenuItem10>:
    192a:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001938 <StabMenuItem2>:
    1938:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

00001940 <AutoMenuItem1>:
    1940:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

00001948 <StabMenuItem13>:
    1948:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

00001954 <SensorMenuItem2>:
    1954:	49 6e 76 2e 00                                      Inv..

00001959 <SensorMenuItem1>:
    1959:	43 61 6c 2e 00                                      Cal..

0000195e <PText19>:
    195e:	41 63 63 00                                         Acc.

00001962 <PText18>:
    1962:	59 61 77 00                                         Yaw.

00001966 <PText17>:
    1966:	50 69 74 63 68 00                                   Pitch.

0000196c <PText16>:
    196c:	52 6f 6c 6c 00                                      Roll.

00001971 <PText15>:
    1971:	47 79 72 6f 00                                      Gyro.

00001976 <MainMenuItem24>:
    1976:	32 30 2e 20 45 72 72 6f 72 20 6c 6f 67 00           20. Error log.

00001984 <MainMenuItem23>:
    1984:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    1994:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000199d <MainMenuItem22>:
    199d:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    19ad:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

000019b6 <MainMenuItem20>:
    19b6:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    19c6:	69 6f 6e 00                                         ion.

000019ca <MainMenuItem18>:
    19ca:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

000019d9 <MainMenuItem17>:
    19d9:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

000019e8 <MainMenuItem16>:
    19e8:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

000019f7 <MainMenuItem15>:
    19f7:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

00001a06 <MainMenuItem14>:
    1a06:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

00001a15 <MainMenuItem13>:
    1a15:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

00001a24 <MainMenuItem12>:
    1a24:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

00001a33 <MainMenuItem11>:
    1a33:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

00001a41 <MainMenuItem3>:
    1a41:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    1a51:	65 20 32 00                                         e 2.

00001a55 <MainMenuItem2>:
    1a55:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    1a65:	65 20 31 00                                         e 1.

00001a69 <MainMenuItem10>:
    1a69:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

00001a78 <MainMenuItem8>:
    1a78:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    1a88:	61 74 69 6f 6e 00                                   ation.

00001a8e <MainMenuItem7>:
    1a8e:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    1a9e:	79 00                                               y.

00001aa0 <MainMenuItem9>:
    1aa0:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    1ab0:	74 73 00                                            ts.

00001ab3 <MainMenuItem1>:
    1ab3:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    1ac3:	70 00                                               p.

00001ac5 <MainMenuItem0>:
    1ac5:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00001ad0 <MenuFrame9>:
    1ad0:	41 62 6f 72 74 00                                   Abort.

00001ad6 <MenuFrame8>:
    1ad6:	53 61 76 65 00                                      Save.

00001adb <MenuFrame7>:
    1adb:	44 65 66 2e 00                                      Def..

00001ae0 <MenuFrame6>:
    1ae0:	42 61 63 6b 00                                      Back.

00001ae5 <MenuFrame5>:
    1ae5:	4d 65 6e 75 00                                      Menu.

00001aea <MenuFrame1>:
    1aea:	45 00                                               E.

00001aec <MenuFrame4>:
    1aec:	44 00                                               D.

00001aee <MenuFrame3>:
    1aee:	43 00                                               C.

00001af0 <MenuFrame2>:
    1af0:	42 00                                               B.

00001af2 <MenuFrame0>:
    1af2:	41 00                                               A.

00001af4 <StatusText9>:
    1af4:	4a 69 74 74 65 72 3a 00                             Jitter:.

00001afc <StatusText8>:
    1afc:	50 6f 73 3a 00                                      Pos:.

00001b01 <StatusText7>:
    1b01:	42 61 74 74 65 72 79 3a 00                          Battery:.

00001b0a <StatusText5>:
    1b0a:	30 00                                               0.

00001b0c <StatusText4>:
    1b0c:	2e 00                                               ..

00001b0e <StatusText3>:
    1b0e:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

00001b17 <StatusText1>:
    1b17:	4d 6f 64 65 3a 00                                   Mode:.

00001b1d <StatusText0>:
    1b1d:	56 65 72 73 69 6f 6e 3a 20 20 20 31 2e 32 20 42     Version:   1.2 B
    1b2d:	33 00                                               3.

00001b2f <Gyro_Pol>:
    1b2f:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    1b3f:	01 01                                               ..

00001b41 <Gyro_RPY_Order>:
    1b41:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    1b51:	01 00                                               ..

00001b53 <LPF_lookup_HS>:
    1b53:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    1b63:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

00001b73 <LPF_lookup>:
    1b73:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    1b83:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

00001b93 <lines>:
    1b93:	03 0f 1b 27                                         ...'

00001b97 <flight_menu_ranges>:
    1b97:	00 7f 01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00     ....(......}....
    1ba7:	04 01 00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f     ................
    1bb7:	01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00 04 01     ..(......}......
    1bc7:	00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f 01 00     ................
    1bd7:	3c 00 7f 01 00 28 00 7d 01 00 19 00 04 01 00 02     <....(.}........
    1be7:	81 7f 01 00 00 00 7f 01 00 32                       .........2

00001bf1 <FlightMenuText>:
	...

00001c15 <mixer_menu_ranges>:
    1c15:	00 02 01 01 02 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    1c25:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    1c35:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    1c45:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    1c55:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    1c65:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    1c75:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    1c85:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    1c95:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    1ca5:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    1cb5:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

00001cbf <MixerMenuText>:
    1cbf:	e2 00 00 00 00 00 00 00 00 00 00 00 00 00 38 00     ..............8.
	...
    1cdb:	44 00 44 00 44 00 44 00 44 00 44 00 44 00 44 00     D.D.D.D.D.D.D.D.
    1ceb:	44 00 44 00 44 00 44 00 ee 00 00 00 ee 00 00 00     D.D.D.D.........
    1cfb:	ee 00 00 00 ee 00 00 00                             ........

00001d03 <servo_menu_ranges>:
    1d03:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

00001d12 <ServoMenuText>:
    1d12:	8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00     ................
	...

00001d42 <rc_menu_ranges>:
    1d42:	00 04 01 01 02 00 02 01 01 02 00 04 01 01 04 00     ................
    1d52:	01 01 01 00 00 07 01 01 04 00 28 01 00 00 01 63     ..........(....c
    1d62:	01 00 32 00 01 01 01 00 00 01 01 01 00 00 00 00     ..2.............
    1d72:	00 00 00 05 01 01 00 1c 32 01 00 24 00 01 01 01     ........2..$....
    1d82:	01 00 7f 01 00 1e 00 08 01 01 00 00 06 01 01 03     ................
    1d92:	00 07 01 01 02 00 07 01 01 07 01 0a 01 00 07 00     ................
    1da2:	03 01 04 00                                         ....

00001da6 <RCMenuText>:
    1da6:	3e 00 76 00 69 00 74 00 69 00 00 00 00 00 44 00     >.v.i.t.i.....D.
    1db6:	00 00 00 00 7c 00 00 00 35 00 00 00 00 00 25 00     ....|...5.....%.
    1dc6:	25 00 25 00 00 00 11 01                             %.%.....

00001dce <SQRTSIN>:
    1dce:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1dde:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1dee:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1dfe:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1e0e:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1e1e:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1e2e:	64 64 64 64 64                                      ddddd

00001e33 <SIN>:
    1e33:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1e43:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1e53:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1e63:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1e73:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1e83:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1e93:	64 64 64 64 64                                      ddddd

00001e98 <__ctors_end>:
    1e98:	11 24       	eor	r1, r1
    1e9a:	1f be       	out	0x3f, r1	; 63
    1e9c:	cf ef       	ldi	r28, 0xFF	; 255
    1e9e:	d0 e1       	ldi	r29, 0x10	; 16
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	cd bf       	out	0x3d, r28	; 61

00001ea4 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1ea4:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1ea6:	88 e1       	ldi	r24, 0x18	; 24
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	80 93 60 00 	sts	0x0060, r24
    1eb0:	10 92 60 00 	sts	0x0060, r1
    1eb4:	0f be       	out	0x3f, r0	; 63

00001eb6 <__do_copy_data>:
    1eb6:	15 e0       	ldi	r17, 0x05	; 5
    1eb8:	a0 e0       	ldi	r26, 0x00	; 0
    1eba:	b1 e0       	ldi	r27, 0x01	; 1
    1ebc:	e8 e5       	ldi	r30, 0x58	; 88
    1ebe:	f3 ea       	ldi	r31, 0xA3	; 163
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <__do_copy_data+0x10>
    1ec2:	05 90       	lpm	r0, Z+
    1ec4:	0d 92       	st	X+, r0
    1ec6:	a6 31       	cpi	r26, 0x16	; 22
    1ec8:	b1 07       	cpc	r27, r17
    1eca:	d9 f7       	brne	.-10     	; 0x1ec2 <__do_copy_data+0xc>

00001ecc <__do_clear_bss>:
    1ecc:	28 e0       	ldi	r18, 0x08	; 8
    1ece:	a6 e1       	ldi	r26, 0x16	; 22
    1ed0:	b5 e0       	ldi	r27, 0x05	; 5
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <.do_clear_bss_start>

00001ed4 <.do_clear_bss_loop>:
    1ed4:	1d 92       	st	X+, r1

00001ed6 <.do_clear_bss_start>:
    1ed6:	a8 39       	cpi	r26, 0x98	; 152
    1ed8:	b2 07       	cpc	r27, r18
    1eda:	e1 f7       	brne	.-8      	; 0x1ed4 <.do_clear_bss_loop>
    1edc:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <main>
    1ee0:	0c 94 aa 51 	jmp	0xa354	; 0xa354 <_exit>

00001ee4 <__bad_interrupt>:
    1ee4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001ee8 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1ee8:	00 00       	nop
	ret					// 4 (5 cycles)
    1eea:	08 95       	ret

00001eec <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1eec:	fd df       	rcall	.-6      	; 0x1ee8 <glcd_delay>
	rcall	glcd_delay
    1eee:	fc df       	rcall	.-8      	; 0x1ee8 <glcd_delay>
	rcall	glcd_delay
    1ef0:	fb df       	rcall	.-10     	; 0x1ee8 <glcd_delay>
	rcall	glcd_delay
    1ef2:	fa df       	rcall	.-12     	; 0x1ee8 <glcd_delay>
	ret
    1ef4:	08 95       	ret

00001ef6 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1ef6:	cf 93       	push	r28

00001ef8 <master_loop>:

master_loop:
	cbi 	BIND		//	2
    1ef8:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1efa:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1efc:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <VarDelay>
	sbi		BIND		//	2
    1f00:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1f02:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1f04:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <VarDelay>
	dec		r24
    1f08:	8a 95       	dec	r24
	brne	master_loop	//  2 1
    1f0a:	b1 f7       	brne	.-20     	; 0x1ef8 <master_loop>

	pop		YL			//	  1
    1f0c:	cf 91       	pop	r28
	ret					//	  4 
    1f0e:	08 95       	ret

00001f10 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1f10:	00 c0       	rjmp	.+0      	; 0x1f12 <VarDelay+0x2>
	rjmp .+0			// 2
    1f12:	00 c0       	rjmp	.+0      	; 0x1f14 <VarDelay+0x4>
	rjmp .+0			// 2
    1f14:	00 c0       	rjmp	.+0      	; 0x1f16 <VarDelay+0x6>
	rjmp .+0			// 2
    1f16:	00 c0       	rjmp	.+0      	; 0x1f18 <VarDelay+0x8>
	rjmp .+0			// 2
    1f18:	00 c0       	rjmp	.+0      	; 0x1f1a <VarDelay+0xa>
	rjmp .+0			// 2
    1f1a:	00 c0       	rjmp	.+0      	; 0x1f1c <VarDelay+0xc>
	rjmp .+0			// 2
    1f1c:	00 c0       	rjmp	.+0      	; 0x1f1e <VarDelay+0xe>
	rjmp .+0			// 2
    1f1e:	00 c0       	rjmp	.+0      	; 0x1f20 <VarDelay+0x10>
	nop					// 1
    1f20:	00 00       	nop
	dec 	YL			// 1
    1f22:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1f24:	a9 f7       	brne	.-22     	; 0x1f10 <VarDelay>
	ret					//   4 
    1f26:	08 95       	ret

00001f28 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1f28:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1f2a:	ef 93       	push	r30
	push	ZH			// 2
    1f2c:	ff 93       	push	r31
	push	XL			// 2
    1f2e:	af 93       	push	r26
	push	XH			// 2
    1f30:	bf 93       	push	r27
	push	YL			// 2
    1f32:	cf 93       	push	r28
	push	YH			// 2
    1f34:	df 93       	push	r29
	push	16			// 2
    1f36:	0f 93       	push	r16
	push	17			// 2
    1f38:	1f 93       	push	r17
	push	18			// 2
    1f3a:	2f 93       	push	r18
	push	19			// 2
    1f3c:	3f 93       	push	r19
	push	20			// 2
    1f3e:	4f 93       	push	r20
	push	21			// 2
    1f40:	5f 93       	push	r21
	push	22			// 2
    1f42:	6f 93       	push	r22
	push	23			// 2
    1f44:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1f46:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1f48:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1f4a:	8f 93       	push	r24
	push	25			// 2
    1f4c:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1f4e:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1f50:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1f52:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1f54:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1f56:	af 93       	push	r26
	push	XH 			// 2
    1f58:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1f5a:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1f5c:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1f5e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1f60:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1f62:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1f64:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1f66:	af 93       	push	r26
	push	XH 		
    1f68:	bf 93       	push	r27
	andi	XL,	0x07
    1f6a:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1f6c:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1f6e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1f70:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1f72:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1f74:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1f76:	af 93       	push	r26
	push	XH 		
    1f78:	bf 93       	push	r27
	andi	XL,	0x07
    1f7a:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1f7c:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1f7e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1f80:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1f82:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1f84:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1f86:	af 93       	push	r26
	push	XH 	
    1f88:	bf 93       	push	r27
	andi	XL,	0x07
    1f8a:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1f8c:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1f8e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1f90:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1f92:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1f94:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1f96:	af 93       	push	r26
	push	XH 	
    1f98:	bf 93       	push	r27
	andi	XL,	0x07
    1f9a:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1f9c:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1f9e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1fa0:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1fa2:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1fa4:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1fa6:	af 93       	push	r26
	push	XH 	
    1fa8:	bf 93       	push	r27
	andi	XL,	0x07
    1faa:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1fac:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1fae:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1fb0:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1fb2:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1fb4:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1fb6:	af 93       	push	r26
	push	XH 
    1fb8:	bf 93       	push	r27
	andi	XL,	0x07
    1fba:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1fbc:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1fbe:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1fc0:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1fc2:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1fc4:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1fc6:	af 93       	push	r26
	push	XH 
    1fc8:	bf 93       	push	r27
	andi	XL,	0x07
    1fca:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1fcc:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1fce:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1fd0:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1fd4:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1fd6:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1fd8:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M2
	mov		r25,r22
    1fdc:	96 2f       	mov	r25, r22
	call	DelayHigh
    1fde:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1fe2:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1fe4:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1fe6:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M3
	mov		r25,r21
    1fea:	95 2f       	mov	r25, r21
	call	DelayHigh
    1fec:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1ff0:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1ff2:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1ff4:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M4
	mov		r25,r20
    1ff8:	94 2f       	mov	r25, r20
	call	DelayHigh
    1ffa:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1ffe:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    2000:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    2002:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M5
	mov		r25,r19
    2006:	93 2f       	mov	r25, r19
	call	DelayHigh
    2008:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    200c:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    200e:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    2010:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M6
	mov		r25,r18
    2014:	92 2f       	mov	r25, r18
	call	DelayHigh
    2016:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    201a:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    201c:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    201e:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M7
	mov		r25,r17
    2022:	91 2f       	mov	r25, r17
	call	DelayHigh
    2024:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    2028:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    202a:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    202c:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M8
	mov		r25,r16
    2030:	90 2f       	mov	r25, r16
	call	DelayHigh
    2032:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    2036:	f7 fc       	sbrc	r15, 7
	sbi 	M8
    2038:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    203a:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    203e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <pwm_delay>
	call    pwm_delay
    2042:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <pwm_delay>
	call    pwm_delay
    2046:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    204a:	bf 91       	pop	r27
	pop		XL
    204c:	af 91       	pop	r26
	call	shuffle_8
    204e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r16,XL
    2052:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    2054:	bf 91       	pop	r27
	pop		XL
    2056:	af 91       	pop	r26
	call	shuffle_8
    2058:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r17,XL
    205c:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    205e:	bf 91       	pop	r27
	pop		XL
    2060:	af 91       	pop	r26
	call	shuffle_8
    2062:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r18,XL
    2066:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    2068:	bf 91       	pop	r27
	pop		XL
    206a:	af 91       	pop	r26
	call	shuffle_8
    206c:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r19,XL
    2070:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    2072:	bf 91       	pop	r27
	pop		XL
    2074:	af 91       	pop	r26
	call	shuffle_8
    2076:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r20,XL
    207a:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    207c:	bf 91       	pop	r27
	pop		XL
    207e:	af 91       	pop	r26
	call	shuffle_8
    2080:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r21,XL
    2084:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    2086:	bf 91       	pop	r27
	pop		XL
    2088:	af 91       	pop	r26
	call	shuffle_8
    208a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r22,XL
    208e:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    2090:	bf 91       	pop	r27
	pop		XL
    2092:	af 91       	pop	r26
	call	shuffle_8
    2094:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r23,XL
    2098:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    209a:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    209c:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    209e:	00 24       	eor	r0, r0

000020a0 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    20a0:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    20a2:	19 f4       	brne	.+6      	; 0x20aa <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    20a4:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    20a6:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <jj1>

000020aa <j1>:
j1:
	rjmp 	.+0			// 2
    20aa:	00 c0       	rjmp	.+0      	; 0x20ac <j1+0x2>
	rjmp 	.+0			// 2
    20ac:	00 c0       	rjmp	.+0      	; 0x20ae <jj1>

000020ae <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    20ae:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    20b0:	19 f4       	brne	.+6      	; 0x20b8 <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    20b2:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    20b4:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <jj2>

000020b8 <j2>:
j2:
	rjmp	.+0
    20b8:	00 c0       	rjmp	.+0      	; 0x20ba <j2+0x2>
	rjmp	.+0
    20ba:	00 c0       	rjmp	.+0      	; 0x20bc <jj2>

000020bc <jj2>:
jj2:
	subi	r21,1
    20bc:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    20be:	19 f4       	brne	.+6      	; 0x20c6 <j3>
	cbi 	M3
    20c0:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    20c2:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <jj3>

000020c6 <j3>:
j3:
	rjmp	.+0
    20c6:	00 c0       	rjmp	.+0      	; 0x20c8 <j3+0x2>
	rjmp	.+0
    20c8:	00 c0       	rjmp	.+0      	; 0x20ca <jj3>

000020ca <jj3>:
jj3:
	subi 	r20,1
    20ca:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    20cc:	19 f4       	brne	.+6      	; 0x20d4 <j4>
	cbi 	M4
    20ce:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    20d0:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <jj4>

000020d4 <j4>:
j4:
	rjmp 	.+0
    20d4:	00 c0       	rjmp	.+0      	; 0x20d6 <j4+0x2>
	rjmp 	.+0
    20d6:	00 c0       	rjmp	.+0      	; 0x20d8 <jj4>

000020d8 <jj4>:
jj4:
	subi	r19,1
    20d8:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    20da:	19 f4       	brne	.+6      	; 0x20e2 <j5>
	cbi 	M5
    20dc:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    20de:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <jj5>

000020e2 <j5>:
j5:
	rjmp 	.+0
    20e2:	00 c0       	rjmp	.+0      	; 0x20e4 <j5+0x2>
	rjmp 	.+0
    20e4:	00 c0       	rjmp	.+0      	; 0x20e6 <jj5>

000020e6 <jj5>:
jj5:
	subi	r18,1
    20e6:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    20e8:	19 f4       	brne	.+6      	; 0x20f0 <j6>
	cbi 	M6
    20ea:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    20ec:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <jj6>

000020f0 <j6>:
j6:
	rjmp 	.+0
    20f0:	00 c0       	rjmp	.+0      	; 0x20f2 <j6+0x2>
	rjmp	.+0
    20f2:	00 c0       	rjmp	.+0      	; 0x20f4 <jj6>

000020f4 <jj6>:
jj6:
	subi	r17,1
    20f4:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    20f6:	19 f4       	brne	.+6      	; 0x20fe <j7>
	cbi 	M7
    20f8:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    20fa:	0c 94 81 10 	jmp	0x2102	; 0x2102 <jj7>

000020fe <j7>:
j7:
	rjmp 	.+0
    20fe:	00 c0       	rjmp	.+0      	; 0x2100 <j7+0x2>
	rjmp 	.+0
    2100:	00 c0       	rjmp	.+0      	; 0x2102 <jj7>

00002102 <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    2102:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    2104:	19 f4       	brne	.+6      	; 0x210c <j8>
	cbi 	M8
    2106:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    2108:	0c 94 88 10 	jmp	0x2110	; 0x2110 <jj8>

0000210c <j8>:
j8:
	rjmp 	.+0
    210c:	00 c0       	rjmp	.+0      	; 0x210e <j8+0x2>
	rjmp 	.+0
    210e:	00 c0       	rjmp	.+0      	; 0x2110 <jj8>

00002110 <jj8>:
jj8:
	call	pad_100_delay // (100)
    2110:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <pad_100_delay>

	subi 	YL,1		// 1
    2114:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    2116:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    2118:	11 f0       	breq	.+4      	; 0x211e <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    211a:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <nloop>

0000211e <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    211e:	9f 91       	pop	r25
	pop		24			// 		2
    2120:	8f 91       	pop	r24
	pop		23			//		2
    2122:	7f 91       	pop	r23
	pop		22			//		2
    2124:	6f 91       	pop	r22
	pop		21			//		2
    2126:	5f 91       	pop	r21
	pop		20			//		2
    2128:	4f 91       	pop	r20
	pop		19			//		2
    212a:	3f 91       	pop	r19
	pop		18			//		2
    212c:	2f 91       	pop	r18
	pop		17			//		2
    212e:	1f 91       	pop	r17
	pop		16			//		2
    2130:	0f 91       	pop	r16
	pop		YH			//		2
    2132:	df 91       	pop	r29
	pop		YL			//		2
    2134:	cf 91       	pop	r28
	pop		XH			//		2
    2136:	bf 91       	pop	r27
	pop		XL			//		2
    2138:	af 91       	pop	r26
	pop		ZH			// 		2
    213a:	ff 91       	pop	r31
	pop		ZL			//		2
    213c:	ef 91       	pop	r30

	ret					//		4
    213e:	08 95       	ret

00002140 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    2140:	0f 93       	push	r16
	push	17
    2142:	1f 93       	push	r17
	push	18
    2144:	2f 93       	push	r18

	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    2146:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    2148:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    214a:	00 24       	eor	r0, r0

0000214c <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    214c:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    214e:	71 f0       	breq	.+28     	; 0x216c <in1>
	cpi		r24,0x01	; 1
    2150:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    2152:	79 f0       	breq	.+30     	; 0x2172 <in2>
	cpi		r24,0x02	; 2
    2154:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    2156:	81 f0       	breq	.+32     	; 0x2178 <in3>
	cpi		r24,0x03	; 3
    2158:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    215a:	89 f0       	breq	.+34     	; 0x217e <in4>
	cpi		r24,0x04	; 4
    215c:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    215e:	91 f0       	breq	.+36     	; 0x2184 <in5>
	cpi		r24,0x05	; 5
    2160:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    2162:	99 f0       	breq	.+38     	; 0x218a <in6>
	cpi		r24,0x06	; 6
    2164:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    2166:	a1 f0       	breq	.+40     	; 0x2190 <in7>
	cpi		r24,0x07	; 7
    2168:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    216a:	a9 f0       	breq	.+42     	; 0x2196 <in8>

0000216c <in1>:

in1:sbi 	M1			// Set output high
    216c:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    216e:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

00002172 <in2>:
in2:sbi 	M2
    2172:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    2174:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

00002178 <in3>:
in3:sbi 	M3	
    2178:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    217a:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

0000217e <in4>:
in4:sbi 	M4
    217e:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    2180:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

00002184 <in5>:
in5:sbi 	M5
    2184:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    2186:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

0000218a <in6>:
in6:sbi 	M6
    218a:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    218c:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

00002190 <in7>:
in7:sbi 	M7
    2190:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    2192:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

00002196 <in8>:
in8:sbi 	M8
    2196:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    2198:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

0000219c <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    219c:	00 c0       	rjmp	.+0      	; 0x219e <loopin+0x2>
	rjmp .+0			// 2
    219e:	00 c0       	rjmp	.+0      	; 0x21a0 <loopin+0x4>
	rjmp .+0			// 2
    21a0:	00 c0       	rjmp	.+0      	; 0x21a2 <loopin+0x6>
	rjmp .+0			// 2
    21a2:	00 c0       	rjmp	.+0      	; 0x21a4 <loopin+0x8>
	rjmp .+0			// 2
    21a4:	00 c0       	rjmp	.+0      	; 0x21a6 <loopin+0xa>
	rjmp .+0			// 2
    21a6:	00 c0       	rjmp	.+0      	; 0x21a8 <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    21a8:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    21aa:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    21ac:	19 f4       	brne	.+6      	; 0x21b4 <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    21ae:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    21b0:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    21b2:	22 b9       	out	0x02, r18	; 2

000021b4 <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    21b4:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    21b6:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    21b8:	89 f7       	brne	.-30     	; 0x219c <loopin>

	pop		18
    21ba:	2f 91       	pop	r18
	pop		17			// Restore regs
    21bc:	1f 91       	pop	r17
	pop		16
    21be:	0f 91       	pop	r16
	ret	
    21c0:	08 95       	ret

000021c2 <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    21c2:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    21c4:	05 e6       	ldi	r16, 0x65	; 101

000021c6 <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    21c6:	00 c0       	rjmp	.+0      	; 0x21c8 <pwm_loop+0x2>
	rjmp .+0			// 2
    21c8:	00 c0       	rjmp	.+0      	; 0x21ca <pwm_loop+0x4>
	rjmp .+0			// 2
    21ca:	00 c0       	rjmp	.+0      	; 0x21cc <pwm_loop+0x6>
	subi	r16,1		// 1
    21cc:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    21ce:	d9 f7       	brne	.-10     	; 0x21c6 <pwm_loop>

000021d0 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    21d0:	0f 91       	pop	r16
	ret					//    4 to return
    21d2:	08 95       	ret

000021d4 <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    21d4:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    21d6:	09 e0       	ldi	r16, 0x09	; 9

000021d8 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    21d8:	00 c0       	rjmp	.+0      	; 0x21da <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    21da:	00 c0       	rjmp	.+0      	; 0x21dc <pad_100+0x4>
	rjmp .+0			// 2
    21dc:	00 c0       	rjmp	.+0      	; 0x21de <pad_100+0x6>

	subi 	16,1		// 1
    21de:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    21e0:	d9 f7       	brne	.-10     	; 0x21d8 <pad_100>

	nop					// 		1		Trim to precisely the right value
    21e2:	00 00       	nop
	rjmp .+0			// 		2
    21e4:	00 c0       	rjmp	.+0      	; 0x21e6 <pad_100+0xe>
	rjmp .+0			// 		2
    21e6:	00 c0       	rjmp	.+0      	; 0x21e8 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    21e8:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    21ea:	08 95       	ret

000021ec <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    21ec:	00 c0       	rjmp	.+0      	; 0x21ee <us_delay+0x2>
	rjmp .+0			// 2
    21ee:	00 c0       	rjmp	.+0      	; 0x21f0 <us_delay+0x4>
	rjmp .+0			// 2
    21f0:	00 c0       	rjmp	.+0      	; 0x21f2 <us_delay+0x6>
	rjmp .+0			// 2
    21f2:	00 c0       	rjmp	.+0      	; 0x21f4 <us_delay+0x8>
	ret					// 4 (16 cycles)
    21f4:	08 95       	ret

000021f6 <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    21f6:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    21f8:	a7 95       	ror	r26
	lsr		XH			// 1
    21fa:	b6 95       	lsr	r27
	ror		XL			// 1
    21fc:	a7 95       	ror	r26
	lsr		XH			// 1
    21fe:	b6 95       	lsr	r27
	ror		XL			// 1
    2200:	a7 95       	ror	r26
	ret					// 4
    2202:	08 95       	ret

00002204 <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    2204:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    2206:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    2208:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    220a:	31 f0       	breq	.+12     	; 0x2218 <LoopHighOut1>

0000220c <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    220c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <us_delay>
	dec 	YL			// 		1	1
    2210:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    2212:	09 f0       	breq	.+2      	; 0x2216 <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    2214:	fb cf       	rjmp	.-10     	; 0x220c <LoopHigh>

00002216 <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    2216:	00 c0       	rjmp	.+0      	; 0x2218 <LoopHighOut1>

00002218 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    2218:	00 00       	nop
    ret					// 4	4	4
    221a:	08 95       	ret

0000221c <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    221c:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    221e:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    2220:	31 f0       	breq	.+12     	; 0x222e <LoopLowOut1>

00002222 <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    2222:	0e 94 f6 10 	call	0x21ec	; 0x21ec <us_delay>
	dec 	YL			//		1	1
    2226:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    2228:	09 f0       	breq	.+2      	; 0x222c <LoopLowOut2>
	rjmp	LoopLow		//			2
    222a:	fb cf       	rjmp	.-10     	; 0x2222 <LoopLow>

0000222c <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    222c:	00 c0       	rjmp	.+0      	; 0x222e <LoopLowOut1>

0000222e <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    222e:	08 95       	ret

00002230 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	2c 97       	sbiw	r28, 0x0c	; 12
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    2244:	26 e0       	ldi	r18, 0x06	; 6
    2246:	ae 01       	movw	r20, r28
    2248:	4f 5f       	subi	r20, 0xFF	; 255
    224a:	5f 4f       	sbci	r21, 0xFF	; 255
    224c:	6b e3       	ldi	r22, 0x3B	; 59
    224e:	80 ed       	ldi	r24, 0xD0	; 208
    2250:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	98 2f       	mov	r25, r24
    225a:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    225c:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    225e:	82 0f       	add	r24, r18
    2260:	91 1d       	adc	r25, r1
    2262:	36 e0       	ldi	r19, 0x06	; 6
    2264:	95 95       	asr	r25
    2266:	87 95       	ror	r24
    2268:	3a 95       	dec	r19
    226a:	e1 f7       	brne	.-8      	; 0x2264 <get_raw_accs+0x34>
    226c:	98 87       	std	Y+8, r25	; 0x08
    226e:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	98 2f       	mov	r25, r24
    2276:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    2278:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    227a:	82 0f       	add	r24, r18
    227c:	91 1d       	adc	r25, r1
    227e:	56 e0       	ldi	r21, 0x06	; 6
    2280:	95 95       	asr	r25
    2282:	87 95       	ror	r24
    2284:	5a 95       	dec	r21
    2286:	e1 f7       	brne	.-8      	; 0x2280 <get_raw_accs+0x50>
    2288:	91 95       	neg	r25
    228a:	81 95       	neg	r24
    228c:	91 09       	sbc	r25, r1
    228e:	9a 87       	std	Y+10, r25	; 0x0a
    2290:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	98 2f       	mov	r25, r24
    2298:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    229a:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    229c:	82 0f       	add	r24, r18
    229e:	91 1d       	adc	r25, r1
    22a0:	76 e0       	ldi	r23, 0x06	; 6
    22a2:	95 95       	asr	r25
    22a4:	87 95       	ror	r24
    22a6:	7a 95       	dec	r23
    22a8:	e1 f7       	brne	.-8      	; 0x22a2 <get_raw_accs+0x72>
    22aa:	9c 87       	std	Y+12, r25	; 0x0c
    22ac:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    22ae:	20 91 55 06 	lds	r18, 0x0655
    22b2:	ae e3       	ldi	r26, 0x3E	; 62
    22b4:	b5 e0       	ldi	r27, 0x05	; 5
    22b6:	43 e0       	ldi	r20, 0x03	; 3
    22b8:	24 02       	muls	r18, r20
    22ba:	90 01       	movw	r18, r0
    22bc:	11 24       	eor	r1, r1
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	22 52       	subi	r18, 0x22	; 34
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	f9 01       	movw	r30, r18
    22c8:	e8 0f       	add	r30, r24
    22ca:	f9 1f       	adc	r31, r25
    22cc:	e4 91       	lpm	r30, Z
    22ce:	ee 0f       	add	r30, r30
    22d0:	ff 0b       	sbc	r31, r31
    22d2:	41 e0       	ldi	r20, 0x01	; 1
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	4c 0f       	add	r20, r28
    22d8:	5d 1f       	adc	r21, r29
    22da:	e4 0f       	add	r30, r20
    22dc:	f5 1f       	adc	r31, r21
    22de:	46 81       	ldd	r20, Z+6	; 0x06
    22e0:	57 81       	ldd	r21, Z+7	; 0x07
    22e2:	4d 93       	st	X+, r20
    22e4:	5d 93       	st	X+, r21
    22e6:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    22e8:	83 30       	cpi	r24, 0x03	; 3
    22ea:	91 05       	cpc	r25, r1
    22ec:	61 f7       	brne	.-40     	; 0x22c6 <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    22ee:	2c 96       	adiw	r28, 0x0c	; 12
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	08 95       	ret

00002300 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    2306:	0e 94 18 11 	call	0x2230	; 0x2230 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    230a:	80 91 d4 07 	lds	r24, 0x07D4
    230e:	80 fd       	sbrc	r24, 0
    2310:	05 c0       	rjmp	.+10     	; 0x231c <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    2312:	10 92 bc 07 	sts	0x07BC, r1
    2316:	10 92 bb 07 	sts	0x07BB, r1
    231a:	0e c0       	rjmp	.+28     	; 0x2338 <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    231c:	80 91 bd 07 	lds	r24, 0x07BD
    2320:	90 91 be 07 	lds	r25, 0x07BE
    2324:	20 91 c1 07 	lds	r18, 0x07C1
    2328:	30 91 c2 07 	lds	r19, 0x07C2
    232c:	82 1b       	sub	r24, r18
    232e:	93 0b       	sbc	r25, r19
    2330:	90 93 bc 07 	sts	0x07BC, r25
    2334:	80 93 bb 07 	sts	0x07BB, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    2338:	20 91 55 06 	lds	r18, 0x0655
    233c:	c7 eb       	ldi	r28, 0xB7	; 183
    233e:	d7 e0       	ldi	r29, 0x07	; 7
    2340:	ae e3       	ldi	r26, 0x3E	; 62
    2342:	b5 e0       	ldi	r27, 0x05	; 5
    2344:	83 e0       	ldi	r24, 0x03	; 3
    2346:	28 02       	muls	r18, r24
    2348:	90 01       	movw	r18, r0
    234a:	11 24       	eor	r1, r1
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	24 53       	subi	r18, 0x34	; 52
    2352:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    2354:	69 91       	ld	r22, Y+
    2356:	79 91       	ld	r23, Y+
    2358:	f9 01       	movw	r30, r18
    235a:	e8 0f       	add	r30, r24
    235c:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    235e:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    2360:	4d 91       	ld	r20, X+
    2362:	5c 91       	ld	r21, X
    2364:	11 97       	sbiw	r26, 0x01	; 1
    2366:	46 1b       	sub	r20, r22
    2368:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    236a:	14 03       	mulsu	r17, r20
    236c:	b0 01       	movw	r22, r0
    236e:	15 9f       	mul	r17, r21
    2370:	70 0d       	add	r23, r0
    2372:	11 24       	eor	r1, r1
    2374:	6d 93       	st	X+, r22
    2376:	7d 93       	st	X+, r23
    2378:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    237a:	83 30       	cpi	r24, 0x03	; 3
    237c:	91 05       	cpc	r25, r1
    237e:	51 f7       	brne	.-44     	; 0x2354 <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    2380:	60 91 bd 07 	lds	r22, 0x07BD
    2384:	70 91 be 07 	lds	r23, 0x07BE
    2388:	80 91 bb 07 	lds	r24, 0x07BB
    238c:	90 91 bc 07 	lds	r25, 0x07BC
    2390:	68 1b       	sub	r22, r24
    2392:	79 0b       	sbc	r23, r25
    2394:	88 27       	eor	r24, r24
    2396:	77 fd       	sbrc	r23, 7
    2398:	80 95       	com	r24
    239a:	98 2f       	mov	r25, r24
    239c:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    23a0:	20 91 bd 05 	lds	r18, 0x05BD
    23a4:	30 91 be 05 	lds	r19, 0x05BE
    23a8:	40 91 bf 05 	lds	r20, 0x05BF
    23ac:	50 91 c0 05 	lds	r21, 0x05C0
    23b0:	0e 94 71 4e 	call	0x9ce2	; 0x9ce2 <__addsf3>
    23b4:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
    23b8:	70 93 17 05 	sts	0x0517, r23
    23bc:	60 93 16 05 	sts	0x0516, r22
}
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	1f 91       	pop	r17
    23c6:	08 95       	ret

000023c8 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    23c8:	1f 93       	push	r17
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <CalibrateAcc+0x8>
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <CalibrateAcc+0xa>
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <CalibrateAcc+0xc>
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    23d8:	1a 82       	std	Y+2, r1	; 0x02
    23da:	19 82       	std	Y+1, r1	; 0x01
    23dc:	1c 82       	std	Y+4, r1	; 0x04
    23de:	1b 82       	std	Y+3, r1	; 0x03
    23e0:	1e 82       	std	Y+6, r1	; 0x06
    23e2:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    23e4:	81 11       	cpse	r24, r1
    23e6:	72 c0       	rjmp	.+228    	; 0x24cc <CalibrateAcc+0x104>
    23e8:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    23ea:	0e 94 18 11 	call	0x2230	; 0x2230 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	20 91 3e 05 	lds	r18, 0x053E
    23f6:	30 91 3f 05 	lds	r19, 0x053F
    23fa:	82 0f       	add	r24, r18
    23fc:	93 1f       	adc	r25, r19
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	20 91 40 05 	lds	r18, 0x0540
    240a:	30 91 41 05 	lds	r19, 0x0541
    240e:	82 0f       	add	r24, r18
    2410:	93 1f       	adc	r25, r19
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	20 91 42 05 	lds	r18, 0x0542
    241e:	30 91 43 05 	lds	r19, 0x0543
    2422:	82 0f       	add	r24, r18
    2424:	93 1f       	adc	r25, r19
    2426:	9e 83       	std	Y+6, r25	; 0x06
    2428:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    242a:	8f e4       	ldi	r24, 0x4F	; 79
    242c:	93 ec       	ldi	r25, 0xC3	; 195
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <CalibrateAcc+0x66>
    2432:	00 c0       	rjmp	.+0      	; 0x2434 <CalibrateAcc+0x6c>
    2434:	00 00       	nop
    2436:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    2438:	c1 f6       	brne	.-80     	; 0x23ea <CalibrateAcc+0x22>
    243a:	fe 01       	movw	r30, r28
    243c:	31 96       	adiw	r30, 0x01	; 1
    243e:	9e 01       	movw	r18, r28
    2440:	29 5f       	subi	r18, 0xF9	; 249
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    2444:	80 81       	ld	r24, Z
    2446:	91 81       	ldd	r25, Z+1	; 0x01
    2448:	40 96       	adiw	r24, 0x10	; 16
    244a:	45 e0       	ldi	r20, 0x05	; 5
    244c:	95 95       	asr	r25
    244e:	87 95       	ror	r24
    2450:	4a 95       	dec	r20
    2452:	e1 f7       	brne	.-8      	; 0x244c <CalibrateAcc+0x84>
    2454:	81 93       	st	Z+, r24
    2456:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    2458:	e2 17       	cp	r30, r18
    245a:	f3 07       	cpc	r31, r19
    245c:	99 f7       	brne	.-26     	; 0x2444 <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	9a 81       	ldd	r25, Y+2	; 0x02
    2462:	90 93 b8 07 	sts	0x07B8, r25
    2466:	80 93 b7 07 	sts	0x07B7, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	90 93 ba 07 	sts	0x07BA, r25
    2472:	80 93 b9 07 	sts	0x07B9, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2476:	80 91 55 06 	lds	r24, 0x0655
    247a:	99 27       	eor	r25, r25
    247c:	87 fd       	sbrc	r24, 7
    247e:	90 95       	com	r25
    2480:	fc 01       	movw	r30, r24
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	e8 0f       	add	r30, r24
    2488:	f9 1f       	adc	r31, r25
    248a:	e2 53       	subi	r30, 0x32	; 50
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	44 91       	lpm	r20, Z
    2490:	2d 81       	ldd	r18, Y+5	; 0x05
    2492:	3e 81       	ldd	r19, Y+6	; 0x06
    2494:	42 03       	mulsu	r20, r18
    2496:	c0 01       	movw	r24, r0
    2498:	43 9f       	mul	r20, r19
    249a:	90 0d       	add	r25, r0
    249c:	11 24       	eor	r1, r1
    249e:	90 93 be 07 	sts	0x07BE, r25
    24a2:	80 93 bd 07 	sts	0x07BD, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    24a6:	80 91 d4 07 	lds	r24, 0x07D4
    24aa:	82 60       	ori	r24, 0x02	; 2
    24ac:	80 93 d4 07 	sts	0x07D4, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    24b0:	0e 94 be 19 	call	0x337c	; 0x337c <Save_Config_to_EEPROM>
		LED1 = 1;
    24b4:	2b 9a       	sbi	0x05, 3	; 5
    24b6:	9f e7       	ldi	r25, 0x7F	; 127
    24b8:	24 e8       	ldi	r18, 0x84	; 132
    24ba:	4e e1       	ldi	r20, 0x1E	; 30
    24bc:	91 50       	subi	r25, 0x01	; 1
    24be:	20 40       	sbci	r18, 0x00	; 0
    24c0:	40 40       	sbci	r20, 0x00	; 0
    24c2:	e1 f7       	brne	.-8      	; 0x24bc <CalibrateAcc+0xf4>
    24c4:	00 c0       	rjmp	.+0      	; 0x24c6 <CalibrateAcc+0xfe>
    24c6:	00 00       	nop
		_delay_ms(500);
		LED1 = 0;
    24c8:	2b 98       	cbi	0x05, 3	; 5
    24ca:	76 c0       	rjmp	.+236    	; 0x25b8 <CalibrateAcc+0x1f0>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    24cc:	80 91 d4 07 	lds	r24, 0x07D4
    24d0:	81 ff       	sbrs	r24, 1
    24d2:	72 c0       	rjmp	.+228    	; 0x25b8 <CalibrateAcc+0x1f0>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    24d4:	10 92 c0 07 	sts	0x07C0, r1
    24d8:	10 92 bf 07 	sts	0x07BF, r1
    24dc:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    24de:	0e 94 18 11 	call	0x2230	; 0x2230 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    24e2:	80 91 bf 07 	lds	r24, 0x07BF
    24e6:	90 91 c0 07 	lds	r25, 0x07C0
    24ea:	20 91 42 05 	lds	r18, 0x0542
    24ee:	30 91 43 05 	lds	r19, 0x0543
    24f2:	82 0f       	add	r24, r18
    24f4:	93 1f       	adc	r25, r19
    24f6:	90 93 c0 07 	sts	0x07C0, r25
    24fa:	80 93 bf 07 	sts	0x07BF, r24
    24fe:	8f e4       	ldi	r24, 0x4F	; 79
    2500:	93 ec       	ldi	r25, 0xC3	; 195
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <CalibrateAcc+0x13a>
    2506:	00 c0       	rjmp	.+0      	; 0x2508 <CalibrateAcc+0x140>
    2508:	00 00       	nop
    250a:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    250c:	41 f7       	brne	.-48     	; 0x24de <CalibrateAcc+0x116>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    250e:	80 91 55 06 	lds	r24, 0x0655
    2512:	99 27       	eor	r25, r25
    2514:	87 fd       	sbrc	r24, 7
    2516:	90 95       	com	r25
    2518:	fc 01       	movw	r30, r24
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	e8 0f       	add	r30, r24
    2520:	f9 1f       	adc	r31, r25
    2522:	e2 53       	subi	r30, 0x32	; 50
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    2528:	20 91 bf 07 	lds	r18, 0x07BF
    252c:	30 91 c0 07 	lds	r19, 0x07C0
    2530:	20 5f       	subi	r18, 0xF0	; 240
    2532:	3f 4f       	sbci	r19, 0xFF	; 255
    2534:	b5 e0       	ldi	r27, 0x05	; 5
    2536:	35 95       	asr	r19
    2538:	27 95       	ror	r18
    253a:	ba 95       	dec	r27
    253c:	e1 f7       	brne	.-8      	; 0x2536 <CalibrateAcc+0x16e>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    253e:	42 03       	mulsu	r20, r18
    2540:	c0 01       	movw	r24, r0
    2542:	43 9f       	mul	r20, r19
    2544:	90 0d       	add	r25, r0
    2546:	11 24       	eor	r1, r1
    2548:	90 93 c0 07 	sts	0x07C0, r25
    254c:	80 93 bf 07 	sts	0x07BF, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    2550:	97 ff       	sbrs	r25, 7
    2552:	32 c0       	rjmp	.+100    	; 0x25b8 <CalibrateAcc+0x1f0>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    2554:	20 91 bd 07 	lds	r18, 0x07BD
    2558:	30 91 be 07 	lds	r19, 0x07BE
    255c:	a9 01       	movw	r20, r18
    255e:	48 1b       	sub	r20, r24
    2560:	59 0b       	sbc	r21, r25
    2562:	ca 01       	movw	r24, r20
    2564:	95 95       	asr	r25
    2566:	87 95       	ror	r24
    2568:	90 93 c2 07 	sts	0x07C2, r25
    256c:	80 93 c1 07 	sts	0x07C1, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    2570:	28 1b       	sub	r18, r24
    2572:	39 0b       	sbc	r19, r25
    2574:	30 93 bc 07 	sts	0x07BC, r19
    2578:	20 93 bb 07 	sts	0x07BB, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    257c:	80 91 d4 07 	lds	r24, 0x07D4
    2580:	81 60       	ori	r24, 0x01	; 1
    2582:	80 93 d4 07 	sts	0x07D4, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    2586:	0e 94 be 19 	call	0x337c	; 0x337c <Save_Config_to_EEPROM>
				LED1 = 1;
    258a:	2b 9a       	sbi	0x05, 3	; 5
    258c:	5f e7       	ldi	r21, 0x7F	; 127
    258e:	84 e8       	ldi	r24, 0x84	; 132
    2590:	9e e1       	ldi	r25, 0x1E	; 30
    2592:	51 50       	subi	r21, 0x01	; 1
    2594:	80 40       	sbci	r24, 0x00	; 0
    2596:	90 40       	sbci	r25, 0x00	; 0
    2598:	e1 f7       	brne	.-8      	; 0x2592 <CalibrateAcc+0x1ca>
    259a:	00 c0       	rjmp	.+0      	; 0x259c <CalibrateAcc+0x1d4>
    259c:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    259e:	2b 98       	cbi	0x05, 3	; 5
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    25a0:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
	}
}
    25a2:	26 96       	adiw	r28, 0x06	; 6
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	1f 91       	pop	r17
				LED1 = 1;
				_delay_ms(500);
				LED1 = 0;
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    25b4:	0c 94 2c 38 	jmp	0x7058	; 0x7058 <menu_beep>
			}
		}
	}
}
    25b8:	26 96       	adiw	r28, 0x06	; 6
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	08 95       	ret

000025cc <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	6b e6       	ldi	r22, 0x6B	; 107
    25d0:	80 ed       	ldi	r24, 0xD0	; 208
    25d2:	0e 94 c1 2a 	call	0x5582	; 0x5582 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    25d6:	48 e0       	ldi	r20, 0x08	; 8
    25d8:	6c e1       	ldi	r22, 0x1C	; 28
    25da:	80 ed       	ldi	r24, 0xD0	; 208
    25dc:	0c 94 c1 2a 	jmp	0x5582	; 0x5582 <writeI2Cbyte>

000025e0 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    25e0:	8f ef       	ldi	r24, 0xFF	; 255
    25e2:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    25e6:	10 92 7b 00 	sts	0x007B, r1
    25ea:	08 95       	ret

000025ec <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    25ec:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    25f0:	86 ec       	ldi	r24, 0xC6	; 198
    25f2:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    25f6:	80 91 7a 00 	lds	r24, 0x007A
    25fa:	86 fd       	sbrc	r24, 6
    25fc:	fc cf       	rjmp	.-8      	; 0x25f6 <read_adc+0xa>
}
    25fe:	08 95       	ret

00002600 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    2600:	cf 92       	push	r12
    2602:	df 92       	push	r13
    2604:	ef 92       	push	r14
    2606:	0f 93       	push	r16
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    260c:	cb e0       	ldi	r28, 0x0B	; 11
    260e:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    2610:	1f 9b       	sbis	0x03, 7	; 3
    2612:	7f c0       	rjmp	.+254    	; 0x2712 <Display_balance+0x112>
	{
		// Read accs
		ReadAcc();
    2614:	0e 94 80 11 	call	0x2300	; 0x2300 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	cb 01       	movw	r24, r22
    261e:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <imu_update>
    2622:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    2624:	20 97       	sbiw	r28, 0x00	; 0
    2626:	a1 f7       	brne	.-24     	; 0x2610 <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	52 e4       	ldi	r21, 0x42	; 66
    2630:	60 91 b9 05 	lds	r22, 0x05B9
    2634:	70 91 ba 05 	lds	r23, 0x05BA
    2638:	80 91 bb 05 	lds	r24, 0x05BB
    263c:	90 91 bc 05 	lds	r25, 0x05BC
    2640:	0e 94 71 4e 	call	0x9ce2	; 0x9ce2 <__addsf3>
    2644:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
    2648:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	52 e4       	ldi	r21, 0x42	; 66
    2652:	60 91 b5 05 	lds	r22, 0x05B5
    2656:	70 91 b6 05 	lds	r23, 0x05B6
    265a:	80 91 b7 05 	lds	r24, 0x05B7
    265e:	90 91 b8 05 	lds	r25, 0x05B8
    2662:	0e 94 71 4e 	call	0x9ce2	; 0x9ce2 <__addsf3>
    2666:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
    266a:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    266c:	d7 fd       	sbrc	r29, 7
    266e:	06 c0       	rjmp	.+12     	; 0x267c <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    2670:	c1 34       	cpi	r28, 0x41	; 65
    2672:	d1 05       	cpc	r29, r1
    2674:	2c f0       	brlt	.+10     	; 0x2680 <Display_balance+0x80>
    2676:	c0 e4       	ldi	r28, 0x40	; 64
    2678:	d0 e0       	ldi	r29, 0x00	; 0
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    267c:	c0 e0       	ldi	r28, 0x00	; 0
    267e:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    2680:	d7 fc       	sbrc	r13, 7
    2682:	08 c0       	rjmp	.+16     	; 0x2694 <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    2684:	81 e8       	ldi	r24, 0x81	; 129
    2686:	c8 16       	cp	r12, r24
    2688:	d1 04       	cpc	r13, r1
    268a:	34 f0       	brlt	.+12     	; 0x2698 <Display_balance+0x98>
    268c:	80 e8       	ldi	r24, 0x80	; 128
    268e:	c8 2e       	mov	r12, r24
    2690:	d1 2c       	mov	r13, r1
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    2694:	c1 2c       	mov	r12, r1
    2696:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    2698:	27 e3       	ldi	r18, 0x37	; 55
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	42 e0       	ldi	r20, 0x02	; 2
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	69 e0       	ldi	r22, 0x09	; 9
    26a2:	71 e0       	ldi	r23, 0x01	; 1
    26a4:	8c e0       	ldi	r24, 0x0C	; 12
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    26ac:	ee 24       	eor	r14, r14
    26ae:	e3 94       	inc	r14
    26b0:	00 e4       	ldi	r16, 0x40	; 64
    26b2:	20 e8       	ldi	r18, 0x80	; 128
    26b4:	40 e0       	ldi	r20, 0x00	; 0
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	0e 94 80 27 	call	0x4f00	; 0x4f00 <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    26c0:	05 e1       	ldi	r16, 0x15	; 21
    26c2:	25 e1       	ldi	r18, 0x15	; 21
    26c4:	46 e1       	ldi	r20, 0x16	; 22
    26c6:	66 e3       	ldi	r22, 0x36	; 54
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	91 e0       	ldi	r25, 0x01	; 1
    26cc:	0e 94 80 27 	call	0x4f00	; 0x4f00 <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    26d0:	08 e3       	ldi	r16, 0x38	; 56
    26d2:	20 e4       	ldi	r18, 0x40	; 64
    26d4:	48 e0       	ldi	r20, 0x08	; 8
    26d6:	60 e4       	ldi	r22, 0x40	; 64
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	91 e0       	ldi	r25, 0x01	; 1
    26dc:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    26e0:	00 e2       	ldi	r16, 0x20	; 32
    26e2:	20 e6       	ldi	r18, 0x60	; 96
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	60 e2       	ldi	r22, 0x20	; 32
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	91 e0       	ldi	r25, 0x01	; 1
    26ec:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    26f0:	01 e0       	ldi	r16, 0x01	; 1
    26f2:	28 e0       	ldi	r18, 0x08	; 8
    26f4:	4c 2f       	mov	r20, r28
    26f6:	6c 2d       	mov	r22, r12
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	91 e0       	ldi	r25, 0x01	; 1
    26fc:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
			clear_buffer(buffer);
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	91 e0       	ldi	r25, 0x01	; 1
    270c:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
    2710:	7d cf       	rjmp	.-262    	; 0x260c <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	0f 91       	pop	r16
    2718:	ef 90       	pop	r14
    271a:	df 90       	pop	r13
    271c:	cf 90       	pop	r12
    271e:	08 95       	ret

00002720 <add_log>:
// Code
//************************************************************

void add_log(uint8_t error)
{
	Config.Log[Config.log_pointer] = error;
    2720:	90 91 d7 07 	lds	r25, 0x07D7
    2724:	e9 2f       	mov	r30, r25
    2726:	ff 27       	eor	r31, r31
    2728:	e7 fd       	sbrc	r30, 7
    272a:	f0 95       	com	r31
    272c:	e8 52       	subi	r30, 0x28	; 40
    272e:	f8 4f       	sbci	r31, 0xF8	; 248
    2730:	80 83       	st	Z, r24
	Config.log_pointer++;
    2732:	9f 5f       	subi	r25, 0xFF	; 255
	
	if (Config.log_pointer >= (LOGLENGTH-1))
    2734:	93 31       	cpi	r25, 0x13	; 19
    2736:	1c f4       	brge	.+6      	; 0x273e <add_log+0x1e>
//************************************************************

void add_log(uint8_t error)
{
	Config.Log[Config.log_pointer] = error;
	Config.log_pointer++;
    2738:	90 93 d7 07 	sts	0x07D7, r25
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <add_log+0x24>
	
	if (Config.log_pointer >= (LOGLENGTH-1))
	{
		Config.log_pointer = (LOGLENGTH-1);
    273e:	83 e1       	ldi	r24, 0x13	; 19
    2740:	80 93 d7 07 	sts	0x07D7, r24
	}
	
	// Save log and log pointer
	Save_Config_to_EEPROM();
    2744:	0c 94 be 19 	jmp	0x337c	; 0x337c <Save_Config_to_EEPROM>

00002748 <menu_log>:
}

void menu_log(void)
{
    2748:	af 92       	push	r10
    274a:	bf 92       	push	r11
    274c:	cf 92       	push	r12
    274e:	df 92       	push	r13
    2750:	ef 92       	push	r14
    2752:	ff 92       	push	r15
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
	int8_t	log_start = 0;
    275c:	b1 2c       	mov	r11, r1
	while(BUTTON1 != 0)
	{
		if (BUTTON4 == 0)
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    275e:	98 ed       	ldi	r25, 0xD8	; 216
    2760:	c9 2e       	mov	r12, r25
    2762:	97 e0       	ldi	r25, 0x07	; 7
    2764:	d9 2e       	mov	r13, r25
    2766:	24 e1       	ldi	r18, 0x14	; 20
    2768:	a2 2e       	mov	r10, r18

void menu_log(void)
{
	int8_t	log_start = 0;
	
	while(BUTTON1 != 0)
    276a:	1f 9b       	sbis	0x03, 7	; 3
    276c:	4d c0       	rjmp	.+154    	; 0x2808 <menu_log+0xc0>
	{
		if (BUTTON4 == 0)
    276e:	1c 99       	sbic	0x03, 4	; 3
    2770:	09 c0       	rjmp	.+18     	; 0x2784 <menu_log+0x3c>
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    2772:	f6 01       	movw	r30, r12
    2774:	2a 2d       	mov	r18, r10
    2776:	11 92       	st	Z+, r1
    2778:	2a 95       	dec	r18
    277a:	e9 f7       	brne	.-6      	; 0x2776 <menu_log+0x2e>
			Config.log_pointer = 0;
    277c:	10 92 d7 07 	sts	0x07D7, r1

			// Save log and log pointer
			Save_Config_to_EEPROM();			
    2780:	0e 94 be 19 	call	0x337c	; 0x337c <Save_Config_to_EEPROM>
		}
		
		if (BUTTON2 == 0)
    2784:	1e 99       	sbic	0x03, 6	; 3
    2786:	03 c0       	rjmp	.+6      	; 0x278e <menu_log+0x46>
		{
			log_start--;
    2788:	ba 94       	dec	r11
    278a:	b7 fc       	sbrc	r11, 7
    278c:	b1 2c       	mov	r11, r1
			{
				log_start = 0;
			}
		}

		if (BUTTON3 == 0)
    278e:	1d 99       	sbic	0x03, 5	; 3
    2790:	06 c0       	rjmp	.+12     	; 0x279e <menu_log+0x56>
		{
			log_start++;
    2792:	b3 94       	inc	r11
			
			if (log_start >= (LOGLENGTH - 5))
    2794:	8e e0       	ldi	r24, 0x0E	; 14
    2796:	8b 15       	cp	r24, r11
    2798:	14 f4       	brge	.+4      	; 0x279e <menu_log+0x56>
			{
				log_start = 15;
    279a:	8f e0       	ldi	r24, 0x0F	; 15
    279c:	b8 2e       	mov	r11, r24
    279e:	00 e0       	ldi	r16, 0x00	; 0
    27a0:	10 e0       	ldi	r17, 0x00	; 0
    27a2:	c0 e0       	ldi	r28, 0x00	; 0
    27a4:	d0 e0       	ldi	r29, 0x00	; 0
    27a6:	eb 2c       	mov	r14, r11
    27a8:	ff 24       	eor	r15, r15
    27aa:	e7 fc       	sbrc	r14, 7
    27ac:	f0 94       	com	r15
    27ae:	f7 01       	movw	r30, r14
    27b0:	e3 53       	subi	r30, 0x33	; 51
    27b2:	fa 4f       	sbci	r31, 0xFA	; 250
    27b4:	7f 01       	movw	r14, r30
    27b6:	f7 01       	movw	r30, r14
    27b8:	ec 0f       	add	r30, r28
    27ba:	fd 1f       	adc	r31, r29
    27bc:	e5 5f       	subi	r30, 0xF5	; 245
    27be:	fd 4f       	sbci	r31, 0xFD	; 253
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
    27c0:	80 81       	ld	r24, Z
    27c2:	99 27       	eor	r25, r25
    27c4:	87 fd       	sbrc	r24, 7
    27c6:	90 95       	com	r25
    27c8:	98 01       	movw	r18, r16
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	67 e9       	ldi	r22, 0x97	; 151
    27d0:	7c e0       	ldi	r23, 0x0C	; 12
    27d2:	85 5e       	subi	r24, 0xE5	; 229
    27d4:	9e 4f       	sbci	r25, 0xFE	; 254
    27d6:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
    27da:	21 96       	adiw	r28, 0x01	; 1
    27dc:	06 5f       	subi	r16, 0xF6	; 246
    27de:	1f 4f       	sbci	r17, 0xFF	; 255
				log_start = 15;
			}
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
    27e0:	c5 30       	cpi	r28, 0x05	; 5
    27e2:	d1 05       	cpc	r29, r1
    27e4:	41 f7       	brne	.-48     	; 0x27b6 <menu_log+0x6e>
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
		}

		print_menu_frame(LOG);
    27e6:	83 e0       	ldi	r24, 0x03	; 3
    27e8:	0e 94 6d 35 	call	0x6ada	; 0x6ada <print_menu_frame>
		clear_buffer(buffer);
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	91 e0       	ldi	r25, 0x01	; 1
    27f0:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
    27f4:	ff e7       	ldi	r31, 0x7F	; 127
    27f6:	2a e1       	ldi	r18, 0x1A	; 26
    27f8:	86 e0       	ldi	r24, 0x06	; 6
    27fa:	f1 50       	subi	r31, 0x01	; 1
    27fc:	20 40       	sbci	r18, 0x00	; 0
    27fe:	80 40       	sbci	r24, 0x00	; 0
    2800:	e1 f7       	brne	.-8      	; 0x27fa <menu_log+0xb2>
    2802:	00 c0       	rjmp	.+0      	; 0x2804 <menu_log+0xbc>
    2804:	00 00       	nop
    2806:	b1 cf       	rjmp	.-158    	; 0x276a <menu_log+0x22>
		
		_delay_ms(100);
	}
}
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	ff 90       	pop	r15
    2812:	ef 90       	pop	r14
    2814:	df 90       	pop	r13
    2816:	cf 90       	pop	r12
    2818:	bf 90       	pop	r11
    281a:	af 90       	pop	r10
    281c:	08 95       	ret

0000281e <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    281e:	0e 94 34 35 	call	0x6a68	; 0x6a68 <init_int>
	
	while(BUTTON1 != 0)
    2822:	1f 9b       	sbis	0x03, 7	; 3
    2824:	fa c0       	rjmp	.+500    	; 0x2a1a <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    2826:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    2828:	0e 94 11 4c 	call	0x9822	; 0x9822 <CenterSticks>
		}

		RxGetChannels();
    282c:	0e 94 7c 4b 	call	0x96f8	; 0x96f8 <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	67 e9       	ldi	r22, 0x97	; 151
    283a:	7c e0       	ldi	r23, 0x0C	; 12
    283c:	82 e7       	ldi	r24, 0x72	; 114
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    2844:	2a e0       	ldi	r18, 0x0A	; 10
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	67 e9       	ldi	r22, 0x97	; 151
    284e:	7c e0       	ldi	r23, 0x0C	; 12
    2850:	80 e2       	ldi	r24, 0x20	; 32
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    2858:	24 e1       	ldi	r18, 0x14	; 20
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	67 e9       	ldi	r22, 0x97	; 151
    2862:	7c e0       	ldi	r23, 0x0C	; 12
    2864:	83 e7       	ldi	r24, 0x73	; 115
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    286c:	2e e1       	ldi	r18, 0x1E	; 30
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	67 e9       	ldi	r22, 0x97	; 151
    2876:	7c e0       	ldi	r23, 0x0C	; 12
    2878:	83 e2       	ldi	r24, 0x23	; 35
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	46 e4       	ldi	r20, 0x46	; 70
    2886:	50 e0       	ldi	r21, 0x00	; 0
    2888:	67 e9       	ldi	r22, 0x97	; 151
    288a:	7c e0       	ldi	r23, 0x0C	; 12
    288c:	8d e6       	ldi	r24, 0x6D	; 109
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    2894:	2a e0       	ldi	r18, 0x0A	; 10
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	46 e4       	ldi	r20, 0x46	; 70
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	67 e9       	ldi	r22, 0x97	; 151
    289e:	7c e0       	ldi	r23, 0x0C	; 12
    28a0:	8e e6       	ldi	r24, 0x6E	; 110
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    28a8:	24 e1       	ldi	r18, 0x14	; 20
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	46 e4       	ldi	r20, 0x46	; 70
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	67 e9       	ldi	r22, 0x97	; 151
    28b2:	7c e0       	ldi	r23, 0x0C	; 12
    28b4:	8f e6       	ldi	r24, 0x6F	; 111
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    28bc:	2e e1       	ldi	r18, 0x1E	; 30
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	46 e4       	ldi	r20, 0x46	; 70
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	67 e9       	ldi	r22, 0x97	; 151
    28c6:	7c e0       	ldi	r23, 0x0C	; 12
    28c8:	80 e7       	ldi	r24, 0x70	; 112
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    28d0:	80 91 74 08 	lds	r24, 0x0874
    28d4:	90 91 75 08 	lds	r25, 0x0875
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    28d8:	4a e0       	ldi	r20, 0x0A	; 10
    28da:	66 e7       	ldi	r22, 0x76	; 118
    28dc:	75 e0       	ldi	r23, 0x05	; 5
    28de:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	45 e2       	ldi	r20, 0x25	; 37
    28e8:	50 e0       	ldi	r21, 0x00	; 0
    28ea:	67 e9       	ldi	r22, 0x97	; 151
    28ec:	7c e0       	ldi	r23, 0x0C	; 12
    28ee:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    28f2:	80 91 78 08 	lds	r24, 0x0878
    28f6:	90 91 79 08 	lds	r25, 0x0879
    28fa:	4a e0       	ldi	r20, 0x0A	; 10
    28fc:	66 e7       	ldi	r22, 0x76	; 118
    28fe:	75 e0       	ldi	r23, 0x05	; 5
    2900:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    2904:	2a e0       	ldi	r18, 0x0A	; 10
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	45 e2       	ldi	r20, 0x25	; 37
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	67 e9       	ldi	r22, 0x97	; 151
    290e:	7c e0       	ldi	r23, 0x0C	; 12
    2910:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    2914:	80 91 7a 08 	lds	r24, 0x087A
    2918:	90 91 7b 08 	lds	r25, 0x087B
    291c:	4a e0       	ldi	r20, 0x0A	; 10
    291e:	66 e7       	ldi	r22, 0x76	; 118
    2920:	75 e0       	ldi	r23, 0x05	; 5
    2922:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    2926:	24 e1       	ldi	r18, 0x14	; 20
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	45 e2       	ldi	r20, 0x25	; 37
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	67 e9       	ldi	r22, 0x97	; 151
    2930:	7c e0       	ldi	r23, 0x0C	; 12
    2932:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    2936:	80 91 7c 08 	lds	r24, 0x087C
    293a:	90 91 7d 08 	lds	r25, 0x087D
    293e:	4a e0       	ldi	r20, 0x0A	; 10
    2940:	66 e7       	ldi	r22, 0x76	; 118
    2942:	75 e0       	ldi	r23, 0x05	; 5
    2944:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    2948:	2e e1       	ldi	r18, 0x1E	; 30
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	45 e2       	ldi	r20, 0x25	; 37
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	67 e9       	ldi	r22, 0x97	; 151
    2952:	7c e0       	ldi	r23, 0x0C	; 12
    2954:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    2958:	80 91 7e 08 	lds	r24, 0x087E
    295c:	90 91 7f 08 	lds	r25, 0x087F
    2960:	4a e0       	ldi	r20, 0x0A	; 10
    2962:	66 e7       	ldi	r22, 0x76	; 118
    2964:	75 e0       	ldi	r23, 0x05	; 5
    2966:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	44 e6       	ldi	r20, 0x64	; 100
    2970:	50 e0       	ldi	r21, 0x00	; 0
    2972:	67 e9       	ldi	r22, 0x97	; 151
    2974:	7c e0       	ldi	r23, 0x0C	; 12
    2976:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    297a:	80 91 80 08 	lds	r24, 0x0880
    297e:	90 91 81 08 	lds	r25, 0x0881
    2982:	4a e0       	ldi	r20, 0x0A	; 10
    2984:	66 e7       	ldi	r22, 0x76	; 118
    2986:	75 e0       	ldi	r23, 0x05	; 5
    2988:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    298c:	2a e0       	ldi	r18, 0x0A	; 10
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	44 e6       	ldi	r20, 0x64	; 100
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	67 e9       	ldi	r22, 0x97	; 151
    2996:	7c e0       	ldi	r23, 0x0C	; 12
    2998:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    299c:	80 91 82 08 	lds	r24, 0x0882
    29a0:	90 91 83 08 	lds	r25, 0x0883
    29a4:	4a e0       	ldi	r20, 0x0A	; 10
    29a6:	66 e7       	ldi	r22, 0x76	; 118
    29a8:	75 e0       	ldi	r23, 0x05	; 5
    29aa:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    29ae:	24 e1       	ldi	r18, 0x14	; 20
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	44 e6       	ldi	r20, 0x64	; 100
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	67 e9       	ldi	r22, 0x97	; 151
    29b8:	7c e0       	ldi	r23, 0x0C	; 12
    29ba:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    29be:	80 91 84 08 	lds	r24, 0x0884
    29c2:	90 91 85 08 	lds	r25, 0x0885
    29c6:	4a e0       	ldi	r20, 0x0A	; 10
    29c8:	66 e7       	ldi	r22, 0x76	; 118
    29ca:	75 e0       	ldi	r23, 0x05	; 5
    29cc:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    29d0:	2e e1       	ldi	r18, 0x1E	; 30
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	44 e6       	ldi	r20, 0x64	; 100
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	67 e9       	ldi	r22, 0x97	; 151
    29da:	7c e0       	ldi	r23, 0x0C	; 12
    29dc:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    29e0:	29 e3       	ldi	r18, 0x39	; 57
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e0       	ldi	r20, 0x00	; 0
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	69 e0       	ldi	r22, 0x09	; 9
    29ea:	71 e0       	ldi	r23, 0x01	; 1
    29ec:	8c e0       	ldi	r24, 0x0C	; 12
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    29f4:	27 e3       	ldi	r18, 0x37	; 55
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	4e e6       	ldi	r20, 0x6E	; 110
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	67 e9       	ldi	r22, 0x97	; 151
    29fe:	7c e0       	ldi	r23, 0x0C	; 12
    2a00:	8c e3       	ldi	r24, 0x3C	; 60
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	91 e0       	ldi	r25, 0x01	; 1
    2a0c:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
		clear_buffer(buffer);
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
    2a18:	04 cf       	rjmp	.-504    	; 0x2822 <Display_rcinput+0x4>
	}
}
    2a1a:	08 95       	ret

00002a1c <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    2a1c:	cf 93       	push	r28
	bool	first_time = true;
	
	clear_buffer(buffer);
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	91 e0       	ldi	r25, 0x01	; 1
    2a22:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    2a26:	c1 e0       	ldi	r28, 0x01	; 1
	
	clear_buffer(buffer);
	
	// While BACK not pressed
	while(BUTTON1 != 0)
    2a28:	1f 9b       	sbis	0x03, 7	; 3
    2a2a:	e7 c0       	rjmp	.+462    	; 0x2bfa <Display_sensors+0x1de>
	{
		ReadGyros();
    2a2c:	0e 94 49 29 	call	0x5292	; 0x5292 <ReadGyros>
		ReadAcc();
    2a30:	0e 94 80 11 	call	0x2300	; 0x2300 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	45 e2       	ldi	r20, 0x25	; 37
    2a3a:	50 e0       	ldi	r21, 0x00	; 0
    2a3c:	67 e9       	ldi	r22, 0x97	; 151
    2a3e:	7c e0       	ldi	r23, 0x0C	; 12
    2a40:	8a e1       	ldi	r24, 0x1A	; 26
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	4d e4       	ldi	r20, 0x4D	; 77
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	67 e9       	ldi	r22, 0x97	; 151
    2a52:	7c e0       	ldi	r23, 0x0C	; 12
    2a54:	8e e1       	ldi	r24, 0x1E	; 30
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    2a5c:	2d e0       	ldi	r18, 0x0D	; 13
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	45 e0       	ldi	r20, 0x05	; 5
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	67 e9       	ldi	r22, 0x97	; 151
    2a66:	7c e0       	ldi	r23, 0x0C	; 12
    2a68:	8b e1       	ldi	r24, 0x1B	; 27
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    2a70:	27 e1       	ldi	r18, 0x17	; 23
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	45 e0       	ldi	r20, 0x05	; 5
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	67 e9       	ldi	r22, 0x97	; 151
    2a7a:	7c e0       	ldi	r23, 0x0C	; 12
    2a7c:	8c e1       	ldi	r24, 0x1C	; 28
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    2a84:	21 e2       	ldi	r18, 0x21	; 33
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	45 e0       	ldi	r20, 0x05	; 5
    2a8a:	50 e0       	ldi	r21, 0x00	; 0
    2a8c:	67 e9       	ldi	r22, 0x97	; 151
    2a8e:	7c e0       	ldi	r23, 0x0C	; 12
    2a90:	8d e1       	ldi	r24, 0x1D	; 29
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
    2a98:	4a e0       	ldi	r20, 0x0A	; 10
    2a9a:	66 e7       	ldi	r22, 0x76	; 118
    2a9c:	75 e0       	ldi	r23, 0x05	; 5
    2a9e:	80 91 8f 05 	lds	r24, 0x058F
    2aa2:	90 91 90 05 	lds	r25, 0x0590
    2aa6:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    2aaa:	2d e0       	ldi	r18, 0x0D	; 13
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	48 e2       	ldi	r20, 0x28	; 40
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	67 e9       	ldi	r22, 0x97	; 151
    2ab4:	7c e0       	ldi	r23, 0x0C	; 12
    2ab6:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
    2aba:	4a e0       	ldi	r20, 0x0A	; 10
    2abc:	66 e7       	ldi	r22, 0x76	; 118
    2abe:	75 e0       	ldi	r23, 0x05	; 5
    2ac0:	80 91 91 05 	lds	r24, 0x0591
    2ac4:	90 91 92 05 	lds	r25, 0x0592
    2ac8:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    2acc:	27 e1       	ldi	r18, 0x17	; 23
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	48 e2       	ldi	r20, 0x28	; 40
    2ad2:	50 e0       	ldi	r21, 0x00	; 0
    2ad4:	67 e9       	ldi	r22, 0x97	; 151
    2ad6:	7c e0       	ldi	r23, 0x0C	; 12
    2ad8:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
    2adc:	4a e0       	ldi	r20, 0x0A	; 10
    2ade:	66 e7       	ldi	r22, 0x76	; 118
    2ae0:	75 e0       	ldi	r23, 0x05	; 5
    2ae2:	80 91 93 05 	lds	r24, 0x0593
    2ae6:	90 91 94 05 	lds	r25, 0x0594
    2aea:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2aee:	21 e2       	ldi	r18, 0x21	; 33
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	48 e2       	ldi	r20, 0x28	; 40
    2af4:	50 e0       	ldi	r21, 0x00	; 0
    2af6:	67 e9       	ldi	r22, 0x97	; 151
    2af8:	7c e0       	ldi	r23, 0x0C	; 12
    2afa:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
    2afe:	4a e0       	ldi	r20, 0x0A	; 10
    2b00:	66 e7       	ldi	r22, 0x76	; 118
    2b02:	75 e0       	ldi	r23, 0x05	; 5
    2b04:	80 91 3e 05 	lds	r24, 0x053E
    2b08:	90 91 3f 05 	lds	r25, 0x053F
    2b0c:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    2b10:	2d e0       	ldi	r18, 0x0D	; 13
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e5       	ldi	r20, 0x50	; 80
    2b16:	50 e0       	ldi	r21, 0x00	; 0
    2b18:	67 e9       	ldi	r22, 0x97	; 151
    2b1a:	7c e0       	ldi	r23, 0x0C	; 12
    2b1c:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
    2b20:	4a e0       	ldi	r20, 0x0A	; 10
    2b22:	66 e7       	ldi	r22, 0x76	; 118
    2b24:	75 e0       	ldi	r23, 0x05	; 5
    2b26:	80 91 40 05 	lds	r24, 0x0540
    2b2a:	90 91 41 05 	lds	r25, 0x0541
    2b2e:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    2b32:	27 e1       	ldi	r18, 0x17	; 23
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e5       	ldi	r20, 0x50	; 80
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	67 e9       	ldi	r22, 0x97	; 151
    2b3c:	7c e0       	ldi	r23, 0x0C	; 12
    2b3e:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
    2b42:	4a e0       	ldi	r20, 0x0A	; 10
    2b44:	66 e7       	ldi	r22, 0x76	; 118
    2b46:	75 e0       	ldi	r23, 0x05	; 5
    2b48:	80 91 42 05 	lds	r24, 0x0542
    2b4c:	90 91 43 05 	lds	r25, 0x0543
    2b50:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    2b54:	21 e2       	ldi	r18, 0x21	; 33
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e5       	ldi	r20, 0x50	; 80
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	67 e9       	ldi	r22, 0x97	; 151
    2b5e:	7c e0       	ldi	r23, 0x0C	; 12
    2b60:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2b64:	29 e3       	ldi	r18, 0x39	; 57
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e0       	ldi	r20, 0x00	; 0
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	69 e0       	ldi	r22, 0x09	; 9
    2b6e:	71 e0       	ldi	r23, 0x01	; 1
    2b70:	8c e0       	ldi	r24, 0x0C	; 12
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    2b78:	27 e3       	ldi	r18, 0x37	; 55
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	4c e6       	ldi	r20, 0x6C	; 108
    2b7e:	50 e0       	ldi	r21, 0x00	; 0
    2b80:	67 e9       	ldi	r22, 0x97	; 151
    2b82:	7c e0       	ldi	r23, 0x0C	; 12
    2b84:	8c e3       	ldi	r24, 0x3C	; 60
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    2b8c:	27 e3       	ldi	r18, 0x37	; 55
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4b e4       	ldi	r20, 0x4B	; 75
    2b92:	50 e0       	ldi	r21, 0x00	; 0
    2b94:	67 e9       	ldi	r22, 0x97	; 151
    2b96:	7c e0       	ldi	r23, 0x0C	; 12
    2b98:	89 e1       	ldi	r24, 0x19	; 25
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	91 e0       	ldi	r25, 0x01	; 1
    2ba4:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
		clear_buffer(buffer);
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	91 e0       	ldi	r25, 0x01	; 1
    2bac:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
	
		if (first_time)
    2bb0:	c1 11       	cpse	r28, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    2bb2:	0e 94 3b 3b 	call	0x7676	; 0x7676 <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    2bb6:	1c 99       	sbic	0x03, 4	; 3
    2bb8:	10 c0       	rjmp	.+32     	; 0x2bda <Display_sensors+0x1be>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    2bba:	0e 94 3b 3b 	call	0x7676	; 0x7676 <Wait_BUTTON4>
    2bbe:	2f e3       	ldi	r18, 0x3F	; 63
    2bc0:	82 e4       	ldi	r24, 0x42	; 66
    2bc2:	9f e0       	ldi	r25, 0x0F	; 15
    2bc4:	21 50       	subi	r18, 0x01	; 1
    2bc6:	80 40       	sbci	r24, 0x00	; 0
    2bc8:	90 40       	sbci	r25, 0x00	; 0
    2bca:	e1 f7       	brne	.-8      	; 0x2bc4 <Display_sensors+0x1a8>
    2bcc:	00 c0       	rjmp	.+0      	; 0x2bce <Display_sensors+0x1b2>
    2bce:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    2bd0:	0e 94 76 29 	call	0x52ec	; 0x52ec <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    2bda:	1d 99       	sbic	0x03, 5	; 3
    2bdc:	0c c0       	rjmp	.+24     	; 0x2bf6 <Display_sensors+0x1da>
    2bde:	2f e3       	ldi	r18, 0x3F	; 63
    2be0:	82 e4       	ldi	r24, 0x42	; 66
    2be2:	9f e0       	ldi	r25, 0x0F	; 15
    2be4:	21 50       	subi	r18, 0x01	; 1
    2be6:	80 40       	sbci	r24, 0x00	; 0
    2be8:	90 40       	sbci	r25, 0x00	; 0
    2bea:	e1 f7       	brne	.-8      	; 0x2be4 <Display_sensors+0x1c8>
    2bec:	00 c0       	rjmp	.+0      	; 0x2bee <Display_sensors+0x1d2>
    2bee:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <CalibrateAcc>
    2bf6:	c0 e0       	ldi	r28, 0x00	; 0
    2bf8:	17 cf       	rjmp	.-466    	; 0x2a28 <Display_sensors+0xc>
		}		
	}
}
    2bfa:	cf 91       	pop	r28
    2bfc:	08 95       	ret

00002bfe <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2bfe:	bf 92       	push	r11
    2c00:	cf 92       	push	r12
    2c02:	df 92       	push	r13
    2c04:	ef 92       	push	r14
    2c06:	ff 92       	push	r15
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	cf 93       	push	r28
    2c0e:	df 93       	push	r29
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <Display_status+0x14>
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <Display_status+0x16>
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	91 e0       	ldi	r25, 0x01	; 1
    2c1c:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	67 e9       	ldi	r22, 0x97	; 151
    2c2a:	7c e0       	ldi	r23, 0x0C	; 12
    2c2c:	88 e0       	ldi	r24, 0x08	; 8
    2c2e:	91 e0       	ldi	r25, 0x01	; 1
    2c30:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    2c34:	2c e0       	ldi	r18, 0x0C	; 12
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	67 e9       	ldi	r22, 0x97	; 151
    2c3e:	7c e0       	ldi	r23, 0x0C	; 12
    2c40:	8a e0       	ldi	r24, 0x0A	; 10
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    2c48:	28 e1       	ldi	r18, 0x18	; 24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	67 e9       	ldi	r22, 0x97	; 151
    2c52:	7c e0       	ldi	r23, 0x0C	; 12
    2c54:	8b e0       	ldi	r24, 0x0B	; 11
    2c56:	91 e0       	ldi	r25, 0x01	; 1
    2c58:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    2c5c:	28 e1       	ldi	r18, 0x18	; 24
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	48 e5       	ldi	r20, 0x58	; 88
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	67 e9       	ldi	r22, 0x97	; 151
    2c66:	7c e0       	ldi	r23, 0x0C	; 12
    2c68:	87 e1       	ldi	r24, 0x17	; 23
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    2c70:	2b e3       	ldi	r18, 0x3B	; 59
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	50 e0       	ldi	r21, 0x00	; 0
    2c78:	69 e0       	ldi	r22, 0x09	; 9
    2c7a:	71 e0       	ldi	r23, 0x01	; 1
    2c7c:	89 e0       	ldi	r24, 0x09	; 9
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    2c84:	27 e3       	ldi	r18, 0x37	; 55
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	4a e0       	ldi	r20, 0x0A	; 10
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    2c8c:	67 e9       	ldi	r22, 0x97	; 151
    2c8e:	7c e0       	ldi	r23, 0x0C	; 12
    2c90:	8e e0       	ldi	r24, 0x0E	; 14
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    2c98:	40 91 f6 05 	lds	r20, 0x05F6
    2c9c:	55 27       	eor	r21, r21
    2c9e:	47 fd       	sbrc	r20, 7
    2ca0:	50 95       	com	r21
    2ca2:	42 5c       	subi	r20, 0xC2	; 194
    2ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca6:	0c e0       	ldi	r16, 0x0C	; 12
    2ca8:	2d e2       	ldi	r18, 0x2D	; 45
    2caa:	61 e0       	ldi	r22, 0x01	; 1
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 03 36 	call	0x6c06	; 0x6c06 <print_menu_text>
    2cb4:	4a e0       	ldi	r20, 0x0A	; 10
    2cb6:	66 e7       	ldi	r22, 0x76	; 118
    2cb8:	75 e0       	ldi	r23, 0x05	; 5
    2cba:	80 91 21 05 	lds	r24, 0x0521
    2cbe:	90 91 22 05 	lds	r25, 0x0522
    2cc2:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    2cc6:	28 e1       	ldi	r18, 0x18	; 24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	4e e6       	ldi	r20, 0x6E	; 110
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	67 e9       	ldi	r22, 0x97	; 151
    2cd0:	7c e0       	ldi	r23, 0x0C	; 12
    2cd2:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    2cd6:	80 91 f6 05 	lds	r24, 0x05F6
    2cda:	81 30       	cpi	r24, 0x01	; 1
    2cdc:	d9 f4       	brne	.+54     	; 0x2d14 <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    2cde:	2c e0       	ldi	r18, 0x0C	; 12
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	4d e4       	ldi	r20, 0x4D	; 77
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	67 e9       	ldi	r22, 0x97	; 151
    2ce8:	7c e0       	ldi	r23, 0x0C	; 12
    2cea:	88 e1       	ldi	r24, 0x18	; 24
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    2cf2:	80 91 1c 05 	lds	r24, 0x051C
    2cf6:	90 91 1d 05 	lds	r25, 0x051D
    2cfa:	4a e0       	ldi	r20, 0x0A	; 10
    2cfc:	66 e7       	ldi	r22, 0x76	; 118
    2cfe:	75 e0       	ldi	r23, 0x05	; 5
    2d00:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    2d04:	2c e0       	ldi	r18, 0x0C	; 12
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	4e e6       	ldi	r20, 0x6E	; 110
    2d0a:	50 e0       	ldi	r21, 0x00	; 0
    2d0c:	67 e9       	ldi	r22, 0x97	; 151
    2d0e:	7c e0       	ldi	r23, 0x0C	; 12
    2d10:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    2d14:	80 91 21 05 	lds	r24, 0x0521
    2d18:	90 91 22 05 	lds	r25, 0x0522
    2d1c:	18 16       	cp	r1, r24
    2d1e:	19 06       	cpc	r1, r25
    2d20:	4c f0       	brlt	.+18     	; 0x2d34 <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    2d22:	28 e1       	ldi	r18, 0x18	; 24
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	4d e2       	ldi	r20, 0x2D	; 45
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	67 e9       	ldi	r22, 0x97	; 151
    2d2c:	7c e0       	ldi	r23, 0x0C	; 12
    2d2e:	80 e3       	ldi	r24, 0x30	; 48
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	31 c0       	rjmp	.+98     	; 0x2d96 <Display_status+0x198>
	}
	else if (transition >= 100)
    2d34:	84 36       	cpi	r24, 0x64	; 100
    2d36:	91 05       	cpc	r25, r1
    2d38:	4c f0       	brlt	.+18     	; 0x2d4c <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    2d3a:	28 e1       	ldi	r18, 0x18	; 24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	4d e2       	ldi	r20, 0x2D	; 45
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	67 e9       	ldi	r22, 0x97	; 151
    2d44:	7c e0       	ldi	r23, 0x0C	; 12
    2d46:	82 e3       	ldi	r24, 0x32	; 50
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	25 c0       	rjmp	.+74     	; 0x2d96 <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    2d4c:	20 91 fc 05 	lds	r18, 0x05FC
    2d50:	33 27       	eor	r19, r19
    2d52:	27 fd       	sbrc	r18, 7
    2d54:	30 95       	com	r19
    2d56:	82 17       	cp	r24, r18
    2d58:	93 07       	cpc	r25, r19
    2d5a:	49 f4       	brne	.+18     	; 0x2d6e <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    2d5c:	28 e1       	ldi	r18, 0x18	; 24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	4d e2       	ldi	r20, 0x2D	; 45
    2d62:	50 e0       	ldi	r21, 0x00	; 0
    2d64:	67 e9       	ldi	r22, 0x97	; 151
    2d66:	7c e0       	ldi	r23, 0x0C	; 12
    2d68:	81 e3       	ldi	r24, 0x31	; 49
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	14 c0       	rjmp	.+40     	; 0x2d96 <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    2d6e:	82 17       	cp	r24, r18
    2d70:	93 07       	cpc	r25, r19
    2d72:	4c f4       	brge	.+18     	; 0x2d86 <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    2d74:	28 e1       	ldi	r18, 0x18	; 24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	4d e2       	ldi	r20, 0x2D	; 45
    2d7a:	50 e0       	ldi	r21, 0x00	; 0
    2d7c:	67 e9       	ldi	r22, 0x97	; 151
    2d7e:	7c e0       	ldi	r23, 0x0C	; 12
    2d80:	83 e3       	ldi	r24, 0x33	; 51
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	08 c0       	rjmp	.+16     	; 0x2d96 <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    2d86:	28 e1       	ldi	r18, 0x18	; 24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	4d e2       	ldi	r20, 0x2D	; 45
    2d8c:	50 e0       	ldi	r21, 0x00	; 0
    2d8e:	67 e9       	ldi	r22, 0x97	; 151
    2d90:	7c e0       	ldi	r23, 0x0C	; 12
    2d92:	84 e3       	ldi	r24, 0x34	; 52
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
	}

	// Don't display battery text if there are error messages
	if (General_error == 0)
    2d9a:	80 91 20 05 	lds	r24, 0x0520
    2d9e:	81 11       	cpse	r24, r1
    2da0:	26 c1       	rjmp	.+588    	; 0x2fee <Display_status+0x3f0>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(133,(const unsigned char*)Verdana8,0,36); 	// Battery
    2da2:	24 e2       	ldi	r18, 0x24	; 36
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	67 e9       	ldi	r22, 0x97	; 151
    2dac:	7c e0       	ldi	r23, 0x0C	; 12
    2dae:	85 e8       	ldi	r24, 0x85	; 133
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

		vbat_temp = GetVbat();
    2db6:	0e 94 51 4e 	call	0x9ca2	; 0x9ca2 <GetVbat>
    2dba:	7c 01       	movw	r14, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    2dbc:	64 e6       	ldi	r22, 0x64	; 100
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	0e 94 8b 50 	call	0xa116	; 0xa116 <__udivmodhi4>
    2dc4:	8b 01       	movw	r16, r22
    2dc6:	4a e0       	ldi	r20, 0x0A	; 10
    2dc8:	66 e7       	ldi	r22, 0x76	; 118
    2dca:	75 e0       	ldi	r23, 0x05	; 5
    2dcc:	c8 01       	movw	r24, r16
    2dce:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    2dd2:	ae 01       	movw	r20, r28
    2dd4:	4f 5f       	subi	r20, 0xFF	; 255
    2dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd8:	67 e9       	ldi	r22, 0x97	; 151
    2dda:	7c e0       	ldi	r23, 0x0C	; 12
    2ddc:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <mugui_text_sizestring>
    2de0:	4a e0       	ldi	r20, 0x0A	; 10
    2de2:	66 e7       	ldi	r22, 0x76	; 118
    2de4:	75 e0       	ldi	r23, 0x05	; 5
    2de6:	c8 01       	movw	r24, r16
    2de8:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    2dec:	24 e2       	ldi	r18, 0x24	; 36
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	4d e2       	ldi	r20, 0x2D	; 45
    2df2:	50 e0       	ldi	r21, 0x00	; 0
    2df4:	67 e9       	ldi	r22, 0x97	; 151
    2df6:	7c e0       	ldi	r23, 0x0C	; 12
    2df8:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2dfc:	2c e9       	ldi	r18, 0x9C	; 156
    2dfe:	20 03       	mulsu	r18, r16
    2e00:	60 01       	movw	r12, r0
    2e02:	21 9f       	mul	r18, r17
    2e04:	d0 0c       	add	r13, r0
    2e06:	11 24       	eor	r1, r1
    2e08:	ce 0c       	add	r12, r14
    2e0a:	df 1c       	adc	r13, r15

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2e0c:	e9 80       	ldd	r14, Y+1	; 0x01
    2e0e:	ff 24       	eor	r15, r15
    2e10:	e7 fc       	sbrc	r14, 7
    2e12:	f0 94       	com	r15
    2e14:	8d e2       	ldi	r24, 0x2D	; 45
    2e16:	e8 0e       	add	r14, r24
    2e18:	f1 1c       	adc	r15, r1
    2e1a:	24 e2       	ldi	r18, 0x24	; 36
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	a7 01       	movw	r20, r14
    2e20:	67 e9       	ldi	r22, 0x97	; 151
    2e22:	7c e0       	ldi	r23, 0x0C	; 12
    2e24:	8c e0       	ldi	r24, 0x0C	; 12
    2e26:	91 e0       	ldi	r25, 0x01	; 1
    2e28:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2e2c:	ae 01       	movw	r20, r28
    2e2e:	4f 5f       	subi	r20, 0xFF	; 255
    2e30:	5f 4f       	sbci	r21, 0xFF	; 255
    2e32:	67 e9       	ldi	r22, 0x97	; 151
    2e34:	7c e0       	ldi	r23, 0x0C	; 12
    2e36:	8a e0       	ldi	r24, 0x0A	; 10
    2e38:	95 e0       	ldi	r25, 0x05	; 5
    2e3a:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <mugui_text_sizestring>
		pos3 = size.x;
    2e3e:	09 81       	ldd	r16, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2e40:	ae 01       	movw	r20, r28
    2e42:	4f 5f       	subi	r20, 0xFF	; 255
    2e44:	5f 4f       	sbci	r21, 0xFF	; 255
    2e46:	67 e9       	ldi	r22, 0x97	; 151
    2e48:	7c e0       	ldi	r23, 0x0C	; 12
    2e4a:	8c e0       	ldi	r24, 0x0C	; 12
    2e4c:	95 e0       	ldi	r25, 0x05	; 5
    2e4e:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <mugui_text_sizestring>
		pos2 = size.x;
    2e52:	b9 80       	ldd	r11, Y+1	; 0x01
    2e54:	11 27       	eor	r17, r17
    2e56:	07 fd       	sbrc	r16, 7
    2e58:	10 95       	com	r17

		if (vbat_temp >= 10)
    2e5a:	8a e0       	ldi	r24, 0x0A	; 10
    2e5c:	c8 16       	cp	r12, r24
    2e5e:	d1 04       	cpc	r13, r1
    2e60:	40 f0       	brcs	.+16     	; 0x2e72 <Display_status+0x274>
    2e62:	4a e0       	ldi	r20, 0x0A	; 10
    2e64:	66 e7       	ldi	r22, 0x76	; 118
    2e66:	75 e0       	ldi	r23, 0x05	; 5
    2e68:	c6 01       	movw	r24, r12
    2e6a:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2e6e:	a7 01       	movw	r20, r14
    2e70:	16 c0       	rjmp	.+44     	; 0x2e9e <Display_status+0x2a0>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2e72:	a7 01       	movw	r20, r14
    2e74:	40 0f       	add	r20, r16
    2e76:	51 1f       	adc	r21, r17
    2e78:	24 e2       	ldi	r18, 0x24	; 36
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	67 e9       	ldi	r22, 0x97	; 151
    2e7e:	7c e0       	ldi	r23, 0x0C	; 12
    2e80:	8d e0       	ldi	r24, 0x0D	; 13
    2e82:	91 e0       	ldi	r25, 0x01	; 1
    2e84:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
    2e88:	4a e0       	ldi	r20, 0x0A	; 10
    2e8a:	66 e7       	ldi	r22, 0x76	; 118
    2e8c:	75 e0       	ldi	r23, 0x05	; 5
    2e8e:	c6 01       	movw	r24, r12
    2e90:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2e94:	a7 01       	movw	r20, r14
    2e96:	4b 0d       	add	r20, r11
    2e98:	51 1d       	adc	r21, r1
    2e9a:	b7 fc       	sbrc	r11, 7
    2e9c:	5a 95       	dec	r21
    2e9e:	40 0f       	add	r20, r16
    2ea0:	51 1f       	adc	r21, r17
    2ea2:	24 e2       	ldi	r18, 0x24	; 36
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	67 e9       	ldi	r22, 0x97	; 151
    2ea8:	7c e0       	ldi	r23, 0x0C	; 12
    2eaa:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
		}
	
		// Display vibration info is set to "ON"
		if (Config.Vibration == ON)
    2eae:	80 91 fd 05 	lds	r24, 0x05FD
    2eb2:	81 30       	cpi	r24, 0x01	; 1
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <Display_status+0x2ba>
    2eb6:	ee c0       	rjmp	.+476    	; 0x3094 <Display_status+0x496>
		{
			// Create message box
			fillrect(buffer, 29,11, 70, 42, 0);	// White box
    2eb8:	e1 2c       	mov	r14, r1
    2eba:	0a e2       	ldi	r16, 0x2A	; 42
    2ebc:	26 e4       	ldi	r18, 0x46	; 70
    2ebe:	4b e0       	ldi	r20, 0x0B	; 11
    2ec0:	6d e1       	ldi	r22, 0x1D	; 29
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	91 e0       	ldi	r25, 0x01	; 1
    2ec6:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <fillrect>
			drawrect(buffer, 29,11, 70, 42, 1); 	// Outline
    2eca:	ee 24       	eor	r14, r14
    2ecc:	e3 94       	inc	r14
    2ece:	26 e4       	ldi	r18, 0x46	; 70
    2ed0:	4b e0       	ldi	r20, 0x0B	; 11
    2ed2:	6d e1       	ldi	r22, 0x1D	; 29
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	91 e0       	ldi	r25, 0x01	; 1
    2ed8:	0e 94 80 27 	call	0x4f00	; 0x4f00 <drawrect>

			temp = abs((gyroADC[ROLL] + gyroADC[PITCH] + gyroADC[YAW])/3);
			
			GyroAvg[ROLL] = ((GyroAvg[ROLL] * (float)9) + (float)temp) / (float)10;
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e1       	ldi	r20, 0x10	; 16
    2ee2:	51 e4       	ldi	r21, 0x41	; 65
    2ee4:	60 91 44 05 	lds	r22, 0x0544
    2ee8:	70 91 45 05 	lds	r23, 0x0545
    2eec:	80 91 46 05 	lds	r24, 0x0546
    2ef0:	90 91 47 05 	lds	r25, 0x0547
    2ef4:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    2ef8:	6b 01       	movw	r12, r22
    2efa:	7c 01       	movw	r14, r24
		{
			// Create message box
			fillrect(buffer, 29,11, 70, 42, 0);	// White box
			drawrect(buffer, 29,11, 70, 42, 1); 	// Outline

			temp = abs((gyroADC[ROLL] + gyroADC[PITCH] + gyroADC[YAW])/3);
    2efc:	80 91 8f 05 	lds	r24, 0x058F
    2f00:	90 91 90 05 	lds	r25, 0x0590
    2f04:	20 91 91 05 	lds	r18, 0x0591
    2f08:	30 91 92 05 	lds	r19, 0x0592
    2f0c:	82 0f       	add	r24, r18
    2f0e:	93 1f       	adc	r25, r19
    2f10:	20 91 93 05 	lds	r18, 0x0593
    2f14:	30 91 94 05 	lds	r19, 0x0594
    2f18:	82 0f       	add	r24, r18
    2f1a:	93 1f       	adc	r25, r19
    2f1c:	63 e0       	ldi	r22, 0x03	; 3
    2f1e:	70 e0       	ldi	r23, 0x00	; 0
    2f20:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    2f24:	77 ff       	sbrs	r23, 7
    2f26:	03 c0       	rjmp	.+6      	; 0x2f2e <Display_status+0x330>
    2f28:	71 95       	neg	r23
    2f2a:	61 95       	neg	r22
    2f2c:	71 09       	sbc	r23, r1
			
			GyroAvg[ROLL] = ((GyroAvg[ROLL] * (float)9) + (float)temp) / (float)10;
    2f2e:	88 27       	eor	r24, r24
    2f30:	77 fd       	sbrc	r23, 7
    2f32:	80 95       	com	r24
    2f34:	98 2f       	mov	r25, r24
    2f36:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    2f3a:	9b 01       	movw	r18, r22
    2f3c:	ac 01       	movw	r20, r24
    2f3e:	c7 01       	movw	r24, r14
    2f40:	b6 01       	movw	r22, r12
    2f42:	0e 94 71 4e 	call	0x9ce2	; 0x9ce2 <__addsf3>
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <__divsf3>
    2f52:	6b 01       	movw	r12, r22
    2f54:	7c 01       	movw	r14, r24
			
			if (GyroAvg[ROLL] >= 999)
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 ec       	ldi	r19, 0xC0	; 192
    2f5a:	49 e7       	ldi	r20, 0x79	; 121
    2f5c:	54 e4       	ldi	r21, 0x44	; 68
    2f5e:	0e 94 24 50 	call	0xa048	; 0xa048 <__gesf2>
    2f62:	87 ff       	sbrs	r24, 7
    2f64:	09 c0       	rjmp	.+18     	; 0x2f78 <Display_status+0x37a>
			fillrect(buffer, 29,11, 70, 42, 0);	// White box
			drawrect(buffer, 29,11, 70, 42, 1); 	// Outline

			temp = abs((gyroADC[ROLL] + gyroADC[PITCH] + gyroADC[YAW])/3);
			
			GyroAvg[ROLL] = ((GyroAvg[ROLL] * (float)9) + (float)temp) / (float)10;
    2f66:	c0 92 44 05 	sts	0x0544, r12
    2f6a:	d0 92 45 05 	sts	0x0545, r13
    2f6e:	e0 92 46 05 	sts	0x0546, r14
    2f72:	f0 92 47 05 	sts	0x0547, r15
    2f76:	0c c0       	rjmp	.+24     	; 0x2f90 <Display_status+0x392>
			
			if (GyroAvg[ROLL] >= 999)
			{
				GyroAvg[ROLL] = 999;
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	90 ec       	ldi	r25, 0xC0	; 192
    2f7c:	a9 e7       	ldi	r26, 0x79	; 121
    2f7e:	b4 e4       	ldi	r27, 0x44	; 68
    2f80:	80 93 44 05 	sts	0x0544, r24
    2f84:	90 93 45 05 	sts	0x0545, r25
    2f88:	a0 93 46 05 	sts	0x0546, r26
    2f8c:	b0 93 47 05 	sts	0x0547, r27
			}
			
			// Display vibration data
			temp = (int16_t)GyroAvg[ROLL];
    2f90:	60 91 44 05 	lds	r22, 0x0544
    2f94:	70 91 45 05 	lds	r23, 0x0545
    2f98:	80 91 46 05 	lds	r24, 0x0546
    2f9c:	90 91 47 05 	lds	r25, 0x0547
    2fa0:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
    2fa4:	6b 01       	movw	r12, r22
    2fa6:	7c 01       	movw	r14, r24
    2fa8:	4a e0       	ldi	r20, 0x0A	; 10
    2faa:	66 e7       	ldi	r22, 0x76	; 118
    2fac:	75 e0       	ldi	r23, 0x05	; 5
    2fae:	c6 01       	movw	r24, r12
    2fb0:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
			
			// Work out pixel size of number to display
			mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana22, &size);
    2fb4:	ae 01       	movw	r20, r28
    2fb6:	4f 5f       	subi	r20, 0xFF	; 255
    2fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2fba:	63 e7       	ldi	r22, 0x73	; 115
    2fbc:	71 e0       	ldi	r23, 0x01	; 1
    2fbe:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <mugui_text_sizestring>
			
			// Center the number in the box automatically
			mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana22,64 - (size.x / 2),20);
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc6:	96 95       	lsr	r25
    2fc8:	87 95       	ror	r24
    2fca:	00 e4       	ldi	r16, 0x40	; 64
    2fcc:	10 e0       	ldi	r17, 0x00	; 0
    2fce:	08 1b       	sub	r16, r24
    2fd0:	19 0b       	sbc	r17, r25
    2fd2:	4a e0       	ldi	r20, 0x0A	; 10
    2fd4:	66 e7       	ldi	r22, 0x76	; 118
    2fd6:	75 e0       	ldi	r23, 0x05	; 5
    2fd8:	c6 01       	movw	r24, r12
    2fda:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    2fde:	24 e1       	ldi	r18, 0x14	; 20
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	a8 01       	movw	r20, r16
    2fe4:	63 e7       	ldi	r22, 0x73	; 115
    2fe6:	71 e0       	ldi	r23, 0x01	; 1
    2fe8:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
    2fec:	53 c0       	rjmp	.+166    	; 0x3094 <Display_status+0x496>
	
	// Display error messages
	else
	{
		// Prioritise error from top to bottom
		if(General_error & (1 << LVA_ALARM))
    2fee:	80 91 20 05 	lds	r24, 0x0520
    2ff2:	83 ff       	sbrs	r24, 3
    2ff4:	13 c0       	rjmp	.+38     	; 0x301c <Display_status+0x41e>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    2ff6:	25 e2       	ldi	r18, 0x25	; 37
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	4f e0       	ldi	r20, 0x0F	; 15
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	69 ee       	ldi	r22, 0xE9	; 233
    3000:	73 e0       	ldi	r23, 0x03	; 3
    3002:	86 e8       	ldi	r24, 0x86	; 134
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    300a:	25 e2       	ldi	r18, 0x25	; 37
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	4f e4       	ldi	r20, 0x4F	; 79
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	69 ee       	ldi	r22, 0xE9	; 233
    3014:	73 e0       	ldi	r23, 0x03	; 3
    3016:	8f e0       	ldi	r24, 0x0F	; 15
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	3a c0       	rjmp	.+116    	; 0x3090 <Display_status+0x492>
		}
		else if(General_error & (1 << NO_SIGNAL))
    301c:	80 91 20 05 	lds	r24, 0x0520
    3020:	81 ff       	sbrs	r24, 1
    3022:	13 c0       	rjmp	.+38     	; 0x304a <Display_status+0x44c>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    3024:	25 e2       	ldi	r18, 0x25	; 37
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	4e e1       	ldi	r20, 0x1E	; 30
    302a:	50 e0       	ldi	r21, 0x00	; 0
    302c:	69 ee       	ldi	r22, 0xE9	; 233
    302e:	73 e0       	ldi	r23, 0x03	; 3
    3030:	8b e4       	ldi	r24, 0x4B	; 75
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    3038:	25 e2       	ldi	r18, 0x25	; 37
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	47 e3       	ldi	r20, 0x37	; 55
    303e:	50 e0       	ldi	r21, 0x00	; 0
    3040:	69 ee       	ldi	r22, 0xE9	; 233
    3042:	73 e0       	ldi	r23, 0x03	; 3
    3044:	80 e1       	ldi	r24, 0x10	; 16
    3046:	91 e0       	ldi	r25, 0x01	; 1
    3048:	23 c0       	rjmp	.+70     	; 0x3090 <Display_status+0x492>
		}
		else if(General_error & (1 << THROTTLE_HIGH))
    304a:	80 91 20 05 	lds	r24, 0x0520
    304e:	80 ff       	sbrs	r24, 0
    3050:	13 c0       	rjmp	.+38     	; 0x3078 <Display_status+0x47a>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    3052:	25 e2       	ldi	r18, 0x25	; 37
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	4b e0       	ldi	r20, 0x0B	; 11
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	69 ee       	ldi	r22, 0xE9	; 233
    305c:	73 e0       	ldi	r23, 0x03	; 3
    305e:	89 e6       	ldi	r24, 0x69	; 105
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    3066:	25 e2       	ldi	r18, 0x25	; 37
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	42 e5       	ldi	r20, 0x52	; 82
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	69 ee       	ldi	r22, 0xE9	; 233
    3070:	73 e0       	ldi	r23, 0x03	; 3
    3072:	8e e0       	ldi	r24, 0x0E	; 14
    3074:	91 e0       	ldi	r25, 0x01	; 1
    3076:	0c c0       	rjmp	.+24     	; 0x3090 <Display_status+0x492>
		}
		else if(General_error & (1 << DISARMED))
    3078:	80 91 20 05 	lds	r24, 0x0520
    307c:	82 ff       	sbrs	r24, 2
    307e:	0a c0       	rjmp	.+20     	; 0x3094 <Display_status+0x496>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    3080:	25 e2       	ldi	r18, 0x25	; 37
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	49 e1       	ldi	r20, 0x19	; 25
    3086:	50 e0       	ldi	r21, 0x00	; 0
    3088:	69 ee       	ldi	r22, 0xE9	; 233
    308a:	73 e0       	ldi	r23, 0x03	; 3
    308c:	82 e1       	ldi	r24, 0x12	; 18
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	91 e0       	ldi	r25, 0x01	; 1
    3098:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
	clear_buffer(buffer);
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	91 e0       	ldi	r25, 0x01	; 1
    30a0:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
}
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	1f 91       	pop	r17
    30b2:	0f 91       	pop	r16
    30b4:	ff 90       	pop	r15
    30b6:	ef 90       	pop	r14
    30b8:	df 90       	pop	r13
    30ba:	cf 90       	pop	r12
    30bc:	bf 90       	pop	r11
    30be:	08 95       	ret

000030c0 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    30c0:	af 92       	push	r10
    30c2:	bf 92       	push	r11
    30c4:	cf 92       	push	r12
    30c6:	df 92       	push	r13
    30c8:	ef 92       	push	r14
    30ca:	ff 92       	push	r15
    30cc:	0f 93       	push	r16
    30ce:	1f 93       	push	r17
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    30d4:	d0 90 d6 07 	lds	r13, 0x07D6
	temp_elevator = Config.ElevatorPol;
    30d8:	f0 90 fe 05 	lds	r15, 0x05FE
	temp_rudder = Config.RudderPol;
    30dc:	a0 90 d5 07 	lds	r10, 0x07D5

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    30e0:	10 92 d6 07 	sts	0x07D6, r1
	Config.ElevatorPol =  NORMAL;
    30e4:	10 92 fe 05 	sts	0x05FE, r1
	Config.RudderPol = NORMAL;
    30e8:	10 92 d5 07 	sts	0x07D5, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    30ec:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    30ee:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    30f0:	1f 9b       	sbis	0x03, 7	; 3
    30f2:	d2 c0       	rjmp	.+420    	; 0x3298 <Display_sticks+0x1d8>
    30f4:	c1 11       	cpse	r28, r1
    30f6:	d2 c0       	rjmp	.+420    	; 0x329c <Display_sticks+0x1dc>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	91 e0       	ldi	r25, 0x01	; 1
    30fc:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
    3100:	92 e0       	ldi	r25, 0x02	; 2
    3102:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    3104:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    3106:	61 e1       	ldi	r22, 0x11	; 17
    3108:	61 0f       	add	r22, r17
    310a:	ee 24       	eor	r14, r14
    310c:	e3 94       	inc	r14
    310e:	08 e2       	ldi	r16, 0x28	; 40
    3110:	28 e2       	ldi	r18, 0x28	; 40
    3112:	40 e0       	ldi	r20, 0x00	; 0
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	91 e0       	ldi	r25, 0x01	; 1
    3118:	0e 94 80 27 	call	0x4f00	; 0x4f00 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    311c:	86 e2       	ldi	r24, 0x26	; 38
    311e:	b8 2e       	mov	r11, r24
    3120:	b1 0e       	add	r11, r17
    3122:	20 e3       	ldi	r18, 0x30	; 48
    3124:	21 0f       	add	r18, r17
    3126:	03 e0       	ldi	r16, 0x03	; 3
    3128:	44 e1       	ldi	r20, 0x14	; 20
    312a:	6b 2d       	mov	r22, r11
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	91 e0       	ldi	r25, 0x01	; 1
    3130:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    3134:	28 e3       	ldi	r18, 0x38	; 56
    3136:	21 0f       	add	r18, r17
    3138:	69 e2       	ldi	r22, 0x29	; 41
    313a:	61 0f       	add	r22, r17
    313c:	06 e0       	ldi	r16, 0x06	; 6
    313e:	45 e1       	ldi	r20, 0x15	; 21
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	91 e0       	ldi	r25, 0x01	; 1
    3144:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    3148:	01 e0       	ldi	r16, 0x01	; 1
    314a:	22 e0       	ldi	r18, 0x02	; 2
    314c:	45 e1       	ldi	r20, 0x15	; 21
    314e:	6b 2d       	mov	r22, r11
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	91 e0       	ldi	r25, 0x01	; 1
    3154:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    3158:	63 e3       	ldi	r22, 0x33	; 51
    315a:	61 0f       	add	r22, r17
    315c:	24 e0       	ldi	r18, 0x04	; 4
    315e:	45 e0       	ldi	r20, 0x05	; 5
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	91 e0       	ldi	r25, 0x01	; 1
    3164:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <fillcircle>
    3168:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    316a:	11 f0       	breq	.+4      	; 0x3170 <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    316c:	14 e3       	ldi	r17, 0x34	; 52
    316e:	cb cf       	rjmp	.-106    	; 0x3106 <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    3170:	29 e3       	ldi	r18, 0x39	; 57
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	50 e0       	ldi	r21, 0x00	; 0
    3178:	69 e0       	ldi	r22, 0x09	; 9
    317a:	71 e0       	ldi	r23, 0x01	; 1
    317c:	8c e0       	ldi	r24, 0x0C	; 12
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    3184:	0e 94 7c 4b 	call	0x96f8	; 0x96f8 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    3188:	80 91 78 08 	lds	r24, 0x0878
    318c:	90 91 79 08 	lds	r25, 0x0879
    3190:	80 33       	cpi	r24, 0x30	; 48
    3192:	98 4f       	sbci	r25, 0xF8	; 248
    3194:	3c f0       	brlt	.+14     	; 0x31a4 <Display_sticks+0xe4>
    3196:	80 91 78 08 	lds	r24, 0x0878
    319a:	90 91 79 08 	lds	r25, 0x0879
    319e:	81 3d       	cpi	r24, 0xD1	; 209
    31a0:	97 40       	sbci	r25, 0x07	; 7
    31a2:	6c f0       	brlt	.+26     	; 0x31be <Display_sticks+0xfe>
    31a4:	d1 11       	cpse	r29, r1
    31a6:	0b c0       	rjmp	.+22     	; 0x31be <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    31a8:	2b e2       	ldi	r18, 0x2B	; 43
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e1       	ldi	r20, 0x10	; 16
    31ae:	50 e0       	ldi	r21, 0x00	; 0
    31b0:	69 ee       	ldi	r22, 0xE9	; 233
    31b2:	73 e0       	ldi	r23, 0x03	; 3
    31b4:	87 e8       	ldi	r24, 0x87	; 135
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
    31bc:	68 c0       	rjmp	.+208    	; 0x328e <Display_sticks+0x1ce>
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    31be:	80 91 78 08 	lds	r24, 0x0878
    31c2:	90 91 79 08 	lds	r25, 0x0879
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
    31c6:	84 3f       	cpi	r24, 0xF4	; 244
    31c8:	91 40       	sbci	r25, 0x01	; 1
    31ca:	3c f4       	brge	.+14     	; 0x31da <Display_sticks+0x11a>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    31cc:	80 91 78 08 	lds	r24, 0x0878
    31d0:	90 91 79 08 	lds	r25, 0x0879
    31d4:	8d 30       	cpi	r24, 0x0D	; 13
    31d6:	9e 4f       	sbci	r25, 0xFE	; 254
    31d8:	e4 f4       	brge	.+56     	; 0x3212 <Display_sticks+0x152>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    31da:	80 91 7a 08 	lds	r24, 0x087A
    31de:	90 91 7b 08 	lds	r25, 0x087B
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    31e2:	84 3f       	cpi	r24, 0xF4	; 244
    31e4:	91 40       	sbci	r25, 0x01	; 1
    31e6:	3c f4       	brge	.+14     	; 0x31f6 <Display_sticks+0x136>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    31e8:	80 91 7a 08 	lds	r24, 0x087A
    31ec:	90 91 7b 08 	lds	r25, 0x087B
    31f0:	8d 30       	cpi	r24, 0x0D	; 13
    31f2:	9e 4f       	sbci	r25, 0xFE	; 254
    31f4:	74 f4       	brge	.+28     	; 0x3212 <Display_sticks+0x152>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    31f6:	80 91 7c 08 	lds	r24, 0x087C
    31fa:	90 91 7d 08 	lds	r25, 0x087D
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    31fe:	84 3f       	cpi	r24, 0xF4	; 244
    3200:	91 40       	sbci	r25, 0x01	; 1
    3202:	9c f4       	brge	.+38     	; 0x322a <Display_sticks+0x16a>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    3204:	80 91 7c 08 	lds	r24, 0x087C
    3208:	90 91 7d 08 	lds	r25, 0x087D
    320c:	8d 30       	cpi	r24, 0x0D	; 13
    320e:	9e 4f       	sbci	r25, 0xFE	; 254
    3210:	64 f0       	brlt	.+24     	; 0x322a <Display_sticks+0x16a>
					)
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    3212:	2b e2       	ldi	r18, 0x2B	; 43
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	49 e0       	ldi	r20, 0x09	; 9
    3218:	50 e0       	ldi	r21, 0x00	; 0
    321a:	69 ee       	ldi	r22, 0xE9	; 233
    321c:	73 e0       	ldi	r23, 0x03	; 3
    321e:	88 e8       	ldi	r24, 0x88	; 136
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
					)
			{
				CalibrateStarted = true;
    3226:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    3228:	32 c0       	rjmp	.+100    	; 0x328e <Display_sticks+0x1ce>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    322a:	80 91 78 08 	lds	r24, 0x0878
    322e:	90 91 79 08 	lds	r25, 0x0879
    3232:	97 ff       	sbrs	r25, 7
    3234:	03 c0       	rjmp	.+6      	; 0x323c <Display_sticks+0x17c>
				{
					Config.AileronPol = REVERSED;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	80 93 d6 07 	sts	0x07D6, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    323c:	80 91 7a 08 	lds	r24, 0x087A
    3240:	90 91 7b 08 	lds	r25, 0x087B
    3244:	97 ff       	sbrs	r25, 7
    3246:	03 c0       	rjmp	.+6      	; 0x324e <Display_sticks+0x18e>
				{
					Config.ElevatorPol = REVERSED;
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	80 93 fe 05 	sts	0x05FE, r24
				}

				if (RCinputs[RUDDER] < 0)
    324e:	80 91 7c 08 	lds	r24, 0x087C
    3252:	90 91 7d 08 	lds	r25, 0x087D
    3256:	97 ff       	sbrs	r25, 7
    3258:	03 c0       	rjmp	.+6      	; 0x3260 <Display_sticks+0x1a0>
				{
					Config.RudderPol = REVERSED;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	80 93 d5 07 	sts	0x07D5, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    3260:	80 91 78 08 	lds	r24, 0x0878
    3264:	90 91 79 08 	lds	r25, 0x0879
    3268:	18 16       	cp	r1, r24
    326a:	19 06       	cpc	r1, r25
    326c:	84 f4       	brge	.+32     	; 0x328e <Display_sticks+0x1ce>
    326e:	80 91 7a 08 	lds	r24, 0x087A
    3272:	90 91 7b 08 	lds	r25, 0x087B
    3276:	18 16       	cp	r1, r24
    3278:	19 06       	cpc	r1, r25
    327a:	4c f4       	brge	.+18     	; 0x328e <Display_sticks+0x1ce>
    327c:	80 91 7c 08 	lds	r24, 0x087C
    3280:	90 91 7d 08 	lds	r25, 0x087D
    3284:	c1 e0       	ldi	r28, 0x01	; 1
    3286:	18 16       	cp	r1, r24
    3288:	19 06       	cpc	r1, r25
    328a:	0c f0       	brlt	.+2      	; 0x328e <Display_sticks+0x1ce>
    328c:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	91 e0       	ldi	r25, 0x01	; 1
    3292:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
    3296:	2c cf       	rjmp	.-424    	; 0x30f0 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    3298:	cc 23       	and	r28, r28
    329a:	39 f1       	breq	.+78     	; 0x32ea <Display_sticks+0x22a>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    329c:	2b e2       	ldi	r18, 0x2B	; 43
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	48 e2       	ldi	r20, 0x28	; 40
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	69 ee       	ldi	r22, 0xE9	; 233
    32a6:	73 e0       	ldi	r23, 0x03	; 3
    32a8:	89 e8       	ldi	r24, 0x89	; 137
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	91 e0       	ldi	r25, 0x01	; 1
    32b4:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
		clear_buffer(buffer);
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	91 e0       	ldi	r25, 0x01	; 1
    32bc:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
    32c0:	8f e7       	ldi	r24, 0x7F	; 127
    32c2:	94 e8       	ldi	r25, 0x84	; 132
    32c4:	2e e1       	ldi	r18, 0x1E	; 30
    32c6:	81 50       	subi	r24, 0x01	; 1
    32c8:	90 40       	sbci	r25, 0x00	; 0
    32ca:	20 40       	sbci	r18, 0x00	; 0
    32cc:	e1 f7       	brne	.-8      	; 0x32c6 <Display_sticks+0x206>
    32ce:	00 c0       	rjmp	.+0      	; 0x32d0 <Display_sticks+0x210>
    32d0:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	ff 90       	pop	r15
    32dc:	ef 90       	pop	r14
    32de:	df 90       	pop	r13
    32e0:	cf 90       	pop	r12
    32e2:	bf 90       	pop	r11
    32e4:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    32e6:	0c 94 be 19 	jmp	0x337c	; 0x337c <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    32ea:	d0 92 d6 07 	sts	0x07D6, r13
		Config.ElevatorPol = temp_elevator;
    32ee:	f0 92 fe 05 	sts	0x05FE, r15
		Config.RudderPol = temp_rudder;
    32f2:	a0 92 d5 07 	sts	0x07D5, r10
	}
}
    32f6:	df 91       	pop	r29
    32f8:	cf 91       	pop	r28
    32fa:	1f 91       	pop	r17
    32fc:	0f 91       	pop	r16
    32fe:	ff 90       	pop	r15
    3300:	ef 90       	pop	r14
    3302:	df 90       	pop	r13
    3304:	cf 90       	pop	r12
    3306:	bf 90       	pop	r11
    3308:	af 90       	pop	r10
    330a:	08 95       	ret

0000330c <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    330c:	0f 93       	push	r16
    330e:	1f 93       	push	r17
    3310:	cf 93       	push	r28
    3312:	df 93       	push	r29
    3314:	1f 92       	push	r1
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    331c:	69 83       	std	Y+1, r22	; 0x01
    331e:	0e 94 7b 51 	call	0xa2f6	; 0xa2f6 <__eerd_byte_m644pa>
    3322:	69 81       	ldd	r22, Y+1	; 0x01
    3324:	86 17       	cp	r24, r22
    3326:	41 f0       	breq	.+16     	; 0x3338 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    3328:	c8 01       	movw	r24, r16
	}
}
    332a:	0f 90       	pop	r0
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    3334:	0c 94 83 51 	jmp	0xa306	; 0xa306 <__eewr_byte_m644pa>
	}
}
    3338:	0f 90       	pop	r0
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	08 95       	ret

00003344 <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    3344:	ef 92       	push	r14
    3346:	ff 92       	push	r15
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	cf 93       	push	r28
    334e:	df 93       	push	r29
    3350:	ec 01       	movw	r28, r24
    3352:	8b 01       	movw	r16, r22
    3354:	7a 01       	movw	r14, r20
    3356:	e8 0e       	add	r14, r24
    3358:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    335a:	ce 15       	cp	r28, r14
    335c:	df 05       	cpc	r29, r15
    335e:	39 f0       	breq	.+14     	; 0x336e <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    3360:	69 91       	ld	r22, Y+
    3362:	c8 01       	movw	r24, r16
    3364:	0e 94 86 19 	call	0x330c	; 0x330c <eeprom_write_byte_changed>
		src++;
		dest++;
    3368:	0f 5f       	subi	r16, 0xFF	; 255
    336a:	1f 4f       	sbci	r17, 0xFF	; 255
    336c:	f6 cf       	rjmp	.-20     	; 0x335a <eeprom_write_block_changes+0x16>
	}
}
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	1f 91       	pop	r17
    3374:	0f 91       	pop	r16
    3376:	ff 90       	pop	r15
    3378:	ef 90       	pop	r14
    337a:	08 95       	ret

0000337c <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    337c:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    337e:	4f e1       	ldi	r20, 0x1F	; 31
    3380:	52 e0       	ldi	r21, 0x02	; 2
    3382:	60 e0       	ldi	r22, 0x00	; 0
    3384:	70 e0       	ldi	r23, 0x00	; 0
    3386:	8d ec       	ldi	r24, 0xCD	; 205
    3388:	95 e0       	ldi	r25, 0x05	; 5
    338a:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_block_changes>
	sei();
    338e:	78 94       	sei
    3390:	08 95       	ret

00003392 <Update_V1_0_to_V1_1_B7>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 Beta 7 structure
void Update_V1_0_to_V1_1_B7(void)
{
    3392:	2f 92       	push	r2
    3394:	3f 92       	push	r3
    3396:	4f 92       	push	r4
    3398:	5f 92       	push	r5
    339a:	6f 92       	push	r6
    339c:	7f 92       	push	r7
    339e:	8f 92       	push	r8
    33a0:	9f 92       	push	r9
    33a2:	af 92       	push	r10
    33a4:	bf 92       	push	r11
    33a6:	cf 92       	push	r12
    33a8:	df 92       	push	r13
    33aa:	ef 92       	push	r14
    33ac:	ff 92       	push	r15
    33ae:	0f 93       	push	r16
    33b0:	1f 93       	push	r17
    33b2:	cf 93       	push	r28
    33b4:	df 93       	push	r29
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	c5 54       	subi	r28, 0x45	; 69
    33bc:	d1 40       	sbci	r29, 0x01	; 1
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume. For some reason it gets clobbered.
	// We mustn't use hard-coded values are these change each version.
	// Use an offset from the current Config structure address
	memcpy((void*)&temp,(void*)((&Config.setup) + (377)),1);
    33c8:	40 91 46 07 	lds	r20, 0x0746
    33cc:	cf 5b       	subi	r28, 0xBF	; 191
    33ce:	de 4f       	sbci	r29, 0xFE	; 254
    33d0:	48 83       	st	Y, r20
    33d2:	c1 54       	subi	r28, 0x41	; 65
    33d4:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
    33d6:	4a e4       	ldi	r20, 0x4A	; 74
    33d8:	50 e0       	ldi	r21, 0x00	; 0
    33da:	67 e4       	ldi	r22, 0x47	; 71
    33dc:	77 e0       	ldi	r23, 0x07	; 7
    33de:	8f e8       	ldi	r24, 0x8F	; 143
    33e0:	97 e0       	ldi	r25, 0x07	; 7
    33e2:	0e 94 34 51 	call	0xa268	; 0xa268 <memmove>
    33e6:	2f e5       	ldi	r18, 0x5F	; 95
    33e8:	36 e0       	ldi	r19, 0x06	; 6
    33ea:	ae 01       	movw	r20, r28
    33ec:	4f 5c       	subi	r20, 0xCF	; 207
    33ee:	5e 4f       	sbci	r21, 0xFE	; 254
    33f0:	ce 01       	movw	r24, r28
    33f2:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    33f4:	6d e1       	ldi	r22, 0x1D	; 29
    33f6:	f9 01       	movw	r30, r18
    33f8:	dc 01       	movw	r26, r24
    33fa:	76 2f       	mov	r23, r22
    33fc:	01 90       	ld	r0, Z+
    33fe:	0d 92       	st	X+, r0
    3400:	7a 95       	dec	r23
    3402:	e1 f7       	brne	.-8      	; 0x33fc <Update_V1_0_to_V1_1_B7+0x6a>
    3404:	86 96       	adiw	r24, 0x26	; 38
    3406:	23 5e       	subi	r18, 0xE3	; 227
    3408:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    340a:	84 17       	cp	r24, r20
    340c:	95 07       	cpc	r25, r21
    340e:	99 f7       	brne	.-26     	; 0x33f6 <Update_V1_0_to_V1_1_B7+0x64>
    3410:	4e 01       	movw	r8, r28
    3412:	83 e1       	ldi	r24, 0x13	; 19
    3414:	88 0e       	add	r8, r24
    3416:	91 1c       	adc	r9, r1
    3418:	5e 01       	movw	r10, r28
    341a:	94 e1       	ldi	r25, 0x14	; 20
    341c:	a9 0e       	add	r10, r25
    341e:	b1 1c       	adc	r11, r1
    3420:	6e 01       	movw	r12, r28
    3422:	e5 e1       	ldi	r30, 0x15	; 21
    3424:	ce 0e       	add	r12, r30
    3426:	d1 1c       	adc	r13, r1
    3428:	ce 01       	movw	r24, r28
    342a:	46 96       	adiw	r24, 0x16	; 22
    342c:	cf 5c       	subi	r28, 0xCF	; 207
    342e:	de 4f       	sbci	r29, 0xFE	; 254
    3430:	99 83       	std	Y+1, r25	; 0x01
    3432:	88 83       	st	Y, r24
    3434:	c1 53       	subi	r28, 0x31	; 49
    3436:	d1 40       	sbci	r29, 0x01	; 1
    3438:	8e 01       	movw	r16, r28
    343a:	02 5e       	subi	r16, 0xE2	; 226
    343c:	1f 4f       	sbci	r17, 0xFF	; 255
    343e:	fe 01       	movw	r30, r28
    3440:	7d 96       	adiw	r30, 0x1d	; 29
    3442:	c7 5c       	subi	r28, 0xC7	; 199
    3444:	de 4f       	sbci	r29, 0xFE	; 254
    3446:	f9 83       	std	Y+1, r31	; 0x01
    3448:	e8 83       	st	Y, r30
    344a:	c9 53       	subi	r28, 0x39	; 57
    344c:	d1 40       	sbci	r29, 0x01	; 1
    344e:	06 96       	adiw	r24, 0x06	; 6
    3450:	cd 5c       	subi	r28, 0xCD	; 205
    3452:	de 4f       	sbci	r29, 0xFE	; 254
    3454:	99 83       	std	Y+1, r25	; 0x01
    3456:	88 83       	st	Y, r24
    3458:	c3 53       	subi	r28, 0x33	; 51
    345a:	d1 40       	sbci	r29, 0x01	; 1
    345c:	32 97       	sbiw	r30, 0x02	; 2
    345e:	c3 5c       	subi	r28, 0xC3	; 195
    3460:	de 4f       	sbci	r29, 0xFE	; 254
    3462:	f9 83       	std	Y+1, r31	; 0x01
    3464:	e8 83       	st	Y, r30
    3466:	cd 53       	subi	r28, 0x3D	; 61
    3468:	d1 40       	sbci	r29, 0x01	; 1
    346a:	02 97       	sbiw	r24, 0x02	; 2
    346c:	c9 5c       	subi	r28, 0xC9	; 201
    346e:	de 4f       	sbci	r29, 0xFE	; 254
    3470:	99 83       	std	Y+1, r25	; 0x01
    3472:	88 83       	st	Y, r24
    3474:	c7 53       	subi	r28, 0x37	; 55
    3476:	d1 40       	sbci	r29, 0x01	; 1
    3478:	32 97       	sbiw	r30, 0x02	; 2
    347a:	c5 5c       	subi	r28, 0xC5	; 197
    347c:	de 4f       	sbci	r29, 0xFE	; 254
    347e:	f9 83       	std	Y+1, r31	; 0x01
    3480:	e8 83       	st	Y, r30
    3482:	cb 53       	subi	r28, 0x3B	; 59
    3484:	d1 40       	sbci	r29, 0x01	; 1
    3486:	02 97       	sbiw	r24, 0x02	; 2
    3488:	cb 5c       	subi	r28, 0xCB	; 203
    348a:	de 4f       	sbci	r29, 0xFE	; 254
    348c:	99 83       	std	Y+1, r25	; 0x01
    348e:	88 83       	st	Y, r24
    3490:	c5 53       	subi	r28, 0x35	; 53
    3492:	d1 40       	sbci	r29, 0x01	; 1
    3494:	7e 01       	movw	r14, r28
    3496:	97 e1       	ldi	r25, 0x17	; 23
    3498:	e9 0e       	add	r14, r25
    349a:	f1 1c       	adc	r15, r1
    349c:	3e 01       	movw	r6, r28
    349e:	e5 e0       	ldi	r30, 0x05	; 5
    34a0:	6e 0e       	add	r6, r30
    34a2:	71 1c       	adc	r7, r1
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	8c 0f       	add	r24, r28
    34aa:	9d 1f       	adc	r25, r29
    34ac:	83 5b       	subi	r24, 0xB3	; 179
    34ae:	9e 4f       	sbci	r25, 0xFE	; 254
    34b0:	ce 5b       	subi	r28, 0xBE	; 190
    34b2:	de 4f       	sbci	r29, 0xFE	; 254
    34b4:	99 83       	std	Y+1, r25	; 0x01
    34b6:	88 83       	st	Y, r24
    34b8:	c2 54       	subi	r28, 0x42	; 66
    34ba:	d1 40       	sbci	r29, 0x01	; 1
    34bc:	fe 01       	movw	r30, r28
    34be:	31 96       	adiw	r30, 0x01	; 1
    34c0:	c1 5c       	subi	r28, 0xC1	; 193
    34c2:	de 4f       	sbci	r29, 0xFE	; 254
    34c4:	f9 83       	std	Y+1, r31	; 0x01
    34c6:	e8 83       	st	Y, r30
    34c8:	cf 53       	subi	r28, 0x3F	; 63
    34ca:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    34cc:	82 e0       	ldi	r24, 0x02	; 2
    34ce:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    34d0:	44 24       	eor	r4, r4
    34d2:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    34d4:	49 e1       	ldi	r20, 0x19	; 25
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	b3 01       	movw	r22, r6
    34da:	c8 01       	movw	r24, r16
    34dc:	48 97       	sbiw	r24, 0x18	; 24
    34de:	0e 94 34 51 	call	0xa268	; 0xa268 <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    34e2:	f4 01       	movw	r30, r8
    34e4:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    34e6:	f5 01       	movw	r30, r10
    34e8:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    34ea:	f6 01       	movw	r30, r12
    34ec:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    34ee:	cf 5c       	subi	r28, 0xCF	; 207
    34f0:	de 4f       	sbci	r29, 0xFE	; 254
    34f2:	e8 81       	ld	r30, Y
    34f4:	f9 81       	ldd	r31, Y+1	; 0x01
    34f6:	c1 53       	subi	r28, 0x31	; 49
    34f8:	d1 40       	sbci	r29, 0x01	; 1
    34fa:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    34fc:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
    34fe:	36 fe       	sbrs	r3, 6
    3500:	02 c0       	rjmp	.+4      	; 0x3506 <Update_V1_0_to_V1_1_B7+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    3502:	50 82       	st	Z, r5
    3504:	01 c0       	rjmp	.+2      	; 0x3508 <Update_V1_0_to_V1_1_B7+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    3506:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    3508:	48 e0       	ldi	r20, 0x08	; 8
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	b7 01       	movw	r22, r14
    350e:	c8 01       	movw	r24, r16
    3510:	01 96       	adiw	r24, 0x01	; 1
    3512:	cc 5b       	subi	r28, 0xBC	; 188
    3514:	de 4f       	sbci	r29, 0xFE	; 254
    3516:	28 83       	st	Y, r18
    3518:	c4 54       	subi	r28, 0x44	; 68
    351a:	d1 40       	sbci	r29, 0x01	; 1
    351c:	cb 5b       	subi	r28, 0xBB	; 187
    351e:	de 4f       	sbci	r29, 0xFE	; 254
    3520:	38 83       	st	Y, r19
    3522:	c5 54       	subi	r28, 0x45	; 69
    3524:	d1 40       	sbci	r29, 0x01	; 1
    3526:	0e 94 34 51 	call	0xa268	; 0xa268 <memmove>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	cb 5b       	subi	r28, 0xBB	; 187
    3530:	de 4f       	sbci	r29, 0xFE	; 254
    3532:	38 81       	ld	r19, Y
    3534:	c5 54       	subi	r28, 0x45	; 69
    3536:	d1 40       	sbci	r29, 0x01	; 1
    3538:	cc 5b       	subi	r28, 0xBC	; 188
    353a:	de 4f       	sbci	r29, 0xFE	; 254
    353c:	28 81       	ld	r18, Y
    353e:	c4 54       	subi	r28, 0x44	; 68
    3540:	d1 40       	sbci	r29, 0x01	; 1
    3542:	c1 5c       	subi	r28, 0xC1	; 193
    3544:	de 4f       	sbci	r29, 0xFE	; 254
    3546:	e8 81       	ld	r30, Y
    3548:	f9 81       	ldd	r31, Y+1	; 0x01
    354a:	cf 53       	subi	r28, 0x3F	; 63
    354c:	d1 40       	sbci	r29, 0x01	; 1
    354e:	e8 0f       	add	r30, r24
    3550:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    3552:	46 8d       	ldd	r20, Z+30	; 0x1e
    3554:	4d 30       	cpi	r20, 0x0D	; 13
    3556:	11 f4       	brne	.+4      	; 0x355c <Update_V1_0_to_V1_1_B7+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    3558:	4f e0       	ldi	r20, 0x0F	; 15
    355a:	46 8f       	std	Z+30, r20	; 0x1e
    355c:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    355e:	88 30       	cpi	r24, 0x08	; 8
    3560:	91 05       	cpc	r25, r1
    3562:	79 f7       	brne	.-34     	; 0x3542 <Update_V1_0_to_V1_1_B7+0x1b0>
		// P1 roll gyro
		if (P1_sensors & (1 << RollGyro))
		{
			if (P1_scale & (1 << RollScale))
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    3564:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if (P1_sensors & (1 << RollGyro))
    3566:	30 fe       	sbrs	r3, 0
    3568:	06 c0       	rjmp	.+12     	; 0x3576 <Update_V1_0_to_V1_1_B7+0x1e4>
		{
			if (P1_scale & (1 << RollScale))
    356a:	30 ff       	sbrs	r19, 0
    356c:	02 c0       	rjmp	.+4      	; 0x3572 <Update_V1_0_to_V1_1_B7+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    356e:	50 82       	st	Z, r5
    3570:	03 c0       	rjmp	.+6      	; 0x3578 <Update_V1_0_to_V1_1_B7+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    3572:	40 82       	st	Z, r4
    3574:	01 c0       	rjmp	.+2      	; 0x3578 <Update_V1_0_to_V1_1_B7+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    3576:	10 82       	st	Z, r1
		// P2 roll gyro
		if (P2_sensors & (1 << RollGyro))
		{
			if (P2_scale & (1 << RollScale))
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    3578:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if (P2_sensors & (1 << RollGyro))
    357a:	20 ff       	sbrs	r18, 0
    357c:	06 c0       	rjmp	.+12     	; 0x358a <Update_V1_0_to_V1_1_B7+0x1f8>
		{
			if (P2_scale & (1 << RollScale))
    357e:	20 fe       	sbrs	r2, 0
    3580:	02 c0       	rjmp	.+4      	; 0x3586 <Update_V1_0_to_V1_1_B7+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    3582:	50 82       	st	Z, r5
    3584:	03 c0       	rjmp	.+6      	; 0x358c <Update_V1_0_to_V1_1_B7+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    3586:	40 82       	st	Z, r4
    3588:	01 c0       	rjmp	.+2      	; 0x358c <Update_V1_0_to_V1_1_B7+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    358a:	10 82       	st	Z, r1
		// P1 pitch gyro
		if (P1_sensors & (1 << PitchGyro))
		{
			if (P1_scale & (1 << PitchScale))
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    358c:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if (P1_sensors & (1 << PitchGyro))
    358e:	31 fe       	sbrs	r3, 1
    3590:	06 c0       	rjmp	.+12     	; 0x359e <Update_V1_0_to_V1_1_B7+0x20c>
		{
			if (P1_scale & (1 << PitchScale))
    3592:	31 ff       	sbrs	r19, 1
    3594:	02 c0       	rjmp	.+4      	; 0x359a <Update_V1_0_to_V1_1_B7+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    3596:	50 82       	st	Z, r5
    3598:	03 c0       	rjmp	.+6      	; 0x35a0 <Update_V1_0_to_V1_1_B7+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    359a:	40 82       	st	Z, r4
    359c:	01 c0       	rjmp	.+2      	; 0x35a0 <Update_V1_0_to_V1_1_B7+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    359e:	10 82       	st	Z, r1
		// P2 pitch gyro
		if (P2_sensors & (1 << PitchGyro))
		{
			if (P2_scale & (1 << PitchScale))
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    35a0:	cf 5c       	subi	r28, 0xCF	; 207
    35a2:	de 4f       	sbci	r29, 0xFE	; 254
    35a4:	e8 81       	ld	r30, Y
    35a6:	f9 81       	ldd	r31, Y+1	; 0x01
    35a8:	c1 53       	subi	r28, 0x31	; 49
    35aa:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if (P2_sensors & (1 << PitchGyro))
    35ac:	21 ff       	sbrs	r18, 1
    35ae:	06 c0       	rjmp	.+12     	; 0x35bc <Update_V1_0_to_V1_1_B7+0x22a>
		{
			if (P2_scale & (1 << PitchScale))
    35b0:	21 fe       	sbrs	r2, 1
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <Update_V1_0_to_V1_1_B7+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    35b4:	50 82       	st	Z, r5
    35b6:	03 c0       	rjmp	.+6      	; 0x35be <Update_V1_0_to_V1_1_B7+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    35b8:	40 82       	st	Z, r4
    35ba:	01 c0       	rjmp	.+2      	; 0x35be <Update_V1_0_to_V1_1_B7+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    35bc:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if (P1_sensors & (1 << YawGyro))
		{
			if (P1_scale & (1 << YawScale))
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    35be:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if (P1_sensors & (1 << YawGyro))
    35c0:	32 fe       	sbrs	r3, 2
    35c2:	06 c0       	rjmp	.+12     	; 0x35d0 <Update_V1_0_to_V1_1_B7+0x23e>
		{
			if (P1_scale & (1 << YawScale))
    35c4:	32 ff       	sbrs	r19, 2
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <Update_V1_0_to_V1_1_B7+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    35c8:	50 82       	st	Z, r5
    35ca:	03 c0       	rjmp	.+6      	; 0x35d2 <Update_V1_0_to_V1_1_B7+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    35cc:	40 82       	st	Z, r4
    35ce:	01 c0       	rjmp	.+2      	; 0x35d2 <Update_V1_0_to_V1_1_B7+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    35d0:	10 82       	st	Z, r1
		// P2 yaw gyro
		if (P2_sensors & (1 << YawGyro))
		{
			if (P2_scale & (1 << YawScale))
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    35d2:	cb 5c       	subi	r28, 0xCB	; 203
    35d4:	de 4f       	sbci	r29, 0xFE	; 254
    35d6:	e8 81       	ld	r30, Y
    35d8:	f9 81       	ldd	r31, Y+1	; 0x01
    35da:	c5 53       	subi	r28, 0x35	; 53
    35dc:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if (P2_sensors & (1 << YawGyro))
    35de:	22 ff       	sbrs	r18, 2
    35e0:	06 c0       	rjmp	.+12     	; 0x35ee <Update_V1_0_to_V1_1_B7+0x25c>
		{
			if (P2_scale & (1 << YawScale))
    35e2:	22 fe       	sbrs	r2, 2
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <Update_V1_0_to_V1_1_B7+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    35e6:	50 82       	st	Z, r5
    35e8:	03 c0       	rjmp	.+6      	; 0x35f0 <Update_V1_0_to_V1_1_B7+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    35ea:	40 82       	st	Z, r4
    35ec:	01 c0       	rjmp	.+2      	; 0x35f0 <Update_V1_0_to_V1_1_B7+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    35ee:	10 82       	st	Z, r1
		// P1 roll acc
		if (P1_sensors & (1 << RollAcc))
		{
			if (P1_scale & (1 << AccRollScale))
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    35f0:	c5 5c       	subi	r28, 0xC5	; 197
    35f2:	de 4f       	sbci	r29, 0xFE	; 254
    35f4:	e8 81       	ld	r30, Y
    35f6:	f9 81       	ldd	r31, Y+1	; 0x01
    35f8:	cb 53       	subi	r28, 0x3B	; 59
    35fa:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if (P1_sensors & (1 << RollAcc))
    35fc:	33 fe       	sbrs	r3, 3
    35fe:	06 c0       	rjmp	.+12     	; 0x360c <Update_V1_0_to_V1_1_B7+0x27a>
		{
			if (P1_scale & (1 << AccRollScale))
    3600:	33 ff       	sbrs	r19, 3
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <Update_V1_0_to_V1_1_B7+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    3604:	50 82       	st	Z, r5
    3606:	03 c0       	rjmp	.+6      	; 0x360e <Update_V1_0_to_V1_1_B7+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    3608:	40 82       	st	Z, r4
    360a:	01 c0       	rjmp	.+2      	; 0x360e <Update_V1_0_to_V1_1_B7+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    360c:	10 82       	st	Z, r1
		// P2 roll acc
		if (P2_sensors & (1 << RollAcc))
		{
			if (P2_scale & (1 << AccRollScale))
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    360e:	c9 5c       	subi	r28, 0xC9	; 201
    3610:	de 4f       	sbci	r29, 0xFE	; 254
    3612:	e8 81       	ld	r30, Y
    3614:	f9 81       	ldd	r31, Y+1	; 0x01
    3616:	c7 53       	subi	r28, 0x37	; 55
    3618:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if (P2_sensors & (1 << RollAcc))
    361a:	23 ff       	sbrs	r18, 3
    361c:	06 c0       	rjmp	.+12     	; 0x362a <Update_V1_0_to_V1_1_B7+0x298>
		{
			if (P2_scale & (1 << AccRollScale))
    361e:	23 fe       	sbrs	r2, 3
    3620:	02 c0       	rjmp	.+4      	; 0x3626 <Update_V1_0_to_V1_1_B7+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    3622:	50 82       	st	Z, r5
    3624:	03 c0       	rjmp	.+6      	; 0x362c <Update_V1_0_to_V1_1_B7+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    3626:	40 82       	st	Z, r4
    3628:	01 c0       	rjmp	.+2      	; 0x362c <Update_V1_0_to_V1_1_B7+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    362a:	10 82       	st	Z, r1
		// P1 pitch acc
		if (P1_sensors & (1 << PitchAcc))
		{
			if (P1_scale & (1 << AccPitchScale))
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    362c:	c3 5c       	subi	r28, 0xC3	; 195
    362e:	de 4f       	sbci	r29, 0xFE	; 254
    3630:	e8 81       	ld	r30, Y
    3632:	f9 81       	ldd	r31, Y+1	; 0x01
    3634:	cd 53       	subi	r28, 0x3D	; 61
    3636:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if (P1_sensors & (1 << PitchAcc))
    3638:	34 fe       	sbrs	r3, 4
    363a:	06 c0       	rjmp	.+12     	; 0x3648 <Update_V1_0_to_V1_1_B7+0x2b6>
		{
			if (P1_scale & (1 << AccPitchScale))
    363c:	34 ff       	sbrs	r19, 4
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <Update_V1_0_to_V1_1_B7+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    3640:	50 82       	st	Z, r5
    3642:	03 c0       	rjmp	.+6      	; 0x364a <Update_V1_0_to_V1_1_B7+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    3644:	40 82       	st	Z, r4
    3646:	01 c0       	rjmp	.+2      	; 0x364a <Update_V1_0_to_V1_1_B7+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    3648:	10 82       	st	Z, r1
		// P2 pitch acc
		if (P2_sensors & (1 << PitchAcc))
		{
			if (P2_scale & (1 << AccPitchScale))
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    364a:	cd 5c       	subi	r28, 0xCD	; 205
    364c:	de 4f       	sbci	r29, 0xFE	; 254
    364e:	e8 81       	ld	r30, Y
    3650:	f9 81       	ldd	r31, Y+1	; 0x01
    3652:	c3 53       	subi	r28, 0x33	; 51
    3654:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if (P2_sensors & (1 << PitchAcc))
    3656:	24 ff       	sbrs	r18, 4
    3658:	06 c0       	rjmp	.+12     	; 0x3666 <Update_V1_0_to_V1_1_B7+0x2d4>
		{
			if (P2_scale & (1 << AccPitchScale))
    365a:	24 fe       	sbrs	r2, 4
    365c:	02 c0       	rjmp	.+4      	; 0x3662 <Update_V1_0_to_V1_1_B7+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    365e:	50 82       	st	Z, r5
    3660:	03 c0       	rjmp	.+6      	; 0x3668 <Update_V1_0_to_V1_1_B7+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    3662:	40 82       	st	Z, r4
    3664:	01 c0       	rjmp	.+2      	; 0x3668 <Update_V1_0_to_V1_1_B7+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    3666:	10 82       	st	Z, r1
		// P1 Z delta acc
		if (P1_sensors & (1 << ZDeltaAcc))
		{
			if (P1_scale & (1 << AccZScale))
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3668:	c7 5c       	subi	r28, 0xC7	; 199
    366a:	de 4f       	sbci	r29, 0xFE	; 254
    366c:	e8 81       	ld	r30, Y
    366e:	f9 81       	ldd	r31, Y+1	; 0x01
    3670:	c9 53       	subi	r28, 0x39	; 57
    3672:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if (P1_sensors & (1 << ZDeltaAcc))
    3674:	35 fe       	sbrs	r3, 5
    3676:	06 c0       	rjmp	.+12     	; 0x3684 <Update_V1_0_to_V1_1_B7+0x2f2>
		{
			if (P1_scale & (1 << AccZScale))
    3678:	35 ff       	sbrs	r19, 5
    367a:	02 c0       	rjmp	.+4      	; 0x3680 <Update_V1_0_to_V1_1_B7+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    367c:	50 82       	st	Z, r5
    367e:	03 c0       	rjmp	.+6      	; 0x3686 <Update_V1_0_to_V1_1_B7+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    3680:	40 82       	st	Z, r4
    3682:	01 c0       	rjmp	.+2      	; 0x3686 <Update_V1_0_to_V1_1_B7+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    3684:	10 82       	st	Z, r1
		// P2 Z delta acc
		if (P2_sensors & (1 << ZDeltaAcc))
		{
			if (P2_scale & (1 << AccZScale))
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    3686:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if (P2_sensors & (1 << ZDeltaAcc))
    3688:	25 ff       	sbrs	r18, 5
    368a:	06 c0       	rjmp	.+12     	; 0x3698 <Update_V1_0_to_V1_1_B7+0x306>
		{
			if (P2_scale & (1 << AccZScale))
    368c:	25 fe       	sbrs	r2, 5
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <Update_V1_0_to_V1_1_B7+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    3690:	50 82       	st	Z, r5
    3692:	03 c0       	rjmp	.+6      	; 0x369a <Update_V1_0_to_V1_1_B7+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    3694:	40 82       	st	Z, r4
    3696:	01 c0       	rjmp	.+2      	; 0x369a <Update_V1_0_to_V1_1_B7+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    3698:	10 82       	st	Z, r1
    369a:	c1 5c       	subi	r28, 0xC1	; 193
    369c:	de 4f       	sbci	r29, 0xFE	; 254
    369e:	88 81       	ld	r24, Y
    36a0:	99 81       	ldd	r25, Y+1	; 0x01
    36a2:	cf 53       	subi	r28, 0x3F	; 63
    36a4:	d1 40       	sbci	r29, 0x01	; 1
    36a6:	86 96       	adiw	r24, 0x26	; 38
    36a8:	c1 5c       	subi	r28, 0xC1	; 193
    36aa:	de 4f       	sbci	r29, 0xFE	; 254
    36ac:	99 83       	std	Y+1, r25	; 0x01
    36ae:	88 83       	st	Y, r24
    36b0:	cf 53       	subi	r28, 0x3F	; 63
    36b2:	d1 40       	sbci	r29, 0x01	; 1
    36b4:	96 e2       	ldi	r25, 0x26	; 38
    36b6:	89 0e       	add	r8, r25
    36b8:	91 1c       	adc	r9, r1
    36ba:	e6 e2       	ldi	r30, 0x26	; 38
    36bc:	ae 0e       	add	r10, r30
    36be:	b1 1c       	adc	r11, r1
    36c0:	f6 e2       	ldi	r31, 0x26	; 38
    36c2:	cf 0e       	add	r12, r31
    36c4:	d1 1c       	adc	r13, r1
    36c6:	cf 5c       	subi	r28, 0xCF	; 207
    36c8:	de 4f       	sbci	r29, 0xFE	; 254
    36ca:	88 81       	ld	r24, Y
    36cc:	99 81       	ldd	r25, Y+1	; 0x01
    36ce:	c1 53       	subi	r28, 0x31	; 49
    36d0:	d1 40       	sbci	r29, 0x01	; 1
    36d2:	86 96       	adiw	r24, 0x26	; 38
    36d4:	cf 5c       	subi	r28, 0xCF	; 207
    36d6:	de 4f       	sbci	r29, 0xFE	; 254
    36d8:	99 83       	std	Y+1, r25	; 0x01
    36da:	88 83       	st	Y, r24
    36dc:	c1 53       	subi	r28, 0x31	; 49
    36de:	d1 40       	sbci	r29, 0x01	; 1
    36e0:	0a 5d       	subi	r16, 0xDA	; 218
    36e2:	1f 4f       	sbci	r17, 0xFF	; 255
    36e4:	c7 5c       	subi	r28, 0xC7	; 199
    36e6:	de 4f       	sbci	r29, 0xFE	; 254
    36e8:	e8 81       	ld	r30, Y
    36ea:	f9 81       	ldd	r31, Y+1	; 0x01
    36ec:	c9 53       	subi	r28, 0x39	; 57
    36ee:	d1 40       	sbci	r29, 0x01	; 1
    36f0:	b6 96       	adiw	r30, 0x26	; 38
    36f2:	c7 5c       	subi	r28, 0xC7	; 199
    36f4:	de 4f       	sbci	r29, 0xFE	; 254
    36f6:	f9 83       	std	Y+1, r31	; 0x01
    36f8:	e8 83       	st	Y, r30
    36fa:	c9 53       	subi	r28, 0x39	; 57
    36fc:	d1 40       	sbci	r29, 0x01	; 1
    36fe:	cd 5c       	subi	r28, 0xCD	; 205
    3700:	de 4f       	sbci	r29, 0xFE	; 254
    3702:	88 81       	ld	r24, Y
    3704:	99 81       	ldd	r25, Y+1	; 0x01
    3706:	c3 53       	subi	r28, 0x33	; 51
    3708:	d1 40       	sbci	r29, 0x01	; 1
    370a:	86 96       	adiw	r24, 0x26	; 38
    370c:	cd 5c       	subi	r28, 0xCD	; 205
    370e:	de 4f       	sbci	r29, 0xFE	; 254
    3710:	99 83       	std	Y+1, r25	; 0x01
    3712:	88 83       	st	Y, r24
    3714:	c3 53       	subi	r28, 0x33	; 51
    3716:	d1 40       	sbci	r29, 0x01	; 1
    3718:	c3 5c       	subi	r28, 0xC3	; 195
    371a:	de 4f       	sbci	r29, 0xFE	; 254
    371c:	e8 81       	ld	r30, Y
    371e:	f9 81       	ldd	r31, Y+1	; 0x01
    3720:	cd 53       	subi	r28, 0x3D	; 61
    3722:	d1 40       	sbci	r29, 0x01	; 1
    3724:	b6 96       	adiw	r30, 0x26	; 38
    3726:	c3 5c       	subi	r28, 0xC3	; 195
    3728:	de 4f       	sbci	r29, 0xFE	; 254
    372a:	f9 83       	std	Y+1, r31	; 0x01
    372c:	e8 83       	st	Y, r30
    372e:	cd 53       	subi	r28, 0x3D	; 61
    3730:	d1 40       	sbci	r29, 0x01	; 1
    3732:	c9 5c       	subi	r28, 0xC9	; 201
    3734:	de 4f       	sbci	r29, 0xFE	; 254
    3736:	88 81       	ld	r24, Y
    3738:	99 81       	ldd	r25, Y+1	; 0x01
    373a:	c7 53       	subi	r28, 0x37	; 55
    373c:	d1 40       	sbci	r29, 0x01	; 1
    373e:	86 96       	adiw	r24, 0x26	; 38
    3740:	c9 5c       	subi	r28, 0xC9	; 201
    3742:	de 4f       	sbci	r29, 0xFE	; 254
    3744:	99 83       	std	Y+1, r25	; 0x01
    3746:	88 83       	st	Y, r24
    3748:	c7 53       	subi	r28, 0x37	; 55
    374a:	d1 40       	sbci	r29, 0x01	; 1
    374c:	c5 5c       	subi	r28, 0xC5	; 197
    374e:	de 4f       	sbci	r29, 0xFE	; 254
    3750:	e8 81       	ld	r30, Y
    3752:	f9 81       	ldd	r31, Y+1	; 0x01
    3754:	cb 53       	subi	r28, 0x3B	; 59
    3756:	d1 40       	sbci	r29, 0x01	; 1
    3758:	b6 96       	adiw	r30, 0x26	; 38
    375a:	c5 5c       	subi	r28, 0xC5	; 197
    375c:	de 4f       	sbci	r29, 0xFE	; 254
    375e:	f9 83       	std	Y+1, r31	; 0x01
    3760:	e8 83       	st	Y, r30
    3762:	cb 53       	subi	r28, 0x3B	; 59
    3764:	d1 40       	sbci	r29, 0x01	; 1
    3766:	cb 5c       	subi	r28, 0xCB	; 203
    3768:	de 4f       	sbci	r29, 0xFE	; 254
    376a:	88 81       	ld	r24, Y
    376c:	99 81       	ldd	r25, Y+1	; 0x01
    376e:	c5 53       	subi	r28, 0x35	; 53
    3770:	d1 40       	sbci	r29, 0x01	; 1
    3772:	86 96       	adiw	r24, 0x26	; 38
    3774:	cb 5c       	subi	r28, 0xCB	; 203
    3776:	de 4f       	sbci	r29, 0xFE	; 254
    3778:	99 83       	std	Y+1, r25	; 0x01
    377a:	88 83       	st	Y, r24
    377c:	c5 53       	subi	r28, 0x35	; 53
    377e:	d1 40       	sbci	r29, 0x01	; 1
    3780:	96 e2       	ldi	r25, 0x26	; 38
    3782:	e9 0e       	add	r14, r25
    3784:	f1 1c       	adc	r15, r1
    3786:	e6 e2       	ldi	r30, 0x26	; 38
    3788:	6e 0e       	add	r6, r30
    378a:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    378c:	ce 5b       	subi	r28, 0xBE	; 190
    378e:	de 4f       	sbci	r29, 0xFE	; 254
    3790:	88 81       	ld	r24, Y
    3792:	99 81       	ldd	r25, Y+1	; 0x01
    3794:	c2 54       	subi	r28, 0x42	; 66
    3796:	d1 40       	sbci	r29, 0x01	; 1
    3798:	08 17       	cp	r16, r24
    379a:	19 07       	cpc	r17, r25
    379c:	09 f0       	breq	.+2      	; 0x37a0 <Update_V1_0_to_V1_1_B7+0x40e>
    379e:	9a ce       	rjmp	.-716    	; 0x34d4 <Update_V1_0_to_V1_1_B7+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    37a0:	8f e2       	ldi	r24, 0x2F	; 47
    37a2:	91 e0       	ldi	r25, 0x01	; 1
    37a4:	fe 01       	movw	r30, r28
    37a6:	31 96       	adiw	r30, 0x01	; 1
    37a8:	af e5       	ldi	r26, 0x5F	; 95
    37aa:	b6 e0       	ldi	r27, 0x06	; 6
    37ac:	01 90       	ld	r0, Z+
    37ae:	0d 92       	st	X+, r0
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	e1 f7       	brne	.-8      	; 0x37ac <Update_V1_0_to_V1_1_B7+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; 
    37b4:	cf 5b       	subi	r28, 0xBF	; 191
    37b6:	de 4f       	sbci	r29, 0xFE	; 254
    37b8:	98 81       	ld	r25, Y
    37ba:	c1 54       	subi	r28, 0x41	; 65
    37bc:	d1 40       	sbci	r29, 0x01	; 1
    37be:	90 93 8e 07 	sts	0x078E, r25

	// Set magic number to V1.1 Beta 7 signature
	Config.setup = V1_1_B7_SIGNATURE;
    37c2:	86 e3       	ldi	r24, 0x36	; 54
    37c4:	80 93 cd 05 	sts	0x05CD, r24
}
    37c8:	cb 5b       	subi	r28, 0xBB	; 187
    37ca:	de 4f       	sbci	r29, 0xFE	; 254
    37cc:	0f b6       	in	r0, 0x3f	; 63
    37ce:	f8 94       	cli
    37d0:	de bf       	out	0x3e, r29	; 62
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	cd bf       	out	0x3d, r28	; 61
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	1f 91       	pop	r17
    37dc:	0f 91       	pop	r16
    37de:	ff 90       	pop	r15
    37e0:	ef 90       	pop	r14
    37e2:	df 90       	pop	r13
    37e4:	cf 90       	pop	r12
    37e6:	bf 90       	pop	r11
    37e8:	af 90       	pop	r10
    37ea:	9f 90       	pop	r9
    37ec:	8f 90       	pop	r8
    37ee:	7f 90       	pop	r7
    37f0:	6f 90       	pop	r6
    37f2:	5f 90       	pop	r5
    37f4:	4f 90       	pop	r4
    37f6:	3f 90       	pop	r3
    37f8:	2f 90       	pop	r2
    37fa:	08 95       	ret

000037fc <Update_V1_1_to_V1_1_B8>:

// Upgrade V1.1 beta 7 structure to V1.1 Beta 8 structure
void Update_V1_1_to_V1_1_B8(void)
{
    37fc:	cf 93       	push	r28
    37fe:	df 93       	push	r29
    3800:	cd b7       	in	r28, 0x3d	; 61
    3802:	de b7       	in	r29, 0x3e	; 62
    3804:	2c 97       	sbiw	r28, 0x0c	; 12
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	cd bf       	out	0x3d, r28	; 61
	int8_t	buffer[12];
	int8_t	temp = 0;
	
	// RC items - working perfectly, but really mustn't use variable names 
	// here as they MIGHT CHANGE LOCATION. Use an offset from the start instead
	buffer[0] = Config.RxMode;			// RxMode. Same as old RxMode
    3810:	80 91 f6 05 	lds	r24, 0x05F6
    3814:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = Config.MPU6050_LPF;		// Servo_rate
    3816:	80 91 5a 06 	lds	r24, 0x065A
    381a:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = Config.Servo_rate;		// PWM_Sync
    381c:	80 91 f7 05 	lds	r24, 0x05F7
    3820:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = Config.PWM_Sync;		// TxSeq
    3822:	80 91 f8 05 	lds	r24, 0x05F8
    3826:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = Config.TxSeq;			// FlightChan
    3828:	80 91 f9 05 	lds	r24, 0x05F9
    382c:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = Config.AileronPol;		// TransitionSpeed
    382e:	90 91 d6 07 	lds	r25, 0x07D6
    3832:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6] = Config.ElevatorPol;		// Transition_P1n
    3834:	90 91 fe 05 	lds	r25, 0x05FE
    3838:	9f 83       	std	Y+7, r25	; 0x07
	buffer[7] = Config.FlightChan;		// AileronPol
    383a:	90 91 fa 05 	lds	r25, 0x05FA
    383e:	98 87       	std	Y+8, r25	; 0x08
	buffer[8] = Config.TransitionSpeed;	// ElevatorPol
    3840:	90 91 fb 05 	lds	r25, 0x05FB
    3844:	99 87       	std	Y+9, r25	; 0x09
	
	// General items
	memcpy((void*)&temp,(void*)((&Config.CF_factor) + (1)),1);
    3846:	20 91 5e 06 	lds	r18, 0x065E
	buffer[9] = temp;					// Old MPU6050LPF value
    384a:	2a 87       	std	Y+10, r18	; 0x0a
	buffer[10] = Config.Transition_P1n; // Old RudderPol value
    384c:	90 91 fc 05 	lds	r25, 0x05FC
    3850:	9b 87       	std	Y+11, r25	; 0x0b
		
	// Copy back to RC items structure
	memcpy(&Config.RxMode, &buffer,9);
    3852:	39 e0       	ldi	r19, 0x09	; 9
    3854:	fe 01       	movw	r30, r28
    3856:	31 96       	adiw	r30, 0x01	; 1
    3858:	a6 ef       	ldi	r26, 0xF6	; 246
    385a:	b5 e0       	ldi	r27, 0x05	; 5
    385c:	01 90       	ld	r0, Z+
    385e:	0d 92       	st	X+, r0
    3860:	3a 95       	dec	r19
    3862:	e1 f7       	brne	.-8      	; 0x385c <Update_V1_1_to_V1_1_B8+0x60>
	
	// Copy back to General items structure
	Config.MPU6050_LPF = buffer[9];
    3864:	20 93 5a 06 	sts	0x065A, r18
	temp = buffer[10];					// Pass through the RudderPol value
	memcpy((void*)((&Config.CF_factor) + (1)), (void*)&temp,1);
    3868:	90 93 5e 06 	sts	0x065E, r25
	
	// "None" no longer an option for this channel
	if (Config.FlightChan == NOCHAN)
    386c:	88 30       	cpi	r24, 0x08	; 8
    386e:	19 f4       	brne	.+6      	; 0x3876 <Update_V1_1_to_V1_1_B8+0x7a>
	{
		Config.FlightChan = AUX3;
    3870:	87 e0       	ldi	r24, 0x07	; 7
    3872:	80 93 fa 05 	sts	0x05FA, r24
	}
	
	// Set magic number to V1.1 Beta 8 signature
	Config.setup = V1_1_B8_SIGNATURE;
    3876:	87 e3       	ldi	r24, 0x37	; 55
    3878:	80 93 cd 05 	sts	0x05CD, r24
}
    387c:	2c 96       	adiw	r28, 0x0c	; 12
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	de bf       	out	0x3e, r29	; 62
    3884:	0f be       	out	0x3f, r0	; 63
    3886:	cd bf       	out	0x3d, r28	; 61
    3888:	df 91       	pop	r29
    388a:	cf 91       	pop	r28
    388c:	08 95       	ret

0000388e <Update_V1_1B8_to_V1_1_B10>:

// Upgrade V1.1 B8 settings to V1.1 Beta 10 settings
void Update_V1_1B8_to_V1_1_B10(void)
{
	// Reset filters to more appropriate values
	Config.Acc_LPF = convert_filter_B8_B10(Config.Acc_LPF);
    388e:	e0 91 5b 06 	lds	r30, 0x065B
    3892:	e7 30       	cpi	r30, 0x07	; 7
    3894:	28 f4       	brcc	.+10     	; 0x38a0 <Update_V1_1B8_to_V1_1_B10+0x12>
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	e2 5f       	subi	r30, 0xF2	; 242
    389a:	fa 4f       	sbci	r31, 0xFA	; 250
    389c:	80 81       	ld	r24, Z
    389e:	01 c0       	rjmp	.+2      	; 0x38a2 <Update_V1_1B8_to_V1_1_B10+0x14>
    38a0:	87 e0       	ldi	r24, 0x07	; 7
    38a2:	80 93 5b 06 	sts	0x065B, r24
	Config.Gyro_LPF = convert_filter_B8_B10(Config.Gyro_LPF);
    38a6:	e0 91 5c 06 	lds	r30, 0x065C
    38aa:	e7 30       	cpi	r30, 0x07	; 7
    38ac:	28 f4       	brcc	.+10     	; 0x38b8 <Update_V1_1B8_to_V1_1_B10+0x2a>
    38ae:	f0 e0       	ldi	r31, 0x00	; 0
    38b0:	e2 5f       	subi	r30, 0xF2	; 242
    38b2:	fa 4f       	sbci	r31, 0xFA	; 250
    38b4:	80 81       	ld	r24, Z
    38b6:	01 c0       	rjmp	.+2      	; 0x38ba <Update_V1_1B8_to_V1_1_B10+0x2c>
    38b8:	87 e0       	ldi	r24, 0x07	; 7
    38ba:	80 93 5c 06 	sts	0x065C, r24

	// Set magic number to V1.1 Beta 10 signature
	Config.setup = V1_1_B10_SIGNATURE;
    38be:	88 e3       	ldi	r24, 0x38	; 56
    38c0:	80 93 cd 05 	sts	0x05CD, r24
    38c4:	08 95       	ret

000038c6 <Update_V1_1B10_to_V1_1_B12>:

// Upgrade V1.1 B10+ settings to V1.1 Beta 12 settings
void Update_V1_1B10_to_V1_1_B12(void)
{
	// Copy old RudderPol value to new location
	Config.AileronPol = Config.Preset;
    38c6:	ee e5       	ldi	r30, 0x5E	; 94
    38c8:	f6 e0       	ldi	r31, 0x06	; 6
    38ca:	80 81       	ld	r24, Z
    38cc:	80 93 d6 07 	sts	0x07D6, r24
	
	// Set preset to default and load it
	Config.Preset = QUADX;
    38d0:	10 82       	st	Z, r1

	// Set magic number to V1.1 Beta 11 signature
	Config.setup = V1_1_B12_SIGNATURE;
    38d2:	89 e3       	ldi	r24, 0x39	; 57
    38d4:	80 93 cd 05 	sts	0x05CD, r24
    38d8:	08 95       	ret

000038da <Update_V1_1B12_to_V1_1_B18>:

// Upgrade V1.1 B12+ settings to V1.2 Beta 3 settings
void Update_V1_1B12_to_V1_1_B18(void)
{
	// Copy old RudderPol value to new location
	Config.RudderPol = Config.Preset;
    38da:	80 91 5e 06 	lds	r24, 0x065E
    38de:	80 93 d5 07 	sts	0x07D5, r24
	
	// Set magic number to V1.1 Beta 18 signature
	Config.setup = V1_2_B3_SIGNATURE;
    38e2:	8a e3       	ldi	r24, 0x3A	; 58
    38e4:	80 93 cd 05 	sts	0x05CD, r24
    38e8:	08 95       	ret

000038ea <Load_eeprom_preset>:
	Load_eeprom_preset(QUADX);
	Config.Preset = OPTIONS; // Menu will display "Options"
}

void Load_eeprom_preset(uint8_t preset)
{
    38ea:	0f 93       	push	r16
    38ec:	1f 93       	push	r17
    38ee:	cf 93       	push	r28
    38f0:	df 93       	push	r29
	uint8_t i;

	// Erase current profile settings
	memset(&Config.FlightMode[P1],0,sizeof(flight_control_t));
    38f2:	92 e1       	ldi	r25, 0x12	; 18
    38f4:	ef ef       	ldi	r30, 0xFF	; 255
    38f6:	f5 e0       	ldi	r31, 0x05	; 5
    38f8:	df 01       	movw	r26, r30
    38fa:	29 2f       	mov	r18, r25
    38fc:	1d 92       	st	X+, r1
    38fe:	2a 95       	dec	r18
    3900:	e9 f7       	brne	.-6      	; 0x38fc <Load_eeprom_preset+0x12>
	memset(&Config.FlightMode[P2],0,sizeof(flight_control_t));
    3902:	e1 e1       	ldi	r30, 0x11	; 17
    3904:	f6 e0       	ldi	r31, 0x06	; 6
    3906:	df 01       	movw	r26, r30
    3908:	1d 92       	st	X+, r1
    390a:	9a 95       	dec	r25
    390c:	e9 f7       	brne	.-6      	; 0x3908 <Load_eeprom_preset+0x1e>

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);
    390e:	20 e3       	ldi	r18, 0x30	; 48
    3910:	31 e0       	ldi	r19, 0x01	; 1
    3912:	ef e5       	ldi	r30, 0x5F	; 95
    3914:	f6 e0       	ldi	r31, 0x06	; 6
    3916:	df 01       	movw	r26, r30
    3918:	a9 01       	movw	r20, r18
    391a:	1d 92       	st	X+, r1
    391c:	41 50       	subi	r20, 0x01	; 1
    391e:	50 40       	sbci	r21, 0x00	; 0
    3920:	e1 f7       	brne	.-8      	; 0x391a <Load_eeprom_preset+0x30>
    3922:	e3 e8       	ldi	r30, 0x83	; 131
    3924:	f6 e0       	ldi	r31, 0x06	; 6
    3926:	c7 e9       	ldi	r28, 0x97	; 151
    3928:	d7 e0       	ldi	r29, 0x07	; 7
    392a:	0f e9       	ldi	r16, 0x9F	; 159
    392c:	17 e0       	ldi	r17, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    392e:	72 e3       	ldi	r23, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3930:	9f e0       	ldi	r25, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    3932:	6c e9       	ldi	r22, 0x9C	; 156
		Config.max_travel[i] = 100;
    3934:	44 e6       	ldi	r20, 0x64	; 100
    3936:	9f 01       	movw	r18, r30
    3938:	2e 51       	subi	r18, 0x1E	; 30
    393a:	31 09       	sbc	r19, r1
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    393c:	52 e3       	ldi	r21, 0x32	; 50
    393e:	d9 01       	movw	r26, r18
    3940:	7c 93       	st	X, r23
    3942:	28 5e       	subi	r18, 0xE8	; 232
    3944:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_a 	= NOMIX;
    3946:	d9 01       	movw	r26, r18
    3948:	9c 93       	st	X, r25
    394a:	2c 5f       	subi	r18, 0xFC	; 252
    394c:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_b 	= NOMIX;
    394e:	d9 01       	movw	r26, r18
    3950:	9c 93       	st	X, r25
    3952:	22 50       	subi	r18, 0x02	; 2
    3954:	31 09       	sbc	r19, r1
		Config.Channel[i].P2_source_a 	= NOMIX;
    3956:	d9 01       	movw	r26, r18
    3958:	9c 93       	st	X, r25
		Config.Channel[i].P2_source_b 	= NOMIX;
    395a:	90 83       	st	Z, r25
		Config.min_travel[i] = -100;
    395c:	69 93       	st	Y+, r22
		Config.max_travel[i] = 100;
    395e:	24 e6       	ldi	r18, 0x64	; 100
    3960:	d8 01       	movw	r26, r16
    3962:	4d 93       	st	X+, r20
    3964:	8d 01       	movw	r16, r26
    3966:	b6 96       	adiw	r30, 0x26	; 38

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3968:	b7 e0       	ldi	r27, 0x07	; 7
    396a:	e3 3b       	cpi	r30, 0xB3	; 179
    396c:	fb 07       	cpc	r31, r27
    396e:	19 f7       	brne	.-58     	; 0x3936 <Load_eeprom_preset+0x4c>
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	switch (preset)
    3970:	81 30       	cpi	r24, 0x01	; 1
    3972:	61 f0       	breq	.+24     	; 0x398c <Load_eeprom_preset+0xa2>
    3974:	08 f4       	brcc	.+2      	; 0x3978 <Load_eeprom_preset+0x8e>
    3976:	ce c0       	rjmp	.+412    	; 0x3b14 <Load_eeprom_preset+0x22a>
    3978:	82 30       	cpi	r24, 0x02	; 2
    397a:	09 f4       	brne	.+2      	; 0x397e <Load_eeprom_preset+0x94>
    397c:	87 c1       	rjmp	.+782    	; 0x3c8c <Load_eeprom_preset+0x3a2>
    397e:	83 30       	cpi	r24, 0x03	; 3
    3980:	09 f0       	breq	.+2      	; 0x3984 <Load_eeprom_preset+0x9a>
    3982:	45 c2       	rjmp	.+1162   	; 0x3e0e <Load_eeprom_preset+0x524>
	{
		case BLANK:
			Config.ArmMode = ARMABLE;
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	80 93 57 06 	sts	0x0657, r24
	
			break;
    398a:	41 c2       	rjmp	.+1154   	; 0x3e0e <Load_eeprom_preset+0x524>
		
		case QUADP:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    398c:	80 93 57 06 	sts	0x0657, r24
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 50;
    3990:	50 93 ff 05 	sts	0x05FF, r21
			Config.FlightMode[P1].Roll_I_mult = 10;
    3994:	9a e0       	ldi	r25, 0x0A	; 10
    3996:	90 93 00 06 	sts	0x0600, r25
			Config.FlightMode[P1].Roll_limit = 10;
    399a:	90 93 01 06 	sts	0x0601, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    399e:	22 e0       	ldi	r18, 0x02	; 2
    39a0:	20 93 02 06 	sts	0x0602, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    39a4:	90 93 03 06 	sts	0x0603, r25
			
			Config.FlightMode[P1].Pitch_P_mult = 50;
    39a8:	50 93 05 06 	sts	0x0605, r21
			Config.FlightMode[P1].Pitch_I_mult = 10;
    39ac:	90 93 06 06 	sts	0x0606, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    39b0:	90 93 07 06 	sts	0x0607, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    39b4:	20 93 08 06 	sts	0x0608, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    39b8:	90 93 09 06 	sts	0x0609, r25
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    39bc:	4c e3       	ldi	r20, 0x3C	; 60
    39be:	40 93 0b 06 	sts	0x060B, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    39c2:	98 e2       	ldi	r25, 0x28	; 40
    39c4:	90 93 0c 06 	sts	0x060C, r25
			Config.FlightMode[P1].Yaw_limit = 25;
    39c8:	39 e1       	ldi	r19, 0x19	; 25
    39ca:	30 93 0d 06 	sts	0x060D, r19
			Config.FlightMode[P1].Yaw_Rate = 2;
    39ce:	20 93 0e 06 	sts	0x060E, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    39d2:	50 93 10 06 	sts	0x0610, r21
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    39d6:	90 93 11 06 	sts	0x0611, r25
			Config.FlightMode[P2].Roll_I_mult = 19;
    39da:	63 e1       	ldi	r22, 0x13	; 19
    39dc:	60 93 12 06 	sts	0x0612, r22
			Config.FlightMode[P2].Roll_limit = 14;
    39e0:	5e e0       	ldi	r21, 0x0E	; 14
    39e2:	50 93 13 06 	sts	0x0613, r21
			Config.FlightMode[P2].Roll_Rate = 3;
    39e6:	23 e0       	ldi	r18, 0x03	; 3
    39e8:	20 93 14 06 	sts	0x0614, r18
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    39ec:	80 93 15 06 	sts	0x0615, r24
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    39f0:	90 93 17 06 	sts	0x0617, r25
			Config.FlightMode[P2].Pitch_I_mult = 19;
    39f4:	60 93 18 06 	sts	0x0618, r22
			Config.FlightMode[P2].Pitch_limit = 14;
    39f8:	50 93 19 06 	sts	0x0619, r21
			Config.FlightMode[P2].Pitch_Rate = 3;
    39fc:	20 93 1a 06 	sts	0x061A, r18
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    3a00:	80 93 1b 06 	sts	0x061B, r24
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    3a04:	40 93 1d 06 	sts	0x061D, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    3a08:	90 93 1e 06 	sts	0x061E, r25
			Config.FlightMode[P2].Yaw_limit = 25;
    3a0c:	30 93 1f 06 	sts	0x061F, r19
			Config.FlightMode[P2].Yaw_Rate = 3;
    3a10:	20 93 20 06 	sts	0x0620, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3a14:	8e e1       	ldi	r24, 0x1E	; 30
    3a16:	80 93 22 06 	sts	0x0622, r24
    3a1a:	ec e7       	ldi	r30, 0x7C	; 124
    3a1c:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3a1e:	34 e6       	ldi	r19, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    3a20:	42 e0       	ldi	r20, 0x02	; 2
				Config.Channel[i].P1_Z_delta_acc = ON;
    3a22:	21 e0       	ldi	r18, 0x01	; 1
    3a24:	df 01       	movw	r26, r30
    3a26:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3a28:	94 e6       	ldi	r25, 0x64	; 100
    3a2a:	3c 93       	st	X, r19
    3a2c:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    3a2e:	3c 93       	st	X, r19
    3a30:	16 97       	sbiw	r26, 0x06	; 6
				Config.Channel[i].Motor_marker = MOTOR;
    3a32:	4c 93       	st	X, r20
    3a34:	58 96       	adiw	r26, 0x18	; 24
				Config.Channel[i].P1_Z_delta_acc = ON;
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	2c 93       	st	X, r18
				Config.Channel[i].P2_Z_delta_acc = ON;
    3a3a:	20 83       	st	Z, r18
    3a3c:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    3a3e:	57 e0       	ldi	r21, 0x07	; 7
    3a40:	e4 31       	cpi	r30, 0x14	; 20
    3a42:	f5 07       	cpc	r31, r21
    3a44:	79 f7       	brne	.-34     	; 0x3a24 <Load_eeprom_preset+0x13a>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 0;
    3a46:	10 92 6b 06 	sts	0x066B, r1
			Config.Channel[OUT1].P2_aileron_volume = 0;
    3a4a:	10 92 6c 06 	sts	0x066C, r1
			Config.Channel[OUT1].P1_elevator_volume = -20;
    3a4e:	2c ee       	ldi	r18, 0xEC	; 236
    3a50:	20 93 6d 06 	sts	0x066D, r18
			Config.Channel[OUT1].P2_elevator_volume = -30;
    3a54:	32 ee       	ldi	r19, 0xE2	; 226
    3a56:	30 93 6e 06 	sts	0x066E, r19
			Config.Channel[OUT1].P1_rudder_volume = -30;
    3a5a:	30 93 6f 06 	sts	0x066F, r19
			Config.Channel[OUT1].P2_rudder_volume = -40;
    3a5e:	68 ed       	ldi	r22, 0xD8	; 216
    3a60:	60 93 70 06 	sts	0x0670, r22
			Config.Channel[OUT1].P1_Pitch_gyro = ON;
    3a64:	80 93 73 06 	sts	0x0673, r24
			Config.Channel[OUT1].P1_Pitch_acc = ON;
    3a68:	80 93 79 06 	sts	0x0679, r24
			Config.Channel[OUT1].P2_Pitch_gyro = ON;
    3a6c:	80 93 74 06 	sts	0x0674, r24
			Config.Channel[OUT1].P2_Pitch_acc = ON;
    3a70:	80 93 7a 06 	sts	0x067A, r24
			Config.Channel[OUT1].P1_Yaw_gyro = ON;
    3a74:	80 93 75 06 	sts	0x0675, r24
			Config.Channel[OUT1].P2_Yaw_gyro = ON;
    3a78:	80 93 76 06 	sts	0x0676, r24
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -20;
    3a7c:	20 93 91 06 	sts	0x0691, r18
			Config.Channel[OUT2].P2_aileron_volume = -30;
    3a80:	30 93 92 06 	sts	0x0692, r19
			Config.Channel[OUT2].P1_elevator_volume = 0;
    3a84:	10 92 93 06 	sts	0x0693, r1
			Config.Channel[OUT2].P2_elevator_volume = 0;
    3a88:	10 92 94 06 	sts	0x0694, r1
			Config.Channel[OUT2].P1_rudder_volume = 30;
    3a8c:	2e e1       	ldi	r18, 0x1E	; 30
    3a8e:	20 93 95 06 	sts	0x0695, r18
			Config.Channel[OUT2].P2_rudder_volume = 40;
    3a92:	48 e2       	ldi	r20, 0x28	; 40
    3a94:	40 93 96 06 	sts	0x0696, r20
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    3a98:	80 93 97 06 	sts	0x0697, r24
			Config.Channel[OUT2].P1_Roll_acc = ON;
    3a9c:	80 93 9d 06 	sts	0x069D, r24
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    3aa0:	80 93 98 06 	sts	0x0698, r24
			Config.Channel[OUT2].P2_Roll_acc = ON;
    3aa4:	80 93 9e 06 	sts	0x069E, r24
			Config.Channel[OUT2].P1_Yaw_gyro = ON;
    3aa8:	80 93 9b 06 	sts	0x069B, r24
			Config.Channel[OUT2].P2_Yaw_gyro = ON;
    3aac:	80 93 9c 06 	sts	0x069C, r24
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = 0;
    3ab0:	10 92 b7 06 	sts	0x06B7, r1
			Config.Channel[OUT3].P2_aileron_volume = 0;
    3ab4:	10 92 b8 06 	sts	0x06B8, r1
			Config.Channel[OUT3].P1_elevator_volume = 20;
    3ab8:	54 e1       	ldi	r21, 0x14	; 20
    3aba:	50 93 b9 06 	sts	0x06B9, r21
			Config.Channel[OUT3].P2_elevator_volume = 30;
    3abe:	20 93 ba 06 	sts	0x06BA, r18
			Config.Channel[OUT3].P1_rudder_volume = -30;
    3ac2:	30 93 bb 06 	sts	0x06BB, r19
			Config.Channel[OUT3].P2_rudder_volume = -40;
    3ac6:	60 93 bc 06 	sts	0x06BC, r22
			Config.Channel[OUT3].P1_Pitch_gyro = ON;
    3aca:	80 93 bf 06 	sts	0x06BF, r24
			Config.Channel[OUT3].P1_Pitch_acc = ON;
    3ace:	80 93 c5 06 	sts	0x06C5, r24
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    3ad2:	80 93 c0 06 	sts	0x06C0, r24
			Config.Channel[OUT3].P2_Pitch_acc = ON;
    3ad6:	80 93 c6 06 	sts	0x06C6, r24
			Config.Channel[OUT3].P1_Yaw_gyro = ON;
    3ada:	80 93 c1 06 	sts	0x06C1, r24
			Config.Channel[OUT3].P2_Yaw_gyro = ON;
    3ade:	80 93 c2 06 	sts	0x06C2, r24
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 20;
    3ae2:	50 93 dd 06 	sts	0x06DD, r21
			Config.Channel[OUT4].P2_aileron_volume = 30;
    3ae6:	20 93 de 06 	sts	0x06DE, r18
			Config.Channel[OUT4].P1_elevator_volume = 0;
    3aea:	10 92 df 06 	sts	0x06DF, r1
			Config.Channel[OUT4].P2_elevator_volume = 0;
    3aee:	10 92 e0 06 	sts	0x06E0, r1
			Config.Channel[OUT4].P1_rudder_volume = 30;
    3af2:	20 93 e1 06 	sts	0x06E1, r18
			Config.Channel[OUT4].P2_rudder_volume = 40;
    3af6:	40 93 e2 06 	sts	0x06E2, r20
			Config.Channel[OUT4].P1_Roll_gyro = ON;
    3afa:	80 93 e3 06 	sts	0x06E3, r24
			Config.Channel[OUT4].P1_Roll_acc = ON;
    3afe:	80 93 e9 06 	sts	0x06E9, r24
			Config.Channel[OUT4].P2_Roll_gyro = ON;
    3b02:	80 93 e4 06 	sts	0x06E4, r24
			Config.Channel[OUT4].P2_Roll_acc = ON;
    3b06:	80 93 ea 06 	sts	0x06EA, r24
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    3b0a:	80 93 e7 06 	sts	0x06E7, r24
			Config.Channel[OUT4].P2_Yaw_gyro = ON;		
    3b0e:	80 93 e8 06 	sts	0x06E8, r24
    3b12:	a9 c0       	rjmp	.+338    	; 0x3c66 <Load_eeprom_preset+0x37c>
			Config.Channel[OUT8].P2_offset = 100;			
			break;
				
		case QUADX:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    3b14:	31 e0       	ldi	r19, 0x01	; 1
    3b16:	30 93 57 06 	sts	0x0657, r19
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    3b1a:	88 e2       	ldi	r24, 0x28	; 40
    3b1c:	80 93 ff 05 	sts	0x05FF, r24
			Config.FlightMode[P1].Roll_I_mult = 10;
    3b20:	9a e0       	ldi	r25, 0x0A	; 10
    3b22:	90 93 00 06 	sts	0x0600, r25
			Config.FlightMode[P1].Roll_limit = 10;
    3b26:	90 93 01 06 	sts	0x0601, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    3b2a:	22 e0       	ldi	r18, 0x02	; 2
    3b2c:	20 93 02 06 	sts	0x0602, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    3b30:	90 93 03 06 	sts	0x0603, r25
	
			Config.FlightMode[P1].Pitch_P_mult = 40;
    3b34:	80 93 05 06 	sts	0x0605, r24
			Config.FlightMode[P1].Pitch_I_mult = 10;
    3b38:	90 93 06 06 	sts	0x0606, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    3b3c:	90 93 07 06 	sts	0x0607, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    3b40:	20 93 08 06 	sts	0x0608, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    3b44:	90 93 09 06 	sts	0x0609, r25
	
			Config.FlightMode[P1].Yaw_P_mult = 60;
    3b48:	4c e3       	ldi	r20, 0x3C	; 60
    3b4a:	40 93 0b 06 	sts	0x060B, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    3b4e:	80 93 0c 06 	sts	0x060C, r24
			Config.FlightMode[P1].Yaw_limit = 25;
    3b52:	99 e1       	ldi	r25, 0x19	; 25
    3b54:	90 93 0d 06 	sts	0x060D, r25
			Config.FlightMode[P1].Yaw_Rate = 2;
    3b58:	20 93 0e 06 	sts	0x060E, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    3b5c:	50 93 10 06 	sts	0x0610, r21
	
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    3b60:	80 93 11 06 	sts	0x0611, r24
			Config.FlightMode[P2].Roll_I_mult = 19;
    3b64:	73 e1       	ldi	r23, 0x13	; 19
    3b66:	70 93 12 06 	sts	0x0612, r23
			Config.FlightMode[P2].Roll_limit = 14;
    3b6a:	6e e0       	ldi	r22, 0x0E	; 14
    3b6c:	60 93 13 06 	sts	0x0613, r22
			Config.FlightMode[P2].Roll_Rate = 3;
    3b70:	53 e0       	ldi	r21, 0x03	; 3
    3b72:	50 93 14 06 	sts	0x0614, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3b76:	30 93 15 06 	sts	0x0615, r19
	
			Config.FlightMode[P2].Pitch_P_mult = 40;
    3b7a:	80 93 17 06 	sts	0x0617, r24
			Config.FlightMode[P2].Pitch_I_mult = 19;
    3b7e:	70 93 18 06 	sts	0x0618, r23
			Config.FlightMode[P2].Pitch_limit = 14;
    3b82:	60 93 19 06 	sts	0x0619, r22
			Config.FlightMode[P2].Pitch_Rate = 3;
    3b86:	50 93 1a 06 	sts	0x061A, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    3b8a:	30 93 1b 06 	sts	0x061B, r19
	
			Config.FlightMode[P2].Yaw_P_mult = 60;
    3b8e:	40 93 1d 06 	sts	0x061D, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    3b92:	80 93 1e 06 	sts	0x061E, r24
			Config.FlightMode[P2].Yaw_limit = 25;
    3b96:	90 93 1f 06 	sts	0x061F, r25
			Config.FlightMode[P2].Yaw_Rate = 2;
    3b9a:	20 93 20 06 	sts	0x0620, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3b9e:	8e e1       	ldi	r24, 0x1E	; 30
    3ba0:	80 93 22 06 	sts	0x0622, r24
    3ba4:	ec e7       	ldi	r30, 0x7C	; 124
    3ba6:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3ba8:	24 e6       	ldi	r18, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    3baa:	32 e0       	ldi	r19, 0x02	; 2
				Config.Channel[i].P1_Roll_gyro = ON;
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	df 01       	movw	r26, r30
    3bb0:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3bb2:	94 e6       	ldi	r25, 0x64	; 100
    3bb4:	2c 93       	st	X, r18
    3bb6:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    3bb8:	2c 93       	st	X, r18
    3bba:	16 97       	sbiw	r26, 0x06	; 6
				Config.Channel[i].Motor_marker = MOTOR;
    3bbc:	3c 93       	st	X, r19
    3bbe:	1e 96       	adiw	r26, 0x0e	; 14
				Config.Channel[i].P1_Roll_gyro = ON;
    3bc0:	8c 93       	st	X, r24
    3bc2:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Roll_acc = ON;
    3bc4:	8c 93       	st	X, r24
    3bc6:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Roll_gyro = ON;
    3bc8:	8c 93       	st	X, r24
    3bca:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Roll_acc = ON;
    3bcc:	8c 93       	st	X, r24
    3bce:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Pitch_gyro = ON;
    3bd0:	8c 93       	st	X, r24
    3bd2:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Pitch_acc = ON;
    3bd4:	8c 93       	st	X, r24
    3bd6:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Pitch_gyro = ON;
    3bd8:	8c 93       	st	X, r24
    3bda:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Pitch_acc = ON;
    3bdc:	8c 93       	st	X, r24
    3bde:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Yaw_gyro = ON;
    3be0:	8c 93       	st	X, r24
    3be2:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_Yaw_gyro = ON;
    3be4:	8c 93       	st	X, r24
    3be6:	15 96       	adiw	r26, 0x05	; 5
				Config.Channel[i].P1_Z_delta_acc = ON;
    3be8:	8c 93       	st	X, r24
				Config.Channel[i].P2_Z_delta_acc = ON;
    3bea:	80 83       	st	Z, r24
    3bec:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    3bee:	a7 e0       	ldi	r26, 0x07	; 7
    3bf0:	e4 31       	cpi	r30, 0x14	; 20
    3bf2:	fa 07       	cpc	r31, r26
    3bf4:	e1 f6       	brne	.-72     	; 0x3bae <Load_eeprom_preset+0x2c4>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 15;
    3bf6:	2f e0       	ldi	r18, 0x0F	; 15
    3bf8:	20 93 6b 06 	sts	0x066B, r18
			Config.Channel[OUT1].P2_aileron_volume = 20;
    3bfc:	84 e1       	ldi	r24, 0x14	; 20
    3bfe:	80 93 6c 06 	sts	0x066C, r24
			Config.Channel[OUT1].P1_elevator_volume = -15;
    3c02:	41 ef       	ldi	r20, 0xF1	; 241
    3c04:	40 93 6d 06 	sts	0x066D, r20
			Config.Channel[OUT1].P2_elevator_volume = -20;
    3c08:	3c ee       	ldi	r19, 0xEC	; 236
    3c0a:	30 93 6e 06 	sts	0x066E, r19
			Config.Channel[OUT1].P1_rudder_volume = -40;
    3c0e:	e8 ed       	ldi	r30, 0xD8	; 216
    3c10:	e0 93 6f 06 	sts	0x066F, r30
			Config.Channel[OUT1].P2_rudder_volume = -50;
    3c14:	7e ec       	ldi	r23, 0xCE	; 206
    3c16:	70 93 70 06 	sts	0x0670, r23
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -15;
    3c1a:	40 93 91 06 	sts	0x0691, r20
			Config.Channel[OUT2].P2_aileron_volume = -20;
    3c1e:	30 93 92 06 	sts	0x0692, r19
			Config.Channel[OUT2].P1_elevator_volume = -15;
    3c22:	40 93 93 06 	sts	0x0693, r20
			Config.Channel[OUT2].P2_elevator_volume = -20;
    3c26:	30 93 94 06 	sts	0x0694, r19
			Config.Channel[OUT2].P1_rudder_volume = 40;
    3c2a:	68 e2       	ldi	r22, 0x28	; 40
    3c2c:	60 93 95 06 	sts	0x0695, r22
			Config.Channel[OUT2].P2_rudder_volume = 50;
    3c30:	52 e3       	ldi	r21, 0x32	; 50
    3c32:	50 93 96 06 	sts	0x0696, r21
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = -15;
    3c36:	40 93 b7 06 	sts	0x06B7, r20
			Config.Channel[OUT3].P2_aileron_volume = -20;
    3c3a:	30 93 b8 06 	sts	0x06B8, r19
			Config.Channel[OUT3].P1_elevator_volume = 15;
    3c3e:	20 93 b9 06 	sts	0x06B9, r18
			Config.Channel[OUT3].P2_elevator_volume = 20;
    3c42:	80 93 ba 06 	sts	0x06BA, r24
			Config.Channel[OUT3].P1_rudder_volume = -40;
    3c46:	e0 93 bb 06 	sts	0x06BB, r30
			Config.Channel[OUT3].P2_rudder_volume = -50;
    3c4a:	70 93 bc 06 	sts	0x06BC, r23
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 15;
    3c4e:	20 93 dd 06 	sts	0x06DD, r18
			Config.Channel[OUT4].P2_aileron_volume = 20;
    3c52:	80 93 de 06 	sts	0x06DE, r24
			Config.Channel[OUT4].P1_elevator_volume = 15;
    3c56:	20 93 df 06 	sts	0x06DF, r18
			Config.Channel[OUT4].P2_elevator_volume = 20;
    3c5a:	80 93 e0 06 	sts	0x06E0, r24
			Config.Channel[OUT4].P1_rudder_volume = 40;
    3c5e:	60 93 e1 06 	sts	0x06E1, r22
			Config.Channel[OUT4].P2_rudder_volume = 50;
    3c62:	50 93 e2 06 	sts	0x06E2, r21

			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    3c66:	8b e4       	ldi	r24, 0x4B	; 75
    3c68:	80 93 05 07 	sts	0x0705, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    3c6c:	90 93 06 07 	sts	0x0706, r25
			
			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    3c70:	80 93 29 07 	sts	0x0729, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    3c74:	90 93 2a 07 	sts	0x072A, r25
						
			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    3c78:	80 93 53 07 	sts	0x0753, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    3c7c:	90 93 54 07 	sts	0x0754, r25
									
			// OUT8
			Config.Channel[OUT8].P1_offset = -100;
    3c80:	8c e9       	ldi	r24, 0x9C	; 156
    3c82:	80 93 6e 07 	sts	0x076E, r24
			Config.Channel[OUT8].P2_offset = 100;
    3c86:	90 93 71 07 	sts	0x0771, r25
			break;
    3c8a:	c1 c0       	rjmp	.+386    	; 0x3e0e <Load_eeprom_preset+0x524>
		
		case TRICOPTER:
			// Preset simple mixing for primary channels
			Config.ArmMode = ARMABLE;
    3c8c:	91 e0       	ldi	r25, 0x01	; 1
    3c8e:	90 93 57 06 	sts	0x0657, r25
		
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    3c92:	38 e2       	ldi	r19, 0x28	; 40
    3c94:	30 93 ff 05 	sts	0x05FF, r19
			Config.FlightMode[P1].Roll_I_mult = 10;
    3c98:	4a e0       	ldi	r20, 0x0A	; 10
    3c9a:	40 93 00 06 	sts	0x0600, r20
			Config.FlightMode[P1].Roll_limit = 10;
    3c9e:	40 93 01 06 	sts	0x0601, r20
			Config.FlightMode[P1].Roll_Rate = 2;
    3ca2:	80 93 02 06 	sts	0x0602, r24
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    3ca6:	40 93 03 06 	sts	0x0603, r20
			
			Config.FlightMode[P1].Pitch_P_mult = 40;
    3caa:	30 93 05 06 	sts	0x0605, r19
			Config.FlightMode[P1].Pitch_I_mult = 10;
    3cae:	40 93 06 06 	sts	0x0606, r20
			Config.FlightMode[P1].Pitch_limit = 10;
    3cb2:	40 93 07 06 	sts	0x0607, r20
			Config.FlightMode[P1].Pitch_Rate = 2;
    3cb6:	80 93 08 06 	sts	0x0608, r24
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    3cba:	40 93 09 06 	sts	0x0609, r20
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    3cbe:	6c e3       	ldi	r22, 0x3C	; 60
    3cc0:	60 93 0b 06 	sts	0x060B, r22
			Config.FlightMode[P1].Yaw_I_mult = 40;
    3cc4:	30 93 0c 06 	sts	0x060C, r19
			Config.FlightMode[P1].Yaw_limit = 25;
    3cc8:	49 e1       	ldi	r20, 0x19	; 25
    3cca:	40 93 0d 06 	sts	0x060D, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    3cce:	80 93 0e 06 	sts	0x060E, r24
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    3cd2:	50 93 10 06 	sts	0x0610, r21
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    3cd6:	30 93 11 06 	sts	0x0611, r19
			Config.FlightMode[P2].Roll_I_mult = 19;
    3cda:	e3 e1       	ldi	r30, 0x13	; 19
    3cdc:	e0 93 12 06 	sts	0x0612, r30
			Config.FlightMode[P2].Roll_limit = 14;
    3ce0:	7e e0       	ldi	r23, 0x0E	; 14
    3ce2:	70 93 13 06 	sts	0x0613, r23
			Config.FlightMode[P2].Roll_Rate = 3;
    3ce6:	53 e0       	ldi	r21, 0x03	; 3
    3ce8:	50 93 14 06 	sts	0x0614, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3cec:	90 93 15 06 	sts	0x0615, r25
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    3cf0:	30 93 17 06 	sts	0x0617, r19
			Config.FlightMode[P2].Pitch_I_mult = 19;
    3cf4:	e0 93 18 06 	sts	0x0618, r30
			Config.FlightMode[P2].Pitch_limit = 14;
    3cf8:	70 93 19 06 	sts	0x0619, r23
			Config.FlightMode[P2].Pitch_Rate = 3;
    3cfc:	50 93 1a 06 	sts	0x061A, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    3d00:	90 93 1b 06 	sts	0x061B, r25
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    3d04:	60 93 1d 06 	sts	0x061D, r22
			Config.FlightMode[P2].Yaw_I_mult = 40;
    3d08:	30 93 1e 06 	sts	0x061E, r19
			Config.FlightMode[P2].Yaw_limit = 25;
    3d0c:	40 93 1f 06 	sts	0x061F, r20
			Config.FlightMode[P2].Yaw_Rate = 2;
    3d10:	80 93 20 06 	sts	0x0620, r24
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3d14:	4e e1       	ldi	r20, 0x1E	; 30
    3d16:	40 93 22 06 	sts	0x0622, r20
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3d1a:	20 93 68 06 	sts	0x0668, r18
				Config.Channel[i].P2_throttle_volume = 100;
    3d1e:	20 93 69 06 	sts	0x0669, r18
				Config.Channel[i].Motor_marker = MOTOR;
    3d22:	80 93 63 06 	sts	0x0663, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3d26:	20 93 8e 06 	sts	0x068E, r18
				Config.Channel[i].P2_throttle_volume = 100;
    3d2a:	20 93 8f 06 	sts	0x068F, r18
				Config.Channel[i].Motor_marker = MOTOR;
    3d2e:	80 93 89 06 	sts	0x0689, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3d32:	20 93 b4 06 	sts	0x06B4, r18
				Config.Channel[i].P2_throttle_volume = 100;
    3d36:	20 93 b5 06 	sts	0x06B5, r18
				Config.Channel[i].Motor_marker = MOTOR;
    3d3a:	80 93 af 06 	sts	0x06AF, r24
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 30;
    3d3e:	40 93 6b 06 	sts	0x066B, r20
			Config.Channel[OUT1].P2_aileron_volume = 40;
    3d42:	30 93 6c 06 	sts	0x066C, r19
			Config.Channel[OUT1].P1_elevator_volume = -15;
    3d46:	61 ef       	ldi	r22, 0xF1	; 241
    3d48:	60 93 6d 06 	sts	0x066D, r22
			Config.Channel[OUT1].P2_elevator_volume = -20;
    3d4c:	5c ee       	ldi	r21, 0xEC	; 236
    3d4e:	50 93 6e 06 	sts	0x066E, r21
			Config.Channel[OUT1].P1_Roll_gyro = ON;
    3d52:	90 93 71 06 	sts	0x0671, r25
			Config.Channel[OUT1].P1_Roll_acc = ON;
    3d56:	90 93 77 06 	sts	0x0677, r25
			Config.Channel[OUT1].P2_Roll_gyro = ON;
    3d5a:	90 93 72 06 	sts	0x0672, r25
			Config.Channel[OUT1].P2_Roll_acc = ON;
    3d5e:	90 93 78 06 	sts	0x0678, r25
			Config.Channel[OUT1].P1_Pitch_gyro = SCALE;
    3d62:	80 93 73 06 	sts	0x0673, r24
			Config.Channel[OUT1].P1_Pitch_acc = SCALE;
    3d66:	80 93 79 06 	sts	0x0679, r24
			Config.Channel[OUT1].P2_Pitch_gyro = SCALE;
    3d6a:	80 93 74 06 	sts	0x0674, r24
			Config.Channel[OUT1].P2_Pitch_acc = SCALE;
    3d6e:	80 93 7a 06 	sts	0x067A, r24
			Config.Channel[OUT1].P1_Z_delta_acc = ON;
    3d72:	90 93 7b 06 	sts	0x067B, r25
			Config.Channel[OUT1].P2_Z_delta_acc = ON;
    3d76:	90 93 7c 06 	sts	0x067C, r25
		
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -30;
    3d7a:	72 ee       	ldi	r23, 0xE2	; 226
    3d7c:	70 93 91 06 	sts	0x0691, r23
			Config.Channel[OUT2].P2_aileron_volume = -40;
    3d80:	78 ed       	ldi	r23, 0xD8	; 216
    3d82:	70 93 92 06 	sts	0x0692, r23
			Config.Channel[OUT2].P1_elevator_volume = -15;
    3d86:	60 93 93 06 	sts	0x0693, r22
			Config.Channel[OUT2].P2_elevator_volume = -20;
    3d8a:	50 93 94 06 	sts	0x0694, r21
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    3d8e:	90 93 97 06 	sts	0x0697, r25
			Config.Channel[OUT2].P1_Roll_acc = ON;
    3d92:	90 93 9d 06 	sts	0x069D, r25
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    3d96:	90 93 98 06 	sts	0x0698, r25
			Config.Channel[OUT2].P2_Roll_acc = ON;
    3d9a:	90 93 9e 06 	sts	0x069E, r25
			Config.Channel[OUT2].P1_Pitch_gyro = SCALE;
    3d9e:	80 93 99 06 	sts	0x0699, r24
			Config.Channel[OUT2].P1_Pitch_acc = SCALE;
    3da2:	80 93 9f 06 	sts	0x069F, r24
			Config.Channel[OUT2].P2_Pitch_gyro = SCALE;
    3da6:	80 93 9a 06 	sts	0x069A, r24
			Config.Channel[OUT2].P2_Pitch_acc = SCALE;
    3daa:	80 93 a0 06 	sts	0x06A0, r24
			Config.Channel[OUT2].P1_Z_delta_acc = ON;
    3dae:	90 93 a1 06 	sts	0x06A1, r25
			Config.Channel[OUT2].P2_Z_delta_acc = ON;
    3db2:	90 93 a2 06 	sts	0x06A2, r25
		
			// OUT3
			Config.Channel[OUT3].P1_elevator_volume = 30;
    3db6:	40 93 b9 06 	sts	0x06B9, r20
			Config.Channel[OUT3].P2_elevator_volume = 40;
    3dba:	30 93 ba 06 	sts	0x06BA, r19
			Config.Channel[OUT3].P1_Pitch_gyro = SCALE;
    3dbe:	80 93 bf 06 	sts	0x06BF, r24
			Config.Channel[OUT3].P1_Pitch_acc = SCALE;
    3dc2:	80 93 c5 06 	sts	0x06C5, r24
			Config.Channel[OUT3].P2_Pitch_gyro = SCALE;
    3dc6:	80 93 c0 06 	sts	0x06C0, r24
			Config.Channel[OUT3].P2_Pitch_acc = SCALE;
    3dca:	80 93 c6 06 	sts	0x06C6, r24
			Config.Channel[OUT3].P1_Z_delta_acc = ON;
    3dce:	90 93 c7 06 	sts	0x06C7, r25
			Config.Channel[OUT3].P2_Z_delta_acc = ON;
    3dd2:	90 93 c8 06 	sts	0x06C8, r25
			
			// OUT4
			Config.Channel[OUT4].Motor_marker = ASERVO;
    3dd6:	10 92 d5 06 	sts	0x06D5, r1
			Config.Channel[OUT4].P1_rudder_volume = 75;
    3dda:	8b e4       	ldi	r24, 0x4B	; 75
    3ddc:	80 93 e1 06 	sts	0x06E1, r24
			Config.Channel[OUT4].P2_rudder_volume = 100;
    3de0:	20 93 e2 06 	sts	0x06E2, r18
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    3de4:	90 93 e7 06 	sts	0x06E7, r25
			Config.Channel[OUT4].P2_Yaw_gyro = ON;
    3de8:	90 93 e8 06 	sts	0x06E8, r25
			
			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    3dec:	80 93 05 07 	sts	0x0705, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    3df0:	20 93 06 07 	sts	0x0706, r18

			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    3df4:	80 93 29 07 	sts	0x0729, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    3df8:	20 93 2a 07 	sts	0x072A, r18

			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    3dfc:	80 93 53 07 	sts	0x0753, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    3e00:	20 93 54 07 	sts	0x0754, r18

			// OUT8
			Config.Channel[OUT8].P1_offset = -100;
    3e04:	8c e9       	ldi	r24, 0x9C	; 156
    3e06:	80 93 6e 07 	sts	0x076E, r24
			Config.Channel[OUT8].P2_offset = 100;
    3e0a:	20 93 71 07 	sts	0x0771, r18
			break;
		
		default:
			break;
	}
    3e0e:	df 91       	pop	r29
    3e10:	cf 91       	pop	r28
    3e12:	1f 91       	pop	r17
    3e14:	0f 91       	pop	r16
    3e16:	08 95       	ret

00003e18 <Set_EEPROM_Default_Config>:
	return new_filter;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    3e18:	cf 93       	push	r28
    3e1a:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    3e1c:	8f e1       	ldi	r24, 0x1F	; 31
    3e1e:	92 e0       	ldi	r25, 0x02	; 2
    3e20:	ed ec       	ldi	r30, 0xCD	; 205
    3e22:	f5 e0       	ldi	r31, 0x05	; 5
    3e24:	df 01       	movw	r26, r30
    3e26:	9c 01       	movw	r18, r24
    3e28:	1d 92       	st	X+, r1
    3e2a:	21 50       	subi	r18, 0x01	; 1
    3e2c:	30 40       	sbci	r19, 0x00	; 0
    3e2e:	e1 f7       	brne	.-8      	; 0x3e28 <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    3e30:	8a e3       	ldi	r24, 0x3A	; 58
    3e32:	80 93 cd 05 	sts	0x05CD, r24

	// General
	Config.RxMode = SBUS;
    3e36:	82 e0       	ldi	r24, 0x02	; 2
    3e38:	80 93 f6 05 	sts	0x05F6, r24
	Config.FlightChan = GEAR;
    3e3c:	94 e0       	ldi	r25, 0x04	; 4
    3e3e:	90 93 fa 05 	sts	0x05FA, r25
	Config.ArmMode = ARMABLE;
    3e42:	21 e0       	ldi	r18, 0x01	; 1
    3e44:	20 93 57 06 	sts	0x0657, r18
	Config.Servo_rate = FAST;
    3e48:	80 93 f7 05 	sts	0x05F7, r24
	Config.PWM_Sync = GEAR;
    3e4c:	90 93 f8 05 	sts	0x05F8, r25
	Config.Acc_LPF = HZ21;
    3e50:	80 93 5b 06 	sts	0x065B, r24
	Config.Gyro_LPF = NOFILTER;
    3e54:	87 e0       	ldi	r24, 0x07	; 7
    3e56:	80 93 5c 06 	sts	0x065C, r24
	Config.MPU6050_LPF = HZ44;
    3e5a:	93 e0       	ldi	r25, 0x03	; 3
    3e5c:	90 93 5a 06 	sts	0x065A, r25
	Config.CF_factor = 7;
    3e60:	80 93 5d 06 	sts	0x065D, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    3e64:	8e e1       	ldi	r24, 0x1E	; 30
    3e66:	80 93 58 06 	sts	0x0658, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    3e6a:	82 e3       	ldi	r24, 0x32	; 50
    3e6c:	80 93 fc 05 	sts	0x05FC, r24
	
	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    3e70:	80 e8       	ldi	r24, 0x80	; 128
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	90 93 be 07 	sts	0x07BE, r25
    3e78:	80 93 bd 07 	sts	0x07BD, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    3e7c:	84 e2       	ldi	r24, 0x24	; 36
    3e7e:	80 93 56 06 	sts	0x0656, r24
    3e82:	e8 ef       	ldi	r30, 0xF8	; 248
    3e84:	f0 e0       	ldi	r31, 0x00	; 0
    3e86:	ce ec       	ldi	r28, 0xCE	; 206
    3e88:	d5 e0       	ldi	r29, 0x05	; 5
    3e8a:	a7 ea       	ldi	r26, 0xA7	; 167
    3e8c:	b7 e0       	ldi	r27, 0x07	; 7
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    3e8e:	86 ea       	ldi	r24, 0xA6	; 166
    3e90:	9e e0       	ldi	r25, 0x0E	; 14
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    3e92:	24 91       	lpm	r18, Z
    3e94:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    3e96:	8d 93       	st	X+, r24
    3e98:	9d 93       	st	X+, r25
    3e9a:	31 96       	adiw	r30, 0x01	; 1
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    3e9c:	31 e0       	ldi	r19, 0x01	; 1
    3e9e:	e0 30       	cpi	r30, 0x00	; 0
    3ea0:	f3 07       	cpc	r31, r19
    3ea2:	b9 f7       	brne	.-18     	; 0x3e92 <Set_EEPROM_Default_Config+0x7a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    3ea4:	8e eb       	ldi	r24, 0xBE	; 190
    3ea6:	9a e0       	ldi	r25, 0x0A	; 10
    3ea8:	90 93 a8 07 	sts	0x07A8, r25
    3eac:	80 93 a7 07 	sts	0x07A7, r24
    3eb0:	e3 e8       	ldi	r30, 0x83	; 131
    3eb2:	f6 e0       	ldi	r31, 0x06	; 6
    3eb4:	c7 e9       	ldi	r28, 0x97	; 151
    3eb6:	d7 e0       	ldi	r29, 0x07	; 7
    3eb8:	6f e9       	ldi	r22, 0x9F	; 159
    3eba:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3ebc:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3ebe:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    3ec0:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    3ec2:	34 e6       	ldi	r19, 0x64	; 100
    3ec4:	cf 01       	movw	r24, r30
    3ec6:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3ec8:	dc 01       	movw	r26, r24
    3eca:	5c 93       	st	X, r21
    3ecc:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3ece:	dc 01       	movw	r26, r24
    3ed0:	2c 93       	st	X, r18
    3ed2:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	2c 93       	st	X, r18
    3ed8:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    3eda:	dc 01       	movw	r26, r24
    3edc:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3ede:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    3ee0:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    3ee2:	db 01       	movw	r26, r22
    3ee4:	3d 93       	st	X+, r19
    3ee6:	bd 01       	movw	r22, r26
    3ee8:	b6 96       	adiw	r30, 0x26	; 38
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3eea:	b7 e0       	ldi	r27, 0x07	; 7
    3eec:	e3 3b       	cpi	r30, 0xB3	; 179
    3eee:	fb 07       	cpc	r31, r27
    3ef0:	49 f7       	brne	.-46     	; 0x3ec4 <Set_EEPROM_Default_Config+0xac>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Load manual defaults
	Load_eeprom_preset(QUADX);
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Load_eeprom_preset>
	Config.Preset = OPTIONS; // Menu will display "Options"
    3ef8:	84 e0       	ldi	r24, 0x04	; 4
    3efa:	80 93 5e 06 	sts	0x065E, r24
}
    3efe:	df 91       	pop	r29
    3f00:	cf 91       	pop	r28
    3f02:	08 95       	ret

00003f04 <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    3f04:	cf 93       	push	r28
    3f06:	df 93       	push	r29
    3f08:	1f 92       	push	r1
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    3f0e:	4f e1       	ldi	r20, 0x1F	; 31
    3f10:	52 e0       	ldi	r21, 0x02	; 2
    3f12:	60 e0       	ldi	r22, 0x00	; 0
    3f14:	70 e0       	ldi	r23, 0x00	; 0
    3f16:	8d ec       	ldi	r24, 0xCD	; 205
    3f18:	95 e0       	ldi	r25, 0x05	; 5
    3f1a:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    3f1e:	80 91 cd 05 	lds	r24, 0x05CD
    3f22:	87 33       	cpi	r24, 0x37	; 55
    3f24:	81 f0       	breq	.+32     	; 0x3f46 <Initial_EEPROM_Config_Load+0x42>
    3f26:	28 f4       	brcc	.+10     	; 0x3f32 <Initial_EEPROM_Config_Load+0x2e>
    3f28:	85 33       	cpi	r24, 0x35	; 53
    3f2a:	49 f0       	breq	.+18     	; 0x3f3e <Initial_EEPROM_Config_Load+0x3a>
    3f2c:	86 33       	cpi	r24, 0x36	; 54
    3f2e:	49 f0       	breq	.+18     	; 0x3f42 <Initial_EEPROM_Config_Load+0x3e>
    3f30:	12 c0       	rjmp	.+36     	; 0x3f56 <Initial_EEPROM_Config_Load+0x52>
    3f32:	89 33       	cpi	r24, 0x39	; 57
    3f34:	61 f0       	breq	.+24     	; 0x3f4e <Initial_EEPROM_Config_Load+0x4a>
    3f36:	48 f0       	brcs	.+18     	; 0x3f4a <Initial_EEPROM_Config_Load+0x46>
    3f38:	8a 33       	cpi	r24, 0x3A	; 58
    3f3a:	79 f0       	breq	.+30     	; 0x3f5a <Initial_EEPROM_Config_Load+0x56>
    3f3c:	0c c0       	rjmp	.+24     	; 0x3f56 <Initial_EEPROM_Config_Load+0x52>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1_B7();
    3f3e:	0e 94 c9 19 	call	0x3392	; 0x3392 <Update_V1_0_to_V1_1_B7>
			// Fall through...

		case V1_1_B7_SIGNATURE:				// V1.1 Beta 7 (or below) detected
			Update_V1_1_to_V1_1_B8();	
    3f42:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <Update_V1_1_to_V1_1_B8>
			// Fall through...

		case V1_1_B8_SIGNATURE:				// V1.1 Beta 8-9 detected
			Update_V1_1B8_to_V1_1_B10();
    3f46:	0e 94 47 1c 	call	0x388e	; 0x388e <Update_V1_1B8_to_V1_1_B10>
			// Fall through...

		case V1_1_B10_SIGNATURE:			// V1.1 Beta 10+ detected
			Update_V1_1B10_to_V1_1_B12();
    3f4a:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <Update_V1_1B10_to_V1_1_B12>
			// Fall through...

		case V1_1_B12_SIGNATURE:			// V1.1 Beta 12 detected
			Update_V1_1B12_to_V1_1_B18();
    3f4e:	0e 94 6d 1c 	call	0x38da	; 0x38da <Update_V1_1B12_to_V1_1_B18>
			updated = true;
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	03 c0       	rjmp	.+6      	; 0x3f5c <Initial_EEPROM_Config_Load+0x58>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    3f56:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    3f5c:	89 83       	std	Y+1, r24	; 0x01
    3f5e:	0e 94 be 19 	call	0x337c	; 0x337c <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
    3f64:	0f 90       	pop	r0
    3f66:	df 91       	pop	r29
    3f68:	cf 91       	pop	r28
    3f6a:	08 95       	ret

00003f6c <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    3f6c:	cf 93       	push	r28
    3f6e:	df 93       	push	r29
    3f70:	cd b7       	in	r28, 0x3d	; 61
    3f72:	de b7       	in	r29, 0x3e	; 62
    3f74:	ac 97       	sbiw	r28, 0x2c	; 44
    3f76:	0f b6       	in	r0, 0x3f	; 63
    3f78:	f8 94       	cli
    3f7a:	de bf       	out	0x3e, r29	; 62
    3f7c:	0f be       	out	0x3f, r0	; 63
    3f7e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	
	// Do all init tasks
	init();
    3f80:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <init>
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    3f84:	53 e0       	ldi	r21, 0x03	; 3
    3f86:	85 2e       	mov	r8, r21
    3f88:	91 2c       	mov	r9, r1
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    3f8a:	19 a6       	std	Y+41, r1	; 0x29
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    3f8c:	18 a6       	std	Y+40, r1	; 0x28
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    3f8e:	63 e0       	ldi	r22, 0x03	; 3
    3f90:	76 2e       	mov	r7, r22

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    3f92:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    3f94:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    3f96:	31 2c       	mov	r3, r1
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    3f98:	1f 8a       	std	Y+23, r1	; 0x17
    3f9a:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;
    3f9c:	1f a2       	std	Y+39, r1	; 0x27
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    3f9e:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    3fa0:	1d a2       	std	Y+37, r1	; 0x25
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    3fa2:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    3fa4:	1b a2       	std	Y+35, r1	; 0x23
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    3fa6:	1a a2       	std	Y+34, r1	; 0x22

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    3fa8:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    3faa:	18 a2       	std	Y+32, r1	; 0x20
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    3fac:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    3fae:	41 2c       	mov	r4, r1
    3fb0:	51 2c       	mov	r5, r1
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    3fb2:	1c a6       	std	Y+44, r1	; 0x2c
    3fb4:	1b a6       	std	Y+43, r1	; 0x2b
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    3fb6:	1b 8a       	std	Y+19, r1	; 0x13
    3fb8:	1a 8a       	std	Y+18, r1	; 0x12
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    3fba:	19 8a       	std	Y+17, r1	; 0x11
    3fbc:	18 8a       	std	Y+16, r1	; 0x10
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    3fbe:	1a 86       	std	Y+10, r1	; 0x0a
    3fc0:	19 86       	std	Y+9, r1	; 0x09
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    3fc2:	1e 8e       	std	Y+30, r1	; 0x1e
    3fc4:	1d 8e       	std	Y+29, r1	; 0x1d
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    3fc6:	1a 8e       	std	Y+26, r1	; 0x1a
    3fc8:	19 8e       	std	Y+25, r1	; 0x19
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    3fca:	1f 86       	std	Y+15, r1	; 0x0f
    3fcc:	1e 86       	std	Y+14, r1	; 0x0e
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    3fce:	71 e6       	ldi	r23, 0x61	; 97
    3fd0:	c7 2e       	mov	r12, r23
    3fd2:	71 e5       	ldi	r23, 0x51	; 81
    3fd4:	d7 2e       	mov	r13, r23
    3fd6:	e1 2c       	mov	r14, r1
    3fd8:	f1 2c       	mov	r15, r1
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    3fda:	1d 82       	std	Y+5, r1	; 0x05
    3fdc:	1e 82       	std	Y+6, r1	; 0x06
    3fde:	1f 82       	std	Y+7, r1	; 0x07
    3fe0:	18 86       	std	Y+8, r1	; 0x08
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    3fe2:	19 82       	std	Y+1, r1	; 0x01
    3fe4:	1a 82       	std	Y+2, r1	; 0x02
    3fe6:	1b 82       	std	Y+3, r1	; 0x03
    3fe8:	1c 82       	std	Y+4, r1	; 0x04
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    3fea:	21 e0       	ldi	r18, 0x01	; 1
    3fec:	2b 87       	std	Y+11, r18	; 0x0b
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    3fee:	00 e0       	ldi	r16, 0x00	; 0
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    3ff0:	1c 8e       	std	Y+28, r1	; 0x1c
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    3ff2:	21 2c       	mov	r2, r1
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    3ff4:	1d 86       	std	Y+13, r1	; 0x0d
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    3ff6:	1c 86       	std	Y+12, r1	; 0x0c

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    3ff8:	b1 2c       	mov	r11, r1

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    3ffa:	80 91 18 05 	lds	r24, 0x0518
    3ffe:	8f 5f       	subi	r24, 0xFF	; 255
    4000:	80 93 18 05 	sts	0x0518, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    4004:	80 91 18 08 	lds	r24, 0x0818
    4008:	88 23       	and	r24, r24
    400a:	31 f0       	breq	.+12     	; 0x4018 <main+0xac>
		{
			InterruptCounter++;
    400c:	4e 89       	ldd	r20, Y+22	; 0x16
    400e:	5f 89       	ldd	r21, Y+23	; 0x17
    4010:	4f 5f       	subi	r20, 0xFF	; 255
    4012:	5f 4f       	sbci	r21, 0xFF	; 255
    4014:	5f 8b       	std	Y+23, r21	; 0x17
    4016:	4e 8b       	std	Y+22, r20	; 0x16
		//* - Do an RC rate resample
		//* - Check the battery voltage
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    4018:	2e 85       	ldd	r18, Y+14	; 0x0e
    401a:	3f 85       	ldd	r19, Y+15	; 0x0f
    401c:	2c 34       	cpi	r18, 0x4C	; 76
    401e:	3c 44       	sbci	r19, 0x4C	; 76
    4020:	28 f1       	brcs	.+74     	; 0x406c <main+0x100>
		{
			Status_seconds++;
    4022:	28 8d       	ldd	r18, Y+24	; 0x18
    4024:	2f 5f       	subi	r18, 0xFF	; 255
    4026:	28 8f       	std	Y+24, r18	; 0x18
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    4028:	4e 89       	ldd	r20, Y+22	; 0x16
    402a:	5f 89       	ldd	r21, Y+23	; 0x17
    402c:	50 93 1d 05 	sts	0x051D, r21
    4030:	40 93 1c 05 	sts	0x051C, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    4034:	80 91 f7 05 	lds	r24, 0x05F7
    4038:	82 30       	cpi	r24, 0x02	; 2
    403a:	11 f4       	brne	.+4      	; 0x4040 <main+0xd4>
			{
				ResampleRCRate = true;
    403c:	21 e0       	ldi	r18, 0x01	; 1
    403e:	2c 8f       	std	Y+28, r18	; 0x1c
			}
	
			// Check if Vbat lower than trigger
			if (GetVbat() < Config.PowerTriggerActual)
    4040:	0e 94 51 4e 	call	0x9ca2	; 0x9ca2 <GetVbat>
    4044:	20 91 53 06 	lds	r18, 0x0653
    4048:	30 91 54 06 	lds	r19, 0x0654
    404c:	82 17       	cp	r24, r18
    404e:	93 07       	cpc	r25, r19
    4050:	20 f4       	brcc	.+8      	; 0x405a <main+0xee>
			{
				General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    4052:	80 91 20 05 	lds	r24, 0x0520
    4056:	88 60       	ori	r24, 0x08	; 8
    4058:	03 c0       	rjmp	.+6      	; 0x4060 <main+0xf4>
			}
			else
			{
				General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    405a:	80 91 20 05 	lds	r24, 0x0520
    405e:	87 7f       	andi	r24, 0xF7	; 247
    4060:	80 93 20 05 	sts	0x0520, r24
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    4064:	1f 8a       	std	Y+23, r1	; 0x17
    4066:	1e 8a       	std	Y+22, r1	; 0x16

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    4068:	1f 86       	std	Y+15, r1	; 0x0f
    406a:	1e 86       	std	Y+14, r1	; 0x0e
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    406c:	81 2f       	mov	r24, r17
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	8b 30       	cpi	r24, 0x0B	; 11
    4072:	91 05       	cpc	r25, r1
    4074:	08 f0       	brcs	.+2      	; 0x4078 <main+0x10c>
    4076:	72 c0       	rjmp	.+228    	; 0x415c <main+0x1f0>
    4078:	fc 01       	movw	r30, r24
    407a:	e2 5c       	subi	r30, 0xC2	; 194
    407c:	ff 4f       	sbci	r31, 0xFF	; 255
    407e:	0c 94 f4 50 	jmp	0xa1e8	; 0xa1e8 <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    4082:	83 b1       	in	r24, 0x03	; 3
    4084:	80 7f       	andi	r24, 0xF0	; 240
    4086:	80 3f       	cpi	r24, 0xF0	; 240
    4088:	41 f0       	breq	.+16     	; 0x409a <main+0x12e>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    408a:	80 91 6e 00 	lds	r24, 0x006E
    408e:	81 60       	ori	r24, 0x01	; 1
    4090:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    4094:	13 e0       	ldi	r17, 0x03	; 3
					// Reset the status screen timeout
					Status_seconds = 0;
    4096:	18 8e       	std	Y+24, r1	; 0x18
    4098:	61 c0       	rjmp	.+194    	; 0x415c <main+0x1f0>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    409a:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    409e:	81 e0       	ldi	r24, 0x01	; 1
    40a0:	85 bb       	out	0x15, r24	; 21
    40a2:	5c c0       	rjmp	.+184    	; 0x415c <main+0x1f0>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    40a4:	80 91 fd 07 	lds	r24, 0x07FD
    40a8:	81 11       	cpse	r24, r1
    40aa:	4d c0       	rjmp	.+154    	; 0x4146 <main+0x1da>
    40ac:	01 11       	cpse	r16, r1
    40ae:	4b c0       	rjmp	.+150    	; 0x4146 <main+0x1da>
    40b0:	80 91 19 05 	lds	r24, 0x0519
    40b4:	88 23       	and	r24, r24
    40b6:	09 f4       	brne	.+2      	; 0x40ba <main+0x14e>
    40b8:	51 c0       	rjmp	.+162    	; 0x415c <main+0x1f0>
				{
					// Ready to move on
					Menu_mode = STATUS;
    40ba:	14 e0       	ldi	r17, 0x04	; 4
    40bc:	51 c0       	rjmp	.+162    	; 0x4160 <main+0x1f4>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    40be:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    40c2:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    40c4:	1a 8e       	std	Y+26, r1	; 0x1a
    40c6:	19 8e       	std	Y+25, r1	; 0x19
    40c8:	4b c0       	rjmp	.+150    	; 0x4160 <main+0x1f4>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    40ca:	1f 9b       	sbis	0x03, 7	; 3
    40cc:	47 c0       	rjmp	.+142    	; 0x415c <main+0x1f0>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    40ce:	15 e0       	ldi	r17, 0x05	; 5
    40d0:	45 c0       	rjmp	.+138    	; 0x415c <main+0x1f0>
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				// If in vibration test mode, stay in Status
				if ((Status_seconds >= 10) && (Config.Vibration == OFF))
    40d2:	38 8d       	ldd	r19, Y+24	; 0x18
    40d4:	3a 30       	cpi	r19, 0x0A	; 10
    40d6:	20 f0       	brcs	.+8      	; 0x40e0 <main+0x174>
    40d8:	80 91 fd 05 	lds	r24, 0x05FD
    40dc:	88 23       	and	r24, r24
    40de:	b1 f1       	breq	.+108    	; 0x414c <main+0x1e0>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    40e0:	1f 9b       	sbis	0x03, 7	; 3
    40e2:	36 c0       	rjmp	.+108    	; 0x4150 <main+0x1e4>
					// Prevent PWM output
					PWMOverride = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    40e4:	49 8d       	ldd	r20, Y+25	; 0x19
    40e6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    40e8:	43 31       	cpi	r20, 0x13	; 19
    40ea:	53 41       	sbci	r21, 0x13	; 19
    40ec:	b8 f1       	brcs	.+110    	; 0x415c <main+0x1f0>
				{
					Menu_mode = PRESTATUS;
    40ee:	13 e0       	ldi	r17, 0x03	; 3
    40f0:	37 c0       	rjmp	.+110    	; 0x4160 <main+0x1f4>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    40f2:	80 91 fd 07 	lds	r24, 0x07FD
    40f6:	81 11       	cpse	r24, r1
    40f8:	2d c0       	rjmp	.+90     	; 0x4154 <main+0x1e8>
    40fa:	01 11       	cpse	r16, r1
    40fc:	2b c0       	rjmp	.+86     	; 0x4154 <main+0x1e8>
    40fe:	80 91 19 05 	lds	r24, 0x0519
    4102:	88 23       	and	r24, r24
    4104:	69 f1       	breq	.+90     	; 0x4160 <main+0x1f4>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    4106:	18 e0       	ldi	r17, 0x08	; 8
    4108:	29 c0       	rjmp	.+82     	; 0x415c <main+0x1f0>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    410a:	0e 94 6e 28 	call	0x50dc	; 0x50dc <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    410e:	19 e0       	ldi	r17, 0x09	; 9
    4110:	27 c0       	rjmp	.+78     	; 0x4160 <main+0x1f4>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    4112:	80 91 fd 07 	lds	r24, 0x07FD
    4116:	81 11       	cpse	r24, r1
    4118:	1f c0       	rjmp	.+62     	; 0x4158 <main+0x1ec>
    411a:	01 11       	cpse	r16, r1
    411c:	1d c0       	rjmp	.+58     	; 0x4158 <main+0x1ec>
    411e:	80 91 19 05 	lds	r24, 0x0519
    4122:	88 23       	and	r24, r24
    4124:	e9 f0       	breq	.+58     	; 0x4160 <main+0x1f4>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    4126:	10 e0       	ldi	r17, 0x00	; 0
    4128:	19 c0       	rjmp	.+50     	; 0x415c <main+0x1f0>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    412a:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    412c:	80 91 20 05 	lds	r24, 0x0520
    4130:	84 60       	ori	r24, 0x04	; 4
    4132:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    4136:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    4138:	0e 94 b2 3a 	call	0x7564	; 0x7564 <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    413c:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    4140:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    4142:	18 8e       	std	Y+24, r1	; 0x18
    4144:	0d c0       	rjmp	.+26     	; 0x4160 <main+0x1f4>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    4146:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    4148:	00 e0       	ldi	r16, 0x00	; 0
    414a:	0a c0       	rjmp	.+20     	; 0x4160 <main+0x1f4>
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				// If in vibration test mode, stay in Status
				if ((Status_seconds >= 10) && (Config.Vibration == OFF))
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    414c:	17 e0       	ldi	r17, 0x07	; 7
    414e:	06 c0       	rjmp	.+12     	; 0x415c <main+0x1f0>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    4150:	1a e0       	ldi	r17, 0x0A	; 10
    4152:	06 c0       	rjmp	.+12     	; 0x4160 <main+0x1f4>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    4154:	18 e0       	ldi	r17, 0x08	; 8
    4156:	01 c0       	rjmp	.+2      	; 0x415a <main+0x1ee>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    4158:	10 e0       	ldi	r17, 0x00	; 0
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    415a:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    415c:	a1 2c       	mov	r10, r1
    415e:	02 c0       	rjmp	.+4      	; 0x4164 <main+0x1f8>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    4160:	aa 24       	eor	r10, r10
    4162:	a3 94       	inc	r10
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message
		if (Overdue)
    4164:	80 91 19 05 	lds	r24, 0x0519
    4168:	88 23       	and	r24, r24
    416a:	a1 f0       	breq	.+40     	; 0x4194 <main+0x228>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    416c:	80 91 20 05 	lds	r24, 0x0520
    4170:	82 60       	ori	r24, 0x02	; 2
    4172:	80 93 20 05 	sts	0x0520, r24

			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    4176:	80 91 57 06 	lds	r24, 0x0657
    417a:	81 30       	cpi	r24, 0x01	; 1
    417c:	81 f4       	brne	.+32     	; 0x419e <main+0x232>
    417e:	80 91 20 05 	lds	r24, 0x0520
    4182:	82 fd       	sbrc	r24, 2
    4184:	0c c0       	rjmp	.+24     	; 0x419e <main+0x232>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    4186:	80 91 20 05 	lds	r24, 0x0520
    418a:	84 60       	ori	r24, 0x04	; 4
    418c:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;							// Signal that FC is now disarmed
    4190:	2b 98       	cbi	0x05, 3	; 5
    4192:	05 c0       	rjmp	.+10     	; 0x419e <main+0x232>

		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    4194:	80 91 20 05 	lds	r24, 0x0520
    4198:	8d 7f       	andi	r24, 0xFD	; 253
    419a:	80 93 20 05 	sts	0x0520, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    419e:	80 91 20 05 	lds	r24, 0x0520
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    41a2:	83 fd       	sbrc	r24, 3
    41a4:	08 c0       	rjmp	.+16     	; 0x41b6 <main+0x24a>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    41a6:	80 91 20 05 	lds	r24, 0x0520
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    41aa:	81 fd       	sbrc	r24, 1
    41ac:	04 c0       	rjmp	.+8      	; 0x41b6 <main+0x24a>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    41ae:	80 91 20 05 	lds	r24, 0x0520

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    41b2:	80 ff       	sbrs	r24, 0
    41b4:	06 c0       	rjmp	.+12     	; 0x41c2 <main+0x256>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    41b6:	80 91 1e 05 	lds	r24, 0x051E
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    41ba:	84 ff       	sbrs	r24, 4
    41bc:	02 c0       	rjmp	.+4      	; 0x41c2 <main+0x256>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    41be:	29 9a       	sbi	0x05, 1	; 5
    41c0:	01 c0       	rjmp	.+2      	; 0x41c4 <main+0x258>
		}
		else 
		{
			LVA = 0;
    41c2:	29 98       	cbi	0x05, 1	; 5
		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		// All cases - reset arm timer
		if (Config.ArmMode == ARMABLE)
    41c4:	80 91 57 06 	lds	r24, 0x0657
    41c8:	81 30       	cpi	r24, 0x01	; 1
    41ca:	09 f0       	breq	.+2      	; 0x41ce <main+0x262>
    41cc:	9c c0       	rjmp	.+312    	; 0x4306 <main+0x39a>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    41ce:	80 91 78 08 	lds	r24, 0x0878
    41d2:	90 91 79 08 	lds	r25, 0x0879
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    41d6:	81 34       	cpi	r24, 0x41	; 65
    41d8:	9c 4f       	sbci	r25, 0xFC	; 252
    41da:	3c f0       	brlt	.+14     	; 0x41ea <main+0x27e>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    41dc:	80 91 78 08 	lds	r24, 0x0878
    41e0:	90 91 79 08 	lds	r25, 0x0879
    41e4:	80 3c       	cpi	r24, 0xC0	; 192
    41e6:	93 40       	sbci	r25, 0x03	; 3
    41e8:	14 f1       	brlt	.+68     	; 0x422e <main+0x2c2>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    41ea:	80 91 7a 08 	lds	r24, 0x087A
    41ee:	90 91 7b 08 	lds	r25, 0x087B
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    41f2:	81 34       	cpi	r24, 0x41	; 65
    41f4:	9c 4f       	sbci	r25, 0xFC	; 252
    41f6:	3c f0       	brlt	.+14     	; 0x4206 <main+0x29a>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    41f8:	80 91 7a 08 	lds	r24, 0x087A
    41fc:	90 91 7b 08 	lds	r25, 0x087B
    4200:	80 3c       	cpi	r24, 0xC0	; 192
    4202:	93 40       	sbci	r25, 0x03	; 3
    4204:	a4 f0       	brlt	.+40     	; 0x422e <main+0x2c2>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    4206:	80 91 7c 08 	lds	r24, 0x087C
    420a:	90 91 7d 08 	lds	r25, 0x087D
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    420e:	81 34       	cpi	r24, 0x41	; 65
    4210:	9c 4f       	sbci	r25, 0xFC	; 252
    4212:	3c f0       	brlt	.+14     	; 0x4222 <main+0x2b6>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    4214:	80 91 7c 08 	lds	r24, 0x087C
    4218:	90 91 7d 08 	lds	r25, 0x087D
    421c:	80 3c       	cpi	r24, 0xC0	; 192
    421e:	93 40       	sbci	r25, 0x03	; 3
    4220:	34 f0       	brlt	.+12     	; 0x422e <main+0x2c2>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    4222:	80 91 74 08 	lds	r24, 0x0874
    4226:	90 91 75 08 	lds	r25, 0x0875
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    422a:	c3 97       	sbiw	r24, 0x33	; 51
    422c:	24 f0       	brlt	.+8      	; 0x4236 <main+0x2ca>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
			   )
			{
				Arm_timer = 0;
    422e:	19 82       	std	Y+1, r1	; 0x01
    4230:	1a 82       	std	Y+2, r1	; 0x02
    4232:	1b 82       	std	Y+3, r1	; 0x03
    4234:	1c 82       	std	Y+4, r1	; 0x04
			}
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
    4236:	80 91 20 05 	lds	r24, 0x0520
				Disarm_timer = 0;
				Disarm_seconds = 0;
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    423a:	29 81       	ldd	r18, Y+1	; 0x01
    423c:	3a 81       	ldd	r19, Y+2	; 0x02
    423e:	4b 81       	ldd	r20, Y+3	; 0x03
    4240:	5c 81       	ldd	r21, Y+4	; 0x04
			{
				Arm_timer = 0;
			}
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
    4242:	82 ff       	sbrs	r24, 2
    4244:	1e c0       	rjmp	.+60     	; 0x4282 <main+0x316>
				Disarm_timer = 0;
				Disarm_seconds = 0;
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    4246:	2c 34       	cpi	r18, 0x4C	; 76
    4248:	3c 44       	sbci	r19, 0x4C	; 76
    424a:	41 05       	cpc	r20, r1
    424c:	51 05       	cpc	r21, r1
    424e:	08 f4       	brcc	.+2      	; 0x4252 <main+0x2e6>
    4250:	61 c0       	rjmp	.+194    	; 0x4314 <main+0x3a8>
    4252:	80 91 78 08 	lds	r24, 0x0878
    4256:	90 91 79 08 	lds	r25, 0x0879
    425a:	80 34       	cpi	r24, 0x40	; 64
    425c:	9c 4f       	sbci	r25, 0xFC	; 252
    425e:	0c f0       	brlt	.+2      	; 0x4262 <main+0x2f6>
    4260:	59 c0       	rjmp	.+178    	; 0x4314 <main+0x3a8>
				{
					Arm_timer = 0;
					General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    4262:	80 91 20 05 	lds	r24, 0x0520
    4266:	8b 7f       	andi	r24, 0xFB	; 251
    4268:	80 93 20 05 	sts	0x0520, r24
					CalibrateGyrosSlow();					// Calibrate gyros
    426c:	0e 94 cb 29 	call	0x5396	; 0x5396 <CalibrateGyrosSlow>
					LED1 = 1;								// Signal that FC is ready
    4270:	2b 9a       	sbi	0x05, 3	; 5
					reset_IMU();							// Reset IMU just in case...
    4272:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <reset_IMU>

					// Force Menu to IDLE immediately unless in vibration test mode
					if (Config.Vibration == OFF)
    4276:	80 91 fd 05 	lds	r24, 0x05FD
    427a:	81 11       	cpse	r24, r1
    427c:	4f c0       	rjmp	.+158    	; 0x431c <main+0x3b0>
					{
						Menu_mode = IDLE;
    427e:	10 e0       	ldi	r17, 0x00	; 0
    4280:	4d c0       	rjmp	.+154    	; 0x431c <main+0x3b0>
		
			// If armed, disarm if sticks held
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    4282:	22 3e       	cpi	r18, 0xE2	; 226
    4284:	34 4e       	sbci	r19, 0xE4	; 228
    4286:	41 05       	cpc	r20, r1
    4288:	51 05       	cpc	r21, r1
    428a:	a0 f0       	brcs	.+40     	; 0x42b4 <main+0x348>
    428c:	80 91 78 08 	lds	r24, 0x0878
    4290:	90 91 79 08 	lds	r25, 0x0879
    4294:	81 3c       	cpi	r24, 0xC1	; 193
    4296:	93 40       	sbci	r25, 0x03	; 3
    4298:	6c f0       	brlt	.+26     	; 0x42b4 <main+0x348>
				{
					Arm_timer = 0;
					General_error |= (1 << DISARMED);		// Set flags to disarmed
    429a:	80 91 20 05 	lds	r24, 0x0520
    429e:	84 60       	ori	r24, 0x04	; 4
    42a0:	80 93 20 05 	sts	0x0520, r24
					LED1 = 0;								// Signal that FC is now disarmed
    42a4:	2b 98       	cbi	0x05, 3	; 5
#ifdef ERROR_LOG
add_log(MANUAL);
    42a6:	82 e0       	ldi	r24, 0x02	; 2
    42a8:	0e 94 90 13 	call	0x2720	; 0x2720 <add_log>
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    42ac:	19 82       	std	Y+1, r1	; 0x01
    42ae:	1a 82       	std	Y+2, r1	; 0x02
    42b0:	1b 82       	std	Y+3, r1	; 0x03
    42b2:	1c 82       	std	Y+4, r1	; 0x04
#endif			
				}

				// Automatic disarm
				// Reset auto-disarm count if any RX activity or set to zero
				if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0))
    42b4:	80 91 1f 05 	lds	r24, 0x051F
    42b8:	80 fd       	sbrc	r24, 0
    42ba:	0b c0       	rjmp	.+22     	; 0x42d2 <main+0x366>
    42bc:	80 91 58 06 	lds	r24, 0x0658
    42c0:	88 23       	and	r24, r24
    42c2:	39 f0       	breq	.+14     	; 0x42d2 <main+0x366>
					Disarm_timer = 0;
					Disarm_seconds = 0;
				}
		
				// Increment disarm timer (seconds) if armed
				if (Disarm_timer > SECOND_TIMER)
    42c4:	2b a5       	ldd	r18, Y+43	; 0x2b
    42c6:	3c a5       	ldd	r19, Y+44	; 0x2c
    42c8:	2c 34       	cpi	r18, 0x4C	; 76
    42ca:	3c 44       	sbci	r19, 0x4C	; 76
    42cc:	28 f0       	brcs	.+10     	; 0x42d8 <main+0x36c>
				{
					Disarm_seconds++;
    42ce:	33 94       	inc	r3
    42d0:	01 c0       	rjmp	.+2      	; 0x42d4 <main+0x368>
    42d2:	31 2c       	mov	r3, r1
    42d4:	1c a6       	std	Y+44, r1	; 0x2c
    42d6:	1b a6       	std	Y+43, r1	; 0x2b
					Disarm_timer = 0;
				}

				// Auto-disarm model if timeout enabled and due
				// Don't allow disarms less than 30 seconds. That's just silly...
				if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))
    42d8:	40 91 58 06 	lds	r20, 0x0658
    42dc:	23 2d       	mov	r18, r3
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	84 2f       	mov	r24, r20
    42e2:	99 27       	eor	r25, r25
    42e4:	87 fd       	sbrc	r24, 7
    42e6:	90 95       	com	r25
    42e8:	28 17       	cp	r18, r24
    42ea:	39 07       	cpc	r19, r25
    42ec:	f4 f0       	brlt	.+60     	; 0x432a <main+0x3be>
    42ee:	4e 31       	cpi	r20, 0x1E	; 30
    42f0:	e4 f0       	brlt	.+56     	; 0x432a <main+0x3be>
				{
					// Disarm the FC
					General_error |= (1 << DISARMED);		// Set flags to disarmed
    42f2:	80 91 20 05 	lds	r24, 0x0520
    42f6:	84 60       	ori	r24, 0x04	; 4
    42f8:	80 93 20 05 	sts	0x0520, r24
					LED1 = 0;								// Signal that FC is now disarmed
    42fc:	2b 98       	cbi	0x05, 3	; 5
#ifdef ERROR_LOG
add_log(TIMER);
    42fe:	84 e0       	ldi	r24, 0x04	; 4
    4300:	0e 94 90 13 	call	0x2720	; 0x2720 <add_log>
    4304:	12 c0       	rjmp	.+36     	; 0x432a <main+0x3be>
		} // if (Config.ArmMode == ARMABLE)
		
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    4306:	80 91 20 05 	lds	r24, 0x0520
    430a:	8b 7f       	andi	r24, 0xFB	; 251
    430c:	80 93 20 05 	sts	0x0520, r24
			LED1 = 1;
    4310:	2b 9a       	sbi	0x05, 3	; 5
    4312:	0b c0       	rjmp	.+22     	; 0x432a <main+0x3be>
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
				Disarm_seconds = 0;
    4314:	31 2c       	mov	r3, r1
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    4316:	1c a6       	std	Y+44, r1	; 0x2c
    4318:	1b a6       	std	Y+43, r1	; 0x2b
    431a:	07 c0       	rjmp	.+14     	; 0x432a <main+0x3be>
				Disarm_seconds = 0;
    431c:	31 2c       	mov	r3, r1
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    431e:	1c a6       	std	Y+44, r1	; 0x2c
    4320:	1b a6       	std	Y+43, r1	; 0x2b
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    4322:	19 82       	std	Y+1, r1	; 0x01
    4324:	1a 82       	std	Y+2, r1	; 0x02
    4326:	1b 82       	std	Y+3, r1	; 0x03
    4328:	1c 82       	std	Y+4, r1	; 0x04
			LED1 = 1;
		}

		// All code based on RC inputs is redundant until new RC data is ready,
		// otherwise the same data will be read back each and every time.
		if (Interrupted)
    432a:	80 91 fd 07 	lds	r24, 0x07FD
    432e:	88 23       	and	r24, r24
    4330:	09 f4       	brne	.+2      	; 0x4334 <main+0x3c8>
    4332:	76 c1       	rjmp	.+748    	; 0x4620 <main+0x6b4>
			//************************************************************
			//* Get RC data
			//************************************************************

			// Update zeroed RC channel data
			RxGetChannels();
    4334:	0e 94 7c 4b 	call	0x96f8	; 0x96f8 <RxGetChannels>

			// Check for throttle reset
			if (MonopolarThrottle < THROTTLEIDLE)
    4338:	80 91 74 08 	lds	r24, 0x0874
    433c:	90 91 75 08 	lds	r25, 0x0875
    4340:	c2 97       	sbiw	r24, 0x32	; 50
    4342:	5c f4       	brge	.+22     	; 0x435a <main+0x3ee>
			{
				// Clear throttle high error
				General_error &= ~(1 << THROTTLE_HIGH);	
    4344:	80 91 20 05 	lds	r24, 0x0520
    4348:	8e 7f       	andi	r24, 0xFE	; 254
    434a:	80 93 20 05 	sts	0x0520, r24

				// Reset I-terms at throttle cut. Using memset saves code space
				memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    434e:	88 e1       	ldi	r24, 0x18	; 24
    4350:	a0 e2       	ldi	r26, 0x20	; 32
    4352:	b8 e0       	ldi	r27, 0x08	; 8
    4354:	1d 92       	st	X+, r1
    4356:	8a 95       	dec	r24
    4358:	e9 f7       	brne	.-6      	; 0x4354 <main+0x3e8>
			//* by the Config.TransitionSpeed setting.
			//* The transition will hold at P1n position if directed to.
			//************************************************************

			// P2 transition point hard-coded to 50% above center
			if 	(RCinputs[Config.FlightChan] > 500)
    435a:	80 91 fa 05 	lds	r24, 0x05FA
    435e:	88 0f       	add	r24, r24
    4360:	99 0b       	sbc	r25, r25
    4362:	fc 01       	movw	r30, r24
    4364:	ea 58       	subi	r30, 0x8A	; 138
    4366:	f7 4f       	sbci	r31, 0xF7	; 247
    4368:	20 81       	ld	r18, Z
    436a:	31 81       	ldd	r19, Z+1	; 0x01
    436c:	25 3f       	cpi	r18, 0xF5	; 245
    436e:	31 40       	sbci	r19, 0x01	; 1
    4370:	14 f0       	brlt	.+4      	; 0x4376 <main+0x40a>
			{
				Config.FlightSel = 2;			// Flight mode 2 (P2)
    4372:	22 e0       	ldi	r18, 0x02	; 2
    4374:	06 c0       	rjmp	.+12     	; 0x4382 <main+0x416>
			}
			// P1.n transition point hard-coded to 50% below center
			else if (RCinputs[Config.FlightChan] > -500)
    4376:	20 81       	ld	r18, Z
    4378:	31 81       	ldd	r19, Z+1	; 0x01
    437a:	2d 30       	cpi	r18, 0x0D	; 13
    437c:	3e 4f       	sbci	r19, 0xFE	; 254
    437e:	24 f0       	brlt	.+8      	; 0x4388 <main+0x41c>
			{
				Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    4380:	21 e0       	ldi	r18, 0x01	; 1
    4382:	20 93 cb 07 	sts	0x07CB, r18
    4386:	02 c0       	rjmp	.+4      	; 0x438c <main+0x420>
			}
			// Otherwise the default is P1
			else
			{
				Config.FlightSel = 0;			// Flight mode 0 (P1)
    4388:	10 92 cb 07 	sts	0x07CB, r1
			//* Set up the correct state for the current setting.
			//* Check for initial startup - the only time that old_flight should be "3".
			//* Also, re-initialise if the transition setting is changed
			//************************************************************

			if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    438c:	f3 e0       	ldi	r31, 0x03	; 3
    438e:	7f 16       	cp	r7, r31
    4390:	29 f0       	breq	.+10     	; 0x439c <main+0x430>
    4392:	20 91 fb 05 	lds	r18, 0x05FB
    4396:	38 a5       	ldd	r19, Y+40	; 0x28
    4398:	32 17       	cp	r19, r18
    439a:	51 f1       	breq	.+84     	; 0x43f0 <main+0x484>
			{
				switch(Config.FlightSel)
    439c:	70 90 cb 07 	lds	r7, 0x07CB
    43a0:	41 e0       	ldi	r20, 0x01	; 1
    43a2:	74 16       	cp	r7, r20
    43a4:	61 f0       	breq	.+24     	; 0x43be <main+0x452>
    43a6:	52 e0       	ldi	r21, 0x02	; 2
    43a8:	75 16       	cp	r7, r21
    43aa:	b1 f0       	breq	.+44     	; 0x43d8 <main+0x46c>
    43ac:	71 10       	cpse	r7, r1
    43ae:	1d c0       	rjmp	.+58     	; 0x43ea <main+0x47e>
				{
					case 0:
						Transition_state = TRANS_P1;
    43b0:	10 92 23 05 	sts	0x0523, r1
						transition_counter = 0;
    43b4:	10 92 25 05 	sts	0x0525, r1
    43b8:	10 92 24 05 	sts	0x0524, r1
						break;
    43bc:	16 c0       	rjmp	.+44     	; 0x43ea <main+0x47e>
					case 1:
						Transition_state = TRANS_P1n;
    43be:	24 e0       	ldi	r18, 0x04	; 4
    43c0:	20 93 23 05 	sts	0x0523, r18
						transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    43c4:	20 91 fc 05 	lds	r18, 0x05FC
    43c8:	33 27       	eor	r19, r19
    43ca:	27 fd       	sbrc	r18, 7
    43cc:	30 95       	com	r19
    43ce:	30 93 25 05 	sts	0x0525, r19
    43d2:	20 93 24 05 	sts	0x0524, r18
						break;
    43d6:	09 c0       	rjmp	.+18     	; 0x43ea <main+0x47e>
					case 2:
						Transition_state = TRANS_P2;
    43d8:	29 e0       	ldi	r18, 0x09	; 9
    43da:	20 93 23 05 	sts	0x0523, r18
						transition_counter = 100;
    43de:	a4 e6       	ldi	r26, 0x64	; 100
    43e0:	b0 e0       	ldi	r27, 0x00	; 0
    43e2:	b0 93 25 05 	sts	0x0525, r27
    43e6:	a0 93 24 05 	sts	0x0524, r26
						break;
					default:
						break;
				}		 
				old_flight = Config.FlightSel;
				old_trans_mode = Config.TransitionSpeed;
    43ea:	20 91 fb 05 	lds	r18, 0x05FB
    43ee:	28 a7       	std	Y+40, r18	; 0x28
			//************************************************************
			//* Transition state handling
			//************************************************************

			// Update timed transition when changing flight modes
			if (Config.FlightSel != old_flight)
    43f0:	30 91 cb 07 	lds	r19, 0x07CB
    43f4:	3b 8f       	std	Y+27, r19	; 0x1b
    43f6:	31 e0       	ldi	r19, 0x01	; 1
    43f8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    43fa:	47 11       	cpse	r20, r7
    43fc:	01 c0       	rjmp	.+2      	; 0x4400 <main+0x494>
    43fe:	30 e0       	ldi	r19, 0x00	; 0
				TransitionUpdated = true;
			}

			// Work out transition number when manually transitioning
			// Convert number to percentage (0 to 100%)
			if (Config.TransitionSpeed == 0)
    4400:	20 91 fb 05 	lds	r18, 0x05FB
    4404:	21 11       	cpse	r18, r1
    4406:	1b c0       	rjmp	.+54     	; 0x443e <main+0x4d2>
			{
				// Offset RC input to (approx) -250 to 2250
				temp1 = RCinputs[Config.FlightChan] + 1000;
    4408:	fc 01       	movw	r30, r24
    440a:	ea 58       	subi	r30, 0x8A	; 138
    440c:	f7 4f       	sbci	r31, 0xF7	; 247
    440e:	80 81       	ld	r24, Z
    4410:	91 81       	ldd	r25, Z+1	; 0x01
    4412:	88 51       	subi	r24, 0x18	; 24
    4414:	9c 4f       	sbci	r25, 0xFC	; 252
    4416:	97 ff       	sbrs	r25, 7
    4418:	02 c0       	rjmp	.+4      	; 0x441e <main+0x4b2>
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	90 e0       	ldi	r25, 0x00	; 0
				// Trim lower end to zero (0 to 2250)
				if (temp1 < 0) temp1 = 0;

				// Convert 0 to 2250 to 0 to 125. Divide by 20
				// Round to avoid truncation errors
				transition = (temp1 + 10) / 20;
    441e:	0a 96       	adiw	r24, 0x0a	; 10
    4420:	64 e1       	ldi	r22, 0x14	; 20
    4422:	70 e0       	ldi	r23, 0x00	; 0
    4424:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>

				// transition now has a range of 0 to 101 for 0 to 2000 input
				// Limit extent of transition value 0 to 100 (101 steps)
				if (transition > 100) transition = 100;
    4428:	65 36       	cpi	r22, 0x65	; 101
    442a:	71 05       	cpc	r23, r1
    442c:	0c f4       	brge	.+2      	; 0x4430 <main+0x4c4>
    442e:	be c3       	rjmp	.+1916   	; 0x4bac <main+0xc40>
    4430:	84 e6       	ldi	r24, 0x64	; 100
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	90 93 22 05 	sts	0x0522, r25
    4438:	80 93 21 05 	sts	0x0521, r24
    443c:	bb c3       	rjmp	.+1910   	; 0x4bb4 <main+0xc48>
			}
			else
			{
				// transition_counter counts from 0 to 100 (101 steps)
				transition = transition_counter;
    443e:	80 91 24 05 	lds	r24, 0x0524
    4442:	90 91 25 05 	lds	r25, 0x0525
    4446:	90 93 22 05 	sts	0x0522, r25
    444a:	80 93 21 05 	sts	0x0521, r24
			{
				Transition_state = TRANSITIONING;
			}

			// Update transition state change when control value or flight mode changes
			if (TransitionUpdated)
    444e:	33 23       	and	r19, r19
    4450:	99 f0       	breq	.+38     	; 0x4478 <main+0x50c>
			{
				// Update transition state from matrix
				Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    4452:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4454:	84 2f       	mov	r24, r20
    4456:	99 27       	eor	r25, r25
    4458:	87 fd       	sbrc	r24, 7
    445a:	90 95       	com	r25
    445c:	fc 01       	movw	r30, r24
    445e:	ee 0f       	add	r30, r30
    4460:	ff 1f       	adc	r31, r31
    4462:	e8 0f       	add	r30, r24
    4464:	f9 1f       	adc	r31, r25
    4466:	e7 0d       	add	r30, r7
    4468:	f1 1d       	adc	r31, r1
    446a:	77 fc       	sbrc	r7, 7
    446c:	fa 95       	dec	r31
    446e:	e0 50       	subi	r30, 0x00	; 0
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	e4 91       	lpm	r30, Z
    4474:	e0 93 23 05 	sts	0x0523, r30

			// Calculate transition time from user's setting
			transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
			// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
			if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    4478:	22 23       	and	r18, r18
    447a:	49 f0       	breq	.+18     	; 0x448e <main+0x522>
				// Update transition state from matrix
				Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
			}

			// Calculate transition time from user's setting
			transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    447c:	53 ec       	ldi	r21, 0xC3	; 195
    447e:	25 03       	mulsu	r18, r21
    4480:	c0 01       	movw	r24, r0
    4482:	11 24       	eor	r1, r1
		
			// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
			if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    4484:	4a 89       	ldd	r20, Y+18	; 0x12
    4486:	5b 89       	ldd	r21, Y+19	; 0x13
    4488:	84 17       	cp	r24, r20
    448a:	95 07       	cpc	r25, r21
    448c:	18 f0       	brcs	.+6      	; 0x4494 <main+0x528>
    448e:	33 23       	and	r19, r19
    4490:	09 f4       	brne	.+2      	; 0x4494 <main+0x528>
    4492:	a9 c0       	rjmp	.+338    	; 0x45e6 <main+0x67a>
			{
				Transition_timeout = 0;
				TransitionUpdated = false;

				// Fixed, end-point states
				if (Transition_state == TRANS_P1)
    4494:	80 91 23 05 	lds	r24, 0x0523
    4498:	81 11       	cpse	r24, r1
    449a:	05 c0       	rjmp	.+10     	; 0x44a6 <main+0x53a>
				{
					transition_counter = 0;
    449c:	10 92 25 05 	sts	0x0525, r1
    44a0:	10 92 24 05 	sts	0x0524, r1
    44a4:	22 c0       	rjmp	.+68     	; 0x44ea <main+0x57e>
				}
				else if (Transition_state == TRANS_P1n)
    44a6:	84 30       	cpi	r24, 0x04	; 4
    44a8:	31 f4       	brne	.+12     	; 0x44b6 <main+0x54a>
				{
					transition_counter = Config.Transition_P1n;
    44aa:	80 91 fc 05 	lds	r24, 0x05FC
    44ae:	99 27       	eor	r25, r25
    44b0:	87 fd       	sbrc	r24, 7
    44b2:	90 95       	com	r25
    44b4:	04 c0       	rjmp	.+8      	; 0x44be <main+0x552>
				}
				else if (Transition_state == TRANS_P2)
    44b6:	89 30       	cpi	r24, 0x09	; 9
    44b8:	39 f4       	brne	.+14     	; 0x44c8 <main+0x55c>
				{
					transition_counter = 100;
    44ba:	84 e6       	ldi	r24, 0x64	; 100
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	90 93 25 05 	sts	0x0525, r25
    44c2:	80 93 24 05 	sts	0x0524, r24
    44c6:	11 c0       	rjmp	.+34     	; 0x44ea <main+0x57e>
				}		

				// Over-ride users requesting silly states
				// If transition_counter is above P1.n but request is P1 to P1.n or 
				// if transition_counter is below P1.n but request is P2 to P1.n...
				if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    44c8:	81 30       	cpi	r24, 0x01	; 1
    44ca:	79 f4       	brne	.+30     	; 0x44ea <main+0x57e>
    44cc:	80 91 fc 05 	lds	r24, 0x05FC
    44d0:	99 27       	eor	r25, r25
    44d2:	87 fd       	sbrc	r24, 7
    44d4:	90 95       	com	r25
    44d6:	20 91 24 05 	lds	r18, 0x0524
    44da:	30 91 25 05 	lds	r19, 0x0525
    44de:	82 17       	cp	r24, r18
    44e0:	93 07       	cpc	r25, r19
    44e2:	1c f4       	brge	.+6      	; 0x44ea <main+0x57e>
				{
					// Reset state to a more appropriate one
					Transition_state = TRANS_P2_to_P1n_start;
    44e4:	88 e0       	ldi	r24, 0x08	; 8
    44e6:	80 93 23 05 	sts	0x0523, r24
				}

				if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    44ea:	80 91 23 05 	lds	r24, 0x0523
    44ee:	88 30       	cpi	r24, 0x08	; 8
    44f0:	79 f4       	brne	.+30     	; 0x4510 <main+0x5a4>
    44f2:	80 91 fc 05 	lds	r24, 0x05FC
    44f6:	99 27       	eor	r25, r25
    44f8:	87 fd       	sbrc	r24, 7
    44fa:	90 95       	com	r25
    44fc:	20 91 24 05 	lds	r18, 0x0524
    4500:	30 91 25 05 	lds	r19, 0x0525
    4504:	28 17       	cp	r18, r24
    4506:	39 07       	cpc	r19, r25
    4508:	1c f4       	brge	.+6      	; 0x4510 <main+0x5a4>
				{
					// Reset state to a more appropriate one
					Transition_state = TRANS_P1_to_P1n_start;
    450a:	81 e0       	ldi	r24, 0x01	; 1
    450c:	80 93 23 05 	sts	0x0523, r24
				}

				// Handle timed transition towards P1
				if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    4510:	80 91 23 05 	lds	r24, 0x0523
    4514:	8b 7f       	andi	r24, 0xFB	; 251
    4516:	82 30       	cpi	r24, 0x02	; 2
    4518:	91 f4       	brne	.+36     	; 0x453e <main+0x5d2>
				{
					transition_counter--;
    451a:	80 91 24 05 	lds	r24, 0x0524
    451e:	90 91 25 05 	lds	r25, 0x0525
    4522:	01 97       	sbiw	r24, 0x01	; 1
    4524:	90 93 25 05 	sts	0x0525, r25
    4528:	80 93 24 05 	sts	0x0524, r24
					if (transition_counter <= 0)
    452c:	18 16       	cp	r1, r24
    452e:	19 06       	cpc	r1, r25
    4530:	34 f0       	brlt	.+12     	; 0x453e <main+0x5d2>
					{
						transition_counter = 0;
    4532:	10 92 25 05 	sts	0x0525, r1
    4536:	10 92 24 05 	sts	0x0524, r1
						Transition_state = TRANS_P1;
    453a:	10 92 23 05 	sts	0x0523, r1
					}
				}

				// Handle timed transition between P1.n and P1
				if (Transition_state == TRANS_P1_to_P1n_start)
    453e:	80 91 23 05 	lds	r24, 0x0523
    4542:	81 30       	cpi	r24, 0x01	; 1
    4544:	c1 f4       	brne	.+48     	; 0x4576 <main+0x60a>
				{
					transition_counter++;
    4546:	80 91 24 05 	lds	r24, 0x0524
    454a:	90 91 25 05 	lds	r25, 0x0525
    454e:	01 96       	adiw	r24, 0x01	; 1
    4550:	90 93 25 05 	sts	0x0525, r25
    4554:	80 93 24 05 	sts	0x0524, r24
					if (transition_counter >= Config.Transition_P1n)
    4558:	20 91 fc 05 	lds	r18, 0x05FC
    455c:	33 27       	eor	r19, r19
    455e:	27 fd       	sbrc	r18, 7
    4560:	30 95       	com	r19
    4562:	82 17       	cp	r24, r18
    4564:	93 07       	cpc	r25, r19
    4566:	3c f0       	brlt	.+14     	; 0x4576 <main+0x60a>
					{
						transition_counter = Config.Transition_P1n;
    4568:	30 93 25 05 	sts	0x0525, r19
    456c:	20 93 24 05 	sts	0x0524, r18
						Transition_state = TRANS_P1n;
    4570:	84 e0       	ldi	r24, 0x04	; 4
    4572:	80 93 23 05 	sts	0x0523, r24
					}
				}			
				
				// Handle timed transition between P1.n and P2
				if (Transition_state == TRANS_P2_to_P1n_start)
    4576:	80 91 23 05 	lds	r24, 0x0523
    457a:	88 30       	cpi	r24, 0x08	; 8
    457c:	c1 f4       	brne	.+48     	; 0x45ae <main+0x642>
				{
					transition_counter--;
    457e:	80 91 24 05 	lds	r24, 0x0524
    4582:	90 91 25 05 	lds	r25, 0x0525
    4586:	01 97       	sbiw	r24, 0x01	; 1
    4588:	90 93 25 05 	sts	0x0525, r25
    458c:	80 93 24 05 	sts	0x0524, r24
					if (transition_counter <= Config.Transition_P1n)
    4590:	20 91 fc 05 	lds	r18, 0x05FC
    4594:	33 27       	eor	r19, r19
    4596:	27 fd       	sbrc	r18, 7
    4598:	30 95       	com	r19
    459a:	28 17       	cp	r18, r24
    459c:	39 07       	cpc	r19, r25
    459e:	3c f0       	brlt	.+14     	; 0x45ae <main+0x642>
					{
						transition_counter = Config.Transition_P1n;
    45a0:	30 93 25 05 	sts	0x0525, r19
    45a4:	20 93 24 05 	sts	0x0524, r18
						Transition_state = TRANS_P1n;
    45a8:	84 e0       	ldi	r24, 0x04	; 4
    45aa:	80 93 23 05 	sts	0x0523, r24
					}
				}

				// Handle timed transition towards P2
				if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    45ae:	80 91 23 05 	lds	r24, 0x0523
    45b2:	8b 7f       	andi	r24, 0xFB	; 251
    45b4:	83 30       	cpi	r24, 0x03	; 3
    45b6:	a9 f4       	brne	.+42     	; 0x45e2 <main+0x676>
				{
					transition_counter++;
    45b8:	80 91 24 05 	lds	r24, 0x0524
    45bc:	90 91 25 05 	lds	r25, 0x0525
    45c0:	01 96       	adiw	r24, 0x01	; 1
    45c2:	90 93 25 05 	sts	0x0525, r25
    45c6:	80 93 24 05 	sts	0x0524, r24
					if (transition_counter >= 100)
    45ca:	84 36       	cpi	r24, 0x64	; 100
    45cc:	91 05       	cpc	r25, r1
    45ce:	4c f0       	brlt	.+18     	; 0x45e2 <main+0x676>
					{
						transition_counter = 100;
    45d0:	a4 e6       	ldi	r26, 0x64	; 100
    45d2:	b0 e0       	ldi	r27, 0x00	; 0
    45d4:	b0 93 25 05 	sts	0x0525, r27
    45d8:	a0 93 24 05 	sts	0x0524, r26
						Transition_state = TRANS_P2;
    45dc:	89 e0       	ldi	r24, 0x09	; 9
    45de:	80 93 23 05 	sts	0x0523, r24
			// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
			if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
				// Update immediately
				TransitionUpdated)
			{
				Transition_timeout = 0;
    45e2:	1b 8a       	std	Y+19, r1	; 0x13
    45e4:	1a 8a       	std	Y+18, r1	; 0x12
				}

			} // Update transition_counter

			// Zero the I-terms of the opposite state so as to ensure a bump-less transition
			if ((Transition_state == TRANS_P1) || (transition == 0))
    45e6:	20 91 23 05 	lds	r18, 0x0523
    45ea:	22 23       	and	r18, r18
    45ec:	31 f0       	breq	.+12     	; 0x45fa <main+0x68e>
    45ee:	80 91 21 05 	lds	r24, 0x0521
    45f2:	90 91 22 05 	lds	r25, 0x0522
    45f6:	00 97       	sbiw	r24, 0x00	; 0
    45f8:	39 f4       	brne	.+14     	; 0x4608 <main+0x69c>
			{
				// Clear P2 I-term while fully in P1
				memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    45fa:	8c e0       	ldi	r24, 0x0C	; 12
    45fc:	ec e2       	ldi	r30, 0x2C	; 44
    45fe:	f8 e0       	ldi	r31, 0x08	; 8
    4600:	11 92       	st	Z+, r1
    4602:	8a 95       	dec	r24
    4604:	e9 f7       	brne	.-6      	; 0x4600 <main+0x694>
    4606:	0d c0       	rjmp	.+26     	; 0x4622 <main+0x6b6>
			}
			else if ((Transition_state == TRANS_P2) || (transition == 100))
    4608:	29 30       	cpi	r18, 0x09	; 9
    460a:	19 f0       	breq	.+6      	; 0x4612 <main+0x6a6>
    460c:	84 36       	cpi	r24, 0x64	; 100
    460e:	91 05       	cpc	r25, r1
    4610:	41 f4       	brne	.+16     	; 0x4622 <main+0x6b6>
			{
				// Clear P1 I-term while fully in P2
				memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    4612:	8c e0       	ldi	r24, 0x0C	; 12
    4614:	a0 e2       	ldi	r26, 0x20	; 32
    4616:	b8 e0       	ldi	r27, 0x08	; 8
    4618:	1d 92       	st	X+, r1
    461a:	8a 95       	dec	r24
    461c:	e9 f7       	brne	.-6      	; 0x4618 <main+0x6ac>
    461e:	01 c0       	rjmp	.+2      	; 0x4622 <main+0x6b6>
    4620:	7b 8e       	std	Y+27, r7	; 0x1b
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    4622:	0e 94 4f 32 	call	0x649e	; 0x649e <TIM16_ReadTCNT1>
    4626:	9d 8b       	std	Y+21, r25	; 0x15
    4628:	8c 8b       	std	Y+20, r24	; 0x14
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    462a:	84 15       	cp	r24, r4
    462c:	95 05       	cpc	r25, r5
    462e:	b8 f4       	brcc	.+46     	; 0x465e <main+0x6f2>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	a1 e0       	ldi	r26, 0x01	; 1
    4636:	b0 e0       	ldi	r27, 0x00	; 0
    4638:	84 19       	sub	r24, r4
    463a:	95 09       	sbc	r25, r5
    463c:	a1 09       	sbc	r26, r1
    463e:	b1 09       	sbc	r27, r1
    4640:	2c 89       	ldd	r18, Y+20	; 0x14
    4642:	3d 89       	ldd	r19, Y+21	; 0x15
    4644:	82 0f       	add	r24, r18
    4646:	93 1f       	adc	r25, r19
    4648:	a1 1d       	adc	r26, r1
    464a:	b1 1d       	adc	r27, r1
    464c:	2d 81       	ldd	r18, Y+5	; 0x05
    464e:	3e 81       	ldd	r19, Y+6	; 0x06
    4650:	4f 81       	ldd	r20, Y+7	; 0x07
    4652:	58 85       	ldd	r21, Y+8	; 0x08
    4654:	28 0f       	add	r18, r24
    4656:	39 1f       	adc	r19, r25
    4658:	4a 1f       	adc	r20, r26
    465a:	5b 1f       	adc	r21, r27
    465c:	0c c0       	rjmp	.+24     	; 0x4676 <main+0x70a>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    465e:	8c 89       	ldd	r24, Y+20	; 0x14
    4660:	9d 89       	ldd	r25, Y+21	; 0x15
    4662:	84 19       	sub	r24, r4
    4664:	95 09       	sbc	r25, r5
    4666:	2d 81       	ldd	r18, Y+5	; 0x05
    4668:	3e 81       	ldd	r19, Y+6	; 0x06
    466a:	4f 81       	ldd	r20, Y+7	; 0x07
    466c:	58 85       	ldd	r21, Y+8	; 0x08
    466e:	28 0f       	add	r18, r24
    4670:	39 1f       	adc	r19, r25
    4672:	41 1d       	adc	r20, r1
    4674:	51 1d       	adc	r21, r1
    4676:	2d 83       	std	Y+5, r18	; 0x05
    4678:	3e 83       	std	Y+6, r19	; 0x06
    467a:	4f 83       	std	Y+7, r20	; 0x07
    467c:	58 87       	std	Y+8, r21	; 0x08
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    467e:	80 91 b2 00 	lds	r24, 0x00B2
    4682:	3b a1       	ldd	r19, Y+35	; 0x23
    4684:	83 1b       	sub	r24, r19
    4686:	29 81       	ldd	r18, Y+1	; 0x01
    4688:	3a 81       	ldd	r19, Y+2	; 0x02
    468a:	4b 81       	ldd	r20, Y+3	; 0x03
    468c:	5c 81       	ldd	r21, Y+4	; 0x04
    468e:	28 0f       	add	r18, r24
    4690:	31 1d       	adc	r19, r1
    4692:	41 1d       	adc	r20, r1
    4694:	51 1d       	adc	r21, r1
    4696:	29 83       	std	Y+1, r18	; 0x01
    4698:	3a 83       	std	Y+2, r19	; 0x02
    469a:	4b 83       	std	Y+3, r20	; 0x03
    469c:	5c 83       	std	Y+4, r21	; 0x04
		Arm_TCNT2 = TCNT2;
    469e:	30 91 b2 00 	lds	r19, 0x00B2
    46a2:	3b a3       	std	Y+35, r19	; 0x23

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    46a4:	80 91 b2 00 	lds	r24, 0x00B2
    46a8:	4e a1       	ldd	r20, Y+38	; 0x26
    46aa:	84 1b       	sub	r24, r20
    46ac:	28 89       	ldd	r18, Y+16	; 0x10
    46ae:	39 89       	ldd	r19, Y+17	; 0x11
    46b0:	28 0f       	add	r18, r24
    46b2:	31 1d       	adc	r19, r1
    46b4:	39 8b       	std	Y+17, r19	; 0x11
    46b6:	28 8b       	std	Y+16, r18	; 0x10
		ServoRate_TCNT2 = TCNT2;
    46b8:	30 91 b2 00 	lds	r19, 0x00B2
    46bc:	3e a3       	std	Y+38, r19	; 0x26
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    46be:	80 91 b2 00 	lds	r24, 0x00B2
    46c2:	4d a1       	ldd	r20, Y+37	; 0x25
    46c4:	84 1b       	sub	r24, r20
    46c6:	29 85       	ldd	r18, Y+9	; 0x09
    46c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    46ca:	28 0f       	add	r18, r24
    46cc:	31 1d       	adc	r19, r1
    46ce:	3a 87       	std	Y+10, r19	; 0x0a
    46d0:	29 87       	std	Y+9, r18	; 0x09
		Servo_TCNT2 = TCNT2;
    46d2:	30 91 b2 00 	lds	r19, 0x00B2
    46d6:	3d a3       	std	Y+37, r19	; 0x25
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    46d8:	80 91 b2 00 	lds	r24, 0x00B2
    46dc:	4f 8d       	ldd	r20, Y+31	; 0x1f
    46de:	84 1b       	sub	r24, r20
    46e0:	2a 89       	ldd	r18, Y+18	; 0x12
    46e2:	3b 89       	ldd	r19, Y+19	; 0x13
    46e4:	28 0f       	add	r18, r24
    46e6:	31 1d       	adc	r19, r1
    46e8:	3b 8b       	std	Y+19, r19	; 0x13
    46ea:	2a 8b       	std	Y+18, r18	; 0x12
		Transition_TCNT2 = TCNT2;
    46ec:	30 91 b2 00 	lds	r19, 0x00B2
    46f0:	3f 8f       	std	Y+31, r19	; 0x1f

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    46f2:	80 91 b2 00 	lds	r24, 0x00B2
    46f6:	48 a1       	ldd	r20, Y+32	; 0x20
    46f8:	84 1b       	sub	r24, r20
    46fa:	2e 85       	ldd	r18, Y+14	; 0x0e
    46fc:	3f 85       	ldd	r19, Y+15	; 0x0f
    46fe:	28 0f       	add	r18, r24
    4700:	31 1d       	adc	r19, r1
    4702:	3f 87       	std	Y+15, r19	; 0x0f
    4704:	2e 87       	std	Y+14, r18	; 0x0e
		Status_TCNT2 = TCNT2;
    4706:	30 91 b2 00 	lds	r19, 0x00B2
    470a:	38 a3       	std	Y+32, r19	; 0x20
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    470c:	80 91 b2 00 	lds	r24, 0x00B2
    4710:	49 a1       	ldd	r20, Y+33	; 0x21
    4712:	84 1b       	sub	r24, r20
    4714:	29 8d       	ldd	r18, Y+25	; 0x19
    4716:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4718:	28 0f       	add	r18, r24
    471a:	31 1d       	adc	r19, r1
    471c:	3a 8f       	std	Y+26, r19	; 0x1a
    471e:	29 8f       	std	Y+25, r18	; 0x19
		Refresh_TCNT2 = TCNT2;
    4720:	30 91 b2 00 	lds	r19, 0x00B2
    4724:	39 a3       	std	Y+33, r19	; 0x21

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    4726:	80 91 b2 00 	lds	r24, 0x00B2
    472a:	4a a1       	ldd	r20, Y+34	; 0x22
    472c:	84 1b       	sub	r24, r20
    472e:	2b a5       	ldd	r18, Y+43	; 0x2b
    4730:	3c a5       	ldd	r19, Y+44	; 0x2c
    4732:	28 0f       	add	r18, r24
    4734:	31 1d       	adc	r19, r1
    4736:	3c a7       	std	Y+44, r19	; 0x2c
    4738:	2b a7       	std	Y+43, r18	; 0x2b
		Disarm_TCNT2 = TCNT2;
    473a:	30 91 b2 00 	lds	r19, 0x00B2
    473e:	3a a3       	std	Y+34, r19	; 0x22

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    4740:	80 91 b2 00 	lds	r24, 0x00B2
    4744:	4c a1       	ldd	r20, Y+36	; 0x24
    4746:	84 1b       	sub	r24, r20
    4748:	2d 8d       	ldd	r18, Y+29	; 0x1d
    474a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    474c:	28 0f       	add	r18, r24
    474e:	31 1d       	adc	r19, r1
    4750:	3e 8f       	std	Y+30, r19	; 0x1e
    4752:	2d 8f       	std	Y+29, r18	; 0x1d
		Ticker_TCNT2 = TCNT2;
    4754:	30 91 b2 00 	lds	r19, 0x00B2
    4758:	3c a3       	std	Y+36, r19	; 0x24
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    475a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    475c:	5e 8d       	ldd	r21, Y+30	; 0x1e
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    475e:	80 91 1e 05 	lds	r24, 0x051E
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    4762:	53 ff       	sbrs	r21, 3
    4764:	02 c0       	rjmp	.+4      	; 0x476a <main+0x7fe>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    4766:	80 61       	ori	r24, 0x10	; 16
    4768:	01 c0       	rjmp	.+2      	; 0x476c <main+0x800>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    476a:	8f 7e       	andi	r24, 0xEF	; 239
    476c:	80 93 1e 05 	sts	0x051E, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    4770:	28 89       	ldd	r18, Y+16	; 0x10
    4772:	39 89       	ldd	r19, Y+17	; 0x11
    4774:	2d 32       	cpi	r18, 0x2D	; 45
    4776:	31 40       	sbci	r19, 0x01	; 1
    4778:	20 f0       	brcs	.+8      	; 0x4782 <main+0x816>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    477a:	19 8a       	std	Y+17, r1	; 0x11
    477c:	18 8a       	std	Y+16, r1	; 0x10
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    477e:	22 24       	eor	r2, r2
    4780:	23 94       	inc	r2
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    4782:	29 85       	ldd	r18, Y+9	; 0x09
    4784:	3a 85       	ldd	r19, Y+10	; 0x0a
    4786:	26 32       	cpi	r18, 0x26	; 38
    4788:	36 42       	sbci	r19, 0x26	; 38
    478a:	90 f0       	brcs	.+36     	; 0x47b0 <main+0x844>
		{
#ifdef ERROR_LOG
			// Log the no signal event if previously NOT overdue, armable and armed
			// This makes sure we only get one log per event
			if ((!Overdue) && (Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    478c:	80 91 19 05 	lds	r24, 0x0519
    4790:	81 11       	cpse	r24, r1
    4792:	0b c0       	rjmp	.+22     	; 0x47aa <main+0x83e>
    4794:	80 91 57 06 	lds	r24, 0x0657
    4798:	81 30       	cpi	r24, 0x01	; 1
    479a:	39 f4       	brne	.+14     	; 0x47aa <main+0x83e>
    479c:	80 91 20 05 	lds	r24, 0x0520
    47a0:	82 fd       	sbrc	r24, 2
    47a2:	03 c0       	rjmp	.+6      	; 0x47aa <main+0x83e>
			{
				add_log(NOSIGNAL);
    47a4:	83 e0       	ldi	r24, 0x03	; 3
    47a6:	0e 94 90 13 	call	0x2720	; 0x2720 <add_log>
			}
#endif			
			Overdue = true;	// This results in a "No Signal" error
    47aa:	81 e0       	ldi	r24, 0x01	; 1
    47ac:	80 93 19 05 	sts	0x0519, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    47b0:	0e 94 49 29 	call	0x5292	; 0x5292 <ReadGyros>
		ReadAcc();
    47b4:	0e 94 80 11 	call	0x2300	; 0x2300 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    47b8:	0e 94 4f 32 	call	0x649e	; 0x649e <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    47bc:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    47be:	20 91 1a 05 	lds	r18, 0x051A
    47c2:	30 91 1b 05 	lds	r19, 0x051B
    47c6:	82 17       	cp	r24, r18
    47c8:	93 07       	cpc	r25, r19
    47ca:	48 f4       	brcc	.+18     	; 0x47de <main+0x872>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    47cc:	20 91 1a 05 	lds	r18, 0x051A
    47d0:	30 91 1b 05 	lds	r19, 0x051B
    47d4:	dc 01       	movw	r26, r24
    47d6:	a2 1b       	sub	r26, r18
    47d8:	b3 0b       	sbc	r27, r19
    47da:	9d 01       	movw	r18, r26
    47dc:	08 c0       	rjmp	.+16     	; 0x47ee <main+0x882>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    47de:	20 91 1a 05 	lds	r18, 0x051A
    47e2:	30 91 1b 05 	lds	r19, 0x051B
    47e6:	fc 01       	movw	r30, r24
    47e8:	e2 1b       	sub	r30, r18
    47ea:	f3 0b       	sbc	r31, r19
    47ec:	9f 01       	movw	r18, r30
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    47ee:	90 93 1b 05 	sts	0x051B, r25
    47f2:	80 93 1a 05 	sts	0x051A, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    47f6:	80 91 00 08 	lds	r24, 0x0800
    47fa:	90 91 01 08 	lds	r25, 0x0801
    47fe:	a9 01       	movw	r20, r18
    4800:	60 e0       	ldi	r22, 0x00	; 0
    4802:	70 e0       	ldi	r23, 0x00	; 0
    4804:	02 97       	sbiw	r24, 0x02	; 2
    4806:	18 f4       	brcc	.+6      	; 0x480e <main+0x8a2>
		{
			interval = ticker_16; // uint16_t
    4808:	2a 01       	movw	r4, r20
    480a:	3b 01       	movw	r6, r22
    480c:	11 c0       	rjmp	.+34     	; 0x4830 <main+0x8c4>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    480e:	40 90 00 08 	lds	r4, 0x0800
    4812:	50 90 01 08 	lds	r5, 0x0801
    4816:	61 2c       	mov	r6, r1
    4818:	71 2c       	mov	r7, r1
    481a:	2f e0       	ldi	r18, 0x0F	; 15
    481c:	44 0c       	add	r4, r4
    481e:	55 1c       	adc	r5, r5
    4820:	66 1c       	adc	r6, r6
    4822:	77 1c       	adc	r7, r7
    4824:	2a 95       	dec	r18
    4826:	d1 f7       	brne	.-12     	; 0x481c <main+0x8b0>
    4828:	44 0e       	add	r4, r20
    482a:	55 1e       	adc	r5, r21
    482c:	66 1e       	adc	r6, r22
    482e:	77 1e       	adc	r7, r23
		}

		TMR0_counter = 0;
    4830:	10 92 01 08 	sts	0x0801, r1
    4834:	10 92 00 08 	sts	0x0800, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    4838:	c3 01       	movw	r24, r6
    483a:	b2 01       	movw	r22, r4
    483c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    4840:	c3 01       	movw	r24, r6
    4842:	b2 01       	movw	r22, r4
    4844:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <Sensor_PID>
		//* FrameRate = Serial frame gap as measured by the ISR.
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//************************************************************

		if (Interrupted)
    4848:	80 91 fd 07 	lds	r24, 0x07FD
    484c:	88 23       	and	r24, r24
    484e:	09 f4       	brne	.+2      	; 0x4852 <main+0x8e6>
    4850:	c0 c0       	rjmp	.+384    	; 0x49d2 <main+0xa66>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer if not in FAST mode.
			if (Config.Servo_rate < FAST)
    4852:	80 91 f7 05 	lds	r24, 0x05F7
    4856:	82 30       	cpi	r24, 0x02	; 2
    4858:	64 f4       	brge	.+24     	; 0x4872 <main+0x906>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    485a:	21 e0       	ldi	r18, 0x01	; 1
    485c:	2b 87       	std	Y+11, r18	; 0x0b
    485e:	2d 81       	ldd	r18, Y+5	; 0x05
    4860:	3e 81       	ldd	r19, Y+6	; 0x06
    4862:	4f 81       	ldd	r20, Y+7	; 0x07
    4864:	58 85       	ldd	r21, Y+8	; 0x08
    4866:	24 3c       	cpi	r18, 0xC4	; 196
    4868:	32 4a       	sbci	r19, 0xA2	; 162
    486a:	41 05       	cpc	r20, r1
    486c:	51 05       	cpc	r21, r1
    486e:	08 f4       	brcc	.+2      	; 0x4872 <main+0x906>
    4870:	1b 86       	std	Y+11, r1	; 0x0b
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    4872:	b1 10       	cpse	r11, r1
    4874:	0e c0       	rjmp	.+28     	; 0x4892 <main+0x926>
    4876:	82 30       	cpi	r24, 0x02	; 2
    4878:	09 f0       	breq	.+2      	; 0x487c <main+0x910>
    487a:	a0 c1       	rjmp	.+832    	; 0x4bbc <main+0xc50>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    487c:	80 91 1b 08 	lds	r24, 0x081B
    4880:	90 91 1c 08 	lds	r25, 0x081C
    4884:	21 e0       	ldi	r18, 0x01	; 1
    4886:	2b 87       	std	Y+11, r18	; 0x0b
    4888:	84 3c       	cpi	r24, 0xC4	; 196
    488a:	92 4a       	sbci	r25, 0xA2	; 162
    488c:	40 f4       	brcc	.+16     	; 0x489e <main+0x932>
    488e:	1b 86       	std	Y+11, r1	; 0x0b
    4890:	3b c0       	rjmp	.+118    	; 0x4908 <main+0x99c>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the serial data gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    4892:	82 30       	cpi	r24, 0x02	; 2
    4894:	09 f0       	breq	.+2      	; 0x4898 <main+0x92c>
    4896:	92 c1       	rjmp	.+804    	; 0x4bbc <main+0xc50>
				// Slow packets (19.7ms gap). Pulse spans just two input packets.
				// 38.8s available space for S.Bus, 40ms for Satellite and 39.92ms for Xtreme.
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
    4898:	4b 85       	ldd	r20, Y+11	; 0x0b
    489a:	44 23       	and	r20, r20
    489c:	a9 f1       	breq	.+106    	; 0x4908 <main+0x99c>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
    489e:	58 ec       	ldi	r21, 0xC8	; 200
    48a0:	c5 16       	cp	r12, r21
    48a2:	5b e4       	ldi	r21, 0x4B	; 75
    48a4:	d5 06       	cpc	r13, r21
    48a6:	e1 04       	cpc	r14, r1
    48a8:	f1 04       	cpc	r15, r1
    48aa:	08 f0       	brcs	.+2      	; 0x48ae <main+0x942>
    48ac:	97 c1       	rjmp	.+814    	; 0x4bdc <main+0xc70>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
    48ae:	86 e2       	ldi	r24, 0x26	; 38
    48b0:	c8 16       	cp	r12, r24
    48b2:	8f e3       	ldi	r24, 0x3F	; 63
    48b4:	d8 06       	cpc	r13, r24
    48b6:	e1 04       	cpc	r14, r1
    48b8:	f1 04       	cpc	r15, r1
    48ba:	08 f0       	brcs	.+2      	; 0x48be <main+0x952>
    48bc:	93 c1       	rjmp	.+806    	; 0x4be4 <main+0xc78>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
    48be:	91 e2       	ldi	r25, 0x21	; 33
    48c0:	c9 16       	cp	r12, r25
    48c2:	96 e3       	ldi	r25, 0x36	; 54
    48c4:	d9 06       	cpc	r13, r25
    48c6:	e1 04       	cpc	r14, r1
    48c8:	f1 04       	cpc	r15, r1
    48ca:	08 f0       	brcs	.+2      	; 0x48ce <main+0x962>
    48cc:	8f c1       	rjmp	.+798    	; 0x4bec <main+0xc80>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
    48ce:	ad e5       	ldi	r26, 0x5D	; 93
    48d0:	ca 16       	cp	r12, r26
    48d2:	af e2       	ldi	r26, 0x2F	; 47
    48d4:	da 06       	cpc	r13, r26
    48d6:	e1 04       	cpc	r14, r1
    48d8:	f1 04       	cpc	r15, r1
    48da:	08 f0       	brcs	.+2      	; 0x48de <main+0x972>
    48dc:	73 c1       	rjmp	.+742    	; 0x4bc4 <main+0xc58>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
    48de:	bc ec       	ldi	r27, 0xCC	; 204
    48e0:	cb 16       	cp	r12, r27
    48e2:	b9 e2       	ldi	r27, 0x29	; 41
    48e4:	db 06       	cpc	r13, r27
    48e6:	e1 04       	cpc	r14, r1
    48e8:	f1 04       	cpc	r15, r1
    48ea:	08 f0       	brcs	.+2      	; 0x48ee <main+0x982>
    48ec:	6f c1       	rjmp	.+734    	; 0x4bcc <main+0xc60>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
    48ee:	bb 24       	eor	r11, r11
    48f0:	b3 94       	inc	r11
    48f2:	e4 ee       	ldi	r30, 0xE4	; 228
    48f4:	ce 16       	cp	r12, r30
    48f6:	e5 e2       	ldi	r30, 0x25	; 37
    48f8:	de 06       	cpc	r13, r30
    48fa:	e1 04       	cpc	r14, r1
    48fc:	f1 04       	cpc	r15, r1
    48fe:	88 f5       	brcc	.+98     	; 0x4962 <main+0x9f6>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    4900:	9a e0       	ldi	r25, 0x0A	; 10
    4902:	89 2e       	mov	r8, r25
    4904:	91 2c       	mov	r9, r1
    4906:	34 c0       	rjmp	.+104    	; 0x4970 <main+0xa04>

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
    4908:	fd ec       	ldi	r31, 0xCD	; 205
    490a:	cf 16       	cp	r12, r31
    490c:	f6 e4       	ldi	r31, 0x46	; 70
    490e:	df 06       	cpc	r13, r31
    4910:	e1 04       	cpc	r14, r1
    4912:	f1 04       	cpc	r15, r1
    4914:	08 f0       	brcs	.+2      	; 0x4918 <main+0x9ac>
    4916:	5e c1       	rjmp	.+700    	; 0x4bd4 <main+0xc68>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
    4918:	24 ea       	ldi	r18, 0xA4	; 164
    491a:	c2 16       	cp	r12, r18
    491c:	28 e3       	ldi	r18, 0x38	; 56
    491e:	d2 06       	cpc	r13, r18
    4920:	e1 04       	cpc	r14, r1
    4922:	f1 04       	cpc	r15, r1
    4924:	08 f0       	brcs	.+2      	; 0x4928 <main+0x9bc>
    4926:	5a c1       	rjmp	.+692    	; 0x4bdc <main+0xc70>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
    4928:	33 e3       	ldi	r19, 0x33	; 51
    492a:	c3 16       	cp	r12, r19
    492c:	3f e2       	ldi	r19, 0x2F	; 47
    492e:	d3 06       	cpc	r13, r19
    4930:	e1 04       	cpc	r14, r1
    4932:	f1 04       	cpc	r15, r1
    4934:	08 f0       	brcs	.+2      	; 0x4938 <main+0x9cc>
    4936:	56 c1       	rjmp	.+684    	; 0x4be4 <main+0xc78>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
    4938:	45 e7       	ldi	r20, 0x75	; 117
    493a:	c4 16       	cp	r12, r20
    493c:	48 e2       	ldi	r20, 0x28	; 40
    493e:	d4 06       	cpc	r13, r20
    4940:	e1 04       	cpc	r14, r1
    4942:	f1 04       	cpc	r15, r1
    4944:	08 f0       	brcs	.+2      	; 0x4948 <main+0x9dc>
    4946:	52 c1       	rjmp	.+676    	; 0x4bec <main+0xc80>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
    4948:	bb 24       	eor	r11, r11
    494a:	b3 94       	inc	r11
    494c:	56 e6       	ldi	r21, 0x66	; 102
    494e:	c5 16       	cp	r12, r21
    4950:	53 e2       	ldi	r21, 0x23	; 35
    4952:	d5 06       	cpc	r13, r21
    4954:	e1 04       	cpc	r14, r1
    4956:	f1 04       	cpc	r15, r1
    4958:	40 f4       	brcc	.+16     	; 0x496a <main+0x9fe>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 275Hz
    495a:	88 e0       	ldi	r24, 0x08	; 8
    495c:	88 2e       	mov	r8, r24
    495e:	91 2c       	mov	r9, r1
    4960:	07 c0       	rjmp	.+14     	; 0x4970 <main+0xa04>
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
    4962:	b9 e0       	ldi	r27, 0x09	; 9
    4964:	8b 2e       	mov	r8, r27
    4966:	91 2c       	mov	r9, r1
    4968:	03 c0       	rjmp	.+6      	; 0x4970 <main+0xa04>
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
    496a:	a7 e0       	ldi	r26, 0x07	; 7
    496c:	8a 2e       	mov	r8, r26
    496e:	91 2c       	mov	r9, r1

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
    4970:	10 92 19 05 	sts	0x0519, r1
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    4974:	0e 94 4f 32 	call	0x649e	; 0x649e <TIM16_ReadTCNT1>
    4978:	9d 8b       	std	Y+21, r25	; 0x15
    497a:	8c 8b       	std	Y+20, r24	; 0x14
			//* output when serial RC formats are used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    497c:	80 91 f7 05 	lds	r24, 0x05F7
    4980:	82 30       	cpi	r24, 0x02	; 2
    4982:	b1 f4       	brne	.+44     	; 0x49b0 <main+0xa44>
    4984:	bb 20       	and	r11, r11
    4986:	a1 f0       	breq	.+40     	; 0x49b0 <main+0xa44>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    4988:	2c 8d       	ldd	r18, Y+28	; 0x1c
    498a:	21 11       	cpse	r18, r1
    498c:	18 c0       	rjmp	.+48     	; 0x49be <main+0xa52>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    498e:	80 91 fd 07 	lds	r24, 0x07FD
    4992:	81 11       	cpse	r24, r1
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    4994:	01 e0       	ldi	r16, 0x01	; 1
					}
					
					Interrupted = false;		// Cancel pending interrupts
    4996:	10 92 fd 07 	sts	0x07FD, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    499a:	0e 94 21 35 	call	0x6a42	; 0x6a42 <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    499e:	1a 86       	std	Y+10, r1	; 0x0a
    49a0:	19 86       	std	Y+9, r1	; 0x09

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    49a2:	1d 82       	std	Y+5, r1	; 0x05
    49a4:	1e 82       	std	Y+6, r1	; 0x06
    49a6:	1f 82       	std	Y+7, r1	; 0x07
    49a8:	18 86       	std	Y+8, r1	; 0x08
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    49aa:	1d 86       	std	Y+13, r1	; 0x0d
					PWMBlocked = false;			// Enable PWM generation	
    49ac:	1c 86       	std	Y+12, r1	; 0x0c
    49ae:	11 c0       	rjmp	.+34     	; 0x49d2 <main+0xa66>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    49b0:	1a 86       	std	Y+10, r1	; 0x0a
    49b2:	19 86       	std	Y+9, r1	; 0x09

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    49b4:	1d 82       	std	Y+5, r1	; 0x05
    49b6:	1e 82       	std	Y+6, r1	; 0x06
    49b8:	1f 82       	std	Y+7, r1	; 0x07
    49ba:	18 86       	std	Y+8, r1	; 0x08
    49bc:	0a c0       	rjmp	.+20     	; 0x49d2 <main+0xa66>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    49be:	1a 86       	std	Y+10, r1	; 0x0a
    49c0:	19 86       	std	Y+9, r1	; 0x09

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    49c2:	1d 82       	std	Y+5, r1	; 0x05
    49c4:	1e 82       	std	Y+6, r1	; 0x06
    49c6:	1f 82       	std	Y+7, r1	; 0x07
    49c8:	18 86       	std	Y+8, r1	; 0x08
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    49ca:	1c 8e       	std	Y+28, r1	; 0x1c
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    49cc:	31 e0       	ldi	r19, 0x01	; 1
    49ce:	3c 87       	std	Y+12, r19	; 0x0c
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    49d0:	b1 2c       	mov	r11, r1
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    49d2:	80 91 fd 07 	lds	r24, 0x07FD
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    49d6:	81 11       	cpse	r24, r1
    49d8:	08 c0       	rjmp	.+16     	; 0x49ea <main+0xa7e>
				(Interrupted) ||											// Run at RC rate
    49da:	80 91 f7 05 	lds	r24, 0x05F7
    49de:	82 30       	cpi	r24, 0x02	; 2
    49e0:	09 f0       	breq	.+2      	; 0x49e4 <main+0xa78>
    49e2:	c3 c0       	rjmp	.+390    	; 0x4b6a <main+0xbfe>
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    49e4:	4c 85       	ldd	r20, Y+12	; 0x0c
    49e6:	41 11       	cpse	r20, r1
    49e8:	a1 c0       	rjmp	.+322    	; 0x4b2c <main+0xbc0>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    49ea:	80 91 fd 07 	lds	r24, 0x07FD
    49ee:	88 23       	and	r24, r24
    49f0:	19 f0       	breq	.+6      	; 0x49f8 <main+0xa8c>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    49f2:	10 92 fd 07 	sts	0x07FD, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    49f6:	01 e0       	ldi	r16, 0x01	; 1
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    49f8:	90 91 f7 05 	lds	r25, 0x05F7
    49fc:	e3 e6       	ldi	r30, 0x63	; 99
    49fe:	f6 e0       	ldi	r31, 0x06	; 6
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    4a04:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    4a06:	92 30       	cpi	r25, 0x02	; 2
    4a08:	29 f4       	brne	.+10     	; 0x4a14 <main+0xaa8>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    4a0a:	40 81       	ld	r20, Z
    4a0c:	44 23       	and	r20, r20
    4a0e:	09 f4       	brne	.+2      	; 0x4a12 <main+0xaa6>
    4a10:	f3 c0       	rjmp	.+486    	; 0x4bf8 <main+0xc8c>
    4a12:	0b c0       	rjmp	.+22     	; 0x4a2a <main+0xabe>
    4a14:	91 30       	cpi	r25, 0x01	; 1
    4a16:	39 f4       	brne	.+14     	; 0x4a26 <main+0xaba>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    4a18:	40 81       	ld	r20, Z
    4a1a:	41 11       	cpse	r20, r1
    4a1c:	06 c0       	rjmp	.+12     	; 0x4a2a <main+0xabe>
    4a1e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a20:	41 11       	cpse	r20, r1
    4a22:	0e c0       	rjmp	.+28     	; 0x4a40 <main+0xad4>
    4a24:	e9 c0       	rjmp	.+466    	; 0x4bf8 <main+0xc8c>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    4a26:	19 16       	cp	r1, r25
    4a28:	24 f4       	brge	.+8      	; 0x4a32 <main+0xac6>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    4a2a:	40 81       	ld	r20, Z
    4a2c:	14 16       	cp	r1, r20
    4a2e:	44 f0       	brlt	.+16     	; 0x4a40 <main+0xad4>
    4a30:	0f c0       	rjmp	.+30     	; 0x4a50 <main+0xae4>
    4a32:	91 11       	cpse	r25, r1
    4a34:	0d c0       	rjmp	.+26     	; 0x4a50 <main+0xae4>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    4a36:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a38:	41 11       	cpse	r20, r1
    4a3a:	02 c0       	rjmp	.+4      	; 0x4a40 <main+0xad4>
    4a3c:	22 20       	and	r2, r2
    4a3e:	41 f0       	breq	.+16     	; 0x4a50 <main+0xae4>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
					)
				{
					ServoFlag |= (1 << i);
    4a40:	41 e0       	ldi	r20, 0x01	; 1
    4a42:	50 e0       	ldi	r21, 0x00	; 0
    4a44:	02 2e       	mov	r0, r18
    4a46:	01 c0       	rjmp	.+2      	; 0x4a4a <main+0xade>
    4a48:	44 0f       	add	r20, r20
    4a4a:	0a 94       	dec	r0
    4a4c:	ea f7       	brpl	.-6      	; 0x4a48 <main+0xadc>
    4a4e:	84 2b       	or	r24, r20
    4a50:	2f 5f       	subi	r18, 0xFF	; 255
    4a52:	3f 4f       	sbci	r19, 0xFF	; 255
    4a54:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    4a56:	28 30       	cpi	r18, 0x08	; 8
    4a58:	31 05       	cpc	r19, r1
    4a5a:	a9 f6       	brne	.-86     	; 0x4a06 <main+0xa9a>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    4a5c:	22 20       	and	r2, r2
    4a5e:	11 f0       	breq	.+4      	; 0x4a64 <main+0xaf8>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    4a60:	19 8a       	std	Y+17, r1	; 0x11
    4a62:	18 8a       	std	Y+16, r1	; 0x10
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    4a64:	51 e0       	ldi	r21, 0x01	; 1
    4a66:	85 16       	cp	r8, r21
    4a68:	91 04       	cpc	r9, r1
    4a6a:	19 f5       	brne	.+70     	; 0x4ab2 <main+0xb46>
    4a6c:	92 30       	cpi	r25, 0x02	; 2
    4a6e:	09 f5       	brne	.+66     	; 0x4ab2 <main+0xb46>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
    4a70:	9d e8       	ldi	r25, 0x8D	; 141
    4a72:	49 16       	cp	r4, r25
    4a74:	90 e2       	ldi	r25, 0x20	; 32
    4a76:	59 06       	cpc	r5, r25
    4a78:	61 04       	cpc	r6, r1
    4a7a:	71 04       	cpc	r7, r1
    4a7c:	90 f0       	brcs	.+36     	; 0x4aa2 <main+0xb36>
    4a7e:	73 01       	movw	r14, r6
    4a80:	62 01       	movw	r12, r4
    4a82:	a2 e6       	ldi	r26, 0x62	; 98
    4a84:	4a 16       	cp	r4, r26
    4a86:	a1 e5       	ldi	r26, 0x51	; 81
    4a88:	5a 06       	cpc	r5, r26
    4a8a:	61 04       	cpc	r6, r1
    4a8c:	71 04       	cpc	r7, r1
    4a8e:	30 f0       	brcs	.+12     	; 0x4a9c <main+0xb30>
    4a90:	f1 e6       	ldi	r31, 0x61	; 97
    4a92:	cf 2e       	mov	r12, r31
    4a94:	f1 e5       	ldi	r31, 0x51	; 81
    4a96:	df 2e       	mov	r13, r31
    4a98:	e1 2c       	mov	r14, r1
    4a9a:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    4a9c:	21 e0       	ldi	r18, 0x01	; 1
    4a9e:	2c 87       	std	Y+12, r18	; 0x0c
    4aa0:	08 c0       	rjmp	.+16     	; 0x4ab2 <main+0xb46>
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
				{
					PWM_interval = PWM_PERIOD_BEST;
    4aa2:	ed e8       	ldi	r30, 0x8D	; 141
    4aa4:	ce 2e       	mov	r12, r30
    4aa6:	e0 e2       	ldi	r30, 0x20	; 32
    4aa8:	de 2e       	mov	r13, r30
    4aaa:	e1 2c       	mov	r14, r1
    4aac:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    4aae:	31 e0       	ldi	r19, 0x01	; 1
    4ab0:	3c 87       	std	Y+12, r19	; 0x0c
				{
					PWM_interval = interval;		// Actual interval
				}
			}
			
			Calculate_PID();						// Calculate PID values
    4ab2:	8a a7       	std	Y+42, r24	; 0x2a
    4ab4:	0e 94 a0 48 	call	0x9140	; 0x9140 <Calculate_PID>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
    4ab8:	0e 94 e4 3f 	call	0x7fc8	; 0x7fc8 <ProcessMixer>
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits				
    4abc:	0e 94 84 3f 	call	0x7f08	; 0x7f08 <UpdateServos>

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    4ac0:	90 91 19 05 	lds	r25, 0x0519
    4ac4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ac6:	91 11       	cpse	r25, r1
    4ac8:	09 c0       	rjmp	.+18     	; 0x4adc <main+0xb70>
			}
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    4aca:	aa 20       	and	r10, r10
    4acc:	f9 f0       	breq	.+62     	; 0x4b0c <main+0xba0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4ace:	8b ee       	ldi	r24, 0xEB	; 235
    4ad0:	9c e2       	ldi	r25, 0x2C	; 44
    4ad2:	01 97       	sbiw	r24, 0x01	; 1
    4ad4:	f1 f7       	brne	.-4      	; 0x4ad2 <main+0xb66>
    4ad6:	00 c0       	rjmp	.+0      	; 0x4ad8 <main+0xb6c>
    4ad8:	00 00       	nop
    4ada:	1a c0       	rjmp	.+52     	; 0x4b10 <main+0xba4>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits				

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    4adc:	e3 e6       	ldi	r30, 0x63	; 99
    4ade:	f6 e0       	ldi	r31, 0x06	; 6
    4ae0:	20 e0       	ldi	r18, 0x00	; 0
    4ae2:	30 e0       	ldi	r19, 0x00	; 0
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
				{
					// Check for motor marker
					if (Config.Channel[i].Motor_marker == MOTOR)
    4ae4:	90 81       	ld	r25, Z
    4ae6:	92 30       	cpi	r25, 0x02	; 2
    4ae8:	51 f4       	brne	.+20     	; 0x4afe <main+0xb92>
					{
						// Set output to maximum pulse width
						ServoOut[i] = MOTOR_0;
    4aea:	d9 01       	movw	r26, r18
    4aec:	aa 0f       	add	r26, r26
    4aee:	bb 1f       	adc	r27, r27
    4af0:	a8 57       	subi	r26, 0x78	; 120
    4af2:	b7 4f       	sbci	r27, 0xF7	; 247
    4af4:	4c e4       	ldi	r20, 0x4C	; 76
    4af6:	54 e0       	ldi	r21, 0x04	; 4
    4af8:	11 96       	adiw	r26, 0x01	; 1
    4afa:	5c 93       	st	X, r21
    4afc:	4e 93       	st	-X, r20
    4afe:	2f 5f       	subi	r18, 0xFF	; 255
    4b00:	3f 4f       	sbci	r19, 0xFF	; 255
    4b02:	b6 96       	adiw	r30, 0x26	; 38

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
    4b04:	28 30       	cpi	r18, 0x08	; 8
    4b06:	31 05       	cpc	r19, r1
    4b08:	69 f7       	brne	.-38     	; 0x4ae4 <main+0xb78>
    4b0a:	df cf       	rjmp	.-66     	; 0x4aca <main+0xb5e>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    4b0c:	0e 94 66 4c 	call	0x98cc	; 0x98cc <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    4b10:	80 91 f7 05 	lds	r24, 0x05F7
    4b14:	82 30       	cpi	r24, 0x02	; 2
    4b16:	31 f4       	brne	.+12     	; 0x4b24 <main+0xbb8>
    4b18:	18 14       	cp	r1, r8
    4b1a:	19 04       	cpc	r1, r9
    4b1c:	1c f4       	brge	.+6      	; 0x4b24 <main+0xbb8>
			{
				PWM_pulses--;
    4b1e:	91 e0       	ldi	r25, 0x01	; 1
    4b20:	89 1a       	sub	r8, r25
    4b22:	91 08       	sbc	r9, r1
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    4b24:	10 92 18 05 	sts	0x0518, r1
    4b28:	21 2c       	mov	r2, r1
    4b2a:	1f c0       	rjmp	.+62     	; 0x4b6a <main+0xbfe>
		}
		
		// In FAST mode and in-between bursts, sync up with the RC so that the time from Interrupt to PWM is constant.
		// This helps tighten up the number of pulses allowable
		else if ((Config.Servo_rate == FAST) && (PWMBlocked == true) && (RCrateMeasured == true) && (RCInterruptsON == true) && (Overdue == false))
    4b2c:	bb 20       	and	r11, r11
    4b2e:	79 f1       	breq	.+94     	; 0x4b8e <main+0xc22>
    4b30:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b32:	22 23       	and	r18, r18
    4b34:	09 f4       	brne	.+2      	; 0x4b38 <main+0xbcc>
    4b36:	63 c0       	rjmp	.+198    	; 0x4bfe <main+0xc92>
    4b38:	80 91 19 05 	lds	r24, 0x0519
    4b3c:	81 11       	cpse	r24, r1
    4b3e:	15 c0       	rjmp	.+42     	; 0x4b6a <main+0xbfe>
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	90 e0       	ldi	r25, 0x00	; 0
		{
			fast_sync_timer = 0;
			
			// Wait here until interrupted or timed out (15ms)
			while ((Interrupted == false) && (fast_sync_timer < FASTSYNCLIMIT))
    4b44:	20 91 fd 07 	lds	r18, 0x07FD
    4b48:	21 11       	cpse	r18, r1
    4b4a:	0e c0       	rjmp	.+28     	; 0x4b68 <main+0xbfc>
    4b4c:	85 32       	cpi	r24, 0x25	; 37
    4b4e:	51 e0       	ldi	r21, 0x01	; 1
    4b50:	95 07       	cpc	r25, r21
    4b52:	50 f4       	brcc	.+20     	; 0x4b68 <main+0xbfc>
			{
				fast_sync_timer += (uint8_t)(TCNT2 - fast_sync_TCNT2);
    4b54:	20 91 b2 00 	lds	r18, 0x00B2
    4b58:	3f a1       	ldd	r19, Y+39	; 0x27
    4b5a:	23 1b       	sub	r18, r19
    4b5c:	82 0f       	add	r24, r18
    4b5e:	91 1d       	adc	r25, r1
				fast_sync_TCNT2 = TCNT2;
    4b60:	40 91 b2 00 	lds	r20, 0x00B2
    4b64:	4f a3       	std	Y+39, r20	; 0x27
    4b66:	ee cf       	rjmp	.-36     	; 0x4b44 <main+0xbd8>
			}
			
			// Debug - Whhaaaat? - delete this unless I recall why it is even here.
			Interrupted_Clone = false;
    4b68:	00 e0       	ldi	r16, 0x00	; 0
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    4b6a:	18 14       	cp	r1, r8
    4b6c:	19 04       	cpc	r1, r9
    4b6e:	7c f0       	brlt	.+30     	; 0x4b8e <main+0xc22>
    4b70:	bb 20       	and	r11, r11
    4b72:	69 f0       	breq	.+26     	; 0x4b8e <main+0xc22>
    4b74:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b76:	21 11       	cpse	r18, r1
    4b78:	0a c0       	rjmp	.+20     	; 0x4b8e <main+0xc22>
    4b7a:	80 91 f7 05 	lds	r24, 0x05F7
    4b7e:	82 30       	cpi	r24, 0x02	; 2
    4b80:	29 f4       	brne	.+10     	; 0x4b8c <main+0xc20>
		{
			init_int();					// Re-enable interrupts
    4b82:	0e 94 34 35 	call	0x6a68	; 0x6a68 <init_int>
			RCInterruptsON = true;
    4b86:	31 e0       	ldi	r19, 0x01	; 1
    4b88:	3d 87       	std	Y+13, r19	; 0x0d
    4b8a:	01 c0       	rjmp	.+2      	; 0x4b8e <main+0xc22>
    4b8c:	1d 86       	std	Y+13, r1	; 0x0d
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    4b8e:	80 91 20 05 	lds	r24, 0x0520
    4b92:	49 a5       	ldd	r20, Y+41	; 0x29
    4b94:	48 17       	cp	r20, r24
    4b96:	19 f0       	breq	.+6      	; 0x4b9e <main+0xc32>
    4b98:	11 11       	cpse	r17, r1
    4b9a:	01 c0       	rjmp	.+2      	; 0x4b9e <main+0xc32>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    4b9c:	17 e0       	ldi	r17, 0x07	; 7
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    4b9e:	20 91 20 05 	lds	r18, 0x0520
    4ba2:	29 a7       	std	Y+41, r18	; 0x29
	
	} // while loop
    4ba4:	7b 8c       	ldd	r7, Y+27	; 0x1b
    4ba6:	4c 88       	ldd	r4, Y+20	; 0x14
    4ba8:	5d 88       	ldd	r5, Y+21	; 0x15
    4baa:	27 ca       	rjmp	.-2994   	; 0x3ffa <main+0x8e>
				// Trim lower end to zero (0 to 2250)
				if (temp1 < 0) temp1 = 0;

				// Convert 0 to 2250 to 0 to 125. Divide by 20
				// Round to avoid truncation errors
				transition = (temp1 + 10) / 20;
    4bac:	70 93 22 05 	sts	0x0522, r23
    4bb0:	60 93 21 05 	sts	0x0521, r22

			// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
			// This prevents state changes when controlled by a channel
			if (Config.TransitionSpeed == 0)
			{
				Transition_state = TRANSITIONING;
    4bb4:	85 e0       	ldi	r24, 0x05	; 5
    4bb6:	80 93 23 05 	sts	0x0523, r24
    4bba:	49 cc       	rjmp	.-1902   	; 0x444e <main+0x4e2>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    4bbc:	88 24       	eor	r8, r8
    4bbe:	83 94       	inc	r8
    4bc0:	91 2c       	mov	r9, r1
    4bc2:	d6 ce       	rjmp	.-596    	; 0x4970 <main+0xa04>
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
    4bc4:	57 e0       	ldi	r21, 0x07	; 7
    4bc6:	85 2e       	mov	r8, r21
    4bc8:	91 2c       	mov	r9, r1
    4bca:	13 c0       	rjmp	.+38     	; 0x4bf2 <main+0xc86>
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    4bcc:	48 e0       	ldi	r20, 0x08	; 8
    4bce:	84 2e       	mov	r8, r20
    4bd0:	91 2c       	mov	r9, r1
    4bd2:	0f c0       	rjmp	.+30     	; 0x4bf2 <main+0xc86>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 29ms is safe for all formats.

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
    4bd4:	33 e0       	ldi	r19, 0x03	; 3
    4bd6:	83 2e       	mov	r8, r19
    4bd8:	91 2c       	mov	r9, r1
    4bda:	0b c0       	rjmp	.+22     	; 0x4bf2 <main+0xc86>
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
    4bdc:	24 e0       	ldi	r18, 0x04	; 4
    4bde:	82 2e       	mov	r8, r18
    4be0:	91 2c       	mov	r9, r1
    4be2:	07 c0       	rjmp	.+14     	; 0x4bf2 <main+0xc86>
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
    4be4:	95 e0       	ldi	r25, 0x05	; 5
    4be6:	89 2e       	mov	r8, r25
    4be8:	91 2c       	mov	r9, r1
    4bea:	03 c0       	rjmp	.+6      	; 0x4bf2 <main+0xc86>
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    4bec:	86 e0       	ldi	r24, 0x06	; 6
    4bee:	88 2e       	mov	r8, r24
    4bf0:	91 2c       	mov	r9, r1
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    4bf2:	bb 24       	eor	r11, r11
    4bf4:	b3 94       	inc	r11
    4bf6:	bc ce       	rjmp	.-648    	; 0x4970 <main+0xa04>
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    4bf8:	21 10       	cpse	r2, r1
    4bfa:	22 cf       	rjmp	.-444    	; 0x4a40 <main+0xad4>
    4bfc:	16 cf       	rjmp	.-468    	; 0x4a2a <main+0xabe>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    4bfe:	18 14       	cp	r1, r8
    4c00:	19 04       	cpc	r1, r9
    4c02:	2c f2       	brlt	.-118    	; 0x4b8e <main+0xc22>
    4c04:	ba cf       	rjmp	.-140    	; 0x4b7a <main+0xc0e>

00004c06 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    4c06:	0f 93       	push	r16
    4c08:	1f 93       	push	r17
    4c0a:	cf 93       	push	r28
    4c0c:	df 93       	push	r29
    4c0e:	c7 e0       	ldi	r28, 0x07	; 7
    4c10:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    4c12:	08 2f       	mov	r16, r24
    4c14:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    4c16:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    4c18:	c8 01       	movw	r24, r16
    4c1a:	0c 2e       	mov	r0, r28
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <spiwrite+0x1c>
    4c1e:	95 95       	asr	r25
    4c20:	87 95       	ror	r24
    4c22:	0a 94       	dec	r0
    4c24:	e2 f7       	brpl	.-8      	; 0x4c1e <spiwrite+0x18>
    4c26:	80 ff       	sbrs	r24, 0
    4c28:	02 c0       	rjmp	.+4      	; 0x4c2e <spiwrite+0x28>
		{
			LCD_SI = 1;
    4c2a:	59 9a       	sbi	0x0b, 1	; 11
    4c2c:	01 c0       	rjmp	.+2      	; 0x4c30 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    4c2e:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    4c30:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    4c32:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <glcd_delay>
    4c36:	21 97       	sbiw	r28, 0x01	; 1
    4c38:	70 f7       	brcc	.-36     	; 0x4c16 <spiwrite+0x10>
	}
}
    4c3a:	df 91       	pop	r29
    4c3c:	cf 91       	pop	r28
    4c3e:	1f 91       	pop	r17
    4c40:	0f 91       	pop	r16
    4c42:	08 95       	ret

00004c44 <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    4c44:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    4c46:	0c 94 03 26 	jmp	0x4c06	; 0x4c06 <spiwrite>

00004c4a <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    4c4a:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    4c4c:	0c 94 03 26 	jmp	0x4c06	; 0x4c06 <spiwrite>

00004c50 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    4c50:	cf 93       	push	r28
    4c52:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    4c54:	81 e8       	ldi	r24, 0x81	; 129
    4c56:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
	st7565_command(val);
    4c5a:	8c 2f       	mov	r24, r28
}
    4c5c:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    4c5e:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <st7565_command>

00004c62 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    4c62:	cf 93       	push	r28
    4c64:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    4c66:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    4c68:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4c6a:	87 e8       	ldi	r24, 0x87	; 135
    4c6c:	93 e1       	ldi	r25, 0x13	; 19
    4c6e:	01 97       	sbiw	r24, 0x01	; 1
    4c70:	f1 f7       	brne	.-4      	; 0x4c6e <st7565_init+0xc>
    4c72:	00 c0       	rjmp	.+0      	; 0x4c74 <st7565_init+0x12>
    4c74:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    4c76:	5e 9a       	sbi	0x0b, 6	; 11
    4c78:	c8 e6       	ldi	r28, 0x68	; 104
    4c7a:	d0 e1       	ldi	r29, 0x10	; 16

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    4c7c:	fe 01       	movw	r30, r28
    4c7e:	84 91       	lpm	r24, Z
    4c80:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
    4c84:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    4c86:	f0 e1       	ldi	r31, 0x10	; 16
    4c88:	c6 37       	cpi	r28, 0x76	; 118
    4c8a:	df 07       	cpc	r29, r31
    4c8c:	b9 f7       	brne	.-18     	; 0x4c7c <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    4c8e:	80 91 56 06 	lds	r24, 0x0656
    4c92:	0e 94 28 26 	call	0x4c50	; 0x4c50 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    4c96:	88 ec       	ldi	r24, 0xC8	; 200
}
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    4c9c:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <st7565_command>

00004ca0 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    4ca0:	df 92       	push	r13
    4ca2:	ef 92       	push	r14
    4ca4:	ff 92       	push	r15
    4ca6:	0f 93       	push	r16
    4ca8:	1f 93       	push	r17
    4caa:	cf 93       	push	r28
    4cac:	df 93       	push	r29
    4cae:	c6 e7       	ldi	r28, 0x76	; 118
    4cb0:	d0 e1       	ldi	r29, 0x10	; 16
    4cb2:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	84 91       	lpm	r24, Z
    4cb8:	80 6b       	ori	r24, 0xB0	; 176
    4cba:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    4cc4:	80 e1       	ldi	r24, 0x10	; 16
    4cc6:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    4cca:	80 ee       	ldi	r24, 0xE0	; 224
    4ccc:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
    4cd0:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    4cd2:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    4cd4:	f7 01       	movw	r30, r14
    4cd6:	81 91       	ld	r24, Z+
    4cd8:	7f 01       	movw	r14, r30
    4cda:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    4cde:	d3 94       	inc	r13
    4ce0:	f0 e8       	ldi	r31, 0x80	; 128
    4ce2:	df 12       	cpse	r13, r31
    4ce4:	f7 cf       	rjmp	.-18     	; 0x4cd4 <write_buffer+0x34>
    4ce6:	21 96       	adiw	r28, 0x01	; 1
    4ce8:	00 58       	subi	r16, 0x80	; 128
    4cea:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    4cec:	80 e1       	ldi	r24, 0x10	; 16
    4cee:	ce 37       	cpi	r28, 0x7E	; 126
    4cf0:	d8 07       	cpc	r29, r24
    4cf2:	01 f7       	brne	.-64     	; 0x4cb4 <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    4cf4:	df 91       	pop	r29
    4cf6:	cf 91       	pop	r28
    4cf8:	1f 91       	pop	r17
    4cfa:	0f 91       	pop	r16
    4cfc:	ff 90       	pop	r15
    4cfe:	ef 90       	pop	r14
    4d00:	df 90       	pop	r13
    4d02:	08 95       	ret

00004d04 <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	34 e0       	ldi	r19, 0x04	; 4
    4d08:	fc 01       	movw	r30, r24
    4d0a:	a9 01       	movw	r20, r18
    4d0c:	11 92       	st	Z+, r1
    4d0e:	41 50       	subi	r20, 0x01	; 1
    4d10:	50 40       	sbci	r21, 0x00	; 0
    4d12:	e1 f7       	brne	.-8      	; 0x4d0c <clear_buffer+0x8>
    4d14:	08 95       	ret

00004d16 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    4d16:	cf 93       	push	r28
    4d18:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4d1a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    4d1c:	8d 2f       	mov	r24, r29
    4d1e:	80 6b       	ori	r24, 0xB0	; 176
    4d20:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4d24:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    4d26:	8c 2f       	mov	r24, r28
    4d28:	8f 70       	andi	r24, 0x0F	; 15
    4d2a:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    4d2e:	8c 2f       	mov	r24, r28
    4d30:	82 95       	swap	r24
    4d32:	8f 70       	andi	r24, 0x0F	; 15
    4d34:	80 61       	ori	r24, 0x10	; 16
    4d36:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
			st7565_data(0x00);											// Clear data
    4d3a:	80 e0       	ldi	r24, 0x00	; 0
    4d3c:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4d40:	cf 5f       	subi	r28, 0xFF	; 255
    4d42:	c0 38       	cpi	r28, 0x80	; 128
    4d44:	81 f7       	brne	.-32     	; 0x4d26 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4d46:	df 5f       	subi	r29, 0xFF	; 255
    4d48:	d8 30       	cpi	r29, 0x08	; 8
    4d4a:	41 f7       	brne	.-48     	; 0x4d1c <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    4d4c:	df 91       	pop	r29
    4d4e:	cf 91       	pop	r28
    4d50:	08 95       	ret

00004d52 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    4d52:	67 fd       	sbrc	r22, 7
    4d54:	36 c0       	rjmp	.+108    	; 0x4dc2 <setpixel+0x70>
    4d56:	40 34       	cpi	r20, 0x40	; 64
    4d58:	a0 f5       	brcc	.+104    	; 0x4dc2 <setpixel+0x70>
    4d5a:	34 2f       	mov	r19, r20
    4d5c:	36 95       	lsr	r19
    4d5e:	36 95       	lsr	r19
    4d60:	36 95       	lsr	r19
    4d62:	e6 2f       	mov	r30, r22
    4d64:	f0 e0       	ldi	r31, 0x00	; 0
    4d66:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    4d68:	22 23       	and	r18, r18
    4d6a:	a9 f0       	breq	.+42     	; 0x4d96 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    4d6c:	20 e8       	ldi	r18, 0x80	; 128
    4d6e:	32 9f       	mul	r19, r18
    4d70:	e0 0d       	add	r30, r0
    4d72:	f1 1d       	adc	r31, r1
    4d74:	11 24       	eor	r1, r1
    4d76:	e8 0f       	add	r30, r24
    4d78:	f9 1f       	adc	r31, r25
    4d7a:	40 95       	com	r20
    4d7c:	50 95       	com	r21
    4d7e:	47 70       	andi	r20, 0x07	; 7
    4d80:	55 27       	eor	r21, r21
    4d82:	81 e0       	ldi	r24, 0x01	; 1
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	04 2e       	mov	r0, r20
    4d88:	01 c0       	rjmp	.+2      	; 0x4d8c <setpixel+0x3a>
    4d8a:	88 0f       	add	r24, r24
    4d8c:	0a 94       	dec	r0
    4d8e:	ea f7       	brpl	.-6      	; 0x4d8a <setpixel+0x38>
    4d90:	90 81       	ld	r25, Z
    4d92:	98 2b       	or	r25, r24
    4d94:	15 c0       	rjmp	.+42     	; 0x4dc0 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    4d96:	20 e8       	ldi	r18, 0x80	; 128
    4d98:	32 9f       	mul	r19, r18
    4d9a:	e0 0d       	add	r30, r0
    4d9c:	f1 1d       	adc	r31, r1
    4d9e:	11 24       	eor	r1, r1
    4da0:	e8 0f       	add	r30, r24
    4da2:	f9 1f       	adc	r31, r25
    4da4:	40 95       	com	r20
    4da6:	50 95       	com	r21
    4da8:	47 70       	andi	r20, 0x07	; 7
    4daa:	55 27       	eor	r21, r21
    4dac:	81 e0       	ldi	r24, 0x01	; 1
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	04 2e       	mov	r0, r20
    4db2:	01 c0       	rjmp	.+2      	; 0x4db6 <setpixel+0x64>
    4db4:	88 0f       	add	r24, r24
    4db6:	0a 94       	dec	r0
    4db8:	ea f7       	brpl	.-6      	; 0x4db4 <setpixel+0x62>
    4dba:	80 95       	com	r24
    4dbc:	90 81       	ld	r25, Z
    4dbe:	98 23       	and	r25, r24
    4dc0:	90 83       	st	Z, r25
    4dc2:	08 95       	ret

00004dc4 <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    4dc4:	9f 92       	push	r9
    4dc6:	af 92       	push	r10
    4dc8:	bf 92       	push	r11
    4dca:	cf 92       	push	r12
    4dcc:	df 92       	push	r13
    4dce:	ef 92       	push	r14
    4dd0:	ff 92       	push	r15
    4dd2:	0f 93       	push	r16
    4dd4:	1f 93       	push	r17
    4dd6:	cf 93       	push	r28
    4dd8:	df 93       	push	r29
    4dda:	ec 01       	movw	r28, r24
    4ddc:	16 2f       	mov	r17, r22
    4dde:	f4 2e       	mov	r15, r20
    4de0:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    4de2:	a0 2f       	mov	r26, r16
    4de4:	b0 e0       	ldi	r27, 0x00	; 0
    4de6:	a4 1b       	sub	r26, r20
    4de8:	b1 09       	sbc	r27, r1
    4dea:	b7 ff       	sbrs	r27, 7
    4dec:	03 c0       	rjmp	.+6      	; 0x4df4 <drawline+0x30>
    4dee:	b1 95       	neg	r27
    4df0:	a1 95       	neg	r26
    4df2:	b1 09       	sbc	r27, r1
    4df4:	ed 2d       	mov	r30, r13
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	e1 1b       	sub	r30, r17
    4dfa:	f1 09       	sbc	r31, r1
    4dfc:	f7 ff       	sbrs	r31, 7
    4dfe:	03 c0       	rjmp	.+6      	; 0x4e06 <drawline+0x42>
    4e00:	f1 95       	neg	r31
    4e02:	e1 95       	neg	r30
    4e04:	f1 09       	sbc	r31, r1
    4e06:	bb 24       	eor	r11, r11
    4e08:	b3 94       	inc	r11
    4e0a:	ea 17       	cp	r30, r26
    4e0c:	fb 07       	cpc	r31, r27
    4e0e:	14 f0       	brlt	.+4      	; 0x4e14 <drawline+0x50>
    4e10:	b1 2c       	mov	r11, r1
    4e12:	06 c0       	rjmp	.+12     	; 0x4e20 <drawline+0x5c>
    4e14:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    4e16:	d0 2e       	mov	r13, r16
    4e18:	08 2f       	mov	r16, r24
    4e1a:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    4e1c:	1f 2d       	mov	r17, r15
    4e1e:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    4e20:	d1 16       	cp	r13, r17
    4e22:	30 f4       	brcc	.+12     	; 0x4e30 <drawline+0x6c>
    4e24:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    4e26:	f0 2e       	mov	r15, r16
    4e28:	08 2f       	mov	r16, r24
    4e2a:	81 2f       	mov	r24, r17
    4e2c:	1d 2d       	mov	r17, r13
    4e2e:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    4e30:	ad 2c       	mov	r10, r13
    4e32:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    4e34:	e0 2f       	mov	r30, r16
    4e36:	f0 e0       	ldi	r31, 0x00	; 0
    4e38:	ef 19       	sub	r30, r15
    4e3a:	f1 09       	sbc	r31, r1
    4e3c:	f7 ff       	sbrs	r31, 7
    4e3e:	03 c0       	rjmp	.+6      	; 0x4e46 <drawline+0x82>
    4e40:	f1 95       	neg	r31
    4e42:	e1 95       	neg	r30
    4e44:	f1 09       	sbc	r31, r1
    4e46:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    4e48:	ca 2c       	mov	r12, r10
    4e4a:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    4e4c:	f0 16       	cp	r15, r16
    4e4e:	10 f4       	brcc	.+4      	; 0x4e54 <drawline+0x90>
	{
		ystep = 1;
    4e50:	01 e0       	ldi	r16, 0x01	; 1
    4e52:	10 c0       	rjmp	.+32     	; 0x4e74 <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    4e54:	0f ef       	ldi	r16, 0xFF	; 255
    4e56:	0e c0       	rjmp	.+28     	; 0x4e74 <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    4e58:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    4e5a:	bb 20       	and	r11, r11
    4e5c:	71 f0       	breq	.+28     	; 0x4e7a <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    4e5e:	41 2f       	mov	r20, r17
    4e60:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4e62:	ce 01       	movw	r24, r28
    4e64:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
		}
		err -= dy;
    4e68:	c9 18       	sub	r12, r9
		if (err < 0) 
    4e6a:	c7 fe       	sbrs	r12, 7
    4e6c:	02 c0       	rjmp	.+4      	; 0x4e72 <drawline+0xae>
		{
			y0 += ystep;
    4e6e:	f0 0e       	add	r15, r16
			err += dx;
    4e70:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    4e72:	1f 5f       	subi	r17, 0xFF	; 255
    4e74:	1d 15       	cp	r17, r13
    4e76:	80 f3       	brcs	.-32     	; 0x4e58 <drawline+0x94>
    4e78:	03 c0       	rjmp	.+6      	; 0x4e80 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4e7a:	4f 2d       	mov	r20, r15
    4e7c:	61 2f       	mov	r22, r17
    4e7e:	f1 cf       	rjmp	.-30     	; 0x4e62 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    4e80:	df 91       	pop	r29
    4e82:	cf 91       	pop	r28
    4e84:	1f 91       	pop	r17
    4e86:	0f 91       	pop	r16
    4e88:	ff 90       	pop	r15
    4e8a:	ef 90       	pop	r14
    4e8c:	df 90       	pop	r13
    4e8e:	cf 90       	pop	r12
    4e90:	bf 90       	pop	r11
    4e92:	af 90       	pop	r10
    4e94:	9f 90       	pop	r9
    4e96:	08 95       	ret

00004e98 <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    4e98:	af 92       	push	r10
    4e9a:	bf 92       	push	r11
    4e9c:	cf 92       	push	r12
    4e9e:	df 92       	push	r13
    4ea0:	ef 92       	push	r14
    4ea2:	ff 92       	push	r15
    4ea4:	0f 93       	push	r16
    4ea6:	1f 93       	push	r17
    4ea8:	cf 93       	push	r28
    4eaa:	df 93       	push	r29
    4eac:	6c 01       	movw	r12, r24
    4eae:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4eb0:	f6 2e       	mov	r15, r22
    4eb2:	c2 2f       	mov	r28, r18
    4eb4:	d0 e0       	ldi	r29, 0x00	; 0
    4eb6:	c6 0f       	add	r28, r22
    4eb8:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    4eba:	10 e0       	ldi	r17, 0x00	; 0
    4ebc:	04 0f       	add	r16, r20
    4ebe:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4ec0:	8f 2d       	mov	r24, r15
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	8c 17       	cp	r24, r28
    4ec6:	9d 07       	cpc	r25, r29
    4ec8:	84 f4       	brge	.+32     	; 0x4eea <fillrect+0x52>
    4eca:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    4ecc:	8b 2d       	mov	r24, r11
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	80 17       	cp	r24, r16
    4ed2:	91 07       	cpc	r25, r17
    4ed4:	44 f4       	brge	.+16     	; 0x4ee6 <fillrect+0x4e>
		{
			setpixel(buff, i, j, color);
    4ed6:	2e 2d       	mov	r18, r14
    4ed8:	4b 2d       	mov	r20, r11
    4eda:	6f 2d       	mov	r22, r15
    4edc:	c6 01       	movw	r24, r12
    4ede:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    4ee2:	b3 94       	inc	r11
    4ee4:	f3 cf       	rjmp	.-26     	; 0x4ecc <fillrect+0x34>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4ee6:	f3 94       	inc	r15
    4ee8:	eb cf       	rjmp	.-42     	; 0x4ec0 <fillrect+0x28>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    4eea:	df 91       	pop	r29
    4eec:	cf 91       	pop	r28
    4eee:	1f 91       	pop	r17
    4ef0:	0f 91       	pop	r16
    4ef2:	ff 90       	pop	r15
    4ef4:	ef 90       	pop	r14
    4ef6:	df 90       	pop	r13
    4ef8:	cf 90       	pop	r12
    4efa:	bf 90       	pop	r11
    4efc:	af 90       	pop	r10
    4efe:	08 95       	ret

00004f00 <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    4f00:	9f 92       	push	r9
    4f02:	af 92       	push	r10
    4f04:	bf 92       	push	r11
    4f06:	cf 92       	push	r12
    4f08:	df 92       	push	r13
    4f0a:	ef 92       	push	r14
    4f0c:	ff 92       	push	r15
    4f0e:	0f 93       	push	r16
    4f10:	1f 93       	push	r17
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	ec 01       	movw	r28, r24
    4f18:	f6 2e       	mov	r15, r22
    4f1a:	b4 2e       	mov	r11, r20
    4f1c:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4f1e:	16 2f       	mov	r17, r22
    4f20:	c2 2e       	mov	r12, r18
    4f22:	d1 2c       	mov	r13, r1
    4f24:	c6 0e       	add	r12, r22
    4f26:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    4f28:	aa 24       	eor	r10, r10
    4f2a:	aa 94       	dec	r10
    4f2c:	a0 0e       	add	r10, r16
    4f2e:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4f30:	81 2f       	mov	r24, r17
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	8c 15       	cp	r24, r12
    4f36:	9d 05       	cpc	r25, r13
    4f38:	74 f4       	brge	.+28     	; 0x4f56 <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    4f3a:	2e 2d       	mov	r18, r14
    4f3c:	4b 2d       	mov	r20, r11
    4f3e:	61 2f       	mov	r22, r17
    4f40:	ce 01       	movw	r24, r28
    4f42:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
		setpixel(buff, i, y+h-1, color);
    4f46:	2e 2d       	mov	r18, r14
    4f48:	4a 2d       	mov	r20, r10
    4f4a:	61 2f       	mov	r22, r17
    4f4c:	ce 01       	movw	r24, r28
    4f4e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4f52:	1f 5f       	subi	r17, 0xFF	; 255
    4f54:	ed cf       	rjmp	.-38     	; 0x4f30 <drawrect+0x30>
    4f56:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4f58:	10 e0       	ldi	r17, 0x00	; 0
    4f5a:	0b 0d       	add	r16, r11
    4f5c:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    4f5e:	cc 24       	eor	r12, r12
    4f60:	ca 94       	dec	r12
    4f62:	c9 0c       	add	r12, r9
    4f64:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4f66:	8d 2d       	mov	r24, r13
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	80 17       	cp	r24, r16
    4f6c:	91 07       	cpc	r25, r17
    4f6e:	74 f4       	brge	.+28     	; 0x4f8c <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    4f70:	2e 2d       	mov	r18, r14
    4f72:	4d 2d       	mov	r20, r13
    4f74:	6f 2d       	mov	r22, r15
    4f76:	ce 01       	movw	r24, r28
    4f78:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
		setpixel(buff, x+w-1, i, color);
    4f7c:	2e 2d       	mov	r18, r14
    4f7e:	4d 2d       	mov	r20, r13
    4f80:	6c 2d       	mov	r22, r12
    4f82:	ce 01       	movw	r24, r28
    4f84:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4f88:	d3 94       	inc	r13
    4f8a:	ed cf       	rjmp	.-38     	; 0x4f66 <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    4f8c:	df 91       	pop	r29
    4f8e:	cf 91       	pop	r28
    4f90:	1f 91       	pop	r17
    4f92:	0f 91       	pop	r16
    4f94:	ff 90       	pop	r15
    4f96:	ef 90       	pop	r14
    4f98:	df 90       	pop	r13
    4f9a:	cf 90       	pop	r12
    4f9c:	bf 90       	pop	r11
    4f9e:	af 90       	pop	r10
    4fa0:	9f 90       	pop	r9
    4fa2:	08 95       	ret

00004fa4 <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    4fa4:	4f 92       	push	r4
    4fa6:	5f 92       	push	r5
    4fa8:	6f 92       	push	r6
    4faa:	7f 92       	push	r7
    4fac:	8f 92       	push	r8
    4fae:	9f 92       	push	r9
    4fb0:	af 92       	push	r10
    4fb2:	bf 92       	push	r11
    4fb4:	cf 92       	push	r12
    4fb6:	df 92       	push	r13
    4fb8:	ef 92       	push	r14
    4fba:	ff 92       	push	r15
    4fbc:	0f 93       	push	r16
    4fbe:	1f 93       	push	r17
    4fc0:	cf 93       	push	r28
    4fc2:	df 93       	push	r29
    4fc4:	ec 01       	movw	r28, r24
    4fc6:	96 2e       	mov	r9, r22
    4fc8:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    4fca:	bb 24       	eor	r11, r11
    4fcc:	b3 94       	inc	r11
    4fce:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    4fd0:	82 2e       	mov	r8, r18
    4fd2:	81 94       	neg	r8
    4fd4:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    4fd6:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4fd8:	74 2e       	mov	r7, r20
    4fda:	72 1a       	sub	r7, r18
    4fdc:	e4 2e       	mov	r14, r20
    4fde:	f1 2c       	mov	r15, r1
    4fe0:	67 01       	movw	r12, r14
    4fe2:	c2 0e       	add	r12, r18
    4fe4:	d1 1c       	adc	r13, r1
    4fe6:	87 2d       	mov	r24, r7
    4fe8:	99 27       	eor	r25, r25
    4fea:	87 fd       	sbrc	r24, 7
    4fec:	90 95       	com	r25
    4fee:	c8 16       	cp	r12, r24
    4ff0:	d9 06       	cpc	r13, r25
    4ff2:	44 f0       	brlt	.+16     	; 0x5004 <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    4ff4:	20 2f       	mov	r18, r16
    4ff6:	47 2d       	mov	r20, r7
    4ff8:	69 2d       	mov	r22, r9
    4ffa:	ce 01       	movw	r24, r28
    4ffc:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
    5000:	73 94       	inc	r7
    5002:	f1 cf       	rjmp	.-30     	; 0x4fe6 <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    5004:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    5006:	71 16       	cp	r7, r17
    5008:	0c f0       	brlt	.+2      	; 0x500c <fillcircle+0x68>
    500a:	4c c0       	rjmp	.+152    	; 0x50a4 <fillcircle+0x100>
	{
		if (f >= 0) 
    500c:	b7 fc       	sbrc	r11, 7
    500e:	04 c0       	rjmp	.+8      	; 0x5018 <fillcircle+0x74>
		{
			y--;
    5010:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    5012:	83 94       	inc	r8
    5014:	83 94       	inc	r8
			f += ddF_y;
    5016:	b8 0c       	add	r11, r8
    5018:	73 94       	inc	r7
    501a:	87 2d       	mov	r24, r7
    501c:	88 0f       	add	r24, r24
    501e:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    5020:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    5022:	6a 2c       	mov	r6, r10
    5024:	61 1a       	sub	r6, r17
    5026:	67 01       	movw	r12, r14
    5028:	c1 0e       	add	r12, r17
    502a:	d1 1c       	adc	r13, r1
    502c:	17 fd       	sbrc	r17, 7
    502e:	da 94       	dec	r13
    5030:	47 2c       	mov	r4, r7
    5032:	49 0c       	add	r4, r9
    5034:	59 2c       	mov	r5, r9
    5036:	57 18       	sub	r5, r7
    5038:	86 2d       	mov	r24, r6
    503a:	99 27       	eor	r25, r25
    503c:	87 fd       	sbrc	r24, 7
    503e:	90 95       	com	r25
    5040:	c8 16       	cp	r12, r24
    5042:	d9 06       	cpc	r13, r25
    5044:	74 f0       	brlt	.+28     	; 0x5062 <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    5046:	20 2f       	mov	r18, r16
    5048:	46 2d       	mov	r20, r6
    504a:	64 2d       	mov	r22, r4
    504c:	ce 01       	movw	r24, r28
    504e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
			setpixel(buff, x0-x, i, color);
    5052:	20 2f       	mov	r18, r16
    5054:	46 2d       	mov	r20, r6
    5056:	65 2d       	mov	r22, r5
    5058:	ce 01       	movw	r24, r28
    505a:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
    505e:	63 94       	inc	r6
    5060:	eb cf       	rjmp	.-42     	; 0x5038 <fillcircle+0x94>
    5062:	6a 2c       	mov	r6, r10
    5064:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    5066:	67 01       	movw	r12, r14
    5068:	c7 0c       	add	r12, r7
    506a:	d1 1c       	adc	r13, r1
    506c:	77 fc       	sbrc	r7, 7
    506e:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    5070:	41 2e       	mov	r4, r17
    5072:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    5074:	59 2c       	mov	r5, r9
    5076:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    5078:	86 2d       	mov	r24, r6
    507a:	99 27       	eor	r25, r25
    507c:	87 fd       	sbrc	r24, 7
    507e:	90 95       	com	r25
    5080:	c8 16       	cp	r12, r24
    5082:	d9 06       	cpc	r13, r25
    5084:	0c f4       	brge	.+2      	; 0x5088 <fillcircle+0xe4>
    5086:	bf cf       	rjmp	.-130    	; 0x5006 <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    5088:	20 2f       	mov	r18, r16
    508a:	46 2d       	mov	r20, r6
    508c:	64 2d       	mov	r22, r4
    508e:	ce 01       	movw	r24, r28
    5090:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
			setpixel(buff, x0-y, i, color);
    5094:	20 2f       	mov	r18, r16
    5096:	46 2d       	mov	r20, r6
    5098:	65 2d       	mov	r22, r5
    509a:	ce 01       	movw	r24, r28
    509c:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
    50a0:	63 94       	inc	r6
    50a2:	ea cf       	rjmp	.-44     	; 0x5078 <fillcircle+0xd4>
		}    
	}
}
    50a4:	df 91       	pop	r29
    50a6:	cf 91       	pop	r28
    50a8:	1f 91       	pop	r17
    50aa:	0f 91       	pop	r16
    50ac:	ff 90       	pop	r15
    50ae:	ef 90       	pop	r14
    50b0:	df 90       	pop	r13
    50b2:	cf 90       	pop	r12
    50b4:	bf 90       	pop	r11
    50b6:	af 90       	pop	r10
    50b8:	9f 90       	pop	r9
    50ba:	8f 90       	pop	r8
    50bc:	7f 90       	pop	r7
    50be:	6f 90       	pop	r6
    50c0:	5f 90       	pop	r5
    50c2:	4f 90       	pop	r4
    50c4:	08 95       	ret

000050c6 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    50c6:	88 0f       	add	r24, r24
    50c8:	99 1f       	adc	r25, r25
    50ca:	82 58       	subi	r24, 0x82	; 130
    50cc:	9f 4e       	sbci	r25, 0xEF	; 239
    50ce:	fc 01       	movw	r30, r24
    50d0:	85 91       	lpm	r24, Z+
    50d2:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    50d4:	0c 94 46 46 	jmp	0x8c8c	; 0x8c8c <pgm_mugui_lcd_puts>

000050d8 <gLCDprint_Menu_P>:
    50d8:	0c 94 46 46 	jmp	0x8c8c	; 0x8c8c <pgm_mugui_lcd_puts>

000050dc <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    50dc:	80 e0       	ldi	r24, 0x00	; 0
    50de:	91 e0       	ldi	r25, 0x01	; 1
    50e0:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    50e4:	23 e0       	ldi	r18, 0x03	; 3
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	49 e2       	ldi	r20, 0x29	; 41
    50ea:	50 e0       	ldi	r21, 0x00	; 0
    50ec:	69 ee       	ldi	r22, 0xE9	; 233
    50ee:	73 e0       	ldi	r23, 0x03	; 3
    50f0:	89 e7       	ldi	r24, 0x79	; 121
    50f2:	90 e0       	ldi	r25, 0x00	; 0
    50f4:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    50f8:	27 e1       	ldi	r18, 0x17	; 23
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	48 e1       	ldi	r20, 0x18	; 24
    50fe:	50 e0       	ldi	r21, 0x00	; 0
    5100:	69 ee       	ldi	r22, 0xE9	; 233
    5102:	73 e0       	ldi	r23, 0x03	; 3
    5104:	8a e7       	ldi	r24, 0x7A	; 122
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

	// Display most important error
	if (General_error & (1 << LVA_ALARM))							// Low voltage
    510c:	80 91 20 05 	lds	r24, 0x0520
    5110:	83 ff       	sbrs	r24, 3
    5112:	13 c0       	rjmp	.+38     	; 0x513a <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    5114:	2b e2       	ldi	r18, 0x2B	; 43
    5116:	30 e0       	ldi	r19, 0x00	; 0
    5118:	4c e0       	ldi	r20, 0x0C	; 12
    511a:	50 e0       	ldi	r21, 0x00	; 0
    511c:	69 ee       	ldi	r22, 0xE9	; 233
    511e:	73 e0       	ldi	r23, 0x03	; 3
    5120:	86 e8       	ldi	r24, 0x86	; 134
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    5128:	2b e2       	ldi	r18, 0x2B	; 43
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	40 e5       	ldi	r20, 0x50	; 80
    512e:	50 e0       	ldi	r21, 0x00	; 0
    5130:	69 ee       	ldi	r22, 0xE9	; 233
    5132:	73 e0       	ldi	r23, 0x03	; 3
    5134:	86 e7       	ldi	r24, 0x76	; 118
    5136:	90 e0       	ldi	r25, 0x00	; 0
    5138:	41 c0       	rjmp	.+130    	; 0x51bc <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << NO_SIGNAL))						// No signal
    513a:	80 91 20 05 	lds	r24, 0x0520
    513e:	81 ff       	sbrs	r24, 1
    5140:	13 c0       	rjmp	.+38     	; 0x5168 <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    5142:	2b e2       	ldi	r18, 0x2B	; 43
    5144:	30 e0       	ldi	r19, 0x00	; 0
    5146:	4c e1       	ldi	r20, 0x1C	; 28
    5148:	50 e0       	ldi	r21, 0x00	; 0
    514a:	69 ee       	ldi	r22, 0xE9	; 233
    514c:	73 e0       	ldi	r23, 0x03	; 3
    514e:	8b e4       	ldi	r24, 0x4B	; 75
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    5156:	2b e2       	ldi	r18, 0x2B	; 43
    5158:	30 e0       	ldi	r19, 0x00	; 0
    515a:	46 e3       	ldi	r20, 0x36	; 54
    515c:	50 e0       	ldi	r21, 0x00	; 0
    515e:	69 ee       	ldi	r22, 0xE9	; 233
    5160:	73 e0       	ldi	r23, 0x03	; 3
    5162:	8c e4       	ldi	r24, 0x4C	; 76
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	2a c0       	rjmp	.+84     	; 0x51bc <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << THROTTLE_HIGH))					// Throttle high
    5168:	80 91 20 05 	lds	r24, 0x0520
    516c:	80 ff       	sbrs	r24, 0
    516e:	13 c0       	rjmp	.+38     	; 0x5196 <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    5170:	2b e2       	ldi	r18, 0x2B	; 43
    5172:	30 e0       	ldi	r19, 0x00	; 0
    5174:	4a e0       	ldi	r20, 0x0A	; 10
    5176:	50 e0       	ldi	r21, 0x00	; 0
    5178:	69 ee       	ldi	r22, 0xE9	; 233
    517a:	73 e0       	ldi	r23, 0x03	; 3
    517c:	89 e6       	ldi	r24, 0x69	; 105
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    5184:	2b e2       	ldi	r18, 0x2B	; 43
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	41 e5       	ldi	r20, 0x51	; 81
    518a:	50 e0       	ldi	r21, 0x00	; 0
    518c:	69 ee       	ldi	r22, 0xE9	; 233
    518e:	73 e0       	ldi	r23, 0x03	; 3
    5190:	87 e3       	ldi	r24, 0x37	; 55
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	13 c0       	rjmp	.+38     	; 0x51bc <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << DISARMED))						// Disarmed
    5196:	80 91 20 05 	lds	r24, 0x0520
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    519a:	2b e2       	ldi	r18, 0x2B	; 43
    519c:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if (General_error & (1 << DISARMED))						// Disarmed
    519e:	82 ff       	sbrs	r24, 2
    51a0:	07 c0       	rjmp	.+14     	; 0x51b0 <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    51a2:	44 e1       	ldi	r20, 0x14	; 20
    51a4:	50 e0       	ldi	r21, 0x00	; 0
    51a6:	69 ee       	ldi	r22, 0xE9	; 233
    51a8:	73 e0       	ldi	r23, 0x03	; 3
    51aa:	8b e8       	ldi	r24, 0x8B	; 139
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	06 c0       	rjmp	.+12     	; 0x51bc <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    51b0:	4c e1       	ldi	r20, 0x1C	; 28
    51b2:	50 e0       	ldi	r21, 0x00	; 0
    51b4:	69 ee       	ldi	r22, 0xE9	; 233
    51b6:	73 e0       	ldi	r23, 0x03	; 3
    51b8:	8a e8       	ldi	r24, 0x8A	; 138
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
	}

	write_buffer(buffer);
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	91 e0       	ldi	r25, 0x01	; 1
    51c4:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <write_buffer>

000051c8 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    51c8:	cf 93       	push	r28
    51ca:	df 93       	push	r29
    51cc:	cd b7       	in	r28, 0x3d	; 61
    51ce:	de b7       	in	r29, 0x3e	; 62
    51d0:	2c 97       	sbiw	r28, 0x0c	; 12
    51d2:	0f b6       	in	r0, 0x3f	; 63
    51d4:	f8 94       	cli
    51d6:	de bf       	out	0x3e, r29	; 62
    51d8:	0f be       	out	0x3f, r0	; 63
    51da:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    51dc:	26 e0       	ldi	r18, 0x06	; 6
    51de:	ae 01       	movw	r20, r28
    51e0:	4f 5f       	subi	r20, 0xFF	; 255
    51e2:	5f 4f       	sbci	r21, 0xFF	; 255
    51e4:	63 e4       	ldi	r22, 0x43	; 67
    51e6:	80 ed       	ldi	r24, 0xD0	; 208
    51e8:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    51ec:	89 81       	ldd	r24, Y+1	; 0x01
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	98 2f       	mov	r25, r24
    51f2:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    51f4:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    51f6:	82 0f       	add	r24, r18
    51f8:	91 1d       	adc	r25, r1
    51fa:	34 e0       	ldi	r19, 0x04	; 4
    51fc:	95 95       	asr	r25
    51fe:	87 95       	ror	r24
    5200:	3a 95       	dec	r19
    5202:	e1 f7       	brne	.-8      	; 0x51fc <get_raw_gyros+0x34>
    5204:	9a 87       	std	Y+10, r25	; 0x0a
    5206:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    5208:	8b 81       	ldd	r24, Y+3	; 0x03
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	98 2f       	mov	r25, r24
    520e:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    5210:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    5212:	82 0f       	add	r24, r18
    5214:	91 1d       	adc	r25, r1
    5216:	54 e0       	ldi	r21, 0x04	; 4
    5218:	95 95       	asr	r25
    521a:	87 95       	ror	r24
    521c:	5a 95       	dec	r21
    521e:	e1 f7       	brne	.-8      	; 0x5218 <get_raw_gyros+0x50>
    5220:	98 87       	std	Y+8, r25	; 0x08
    5222:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    5224:	8d 81       	ldd	r24, Y+5	; 0x05
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	98 2f       	mov	r25, r24
    522a:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    522c:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    522e:	82 0f       	add	r24, r18
    5230:	91 1d       	adc	r25, r1
    5232:	74 e0       	ldi	r23, 0x04	; 4
    5234:	95 95       	asr	r25
    5236:	87 95       	ror	r24
    5238:	7a 95       	dec	r23
    523a:	e1 f7       	brne	.-8      	; 0x5234 <get_raw_gyros+0x6c>
    523c:	9c 87       	std	Y+12, r25	; 0x0c
    523e:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    5240:	20 91 55 06 	lds	r18, 0x0655
    5244:	af e8       	ldi	r26, 0x8F	; 143
    5246:	b5 e0       	ldi	r27, 0x05	; 5
    5248:	43 e0       	ldi	r20, 0x03	; 3
    524a:	24 02       	muls	r18, r20
    524c:	90 01       	movw	r18, r0
    524e:	11 24       	eor	r1, r1
    5250:	80 e0       	ldi	r24, 0x00	; 0
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	2f 5b       	subi	r18, 0xBF	; 191
    5256:	34 4e       	sbci	r19, 0xE4	; 228
    5258:	f9 01       	movw	r30, r18
    525a:	e8 0f       	add	r30, r24
    525c:	f9 1f       	adc	r31, r25
    525e:	e4 91       	lpm	r30, Z
    5260:	ee 0f       	add	r30, r30
    5262:	ff 0b       	sbc	r31, r31
    5264:	41 e0       	ldi	r20, 0x01	; 1
    5266:	50 e0       	ldi	r21, 0x00	; 0
    5268:	4c 0f       	add	r20, r28
    526a:	5d 1f       	adc	r21, r29
    526c:	e4 0f       	add	r30, r20
    526e:	f5 1f       	adc	r31, r21
    5270:	46 81       	ldd	r20, Z+6	; 0x06
    5272:	57 81       	ldd	r21, Z+7	; 0x07
    5274:	4d 93       	st	X+, r20
    5276:	5d 93       	st	X+, r21
    5278:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    527a:	83 30       	cpi	r24, 0x03	; 3
    527c:	91 05       	cpc	r25, r1
    527e:	61 f7       	brne	.-40     	; 0x5258 <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    5280:	2c 96       	adiw	r28, 0x0c	; 12
    5282:	0f b6       	in	r0, 0x3f	; 63
    5284:	f8 94       	cli
    5286:	de bf       	out	0x3e, r29	; 62
    5288:	0f be       	out	0x3f, r0	; 63
    528a:	cd bf       	out	0x3d, r28	; 61
    528c:	df 91       	pop	r29
    528e:	cf 91       	pop	r28
    5290:	08 95       	ret

00005292 <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    5292:	1f 93       	push	r17
    5294:	cf 93       	push	r28
    5296:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    5298:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    529c:	20 91 55 06 	lds	r18, 0x0655
    52a0:	c3 ec       	ldi	r28, 0xC3	; 195
    52a2:	d7 e0       	ldi	r29, 0x07	; 7
    52a4:	af e8       	ldi	r26, 0x8F	; 143
    52a6:	b5 e0       	ldi	r27, 0x05	; 5
    52a8:	83 e0       	ldi	r24, 0x03	; 3
    52aa:	28 02       	muls	r18, r24
    52ac:	90 01       	movw	r18, r0
    52ae:	11 24       	eor	r1, r1
    52b0:	80 e0       	ldi	r24, 0x00	; 0
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	21 5d       	subi	r18, 0xD1	; 209
    52b6:	34 4e       	sbci	r19, 0xE4	; 228
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    52b8:	69 91       	ld	r22, Y+
    52ba:	79 91       	ld	r23, Y+
    52bc:	f9 01       	movw	r30, r18
    52be:	e8 0f       	add	r30, r24
    52c0:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    52c2:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    52c4:	4d 91       	ld	r20, X+
    52c6:	5c 91       	ld	r21, X
    52c8:	11 97       	sbiw	r26, 0x01	; 1
    52ca:	46 1b       	sub	r20, r22
    52cc:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    52ce:	14 03       	mulsu	r17, r20
    52d0:	b0 01       	movw	r22, r0
    52d2:	15 9f       	mul	r17, r21
    52d4:	70 0d       	add	r23, r0
    52d6:	11 24       	eor	r1, r1
    52d8:	6d 93       	st	X+, r22
    52da:	7d 93       	st	X+, r23
    52dc:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    52de:	83 30       	cpi	r24, 0x03	; 3
    52e0:	91 05       	cpc	r25, r1
    52e2:	51 f7       	brne	.-44     	; 0x52b8 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    52e4:	df 91       	pop	r29
    52e6:	cf 91       	pop	r28
    52e8:	1f 91       	pop	r17
    52ea:	08 95       	ret

000052ec <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    52ec:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    52ee:	86 e0       	ldi	r24, 0x06	; 6
    52f0:	e3 ec       	ldi	r30, 0xC3	; 195
    52f2:	f7 e0       	ldi	r31, 0x07	; 7
    52f4:	df 01       	movw	r26, r30
    52f6:	1d 92       	st	X+, r1
    52f8:	8a 95       	dec	r24
    52fa:	e9 f7       	brne	.-6      	; 0x52f6 <CalibrateGyrosFast+0xa>
    52fc:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    52fe:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    5302:	40 91 c3 07 	lds	r20, 0x07C3
    5306:	50 91 c4 07 	lds	r21, 0x07C4
    530a:	80 91 8f 05 	lds	r24, 0x058F
    530e:	90 91 90 05 	lds	r25, 0x0590
    5312:	48 0f       	add	r20, r24
    5314:	59 1f       	adc	r21, r25
    5316:	50 93 c4 07 	sts	0x07C4, r21
    531a:	40 93 c3 07 	sts	0x07C3, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    531e:	20 91 c5 07 	lds	r18, 0x07C5
    5322:	30 91 c6 07 	lds	r19, 0x07C6
    5326:	80 91 91 05 	lds	r24, 0x0591
    532a:	90 91 92 05 	lds	r25, 0x0592
    532e:	28 0f       	add	r18, r24
    5330:	39 1f       	adc	r19, r25
    5332:	30 93 c6 07 	sts	0x07C6, r19
    5336:	20 93 c5 07 	sts	0x07C5, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    533a:	80 91 c7 07 	lds	r24, 0x07C7
    533e:	90 91 c8 07 	lds	r25, 0x07C8
    5342:	60 91 93 05 	lds	r22, 0x0593
    5346:	70 91 94 05 	lds	r23, 0x0594
    534a:	86 0f       	add	r24, r22
    534c:	97 1f       	adc	r25, r23
    534e:	90 93 c8 07 	sts	0x07C8, r25
    5352:	80 93 c7 07 	sts	0x07C7, r24
    5356:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    5358:	91 f6       	brne	.-92     	; 0x52fe <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    535a:	e5 e0       	ldi	r30, 0x05	; 5
    535c:	55 95       	asr	r21
    535e:	47 95       	ror	r20
    5360:	ea 95       	dec	r30
    5362:	e1 f7       	brne	.-8      	; 0x535c <CalibrateGyrosFast+0x70>
    5364:	50 93 c4 07 	sts	0x07C4, r21
    5368:	40 93 c3 07 	sts	0x07C3, r20
    536c:	f5 e0       	ldi	r31, 0x05	; 5
    536e:	35 95       	asr	r19
    5370:	27 95       	ror	r18
    5372:	fa 95       	dec	r31
    5374:	e1 f7       	brne	.-8      	; 0x536e <CalibrateGyrosFast+0x82>
    5376:	30 93 c6 07 	sts	0x07C6, r19
    537a:	20 93 c5 07 	sts	0x07C5, r18
    537e:	a5 e0       	ldi	r26, 0x05	; 5
    5380:	95 95       	asr	r25
    5382:	87 95       	ror	r24
    5384:	aa 95       	dec	r26
    5386:	e1 f7       	brne	.-8      	; 0x5380 <CalibrateGyrosFast+0x94>
    5388:	90 93 c8 07 	sts	0x07C8, r25
    538c:	80 93 c7 07 	sts	0x07C7, r24
	}

	Save_Config_to_EEPROM();
}
    5390:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    5392:	0c 94 be 19 	jmp	0x337c	; 0x337c <Save_Config_to_EEPROM>

00005396 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    5396:	2f 92       	push	r2
    5398:	3f 92       	push	r3
    539a:	4f 92       	push	r4
    539c:	5f 92       	push	r5
    539e:	6f 92       	push	r6
    53a0:	7f 92       	push	r7
    53a2:	8f 92       	push	r8
    53a4:	9f 92       	push	r9
    53a6:	af 92       	push	r10
    53a8:	bf 92       	push	r11
    53aa:	cf 92       	push	r12
    53ac:	df 92       	push	r13
    53ae:	ef 92       	push	r14
    53b0:	ff 92       	push	r15
    53b2:	0f 93       	push	r16
    53b4:	1f 93       	push	r17
    53b6:	cf 93       	push	r28
    53b8:	df 93       	push	r29
    53ba:	cd b7       	in	r28, 0x3d	; 61
    53bc:	de b7       	in	r29, 0x3e	; 62
    53be:	65 97       	sbiw	r28, 0x15	; 21
    53c0:	0f b6       	in	r0, 0x3f	; 63
    53c2:	f8 94       	cli
    53c4:	de bf       	out	0x3e, r29	; 62
    53c6:	0f be       	out	0x3f, r0	; 63
    53c8:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    53ca:	1e 86       	std	Y+14, r1	; 0x0e
    53cc:	1d 86       	std	Y+13, r1	; 0x0d
    53ce:	18 8a       	std	Y+16, r1	; 0x10
    53d0:	1f 86       	std	Y+15, r1	; 0x0f
    53d2:	1a 8a       	std	Y+18, r1	; 0x12
    53d4:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    53d6:	0e 94 76 29 	call	0x52ec	; 0x52ec <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    53da:	60 91 c3 07 	lds	r22, 0x07C3
    53de:	70 91 c4 07 	lds	r23, 0x07C4
    53e2:	88 27       	eor	r24, r24
    53e4:	77 fd       	sbrc	r23, 7
    53e6:	80 95       	com	r24
    53e8:	98 2f       	mov	r25, r24
    53ea:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    53ee:	69 83       	std	Y+1, r22	; 0x01
    53f0:	7a 83       	std	Y+2, r23	; 0x02
    53f2:	8b 83       	std	Y+3, r24	; 0x03
    53f4:	9c 83       	std	Y+4, r25	; 0x04
    53f6:	60 91 c5 07 	lds	r22, 0x07C5
    53fa:	70 91 c6 07 	lds	r23, 0x07C6
    53fe:	88 27       	eor	r24, r24
    5400:	77 fd       	sbrc	r23, 7
    5402:	80 95       	com	r24
    5404:	98 2f       	mov	r25, r24
    5406:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    540a:	6d 83       	std	Y+5, r22	; 0x05
    540c:	7e 83       	std	Y+6, r23	; 0x06
    540e:	8f 83       	std	Y+7, r24	; 0x07
    5410:	98 87       	std	Y+8, r25	; 0x08
    5412:	60 91 c7 07 	lds	r22, 0x07C7
    5416:	70 91 c8 07 	lds	r23, 0x07C8
    541a:	88 27       	eor	r24, r24
    541c:	77 fd       	sbrc	r23, 7
    541e:	80 95       	com	r24
    5420:	98 2f       	mov	r25, r24
    5422:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    5426:	69 87       	std	Y+9, r22	; 0x09
    5428:	7a 87       	std	Y+10, r23	; 0x0a
    542a:	8b 87       	std	Y+11, r24	; 0x0b
    542c:	9c 87       	std	Y+12, r25	; 0x0c
    542e:	1d 8a       	std	Y+21, r1	; 0x15
    5430:	1b 8a       	std	Y+19, r1	; 0x13
    5432:	e1 2c       	mov	r14, r1
    5434:	f1 2c       	mov	r15, r1
    5436:	00 e0       	ldi	r16, 0x00	; 0
    5438:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    543a:	80 91 b2 00 	lds	r24, 0x00B2
    543e:	9d 89       	ldd	r25, Y+21	; 0x15
    5440:	89 1b       	sub	r24, r25
    5442:	e8 0e       	add	r14, r24
    5444:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    5446:	e0 91 b2 00 	lds	r30, 0x00B2
    544a:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    544c:	fc e4       	ldi	r31, 0x4C	; 76
    544e:	ef 16       	cp	r14, r31
    5450:	ff 06       	cpc	r15, r31
    5452:	28 f0       	brcs	.+10     	; 0x545e <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    5454:	8b 89       	ldd	r24, Y+19	; 0x13
    5456:	8f 5f       	subi	r24, 0xFF	; 255
    5458:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    545a:	e1 2c       	mov	r14, r1
    545c:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    545e:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <get_raw_gyros>
    5462:	fe 01       	movw	r30, r28
    5464:	31 96       	adiw	r30, 0x01	; 1
    5466:	6f 01       	movw	r12, r30
    5468:	bf e8       	ldi	r27, 0x8F	; 143
    546a:	2b 2e       	mov	r2, r27
    546c:	b5 e0       	ldi	r27, 0x05	; 5
    546e:	3b 2e       	mov	r3, r27
    5470:	ce 01       	movw	r24, r28
    5472:	0d 96       	adiw	r24, 0x0d	; 13
    5474:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    5476:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    5478:	f1 01       	movw	r30, r2
    547a:	81 90       	ld	r8, Z+
    547c:	91 90       	ld	r9, Z+
    547e:	1f 01       	movw	r2, r30
    5480:	20 e0       	ldi	r18, 0x00	; 0
    5482:	30 ec       	ldi	r19, 0xC0	; 192
    5484:	49 e7       	ldi	r20, 0x79	; 121
    5486:	54 e4       	ldi	r21, 0x44	; 68
    5488:	f6 01       	movw	r30, r12
    548a:	60 81       	ld	r22, Z
    548c:	71 81       	ldd	r23, Z+1	; 0x01
    548e:	82 81       	ldd	r24, Z+2	; 0x02
    5490:	93 81       	ldd	r25, Z+3	; 0x03
    5492:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    5496:	2b 01       	movw	r4, r22
    5498:	3c 01       	movw	r6, r24
    549a:	b4 01       	movw	r22, r8
    549c:	88 27       	eor	r24, r24
    549e:	77 fd       	sbrc	r23, 7
    54a0:	80 95       	com	r24
    54a2:	98 2f       	mov	r25, r24
    54a4:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    54a8:	9b 01       	movw	r18, r22
    54aa:	ac 01       	movw	r20, r24
    54ac:	c3 01       	movw	r24, r6
    54ae:	b2 01       	movw	r22, r4
    54b0:	0e 94 71 4e 	call	0x9ce2	; 0x9ce2 <__addsf3>
    54b4:	20 e0       	ldi	r18, 0x00	; 0
    54b6:	30 e0       	ldi	r19, 0x00	; 0
    54b8:	4a e7       	ldi	r20, 0x7A	; 122
    54ba:	54 e4       	ldi	r21, 0x44	; 68
    54bc:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <__divsf3>
    54c0:	f6 01       	movw	r30, r12
    54c2:	60 83       	st	Z, r22
    54c4:	71 83       	std	Z+1, r23	; 0x01
    54c6:	82 83       	std	Z+2, r24	; 0x02
    54c8:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    54ca:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
    54ce:	f5 01       	movw	r30, r10
    54d0:	20 81       	ld	r18, Z
    54d2:	31 81       	ldd	r19, Z+1	; 0x01
    54d4:	26 17       	cp	r18, r22
    54d6:	37 07       	cpc	r19, r23
    54d8:	11 f0       	breq	.+4      	; 0x54de <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    54da:	00 e0       	ldi	r16, 0x00	; 0
    54dc:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    54de:	f5 01       	movw	r30, r10
    54e0:	61 93       	st	Z+, r22
    54e2:	71 93       	st	Z+, r23
    54e4:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    54e6:	fc 89       	ldd	r31, Y+20	; 0x14
    54e8:	ff 5f       	subi	r31, 0xFF	; 255
    54ea:	fc 8b       	std	Y+20, r31	; 0x14
    54ec:	84 e0       	ldi	r24, 0x04	; 4
    54ee:	c8 0e       	add	r12, r24
    54f0:	d1 1c       	adc	r13, r1
    54f2:	f3 30       	cpi	r31, 0x03	; 3
    54f4:	09 f6       	brne	.-126    	; 0x5478 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    54f6:	0f 5f       	subi	r16, 0xFF	; 255
    54f8:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    54fa:	09 3c       	cpi	r16, 0xC9	; 201
    54fc:	11 05       	cpc	r17, r1
    54fe:	20 f0       	brcs	.+8      	; 0x5508 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    5500:	0e 94 76 29 	call	0x52ec	; 0x52ec <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    5504:	81 e0       	ldi	r24, 0x01	; 1
    5506:	01 c0       	rjmp	.+2      	; 0x550a <CalibrateGyrosSlow+0x174>
    5508:	80 e0       	ldi	r24, 0x00	; 0
    550a:	e7 e8       	ldi	r30, 0x87	; 135
    550c:	f3 e1       	ldi	r31, 0x13	; 19
    550e:	31 97       	sbiw	r30, 0x01	; 1
    5510:	f1 f7       	brne	.-4      	; 0x550e <CalibrateGyrosSlow+0x178>
    5512:	00 c0       	rjmp	.+0      	; 0x5514 <CalibrateGyrosSlow+0x17e>
    5514:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    5516:	81 11       	cpse	r24, r1
    5518:	04 c0       	rjmp	.+8      	; 0x5522 <CalibrateGyrosSlow+0x18c>
    551a:	fb 89       	ldd	r31, Y+19	; 0x13
    551c:	f6 30       	cpi	r31, 0x06	; 6
    551e:	08 f4       	brcc	.+2      	; 0x5522 <CalibrateGyrosSlow+0x18c>
    5520:	8c cf       	rjmp	.-232    	; 0x543a <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    5522:	65 96       	adiw	r28, 0x15	; 21
    5524:	0f b6       	in	r0, 0x3f	; 63
    5526:	f8 94       	cli
    5528:	de bf       	out	0x3e, r29	; 62
    552a:	0f be       	out	0x3f, r0	; 63
    552c:	cd bf       	out	0x3d, r28	; 61
    552e:	df 91       	pop	r29
    5530:	cf 91       	pop	r28
    5532:	1f 91       	pop	r17
    5534:	0f 91       	pop	r16
    5536:	ff 90       	pop	r15
    5538:	ef 90       	pop	r14
    553a:	df 90       	pop	r13
    553c:	cf 90       	pop	r12
    553e:	bf 90       	pop	r11
    5540:	af 90       	pop	r10
    5542:	9f 90       	pop	r9
    5544:	8f 90       	pop	r8
    5546:	7f 90       	pop	r7
    5548:	6f 90       	pop	r6
    554a:	5f 90       	pop	r5
    554c:	4f 90       	pop	r4
    554e:	3f 90       	pop	r3
    5550:	2f 90       	pop	r2
    5552:	08 95       	ret

00005554 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    5554:	41 e0       	ldi	r20, 0x01	; 1
    5556:	6b e6       	ldi	r22, 0x6B	; 107
    5558:	80 ed       	ldi	r24, 0xD0	; 208
    555a:	0e 94 c1 2a 	call	0x5582	; 0x5582 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    555e:	40 e4       	ldi	r20, 0x40	; 64
    5560:	67 e3       	ldi	r22, 0x37	; 55
    5562:	80 ed       	ldi	r24, 0xD0	; 208
    5564:	0e 94 c1 2a 	call	0x5582	; 0x5582 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    5568:	46 e0       	ldi	r20, 0x06	; 6
    556a:	80 91 5a 06 	lds	r24, 0x065A
    556e:	48 1b       	sub	r20, r24
    5570:	6a e1       	ldi	r22, 0x1A	; 26
    5572:	80 ed       	ldi	r24, 0xD0	; 208
    5574:	0e 94 c1 2a 	call	0x5582	; 0x5582 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    5578:	48 e1       	ldi	r20, 0x18	; 24
    557a:	6b e1       	ldi	r22, 0x1B	; 27
    557c:	80 ed       	ldi	r24, 0xD0	; 208
    557e:	0c 94 c1 2a 	jmp	0x5582	; 0x5582 <writeI2Cbyte>

00005582 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    5582:	cf 93       	push	r28
    5584:	df 93       	push	r29
    5586:	00 d0       	rcall	.+0      	; 0x5588 <writeI2Cbyte+0x6>
    5588:	cd b7       	in	r28, 0x3d	; 61
    558a:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    558c:	4a 83       	std	Y+2, r20	; 0x02
    558e:	69 83       	std	Y+1, r22	; 0x01
    5590:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    5594:	69 81       	ldd	r22, Y+1	; 0x01
    5596:	86 2f       	mov	r24, r22
    5598:	0e 94 94 4d 	call	0x9b28	; 0x9b28 <i2c_write>
    i2c_write(value); 								// Write byte
    559c:	4a 81       	ldd	r20, Y+2	; 0x02
    559e:	84 2f       	mov	r24, r20
    55a0:	0e 94 94 4d 	call	0x9b28	; 0x9b28 <i2c_write>
    i2c_stop();
}
    55a4:	0f 90       	pop	r0
    55a6:	0f 90       	pop	r0
    55a8:	df 91       	pop	r29
    55aa:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    55ac:	0c 94 85 4d 	jmp	0x9b0a	; 0x9b0a <i2c_stop>

000055b0 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    55b0:	cf 92       	push	r12
    55b2:	df 92       	push	r13
    55b4:	ef 92       	push	r14
    55b6:	ff 92       	push	r15
    55b8:	0f 93       	push	r16
    55ba:	1f 93       	push	r17
    55bc:	cf 93       	push	r28
    55be:	df 93       	push	r29
    55c0:	00 d0       	rcall	.+0      	; 0x55c2 <readI2CbyteArray+0x12>
    55c2:	1f 92       	push	r1
    55c4:	cd b7       	in	r28, 0x3d	; 61
    55c6:	de b7       	in	r29, 0x3e	; 62
    55c8:	18 2f       	mov	r17, r24
    55ca:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    55cc:	4a 83       	std	Y+2, r20	; 0x02
    55ce:	5b 83       	std	Y+3, r21	; 0x03
    55d0:	69 83       	std	Y+1, r22	; 0x01
    55d2:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    55d6:	69 81       	ldd	r22, Y+1	; 0x01
    55d8:	86 2f       	mov	r24, r22
    55da:	0e 94 94 4d 	call	0x9b28	; 0x9b28 <i2c_write>
    i2c_rep_start(address+I2C_READ);
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	81 0f       	add	r24, r17
    55e2:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <i2c_rep_start>
    55e6:	4a 81       	ldd	r20, Y+2	; 0x02
    55e8:	c4 2e       	mov	r12, r20
    55ea:	5b 81       	ldd	r21, Y+3	; 0x03
    55ec:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    55ee:	00 e0       	ldi	r16, 0x00	; 0
    55f0:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    55f2:	f1 2c       	mov	r15, r1
    55f4:	0e 15       	cp	r16, r14
    55f6:	1f 05       	cpc	r17, r15
    55f8:	84 f4       	brge	.+32     	; 0x561a <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    55fa:	0f 5f       	subi	r16, 0xFF	; 255
    55fc:	1f 4f       	sbci	r17, 0xFF	; 255
    55fe:	0e 15       	cp	r16, r14
    5600:	1f 05       	cpc	r17, r15
    5602:	19 f0       	breq	.+6      	; 0x560a <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    5604:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <i2c_readAck>
    5608:	02 c0       	rjmp	.+4      	; 0x560e <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    560a:	0e 94 cd 4d 	call	0x9b9a	; 0x9b9a <i2c_readNak>
    560e:	f6 01       	movw	r30, r12
    5610:	80 83       	st	Z, r24
    5612:	ff ef       	ldi	r31, 0xFF	; 255
    5614:	cf 1a       	sub	r12, r31
    5616:	df 0a       	sbc	r13, r31
    5618:	ed cf       	rjmp	.-38     	; 0x55f4 <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    561a:	0f 90       	pop	r0
    561c:	0f 90       	pop	r0
    561e:	0f 90       	pop	r0
    5620:	df 91       	pop	r29
    5622:	cf 91       	pop	r28
    5624:	1f 91       	pop	r17
    5626:	0f 91       	pop	r16
    5628:	ff 90       	pop	r15
    562a:	ef 90       	pop	r14
    562c:	df 90       	pop	r13
    562e:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    5630:	0c 94 85 4d 	jmp	0x9b0a	; 0x9b0a <i2c_stop>

00005634 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    5634:	4f 92       	push	r4
    5636:	5f 92       	push	r5
    5638:	6f 92       	push	r6
    563a:	7f 92       	push	r7
    563c:	8f 92       	push	r8
    563e:	9f 92       	push	r9
    5640:	af 92       	push	r10
    5642:	bf 92       	push	r11
    5644:	cf 92       	push	r12
    5646:	df 92       	push	r13
    5648:	ef 92       	push	r14
    564a:	ff 92       	push	r15
    564c:	cf 93       	push	r28
    564e:	df 93       	push	r29
    5650:	cd b7       	in	r28, 0x3d	; 61
    5652:	de b7       	in	r29, 0x3e	; 62
    5654:	28 97       	sbiw	r28, 0x08	; 8
    5656:	0f b6       	in	r0, 0x3f	; 63
    5658:	f8 94       	cli
    565a:	de bf       	out	0x3e, r29	; 62
    565c:	0f be       	out	0x3f, r0	; 63
    565e:	cd bf       	out	0x3d, r28	; 61
    5660:	6b 01       	movw	r12, r22
    5662:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    5664:	80 90 c5 05 	lds	r8, 0x05C5
    5668:	90 90 c6 05 	lds	r9, 0x05C6
    566c:	a0 90 c7 05 	lds	r10, 0x05C7
    5670:	b0 90 c8 05 	lds	r11, 0x05C8
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    5674:	9b 01       	movw	r18, r22
    5676:	ac 01       	movw	r20, r24
    5678:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    567c:	20 e0       	ldi	r18, 0x00	; 0
    567e:	30 e0       	ldi	r19, 0x00	; 0
    5680:	40 e0       	ldi	r20, 0x00	; 0
    5682:	5f e3       	ldi	r21, 0x3F	; 63
    5684:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    5688:	9b 01       	movw	r18, r22
    568a:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    568c:	60 e0       	ldi	r22, 0x00	; 0
    568e:	70 e0       	ldi	r23, 0x00	; 0
    5690:	80 e8       	ldi	r24, 0x80	; 128
    5692:	9f e3       	ldi	r25, 0x3F	; 63
    5694:	0e 94 70 4e 	call	0x9ce0	; 0x9ce0 <__subsf3>
    5698:	69 83       	std	Y+1, r22	; 0x01
    569a:	7a 83       	std	Y+2, r23	; 0x02
    569c:	8b 83       	std	Y+3, r24	; 0x03
    569e:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    56a0:	40 90 c9 05 	lds	r4, 0x05C9
    56a4:	50 90 ca 05 	lds	r5, 0x05CA
    56a8:	60 90 cb 05 	lds	r6, 0x05CB
    56ac:	70 90 cc 05 	lds	r7, 0x05CC
    56b0:	9b 01       	movw	r18, r22
    56b2:	ac 01       	movw	r20, r24
    56b4:	c5 01       	movw	r24, r10
    56b6:	b4 01       	movw	r22, r8
    56b8:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    56bc:	6d 83       	std	Y+5, r22	; 0x05
    56be:	7e 83       	std	Y+6, r23	; 0x06
    56c0:	8f 83       	std	Y+7, r24	; 0x07
    56c2:	98 87       	std	Y+8, r25	; 0x08
    56c4:	a7 01       	movw	r20, r14
    56c6:	96 01       	movw	r18, r12
    56c8:	c3 01       	movw	r24, r6
    56ca:	b2 01       	movw	r22, r4
    56cc:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    56d0:	9b 01       	movw	r18, r22
    56d2:	ac 01       	movw	r20, r24
    56d4:	6d 81       	ldd	r22, Y+5	; 0x05
    56d6:	7e 81       	ldd	r23, Y+6	; 0x06
    56d8:	8f 81       	ldd	r24, Y+7	; 0x07
    56da:	98 85       	ldd	r25, Y+8	; 0x08
    56dc:	0e 94 70 4e 	call	0x9ce0	; 0x9ce0 <__subsf3>
    56e0:	60 93 b1 05 	sts	0x05B1, r22
    56e4:	70 93 b2 05 	sts	0x05B2, r23
    56e8:	80 93 b3 05 	sts	0x05B3, r24
    56ec:	90 93 b4 05 	sts	0x05B4, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    56f0:	a7 01       	movw	r20, r14
    56f2:	96 01       	movw	r18, r12
    56f4:	c5 01       	movw	r24, r10
    56f6:	b4 01       	movw	r22, r8
    56f8:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    56fc:	6b 01       	movw	r12, r22
    56fe:	7c 01       	movw	r14, r24
    5700:	29 81       	ldd	r18, Y+1	; 0x01
    5702:	3a 81       	ldd	r19, Y+2	; 0x02
    5704:	4b 81       	ldd	r20, Y+3	; 0x03
    5706:	5c 81       	ldd	r21, Y+4	; 0x04
    5708:	c3 01       	movw	r24, r6
    570a:	b2 01       	movw	r22, r4
    570c:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    5710:	9b 01       	movw	r18, r22
    5712:	ac 01       	movw	r20, r24
    5714:	c7 01       	movw	r24, r14
    5716:	b6 01       	movw	r22, r12
    5718:	0e 94 71 4e 	call	0x9ce2	; 0x9ce2 <__addsf3>
    571c:	60 93 95 05 	sts	0x0595, r22
    5720:	70 93 96 05 	sts	0x0596, r23
    5724:	80 93 97 05 	sts	0x0597, r24
    5728:	90 93 98 05 	sts	0x0598, r25
}
    572c:	28 96       	adiw	r28, 0x08	; 8
    572e:	0f b6       	in	r0, 0x3f	; 63
    5730:	f8 94       	cli
    5732:	de bf       	out	0x3e, r29	; 62
    5734:	0f be       	out	0x3f, r0	; 63
    5736:	cd bf       	out	0x3d, r28	; 61
    5738:	df 91       	pop	r29
    573a:	cf 91       	pop	r28
    573c:	ff 90       	pop	r15
    573e:	ef 90       	pop	r14
    5740:	df 90       	pop	r13
    5742:	cf 90       	pop	r12
    5744:	bf 90       	pop	r11
    5746:	af 90       	pop	r10
    5748:	9f 90       	pop	r9
    574a:	8f 90       	pop	r8
    574c:	7f 90       	pop	r7
    574e:	6f 90       	pop	r6
    5750:	5f 90       	pop	r5
    5752:	4f 90       	pop	r4
    5754:	08 95       	ret

00005756 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    5756:	cf 92       	push	r12
    5758:	df 92       	push	r13
    575a:	ef 92       	push	r14
    575c:	ff 92       	push	r15
    575e:	69 01       	movw	r12, r18
    5760:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    5762:	25 ef       	ldi	r18, 0xF5	; 245
    5764:	31 ea       	ldi	r19, 0xA1	; 161
    5766:	4b e8       	ldi	r20, 0x8B	; 139
    5768:	5c e3       	ldi	r21, 0x3C	; 60
    576a:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    576e:	a7 01       	movw	r20, r14
    5770:	96 01       	movw	r18, r12
    5772:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    5776:	6b 01       	movw	r12, r22
    5778:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    577a:	26 ea       	ldi	r18, 0xA6	; 166
    577c:	3a e0       	ldi	r19, 0x0A	; 10
    577e:	46 e8       	ldi	r20, 0x86	; 134
    5780:	5e e3       	ldi	r21, 0x3E	; 62
    5782:	0e 94 24 50 	call	0xa048	; 0xa048 <__gesf2>
    5786:	18 16       	cp	r1, r24
    5788:	9c f0       	brlt	.+38     	; 0x57b0 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    578a:	26 ea       	ldi	r18, 0xA6	; 166
    578c:	3a e0       	ldi	r19, 0x0A	; 10
    578e:	46 e8       	ldi	r20, 0x86	; 134
    5790:	5e eb       	ldi	r21, 0xBE	; 190
    5792:	c7 01       	movw	r24, r14
    5794:	b6 01       	movw	r22, r12
    5796:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <__cmpsf2>
    579a:	87 ff       	sbrs	r24, 7
    579c:	11 c0       	rjmp	.+34     	; 0x57c0 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    579e:	86 ea       	ldi	r24, 0xA6	; 166
    57a0:	c8 2e       	mov	r12, r24
    57a2:	8a e0       	ldi	r24, 0x0A	; 10
    57a4:	d8 2e       	mov	r13, r24
    57a6:	86 e8       	ldi	r24, 0x86	; 134
    57a8:	e8 2e       	mov	r14, r24
    57aa:	8e eb       	ldi	r24, 0xBE	; 190
    57ac:	f8 2e       	mov	r15, r24
    57ae:	08 c0       	rjmp	.+16     	; 0x57c0 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    57b0:	96 ea       	ldi	r25, 0xA6	; 166
    57b2:	c9 2e       	mov	r12, r25
    57b4:	9a e0       	ldi	r25, 0x0A	; 10
    57b6:	d9 2e       	mov	r13, r25
    57b8:	96 e8       	ldi	r25, 0x86	; 134
    57ba:	e9 2e       	mov	r14, r25
    57bc:	9e e3       	ldi	r25, 0x3E	; 62
    57be:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    57c0:	c7 01       	movw	r24, r14
    57c2:	b6 01       	movw	r22, r12
    57c4:	ff 90       	pop	r15
    57c6:	ef 90       	pop	r14
    57c8:	df 90       	pop	r13
    57ca:	cf 90       	pop	r12
    57cc:	08 95       	ret

000057ce <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    57ce:	8f 92       	push	r8
    57d0:	9f 92       	push	r9
    57d2:	af 92       	push	r10
    57d4:	bf 92       	push	r11
    57d6:	cf 92       	push	r12
    57d8:	df 92       	push	r13
    57da:	ef 92       	push	r14
    57dc:	ff 92       	push	r15
    57de:	0f 93       	push	r16
    57e0:	1f 93       	push	r17
    57e2:	6b 01       	movw	r12, r22
    57e4:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    57e6:	60 91 a5 05 	lds	r22, 0x05A5
    57ea:	70 91 a6 05 	lds	r23, 0x05A6
    57ee:	80 91 a7 05 	lds	r24, 0x05A7
    57f2:	90 91 a8 05 	lds	r25, 0x05A8
    57f6:	a7 01       	movw	r20, r14
    57f8:	96 01       	movw	r18, r12
    57fa:	0e 94 ab 2b 	call	0x5756	; 0x5756 <thetascale>
	VectorA = VectorY;
    57fe:	00 91 26 05 	lds	r16, 0x0526
    5802:	10 91 27 05 	lds	r17, 0x0527
    5806:	20 91 28 05 	lds	r18, 0x0528
    580a:	30 91 29 05 	lds	r19, 0x0529
    580e:	00 93 c5 05 	sts	0x05C5, r16
    5812:	10 93 c6 05 	sts	0x05C6, r17
    5816:	20 93 c7 05 	sts	0x05C7, r18
    581a:	30 93 c8 05 	sts	0x05C8, r19
	VectorB = VectorZ;
    581e:	00 91 00 05 	lds	r16, 0x0500
    5822:	10 91 01 05 	lds	r17, 0x0501
    5826:	20 91 02 05 	lds	r18, 0x0502
    582a:	30 91 03 05 	lds	r19, 0x0503
    582e:	00 93 c9 05 	sts	0x05C9, r16
    5832:	10 93 ca 05 	sts	0x05CA, r17
    5836:	20 93 cb 05 	sts	0x05CB, r18
    583a:	30 93 cc 05 	sts	0x05CC, r19
	RotateVector(theta);
    583e:	0e 94 1a 2b 	call	0x5634	; 0x5634 <RotateVector>
	VectorY = VectorNewA;
    5842:	80 91 b1 05 	lds	r24, 0x05B1
    5846:	90 91 b2 05 	lds	r25, 0x05B2
    584a:	a0 91 b3 05 	lds	r26, 0x05B3
    584e:	b0 91 b4 05 	lds	r27, 0x05B4
    5852:	80 93 26 05 	sts	0x0526, r24
    5856:	90 93 27 05 	sts	0x0527, r25
    585a:	a0 93 28 05 	sts	0x0528, r26
    585e:	b0 93 29 05 	sts	0x0529, r27
	VectorZ = VectorNewB;
    5862:	80 90 95 05 	lds	r8, 0x0595
    5866:	90 90 96 05 	lds	r9, 0x0596
    586a:	a0 90 97 05 	lds	r10, 0x0597
    586e:	b0 90 98 05 	lds	r11, 0x0598
    5872:	80 92 00 05 	sts	0x0500, r8
    5876:	90 92 01 05 	sts	0x0501, r9
    587a:	a0 92 02 05 	sts	0x0502, r10
    587e:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    5882:	60 91 a9 05 	lds	r22, 0x05A9
    5886:	70 91 aa 05 	lds	r23, 0x05AA
    588a:	80 91 ab 05 	lds	r24, 0x05AB
    588e:	90 91 ac 05 	lds	r25, 0x05AC
    5892:	a7 01       	movw	r20, r14
    5894:	96 01       	movw	r18, r12
    5896:	0e 94 ab 2b 	call	0x5756	; 0x5756 <thetascale>
	VectorA = VectorX;
    589a:	00 91 2a 05 	lds	r16, 0x052A
    589e:	10 91 2b 05 	lds	r17, 0x052B
    58a2:	20 91 2c 05 	lds	r18, 0x052C
    58a6:	30 91 2d 05 	lds	r19, 0x052D
    58aa:	00 93 c5 05 	sts	0x05C5, r16
    58ae:	10 93 c6 05 	sts	0x05C6, r17
    58b2:	20 93 c7 05 	sts	0x05C7, r18
    58b6:	30 93 c8 05 	sts	0x05C8, r19
	VectorB = VectorZ;
    58ba:	80 92 c9 05 	sts	0x05C9, r8
    58be:	90 92 ca 05 	sts	0x05CA, r9
    58c2:	a0 92 cb 05 	sts	0x05CB, r10
    58c6:	b0 92 cc 05 	sts	0x05CC, r11
	RotateVector(theta);
    58ca:	0e 94 1a 2b 	call	0x5634	; 0x5634 <RotateVector>
	VectorX = VectorNewA;
    58ce:	80 90 b1 05 	lds	r8, 0x05B1
    58d2:	90 90 b2 05 	lds	r9, 0x05B2
    58d6:	a0 90 b3 05 	lds	r10, 0x05B3
    58da:	b0 90 b4 05 	lds	r11, 0x05B4
    58de:	80 92 2a 05 	sts	0x052A, r8
    58e2:	90 92 2b 05 	sts	0x052B, r9
    58e6:	a0 92 2c 05 	sts	0x052C, r10
    58ea:	b0 92 2d 05 	sts	0x052D, r11
	VectorZ = VectorNewB;
    58ee:	80 91 95 05 	lds	r24, 0x0595
    58f2:	90 91 96 05 	lds	r25, 0x0596
    58f6:	a0 91 97 05 	lds	r26, 0x0597
    58fa:	b0 91 98 05 	lds	r27, 0x0598
    58fe:	80 93 00 05 	sts	0x0500, r24
    5902:	90 93 01 05 	sts	0x0501, r25
    5906:	a0 93 02 05 	sts	0x0502, r26
    590a:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    590e:	60 91 93 05 	lds	r22, 0x0593
    5912:	70 91 94 05 	lds	r23, 0x0594
    5916:	88 27       	eor	r24, r24
    5918:	77 fd       	sbrc	r23, 7
    591a:	80 95       	com	r24
    591c:	98 2f       	mov	r25, r24
    591e:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    5922:	a7 01       	movw	r20, r14
    5924:	96 01       	movw	r18, r12
    5926:	0e 94 ab 2b 	call	0x5756	; 0x5756 <thetascale>
	VectorA = VectorX;
    592a:	80 92 c5 05 	sts	0x05C5, r8
    592e:	90 92 c6 05 	sts	0x05C6, r9
    5932:	a0 92 c7 05 	sts	0x05C7, r10
    5936:	b0 92 c8 05 	sts	0x05C8, r11
	VectorB = VectorY;
    593a:	c0 90 26 05 	lds	r12, 0x0526
    593e:	d0 90 27 05 	lds	r13, 0x0527
    5942:	e0 90 28 05 	lds	r14, 0x0528
    5946:	f0 90 29 05 	lds	r15, 0x0529
    594a:	c0 92 c9 05 	sts	0x05C9, r12
    594e:	d0 92 ca 05 	sts	0x05CA, r13
    5952:	e0 92 cb 05 	sts	0x05CB, r14
    5956:	f0 92 cc 05 	sts	0x05CC, r15
	RotateVector(theta);
    595a:	0e 94 1a 2b 	call	0x5634	; 0x5634 <RotateVector>
	VectorX = VectorNewA;
    595e:	80 91 b1 05 	lds	r24, 0x05B1
    5962:	90 91 b2 05 	lds	r25, 0x05B2
    5966:	a0 91 b3 05 	lds	r26, 0x05B3
    596a:	b0 91 b4 05 	lds	r27, 0x05B4
    596e:	80 93 2a 05 	sts	0x052A, r24
    5972:	90 93 2b 05 	sts	0x052B, r25
    5976:	a0 93 2c 05 	sts	0x052C, r26
    597a:	b0 93 2d 05 	sts	0x052D, r27
	VectorY = VectorNewB;
    597e:	80 91 95 05 	lds	r24, 0x0595
    5982:	90 91 96 05 	lds	r25, 0x0596
    5986:	a0 91 97 05 	lds	r26, 0x0597
    598a:	b0 91 98 05 	lds	r27, 0x0598
    598e:	80 93 26 05 	sts	0x0526, r24
    5992:	90 93 27 05 	sts	0x0527, r25
    5996:	a0 93 28 05 	sts	0x0528, r26
    599a:	b0 93 29 05 	sts	0x0529, r27
}
    599e:	1f 91       	pop	r17
    59a0:	0f 91       	pop	r16
    59a2:	ff 90       	pop	r15
    59a4:	ef 90       	pop	r14
    59a6:	df 90       	pop	r13
    59a8:	cf 90       	pop	r12
    59aa:	bf 90       	pop	r11
    59ac:	af 90       	pop	r10
    59ae:	9f 90       	pop	r9
    59b0:	8f 90       	pop	r8
    59b2:	08 95       	ret

000059b4 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    59b4:	cf 92       	push	r12
    59b6:	df 92       	push	r13
    59b8:	ef 92       	push	r14
    59ba:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    59bc:	20 e0       	ldi	r18, 0x00	; 0
    59be:	30 e0       	ldi	r19, 0x00	; 0
    59c0:	44 eb       	ldi	r20, 0xB4	; 180
    59c2:	52 e4       	ldi	r21, 0x42	; 66
    59c4:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    59c8:	6b 01       	movw	r12, r22
    59ca:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    59cc:	20 e0       	ldi	r18, 0x00	; 0
    59ce:	30 e0       	ldi	r19, 0x00	; 0
    59d0:	a9 01       	movw	r20, r18
    59d2:	60 91 00 05 	lds	r22, 0x0500
    59d6:	70 91 01 05 	lds	r23, 0x0501
    59da:	80 91 02 05 	lds	r24, 0x0502
    59de:	90 91 03 05 	lds	r25, 0x0503
    59e2:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <__cmpsf2>
    59e6:	87 ff       	sbrs	r24, 7
    59e8:	18 c0       	rjmp	.+48     	; 0x5a1a <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    59ea:	20 e0       	ldi	r18, 0x00	; 0
    59ec:	30 e0       	ldi	r19, 0x00	; 0
    59ee:	a9 01       	movw	r20, r18
    59f0:	c7 01       	movw	r24, r14
    59f2:	b6 01       	movw	r22, r12
    59f4:	0e 94 24 50 	call	0xa048	; 0xa048 <__gesf2>
		{
			temp = 180 - temp;
    59f8:	a7 01       	movw	r20, r14
    59fa:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    59fc:	18 16       	cp	r1, r24
    59fe:	2c f4       	brge	.+10     	; 0x5a0a <ext2+0x56>
		{
			temp = 180 - temp;
    5a00:	60 e0       	ldi	r22, 0x00	; 0
    5a02:	70 e0       	ldi	r23, 0x00	; 0
    5a04:	84 e3       	ldi	r24, 0x34	; 52
    5a06:	93 e4       	ldi	r25, 0x43	; 67
    5a08:	04 c0       	rjmp	.+8      	; 0x5a12 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    5a0a:	60 e0       	ldi	r22, 0x00	; 0
    5a0c:	70 e0       	ldi	r23, 0x00	; 0
    5a0e:	84 e3       	ldi	r24, 0x34	; 52
    5a10:	93 ec       	ldi	r25, 0xC3	; 195
    5a12:	0e 94 70 4e 	call	0x9ce0	; 0x9ce0 <__subsf3>
    5a16:	6b 01       	movw	r12, r22
    5a18:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    5a1a:	c7 01       	movw	r24, r14
    5a1c:	b6 01       	movw	r22, r12
    5a1e:	ff 90       	pop	r15
    5a20:	ef 90       	pop	r14
    5a22:	df 90       	pop	r13
    5a24:	cf 90       	pop	r12
    5a26:	08 95       	ret

00005a28 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    5a28:	60 91 2a 05 	lds	r22, 0x052A
    5a2c:	70 91 2b 05 	lds	r23, 0x052B
    5a30:	80 91 2c 05 	lds	r24, 0x052C
    5a34:	90 91 2d 05 	lds	r25, 0x052D
    5a38:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <ext2>
    5a3c:	60 93 c1 05 	sts	0x05C1, r22
    5a40:	70 93 c2 05 	sts	0x05C2, r23
    5a44:	80 93 c3 05 	sts	0x05C3, r24
    5a48:	90 93 c4 05 	sts	0x05C4, r25
	EulerAnglePitch = ext2(VectorY);
    5a4c:	60 91 26 05 	lds	r22, 0x0526
    5a50:	70 91 27 05 	lds	r23, 0x0527
    5a54:	80 91 28 05 	lds	r24, 0x0528
    5a58:	90 91 29 05 	lds	r25, 0x0529
    5a5c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <ext2>
    5a60:	60 93 99 05 	sts	0x0599, r22
    5a64:	70 93 9a 05 	sts	0x059A, r23
    5a68:	80 93 9b 05 	sts	0x059B, r24
    5a6c:	90 93 9c 05 	sts	0x059C, r25
    5a70:	08 95       	ret

00005a72 <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    5a72:	4f 92       	push	r4
    5a74:	5f 92       	push	r5
    5a76:	6f 92       	push	r6
    5a78:	7f 92       	push	r7
    5a7a:	8f 92       	push	r8
    5a7c:	9f 92       	push	r9
    5a7e:	af 92       	push	r10
    5a80:	bf 92       	push	r11
    5a82:	cf 92       	push	r12
    5a84:	df 92       	push	r13
    5a86:	ef 92       	push	r14
    5a88:	ff 92       	push	r15
    5a8a:	0f 93       	push	r16
    5a8c:	1f 93       	push	r17
    5a8e:	cf 93       	push	r28
    5a90:	df 93       	push	r29
    5a92:	cd b7       	in	r28, 0x3d	; 61
    5a94:	de b7       	in	r29, 0x3e	; 62
    5a96:	60 97       	sbiw	r28, 0x10	; 16
    5a98:	0f b6       	in	r0, 0x3f	; 63
    5a9a:	f8 94       	cli
    5a9c:	de bf       	out	0x3e, r29	; 62
    5a9e:	0f be       	out	0x3f, r0	; 63
    5aa0:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    5aa2:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <__floatunsisf>
    5aa6:	69 83       	std	Y+1, r22	; 0x01
    5aa8:	7a 83       	std	Y+2, r23	; 0x02
    5aaa:	8b 83       	std	Y+3, r24	; 0x03
    5aac:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    5aae:	20 e8       	ldi	r18, 0x80	; 128
    5ab0:	36 e9       	ldi	r19, 0x96	; 150
    5ab2:	48 e1       	ldi	r20, 0x18	; 24
    5ab4:	5a e4       	ldi	r21, 0x4A	; 74
    5ab6:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <__divsf3>
    5aba:	6d 87       	std	Y+13, r22	; 0x0d
    5abc:	7e 87       	std	Y+14, r23	; 0x0e
    5abe:	8f 87       	std	Y+15, r24	; 0x0f
    5ac0:	98 8b       	std	Y+16, r25	; 0x10
	//************************************************************
	// Acc LPF
	//************************************************************	

	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    5ac2:	80 91 f7 05 	lds	r24, 0x05F7
    5ac6:	60 91 5b 06 	lds	r22, 0x065B
    5aca:	82 30       	cpi	r24, 0x02	; 2
    5acc:	39 f0       	breq	.+14     	; 0x5adc <imu_update+0x6a>
	{
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    5ace:	84 e0       	ldi	r24, 0x04	; 4
    5ad0:	68 02       	muls	r22, r24
    5ad2:	b0 01       	movw	r22, r0
    5ad4:	11 24       	eor	r1, r1
    5ad6:	6d 58       	subi	r22, 0x8D	; 141
    5ad8:	74 4e       	sbci	r23, 0xE4	; 228
    5ada:	06 c0       	rjmp	.+12     	; 0x5ae8 <imu_update+0x76>
	}
	else
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
    5adc:	94 e0       	ldi	r25, 0x04	; 4
    5ade:	69 02       	muls	r22, r25
    5ae0:	b0 01       	movw	r22, r0
    5ae2:	11 24       	eor	r1, r1
    5ae4:	6d 5a       	subi	r22, 0xAD	; 173
    5ae6:	74 4e       	sbci	r23, 0xE4	; 228
    5ae8:	44 e0       	ldi	r20, 0x04	; 4
    5aea:	50 e0       	ldi	r21, 0x00	; 0
    5aec:	ce 01       	movw	r24, r28
    5aee:	01 96       	adiw	r24, 0x01	; 1
    5af0:	0e 94 2b 51 	call	0xa256	; 0xa256 <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    5af4:	50 90 5b 06 	lds	r5, 0x065B
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    5af8:	c9 80       	ldd	r12, Y+1	; 0x01
    5afa:	da 80       	ldd	r13, Y+2	; 0x02
    5afc:	eb 80       	ldd	r14, Y+3	; 0x03
    5afe:	fc 80       	ldd	r15, Y+4	; 0x04
    5b00:	2e e3       	ldi	r18, 0x3E	; 62
    5b02:	62 2e       	mov	r6, r18
    5b04:	25 e0       	ldi	r18, 0x05	; 5
    5b06:	72 2e       	mov	r7, r18
    5b08:	05 eb       	ldi	r16, 0xB5	; 181
    5b0a:	15 e0       	ldi	r17, 0x05	; 5
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    5b0c:	d3 01       	movw	r26, r6
    5b0e:	6d 91       	ld	r22, X+
    5b10:	7d 91       	ld	r23, X+
    5b12:	3d 01       	movw	r6, r26
    5b14:	88 27       	eor	r24, r24
    5b16:	77 fd       	sbrc	r23, 7
    5b18:	80 95       	com	r24
    5b1a:	98 2f       	mov	r25, r24
    5b1c:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    5b20:	4b 01       	movw	r8, r22
    5b22:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    5b24:	b7 e0       	ldi	r27, 0x07	; 7
    5b26:	5b 16       	cp	r5, r27
    5b28:	f1 f0       	breq	.+60     	; 0x5b66 <imu_update+0xf4>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    5b2a:	20 e0       	ldi	r18, 0x00	; 0
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	40 e8       	ldi	r20, 0x80	; 128
    5b30:	5f e3       	ldi	r21, 0x3F	; 63
    5b32:	c7 01       	movw	r24, r14
    5b34:	b6 01       	movw	r22, r12
    5b36:	0e 94 70 4e 	call	0x9ce0	; 0x9ce0 <__subsf3>
    5b3a:	f8 01       	movw	r30, r16
    5b3c:	20 81       	ld	r18, Z
    5b3e:	31 81       	ldd	r19, Z+1	; 0x01
    5b40:	42 81       	ldd	r20, Z+2	; 0x02
    5b42:	53 81       	ldd	r21, Z+3	; 0x03
    5b44:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    5b48:	a5 01       	movw	r20, r10
    5b4a:	94 01       	movw	r18, r8
    5b4c:	0e 94 70 4e 	call	0x9ce0	; 0x9ce0 <__subsf3>
    5b50:	a7 01       	movw	r20, r14
    5b52:	96 01       	movw	r18, r12
    5b54:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <__divsf3>
    5b58:	d8 01       	movw	r26, r16
    5b5a:	6d 93       	st	X+, r22
    5b5c:	7d 93       	st	X+, r23
    5b5e:	8d 93       	st	X+, r24
    5b60:	9c 93       	st	X, r25
    5b62:	13 97       	sbiw	r26, 0x03	; 3
    5b64:	09 c0       	rjmp	.+18     	; 0x5b78 <imu_update+0x106>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    5b66:	b7 fa       	bst	r11, 7
    5b68:	b0 94       	com	r11
    5b6a:	b7 f8       	bld	r11, 7
    5b6c:	b0 94       	com	r11
    5b6e:	f8 01       	movw	r30, r16
    5b70:	80 82       	st	Z, r8
    5b72:	91 82       	std	Z+1, r9	; 0x01
    5b74:	a2 82       	std	Z+2, r10	; 0x02
    5b76:	b3 82       	std	Z+3, r11	; 0x03
    5b78:	0c 5f       	subi	r16, 0xFC	; 252
    5b7a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    5b7c:	f4 e4       	ldi	r31, 0x44	; 68
    5b7e:	6f 16       	cp	r6, r31
    5b80:	f5 e0       	ldi	r31, 0x05	; 5
    5b82:	7f 06       	cpc	r7, r31
    5b84:	19 f6       	brne	.-122    	; 0x5b0c <imu_update+0x9a>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    5b86:	23 ec       	ldi	r18, 0xC3	; 195
    5b88:	35 ef       	ldi	r19, 0xF5	; 245
    5b8a:	48 e2       	ldi	r20, 0x28	; 40
    5b8c:	5f e3       	ldi	r21, 0x3F	; 63
    5b8e:	60 91 b5 05 	lds	r22, 0x05B5
    5b92:	70 91 b6 05 	lds	r23, 0x05B6
    5b96:	80 91 b7 05 	lds	r24, 0x05B7
    5b9a:	90 91 b8 05 	lds	r25, 0x05B8
    5b9e:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    5ba2:	6d 83       	std	Y+5, r22	; 0x05
    5ba4:	7e 83       	std	Y+6, r23	; 0x06
    5ba6:	8f 83       	std	Y+7, r24	; 0x07
    5ba8:	98 87       	std	Y+8, r25	; 0x08
    5baa:	60 93 9d 05 	sts	0x059D, r22
    5bae:	70 93 9e 05 	sts	0x059E, r23
    5bb2:	80 93 9f 05 	sts	0x059F, r24
    5bb6:	90 93 a0 05 	sts	0x05A0, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    5bba:	23 ec       	ldi	r18, 0xC3	; 195
    5bbc:	35 ef       	ldi	r19, 0xF5	; 245
    5bbe:	48 e2       	ldi	r20, 0x28	; 40
    5bc0:	5f e3       	ldi	r21, 0x3F	; 63
    5bc2:	60 91 b9 05 	lds	r22, 0x05B9
    5bc6:	70 91 ba 05 	lds	r23, 0x05BA
    5bca:	80 91 bb 05 	lds	r24, 0x05BB
    5bce:	90 91 bc 05 	lds	r25, 0x05BC
    5bd2:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    5bd6:	69 87       	std	Y+9, r22	; 0x09
    5bd8:	7a 87       	std	Y+10, r23	; 0x0a
    5bda:	8b 87       	std	Y+11, r24	; 0x0b
    5bdc:	9c 87       	std	Y+12, r25	; 0x0c
    5bde:	60 93 a1 05 	sts	0x05A1, r22
    5be2:	70 93 a2 05 	sts	0x05A2, r23
    5be6:	80 93 a3 05 	sts	0x05A3, r24
    5bea:	90 93 a4 05 	sts	0x05A4, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    5bee:	60 91 8f 05 	lds	r22, 0x058F
    5bf2:	70 91 90 05 	lds	r23, 0x0590
    5bf6:	88 27       	eor	r24, r24
    5bf8:	77 fd       	sbrc	r23, 7
    5bfa:	80 95       	com	r24
    5bfc:	98 2f       	mov	r25, r24
    5bfe:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    5c02:	2b 01       	movw	r4, r22
    5c04:	3c 01       	movw	r6, r24
    5c06:	60 93 a9 05 	sts	0x05A9, r22
    5c0a:	70 93 aa 05 	sts	0x05AA, r23
    5c0e:	80 93 ab 05 	sts	0x05AB, r24
    5c12:	90 93 ac 05 	sts	0x05AC, r25
	GyroPitchVC = gyroADC[PITCH];
    5c16:	60 91 91 05 	lds	r22, 0x0591
    5c1a:	70 91 92 05 	lds	r23, 0x0592
    5c1e:	88 27       	eor	r24, r24
    5c20:	77 fd       	sbrc	r23, 7
    5c22:	80 95       	com	r24
    5c24:	98 2f       	mov	r25, r24
    5c26:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    5c2a:	6b 01       	movw	r12, r22
    5c2c:	7c 01       	movw	r14, r24
    5c2e:	60 93 a5 05 	sts	0x05A5, r22
    5c32:	70 93 a6 05 	sts	0x05A6, r23
    5c36:	80 93 a7 05 	sts	0x05A7, r24
    5c3a:	90 93 a8 05 	sts	0x05A8, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    5c3e:	20 91 3e 05 	lds	r18, 0x053E
    5c42:	30 91 3f 05 	lds	r19, 0x053F
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    5c46:	40 91 40 05 	lds	r20, 0x0540
    5c4a:	50 91 41 05 	lds	r21, 0x0541
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    5c4e:	e0 91 42 05 	lds	r30, 0x0542
    5c52:	f0 91 43 05 	lds	r31, 0x0543
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    5c56:	44 9f       	mul	r20, r20
    5c58:	40 01       	movw	r8, r0
    5c5a:	45 9f       	mul	r20, r21
    5c5c:	90 0c       	add	r9, r0
    5c5e:	90 0c       	add	r9, r0
    5c60:	11 24       	eor	r1, r1
    5c62:	b4 01       	movw	r22, r8
    5c64:	88 27       	eor	r24, r24
    5c66:	77 fd       	sbrc	r23, 7
    5c68:	80 95       	com	r24
    5c6a:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    5c6c:	22 9f       	mul	r18, r18
    5c6e:	a0 01       	movw	r20, r0
    5c70:	23 9f       	mul	r18, r19
    5c72:	50 0d       	add	r21, r0
    5c74:	50 0d       	add	r21, r0
    5c76:	11 24       	eor	r1, r1
    5c78:	8a 01       	movw	r16, r20
    5c7a:	22 27       	eor	r18, r18
    5c7c:	17 fd       	sbrc	r17, 7
    5c7e:	20 95       	com	r18
    5c80:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    5c82:	60 0f       	add	r22, r16
    5c84:	71 1f       	adc	r23, r17
    5c86:	82 1f       	adc	r24, r18
    5c88:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    5c8a:	ee 9f       	mul	r30, r30
    5c8c:	90 01       	movw	r18, r0
    5c8e:	ef 9f       	mul	r30, r31
    5c90:	30 0d       	add	r19, r0
    5c92:	30 0d       	add	r19, r0
    5c94:	11 24       	eor	r1, r1
    5c96:	89 01       	movw	r16, r18
    5c98:	22 27       	eor	r18, r18
    5c9a:	17 fd       	sbrc	r17, 7
    5c9c:	20 95       	com	r18
    5c9e:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    5ca0:	60 0f       	add	r22, r16
    5ca2:	71 1f       	adc	r23, r17
    5ca4:	82 1f       	adc	r24, r18
    5ca6:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    5ca8:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <__floatunsisf>
    5cac:	4b 01       	movw	r8, r22
    5cae:	5c 01       	movw	r10, r24
    5cb0:	20 e0       	ldi	r18, 0x00	; 0
    5cb2:	34 ef       	ldi	r19, 0xF4	; 244
    5cb4:	48 e3       	ldi	r20, 0x38	; 56
    5cb6:	56 e4       	ldi	r21, 0x46	; 70
    5cb8:	0e 94 24 50 	call	0xa048	; 0xa048 <__gesf2>
    5cbc:	18 16       	cp	r1, r24
    5cbe:	0c f0       	brlt	.+2      	; 0x5cc2 <imu_update+0x250>
    5cc0:	6f c0       	rjmp	.+222    	; 0x5da0 <imu_update+0x32e>
    5cc2:	20 e0       	ldi	r18, 0x00	; 0
    5cc4:	38 e4       	ldi	r19, 0x48	; 72
    5cc6:	49 ea       	ldi	r20, 0xA9	; 169
    5cc8:	56 e4       	ldi	r21, 0x46	; 70
    5cca:	c5 01       	movw	r24, r10
    5ccc:	b4 01       	movw	r22, r8
    5cce:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <__cmpsf2>
    5cd2:	87 ff       	sbrs	r24, 7
    5cd4:	65 c0       	rjmp	.+202    	; 0x5da0 <imu_update+0x32e>
    5cd6:	20 e0       	ldi	r18, 0x00	; 0
    5cd8:	30 e0       	ldi	r19, 0x00	; 0
    5cda:	40 e0       	ldi	r20, 0x00	; 0
    5cdc:	5f e3       	ldi	r21, 0x3F	; 63
    5cde:	60 91 00 05 	lds	r22, 0x0500
    5ce2:	70 91 01 05 	lds	r23, 0x0501
    5ce6:	80 91 02 05 	lds	r24, 0x0502
    5cea:	90 91 03 05 	lds	r25, 0x0503
    5cee:	0e 94 24 50 	call	0xa048	; 0xa048 <__gesf2>
    5cf2:	18 16       	cp	r1, r24
    5cf4:	0c f0       	brlt	.+2      	; 0x5cf8 <imu_update+0x286>
    5cf6:	54 c0       	rjmp	.+168    	; 0x5da0 <imu_update+0x32e>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    5cf8:	80 91 5d 06 	lds	r24, 0x065D
    5cfc:	6b e0       	ldi	r22, 0x0B	; 11
    5cfe:	70 e0       	ldi	r23, 0x00	; 0
    5d00:	68 1b       	sub	r22, r24
    5d02:	71 09       	sbc	r23, r1
    5d04:	87 fd       	sbrc	r24, 7
    5d06:	73 95       	inc	r23
    5d08:	88 27       	eor	r24, r24
    5d0a:	77 fd       	sbrc	r23, 7
    5d0c:	80 95       	com	r24
    5d0e:	98 2f       	mov	r25, r24
    5d10:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    5d14:	4b 01       	movw	r8, r22
    5d16:	5c 01       	movw	r10, r24
    5d18:	2d 81       	ldd	r18, Y+5	; 0x05
    5d1a:	3e 81       	ldd	r19, Y+6	; 0x06
    5d1c:	4f 81       	ldd	r20, Y+7	; 0x07
    5d1e:	58 85       	ldd	r21, Y+8	; 0x08
    5d20:	60 91 c1 05 	lds	r22, 0x05C1
    5d24:	70 91 c2 05 	lds	r23, 0x05C2
    5d28:	80 91 c3 05 	lds	r24, 0x05C3
    5d2c:	90 91 c4 05 	lds	r25, 0x05C4
    5d30:	0e 94 70 4e 	call	0x9ce0	; 0x9ce0 <__subsf3>
    5d34:	a5 01       	movw	r20, r10
    5d36:	94 01       	movw	r18, r8
    5d38:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <__divsf3>
    5d3c:	9b 01       	movw	r18, r22
    5d3e:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    5d40:	c3 01       	movw	r24, r6
    5d42:	b2 01       	movw	r22, r4
    5d44:	0e 94 71 4e 	call	0x9ce2	; 0x9ce2 <__addsf3>
    5d48:	60 93 a9 05 	sts	0x05A9, r22
    5d4c:	70 93 aa 05 	sts	0x05AA, r23
    5d50:	80 93 ab 05 	sts	0x05AB, r24
    5d54:	90 93 ac 05 	sts	0x05AC, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    5d58:	29 85       	ldd	r18, Y+9	; 0x09
    5d5a:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d5c:	4b 85       	ldd	r20, Y+11	; 0x0b
    5d5e:	5c 85       	ldd	r21, Y+12	; 0x0c
    5d60:	60 91 99 05 	lds	r22, 0x0599
    5d64:	70 91 9a 05 	lds	r23, 0x059A
    5d68:	80 91 9b 05 	lds	r24, 0x059B
    5d6c:	90 91 9c 05 	lds	r25, 0x059C
    5d70:	0e 94 70 4e 	call	0x9ce0	; 0x9ce0 <__subsf3>
    5d74:	a5 01       	movw	r20, r10
    5d76:	94 01       	movw	r18, r8
    5d78:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <__divsf3>
    5d7c:	9b 01       	movw	r18, r22
    5d7e:	ac 01       	movw	r20, r24
    5d80:	69 83       	std	Y+1, r22	; 0x01
    5d82:	7a 83       	std	Y+2, r23	; 0x02
    5d84:	8b 83       	std	Y+3, r24	; 0x03
    5d86:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    5d88:	c7 01       	movw	r24, r14
    5d8a:	b6 01       	movw	r22, r12
    5d8c:	0e 94 71 4e 	call	0x9ce2	; 0x9ce2 <__addsf3>
    5d90:	60 93 a5 05 	sts	0x05A5, r22
    5d94:	70 93 a6 05 	sts	0x05A6, r23
    5d98:	80 93 a7 05 	sts	0x05A7, r24
    5d9c:	90 93 a8 05 	sts	0x05A8, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    5da0:	6d 85       	ldd	r22, Y+13	; 0x0d
    5da2:	7e 85       	ldd	r23, Y+14	; 0x0e
    5da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5da6:	98 89       	ldd	r25, Y+16	; 0x10
    5da8:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <Rotate3dVector>
	ExtractEulerAngles();
    5dac:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    5db0:	20 e0       	ldi	r18, 0x00	; 0
    5db2:	30 e0       	ldi	r19, 0x00	; 0
    5db4:	48 ec       	ldi	r20, 0xC8	; 200
    5db6:	52 ec       	ldi	r21, 0xC2	; 194
    5db8:	60 91 c1 05 	lds	r22, 0x05C1
    5dbc:	70 91 c2 05 	lds	r23, 0x05C2
    5dc0:	80 91 c3 05 	lds	r24, 0x05C3
    5dc4:	90 91 c4 05 	lds	r25, 0x05C4
    5dc8:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    5dcc:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
    5dd0:	70 93 ae 05 	sts	0x05AE, r23
    5dd4:	60 93 ad 05 	sts	0x05AD, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    5dd8:	20 e0       	ldi	r18, 0x00	; 0
    5dda:	30 e0       	ldi	r19, 0x00	; 0
    5ddc:	48 ec       	ldi	r20, 0xC8	; 200
    5dde:	52 ec       	ldi	r21, 0xC2	; 194
    5de0:	60 91 99 05 	lds	r22, 0x0599
    5de4:	70 91 9a 05 	lds	r23, 0x059A
    5de8:	80 91 9b 05 	lds	r24, 0x059B
    5dec:	90 91 9c 05 	lds	r25, 0x059C
    5df0:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    5df4:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
    5df8:	70 93 b0 05 	sts	0x05B0, r23
    5dfc:	60 93 af 05 	sts	0x05AF, r22
}
    5e00:	60 96       	adiw	r28, 0x10	; 16
    5e02:	0f b6       	in	r0, 0x3f	; 63
    5e04:	f8 94       	cli
    5e06:	de bf       	out	0x3e, r29	; 62
    5e08:	0f be       	out	0x3f, r0	; 63
    5e0a:	cd bf       	out	0x3d, r28	; 61
    5e0c:	df 91       	pop	r29
    5e0e:	cf 91       	pop	r28
    5e10:	1f 91       	pop	r17
    5e12:	0f 91       	pop	r16
    5e14:	ff 90       	pop	r15
    5e16:	ef 90       	pop	r14
    5e18:	df 90       	pop	r13
    5e1a:	cf 90       	pop	r12
    5e1c:	bf 90       	pop	r11
    5e1e:	af 90       	pop	r10
    5e20:	9f 90       	pop	r9
    5e22:	8f 90       	pop	r8
    5e24:	7f 90       	pop	r7
    5e26:	6f 90       	pop	r6
    5e28:	5f 90       	pop	r5
    5e2a:	4f 90       	pop	r4
    5e2c:	08 95       	ret

00005e2e <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    5e2e:	10 92 2a 05 	sts	0x052A, r1
    5e32:	10 92 2b 05 	sts	0x052B, r1
    5e36:	10 92 2c 05 	sts	0x052C, r1
    5e3a:	10 92 2d 05 	sts	0x052D, r1
	VectorY = 0;
    5e3e:	10 92 26 05 	sts	0x0526, r1
    5e42:	10 92 27 05 	sts	0x0527, r1
    5e46:	10 92 28 05 	sts	0x0528, r1
    5e4a:	10 92 29 05 	sts	0x0529, r1
	VectorZ = 1;
    5e4e:	80 e0       	ldi	r24, 0x00	; 0
    5e50:	90 e0       	ldi	r25, 0x00	; 0
    5e52:	a0 e8       	ldi	r26, 0x80	; 128
    5e54:	bf e3       	ldi	r27, 0x3F	; 63
    5e56:	80 93 00 05 	sts	0x0500, r24
    5e5a:	90 93 01 05 	sts	0x0501, r25
    5e5e:	a0 93 02 05 	sts	0x0502, r26
    5e62:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    5e66:	10 92 c5 05 	sts	0x05C5, r1
    5e6a:	10 92 c6 05 	sts	0x05C6, r1
    5e6e:	10 92 c7 05 	sts	0x05C7, r1
    5e72:	10 92 c8 05 	sts	0x05C8, r1
	VectorB = 0;
    5e76:	10 92 c9 05 	sts	0x05C9, r1
    5e7a:	10 92 ca 05 	sts	0x05CA, r1
    5e7e:	10 92 cb 05 	sts	0x05CB, r1
    5e82:	10 92 cc 05 	sts	0x05CC, r1
	EulerAngleRoll = 0;
    5e86:	10 92 c1 05 	sts	0x05C1, r1
    5e8a:	10 92 c2 05 	sts	0x05C2, r1
    5e8e:	10 92 c3 05 	sts	0x05C3, r1
    5e92:	10 92 c4 05 	sts	0x05C4, r1
	EulerAnglePitch = 0;
    5e96:	10 92 99 05 	sts	0x0599, r1
    5e9a:	10 92 9a 05 	sts	0x059A, r1
    5e9e:	10 92 9b 05 	sts	0x059B, r1
    5ea2:	10 92 9c 05 	sts	0x059C, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    5ea6:	10 92 01 08 	sts	0x0801, r1
    5eaa:	10 92 00 08 	sts	0x0800, r1
	TCNT1 = 0;			// TCNT1 current time
    5eae:	10 92 85 00 	sts	0x0085, r1
    5eb2:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    5eb6:	10 92 1b 05 	sts	0x051B, r1
    5eba:	10 92 1a 05 	sts	0x051A, r1
    5ebe:	08 95       	ret

00005ec0 <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    5ec0:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    5ec2:	80 e3       	ldi	r24, 0x30	; 48
    5ec4:	81 b9       	out	0x01, r24	; 1
	DDRB		= 0x0A;		// Port B
    5ec6:	8a e0       	ldi	r24, 0x0A	; 10
    5ec8:	84 b9       	out	0x04, r24	; 4
	DDRC		= 0xFC;		// Port C
    5eca:	8c ef       	ldi	r24, 0xFC	; 252
    5ecc:	87 b9       	out	0x07, r24	; 7
	DDRD		= 0xF2;		// Port D
    5ece:	82 ef       	ldi	r24, 0xF2	; 242
    5ed0:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    5ed2:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    5ed4:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    5ed6:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    5ed8:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    5eda:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    5edc:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    5ede:	85 ef       	ldi	r24, 0xF5	; 245
    5ee0:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    5ee2:	8c e0       	ldi	r24, 0x0C	; 12
    5ee4:	89 b9       	out	0x09, r24	; 9
	// 5 low pulses: DSM2 2048/11ms
	// 7 low pulses: DSMX 1024/22ms
	// 9 low pulses: DSMX 2048/11ms
	//***********************************************************

	PIND	= 0x0C;			// Release RX pull up on PD0
    5ee6:	89 b9       	out	0x09, r24	; 9
    5ee8:	2f e5       	ldi	r18, 0x5F	; 95
    5eea:	88 ed       	ldi	r24, 0xD8	; 216
    5eec:	93 e0       	ldi	r25, 0x03	; 3
    5eee:	21 50       	subi	r18, 0x01	; 1
    5ef0:	80 40       	sbci	r24, 0x00	; 0
    5ef2:	90 40       	sbci	r25, 0x00	; 0
    5ef4:	e1 f7       	brne	.-8      	; 0x5eee <init+0x2e>
    5ef6:	00 c0       	rjmp	.+0      	; 0x5ef8 <init+0x38>
    5ef8:	00 00       	nop
							// Tweak until bind pulses about 68ms after power-up		
		
	// Bind as master if any single button pressed.
	// NB: Have to wait until the button pull-ups rise before testing for a button press.
	// Button 1
	if ((PINB & 0xf0) == 0x70)
    5efa:	83 b1       	in	r24, 0x03	; 3
    5efc:	80 7f       	andi	r24, 0xF0	; 240
    5efe:	80 37       	cpi	r24, 0x70	; 112
    5f00:	29 f4       	brne	.+10     	; 0x5f0c <init+0x4c>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    5f02:	83 ef       	ldi	r24, 0xF3	; 243
    5f04:	8a b9       	out	0x0a, r24	; 10
		bind_master(3);
    5f06:	83 e0       	ldi	r24, 0x03	; 3
    5f08:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <bind_master>
		
	}
	// Button 2	
	if ((PINB & 0xf0) == 0xb0)
    5f0c:	83 b1       	in	r24, 0x03	; 3
    5f0e:	80 7f       	andi	r24, 0xF0	; 240
    5f10:	80 3b       	cpi	r24, 0xB0	; 176
    5f12:	29 f4       	brne	.+10     	; 0x5f1e <init+0x5e>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    5f14:	83 ef       	ldi	r24, 0xF3	; 243
    5f16:	8a b9       	out	0x0a, r24	; 10
		bind_master(5);
    5f18:	85 e0       	ldi	r24, 0x05	; 5
    5f1a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <bind_master>
	}
	// Button 3	
	if ((PINB & 0xf0) == 0xd0)
    5f1e:	83 b1       	in	r24, 0x03	; 3
    5f20:	80 7f       	andi	r24, 0xF0	; 240
    5f22:	80 3d       	cpi	r24, 0xD0	; 208
    5f24:	29 f4       	brne	.+10     	; 0x5f30 <init+0x70>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    5f26:	83 ef       	ldi	r24, 0xF3	; 243
    5f28:	8a b9       	out	0x0a, r24	; 10
		bind_master(7);
    5f2a:	87 e0       	ldi	r24, 0x07	; 7
    5f2c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <bind_master>
	}
	
	// Button 4
	if ((PINB & 0xf0) == 0xE0)
    5f30:	83 b1       	in	r24, 0x03	; 3
    5f32:	80 7f       	andi	r24, 0xF0	; 240
    5f34:	80 3e       	cpi	r24, 0xE0	; 224
    5f36:	29 f4       	brne	.+10     	; 0x5f42 <init+0x82>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    5f38:	83 ef       	ldi	r24, 0xF3	; 243
    5f3a:	8a b9       	out	0x0a, r24	; 10
		bind_master(9);
    5f3c:	89 e0       	ldi	r24, 0x09	; 9
    5f3e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <bind_master>
	}
	
	DDRD	= 0xF2;			// Reset Port D directions
    5f42:	82 ef       	ldi	r24, 0xF2	; 242
    5f44:	8a b9       	out	0x0a, r24	; 10
	PIND	= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    5f46:	8d e0       	ldi	r24, 0x0D	; 13
    5f48:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    5f4a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    5f4c:	85 e0       	ldi	r24, 0x05	; 5
    5f4e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    5f50:	80 91 6e 00 	lds	r24, 0x006E
    5f54:	81 60       	ori	r24, 0x01	; 1
    5f56:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    5f5a:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    5f5c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    5f60:	80 91 81 00 	lds	r24, 0x0081
    5f64:	82 60       	ori	r24, 0x02	; 2
    5f66:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    5f6a:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    5f6e:	87 e0       	ldi	r24, 0x07	; 7
    5f70:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    5f74:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    5f78:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    5f7a:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    5f7e:	9a e0       	ldi	r25, 0x0A	; 10
    5f80:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    5f84:	9f e0       	ldi	r25, 0x0F	; 15
    5f86:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    5f88:	95 e1       	ldi	r25, 0x15	; 21
    5f8a:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    5f8e:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    5f90:	10 92 fd 07 	sts	0x07FD, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    5f94:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <Initial_EEPROM_Config_Load>
    5f98:	c8 2f       	mov	r28, r24
    5f9a:	20 e0       	ldi	r18, 0x00	; 0
    5f9c:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    5f9e:	46 ea       	ldi	r20, 0xA6	; 166
    5fa0:	5e e0       	ldi	r21, 0x0E	; 14
    5fa2:	f9 01       	movw	r30, r18
    5fa4:	ee 0f       	add	r30, r30
    5fa6:	ff 1f       	adc	r31, r31
    5fa8:	e3 51       	subi	r30, 0x13	; 19
    5faa:	f8 4f       	sbci	r31, 0xF8	; 248
    5fac:	51 83       	std	Z+1, r21	; 0x01
    5fae:	40 83       	st	Z, r20
    5fb0:	2f 5f       	subi	r18, 0xFF	; 255
    5fb2:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5fb4:	28 30       	cpi	r18, 0x08	; 8
    5fb6:	31 05       	cpc	r19, r1
    5fb8:	a1 f7       	brne	.-24     	; 0x5fa2 <init+0xe2>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    5fba:	24 ec       	ldi	r18, 0xC4	; 196
    5fbc:	39 e0       	ldi	r19, 0x09	; 9
    5fbe:	30 93 ee 07 	sts	0x07EE, r19
    5fc2:	20 93 ed 07 	sts	0x07ED, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    5fc6:	0e 94 31 26 	call	0x4c62	; 0x4c62 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    5fca:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    5fce:	93 b1       	in	r25, 0x03	; 3
    5fd0:	90 7f       	andi	r25, 0xF0	; 240
    5fd2:	90 36       	cpi	r25, 0x60	; 96
    5fd4:	09 f0       	breq	.+2      	; 0x5fd8 <init+0x118>
    5fd6:	71 c0       	rjmp	.+226    	; 0x60ba <init+0x1fa>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5fd8:	80 ec       	ldi	r24, 0xC0	; 192
    5fda:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
		clear_buffer(buffer);
    5fde:	80 e0       	ldi	r24, 0x00	; 0
    5fe0:	91 e0       	ldi	r25, 0x01	; 1
    5fe2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    5fe6:	29 e1       	ldi	r18, 0x19	; 25
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	4a e0       	ldi	r20, 0x0A	; 10
    5fec:	50 e0       	ldi	r21, 0x00	; 0
    5fee:	69 ee       	ldi	r22, 0xE9	; 233
    5ff0:	73 e0       	ldi	r23, 0x03	; 3
    5ff2:	8b e3       	ldi	r24, 0x3B	; 59
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		write_buffer(buffer);
    5ffa:	80 e0       	ldi	r24, 0x00	; 0
    5ffc:	91 e0       	ldi	r25, 0x01	; 1
    5ffe:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
		clear_buffer(buffer);
    6002:	80 e0       	ldi	r24, 0x00	; 0
    6004:	91 e0       	ldi	r25, 0x01	; 1
    6006:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
    600a:	e3 e6       	ldi	r30, 0x63	; 99
    600c:	f6 e0       	ldi	r31, 0x06	; 6
    600e:	80 e0       	ldi	r24, 0x00	; 0
    6010:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    6012:	4c ed       	ldi	r20, 0xDC	; 220
    6014:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    6016:	6c e6       	ldi	r22, 0x6C	; 108
    6018:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    601a:	a0 81       	ld	r26, Z
    601c:	9c 01       	movw	r18, r24
    601e:	22 0f       	add	r18, r18
    6020:	33 1f       	adc	r19, r19
    6022:	a2 30       	cpi	r26, 0x02	; 2
    6024:	39 f4       	brne	.+14     	; 0x6034 <init+0x174>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    6026:	d9 01       	movw	r26, r18
    6028:	a8 57       	subi	r26, 0x78	; 120
    602a:	b7 4f       	sbci	r27, 0xF7	; 247
    602c:	11 96       	adiw	r26, 0x01	; 1
    602e:	7c 93       	st	X, r23
    6030:	6e 93       	st	-X, r22
    6032:	06 c0       	rjmp	.+12     	; 0x6040 <init+0x180>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    6034:	d9 01       	movw	r26, r18
    6036:	a8 57       	subi	r26, 0x78	; 120
    6038:	b7 4f       	sbci	r27, 0xF7	; 247
    603a:	11 96       	adiw	r26, 0x01	; 1
    603c:	5c 93       	st	X, r21
    603e:	4e 93       	st	-X, r20
    6040:	01 96       	adiw	r24, 0x01	; 1
    6042:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    6044:	88 30       	cpi	r24, 0x08	; 8
    6046:	91 05       	cpc	r25, r1
    6048:	41 f7       	brne	.-48     	; 0x601a <init+0x15a>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    604a:	83 b1       	in	r24, 0x03	; 3
    604c:	80 7f       	andi	r24, 0xF0	; 240
    604e:	80 36       	cpi	r24, 0x60	; 96
    6050:	79 f4       	brne	.+30     	; 0x6070 <init+0x1b0>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    6052:	6f ef       	ldi	r22, 0xFF	; 255
    6054:	88 e8       	ldi	r24, 0x88	; 136
    6056:	98 e0       	ldi	r25, 0x08	; 8
    6058:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <output_servo_ppm_asm>
    605c:	2f e7       	ldi	r18, 0x7F	; 127
    605e:	88 e3       	ldi	r24, 0x38	; 56
    6060:	91 e0       	ldi	r25, 0x01	; 1
    6062:	21 50       	subi	r18, 0x01	; 1
    6064:	80 40       	sbci	r24, 0x00	; 0
    6066:	90 40       	sbci	r25, 0x00	; 0
    6068:	e1 f7       	brne	.-8      	; 0x6062 <init+0x1a2>
    606a:	00 c0       	rjmp	.+0      	; 0x606c <init+0x1ac>
    606c:	00 00       	nop
    606e:	ed cf       	rjmp	.-38     	; 0x604a <init+0x18a>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    6070:	e3 e6       	ldi	r30, 0x63	; 99
    6072:	f6 e0       	ldi	r31, 0x06	; 6
    6074:	80 e0       	ldi	r24, 0x00	; 0
    6076:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    6078:	2c e4       	ldi	r18, 0x4C	; 76
    607a:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    607c:	40 81       	ld	r20, Z
    607e:	42 30       	cpi	r20, 0x02	; 2
    6080:	41 f4       	brne	.+16     	; 0x6092 <init+0x1d2>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    6082:	dc 01       	movw	r26, r24
    6084:	aa 0f       	add	r26, r26
    6086:	bb 1f       	adc	r27, r27
    6088:	a8 57       	subi	r26, 0x78	; 120
    608a:	b7 4f       	sbci	r27, 0xF7	; 247
    608c:	11 96       	adiw	r26, 0x01	; 1
    608e:	3c 93       	st	X, r19
    6090:	2e 93       	st	-X, r18
    6092:	01 96       	adiw	r24, 0x01	; 1
    6094:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    6096:	88 30       	cpi	r24, 0x08	; 8
    6098:	91 05       	cpc	r25, r1
    609a:	81 f7       	brne	.-32     	; 0x607c <init+0x1bc>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    609c:	6f ef       	ldi	r22, 0xFF	; 255
    609e:	88 e8       	ldi	r24, 0x88	; 136
    60a0:	98 e0       	ldi	r25, 0x08	; 8
    60a2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <output_servo_ppm_asm>
    60a6:	2f e7       	ldi	r18, 0x7F	; 127
    60a8:	88 e3       	ldi	r24, 0x38	; 56
    60aa:	91 e0       	ldi	r25, 0x01	; 1
    60ac:	21 50       	subi	r18, 0x01	; 1
    60ae:	80 40       	sbci	r24, 0x00	; 0
    60b0:	90 40       	sbci	r25, 0x00	; 0
    60b2:	e1 f7       	brne	.-8      	; 0x60ac <init+0x1ec>
    60b4:	00 c0       	rjmp	.+0      	; 0x60b6 <init+0x1f6>
    60b6:	00 00       	nop
    60b8:	f1 cf       	rjmp	.-30     	; 0x609c <init+0x1dc>
    60ba:	2f e7       	ldi	r18, 0x7F	; 127
    60bc:	8f e4       	ldi	r24, 0x4F	; 79
    60be:	92 e1       	ldi	r25, 0x12	; 18
    60c0:	21 50       	subi	r18, 0x01	; 1
    60c2:	80 40       	sbci	r24, 0x00	; 0
    60c4:	90 40       	sbci	r25, 0x00	; 0
    60c6:	e1 f7       	brne	.-8      	; 0x60c0 <init+0x200>
    60c8:	00 c0       	rjmp	.+0      	; 0x60ca <init+0x20a>
    60ca:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    60cc:	93 b1       	in	r25, 0x03	; 3
    60ce:	90 7f       	andi	r25, 0xF0	; 240
    60d0:	90 39       	cpi	r25, 0x90	; 144
    60d2:	51 f5       	brne	.+84     	; 0x6128 <init+0x268>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    60d4:	80 ec       	ldi	r24, 0xC0	; 192
    60d6:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
		clear_buffer(buffer);
    60da:	80 e0       	ldi	r24, 0x00	; 0
    60dc:	91 e0       	ldi	r25, 0x01	; 1
    60de:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    60e2:	29 e1       	ldi	r18, 0x19	; 25
    60e4:	30 e0       	ldi	r19, 0x00	; 0
    60e6:	48 e2       	ldi	r20, 0x28	; 40
    60e8:	50 e0       	ldi	r21, 0x00	; 0
    60ea:	69 ee       	ldi	r22, 0xE9	; 233
    60ec:	73 e0       	ldi	r23, 0x03	; 3
    60ee:	86 e0       	ldi	r24, 0x06	; 6
    60f0:	91 e0       	ldi	r25, 0x01	; 1
    60f2:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		write_buffer(buffer);
    60f6:	80 e0       	ldi	r24, 0x00	; 0
    60f8:	91 e0       	ldi	r25, 0x01	; 1
    60fa:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
		clear_buffer(buffer);
    60fe:	80 e0       	ldi	r24, 0x00	; 0
    6100:	91 e0       	ldi	r25, 0x01	; 1
    6102:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    6106:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    610a:	0e 94 be 19 	call	0x337c	; 0x337c <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    610e:	80 91 56 06 	lds	r24, 0x0656
    6112:	0e 94 28 26 	call	0x4c50	; 0x4c50 <st7565_set_brightness>
    6116:	2f e7       	ldi	r18, 0x7F	; 127
    6118:	84 e8       	ldi	r24, 0x84	; 132
    611a:	9e e1       	ldi	r25, 0x1E	; 30
    611c:	21 50       	subi	r18, 0x01	; 1
    611e:	80 40       	sbci	r24, 0x00	; 0
    6120:	90 40       	sbci	r25, 0x00	; 0
    6122:	e1 f7       	brne	.-8      	; 0x611c <init+0x25c>
    6124:	00 c0       	rjmp	.+0      	; 0x6126 <init+0x266>
    6126:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    6128:	cc 23       	and	r28, r28
    612a:	21 f1       	breq	.+72     	; 0x6174 <init+0x2b4>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    612c:	80 ec       	ldi	r24, 0xC0	; 192
    612e:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
		clear_buffer(buffer);
    6132:	80 e0       	ldi	r24, 0x00	; 0
    6134:	91 e0       	ldi	r25, 0x01	; 1
    6136:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    613a:	2d e0       	ldi	r18, 0x0D	; 13
    613c:	30 e0       	ldi	r19, 0x00	; 0
    613e:	4e e1       	ldi	r20, 0x1E	; 30
    6140:	50 e0       	ldi	r21, 0x00	; 0
    6142:	69 ee       	ldi	r22, 0xE9	; 233
    6144:	73 e0       	ldi	r23, 0x03	; 3
    6146:	83 e0       	ldi	r24, 0x03	; 3
    6148:	91 e0       	ldi	r25, 0x01	; 1
    614a:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    614e:	25 e2       	ldi	r18, 0x25	; 37
    6150:	30 e0       	ldi	r19, 0x00	; 0
    6152:	41 e2       	ldi	r20, 0x21	; 33
    6154:	50 e0       	ldi	r21, 0x00	; 0
    6156:	69 ee       	ldi	r22, 0xE9	; 233
    6158:	73 e0       	ldi	r23, 0x03	; 3
    615a:	84 e0       	ldi	r24, 0x04	; 4
    615c:	91 e0       	ldi	r25, 0x01	; 1
    615e:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		write_buffer(buffer);
    6162:	80 e0       	ldi	r24, 0x00	; 0
    6164:	91 e0       	ldi	r25, 0x01	; 1
    6166:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
		clear_buffer(buffer);		
    616a:	80 e0       	ldi	r24, 0x00	; 0
    616c:	91 e0       	ldi	r25, 0x01	; 1
    616e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
    6172:	04 c0       	rjmp	.+8      	; 0x617c <init+0x2bc>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    6174:	80 e0       	ldi	r24, 0x00	; 0
    6176:	91 e0       	ldi	r25, 0x01	; 1
    6178:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
    617c:	2f ef       	ldi	r18, 0xFF	; 255
    617e:	88 e0       	ldi	r24, 0x08	; 8
    6180:	9d e3       	ldi	r25, 0x3D	; 61
    6182:	21 50       	subi	r18, 0x01	; 1
    6184:	80 40       	sbci	r24, 0x00	; 0
    6186:	90 40       	sbci	r25, 0x00	; 0
    6188:	e1 f7       	brne	.-8      	; 0x6182 <init+0x2c2>
    618a:	00 c0       	rjmp	.+0      	; 0x618c <init+0x2cc>
    618c:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    618e:	80 e0       	ldi	r24, 0x00	; 0
    6190:	91 e0       	ldi	r25, 0x01	; 1
    6192:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
	write_buffer(buffer);
    6196:	80 e0       	ldi	r24, 0x00	; 0
    6198:	91 e0       	ldi	r25, 0x01	; 1
    619a:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    619e:	0e 94 31 26 	call	0x4c62	; 0x4c62 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    61a2:	0e 94 01 4d 	call	0x9a02	; 0x9a02 <i2c_init>
	init_i2c_gyros();
    61a6:	0e 94 aa 2a 	call	0x5554	; 0x5554 <init_i2c_gyros>
	init_i2c_accs();
    61aa:	0e 94 e6 12 	call	0x25cc	; 0x25cc <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    61ae:	80 e0       	ldi	r24, 0x00	; 0
    61b0:	91 e0       	ldi	r25, 0x01	; 1
    61b2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    61b6:	80 ec       	ldi	r24, 0xC0	; 192
    61b8:	0e 94 22 26 	call	0x4c44	; 0x4c44 <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    61bc:	29 e1       	ldi	r18, 0x19	; 25
    61be:	30 e0       	ldi	r19, 0x00	; 0
    61c0:	42 e1       	ldi	r20, 0x12	; 18
    61c2:	50 e0       	ldi	r21, 0x00	; 0
    61c4:	69 ee       	ldi	r22, 0xE9	; 233
    61c6:	73 e0       	ldi	r23, 0x03	; 3
    61c8:	87 e0       	ldi	r24, 0x07	; 7
    61ca:	91 e0       	ldi	r25, 0x01	; 1
    61cc:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
	write_buffer(buffer);	
    61d0:	80 e0       	ldi	r24, 0x00	; 0
    61d2:	91 e0       	ldi	r25, 0x01	; 1
    61d4:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
	clear_buffer(buffer);
    61d8:	80 e0       	ldi	r24, 0x00	; 0
    61da:	91 e0       	ldi	r25, 0x01	; 1
    61dc:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    61e0:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    61e4:	0e 94 34 35 	call	0x6a68	; 0x6a68 <init_int>
	init_uart();							// Initialise UART
    61e8:	0e 94 e6 4d 	call	0x9bcc	; 0x9bcc <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    61ec:	0e 94 cb 29 	call	0x5396	; 0x5396 <CalibrateGyrosSlow>
    61f0:	81 11       	cpse	r24, r1
    61f2:	28 c0       	rjmp	.+80     	; 0x6244 <init+0x384>
	{
		clear_buffer(buffer);
    61f4:	80 e0       	ldi	r24, 0x00	; 0
    61f6:	91 e0       	ldi	r25, 0x01	; 1
    61f8:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    61fc:	29 e1       	ldi	r18, 0x19	; 25
    61fe:	30 e0       	ldi	r19, 0x00	; 0
    6200:	49 e1       	ldi	r20, 0x19	; 25
    6202:	50 e0       	ldi	r21, 0x00	; 0
    6204:	69 ee       	ldi	r22, 0xE9	; 233
    6206:	73 e0       	ldi	r23, 0x03	; 3
    6208:	8d e3       	ldi	r24, 0x3D	; 61
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		write_buffer(buffer);
    6210:	80 e0       	ldi	r24, 0x00	; 0
    6212:	91 e0       	ldi	r25, 0x01	; 1
    6214:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
    6218:	2f ef       	ldi	r18, 0xFF	; 255
    621a:	88 e0       	ldi	r24, 0x08	; 8
    621c:	9d e3       	ldi	r25, 0x3D	; 61
    621e:	21 50       	subi	r18, 0x01	; 1
    6220:	80 40       	sbci	r24, 0x00	; 0
    6222:	90 40       	sbci	r25, 0x00	; 0
    6224:	e1 f7       	brne	.-8      	; 0x621e <init+0x35e>
    6226:	00 c0       	rjmp	.+0      	; 0x6228 <init+0x368>
    6228:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    622a:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    622c:	28 e0       	ldi	r18, 0x08	; 8
    622e:	88 e1       	ldi	r24, 0x18	; 24
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	0f b6       	in	r0, 0x3f	; 63
    6234:	f8 94       	cli
    6236:	a8 95       	wdr
    6238:	80 93 60 00 	sts	0x0060, r24
    623c:	0f be       	out	0x3f, r0	; 63
    623e:	20 93 60 00 	sts	0x0060, r18
    6242:	ff cf       	rjmp	.-2      	; 0x6242 <init+0x382>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    6244:	0e 94 51 4e 	call	0x9ca2	; 0x9ca2 <GetVbat>
    6248:	90 93 2f 05 	sts	0x052F, r25
    624c:	80 93 2e 05 	sts	0x052E, r24
	UpdateLimits();							// Update travel and trigger limits
    6250:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    6254:	80 91 57 06 	lds	r24, 0x0657
    6258:	81 30       	cpi	r24, 0x01	; 1
    625a:	29 f4       	brne	.+10     	; 0x6266 <init+0x3a6>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    625c:	80 91 20 05 	lds	r24, 0x0520
    6260:	84 60       	ori	r24, 0x04	; 4
    6262:	80 93 20 05 	sts	0x0520, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    6266:	80 91 fd 07 	lds	r24, 0x07FD
    626a:	88 23       	and	r24, r24
    626c:	69 f0       	breq	.+26     	; 0x6288 <init+0x3c8>
	{
		RxGetChannels();
    626e:	0e 94 7c 4b 	call	0x96f8	; 0x96f8 <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    6272:	80 91 74 08 	lds	r24, 0x0874
    6276:	90 91 75 08 	lds	r25, 0x0875
    627a:	c3 97       	sbiw	r24, 0x33	; 51
    627c:	2c f0       	brlt	.+10     	; 0x6288 <init+0x3c8>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    627e:	80 91 20 05 	lds	r24, 0x0520
    6282:	81 60       	ori	r24, 0x01	; 1
    6284:	80 93 20 05 	sts	0x0520, r24
		}
	}

	// Reset IMU
	reset_IMU();
    6288:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    628c:	29 9a       	sbi	0x05, 1	; 5
    628e:	2f e9       	ldi	r18, 0x9F	; 159
    6290:	86 e8       	ldi	r24, 0x86	; 134
    6292:	91 e0       	ldi	r25, 0x01	; 1
    6294:	21 50       	subi	r18, 0x01	; 1
    6296:	80 40       	sbci	r24, 0x00	; 0
    6298:	90 40       	sbci	r25, 0x00	; 0
    629a:	e1 f7       	brne	.-8      	; 0x6294 <init+0x3d4>
    629c:	00 c0       	rjmp	.+0      	; 0x629e <init+0x3de>
    629e:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    62a0:	29 98       	cbi	0x05, 1	; 5

#ifdef ERROR_LOG	
	// Log reboot
	add_log(REBOOT);
    62a2:	81 e0       	ldi	r24, 0x01	; 1
#endif
} // init()
    62a4:	cf 91       	pop	r28
	_delay_ms(25);
	LVA = 0;

#ifdef ERROR_LOG	
	// Log reboot
	add_log(REBOOT);
    62a6:	0c 94 90 13 	jmp	0x2720	; 0x2720 <add_log>

000062aa <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    62aa:	1f 92       	push	r1
    62ac:	0f 92       	push	r0
    62ae:	0f b6       	in	r0, 0x3f	; 63
    62b0:	0f 92       	push	r0
    62b2:	11 24       	eor	r1, r1
    62b4:	8f 93       	push	r24
    62b6:	9f 93       	push	r25
	TMR0_counter++;
    62b8:	80 91 00 08 	lds	r24, 0x0800
    62bc:	90 91 01 08 	lds	r25, 0x0801
    62c0:	01 96       	adiw	r24, 0x01	; 1
    62c2:	90 93 01 08 	sts	0x0801, r25
    62c6:	80 93 00 08 	sts	0x0800, r24
}
    62ca:	9f 91       	pop	r25
    62cc:	8f 91       	pop	r24
    62ce:	0f 90       	pop	r0
    62d0:	0f be       	out	0x3f, r0	; 63
    62d2:	0f 90       	pop	r0
    62d4:	1f 90       	pop	r1
    62d6:	18 95       	reti

000062d8 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    62d8:	1f 92       	push	r1
    62da:	0f 92       	push	r0
    62dc:	0f b6       	in	r0, 0x3f	; 63
    62de:	0f 92       	push	r0
    62e0:	11 24       	eor	r1, r1
    62e2:	2f 93       	push	r18
    62e4:	3f 93       	push	r19
    62e6:	8f 93       	push	r24
    62e8:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    62ea:	80 91 17 08 	lds	r24, 0x0817
    62ee:	88 23       	and	r24, r24
    62f0:	19 f0       	breq	.+6      	; 0x62f8 <__vector_2+0x20>
    62f2:	81 e0       	ldi	r24, 0x01	; 1
    62f4:	80 93 18 08 	sts	0x0818, r24

	if (RX_ROLL)	// Rising
    62f8:	4b 9b       	sbis	0x09, 3	; 9
    62fa:	09 c0       	rjmp	.+18     	; 0x630e <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    62fc:	80 91 84 00 	lds	r24, 0x0084
    6300:	90 91 85 00 	lds	r25, 0x0085
    6304:	90 93 05 08 	sts	0x0805, r25
    6308:	80 93 04 08 	sts	0x0804, r24
    630c:	14 c0       	rjmp	.+40     	; 0x6336 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    630e:	80 91 84 00 	lds	r24, 0x0084
    6312:	90 91 85 00 	lds	r25, 0x0085
    6316:	20 91 04 08 	lds	r18, 0x0804
    631a:	30 91 05 08 	lds	r19, 0x0805
    631e:	82 1b       	sub	r24, r18
    6320:	93 0b       	sbc	r25, r19
    6322:	90 93 f0 07 	sts	0x07F0, r25
    6326:	80 93 ef 07 	sts	0x07EF, r24
		if (Config.PWM_Sync == AILERON) 
    632a:	80 91 f8 05 	lds	r24, 0x05F8
    632e:	81 30       	cpi	r24, 0x01	; 1
    6330:	11 f4       	brne	.+4      	; 0x6336 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    6332:	80 93 fd 07 	sts	0x07FD, r24
		}
	}
}
    6336:	9f 91       	pop	r25
    6338:	8f 91       	pop	r24
    633a:	3f 91       	pop	r19
    633c:	2f 91       	pop	r18
    633e:	0f 90       	pop	r0
    6340:	0f be       	out	0x3f, r0	; 63
    6342:	0f 90       	pop	r0
    6344:	1f 90       	pop	r1
    6346:	18 95       	reti

00006348 <__vector_1>:

ISR(INT0_vect)
{
    6348:	1f 92       	push	r1
    634a:	0f 92       	push	r0
    634c:	0f b6       	in	r0, 0x3f	; 63
    634e:	0f 92       	push	r0
    6350:	11 24       	eor	r1, r1
    6352:	2f 93       	push	r18
    6354:	3f 93       	push	r19
    6356:	8f 93       	push	r24
    6358:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    635a:	80 91 17 08 	lds	r24, 0x0817
    635e:	88 23       	and	r24, r24
    6360:	19 f0       	breq	.+6      	; 0x6368 <__vector_1+0x20>
    6362:	81 e0       	ldi	r24, 0x01	; 1
    6364:	80 93 18 08 	sts	0x0818, r24

	if (RX_PITCH)	// Rising 
    6368:	4a 9b       	sbis	0x09, 2	; 9
    636a:	09 c0       	rjmp	.+18     	; 0x637e <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    636c:	80 91 84 00 	lds	r24, 0x0084
    6370:	90 91 85 00 	lds	r25, 0x0085
    6374:	90 93 07 08 	sts	0x0807, r25
    6378:	80 93 06 08 	sts	0x0806, r24
    637c:	15 c0       	rjmp	.+42     	; 0x63a8 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    637e:	80 91 84 00 	lds	r24, 0x0084
    6382:	90 91 85 00 	lds	r25, 0x0085
    6386:	20 91 06 08 	lds	r18, 0x0806
    638a:	30 91 07 08 	lds	r19, 0x0807
    638e:	82 1b       	sub	r24, r18
    6390:	93 0b       	sbc	r25, r19
    6392:	90 93 f2 07 	sts	0x07F2, r25
    6396:	80 93 f1 07 	sts	0x07F1, r24
		if (Config.PWM_Sync == ELEVATOR) 
    639a:	80 91 f8 05 	lds	r24, 0x05F8
    639e:	82 30       	cpi	r24, 0x02	; 2
    63a0:	19 f4       	brne	.+6      	; 0x63a8 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    63a2:	81 e0       	ldi	r24, 0x01	; 1
    63a4:	80 93 fd 07 	sts	0x07FD, r24
		}
	}
}
    63a8:	9f 91       	pop	r25
    63aa:	8f 91       	pop	r24
    63ac:	3f 91       	pop	r19
    63ae:	2f 91       	pop	r18
    63b0:	0f 90       	pop	r0
    63b2:	0f be       	out	0x3f, r0	; 63
    63b4:	0f 90       	pop	r0
    63b6:	1f 90       	pop	r1
    63b8:	18 95       	reti

000063ba <__vector_7>:

ISR(PCINT3_vect)
{
    63ba:	1f 92       	push	r1
    63bc:	0f 92       	push	r0
    63be:	0f b6       	in	r0, 0x3f	; 63
    63c0:	0f 92       	push	r0
    63c2:	11 24       	eor	r1, r1
    63c4:	2f 93       	push	r18
    63c6:	3f 93       	push	r19
    63c8:	8f 93       	push	r24
    63ca:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    63cc:	80 91 17 08 	lds	r24, 0x0817
    63d0:	88 23       	and	r24, r24
    63d2:	19 f0       	breq	.+6      	; 0x63da <__vector_7+0x20>
    63d4:	81 e0       	ldi	r24, 0x01	; 1
    63d6:	80 93 18 08 	sts	0x0818, r24
		
	if (RX_COLL)	// Rising
    63da:	48 9b       	sbis	0x09, 0	; 9
    63dc:	09 c0       	rjmp	.+18     	; 0x63f0 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    63de:	80 91 84 00 	lds	r24, 0x0084
    63e2:	90 91 85 00 	lds	r25, 0x0085
    63e6:	90 93 03 08 	sts	0x0803, r25
    63ea:	80 93 02 08 	sts	0x0802, r24
    63ee:	15 c0       	rjmp	.+42     	; 0x641a <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    63f0:	80 91 84 00 	lds	r24, 0x0084
    63f4:	90 91 85 00 	lds	r25, 0x0085
    63f8:	20 91 02 08 	lds	r18, 0x0802
    63fc:	30 91 03 08 	lds	r19, 0x0803
    6400:	82 1b       	sub	r24, r18
    6402:	93 0b       	sbc	r25, r19
    6404:	90 93 ee 07 	sts	0x07EE, r25
    6408:	80 93 ed 07 	sts	0x07ED, r24
		if (Config.PWM_Sync == THROTTLE) 
    640c:	80 91 f8 05 	lds	r24, 0x05F8
    6410:	81 11       	cpse	r24, r1
    6412:	03 c0       	rjmp	.+6      	; 0x641a <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    6414:	81 e0       	ldi	r24, 0x01	; 1
    6416:	80 93 fd 07 	sts	0x07FD, r24
		}
	}
}
    641a:	9f 91       	pop	r25
    641c:	8f 91       	pop	r24
    641e:	3f 91       	pop	r19
    6420:	2f 91       	pop	r18
    6422:	0f 90       	pop	r0
    6424:	0f be       	out	0x3f, r0	; 63
    6426:	0f 90       	pop	r0
    6428:	1f 90       	pop	r1
    642a:	18 95       	reti

0000642c <__vector_5>:


ISR(PCINT1_vect)
{
    642c:	1f 92       	push	r1
    642e:	0f 92       	push	r0
    6430:	0f b6       	in	r0, 0x3f	; 63
    6432:	0f 92       	push	r0
    6434:	11 24       	eor	r1, r1
    6436:	2f 93       	push	r18
    6438:	3f 93       	push	r19
    643a:	8f 93       	push	r24
    643c:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    643e:	80 91 17 08 	lds	r24, 0x0817
    6442:	88 23       	and	r24, r24
    6444:	19 f0       	breq	.+6      	; 0x644c <__vector_5+0x20>
    6446:	81 e0       	ldi	r24, 0x01	; 1
    6448:	80 93 18 08 	sts	0x0818, r24

	if (RX_AUX)	// Rising
    644c:	18 9b       	sbis	0x03, 0	; 3
    644e:	09 c0       	rjmp	.+18     	; 0x6462 <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    6450:	80 91 84 00 	lds	r24, 0x0084
    6454:	90 91 85 00 	lds	r25, 0x0085
    6458:	90 93 0b 08 	sts	0x080B, r25
    645c:	80 93 0a 08 	sts	0x080A, r24
    6460:	15 c0       	rjmp	.+42     	; 0x648c <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    6462:	80 91 84 00 	lds	r24, 0x0084
    6466:	90 91 85 00 	lds	r25, 0x0085
    646a:	20 91 0a 08 	lds	r18, 0x080A
    646e:	30 91 0b 08 	lds	r19, 0x080B
    6472:	82 1b       	sub	r24, r18
    6474:	93 0b       	sbc	r25, r19
    6476:	90 93 f6 07 	sts	0x07F6, r25
    647a:	80 93 f5 07 	sts	0x07F5, r24
		if (Config.PWM_Sync == GEAR) 
    647e:	80 91 f8 05 	lds	r24, 0x05F8
    6482:	84 30       	cpi	r24, 0x04	; 4
    6484:	19 f4       	brne	.+6      	; 0x648c <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    6486:	81 e0       	ldi	r24, 0x01	; 1
    6488:	80 93 fd 07 	sts	0x07FD, r24
		}
	}
}
    648c:	9f 91       	pop	r25
    648e:	8f 91       	pop	r24
    6490:	3f 91       	pop	r19
    6492:	2f 91       	pop	r18
    6494:	0f 90       	pop	r0
    6496:	0f be       	out	0x3f, r0	; 63
    6498:	0f 90       	pop	r0
    649a:	1f 90       	pop	r1
    649c:	18 95       	reti

0000649e <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    649e:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    64a0:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    64a2:	80 91 84 00 	lds	r24, 0x0084
    64a6:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    64aa:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    64ac:	08 95       	ret

000064ae <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    64ae:	1f 92       	push	r1
    64b0:	0f 92       	push	r0
    64b2:	0f b6       	in	r0, 0x3f	; 63
    64b4:	0f 92       	push	r0
    64b6:	11 24       	eor	r1, r1
    64b8:	2f 93       	push	r18
    64ba:	3f 93       	push	r19
    64bc:	4f 93       	push	r20
    64be:	5f 93       	push	r21
    64c0:	6f 93       	push	r22
    64c2:	7f 93       	push	r23
    64c4:	8f 93       	push	r24
    64c6:	9f 93       	push	r25
    64c8:	af 93       	push	r26
    64ca:	bf 93       	push	r27
    64cc:	ef 93       	push	r30
    64ce:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    64d0:	80 91 17 08 	lds	r24, 0x0817
    64d4:	88 23       	and	r24, r24
    64d6:	19 f0       	breq	.+6      	; 0x64de <__vector_3+0x30>
    64d8:	81 e0       	ldi	r24, 0x01	; 1
    64da:	80 93 18 08 	sts	0x0818, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    64de:	0e 94 4f 32 	call	0x649e	; 0x649e <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    64e2:	20 91 f6 05 	lds	r18, 0x05F6
    64e6:	22 23       	and	r18, r18
    64e8:	d1 f0       	breq	.+52     	; 0x651e <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    64ea:	1a 9b       	sbis	0x03, 2	; 3
    64ec:	05 c0       	rjmp	.+10     	; 0x64f8 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    64ee:	90 93 09 08 	sts	0x0809, r25
    64f2:	80 93 08 08 	sts	0x0808, r24
    64f6:	86 c0       	rjmp	.+268    	; 0x6604 <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    64f8:	20 91 08 08 	lds	r18, 0x0808
    64fc:	30 91 09 08 	lds	r19, 0x0809
    6500:	82 1b       	sub	r24, r18
    6502:	93 0b       	sbc	r25, r19
    6504:	90 93 f4 07 	sts	0x07F4, r25
    6508:	80 93 f3 07 	sts	0x07F3, r24
			if (Config.PWM_Sync == RUDDER) 
    650c:	80 91 f8 05 	lds	r24, 0x05F8
    6510:	83 30       	cpi	r24, 0x03	; 3
    6512:	09 f0       	breq	.+2      	; 0x6516 <__vector_3+0x68>
    6514:	77 c0       	rjmp	.+238    	; 0x6604 <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    6516:	81 e0       	ldi	r24, 0x01	; 1
    6518:	80 93 fd 07 	sts	0x07FD, r24
    651c:	73 c0       	rjmp	.+230    	; 0x6604 <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    651e:	1a 99       	sbic	0x03, 2	; 3
    6520:	71 c0       	rjmp	.+226    	; 0x6604 <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    6522:	20 91 15 08 	lds	r18, 0x0815
    6526:	30 91 16 08 	lds	r19, 0x0816
    652a:	ac 01       	movw	r20, r24
    652c:	42 1b       	sub	r20, r18
    652e:	53 0b       	sbc	r21, r19
    6530:	9a 01       	movw	r18, r20
    6532:	2f 35       	cpi	r18, 0x5F	; 95
    6534:	3a 41       	sbci	r19, 0x1A	; 26
    6536:	58 f4       	brcc	.+22     	; 0x654e <__vector_3+0xa0>
    6538:	20 91 15 08 	lds	r18, 0x0815
    653c:	30 91 16 08 	lds	r19, 0x0816
    6540:	ac 01       	movw	r20, r24
    6542:	42 1b       	sub	r20, r18
    6544:	53 0b       	sbc	r21, r19
    6546:	9a 01       	movw	r18, r20
    6548:	2e 3e       	cpi	r18, 0xEE	; 238
    654a:	32 40       	sbci	r19, 0x02	; 2
    654c:	10 f4       	brcc	.+4      	; 0x6552 <__vector_3+0xa4>
		{
			ch_num = 0;
    654e:	10 92 14 08 	sts	0x0814, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    6552:	90 93 16 08 	sts	0x0816, r25
    6556:	80 93 15 08 	sts	0x0815, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    655a:	e0 91 14 08 	lds	r30, 0x0814
    655e:	f0 e0       	ldi	r31, 0x00	; 0
    6560:	e3 53       	subi	r30, 0x33	; 51
    6562:	fa 4f       	sbci	r31, 0xFA	; 250
    6564:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    6566:	20 91 14 08 	lds	r18, 0x0814
    656a:	22 23       	and	r18, r18
    656c:	39 f0       	breq	.+14     	; 0x657c <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    656e:	a0 91 14 08 	lds	r26, 0x0814
    6572:	b0 e0       	ldi	r27, 0x00	; 0
    6574:	a3 53       	subi	r26, 0x33	; 51
    6576:	ba 4f       	sbci	r27, 0xFA	; 250
    6578:	2c 91       	ld	r18, X
    657a:	01 c0       	rjmp	.+2      	; 0x657e <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    657c:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    657e:	30 91 14 08 	lds	r19, 0x0814
    6582:	38 30       	cpi	r19, 0x08	; 8
    6584:	38 f4       	brcc	.+14     	; 0x6594 <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    6586:	f0 e0       	ldi	r31, 0x00	; 0
    6588:	ee 0f       	add	r30, r30
    658a:	ff 1f       	adc	r31, r31
    658c:	ee 5f       	subi	r30, 0xFE	; 254
    658e:	f7 4f       	sbci	r31, 0xF7	; 247
    6590:	91 83       	std	Z+1, r25	; 0x01
    6592:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    6594:	30 91 14 08 	lds	r19, 0x0814
    6598:	33 23       	and	r19, r19
    659a:	99 f0       	breq	.+38     	; 0x65c2 <__vector_3+0x114>
    659c:	30 91 14 08 	lds	r19, 0x0814
    65a0:	39 30       	cpi	r19, 0x09	; 9
    65a2:	78 f4       	brcc	.+30     	; 0x65c2 <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    65a4:	30 e0       	ldi	r19, 0x00	; 0
    65a6:	22 0f       	add	r18, r18
    65a8:	33 1f       	adc	r19, r19
    65aa:	f9 01       	movw	r30, r18
    65ac:	ee 5f       	subi	r30, 0xFE	; 254
    65ae:	f7 4f       	sbci	r31, 0xF7	; 247
    65b0:	40 81       	ld	r20, Z
    65b2:	51 81       	ldd	r21, Z+1	; 0x01
    65b4:	84 1b       	sub	r24, r20
    65b6:	95 0b       	sbc	r25, r21
    65b8:	f9 01       	movw	r30, r18
    65ba:	e3 51       	subi	r30, 0x13	; 19
    65bc:	f8 4f       	sbci	r31, 0xF8	; 248
    65be:	91 83       	std	Z+1, r25	; 0x01
    65c0:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    65c2:	80 91 14 08 	lds	r24, 0x0814
    65c6:	8f 5f       	subi	r24, 0xFF	; 255
    65c8:	80 93 14 08 	sts	0x0814, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    65cc:	90 91 14 08 	lds	r25, 0x0814
    65d0:	80 91 fe 07 	lds	r24, 0x07FE
    65d4:	89 17       	cp	r24, r25
    65d6:	28 f4       	brcc	.+10     	; 0x65e2 <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    65d8:	80 91 14 08 	lds	r24, 0x0814
    65dc:	80 93 fe 07 	sts	0x07FE, r24
    65e0:	09 c0       	rjmp	.+18     	; 0x65f4 <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    65e2:	90 91 14 08 	lds	r25, 0x0814
    65e6:	80 91 fe 07 	lds	r24, 0x07FE
    65ea:	98 13       	cpse	r25, r24
    65ec:	03 c0       	rjmp	.+6      	; 0x65f4 <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    65ee:	81 e0       	ldi	r24, 0x01	; 1
    65f0:	80 93 fd 07 	sts	0x07FD, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    65f4:	80 91 19 05 	lds	r24, 0x0519
    65f8:	88 23       	and	r24, r24
    65fa:	21 f0       	breq	.+8      	; 0x6604 <__vector_3+0x156>
		{
			max_chan = 0;
    65fc:	10 92 fe 07 	sts	0x07FE, r1
			Overdue = false;
    6600:	10 92 19 05 	sts	0x0519, r1
		}
	}
} // ISR(INT2_vect)
    6604:	ff 91       	pop	r31
    6606:	ef 91       	pop	r30
    6608:	bf 91       	pop	r27
    660a:	af 91       	pop	r26
    660c:	9f 91       	pop	r25
    660e:	8f 91       	pop	r24
    6610:	7f 91       	pop	r23
    6612:	6f 91       	pop	r22
    6614:	5f 91       	pop	r21
    6616:	4f 91       	pop	r20
    6618:	3f 91       	pop	r19
    661a:	2f 91       	pop	r18
    661c:	0f 90       	pop	r0
    661e:	0f be       	out	0x3f, r0	; 63
    6620:	0f 90       	pop	r0
    6622:	1f 90       	pop	r1
    6624:	18 95       	reti

00006626 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    6626:	1f 92       	push	r1
    6628:	0f 92       	push	r0
    662a:	0f b6       	in	r0, 0x3f	; 63
    662c:	0f 92       	push	r0
    662e:	11 24       	eor	r1, r1
    6630:	2f 93       	push	r18
    6632:	3f 93       	push	r19
    6634:	4f 93       	push	r20
    6636:	5f 93       	push	r21
    6638:	6f 93       	push	r22
    663a:	7f 93       	push	r23
    663c:	8f 93       	push	r24
    663e:	9f 93       	push	r25
    6640:	af 93       	push	r26
    6642:	bf 93       	push	r27
    6644:	cf 93       	push	r28
    6646:	ef 93       	push	r30
    6648:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    664a:	80 91 17 08 	lds	r24, 0x0817
    664e:	88 23       	and	r24, r24
    6650:	19 f0       	breq	.+6      	; 0x6658 <__vector_20+0x32>
    6652:	81 e0       	ldi	r24, 0x01	; 1
    6654:	80 93 18 08 	sts	0x0818, r24

	// Read error flags first
	temp =  UCSR0A;
    6658:	80 91 c0 00 	lds	r24, 0x00C0

	// Check Framing error, Parity error bits
	if (temp & ((1<<FE0)|(1<<UPE0)))
    665c:	98 2f       	mov	r25, r24
    665e:	94 71       	andi	r25, 0x14	; 20
    6660:	21 f4       	brne	.+8      	; 0x666a <__vector_20+0x44>
		// Read byte to remove from buffer
		temp = UDR0;
	}

	// Check all for Data overrun
	else if (temp & (1<<DOR0))
    6662:	83 ff       	sbrs	r24, 3
    6664:	05 c0       	rjmp	.+10     	; 0x6670 <__vector_20+0x4a>
	{
		// Read byte to remove from buffer
		temp = UDR0;
    6666:	80 91 c6 00 	lds	r24, 0x00C6
		// Read byte to remove from buffer
		temp = UDR0;
    666a:	80 91 c6 00 	lds	r24, 0x00C6
    666e:	d7 c1       	rjmp	.+942    	; 0x6a1e <__vector_20+0x3f8>

	// Valid data
	else
	{
		// Read byte first
		temp = UDR0;
    6670:	c0 91 c6 00 	lds	r28, 0x00C6

		// Save current time stamp
		Save_TCNT1 = TIM16_ReadTCNT1();
    6674:	0e 94 4f 32 	call	0x649e	; 0x649e <TIM16_ReadTCNT1>
	
		// Work out frame rate properly
		// Note that CurrentPeriod cannot be larger than 26.2ms
	
		//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
		if (Save_TCNT1 < PPMSyncStart)
    6678:	40 91 15 08 	lds	r20, 0x0815
    667c:	50 91 16 08 	lds	r21, 0x0816
		{
			CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
		}
		else
		{
			CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    6680:	40 91 15 08 	lds	r20, 0x0815
    6684:	50 91 16 08 	lds	r21, 0x0816
    6688:	9c 01       	movw	r18, r24
    668a:	24 1b       	sub	r18, r20
    668c:	35 0b       	sbc	r19, r21
    668e:	a9 01       	movw	r20, r18
		}

		// Handle start of new packet
		if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    6690:	45 3c       	cpi	r20, 0xC5	; 197
    6692:	39 e0       	ldi	r19, 0x09	; 9
    6694:	53 07       	cpc	r21, r19
    6696:	90 f0       	brcs	.+36     	; 0x66bc <__vector_20+0x96>
		{
			// Reset variables
			rcindex = 0;
    6698:	10 92 ec 07 	sts	0x07EC, r1
			bytecount = 0;
    669c:	10 92 ff 07 	sts	0x07FF, r1
			ch_num = 0;
    66a0:	10 92 14 08 	sts	0x0814, r1
			checksum = 0;
    66a4:	10 92 1a 08 	sts	0x081A, r1
    66a8:	10 92 19 08 	sts	0x0819, r1
			chanmask16 = 0;
    66ac:	10 92 13 08 	sts	0x0813, r1
    66b0:	10 92 12 08 	sts	0x0812, r1

			// Save frame rate to global
			FrameRate = CurrentPeriod;
    66b4:	50 93 1c 08 	sts	0x081C, r21
    66b8:	40 93 1b 08 	sts	0x081B, r20
		}

		// Timestamp this interrupt
		PPMSyncStart = Save_TCNT1;
    66bc:	90 93 16 08 	sts	0x0816, r25
    66c0:	80 93 15 08 	sts	0x0815, r24
	
		// Put received byte in buffer if space available
		if (rcindex < SBUFFER_SIZE)
    66c4:	80 91 ec 07 	lds	r24, 0x07EC
    66c8:	86 32       	cpi	r24, 0x26	; 38
    66ca:	50 f4       	brcc	.+20     	; 0x66e0 <__vector_20+0xba>
		{
			sBuffer[rcindex++] = temp;			
    66cc:	e0 91 ec 07 	lds	r30, 0x07EC
    66d0:	81 e0       	ldi	r24, 0x01	; 1
    66d2:	8e 0f       	add	r24, r30
    66d4:	80 93 ec 07 	sts	0x07EC, r24
    66d8:	f0 e0       	ldi	r31, 0x00	; 0
    66da:	e0 5b       	subi	r30, 0xB0	; 176
    66dc:	fa 4f       	sbci	r31, 0xFA	; 250
    66de:	c0 83       	st	Z, r28
		//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
		//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
		//*
		//************************************************************

		if (Config.RxMode == XTREME)
    66e0:	80 91 f6 05 	lds	r24, 0x05F6
    66e4:	84 30       	cpi	r24, 0x04	; 4
    66e6:	09 f0       	breq	.+2      	; 0x66ea <__vector_20+0xc4>
    66e8:	b3 c0       	rjmp	.+358    	; 0x6850 <__vector_20+0x22a>
		{
			// Look at flag byte to see if the data is meant for us
			if (bytecount == 0)
    66ea:	80 91 ff 07 	lds	r24, 0x07FF
    66ee:	81 11       	cpse	r24, r1
    66f0:	0d c0       	rjmp	.+26     	; 0x670c <__vector_20+0xe6>
			{
				// Check top 3 bits for channel bank
				// Trash checksum if not clear
				if (temp & 0xE0)
    66f2:	8c 2f       	mov	r24, r28
    66f4:	80 7e       	andi	r24, 0xE0	; 224
    66f6:	51 f0       	breq	.+20     	; 0x670c <__vector_20+0xe6>
				{
					checksum +=	0x55;
    66f8:	80 91 19 08 	lds	r24, 0x0819
    66fc:	90 91 1a 08 	lds	r25, 0x081A
    6700:	8b 5a       	subi	r24, 0xAB	; 171
    6702:	9f 4f       	sbci	r25, 0xFF	; 255
    6704:	90 93 1a 08 	sts	0x081A, r25
    6708:	80 93 19 08 	sts	0x0819, r24
				}
			}

			// Get MSB of mask byte
			if (bytecount == 2)
    670c:	80 91 ff 07 	lds	r24, 0x07FF
    6710:	2c 2f       	mov	r18, r28
    6712:	30 e0       	ldi	r19, 0x00	; 0
    6714:	82 30       	cpi	r24, 0x02	; 2
    6716:	51 f4       	brne	.+20     	; 0x672c <__vector_20+0x106>
			{
				chanmask16 = 0;
    6718:	10 92 13 08 	sts	0x0813, r1
    671c:	10 92 12 08 	sts	0x0812, r1
				chanmask16 = temp << 8;		// High byte of Mask
    6720:	92 2f       	mov	r25, r18
    6722:	88 27       	eor	r24, r24
    6724:	90 93 13 08 	sts	0x0813, r25
    6728:	80 93 12 08 	sts	0x0812, r24
			}

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
    672c:	80 91 ff 07 	lds	r24, 0x07FF
    6730:	83 30       	cpi	r24, 0x03	; 3
    6732:	b9 f0       	breq	.+46     	; 0x6762 <__vector_20+0x13c>
					temp16 &= temp16 - 1;
				}
			}

			// Add up checksum up until final packet
			if (bytecount < ((ch_num << 1) + 4))
    6734:	80 91 14 08 	lds	r24, 0x0814
    6738:	40 91 ff 07 	lds	r20, 0x07FF
    673c:	90 e0       	ldi	r25, 0x00	; 0
    673e:	88 0f       	add	r24, r24
    6740:	99 1f       	adc	r25, r25
    6742:	03 96       	adiw	r24, 0x03	; 3
    6744:	50 e0       	ldi	r21, 0x00	; 0
    6746:	84 17       	cp	r24, r20
    6748:	95 07       	cpc	r25, r21
    674a:	44 f1       	brlt	.+80     	; 0x679c <__vector_20+0x176>
			{
				checksum +=	temp;
    674c:	80 91 19 08 	lds	r24, 0x0819
    6750:	90 91 1a 08 	lds	r25, 0x081A
    6754:	82 0f       	add	r24, r18
    6756:	93 1f       	adc	r25, r19
    6758:	90 93 1a 08 	sts	0x081A, r25
    675c:	80 93 19 08 	sts	0x0819, r24
    6760:	59 c1       	rjmp	.+690    	; 0x6a14 <__vector_20+0x3ee>

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
			{
				chanmask16 += (uint16_t)temp;	// Low byte of Mask
    6762:	80 91 12 08 	lds	r24, 0x0812
    6766:	90 91 13 08 	lds	r25, 0x0813
    676a:	82 0f       	add	r24, r18
    676c:	93 1f       	adc	r25, r19
    676e:	90 93 13 08 	sts	0x0813, r25
    6772:	80 93 12 08 	sts	0x0812, r24
				temp16 = chanmask16;			// Need to keep a copy od chanmask16
    6776:	80 91 12 08 	lds	r24, 0x0812
    677a:	90 91 13 08 	lds	r25, 0x0813

				// Count bits set (number of active channels)				 
				for (ch_num = 0; temp16; ch_num++)
    677e:	10 92 14 08 	sts	0x0814, r1
    6782:	00 97       	sbiw	r24, 0x00	; 0
    6784:	b9 f2       	breq	.-82     	; 0x6734 <__vector_20+0x10e>
				{
					temp16 &= temp16 - 1;
    6786:	ac 01       	movw	r20, r24
    6788:	41 50       	subi	r20, 0x01	; 1
    678a:	51 09       	sbc	r21, r1
    678c:	84 23       	and	r24, r20
    678e:	95 23       	and	r25, r21
			{
				chanmask16 += (uint16_t)temp;	// Low byte of Mask
				temp16 = chanmask16;			// Need to keep a copy od chanmask16

				// Count bits set (number of active channels)				 
				for (ch_num = 0; temp16; ch_num++)
    6790:	40 91 14 08 	lds	r20, 0x0814
    6794:	4f 5f       	subi	r20, 0xFF	; 255
    6796:	40 93 14 08 	sts	0x0814, r20
    679a:	f3 cf       	rjmp	.-26     	; 0x6782 <__vector_20+0x15c>
	
			// Process data when all packets received
			else
			{
				// Check checksum 
				checksum &= 0xff;
    679c:	80 91 19 08 	lds	r24, 0x0819
    67a0:	90 91 1a 08 	lds	r25, 0x081A
    67a4:	99 27       	eor	r25, r25
    67a6:	90 93 1a 08 	sts	0x081A, r25
    67aa:	80 93 19 08 	sts	0x0819, r24

				// Ignore packet if checksum wrong
				if (checksum != temp) // temp holds the transmitted checksum byte
    67ae:	80 91 19 08 	lds	r24, 0x0819
    67b2:	90 91 1a 08 	lds	r25, 0x081A
    67b6:	82 17       	cp	r24, r18
    67b8:	93 07       	cpc	r25, r19
    67ba:	49 f0       	breq	.+18     	; 0x67ce <__vector_20+0x1a8>
				{
					Interrupted = false;
    67bc:	10 92 fd 07 	sts	0x07FD, r1
					ch_num = 0;
    67c0:	10 92 14 08 	sts	0x0814, r1
					checksum = 0;
    67c4:	10 92 1a 08 	sts	0x081A, r1
    67c8:	10 92 19 08 	sts	0x0819, r1
    67cc:	23 c1       	rjmp	.+582    	; 0x6a14 <__vector_20+0x3ee>
				}
				else
				{
					// RC sync established
					Interrupted = true;	
    67ce:	81 e0       	ldi	r24, 0x01	; 1
    67d0:	80 93 fd 07 	sts	0x07FD, r24
    67d4:	80 e0       	ldi	r24, 0x00	; 0
    67d6:	90 e0       	ldi	r25, 0x00	; 0

					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5
    67d8:	a4 e0       	ldi	r26, 0x04	; 4
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    67da:	61 e0       	ldi	r22, 0x01	; 1
    67dc:	70 e0       	ldi	r23, 0x00	; 0
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    67de:	ba e0       	ldi	r27, 0x0A	; 10
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    67e0:	40 91 12 08 	lds	r20, 0x0812
    67e4:	50 91 13 08 	lds	r21, 0x0813
    67e8:	9b 01       	movw	r18, r22
    67ea:	08 2e       	mov	r0, r24
    67ec:	02 c0       	rjmp	.+4      	; 0x67f2 <__vector_20+0x1cc>
    67ee:	22 0f       	add	r18, r18
    67f0:	33 1f       	adc	r19, r19
    67f2:	0a 94       	dec	r0
    67f4:	e2 f7       	brpl	.-8      	; 0x67ee <__vector_20+0x1c8>
    67f6:	24 23       	and	r18, r20
    67f8:	35 23       	and	r19, r21
    67fa:	23 2b       	or	r18, r19
    67fc:	21 f1       	breq	.+72     	; 0x6846 <__vector_20+0x220>
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    67fe:	ea 2f       	mov	r30, r26
    6800:	f0 e0       	ldi	r31, 0x00	; 0
    6802:	e0 5b       	subi	r30, 0xB0	; 176
    6804:	fa 4f       	sbci	r31, 0xFA	; 250
    6806:	40 81       	ld	r20, Z
    6808:	21 81       	ldd	r18, Z+1	; 0x01

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
    680a:	88 30       	cpi	r24, 0x08	; 8
    680c:	c8 f4       	brcc	.+50     	; 0x6840 <__vector_20+0x21a>
    680e:	fc 01       	movw	r30, r24
    6810:	e3 53       	subi	r30, 0x33	; 51
    6812:	fa 4f       	sbci	r31, 0xFA	; 250
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    6814:	e1 81       	ldd	r30, Z+1	; 0x01
    6816:	f0 e0       	ldi	r31, 0x00	; 0
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    6818:	50 e0       	ldi	r21, 0x00	; 0
    681a:	54 2f       	mov	r21, r20
    681c:	44 27       	eor	r20, r20
    681e:	42 0f       	add	r20, r18
    6820:	51 1d       	adc	r21, r1

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    6822:	b4 9f       	mul	r27, r20
    6824:	90 01       	movw	r18, r0
    6826:	b5 9f       	mul	r27, r21
    6828:	30 0d       	add	r19, r0
    682a:	11 24       	eor	r1, r1
    682c:	36 95       	lsr	r19
    682e:	27 95       	ror	r18
    6830:	36 95       	lsr	r19
    6832:	27 95       	ror	r18
    6834:	ee 0f       	add	r30, r30
    6836:	ff 1f       	adc	r31, r31
    6838:	e3 51       	subi	r30, 0x13	; 19
    683a:	f8 4f       	sbci	r31, 0xF8	; 248
    683c:	31 83       	std	Z+1, r19	; 0x01
    683e:	20 83       	st	Z, r18
							} 		

							// Within the bounds of the buffer
							if (sindex < SBUFFER_SIZE)
    6840:	a6 32       	cpi	r26, 0x26	; 38
    6842:	08 f4       	brcc	.+2      	; 0x6846 <__vector_20+0x220>
							{
								sindex += 2;
    6844:	ae 5f       	subi	r26, 0xFE	; 254
    6846:	01 96       	adiw	r24, 0x01	; 1
					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5

					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
    6848:	80 31       	cpi	r24, 0x10	; 16
    684a:	91 05       	cpc	r25, r1
    684c:	49 f6       	brne	.-110    	; 0x67e0 <__vector_20+0x1ba>
    684e:	e2 c0       	rjmp	.+452    	; 0x6a14 <__vector_20+0x3ee>
		//* 1824	= 2020us
		//* 2047 	= 2160us
		//*
		//************************************************************

		if (Config.RxMode == SBUS)
    6850:	82 30       	cpi	r24, 0x02	; 2
    6852:	09 f0       	breq	.+2      	; 0x6856 <__vector_20+0x230>
    6854:	6b c0       	rjmp	.+214    	; 0x692c <__vector_20+0x306>
		{
			// Flag that packet has completed
			// End bytes can be 00, 04, 14, 24, 34 and possibly 08 for FASSTest 12-channel
			//if ((bytecount == 24) && ((temp == 0x00) || (temp == 0x04) || (temp == 0x14) || (temp == 0x24) || (temp == 0x34) || (temp == 0x08)))
			if (bytecount == 24)
    6856:	80 91 ff 07 	lds	r24, 0x07FF
    685a:	88 31       	cpi	r24, 0x18	; 24
    685c:	09 f0       	breq	.+2      	; 0x6860 <__vector_20+0x23a>
    685e:	da c0       	rjmp	.+436    	; 0x6a14 <__vector_20+0x3ee>
			{
				// If frame lost, ignore packet
				if ((sBuffer[23] & 0x20) == 0)
    6860:	80 91 67 05 	lds	r24, 0x0567
    6864:	85 fd       	sbrc	r24, 5
    6866:	d6 c0       	rjmp	.+428    	; 0x6a14 <__vector_20+0x3ee>
				{
					// RC sync established
					Interrupted = true;
    6868:	81 e0       	ldi	r24, 0x01	; 1
    686a:	80 93 fd 07 	sts	0x07FD, r24
    686e:	80 e0       	ldi	r24, 0x00	; 0
    6870:	90 e0       	ldi	r25, 0x00	; 0

					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						RxChannel[j] = 0;
    6872:	fc 01       	movw	r30, r24
    6874:	ee 0f       	add	r30, r30
    6876:	ff 1f       	adc	r31, r31
    6878:	e3 51       	subi	r30, 0x13	; 19
    687a:	f8 4f       	sbci	r31, 0xF8	; 248
    687c:	11 82       	std	Z+1, r1	; 0x01
    687e:	10 82       	st	Z, r1
    6880:	01 96       	adiw	r24, 0x01	; 1
				{
					// RC sync established
					Interrupted = true;

					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    6882:	88 30       	cpi	r24, 0x08	; 8
    6884:	91 05       	cpc	r25, r1
    6886:	a9 f7       	brne	.-22     	; 0x6872 <__vector_20+0x24c>
    6888:	a8 e5       	ldi	r26, 0x58	; 88
    688a:	70 e0       	ldi	r23, 0x00	; 0
    688c:	c0 e0       	ldi	r28, 0x00	; 0
    688e:	60 e0       	ldi	r22, 0x00	; 0
    6890:	b1 e0       	ldi	r27, 0x01	; 1
					for (j = 0; j < 88; j++)
					{
						if (sBuffer[sindex] & (1<<chan_mask))
						{
							// Place the RC data into the correct channel order for the transmitted system
							RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    6892:	21 e0       	ldi	r18, 0x01	; 1
    6894:	30 e0       	ldi	r19, 0x00	; 0

					// Deconstruct S-Bus data
					// 8 channels * 11 bits = 88 bits
					for (j = 0; j < 88; j++)
					{
						if (sBuffer[sindex] & (1<<chan_mask))
    6896:	eb 2f       	mov	r30, r27
    6898:	f0 e0       	ldi	r31, 0x00	; 0
    689a:	e0 5b       	subi	r30, 0xB0	; 176
    689c:	fa 4f       	sbci	r31, 0xFA	; 250
    689e:	80 81       	ld	r24, Z
    68a0:	90 e0       	ldi	r25, 0x00	; 0
    68a2:	06 2e       	mov	r0, r22
    68a4:	02 c0       	rjmp	.+4      	; 0x68aa <__vector_20+0x284>
    68a6:	95 95       	asr	r25
    68a8:	87 95       	ror	r24
    68aa:	0a 94       	dec	r0
    68ac:	e2 f7       	brpl	.-8      	; 0x68a6 <__vector_20+0x280>
    68ae:	80 ff       	sbrs	r24, 0
    68b0:	17 c0       	rjmp	.+46     	; 0x68e0 <__vector_20+0x2ba>
						{
							// Place the RC data into the correct channel order for the transmitted system
							RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    68b2:	ec 2f       	mov	r30, r28
    68b4:	f0 e0       	ldi	r31, 0x00	; 0
    68b6:	e3 53       	subi	r30, 0x33	; 51
    68b8:	fa 4f       	sbci	r31, 0xFA	; 250
    68ba:	e1 81       	ldd	r30, Z+1	; 0x01
    68bc:	f0 e0       	ldi	r31, 0x00	; 0
    68be:	ee 0f       	add	r30, r30
    68c0:	ff 1f       	adc	r31, r31
    68c2:	e3 51       	subi	r30, 0x13	; 19
    68c4:	f8 4f       	sbci	r31, 0xF8	; 248
    68c6:	80 81       	ld	r24, Z
    68c8:	91 81       	ldd	r25, Z+1	; 0x01
    68ca:	a9 01       	movw	r20, r18
    68cc:	07 2e       	mov	r0, r23
    68ce:	02 c0       	rjmp	.+4      	; 0x68d4 <__vector_20+0x2ae>
    68d0:	44 0f       	add	r20, r20
    68d2:	55 1f       	adc	r21, r21
    68d4:	0a 94       	dec	r0
    68d6:	e2 f7       	brpl	.-8      	; 0x68d0 <__vector_20+0x2aa>
    68d8:	84 2b       	or	r24, r20
    68da:	95 2b       	or	r25, r21
    68dc:	91 83       	std	Z+1, r25	; 0x01
    68de:	80 83       	st	Z, r24
						}

						chan_mask++;
    68e0:	6f 5f       	subi	r22, 0xFF	; 255
						data_mask++;
    68e2:	7f 5f       	subi	r23, 0xFF	; 255

						// If we have done 8 bits, move to next byte in buffer
						if (chan_mask == 8)
    68e4:	68 30       	cpi	r22, 0x08	; 8
    68e6:	11 f4       	brne	.+4      	; 0x68ec <__vector_20+0x2c6>
						{
							chan_mask =0;
							sindex++;
    68e8:	bf 5f       	subi	r27, 0xFF	; 255
						data_mask++;

						// If we have done 8 bits, move to next byte in buffer
						if (chan_mask == 8)
						{
							chan_mask =0;
    68ea:	60 e0       	ldi	r22, 0x00	; 0
							sindex++;
						}

						// If we have reconstructed all 11 bits of one channel's data (2047)
						// increment the channel number
						if (data_mask == 11)
    68ec:	7b 30       	cpi	r23, 0x0B	; 11
    68ee:	11 f4       	brne	.+4      	; 0x68f4 <__vector_20+0x2ce>
						{
							data_mask =0;
							chan_shift++;
    68f0:	cf 5f       	subi	r28, 0xFF	; 255

						// If we have reconstructed all 11 bits of one channel's data (2047)
						// increment the channel number
						if (data_mask == 11)
						{
							data_mask =0;
    68f2:	70 e0       	ldi	r23, 0x00	; 0
    68f4:	a1 50       	subi	r26, 0x01	; 1
					// Start from second byte
					sindex = 1;

					// Deconstruct S-Bus data
					// 8 channels * 11 bits = 88 bits
					for (j = 0; j < 88; j++)
    68f6:	79 f6       	brne	.-98     	; 0x6896 <__vector_20+0x270>
    68f8:	80 e0       	ldi	r24, 0x00	; 0
    68fa:	90 e0       	ldi	r25, 0x00	; 0

					// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Subtract Futaba offset
						itemp16 = RxChannel[j] - 1024;
    68fc:	fc 01       	movw	r30, r24
    68fe:	ee 0f       	add	r30, r30
    6900:	ff 1f       	adc	r31, r31
    6902:	e3 51       	subi	r30, 0x13	; 19
    6904:	f8 4f       	sbci	r31, 0xF8	; 248
    6906:	40 81       	ld	r20, Z
    6908:	51 81       	ldd	r21, Z+1	; 0x01
    690a:	54 50       	subi	r21, 0x04	; 4
						
						// Expand into OpenAero2 units x1.25 (1.25)	(1000/800)
						itemp16 = itemp16 + (itemp16 >> 2);
    690c:	9a 01       	movw	r18, r20
    690e:	35 95       	asr	r19
    6910:	27 95       	ror	r18
    6912:	35 95       	asr	r19
    6914:	27 95       	ror	r18
    6916:	24 0f       	add	r18, r20
    6918:	35 1f       	adc	r19, r21

						// Add back in OpenAero2 offset
						RxChannel[j] = itemp16 + 3750;		
    691a:	2a 55       	subi	r18, 0x5A	; 90
    691c:	31 4f       	sbci	r19, 0xF1	; 241
    691e:	31 83       	std	Z+1, r19	; 0x01
    6920:	20 83       	st	Z, r18
    6922:	01 96       	adiw	r24, 0x01	; 1
							chan_shift++;
						}
					}

					// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    6924:	88 30       	cpi	r24, 0x08	; 8
    6926:	91 05       	cpc	r25, r1
    6928:	49 f7       	brne	.-46     	; 0x68fc <__vector_20+0x2d6>
    692a:	74 c0       	rjmp	.+232    	; 0x6a14 <__vector_20+0x3ee>
		//* 2047 	= 2100us
		//*
		//************************************************************

		// Handle Spektrum format
		if (Config.RxMode == SPEKTRUM)
    692c:	83 30       	cpi	r24, 0x03	; 3
    692e:	09 f0       	breq	.+2      	; 0x6932 <__vector_20+0x30c>
    6930:	71 c0       	rjmp	.+226    	; 0x6a14 <__vector_20+0x3ee>
		{
			// Process data when all packets received
			if (bytecount == 15)
    6932:	80 91 ff 07 	lds	r24, 0x07FF
    6936:	8f 30       	cpi	r24, 0x0F	; 15
    6938:	09 f0       	breq	.+2      	; 0x693c <__vector_20+0x316>
    693a:	6c c0       	rjmp	.+216    	; 0x6a14 <__vector_20+0x3ee>
			{
				// Just stick the last byte into the buffer manually...(hides)
				sBuffer[15] = temp;
    693c:	c0 93 5f 05 	sts	0x055F, r28

				// Set start of channel data per format
				sindex = 2; // Channel data from byte 3

				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    6940:	80 91 51 05 	lds	r24, 0x0551
    6944:	84 ff       	sbrs	r24, 4
    6946:	04 c0       	rjmp	.+8      	; 0x6950 <__vector_20+0x32a>
				{
					chan_mask = 0x78;	// 11 bit (2048)
					data_mask = 0x07;
    6948:	c7 e0       	ldi	r28, 0x07	; 7
					chan_shift = 0x03;
    694a:	63 e0       	ldi	r22, 0x03	; 3
				sindex = 2; // Channel data from byte 3

				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
				{
					chan_mask = 0x78;	// 11 bit (2048)
    694c:	78 e7       	ldi	r23, 0x78	; 120
    694e:	03 c0       	rjmp	.+6      	; 0x6956 <__vector_20+0x330>
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
					data_mask = 0x03;
    6950:	c3 e0       	ldi	r28, 0x03	; 3
					chan_shift = 0x02;
    6952:	62 e0       	ldi	r22, 0x02	; 2
					data_mask = 0x07;
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
    6954:	7c e3       	ldi	r23, 0x3C	; 60
    6956:	e3 e5       	ldi	r30, 0x53	; 83
    6958:	f5 e0       	ldi	r31, 0x05	; 5
    695a:	df 01       	movw	r26, r30
    695c:	11 97       	sbiw	r26, 0x01	; 1
				// Work out which channel the data is intended for from the channel number data
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    695e:	2c 91       	ld	r18, X
    6960:	82 2f       	mov	r24, r18
    6962:	87 23       	and	r24, r23
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	06 2e       	mov	r0, r22
    6968:	02 c0       	rjmp	.+4      	; 0x696e <__vector_20+0x348>
    696a:	95 95       	asr	r25
    696c:	87 95       	ror	r24
    696e:	0a 94       	dec	r0
    6970:	e2 f7       	brpl	.-8      	; 0x696a <__vector_20+0x344>
    6972:	80 93 14 08 	sts	0x0814, r24

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    6976:	80 81       	ld	r24, Z

					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16
					if (ch_num < MAX_RC_CHANNELS)
    6978:	90 91 14 08 	lds	r25, 0x0814
    697c:	98 30       	cpi	r25, 0x08	; 8
    697e:	08 f0       	brcs	.+2      	; 0x6982 <__vector_20+0x35c>
    6980:	40 c0       	rjmp	.+128    	; 0x6a02 <__vector_20+0x3dc>
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    6982:	2c 23       	and	r18, r28
    6984:	30 e0       	ldi	r19, 0x00	; 0
    6986:	32 2f       	mov	r19, r18
    6988:	22 27       	eor	r18, r18
    698a:	28 0f       	add	r18, r24
    698c:	31 1d       	adc	r19, r1
					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16
					if (ch_num < MAX_RC_CHANNELS)
					{
						// Subtract Spektrum center offset
						if (chan_shift == 0x03) // 11-bit
    698e:	63 30       	cpi	r22, 0x03	; 3
    6990:	11 f4       	brne	.+4      	; 0x6996 <__vector_20+0x370>
						{
							itemp16 = temp16 - 1024;
    6992:	34 50       	subi	r19, 0x04	; 4
    6994:	01 c0       	rjmp	.+2      	; 0x6998 <__vector_20+0x372>
						}
						else
						{
							itemp16 = temp16 - 512;	
    6996:	32 50       	subi	r19, 0x02	; 2
						}					

						// Spektrum to System
						// 1.1527 () (1000/867.5) x2 = 2.30547 (2.3047)
						itemp16 = (itemp16 << 1) + (itemp16 >> 2) + (itemp16 >> 5) + (itemp16 >> 6) + (itemp16 >> 7);
    6998:	c9 01       	movw	r24, r18
    699a:	88 0f       	add	r24, r24
    699c:	99 1f       	adc	r25, r25
    699e:	a9 01       	movw	r20, r18
    69a0:	55 95       	asr	r21
    69a2:	47 95       	ror	r20
    69a4:	55 95       	asr	r21
    69a6:	47 95       	ror	r20
    69a8:	84 0f       	add	r24, r20
    69aa:	95 1f       	adc	r25, r21
    69ac:	a9 01       	movw	r20, r18
    69ae:	b5 e0       	ldi	r27, 0x05	; 5
    69b0:	55 95       	asr	r21
    69b2:	47 95       	ror	r20
    69b4:	ba 95       	dec	r27
    69b6:	e1 f7       	brne	.-8      	; 0x69b0 <__vector_20+0x38a>
    69b8:	84 0f       	add	r24, r20
    69ba:	95 1f       	adc	r25, r21
    69bc:	a9 01       	movw	r20, r18
    69be:	a6 e0       	ldi	r26, 0x06	; 6
    69c0:	55 95       	asr	r21
    69c2:	47 95       	ror	r20
    69c4:	aa 95       	dec	r26
    69c6:	e1 f7       	brne	.-8      	; 0x69c0 <__vector_20+0x39a>
    69c8:	84 0f       	add	r24, r20
    69ca:	95 1f       	adc	r25, r21
    69cc:	22 0f       	add	r18, r18
    69ce:	23 2f       	mov	r18, r19
    69d0:	22 1f       	adc	r18, r18
    69d2:	33 0b       	sbc	r19, r19
    69d4:	82 0f       	add	r24, r18
    69d6:	93 1f       	adc	r25, r19

						if (chan_shift == 0x03) // 11-bit
    69d8:	63 30       	cpi	r22, 0x03	; 3
    69da:	11 f4       	brne	.+4      	; 0x69e0 <__vector_20+0x3ba>
						{
							// Divide in case of 11-bit value
							itemp16 = itemp16 >> 1;								
    69dc:	95 95       	asr	r25
    69de:	87 95       	ror	r24
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    69e0:	a0 91 14 08 	lds	r26, 0x0814
    69e4:	b0 e0       	ldi	r27, 0x00	; 0
    69e6:	a3 53       	subi	r26, 0x33	; 51
    69e8:	ba 4f       	sbci	r27, 0xFA	; 250
    69ea:	11 96       	adiw	r26, 0x01	; 1
    69ec:	ac 91       	ld	r26, X
    69ee:	b0 e0       	ldi	r27, 0x00	; 0
							// Divide in case of 11-bit value
							itemp16 = itemp16 >> 1;								
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										
    69f0:	8a 55       	subi	r24, 0x5A	; 90
    69f2:	91 4f       	sbci	r25, 0xF1	; 241

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    69f4:	aa 0f       	add	r26, r26
    69f6:	bb 1f       	adc	r27, r27
    69f8:	a3 51       	subi	r26, 0x13	; 19
    69fa:	b8 4f       	sbci	r27, 0xF8	; 248
    69fc:	11 96       	adiw	r26, 0x01	; 1
    69fe:	9c 93       	st	X, r25
    6a00:	8e 93       	st	-X, r24
    6a02:	32 96       	adiw	r30, 0x02	; 2
					chan_shift = 0x02;
				}

				// Work out which channel the data is intended for from the channel number data
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
    6a04:	85 e0       	ldi	r24, 0x05	; 5
    6a06:	e1 36       	cpi	r30, 0x61	; 97
    6a08:	f8 07       	cpc	r31, r24
    6a0a:	09 f0       	breq	.+2      	; 0x6a0e <__vector_20+0x3e8>
    6a0c:	a6 cf       	rjmp	.-180    	; 0x695a <__vector_20+0x334>
					sindex += 2;

				} // For each pair of bytes
			
				// RC sync established
				Interrupted = true;
    6a0e:	81 e0       	ldi	r24, 0x01	; 1
    6a10:	80 93 fd 07 	sts	0x07FD, r24
		//************************************************************
		//* Common exit code
		//************************************************************

		// Increment byte count
		bytecount++;
    6a14:	80 91 ff 07 	lds	r24, 0x07FF
    6a18:	8f 5f       	subi	r24, 0xFF	; 255
    6a1a:	80 93 ff 07 	sts	0x07FF, r24
	
	} // Valid data
}
    6a1e:	ff 91       	pop	r31
    6a20:	ef 91       	pop	r30
    6a22:	cf 91       	pop	r28
    6a24:	bf 91       	pop	r27
    6a26:	af 91       	pop	r26
    6a28:	9f 91       	pop	r25
    6a2a:	8f 91       	pop	r24
    6a2c:	7f 91       	pop	r23
    6a2e:	6f 91       	pop	r22
    6a30:	5f 91       	pop	r21
    6a32:	4f 91       	pop	r20
    6a34:	3f 91       	pop	r19
    6a36:	2f 91       	pop	r18
    6a38:	0f 90       	pop	r0
    6a3a:	0f be       	out	0x3f, r0	; 63
    6a3c:	0f 90       	pop	r0
    6a3e:	1f 90       	pop	r1
    6a40:	18 95       	reti

00006a42 <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    6a42:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    6a44:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    6a48:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    6a4c:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    6a4e:	e1 ec       	ldi	r30, 0xC1	; 193
    6a50:	f0 e0       	ldi	r31, 0x00	; 0
    6a52:	80 81       	ld	r24, Z
    6a54:	8f 7e       	andi	r24, 0xEF	; 239
    6a56:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    6a58:	80 81       	ld	r24, Z
    6a5a:	8f 77       	andi	r24, 0x7F	; 127
    6a5c:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    6a5e:	8f e0       	ldi	r24, 0x0F	; 15
    6a60:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    6a62:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    6a64:	78 94       	sei
    6a66:	08 95       	ret

00006a68 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    6a68:	f8 94       	cli
	
	switch (Config.RxMode)
    6a6a:	80 91 f6 05 	lds	r24, 0x05F6
    6a6e:	81 30       	cpi	r24, 0x01	; 1
    6a70:	c9 f0       	breq	.+50     	; 0x6aa4 <init_int+0x3c>
    6a72:	44 f4       	brge	.+16     	; 0x6a84 <init_int+0x1c>
    6a74:	81 11       	cpse	r24, r1
    6a76:	2c c0       	rjmp	.+88     	; 0x6ad0 <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    6a78:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    6a7c:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    6a80:	84 e0       	ldi	r24, 0x04	; 4
    6a82:	1b c0       	rjmp	.+54     	; 0x6aba <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    6a84:	85 30       	cpi	r24, 0x05	; 5
    6a86:	24 f5       	brge	.+72     	; 0x6ad0 <init_int+0x68>

		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    6a88:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    6a8c:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    6a90:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    6a92:	80 91 c1 00 	lds	r24, 0x00C1
    6a96:	80 68       	ori	r24, 0x80	; 128
    6a98:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    6a9c:	80 91 c1 00 	lds	r24, 0x00C1
    6aa0:	80 61       	ori	r24, 0x10	; 16
    6aa2:	14 c0       	rjmp	.+40     	; 0x6acc <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    6aa4:	80 91 6c 00 	lds	r24, 0x006C
    6aa8:	81 60       	ori	r24, 0x01	; 1
    6aaa:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    6aae:	80 91 73 00 	lds	r24, 0x0073
    6ab2:	81 60       	ori	r24, 0x01	; 1
    6ab4:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    6ab8:	87 e0       	ldi	r24, 0x07	; 7
    6aba:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    6abc:	80 91 c1 00 	lds	r24, 0x00C1
    6ac0:	8f 77       	andi	r24, 0x7F	; 127
    6ac2:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    6ac6:	80 91 c1 00 	lds	r24, 0x00C1
    6aca:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    6acc:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    6ad0:	8f e0       	ldi	r24, 0x0F	; 15
    6ad2:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    6ad4:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    6ad6:	78 94       	sei
    6ad8:	08 95       	ret

00006ada <print_menu_frame>:
//************************************************************
// Print basic menu frame
// style = menu style (0 = main, 1 = sub, 2 = alt)
//************************************************************
void print_menu_frame(uint8_t style)
{
    6ada:	cf 93       	push	r28
    6adc:	c8 2f       	mov	r28, r24
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    6ade:	2b e3       	ldi	r18, 0x3B	; 59
    6ae0:	30 e0       	ldi	r19, 0x00	; 0
    6ae2:	46 e2       	ldi	r20, 0x26	; 38
    6ae4:	50 e0       	ldi	r21, 0x00	; 0
    6ae6:	69 e0       	ldi	r22, 0x09	; 9
    6ae8:	71 e0       	ldi	r23, 0x01	; 1
    6aea:	8a e0       	ldi	r24, 0x0A	; 10
    6aec:	90 e0       	ldi	r25, 0x00	; 0
    6aee:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    6af2:	2b e3       	ldi	r18, 0x3B	; 59
    6af4:	30 e0       	ldi	r19, 0x00	; 0
    6af6:	40 e5       	ldi	r20, 0x50	; 80
    6af8:	50 e0       	ldi	r21, 0x00	; 0
    6afa:	69 e0       	ldi	r22, 0x09	; 9
    6afc:	71 e0       	ldi	r23, 0x01	; 1
    6afe:	89 e0       	ldi	r24, 0x09	; 9
    6b00:	90 e0       	ldi	r25, 0x00	; 0
    6b02:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

	switch (style)
    6b06:	c1 30       	cpi	r28, 0x01	; 1
    6b08:	11 f1       	breq	.+68     	; 0x6b4e <print_menu_frame+0x74>
    6b0a:	70 f0       	brcs	.+28     	; 0x6b28 <print_menu_frame+0x4e>
    6b0c:	c3 30       	cpi	r28, 0x03	; 3
    6b0e:	91 f1       	breq	.+100    	; 0x6b74 <print_menu_frame+0x9a>
    6b10:	c0 3a       	cpi	r28, 0xA0	; 160
    6b12:	09 f0       	breq	.+2      	; 0x6b16 <print_menu_frame+0x3c>
    6b14:	43 c0       	rjmp	.+134    	; 0x6b9c <print_menu_frame+0xc2>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    6b16:	26 e3       	ldi	r18, 0x36	; 54
    6b18:	30 e0       	ldi	r19, 0x00	; 0
    6b1a:	40 e0       	ldi	r20, 0x00	; 0
    6b1c:	50 e0       	ldi	r21, 0x00	; 0
    6b1e:	67 e9       	ldi	r22, 0x97	; 151
    6b20:	7c e0       	ldi	r23, 0x0C	; 12
    6b22:	88 e1       	ldi	r24, 0x18	; 24
    6b24:	91 e0       	ldi	r25, 0x01	; 1
    6b26:	1b c0       	rjmp	.+54     	; 0x6b5e <print_menu_frame+0x84>

	switch (style)
	{
		case BASIC:
			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    6b28:	29 e3       	ldi	r18, 0x39	; 57
    6b2a:	30 e0       	ldi	r19, 0x00	; 0
    6b2c:	40 e0       	ldi	r20, 0x00	; 0
    6b2e:	50 e0       	ldi	r21, 0x00	; 0
    6b30:	69 e0       	ldi	r22, 0x09	; 9
    6b32:	71 e0       	ldi	r23, 0x01	; 1
    6b34:	8c e0       	ldi	r24, 0x0C	; 12
    6b36:	90 e0       	ldi	r25, 0x00	; 0
    6b38:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    6b3c:	29 e3       	ldi	r18, 0x39	; 57
    6b3e:	30 e0       	ldi	r19, 0x00	; 0
    6b40:	48 e7       	ldi	r20, 0x78	; 120
    6b42:	50 e0       	ldi	r21, 0x00	; 0
    6b44:	69 e0       	ldi	r22, 0x09	; 9
    6b46:	71 e0       	ldi	r23, 0x01	; 1
    6b48:	8b e0       	ldi	r24, 0x0B	; 11
    6b4a:	90 e0       	ldi	r25, 0x00	; 0
    6b4c:	25 c0       	rjmp	.+74     	; 0x6b98 <print_menu_frame+0xbe>
			break;
			
		case EDIT:
			// For editing items
			LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Def.
    6b4e:	26 e3       	ldi	r18, 0x36	; 54
    6b50:	30 e0       	ldi	r19, 0x00	; 0
    6b52:	40 e0       	ldi	r20, 0x00	; 0
    6b54:	50 e0       	ldi	r21, 0x00	; 0
    6b56:	67 e9       	ldi	r22, 0x97	; 151
    6b58:	7c e0       	ldi	r23, 0x0C	; 12
    6b5a:	80 e1       	ldi	r24, 0x10	; 16
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    6b5e:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    6b62:	26 e3       	ldi	r18, 0x36	; 54
    6b64:	30 e0       	ldi	r19, 0x00	; 0
    6b66:	47 e6       	ldi	r20, 0x67	; 103
    6b68:	50 e0       	ldi	r21, 0x00	; 0
    6b6a:	67 e9       	ldi	r22, 0x97	; 151
    6b6c:	7c e0       	ldi	r23, 0x0C	; 12
    6b6e:	81 e1       	ldi	r24, 0x11	; 17
    6b70:	90 e0       	ldi	r25, 0x00	; 0
    6b72:	12 c0       	rjmp	.+36     	; 0x6b98 <print_menu_frame+0xbe>
			break;
			
		case LOG:
			// Clear or exit
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    6b74:	29 e3       	ldi	r18, 0x39	; 57
    6b76:	30 e0       	ldi	r19, 0x00	; 0
    6b78:	40 e0       	ldi	r20, 0x00	; 0
    6b7a:	50 e0       	ldi	r21, 0x00	; 0
    6b7c:	69 e0       	ldi	r22, 0x09	; 9
    6b7e:	71 e0       	ldi	r23, 0x01	; 1
    6b80:	8c e0       	ldi	r24, 0x0C	; 12
    6b82:	90 e0       	ldi	r25, 0x00	; 0
    6b84:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
			LCD_Display_Text(291, (const unsigned char*)Verdana8, 100, 54);	// Clear
    6b88:	26 e3       	ldi	r18, 0x36	; 54
    6b8a:	30 e0       	ldi	r19, 0x00	; 0
    6b8c:	44 e6       	ldi	r20, 0x64	; 100
    6b8e:	50 e0       	ldi	r21, 0x00	; 0
    6b90:	67 e9       	ldi	r22, 0x97	; 151
    6b92:	7c e0       	ldi	r23, 0x0C	; 12
    6b94:	83 e2       	ldi	r24, 0x23	; 35
    6b96:	91 e0       	ldi	r25, 0x01	; 1
    6b98:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    6b9c:	80 e0       	ldi	r24, 0x00	; 0
    6b9e:	91 e0       	ldi	r25, 0x01	; 1
}
    6ba0:	cf 91       	pop	r28
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    6ba2:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <write_buffer>

00006ba6 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    6ba6:	cf 93       	push	r28
    6ba8:	df 93       	push	r29
    6baa:	cd b7       	in	r28, 0x3d	; 61
    6bac:	de b7       	in	r29, 0x3e	; 62
    6bae:	2a 97       	sbiw	r28, 0x0a	; 10
    6bb0:	0f b6       	in	r0, 0x3f	; 63
    6bb2:	f8 94       	cli
    6bb4:	de bf       	out	0x3e, r29	; 62
    6bb6:	0f be       	out	0x3f, r0	; 63
    6bb8:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    6bba:	25 e0       	ldi	r18, 0x05	; 5
    6bbc:	62 9f       	mul	r22, r18
    6bbe:	80 0d       	add	r24, r0
    6bc0:	91 1d       	adc	r25, r1
    6bc2:	11 24       	eor	r1, r1
    6bc4:	bc 01       	movw	r22, r24
    6bc6:	45 e0       	ldi	r20, 0x05	; 5
    6bc8:	50 e0       	ldi	r21, 0x00	; 0
    6bca:	ce 01       	movw	r24, r28
    6bcc:	06 96       	adiw	r24, 0x06	; 6
    6bce:	0e 94 2b 51 	call	0xa256	; 0xa256 <memcpy_P>
	return (range);
    6bd2:	85 e0       	ldi	r24, 0x05	; 5
    6bd4:	fe 01       	movw	r30, r28
    6bd6:	36 96       	adiw	r30, 0x06	; 6
    6bd8:	de 01       	movw	r26, r28
    6bda:	11 96       	adiw	r26, 0x01	; 1
    6bdc:	01 90       	ld	r0, Z+
    6bde:	0d 92       	st	X+, r0
    6be0:	8a 95       	dec	r24
    6be2:	e1 f7       	brne	.-8      	; 0x6bdc <get_menu_range+0x36>
    6be4:	29 81       	ldd	r18, Y+1	; 0x01
    6be6:	3a 81       	ldd	r19, Y+2	; 0x02
    6be8:	4b 81       	ldd	r20, Y+3	; 0x03
    6bea:	5c 81       	ldd	r21, Y+4	; 0x04
    6bec:	6d 81       	ldd	r22, Y+5	; 0x05
}
    6bee:	70 e0       	ldi	r23, 0x00	; 0
    6bf0:	80 e0       	ldi	r24, 0x00	; 0
    6bf2:	90 e0       	ldi	r25, 0x00	; 0
    6bf4:	2a 96       	adiw	r28, 0x0a	; 10
    6bf6:	0f b6       	in	r0, 0x3f	; 63
    6bf8:	f8 94       	cli
    6bfa:	de bf       	out	0x3e, r29	; 62
    6bfc:	0f be       	out	0x3f, r0	; 63
    6bfe:	cd bf       	out	0x3d, r28	; 61
    6c00:	df 91       	pop	r29
    6c02:	cf 91       	pop	r28
    6c04:	08 95       	ret

00006c06 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    6c06:	0f 93       	push	r16
    6c08:	1f 93       	push	r17
    6c0a:	cf 93       	push	r28
    6c0c:	df 93       	push	r29
    6c0e:	fa 01       	movw	r30, r20
    6c10:	10 e0       	ldi	r17, 0x00	; 0
    6c12:	c2 2f       	mov	r28, r18
    6c14:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    6c16:	66 23       	and	r22, r22
    6c18:	19 f0       	breq	.+6      	; 0x6c20 <print_menu_text+0x1a>
    6c1a:	62 50       	subi	r22, 0x02	; 2
    6c1c:	62 30       	cpi	r22, 0x02	; 2
    6c1e:	78 f4       	brcc	.+30     	; 0x6c3e <print_menu_text+0x38>
    6c20:	4a e0       	ldi	r20, 0x0A	; 10
    6c22:	66 e7       	ldi	r22, 0x76	; 118
    6c24:	75 e0       	ldi	r23, 0x05	; 5
    6c26:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    6c2a:	98 01       	movw	r18, r16
    6c2c:	ae 01       	movw	r20, r28
    6c2e:	67 e9       	ldi	r22, 0x97	; 151
    6c30:	7c e0       	ldi	r23, 0x0C	; 12
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    6c32:	df 91       	pop	r29
    6c34:	cf 91       	pop	r28
    6c36:	1f 91       	pop	r17
    6c38:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    6c3a:	0c 94 74 46 	jmp	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    6c3e:	98 01       	movw	r18, r16
    6c40:	ae 01       	movw	r20, r28
    6c42:	67 e9       	ldi	r22, 0x97	; 151
    6c44:	7c e0       	ldi	r23, 0x0C	; 12
    6c46:	cf 01       	movw	r24, r30
	}
}
    6c48:	df 91       	pop	r29
    6c4a:	cf 91       	pop	r28
    6c4c:	1f 91       	pop	r17
    6c4e:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    6c50:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <LCD_Display_Text>

00006c54 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    6c54:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    6c56:	93 b1       	in	r25, 0x03	; 3
    6c58:	90 7f       	andi	r25, 0xF0	; 240
    6c5a:	90 93 1d 08 	sts	0x081D, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    6c5e:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    6c60:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    6c62:	90 91 1d 08 	lds	r25, 0x081D
    6c66:	90 3f       	cpi	r25, 0xF0	; 240
    6c68:	c9 f4       	brne	.+50     	; 0x6c9c <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    6c6a:	83 b1       	in	r24, 0x03	; 3
    6c6c:	80 7f       	andi	r24, 0xF0	; 240
    6c6e:	e7 ea       	ldi	r30, 0xA7	; 167
    6c70:	f1 e6       	ldi	r31, 0x61	; 97
    6c72:	31 97       	sbiw	r30, 0x01	; 1
    6c74:	f1 f7       	brne	.-4      	; 0x6c72 <poll_buttons+0x1e>
    6c76:	00 c0       	rjmp	.+0      	; 0x6c78 <poll_buttons+0x24>
    6c78:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    6c7a:	23 b1       	in	r18, 0x03	; 3
    6c7c:	48 2f       	mov	r20, r24
    6c7e:	50 e0       	ldi	r21, 0x00	; 0
    6c80:	20 7f       	andi	r18, 0xF0	; 240
    6c82:	30 e0       	ldi	r19, 0x00	; 0
    6c84:	42 17       	cp	r20, r18
    6c86:	53 07       	cpc	r21, r19
    6c88:	19 f4       	brne	.+6      	; 0x6c90 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    6c8a:	80 93 1d 08 	sts	0x081D, r24
    6c8e:	01 c0       	rjmp	.+2      	; 0x6c92 <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    6c90:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    6c92:	10 92 30 05 	sts	0x0530, r1
		button_multiplier = 1;
    6c96:	70 93 1e 08 	sts	0x081E, r23
    6c9a:	e3 cf       	rjmp	.-58     	; 0x6c62 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    6c9c:	66 23       	and	r22, r22
    6c9e:	71 f0       	breq	.+28     	; 0x6cbc <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    6ca0:	90 91 30 05 	lds	r25, 0x0530
    6ca4:	9f 5f       	subi	r25, 0xFF	; 255
    6ca6:	90 93 30 05 	sts	0x0530, r25
		if (button_count >= 10)
    6caa:	9a 30       	cpi	r25, 0x0A	; 10
    6cac:	38 f0       	brcs	.+14     	; 0x6cbc <poll_buttons+0x68>
		{
			button_count = 0;
    6cae:	10 92 30 05 	sts	0x0530, r1
			button_multiplier ++;
    6cb2:	90 91 1e 08 	lds	r25, 0x081E
    6cb6:	9f 5f       	subi	r25, 0xFF	; 255
    6cb8:	90 93 1e 08 	sts	0x081E, r25
		}
	}

	return buttons;
}
    6cbc:	08 95       	ret

00006cbe <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    6cbe:	2f 92       	push	r2
    6cc0:	3f 92       	push	r3
    6cc2:	4f 92       	push	r4
    6cc4:	5f 92       	push	r5
    6cc6:	6f 92       	push	r6
    6cc8:	7f 92       	push	r7
    6cca:	8f 92       	push	r8
    6ccc:	9f 92       	push	r9
    6cce:	af 92       	push	r10
    6cd0:	bf 92       	push	r11
    6cd2:	cf 92       	push	r12
    6cd4:	df 92       	push	r13
    6cd6:	ef 92       	push	r14
    6cd8:	ff 92       	push	r15
    6cda:	0f 93       	push	r16
    6cdc:	1f 93       	push	r17
    6cde:	cf 93       	push	r28
    6ce0:	df 93       	push	r29
    6ce2:	cd b7       	in	r28, 0x3d	; 61
    6ce4:	de b7       	in	r29, 0x3e	; 62
    6ce6:	67 97       	sbiw	r28, 0x17	; 23
    6ce8:	0f b6       	in	r0, 0x3f	; 63
    6cea:	f8 94       	cli
    6cec:	de bf       	out	0x3e, r29	; 62
    6cee:	0f be       	out	0x3f, r0	; 63
    6cf0:	cd bf       	out	0x3d, r28	; 61
    6cf2:	3c 01       	movw	r6, r24
    6cf4:	79 8b       	std	Y+17, r23	; 0x11
    6cf6:	68 8b       	std	Y+16, r22	; 0x10
    6cf8:	4a 87       	std	Y+10, r20	; 0x0a
    6cfa:	ed 82       	std	Y+5, r14	; 0x05
    6cfc:	fe 82       	std	Y+6, r15	; 0x06
    6cfe:	0f 83       	std	Y+7, r16	; 0x07
    6d00:	18 87       	std	Y+8, r17	; 0x08
    6d02:	29 87       	std	Y+9, r18	; 0x09
    6d04:	bd 8a       	std	Y+21, r11	; 0x15
    6d06:	ac 8a       	std	Y+20, r10	; 0x14
    6d08:	4e 2d       	mov	r20, r14
    6d0a:	3f 2d       	mov	r19, r15
    6d0c:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    6d0e:	fb 01       	movw	r30, r22
    6d10:	20 81       	ld	r18, Z
    6d12:	a2 2e       	mov	r10, r18
    6d14:	bb 24       	eor	r11, r11
    6d16:	a7 fc       	sbrc	r10, 7
    6d18:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    6d1a:	12 30       	cpi	r17, 0x02	; 2
    6d1c:	29 f4       	brne	.+10     	; 0x6d28 <do_menu_item+0x6a>
	{
		value = value * mult;
    6d1e:	5a 85       	ldd	r21, Y+10	; 0x0a
    6d20:	25 03       	mulsu	r18, r21
    6d22:	50 01       	movw	r10, r0
    6d24:	11 24       	eor	r1, r1
    6d26:	02 c0       	rjmp	.+4      	; 0x6d2c <do_menu_item+0x6e>
	}
	else mult = 1;
    6d28:	81 e0       	ldi	r24, 0x01	; 1
    6d2a:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    6d2c:	20 ef       	ldi	r18, 0xF0	; 240
    6d2e:	20 93 1d 08 	sts	0x081D, r18
				value = (range.default_value * mult);				
			}
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    6d32:	fa 85       	ldd	r31, Y+10	; 0x0a
    6d34:	ef 2f       	mov	r30, r31
    6d36:	f0 e0       	ldi	r31, 0x00	; 0
    6d38:	fb 8b       	std	Y+19, r31	; 0x13
    6d3a:	ea 8b       	std	Y+18, r30	; 0x12
    6d3c:	2a 85       	ldd	r18, Y+10	; 0x0a
    6d3e:	42 03       	mulsu	r20, r18
    6d40:	10 01       	movw	r2, r0
    6d42:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    6d44:	32 03       	mulsu	r19, r18
    6d46:	c0 01       	movw	r24, r0
    6d48:	11 24       	eor	r1, r1
    6d4a:	9f 87       	std	Y+15, r25	; 0x0f
    6d4c:	8e 87       	std	Y+14, r24	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    6d4e:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    6d50:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    6d52:	41 2c       	mov	r4, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    6d54:	f1 2c       	mov	r15, r1
		{
			button_inc = 5; // For servos
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    6d56:	01 e0       	ldi	r16, 0x01	; 1
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    6d58:	f3 01       	movw	r30, r6
    6d5a:	ee 0f       	add	r30, r30
    6d5c:	ff 1f       	adc	r31, r31
    6d5e:	e2 58       	subi	r30, 0x82	; 130
    6d60:	ff 4e       	sbci	r31, 0xEF	; 239
    6d62:	fc 87       	std	Y+12, r31	; 0x0c
    6d64:	eb 87       	std	Y+11, r30	; 0x0b
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    6d66:	2c 2d       	mov	r18, r12
    6d68:	33 27       	eor	r19, r19
    6d6a:	27 fd       	sbrc	r18, 7
    6d6c:	30 95       	com	r19
    6d6e:	3f 8b       	std	Y+23, r19	; 0x17
    6d70:	2e 8b       	std	Y+22, r18	; 0x16
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    6d72:	be ef       	ldi	r27, 0xFE	; 254
    6d74:	9b 2e       	mov	r9, r27
    6d76:	91 0e       	add	r9, r17

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    6d78:	86 e2       	ldi	r24, 0x26	; 38
    6d7a:	ec a5       	ldd	r30, Y+44	; 0x2c
    6d7c:	fd a5       	ldd	r31, Y+45	; 0x2d
    6d7e:	8e 9f       	mul	r24, r30
    6d80:	60 01       	movw	r12, r0
    6d82:	8f 9f       	mul	r24, r31
    6d84:	d0 0c       	add	r13, r0
    6d86:	11 24       	eor	r1, r1
    6d88:	96 01       	movw	r18, r12
    6d8a:	2d 59       	subi	r18, 0x9D	; 157
    6d8c:	39 4f       	sbci	r19, 0xF9	; 249
    6d8e:	69 01       	movw	r12, r18
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
    6d90:	80 91 1d 08 	lds	r24, 0x081D
    6d94:	28 2f       	mov	r18, r24
    6d96:	2f 7b       	andi	r18, 0xBF	; 191
    6d98:	20 3a       	cpi	r18, 0xA0	; 160
    6d9a:	09 f4       	brne	.+2      	; 0x6d9e <do_menu_item+0xe0>
    6d9c:	36 c1       	rjmp	.+620    	; 0x700a <do_menu_item+0x34c>
		// Increment loop count so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    6d9e:	88 20       	and	r8, r8
    6da0:	11 f0       	breq	.+4      	; 0x6da6 <do_menu_item+0xe8>
		{
			button_inc = 5; // For servos
    6da2:	25 e0       	ldi	r18, 0x05	; 5
    6da4:	01 c0       	rjmp	.+2      	; 0x6da8 <do_menu_item+0xea>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    6da6:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    6da8:	80 3f       	cpi	r24, 0xF0	; 240
    6daa:	19 f0       	breq	.+6      	; 0x6db2 <do_menu_item+0xf4>
		{
			button_update++;
    6dac:	43 94       	inc	r4

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    6dae:	24 15       	cp	r18, r4
    6db0:	10 f4       	brcc	.+4      	; 0x6db6 <do_menu_item+0xf8>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    6db2:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    6db4:	41 2c       	mov	r4, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    6db6:	88 20       	and	r8, r8
    6db8:	49 f0       	breq	.+18     	; 0x6dcc <do_menu_item+0x10e>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
	{
		// Increment loop count so that we can time various things
		display_update++;
    6dba:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    6dbc:	37 e0       	ldi	r19, 0x07	; 7
    6dbe:	3f 15       	cp	r19, r15
    6dc0:	10 f4       	brcc	.+4      	; 0x6dc6 <do_menu_item+0x108>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    6dc2:	80 3f       	cpi	r24, 0xF0	; 240
    6dc4:	19 f4       	brne	.+6      	; 0x6dcc <do_menu_item+0x10e>
    6dc6:	99 23       	and	r25, r25
    6dc8:	09 f4       	brne	.+2      	; 0x6dcc <do_menu_item+0x10e>
    6dca:	85 c0       	rjmp	.+266    	; 0x6ed6 <do_menu_item+0x218>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    6dcc:	80 e0       	ldi	r24, 0x00	; 0
    6dce:	91 e0       	ldi	r25, 0x01	; 1
    6dd0:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>

			// Print warning
			if (range.style == 4)
    6dd4:	14 30       	cpi	r17, 0x04	; 4
    6dd6:	a9 f4       	brne	.+42     	; 0x6e02 <do_menu_item+0x144>
			{
				LCD_Display_Text(281,(const unsigned char*)Verdana8,0,0);	// Warning
    6dd8:	20 e0       	ldi	r18, 0x00	; 0
    6dda:	30 e0       	ldi	r19, 0x00	; 0
    6ddc:	40 e0       	ldi	r20, 0x00	; 0
    6dde:	50 e0       	ldi	r21, 0x00	; 0
    6de0:	67 e9       	ldi	r22, 0x97	; 151
    6de2:	7c e0       	ldi	r23, 0x0C	; 12
    6de4:	89 e1       	ldi	r24, 0x19	; 25
    6de6:	91 e0       	ldi	r25, 0x01	; 1
    6de8:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
    6dec:	2c e0       	ldi	r18, 0x0C	; 12
    6dee:	30 e0       	ldi	r19, 0x00	; 0
    6df0:	49 e1       	ldi	r20, 0x19	; 25
    6df2:	50 e0       	ldi	r21, 0x00	; 0
    6df4:	67 e9       	ldi	r22, 0x97	; 151
    6df6:	7c e0       	ldi	r23, 0x0C	; 12
    6df8:	8a e1       	ldi	r24, 0x1A	; 26
    6dfa:	91 e0       	ldi	r25, 0x01	; 1
    6dfc:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
    6e00:	39 c0       	rjmp	.+114    	; 0x6e74 <do_menu_item+0x1b6>
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    6e02:	eb 85       	ldd	r30, Y+11	; 0x0b
    6e04:	fc 85       	ldd	r31, Y+12	; 0x0c
    6e06:	85 91       	lpm	r24, Z+
    6e08:	94 91       	lpm	r25, Z
    6e0a:	20 e0       	ldi	r18, 0x00	; 0
    6e0c:	30 e0       	ldi	r19, 0x00	; 0
    6e0e:	40 e0       	ldi	r20, 0x00	; 0
    6e10:	50 e0       	ldi	r21, 0x00	; 0
    6e12:	69 ee       	ldi	r22, 0xE9	; 233
    6e14:	73 e0       	ldi	r23, 0x03	; 3
    6e16:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <gLCDprint_Menu_P>
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    6e1a:	11 23       	and	r17, r17
    6e1c:	19 f0       	breq	.+6      	; 0x6e24 <do_menu_item+0x166>
    6e1e:	51 e0       	ldi	r21, 0x01	; 1
    6e20:	59 15       	cp	r21, r9
    6e22:	40 f1       	brcs	.+80     	; 0x6e74 <do_menu_item+0x1b6>
    6e24:	4a e0       	ldi	r20, 0x0A	; 10
    6e26:	66 e7       	ldi	r22, 0x76	; 118
    6e28:	75 e0       	ldi	r23, 0x05	; 5
    6e2a:	c5 01       	movw	r24, r10
    6e2c:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    6e30:	ae 01       	movw	r20, r28
    6e32:	4f 5f       	subi	r20, 0xFF	; 255
    6e34:	5f 4f       	sbci	r21, 0xFF	; 255
    6e36:	69 ee       	ldi	r22, 0xE9	; 233
    6e38:	73 e0       	ldi	r23, 0x03	; 3
    6e3a:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    6e3e:	89 81       	ldd	r24, Y+1	; 0x01
    6e40:	9a 81       	ldd	r25, Y+2	; 0x02
    6e42:	70 e8       	ldi	r23, 0x80	; 128
    6e44:	e7 2e       	mov	r14, r23
    6e46:	f1 2c       	mov	r15, r1
    6e48:	e8 1a       	sub	r14, r24
    6e4a:	f9 0a       	sbc	r15, r25
    6e4c:	f6 94       	lsr	r15
    6e4e:	e7 94       	ror	r14
    6e50:	8e 89       	ldd	r24, Y+22	; 0x16
    6e52:	9f 89       	ldd	r25, Y+23	; 0x17
    6e54:	e8 0e       	add	r14, r24
    6e56:	f9 1e       	adc	r15, r25
    6e58:	4a e0       	ldi	r20, 0x0A	; 10
    6e5a:	66 e7       	ldi	r22, 0x76	; 118
    6e5c:	75 e0       	ldi	r23, 0x05	; 5
    6e5e:	c5 01       	movw	r24, r10
    6e60:	0e 94 46 51 	call	0xa28c	; 0xa28c <__itoa_ncheck>
    6e64:	29 e1       	ldi	r18, 0x19	; 25
    6e66:	30 e0       	ldi	r19, 0x00	; 0
    6e68:	a7 01       	movw	r20, r14
    6e6a:	69 ee       	ldi	r22, 0xE9	; 233
    6e6c:	73 e0       	ldi	r23, 0x03	; 3
    6e6e:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <mugui_lcd_puts>
    6e72:	29 c0       	rjmp	.+82     	; 0x6ec6 <do_menu_item+0x208>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    6e74:	ec 88       	ldd	r14, Y+20	; 0x14
    6e76:	fd 88       	ldd	r15, Y+21	; 0x15
    6e78:	ea 0c       	add	r14, r10
    6e7a:	fb 1c       	adc	r15, r11
    6e7c:	f7 01       	movw	r30, r14
    6e7e:	ee 0f       	add	r30, r30
    6e80:	ff 1f       	adc	r31, r31
    6e82:	e2 58       	subi	r30, 0x82	; 130
    6e84:	ff 4e       	sbci	r31, 0xEF	; 239
    6e86:	85 91       	lpm	r24, Z+
    6e88:	94 91       	lpm	r25, Z
    6e8a:	0e 94 73 45 	call	0x8ae6	; 0x8ae6 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    6e8e:	ae 01       	movw	r20, r28
    6e90:	4f 5f       	subi	r20, 0xFF	; 255
    6e92:	5f 4f       	sbci	r21, 0xFF	; 255
    6e94:	69 ee       	ldi	r22, 0xE9	; 233
    6e96:	73 e0       	ldi	r23, 0x03	; 3
    6e98:	86 e7       	ldi	r24, 0x76	; 118
    6e9a:	95 e0       	ldi	r25, 0x05	; 5
    6e9c:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    6ea0:	89 81       	ldd	r24, Y+1	; 0x01
    6ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ea4:	40 e8       	ldi	r20, 0x80	; 128
    6ea6:	50 e0       	ldi	r21, 0x00	; 0
    6ea8:	48 1b       	sub	r20, r24
    6eaa:	59 0b       	sbc	r21, r25
    6eac:	56 95       	lsr	r21
    6eae:	47 95       	ror	r20
    6eb0:	29 e1       	ldi	r18, 0x19	; 25
    6eb2:	30 e0       	ldi	r19, 0x00	; 0
    6eb4:	69 ee       	ldi	r22, 0xE9	; 233
    6eb6:	73 e0       	ldi	r23, 0x03	; 3
    6eb8:	c7 01       	movw	r24, r14
    6eba:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
			}

			// Print appropriate menu frame
			// Save/Abort screen
			if (range.style == 4)
    6ebe:	14 30       	cpi	r17, 0x04	; 4
    6ec0:	11 f4       	brne	.+4      	; 0x6ec6 <do_menu_item+0x208>
			{
				// Print bottom markers
				print_menu_frame(ABORT);				
    6ec2:	80 ea       	ldi	r24, 0xA0	; 160
    6ec4:	01 c0       	rjmp	.+2      	; 0x6ec8 <do_menu_item+0x20a>
			}
			// Save/default screen
			else
			{
				// Print bottom markers
				print_menu_frame(EDIT);				
    6ec6:	81 e0       	ldi	r24, 0x01	; 1
    6ec8:	0e 94 6d 35 	call	0x6ada	; 0x6ada <print_menu_frame>
			}

			// Write from buffer
			write_buffer(buffer);
    6ecc:	80 e0       	ldi	r24, 0x00	; 0
    6ece:	91 e0       	ldi	r25, 0x01	; 1
    6ed0:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    6ed4:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    6ed6:	12 30       	cpi	r17, 0x02	; 2
    6ed8:	09 f1       	breq	.+66     	; 0x6f1c <do_menu_item+0x25e>
    6eda:	60 f4       	brcc	.+24     	; 0x6ef4 <do_menu_item+0x236>
    6edc:	11 23       	and	r17, r17
    6ede:	b1 f0       	breq	.+44     	; 0x6f0c <do_menu_item+0x24e>
    6ee0:	11 30       	cpi	r17, 0x01	; 1
    6ee2:	69 f5       	brne	.+90     	; 0x6f3e <do_menu_item+0x280>
    6ee4:	2f e3       	ldi	r18, 0x3F	; 63
    6ee6:	32 e4       	ldi	r19, 0x42	; 66
    6ee8:	5f e0       	ldi	r21, 0x0F	; 15
    6eea:	21 50       	subi	r18, 0x01	; 1
    6eec:	30 40       	sbci	r19, 0x00	; 0
    6eee:	50 40       	sbci	r21, 0x00	; 0
    6ef0:	e1 f7       	brne	.-8      	; 0x6eea <do_menu_item+0x22c>
    6ef2:	23 c0       	rjmp	.+70     	; 0x6f3a <do_menu_item+0x27c>
    6ef4:	13 30       	cpi	r17, 0x03	; 3
    6ef6:	d1 f0       	breq	.+52     	; 0x6f2c <do_menu_item+0x26e>
    6ef8:	14 30       	cpi	r17, 0x04	; 4
    6efa:	09 f5       	brne	.+66     	; 0x6f3e <do_menu_item+0x280>
    6efc:	5f e3       	ldi	r21, 0x3F	; 63
    6efe:	82 e4       	ldi	r24, 0x42	; 66
    6f00:	9f e0       	ldi	r25, 0x0F	; 15
    6f02:	51 50       	subi	r21, 0x01	; 1
    6f04:	80 40       	sbci	r24, 0x00	; 0
    6f06:	90 40       	sbci	r25, 0x00	; 0
    6f08:	e1 f7       	brne	.-8      	; 0x6f02 <do_menu_item+0x244>
    6f0a:	17 c0       	rjmp	.+46     	; 0x6f3a <do_menu_item+0x27c>
    6f0c:	9f e7       	ldi	r25, 0x7F	; 127
    6f0e:	ea e1       	ldi	r30, 0x1A	; 26
    6f10:	f6 e0       	ldi	r31, 0x06	; 6
    6f12:	91 50       	subi	r25, 0x01	; 1
    6f14:	e0 40       	sbci	r30, 0x00	; 0
    6f16:	f0 40       	sbci	r31, 0x00	; 0
    6f18:	e1 f7       	brne	.-8      	; 0x6f12 <do_menu_item+0x254>
    6f1a:	0f c0       	rjmp	.+30     	; 0x6f3a <do_menu_item+0x27c>
    6f1c:	8f e7       	ldi	r24, 0x7F	; 127
    6f1e:	9a e1       	ldi	r25, 0x1A	; 26
    6f20:	e6 e0       	ldi	r30, 0x06	; 6
    6f22:	81 50       	subi	r24, 0x01	; 1
    6f24:	90 40       	sbci	r25, 0x00	; 0
    6f26:	e0 40       	sbci	r30, 0x00	; 0
    6f28:	e1 f7       	brne	.-8      	; 0x6f22 <do_menu_item+0x264>
    6f2a:	07 c0       	rjmp	.+14     	; 0x6f3a <do_menu_item+0x27c>
    6f2c:	ff e7       	ldi	r31, 0x7F	; 127
    6f2e:	28 e3       	ldi	r18, 0x38	; 56
    6f30:	31 e0       	ldi	r19, 0x01	; 1
    6f32:	f1 50       	subi	r31, 0x01	; 1
    6f34:	20 40       	sbci	r18, 0x00	; 0
    6f36:	30 40       	sbci	r19, 0x00	; 0
    6f38:	e1 f7       	brne	.-8      	; 0x6f32 <do_menu_item+0x274>
    6f3a:	00 c0       	rjmp	.+0      	; 0x6f3c <do_menu_item+0x27e>
    6f3c:	00 00       	nop
		}

		// Poll buttons when idle.
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    6f3e:	88 20       	and	r8, r8
    6f40:	39 f0       	breq	.+14     	; 0x6f50 <do_menu_item+0x292>
		{
			button = (PINB & 0xf0);	
    6f42:	83 b1       	in	r24, 0x03	; 3
    6f44:	80 7f       	andi	r24, 0xF0	; 240
    6f46:	80 93 1d 08 	sts	0x081D, r24
			button_multiplier = 1;
    6f4a:	00 93 1e 08 	sts	0x081E, r16
    6f4e:	03 c0       	rjmp	.+6      	; 0x6f56 <do_menu_item+0x298>
		}
		else
		{
			poll_buttons(true);
    6f50:	81 e0       	ldi	r24, 0x01	; 1
    6f52:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    6f56:	80 91 1d 08 	lds	r24, 0x081D
    6f5a:	80 3f       	cpi	r24, 0xF0	; 240
    6f5c:	69 f1       	breq	.+90     	; 0x6fb8 <do_menu_item+0x2fa>
    6f5e:	88 20       	and	r8, r8
    6f60:	c9 f0       	breq	.+50     	; 0x6f94 <do_menu_item+0x2d6>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6f62:	80 3d       	cpi	r24, 0xD0	; 208
    6f64:	51 f4       	brne	.+20     	; 0x6f7a <do_menu_item+0x2bc>
		{
			if (button_lock == false)
    6f66:	51 10       	cpse	r5, r1
    6f68:	74 c0       	rjmp	.+232    	; 0x7052 <do_menu_item+0x394>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    6f6a:	80 91 1e 08 	lds	r24, 0x081E
    6f6e:	ed 85       	ldd	r30, Y+13	; 0x0d
    6f70:	e8 9f       	mul	r30, r24
    6f72:	a0 18       	sub	r10, r0
    6f74:	b1 08       	sbc	r11, r1
    6f76:	11 24       	eor	r1, r1
    6f78:	0b c0       	rjmp	.+22     	; 0x6f90 <do_menu_item+0x2d2>
				button_update = 0;
			}
		}

		if (button == UP)
    6f7a:	80 3b       	cpi	r24, 0xB0	; 176
    6f7c:	81 f4       	brne	.+32     	; 0x6f9e <do_menu_item+0x2e0>
		{
			if (button_lock == false)
    6f7e:	51 10       	cpse	r5, r1
    6f80:	68 c0       	rjmp	.+208    	; 0x7052 <do_menu_item+0x394>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    6f82:	80 91 1e 08 	lds	r24, 0x081E
    6f86:	fd 85       	ldd	r31, Y+13	; 0x0d
    6f88:	f8 9f       	mul	r31, r24
    6f8a:	a0 0c       	add	r10, r0
    6f8c:	b1 1c       	adc	r11, r1
    6f8e:	11 24       	eor	r1, r1
				button_update = 0;
    6f90:	41 2c       	mov	r4, r1
    6f92:	5f c0       	rjmp	.+190    	; 0x7052 <do_menu_item+0x394>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6f94:	80 3d       	cpi	r24, 0xD0	; 208
    6f96:	49 f3       	breq	.-46     	; 0x6f6a <do_menu_item+0x2ac>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    6f98:	80 3b       	cpi	r24, 0xB0	; 176
    6f9a:	99 f3       	breq	.-26     	; 0x6f82 <do_menu_item+0x2c4>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    6f9c:	51 2c       	mov	r5, r1
				button_update = 0;
			}
		}

		// Handle button 1
		if (button == BACK)	
    6f9e:	80 37       	cpi	r24, 0x70	; 112
    6fa0:	59 f4       	brne	.+22     	; 0x6fb8 <do_menu_item+0x2fa>
		{
			// Save/Abort screen
			if (range.style == 4)
    6fa2:	14 30       	cpi	r17, 0x04	; 4
    6fa4:	21 f4       	brne	.+8      	; 0x6fae <do_menu_item+0x2f0>
			{
				button = ABORT;
    6fa6:	80 ea       	ldi	r24, 0xA0	; 160
    6fa8:	80 93 1d 08 	sts	0x081D, r24
    6fac:	05 c0       	rjmp	.+10     	; 0x6fb8 <do_menu_item+0x2fa>
			}
			else
			{
				value = (range.default_value * mult);				
    6fae:	29 85       	ldd	r18, Y+9	; 0x09
    6fb0:	3a 85       	ldd	r19, Y+10	; 0x0a
    6fb2:	23 03       	mulsu	r18, r19
    6fb4:	50 01       	movw	r10, r0
    6fb6:	11 24       	eor	r1, r1
    6fb8:	a2 14       	cp	r10, r2
    6fba:	b3 04       	cpc	r11, r3
    6fbc:	0c f4       	brge	.+2      	; 0x6fc0 <do_menu_item+0x302>
    6fbe:	51 01       	movw	r10, r2
    6fc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    6fc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    6fc4:	8a 15       	cp	r24, r10
    6fc6:	9b 05       	cpc	r25, r11
    6fc8:	0c f4       	brge	.+2      	; 0x6fcc <do_menu_item+0x30e>
    6fca:	5c 01       	movw	r10, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    6fcc:	9f e9       	ldi	r25, 0x9F	; 159
    6fce:	69 16       	cp	r6, r25
    6fd0:	71 04       	cpc	r7, r1
    6fd2:	19 f4       	brne	.+6      	; 0x6fda <do_menu_item+0x31c>
		{
			st7565_set_brightness(value);
    6fd4:	8a 2d       	mov	r24, r10
    6fd6:	0e 94 28 26 	call	0x4c50	; 0x4c50 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    6fda:	88 20       	and	r8, r8
    6fdc:	a1 f0       	breq	.+40     	; 0x7006 <do_menu_item+0x348>
			(servo_enable) &&
    6fde:	f6 01       	movw	r30, r12
    6fe0:	80 81       	ld	r24, Z
    6fe2:	82 30       	cpi	r24, 0x02	; 2
    6fe4:	81 f0       	breq	.+32     	; 0x7006 <do_menu_item+0x348>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    6fe6:	8a 2d       	mov	r24, r10
    6fe8:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6fec:	86 5a       	subi	r24, 0xA6	; 166
    6fee:	9e 40       	sbci	r25, 0x0E	; 14
    6ff0:	95 95       	asr	r25
    6ff2:	87 95       	ror	r24

			cli();
    6ff4:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6ff6:	bc 01       	movw	r22, r24
    6ff8:	64 52       	subi	r22, 0x24	; 36
    6ffa:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    6ffc:	8c a5       	ldd	r24, Y+44	; 0x2c
    6ffe:	9d a5       	ldd	r25, Y+45	; 0x2d
    7000:	0e 94 a0 10 	call	0x2140	; 0x2140 <output_servo_ppm_asm3>
			sei();
    7004:	78 94       	sei
    7006:	90 e0       	ldi	r25, 0x00	; 0
    7008:	c3 ce       	rjmp	.-634    	; 0x6d90 <do_menu_item+0xd2>
		}

	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    700a:	12 30       	cpi	r17, 0x02	; 2
    700c:	31 f4       	brne	.+12     	; 0x701a <do_menu_item+0x35c>
	{
		value = value / mult;
    700e:	c5 01       	movw	r24, r10
    7010:	6a 89       	ldd	r22, Y+18	; 0x12
    7012:	7b 89       	ldd	r23, Y+19	; 0x13
    7014:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    7018:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    701a:	e8 89       	ldd	r30, Y+16	; 0x10
    701c:	f9 89       	ldd	r31, Y+17	; 0x11
    701e:	a0 82       	st	Z, r10
}
    7020:	67 96       	adiw	r28, 0x17	; 23
    7022:	0f b6       	in	r0, 0x3f	; 63
    7024:	f8 94       	cli
    7026:	de bf       	out	0x3e, r29	; 62
    7028:	0f be       	out	0x3f, r0	; 63
    702a:	cd bf       	out	0x3d, r28	; 61
    702c:	df 91       	pop	r29
    702e:	cf 91       	pop	r28
    7030:	1f 91       	pop	r17
    7032:	0f 91       	pop	r16
    7034:	ff 90       	pop	r15
    7036:	ef 90       	pop	r14
    7038:	df 90       	pop	r13
    703a:	cf 90       	pop	r12
    703c:	bf 90       	pop	r11
    703e:	af 90       	pop	r10
    7040:	9f 90       	pop	r9
    7042:	8f 90       	pop	r8
    7044:	7f 90       	pop	r7
    7046:	6f 90       	pop	r6
    7048:	5f 90       	pop	r5
    704a:	4f 90       	pop	r4
    704c:	3f 90       	pop	r3
    704e:	2f 90       	pop	r2
    7050:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    7052:	55 24       	eor	r5, r5
    7054:	53 94       	inc	r5
    7056:	b0 cf       	rjmp	.-160    	; 0x6fb8 <do_menu_item+0x2fa>

00007058 <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    7058:	90 e0       	ldi	r25, 0x00	; 0
    705a:	98 17       	cp	r25, r24
    705c:	81 f0       	breq	.+32     	; 0x707e <menu_beep+0x26>
	{ 
		LVA = 1;
    705e:	29 9a       	sbi	0x05, 1	; 5
    7060:	ef e0       	ldi	r30, 0x0F	; 15
    7062:	f7 e2       	ldi	r31, 0x27	; 39
    7064:	31 97       	sbiw	r30, 0x01	; 1
    7066:	f1 f7       	brne	.-4      	; 0x7064 <menu_beep+0xc>
    7068:	00 c0       	rjmp	.+0      	; 0x706a <menu_beep+0x12>
    706a:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    706c:	29 98       	cbi	0x05, 1	; 5
    706e:	ef e0       	ldi	r30, 0x0F	; 15
    7070:	f7 e2       	ldi	r31, 0x27	; 39
    7072:	31 97       	sbiw	r30, 0x01	; 1
    7074:	f1 f7       	brne	.-4      	; 0x7072 <menu_beep+0x1a>
    7076:	00 c0       	rjmp	.+0      	; 0x7078 <menu_beep+0x20>
    7078:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    707a:	9f 5f       	subi	r25, 0xFF	; 255
    707c:	ee cf       	rjmp	.-36     	; 0x705a <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    707e:	08 95       	ret

00007080 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint16_t items, uint16_t start, uint16_t offset, uint8_t button, uint16_t* cursor, uint16_t* top, uint16_t* temp)
{
    7080:	6f 92       	push	r6
    7082:	7f 92       	push	r7
    7084:	8f 92       	push	r8
    7086:	9f 92       	push	r9
    7088:	af 92       	push	r10
    708a:	bf 92       	push	r11
    708c:	cf 92       	push	r12
    708e:	df 92       	push	r13
    7090:	ef 92       	push	r14
    7092:	ff 92       	push	r15
    7094:	0f 93       	push	r16
    7096:	1f 93       	push	r17
    7098:	cf 93       	push	r28
    709a:	df 93       	push	r29
    709c:	5c 01       	movw	r10, r24
    709e:	4b 01       	movw	r8, r22
    70a0:	3a 01       	movw	r6, r20
    70a2:	e8 01       	movw	r28, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    70a4:	d7 01       	movw	r26, r14
    70a6:	ed 91       	ld	r30, X+
    70a8:	fc 91       	ld	r31, X
    70aa:	11 97       	sbiw	r26, 0x01	; 1
    70ac:	e4 0f       	add	r30, r20
    70ae:	f5 1f       	adc	r31, r21
    70b0:	ed 93       	st	X+, r30
    70b2:	fc 93       	st	X, r31
	start = start + offset;
    70b4:	84 0e       	add	r8, r20
    70b6:	95 1e       	adc	r9, r21

	// Calculate which function has been requested
	if (button == ENTER)
    70b8:	20 3e       	cpi	r18, 0xE0	; 224
    70ba:	c1 f4       	brne	.+48     	; 0x70ec <update_menu+0x6c>
	{
		switch(*cursor) 
    70bc:	88 81       	ld	r24, Y
    70be:	99 81       	ldd	r25, Y+1	; 0x01
    70c0:	8f 30       	cpi	r24, 0x0F	; 15
    70c2:	91 05       	cpc	r25, r1
    70c4:	61 f0       	breq	.+24     	; 0x70de <update_menu+0x5e>
    70c6:	18 f4       	brcc	.+6      	; 0x70ce <update_menu+0x4e>
    70c8:	03 97       	sbiw	r24, 0x03	; 3
    70ca:	51 f0       	breq	.+20     	; 0x70e0 <update_menu+0x60>
    70cc:	55 c0       	rjmp	.+170    	; 0x7178 <update_menu+0xf8>
    70ce:	8b 31       	cpi	r24, 0x1B	; 27
    70d0:	91 05       	cpc	r25, r1
    70d2:	51 f0       	breq	.+20     	; 0x70e8 <update_menu+0x68>
    70d4:	87 97       	sbiw	r24, 0x27	; 39
    70d6:	09 f0       	breq	.+2      	; 0x70da <update_menu+0x5a>
    70d8:	4f c0       	rjmp	.+158    	; 0x7178 <update_menu+0xf8>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    70da:	33 96       	adiw	r30, 0x03	; 3
    70dc:	01 c0       	rjmp	.+2      	; 0x70e0 <update_menu+0x60>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    70de:	31 96       	adiw	r30, 0x01	; 1
    70e0:	d6 01       	movw	r26, r12
    70e2:	ed 93       	st	X+, r30
    70e4:	fc 93       	st	X, r31
				break;	
    70e6:	48 c0       	rjmp	.+144    	; 0x7178 <update_menu+0xf8>
			case LINE2:
				*temp = *top + 2;
    70e8:	32 96       	adiw	r30, 0x02	; 2
    70ea:	fa cf       	rjmp	.-12     	; 0x70e0 <update_menu+0x60>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    70ec:	20 3d       	cpi	r18, 0xD0	; 208
    70ee:	39 f5       	brne	.+78     	; 0x713e <update_menu+0xbe>
	{
		switch(*cursor) 
    70f0:	88 81       	ld	r24, Y
    70f2:	99 81       	ldd	r25, Y+1	; 0x01
    70f4:	8f 30       	cpi	r24, 0x0F	; 15
    70f6:	91 05       	cpc	r25, r1
    70f8:	79 f0       	breq	.+30     	; 0x7118 <update_menu+0x98>
    70fa:	18 f4       	brcc	.+6      	; 0x7102 <update_menu+0x82>
    70fc:	03 97       	sbiw	r24, 0x03	; 3
    70fe:	39 f0       	breq	.+14     	; 0x710e <update_menu+0x8e>
    7100:	1b c0       	rjmp	.+54     	; 0x7138 <update_menu+0xb8>
    7102:	8b 31       	cpi	r24, 0x1B	; 27
    7104:	91 05       	cpc	r25, r1
    7106:	69 f0       	breq	.+26     	; 0x7122 <update_menu+0xa2>
    7108:	87 97       	sbiw	r24, 0x27	; 39
    710a:	91 f0       	breq	.+36     	; 0x7130 <update_menu+0xb0>
    710c:	15 c0       	rjmp	.+42     	; 0x7138 <update_menu+0xb8>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    710e:	b2 e0       	ldi	r27, 0x02	; 2
    7110:	ab 16       	cp	r10, r27
    7112:	b1 04       	cpc	r11, r1
    7114:	20 f5       	brcc	.+72     	; 0x715e <update_menu+0xde>
    7116:	30 c0       	rjmp	.+96     	; 0x7178 <update_menu+0xf8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    7118:	e3 e0       	ldi	r30, 0x03	; 3
    711a:	ae 16       	cp	r10, r30
    711c:	b1 04       	cpc	r11, r1
    711e:	60 f1       	brcs	.+88     	; 0x7178 <update_menu+0xf8>
    7120:	1b c0       	rjmp	.+54     	; 0x7158 <update_menu+0xd8>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    7122:	f4 e0       	ldi	r31, 0x04	; 4
    7124:	af 16       	cp	r10, r31
    7126:	b1 04       	cpc	r11, r1
    7128:	38 f1       	brcs	.+78     	; 0x7178 <update_menu+0xf8>
    712a:	87 e2       	ldi	r24, 0x27	; 39
    712c:	90 e0       	ldi	r25, 0x00	; 0
    712e:	1f c0       	rjmp	.+62     	; 0x716e <update_menu+0xee>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    7130:	25 e0       	ldi	r18, 0x05	; 5
    7132:	a2 16       	cp	r10, r18
    7134:	b1 04       	cpc	r11, r1
    7136:	00 f1       	brcs	.+64     	; 0x7178 <update_menu+0xf8>
				break;
			default:
				*cursor = NEXTLINE;
    7138:	88 e2       	ldi	r24, 0x28	; 40
    713a:	90 e0       	ldi	r25, 0x00	; 0
    713c:	18 c0       	rjmp	.+48     	; 0x716e <update_menu+0xee>
				break;
		}
	}

	if (button == UP)	
    713e:	20 3b       	cpi	r18, 0xB0	; 176
    7140:	c9 f4       	brne	.+50     	; 0x7174 <update_menu+0xf4>
	{
		switch(*cursor) 
    7142:	88 81       	ld	r24, Y
    7144:	99 81       	ldd	r25, Y+1	; 0x01
    7146:	8f 30       	cpi	r24, 0x0F	; 15
    7148:	91 05       	cpc	r25, r1
    714a:	61 f0       	breq	.+24     	; 0x7164 <update_menu+0xe4>
    714c:	70 f0       	brcs	.+28     	; 0x716a <update_menu+0xea>
    714e:	8b 31       	cpi	r24, 0x1B	; 27
    7150:	91 05       	cpc	r25, r1
    7152:	29 f0       	breq	.+10     	; 0x715e <update_menu+0xde>
    7154:	87 97       	sbiw	r24, 0x27	; 39
    7156:	49 f4       	brne	.+18     	; 0x716a <update_menu+0xea>
		{
			case LINE3:
				*cursor = LINE2;
    7158:	8b e1       	ldi	r24, 0x1B	; 27
    715a:	90 e0       	ldi	r25, 0x00	; 0
    715c:	08 c0       	rjmp	.+16     	; 0x716e <update_menu+0xee>
				break;	
			case LINE2:
				*cursor = LINE1;
    715e:	8f e0       	ldi	r24, 0x0F	; 15
    7160:	90 e0       	ldi	r25, 0x00	; 0
    7162:	05 c0       	rjmp	.+10     	; 0x716e <update_menu+0xee>
				break;
			case LINE1:
				*cursor = LINE0;
    7164:	83 e0       	ldi	r24, 0x03	; 3
    7166:	90 e0       	ldi	r25, 0x00	; 0
    7168:	02 c0       	rjmp	.+4      	; 0x716e <update_menu+0xee>
				break;
			case LINE0:
				*cursor = PREVLINE;
    716a:	82 e0       	ldi	r24, 0x02	; 2
    716c:	90 e0       	ldi	r25, 0x00	; 0
    716e:	99 83       	std	Y+1, r25	; 0x01
    7170:	88 83       	st	Y, r24
				break;
    7172:	02 c0       	rjmp	.+4      	; 0x7178 <update_menu+0xf8>
				*cursor = PREVLINE;
				break;
		}
	}

	if (button != NONE)	
    7174:	20 3f       	cpi	r18, 0xF0	; 240
    7176:	61 f0       	breq	.+24     	; 0x7190 <update_menu+0x110>
	{
		menu_beep(1);
    7178:	81 e0       	ldi	r24, 0x01	; 1
    717a:	0e 94 2c 38 	call	0x7058	; 0x7058 <menu_beep>
    717e:	4f ef       	ldi	r20, 0xFF	; 255
    7180:	84 e3       	ldi	r24, 0x34	; 52
    7182:	9c e0       	ldi	r25, 0x0C	; 12
    7184:	41 50       	subi	r20, 0x01	; 1
    7186:	80 40       	sbci	r24, 0x00	; 0
    7188:	90 40       	sbci	r25, 0x00	; 0
    718a:	e1 f7       	brne	.-8      	; 0x7184 <update_menu+0x104>
    718c:	00 c0       	rjmp	.+0      	; 0x718e <update_menu+0x10e>
    718e:	00 00       	nop
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    7190:	88 81       	ld	r24, Y
    7192:	99 81       	ldd	r25, Y+1	; 0x01
    7194:	02 97       	sbiw	r24, 0x02	; 2
    7196:	71 f4       	brne	.+28     	; 0x71b4 <update_menu+0x134>
	{
		*cursor  = LINE0;
    7198:	83 e0       	ldi	r24, 0x03	; 3
    719a:	90 e0       	ldi	r25, 0x00	; 0
    719c:	99 83       	std	Y+1, r25	; 0x01
    719e:	88 83       	st	Y, r24
		if (*top > start) 
    71a0:	d7 01       	movw	r26, r14
    71a2:	8d 91       	ld	r24, X+
    71a4:	9c 91       	ld	r25, X
    71a6:	11 97       	sbiw	r26, 0x01	; 1
    71a8:	88 16       	cp	r8, r24
    71aa:	99 06       	cpc	r9, r25
    71ac:	18 f4       	brcc	.+6      	; 0x71b4 <update_menu+0x134>
		{
			*top = *top - 1;								// Shuffle list up
    71ae:	01 97       	sbiw	r24, 0x01	; 1
    71b0:	8d 93       	st	X+, r24
    71b2:	9c 93       	st	X, r25
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    71b4:	88 81       	ld	r24, Y
    71b6:	99 81       	ldd	r25, Y+1	; 0x01
    71b8:	88 97       	sbiw	r24, 0x28	; 40
    71ba:	b1 f4       	brne	.+44     	; 0x71e8 <update_menu+0x168>
	{
		*cursor  = LINE3;
    71bc:	87 e2       	ldi	r24, 0x27	; 39
    71be:	90 e0       	ldi	r25, 0x00	; 0
    71c0:	99 83       	std	Y+1, r25	; 0x01
    71c2:	88 83       	st	Y, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    71c4:	f7 01       	movw	r30, r14
    71c6:	80 81       	ld	r24, Z
    71c8:	91 81       	ldd	r25, Z+1	; 0x01
    71ca:	9c 01       	movw	r18, r24
    71cc:	2d 5f       	subi	r18, 0xFD	; 253
    71ce:	3f 4f       	sbci	r19, 0xFF	; 255
    71d0:	f1 e0       	ldi	r31, 0x01	; 1
    71d2:	af 1a       	sub	r10, r31
    71d4:	b1 08       	sbc	r11, r1
    71d6:	a8 0c       	add	r10, r8
    71d8:	b9 1c       	adc	r11, r9
    71da:	2a 15       	cp	r18, r10
    71dc:	3b 05       	cpc	r19, r11
    71de:	20 f4       	brcc	.+8      	; 0x71e8 <update_menu+0x168>
		{
			*top = *top + 1;								// Shuffle list down
    71e0:	01 96       	adiw	r24, 0x01	; 1
    71e2:	d7 01       	movw	r26, r14
    71e4:	8d 93       	st	X+, r24
    71e6:	9c 93       	st	X, r25
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    71e8:	f7 01       	movw	r30, r14
    71ea:	80 81       	ld	r24, Z
    71ec:	91 81       	ldd	r25, Z+1	; 0x01
    71ee:	86 19       	sub	r24, r6
    71f0:	97 09       	sbc	r25, r7
    71f2:	91 83       	std	Z+1, r25	; 0x01
    71f4:	80 83       	st	Z, r24
}
    71f6:	df 91       	pop	r29
    71f8:	cf 91       	pop	r28
    71fa:	1f 91       	pop	r17
    71fc:	0f 91       	pop	r16
    71fe:	ff 90       	pop	r15
    7200:	ef 90       	pop	r14
    7202:	df 90       	pop	r13
    7204:	cf 90       	pop	r12
    7206:	bf 90       	pop	r11
    7208:	af 90       	pop	r10
    720a:	9f 90       	pop	r9
    720c:	8f 90       	pop	r8
    720e:	7f 90       	pop	r7
    7210:	6f 90       	pop	r6
    7212:	08 95       	ret

00007214 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    7214:	28 2f       	mov	r18, r24
    7216:	30 e0       	ldi	r19, 0x00	; 0
    7218:	43 e0       	ldi	r20, 0x03	; 3
    721a:	50 e0       	ldi	r21, 0x00	; 0
    721c:	69 e0       	ldi	r22, 0x09	; 9
    721e:	71 e0       	ldi	r23, 0x01	; 1
    7220:	8d e0       	ldi	r24, 0x0D	; 13
    7222:	90 e0       	ldi	r25, 0x00	; 0
    7224:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <LCD_Display_Text>

00007228 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint16_t MenuOffsets, const uint16_t* text_link, uint16_t cursor)
{
    7228:	2f 92       	push	r2
    722a:	3f 92       	push	r3
    722c:	4f 92       	push	r4
    722e:	5f 92       	push	r5
    7230:	6f 92       	push	r6
    7232:	7f 92       	push	r7
    7234:	8f 92       	push	r8
    7236:	9f 92       	push	r9
    7238:	af 92       	push	r10
    723a:	bf 92       	push	r11
    723c:	cf 92       	push	r12
    723e:	df 92       	push	r13
    7240:	ef 92       	push	r14
    7242:	ff 92       	push	r15
    7244:	0f 93       	push	r16
    7246:	1f 93       	push	r17
    7248:	cf 93       	push	r28
    724a:	df 93       	push	r29
    724c:	cd b7       	in	r28, 0x3d	; 61
    724e:	de b7       	in	r29, 0x3e	; 62
    7250:	2c 97       	sbiw	r28, 0x0c	; 12
    7252:	0f b6       	in	r0, 0x3f	; 63
    7254:	f8 94       	cli
    7256:	de bf       	out	0x3e, r29	; 62
    7258:	0f be       	out	0x3f, r0	; 63
    725a:	cd bf       	out	0x3d, r28	; 61
    725c:	2c 01       	movw	r4, r24
    725e:	4a 01       	movw	r8, r20
    7260:	3f 83       	std	Y+7, r19	; 0x07
    7262:	2e 83       	std	Y+6, r18	; 0x06
    7264:	08 87       	std	Y+8, r16	; 0x08
    7266:	e9 86       	std	Y+9, r14	; 0x09
    7268:	aa 86       	std	Y+10, r10	; 0x0a
	uint16_t base = 0;
	uint16_t offset = 0;
	uint16_t text = 0;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    726a:	80 e0       	ldi	r24, 0x00	; 0
    726c:	91 e0       	ldi	r25, 0x01	; 1
    726e:	6b 87       	std	Y+11, r22	; 0x0b
    7270:	7c 87       	std	Y+12, r23	; 0x0c
    7272:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>
	print_menu_frame(BASIC);
    7276:	80 e0       	ldi	r24, 0x00	; 0
    7278:	0e 94 6d 35 	call	0x6ada	; 0x6ada <print_menu_frame>
    727c:	25 e0       	ldi	r18, 0x05	; 5
    727e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7280:	7c 85       	ldd	r23, Y+12	; 0x0c
    7282:	26 9f       	mul	r18, r22
    7284:	c0 01       	movw	r24, r0
    7286:	27 9f       	mul	r18, r23
    7288:	90 0d       	add	r25, r0
    728a:	11 24       	eor	r1, r1
    728c:	2e 80       	ldd	r2, Y+6	; 0x06
    728e:	3f 80       	ldd	r3, Y+7	; 0x07
    7290:	28 1a       	sub	r2, r24
    7292:	39 0a       	sbc	r3, r25
    7294:	24 9d       	mul	r18, r4
    7296:	c0 01       	movw	r24, r0
    7298:	25 9d       	mul	r18, r5
    729a:	90 0d       	add	r25, r0
    729c:	11 24       	eor	r1, r1
    729e:	28 0e       	add	r2, r24
    72a0:	39 1e       	adc	r3, r25
    72a2:	cb 01       	movw	r24, r22
    72a4:	88 0f       	add	r24, r24
    72a6:	99 1f       	adc	r25, r25
    72a8:	c8 1a       	sub	r12, r24
    72aa:	d9 0a       	sbc	r13, r25
    72ac:	c2 01       	movw	r24, r4
    72ae:	88 0f       	add	r24, r24
    72b0:	99 1f       	adc	r25, r25
    72b2:	c8 0e       	add	r12, r24
    72b4:	d9 1e       	adc	r13, r25
    72b6:	72 01       	movw	r14, r4
    72b8:	a1 2c       	mov	r10, r1
    72ba:	b1 2c       	mov	r11, r1
    72bc:	41 2c       	mov	r4, r1
    72be:	51 2c       	mov	r5, r1
    72c0:	83 e9       	ldi	r24, 0x93	; 147
    72c2:	68 2e       	mov	r6, r24
    72c4:	8b e1       	ldi	r24, 0x1B	; 27
    72c6:	78 2e       	mov	r7, r24
    72c8:	6e 18       	sub	r6, r14
    72ca:	7f 08       	sbc	r7, r15
    72cc:	86 1a       	sub	r8, r22
    72ce:	97 0a       	sbc	r9, r23
    72d0:	83 01       	movw	r16, r6
    72d2:	0e 0d       	add	r16, r14
    72d4:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    72d6:	f8 01       	movw	r30, r16
    72d8:	24 91       	lpm	r18, Z
    72da:	30 e0       	ldi	r19, 0x00	; 0
    72dc:	4a e0       	ldi	r20, 0x0A	; 10
    72de:	50 e0       	ldi	r21, 0x00	; 0
    72e0:	67 e9       	ldi	r22, 0x97	; 151
    72e2:	7c e0       	ldi	r23, 0x0C	; 12
    72e4:	c7 01       	movw	r24, r14
    72e6:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    72ea:	f8 85       	ldd	r31, Y+8	; 0x08
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    72ec:	45 e0       	ldi	r20, 0x05	; 5
    72ee:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    72f0:	f1 11       	cpse	r31, r1
    72f2:	04 c0       	rjmp	.+8      	; 0x72fc <print_menu_items+0xd4>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    72f4:	b5 01       	movw	r22, r10
    72f6:	62 0d       	add	r22, r2
    72f8:	73 1d       	adc	r23, r3
    72fa:	02 c0       	rjmp	.+4      	; 0x7300 <print_menu_items+0xd8>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    72fc:	6e 81       	ldd	r22, Y+6	; 0x06
    72fe:	7f 81       	ldd	r23, Y+7	; 0x07
    7300:	ce 01       	movw	r24, r28
    7302:	01 96       	adiw	r24, 0x01	; 1
    7304:	0e 94 2b 51 	call	0xa256	; 0xa256 <memcpy_P>
    7308:	f2 01       	movw	r30, r4
    730a:	ec 0d       	add	r30, r12
    730c:	fd 1d       	adc	r31, r13
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
    730e:	45 91       	lpm	r20, Z+
    7310:	54 91       	lpm	r21, Z
    7312:	f4 01       	movw	r30, r8
    7314:	ee 0d       	add	r30, r14
    7316:	ff 1d       	adc	r31, r15
		offset = values[top + i - start];
    7318:	80 81       	ld	r24, Z
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    731a:	f8 01       	movw	r30, r16
    731c:	04 91       	lpm	r16, Z
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
		offset = values[top + i - start];
    731e:	99 27       	eor	r25, r25
    7320:	87 fd       	sbrc	r24, 7
    7322:	90 95       	com	r25
		text = base + offset;
    7324:	48 0f       	add	r20, r24
    7326:	59 1f       	adc	r21, r25
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    7328:	29 85       	ldd	r18, Y+9	; 0x09
    732a:	6c 81       	ldd	r22, Y+4	; 0x04
    732c:	0e 94 03 36 	call	0x6c06	; 0x6c06 <print_menu_text>
    7330:	ff ef       	ldi	r31, 0xFF	; 255
    7332:	ef 1a       	sub	r14, r31
    7334:	ff 0a       	sbc	r15, r31
    7336:	82 e0       	ldi	r24, 0x02	; 2
    7338:	48 0e       	add	r4, r24
    733a:	51 1c       	adc	r5, r1
    733c:	e5 e0       	ldi	r30, 0x05	; 5
    733e:	ae 0e       	add	r10, r30
    7340:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(BASIC);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    7342:	f4 e1       	ldi	r31, 0x14	; 20
    7344:	af 16       	cp	r10, r31
    7346:	b1 04       	cpc	r11, r1
    7348:	09 f0       	breq	.+2      	; 0x734c <print_menu_items+0x124>
    734a:	c2 cf       	rjmp	.-124    	; 0x72d0 <print_menu_items+0xa8>
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    734c:	8a 85       	ldd	r24, Y+10	; 0x0a
    734e:	0e 94 0a 39 	call	0x7214	; 0x7214 <print_cursor>
	write_buffer(buffer);
    7352:	80 e0       	ldi	r24, 0x00	; 0
    7354:	91 e0       	ldi	r25, 0x01	; 1
    7356:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>
	poll_buttons(true);
    735a:	81 e0       	ldi	r24, 0x01	; 1
    735c:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <poll_buttons>
}
    7360:	2c 96       	adiw	r28, 0x0c	; 12
    7362:	0f b6       	in	r0, 0x3f	; 63
    7364:	f8 94       	cli
    7366:	de bf       	out	0x3e, r29	; 62
    7368:	0f be       	out	0x3f, r0	; 63
    736a:	cd bf       	out	0x3d, r28	; 61
    736c:	df 91       	pop	r29
    736e:	cf 91       	pop	r28
    7370:	1f 91       	pop	r17
    7372:	0f 91       	pop	r16
    7374:	ff 90       	pop	r15
    7376:	ef 90       	pop	r14
    7378:	df 90       	pop	r13
    737a:	cf 90       	pop	r12
    737c:	bf 90       	pop	r11
    737e:	af 90       	pop	r10
    7380:	9f 90       	pop	r9
    7382:	8f 90       	pop	r8
    7384:	7f 90       	pop	r7
    7386:	6f 90       	pop	r6
    7388:	5f 90       	pop	r5
    738a:	4f 90       	pop	r4
    738c:	3f 90       	pop	r3
    738e:	2f 90       	pop	r2
    7390:	08 95       	ret

00007392 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    7392:	6f 92       	push	r6
    7394:	7f 92       	push	r7
    7396:	8f 92       	push	r8
    7398:	af 92       	push	r10
    739a:	bf 92       	push	r11
    739c:	cf 92       	push	r12
    739e:	df 92       	push	r13
    73a0:	ef 92       	push	r14
    73a2:	ff 92       	push	r15
    73a4:	0f 93       	push	r16
    73a6:	1f 93       	push	r17
    73a8:	cf 93       	push	r28
    73aa:	df 93       	push	r29
    73ac:	00 d0       	rcall	.+0      	; 0x73ae <menu_flight+0x1c>
    73ae:	00 d0       	rcall	.+0      	; 0x73b0 <menu_flight+0x1e>
    73b0:	1f 92       	push	r1
    73b2:	cd b7       	in	r28, 0x3d	; 61
    73b4:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    73b6:	90 91 1f 08 	lds	r25, 0x081F
    73ba:	99 23       	and	r25, r25
    73bc:	41 f0       	breq	.+16     	; 0x73ce <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    73be:	2a ea       	ldi	r18, 0xAA	; 170
    73c0:	30 e0       	ldi	r19, 0x00	; 0
    73c2:	30 93 37 05 	sts	0x0537, r19
    73c6:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    73ca:	10 92 1f 08 	sts	0x081F, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    73ce:	92 e1       	ldi	r25, 0x12	; 18
    73d0:	89 9f       	mul	r24, r25
    73d2:	30 01       	movw	r6, r0
    73d4:	11 24       	eor	r1, r1
    73d6:	c3 01       	movw	r24, r6
    73d8:	81 50       	subi	r24, 0x01	; 1
    73da:	9a 4f       	sbci	r25, 0xFA	; 250
    73dc:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    73de:	80 91 1d 08 	lds	r24, 0x081D
    73e2:	80 37       	cpi	r24, 0x70	; 112
    73e4:	09 f4       	brne	.+2      	; 0x73e8 <menu_flight+0x56>
    73e6:	66 c0       	rjmp	.+204    	; 0x74b4 <menu_flight+0x122>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const uint16_t*)FlightMenuText, cursor);
    73e8:	a0 90 04 05 	lds	r10, 0x0504
    73ec:	b0 90 05 05 	lds	r11, 0x0505
    73f0:	31 ef       	ldi	r19, 0xF1	; 241
    73f2:	c3 2e       	mov	r12, r19
    73f4:	3b e1       	ldi	r19, 0x1B	; 27
    73f6:	d3 2e       	mov	r13, r19
    73f8:	4f e4       	ldi	r20, 0x4F	; 79
    73fa:	e4 2e       	mov	r14, r20
    73fc:	f1 2c       	mov	r15, r1
    73fe:	00 e0       	ldi	r16, 0x00	; 0
    7400:	27 e9       	ldi	r18, 0x97	; 151
    7402:	3b e1       	ldi	r19, 0x1B	; 27
    7404:	a3 01       	movw	r20, r6
    7406:	6a ea       	ldi	r22, 0xAA	; 170
    7408:	70 e0       	ldi	r23, 0x00	; 0
    740a:	80 91 36 05 	lds	r24, 0x0536
    740e:	90 91 37 05 	lds	r25, 0x0537
    7412:	0e 94 14 39 	call	0x7228	; 0x7228 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    7416:	51 e3       	ldi	r21, 0x31	; 49
    7418:	c5 2e       	mov	r12, r21
    741a:	55 e0       	ldi	r21, 0x05	; 5
    741c:	d5 2e       	mov	r13, r21
    741e:	66 e3       	ldi	r22, 0x36	; 54
    7420:	e6 2e       	mov	r14, r22
    7422:	65 e0       	ldi	r22, 0x05	; 5
    7424:	f6 2e       	mov	r15, r22
    7426:	04 e0       	ldi	r16, 0x04	; 4
    7428:	15 e0       	ldi	r17, 0x05	; 5
    742a:	20 91 1d 08 	lds	r18, 0x081D
    742e:	40 e0       	ldi	r20, 0x00	; 0
    7430:	50 e0       	ldi	r21, 0x00	; 0
    7432:	6a ea       	ldi	r22, 0xAA	; 170
    7434:	70 e0       	ldi	r23, 0x00	; 0
    7436:	82 e1       	ldi	r24, 0x12	; 18
    7438:	90 e0       	ldi	r25, 0x00	; 0
    743a:	0e 94 40 38 	call	0x7080	; 0x7080 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    743e:	60 91 31 05 	lds	r22, 0x0531
    7442:	6a 5a       	subi	r22, 0xAA	; 170
    7444:	87 e9       	ldi	r24, 0x97	; 151
    7446:	9b e1       	ldi	r25, 0x1B	; 27
    7448:	0e 94 d3 35 	call	0x6ba6	; 0x6ba6 <get_menu_range>
    744c:	29 83       	std	Y+1, r18	; 0x01
    744e:	3a 83       	std	Y+2, r19	; 0x02
    7450:	4b 83       	std	Y+3, r20	; 0x03
    7452:	5c 83       	std	Y+4, r21	; 0x04
    7454:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    7456:	80 91 1d 08 	lds	r24, 0x081D
    745a:	80 3e       	cpi	r24, 0xE0	; 224
    745c:	f9 f4       	brne	.+62     	; 0x749c <menu_flight+0x10a>
		{
			text_link = pgm_read_word(&FlightMenuText[menu_temp - FLIGHTSTART]);
    745e:	80 91 31 05 	lds	r24, 0x0531
    7462:	90 91 32 05 	lds	r25, 0x0532
    7466:	bc 01       	movw	r22, r24
    7468:	6a 5a       	subi	r22, 0xAA	; 170
    746a:	71 09       	sbc	r23, r1
    746c:	fb 01       	movw	r30, r22
    746e:	ee 0f       	add	r30, r30
    7470:	ff 1f       	adc	r31, r31
    7472:	ef 50       	subi	r30, 0x0F	; 15
    7474:	f4 4e       	sbci	r31, 0xE4	; 228
    7476:	a5 90       	lpm	r10, Z+
    7478:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    747a:	bb 24       	eor	r11, r11
    747c:	66 0d       	add	r22, r6
    747e:	77 1d       	adc	r23, r7
    7480:	1f 92       	push	r1
    7482:	1f 92       	push	r1
    7484:	81 2c       	mov	r8, r1
    7486:	c1 2c       	mov	r12, r1
    7488:	e9 80       	ldd	r14, Y+1	; 0x01
    748a:	fa 80       	ldd	r15, Y+2	; 0x02
    748c:	0b 81       	ldd	r16, Y+3	; 0x03
    748e:	1c 81       	ldd	r17, Y+4	; 0x04
    7490:	2d 81       	ldd	r18, Y+5	; 0x05
    7492:	41 e0       	ldi	r20, 0x01	; 1
    7494:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <do_menu_item>
    7498:	0f 90       	pop	r0
    749a:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    749c:	80 91 1d 08 	lds	r24, 0x081D
    74a0:	80 3e       	cpi	r24, 0xE0	; 224
    74a2:	09 f0       	breq	.+2      	; 0x74a6 <menu_flight+0x114>
    74a4:	9c cf       	rjmp	.-200    	; 0x73de <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    74a6:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    74aa:	0e 94 be 19 	call	0x337c	; 0x337c <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    74ae:	0e 94 3b 3b 	call	0x7676	; 0x7676 <Wait_BUTTON4>
    74b2:	95 cf       	rjmp	.-214    	; 0x73de <menu_flight+0x4c>
		}
	}
}
    74b4:	0f 90       	pop	r0
    74b6:	0f 90       	pop	r0
    74b8:	0f 90       	pop	r0
    74ba:	0f 90       	pop	r0
    74bc:	0f 90       	pop	r0
    74be:	df 91       	pop	r29
    74c0:	cf 91       	pop	r28
    74c2:	1f 91       	pop	r17
    74c4:	0f 91       	pop	r16
    74c6:	ff 90       	pop	r15
    74c8:	ef 90       	pop	r14
    74ca:	df 90       	pop	r13
    74cc:	cf 90       	pop	r12
    74ce:	bf 90       	pop	r11
    74d0:	af 90       	pop	r10
    74d2:	8f 90       	pop	r8
    74d4:	7f 90       	pop	r7
    74d6:	6f 90       	pop	r6
    74d8:	08 95       	ret

000074da <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    74da:	90 e0       	ldi	r25, 0x00	; 0
    74dc:	fc 01       	movw	r30, r24
    74de:	ed 54       	subi	r30, 0x4D	; 77
    74e0:	f1 09       	sbc	r31, r1
    74e2:	e4 31       	cpi	r30, 0x14	; 20
    74e4:	f1 05       	cpc	r31, r1
    74e6:	80 f5       	brcc	.+96     	; 0x7548 <do_main_menu_item+0x6e>
    74e8:	e7 5b       	subi	r30, 0xB7	; 183
    74ea:	ff 4f       	sbci	r31, 0xFF	; 255
    74ec:	0c 94 f4 50 	jmp	0xa1e8	; 0xa1e8 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    74f0:	82 e0       	ldi	r24, 0x02	; 2
    74f2:	01 c0       	rjmp	.+2      	; 0x74f6 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    74f4:	81 e0       	ldi	r24, 0x01	; 1
    74f6:	0c 94 e7 3c 	jmp	0x79ce	; 0x79ce <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    74fa:	0c 94 0f 14 	jmp	0x281e	; 0x281e <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    74fe:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    7502:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    7506:	0c 94 00 13 	jmp	0x2600	; 0x2600 <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    750a:	80 e0       	ldi	r24, 0x00	; 0
    750c:	01 c0       	rjmp	.+2      	; 0x7510 <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    750e:	81 e0       	ldi	r24, 0x01	; 1
    7510:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    7514:	80 e0       	ldi	r24, 0x00	; 0
    7516:	01 c0       	rjmp	.+2      	; 0x751a <do_main_menu_item+0x40>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    7518:	81 e0       	ldi	r24, 0x01	; 1
    751a:	0c 94 48 3b 	jmp	0x7690	; 0x7690 <menu_mixer>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    751e:	82 e0       	ldi	r24, 0x02	; 2
    7520:	fc cf       	rjmp	.-8      	; 0x751a <do_main_menu_item+0x40>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    7522:	83 e0       	ldi	r24, 0x03	; 3
    7524:	fa cf       	rjmp	.-12     	; 0x751a <do_main_menu_item+0x40>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    7526:	84 e0       	ldi	r24, 0x04	; 4
    7528:	f8 cf       	rjmp	.-16     	; 0x751a <do_main_menu_item+0x40>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    752a:	85 e0       	ldi	r24, 0x05	; 5
    752c:	f6 cf       	rjmp	.-20     	; 0x751a <do_main_menu_item+0x40>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    752e:	86 e0       	ldi	r24, 0x06	; 6
    7530:	f4 cf       	rjmp	.-24     	; 0x751a <do_main_menu_item+0x40>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    7532:	87 e0       	ldi	r24, 0x07	; 7
    7534:	f2 cf       	rjmp	.-28     	; 0x751a <do_main_menu_item+0x40>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    7536:	81 e0       	ldi	r24, 0x01	; 1
    7538:	03 c0       	rjmp	.+6      	; 0x7540 <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    753a:	82 e0       	ldi	r24, 0x02	; 2
    753c:	01 c0       	rjmp	.+2      	; 0x7540 <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    753e:	83 e0       	ldi	r24, 0x03	; 3
    7540:	0c 94 ec 3b 	jmp	0x77d8	; 0x77d8 <menu_servo_setup>
			break;
		case MAINSTART+19:
			menu_log();				// 20. Error log
    7544:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <menu_log>
    7548:	08 95       	ret

0000754a <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    754a:	1f 99       	sbic	0x03, 7	; 3
    754c:	0a c0       	rjmp	.+20     	; 0x7562 <Wait_BUTTON1+0x18>
    754e:	2f e3       	ldi	r18, 0x3F	; 63
    7550:	8d e0       	ldi	r24, 0x0D	; 13
    7552:	93 e0       	ldi	r25, 0x03	; 3
    7554:	21 50       	subi	r18, 0x01	; 1
    7556:	80 40       	sbci	r24, 0x00	; 0
    7558:	90 40       	sbci	r25, 0x00	; 0
    755a:	e1 f7       	brne	.-8      	; 0x7554 <Wait_BUTTON1+0xa>
    755c:	00 c0       	rjmp	.+0      	; 0x755e <Wait_BUTTON1+0x14>
    755e:	00 00       	nop
    7560:	f4 cf       	rjmp	.-24     	; 0x754a <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    7562:	08 95       	ret

00007564 <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    7564:	9f 92       	push	r9
    7566:	af 92       	push	r10
    7568:	bf 92       	push	r11
    756a:	cf 92       	push	r12
    756c:	df 92       	push	r13
    756e:	ef 92       	push	r14
    7570:	ff 92       	push	r15
    7572:	0f 93       	push	r16
    7574:	1f 93       	push	r17
    7576:	cf 93       	push	r28
    7578:	df 93       	push	r29
	static uint16_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    757a:	80 ef       	ldi	r24, 0xF0	; 240
    757c:	80 93 1d 08 	sts	0x081D, r24

	menu_beep(1);
    7580:	81 e0       	ldi	r24, 0x01	; 1
    7582:	0e 94 2c 38 	call	0x7058	; 0x7058 <menu_beep>

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    7586:	0e 94 a5 3a 	call	0x754a	; 0x754a <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    758a:	23 e0       	ldi	r18, 0x03	; 3
    758c:	a2 2e       	mov	r10, r18
    758e:	b1 2c       	mov	r11, r1

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    7590:	30 ef       	ldi	r19, 0xF0	; 240
    7592:	93 2e       	mov	r9, r19
	menu_beep(1);

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    7594:	80 91 1d 08 	lds	r24, 0x081D
    7598:	80 37       	cpi	r24, 0x70	; 112
    759a:	09 f4       	brne	.+2      	; 0x759e <menu_main+0x3a>
    759c:	60 c0       	rjmp	.+192    	; 0x765e <menu_main+0xfa>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    759e:	80 e0       	ldi	r24, 0x00	; 0
    75a0:	91 e0       	ldi	r25, 0x01	; 1
    75a2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <clear_buffer>

		// Print menu
		print_menu_frame(BASIC);													// Frame
    75a6:	80 e0       	ldi	r24, 0x00	; 0
    75a8:	0e 94 6d 35 	call	0x6ada	; 0x6ada <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    75ac:	c0 e0       	ldi	r28, 0x00	; 0
    75ae:	d0 e0       	ldi	r29, 0x00	; 0
    75b0:	fe 01       	movw	r30, r28
    75b2:	ed 56       	subi	r30, 0x6D	; 109
    75b4:	f4 4e       	sbci	r31, 0xE4	; 228
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    75b6:	24 91       	lpm	r18, Z
    75b8:	30 e0       	ldi	r19, 0x00	; 0
    75ba:	80 91 08 05 	lds	r24, 0x0508
    75be:	90 91 09 05 	lds	r25, 0x0509
    75c2:	4a e0       	ldi	r20, 0x0A	; 10
    75c4:	50 e0       	ldi	r21, 0x00	; 0
    75c6:	67 e9       	ldi	r22, 0x97	; 151
    75c8:	7c e0       	ldi	r23, 0x0C	; 12
    75ca:	8c 0f       	add	r24, r28
    75cc:	9d 1f       	adc	r25, r29
    75ce:	0e 94 63 28 	call	0x50c6	; 0x50c6 <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(BASIC);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    75d2:	21 96       	adiw	r28, 0x01	; 1
    75d4:	c4 30       	cpi	r28, 0x04	; 4
    75d6:	d1 05       	cpc	r29, r1
    75d8:	59 f7       	brne	.-42     	; 0x75b0 <menu_main+0x4c>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    75da:	80 91 06 05 	lds	r24, 0x0506
    75de:	0e 94 0a 39 	call	0x7214	; 0x7214 <print_cursor>
		write_buffer(buffer);
    75e2:	80 e0       	ldi	r24, 0x00	; 0
    75e4:	91 e0       	ldi	r25, 0x01	; 1
    75e6:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    75ea:	81 e0       	ldi	r24, 0x01	; 1
    75ec:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    75f0:	84 e3       	ldi	r24, 0x34	; 52
    75f2:	c8 2e       	mov	r12, r24
    75f4:	85 e0       	ldi	r24, 0x05	; 5
    75f6:	d8 2e       	mov	r13, r24
    75f8:	98 e0       	ldi	r25, 0x08	; 8
    75fa:	e9 2e       	mov	r14, r25
    75fc:	95 e0       	ldi	r25, 0x05	; 5
    75fe:	f9 2e       	mov	r15, r25
    7600:	06 e0       	ldi	r16, 0x06	; 6
    7602:	15 e0       	ldi	r17, 0x05	; 5
    7604:	20 91 1d 08 	lds	r18, 0x081D
    7608:	40 e0       	ldi	r20, 0x00	; 0
    760a:	50 e0       	ldi	r21, 0x00	; 0
    760c:	6d e4       	ldi	r22, 0x4D	; 77
    760e:	70 e0       	ldi	r23, 0x00	; 0
    7610:	84 e1       	ldi	r24, 0x14	; 20
    7612:	90 e0       	ldi	r25, 0x00	; 0
    7614:	0e 94 40 38 	call	0x7080	; 0x7080 <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    7618:	80 91 34 05 	lds	r24, 0x0534
    761c:	90 91 35 05 	lds	r25, 0x0535
    7620:	20 91 33 05 	lds	r18, 0x0533
    7624:	30 e0       	ldi	r19, 0x00	; 0
    7626:	82 17       	cp	r24, r18
    7628:	93 07       	cpc	r25, r19
    762a:	69 f0       	breq	.+26     	; 0x7646 <menu_main+0xe2>
		{
			cursor = LINE0;
    762c:	b0 92 05 05 	sts	0x0505, r11
    7630:	a0 92 04 05 	sts	0x0504, r10
			menu_temp = 0;
    7634:	10 92 32 05 	sts	0x0532, r1
    7638:	10 92 31 05 	sts	0x0531, r1
			old_menu = main_temp;
    763c:	80 93 33 05 	sts	0x0533, r24
			menu_flag = 1;
    7640:	21 e0       	ldi	r18, 0x01	; 1
    7642:	20 93 1f 08 	sts	0x081F, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    7646:	20 91 1d 08 	lds	r18, 0x081D
    764a:	20 3e       	cpi	r18, 0xE0	; 224
    764c:	09 f0       	breq	.+2      	; 0x7650 <menu_main+0xec>
    764e:	a2 cf       	rjmp	.-188    	; 0x7594 <menu_main+0x30>
		{
			do_main_menu_item(main_temp);
    7650:	0e 94 6d 3a 	call	0x74da	; 0x74da <do_main_menu_item>
			button = NONE;
    7654:	90 92 1d 08 	sts	0x081D, r9

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    7658:	0e 94 a5 3a 	call	0x754a	; 0x754a <Wait_BUTTON1>
    765c:	9b cf       	rjmp	.-202    	; 0x7594 <menu_main+0x30>
		}
	}
}
    765e:	df 91       	pop	r29
    7660:	cf 91       	pop	r28
    7662:	1f 91       	pop	r17
    7664:	0f 91       	pop	r16
    7666:	ff 90       	pop	r15
    7668:	ef 90       	pop	r14
    766a:	df 90       	pop	r13
    766c:	cf 90       	pop	r12
    766e:	bf 90       	pop	r11
    7670:	af 90       	pop	r10
    7672:	9f 90       	pop	r9
    7674:	08 95       	ret

00007676 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    7676:	1c 99       	sbic	0x03, 4	; 3
    7678:	0a c0       	rjmp	.+20     	; 0x768e <Wait_BUTTON4+0x18>
    767a:	2f e3       	ldi	r18, 0x3F	; 63
    767c:	8d e0       	ldi	r24, 0x0D	; 13
    767e:	93 e0       	ldi	r25, 0x03	; 3
    7680:	21 50       	subi	r18, 0x01	; 1
    7682:	80 40       	sbci	r24, 0x00	; 0
    7684:	90 40       	sbci	r25, 0x00	; 0
    7686:	e1 f7       	brne	.-8      	; 0x7680 <Wait_BUTTON4+0xa>
    7688:	00 c0       	rjmp	.+0      	; 0x768a <Wait_BUTTON4+0x14>
    768a:	00 00       	nop
    768c:	f4 cf       	rjmp	.-24     	; 0x7676 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    768e:	08 95       	ret

00007690 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    7690:	6f 92       	push	r6
    7692:	7f 92       	push	r7
    7694:	8f 92       	push	r8
    7696:	af 92       	push	r10
    7698:	bf 92       	push	r11
    769a:	cf 92       	push	r12
    769c:	df 92       	push	r13
    769e:	ef 92       	push	r14
    76a0:	ff 92       	push	r15
    76a2:	0f 93       	push	r16
    76a4:	1f 93       	push	r17
    76a6:	cf 93       	push	r28
    76a8:	df 93       	push	r29
    76aa:	00 d0       	rcall	.+0      	; 0x76ac <menu_mixer+0x1c>
    76ac:	00 d0       	rcall	.+0      	; 0x76ae <menu_mixer+0x1e>
    76ae:	1f 92       	push	r1
    76b0:	cd b7       	in	r28, 0x3d	; 61
    76b2:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    76b4:	90 91 1f 08 	lds	r25, 0x081F
    76b8:	99 23       	and	r25, r25
    76ba:	41 f0       	breq	.+16     	; 0x76cc <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    76bc:	2e eb       	ldi	r18, 0xBE	; 190
    76be:	30 e0       	ldi	r19, 0x00	; 0
    76c0:	30 93 37 05 	sts	0x0537, r19
    76c4:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    76c8:	10 92 1f 08 	sts	0x081F, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    76cc:	96 e2       	ldi	r25, 0x26	; 38
    76ce:	89 9f       	mul	r24, r25
    76d0:	30 01       	movw	r6, r0
    76d2:	11 24       	eor	r1, r1
    76d4:	c3 01       	movw	r24, r6
    76d6:	8d 59       	subi	r24, 0x9D	; 157
    76d8:	99 4f       	sbci	r25, 0xF9	; 249
    76da:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    76dc:	80 91 1d 08 	lds	r24, 0x081D
    76e0:	80 37       	cpi	r24, 0x70	; 112
    76e2:	09 f4       	brne	.+2      	; 0x76e6 <menu_mixer+0x56>
    76e4:	66 c0       	rjmp	.+204    	; 0x77b2 <menu_mixer+0x122>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const uint16_t*)MixerMenuText, cursor);
    76e6:	a0 90 04 05 	lds	r10, 0x0504
    76ea:	b0 90 05 05 	lds	r11, 0x0505
    76ee:	3f eb       	ldi	r19, 0xBF	; 191
    76f0:	c3 2e       	mov	r12, r19
    76f2:	3c e1       	ldi	r19, 0x1C	; 28
    76f4:	d3 2e       	mov	r13, r19
    76f6:	49 e5       	ldi	r20, 0x59	; 89
    76f8:	e4 2e       	mov	r14, r20
    76fa:	f1 2c       	mov	r15, r1
    76fc:	00 e0       	ldi	r16, 0x00	; 0
    76fe:	25 e1       	ldi	r18, 0x15	; 21
    7700:	3c e1       	ldi	r19, 0x1C	; 28
    7702:	a3 01       	movw	r20, r6
    7704:	6e eb       	ldi	r22, 0xBE	; 190
    7706:	70 e0       	ldi	r23, 0x00	; 0
    7708:	80 91 36 05 	lds	r24, 0x0536
    770c:	90 91 37 05 	lds	r25, 0x0537
    7710:	0e 94 14 39 	call	0x7228	; 0x7228 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    7714:	51 e3       	ldi	r21, 0x31	; 49
    7716:	c5 2e       	mov	r12, r21
    7718:	55 e0       	ldi	r21, 0x05	; 5
    771a:	d5 2e       	mov	r13, r21
    771c:	66 e3       	ldi	r22, 0x36	; 54
    771e:	e6 2e       	mov	r14, r22
    7720:	65 e0       	ldi	r22, 0x05	; 5
    7722:	f6 2e       	mov	r15, r22
    7724:	04 e0       	ldi	r16, 0x04	; 4
    7726:	15 e0       	ldi	r17, 0x05	; 5
    7728:	20 91 1d 08 	lds	r18, 0x081D
    772c:	40 e0       	ldi	r20, 0x00	; 0
    772e:	50 e0       	ldi	r21, 0x00	; 0
    7730:	6e eb       	ldi	r22, 0xBE	; 190
    7732:	70 e0       	ldi	r23, 0x00	; 0
    7734:	82 e2       	ldi	r24, 0x22	; 34
    7736:	90 e0       	ldi	r25, 0x00	; 0
    7738:	0e 94 40 38 	call	0x7080	; 0x7080 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    773c:	60 91 31 05 	lds	r22, 0x0531
    7740:	6e 5b       	subi	r22, 0xBE	; 190
    7742:	85 e1       	ldi	r24, 0x15	; 21
    7744:	9c e1       	ldi	r25, 0x1C	; 28
    7746:	0e 94 d3 35 	call	0x6ba6	; 0x6ba6 <get_menu_range>
    774a:	29 83       	std	Y+1, r18	; 0x01
    774c:	3a 83       	std	Y+2, r19	; 0x02
    774e:	4b 83       	std	Y+3, r20	; 0x03
    7750:	5c 83       	std	Y+4, r21	; 0x04
    7752:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    7754:	80 91 1d 08 	lds	r24, 0x081D
    7758:	80 3e       	cpi	r24, 0xE0	; 224
    775a:	f9 f4       	brne	.+62     	; 0x779a <menu_mixer+0x10a>
		{
			text_link = pgm_read_word(&MixerMenuText[menu_temp - MIXERSTART]);
    775c:	80 91 31 05 	lds	r24, 0x0531
    7760:	90 91 32 05 	lds	r25, 0x0532
    7764:	bc 01       	movw	r22, r24
    7766:	6e 5b       	subi	r22, 0xBE	; 190
    7768:	71 09       	sbc	r23, r1
    776a:	fb 01       	movw	r30, r22
    776c:	ee 0f       	add	r30, r30
    776e:	ff 1f       	adc	r31, r31
    7770:	e1 54       	subi	r30, 0x41	; 65
    7772:	f3 4e       	sbci	r31, 0xE3	; 227
    7774:	a5 90       	lpm	r10, Z+
    7776:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    7778:	bb 24       	eor	r11, r11
    777a:	66 0d       	add	r22, r6
    777c:	77 1d       	adc	r23, r7
    777e:	1f 92       	push	r1
    7780:	1f 92       	push	r1
    7782:	81 2c       	mov	r8, r1
    7784:	c1 2c       	mov	r12, r1
    7786:	e9 80       	ldd	r14, Y+1	; 0x01
    7788:	fa 80       	ldd	r15, Y+2	; 0x02
    778a:	0b 81       	ldd	r16, Y+3	; 0x03
    778c:	1c 81       	ldd	r17, Y+4	; 0x04
    778e:	2d 81       	ldd	r18, Y+5	; 0x05
    7790:	41 e0       	ldi	r20, 0x01	; 1
    7792:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <do_menu_item>
    7796:	0f 90       	pop	r0
    7798:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    779a:	80 91 1d 08 	lds	r24, 0x081D
    779e:	80 3e       	cpi	r24, 0xE0	; 224
    77a0:	09 f0       	breq	.+2      	; 0x77a4 <menu_mixer+0x114>
    77a2:	9c cf       	rjmp	.-200    	; 0x76dc <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    77a4:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    77a8:	0e 94 be 19 	call	0x337c	; 0x337c <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    77ac:	0e 94 3b 3b 	call	0x7676	; 0x7676 <Wait_BUTTON4>
    77b0:	95 cf       	rjmp	.-214    	; 0x76dc <menu_mixer+0x4c>
		}
	}
}
    77b2:	0f 90       	pop	r0
    77b4:	0f 90       	pop	r0
    77b6:	0f 90       	pop	r0
    77b8:	0f 90       	pop	r0
    77ba:	0f 90       	pop	r0
    77bc:	df 91       	pop	r29
    77be:	cf 91       	pop	r28
    77c0:	1f 91       	pop	r17
    77c2:	0f 91       	pop	r16
    77c4:	ff 90       	pop	r15
    77c6:	ef 90       	pop	r14
    77c8:	df 90       	pop	r13
    77ca:	cf 90       	pop	r12
    77cc:	bf 90       	pop	r11
    77ce:	af 90       	pop	r10
    77d0:	8f 90       	pop	r8
    77d2:	7f 90       	pop	r7
    77d4:	6f 90       	pop	r6
    77d6:	08 95       	ret

000077d8 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    77d8:	2f 92       	push	r2
    77da:	3f 92       	push	r3
    77dc:	4f 92       	push	r4
    77de:	5f 92       	push	r5
    77e0:	6f 92       	push	r6
    77e2:	7f 92       	push	r7
    77e4:	8f 92       	push	r8
    77e6:	9f 92       	push	r9
    77e8:	af 92       	push	r10
    77ea:	bf 92       	push	r11
    77ec:	cf 92       	push	r12
    77ee:	df 92       	push	r13
    77f0:	ef 92       	push	r14
    77f2:	ff 92       	push	r15
    77f4:	0f 93       	push	r16
    77f6:	1f 93       	push	r17
    77f8:	cf 93       	push	r28
    77fa:	df 93       	push	r29
    77fc:	cd b7       	in	r28, 0x3d	; 61
    77fe:	de b7       	in	r29, 0x3e	; 62
    7800:	28 97       	sbiw	r28, 0x08	; 8
    7802:	0f b6       	in	r0, 0x3f	; 63
    7804:	f8 94       	cli
    7806:	de bf       	out	0x3e, r29	; 62
    7808:	0f be       	out	0x3f, r0	; 63
    780a:	cd bf       	out	0x3d, r28	; 61
    780c:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    780e:	80 91 1f 08 	lds	r24, 0x081F
    7812:	88 23       	and	r24, r24
    7814:	41 f0       	breq	.+16     	; 0x7826 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    7816:	86 ee       	ldi	r24, 0xE6	; 230
    7818:	90 e0       	ldi	r25, 0x00	; 0
    781a:	90 93 37 05 	sts	0x0537, r25
    781e:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    7822:	10 92 1f 08 	sts	0x081F, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    7826:	1e 82       	std	Y+6, r1	; 0x06
    7828:	af e8       	ldi	r26, 0x8F	; 143
    782a:	6a 2e       	mov	r6, r26
    782c:	a7 e0       	ldi	r26, 0x07	; 7
    782e:	7a 2e       	mov	r7, r26
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    7830:	89 2d       	mov	r24, r9
    7832:	90 e0       	ldi	r25, 0x00	; 0
    7834:	01 97       	sbiw	r24, 0x01	; 1
    7836:	25 e0       	ldi	r18, 0x05	; 5
    7838:	28 9f       	mul	r18, r24
    783a:	20 01       	movw	r4, r0
    783c:	29 9f       	mul	r18, r25
    783e:	50 0c       	add	r5, r0
    7840:	11 24       	eor	r1, r1
    7842:	92 01       	movw	r18, r4
    7844:	2d 5f       	subi	r18, 0xFD	; 253
    7846:	32 4e       	sbci	r19, 0xE2	; 226
    7848:	29 01       	movw	r4, r18
    784a:	1c 01       	movw	r2, r24
    784c:	b4 e0       	ldi	r27, 0x04	; 4
    784e:	22 0c       	add	r2, r2
    7850:	33 1c       	adc	r3, r3
    7852:	ba 95       	dec	r27
    7854:	e1 f7       	brne	.-8      	; 0x784e <menu_servo_setup+0x76>
    7856:	f1 01       	movw	r30, r2
    7858:	ee 5e       	subi	r30, 0xEE	; 238
    785a:	f2 4e       	sbci	r31, 0xE2	; 226
    785c:	1f 01       	movw	r2, r30
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);

		if (button == ENTER)
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    785e:	9c 01       	movw	r18, r24
    7860:	13 e0       	ldi	r17, 0x03	; 3
    7862:	22 0f       	add	r18, r18
    7864:	33 1f       	adc	r19, r19
    7866:	1a 95       	dec	r17
    7868:	e1 f7       	brne	.-8      	; 0x7862 <menu_servo_setup+0x8a>
    786a:	38 87       	std	Y+8, r19	; 0x08
    786c:	2f 83       	std	Y+7, r18	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    786e:	80 91 1d 08 	lds	r24, 0x081D
    7872:	80 37       	cpi	r24, 0x70	; 112
    7874:	09 f4       	brne	.+2      	; 0x7878 <menu_servo_setup+0xa0>
    7876:	92 c0       	rjmp	.+292    	; 0x799c <menu_servo_setup+0x1c4>
    7878:	88 e0       	ldi	r24, 0x08	; 8
    787a:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    787c:	32 e0       	ldi	r19, 0x02	; 2
    787e:	93 16       	cp	r9, r19
    7880:	61 f0       	breq	.+24     	; 0x789a <menu_servo_setup+0xc2>
    7882:	43 e0       	ldi	r20, 0x03	; 3
    7884:	94 12       	cpse	r9, r20
    7886:	11 c0       	rjmp	.+34     	; 0x78aa <menu_servo_setup+0xd2>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    7888:	e1 e0       	ldi	r30, 0x01	; 1
    788a:	ee 83       	std	Y+6, r30	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    788c:	88 24       	eor	r8, r8
    788e:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    7890:	ef e9       	ldi	r30, 0x9F	; 159
    7892:	6e 2e       	mov	r6, r30
    7894:	e7 e0       	ldi	r30, 0x07	; 7
    7896:	7e 2e       	mov	r7, r30
					servo_enable = true;
					zero_setting = true;
					break;
    7898:	08 c0       	rjmp	.+16     	; 0x78aa <menu_servo_setup+0xd2>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    789a:	91 e0       	ldi	r25, 0x01	; 1
    789c:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    789e:	88 24       	eor	r8, r8
    78a0:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    78a2:	f7 e9       	ldi	r31, 0x97	; 151
    78a4:	6f 2e       	mov	r6, r31
    78a6:	f7 e0       	ldi	r31, 0x07	; 7
    78a8:	7f 2e       	mov	r7, r31
    78aa:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    78ac:	39 f7       	brne	.-50     	; 0x787c <menu_servo_setup+0xa4>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    78ae:	a0 90 04 05 	lds	r10, 0x0504
    78b2:	b0 90 05 05 	lds	r11, 0x0505
    78b6:	61 01       	movw	r12, r2
    78b8:	50 e5       	ldi	r21, 0x50	; 80
    78ba:	e5 2e       	mov	r14, r21
    78bc:	f1 2c       	mov	r15, r1
    78be:	01 e0       	ldi	r16, 0x01	; 1
    78c0:	92 01       	movw	r18, r4
    78c2:	a3 01       	movw	r20, r6
    78c4:	66 ee       	ldi	r22, 0xE6	; 230
    78c6:	70 e0       	ldi	r23, 0x00	; 0
    78c8:	80 91 36 05 	lds	r24, 0x0536
    78cc:	90 91 37 05 	lds	r25, 0x0537
    78d0:	0e 94 14 39 	call	0x7228	; 0x7228 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    78d4:	61 e3       	ldi	r22, 0x31	; 49
    78d6:	c6 2e       	mov	r12, r22
    78d8:	65 e0       	ldi	r22, 0x05	; 5
    78da:	d6 2e       	mov	r13, r22
    78dc:	76 e3       	ldi	r23, 0x36	; 54
    78de:	e7 2e       	mov	r14, r23
    78e0:	75 e0       	ldi	r23, 0x05	; 5
    78e2:	f7 2e       	mov	r15, r23
    78e4:	04 e0       	ldi	r16, 0x04	; 4
    78e6:	15 e0       	ldi	r17, 0x05	; 5
    78e8:	20 91 1d 08 	lds	r18, 0x081D
    78ec:	40 e0       	ldi	r20, 0x00	; 0
    78ee:	50 e0       	ldi	r21, 0x00	; 0
    78f0:	66 ee       	ldi	r22, 0xE6	; 230
    78f2:	70 e0       	ldi	r23, 0x00	; 0
    78f4:	88 e0       	ldi	r24, 0x08	; 8
    78f6:	90 e0       	ldi	r25, 0x00	; 0
    78f8:	0e 94 40 38 	call	0x7080	; 0x7080 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    78fc:	60 e0       	ldi	r22, 0x00	; 0
    78fe:	c2 01       	movw	r24, r4
    7900:	0e 94 d3 35 	call	0x6ba6	; 0x6ba6 <get_menu_range>
    7904:	29 83       	std	Y+1, r18	; 0x01
    7906:	3a 83       	std	Y+2, r19	; 0x02
    7908:	4b 83       	std	Y+3, r20	; 0x03
    790a:	5c 83       	std	Y+4, r21	; 0x04
    790c:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    790e:	80 91 1d 08 	lds	r24, 0x081D
    7912:	80 3e       	cpi	r24, 0xE0	; 224
    7914:	b9 f5       	brne	.+110    	; 0x7984 <menu_servo_setup+0x1ac>
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    7916:	80 91 31 05 	lds	r24, 0x0531
    791a:	90 91 32 05 	lds	r25, 0x0532
    791e:	9c 01       	movw	r18, r24
    7920:	26 5e       	subi	r18, 0xE6	; 230
    7922:	31 09       	sbc	r19, r1
    7924:	ef 81       	ldd	r30, Y+7	; 0x07
    7926:	f8 85       	ldd	r31, Y+8	; 0x08
    7928:	e2 0f       	add	r30, r18
    792a:	f3 1f       	adc	r31, r19
    792c:	ee 0f       	add	r30, r30
    792e:	ff 1f       	adc	r31, r31
    7930:	ee 5e       	subi	r30, 0xEE	; 238
    7932:	f2 4e       	sbci	r31, 0xE2	; 226
    7934:	a5 90       	lpm	r10, Z+
    7936:	b4 90       	lpm	r11, Z
    7938:	b3 01       	movw	r22, r6
    793a:	62 0f       	add	r22, r18
    793c:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    793e:	fe 81       	ldd	r31, Y+6	; 0x06
    7940:	ff 23       	and	r31, r31
    7942:	11 f0       	breq	.+4      	; 0x7948 <menu_servo_setup+0x170>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    7944:	fb 01       	movw	r30, r22
    7946:	10 82       	st	Z, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    7948:	46 e2       	ldi	r20, 0x26	; 38
    794a:	42 9f       	mul	r20, r18
    794c:	f0 01       	movw	r30, r0
    794e:	43 9f       	mul	r20, r19
    7950:	f0 0d       	add	r31, r0
    7952:	11 24       	eor	r1, r1
    7954:	e3 58       	subi	r30, 0x83	; 131
    7956:	f9 4f       	sbci	r31, 0xF9	; 249
    7958:	40 81       	ld	r20, Z
    795a:	41 11       	cpse	r20, r1
    795c:	05 c0       	rjmp	.+10     	; 0x7968 <menu_servo_setup+0x190>
    795e:	40 91 f6 05 	lds	r20, 0x05F6
    7962:	41 11       	cpse	r20, r1
    7964:	01 c0       	rjmp	.+2      	; 0x7968 <menu_servo_setup+0x190>
			{
				servo_enable = false;
    7966:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    7968:	bb 24       	eor	r11, r11
    796a:	3f 93       	push	r19
    796c:	2f 93       	push	r18
    796e:	c1 2c       	mov	r12, r1
    7970:	e9 80       	ldd	r14, Y+1	; 0x01
    7972:	fa 80       	ldd	r15, Y+2	; 0x02
    7974:	0b 81       	ldd	r16, Y+3	; 0x03
    7976:	1c 81       	ldd	r17, Y+4	; 0x04
    7978:	2d 81       	ldd	r18, Y+5	; 0x05
    797a:	41 e0       	ldi	r20, 0x01	; 1
    797c:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <do_menu_item>
    7980:	0f 90       	pop	r0
    7982:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    7984:	80 91 1d 08 	lds	r24, 0x081D
    7988:	80 3e       	cpi	r24, 0xE0	; 224
    798a:	09 f0       	breq	.+2      	; 0x798e <menu_servo_setup+0x1b6>
    798c:	70 cf       	rjmp	.-288    	; 0x786e <menu_servo_setup+0x96>
		{
			UpdateLimits();				// Update actual servo trims
    798e:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    7992:	0e 94 be 19 	call	0x337c	; 0x337c <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    7996:	0e 94 3b 3b 	call	0x7676	; 0x7676 <Wait_BUTTON4>
    799a:	69 cf       	rjmp	.-302    	; 0x786e <menu_servo_setup+0x96>
		}
	}
}
    799c:	28 96       	adiw	r28, 0x08	; 8
    799e:	0f b6       	in	r0, 0x3f	; 63
    79a0:	f8 94       	cli
    79a2:	de bf       	out	0x3e, r29	; 62
    79a4:	0f be       	out	0x3f, r0	; 63
    79a6:	cd bf       	out	0x3d, r28	; 61
    79a8:	df 91       	pop	r29
    79aa:	cf 91       	pop	r28
    79ac:	1f 91       	pop	r17
    79ae:	0f 91       	pop	r16
    79b0:	ff 90       	pop	r15
    79b2:	ef 90       	pop	r14
    79b4:	df 90       	pop	r13
    79b6:	cf 90       	pop	r12
    79b8:	bf 90       	pop	r11
    79ba:	af 90       	pop	r10
    79bc:	9f 90       	pop	r9
    79be:	8f 90       	pop	r8
    79c0:	7f 90       	pop	r7
    79c2:	6f 90       	pop	r6
    79c4:	5f 90       	pop	r5
    79c6:	4f 90       	pop	r4
    79c8:	3f 90       	pop	r3
    79ca:	2f 90       	pop	r2
    79cc:	08 95       	ret

000079ce <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    79ce:	2f 92       	push	r2
    79d0:	3f 92       	push	r3
    79d2:	4f 92       	push	r4
    79d4:	5f 92       	push	r5
    79d6:	6f 92       	push	r6
    79d8:	7f 92       	push	r7
    79da:	8f 92       	push	r8
    79dc:	9f 92       	push	r9
    79de:	af 92       	push	r10
    79e0:	bf 92       	push	r11
    79e2:	cf 92       	push	r12
    79e4:	df 92       	push	r13
    79e6:	ef 92       	push	r14
    79e8:	ff 92       	push	r15
    79ea:	0f 93       	push	r16
    79ec:	1f 93       	push	r17
    79ee:	cf 93       	push	r28
    79f0:	df 93       	push	r29
    79f2:	cd b7       	in	r28, 0x3d	; 61
    79f4:	de b7       	in	r29, 0x3e	; 62
    79f6:	2b 97       	sbiw	r28, 0x0b	; 11
    79f8:	0f b6       	in	r0, 0x3f	; 63
    79fa:	f8 94       	cli
    79fc:	de bf       	out	0x3e, r29	; 62
    79fe:	0f be       	out	0x3f, r0	; 63
    7a00:	cd bf       	out	0x3d, r28	; 61
    7a02:	98 2e       	mov	r9, r24
	uint8_t		i;
	uint16_t	offset = 0;			// Index into channel structure
	uint16_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    7a04:	80 91 1f 08 	lds	r24, 0x081F
    7a08:	88 23       	and	r24, r24
    7a0a:	41 f0       	breq	.+16     	; 0x7a1c <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    7a0c:	85 e9       	ldi	r24, 0x95	; 149
    7a0e:	90 e0       	ldi	r25, 0x00	; 0
    7a10:	90 93 37 05 	sts	0x0537, r25
    7a14:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    7a18:	10 92 1f 08 	sts	0x081F, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    7a1c:	28 e0       	ldi	r18, 0x08	; 8
    7a1e:	30 e0       	ldi	r19, 0x00	; 0
    7a20:	39 87       	std	Y+9, r19	; 0x09
    7a22:	28 87       	std	Y+8, r18	; 0x08
    7a24:	61 2c       	mov	r6, r1
    7a26:	71 2c       	mov	r7, r1
    7a28:	46 ef       	ldi	r20, 0xF6	; 246
    7a2a:	55 e0       	ldi	r21, 0x05	; 5
    7a2c:	5f 83       	std	Y+7, r21	; 0x07
    7a2e:	4e 83       	std	Y+6, r20	; 0x06

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    7a30:	89 2d       	mov	r24, r9
    7a32:	90 e0       	ldi	r25, 0x00	; 0
    7a34:	01 97       	sbiw	r24, 0x01	; 1
    7a36:	22 e3       	ldi	r18, 0x32	; 50
    7a38:	28 9f       	mul	r18, r24
    7a3a:	20 01       	movw	r4, r0
    7a3c:	29 9f       	mul	r18, r25
    7a3e:	50 0c       	add	r5, r0
    7a40:	11 24       	eor	r1, r1
    7a42:	92 01       	movw	r18, r4
    7a44:	2e 5b       	subi	r18, 0xBE	; 190
    7a46:	32 4e       	sbci	r19, 0xE2	; 226
    7a48:	29 01       	movw	r4, r18
    7a4a:	24 e1       	ldi	r18, 0x14	; 20
    7a4c:	28 9f       	mul	r18, r24
    7a4e:	10 01       	movw	r2, r0
    7a50:	29 9f       	mul	r18, r25
    7a52:	30 0c       	add	r3, r0
    7a54:	11 24       	eor	r1, r1
    7a56:	a1 01       	movw	r20, r2
    7a58:	4a 55       	subi	r20, 0x5A	; 90
    7a5a:	52 4e       	sbci	r21, 0xE2	; 226
    7a5c:	1a 01       	movw	r2, r20
			Config.Preset = QUADX;			
		}

		if (button == ENTER)
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    7a5e:	2a e0       	ldi	r18, 0x0A	; 10
    7a60:	28 9f       	mul	r18, r24
    7a62:	a0 01       	movw	r20, r0
    7a64:	29 9f       	mul	r18, r25
    7a66:	50 0d       	add	r21, r0
    7a68:	11 24       	eor	r1, r1
    7a6a:	5b 87       	std	Y+11, r21	; 0x0b
    7a6c:	4a 87       	std	Y+10, r20	; 0x0a
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    7a6e:	80 91 1d 08 	lds	r24, 0x081D
    7a72:	80 37       	cpi	r24, 0x70	; 112
    7a74:	09 f4       	brne	.+2      	; 0x7a78 <menu_rc_setup+0xaa>
    7a76:	d3 c0       	rjmp	.+422    	; 0x7c1e <menu_rc_setup+0x250>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    7a78:	52 e0       	ldi	r21, 0x02	; 2
    7a7a:	95 12       	cpse	r9, r21
    7a7c:	0b c0       	rjmp	.+22     	; 0x7a94 <menu_rc_setup+0xc6>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
    7a7e:	8a e0       	ldi	r24, 0x0A	; 10
    7a80:	90 e0       	ldi	r25, 0x00	; 0
    7a82:	99 87       	std	Y+9, r25	; 0x09
    7a84:	88 87       	std	Y+8, r24	; 0x08
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    7a86:	69 e0       	ldi	r22, 0x09	; 9
    7a88:	66 2e       	mov	r6, r22
    7a8a:	71 2c       	mov	r7, r1
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    7a8c:	25 e5       	ldi	r18, 0x55	; 85
    7a8e:	36 e0       	ldi	r19, 0x06	; 6
    7a90:	3f 83       	std	Y+7, r19	; 0x07
    7a92:	2e 83       	std	Y+6, r18	; 0x06
			default:
				break;
		}

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;
    7a94:	84 e0       	ldi	r24, 0x04	; 4
    7a96:	80 93 5e 06 	sts	0x065E, r24

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    7a9a:	a0 90 04 05 	lds	r10, 0x0504
    7a9e:	b0 90 05 05 	lds	r11, 0x0505
    7aa2:	80 91 36 05 	lds	r24, 0x0536
    7aa6:	90 91 37 05 	lds	r25, 0x0537
    7aaa:	61 01       	movw	r12, r2
    7aac:	3f e4       	ldi	r19, 0x4F	; 79
    7aae:	e3 2e       	mov	r14, r19
    7ab0:	f1 2c       	mov	r15, r1
    7ab2:	00 e0       	ldi	r16, 0x00	; 0
    7ab4:	92 01       	movw	r18, r4
    7ab6:	4e 81       	ldd	r20, Y+6	; 0x06
    7ab8:	5f 81       	ldd	r21, Y+7	; 0x07
    7aba:	b3 01       	movw	r22, r6
    7abc:	6b 56       	subi	r22, 0x6B	; 107
    7abe:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac0:	86 0d       	add	r24, r6
    7ac2:	97 1d       	adc	r25, r7
    7ac4:	0e 94 14 39 	call	0x7228	; 0x7228 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    7ac8:	41 e3       	ldi	r20, 0x31	; 49
    7aca:	c4 2e       	mov	r12, r20
    7acc:	45 e0       	ldi	r20, 0x05	; 5
    7ace:	d4 2e       	mov	r13, r20
    7ad0:	56 e3       	ldi	r21, 0x36	; 54
    7ad2:	e5 2e       	mov	r14, r21
    7ad4:	55 e0       	ldi	r21, 0x05	; 5
    7ad6:	f5 2e       	mov	r15, r21
    7ad8:	04 e0       	ldi	r16, 0x04	; 4
    7ada:	15 e0       	ldi	r17, 0x05	; 5
    7adc:	20 91 1d 08 	lds	r18, 0x081D
    7ae0:	a3 01       	movw	r20, r6
    7ae2:	65 e9       	ldi	r22, 0x95	; 149
    7ae4:	70 e0       	ldi	r23, 0x00	; 0
    7ae6:	88 85       	ldd	r24, Y+8	; 0x08
    7ae8:	99 85       	ldd	r25, Y+9	; 0x09
    7aea:	0e 94 40 38 	call	0x7080	; 0x7080 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    7aee:	60 91 31 05 	lds	r22, 0x0531
    7af2:	65 59       	subi	r22, 0x95	; 149
    7af4:	66 19       	sub	r22, r6
    7af6:	c2 01       	movw	r24, r4
    7af8:	0e 94 d3 35 	call	0x6ba6	; 0x6ba6 <get_menu_range>
    7afc:	29 83       	std	Y+1, r18	; 0x01
    7afe:	3a 83       	std	Y+2, r19	; 0x02
    7b00:	4b 83       	std	Y+3, r20	; 0x03
    7b02:	5c 83       	std	Y+4, r21	; 0x04
    7b04:	6d 83       	std	Y+5, r22	; 0x05

		// If actually editing the preset, show the default setting
		if (menu_temp == PRESETITEM)
    7b06:	80 91 31 05 	lds	r24, 0x0531
    7b0a:	90 91 32 05 	lds	r25, 0x0532
    7b0e:	87 3a       	cpi	r24, 0xA7	; 167
    7b10:	91 05       	cpc	r25, r1
    7b12:	11 f4       	brne	.+4      	; 0x7b18 <menu_rc_setup+0x14a>
		{
			Config.Preset = QUADX;			
    7b14:	10 92 5e 06 	sts	0x065E, r1
		}

		if (button == ENTER)
    7b18:	20 91 1d 08 	lds	r18, 0x081D
    7b1c:	20 3e       	cpi	r18, 0xE0	; 224
    7b1e:	09 f5       	brne	.+66     	; 0x7b62 <menu_rc_setup+0x194>
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    7b20:	bc 01       	movw	r22, r24
    7b22:	65 59       	subi	r22, 0x95	; 149
    7b24:	71 09       	sbc	r23, r1
    7b26:	66 19       	sub	r22, r6
    7b28:	77 09       	sbc	r23, r7
    7b2a:	ea 85       	ldd	r30, Y+10	; 0x0a
    7b2c:	fb 85       	ldd	r31, Y+11	; 0x0b
    7b2e:	e6 0f       	add	r30, r22
    7b30:	f7 1f       	adc	r31, r23
    7b32:	ee 0f       	add	r30, r30
    7b34:	ff 1f       	adc	r31, r31
    7b36:	ea 55       	subi	r30, 0x5A	; 90
    7b38:	f2 4e       	sbci	r31, 0xE2	; 226
    7b3a:	a5 90       	lpm	r10, Z+
    7b3c:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    7b3e:	4e 81       	ldd	r20, Y+6	; 0x06
    7b40:	5f 81       	ldd	r21, Y+7	; 0x07
    7b42:	64 0f       	add	r22, r20
    7b44:	75 1f       	adc	r23, r21
    7b46:	1f 92       	push	r1
    7b48:	1f 92       	push	r1
    7b4a:	81 2c       	mov	r8, r1
    7b4c:	c1 2c       	mov	r12, r1
    7b4e:	e9 80       	ldd	r14, Y+1	; 0x01
    7b50:	fa 80       	ldd	r15, Y+2	; 0x02
    7b52:	0b 81       	ldd	r16, Y+3	; 0x03
    7b54:	1c 81       	ldd	r17, Y+4	; 0x04
    7b56:	2d 81       	ldd	r18, Y+5	; 0x05
    7b58:	41 e0       	ldi	r20, 0x01	; 1
    7b5a:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <do_menu_item>
    7b5e:	0f 90       	pop	r0
    7b60:	0f 90       	pop	r0
		}

		// Handle abort neatly
		if (button == ABORT)
    7b62:	80 91 1d 08 	lds	r24, 0x081D
    7b66:	80 3a       	cpi	r24, 0xA0	; 160
    7b68:	41 f4       	brne	.+16     	; 0x7b7a <menu_rc_setup+0x1ac>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    7b6a:	0e 94 a5 3a 	call	0x754a	; 0x754a <Wait_BUTTON1>
			button = NONE;
    7b6e:	80 ef       	ldi	r24, 0xF0	; 240
    7b70:	80 93 1d 08 	sts	0x081D, r24
			
			// Reset the mixer preset if unchanged
			Config.Preset = OPTIONS;
    7b74:	84 e0       	ldi	r24, 0x04	; 4
    7b76:	80 93 5e 06 	sts	0x065E, r24
		}

		if (button == ENTER)
    7b7a:	80 91 1d 08 	lds	r24, 0x081D
    7b7e:	80 3e       	cpi	r24, 0xE0	; 224
    7b80:	09 f0       	breq	.+2      	; 0x7b84 <menu_rc_setup+0x1b6>
    7b82:	75 cf       	rjmp	.-278    	; 0x7a6e <menu_rc_setup+0xa0>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    7b84:	0e 94 34 35 	call	0x6a68	; 0x6a68 <init_int>
			init_uart();			// and UART
    7b88:	0e 94 e6 4d 	call	0x9bcc	; 0x9bcc <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    7b8c:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <UpdateLimits>
			
			// See if mixer preset has changed. Load new preset only if so
			if ((Config.Preset != OPTIONS) && (menu_temp == PRESETITEM))
    7b90:	80 91 5e 06 	lds	r24, 0x065E
    7b94:	84 30       	cpi	r24, 0x04	; 4
    7b96:	49 f0       	breq	.+18     	; 0x7baa <menu_rc_setup+0x1dc>
    7b98:	20 91 31 05 	lds	r18, 0x0531
    7b9c:	30 91 32 05 	lds	r19, 0x0532
    7ba0:	27 3a       	cpi	r18, 0xA7	; 167
    7ba2:	31 05       	cpc	r19, r1
    7ba4:	11 f4       	brne	.+4      	; 0x7baa <menu_rc_setup+0x1dc>
			{
				Load_eeprom_preset(Config.Preset);
    7ba6:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Load_eeprom_preset>
			}

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    7baa:	46 e0       	ldi	r20, 0x06	; 6
    7bac:	80 91 5a 06 	lds	r24, 0x065A
    7bb0:	48 1b       	sub	r20, r24
    7bb2:	6a e1       	ldi	r22, 0x1A	; 26
    7bb4:	80 ed       	ldi	r24, 0xD0	; 208
    7bb6:	0e 94 c1 2a 	call	0x5582	; 0x5582 <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    7bba:	20 91 f9 05 	lds	r18, 0x05F9
    7bbe:	ae ec       	ldi	r26, 0xCE	; 206
    7bc0:	b5 e0       	ldi	r27, 0x05	; 5
    7bc2:	80 e0       	ldi	r24, 0x00	; 0
    7bc4:	90 e0       	ldi	r25, 0x00	; 0
    7bc6:	fc 01       	movw	r30, r24
    7bc8:	21 30       	cpi	r18, 0x01	; 1
    7bca:	19 f4       	brne	.+6      	; 0x7bd2 <menu_rc_setup+0x204>
    7bcc:	e0 51       	subi	r30, 0x10	; 16
    7bce:	ff 4f       	sbci	r31, 0xFF	; 255
    7bd0:	02 c0       	rjmp	.+4      	; 0x7bd6 <menu_rc_setup+0x208>
    7bd2:	e8 50       	subi	r30, 0x08	; 8
    7bd4:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    7bd6:	e4 91       	lpm	r30, Z
    7bd8:	ec 93       	st	X, r30
    7bda:	01 96       	adiw	r24, 0x01	; 1
    7bdc:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    7bde:	88 30       	cpi	r24, 0x08	; 8
    7be0:	91 05       	cpc	r25, r1
    7be2:	89 f7       	brne	.-30     	; 0x7bc6 <menu_rc_setup+0x1f8>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    7be4:	80 91 f6 05 	lds	r24, 0x05F6
    7be8:	82 30       	cpi	r24, 0x02	; 2
    7bea:	3c f4       	brge	.+14     	; 0x7bfa <menu_rc_setup+0x22c>
    7bec:	80 91 f7 05 	lds	r24, 0x05F7
    7bf0:	82 30       	cpi	r24, 0x02	; 2
    7bf2:	19 f4       	brne	.+6      	; 0x7bfa <menu_rc_setup+0x22c>
			{
				Config.Servo_rate = SYNC;
    7bf4:	81 e0       	ldi	r24, 0x01	; 1
    7bf6:	80 93 f7 05 	sts	0x05F7, r24
			}
						
			if (Config.ArmMode == ARMABLE)
    7bfa:	80 91 57 06 	lds	r24, 0x0657
    7bfe:	81 30       	cpi	r24, 0x01	; 1
    7c00:	31 f4       	brne	.+12     	; 0x7c0e <menu_rc_setup+0x240>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    7c02:	80 91 20 05 	lds	r24, 0x0520
    7c06:	84 60       	ori	r24, 0x04	; 4
    7c08:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    7c0c:	2b 98       	cbi	0x05, 3	; 5
			}

			// Return the preset to "Options" when going back to the General menu
			Config.Preset = OPTIONS;
    7c0e:	84 e0       	ldi	r24, 0x04	; 4
    7c10:	80 93 5e 06 	sts	0x065E, r24

			Save_Config_to_EEPROM(); // Save value and return
    7c14:	0e 94 be 19 	call	0x337c	; 0x337c <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    7c18:	0e 94 3b 3b 	call	0x7676	; 0x7676 <Wait_BUTTON4>
    7c1c:	28 cf       	rjmp	.-432    	; 0x7a6e <menu_rc_setup+0xa0>
		}
	}
}
    7c1e:	2b 96       	adiw	r28, 0x0b	; 11
    7c20:	0f b6       	in	r0, 0x3f	; 63
    7c22:	f8 94       	cli
    7c24:	de bf       	out	0x3e, r29	; 62
    7c26:	0f be       	out	0x3f, r0	; 63
    7c28:	cd bf       	out	0x3d, r28	; 61
    7c2a:	df 91       	pop	r29
    7c2c:	cf 91       	pop	r28
    7c2e:	1f 91       	pop	r17
    7c30:	0f 91       	pop	r16
    7c32:	ff 90       	pop	r15
    7c34:	ef 90       	pop	r14
    7c36:	df 90       	pop	r13
    7c38:	cf 90       	pop	r12
    7c3a:	bf 90       	pop	r11
    7c3c:	af 90       	pop	r10
    7c3e:	9f 90       	pop	r9
    7c40:	8f 90       	pop	r8
    7c42:	7f 90       	pop	r7
    7c44:	6f 90       	pop	r6
    7c46:	5f 90       	pop	r5
    7c48:	4f 90       	pop	r4
    7c4a:	3f 90       	pop	r3
    7c4c:	2f 90       	pop	r2
    7c4e:	08 95       	ret

00007c50 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7c50:	6f 92       	push	r6
    7c52:	7f 92       	push	r7
    7c54:	8f 92       	push	r8
    7c56:	9f 92       	push	r9
    7c58:	af 92       	push	r10
    7c5a:	bf 92       	push	r11
    7c5c:	cf 92       	push	r12
    7c5e:	df 92       	push	r13
    7c60:	ef 92       	push	r14
    7c62:	ff 92       	push	r15
    7c64:	0f 93       	push	r16
    7c66:	1f 93       	push	r17
    7c68:	cf 93       	push	r28
    7c6a:	df 93       	push	r29
    7c6c:	cd b7       	in	r28, 0x3d	; 61
    7c6e:	de b7       	in	r29, 0x3e	; 62
    7c70:	2c 97       	sbiw	r28, 0x0c	; 12
    7c72:	0f b6       	in	r0, 0x3f	; 63
    7c74:	f8 94       	cli
    7c76:	de bf       	out	0x3e, r29	; 62
    7c78:	0f be       	out	0x3f, r0	; 63
    7c7a:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    7c7c:	80 91 01 06 	lds	r24, 0x0601
    7c80:	8f 83       	std	Y+7, r24	; 0x07
    7c82:	80 91 07 06 	lds	r24, 0x0607
    7c86:	88 87       	std	Y+8, r24	; 0x08
    7c88:	80 91 0d 06 	lds	r24, 0x060D
    7c8c:	89 87       	std	Y+9, r24	; 0x09
    7c8e:	80 91 13 06 	lds	r24, 0x0613
    7c92:	8a 87       	std	Y+10, r24	; 0x0a
    7c94:	80 91 19 06 	lds	r24, 0x0619
    7c98:	8b 87       	std	Y+11, r24	; 0x0b
    7c9a:	80 91 1f 06 	lds	r24, 0x061F
    7c9e:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    7ca0:	80 91 00 06 	lds	r24, 0x0600
    7ca4:	89 83       	std	Y+1, r24	; 0x01
    7ca6:	80 91 06 06 	lds	r24, 0x0606
    7caa:	8a 83       	std	Y+2, r24	; 0x02
    7cac:	80 91 0c 06 	lds	r24, 0x060C
    7cb0:	8b 83       	std	Y+3, r24	; 0x03
    7cb2:	80 91 12 06 	lds	r24, 0x0612
    7cb6:	8c 83       	std	Y+4, r24	; 0x04
    7cb8:	80 91 18 06 	lds	r24, 0x0618
    7cbc:	8d 83       	std	Y+5, r24	; 0x05
    7cbe:	80 91 1e 06 	lds	r24, 0x061E
    7cc2:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    7cc4:	80 91 59 06 	lds	r24, 0x0659
    7cc8:	99 27       	eor	r25, r25
    7cca:	87 fd       	sbrc	r24, 7
    7ccc:	90 95       	com	r25
    7cce:	a9 2f       	mov	r26, r25
    7cd0:	b9 2f       	mov	r27, r25
    7cd2:	89 30       	cpi	r24, 0x09	; 9
    7cd4:	91 05       	cpc	r25, r1
    7cd6:	08 f5       	brcc	.+66     	; 0x7d1a <UpdateLimits+0xca>
    7cd8:	fc 01       	movw	r30, r24
    7cda:	e3 5a       	subi	r30, 0xA3	; 163
    7cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    7cde:	0c 94 f4 50 	jmp	0xa1e8	; 0xa1e8 <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    7ce2:	80 e4       	ldi	r24, 0x40	; 64
    7ce4:	91 e0       	ldi	r25, 0x01	; 1
    7ce6:	14 c0       	rjmp	.+40     	; 0x7d10 <UpdateLimits+0xc0>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    7ce8:	8a e4       	ldi	r24, 0x4A	; 74
    7cea:	91 e0       	ldi	r25, 0x01	; 1
    7cec:	11 c0       	rjmp	.+34     	; 0x7d10 <UpdateLimits+0xc0>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    7cee:	84 e5       	ldi	r24, 0x54	; 84
    7cf0:	91 e0       	ldi	r25, 0x01	; 1
    7cf2:	0e c0       	rjmp	.+28     	; 0x7d10 <UpdateLimits+0xc0>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    7cf4:	8e e5       	ldi	r24, 0x5E	; 94
    7cf6:	91 e0       	ldi	r25, 0x01	; 1
    7cf8:	0b c0       	rjmp	.+22     	; 0x7d10 <UpdateLimits+0xc0>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    7cfa:	88 e6       	ldi	r24, 0x68	; 104
    7cfc:	91 e0       	ldi	r25, 0x01	; 1
    7cfe:	08 c0       	rjmp	.+16     	; 0x7d10 <UpdateLimits+0xc0>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    7d00:	82 e7       	ldi	r24, 0x72	; 114
    7d02:	91 e0       	ldi	r25, 0x01	; 1
    7d04:	05 c0       	rjmp	.+10     	; 0x7d10 <UpdateLimits+0xc0>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    7d06:	8c e7       	ldi	r24, 0x7C	; 124
    7d08:	91 e0       	ldi	r25, 0x01	; 1
    7d0a:	02 c0       	rjmp	.+4      	; 0x7d10 <UpdateLimits+0xc0>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    7d0c:	86 e8       	ldi	r24, 0x86	; 134
    7d0e:	91 e0       	ldi	r25, 0x01	; 1
    7d10:	90 93 54 06 	sts	0x0654, r25
    7d14:	80 93 53 06 	sts	0x0653, r24
			break;
    7d18:	04 c0       	rjmp	.+8      	; 0x7d22 <UpdateLimits+0xd2>
		default:
			Config.PowerTriggerActual = 0;			// Off
    7d1a:	10 92 54 06 	sts	0x0654, r1
    7d1e:	10 92 53 06 	sts	0x0653, r1
			break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    7d22:	20 91 2e 05 	lds	r18, 0x052E
    7d26:	30 91 2f 05 	lds	r19, 0x052F
    7d2a:	80 91 53 06 	lds	r24, 0x0653
    7d2e:	90 91 54 06 	lds	r25, 0x0654
    7d32:	26 36       	cpi	r18, 0x66	; 102
    7d34:	48 e0       	ldi	r20, 0x08	; 8
    7d36:	34 07       	cpc	r19, r20
    7d38:	88 f0       	brcs	.+34     	; 0x7d5c <UpdateLimits+0x10c>
	{
		Config.PowerTriggerActual *= 6;
    7d3a:	46 e0       	ldi	r20, 0x06	; 6
    7d3c:	48 9f       	mul	r20, r24
    7d3e:	90 01       	movw	r18, r0
    7d40:	49 9f       	mul	r20, r25
    7d42:	30 0d       	add	r19, r0
    7d44:	11 24       	eor	r1, r1
    7d46:	30 93 54 06 	sts	0x0654, r19
    7d4a:	20 93 53 06 	sts	0x0653, r18
    7d4e:	73 e2       	ldi	r23, 0x23	; 35
    7d50:	a7 2e       	mov	r10, r23
    7d52:	76 e0       	ldi	r23, 0x06	; 6
    7d54:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7d56:	00 e0       	ldi	r16, 0x00	; 0
    7d58:	10 e0       	ldi	r17, 0x00	; 0
    7d5a:	25 c0       	rjmp	.+74     	; 0x7da6 <UpdateLimits+0x156>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    7d5c:	a9 01       	movw	r20, r18
    7d5e:	42 5c       	subi	r20, 0xC2	; 194
    7d60:	56 40       	sbci	r21, 0x06	; 6
    7d62:	44 3a       	cpi	r20, 0xA4	; 164
    7d64:	51 40       	sbci	r21, 0x01	; 1
    7d66:	10 f4       	brcc	.+4      	; 0x7d6c <UpdateLimits+0x11c>
	{
		Config.PowerTriggerActual *= 5;
    7d68:	45 e0       	ldi	r20, 0x05	; 5
    7d6a:	e8 cf       	rjmp	.-48     	; 0x7d3c <UpdateLimits+0xec>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    7d6c:	a9 01       	movw	r20, r18
    7d6e:	44 51       	subi	r20, 0x14	; 20
    7d70:	55 40       	sbci	r21, 0x05	; 5
    7d72:	4e 3a       	cpi	r20, 0xAE	; 174
    7d74:	51 40       	sbci	r21, 0x01	; 1
    7d76:	28 f4       	brcc	.+10     	; 0x7d82 <UpdateLimits+0x132>
	{
		Config.PowerTriggerActual *= 4;
    7d78:	88 0f       	add	r24, r24
    7d7a:	99 1f       	adc	r25, r25
    7d7c:	88 0f       	add	r24, r24
    7d7e:	99 1f       	adc	r25, r25
    7d80:	0d c0       	rjmp	.+26     	; 0x7d9c <UpdateLimits+0x14c>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    7d82:	24 58       	subi	r18, 0x84	; 132
    7d84:	33 40       	sbci	r19, 0x03	; 3
    7d86:	20 39       	cpi	r18, 0x90	; 144
    7d88:	31 40       	sbci	r19, 0x01	; 1
    7d8a:	30 f4       	brcc	.+12     	; 0x7d98 <UpdateLimits+0x148>
	{
		Config.PowerTriggerActual *= 3;
    7d8c:	9c 01       	movw	r18, r24
    7d8e:	22 0f       	add	r18, r18
    7d90:	33 1f       	adc	r19, r19
    7d92:	28 0f       	add	r18, r24
    7d94:	39 1f       	adc	r19, r25
    7d96:	d7 cf       	rjmp	.-82     	; 0x7d46 <UpdateLimits+0xf6>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    7d98:	88 0f       	add	r24, r24
    7d9a:	99 1f       	adc	r25, r25
    7d9c:	90 93 54 06 	sts	0x0654, r25
    7da0:	80 93 53 06 	sts	0x0653, r24
    7da4:	d4 cf       	rjmp	.-88     	; 0x7d4e <UpdateLimits+0xfe>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7da6:	65 01       	movw	r12, r10
    7da8:	e1 2c       	mov	r14, r1
    7daa:	f1 2c       	mov	r15, r1
    7dac:	87 e0       	ldi	r24, 0x07	; 7
    7dae:	88 2e       	mov	r8, r24
    7db0:	91 2c       	mov	r9, r1
    7db2:	8c 0e       	add	r8, r28
    7db4:	9d 1e       	adc	r9, r29
    7db6:	80 0e       	add	r8, r16
    7db8:	91 1e       	adc	r9, r17
    7dba:	66 24       	eor	r6, r6
    7dbc:	63 94       	inc	r6
    7dbe:	71 2c       	mov	r7, r1
    7dc0:	6c 0e       	add	r6, r28
    7dc2:	7d 1e       	adc	r7, r29
    7dc4:	60 0e       	add	r6, r16
    7dc6:	71 1e       	adc	r7, r17
    7dc8:	f4 01       	movw	r30, r8
    7dca:	ee 0d       	add	r30, r14
    7dcc:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    7dce:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    7dd0:	bb 27       	eor	r27, r27
    7dd2:	a7 fd       	sbrc	r26, 7
    7dd4:	b0 95       	com	r27
    7dd6:	20 e8       	ldi	r18, 0x80	; 128
    7dd8:	32 e0       	ldi	r19, 0x02	; 2
    7dda:	0e 94 11 51 	call	0xa222	; 0xa222 <__usmulhisi3>
    7dde:	f6 01       	movw	r30, r12
    7de0:	61 93       	st	Z+, r22
    7de2:	71 93       	st	Z+, r23
    7de4:	81 93       	st	Z+, r24
    7de6:	91 93       	st	Z+, r25
    7de8:	6f 01       	movw	r12, r30
    7dea:	f3 01       	movw	r30, r6
    7dec:	ee 0d       	add	r30, r14
    7dee:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    7df0:	20 81       	ld	r18, Z
    7df2:	22 23       	and	r18, r18
    7df4:	b1 f0       	breq	.+44     	; 0x7e22 <UpdateLimits+0x1d2>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    7df6:	35 e0       	ldi	r19, 0x05	; 5
    7df8:	66 0f       	add	r22, r22
    7dfa:	77 1f       	adc	r23, r23
    7dfc:	88 1f       	adc	r24, r24
    7dfe:	99 1f       	adc	r25, r25
    7e00:	3a 95       	dec	r19
    7e02:	d1 f7       	brne	.-12     	; 0x7df8 <UpdateLimits+0x1a8>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    7e04:	33 27       	eor	r19, r19
    7e06:	27 fd       	sbrc	r18, 7
    7e08:	30 95       	com	r19
    7e0a:	43 2f       	mov	r20, r19
    7e0c:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    7e0e:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <__divmodsi4>
    7e12:	d6 01       	movw	r26, r12
    7e14:	54 96       	adiw	r26, 0x14	; 20
    7e16:	2d 93       	st	X+, r18
    7e18:	3d 93       	st	X+, r19
    7e1a:	4d 93       	st	X+, r20
    7e1c:	5c 93       	st	X, r21
    7e1e:	57 97       	sbiw	r26, 0x17	; 23
    7e20:	05 c0       	rjmp	.+10     	; 0x7e2c <UpdateLimits+0x1dc>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    7e22:	f6 01       	movw	r30, r12
    7e24:	14 8a       	std	Z+20, r1	; 0x14
    7e26:	15 8a       	std	Z+21, r1	; 0x15
    7e28:	16 8a       	std	Z+22, r1	; 0x16
    7e2a:	17 8a       	std	Z+23, r1	; 0x17
    7e2c:	ff ef       	ldi	r31, 0xFF	; 255
    7e2e:	ef 1a       	sub	r14, r31
    7e30:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    7e32:	23 e0       	ldi	r18, 0x03	; 3
    7e34:	e2 16       	cp	r14, r18
    7e36:	f1 04       	cpc	r15, r1
    7e38:	39 f6       	brne	.-114    	; 0x7dc8 <UpdateLimits+0x178>
    7e3a:	4c e0       	ldi	r20, 0x0C	; 12
    7e3c:	a4 0e       	add	r10, r20
    7e3e:	b1 1c       	adc	r11, r1
    7e40:	0d 5f       	subi	r16, 0xFD	; 253
    7e42:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    7e44:	06 30       	cpi	r16, 0x06	; 6
    7e46:	11 05       	cpc	r17, r1
    7e48:	09 f0       	breq	.+2      	; 0x7e4c <UpdateLimits+0x1fc>
    7e4a:	ad cf       	rjmp	.-166    	; 0x7da6 <UpdateLimits+0x156>
    7e4c:	87 e9       	ldi	r24, 0x97	; 151
    7e4e:	97 e0       	ldi	r25, 0x07	; 7
    7e50:	e6 ed       	ldi	r30, 0xD6	; 214
    7e52:	f5 e0       	ldi	r31, 0x05	; 5
    7e54:	6f e9       	ldi	r22, 0x9F	; 159
    7e56:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    7e58:	dc 01       	movw	r26, r24
    7e5a:	2d 91       	ld	r18, X+
    7e5c:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7e5e:	ba e0       	ldi	r27, 0x0A	; 10
    7e60:	2b 02       	muls	r18, r27
    7e62:	90 01       	movw	r18, r0
    7e64:	11 24       	eor	r1, r1
    7e66:	2a 55       	subi	r18, 0x5A	; 90
    7e68:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    7e6a:	31 83       	std	Z+1, r19	; 0x01
    7e6c:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    7e6e:	db 01       	movw	r26, r22
    7e70:	2d 91       	ld	r18, X+
    7e72:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7e74:	ba e0       	ldi	r27, 0x0A	; 10
    7e76:	2b 02       	muls	r18, r27
    7e78:	90 01       	movw	r18, r0
    7e7a:	11 24       	eor	r1, r1
    7e7c:	2a 55       	subi	r18, 0x5A	; 90
    7e7e:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    7e80:	33 83       	std	Z+3, r19	; 0x03
    7e82:	22 83       	std	Z+2, r18	; 0x02
    7e84:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    7e86:	25 e0       	ldi	r18, 0x05	; 5
    7e88:	e6 3f       	cpi	r30, 0xF6	; 246
    7e8a:	f2 07       	cpc	r31, r18
    7e8c:	29 f7       	brne	.-54     	; 0x7e58 <UpdateLimits+0x208>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    7e8e:	80 91 04 06 	lds	r24, 0x0604
    7e92:	4a e0       	ldi	r20, 0x0A	; 10
    7e94:	84 02       	muls	r24, r20
    7e96:	c0 01       	movw	r24, r0
    7e98:	11 24       	eor	r1, r1
    7e9a:	90 93 cd 07 	sts	0x07CD, r25
    7e9e:	80 93 cc 07 	sts	0x07CC, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    7ea2:	80 91 0a 06 	lds	r24, 0x060A
    7ea6:	6a e0       	ldi	r22, 0x0A	; 10
    7ea8:	86 02       	muls	r24, r22
    7eaa:	c0 01       	movw	r24, r0
    7eac:	11 24       	eor	r1, r1
    7eae:	90 93 d1 07 	sts	0x07D1, r25
    7eb2:	80 93 d0 07 	sts	0x07D0, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    7eb6:	80 91 16 06 	lds	r24, 0x0616
    7eba:	aa e0       	ldi	r26, 0x0A	; 10
    7ebc:	8a 02       	muls	r24, r26
    7ebe:	c0 01       	movw	r24, r0
    7ec0:	11 24       	eor	r1, r1
    7ec2:	90 93 cf 07 	sts	0x07CF, r25
    7ec6:	80 93 ce 07 	sts	0x07CE, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    7eca:	80 91 1c 06 	lds	r24, 0x061C
    7ece:	ba e0       	ldi	r27, 0x0A	; 10
    7ed0:	8b 02       	muls	r24, r27
    7ed2:	c0 01       	movw	r24, r0
    7ed4:	11 24       	eor	r1, r1
    7ed6:	90 93 d3 07 	sts	0x07D3, r25
    7eda:	80 93 d2 07 	sts	0x07D2, r24
	}
}
    7ede:	2c 96       	adiw	r28, 0x0c	; 12
    7ee0:	0f b6       	in	r0, 0x3f	; 63
    7ee2:	f8 94       	cli
    7ee4:	de bf       	out	0x3e, r29	; 62
    7ee6:	0f be       	out	0x3f, r0	; 63
    7ee8:	cd bf       	out	0x3d, r28	; 61
    7eea:	df 91       	pop	r29
    7eec:	cf 91       	pop	r28
    7eee:	1f 91       	pop	r17
    7ef0:	0f 91       	pop	r16
    7ef2:	ff 90       	pop	r15
    7ef4:	ef 90       	pop	r14
    7ef6:	df 90       	pop	r13
    7ef8:	cf 90       	pop	r12
    7efa:	bf 90       	pop	r11
    7efc:	af 90       	pop	r10
    7efe:	9f 90       	pop	r9
    7f00:	8f 90       	pop	r8
    7f02:	7f 90       	pop	r7
    7f04:	6f 90       	pop	r6
    7f06:	08 95       	ret

00007f08 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    7f08:	0f 93       	push	r16
    7f0a:	1f 93       	push	r17
    7f0c:	cf 93       	push	r28
    7f0e:	df 93       	push	r29
    7f10:	af e5       	ldi	r26, 0x5F	; 95
    7f12:	b6 e0       	ldi	r27, 0x06	; 6
    7f14:	0f e8       	ldi	r16, 0x8F	; 143
    7f16:	17 e0       	ldi	r17, 0x07	; 7
    7f18:	e6 ed       	ldi	r30, 0xD6	; 214
    7f1a:	f5 e0       	ldi	r31, 0x05	; 5
    7f1c:	80 e0       	ldi	r24, 0x00	; 0
    7f1e:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    7f20:	2d 91       	ld	r18, X+
    7f22:	3c 91       	ld	r19, X
    7f24:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    7f26:	e8 01       	movw	r28, r16
    7f28:	49 91       	ld	r20, Y+
    7f2a:	8e 01       	movw	r16, r28
    7f2c:	41 30       	cpi	r20, 0x01	; 1
    7f2e:	19 f4       	brne	.+6      	; 0x7f36 <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    7f30:	31 95       	neg	r19
    7f32:	21 95       	neg	r18
    7f34:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    7f36:	2a 55       	subi	r18, 0x5A	; 90
    7f38:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    7f3a:	62 81       	ldd	r22, Z+2	; 0x02
    7f3c:	73 81       	ldd	r23, Z+3	; 0x03
    7f3e:	ac 01       	movw	r20, r24
    7f40:	44 0f       	add	r20, r20
    7f42:	55 1f       	adc	r21, r21
    7f44:	62 17       	cp	r22, r18
    7f46:	73 07       	cpc	r23, r19
    7f48:	24 f4       	brge	.+8      	; 0x7f52 <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    7f4a:	48 57       	subi	r20, 0x78	; 120
    7f4c:	57 4f       	sbci	r21, 0xF7	; 247
    7f4e:	ea 01       	movw	r28, r20
    7f50:	08 c0       	rjmp	.+16     	; 0x7f62 <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    7f52:	60 81       	ld	r22, Z
    7f54:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7f56:	48 57       	subi	r20, 0x78	; 120
    7f58:	57 4f       	sbci	r21, 0xF7	; 247
    7f5a:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    7f5c:	26 17       	cp	r18, r22
    7f5e:	37 07       	cpc	r19, r23
    7f60:	1c f4       	brge	.+6      	; 0x7f68 <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7f62:	79 83       	std	Y+1, r23	; 0x01
    7f64:	68 83       	st	Y, r22
    7f66:	02 c0       	rjmp	.+4      	; 0x7f6c <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    7f68:	39 83       	std	Y+1, r19	; 0x01
    7f6a:	28 83       	st	Y, r18
    7f6c:	01 96       	adiw	r24, 0x01	; 1
    7f6e:	96 96       	adiw	r26, 0x26	; 38
    7f70:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    7f72:	88 30       	cpi	r24, 0x08	; 8
    7f74:	91 05       	cpc	r25, r1
    7f76:	a1 f6       	brne	.-88     	; 0x7f20 <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    7f78:	df 91       	pop	r29
    7f7a:	cf 91       	pop	r28
    7f7c:	1f 91       	pop	r17
    7f7e:	0f 91       	pop	r16
    7f80:	08 95       	ret

00007f82 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    7f82:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    7f84:	64 36       	cpi	r22, 0x64	; 100
    7f86:	71 05       	cpc	r23, r1
    7f88:	e9 f0       	breq	.+58     	; 0x7fc4 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    7f8a:	6c 39       	cpi	r22, 0x9C	; 156
    7f8c:	8f ef       	ldi	r24, 0xFF	; 255
    7f8e:	78 07       	cpc	r23, r24
    7f90:	29 f4       	brne	.+10     	; 0x7f9c <scale32+0x1a>
	{
		return -value16;	
    7f92:	88 27       	eor	r24, r24
    7f94:	99 27       	eor	r25, r25
    7f96:	82 1b       	sub	r24, r18
    7f98:	93 0b       	sbc	r25, r19
    7f9a:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    7f9c:	61 15       	cp	r22, r1
    7f9e:	71 05       	cpc	r23, r1
    7fa0:	71 f0       	breq	.+28     	; 0x7fbe <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    7fa2:	db 01       	movw	r26, r22
    7fa4:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    7fa8:	6e 5c       	subi	r22, 0xCE	; 206
    7faa:	7f 4f       	sbci	r23, 0xFF	; 255
    7fac:	8f 4f       	sbci	r24, 0xFF	; 255
    7fae:	9f 4f       	sbci	r25, 0xFF	; 255
    7fb0:	24 e6       	ldi	r18, 0x64	; 100
    7fb2:	30 e0       	ldi	r19, 0x00	; 0
    7fb4:	40 e0       	ldi	r20, 0x00	; 0
    7fb6:	50 e0       	ldi	r21, 0x00	; 0
    7fb8:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <__divmodsi4>
    7fbc:	03 c0       	rjmp	.+6      	; 0x7fc4 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    7fbe:	80 e0       	ldi	r24, 0x00	; 0
    7fc0:	90 e0       	ldi	r25, 0x00	; 0
    7fc2:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    7fc4:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    7fc6:	08 95       	ret

00007fc8 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    7fc8:	2f 92       	push	r2
    7fca:	3f 92       	push	r3
    7fcc:	4f 92       	push	r4
    7fce:	5f 92       	push	r5
    7fd0:	6f 92       	push	r6
    7fd2:	7f 92       	push	r7
    7fd4:	8f 92       	push	r8
    7fd6:	9f 92       	push	r9
    7fd8:	af 92       	push	r10
    7fda:	bf 92       	push	r11
    7fdc:	cf 92       	push	r12
    7fde:	df 92       	push	r13
    7fe0:	ef 92       	push	r14
    7fe2:	ff 92       	push	r15
    7fe4:	0f 93       	push	r16
    7fe6:	1f 93       	push	r17
    7fe8:	cf 93       	push	r28
    7fea:	df 93       	push	r29
    7fec:	cd b7       	in	r28, 0x3d	; 61
    7fee:	de b7       	in	r29, 0x3e	; 62
    7ff0:	e2 97       	sbiw	r28, 0x32	; 50
    7ff2:	0f b6       	in	r0, 0x3f	; 63
    7ff4:	f8 94       	cli
    7ff6:	de bf       	out	0x3e, r29	; 62
    7ff8:	0f be       	out	0x3f, r0	; 63
    7ffa:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    7ffc:	60 91 b5 05 	lds	r22, 0x05B5
    8000:	70 91 b6 05 	lds	r23, 0x05B6
    8004:	80 91 b7 05 	lds	r24, 0x05B7
    8008:	90 91 b8 05 	lds	r25, 0x05B8
    800c:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
    8010:	8b 01       	movw	r16, r22
    8012:	83 e0       	ldi	r24, 0x03	; 3
    8014:	00 0f       	add	r16, r16
    8016:	11 1f       	adc	r17, r17
    8018:	8a 95       	dec	r24
    801a:	e1 f7       	brne	.-8      	; 0x8014 <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    801c:	60 91 b9 05 	lds	r22, 0x05B9
    8020:	70 91 ba 05 	lds	r23, 0x05BA
    8024:	80 91 bb 05 	lds	r24, 0x05BB
    8028:	90 91 bc 05 	lds	r25, 0x05BC
    802c:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
    8030:	93 e0       	ldi	r25, 0x03	; 3
    8032:	66 0f       	add	r22, r22
    8034:	77 1f       	adc	r23, r23
    8036:	9a 95       	dec	r25
    8038:	e1 f7       	brne	.-8      	; 0x8032 <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    803a:	20 91 50 08 	lds	r18, 0x0850
    803e:	30 91 51 08 	lds	r19, 0x0851
    8042:	3e 8f       	std	Y+30, r19	; 0x1e
    8044:	2d 8f       	std	Y+29, r18	; 0x1d
    8046:	38 8b       	std	Y+16, r19	; 0x10
    8048:	2f 87       	std	Y+15, r18	; 0x0f
    804a:	40 91 52 08 	lds	r20, 0x0852
    804e:	50 91 53 08 	lds	r21, 0x0853
    8052:	58 a3       	std	Y+32, r21	; 0x20
    8054:	4f 8f       	std	Y+31, r20	; 0x1f
    8056:	5a 8b       	std	Y+18, r21	; 0x12
    8058:	49 8b       	std	Y+17, r20	; 0x11
    805a:	20 91 54 08 	lds	r18, 0x0854
    805e:	30 91 55 08 	lds	r19, 0x0855
    8062:	3a a3       	std	Y+34, r19	; 0x22
    8064:	29 a3       	std	Y+33, r18	; 0x21
    8066:	3c 8b       	std	Y+20, r19	; 0x14
    8068:	2b 8b       	std	Y+19, r18	; 0x13
    806a:	1e 8b       	std	Y+22, r17	; 0x16
    806c:	0d 8b       	std	Y+21, r16	; 0x15
    806e:	78 8f       	std	Y+24, r23	; 0x18
    8070:	6f 8b       	std	Y+23, r22	; 0x17
    8072:	40 91 5c 08 	lds	r20, 0x085C
    8076:	50 91 5d 08 	lds	r21, 0x085D
    807a:	5c a3       	std	Y+36, r21	; 0x24
    807c:	4b a3       	std	Y+35, r20	; 0x23
    807e:	5a 8f       	std	Y+26, r21	; 0x1a
    8080:	49 8f       	std	Y+25, r20	; 0x19
    8082:	20 91 5e 08 	lds	r18, 0x085E
    8086:	30 91 5f 08 	lds	r19, 0x085F
    808a:	3e a3       	std	Y+38, r19	; 0x26
    808c:	2d a3       	std	Y+37, r18	; 0x25
    808e:	3c 8f       	std	Y+28, r19	; 0x1c
    8090:	2b 8f       	std	Y+27, r18	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    8092:	40 91 56 08 	lds	r20, 0x0856
    8096:	50 91 57 08 	lds	r21, 0x0857
    809a:	58 a7       	std	Y+40, r21	; 0x28
    809c:	4f a3       	std	Y+39, r20	; 0x27
    809e:	5a 83       	std	Y+2, r21	; 0x02
    80a0:	49 83       	std	Y+1, r20	; 0x01
    80a2:	20 91 58 08 	lds	r18, 0x0858
    80a6:	30 91 59 08 	lds	r19, 0x0859
    80aa:	3a a7       	std	Y+42, r19	; 0x2a
    80ac:	29 a7       	std	Y+41, r18	; 0x29
    80ae:	3c 83       	std	Y+4, r19	; 0x04
    80b0:	2b 83       	std	Y+3, r18	; 0x03
    80b2:	20 90 5a 08 	lds	r2, 0x085A
    80b6:	30 90 5b 08 	lds	r3, 0x085B
    80ba:	3e 82       	std	Y+6, r3	; 0x06
    80bc:	2d 82       	std	Y+5, r2	; 0x05
    80be:	18 87       	std	Y+8, r17	; 0x08
    80c0:	0f 83       	std	Y+7, r16	; 0x07
    80c2:	7a 87       	std	Y+10, r23	; 0x0a
    80c4:	69 87       	std	Y+9, r22	; 0x09
    80c6:	40 90 62 08 	lds	r4, 0x0862
    80ca:	50 90 63 08 	lds	r5, 0x0863
    80ce:	5c 86       	std	Y+12, r5	; 0x0c
    80d0:	4b 86       	std	Y+11, r4	; 0x0b
    80d2:	80 90 64 08 	lds	r8, 0x0864
    80d6:	90 90 65 08 	lds	r9, 0x0865
    80da:	9e 86       	std	Y+14, r9	; 0x0e
    80dc:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (transition < 100)
    80de:	a0 90 21 05 	lds	r10, 0x0521
    80e2:	b0 90 22 05 	lds	r11, 0x0522
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    80e6:	40 91 60 08 	lds	r20, 0x0860
    80ea:	50 91 61 08 	lds	r21, 0x0861
    80ee:	5c a7       	std	Y+44, r21	; 0x2c
    80f0:	4b a7       	std	Y+43, r20	; 0x2b
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    80f2:	20 91 66 08 	lds	r18, 0x0866
    80f6:	30 91 67 08 	lds	r19, 0x0867
    80fa:	3e a7       	std	Y+46, r19	; 0x2e
    80fc:	2d a7       	std	Y+45, r18	; 0x2d
    80fe:	c1 2c       	mov	r12, r1
    8100:	d1 2c       	mov	r13, r1
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    8102:	4f a1       	ldd	r20, Y+39	; 0x27
    8104:	58 a5       	ldd	r21, Y+40	; 0x28
    8106:	51 95       	neg	r21
    8108:	41 95       	neg	r20
    810a:	51 09       	sbc	r21, r1
    810c:	58 ab       	std	Y+48, r21	; 0x30
    810e:	4f a7       	std	Y+47, r20	; 0x2f
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    8110:	2d 8d       	ldd	r18, Y+29	; 0x1d
    8112:	3e 8d       	ldd	r19, Y+30	; 0x1e
    8114:	31 95       	neg	r19
    8116:	21 95       	neg	r18
    8118:	31 09       	sbc	r19, r1
    811a:	3a ab       	std	Y+50, r19	; 0x32
    811c:	29 ab       	std	Y+49, r18	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (transition < 100)
    811e:	34 e6       	ldi	r19, 0x64	; 100
    8120:	a3 16       	cp	r10, r19
    8122:	b1 04       	cpc	r11, r1
    8124:	0c f0       	brlt	.+2      	; 0x8128 <ProcessMixer+0x160>
    8126:	7b c0       	rjmp	.+246    	; 0x821e <ProcessMixer+0x256>
    8128:	86 01       	movw	r16, r12
    812a:	03 53       	subi	r16, 0x33	; 51
    812c:	1a 4f       	sbci	r17, 0xFA	; 250
    812e:	f8 01       	movw	r30, r16
    8130:	ec 55       	subi	r30, 0x5C	; 92
    8132:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    8134:	80 81       	ld	r24, Z
    8136:	81 30       	cpi	r24, 0x01	; 1
    8138:	99 f0       	breq	.+38     	; 0x8160 <ProcessMixer+0x198>
    813a:	82 30       	cpi	r24, 0x02	; 2
    813c:	d1 f4       	brne	.+52     	; 0x8172 <ProcessMixer+0x1aa>
    813e:	f8 01       	movw	r30, r16
    8140:	e2 56       	subi	r30, 0x62	; 98
    8142:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    8144:	60 81       	ld	r22, Z
    8146:	45 e0       	ldi	r20, 0x05	; 5
    8148:	64 02       	muls	r22, r20
    814a:	b0 01       	movw	r22, r0
    814c:	11 24       	eor	r1, r1
    814e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8150:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8152:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    8156:	ee 24       	eor	r14, r14
    8158:	ff 24       	eor	r15, r15
    815a:	e8 1a       	sub	r14, r24
    815c:	f9 0a       	sbc	r15, r25
					break;
    815e:	0e c0       	rjmp	.+28     	; 0x817c <ProcessMixer+0x1b4>
    8160:	f8 01       	movw	r30, r16
    8162:	e2 56       	subi	r30, 0x62	; 98
    8164:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    8166:	80 81       	ld	r24, Z
    8168:	87 fd       	sbrc	r24, 7
    816a:	06 c0       	rjmp	.+12     	; 0x8178 <ProcessMixer+0x1b0>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    816c:	e9 a8       	ldd	r14, Y+49	; 0x31
    816e:	fa a8       	ldd	r15, Y+50	; 0x32
    8170:	05 c0       	rjmp	.+10     	; 0x817c <ProcessMixer+0x1b4>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    8172:	e1 2c       	mov	r14, r1
    8174:	f1 2c       	mov	r15, r1
    8176:	02 c0       	rjmp	.+4      	; 0x817c <ProcessMixer+0x1b4>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    8178:	ed 8c       	ldd	r14, Y+29	; 0x1d
    817a:	fe 8c       	ldd	r15, Y+30	; 0x1e
    817c:	f8 01       	movw	r30, r16
    817e:	ea 55       	subi	r30, 0x5A	; 90
    8180:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    8182:	80 81       	ld	r24, Z
    8184:	81 30       	cpi	r24, 0x01	; 1
    8186:	89 f0       	breq	.+34     	; 0x81aa <ProcessMixer+0x1e2>
    8188:	82 30       	cpi	r24, 0x02	; 2
    818a:	f1 f4       	brne	.+60     	; 0x81c8 <ProcessMixer+0x200>
    818c:	f8 01       	movw	r30, r16
    818e:	e0 56       	subi	r30, 0x60	; 96
    8190:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    8192:	60 81       	ld	r22, Z
    8194:	55 e0       	ldi	r21, 0x05	; 5
    8196:	65 02       	muls	r22, r21
    8198:	b0 01       	movw	r22, r0
    819a:	11 24       	eor	r1, r1
    819c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    819e:	98 a1       	ldd	r25, Y+32	; 0x20
    81a0:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    81a4:	e8 0e       	add	r14, r24
    81a6:	f9 1e       	adc	r15, r25
					break;
    81a8:	0f c0       	rjmp	.+30     	; 0x81c8 <ProcessMixer+0x200>
    81aa:	f8 01       	movw	r30, r16
    81ac:	e0 56       	subi	r30, 0x60	; 96
    81ae:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    81b0:	80 81       	ld	r24, Z
    81b2:	87 ff       	sbrs	r24, 7
    81b4:	05 c0       	rjmp	.+10     	; 0x81c0 <ProcessMixer+0x1f8>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    81b6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    81b8:	38 a1       	ldd	r19, Y+32	; 0x20
    81ba:	e2 1a       	sub	r14, r18
    81bc:	f3 0a       	sbc	r15, r19
    81be:	04 c0       	rjmp	.+8      	; 0x81c8 <ProcessMixer+0x200>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    81c0:	4f 8d       	ldd	r20, Y+31	; 0x1f
    81c2:	58 a1       	ldd	r21, Y+32	; 0x20
    81c4:	e4 0e       	add	r14, r20
    81c6:	f5 1e       	adc	r15, r21
    81c8:	f8 01       	movw	r30, r16
    81ca:	e8 55       	subi	r30, 0x58	; 88
    81cc:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    81ce:	80 81       	ld	r24, Z
    81d0:	81 30       	cpi	r24, 0x01	; 1
    81d2:	89 f0       	breq	.+34     	; 0x81f6 <ProcessMixer+0x22e>
    81d4:	82 30       	cpi	r24, 0x02	; 2
    81d6:	f1 f4       	brne	.+60     	; 0x8214 <ProcessMixer+0x24c>
    81d8:	f8 01       	movw	r30, r16
    81da:	ee 55       	subi	r30, 0x5E	; 94
    81dc:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    81de:	60 81       	ld	r22, Z
    81e0:	55 e0       	ldi	r21, 0x05	; 5
    81e2:	65 02       	muls	r22, r21
    81e4:	b0 01       	movw	r22, r0
    81e6:	11 24       	eor	r1, r1
    81e8:	89 a1       	ldd	r24, Y+33	; 0x21
    81ea:	9a a1       	ldd	r25, Y+34	; 0x22
    81ec:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    81f0:	e8 0e       	add	r14, r24
    81f2:	f9 1e       	adc	r15, r25
					break;
    81f4:	0f c0       	rjmp	.+30     	; 0x8214 <ProcessMixer+0x24c>
    81f6:	f8 01       	movw	r30, r16
    81f8:	ee 55       	subi	r30, 0x5E	; 94
    81fa:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_rudder_volume < 0 )
    81fc:	80 81       	ld	r24, Z
    81fe:	87 ff       	sbrs	r24, 7
    8200:	05 c0       	rjmp	.+10     	; 0x820c <ProcessMixer+0x244>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    8202:	29 a1       	ldd	r18, Y+33	; 0x21
    8204:	3a a1       	ldd	r19, Y+34	; 0x22
    8206:	e2 1a       	sub	r14, r18
    8208:	f3 0a       	sbc	r15, r19
    820a:	04 c0       	rjmp	.+8      	; 0x8214 <ProcessMixer+0x24c>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    820c:	49 a1       	ldd	r20, Y+33	; 0x21
    820e:	5a a1       	ldd	r21, Y+34	; 0x22
    8210:	e4 0e       	add	r14, r20
    8212:	f5 1e       	adc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (transition > 0)
    8214:	1a 14       	cp	r1, r10
    8216:	1b 04       	cpc	r1, r11
    8218:	0c f0       	brlt	.+2      	; 0x821c <ProcessMixer+0x254>
    821a:	7b c0       	rjmp	.+246    	; 0x8312 <ProcessMixer+0x34a>
    821c:	02 c0       	rjmp	.+4      	; 0x8222 <ProcessMixer+0x25a>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    821e:	e1 2c       	mov	r14, r1
    8220:	f1 2c       	mov	r15, r1
    8222:	c6 01       	movw	r24, r12
    8224:	83 53       	subi	r24, 0x33	; 51
    8226:	9a 4f       	sbci	r25, 0xFA	; 250
    8228:	3c 01       	movw	r6, r24
    822a:	fc 01       	movw	r30, r24
    822c:	eb 55       	subi	r30, 0x5B	; 91
    822e:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (transition > 0)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    8230:	80 81       	ld	r24, Z
    8232:	81 30       	cpi	r24, 0x01	; 1
    8234:	99 f0       	breq	.+38     	; 0x825c <ProcessMixer+0x294>
    8236:	82 30       	cpi	r24, 0x02	; 2
    8238:	d1 f4       	brne	.+52     	; 0x826e <ProcessMixer+0x2a6>
    823a:	f3 01       	movw	r30, r6
    823c:	e1 56       	subi	r30, 0x61	; 97
    823e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    8240:	60 81       	ld	r22, Z
    8242:	95 e0       	ldi	r25, 0x05	; 5
    8244:	69 02       	muls	r22, r25
    8246:	b0 01       	movw	r22, r0
    8248:	11 24       	eor	r1, r1
    824a:	8f a1       	ldd	r24, Y+39	; 0x27
    824c:	98 a5       	ldd	r25, Y+40	; 0x28
    824e:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    8252:	00 27       	eor	r16, r16
    8254:	11 27       	eor	r17, r17
    8256:	08 1b       	sub	r16, r24
    8258:	19 0b       	sbc	r17, r25
					break;
    825a:	0e c0       	rjmp	.+28     	; 0x8278 <ProcessMixer+0x2b0>
    825c:	f3 01       	movw	r30, r6
    825e:	e1 56       	subi	r30, 0x61	; 97
    8260:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    8262:	80 81       	ld	r24, Z
    8264:	87 fd       	sbrc	r24, 7
    8266:	06 c0       	rjmp	.+12     	; 0x8274 <ProcessMixer+0x2ac>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    8268:	0f a5       	ldd	r16, Y+47	; 0x2f
    826a:	18 a9       	ldd	r17, Y+48	; 0x30
    826c:	05 c0       	rjmp	.+10     	; 0x8278 <ProcessMixer+0x2b0>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    826e:	00 e0       	ldi	r16, 0x00	; 0
    8270:	10 e0       	ldi	r17, 0x00	; 0
    8272:	02 c0       	rjmp	.+4      	; 0x8278 <ProcessMixer+0x2b0>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    8274:	0f a1       	ldd	r16, Y+39	; 0x27
    8276:	18 a5       	ldd	r17, Y+40	; 0x28
    8278:	f3 01       	movw	r30, r6
    827a:	e9 55       	subi	r30, 0x59	; 89
    827c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    827e:	80 81       	ld	r24, Z
    8280:	81 30       	cpi	r24, 0x01	; 1
    8282:	89 f0       	breq	.+34     	; 0x82a6 <ProcessMixer+0x2de>
    8284:	82 30       	cpi	r24, 0x02	; 2
    8286:	f1 f4       	brne	.+60     	; 0x82c4 <ProcessMixer+0x2fc>
    8288:	f3 01       	movw	r30, r6
    828a:	ef 55       	subi	r30, 0x5F	; 95
    828c:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    828e:	60 81       	ld	r22, Z
    8290:	55 e0       	ldi	r21, 0x05	; 5
    8292:	65 02       	muls	r22, r21
    8294:	b0 01       	movw	r22, r0
    8296:	11 24       	eor	r1, r1
    8298:	89 a5       	ldd	r24, Y+41	; 0x29
    829a:	9a a5       	ldd	r25, Y+42	; 0x2a
    829c:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    82a0:	08 0f       	add	r16, r24
    82a2:	19 1f       	adc	r17, r25
					break;
    82a4:	0f c0       	rjmp	.+30     	; 0x82c4 <ProcessMixer+0x2fc>
    82a6:	f3 01       	movw	r30, r6
    82a8:	ef 55       	subi	r30, 0x5F	; 95
    82aa:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    82ac:	80 81       	ld	r24, Z
    82ae:	87 ff       	sbrs	r24, 7
    82b0:	05 c0       	rjmp	.+10     	; 0x82bc <ProcessMixer+0x2f4>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    82b2:	29 a5       	ldd	r18, Y+41	; 0x29
    82b4:	3a a5       	ldd	r19, Y+42	; 0x2a
    82b6:	02 1b       	sub	r16, r18
    82b8:	13 0b       	sbc	r17, r19
    82ba:	04 c0       	rjmp	.+8      	; 0x82c4 <ProcessMixer+0x2fc>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    82bc:	49 a5       	ldd	r20, Y+41	; 0x29
    82be:	5a a5       	ldd	r21, Y+42	; 0x2a
    82c0:	04 0f       	add	r16, r20
    82c2:	15 1f       	adc	r17, r21
    82c4:	f3 01       	movw	r30, r6
    82c6:	e7 55       	subi	r30, 0x57	; 87
    82c8:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    82ca:	80 81       	ld	r24, Z
    82cc:	81 30       	cpi	r24, 0x01	; 1
    82ce:	81 f0       	breq	.+32     	; 0x82f0 <ProcessMixer+0x328>
    82d0:	82 30       	cpi	r24, 0x02	; 2
    82d2:	c9 f4       	brne	.+50     	; 0x8306 <ProcessMixer+0x33e>
    82d4:	f3 01       	movw	r30, r6
    82d6:	ed 55       	subi	r30, 0x5D	; 93
    82d8:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    82da:	60 81       	ld	r22, Z
    82dc:	85 e0       	ldi	r24, 0x05	; 5
    82de:	68 02       	muls	r22, r24
    82e0:	b0 01       	movw	r22, r0
    82e2:	11 24       	eor	r1, r1
    82e4:	c1 01       	movw	r24, r2
    82e6:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    82ea:	08 0f       	add	r16, r24
    82ec:	19 1f       	adc	r17, r25
					break;
    82ee:	0b c0       	rjmp	.+22     	; 0x8306 <ProcessMixer+0x33e>
    82f0:	f3 01       	movw	r30, r6
    82f2:	ed 55       	subi	r30, 0x5D	; 93
    82f4:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    82f6:	80 81       	ld	r24, Z
    82f8:	87 ff       	sbrs	r24, 7
    82fa:	03 c0       	rjmp	.+6      	; 0x8302 <ProcessMixer+0x33a>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    82fc:	02 19       	sub	r16, r2
    82fe:	13 09       	sbc	r17, r3
    8300:	02 c0       	rjmp	.+4      	; 0x8306 <ProcessMixer+0x33e>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    8302:	02 0d       	add	r16, r2
    8304:	13 1d       	adc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
    8306:	94 e6       	ldi	r25, 0x64	; 100
    8308:	a9 16       	cp	r10, r25
    830a:	b1 04       	cpc	r11, r1
    830c:	0c f0       	brlt	.+2      	; 0x8310 <ProcessMixer+0x348>
    830e:	7d c0       	rjmp	.+250    	; 0x840a <ProcessMixer+0x442>
    8310:	02 c0       	rjmp	.+4      	; 0x8316 <ProcessMixer+0x34e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    8312:	00 e0       	ldi	r16, 0x00	; 0
    8314:	10 e0       	ldi	r17, 0x00	; 0
    8316:	d6 01       	movw	r26, r12
    8318:	a3 53       	subi	r26, 0x33	; 51
    831a:	ba 4f       	sbci	r27, 0xFA	; 250
    831c:	3d 01       	movw	r6, r26
    831e:	fd 01       	movw	r30, r26
    8320:	e6 55       	subi	r30, 0x56	; 86
    8322:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    8324:	80 81       	ld	r24, Z
    8326:	81 30       	cpi	r24, 0x01	; 1
    8328:	89 f0       	breq	.+34     	; 0x834c <ProcessMixer+0x384>
    832a:	82 30       	cpi	r24, 0x02	; 2
    832c:	f1 f4       	brne	.+60     	; 0x836a <ProcessMixer+0x3a2>
    832e:	fd 01       	movw	r30, r26
    8330:	e2 56       	subi	r30, 0x62	; 98
    8332:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    8334:	60 81       	ld	r22, Z
    8336:	55 e0       	ldi	r21, 0x05	; 5
    8338:	65 02       	muls	r22, r21
    833a:	b0 01       	movw	r22, r0
    833c:	11 24       	eor	r1, r1
    833e:	8b a1       	ldd	r24, Y+35	; 0x23
    8340:	9c a1       	ldd	r25, Y+36	; 0x24
    8342:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    8346:	e8 1a       	sub	r14, r24
    8348:	f9 0a       	sbc	r15, r25
					break;
    834a:	0f c0       	rjmp	.+30     	; 0x836a <ProcessMixer+0x3a2>
    834c:	fd 01       	movw	r30, r26
    834e:	e2 56       	subi	r30, 0x62	; 98
    8350:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    8352:	80 81       	ld	r24, Z
    8354:	87 ff       	sbrs	r24, 7
    8356:	05 c0       	rjmp	.+10     	; 0x8362 <ProcessMixer+0x39a>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    8358:	2b a1       	ldd	r18, Y+35	; 0x23
    835a:	3c a1       	ldd	r19, Y+36	; 0x24
    835c:	e2 0e       	add	r14, r18
    835e:	f3 1e       	adc	r15, r19
    8360:	04 c0       	rjmp	.+8      	; 0x836a <ProcessMixer+0x3a2>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    8362:	4b a1       	ldd	r20, Y+35	; 0x23
    8364:	5c a1       	ldd	r21, Y+36	; 0x24
    8366:	e4 1a       	sub	r14, r20
    8368:	f5 0a       	sbc	r15, r21
    836a:	f3 01       	movw	r30, r6
    836c:	e4 55       	subi	r30, 0x54	; 84
    836e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    8370:	80 81       	ld	r24, Z
    8372:	81 30       	cpi	r24, 0x01	; 1
    8374:	89 f0       	breq	.+34     	; 0x8398 <ProcessMixer+0x3d0>
    8376:	82 30       	cpi	r24, 0x02	; 2
    8378:	f1 f4       	brne	.+60     	; 0x83b6 <ProcessMixer+0x3ee>
    837a:	f3 01       	movw	r30, r6
    837c:	e0 56       	subi	r30, 0x60	; 96
    837e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    8380:	60 81       	ld	r22, Z
    8382:	55 e0       	ldi	r21, 0x05	; 5
    8384:	65 02       	muls	r22, r21
    8386:	b0 01       	movw	r22, r0
    8388:	11 24       	eor	r1, r1
    838a:	8d a1       	ldd	r24, Y+37	; 0x25
    838c:	9e a1       	ldd	r25, Y+38	; 0x26
    838e:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    8392:	e8 0e       	add	r14, r24
    8394:	f9 1e       	adc	r15, r25
					break;
    8396:	0f c0       	rjmp	.+30     	; 0x83b6 <ProcessMixer+0x3ee>
    8398:	f3 01       	movw	r30, r6
    839a:	e0 56       	subi	r30, 0x60	; 96
    839c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    839e:	80 81       	ld	r24, Z
    83a0:	87 ff       	sbrs	r24, 7
    83a2:	05 c0       	rjmp	.+10     	; 0x83ae <ProcessMixer+0x3e6>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    83a4:	2d a1       	ldd	r18, Y+37	; 0x25
    83a6:	3e a1       	ldd	r19, Y+38	; 0x26
    83a8:	e2 1a       	sub	r14, r18
    83aa:	f3 0a       	sbc	r15, r19
    83ac:	04 c0       	rjmp	.+8      	; 0x83b6 <ProcessMixer+0x3ee>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    83ae:	4d a1       	ldd	r20, Y+37	; 0x25
    83b0:	5e a1       	ldd	r21, Y+38	; 0x26
    83b2:	e4 0e       	add	r14, r20
    83b4:	f5 1e       	adc	r15, r21
    83b6:	f3 01       	movw	r30, r6
    83b8:	e2 55       	subi	r30, 0x52	; 82
    83ba:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    83bc:	80 81       	ld	r24, Z
    83be:	81 30       	cpi	r24, 0x01	; 1
    83c0:	89 f0       	breq	.+34     	; 0x83e4 <ProcessMixer+0x41c>
    83c2:	82 30       	cpi	r24, 0x02	; 2
    83c4:	f1 f4       	brne	.+60     	; 0x8402 <ProcessMixer+0x43a>
    83c6:	f3 01       	movw	r30, r6
    83c8:	e5 56       	subi	r30, 0x65	; 101
    83ca:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    83cc:	60 81       	ld	r22, Z
    83ce:	55 e0       	ldi	r21, 0x05	; 5
    83d0:	65 02       	muls	r22, r21
    83d2:	b0 01       	movw	r22, r0
    83d4:	11 24       	eor	r1, r1
    83d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    83d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    83da:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    83de:	e8 1a       	sub	r14, r24
    83e0:	f9 0a       	sbc	r15, r25
					break;
    83e2:	0f c0       	rjmp	.+30     	; 0x8402 <ProcessMixer+0x43a>
    83e4:	f3 01       	movw	r30, r6
    83e6:	e5 56       	subi	r30, 0x65	; 101
    83e8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    83ea:	80 81       	ld	r24, Z
    83ec:	87 ff       	sbrs	r24, 7
    83ee:	05 c0       	rjmp	.+10     	; 0x83fa <ProcessMixer+0x432>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    83f0:	2b a5       	ldd	r18, Y+43	; 0x2b
    83f2:	3c a5       	ldd	r19, Y+44	; 0x2c
    83f4:	e2 0e       	add	r14, r18
    83f6:	f3 1e       	adc	r15, r19
    83f8:	04 c0       	rjmp	.+8      	; 0x8402 <ProcessMixer+0x43a>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    83fa:	4b a5       	ldd	r20, Y+43	; 0x2b
    83fc:	5c a5       	ldd	r21, Y+44	; 0x2c
    83fe:	e4 1a       	sub	r14, r20
    8400:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (transition > 0)
    8402:	1a 14       	cp	r1, r10
    8404:	1b 04       	cpc	r1, r11
    8406:	0c f0       	brlt	.+2      	; 0x840a <ProcessMixer+0x442>
    8408:	71 c0       	rjmp	.+226    	; 0x84ec <ProcessMixer+0x524>
    840a:	c6 01       	movw	r24, r12
    840c:	83 53       	subi	r24, 0x33	; 51
    840e:	9a 4f       	sbci	r25, 0xFA	; 250
    8410:	3c 01       	movw	r6, r24
    8412:	fc 01       	movw	r30, r24
    8414:	e5 55       	subi	r30, 0x55	; 85
    8416:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    8418:	80 81       	ld	r24, Z
    841a:	81 30       	cpi	r24, 0x01	; 1
    841c:	81 f0       	breq	.+32     	; 0x843e <ProcessMixer+0x476>
    841e:	82 30       	cpi	r24, 0x02	; 2
    8420:	c9 f4       	brne	.+50     	; 0x8454 <ProcessMixer+0x48c>
    8422:	f3 01       	movw	r30, r6
    8424:	e1 56       	subi	r30, 0x61	; 97
    8426:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    8428:	60 81       	ld	r22, Z
    842a:	95 e0       	ldi	r25, 0x05	; 5
    842c:	69 02       	muls	r22, r25
    842e:	b0 01       	movw	r22, r0
    8430:	11 24       	eor	r1, r1
    8432:	c2 01       	movw	r24, r4
    8434:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    8438:	08 1b       	sub	r16, r24
    843a:	19 0b       	sbc	r17, r25
					break;
    843c:	0b c0       	rjmp	.+22     	; 0x8454 <ProcessMixer+0x48c>
    843e:	f3 01       	movw	r30, r6
    8440:	e1 56       	subi	r30, 0x61	; 97
    8442:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    8444:	80 81       	ld	r24, Z
    8446:	87 ff       	sbrs	r24, 7
    8448:	03 c0       	rjmp	.+6      	; 0x8450 <ProcessMixer+0x488>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    844a:	04 0d       	add	r16, r4
    844c:	15 1d       	adc	r17, r5
    844e:	02 c0       	rjmp	.+4      	; 0x8454 <ProcessMixer+0x48c>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    8450:	04 19       	sub	r16, r4
    8452:	15 09       	sbc	r17, r5
    8454:	f3 01       	movw	r30, r6
    8456:	e3 55       	subi	r30, 0x53	; 83
    8458:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    845a:	80 81       	ld	r24, Z
    845c:	81 30       	cpi	r24, 0x01	; 1
    845e:	81 f0       	breq	.+32     	; 0x8480 <ProcessMixer+0x4b8>
    8460:	82 30       	cpi	r24, 0x02	; 2
    8462:	c9 f4       	brne	.+50     	; 0x8496 <ProcessMixer+0x4ce>
    8464:	f3 01       	movw	r30, r6
    8466:	ef 55       	subi	r30, 0x5F	; 95
    8468:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    846a:	60 81       	ld	r22, Z
    846c:	a5 e0       	ldi	r26, 0x05	; 5
    846e:	6a 02       	muls	r22, r26
    8470:	b0 01       	movw	r22, r0
    8472:	11 24       	eor	r1, r1
    8474:	c4 01       	movw	r24, r8
    8476:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    847a:	08 0f       	add	r16, r24
    847c:	19 1f       	adc	r17, r25
					break;
    847e:	0b c0       	rjmp	.+22     	; 0x8496 <ProcessMixer+0x4ce>
    8480:	f3 01       	movw	r30, r6
    8482:	ef 55       	subi	r30, 0x5F	; 95
    8484:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    8486:	80 81       	ld	r24, Z
    8488:	87 ff       	sbrs	r24, 7
    848a:	03 c0       	rjmp	.+6      	; 0x8492 <ProcessMixer+0x4ca>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    848c:	08 19       	sub	r16, r8
    848e:	19 09       	sbc	r17, r9
    8490:	02 c0       	rjmp	.+4      	; 0x8496 <ProcessMixer+0x4ce>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    8492:	08 0d       	add	r16, r8
    8494:	19 1d       	adc	r17, r9
    8496:	f3 01       	movw	r30, r6
    8498:	e1 55       	subi	r30, 0x51	; 81
    849a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    849c:	80 81       	ld	r24, Z
    849e:	81 30       	cpi	r24, 0x01	; 1
    84a0:	89 f0       	breq	.+34     	; 0x84c4 <ProcessMixer+0x4fc>
    84a2:	82 30       	cpi	r24, 0x02	; 2
    84a4:	f1 f4       	brne	.+60     	; 0x84e2 <ProcessMixer+0x51a>
    84a6:	f3 01       	movw	r30, r6
    84a8:	e4 56       	subi	r30, 0x64	; 100
    84aa:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    84ac:	60 81       	ld	r22, Z
    84ae:	55 e0       	ldi	r21, 0x05	; 5
    84b0:	65 02       	muls	r22, r21
    84b2:	b0 01       	movw	r22, r0
    84b4:	11 24       	eor	r1, r1
    84b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    84b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    84ba:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    84be:	08 1b       	sub	r16, r24
    84c0:	19 0b       	sbc	r17, r25
					break;
    84c2:	0f c0       	rjmp	.+30     	; 0x84e2 <ProcessMixer+0x51a>
    84c4:	f3 01       	movw	r30, r6
    84c6:	e4 56       	subi	r30, 0x64	; 100
    84c8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    84ca:	80 81       	ld	r24, Z
    84cc:	87 ff       	sbrs	r24, 7
    84ce:	05 c0       	rjmp	.+10     	; 0x84da <ProcessMixer+0x512>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    84d0:	2d a5       	ldd	r18, Y+45	; 0x2d
    84d2:	3e a5       	ldd	r19, Y+46	; 0x2e
    84d4:	02 0f       	add	r16, r18
    84d6:	13 1f       	adc	r17, r19
    84d8:	04 c0       	rjmp	.+8      	; 0x84e2 <ProcessMixer+0x51a>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    84da:	4d a5       	ldd	r20, Y+45	; 0x2d
    84dc:	5e a5       	ldd	r21, Y+46	; 0x2e
    84de:	04 1b       	sub	r16, r20
    84e0:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (transition < 100)
    84e2:	84 e6       	ldi	r24, 0x64	; 100
    84e4:	a8 16       	cp	r10, r24
    84e6:	b1 04       	cpc	r11, r1
    84e8:	0c f0       	brlt	.+2      	; 0x84ec <ProcessMixer+0x524>
    84ea:	8d c0       	rjmp	.+282    	; 0x8606 <ProcessMixer+0x63e>
    84ec:	d6 01       	movw	r26, r12
    84ee:	a3 53       	subi	r26, 0x33	; 51
    84f0:	ba 4f       	sbci	r27, 0xFA	; 250
    84f2:	3d 01       	movw	r6, r26
    84f4:	fd 01       	movw	r30, r26
    84f6:	e2 56       	subi	r30, 0x62	; 98
    84f8:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume != 0) 					// Mix in dedicated aileron
    84fa:	60 81       	ld	r22, Z
    84fc:	66 23       	and	r22, r22
    84fe:	59 f0       	breq	.+22     	; 0x8516 <ProcessMixer+0x54e>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    8500:	80 91 78 08 	lds	r24, 0x0878
    8504:	90 91 79 08 	lds	r25, 0x0879
    8508:	77 27       	eor	r23, r23
    850a:	67 fd       	sbrc	r22, 7
    850c:	70 95       	com	r23
    850e:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
				P1_solution = P1_solution + temp2;
    8512:	e8 0e       	add	r14, r24
    8514:	f9 1e       	adc	r15, r25
    8516:	f3 01       	movw	r30, r6
    8518:	e0 56       	subi	r30, 0x60	; 96
    851a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume != 0) 					// Mix in dedicated elevator
    851c:	60 81       	ld	r22, Z
    851e:	66 23       	and	r22, r22
    8520:	59 f0       	breq	.+22     	; 0x8538 <ProcessMixer+0x570>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    8522:	80 91 7a 08 	lds	r24, 0x087A
    8526:	90 91 7b 08 	lds	r25, 0x087B
    852a:	77 27       	eor	r23, r23
    852c:	67 fd       	sbrc	r22, 7
    852e:	70 95       	com	r23
    8530:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
				P1_solution = P1_solution + temp2;
    8534:	e8 0e       	add	r14, r24
    8536:	f9 1e       	adc	r15, r25
    8538:	f3 01       	movw	r30, r6
    853a:	ee 55       	subi	r30, 0x5E	; 94
    853c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume != 0) 					// Mix in dedicated rudder
    853e:	60 81       	ld	r22, Z
    8540:	66 23       	and	r22, r22
    8542:	59 f0       	breq	.+22     	; 0x855a <ProcessMixer+0x592>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    8544:	80 91 7c 08 	lds	r24, 0x087C
    8548:	90 91 7d 08 	lds	r25, 0x087D
    854c:	77 27       	eor	r23, r23
    854e:	67 fd       	sbrc	r22, 7
    8550:	70 95       	com	r23
    8552:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
				P1_solution = P1_solution + temp2;
    8556:	e8 0e       	add	r14, r24
    8558:	f9 1e       	adc	r15, r25
    855a:	f3 01       	movw	r30, r6
    855c:	ef 54       	subi	r30, 0x4F	; 79
    855e:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume != 0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    8560:	60 81       	ld	r22, Z
    8562:	66 23       	and	r22, r22
    8564:	19 f1       	breq	.+70     	; 0x85ac <ProcessMixer+0x5e4>
    8566:	31 97       	sbiw	r30, 0x01	; 1
    8568:	80 81       	ld	r24, Z
    856a:	8f 30       	cpi	r24, 0x0F	; 15
    856c:	f9 f0       	breq	.+62     	; 0x85ac <ProcessMixer+0x5e4>
    856e:	e8 2f       	mov	r30, r24
    8570:	ff 27       	eor	r31, r31
    8572:	e7 fd       	sbrc	r30, 7
    8574:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    8576:	88 30       	cpi	r24, 0x08	; 8
    8578:	64 f0       	brlt	.+24     	; 0x8592 <ProcessMixer+0x5ca>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    857a:	38 97       	sbiw	r30, 0x08	; 8
    857c:	ee 0f       	add	r30, r30
    857e:	ff 1f       	adc	r31, r31
    8580:	21 e0       	ldi	r18, 0x01	; 1
    8582:	30 e0       	ldi	r19, 0x00	; 0
    8584:	2c 0f       	add	r18, r28
    8586:	3d 1f       	adc	r19, r29
    8588:	e2 0f       	add	r30, r18
    858a:	f3 1f       	adc	r31, r19
    858c:	86 85       	ldd	r24, Z+14	; 0x0e
    858e:	97 85       	ldd	r25, Z+15	; 0x0f
    8590:	06 c0       	rjmp	.+12     	; 0x859e <ProcessMixer+0x5d6>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    8592:	ee 0f       	add	r30, r30
    8594:	ff 1f       	adc	r31, r31
    8596:	ea 58       	subi	r30, 0x8A	; 138
    8598:	f7 4f       	sbci	r31, 0xF7	; 247
    859a:	80 81       	ld	r24, Z
    859c:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    859e:	77 27       	eor	r23, r23
    85a0:	67 fd       	sbrc	r22, 7
    85a2:	70 95       	com	r23
    85a4:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
				P1_solution = P1_solution + temp2;
    85a8:	e8 0e       	add	r14, r24
    85aa:	f9 1e       	adc	r15, r25
    85ac:	f3 01       	movw	r30, r6
    85ae:	eb 54       	subi	r30, 0x4B	; 75
    85b0:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume != 0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    85b2:	60 81       	ld	r22, Z
    85b4:	66 23       	and	r22, r22
    85b6:	19 f1       	breq	.+70     	; 0x85fe <ProcessMixer+0x636>
    85b8:	31 97       	sbiw	r30, 0x01	; 1
    85ba:	80 81       	ld	r24, Z
    85bc:	8f 30       	cpi	r24, 0x0F	; 15
    85be:	f9 f0       	breq	.+62     	; 0x85fe <ProcessMixer+0x636>
    85c0:	e8 2f       	mov	r30, r24
    85c2:	ff 27       	eor	r31, r31
    85c4:	e7 fd       	sbrc	r30, 7
    85c6:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    85c8:	88 30       	cpi	r24, 0x08	; 8
    85ca:	64 f0       	brlt	.+24     	; 0x85e4 <ProcessMixer+0x61c>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    85cc:	38 97       	sbiw	r30, 0x08	; 8
    85ce:	ee 0f       	add	r30, r30
    85d0:	ff 1f       	adc	r31, r31
    85d2:	41 e0       	ldi	r20, 0x01	; 1
    85d4:	50 e0       	ldi	r21, 0x00	; 0
    85d6:	4c 0f       	add	r20, r28
    85d8:	5d 1f       	adc	r21, r29
    85da:	e4 0f       	add	r30, r20
    85dc:	f5 1f       	adc	r31, r21
    85de:	86 85       	ldd	r24, Z+14	; 0x0e
    85e0:	97 85       	ldd	r25, Z+15	; 0x0f
    85e2:	06 c0       	rjmp	.+12     	; 0x85f0 <ProcessMixer+0x628>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    85e4:	ee 0f       	add	r30, r30
    85e6:	ff 1f       	adc	r31, r31
    85e8:	ea 58       	subi	r30, 0x8A	; 138
    85ea:	f7 4f       	sbci	r31, 0xF7	; 247
    85ec:	80 81       	ld	r24, Z
    85ee:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    85f0:	77 27       	eor	r23, r23
    85f2:	67 fd       	sbrc	r22, 7
    85f4:	70 95       	com	r23
    85f6:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
				P1_solution = P1_solution + temp2;
    85fa:	e8 0e       	add	r14, r24
    85fc:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (transition > 0)	
    85fe:	1a 14       	cp	r1, r10
    8600:	1b 04       	cpc	r1, r11
    8602:	0c f0       	brlt	.+2      	; 0x8606 <ProcessMixer+0x63e>
    8604:	85 c0       	rjmp	.+266    	; 0x8710 <ProcessMixer+0x748>
    8606:	c6 01       	movw	r24, r12
    8608:	83 53       	subi	r24, 0x33	; 51
    860a:	9a 4f       	sbci	r25, 0xFA	; 250
    860c:	3c 01       	movw	r6, r24
    860e:	fc 01       	movw	r30, r24
    8610:	e1 56       	subi	r30, 0x61	; 97
    8612:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume != 0) 					// Mix in dedicated aileron
    8614:	60 81       	ld	r22, Z
    8616:	66 23       	and	r22, r22
    8618:	59 f0       	breq	.+22     	; 0x8630 <ProcessMixer+0x668>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    861a:	80 91 78 08 	lds	r24, 0x0878
    861e:	90 91 79 08 	lds	r25, 0x0879
    8622:	77 27       	eor	r23, r23
    8624:	67 fd       	sbrc	r22, 7
    8626:	70 95       	com	r23
    8628:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
				P2_solution = P2_solution + temp2;
    862c:	08 0f       	add	r16, r24
    862e:	19 1f       	adc	r17, r25
    8630:	f3 01       	movw	r30, r6
    8632:	ef 55       	subi	r30, 0x5F	; 95
    8634:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume != 0) 					// Mix in dedicated elevator
    8636:	60 81       	ld	r22, Z
    8638:	66 23       	and	r22, r22
    863a:	59 f0       	breq	.+22     	; 0x8652 <ProcessMixer+0x68a>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    863c:	80 91 7a 08 	lds	r24, 0x087A
    8640:	90 91 7b 08 	lds	r25, 0x087B
    8644:	77 27       	eor	r23, r23
    8646:	67 fd       	sbrc	r22, 7
    8648:	70 95       	com	r23
    864a:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
				P2_solution = P2_solution + temp2;
    864e:	08 0f       	add	r16, r24
    8650:	19 1f       	adc	r17, r25
    8652:	f3 01       	movw	r30, r6
    8654:	ed 55       	subi	r30, 0x5D	; 93
    8656:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume != 0) 					// Mix in dedicated rudder
    8658:	60 81       	ld	r22, Z
    865a:	66 23       	and	r22, r22
    865c:	59 f0       	breq	.+22     	; 0x8674 <ProcessMixer+0x6ac>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    865e:	80 91 7c 08 	lds	r24, 0x087C
    8662:	90 91 7d 08 	lds	r25, 0x087D
    8666:	77 27       	eor	r23, r23
    8668:	67 fd       	sbrc	r22, 7
    866a:	70 95       	com	r23
    866c:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
				P2_solution = P2_solution + temp2;
    8670:	08 0f       	add	r16, r24
    8672:	19 1f       	adc	r17, r25
    8674:	f3 01       	movw	r30, r6
    8676:	ed 54       	subi	r30, 0x4D	; 77
    8678:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume != 0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    867a:	60 81       	ld	r22, Z
    867c:	66 23       	and	r22, r22
    867e:	09 f1       	breq	.+66     	; 0x86c2 <ProcessMixer+0x6fa>
    8680:	31 97       	sbiw	r30, 0x01	; 1
    8682:	80 81       	ld	r24, Z
    8684:	8f 30       	cpi	r24, 0x0F	; 15
    8686:	e9 f0       	breq	.+58     	; 0x86c2 <ProcessMixer+0x6fa>
    8688:	e8 2f       	mov	r30, r24
    868a:	ff 27       	eor	r31, r31
    868c:	e7 fd       	sbrc	r30, 7
    868e:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    8690:	88 30       	cpi	r24, 0x08	; 8
    8692:	54 f0       	brlt	.+20     	; 0x86a8 <ProcessMixer+0x6e0>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    8694:	38 97       	sbiw	r30, 0x08	; 8
    8696:	ee 0f       	add	r30, r30
    8698:	ff 1f       	adc	r31, r31
    869a:	a1 e0       	ldi	r26, 0x01	; 1
    869c:	b0 e0       	ldi	r27, 0x00	; 0
    869e:	ac 0f       	add	r26, r28
    86a0:	bd 1f       	adc	r27, r29
    86a2:	ea 0f       	add	r30, r26
    86a4:	fb 1f       	adc	r31, r27
    86a6:	04 c0       	rjmp	.+8      	; 0x86b0 <ProcessMixer+0x6e8>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    86a8:	ee 0f       	add	r30, r30
    86aa:	ff 1f       	adc	r31, r31
    86ac:	ea 58       	subi	r30, 0x8A	; 138
    86ae:	f7 4f       	sbci	r31, 0xF7	; 247
    86b0:	80 81       	ld	r24, Z
    86b2:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    86b4:	77 27       	eor	r23, r23
    86b6:	67 fd       	sbrc	r22, 7
    86b8:	70 95       	com	r23
    86ba:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
				P2_solution = P2_solution + temp2;
    86be:	08 0f       	add	r16, r24
    86c0:	19 1f       	adc	r17, r25
    86c2:	f3 01       	movw	r30, r6
    86c4:	e9 54       	subi	r30, 0x49	; 73
    86c6:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume != 0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    86c8:	60 81       	ld	r22, Z
    86ca:	66 23       	and	r22, r22
    86cc:	09 f1       	breq	.+66     	; 0x8710 <ProcessMixer+0x748>
    86ce:	31 97       	sbiw	r30, 0x01	; 1
    86d0:	80 81       	ld	r24, Z
    86d2:	8f 30       	cpi	r24, 0x0F	; 15
    86d4:	e9 f0       	breq	.+58     	; 0x8710 <ProcessMixer+0x748>
    86d6:	e8 2f       	mov	r30, r24
    86d8:	ff 27       	eor	r31, r31
    86da:	e7 fd       	sbrc	r30, 7
    86dc:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    86de:	88 30       	cpi	r24, 0x08	; 8
    86e0:	54 f0       	brlt	.+20     	; 0x86f6 <ProcessMixer+0x72e>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    86e2:	38 97       	sbiw	r30, 0x08	; 8
    86e4:	ee 0f       	add	r30, r30
    86e6:	ff 1f       	adc	r31, r31
    86e8:	21 e0       	ldi	r18, 0x01	; 1
    86ea:	30 e0       	ldi	r19, 0x00	; 0
    86ec:	2c 0f       	add	r18, r28
    86ee:	3d 1f       	adc	r19, r29
    86f0:	e2 0f       	add	r30, r18
    86f2:	f3 1f       	adc	r31, r19
    86f4:	04 c0       	rjmp	.+8      	; 0x86fe <ProcessMixer+0x736>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    86f6:	ee 0f       	add	r30, r30
    86f8:	ff 1f       	adc	r31, r31
    86fa:	ea 58       	subi	r30, 0x8A	; 138
    86fc:	f7 4f       	sbci	r31, 0xF7	; 247
    86fe:	80 81       	ld	r24, Z
    8700:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    8702:	77 27       	eor	r23, r23
    8704:	67 fd       	sbrc	r22, 7
    8706:	70 95       	com	r23
    8708:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
				P2_solution = P2_solution + temp2;
    870c:	08 0f       	add	r16, r24
    870e:	19 1f       	adc	r17, r25
    8710:	c6 01       	movw	r24, r12
    8712:	83 53       	subi	r24, 0x33	; 51
    8714:	9a 4f       	sbci	r25, 0xFA	; 250
    8716:	fc 01       	movw	r30, r24
    8718:	ee 56       	subi	r30, 0x6E	; 110
    871a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    871c:	f1 82       	std	Z+1, r15	; 0x01
    871e:	e0 82       	st	Z, r14
    8720:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    8722:	11 83       	std	Z+1, r17	; 0x01
    8724:	00 83       	st	Z, r16
    8726:	36 e2       	ldi	r19, 0x26	; 38
    8728:	c3 0e       	add	r12, r19
    872a:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    872c:	40 e3       	ldi	r20, 0x30	; 48
    872e:	c4 16       	cp	r12, r20
    8730:	41 e0       	ldi	r20, 0x01	; 1
    8732:	d4 06       	cpc	r13, r20
    8734:	09 f0       	breq	.+2      	; 0x8738 <ProcessMixer+0x770>
    8736:	f3 cc       	rjmp	.-1562   	; 0x811e <ProcessMixer+0x156>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    8738:	80 91 fb 05 	lds	r24, 0x05FB
    873c:	88 23       	and	r24, r24
    873e:	41 f0       	breq	.+16     	; 0x8750 <ProcessMixer+0x788>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    8740:	80 91 24 05 	lds	r24, 0x0524
    8744:	90 91 25 05 	lds	r25, 0x0525
    8748:	90 93 22 05 	sts	0x0522, r25
    874c:	80 93 21 05 	sts	0x0521, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    8750:	00 91 21 05 	lds	r16, 0x0521
    8754:	10 91 22 05 	lds	r17, 0x0522
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    8758:	b4 e6       	ldi	r27, 0x64	; 100
    875a:	cb 2e       	mov	r12, r27
    875c:	d1 2c       	mov	r13, r1
    875e:	c0 1a       	sub	r12, r16
    8760:	d1 0a       	sbc	r13, r17
    8762:	8f e5       	ldi	r24, 0x5F	; 95
    8764:	e8 2e       	mov	r14, r24
    8766:	86 e0       	ldi	r24, 0x06	; 6
    8768:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    876a:	01 15       	cp	r16, r1
    876c:	11 05       	cpc	r17, r1
    876e:	21 f4       	brne	.+8      	; 0x8778 <ProcessMixer+0x7b0>
		{
			temp1 = Config.Channel[i].P1_value;
    8770:	d7 01       	movw	r26, r14
    8772:	8d 91       	ld	r24, X+
    8774:	9c 91       	ld	r25, X
    8776:	16 c0       	rjmp	.+44     	; 0x87a4 <ProcessMixer+0x7dc>
		}
		else if (transition >= 100)
    8778:	04 36       	cpi	r16, 0x64	; 100
    877a:	11 05       	cpc	r17, r1
    877c:	24 f0       	brlt	.+8      	; 0x8786 <ProcessMixer+0x7be>
		{
			temp1 = Config.Channel[i].P2_value;
    877e:	f7 01       	movw	r30, r14
    8780:	82 81       	ldd	r24, Z+2	; 0x02
    8782:	93 81       	ldd	r25, Z+3	; 0x03
    8784:	0f c0       	rjmp	.+30     	; 0x87a4 <ProcessMixer+0x7dc>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    8786:	b6 01       	movw	r22, r12
    8788:	d7 01       	movw	r26, r14
    878a:	8d 91       	ld	r24, X+
    878c:	9c 91       	ld	r25, X
    878e:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>
    8792:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    8794:	b8 01       	movw	r22, r16
    8796:	f7 01       	movw	r30, r14
    8798:	82 81       	ldd	r24, Z+2	; 0x02
    879a:	93 81       	ldd	r25, Z+3	; 0x03
    879c:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    87a0:	8a 0d       	add	r24, r10
    87a2:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    87a4:	d7 01       	movw	r26, r14
    87a6:	8d 93       	st	X+, r24
    87a8:	9c 93       	st	X, r25
    87aa:	b6 e2       	ldi	r27, 0x26	; 38
    87ac:	eb 0e       	add	r14, r27
    87ae:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    87b0:	ef e8       	ldi	r30, 0x8F	; 143
    87b2:	ee 16       	cp	r14, r30
    87b4:	e7 e0       	ldi	r30, 0x07	; 7
    87b6:	fe 06       	cpc	r15, r30
    87b8:	c1 f6       	brne	.-80     	; 0x876a <ProcessMixer+0x7a2>
    87ba:	69 e6       	ldi	r22, 0x69	; 105
    87bc:	c6 2e       	mov	r12, r22
    87be:	66 e0       	ldi	r22, 0x06	; 6
    87c0:	d6 2e       	mov	r13, r22
    87c2:	7a e6       	ldi	r23, 0x6A	; 106
    87c4:	87 2e       	mov	r8, r23
    87c6:	76 e0       	ldi	r23, 0x06	; 6
    87c8:	97 2e       	mov	r9, r23
    87ca:	ef e5       	ldi	r30, 0x5F	; 95
    87cc:	ee 2e       	mov	r14, r30
    87ce:	e6 e0       	ldi	r30, 0x06	; 6
    87d0:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    87d2:	f4 e6       	ldi	r31, 0x64	; 100
    87d4:	af 2e       	mov	r10, r31
    87d6:	b1 2c       	mov	r11, r1
    87d8:	80 2f       	mov	r24, r16
    87da:	99 27       	eor	r25, r25
    87dc:	87 fd       	sbrc	r24, 7
    87de:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    87e0:	9c 01       	movw	r18, r24
    87e2:	22 53       	subi	r18, 0x32	; 50
    87e4:	32 4e       	sbci	r19, 0xE2	; 226
    87e6:	3e 8f       	std	Y+30, r19	; 0x1e
    87e8:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    87ea:	95 01       	movw	r18, r10
    87ec:	28 1b       	sub	r18, r24
    87ee:	39 0b       	sbc	r19, r25
    87f0:	a9 01       	movw	r20, r18
    87f2:	42 53       	subi	r20, 0x32	; 50
    87f4:	52 4e       	sbci	r21, 0xE2	; 226
    87f6:	58 a3       	std	Y+32, r21	; 0x20
    87f8:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    87fa:	dc 01       	movw	r26, r24
    87fc:	ad 5c       	subi	r26, 0xCD	; 205
    87fe:	b1 4e       	sbci	r27, 0xE1	; 225
    8800:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    8802:	f9 01       	movw	r30, r18
    8804:	ed 5c       	subi	r30, 0xCD	; 205
    8806:	f1 4e       	sbci	r31, 0xE1	; 225
    8808:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    880a:	ae e1       	ldi	r26, 0x1E	; 30
    880c:	6a 2e       	mov	r6, r26
    880e:	ab ef       	ldi	r26, 0xFB	; 251
    8810:	7a 2e       	mov	r7, r26
    8812:	f6 01       	movw	r30, r12
    8814:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    8816:	90 81       	ld	r25, Z
    8818:	d6 01       	movw	r26, r12
    881a:	8c 91       	ld	r24, X
    881c:	91 11       	cpse	r25, r1
    881e:	03 c0       	rjmp	.+6      	; 0x8826 <ProcessMixer+0x85e>
    8820:	88 23       	and	r24, r24
    8822:	09 f4       	brne	.+2      	; 0x8826 <ProcessMixer+0x85e>
    8824:	61 c0       	rjmp	.+194    	; 0x88e8 <ProcessMixer+0x920>
    8826:	29 2f       	mov	r18, r25
    8828:	33 27       	eor	r19, r19
    882a:	27 fd       	sbrc	r18, 7
    882c:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    882e:	98 17       	cp	r25, r24
    8830:	09 f4       	brne	.+2      	; 0x8834 <ProcessMixer+0x86c>
    8832:	48 c0       	rjmp	.+144    	; 0x88c4 <ProcessMixer+0x8fc>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    8834:	99 27       	eor	r25, r25
    8836:	87 fd       	sbrc	r24, 7
    8838:	90 95       	com	r25
    883a:	82 1b       	sub	r24, r18
    883c:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    883e:	96 95       	lsr	r25
    8840:	98 2f       	mov	r25, r24
    8842:	88 27       	eor	r24, r24
    8844:	97 95       	ror	r25
    8846:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    8848:	b5 01       	movw	r22, r10
    884a:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    884e:	36 95       	lsr	r19
    8850:	32 2f       	mov	r19, r18
    8852:	22 27       	eor	r18, r18
    8854:	37 95       	ror	r19
    8856:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    8858:	f4 01       	movw	r30, r8
    885a:	80 81       	ld	r24, Z
    885c:	81 11       	cpse	r24, r1
    885e:	08 c0       	rjmp	.+16     	; 0x8870 <ProcessMixer+0x8a8>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    8860:	60 9f       	mul	r22, r16
    8862:	c0 01       	movw	r24, r0
    8864:	61 9f       	mul	r22, r17
    8866:	90 0d       	add	r25, r0
    8868:	70 9f       	mul	r23, r16
    886a:	90 0d       	add	r25, r0
    886c:	11 24       	eor	r1, r1
    886e:	20 c0       	rjmp	.+64     	; 0x88b0 <ProcessMixer+0x8e8>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    8870:	81 30       	cpi	r24, 0x01	; 1
    8872:	31 f4       	brne	.+12     	; 0x8880 <ProcessMixer+0x8b8>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    8874:	77 ff       	sbrs	r23, 7
    8876:	02 c0       	rjmp	.+4      	; 0x887c <ProcessMixer+0x8b4>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    8878:	f2 01       	movw	r30, r4
    887a:	06 c0       	rjmp	.+12     	; 0x8888 <ProcessMixer+0x8c0>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    887c:	f1 01       	movw	r30, r2
    887e:	0d c0       	rjmp	.+26     	; 0x889a <ProcessMixer+0x8d2>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    8880:	77 ff       	sbrs	r23, 7
    8882:	09 c0       	rjmp	.+18     	; 0x8896 <ProcessMixer+0x8ce>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    8884:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8886:	f8 a1       	ldd	r31, Y+32	; 0x20
    8888:	84 91       	lpm	r24, Z
    888a:	a5 01       	movw	r20, r10
    888c:	48 1b       	sub	r20, r24
    888e:	51 09       	sbc	r21, r1
    8890:	87 fd       	sbrc	r24, 7
    8892:	53 95       	inc	r21
    8894:	06 c0       	rjmp	.+12     	; 0x88a2 <ProcessMixer+0x8da>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    8896:	ed 8d       	ldd	r30, Y+29	; 0x1d
    8898:	fe 8d       	ldd	r31, Y+30	; 0x1e
    889a:	44 91       	lpm	r20, Z
    889c:	55 27       	eor	r21, r21
    889e:	47 fd       	sbrc	r20, 7
    88a0:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    88a2:	64 9f       	mul	r22, r20
    88a4:	c0 01       	movw	r24, r0
    88a6:	65 9f       	mul	r22, r21
    88a8:	90 0d       	add	r25, r0
    88aa:	74 9f       	mul	r23, r20
    88ac:	90 0d       	add	r25, r0
    88ae:	11 24       	eor	r1, r1
    88b0:	82 0f       	add	r24, r18
    88b2:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    88b4:	bc 01       	movw	r22, r24
    88b6:	60 5c       	subi	r22, 0xC0	; 192
    88b8:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    88ba:	66 0f       	add	r22, r22
    88bc:	67 2f       	mov	r22, r23
    88be:	66 1f       	adc	r22, r22
    88c0:	77 0b       	sbc	r23, r23
    88c2:	01 c0       	rjmp	.+2      	; 0x88c6 <ProcessMixer+0x8fe>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    88c4:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    88c6:	80 91 74 08 	lds	r24, 0x0874
    88ca:	90 91 75 08 	lds	r25, 0x0875
    88ce:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    88d2:	88 5e       	subi	r24, 0xE8	; 232
    88d4:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    88d6:	d7 01       	movw	r26, r14
    88d8:	2d 91       	ld	r18, X+
    88da:	3c 91       	ld	r19, X
    88dc:	11 97       	sbiw	r26, 0x01	; 1
    88de:	28 0f       	add	r18, r24
    88e0:	39 1f       	adc	r19, r25
    88e2:	2d 93       	st	X+, r18
    88e4:	3c 93       	st	X, r19
    88e6:	08 c0       	rjmp	.+16     	; 0x88f8 <ProcessMixer+0x930>
    88e8:	f6 01       	movw	r30, r12
    88ea:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    88ec:	80 81       	ld	r24, Z
    88ee:	82 30       	cpi	r24, 0x02	; 2
    88f0:	19 f4       	brne	.+6      	; 0x88f8 <ProcessMixer+0x930>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    88f2:	f7 01       	movw	r30, r14
    88f4:	71 82       	std	Z+1, r7	; 0x01
    88f6:	60 82       	st	Z, r6
    88f8:	f6 e2       	ldi	r31, 0x26	; 38
    88fa:	ef 0e       	add	r14, r31
    88fc:	f1 1c       	adc	r15, r1
    88fe:	26 e2       	ldi	r18, 0x26	; 38
    8900:	c2 0e       	add	r12, r18
    8902:	d1 1c       	adc	r13, r1
    8904:	36 e2       	ldi	r19, 0x26	; 38
    8906:	83 0e       	add	r8, r19
    8908:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    890a:	4f e8       	ldi	r20, 0x8F	; 143
    890c:	e4 16       	cp	r14, r20
    890e:	47 e0       	ldi	r20, 0x07	; 7
    8910:	f4 06       	cpc	r15, r20
    8912:	09 f0       	breq	.+2      	; 0x8916 <ProcessMixer+0x94e>
    8914:	7e cf       	rjmp	.-260    	; 0x8812 <ProcessMixer+0x84a>
    8916:	e7 e6       	ldi	r30, 0x67	; 103
    8918:	f6 e0       	ldi	r31, 0x06	; 6
    891a:	2f e5       	ldi	r18, 0x5F	; 95
    891c:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    891e:	94 e6       	ldi	r25, 0x64	; 100
    8920:	69 2e       	mov	r6, r25
    8922:	71 2c       	mov	r7, r1
    8924:	df 01       	movw	r26, r30
    8926:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    8928:	cc 90       	ld	r12, X
    892a:	12 96       	adiw	r26, 0x02	; 2
    892c:	ac 90       	ld	r10, X
    892e:	50 80       	ld	r5, Z
    8930:	ca 10       	cpse	r12, r10
    8932:	03 c0       	rjmp	.+6      	; 0x893a <ProcessMixer+0x972>
    8934:	5c 14       	cp	r5, r12
    8936:	09 f4       	brne	.+2      	; 0x893a <ProcessMixer+0x972>
    8938:	53 c0       	rjmp	.+166    	; 0x89e0 <ProcessMixer+0xa18>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    893a:	bb 24       	eor	r11, r11
    893c:	a7 fc       	sbrc	r10, 7
    893e:	b0 94       	com	r11
    8940:	dd 24       	eor	r13, r13
    8942:	c7 fc       	sbrc	r12, 7
    8944:	d0 94       	com	r13
    8946:	c5 01       	movw	r24, r10
    8948:	8c 19       	sub	r24, r12
    894a:	9d 09       	sbc	r25, r13
    894c:	df 01       	movw	r26, r30
    894e:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    8950:	ec 90       	ld	r14, X
    8952:	ff 24       	eor	r15, r15
    8954:	e7 fc       	sbrc	r14, 7
    8956:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    8958:	96 95       	lsr	r25
    895a:	98 2f       	mov	r25, r24
    895c:	88 27       	eor	r24, r24
    895e:	97 95       	ror	r25
    8960:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    8962:	a7 01       	movw	r20, r14
    8964:	55 95       	asr	r21
    8966:	47 95       	ror	r20
    8968:	84 0f       	add	r24, r20
    896a:	95 1f       	adc	r25, r21
    896c:	b7 01       	movw	r22, r14
    896e:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    8972:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    8974:	85 2d       	mov	r24, r5
    8976:	99 27       	eor	r25, r25
    8978:	87 fd       	sbrc	r24, 7
    897a:	90 95       	com	r25
    897c:	8a 19       	sub	r24, r10
    897e:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    8980:	b3 01       	movw	r22, r6
    8982:	6e 19       	sub	r22, r14
    8984:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    8986:	96 95       	lsr	r25
    8988:	98 2f       	mov	r25, r24
    898a:	88 27       	eor	r24, r24
    898c:	97 95       	ror	r25
    898e:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    8990:	ab 01       	movw	r20, r22
    8992:	55 95       	asr	r21
    8994:	47 95       	ror	r20
    8996:	84 0f       	add	r24, r20
    8998:	95 1f       	adc	r25, r21
    899a:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    899e:	d6 94       	lsr	r13
    89a0:	dc 2c       	mov	r13, r12
    89a2:	cc 24       	eor	r12, r12
    89a4:	d7 94       	ror	r13
    89a6:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    89a8:	40 e0       	ldi	r20, 0x00	; 0
    89aa:	84 2f       	mov	r24, r20
    89ac:	90 e0       	ldi	r25, 0x00	; 0
    89ae:	80 17       	cp	r24, r16
    89b0:	91 07       	cpc	r25, r17
    89b2:	54 f4       	brge	.+20     	; 0x89c8 <ProcessMixer+0xa00>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    89b4:	8e 15       	cp	r24, r14
    89b6:	9f 05       	cpc	r25, r15
    89b8:	1c f4       	brge	.+6      	; 0x89c0 <ProcessMixer+0x9f8>
				{
					temp3 += Step1;
    89ba:	c8 0c       	add	r12, r8
    89bc:	d9 1c       	adc	r13, r9
    89be:	02 c0       	rjmp	.+4      	; 0x89c4 <ProcessMixer+0x9fc>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    89c0:	c6 0e       	add	r12, r22
    89c2:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    89c4:	4f 5f       	subi	r20, 0xFF	; 255
    89c6:	f1 cf       	rjmp	.-30     	; 0x89aa <ProcessMixer+0x9e2>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    89c8:	c6 01       	movw	r24, r12
    89ca:	80 5c       	subi	r24, 0xC0	; 192
    89cc:	9f 4f       	sbci	r25, 0xFF	; 255
    89ce:	88 0f       	add	r24, r24
    89d0:	89 2f       	mov	r24, r25
    89d2:	88 1f       	adc	r24, r24
    89d4:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    89d6:	5a e0       	ldi	r21, 0x0A	; 10
    89d8:	85 02       	muls	r24, r21
    89da:	60 01       	movw	r12, r0
    89dc:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    89de:	05 c0       	rjmp	.+10     	; 0x89ea <ProcessMixer+0xa22>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    89e0:	85 2d       	mov	r24, r5
    89e2:	9a e0       	ldi	r25, 0x0A	; 10
    89e4:	89 02       	muls	r24, r25
    89e6:	60 01       	movw	r12, r0
    89e8:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    89ea:	d9 01       	movw	r26, r18
    89ec:	4d 91       	ld	r20, X+
    89ee:	5c 91       	ld	r21, X
    89f0:	11 97       	sbiw	r26, 0x01	; 1
    89f2:	4c 0d       	add	r20, r12
    89f4:	5d 1d       	adc	r21, r13
    89f6:	4d 93       	st	X+, r20
    89f8:	5c 93       	st	X, r21
    89fa:	2a 5d       	subi	r18, 0xDA	; 218
    89fc:	3f 4f       	sbci	r19, 0xFF	; 255
    89fe:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    8a00:	b7 e0       	ldi	r27, 0x07	; 7
    8a02:	e7 39       	cpi	r30, 0x97	; 151
    8a04:	fb 07       	cpc	r31, r27
    8a06:	09 f0       	breq	.+2      	; 0x8a0a <ProcessMixer+0xa42>
    8a08:	8d cf       	rjmp	.-230    	; 0x8924 <ProcessMixer+0x95c>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    8a0a:	e2 96       	adiw	r28, 0x32	; 50
    8a0c:	0f b6       	in	r0, 0x3f	; 63
    8a0e:	f8 94       	cli
    8a10:	de bf       	out	0x3e, r29	; 62
    8a12:	0f be       	out	0x3f, r0	; 63
    8a14:	cd bf       	out	0x3d, r28	; 61
    8a16:	df 91       	pop	r29
    8a18:	cf 91       	pop	r28
    8a1a:	1f 91       	pop	r17
    8a1c:	0f 91       	pop	r16
    8a1e:	ff 90       	pop	r15
    8a20:	ef 90       	pop	r14
    8a22:	df 90       	pop	r13
    8a24:	cf 90       	pop	r12
    8a26:	bf 90       	pop	r11
    8a28:	af 90       	pop	r10
    8a2a:	9f 90       	pop	r9
    8a2c:	8f 90       	pop	r8
    8a2e:	7f 90       	pop	r7
    8a30:	6f 90       	pop	r6
    8a32:	5f 90       	pop	r5
    8a34:	4f 90       	pop	r4
    8a36:	3f 90       	pop	r3
    8a38:	2f 90       	pop	r2
    8a3a:	08 95       	ret

00008a3c <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    8a3c:	2a e0       	ldi	r18, 0x0A	; 10
    8a3e:	82 02       	muls	r24, r18
    8a40:	c0 01       	movw	r24, r0
    8a42:	11 24       	eor	r1, r1

	return temp16_2;
}
    8a44:	8a 55       	subi	r24, 0x5A	; 90
    8a46:	91 4f       	sbci	r25, 0xF1	; 241
    8a48:	08 95       	ret

00008a4a <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    8a4a:	df 92       	push	r13
    8a4c:	ef 92       	push	r14
    8a4e:	ff 92       	push	r15
    8a50:	0f 93       	push	r16
    8a52:	1f 93       	push	r17
    8a54:	cf 93       	push	r28
    8a56:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    8a58:	dc 01       	movw	r26, r24
    8a5a:	0d 90       	ld	r0, X+
    8a5c:	00 20       	and	r0, r0
    8a5e:	e9 f7       	brne	.-6      	; 0x8a5a <mugui_text_sizestring+0x10>
    8a60:	11 97       	sbiw	r26, 0x01	; 1
    8a62:	a8 1b       	sub	r26, r24
    8a64:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    8a66:	fb 01       	movw	r30, r22
    8a68:	34 96       	adiw	r30, 0x04	; 4
    8a6a:	e4 90       	lpm	r14, Z
    8a6c:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    8a6e:	32 97       	sbiw	r30, 0x02	; 2
    8a70:	d4 90       	lpm	r13, Z
    8a72:	ec 01       	movw	r28, r24
    8a74:	a8 0f       	add	r26, r24
    8a76:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    8a78:	80 e0       	ldi	r24, 0x00	; 0
    8a7a:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    8a7c:	ca 17       	cp	r28, r26
    8a7e:	db 07       	cpc	r29, r27
    8a80:	29 f1       	breq	.+74     	; 0x8acc <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    8a82:	29 91       	ld	r18, Y+
    8a84:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    8a86:	30 e0       	ldi	r19, 0x00	; 0
    8a88:	22 0f       	add	r18, r18
    8a8a:	33 1f       	adc	r19, r19
    8a8c:	f9 01       	movw	r30, r18
    8a8e:	35 96       	adiw	r30, 0x05	; 5
    8a90:	e6 0f       	add	r30, r22
    8a92:	f7 1f       	adc	r31, r23
    8a94:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    8a96:	f9 01       	movw	r30, r18
    8a98:	36 96       	adiw	r30, 0x06	; 6
    8a9a:	e6 0f       	add	r30, r22
    8a9c:	f7 1f       	adc	r31, r23
    8a9e:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    8aa0:	10 e0       	ldi	r17, 0x00	; 0
    8aa2:	20 e0       	ldi	r18, 0x00	; 0
    8aa4:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    8aa6:	32 2f       	mov	r19, r18
    8aa8:	21 2f       	mov	r18, r17
    8aaa:	10 2f       	mov	r17, r16
    8aac:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    8aae:	0e 0f       	add	r16, r30
    8ab0:	11 1d       	adc	r17, r1
    8ab2:	21 1d       	adc	r18, r1
    8ab4:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    8ab6:	fb 01       	movw	r30, r22
    8ab8:	e0 0f       	add	r30, r16
    8aba:	f1 1f       	adc	r31, r17
    8abc:	04 91       	lpm	r16, Z
    8abe:	20 2f       	mov	r18, r16
    8ac0:	30 e0       	ldi	r19, 0x00	; 0
    8ac2:	2f 5f       	subi	r18, 0xFF	; 255
    8ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    8ac6:	82 0f       	add	r24, r18
    8ac8:	93 1f       	adc	r25, r19
    8aca:	d8 cf       	rjmp	.-80     	; 0x8a7c <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    8acc:	fa 01       	movw	r30, r20
    8ace:	91 83       	std	Z+1, r25	; 0x01
    8ad0:	80 83       	st	Z, r24
	size->y = height;
    8ad2:	f3 82       	std	Z+3, r15	; 0x03
    8ad4:	e2 82       	std	Z+2, r14	; 0x02
}
    8ad6:	df 91       	pop	r29
    8ad8:	cf 91       	pop	r28
    8ada:	1f 91       	pop	r17
    8adc:	0f 91       	pop	r16
    8ade:	ff 90       	pop	r15
    8ae0:	ef 90       	pop	r14
    8ae2:	df 90       	pop	r13
    8ae4:	08 95       	ret

00008ae6 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    8ae6:	a6 e7       	ldi	r26, 0x76	; 118
    8ae8:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    8aea:	20 e0       	ldi	r18, 0x00	; 0
    8aec:	30 e0       	ldi	r19, 0x00	; 0
    8aee:	fc 01       	movw	r30, r24
    8af0:	e2 0f       	add	r30, r18
    8af2:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    8af4:	44 91       	lpm	r20, Z
    8af6:	44 23       	and	r20, r20
    8af8:	41 f0       	breq	.+16     	; 0x8b0a <pgm_mugui_scopy+0x24>
    8afa:	28 31       	cpi	r18, 0x18	; 24
    8afc:	31 05       	cpc	r19, r1
    8afe:	29 f0       	breq	.+10     	; 0x8b0a <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    8b00:	e4 91       	lpm	r30, Z
    8b02:	ed 93       	st	X+, r30
		i++;
    8b04:	2f 5f       	subi	r18, 0xFF	; 255
    8b06:	3f 4f       	sbci	r19, 0xFF	; 255
    8b08:	f2 cf       	rjmp	.-28     	; 0x8aee <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    8b0a:	f9 01       	movw	r30, r18
    8b0c:	ea 58       	subi	r30, 0x8A	; 138
    8b0e:	fa 4f       	sbci	r31, 0xFA	; 250
    8b10:	10 82       	st	Z, r1
    8b12:	08 95       	ret

00008b14 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    8b14:	2f 92       	push	r2
    8b16:	3f 92       	push	r3
    8b18:	4f 92       	push	r4
    8b1a:	5f 92       	push	r5
    8b1c:	6f 92       	push	r6
    8b1e:	7f 92       	push	r7
    8b20:	8f 92       	push	r8
    8b22:	9f 92       	push	r9
    8b24:	af 92       	push	r10
    8b26:	bf 92       	push	r11
    8b28:	cf 92       	push	r12
    8b2a:	df 92       	push	r13
    8b2c:	ef 92       	push	r14
    8b2e:	ff 92       	push	r15
    8b30:	0f 93       	push	r16
    8b32:	1f 93       	push	r17
    8b34:	cf 93       	push	r28
    8b36:	df 93       	push	r29
    8b38:	cd b7       	in	r28, 0x3d	; 61
    8b3a:	de b7       	in	r29, 0x3e	; 62
    8b3c:	29 97       	sbiw	r28, 0x09	; 9
    8b3e:	0f b6       	in	r0, 0x3f	; 63
    8b40:	f8 94       	cli
    8b42:	de bf       	out	0x3e, r29	; 62
    8b44:	0f be       	out	0x3f, r0	; 63
    8b46:	cd bf       	out	0x3d, r28	; 61
    8b48:	4c 83       	std	Y+4, r20	; 0x04
    8b4a:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    8b4c:	fb 01       	movw	r30, r22
    8b4e:	32 96       	adiw	r30, 0x02	; 2
    8b50:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    8b52:	32 96       	adiw	r30, 0x02	; 2
    8b54:	e4 91       	lpm	r30, Z
    8b56:	2e 2e       	mov	r2, r30
    8b58:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    8b5a:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    8b5c:	90 e0       	ldi	r25, 0x00	; 0
    8b5e:	88 0f       	add	r24, r24
    8b60:	99 1f       	adc	r25, r25
    8b62:	fc 01       	movw	r30, r24
    8b64:	35 96       	adiw	r30, 0x05	; 5
    8b66:	e6 0f       	add	r30, r22
    8b68:	f7 1f       	adc	r31, r23
    8b6a:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    8b6c:	fc 01       	movw	r30, r24
    8b6e:	36 96       	adiw	r30, 0x06	; 6
    8b70:	e6 0f       	add	r30, r22
    8b72:	f7 1f       	adc	r31, r23
    8b74:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    8b76:	06 2d       	mov	r16, r6
    8b78:	10 e0       	ldi	r17, 0x00	; 0
    8b7a:	20 e0       	ldi	r18, 0x00	; 0
    8b7c:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    8b7e:	32 2f       	mov	r19, r18
    8b80:	21 2f       	mov	r18, r17
    8b82:	10 2f       	mov	r17, r16
    8b84:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    8b86:	08 0f       	add	r16, r24
    8b88:	11 1d       	adc	r17, r1
    8b8a:	21 1d       	adc	r18, r1
    8b8c:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    8b8e:	c8 01       	movw	r24, r16
    8b90:	fb 01       	movw	r30, r22
    8b92:	e0 0f       	add	r30, r16
    8b94:	f1 1f       	adc	r31, r17
    8b96:	64 90       	lpm	r6, Z
    8b98:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    8b9a:	21 01       	movw	r4, r2
    8b9c:	21 e0       	ldi	r18, 0x01	; 1
    8b9e:	42 1a       	sub	r4, r18
    8ba0:	51 08       	sbc	r5, r1
    8ba2:	13 e0       	ldi	r17, 0x03	; 3
    8ba4:	56 94       	lsr	r5
    8ba6:	47 94       	ror	r4
    8ba8:	1a 95       	dec	r17
    8baa:	e1 f7       	brne	.-8      	; 0x8ba4 <mugui_lcd_putc+0x90>
    8bac:	43 94       	inc	r4
    8bae:	a4 2d       	mov	r26, r4
    8bb0:	b0 e0       	ldi	r27, 0x00	; 0
    8bb2:	ba 83       	std	Y+2, r27	; 0x02
    8bb4:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    8bb6:	a1 2c       	mov	r10, r1
    8bb8:	b1 2c       	mov	r11, r1
    8bba:	00 e0       	ldi	r16, 0x00	; 0
    8bbc:	10 e0       	ldi	r17, 0x00	; 0
    8bbe:	4b 01       	movw	r8, r22
    8bc0:	bf ef       	ldi	r27, 0xFF	; 255
    8bc2:	8b 1a       	sub	r8, r27
    8bc4:	9b 0a       	sbc	r9, r27
    8bc6:	88 0e       	add	r8, r24
    8bc8:	99 1e       	adc	r9, r25
    8bca:	06 15       	cp	r16, r6
    8bcc:	17 05       	cpc	r17, r7
    8bce:	08 f0       	brcs	.+2      	; 0x8bd2 <mugui_lcd_putc+0xbe>
    8bd0:	43 c0       	rjmp	.+134    	; 0x8c58 <mugui_lcd_putc+0x144>
    8bd2:	c1 2c       	mov	r12, r1
    8bd4:	d1 2c       	mov	r13, r1
    8bd6:	e1 2c       	mov	r14, r1
    8bd8:	f1 2c       	mov	r15, r1
    8bda:	94 01       	movw	r18, r8
    8bdc:	2a 0d       	add	r18, r10
    8bde:	3b 1d       	adc	r19, r11
    8be0:	3f 83       	std	Y+7, r19	; 0x07
    8be2:	2e 83       	std	Y+6, r18	; 0x06
    8be4:	5c 80       	ldd	r5, Y+4	; 0x04
    8be6:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    8be8:	c4 14       	cp	r12, r4
    8bea:	78 f5       	brcc	.+94     	; 0x8c4a <mugui_lcd_putc+0x136>
    8bec:	ee 81       	ldd	r30, Y+6	; 0x06
    8bee:	ff 81       	ldd	r31, Y+7	; 0x07
    8bf0:	ec 0d       	add	r30, r12
    8bf2:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    8bf4:	34 91       	lpm	r19, Z
    8bf6:	3b 83       	std	Y+3, r19	; 0x03
    8bf8:	19 86       	std	Y+9, r1	; 0x09
    8bfa:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    8bfc:	e2 14       	cp	r14, r2
    8bfe:	f3 04       	cpc	r15, r3
    8c00:	00 f5       	brcc	.+64     	; 0x8c42 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    8c02:	81 e0       	ldi	r24, 0x01	; 1
    8c04:	90 e0       	ldi	r25, 0x00	; 0
    8c06:	08 84       	ldd	r0, Y+8	; 0x08
    8c08:	02 c0       	rjmp	.+4      	; 0x8c0e <mugui_lcd_putc+0xfa>
    8c0a:	88 0f       	add	r24, r24
    8c0c:	99 1f       	adc	r25, r25
    8c0e:	0a 94       	dec	r0
    8c10:	e2 f7       	brpl	.-8      	; 0x8c0a <mugui_lcd_putc+0xf6>
					bit = data & mask;
    8c12:	3b 81       	ldd	r19, Y+3	; 0x03
    8c14:	83 23       	and	r24, r19
    8c16:	4d 81       	ldd	r20, Y+5	; 0x05
    8c18:	4e 0d       	add	r20, r14
					if(bit)
    8c1a:	88 23       	and	r24, r24
    8c1c:	11 f0       	breq	.+4      	; 0x8c22 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    8c1e:	21 e0       	ldi	r18, 0x01	; 1
    8c20:	01 c0       	rjmp	.+2      	; 0x8c24 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    8c22:	20 e0       	ldi	r18, 0x00	; 0
    8c24:	65 2d       	mov	r22, r5
    8c26:	80 e0       	ldi	r24, 0x00	; 0
    8c28:	91 e0       	ldi	r25, 0x01	; 1
    8c2a:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <setpixel>
					}
					ty++;
    8c2e:	8f ef       	ldi	r24, 0xFF	; 255
    8c30:	e8 1a       	sub	r14, r24
    8c32:	f8 0a       	sbc	r15, r24
    8c34:	a8 85       	ldd	r26, Y+8	; 0x08
    8c36:	b9 85       	ldd	r27, Y+9	; 0x09
    8c38:	11 96       	adiw	r26, 0x01	; 1
    8c3a:	b9 87       	std	Y+9, r27	; 0x09
    8c3c:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    8c3e:	18 97       	sbiw	r26, 0x08	; 8
    8c40:	e9 f6       	brne	.-70     	; 0x8bfc <mugui_lcd_putc+0xe8>
    8c42:	bf ef       	ldi	r27, 0xFF	; 255
    8c44:	cb 1a       	sub	r12, r27
    8c46:	db 0a       	sbc	r13, r27
    8c48:	cf cf       	rjmp	.-98     	; 0x8be8 <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    8c4a:	0f 5f       	subi	r16, 0xFF	; 255
    8c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    8c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    8c50:	fa 81       	ldd	r31, Y+2	; 0x02
    8c52:	ae 0e       	add	r10, r30
    8c54:	bf 1e       	adc	r11, r31
    8c56:	b9 cf       	rjmp	.-142    	; 0x8bca <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    8c58:	c3 01       	movw	r24, r6
    8c5a:	29 96       	adiw	r28, 0x09	; 9
    8c5c:	0f b6       	in	r0, 0x3f	; 63
    8c5e:	f8 94       	cli
    8c60:	de bf       	out	0x3e, r29	; 62
    8c62:	0f be       	out	0x3f, r0	; 63
    8c64:	cd bf       	out	0x3d, r28	; 61
    8c66:	df 91       	pop	r29
    8c68:	cf 91       	pop	r28
    8c6a:	1f 91       	pop	r17
    8c6c:	0f 91       	pop	r16
    8c6e:	ff 90       	pop	r15
    8c70:	ef 90       	pop	r14
    8c72:	df 90       	pop	r13
    8c74:	cf 90       	pop	r12
    8c76:	bf 90       	pop	r11
    8c78:	af 90       	pop	r10
    8c7a:	9f 90       	pop	r9
    8c7c:	8f 90       	pop	r8
    8c7e:	7f 90       	pop	r7
    8c80:	6f 90       	pop	r6
    8c82:	5f 90       	pop	r5
    8c84:	4f 90       	pop	r4
    8c86:	3f 90       	pop	r3
    8c88:	2f 90       	pop	r2
    8c8a:	08 95       	ret

00008c8c <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    8c8c:	af 92       	push	r10
    8c8e:	bf 92       	push	r11
    8c90:	cf 92       	push	r12
    8c92:	df 92       	push	r13
    8c94:	ef 92       	push	r14
    8c96:	ff 92       	push	r15
    8c98:	0f 93       	push	r16
    8c9a:	1f 93       	push	r17
    8c9c:	cf 93       	push	r28
    8c9e:	df 93       	push	r29
    8ca0:	ec 01       	movw	r28, r24
    8ca2:	7b 01       	movw	r14, r22
    8ca4:	6a 01       	movw	r12, r20
    8ca6:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    8ca8:	00 e0       	ldi	r16, 0x00	; 0
    8caa:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    8cac:	ce 01       	movw	r24, r28
    8cae:	fe 01       	movw	r30, r28
    8cb0:	24 91       	lpm	r18, Z
    8cb2:	22 23       	and	r18, r18
    8cb4:	71 f0       	breq	.+28     	; 0x8cd2 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    8cb6:	21 96       	adiw	r28, 0x01	; 1
    8cb8:	fc 01       	movw	r30, r24
    8cba:	84 91       	lpm	r24, Z
    8cbc:	a8 01       	movw	r20, r16
    8cbe:	4c 0d       	add	r20, r12
    8cc0:	5d 1d       	adc	r21, r13
    8cc2:	95 01       	movw	r18, r10
    8cc4:	b7 01       	movw	r22, r14
    8cc6:	0e 94 8a 45 	call	0x8b14	; 0x8b14 <mugui_lcd_putc>
    8cca:	01 96       	adiw	r24, 0x01	; 1
    8ccc:	08 0f       	add	r16, r24
    8cce:	19 1f       	adc	r17, r25
    8cd0:	ed cf       	rjmp	.-38     	; 0x8cac <pgm_mugui_lcd_puts+0x20>
	}
}
    8cd2:	df 91       	pop	r29
    8cd4:	cf 91       	pop	r28
    8cd6:	1f 91       	pop	r17
    8cd8:	0f 91       	pop	r16
    8cda:	ff 90       	pop	r15
    8cdc:	ef 90       	pop	r14
    8cde:	df 90       	pop	r13
    8ce0:	cf 90       	pop	r12
    8ce2:	bf 90       	pop	r11
    8ce4:	af 90       	pop	r10
    8ce6:	08 95       	ret

00008ce8 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    8ce8:	8f 92       	push	r8
    8cea:	9f 92       	push	r9
    8cec:	af 92       	push	r10
    8cee:	bf 92       	push	r11
    8cf0:	cf 92       	push	r12
    8cf2:	df 92       	push	r13
    8cf4:	ef 92       	push	r14
    8cf6:	ff 92       	push	r15
    8cf8:	0f 93       	push	r16
    8cfa:	1f 93       	push	r17
    8cfc:	cf 93       	push	r28
    8cfe:	df 93       	push	r29
    8d00:	6b 01       	movw	r12, r22
    8d02:	5a 01       	movw	r10, r20
    8d04:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    8d06:	ec 01       	movw	r28, r24
    8d08:	09 90       	ld	r0, Y+
    8d0a:	00 20       	and	r0, r0
    8d0c:	e9 f7       	brne	.-6      	; 0x8d08 <mugui_lcd_puts+0x20>
    8d0e:	8c 01       	movw	r16, r24
    8d10:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    8d12:	e1 2c       	mov	r14, r1
    8d14:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    8d16:	0c 17       	cp	r16, r28
    8d18:	1d 07       	cpc	r17, r29
    8d1a:	71 f0       	breq	.+28     	; 0x8d38 <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    8d1c:	a7 01       	movw	r20, r14
    8d1e:	4a 0d       	add	r20, r10
    8d20:	5b 1d       	adc	r21, r11
    8d22:	94 01       	movw	r18, r8
    8d24:	b6 01       	movw	r22, r12
    8d26:	f8 01       	movw	r30, r16
    8d28:	81 91       	ld	r24, Z+
    8d2a:	8f 01       	movw	r16, r30
    8d2c:	0e 94 8a 45 	call	0x8b14	; 0x8b14 <mugui_lcd_putc>
    8d30:	01 96       	adiw	r24, 0x01	; 1
    8d32:	e8 0e       	add	r14, r24
    8d34:	f9 1e       	adc	r15, r25
    8d36:	ef cf       	rjmp	.-34     	; 0x8d16 <mugui_lcd_puts+0x2e>
	}
}
    8d38:	df 91       	pop	r29
    8d3a:	cf 91       	pop	r28
    8d3c:	1f 91       	pop	r17
    8d3e:	0f 91       	pop	r16
    8d40:	ff 90       	pop	r15
    8d42:	ef 90       	pop	r14
    8d44:	df 90       	pop	r13
    8d46:	cf 90       	pop	r12
    8d48:	bf 90       	pop	r11
    8d4a:	af 90       	pop	r10
    8d4c:	9f 90       	pop	r9
    8d4e:	8f 90       	pop	r8
    8d50:	08 95       	ret

00008d52 <Sensor_PID>:
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
int32_t PID_AvgGyro[NUMBEROFAXIS];					// Averaged gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    8d52:	2f 92       	push	r2
    8d54:	3f 92       	push	r3
    8d56:	4f 92       	push	r4
    8d58:	5f 92       	push	r5
    8d5a:	6f 92       	push	r6
    8d5c:	7f 92       	push	r7
    8d5e:	8f 92       	push	r8
    8d60:	9f 92       	push	r9
    8d62:	af 92       	push	r10
    8d64:	bf 92       	push	r11
    8d66:	cf 92       	push	r12
    8d68:	df 92       	push	r13
    8d6a:	ef 92       	push	r14
    8d6c:	ff 92       	push	r15
    8d6e:	0f 93       	push	r16
    8d70:	1f 93       	push	r17
    8d72:	cf 93       	push	r28
    8d74:	df 93       	push	r29
    8d76:	cd b7       	in	r28, 0x3d	; 61
    8d78:	de b7       	in	r29, 0x3e	; 62
    8d7a:	a7 97       	sbiw	r28, 0x27	; 39
    8d7c:	0f b6       	in	r0, 0x3f	; 63
    8d7e:	f8 94       	cli
    8d80:	de bf       	out	0x3e, r29	; 62
    8d82:	0f be       	out	0x3f, r0	; 63
    8d84:	cd bf       	out	0x3d, r28	; 61
    8d86:	6c a3       	std	Y+36, r22	; 0x24
    8d88:	7d a3       	std	Y+37, r23	; 0x25
    8d8a:	8e a3       	std	Y+38, r24	; 0x26
    8d8c:	9f a3       	std	Y+39, r25	; 0x27
	float tempf1 = 0;
    8d8e:	1d 86       	std	Y+13, r1	; 0x0d
    8d90:	1e 86       	std	Y+14, r1	; 0x0e
    8d92:	1f 86       	std	Y+15, r1	; 0x0f
    8d94:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    8d96:	80 91 78 08 	lds	r24, 0x0878
    8d9a:	90 91 79 08 	lds	r25, 0x0879
    8d9e:	91 95       	neg	r25
    8da0:	81 95       	neg	r24
    8da2:	91 09       	sbc	r25, r1
    8da4:	98 87       	std	Y+8, r25	; 0x08
    8da6:	8f 83       	std	Y+7, r24	; 0x07
    8da8:	80 91 7a 08 	lds	r24, 0x087A
    8dac:	90 91 7b 08 	lds	r25, 0x087B
    8db0:	9a 87       	std	Y+10, r25	; 0x0a
    8db2:	89 87       	std	Y+9, r24	; 0x09
    8db4:	80 91 7c 08 	lds	r24, 0x087C
    8db8:	90 91 7d 08 	lds	r25, 0x087D
    8dbc:	9c 87       	std	Y+12, r25	; 0x0c
    8dbe:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    8dc0:	80 91 02 06 	lds	r24, 0x0602
    8dc4:	89 83       	std	Y+1, r24	; 0x01
    8dc6:	80 91 08 06 	lds	r24, 0x0608
    8dca:	8a 83       	std	Y+2, r24	; 0x02
    8dcc:	80 91 0e 06 	lds	r24, 0x060E
    8dd0:	8b 83       	std	Y+3, r24	; 0x03
    8dd2:	80 91 14 06 	lds	r24, 0x0614
    8dd6:	8c 83       	std	Y+4, r24	; 0x04
    8dd8:	80 91 1a 06 	lds	r24, 0x061A
    8ddc:	8d 83       	std	Y+5, r24	; 0x05
    8dde:	80 91 20 06 	lds	r24, 0x0620
    8de2:	8e 83       	std	Y+6, r24	; 0x06
    8de4:	9e 01       	movw	r18, r28
    8de6:	29 5f       	subi	r18, 0xF9	; 249
    8de8:	3f 4f       	sbci	r19, 0xFF	; 255
    8dea:	3f 8f       	std	Y+31, r19	; 0x1f
    8dec:	2e 8f       	std	Y+30, r18	; 0x1e
    8dee:	ae 01       	movw	r20, r28
    8df0:	4f 5f       	subi	r20, 0xFF	; 255
    8df2:	5f 4f       	sbci	r21, 0xFF	; 255
    8df4:	5d 8f       	std	Y+29, r21	; 0x1d
    8df6:	4c 8f       	std	Y+28, r20	; 0x1c
    8df8:	ce 01       	movw	r24, r28
    8dfa:	04 96       	adiw	r24, 0x04	; 4
    8dfc:	9b 8f       	std	Y+27, r25	; 0x1b
    8dfe:	8a 8f       	std	Y+26, r24	; 0x1a
    8e00:	e8 e6       	ldi	r30, 0x68	; 104
    8e02:	f8 e0       	ldi	r31, 0x08	; 8
    8e04:	fd 8b       	std	Y+21, r31	; 0x15
    8e06:	ec 8b       	std	Y+20, r30	; 0x14
    8e08:	00 e2       	ldi	r16, 0x20	; 32
    8e0a:	18 e0       	ldi	r17, 0x08	; 8
    8e0c:	27 e4       	ldi	r18, 0x47	; 71
    8e0e:	36 e0       	ldi	r19, 0x06	; 6
    8e10:	3b a3       	std	Y+35, r19	; 0x23
    8e12:	2a a3       	std	Y+34, r18	; 0x22
    8e14:	44 e4       	ldi	r20, 0x44	; 68
    8e16:	24 2e       	mov	r2, r20
    8e18:	48 e0       	ldi	r20, 0x08	; 8
    8e1a:	34 2e       	mov	r3, r20
    8e1c:	4f e8       	ldi	r20, 0x8F	; 143
    8e1e:	55 e0       	ldi	r21, 0x05	; 5
    8e20:	5a 8b       	std	Y+18, r21	; 0x12
    8e22:	49 8b       	std	Y+17, r20	; 0x11
    8e24:	8b e3       	ldi	r24, 0x3B	; 59
    8e26:	96 e0       	ldi	r25, 0x06	; 6
    8e28:	99 a3       	std	Y+33, r25	; 0x21
    8e2a:	88 a3       	std	Y+32, r24	; 0x20
	{
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	for (axis = 0; axis <= YAW; axis ++)
    8e2c:	1b 8a       	std	Y+19, r1	; 0x13
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    8e2e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    8e30:	ff 8d       	ldd	r31, Y+31	; 0x1f
    8e32:	81 91       	ld	r24, Z+
    8e34:	91 91       	ld	r25, Z+
    8e36:	ff 8f       	std	Y+31, r31	; 0x1f
    8e38:	ee 8f       	std	Y+30, r30	; 0x1e
    8e3a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    8e3c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    8e3e:	21 91       	ld	r18, Z+
    8e40:	fd 8f       	std	Y+29, r31	; 0x1d
    8e42:	ec 8f       	std	Y+28, r30	; 0x1c
    8e44:	36 e0       	ldi	r19, 0x06	; 6
    8e46:	63 2e       	mov	r6, r19
    8e48:	71 2c       	mov	r7, r1
    8e4a:	62 1a       	sub	r6, r18
    8e4c:	71 08       	sbc	r7, r1
    8e4e:	27 fd       	sbrc	r18, 7
    8e50:	73 94       	inc	r7
    8e52:	9c 01       	movw	r18, r24
    8e54:	02 c0       	rjmp	.+4      	; 0x8e5a <Sensor_PID+0x108>
    8e56:	35 95       	asr	r19
    8e58:	27 95       	ror	r18
    8e5a:	6a 94       	dec	r6
    8e5c:	e2 f7       	brpl	.-8      	; 0x8e56 <Sensor_PID+0x104>
    8e5e:	39 01       	movw	r6, r18
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    8e60:	ea 8d       	ldd	r30, Y+26	; 0x1a
    8e62:	fb 8d       	ldd	r31, Y+27	; 0x1b
    8e64:	21 91       	ld	r18, Z+
    8e66:	fb 8f       	std	Y+27, r31	; 0x1b
    8e68:	ea 8f       	std	Y+26, r30	; 0x1a
    8e6a:	46 e0       	ldi	r20, 0x06	; 6
    8e6c:	50 e0       	ldi	r21, 0x00	; 0
    8e6e:	42 1b       	sub	r20, r18
    8e70:	51 09       	sbc	r21, r1
    8e72:	27 fd       	sbrc	r18, 7
    8e74:	53 95       	inc	r21
    8e76:	fc 01       	movw	r30, r24
    8e78:	04 2e       	mov	r0, r20
    8e7a:	02 c0       	rjmp	.+4      	; 0x8e80 <Sensor_PID+0x12e>
    8e7c:	f5 95       	asr	r31
    8e7e:	e7 95       	ror	r30
    8e80:	0a 94       	dec	r0
    8e82:	e2 f7       	brpl	.-8      	; 0x8e7c <Sensor_PID+0x12a>
    8e84:	ff 8b       	std	Y+23, r31	; 0x17
    8e86:	ee 8b       	std	Y+22, r30	; 0x16
		// Gyro LPF
		//************************************************************	

		// Lookup LPF value
		// Note: Two sets of values for normal and high-speed mode
		if (Config.Servo_rate != FAST)
    8e88:	80 91 f7 05 	lds	r24, 0x05F7
    8e8c:	60 91 5c 06 	lds	r22, 0x065C
    8e90:	82 30       	cpi	r24, 0x02	; 2
    8e92:	39 f0       	breq	.+14     	; 0x8ea2 <Sensor_PID+0x150>
		{
			memcpy_P(&tempf1, &LPF_lookup[Config.Gyro_LPF], sizeof(float));
    8e94:	f4 e0       	ldi	r31, 0x04	; 4
    8e96:	6f 02       	muls	r22, r31
    8e98:	b0 01       	movw	r22, r0
    8e9a:	11 24       	eor	r1, r1
    8e9c:	6d 58       	subi	r22, 0x8D	; 141
    8e9e:	74 4e       	sbci	r23, 0xE4	; 228
    8ea0:	06 c0       	rjmp	.+12     	; 0x8eae <Sensor_PID+0x15c>
		}
		else
		{
			memcpy_P(&tempf1, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float));
    8ea2:	24 e0       	ldi	r18, 0x04	; 4
    8ea4:	62 02       	muls	r22, r18
    8ea6:	b0 01       	movw	r22, r0
    8ea8:	11 24       	eor	r1, r1
    8eaa:	6d 5a       	subi	r22, 0xAD	; 173
    8eac:	74 4e       	sbci	r23, 0xE4	; 228
    8eae:	44 e0       	ldi	r20, 0x04	; 4
    8eb0:	50 e0       	ldi	r21, 0x00	; 0
    8eb2:	ce 01       	movw	r24, r28
    8eb4:	0d 96       	adiw	r24, 0x0d	; 13
    8eb6:	0e 94 2b 51 	call	0xa256	; 0xa256 <memcpy_P>
		}		
			
		gyroADCf = gyroADC[axis]; // Promote gyro signal to suit
    8eba:	e9 89       	ldd	r30, Y+17	; 0x11
    8ebc:	fa 89       	ldd	r31, Y+18	; 0x12
    8ebe:	60 81       	ld	r22, Z
    8ec0:	71 81       	ldd	r23, Z+1	; 0x01
    8ec2:	88 27       	eor	r24, r24
    8ec4:	77 fd       	sbrc	r23, 7
    8ec6:	80 95       	com	r24
    8ec8:	98 2f       	mov	r25, r24
    8eca:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    8ece:	6b 01       	movw	r12, r22
    8ed0:	7c 01       	movw	r14, r24

		if (Config.Gyro_LPF != NOFILTER)
    8ed2:	80 91 5c 06 	lds	r24, 0x065C
    8ed6:	87 30       	cpi	r24, 0x07	; 7
    8ed8:	09 f1       	breq	.+66     	; 0x8f1c <Sensor_PID+0x1ca>
		{
			// Gyro LPF
			gyroSmooth[axis] = ((gyroSmooth[axis] * (tempf1 - 1.0f)) + gyroADCf) / tempf1;
    8eda:	8d 84       	ldd	r8, Y+13	; 0x0d
    8edc:	9e 84       	ldd	r9, Y+14	; 0x0e
    8ede:	af 84       	ldd	r10, Y+15	; 0x0f
    8ee0:	b8 88       	ldd	r11, Y+16	; 0x10
    8ee2:	20 e0       	ldi	r18, 0x00	; 0
    8ee4:	30 e0       	ldi	r19, 0x00	; 0
    8ee6:	40 e8       	ldi	r20, 0x80	; 128
    8ee8:	5f e3       	ldi	r21, 0x3F	; 63
    8eea:	c5 01       	movw	r24, r10
    8eec:	b4 01       	movw	r22, r8
    8eee:	0e 94 70 4e 	call	0x9ce0	; 0x9ce0 <__subsf3>
    8ef2:	f1 01       	movw	r30, r2
    8ef4:	20 81       	ld	r18, Z
    8ef6:	31 81       	ldd	r19, Z+1	; 0x01
    8ef8:	42 81       	ldd	r20, Z+2	; 0x02
    8efa:	53 81       	ldd	r21, Z+3	; 0x03
    8efc:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
    8f00:	a7 01       	movw	r20, r14
    8f02:	96 01       	movw	r18, r12
    8f04:	0e 94 71 4e 	call	0x9ce2	; 0x9ce2 <__addsf3>
    8f08:	a5 01       	movw	r20, r10
    8f0a:	94 01       	movw	r18, r8
    8f0c:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <__divsf3>
    8f10:	f1 01       	movw	r30, r2
    8f12:	60 83       	st	Z, r22
    8f14:	71 83       	std	Z+1, r23	; 0x01
    8f16:	82 83       	std	Z+2, r24	; 0x02
    8f18:	93 83       	std	Z+3, r25	; 0x03
    8f1a:	05 c0       	rjmp	.+10     	; 0x8f26 <Sensor_PID+0x1d4>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values when filter off
			gyroSmooth[axis] = gyroADCf;
    8f1c:	f1 01       	movw	r30, r2
    8f1e:	c0 82       	st	Z, r12
    8f20:	d1 82       	std	Z+1, r13	; 0x01
    8f22:	e2 82       	std	Z+2, r14	; 0x02
    8f24:	f3 82       	std	Z+3, r15	; 0x03
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];	
    8f26:	f1 01       	movw	r30, r2
    8f28:	60 81       	ld	r22, Z
    8f2a:	71 81       	ldd	r23, Z+1	; 0x01
    8f2c:	82 81       	ldd	r24, Z+2	; 0x02
    8f2e:	93 81       	ldd	r25, Z+3	; 0x03
    8f30:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
    8f34:	4b 01       	movw	r8, r22
    8f36:	5c 01       	movw	r10, r24
    8f38:	e9 89       	ldd	r30, Y+17	; 0x11
    8f3a:	fa 89       	ldd	r31, Y+18	; 0x12
    8f3c:	71 83       	std	Z+1, r23	; 0x01
    8f3e:	60 83       	st	Z, r22
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
    8f40:	6c a1       	ldd	r22, Y+36	; 0x24
    8f42:	7d a1       	ldd	r23, Y+37	; 0x25
    8f44:	8e a1       	ldd	r24, Y+38	; 0x26
    8f46:	9f a1       	ldd	r25, Y+39	; 0x27
    8f48:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <__floatunsisf>
    8f4c:	20 e0       	ldi	r18, 0x00	; 0
    8f4e:	30 e3       	ldi	r19, 0x30	; 48
    8f50:	4f e5       	ldi	r20, 0x5F	; 95
    8f52:	55 e4       	ldi	r21, 0x45	; 69
    8f54:	0e 94 d9 4e 	call	0x9db2	; 0x9db2 <__divsf3>
    8f58:	6b 01       	movw	r12, r22
    8f5a:	7c 01       	movw	r14, r24
		//************************************************************
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
    8f5c:	b3 01       	movw	r22, r6
    8f5e:	68 0d       	add	r22, r8
    8f60:	79 1d       	adc	r23, r9
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    8f62:	88 27       	eor	r24, r24
    8f64:	77 fd       	sbrc	r23, 7
    8f66:	80 95       	com	r24
    8f68:	98 2f       	mov	r25, r24
    8f6a:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    8f6e:	2b 01       	movw	r4, r22
    8f70:	3c 01       	movw	r6, r24
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
    8f72:	6e 89       	ldd	r22, Y+22	; 0x16
    8f74:	7f 89       	ldd	r23, Y+23	; 0x17
    8f76:	68 0d       	add	r22, r8
    8f78:	79 1d       	adc	r23, r9
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
    8f7a:	88 27       	eor	r24, r24
    8f7c:	77 fd       	sbrc	r23, 7
    8f7e:	80 95       	com	r24
    8f80:	98 2f       	mov	r25, r24
    8f82:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <__floatsisf>
    8f86:	6e 8b       	std	Y+22, r22	; 0x16
    8f88:	7f 8b       	std	Y+23, r23	; 0x17
    8f8a:	88 8f       	std	Y+24, r24	; 0x18
    8f8c:	99 8f       	std	Y+25, r25	; 0x19
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
    8f8e:	a7 01       	movw	r20, r14
    8f90:	96 01       	movw	r18, r12
    8f92:	c3 01       	movw	r24, r6
    8f94:	b2 01       	movw	r22, r4
    8f96:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    8f9a:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
		tempf2 = tempf2 * factor;
		P2_temp = (int32_t)tempf2;
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
    8f9e:	f8 01       	movw	r30, r16
    8fa0:	40 80       	ld	r4, Z
    8fa2:	51 80       	ldd	r5, Z+1	; 0x01
    8fa4:	62 80       	ldd	r6, Z+2	; 0x02
    8fa6:	73 80       	ldd	r7, Z+3	; 0x03
    8fa8:	46 0e       	add	r4, r22
    8faa:	57 1e       	adc	r5, r23
    8fac:	68 1e       	adc	r6, r24
    8fae:	79 1e       	adc	r7, r25
    8fb0:	40 82       	st	Z, r4
    8fb2:	51 82       	std	Z+1, r5	; 0x01
    8fb4:	62 82       	std	Z+2, r6	; 0x02
    8fb6:	73 82       	std	Z+3, r7	; 0x03
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
		tempf2 = tempf2 * factor;
    8fb8:	a7 01       	movw	r20, r14
    8fba:	96 01       	movw	r18, r12
    8fbc:	6e 89       	ldd	r22, Y+22	; 0x16
    8fbe:	7f 89       	ldd	r23, Y+23	; 0x17
    8fc0:	88 8d       	ldd	r24, Y+24	; 0x18
    8fc2:	99 8d       	ldd	r25, Y+25	; 0x19
    8fc4:	0e 94 28 50 	call	0xa050	; 0xa050 <__mulsf3>
		P2_temp = (int32_t)tempf2;
    8fc8:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
		IntegralGyro[P2][axis] += P2_temp;
    8fcc:	f8 01       	movw	r30, r16
    8fce:	c4 84       	ldd	r12, Z+12	; 0x0c
    8fd0:	d5 84       	ldd	r13, Z+13	; 0x0d
    8fd2:	e6 84       	ldd	r14, Z+14	; 0x0e
    8fd4:	f7 84       	ldd	r15, Z+15	; 0x0f
    8fd6:	c6 0e       	add	r12, r22
    8fd8:	d7 1e       	adc	r13, r23
    8fda:	e8 1e       	adc	r14, r24
    8fdc:	f9 1e       	adc	r15, r25
    8fde:	c4 86       	std	Z+12, r12	; 0x0c
    8fe0:	d5 86       	std	Z+13, r13	; 0x0d
    8fe2:	e6 86       	std	Z+14, r14	; 0x0e
    8fe4:	f7 86       	std	Z+15, r15	; 0x0f
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    8fe6:	e8 a1       	ldd	r30, Y+32	; 0x20
    8fe8:	f9 a1       	ldd	r31, Y+33	; 0x21
    8fea:	81 91       	ld	r24, Z+
    8fec:	91 91       	ld	r25, Z+
    8fee:	a1 91       	ld	r26, Z+
    8ff0:	b1 91       	ld	r27, Z+
    8ff2:	f9 a3       	std	Y+33, r31	; 0x21
    8ff4:	e8 a3       	std	Y+32, r30	; 0x20
    8ff6:	84 15       	cp	r24, r4
    8ff8:	95 05       	cpc	r25, r5
    8ffa:	a6 05       	cpc	r26, r6
    8ffc:	b7 05       	cpc	r27, r7
    8ffe:	2c f4       	brge	.+10     	; 0x900a <Sensor_PID+0x2b8>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    9000:	f8 01       	movw	r30, r16
    9002:	80 83       	st	Z, r24
    9004:	91 83       	std	Z+1, r25	; 0x01
    9006:	a2 83       	std	Z+2, r26	; 0x02
    9008:	b3 83       	std	Z+3, r27	; 0x03
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    900a:	b0 95       	com	r27
    900c:	a0 95       	com	r26
    900e:	90 95       	com	r25
    9010:	81 95       	neg	r24
    9012:	9f 4f       	sbci	r25, 0xFF	; 255
    9014:	af 4f       	sbci	r26, 0xFF	; 255
    9016:	bf 4f       	sbci	r27, 0xFF	; 255
    9018:	f8 01       	movw	r30, r16
    901a:	40 81       	ld	r20, Z
    901c:	51 81       	ldd	r21, Z+1	; 0x01
    901e:	62 81       	ldd	r22, Z+2	; 0x02
    9020:	73 81       	ldd	r23, Z+3	; 0x03
    9022:	48 17       	cp	r20, r24
    9024:	59 07       	cpc	r21, r25
    9026:	6a 07       	cpc	r22, r26
    9028:	7b 07       	cpc	r23, r27
    902a:	24 f4       	brge	.+8      	; 0x9034 <Sensor_PID+0x2e2>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    902c:	80 83       	st	Z, r24
    902e:	91 83       	std	Z+1, r25	; 0x01
    9030:	a2 83       	std	Z+2, r26	; 0x02
    9032:	b3 83       	std	Z+3, r27	; 0x03
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    9034:	ea a1       	ldd	r30, Y+34	; 0x22
    9036:	fb a1       	ldd	r31, Y+35	; 0x23
    9038:	81 91       	ld	r24, Z+
    903a:	91 91       	ld	r25, Z+
    903c:	a1 91       	ld	r26, Z+
    903e:	b1 91       	ld	r27, Z+
    9040:	fb a3       	std	Y+35, r31	; 0x23
    9042:	ea a3       	std	Y+34, r30	; 0x22
    9044:	f8 01       	movw	r30, r16
    9046:	44 85       	ldd	r20, Z+12	; 0x0c
    9048:	55 85       	ldd	r21, Z+13	; 0x0d
    904a:	66 85       	ldd	r22, Z+14	; 0x0e
    904c:	77 85       	ldd	r23, Z+15	; 0x0f
    904e:	84 17       	cp	r24, r20
    9050:	95 07       	cpc	r25, r21
    9052:	a6 07       	cpc	r26, r22
    9054:	b7 07       	cpc	r27, r23
    9056:	24 f4       	brge	.+8      	; 0x9060 <Sensor_PID+0x30e>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    9058:	84 87       	std	Z+12, r24	; 0x0c
    905a:	95 87       	std	Z+13, r25	; 0x0d
    905c:	a6 87       	std	Z+14, r26	; 0x0e
    905e:	b7 87       	std	Z+15, r27	; 0x0f
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    9060:	b0 95       	com	r27
    9062:	a0 95       	com	r26
    9064:	90 95       	com	r25
    9066:	81 95       	neg	r24
    9068:	9f 4f       	sbci	r25, 0xFF	; 255
    906a:	af 4f       	sbci	r26, 0xFF	; 255
    906c:	bf 4f       	sbci	r27, 0xFF	; 255
    906e:	f8 01       	movw	r30, r16
    9070:	44 85       	ldd	r20, Z+12	; 0x0c
    9072:	55 85       	ldd	r21, Z+13	; 0x0d
    9074:	66 85       	ldd	r22, Z+14	; 0x0e
    9076:	77 85       	ldd	r23, Z+15	; 0x0f
    9078:	48 17       	cp	r20, r24
    907a:	59 07       	cpc	r21, r25
    907c:	6a 07       	cpc	r22, r26
    907e:	7b 07       	cpc	r23, r27
    9080:	24 f4       	brge	.+8      	; 0x908a <Sensor_PID+0x338>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    9082:	84 87       	std	Z+12, r24	; 0x0c
    9084:	95 87       	std	Z+13, r25	; 0x0d
    9086:	a6 87       	std	Z+14, r26	; 0x0e
    9088:	b7 87       	std	Z+15, r27	; 0x0f

		//************************************************************
		// Sum gyro readings for P-terms for later averaging
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
    908a:	a4 01       	movw	r20, r8
    908c:	66 27       	eor	r22, r22
    908e:	57 fd       	sbrc	r21, 7
    9090:	60 95       	com	r22
    9092:	76 2f       	mov	r23, r22
    9094:	ec 89       	ldd	r30, Y+20	; 0x14
    9096:	fd 89       	ldd	r31, Y+21	; 0x15
    9098:	80 81       	ld	r24, Z
    909a:	91 81       	ldd	r25, Z+1	; 0x01
    909c:	a2 81       	ldd	r26, Z+2	; 0x02
    909e:	b3 81       	ldd	r27, Z+3	; 0x03
    90a0:	84 0f       	add	r24, r20
    90a2:	95 1f       	adc	r25, r21
    90a4:	a6 1f       	adc	r26, r22
    90a6:	b7 1f       	adc	r27, r23
    90a8:	81 93       	st	Z+, r24
    90aa:	91 93       	st	Z+, r25
    90ac:	a1 93       	st	Z+, r26
    90ae:	b1 93       	st	Z+, r27
    90b0:	fd 8b       	std	Y+21, r31	; 0x15
    90b2:	ec 8b       	std	Y+20, r30	; 0x14
    90b4:	fb 89       	ldd	r31, Y+19	; 0x13
    90b6:	ff 5f       	subi	r31, 0xFF	; 255
    90b8:	fb 8b       	std	Y+19, r31	; 0x13
    90ba:	0c 5f       	subi	r16, 0xFC	; 252
    90bc:	1f 4f       	sbci	r17, 0xFF	; 255
    90be:	24 e0       	ldi	r18, 0x04	; 4
    90c0:	22 0e       	add	r2, r18
    90c2:	31 1c       	adc	r3, r1
    90c4:	49 89       	ldd	r20, Y+17	; 0x11
    90c6:	5a 89       	ldd	r21, Y+18	; 0x12
    90c8:	4e 5f       	subi	r20, 0xFE	; 254
    90ca:	5f 4f       	sbci	r21, 0xFF	; 255
    90cc:	5a 8b       	std	Y+18, r21	; 0x12
    90ce:	49 8b       	std	Y+17, r20	; 0x11
	{
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	for (axis = 0; axis <= YAW; axis ++)
    90d0:	f3 30       	cpi	r31, 0x03	; 3
    90d2:	09 f0       	breq	.+2      	; 0x90d6 <Sensor_PID+0x384>
    90d4:	ac ce       	rjmp	.-680    	; 0x8e2e <Sensor_PID+0xdc>
				
	
	} // for (axis = 0; axis <= YAW; axis ++)
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    90d6:	40 91 16 05 	lds	r20, 0x0516
    90da:	50 91 17 05 	lds	r21, 0x0517
    90de:	66 27       	eor	r22, r22
    90e0:	57 fd       	sbrc	r21, 7
    90e2:	60 95       	com	r22
    90e4:	76 2f       	mov	r23, r22
    90e6:	80 91 38 05 	lds	r24, 0x0538
    90ea:	90 91 39 05 	lds	r25, 0x0539
    90ee:	a0 91 3a 05 	lds	r26, 0x053A
    90f2:	b0 91 3b 05 	lds	r27, 0x053B
    90f6:	84 0f       	add	r24, r20
    90f8:	95 1f       	adc	r25, r21
    90fa:	a6 1f       	adc	r26, r22
    90fc:	b7 1f       	adc	r27, r23
    90fe:	80 93 38 05 	sts	0x0538, r24
    9102:	90 93 39 05 	sts	0x0539, r25
    9106:	a0 93 3a 05 	sts	0x053A, r26
    910a:	b0 93 3b 05 	sts	0x053B, r27
}
    910e:	a7 96       	adiw	r28, 0x27	; 39
    9110:	0f b6       	in	r0, 0x3f	; 63
    9112:	f8 94       	cli
    9114:	de bf       	out	0x3e, r29	; 62
    9116:	0f be       	out	0x3f, r0	; 63
    9118:	cd bf       	out	0x3d, r28	; 61
    911a:	df 91       	pop	r29
    911c:	cf 91       	pop	r28
    911e:	1f 91       	pop	r17
    9120:	0f 91       	pop	r16
    9122:	ff 90       	pop	r15
    9124:	ef 90       	pop	r14
    9126:	df 90       	pop	r13
    9128:	cf 90       	pop	r12
    912a:	bf 90       	pop	r11
    912c:	af 90       	pop	r10
    912e:	9f 90       	pop	r9
    9130:	8f 90       	pop	r8
    9132:	7f 90       	pop	r7
    9134:	6f 90       	pop	r6
    9136:	5f 90       	pop	r5
    9138:	4f 90       	pop	r4
    913a:	3f 90       	pop	r3
    913c:	2f 90       	pop	r2
    913e:	08 95       	ret

00009140 <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    9140:	2f 92       	push	r2
    9142:	3f 92       	push	r3
    9144:	4f 92       	push	r4
    9146:	5f 92       	push	r5
    9148:	6f 92       	push	r6
    914a:	7f 92       	push	r7
    914c:	8f 92       	push	r8
    914e:	9f 92       	push	r9
    9150:	af 92       	push	r10
    9152:	bf 92       	push	r11
    9154:	cf 92       	push	r12
    9156:	df 92       	push	r13
    9158:	ef 92       	push	r14
    915a:	ff 92       	push	r15
    915c:	0f 93       	push	r16
    915e:	1f 93       	push	r17
    9160:	cf 93       	push	r28
    9162:	df 93       	push	r29
    9164:	cd b7       	in	r28, 0x3d	; 61
    9166:	de b7       	in	r29, 0x3e	; 62
    9168:	cd 54       	subi	r28, 0x4D	; 77
    916a:	d1 09       	sbc	r29, r1
    916c:	0f b6       	in	r0, 0x3f	; 63
    916e:	f8 94       	cli
    9170:	de bf       	out	0x3e, r29	; 62
    9172:	0f be       	out	0x3f, r0	; 63
    9174:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    9176:	80 91 ff 05 	lds	r24, 0x05FF
    917a:	8d 8b       	std	Y+21, r24	; 0x15
    917c:	80 91 05 06 	lds	r24, 0x0605
    9180:	8e 8b       	std	Y+22, r24	; 0x16
    9182:	80 91 0b 06 	lds	r24, 0x060B
    9186:	8f 8b       	std	Y+23, r24	; 0x17
    9188:	80 91 11 06 	lds	r24, 0x0611
    918c:	88 8f       	std	Y+24, r24	; 0x18
    918e:	80 91 17 06 	lds	r24, 0x0617
    9192:	89 8f       	std	Y+25, r24	; 0x19
    9194:	80 91 1d 06 	lds	r24, 0x061D
    9198:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    919a:	80 91 00 06 	lds	r24, 0x0600
    919e:	8f 87       	std	Y+15, r24	; 0x0f
    91a0:	80 91 06 06 	lds	r24, 0x0606
    91a4:	88 8b       	std	Y+16, r24	; 0x10
    91a6:	80 91 0c 06 	lds	r24, 0x060C
    91aa:	89 8b       	std	Y+17, r24	; 0x11
    91ac:	80 91 12 06 	lds	r24, 0x0612
    91b0:	8a 8b       	std	Y+18, r24	; 0x12
    91b2:	80 91 18 06 	lds	r24, 0x0618
    91b6:	8b 8b       	std	Y+19, r24	; 0x13
    91b8:	80 91 1e 06 	lds	r24, 0x061E
    91bc:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    91be:	80 91 03 06 	lds	r24, 0x0603
    91c2:	89 87       	std	Y+9, r24	; 0x09
    91c4:	80 91 09 06 	lds	r24, 0x0609
    91c8:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    91ca:	20 91 10 06 	lds	r18, 0x0610
    91ce:	2d a7       	std	Y+45, r18	; 0x2d
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    91d0:	2b 87       	std	Y+11, r18	; 0x0b
    91d2:	80 91 15 06 	lds	r24, 0x0615
    91d6:	8c 87       	std	Y+12, r24	; 0x0c
    91d8:	80 91 1b 06 	lds	r24, 0x061B
    91dc:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    91de:	30 91 22 06 	lds	r19, 0x0622
    91e2:	3e a7       	std	Y+46, r19	; 0x2e
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    91e4:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    91e6:	80 91 cc 07 	lds	r24, 0x07CC
    91ea:	90 91 cd 07 	lds	r25, 0x07CD
    91ee:	9a 83       	std	Y+2, r25	; 0x02
    91f0:	89 83       	std	Y+1, r24	; 0x01
    91f2:	80 91 d0 07 	lds	r24, 0x07D0
    91f6:	90 91 d1 07 	lds	r25, 0x07D1
    91fa:	9c 83       	std	Y+4, r25	; 0x04
    91fc:	8b 83       	std	Y+3, r24	; 0x03
    91fe:	80 91 ce 07 	lds	r24, 0x07CE
    9202:	90 91 cf 07 	lds	r25, 0x07CF
    9206:	9e 83       	std	Y+6, r25	; 0x06
    9208:	8d 83       	std	Y+5, r24	; 0x05
    920a:	80 91 d2 07 	lds	r24, 0x07D2
    920e:	90 91 d3 07 	lds	r25, 0x07D3
    9212:	98 87       	std	Y+8, r25	; 0x08
    9214:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    9216:	20 91 18 05 	lds	r18, 0x0518
    921a:	30 e0       	ldi	r19, 0x00	; 0
    921c:	40 e0       	ldi	r20, 0x00	; 0
    921e:	50 e0       	ldi	r21, 0x00	; 0
    9220:	60 91 38 05 	lds	r22, 0x0538
    9224:	70 91 39 05 	lds	r23, 0x0539
    9228:	80 91 3a 05 	lds	r24, 0x053A
    922c:	90 91 3b 05 	lds	r25, 0x053B
    9230:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <__divmodsi4>
    9234:	2d 96       	adiw	r28, 0x0d	; 13
    9236:	2c af       	std	Y+60, r18	; 0x3c
    9238:	3d af       	std	Y+61, r19	; 0x3d
    923a:	4e af       	std	Y+62, r20	; 0x3e
    923c:	5f af       	std	Y+63, r21	; 0x3f
    923e:	2d 97       	sbiw	r28, 0x0d	; 13
	PID_AvgAccVert = 0;							// Reset average
    9240:	10 92 38 05 	sts	0x0538, r1
    9244:	10 92 39 05 	sts	0x0539, r1
    9248:	10 92 3a 05 	sts	0x053A, r1
    924c:	10 92 3b 05 	sts	0x053B, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    9250:	80 91 0f 06 	lds	r24, 0x060F
    9254:	40 e4       	ldi	r20, 0x40	; 64
    9256:	84 02       	muls	r24, r20
    9258:	c0 01       	movw	r24, r0
    925a:	11 24       	eor	r1, r1
    925c:	9c 01       	movw	r18, r24
    925e:	44 27       	eor	r20, r20
    9260:	37 fd       	sbrc	r19, 7
    9262:	40 95       	com	r20
    9264:	54 2f       	mov	r21, r20
    9266:	29 af       	std	Y+57, r18	; 0x39
    9268:	3a af       	std	Y+58, r19	; 0x3a
    926a:	4b af       	std	Y+59, r20	; 0x3b
    926c:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    926e:	80 91 21 06 	lds	r24, 0x0621
    9272:	30 e4       	ldi	r19, 0x40	; 64
    9274:	83 02       	muls	r24, r19
    9276:	c0 01       	movw	r24, r0
    9278:	11 24       	eor	r1, r1
    927a:	9c 01       	movw	r18, r24
    927c:	44 27       	eor	r20, r20
    927e:	37 fd       	sbrc	r19, 7
    9280:	40 95       	com	r20
    9282:	54 2f       	mov	r21, r20
    9284:	21 96       	adiw	r28, 0x01	; 1
    9286:	2c af       	std	Y+60, r18	; 0x3c
    9288:	3d af       	std	Y+61, r19	; 0x3d
    928a:	4e af       	std	Y+62, r20	; 0x3e
    928c:	5f af       	std	Y+63, r21	; 0x3f
    928e:	21 97       	sbiw	r28, 0x01	; 1
    9290:	48 e6       	ldi	r20, 0x68	; 104
    9292:	58 e0       	ldi	r21, 0x08	; 8
    9294:	5e a3       	std	Y+38, r21	; 0x26
    9296:	4d a3       	std	Y+37, r20	; 0x25
    9298:	8f e8       	ldi	r24, 0x8F	; 143
    929a:	95 e0       	ldi	r25, 0x05	; 5
    929c:	98 af       	std	Y+56, r25	; 0x38
    929e:	8f ab       	std	Y+55, r24	; 0x37
    92a0:	a0 e5       	ldi	r26, 0x50	; 80
    92a2:	b8 e0       	ldi	r27, 0x08	; 8
    92a4:	bc a3       	std	Y+36, r27	; 0x24
    92a6:	ab a3       	std	Y+35, r26	; 0x23
    92a8:	ed ea       	ldi	r30, 0xAD	; 173
    92aa:	f5 e0       	ldi	r31, 0x05	; 5
    92ac:	f8 a7       	std	Y+40, r31	; 0x28
    92ae:	ef a3       	std	Y+39, r30	; 0x27
    92b0:	9e 01       	movw	r18, r28
    92b2:	2f 5f       	subi	r18, 0xFF	; 255
    92b4:	3f 4f       	sbci	r19, 0xFF	; 255
    92b6:	3a a3       	std	Y+34, r19	; 0x22
    92b8:	29 a3       	std	Y+33, r18	; 0x21
    92ba:	4c e5       	ldi	r20, 0x5C	; 92
    92bc:	58 e0       	ldi	r21, 0x08	; 8
    92be:	58 a3       	std	Y+32, r21	; 0x20
    92c0:	4f 8f       	std	Y+31, r20	; 0x1f
    92c2:	1e 01       	movw	r2, r28
    92c4:	5c e0       	ldi	r21, 0x0C	; 12
    92c6:	25 0e       	add	r2, r21
    92c8:	31 1c       	adc	r3, r1
    92ca:	8f e2       	ldi	r24, 0x2F	; 47
    92cc:	96 e0       	ldi	r25, 0x06	; 6
    92ce:	9c a7       	std	Y+44, r25	; 0x2c
    92d0:	8b a7       	std	Y+43, r24	; 0x2b
    92d2:	de 01       	movw	r26, r28
    92d4:	55 96       	adiw	r26, 0x15	; 21
    92d6:	ba a7       	std	Y+42, r27	; 0x2a
    92d8:	a9 a7       	std	Y+41, r26	; 0x29
    92da:	40 e2       	ldi	r20, 0x20	; 32
    92dc:	c4 2e       	mov	r12, r20
    92de:	48 e0       	ldi	r20, 0x08	; 8
    92e0:	d4 2e       	mov	r13, r20
    92e2:	fe 01       	movw	r30, r28
    92e4:	3f 96       	adiw	r30, 0x0f	; 15
    92e6:	fe ab       	std	Y+54, r31	; 0x36
    92e8:	ed ab       	std	Y+53, r30	; 0x35
    92ea:	29 5e       	subi	r18, 0xE9	; 233
    92ec:	3f 4f       	sbci	r19, 0xFF	; 255
    92ee:	38 ab       	std	Y+48, r19	; 0x30
    92f0:	2f a7       	std	Y+47, r18	; 0x2f
    92f2:	ae 01       	movw	r20, r28
    92f4:	4e 5e       	subi	r20, 0xEE	; 238
    92f6:	5f 4f       	sbci	r21, 0xFF	; 255
    92f8:	5a ab       	std	Y+50, r21	; 0x32
    92fa:	49 ab       	std	Y+49, r20	; 0x31
    92fc:	83 e2       	ldi	r24, 0x23	; 35
    92fe:	96 e0       	ldi	r25, 0x06	; 6
    9300:	9c ab       	std	Y+52, r25	; 0x34
    9302:	8b ab       	std	Y+51, r24	; 0x33
    9304:	e1 2c       	mov	r14, r1
    9306:	f1 2c       	mov	r15, r1
	{
		//************************************************************
		// Get average gyro readings for P-terms
		//************************************************************

		gyroADC[axis] = (int16_t)(PID_AvgGyro[axis] / LoopCount);
    9308:	20 91 18 05 	lds	r18, 0x0518
    930c:	30 e0       	ldi	r19, 0x00	; 0
    930e:	40 e0       	ldi	r20, 0x00	; 0
    9310:	50 e0       	ldi	r21, 0x00	; 0
    9312:	ad a1       	ldd	r26, Y+37	; 0x25
    9314:	be a1       	ldd	r27, Y+38	; 0x26
    9316:	6d 91       	ld	r22, X+
    9318:	7d 91       	ld	r23, X+
    931a:	8d 91       	ld	r24, X+
    931c:	9c 91       	ld	r25, X
    931e:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <__divmodsi4>
    9322:	2b 8f       	std	Y+27, r18	; 0x1b
    9324:	3c 8f       	std	Y+28, r19	; 0x1c
    9326:	4d 8f       	std	Y+29, r20	; 0x1d
    9328:	5e 8f       	std	Y+30, r21	; 0x1e
    932a:	ef a9       	ldd	r30, Y+55	; 0x37
    932c:	f8 ad       	ldd	r31, Y+56	; 0x38
    932e:	21 93       	st	Z+, r18
    9330:	31 93       	st	Z+, r19
    9332:	f8 af       	std	Y+56, r31	; 0x38
    9334:	ef ab       	std	Y+55, r30	; 0x37
		PID_AvgGyro[axis] = 0;					// Reset average
    9336:	ad a1       	ldd	r26, Y+37	; 0x25
    9338:	be a1       	ldd	r27, Y+38	; 0x26
    933a:	1d 92       	st	X+, r1
    933c:	1d 92       	st	X+, r1
    933e:	1d 92       	st	X+, r1
    9340:	1c 92       	st	X, r1
    9342:	13 97       	sbiw	r26, 0x03	; 3
    9344:	2e 96       	adiw	r28, 0x0e	; 14
    9346:	ef ae       	std	Y+63, r14	; 0x3f
    9348:	2e 97       	sbiw	r28, 0x0e	; 14

		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    934a:	ee 2d       	mov	r30, r14
    934c:	e2 30       	cpi	r30, 0x02	; 2
    934e:	39 f0       	breq	.+14     	; 0x935e <Calculate_PID+0x21e>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    9350:	81 2c       	mov	r8, r1
    9352:	91 2c       	mov	r9, r1
    9354:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    9356:	41 2c       	mov	r4, r1
    9358:	51 2c       	mov	r5, r1
    935a:	32 01       	movw	r6, r4
    935c:	0a c0       	rjmp	.+20     	; 0x9372 <Calculate_PID+0x232>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    935e:	21 96       	adiw	r28, 0x01	; 1
    9360:	8c ac       	ldd	r8, Y+60	; 0x3c
    9362:	9d ac       	ldd	r9, Y+61	; 0x3d
    9364:	ae ac       	ldd	r10, Y+62	; 0x3e
    9366:	bf ac       	ldd	r11, Y+63	; 0x3f
    9368:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    936a:	49 ac       	ldd	r4, Y+57	; 0x39
    936c:	5a ac       	ldd	r5, Y+58	; 0x3a
    936e:	6b ac       	ldd	r6, Y+59	; 0x3b
    9370:	7c ac       	ldd	r7, Y+60	; 0x3c
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    9372:	a9 a5       	ldd	r26, Y+41	; 0x29
    9374:	ba a5       	ldd	r27, Y+42	; 0x2a
    9376:	2d 91       	ld	r18, X+
    9378:	ba a7       	std	Y+42, r27	; 0x2a
    937a:	a9 a7       	std	Y+41, r26	; 0x29
    937c:	33 27       	eor	r19, r19
    937e:	27 fd       	sbrc	r18, 7
    9380:	30 95       	com	r19
    9382:	eb 8d       	ldd	r30, Y+27	; 0x1b
    9384:	fc 8d       	ldd	r31, Y+28	; 0x1c
    9386:	2e 9f       	mul	r18, r30
    9388:	c0 01       	movw	r24, r0
    938a:	2f 9f       	mul	r18, r31
    938c:	90 0d       	add	r25, r0
    938e:	3e 9f       	mul	r19, r30
    9390:	90 0d       	add	r25, r0
    9392:	11 24       	eor	r1, r1
    9394:	9c 01       	movw	r18, r24
    9396:	44 27       	eor	r20, r20
    9398:	37 fd       	sbrc	r19, 7
    939a:	40 95       	com	r20
    939c:	54 2f       	mov	r21, r20
    939e:	24 0d       	add	r18, r4
    93a0:	35 1d       	adc	r19, r5
    93a2:	46 1d       	adc	r20, r6
    93a4:	57 1d       	adc	r21, r7
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    93a6:	a3 e0       	ldi	r26, 0x03	; 3
    93a8:	b0 e0       	ldi	r27, 0x00	; 0
    93aa:	0e 94 18 51 	call	0xa230	; 0xa230 <__muluhisi3>
    93ae:	25 96       	adiw	r28, 0x05	; 5
    93b0:	6c af       	std	Y+60, r22	; 0x3c
    93b2:	7d af       	std	Y+61, r23	; 0x3d
    93b4:	8e af       	std	Y+62, r24	; 0x3e
    93b6:	9f af       	std	Y+63, r25	; 0x3f
    93b8:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    93ba:	ad a9       	ldd	r26, Y+53	; 0x35
    93bc:	be a9       	ldd	r27, Y+54	; 0x36
    93be:	8d 91       	ld	r24, X+
    93c0:	be ab       	std	Y+54, r27	; 0x36
    93c2:	ad ab       	std	Y+53, r26	; 0x35
    93c4:	f6 01       	movw	r30, r12
    93c6:	20 81       	ld	r18, Z
    93c8:	31 81       	ldd	r19, Z+1	; 0x01
    93ca:	42 81       	ldd	r20, Z+2	; 0x02
    93cc:	53 81       	ldd	r21, Z+3	; 0x03
    93ce:	a8 2f       	mov	r26, r24
    93d0:	bb 27       	eor	r27, r27
    93d2:	a7 fd       	sbrc	r26, 7
    93d4:	b0 95       	com	r27
    93d6:	0e 94 23 51 	call	0xa246	; 0xa246 <__mulshisi3>
    93da:	2b 01       	movw	r4, r22
    93dc:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    93de:	05 e0       	ldi	r16, 0x05	; 5
    93e0:	75 94       	asr	r7
    93e2:	67 94       	ror	r6
    93e4:	57 94       	ror	r5
    93e6:	47 94       	ror	r4
    93e8:	0a 95       	dec	r16
    93ea:	d1 f7       	brne	.-12     	; 0x93e0 <Calculate_PID+0x2a0>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    93ec:	af a5       	ldd	r26, Y+47	; 0x2f
    93ee:	b8 a9       	ldd	r27, Y+48	; 0x30
    93f0:	8d 91       	ld	r24, X+
    93f2:	b8 ab       	std	Y+48, r27	; 0x30
    93f4:	af a7       	std	Y+47, r26	; 0x2f
    93f6:	99 27       	eor	r25, r25
    93f8:	87 fd       	sbrc	r24, 7
    93fa:	90 95       	com	r25
    93fc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    93fe:	fc 8d       	ldd	r31, Y+28	; 0x1c
    9400:	8e 9f       	mul	r24, r30
    9402:	90 01       	movw	r18, r0
    9404:	8f 9f       	mul	r24, r31
    9406:	30 0d       	add	r19, r0
    9408:	9e 9f       	mul	r25, r30
    940a:	30 0d       	add	r19, r0
    940c:	11 24       	eor	r1, r1
    940e:	44 27       	eor	r20, r20
    9410:	37 fd       	sbrc	r19, 7
    9412:	40 95       	com	r20
    9414:	54 2f       	mov	r21, r20
    9416:	28 0d       	add	r18, r8
    9418:	39 1d       	adc	r19, r9
    941a:	4a 1d       	adc	r20, r10
    941c:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    941e:	a3 e0       	ldi	r26, 0x03	; 3
    9420:	b0 e0       	ldi	r27, 0x00	; 0
    9422:	0e 94 18 51 	call	0xa230	; 0xa230 <__muluhisi3>
    9426:	29 96       	adiw	r28, 0x09	; 9
    9428:	6c af       	std	Y+60, r22	; 0x3c
    942a:	7d af       	std	Y+61, r23	; 0x3d
    942c:	8e af       	std	Y+62, r24	; 0x3e
    942e:	9f af       	std	Y+63, r25	; 0x3f
    9430:	29 97       	sbiw	r28, 0x09	; 9

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    9432:	a9 a9       	ldd	r26, Y+49	; 0x31
    9434:	ba a9       	ldd	r27, Y+50	; 0x32
    9436:	8d 91       	ld	r24, X+
    9438:	ba ab       	std	Y+50, r27	; 0x32
    943a:	a9 ab       	std	Y+49, r26	; 0x31
    943c:	f6 01       	movw	r30, r12
    943e:	24 85       	ldd	r18, Z+12	; 0x0c
    9440:	35 85       	ldd	r19, Z+13	; 0x0d
    9442:	46 85       	ldd	r20, Z+14	; 0x0e
    9444:	57 85       	ldd	r21, Z+15	; 0x0f
    9446:	a8 2f       	mov	r26, r24
    9448:	bb 27       	eor	r27, r27
    944a:	a7 fd       	sbrc	r26, 7
    944c:	b0 95       	com	r27
    944e:	0e 94 23 51 	call	0xa246	; 0xa246 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    9452:	25 e0       	ldi	r18, 0x05	; 5
    9454:	95 95       	asr	r25
    9456:	87 95       	ror	r24
    9458:	77 95       	ror	r23
    945a:	67 95       	ror	r22
    945c:	2a 95       	dec	r18
    945e:	d1 f7       	brne	.-12     	; 0x9454 <Calculate_PID+0x314>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    9460:	ab a9       	ldd	r26, Y+51	; 0x33
    9462:	bc a9       	ldd	r27, Y+52	; 0x34
    9464:	8d 90       	ld	r8, X+
    9466:	9d 90       	ld	r9, X+
    9468:	ad 90       	ld	r10, X+
    946a:	bd 90       	ld	r11, X+
    946c:	bc ab       	std	Y+52, r27	; 0x34
    946e:	ab ab       	std	Y+51, r26	; 0x33
    9470:	84 14       	cp	r8, r4
    9472:	95 04       	cpc	r9, r5
    9474:	a6 04       	cpc	r10, r6
    9476:	b7 04       	cpc	r11, r7
    9478:	84 f0       	brlt	.+32     	; 0x949a <Calculate_PID+0x35a>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    947a:	00 27       	eor	r16, r16
    947c:	11 27       	eor	r17, r17
    947e:	98 01       	movw	r18, r16
    9480:	08 19       	sub	r16, r8
    9482:	19 09       	sbc	r17, r9
    9484:	2a 09       	sbc	r18, r10
    9486:	3b 09       	sbc	r19, r11
    9488:	53 01       	movw	r10, r6
    948a:	42 01       	movw	r8, r4
    948c:	40 16       	cp	r4, r16
    948e:	51 06       	cpc	r5, r17
    9490:	62 06       	cpc	r6, r18
    9492:	73 06       	cpc	r7, r19
    9494:	14 f4       	brge	.+4      	; 0x949a <Calculate_PID+0x35a>
    9496:	48 01       	movw	r8, r16
    9498:	59 01       	movw	r10, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    949a:	ab a5       	ldd	r26, Y+43	; 0x2b
    949c:	bc a5       	ldd	r27, Y+44	; 0x2c
    949e:	2d 91       	ld	r18, X+
    94a0:	3d 91       	ld	r19, X+
    94a2:	4d 91       	ld	r20, X+
    94a4:	5d 91       	ld	r21, X+
    94a6:	bc a7       	std	Y+44, r27	; 0x2c
    94a8:	ab a7       	std	Y+43, r26	; 0x2b
    94aa:	2b 8f       	std	Y+27, r18	; 0x1b
    94ac:	3c 8f       	std	Y+28, r19	; 0x1c
    94ae:	4d 8f       	std	Y+29, r20	; 0x1d
    94b0:	5e 8f       	std	Y+30, r21	; 0x1e
    94b2:	26 17       	cp	r18, r22
    94b4:	37 07       	cpc	r19, r23
    94b6:	48 07       	cpc	r20, r24
    94b8:	59 07       	cpc	r21, r25
    94ba:	b4 f0       	brlt	.+44     	; 0x94e8 <Calculate_PID+0x3a8>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    94bc:	89 01       	movw	r16, r18
    94be:	9a 01       	movw	r18, r20
    94c0:	30 95       	com	r19
    94c2:	20 95       	com	r18
    94c4:	10 95       	com	r17
    94c6:	01 95       	neg	r16
    94c8:	1f 4f       	sbci	r17, 0xFF	; 255
    94ca:	2f 4f       	sbci	r18, 0xFF	; 255
    94cc:	3f 4f       	sbci	r19, 0xFF	; 255
    94ce:	6b 8f       	std	Y+27, r22	; 0x1b
    94d0:	7c 8f       	std	Y+28, r23	; 0x1c
    94d2:	8d 8f       	std	Y+29, r24	; 0x1d
    94d4:	9e 8f       	std	Y+30, r25	; 0x1e
    94d6:	60 17       	cp	r22, r16
    94d8:	71 07       	cpc	r23, r17
    94da:	82 07       	cpc	r24, r18
    94dc:	93 07       	cpc	r25, r19
    94de:	24 f4       	brge	.+8      	; 0x94e8 <Calculate_PID+0x3a8>
    94e0:	0b 8f       	std	Y+27, r16	; 0x1b
    94e2:	1c 8f       	std	Y+28, r17	; 0x1c
    94e4:	2d 8f       	std	Y+29, r18	; 0x1d
    94e6:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE); // Currently PID_SCALE = 6 so /64
    94e8:	25 96       	adiw	r28, 0x05	; 5
    94ea:	4c ac       	ldd	r4, Y+60	; 0x3c
    94ec:	5d ac       	ldd	r5, Y+61	; 0x3d
    94ee:	6e ac       	ldd	r6, Y+62	; 0x3e
    94f0:	7f ac       	ldd	r7, Y+63	; 0x3f
    94f2:	25 97       	sbiw	r28, 0x05	; 5
    94f4:	48 0c       	add	r4, r8
    94f6:	59 1c       	adc	r5, r9
    94f8:	6a 1c       	adc	r6, r10
    94fa:	7b 1c       	adc	r7, r11
    94fc:	b6 e0       	ldi	r27, 0x06	; 6
    94fe:	75 94       	asr	r7
    9500:	67 94       	ror	r6
    9502:	57 94       	ror	r5
    9504:	47 94       	ror	r4
    9506:	ba 95       	dec	r27
    9508:	d1 f7       	brne	.-12     	; 0x94fe <Calculate_PID+0x3be>
    950a:	eb a1       	ldd	r30, Y+35	; 0x23
    950c:	fc a1       	ldd	r31, Y+36	; 0x24
    950e:	51 82       	std	Z+1, r5	; 0x01
    9510:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    9512:	29 96       	adiw	r28, 0x09	; 9
    9514:	8c ad       	ldd	r24, Y+60	; 0x3c
    9516:	9d ad       	ldd	r25, Y+61	; 0x3d
    9518:	ae ad       	ldd	r26, Y+62	; 0x3e
    951a:	bf ad       	ldd	r27, Y+63	; 0x3f
    951c:	29 97       	sbiw	r28, 0x09	; 9
    951e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9520:	3c 8d       	ldd	r19, Y+28	; 0x1c
    9522:	4d 8d       	ldd	r20, Y+29	; 0x1d
    9524:	5e 8d       	ldd	r21, Y+30	; 0x1e
    9526:	82 0f       	add	r24, r18
    9528:	93 1f       	adc	r25, r19
    952a:	a4 1f       	adc	r26, r20
    952c:	b5 1f       	adc	r27, r21
    952e:	16 e0       	ldi	r17, 0x06	; 6
    9530:	b5 95       	asr	r27
    9532:	a7 95       	ror	r26
    9534:	97 95       	ror	r25
    9536:	87 95       	ror	r24
    9538:	1a 95       	dec	r17
    953a:	d1 f7       	brne	.-12     	; 0x9530 <Calculate_PID+0x3f0>
    953c:	97 83       	std	Z+7, r25	; 0x07
    953e:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    9540:	2e 96       	adiw	r28, 0x0e	; 14
    9542:	ef ad       	ldd	r30, Y+63	; 0x3f
    9544:	2e 97       	sbiw	r28, 0x0e	; 14
    9546:	e2 30       	cpi	r30, 0x02	; 2
    9548:	d9 f1       	breq	.+118    	; 0x95c0 <Calculate_PID+0x480>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    954a:	af a1       	ldd	r26, Y+39	; 0x27
    954c:	b8 a5       	ldd	r27, Y+40	; 0x28
    954e:	4d 91       	ld	r20, X+
    9550:	5c 91       	ld	r21, X
    9552:	e9 a1       	ldd	r30, Y+33	; 0x21
    9554:	fa a1       	ldd	r31, Y+34	; 0x22
    9556:	80 81       	ld	r24, Z
    9558:	91 81       	ldd	r25, Z+1	; 0x01
    955a:	9a 01       	movw	r18, r20
    955c:	28 1b       	sub	r18, r24
    955e:	39 0b       	sbc	r19, r25
    9560:	e9 e0       	ldi	r30, 0x09	; 9
    9562:	f0 e0       	ldi	r31, 0x00	; 0
    9564:	ec 0f       	add	r30, r28
    9566:	fd 1f       	adc	r31, r29
    9568:	ee 0d       	add	r30, r14
    956a:	ff 1d       	adc	r31, r15
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    956c:	a0 81       	ld	r26, Z
    956e:	bb 27       	eor	r27, r27
    9570:	a7 fd       	sbrc	r26, 7
    9572:	b0 95       	com	r27
    9574:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    9578:	bb 27       	eor	r27, r27
    957a:	97 fd       	sbrc	r25, 7
    957c:	ba 95       	dec	r27
    957e:	a9 2f       	mov	r26, r25
    9580:	98 2f       	mov	r25, r24
    9582:	87 2f       	mov	r24, r23
    9584:	ef 8d       	ldd	r30, Y+31	; 0x1f
    9586:	f8 a1       	ldd	r31, Y+32	; 0x20
    9588:	91 83       	std	Z+1, r25	; 0x01
    958a:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    958c:	a9 a1       	ldd	r26, Y+33	; 0x21
    958e:	ba a1       	ldd	r27, Y+34	; 0x22
    9590:	14 96       	adiw	r26, 0x04	; 4
    9592:	8d 91       	ld	r24, X+
    9594:	9c 91       	ld	r25, X
    9596:	15 97       	sbiw	r26, 0x05	; 5
    9598:	9a 01       	movw	r18, r20
    959a:	28 1b       	sub	r18, r24
    959c:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    959e:	f1 01       	movw	r30, r2
    95a0:	a0 81       	ld	r26, Z
    95a2:	bb 27       	eor	r27, r27
    95a4:	a7 fd       	sbrc	r26, 7
    95a6:	b0 95       	com	r27
    95a8:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    95ac:	bb 27       	eor	r27, r27
    95ae:	97 fd       	sbrc	r25, 7
    95b0:	ba 95       	dec	r27
    95b2:	a9 2f       	mov	r26, r25
    95b4:	98 2f       	mov	r25, r24
    95b6:	87 2f       	mov	r24, r23
    95b8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    95ba:	f8 a1       	ldd	r31, Y+32	; 0x20
    95bc:	97 83       	std	Z+7, r25	; 0x07
    95be:	86 83       	std	Z+6, r24	; 0x06
    95c0:	ff ef       	ldi	r31, 0xFF	; 255
    95c2:	ef 1a       	sub	r14, r31
    95c4:	ff 0a       	sbc	r15, r31
    95c6:	2d a1       	ldd	r18, Y+37	; 0x25
    95c8:	3e a1       	ldd	r19, Y+38	; 0x26
    95ca:	2c 5f       	subi	r18, 0xFC	; 252
    95cc:	3f 4f       	sbci	r19, 0xFF	; 255
    95ce:	3e a3       	std	Y+38, r19	; 0x26
    95d0:	2d a3       	std	Y+37, r18	; 0x25
    95d2:	4b a1       	ldd	r20, Y+35	; 0x23
    95d4:	5c a1       	ldd	r21, Y+36	; 0x24
    95d6:	4e 5f       	subi	r20, 0xFE	; 254
    95d8:	5f 4f       	sbci	r21, 0xFF	; 255
    95da:	5c a3       	std	Y+36, r21	; 0x24
    95dc:	4b a3       	std	Y+35, r20	; 0x23
    95de:	8f a1       	ldd	r24, Y+39	; 0x27
    95e0:	98 a5       	ldd	r25, Y+40	; 0x28
    95e2:	02 96       	adiw	r24, 0x02	; 2
    95e4:	98 a7       	std	Y+40, r25	; 0x28
    95e6:	8f a3       	std	Y+39, r24	; 0x27
    95e8:	a9 a1       	ldd	r26, Y+33	; 0x21
    95ea:	ba a1       	ldd	r27, Y+34	; 0x22
    95ec:	12 96       	adiw	r26, 0x02	; 2
    95ee:	ba a3       	std	Y+34, r27	; 0x22
    95f0:	a9 a3       	std	Y+33, r26	; 0x21
    95f2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    95f4:	f8 a1       	ldd	r31, Y+32	; 0x20
    95f6:	32 96       	adiw	r30, 0x02	; 2
    95f8:	f8 a3       	std	Y+32, r31	; 0x20
    95fa:	ef 8f       	std	Y+31, r30	; 0x1f
    95fc:	ff ef       	ldi	r31, 0xFF	; 255
    95fe:	2f 1a       	sub	r2, r31
    9600:	3f 0a       	sbc	r3, r31
    9602:	24 e0       	ldi	r18, 0x04	; 4
    9604:	c2 0e       	add	r12, r18
    9606:	d1 1c       	adc	r13, r1

	//************************************************************
	// PID loop
	//************************************************************
	
	for (axis = 0; axis <= YAW; axis ++)
    9608:	33 e0       	ldi	r19, 0x03	; 3
    960a:	e3 16       	cp	r14, r19
    960c:	f1 04       	cpc	r15, r1
    960e:	09 f0       	breq	.+2      	; 0x9612 <Calculate_PID+0x4d2>
    9610:	7b ce       	rjmp	.-778    	; 0x9308 <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    9612:	2b 96       	adiw	r28, 0x0b	; 11
    9614:	ce ac       	ldd	r12, Y+62	; 0x3e
    9616:	df ac       	ldd	r13, Y+63	; 0x3f
    9618:	2b 97       	sbiw	r28, 0x0b	; 11
    961a:	d1 94       	neg	r13
    961c:	c1 94       	neg	r12
    961e:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    9620:	96 01       	movw	r18, r12
    9622:	4d a5       	ldd	r20, Y+45	; 0x2d
    9624:	a4 2f       	mov	r26, r20
    9626:	bb 27       	eor	r27, r27
    9628:	a7 fd       	sbrc	r26, 7
    962a:	b0 95       	com	r27
    962c:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    9630:	e4 e0       	ldi	r30, 0x04	; 4
    9632:	95 95       	asr	r25
    9634:	87 95       	ror	r24
    9636:	77 95       	ror	r23
    9638:	67 95       	ror	r22
    963a:	ea 95       	dec	r30
    963c:	d1 f7       	brne	.-12     	; 0x9632 <Calculate_PID+0x4f2>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    963e:	65 3f       	cpi	r22, 0xF5	; 245
    9640:	51 e0       	ldi	r21, 0x01	; 1
    9642:	75 07       	cpc	r23, r21
    9644:	81 05       	cpc	r24, r1
    9646:	91 05       	cpc	r25, r1
    9648:	64 f4       	brge	.+24     	; 0x9662 <Calculate_PID+0x522>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    964a:	6c 30       	cpi	r22, 0x0C	; 12
    964c:	ae ef       	ldi	r26, 0xFE	; 254
    964e:	7a 07       	cpc	r23, r26
    9650:	af ef       	ldi	r26, 0xFF	; 255
    9652:	8a 07       	cpc	r24, r26
    9654:	9a 07       	cpc	r25, r26
    9656:	4c f4       	brge	.+18     	; 0x966a <Calculate_PID+0x52a>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    9658:	6c e0       	ldi	r22, 0x0C	; 12
    965a:	7e ef       	ldi	r23, 0xFE	; 254
    965c:	8f ef       	ldi	r24, 0xFF	; 255
    965e:	9f ef       	ldi	r25, 0xFF	; 255
    9660:	04 c0       	rjmp	.+8      	; 0x966a <Calculate_PID+0x52a>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    9662:	64 ef       	ldi	r22, 0xF4	; 244
    9664:	71 e0       	ldi	r23, 0x01	; 1
    9666:	80 e0       	ldi	r24, 0x00	; 0
    9668:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    966a:	70 93 61 08 	sts	0x0861, r23
    966e:	60 93 60 08 	sts	0x0860, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    9672:	96 01       	movw	r18, r12
    9674:	ee a5       	ldd	r30, Y+46	; 0x2e
    9676:	ae 2f       	mov	r26, r30
    9678:	bb 27       	eor	r27, r27
    967a:	a7 fd       	sbrc	r26, 7
    967c:	b0 95       	com	r27
    967e:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    9682:	54 e0       	ldi	r21, 0x04	; 4
    9684:	95 95       	asr	r25
    9686:	87 95       	ror	r24
    9688:	77 95       	ror	r23
    968a:	67 95       	ror	r22
    968c:	5a 95       	dec	r21
    968e:	d1 f7       	brne	.-12     	; 0x9684 <Calculate_PID+0x544>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    9690:	65 3f       	cpi	r22, 0xF5	; 245
    9692:	f1 e0       	ldi	r31, 0x01	; 1
    9694:	7f 07       	cpc	r23, r31
    9696:	81 05       	cpc	r24, r1
    9698:	91 05       	cpc	r25, r1
    969a:	64 f4       	brge	.+24     	; 0x96b4 <Calculate_PID+0x574>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    969c:	6c 30       	cpi	r22, 0x0C	; 12
    969e:	2e ef       	ldi	r18, 0xFE	; 254
    96a0:	72 07       	cpc	r23, r18
    96a2:	2f ef       	ldi	r18, 0xFF	; 255
    96a4:	82 07       	cpc	r24, r18
    96a6:	92 07       	cpc	r25, r18
    96a8:	4c f4       	brge	.+18     	; 0x96bc <Calculate_PID+0x57c>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    96aa:	6c e0       	ldi	r22, 0x0C	; 12
    96ac:	7e ef       	ldi	r23, 0xFE	; 254
    96ae:	8f ef       	ldi	r24, 0xFF	; 255
    96b0:	9f ef       	ldi	r25, 0xFF	; 255
    96b2:	04 c0       	rjmp	.+8      	; 0x96bc <Calculate_PID+0x57c>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    96b4:	64 ef       	ldi	r22, 0xF4	; 244
    96b6:	71 e0       	ldi	r23, 0x01	; 1
    96b8:	80 e0       	ldi	r24, 0x00	; 0
    96ba:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    96bc:	70 93 67 08 	sts	0x0867, r23
    96c0:	60 93 66 08 	sts	0x0866, r22
	}
}
    96c4:	c3 5b       	subi	r28, 0xB3	; 179
    96c6:	df 4f       	sbci	r29, 0xFF	; 255
    96c8:	0f b6       	in	r0, 0x3f	; 63
    96ca:	f8 94       	cli
    96cc:	de bf       	out	0x3e, r29	; 62
    96ce:	0f be       	out	0x3f, r0	; 63
    96d0:	cd bf       	out	0x3d, r28	; 61
    96d2:	df 91       	pop	r29
    96d4:	cf 91       	pop	r28
    96d6:	1f 91       	pop	r17
    96d8:	0f 91       	pop	r16
    96da:	ff 90       	pop	r15
    96dc:	ef 90       	pop	r14
    96de:	df 90       	pop	r13
    96e0:	cf 90       	pop	r12
    96e2:	bf 90       	pop	r11
    96e4:	af 90       	pop	r10
    96e6:	9f 90       	pop	r9
    96e8:	8f 90       	pop	r8
    96ea:	7f 90       	pop	r7
    96ec:	6f 90       	pop	r6
    96ee:	5f 90       	pop	r5
    96f0:	4f 90       	pop	r4
    96f2:	3f 90       	pop	r3
    96f4:	2f 90       	pop	r2
    96f6:	08 95       	ret

000096f8 <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    96f8:	e7 ea       	ldi	r30, 0xA7	; 167
    96fa:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    96fc:	80 e0       	ldi	r24, 0x00	; 0
    96fe:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    9700:	ac 01       	movw	r20, r24
    9702:	44 0f       	add	r20, r20
    9704:	55 1f       	adc	r21, r21
    9706:	da 01       	movw	r26, r20
    9708:	a3 51       	subi	r26, 0x13	; 19
    970a:	b8 4f       	sbci	r27, 0xF8	; 248
    970c:	2d 91       	ld	r18, X+
    970e:	3c 91       	ld	r19, X
    9710:	61 91       	ld	r22, Z+
    9712:	71 91       	ld	r23, Z+
    9714:	26 1b       	sub	r18, r22
    9716:	37 0b       	sbc	r19, r23
    9718:	da 01       	movw	r26, r20
    971a:	aa 58       	subi	r26, 0x8A	; 138
    971c:	b7 4f       	sbci	r27, 0xF7	; 247
    971e:	11 96       	adiw	r26, 0x01	; 1
    9720:	3c 93       	st	X, r19
    9722:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    9724:	01 96       	adiw	r24, 0x01	; 1
    9726:	88 30       	cpi	r24, 0x08	; 8
    9728:	91 05       	cpc	r25, r1
    972a:	51 f7       	brne	.-44     	; 0x9700 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    972c:	80 91 ed 07 	lds	r24, 0x07ED
    9730:	90 91 ee 07 	lds	r25, 0x07EE
    9734:	20 91 a7 07 	lds	r18, 0x07A7
    9738:	30 91 a8 07 	lds	r19, 0x07A8
    973c:	82 1b       	sub	r24, r18
    973e:	93 0b       	sbc	r25, r19
    9740:	90 93 75 08 	sts	0x0875, r25
    9744:	80 93 74 08 	sts	0x0874, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    9748:	80 91 ed 07 	lds	r24, 0x07ED
    974c:	90 91 ee 07 	lds	r25, 0x07EE
    9750:	86 5a       	subi	r24, 0xA6	; 166
    9752:	9e 40       	sbci	r25, 0x0E	; 14
    9754:	90 93 77 08 	sts	0x0877, r25
    9758:	80 93 76 08 	sts	0x0876, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    975c:	80 91 d6 07 	lds	r24, 0x07D6
    9760:	81 30       	cpi	r24, 0x01	; 1
    9762:	59 f4       	brne	.+22     	; 0x977a <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    9764:	80 91 78 08 	lds	r24, 0x0878
    9768:	90 91 79 08 	lds	r25, 0x0879
    976c:	91 95       	neg	r25
    976e:	81 95       	neg	r24
    9770:	91 09       	sbc	r25, r1
    9772:	90 93 79 08 	sts	0x0879, r25
    9776:	80 93 78 08 	sts	0x0878, r24
	}

	if (Config.ElevatorPol == REVERSED)
    977a:	80 91 fe 05 	lds	r24, 0x05FE
    977e:	81 30       	cpi	r24, 0x01	; 1
    9780:	59 f4       	brne	.+22     	; 0x9798 <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    9782:	80 91 7a 08 	lds	r24, 0x087A
    9786:	90 91 7b 08 	lds	r25, 0x087B
    978a:	91 95       	neg	r25
    978c:	81 95       	neg	r24
    978e:	91 09       	sbc	r25, r1
    9790:	90 93 7b 08 	sts	0x087B, r25
    9794:	80 93 7a 08 	sts	0x087A, r24
	}

	if (Config.RudderPol == REVERSED)
    9798:	80 91 d5 07 	lds	r24, 0x07D5
    979c:	81 30       	cpi	r24, 0x01	; 1
    979e:	59 f4       	brne	.+22     	; 0x97b6 <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    97a0:	80 91 7c 08 	lds	r24, 0x087C
    97a4:	90 91 7d 08 	lds	r25, 0x087D
    97a8:	91 95       	neg	r25
    97aa:	81 95       	neg	r24
    97ac:	91 09       	sbc	r25, r1
    97ae:	90 93 7d 08 	sts	0x087D, r25
    97b2:	80 93 7c 08 	sts	0x087C, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    97b6:	80 91 78 08 	lds	r24, 0x0878
    97ba:	90 91 79 08 	lds	r25, 0x0879
    97be:	40 91 7a 08 	lds	r20, 0x087A
    97c2:	50 91 7b 08 	lds	r21, 0x087B
    97c6:	20 91 7c 08 	lds	r18, 0x087C
    97ca:	30 91 7d 08 	lds	r19, 0x087D
    97ce:	84 0f       	add	r24, r20
    97d0:	95 1f       	adc	r25, r21
    97d2:	82 0f       	add	r24, r18
    97d4:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    97d6:	20 91 3c 05 	lds	r18, 0x053C
    97da:	30 91 3d 05 	lds	r19, 0x053D
    97de:	ac 01       	movw	r20, r24
    97e0:	42 1b       	sub	r20, r18
    97e2:	53 0b       	sbc	r21, r19
    97e4:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    97e6:	2b 5f       	subi	r18, 0xFB	; 251
    97e8:	3f 4f       	sbci	r19, 0xFF	; 255
    97ea:	2b 30       	cpi	r18, 0x0B	; 11
    97ec:	31 05       	cpc	r19, r1
    97ee:	38 f4       	brcc	.+14     	; 0x97fe <RxGetChannels+0x106>
    97f0:	20 91 74 08 	lds	r18, 0x0874
    97f4:	30 91 75 08 	lds	r19, 0x0875
    97f8:	23 33       	cpi	r18, 0x33	; 51
    97fa:	31 05       	cpc	r19, r1
    97fc:	24 f0       	brlt	.+8      	; 0x9806 <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    97fe:	20 91 1f 05 	lds	r18, 0x051F
    9802:	21 60       	ori	r18, 0x01	; 1
    9804:	03 c0       	rjmp	.+6      	; 0x980c <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    9806:	20 91 1f 05 	lds	r18, 0x051F
    980a:	2e 7f       	andi	r18, 0xFE	; 254
    980c:	20 93 1f 05 	sts	0x051F, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    9810:	10 92 87 08 	sts	0x0887, r1
    9814:	10 92 86 08 	sts	0x0886, r1

	OldRxSum = RxSum;
    9818:	90 93 3d 05 	sts	0x053D, r25
    981c:	80 93 3c 05 	sts	0x053C, r24
    9820:	08 95       	ret

00009822 <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    9822:	0f 93       	push	r16
    9824:	1f 93       	push	r17
    9826:	cf 93       	push	r28
    9828:	df 93       	push	r29
    982a:	cd b7       	in	r28, 0x3d	; 61
    982c:	de b7       	in	r29, 0x3e	; 62
    982e:	60 97       	sbiw	r28, 0x10	; 16
    9830:	0f b6       	in	r0, 0x3f	; 63
    9832:	f8 94       	cli
    9834:	de bf       	out	0x3e, r29	; 62
    9836:	0f be       	out	0x3f, r0	; 63
    9838:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    983a:	8e 01       	movw	r16, r28
    983c:	0f 5f       	subi	r16, 0xFF	; 255
    983e:	1f 4f       	sbci	r17, 0xFF	; 255
    9840:	80 e1       	ldi	r24, 0x10	; 16
    9842:	d8 01       	movw	r26, r16
    9844:	1d 92       	st	X+, r1
    9846:	8a 95       	dec	r24
    9848:	e9 f7       	brne	.-6      	; 0x9844 <CenterSticks+0x22>
    984a:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    984c:	d8 01       	movw	r26, r16
    984e:	80 e0       	ldi	r24, 0x00	; 0
    9850:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    9852:	9c 01       	movw	r18, r24
    9854:	22 0f       	add	r18, r18
    9856:	33 1f       	adc	r19, r19
    9858:	23 51       	subi	r18, 0x13	; 19
    985a:	38 4f       	sbci	r19, 0xF8	; 248
    985c:	f9 01       	movw	r30, r18
    985e:	40 81       	ld	r20, Z
    9860:	51 81       	ldd	r21, Z+1	; 0x01
    9862:	2d 91       	ld	r18, X+
    9864:	3c 91       	ld	r19, X
    9866:	11 97       	sbiw	r26, 0x01	; 1
    9868:	24 0f       	add	r18, r20
    986a:	35 1f       	adc	r19, r21
    986c:	2d 93       	st	X+, r18
    986e:	3d 93       	st	X+, r19
    9870:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    9872:	88 30       	cpi	r24, 0x08	; 8
    9874:	91 05       	cpc	r25, r1
    9876:	69 f7       	brne	.-38     	; 0x9852 <CenterSticks+0x30>
    9878:	ff e7       	ldi	r31, 0x7F	; 127
    987a:	2a e1       	ldi	r18, 0x1A	; 26
    987c:	86 e0       	ldi	r24, 0x06	; 6
    987e:	f1 50       	subi	r31, 0x01	; 1
    9880:	20 40       	sbci	r18, 0x00	; 0
    9882:	80 40       	sbci	r24, 0x00	; 0
    9884:	e1 f7       	brne	.-8      	; 0x987e <CenterSticks+0x5c>
    9886:	00 c0       	rjmp	.+0      	; 0x9888 <CenterSticks+0x66>
    9888:	00 00       	nop
    988a:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    988c:	f9 f6       	brne	.-66     	; 0x984c <CenterSticks+0x2a>
    988e:	a7 ea       	ldi	r26, 0xA7	; 167
    9890:	b7 e0       	ldi	r27, 0x07	; 7
    9892:	9e 01       	movw	r18, r28
    9894:	2f 5e       	subi	r18, 0xEF	; 239
    9896:	3f 4f       	sbci	r19, 0xFF	; 255
    9898:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    989a:	81 91       	ld	r24, Z+
    989c:	91 91       	ld	r25, Z+
    989e:	04 96       	adiw	r24, 0x04	; 4
    98a0:	43 e0       	ldi	r20, 0x03	; 3
    98a2:	96 95       	lsr	r25
    98a4:	87 95       	ror	r24
    98a6:	4a 95       	dec	r20
    98a8:	e1 f7       	brne	.-8      	; 0x98a2 <CenterSticks+0x80>
    98aa:	8d 93       	st	X+, r24
    98ac:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    98ae:	e2 17       	cp	r30, r18
    98b0:	f3 07       	cpc	r31, r19
    98b2:	99 f7       	brne	.-26     	; 0x989a <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    98b4:	60 96       	adiw	r28, 0x10	; 16
    98b6:	0f b6       	in	r0, 0x3f	; 63
    98b8:	f8 94       	cli
    98ba:	de bf       	out	0x3e, r29	; 62
    98bc:	0f be       	out	0x3f, r0	; 63
    98be:	cd bf       	out	0x3d, r28	; 61
    98c0:	df 91       	pop	r29
    98c2:	cf 91       	pop	r28
    98c4:	1f 91       	pop	r17
    98c6:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    98c8:	0c 94 be 19 	jmp	0x337c	; 0x337c <Save_Config_to_EEPROM>

000098cc <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    98cc:	8f 92       	push	r8
    98ce:	9f 92       	push	r9
    98d0:	af 92       	push	r10
    98d2:	bf 92       	push	r11
    98d4:	df 92       	push	r13
    98d6:	ef 92       	push	r14
    98d8:	ff 92       	push	r15
    98da:	0f 93       	push	r16
    98dc:	1f 93       	push	r17
    98de:	cf 93       	push	r28
    98e0:	df 93       	push	r29
    98e2:	d8 2e       	mov	r13, r24
    98e4:	03 e6       	ldi	r16, 0x63	; 99
    98e6:	16 e0       	ldi	r17, 0x06	; 6
    98e8:	c0 e0       	ldi	r28, 0x00	; 0
    98ea:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    98ec:	ea e0       	ldi	r30, 0x0A	; 10
    98ee:	8e 2e       	mov	r8, r30
    98f0:	91 2c       	mov	r9, r1
    98f2:	a1 2c       	mov	r10, r1
    98f4:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    98f6:	7e 01       	movw	r14, r28
    98f8:	ee 0c       	add	r14, r14
    98fa:	ff 1c       	adc	r15, r15
    98fc:	f7 01       	movw	r30, r14
    98fe:	e8 57       	subi	r30, 0x78	; 120
    9900:	f7 4f       	sbci	r31, 0xF7	; 247
    9902:	20 81       	ld	r18, Z
    9904:	31 81       	ldd	r19, Z+1	; 0x01
    9906:	a9 01       	movw	r20, r18
    9908:	60 e0       	ldi	r22, 0x00	; 0
    990a:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    990c:	f8 01       	movw	r30, r16
    990e:	80 81       	ld	r24, Z
    9910:	82 30       	cpi	r24, 0x02	; 2
    9912:	79 f0       	breq	.+30     	; 0x9932 <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    9914:	9a 01       	movw	r18, r20
    9916:	ab 01       	movw	r20, r22
    9918:	26 5a       	subi	r18, 0xA6	; 166
    991a:	3e 40       	sbci	r19, 0x0E	; 14
    991c:	41 09       	sbc	r20, r1
    991e:	51 09       	sbc	r21, r1
    9920:	56 95       	lsr	r21
    9922:	47 95       	ror	r20
    9924:	37 95       	ror	r19
    9926:	27 95       	ror	r18
    9928:	24 52       	subi	r18, 0x24	; 36
    992a:	3a 4f       	sbci	r19, 0xFA	; 250
    992c:	4f 4f       	sbci	r20, 0xFF	; 255
    992e:	5f 4f       	sbci	r21, 0xFF	; 255
    9930:	11 c0       	rjmp	.+34     	; 0x9954 <output_servo_ppm+0x88>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    9932:	cb 01       	movw	r24, r22
    9934:	ba 01       	movw	r22, r20
    9936:	52 e0       	ldi	r21, 0x02	; 2
    9938:	66 0f       	add	r22, r22
    993a:	77 1f       	adc	r23, r23
    993c:	88 1f       	adc	r24, r24
    993e:	99 1f       	adc	r25, r25
    9940:	5a 95       	dec	r21
    9942:	d1 f7       	brne	.-12     	; 0x9938 <output_servo_ppm+0x6c>
    9944:	6b 5f       	subi	r22, 0xFB	; 251
    9946:	7f 4f       	sbci	r23, 0xFF	; 255
    9948:	8f 4f       	sbci	r24, 0xFF	; 255
    994a:	9f 4f       	sbci	r25, 0xFF	; 255
    994c:	a5 01       	movw	r20, r10
    994e:	94 01       	movw	r18, r8
    9950:	0e 94 b3 50 	call	0xa166	; 0xa166 <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    9954:	f7 01       	movw	r30, r14
    9956:	e8 57       	subi	r30, 0x78	; 120
    9958:	f7 4f       	sbci	r31, 0xF7	; 247
    995a:	31 83       	std	Z+1, r19	; 0x01
    995c:	20 83       	st	Z, r18
    995e:	21 96       	adiw	r28, 0x01	; 1
    9960:	0a 5d       	subi	r16, 0xDA	; 218
    9962:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    9964:	c8 30       	cpi	r28, 0x08	; 8
    9966:	d1 05       	cpc	r29, r1
    9968:	31 f6       	brne	.-116    	; 0x98f6 <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    996a:	80 91 ed 07 	lds	r24, 0x07ED
    996e:	90 91 ee 07 	lds	r25, 0x07EE
    9972:	20 91 a7 07 	lds	r18, 0x07A7
    9976:	30 91 a8 07 	lds	r19, 0x07A8
    997a:	82 1b       	sub	r24, r18
    997c:	93 0b       	sbc	r25, r19
    997e:	90 93 75 08 	sts	0x0875, r25
    9982:	80 93 74 08 	sts	0x0874, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    9986:	80 91 74 08 	lds	r24, 0x0874
    998a:	90 91 75 08 	lds	r25, 0x0875
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    998e:	c2 97       	sbiw	r24, 0x32	; 50
    9990:	ac f0       	brlt	.+42     	; 0x99bc <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			(General_error & (1 << DISARMED))
    9992:	80 91 20 05 	lds	r24, 0x0520
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    9996:	82 fd       	sbrc	r24, 2
    9998:	11 c0       	rjmp	.+34     	; 0x99bc <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    999a:	80 91 20 05 	lds	r24, 0x0520
    999e:	80 fd       	sbrc	r24, 0
    99a0:	24 c0       	rjmp	.+72     	; 0x99ea <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    99a2:	10 92 18 08 	sts	0x0818, r1
	
		// We now care about interrupts
		JitterGate = true;
    99a6:	81 e0       	ldi	r24, 0x01	; 1
    99a8:	80 93 17 08 	sts	0x0817, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    99ac:	6d 2d       	mov	r22, r13
    99ae:	88 e8       	ldi	r24, 0x88	; 136
    99b0:	98 e0       	ldi	r25, 0x08	; 8
    99b2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    99b6:	10 92 17 08 	sts	0x0817, r1
    99ba:	17 c0       	rjmp	.+46     	; 0x99ea <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    99bc:	e3 e6       	ldi	r30, 0x63	; 99
    99be:	f6 e0       	ldi	r31, 0x06	; 6
    99c0:	80 e0       	ldi	r24, 0x00	; 0
    99c2:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    99c4:	28 ee       	ldi	r18, 0xE8	; 232
    99c6:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    99c8:	40 81       	ld	r20, Z
    99ca:	42 30       	cpi	r20, 0x02	; 2
    99cc:	41 f4       	brne	.+16     	; 0x99de <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    99ce:	dc 01       	movw	r26, r24
    99d0:	aa 0f       	add	r26, r26
    99d2:	bb 1f       	adc	r27, r27
    99d4:	a8 57       	subi	r26, 0x78	; 120
    99d6:	b7 4f       	sbci	r27, 0xF7	; 247
    99d8:	11 96       	adiw	r26, 0x01	; 1
    99da:	3c 93       	st	X, r19
    99dc:	2e 93       	st	-X, r18
    99de:	01 96       	adiw	r24, 0x01	; 1
    99e0:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			(General_error & (1 << DISARMED))
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    99e2:	88 30       	cpi	r24, 0x08	; 8
    99e4:	91 05       	cpc	r25, r1
    99e6:	81 f7       	brne	.-32     	; 0x99c8 <output_servo_ppm+0xfc>
    99e8:	d8 cf       	rjmp	.-80     	; 0x999a <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    99ea:	df 91       	pop	r29
    99ec:	cf 91       	pop	r28
    99ee:	1f 91       	pop	r17
    99f0:	0f 91       	pop	r16
    99f2:	ff 90       	pop	r15
    99f4:	ef 90       	pop	r14
    99f6:	df 90       	pop	r13
    99f8:	bf 90       	pop	r11
    99fa:	af 90       	pop	r10
    99fc:	9f 90       	pop	r9
    99fe:	8f 90       	pop	r8
    9a00:	08 95       	ret

00009a02 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    9a02:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    9a06:	81 e1       	ldi	r24, 0x11	; 17
    9a08:	80 93 b8 00 	sts	0x00B8, r24
    9a0c:	08 95       	ret

00009a0e <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9a0e:	94 ea       	ldi	r25, 0xA4	; 164
    9a10:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    9a14:	4f ef       	ldi	r20, 0xFF	; 255
    9a16:	50 e0       	ldi	r21, 0x00	; 0
    9a18:	60 e0       	ldi	r22, 0x00	; 0
    9a1a:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9a1c:	90 91 bc 00 	lds	r25, 0x00BC
    9a20:	97 fd       	sbrc	r25, 7
    9a22:	06 c0       	rjmp	.+12     	; 0x9a30 <i2c_start+0x22>
    9a24:	41 50       	subi	r20, 0x01	; 1
    9a26:	51 09       	sbc	r21, r1
    9a28:	61 09       	sbc	r22, r1
    9a2a:	71 09       	sbc	r23, r1
    9a2c:	b8 f7       	brcc	.-18     	; 0x9a1c <i2c_start+0xe>
    9a2e:	06 c0       	rjmp	.+12     	; 0x9a3c <i2c_start+0x2e>
	if(i2c_timer == 0)
    9a30:	45 2b       	or	r20, r21
    9a32:	46 2b       	or	r20, r22
    9a34:	47 2b       	or	r20, r23
    9a36:	11 f4       	brne	.+4      	; 0x9a3c <i2c_start+0x2e>
		return 1;
    9a38:	81 e0       	ldi	r24, 0x01	; 1
    9a3a:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    9a3c:	90 91 b9 00 	lds	r25, 0x00B9
    9a40:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    9a42:	98 30       	cpi	r25, 0x08	; 8
    9a44:	11 f0       	breq	.+4      	; 0x9a4a <i2c_start+0x3c>
    9a46:	90 31       	cpi	r25, 0x10	; 16
    9a48:	b9 f7       	brne	.-18     	; 0x9a38 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    9a4a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    9a4e:	84 e8       	ldi	r24, 0x84	; 132
    9a50:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    9a54:	8f ef       	ldi	r24, 0xFF	; 255
    9a56:	90 e0       	ldi	r25, 0x00	; 0
    9a58:	a0 e0       	ldi	r26, 0x00	; 0
    9a5a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9a5c:	20 91 bc 00 	lds	r18, 0x00BC
    9a60:	27 fd       	sbrc	r18, 7
    9a62:	05 c0       	rjmp	.+10     	; 0x9a6e <i2c_start+0x60>
    9a64:	01 97       	sbiw	r24, 0x01	; 1
    9a66:	a1 09       	sbc	r26, r1
    9a68:	b1 09       	sbc	r27, r1
    9a6a:	c0 f7       	brcc	.-16     	; 0x9a5c <i2c_start+0x4e>
    9a6c:	04 c0       	rjmp	.+8      	; 0x9a76 <i2c_start+0x68>
	if(i2c_timer == 0)
    9a6e:	89 2b       	or	r24, r25
    9a70:	8a 2b       	or	r24, r26
    9a72:	8b 2b       	or	r24, r27
    9a74:	09 f3       	breq	.-62     	; 0x9a38 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    9a76:	80 91 b9 00 	lds	r24, 0x00B9
    9a7a:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    9a7c:	88 31       	cpi	r24, 0x18	; 24
    9a7e:	11 f0       	breq	.+4      	; 0x9a84 <i2c_start+0x76>
    9a80:	80 34       	cpi	r24, 0x40	; 64
    9a82:	d1 f6       	brne	.-76     	; 0x9a38 <i2c_start+0x2a>

	return 0;
    9a84:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    9a86:	08 95       	ret

00009a88 <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9a88:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    9a8a:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9a8c:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9a8e:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9a92:	20 e0       	ldi	r18, 0x00	; 0
    9a94:	30 e0       	ldi	r19, 0x00	; 0
    9a96:	90 91 bc 00 	lds	r25, 0x00BC
    9a9a:	97 fd       	sbrc	r25, 7
    9a9c:	06 c0       	rjmp	.+12     	; 0x9aaa <i2c_start_wait+0x22>
    9a9e:	2f 5f       	subi	r18, 0xFF	; 255
    9aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    9aa2:	21 15       	cp	r18, r1
    9aa4:	91 e0       	ldi	r25, 0x01	; 1
    9aa6:	39 07       	cpc	r19, r25
    9aa8:	b1 f7       	brne	.-20     	; 0x9a96 <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    9aaa:	90 91 b9 00 	lds	r25, 0x00B9
    9aae:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    9ab0:	98 30       	cpi	r25, 0x08	; 8
    9ab2:	11 f0       	breq	.+4      	; 0x9ab8 <i2c_start_wait+0x30>
    9ab4:	90 31       	cpi	r25, 0x10	; 16
    9ab6:	59 f7       	brne	.-42     	; 0x9a8e <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    9ab8:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    9abc:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9ac0:	20 e0       	ldi	r18, 0x00	; 0
    9ac2:	30 e0       	ldi	r19, 0x00	; 0
    9ac4:	90 91 bc 00 	lds	r25, 0x00BC
    9ac8:	97 fd       	sbrc	r25, 7
    9aca:	06 c0       	rjmp	.+12     	; 0x9ad8 <i2c_start_wait+0x50>
    9acc:	2f 5f       	subi	r18, 0xFF	; 255
    9ace:	3f 4f       	sbci	r19, 0xFF	; 255
    9ad0:	21 15       	cp	r18, r1
    9ad2:	91 e0       	ldi	r25, 0x01	; 1
    9ad4:	39 07       	cpc	r19, r25
    9ad6:	b1 f7       	brne	.-20     	; 0x9ac4 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    9ad8:	90 91 b9 00 	lds	r25, 0x00B9
    9adc:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    9ade:	90 32       	cpi	r25, 0x20	; 32
    9ae0:	11 f0       	breq	.+4      	; 0x9ae6 <i2c_start_wait+0x5e>
    9ae2:	98 35       	cpi	r25, 0x58	; 88
    9ae4:	79 f4       	brne	.+30     	; 0x9b04 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9ae6:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    9aea:	20 e0       	ldi	r18, 0x00	; 0
    9aec:	30 e0       	ldi	r19, 0x00	; 0
    9aee:	90 91 bc 00 	lds	r25, 0x00BC
    9af2:	94 ff       	sbrs	r25, 4
    9af4:	cc cf       	rjmp	.-104    	; 0x9a8e <i2c_start_wait+0x6>
    9af6:	2f 5f       	subi	r18, 0xFF	; 255
    9af8:	3f 4f       	sbci	r19, 0xFF	; 255
    9afa:	21 15       	cp	r18, r1
    9afc:	91 e0       	ldi	r25, 0x01	; 1
    9afe:	39 07       	cpc	r19, r25
    9b00:	b1 f7       	brne	.-20     	; 0x9aee <i2c_start_wait+0x66>
    9b02:	c5 cf       	rjmp	.-118    	; 0x9a8e <i2c_start_wait+0x6>
    9b04:	08 95       	ret

00009b06 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    9b06:	0c 94 07 4d 	jmp	0x9a0e	; 0x9a0e <i2c_start>

00009b0a <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9b0a:	84 e9       	ldi	r24, 0x94	; 148
    9b0c:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    9b10:	80 e0       	ldi	r24, 0x00	; 0
    9b12:	90 e0       	ldi	r25, 0x00	; 0
    9b14:	20 91 bc 00 	lds	r18, 0x00BC
    9b18:	24 ff       	sbrs	r18, 4
    9b1a:	05 c0       	rjmp	.+10     	; 0x9b26 <i2c_stop+0x1c>
    9b1c:	01 96       	adiw	r24, 0x01	; 1
    9b1e:	81 15       	cp	r24, r1
    9b20:	21 e0       	ldi	r18, 0x01	; 1
    9b22:	92 07       	cpc	r25, r18
    9b24:	b9 f7       	brne	.-18     	; 0x9b14 <i2c_stop+0xa>
    9b26:	08 95       	ret

00009b28 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    9b28:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    9b2c:	84 e8       	ldi	r24, 0x84	; 132
    9b2e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    9b32:	8f ef       	ldi	r24, 0xFF	; 255
    9b34:	90 e0       	ldi	r25, 0x00	; 0
    9b36:	a0 e0       	ldi	r26, 0x00	; 0
    9b38:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9b3a:	20 91 bc 00 	lds	r18, 0x00BC
    9b3e:	27 fd       	sbrc	r18, 7
    9b40:	05 c0       	rjmp	.+10     	; 0x9b4c <i2c_write+0x24>
    9b42:	01 97       	sbiw	r24, 0x01	; 1
    9b44:	a1 09       	sbc	r26, r1
    9b46:	b1 09       	sbc	r27, r1
    9b48:	c0 f7       	brcc	.-16     	; 0x9b3a <i2c_write+0x12>
    9b4a:	04 c0       	rjmp	.+8      	; 0x9b54 <i2c_write+0x2c>
	if(i2c_timer == 0)
    9b4c:	89 2b       	or	r24, r25
    9b4e:	8a 2b       	or	r24, r26
    9b50:	8b 2b       	or	r24, r27
    9b52:	41 f0       	breq	.+16     	; 0x9b64 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    9b54:	90 91 b9 00 	lds	r25, 0x00B9
    9b58:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    9b5a:	81 e0       	ldi	r24, 0x01	; 1
    9b5c:	98 32       	cpi	r25, 0x28	; 40
    9b5e:	19 f4       	brne	.+6      	; 0x9b66 <i2c_write+0x3e>
    9b60:	80 e0       	ldi	r24, 0x00	; 0
    9b62:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    9b64:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    9b66:	08 95       	ret

00009b68 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    9b68:	84 ec       	ldi	r24, 0xC4	; 196
    9b6a:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    9b6e:	8f ef       	ldi	r24, 0xFF	; 255
    9b70:	90 e0       	ldi	r25, 0x00	; 0
    9b72:	a0 e0       	ldi	r26, 0x00	; 0
    9b74:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9b76:	20 91 bc 00 	lds	r18, 0x00BC
    9b7a:	27 fd       	sbrc	r18, 7
    9b7c:	05 c0       	rjmp	.+10     	; 0x9b88 <i2c_readAck+0x20>
    9b7e:	01 97       	sbiw	r24, 0x01	; 1
    9b80:	a1 09       	sbc	r26, r1
    9b82:	b1 09       	sbc	r27, r1
    9b84:	c0 f7       	brcc	.-16     	; 0x9b76 <i2c_readAck+0xe>
    9b86:	04 c0       	rjmp	.+8      	; 0x9b90 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    9b88:	89 2b       	or	r24, r25
    9b8a:	8a 2b       	or	r24, r26
    9b8c:	8b 2b       	or	r24, r27
    9b8e:	19 f0       	breq	.+6      	; 0x9b96 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    9b90:	80 91 bb 00 	lds	r24, 0x00BB
    9b94:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    9b96:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    9b98:	08 95       	ret

00009b9a <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    9b9a:	84 e8       	ldi	r24, 0x84	; 132
    9b9c:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    9ba0:	8f ef       	ldi	r24, 0xFF	; 255
    9ba2:	90 e0       	ldi	r25, 0x00	; 0
    9ba4:	a0 e0       	ldi	r26, 0x00	; 0
    9ba6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9ba8:	20 91 bc 00 	lds	r18, 0x00BC
    9bac:	27 fd       	sbrc	r18, 7
    9bae:	05 c0       	rjmp	.+10     	; 0x9bba <i2c_readNak+0x20>
    9bb0:	01 97       	sbiw	r24, 0x01	; 1
    9bb2:	a1 09       	sbc	r26, r1
    9bb4:	b1 09       	sbc	r27, r1
    9bb6:	c0 f7       	brcc	.-16     	; 0x9ba8 <i2c_readNak+0xe>
    9bb8:	04 c0       	rjmp	.+8      	; 0x9bc2 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    9bba:	89 2b       	or	r24, r25
    9bbc:	8a 2b       	or	r24, r26
    9bbe:	8b 2b       	or	r24, r27
    9bc0:	19 f0       	breq	.+6      	; 0x9bc8 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    9bc2:	80 91 bb 00 	lds	r24, 0x00BB
    9bc6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    9bc8:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    9bca:	08 95       	ret

00009bcc <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    9bcc:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    9bce:	80 91 c1 00 	lds	r24, 0x00C1
    9bd2:	8f 77       	andi	r24, 0x7F	; 127
    9bd4:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    9bd8:	80 91 c0 00 	lds	r24, 0x00C0
    9bdc:	87 ff       	sbrs	r24, 7
    9bde:	05 c0       	rjmp	.+10     	; 0x9bea <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    9be0:	80 91 c6 00 	lds	r24, 0x00C6
    9be4:	80 93 c2 00 	sts	0x00C2, r24
    9be8:	f7 cf       	rjmp	.-18     	; 0x9bd8 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    9bea:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    9bee:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    9bf2:	86 e0       	ldi	r24, 0x06	; 6
    9bf4:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    9bf8:	80 91 f6 05 	lds	r24, 0x05F6
    9bfc:	82 30       	cpi	r24, 0x02	; 2
    9bfe:	a1 f0       	breq	.+40     	; 0x9c28 <init_uart+0x5c>
    9c00:	34 f4       	brge	.+12     	; 0x9c0e <init_uart+0x42>
    9c02:	87 fd       	sbrc	r24, 7
    9c04:	4c c0       	rjmp	.+152    	; 0x9c9e <init_uart+0xd2>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    9c06:	80 91 c1 00 	lds	r24, 0x00C1
    9c0a:	8f 7e       	andi	r24, 0xEF	; 239
    9c0c:	46 c0       	rjmp	.+140    	; 0x9c9a <init_uart+0xce>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    9c0e:	83 30       	cpi	r24, 0x03	; 3
    9c10:	41 f1       	breq	.+80     	; 0x9c62 <init_uart+0x96>
    9c12:	84 30       	cpi	r24, 0x04	; 4
    9c14:	09 f0       	breq	.+2      	; 0x9c18 <init_uart+0x4c>
    9c16:	43 c0       	rjmp	.+134    	; 0x9c9e <init_uart+0xd2>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    9c18:	90 91 c0 00 	lds	r25, 0x00C0
    9c1c:	9d 7f       	andi	r25, 0xFD	; 253
    9c1e:	90 93 c0 00 	sts	0x00C0, r25
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    9c22:	10 92 c5 00 	sts	0x00C5, r1
    9c26:	25 c0       	rjmp	.+74     	; 0x9c72 <init_uart+0xa6>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    9c28:	80 91 c0 00 	lds	r24, 0x00C0
    9c2c:	82 60       	ori	r24, 0x02	; 2
    9c2e:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    9c32:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    9c36:	88 e1       	ldi	r24, 0x18	; 24
    9c38:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    9c3c:	80 91 c1 00 	lds	r24, 0x00C1
    9c40:	80 61       	ori	r24, 0x10	; 16
    9c42:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    9c46:	80 91 c2 00 	lds	r24, 0x00C2
    9c4a:	88 60       	ori	r24, 0x08	; 8
    9c4c:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    9c50:	80 91 c2 00 	lds	r24, 0x00C2
    9c54:	8f 7e       	andi	r24, 0xEF	; 239
    9c56:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    9c5a:	80 91 c2 00 	lds	r24, 0x00C2
    9c5e:	80 62       	ori	r24, 0x20	; 32
    9c60:	17 c0       	rjmp	.+46     	; 0x9c90 <init_uart+0xc4>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    9c62:	80 91 c0 00 	lds	r24, 0x00C0
    9c66:	8d 7f       	andi	r24, 0xFD	; 253
    9c68:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    9c6c:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    9c70:	8a e0       	ldi	r24, 0x0A	; 10
    9c72:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    9c76:	80 91 c1 00 	lds	r24, 0x00C1
    9c7a:	80 61       	ori	r24, 0x10	; 16
    9c7c:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    9c80:	80 91 c2 00 	lds	r24, 0x00C2
    9c84:	87 7f       	andi	r24, 0xF7	; 247
    9c86:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    9c8a:	80 91 c2 00 	lds	r24, 0x00C2
    9c8e:	8f 7e       	andi	r24, 0xEF	; 239
    9c90:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    9c94:	80 91 c1 00 	lds	r24, 0x00C1
    9c98:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    9c9a:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    9c9e:	78 94       	sei
    9ca0:	08 95       	ret

00009ca2 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    9ca2:	83 e0       	ldi	r24, 0x03	; 3
    9ca4:	0e 94 f6 12 	call	0x25ec	; 0x25ec <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    9ca8:	80 91 78 00 	lds	r24, 0x0078
    9cac:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    9cb0:	9c 01       	movw	r18, r24
    9cb2:	36 95       	lsr	r19
    9cb4:	27 95       	ror	r18
    9cb6:	ac 01       	movw	r20, r24
    9cb8:	44 0f       	add	r20, r20
    9cba:	55 1f       	adc	r21, r21
    9cbc:	24 0f       	add	r18, r20
    9cbe:	35 1f       	adc	r19, r21
    9cc0:	ac 01       	movw	r20, r24
    9cc2:	74 e0       	ldi	r23, 0x04	; 4
    9cc4:	56 95       	lsr	r21
    9cc6:	47 95       	ror	r20
    9cc8:	7a 95       	dec	r23
    9cca:	e1 f7       	brne	.-8      	; 0x9cc4 <GetVbat+0x22>
    9ccc:	24 0f       	add	r18, r20
    9cce:	35 1f       	adc	r19, r21
    9cd0:	e6 e0       	ldi	r30, 0x06	; 6
    9cd2:	96 95       	lsr	r25
    9cd4:	87 95       	ror	r24
    9cd6:	ea 95       	dec	r30
    9cd8:	e1 f7       	brne	.-8      	; 0x9cd2 <GetVbat+0x30>

	return vBat;
}
    9cda:	82 0f       	add	r24, r18
    9cdc:	93 1f       	adc	r25, r19
    9cde:	08 95       	ret

00009ce0 <__subsf3>:
    9ce0:	50 58       	subi	r21, 0x80	; 128

00009ce2 <__addsf3>:
    9ce2:	bb 27       	eor	r27, r27
    9ce4:	aa 27       	eor	r26, r26
    9ce6:	0e d0       	rcall	.+28     	; 0x9d04 <__addsf3x>
    9ce8:	75 c1       	rjmp	.+746    	; 0x9fd4 <__fp_round>
    9cea:	66 d1       	rcall	.+716    	; 0x9fb8 <__fp_pscA>
    9cec:	30 f0       	brcs	.+12     	; 0x9cfa <__addsf3+0x18>
    9cee:	6b d1       	rcall	.+726    	; 0x9fc6 <__fp_pscB>
    9cf0:	20 f0       	brcs	.+8      	; 0x9cfa <__addsf3+0x18>
    9cf2:	31 f4       	brne	.+12     	; 0x9d00 <__addsf3+0x1e>
    9cf4:	9f 3f       	cpi	r25, 0xFF	; 255
    9cf6:	11 f4       	brne	.+4      	; 0x9cfc <__addsf3+0x1a>
    9cf8:	1e f4       	brtc	.+6      	; 0x9d00 <__addsf3+0x1e>
    9cfa:	5b c1       	rjmp	.+694    	; 0x9fb2 <__fp_nan>
    9cfc:	0e f4       	brtc	.+2      	; 0x9d00 <__addsf3+0x1e>
    9cfe:	e0 95       	com	r30
    9d00:	e7 fb       	bst	r30, 7
    9d02:	51 c1       	rjmp	.+674    	; 0x9fa6 <__fp_inf>

00009d04 <__addsf3x>:
    9d04:	e9 2f       	mov	r30, r25
    9d06:	77 d1       	rcall	.+750    	; 0x9ff6 <__fp_split3>
    9d08:	80 f3       	brcs	.-32     	; 0x9cea <__addsf3+0x8>
    9d0a:	ba 17       	cp	r27, r26
    9d0c:	62 07       	cpc	r22, r18
    9d0e:	73 07       	cpc	r23, r19
    9d10:	84 07       	cpc	r24, r20
    9d12:	95 07       	cpc	r25, r21
    9d14:	18 f0       	brcs	.+6      	; 0x9d1c <__addsf3x+0x18>
    9d16:	71 f4       	brne	.+28     	; 0x9d34 <__addsf3x+0x30>
    9d18:	9e f5       	brtc	.+102    	; 0x9d80 <__addsf3x+0x7c>
    9d1a:	8f c1       	rjmp	.+798    	; 0xa03a <__fp_zero>
    9d1c:	0e f4       	brtc	.+2      	; 0x9d20 <__addsf3x+0x1c>
    9d1e:	e0 95       	com	r30
    9d20:	0b 2e       	mov	r0, r27
    9d22:	ba 2f       	mov	r27, r26
    9d24:	a0 2d       	mov	r26, r0
    9d26:	0b 01       	movw	r0, r22
    9d28:	b9 01       	movw	r22, r18
    9d2a:	90 01       	movw	r18, r0
    9d2c:	0c 01       	movw	r0, r24
    9d2e:	ca 01       	movw	r24, r20
    9d30:	a0 01       	movw	r20, r0
    9d32:	11 24       	eor	r1, r1
    9d34:	ff 27       	eor	r31, r31
    9d36:	59 1b       	sub	r21, r25
    9d38:	99 f0       	breq	.+38     	; 0x9d60 <__addsf3x+0x5c>
    9d3a:	59 3f       	cpi	r21, 0xF9	; 249
    9d3c:	50 f4       	brcc	.+20     	; 0x9d52 <__addsf3x+0x4e>
    9d3e:	50 3e       	cpi	r21, 0xE0	; 224
    9d40:	68 f1       	brcs	.+90     	; 0x9d9c <__addsf3x+0x98>
    9d42:	1a 16       	cp	r1, r26
    9d44:	f0 40       	sbci	r31, 0x00	; 0
    9d46:	a2 2f       	mov	r26, r18
    9d48:	23 2f       	mov	r18, r19
    9d4a:	34 2f       	mov	r19, r20
    9d4c:	44 27       	eor	r20, r20
    9d4e:	58 5f       	subi	r21, 0xF8	; 248
    9d50:	f3 cf       	rjmp	.-26     	; 0x9d38 <__addsf3x+0x34>
    9d52:	46 95       	lsr	r20
    9d54:	37 95       	ror	r19
    9d56:	27 95       	ror	r18
    9d58:	a7 95       	ror	r26
    9d5a:	f0 40       	sbci	r31, 0x00	; 0
    9d5c:	53 95       	inc	r21
    9d5e:	c9 f7       	brne	.-14     	; 0x9d52 <__addsf3x+0x4e>
    9d60:	7e f4       	brtc	.+30     	; 0x9d80 <__addsf3x+0x7c>
    9d62:	1f 16       	cp	r1, r31
    9d64:	ba 0b       	sbc	r27, r26
    9d66:	62 0b       	sbc	r22, r18
    9d68:	73 0b       	sbc	r23, r19
    9d6a:	84 0b       	sbc	r24, r20
    9d6c:	ba f0       	brmi	.+46     	; 0x9d9c <__addsf3x+0x98>
    9d6e:	91 50       	subi	r25, 0x01	; 1
    9d70:	a1 f0       	breq	.+40     	; 0x9d9a <__addsf3x+0x96>
    9d72:	ff 0f       	add	r31, r31
    9d74:	bb 1f       	adc	r27, r27
    9d76:	66 1f       	adc	r22, r22
    9d78:	77 1f       	adc	r23, r23
    9d7a:	88 1f       	adc	r24, r24
    9d7c:	c2 f7       	brpl	.-16     	; 0x9d6e <__addsf3x+0x6a>
    9d7e:	0e c0       	rjmp	.+28     	; 0x9d9c <__addsf3x+0x98>
    9d80:	ba 0f       	add	r27, r26
    9d82:	62 1f       	adc	r22, r18
    9d84:	73 1f       	adc	r23, r19
    9d86:	84 1f       	adc	r24, r20
    9d88:	48 f4       	brcc	.+18     	; 0x9d9c <__addsf3x+0x98>
    9d8a:	87 95       	ror	r24
    9d8c:	77 95       	ror	r23
    9d8e:	67 95       	ror	r22
    9d90:	b7 95       	ror	r27
    9d92:	f7 95       	ror	r31
    9d94:	9e 3f       	cpi	r25, 0xFE	; 254
    9d96:	08 f0       	brcs	.+2      	; 0x9d9a <__addsf3x+0x96>
    9d98:	b3 cf       	rjmp	.-154    	; 0x9d00 <__addsf3+0x1e>
    9d9a:	93 95       	inc	r25
    9d9c:	88 0f       	add	r24, r24
    9d9e:	08 f0       	brcs	.+2      	; 0x9da2 <__addsf3x+0x9e>
    9da0:	99 27       	eor	r25, r25
    9da2:	ee 0f       	add	r30, r30
    9da4:	97 95       	ror	r25
    9da6:	87 95       	ror	r24
    9da8:	08 95       	ret

00009daa <__cmpsf2>:
    9daa:	d9 d0       	rcall	.+434    	; 0x9f5e <__fp_cmp>
    9dac:	08 f4       	brcc	.+2      	; 0x9db0 <__cmpsf2+0x6>
    9dae:	81 e0       	ldi	r24, 0x01	; 1
    9db0:	08 95       	ret

00009db2 <__divsf3>:
    9db2:	0c d0       	rcall	.+24     	; 0x9dcc <__divsf3x>
    9db4:	0f c1       	rjmp	.+542    	; 0x9fd4 <__fp_round>
    9db6:	07 d1       	rcall	.+526    	; 0x9fc6 <__fp_pscB>
    9db8:	40 f0       	brcs	.+16     	; 0x9dca <__divsf3+0x18>
    9dba:	fe d0       	rcall	.+508    	; 0x9fb8 <__fp_pscA>
    9dbc:	30 f0       	brcs	.+12     	; 0x9dca <__divsf3+0x18>
    9dbe:	21 f4       	brne	.+8      	; 0x9dc8 <__divsf3+0x16>
    9dc0:	5f 3f       	cpi	r21, 0xFF	; 255
    9dc2:	19 f0       	breq	.+6      	; 0x9dca <__divsf3+0x18>
    9dc4:	f0 c0       	rjmp	.+480    	; 0x9fa6 <__fp_inf>
    9dc6:	51 11       	cpse	r21, r1
    9dc8:	39 c1       	rjmp	.+626    	; 0xa03c <__fp_szero>
    9dca:	f3 c0       	rjmp	.+486    	; 0x9fb2 <__fp_nan>

00009dcc <__divsf3x>:
    9dcc:	14 d1       	rcall	.+552    	; 0x9ff6 <__fp_split3>
    9dce:	98 f3       	brcs	.-26     	; 0x9db6 <__divsf3+0x4>

00009dd0 <__divsf3_pse>:
    9dd0:	99 23       	and	r25, r25
    9dd2:	c9 f3       	breq	.-14     	; 0x9dc6 <__divsf3+0x14>
    9dd4:	55 23       	and	r21, r21
    9dd6:	b1 f3       	breq	.-20     	; 0x9dc4 <__divsf3+0x12>
    9dd8:	95 1b       	sub	r25, r21
    9dda:	55 0b       	sbc	r21, r21
    9ddc:	bb 27       	eor	r27, r27
    9dde:	aa 27       	eor	r26, r26
    9de0:	62 17       	cp	r22, r18
    9de2:	73 07       	cpc	r23, r19
    9de4:	84 07       	cpc	r24, r20
    9de6:	38 f0       	brcs	.+14     	; 0x9df6 <__divsf3_pse+0x26>
    9de8:	9f 5f       	subi	r25, 0xFF	; 255
    9dea:	5f 4f       	sbci	r21, 0xFF	; 255
    9dec:	22 0f       	add	r18, r18
    9dee:	33 1f       	adc	r19, r19
    9df0:	44 1f       	adc	r20, r20
    9df2:	aa 1f       	adc	r26, r26
    9df4:	a9 f3       	breq	.-22     	; 0x9de0 <__divsf3_pse+0x10>
    9df6:	33 d0       	rcall	.+102    	; 0x9e5e <__divsf3_pse+0x8e>
    9df8:	0e 2e       	mov	r0, r30
    9dfa:	3a f0       	brmi	.+14     	; 0x9e0a <__divsf3_pse+0x3a>
    9dfc:	e0 e8       	ldi	r30, 0x80	; 128
    9dfe:	30 d0       	rcall	.+96     	; 0x9e60 <__divsf3_pse+0x90>
    9e00:	91 50       	subi	r25, 0x01	; 1
    9e02:	50 40       	sbci	r21, 0x00	; 0
    9e04:	e6 95       	lsr	r30
    9e06:	00 1c       	adc	r0, r0
    9e08:	ca f7       	brpl	.-14     	; 0x9dfc <__divsf3_pse+0x2c>
    9e0a:	29 d0       	rcall	.+82     	; 0x9e5e <__divsf3_pse+0x8e>
    9e0c:	fe 2f       	mov	r31, r30
    9e0e:	27 d0       	rcall	.+78     	; 0x9e5e <__divsf3_pse+0x8e>
    9e10:	66 0f       	add	r22, r22
    9e12:	77 1f       	adc	r23, r23
    9e14:	88 1f       	adc	r24, r24
    9e16:	bb 1f       	adc	r27, r27
    9e18:	26 17       	cp	r18, r22
    9e1a:	37 07       	cpc	r19, r23
    9e1c:	48 07       	cpc	r20, r24
    9e1e:	ab 07       	cpc	r26, r27
    9e20:	b0 e8       	ldi	r27, 0x80	; 128
    9e22:	09 f0       	breq	.+2      	; 0x9e26 <__divsf3_pse+0x56>
    9e24:	bb 0b       	sbc	r27, r27
    9e26:	80 2d       	mov	r24, r0
    9e28:	bf 01       	movw	r22, r30
    9e2a:	ff 27       	eor	r31, r31
    9e2c:	93 58       	subi	r25, 0x83	; 131
    9e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    9e30:	2a f0       	brmi	.+10     	; 0x9e3c <__divsf3_pse+0x6c>
    9e32:	9e 3f       	cpi	r25, 0xFE	; 254
    9e34:	51 05       	cpc	r21, r1
    9e36:	68 f0       	brcs	.+26     	; 0x9e52 <__divsf3_pse+0x82>
    9e38:	b6 c0       	rjmp	.+364    	; 0x9fa6 <__fp_inf>
    9e3a:	00 c1       	rjmp	.+512    	; 0xa03c <__fp_szero>
    9e3c:	5f 3f       	cpi	r21, 0xFF	; 255
    9e3e:	ec f3       	brlt	.-6      	; 0x9e3a <__divsf3_pse+0x6a>
    9e40:	98 3e       	cpi	r25, 0xE8	; 232
    9e42:	dc f3       	brlt	.-10     	; 0x9e3a <__divsf3_pse+0x6a>
    9e44:	86 95       	lsr	r24
    9e46:	77 95       	ror	r23
    9e48:	67 95       	ror	r22
    9e4a:	b7 95       	ror	r27
    9e4c:	f7 95       	ror	r31
    9e4e:	9f 5f       	subi	r25, 0xFF	; 255
    9e50:	c9 f7       	brne	.-14     	; 0x9e44 <__divsf3_pse+0x74>
    9e52:	88 0f       	add	r24, r24
    9e54:	91 1d       	adc	r25, r1
    9e56:	96 95       	lsr	r25
    9e58:	87 95       	ror	r24
    9e5a:	97 f9       	bld	r25, 7
    9e5c:	08 95       	ret
    9e5e:	e1 e0       	ldi	r30, 0x01	; 1
    9e60:	66 0f       	add	r22, r22
    9e62:	77 1f       	adc	r23, r23
    9e64:	88 1f       	adc	r24, r24
    9e66:	bb 1f       	adc	r27, r27
    9e68:	62 17       	cp	r22, r18
    9e6a:	73 07       	cpc	r23, r19
    9e6c:	84 07       	cpc	r24, r20
    9e6e:	ba 07       	cpc	r27, r26
    9e70:	20 f0       	brcs	.+8      	; 0x9e7a <__divsf3_pse+0xaa>
    9e72:	62 1b       	sub	r22, r18
    9e74:	73 0b       	sbc	r23, r19
    9e76:	84 0b       	sbc	r24, r20
    9e78:	ba 0b       	sbc	r27, r26
    9e7a:	ee 1f       	adc	r30, r30
    9e7c:	88 f7       	brcc	.-30     	; 0x9e60 <__divsf3_pse+0x90>
    9e7e:	e0 95       	com	r30
    9e80:	08 95       	ret

00009e82 <__fixsfsi>:
    9e82:	04 d0       	rcall	.+8      	; 0x9e8c <__fixunssfsi>
    9e84:	68 94       	set
    9e86:	b1 11       	cpse	r27, r1
    9e88:	d9 c0       	rjmp	.+434    	; 0xa03c <__fp_szero>
    9e8a:	08 95       	ret

00009e8c <__fixunssfsi>:
    9e8c:	bc d0       	rcall	.+376    	; 0xa006 <__fp_splitA>
    9e8e:	88 f0       	brcs	.+34     	; 0x9eb2 <__fixunssfsi+0x26>
    9e90:	9f 57       	subi	r25, 0x7F	; 127
    9e92:	90 f0       	brcs	.+36     	; 0x9eb8 <__fixunssfsi+0x2c>
    9e94:	b9 2f       	mov	r27, r25
    9e96:	99 27       	eor	r25, r25
    9e98:	b7 51       	subi	r27, 0x17	; 23
    9e9a:	a0 f0       	brcs	.+40     	; 0x9ec4 <__fixunssfsi+0x38>
    9e9c:	d1 f0       	breq	.+52     	; 0x9ed2 <__fixunssfsi+0x46>
    9e9e:	66 0f       	add	r22, r22
    9ea0:	77 1f       	adc	r23, r23
    9ea2:	88 1f       	adc	r24, r24
    9ea4:	99 1f       	adc	r25, r25
    9ea6:	1a f0       	brmi	.+6      	; 0x9eae <__fixunssfsi+0x22>
    9ea8:	ba 95       	dec	r27
    9eaa:	c9 f7       	brne	.-14     	; 0x9e9e <__fixunssfsi+0x12>
    9eac:	12 c0       	rjmp	.+36     	; 0x9ed2 <__fixunssfsi+0x46>
    9eae:	b1 30       	cpi	r27, 0x01	; 1
    9eb0:	81 f0       	breq	.+32     	; 0x9ed2 <__fixunssfsi+0x46>
    9eb2:	c3 d0       	rcall	.+390    	; 0xa03a <__fp_zero>
    9eb4:	b1 e0       	ldi	r27, 0x01	; 1
    9eb6:	08 95       	ret
    9eb8:	c0 c0       	rjmp	.+384    	; 0xa03a <__fp_zero>
    9eba:	67 2f       	mov	r22, r23
    9ebc:	78 2f       	mov	r23, r24
    9ebe:	88 27       	eor	r24, r24
    9ec0:	b8 5f       	subi	r27, 0xF8	; 248
    9ec2:	39 f0       	breq	.+14     	; 0x9ed2 <__fixunssfsi+0x46>
    9ec4:	b9 3f       	cpi	r27, 0xF9	; 249
    9ec6:	cc f3       	brlt	.-14     	; 0x9eba <__fixunssfsi+0x2e>
    9ec8:	86 95       	lsr	r24
    9eca:	77 95       	ror	r23
    9ecc:	67 95       	ror	r22
    9ece:	b3 95       	inc	r27
    9ed0:	d9 f7       	brne	.-10     	; 0x9ec8 <__fixunssfsi+0x3c>
    9ed2:	3e f4       	brtc	.+14     	; 0x9ee2 <__fixunssfsi+0x56>
    9ed4:	90 95       	com	r25
    9ed6:	80 95       	com	r24
    9ed8:	70 95       	com	r23
    9eda:	61 95       	neg	r22
    9edc:	7f 4f       	sbci	r23, 0xFF	; 255
    9ede:	8f 4f       	sbci	r24, 0xFF	; 255
    9ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    9ee2:	08 95       	ret

00009ee4 <__floatunsisf>:
    9ee4:	e8 94       	clt
    9ee6:	09 c0       	rjmp	.+18     	; 0x9efa <__floatsisf+0x12>

00009ee8 <__floatsisf>:
    9ee8:	97 fb       	bst	r25, 7
    9eea:	3e f4       	brtc	.+14     	; 0x9efa <__floatsisf+0x12>
    9eec:	90 95       	com	r25
    9eee:	80 95       	com	r24
    9ef0:	70 95       	com	r23
    9ef2:	61 95       	neg	r22
    9ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    9ef6:	8f 4f       	sbci	r24, 0xFF	; 255
    9ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    9efa:	99 23       	and	r25, r25
    9efc:	a9 f0       	breq	.+42     	; 0x9f28 <__floatsisf+0x40>
    9efe:	f9 2f       	mov	r31, r25
    9f00:	96 e9       	ldi	r25, 0x96	; 150
    9f02:	bb 27       	eor	r27, r27
    9f04:	93 95       	inc	r25
    9f06:	f6 95       	lsr	r31
    9f08:	87 95       	ror	r24
    9f0a:	77 95       	ror	r23
    9f0c:	67 95       	ror	r22
    9f0e:	b7 95       	ror	r27
    9f10:	f1 11       	cpse	r31, r1
    9f12:	f8 cf       	rjmp	.-16     	; 0x9f04 <__floatsisf+0x1c>
    9f14:	fa f4       	brpl	.+62     	; 0x9f54 <__floatsisf+0x6c>
    9f16:	bb 0f       	add	r27, r27
    9f18:	11 f4       	brne	.+4      	; 0x9f1e <__floatsisf+0x36>
    9f1a:	60 ff       	sbrs	r22, 0
    9f1c:	1b c0       	rjmp	.+54     	; 0x9f54 <__floatsisf+0x6c>
    9f1e:	6f 5f       	subi	r22, 0xFF	; 255
    9f20:	7f 4f       	sbci	r23, 0xFF	; 255
    9f22:	8f 4f       	sbci	r24, 0xFF	; 255
    9f24:	9f 4f       	sbci	r25, 0xFF	; 255
    9f26:	16 c0       	rjmp	.+44     	; 0x9f54 <__floatsisf+0x6c>
    9f28:	88 23       	and	r24, r24
    9f2a:	11 f0       	breq	.+4      	; 0x9f30 <__floatsisf+0x48>
    9f2c:	96 e9       	ldi	r25, 0x96	; 150
    9f2e:	11 c0       	rjmp	.+34     	; 0x9f52 <__floatsisf+0x6a>
    9f30:	77 23       	and	r23, r23
    9f32:	21 f0       	breq	.+8      	; 0x9f3c <__floatsisf+0x54>
    9f34:	9e e8       	ldi	r25, 0x8E	; 142
    9f36:	87 2f       	mov	r24, r23
    9f38:	76 2f       	mov	r23, r22
    9f3a:	05 c0       	rjmp	.+10     	; 0x9f46 <__floatsisf+0x5e>
    9f3c:	66 23       	and	r22, r22
    9f3e:	71 f0       	breq	.+28     	; 0x9f5c <__floatsisf+0x74>
    9f40:	96 e8       	ldi	r25, 0x86	; 134
    9f42:	86 2f       	mov	r24, r22
    9f44:	70 e0       	ldi	r23, 0x00	; 0
    9f46:	60 e0       	ldi	r22, 0x00	; 0
    9f48:	2a f0       	brmi	.+10     	; 0x9f54 <__floatsisf+0x6c>
    9f4a:	9a 95       	dec	r25
    9f4c:	66 0f       	add	r22, r22
    9f4e:	77 1f       	adc	r23, r23
    9f50:	88 1f       	adc	r24, r24
    9f52:	da f7       	brpl	.-10     	; 0x9f4a <__floatsisf+0x62>
    9f54:	88 0f       	add	r24, r24
    9f56:	96 95       	lsr	r25
    9f58:	87 95       	ror	r24
    9f5a:	97 f9       	bld	r25, 7
    9f5c:	08 95       	ret

00009f5e <__fp_cmp>:
    9f5e:	99 0f       	add	r25, r25
    9f60:	00 08       	sbc	r0, r0
    9f62:	55 0f       	add	r21, r21
    9f64:	aa 0b       	sbc	r26, r26
    9f66:	e0 e8       	ldi	r30, 0x80	; 128
    9f68:	fe ef       	ldi	r31, 0xFE	; 254
    9f6a:	16 16       	cp	r1, r22
    9f6c:	17 06       	cpc	r1, r23
    9f6e:	e8 07       	cpc	r30, r24
    9f70:	f9 07       	cpc	r31, r25
    9f72:	c0 f0       	brcs	.+48     	; 0x9fa4 <__fp_cmp+0x46>
    9f74:	12 16       	cp	r1, r18
    9f76:	13 06       	cpc	r1, r19
    9f78:	e4 07       	cpc	r30, r20
    9f7a:	f5 07       	cpc	r31, r21
    9f7c:	98 f0       	brcs	.+38     	; 0x9fa4 <__fp_cmp+0x46>
    9f7e:	62 1b       	sub	r22, r18
    9f80:	73 0b       	sbc	r23, r19
    9f82:	84 0b       	sbc	r24, r20
    9f84:	95 0b       	sbc	r25, r21
    9f86:	39 f4       	brne	.+14     	; 0x9f96 <__fp_cmp+0x38>
    9f88:	0a 26       	eor	r0, r26
    9f8a:	61 f0       	breq	.+24     	; 0x9fa4 <__fp_cmp+0x46>
    9f8c:	23 2b       	or	r18, r19
    9f8e:	24 2b       	or	r18, r20
    9f90:	25 2b       	or	r18, r21
    9f92:	21 f4       	brne	.+8      	; 0x9f9c <__fp_cmp+0x3e>
    9f94:	08 95       	ret
    9f96:	0a 26       	eor	r0, r26
    9f98:	09 f4       	brne	.+2      	; 0x9f9c <__fp_cmp+0x3e>
    9f9a:	a1 40       	sbci	r26, 0x01	; 1
    9f9c:	a6 95       	lsr	r26
    9f9e:	8f ef       	ldi	r24, 0xFF	; 255
    9fa0:	81 1d       	adc	r24, r1
    9fa2:	81 1d       	adc	r24, r1
    9fa4:	08 95       	ret

00009fa6 <__fp_inf>:
    9fa6:	97 f9       	bld	r25, 7
    9fa8:	9f 67       	ori	r25, 0x7F	; 127
    9faa:	80 e8       	ldi	r24, 0x80	; 128
    9fac:	70 e0       	ldi	r23, 0x00	; 0
    9fae:	60 e0       	ldi	r22, 0x00	; 0
    9fb0:	08 95       	ret

00009fb2 <__fp_nan>:
    9fb2:	9f ef       	ldi	r25, 0xFF	; 255
    9fb4:	80 ec       	ldi	r24, 0xC0	; 192
    9fb6:	08 95       	ret

00009fb8 <__fp_pscA>:
    9fb8:	00 24       	eor	r0, r0
    9fba:	0a 94       	dec	r0
    9fbc:	16 16       	cp	r1, r22
    9fbe:	17 06       	cpc	r1, r23
    9fc0:	18 06       	cpc	r1, r24
    9fc2:	09 06       	cpc	r0, r25
    9fc4:	08 95       	ret

00009fc6 <__fp_pscB>:
    9fc6:	00 24       	eor	r0, r0
    9fc8:	0a 94       	dec	r0
    9fca:	12 16       	cp	r1, r18
    9fcc:	13 06       	cpc	r1, r19
    9fce:	14 06       	cpc	r1, r20
    9fd0:	05 06       	cpc	r0, r21
    9fd2:	08 95       	ret

00009fd4 <__fp_round>:
    9fd4:	09 2e       	mov	r0, r25
    9fd6:	03 94       	inc	r0
    9fd8:	00 0c       	add	r0, r0
    9fda:	11 f4       	brne	.+4      	; 0x9fe0 <__fp_round+0xc>
    9fdc:	88 23       	and	r24, r24
    9fde:	52 f0       	brmi	.+20     	; 0x9ff4 <__fp_round+0x20>
    9fe0:	bb 0f       	add	r27, r27
    9fe2:	40 f4       	brcc	.+16     	; 0x9ff4 <__fp_round+0x20>
    9fe4:	bf 2b       	or	r27, r31
    9fe6:	11 f4       	brne	.+4      	; 0x9fec <__fp_round+0x18>
    9fe8:	60 ff       	sbrs	r22, 0
    9fea:	04 c0       	rjmp	.+8      	; 0x9ff4 <__fp_round+0x20>
    9fec:	6f 5f       	subi	r22, 0xFF	; 255
    9fee:	7f 4f       	sbci	r23, 0xFF	; 255
    9ff0:	8f 4f       	sbci	r24, 0xFF	; 255
    9ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    9ff4:	08 95       	ret

00009ff6 <__fp_split3>:
    9ff6:	57 fd       	sbrc	r21, 7
    9ff8:	90 58       	subi	r25, 0x80	; 128
    9ffa:	44 0f       	add	r20, r20
    9ffc:	55 1f       	adc	r21, r21
    9ffe:	59 f0       	breq	.+22     	; 0xa016 <__fp_splitA+0x10>
    a000:	5f 3f       	cpi	r21, 0xFF	; 255
    a002:	71 f0       	breq	.+28     	; 0xa020 <__fp_splitA+0x1a>
    a004:	47 95       	ror	r20

0000a006 <__fp_splitA>:
    a006:	88 0f       	add	r24, r24
    a008:	97 fb       	bst	r25, 7
    a00a:	99 1f       	adc	r25, r25
    a00c:	61 f0       	breq	.+24     	; 0xa026 <__fp_splitA+0x20>
    a00e:	9f 3f       	cpi	r25, 0xFF	; 255
    a010:	79 f0       	breq	.+30     	; 0xa030 <__fp_splitA+0x2a>
    a012:	87 95       	ror	r24
    a014:	08 95       	ret
    a016:	12 16       	cp	r1, r18
    a018:	13 06       	cpc	r1, r19
    a01a:	14 06       	cpc	r1, r20
    a01c:	55 1f       	adc	r21, r21
    a01e:	f2 cf       	rjmp	.-28     	; 0xa004 <__fp_split3+0xe>
    a020:	46 95       	lsr	r20
    a022:	f1 df       	rcall	.-30     	; 0xa006 <__fp_splitA>
    a024:	08 c0       	rjmp	.+16     	; 0xa036 <__fp_splitA+0x30>
    a026:	16 16       	cp	r1, r22
    a028:	17 06       	cpc	r1, r23
    a02a:	18 06       	cpc	r1, r24
    a02c:	99 1f       	adc	r25, r25
    a02e:	f1 cf       	rjmp	.-30     	; 0xa012 <__fp_splitA+0xc>
    a030:	86 95       	lsr	r24
    a032:	71 05       	cpc	r23, r1
    a034:	61 05       	cpc	r22, r1
    a036:	08 94       	sec
    a038:	08 95       	ret

0000a03a <__fp_zero>:
    a03a:	e8 94       	clt

0000a03c <__fp_szero>:
    a03c:	bb 27       	eor	r27, r27
    a03e:	66 27       	eor	r22, r22
    a040:	77 27       	eor	r23, r23
    a042:	cb 01       	movw	r24, r22
    a044:	97 f9       	bld	r25, 7
    a046:	08 95       	ret

0000a048 <__gesf2>:
    a048:	8a df       	rcall	.-236    	; 0x9f5e <__fp_cmp>
    a04a:	08 f4       	brcc	.+2      	; 0xa04e <__gesf2+0x6>
    a04c:	8f ef       	ldi	r24, 0xFF	; 255
    a04e:	08 95       	ret

0000a050 <__mulsf3>:
    a050:	0b d0       	rcall	.+22     	; 0xa068 <__mulsf3x>
    a052:	c0 cf       	rjmp	.-128    	; 0x9fd4 <__fp_round>
    a054:	b1 df       	rcall	.-158    	; 0x9fb8 <__fp_pscA>
    a056:	28 f0       	brcs	.+10     	; 0xa062 <__mulsf3+0x12>
    a058:	b6 df       	rcall	.-148    	; 0x9fc6 <__fp_pscB>
    a05a:	18 f0       	brcs	.+6      	; 0xa062 <__mulsf3+0x12>
    a05c:	95 23       	and	r25, r21
    a05e:	09 f0       	breq	.+2      	; 0xa062 <__mulsf3+0x12>
    a060:	a2 cf       	rjmp	.-188    	; 0x9fa6 <__fp_inf>
    a062:	a7 cf       	rjmp	.-178    	; 0x9fb2 <__fp_nan>
    a064:	11 24       	eor	r1, r1
    a066:	ea cf       	rjmp	.-44     	; 0xa03c <__fp_szero>

0000a068 <__mulsf3x>:
    a068:	c6 df       	rcall	.-116    	; 0x9ff6 <__fp_split3>
    a06a:	a0 f3       	brcs	.-24     	; 0xa054 <__mulsf3+0x4>

0000a06c <__mulsf3_pse>:
    a06c:	95 9f       	mul	r25, r21
    a06e:	d1 f3       	breq	.-12     	; 0xa064 <__mulsf3+0x14>
    a070:	95 0f       	add	r25, r21
    a072:	50 e0       	ldi	r21, 0x00	; 0
    a074:	55 1f       	adc	r21, r21
    a076:	62 9f       	mul	r22, r18
    a078:	f0 01       	movw	r30, r0
    a07a:	72 9f       	mul	r23, r18
    a07c:	bb 27       	eor	r27, r27
    a07e:	f0 0d       	add	r31, r0
    a080:	b1 1d       	adc	r27, r1
    a082:	63 9f       	mul	r22, r19
    a084:	aa 27       	eor	r26, r26
    a086:	f0 0d       	add	r31, r0
    a088:	b1 1d       	adc	r27, r1
    a08a:	aa 1f       	adc	r26, r26
    a08c:	64 9f       	mul	r22, r20
    a08e:	66 27       	eor	r22, r22
    a090:	b0 0d       	add	r27, r0
    a092:	a1 1d       	adc	r26, r1
    a094:	66 1f       	adc	r22, r22
    a096:	82 9f       	mul	r24, r18
    a098:	22 27       	eor	r18, r18
    a09a:	b0 0d       	add	r27, r0
    a09c:	a1 1d       	adc	r26, r1
    a09e:	62 1f       	adc	r22, r18
    a0a0:	73 9f       	mul	r23, r19
    a0a2:	b0 0d       	add	r27, r0
    a0a4:	a1 1d       	adc	r26, r1
    a0a6:	62 1f       	adc	r22, r18
    a0a8:	83 9f       	mul	r24, r19
    a0aa:	a0 0d       	add	r26, r0
    a0ac:	61 1d       	adc	r22, r1
    a0ae:	22 1f       	adc	r18, r18
    a0b0:	74 9f       	mul	r23, r20
    a0b2:	33 27       	eor	r19, r19
    a0b4:	a0 0d       	add	r26, r0
    a0b6:	61 1d       	adc	r22, r1
    a0b8:	23 1f       	adc	r18, r19
    a0ba:	84 9f       	mul	r24, r20
    a0bc:	60 0d       	add	r22, r0
    a0be:	21 1d       	adc	r18, r1
    a0c0:	82 2f       	mov	r24, r18
    a0c2:	76 2f       	mov	r23, r22
    a0c4:	6a 2f       	mov	r22, r26
    a0c6:	11 24       	eor	r1, r1
    a0c8:	9f 57       	subi	r25, 0x7F	; 127
    a0ca:	50 40       	sbci	r21, 0x00	; 0
    a0cc:	8a f0       	brmi	.+34     	; 0xa0f0 <__mulsf3_pse+0x84>
    a0ce:	e1 f0       	breq	.+56     	; 0xa108 <__mulsf3_pse+0x9c>
    a0d0:	88 23       	and	r24, r24
    a0d2:	4a f0       	brmi	.+18     	; 0xa0e6 <__mulsf3_pse+0x7a>
    a0d4:	ee 0f       	add	r30, r30
    a0d6:	ff 1f       	adc	r31, r31
    a0d8:	bb 1f       	adc	r27, r27
    a0da:	66 1f       	adc	r22, r22
    a0dc:	77 1f       	adc	r23, r23
    a0de:	88 1f       	adc	r24, r24
    a0e0:	91 50       	subi	r25, 0x01	; 1
    a0e2:	50 40       	sbci	r21, 0x00	; 0
    a0e4:	a9 f7       	brne	.-22     	; 0xa0d0 <__mulsf3_pse+0x64>
    a0e6:	9e 3f       	cpi	r25, 0xFE	; 254
    a0e8:	51 05       	cpc	r21, r1
    a0ea:	70 f0       	brcs	.+28     	; 0xa108 <__mulsf3_pse+0x9c>
    a0ec:	5c cf       	rjmp	.-328    	; 0x9fa6 <__fp_inf>
    a0ee:	a6 cf       	rjmp	.-180    	; 0xa03c <__fp_szero>
    a0f0:	5f 3f       	cpi	r21, 0xFF	; 255
    a0f2:	ec f3       	brlt	.-6      	; 0xa0ee <__mulsf3_pse+0x82>
    a0f4:	98 3e       	cpi	r25, 0xE8	; 232
    a0f6:	dc f3       	brlt	.-10     	; 0xa0ee <__mulsf3_pse+0x82>
    a0f8:	86 95       	lsr	r24
    a0fa:	77 95       	ror	r23
    a0fc:	67 95       	ror	r22
    a0fe:	b7 95       	ror	r27
    a100:	f7 95       	ror	r31
    a102:	e7 95       	ror	r30
    a104:	9f 5f       	subi	r25, 0xFF	; 255
    a106:	c1 f7       	brne	.-16     	; 0xa0f8 <__mulsf3_pse+0x8c>
    a108:	fe 2b       	or	r31, r30
    a10a:	88 0f       	add	r24, r24
    a10c:	91 1d       	adc	r25, r1
    a10e:	96 95       	lsr	r25
    a110:	87 95       	ror	r24
    a112:	97 f9       	bld	r25, 7
    a114:	08 95       	ret

0000a116 <__udivmodhi4>:
    a116:	aa 1b       	sub	r26, r26
    a118:	bb 1b       	sub	r27, r27
    a11a:	51 e1       	ldi	r21, 0x11	; 17
    a11c:	07 c0       	rjmp	.+14     	; 0xa12c <__udivmodhi4_ep>

0000a11e <__udivmodhi4_loop>:
    a11e:	aa 1f       	adc	r26, r26
    a120:	bb 1f       	adc	r27, r27
    a122:	a6 17       	cp	r26, r22
    a124:	b7 07       	cpc	r27, r23
    a126:	10 f0       	brcs	.+4      	; 0xa12c <__udivmodhi4_ep>
    a128:	a6 1b       	sub	r26, r22
    a12a:	b7 0b       	sbc	r27, r23

0000a12c <__udivmodhi4_ep>:
    a12c:	88 1f       	adc	r24, r24
    a12e:	99 1f       	adc	r25, r25
    a130:	5a 95       	dec	r21
    a132:	a9 f7       	brne	.-22     	; 0xa11e <__udivmodhi4_loop>
    a134:	80 95       	com	r24
    a136:	90 95       	com	r25
    a138:	bc 01       	movw	r22, r24
    a13a:	cd 01       	movw	r24, r26
    a13c:	08 95       	ret

0000a13e <__divmodhi4>:
    a13e:	97 fb       	bst	r25, 7
    a140:	07 2e       	mov	r0, r23
    a142:	16 f4       	brtc	.+4      	; 0xa148 <__divmodhi4+0xa>
    a144:	00 94       	com	r0
    a146:	07 d0       	rcall	.+14     	; 0xa156 <__divmodhi4_neg1>
    a148:	77 fd       	sbrc	r23, 7
    a14a:	09 d0       	rcall	.+18     	; 0xa15e <__divmodhi4_neg2>
    a14c:	0e 94 8b 50 	call	0xa116	; 0xa116 <__udivmodhi4>
    a150:	07 fc       	sbrc	r0, 7
    a152:	05 d0       	rcall	.+10     	; 0xa15e <__divmodhi4_neg2>
    a154:	3e f4       	brtc	.+14     	; 0xa164 <__divmodhi4_exit>

0000a156 <__divmodhi4_neg1>:
    a156:	90 95       	com	r25
    a158:	81 95       	neg	r24
    a15a:	9f 4f       	sbci	r25, 0xFF	; 255
    a15c:	08 95       	ret

0000a15e <__divmodhi4_neg2>:
    a15e:	70 95       	com	r23
    a160:	61 95       	neg	r22
    a162:	7f 4f       	sbci	r23, 0xFF	; 255

0000a164 <__divmodhi4_exit>:
    a164:	08 95       	ret

0000a166 <__udivmodsi4>:
    a166:	a1 e2       	ldi	r26, 0x21	; 33
    a168:	1a 2e       	mov	r1, r26
    a16a:	aa 1b       	sub	r26, r26
    a16c:	bb 1b       	sub	r27, r27
    a16e:	fd 01       	movw	r30, r26
    a170:	0d c0       	rjmp	.+26     	; 0xa18c <__udivmodsi4_ep>

0000a172 <__udivmodsi4_loop>:
    a172:	aa 1f       	adc	r26, r26
    a174:	bb 1f       	adc	r27, r27
    a176:	ee 1f       	adc	r30, r30
    a178:	ff 1f       	adc	r31, r31
    a17a:	a2 17       	cp	r26, r18
    a17c:	b3 07       	cpc	r27, r19
    a17e:	e4 07       	cpc	r30, r20
    a180:	f5 07       	cpc	r31, r21
    a182:	20 f0       	brcs	.+8      	; 0xa18c <__udivmodsi4_ep>
    a184:	a2 1b       	sub	r26, r18
    a186:	b3 0b       	sbc	r27, r19
    a188:	e4 0b       	sbc	r30, r20
    a18a:	f5 0b       	sbc	r31, r21

0000a18c <__udivmodsi4_ep>:
    a18c:	66 1f       	adc	r22, r22
    a18e:	77 1f       	adc	r23, r23
    a190:	88 1f       	adc	r24, r24
    a192:	99 1f       	adc	r25, r25
    a194:	1a 94       	dec	r1
    a196:	69 f7       	brne	.-38     	; 0xa172 <__udivmodsi4_loop>
    a198:	60 95       	com	r22
    a19a:	70 95       	com	r23
    a19c:	80 95       	com	r24
    a19e:	90 95       	com	r25
    a1a0:	9b 01       	movw	r18, r22
    a1a2:	ac 01       	movw	r20, r24
    a1a4:	bd 01       	movw	r22, r26
    a1a6:	cf 01       	movw	r24, r30
    a1a8:	08 95       	ret

0000a1aa <__divmodsi4>:
    a1aa:	05 2e       	mov	r0, r21
    a1ac:	97 fb       	bst	r25, 7
    a1ae:	1e f4       	brtc	.+6      	; 0xa1b6 <__divmodsi4+0xc>
    a1b0:	00 94       	com	r0
    a1b2:	0e 94 ec 50 	call	0xa1d8	; 0xa1d8 <__negsi2>
    a1b6:	57 fd       	sbrc	r21, 7
    a1b8:	07 d0       	rcall	.+14     	; 0xa1c8 <__divmodsi4_neg2>
    a1ba:	0e 94 b3 50 	call	0xa166	; 0xa166 <__udivmodsi4>
    a1be:	07 fc       	sbrc	r0, 7
    a1c0:	03 d0       	rcall	.+6      	; 0xa1c8 <__divmodsi4_neg2>
    a1c2:	4e f4       	brtc	.+18     	; 0xa1d6 <__divmodsi4_exit>
    a1c4:	0c 94 ec 50 	jmp	0xa1d8	; 0xa1d8 <__negsi2>

0000a1c8 <__divmodsi4_neg2>:
    a1c8:	50 95       	com	r21
    a1ca:	40 95       	com	r20
    a1cc:	30 95       	com	r19
    a1ce:	21 95       	neg	r18
    a1d0:	3f 4f       	sbci	r19, 0xFF	; 255
    a1d2:	4f 4f       	sbci	r20, 0xFF	; 255
    a1d4:	5f 4f       	sbci	r21, 0xFF	; 255

0000a1d6 <__divmodsi4_exit>:
    a1d6:	08 95       	ret

0000a1d8 <__negsi2>:
    a1d8:	90 95       	com	r25
    a1da:	80 95       	com	r24
    a1dc:	70 95       	com	r23
    a1de:	61 95       	neg	r22
    a1e0:	7f 4f       	sbci	r23, 0xFF	; 255
    a1e2:	8f 4f       	sbci	r24, 0xFF	; 255
    a1e4:	9f 4f       	sbci	r25, 0xFF	; 255
    a1e6:	08 95       	ret

0000a1e8 <__tablejump2__>:
    a1e8:	ee 0f       	add	r30, r30
    a1ea:	ff 1f       	adc	r31, r31

0000a1ec <__tablejump__>:
    a1ec:	05 90       	lpm	r0, Z+
    a1ee:	f4 91       	lpm	r31, Z
    a1f0:	e0 2d       	mov	r30, r0
    a1f2:	09 94       	ijmp

0000a1f4 <__mulhisi3>:
    a1f4:	0e 94 02 51 	call	0xa204	; 0xa204 <__umulhisi3>
    a1f8:	33 23       	and	r19, r19
    a1fa:	12 f4       	brpl	.+4      	; 0xa200 <__mulhisi3+0xc>
    a1fc:	8a 1b       	sub	r24, r26
    a1fe:	9b 0b       	sbc	r25, r27
    a200:	0c 94 13 51 	jmp	0xa226	; 0xa226 <__usmulhisi3_tail>

0000a204 <__umulhisi3>:
    a204:	a2 9f       	mul	r26, r18
    a206:	b0 01       	movw	r22, r0
    a208:	b3 9f       	mul	r27, r19
    a20a:	c0 01       	movw	r24, r0
    a20c:	a3 9f       	mul	r26, r19
    a20e:	70 0d       	add	r23, r0
    a210:	81 1d       	adc	r24, r1
    a212:	11 24       	eor	r1, r1
    a214:	91 1d       	adc	r25, r1
    a216:	b2 9f       	mul	r27, r18
    a218:	70 0d       	add	r23, r0
    a21a:	81 1d       	adc	r24, r1
    a21c:	11 24       	eor	r1, r1
    a21e:	91 1d       	adc	r25, r1
    a220:	08 95       	ret

0000a222 <__usmulhisi3>:
    a222:	0e 94 02 51 	call	0xa204	; 0xa204 <__umulhisi3>

0000a226 <__usmulhisi3_tail>:
    a226:	b7 ff       	sbrs	r27, 7
    a228:	08 95       	ret
    a22a:	82 1b       	sub	r24, r18
    a22c:	93 0b       	sbc	r25, r19
    a22e:	08 95       	ret

0000a230 <__muluhisi3>:
    a230:	0e 94 02 51 	call	0xa204	; 0xa204 <__umulhisi3>
    a234:	a5 9f       	mul	r26, r21
    a236:	90 0d       	add	r25, r0
    a238:	b4 9f       	mul	r27, r20
    a23a:	90 0d       	add	r25, r0
    a23c:	a4 9f       	mul	r26, r20
    a23e:	80 0d       	add	r24, r0
    a240:	91 1d       	adc	r25, r1
    a242:	11 24       	eor	r1, r1
    a244:	08 95       	ret

0000a246 <__mulshisi3>:
    a246:	b7 ff       	sbrs	r27, 7
    a248:	0c 94 18 51 	jmp	0xa230	; 0xa230 <__muluhisi3>

0000a24c <__mulohisi3>:
    a24c:	0e 94 18 51 	call	0xa230	; 0xa230 <__muluhisi3>
    a250:	82 1b       	sub	r24, r18
    a252:	93 0b       	sbc	r25, r19
    a254:	08 95       	ret

0000a256 <memcpy_P>:
    a256:	fb 01       	movw	r30, r22
    a258:	dc 01       	movw	r26, r24
    a25a:	02 c0       	rjmp	.+4      	; 0xa260 <memcpy_P+0xa>
    a25c:	05 90       	lpm	r0, Z+
    a25e:	0d 92       	st	X+, r0
    a260:	41 50       	subi	r20, 0x01	; 1
    a262:	50 40       	sbci	r21, 0x00	; 0
    a264:	d8 f7       	brcc	.-10     	; 0xa25c <memcpy_P+0x6>
    a266:	08 95       	ret

0000a268 <memmove>:
    a268:	68 17       	cp	r22, r24
    a26a:	79 07       	cpc	r23, r25
    a26c:	68 f4       	brcc	.+26     	; 0xa288 <memmove+0x20>
    a26e:	fb 01       	movw	r30, r22
    a270:	dc 01       	movw	r26, r24
    a272:	e4 0f       	add	r30, r20
    a274:	f5 1f       	adc	r31, r21
    a276:	a4 0f       	add	r26, r20
    a278:	b5 1f       	adc	r27, r21
    a27a:	02 c0       	rjmp	.+4      	; 0xa280 <memmove+0x18>
    a27c:	02 90       	ld	r0, -Z
    a27e:	0e 92       	st	-X, r0
    a280:	41 50       	subi	r20, 0x01	; 1
    a282:	50 40       	sbci	r21, 0x00	; 0
    a284:	d8 f7       	brcc	.-10     	; 0xa27c <memmove+0x14>
    a286:	08 95       	ret
    a288:	0c 94 91 51 	jmp	0xa322	; 0xa322 <memcpy>

0000a28c <__itoa_ncheck>:
    a28c:	bb 27       	eor	r27, r27
    a28e:	4a 30       	cpi	r20, 0x0A	; 10
    a290:	31 f4       	brne	.+12     	; 0xa29e <__itoa_ncheck+0x12>
    a292:	99 23       	and	r25, r25
    a294:	22 f4       	brpl	.+8      	; 0xa29e <__itoa_ncheck+0x12>
    a296:	bd e2       	ldi	r27, 0x2D	; 45
    a298:	90 95       	com	r25
    a29a:	81 95       	neg	r24
    a29c:	9f 4f       	sbci	r25, 0xFF	; 255
    a29e:	0c 94 52 51 	jmp	0xa2a4	; 0xa2a4 <__utoa_common>

0000a2a2 <__utoa_ncheck>:
    a2a2:	bb 27       	eor	r27, r27

0000a2a4 <__utoa_common>:
    a2a4:	fb 01       	movw	r30, r22
    a2a6:	55 27       	eor	r21, r21
    a2a8:	aa 27       	eor	r26, r26
    a2aa:	88 0f       	add	r24, r24
    a2ac:	99 1f       	adc	r25, r25
    a2ae:	aa 1f       	adc	r26, r26
    a2b0:	a4 17       	cp	r26, r20
    a2b2:	10 f0       	brcs	.+4      	; 0xa2b8 <__utoa_common+0x14>
    a2b4:	a4 1b       	sub	r26, r20
    a2b6:	83 95       	inc	r24
    a2b8:	50 51       	subi	r21, 0x10	; 16
    a2ba:	b9 f7       	brne	.-18     	; 0xa2aa <__utoa_common+0x6>
    a2bc:	a0 5d       	subi	r26, 0xD0	; 208
    a2be:	aa 33       	cpi	r26, 0x3A	; 58
    a2c0:	08 f0       	brcs	.+2      	; 0xa2c4 <__utoa_common+0x20>
    a2c2:	a9 5d       	subi	r26, 0xD9	; 217
    a2c4:	a1 93       	st	Z+, r26
    a2c6:	00 97       	sbiw	r24, 0x00	; 0
    a2c8:	79 f7       	brne	.-34     	; 0xa2a8 <__utoa_common+0x4>
    a2ca:	b1 11       	cpse	r27, r1
    a2cc:	b1 93       	st	Z+, r27
    a2ce:	11 92       	st	Z+, r1
    a2d0:	cb 01       	movw	r24, r22
    a2d2:	0c 94 9a 51 	jmp	0xa334	; 0xa334 <strrev>

0000a2d6 <__eerd_block_m644pa>:
    a2d6:	dc 01       	movw	r26, r24
    a2d8:	cb 01       	movw	r24, r22

0000a2da <__eerd_blraw_m644pa>:
    a2da:	fc 01       	movw	r30, r24
    a2dc:	f9 99       	sbic	0x1f, 1	; 31
    a2de:	fe cf       	rjmp	.-4      	; 0xa2dc <__eerd_blraw_m644pa+0x2>
    a2e0:	06 c0       	rjmp	.+12     	; 0xa2ee <__eerd_blraw_m644pa+0x14>
    a2e2:	f2 bd       	out	0x22, r31	; 34
    a2e4:	e1 bd       	out	0x21, r30	; 33
    a2e6:	f8 9a       	sbi	0x1f, 0	; 31
    a2e8:	31 96       	adiw	r30, 0x01	; 1
    a2ea:	00 b4       	in	r0, 0x20	; 32
    a2ec:	0d 92       	st	X+, r0
    a2ee:	41 50       	subi	r20, 0x01	; 1
    a2f0:	50 40       	sbci	r21, 0x00	; 0
    a2f2:	b8 f7       	brcc	.-18     	; 0xa2e2 <__eerd_blraw_m644pa+0x8>
    a2f4:	08 95       	ret

0000a2f6 <__eerd_byte_m644pa>:
    a2f6:	f9 99       	sbic	0x1f, 1	; 31
    a2f8:	fe cf       	rjmp	.-4      	; 0xa2f6 <__eerd_byte_m644pa>
    a2fa:	92 bd       	out	0x22, r25	; 34
    a2fc:	81 bd       	out	0x21, r24	; 33
    a2fe:	f8 9a       	sbi	0x1f, 0	; 31
    a300:	99 27       	eor	r25, r25
    a302:	80 b5       	in	r24, 0x20	; 32
    a304:	08 95       	ret

0000a306 <__eewr_byte_m644pa>:
    a306:	26 2f       	mov	r18, r22

0000a308 <__eewr_r18_m644pa>:
    a308:	f9 99       	sbic	0x1f, 1	; 31
    a30a:	fe cf       	rjmp	.-4      	; 0xa308 <__eewr_r18_m644pa>
    a30c:	1f ba       	out	0x1f, r1	; 31
    a30e:	92 bd       	out	0x22, r25	; 34
    a310:	81 bd       	out	0x21, r24	; 33
    a312:	20 bd       	out	0x20, r18	; 32
    a314:	0f b6       	in	r0, 0x3f	; 63
    a316:	f8 94       	cli
    a318:	fa 9a       	sbi	0x1f, 2	; 31
    a31a:	f9 9a       	sbi	0x1f, 1	; 31
    a31c:	0f be       	out	0x3f, r0	; 63
    a31e:	01 96       	adiw	r24, 0x01	; 1
    a320:	08 95       	ret

0000a322 <memcpy>:
    a322:	fb 01       	movw	r30, r22
    a324:	dc 01       	movw	r26, r24
    a326:	02 c0       	rjmp	.+4      	; 0xa32c <memcpy+0xa>
    a328:	01 90       	ld	r0, Z+
    a32a:	0d 92       	st	X+, r0
    a32c:	41 50       	subi	r20, 0x01	; 1
    a32e:	50 40       	sbci	r21, 0x00	; 0
    a330:	d8 f7       	brcc	.-10     	; 0xa328 <memcpy+0x6>
    a332:	08 95       	ret

0000a334 <strrev>:
    a334:	dc 01       	movw	r26, r24
    a336:	fc 01       	movw	r30, r24
    a338:	67 2f       	mov	r22, r23
    a33a:	71 91       	ld	r23, Z+
    a33c:	77 23       	and	r23, r23
    a33e:	e1 f7       	brne	.-8      	; 0xa338 <strrev+0x4>
    a340:	32 97       	sbiw	r30, 0x02	; 2
    a342:	04 c0       	rjmp	.+8      	; 0xa34c <strrev+0x18>
    a344:	7c 91       	ld	r23, X
    a346:	6d 93       	st	X+, r22
    a348:	70 83       	st	Z, r23
    a34a:	62 91       	ld	r22, -Z
    a34c:	ae 17       	cp	r26, r30
    a34e:	bf 07       	cpc	r27, r31
    a350:	c8 f3       	brcs	.-14     	; 0xa344 <strrev+0x10>
    a352:	08 95       	ret

0000a354 <_exit>:
    a354:	f8 94       	cli

0000a356 <__stop_program>:
    a356:	ff cf       	rjmp	.-2      	; 0xa356 <__stop_program>
