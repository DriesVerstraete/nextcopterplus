
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000426  00800100  0000e100  0000e194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e100  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047f  00800526  00800526  0000e5ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000e5ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000e5ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000790  00000000  00000000  0000e630  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e32d  00000000  00000000  0000edc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046b6  00000000  00000000  0002d0ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005105  00000000  00000000  000317a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001934  00000000  00000000  000368a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003561  00000000  00000000  000381dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c77e  00000000  00000000  0003b73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  00047ebb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__ctors_end>
       4:	0c 94 5e 43 	jmp	0x86bc	; 0x86bc <__vector_1>
       8:	0c 94 1c 43 	jmp	0x8638	; 0x8638 <__vector_2>
       c:	0c 94 2f 44 	jmp	0x885e	; 0x885e <__vector_3>
      10:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      14:	0c 94 e4 43 	jmp	0x87c8	; 0x87c8 <__vector_5>
      18:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      1c:	0c 94 a1 43 	jmp	0x8742	; 0x8742 <__vector_7>
      20:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      24:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      28:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      2c:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      30:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      34:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      38:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      3c:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      40:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      44:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      48:	0c 94 05 43 	jmp	0x860a	; 0x860a <__vector_18>
      4c:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      50:	0c 94 fd 44 	jmp	0x89fa	; 0x89fa <__vector_20>
      54:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      58:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      5c:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      60:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      64:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      68:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      6c:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      70:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      74:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      78:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__bad_interrupt>
      7c:	88 2e       	mov	r8, r24
      7e:	9a 2e       	mov	r9, r26
      80:	9a 2e       	mov	r9, r26
      82:	9a 2e       	mov	r9, r26
      84:	8a 2e       	mov	r8, r26
      86:	9a 2e       	mov	r9, r26
      88:	9a 2e       	mov	r9, r26
      8a:	9a 2e       	mov	r9, r26
      8c:	8c 2e       	mov	r8, r28
      8e:	8e 2e       	mov	r8, r30
      90:	90 2e       	mov	r9, r16
      92:	92 2e       	mov	r9, r18
      94:	94 2e       	mov	r9, r20
      96:	96 2e       	mov	r9, r22
      98:	9c 2e       	mov	r9, r28
      9a:	9c 2e       	mov	r9, r28
      9c:	33 2f       	mov	r19, r19
      9e:	e1 2f       	mov	r30, r17
      a0:	e1 2f       	mov	r30, r17
      a2:	45 2f       	mov	r20, r21
      a4:	53 2f       	mov	r21, r19
      a6:	5e 2f       	mov	r21, r30
      a8:	5a 2f       	mov	r21, r26
      aa:	74 2f       	mov	r23, r20
      ac:	81 2f       	mov	r24, r17
      ae:	87 2f       	mov	r24, r23
      b0:	9a 2f       	mov	r25, r26
      b2:	b2 4e       	sbci	r27, 0xE2	; 226
      b4:	a6 4e       	sbci	r26, 0xE6	; 230
      b6:	a8 4e       	sbci	r26, 0xE8	; 232
      b8:	aa 4e       	sbci	r26, 0xEA	; 234
      ba:	ac 4e       	sbci	r26, 0xEC	; 236
      bc:	ae 4e       	sbci	r26, 0xEE	; 238
      be:	b0 4e       	sbci	r27, 0xE0	; 224
      c0:	b0 4e       	sbci	r27, 0xE0	; 224
      c2:	0b 4f       	sbci	r16, 0xFB	; 251
      c4:	0f 4f       	sbci	r16, 0xFF	; 255
      c6:	13 4f       	sbci	r17, 0xF3	; 243
      c8:	17 4f       	sbci	r17, 0xF7	; 247
      ca:	1b 4f       	sbci	r17, 0xFB	; 251
      cc:	1f 4f       	sbci	r17, 0xFF	; 255
      ce:	24 4f       	sbci	r18, 0xF4	; 244
      d0:	31 4f       	sbci	r19, 0xF1	; 241
      d2:	35 4f       	sbci	r19, 0xF5	; 245
      d4:	39 4f       	sbci	r19, 0xF9	; 249
      d6:	3d 4f       	sbci	r19, 0xFD	; 253
      d8:	41 4f       	sbci	r20, 0xF1	; 241
      da:	45 4f       	sbci	r20, 0xF5	; 245
      dc:	48 4f       	sbci	r20, 0xF8	; 248
      de:	3f 50       	subi	r19, 0x0F	; 15
      e0:	43 50       	subi	r20, 0x03	; 3
      e2:	47 50       	subi	r20, 0x07	; 7
      e4:	4b 50       	subi	r20, 0x0B	; 11
      e6:	4f 50       	subi	r20, 0x0F	; 15
      e8:	53 50       	subi	r21, 0x03	; 3
      ea:	56 50       	subi	r21, 0x06	; 6
      ec:	5a 50       	subi	r21, 0x0A	; 10
      ee:	67 50       	subi	r22, 0x07	; 7
      f0:	6a 50       	subi	r22, 0x0A	; 10
      f2:	6e 50       	subi	r22, 0x0E	; 14
      f4:	72 50       	subi	r23, 0x02	; 2
      f6:	76 50       	subi	r23, 0x06	; 6
      f8:	7d 50       	subi	r23, 0x0D	; 13
      fa:	80 50       	subi	r24, 0x00	; 0
      fc:	87 50       	subi	r24, 0x07	; 7
      fe:	35 53       	subi	r19, 0x35	; 53
     100:	37 53       	subi	r19, 0x37	; 55
     102:	3a 53       	subi	r19, 0x3A	; 58
     104:	3c 53       	subi	r19, 0x3C	; 60
     106:	3e 53       	subi	r19, 0x3E	; 62
     108:	40 53       	subi	r20, 0x30	; 48
     10a:	42 53       	subi	r20, 0x32	; 50
     10c:	44 53       	subi	r20, 0x34	; 52
     10e:	47 53       	subi	r20, 0x37	; 55
     110:	49 53       	subi	r20, 0x39	; 57
     112:	4b 53       	subi	r20, 0x3B	; 59
     114:	4d 53       	subi	r20, 0x3D	; 61
     116:	50 53       	subi	r21, 0x30	; 48
     118:	52 53       	subi	r21, 0x32	; 50
     11a:	54 53       	subi	r21, 0x34	; 52
     11c:	56 53       	subi	r21, 0x36	; 54
     11e:	58 53       	subi	r21, 0x38	; 56
     120:	5a 53       	subi	r21, 0x3A	; 58
     122:	5c 53       	subi	r21, 0x3C	; 60
     124:	5e 53       	subi	r21, 0x3E	; 62
     126:	60 53       	subi	r22, 0x30	; 48
     128:	63 53       	subi	r22, 0x33	; 51
     12a:	65 53       	subi	r22, 0x35	; 53
     12c:	67 53       	subi	r22, 0x37	; 55
     12e:	e7 57       	subi	r30, 0x77	; 119
     130:	cb 57       	subi	r28, 0x7B	; 123
     132:	ce 57       	subi	r28, 0x7E	; 126
     134:	d1 57       	subi	r29, 0x71	; 113
     136:	d4 57       	subi	r29, 0x74	; 116
     138:	d7 57       	subi	r29, 0x77	; 119
     13a:	da 57       	subi	r29, 0x7A	; 122
     13c:	dd 57       	subi	r29, 0x7D	; 125
     13e:	e0 57       	subi	r30, 0x70	; 112
     140:	ea 6c       	ori	r30, 0xCA	; 202
     142:	ea 6c       	ori	r30, 0xCA	; 202
     144:	b0 6c       	ori	r27, 0xC0	; 192
     146:	cd 6c       	ori	r28, 0xCD	; 205
     148:	a7 6c       	ori	r26, 0xC7	; 199
     14a:	cd 6c       	ori	r28, 0xCD	; 205
     14c:	cd 6c       	ori	r28, 0xCD	; 205

0000014e <Acc_Pol>:
     14e:	ff ff 01 01 ff 01 01 01 01 ff 01 01 ff ff ff 01     ................
     15e:	ff ff 01 ff 01 ff ff 01 01 ff ff ff ff ff ff 01     ................
     16e:	ff 01 01 ff 01 01 ff ff 01 ff ff 01 01 01 01 01     ................
     17e:	01 ff ff 01 01 ff 01 01 01 01 ff 01 ff 01 ff ff     ................
     18e:	ff ff ff ff 01 ff 01 01                             ........

00000196 <ACC_RPY_Order>:
     196:	00 01 02 01 00 02 00 01 02 01 00 02 00 02 01 01     ................
     1a6:	02 00 00 02 01 01 02 00 00 01 02 01 00 02 00 01     ................
     1b6:	02 01 00 02 00 02 01 01 02 00 00 02 01 01 02 00     ................
     1c6:	02 00 01 02 01 00 02 00 01 02 01 00 02 00 01 02     ................
     1d6:	01 00 02 00 01 02 01 00                             ........

000001de <MPX>:
     1de:	01 02 03 05 00 04 06 07                             ........

000001e6 <FUTABA>:
     1e6:	01 02 00 03 04 05 06 07                             ........

000001ee <JR>:
     1ee:	00 01 02 03 04 05 06 07                             ........

000001f6 <Trans_Matrix>:
     1f6:	05 02 06 01 05 08 03 07 05                          .........

000001ff <Wingdings>:
     1ff:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     20f:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     21f:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     22f:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     23f:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     24f:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     25f:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000269 <Verdana22>:
     269:	01 02 2d 0d 1d 00 1f 00 44 00 44 00 44 00 7d 00     ..-.....D.D.D.}.
     279:	aa 00 e3 01 1c 01 5d 01 92 01 cb 02 04 02 3d 09     ......].......=.
     289:	00 70 00 00 00 70 00 00 00 70 00 00 00 70 00 00     .p...p...p...p..
     299:	00 70 00 00 00 70 00 00 00 70 00 00 00 70 00 00     .p...p...p...p..
     2a9:	00 70 00 00 0e 80 ff 01 00 f0 ff 0f 00 f8 ff 1f     .p..............
     2b9:	00 7c 00 3e 00 1e 00 78 00 0e 00 70 00 0e 00 70     .|.>...x...p...p
     2c9:	00 0e 00 70 00 0e 00 70 00 1e 00 78 00 7c 00 3e     ...p...p...x.|.>
     2d9:	00 f8 ff 1f 00 f0 ff 0f 00 80 ff 01 00 0b 70 00     ..............p.
     2e9:	70 00 70 00 70 00 70 00 70 00 78 00 70 00 fc ff     p.p.p.p.p.x.p...
     2f9:	7f 00 fe ff 7f 00 fe ff 7f 00 00 00 70 00 00 00     ............p...
     309:	70 00 00 00 70 00 00 00 70 00 0e 00 00 78 00 1c     p...p...p....x..
     319:	00 7c 00 1c 00 7e 00 0e 00 77 00 0e 00 77 00 0e     .|...~...w...w..
     329:	80 73 00 0e c0 71 00 0e e0 70 00 1e 78 70 00 1e     .s...q...p..xp..
     339:	3c 70 00 fc 1f 70 00 f8 07 70 00 f0 03 70 00 00     <p...p...p...p..
     349:	00 70 00 0e 00 00 38 00 1c 00 38 00 1c 00 70 00     .p....8...8...p.
     359:	0e 00 70 00 0e 00 70 00 0e 1c 70 00 0e 1c 70 00     ..p...p...p...p.
     369:	0e 1c 70 00 0e 1c 70 00 0e 3e 78 00 1c 37 3c 00     ..p...p..>x..7<.
     379:	fc f3 3f 00 f8 e3 1f 00 f0 c0 07 00 10 00 e0 01     ..?.............
     389:	00 00 f0 01 00 00 fc 01 00 00 fe 01 00 00 df 01     ................
     399:	00 80 cf 01 00 e0 c3 01 00 f0 c1 01 00 f8 c0 01     ................
     3a9:	00 7c c0 01 00 fe ff 7f 00 fe ff 7f 00 fe ff 7f     .|..............
     3b9:	00 00 c0 01 00 00 c0 01 00 00 c0 01 00 0d 00 00     ................
     3c9:	38 00 fe 1f 38 00 fe 0f 70 00 fe 0f 70 00 0e 0e     8...8...p...p...
     3d9:	70 00 0e 0e 70 00 0e 0e 70 00 0e 0e 70 00 0e 1e     p...p...p...p...
     3e9:	78 00 0e 3c 3c 00 0e fc 1f 00 0e f8 0f 00 0e e0     x..<<...........
     3f9:	07 00 0e 00 fe 03 00 c0 ff 0f 00 f0 ff 1f 00 f8     ................
     409:	1c 3e 00 3c 0c 78 00 1c 0e 70 00 1e 0e 70 00 0e     .>.<.x...p...p..
     419:	0e 70 00 0e 0e 70 00 0e 1e 78 00 0e 3c 3c 00 1e     .p...p...x..<<..
     429:	fc 1f 00 00 f8 0f 00 00 e0 07 00 0e 0e 00 00 00     ................
     439:	0e 00 00 00 0e 00 40 00 0e 00 70 00 0e 00 7c 00     ......@...p...|.
     449:	0e 00 7f 00 0e c0 1f 00 0e f0 07 00 0e fc 00 00     ................
     459:	0e 3f 00 00 ce 0f 00 00 fe 03 00 00 fe 00 00 00     .?..............
     469:	3e 00 00 00 0e 00 c0 07 00 f0 e1 1f 00 f8 f3 3f     >..............?
     479:	00 fc 3f 3c 00 1e 1f 78 00 0e 0e 70 00 0e 0c 70     ..?<...x...p...p
     489:	00 0e 1c 70 00 0e 18 70 00 1e 3c 78 00 fc 7f 3c     ...p...p..<x...<
     499:	00 f8 f3 3f 00 f0 e1 1f 00 00 c0 07 00 0e e0 07     ...?............
     4a9:	00 00 f0 1f 00 00 f8 3f 78 00 3c 3c 70 00 1e 78     .......?x.<<p..x
     4b9:	70 00 0e 70 70 00 0e 70 70 00 0e 70 78 00 0e 70     p..pp..pp..px..p
     4c9:	38 00 1e 30 3c 00 7c 38 1f 00 f8 ff 0f 00 f0 ff     8..0<.|8........
     4d9:	03 00 c0 7f 00 00                                   ......

000004df <Verdana14>:
     4df:	01 02 20 5f 13 00 c3 00 cd 00 d4 00 e7 01 0c 01     .. _............
     4ef:	28 01 5f 01 87 01 8e 01 a1 01 b4 01 d0 01 f5 02     (._.............
     4ff:	02 02 15 02 1c 02 35 02 54 02 6d 02 89 02 a5 02     ......5.T.m.....
     50f:	c4 02 e0 02 ff 03 1b 03 3a 03 59 03 60 03 6d 03     ........:.Y.`.m.
     51f:	8f 03 b1 03 d3 03 ec 04 1d 04 45 04 64 04 86 04     ..........E.d...
     52f:	ab 04 c7 04 e3 05 0b 05 2a 05 3d 05 53 05 75 05     ........*.=.S.u.
     53f:	91 05 b6 05 d5 05 fd 06 16 06 3e 06 60 06 82 06     ..........>.`...
     54f:	a7 06 c6 06 ee 07 22 07 44 07 69 07 8b 07 9b 07     ......".D.i.....
     55f:	b4 07 c4 07 e9 08 0e 08 1b 08 34 08 50 08 69 08     ..........4.P.i.
     56f:	85 08 a1 08 b4 08 d0 08 e9 08 f0 09 00 09 1c 09     ................
     57f:	23 09 4e 09 67 09 86 09 a2 09 be 09 d1 09 ea 09     #.N.g...........
     58f:	fd 0a 16 0a 32 0a 5d 0a 79 0a 95 0a ae 0a ca 0a     ....2.].y.......
     59f:	d1 0a ed 03 00 00 00 00 00 00 00 00 00 02 fe 67     ...............g
     5af:	00 fe 67 00 06 1f 00 00 1f 00 00 00 00 00 00 00     ..g.............
     5bf:	00 1f 00 00 1f 00 00 0c 00 04 00 20 04 00 20 64     ........... .. d
     5cf:	00 20 1f 00 f8 04 00 26 04 00 20 64 00 20 1f 00     . .....&.. d. ..
     5df:	f8 04 00 26 04 00 20 04 00 20 00 00 09 e0 30 00     ...&.. .. ....0.
     5ef:	f0 61 00 98 61 00 18 63 00 ff ff 03 18 63 00 18     .a..a..c.....c..
     5ff:	62 00 18 3e 00 18 1c 00 12 78 00 00 fe 01 00 02     b..>.....x......
     60f:	01 00 02 01 00 02 01 00 fe 41 00 78 70 00 00 1c     .........A.xp...
     61f:	00 00 07 00 e0 00 00 38 00 00 0e 1e 00 82 7f 00     .......8........
     62f:	80 40 00 80 40 00 80 40 00 80 7f 00 00 1e 00 0d     .@..@..@........
     63f:	00 1e 00 3c 3f 00 fc 71 00 c6 60 00 c6 60 00 c6     ...<?..q..`..`..
     64f:	61 00 7e 63 00 3c 36 00 00 1c 00 80 1f 00 80 37     a.~c.<6........7
     65f:	00 00 60 00 00 40 00 02 1f 00 00 1f 00 00 06 c0     ..`..@..........
     66f:	1f 00 f8 ff 00 3c e0 01 07 00 07 03 00 06 01 00     .....<..........
     67f:	04 06 01 00 04 03 00 06 07 00 07 3c e0 01 f8 ff     ...........<....
     68f:	00 c0 1f 00 09 c6 00 00 44 00 00 6c 00 00 28 00     ........D..l..(.
     69f:	00 ff 01 00 28 00 00 6c 00 00 44 00 00 c6 00 00     ....(..l..D.....
     6af:	0c 00 03 00 00 03 00 00 03 00 00 03 00 00 03 00     ................
     6bf:	f8 7f 00 f8 7f 00 00 03 00 00 03 00 00 03 00 00     ................
     6cf:	03 00 00 03 00 04 00 00 03 00 f0 03 00 70 00 00     .............p..
     6df:	10 00 06 00 03 00 00 03 00 00 03 00 00 03 00 00     ................
     6ef:	03 00 00 03 00 02 00 70 00 00 70 00 08 00 00 03     .......p..p.....
     6ff:	00 e0 03 00 fc 01 80 3f 00 f0 07 00 fe 00 00 1f     .......?........
     70f:	00 00 03 00 00 0a f0 0f 00 fc 3f 00 0c 30 00 06     ..........?..0..
     71f:	60 00 06 60 00 06 60 00 06 60 00 0c 30 00 fc 3f     `..`..`..`..0..?
     72f:	00 f0 0f 00 08 18 60 00 18 60 00 18 60 00 fe 7f     ......`..`..`...
     73f:	00 fe 7f 00 00 60 00 00 60 00 00 60 00 09 0c 70     .....`..`..`...p
     74f:	00 06 78 00 06 6c 00 06 66 00 06 63 00 8e 61 00     ..x..l..f..c..a.
     75f:	fc 60 00 78 60 00 00 60 00 09 0c 30 00 06 60 00     .`.x`..`...0..`.
     76f:	06 60 00 86 61 00 86 61 00 86 61 00 ce 73 00 7c     .`..a..a..a..s.|
     77f:	3f 00 38 1e 00 0a 00 07 00 80 07 00 c0 07 00 f0     ?.8.............
     78f:	06 00 38 06 00 1c 06 00 fe 7f 00 fe 7f 00 00 06     ..8.............
     79f:	00 00 06 00 09 00 30 00 fe 60 00 fe 60 00 c6 60     ......0..`..`..`
     7af:	00 c6 60 00 c6 60 00 c6 31 00 86 3f 00 06 0f 00     ..`..`..1..?....
     7bf:	0a e0 0f 00 f0 3f 00 9c 30 00 cc 60 00 c6 60 00     .....?..0..`..`.
     7cf:	c6 60 00 c6 60 00 c6 31 00 86 3f 00 00 0f 00 09     .`..`..1..?.....
     7df:	06 00 00 06 40 00 06 70 00 06 7c 00 06 0f 00 c6     ....@..p..|.....
     7ef:	03 00 f6 00 00 3e 00 00 0e 00 00 0a 38 1e 00 7c     .....>......8..|
     7ff:	3f 00 ce 71 00 c6 60 00 c6 60 00 86 61 00 86 61     ?..q..`..`..a..a
     80f:	00 4e 73 00 7c 3f 00 38 1e 00 0a f0 00 00 fc 61     .Ns.|?.8.......a
     81f:	00 8c 63 00 06 63 00 06 63 00 06 63 00 06 33 00     ..c..c..c..c..3.
     82f:	0c 39 00 fc 1f 00 f0 07 00 02 70 70 00 70 70 00     .9........pp.pp.
     83f:	04 00 00 03 70 f0 03 70 70 00 00 10 00 0b 00 01     ....p..pp.......
     84f:	00 80 03 00 80 03 00 c0 06 00 c0 06 00 60 0c 00     .............`..
     85f:	60 0c 00 30 18 00 30 18 00 18 30 00 18 30 00 0b     `..0..0...0..0..
     86f:	c0 0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0     ................
     87f:	0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0 0c     ................
     88f:	00 0b 18 30 00 18 30 00 30 18 00 30 18 00 60 0c     ...0..0.0..0..`.
     89f:	00 60 0c 00 c0 06 00 c0 06 00 80 03 00 80 03 00     .`..............
     8af:	00 01 00 08 0c 00 00 06 00 00 06 67 00 06 67 00     ...........g..g.
     8bf:	86 01 00 ce 00 00 fc 00 00 38 00 00 10 c0 0f 00     .........8......
     8cf:	f0 3f 00 38 70 00 0c c0 00 84 8f 00 c6 9f 01 62     .?.8p..........b
     8df:	30 01 22 20 01 22 20 01 22 10 01 e2 3f 01 e4 bf     0." ." ."...?...
     8ef:	01 0c 20 00 38 20 00 f0 3f 00 c0 0f 00 0d 00 40     .. .8 ..?......@
     8ff:	00 00 78 00 00 3f 00 c0 07 00 f8 06 00 3e 06 00     ..x..?.......>..
     90f:	06 06 00 3e 06 00 f8 06 00 c0 07 00 00 3f 00 00     ...>.........?..
     91f:	78 00 00 40 00 0a fe 7f 00 fe 7f 00 86 61 00 86     x..@.........a..
     92f:	61 00 86 61 00 86 61 00 c6 61 00 7c 73 00 3c 3f     a..a..a..a.|s.<?
     93f:	00 00 1e 00 0b e0 07 00 f8 1f 00 1c 38 00 0c 30     ............8..0
     94f:	00 06 60 00 06 60 00 06 60 00 06 60 00 06 60 00     ..`..`..`..`..`.
     95f:	06 20 00 0c 30 00 0c fe 7f 00 fe 7f 00 06 60 00     . ..0.........`.
     96f:	06 60 00 06 60 00 06 60 00 06 60 00 0e 70 00 0c     .`..`..`..`..p..
     97f:	30 00 38 1c 00 f8 0f 00 e0 07 00 09 fe 7f 00 fe     0.8.............
     98f:	7f 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 c6 60     ...`..`..`..`..`
     99f:	00 c6 60 00 c6 60 00 09 fe 7f 00 fe 7f 00 86 01     ..`..`..........
     9af:	00 86 01 00 86 01 00 86 01 00 86 01 00 86 01 00     ................
     9bf:	06 00 00 0d e0 07 00 f8 1f 00 3c 3c 00 0c 30 00     ..........<<..0.
     9cf:	0e 70 00 06 60 00 06 60 00 06 63 00 06 63 00 06     .p..`..`..c..c..
     9df:	63 00 06 63 00 0c 3f 00 0c 3f 00 0a fe 7f 00 fe     c..c..?..?......
     9ef:	7f 00 c0 00 00 c0 00 00 c0 00 00 c0 00 00 c0 00     ................
     9ff:	00 c0 00 00 fe 7f 00 fe 7f 00 06 06 60 00 06 60     ............`..`
     a0f:	00 fe 7f 00 fe 7f 00 06 60 00 06 60 00 07 00 60     ........`..`...`
     a1f:	00 00 60 00 06 60 00 06 60 00 06 70 00 fe 3f 00     ..`..`..`..p..?.
     a2f:	fe 1f 00 0b fe 7f 00 fe 7f 00 80 03 00 c0 01 00     ................
     a3f:	e0 03 00 70 07 00 38 1c 00 1c 38 00 0e 70 00 06     ...p..8...8..p..
     a4f:	60 00 02 40 00 09 fe 7f 00 fe 7f 00 00 60 00 00     `..@.........`..
     a5f:	60 00 00 60 00 00 60 00 00 60 00 00 60 00 00 60     `..`..`..`..`..`
     a6f:	00 0c fe 7f 00 fe 7f 00 0e 00 00 38 00 00 e0 01     ...........8....
     a7f:	00 80 07 00 00 07 00 e0 01 00 38 00 00 0e 00 00     ..........8.....
     a8f:	fe 7f 00 fe 7f 00 0a fe 7f 00 fe 7f 00 0e 00 00     ................
     a9f:	3c 00 00 e0 00 00 80 03 00 00 1e 00 00 78 00 fe     <............x..
     aaf:	7f 00 fe 7f 00 0d e0 07 00 f8 1f 00 1c 38 00 0c     .............8..
     abf:	30 00 06 60 00 06 60 00 06 60 00 06 60 00 06 60     0..`..`..`..`..`
     acf:	00 0c 30 00 1c 38 00 f8 1f 00 e0 07 00 08 fe 7f     ..0..8..........
     adf:	00 fe 7f 00 06 03 00 06 03 00 06 03 00 8e 03 00     ................
     aef:	fc 01 00 f8 00 00 0d e0 07 00 f8 1f 00 1c 38 00     ..............8.
     aff:	0c 30 00 06 60 00 06 60 00 06 60 00 06 e0 01 06     .0..`..`..`.....
     b0f:	e0 03 0c 30 07 1c 38 06 f8 1f 06 e0 07 06 0b fe     ...0..8.........
     b1f:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 07     ................
     b2f:	00 ce 0e 00 fc 1c 00 78 70 00 00 60 00 00 40 00     .......xp..`..@.
     b3f:	0b 78 30 00 fc 70 00 ce 60 00 86 61 00 86 61 00     .x0..p..`..a..a.
     b4f:	86 61 00 86 61 00 86 61 00 06 33 00 0c 3f 00 00     .a..a..a..3..?..
     b5f:	1e 00 0c 06 00 00 06 00 00 06 00 00 06 00 00 06     ................
     b6f:	00 00 fe 7f 00 fe 7f 00 06 00 00 06 00 00 06 00     ................
     b7f:	00 06 00 00 06 00 00 0a fe 0f 00 fe 3f 00 00 70     ............?..p
     b8f:	00 00 60 00 00 60 00 00 60 00 00 60 00 00 70 00     ..`..`..`..`..p.
     b9f:	fe 3f 00 fe 0f 00 0d 02 00 00 1e 00 00 fc 00 00     .?..............
     baf:	e0 03 00 80 1f 00 00 7c 00 00 60 00 00 7c 00 80     .......|..`..|..
     bbf:	1f 00 e0 03 00 fc 00 00 1e 00 00 02 00 00 11 06     ................
     bcf:	00 00 7e 00 00 f8 07 00 80 3f 00 00 78 00 00 7c     ..~......?..x..|
     bdf:	00 c0 0f 00 7e 00 00 06 00 00 7e 00 00 e0 07 00     ....~.....~.....
     bef:	00 7e 00 00 70 00 80 7f 00 f8 07 00 7e 00 00 06     .~..p.......~...
     bff:	00 00 0b 02 40 00 06 60 00 1e 78 00 38 1c 00 e0     ....@..`..x.8...
     c0f:	07 00 80 01 00 e0 07 00 38 1e 00 1e 78 00 06 60     ........8...x..`
     c1f:	00 02 40 00 0c 02 00 00 06 00 00 1e 00 00 78 00     ..@...........x.
     c2f:	00 e0 00 00 c0 7f 00 c0 7f 00 e0 00 00 78 00 00     .............x..
     c3f:	1e 00 00 06 00 00 02 00 00 0b 06 70 00 06 78 00     ...........p..x.
     c4f:	06 7c 00 06 6e 00 06 67 00 c6 63 00 e6 60 00 76     .|..n..g..c..`.v
     c5f:	60 00 3e 60 00 1e 60 00 0e 60 00 05 ff ff 07 ff     `.>`..`..`......
     c6f:	ff 07 01 00 04 01 00 04 01 00 04 08 03 00 00 1f     ................
     c7f:	00 00 fe 00 00 f0 07 00 80 3f 00 00 fc 01 00 e0     .........?......
     c8f:	03 00 00 03 05 01 00 04 01 00 04 01 00 04 ff ff     ................
     c9f:	07 ff ff 07 0c 80 00 00 c0 00 00 60 00 00 38 00     ...........`..8.
     caf:	00 0c 00 00 06 00 00 06 00 00 1c 00 00 38 00 00     .............8..
     cbf:	60 00 00 c0 00 00 80 00 00 0c 00 00 02 00 00 02     `...............
     ccf:	00 00 02 00 00 02 00 00 02 00 00 02 00 00 02 00     ................
     cdf:	00 02 00 00 02 00 00 02 00 00 02 00 00 02 04 01     ................
     cef:	00 00 03 00 00 07 00 00 04 00 00 08 00 3c 00 30     .............<.0
     cff:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     d0f:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     d1f:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     d2f:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     d3f:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     d4f:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     d5f:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     d6f:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     d7f:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     d8f:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     d9f:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     daf:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     dbf:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     dcf:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     ddf:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     def:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     dff:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     e0f:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     e1f:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     e2f:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     e3f:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     e4f:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     e5f:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     e6f:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     e7f:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     e8f:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     e9f:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     eaf:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     ebf:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     ecf:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     edf:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     eef:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     eff:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     f0f:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     f1f:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     f2f:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     f3f:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     f4f:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     f5f:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     f6f:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     f7f:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000f8d <Verdana8>:
     f8d:	01 02 20 5f 0b 00 c3 00 c6 00 c9 00 d0 00 df 00     .. _............
     f9d:	ea 00 ff 01 0e 01 11 01 18 01 1f 01 2a 01 39 01     ............*.9.
     fad:	3e 01 45 01 48 01 53 01 5e 01 69 01 74 01 7f 01     >.E.H.S.^.i.t...
     fbd:	8c 01 97 01 a2 01 ad 01 b8 01 c3 01 c6 01 cb 01     ................
     fcd:	d8 01 e7 01 f4 01 fd 02 0e 02 1b 02 28 02 37 02     ............(.7.
     fdd:	46 02 51 02 5c 02 6b 02 78 02 7f 02 88 02 95 02     F.Q.\.k.x.......
     fed:	a0 02 af 02 bc 02 cb 02 d6 02 e5 02 f2 02 ff 03     ................
     ffd:	0e 03 1b 03 28 03 3b 03 48 03 57 03 64 03 6b 03     ....(.;.H.W.d.k.
    100d:	76 03 7d 03 8c 03 9b 03 a0 03 ab 03 b6 03 c1 03     v.}.............
    101d:	cc 03 d7 03 e0 03 eb 03 f6 03 f9 04 00 04 0b 04     ................
    102d:	0e 04 21 04 2c 04 37 04 42 04 4d 04 56 04 5f 04     ..!.,.7.B.M.V._.
    103d:	68 04 73 04 7e 04 8d 04 98 04 a3 04 ac 04 b7 04     h.s.~...........
    104d:	ba 04 c5 01 00 00 01 7e 01 03 07 00 00 00 07 00     .......~........
    105d:	07 40 00 c8 01 78 00 ce 01 78 00 4e 00 08 00 05     .@...x...x.N....
    106d:	18 01 24 01 ff 07 24 01 c4 00 0a 0c 00 12 00 12     ..$...$.........
    107d:	00 8c 01 60 00 18 00 c6 00 20 01 20 01 c0 00 07     ...`..... . ....
    108d:	ec 00 12 01 12 01 2c 01 c0 00 b0 00 00 01 01 07     ......,.........
    109d:	00 03 f8 00 06 03 01 04 03 01 04 06 03 f8 00 05     ................
    10ad:	0a 00 04 00 1f 00 04 00 0a 00 07 20 00 20 00 20     ........... . . 
    10bd:	00 fc 01 20 00 20 00 20 00 02 00 04 80 03 03 20     ... . . ....... 
    10cd:	00 20 00 20 00 01 80 01 05 00 03 c0 00 30 00 0c     . . .........0..
    10dd:	00 03 00 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
    10ed:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
    10fd:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
    110d:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
    111d:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
    112d:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
    113d:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
    114d:	00 7c 00 01 98 01 02 00 04 98 03 06 20 00 20 00     .|.......... . .
    115d:	50 00 50 00 88 00 88 00 07 50 00 50 00 50 00 50     P.P......P.P.P.P
    116d:	00 50 00 50 00 50 00 06 88 00 88 00 50 00 50 00     .P.P.P......P.P.
    117d:	20 00 20 00 04 02 00 62 01 12 00 0c 00 08 f8 00      . ....b........
    118d:	04 01 72 02 8a 02 8a 02 7a 02 82 00 7c 00 06 c0     ..r.....z...|...
    119d:	01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12 01     .x.F.F.x........
    11ad:	12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01 02     .........x......
    11bd:	01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02 01     ................
    11cd:	02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01 12     ....x...........
    11dd:	01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00 84     .............x..
    11ed:	00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10 00     ....."."........
    11fd:	10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01 04     ................
    120d:	00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00 48     ........... .0.H
    121d:	00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00 01     ................
    122d:	07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01 06     .......`........
    123d:	fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00 84     ......`......x..
    124d:	00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22 00     .........x....".
    125d:	22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01 02     "."....x........
    126d:	03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c 00     ...x....".".b...
    127d:	00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00 07     ........."."....
    128d:	02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06 fe     ................
    129d:	00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70 00     ..............p.
    12ad:	80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01 78     ....p......x...x
    12bd:	00 06 00 78 00 80 01 78 00 06 00 06 86 01 48 00     ...x...x......H.
    12cd:	30 00 30 00 48 00 86 01 07 02 00 04 00 08 00 f0     0.0.H...........
    12dd:	01 08 00 04 00 02 00 06 82 01 42 01 22 01 12 01     ..........B."...
    12ed:	0a 01 06 01 03 ff 07 01 04 01 04 05 03 00 0c 00     ................
    12fd:	30 00 c0 00 00 03 03 01 04 01 04 ff 07 07 10 00     0...............
    130d:	08 00 04 00 02 00 04 00 08 00 10 00 07 00 04 00     ................
    131d:	04 00 04 00 04 00 04 00 04 00 04 02 01 00 02 00     ................
    132d:	05 c0 00 28 01 28 01 28 01 f0 01 05 ff 01 08 01     ...(.(.(........
    133d:	08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01 90     ................
    134d:	00 05 f0 00 08 01 08 01 08 01 ff 01 05 f0 00 28     ...............(
    135d:	01 28 01 28 01 b0 00 04 08 00 fe 01 09 00 09 00     .(.(............
    136d:	05 f0 00 08 05 08 05 08 05 f8 03 05 ff 01 08 00     ................
    137d:	08 00 08 00 f0 01 01 f9 01 03 00 04 08 04 f9 03     ................
    138d:	05 ff 01 40 00 60 00 90 00 08 01 01 ff 01 09 f8     ...@.`..........
    139d:	01 08 00 08 00 08 00 f0 01 08 00 08 00 08 00 f0     ................
    13ad:	01 05 f8 01 08 00 08 00 08 00 f0 01 05 f0 00 08     ................
    13bd:	01 08 01 08 01 f0 00 05 f8 07 08 01 08 01 08 01     ................
    13cd:	f0 00 05 f0 00 08 01 08 01 08 01 f8 07 04 f8 01     ................
    13dd:	10 00 08 00 08 00 04 30 01 28 01 48 01 c8 00 04     .......0.(.H....
    13ed:	08 00 fe 00 08 01 08 01 05 f8 00 00 01 00 01 00     ................
    13fd:	01 f8 01 05 18 00 60 00 80 01 60 00 18 00 07 78     ......`...`....x
    140d:	00 80 01 60 00 18 00 60 00 80 01 78 00 05 08 01     ...`...`...x....
    141d:	90 00 60 00 90 00 08 01 05 08 00 70 04 80 03 70     ..`........p...p
    142d:	00 08 00 04 88 01 48 01 28 01 18 01                 ......H.(...

00001439 <lcd_commmands>:
    1439:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00001447 <pagemap>:
    1447:	07 06 05 04 03 02 01 00                             ........

0000144f <text_menu>:
    144f:	eb 20 36 1a 31 1a 2c 1a 27 1a 22 1a 1d 1a 18 1a     . 6.1.,.'.".....
    145f:	13 1a cd 23 c5 23 cb 23 c9 23 c7 23 c0 23 bb 23     ...#.#.#.#.#.#.#
    146f:	b6 23 b1 23 a7 1c c7 1c c2 1c bc 1c af 20 d7 23     .#.#......... .#
    147f:	cf 23 e5 21 06 22 01 22 fb 21 f7 21 f3 21 ef 21     .#.!.".".!.!.!.!
    148f:	0d 1d 04 1d 15 1d fd 1c f8 1c 5c 1a 57 1a 52 1a     ..........\.W.R.
    149f:	4d 1a 48 1a 42 1a 3c 1a e4 1c 3b 1a 41 1d 39 1d     M.H.B.<...;.A.9.
    14af:	41 1f 3c 1f 39 1f 2f 1f 25 1f 8a 1a 82 1a 7d 1a     A.<.9./.%.....}.
    14bf:	2c 1d 27 1d 1e 1d 6b 1c ea 21 5f 1c 9e 1c 95 1c     ,.'...k..!_.....
    14cf:	3b 1a 3b 1a 3b 1a 3b 1a eb 20 e8 20 a2 1a a9 1a     ;.;.;.;.. . ....
    14df:	98 1a fb 18 3b 1a d4 1c cd 1c a0 23 8e 23 7b 23     ....;......#.#{#
    14ef:	69 23 53 23 44 23 30 23 1c 23 12 23 ff 22 f0 22     i#S#D#0#.#.#."."
    14ff:	e1 22 d2 22 c3 22 b4 22 a5 22 96 22 87 22 73 22     ."."."."."."."s"
    150f:	5a 22 41 22 2c 22 19 22 0b 22 3b 1a 3b 1a 3b 1a     Z"A",".".";.;.;.
    151f:	3b 1a 15 1d 0d 1d 04 1d fd 1c f8 1c f3 1c ee 1c     ;...............
    152f:	e9 1c e4 1c dd 1c d7 1c 3b 1a 3b 1a b0 1c 90 1a     ........;.;.....
    153f:	7d 1a 27 1c 1b 1c 3b 1a d8 1b cf 1b c6 1b c2 1b     }.'...;.........
    154f:	b9 1b b1 1b fa 1f f3 1f e9 1f e2 1f b4 1c 40 1c     ..............@.
    155f:	32 1c 2d 1c 13 1c 08 1c 3b 1a b2 1a a9 1a 01 22     2.-.....;......"
    156f:	fb 21 f7 21 df 20 9f 1f d5 20 ca 20 bb 20 5a 20     .!.!. ... . . Z 
    157f:	4a 20 9f 20 8f 20 7e 20 6b 20 3a 20 d5 1f c8 1f     J . . ~ k : ....
    158f:	be 1f b6 1f a9 1f 72 1f 60 1a 95 1f 8b 1f 7f 1f     ......r.`.......
    159f:	6a 1f 62 1f 3b 1a 3b 1a dd 21 d5 21 c7 21 ba 21     j.b.;.;..!.!.!.!
    15af:	aa 21 90 21 87 21 7e 21 6f 21 61 21 50 21 44 21     .!.!.!~!o!a!P!D!
    15bf:	3d 21 36 21 29 21 1d 21 13 21 09 21 ff 20 ef 20     =!6!)!.!.!.!. . 
    15cf:	1d 1f 0d 1f fd 1e ef 1e df 1e cf 1e bf 1e af 1e     ................
    15df:	9f 1e 8f 1e 81 1e 73 1e 64 1e 55 1e 48 1e 3b 1e     ......s.d.U.H.;.
    15ef:	2f 1e 23 1e 0b 1e fe 1d f0 1d e2 1d d5 1d ca 1d     /.#.............
    15ff:	bd 1d b2 1d a5 1d ca 1d 98 1d b2 1d 3b 1a 3b 1a     ............;.;.
    160f:	3b 1a 3b 1a 41 1d 39 1d 33 1d 85 19 03 1c fe 1b     ;.;.A.9.3.......
    161f:	f9 1b f4 1b ef 1b ea 1b e5 1b e0 1b 3b 1a 3b 1a     ............;.;.
    162f:	3b 1a 3b 1a 3b 1a 3b 1a 3b 1a 3b 1a 3b 1a 3b 1a     ;.;.;.;.;.;.;.;.
    163f:	3b 1a 3b 1a 3b 1a 3b 1a 3b 1a e4 1c 41 1d 39 1d     ;.;.;.;.;...A.9.
    164f:	33 1d 3b 1a 3b 1a 56 1c 4d 1c 8b 1c 85 1c 79 1c     3.;.;.V.M.....y.
    165f:	f8 23 f2 23 df 20 e9 23 e7 23 e5 23 78 1a 74 1a     .#.#. .#.#.#x.t.
    166f:	6d 1a 06 1a ff 19 f5 19 0d 1a ed 19 3b 1a 3b 1a     m...........;.;.
    167f:	ab 23 d3 19 c6 19 3b 1a bf 19 b1 19 a7 19 9a 19     .#....;.........
    168f:	90 19 dc 23 3b 1a 8a 19 3b 1a 3b 1a 3b 1a a8 1b     ...#;...;.;.;...
    169f:	9f 1b 95 1b 8b 1b 81 1b 77 1b 6f 1b 64 1b 59 1b     ........w.o.d.Y.
    16af:	4d 1b 41 1b 36 1b 2b 1b 1f 1b 16 1b 0b 1b 01 1b     M.A.6.+.........
    16bf:	f6 1a ee 1a e4 1a d9 1a ce 1a c5 1a b9 1a 3b 1a     ..............;.
    16cf:	d4 1c 6c 19 77 19 3b 1a 55 1f 48 1f 46 1f 44 1f     ..l.w.;.U.H.F.D.
    16df:	dd 21 d5 21 c7 21 ba 21 9b 21 90 21 87 21 7e 21     .!.!.!.!.!.!.!~!
    16ef:	6f 21 61 21 50 21 44 21 3d 21 36 21 29 21 1d 21     o!a!P!D!=!6!)!.!
    16ff:	13 21 09 21 ff 20 ef 20 1d 1f 0d 1f fd 1e ef 1e     .!.!. . ........
    170f:	df 1e cf 1e bf 1e af 1e 9f 1e 8f 1e 81 1e 73 1e     ..............s.
    171f:	64 1e 55 1e 48 1e 3b 1e 18 1e 23 1e 0b 1e fe 1d     d.U.H.;...#.....
    172f:	f0 1d e2 1d d5 1d ca 1d bd 1d b2 1d a5 1d ca 1d     ................
    173f:	98 1d b2 1d 3b 1a 3b 1a 3b 1a 3b 1a 3b 1a 3b 1a     ....;.;.;.;.;.;.
    174f:	68 18 5d 18 52 18 47 18 3c 18 31 18 26 18 1b 18     h.].R.G.<.1.&...
    175f:	3b 1a 3b 1a 3b 1a 3b 1a 35 20 31 20 2b 20 22 20     ;.;.;.;.5 1 + " 
    176f:	1b 20 10 20 06 20 5a 19 48 19 34 19 20 19 10 19     . . . Z.H.4. ...
    177f:	00 19 3b 1a f7 18 f3 18 ef 18 eb 18 e6 18 e1 18     ..;.............
    178f:	dc 18 d7 18 e4 1c 3b 1a 3b 1a f7 18 c4 18 bc 18     ......;.;.......
    179f:	cc 18 f7 18 f3 18 ef 18 eb 18 e6 18 e1 18 dc 18     ................
    17af:	d7 18 8f 1d 85 1d 7d 1d 77 1d 71 1d 63 1d 5a 1d     ......}.w.q.c.Z.
    17bf:	49 1d e4 1c f7 18 c4 18 bc 18 cc 18 f7 18 f3 18     I...............
    17cf:	ef 18 eb 18 e6 18 e1 18 dc 18 d7 18 8f 1d 85 1d     ................
    17df:	7d 1d 6b 1d 71 1d 53 1d 5a 1d 49 1d e4 1c 3b 1a     }.k.q.S.Z.I...;.
    17ef:	3b 1a 3b 1a 3b 1a 3b 1a b9 18 b6 18 b3 18 b0 18     ;.;.;.;.........
    17ff:	ad 18 aa 18 a7 18 a4 18 a0 18 9b 18 96 18 91 18     ................
    180f:	8c 18 87 18 82 18 7d 18 78 18 73 18                 ......}.x.s.

0000181b <Ch8>:
    181b:	54 58 20 63 68 61 6e 2e 20 38 00                    TX chan. 8.

00001826 <Ch7>:
    1826:	54 58 20 63 68 61 6e 2e 20 37 00                    TX chan. 7.

00001831 <Ch6>:
    1831:	54 58 20 63 68 61 6e 2e 20 36 00                    TX chan. 6.

0000183c <Ch5>:
    183c:	54 58 20 63 68 61 6e 2e 20 35 00                    TX chan. 5.

00001847 <Ch4>:
    1847:	54 58 20 63 68 61 6e 2e 20 34 00                    TX chan. 4.

00001852 <Ch3>:
    1852:	54 58 20 63 68 61 6e 2e 20 33 00                    TX chan. 3.

0000185d <Ch2>:
    185d:	54 58 20 63 68 61 6e 2e 20 32 00                    TX chan. 2.

00001868 <Ch1>:
    1868:	54 58 20 63 68 61 6e 2e 20 31 00                    TX chan. 1.

00001873 <O7>:
    1873:	41 58 33 3a 00                                      AX3:.

00001878 <O6>:
    1878:	41 58 32 3a 00                                      AX2:.

0000187d <O5>:
    187d:	41 58 31 3a 00                                      AX1:.

00001882 <O4>:
    1882:	47 45 52 3a 00                                      GER:.

00001887 <O3>:
    1887:	52 55 44 3a 00                                      RUD:.

0000188c <O2>:
    188c:	45 4c 45 3a 00                                      ELE:.

00001891 <O1>:
    1891:	41 49 4c 3a 00                                      AIL:.

00001896 <O0>:
    1896:	54 48 52 3a 00                                      THR:.

0000189b <I10>:
    189b:	4f 55 54 3a 00                                      OUT:.

000018a0 <I9>:
    18a0:	50 6e 3a 00                                         Pn:.

000018a4 <I8>:
    18a4:	38 3a 00                                            8:.

000018a7 <I7>:
    18a7:	37 3a 00                                            7:.

000018aa <I6>:
    18aa:	36 3a 00                                            6:.

000018ad <I5>:
    18ad:	35 3a 00                                            5:.

000018b0 <I4>:
    18b0:	34 3a 00                                            4:.

000018b3 <I3>:
    18b3:	33 3a 00                                            3:.

000018b6 <I2>:
    18b6:	32 3a 00                                            2:.

000018b9 <I1>:
    18b9:	31 3a 00                                            1:.

000018bc <Uni4>:
    18bc:	43 75 72 76 65 20 44 00                             Curve D.

000018c4 <Uni3>:
    18c4:	43 75 72 76 65 20 43 00                             Curve C.

000018cc <Uni1>:
    18cc:	43 6f 6c 6c 65 63 74 69 76 65 00                    Collective.

000018d7 <Chan7>:
    18d7:	41 55 58 33 00                                      AUX3.

000018dc <Chan6>:
    18dc:	41 55 58 32 00                                      AUX2.

000018e1 <Chan5>:
    18e1:	41 55 58 31 00                                      AUX1.

000018e6 <Chan4>:
    18e6:	47 45 41 52 00                                      GEAR.

000018eb <Chan3>:
    18eb:	52 55 44 00                                         RUD.

000018ef <Chan2>:
    18ef:	45 4c 45 00                                         ELE.

000018f3 <Chan1>:
    18f3:	41 49 4c 00                                         AIL.

000018f7 <Chan0>:
    18f7:	54 48 52 00                                         THR.

000018fb <Misc_1>:
    18fb:	43 52 43 3a 00                                      CRC:.

00001900 <Curve_5>:
    1900:	47 65 6e 65 72 69 63 20 43 75 72 76 65 20 44 00     Generic Curve D.

00001910 <Curve_4>:
    1910:	47 65 6e 65 72 69 63 20 43 75 72 76 65 20 43 00     Generic Curve C.

00001920 <Curve_3>:
    1920:	50 32 20 43 6f 6c 6c 65 63 74 69 76 65 20 43 75     P2 Collective Cu
    1930:	72 76 65 00                                         rve.

00001934 <Curve_2>:
    1934:	50 31 20 43 6f 6c 6c 65 63 74 69 76 65 20 43 75     P1 Collective Cu
    1944:	72 76 65 00                                         rve.

00001948 <Curve_1>:
    1948:	50 32 20 54 68 72 6f 74 74 6c 65 20 43 75 72 76     P2 Throttle Curv
    1958:	65 00                                               e.

0000195a <Curve_0>:
    195a:	50 31 20 54 68 72 6f 74 74 6c 65 20 43 75 72 76     P1 Throttle Curv
    196a:	65 00                                               e.

0000196c <Reference_1>:
    196c:	45 61 72 74 68 20 72 65 66 2e 00                    Earth ref..

00001977 <Reference_0>:
    1977:	56 65 72 74 2e 20 41 50 20 72 65 66 2e 00           Vert. AP ref..

00001985 <Misc_Msg01>:
    1985:	41 6c 74 2e 00                                      Alt..

0000198a <ERROR_MSG_0>:
    198a:	43 6c 65 61 72 00                                   Clear.

00001990 <ERROR_4>:
    1990:	42 4f 44 20 72 65 73 65 74 00                       BOD reset.

0000199a <ERROR_3>:
    199a:	44 69 73 61 72 6d 20 74 69 6d 65 72 00              Disarm timer.

000019a7 <ERROR_2>:
    19a7:	4e 6f 20 73 69 67 6e 61 6c 00                       No signal.

000019b1 <ERROR_1>:
    19b1:	4d 61 6e 75 61 6c 20 64 69 73 61 72 6d 00           Manual disarm.

000019bf <ERROR_0>:
    19bf:	52 65 62 6f 6f 74 00                                Reboot.

000019c6 <WARNING_1>:
    19c6:	52 45 4d 4f 56 45 20 50 52 4f 50 53 00              REMOVE PROPS.

000019d3 <WARNING_0>:
    19d3:	57 41 52 4e 49 4e 47 20 2d 20 45 72 61 73 65 73     WARNING - Erases
    19e3:	20 73 65 74 74 69 6e 67 73 00                        settings.

000019ed <PRESET_4>:
    19ed:	4f 70 74 69 6f 6e 73 00                             Options.

000019f5 <PRESET_3>:
    19f5:	54 72 69 63 6f 70 74 65 72 00                       Tricopter.

000019ff <PRESET_2>:
    19ff:	51 75 61 64 20 50 00                                Quad P.

00001a06 <PRESET_1>:
    1a06:	51 75 61 64 20 58 00                                Quad X.

00001a0d <PRESET_0>:
    1a0d:	42 6c 61 6e 6b 00                                   Blank.

00001a13 <VBAT39>:
    1a13:	33 2e 39 56 00                                      3.9V.

00001a18 <VBAT38>:
    1a18:	33 2e 38 56 00                                      3.8V.

00001a1d <VBAT37>:
    1a1d:	33 2e 37 56 00                                      3.7V.

00001a22 <VBAT36>:
    1a22:	33 2e 36 56 00                                      3.6V.

00001a27 <VBAT35>:
    1a27:	33 2e 35 56 00                                      3.5V.

00001a2c <VBAT34>:
    1a2c:	33 2e 34 56 00                                      3.4V.

00001a31 <VBAT33>:
    1a31:	33 2e 33 56 00                                      3.3V.

00001a36 <VBAT32>:
    1a36:	33 2e 32 56 00                                      3.2V.

00001a3b <Dummy0>:
	...

00001a3c <MPU6050LPF7>:
    1a3c:	32 36 30 48 7a 00                                   260Hz.

00001a42 <MPU6050LPF6>:
    1a42:	31 38 34 48 7a 00                                   184Hz.

00001a48 <MPU6050LPF5>:
    1a48:	39 34 48 7a 00                                      94Hz.

00001a4d <MPU6050LPF4>:
    1a4d:	34 34 48 7a 00                                      44Hz.

00001a52 <MPU6050LPF3>:
    1a52:	32 31 48 7a 00                                      21Hz.

00001a57 <MPU6050LPF2>:
    1a57:	31 30 48 7a 00                                      10Hz.

00001a5c <MPU6050LPF1>:
    1a5c:	35 48 7a 00                                         5Hz.

00001a60 <GeneralText10>:
    1a60:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001a6d <Random12>:
    1a6d:	73 69 67 6e 61 6c 00                                signal.

00001a74 <Random11>:
    1a74:	6c 6f 77 00                                         low.

00001a78 <Random10>:
    1a78:	68 69 67 68 00                                      high.

00001a7d <Random1>:
    1a7d:	48 69 67 68 00                                      High.

00001a82 <Safety2>:
    1a82:	41 72 6d 61 62 6c 65 00                             Armable.

00001a8a <Safety1>:
    1a8a:	41 72 6d 65 64 00                                   Armed.

00001a90 <GeneralText5>:
    1a90:	53 79 6e 63 20 52 43 00                             Sync RC.

00001a98 <MixerItem16>:
    1a98:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

00001aa2 <MixerItem15>:
    1aa2:	53 63 61 6c 65 64 00                                Scaled.

00001aa9 <MixerItem12>:
    1aa9:	52 65 76 65 72 73 65 64 00                          Reversed.

00001ab2 <MixerItem11>:
    1ab2:	4e 6f 72 6d 61 6c 00                                Normal.

00001ab9 <Orientation24>:
    1ab9:	52 69 67 68 74 2d 46 72 6f 6e 74 00                 Right-Front.

00001ac5 <Orientation23>:
    1ac5:	52 69 67 68 74 2d 55 70 00                          Right-Up.

00001ace <Orientation22>:
    1ace:	52 69 67 68 74 2d 42 61 63 6b 00                    Right-Back.

00001ad9 <Orientation21>:
    1ad9:	52 69 67 68 74 2d 44 6f 77 6e 00                    Right-Down.

00001ae4 <Orientation20>:
    1ae4:	4c 65 66 74 2d 42 61 63 6b 00                       Left-Back.

00001aee <Orientation19>:
    1aee:	4c 65 66 74 2d 55 70 00                             Left-Up.

00001af6 <Orientation18>:
    1af6:	4c 65 66 74 2d 46 72 6f 6e 74 00                    Left-Front.

00001b01 <Orientation17>:
    1b01:	4c 65 66 74 2d 44 6f 77 6e 00                       Left-Down.

00001b0b <Orientation16>:
    1b0b:	46 72 6f 6e 74 2d 4c 65 66 74 00                    Front-Left.

00001b16 <Orientation15>:
    1b16:	46 72 6f 6e 74 2d 55 70 00                          Front-Up.

00001b1f <Orientation14>:
    1b1f:	46 72 6f 6e 74 2d 52 69 67 68 74 00                 Front-Right.

00001b2b <Orientation13>:
    1b2b:	46 72 6f 6e 74 2d 44 6f 77 6e 00                    Front-Down.

00001b36 <Orientation12>:
    1b36:	42 6f 74 74 2e 2d 4c 65 66 74 00                    Bott.-Left.

00001b41 <Orientation11>:
    1b41:	42 6f 74 74 2e 2d 46 72 6f 6e 74 00                 Bott.-Front.

00001b4d <Orientation10>:
    1b4d:	42 6f 74 74 2e 2d 52 69 67 68 74 00                 Bott.-Right.

00001b59 <Orientation9>:
    1b59:	42 6f 74 74 2e 2d 42 61 63 6b 00                    Bott.-Back.

00001b64 <Orientation8>:
    1b64:	42 61 63 6b 2d 52 69 67 68 74 00                    Back-Right.

00001b6f <Orientation7>:
    1b6f:	42 61 63 6b 2d 55 70 00                             Back-Up.

00001b77 <Orientation6>:
    1b77:	42 61 63 6b 2d 4c 65 66 74 00                       Back-Left.

00001b81 <Orientation5>:
    1b81:	42 61 63 6b 2d 44 6f 77 6e 00                       Back-Down.

00001b8b <Orientation4>:
    1b8b:	54 6f 70 2d 52 69 67 68 74 00                       Top-Right.

00001b95 <Orientation3>:
    1b95:	54 6f 70 2d 46 72 6f 6e 74 00                       Top-Front.

00001b9f <Orientation2>:
    1b9f:	54 6f 70 2d 4c 65 66 74 00                          Top-Left.

00001ba8 <Orientation1>:
    1ba8:	54 6f 70 2d 52 65 61 72 00                          Top-Rear.

00001bb1 <MixerMenuItem7>:
    1bb1:	50 69 74 63 68 55 70 00                             PitchUp.

00001bb9 <MixerMenuItem6>:
    1bb9:	53 69 64 65 77 61 79 73 00                          Sideways.

00001bc2 <MixerMenuItem5>:
    1bc2:	41 66 74 00                                         Aft.

00001bc6 <MixerMenuItem4>:
    1bc6:	49 6e 76 65 72 74 65 64 00                          Inverted.

00001bcf <MixerMenuItem3>:
    1bcf:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001bd8 <MixerMenuItem2>:
    1bd8:	46 6f 72 77 61 72 64 00                             Forward.

00001be0 <MOUT8>:
    1be0:	4f 55 54 38 00                                      OUT8.

00001be5 <MOUT7>:
    1be5:	4f 55 54 37 00                                      OUT7.

00001bea <MOUT6>:
    1bea:	4f 55 54 36 00                                      OUT6.

00001bef <MOUT5>:
    1bef:	4f 55 54 35 00                                      OUT5.

00001bf4 <MOUT4>:
    1bf4:	4f 55 54 34 00                                      OUT4.

00001bf9 <MOUT3>:
    1bf9:	4f 55 54 33 00                                      OUT3.

00001bfe <MOUT2>:
    1bfe:	4f 55 54 32 00                                      OUT2.

00001c03 <MOUT1>:
    1c03:	4f 55 54 31 00                                      OUT1.

00001c08 <Status5>:
    1c08:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001c13 <Status4>:
    1c13:	28 41 72 6d 65 64 29 00                             (Armed).

00001c1b <Status2>:
    1c1b:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

00001c27 <Status0>:
    1c27:	50 72 65 73 73 00                                   Press.

00001c2d <WizardText2>:
    1c2d:	44 6f 6e 65 00                                      Done.

00001c32 <WizardText1>:
    1c32:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001c40 <WizardText0>:
    1c40:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

00001c4d <PText6>:
    1c4d:	73 65 74 74 69 6e 67 73 00                          settings.

00001c56 <PText5>:
    1c56:	55 70 64 61 74 69 6e 67 00                          Updating.

00001c5f <PText4>:
    1c5f:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

00001c6b <PText3>:
    1c6b:	45 53 43 20 63 61 6c 69 62 72 61 74 65 00           ESC calibrate.

00001c79 <PText2>:
    1c79:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

00001c85 <PText1>:
    1c85:	52 65 73 65 74 00                                   Reset.

00001c8b <PText0>:
    1c8b:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

00001c95 <ErrorText9>:
    1c95:	4f 63 63 75 72 72 65 64 00                          Occurred.

00001c9e <ErrorText8>:
    1c9e:	42 72 6f 77 6e 6f 75 74 00                          Brownout.

00001ca7 <Disarmed>:
    1ca7:	44 69 73 61 72 6d 65 64 00                          Disarmed.

00001cb0 <ErrorText10>:
    1cb0:	4c 6f 77 00                                         Low.

00001cb4 <Status3>:
    1cb4:	42 61 74 74 65 72 79 00                             Battery.

00001cbc <ErrorText7>:
    1cbc:	4d 6f 64 65 6c 00                                   Model.

00001cc2 <ErrorText6>:
    1cc2:	4c 6f 73 74 00                                      Lost.

00001cc7 <ErrorText5>:
    1cc7:	45 72 72 6f 72 00                                   Error.

00001ccd <ErrorText4>:
    1ccd:	53 69 67 6e 61 6c 00                                Signal.

00001cd4 <ErrorText3>:
    1cd4:	4e 6f 00                                            No.

00001cd7 <ChannelRef12>:
    1cd7:	45 6c 65 76 2e 00                                   Elev..

00001cdd <ChannelRef10>:
    1cdd:	54 68 72 6f 74 2e 00                                Throt..

00001ce4 <ChannelRef8>:
    1ce4:	4e 6f 6e 65 00                                      None.

00001ce9 <ChannelRef7>:
    1ce9:	41 55 58 33 00                                      AUX3.

00001cee <ChannelRef6>:
    1cee:	41 55 58 32 00                                      AUX2.

00001cf3 <ChannelRef5>:
    1cf3:	41 55 58 31 00                                      AUX1.

00001cf8 <ChannelRef4>:
    1cf8:	47 65 61 72 00                                      Gear.

00001cfd <ChannelRef3>:
    1cfd:	52 75 64 64 65 72 00                                Rudder.

00001d04 <ChannelRef2>:
    1d04:	45 6c 65 76 61 74 6f 72 00                          Elevator.

00001d0d <ChannelRef1>:
    1d0d:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001d15 <ChannelRef0>:
    1d15:	54 68 72 6f 74 74 6c 65 00                          Throttle.

00001d1e <MixerItem62>:
    1d1e:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

00001d27 <MixerItem61>:
    1d27:	53 69 6e 65 00                                      Sine.

00001d2c <MixerItem60>:
    1d2c:	4c 69 6e 65 61 72 00                                Linear.

00001d33 <MixerItem49>:
    1d33:	4d 6f 74 6f 72 00                                   Motor.

00001d39 <MixerItem41>:
    1d39:	44 2e 53 65 72 76 6f 00                             D.Servo.

00001d41 <MixerItem40>:
    1d41:	41 2e 53 65 72 76 6f 00                             A.Servo.

00001d49 <MixerItem420>:
    1d49:	41 6c 74 2e 20 64 61 6d 70 00                       Alt. damp.

00001d53 <MixerItem800>:
    1d53:	41 4c 20 59 61 77 00                                AL Yaw.

00001d5a <MixerItem81>:
    1d5a:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001d63 <MixerItem80>:
    1d63:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

00001d6b <MixerItemP730>:
    1d6b:	41 63 63 20 5a 00                                   Acc Z.

00001d71 <MixerItemP74>:
    1d71:	41 63 63 20 59 00                                   Acc Y.

00001d77 <MixerItemP73>:
    1d77:	41 63 63 20 58 00                                   Acc X.

00001d7d <MixerItem72>:
    1d7d:	47 79 72 6f 59 61 77 00                             GyroYaw.

00001d85 <MixerItem71>:
    1d85:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

00001d8f <MixerItem70>:
    1d8f:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001d98 <MixerItem31>:
    1d98:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

00001da5 <MixerItem21>:
    1da5:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

00001db2 <MixerItem30>:
    1db2:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

00001dbd <MixerItem29>:
    1dbd:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

00001dca <MixerItem2>:
    1dca:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

00001dd5 <MixerItem0>:
    1dd5:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

00001de2 <MixerItem43>:
    1de2:	50 32 20 41 6c 74 2e 20 64 61 6d 70 3a 00           P2 Alt. damp:.

00001df0 <MixerItem42>:
    1df0:	50 31 20 41 6c 74 2e 20 64 61 6d 70 3a 00           P1 Alt. damp:.

00001dfe <MixerItem28>:
    1dfe:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001e0b <MixerItem3>:
    1e0b:	50 31 20 50 69 74 63 68 20 41 4c 3a 00              P1 Pitch AL:.

00001e18 <MixerItem700>:
    1e18:	50 31 20 59 61 77 20 41 4c 3a 00                    P1 Yaw AL:.

00001e23 <MixerItem27>:
    1e23:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

00001e2f <MixerItem7>:
    1e2f:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001e3b <MixerItem26>:
    1e3b:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001e48 <MixerItem6>:
    1e48:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

00001e55 <MixerItem25>:
    1e55:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

00001e64 <MixerItem5>:
    1e64:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

00001e73 <MixerItem24>:
    1e73:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

00001e81 <MixerItem4>:
    1e81:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

00001e8f <MixerItem56>:
    1e8f:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

00001e9f <MixerItem53>:
    1e9f:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001eaf <MixerItem55>:
    1eaf:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

00001ebf <MixerItem52>:
    1ebf:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

00001ecf <MixerItem54>:
    1ecf:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

00001edf <MixerItem51>:
    1edf:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

00001eef <Mixeritem50>:
    1eef:	54 72 61 6e 73 2e 20 63 75 72 76 65 3a 00           Trans. curve:.

00001efd <MixerItem33>:
    1efd:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

00001f0d <MixerItem23>:
    1f0d:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

00001f1d <MixerItem1>:
    1f1d:	44 65 76 69 63 65 3a 00                             Device:.

00001f25 <P5text>:
    1f25:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

00001f2f <P4text>:
    1f2f:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

00001f39 <P3text>:
    1f39:	50 32 00                                            P2.

00001f3c <P2text>:
    1f3c:	50 31 2e 6e 00                                      P1.n.

00001f41 <P1text>:
    1f41:	50 31 00                                            P1.

00001f44 <AdvancedDummy1>:
    1f44:	20 00                                                .

00001f46 <AdvancedDummy0>:
    1f46:	20 00                                                .

00001f48 <MixerMenuItem8>:
    1f48:	50 31 20 72 65 66 72 6e 63 65 2e 3a 00              P1 refrnce.:.

00001f55 <MixerMenuItem1>:
    1f55:	50 31 20 6f 72 69 65 6e 74 6e 2e 3a 00              P1 orientn.:.

00001f62 <GeneralText21>:
    1f62:	42 75 7a 7a 65 72 3a 00                             Buzzer:.

00001f6a <GeneralText20>:
    1f6a:	50 72 65 73 65 74 3a 00                             Preset:.

00001f72 <BattMenuItem2>:
    1f72:	4c 6f 77 20 56 20 61 6c 61 72 6d 3a 00              Low V alarm:.

00001f7f <GeneralText7>:
    1f7f:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

00001f8b <GeneralText16>:
    1f8b:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

00001f95 <GeneralText6>:
    1f95:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

00001f9f <GeneralText3>:
    1f9f:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

00001fa9 <GeneralText2>:
    1fa9:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

00001fb6 <AutoMenuItem2>:
    1fb6:	53 61 66 65 74 79 3a 00                             Safety:.

00001fbe <Contrast>:
    1fbe:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

00001fc8 <GeneralText100>:
    1fc8:	54 61 69 6c 20 73 69 74 74 65 72 3a 00              Tail sitter:.

00001fd5 <MixerMenuItem0>:
    1fd5:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

00001fe2 <RCMenuItem9>:
    1fe2:	43 75 73 74 6f 6d 00                                Custom.

00001fe9 <RCMenuItem8>:
    1fe9:	4d 75 6c 74 69 70 6c 65 78 00                       Multiplex.

00001ff3 <RCMenuItem7>:
    1ff3:	46 75 74 61 62 61 00                                Futaba.

00001ffa <RCMenuItem6>:
    1ffa:	4a 52 2f 53 70 65 6b 74 72 75 6d 00                 JR/Spektrum.

00002006 <RXMode6>:
    2006:	48 6f 54 54 20 53 55 4d 44 00                       HoTT SUMD.

00002010 <RXMode5>:
    2010:	4d 6f 64 65 20 42 2f 55 44 49 00                    Mode B/UDI.

0000201b <RXMode4>:
    201b:	58 74 72 65 6d 65 00                                Xtreme.

00002022 <RXMode3>:
    2022:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

0000202b <RXMode2>:
    202b:	53 2d 42 75 73 00                                   S-Bus.

00002031 <RXMode1>:
    2031:	50 57 4d 00                                         PWM.

00002035 <RXMode0>:
    2035:	43 50 50 4d 00                                      CPPM.

0000203a <RCMenuItem300>:
    203a:	41 63 63 56 65 72 74 20 66 69 6c 74 65 72 3a 00     AccVert filter:.

0000204a <TransitionIn>:
    204a:	49 6e 62 6f 75 6e 64 20 74 72 61 6e 73 2e 3a 00     Inbound trans.:.

0000205a <TransitionOut>:
    205a:	4f 75 74 62 6f 75 6e 64 20 74 72 61 6e 73 2e 3a     Outbound trans.:
	...

0000206b <RCMenuItem30>:
    206b:	56 69 62 72 61 74 69 6f 6e 20 64 69 73 70 6c 61     Vibration displa
    207b:	79 3a 00                                            y:.

0000207e <Transition_P2>:
    207e:	54 72 61 6e 73 69 74 69 6f 6e 20 68 69 67 68 3a     Transition high:
	...

0000208f <Transition_P1n>:
    208f:	54 72 61 6e 73 69 74 69 6f 6e 20 6d 69 64 3a 00     Transition mid:.

0000209f <Transition_P1>:
    209f:	54 72 61 6e 73 69 74 69 6f 6e 20 6c 6f 77 3a 00     Transition low:.

000020af <Transition>:
    20af:	54 72 61 6e 73 69 74 69 6f 6e 3a 00                 Transition:.

000020bb <RCMenuItem2>:
    20bb:	50 72 6f 66 69 6c 65 20 63 68 61 6e 2e 3a 00        Profile chan.:.

000020ca <RCMenuItem0>:
    20ca:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

000020d5 <RCMenuItem20>:
    20d5:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

000020df <RCMenuItem1>:
    20df:	52 58 20 74 79 70 65 3a 00                          RX type:.

000020e8 <AutoMenuItem15>:
    20e8:	4f 4e 00                                            ON.

000020eb <AutoMenuItem11>:
    20eb:	4f 46 46 00                                         OFF.

000020ef <StabMenuItem132>:
    20ef:	5a 2d 61 78 69 73 20 49 20 6c 69 6d 69 74 3a 00     Z-axis I limit:.

000020ff <StabMenuItem131>:
    20ff:	5a 2d 61 78 69 73 20 49 3a 00                       Z-axis I:.

00002109 <StabMenuItem13>:
    2109:	5a 2d 61 78 69 73 20 50 3a 00                       Z-axis P:.

00002113 <StabMenuItem30>:
    2113:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

0000211d <StabMenuItem9>:
    211d:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

00002129 <StabMenuItem12>:
    2129:	59 61 77 20 49 20 6c 69 6d 69 74 3a 00              Yaw I limit:.

00002136 <StabMenuItem8>:
    2136:	59 61 77 20 49 3a 00                                Yaw I:.

0000213d <StabMenuItem7>:
    213d:	59 61 77 20 50 3a 00                                Yaw P:.

00002144 <AutoMenuItem8>:
    2144:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

00002150 <AutoMenuItem21>:
    2150:	50 69 74 63 68 20 61 75 74 6f 6c 65 76 65 6c 3a     Pitch autolevel:
	...

00002161 <StabMenuItem6>:
    2161:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

0000216f <StabMenuItem11>:
    216f:	50 69 74 63 68 20 49 20 6c 69 6d 69 74 3a 00        Pitch I limit:.

0000217e <StabMenuItem5>:
    217e:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00002187 <AutoMenuItem4>:
    2187:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

00002190 <AutoMenuItem7>:
    2190:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

0000219b <AutoMenuItem200>:
    219b:	59 61 77 20 61 75 74 6f 6c 65 76 65 6c 3a 00        Yaw autolevel:.

000021aa <AutoMenuItem20>:
    21aa:	52 6f 6c 6c 20 61 75 74 6f 6c 65 76 65 6c 3a 00     Roll autolevel:.

000021ba <StabMenuItem3>:
    21ba:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

000021c7 <StabMenuItem10>:
    21c7:	52 6f 6c 6c 20 49 20 6c 69 6d 69 74 3a 00           Roll I limit:.

000021d5 <StabMenuItem2>:
    21d5:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

000021dd <AutoMenuItem1>:
    21dd:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

000021e5 <SensorMenuItem2>:
    21e5:	49 6e 76 2e 00                                      Inv..

000021ea <SensorMenuItem1>:
    21ea:	43 61 6c 2e 00                                      Cal..

000021ef <PText20>:
    21ef:	49 4d 55 00                                         IMU.

000021f3 <PText19>:
    21f3:	41 63 63 00                                         Acc.

000021f7 <PText18>:
    21f7:	59 61 77 00                                         Yaw.

000021fb <PText17>:
    21fb:	50 69 74 63 68 00                                   Pitch.

00002201 <PText16>:
    2201:	52 6f 6c 6c 00                                      Roll.

00002206 <PText15>:
    2206:	47 79 72 6f 00                                      Gyro.

0000220b <MainMenuItem24>:
    220b:	32 34 2e 20 45 72 72 6f 72 20 6c 6f 67 00           24. Error log.

00002219 <MainMenuItem31>:
    2219:	32 33 2e 20 49 6e 2f 4f 75 74 20 64 69 73 70 6c     23. In/Out displ
    2229:	61 79 00                                            ay.

0000222c <MainMenuItem32>:
    222c:	32 32 2e 20 43 75 73 74 6f 6d 20 43 68 2e 20 6f     22. Custom Ch. o
    223c:	72 64 65 72 00                                      rder.

00002241 <MainMenuItem23>:
    2241:	32 31 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     21. Pos. Servo t
    2251:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000225a <MainMenuItem22>:
    225a:	32 30 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     20. Neg. Servo t
    226a:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00002273 <MainMenuItem20>:
    2273:	31 39 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     19. Servo direct
    2283:	69 6f 6e 00                                         ion.

00002287 <MainMenuItem18>:
    2287:	31 38 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        18. OUT8 Mixer.

00002296 <MainMenuItem17>:
    2296:	31 37 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        17. OUT7 Mixer.

000022a5 <MainMenuItem16>:
    22a5:	31 36 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        16. OUT6 Mixer.

000022b4 <MainMenuItem15>:
    22b4:	31 35 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        15. OUT5 Mixer.

000022c3 <MainMenuItem14>:
    22c3:	31 34 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        14. OUT4 Mixer.

000022d2 <MainMenuItem13>:
    22d2:	31 33 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        13. OUT3 Mixer.

000022e1 <MainMenuItem12>:
    22e1:	31 32 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        12. OUT2 Mixer.

000022f0 <MainMenuItem11>:
    22f0:	31 31 2e 20 4f 55 54 31 20 4d 69 78 65 72 00        11. OUT1 Mixer.

000022ff <MainMenuItem25>:
    22ff:	31 30 2e 20 4f 75 74 70 75 74 20 6f 66 66 73 65     10. Output offse
    230f:	74 73 00                                            ts.

00002312 <MainMenuItem30>:
    2312:	39 2e 20 43 75 72 76 65 73 00                       9. Curves.

0000231c <MainMenuItem3>:
    231c:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    232c:	65 20 32 00                                         e 2.

00002330 <MainMenuItem2>:
    2330:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    2340:	65 20 31 00                                         e 1.

00002344 <MainMenuItem10>:
    2344:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

00002353 <MainMenuItem8>:
    2353:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    2363:	61 74 69 6f 6e 00                                   ation.

00002369 <MainMenuItem7>:
    2369:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    2379:	79 00                                               y.

0000237b <MainMenuItem9>:
    237b:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    238b:	74 73 00                                            ts.

0000238e <MainMenuItem1>:
    238e:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    239e:	70 00                                               p.

000023a0 <MainMenuItem0>:
    23a0:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

000023ab <MenuFrame9>:
    23ab:	41 62 6f 72 74 00                                   Abort.

000023b1 <MenuFrame8>:
    23b1:	53 61 76 65 00                                      Save.

000023b6 <MenuFrame7>:
    23b6:	44 65 66 2e 00                                      Def..

000023bb <MenuFrame6>:
    23bb:	42 61 63 6b 00                                      Back.

000023c0 <MenuFrame5>:
    23c0:	4d 65 6e 75 00                                      Menu.

000023c5 <MenuFrame1>:
    23c5:	45 00                                               E.

000023c7 <MenuFrame4>:
    23c7:	44 00                                               D.

000023c9 <MenuFrame3>:
    23c9:	43 00                                               C.

000023cb <MenuFrame2>:
    23cb:	42 00                                               B.

000023cd <MenuFrame0>:
    23cd:	41 00                                               A.

000023cf <StatusText9>:
    23cf:	4a 69 74 74 65 72 3a 00                             Jitter:.

000023d7 <StatusText8>:
    23d7:	50 6f 73 3a 00                                      Pos:.

000023dc <StatusText7>:
    23dc:	42 61 74 74 65 72 79 3a 00                          Battery:.

000023e5 <StatusText5>:
    23e5:	30 00                                               0.

000023e7 <StatusText4>:
    23e7:	2e 00                                               ..

000023e9 <StatusText3>:
    23e9:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

000023f2 <StatusText1>:
    23f2:	4d 6f 64 65 3a 00                                   Mode:.

000023f8 <StatusText0>:
    23f8:	56 65 72 73 69 6f 6e 3a 20 31 2e 35 00              Version: 1.5.

00002405 <Gyro_Pol>:
    2405:	01 01 01 ff 01 01 ff ff 01 01 ff 01 ff 01 01 ff     ................
    2415:	01 ff ff ff ff ff ff 01 01 ff ff ff ff ff ff 01     ................
    2425:	ff 01 01 ff 01 ff 01 01 ff ff 01 01 ff 01 01 01     ................
    2435:	ff ff 01 ff ff ff 01 ff ff 01 ff 01 01 01 01 01     ................
    2445:	01 ff ff 01 ff ff 01 01                             ........

0000244d <Gyro_RPY_Order>:
    244d:	00 01 02 01 00 02 00 01 02 01 00 02 02 01 00 02     ................
    245d:	00 01 02 01 00 02 00 01 00 01 02 01 00 02 00 01     ................
    246d:	02 01 00 02 02 01 00 02 00 01 02 01 00 02 00 01     ................
    247d:	01 02 00 00 02 01 01 02 00 00 02 01 01 02 00 00     ................
    248d:	02 01 01 02 00 00 02 01                             ........

00002495 <LPF_lookup_HS>:
    2495:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    24a5:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

000024b5 <LPF_lookup>:
    24b5:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    24c5:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

000024d5 <Ch_menu_ranges>:
    24d5:	00 07 01 01 00 00 07 01 01 01 00 07 01 01 02 00     ................
    24e5:	07 01 01 03 00 07 01 01 04 00 07 01 01 05 00 07     ................
    24f5:	01 01 06 00 07 01 01 07                             ........

000024fd <ChMenuOffsets>:
    24fd:	46 00 46 00 46 00 46 00 46 00 46 00 46 00 46 00     F.F.F.F.F.F.F.F.

0000250d <ChMenuText>:
    250d:	69 00 69 00 69 00 69 00 69 00 69 00 69 00 69 00     i.i.i.i.i.i.i.i.

0000251d <Curves_menu_ranges>:
    251d:	00 64 01 00 00 00 64 01 00 11 00 64 01 00 21 00     .d....d....d..!.
    252d:	64 01 00 32 00 64 01 00 42 00 64 01 00 53 00 64     d..2.d..B.d..S.d
    253d:	01 00 64 00 00 01 01 00 00 64 01 00 00 00 64 01     ..d......d....d.
    254d:	00 11 00 64 01 00 21 00 64 01 00 32 00 64 01 00     ...d..!.d..2.d..
    255d:	42 00 64 01 00 53 00 64 01 00 64 00 00 01 01 00     B.d..S.d..d.....
    256d:	9c 64 01 00 9c 9c 64 01 00 be 9c 64 01 00 df 9c     .d....d....d....
    257d:	64 01 00 00 9c 64 01 00 21 9c 64 01 00 42 9c 64     d....d..!.d..B.d
    258d:	01 00 64 00 00 01 01 00 9c 64 01 00 9c 9c 64 01     ..d......d....d.
    259d:	00 be 9c 64 01 00 df 9c 64 01 00 00 9c 64 01 00     ...d....d....d..
    25ad:	21 9c 64 01 00 42 9c 64 01 00 64 00 00 01 01 00     !.d..B.d..d.....
    25bd:	9c 64 01 00 9c 9c 64 01 00 be 9c 64 01 00 df 9c     .d....d....d....
    25cd:	64 01 00 00 9c 64 01 00 21 9c 64 01 00 42 9c 64     d....d..!.d..B.d
    25dd:	01 00 64 04 14 01 01 14 9c 64 01 00 9c 9c 64 01     ..d......d....d.
    25ed:	00 be 9c 64 01 00 df 9c 64 01 00 00 9c 64 01 00     ...d....d....d..
    25fd:	21 9c 64 01 00 42 9c 64 01 00 64 04 14 01 01 14     !.d..B.d..d.....

0000260d <CurvesMenuOffsets>:
    260d:	80 00 80 00 80 00 80 00 80 00 80 00                 ............

00002619 <CurvesMenuText>:
	...

00002625 <lines>:
    2625:	03 0f 1b 27                                         ...'

00002629 <flight_menu_ranges>:
    2629:	00 7f 01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00     ....(......}....
    2639:	07 01 00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f     ................
    2649:	01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00 07 01     ..(......}......
    2659:	00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f 01 00     ................
    2669:	3c 00 7f 01 00 28 00 7d 01 00 19 00 07 01 00 02     <....(.}........
    2679:	81 7f 01 00 00 00 7f 01 00 28 00 7f 01 00 14 00     .........(......
    2689:	7d 01 00 0a                                         }...

0000268d <FlightMenuOffsets>:
    268d:	55 00 55 00 55 00 55 00 55 00 55 00 55 00 55 00     U.U.U.U.U.U.U.U.
    269d:	55 00 55 00 55 00 55 00 55 00 55 00 55 00 55 00     U.U.U.U.U.U.U.U.
    26ad:	55 00 55 00 55 00 55 00                             U.U.U.U.

000026b5 <FlightMenuText>:
	...

000026dd <mixer_menu_ranges>:
    26dd:	00 02 01 01 02 00 7d 01 00 64 00 7d 01 00 64 00     ......}..d.}..d.
    26ed:	02 01 01 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     .....}....}....}
    26fd:	01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01     ....}....}....}.
    270d:	00 00 00 02 01 01 00 00 02 01 01 00 00 02 01 01     ................
    271d:	00 00 02 01 01 00 00 02 01 01 00 00 02 01 01 00     ................
    272d:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    273d:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 01 14     ................
    274d:	01 01 14 83 7d 01 00 00 01 14 01 01 14 83 7d 01     ....}.........}.
    275d:	00 00 01 14 01 01 14 83 7d 01 00 00 01 14 01 01     ........}.......
    276d:	14 83 7d 01 00 00                                   ..}...

00002773 <MixerMenuOffsets>:
    2773:	55 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00     U.\.\.\.\.\.\.\.
    2783:	5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00     \.\.\.\.\.\.\.\.
    2793:	5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 4d 00 4d 00     \.\.\.\.\.\.M.M.
    27a3:	4d 00 4d 00 4d 00 4d 00 4d 00 4d 00                 M.M.M.M.M.M.

000027af <MixerMenuTextM>:
    27af:	e2 00 00 00 00 00 38 00 00 00 00 00 00 00 00 00     ......8.........
    27bf:	00 00 00 00 44 00 44 00 44 00 44 00 44 00 44 00     ....D.D.D.D.D.D.
    27cf:	44 00 44 00 44 00 44 00 44 00 44 00 ba 01 00 00     D.D.D.D.D.D.....
    27df:	a5 01 00 00 ba 01 00 00 a5 01 00 00                 ............

000027eb <MixerMenuTextE>:
    27eb:	e2 00 00 00 00 00 38 00 00 00 00 00 00 00 00 00     ......8.........
    27fb:	00 00 00 00 44 00 44 00 44 00 44 00 44 00 44 00     ....D.D.D.D.D.D.
    280b:	44 00 44 00 44 00 44 00 44 00 44 00 a5 01 00 00     D.D.D.D.D.D.....
    281b:	a5 01 00 00 a5 01 00 00 a5 01 00 00                 ............

00002827 <Offsets_menu_ranges>:
    2827:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    2837:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    2847:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    2857:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    2867:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........
    2877:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    2887:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    2897:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    28a7:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    28b7:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........
    28c7:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    28d7:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    28e7:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    28f7:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    2907:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........
    2917:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    2927:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    2937:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    2947:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    2957:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........

00002967 <OffsetsMenuOffsets>:
    2967:	80 00 80 00 80 00 80 00 80 00 80 00 80 00 80 00     ................

00002977 <OffsetsMenuText>:
	...

00002987 <servo_menu_ranges>:
    2987:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

00002996 <ServoMenuOffsets>:
    2996:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.
    29a6:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.
    29b6:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.

000029c6 <ServoMenuText>:
    29c6:	8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00     ................
	...

000029f6 <P1_Orientation_LUT>:
    29f6:	04 05 06 07 0a 0b 08 09 0c 0d 0e 0f 02 03 00 01     ................
    2a06:	11 12 13 10 17 14 15 16                             ........

00002a0e <rc_menu_ranges>:
    2a0e:	00 06 01 01 02 00 02 01 01 02 00 04 01 01 04 00     ................
    2a1e:	03 01 01 00 00 07 01 01 04 00 28 01 00 00 00 28     ..........(....(
    2a2e:	01 00 00 00 63 01 00 00 01 63 01 00 32 01 64 01     ....c....c..2.d.
    2a3e:	00 64 00 01 01 01 00 00 7f 01 00 14 00 17 01 01     .d..............
    2a4e:	00 00 02 01 01 00 1c 32 01 00 24 00 01 01 01 01     .......2..$.....
    2a5e:	00 7f 01 00 1e 00 08 01 01 00 00 06 01 01 03 00     ................
    2a6e:	07 01 01 02 00 07 01 01 07 02 0b 01 00 06 00 03     ................
    2a7e:	01 04 00 00 01 01 01 01                             ........

00002a86 <RCMenuOffsets>:
    2a86:	41 00 41 00 41 00 3c 00 4b 00 5f 00 5f 00 5f 00     A.A.A.<.K._._._.
    2a96:	5f 00 5f 00 5f 00 5f 00 46 00 43 00 43 00 43 00     _._._._.F.C.C.C.
    2aa6:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.

00002ab6 <RCMenuText>:
    2ab6:	8c 01 76 00 69 00 82 00 69 00 00 00 00 00 00 00     ..v.i...i.......
    2ac6:	00 00 00 00 44 00 00 00 27 01 40 01 00 00 35 00     ....D...'.@...5.
    2ad6:	00 00 00 00 25 00 25 00 25 00 00 00 11 01 44 00     ....%.%.%.....D.

00002ae6 <SQRTSIN>:
    2ae6:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    2af6:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    2b06:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    2b16:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    2b26:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    2b36:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    2b46:	64 64 64 64 64                                      ddddd

00002b4b <SIN>:
    2b4b:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    2b5b:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    2b6b:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    2b7b:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    2b8b:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    2b9b:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    2bab:	64 64 64 64 64                                      ddddd

00002bb0 <__ctors_end>:
    2bb0:	11 24       	eor	r1, r1
    2bb2:	1f be       	out	0x3f, r1	; 63
    2bb4:	cf ef       	ldi	r28, 0xFF	; 255
    2bb6:	d0 e1       	ldi	r29, 0x10	; 16
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	cd bf       	out	0x3d, r28	; 61

00002bbc <wdt_init>:
    2bbc:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	a8 95       	wdr
    2bc4:	80 91 60 00 	lds	r24, 0x0060
    2bc8:	88 61       	ori	r24, 0x18	; 24
    2bca:	80 93 60 00 	sts	0x0060, r24
    2bce:	10 92 60 00 	sts	0x0060, r1
    2bd2:	0f be       	out	0x3f, r0	; 63

00002bd4 <__do_copy_data>:
    2bd4:	15 e0       	ldi	r17, 0x05	; 5
    2bd6:	a0 e0       	ldi	r26, 0x00	; 0
    2bd8:	b1 e0       	ldi	r27, 0x01	; 1
    2bda:	e0 e0       	ldi	r30, 0x00	; 0
    2bdc:	f1 ee       	ldi	r31, 0xE1	; 225
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <__do_copy_data+0x10>
    2be0:	05 90       	lpm	r0, Z+
    2be2:	0d 92       	st	X+, r0
    2be4:	a6 32       	cpi	r26, 0x26	; 38
    2be6:	b1 07       	cpc	r27, r17
    2be8:	d9 f7       	brne	.-10     	; 0x2be0 <__do_copy_data+0xc>

00002bea <__do_clear_bss>:
    2bea:	29 e0       	ldi	r18, 0x09	; 9
    2bec:	a6 e2       	ldi	r26, 0x26	; 38
    2bee:	b5 e0       	ldi	r27, 0x05	; 5
    2bf0:	01 c0       	rjmp	.+2      	; 0x2bf4 <.do_clear_bss_start>

00002bf2 <.do_clear_bss_loop>:
    2bf2:	1d 92       	st	X+, r1

00002bf4 <.do_clear_bss_start>:
    2bf4:	a5 3a       	cpi	r26, 0xA5	; 165
    2bf6:	b2 07       	cpc	r27, r18
    2bf8:	e1 f7       	brne	.-8      	; 0x2bf2 <.do_clear_bss_loop>
    2bfa:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <main>
    2bfe:	0c 94 7e 70 	jmp	0xe0fc	; 0xe0fc <_exit>

00002c02 <__bad_interrupt>:
    2c02:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002c06 <glcd_delay>:
    2c06:	00 00       	nop
    2c08:	08 95       	ret

00002c0a <glcd_delay_1us>:
    2c0a:	fd df       	rcall	.-6      	; 0x2c06 <glcd_delay>
    2c0c:	fc df       	rcall	.-8      	; 0x2c06 <glcd_delay>
    2c0e:	fb df       	rcall	.-10     	; 0x2c06 <glcd_delay>
    2c10:	fa df       	rcall	.-12     	; 0x2c06 <glcd_delay>
    2c12:	08 95       	ret

00002c14 <bind_master>:
    2c14:	cf 93       	push	r28

00002c16 <master_loop>:
    2c16:	58 98       	cbi	0x0b, 0	; 11
    2c18:	c6 e7       	ldi	r28, 0x76	; 118
    2c1a:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <VarDelay>
    2c1e:	58 9a       	sbi	0x0b, 0	; 11
    2c20:	ca e7       	ldi	r28, 0x7A	; 122
    2c22:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <VarDelay>
    2c26:	8a 95       	dec	r24
    2c28:	b1 f7       	brne	.-20     	; 0x2c16 <master_loop>
    2c2a:	cf 91       	pop	r28
    2c2c:	08 95       	ret

00002c2e <VarDelay>:
    2c2e:	00 c0       	rjmp	.+0      	; 0x2c30 <VarDelay+0x2>
    2c30:	00 c0       	rjmp	.+0      	; 0x2c32 <VarDelay+0x4>
    2c32:	00 c0       	rjmp	.+0      	; 0x2c34 <VarDelay+0x6>
    2c34:	00 c0       	rjmp	.+0      	; 0x2c36 <VarDelay+0x8>
    2c36:	00 c0       	rjmp	.+0      	; 0x2c38 <VarDelay+0xa>
    2c38:	00 c0       	rjmp	.+0      	; 0x2c3a <VarDelay+0xc>
    2c3a:	00 c0       	rjmp	.+0      	; 0x2c3c <VarDelay+0xe>
    2c3c:	00 c0       	rjmp	.+0      	; 0x2c3e <VarDelay+0x10>
    2c3e:	00 00       	nop
    2c40:	ca 95       	dec	r28
    2c42:	a9 f7       	brne	.-22     	; 0x2c2e <VarDelay>
    2c44:	08 95       	ret

00002c46 <output_servo_ppm_asm>:
    2c46:	f6 2e       	mov	r15, r22
    2c48:	ef 93       	push	r30
    2c4a:	ff 93       	push	r31
    2c4c:	af 93       	push	r26
    2c4e:	bf 93       	push	r27
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	2f 93       	push	r18
    2c5a:	3f 93       	push	r19
    2c5c:	4f 93       	push	r20
    2c5e:	5f 93       	push	r21
    2c60:	6f 93       	push	r22
    2c62:	7f 93       	push	r23
    2c64:	e8 2f       	mov	r30, r24
    2c66:	f9 2f       	mov	r31, r25
    2c68:	8f 93       	push	r24
    2c6a:	9f 93       	push	r25
    2c6c:	a1 91       	ld	r26, Z+
    2c6e:	b1 91       	ld	r27, Z+
    2c70:	a6 5c       	subi	r26, 0xC6	; 198
    2c72:	b0 40       	sbci	r27, 0x00	; 0
    2c74:	af 93       	push	r26
    2c76:	bf 93       	push	r27
    2c78:	a7 70       	andi	r26, 0x07	; 7
    2c7a:	7a 2f       	mov	r23, r26
    2c7c:	a1 91       	ld	r26, Z+
    2c7e:	b1 91       	ld	r27, Z+
    2c80:	ae 5b       	subi	r26, 0xBE	; 190
    2c82:	b0 40       	sbci	r27, 0x00	; 0
    2c84:	af 93       	push	r26
    2c86:	bf 93       	push	r27
    2c88:	a7 70       	andi	r26, 0x07	; 7
    2c8a:	6a 2f       	mov	r22, r26
    2c8c:	a1 91       	ld	r26, Z+
    2c8e:	b1 91       	ld	r27, Z+
    2c90:	a6 5b       	subi	r26, 0xB6	; 182
    2c92:	b0 40       	sbci	r27, 0x00	; 0
    2c94:	af 93       	push	r26
    2c96:	bf 93       	push	r27
    2c98:	a7 70       	andi	r26, 0x07	; 7
    2c9a:	5a 2f       	mov	r21, r26
    2c9c:	a1 91       	ld	r26, Z+
    2c9e:	b1 91       	ld	r27, Z+
    2ca0:	ae 5a       	subi	r26, 0xAE	; 174
    2ca2:	b0 40       	sbci	r27, 0x00	; 0
    2ca4:	af 93       	push	r26
    2ca6:	bf 93       	push	r27
    2ca8:	a7 70       	andi	r26, 0x07	; 7
    2caa:	4a 2f       	mov	r20, r26
    2cac:	a1 91       	ld	r26, Z+
    2cae:	b1 91       	ld	r27, Z+
    2cb0:	a5 5a       	subi	r26, 0xA5	; 165
    2cb2:	b0 40       	sbci	r27, 0x00	; 0
    2cb4:	af 93       	push	r26
    2cb6:	bf 93       	push	r27
    2cb8:	a7 70       	andi	r26, 0x07	; 7
    2cba:	3a 2f       	mov	r19, r26
    2cbc:	a1 91       	ld	r26, Z+
    2cbe:	b1 91       	ld	r27, Z+
    2cc0:	ad 59       	subi	r26, 0x9D	; 157
    2cc2:	b0 40       	sbci	r27, 0x00	; 0
    2cc4:	af 93       	push	r26
    2cc6:	bf 93       	push	r27
    2cc8:	a7 70       	andi	r26, 0x07	; 7
    2cca:	2a 2f       	mov	r18, r26
    2ccc:	a1 91       	ld	r26, Z+
    2cce:	b1 91       	ld	r27, Z+
    2cd0:	a5 59       	subi	r26, 0x95	; 149
    2cd2:	b0 40       	sbci	r27, 0x00	; 0
    2cd4:	af 93       	push	r26
    2cd6:	bf 93       	push	r27
    2cd8:	a7 70       	andi	r26, 0x07	; 7
    2cda:	1a 2f       	mov	r17, r26
    2cdc:	a1 91       	ld	r26, Z+
    2cde:	b1 91       	ld	r27, Z+
    2ce0:	ad 58       	subi	r26, 0x8D	; 141
    2ce2:	b0 40       	sbci	r27, 0x00	; 0
    2ce4:	af 93       	push	r26
    2ce6:	bf 93       	push	r27
    2ce8:	a7 70       	andi	r26, 0x07	; 7
    2cea:	0a 2f       	mov	r16, r26
    2cec:	97 2f       	mov	r25, r23
    2cee:	0e 94 91 17 	call	0x2f22	; 0x2f22 <DelayHigh>
    2cf2:	f0 fc       	sbrc	r15, 0
    2cf4:	46 9a       	sbi	0x08, 6	; 8
    2cf6:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <DelayLow>
    2cfa:	96 2f       	mov	r25, r22
    2cfc:	0e 94 91 17 	call	0x2f22	; 0x2f22 <DelayHigh>
    2d00:	f1 fc       	sbrc	r15, 1
    2d02:	44 9a       	sbi	0x08, 4	; 8
    2d04:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <DelayLow>
    2d08:	95 2f       	mov	r25, r21
    2d0a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <DelayHigh>
    2d0e:	f2 fc       	sbrc	r15, 2
    2d10:	42 9a       	sbi	0x08, 2	; 8
    2d12:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <DelayLow>
    2d16:	94 2f       	mov	r25, r20
    2d18:	0e 94 91 17 	call	0x2f22	; 0x2f22 <DelayHigh>
    2d1c:	f3 fc       	sbrc	r15, 3
    2d1e:	43 9a       	sbi	0x08, 3	; 8
    2d20:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <DelayLow>
    2d24:	93 2f       	mov	r25, r19
    2d26:	0e 94 91 17 	call	0x2f22	; 0x2f22 <DelayHigh>
    2d2a:	f4 fc       	sbrc	r15, 4
    2d2c:	14 9a       	sbi	0x02, 4	; 2
    2d2e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <DelayLow>
    2d32:	92 2f       	mov	r25, r18
    2d34:	0e 94 91 17 	call	0x2f22	; 0x2f22 <DelayHigh>
    2d38:	f5 fc       	sbrc	r15, 5
    2d3a:	15 9a       	sbi	0x02, 5	; 2
    2d3c:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <DelayLow>
    2d40:	91 2f       	mov	r25, r17
    2d42:	0e 94 91 17 	call	0x2f22	; 0x2f22 <DelayHigh>
    2d46:	f6 fc       	sbrc	r15, 6
    2d48:	45 9a       	sbi	0x08, 5	; 8
    2d4a:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <DelayLow>
    2d4e:	90 2f       	mov	r25, r16
    2d50:	0e 94 91 17 	call	0x2f22	; 0x2f22 <DelayHigh>
    2d54:	f7 fc       	sbrc	r15, 7
    2d56:	47 9a       	sbi	0x08, 7	; 8
    2d58:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <DelayLow>
    2d5c:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <pwm_delay>
    2d60:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <pwm_delay>
    2d64:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <pwm_delay>
    2d68:	bf 91       	pop	r27
    2d6a:	af 91       	pop	r26
    2d6c:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <shuffle_8>
    2d70:	0a 2f       	mov	r16, r26
    2d72:	bf 91       	pop	r27
    2d74:	af 91       	pop	r26
    2d76:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <shuffle_8>
    2d7a:	1a 2f       	mov	r17, r26
    2d7c:	bf 91       	pop	r27
    2d7e:	af 91       	pop	r26
    2d80:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <shuffle_8>
    2d84:	2a 2f       	mov	r18, r26
    2d86:	bf 91       	pop	r27
    2d88:	af 91       	pop	r26
    2d8a:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <shuffle_8>
    2d8e:	3a 2f       	mov	r19, r26
    2d90:	bf 91       	pop	r27
    2d92:	af 91       	pop	r26
    2d94:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <shuffle_8>
    2d98:	4a 2f       	mov	r20, r26
    2d9a:	bf 91       	pop	r27
    2d9c:	af 91       	pop	r26
    2d9e:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <shuffle_8>
    2da2:	5a 2f       	mov	r21, r26
    2da4:	bf 91       	pop	r27
    2da6:	af 91       	pop	r26
    2da8:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <shuffle_8>
    2dac:	6a 2f       	mov	r22, r26
    2dae:	bf 91       	pop	r27
    2db0:	af 91       	pop	r26
    2db2:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <shuffle_8>
    2db6:	7a 2f       	mov	r23, r26
    2db8:	cf ef       	ldi	r28, 0xFF	; 255
    2dba:	d0 e0       	ldi	r29, 0x00	; 0
    2dbc:	00 24       	eor	r0, r0

00002dbe <nloop>:
    2dbe:	71 50       	subi	r23, 0x01	; 1
    2dc0:	19 f4       	brne	.+6      	; 0x2dc8 <j1>
    2dc2:	46 98       	cbi	0x08, 6	; 8
    2dc4:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <jj1>

00002dc8 <j1>:
    2dc8:	00 c0       	rjmp	.+0      	; 0x2dca <j1+0x2>
    2dca:	00 c0       	rjmp	.+0      	; 0x2dcc <jj1>

00002dcc <jj1>:
    2dcc:	61 50       	subi	r22, 0x01	; 1
    2dce:	19 f4       	brne	.+6      	; 0x2dd6 <j2>
    2dd0:	44 98       	cbi	0x08, 4	; 8
    2dd2:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <jj2>

00002dd6 <j2>:
    2dd6:	00 c0       	rjmp	.+0      	; 0x2dd8 <j2+0x2>
    2dd8:	00 c0       	rjmp	.+0      	; 0x2dda <jj2>

00002dda <jj2>:
    2dda:	51 50       	subi	r21, 0x01	; 1
    2ddc:	19 f4       	brne	.+6      	; 0x2de4 <j3>
    2dde:	42 98       	cbi	0x08, 2	; 8
    2de0:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <jj3>

00002de4 <j3>:
    2de4:	00 c0       	rjmp	.+0      	; 0x2de6 <j3+0x2>
    2de6:	00 c0       	rjmp	.+0      	; 0x2de8 <jj3>

00002de8 <jj3>:
    2de8:	41 50       	subi	r20, 0x01	; 1
    2dea:	19 f4       	brne	.+6      	; 0x2df2 <j4>
    2dec:	43 98       	cbi	0x08, 3	; 8
    2dee:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <jj4>

00002df2 <j4>:
    2df2:	00 c0       	rjmp	.+0      	; 0x2df4 <j4+0x2>
    2df4:	00 c0       	rjmp	.+0      	; 0x2df6 <jj4>

00002df6 <jj4>:
    2df6:	31 50       	subi	r19, 0x01	; 1
    2df8:	19 f4       	brne	.+6      	; 0x2e00 <j5>
    2dfa:	14 98       	cbi	0x02, 4	; 2
    2dfc:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <jj5>

00002e00 <j5>:
    2e00:	00 c0       	rjmp	.+0      	; 0x2e02 <j5+0x2>
    2e02:	00 c0       	rjmp	.+0      	; 0x2e04 <jj5>

00002e04 <jj5>:
    2e04:	21 50       	subi	r18, 0x01	; 1
    2e06:	19 f4       	brne	.+6      	; 0x2e0e <j6>
    2e08:	15 98       	cbi	0x02, 5	; 2
    2e0a:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <jj6>

00002e0e <j6>:
    2e0e:	00 c0       	rjmp	.+0      	; 0x2e10 <j6+0x2>
    2e10:	00 c0       	rjmp	.+0      	; 0x2e12 <jj6>

00002e12 <jj6>:
    2e12:	11 50       	subi	r17, 0x01	; 1
    2e14:	19 f4       	brne	.+6      	; 0x2e1c <j7>
    2e16:	45 98       	cbi	0x08, 5	; 8
    2e18:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <jj7>

00002e1c <j7>:
    2e1c:	00 c0       	rjmp	.+0      	; 0x2e1e <j7+0x2>
    2e1e:	00 c0       	rjmp	.+0      	; 0x2e20 <jj7>

00002e20 <jj7>:
    2e20:	01 50       	subi	r16, 0x01	; 1
    2e22:	19 f4       	brne	.+6      	; 0x2e2a <j8>
    2e24:	47 98       	cbi	0x08, 7	; 8
    2e26:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <jj8>

00002e2a <j8>:
    2e2a:	00 c0       	rjmp	.+0      	; 0x2e2c <j8+0x2>
    2e2c:	00 c0       	rjmp	.+0      	; 0x2e2e <jj8>

00002e2e <jj8>:
    2e2e:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pad_100_delay>
    2e32:	c1 50       	subi	r28, 0x01	; 1
    2e34:	d0 09       	sbc	r29, r0
    2e36:	11 f0       	breq	.+4      	; 0x2e3c <skiploop>
    2e38:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <nloop>

00002e3c <skiploop>:
    2e3c:	9f 91       	pop	r25
    2e3e:	8f 91       	pop	r24
    2e40:	7f 91       	pop	r23
    2e42:	6f 91       	pop	r22
    2e44:	5f 91       	pop	r21
    2e46:	4f 91       	pop	r20
    2e48:	3f 91       	pop	r19
    2e4a:	2f 91       	pop	r18
    2e4c:	1f 91       	pop	r17
    2e4e:	0f 91       	pop	r16
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	bf 91       	pop	r27
    2e56:	af 91       	pop	r26
    2e58:	ff 91       	pop	r31
    2e5a:	ef 91       	pop	r30
    2e5c:	08 95       	ret

00002e5e <output_servo_ppm_asm3>:
    2e5e:	0f 93       	push	r16
    2e60:	1f 93       	push	r17
    2e62:	2f 93       	push	r18
    2e64:	0c ef       	ldi	r16, 0xFC	; 252
    2e66:	18 e0       	ldi	r17, 0x08	; 8
    2e68:	00 24       	eor	r0, r0

00002e6a <jump_table>:
    2e6a:	80 30       	cpi	r24, 0x00	; 0
    2e6c:	71 f0       	breq	.+28     	; 0x2e8a <in1>
    2e6e:	81 30       	cpi	r24, 0x01	; 1
    2e70:	79 f0       	breq	.+30     	; 0x2e90 <in2>
    2e72:	82 30       	cpi	r24, 0x02	; 2
    2e74:	81 f0       	breq	.+32     	; 0x2e96 <in3>
    2e76:	83 30       	cpi	r24, 0x03	; 3
    2e78:	89 f0       	breq	.+34     	; 0x2e9c <in4>
    2e7a:	84 30       	cpi	r24, 0x04	; 4
    2e7c:	91 f0       	breq	.+36     	; 0x2ea2 <in5>
    2e7e:	85 30       	cpi	r24, 0x05	; 5
    2e80:	99 f0       	breq	.+38     	; 0x2ea8 <in6>
    2e82:	86 30       	cpi	r24, 0x06	; 6
    2e84:	a1 f0       	breq	.+40     	; 0x2eae <in7>
    2e86:	87 30       	cpi	r24, 0x07	; 7
    2e88:	a9 f0       	breq	.+42     	; 0x2eb4 <in8>

00002e8a <in1>:
    2e8a:	46 9a       	sbi	0x08, 6	; 8
    2e8c:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <loopin>

00002e90 <in2>:
    2e90:	44 9a       	sbi	0x08, 4	; 8
    2e92:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <loopin>

00002e96 <in3>:
    2e96:	42 9a       	sbi	0x08, 2	; 8
    2e98:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <loopin>

00002e9c <in4>:
    2e9c:	43 9a       	sbi	0x08, 3	; 8
    2e9e:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <loopin>

00002ea2 <in5>:
    2ea2:	14 9a       	sbi	0x02, 4	; 2
    2ea4:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <loopin>

00002ea8 <in6>:
    2ea8:	15 9a       	sbi	0x02, 5	; 2
    2eaa:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <loopin>

00002eae <in7>:
    2eae:	45 9a       	sbi	0x08, 5	; 8
    2eb0:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <loopin>

00002eb4 <in8>:
    2eb4:	47 9a       	sbi	0x08, 7	; 8
    2eb6:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <loopin>

00002eba <loopin>:
    2eba:	00 c0       	rjmp	.+0      	; 0x2ebc <loopin+0x2>
    2ebc:	00 c0       	rjmp	.+0      	; 0x2ebe <loopin+0x4>
    2ebe:	00 c0       	rjmp	.+0      	; 0x2ec0 <loopin+0x6>
    2ec0:	00 c0       	rjmp	.+0      	; 0x2ec2 <loopin+0x8>
    2ec2:	00 c0       	rjmp	.+0      	; 0x2ec4 <loopin+0xa>
    2ec4:	00 c0       	rjmp	.+0      	; 0x2ec6 <loopin+0xc>
    2ec6:	61 50       	subi	r22, 0x01	; 1
    2ec8:	70 09       	sbc	r23, r0
    2eca:	19 f4       	brne	.+6      	; 0x2ed2 <loopout>
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	28 b9       	out	0x08, r18	; 8
    2ed0:	22 b9       	out	0x02, r18	; 2

00002ed2 <loopout>:
    2ed2:	01 50       	subi	r16, 0x01	; 1
    2ed4:	10 09       	sbc	r17, r0
    2ed6:	89 f7       	brne	.-30     	; 0x2eba <loopin>
    2ed8:	2f 91       	pop	r18
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	08 95       	ret

00002ee0 <pwm_delay>:
    2ee0:	0f 93       	push	r16
    2ee2:	05 e6       	ldi	r16, 0x65	; 101

00002ee4 <pwm_loop>:
    2ee4:	00 c0       	rjmp	.+0      	; 0x2ee6 <pwm_loop+0x2>
    2ee6:	00 c0       	rjmp	.+0      	; 0x2ee8 <pwm_loop+0x4>
    2ee8:	00 c0       	rjmp	.+0      	; 0x2eea <pwm_loop+0x6>
    2eea:	01 50       	subi	r16, 0x01	; 1
    2eec:	d9 f7       	brne	.-10     	; 0x2ee4 <pwm_loop>

00002eee <pwm_exit>:
    2eee:	0f 91       	pop	r16
    2ef0:	08 95       	ret

00002ef2 <pad_100_delay>:
    2ef2:	0f 93       	push	r16
    2ef4:	09 e0       	ldi	r16, 0x09	; 9

00002ef6 <pad_100>:
    2ef6:	00 c0       	rjmp	.+0      	; 0x2ef8 <pad_100+0x2>
    2ef8:	00 c0       	rjmp	.+0      	; 0x2efa <pad_100+0x4>
    2efa:	00 c0       	rjmp	.+0      	; 0x2efc <pad_100+0x6>
    2efc:	01 50       	subi	r16, 0x01	; 1
    2efe:	d9 f7       	brne	.-10     	; 0x2ef6 <pad_100>
    2f00:	00 00       	nop
    2f02:	00 c0       	rjmp	.+0      	; 0x2f04 <pad_100+0xe>
    2f04:	00 c0       	rjmp	.+0      	; 0x2f06 <pad_100+0x10>
    2f06:	0f 91       	pop	r16
    2f08:	08 95       	ret

00002f0a <us_delay>:
    2f0a:	00 c0       	rjmp	.+0      	; 0x2f0c <us_delay+0x2>
    2f0c:	00 c0       	rjmp	.+0      	; 0x2f0e <us_delay+0x4>
    2f0e:	00 c0       	rjmp	.+0      	; 0x2f10 <us_delay+0x6>
    2f10:	00 c0       	rjmp	.+0      	; 0x2f12 <us_delay+0x8>
    2f12:	08 95       	ret

00002f14 <shuffle_8>:
    2f14:	b6 95       	lsr	r27
    2f16:	a7 95       	ror	r26
    2f18:	b6 95       	lsr	r27
    2f1a:	a7 95       	ror	r26
    2f1c:	b6 95       	lsr	r27
    2f1e:	a7 95       	ror	r26
    2f20:	08 95       	ret

00002f22 <DelayHigh>:
    2f22:	c7 e0       	ldi	r28, 0x07	; 7
    2f24:	97 70       	andi	r25, 0x07	; 7
    2f26:	c9 27       	eor	r28, r25
    2f28:	31 f0       	breq	.+12     	; 0x2f36 <LoopHighOut1>

00002f2a <LoopHigh>:
    2f2a:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <us_delay>
    2f2e:	ca 95       	dec	r28
    2f30:	09 f0       	breq	.+2      	; 0x2f34 <LoopHighOut2>
    2f32:	fb cf       	rjmp	.-10     	; 0x2f2a <LoopHigh>

00002f34 <LoopHighOut2>:
    2f34:	00 c0       	rjmp	.+0      	; 0x2f36 <LoopHighOut1>

00002f36 <LoopHighOut1>:
    2f36:	00 00       	nop
    2f38:	08 95       	ret

00002f3a <DelayLow>:
    2f3a:	c9 2f       	mov	r28, r25
    2f3c:	c7 70       	andi	r28, 0x07	; 7
    2f3e:	31 f0       	breq	.+12     	; 0x2f4c <LoopLowOut1>

00002f40 <LoopLow>:
    2f40:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <us_delay>
    2f44:	ca 95       	dec	r28
    2f46:	09 f0       	breq	.+2      	; 0x2f4a <LoopLowOut2>
    2f48:	fb cf       	rjmp	.-10     	; 0x2f40 <LoopLow>

00002f4a <LoopLowOut2>:
    2f4a:	00 c0       	rjmp	.+0      	; 0x2f4c <LoopLowOut1>

00002f4c <LoopLowOut1>:
    2f4c:	08 95       	ret

00002f4e <get_raw_accs>:
// routine used by the zeroing calibration routine. Chicken | Egg.
// We also cannot merge P1 and P2 here as each have their own zeros.
//***************************************************************

void get_raw_accs(void)
{
    2f4e:	0f 93       	push	r16
    2f50:	1f 93       	push	r17
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	2c 97       	sbiw	r28, 0x0c	; 12
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	cd bf       	out	0x3d, r28	; 61

	// Get data from MPU6050
	uint8_t Accs[6];

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    2f66:	26 e0       	ldi	r18, 0x06	; 6
    2f68:	ae 01       	movw	r20, r28
    2f6a:	4f 5f       	subi	r20, 0xFF	; 255
    2f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6e:	6b e3       	ldi	r22, 0x3B	; 59
    2f70:	80 ed       	ldi	r24, 0xD0	; 208
    2f72:	0e 94 19 3c 	call	0x7832	; 0x7832 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise.
	// This notation is true to the chip, but not the board orientation.
	RawADC[ROLL] = (Accs[0] << 8) + Accs[1];
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	98 2f       	mov	r25, r24
    2f7c:	88 27       	eor	r24, r24
    2f7e:	2a 81       	ldd	r18, Y+2	; 0x02
    2f80:	82 0f       	add	r24, r18
    2f82:	91 1d       	adc	r25, r1
    2f84:	98 87       	std	Y+8, r25	; 0x08
    2f86:	8f 83       	std	Y+7, r24	; 0x07
	RawADC[PITCH] = -((Accs[2] << 8) + Accs[3]);
    2f88:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	98 2f       	mov	r25, r24
    2f8e:	88 27       	eor	r24, r24
    2f90:	2c 81       	ldd	r18, Y+4	; 0x04
    2f92:	82 0f       	add	r24, r18
    2f94:	91 1d       	adc	r25, r1
    2f96:	91 95       	neg	r25
    2f98:	81 95       	neg	r24
    2f9a:	91 09       	sbc	r25, r1
    2f9c:	9a 87       	std	Y+10, r25	; 0x0a
    2f9e:	89 87       	std	Y+9, r24	; 0x09
	RawADC[YAW] = (Accs[4] << 8) + Accs[5];
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	98 2f       	mov	r25, r24
    2fa6:	88 27       	eor	r24, r24
    2fa8:	2e 81       	ldd	r18, Y+6	; 0x06
    2faa:	82 0f       	add	r24, r18
    2fac:	91 1d       	adc	r25, r1
    2fae:	9c 87       	std	Y+12, r25	; 0x0c
    2fb0:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		accADC_P1[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P1][i])] >> 6;
    2fb2:	40 91 63 08 	lds	r20, 0x0863
		accADC_P2[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P2][i])] >> 6;
    2fb6:	20 91 d8 06 	lds	r18, 0x06D8
    2fba:	6a e6       	ldi	r22, 0x6A	; 106
    2fbc:	75 e0       	ldi	r23, 0x05	; 5
    2fbe:	a6 e7       	ldi	r26, 0x76	; 118
    2fc0:	b5 e0       	ldi	r27, 0x05	; 5
    2fc2:	03 e0       	ldi	r16, 0x03	; 3
    2fc4:	40 02       	muls	r20, r16
    2fc6:	a0 01       	movw	r20, r0
    2fc8:	11 24       	eor	r1, r1
    2fca:	13 e0       	ldi	r17, 0x03	; 3
    2fcc:	21 02       	muls	r18, r17
    2fce:	90 01       	movw	r18, r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	e4 0f       	add	r30, r20
    2fda:	f5 1f       	adc	r31, r21
    2fdc:	ea 56       	subi	r30, 0x6A	; 106
    2fde:	fe 4f       	sbci	r31, 0xFE	; 254

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		accADC_P1[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P1][i])] >> 6;
    2fe0:	e4 91       	lpm	r30, Z
    2fe2:	ee 0f       	add	r30, r30
    2fe4:	ff 0b       	sbc	r31, r31
    2fe6:	01 e0       	ldi	r16, 0x01	; 1
    2fe8:	10 e0       	ldi	r17, 0x00	; 0
    2fea:	0c 0f       	add	r16, r28
    2fec:	1d 1f       	adc	r17, r29
    2fee:	e0 0f       	add	r30, r16
    2ff0:	f1 1f       	adc	r31, r17
    2ff2:	06 80       	ldd	r0, Z+6	; 0x06
    2ff4:	f7 81       	ldd	r31, Z+7	; 0x07
    2ff6:	e0 2d       	mov	r30, r0
    2ff8:	8f 01       	movw	r16, r30
    2ffa:	e6 e0       	ldi	r30, 0x06	; 6
    2ffc:	15 95       	asr	r17
    2ffe:	07 95       	ror	r16
    3000:	ea 95       	dec	r30
    3002:	e1 f7       	brne	.-8      	; 0x2ffc <get_raw_accs+0xae>
    3004:	fb 01       	movw	r30, r22
    3006:	01 93       	st	Z+, r16
    3008:	11 93       	st	Z+, r17
    300a:	bf 01       	movw	r22, r30
    300c:	fc 01       	movw	r30, r24
    300e:	e2 0f       	add	r30, r18
    3010:	f3 1f       	adc	r31, r19
    3012:	ea 56       	subi	r30, 0x6A	; 106
    3014:	fe 4f       	sbci	r31, 0xFE	; 254
		accADC_P2[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P2][i])] >> 6;
    3016:	e4 91       	lpm	r30, Z
    3018:	ee 0f       	add	r30, r30
    301a:	ff 0b       	sbc	r31, r31
    301c:	01 e0       	ldi	r16, 0x01	; 1
    301e:	10 e0       	ldi	r17, 0x00	; 0
    3020:	0c 0f       	add	r16, r28
    3022:	1d 1f       	adc	r17, r29
    3024:	e0 0f       	add	r30, r16
    3026:	f1 1f       	adc	r31, r17
    3028:	06 80       	ldd	r0, Z+6	; 0x06
    302a:	f7 81       	ldd	r31, Z+7	; 0x07
    302c:	e0 2d       	mov	r30, r0
    302e:	16 e0       	ldi	r17, 0x06	; 6
    3030:	f5 95       	asr	r31
    3032:	e7 95       	ror	r30
    3034:	1a 95       	dec	r17
    3036:	e1 f7       	brne	.-8      	; 0x3030 <get_raw_accs+0xe2>
    3038:	ed 93       	st	X+, r30
    303a:	fd 93       	st	X+, r31
    303c:	01 96       	adiw	r24, 0x01	; 1
	RawADC[ROLL] = (Accs[0] << 8) + Accs[1];
	RawADC[PITCH] = -((Accs[2] << 8) + Accs[3]);
	RawADC[YAW] = (Accs[4] << 8) + Accs[5];

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
    303e:	83 30       	cpi	r24, 0x03	; 3
    3040:	91 05       	cpc	r25, r1
    3042:	49 f6       	brne	.-110    	; 0x2fd6 <get_raw_accs+0x88>
	{
		// Rearrange the sensors for both orientations
		accADC_P1[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P1][i])] >> 6;
		accADC_P2[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P2][i])] >> 6;
	}
}
    3044:	2c 96       	adiw	r28, 0x0c	; 12
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	1f 91       	pop	r17
    3056:	0f 91       	pop	r16
    3058:	08 95       	ret

0000305a <ReadAcc>:
int16_t accADC_P1[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order (P1)
int16_t accADC_P2[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order (P2)
float accVertf = 0.0;				// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    305a:	4f 92       	push	r4
    305c:	5f 92       	push	r5
    305e:	6f 92       	push	r6
    3060:	7f 92       	push	r7
    3062:	8f 92       	push	r8
    3064:	9f 92       	push	r9
    3066:	af 92       	push	r10
    3068:	bf 92       	push	r11
    306a:	cf 92       	push	r12
    306c:	df 92       	push	r13
    306e:	ef 92       	push	r14
    3070:	ff 92       	push	r15
    3072:	0f 93       	push	r16
    3074:	1f 93       	push	r17
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
	uint8_t i;
	int16_t temp1, temp2;

	get_raw_accs();					// Updates accADC_P1[] and accADC_P2[] (RPY)
    307a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <get_raw_accs>

	// P1
	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inverse calibration
	if (!(Config.Main_flags & (1 << inv_cal_done_P1)))
    307e:	20 91 39 08 	lds	r18, 0x0839
    3082:	20 fd       	sbrc	r18, 0
    3084:	05 c0       	rjmp	.+10     	; 0x3090 <ReadAcc+0x36>
	{
		Config.AccZero_P1[YAW] = 0;
    3086:	10 92 21 08 	sts	0x0821, r1
    308a:	10 92 20 08 	sts	0x0820, r1
    308e:	0e c0       	rjmp	.+28     	; 0x30ac <ReadAcc+0x52>
	}
	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have valid values
	else
	{
		Config.AccZero_P1[YAW] = Config.AccZeroNormZ_P1 - Config.AccZeroDiff_P1;
    3090:	80 91 22 08 	lds	r24, 0x0822
    3094:	90 91 23 08 	lds	r25, 0x0823
    3098:	40 91 26 08 	lds	r20, 0x0826
    309c:	50 91 27 08 	lds	r21, 0x0827
    30a0:	84 1b       	sub	r24, r20
    30a2:	95 0b       	sbc	r25, r21
    30a4:	90 93 21 08 	sts	0x0821, r25
    30a8:	80 93 20 08 	sts	0x0820, r24
	}
	
	// P2
	if (!(Config.Main_flags & (1 << inv_cal_done_P2)))
    30ac:	22 fd       	sbrc	r18, 2
    30ae:	05 c0       	rjmp	.+10     	; 0x30ba <ReadAcc+0x60>
	{
		Config.AccZero_P2[YAW] = 0;
    30b0:	10 92 56 08 	sts	0x0856, r1
    30b4:	10 92 55 08 	sts	0x0855, r1
    30b8:	0e c0       	rjmp	.+28     	; 0x30d6 <ReadAcc+0x7c>
	}
	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have valid values
	else
	{
		Config.AccZero_P2[YAW] = Config.AccZeroNormZ_P2 - Config.AccZeroDiff_P2;
    30ba:	80 91 57 08 	lds	r24, 0x0857
    30be:	90 91 58 08 	lds	r25, 0x0858
    30c2:	20 91 5b 08 	lds	r18, 0x085B
    30c6:	30 91 5c 08 	lds	r19, 0x085C
    30ca:	82 1b       	sub	r24, r18
    30cc:	93 0b       	sbc	r25, r19
    30ce:	90 93 56 08 	sts	0x0856, r25
    30d2:	80 93 55 08 	sts	0x0855, r24
    30d6:	6a e6       	ldi	r22, 0x6A	; 106
    30d8:	66 2e       	mov	r6, r22
    30da:	65 e0       	ldi	r22, 0x05	; 5
    30dc:	76 2e       	mov	r7, r22
    30de:	76 e7       	ldi	r23, 0x76	; 118
    30e0:	c7 2e       	mov	r12, r23
    30e2:	75 e0       	ldi	r23, 0x05	; 5
    30e4:	d7 2e       	mov	r13, r23
    30e6:	01 e5       	ldi	r16, 0x51	; 81
    30e8:	18 e0       	ldi	r17, 0x08	; 8
    30ea:	e0 e7       	ldi	r30, 0x70	; 112
    30ec:	ee 2e       	mov	r14, r30
    30ee:	e5 e0       	ldi	r30, 0x05	; 5
    30f0:	fe 2e       	mov	r15, r30
    30f2:	c0 e0       	ldi	r28, 0x00	; 0
    30f4:	d0 e0       	ldi	r29, 0x00	; 0
			// Change polarity - use the zeros from the appropriate calibrate
			temp1 = ((accADC_P1[i] - Config.AccZero_P1[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][i]));
			temp2 = ((accADC_P2[i] - Config.AccZero_P2[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][i]));
			
			// Get P1 value
			temp1 = scale32(temp1, (100 - transition));
    30f6:	f4 e6       	ldi	r31, 0x64	; 100
    30f8:	4f 2e       	mov	r4, r31
    30fa:	51 2c       	mov	r5, r1

	// Roll and Pitch are handled normally
	for (i = 0; i < (NUMBEROFAXIS - 1); i++)
	{
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    30fc:	80 91 d9 06 	lds	r24, 0x06D9
    3100:	30 91 d8 06 	lds	r19, 0x06D8
    3104:	88 23       	and	r24, r24
    3106:	09 f4       	brne	.+2      	; 0x310a <ReadAcc+0xb0>
    3108:	4c c0       	rjmp	.+152    	; 0x31a2 <ReadAcc+0x148>
		{
			// Change polarity - use the zeros from the appropriate calibrate
			temp1 = ((accADC_P1[i] - Config.AccZero_P1[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][i]));
    310a:	80 91 63 08 	lds	r24, 0x0863
    310e:	08 2e       	mov	r0, r24
    3110:	00 0c       	add	r0, r0
    3112:	99 0b       	sbc	r25, r25
    3114:	fc 01       	movw	r30, r24
    3116:	ee 0f       	add	r30, r30
    3118:	ff 1f       	adc	r31, r31
    311a:	8e 0f       	add	r24, r30
    311c:	9f 1f       	adc	r25, r31
    311e:	8c 0f       	add	r24, r28
    3120:	9d 1f       	adc	r25, r29
    3122:	fc 01       	movw	r30, r24
    3124:	e2 5b       	subi	r30, 0xB2	; 178
    3126:	fe 4f       	sbci	r31, 0xFE	; 254
    3128:	24 91       	lpm	r18, Z
    312a:	f3 01       	movw	r30, r6
    312c:	40 81       	ld	r20, Z
    312e:	51 81       	ldd	r21, Z+1	; 0x01
    3130:	f8 01       	movw	r30, r16
    3132:	f5 97       	sbiw	r30, 0x35	; 53
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	48 1b       	sub	r20, r24
    313a:	59 0b       	sbc	r21, r25
    313c:	24 03       	mulsu	r18, r20
    313e:	c0 01       	movw	r24, r0
    3140:	25 9f       	mul	r18, r21
    3142:	90 0d       	add	r25, r0
    3144:	11 24       	eor	r1, r1
			temp2 = ((accADC_P2[i] - Config.AccZero_P2[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][i]));
    3146:	e3 2f       	mov	r30, r19
    3148:	33 0f       	add	r19, r19
    314a:	ff 0b       	sbc	r31, r31
    314c:	9f 01       	movw	r18, r30
    314e:	22 0f       	add	r18, r18
    3150:	33 1f       	adc	r19, r19
    3152:	e2 0f       	add	r30, r18
    3154:	f3 1f       	adc	r31, r19
    3156:	ec 0f       	add	r30, r28
    3158:	fd 1f       	adc	r31, r29
    315a:	e2 5b       	subi	r30, 0xB2	; 178
    315c:	fe 4f       	sbci	r31, 0xFE	; 254
    315e:	24 91       	lpm	r18, Z
    3160:	f6 01       	movw	r30, r12
    3162:	40 81       	ld	r20, Z
    3164:	51 81       	ldd	r21, Z+1	; 0x01
    3166:	f8 01       	movw	r30, r16
    3168:	60 81       	ld	r22, Z
    316a:	71 81       	ldd	r23, Z+1	; 0x01
    316c:	46 1b       	sub	r20, r22
    316e:	57 0b       	sbc	r21, r23
    3170:	24 03       	mulsu	r18, r20
    3172:	40 01       	movw	r8, r0
    3174:	25 9f       	mul	r18, r21
    3176:	90 0c       	add	r9, r0
    3178:	11 24       	eor	r1, r1
			
			// Get P1 value
			temp1 = scale32(temp1, (100 - transition));
    317a:	20 91 38 05 	lds	r18, 0x0538
    317e:	30 91 39 05 	lds	r19, 0x0539
    3182:	b2 01       	movw	r22, r4
    3184:	62 1b       	sub	r22, r18
    3186:	73 0b       	sbc	r23, r19
    3188:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    318c:	5c 01       	movw	r10, r24

			// Get P2 value
			temp2 = scale32(temp2, transition);
    318e:	60 91 38 05 	lds	r22, 0x0538
    3192:	70 91 39 05 	lds	r23, 0x0539
    3196:	c4 01       	movw	r24, r8
    3198:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>

			// Sum the two values
			accADC[i] = temp1 + temp2;
    319c:	8a 0d       	add	r24, r10
    319e:	9b 1d       	adc	r25, r11
    31a0:	1a c0       	rjmp	.+52     	; 0x31d6 <ReadAcc+0x17c>
		}
		else
		{
			accADC[i] = ((accADC_P2[i] - Config.AccZero_P2[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][i]));
    31a2:	e3 2f       	mov	r30, r19
    31a4:	33 0f       	add	r19, r19
    31a6:	ff 0b       	sbc	r31, r31
    31a8:	cf 01       	movw	r24, r30
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	e8 0f       	add	r30, r24
    31b0:	f9 1f       	adc	r31, r25
    31b2:	ec 0f       	add	r30, r28
    31b4:	fd 1f       	adc	r31, r29
    31b6:	e2 5b       	subi	r30, 0xB2	; 178
    31b8:	fe 4f       	sbci	r31, 0xFE	; 254
    31ba:	24 91       	lpm	r18, Z
    31bc:	f6 01       	movw	r30, r12
    31be:	40 81       	ld	r20, Z
    31c0:	51 81       	ldd	r21, Z+1	; 0x01
    31c2:	f8 01       	movw	r30, r16
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	48 1b       	sub	r20, r24
    31ca:	59 0b       	sbc	r21, r25
    31cc:	24 03       	mulsu	r18, r20
    31ce:	c0 01       	movw	r24, r0
    31d0:	25 9f       	mul	r18, r21
    31d2:	90 0d       	add	r25, r0
    31d4:	11 24       	eor	r1, r1
    31d6:	f7 01       	movw	r30, r14
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	80 83       	st	Z, r24
    31dc:	f2 e0       	ldi	r31, 0x02	; 2
    31de:	6f 0e       	add	r6, r31
    31e0:	71 1c       	adc	r7, r1
    31e2:	82 e0       	ldi	r24, 0x02	; 2
    31e4:	c8 0e       	add	r12, r24
    31e6:	d1 1c       	adc	r13, r1
    31e8:	0e 5f       	subi	r16, 0xFE	; 254
    31ea:	1f 4f       	sbci	r17, 0xFF	; 255
    31ec:	e2 e0       	ldi	r30, 0x02	; 2
    31ee:	ee 0e       	add	r14, r30
    31f0:	f1 1c       	adc	r15, r1
	{
		Config.AccZero_P2[YAW] = Config.AccZeroNormZ_P2 - Config.AccZeroDiff_P2;
	}

	// Roll and Pitch are handled normally
	for (i = 0; i < (NUMBEROFAXIS - 1); i++)
    31f2:	21 97       	sbiw	r28, 0x01	; 1
    31f4:	19 f0       	breq	.+6      	; 0x31fc <ReadAcc+0x1a2>
    31f6:	c1 e0       	ldi	r28, 0x01	; 1
    31f8:	d0 e0       	ldi	r29, 0x00	; 0
    31fa:	80 cf       	rjmp	.-256    	; 0x30fc <ReadAcc+0xa2>
		}
	}
	
	// Z -axis requires special handling as the zeros are already polarity corrected
	// Only need to do this if the orientations differ
	if (Config.P1_Reference != NO_ORIENT)
    31fc:	80 91 d9 06 	lds	r24, 0x06D9
    3200:	90 91 d8 06 	lds	r25, 0x06D8
    3204:	60 91 7a 05 	lds	r22, 0x057A
    3208:	70 91 7b 05 	lds	r23, 0x057B
    320c:	40 91 55 08 	lds	r20, 0x0855
    3210:	50 91 56 08 	lds	r21, 0x0856
    3214:	88 23       	and	r24, r24
    3216:	09 f4       	brne	.+2      	; 0x321a <ReadAcc+0x1c0>
    3218:	44 c0       	rjmp	.+136    	; 0x32a2 <ReadAcc+0x248>
	{
		// Change polarity - use the zeros from the appropriate calibrate
		temp1 = ((accADC_P1[YAW] * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]) - Config.AccZero_P1[YAW]));
    321a:	e0 91 63 08 	lds	r30, 0x0863
    321e:	0e 2e       	mov	r0, r30
    3220:	00 0c       	add	r0, r0
    3222:	ff 0b       	sbc	r31, r31
    3224:	9f 01       	movw	r18, r30
    3226:	22 0f       	add	r18, r18
    3228:	33 1f       	adc	r19, r19
    322a:	e2 0f       	add	r30, r18
    322c:	f3 1f       	adc	r31, r19
    322e:	e0 5b       	subi	r30, 0xB0	; 176
    3230:	fe 4f       	sbci	r31, 0xFE	; 254
    3232:	24 91       	lpm	r18, Z
    3234:	00 91 6e 05 	lds	r16, 0x056E
    3238:	10 91 6f 05 	lds	r17, 0x056F
    323c:	20 03       	mulsu	r18, r16
    323e:	d0 01       	movw	r26, r0
    3240:	21 9f       	mul	r18, r17
    3242:	b0 0d       	add	r27, r0
    3244:	11 24       	eor	r1, r1
    3246:	20 91 20 08 	lds	r18, 0x0820
    324a:	30 91 21 08 	lds	r19, 0x0821
    324e:	a2 1b       	sub	r26, r18
    3250:	b3 0b       	sbc	r27, r19
		temp2 = ((accADC_P2[YAW] * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]) - Config.AccZero_P2[YAW]));
    3252:	e9 2f       	mov	r30, r25
    3254:	99 0f       	add	r25, r25
    3256:	ff 0b       	sbc	r31, r31
    3258:	cf 01       	movw	r24, r30
    325a:	88 0f       	add	r24, r24
    325c:	99 1f       	adc	r25, r25
    325e:	e8 0f       	add	r30, r24
    3260:	f9 1f       	adc	r31, r25
    3262:	e0 5b       	subi	r30, 0xB0	; 176
    3264:	fe 4f       	sbci	r31, 0xFE	; 254
    3266:	24 91       	lpm	r18, Z
    3268:	26 03       	mulsu	r18, r22
    326a:	80 01       	movw	r16, r0
    326c:	27 9f       	mul	r18, r23
    326e:	10 0d       	add	r17, r0
    3270:	11 24       	eor	r1, r1
    3272:	04 1b       	sub	r16, r20
    3274:	15 0b       	sbc	r17, r21
			
		// Get P1 value
		temp1 = scale32(temp1, (100 - transition));
    3276:	80 91 38 05 	lds	r24, 0x0538
    327a:	90 91 39 05 	lds	r25, 0x0539
    327e:	64 e6       	ldi	r22, 0x64	; 100
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	68 1b       	sub	r22, r24
    3284:	79 0b       	sbc	r23, r25
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    328c:	ec 01       	movw	r28, r24

		// Get P2 value
		temp2 = scale32(temp2, transition);
    328e:	60 91 38 05 	lds	r22, 0x0538
    3292:	70 91 39 05 	lds	r23, 0x0539
    3296:	c8 01       	movw	r24, r16
    3298:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>

		// Sum the two values
		accADC[YAW] = temp1 + temp2;
    329c:	8c 0f       	add	r24, r28
    329e:	9d 1f       	adc	r25, r29
    32a0:	12 c0       	rjmp	.+36     	; 0x32c6 <ReadAcc+0x26c>
	}
	else
	{
		accADC[YAW] = ((accADC_P2[YAW] * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]) - Config.AccZero_P2[YAW]));
    32a2:	e9 2f       	mov	r30, r25
    32a4:	99 0f       	add	r25, r25
    32a6:	ff 0b       	sbc	r31, r31
    32a8:	cf 01       	movw	r24, r30
    32aa:	88 0f       	add	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	e8 0f       	add	r30, r24
    32b0:	f9 1f       	adc	r31, r25
    32b2:	e0 5b       	subi	r30, 0xB0	; 176
    32b4:	fe 4f       	sbci	r31, 0xFE	; 254
    32b6:	24 91       	lpm	r18, Z
    32b8:	26 03       	mulsu	r18, r22
    32ba:	c0 01       	movw	r24, r0
    32bc:	27 9f       	mul	r18, r23
    32be:	90 0d       	add	r25, r0
    32c0:	11 24       	eor	r1, r1
    32c2:	84 1b       	sub	r24, r20
    32c4:	95 0b       	sbc	r25, r21
    32c6:	90 93 75 05 	sts	0x0575, r25
    32ca:	80 93 74 05 	sts	0x0574, r24
	
	// Note also that accSmooth[] has already got the correct acc orientations, 
	// so only needs the zeroing value merged from one to the other.

	// Only need to do this if the orientations differ
	if (Config.P1_Reference != NO_ORIENT)
    32ce:	80 91 d9 06 	lds	r24, 0x06D9
    32d2:	c0 91 57 08 	lds	r28, 0x0857
    32d6:	d0 91 58 08 	lds	r29, 0x0858
    32da:	00 91 55 08 	lds	r16, 0x0855
    32de:	10 91 56 08 	lds	r17, 0x0856
    32e2:	88 23       	and	r24, r24
    32e4:	09 f4       	brne	.+2      	; 0x32e8 <ReadAcc+0x28e>
    32e6:	5c c0       	rjmp	.+184    	; 0x33a0 <ReadAcc+0x346>
	{
		// Calculate the correct Z-axis data based on the orientation
		temp1 = accSmooth[YAW] + (Config.AccZeroNormZ_P1 - Config.AccZero_P1[YAW]); 
    32e8:	c0 90 29 06 	lds	r12, 0x0629
    32ec:	d0 90 2a 06 	lds	r13, 0x062A
    32f0:	e0 90 2b 06 	lds	r14, 0x062B
    32f4:	f0 90 2c 06 	lds	r15, 0x062C
    32f8:	80 91 22 08 	lds	r24, 0x0822
    32fc:	90 91 23 08 	lds	r25, 0x0823
    3300:	20 91 20 08 	lds	r18, 0x0820
    3304:	30 91 21 08 	lds	r19, 0x0821
    3308:	82 1b       	sub	r24, r18
    330a:	93 0b       	sbc	r25, r19
    330c:	bc 01       	movw	r22, r24
    330e:	99 0f       	add	r25, r25
    3310:	88 0b       	sbc	r24, r24
    3312:	99 0b       	sbc	r25, r25
    3314:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    3318:	9b 01       	movw	r18, r22
    331a:	ac 01       	movw	r20, r24
    331c:	c7 01       	movw	r24, r14
    331e:	b6 01       	movw	r22, r12
    3320:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    3324:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    3328:	4b 01       	movw	r8, r22
    332a:	5c 01       	movw	r10, r24
		temp2 = accSmooth[YAW] + (Config.AccZeroNormZ_P2 - Config.AccZero_P2[YAW]); 
    332c:	c0 1b       	sub	r28, r16
    332e:	d1 0b       	sbc	r29, r17
    3330:	be 01       	movw	r22, r28
    3332:	dd 0f       	add	r29, r29
    3334:	88 0b       	sbc	r24, r24
    3336:	99 0b       	sbc	r25, r25
    3338:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    333c:	9b 01       	movw	r18, r22
    333e:	ac 01       	movw	r20, r24
    3340:	c7 01       	movw	r24, r14
    3342:	b6 01       	movw	r22, r12
    3344:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    3348:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    334c:	6b 01       	movw	r12, r22
    334e:	7c 01       	movw	r14, r24
	
		// Merge with transition
		temp1 = scale32(temp1, (100 - transition));
    3350:	80 91 38 05 	lds	r24, 0x0538
    3354:	90 91 39 05 	lds	r25, 0x0539
    3358:	24 e6       	ldi	r18, 0x64	; 100
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	b9 01       	movw	r22, r18
    335e:	68 1b       	sub	r22, r24
    3360:	79 0b       	sbc	r23, r25
    3362:	c4 01       	movw	r24, r8
    3364:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    3368:	8c 01       	movw	r16, r24
		temp2 = scale32(temp2, transition);
    336a:	60 91 38 05 	lds	r22, 0x0538
    336e:	70 91 39 05 	lds	r23, 0x0539
    3372:	c6 01       	movw	r24, r12
    3374:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    3378:	ec 01       	movw	r28, r24
	 
		accVertf = (float)temp1 + temp2;
    337a:	b8 01       	movw	r22, r16
    337c:	11 0f       	add	r17, r17
    337e:	88 0b       	sbc	r24, r24
    3380:	99 0b       	sbc	r25, r25
    3382:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    3386:	6b 01       	movw	r12, r22
    3388:	7c 01       	movw	r14, r24
    338a:	be 01       	movw	r22, r28
    338c:	dd 0f       	add	r29, r29
    338e:	88 0b       	sbc	r24, r24
    3390:	99 0b       	sbc	r25, r25
    3392:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    3396:	9b 01       	movw	r18, r22
    3398:	ac 01       	movw	r20, r24
    339a:	c7 01       	movw	r24, r14
    339c:	b6 01       	movw	r22, r12
    339e:	13 c0       	rjmp	.+38     	; 0x33c6 <ReadAcc+0x36c>
	}
	// Just use the P2 value
	else
	{
		// Calculate the correct Z-axis data based on the orientation
		accVertf = accSmooth[YAW] + (float)(Config.AccZeroNormZ_P2 - Config.AccZero_P2[YAW]);		
    33a0:	be 01       	movw	r22, r28
    33a2:	60 1b       	sub	r22, r16
    33a4:	71 0b       	sbc	r23, r17
    33a6:	07 2e       	mov	r0, r23
    33a8:	00 0c       	add	r0, r0
    33aa:	88 0b       	sbc	r24, r24
    33ac:	99 0b       	sbc	r25, r25
    33ae:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    33b2:	9b 01       	movw	r18, r22
    33b4:	ac 01       	movw	r20, r24
    33b6:	60 91 29 06 	lds	r22, 0x0629
    33ba:	70 91 2a 06 	lds	r23, 0x062A
    33be:	80 91 2b 06 	lds	r24, 0x062B
    33c2:	90 91 2c 06 	lds	r25, 0x062C
    33c6:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    33ca:	60 93 26 05 	sts	0x0526, r22
    33ce:	70 93 27 05 	sts	0x0527, r23
    33d2:	80 93 28 05 	sts	0x0528, r24
    33d6:	90 93 29 05 	sts	0x0529, r25
	}
}
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	ff 90       	pop	r15
    33e4:	ef 90       	pop	r14
    33e6:	df 90       	pop	r13
    33e8:	cf 90       	pop	r12
    33ea:	bf 90       	pop	r11
    33ec:	af 90       	pop	r10
    33ee:	9f 90       	pop	r9
    33f0:	8f 90       	pop	r8
    33f2:	7f 90       	pop	r7
    33f4:	6f 90       	pop	r6
    33f6:	5f 90       	pop	r5
    33f8:	4f 90       	pop	r4
    33fa:	08 95       	ret

000033fc <CalibrateAcc>:
// For V1.2 onwards we have to be able to calibrate both
// orientations when there are more than one.
//***************************************************************

void CalibrateAcc(int8_t type)
{
    33fc:	1f 93       	push	r17
    33fe:	cf 93       	push	r28
    3400:	df 93       	push	r29
    3402:	00 d0       	rcall	.+0      	; 0x3404 <CalibrateAcc+0x8>
    3404:	00 d0       	rcall	.+0      	; 0x3406 <CalibrateAcc+0xa>
    3406:	00 d0       	rcall	.+0      	; 0x3408 <CalibrateAcc+0xc>
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    340c:	1a 82       	std	Y+2, r1	; 0x02
    340e:	19 82       	std	Y+1, r1	; 0x01
    3410:	1c 82       	std	Y+4, r1	; 0x04
    3412:	1b 82       	std	Y+3, r1	; 0x03
    3414:	1e 82       	std	Y+6, r1	; 0x06
    3416:	1d 82       	std	Y+5, r1	; 0x05
    3418:	20 91 38 05 	lds	r18, 0x0538
    341c:	30 91 39 05 	lds	r19, 0x0539

	// Calibrate acc
	// P2
	if (type == NORMAL)
    3420:	81 11       	cpse	r24, r1
    3422:	e0 c0       	rjmp	.+448    	; 0x35e4 <CalibrateAcc+0x1e8>
	{
		// Work out which orientation we are calibrating.
		// Only need to do this if the orientations differ.
		// Just do P2 if orientations the same.
		// Will not save new calibration when different and not firmly in P1 or p2.
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    3424:	20 36       	cpi	r18, 0x60	; 96
    3426:	31 05       	cpc	r19, r1
    3428:	24 f4       	brge	.+8      	; 0x3432 <CalibrateAcc+0x36>
    342a:	80 91 d9 06 	lds	r24, 0x06D9
    342e:	81 11       	cpse	r24, r1
    3430:	63 c0       	rjmp	.+198    	; 0x34f8 <CalibrateAcc+0xfc>
    3432:	10 e2       	ldi	r17, 0x20	; 32
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
			{
				get_raw_accs();						// Updates accADC_P1[] and accADC_P2[] (RPY)
    3434:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <get_raw_accs>
				accZero[ROLL] += accADC_P2[ROLL];
    3438:	29 81       	ldd	r18, Y+1	; 0x01
    343a:	3a 81       	ldd	r19, Y+2	; 0x02
    343c:	80 91 76 05 	lds	r24, 0x0576
    3440:	90 91 77 05 	lds	r25, 0x0577
    3444:	82 0f       	add	r24, r18
    3446:	93 1f       	adc	r25, r19
    3448:	9a 83       	std	Y+2, r25	; 0x02
    344a:	89 83       	std	Y+1, r24	; 0x01
				accZero[PITCH] += accADC_P2[PITCH];
    344c:	2b 81       	ldd	r18, Y+3	; 0x03
    344e:	3c 81       	ldd	r19, Y+4	; 0x04
    3450:	80 91 78 05 	lds	r24, 0x0578
    3454:	90 91 79 05 	lds	r25, 0x0579
    3458:	82 0f       	add	r24, r18
    345a:	93 1f       	adc	r25, r19
    345c:	9c 83       	std	Y+4, r25	; 0x04
    345e:	8b 83       	std	Y+3, r24	; 0x03
				accZero[YAW] += accADC_P2[YAW];
    3460:	2d 81       	ldd	r18, Y+5	; 0x05
    3462:	3e 81       	ldd	r19, Y+6	; 0x06
    3464:	80 91 7a 05 	lds	r24, 0x057A
    3468:	90 91 7b 05 	lds	r25, 0x057B
    346c:	82 0f       	add	r24, r18
    346e:	93 1f       	adc	r25, r19
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3474:	8f e4       	ldi	r24, 0x4F	; 79
    3476:	93 ec       	ldi	r25, 0xC3	; 195
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <CalibrateAcc+0x7c>
    347c:	00 c0       	rjmp	.+0      	; 0x347e <CalibrateAcc+0x82>
    347e:	00 00       	nop
    3480:	11 50       	subi	r17, 0x01	; 1
		// Just do P2 if orientations the same.
		// Will not save new calibration when different and not firmly in P1 or p2.
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
    3482:	c1 f6       	brne	.-80     	; 0x3434 <CalibrateAcc+0x38>
    3484:	fe 01       	movw	r30, r28
    3486:	31 96       	adiw	r30, 0x01	; 1
    3488:	9e 01       	movw	r18, r28
    348a:	29 5f       	subi	r18, 0xF9	; 249
    348c:	3f 4f       	sbci	r19, 0xFF	; 255
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
			{
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
    348e:	80 81       	ld	r24, Z
    3490:	91 81       	ldd	r25, Z+1	; 0x01
    3492:	40 96       	adiw	r24, 0x10	; 16
    3494:	65 e0       	ldi	r22, 0x05	; 5
    3496:	95 95       	asr	r25
    3498:	87 95       	ror	r24
    349a:	6a 95       	dec	r22
    349c:	e1 f7       	brne	.-8      	; 0x3496 <CalibrateAcc+0x9a>
    349e:	81 93       	st	Z+, r24
    34a0:	91 93       	st	Z+, r25
				accZero[YAW] += accADC_P2[YAW];
				_delay_ms(10);						// Get a better acc average over time
			}
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    34a2:	e2 17       	cp	r30, r18
    34a4:	f3 07       	cpc	r31, r19
    34a6:	99 f7       	brne	.-26     	; 0x348e <CalibrateAcc+0x92>
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
			}

			// Reset zeros to normal cal
			Config.AccZero_P2[ROLL] = accZero[ROLL];
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	9a 81       	ldd	r25, Y+2	; 0x02
    34ac:	90 93 52 08 	sts	0x0852, r25
    34b0:	80 93 51 08 	sts	0x0851, r24
			Config.AccZero_P2[PITCH] = accZero[PITCH];
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	9c 81       	ldd	r25, Y+4	; 0x04
    34b8:	90 93 54 08 	sts	0x0854, r25
    34bc:	80 93 53 08 	sts	0x0853, r24
			Config.AccZeroNormZ_P2 = accZero[YAW];
			
			// Correct polarity of AccZeroNormZ as per orientation
			Config.AccZeroNormZ_P2 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]);
    34c0:	e0 91 d8 06 	lds	r30, 0x06D8
    34c4:	0e 2e       	mov	r0, r30
    34c6:	00 0c       	add	r0, r0
    34c8:	ff 0b       	sbc	r31, r31
    34ca:	cf 01       	movw	r24, r30
    34cc:	88 0f       	add	r24, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	e8 0f       	add	r30, r24
    34d2:	f9 1f       	adc	r31, r25
    34d4:	e0 5b       	subi	r30, 0xB0	; 176
    34d6:	fe 4f       	sbci	r31, 0xFE	; 254
    34d8:	24 91       	lpm	r18, Z
    34da:	4d 81       	ldd	r20, Y+5	; 0x05
    34dc:	5e 81       	ldd	r21, Y+6	; 0x06
    34de:	24 03       	mulsu	r18, r20
    34e0:	c0 01       	movw	r24, r0
    34e2:	25 9f       	mul	r18, r21
    34e4:	90 0d       	add	r25, r0
    34e6:	11 24       	eor	r1, r1
    34e8:	90 93 58 08 	sts	0x0858, r25
    34ec:	80 93 57 08 	sts	0x0857, r24
			
			// Flag that normal cal done
			Config.Main_flags |= (1 << normal_cal_done_P2);
    34f0:	80 91 39 08 	lds	r24, 0x0839
    34f4:	88 60       	ori	r24, 0x08	; 8
    34f6:	66 c0       	rjmp	.+204    	; 0x35c4 <CalibrateAcc+0x1c8>
			LED1 = 1;
			_delay_ms(500);
			LED1 = 0;
		}
		// P1
		else if (transition <= 5)
    34f8:	26 30       	cpi	r18, 0x06	; 6
    34fa:	31 05       	cpc	r19, r1
    34fc:	0c f0       	brlt	.+2      	; 0x3500 <CalibrateAcc+0x104>
    34fe:	47 c1       	rjmp	.+654    	; 0x378e <CalibrateAcc+0x392>
    3500:	10 e2       	ldi	r17, 0x20	; 32
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
			{
				get_raw_accs();						// Updates accADC_P1[] and accADC_P2[] (RPY)
    3502:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <get_raw_accs>
				accZero[ROLL] += accADC_P1[ROLL];
    3506:	29 81       	ldd	r18, Y+1	; 0x01
    3508:	3a 81       	ldd	r19, Y+2	; 0x02
    350a:	80 91 6a 05 	lds	r24, 0x056A
    350e:	90 91 6b 05 	lds	r25, 0x056B
    3512:	82 0f       	add	r24, r18
    3514:	93 1f       	adc	r25, r19
    3516:	9a 83       	std	Y+2, r25	; 0x02
    3518:	89 83       	std	Y+1, r24	; 0x01
				accZero[PITCH] += accADC_P1[PITCH];
    351a:	2b 81       	ldd	r18, Y+3	; 0x03
    351c:	3c 81       	ldd	r19, Y+4	; 0x04
    351e:	80 91 6c 05 	lds	r24, 0x056C
    3522:	90 91 6d 05 	lds	r25, 0x056D
    3526:	82 0f       	add	r24, r18
    3528:	93 1f       	adc	r25, r19
    352a:	9c 83       	std	Y+4, r25	; 0x04
    352c:	8b 83       	std	Y+3, r24	; 0x03
				accZero[YAW] += accADC_P1[YAW];
    352e:	2d 81       	ldd	r18, Y+5	; 0x05
    3530:	3e 81       	ldd	r19, Y+6	; 0x06
    3532:	80 91 6e 05 	lds	r24, 0x056E
    3536:	90 91 6f 05 	lds	r25, 0x056F
    353a:	82 0f       	add	r24, r18
    353c:	93 1f       	adc	r25, r19
    353e:	9e 83       	std	Y+6, r25	; 0x06
    3540:	8d 83       	std	Y+5, r24	; 0x05
    3542:	8f e4       	ldi	r24, 0x4F	; 79
    3544:	93 ec       	ldi	r25, 0xC3	; 195
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <CalibrateAcc+0x14a>
    354a:	00 c0       	rjmp	.+0      	; 0x354c <CalibrateAcc+0x150>
    354c:	00 00       	nop
    354e:	11 50       	subi	r17, 0x01	; 1
		}
		// P1
		else if (transition <= 5)
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
    3550:	c1 f6       	brne	.-80     	; 0x3502 <CalibrateAcc+0x106>
    3552:	fe 01       	movw	r30, r28
    3554:	31 96       	adiw	r30, 0x01	; 1
    3556:	9e 01       	movw	r18, r28
    3558:	29 5f       	subi	r18, 0xF9	; 249
    355a:	3f 4f       	sbci	r19, 0xFF	; 255
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
			{
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
    355c:	80 81       	ld	r24, Z
    355e:	91 81       	ldd	r25, Z+1	; 0x01
    3560:	40 96       	adiw	r24, 0x10	; 16
    3562:	45 e0       	ldi	r20, 0x05	; 5
    3564:	95 95       	asr	r25
    3566:	87 95       	ror	r24
    3568:	4a 95       	dec	r20
    356a:	e1 f7       	brne	.-8      	; 0x3564 <CalibrateAcc+0x168>
    356c:	81 93       	st	Z+, r24
    356e:	91 93       	st	Z+, r25
				accZero[YAW] += accADC_P1[YAW];
				_delay_ms(10);						// Get a better acc average over time
			}
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    3570:	e2 17       	cp	r30, r18
    3572:	f3 07       	cpc	r31, r19
    3574:	99 f7       	brne	.-26     	; 0x355c <CalibrateAcc+0x160>
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
			}

			// Reset zeros to normal cal
			Config.AccZero_P1[ROLL] = accZero[ROLL];
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	9a 81       	ldd	r25, Y+2	; 0x02
    357a:	90 93 1d 08 	sts	0x081D, r25
    357e:	80 93 1c 08 	sts	0x081C, r24
			Config.AccZero_P1[PITCH] = accZero[PITCH];
    3582:	8b 81       	ldd	r24, Y+3	; 0x03
    3584:	9c 81       	ldd	r25, Y+4	; 0x04
    3586:	90 93 1f 08 	sts	0x081F, r25
    358a:	80 93 1e 08 	sts	0x081E, r24
			Config.AccZeroNormZ_P1 = accZero[YAW];
			
			// Correct polarity of AccZeroNormZ as per orientation
			Config.AccZeroNormZ_P1 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]);
    358e:	e0 91 63 08 	lds	r30, 0x0863
    3592:	0e 2e       	mov	r0, r30
    3594:	00 0c       	add	r0, r0
    3596:	ff 0b       	sbc	r31, r31
    3598:	cf 01       	movw	r24, r30
    359a:	88 0f       	add	r24, r24
    359c:	99 1f       	adc	r25, r25
    359e:	e8 0f       	add	r30, r24
    35a0:	f9 1f       	adc	r31, r25
    35a2:	e0 5b       	subi	r30, 0xB0	; 176
    35a4:	fe 4f       	sbci	r31, 0xFE	; 254
    35a6:	24 91       	lpm	r18, Z
    35a8:	4d 81       	ldd	r20, Y+5	; 0x05
    35aa:	5e 81       	ldd	r21, Y+6	; 0x06
    35ac:	24 03       	mulsu	r18, r20
    35ae:	c0 01       	movw	r24, r0
    35b0:	25 9f       	mul	r18, r21
    35b2:	90 0d       	add	r25, r0
    35b4:	11 24       	eor	r1, r1
    35b6:	90 93 23 08 	sts	0x0823, r25
    35ba:	80 93 22 08 	sts	0x0822, r24
			
			// Flag that normal cal done
			Config.Main_flags |= (1 << normal_cal_done_P1);
    35be:	80 91 39 08 	lds	r24, 0x0839
    35c2:	82 60       	ori	r24, 0x02	; 2
    35c4:	80 93 39 08 	sts	0x0839, r24

			// Save new calibration and flash LED for confirmation
			Save_Config_to_EEPROM();
    35c8:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
			LED1 = 1;
    35cc:	2b 9a       	sbi	0x05, 3	; 5
    35ce:	9f e7       	ldi	r25, 0x7F	; 127
    35d0:	24 e8       	ldi	r18, 0x84	; 132
    35d2:	8e e1       	ldi	r24, 0x1E	; 30
    35d4:	91 50       	subi	r25, 0x01	; 1
    35d6:	20 40       	sbci	r18, 0x00	; 0
    35d8:	80 40       	sbci	r24, 0x00	; 0
    35da:	e1 f7       	brne	.-8      	; 0x35d4 <CalibrateAcc+0x1d8>
    35dc:	00 c0       	rjmp	.+0      	; 0x35de <CalibrateAcc+0x1e2>
    35de:	00 00       	nop
			_delay_ms(500);
			LED1 = 0;
    35e0:	2b 98       	cbi	0x05, 3	; 5
    35e2:	d5 c0       	rjmp	.+426    	; 0x378e <CalibrateAcc+0x392>
    35e4:	80 91 39 08 	lds	r24, 0x0839

	else
	// Calibrate inverted acc
	{
		// P2 or same
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    35e8:	20 36       	cpi	r18, 0x60	; 96
    35ea:	31 05       	cpc	r19, r1
    35ec:	24 f4       	brge	.+8      	; 0x35f6 <CalibrateAcc+0x1fa>
    35ee:	90 91 d9 06 	lds	r25, 0x06D9
    35f2:	91 11       	cpse	r25, r1
    35f4:	59 c0       	rjmp	.+178    	; 0x36a8 <CalibrateAcc+0x2ac>
		{
			// Only update the inverted cal value if preceded by a normal calibration
			if (Config.Main_flags & (1 << normal_cal_done_P2))
    35f6:	83 ff       	sbrs	r24, 3
    35f8:	ca c0       	rjmp	.+404    	; 0x378e <CalibrateAcc+0x392>
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P2 = 0;
    35fa:	10 92 5a 08 	sts	0x085A, r1
    35fe:	10 92 59 08 	sts	0x0859, r1
    3602:	10 e2       	ldi	r17, 0x20	; 32

				for (i = 0; i < 32; i++)
				{
					get_raw_accs();					// Updates accADC_P1[] and accADC_P2[] (RPY)
    3604:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <get_raw_accs>
					Config.AccZeroInvZ_P2 += accADC_P2[YAW];
    3608:	20 91 59 08 	lds	r18, 0x0859
    360c:	30 91 5a 08 	lds	r19, 0x085A
    3610:	80 91 7a 05 	lds	r24, 0x057A
    3614:	90 91 7b 05 	lds	r25, 0x057B
    3618:	82 0f       	add	r24, r18
    361a:	93 1f       	adc	r25, r19
    361c:	90 93 5a 08 	sts	0x085A, r25
    3620:	80 93 59 08 	sts	0x0859, r24
    3624:	8f e4       	ldi	r24, 0x4F	; 79
    3626:	93 ec       	ldi	r25, 0xC3	; 195
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	f1 f7       	brne	.-4      	; 0x3628 <CalibrateAcc+0x22c>
    362c:	00 c0       	rjmp	.+0      	; 0x362e <CalibrateAcc+0x232>
    362e:	00 00       	nop
    3630:	11 50       	subi	r17, 0x01	; 1
			if (Config.Main_flags & (1 << normal_cal_done_P2))
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P2 = 0;

				for (i = 0; i < 32; i++)
    3632:	41 f7       	brne	.-48     	; 0x3604 <CalibrateAcc+0x208>

				// Round and divide by 32
				Config.AccZeroInvZ_P2 = ((Config.AccZeroInvZ_P2 + 16) >> 5);		// Inverted zero point
				
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P2 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]);
    3634:	e0 91 d8 06 	lds	r30, 0x06D8
    3638:	0e 2e       	mov	r0, r30
    363a:	00 0c       	add	r0, r0
    363c:	ff 0b       	sbc	r31, r31
    363e:	cf 01       	movw	r24, r30
    3640:	88 0f       	add	r24, r24
    3642:	99 1f       	adc	r25, r25
    3644:	e8 0f       	add	r30, r24
    3646:	f9 1f       	adc	r31, r25
    3648:	e0 5b       	subi	r30, 0xB0	; 176
    364a:	fe 4f       	sbci	r31, 0xFE	; 254
    364c:	24 91       	lpm	r18, Z
					Config.AccZeroInvZ_P2 += accADC_P2[YAW];
					_delay_ms(10);					// Get a better acc average over time
				}

				// Round and divide by 32
				Config.AccZeroInvZ_P2 = ((Config.AccZeroInvZ_P2 + 16) >> 5);		// Inverted zero point
    364e:	40 91 59 08 	lds	r20, 0x0859
    3652:	50 91 5a 08 	lds	r21, 0x085A
    3656:	40 5f       	subi	r20, 0xF0	; 240
    3658:	5f 4f       	sbci	r21, 0xFF	; 255
    365a:	b5 e0       	ldi	r27, 0x05	; 5
    365c:	55 95       	asr	r21
    365e:	47 95       	ror	r20
    3660:	ba 95       	dec	r27
    3662:	e1 f7       	brne	.-8      	; 0x365c <CalibrateAcc+0x260>
				
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P2 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]);
    3664:	24 03       	mulsu	r18, r20
    3666:	b0 01       	movw	r22, r0
    3668:	25 9f       	mul	r18, r21
    366a:	70 0d       	add	r23, r0
    366c:	11 24       	eor	r1, r1
    366e:	70 93 5a 08 	sts	0x085A, r23
    3672:	60 93 59 08 	sts	0x0859, r22

				// Test if board is actually inverted relative to board orientation.
				if (Config.AccZeroInvZ_P2 < 0)
    3676:	77 ff       	sbrs	r23, 7
    3678:	8a c0       	rjmp	.+276    	; 0x378e <CalibrateAcc+0x392>
				{
					// Reset zero to halfway between min and max Z
					Config.AccZeroDiff_P2 = ((Config.AccZeroNormZ_P2 - Config.AccZeroInvZ_P2) >> 1);
    367a:	80 91 57 08 	lds	r24, 0x0857
    367e:	90 91 58 08 	lds	r25, 0x0858
    3682:	9c 01       	movw	r18, r24
    3684:	26 1b       	sub	r18, r22
    3686:	37 0b       	sbc	r19, r23
    3688:	35 95       	asr	r19
    368a:	27 95       	ror	r18
    368c:	30 93 5c 08 	sts	0x085C, r19
    3690:	20 93 5b 08 	sts	0x085B, r18
					
					 // Config.AccZero_P2[YAW] is now half-way in between
					Config.AccZero_P2[YAW] = Config.AccZeroNormZ_P2 - Config.AccZeroDiff_P2;
    3694:	82 1b       	sub	r24, r18
    3696:	93 0b       	sbc	r25, r19
    3698:	90 93 56 08 	sts	0x0856, r25
    369c:	80 93 55 08 	sts	0x0855, r24

					// Flag that inverted cal done
					Config.Main_flags |= (1 << inv_cal_done_P2);
    36a0:	80 91 39 08 	lds	r24, 0x0839
    36a4:	84 60       	ori	r24, 0x04	; 4
    36a6:	58 c0       	rjmp	.+176    	; 0x3758 <CalibrateAcc+0x35c>
		
		// P1
		else 
		{
			// Only update the inverted cal value if preceded by a normal calibration
			if (Config.Main_flags & (1 << normal_cal_done_P1))
    36a8:	81 ff       	sbrs	r24, 1
    36aa:	71 c0       	rjmp	.+226    	; 0x378e <CalibrateAcc+0x392>
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P1 = 0;
    36ac:	10 92 25 08 	sts	0x0825, r1
    36b0:	10 92 24 08 	sts	0x0824, r1
    36b4:	10 e2       	ldi	r17, 0x20	; 32

				for (i = 0; i < 32; i++)
				{
					get_raw_accs();					// Updates accADC_P1[] and accADC_P2[] (RPY)
    36b6:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <get_raw_accs>
					Config.AccZeroInvZ_P1 += accADC_P1[YAW];
    36ba:	20 91 24 08 	lds	r18, 0x0824
    36be:	30 91 25 08 	lds	r19, 0x0825
    36c2:	80 91 6e 05 	lds	r24, 0x056E
    36c6:	90 91 6f 05 	lds	r25, 0x056F
    36ca:	82 0f       	add	r24, r18
    36cc:	93 1f       	adc	r25, r19
    36ce:	90 93 25 08 	sts	0x0825, r25
    36d2:	80 93 24 08 	sts	0x0824, r24
    36d6:	8f e4       	ldi	r24, 0x4F	; 79
    36d8:	93 ec       	ldi	r25, 0xC3	; 195
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <CalibrateAcc+0x2de>
    36de:	00 c0       	rjmp	.+0      	; 0x36e0 <CalibrateAcc+0x2e4>
    36e0:	00 00       	nop
    36e2:	11 50       	subi	r17, 0x01	; 1
			if (Config.Main_flags & (1 << normal_cal_done_P1))
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P1 = 0;

				for (i = 0; i < 32; i++)
    36e4:	41 f7       	brne	.-48     	; 0x36b6 <CalibrateAcc+0x2ba>

				// Round and divide by 32
				Config.AccZeroInvZ_P1 = ((Config.AccZeroInvZ_P1 + 16) >> 5);		// Inverted zero point
			
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P1 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]);
    36e6:	e0 91 63 08 	lds	r30, 0x0863
    36ea:	0e 2e       	mov	r0, r30
    36ec:	00 0c       	add	r0, r0
    36ee:	ff 0b       	sbc	r31, r31
    36f0:	cf 01       	movw	r24, r30
    36f2:	88 0f       	add	r24, r24
    36f4:	99 1f       	adc	r25, r25
    36f6:	e8 0f       	add	r30, r24
    36f8:	f9 1f       	adc	r31, r25
    36fa:	e0 5b       	subi	r30, 0xB0	; 176
    36fc:	fe 4f       	sbci	r31, 0xFE	; 254
    36fe:	24 91       	lpm	r18, Z
					Config.AccZeroInvZ_P1 += accADC_P1[YAW];
					_delay_ms(10);					// Get a better acc average over time
				}

				// Round and divide by 32
				Config.AccZeroInvZ_P1 = ((Config.AccZeroInvZ_P1 + 16) >> 5);		// Inverted zero point
    3700:	40 91 24 08 	lds	r20, 0x0824
    3704:	50 91 25 08 	lds	r21, 0x0825
    3708:	40 5f       	subi	r20, 0xF0	; 240
    370a:	5f 4f       	sbci	r21, 0xFF	; 255
    370c:	65 e0       	ldi	r22, 0x05	; 5
    370e:	55 95       	asr	r21
    3710:	47 95       	ror	r20
    3712:	6a 95       	dec	r22
    3714:	e1 f7       	brne	.-8      	; 0x370e <CalibrateAcc+0x312>
			
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P1 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]);
    3716:	24 03       	mulsu	r18, r20
    3718:	b0 01       	movw	r22, r0
    371a:	25 9f       	mul	r18, r21
    371c:	70 0d       	add	r23, r0
    371e:	11 24       	eor	r1, r1
    3720:	70 93 25 08 	sts	0x0825, r23
    3724:	60 93 24 08 	sts	0x0824, r22

				// Test if board is actually inverted relative to board orientation.
				if (Config.AccZeroInvZ_P1 < 0)
    3728:	77 ff       	sbrs	r23, 7
    372a:	31 c0       	rjmp	.+98     	; 0x378e <CalibrateAcc+0x392>
				{
					// Reset zero to halfway between min and max Z
					Config.AccZeroDiff_P1 = ((Config.AccZeroNormZ_P1 - Config.AccZeroInvZ_P1) >> 1);
    372c:	80 91 22 08 	lds	r24, 0x0822
    3730:	90 91 23 08 	lds	r25, 0x0823
    3734:	9c 01       	movw	r18, r24
    3736:	26 1b       	sub	r18, r22
    3738:	37 0b       	sbc	r19, r23
    373a:	35 95       	asr	r19
    373c:	27 95       	ror	r18
    373e:	30 93 27 08 	sts	0x0827, r19
    3742:	20 93 26 08 	sts	0x0826, r18
					
					// Config.AccZero_P1[YAW] is now half-way in between
					Config.AccZero_P1[YAW] = Config.AccZeroNormZ_P1 - Config.AccZeroDiff_P1;
    3746:	82 1b       	sub	r24, r18
    3748:	93 0b       	sbc	r25, r19
    374a:	90 93 21 08 	sts	0x0821, r25
    374e:	80 93 20 08 	sts	0x0820, r24

					// Flag that inverted cal done
					Config.Main_flags |= (1 << inv_cal_done_P1);
    3752:	80 91 39 08 	lds	r24, 0x0839
    3756:	81 60       	ori	r24, 0x01	; 1
    3758:	80 93 39 08 	sts	0x0839, r24

					// Save new calibration and flash LED for confirmation
					Save_Config_to_EEPROM();
    375c:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
					LED1 = 1;
    3760:	2b 9a       	sbi	0x05, 3	; 5
    3762:	9f e7       	ldi	r25, 0x7F	; 127
    3764:	24 e8       	ldi	r18, 0x84	; 132
    3766:	8e e1       	ldi	r24, 0x1E	; 30
    3768:	91 50       	subi	r25, 0x01	; 1
    376a:	20 40       	sbci	r18, 0x00	; 0
    376c:	80 40       	sbci	r24, 0x00	; 0
    376e:	e1 f7       	brne	.-8      	; 0x3768 <CalibrateAcc+0x36c>
    3770:	00 c0       	rjmp	.+0      	; 0x3772 <CalibrateAcc+0x376>
    3772:	00 00       	nop
					_delay_ms(500);
					LED1 = 0;
    3774:	2b 98       	cbi	0x05, 3	; 5
				
					// Chirp as well. The LED might be hard to see.
					menu_beep(5);
    3776:	85 e0       	ldi	r24, 0x05	; 5
				}
			}			
		}

	} // Calibrate inverted acc
}
    3778:	26 96       	adiw	r28, 0x06	; 6
    377a:	0f b6       	in	r0, 0x3f	; 63
    377c:	f8 94       	cli
    377e:	de bf       	out	0x3e, r29	; 62
    3780:	0f be       	out	0x3f, r0	; 63
    3782:	cd bf       	out	0x3d, r28	; 61
    3784:	df 91       	pop	r29
    3786:	cf 91       	pop	r28
    3788:	1f 91       	pop	r17
					LED1 = 1;
					_delay_ms(500);
					LED1 = 0;
				
					// Chirp as well. The LED might be hard to see.
					menu_beep(5);
    378a:	0c 94 d1 50 	jmp	0xa1a2	; 0xa1a2 <menu_beep>
				}
			}			
		}

	} // Calibrate inverted acc
}
    378e:	26 96       	adiw	r28, 0x06	; 6
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	1f 91       	pop	r17
    37a0:	08 95       	ret

000037a2 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	6b e6       	ldi	r22, 0x6B	; 107
    37a6:	80 ed       	ldi	r24, 0xD0	; 208
    37a8:	0e 94 02 3c 	call	0x7804	; 0x7804 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    37ac:	48 e0       	ldi	r20, 0x08	; 8
    37ae:	6c e1       	ldi	r22, 0x1C	; 28
    37b0:	80 ed       	ldi	r24, 0xD0	; 208
    37b2:	0c 94 02 3c 	jmp	0x7804	; 0x7804 <writeI2Cbyte>

000037b6 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    37b6:	8f ef       	ldi	r24, 0xFF	; 255
    37b8:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    37bc:	10 92 7b 00 	sts	0x007B, r1
    37c0:	08 95       	ret

000037c2 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    37c2:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    37c6:	86 ec       	ldi	r24, 0xC6	; 198
    37c8:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    37cc:	80 91 7a 00 	lds	r24, 0x007A
    37d0:	86 fd       	sbrc	r24, 6
    37d2:	fc cf       	rjmp	.-8      	; 0x37cc <read_adc+0xa>
}
    37d4:	08 95       	ret

000037d6 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    37d6:	cf 92       	push	r12
    37d8:	df 92       	push	r13
    37da:	ef 92       	push	r14
    37dc:	0f 93       	push	r16
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    37e2:	cb e0       	ldi	r28, 0x0B	; 11
    37e4:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    37e6:	1f 9b       	sbis	0x03, 7	; 3
    37e8:	82 c0       	rjmp	.+260    	; 0x38ee <Display_balance+0x118>
	{
		RxGetChannels();						// Check state of transition switch
    37ea:	0e 94 90 69 	call	0xd320	; 0xd320 <RxGetChannels>
		UpdateTransition();						// Update the transition variable
    37ee:	0e 94 80 6a 	call	0xd500	; 0xd500 <UpdateTransition>

		// Read accs
		ReadAcc();
    37f2:	0e 94 2d 18 	call	0x305a	; 0x305a <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    37f6:	60 e0       	ldi	r22, 0x00	; 0
    37f8:	70 e0       	ldi	r23, 0x00	; 0
    37fa:	cb 01       	movw	r24, r22
    37fc:	0e 94 79 3e 	call	0x7cf2	; 0x7cf2 <imu_update>
    3800:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    3802:	89 f7       	brne	.-30     	; 0x37e6 <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 e0       	ldi	r20, 0x00	; 0
    380a:	52 e4       	ldi	r21, 0x42	; 66
    380c:	60 91 25 06 	lds	r22, 0x0625
    3810:	70 91 26 06 	lds	r23, 0x0626
    3814:	80 91 27 06 	lds	r24, 0x0627
    3818:	90 91 28 06 	lds	r25, 0x0628
    381c:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    3820:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    3824:	6b 01       	movw	r12, r22
			y_pos = accSmooth[ROLL] + 64;
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	40 e8       	ldi	r20, 0x80	; 128
    382c:	52 e4       	ldi	r21, 0x42	; 66
    382e:	60 91 21 06 	lds	r22, 0x0621
    3832:	70 91 22 06 	lds	r23, 0x0622
    3836:	80 91 23 06 	lds	r24, 0x0623
    383a:	90 91 24 06 	lds	r25, 0x0624
    383e:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    3842:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    3846:	eb 01       	movw	r28, r22

			if (x_pos < 0) x_pos = 0;
    3848:	d7 fc       	sbrc	r13, 7
    384a:	08 c0       	rjmp	.+16     	; 0x385c <Display_balance+0x86>
			if (x_pos > 64) x_pos = 64;
    384c:	81 e4       	ldi	r24, 0x41	; 65
    384e:	c8 16       	cp	r12, r24
    3850:	d1 04       	cpc	r13, r1
    3852:	34 f0       	brlt	.+12     	; 0x3860 <Display_balance+0x8a>
    3854:	80 e4       	ldi	r24, 0x40	; 64
    3856:	c8 2e       	mov	r12, r24
    3858:	d1 2c       	mov	r13, r1
    385a:	02 c0       	rjmp	.+4      	; 0x3860 <Display_balance+0x8a>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    385c:	c1 2c       	mov	r12, r1
    385e:	d1 2c       	mov	r13, r1
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    3860:	d7 fd       	sbrc	r29, 7
    3862:	06 c0       	rjmp	.+12     	; 0x3870 <Display_balance+0x9a>
			if (y_pos > 128) y_pos = 128;
    3864:	c1 38       	cpi	r28, 0x81	; 129
    3866:	d1 05       	cpc	r29, r1
    3868:	2c f0       	brlt	.+10     	; 0x3874 <Display_balance+0x9e>
    386a:	c0 e8       	ldi	r28, 0x80	; 128
    386c:	d0 e0       	ldi	r29, 0x00	; 0
    386e:	02 c0       	rjmp	.+4      	; 0x3874 <Display_balance+0x9e>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    3870:	c0 e0       	ldi	r28, 0x00	; 0
    3872:	d0 e0       	ldi	r29, 0x00	; 0
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    3874:	27 e3       	ldi	r18, 0x37	; 55
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	42 e0       	ldi	r20, 0x02	; 2
    387a:	50 e0       	ldi	r21, 0x00	; 0
    387c:	6f ef       	ldi	r22, 0xFF	; 255
    387e:	71 e0       	ldi	r23, 0x01	; 1
    3880:	8c e0       	ldi	r24, 0x0C	; 12
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    3888:	ee 24       	eor	r14, r14
    388a:	e3 94       	inc	r14
    388c:	00 e4       	ldi	r16, 0x40	; 64
    388e:	20 e8       	ldi	r18, 0x80	; 128
    3890:	40 e0       	ldi	r20, 0x00	; 0
    3892:	60 e0       	ldi	r22, 0x00	; 0
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	91 e0       	ldi	r25, 0x01	; 1
    3898:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    389c:	05 e1       	ldi	r16, 0x15	; 21
    389e:	25 e1       	ldi	r18, 0x15	; 21
    38a0:	46 e1       	ldi	r20, 0x16	; 22
    38a2:	66 e3       	ldi	r22, 0x36	; 54
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	91 e0       	ldi	r25, 0x01	; 1
    38a8:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    38ac:	08 e3       	ldi	r16, 0x38	; 56
    38ae:	20 e4       	ldi	r18, 0x40	; 64
    38b0:	48 e0       	ldi	r20, 0x08	; 8
    38b2:	60 e4       	ldi	r22, 0x40	; 64
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	91 e0       	ldi	r25, 0x01	; 1
    38b8:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    38bc:	00 e2       	ldi	r16, 0x20	; 32
    38be:	20 e6       	ldi	r18, 0x60	; 96
    38c0:	40 e2       	ldi	r20, 0x20	; 32
    38c2:	60 e2       	ldi	r22, 0x20	; 32
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	91 e0       	ldi	r25, 0x01	; 1
    38c8:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    38cc:	01 e0       	ldi	r16, 0x01	; 1
    38ce:	28 e0       	ldi	r18, 0x08	; 8
    38d0:	4c 2d       	mov	r20, r12
    38d2:	6c 2f       	mov	r22, r28
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	91 e0       	ldi	r25, 0x01	; 1
    38d8:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	91 e0       	ldi	r25, 0x01	; 1
    38e0:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
			clear_buffer(buffer);
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	91 e0       	ldi	r25, 0x01	; 1
    38e8:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    38ec:	7a cf       	rjmp	.-268    	; 0x37e2 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	0f 91       	pop	r16
    38f4:	ef 90       	pop	r14
    38f6:	df 90       	pop	r13
    38f8:	cf 90       	pop	r12
    38fa:	08 95       	ret

000038fc <Display_in_out>:
//************************************************************
// Code
//************************************************************

void Display_in_out(void)
{
    38fc:	2f 92       	push	r2
    38fe:	3f 92       	push	r3
    3900:	4f 92       	push	r4
    3902:	5f 92       	push	r5
    3904:	6f 92       	push	r6
    3906:	7f 92       	push	r7
    3908:	8f 92       	push	r8
    390a:	9f 92       	push	r9
    390c:	af 92       	push	r10
    390e:	bf 92       	push	r11
    3910:	cf 92       	push	r12
    3912:	df 92       	push	r13
    3914:	ef 92       	push	r14
    3916:	ff 92       	push	r15
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	cd b7       	in	r28, 0x3d	; 61
    3922:	de b7       	in	r29, 0x3e	; 62
    3924:	a5 97       	sbiw	r28, 0x25	; 37
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
	uint16_t ticker_16 = 0;
	uint32_t interval = 0;			// IMU interval	
	float	tempf1 = 0.0;
	
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
    3930:	0e 94 93 48 	call	0x9126	; 0x9126 <init_int>
				temp = ((temp - 3750) >> 1) + SERVO_CENTER; // SERVO_CENTER = 1500
			}
			else
			{
				// Scale motor from 2500~5000 to 1000~2000
				temp = ((temp << 2) + 5) / 10; 	// Round and convert
    3934:	0a e0       	ldi	r16, 0x0A	; 10
    3936:	20 2e       	mov	r2, r16
    3938:	31 2c       	mov	r3, r1
			{
				// Check for motor marker
				if (Config.Channel[i].Motor_marker == MOTOR)
				{
					// Set output to minimum pulse width (1000us)
					ServoOut[i] = MOTORMIN;
    393a:	88 ee       	ldi	r24, 0xE8	; 232
    393c:	48 2e       	mov	r4, r24
    393e:	83 e0       	ldi	r24, 0x03	; 3
    3940:	58 2e       	mov	r5, r24
			{
				Outputs[i] = (Outputs[i] + 2) / 5; // Convert to percentages +/-500 = +/-100%
			}
			else
			{
				Outputs[i] = (Outputs[i] - 2) / 5; 
    3942:	95 e0       	ldi	r25, 0x05	; 5
    3944:	a9 2e       	mov	r10, r25
    3946:	b1 2c       	mov	r11, r1
		LCD_Display_Text(480,(const unsigned char*)Verdana8,0,23);
		LCD_Display_Text(481,(const unsigned char*)Verdana8,0,33);
		LCD_Display_Text(482,(const unsigned char*)Verdana8,0,43);
		LCD_Display_Text(483,(const unsigned char*)Verdana8,0,53);
		
		mugui_lcd_puts(itoa((MonopolarThrottle / 20),pBuffer,10),(const unsigned char*)Verdana8,25,3);
    3948:	24 e1       	ldi	r18, 0x14	; 20
    394a:	62 2e       	mov	r6, r18
    394c:	71 2c       	mov	r7, r1
		// Display the transition number as 1.00 to 2.00
		uint8_t x_loc = 104;		// X location of transition display
		uint8_t y_loc = 53;		// Y location of transition display

		utemp = transition + 100;
		temp = utemp/100;		// Display whole decimal part first
    394e:	34 e6       	ldi	r19, 0x64	; 100
    3950:	83 2e       	mov	r8, r19
    3952:	91 2c       	mov	r9, r1
	
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
	
	// While back button not pressed
	while(BUTTON1 != 0)
    3954:	1f 9b       	sbis	0x03, 7	; 3
    3956:	2e c3       	rjmp	.+1628   	; 0x3fb4 <Display_in_out+0x6b8>
	{
		RxGetChannels();
    3958:	0e 94 90 69 	call	0xd320	; 0xd320 <RxGetChannels>
		ReadGyros();
    395c:	0e 94 8b 39 	call	0x7316	; 0x7316 <ReadGyros>
		ReadAcc();
    3960:	0e 94 2d 18 	call	0x305a	; 0x305a <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3964:	0e 94 27 44 	call	0x884e	; 0x884e <TIM16_ReadTCNT1>

		// Reset Timer0 count
		TCNT0 = 0;
    3968:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    396a:	20 91 2f 05 	lds	r18, 0x052F
    396e:	30 91 30 05 	lds	r19, 0x0530
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    3972:	20 91 2f 05 	lds	r18, 0x052F
    3976:	30 91 30 05 	lds	r19, 0x0530
    397a:	6c 01       	movw	r12, r24
    397c:	c2 1a       	sub	r12, r18
    397e:	d3 0a       	sbc	r13, r19
		}
		
		interval = ticker_16; // uint16_t
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    3980:	90 93 30 05 	sts	0x0530, r25
    3984:	80 93 2f 05 	sts	0x052F, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    3988:	80 91 01 09 	lds	r24, 0x0901
    398c:	90 91 02 09 	lds	r25, 0x0902
    3990:	e1 2c       	mov	r14, r1
    3992:	f1 2c       	mov	r15, r1
    3994:	02 97       	sbiw	r24, 0x02	; 2
    3996:	88 f0       	brcs	.+34     	; 0x39ba <Display_in_out+0xbe>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    3998:	80 91 01 09 	lds	r24, 0x0901
    399c:	90 91 02 09 	lds	r25, 0x0902
    39a0:	a0 e0       	ldi	r26, 0x00	; 0
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	1f e0       	ldi	r17, 0x0F	; 15
    39a6:	88 0f       	add	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	aa 1f       	adc	r26, r26
    39ac:	bb 1f       	adc	r27, r27
    39ae:	1a 95       	dec	r17
    39b0:	d1 f7       	brne	.-12     	; 0x39a6 <Display_in_out+0xaa>
    39b2:	c8 0e       	add	r12, r24
    39b4:	d9 1e       	adc	r13, r25
    39b6:	ea 1e       	adc	r14, r26
    39b8:	fb 1e       	adc	r15, r27
		}

		TMR0_counter = 0;
    39ba:	10 92 02 09 	sts	0x0902, r1
    39be:	10 92 01 09 	sts	0x0901, r1

		// Refresh accSmooth values and AccVert
		imu_update(interval);
    39c2:	c7 01       	movw	r24, r14
    39c4:	b6 01       	movw	r22, r12
    39c6:	0e 94 79 3e 	call	0x7cf2	; 0x7cf2 <imu_update>
		Sensor_PID(interval);
    39ca:	c7 01       	movw	r24, r14
    39cc:	b6 01       	movw	r22, r12
    39ce:	0e 94 46 63 	call	0xc68c	; 0xc68c <Sensor_PID>
		Calculate_PID();		// Calculate PID values
    39d2:	0e 94 b7 66 	call	0xcd6e	; 0xcd6e <Calculate_PID>

		UpdateTransition();		// Update the transition variable
    39d6:	0e 94 80 6a 	call	0xd500	; 0xd500 <UpdateTransition>
		ProcessMixer();			// Do all the mixer tasks
    39da:	0e 94 3a 5b 	call	0xb674	; 0xb674 <ProcessMixer>
		UpdateServos();			// Transfer Config.Channel[i].value data to ServoOut[i]
    39de:	0e 94 40 59 	call	0xb280	; 0xb280 <UpdateServos>
    39e2:	08 ee       	ldi	r16, 0xE8	; 232
    39e4:	16 e0       	ldi	r17, 0x06	; 6
    39e6:	78 01       	movw	r14, r16
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0

		// Re-span numbers from internal values (2500 to 5000) to microseconds
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			temp = ServoOut[i];					// Promote to 16 bits
    39ec:	f9 01       	movw	r30, r18
    39ee:	ee 0f       	add	r30, r30
    39f0:	ff 1f       	adc	r31, r31
    39f2:	df 01       	movw	r26, r30
    39f4:	ab 56       	subi	r26, 0x6B	; 107
    39f6:	b6 4f       	sbci	r27, 0xF6	; 246
    39f8:	8d 91       	ld	r24, X+
    39fa:	9c 91       	ld	r25, X

			// Check for motor marker and ignore if set
			if (Config.Channel[i].Motor_marker != MOTOR)
    39fc:	d7 01       	movw	r26, r14
    39fe:	4c 91       	ld	r20, X
    3a00:	42 30       	cpi	r20, 0x02	; 2
    3a02:	51 f0       	breq	.+20     	; 0x3a18 <Display_in_out+0x11c>
			{
				// Scale servo from 2500~5000 to 875~2125
				temp = ((temp - 3750) >> 1) + SERVO_CENTER; // SERVO_CENTER = 1500
    3a04:	bc 01       	movw	r22, r24
    3a06:	66 5a       	subi	r22, 0xA6	; 166
    3a08:	7e 40       	sbci	r23, 0x0E	; 14
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	95 95       	asr	r25
    3a0e:	87 95       	ror	r24
    3a10:	bc 01       	movw	r22, r24
    3a12:	64 52       	subi	r22, 0x24	; 36
    3a14:	7a 4f       	sbci	r23, 0xFA	; 250
    3a16:	08 c0       	rjmp	.+16     	; 0x3a28 <Display_in_out+0x12c>
			}
			else
			{
				// Scale motor from 2500~5000 to 1000~2000
				temp = ((temp << 2) + 5) / 10; 	// Round and convert
    3a18:	88 0f       	add	r24, r24
    3a1a:	99 1f       	adc	r25, r25
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	05 96       	adiw	r24, 0x05	; 5
    3a22:	b1 01       	movw	r22, r2
    3a24:	0e 94 73 6f 	call	0xdee6	; 0xdee6 <__divmodhi4>
			}
		
			ServoOut[i] = (uint16_t)temp;
    3a28:	eb 56       	subi	r30, 0x6B	; 107
    3a2a:	f6 4f       	sbci	r31, 0xF6	; 246
    3a2c:	71 83       	std	Z+1, r23	; 0x01
    3a2e:	60 83       	st	Z, r22
    3a30:	2f 5f       	subi	r18, 0xFF	; 255
    3a32:	3f 4f       	sbci	r19, 0xFF	; 255
    3a34:	b2 e2       	ldi	r27, 0x22	; 34
    3a36:	eb 0e       	add	r14, r27
    3a38:	f1 1c       	adc	r15, r1
		UpdateTransition();		// Update the transition variable
		ProcessMixer();			// Do all the mixer tasks
		UpdateServos();			// Transfer Config.Channel[i].value data to ServoOut[i]

		// Re-span numbers from internal values (2500 to 5000) to microseconds
		for (i = 0; i < MAX_OUTPUTS; i++)
    3a3a:	28 30       	cpi	r18, 0x08	; 8
    3a3c:	31 05       	cpc	r19, r1
    3a3e:	b1 f6       	brne	.-84     	; 0x39ec <Display_in_out+0xf0>
    3a40:	e9 e3       	ldi	r30, 0x39	; 57
    3a42:	f6 e0       	ldi	r31, 0x06	; 6
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
		}

		// Check limits in microsecond units.
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			temp = ServoOut[i];
    3a48:	a9 01       	movw	r20, r18
    3a4a:	44 0f       	add	r20, r20
    3a4c:	55 1f       	adc	r21, r21
    3a4e:	da 01       	movw	r26, r20
    3a50:	ab 56       	subi	r26, 0x6B	; 107
    3a52:	b6 4f       	sbci	r27, 0xF6	; 246
    3a54:	0d 90       	ld	r0, X+
    3a56:	bc 91       	ld	r27, X
    3a58:	a0 2d       	mov	r26, r0
			
			// Enforce min, max travel limits
			if (temp > Config.Limits[i].maximum)
    3a5a:	83 85       	ldd	r24, Z+11	; 0x0b
    3a5c:	94 85       	ldd	r25, Z+12	; 0x0c
    3a5e:	8a 17       	cp	r24, r26
    3a60:	9b 07       	cpc	r25, r27
    3a62:	3c f0       	brlt	.+14     	; 0x3a72 <Display_in_out+0x176>
			{
				temp = Config.Limits[i].maximum;
			}

			else if (temp < Config.Limits[i].minimum)
    3a64:	61 85       	ldd	r22, Z+9	; 0x09
    3a66:	72 85       	ldd	r23, Z+10	; 0x0a
    3a68:	cd 01       	movw	r24, r26
    3a6a:	a6 17       	cp	r26, r22
    3a6c:	b7 07       	cpc	r27, r23
    3a6e:	0c f4       	brge	.+2      	; 0x3a72 <Display_in_out+0x176>
    3a70:	cb 01       	movw	r24, r22
			{
				temp = Config.Limits[i].minimum;
			}
			
			ServoOut[i] = temp;
    3a72:	da 01       	movw	r26, r20
    3a74:	ab 56       	subi	r26, 0x6B	; 107
    3a76:	b6 4f       	sbci	r27, 0xF6	; 246
    3a78:	11 96       	adiw	r26, 0x01	; 1
    3a7a:	9c 93       	st	X, r25
    3a7c:	8e 93       	st	-X, r24
    3a7e:	2f 5f       	subi	r18, 0xFF	; 255
    3a80:	3f 4f       	sbci	r19, 0xFF	; 255
    3a82:	34 96       	adiw	r30, 0x04	; 4
		
			ServoOut[i] = (uint16_t)temp;
		}

		// Check limits in microsecond units.
		for (i = 0; i < MAX_OUTPUTS; i++)
    3a84:	28 30       	cpi	r18, 0x08	; 8
    3a86:	31 05       	cpc	r19, r1
    3a88:	f9 f6       	brne	.-66     	; 0x3a48 <Display_in_out+0x14c>
		}
		
		// Servos are now in microsecond units.
		
		// Check for motor flags if throttle is below arming minimum
		if (MonopolarThrottle < THROTTLEIDLE) // THROTTLEIDLE = 50
    3a8a:	80 91 81 09 	lds	r24, 0x0981
    3a8e:	90 91 82 09 	lds	r25, 0x0982
    3a92:	c2 97       	sbiw	r24, 0x32	; 50
    3a94:	2c f0       	brlt	.+10     	; 0x3aa0 <Display_in_out+0x1a4>
    3a96:	fe 01       	movw	r30, r28
    3a98:	71 96       	adiw	r30, 0x11	; 17
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	14 c0       	rjmp	.+40     	; 0x3ac8 <Display_in_out+0x1cc>
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
		{
			// For each output
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Check for motor marker
				if (Config.Channel[i].Motor_marker == MOTOR)
    3aa4:	f8 01       	movw	r30, r16
    3aa6:	20 81       	ld	r18, Z
    3aa8:	22 30       	cpi	r18, 0x02	; 2
    3aaa:	39 f4       	brne	.+14     	; 0x3aba <Display_in_out+0x1be>
				{
					// Set output to minimum pulse width (1000us)
					ServoOut[i] = MOTORMIN;
    3aac:	fc 01       	movw	r30, r24
    3aae:	ee 0f       	add	r30, r30
    3ab0:	ff 1f       	adc	r31, r31
    3ab2:	eb 56       	subi	r30, 0x6B	; 107
    3ab4:	f6 4f       	sbci	r31, 0xF6	; 246
    3ab6:	51 82       	std	Z+1, r5	; 0x01
    3ab8:	40 82       	st	Z, r4
    3aba:	01 96       	adiw	r24, 0x01	; 1
    3abc:	0e 5d       	subi	r16, 0xDE	; 222
    3abe:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// Check for motor flags if throttle is below arming minimum
		if (MonopolarThrottle < THROTTLEIDLE) // THROTTLEIDLE = 50
		{
			// For each output
			for (i = 0; i < MAX_OUTPUTS; i++)
    3ac0:	88 30       	cpi	r24, 0x08	; 8
    3ac2:	91 05       	cpc	r25, r1
    3ac4:	79 f7       	brne	.-34     	; 0x3aa4 <Display_in_out+0x1a8>
    3ac6:	e7 cf       	rjmp	.-50     	; 0x3a96 <Display_in_out+0x19a>
		}

		// Convert outputs to percentages (center and divide by 4)
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			Outputs[i] = (int16_t)ServoOut[i];
    3ac8:	d9 01       	movw	r26, r18
    3aca:	aa 0f       	add	r26, r26
    3acc:	bb 1f       	adc	r27, r27
    3ace:	ab 56       	subi	r26, 0x6B	; 107
    3ad0:	b6 4f       	sbci	r27, 0xF6	; 246
    3ad2:	8d 91       	ld	r24, X+
    3ad4:	9c 91       	ld	r25, X
			Outputs[i] = Outputs[i] - SERVO_CENTER;
    3ad6:	ac 01       	movw	r20, r24
    3ad8:	4c 5d       	subi	r20, 0xDC	; 220
    3ada:	55 40       	sbci	r21, 0x05	; 5
    3adc:	51 83       	std	Z+1, r21	; 0x01
    3ade:	40 83       	st	Z, r20
			
			// Round correctly in both directions
			if (Outputs[i] >= 0)
    3ae0:	57 fd       	sbrc	r21, 7
    3ae2:	03 c0       	rjmp	.+6      	; 0x3aea <Display_in_out+0x1ee>
			{
				Outputs[i] = (Outputs[i] + 2) / 5; // Convert to percentages +/-500 = +/-100%
    3ae4:	8a 5d       	subi	r24, 0xDA	; 218
    3ae6:	95 40       	sbci	r25, 0x05	; 5
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <Display_in_out+0x1f2>
			}
			else
			{
				Outputs[i] = (Outputs[i] - 2) / 5; 
    3aea:	8e 5d       	subi	r24, 0xDE	; 222
    3aec:	95 40       	sbci	r25, 0x05	; 5
    3aee:	b5 01       	movw	r22, r10
    3af0:	0e 94 73 6f 	call	0xdee6	; 0xdee6 <__divmodhi4>
    3af4:	71 83       	std	Z+1, r23	; 0x01
    3af6:	60 83       	st	Z, r22
    3af8:	2f 5f       	subi	r18, 0xFF	; 255
    3afa:	3f 4f       	sbci	r19, 0xFF	; 255
    3afc:	32 96       	adiw	r30, 0x02	; 2
				}
			}
		}

		// Convert outputs to percentages (center and divide by 4)
		for (i = 0; i < MAX_OUTPUTS; i++)
    3afe:	28 30       	cpi	r18, 0x08	; 8
    3b00:	31 05       	cpc	r19, r1
    3b02:	11 f7       	brne	.-60     	; 0x3ac8 <Display_in_out+0x1cc>
    3b04:	ae 01       	movw	r20, r28
    3b06:	4f 5f       	subi	r20, 0xFF	; 255
    3b08:	5f 4f       	sbci	r21, 0xFF	; 255
    3b0a:	7a 01       	movw	r14, r20
    3b0c:	00 e0       	ldi	r16, 0x00	; 0
    3b0e:	10 e0       	ldi	r17, 0x00	; 0
		}

		// Convert inputs to percentages (center and divide by 10)
		for (i = 0; i < MAX_RC_CHANNELS; i++)
		{
			tempf1 = (float)RCinputs[i];
    3b10:	f8 01       	movw	r30, r16
    3b12:	ee 0f       	add	r30, r30
    3b14:	ff 1f       	adc	r31, r31
    3b16:	ed 57       	subi	r30, 0x7D	; 125
    3b18:	f6 4f       	sbci	r31, 0xF6	; 246
    3b1a:	60 81       	ld	r22, Z
    3b1c:	71 81       	ldd	r23, Z+1	; 0x01
    3b1e:	07 2e       	mov	r0, r23
    3b20:	00 0c       	add	r0, r0
    3b22:	88 0b       	sbc	r24, r24
    3b24:	99 0b       	sbc	r25, r25
    3b26:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
			Inputs[i] = (int16_t)(tempf1 / 10.0f);
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	40 e2       	ldi	r20, 0x20	; 32
    3b30:	51 e4       	ldi	r21, 0x41	; 65
    3b32:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    3b36:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    3b3a:	d7 01       	movw	r26, r14
    3b3c:	6d 93       	st	X+, r22
    3b3e:	7d 93       	st	X+, r23
    3b40:	7d 01       	movw	r14, r26
    3b42:	0f 5f       	subi	r16, 0xFF	; 255
    3b44:	1f 4f       	sbci	r17, 0xFF	; 255
				Outputs[i] = (Outputs[i] - 2) / 5; 
			}
		}

		// Convert inputs to percentages (center and divide by 10)
		for (i = 0; i < MAX_RC_CHANNELS; i++)
    3b46:	08 30       	cpi	r16, 0x08	; 8
    3b48:	11 05       	cpc	r17, r1
    3b4a:	11 f7       	brne	.-60     	; 0x3b10 <Display_in_out+0x214>
			tempf1 = (float)RCinputs[i];
			Inputs[i] = (int16_t)(tempf1 / 10.0f);
		}

		// Column 1
		LCD_Display_Text(478,(const unsigned char*)Verdana8,0,3);
    3b4c:	23 e0       	ldi	r18, 0x03	; 3
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	40 e0       	ldi	r20, 0x00	; 0
    3b52:	50 e0       	ldi	r21, 0x00	; 0
    3b54:	6d e8       	ldi	r22, 0x8D	; 141
    3b56:	7f e0       	ldi	r23, 0x0F	; 15
    3b58:	8e ed       	ldi	r24, 0xDE	; 222
    3b5a:	91 e0       	ldi	r25, 0x01	; 1
    3b5c:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(479,(const unsigned char*)Verdana8,0,13);
    3b60:	2d e0       	ldi	r18, 0x0D	; 13
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	40 e0       	ldi	r20, 0x00	; 0
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	6d e8       	ldi	r22, 0x8D	; 141
    3b6a:	7f e0       	ldi	r23, 0x0F	; 15
    3b6c:	8f ed       	ldi	r24, 0xDF	; 223
    3b6e:	91 e0       	ldi	r25, 0x01	; 1
    3b70:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(480,(const unsigned char*)Verdana8,0,23);
    3b74:	27 e1       	ldi	r18, 0x17	; 23
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 e0       	ldi	r20, 0x00	; 0
    3b7a:	50 e0       	ldi	r21, 0x00	; 0
    3b7c:	6d e8       	ldi	r22, 0x8D	; 141
    3b7e:	7f e0       	ldi	r23, 0x0F	; 15
    3b80:	80 ee       	ldi	r24, 0xE0	; 224
    3b82:	91 e0       	ldi	r25, 0x01	; 1
    3b84:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(481,(const unsigned char*)Verdana8,0,33);
    3b88:	21 e2       	ldi	r18, 0x21	; 33
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	6d e8       	ldi	r22, 0x8D	; 141
    3b92:	7f e0       	ldi	r23, 0x0F	; 15
    3b94:	81 ee       	ldi	r24, 0xE1	; 225
    3b96:	91 e0       	ldi	r25, 0x01	; 1
    3b98:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(482,(const unsigned char*)Verdana8,0,43);
    3b9c:	2b e2       	ldi	r18, 0x2B	; 43
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	40 e0       	ldi	r20, 0x00	; 0
    3ba2:	50 e0       	ldi	r21, 0x00	; 0
    3ba4:	6d e8       	ldi	r22, 0x8D	; 141
    3ba6:	7f e0       	ldi	r23, 0x0F	; 15
    3ba8:	82 ee       	ldi	r24, 0xE2	; 226
    3baa:	91 e0       	ldi	r25, 0x01	; 1
    3bac:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(483,(const unsigned char*)Verdana8,0,53);
    3bb0:	25 e3       	ldi	r18, 0x35	; 53
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	50 e0       	ldi	r21, 0x00	; 0
    3bb8:	6d e8       	ldi	r22, 0x8D	; 141
    3bba:	7f e0       	ldi	r23, 0x0F	; 15
    3bbc:	83 ee       	ldi	r24, 0xE3	; 227
    3bbe:	91 e0       	ldi	r25, 0x01	; 1
    3bc0:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		
		mugui_lcd_puts(itoa((MonopolarThrottle / 20),pBuffer,10),(const unsigned char*)Verdana8,25,3);
    3bc4:	80 91 81 09 	lds	r24, 0x0981
    3bc8:	90 91 82 09 	lds	r25, 0x0982
    3bcc:	b3 01       	movw	r22, r6
    3bce:	0e 94 73 6f 	call	0xdee6	; 0xdee6 <__divmodhi4>
    3bd2:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3bd4:	4a e0       	ldi	r20, 0x0A	; 10
    3bd6:	62 ec       	ldi	r22, 0xC2	; 194
    3bd8:	75 e0       	ldi	r23, 0x05	; 5
    3bda:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    3bde:	23 e0       	ldi	r18, 0x03	; 3
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	49 e1       	ldi	r20, 0x19	; 25
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	6d e8       	ldi	r22, 0x8D	; 141
    3be8:	7f e0       	ldi	r23, 0x0F	; 15
    3bea:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3bee:	4a e0       	ldi	r20, 0x0A	; 10
    3bf0:	62 ec       	ldi	r22, 0xC2	; 194
    3bf2:	75 e0       	ldi	r23, 0x05	; 5
    3bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf8:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,25,13);
    3bfc:	2d e0       	ldi	r18, 0x0D	; 13
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	49 e1       	ldi	r20, 0x19	; 25
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	6d e8       	ldi	r22, 0x8D	; 141
    3c06:	7f e0       	ldi	r23, 0x0F	; 15
    3c08:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3c0c:	4a e0       	ldi	r20, 0x0A	; 10
    3c0e:	62 ec       	ldi	r22, 0xC2	; 194
    3c10:	75 e0       	ldi	r23, 0x05	; 5
    3c12:	8d 81       	ldd	r24, Y+5	; 0x05
    3c14:	9e 81       	ldd	r25, Y+6	; 0x06
    3c16:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,25,23);
    3c1a:	27 e1       	ldi	r18, 0x17	; 23
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	49 e1       	ldi	r20, 0x19	; 25
    3c20:	50 e0       	ldi	r21, 0x00	; 0
    3c22:	6d e8       	ldi	r22, 0x8D	; 141
    3c24:	7f e0       	ldi	r23, 0x0F	; 15
    3c26:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3c2a:	4a e0       	ldi	r20, 0x0A	; 10
    3c2c:	62 ec       	ldi	r22, 0xC2	; 194
    3c2e:	75 e0       	ldi	r23, 0x05	; 5
    3c30:	8f 81       	ldd	r24, Y+7	; 0x07
    3c32:	98 85       	ldd	r25, Y+8	; 0x08
    3c34:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,25,33);
    3c38:	21 e2       	ldi	r18, 0x21	; 33
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	49 e1       	ldi	r20, 0x19	; 25
    3c3e:	50 e0       	ldi	r21, 0x00	; 0
    3c40:	6d e8       	ldi	r22, 0x8D	; 141
    3c42:	7f e0       	ldi	r23, 0x0F	; 15
    3c44:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3c48:	4a e0       	ldi	r20, 0x0A	; 10
    3c4a:	62 ec       	ldi	r22, 0xC2	; 194
    3c4c:	75 e0       	ldi	r23, 0x05	; 5
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,25,43);
    3c56:	2b e2       	ldi	r18, 0x2B	; 43
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	49 e1       	ldi	r20, 0x19	; 25
    3c5c:	50 e0       	ldi	r21, 0x00	; 0
    3c5e:	6d e8       	ldi	r22, 0x8D	; 141
    3c60:	7f e0       	ldi	r23, 0x0F	; 15
    3c62:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3c66:	4a e0       	ldi	r20, 0x0A	; 10
    3c68:	62 ec       	ldi	r22, 0xC2	; 194
    3c6a:	75 e0       	ldi	r23, 0x05	; 5
    3c6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c70:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,25,53);
    3c74:	25 e3       	ldi	r18, 0x35	; 53
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	49 e1       	ldi	r20, 0x19	; 25
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	6d e8       	ldi	r22, 0x8D	; 141
    3c7e:	7f e0       	ldi	r23, 0x0F	; 15
    3c80:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		
		// Column 2
		LCD_Display_Text(484,(const unsigned char*)Verdana8,48,3);
    3c84:	23 e0       	ldi	r18, 0x03	; 3
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	40 e3       	ldi	r20, 0x30	; 48
    3c8a:	50 e0       	ldi	r21, 0x00	; 0
    3c8c:	6d e8       	ldi	r22, 0x8D	; 141
    3c8e:	7f e0       	ldi	r23, 0x0F	; 15
    3c90:	84 ee       	ldi	r24, 0xE4	; 228
    3c92:	91 e0       	ldi	r25, 0x01	; 1
    3c94:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(485,(const unsigned char*)Verdana8,48,13);
    3c98:	2d e0       	ldi	r18, 0x0D	; 13
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	40 e3       	ldi	r20, 0x30	; 48
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
    3ca0:	6d e8       	ldi	r22, 0x8D	; 141
    3ca2:	7f e0       	ldi	r23, 0x0F	; 15
    3ca4:	85 ee       	ldi	r24, 0xE5	; 229
    3ca6:	91 e0       	ldi	r25, 0x01	; 1
    3ca8:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(477,(const unsigned char*)Verdana8,48,23); // OUT
    3cac:	27 e1       	ldi	r18, 0x17	; 23
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e3       	ldi	r20, 0x30	; 48
    3cb2:	50 e0       	ldi	r21, 0x00	; 0
    3cb4:	6d e8       	ldi	r22, 0x8D	; 141
    3cb6:	7f e0       	ldi	r23, 0x0F	; 15
    3cb8:	8d ed       	ldi	r24, 0xDD	; 221
    3cba:	91 e0       	ldi	r25, 0x01	; 1
    3cbc:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(468,(const unsigned char*)Verdana8,48,33);
    3cc0:	21 e2       	ldi	r18, 0x21	; 33
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e3       	ldi	r20, 0x30	; 48
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	6d e8       	ldi	r22, 0x8D	; 141
    3cca:	7f e0       	ldi	r23, 0x0F	; 15
    3ccc:	84 ed       	ldi	r24, 0xD4	; 212
    3cce:	91 e0       	ldi	r25, 0x01	; 1
    3cd0:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(469,(const unsigned char*)Verdana8,48,43);
    3cd4:	2b e2       	ldi	r18, 0x2B	; 43
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e3       	ldi	r20, 0x30	; 48
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	6d e8       	ldi	r22, 0x8D	; 141
    3cde:	7f e0       	ldi	r23, 0x0F	; 15
    3ce0:	85 ed       	ldi	r24, 0xD5	; 213
    3ce2:	91 e0       	ldi	r25, 0x01	; 1
    3ce4:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(470,(const unsigned char*)Verdana8,48,53);		
    3ce8:	25 e3       	ldi	r18, 0x35	; 53
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e3       	ldi	r20, 0x30	; 48
    3cee:	50 e0       	ldi	r21, 0x00	; 0
    3cf0:	6d e8       	ldi	r22, 0x8D	; 141
    3cf2:	7f e0       	ldi	r23, 0x0F	; 15
    3cf4:	86 ed       	ldi	r24, 0xD6	; 214
    3cf6:	91 e0       	ldi	r25, 0x01	; 1
    3cf8:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    3cfc:	4a e0       	ldi	r20, 0x0A	; 10
    3cfe:	62 ec       	ldi	r22, 0xC2	; 194
    3d00:	75 e0       	ldi	r23, 0x05	; 5
    3d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d06:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,71,3);
    3d0a:	23 e0       	ldi	r18, 0x03	; 3
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	47 e4       	ldi	r20, 0x47	; 71
    3d10:	50 e0       	ldi	r21, 0x00	; 0
    3d12:	6d e8       	ldi	r22, 0x8D	; 141
    3d14:	7f e0       	ldi	r23, 0x0F	; 15
    3d16:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3d1a:	4a e0       	ldi	r20, 0x0A	; 10
    3d1c:	62 ec       	ldi	r22, 0xC2	; 194
    3d1e:	75 e0       	ldi	r23, 0x05	; 5
    3d20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d22:	98 89       	ldd	r25, Y+16	; 0x10
    3d24:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,71,13);
    3d28:	2d e0       	ldi	r18, 0x0D	; 13
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	47 e4       	ldi	r20, 0x47	; 71
    3d2e:	50 e0       	ldi	r21, 0x00	; 0
    3d30:	6d e8       	ldi	r22, 0x8D	; 141
    3d32:	7f e0       	ldi	r23, 0x0F	; 15
    3d34:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3d38:	4a e0       	ldi	r20, 0x0A	; 10
    3d3a:	62 ec       	ldi	r22, 0xC2	; 194
    3d3c:	75 e0       	ldi	r23, 0x05	; 5
    3d3e:	89 89       	ldd	r24, Y+17	; 0x11
    3d40:	9a 89       	ldd	r25, Y+18	; 0x12
    3d42:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[0],pBuffer,10),(const unsigned char*)Verdana8,57,33);
    3d46:	21 e2       	ldi	r18, 0x21	; 33
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	49 e3       	ldi	r20, 0x39	; 57
    3d4c:	50 e0       	ldi	r21, 0x00	; 0
    3d4e:	6d e8       	ldi	r22, 0x8D	; 141
    3d50:	7f e0       	ldi	r23, 0x0F	; 15
    3d52:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3d56:	4a e0       	ldi	r20, 0x0A	; 10
    3d58:	62 ec       	ldi	r22, 0xC2	; 194
    3d5a:	75 e0       	ldi	r23, 0x05	; 5
    3d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d60:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[1],pBuffer,10),(const unsigned char*)Verdana8,57,43);
    3d64:	2b e2       	ldi	r18, 0x2B	; 43
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	49 e3       	ldi	r20, 0x39	; 57
    3d6a:	50 e0       	ldi	r21, 0x00	; 0
    3d6c:	6d e8       	ldi	r22, 0x8D	; 141
    3d6e:	7f e0       	ldi	r23, 0x0F	; 15
    3d70:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3d74:	4a e0       	ldi	r20, 0x0A	; 10
    3d76:	62 ec       	ldi	r22, 0xC2	; 194
    3d78:	75 e0       	ldi	r23, 0x05	; 5
    3d7a:	8d 89       	ldd	r24, Y+21	; 0x15
    3d7c:	9e 89       	ldd	r25, Y+22	; 0x16
    3d7e:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[2],pBuffer,10),(const unsigned char*)Verdana8,57,53);
    3d82:	25 e3       	ldi	r18, 0x35	; 53
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	49 e3       	ldi	r20, 0x39	; 57
    3d88:	50 e0       	ldi	r21, 0x00	; 0
    3d8a:	6d e8       	ldi	r22, 0x8D	; 141
    3d8c:	7f e0       	ldi	r23, 0x0F	; 15
    3d8e:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		
		// Column 3
		LCD_Display_Text(471,(const unsigned char*)Verdana8,94,3);
    3d92:	23 e0       	ldi	r18, 0x03	; 3
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	4e e5       	ldi	r20, 0x5E	; 94
    3d98:	50 e0       	ldi	r21, 0x00	; 0
    3d9a:	6d e8       	ldi	r22, 0x8D	; 141
    3d9c:	7f e0       	ldi	r23, 0x0F	; 15
    3d9e:	87 ed       	ldi	r24, 0xD7	; 215
    3da0:	91 e0       	ldi	r25, 0x01	; 1
    3da2:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(472,(const unsigned char*)Verdana8,94,13);
    3da6:	2d e0       	ldi	r18, 0x0D	; 13
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	4e e5       	ldi	r20, 0x5E	; 94
    3dac:	50 e0       	ldi	r21, 0x00	; 0
    3dae:	6d e8       	ldi	r22, 0x8D	; 141
    3db0:	7f e0       	ldi	r23, 0x0F	; 15
    3db2:	88 ed       	ldi	r24, 0xD8	; 216
    3db4:	91 e0       	ldi	r25, 0x01	; 1
    3db6:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(473,(const unsigned char*)Verdana8,94,23);
    3dba:	27 e1       	ldi	r18, 0x17	; 23
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	4e e5       	ldi	r20, 0x5E	; 94
    3dc0:	50 e0       	ldi	r21, 0x00	; 0
    3dc2:	6d e8       	ldi	r22, 0x8D	; 141
    3dc4:	7f e0       	ldi	r23, 0x0F	; 15
    3dc6:	89 ed       	ldi	r24, 0xD9	; 217
    3dc8:	91 e0       	ldi	r25, 0x01	; 1
    3dca:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(474,(const unsigned char*)Verdana8,94,33);
    3dce:	21 e2       	ldi	r18, 0x21	; 33
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	4e e5       	ldi	r20, 0x5E	; 94
    3dd4:	50 e0       	ldi	r21, 0x00	; 0
    3dd6:	6d e8       	ldi	r22, 0x8D	; 141
    3dd8:	7f e0       	ldi	r23, 0x0F	; 15
    3dda:	8a ed       	ldi	r24, 0xDA	; 218
    3ddc:	91 e0       	ldi	r25, 0x01	; 1
    3dde:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(475,(const unsigned char*)Verdana8,94,43);
    3de2:	2b e2       	ldi	r18, 0x2B	; 43
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	4e e5       	ldi	r20, 0x5E	; 94
    3de8:	50 e0       	ldi	r21, 0x00	; 0
    3dea:	6d e8       	ldi	r22, 0x8D	; 141
    3dec:	7f e0       	ldi	r23, 0x0F	; 15
    3dee:	8b ed       	ldi	r24, 0xDB	; 219
    3df0:	91 e0       	ldi	r25, 0x01	; 1
    3df2:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(476,(const unsigned char*)Verdana8,88,53); // Pn.
    3df6:	25 e3       	ldi	r18, 0x35	; 53
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	48 e5       	ldi	r20, 0x58	; 88
    3dfc:	50 e0       	ldi	r21, 0x00	; 0
    3dfe:	6d e8       	ldi	r22, 0x8D	; 141
    3e00:	7f e0       	ldi	r23, 0x0F	; 15
    3e02:	8c ed       	ldi	r24, 0xDC	; 220
    3e04:	91 e0       	ldi	r25, 0x01	; 1
    3e06:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    3e0a:	4a e0       	ldi	r20, 0x0A	; 10
    3e0c:	62 ec       	ldi	r22, 0xC2	; 194
    3e0e:	75 e0       	ldi	r23, 0x05	; 5
    3e10:	8f 89       	ldd	r24, Y+23	; 0x17
    3e12:	98 8d       	ldd	r25, Y+24	; 0x18
    3e14:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>


		mugui_lcd_puts(itoa(Outputs[3],pBuffer,10),(const unsigned char*)Verdana8,104,3);
    3e18:	23 e0       	ldi	r18, 0x03	; 3
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	48 e6       	ldi	r20, 0x68	; 104
    3e1e:	50 e0       	ldi	r21, 0x00	; 0
    3e20:	6d e8       	ldi	r22, 0x8D	; 141
    3e22:	7f e0       	ldi	r23, 0x0F	; 15
    3e24:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3e28:	4a e0       	ldi	r20, 0x0A	; 10
    3e2a:	62 ec       	ldi	r22, 0xC2	; 194
    3e2c:	75 e0       	ldi	r23, 0x05	; 5
    3e2e:	89 8d       	ldd	r24, Y+25	; 0x19
    3e30:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e32:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[4],pBuffer,10),(const unsigned char*)Verdana8,104,13);
    3e36:	2d e0       	ldi	r18, 0x0D	; 13
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	48 e6       	ldi	r20, 0x68	; 104
    3e3c:	50 e0       	ldi	r21, 0x00	; 0
    3e3e:	6d e8       	ldi	r22, 0x8D	; 141
    3e40:	7f e0       	ldi	r23, 0x0F	; 15
    3e42:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3e46:	4a e0       	ldi	r20, 0x0A	; 10
    3e48:	62 ec       	ldi	r22, 0xC2	; 194
    3e4a:	75 e0       	ldi	r23, 0x05	; 5
    3e4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e50:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[5],pBuffer,10),(const unsigned char*)Verdana8,104,23);
    3e54:	27 e1       	ldi	r18, 0x17	; 23
    3e56:	30 e0       	ldi	r19, 0x00	; 0
    3e58:	48 e6       	ldi	r20, 0x68	; 104
    3e5a:	50 e0       	ldi	r21, 0x00	; 0
    3e5c:	6d e8       	ldi	r22, 0x8D	; 141
    3e5e:	7f e0       	ldi	r23, 0x0F	; 15
    3e60:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3e64:	4a e0       	ldi	r20, 0x0A	; 10
    3e66:	62 ec       	ldi	r22, 0xC2	; 194
    3e68:	75 e0       	ldi	r23, 0x05	; 5
    3e6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e6e:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[6],pBuffer,10),(const unsigned char*)Verdana8,104,33);
    3e72:	21 e2       	ldi	r18, 0x21	; 33
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	48 e6       	ldi	r20, 0x68	; 104
    3e78:	50 e0       	ldi	r21, 0x00	; 0
    3e7a:	6d e8       	ldi	r22, 0x8D	; 141
    3e7c:	7f e0       	ldi	r23, 0x0F	; 15
    3e7e:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    3e82:	4a e0       	ldi	r20, 0x0A	; 10
    3e84:	62 ec       	ldi	r22, 0xC2	; 194
    3e86:	75 e0       	ldi	r23, 0x05	; 5
    3e88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e8a:	98 a1       	ldd	r25, Y+32	; 0x20
    3e8c:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[7],pBuffer,10),(const unsigned char*)Verdana8,104,43);
    3e90:	2b e2       	ldi	r18, 0x2B	; 43
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	48 e6       	ldi	r20, 0x68	; 104
    3e96:	50 e0       	ldi	r21, 0x00	; 0
    3e98:	6d e8       	ldi	r22, 0x8D	; 141
    3e9a:	7f e0       	ldi	r23, 0x0F	; 15
    3e9c:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>

		// Display the transition number as 1.00 to 2.00
		uint8_t x_loc = 104;		// X location of transition display
		uint8_t y_loc = 53;		// Y location of transition display

		utemp = transition + 100;
    3ea0:	c0 90 38 05 	lds	r12, 0x0538
    3ea4:	d0 90 39 05 	lds	r13, 0x0539
    3ea8:	86 01       	movw	r16, r12
    3eaa:	0c 59       	subi	r16, 0x9C	; 156
    3eac:	1f 4f       	sbci	r17, 0xFF	; 255
		temp = utemp/100;		// Display whole decimal part first
    3eae:	c8 01       	movw	r24, r16
    3eb0:	b4 01       	movw	r22, r8
    3eb2:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <__udivmodhi4>
    3eb6:	7b 01       	movw	r14, r22
    3eb8:	4a e0       	ldi	r20, 0x0A	; 10
    3eba:	62 ec       	ldi	r22, 0xC2	; 194
    3ebc:	75 e0       	ldi	r23, 0x05	; 5
    3ebe:	c7 01       	movw	r24, r14
    3ec0:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    3ec4:	ae 01       	movw	r20, r28
    3ec6:	4f 5d       	subi	r20, 0xDF	; 223
    3ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    3eca:	6d e8       	ldi	r22, 0x8D	; 141
    3ecc:	7f e0       	ldi	r23, 0x0F	; 15
    3ece:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
    3ed2:	4a e0       	ldi	r20, 0x0A	; 10
    3ed4:	62 ec       	ldi	r22, 0xC2	; 194
    3ed6:	75 e0       	ldi	r23, 0x05	; 5
    3ed8:	c7 01       	movw	r24, r14
    3eda:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    3ede:	25 e3       	ldi	r18, 0x35	; 53
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	48 e6       	ldi	r20, 0x68	; 104
    3ee4:	50 e0       	ldi	r21, 0x00	; 0
    3ee6:	6d e8       	ldi	r22, 0x8D	; 141
    3ee8:	7f e0       	ldi	r23, 0x0F	; 15
    3eea:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		pos1 = size.x;

		utemp = utemp - (temp * 100); // Now display the parts to the right of the decimal point
    3eee:	2c e9       	ldi	r18, 0x9C	; 156
    3ef0:	a7 01       	movw	r20, r14
    3ef2:	24 03       	mulsu	r18, r20
    3ef4:	60 01       	movw	r12, r0
    3ef6:	25 9f       	mul	r18, r21
    3ef8:	d0 0c       	add	r13, r0
    3efa:	11 24       	eor	r1, r1
    3efc:	c0 0e       	add	r12, r16
    3efe:	d1 1e       	adc	r13, r17

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    3f00:	09 a1       	ldd	r16, Y+33	; 0x21
    3f02:	00 2e       	mov	r0, r16
    3f04:	00 0c       	add	r0, r0
    3f06:	11 0b       	sbc	r17, r17
    3f08:	08 59       	subi	r16, 0x98	; 152
    3f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f0c:	25 e3       	ldi	r18, 0x35	; 53
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	a8 01       	movw	r20, r16
    3f12:	6d e8       	ldi	r22, 0x8D	; 141
    3f14:	7f e0       	ldi	r23, 0x0F	; 15
    3f16:	8c e0       	ldi	r24, 0x0C	; 12
    3f18:	91 e0       	ldi	r25, 0x01	; 1
    3f1a:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    3f1e:	ae 01       	movw	r20, r28
    3f20:	4f 5d       	subi	r20, 0xDF	; 223
    3f22:	5f 4f       	sbci	r21, 0xFF	; 255
    3f24:	6d e8       	ldi	r22, 0x8D	; 141
    3f26:	7f e0       	ldi	r23, 0x0F	; 15
    3f28:	8b e0       	ldi	r24, 0x0B	; 11
    3f2a:	95 e0       	ldi	r25, 0x05	; 5
    3f2c:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
		pos3 = size.x;
    3f30:	e9 a0       	ldd	r14, Y+33	; 0x21
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    3f32:	ae 01       	movw	r20, r28
    3f34:	4f 5d       	subi	r20, 0xDF	; 223
    3f36:	5f 4f       	sbci	r21, 0xFF	; 255
    3f38:	6d e8       	ldi	r22, 0x8D	; 141
    3f3a:	7f e0       	ldi	r23, 0x0F	; 15
    3f3c:	8d e0       	ldi	r24, 0x0D	; 13
    3f3e:	95 e0       	ldi	r25, 0x05	; 5
    3f40:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
		pos2 = size.x;
    3f44:	59 a1       	ldd	r21, Y+33	; 0x21
    3f46:	5d a3       	std	Y+37, r21	; 0x25
    3f48:	0e 2c       	mov	r0, r14
    3f4a:	00 0c       	add	r0, r0
    3f4c:	ff 08       	sbc	r15, r15

		if (utemp >= 10)
    3f4e:	8a e0       	ldi	r24, 0x0A	; 10
    3f50:	c8 16       	cp	r12, r24
    3f52:	d1 04       	cpc	r13, r1
    3f54:	38 f0       	brcs	.+14     	; 0x3f64 <Display_in_out+0x668>
    3f56:	4a e0       	ldi	r20, 0x0A	; 10
    3f58:	62 ec       	ldi	r22, 0xC2	; 194
    3f5a:	75 e0       	ldi	r23, 0x05	; 5
    3f5c:	c6 01       	movw	r24, r12
    3f5e:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    3f62:	16 c0       	rjmp	.+44     	; 0x3f90 <Display_in_out+0x694>
		{
			mugui_lcd_puts(itoa(utemp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    3f64:	a8 01       	movw	r20, r16
    3f66:	4e 0d       	add	r20, r14
    3f68:	5f 1d       	adc	r21, r15
    3f6a:	25 e3       	ldi	r18, 0x35	; 53
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	6d e8       	ldi	r22, 0x8D	; 141
    3f70:	7f e0       	ldi	r23, 0x0F	; 15
    3f72:	8d e0       	ldi	r24, 0x0D	; 13
    3f74:	91 e0       	ldi	r25, 0x01	; 1
    3f76:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    3f7a:	4a e0       	ldi	r20, 0x0A	; 10
    3f7c:	62 ec       	ldi	r22, 0xC2	; 194
    3f7e:	75 e0       	ldi	r23, 0x05	; 5
    3f80:	c6 01       	movw	r24, r12
    3f82:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
			mugui_lcd_puts(itoa(utemp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    3f86:	ad a1       	ldd	r26, Y+37	; 0x25
    3f88:	0a 0f       	add	r16, r26
    3f8a:	11 1d       	adc	r17, r1
    3f8c:	a7 fd       	sbrc	r26, 7
    3f8e:	1a 95       	dec	r17
    3f90:	a8 01       	movw	r20, r16
    3f92:	4e 0d       	add	r20, r14
    3f94:	5f 1d       	adc	r21, r15
    3f96:	25 e3       	ldi	r18, 0x35	; 53
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	6d e8       	ldi	r22, 0x8D	; 141
    3f9c:	7f e0       	ldi	r23, 0x0F	; 15
    3f9e:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		}

		// mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,104,53);		

		// Update buffer
		write_buffer(buffer);
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	91 e0       	ldi	r25, 0x01	; 1
    3fa6:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
		clear_buffer(buffer);
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	91 e0       	ldi	r25, 0x01	; 1
    3fae:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    3fb2:	d0 cc       	rjmp	.-1632   	; 0x3954 <Display_in_out+0x58>
	}
}
    3fb4:	a5 96       	adiw	r28, 0x25	; 37
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	f8 94       	cli
    3fba:	de bf       	out	0x3e, r29	; 62
    3fbc:	0f be       	out	0x3f, r0	; 63
    3fbe:	cd bf       	out	0x3d, r28	; 61
    3fc0:	df 91       	pop	r29
    3fc2:	cf 91       	pop	r28
    3fc4:	1f 91       	pop	r17
    3fc6:	0f 91       	pop	r16
    3fc8:	ff 90       	pop	r15
    3fca:	ef 90       	pop	r14
    3fcc:	df 90       	pop	r13
    3fce:	cf 90       	pop	r12
    3fd0:	bf 90       	pop	r11
    3fd2:	af 90       	pop	r10
    3fd4:	9f 90       	pop	r9
    3fd6:	8f 90       	pop	r8
    3fd8:	7f 90       	pop	r7
    3fda:	6f 90       	pop	r6
    3fdc:	5f 90       	pop	r5
    3fde:	4f 90       	pop	r4
    3fe0:	3f 90       	pop	r3
    3fe2:	2f 90       	pop	r2
    3fe4:	08 95       	ret

00003fe6 <menu_log>:
	// Save log and log pointer
	Save_Config_to_EEPROM();
}

void menu_log(void)
{
    3fe6:	cf 92       	push	r12
    3fe8:	df 92       	push	r13
    3fea:	ef 92       	push	r14
    3fec:	ff 92       	push	r15
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
    3ff2:	cf 93       	push	r28
    3ff4:	df 93       	push	r29
	int8_t	log_start = 0;
    3ff6:	c0 e0       	ldi	r28, 0x00	; 0
	while(BUTTON1 != 0)
	{
		if (BUTTON4 == 0)
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    3ff8:	8d e3       	ldi	r24, 0x3D	; 61
    3ffa:	c8 2e       	mov	r12, r24
    3ffc:	88 e0       	ldi	r24, 0x08	; 8
    3ffe:	d8 2e       	mov	r13, r24
    4000:	d4 e1       	ldi	r29, 0x14	; 20

void menu_log(void)
{
	int8_t	log_start = 0;
	
	while(BUTTON1 != 0)
    4002:	1f 9b       	sbis	0x03, 7	; 3
    4004:	45 c0       	rjmp	.+138    	; 0x4090 <menu_log+0xaa>
	{
		if (BUTTON4 == 0)
    4006:	1c 99       	sbic	0x03, 4	; 3
    4008:	09 c0       	rjmp	.+18     	; 0x401c <menu_log+0x36>
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    400a:	f6 01       	movw	r30, r12
    400c:	2d 2f       	mov	r18, r29
    400e:	11 92       	st	Z+, r1
    4010:	2a 95       	dec	r18
    4012:	e9 f7       	brne	.-6      	; 0x400e <menu_log+0x28>
			Config.log_pointer = 0;
    4014:	10 92 3c 08 	sts	0x083C, r1

			// Save log and log pointer
			Save_Config_to_EEPROM();			
    4018:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
		}
		
		if (BUTTON2 == 0)
    401c:	1e 99       	sbic	0x03, 6	; 3
    401e:	03 c0       	rjmp	.+6      	; 0x4026 <menu_log+0x40>
		{
			log_start--;
    4020:	c1 50       	subi	r28, 0x01	; 1
    4022:	c7 fd       	sbrc	r28, 7
    4024:	c0 e0       	ldi	r28, 0x00	; 0
			{
				log_start = 0;
			}
		}

		if (BUTTON3 == 0)
    4026:	1d 99       	sbic	0x03, 5	; 3
    4028:	04 c0       	rjmp	.+8      	; 0x4032 <menu_log+0x4c>
		{
			log_start++;
    402a:	cf 5f       	subi	r28, 0xFF	; 255
			
			if (log_start >= (LOGLENGTH - 5))
    402c:	cf 30       	cpi	r28, 0x0F	; 15
    402e:	0c f0       	brlt	.+2      	; 0x4032 <menu_log+0x4c>
			{
				log_start = 15;
    4030:	cf e0       	ldi	r28, 0x0F	; 15
    4032:	8c 2f       	mov	r24, r28
    4034:	0c 2e       	mov	r0, r28
    4036:	00 0c       	add	r0, r0
    4038:	99 0b       	sbc	r25, r25
    403a:	fc 01       	movw	r30, r24
    403c:	e3 5c       	subi	r30, 0xC3	; 195
    403e:	f7 4f       	sbci	r31, 0xF7	; 247
    4040:	7f 01       	movw	r14, r30
    4042:	00 e0       	ldi	r16, 0x00	; 0
    4044:	10 e0       	ldi	r17, 0x00	; 0
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
    4046:	f7 01       	movw	r30, r14
    4048:	81 91       	ld	r24, Z+
    404a:	7f 01       	movw	r14, r30
    404c:	08 2e       	mov	r0, r24
    404e:	00 0c       	add	r0, r0
    4050:	99 0b       	sbc	r25, r25
    4052:	98 01       	movw	r18, r16
    4054:	40 e0       	ldi	r20, 0x00	; 0
    4056:	50 e0       	ldi	r21, 0x00	; 0
    4058:	6d e8       	ldi	r22, 0x8D	; 141
    405a:	7f e0       	ldi	r23, 0x0F	; 15
    405c:	85 5e       	subi	r24, 0xE5	; 229
    405e:	9e 4f       	sbci	r25, 0xFE	; 254
    4060:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    4064:	06 5f       	subi	r16, 0xF6	; 246
    4066:	1f 4f       	sbci	r17, 0xFF	; 255
				log_start = 15;
			}
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
    4068:	02 33       	cpi	r16, 0x32	; 50
    406a:	11 05       	cpc	r17, r1
    406c:	61 f7       	brne	.-40     	; 0x4046 <menu_log+0x60>
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
		}

		print_menu_frame(LOG);
    406e:	83 e0       	ldi	r24, 0x03	; 3
    4070:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <print_menu_frame>
		clear_buffer(buffer);
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	91 e0       	ldi	r25, 0x01	; 1
    4078:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    407c:	ff e7       	ldi	r31, 0x7F	; 127
    407e:	2a e1       	ldi	r18, 0x1A	; 26
    4080:	36 e0       	ldi	r19, 0x06	; 6
    4082:	f1 50       	subi	r31, 0x01	; 1
    4084:	20 40       	sbci	r18, 0x00	; 0
    4086:	30 40       	sbci	r19, 0x00	; 0
    4088:	e1 f7       	brne	.-8      	; 0x4082 <menu_log+0x9c>
    408a:	00 c0       	rjmp	.+0      	; 0x408c <menu_log+0xa6>
    408c:	00 00       	nop
    408e:	b9 cf       	rjmp	.-142    	; 0x4002 <menu_log+0x1c>
		
		_delay_ms(100);
	}
}
    4090:	df 91       	pop	r29
    4092:	cf 91       	pop	r28
    4094:	1f 91       	pop	r17
    4096:	0f 91       	pop	r16
    4098:	ff 90       	pop	r15
    409a:	ef 90       	pop	r14
    409c:	df 90       	pop	r13
    409e:	cf 90       	pop	r12
    40a0:	08 95       	ret

000040a2 <Display_rcinput>:
	int16_t itemp1 = 0;
	int16_t value = 0;
#endif	
	
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
    40a2:	0e 94 93 48 	call	0x9126	; 0x9126 <init_int>

	// Just normal RX display
	while(BUTTON1 != 0)
    40a6:	1f 9b       	sbis	0x03, 7	; 3
    40a8:	fa c0       	rjmp	.+500    	; 0x429e <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    40aa:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    40ac:	0e 94 25 6a 	call	0xd44a	; 0xd44a <CenterSticks>
		}

		RxGetChannels();
    40b0:	0e 94 90 69 	call	0xd320	; 0xd320 <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	40 e0       	ldi	r20, 0x00	; 0
    40ba:	50 e0       	ldi	r21, 0x00	; 0
    40bc:	6d e8       	ldi	r22, 0x8D	; 141
    40be:	7f e0       	ldi	r23, 0x0F	; 15
    40c0:	82 e7       	ldi	r24, 0x72	; 114
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    40c8:	2a e0       	ldi	r18, 0x0A	; 10
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	40 e0       	ldi	r20, 0x00	; 0
    40ce:	50 e0       	ldi	r21, 0x00	; 0
    40d0:	6d e8       	ldi	r22, 0x8D	; 141
    40d2:	7f e0       	ldi	r23, 0x0F	; 15
    40d4:	80 e2       	ldi	r24, 0x20	; 32
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    40dc:	24 e1       	ldi	r18, 0x14	; 20
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	40 e0       	ldi	r20, 0x00	; 0
    40e2:	50 e0       	ldi	r21, 0x00	; 0
    40e4:	6d e8       	ldi	r22, 0x8D	; 141
    40e6:	7f e0       	ldi	r23, 0x0F	; 15
    40e8:	83 e7       	ldi	r24, 0x73	; 115
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    40f0:	2e e1       	ldi	r18, 0x1E	; 30
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	40 e0       	ldi	r20, 0x00	; 0
    40f6:	50 e0       	ldi	r21, 0x00	; 0
    40f8:	6d e8       	ldi	r22, 0x8D	; 141
    40fa:	7f e0       	ldi	r23, 0x0F	; 15
    40fc:	83 e2       	ldi	r24, 0x23	; 35
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	46 e4       	ldi	r20, 0x46	; 70
    410a:	50 e0       	ldi	r21, 0x00	; 0
    410c:	6d e8       	ldi	r22, 0x8D	; 141
    410e:	7f e0       	ldi	r23, 0x0F	; 15
    4110:	8d e6       	ldi	r24, 0x6D	; 109
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    4118:	2a e0       	ldi	r18, 0x0A	; 10
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	46 e4       	ldi	r20, 0x46	; 70
    411e:	50 e0       	ldi	r21, 0x00	; 0
    4120:	6d e8       	ldi	r22, 0x8D	; 141
    4122:	7f e0       	ldi	r23, 0x0F	; 15
    4124:	8e e6       	ldi	r24, 0x6E	; 110
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    412c:	24 e1       	ldi	r18, 0x14	; 20
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	46 e4       	ldi	r20, 0x46	; 70
    4132:	50 e0       	ldi	r21, 0x00	; 0
    4134:	6d e8       	ldi	r22, 0x8D	; 141
    4136:	7f e0       	ldi	r23, 0x0F	; 15
    4138:	8f e6       	ldi	r24, 0x6F	; 111
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    4140:	2e e1       	ldi	r18, 0x1E	; 30
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	46 e4       	ldi	r20, 0x46	; 70
    4146:	50 e0       	ldi	r21, 0x00	; 0
    4148:	6d e8       	ldi	r22, 0x8D	; 141
    414a:	7f e0       	ldi	r23, 0x0F	; 15
    414c:	80 e7       	ldi	r24, 0x70	; 112
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    4154:	80 91 81 09 	lds	r24, 0x0981
    4158:	90 91 82 09 	lds	r25, 0x0982
    415c:	4a e0       	ldi	r20, 0x0A	; 10
    415e:	62 ec       	ldi	r22, 0xC2	; 194
    4160:	75 e0       	ldi	r23, 0x05	; 5
    4162:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	45 e2       	ldi	r20, 0x25	; 37
    416c:	50 e0       	ldi	r21, 0x00	; 0
    416e:	6d e8       	ldi	r22, 0x8D	; 141
    4170:	7f e0       	ldi	r23, 0x0F	; 15
    4172:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    4176:	80 91 85 09 	lds	r24, 0x0985
    417a:	90 91 86 09 	lds	r25, 0x0986
    417e:	4a e0       	ldi	r20, 0x0A	; 10
    4180:	62 ec       	ldi	r22, 0xC2	; 194
    4182:	75 e0       	ldi	r23, 0x05	; 5
    4184:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    4188:	2a e0       	ldi	r18, 0x0A	; 10
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	45 e2       	ldi	r20, 0x25	; 37
    418e:	50 e0       	ldi	r21, 0x00	; 0
    4190:	6d e8       	ldi	r22, 0x8D	; 141
    4192:	7f e0       	ldi	r23, 0x0F	; 15
    4194:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    4198:	80 91 87 09 	lds	r24, 0x0987
    419c:	90 91 88 09 	lds	r25, 0x0988
    41a0:	4a e0       	ldi	r20, 0x0A	; 10
    41a2:	62 ec       	ldi	r22, 0xC2	; 194
    41a4:	75 e0       	ldi	r23, 0x05	; 5
    41a6:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    41aa:	24 e1       	ldi	r18, 0x14	; 20
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	45 e2       	ldi	r20, 0x25	; 37
    41b0:	50 e0       	ldi	r21, 0x00	; 0
    41b2:	6d e8       	ldi	r22, 0x8D	; 141
    41b4:	7f e0       	ldi	r23, 0x0F	; 15
    41b6:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    41ba:	80 91 89 09 	lds	r24, 0x0989
    41be:	90 91 8a 09 	lds	r25, 0x098A
    41c2:	4a e0       	ldi	r20, 0x0A	; 10
    41c4:	62 ec       	ldi	r22, 0xC2	; 194
    41c6:	75 e0       	ldi	r23, 0x05	; 5
    41c8:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    41cc:	2e e1       	ldi	r18, 0x1E	; 30
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	45 e2       	ldi	r20, 0x25	; 37
    41d2:	50 e0       	ldi	r21, 0x00	; 0
    41d4:	6d e8       	ldi	r22, 0x8D	; 141
    41d6:	7f e0       	ldi	r23, 0x0F	; 15
    41d8:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    41dc:	80 91 8b 09 	lds	r24, 0x098B
    41e0:	90 91 8c 09 	lds	r25, 0x098C
    41e4:	4a e0       	ldi	r20, 0x0A	; 10
    41e6:	62 ec       	ldi	r22, 0xC2	; 194
    41e8:	75 e0       	ldi	r23, 0x05	; 5
    41ea:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    41ee:	20 e0       	ldi	r18, 0x00	; 0
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	44 e6       	ldi	r20, 0x64	; 100
    41f4:	50 e0       	ldi	r21, 0x00	; 0
    41f6:	6d e8       	ldi	r22, 0x8D	; 141
    41f8:	7f e0       	ldi	r23, 0x0F	; 15
    41fa:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    41fe:	80 91 8d 09 	lds	r24, 0x098D
    4202:	90 91 8e 09 	lds	r25, 0x098E
    4206:	4a e0       	ldi	r20, 0x0A	; 10
    4208:	62 ec       	ldi	r22, 0xC2	; 194
    420a:	75 e0       	ldi	r23, 0x05	; 5
    420c:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    4210:	2a e0       	ldi	r18, 0x0A	; 10
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	44 e6       	ldi	r20, 0x64	; 100
    4216:	50 e0       	ldi	r21, 0x00	; 0
    4218:	6d e8       	ldi	r22, 0x8D	; 141
    421a:	7f e0       	ldi	r23, 0x0F	; 15
    421c:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    4220:	80 91 8f 09 	lds	r24, 0x098F
    4224:	90 91 90 09 	lds	r25, 0x0990
    4228:	4a e0       	ldi	r20, 0x0A	; 10
    422a:	62 ec       	ldi	r22, 0xC2	; 194
    422c:	75 e0       	ldi	r23, 0x05	; 5
    422e:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    4232:	24 e1       	ldi	r18, 0x14	; 20
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	44 e6       	ldi	r20, 0x64	; 100
    4238:	50 e0       	ldi	r21, 0x00	; 0
    423a:	6d e8       	ldi	r22, 0x8D	; 141
    423c:	7f e0       	ldi	r23, 0x0F	; 15
    423e:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    4242:	80 91 91 09 	lds	r24, 0x0991
    4246:	90 91 92 09 	lds	r25, 0x0992
    424a:	4a e0       	ldi	r20, 0x0A	; 10
    424c:	62 ec       	ldi	r22, 0xC2	; 194
    424e:	75 e0       	ldi	r23, 0x05	; 5
    4250:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    4254:	2e e1       	ldi	r18, 0x1E	; 30
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	44 e6       	ldi	r20, 0x64	; 100
    425a:	50 e0       	ldi	r21, 0x00	; 0
    425c:	6d e8       	ldi	r22, 0x8D	; 141
    425e:	7f e0       	ldi	r23, 0x0F	; 15
    4260:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		//itemp = Process_curve(GEN_CURVE_C, BIPOLAR, RCinputs[GEAR]);
		mugui_lcd_puts(itoa(itemp1,pBuffer,10),(const unsigned char*)Verdana8,100,40);
		mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana8,37,40);
#endif
		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    4264:	29 e3       	ldi	r18, 0x39	; 57
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	40 e0       	ldi	r20, 0x00	; 0
    426a:	50 e0       	ldi	r21, 0x00	; 0
    426c:	6f ef       	ldi	r22, 0xFF	; 255
    426e:	71 e0       	ldi	r23, 0x01	; 1
    4270:	8c e0       	ldi	r24, 0x0C	; 12
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    4278:	27 e3       	ldi	r18, 0x37	; 55
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	4e e6       	ldi	r20, 0x6E	; 110
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	6d e8       	ldi	r22, 0x8D	; 141
    4282:	7f e0       	ldi	r23, 0x0F	; 15
    4284:	8c e3       	ldi	r24, 0x3C	; 60
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	91 e0       	ldi	r25, 0x01	; 1
    4290:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
		clear_buffer(buffer);
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	91 e0       	ldi	r25, 0x01	; 1
    4298:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    429c:	04 cf       	rjmp	.-504    	; 0x40a6 <Display_rcinput+0x4>
	}
}
    429e:	08 95       	ret

000042a0 <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    42a0:	cf 92       	push	r12
    42a2:	df 92       	push	r13
    42a4:	ef 92       	push	r14
    42a6:	ff 92       	push	r15
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
	bool	first_time = true;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint32_t interval = 0;			// IMU interval	
	
	clear_buffer(buffer);
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	91 e0       	ldi	r25, 0x01	; 1
    42b2:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    42b6:	11 e0       	ldi	r17, 0x01	; 1
		mugui_lcd_puts(itoa(gyroADCalt[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
		mugui_lcd_puts(itoa(gyroADCalt[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,75,13);
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,75,23);
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,75,33);
		mugui_lcd_puts(itoa(angle[ROLL]/100,pBuffer,10),(const unsigned char*)Verdana8,107,13);
    42b8:	c4 e6       	ldi	r28, 0x64	; 100
    42ba:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t interval = 0;			// IMU interval	
	
	clear_buffer(buffer);
	
	// While BACK not pressed
	while(BUTTON1 != 0)
    42bc:	1f 9b       	sbis	0x03, 7	; 3
    42be:	79 c1       	rjmp	.+754    	; 0x45b2 <Display_sensors+0x312>
	{
		RxGetChannels();						// Check state of transition switch
    42c0:	0e 94 90 69 	call	0xd320	; 0xd320 <RxGetChannels>
		UpdateTransition();						// Update the transition variable
    42c4:	0e 94 80 6a 	call	0xd500	; 0xd500 <UpdateTransition>

		ReadGyros();
    42c8:	0e 94 8b 39 	call	0x7316	; 0x7316 <ReadGyros>
		ReadAcc();
    42cc:	0e 94 2d 18 	call	0x305a	; 0x305a <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    42d0:	0e 94 27 44 	call	0x884e	; 0x884e <TIM16_ReadTCNT1>

		// Reset Timer0 count
		TCNT0 = 0;
    42d4:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    42d6:	20 91 2f 05 	lds	r18, 0x052F
    42da:	30 91 30 05 	lds	r19, 0x0530
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    42de:	20 91 2f 05 	lds	r18, 0x052F
    42e2:	30 91 30 05 	lds	r19, 0x0530
    42e6:	6c 01       	movw	r12, r24
    42e8:	c2 1a       	sub	r12, r18
    42ea:	d3 0a       	sbc	r13, r19
		}
		
		interval = ticker_16; // uint16_t
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    42ec:	90 93 30 05 	sts	0x0530, r25
    42f0:	80 93 2f 05 	sts	0x052F, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    42f4:	80 91 01 09 	lds	r24, 0x0901
    42f8:	90 91 02 09 	lds	r25, 0x0902
    42fc:	e1 2c       	mov	r14, r1
    42fe:	f1 2c       	mov	r15, r1
    4300:	02 97       	sbiw	r24, 0x02	; 2
    4302:	88 f0       	brcs	.+34     	; 0x4326 <Display_sensors+0x86>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    4304:	80 91 01 09 	lds	r24, 0x0901
    4308:	90 91 02 09 	lds	r25, 0x0902
    430c:	a0 e0       	ldi	r26, 0x00	; 0
    430e:	b0 e0       	ldi	r27, 0x00	; 0
    4310:	2f e0       	ldi	r18, 0x0F	; 15
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	aa 1f       	adc	r26, r26
    4318:	bb 1f       	adc	r27, r27
    431a:	2a 95       	dec	r18
    431c:	d1 f7       	brne	.-12     	; 0x4312 <Display_sensors+0x72>
    431e:	c8 0e       	add	r12, r24
    4320:	d9 1e       	adc	r13, r25
    4322:	ea 1e       	adc	r14, r26
    4324:	fb 1e       	adc	r15, r27
		}

		TMR0_counter = 0;
    4326:	10 92 02 09 	sts	0x0902, r1
    432a:	10 92 01 09 	sts	0x0901, r1
		
		// Refresh accSmooth values and AccVert
		imu_update(interval);
    432e:	c7 01       	movw	r24, r14
    4330:	b6 01       	movw	r22, r12
    4332:	0e 94 79 3e 	call	0x7cf2	; 0x7cf2 <imu_update>

		// Update I-terms, average gyro values each loop
		Sensor_PID(interval);
    4336:	c7 01       	movw	r24, r14
    4338:	b6 01       	movw	r22, r12
    433a:	0e 94 46 63 	call	0xc68c	; 0xc68c <Sensor_PID>
		
		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	45 e2       	ldi	r20, 0x25	; 37
    4344:	50 e0       	ldi	r21, 0x00	; 0
    4346:	6d e8       	ldi	r22, 0x8D	; 141
    4348:	7f e0       	ldi	r23, 0x0F	; 15
    434a:	8a e1       	ldi	r24, 0x1A	; 26
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,72,0); 	// Acc
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	48 e4       	ldi	r20, 0x48	; 72
    4358:	50 e0       	ldi	r21, 0x00	; 0
    435a:	6d e8       	ldi	r22, 0x8D	; 141
    435c:	7f e0       	ldi	r23, 0x0F	; 15
    435e:	8e e1       	ldi	r24, 0x1E	; 30
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(31,(const unsigned char*)Verdana8,107,0); 	// IMU
    4366:	20 e0       	ldi	r18, 0x00	; 0
    4368:	30 e0       	ldi	r19, 0x00	; 0
    436a:	4b e6       	ldi	r20, 0x6B	; 107
    436c:	50 e0       	ldi	r21, 0x00	; 0
    436e:	6d e8       	ldi	r22, 0x8D	; 141
    4370:	7f e0       	ldi	r23, 0x0F	; 15
    4372:	8f e1       	ldi	r24, 0x1F	; 31
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    437a:	2d e0       	ldi	r18, 0x0D	; 13
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	45 e0       	ldi	r20, 0x05	; 5
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	6d e8       	ldi	r22, 0x8D	; 141
    4384:	7f e0       	ldi	r23, 0x0F	; 15
    4386:	8b e1       	ldi	r24, 0x1B	; 27
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    438e:	27 e1       	ldi	r18, 0x17	; 23
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	45 e0       	ldi	r20, 0x05	; 5
    4394:	50 e0       	ldi	r21, 0x00	; 0
    4396:	6d e8       	ldi	r22, 0x8D	; 141
    4398:	7f e0       	ldi	r23, 0x0F	; 15
    439a:	8c e1       	ldi	r24, 0x1C	; 28
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    43a2:	21 e2       	ldi	r18, 0x21	; 33
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	45 e0       	ldi	r20, 0x05	; 5
    43a8:	50 e0       	ldi	r21, 0x00	; 0
    43aa:	6d e8       	ldi	r22, 0x8D	; 141
    43ac:	7f e0       	ldi	r23, 0x0F	; 15
    43ae:	8d e1       	ldi	r24, 0x1D	; 29
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    43b6:	4a e0       	ldi	r20, 0x0A	; 10
    43b8:	62 ec       	ldi	r22, 0xC2	; 194
    43ba:	75 e0       	ldi	r23, 0x05	; 5
    43bc:	80 91 ed 05 	lds	r24, 0x05ED
    43c0:	90 91 ee 05 	lds	r25, 0x05EE
    43c4:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADCalt[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    43c8:	2d e0       	ldi	r18, 0x0D	; 13
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	48 e2       	ldi	r20, 0x28	; 40
    43ce:	50 e0       	ldi	r21, 0x00	; 0
    43d0:	6d e8       	ldi	r22, 0x8D	; 141
    43d2:	7f e0       	ldi	r23, 0x0F	; 15
    43d4:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    43d8:	4a e0       	ldi	r20, 0x0A	; 10
    43da:	62 ec       	ldi	r22, 0xC2	; 194
    43dc:	75 e0       	ldi	r23, 0x05	; 5
    43de:	80 91 ef 05 	lds	r24, 0x05EF
    43e2:	90 91 f0 05 	lds	r25, 0x05F0
    43e6:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADCalt[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    43ea:	27 e1       	ldi	r18, 0x17	; 23
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	48 e2       	ldi	r20, 0x28	; 40
    43f0:	50 e0       	ldi	r21, 0x00	; 0
    43f2:	6d e8       	ldi	r22, 0x8D	; 141
    43f4:	7f e0       	ldi	r23, 0x0F	; 15
    43f6:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    43fa:	4a e0       	ldi	r20, 0x0A	; 10
    43fc:	62 ec       	ldi	r22, 0xC2	; 194
    43fe:	75 e0       	ldi	r23, 0x05	; 5
    4400:	80 91 f1 05 	lds	r24, 0x05F1
    4404:	90 91 f2 05 	lds	r25, 0x05F2
    4408:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADCalt[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    440c:	21 e2       	ldi	r18, 0x21	; 33
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	48 e2       	ldi	r20, 0x28	; 40
    4412:	50 e0       	ldi	r21, 0x00	; 0
    4414:	6d e8       	ldi	r22, 0x8D	; 141
    4416:	7f e0       	ldi	r23, 0x0F	; 15
    4418:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    441c:	4a e0       	ldi	r20, 0x0A	; 10
    441e:	62 ec       	ldi	r22, 0xC2	; 194
    4420:	75 e0       	ldi	r23, 0x05	; 5
    4422:	80 91 70 05 	lds	r24, 0x0570
    4426:	90 91 71 05 	lds	r25, 0x0571
    442a:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,75,13);
    442e:	2d e0       	ldi	r18, 0x0D	; 13
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	4b e4       	ldi	r20, 0x4B	; 75
    4434:	50 e0       	ldi	r21, 0x00	; 0
    4436:	6d e8       	ldi	r22, 0x8D	; 141
    4438:	7f e0       	ldi	r23, 0x0F	; 15
    443a:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    443e:	4a e0       	ldi	r20, 0x0A	; 10
    4440:	62 ec       	ldi	r22, 0xC2	; 194
    4442:	75 e0       	ldi	r23, 0x05	; 5
    4444:	80 91 72 05 	lds	r24, 0x0572
    4448:	90 91 73 05 	lds	r25, 0x0573
    444c:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,75,23);
    4450:	27 e1       	ldi	r18, 0x17	; 23
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	4b e4       	ldi	r20, 0x4B	; 75
    4456:	50 e0       	ldi	r21, 0x00	; 0
    4458:	6d e8       	ldi	r22, 0x8D	; 141
    445a:	7f e0       	ldi	r23, 0x0F	; 15
    445c:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    4460:	4a e0       	ldi	r20, 0x0A	; 10
    4462:	62 ec       	ldi	r22, 0xC2	; 194
    4464:	75 e0       	ldi	r23, 0x05	; 5
    4466:	80 91 74 05 	lds	r24, 0x0574
    446a:	90 91 75 05 	lds	r25, 0x0575
    446e:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,75,33);
    4472:	21 e2       	ldi	r18, 0x21	; 33
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	4b e4       	ldi	r20, 0x4B	; 75
    4478:	50 e0       	ldi	r21, 0x00	; 0
    447a:	6d e8       	ldi	r22, 0x8D	; 141
    447c:	7f e0       	ldi	r23, 0x0F	; 15
    447e:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(angle[ROLL]/100,pBuffer,10),(const unsigned char*)Verdana8,107,13);
    4482:	80 91 19 06 	lds	r24, 0x0619
    4486:	90 91 1a 06 	lds	r25, 0x061A
    448a:	be 01       	movw	r22, r28
    448c:	0e 94 73 6f 	call	0xdee6	; 0xdee6 <__divmodhi4>
    4490:	cb 01       	movw	r24, r22
    4492:	4a e0       	ldi	r20, 0x0A	; 10
    4494:	62 ec       	ldi	r22, 0xC2	; 194
    4496:	75 e0       	ldi	r23, 0x05	; 5
    4498:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    449c:	2d e0       	ldi	r18, 0x0D	; 13
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	4b e6       	ldi	r20, 0x6B	; 107
    44a2:	50 e0       	ldi	r21, 0x00	; 0
    44a4:	6d e8       	ldi	r22, 0x8D	; 141
    44a6:	7f e0       	ldi	r23, 0x0F	; 15
    44a8:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(angle[PITCH]/100,pBuffer,10),(const unsigned char*)Verdana8,107,23);
    44ac:	80 91 1b 06 	lds	r24, 0x061B
    44b0:	90 91 1c 06 	lds	r25, 0x061C
    44b4:	be 01       	movw	r22, r28
    44b6:	0e 94 73 6f 	call	0xdee6	; 0xdee6 <__divmodhi4>
    44ba:	cb 01       	movw	r24, r22
    44bc:	4a e0       	ldi	r20, 0x0A	; 10
    44be:	62 ec       	ldi	r22, 0xC2	; 194
    44c0:	75 e0       	ldi	r23, 0x05	; 5
    44c2:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    44c6:	27 e1       	ldi	r18, 0x17	; 23
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	4b e6       	ldi	r20, 0x6B	; 107
    44cc:	50 e0       	ldi	r21, 0x00	; 0
    44ce:	6d e8       	ldi	r22, 0x8D	; 141
    44d0:	7f e0       	ldi	r23, 0x0F	; 15
    44d2:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		
		// AccVertf
		LCD_Display_Text(229,(const unsigned char*)Verdana8,5,45);	// AccVert
    44d6:	2d e2       	ldi	r18, 0x2D	; 45
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	45 e0       	ldi	r20, 0x05	; 5
    44dc:	50 e0       	ldi	r21, 0x00	; 0
    44de:	6d e8       	ldi	r22, 0x8D	; 141
    44e0:	7f e0       	ldi	r23, 0x0F	; 15
    44e2:	85 ee       	ldi	r24, 0xE5	; 229
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		mugui_lcd_puts(itoa((int16_t)accVertf,pBuffer,10),(const unsigned char*)Verdana8,40,45);
    44ea:	60 91 26 05 	lds	r22, 0x0526
    44ee:	70 91 27 05 	lds	r23, 0x0527
    44f2:	80 91 28 05 	lds	r24, 0x0528
    44f6:	90 91 29 05 	lds	r25, 0x0529
    44fa:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	4a e0       	ldi	r20, 0x0A	; 10
    4504:	62 ec       	ldi	r22, 0xC2	; 194
    4506:	75 e0       	ldi	r23, 0x05	; 5
    4508:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    450c:	2d e2       	ldi	r18, 0x2D	; 45
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	48 e2       	ldi	r20, 0x28	; 40
    4512:	50 e0       	ldi	r21, 0x00	; 0
    4514:	6d e8       	ldi	r22, 0x8D	; 141
    4516:	7f e0       	ldi	r23, 0x0F	; 15
    4518:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    451c:	29 e3       	ldi	r18, 0x39	; 57
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	40 e0       	ldi	r20, 0x00	; 0
    4522:	50 e0       	ldi	r21, 0x00	; 0
    4524:	6f ef       	ldi	r22, 0xFF	; 255
    4526:	71 e0       	ldi	r23, 0x01	; 1
    4528:	8c e0       	ldi	r24, 0x0C	; 12
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    4530:	27 e3       	ldi	r18, 0x37	; 55
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	4c e6       	ldi	r20, 0x6C	; 108
    4536:	50 e0       	ldi	r21, 0x00	; 0
    4538:	6d e8       	ldi	r22, 0x8D	; 141
    453a:	7f e0       	ldi	r23, 0x0F	; 15
    453c:	8c e3       	ldi	r24, 0x3C	; 60
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    4544:	27 e3       	ldi	r18, 0x37	; 55
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	4b e4       	ldi	r20, 0x4B	; 75
    454a:	50 e0       	ldi	r21, 0x00	; 0
    454c:	6d e8       	ldi	r22, 0x8D	; 141
    454e:	7f e0       	ldi	r23, 0x0F	; 15
    4550:	89 e1       	ldi	r24, 0x19	; 25
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	91 e0       	ldi	r25, 0x01	; 1
    455c:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
		clear_buffer(buffer);
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	91 e0       	ldi	r25, 0x01	; 1
    4564:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
	
		if (first_time)
    4568:	11 11       	cpse	r17, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    456a:	0e 94 00 54 	call	0xa800	; 0xa800 <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    456e:	1c 99       	sbic	0x03, 4	; 3
    4570:	10 c0       	rjmp	.+32     	; 0x4592 <Display_sensors+0x2f2>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    4572:	0e 94 00 54 	call	0xa800	; 0xa800 <Wait_BUTTON4>
    4576:	2f e3       	ldi	r18, 0x3F	; 63
    4578:	82 e4       	ldi	r24, 0x42	; 66
    457a:	9f e0       	ldi	r25, 0x0F	; 15
    457c:	21 50       	subi	r18, 0x01	; 1
    457e:	80 40       	sbci	r24, 0x00	; 0
    4580:	90 40       	sbci	r25, 0x00	; 0
    4582:	e1 f7       	brne	.-8      	; 0x457c <Display_sensors+0x2dc>
    4584:	00 c0       	rjmp	.+0      	; 0x4586 <Display_sensors+0x2e6>
    4586:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    4588:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	0e 94 fe 19 	call	0x33fc	; 0x33fc <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    4592:	1d 99       	sbic	0x03, 5	; 3
    4594:	0c c0       	rjmp	.+24     	; 0x45ae <Display_sensors+0x30e>
    4596:	2f e3       	ldi	r18, 0x3F	; 63
    4598:	82 e4       	ldi	r24, 0x42	; 66
    459a:	9f e0       	ldi	r25, 0x0F	; 15
    459c:	21 50       	subi	r18, 0x01	; 1
    459e:	80 40       	sbci	r24, 0x00	; 0
    45a0:	90 40       	sbci	r25, 0x00	; 0
    45a2:	e1 f7       	brne	.-8      	; 0x459c <Display_sensors+0x2fc>
    45a4:	00 c0       	rjmp	.+0      	; 0x45a6 <Display_sensors+0x306>
    45a6:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    45a8:	81 e0       	ldi	r24, 0x01	; 1
    45aa:	0e 94 fe 19 	call	0x33fc	; 0x33fc <CalibrateAcc>
    45ae:	10 e0       	ldi	r17, 0x00	; 0
    45b0:	85 ce       	rjmp	.-758    	; 0x42bc <Display_sensors+0x1c>
		}
	}
}
    45b2:	df 91       	pop	r29
    45b4:	cf 91       	pop	r28
    45b6:	1f 91       	pop	r17
    45b8:	ff 90       	pop	r15
    45ba:	ef 90       	pop	r14
    45bc:	df 90       	pop	r13
    45be:	cf 90       	pop	r12
    45c0:	08 95       	ret

000045c2 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    45c2:	bf 92       	push	r11
    45c4:	cf 92       	push	r12
    45c6:	df 92       	push	r13
    45c8:	ef 92       	push	r14
    45ca:	ff 92       	push	r15
    45cc:	0f 93       	push	r16
    45ce:	1f 93       	push	r17
    45d0:	cf 93       	push	r28
    45d2:	df 93       	push	r29
    45d4:	00 d0       	rcall	.+0      	; 0x45d6 <Display_status+0x14>
    45d6:	00 d0       	rcall	.+0      	; 0x45d8 <Display_status+0x16>
    45d8:	cd b7       	in	r28, 0x3d	; 61
    45da:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    45dc:	80 e0       	ldi	r24, 0x00	; 0
    45de:	91 e0       	ldi	r25, 0x01	; 1
    45e0:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
	//mugui_lcd_puts(itoa(((void*)&Config.FlightMode[P1].Roll_P_mult - (void*)&Config.setup),pBuffer,10),(const unsigned char*)Verdana8,0,0); //53 - OK
	//mugui_lcd_puts(itoa(((void*)&Config.Raw_I_Limits[P1][0] - (void*)&Config.setup),pBuffer,10),(const unsigned char*)Verdana8,0,0); // 93 - OK
	//mugui_lcd_puts(itoa(((void*)&Config.Raw_I_Constrain[P1][0] - (void*)&Config.setup),pBuffer,10),(const unsigned char*)Verdana8,0,0); // 125 - NG (not 121) out by 4

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    45e4:	20 e0       	ldi	r18, 0x00	; 0
    45e6:	30 e0       	ldi	r19, 0x00	; 0
    45e8:	40 e0       	ldi	r20, 0x00	; 0
    45ea:	50 e0       	ldi	r21, 0x00	; 0
    45ec:	6d e8       	ldi	r22, 0x8D	; 141
    45ee:	7f e0       	ldi	r23, 0x0F	; 15
    45f0:	88 e0       	ldi	r24, 0x08	; 8
    45f2:	91 e0       	ldi	r25, 0x01	; 1
    45f4:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    45f8:	2c e0       	ldi	r18, 0x0C	; 12
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	40 e0       	ldi	r20, 0x00	; 0
    45fe:	50 e0       	ldi	r21, 0x00	; 0
    4600:	6d e8       	ldi	r22, 0x8D	; 141
    4602:	7f e0       	ldi	r23, 0x0F	; 15
    4604:	8a e0       	ldi	r24, 0x0A	; 10
    4606:	91 e0       	ldi	r25, 0x01	; 1
    4608:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    460c:	28 e1       	ldi	r18, 0x18	; 24
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	40 e0       	ldi	r20, 0x00	; 0
    4612:	50 e0       	ldi	r21, 0x00	; 0
    4614:	6d e8       	ldi	r22, 0x8D	; 141
    4616:	7f e0       	ldi	r23, 0x0F	; 15
    4618:	8b e0       	ldi	r24, 0x0B	; 11
    461a:	91 e0       	ldi	r25, 0x01	; 1
    461c:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    4620:	28 e1       	ldi	r18, 0x18	; 24
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	48 e5       	ldi	r20, 0x58	; 88
    4626:	50 e0       	ldi	r21, 0x00	; 0
    4628:	6d e8       	ldi	r22, 0x8D	; 141
    462a:	7f e0       	ldi	r23, 0x0F	; 15
    462c:	87 e1       	ldi	r24, 0x17	; 23
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    4634:	2b e3       	ldi	r18, 0x3B	; 59
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	40 e0       	ldi	r20, 0x00	; 0
    463a:	50 e0       	ldi	r21, 0x00	; 0
    463c:	6f ef       	ldi	r22, 0xFF	; 255
    463e:	71 e0       	ldi	r23, 0x01	; 1
    4640:	89 e0       	ldi	r24, 0x09	; 9
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    4648:	27 e3       	ldi	r18, 0x37	; 55
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	4a e0       	ldi	r20, 0x0A	; 10
    464e:	50 e0       	ldi	r21, 0x00	; 0
    4650:	6d e8       	ldi	r22, 0x8D	; 141
    4652:	7f e0       	ldi	r23, 0x0F	; 15
    4654:	8e e0       	ldi	r24, 0x0E	; 14
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (396 + Config.RxMode), 45, 12);		// Rx mode
    465c:	40 91 62 06 	lds	r20, 0x0662
    4660:	04 2e       	mov	r0, r20
    4662:	00 0c       	add	r0, r0
    4664:	55 0b       	sbc	r21, r21
    4666:	44 57       	subi	r20, 0x74	; 116
    4668:	5e 4f       	sbci	r21, 0xFE	; 254
    466a:	0c e0       	ldi	r16, 0x0C	; 12
    466c:	2d e2       	ldi	r18, 0x2D	; 45
    466e:	61 e0       	ldi	r22, 0x01	; 1
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	0e 94 a0 4a 	call	0x9540	; 0x9540 <print_menu_text>
    4678:	4a e0       	ldi	r20, 0x0A	; 10
    467a:	62 ec       	ldi	r22, 0xC2	; 194
    467c:	75 e0       	ldi	r23, 0x05	; 5
    467e:	80 91 38 05 	lds	r24, 0x0538
    4682:	90 91 39 05 	lds	r25, 0x0539
    4686:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    468a:	28 e1       	ldi	r18, 0x18	; 24
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	4e e6       	ldi	r20, 0x6E	; 110
    4690:	50 e0       	ldi	r21, 0x00	; 0
    4692:	6d e8       	ldi	r22, 0x8D	; 141
    4694:	7f e0       	ldi	r23, 0x0F	; 15
    4696:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    469a:	80 91 62 06 	lds	r24, 0x0662
    469e:	81 30       	cpi	r24, 0x01	; 1
    46a0:	d9 f4       	brne	.+54     	; 0x46d8 <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    46a2:	2c e0       	ldi	r18, 0x0C	; 12
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	4d e4       	ldi	r20, 0x4D	; 77
    46a8:	50 e0       	ldi	r21, 0x00	; 0
    46aa:	6d e8       	ldi	r22, 0x8D	; 141
    46ac:	7f e0       	ldi	r23, 0x0F	; 15
    46ae:	88 e1       	ldi	r24, 0x18	; 24
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    46b6:	80 91 31 05 	lds	r24, 0x0531
    46ba:	90 91 32 05 	lds	r25, 0x0532
    46be:	4a e0       	ldi	r20, 0x0A	; 10
    46c0:	62 ec       	ldi	r22, 0xC2	; 194
    46c2:	75 e0       	ldi	r23, 0x05	; 5
    46c4:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    46c8:	2c e0       	ldi	r18, 0x0C	; 12
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	4e e6       	ldi	r20, 0x6E	; 110
    46ce:	50 e0       	ldi	r21, 0x00	; 0
    46d0:	6d e8       	ldi	r22, 0x8D	; 141
    46d2:	7f e0       	ldi	r23, 0x0F	; 15
    46d4:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    46d8:	20 91 38 05 	lds	r18, 0x0538
    46dc:	30 91 39 05 	lds	r19, 0x0539
    46e0:	12 16       	cp	r1, r18
    46e2:	13 06       	cpc	r1, r19
    46e4:	4c f0       	brlt	.+18     	; 0x46f8 <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    46e6:	28 e1       	ldi	r18, 0x18	; 24
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	4d e2       	ldi	r20, 0x2D	; 45
    46ec:	50 e0       	ldi	r21, 0x00	; 0
    46ee:	6d e8       	ldi	r22, 0x8D	; 141
    46f0:	7f e0       	ldi	r23, 0x0F	; 15
    46f2:	80 e3       	ldi	r24, 0x30	; 48
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	31 c0       	rjmp	.+98     	; 0x475a <Display_status+0x198>
	}
	else if (transition >= 100)
    46f8:	24 36       	cpi	r18, 0x64	; 100
    46fa:	31 05       	cpc	r19, r1
    46fc:	4c f0       	brlt	.+18     	; 0x4710 <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    46fe:	28 e1       	ldi	r18, 0x18	; 24
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	4d e2       	ldi	r20, 0x2D	; 45
    4704:	50 e0       	ldi	r21, 0x00	; 0
    4706:	6d e8       	ldi	r22, 0x8D	; 141
    4708:	7f e0       	ldi	r23, 0x0F	; 15
    470a:	82 e3       	ldi	r24, 0x32	; 50
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	25 c0       	rjmp	.+74     	; 0x475a <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    4710:	80 91 6a 06 	lds	r24, 0x066A
    4714:	08 2e       	mov	r0, r24
    4716:	00 0c       	add	r0, r0
    4718:	99 0b       	sbc	r25, r25
    471a:	28 17       	cp	r18, r24
    471c:	39 07       	cpc	r19, r25
    471e:	49 f4       	brne	.+18     	; 0x4732 <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    4720:	28 e1       	ldi	r18, 0x18	; 24
    4722:	30 e0       	ldi	r19, 0x00	; 0
    4724:	4d e2       	ldi	r20, 0x2D	; 45
    4726:	50 e0       	ldi	r21, 0x00	; 0
    4728:	6d e8       	ldi	r22, 0x8D	; 141
    472a:	7f e0       	ldi	r23, 0x0F	; 15
    472c:	81 e3       	ldi	r24, 0x31	; 49
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	14 c0       	rjmp	.+40     	; 0x475a <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    4732:	28 17       	cp	r18, r24
    4734:	39 07       	cpc	r19, r25
    4736:	4c f4       	brge	.+18     	; 0x474a <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    4738:	28 e1       	ldi	r18, 0x18	; 24
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	4d e2       	ldi	r20, 0x2D	; 45
    473e:	50 e0       	ldi	r21, 0x00	; 0
    4740:	6d e8       	ldi	r22, 0x8D	; 141
    4742:	7f e0       	ldi	r23, 0x0F	; 15
    4744:	83 e3       	ldi	r24, 0x33	; 51
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	08 c0       	rjmp	.+16     	; 0x475a <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    474a:	28 e1       	ldi	r18, 0x18	; 24
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	4d e2       	ldi	r20, 0x2D	; 45
    4750:	50 e0       	ldi	r21, 0x00	; 0
    4752:	6d e8       	ldi	r22, 0x8D	; 141
    4754:	7f e0       	ldi	r23, 0x0F	; 15
    4756:	84 e3       	ldi	r24, 0x34	; 52
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
	}

	// Don't display battery text if there are error messages
	if (General_error == 0)
    475e:	80 91 35 05 	lds	r24, 0x0535
    4762:	81 11       	cpse	r24, r1
    4764:	ca c0       	rjmp	.+404    	; 0x48fa <Display_status+0x338>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(289,(const unsigned char*)Verdana8,0,36); 	// Battery
    4766:	24 e2       	ldi	r18, 0x24	; 36
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	40 e0       	ldi	r20, 0x00	; 0
    476c:	50 e0       	ldi	r21, 0x00	; 0
    476e:	6d e8       	ldi	r22, 0x8D	; 141
    4770:	7f e0       	ldi	r23, 0x0F	; 15
    4772:	81 e2       	ldi	r24, 0x21	; 33
    4774:	91 e0       	ldi	r25, 0x01	; 1
    4776:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

		vbat_temp = GetVbat();
    477a:	0e 94 02 6d 	call	0xda04	; 0xda04 <GetVbat>
    477e:	7c 01       	movw	r14, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    4780:	64 e6       	ldi	r22, 0x64	; 100
    4782:	70 e0       	ldi	r23, 0x00	; 0
    4784:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <__udivmodhi4>
    4788:	8b 01       	movw	r16, r22
    478a:	4a e0       	ldi	r20, 0x0A	; 10
    478c:	62 ec       	ldi	r22, 0xC2	; 194
    478e:	75 e0       	ldi	r23, 0x05	; 5
    4790:	c8 01       	movw	r24, r16
    4792:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    4796:	ae 01       	movw	r20, r28
    4798:	4f 5f       	subi	r20, 0xFF	; 255
    479a:	5f 4f       	sbci	r21, 0xFF	; 255
    479c:	6d e8       	ldi	r22, 0x8D	; 141
    479e:	7f e0       	ldi	r23, 0x0F	; 15
    47a0:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
    47a4:	4a e0       	ldi	r20, 0x0A	; 10
    47a6:	62 ec       	ldi	r22, 0xC2	; 194
    47a8:	75 e0       	ldi	r23, 0x05	; 5
    47aa:	c8 01       	movw	r24, r16
    47ac:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    47b0:	24 e2       	ldi	r18, 0x24	; 36
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	4d e2       	ldi	r20, 0x2D	; 45
    47b6:	50 e0       	ldi	r21, 0x00	; 0
    47b8:	6d e8       	ldi	r22, 0x8D	; 141
    47ba:	7f e0       	ldi	r23, 0x0F	; 15
    47bc:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    47c0:	2c e9       	ldi	r18, 0x9C	; 156
    47c2:	20 03       	mulsu	r18, r16
    47c4:	60 01       	movw	r12, r0
    47c6:	21 9f       	mul	r18, r17
    47c8:	d0 0c       	add	r13, r0
    47ca:	11 24       	eor	r1, r1
    47cc:	ce 0c       	add	r12, r14
    47ce:	df 1c       	adc	r13, r15

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    47d0:	09 81       	ldd	r16, Y+1	; 0x01
    47d2:	00 2e       	mov	r0, r16
    47d4:	00 0c       	add	r0, r0
    47d6:	11 0b       	sbc	r17, r17
    47d8:	03 5d       	subi	r16, 0xD3	; 211
    47da:	1f 4f       	sbci	r17, 0xFF	; 255
    47dc:	24 e2       	ldi	r18, 0x24	; 36
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	a8 01       	movw	r20, r16
    47e2:	6d e8       	ldi	r22, 0x8D	; 141
    47e4:	7f e0       	ldi	r23, 0x0F	; 15
    47e6:	8c e0       	ldi	r24, 0x0C	; 12
    47e8:	91 e0       	ldi	r25, 0x01	; 1
    47ea:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    47ee:	ae 01       	movw	r20, r28
    47f0:	4f 5f       	subi	r20, 0xFF	; 255
    47f2:	5f 4f       	sbci	r21, 0xFF	; 255
    47f4:	6d e8       	ldi	r22, 0x8D	; 141
    47f6:	7f e0       	ldi	r23, 0x0F	; 15
    47f8:	8b e0       	ldi	r24, 0x0B	; 11
    47fa:	95 e0       	ldi	r25, 0x05	; 5
    47fc:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
		pos3 = size.x;
    4800:	e9 80       	ldd	r14, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    4802:	ae 01       	movw	r20, r28
    4804:	4f 5f       	subi	r20, 0xFF	; 255
    4806:	5f 4f       	sbci	r21, 0xFF	; 255
    4808:	6d e8       	ldi	r22, 0x8D	; 141
    480a:	7f e0       	ldi	r23, 0x0F	; 15
    480c:	8d e0       	ldi	r24, 0x0D	; 13
    480e:	95 e0       	ldi	r25, 0x05	; 5
    4810:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
		pos2 = size.x;
    4814:	b9 80       	ldd	r11, Y+1	; 0x01
    4816:	0e 2c       	mov	r0, r14
    4818:	00 0c       	add	r0, r0
    481a:	ff 08       	sbc	r15, r15

		if (vbat_temp >= 10)
    481c:	8a e0       	ldi	r24, 0x0A	; 10
    481e:	c8 16       	cp	r12, r24
    4820:	d1 04       	cpc	r13, r1
    4822:	38 f0       	brcs	.+14     	; 0x4832 <Display_status+0x270>
    4824:	4a e0       	ldi	r20, 0x0A	; 10
    4826:	62 ec       	ldi	r22, 0xC2	; 194
    4828:	75 e0       	ldi	r23, 0x05	; 5
    482a:	c6 01       	movw	r24, r12
    482c:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    4830:	15 c0       	rjmp	.+42     	; 0x485c <Display_status+0x29a>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    4832:	a8 01       	movw	r20, r16
    4834:	4e 0d       	add	r20, r14
    4836:	5f 1d       	adc	r21, r15
    4838:	24 e2       	ldi	r18, 0x24	; 36
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	6d e8       	ldi	r22, 0x8D	; 141
    483e:	7f e0       	ldi	r23, 0x0F	; 15
    4840:	8d e0       	ldi	r24, 0x0D	; 13
    4842:	91 e0       	ldi	r25, 0x01	; 1
    4844:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    4848:	4a e0       	ldi	r20, 0x0A	; 10
    484a:	62 ec       	ldi	r22, 0xC2	; 194
    484c:	75 e0       	ldi	r23, 0x05	; 5
    484e:	c6 01       	movw	r24, r12
    4850:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    4854:	0b 0d       	add	r16, r11
    4856:	11 1d       	adc	r17, r1
    4858:	b7 fc       	sbrc	r11, 7
    485a:	1a 95       	dec	r17
    485c:	a8 01       	movw	r20, r16
    485e:	4e 0d       	add	r20, r14
    4860:	5f 1d       	adc	r21, r15
    4862:	24 e2       	ldi	r18, 0x24	; 36
    4864:	30 e0       	ldi	r19, 0x00	; 0
    4866:	6d e8       	ldi	r22, 0x8D	; 141
    4868:	7f e0       	ldi	r23, 0x0F	; 15
    486a:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		}
	
		// Display vibration info is set to "ON"
		if (Config.Vibration == ON)
    486e:	80 91 6c 06 	lds	r24, 0x066C
    4872:	81 30       	cpi	r24, 0x01	; 1
    4874:	09 f0       	breq	.+2      	; 0x4878 <Display_status+0x2b6>
    4876:	94 c0       	rjmp	.+296    	; 0x49a0 <Display_status+0x3de>
		{
			// Create message box
			fillrect(buffer, 29,11, 70, 42, 0);		// White box
    4878:	e1 2c       	mov	r14, r1
    487a:	0a e2       	ldi	r16, 0x2A	; 42
    487c:	26 e4       	ldi	r18, 0x46	; 70
    487e:	4b e0       	ldi	r20, 0x0B	; 11
    4880:	6d e1       	ldi	r22, 0x1D	; 29
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	91 e0       	ldi	r25, 0x01	; 1
    4886:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <fillrect>
			drawrect(buffer, 29,11, 70, 42, 1); 	// Outline
    488a:	ee 24       	eor	r14, r14
    488c:	e3 94       	inc	r14
    488e:	26 e4       	ldi	r18, 0x46	; 70
    4890:	4b e0       	ldi	r20, 0x0B	; 11
    4892:	6d e1       	ldi	r22, 0x1D	; 29
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	91 e0       	ldi	r25, 0x01	; 1
    4898:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <drawrect>

			// Display vibration data
			temp = (int16_t)GyroAvgNoise;
    489c:	60 91 7d 09 	lds	r22, 0x097D
    48a0:	70 91 7e 09 	lds	r23, 0x097E
    48a4:	80 91 7f 09 	lds	r24, 0x097F
    48a8:	90 91 80 09 	lds	r25, 0x0980
    48ac:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    48b0:	6b 01       	movw	r12, r22
    48b2:	7c 01       	movw	r14, r24
    48b4:	4a e0       	ldi	r20, 0x0A	; 10
    48b6:	62 ec       	ldi	r22, 0xC2	; 194
    48b8:	75 e0       	ldi	r23, 0x05	; 5
    48ba:	c6 01       	movw	r24, r12
    48bc:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
			
			// Work out pixel size of number to display
			mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana22, &size);
    48c0:	ae 01       	movw	r20, r28
    48c2:	4f 5f       	subi	r20, 0xFF	; 255
    48c4:	5f 4f       	sbci	r21, 0xFF	; 255
    48c6:	69 e6       	ldi	r22, 0x69	; 105
    48c8:	72 e0       	ldi	r23, 0x02	; 2
    48ca:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
			
			// Center the number in the box automatically
			mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana22,64 - (size.x / 2),20);
    48ce:	29 81       	ldd	r18, Y+1	; 0x01
    48d0:	3a 81       	ldd	r19, Y+2	; 0x02
    48d2:	36 95       	lsr	r19
    48d4:	27 95       	ror	r18
    48d6:	00 e4       	ldi	r16, 0x40	; 64
    48d8:	10 e0       	ldi	r17, 0x00	; 0
    48da:	02 1b       	sub	r16, r18
    48dc:	13 0b       	sbc	r17, r19
    48de:	4a e0       	ldi	r20, 0x0A	; 10
    48e0:	62 ec       	ldi	r22, 0xC2	; 194
    48e2:	75 e0       	ldi	r23, 0x05	; 5
    48e4:	c6 01       	movw	r24, r12
    48e6:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    48ea:	24 e1       	ldi	r18, 0x14	; 20
    48ec:	30 e0       	ldi	r19, 0x00	; 0
    48ee:	a8 01       	movw	r20, r16
    48f0:	69 e6       	ldi	r22, 0x69	; 105
    48f2:	72 e0       	ldi	r23, 0x02	; 2
    48f4:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    48f8:	53 c0       	rjmp	.+166    	; 0x49a0 <Display_status+0x3de>
	
	// Display error messages
	else
	{
		// Prioritise error from top to bottom
		if(General_error & (1 << LVA_ALARM))
    48fa:	80 91 35 05 	lds	r24, 0x0535
    48fe:	83 ff       	sbrs	r24, 3
    4900:	13 c0       	rjmp	.+38     	; 0x4928 <Display_status+0x366>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    4902:	25 e2       	ldi	r18, 0x25	; 37
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	4f e0       	ldi	r20, 0x0F	; 15
    4908:	50 e0       	ldi	r21, 0x00	; 0
    490a:	6f ed       	ldi	r22, 0xDF	; 223
    490c:	74 e0       	ldi	r23, 0x04	; 4
    490e:	86 e8       	ldi	r24, 0x86	; 134
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    4916:	25 e2       	ldi	r18, 0x25	; 37
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	4f e4       	ldi	r20, 0x4F	; 79
    491c:	50 e0       	ldi	r21, 0x00	; 0
    491e:	6f ed       	ldi	r22, 0xDF	; 223
    4920:	74 e0       	ldi	r23, 0x04	; 4
    4922:	8f e0       	ldi	r24, 0x0F	; 15
    4924:	91 e0       	ldi	r25, 0x01	; 1
    4926:	3a c0       	rjmp	.+116    	; 0x499c <Display_status+0x3da>
		}
		else if(General_error & (1 << NO_SIGNAL))
    4928:	80 91 35 05 	lds	r24, 0x0535
    492c:	81 ff       	sbrs	r24, 1
    492e:	13 c0       	rjmp	.+38     	; 0x4956 <Display_status+0x394>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    4930:	25 e2       	ldi	r18, 0x25	; 37
    4932:	30 e0       	ldi	r19, 0x00	; 0
    4934:	4e e1       	ldi	r20, 0x1E	; 30
    4936:	50 e0       	ldi	r21, 0x00	; 0
    4938:	6f ed       	ldi	r22, 0xDF	; 223
    493a:	74 e0       	ldi	r23, 0x04	; 4
    493c:	8b e4       	ldi	r24, 0x4B	; 75
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    4944:	25 e2       	ldi	r18, 0x25	; 37
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	47 e3       	ldi	r20, 0x37	; 55
    494a:	50 e0       	ldi	r21, 0x00	; 0
    494c:	6f ed       	ldi	r22, 0xDF	; 223
    494e:	74 e0       	ldi	r23, 0x04	; 4
    4950:	80 e1       	ldi	r24, 0x10	; 16
    4952:	91 e0       	ldi	r25, 0x01	; 1
    4954:	23 c0       	rjmp	.+70     	; 0x499c <Display_status+0x3da>
		}
		else if(General_error & (1 << THROTTLE_HIGH))
    4956:	80 91 35 05 	lds	r24, 0x0535
    495a:	80 ff       	sbrs	r24, 0
    495c:	13 c0       	rjmp	.+38     	; 0x4984 <Display_status+0x3c2>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    495e:	25 e2       	ldi	r18, 0x25	; 37
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	4b e0       	ldi	r20, 0x0B	; 11
    4964:	50 e0       	ldi	r21, 0x00	; 0
    4966:	6f ed       	ldi	r22, 0xDF	; 223
    4968:	74 e0       	ldi	r23, 0x04	; 4
    496a:	89 e6       	ldi	r24, 0x69	; 105
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    4972:	25 e2       	ldi	r18, 0x25	; 37
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	42 e5       	ldi	r20, 0x52	; 82
    4978:	50 e0       	ldi	r21, 0x00	; 0
    497a:	6f ed       	ldi	r22, 0xDF	; 223
    497c:	74 e0       	ldi	r23, 0x04	; 4
    497e:	8e e0       	ldi	r24, 0x0E	; 14
    4980:	91 e0       	ldi	r25, 0x01	; 1
    4982:	0c c0       	rjmp	.+24     	; 0x499c <Display_status+0x3da>
		}
		else if(General_error & (1 << DISARMED))
    4984:	80 91 35 05 	lds	r24, 0x0535
    4988:	82 ff       	sbrs	r24, 2
    498a:	0a c0       	rjmp	.+20     	; 0x49a0 <Display_status+0x3de>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    498c:	25 e2       	ldi	r18, 0x25	; 37
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	49 e1       	ldi	r20, 0x19	; 25
    4992:	50 e0       	ldi	r21, 0x00	; 0
    4994:	6f ed       	ldi	r22, 0xDF	; 223
    4996:	74 e0       	ldi	r23, 0x04	; 4
    4998:	82 e1       	ldi	r24, 0x12	; 18
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	91 e0       	ldi	r25, 0x01	; 1
    49a4:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
	clear_buffer(buffer);
    49a8:	80 e0       	ldi	r24, 0x00	; 0
    49aa:	91 e0       	ldi	r25, 0x01	; 1
    49ac:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
}
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	0f 90       	pop	r0
    49b6:	0f 90       	pop	r0
    49b8:	df 91       	pop	r29
    49ba:	cf 91       	pop	r28
    49bc:	1f 91       	pop	r17
    49be:	0f 91       	pop	r16
    49c0:	ff 90       	pop	r15
    49c2:	ef 90       	pop	r14
    49c4:	df 90       	pop	r13
    49c6:	cf 90       	pop	r12
    49c8:	bf 90       	pop	r11
    49ca:	08 95       	ret

000049cc <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    49cc:	af 92       	push	r10
    49ce:	bf 92       	push	r11
    49d0:	cf 92       	push	r12
    49d2:	df 92       	push	r13
    49d4:	ef 92       	push	r14
    49d6:	ff 92       	push	r15
    49d8:	0f 93       	push	r16
    49da:	1f 93       	push	r17
    49dc:	cf 93       	push	r28
    49de:	df 93       	push	r29
    49e0:	00 d0       	rcall	.+0      	; 0x49e2 <Display_sticks+0x16>
    49e2:	cd b7       	in	r28, 0x3d	; 61
    49e4:	de b7       	in	r29, 0x3e	; 62
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    49e6:	b0 90 3b 08 	lds	r11, 0x083B
	temp_elevator = Config.ElevatorPol;
    49ea:	c0 90 dc 08 	lds	r12, 0x08DC
	temp_rudder = Config.RudderPol;
    49ee:	d0 90 3a 08 	lds	r13, 0x083A

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    49f2:	10 92 3b 08 	sts	0x083B, r1
	Config.ElevatorPol =  NORMAL;
    49f6:	10 92 dc 08 	sts	0x08DC, r1
	Config.RudderPol = NORMAL;
    49fa:	10 92 3a 08 	sts	0x083A, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    49fe:	10 e0       	ldi	r17, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    4a00:	a1 2c       	mov	r10, r1
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    4a02:	1f 9b       	sbis	0x03, 7	; 3
    4a04:	d9 c0       	rjmp	.+434    	; 0x4bb8 <Display_sticks+0x1ec>
    4a06:	a1 10       	cpse	r10, r1
    4a08:	d9 c0       	rjmp	.+434    	; 0x4bbc <Display_sticks+0x1f0>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	91 e0       	ldi	r25, 0x01	; 1
    4a0e:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    4a12:	32 e0       	ldi	r19, 0x02	; 2

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    4a14:	50 e0       	ldi	r21, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    4a16:	61 e1       	ldi	r22, 0x11	; 17
    4a18:	65 0f       	add	r22, r21
    4a1a:	ee 24       	eor	r14, r14
    4a1c:	e3 94       	inc	r14
    4a1e:	08 e2       	ldi	r16, 0x28	; 40
    4a20:	28 e2       	ldi	r18, 0x28	; 40
    4a22:	40 e0       	ldi	r20, 0x00	; 0
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	91 e0       	ldi	r25, 0x01	; 1
    4a28:	3a 83       	std	Y+2, r19	; 0x02
    4a2a:	59 83       	std	Y+1, r21	; 0x01
    4a2c:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    4a30:	59 81       	ldd	r21, Y+1	; 0x01
    4a32:	86 e2       	ldi	r24, 0x26	; 38
    4a34:	f8 2e       	mov	r15, r24
    4a36:	f5 0e       	add	r15, r21
    4a38:	20 e3       	ldi	r18, 0x30	; 48
    4a3a:	25 0f       	add	r18, r21
    4a3c:	03 e0       	ldi	r16, 0x03	; 3
    4a3e:	44 e1       	ldi	r20, 0x14	; 20
    4a40:	6f 2d       	mov	r22, r15
    4a42:	80 e0       	ldi	r24, 0x00	; 0
    4a44:	91 e0       	ldi	r25, 0x01	; 1
    4a46:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    4a4a:	59 81       	ldd	r21, Y+1	; 0x01
    4a4c:	28 e3       	ldi	r18, 0x38	; 56
    4a4e:	25 0f       	add	r18, r21
    4a50:	69 e2       	ldi	r22, 0x29	; 41
    4a52:	65 0f       	add	r22, r21
    4a54:	06 e0       	ldi	r16, 0x06	; 6
    4a56:	45 e1       	ldi	r20, 0x15	; 21
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	91 e0       	ldi	r25, 0x01	; 1
    4a5c:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    4a60:	01 e0       	ldi	r16, 0x01	; 1
    4a62:	22 e0       	ldi	r18, 0x02	; 2
    4a64:	45 e1       	ldi	r20, 0x15	; 21
    4a66:	6f 2d       	mov	r22, r15
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	91 e0       	ldi	r25, 0x01	; 1
    4a6c:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    4a70:	59 81       	ldd	r21, Y+1	; 0x01
    4a72:	63 e3       	ldi	r22, 0x33	; 51
    4a74:	65 0f       	add	r22, r21
    4a76:	24 e0       	ldi	r18, 0x04	; 4
    4a78:	45 e0       	ldi	r20, 0x05	; 5
    4a7a:	80 e0       	ldi	r24, 0x00	; 0
    4a7c:	91 e0       	ldi	r25, 0x01	; 1
    4a7e:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <fillcircle>

			// Draw second stick on the right
			offset = 52;
    4a82:	54 e3       	ldi	r21, 0x34	; 52

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    4a84:	3a 81       	ldd	r19, Y+2	; 0x02
    4a86:	31 30       	cpi	r19, 0x01	; 1
    4a88:	11 f0       	breq	.+4      	; 0x4a8e <Display_sticks+0xc2>
    4a8a:	31 e0       	ldi	r19, 0x01	; 1
    4a8c:	c4 cf       	rjmp	.-120    	; 0x4a16 <Display_sticks+0x4a>
			// Draw second stick on the right
			offset = 52;
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    4a8e:	29 e3       	ldi	r18, 0x39	; 57
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	40 e0       	ldi	r20, 0x00	; 0
    4a94:	50 e0       	ldi	r21, 0x00	; 0
    4a96:	6f ef       	ldi	r22, 0xFF	; 255
    4a98:	71 e0       	ldi	r23, 0x01	; 1
    4a9a:	8c e0       	ldi	r24, 0x0C	; 12
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    4aa2:	0e 94 90 69 	call	0xd320	; 0xd320 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    4aa6:	80 91 85 09 	lds	r24, 0x0985
    4aaa:	90 91 86 09 	lds	r25, 0x0986
    4aae:	80 33       	cpi	r24, 0x30	; 48
    4ab0:	98 4f       	sbci	r25, 0xF8	; 248
    4ab2:	3c f0       	brlt	.+14     	; 0x4ac2 <Display_sticks+0xf6>
    4ab4:	80 91 85 09 	lds	r24, 0x0985
    4ab8:	90 91 86 09 	lds	r25, 0x0986
    4abc:	81 3d       	cpi	r24, 0xD1	; 209
    4abe:	97 40       	sbci	r25, 0x07	; 7
    4ac0:	6c f0       	brlt	.+26     	; 0x4adc <Display_sticks+0x110>
    4ac2:	11 11       	cpse	r17, r1
    4ac4:	0b c0       	rjmp	.+22     	; 0x4adc <Display_sticks+0x110>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    4ac6:	2b e2       	ldi	r18, 0x2B	; 43
    4ac8:	30 e0       	ldi	r19, 0x00	; 0
    4aca:	40 e1       	ldi	r20, 0x10	; 16
    4acc:	50 e0       	ldi	r21, 0x00	; 0
    4ace:	6f ed       	ldi	r22, 0xDF	; 223
    4ad0:	74 e0       	ldi	r23, 0x04	; 4
    4ad2:	87 e8       	ldi	r24, 0x87	; 135
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    4ada:	69 c0       	rjmp	.+210    	; 0x4bae <Display_sticks+0x1e2>
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    4adc:	80 91 85 09 	lds	r24, 0x0985
    4ae0:	90 91 86 09 	lds	r25, 0x0986
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
    4ae4:	84 3f       	cpi	r24, 0xF4	; 244
    4ae6:	91 40       	sbci	r25, 0x01	; 1
    4ae8:	3c f4       	brge	.+14     	; 0x4af8 <Display_sticks+0x12c>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    4aea:	80 91 85 09 	lds	r24, 0x0985
    4aee:	90 91 86 09 	lds	r25, 0x0986
    4af2:	8d 30       	cpi	r24, 0x0D	; 13
    4af4:	9e 4f       	sbci	r25, 0xFE	; 254
    4af6:	e4 f4       	brge	.+56     	; 0x4b30 <Display_sticks+0x164>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    4af8:	80 91 87 09 	lds	r24, 0x0987
    4afc:	90 91 88 09 	lds	r25, 0x0988
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    4b00:	84 3f       	cpi	r24, 0xF4	; 244
    4b02:	91 40       	sbci	r25, 0x01	; 1
    4b04:	3c f4       	brge	.+14     	; 0x4b14 <Display_sticks+0x148>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    4b06:	80 91 87 09 	lds	r24, 0x0987
    4b0a:	90 91 88 09 	lds	r25, 0x0988
    4b0e:	8d 30       	cpi	r24, 0x0D	; 13
    4b10:	9e 4f       	sbci	r25, 0xFE	; 254
    4b12:	74 f4       	brge	.+28     	; 0x4b30 <Display_sticks+0x164>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    4b14:	80 91 89 09 	lds	r24, 0x0989
    4b18:	90 91 8a 09 	lds	r25, 0x098A
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    4b1c:	84 3f       	cpi	r24, 0xF4	; 244
    4b1e:	91 40       	sbci	r25, 0x01	; 1
    4b20:	9c f4       	brge	.+38     	; 0x4b48 <Display_sticks+0x17c>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    4b22:	80 91 89 09 	lds	r24, 0x0989
    4b26:	90 91 8a 09 	lds	r25, 0x098A
    4b2a:	8d 30       	cpi	r24, 0x0D	; 13
    4b2c:	9e 4f       	sbci	r25, 0xFE	; 254
    4b2e:	64 f0       	brlt	.+24     	; 0x4b48 <Display_sticks+0x17c>
					)
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    4b30:	2b e2       	ldi	r18, 0x2B	; 43
    4b32:	30 e0       	ldi	r19, 0x00	; 0
    4b34:	49 e0       	ldi	r20, 0x09	; 9
    4b36:	50 e0       	ldi	r21, 0x00	; 0
    4b38:	6f ed       	ldi	r22, 0xDF	; 223
    4b3a:	74 e0       	ldi	r23, 0x04	; 4
    4b3c:	88 e8       	ldi	r24, 0x88	; 136
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
					)
			{
				CalibrateStarted = true;
    4b44:	11 e0       	ldi	r17, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    4b46:	33 c0       	rjmp	.+102    	; 0x4bae <Display_sticks+0x1e2>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    4b48:	80 91 85 09 	lds	r24, 0x0985
    4b4c:	90 91 86 09 	lds	r25, 0x0986
    4b50:	97 ff       	sbrs	r25, 7
    4b52:	03 c0       	rjmp	.+6      	; 0x4b5a <Display_sticks+0x18e>
				{
					Config.AileronPol = REVERSED;
    4b54:	81 e0       	ldi	r24, 0x01	; 1
    4b56:	80 93 3b 08 	sts	0x083B, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    4b5a:	80 91 87 09 	lds	r24, 0x0987
    4b5e:	90 91 88 09 	lds	r25, 0x0988
    4b62:	97 ff       	sbrs	r25, 7
    4b64:	03 c0       	rjmp	.+6      	; 0x4b6c <Display_sticks+0x1a0>
				{
					Config.ElevatorPol = REVERSED;
    4b66:	81 e0       	ldi	r24, 0x01	; 1
    4b68:	80 93 dc 08 	sts	0x08DC, r24
				}

				if (RCinputs[RUDDER] < 0)
    4b6c:	80 91 89 09 	lds	r24, 0x0989
    4b70:	90 91 8a 09 	lds	r25, 0x098A
    4b74:	97 ff       	sbrs	r25, 7
    4b76:	03 c0       	rjmp	.+6      	; 0x4b7e <Display_sticks+0x1b2>
				{
					Config.RudderPol = REVERSED;
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	80 93 3a 08 	sts	0x083A, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    4b7e:	80 91 85 09 	lds	r24, 0x0985
    4b82:	90 91 86 09 	lds	r25, 0x0986
    4b86:	18 16       	cp	r1, r24
    4b88:	19 06       	cpc	r1, r25
    4b8a:	8c f4       	brge	.+34     	; 0x4bae <Display_sticks+0x1e2>
    4b8c:	80 91 87 09 	lds	r24, 0x0987
    4b90:	90 91 88 09 	lds	r25, 0x0988
    4b94:	18 16       	cp	r1, r24
    4b96:	19 06       	cpc	r1, r25
    4b98:	54 f4       	brge	.+20     	; 0x4bae <Display_sticks+0x1e2>
    4b9a:	80 91 89 09 	lds	r24, 0x0989
    4b9e:	90 91 8a 09 	lds	r25, 0x098A
    4ba2:	aa 24       	eor	r10, r10
    4ba4:	a3 94       	inc	r10
    4ba6:	18 16       	cp	r1, r24
    4ba8:	19 06       	cpc	r1, r25
    4baa:	0c f0       	brlt	.+2      	; 0x4bae <Display_sticks+0x1e2>
    4bac:	a1 2c       	mov	r10, r1
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    4bae:	80 e0       	ldi	r24, 0x00	; 0
    4bb0:	91 e0       	ldi	r25, 0x01	; 1
    4bb2:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
    4bb6:	25 cf       	rjmp	.-438    	; 0x4a02 <Display_sticks+0x36>
	}

	// Save value and return
	if (CalibrateDone)
    4bb8:	aa 20       	and	r10, r10
    4bba:	49 f1       	breq	.+82     	; 0x4c0e <Display_sticks+0x242>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    4bbc:	2b e2       	ldi	r18, 0x2B	; 43
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	48 e2       	ldi	r20, 0x28	; 40
    4bc2:	50 e0       	ldi	r21, 0x00	; 0
    4bc4:	6f ed       	ldi	r22, 0xDF	; 223
    4bc6:	74 e0       	ldi	r23, 0x04	; 4
    4bc8:	89 e8       	ldi	r24, 0x89	; 137
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    4bd0:	80 e0       	ldi	r24, 0x00	; 0
    4bd2:	91 e0       	ldi	r25, 0x01	; 1
    4bd4:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
		clear_buffer(buffer);
    4bd8:	80 e0       	ldi	r24, 0x00	; 0
    4bda:	91 e0       	ldi	r25, 0x01	; 1
    4bdc:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    4be0:	8f e7       	ldi	r24, 0x7F	; 127
    4be2:	94 e8       	ldi	r25, 0x84	; 132
    4be4:	2e e1       	ldi	r18, 0x1E	; 30
    4be6:	81 50       	subi	r24, 0x01	; 1
    4be8:	90 40       	sbci	r25, 0x00	; 0
    4bea:	20 40       	sbci	r18, 0x00	; 0
    4bec:	e1 f7       	brne	.-8      	; 0x4be6 <Display_sticks+0x21a>
    4bee:	00 c0       	rjmp	.+0      	; 0x4bf0 <Display_sticks+0x224>
    4bf0:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    4bf2:	0f 90       	pop	r0
    4bf4:	0f 90       	pop	r0
    4bf6:	df 91       	pop	r29
    4bf8:	cf 91       	pop	r28
    4bfa:	1f 91       	pop	r17
    4bfc:	0f 91       	pop	r16
    4bfe:	ff 90       	pop	r15
    4c00:	ef 90       	pop	r14
    4c02:	df 90       	pop	r13
    4c04:	cf 90       	pop	r12
    4c06:	bf 90       	pop	r11
    4c08:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    4c0a:	0c 94 53 26 	jmp	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    4c0e:	b0 92 3b 08 	sts	0x083B, r11
		Config.ElevatorPol = temp_elevator;
    4c12:	c0 92 dc 08 	sts	0x08DC, r12
		Config.RudderPol = temp_rudder;
    4c16:	d0 92 3a 08 	sts	0x083A, r13
	}
}
    4c1a:	0f 90       	pop	r0
    4c1c:	0f 90       	pop	r0
    4c1e:	df 91       	pop	r29
    4c20:	cf 91       	pop	r28
    4c22:	1f 91       	pop	r17
    4c24:	0f 91       	pop	r16
    4c26:	ff 90       	pop	r15
    4c28:	ef 90       	pop	r14
    4c2a:	df 90       	pop	r13
    4c2c:	cf 90       	pop	r12
    4c2e:	bf 90       	pop	r11
    4c30:	af 90       	pop	r10
    4c32:	08 95       	ret

00004c34 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    4c34:	0f 93       	push	r16
    4c36:	1f 93       	push	r17
    4c38:	cf 93       	push	r28
    4c3a:	df 93       	push	r29
    4c3c:	1f 92       	push	r1
    4c3e:	cd b7       	in	r28, 0x3d	; 61
    4c40:	de b7       	in	r29, 0x3e	; 62
    4c42:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    4c44:	69 83       	std	Y+1, r22	; 0x01
    4c46:	0e 94 68 70 	call	0xe0d0	; 0xe0d0 <eeprom_read_byte>
    4c4a:	69 81       	ldd	r22, Y+1	; 0x01
    4c4c:	86 17       	cp	r24, r22
    4c4e:	41 f0       	breq	.+16     	; 0x4c60 <eeprom_write_byte_changed+0x2c>
	{
		eeprom_write_byte(addr, value);
    4c50:	c8 01       	movw	r24, r16
	}
}
    4c52:	0f 90       	pop	r0
    4c54:	df 91       	pop	r29
    4c56:	cf 91       	pop	r28
    4c58:	1f 91       	pop	r17
    4c5a:	0f 91       	pop	r16
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		eeprom_write_byte(addr, value);
    4c5c:	0c 94 70 70 	jmp	0xe0e0	; 0xe0e0 <eeprom_write_byte>
	}
}
    4c60:	0f 90       	pop	r0
    4c62:	df 91       	pop	r29
    4c64:	cf 91       	pop	r28
    4c66:	1f 91       	pop	r17
    4c68:	0f 91       	pop	r16
    4c6a:	08 95       	ret

00004c6c <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    4c6c:	ef 92       	push	r14
    4c6e:	ff 92       	push	r15
    4c70:	0f 93       	push	r16
    4c72:	1f 93       	push	r17
    4c74:	cf 93       	push	r28
    4c76:	df 93       	push	r29
    4c78:	ec 01       	movw	r28, r24
    4c7a:	7b 01       	movw	r14, r22
    4c7c:	8c 01       	movw	r16, r24
    4c7e:	04 0f       	add	r16, r20
    4c80:	15 1f       	adc	r17, r21
	uint16_t len;
	uint8_t value;

	for (len = 0; len < size; len++)
    4c82:	c0 17       	cp	r28, r16
    4c84:	d1 07       	cpc	r29, r17
    4c86:	41 f0       	breq	.+16     	; 0x4c98 <eeprom_write_block_changes+0x2c>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    4c88:	69 91       	ld	r22, Y+
    4c8a:	c7 01       	movw	r24, r14
    4c8c:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <eeprom_write_byte_changed>
		src++;
		dest++;
    4c90:	8f ef       	ldi	r24, 0xFF	; 255
    4c92:	e8 1a       	sub	r14, r24
    4c94:	f8 0a       	sbc	r15, r24
    4c96:	f5 cf       	rjmp	.-22     	; 0x4c82 <eeprom_write_block_changes+0x16>
	}
}
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	1f 91       	pop	r17
    4c9e:	0f 91       	pop	r16
    4ca0:	ff 90       	pop	r15
    4ca2:	ef 90       	pop	r14
    4ca4:	08 95       	ret

00004ca6 <Save_Config_to_EEPROM>:
const int8_t	MPX[MAX_RC_CHANNELS] PROGMEM	= {1,2,3,5,0,4,6,7}; 	// Multiplex channel sequence (AER1TG23)
	
void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    4ca6:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    4ca8:	44 ea       	ldi	r20, 0xA4	; 164
    4caa:	52 e0       	ldi	r21, 0x02	; 2
    4cac:	60 e0       	ldi	r22, 0x00	; 0
    4cae:	70 e0       	ldi	r23, 0x00	; 0
    4cb0:	89 e3       	ldi	r24, 0x39	; 57
    4cb2:	96 e0       	ldi	r25, 0x06	; 6
    4cb4:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <eeprom_write_block_changes>
	sei();
    4cb8:	78 94       	sei
    4cba:	08 95       	ret

00004cbc <Update_V1_0_to_V1_1>:
//************************************************************
// Config data restructure code
//************************************************************
// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    4cbc:	2f 92       	push	r2
    4cbe:	3f 92       	push	r3
    4cc0:	4f 92       	push	r4
    4cc2:	5f 92       	push	r5
    4cc4:	6f 92       	push	r6
    4cc6:	7f 92       	push	r7
    4cc8:	8f 92       	push	r8
    4cca:	9f 92       	push	r9
    4ccc:	af 92       	push	r10
    4cce:	bf 92       	push	r11
    4cd0:	cf 92       	push	r12
    4cd2:	df 92       	push	r13
    4cd4:	ef 92       	push	r14
    4cd6:	ff 92       	push	r15
    4cd8:	0f 93       	push	r16
    4cda:	1f 93       	push	r17
    4cdc:	cf 93       	push	r28
    4cde:	df 93       	push	r29
    4ce0:	cd b7       	in	r28, 0x3d	; 61
    4ce2:	de b7       	in	r29, 0x3e	; 62
    4ce4:	c3 55       	subi	r28, 0x53	; 83
    4ce6:	d1 40       	sbci	r29, 0x01	; 1
    4ce8:	0f b6       	in	r0, 0x3f	; 63
    4cea:	f8 94       	cli
    4cec:	de bf       	out	0x3e, r29	; 62
    4cee:	0f be       	out	0x3f, r0	; 63
    4cf0:	cd bf       	out	0x3d, r28	; 61

	int8_t		buffer[12];
	int8_t		temp = 0;
	
	// RC items
	memcpy((void*)&buffer[0],(void*)((&Config.setup) + (RCITEMS_V1_0)),1);		// RxMode
    4cf2:	80 91 62 06 	lds	r24, 0x0662
    4cf6:	cf 5c       	subi	r28, 0xCF	; 207
    4cf8:	de 4f       	sbci	r29, 0xFE	; 254
    4cfa:	88 83       	st	Y, r24
    4cfc:	c1 53       	subi	r28, 0x31	; 49
    4cfe:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[1],(void*)((&Config.setup) + (GENITEMS_V1_0 + 5)),1);	// Servo_rate
    4d00:	80 91 c6 06 	lds	r24, 0x06C6
    4d04:	ce 5c       	subi	r28, 0xCE	; 206
    4d06:	de 4f       	sbci	r29, 0xFE	; 254
    4d08:	88 83       	st	Y, r24
    4d0a:	c2 53       	subi	r28, 0x32	; 50
    4d0c:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[2],(void*)((&Config.setup) + (RCITEMS_V1_0 + 1)),1);	// PWM_Sync
    4d0e:	80 91 63 06 	lds	r24, 0x0663
    4d12:	cd 5c       	subi	r28, 0xCD	; 205
    4d14:	de 4f       	sbci	r29, 0xFE	; 254
    4d16:	88 83       	st	Y, r24
    4d18:	c3 53       	subi	r28, 0x33	; 51
    4d1a:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[3],(void*)((&Config.setup) + (RCITEMS_V1_0 + 2)),1);	// TxSeq
    4d1c:	80 91 64 06 	lds	r24, 0x0664
    4d20:	cc 5c       	subi	r28, 0xCC	; 204
    4d22:	de 4f       	sbci	r29, 0xFE	; 254
    4d24:	88 83       	st	Y, r24
    4d26:	c4 53       	subi	r28, 0x34	; 52
    4d28:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[4],(void*)((&Config.setup) + (RCITEMS_V1_0 + 3)),1);	// FlightChan
    4d2a:	80 91 65 06 	lds	r24, 0x0665
    4d2e:	cb 5c       	subi	r28, 0xCB	; 203
    4d30:	de 4f       	sbci	r29, 0xFE	; 254
    4d32:	88 83       	st	Y, r24
    4d34:	c5 53       	subi	r28, 0x35	; 53
    4d36:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[5],(void*)((&Config.setup) + (RCITEMS_V1_0 + 7)),1);	// TransitionSpeed
    4d38:	90 91 69 06 	lds	r25, 0x0669
    4d3c:	ca 5c       	subi	r28, 0xCA	; 202
    4d3e:	de 4f       	sbci	r29, 0xFE	; 254
    4d40:	98 83       	st	Y, r25
    4d42:	c6 53       	subi	r28, 0x36	; 54
    4d44:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[6],(void*)((&Config.setup) + (RCITEMS_V1_0 + 8)),1);	// Transition_P1n
    4d46:	90 91 6a 06 	lds	r25, 0x066A
    4d4a:	c9 5c       	subi	r28, 0xC9	; 201
    4d4c:	de 4f       	sbci	r29, 0xFE	; 254
    4d4e:	98 83       	st	Y, r25
    4d50:	c7 53       	subi	r28, 0x37	; 55
    4d52:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[7],(void*)((&Config.setup) + (RCITEMS_V1_0 + 4)),1);	// AileronPol
    4d54:	90 91 66 06 	lds	r25, 0x0666
    4d58:	c8 5c       	subi	r28, 0xC8	; 200
    4d5a:	de 4f       	sbci	r29, 0xFE	; 254
    4d5c:	98 83       	st	Y, r25
    4d5e:	c8 53       	subi	r28, 0x38	; 56
    4d60:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[8],(void*)((&Config.setup) + (RCITEMS_V1_0 + 5)),1);	// ElevatorPol
    4d62:	90 91 67 06 	lds	r25, 0x0667
    4d66:	c7 5c       	subi	r28, 0xC7	; 199
    4d68:	de 4f       	sbci	r29, 0xFE	; 254
    4d6a:	98 83       	st	Y, r25
    4d6c:	c9 53       	subi	r28, 0x39	; 57
    4d6e:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[9],(void*)((&Config.setup) + (RCITEMS_V1_0 + 6)),1);	// RudderPol
    4d70:	20 90 68 06 	lds	r2, 0x0668
    4d74:	c6 5c       	subi	r28, 0xC6	; 198
    4d76:	de 4f       	sbci	r29, 0xFE	; 254
    4d78:	28 82       	st	Y, r2
    4d7a:	ca 53       	subi	r28, 0x3A	; 58
    4d7c:	d1 40       	sbci	r29, 0x01	; 1
	
	// Copy back to new RC items structure
	memcpy((void*)((&Config.setup) + (RCITEMS_V1_0)), &buffer, 9);				// RxMode to ElevatorPol (9 items)
    4d7e:	99 e0       	ldi	r25, 0x09	; 9
    4d80:	fe 01       	movw	r30, r28
    4d82:	ef 5c       	subi	r30, 0xCF	; 207
    4d84:	fe 4f       	sbci	r31, 0xFE	; 254
    4d86:	a2 e6       	ldi	r26, 0x62	; 98
    4d88:	b6 e0       	ldi	r27, 0x06	; 6
    4d8a:	01 90       	ld	r0, Z+
    4d8c:	0d 92       	st	X+, r0
    4d8e:	9a 95       	dec	r25
    4d90:	e1 f7       	brne	.-8      	; 0x4d8a <Update_V1_0_to_V1_1+0xce>
		
	// New General items - MPU6050LPF to AL correct (4 items)
	memcpy((void*)&buffer[0],(void*)((&Config.setup) + (GENITEMS_V1_0 + 9)),1);	// MPU6050LPF
    4d92:	90 91 ca 06 	lds	r25, 0x06CA
    4d96:	cf 5c       	subi	r28, 0xCF	; 207
    4d98:	de 4f       	sbci	r29, 0xFE	; 254
    4d9a:	98 83       	st	Y, r25
    4d9c:	c1 53       	subi	r28, 0x31	; 49
    4d9e:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[1],(void*)((&Config.setup) + (GENITEMS_V1_0 + 6)),1);	// AccLPF
    4da0:	90 91 c7 06 	lds	r25, 0x06C7
    4da4:	cf 5a       	subi	r28, 0xAF	; 175
    4da6:	de 4f       	sbci	r29, 0xFE	; 254
    4da8:	98 83       	st	Y, r25
    4daa:	c1 55       	subi	r28, 0x51	; 81
    4dac:	d1 40       	sbci	r29, 0x01	; 1
    4dae:	ce 5c       	subi	r28, 0xCE	; 206
    4db0:	de 4f       	sbci	r29, 0xFE	; 254
    4db2:	98 83       	st	Y, r25
    4db4:	c2 53       	subi	r28, 0x32	; 50
    4db6:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[2],(void*)((&Config.setup) + (GENITEMS_V1_0 + 7)),1);	// GyroLPF
    4db8:	e0 91 c8 06 	lds	r30, 0x06C8
    4dbc:	ce 5a       	subi	r28, 0xAE	; 174
    4dbe:	de 4f       	sbci	r29, 0xFE	; 254
    4dc0:	e8 83       	st	Y, r30
    4dc2:	c2 55       	subi	r28, 0x52	; 82
    4dc4:	d1 40       	sbci	r29, 0x01	; 1
    4dc6:	cd 5c       	subi	r28, 0xCD	; 205
    4dc8:	de 4f       	sbci	r29, 0xFE	; 254
    4dca:	e8 83       	st	Y, r30
    4dcc:	c3 53       	subi	r28, 0x33	; 51
    4dce:	d1 40       	sbci	r29, 0x01	; 1
	memcpy((void*)&buffer[3],(void*)((&Config.setup) + (GENITEMS_V1_0 + 8)),1);	// AL correct
    4dd0:	90 91 c9 06 	lds	r25, 0x06C9
    4dd4:	cc 5c       	subi	r28, 0xCC	; 204
    4dd6:	de 4f       	sbci	r29, 0xFE	; 254
    4dd8:	98 83       	st	Y, r25
    4dda:	c4 53       	subi	r28, 0x34	; 52
    4ddc:	d1 40       	sbci	r29, 0x01	; 1
	
	// Copy back to new General items structure
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 + 5)), &buffer, 4);
    4dde:	cf 5c       	subi	r28, 0xCF	; 207
    4de0:	de 4f       	sbci	r29, 0xFE	; 254
    4de2:	48 81       	ld	r20, Y
    4de4:	59 81       	ldd	r21, Y+1	; 0x01
    4de6:	6a 81       	ldd	r22, Y+2	; 0x02
    4de8:	7b 81       	ldd	r23, Y+3	; 0x03
    4dea:	c1 53       	subi	r28, 0x31	; 49
    4dec:	d1 40       	sbci	r29, 0x01	; 1
    4dee:	40 93 c6 06 	sts	0x06C6, r20
    4df2:	50 93 c7 06 	sts	0x06C7, r21
    4df6:	60 93 c8 06 	sts	0x06C8, r22
    4dfa:	70 93 c9 06 	sts	0x06C9, r23
	
	// "None" no longer an option for this channel, so set to AUX3
	memcpy((void*)&temp,(void*)((&Config.setup) + (RCITEMS_V1_0 + 4)),1);		// FlightChan

	if (temp == NOCHAN)
    4dfe:	88 30       	cpi	r24, 0x08	; 8
    4e00:	19 f4       	brne	.+6      	; 0x4e08 <Update_V1_0_to_V1_1+0x14c>
	{
		temp = AUX3;
		memcpy((void*)((&Config.setup) + (RCITEMS_V1_0 + 4)), &temp, 1);
    4e02:	87 e0       	ldi	r24, 0x07	; 7
    4e04:	80 93 66 06 	sts	0x0666, r24
	}

	// Set mixer preset to default
	memset((void*)((&Config.setup) + (GENITEMS_V1_0 + 9)), QUADX, 1);			// Preset
    4e08:	10 92 ca 06 	sts	0x06CA, r1
	
	// Move data that exists after the channel mixer to new location
	memmove((void*)((&Config.setup) + (SERVOREV_V1_1)), (void*)((&Config.setup) + (SERVOREV_V1_0)), 72); // (New channel_t size - old size = 72)
    4e0c:	48 e4       	ldi	r20, 0x48	; 72
    4e0e:	50 e0       	ldi	r21, 0x00	; 0
    4e10:	63 eb       	ldi	r22, 0xB3	; 179
    4e12:	77 e0       	ldi	r23, 0x07	; 7
    4e14:	8b ef       	ldi	r24, 0xFB	; 251
    4e16:	97 e0       	ldi	r25, 0x07	; 7
    4e18:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>
    4e1c:	9e 01       	movw	r18, r28
    4e1e:	2f 5f       	subi	r18, 0xFF	; 255
    4e20:	3f 4f       	sbci	r19, 0xFF	; 255
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	90 e0       	ldi	r25, 0x00	; 0
	{
		src = (void*)((&Config.setup) + (CHANNEL_V1_0));
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    4e26:	4d e1       	ldi	r20, 0x1D	; 29
    4e28:	fc 01       	movw	r30, r24
    4e2a:	e5 53       	subi	r30, 0x35	; 53
    4e2c:	f9 4f       	sbci	r31, 0xF9	; 249
    4e2e:	d9 01       	movw	r26, r18
    4e30:	54 2f       	mov	r21, r20
    4e32:	01 90       	ld	r0, Z+
    4e34:	0d 92       	st	X+, r0
    4e36:	5a 95       	dec	r21
    4e38:	e1 f7       	brne	.-8      	; 0x4e32 <Update_V1_0_to_V1_1+0x176>
    4e3a:	2a 5d       	subi	r18, 0xDA	; 218
    4e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e3e:	4d 96       	adiw	r24, 0x1d	; 29
	
	// Move data that exists after the channel mixer to new location
	memmove((void*)((&Config.setup) + (SERVOREV_V1_1)), (void*)((&Config.setup) + (SERVOREV_V1_0)), 72); // (New channel_t size - old size = 72)
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    4e40:	88 3e       	cpi	r24, 0xE8	; 232
    4e42:	91 05       	cpc	r25, r1
    4e44:	89 f7       	brne	.-30     	; 0x4e28 <Update_V1_0_to_V1_1+0x16c>
    4e46:	4e 01       	movw	r8, r28
    4e48:	f5 e0       	ldi	r31, 0x05	; 5
    4e4a:	8f 0e       	add	r8, r31
    4e4c:	91 1c       	adc	r9, r1
    4e4e:	ce 01       	movw	r24, r28
    4e50:	43 96       	adiw	r24, 0x13	; 19
    4e52:	c1 5c       	subi	r28, 0xC1	; 193
    4e54:	de 4f       	sbci	r29, 0xFE	; 254
    4e56:	99 83       	std	Y+1, r25	; 0x01
    4e58:	88 83       	st	Y, r24
    4e5a:	cf 53       	subi	r28, 0x3F	; 63
    4e5c:	d1 40       	sbci	r29, 0x01	; 1
    4e5e:	fe 01       	movw	r30, r28
    4e60:	74 96       	adiw	r30, 0x14	; 20
    4e62:	cd 5b       	subi	r28, 0xBD	; 189
    4e64:	de 4f       	sbci	r29, 0xFE	; 254
    4e66:	f9 83       	std	Y+1, r31	; 0x01
    4e68:	e8 83       	st	Y, r30
    4e6a:	c3 54       	subi	r28, 0x43	; 67
    4e6c:	d1 40       	sbci	r29, 0x01	; 1
    4e6e:	02 96       	adiw	r24, 0x02	; 2
    4e70:	cf 5b       	subi	r28, 0xBF	; 191
    4e72:	de 4f       	sbci	r29, 0xFE	; 254
    4e74:	99 83       	std	Y+1, r25	; 0x01
    4e76:	88 83       	st	Y, r24
    4e78:	c1 54       	subi	r28, 0x41	; 65
    4e7a:	d1 40       	sbci	r29, 0x01	; 1
    4e7c:	6e 01       	movw	r12, r28
    4e7e:	96 e1       	ldi	r25, 0x16	; 22
    4e80:	c9 0e       	add	r12, r25
    4e82:	d1 1c       	adc	r13, r1
    4e84:	7e 01       	movw	r14, r28
    4e86:	ee e1       	ldi	r30, 0x1E	; 30
    4e88:	ee 0e       	add	r14, r30
    4e8a:	f1 1c       	adc	r15, r1
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	4d 96       	adiw	r24, 0x1d	; 29
    4e90:	c5 5b       	subi	r28, 0xB5	; 181
    4e92:	de 4f       	sbci	r29, 0xFE	; 254
    4e94:	99 83       	std	Y+1, r25	; 0x01
    4e96:	88 83       	st	Y, r24
    4e98:	cb 54       	subi	r28, 0x4B	; 75
    4e9a:	d1 40       	sbci	r29, 0x01	; 1
    4e9c:	fe 01       	movw	r30, r28
    4e9e:	7c 96       	adiw	r30, 0x1c	; 28
    4ea0:	c7 5b       	subi	r28, 0xB7	; 183
    4ea2:	de 4f       	sbci	r29, 0xFE	; 254
    4ea4:	f9 83       	std	Y+1, r31	; 0x01
    4ea6:	e8 83       	st	Y, r30
    4ea8:	c9 54       	subi	r28, 0x49	; 73
    4eaa:	d1 40       	sbci	r29, 0x01	; 1
    4eac:	02 97       	sbiw	r24, 0x02	; 2
    4eae:	c9 5b       	subi	r28, 0xB9	; 185
    4eb0:	de 4f       	sbci	r29, 0xFE	; 254
    4eb2:	99 83       	std	Y+1, r25	; 0x01
    4eb4:	88 83       	st	Y, r24
    4eb6:	c7 54       	subi	r28, 0x47	; 71
    4eb8:	d1 40       	sbci	r29, 0x01	; 1
    4eba:	32 97       	sbiw	r30, 0x02	; 2
    4ebc:	cb 5b       	subi	r28, 0xBB	; 187
    4ebe:	de 4f       	sbci	r29, 0xFE	; 254
    4ec0:	f9 83       	std	Y+1, r31	; 0x01
    4ec2:	e8 83       	st	Y, r30
    4ec4:	c5 54       	subi	r28, 0x45	; 69
    4ec6:	d1 40       	sbci	r29, 0x01	; 1
    4ec8:	02 97       	sbiw	r24, 0x02	; 2
    4eca:	c1 5b       	subi	r28, 0xB1	; 177
    4ecc:	de 4f       	sbci	r29, 0xFE	; 254
    4ece:	99 83       	std	Y+1, r25	; 0x01
    4ed0:	88 83       	st	Y, r24
    4ed2:	cf 54       	subi	r28, 0x4F	; 79
    4ed4:	d1 40       	sbci	r29, 0x01	; 1
    4ed6:	32 97       	sbiw	r30, 0x02	; 2
    4ed8:	c3 5b       	subi	r28, 0xB3	; 179
    4eda:	de 4f       	sbci	r29, 0xFE	; 254
    4edc:	f9 83       	std	Y+1, r31	; 0x01
    4ede:	e8 83       	st	Y, r30
    4ee0:	cd 54       	subi	r28, 0x4D	; 77
    4ee2:	d1 40       	sbci	r29, 0x01	; 1
    4ee4:	5e 01       	movw	r10, r28
    4ee6:	f7 e1       	ldi	r31, 0x17	; 23
    4ee8:	af 0e       	add	r10, r31
    4eea:	b1 1c       	adc	r11, r1
    4eec:	8b 5c       	subi	r24, 0xCB	; 203
    4eee:	9e 4f       	sbci	r25, 0xFE	; 254
    4ef0:	c3 5c       	subi	r28, 0xC3	; 195
    4ef2:	de 4f       	sbci	r29, 0xFE	; 254
    4ef4:	99 83       	std	Y+1, r25	; 0x01
    4ef6:	88 83       	st	Y, r24
    4ef8:	cd 53       	subi	r28, 0x3D	; 61
    4efa:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    4efc:	12 e0       	ldi	r17, 0x02	; 2
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    4efe:	01 e0       	ldi	r16, 0x01	; 1
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    4f00:	49 e1       	ldi	r20, 0x19	; 25
    4f02:	50 e0       	ldi	r21, 0x00	; 0
    4f04:	b4 01       	movw	r22, r8
    4f06:	c7 01       	movw	r24, r14
    4f08:	48 97       	sbiw	r24, 0x18	; 24
    4f0a:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    4f0e:	c1 5c       	subi	r28, 0xC1	; 193
    4f10:	de 4f       	sbci	r29, 0xFE	; 254
    4f12:	e8 81       	ld	r30, Y
    4f14:	f9 81       	ldd	r31, Y+1	; 0x01
    4f16:	cf 53       	subi	r28, 0x3F	; 63
    4f18:	d1 40       	sbci	r29, 0x01	; 1
    4f1a:	50 80       	ld	r5, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    4f1c:	cd 5b       	subi	r28, 0xBD	; 189
    4f1e:	de 4f       	sbci	r29, 0xFE	; 254
    4f20:	e8 81       	ld	r30, Y
    4f22:	f9 81       	ldd	r31, Y+1	; 0x01
    4f24:	c3 54       	subi	r28, 0x43	; 67
    4f26:	d1 40       	sbci	r29, 0x01	; 1
    4f28:	30 80       	ld	r3, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    4f2a:	cf 5b       	subi	r28, 0xBF	; 191
    4f2c:	de 4f       	sbci	r29, 0xFE	; 254
    4f2e:	e8 81       	ld	r30, Y
    4f30:	f9 81       	ldd	r31, Y+1	; 0x01
    4f32:	c1 54       	subi	r28, 0x41	; 65
    4f34:	d1 40       	sbci	r29, 0x01	; 1
    4f36:	20 81       	ld	r18, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    4f38:	f6 01       	movw	r30, r12
    4f3a:	40 80       	ld	r4, Z
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    4f3c:	f4 01       	movw	r30, r8
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
    4f3e:	56 fe       	sbrs	r5, 6
    4f40:	02 c0       	rjmp	.+4      	; 0x4f46 <Update_V1_0_to_V1_1+0x28a>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    4f42:	10 83       	st	Z, r17
    4f44:	01 c0       	rjmp	.+2      	; 0x4f48 <Update_V1_0_to_V1_1+0x28c>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    4f46:	10 82       	st	Z, r1
    4f48:	37 01       	movw	r6, r14
    4f4a:	ff ef       	ldi	r31, 0xFF	; 255
    4f4c:	6f 1a       	sub	r6, r31
    4f4e:	7f 0a       	sbc	r7, r31
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    4f50:	48 e0       	ldi	r20, 0x08	; 8
    4f52:	50 e0       	ldi	r21, 0x00	; 0
    4f54:	b5 01       	movw	r22, r10
    4f56:	c3 01       	movw	r24, r6
    4f58:	cd 5a       	subi	r28, 0xAD	; 173
    4f5a:	de 4f       	sbci	r29, 0xFE	; 254
    4f5c:	28 83       	st	Y, r18
    4f5e:	c3 55       	subi	r28, 0x53	; 83
    4f60:	d1 40       	sbci	r29, 0x01	; 1
    4f62:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>

		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    4f66:	80 e0       	ldi	r24, 0x00	; 0
    4f68:	cd 5a       	subi	r28, 0xAD	; 173
    4f6a:	de 4f       	sbci	r29, 0xFE	; 254
    4f6c:	28 81       	ld	r18, Y
    4f6e:	c3 55       	subi	r28, 0x53	; 83
    4f70:	d1 40       	sbci	r29, 0x01	; 1
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    4f72:	f3 01       	movw	r30, r6
    4f74:	90 81       	ld	r25, Z
    4f76:	9d 30       	cpi	r25, 0x0D	; 13
    4f78:	11 f4       	brne	.+4      	; 0x4f7e <Update_V1_0_to_V1_1+0x2c2>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    4f7a:	94 e1       	ldi	r25, 0x14	; 20
    4f7c:	90 83       	st	Z, r25
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);

		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    4f7e:	8e 5f       	subi	r24, 0xFE	; 254
    4f80:	e2 e0       	ldi	r30, 0x02	; 2
    4f82:	6e 0e       	add	r6, r30
    4f84:	71 1c       	adc	r7, r1
    4f86:	88 30       	cpi	r24, 0x08	; 8
    4f88:	a1 f7       	brne	.-24     	; 0x4f72 <Update_V1_0_to_V1_1+0x2b6>
		// P1 roll gyro
		if (P1_sensors & (1 << RollGyro))
		{
			if (P1_scale & (1 << RollScale))
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    4f8a:	c1 5c       	subi	r28, 0xC1	; 193
    4f8c:	de 4f       	sbci	r29, 0xFE	; 254
    4f8e:	e8 81       	ld	r30, Y
    4f90:	f9 81       	ldd	r31, Y+1	; 0x01
    4f92:	cf 53       	subi	r28, 0x3F	; 63
    4f94:	d1 40       	sbci	r29, 0x01	; 1
			}
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if (P1_sensors & (1 << RollGyro))
    4f96:	50 fe       	sbrs	r5, 0
    4f98:	06 c0       	rjmp	.+12     	; 0x4fa6 <Update_V1_0_to_V1_1+0x2ea>
		{
			if (P1_scale & (1 << RollScale))
    4f9a:	20 ff       	sbrs	r18, 0
    4f9c:	02 c0       	rjmp	.+4      	; 0x4fa2 <Update_V1_0_to_V1_1+0x2e6>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    4f9e:	10 83       	st	Z, r17
    4fa0:	03 c0       	rjmp	.+6      	; 0x4fa8 <Update_V1_0_to_V1_1+0x2ec>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    4fa2:	00 83       	st	Z, r16
    4fa4:	01 c0       	rjmp	.+2      	; 0x4fa8 <Update_V1_0_to_V1_1+0x2ec>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    4fa6:	10 82       	st	Z, r1
		// P2 roll gyro
		if (P2_sensors & (1 << RollGyro))
		{
			if (P2_scale & (1 << RollScale))
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    4fa8:	cd 5b       	subi	r28, 0xBD	; 189
    4faa:	de 4f       	sbci	r29, 0xFE	; 254
    4fac:	e8 81       	ld	r30, Y
    4fae:	f9 81       	ldd	r31, Y+1	; 0x01
    4fb0:	c3 54       	subi	r28, 0x43	; 67
    4fb2:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if (P2_sensors & (1 << RollGyro))
    4fb4:	30 fe       	sbrs	r3, 0
    4fb6:	06 c0       	rjmp	.+12     	; 0x4fc4 <Update_V1_0_to_V1_1+0x308>
		{
			if (P2_scale & (1 << RollScale))
    4fb8:	40 fe       	sbrs	r4, 0
    4fba:	02 c0       	rjmp	.+4      	; 0x4fc0 <Update_V1_0_to_V1_1+0x304>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    4fbc:	10 83       	st	Z, r17
    4fbe:	03 c0       	rjmp	.+6      	; 0x4fc6 <Update_V1_0_to_V1_1+0x30a>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    4fc0:	00 83       	st	Z, r16
    4fc2:	01 c0       	rjmp	.+2      	; 0x4fc6 <Update_V1_0_to_V1_1+0x30a>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    4fc4:	10 82       	st	Z, r1
		// P1 pitch gyro
		if (P1_sensors & (1 << PitchGyro))
		{
			if (P1_scale & (1 << PitchScale))
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    4fc6:	cf 5b       	subi	r28, 0xBF	; 191
    4fc8:	de 4f       	sbci	r29, 0xFE	; 254
    4fca:	e8 81       	ld	r30, Y
    4fcc:	f9 81       	ldd	r31, Y+1	; 0x01
    4fce:	c1 54       	subi	r28, 0x41	; 65
    4fd0:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if (P1_sensors & (1 << PitchGyro))
    4fd2:	51 fe       	sbrs	r5, 1
    4fd4:	06 c0       	rjmp	.+12     	; 0x4fe2 <Update_V1_0_to_V1_1+0x326>
		{
			if (P1_scale & (1 << PitchScale))
    4fd6:	21 ff       	sbrs	r18, 1
    4fd8:	02 c0       	rjmp	.+4      	; 0x4fde <Update_V1_0_to_V1_1+0x322>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    4fda:	10 83       	st	Z, r17
    4fdc:	03 c0       	rjmp	.+6      	; 0x4fe4 <Update_V1_0_to_V1_1+0x328>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    4fde:	00 83       	st	Z, r16
    4fe0:	01 c0       	rjmp	.+2      	; 0x4fe4 <Update_V1_0_to_V1_1+0x328>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    4fe2:	10 82       	st	Z, r1
		// P2 pitch gyro
		if (P2_sensors & (1 << PitchGyro))
		{
			if (P2_scale & (1 << PitchScale))
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    4fe4:	f6 01       	movw	r30, r12
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if (P2_sensors & (1 << PitchGyro))
    4fe6:	31 fe       	sbrs	r3, 1
    4fe8:	06 c0       	rjmp	.+12     	; 0x4ff6 <Update_V1_0_to_V1_1+0x33a>
		{
			if (P2_scale & (1 << PitchScale))
    4fea:	41 fe       	sbrs	r4, 1
    4fec:	02 c0       	rjmp	.+4      	; 0x4ff2 <Update_V1_0_to_V1_1+0x336>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    4fee:	10 83       	st	Z, r17
    4ff0:	03 c0       	rjmp	.+6      	; 0x4ff8 <Update_V1_0_to_V1_1+0x33c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    4ff2:	00 83       	st	Z, r16
    4ff4:	01 c0       	rjmp	.+2      	; 0x4ff8 <Update_V1_0_to_V1_1+0x33c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    4ff6:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if (P1_sensors & (1 << YawGyro))
		{
			if (P1_scale & (1 << YawScale))
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    4ff8:	f5 01       	movw	r30, r10
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if (P1_sensors & (1 << YawGyro))
    4ffa:	52 fe       	sbrs	r5, 2
    4ffc:	06 c0       	rjmp	.+12     	; 0x500a <Update_V1_0_to_V1_1+0x34e>
		{
			if (P1_scale & (1 << YawScale))
    4ffe:	22 ff       	sbrs	r18, 2
    5000:	02 c0       	rjmp	.+4      	; 0x5006 <Update_V1_0_to_V1_1+0x34a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    5002:	10 83       	st	Z, r17
    5004:	03 c0       	rjmp	.+6      	; 0x500c <Update_V1_0_to_V1_1+0x350>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    5006:	00 83       	st	Z, r16
    5008:	01 c0       	rjmp	.+2      	; 0x500c <Update_V1_0_to_V1_1+0x350>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    500a:	10 82       	st	Z, r1
		// P2 yaw gyro
		if (P2_sensors & (1 << YawGyro))
		{
			if (P2_scale & (1 << YawScale))
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    500c:	c3 5b       	subi	r28, 0xB3	; 179
    500e:	de 4f       	sbci	r29, 0xFE	; 254
    5010:	e8 81       	ld	r30, Y
    5012:	f9 81       	ldd	r31, Y+1	; 0x01
    5014:	cd 54       	subi	r28, 0x4D	; 77
    5016:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if (P2_sensors & (1 << YawGyro))
    5018:	32 fe       	sbrs	r3, 2
    501a:	06 c0       	rjmp	.+12     	; 0x5028 <Update_V1_0_to_V1_1+0x36c>
		{
			if (P2_scale & (1 << YawScale))
    501c:	42 fe       	sbrs	r4, 2
    501e:	02 c0       	rjmp	.+4      	; 0x5024 <Update_V1_0_to_V1_1+0x368>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    5020:	10 83       	st	Z, r17
    5022:	03 c0       	rjmp	.+6      	; 0x502a <Update_V1_0_to_V1_1+0x36e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    5024:	00 83       	st	Z, r16
    5026:	01 c0       	rjmp	.+2      	; 0x502a <Update_V1_0_to_V1_1+0x36e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    5028:	10 82       	st	Z, r1
		// P1 roll acc
		if (P1_sensors & (1 << RollAcc))
		{
			if (P1_scale & (1 << AccRollScale))
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    502a:	c1 5b       	subi	r28, 0xB1	; 177
    502c:	de 4f       	sbci	r29, 0xFE	; 254
    502e:	e8 81       	ld	r30, Y
    5030:	f9 81       	ldd	r31, Y+1	; 0x01
    5032:	cf 54       	subi	r28, 0x4F	; 79
    5034:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if (P1_sensors & (1 << RollAcc))
    5036:	53 fe       	sbrs	r5, 3
    5038:	06 c0       	rjmp	.+12     	; 0x5046 <Update_V1_0_to_V1_1+0x38a>
		{
			if (P1_scale & (1 << AccRollScale))
    503a:	23 ff       	sbrs	r18, 3
    503c:	02 c0       	rjmp	.+4      	; 0x5042 <Update_V1_0_to_V1_1+0x386>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    503e:	10 83       	st	Z, r17
    5040:	03 c0       	rjmp	.+6      	; 0x5048 <Update_V1_0_to_V1_1+0x38c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    5042:	00 83       	st	Z, r16
    5044:	01 c0       	rjmp	.+2      	; 0x5048 <Update_V1_0_to_V1_1+0x38c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    5046:	10 82       	st	Z, r1
		// P2 roll acc
		if (P2_sensors & (1 << RollAcc))
		{
			if (P2_scale & (1 << AccRollScale))
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    5048:	cb 5b       	subi	r28, 0xBB	; 187
    504a:	de 4f       	sbci	r29, 0xFE	; 254
    504c:	e8 81       	ld	r30, Y
    504e:	f9 81       	ldd	r31, Y+1	; 0x01
    5050:	c5 54       	subi	r28, 0x45	; 69
    5052:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if (P2_sensors & (1 << RollAcc))
    5054:	33 fe       	sbrs	r3, 3
    5056:	06 c0       	rjmp	.+12     	; 0x5064 <Update_V1_0_to_V1_1+0x3a8>
		{
			if (P2_scale & (1 << AccRollScale))
    5058:	43 fe       	sbrs	r4, 3
    505a:	02 c0       	rjmp	.+4      	; 0x5060 <Update_V1_0_to_V1_1+0x3a4>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    505c:	10 83       	st	Z, r17
    505e:	03 c0       	rjmp	.+6      	; 0x5066 <Update_V1_0_to_V1_1+0x3aa>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    5060:	00 83       	st	Z, r16
    5062:	01 c0       	rjmp	.+2      	; 0x5066 <Update_V1_0_to_V1_1+0x3aa>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    5064:	10 82       	st	Z, r1
		// P1 pitch acc
		if (P1_sensors & (1 << PitchAcc))
		{
			if (P1_scale & (1 << AccPitchScale))
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    5066:	c9 5b       	subi	r28, 0xB9	; 185
    5068:	de 4f       	sbci	r29, 0xFE	; 254
    506a:	e8 81       	ld	r30, Y
    506c:	f9 81       	ldd	r31, Y+1	; 0x01
    506e:	c7 54       	subi	r28, 0x47	; 71
    5070:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if (P1_sensors & (1 << PitchAcc))
    5072:	54 fe       	sbrs	r5, 4
    5074:	06 c0       	rjmp	.+12     	; 0x5082 <Update_V1_0_to_V1_1+0x3c6>
		{
			if (P1_scale & (1 << AccPitchScale))
    5076:	24 ff       	sbrs	r18, 4
    5078:	02 c0       	rjmp	.+4      	; 0x507e <Update_V1_0_to_V1_1+0x3c2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    507a:	10 83       	st	Z, r17
    507c:	03 c0       	rjmp	.+6      	; 0x5084 <Update_V1_0_to_V1_1+0x3c8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    507e:	00 83       	st	Z, r16
    5080:	01 c0       	rjmp	.+2      	; 0x5084 <Update_V1_0_to_V1_1+0x3c8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    5082:	10 82       	st	Z, r1
		// P2 pitch acc
		if (P2_sensors & (1 << PitchAcc))
		{
			if (P2_scale & (1 << AccPitchScale))
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    5084:	c7 5b       	subi	r28, 0xB7	; 183
    5086:	de 4f       	sbci	r29, 0xFE	; 254
    5088:	e8 81       	ld	r30, Y
    508a:	f9 81       	ldd	r31, Y+1	; 0x01
    508c:	c9 54       	subi	r28, 0x49	; 73
    508e:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if (P2_sensors & (1 << PitchAcc))
    5090:	34 fe       	sbrs	r3, 4
    5092:	06 c0       	rjmp	.+12     	; 0x50a0 <Update_V1_0_to_V1_1+0x3e4>
		{
			if (P2_scale & (1 << AccPitchScale))
    5094:	44 fe       	sbrs	r4, 4
    5096:	02 c0       	rjmp	.+4      	; 0x509c <Update_V1_0_to_V1_1+0x3e0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    5098:	10 83       	st	Z, r17
    509a:	03 c0       	rjmp	.+6      	; 0x50a2 <Update_V1_0_to_V1_1+0x3e6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    509c:	00 83       	st	Z, r16
    509e:	01 c0       	rjmp	.+2      	; 0x50a2 <Update_V1_0_to_V1_1+0x3e6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    50a0:	10 82       	st	Z, r1
		// P1 Z delta acc
		if (P1_sensors & (1 << ZDeltaAcc))
		{
			if (P1_scale & (1 << AccZScale))
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    50a2:	c5 5b       	subi	r28, 0xB5	; 181
    50a4:	de 4f       	sbci	r29, 0xFE	; 254
    50a6:	e8 81       	ld	r30, Y
    50a8:	f9 81       	ldd	r31, Y+1	; 0x01
    50aa:	cb 54       	subi	r28, 0x4B	; 75
    50ac:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if (P1_sensors & (1 << ZDeltaAcc))
    50ae:	55 fe       	sbrs	r5, 5
    50b0:	06 c0       	rjmp	.+12     	; 0x50be <Update_V1_0_to_V1_1+0x402>
		{
			if (P1_scale & (1 << AccZScale))
    50b2:	25 ff       	sbrs	r18, 5
    50b4:	02 c0       	rjmp	.+4      	; 0x50ba <Update_V1_0_to_V1_1+0x3fe>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    50b6:	10 83       	st	Z, r17
    50b8:	03 c0       	rjmp	.+6      	; 0x50c0 <Update_V1_0_to_V1_1+0x404>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    50ba:	00 83       	st	Z, r16
    50bc:	01 c0       	rjmp	.+2      	; 0x50c0 <Update_V1_0_to_V1_1+0x404>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    50be:	10 82       	st	Z, r1
		// P2 Z delta acc
		if (P2_sensors & (1 << ZDeltaAcc))
		{
			if (P2_scale & (1 << AccZScale))
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    50c0:	f7 01       	movw	r30, r14
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if (P2_sensors & (1 << ZDeltaAcc))
    50c2:	35 fe       	sbrs	r3, 5
    50c4:	06 c0       	rjmp	.+12     	; 0x50d2 <Update_V1_0_to_V1_1+0x416>
		{
			if (P2_scale & (1 << AccZScale))
    50c6:	45 fe       	sbrs	r4, 5
    50c8:	02 c0       	rjmp	.+4      	; 0x50ce <Update_V1_0_to_V1_1+0x412>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    50ca:	10 83       	st	Z, r17
    50cc:	03 c0       	rjmp	.+6      	; 0x50d4 <Update_V1_0_to_V1_1+0x418>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    50ce:	00 83       	st	Z, r16
    50d0:	01 c0       	rjmp	.+2      	; 0x50d4 <Update_V1_0_to_V1_1+0x418>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    50d2:	10 82       	st	Z, r1
    50d4:	f6 e2       	ldi	r31, 0x26	; 38
    50d6:	8f 0e       	add	r8, r31
    50d8:	91 1c       	adc	r9, r1
    50da:	c1 5c       	subi	r28, 0xC1	; 193
    50dc:	de 4f       	sbci	r29, 0xFE	; 254
    50de:	88 81       	ld	r24, Y
    50e0:	99 81       	ldd	r25, Y+1	; 0x01
    50e2:	cf 53       	subi	r28, 0x3F	; 63
    50e4:	d1 40       	sbci	r29, 0x01	; 1
    50e6:	86 96       	adiw	r24, 0x26	; 38
    50e8:	c1 5c       	subi	r28, 0xC1	; 193
    50ea:	de 4f       	sbci	r29, 0xFE	; 254
    50ec:	99 83       	std	Y+1, r25	; 0x01
    50ee:	88 83       	st	Y, r24
    50f0:	cf 53       	subi	r28, 0x3F	; 63
    50f2:	d1 40       	sbci	r29, 0x01	; 1
    50f4:	cd 5b       	subi	r28, 0xBD	; 189
    50f6:	de 4f       	sbci	r29, 0xFE	; 254
    50f8:	e8 81       	ld	r30, Y
    50fa:	f9 81       	ldd	r31, Y+1	; 0x01
    50fc:	c3 54       	subi	r28, 0x43	; 67
    50fe:	d1 40       	sbci	r29, 0x01	; 1
    5100:	b6 96       	adiw	r30, 0x26	; 38
    5102:	cd 5b       	subi	r28, 0xBD	; 189
    5104:	de 4f       	sbci	r29, 0xFE	; 254
    5106:	f9 83       	std	Y+1, r31	; 0x01
    5108:	e8 83       	st	Y, r30
    510a:	c3 54       	subi	r28, 0x43	; 67
    510c:	d1 40       	sbci	r29, 0x01	; 1
    510e:	cf 5b       	subi	r28, 0xBF	; 191
    5110:	de 4f       	sbci	r29, 0xFE	; 254
    5112:	88 81       	ld	r24, Y
    5114:	99 81       	ldd	r25, Y+1	; 0x01
    5116:	c1 54       	subi	r28, 0x41	; 65
    5118:	d1 40       	sbci	r29, 0x01	; 1
    511a:	86 96       	adiw	r24, 0x26	; 38
    511c:	cf 5b       	subi	r28, 0xBF	; 191
    511e:	de 4f       	sbci	r29, 0xFE	; 254
    5120:	99 83       	std	Y+1, r25	; 0x01
    5122:	88 83       	st	Y, r24
    5124:	c1 54       	subi	r28, 0x41	; 65
    5126:	d1 40       	sbci	r29, 0x01	; 1
    5128:	96 e2       	ldi	r25, 0x26	; 38
    512a:	c9 0e       	add	r12, r25
    512c:	d1 1c       	adc	r13, r1
    512e:	e6 e2       	ldi	r30, 0x26	; 38
    5130:	ee 0e       	add	r14, r30
    5132:	f1 1c       	adc	r15, r1
    5134:	c5 5b       	subi	r28, 0xB5	; 181
    5136:	de 4f       	sbci	r29, 0xFE	; 254
    5138:	88 81       	ld	r24, Y
    513a:	99 81       	ldd	r25, Y+1	; 0x01
    513c:	cb 54       	subi	r28, 0x4B	; 75
    513e:	d1 40       	sbci	r29, 0x01	; 1
    5140:	86 96       	adiw	r24, 0x26	; 38
    5142:	c5 5b       	subi	r28, 0xB5	; 181
    5144:	de 4f       	sbci	r29, 0xFE	; 254
    5146:	99 83       	std	Y+1, r25	; 0x01
    5148:	88 83       	st	Y, r24
    514a:	cb 54       	subi	r28, 0x4B	; 75
    514c:	d1 40       	sbci	r29, 0x01	; 1
    514e:	c7 5b       	subi	r28, 0xB7	; 183
    5150:	de 4f       	sbci	r29, 0xFE	; 254
    5152:	e8 81       	ld	r30, Y
    5154:	f9 81       	ldd	r31, Y+1	; 0x01
    5156:	c9 54       	subi	r28, 0x49	; 73
    5158:	d1 40       	sbci	r29, 0x01	; 1
    515a:	b6 96       	adiw	r30, 0x26	; 38
    515c:	c7 5b       	subi	r28, 0xB7	; 183
    515e:	de 4f       	sbci	r29, 0xFE	; 254
    5160:	f9 83       	std	Y+1, r31	; 0x01
    5162:	e8 83       	st	Y, r30
    5164:	c9 54       	subi	r28, 0x49	; 73
    5166:	d1 40       	sbci	r29, 0x01	; 1
    5168:	c9 5b       	subi	r28, 0xB9	; 185
    516a:	de 4f       	sbci	r29, 0xFE	; 254
    516c:	88 81       	ld	r24, Y
    516e:	99 81       	ldd	r25, Y+1	; 0x01
    5170:	c7 54       	subi	r28, 0x47	; 71
    5172:	d1 40       	sbci	r29, 0x01	; 1
    5174:	86 96       	adiw	r24, 0x26	; 38
    5176:	c9 5b       	subi	r28, 0xB9	; 185
    5178:	de 4f       	sbci	r29, 0xFE	; 254
    517a:	99 83       	std	Y+1, r25	; 0x01
    517c:	88 83       	st	Y, r24
    517e:	c7 54       	subi	r28, 0x47	; 71
    5180:	d1 40       	sbci	r29, 0x01	; 1
    5182:	cb 5b       	subi	r28, 0xBB	; 187
    5184:	de 4f       	sbci	r29, 0xFE	; 254
    5186:	e8 81       	ld	r30, Y
    5188:	f9 81       	ldd	r31, Y+1	; 0x01
    518a:	c5 54       	subi	r28, 0x45	; 69
    518c:	d1 40       	sbci	r29, 0x01	; 1
    518e:	b6 96       	adiw	r30, 0x26	; 38
    5190:	cb 5b       	subi	r28, 0xBB	; 187
    5192:	de 4f       	sbci	r29, 0xFE	; 254
    5194:	f9 83       	std	Y+1, r31	; 0x01
    5196:	e8 83       	st	Y, r30
    5198:	c5 54       	subi	r28, 0x45	; 69
    519a:	d1 40       	sbci	r29, 0x01	; 1
    519c:	c1 5b       	subi	r28, 0xB1	; 177
    519e:	de 4f       	sbci	r29, 0xFE	; 254
    51a0:	88 81       	ld	r24, Y
    51a2:	99 81       	ldd	r25, Y+1	; 0x01
    51a4:	cf 54       	subi	r28, 0x4F	; 79
    51a6:	d1 40       	sbci	r29, 0x01	; 1
    51a8:	86 96       	adiw	r24, 0x26	; 38
    51aa:	c1 5b       	subi	r28, 0xB1	; 177
    51ac:	de 4f       	sbci	r29, 0xFE	; 254
    51ae:	99 83       	std	Y+1, r25	; 0x01
    51b0:	88 83       	st	Y, r24
    51b2:	cf 54       	subi	r28, 0x4F	; 79
    51b4:	d1 40       	sbci	r29, 0x01	; 1
    51b6:	c3 5b       	subi	r28, 0xB3	; 179
    51b8:	de 4f       	sbci	r29, 0xFE	; 254
    51ba:	e8 81       	ld	r30, Y
    51bc:	f9 81       	ldd	r31, Y+1	; 0x01
    51be:	cd 54       	subi	r28, 0x4D	; 77
    51c0:	d1 40       	sbci	r29, 0x01	; 1
    51c2:	b6 96       	adiw	r30, 0x26	; 38
    51c4:	c3 5b       	subi	r28, 0xB3	; 179
    51c6:	de 4f       	sbci	r29, 0xFE	; 254
    51c8:	f9 83       	std	Y+1, r31	; 0x01
    51ca:	e8 83       	st	Y, r30
    51cc:	cd 54       	subi	r28, 0x4D	; 77
    51ce:	d1 40       	sbci	r29, 0x01	; 1
    51d0:	f6 e2       	ldi	r31, 0x26	; 38
    51d2:	af 0e       	add	r10, r31
    51d4:	b1 1c       	adc	r11, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time
	for (i = 0; i < MAX_OUTPUTS; i++)
    51d6:	c3 5c       	subi	r28, 0xC3	; 195
    51d8:	de 4f       	sbci	r29, 0xFE	; 254
    51da:	88 81       	ld	r24, Y
    51dc:	99 81       	ldd	r25, Y+1	; 0x01
    51de:	cd 53       	subi	r28, 0x3D	; 61
    51e0:	d1 40       	sbci	r29, 0x01	; 1
    51e2:	e8 16       	cp	r14, r24
    51e4:	f9 06       	cpc	r15, r25
    51e6:	09 f0       	breq	.+2      	; 0x51ea <Update_V1_0_to_V1_1+0x52e>
    51e8:	8b ce       	rjmp	.-746    	; 0x4f00 <Update_V1_0_to_V1_1+0x244>
	}
	
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)((&Config.setup) + (CHANNEL_V1_0));
	memcpy(dst, src, sizeof(mixer_buffer));
    51ea:	80 e3       	ldi	r24, 0x30	; 48
    51ec:	91 e0       	ldi	r25, 0x01	; 1
    51ee:	fe 01       	movw	r30, r28
    51f0:	31 96       	adiw	r30, 0x01	; 1
    51f2:	ab ec       	ldi	r26, 0xCB	; 203
    51f4:	b6 e0       	ldi	r27, 0x06	; 6
    51f6:	01 90       	ld	r0, Z+
    51f8:	0d 92       	st	X+, r0
    51fa:	01 97       	sbiw	r24, 0x01	; 1
    51fc:	e1 f7       	brne	.-8      	; 0x51f6 <Update_V1_0_to_V1_1+0x53a>
    51fe:	cf 5a       	subi	r28, 0xAF	; 175
    5200:	de 4f       	sbci	r29, 0xFE	; 254
    5202:	98 81       	ld	r25, Y
    5204:	c1 55       	subi	r28, 0x51	; 81
    5206:	d1 40       	sbci	r29, 0x01	; 1
    5208:	97 30       	cpi	r25, 0x07	; 7
    520a:	30 f4       	brcc	.+12     	; 0x5218 <Update_V1_0_to_V1_1+0x55c>
    520c:	e9 2f       	mov	r30, r25
    520e:	f0 e0       	ldi	r31, 0x00	; 0
    5210:	e1 5f       	subi	r30, 0xF1	; 241
    5212:	fa 4f       	sbci	r31, 0xFA	; 250
    5214:	80 81       	ld	r24, Z
    5216:	01 c0       	rjmp	.+2      	; 0x521a <Update_V1_0_to_V1_1+0x55e>
	
	// Convert old filter values to more appropriate ones
	memcpy((void*)&temp,(void*)((&Config.setup) + (GENITEMS_V1_0 + 6)),1);		// Config.Acc_LPF
	temp = convert_filter_V1_0_V1_1(temp);
    5218:	87 e0       	ldi	r24, 0x07	; 7
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 + 6)), &temp, 1);
    521a:	80 93 c7 06 	sts	0x06C7, r24
    521e:	ce 5a       	subi	r28, 0xAE	; 174
    5220:	de 4f       	sbci	r29, 0xFE	; 254
    5222:	e8 81       	ld	r30, Y
    5224:	c2 55       	subi	r28, 0x52	; 82
    5226:	d1 40       	sbci	r29, 0x01	; 1
    5228:	e7 30       	cpi	r30, 0x07	; 7
    522a:	28 f4       	brcc	.+10     	; 0x5236 <Update_V1_0_to_V1_1+0x57a>
    522c:	f0 e0       	ldi	r31, 0x00	; 0
    522e:	e1 5f       	subi	r30, 0xF1	; 241
    5230:	fa 4f       	sbci	r31, 0xFA	; 250
    5232:	80 81       	ld	r24, Z
    5234:	01 c0       	rjmp	.+2      	; 0x5238 <Update_V1_0_to_V1_1+0x57c>

	memcpy((void*)&temp,(void*)((&Config.setup) + (GENITEMS_V1_0 + 7)),1);		// Config.Gyro_LPF
	temp = convert_filter_V1_0_V1_1(temp);
    5236:	87 e0       	ldi	r24, 0x07	; 7
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 + 7)), &temp, 1);	
    5238:	80 93 c8 06 	sts	0x06C8, r24
	
	// Finally, copy the RudderPol value up into its new location
	memcpy((void*)((&Config.setup) + (RUDDERPOL_V1_1)),(void*)&buffer[9],1);	// RudderPol
    523c:	20 92 41 08 	sts	0x0841, r2
}
    5240:	cd 5a       	subi	r28, 0xAD	; 173
    5242:	de 4f       	sbci	r29, 0xFE	; 254
    5244:	0f b6       	in	r0, 0x3f	; 63
    5246:	f8 94       	cli
    5248:	de bf       	out	0x3e, r29	; 62
    524a:	0f be       	out	0x3f, r0	; 63
    524c:	cd bf       	out	0x3d, r28	; 61
    524e:	df 91       	pop	r29
    5250:	cf 91       	pop	r28
    5252:	1f 91       	pop	r17
    5254:	0f 91       	pop	r16
    5256:	ff 90       	pop	r15
    5258:	ef 90       	pop	r14
    525a:	df 90       	pop	r13
    525c:	cf 90       	pop	r12
    525e:	bf 90       	pop	r11
    5260:	af 90       	pop	r10
    5262:	9f 90       	pop	r9
    5264:	8f 90       	pop	r8
    5266:	7f 90       	pop	r7
    5268:	6f 90       	pop	r6
    526a:	5f 90       	pop	r5
    526c:	4f 90       	pop	r4
    526e:	3f 90       	pop	r3
    5270:	2f 90       	pop	r2
    5272:	08 95       	ret

00005274 <Update_V1_1_to_V1_2>:

// Upgrade V1.1 structure to V1.2
void Update_V1_1_to_V1_2(void)
{
    5274:	cf 93       	push	r28
    5276:	e0 91 c9 06 	lds	r30, 0x06C9
    527a:	e1 50       	subi	r30, 0x01	; 1
    527c:	ea 30       	cpi	r30, 0x0A	; 10
    527e:	28 f4       	brcc	.+10     	; 0x528a <Update_V1_1_to_V1_2+0x16>
    5280:	f0 e0       	ldi	r31, 0x00	; 0
    5282:	e5 5e       	subi	r30, 0xE5	; 229
    5284:	fa 4f       	sbci	r31, 0xFA	; 250
    5286:	80 81       	ld	r24, Z
    5288:	01 c0       	rjmp	.+2      	; 0x528c <Update_V1_1_to_V1_2+0x18>
	memcpy((void*)&temp,(void*)((&Config.setup) + (ALCORRECT_V1_1)),1);			// Config.CF_factor

	// Convert old Config.CF_factor to new
	// (old) 1 = 10% 2 = 11%, 3 = 12.5%, 4 = 14%, 5 = 17%, 60= 20%, 7 = 25%, 8 = 33%, 9 = 50%, 10 = 100%
	// (newest) 11 = 10%, 10 = 20%, 9 = 30%, 8 = 40%, 7 = 50%, 6 = 60%, 5 = 70%, 4 = 80%, 3 = 90%, 2 = 100%
	switch(temp)
    528a:	86 e0       	ldi	r24, 0x06	; 6
			temp = 6;
			break;		
	}
	
	// Write updated Config.CF_factor value
	memcpy((void*)((&Config.setup) + (ALCORRECT_V1_1)),(void*)&temp,1);
    528c:	80 93 c9 06 	sts	0x06C9, r24
		
	// Copy AileronPol from RCitems to its new location
	memcpy((void*)((&Config.setup) + (RUDDERPOL_V1_1 + 1)),(void*)((&Config.setup) + (RCITEMS_V1_0 + 7)),1);
    5290:	80 91 69 06 	lds	r24, 0x0669
    5294:	80 93 42 08 	sts	0x0842, r24
	
	// Set the new Vibe value to OFF
	memset((void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), OFF, 1);
    5298:	10 92 69 06 	sts	0x0669, r1
    529c:	e0 91 c1 06 	lds	r30, 0x06C1
    52a0:	e1 50       	subi	r30, 0x01	; 1
    52a2:	e5 30       	cpi	r30, 0x05	; 5
    52a4:	28 f4       	brcc	.+10     	; 0x52b0 <Update_V1_1_to_V1_2+0x3c>
    52a6:	f0 e0       	ldi	r31, 0x00	; 0
    52a8:	ea 5e       	subi	r30, 0xEA	; 234
    52aa:	fa 4f       	sbci	r31, 0xFA	; 250
    52ac:	c0 81       	ld	r28, Z
    52ae:	01 c0       	rjmp	.+2      	; 0x52b2 <Update_V1_1_to_V1_2+0x3e>

	// Update the orientation byte to be the P2 orientation
	memcpy((void*)&Orientation_P2,(void*)((&Config.setup) + (GENITEMS_V1_0)),1);
	
	// Convert to new 24-orientation system
	switch(Orientation_P2)
    52b0:	c0 e0       	ldi	r28, 0x00	; 0
			Orientation_P2 = UP_BACK;
			break;	
	}

	// Clear new data area at end of data											// Log pointer onwards
	memset((void*)((&Config.setup) + (V1_2_NEWDATA)), 0, 43);
    52b2:	8b e2       	ldi	r24, 0x2B	; 43
    52b4:	e3 e4       	ldi	r30, 0x43	; 67
    52b6:	f8 e0       	ldi	r31, 0x08	; 8
    52b8:	df 01       	movw	r26, r30
    52ba:	1d 92       	st	X+, r1
    52bc:	8a 95       	dec	r24
    52be:	e9 f7       	brne	.-6      	; 0x52ba <Update_V1_1_to_V1_2+0x46>
	
	// Move everything from Config.Contrast up by one byte to make room for Config.P1_Reference	
	// AileronPol has already been moved up past RudderPol so we need to add one byte
	memmove((void*)((&Config.setup) + (GENITEMS_V1_0 + 2)), (void*)((&Config.setup) + (GENITEMS_V1_0 + 1)), ((RUDDERPOL_V1_1 + 1) - (GENITEMS_V1_0 + 1))); // (520 + 1 - 136 + 1 = 386 bytes)
    52c0:	40 e8       	ldi	r20, 0x80	; 128
    52c2:	51 e0       	ldi	r21, 0x01	; 1
    52c4:	62 ec       	ldi	r22, 0xC2	; 194
    52c6:	76 e0       	ldi	r23, 0x06	; 6
    52c8:	83 ec       	ldi	r24, 0xC3	; 195
    52ca:	96 e0       	ldi	r25, 0x06	; 6
    52cc:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>

	// Save updated orientation
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 )),(void*)&Orientation_P2,1);	// Updated P2 orientation value
    52d0:	c0 93 c1 06 	sts	0x06C1, r28
	memset((void*)((&Config.setup) + (GENITEMS_V1_0 + 1)), NO_ORIENT, 1);			// New P1_Reference
    52d4:	10 92 c2 06 	sts	0x06C2, r1
	
}
    52d8:	cf 91       	pop	r28
    52da:	08 95       	ret

000052dc <Update_V1_2_to_V1_3B1>:

// Upgrade V1.2 structure to V1.3
void Update_V1_2_to_V1_3B1(void)
{
    52dc:	e0 ef       	ldi	r30, 0xF0	; 240
    52de:	f6 e0       	ldi	r31, 0x06	; 6
    52e0:	df 01       	movw	r26, r30
    52e2:	16 97       	sbiw	r26, 0x06	; 6

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    52e4:	8c 91       	ld	r24, X
    52e6:	8c 5f       	subi	r24, 0xFC	; 252
	
	// Update all source settings in output mixers
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), 1);	// P1_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    52e8:	8c 93       	st	X, r24
    52ea:	12 96       	adiw	r26, 0x02	; 2

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    52ec:	8c 91       	ld	r24, X
    52ee:	8c 5f       	subi	r24, 0xFC	; 252
	{
		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), 1);	// P1_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), convert_source_V1_2_V1_3(source), 1);

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), 1);	// P2_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    52f0:	8c 93       	st	X, r24
    52f2:	12 96       	adiw	r26, 0x02	; 2

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    52f4:	8c 91       	ld	r24, X
    52f6:	8c 5f       	subi	r24, 0xFC	; 252

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), 1);	// P2_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), convert_source_V1_2_V1_3(source), 1);

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), 1);	// P1_source_b
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    52f8:	8c 93       	st	X, r24

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    52fa:	80 81       	ld	r24, Z
    52fc:	8c 5f       	subi	r24, 0xFC	; 252

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), 1);	// P1_source_b
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), convert_source_V1_2_V1_3(source), 1);

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 36 + (i * 38))), 1);	// P2_source_b
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 36 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    52fe:	80 83       	st	Z, r24
    5300:	b6 96       	adiw	r30, 0x26	; 38
	
	// So why all this weird code? Rememeber we cannot use any structure references in *this code* to reference old structures.
	// As such all references must be hard-coded with offsets to the version they were originally compiled with.
	
	// Update all source settings in output mixers
	for (i = 0; i < MAX_OUTPUTS; i++)
    5302:	68 e0       	ldi	r22, 0x08	; 8
    5304:	e0 32       	cpi	r30, 0x20	; 32
    5306:	f6 07       	cpc	r31, r22
    5308:	59 f7       	brne	.-42     	; 0x52e0 <Update_V1_2_to_V1_3B1+0x4>

	// Set new data to defaults
	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), 0, 1);		// Config.Curve[i].Point1
    530a:	10 92 6c 08 	sts	0x086C, r1
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), 17, 1);	// Config.Curve[i].Point2
    530e:	51 e1       	ldi	r21, 0x11	; 17
    5310:	50 93 6d 08 	sts	0x086D, r21
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), 33, 1);	// Config.Curve[i].Point3
    5314:	41 e2       	ldi	r20, 0x21	; 33
    5316:	40 93 6e 08 	sts	0x086E, r20
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 50, 1);	// Config.Curve[i].Point4
    531a:	32 e3       	ldi	r19, 0x32	; 50
    531c:	30 93 6f 08 	sts	0x086F, r19
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 67, 1);	// Config.Curve[i].Point5
    5320:	23 e4       	ldi	r18, 0x43	; 67
    5322:	20 93 70 08 	sts	0x0870, r18
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 83, 1);	// Config.Curve[i].Point6
    5326:	93 e5       	ldi	r25, 0x53	; 83
    5328:	90 93 71 08 	sts	0x0871, r25
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
    532c:	84 e6       	ldi	r24, 0x64	; 100
    532e:	80 93 72 08 	sts	0x0872, r24

	// Set new data to defaults
	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), 0, 1);		// Config.Curve[i].Point1
    5332:	10 92 74 08 	sts	0x0874, r1
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), 17, 1);	// Config.Curve[i].Point2
    5336:	50 93 75 08 	sts	0x0875, r21
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), 33, 1);	// Config.Curve[i].Point3
    533a:	40 93 76 08 	sts	0x0876, r20
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 50, 1);	// Config.Curve[i].Point4
    533e:	30 93 77 08 	sts	0x0877, r19
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 67, 1);	// Config.Curve[i].Point5
    5342:	20 93 78 08 	sts	0x0878, r18
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 83, 1);	// Config.Curve[i].Point6
    5346:	90 93 79 08 	sts	0x0879, r25
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
    534a:	80 93 7a 08 	sts	0x087A, r24
    534e:	ec e7       	ldi	r30, 0x7C	; 124
    5350:	f8 e0       	ldi	r31, 0x08	; 8
	}

	// Curves 2 to 6
	for (i = 2; i < NUMBEROFCURVES; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), -100, 1);	// Config.Curve[i].Point1
    5352:	5c e9       	ldi	r21, 0x9C	; 156
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), -67, 1);	// Config.Curve[i].Point2
    5354:	4d eb       	ldi	r20, 0xBD	; 189
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), -33, 1);	// Config.Curve[i].Point3
    5356:	3f ed       	ldi	r19, 0xDF	; 223
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 0, 1);		// Config.Curve[i].Point4
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 33, 1);	// Config.Curve[i].Point5
    5358:	21 e2       	ldi	r18, 0x21	; 33
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 67, 1);	// Config.Curve[i].Point6
    535a:	93 e4       	ldi	r25, 0x43	; 67
	}

	// Curves 2 to 6
	for (i = 2; i < NUMBEROFCURVES; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), -100, 1);	// Config.Curve[i].Point1
    535c:	50 83       	st	Z, r21
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), -67, 1);	// Config.Curve[i].Point2
    535e:	41 83       	std	Z+1, r20	; 0x01
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), -33, 1);	// Config.Curve[i].Point3
    5360:	32 83       	std	Z+2, r19	; 0x02
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 0, 1);		// Config.Curve[i].Point4
    5362:	13 82       	std	Z+3, r1	; 0x03
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 33, 1);	// Config.Curve[i].Point5
    5364:	24 83       	std	Z+4, r18	; 0x04
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 67, 1);	// Config.Curve[i].Point6
    5366:	95 83       	std	Z+5, r25	; 0x05
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
    5368:	86 83       	std	Z+6, r24	; 0x06
    536a:	38 96       	adiw	r30, 0x08	; 8
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 83, 1);	// Config.Curve[i].Point6
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
	}

	// Curves 2 to 6
	for (i = 2; i < NUMBEROFCURVES; i++)
    536c:	68 e0       	ldi	r22, 0x08	; 8
    536e:	ec 39       	cpi	r30, 0x9C	; 156
    5370:	f6 07       	cpc	r31, r22
    5372:	a1 f7       	brne	.-24     	; 0x535c <Update_V1_2_to_V1_3B1+0x80>
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 67, 1);	// Config.Curve[i].Point6
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
	}

	// Set curve channel sources
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 7)), THROTTLE, 1);	// Config.Curve[0].channel
    5374:	10 92 73 08 	sts	0x0873, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 15)), THROTTLE, 1);	// Config.Curve[1].channel
    5378:	10 92 7b 08 	sts	0x087B, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 23)), THROTTLE, 1);	// Config.Curve[2].channel
    537c:	10 92 83 08 	sts	0x0883, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 31)), THROTTLE, 1);	// Config.Curve[3].channel
    5380:	10 92 8b 08 	sts	0x088B, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 39)), NOMIX, 1);		// Config.Curve[4].channel
    5384:	84 e1       	ldi	r24, 0x14	; 20
    5386:	80 93 93 08 	sts	0x0893, r24
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 47)), NOMIX, 1);		// Config.Curve[5].channel
    538a:	80 93 9b 08 	sts	0x089B, r24
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	fc 01       	movw	r30, r24
    5394:	e2 51       	subi	r30, 0x12	; 18
    5396:	fe 4f       	sbci	r31, 0xFE	; 254

	// Preset custom channel order to JR
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		memset((void*)((&Config.setup) + (CUSTOM_CH_ORD_V1_3_B1 + i)), pgm_read_byte(&JR[i]), 1);
    5398:	e4 91       	lpm	r30, Z
    539a:	dc 01       	movw	r26, r24
    539c:	a4 56       	subi	r26, 0x64	; 100
    539e:	b7 4f       	sbci	r27, 0xF7	; 247
    53a0:	ec 93       	st	X, r30
    53a2:	01 96       	adiw	r24, 0x01	; 1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 31)), THROTTLE, 1);	// Config.Curve[3].channel
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 39)), NOMIX, 1);		// Config.Curve[4].channel
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 47)), NOMIX, 1);		// Config.Curve[5].channel

	// Preset custom channel order to JR
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    53a4:	88 30       	cpi	r24, 0x08	; 8
    53a6:	91 05       	cpc	r25, r1
    53a8:	a1 f7       	brne	.-24     	; 0x5392 <Update_V1_2_to_V1_3B1+0xb6>
	{
		memset((void*)((&Config.setup) + (CUSTOM_CH_ORD_V1_3_B1 + i)), pgm_read_byte(&JR[i]), 1);
	}
}
    53aa:	08 95       	ret

000053ac <Update_V1_3B1_to_V1_3B14>:

void Update_V1_3B1_to_V1_3B14(void)
{
    53ac:	1f 93       	push	r17
    53ae:	cf 93       	push	r28
    53b0:	df 93       	push	r29
	int8_t TransitionSpeedOut = 0;
	
	// Copy Config.TransitionSpeedOut locally
	memcpy((void*)&TransitionSpeedOut, (void*)((&Config.setup) + (RCITEMS_V1_0 + 5)), 1);
    53b2:	c9 e3       	ldi	r28, 0x39	; 57
    53b4:	d6 e0       	ldi	r29, 0x06	; 6
    53b6:	1e a5       	ldd	r17, Y+46	; 0x2e
	
	// Move everything from Config.Transition_P1n up by one byte to make room for Config.TransitionSpeedIn
	memmove((void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), (void*)((&Config.setup) + (RCITEMS_V1_0 + 6)), (LAST_BYTE_V1_3B14 - (RCITEMS_V1_0 + 6))); // 619 - (41 + 6) = 572 bytes)
    53b8:	4c e3       	ldi	r20, 0x3C	; 60
    53ba:	52 e0       	ldi	r21, 0x02	; 2
    53bc:	68 e6       	ldi	r22, 0x68	; 104
    53be:	76 e0       	ldi	r23, 0x06	; 6
    53c0:	89 e6       	ldi	r24, 0x69	; 105
    53c2:	96 e0       	ldi	r25, 0x06	; 6
    53c4:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>

	// Preset new variable to same as TransitionSpeedOut;
	Config.TransitionSpeedIn = TransitionSpeedOut;
    53c8:	1f a7       	std	Y+47, r17	; 0x2f

	// Set magic number to V1.3 B1 signature
	Config.setup = V1_3_B14_SIGNATURE;
    53ca:	8f e3       	ldi	r24, 0x3F	; 63
    53cc:	88 83       	st	Y, r24
}
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	1f 91       	pop	r17
    53d4:	08 95       	ret

000053d6 <Update_V1_3B14_to_V1_3B15>:

// Upgrade V1.3 B14 structure to V1.3 B15 structure
void Update_V1_3B14_to_V1_3B15(void)
{
    53d6:	0f 93       	push	r16
    53d8:	1f 93       	push	r17
    53da:	cf 93       	push	r28
    53dc:	df 93       	push	r29
    53de:	cd b7       	in	r28, 0x3d	; 61
    53e0:	de b7       	in	r29, 0x3e	; 62
    53e2:	c0 53       	subi	r28, 0x30	; 48
    53e4:	d1 40       	sbci	r29, 0x01	; 1
    53e6:	0f b6       	in	r0, 0x3f	; 63
    53e8:	f8 94       	cli
    53ea:	de bf       	out	0x3e, r29	; 62
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	cd bf       	out	0x3d, r28	; 61
	uint8_t		*src;
	uint8_t		*dst;
	uint8_t		mixer_buffer[V1_3_OLDSIZE * 8];	// 38 * 8 = 304 bytes

	// Copy the old channel[] structure into buffer
	memcpy((void*)mixer_buffer, (void*)((&Config.setup) + (CHANNEL_V1_3_B14)), (V1_3_OLDSIZE * 8)); // 148, 38
    53f0:	80 e3       	ldi	r24, 0x30	; 48
    53f2:	91 e0       	ldi	r25, 0x01	; 1
    53f4:	ed ec       	ldi	r30, 0xCD	; 205
    53f6:	f6 e0       	ldi	r31, 0x06	; 6
    53f8:	de 01       	movw	r26, r28
    53fa:	11 96       	adiw	r26, 0x01	; 1
    53fc:	01 90       	ld	r0, Z+
    53fe:	0d 92       	st	X+, r0
    5400:	01 97       	sbiw	r24, 0x01	; 1
    5402:	e1 f7       	brne	.-8      	; 0x53fc <Update_V1_3B14_to_V1_3B15+0x26>
    5404:	ce 01       	movw	r24, r28
    5406:	01 96       	adiw	r24, 0x01	; 1
    5408:	20 e0       	ldi	r18, 0x00	; 0
    540a:	30 e0       	ldi	r19, 0x00	; 0
	{
		dst = (void*)((&Config.setup) + (CHANNEL_V1_3_B15)); // 148
		src = (void*)mixer_buffer;
		dst += (i * V1_3_NEWSIZE);			// Step to next location for new data in the buffer
		src += (i * V1_3_OLDSIZE);			// Step to next old data in (corrupted) config structure
		memcpy(dst, src, 5);				// Move the five bytes (P1_value, P2_value and Motor_marker bytes)
    540c:	45 e0       	ldi	r20, 0x05	; 5
    540e:	d9 01       	movw	r26, r18
    5410:	a3 53       	subi	r26, 0x33	; 51
    5412:	b9 4f       	sbci	r27, 0xF9	; 249
    5414:	fc 01       	movw	r30, r24
    5416:	54 2f       	mov	r21, r20
    5418:	01 90       	ld	r0, Z+
    541a:	0d 92       	st	X+, r0
    541c:	5a 95       	dec	r21
    541e:	e1 f7       	brne	.-8      	; 0x5418 <Update_V1_3B14_to_V1_3B15+0x42>
    5420:	2e 5d       	subi	r18, 0xDE	; 222
    5422:	3f 4f       	sbci	r19, 0xFF	; 255
    5424:	86 96       	adiw	r24, 0x26	; 38
	// Copy the old channel[] structure into buffer
	memcpy((void*)mixer_buffer, (void*)((&Config.setup) + (CHANNEL_V1_3_B14)), (V1_3_OLDSIZE * 8)); // 148, 38

	// Copy the old channel[] structure out of the buffer buffer, compressed to match the new (smaller) structure
	// Start with the P1_value, P2_value and Motor_marker bytes (5 bytes)
	for (i = 0; i < MAX_OUTPUTS; i++)
    5426:	20 31       	cpi	r18, 0x10	; 16
    5428:	51 e0       	ldi	r21, 0x01	; 1
    542a:	35 07       	cpc	r19, r21
    542c:	81 f7       	brne	.-32     	; 0x540e <Update_V1_3B14_to_V1_3B15+0x38>
    542e:	9e 01       	movw	r18, r28
    5430:	26 5f       	subi	r18, 0xF6	; 246
    5432:	3f 4f       	sbci	r19, 0xFF	; 255
    5434:	80 e0       	ldi	r24, 0x00	; 0
    5436:	90 e0       	ldi	r25, 0x00	; 0
		dst = (void*)((&Config.setup) + (P1_THR_V1_3_B15)); // 153
		src = (void*)mixer_buffer;
		src += (P1_THR_V1_3_B14 - CHANNEL_V1_3_B15);	// 9 byte offset to P1_throttle_volume. 157 - 148 = 9
		dst += (i * V1_3_NEWSIZE);						// Step to next location for new data in the buffer
		src += (i * V1_3_OLDSIZE);						// Step to next old data in (corrupted) config structure
		memcpy(dst, src, 29);							// Move the 29 bytes (P1_throttle_volume to end)
    5438:	4d e1       	ldi	r20, 0x1D	; 29
    543a:	dc 01       	movw	r26, r24
    543c:	ae 52       	subi	r26, 0x2E	; 46
    543e:	b9 4f       	sbci	r27, 0xF9	; 249
    5440:	f9 01       	movw	r30, r18
    5442:	54 2f       	mov	r21, r20
    5444:	01 90       	ld	r0, Z+
    5446:	0d 92       	st	X+, r0
    5448:	5a 95       	dec	r21
    544a:	e1 f7       	brne	.-8      	; 0x5444 <Update_V1_3B14_to_V1_3B15+0x6e>
    544c:	82 96       	adiw	r24, 0x22	; 34
    544e:	2a 5d       	subi	r18, 0xDA	; 218
    5450:	3f 4f       	sbci	r19, 0xFF	; 255
		memcpy(dst, src, 5);				// Move the five bytes (P1_value, P2_value and Motor_marker bytes)
	}

	// Copy the rest of the old channel[] structure out of the buffer buffer, compressed to match the new (smaller) structure
	// Start with the P1_throttle_volume and end with the P2_source_b_volume byte (29 bytes)
	for (i = 0; i < MAX_OUTPUTS; i++)
    5452:	80 31       	cpi	r24, 0x10	; 16
    5454:	a1 e0       	ldi	r26, 0x01	; 1
    5456:	9a 07       	cpc	r25, r26
    5458:	81 f7       	brne	.-32     	; 0x543a <Update_V1_3B14_to_V1_3B15+0x64>
		src += (i * V1_3_OLDSIZE);						// Step to next old data in (corrupted) config structure
		memcpy(dst, src, 29);							// Move the 29 bytes (P1_throttle_volume to end)
	}

	// Move data that exists after the B14 channel mixer to new location
	memmove((void*)((&Config.setup) + (SERVOREV_V1_3B15)), (void*)((&Config.setup) + (SERVOREV_V1_3B14)), (LAST_BYTE_V1_3B14 - SERVOREV_V1_3B14)); // (619-452 = 167 bytes)
    545a:	47 ea       	ldi	r20, 0xA7	; 167
    545c:	50 e0       	ldi	r21, 0x00	; 0
    545e:	6d ef       	ldi	r22, 0xFD	; 253
    5460:	77 e0       	ldi	r23, 0x07	; 7
    5462:	8d ed       	ldi	r24, 0xDD	; 221
    5464:	97 e0       	ldi	r25, 0x07	; 7
    5466:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>

	// Clear new offset curves to zero (flat)
	memset((void*)((&Config.setup) + (OFFSETS_V1_3_B15)), 0, (sizeof(curve_t) * MAX_OUTPUTS));
    546a:	10 e4       	ldi	r17, 0x40	; 64
    546c:	e5 e8       	ldi	r30, 0x85	; 133
    546e:	f8 e0       	ldi	r31, 0x08	; 8
    5470:	df 01       	movw	r26, r30
    5472:	51 2f       	mov	r21, r17
    5474:	1d 92       	st	X+, r1
    5476:	5a 95       	dec	r21
    5478:	e9 f7       	brne	.-6      	; 0x5474 <Update_V1_3B14_to_V1_3B15+0x9e>

	// Adjust for new Config.Transition_P1, Config.Transition_P2 variables
	// Copy Config.TransitionSpeedOut locally
	memcpy((void*)&Transition_P1n, (void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), 1);
    547a:	00 91 69 06 	lds	r16, 0x0669
	
	// Move everything from Config.Transition_P1n up by two bytes to make room for new variables
	memmove((void*)((&Config.setup) + (RCITEMS_V1_0 + 9)), (void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), (LAST_BYTE_V1_3B15 - (RCITEMS_V1_0 + 7))); // 653 - (41 + 7) = 605 bytes)
    547e:	4d e5       	ldi	r20, 0x5D	; 93
    5480:	52 e0       	ldi	r21, 0x02	; 2
    5482:	69 e6       	ldi	r22, 0x69	; 105
    5484:	76 e0       	ldi	r23, 0x06	; 6
    5486:	8b e6       	ldi	r24, 0x6B	; 107
    5488:	96 e0       	ldi	r25, 0x06	; 6
    548a:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>

	// Preset new variables
	Config.Transition_P1 = 0;
    548e:	10 92 69 06 	sts	0x0669, r1
	Config.Transition_P1n = Transition_P1n;
    5492:	00 93 6a 06 	sts	0x066A, r16
	Config.Transition_P2 = 100;
    5496:	84 e6       	ldi	r24, 0x64	; 100
    5498:	80 93 6b 06 	sts	0x066B, r24
		
	// Set magic number to V1.3 B15 signature
	Config.setup = V1_3_B15_SIGNATURE;
    549c:	10 93 39 06 	sts	0x0639, r17
}
    54a0:	c0 5d       	subi	r28, 0xD0	; 208
    54a2:	de 4f       	sbci	r29, 0xFE	; 254
    54a4:	0f b6       	in	r0, 0x3f	; 63
    54a6:	f8 94       	cli
    54a8:	de bf       	out	0x3e, r29	; 62
    54aa:	0f be       	out	0x3f, r0	; 63
    54ac:	cd bf       	out	0x3d, r28	; 61
    54ae:	df 91       	pop	r29
    54b0:	cf 91       	pop	r28
    54b2:	1f 91       	pop	r17
    54b4:	0f 91       	pop	r16
    54b6:	08 95       	ret

000054b8 <Update_V1_3B15_to_V1_3B17>:

void Update_V1_3B15_to_V1_3B17(void)
{
    54b8:	e4 e0       	ldi	r30, 0x04	; 4
    54ba:	f7 e0       	ldi	r31, 0x07	; 7

	// Fix any sources that have "NONE" to match new source list.
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// V1.3 B15 "NONE" will read as "Alt. Damp in B17
		if (Config.Channel[i].P1_source_a == SRC20) Config.Channel[i].P1_source_a = NOMIX;
    54bc:	84 e1       	ldi	r24, 0x14	; 20
    54be:	df 01       	movw	r26, r30
    54c0:	16 97       	sbiw	r26, 0x06	; 6
    54c2:	9c 91       	ld	r25, X
    54c4:	93 31       	cpi	r25, 0x13	; 19
    54c6:	09 f4       	brne	.+2      	; 0x54ca <Update_V1_3B15_to_V1_3B17+0x12>
    54c8:	8c 93       	st	X, r24
    54ca:	df 01       	movw	r26, r30
    54cc:	12 97       	sbiw	r26, 0x02	; 2
		if (Config.Channel[i].P1_source_b == SRC20) Config.Channel[i].P1_source_b = NOMIX;
    54ce:	9c 91       	ld	r25, X
    54d0:	93 31       	cpi	r25, 0x13	; 19
    54d2:	09 f4       	brne	.+2      	; 0x54d6 <Update_V1_3B15_to_V1_3B17+0x1e>
    54d4:	8c 93       	st	X, r24
    54d6:	df 01       	movw	r26, r30
    54d8:	14 97       	sbiw	r26, 0x04	; 4
		if (Config.Channel[i].P2_source_a == SRC20) Config.Channel[i].P2_source_a = NOMIX;
    54da:	9c 91       	ld	r25, X
    54dc:	93 31       	cpi	r25, 0x13	; 19
    54de:	09 f4       	brne	.+2      	; 0x54e2 <Update_V1_3B15_to_V1_3B17+0x2a>
    54e0:	8c 93       	st	X, r24
		if (Config.Channel[i].P2_source_b == SRC20) Config.Channel[i].P2_source_b = NOMIX;
    54e2:	90 81       	ld	r25, Z
    54e4:	93 31       	cpi	r25, 0x13	; 19
    54e6:	09 f4       	brne	.+2      	; 0x54ea <Update_V1_3B15_to_V1_3B17+0x32>
    54e8:	80 83       	st	Z, r24
    54ea:	b2 96       	adiw	r30, 0x22	; 34
void Update_V1_3B15_to_V1_3B17(void)
{
	uint8_t		i;

	// Fix any sources that have "NONE" to match new source list.
	for (i = 0; i < MAX_OUTPUTS; i++)
    54ec:	98 e0       	ldi	r25, 0x08	; 8
    54ee:	e4 31       	cpi	r30, 0x14	; 20
    54f0:	f9 07       	cpc	r31, r25
    54f2:	29 f7       	brne	.-54     	; 0x54be <Update_V1_3B15_to_V1_3B17+0x6>
		if (Config.Channel[i].P2_source_a == SRC20) Config.Channel[i].P2_source_a = NOMIX;
		if (Config.Channel[i].P2_source_b == SRC20) Config.Channel[i].P2_source_b = NOMIX;
	}
	
	// Set magic number to V1.3 B17 signature
	Config.setup = V1_3_B17_SIGNATURE;	
    54f4:	81 e4       	ldi	r24, 0x41	; 65
    54f6:	80 93 39 06 	sts	0x0639, r24
    54fa:	08 95       	ret

000054fc <Update_V1_3_to_V1_4B2>:
}

void Update_V1_3_to_V1_4B2(void)
{
    54fc:	ff 92       	push	r15
    54fe:	0f 93       	push	r16
    5500:	1f 93       	push	r17
    5502:	cf 93       	push	r28
    5504:	df 93       	push	r29
	int8_t elevator_polarity = 0;
	
	// Copy elevator_polarity locally
	memcpy((void*)&elevator_polarity, (void*)((&Config.setup) + (ELE_POL_V1_3)), 1);
    5506:	c9 e3       	ldi	r28, 0x39	; 57
    5508:	d6 e0       	ldi	r29, 0x06	; 6
    550a:	fc a8       	ldd	r15, Y+52	; 0x34
	
	// Set the new AccVertFilter to the default of 20 (old elevator polarity location)
	memset((void*)((&Config.setup) + (ELE_POL_V1_3)), 20, 1);
    550c:	14 e1       	ldi	r17, 0x14	; 20
    550e:	10 93 6d 06 	sts	0x066D, r17
	
	// Move everything from Config.PowerTriggerActual down by 12 bytes to make room for new variables
	memmove((void*)((&Config.setup) + (POWER_TRIG_V1_4)), (void*)((&Config.setup) + (POWER_TRIG_V1_3)), (LAST_BYTE_V1_3B15 - POWER_TRIG_V1_3)); // 653 - 137 = 516 bytes
    5512:	44 e0       	ldi	r20, 0x04	; 4
    5514:	52 e0       	ldi	r21, 0x02	; 2
    5516:	62 ec       	ldi	r22, 0xC2	; 194
    5518:	76 e0       	ldi	r23, 0x06	; 6
    551a:	86 ed       	ldi	r24, 0xD6	; 214
    551c:	96 e0       	ldi	r25, 0x06	; 6
    551e:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>
	
	// Move raw I constraints down 8 bytes
	memmove((void*)((&Config.setup) + (SERVO_CONS_V1_4B8)), (void*)((&Config.setup) + (SERVO_CONS_V1_3)), 24); // 4 x [FLIGHT_MODES][NUMBEROFAXIS] = 24 bytes
    5522:	48 e1       	ldi	r20, 0x18	; 24
    5524:	50 e0       	ldi	r21, 0x00	; 0
    5526:	6a ea       	ldi	r22, 0xAA	; 170
    5528:	76 e0       	ldi	r23, 0x06	; 6
    552a:	86 eb       	ldi	r24, 0xB6	; 182
    552c:	96 e0       	ldi	r25, 0x06	; 6
    552e:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>
	
	// Clear all the I-term constraints as they will be recalculated
	memset((void*)((&Config.setup) + (SERVO_CONS_V1_4B8)), 0, 32);
    5532:	00 e2       	ldi	r16, 0x20	; 32
    5534:	e6 eb       	ldi	r30, 0xB6	; 182
    5536:	f6 e0       	ldi	r31, 0x06	; 6
    5538:	df 01       	movw	r26, r30
    553a:	80 2f       	mov	r24, r16
    553c:	1d 92       	st	X+, r1
    553e:	8a 95       	dec	r24
    5540:	e9 f7       	brne	.-6      	; 0x553c <Update_V1_3_to_V1_4B2+0x40>
	
	// Move raw I limits down 4 bytes
	memmove((void*)((&Config.setup) + (SERVO_LIMS_V1_4B8)), (void*)((&Config.setup) + (SERVO_LIMS_V1_3)), 24); // 4 x [FLIGHT_MODES][NUMBEROFAXIS] = 24 bytes
    5542:	48 e1       	ldi	r20, 0x18	; 24
    5544:	50 e0       	ldi	r21, 0x00	; 0
    5546:	62 e9       	ldi	r22, 0x92	; 146
    5548:	76 e0       	ldi	r23, 0x06	; 6
    554a:	86 e9       	ldi	r24, 0x96	; 150
    554c:	96 e0       	ldi	r25, 0x06	; 6
    554e:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>
	
	// Clear all the I-term limits as they will be recalculated
	memset((void*)((&Config.setup) + (SERVO_LIMS_V1_4B8)), 0, 32);
    5552:	e6 e9       	ldi	r30, 0x96	; 150
    5554:	f6 e0       	ldi	r31, 0x06	; 6
    5556:	df 01       	movw	r26, r30
    5558:	1d 92       	st	X+, r1
    555a:	0a 95       	dec	r16
    555c:	e9 f7       	brne	.-6      	; 0x5558 <Update_V1_3_to_V1_4B2+0x5c>
	
	
	// Move P2 profile down 2 bytes
	memmove((void*)((&Config.setup) + (P2_PROFILE_V1_4B8)), (void*)((&Config.setup) + (P2_PROFILE_V1_3)), (P2_PROFILE_V1_4B8 - P1_PROFILE_V1_4B8)); // (73 - 53 = 18 bytes)
    555e:	44 e1       	ldi	r20, 0x14	; 20
    5560:	50 e0       	ldi	r21, 0x00	; 0
    5562:	60 e8       	ldi	r22, 0x80	; 128
    5564:	76 e0       	ldi	r23, 0x06	; 6
    5566:	82 e8       	ldi	r24, 0x82	; 130
    5568:	96 e0       	ldi	r25, 0x06	; 6
    556a:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>

	// Set the new Z parameters for P1
	memset((void*)((&Config.setup) + (P1_PROFILE_V1_4B8 + 17)), 40, 1);
    556e:	88 e2       	ldi	r24, 0x28	; 40
    5570:	80 93 7f 06 	sts	0x067F, r24
	memset((void*)((&Config.setup) + (P1_PROFILE_V1_4B8 + 18)), 20, 1);
    5574:	10 93 80 06 	sts	0x0680, r17
	memset((void*)((&Config.setup) + (P1_PROFILE_V1_4B8 + 19)), 10, 1);
    5578:	8a e0       	ldi	r24, 0x0A	; 10
    557a:	80 93 81 06 	sts	0x0681, r24

	// Set the new Z parameters for P2
	memset((void*)((&Config.setup) + (P2_PROFILE_V1_4B8 + 17)), 0, 3);
    557e:	10 92 93 06 	sts	0x0693, r1
    5582:	10 92 94 06 	sts	0x0694, r1
    5586:	10 92 95 06 	sts	0x0695, r1
			
	// Preset new variable to same as elevator_polarity
	memset((void*)((&Config.setup) + (ELE_POL_V1_4B8)), elevator_polarity, 1);
    558a:	f0 92 db 08 	sts	0x08DB, r15
	//Config.ElevatorPol = elevator_polarity;

	// Set magic number to V1.4 B2 signature
	Config.setup = V1_4_B2_SIGNATURE;	
    558e:	82 e4       	ldi	r24, 0x42	; 66
    5590:	88 83       	st	Y, r24
}
    5592:	df 91       	pop	r29
    5594:	cf 91       	pop	r28
    5596:	1f 91       	pop	r17
    5598:	0f 91       	pop	r16
    559a:	ff 90       	pop	r15
    559c:	08 95       	ret

0000559e <Update_V1_4B2_to_V1_4B8>:

void Update_V1_4B2_to_V1_4B8(void)
{
	// Move everything from Config.Buzzer down by 1 byte to make room for Config.Buzzer
	memmove((void*)((&Config.setup) + (BUZZER_V1_4B2 + 1)), (void*)((&Config.setup) + (BUZZER_V1_4B2)), (LAST_BYTE_V1_4B2 - BUZZER_V1_4B2)); // 674 - 170 = 504 bytes
    559e:	48 ef       	ldi	r20, 0xF8	; 248
    55a0:	51 e0       	ldi	r21, 0x01	; 1
    55a2:	63 ee       	ldi	r22, 0xE3	; 227
    55a4:	76 e0       	ldi	r23, 0x06	; 6
    55a6:	84 ee       	ldi	r24, 0xE4	; 228
    55a8:	96 e0       	ldi	r25, 0x06	; 6
    55aa:	0e 94 08 70 	call	0xe010	; 0xe010 <memmove>

	// Preset Buzzer to ON
	memset((void*)((&Config.setup) + (BUZZER_V1_4B2)), ON, 1);
    55ae:	81 e0       	ldi	r24, 0x01	; 1
    55b0:	80 93 e3 06 	sts	0x06E3, r24

	// Set magic number to V1.4 B8 signature
	Config.setup = V1_4_B8_SIGNATURE;	
    55b4:	83 e4       	ldi	r24, 0x43	; 67
    55b6:	80 93 39 06 	sts	0x0639, r24
    55ba:	08 95       	ret

000055bc <Load_eeprom_preset>:
	Load_eeprom_preset(QUADX);
	Config.Preset = OPTIONS; // Menu will display "Options"
}

void Load_eeprom_preset(uint8_t preset)
{
    55bc:	cf 93       	push	r28
	uint8_t i;

	// Erase current profile settings
	memset(&Config.FlightMode[P1],0,sizeof(flight_control_t));
    55be:	94 e1       	ldi	r25, 0x14	; 20
    55c0:	ee e6       	ldi	r30, 0x6E	; 110
    55c2:	f6 e0       	ldi	r31, 0x06	; 6
    55c4:	df 01       	movw	r26, r30
    55c6:	29 2f       	mov	r18, r25
    55c8:	1d 92       	st	X+, r1
    55ca:	2a 95       	dec	r18
    55cc:	e9 f7       	brne	.-6      	; 0x55c8 <Load_eeprom_preset+0xc>
	memset(&Config.FlightMode[P2],0,sizeof(flight_control_t));
    55ce:	e2 e8       	ldi	r30, 0x82	; 130
    55d0:	f6 e0       	ldi	r31, 0x06	; 6
    55d2:	df 01       	movw	r26, r30
    55d4:	1d 92       	st	X+, r1
    55d6:	9a 95       	dec	r25
    55d8:	e9 f7       	brne	.-6      	; 0x55d4 <Load_eeprom_preset+0x18>

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);
    55da:	20 e1       	ldi	r18, 0x10	; 16
    55dc:	31 e0       	ldi	r19, 0x01	; 1
    55de:	e4 ee       	ldi	r30, 0xE4	; 228
    55e0:	f6 e0       	ldi	r31, 0x06	; 6
    55e2:	df 01       	movw	r26, r30
    55e4:	a9 01       	movw	r20, r18
    55e6:	1d 92       	st	X+, r1
    55e8:	41 50       	subi	r20, 0x01	; 1
    55ea:	50 40       	sbci	r21, 0x00	; 0
    55ec:	e1 f7       	brne	.-8      	; 0x55e6 <Load_eeprom_preset+0x2a>
    55ee:	a4 e0       	ldi	r26, 0x04	; 4
    55f0:	b8 e0       	ldi	r27, 0x08	; 8
    55f2:	60 e0       	ldi	r22, 0x00	; 0
    55f4:	70 e0       	ldi	r23, 0x00	; 0

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    55f6:	94 e1       	ldi	r25, 0x14	; 20
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    55f8:	cc e9       	ldi	r28, 0x9C	; 156
		Config.max_travel[i] = 100;
    55fa:	54 e6       	ldi	r21, 0x64	; 100
    55fc:	9b 01       	movw	r18, r22
    55fe:	27 5c       	subi	r18, 0xC7	; 199
    5600:	39 4f       	sbci	r19, 0xF9	; 249
    5602:	f9 01       	movw	r30, r18
    5604:	eb 53       	subi	r30, 0x3B	; 59
    5606:	ff 4f       	sbci	r31, 0xFF	; 255
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5608:	44 e1       	ldi	r20, 0x14	; 20
    560a:	90 83       	st	Z, r25
    560c:	34 96       	adiw	r30, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    560e:	90 83       	st	Z, r25
    5610:	32 97       	sbiw	r30, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    5612:	90 83       	st	Z, r25
    5614:	34 96       	adiw	r30, 0x04	; 4
		Config.Channel[i].P2_source_b 	= NOMIX;
    5616:	90 83       	st	Z, r25
    5618:	fd 01       	movw	r30, r26
    561a:	38 97       	sbiw	r30, 0x08	; 8
		Config.min_travel[i] = -100;
    561c:	c0 83       	st	Z, r28
		Config.max_travel[i] = 100;
    561e:	24 e6       	ldi	r18, 0x64	; 100
    5620:	5d 93       	st	X+, r21
    5622:	6e 5d       	subi	r22, 0xDE	; 222
    5624:	7f 4f       	sbci	r23, 0xFF	; 255

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    5626:	60 31       	cpi	r22, 0x10	; 16
    5628:	31 e0       	ldi	r19, 0x01	; 1
    562a:	73 07       	cpc	r23, r19
    562c:	39 f7       	brne	.-50     	; 0x55fc <Load_eeprom_preset+0x40>
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	switch (preset)
    562e:	81 30       	cpi	r24, 0x01	; 1
    5630:	61 f0       	breq	.+24     	; 0x564a <Load_eeprom_preset+0x8e>
    5632:	08 f4       	brcc	.+2      	; 0x5636 <Load_eeprom_preset+0x7a>
    5634:	e7 c0       	rjmp	.+462    	; 0x5804 <Load_eeprom_preset+0x248>
    5636:	82 30       	cpi	r24, 0x02	; 2
    5638:	09 f4       	brne	.+2      	; 0x563c <Load_eeprom_preset+0x80>
    563a:	b3 c1       	rjmp	.+870    	; 0x59a2 <Load_eeprom_preset+0x3e6>
    563c:	83 30       	cpi	r24, 0x03	; 3
    563e:	09 f0       	breq	.+2      	; 0x5642 <Load_eeprom_preset+0x86>
    5640:	83 c2       	rjmp	.+1286   	; 0x5b48 <Load_eeprom_preset+0x58c>
	{
		case BLANK:
			Config.ArmMode = ARMABLE;
    5642:	81 e0       	ldi	r24, 0x01	; 1
    5644:	80 93 db 06 	sts	0x06DB, r24
	
			break;
    5648:	7f c2       	rjmp	.+1278   	; 0x5b48 <Load_eeprom_preset+0x58c>
		
		case QUADP:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    564a:	80 93 db 06 	sts	0x06DB, r24
	
			// Preset AccVertFilter
			Config.AccVertFilter = 20;
    564e:	40 93 6d 06 	sts	0x066D, r20

			// Preset Z-terms for all
			Config.FlightMode[P1].A_Zed_P_mult = 40;
    5652:	28 e2       	ldi	r18, 0x28	; 40
    5654:	20 93 7f 06 	sts	0x067F, r18
			Config.FlightMode[P1].A_Zed_I_mult = 20;
    5658:	40 93 80 06 	sts	0x0680, r20
			Config.FlightMode[P1].A_Zed_limit = 10;
    565c:	9a e0       	ldi	r25, 0x0A	; 10
    565e:	90 93 81 06 	sts	0x0681, r25
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 50;
    5662:	42 e3       	ldi	r20, 0x32	; 50
    5664:	40 93 6e 06 	sts	0x066E, r20
			Config.FlightMode[P1].Roll_I_mult = 10;
    5668:	90 93 6f 06 	sts	0x066F, r25
			Config.FlightMode[P1].Roll_limit = 10;
    566c:	90 93 70 06 	sts	0x0670, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    5670:	32 e0       	ldi	r19, 0x02	; 2
    5672:	30 93 71 06 	sts	0x0671, r19
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    5676:	90 93 72 06 	sts	0x0672, r25
			
			Config.FlightMode[P1].Pitch_P_mult = 50;
    567a:	40 93 74 06 	sts	0x0674, r20
			Config.FlightMode[P1].Pitch_I_mult = 10;
    567e:	90 93 75 06 	sts	0x0675, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    5682:	90 93 76 06 	sts	0x0676, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    5686:	30 93 77 06 	sts	0x0677, r19
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    568a:	90 93 78 06 	sts	0x0678, r25
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    568e:	5c e3       	ldi	r21, 0x3C	; 60
    5690:	50 93 7a 06 	sts	0x067A, r21
			Config.FlightMode[P1].Yaw_I_mult = 40;
    5694:	20 93 7b 06 	sts	0x067B, r18
			Config.FlightMode[P1].Yaw_limit = 25;
    5698:	49 e1       	ldi	r20, 0x19	; 25
    569a:	40 93 7c 06 	sts	0x067C, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    569e:	30 93 7d 06 	sts	0x067D, r19
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    56a2:	20 93 82 06 	sts	0x0682, r18
			Config.FlightMode[P2].Roll_I_mult = 19;
    56a6:	63 e1       	ldi	r22, 0x13	; 19
    56a8:	60 93 83 06 	sts	0x0683, r22
			Config.FlightMode[P2].Roll_limit = 14;
    56ac:	3e e0       	ldi	r19, 0x0E	; 14
    56ae:	30 93 84 06 	sts	0x0684, r19
			Config.FlightMode[P2].Roll_Rate = 3;
    56b2:	93 e0       	ldi	r25, 0x03	; 3
    56b4:	90 93 85 06 	sts	0x0685, r25
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    56b8:	80 93 86 06 	sts	0x0686, r24
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    56bc:	20 93 88 06 	sts	0x0688, r18
			Config.FlightMode[P2].Pitch_I_mult = 19;
    56c0:	60 93 89 06 	sts	0x0689, r22
			Config.FlightMode[P2].Pitch_limit = 14;
    56c4:	30 93 8a 06 	sts	0x068A, r19
			Config.FlightMode[P2].Pitch_Rate = 3;
    56c8:	90 93 8b 06 	sts	0x068B, r25
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    56cc:	80 93 8c 06 	sts	0x068C, r24
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    56d0:	50 93 8e 06 	sts	0x068E, r21
			Config.FlightMode[P2].Yaw_I_mult = 40;
    56d4:	20 93 8f 06 	sts	0x068F, r18
			Config.FlightMode[P2].Yaw_limit = 25;
    56d8:	40 93 90 06 	sts	0x0690, r20
			Config.FlightMode[P2].Yaw_Rate = 3;
    56dc:	90 93 91 06 	sts	0x0691, r25
    56e0:	40 e0       	ldi	r20, 0x00	; 0
    56e2:	50 e0       	ldi	r21, 0x00	; 0
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    56e4:	74 e6       	ldi	r23, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    56e6:	a2 e0       	ldi	r26, 0x02	; 2
				Config.Channel[i].P1_Z_delta_acc = ON;
    56e8:	61 e0       	ldi	r22, 0x01	; 1
    56ea:	9a 01       	movw	r18, r20
    56ec:	27 5c       	subi	r18, 0xC7	; 199
    56ee:	39 4f       	sbci	r19, 0xF9	; 249
    56f0:	f9 01       	movw	r30, r18
    56f2:	e0 55       	subi	r30, 0x50	; 80
    56f4:	ff 4f       	sbci	r31, 0xFF	; 255
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    56f6:	94 e6       	ldi	r25, 0x64	; 100
    56f8:	70 83       	st	Z, r23
    56fa:	31 96       	adiw	r30, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    56fc:	70 83       	st	Z, r23
    56fe:	32 97       	sbiw	r30, 0x02	; 2
				Config.Channel[i].Motor_marker = MOTOR;
    5700:	a0 83       	st	Z, r26
    5702:	74 96       	adiw	r30, 0x14	; 20
				Config.Channel[i].P1_Z_delta_acc = ON;
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	60 83       	st	Z, r22
    5708:	31 96       	adiw	r30, 0x01	; 1
				Config.Channel[i].P2_Z_delta_acc = ON;
    570a:	60 83       	st	Z, r22
    570c:	4e 5d       	subi	r20, 0xDE	; 222
    570e:	5f 4f       	sbci	r21, 0xFF	; 255
			Config.FlightMode[P2].Yaw_P_mult = 60;
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
	
			for (i = 0; i <= OUT4; i++)
    5710:	48 38       	cpi	r20, 0x88	; 136
    5712:	51 05       	cpc	r21, r1
    5714:	51 f7       	brne	.-44     	; 0x56ea <Load_eeprom_preset+0x12e>
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 0;
			Config.Channel[OUT1].P2_aileron_volume = 0;
			Config.Channel[OUT1].P1_elevator_volume = -20;
    5716:	2c ee       	ldi	r18, 0xEC	; 236
    5718:	20 93 ee 06 	sts	0x06EE, r18
			Config.Channel[OUT1].P2_elevator_volume = -30;
    571c:	32 ee       	ldi	r19, 0xE2	; 226
    571e:	30 93 ef 06 	sts	0x06EF, r19
			Config.Channel[OUT1].P1_rudder_volume = -30;
    5722:	30 93 f0 06 	sts	0x06F0, r19
			Config.Channel[OUT1].P2_rudder_volume = -40;
    5726:	68 ed       	ldi	r22, 0xD8	; 216
    5728:	60 93 f1 06 	sts	0x06F1, r22
			Config.Channel[OUT1].P1_Pitch_gyro = ON;
    572c:	80 93 f4 06 	sts	0x06F4, r24
			Config.Channel[OUT1].P1_Pitch_acc = ON;
    5730:	80 93 fa 06 	sts	0x06FA, r24
			Config.Channel[OUT1].P2_Pitch_gyro = ON;
    5734:	80 93 f5 06 	sts	0x06F5, r24
			Config.Channel[OUT1].P2_Pitch_acc = ON;
    5738:	80 93 fb 06 	sts	0x06FB, r24
			Config.Channel[OUT1].P1_Yaw_gyro = ON;
    573c:	80 93 f6 06 	sts	0x06F6, r24
			Config.Channel[OUT1].P2_Yaw_gyro = ON;
    5740:	80 93 f7 06 	sts	0x06F7, r24
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -20;
    5744:	20 93 0e 07 	sts	0x070E, r18
			Config.Channel[OUT2].P2_aileron_volume = -30;
    5748:	30 93 0f 07 	sts	0x070F, r19
			Config.Channel[OUT2].P1_elevator_volume = 0;
			Config.Channel[OUT2].P2_elevator_volume = 0;
			Config.Channel[OUT2].P1_rudder_volume = 30;
    574c:	2e e1       	ldi	r18, 0x1E	; 30
    574e:	20 93 12 07 	sts	0x0712, r18
			Config.Channel[OUT2].P2_rudder_volume = 40;
    5752:	48 e2       	ldi	r20, 0x28	; 40
    5754:	40 93 13 07 	sts	0x0713, r20
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    5758:	80 93 14 07 	sts	0x0714, r24
			Config.Channel[OUT2].P1_Roll_acc = ON;
    575c:	80 93 1a 07 	sts	0x071A, r24
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    5760:	80 93 15 07 	sts	0x0715, r24
			Config.Channel[OUT2].P2_Roll_acc = ON;
    5764:	80 93 1b 07 	sts	0x071B, r24
			Config.Channel[OUT2].P1_Yaw_gyro = ON;
    5768:	80 93 18 07 	sts	0x0718, r24
			Config.Channel[OUT2].P2_Yaw_gyro = ON;
    576c:	80 93 19 07 	sts	0x0719, r24
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = 0;
			Config.Channel[OUT3].P2_aileron_volume = 0;
			Config.Channel[OUT3].P1_elevator_volume = 20;
    5770:	54 e1       	ldi	r21, 0x14	; 20
    5772:	50 93 32 07 	sts	0x0732, r21
			Config.Channel[OUT3].P2_elevator_volume = 30;
    5776:	20 93 33 07 	sts	0x0733, r18
			Config.Channel[OUT3].P1_rudder_volume = -30;
    577a:	30 93 34 07 	sts	0x0734, r19
			Config.Channel[OUT3].P2_rudder_volume = -40;
    577e:	60 93 35 07 	sts	0x0735, r22
			Config.Channel[OUT3].P1_Pitch_gyro = ON;
    5782:	80 93 38 07 	sts	0x0738, r24
			Config.Channel[OUT3].P1_Pitch_acc = ON;
    5786:	80 93 3e 07 	sts	0x073E, r24
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    578a:	80 93 39 07 	sts	0x0739, r24
			Config.Channel[OUT3].P2_Pitch_acc = ON;
    578e:	80 93 3f 07 	sts	0x073F, r24
			Config.Channel[OUT3].P1_Yaw_gyro = ON;
    5792:	80 93 3a 07 	sts	0x073A, r24
			Config.Channel[OUT3].P2_Yaw_gyro = ON;
    5796:	80 93 3b 07 	sts	0x073B, r24
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 20;
    579a:	50 93 52 07 	sts	0x0752, r21
			Config.Channel[OUT4].P2_aileron_volume = 30;
    579e:	20 93 53 07 	sts	0x0753, r18
			Config.Channel[OUT4].P1_elevator_volume = 0;
			Config.Channel[OUT4].P2_elevator_volume = 0;
			Config.Channel[OUT4].P1_rudder_volume = 30;
    57a2:	20 93 56 07 	sts	0x0756, r18
			Config.Channel[OUT4].P2_rudder_volume = 40;
    57a6:	40 93 57 07 	sts	0x0757, r20
			Config.Channel[OUT4].P1_Roll_gyro = ON;
    57aa:	80 93 58 07 	sts	0x0758, r24
			Config.Channel[OUT4].P1_Roll_acc = ON;
    57ae:	80 93 5e 07 	sts	0x075E, r24
			Config.Channel[OUT4].P2_Roll_gyro = ON;
    57b2:	80 93 59 07 	sts	0x0759, r24
			Config.Channel[OUT4].P2_Roll_acc = ON;
    57b6:	80 93 5f 07 	sts	0x075F, r24
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    57ba:	80 93 5c 07 	sts	0x075C, r24
			Config.Channel[OUT4].P2_Yaw_gyro = ON;		
    57be:	80 93 5d 07 	sts	0x075D, r24

			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    57c2:	8b e4       	ldi	r24, 0x4B	; 75
    57c4:	80 93 76 07 	sts	0x0776, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    57c8:	90 93 77 07 	sts	0x0777, r25

			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    57cc:	80 93 96 07 	sts	0x0796, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    57d0:	90 93 97 07 	sts	0x0797, r25

			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    57d4:	80 93 bc 07 	sts	0x07BC, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    57d8:	90 93 bd 07 	sts	0x07BD, r25

			// OUT8
			Config.Offsets[OUT8].Point1 = -100;
    57dc:	8c e9       	ldi	r24, 0x9C	; 156
    57de:	80 93 d4 08 	sts	0x08D4, r24
			Config.Offsets[OUT8].Point2 = -67;
    57e2:	8d eb       	ldi	r24, 0xBD	; 189
    57e4:	80 93 d5 08 	sts	0x08D5, r24
			Config.Offsets[OUT8].Point3 = -33;
    57e8:	8f ed       	ldi	r24, 0xDF	; 223
    57ea:	80 93 d6 08 	sts	0x08D6, r24
			Config.Offsets[OUT8].Point4 = 0;
    57ee:	10 92 d7 08 	sts	0x08D7, r1
			Config.Offsets[OUT8].Point5 = 33;
    57f2:	81 e2       	ldi	r24, 0x21	; 33
    57f4:	80 93 d8 08 	sts	0x08D8, r24
			Config.Offsets[OUT8].Point6 = 67;
    57f8:	83 e4       	ldi	r24, 0x43	; 67
    57fa:	80 93 d9 08 	sts	0x08D9, r24
			Config.Offsets[OUT8].Point7 = 100;	
    57fe:	90 93 da 08 	sts	0x08DA, r25
			break;
    5802:	a2 c1       	rjmp	.+836    	; 0x5b48 <Load_eeprom_preset+0x58c>
				
		case QUADX:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    5804:	31 e0       	ldi	r19, 0x01	; 1
    5806:	30 93 db 06 	sts	0x06DB, r19

			// Preset AccVertFilter
			Config.AccVertFilter = 20;
    580a:	40 93 6d 06 	sts	0x066D, r20

			// Preset Z-terms for all
			Config.FlightMode[P1].A_Zed_P_mult = 40;
    580e:	88 e2       	ldi	r24, 0x28	; 40
    5810:	80 93 7f 06 	sts	0x067F, r24
			Config.FlightMode[P1].A_Zed_I_mult = 20;
    5814:	40 93 80 06 	sts	0x0680, r20
			Config.FlightMode[P1].A_Zed_limit = 10;
    5818:	9a e0       	ldi	r25, 0x0A	; 10
    581a:	90 93 81 06 	sts	0x0681, r25
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    581e:	80 93 6e 06 	sts	0x066E, r24
			Config.FlightMode[P1].Roll_I_mult = 10;
    5822:	90 93 6f 06 	sts	0x066F, r25
			Config.FlightMode[P1].Roll_limit = 10;
    5826:	90 93 70 06 	sts	0x0670, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    582a:	22 e0       	ldi	r18, 0x02	; 2
    582c:	20 93 71 06 	sts	0x0671, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    5830:	90 93 72 06 	sts	0x0672, r25
	
			Config.FlightMode[P1].Pitch_P_mult = 40;
    5834:	80 93 74 06 	sts	0x0674, r24
			Config.FlightMode[P1].Pitch_I_mult = 10;
    5838:	90 93 75 06 	sts	0x0675, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    583c:	90 93 76 06 	sts	0x0676, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    5840:	20 93 77 06 	sts	0x0677, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    5844:	90 93 78 06 	sts	0x0678, r25
	
			Config.FlightMode[P1].Yaw_P_mult = 60;
    5848:	4c e3       	ldi	r20, 0x3C	; 60
    584a:	40 93 7a 06 	sts	0x067A, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    584e:	80 93 7b 06 	sts	0x067B, r24
			Config.FlightMode[P1].Yaw_limit = 25;
    5852:	99 e1       	ldi	r25, 0x19	; 25
    5854:	90 93 7c 06 	sts	0x067C, r25
			Config.FlightMode[P1].Yaw_Rate = 2;
    5858:	20 93 7d 06 	sts	0x067D, r18
	
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    585c:	80 93 82 06 	sts	0x0682, r24
			Config.FlightMode[P2].Roll_I_mult = 19;
    5860:	73 e1       	ldi	r23, 0x13	; 19
    5862:	70 93 83 06 	sts	0x0683, r23
			Config.FlightMode[P2].Roll_limit = 14;
    5866:	6e e0       	ldi	r22, 0x0E	; 14
    5868:	60 93 84 06 	sts	0x0684, r22
			Config.FlightMode[P2].Roll_Rate = 3;
    586c:	53 e0       	ldi	r21, 0x03	; 3
    586e:	50 93 85 06 	sts	0x0685, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    5872:	30 93 86 06 	sts	0x0686, r19
	
			Config.FlightMode[P2].Pitch_P_mult = 40;
    5876:	80 93 88 06 	sts	0x0688, r24
			Config.FlightMode[P2].Pitch_I_mult = 19;
    587a:	70 93 89 06 	sts	0x0689, r23
			Config.FlightMode[P2].Pitch_limit = 14;
    587e:	60 93 8a 06 	sts	0x068A, r22
			Config.FlightMode[P2].Pitch_Rate = 3;
    5882:	50 93 8b 06 	sts	0x068B, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    5886:	30 93 8c 06 	sts	0x068C, r19
	
			Config.FlightMode[P2].Yaw_P_mult = 60;
    588a:	40 93 8e 06 	sts	0x068E, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    588e:	80 93 8f 06 	sts	0x068F, r24
			Config.FlightMode[P2].Yaw_limit = 25;
    5892:	90 93 90 06 	sts	0x0690, r25
			Config.FlightMode[P2].Yaw_Rate = 2;
    5896:	20 93 91 06 	sts	0x0691, r18
    589a:	89 e3       	ldi	r24, 0x39	; 57
    589c:	96 e0       	ldi	r25, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    589e:	44 e6       	ldi	r20, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    58a0:	52 e0       	ldi	r21, 0x02	; 2
				Config.Channel[i].P1_Roll_gyro = ON;
    58a2:	21 e0       	ldi	r18, 0x01	; 1
    58a4:	fc 01       	movw	r30, r24
    58a6:	e0 55       	subi	r30, 0x50	; 80
    58a8:	ff 4f       	sbci	r31, 0xFF	; 255
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    58aa:	34 e6       	ldi	r19, 0x64	; 100
    58ac:	40 83       	st	Z, r20
    58ae:	31 96       	adiw	r30, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    58b0:	40 83       	st	Z, r20
    58b2:	32 97       	sbiw	r30, 0x02	; 2
				Config.Channel[i].Motor_marker = MOTOR;
    58b4:	50 83       	st	Z, r21
    58b6:	3a 96       	adiw	r30, 0x0a	; 10
				Config.Channel[i].P1_Roll_gyro = ON;
    58b8:	20 83       	st	Z, r18
    58ba:	36 96       	adiw	r30, 0x06	; 6
				Config.Channel[i].P1_Roll_acc = ON;
    58bc:	20 83       	st	Z, r18
    58be:	35 97       	sbiw	r30, 0x05	; 5
				Config.Channel[i].P2_Roll_gyro = ON;
    58c0:	20 83       	st	Z, r18
    58c2:	36 96       	adiw	r30, 0x06	; 6
				Config.Channel[i].P2_Roll_acc = ON;
    58c4:	20 83       	st	Z, r18
    58c6:	35 97       	sbiw	r30, 0x05	; 5
				Config.Channel[i].P1_Pitch_gyro = ON;
    58c8:	20 83       	st	Z, r18
    58ca:	36 96       	adiw	r30, 0x06	; 6
				Config.Channel[i].P1_Pitch_acc = ON;
    58cc:	20 83       	st	Z, r18
    58ce:	35 97       	sbiw	r30, 0x05	; 5
				Config.Channel[i].P2_Pitch_gyro = ON;
    58d0:	20 83       	st	Z, r18
    58d2:	36 96       	adiw	r30, 0x06	; 6
				Config.Channel[i].P2_Pitch_acc = ON;
    58d4:	20 83       	st	Z, r18
    58d6:	35 97       	sbiw	r30, 0x05	; 5
				Config.Channel[i].P1_Yaw_gyro = ON;
    58d8:	20 83       	st	Z, r18
    58da:	31 96       	adiw	r30, 0x01	; 1
				Config.Channel[i].P2_Yaw_gyro = ON;
    58dc:	20 83       	st	Z, r18
    58de:	35 96       	adiw	r30, 0x05	; 5
				Config.Channel[i].P1_Z_delta_acc = ON;
    58e0:	20 83       	st	Z, r18
    58e2:	31 96       	adiw	r30, 0x01	; 1
				Config.Channel[i].P2_Z_delta_acc = ON;
    58e4:	20 83       	st	Z, r18
    58e6:	82 96       	adiw	r24, 0x22	; 34
			Config.FlightMode[P2].Yaw_P_mult = 60;
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
	
			for (i = 0; i <= OUT4; i++)
    58e8:	66 e0       	ldi	r22, 0x06	; 6
    58ea:	81 3c       	cpi	r24, 0xC1	; 193
    58ec:	96 07       	cpc	r25, r22
    58ee:	d1 f6       	brne	.-76     	; 0x58a4 <Load_eeprom_preset+0x2e8>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 15;
    58f0:	9f e0       	ldi	r25, 0x0F	; 15
    58f2:	90 93 ec 06 	sts	0x06EC, r25
			Config.Channel[OUT1].P2_aileron_volume = 20;
    58f6:	84 e1       	ldi	r24, 0x14	; 20
    58f8:	80 93 ed 06 	sts	0x06ED, r24
			Config.Channel[OUT1].P1_elevator_volume = -15;
    58fc:	41 ef       	ldi	r20, 0xF1	; 241
    58fe:	40 93 ee 06 	sts	0x06EE, r20
			Config.Channel[OUT1].P2_elevator_volume = -20;
    5902:	2c ee       	ldi	r18, 0xEC	; 236
    5904:	20 93 ef 06 	sts	0x06EF, r18
			Config.Channel[OUT1].P1_rudder_volume = -40;
    5908:	e8 ed       	ldi	r30, 0xD8	; 216
    590a:	e0 93 f0 06 	sts	0x06F0, r30
			Config.Channel[OUT1].P2_rudder_volume = -50;
    590e:	7e ec       	ldi	r23, 0xCE	; 206
    5910:	70 93 f1 06 	sts	0x06F1, r23
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -15;
    5914:	40 93 0e 07 	sts	0x070E, r20
			Config.Channel[OUT2].P2_aileron_volume = -20;
    5918:	20 93 0f 07 	sts	0x070F, r18
			Config.Channel[OUT2].P1_elevator_volume = -15;
    591c:	40 93 10 07 	sts	0x0710, r20
			Config.Channel[OUT2].P2_elevator_volume = -20;
    5920:	20 93 11 07 	sts	0x0711, r18
			Config.Channel[OUT2].P1_rudder_volume = 40;
    5924:	68 e2       	ldi	r22, 0x28	; 40
    5926:	60 93 12 07 	sts	0x0712, r22
			Config.Channel[OUT2].P2_rudder_volume = 50;
    592a:	52 e3       	ldi	r21, 0x32	; 50
    592c:	50 93 13 07 	sts	0x0713, r21
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = -15;
    5930:	40 93 30 07 	sts	0x0730, r20
			Config.Channel[OUT3].P2_aileron_volume = -20;
    5934:	20 93 31 07 	sts	0x0731, r18
			Config.Channel[OUT3].P1_elevator_volume = 15;
    5938:	90 93 32 07 	sts	0x0732, r25
			Config.Channel[OUT3].P2_elevator_volume = 20;
    593c:	80 93 33 07 	sts	0x0733, r24
			Config.Channel[OUT3].P1_rudder_volume = -40;
    5940:	e0 93 34 07 	sts	0x0734, r30
			Config.Channel[OUT3].P2_rudder_volume = -50;
    5944:	70 93 35 07 	sts	0x0735, r23
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 15;
    5948:	90 93 52 07 	sts	0x0752, r25
			Config.Channel[OUT4].P2_aileron_volume = 20;
    594c:	80 93 53 07 	sts	0x0753, r24
			Config.Channel[OUT4].P1_elevator_volume = 15;
    5950:	90 93 54 07 	sts	0x0754, r25
			Config.Channel[OUT4].P2_elevator_volume = 20;
    5954:	80 93 55 07 	sts	0x0755, r24
			Config.Channel[OUT4].P1_rudder_volume = 40;
    5958:	60 93 56 07 	sts	0x0756, r22
			Config.Channel[OUT4].P2_rudder_volume = 50;
    595c:	50 93 57 07 	sts	0x0757, r21

			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    5960:	8b e4       	ldi	r24, 0x4B	; 75
    5962:	80 93 76 07 	sts	0x0776, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    5966:	30 93 77 07 	sts	0x0777, r19
			
			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    596a:	80 93 96 07 	sts	0x0796, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    596e:	30 93 97 07 	sts	0x0797, r19
						
			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    5972:	80 93 bc 07 	sts	0x07BC, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    5976:	30 93 bd 07 	sts	0x07BD, r19
									
			// OUT8
			Config.Offsets[OUT8].Point1 = -100;
    597a:	8c e9       	ldi	r24, 0x9C	; 156
    597c:	80 93 d4 08 	sts	0x08D4, r24
			Config.Offsets[OUT8].Point2 = -67;
    5980:	8d eb       	ldi	r24, 0xBD	; 189
    5982:	80 93 d5 08 	sts	0x08D5, r24
			Config.Offsets[OUT8].Point3 = -33;
    5986:	8f ed       	ldi	r24, 0xDF	; 223
    5988:	80 93 d6 08 	sts	0x08D6, r24
			Config.Offsets[OUT8].Point4 = 0;
    598c:	10 92 d7 08 	sts	0x08D7, r1
			Config.Offsets[OUT8].Point5 = 33;
    5990:	81 e2       	ldi	r24, 0x21	; 33
    5992:	80 93 d8 08 	sts	0x08D8, r24
			Config.Offsets[OUT8].Point6 = 67;
    5996:	83 e4       	ldi	r24, 0x43	; 67
    5998:	80 93 d9 08 	sts	0x08D9, r24
			Config.Offsets[OUT8].Point7 = 100;
    599c:	30 93 da 08 	sts	0x08DA, r19
			break;
    59a0:	d3 c0       	rjmp	.+422    	; 0x5b48 <Load_eeprom_preset+0x58c>
		
		case TRICOPTER:
			// Preset simple mixing for primary channels
			Config.ArmMode = ARMABLE;
    59a2:	91 e0       	ldi	r25, 0x01	; 1
    59a4:	90 93 db 06 	sts	0x06DB, r25

			// Preset AccVertFilter
			Config.AccVertFilter = 20;
    59a8:	40 93 6d 06 	sts	0x066D, r20

			// Preset Z-terms for all
			Config.FlightMode[P1].A_Zed_P_mult = 40;
    59ac:	38 e2       	ldi	r19, 0x28	; 40
    59ae:	30 93 7f 06 	sts	0x067F, r19
			Config.FlightMode[P1].A_Zed_I_mult = 20;
    59b2:	40 93 80 06 	sts	0x0680, r20
			Config.FlightMode[P1].A_Zed_limit = 10;
    59b6:	4a e0       	ldi	r20, 0x0A	; 10
    59b8:	40 93 81 06 	sts	0x0681, r20
					
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    59bc:	30 93 6e 06 	sts	0x066E, r19
			Config.FlightMode[P1].Roll_I_mult = 10;
    59c0:	40 93 6f 06 	sts	0x066F, r20
			Config.FlightMode[P1].Roll_limit = 10;
    59c4:	40 93 70 06 	sts	0x0670, r20
			Config.FlightMode[P1].Roll_Rate = 2;
    59c8:	80 93 71 06 	sts	0x0671, r24
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    59cc:	40 93 72 06 	sts	0x0672, r20
			
			Config.FlightMode[P1].Pitch_P_mult = 40;
    59d0:	30 93 74 06 	sts	0x0674, r19
			Config.FlightMode[P1].Pitch_I_mult = 10;
    59d4:	40 93 75 06 	sts	0x0675, r20
			Config.FlightMode[P1].Pitch_limit = 10;
    59d8:	40 93 76 06 	sts	0x0676, r20
			Config.FlightMode[P1].Pitch_Rate = 2;
    59dc:	80 93 77 06 	sts	0x0677, r24
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    59e0:	40 93 78 06 	sts	0x0678, r20
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    59e4:	5c e3       	ldi	r21, 0x3C	; 60
    59e6:	50 93 7a 06 	sts	0x067A, r21
			Config.FlightMode[P1].Yaw_I_mult = 40;
    59ea:	30 93 7b 06 	sts	0x067B, r19
			Config.FlightMode[P1].Yaw_limit = 25;
    59ee:	49 e1       	ldi	r20, 0x19	; 25
    59f0:	40 93 7c 06 	sts	0x067C, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    59f4:	80 93 7d 06 	sts	0x067D, r24
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    59f8:	30 93 82 06 	sts	0x0682, r19
			Config.FlightMode[P2].Roll_I_mult = 19;
    59fc:	e3 e1       	ldi	r30, 0x13	; 19
    59fe:	e0 93 83 06 	sts	0x0683, r30
			Config.FlightMode[P2].Roll_limit = 14;
    5a02:	7e e0       	ldi	r23, 0x0E	; 14
    5a04:	70 93 84 06 	sts	0x0684, r23
			Config.FlightMode[P2].Roll_Rate = 3;
    5a08:	63 e0       	ldi	r22, 0x03	; 3
    5a0a:	60 93 85 06 	sts	0x0685, r22
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    5a0e:	90 93 86 06 	sts	0x0686, r25
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    5a12:	30 93 88 06 	sts	0x0688, r19
			Config.FlightMode[P2].Pitch_I_mult = 19;
    5a16:	e0 93 89 06 	sts	0x0689, r30
			Config.FlightMode[P2].Pitch_limit = 14;
    5a1a:	70 93 8a 06 	sts	0x068A, r23
			Config.FlightMode[P2].Pitch_Rate = 3;
    5a1e:	60 93 8b 06 	sts	0x068B, r22
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    5a22:	90 93 8c 06 	sts	0x068C, r25
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    5a26:	50 93 8e 06 	sts	0x068E, r21
			Config.FlightMode[P2].Yaw_I_mult = 40;
    5a2a:	30 93 8f 06 	sts	0x068F, r19
			Config.FlightMode[P2].Yaw_limit = 25;
    5a2e:	40 93 90 06 	sts	0x0690, r20
			Config.FlightMode[P2].Yaw_Rate = 2;
    5a32:	80 93 91 06 	sts	0x0691, r24
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5a36:	20 93 e9 06 	sts	0x06E9, r18
				Config.Channel[i].P2_throttle_volume = 100;
    5a3a:	20 93 ea 06 	sts	0x06EA, r18
				Config.Channel[i].Motor_marker = MOTOR;
    5a3e:	80 93 e8 06 	sts	0x06E8, r24
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5a42:	20 93 0b 07 	sts	0x070B, r18
				Config.Channel[i].P2_throttle_volume = 100;
    5a46:	20 93 0c 07 	sts	0x070C, r18
				Config.Channel[i].Motor_marker = MOTOR;
    5a4a:	80 93 0a 07 	sts	0x070A, r24
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5a4e:	20 93 2d 07 	sts	0x072D, r18
				Config.Channel[i].P2_throttle_volume = 100;
    5a52:	20 93 2e 07 	sts	0x072E, r18
				Config.Channel[i].Motor_marker = MOTOR;
    5a56:	80 93 2c 07 	sts	0x072C, r24
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 30;
    5a5a:	4e e1       	ldi	r20, 0x1E	; 30
    5a5c:	40 93 ec 06 	sts	0x06EC, r20
			Config.Channel[OUT1].P2_aileron_volume = 40;
    5a60:	30 93 ed 06 	sts	0x06ED, r19
			Config.Channel[OUT1].P1_elevator_volume = -15;
    5a64:	61 ef       	ldi	r22, 0xF1	; 241
    5a66:	60 93 ee 06 	sts	0x06EE, r22
			Config.Channel[OUT1].P2_elevator_volume = -20;
    5a6a:	5c ee       	ldi	r21, 0xEC	; 236
    5a6c:	50 93 ef 06 	sts	0x06EF, r21
			Config.Channel[OUT1].P1_Roll_gyro = ON;
    5a70:	90 93 f2 06 	sts	0x06F2, r25
			Config.Channel[OUT1].P1_Roll_acc = ON;
    5a74:	90 93 f8 06 	sts	0x06F8, r25
			Config.Channel[OUT1].P2_Roll_gyro = ON;
    5a78:	90 93 f3 06 	sts	0x06F3, r25
			Config.Channel[OUT1].P2_Roll_acc = ON;
    5a7c:	90 93 f9 06 	sts	0x06F9, r25
			Config.Channel[OUT1].P1_Pitch_gyro = SCALE;
    5a80:	80 93 f4 06 	sts	0x06F4, r24
			Config.Channel[OUT1].P1_Pitch_acc = SCALE;
    5a84:	80 93 fa 06 	sts	0x06FA, r24
			Config.Channel[OUT1].P2_Pitch_gyro = SCALE;
    5a88:	80 93 f5 06 	sts	0x06F5, r24
			Config.Channel[OUT1].P2_Pitch_acc = SCALE;
    5a8c:	80 93 fb 06 	sts	0x06FB, r24
			Config.Channel[OUT1].P1_Z_delta_acc = ON;
    5a90:	90 93 fc 06 	sts	0x06FC, r25
			Config.Channel[OUT1].P2_Z_delta_acc = ON;
    5a94:	90 93 fd 06 	sts	0x06FD, r25
		
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -30;
    5a98:	72 ee       	ldi	r23, 0xE2	; 226
    5a9a:	70 93 0e 07 	sts	0x070E, r23
			Config.Channel[OUT2].P2_aileron_volume = -40;
    5a9e:	78 ed       	ldi	r23, 0xD8	; 216
    5aa0:	70 93 0f 07 	sts	0x070F, r23
			Config.Channel[OUT2].P1_elevator_volume = -15;
    5aa4:	60 93 10 07 	sts	0x0710, r22
			Config.Channel[OUT2].P2_elevator_volume = -20;
    5aa8:	50 93 11 07 	sts	0x0711, r21
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    5aac:	90 93 14 07 	sts	0x0714, r25
			Config.Channel[OUT2].P1_Roll_acc = ON;
    5ab0:	90 93 1a 07 	sts	0x071A, r25
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    5ab4:	90 93 15 07 	sts	0x0715, r25
			Config.Channel[OUT2].P2_Roll_acc = ON;
    5ab8:	90 93 1b 07 	sts	0x071B, r25
			Config.Channel[OUT2].P1_Pitch_gyro = SCALE;
    5abc:	80 93 16 07 	sts	0x0716, r24
			Config.Channel[OUT2].P1_Pitch_acc = SCALE;
    5ac0:	80 93 1c 07 	sts	0x071C, r24
			Config.Channel[OUT2].P2_Pitch_gyro = SCALE;
    5ac4:	80 93 17 07 	sts	0x0717, r24
			Config.Channel[OUT2].P2_Pitch_acc = SCALE;
    5ac8:	80 93 1d 07 	sts	0x071D, r24
			Config.Channel[OUT2].P1_Z_delta_acc = ON;
    5acc:	90 93 1e 07 	sts	0x071E, r25
			Config.Channel[OUT2].P2_Z_delta_acc = ON;
    5ad0:	90 93 1f 07 	sts	0x071F, r25
		
			// OUT3
			Config.Channel[OUT3].P1_elevator_volume = 30;
    5ad4:	40 93 32 07 	sts	0x0732, r20
			Config.Channel[OUT3].P2_elevator_volume = 40;
    5ad8:	30 93 33 07 	sts	0x0733, r19
			Config.Channel[OUT3].P1_Pitch_gyro = SCALE;
    5adc:	80 93 38 07 	sts	0x0738, r24
			Config.Channel[OUT3].P1_Pitch_acc = SCALE;
    5ae0:	80 93 3e 07 	sts	0x073E, r24
			Config.Channel[OUT3].P2_Pitch_gyro = SCALE;
    5ae4:	80 93 39 07 	sts	0x0739, r24
			Config.Channel[OUT3].P2_Pitch_acc = SCALE;
    5ae8:	80 93 3f 07 	sts	0x073F, r24
			Config.Channel[OUT3].P1_Z_delta_acc = ON;
    5aec:	90 93 40 07 	sts	0x0740, r25
			Config.Channel[OUT3].P2_Z_delta_acc = ON;
    5af0:	90 93 41 07 	sts	0x0741, r25
			
			// OUT4
			Config.Channel[OUT4].Motor_marker = ASERVO;
    5af4:	10 92 4e 07 	sts	0x074E, r1
			Config.Channel[OUT4].P1_rudder_volume = 75;
    5af8:	8b e4       	ldi	r24, 0x4B	; 75
    5afa:	80 93 56 07 	sts	0x0756, r24
			Config.Channel[OUT4].P2_rudder_volume = 100;
    5afe:	20 93 57 07 	sts	0x0757, r18
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    5b02:	90 93 5c 07 	sts	0x075C, r25
			Config.Channel[OUT4].P2_Yaw_gyro = ON;
    5b06:	90 93 5d 07 	sts	0x075D, r25
			
			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    5b0a:	80 93 76 07 	sts	0x0776, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    5b0e:	20 93 77 07 	sts	0x0777, r18

			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    5b12:	80 93 96 07 	sts	0x0796, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    5b16:	20 93 97 07 	sts	0x0797, r18

			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    5b1a:	80 93 bc 07 	sts	0x07BC, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    5b1e:	20 93 bd 07 	sts	0x07BD, r18

			// OUT8
			Config.Offsets[OUT8].Point1 = -100;
    5b22:	8c e9       	ldi	r24, 0x9C	; 156
    5b24:	80 93 d4 08 	sts	0x08D4, r24
			Config.Offsets[OUT8].Point2 = -67;
    5b28:	8d eb       	ldi	r24, 0xBD	; 189
    5b2a:	80 93 d5 08 	sts	0x08D5, r24
			Config.Offsets[OUT8].Point3 = -33;
    5b2e:	8f ed       	ldi	r24, 0xDF	; 223
    5b30:	80 93 d6 08 	sts	0x08D6, r24
			Config.Offsets[OUT8].Point4 = 0;
    5b34:	10 92 d7 08 	sts	0x08D7, r1
			Config.Offsets[OUT8].Point5 = 33;
    5b38:	81 e2       	ldi	r24, 0x21	; 33
    5b3a:	80 93 d8 08 	sts	0x08D8, r24
			Config.Offsets[OUT8].Point6 = 67;
    5b3e:	83 e4       	ldi	r24, 0x43	; 67
    5b40:	80 93 d9 08 	sts	0x08D9, r24
			Config.Offsets[OUT8].Point7 = 100;
    5b44:	20 93 da 08 	sts	0x08DA, r18
			break;
		
		default:
			break;
	}
    5b48:	cf 91       	pop	r28
    5b4a:	08 95       	ret

00005b4c <Set_EEPROM_Default_Config>:
	return new_source;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    5b4c:	cf 93       	push	r28
    5b4e:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    5b50:	84 ea       	ldi	r24, 0xA4	; 164
    5b52:	92 e0       	ldi	r25, 0x02	; 2
    5b54:	e9 e3       	ldi	r30, 0x39	; 57
    5b56:	f6 e0       	ldi	r31, 0x06	; 6
    5b58:	df 01       	movw	r26, r30
    5b5a:	9c 01       	movw	r18, r24
    5b5c:	1d 92       	st	X+, r1
    5b5e:	21 50       	subi	r18, 0x01	; 1
    5b60:	30 40       	sbci	r19, 0x00	; 0
    5b62:	e1 f7       	brne	.-8      	; 0x5b5c <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    5b64:	84 e4       	ldi	r24, 0x44	; 68
    5b66:	80 93 39 06 	sts	0x0639, r24

	// General
	Config.Orientation_P2 = UP_BACK;
	Config.RxMode = SBUS;
    5b6a:	82 e0       	ldi	r24, 0x02	; 2
    5b6c:	80 93 62 06 	sts	0x0662, r24
	Config.FlightChan = GEAR;
    5b70:	24 e0       	ldi	r18, 0x04	; 4
    5b72:	20 93 66 06 	sts	0x0666, r18
	Config.ArmMode = ARMABLE;
    5b76:	91 e0       	ldi	r25, 0x01	; 1
    5b78:	90 93 db 06 	sts	0x06DB, r25
	Config.Servo_rate = FAST;
    5b7c:	80 93 63 06 	sts	0x0663, r24
	Config.PWM_Sync = GEAR;
    5b80:	20 93 64 06 	sts	0x0664, r18
	Config.Acc_LPF = HZ21;
    5b84:	80 93 df 06 	sts	0x06DF, r24
	Config.Gyro_LPF = NOFILTER;
    5b88:	87 e0       	ldi	r24, 0x07	; 7
    5b8a:	80 93 e0 06 	sts	0x06E0, r24
	Config.MPU6050_LPF = HZ44;
    5b8e:	83 e0       	ldi	r24, 0x03	; 3
    5b90:	80 93 de 06 	sts	0x06DE, r24
	Config.CF_factor = 6;
    5b94:	86 e0       	ldi	r24, 0x06	; 6
    5b96:	80 93 e1 06 	sts	0x06E1, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    5b9a:	8e e1       	ldi	r24, 0x1E	; 30
    5b9c:	80 93 dc 06 	sts	0x06DC, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    5ba0:	82 e3       	ldi	r24, 0x32	; 50
    5ba2:	80 93 6a 06 	sts	0x066A, r24
	Config.Transition_P1 = 0;
	Config.Transition_P2 = 100;	
    5ba6:	84 e6       	ldi	r24, 0x64	; 100
    5ba8:	80 93 6b 06 	sts	0x066B, r24
	Config.AccVertFilter = 20;
    5bac:	84 e1       	ldi	r24, 0x14	; 20
    5bae:	80 93 6d 06 	sts	0x066D, r24
	Config.Buzzer = ON;
    5bb2:	90 93 e3 06 	sts	0x06E3, r25
	// Advanced
	Config.Orientation_P1 = UP_BACK;
	Config.P1_Reference = NO_ORIENT;
	
	// Preset AccZeroNormZ
	Config.AccZeroNormZ_P1		= 128;
    5bb6:	80 e8       	ldi	r24, 0x80	; 128
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
    5bba:	90 93 23 08 	sts	0x0823, r25
    5bbe:	80 93 22 08 	sts	0x0822, r24
	Config.AccZeroNormZ_P2		= 128;
    5bc2:	90 93 58 08 	sts	0x0858, r25
    5bc6:	80 93 57 08 	sts	0x0857, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    5bca:	84 e2       	ldi	r24, 0x24	; 36
    5bcc:	80 93 da 06 	sts	0x06DA, r24
    5bd0:	cc e0       	ldi	r28, 0x0C	; 12
    5bd2:	d8 e0       	ldi	r29, 0x08	; 8
    5bd4:	80 e0       	ldi	r24, 0x00	; 0
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
	// Defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);			// Preset channel order to JR
		Config.CustomChannelOrder[i] = pgm_read_byte(&JR[i]);	// Preset custom channel order to JR
		Config.RxChannelZeroOffset[i] = 3750;					// Reset RX channel offsets
    5bd8:	26 ea       	ldi	r18, 0xA6	; 166
    5bda:	3e e0       	ldi	r19, 0x0E	; 14
    5bdc:	fc 01       	movw	r30, r24
    5bde:	e2 51       	subi	r30, 0x12	; 18
    5be0:	fe 4f       	sbci	r31, 0xFE	; 254
	#endif
	
	// Defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);			// Preset channel order to JR
    5be2:	44 91       	lpm	r20, Z
    5be4:	dc 01       	movw	r26, r24
    5be6:	a7 5c       	subi	r26, 0xC7	; 199
    5be8:	b9 4f       	sbci	r27, 0xF9	; 249
    5bea:	11 96       	adiw	r26, 0x01	; 1
    5bec:	4c 93       	st	X, r20
    5bee:	11 97       	sbiw	r26, 0x01	; 1
		Config.CustomChannelOrder[i] = pgm_read_byte(&JR[i]);	// Preset custom channel order to JR
    5bf0:	e4 91       	lpm	r30, Z
    5bf2:	a5 5a       	subi	r26, 0xA5	; 165
    5bf4:	bd 4f       	sbci	r27, 0xFD	; 253
    5bf6:	ec 93       	st	X, r30
		Config.RxChannelZeroOffset[i] = 3750;					// Reset RX channel offsets
    5bf8:	29 93       	st	Y+, r18
    5bfa:	39 93       	st	Y+, r19
    5bfc:	01 96       	adiw	r24, 0x01	; 1
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
	#endif
	
	// Defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5bfe:	88 30       	cpi	r24, 0x08	; 8
    5c00:	91 05       	cpc	r25, r1
    5c02:	61 f7       	brne	.-40     	; 0x5bdc <Set_EEPROM_Default_Config+0x90>
		Config.RxChannelZeroOffset[i] = 3750;					// Reset RX channel offsets
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	// Otherwise the thorttle high alarm will go off on first power-up
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    5c04:	8e eb       	ldi	r24, 0xBE	; 190
    5c06:	9a e0       	ldi	r25, 0x0A	; 10
    5c08:	90 93 0d 08 	sts	0x080D, r25
    5c0c:	80 93 0c 08 	sts	0x080C, r24
    5c10:	a4 e0       	ldi	r26, 0x04	; 4
    5c12:	b8 e0       	ldi	r27, 0x08	; 8
    5c14:	20 e0       	ldi	r18, 0x00	; 0
    5c16:	30 e0       	ldi	r19, 0x00	; 0

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5c18:	44 e1       	ldi	r20, 0x14	; 20
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    5c1a:	6c e9       	ldi	r22, 0x9C	; 156
		Config.max_travel[i] = 100;
    5c1c:	54 e6       	ldi	r21, 0x64	; 100
    5c1e:	c9 01       	movw	r24, r18
    5c20:	87 5c       	subi	r24, 0xC7	; 199
    5c22:	99 4f       	sbci	r25, 0xF9	; 249
    5c24:	fc 01       	movw	r30, r24
    5c26:	eb 53       	subi	r30, 0x3B	; 59
    5c28:	ff 4f       	sbci	r31, 0xFF	; 255
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5c2a:	40 83       	st	Z, r20
    5c2c:	34 96       	adiw	r30, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    5c2e:	40 83       	st	Z, r20
    5c30:	32 97       	sbiw	r30, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    5c32:	40 83       	st	Z, r20
    5c34:	34 96       	adiw	r30, 0x04	; 4
		Config.Channel[i].P2_source_b 	= NOMIX;
    5c36:	40 83       	st	Z, r20
    5c38:	fd 01       	movw	r30, r26
    5c3a:	38 97       	sbiw	r30, 0x08	; 8
		Config.min_travel[i] = -100;
    5c3c:	60 83       	st	Z, r22
		Config.max_travel[i] = 100;
    5c3e:	84 e6       	ldi	r24, 0x64	; 100
    5c40:	5d 93       	st	X+, r21
    5c42:	2e 5d       	subi	r18, 0xDE	; 222
    5c44:	3f 4f       	sbci	r19, 0xFF	; 255
	// Monopolar throttle is a special case. Set to -100% or -1000
	// Otherwise the thorttle high alarm will go off on first power-up
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    5c46:	20 31       	cpi	r18, 0x10	; 16
    5c48:	91 e0       	ldi	r25, 0x01	; 1
    5c4a:	39 07       	cpc	r19, r25
    5c4c:	41 f7       	brne	.-48     	; 0x5c1e <Set_EEPROM_Default_Config+0xd2>

	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		Config.Curve[i].Point1 = 0;
		Config.Curve[i].Point2 = 17;
    5c4e:	51 e1       	ldi	r21, 0x11	; 17
    5c50:	50 93 65 08 	sts	0x0865, r21
		Config.Curve[i].Point3 = 33;
    5c54:	41 e2       	ldi	r20, 0x21	; 33
    5c56:	40 93 66 08 	sts	0x0866, r20
		Config.Curve[i].Point4 = 50;
    5c5a:	32 e3       	ldi	r19, 0x32	; 50
    5c5c:	30 93 67 08 	sts	0x0867, r19
		Config.Curve[i].Point5 = 67;
    5c60:	23 e4       	ldi	r18, 0x43	; 67
    5c62:	20 93 68 08 	sts	0x0868, r18
		Config.Curve[i].Point6 = 83;
    5c66:	93 e5       	ldi	r25, 0x53	; 83
    5c68:	90 93 69 08 	sts	0x0869, r25
		Config.Curve[i].Point7 = 100;
    5c6c:	80 93 6a 08 	sts	0x086A, r24

	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		Config.Curve[i].Point1 = 0;
		Config.Curve[i].Point2 = 17;
    5c70:	50 93 6d 08 	sts	0x086D, r21
		Config.Curve[i].Point3 = 33;
    5c74:	40 93 6e 08 	sts	0x086E, r20
		Config.Curve[i].Point4 = 50;
    5c78:	30 93 6f 08 	sts	0x086F, r19
		Config.Curve[i].Point5 = 67;
    5c7c:	20 93 70 08 	sts	0x0870, r18
		Config.Curve[i].Point6 = 83;
    5c80:	90 93 71 08 	sts	0x0871, r25
		Config.Curve[i].Point7 = 100;
    5c84:	80 93 72 08 	sts	0x0872, r24
    5c88:	89 e3       	ldi	r24, 0x39	; 57
    5c8a:	96 e0       	ldi	r25, 0x06	; 6
	}

	// Curves 2 to 6	
	for (i = 2; i < 6; i++)
	{
		Config.Curve[i].Point1 = -100;
    5c8c:	7c e9       	ldi	r23, 0x9C	; 156
		Config.Curve[i].Point2 = -67;
    5c8e:	6d eb       	ldi	r22, 0xBD	; 189
		Config.Curve[i].Point3 = -33;
    5c90:	5f ed       	ldi	r21, 0xDF	; 223
		Config.Curve[i].Point4 = 0;
		Config.Curve[i].Point5 = 33;
		Config.Curve[i].Point6 = 67;
    5c92:	33 e4       	ldi	r19, 0x43	; 67
		Config.Curve[i].Point7 = 100;
    5c94:	24 e6       	ldi	r18, 0x64	; 100
    5c96:	fc 01       	movw	r30, r24
    5c98:	e5 5c       	subi	r30, 0xC5	; 197
    5c9a:	fd 4f       	sbci	r31, 0xFD	; 253
	}

	// Curves 2 to 6	
	for (i = 2; i < 6; i++)
	{
		Config.Curve[i].Point1 = -100;
    5c9c:	70 83       	st	Z, r23
    5c9e:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point2 = -67;
    5ca0:	60 83       	st	Z, r22
    5ca2:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point3 = -33;
    5ca4:	50 83       	st	Z, r21
    5ca6:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point4 = 0;
    5ca8:	10 82       	st	Z, r1
    5caa:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point5 = 33;
    5cac:	40 83       	st	Z, r20
    5cae:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point6 = 67;
    5cb0:	30 83       	st	Z, r19
    5cb2:	31 96       	adiw	r30, 0x01	; 1
		Config.Curve[i].Point7 = 100;
    5cb4:	20 83       	st	Z, r18
    5cb6:	08 96       	adiw	r24, 0x08	; 8
		Config.Curve[i].Point6 = 83;
		Config.Curve[i].Point7 = 100;
	}

	// Curves 2 to 6	
	for (i = 2; i < 6; i++)
    5cb8:	a6 e0       	ldi	r26, 0x06	; 6
    5cba:	89 35       	cpi	r24, 0x59	; 89
    5cbc:	9a 07       	cpc	r25, r26
    5cbe:	59 f7       	brne	.-42     	; 0x5c96 <Set_EEPROM_Default_Config+0x14a>

	Config.Curve[0].channel = THROTTLE;
	Config.Curve[1].channel = THROTTLE;
	Config.Curve[2].channel = THROTTLE;
	Config.Curve[3].channel = THROTTLE;
	Config.Curve[4].channel = NOMIX;
    5cc0:	84 e1       	ldi	r24, 0x14	; 20
    5cc2:	80 93 8b 08 	sts	0x088B, r24
	Config.Curve[5].channel = NOMIX;
    5cc6:	80 93 93 08 	sts	0x0893, r24
					
	// Load manual defaults
	Load_eeprom_preset(QUADX);
    5cca:	80 e0       	ldi	r24, 0x00	; 0
    5ccc:	0e 94 de 2a 	call	0x55bc	; 0x55bc <Load_eeprom_preset>
	Config.Preset = OPTIONS; // Menu will display "Options"
    5cd0:	84 e0       	ldi	r24, 0x04	; 4
    5cd2:	80 93 e2 06 	sts	0x06E2, r24
}
    5cd6:	df 91       	pop	r29
    5cd8:	cf 91       	pop	r28
    5cda:	08 95       	ret

00005cdc <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    5cdc:	cf 93       	push	r28
    5cde:	df 93       	push	r29
    5ce0:	1f 92       	push	r1
    5ce2:	cd b7       	in	r28, 0x3d	; 61
    5ce4:	de b7       	in	r29, 0x3e	; 62
	bool updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    5ce6:	44 ea       	ldi	r20, 0xA4	; 164
    5ce8:	52 e0       	ldi	r21, 0x02	; 2
    5cea:	60 e0       	ldi	r22, 0x00	; 0
    5cec:	70 e0       	ldi	r23, 0x00	; 0
    5cee:	89 e3       	ldi	r24, 0x39	; 57
    5cf0:	96 e0       	ldi	r25, 0x06	; 6
    5cf2:	0e 94 58 70 	call	0xe0b0	; 0xe0b0 <eeprom_read_block>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    5cf6:	e0 91 39 06 	lds	r30, 0x0639
    5cfa:	8e 2f       	mov	r24, r30
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	fc 01       	movw	r30, r24
    5d00:	f5 97       	sbiw	r30, 0x35	; 53
    5d02:	e0 31       	cpi	r30, 0x10	; 16
    5d04:	f1 05       	cpc	r31, r1
    5d06:	b0 f4       	brcc	.+44     	; 0x5d34 <Initial_EEPROM_Config_Load+0x58>
    5d08:	e2 5c       	subi	r30, 0xC2	; 194
    5d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0c:	0c 94 a6 6f 	jmp	0xdf4c	; 0xdf4c <__tablejump2__>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    5d10:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <Update_V1_0_to_V1_1>
			updated = true;
			// Fall through...

		case V1_1_SIGNATURE:				// V1.1 detected
			Update_V1_1_to_V1_2();
    5d14:	0e 94 3a 29 	call	0x5274	; 0x5274 <Update_V1_1_to_V1_2>
			updated = true;
			// Fall through...

		case V1_2_SIGNATURE:				// V1.2 detected
			Update_V1_2_to_V1_3B1();
    5d18:	0e 94 6e 29 	call	0x52dc	; 0x52dc <Update_V1_2_to_V1_3B1>
			updated = true;
			// Fall through...

		case V1_3_B1_SIGNATURE:				// V1.3 B1 detected
			Update_V1_3B1_to_V1_3B14();
    5d1c:	0e 94 d6 29 	call	0x53ac	; 0x53ac <Update_V1_3B1_to_V1_3B14>
			updated = true;
			// Fall through...

		case V1_3_B14_SIGNATURE:			// V1.3 B14 detected
			Update_V1_3B14_to_V1_3B15();
    5d20:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <Update_V1_3B14_to_V1_3B15>
			updated = true;
			// Fall through...
			
		case V1_3_B15_SIGNATURE:			// V1.3 B15 detected
			Update_V1_3B15_to_V1_3B17();
    5d24:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <Update_V1_3B15_to_V1_3B17>
			updated = true;
			// Fall through...

		case V1_3_B17_SIGNATURE:			// V1.3 B17 (V1.3 release) detected
			Update_V1_3_to_V1_4B2();
    5d28:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Update_V1_3_to_V1_4B2>
			updated = true;
			// Fall through...

		case V1_4_B2_SIGNATURE:				// V1.4 B2-7 detected (V1.4 Beta release)
			Update_V1_4B2_to_V1_4B8();
    5d2c:	0e 94 cf 2a 	call	0x559e	; 0x559e <Update_V1_4B2_to_V1_4B8>
			updated = true;
    5d30:	81 e0       	ldi	r24, 0x01	; 1
    5d32:	03 c0       	rjmp	.+6      	; 0x5d3a <Initial_EEPROM_Config_Load+0x5e>
		case V1_5_B3_SIGNATURE:				// V1.5B3+
			break;
			
		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    5d34:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool updated = false;
    5d38:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    5d3a:	89 83       	std	Y+1, r24	; 0x01
    5d3c:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    5d40:	89 81       	ldd	r24, Y+1	; 0x01
    5d42:	0f 90       	pop	r0
    5d44:	df 91       	pop	r29
    5d46:	cf 91       	pop	r28
    5d48:	08 95       	ret

00005d4a <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    5d4a:	cf 93       	push	r28
    5d4c:	df 93       	push	r29
    5d4e:	cd b7       	in	r28, 0x3d	; 61
    5d50:	de b7       	in	r29, 0x3e	; 62
    5d52:	e0 97       	sbiw	r28, 0x30	; 48
    5d54:	0f b6       	in	r0, 0x3f	; 63
    5d56:	f8 94       	cli
    5d58:	de bf       	out	0x3e, r29	; 62
    5d5a:	0f be       	out	0x3f, r0	; 63
    5d5c:	cd bf       	out	0x3d, r28	; 61
	uint32_t interval = 0;			// IMU interval
	uint8_t transition_direction = P2;
	uint16_t j;
	
	// Do all init tasks
	init();
    5d5e:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <init>
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	uint8_t transition_direction = P2;
    5d62:	21 e0       	ldi	r18, 0x01	; 1
    5d64:	29 83       	std	Y+1, r18	; 0x01
	int8_t	old_trans_mode = 0;		// Old transition mode
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    5d66:	03 e0       	ldi	r16, 0x03	; 3
    5d68:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    5d6a:	1b a6       	std	Y+43, r1	; 0x2b
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    5d6c:	a1 2c       	mov	r10, r1
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    5d6e:	33 e0       	ldi	r19, 0x03	; 3
    5d70:	38 ab       	std	Y+48, r19	; 0x30

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    5d72:	48 e0       	ldi	r20, 0x08	; 8
    5d74:	4f a7       	std	Y+47, r20	; 0x2f
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    5d76:	1a 8e       	std	Y+26, r1	; 0x1a
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    5d78:	1c 86       	std	Y+12, r1	; 0x0c
	//uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    5d7a:	19 8e       	std	Y+25, r1	; 0x19
    5d7c:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	//uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;
    5d7e:	1a a6       	std	Y+42, r1	; 0x2a
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	//uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    5d80:	19 a2       	std	Y+33, r1	; 0x21
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    5d82:	19 a6       	std	Y+41, r1	; 0x29
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    5d84:	18 a6       	std	Y+40, r1	; 0x28
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    5d86:	1f a2       	std	Y+39, r1	; 0x27

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    5d88:	1e a2       	std	Y+38, r1	; 0x26
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    5d8a:	1d a2       	std	Y+37, r1	; 0x25
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    5d8c:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    5d8e:	81 2c       	mov	r8, r1
    5d90:	91 2c       	mov	r9, r1
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t FastServo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    5d92:	1c 82       	std	Y+4, r1	; 0x04
    5d94:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t FastServo_Rate = 0;
	uint16_t Transition_timeout = 0;
    5d96:	1f 86       	std	Y+15, r1	; 0x0f
    5d98:	1e 86       	std	Y+14, r1	; 0x0e
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t FastServo_Rate = 0;
    5d9a:	1d 8a       	std	Y+21, r1	; 0x15
    5d9c:	1c 8a       	std	Y+20, r1	; 0x14
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    5d9e:	1b 86       	std	Y+11, r1	; 0x0b
    5da0:	1a 86       	std	Y+10, r1	; 0x0a
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    5da2:	18 a2       	std	Y+32, r1	; 0x20
    5da4:	1f 8e       	std	Y+31, r1	; 0x1f
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    5da6:	1d 8e       	std	Y+29, r1	; 0x1d
    5da8:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    5daa:	1b 8a       	std	Y+19, r1	; 0x13
    5dac:	1a 8a       	std	Y+18, r1	; 0x12
	bool LastLoopOverdue = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    5dae:	31 e6       	ldi	r19, 0x61	; 97
    5db0:	c3 2e       	mov	r12, r19
    5db2:	31 e5       	ldi	r19, 0x51	; 81
    5db4:	d3 2e       	mov	r13, r19
    5db6:	e1 2c       	mov	r14, r1
    5db8:	f1 2c       	mov	r15, r1
	bool SlowRC = true;
	bool LastLoopOverdue = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    5dba:	1e 82       	std	Y+6, r1	; 0x06
    5dbc:	1f 82       	std	Y+7, r1	; 0x07
    5dbe:	18 86       	std	Y+8, r1	; 0x08
    5dc0:	19 86       	std	Y+9, r1	; 0x09
	bool Interrupted_Clone = false;
	bool SlowRC = true;
	bool LastLoopOverdue = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    5dc2:	21 2c       	mov	r2, r1
    5dc4:	31 2c       	mov	r3, r1
    5dc6:	21 01       	movw	r4, r2
	bool FastServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
	bool LastLoopOverdue = false;
    5dc8:	1b a2       	std	Y+35, r1	; 0x23
	bool ServoTick = false;
	bool FastServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    5dca:	51 e0       	ldi	r21, 0x01	; 1
    5dcc:	5d 87       	std	Y+13, r21	; 0x0d
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool FastServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    5dce:	71 2c       	mov	r7, r1
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool FastServoTick = false;
	bool ResampleRCRate = false;
    5dd0:	1e 8e       	std	Y+30, r1	; 0x1e
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool FastServoTick = false;
    5dd2:	1b 8e       	std	Y+27, r1	; 0x1b
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    5dd4:	1d 82       	std	Y+5, r1	; 0x05
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    5dd6:	19 8a       	std	Y+17, r1	; 0x11
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    5dd8:	18 8a       	std	Y+16, r1	; 0x10

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    5dda:	1a 82       	std	Y+2, r1	; 0x02

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    5ddc:	80 91 2d 05 	lds	r24, 0x052D
    5de0:	8f 5f       	subi	r24, 0xFF	; 255
    5de2:	80 93 2d 05 	sts	0x052D, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    5de6:	80 91 1a 09 	lds	r24, 0x091A
    5dea:	88 23       	and	r24, r24
    5dec:	31 f0       	breq	.+12     	; 0x5dfa <main+0xb0>
		{
			InterruptCounter++;
    5dee:	28 8d       	ldd	r18, Y+24	; 0x18
    5df0:	39 8d       	ldd	r19, Y+25	; 0x19
    5df2:	2f 5f       	subi	r18, 0xFF	; 255
    5df4:	3f 4f       	sbci	r19, 0xFF	; 255
    5df6:	39 8f       	std	Y+25, r19	; 0x19
    5df8:	28 8f       	std	Y+24, r18	; 0x18
		//* - Do an RC rate resample
		//* - Check the battery voltage
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    5dfa:	4a 89       	ldd	r20, Y+18	; 0x12
    5dfc:	5b 89       	ldd	r21, Y+19	; 0x13
    5dfe:	4c 34       	cpi	r20, 0x4C	; 76
    5e00:	5c 44       	sbci	r21, 0x4C	; 76
    5e02:	28 f1       	brcs	.+74     	; 0x5e4e <main+0x104>
		{
			Status_seconds++;
    5e04:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5e06:	2f 5f       	subi	r18, 0xFF	; 255
    5e08:	2a 8f       	std	Y+26, r18	; 0x1a
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    5e0a:	48 8d       	ldd	r20, Y+24	; 0x18
    5e0c:	59 8d       	ldd	r21, Y+25	; 0x19
    5e0e:	50 93 32 05 	sts	0x0532, r21
    5e12:	40 93 31 05 	sts	0x0531, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    5e16:	80 91 63 06 	lds	r24, 0x0663
    5e1a:	82 30       	cpi	r24, 0x02	; 2
    5e1c:	11 f4       	brne	.+4      	; 0x5e22 <main+0xd8>
			{
				ResampleRCRate = true;
    5e1e:	51 e0       	ldi	r21, 0x01	; 1
    5e20:	5e 8f       	std	Y+30, r21	; 0x1e
			}
	
			// Check if Vbat lower than trigger
			if (GetVbat() < Config.PowerTriggerActual)
    5e22:	0e 94 02 6d 	call	0xda04	; 0xda04 <GetVbat>
    5e26:	20 91 d6 06 	lds	r18, 0x06D6
    5e2a:	30 91 d7 06 	lds	r19, 0x06D7
    5e2e:	82 17       	cp	r24, r18
    5e30:	93 07       	cpc	r25, r19
    5e32:	20 f4       	brcc	.+8      	; 0x5e3c <main+0xf2>
			{
				General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    5e34:	80 91 35 05 	lds	r24, 0x0535
    5e38:	88 60       	ori	r24, 0x08	; 8
    5e3a:	03 c0       	rjmp	.+6      	; 0x5e42 <main+0xf8>
			}
			else
			{
				General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    5e3c:	80 91 35 05 	lds	r24, 0x0535
    5e40:	87 7f       	andi	r24, 0xF7	; 247
    5e42:	80 93 35 05 	sts	0x0535, r24
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    5e46:	19 8e       	std	Y+25, r1	; 0x19
    5e48:	18 8e       	std	Y+24, r1	; 0x18

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    5e4a:	1b 8a       	std	Y+19, r1	; 0x13
    5e4c:	1a 8a       	std	Y+18, r1	; 0x12
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    5e4e:	2f a5       	ldd	r18, Y+47	; 0x2f
    5e50:	82 2f       	mov	r24, r18
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	8b 30       	cpi	r24, 0x0B	; 11
    5e56:	91 05       	cpc	r25, r1
    5e58:	08 f0       	brcs	.+2      	; 0x5e5c <main+0x112>
    5e5a:	b3 c0       	rjmp	.+358    	; 0x5fc2 <main+0x278>
    5e5c:	fc 01       	movw	r30, r24
    5e5e:	e2 5b       	subi	r30, 0xB2	; 178
    5e60:	ff 4f       	sbci	r31, 0xFF	; 255
    5e62:	0c 94 a6 6f 	jmp	0xdf4c	; 0xdf4c <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    5e66:	83 b1       	in	r24, 0x03	; 3
    5e68:	80 7f       	andi	r24, 0xF0	; 240
    5e6a:	80 3f       	cpi	r24, 0xF0	; 240
    5e6c:	49 f0       	breq	.+18     	; 0x5e80 <main+0x136>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    5e6e:	80 91 6e 00 	lds	r24, 0x006E
    5e72:	81 60       	ori	r24, 0x01	; 1
    5e74:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    5e78:	33 e0       	ldi	r19, 0x03	; 3
    5e7a:	3f a7       	std	Y+47, r19	; 0x2f
					// Reset the status screen timeout
					Status_seconds = 0;
    5e7c:	1a 8e       	std	Y+26, r1	; 0x1a
    5e7e:	a1 c0       	rjmp	.+322    	; 0x5fc2 <main+0x278>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    5e80:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    5e84:	81 e0       	ldi	r24, 0x01	; 1
    5e86:	85 bb       	out	0x15, r24	; 21
    5e88:	9c c0       	rjmp	.+312    	; 0x5fc2 <main+0x278>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    5e8a:	80 91 ee 08 	lds	r24, 0x08EE
    5e8e:	81 11       	cpse	r24, r1
    5e90:	8f c0       	rjmp	.+286    	; 0x5fb0 <main+0x266>
    5e92:	71 10       	cpse	r7, r1
    5e94:	90 c0       	rjmp	.+288    	; 0x5fb6 <main+0x26c>
    5e96:	80 91 2e 05 	lds	r24, 0x052E
    5e9a:	88 23       	and	r24, r24
    5e9c:	09 f4       	brne	.+2      	; 0x5ea0 <main+0x156>
    5e9e:	91 c0       	rjmp	.+290    	; 0x5fc2 <main+0x278>
				{
					// Ready to move on
					Menu_mode = STATUS;
    5ea0:	44 e0       	ldi	r20, 0x04	; 4
    5ea2:	4f a7       	std	Y+47, r20	; 0x2f
    5ea4:	9c c0       	rjmp	.+312    	; 0x5fde <main+0x294>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    5ea6:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <Display_status>

				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    5eaa:	46 e0       	ldi	r20, 0x06	; 6
    5eac:	4f a7       	std	Y+47, r20	; 0x2f
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    5eae:	1d 8e       	std	Y+29, r1	; 0x1d
    5eb0:	1c 8e       	std	Y+28, r1	; 0x1c
    5eb2:	95 c0       	rjmp	.+298    	; 0x5fde <main+0x294>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    5eb4:	1f 9b       	sbis	0x03, 7	; 3
    5eb6:	85 c0       	rjmp	.+266    	; 0x5fc2 <main+0x278>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    5eb8:	55 e0       	ldi	r21, 0x05	; 5
    5eba:	82 c0       	rjmp	.+260    	; 0x5fc0 <main+0x276>
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				// If in vibration test mode, stay in Status
				if ((Status_seconds >= 10) && (Config.Vibration == OFF))
    5ebc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5ebe:	2a 30       	cpi	r18, 0x0A	; 10
    5ec0:	28 f0       	brcs	.+10     	; 0x5ecc <main+0x182>
    5ec2:	80 91 6c 06 	lds	r24, 0x066C
    5ec6:	88 23       	and	r24, r24
    5ec8:	09 f4       	brne	.+2      	; 0x5ecc <main+0x182>
    5eca:	79 c0       	rjmp	.+242    	; 0x5fbe <main+0x274>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    5ecc:	1f 9b       	sbis	0x03, 7	; 3
    5ece:	7b c0       	rjmp	.+246    	; 0x5fc6 <main+0x27c>
					// Prevent PWM output
					PWMOverride = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    5ed0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5ed2:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5ed4:	43 31       	cpi	r20, 0x13	; 19
    5ed6:	53 41       	sbci	r21, 0x13	; 19
    5ed8:	08 f0       	brcs	.+2      	; 0x5edc <main+0x192>
    5eda:	77 c0       	rjmp	.+238    	; 0x5fca <main+0x280>
				{
					// Enable PWM output
					PWMOverride = false;					

					// Unblock motors if blocked
					Flight_flags &= ~(1 << ARM_blocker);
    5edc:	80 91 34 05 	lds	r24, 0x0534
    5ee0:	8d 7f       	andi	r24, 0xFD	; 253
    5ee2:	80 93 34 05 	sts	0x0534, r24
    5ee6:	6d c0       	rjmp	.+218    	; 0x5fc2 <main+0x278>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    5ee8:	80 91 ee 08 	lds	r24, 0x08EE
    5eec:	81 11       	cpse	r24, r1
    5eee:	70 c0       	rjmp	.+224    	; 0x5fd0 <main+0x286>
    5ef0:	71 10       	cpse	r7, r1
    5ef2:	71 c0       	rjmp	.+226    	; 0x5fd6 <main+0x28c>
    5ef4:	80 91 2e 05 	lds	r24, 0x052E
    5ef8:	88 23       	and	r24, r24
    5efa:	09 f4       	brne	.+2      	; 0x5efe <main+0x1b4>
    5efc:	70 c0       	rjmp	.+224    	; 0x5fde <main+0x294>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    5efe:	28 e0       	ldi	r18, 0x08	; 8
    5f00:	6d c0       	rjmp	.+218    	; 0x5fdc <main+0x292>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    5f02:	0e 94 97 38 	call	0x712e	; 0x712e <idle_screen>
				
				// Make sure that these are cleared
				Interrupted = false;
    5f06:	10 92 ee 08 	sts	0x08EE, r1
				Interrupted_Clone = false;

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    5f0a:	29 e0       	ldi	r18, 0x09	; 9
    5f0c:	52 c0       	rjmp	.+164    	; 0x5fb2 <main+0x268>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    5f0e:	80 91 ee 08 	lds	r24, 0x08EE
    5f12:	81 11       	cpse	r24, r1
    5f14:	07 c0       	rjmp	.+14     	; 0x5f24 <main+0x1da>
    5f16:	71 10       	cpse	r7, r1
    5f18:	05 c0       	rjmp	.+10     	; 0x5f24 <main+0x1da>
    5f1a:	80 91 2e 05 	lds	r24, 0x052E
    5f1e:	88 23       	and	r24, r24
    5f20:	09 f4       	brne	.+2      	; 0x5f24 <main+0x1da>
    5f22:	5d c0       	rjmp	.+186    	; 0x5fde <main+0x294>
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
														
					// Unblock motors if blocked
					Flight_flags &= ~(1 << ARM_blocker);
    5f24:	80 91 34 05 	lds	r24, 0x0534
    5f28:	8d 7f       	andi	r24, 0xFD	; 253
    5f2a:	80 93 34 05 	sts	0x0534, r24
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    5f2e:	1f a6       	std	Y+47, r1	; 0x2f
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    5f30:	71 2c       	mov	r7, r1
    5f32:	47 c0       	rjmp	.+142    	; 0x5fc2 <main+0x278>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    5f34:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    5f36:	80 91 35 05 	lds	r24, 0x0535
    5f3a:	84 60       	ori	r24, 0x04	; 4
    5f3c:	80 93 35 05 	sts	0x0535, r24
				LED1 = 0;
    5f40:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    5f42:	0e 94 77 53 	call	0xa6ee	; 0xa6ee <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = PRESTATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    5f46:	0e 94 99 40 	call	0x8132	; 0x8132 <reset_IMU>
				
				//***********************************************************
				// Experimental PWM output code
				//***********************************************************
					
				cli();									// Disable interrupts
    5f4a:	f8 94       	cli
    5f4c:	e8 ee       	ldi	r30, 0xE8	; 232
    5f4e:	f6 e0       	ldi	r31, 0x06	; 6
    5f50:	80 e0       	ldi	r24, 0x00	; 0
    5f52:	90 e0       	ldi	r25, 0x00	; 0
				
				ServoFlag = 0;							// Reset servo flag
    5f54:	b1 2c       	mov	r11, r1

				for (i = 0; i < MAX_OUTPUTS; i++)		// For each output
				{
					// Check for motor marker
					if (Config.Channel[i].Motor_marker == MOTOR)
    5f56:	20 81       	ld	r18, Z
    5f58:	22 30       	cpi	r18, 0x02	; 2
    5f5a:	91 f4       	brne	.+36     	; 0x5f80 <main+0x236>
					{
						// Set output to 1ms pulse width
						ServoOut[i] = MOTORMIN;
    5f5c:	dc 01       	movw	r26, r24
    5f5e:	aa 0f       	add	r26, r26
    5f60:	bb 1f       	adc	r27, r27
    5f62:	ab 56       	subi	r26, 0x6B	; 107
    5f64:	b6 4f       	sbci	r27, 0xF6	; 246
    5f66:	48 ee       	ldi	r20, 0xE8	; 232
    5f68:	53 e0       	ldi	r21, 0x03	; 3
    5f6a:	11 96       	adiw	r26, 0x01	; 1
    5f6c:	5c 93       	st	X, r21
    5f6e:	4e 93       	st	-X, r20
			
						// Mark motor outputs
						ServoFlag |= (1 << i);
    5f70:	21 e0       	ldi	r18, 0x01	; 1
    5f72:	30 e0       	ldi	r19, 0x00	; 0
    5f74:	08 2e       	mov	r0, r24
    5f76:	01 c0       	rjmp	.+2      	; 0x5f7a <main+0x230>
    5f78:	22 0f       	add	r18, r18
    5f7a:	0a 94       	dec	r0
    5f7c:	ea f7       	brpl	.-6      	; 0x5f78 <main+0x22e>
    5f7e:	b2 2a       	or	r11, r18
    5f80:	01 96       	adiw	r24, 0x01	; 1
    5f82:	b2 96       	adiw	r30, 0x22	; 34
					
				cli();									// Disable interrupts
				
				ServoFlag = 0;							// Reset servo flag

				for (i = 0; i < MAX_OUTPUTS; i++)		// For each output
    5f84:	88 30       	cpi	r24, 0x08	; 8
    5f86:	91 05       	cpc	r25, r1
    5f88:	31 f7       	brne	.-52     	; 0x5f56 <main+0x20c>
    5f8a:	29 ef       	ldi	r18, 0xF9	; 249
    5f8c:	30 e0       	ldi	r19, 0x00	; 0
				}

				for (j = 0; j < 249; j++)
				{
					// Pass address of ServoOut array and select only motor outputs
					output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    5f8e:	6b 2d       	mov	r22, r11
    5f90:	85 e9       	ldi	r24, 0x95	; 149
    5f92:	99 e0       	ldi	r25, 0x09	; 9
    5f94:	2c a7       	std	Y+44, r18	; 0x2c
    5f96:	3d a7       	std	Y+45, r19	; 0x2d
    5f98:	0e 94 23 16 	call	0x2c46	; 0x2c46 <output_servo_ppm_asm>
    5f9c:	2c a5       	ldd	r18, Y+44	; 0x2c
    5f9e:	3d a5       	ldd	r19, Y+45	; 0x2d
    5fa0:	21 50       	subi	r18, 0x01	; 1
    5fa2:	31 09       	sbc	r19, r1
						// Mark motor outputs
						ServoFlag |= (1 << i);
					}
				}

				for (j = 0; j < 249; j++)
    5fa4:	a1 f7       	brne	.-24     	; 0x5f8e <main+0x244>
				{
					// Pass address of ServoOut array and select only motor outputs
					output_servo_ppm_asm(&ServoOut[0], ServoFlag);
				}
			
				sei();									// Enable interrupts
    5fa6:	78 94       	sei
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = PRESTATUS;
    5fa8:	53 e0       	ldi	r21, 0x03	; 3
    5faa:	5f a7       	std	Y+47, r21	; 0x2f
				// Reset timeout once back in status screen
				Status_seconds = 0;
    5fac:	1a 8e       	std	Y+26, r1	; 0x1a
    5fae:	17 c0       	rjmp	.+46     	; 0x5fde <main+0x294>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    5fb0:	24 e0       	ldi	r18, 0x04	; 4
    5fb2:	2f a7       	std	Y+47, r18	; 0x2f
    5fb4:	02 c0       	rjmp	.+4      	; 0x5fba <main+0x270>
    5fb6:	34 e0       	ldi	r19, 0x04	; 4
    5fb8:	3f a7       	std	Y+47, r19	; 0x2f
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    5fba:	71 2c       	mov	r7, r1
    5fbc:	10 c0       	rjmp	.+32     	; 0x5fde <main+0x294>
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				// If in vibration test mode, stay in Status
				if ((Status_seconds >= 10) && (Config.Vibration == OFF))
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    5fbe:	57 e0       	ldi	r21, 0x07	; 7
    5fc0:	5f a7       	std	Y+47, r21	; 0x2f
					
					// Enable PWM output
					PWMOverride = false;
    5fc2:	61 2c       	mov	r6, r1
    5fc4:	0e c0       	rjmp	.+28     	; 0x5fe2 <main+0x298>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    5fc6:	2a e0       	ldi	r18, 0x0A	; 10
    5fc8:	09 c0       	rjmp	.+18     	; 0x5fdc <main+0x292>
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
				{
					Menu_mode = PRESTATUS;
    5fca:	33 e0       	ldi	r19, 0x03	; 3
    5fcc:	3f a7       	std	Y+47, r19	; 0x2f
    5fce:	07 c0       	rjmp	.+14     	; 0x5fde <main+0x294>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    5fd0:	48 e0       	ldi	r20, 0x08	; 8
    5fd2:	4f a7       	std	Y+47, r20	; 0x2f
    5fd4:	f2 cf       	rjmp	.-28     	; 0x5fba <main+0x270>
    5fd6:	58 e0       	ldi	r21, 0x08	; 8
    5fd8:	5f a7       	std	Y+47, r21	; 0x2f
    5fda:	ef cf       	rjmp	.-34     	; 0x5fba <main+0x270>
    5fdc:	2f a7       	std	Y+47, r18	; 0x2f
					Flight_flags &= ~(1 << ARM_blocker);
				}
				else
				{
					// Prevent PWM output until at least when next RC arrives
					PWMOverride = true;			
    5fde:	66 24       	eor	r6, r6
    5fe0:	63 94       	inc	r6
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message
		if (Overdue)
    5fe2:	80 91 2e 05 	lds	r24, 0x052E
    5fe6:	88 23       	and	r24, r24
    5fe8:	21 f0       	breq	.+8      	; 0x5ff2 <main+0x2a8>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    5fea:	80 91 35 05 	lds	r24, 0x0535
    5fee:	82 60       	ori	r24, 0x02	; 2
    5ff0:	03 c0       	rjmp	.+6      	; 0x5ff8 <main+0x2ae>
		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    5ff2:	80 91 35 05 	lds	r24, 0x0535
    5ff6:	8d 7f       	andi	r24, 0xFD	; 253
    5ff8:	80 93 35 05 	sts	0x0535, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    5ffc:	80 91 35 05 	lds	r24, 0x0535
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    6000:	83 fd       	sbrc	r24, 3
    6002:	08 c0       	rjmp	.+16     	; 0x6014 <main+0x2ca>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    6004:	80 91 35 05 	lds	r24, 0x0535
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    6008:	81 fd       	sbrc	r24, 1
    600a:	04 c0       	rjmp	.+8      	; 0x6014 <main+0x2ca>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    600c:	80 91 35 05 	lds	r24, 0x0535

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    6010:	80 ff       	sbrs	r24, 0
    6012:	0a c0       	rjmp	.+20     	; 0x6028 <main+0x2de>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    6014:	80 91 33 05 	lds	r24, 0x0533
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    6018:	84 ff       	sbrs	r24, 4
    601a:	06 c0       	rjmp	.+12     	; 0x6028 <main+0x2de>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			// Check buzzer mode first
			if (Config.Buzzer == ON)
    601c:	80 91 e3 06 	lds	r24, 0x06E3
    6020:	81 30       	cpi	r24, 0x01	; 1
    6022:	19 f4       	brne	.+6      	; 0x602a <main+0x2e0>
			{
				LVA = 1;
    6024:	29 9a       	sbi	0x05, 1	; 5
    6026:	01 c0       	rjmp	.+2      	; 0x602a <main+0x2e0>
			}
		}
		else 
		{
			LVA = 0;
    6028:	29 98       	cbi	0x05, 1	; 5
		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		// All cases - reset arm timer
		if (Config.ArmMode == ARMABLE)
    602a:	80 91 db 06 	lds	r24, 0x06DB
    602e:	81 30       	cpi	r24, 0x01	; 1
    6030:	09 f0       	breq	.+2      	; 0x6034 <main+0x2ea>
    6032:	d4 c0       	rjmp	.+424    	; 0x61dc <main+0x492>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and inside = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    6034:	80 91 85 09 	lds	r24, 0x0985
    6038:	90 91 86 09 	lds	r25, 0x0986
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and inside = armed. Down and outside = disarmed
			if (
    603c:	81 34       	cpi	r24, 0x41	; 65
    603e:	9c 4f       	sbci	r25, 0xFC	; 252
    6040:	3c f0       	brlt	.+14     	; 0x6050 <main+0x306>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    6042:	80 91 85 09 	lds	r24, 0x0985
    6046:	90 91 86 09 	lds	r25, 0x0986
    604a:	80 3c       	cpi	r24, 0xC0	; 192
    604c:	93 40       	sbci	r25, 0x03	; 3
    604e:	14 f1       	brlt	.+68     	; 0x6094 <main+0x34a>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    6050:	80 91 87 09 	lds	r24, 0x0987
    6054:	90 91 88 09 	lds	r25, 0x0988
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and inside = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    6058:	81 34       	cpi	r24, 0x41	; 65
    605a:	9c 4f       	sbci	r25, 0xFC	; 252
    605c:	3c f0       	brlt	.+14     	; 0x606c <main+0x322>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    605e:	80 91 87 09 	lds	r24, 0x0987
    6062:	90 91 88 09 	lds	r25, 0x0988
    6066:	80 3c       	cpi	r24, 0xC0	; 192
    6068:	93 40       	sbci	r25, 0x03	; 3
    606a:	a4 f0       	brlt	.+40     	; 0x6094 <main+0x34a>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    606c:	80 91 89 09 	lds	r24, 0x0989
    6070:	90 91 8a 09 	lds	r25, 0x098A
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and inside = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    6074:	81 34       	cpi	r24, 0x41	; 65
    6076:	9c 4f       	sbci	r25, 0xFC	; 252
    6078:	3c f0       	brlt	.+14     	; 0x6088 <main+0x33e>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    607a:	80 91 89 09 	lds	r24, 0x0989
    607e:	90 91 8a 09 	lds	r25, 0x098A
    6082:	80 3c       	cpi	r24, 0xC0	; 192
    6084:	93 40       	sbci	r25, 0x03	; 3
    6086:	34 f0       	brlt	.+12     	; 0x6094 <main+0x34a>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    6088:	80 91 81 09 	lds	r24, 0x0981
    608c:	90 91 82 09 	lds	r25, 0x0982
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and inside = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    6090:	c3 97       	sbiw	r24, 0x33	; 51
    6092:	1c f0       	brlt	.+6      	; 0x609a <main+0x350>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
			   )
			{
				Arm_timer = 0;
    6094:	21 2c       	mov	r2, r1
    6096:	31 2c       	mov	r3, r1
    6098:	21 01       	movw	r4, r2
			}
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
    609a:	80 91 35 05 	lds	r24, 0x0535
    609e:	82 ff       	sbrs	r24, 2
    60a0:	50 c0       	rjmp	.+160    	; 0x6142 <main+0x3f8>
				Disarm_timer = 0;
				Disarm_seconds = 0;
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    60a2:	fc e4       	ldi	r31, 0x4C	; 76
    60a4:	2f 16       	cp	r2, r31
    60a6:	3f 06       	cpc	r3, r31
    60a8:	41 04       	cpc	r4, r1
    60aa:	51 04       	cpc	r5, r1
    60ac:	08 f4       	brcc	.+2      	; 0x60b0 <main+0x366>
    60ae:	a1 c0       	rjmp	.+322    	; 0x61f2 <main+0x4a8>
    60b0:	80 91 85 09 	lds	r24, 0x0985
    60b4:	90 91 86 09 	lds	r25, 0x0986
    60b8:	80 34       	cpi	r24, 0x40	; 64
    60ba:	9c 4f       	sbci	r25, 0xFC	; 252
    60bc:	0c f0       	brlt	.+2      	; 0x60c0 <main+0x376>
    60be:	99 c0       	rjmp	.+306    	; 0x61f2 <main+0x4a8>
				{
					Arm_timer = 0;
					General_error &= ~(1 << DISARMED);	// Set flags to armed (negate disarmed)
    60c0:	80 91 35 05 	lds	r24, 0x0535
    60c4:	8b 7f       	andi	r24, 0xFB	; 251
    60c6:	80 93 35 05 	sts	0x0535, r24
					CalibrateGyrosSlow();					// Calibrate gyros (also saves to eeprom)
    60ca:	0e 94 0c 3b 	call	0x7618	; 0x7618 <CalibrateGyrosSlow>
					LED1 = 1;								// Signal that FC is ready
    60ce:	2b 9a       	sbi	0x05, 3	; 5

					Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove arm glitch
    60d0:	80 91 34 05 	lds	r24, 0x0534
    60d4:	82 60       	ori	r24, 0x02	; 2
    60d6:	80 93 34 05 	sts	0x0534, r24

					//***********************************************************
					// Experimental PWM output code
					//***********************************************************
					
					cli();									// Disable interrupts
    60da:	f8 94       	cli
    60dc:	e8 ee       	ldi	r30, 0xE8	; 232
    60de:	f6 e0       	ldi	r31, 0x06	; 6
    60e0:	80 e0       	ldi	r24, 0x00	; 0
    60e2:	90 e0       	ldi	r25, 0x00	; 0

					ServoFlag = 0;							// Reset servo flag
    60e4:	b1 2c       	mov	r11, r1

					for (i = 0; i < MAX_OUTPUTS; i++)		// For each output
					{
						// Check for motor marker
						if (Config.Channel[i].Motor_marker == MOTOR)
    60e6:	20 81       	ld	r18, Z
    60e8:	22 30       	cpi	r18, 0x02	; 2
    60ea:	91 f4       	brne	.+36     	; 0x6110 <main+0x3c6>
						{
							// Set output to 1ms pulse width
							ServoOut[i] = MOTORMIN;
    60ec:	dc 01       	movw	r26, r24
    60ee:	aa 0f       	add	r26, r26
    60f0:	bb 1f       	adc	r27, r27
    60f2:	ab 56       	subi	r26, 0x6B	; 107
    60f4:	b6 4f       	sbci	r27, 0xF6	; 246
    60f6:	48 ee       	ldi	r20, 0xE8	; 232
    60f8:	53 e0       	ldi	r21, 0x03	; 3
    60fa:	11 96       	adiw	r26, 0x01	; 1
    60fc:	5c 93       	st	X, r21
    60fe:	4e 93       	st	-X, r20
			
							// Mark motor outputs
							ServoFlag |= (1 << i);
    6100:	21 e0       	ldi	r18, 0x01	; 1
    6102:	30 e0       	ldi	r19, 0x00	; 0
    6104:	08 2e       	mov	r0, r24
    6106:	01 c0       	rjmp	.+2      	; 0x610a <main+0x3c0>
    6108:	22 0f       	add	r18, r18
    610a:	0a 94       	dec	r0
    610c:	ea f7       	brpl	.-6      	; 0x6108 <main+0x3be>
    610e:	b2 2a       	or	r11, r18
    6110:	01 96       	adiw	r24, 0x01	; 1
    6112:	b2 96       	adiw	r30, 0x22	; 34
					
					cli();									// Disable interrupts

					ServoFlag = 0;							// Reset servo flag

					for (i = 0; i < MAX_OUTPUTS; i++)		// For each output
    6114:	88 30       	cpi	r24, 0x08	; 8
    6116:	91 05       	cpc	r25, r1
    6118:	31 f7       	brne	.-52     	; 0x60e6 <main+0x39c>
    611a:	69 ef       	ldi	r22, 0xF9	; 249
    611c:	46 2e       	mov	r4, r22
    611e:	51 2c       	mov	r5, r1
					}

					for (j = 0; j < 249; j++)
					{
						// Pass address of ServoOut array and select only motor outputs
						output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    6120:	6b 2d       	mov	r22, r11
    6122:	85 e9       	ldi	r24, 0x95	; 149
    6124:	99 e0       	ldi	r25, 0x09	; 9
    6126:	0e 94 23 16 	call	0x2c46	; 0x2c46 <output_servo_ppm_asm>
    612a:	51 e0       	ldi	r21, 0x01	; 1
    612c:	45 1a       	sub	r4, r21
    612e:	51 08       	sbc	r5, r1
							// Mark motor outputs
							ServoFlag |= (1 << i);
						}
					}

					for (j = 0; j < 249; j++)
    6130:	b9 f7       	brne	.-18     	; 0x6120 <main+0x3d6>
					{
						// Pass address of ServoOut array and select only motor outputs
						output_servo_ppm_asm(&ServoOut[0], ServoFlag);
					}

					sei();									// Enable interrupts
    6132:	78 94       	sei
									
					//***********************************************************

					// Force Menu to IDLE immediately unless in vibration test mode
					if (Config.Vibration == OFF)
    6134:	80 91 6c 06 	lds	r24, 0x066C
    6138:	81 11       	cpse	r24, r1
    613a:	5f c0       	rjmp	.+190    	; 0x61fa <main+0x4b0>
					{
						Menu_mode = PRESTATUS_TIMEOUT;		// Previously IDLE, which was wrong. 
    613c:	27 e0       	ldi	r18, 0x07	; 7
    613e:	2f a7       	std	Y+47, r18	; 0x2f
    6140:	5c c0       	rjmp	.+184    	; 0x61fa <main+0x4b0>
	
			// If armed, disarm if sticks held
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    6142:	32 ee       	ldi	r19, 0xE2	; 226
    6144:	23 16       	cp	r2, r19
    6146:	34 ee       	ldi	r19, 0xE4	; 228
    6148:	33 06       	cpc	r3, r19
    614a:	41 04       	cpc	r4, r1
    614c:	51 04       	cpc	r5, r1
    614e:	e8 f0       	brcs	.+58     	; 0x618a <main+0x440>
    6150:	80 91 85 09 	lds	r24, 0x0985
    6154:	90 91 86 09 	lds	r25, 0x0986
    6158:	81 3c       	cpi	r24, 0xC1	; 193
    615a:	93 40       	sbci	r25, 0x03	; 3
    615c:	b4 f0       	brlt	.+44     	; 0x618a <main+0x440>
				{
					Arm_timer = 0;
					General_error |= (1 << DISARMED);	// Set flags to disarmed
    615e:	80 91 35 05 	lds	r24, 0x0535
    6162:	84 60       	ori	r24, 0x04	; 4
    6164:	80 93 35 05 	sts	0x0535, r24
					LED1 = 0;								// Signal that FC is now disarmed
    6168:	2b 98       	cbi	0x05, 3	; 5
					
					Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove arm glitch
    616a:	80 91 34 05 	lds	r24, 0x0534
    616e:	82 60       	ori	r24, 0x02	; 2
    6170:	80 93 34 05 	sts	0x0534, r24
					Servo_Rate = 0;
					
					// Force Menu to IDLE immediately unless in vibration test mode
					if (Config.Vibration == OFF)
    6174:	80 91 6c 06 	lds	r24, 0x066C
    6178:	81 11       	cpse	r24, r1
    617a:	02 c0       	rjmp	.+4      	; 0x6180 <main+0x436>
					{
						Menu_mode = PRESTATUS_TIMEOUT;	
    617c:	57 e0       	ldi	r21, 0x07	; 7
    617e:	5f a7       	std	Y+47, r21	; 0x2f
					Arm_timer = 0;
					General_error |= (1 << DISARMED);	// Set flags to disarmed
					LED1 = 0;								// Signal that FC is now disarmed
					
					Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove arm glitch
					Servo_Rate = 0;
    6180:	1b 86       	std	Y+11, r1	; 0x0b
    6182:	1a 86       	std	Y+10, r1	; 0x0a
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    6184:	21 2c       	mov	r2, r1
    6186:	31 2c       	mov	r3, r1
    6188:	21 01       	movw	r4, r2
#endif			
				}

				// Automatic disarm
				// Reset auto-disarm count if any RX activity or set to zero
				if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0))
    618a:	80 91 34 05 	lds	r24, 0x0534
    618e:	80 fd       	sbrc	r24, 0
    6190:	0d c0       	rjmp	.+26     	; 0x61ac <main+0x462>
    6192:	80 91 dc 06 	lds	r24, 0x06DC
    6196:	88 23       	and	r24, r24
    6198:	49 f0       	breq	.+18     	; 0x61ac <main+0x462>
					Disarm_timer = 0;
					Disarm_seconds = 0;
				}
		
				// Increment disarm timer (seconds) if armed
				if (Disarm_timer > SECOND_TIMER)
    619a:	2b 81       	ldd	r18, Y+3	; 0x03
    619c:	3c 81       	ldd	r19, Y+4	; 0x04
    619e:	2c 34       	cpi	r18, 0x4C	; 76
    61a0:	3c 44       	sbci	r19, 0x4C	; 76
    61a2:	38 f0       	brcs	.+14     	; 0x61b2 <main+0x468>
				{
					Disarm_seconds++;
    61a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    61a6:	5f 5f       	subi	r21, 0xFF	; 255
    61a8:	5c 87       	std	Y+12, r21	; 0x0c
    61aa:	01 c0       	rjmp	.+2      	; 0x61ae <main+0x464>
    61ac:	1c 86       	std	Y+12, r1	; 0x0c
    61ae:	1c 82       	std	Y+4, r1	; 0x04
    61b0:	1b 82       	std	Y+3, r1	; 0x03
					Disarm_timer = 0;
				}

				// Auto-disarm model if timeout enabled and due
				// Don't allow disarms less than 30 seconds. That's just silly...
				if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))
    61b2:	40 91 dc 06 	lds	r20, 0x06DC
    61b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    61b8:	82 2f       	mov	r24, r18
    61ba:	90 e0       	ldi	r25, 0x00	; 0
    61bc:	24 2f       	mov	r18, r20
    61be:	04 2e       	mov	r0, r20
    61c0:	00 0c       	add	r0, r0
    61c2:	33 0b       	sbc	r19, r19
    61c4:	82 17       	cp	r24, r18
    61c6:	93 07       	cpc	r25, r19
    61c8:	04 f1       	brlt	.+64     	; 0x620a <main+0x4c0>
    61ca:	4e 31       	cpi	r20, 0x1E	; 30
    61cc:	f4 f0       	brlt	.+60     	; 0x620a <main+0x4c0>
				{
					// Disarm the FC
					General_error |= (1 << DISARMED);	// Set flags to disarmed
    61ce:	80 91 35 05 	lds	r24, 0x0535
    61d2:	84 60       	ori	r24, 0x04	; 4
    61d4:	80 93 35 05 	sts	0x0535, r24
					LED1 = 0;								// Signal that FC is now disarmed
    61d8:	2b 98       	cbi	0x05, 3	; 5
    61da:	17 c0       	rjmp	.+46     	; 0x620a <main+0x4c0>
		
		// Arm when ArmMode is OFF
		else 
		{
			// If disarmed, arm
			if (General_error & (1 << DISARMED))
    61dc:	80 91 35 05 	lds	r24, 0x0535
    61e0:	82 ff       	sbrs	r24, 2
    61e2:	05 c0       	rjmp	.+10     	; 0x61ee <main+0x4a4>
			{
				General_error &= ~(1 << DISARMED);			// Set flags to armed
    61e4:	80 91 35 05 	lds	r24, 0x0535
    61e8:	8b 7f       	andi	r24, 0xFB	; 251
    61ea:	80 93 35 05 	sts	0x0535, r24
			}
			
			LED1 = 1;
    61ee:	2b 9a       	sbi	0x05, 3	; 5
    61f0:	0c c0       	rjmp	.+24     	; 0x620a <main+0x4c0>
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
				Disarm_seconds = 0;
    61f2:	1c 86       	std	Y+12, r1	; 0x0c
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    61f4:	1c 82       	std	Y+4, r1	; 0x04
    61f6:	1b 82       	std	Y+3, r1	; 0x03
    61f8:	08 c0       	rjmp	.+16     	; 0x620a <main+0x4c0>
				Disarm_seconds = 0;
    61fa:	1c 86       	std	Y+12, r1	; 0x0c
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    61fc:	1c 82       	std	Y+4, r1	; 0x04
    61fe:	1b 82       	std	Y+3, r1	; 0x03
					General_error &= ~(1 << DISARMED);	// Set flags to armed (negate disarmed)
					CalibrateGyrosSlow();					// Calibrate gyros (also saves to eeprom)
					LED1 = 1;								// Signal that FC is ready

					Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove arm glitch
					Servo_Rate = 0;
    6200:	1b 86       	std	Y+11, r1	; 0x0b
    6202:	1a 86       	std	Y+10, r1	; 0x0a
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    6204:	21 2c       	mov	r2, r1
    6206:	31 2c       	mov	r3, r1
    6208:	21 01       	movw	r4, r2
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    620a:	0e 94 90 69 	call	0xd320	; 0xd320 <RxGetChannels>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to.
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    620e:	e0 91 66 06 	lds	r30, 0x0666
    6212:	ee 0f       	add	r30, r30
    6214:	ff 0b       	sbc	r31, r31
    6216:	ed 57       	subi	r30, 0x7D	; 125
    6218:	f6 4f       	sbci	r31, 0xF6	; 246
    621a:	80 81       	ld	r24, Z
    621c:	91 81       	ldd	r25, Z+1	; 0x01
    621e:	85 3f       	cpi	r24, 0xF5	; 245
    6220:	91 40       	sbci	r25, 0x01	; 1
    6222:	64 f0       	brlt	.+24     	; 0x623c <main+0x4f2>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    6224:	82 e0       	ldi	r24, 0x02	; 2
    6226:	80 93 30 08 	sts	0x0830, r24
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeedOut))
    622a:	48 a9       	ldd	r20, Y+48	; 0x30
    622c:	43 30       	cpi	r20, 0x03	; 3
    622e:	e9 f1       	breq	.+122    	; 0x62aa <main+0x560>
    6230:	50 91 67 06 	lds	r21, 0x0667
    6234:	5a a3       	std	Y+34, r21	; 0x22
    6236:	a5 12       	cpse	r10, r21
    6238:	13 c0       	rjmp	.+38     	; 0x6260 <main+0x516>
    623a:	48 c0       	rjmp	.+144    	; 0x62cc <main+0x582>
		if 	(RCinputs[Config.FlightChan] > 500)
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    623c:	80 81       	ld	r24, Z
    623e:	91 81       	ldd	r25, Z+1	; 0x01
    6240:	8d 30       	cpi	r24, 0x0D	; 13
    6242:	9e 4f       	sbci	r25, 0xFE	; 254
    6244:	3c f0       	brlt	.+14     	; 0x6254 <main+0x50a>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    6246:	81 e0       	ldi	r24, 0x01	; 1
    6248:	80 93 30 08 	sts	0x0830, r24
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeedOut))
    624c:	28 a9       	ldd	r18, Y+48	; 0x30
    624e:	23 30       	cpi	r18, 0x03	; 3
    6250:	79 f7       	brne	.-34     	; 0x6230 <main+0x4e6>
    6252:	1c c0       	rjmp	.+56     	; 0x628c <main+0x542>
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    6254:	10 92 30 08 	sts	0x0830, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeedOut))
    6258:	38 a9       	ldd	r19, Y+48	; 0x30
    625a:	33 30       	cpi	r19, 0x03	; 3
    625c:	49 f7       	brne	.-46     	; 0x6230 <main+0x4e6>
    625e:	09 c0       	rjmp	.+18     	; 0x6272 <main+0x528>
		{
			switch(Config.FlightSel)
    6260:	40 91 30 08 	lds	r20, 0x0830
    6264:	48 ab       	std	Y+48, r20	; 0x30
    6266:	41 30       	cpi	r20, 0x01	; 1
    6268:	89 f0       	breq	.+34     	; 0x628c <main+0x542>
    626a:	42 30       	cpi	r20, 0x02	; 2
    626c:	f1 f0       	breq	.+60     	; 0x62aa <main+0x560>
    626e:	41 11       	cpse	r20, r1
    6270:	2a c0       	rjmp	.+84     	; 0x62c6 <main+0x57c>
			{
				case 0:
					Transition_state = TRANS_P1;
    6272:	10 92 3b 05 	sts	0x053B, r1
					transition_counter = Config.Transition_P1;
    6276:	80 91 69 06 	lds	r24, 0x0669
    627a:	08 2e       	mov	r0, r24
    627c:	00 0c       	add	r0, r0
    627e:	99 0b       	sbc	r25, r25
    6280:	90 93 3d 05 	sts	0x053D, r25
    6284:	80 93 3c 05 	sts	0x053C, r24
					break;
    6288:	18 aa       	std	Y+48, r1	; 0x30
    628a:	1d c0       	rjmp	.+58     	; 0x62c6 <main+0x57c>
				case 1:
					Transition_state = TRANS_P1n;
    628c:	84 e0       	ldi	r24, 0x04	; 4
    628e:	80 93 3b 05 	sts	0x053B, r24
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    6292:	80 91 6a 06 	lds	r24, 0x066A
    6296:	08 2e       	mov	r0, r24
    6298:	00 0c       	add	r0, r0
    629a:	99 0b       	sbc	r25, r25
    629c:	90 93 3d 05 	sts	0x053D, r25
    62a0:	80 93 3c 05 	sts	0x053C, r24
					break;
    62a4:	51 e0       	ldi	r21, 0x01	; 1
    62a6:	58 ab       	std	Y+48, r21	; 0x30
    62a8:	0e c0       	rjmp	.+28     	; 0x62c6 <main+0x57c>
				case 2:
					Transition_state = TRANS_P2;
    62aa:	89 e0       	ldi	r24, 0x09	; 9
    62ac:	80 93 3b 05 	sts	0x053B, r24
					transition_counter = Config.Transition_P2;
    62b0:	80 91 6b 06 	lds	r24, 0x066B
    62b4:	08 2e       	mov	r0, r24
    62b6:	00 0c       	add	r0, r0
    62b8:	99 0b       	sbc	r25, r25
    62ba:	90 93 3d 05 	sts	0x053D, r25
    62be:	80 93 3c 05 	sts	0x053C, r24
					break;
    62c2:	22 e0       	ldi	r18, 0x02	; 2
    62c4:	28 ab       	std	Y+48, r18	; 0x30
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeedOut;
    62c6:	30 91 67 06 	lds	r19, 0x0667
    62ca:	3a a3       	std	Y+34, r19	; 0x22
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    62cc:	bb 24       	eor	r11, r11
    62ce:	b3 94       	inc	r11
    62d0:	80 91 30 08 	lds	r24, 0x0830
    62d4:	48 a9       	ldd	r20, Y+48	; 0x30
    62d6:	84 13       	cpse	r24, r20
    62d8:	01 c0       	rjmp	.+2      	; 0x62dc <main+0x592>
    62da:	b1 2c       	mov	r11, r1
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeedOut == 0)
    62dc:	80 91 67 06 	lds	r24, 0x0667
    62e0:	81 11       	cpse	r24, r1
    62e2:	03 c0       	rjmp	.+6      	; 0x62ea <main+0x5a0>
		{
			// Update the transition variable based on the selected RC channel
			UpdateTransition();
    62e4:	0e 94 80 6a 	call	0xd500	; 0xd500 <UpdateTransition>
    62e8:	08 c0       	rjmp	.+16     	; 0x62fa <main+0x5b0>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    62ea:	80 91 3c 05 	lds	r24, 0x053C
    62ee:	90 91 3d 05 	lds	r25, 0x053D
    62f2:	90 93 39 05 	sts	0x0539, r25
    62f6:	80 93 38 05 	sts	0x0538, r24
		}

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeedOut == 0)
    62fa:	40 91 67 06 	lds	r20, 0x0667
    62fe:	41 11       	cpse	r20, r1
    6300:	03 c0       	rjmp	.+6      	; 0x6308 <main+0x5be>
		{
			Transition_state = TRANSITIONING;
    6302:	85 e0       	ldi	r24, 0x05	; 5
    6304:	80 93 3b 05 	sts	0x053B, r24
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    6308:	bb 20       	and	r11, r11
    630a:	a1 f0       	breq	.+40     	; 0x6334 <main+0x5ea>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    630c:	80 91 30 08 	lds	r24, 0x0830
    6310:	08 2e       	mov	r0, r24
    6312:	00 0c       	add	r0, r0
    6314:	99 0b       	sbc	r25, r25
    6316:	fc 01       	movw	r30, r24
    6318:	ee 0f       	add	r30, r30
    631a:	ff 1f       	adc	r31, r31
    631c:	e8 0f       	add	r30, r24
    631e:	f9 1f       	adc	r31, r25
    6320:	58 a9       	ldd	r21, Y+48	; 0x30
    6322:	e5 0f       	add	r30, r21
    6324:	f1 1d       	adc	r31, r1
    6326:	57 fd       	sbrc	r21, 7
    6328:	fa 95       	dec	r31
    632a:	ea 50       	subi	r30, 0x0A	; 10
    632c:	fe 4f       	sbci	r31, 0xFE	; 254
    632e:	e4 91       	lpm	r30, Z
    6330:	e0 93 3b 05 	sts	0x053B, r30
		}

		// Calculate transition time from user's setting based on the direction of travel
		if (transition_direction == P2)
    6334:	29 81       	ldd	r18, Y+1	; 0x01
    6336:	21 30       	cpi	r18, 0x01	; 1
    6338:	29 f4       	brne	.+10     	; 0x6344 <main+0x5fa>
		{
			transition_time = TRANSITION_TIMER * Config.TransitionSpeedOut; // Outbound transition speed	
    633a:	33 ec       	ldi	r19, 0xC3	; 195
    633c:	43 03       	mulsu	r20, r19
    633e:	c0 01       	movw	r24, r0
    6340:	11 24       	eor	r1, r1
    6342:	06 c0       	rjmp	.+12     	; 0x6350 <main+0x606>
		}
		else 
		{
			transition_time = TRANSITION_TIMER * Config.TransitionSpeedIn; // Inbound transition speed		
    6344:	20 91 68 06 	lds	r18, 0x0668
    6348:	53 ec       	ldi	r21, 0xC3	; 195
    634a:	25 03       	mulsu	r18, r21
    634c:	c0 01       	movw	r24, r0
    634e:	11 24       	eor	r1, r1
		}
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeedOut != 0) && (Transition_timeout > transition_time)) ||
    6350:	44 23       	and	r20, r20
    6352:	29 f0       	breq	.+10     	; 0x635e <main+0x614>
    6354:	2e 85       	ldd	r18, Y+14	; 0x0e
    6356:	3f 85       	ldd	r19, Y+15	; 0x0f
    6358:	82 17       	cp	r24, r18
    635a:	93 07       	cpc	r25, r19
    635c:	18 f0       	brcs	.+6      	; 0x6364 <main+0x61a>
    635e:	bb 20       	and	r11, r11
    6360:	09 f4       	brne	.+2      	; 0x6364 <main+0x61a>
    6362:	ca c0       	rjmp	.+404    	; 0x64f8 <main+0x7ae>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    6364:	80 91 3b 05 	lds	r24, 0x053B
    6368:	81 11       	cpse	r24, r1
    636a:	03 c0       	rjmp	.+6      	; 0x6372 <main+0x628>
			{
				transition_counter = Config.Transition_P1;
    636c:	80 91 69 06 	lds	r24, 0x0669
    6370:	09 c0       	rjmp	.+18     	; 0x6384 <main+0x63a>
			}
			else if (Transition_state == TRANS_P1n)
    6372:	84 30       	cpi	r24, 0x04	; 4
    6374:	19 f4       	brne	.+6      	; 0x637c <main+0x632>
			{
				transition_counter = Config.Transition_P1n;
    6376:	80 91 6a 06 	lds	r24, 0x066A
    637a:	04 c0       	rjmp	.+8      	; 0x6384 <main+0x63a>
			}
			else if (Transition_state == TRANS_P2)
    637c:	89 30       	cpi	r24, 0x09	; 9
    637e:	51 f4       	brne	.+20     	; 0x6394 <main+0x64a>
			{
				transition_counter = Config.Transition_P2;
    6380:	80 91 6b 06 	lds	r24, 0x066B
    6384:	08 2e       	mov	r0, r24
    6386:	00 0c       	add	r0, r0
    6388:	99 0b       	sbc	r25, r25
    638a:	90 93 3d 05 	sts	0x053D, r25
    638e:	80 93 3c 05 	sts	0x053C, r24
    6392:	26 c0       	rjmp	.+76     	; 0x63e0 <main+0x696>
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
			}
*/
			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    6394:	82 30       	cpi	r24, 0x02	; 2
    6396:	69 f4       	brne	.+26     	; 0x63b2 <main+0x668>
			{
				if (transition_counter > Config.Transition_P1)
    6398:	80 91 3c 05 	lds	r24, 0x053C
    639c:	90 91 3d 05 	lds	r25, 0x053D
    63a0:	20 91 69 06 	lds	r18, 0x0669
    63a4:	02 2e       	mov	r0, r18
    63a6:	00 0c       	add	r0, r0
    63a8:	33 0b       	sbc	r19, r19
    63aa:	28 17       	cp	r18, r24
    63ac:	39 07       	cpc	r19, r25
    63ae:	24 f0       	brlt	.+8      	; 0x63b8 <main+0x66e>
    63b0:	0c c0       	rjmp	.+24     	; 0x63ca <main+0x680>
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
			}
*/
			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    63b2:	86 30       	cpi	r24, 0x06	; 6
    63b4:	89 f3       	breq	.-30     	; 0x6398 <main+0x64e>
    63b6:	14 c0       	rjmp	.+40     	; 0x63e0 <main+0x696>
			{
				if (transition_counter > Config.Transition_P1)
				{
					transition_counter--;
    63b8:	01 97       	sbiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter <= Config.Transition_P1)
    63ba:	28 17       	cp	r18, r24
    63bc:	39 07       	cpc	r19, r25
    63be:	4c f4       	brge	.+18     	; 0x63d2 <main+0x688>
			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
			{
				if (transition_counter > Config.Transition_P1)
				{
					transition_counter--;
    63c0:	90 93 3d 05 	sts	0x053D, r25
    63c4:	80 93 3c 05 	sts	0x053C, r24
    63c8:	0a c0       	rjmp	.+20     	; 0x63de <main+0x694>
						Transition_state = TRANS_P1;
					}
				}
				else
				{
					transition_counter++;
    63ca:	01 96       	adiw	r24, 0x01	; 1
			
					// Check end point
					if (transition_counter >= Config.Transition_P1)
    63cc:	82 17       	cp	r24, r18
    63ce:	93 07       	cpc	r25, r19
    63d0:	bc f3       	brlt	.-18     	; 0x63c0 <main+0x676>
					{
						transition_counter = Config.Transition_P1;
    63d2:	30 93 3d 05 	sts	0x053D, r19
    63d6:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P1;
    63da:	10 92 3b 05 	sts	0x053B, r1
					}
				}
				
				transition_direction = P1;
    63de:	19 82       	std	Y+1, r1	; 0x01
			}

			// Handle timed transition between P1 and P1.n
			if (Transition_state == TRANS_P1_to_P1n_start)
    63e0:	80 91 3b 05 	lds	r24, 0x053B
    63e4:	81 30       	cpi	r24, 0x01	; 1
    63e6:	71 f5       	brne	.+92     	; 0x6444 <main+0x6fa>
			{
				if (transition_counter > Config.Transition_P1n)
    63e8:	80 91 3c 05 	lds	r24, 0x053C
    63ec:	90 91 3d 05 	lds	r25, 0x053D
    63f0:	20 91 6a 06 	lds	r18, 0x066A
    63f4:	02 2e       	mov	r0, r18
    63f6:	00 0c       	add	r0, r0
    63f8:	33 0b       	sbc	r19, r19
    63fa:	28 17       	cp	r18, r24
    63fc:	39 07       	cpc	r19, r25
    63fe:	ac f4       	brge	.+42     	; 0x642a <main+0x6e0>
				{
					transition_counter--;
    6400:	01 97       	sbiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter <= Config.Transition_P1n)
    6402:	28 17       	cp	r18, r24
    6404:	39 07       	cpc	r19, r25
    6406:	3c f4       	brge	.+14     	; 0x6416 <main+0x6cc>
			// Handle timed transition between P1 and P1.n
			if (Transition_state == TRANS_P1_to_P1n_start)
			{
				if (transition_counter > Config.Transition_P1n)
				{
					transition_counter--;
    6408:	90 93 3d 05 	sts	0x053D, r25
    640c:	80 93 3c 05 	sts	0x053C, r24
						transition_counter = Config.Transition_P1n;
						Transition_state = TRANS_P1n;
					}
				}

				transition_direction = P2;
    6410:	31 e0       	ldi	r19, 0x01	; 1
    6412:	39 83       	std	Y+1, r19	; 0x01
    6414:	17 c0       	rjmp	.+46     	; 0x6444 <main+0x6fa>
					transition_counter--;
					
					// Check end point
					if (transition_counter <= Config.Transition_P1n)
					{
						transition_counter = Config.Transition_P1n;
    6416:	30 93 3d 05 	sts	0x053D, r19
    641a:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P1n;
    641e:	84 e0       	ldi	r24, 0x04	; 4
    6420:	80 93 3b 05 	sts	0x053B, r24
						transition_counter = Config.Transition_P1n;
						Transition_state = TRANS_P1n;
					}
				}

				transition_direction = P2;
    6424:	51 e0       	ldi	r21, 0x01	; 1
    6426:	59 83       	std	Y+1, r21	; 0x01
    6428:	0d c0       	rjmp	.+26     	; 0x6444 <main+0x6fa>
						Transition_state = TRANS_P1n;
					}
				}
				else
				{
					transition_counter++;
    642a:	01 96       	adiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter >= Config.Transition_P1n)
    642c:	82 17       	cp	r24, r18
    642e:	93 07       	cpc	r25, r19
    6430:	5c f3       	brlt	.-42     	; 0x6408 <main+0x6be>
					{
						transition_counter = Config.Transition_P1n;
    6432:	30 93 3d 05 	sts	0x053D, r19
    6436:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P1n;
    643a:	84 e0       	ldi	r24, 0x04	; 4
    643c:	80 93 3b 05 	sts	0x053B, r24
					}
				}

				transition_direction = P2;
    6440:	21 e0       	ldi	r18, 0x01	; 1
    6442:	29 83       	std	Y+1, r18	; 0x01
			}			
				
			// Handle timed transition between P2 and P1.n
			if (Transition_state == TRANS_P2_to_P1n_start)
    6444:	80 91 3b 05 	lds	r24, 0x053B
    6448:	88 30       	cpi	r24, 0x08	; 8
    644a:	09 f5       	brne	.+66     	; 0x648e <main+0x744>
			{
				if (transition_counter > Config.Transition_P1n)
    644c:	80 91 3c 05 	lds	r24, 0x053C
    6450:	90 91 3d 05 	lds	r25, 0x053D
    6454:	20 91 6a 06 	lds	r18, 0x066A
    6458:	02 2e       	mov	r0, r18
    645a:	00 0c       	add	r0, r0
    645c:	33 0b       	sbc	r19, r19
    645e:	28 17       	cp	r18, r24
    6460:	39 07       	cpc	r19, r25
    6462:	4c f4       	brge	.+18     	; 0x6476 <main+0x72c>
				{
					transition_counter--;
    6464:	01 97       	sbiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter <= Config.Transition_P1n)
    6466:	28 17       	cp	r18, r24
    6468:	39 07       	cpc	r19, r25
    646a:	4c f4       	brge	.+18     	; 0x647e <main+0x734>
			// Handle timed transition between P2 and P1.n
			if (Transition_state == TRANS_P2_to_P1n_start)
			{
				if (transition_counter > Config.Transition_P1n)
				{
					transition_counter--;
    646c:	90 93 3d 05 	sts	0x053D, r25
    6470:	80 93 3c 05 	sts	0x053C, r24
    6474:	0b c0       	rjmp	.+22     	; 0x648c <main+0x742>
						Transition_state = TRANS_P1n;
					}
				}
				else
				{
					transition_counter++;
    6476:	01 96       	adiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter >= Config.Transition_P1n)
    6478:	82 17       	cp	r24, r18
    647a:	93 07       	cpc	r25, r19
    647c:	bc f3       	brlt	.-18     	; 0x646c <main+0x722>
					{
						transition_counter = Config.Transition_P1n;
    647e:	30 93 3d 05 	sts	0x053D, r19
    6482:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P1n;
    6486:	84 e0       	ldi	r24, 0x04	; 4
    6488:	80 93 3b 05 	sts	0x053B, r24
					}
				}

				transition_direction = P1;
    648c:	19 82       	std	Y+1, r1	; 0x01
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    648e:	80 91 3b 05 	lds	r24, 0x053B
    6492:	8b 7f       	andi	r24, 0xFB	; 251
    6494:	83 30       	cpi	r24, 0x03	; 3
    6496:	71 f5       	brne	.+92     	; 0x64f4 <main+0x7aa>
			{
				if (transition_counter > Config.Transition_P2)
    6498:	80 91 3c 05 	lds	r24, 0x053C
    649c:	90 91 3d 05 	lds	r25, 0x053D
    64a0:	20 91 6b 06 	lds	r18, 0x066B
    64a4:	02 2e       	mov	r0, r18
    64a6:	00 0c       	add	r0, r0
    64a8:	33 0b       	sbc	r19, r19
    64aa:	28 17       	cp	r18, r24
    64ac:	39 07       	cpc	r19, r25
    64ae:	ac f4       	brge	.+42     	; 0x64da <main+0x790>
				{
					transition_counter--;
    64b0:	01 97       	sbiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter <= Config.Transition_P2)
    64b2:	28 17       	cp	r18, r24
    64b4:	39 07       	cpc	r19, r25
    64b6:	3c f4       	brge	.+14     	; 0x64c6 <main+0x77c>
			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
			{
				if (transition_counter > Config.Transition_P2)
				{
					transition_counter--;
    64b8:	90 93 3d 05 	sts	0x053D, r25
    64bc:	80 93 3c 05 	sts	0x053C, r24
						transition_counter = Config.Transition_P2;
						Transition_state = TRANS_P2;
					}
				}

				transition_direction = P2;
    64c0:	31 e0       	ldi	r19, 0x01	; 1
    64c2:	39 83       	std	Y+1, r19	; 0x01
    64c4:	17 c0       	rjmp	.+46     	; 0x64f4 <main+0x7aa>
					transition_counter--;
					
					// Check end point
					if (transition_counter <= Config.Transition_P2)
					{
						transition_counter = Config.Transition_P2;
    64c6:	30 93 3d 05 	sts	0x053D, r19
    64ca:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P2;
    64ce:	89 e0       	ldi	r24, 0x09	; 9
    64d0:	80 93 3b 05 	sts	0x053B, r24
						transition_counter = Config.Transition_P2;
						Transition_state = TRANS_P2;
					}
				}

				transition_direction = P2;
    64d4:	51 e0       	ldi	r21, 0x01	; 1
    64d6:	59 83       	std	Y+1, r21	; 0x01
    64d8:	0d c0       	rjmp	.+26     	; 0x64f4 <main+0x7aa>
						Transition_state = TRANS_P2;
					}
				}
				else
				{
					transition_counter++;
    64da:	01 96       	adiw	r24, 0x01	; 1
					
					// Check end point
					if (transition_counter >= Config.Transition_P2)
    64dc:	82 17       	cp	r24, r18
    64de:	93 07       	cpc	r25, r19
    64e0:	5c f3       	brlt	.-42     	; 0x64b8 <main+0x76e>
					{
						transition_counter = Config.Transition_P2;
    64e2:	30 93 3d 05 	sts	0x053D, r19
    64e6:	20 93 3c 05 	sts	0x053C, r18
						Transition_state = TRANS_P2;
    64ea:	89 e0       	ldi	r24, 0x09	; 9
    64ec:	80 93 3b 05 	sts	0x053B, r24
					}
				}

				transition_direction = P2;
    64f0:	21 e0       	ldi	r18, 0x01	; 1
    64f2:	29 83       	std	Y+1, r18	; 0x01
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeedOut != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    64f4:	1f 86       	std	Y+15, r1	; 0x0f
    64f6:	1e 86       	std	Y+14, r1	; 0x0e
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == Config.Transition_P1))
    64f8:	50 91 3b 05 	lds	r21, 0x053B
    64fc:	55 23       	and	r21, r21
    64fe:	61 f0       	breq	.+24     	; 0x6518 <main+0x7ce>
    6500:	20 91 38 05 	lds	r18, 0x0538
    6504:	30 91 39 05 	lds	r19, 0x0539
    6508:	80 91 69 06 	lds	r24, 0x0669
    650c:	08 2e       	mov	r0, r24
    650e:	00 0c       	add	r0, r0
    6510:	99 0b       	sbc	r25, r25
    6512:	28 17       	cp	r18, r24
    6514:	39 07       	cpc	r19, r25
    6516:	81 f4       	brne	.+32     	; 0x6538 <main+0x7ee>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    6518:	8c e0       	ldi	r24, 0x0C	; 12
    651a:	ed e2       	ldi	r30, 0x2D	; 45
    651c:	f9 e0       	ldi	r31, 0x09	; 9
    651e:	df 01       	movw	r26, r30
    6520:	1d 92       	st	X+, r1
    6522:	8a 95       	dec	r24
    6524:	e9 f7       	brne	.-6      	; 0x6520 <main+0x7d6>
			IntegralAccVertf[P2] = 0.0;
    6526:	10 92 49 09 	sts	0x0949, r1
    652a:	10 92 4a 09 	sts	0x094A, r1
    652e:	10 92 4b 09 	sts	0x094B, r1
    6532:	10 92 4c 09 	sts	0x094C, r1
    6536:	19 c0       	rjmp	.+50     	; 0x656a <main+0x820>
		}
		else if ((Transition_state == TRANS_P2) || (transition == Config.Transition_P2))
    6538:	59 30       	cpi	r21, 0x09	; 9
    653a:	41 f0       	breq	.+16     	; 0x654c <main+0x802>
    653c:	80 91 6b 06 	lds	r24, 0x066B
    6540:	08 2e       	mov	r0, r24
    6542:	00 0c       	add	r0, r0
    6544:	99 0b       	sbc	r25, r25
    6546:	28 17       	cp	r18, r24
    6548:	39 07       	cpc	r19, r25
    654a:	79 f4       	brne	.+30     	; 0x656a <main+0x820>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    654c:	8c e0       	ldi	r24, 0x0C	; 12
    654e:	e1 e2       	ldi	r30, 0x21	; 33
    6550:	f9 e0       	ldi	r31, 0x09	; 9
    6552:	df 01       	movw	r26, r30
    6554:	1d 92       	st	X+, r1
    6556:	8a 95       	dec	r24
    6558:	e9 f7       	brne	.-6      	; 0x6554 <main+0x80a>
			IntegralAccVertf[P1] = 0.0;
    655a:	10 92 45 09 	sts	0x0945, r1
    655e:	10 92 46 09 	sts	0x0946, r1
    6562:	10 92 47 09 	sts	0x0947, r1
    6566:	10 92 48 09 	sts	0x0948, r1
		
		//**********************************************************************
		//* Reset the IMU when using two orientations and just leaving P1 or P2
		//**********************************************************************
		
		if (Config.P1_Reference != NO_ORIENT)
    656a:	80 91 d9 06 	lds	r24, 0x06D9
    656e:	88 23       	and	r24, r24
    6570:	59 f1       	breq	.+86     	; 0x65c8 <main+0x87e>
		{
			// If Config.FlightSel has changed (switch based) and TransitionSpeed not set to zero, the transition state will change.
			if ((Config.TransitionSpeedOut != 0) && (Transition_state != Old_transition_state) && ((Old_transition_state == TRANS_P1) || (Old_transition_state == TRANS_P2)))
    6572:	44 23       	and	r20, r20
    6574:	59 f0       	breq	.+22     	; 0x658c <main+0x842>
    6576:	80 91 3a 05 	lds	r24, 0x053A
    657a:	58 17       	cp	r21, r24
    657c:	29 f1       	breq	.+74     	; 0x65c8 <main+0x87e>
    657e:	88 23       	and	r24, r24
    6580:	11 f0       	breq	.+4      	; 0x6586 <main+0x83c>
    6582:	89 30       	cpi	r24, 0x09	; 9
    6584:	09 f5       	brne	.+66     	; 0x65c8 <main+0x87e>
			{
				reset_IMU();
    6586:	0e 94 99 40 	call	0x8132	; 0x8132 <reset_IMU>
    658a:	1e c0       	rjmp	.+60     	; 0x65c8 <main+0x87e>
			
			// If TransitionSpeed = 0, the state is always TRANSITIONING so we can't use the old/new state changes.
			// If user is using a knob or TX-slowed switch, TransitionSpeed will be 0.
			else if (
						(Config.TransitionSpeedOut == 0) &&														// Manual transition mode and...
						(((old_transition == Config.Transition_P1) && (transition > Config.Transition_P1)) ||	// Was in P1 or P2
    658c:	80 91 36 05 	lds	r24, 0x0536
    6590:	90 91 37 05 	lds	r25, 0x0537
    6594:	20 91 69 06 	lds	r18, 0x0669
    6598:	02 2e       	mov	r0, r18
    659a:	00 0c       	add	r0, r0
    659c:	33 0b       	sbc	r19, r19
    659e:	40 91 38 05 	lds	r20, 0x0538
    65a2:	50 91 39 05 	lds	r21, 0x0539
			}
			
			// If TransitionSpeed = 0, the state is always TRANSITIONING so we can't use the old/new state changes.
			// If user is using a knob or TX-slowed switch, TransitionSpeed will be 0.
			else if (
						(Config.TransitionSpeedOut == 0) &&														// Manual transition mode and...
    65a6:	82 17       	cp	r24, r18
    65a8:	93 07       	cpc	r25, r19
    65aa:	19 f4       	brne	.+6      	; 0x65b2 <main+0x868>
						(((old_transition == Config.Transition_P1) && (transition > Config.Transition_P1)) ||	// Was in P1 or P2
    65ac:	84 17       	cp	r24, r20
    65ae:	95 07       	cpc	r25, r21
    65b0:	54 f3       	brlt	.-44     	; 0x6586 <main+0x83c>
						((old_transition == Config.Transition_P2) && (transition < Config.Transition_P2)))		// Is not somewhere in-between.
    65b2:	20 91 6b 06 	lds	r18, 0x066B
    65b6:	02 2e       	mov	r0, r18
    65b8:	00 0c       	add	r0, r0
    65ba:	33 0b       	sbc	r19, r19
			
			// If TransitionSpeed = 0, the state is always TRANSITIONING so we can't use the old/new state changes.
			// If user is using a knob or TX-slowed switch, TransitionSpeed will be 0.
			else if (
						(Config.TransitionSpeedOut == 0) &&														// Manual transition mode and...
						(((old_transition == Config.Transition_P1) && (transition > Config.Transition_P1)) ||	// Was in P1 or P2
    65bc:	82 17       	cp	r24, r18
    65be:	93 07       	cpc	r25, r19
    65c0:	19 f4       	brne	.+6      	; 0x65c8 <main+0x87e>
						((old_transition == Config.Transition_P2) && (transition < Config.Transition_P2)))		// Is not somewhere in-between.
    65c2:	48 17       	cp	r20, r24
    65c4:	59 07       	cpc	r21, r25
    65c6:	fc f2       	brlt	.-66     	; 0x6586 <main+0x83c>
				reset_IMU();
			}
		}
		
		// Save current flight mode
		old_flight = Config.FlightSel;
    65c8:	20 91 30 08 	lds	r18, 0x0830
    65cc:	28 ab       	std	Y+48, r18	; 0x30
		
		// Save old transtion state;
		Old_transition_state = Transition_state;
    65ce:	80 91 3b 05 	lds	r24, 0x053B
    65d2:	80 93 3a 05 	sts	0x053A, r24
		
		// Save last transition value
		old_transition = transition;
    65d6:	80 91 38 05 	lds	r24, 0x0538
    65da:	90 91 39 05 	lds	r25, 0x0539
    65de:	90 93 37 05 	sts	0x0537, r25
    65e2:	80 93 36 05 	sts	0x0536, r24
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    65e6:	0e 94 27 44 	call	0x884e	; 0x884e <TIM16_ReadTCNT1>
    65ea:	9f 8b       	std	Y+23, r25	; 0x17
    65ec:	8e 8b       	std	Y+22, r24	; 0x16
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    65ee:	88 15       	cp	r24, r8
    65f0:	99 05       	cpc	r25, r9
    65f2:	b8 f4       	brcc	.+46     	; 0x6622 <main+0x8d8>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    65f4:	80 e0       	ldi	r24, 0x00	; 0
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	a1 e0       	ldi	r26, 0x01	; 1
    65fa:	b0 e0       	ldi	r27, 0x00	; 0
    65fc:	88 19       	sub	r24, r8
    65fe:	99 09       	sbc	r25, r9
    6600:	a1 09       	sbc	r26, r1
    6602:	b1 09       	sbc	r27, r1
    6604:	4e 89       	ldd	r20, Y+22	; 0x16
    6606:	5f 89       	ldd	r21, Y+23	; 0x17
    6608:	84 0f       	add	r24, r20
    660a:	95 1f       	adc	r25, r21
    660c:	a1 1d       	adc	r26, r1
    660e:	b1 1d       	adc	r27, r1
    6610:	2e 81       	ldd	r18, Y+6	; 0x06
    6612:	3f 81       	ldd	r19, Y+7	; 0x07
    6614:	48 85       	ldd	r20, Y+8	; 0x08
    6616:	59 85       	ldd	r21, Y+9	; 0x09
    6618:	28 0f       	add	r18, r24
    661a:	39 1f       	adc	r19, r25
    661c:	4a 1f       	adc	r20, r26
    661e:	5b 1f       	adc	r21, r27
    6620:	0c c0       	rjmp	.+24     	; 0x663a <main+0x8f0>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    6622:	8e 89       	ldd	r24, Y+22	; 0x16
    6624:	9f 89       	ldd	r25, Y+23	; 0x17
    6626:	88 19       	sub	r24, r8
    6628:	99 09       	sbc	r25, r9
    662a:	2e 81       	ldd	r18, Y+6	; 0x06
    662c:	3f 81       	ldd	r19, Y+7	; 0x07
    662e:	48 85       	ldd	r20, Y+8	; 0x08
    6630:	59 85       	ldd	r21, Y+9	; 0x09
    6632:	28 0f       	add	r18, r24
    6634:	39 1f       	adc	r19, r25
    6636:	41 1d       	adc	r20, r1
    6638:	51 1d       	adc	r21, r1
    663a:	2e 83       	std	Y+6, r18	; 0x06
    663c:	3f 83       	std	Y+7, r19	; 0x07
    663e:	48 87       	std	Y+8, r20	; 0x08
    6640:	59 87       	std	Y+9, r21	; 0x09
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    6642:	80 91 b2 00 	lds	r24, 0x00B2
    6646:	38 a5       	ldd	r19, Y+40	; 0x28
    6648:	83 1b       	sub	r24, r19
    664a:	28 0e       	add	r2, r24
    664c:	31 1c       	adc	r3, r1
    664e:	41 1c       	adc	r4, r1
    6650:	51 1c       	adc	r5, r1
		Arm_TCNT2 = TCNT2;
    6652:	40 91 b2 00 	lds	r20, 0x00B2
    6656:	48 a7       	std	Y+40, r20	; 0x28

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    6658:	80 91 b2 00 	lds	r24, 0x00B2
    665c:	59 a1       	ldd	r21, Y+33	; 0x21
    665e:	85 1b       	sub	r24, r21
    6660:	2a 85       	ldd	r18, Y+10	; 0x0a
    6662:	3b 85       	ldd	r19, Y+11	; 0x0b
    6664:	28 0f       	add	r18, r24
    6666:	31 1d       	adc	r19, r1
    6668:	3b 87       	std	Y+11, r19	; 0x0b
    666a:	2a 87       	std	Y+10, r18	; 0x0a
		FastServo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    666c:	80 91 b2 00 	lds	r24, 0x00B2
    6670:	85 1b       	sub	r24, r21
    6672:	4c 89       	ldd	r20, Y+20	; 0x14
    6674:	5d 89       	ldd	r21, Y+21	; 0x15
    6676:	48 0f       	add	r20, r24
    6678:	51 1d       	adc	r21, r1
    667a:	5d 8b       	std	Y+21, r21	; 0x15
    667c:	4c 8b       	std	Y+20, r20	; 0x14
		ServoRate_TCNT2 = TCNT2;
    667e:	50 91 b2 00 	lds	r21, 0x00B2
    6682:	59 a3       	std	Y+33, r21	; 0x21
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    6684:	20 91 b2 00 	lds	r18, 0x00B2
    6688:	30 91 2c 05 	lds	r19, 0x052C
    668c:	80 91 2a 05 	lds	r24, 0x052A
    6690:	90 91 2b 05 	lds	r25, 0x052B
    6694:	23 1b       	sub	r18, r19
    6696:	82 0f       	add	r24, r18
    6698:	91 1d       	adc	r25, r1
    669a:	90 93 2b 05 	sts	0x052B, r25
    669e:	80 93 2a 05 	sts	0x052A, r24
		Servo_TCNT2 = TCNT2;
    66a2:	80 91 b2 00 	lds	r24, 0x00B2
    66a6:	80 93 2c 05 	sts	0x052C, r24
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    66aa:	80 91 b2 00 	lds	r24, 0x00B2
    66ae:	2c a1       	ldd	r18, Y+36	; 0x24
    66b0:	82 1b       	sub	r24, r18
    66b2:	4e 85       	ldd	r20, Y+14	; 0x0e
    66b4:	5f 85       	ldd	r21, Y+15	; 0x0f
    66b6:	48 0f       	add	r20, r24
    66b8:	51 1d       	adc	r21, r1
    66ba:	5f 87       	std	Y+15, r21	; 0x0f
    66bc:	4e 87       	std	Y+14, r20	; 0x0e
		Transition_TCNT2 = TCNT2;
    66be:	50 91 b2 00 	lds	r21, 0x00B2
    66c2:	5c a3       	std	Y+36, r21	; 0x24

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    66c4:	80 91 b2 00 	lds	r24, 0x00B2
    66c8:	2d a1       	ldd	r18, Y+37	; 0x25
    66ca:	82 1b       	sub	r24, r18
    66cc:	4a 89       	ldd	r20, Y+18	; 0x12
    66ce:	5b 89       	ldd	r21, Y+19	; 0x13
    66d0:	48 0f       	add	r20, r24
    66d2:	51 1d       	adc	r21, r1
    66d4:	5b 8b       	std	Y+19, r21	; 0x13
    66d6:	4a 8b       	std	Y+18, r20	; 0x12
		Status_TCNT2 = TCNT2;
    66d8:	50 91 b2 00 	lds	r21, 0x00B2
    66dc:	5d a3       	std	Y+37, r21	; 0x25
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    66de:	80 91 b2 00 	lds	r24, 0x00B2
    66e2:	2e a1       	ldd	r18, Y+38	; 0x26
    66e4:	82 1b       	sub	r24, r18
    66e6:	4c 8d       	ldd	r20, Y+28	; 0x1c
    66e8:	5d 8d       	ldd	r21, Y+29	; 0x1d
    66ea:	48 0f       	add	r20, r24
    66ec:	51 1d       	adc	r21, r1
    66ee:	5d 8f       	std	Y+29, r21	; 0x1d
    66f0:	4c 8f       	std	Y+28, r20	; 0x1c
		Refresh_TCNT2 = TCNT2;
    66f2:	50 91 b2 00 	lds	r21, 0x00B2
    66f6:	5e a3       	std	Y+38, r21	; 0x26

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    66f8:	80 91 b2 00 	lds	r24, 0x00B2
    66fc:	2f a1       	ldd	r18, Y+39	; 0x27
    66fe:	82 1b       	sub	r24, r18
    6700:	4b 81       	ldd	r20, Y+3	; 0x03
    6702:	5c 81       	ldd	r21, Y+4	; 0x04
    6704:	48 0f       	add	r20, r24
    6706:	51 1d       	adc	r21, r1
    6708:	5c 83       	std	Y+4, r21	; 0x04
    670a:	4b 83       	std	Y+3, r20	; 0x03
		Disarm_TCNT2 = TCNT2;
    670c:	50 91 b2 00 	lds	r21, 0x00B2
    6710:	5f a3       	std	Y+39, r21	; 0x27

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    6712:	80 91 b2 00 	lds	r24, 0x00B2
    6716:	29 a5       	ldd	r18, Y+41	; 0x29
    6718:	82 1b       	sub	r24, r18
    671a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    671c:	58 a1       	ldd	r21, Y+32	; 0x20
    671e:	48 0f       	add	r20, r24
    6720:	51 1d       	adc	r21, r1
    6722:	58 a3       	std	Y+32, r21	; 0x20
    6724:	4f 8f       	std	Y+31, r20	; 0x1f
		Ticker_TCNT2 = TCNT2;
    6726:	50 91 b2 00 	lds	r21, 0x00B2
    672a:	59 a7       	std	Y+41, r21	; 0x29
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    672c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    672e:	38 a1       	ldd	r19, Y+32	; 0x20
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    6730:	80 91 33 05 	lds	r24, 0x0533
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    6734:	33 ff       	sbrs	r19, 3
    6736:	02 c0       	rjmp	.+4      	; 0x673c <main+0x9f2>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    6738:	80 61       	ori	r24, 0x10	; 16
    673a:	01 c0       	rjmp	.+2      	; 0x673e <main+0x9f4>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    673c:	8f 7e       	andi	r24, 0xEF	; 239
    673e:	80 93 33 05 	sts	0x0533, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    6742:	4a 85       	ldd	r20, Y+10	; 0x0a
    6744:	5b 85       	ldd	r21, Y+11	; 0x0b
    6746:	4d 32       	cpi	r20, 0x2D	; 45
    6748:	51 40       	sbci	r21, 0x01	; 1
    674a:	20 f0       	brcs	.+8      	; 0x6754 <main+0xa0a>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    674c:	1b 86       	std	Y+11, r1	; 0x0b
    674e:	1a 86       	std	Y+10, r1	; 0x0a
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    6750:	21 e0       	ldi	r18, 0x01	; 1
    6752:	2d 83       	std	Y+5, r18	; 0x05
			Servo_Rate = 0;
		}
		
		if (FastServo_Rate > SERVO_RATE_HIGH)
    6754:	4c 89       	ldd	r20, Y+20	; 0x14
    6756:	5d 89       	ldd	r21, Y+21	; 0x15
    6758:	4a 3d       	cpi	r20, 0xDA	; 218
    675a:	51 05       	cpc	r21, r1
    675c:	20 f0       	brcs	.+8      	; 0x6766 <main+0xa1c>
		{
			FastServoTick = true;	// Slow device is ready for output generation
			FastServo_Rate = 0;
    675e:	1d 8a       	std	Y+21, r1	; 0x15
    6760:	1c 8a       	std	Y+20, r1	; 0x14
			Servo_Rate = 0;
		}
		
		if (FastServo_Rate > SERVO_RATE_HIGH)
		{
			FastServoTick = true;	// Slow device is ready for output generation
    6762:	51 e0       	ldi	r21, 0x01	; 1
    6764:	5b 8f       	std	Y+27, r21	; 0x1b
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (50ms)
		if (RC_Timeout > RC_OVERDUE)
    6766:	80 91 2a 05 	lds	r24, 0x052A
    676a:	90 91 2b 05 	lds	r25, 0x052B
    676e:	82 3d       	cpi	r24, 0xD2	; 210
    6770:	93 40       	sbci	r25, 0x03	; 3
    6772:	18 f0       	brcs	.+6      	; 0x677a <main+0xa30>
			if ((!Overdue) && (Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
			{
				add_log(NOSIGNAL);
			}
#endif			
			Overdue = true;	// This results in a "No Signal" error
    6774:	81 e0       	ldi	r24, 0x01	; 1
    6776:	80 93 2e 05 	sts	0x052E, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    677a:	0e 94 8b 39 	call	0x7316	; 0x7316 <ReadGyros>
		ReadAcc();
    677e:	0e 94 2d 18 	call	0x305a	; 0x305a <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    6782:	0e 94 27 44 	call	0x884e	; 0x884e <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    6786:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    6788:	20 91 2f 05 	lds	r18, 0x052F
    678c:	30 91 30 05 	lds	r19, 0x0530
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    6790:	20 91 2f 05 	lds	r18, 0x052F
    6794:	30 91 30 05 	lds	r19, 0x0530
    6798:	4c 01       	movw	r8, r24
    679a:	82 1a       	sub	r8, r18
    679c:	93 0a       	sbc	r9, r19
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    679e:	90 93 30 05 	sts	0x0530, r25
    67a2:	80 93 2f 05 	sts	0x052F, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    67a6:	80 91 01 09 	lds	r24, 0x0901
    67aa:	90 91 02 09 	lds	r25, 0x0902
    67ae:	a1 2c       	mov	r10, r1
    67b0:	b1 2c       	mov	r11, r1
    67b2:	02 97       	sbiw	r24, 0x02	; 2
    67b4:	88 f0       	brcs	.+34     	; 0x67d8 <main+0xa8e>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    67b6:	80 91 01 09 	lds	r24, 0x0901
    67ba:	90 91 02 09 	lds	r25, 0x0902
    67be:	a0 e0       	ldi	r26, 0x00	; 0
    67c0:	b0 e0       	ldi	r27, 0x00	; 0
    67c2:	4f e0       	ldi	r20, 0x0F	; 15
    67c4:	88 0f       	add	r24, r24
    67c6:	99 1f       	adc	r25, r25
    67c8:	aa 1f       	adc	r26, r26
    67ca:	bb 1f       	adc	r27, r27
    67cc:	4a 95       	dec	r20
    67ce:	d1 f7       	brne	.-12     	; 0x67c4 <main+0xa7a>
    67d0:	88 0e       	add	r8, r24
    67d2:	99 1e       	adc	r9, r25
    67d4:	aa 1e       	adc	r10, r26
    67d6:	bb 1e       	adc	r11, r27
		}

		TMR0_counter = 0;
    67d8:	10 92 02 09 	sts	0x0902, r1
    67dc:	10 92 01 09 	sts	0x0901, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    67e0:	c5 01       	movw	r24, r10
    67e2:	b4 01       	movw	r22, r8
    67e4:	0e 94 79 3e 	call	0x7cf2	; 0x7cf2 <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    67e8:	c5 01       	movw	r24, r10
    67ea:	b4 01       	movw	r22, r8
    67ec:	0e 94 46 63 	call	0xc68c	; 0xc68c <Sensor_PID>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)  // THROTTLEIDLE = 50
    67f0:	80 91 81 09 	lds	r24, 0x0981
    67f4:	90 91 82 09 	lds	r25, 0x0982
    67f8:	c2 97       	sbiw	r24, 0x32	; 50
    67fa:	e4 f4       	brge	.+56     	; 0x6834 <main+0xaea>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);
    67fc:	80 91 35 05 	lds	r24, 0x0535
    6800:	8e 7f       	andi	r24, 0xFE	; 254
    6802:	80 93 35 05 	sts	0x0535, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6);
    6806:	88 e1       	ldi	r24, 0x18	; 24
    6808:	e1 e2       	ldi	r30, 0x21	; 33
    680a:	f9 e0       	ldi	r31, 0x09	; 9
    680c:	df 01       	movw	r26, r30
    680e:	1d 92       	st	X+, r1
    6810:	8a 95       	dec	r24
    6812:	e9 f7       	brne	.-6      	; 0x680e <main+0xac4>
			IntegralAccVertf[P1] = 0.0;
    6814:	10 92 45 09 	sts	0x0945, r1
    6818:	10 92 46 09 	sts	0x0946, r1
    681c:	10 92 47 09 	sts	0x0947, r1
    6820:	10 92 48 09 	sts	0x0948, r1
			IntegralAccVertf[P2] = 0.0;
    6824:	10 92 49 09 	sts	0x0949, r1
    6828:	10 92 4a 09 	sts	0x094A, r1
    682c:	10 92 4b 09 	sts	0x094B, r1
    6830:	10 92 4c 09 	sts	0x094C, r1
		//* FrameRate = Serial frame gap as measured by the ISR.
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//************************************************************

		if (Interrupted)
    6834:	80 91 ee 08 	lds	r24, 0x08EE
    6838:	88 23       	and	r24, r24
    683a:	09 f4       	brne	.+2      	; 0x683e <main+0xaf4>
    683c:	bc c0       	rjmp	.+376    	; 0x69b6 <main+0xc6c>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer if not in FAST mode.
			if (Config.Servo_rate < FAST)
    683e:	80 91 63 06 	lds	r24, 0x0663
    6842:	82 30       	cpi	r24, 0x02	; 2
    6844:	64 f4       	brge	.+24     	; 0x685e <main+0xb14>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    6846:	21 e0       	ldi	r18, 0x01	; 1
    6848:	2d 87       	std	Y+13, r18	; 0x0d
    684a:	2e 81       	ldd	r18, Y+6	; 0x06
    684c:	3f 81       	ldd	r19, Y+7	; 0x07
    684e:	48 85       	ldd	r20, Y+8	; 0x08
    6850:	59 85       	ldd	r21, Y+9	; 0x09
    6852:	24 3c       	cpi	r18, 0xC4	; 196
    6854:	32 4a       	sbci	r19, 0xA2	; 162
    6856:	41 05       	cpc	r20, r1
    6858:	51 05       	cpc	r21, r1
    685a:	08 f4       	brcc	.+2      	; 0x685e <main+0xb14>
    685c:	1d 86       	std	Y+13, r1	; 0x0d
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    685e:	2a 81       	ldd	r18, Y+2	; 0x02
    6860:	21 11       	cpse	r18, r1
    6862:	0e c0       	rjmp	.+28     	; 0x6880 <main+0xb36>
    6864:	82 30       	cpi	r24, 0x02	; 2
    6866:	09 f0       	breq	.+2      	; 0x686a <main+0xb20>
    6868:	d3 c1       	rjmp	.+934    	; 0x6c10 <main+0xec6>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    686a:	80 91 1d 09 	lds	r24, 0x091D
    686e:	90 91 1e 09 	lds	r25, 0x091E
    6872:	31 e0       	ldi	r19, 0x01	; 1
    6874:	3d 87       	std	Y+13, r19	; 0x0d
    6876:	84 3c       	cpi	r24, 0xC4	; 196
    6878:	92 4a       	sbci	r25, 0xA2	; 162
    687a:	40 f4       	brcc	.+16     	; 0x688c <main+0xb42>
    687c:	1d 86       	std	Y+13, r1	; 0x0d
    687e:	3a c0       	rjmp	.+116    	; 0x68f4 <main+0xbaa>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the serial data gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    6880:	82 30       	cpi	r24, 0x02	; 2
    6882:	09 f0       	breq	.+2      	; 0x6886 <main+0xb3c>
    6884:	c5 c1       	rjmp	.+906    	; 0x6c10 <main+0xec6>
				// Slow packets (19.7ms gap). Pulse spans just two input packets.
				// 38.8s available space for S.Bus, 40ms for Satellite and 39.92ms for Xtreme.
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
    6886:	5d 85       	ldd	r21, Y+13	; 0x0d
    6888:	55 23       	and	r21, r21
    688a:	a1 f1       	breq	.+104    	; 0x68f4 <main+0xbaa>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
    688c:	88 ec       	ldi	r24, 0xC8	; 200
    688e:	c8 16       	cp	r12, r24
    6890:	8b e4       	ldi	r24, 0x4B	; 75
    6892:	d8 06       	cpc	r13, r24
    6894:	e1 04       	cpc	r14, r1
    6896:	f1 04       	cpc	r15, r1
    6898:	08 f0       	brcs	.+2      	; 0x689c <main+0xb52>
    689a:	bd c1       	rjmp	.+890    	; 0x6c16 <main+0xecc>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
    689c:	96 e2       	ldi	r25, 0x26	; 38
    689e:	c9 16       	cp	r12, r25
    68a0:	9f e3       	ldi	r25, 0x3F	; 63
    68a2:	d9 06       	cpc	r13, r25
    68a4:	e1 04       	cpc	r14, r1
    68a6:	f1 04       	cpc	r15, r1
    68a8:	08 f0       	brcs	.+2      	; 0x68ac <main+0xb62>
    68aa:	b8 c1       	rjmp	.+880    	; 0x6c1c <main+0xed2>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
    68ac:	a1 e2       	ldi	r26, 0x21	; 33
    68ae:	ca 16       	cp	r12, r26
    68b0:	a6 e3       	ldi	r26, 0x36	; 54
    68b2:	da 06       	cpc	r13, r26
    68b4:	e1 04       	cpc	r14, r1
    68b6:	f1 04       	cpc	r15, r1
    68b8:	08 f0       	brcs	.+2      	; 0x68bc <main+0xb72>
    68ba:	b3 c1       	rjmp	.+870    	; 0x6c22 <main+0xed8>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
    68bc:	bd e5       	ldi	r27, 0x5D	; 93
    68be:	cb 16       	cp	r12, r27
    68c0:	bf e2       	ldi	r27, 0x2F	; 47
    68c2:	db 06       	cpc	r13, r27
    68c4:	e1 04       	cpc	r14, r1
    68c6:	f1 04       	cpc	r15, r1
    68c8:	08 f0       	brcs	.+2      	; 0x68cc <main+0xb82>
    68ca:	ae c1       	rjmp	.+860    	; 0x6c28 <main+0xede>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
    68cc:	ec ec       	ldi	r30, 0xCC	; 204
    68ce:	ce 16       	cp	r12, r30
    68d0:	e9 e2       	ldi	r30, 0x29	; 41
    68d2:	de 06       	cpc	r13, r30
    68d4:	e1 04       	cpc	r14, r1
    68d6:	f1 04       	cpc	r15, r1
    68d8:	08 f0       	brcs	.+2      	; 0x68dc <main+0xb92>
    68da:	a9 c1       	rjmp	.+850    	; 0x6c2e <main+0xee4>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
    68dc:	f4 ee       	ldi	r31, 0xE4	; 228
    68de:	cf 16       	cp	r12, r31
    68e0:	f5 e2       	ldi	r31, 0x25	; 37
    68e2:	df 06       	cpc	r13, r31
    68e4:	e1 04       	cpc	r14, r1
    68e6:	f1 04       	cpc	r15, r1
    68e8:	88 f1       	brcs	.+98     	; 0x694c <main+0xc02>
    68ea:	21 e0       	ldi	r18, 0x01	; 1
    68ec:	2a 83       	std	Y+2, r18	; 0x02
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
    68ee:	09 e0       	ldi	r16, 0x09	; 9
    68f0:	10 e0       	ldi	r17, 0x00	; 0
    68f2:	35 c0       	rjmp	.+106    	; 0x695e <main+0xc14>

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
    68f4:	3d ec       	ldi	r19, 0xCD	; 205
    68f6:	c3 16       	cp	r12, r19
    68f8:	36 e4       	ldi	r19, 0x46	; 70
    68fa:	d3 06       	cpc	r13, r19
    68fc:	e1 04       	cpc	r14, r1
    68fe:	f1 04       	cpc	r15, r1
    6900:	08 f0       	brcs	.+2      	; 0x6904 <main+0xbba>
    6902:	9a c1       	rjmp	.+820    	; 0x6c38 <main+0xeee>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
    6904:	44 ea       	ldi	r20, 0xA4	; 164
    6906:	c4 16       	cp	r12, r20
    6908:	48 e3       	ldi	r20, 0x38	; 56
    690a:	d4 06       	cpc	r13, r20
    690c:	e1 04       	cpc	r14, r1
    690e:	f1 04       	cpc	r15, r1
    6910:	08 f0       	brcs	.+2      	; 0x6914 <main+0xbca>
    6912:	95 c1       	rjmp	.+810    	; 0x6c3e <main+0xef4>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
    6914:	53 e3       	ldi	r21, 0x33	; 51
    6916:	c5 16       	cp	r12, r21
    6918:	5f e2       	ldi	r21, 0x2F	; 47
    691a:	d5 06       	cpc	r13, r21
    691c:	e1 04       	cpc	r14, r1
    691e:	f1 04       	cpc	r15, r1
    6920:	08 f0       	brcs	.+2      	; 0x6924 <main+0xbda>
    6922:	90 c1       	rjmp	.+800    	; 0x6c44 <main+0xefa>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
    6924:	85 e7       	ldi	r24, 0x75	; 117
    6926:	c8 16       	cp	r12, r24
    6928:	88 e2       	ldi	r24, 0x28	; 40
    692a:	d8 06       	cpc	r13, r24
    692c:	e1 04       	cpc	r14, r1
    692e:	f1 04       	cpc	r15, r1
    6930:	08 f0       	brcs	.+2      	; 0x6934 <main+0xbea>
    6932:	8b c1       	rjmp	.+790    	; 0x6c4a <main+0xf00>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
    6934:	96 e6       	ldi	r25, 0x66	; 102
    6936:	c9 16       	cp	r12, r25
    6938:	93 e2       	ldi	r25, 0x23	; 35
    693a:	d9 06       	cpc	r13, r25
    693c:	e1 04       	cpc	r14, r1
    693e:	f1 04       	cpc	r15, r1
    6940:	50 f0       	brcs	.+20     	; 0x6956 <main+0xc0c>
    6942:	21 e0       	ldi	r18, 0x01	; 1
    6944:	2a 83       	std	Y+2, r18	; 0x02
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
    6946:	07 e0       	ldi	r16, 0x07	; 7
    6948:	10 e0       	ldi	r17, 0x00	; 0
    694a:	09 c0       	rjmp	.+18     	; 0x695e <main+0xc14>
    694c:	31 e0       	ldi	r19, 0x01	; 1
    694e:	3a 83       	std	Y+2, r19	; 0x02
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    6950:	0a e0       	ldi	r16, 0x0A	; 10
    6952:	10 e0       	ldi	r17, 0x00	; 0
    6954:	04 c0       	rjmp	.+8      	; 0x695e <main+0xc14>
    6956:	41 e0       	ldi	r20, 0x01	; 1
    6958:	4a 83       	std	Y+2, r20	; 0x02
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 275Hz
    695a:	08 e0       	ldi	r16, 0x08	; 8
    695c:	10 e0       	ldi	r17, 0x00	; 0
				PWM_pulses = 1;
			}
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    695e:	0e 94 27 44 	call	0x884e	; 0x884e <TIM16_ReadTCNT1>
    6962:	9f 8b       	std	Y+23, r25	; 0x17
    6964:	8e 8b       	std	Y+22, r24	; 0x16
			//* output when serial RC formats are used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    6966:	80 91 63 06 	lds	r24, 0x0663
    696a:	82 30       	cpi	r24, 0x02	; 2
    696c:	b9 f4       	brne	.+46     	; 0x699c <main+0xc52>
    696e:	5a 81       	ldd	r21, Y+2	; 0x02
    6970:	55 23       	and	r21, r21
    6972:	a1 f0       	breq	.+40     	; 0x699c <main+0xc52>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    6974:	2e 8d       	ldd	r18, Y+30	; 0x1e
    6976:	21 11       	cpse	r18, r1
    6978:	16 c0       	rjmp	.+44     	; 0x69a6 <main+0xc5c>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    697a:	80 91 ee 08 	lds	r24, 0x08EE
    697e:	88 23       	and	r24, r24
    6980:	11 f0       	breq	.+4      	; 0x6986 <main+0xc3c>
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    6982:	77 24       	eor	r7, r7
    6984:	73 94       	inc	r7
					}
					
					Interrupted = false;		// Cancel pending interrupts
    6986:	10 92 ee 08 	sts	0x08EE, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    698a:	0e 94 80 48 	call	0x9100	; 0x9100 <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    698e:	1e 82       	std	Y+6, r1	; 0x06
    6990:	1f 82       	std	Y+7, r1	; 0x07
    6992:	18 86       	std	Y+8, r1	; 0x08
    6994:	19 86       	std	Y+9, r1	; 0x09
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    6996:	19 8a       	std	Y+17, r1	; 0x11
					PWMBlocked = false;			// Enable PWM generation	
    6998:	18 8a       	std	Y+16, r1	; 0x10
    699a:	0d c0       	rjmp	.+26     	; 0x69b6 <main+0xc6c>
			{
				PWM_pulses = 1;
			}
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    699c:	1e 82       	std	Y+6, r1	; 0x06
    699e:	1f 82       	std	Y+7, r1	; 0x07
    69a0:	18 86       	std	Y+8, r1	; 0x08
    69a2:	19 86       	std	Y+9, r1	; 0x09
    69a4:	08 c0       	rjmp	.+16     	; 0x69b6 <main+0xc6c>
    69a6:	1e 82       	std	Y+6, r1	; 0x06
    69a8:	1f 82       	std	Y+7, r1	; 0x07
    69aa:	18 86       	std	Y+8, r1	; 0x08
    69ac:	19 86       	std	Y+9, r1	; 0x09
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    69ae:	1e 8e       	std	Y+30, r1	; 0x1e
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    69b0:	31 e0       	ldi	r19, 0x01	; 1
    69b2:	38 8b       	std	Y+16, r19	; 0x10
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    69b4:	1a 82       	std	Y+2, r1	; 0x02
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    69b6:	80 91 ee 08 	lds	r24, 0x08EE
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    69ba:	81 11       	cpse	r24, r1
    69bc:	0c c0       	rjmp	.+24     	; 0x69d6 <main+0xc8c>
				(Interrupted) ||											// Run at RC rate
				((Config.Servo_rate == FAST) && (!PWMBlocked)) ||			// Run at full loop rate if allowed
    69be:	80 91 63 06 	lds	r24, 0x0663
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    69c2:	82 30       	cpi	r24, 0x02	; 2
    69c4:	19 f4       	brne	.+6      	; 0x69cc <main+0xc82>
				((Config.Servo_rate == FAST) && (!PWMBlocked)) ||			// Run at full loop rate if allowed
    69c6:	48 89       	ldd	r20, Y+16	; 0x10
    69c8:	44 23       	and	r20, r20
    69ca:	29 f0       	breq	.+10     	; 0x69d6 <main+0xc8c>
    69cc:	90 91 2e 05 	lds	r25, 0x052E
    69d0:	99 23       	and	r25, r25
    69d2:	09 f4       	brne	.+2      	; 0x69d6 <main+0xc8c>
    69d4:	d5 c0       	rjmp	.+426    	; 0x6b80 <main+0xe36>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed (loop rate) in FAST mode
			//******************************************************************

			if (Interrupted)
    69d6:	80 91 ee 08 	lds	r24, 0x08EE
    69da:	88 23       	and	r24, r24
    69dc:	21 f0       	breq	.+8      	; 0x69e6 <main+0xc9c>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    69de:	10 92 ee 08 	sts	0x08EE, r1
			//* High speed (loop rate) in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    69e2:	77 24       	eor	r7, r7
    69e4:	73 94       	inc	r7
			{
				// Mark bits depending on the selected output type
				if	(
						// Frame rates regardless of signal presence/absence
						(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    69e6:	90 91 63 06 	lds	r25, 0x0663
    69ea:	68 ee       	ldi	r22, 0xE8	; 232
    69ec:	76 e0       	ldi	r23, 0x06	; 6
    69ee:	fb 01       	movw	r30, r22
    69f0:	20 e0       	ldi	r18, 0x00	; 0
    69f2:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    69f4:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    69f6:	92 30       	cpi	r25, 0x02	; 2
    69f8:	49 f4       	brne	.+18     	; 0x6a0c <main+0xcc2>
						// Frame rates regardless of signal presence/absence
						(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    69fa:	40 81       	ld	r20, Z
    69fc:	41 11       	cpse	r20, r1
    69fe:	04 c0       	rjmp	.+8      	; 0x6a08 <main+0xcbe>
    6a00:	5d 81       	ldd	r21, Y+5	; 0x05
    6a02:	51 11       	cpse	r21, r1
    6a04:	2e c0       	rjmp	.+92     	; 0x6a62 <main+0xd18>
    6a06:	02 c0       	rjmp	.+4      	; 0x6a0c <main+0xcc2>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker > ASERVO))									// Always for D.Servo and Motor in FAST modes when signal present
    6a08:	14 16       	cp	r1, r20
    6a0a:	5c f1       	brlt	.+86     	; 0x6a62 <main+0xd18>
						
						||
						
						// Frame rates when signal present
						(
						(!Overdue) &&
    6a0c:	40 91 2e 05 	lds	r20, 0x052E
						(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker > ASERVO))									// Always for D.Servo and Motor in FAST modes when signal present
						)
						
						||
    6a10:	41 11       	cpse	r20, r1
    6a12:	0f c0       	rjmp	.+30     	; 0x6a32 <main+0xce8>
						
						// Frame rates when signal present
						(
						(!Overdue) &&
    6a14:	91 30       	cpi	r25, 0x01	; 1
    6a16:	29 f4       	brne	.+10     	; 0x6a22 <main+0xcd8>
						(
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    6a18:	40 81       	ld	r20, Z
    6a1a:	44 23       	and	r20, r20
    6a1c:	21 f0       	breq	.+8      	; 0x6a26 <main+0xcdc>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC when signal present
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// At RC rate for D.Servo and Motor when signal present
    6a1e:	0c f5       	brge	.+66     	; 0x6a62 <main+0xd18>
    6a20:	08 c0       	rjmp	.+16     	; 0x6a32 <main+0xce8>
    6a22:	91 11       	cpse	r25, r1
    6a24:	06 c0       	rjmp	.+12     	; 0x6a32 <main+0xce8>

						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    6a26:	4d 85       	ldd	r20, Y+13	; 0x0d
    6a28:	41 11       	cpse	r20, r1
    6a2a:	1b c0       	rjmp	.+54     	; 0x6a62 <main+0xd18>
    6a2c:	5d 81       	ldd	r21, Y+5	; 0x05
    6a2e:	51 11       	cpse	r21, r1
    6a30:	18 c0       	rjmp	.+48     	; 0x6a62 <main+0xd18>
						
						||
						
						// Rates when no signal
						(
						(Overdue) &&
    6a32:	40 91 2e 05 	lds	r20, 0x052E
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC when signal present
						)
						)
						
						||
    6a36:	44 23       	and	r20, r20
    6a38:	e1 f0       	breq	.+56     	; 0x6a72 <main+0xd28>
						
						// Rates when no signal
						(
						(Overdue) &&
    6a3a:	91 30       	cpi	r25, 0x01	; 1
    6a3c:	69 f4       	brne	.+26     	; 0x6a58 <main+0xd0e>
						(
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo when no signal present
    6a3e:	40 81       	ld	r20, Z
    6a40:	44 23       	and	r20, r20
    6a42:	61 f0       	breq	.+24     	; 0x6a5c <main+0xd12>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker > ASERVO) && (!SlowRC) && FastServoTick) ||	// At FastServoTick for A.Servo in SYNC with Fast RC
    6a44:	b4 f0       	brlt	.+44     	; 0x6a72 <main+0xd28>
    6a46:	5d 85       	ldd	r21, Y+13	; 0x0d
    6a48:	51 11       	cpse	r21, r1
    6a4a:	02 c0       	rjmp	.+4      	; 0x6a50 <main+0xd06>
    6a4c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    6a4e:	07 c0       	rjmp	.+14     	; 0x6a5e <main+0xd14>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker > ASERVO) && (SlowRC) && ServoTick) ||		// At ServoTick for A.Servo in SYNC with slow RC
    6a50:	5d 81       	ldd	r21, Y+5	; 0x05
    6a52:	51 11       	cpse	r21, r1
    6a54:	06 c0       	rjmp	.+12     	; 0x6a62 <main+0xd18>
    6a56:	0d c0       	rjmp	.+26     	; 0x6a72 <main+0xd28>
    6a58:	91 11       	cpse	r25, r1
    6a5a:	0b c0       	rjmp	.+22     	; 0x6a72 <main+0xd28>
	
						((Config.Servo_rate == LOW) && ServoTick)																	// All outputs at ServoTick in LOW mode
    6a5c:	4d 81       	ldd	r20, Y+5	; 0x05
    6a5e:	44 23       	and	r20, r20
    6a60:	41 f0       	breq	.+16     	; 0x6a72 <main+0xd28>
						)
						)
					)
				{
					ServoFlag |= (1 << i);
    6a62:	41 e0       	ldi	r20, 0x01	; 1
    6a64:	50 e0       	ldi	r21, 0x00	; 0
    6a66:	02 2e       	mov	r0, r18
    6a68:	01 c0       	rjmp	.+2      	; 0x6a6c <main+0xd22>
    6a6a:	44 0f       	add	r20, r20
    6a6c:	0a 94       	dec	r0
    6a6e:	ea f7       	brpl	.-6      	; 0x6a6a <main+0xd20>
    6a70:	84 2b       	or	r24, r20
    6a72:	2f 5f       	subi	r18, 0xFF	; 255
    6a74:	3f 4f       	sbci	r19, 0xFF	; 255
    6a76:	b2 96       	adiw	r30, 0x22	; 34
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    6a78:	28 30       	cpi	r18, 0x08	; 8
    6a7a:	31 05       	cpc	r19, r1
    6a7c:	09 f0       	breq	.+2      	; 0x6a80 <main+0xd36>
    6a7e:	bb cf       	rjmp	.-138    	; 0x69f6 <main+0xcac>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    6a80:	5d 81       	ldd	r21, Y+5	; 0x05
    6a82:	55 23       	and	r21, r21
    6a84:	11 f0       	breq	.+4      	; 0x6a8a <main+0xd40>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    6a86:	1b 86       	std	Y+11, r1	; 0x0b
    6a88:	1a 86       	std	Y+10, r1	; 0x0a
			}

			if (FastServoTick)
    6a8a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6a8c:	22 23       	and	r18, r18
    6a8e:	11 f0       	breq	.+4      	; 0x6a94 <main+0xd4a>
			{
				FastServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				FastServo_Rate = 0;
    6a90:	1d 8a       	std	Y+21, r1	; 0x15
    6a92:	1c 8a       	std	Y+20, r1	; 0x14
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    6a94:	01 30       	cpi	r16, 0x01	; 1
    6a96:	11 05       	cpc	r17, r1
    6a98:	19 f5       	brne	.+70     	; 0x6ae0 <main+0xd96>
    6a9a:	92 30       	cpi	r25, 0x02	; 2
    6a9c:	09 f5       	brne	.+66     	; 0x6ae0 <main+0xd96>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
    6a9e:	3d e8       	ldi	r19, 0x8D	; 141
    6aa0:	83 16       	cp	r8, r19
    6aa2:	30 e2       	ldi	r19, 0x20	; 32
    6aa4:	93 06       	cpc	r9, r19
    6aa6:	a1 04       	cpc	r10, r1
    6aa8:	b1 04       	cpc	r11, r1
    6aaa:	90 f0       	brcs	.+36     	; 0x6ad0 <main+0xd86>
    6aac:	75 01       	movw	r14, r10
    6aae:	64 01       	movw	r12, r8
    6ab0:	42 e6       	ldi	r20, 0x62	; 98
    6ab2:	84 16       	cp	r8, r20
    6ab4:	41 e5       	ldi	r20, 0x51	; 81
    6ab6:	94 06       	cpc	r9, r20
    6ab8:	a1 04       	cpc	r10, r1
    6aba:	b1 04       	cpc	r11, r1
    6abc:	30 f0       	brcs	.+12     	; 0x6aca <main+0xd80>
    6abe:	31 e6       	ldi	r19, 0x61	; 97
    6ac0:	c3 2e       	mov	r12, r19
    6ac2:	31 e5       	ldi	r19, 0x51	; 81
    6ac4:	d3 2e       	mov	r13, r19
    6ac6:	e1 2c       	mov	r14, r1
    6ac8:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    6aca:	51 e0       	ldi	r21, 0x01	; 1
    6acc:	58 8b       	std	Y+16, r21	; 0x10
    6ace:	08 c0       	rjmp	.+16     	; 0x6ae0 <main+0xd96>
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
				{
					PWM_interval = PWM_PERIOD_BEST;
    6ad0:	2d e8       	ldi	r18, 0x8D	; 141
    6ad2:	c2 2e       	mov	r12, r18
    6ad4:	20 e2       	ldi	r18, 0x20	; 32
    6ad6:	d2 2e       	mov	r13, r18
    6ad8:	e1 2c       	mov	r14, r1
    6ada:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    6adc:	21 e0       	ldi	r18, 0x01	; 1
    6ade:	28 8b       	std	Y+16, r18	; 0x10
				{
					PWM_interval = interval;		// Actual interval
				}
			}
			
			Calculate_PID();						// Calculate PID values
    6ae0:	6d a7       	std	Y+45, r22	; 0x2d
    6ae2:	7e a7       	std	Y+46, r23	; 0x2e
    6ae4:	8c a7       	std	Y+44, r24	; 0x2c
    6ae6:	0e 94 b7 66 	call	0xcd6e	; 0xcd6e <Calculate_PID>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
    6aea:	0e 94 3a 5b 	call	0xb674	; 0xb674 <ProcessMixer>
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits. 
    6aee:	0e 94 40 59 	call	0xb280	; 0xb280 <UpdateServos>
													// Note that values are now at system levels (were centered around zero, now centered around 3750).				

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    6af2:	90 91 2e 05 	lds	r25, 0x052E
    6af6:	6d a5       	ldd	r22, Y+45	; 0x2d
    6af8:	7e a5       	ldd	r23, Y+46	; 0x2e
    6afa:	8c a5       	ldd	r24, Y+44	; 0x2c
    6afc:	91 11       	cpse	r25, r1
    6afe:	04 c0       	rjmp	.+8      	; 0x6b08 <main+0xdbe>
				}
			}
		
			// Note: This is probably pointless as it's too late to save the PWM just mangled
			// Has overdue become false this loop?
			if (LastLoopOverdue && !Overdue)
    6b00:	3b a1       	ldd	r19, Y+35	; 0x23
    6b02:	31 11       	cpse	r19, r1
    6b04:	18 c0       	rjmp	.+48     	; 0x6b36 <main+0xdec>
    6b06:	20 c0       	rjmp	.+64     	; 0x6b48 <main+0xdfe>
    6b08:	20 e0       	ldi	r18, 0x00	; 0
    6b0a:	30 e0       	ldi	r19, 0x00	; 0
			if (Overdue)
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
				{
					// Check for motor marker
					if (Config.Channel[i].Motor_marker == MOTOR)
    6b0c:	db 01       	movw	r26, r22
    6b0e:	9c 91       	ld	r25, X
    6b10:	92 30       	cpi	r25, 0x02	; 2
    6b12:	49 f4       	brne	.+18     	; 0x6b26 <main+0xddc>
					{
						// Set output to motor idle pulse width
						ServoOut[i] = MOTOR_0_SYSTEM;
    6b14:	f9 01       	movw	r30, r18
    6b16:	ee 0f       	add	r30, r30
    6b18:	ff 1f       	adc	r31, r31
    6b1a:	eb 56       	subi	r30, 0x6B	; 107
    6b1c:	f6 4f       	sbci	r31, 0xF6	; 246
    6b1e:	4e eb       	ldi	r20, 0xBE	; 190
    6b20:	5a e0       	ldi	r21, 0x0A	; 10
    6b22:	51 83       	std	Z+1, r21	; 0x01
    6b24:	40 83       	st	Z, r20
    6b26:	2f 5f       	subi	r18, 0xFF	; 255
    6b28:	3f 4f       	sbci	r19, 0xFF	; 255
    6b2a:	6e 5d       	subi	r22, 0xDE	; 222
    6b2c:	7f 4f       	sbci	r23, 0xFF	; 255

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
    6b2e:	28 30       	cpi	r18, 0x08	; 8
    6b30:	31 05       	cpc	r19, r1
    6b32:	61 f7       	brne	.-40     	; 0x6b0c <main+0xdc2>
    6b34:	e5 cf       	rjmp	.-54     	; 0x6b00 <main+0xdb6>
				}
			}
		
			// Note: This is probably pointless as it's too late to save the PWM just mangled
			// Has overdue become false this loop?
			if (LastLoopOverdue && !Overdue)
    6b36:	90 91 2e 05 	lds	r25, 0x052E
    6b3a:	91 11       	cpse	r25, r1
    6b3c:	05 c0       	rjmp	.+10     	; 0x6b48 <main+0xdfe>
			{
				Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove glitch
    6b3e:	90 91 34 05 	lds	r25, 0x0534
    6b42:	92 60       	ori	r25, 0x02	; 2
    6b44:	90 93 34 05 	sts	0x0534, r25
			}
		
			// Save Overdue status of current loop
			LastLoopOverdue = Overdue;
    6b48:	50 91 2e 05 	lds	r21, 0x052E
    6b4c:	5b a3       	std	Y+35, r21	; 0x23
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    6b4e:	66 20       	and	r6, r6
    6b50:	39 f0       	breq	.+14     	; 0x6b60 <main+0xe16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6b52:	8b ee       	ldi	r24, 0xEB	; 235
    6b54:	9c e2       	ldi	r25, 0x2C	; 44
    6b56:	01 97       	sbiw	r24, 0x01	; 1
    6b58:	f1 f7       	brne	.-4      	; 0x6b56 <main+0xe0c>
    6b5a:	00 c0       	rjmp	.+0      	; 0x6b5c <main+0xe12>
    6b5c:	00 00       	nop
    6b5e:	02 c0       	rjmp	.+4      	; 0x6b64 <main+0xe1a>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    6b60:	0e 94 c7 6a 	call	0xd58e	; 0xd58e <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    6b64:	80 91 63 06 	lds	r24, 0x0663
    6b68:	82 30       	cpi	r24, 0x02	; 2
    6b6a:	29 f4       	brne	.+10     	; 0x6b76 <main+0xe2c>
    6b6c:	10 16       	cp	r1, r16
    6b6e:	11 06       	cpc	r1, r17
    6b70:	14 f4       	brge	.+4      	; 0x6b76 <main+0xe2c>
			{
				PWM_pulses--;
    6b72:	01 50       	subi	r16, 0x01	; 1
    6b74:	11 09       	sbc	r17, r1
			}
			
			LoopCount = 0;						// Reset loop counter for averaging sensors
    6b76:	10 92 2d 05 	sts	0x052D, r1
    6b7a:	1b 8e       	std	Y+27, r1	; 0x1b
    6b7c:	1d 82       	std	Y+5, r1	; 0x05
    6b7e:	24 c0       	rjmp	.+72     	; 0x6bc8 <main+0xe7e>
		}
		
		// In FAST mode and in-between bursts, sync up with the RC so that the time from Interrupt to PWM is constant.
		// This helps tighten up the number of pulses allowable
		else if ((Config.Servo_rate == FAST) && (PWMBlocked == true) && (RCrateMeasured == true) && (RCInterruptsON == true) && (Overdue == false))
    6b80:	82 30       	cpi	r24, 0x02	; 2
    6b82:	11 f5       	brne	.+68     	; 0x6bc8 <main+0xe7e>
    6b84:	28 89       	ldd	r18, Y+16	; 0x10
    6b86:	22 23       	and	r18, r18
    6b88:	f9 f0       	breq	.+62     	; 0x6bc8 <main+0xe7e>
    6b8a:	3a 81       	ldd	r19, Y+2	; 0x02
    6b8c:	33 23       	and	r19, r19
    6b8e:	79 f1       	breq	.+94     	; 0x6bee <main+0xea4>
    6b90:	49 89       	ldd	r20, Y+17	; 0x11
    6b92:	44 23       	and	r20, r20
    6b94:	09 f4       	brne	.+2      	; 0x6b98 <main+0xe4e>
    6b96:	5e c0       	rjmp	.+188    	; 0x6c54 <main+0xf0a>
    6b98:	80 91 2e 05 	lds	r24, 0x052E
    6b9c:	81 11       	cpse	r24, r1
    6b9e:	14 c0       	rjmp	.+40     	; 0x6bc8 <main+0xe7e>
    6ba0:	80 e0       	ldi	r24, 0x00	; 0
    6ba2:	90 e0       	ldi	r25, 0x00	; 0
		{
			fast_sync_timer = 0;
			
			// Wait here until interrupted or timed out (15ms)
			while ((Interrupted == false) && (fast_sync_timer < FASTSYNCLIMIT))
    6ba4:	20 91 ee 08 	lds	r18, 0x08EE
    6ba8:	21 11       	cpse	r18, r1
    6baa:	0e c0       	rjmp	.+28     	; 0x6bc8 <main+0xe7e>
    6bac:	85 32       	cpi	r24, 0x25	; 37
    6bae:	31 e0       	ldi	r19, 0x01	; 1
    6bb0:	93 07       	cpc	r25, r19
    6bb2:	50 f4       	brcc	.+20     	; 0x6bc8 <main+0xe7e>
			{
				fast_sync_timer += (uint8_t)(TCNT2 - fast_sync_TCNT2);
    6bb4:	20 91 b2 00 	lds	r18, 0x00B2
    6bb8:	5a a5       	ldd	r21, Y+42	; 0x2a
    6bba:	25 1b       	sub	r18, r21
    6bbc:	82 0f       	add	r24, r18
    6bbe:	91 1d       	adc	r25, r1
				fast_sync_TCNT2 = TCNT2;
    6bc0:	20 91 b2 00 	lds	r18, 0x00B2
    6bc4:	2a a7       	std	Y+42, r18	; 0x2a
    6bc6:	ee cf       	rjmp	.-36     	; 0x6ba4 <main+0xe5a>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    6bc8:	10 16       	cp	r1, r16
    6bca:	11 06       	cpc	r1, r17
    6bcc:	84 f0       	brlt	.+32     	; 0x6bee <main+0xea4>
    6bce:	4a 81       	ldd	r20, Y+2	; 0x02
    6bd0:	44 23       	and	r20, r20
    6bd2:	69 f0       	breq	.+26     	; 0x6bee <main+0xea4>
    6bd4:	59 89       	ldd	r21, Y+17	; 0x11
    6bd6:	51 11       	cpse	r21, r1
    6bd8:	0a c0       	rjmp	.+20     	; 0x6bee <main+0xea4>
    6bda:	80 91 63 06 	lds	r24, 0x0663
    6bde:	82 30       	cpi	r24, 0x02	; 2
    6be0:	29 f4       	brne	.+10     	; 0x6bec <main+0xea2>
		{
			init_int();					// Re-enable interrupts
    6be2:	0e 94 93 48 	call	0x9126	; 0x9126 <init_int>
			RCInterruptsON = true;
    6be6:	21 e0       	ldi	r18, 0x01	; 1
    6be8:	29 8b       	std	Y+17, r18	; 0x11
    6bea:	01 c0       	rjmp	.+2      	; 0x6bee <main+0xea4>
    6bec:	19 8a       	std	Y+17, r1	; 0x11
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    6bee:	80 91 35 05 	lds	r24, 0x0535
    6bf2:	3b a5       	ldd	r19, Y+43	; 0x2b
    6bf4:	38 17       	cp	r19, r24
    6bf6:	29 f0       	breq	.+10     	; 0x6c02 <main+0xeb8>
    6bf8:	4f a5       	ldd	r20, Y+47	; 0x2f
    6bfa:	41 11       	cpse	r20, r1
    6bfc:	02 c0       	rjmp	.+4      	; 0x6c02 <main+0xeb8>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    6bfe:	57 e0       	ldi	r21, 0x07	; 7
    6c00:	5f a7       	std	Y+47, r21	; 0x2f
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    6c02:	20 91 35 05 	lds	r18, 0x0535
    6c06:	2b a7       	std	Y+43, r18	; 0x2b
		
	} // while loop
    6c08:	aa a0       	ldd	r10, Y+34	; 0x22
    6c0a:	8e 88       	ldd	r8, Y+22	; 0x16
    6c0c:	9f 88       	ldd	r9, Y+23	; 0x17
    6c0e:	e6 c8       	rjmp	.-3636   	; 0x5ddc <main+0x92>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    6c10:	01 e0       	ldi	r16, 0x01	; 1
    6c12:	10 e0       	ldi	r17, 0x00	; 0
    6c14:	a4 ce       	rjmp	.-696    	; 0x695e <main+0xc14>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
    6c16:	04 e0       	ldi	r16, 0x04	; 4
    6c18:	10 e0       	ldi	r17, 0x00	; 0
    6c1a:	0b c0       	rjmp	.+22     	; 0x6c32 <main+0xee8>
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
    6c1c:	05 e0       	ldi	r16, 0x05	; 5
    6c1e:	10 e0       	ldi	r17, 0x00	; 0
    6c20:	08 c0       	rjmp	.+16     	; 0x6c32 <main+0xee8>
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
    6c22:	06 e0       	ldi	r16, 0x06	; 6
    6c24:	10 e0       	ldi	r17, 0x00	; 0
    6c26:	05 c0       	rjmp	.+10     	; 0x6c32 <main+0xee8>
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
    6c28:	07 e0       	ldi	r16, 0x07	; 7
    6c2a:	10 e0       	ldi	r17, 0x00	; 0
    6c2c:	02 c0       	rjmp	.+4      	; 0x6c32 <main+0xee8>
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    6c2e:	08 e0       	ldi	r16, 0x08	; 8
    6c30:	10 e0       	ldi	r17, 0x00	; 0
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    6c32:	31 e0       	ldi	r19, 0x01	; 1
    6c34:	3a 83       	std	Y+2, r19	; 0x02
    6c36:	93 ce       	rjmp	.-730    	; 0x695e <main+0xc14>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 29ms is safe for all formats.

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
    6c38:	03 e0       	ldi	r16, 0x03	; 3
    6c3a:	10 e0       	ldi	r17, 0x00	; 0
    6c3c:	08 c0       	rjmp	.+16     	; 0x6c4e <main+0xf04>
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
    6c3e:	04 e0       	ldi	r16, 0x04	; 4
    6c40:	10 e0       	ldi	r17, 0x00	; 0
    6c42:	05 c0       	rjmp	.+10     	; 0x6c4e <main+0xf04>
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
    6c44:	05 e0       	ldi	r16, 0x05	; 5
    6c46:	10 e0       	ldi	r17, 0x00	; 0
    6c48:	02 c0       	rjmp	.+4      	; 0x6c4e <main+0xf04>
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    6c4a:	06 e0       	ldi	r16, 0x06	; 6
    6c4c:	10 e0       	ldi	r17, 0x00	; 0
			Servo_Rate = 0;
		}
		
		if (FastServo_Rate > SERVO_RATE_HIGH)
		{
			FastServoTick = true;	// Slow device is ready for output generation
    6c4e:	41 e0       	ldi	r20, 0x01	; 1
    6c50:	4a 83       	std	Y+2, r20	; 0x02
    6c52:	85 ce       	rjmp	.-758    	; 0x695e <main+0xc14>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    6c54:	10 16       	cp	r1, r16
    6c56:	11 06       	cpc	r1, r17
    6c58:	54 f2       	brlt	.-108    	; 0x6bee <main+0xea4>
    6c5a:	bf cf       	rjmp	.-130    	; 0x6bda <main+0xe90>

00006c5c <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    6c5c:	0f 93       	push	r16
    6c5e:	1f 93       	push	r17
    6c60:	cf 93       	push	r28
    6c62:	df 93       	push	r29
    6c64:	c7 e0       	ldi	r28, 0x07	; 7
    6c66:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    6c68:	08 2f       	mov	r16, r24
    6c6a:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    6c6c:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    6c6e:	c8 01       	movw	r24, r16
    6c70:	0c 2e       	mov	r0, r28
    6c72:	02 c0       	rjmp	.+4      	; 0x6c78 <spiwrite+0x1c>
    6c74:	95 95       	asr	r25
    6c76:	87 95       	ror	r24
    6c78:	0a 94       	dec	r0
    6c7a:	e2 f7       	brpl	.-8      	; 0x6c74 <spiwrite+0x18>
    6c7c:	80 ff       	sbrs	r24, 0
    6c7e:	02 c0       	rjmp	.+4      	; 0x6c84 <spiwrite+0x28>
		{
			LCD_SI = 1;
    6c80:	59 9a       	sbi	0x0b, 1	; 11
    6c82:	01 c0       	rjmp	.+2      	; 0x6c86 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    6c84:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    6c86:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    6c88:	0e 94 03 16 	call	0x2c06	; 0x2c06 <glcd_delay>
    6c8c:	21 97       	sbiw	r28, 0x01	; 1
    6c8e:	70 f7       	brcc	.-36     	; 0x6c6c <spiwrite+0x10>
	}
}
    6c90:	df 91       	pop	r29
    6c92:	cf 91       	pop	r28
    6c94:	1f 91       	pop	r17
    6c96:	0f 91       	pop	r16
    6c98:	08 95       	ret

00006c9a <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    6c9a:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    6c9c:	0c 94 2e 36 	jmp	0x6c5c	; 0x6c5c <spiwrite>

00006ca0 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    6ca0:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    6ca2:	0c 94 2e 36 	jmp	0x6c5c	; 0x6c5c <spiwrite>

00006ca6 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    6ca6:	cf 93       	push	r28
    6ca8:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);		// 0x81
    6caa:	81 e8       	ldi	r24, 0x81	; 129
    6cac:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
	st7565_command(val);
    6cb0:	8c 2f       	mov	r24, r28
}
    6cb2:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);		// 0x81
	st7565_command(val);
    6cb4:	0c 94 4d 36 	jmp	0x6c9a	; 0x6c9a <st7565_command>

00006cb8 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    6cb8:	cf 93       	push	r28
    6cba:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    6cbc:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    6cbe:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6cc0:	87 e8       	ldi	r24, 0x87	; 135
    6cc2:	93 e1       	ldi	r25, 0x13	; 19
    6cc4:	01 97       	sbiw	r24, 0x01	; 1
    6cc6:	f1 f7       	brne	.-4      	; 0x6cc4 <st7565_init+0xc>
    6cc8:	00 c0       	rjmp	.+0      	; 0x6cca <st7565_init+0x12>
    6cca:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    6ccc:	5e 9a       	sbi	0x0b, 6	; 11
    6cce:	c9 e3       	ldi	r28, 0x39	; 57
    6cd0:	d4 e1       	ldi	r29, 0x14	; 20

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    6cd2:	fe 01       	movw	r30, r28
    6cd4:	84 91       	lpm	r24, Z
    6cd6:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
    6cda:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    6cdc:	f4 e1       	ldi	r31, 0x14	; 20
    6cde:	c7 34       	cpi	r28, 0x47	; 71
    6ce0:	df 07       	cpc	r29, r31
    6ce2:	b9 f7       	brne	.-18     	; 0x6cd2 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    6ce4:	80 91 da 06 	lds	r24, 0x06DA
    6ce8:	0e 94 53 36 	call	0x6ca6	; 0x6ca6 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    6cec:	88 ec       	ldi	r24, 0xC8	; 200
}
    6cee:	df 91       	pop	r29
    6cf0:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    6cf2:	0c 94 4d 36 	jmp	0x6c9a	; 0x6c9a <st7565_command>

00006cf6 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    6cf6:	cf 92       	push	r12
    6cf8:	df 92       	push	r13
    6cfa:	ef 92       	push	r14
    6cfc:	ff 92       	push	r15
    6cfe:	0f 93       	push	r16
    6d00:	1f 93       	push	r17
    6d02:	cf 93       	push	r28
    6d04:	df 93       	push	r29
    6d06:	8c 01       	movw	r16, r24
    6d08:	c7 e4       	ldi	r28, 0x47	; 71
    6d0a:	d4 e1       	ldi	r29, 0x14	; 20
    6d0c:	ec 2e       	mov	r14, r28
    6d0e:	88 e0       	ldi	r24, 0x08	; 8
    6d10:	e8 0e       	add	r14, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    6d12:	fe 01       	movw	r30, r28
    6d14:	84 91       	lpm	r24, Z
    6d16:	80 6b       	ori	r24, 0xB0	; 176
    6d18:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    6d1c:	80 e0       	ldi	r24, 0x00	; 0
    6d1e:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    6d22:	80 e1       	ldi	r24, 0x10	; 16
    6d24:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    6d28:	80 ee       	ldi	r24, 0xE0	; 224
    6d2a:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
    6d2e:	68 01       	movw	r12, r16

		for(c = 0; c < 128; c++) 
    6d30:	f1 2c       	mov	r15, r1
		{
			st7565_data(buffer[(128*p)+c]);
    6d32:	f6 01       	movw	r30, r12
    6d34:	81 91       	ld	r24, Z+
    6d36:	6f 01       	movw	r12, r30
    6d38:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    6d3c:	f3 94       	inc	r15
    6d3e:	f0 e8       	ldi	r31, 0x80	; 128
    6d40:	ff 12       	cpse	r15, r31
    6d42:	f7 cf       	rjmp	.-18     	; 0x6d32 <write_buffer+0x3c>
    6d44:	21 96       	adiw	r28, 0x01	; 1
    6d46:	00 58       	subi	r16, 0x80	; 128
    6d48:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    6d4a:	ec 12       	cpse	r14, r28
    6d4c:	e2 cf       	rjmp	.-60     	; 0x6d12 <write_buffer+0x1c>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    6d4e:	df 91       	pop	r29
    6d50:	cf 91       	pop	r28
    6d52:	1f 91       	pop	r17
    6d54:	0f 91       	pop	r16
    6d56:	ff 90       	pop	r15
    6d58:	ef 90       	pop	r14
    6d5a:	df 90       	pop	r13
    6d5c:	cf 90       	pop	r12
    6d5e:	08 95       	ret

00006d60 <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    6d60:	20 e0       	ldi	r18, 0x00	; 0
    6d62:	34 e0       	ldi	r19, 0x04	; 4
    6d64:	fc 01       	movw	r30, r24
    6d66:	a9 01       	movw	r20, r18
    6d68:	11 92       	st	Z+, r1
    6d6a:	41 50       	subi	r20, 0x01	; 1
    6d6c:	50 40       	sbci	r21, 0x00	; 0
    6d6e:	e1 f7       	brne	.-8      	; 0x6d68 <clear_buffer+0x8>
    6d70:	08 95       	ret

00006d72 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    6d72:	cf 93       	push	r28
    6d74:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    6d76:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    6d78:	8d 2f       	mov	r24, r29
    6d7a:	80 6b       	ori	r24, 0xB0	; 176
    6d7c:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    6d80:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    6d82:	8c 2f       	mov	r24, r28
    6d84:	8f 70       	andi	r24, 0x0F	; 15
    6d86:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    6d8a:	8c 2f       	mov	r24, r28
    6d8c:	82 95       	swap	r24
    6d8e:	8f 70       	andi	r24, 0x0F	; 15
    6d90:	80 61       	ori	r24, 0x10	; 16
    6d92:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
			st7565_data(0x00);											// Clear data
    6d96:	80 e0       	ldi	r24, 0x00	; 0
    6d98:	0e 94 50 36 	call	0x6ca0	; 0x6ca0 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    6d9c:	cf 5f       	subi	r28, 0xFF	; 255
    6d9e:	c0 38       	cpi	r28, 0x80	; 128
    6da0:	81 f7       	brne	.-32     	; 0x6d82 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    6da2:	df 5f       	subi	r29, 0xFF	; 255
    6da4:	d8 30       	cpi	r29, 0x08	; 8
    6da6:	41 f7       	brne	.-48     	; 0x6d78 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    6da8:	df 91       	pop	r29
    6daa:	cf 91       	pop	r28
    6dac:	08 95       	ret

00006dae <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    6dae:	67 fd       	sbrc	r22, 7
    6db0:	35 c0       	rjmp	.+106    	; 0x6e1c <setpixel+0x6e>
    6db2:	40 34       	cpi	r20, 0x40	; 64
    6db4:	98 f5       	brcc	.+102    	; 0x6e1c <setpixel+0x6e>
    6db6:	34 2f       	mov	r19, r20
    6db8:	36 95       	lsr	r19
    6dba:	36 95       	lsr	r19
    6dbc:	36 95       	lsr	r19
    6dbe:	70 e0       	ldi	r23, 0x00	; 0
    6dc0:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    6dc2:	22 23       	and	r18, r18
    6dc4:	a9 f0       	breq	.+42     	; 0x6df0 <setpixel+0x42>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    6dc6:	20 e8       	ldi	r18, 0x80	; 128
    6dc8:	32 9f       	mul	r19, r18
    6dca:	60 0d       	add	r22, r0
    6dcc:	71 1d       	adc	r23, r1
    6dce:	11 24       	eor	r1, r1
    6dd0:	fc 01       	movw	r30, r24
    6dd2:	e6 0f       	add	r30, r22
    6dd4:	f7 1f       	adc	r31, r23
    6dd6:	40 95       	com	r20
    6dd8:	50 95       	com	r21
    6dda:	47 70       	andi	r20, 0x07	; 7
    6ddc:	55 27       	eor	r21, r21
    6dde:	81 e0       	ldi	r24, 0x01	; 1
    6de0:	90 e0       	ldi	r25, 0x00	; 0
    6de2:	01 c0       	rjmp	.+2      	; 0x6de6 <setpixel+0x38>
    6de4:	88 0f       	add	r24, r24
    6de6:	4a 95       	dec	r20
    6de8:	ea f7       	brpl	.-6      	; 0x6de4 <setpixel+0x36>
    6dea:	90 81       	ld	r25, Z
    6dec:	89 2b       	or	r24, r25
    6dee:	15 c0       	rjmp	.+42     	; 0x6e1a <setpixel+0x6c>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    6df0:	20 e8       	ldi	r18, 0x80	; 128
    6df2:	32 9f       	mul	r19, r18
    6df4:	60 0d       	add	r22, r0
    6df6:	71 1d       	adc	r23, r1
    6df8:	11 24       	eor	r1, r1
    6dfa:	fc 01       	movw	r30, r24
    6dfc:	e6 0f       	add	r30, r22
    6dfe:	f7 1f       	adc	r31, r23
    6e00:	40 95       	com	r20
    6e02:	50 95       	com	r21
    6e04:	47 70       	andi	r20, 0x07	; 7
    6e06:	55 27       	eor	r21, r21
    6e08:	81 e0       	ldi	r24, 0x01	; 1
    6e0a:	90 e0       	ldi	r25, 0x00	; 0
    6e0c:	01 c0       	rjmp	.+2      	; 0x6e10 <setpixel+0x62>
    6e0e:	88 0f       	add	r24, r24
    6e10:	4a 95       	dec	r20
    6e12:	ea f7       	brpl	.-6      	; 0x6e0e <setpixel+0x60>
    6e14:	80 95       	com	r24
    6e16:	90 81       	ld	r25, Z
    6e18:	89 23       	and	r24, r25
    6e1a:	80 83       	st	Z, r24
    6e1c:	08 95       	ret

00006e1e <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    6e1e:	9f 92       	push	r9
    6e20:	af 92       	push	r10
    6e22:	bf 92       	push	r11
    6e24:	cf 92       	push	r12
    6e26:	df 92       	push	r13
    6e28:	ef 92       	push	r14
    6e2a:	ff 92       	push	r15
    6e2c:	0f 93       	push	r16
    6e2e:	1f 93       	push	r17
    6e30:	cf 93       	push	r28
    6e32:	df 93       	push	r29
    6e34:	6c 01       	movw	r12, r24
    6e36:	c6 2f       	mov	r28, r22
    6e38:	d4 2f       	mov	r29, r20
    6e3a:	12 2f       	mov	r17, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    6e3c:	40 2f       	mov	r20, r16
    6e3e:	50 e0       	ldi	r21, 0x00	; 0
    6e40:	4d 1b       	sub	r20, r29
    6e42:	51 09       	sbc	r21, r1
    6e44:	57 ff       	sbrs	r21, 7
    6e46:	03 c0       	rjmp	.+6      	; 0x6e4e <drawline+0x30>
    6e48:	51 95       	neg	r21
    6e4a:	41 95       	neg	r20
    6e4c:	51 09       	sbc	r21, r1
    6e4e:	81 2f       	mov	r24, r17
    6e50:	90 e0       	ldi	r25, 0x00	; 0
    6e52:	8c 1b       	sub	r24, r28
    6e54:	91 09       	sbc	r25, r1
    6e56:	97 ff       	sbrs	r25, 7
    6e58:	03 c0       	rjmp	.+6      	; 0x6e60 <drawline+0x42>
    6e5a:	91 95       	neg	r25
    6e5c:	81 95       	neg	r24
    6e5e:	91 09       	sbc	r25, r1
    6e60:	aa 24       	eor	r10, r10
    6e62:	a3 94       	inc	r10
    6e64:	84 17       	cp	r24, r20
    6e66:	95 07       	cpc	r25, r21
    6e68:	14 f0       	brlt	.+4      	; 0x6e6e <drawline+0x50>
    6e6a:	a1 2c       	mov	r10, r1
    6e6c:	06 c0       	rjmp	.+12     	; 0x6e7a <drawline+0x5c>
	if (steep) 
    6e6e:	81 2f       	mov	r24, r17
	{
		swap(x0, y0);
		swap(x1, y1);
    6e70:	10 2f       	mov	r17, r16
    6e72:	08 2f       	mov	r16, r24

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
    6e74:	8c 2f       	mov	r24, r28
	{
		swap(x0, y0);
    6e76:	cd 2f       	mov	r28, r29
    6e78:	d8 2f       	mov	r29, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    6e7a:	1c 17       	cp	r17, r28
    6e7c:	30 f4       	brcc	.+12     	; 0x6e8a <drawline+0x6c>
    6e7e:	8d 2f       	mov	r24, r29
	{
		swap(x0, x1);
		swap(y0, y1);
    6e80:	d0 2f       	mov	r29, r16
    6e82:	08 2f       	mov	r16, r24
	{
		swap(x0, y0);
		swap(x1, y1);
	}

	if (x0 > x1) 
    6e84:	8c 2f       	mov	r24, r28
    6e86:	c1 2f       	mov	r28, r17
    6e88:	18 2f       	mov	r17, r24
		swap(x0, x1);
		swap(y0, y1);
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    6e8a:	91 2e       	mov	r9, r17
    6e8c:	9c 1a       	sub	r9, r28
	dy = abs(y1 - y0);
    6e8e:	40 2f       	mov	r20, r16
    6e90:	50 e0       	ldi	r21, 0x00	; 0
    6e92:	4d 1b       	sub	r20, r29
    6e94:	51 09       	sbc	r21, r1
    6e96:	57 ff       	sbrs	r21, 7
    6e98:	03 c0       	rjmp	.+6      	; 0x6ea0 <drawline+0x82>
    6e9a:	51 95       	neg	r21
    6e9c:	41 95       	neg	r20
    6e9e:	51 09       	sbc	r21, r1
    6ea0:	f4 2e       	mov	r15, r20

	int8_t err = dx / 2;
    6ea2:	b9 2c       	mov	r11, r9
    6ea4:	b6 94       	lsr	r11
	int8_t ystep;

	if (y0 < y1) 
    6ea6:	d0 17       	cp	r29, r16
    6ea8:	10 f0       	brcs	.+4      	; 0x6eae <drawline+0x90>
	{
		ystep = 1;
	} 
	else 
	{
		ystep = -1;
    6eaa:	0f ef       	ldi	r16, 0xFF	; 255
    6eac:	10 c0       	rjmp	.+32     	; 0x6ece <drawline+0xb0>
	int8_t err = dx / 2;
	int8_t ystep;

	if (y0 < y1) 
	{
		ystep = 1;
    6eae:	01 e0       	ldi	r16, 0x01	; 1
    6eb0:	0e c0       	rjmp	.+28     	; 0x6ece <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    6eb2:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    6eb4:	aa 20       	and	r10, r10
    6eb6:	71 f0       	breq	.+28     	; 0x6ed4 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    6eb8:	4c 2f       	mov	r20, r28
    6eba:	6d 2f       	mov	r22, r29
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    6ebc:	c6 01       	movw	r24, r12
    6ebe:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
		}
		err -= dy;
    6ec2:	bf 18       	sub	r11, r15
		if (err < 0) 
    6ec4:	b7 fe       	sbrs	r11, 7
    6ec6:	02 c0       	rjmp	.+4      	; 0x6ecc <drawline+0xae>
		{
			y0 += ystep;
    6ec8:	d0 0f       	add	r29, r16
			err += dx;
    6eca:	b9 0c       	add	r11, r9
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    6ecc:	cf 5f       	subi	r28, 0xFF	; 255
    6ece:	c1 17       	cp	r28, r17
    6ed0:	80 f3       	brcs	.-32     	; 0x6eb2 <drawline+0x94>
    6ed2:	03 c0       	rjmp	.+6      	; 0x6eda <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    6ed4:	4d 2f       	mov	r20, r29
    6ed6:	6c 2f       	mov	r22, r28
    6ed8:	f1 cf       	rjmp	.-30     	; 0x6ebc <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    6eda:	df 91       	pop	r29
    6edc:	cf 91       	pop	r28
    6ede:	1f 91       	pop	r17
    6ee0:	0f 91       	pop	r16
    6ee2:	ff 90       	pop	r15
    6ee4:	ef 90       	pop	r14
    6ee6:	df 90       	pop	r13
    6ee8:	cf 90       	pop	r12
    6eea:	bf 90       	pop	r11
    6eec:	af 90       	pop	r10
    6eee:	9f 90       	pop	r9
    6ef0:	08 95       	ret

00006ef2 <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    6ef2:	af 92       	push	r10
    6ef4:	bf 92       	push	r11
    6ef6:	cf 92       	push	r12
    6ef8:	df 92       	push	r13
    6efa:	ef 92       	push	r14
    6efc:	ff 92       	push	r15
    6efe:	0f 93       	push	r16
    6f00:	1f 93       	push	r17
    6f02:	cf 93       	push	r28
    6f04:	df 93       	push	r29
    6f06:	5c 01       	movw	r10, r24
    6f08:	f4 2e       	mov	r15, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6f0a:	c6 2f       	mov	r28, r22
    6f0c:	c2 2e       	mov	r12, r18
    6f0e:	d1 2c       	mov	r13, r1
    6f10:	c6 0e       	add	r12, r22
    6f12:	d1 1c       	adc	r13, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    6f14:	10 e0       	ldi	r17, 0x00	; 0
    6f16:	04 0f       	add	r16, r20
    6f18:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6f1a:	8c 2f       	mov	r24, r28
    6f1c:	90 e0       	ldi	r25, 0x00	; 0
    6f1e:	8c 15       	cp	r24, r12
    6f20:	9d 05       	cpc	r25, r13
    6f22:	84 f4       	brge	.+32     	; 0x6f44 <fillrect+0x52>
    6f24:	df 2d       	mov	r29, r15
	{
		for (uint8_t j=y; j<y+h; j++) 
    6f26:	8d 2f       	mov	r24, r29
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	80 17       	cp	r24, r16
    6f2c:	91 07       	cpc	r25, r17
    6f2e:	44 f4       	brge	.+16     	; 0x6f40 <fillrect+0x4e>
		{
			setpixel(buff, i, j, color);
    6f30:	2e 2d       	mov	r18, r14
    6f32:	4d 2f       	mov	r20, r29
    6f34:	6c 2f       	mov	r22, r28
    6f36:	c5 01       	movw	r24, r10
    6f38:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    6f3c:	df 5f       	subi	r29, 0xFF	; 255
    6f3e:	f3 cf       	rjmp	.-26     	; 0x6f26 <fillrect+0x34>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6f40:	cf 5f       	subi	r28, 0xFF	; 255
    6f42:	eb cf       	rjmp	.-42     	; 0x6f1a <fillrect+0x28>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    6f44:	df 91       	pop	r29
    6f46:	cf 91       	pop	r28
    6f48:	1f 91       	pop	r17
    6f4a:	0f 91       	pop	r16
    6f4c:	ff 90       	pop	r15
    6f4e:	ef 90       	pop	r14
    6f50:	df 90       	pop	r13
    6f52:	cf 90       	pop	r12
    6f54:	bf 90       	pop	r11
    6f56:	af 90       	pop	r10
    6f58:	08 95       	ret

00006f5a <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    6f5a:	9f 92       	push	r9
    6f5c:	af 92       	push	r10
    6f5e:	bf 92       	push	r11
    6f60:	cf 92       	push	r12
    6f62:	df 92       	push	r13
    6f64:	ef 92       	push	r14
    6f66:	ff 92       	push	r15
    6f68:	0f 93       	push	r16
    6f6a:	1f 93       	push	r17
    6f6c:	cf 93       	push	r28
    6f6e:	df 93       	push	r29
    6f70:	6c 01       	movw	r12, r24
    6f72:	f6 2e       	mov	r15, r22
    6f74:	c4 2f       	mov	r28, r20
    6f76:	d2 2f       	mov	r29, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6f78:	16 2f       	mov	r17, r22
    6f7a:	a2 2e       	mov	r10, r18
    6f7c:	b1 2c       	mov	r11, r1
    6f7e:	a6 0e       	add	r10, r22
    6f80:	b1 1c       	adc	r11, r1
    6f82:	99 24       	eor	r9, r9
    6f84:	9a 94       	dec	r9
    6f86:	90 0e       	add	r9, r16
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    6f88:	94 0e       	add	r9, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6f8a:	81 2f       	mov	r24, r17
    6f8c:	90 e0       	ldi	r25, 0x00	; 0
    6f8e:	8a 15       	cp	r24, r10
    6f90:	9b 05       	cpc	r25, r11
    6f92:	74 f4       	brge	.+28     	; 0x6fb0 <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    6f94:	2e 2d       	mov	r18, r14
    6f96:	4c 2f       	mov	r20, r28
    6f98:	61 2f       	mov	r22, r17
    6f9a:	c6 01       	movw	r24, r12
    6f9c:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
		setpixel(buff, i, y+h-1, color);
    6fa0:	2e 2d       	mov	r18, r14
    6fa2:	49 2d       	mov	r20, r9
    6fa4:	61 2f       	mov	r22, r17
    6fa6:	c6 01       	movw	r24, r12
    6fa8:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6fac:	1f 5f       	subi	r17, 0xFF	; 255
    6fae:	ed cf       	rjmp	.-38     	; 0x6f8a <drawrect+0x30>
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    6fb0:	10 e0       	ldi	r17, 0x00	; 0
    6fb2:	0c 0f       	add	r16, r28
    6fb4:	11 1d       	adc	r17, r1
    6fb6:	d1 50       	subi	r29, 0x01	; 1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    6fb8:	df 0d       	add	r29, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    6fba:	8c 2f       	mov	r24, r28
    6fbc:	90 e0       	ldi	r25, 0x00	; 0
    6fbe:	80 17       	cp	r24, r16
    6fc0:	91 07       	cpc	r25, r17
    6fc2:	74 f4       	brge	.+28     	; 0x6fe0 <drawrect+0x86>
	{
		setpixel(buff, x, i, color);
    6fc4:	2e 2d       	mov	r18, r14
    6fc6:	4c 2f       	mov	r20, r28
    6fc8:	6f 2d       	mov	r22, r15
    6fca:	c6 01       	movw	r24, r12
    6fcc:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
		setpixel(buff, x+w-1, i, color);
    6fd0:	2e 2d       	mov	r18, r14
    6fd2:	4c 2f       	mov	r20, r28
    6fd4:	6d 2f       	mov	r22, r29
    6fd6:	c6 01       	movw	r24, r12
    6fd8:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    6fdc:	cf 5f       	subi	r28, 0xFF	; 255
    6fde:	ed cf       	rjmp	.-38     	; 0x6fba <drawrect+0x60>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    6fe0:	df 91       	pop	r29
    6fe2:	cf 91       	pop	r28
    6fe4:	1f 91       	pop	r17
    6fe6:	0f 91       	pop	r16
    6fe8:	ff 90       	pop	r15
    6fea:	ef 90       	pop	r14
    6fec:	df 90       	pop	r13
    6fee:	cf 90       	pop	r12
    6ff0:	bf 90       	pop	r11
    6ff2:	af 90       	pop	r10
    6ff4:	9f 90       	pop	r9
    6ff6:	08 95       	ret

00006ff8 <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    6ff8:	4f 92       	push	r4
    6ffa:	5f 92       	push	r5
    6ffc:	6f 92       	push	r6
    6ffe:	7f 92       	push	r7
    7000:	8f 92       	push	r8
    7002:	9f 92       	push	r9
    7004:	af 92       	push	r10
    7006:	bf 92       	push	r11
    7008:	cf 92       	push	r12
    700a:	df 92       	push	r13
    700c:	ef 92       	push	r14
    700e:	ff 92       	push	r15
    7010:	0f 93       	push	r16
    7012:	1f 93       	push	r17
    7014:	cf 93       	push	r28
    7016:	df 93       	push	r29
    7018:	6c 01       	movw	r12, r24
    701a:	e6 2e       	mov	r14, r22
    701c:	64 2e       	mov	r6, r20
	int8_t f = 1 - r;
    701e:	11 e0       	ldi	r17, 0x01	; 1
    7020:	12 1b       	sub	r17, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    7022:	f2 2e       	mov	r15, r18
    7024:	f1 94       	neg	r15
    7026:	ff 0c       	add	r15, r15
	int8_t x = 0;
	int8_t y = r;
    7028:	c2 2f       	mov	r28, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    702a:	d4 2f       	mov	r29, r20
    702c:	d2 1b       	sub	r29, r18
    702e:	a4 2e       	mov	r10, r20
    7030:	b1 2c       	mov	r11, r1
    7032:	45 01       	movw	r8, r10
    7034:	82 0e       	add	r8, r18
    7036:	91 1c       	adc	r9, r1
    7038:	8d 2f       	mov	r24, r29
    703a:	0d 2e       	mov	r0, r29
    703c:	00 0c       	add	r0, r0
    703e:	99 0b       	sbc	r25, r25
    7040:	88 16       	cp	r8, r24
    7042:	99 06       	cpc	r9, r25
    7044:	44 f0       	brlt	.+16     	; 0x7056 <fillcircle+0x5e>
	{
		setpixel(buff, x0, i, color);
    7046:	20 2f       	mov	r18, r16
    7048:	4d 2f       	mov	r20, r29
    704a:	6e 2d       	mov	r22, r14
    704c:	c6 01       	movw	r24, r12
    704e:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
    7052:	df 5f       	subi	r29, 0xFF	; 255
    7054:	f1 cf       	rjmp	.-30     	; 0x7038 <fillcircle+0x40>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    7056:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    7058:	dc 17       	cp	r29, r28
    705a:	0c f0       	brlt	.+2      	; 0x705e <fillcircle+0x66>
    705c:	4c c0       	rjmp	.+152    	; 0x70f6 <fillcircle+0xfe>
	{
		if (f >= 0) 
    705e:	17 fd       	sbrc	r17, 7
    7060:	04 c0       	rjmp	.+8      	; 0x706a <fillcircle+0x72>
		{
			y--;
    7062:	c1 50       	subi	r28, 0x01	; 1
			ddF_y += 2;
    7064:	f3 94       	inc	r15
    7066:	f3 94       	inc	r15
			f += ddF_y;
    7068:	1f 0d       	add	r17, r15
    706a:	df 5f       	subi	r29, 0xFF	; 255
    706c:	8d 2f       	mov	r24, r29
    706e:	88 0f       	add	r24, r24
    7070:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    7072:	18 0f       	add	r17, r24

		for (i=y0-y; i<=y0+y; i++) 
    7074:	76 2c       	mov	r7, r6
    7076:	7c 1a       	sub	r7, r28
    7078:	45 01       	movw	r8, r10
    707a:	8c 0e       	add	r8, r28
    707c:	91 1c       	adc	r9, r1
    707e:	c7 fd       	sbrc	r28, 7
    7080:	9a 94       	dec	r9
    7082:	5d 2e       	mov	r5, r29
    7084:	5e 0c       	add	r5, r14
    7086:	4e 2c       	mov	r4, r14
    7088:	4d 1a       	sub	r4, r29
    708a:	87 2d       	mov	r24, r7
    708c:	07 2c       	mov	r0, r7
    708e:	00 0c       	add	r0, r0
    7090:	99 0b       	sbc	r25, r25
    7092:	88 16       	cp	r8, r24
    7094:	99 06       	cpc	r9, r25
    7096:	74 f0       	brlt	.+28     	; 0x70b4 <fillcircle+0xbc>
		{
			setpixel(buff, x0+x, i, color);
    7098:	20 2f       	mov	r18, r16
    709a:	47 2d       	mov	r20, r7
    709c:	65 2d       	mov	r22, r5
    709e:	c6 01       	movw	r24, r12
    70a0:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
			setpixel(buff, x0-x, i, color);
    70a4:	20 2f       	mov	r18, r16
    70a6:	47 2d       	mov	r20, r7
    70a8:	64 2d       	mov	r22, r4
    70aa:	c6 01       	movw	r24, r12
    70ac:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
    70b0:	73 94       	inc	r7
    70b2:	eb cf       	rjmp	.-42     	; 0x708a <fillcircle+0x92>
    70b4:	76 2c       	mov	r7, r6
    70b6:	7d 1a       	sub	r7, r29
		} 
		for (i=y0-x; i<=y0+x; i++) 
    70b8:	45 01       	movw	r8, r10
    70ba:	8d 0e       	add	r8, r29
    70bc:	91 1c       	adc	r9, r1
    70be:	d7 fd       	sbrc	r29, 7
    70c0:	9a 94       	dec	r9
		{
			setpixel(buff, x0+y, i, color);
    70c2:	5c 2e       	mov	r5, r28
    70c4:	5e 0c       	add	r5, r14
			setpixel(buff, x0-y, i, color);
    70c6:	4e 2c       	mov	r4, r14
    70c8:	4c 1a       	sub	r4, r28
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    70ca:	87 2d       	mov	r24, r7
    70cc:	07 2c       	mov	r0, r7
    70ce:	00 0c       	add	r0, r0
    70d0:	99 0b       	sbc	r25, r25
    70d2:	88 16       	cp	r8, r24
    70d4:	99 06       	cpc	r9, r25
    70d6:	0c f4       	brge	.+2      	; 0x70da <fillcircle+0xe2>
    70d8:	bf cf       	rjmp	.-130    	; 0x7058 <fillcircle+0x60>
		{
			setpixel(buff, x0+y, i, color);
    70da:	20 2f       	mov	r18, r16
    70dc:	47 2d       	mov	r20, r7
    70de:	65 2d       	mov	r22, r5
    70e0:	c6 01       	movw	r24, r12
    70e2:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
			setpixel(buff, x0-y, i, color);
    70e6:	20 2f       	mov	r18, r16
    70e8:	47 2d       	mov	r20, r7
    70ea:	64 2d       	mov	r22, r4
    70ec:	c6 01       	movw	r24, r12
    70ee:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
    70f2:	73 94       	inc	r7
    70f4:	ea cf       	rjmp	.-44     	; 0x70ca <fillcircle+0xd2>
		}    
	}
}
    70f6:	df 91       	pop	r29
    70f8:	cf 91       	pop	r28
    70fa:	1f 91       	pop	r17
    70fc:	0f 91       	pop	r16
    70fe:	ff 90       	pop	r15
    7100:	ef 90       	pop	r14
    7102:	df 90       	pop	r13
    7104:	cf 90       	pop	r12
    7106:	bf 90       	pop	r11
    7108:	af 90       	pop	r10
    710a:	9f 90       	pop	r9
    710c:	8f 90       	pop	r8
    710e:	7f 90       	pop	r7
    7110:	6f 90       	pop	r6
    7112:	5f 90       	pop	r5
    7114:	4f 90       	pop	r4
    7116:	08 95       	ret

00007118 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    7118:	88 0f       	add	r24, r24
    711a:	99 1f       	adc	r25, r25
    711c:	fc 01       	movw	r30, r24
    711e:	e1 5b       	subi	r30, 0xB1	; 177
    7120:	fb 4e       	sbci	r31, 0xEB	; 235
    7122:	85 91       	lpm	r24, Z+
    7124:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    7126:	0c 94 e3 62 	jmp	0xc5c6	; 0xc5c6 <pgm_mugui_lcd_puts>

0000712a <gLCDprint_Menu_P>:
    712a:	0c 94 e3 62 	jmp	0xc5c6	; 0xc5c6 <pgm_mugui_lcd_puts>

0000712e <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    712e:	80 e0       	ldi	r24, 0x00	; 0
    7130:	91 e0       	ldi	r25, 0x01	; 1
    7132:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 		// "Press"
    7136:	23 e0       	ldi	r18, 0x03	; 3
    7138:	30 e0       	ldi	r19, 0x00	; 0
    713a:	49 e2       	ldi	r20, 0x29	; 41
    713c:	50 e0       	ldi	r21, 0x00	; 0
    713e:	6f ed       	ldi	r22, 0xDF	; 223
    7140:	74 e0       	ldi	r23, 0x04	; 4
    7142:	89 e7       	ldi	r24, 0x79	; 121
    7144:	90 e0       	ldi	r25, 0x00	; 0
    7146:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);		// "for status."
    714a:	27 e1       	ldi	r18, 0x17	; 23
    714c:	30 e0       	ldi	r19, 0x00	; 0
    714e:	48 e1       	ldi	r20, 0x18	; 24
    7150:	50 e0       	ldi	r21, 0x00	; 0
    7152:	6f ed       	ldi	r22, 0xDF	; 223
    7154:	74 e0       	ldi	r23, 0x04	; 4
    7156:	8a e7       	ldi	r24, 0x7A	; 122
    7158:	90 e0       	ldi	r25, 0x00	; 0
    715a:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

	// Display most important error
	if (General_error & (1 << LVA_ALARM))								// Low voltage
    715e:	80 91 35 05 	lds	r24, 0x0535
    7162:	83 ff       	sbrs	r24, 3
    7164:	13 c0       	rjmp	.+38     	; 0x718c <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);	// "Battery"
    7166:	2b e2       	ldi	r18, 0x2B	; 43
    7168:	30 e0       	ldi	r19, 0x00	; 0
    716a:	4c e0       	ldi	r20, 0x0C	; 12
    716c:	50 e0       	ldi	r21, 0x00	; 0
    716e:	6f ed       	ldi	r22, 0xDF	; 223
    7170:	74 e0       	ldi	r23, 0x04	; 4
    7172:	86 e8       	ldi	r24, 0x86	; 134
    7174:	90 e0       	ldi	r25, 0x00	; 0
    7176:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43);	// "Low"
    717a:	2b e2       	ldi	r18, 0x2B	; 43
    717c:	30 e0       	ldi	r19, 0x00	; 0
    717e:	40 e5       	ldi	r20, 0x50	; 80
    7180:	50 e0       	ldi	r21, 0x00	; 0
    7182:	6f ed       	ldi	r22, 0xDF	; 223
    7184:	74 e0       	ldi	r23, 0x04	; 4
    7186:	86 e7       	ldi	r24, 0x76	; 118
    7188:	90 e0       	ldi	r25, 0x00	; 0
    718a:	41 c0       	rjmp	.+130    	; 0x720e <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << NO_SIGNAL))							// No signal
    718c:	80 91 35 05 	lds	r24, 0x0535
    7190:	81 ff       	sbrs	r24, 1
    7192:	13 c0       	rjmp	.+38     	; 0x71ba <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43);		// "No"
    7194:	2b e2       	ldi	r18, 0x2B	; 43
    7196:	30 e0       	ldi	r19, 0x00	; 0
    7198:	4c e1       	ldi	r20, 0x1C	; 28
    719a:	50 e0       	ldi	r21, 0x00	; 0
    719c:	6f ed       	ldi	r22, 0xDF	; 223
    719e:	74 e0       	ldi	r23, 0x04	; 4
    71a0:	8b e4       	ldi	r24, 0x4B	; 75
    71a2:	90 e0       	ldi	r25, 0x00	; 0
    71a4:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43);		// "Signal"
    71a8:	2b e2       	ldi	r18, 0x2B	; 43
    71aa:	30 e0       	ldi	r19, 0x00	; 0
    71ac:	46 e3       	ldi	r20, 0x36	; 54
    71ae:	50 e0       	ldi	r21, 0x00	; 0
    71b0:	6f ed       	ldi	r22, 0xDF	; 223
    71b2:	74 e0       	ldi	r23, 0x04	; 4
    71b4:	8c e4       	ldi	r24, 0x4C	; 76
    71b6:	90 e0       	ldi	r25, 0x00	; 0
    71b8:	2a c0       	rjmp	.+84     	; 0x720e <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << THROTTLE_HIGH))						// Throttle high
    71ba:	80 91 35 05 	lds	r24, 0x0535
    71be:	80 ff       	sbrs	r24, 0
    71c0:	13 c0       	rjmp	.+38     	; 0x71e8 <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43)	;	// "Throttle"
    71c2:	2b e2       	ldi	r18, 0x2B	; 43
    71c4:	30 e0       	ldi	r19, 0x00	; 0
    71c6:	4a e0       	ldi	r20, 0x0A	; 10
    71c8:	50 e0       	ldi	r21, 0x00	; 0
    71ca:	6f ed       	ldi	r22, 0xDF	; 223
    71cc:	74 e0       	ldi	r23, 0x04	; 4
    71ce:	89 e6       	ldi	r24, 0x69	; 105
    71d0:	90 e0       	ldi	r25, 0x00	; 0
    71d2:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);		// "High"
    71d6:	2b e2       	ldi	r18, 0x2B	; 43
    71d8:	30 e0       	ldi	r19, 0x00	; 0
    71da:	41 e5       	ldi	r20, 0x51	; 81
    71dc:	50 e0       	ldi	r21, 0x00	; 0
    71de:	6f ed       	ldi	r22, 0xDF	; 223
    71e0:	74 e0       	ldi	r23, 0x04	; 4
    71e2:	87 e3       	ldi	r24, 0x37	; 55
    71e4:	90 e0       	ldi	r25, 0x00	; 0
    71e6:	13 c0       	rjmp	.+38     	; 0x720e <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << DISARMED))							// Disarmed
    71e8:	80 91 35 05 	lds	r24, 0x0535
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);	// "(Disarmed)"
    71ec:	2b e2       	ldi	r18, 0x2B	; 43
    71ee:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43)	;	// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);		// "High"
	}
	
	else if (General_error & (1 << DISARMED))							// Disarmed
    71f0:	82 ff       	sbrs	r24, 2
    71f2:	07 c0       	rjmp	.+14     	; 0x7202 <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);	// "(Disarmed)"
    71f4:	44 e1       	ldi	r20, 0x14	; 20
    71f6:	50 e0       	ldi	r21, 0x00	; 0
    71f8:	6f ed       	ldi	r22, 0xDF	; 223
    71fa:	74 e0       	ldi	r23, 0x04	; 4
    71fc:	8b e8       	ldi	r24, 0x8B	; 139
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	06 c0       	rjmp	.+12     	; 0x720e <idle_screen+0xe0>
	}
	
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);	// "(Armed)"
    7202:	4c e1       	ldi	r20, 0x1C	; 28
    7204:	50 e0       	ldi	r21, 0x00	; 0
    7206:	6f ed       	ldi	r22, 0xDF	; 223
    7208:	74 e0       	ldi	r23, 0x04	; 4
    720a:	8a e8       	ldi	r24, 0x8A	; 138
    720c:	90 e0       	ldi	r25, 0x00	; 0
    720e:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
	}

	write_buffer(buffer);
    7212:	80 e0       	ldi	r24, 0x00	; 0
    7214:	91 e0       	ldi	r25, 0x01	; 1
    7216:	0c 94 7b 36 	jmp	0x6cf6	; 0x6cf6 <write_buffer>

0000721a <get_raw_gyros>:
// routine used by the zeroing calibration routine. Chicken | Egg.
// We also cannot merge P1 and P2 here as each have their own zeros.
//***************************************************************

void get_raw_gyros(void)
{
    721a:	0f 93       	push	r16
    721c:	1f 93       	push	r17
    721e:	cf 93       	push	r28
    7220:	df 93       	push	r29
    7222:	00 d0       	rcall	.+0      	; 0x7224 <get_raw_gyros+0xa>
    7224:	00 d0       	rcall	.+0      	; 0x7226 <get_raw_gyros+0xc>
    7226:	00 d0       	rcall	.+0      	; 0x7228 <get_raw_gyros+0xe>
    7228:	cd b7       	in	r28, 0x3d	; 61
    722a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t Gyros[6];

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    722c:	26 e0       	ldi	r18, 0x06	; 6
    722e:	ae 01       	movw	r20, r28
    7230:	4f 5f       	subi	r20, 0xFF	; 255
    7232:	5f 4f       	sbci	r21, 0xFF	; 255
    7234:	63 e4       	ldi	r22, 0x43	; 67
    7236:	80 ed       	ldi	r24, 0xD0	; 208
    7238:	0e 94 19 3c 	call	0x7832	; 0x7832 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	gyroADC_raw[PITCH] = (Gyros[0] << 8) + Gyros[1];
    723c:	89 81       	ldd	r24, Y+1	; 0x01
    723e:	90 e0       	ldi	r25, 0x00	; 0
    7240:	98 2f       	mov	r25, r24
    7242:	88 27       	eor	r24, r24
    7244:	2a 81       	ldd	r18, Y+2	; 0x02
    7246:	82 0f       	add	r24, r18
    7248:	91 1d       	adc	r25, r1
    724a:	90 93 e4 05 	sts	0x05E4, r25
    724e:	80 93 e3 05 	sts	0x05E3, r24
	gyroADC_raw[ROLL] = (Gyros[2] << 8) + Gyros[3];
    7252:	8b 81       	ldd	r24, Y+3	; 0x03
    7254:	90 e0       	ldi	r25, 0x00	; 0
    7256:	98 2f       	mov	r25, r24
    7258:	88 27       	eor	r24, r24
    725a:	2c 81       	ldd	r18, Y+4	; 0x04
    725c:	82 0f       	add	r24, r18
    725e:	91 1d       	adc	r25, r1
    7260:	90 93 e2 05 	sts	0x05E2, r25
    7264:	80 93 e1 05 	sts	0x05E1, r24
	gyroADC_raw[YAW] = (Gyros[4] << 8) + Gyros[5];
    7268:	8d 81       	ldd	r24, Y+5	; 0x05
    726a:	90 e0       	ldi	r25, 0x00	; 0
    726c:	98 2f       	mov	r25, r24
    726e:	88 27       	eor	r24, r24
    7270:	2e 81       	ldd	r18, Y+6	; 0x06
    7272:	82 0f       	add	r24, r18
    7274:	91 1d       	adc	r25, r1
    7276:	90 93 e6 05 	sts	0x05E6, r25
    727a:	80 93 e5 05 	sts	0x05E5, r24

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		gyroADC_P1[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P1][i])] >> GYRODIV;
    727e:	40 91 63 08 	lds	r20, 0x0863
		gyroADC_P2[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P2][i])] >> GYRODIV;
    7282:	20 91 d8 06 	lds	r18, 0x06D8
    7286:	67 ee       	ldi	r22, 0xE7	; 231
    7288:	75 e0       	ldi	r23, 0x05	; 5
    728a:	a3 ef       	ldi	r26, 0xF3	; 243
    728c:	b5 e0       	ldi	r27, 0x05	; 5
    728e:	83 e0       	ldi	r24, 0x03	; 3
    7290:	48 02       	muls	r20, r24
    7292:	a0 01       	movw	r20, r0
    7294:	11 24       	eor	r1, r1
    7296:	e3 e0       	ldi	r30, 0x03	; 3
    7298:	2e 02       	muls	r18, r30
    729a:	90 01       	movw	r18, r0
    729c:	11 24       	eor	r1, r1
    729e:	80 e0       	ldi	r24, 0x00	; 0
    72a0:	90 e0       	ldi	r25, 0x00	; 0
    72a2:	fc 01       	movw	r30, r24
    72a4:	e4 0f       	add	r30, r20
    72a6:	f5 1f       	adc	r31, r21
    72a8:	e3 5b       	subi	r30, 0xB3	; 179
    72aa:	fb 4d       	sbci	r31, 0xDB	; 219

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		gyroADC_P1[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P1][i])] >> GYRODIV;
    72ac:	e4 91       	lpm	r30, Z
    72ae:	ee 0f       	add	r30, r30
    72b0:	ff 0b       	sbc	r31, r31
    72b2:	ef 51       	subi	r30, 0x1F	; 31
    72b4:	fa 4f       	sbci	r31, 0xFA	; 250
    72b6:	01 90       	ld	r0, Z+
    72b8:	f0 81       	ld	r31, Z
    72ba:	e0 2d       	mov	r30, r0
    72bc:	8f 01       	movw	r16, r30
    72be:	e4 e0       	ldi	r30, 0x04	; 4
    72c0:	15 95       	asr	r17
    72c2:	07 95       	ror	r16
    72c4:	ea 95       	dec	r30
    72c6:	e1 f7       	brne	.-8      	; 0x72c0 <get_raw_gyros+0xa6>
    72c8:	fb 01       	movw	r30, r22
    72ca:	01 93       	st	Z+, r16
    72cc:	11 93       	st	Z+, r17
    72ce:	bf 01       	movw	r22, r30
    72d0:	fc 01       	movw	r30, r24
    72d2:	e2 0f       	add	r30, r18
    72d4:	f3 1f       	adc	r31, r19
    72d6:	e3 5b       	subi	r30, 0xB3	; 179
    72d8:	fb 4d       	sbci	r31, 0xDB	; 219
		gyroADC_P2[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P2][i])] >> GYRODIV;
    72da:	e4 91       	lpm	r30, Z
    72dc:	ee 0f       	add	r30, r30
    72de:	ff 0b       	sbc	r31, r31
    72e0:	ef 51       	subi	r30, 0x1F	; 31
    72e2:	fa 4f       	sbci	r31, 0xFA	; 250
    72e4:	01 90       	ld	r0, Z+
    72e6:	f0 81       	ld	r31, Z
    72e8:	e0 2d       	mov	r30, r0
    72ea:	14 e0       	ldi	r17, 0x04	; 4
    72ec:	f5 95       	asr	r31
    72ee:	e7 95       	ror	r30
    72f0:	1a 95       	dec	r17
    72f2:	e1 f7       	brne	.-8      	; 0x72ec <get_raw_gyros+0xd2>
    72f4:	ed 93       	st	X+, r30
    72f6:	fd 93       	st	X+, r31
    72f8:	01 96       	adiw	r24, 0x01	; 1
	gyroADC_raw[PITCH] = (Gyros[0] << 8) + Gyros[1];
	gyroADC_raw[ROLL] = (Gyros[2] << 8) + Gyros[3];
	gyroADC_raw[YAW] = (Gyros[4] << 8) + Gyros[5];

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
    72fa:	83 30       	cpi	r24, 0x03	; 3
    72fc:	91 05       	cpc	r25, r1
    72fe:	89 f6       	brne	.-94     	; 0x72a2 <get_raw_gyros+0x88>
	{
		// Rearrange the sensors for both orientations
		gyroADC_P1[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P1][i])] >> GYRODIV;
		gyroADC_P2[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P2][i])] >> GYRODIV;
	}
}
    7300:	26 96       	adiw	r28, 0x06	; 6
    7302:	0f b6       	in	r0, 0x3f	; 63
    7304:	f8 94       	cli
    7306:	de bf       	out	0x3e, r29	; 62
    7308:	0f be       	out	0x3f, r0	; 63
    730a:	cd bf       	out	0x3d, r28	; 61
    730c:	df 91       	pop	r29
    730e:	cf 91       	pop	r28
    7310:	1f 91       	pop	r17
    7312:	0f 91       	pop	r16
    7314:	08 95       	ret

00007316 <ReadGyros>:
// Only when EARTH-oriented TS is gyroADC_P1 unique.
//
//***************************************************************

void ReadGyros(void)					// Conventional orientation
{
    7316:	2f 92       	push	r2
    7318:	3f 92       	push	r3
    731a:	4f 92       	push	r4
    731c:	5f 92       	push	r5
    731e:	6f 92       	push	r6
    7320:	7f 92       	push	r7
    7322:	8f 92       	push	r8
    7324:	9f 92       	push	r9
    7326:	af 92       	push	r10
    7328:	bf 92       	push	r11
    732a:	cf 92       	push	r12
    732c:	df 92       	push	r13
    732e:	ef 92       	push	r14
    7330:	ff 92       	push	r15
    7332:	0f 93       	push	r16
    7334:	1f 93       	push	r17
    7336:	cf 93       	push	r28
    7338:	df 93       	push	r29
	uint8_t i;
	int16_t temp1, temp2, temp3;

	get_raw_gyros();					// Updates gyroADC_P1[] and gyroADC_P2[]
    733a:	0e 94 0d 39 	call	0x721a	; 0x721a <get_raw_gyros>
    733e:	6b ed       	ldi	r22, 0xDB	; 219
    7340:	e6 2e       	mov	r14, r22
    7342:	65 e0       	ldi	r22, 0x05	; 5
    7344:	f6 2e       	mov	r15, r22
    7346:	73 ef       	ldi	r23, 0xF3	; 243
    7348:	a7 2e       	mov	r10, r23
    734a:	75 e0       	ldi	r23, 0x05	; 5
    734c:	b7 2e       	mov	r11, r23
    734e:	0d e5       	ldi	r16, 0x5D	; 93
    7350:	18 e0       	ldi	r17, 0x08	; 8
    7352:	ed ee       	ldi	r30, 0xED	; 237
    7354:	ce 2e       	mov	r12, r30
    7356:	e5 e0       	ldi	r30, 0x05	; 5
    7358:	de 2e       	mov	r13, r30
    735a:	f7 ee       	ldi	r31, 0xE7	; 231
    735c:	6f 2e       	mov	r6, r31
    735e:	f5 e0       	ldi	r31, 0x05	; 5
    7360:	7f 2e       	mov	r7, r31
    7362:	c0 e0       	ldi	r28, 0x00	; 0
    7364:	d0 e0       	ldi	r29, 0x00	; 0

			// P2 orientation
			temp2 = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);

			// Merge the two gyros per transition percentage
			temp3 = scale32(temp1, (100 - transition)) + scale32(temp2, transition); // Sum the two values
    7366:	a4 e6       	ldi	r26, 0x64	; 100
    7368:	2a 2e       	mov	r2, r26
    736a:	31 2c       	mov	r3, r1
	get_raw_gyros();					// Updates gyroADC_P1[] and gyroADC_P2[]

	for (i = 0; i < NUMBEROFAXIS; i++)	
	{
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    736c:	80 91 d9 06 	lds	r24, 0x06D9
    7370:	90 91 d8 06 	lds	r25, 0x06D8
    7374:	88 23       	and	r24, r24
    7376:	09 f4       	brne	.+2      	; 0x737a <ReadGyros+0x64>
    7378:	55 c0       	rjmp	.+170    	; 0x7424 <ReadGyros+0x10e>
		{
			// P1 alternate (original) orientation. Swap zeros so that they match.
			temp1 = (gyroADC_P1[i] - Config.gyroZero_P1[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P1][i]);
    737a:	e0 91 63 08 	lds	r30, 0x0863
    737e:	0e 2e       	mov	r0, r30
    7380:	00 0c       	add	r0, r0
    7382:	ff 0b       	sbc	r31, r31
    7384:	af 01       	movw	r20, r30
    7386:	44 0f       	add	r20, r20
    7388:	55 1f       	adc	r21, r21
    738a:	e4 0f       	add	r30, r20
    738c:	f5 1f       	adc	r31, r21
    738e:	ec 0f       	add	r30, r28
    7390:	fd 1f       	adc	r31, r29
    7392:	eb 5f       	subi	r30, 0xFB	; 251
    7394:	fb 4d       	sbci	r31, 0xDB	; 219
    7396:	44 91       	lpm	r20, Z

			// P2 orientation
			temp2 = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);
    7398:	e9 2f       	mov	r30, r25
    739a:	99 0f       	add	r25, r25
    739c:	ff 0b       	sbc	r31, r31
    739e:	cf 01       	movw	r24, r30
    73a0:	88 0f       	add	r24, r24
    73a2:	99 1f       	adc	r25, r25
    73a4:	e8 0f       	add	r30, r24
    73a6:	f9 1f       	adc	r31, r25
    73a8:	ec 0f       	add	r30, r28
    73aa:	fd 1f       	adc	r31, r29
    73ac:	eb 5f       	subi	r30, 0xFB	; 251
    73ae:	fb 4d       	sbci	r31, 0xDB	; 219
    73b0:	24 91       	lpm	r18, Z
    73b2:	f5 01       	movw	r30, r10
    73b4:	60 81       	ld	r22, Z
    73b6:	71 81       	ldd	r23, Z+1	; 0x01
    73b8:	f8 01       	movw	r30, r16
    73ba:	80 81       	ld	r24, Z
    73bc:	91 81       	ldd	r25, Z+1	; 0x01
    73be:	68 1b       	sub	r22, r24
    73c0:	79 0b       	sbc	r23, r25
    73c2:	26 03       	mulsu	r18, r22
    73c4:	20 01       	movw	r4, r0
    73c6:	27 9f       	mul	r18, r23
    73c8:	50 0c       	add	r5, r0
    73ca:	11 24       	eor	r1, r1

			// Merge the two gyros per transition percentage
			temp3 = scale32(temp1, (100 - transition)) + scale32(temp2, transition); // Sum the two values
    73cc:	80 91 38 05 	lds	r24, 0x0538
    73d0:	90 91 39 05 	lds	r25, 0x0539
    73d4:	b1 01       	movw	r22, r2
    73d6:	68 1b       	sub	r22, r24
    73d8:	79 0b       	sbc	r23, r25
	{
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
		{
			// P1 alternate (original) orientation. Swap zeros so that they match.
			temp1 = (gyroADC_P1[i] - Config.gyroZero_P1[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P1][i]);
    73da:	f3 01       	movw	r30, r6
    73dc:	20 81       	ld	r18, Z
    73de:	31 81       	ldd	r19, Z+1	; 0x01
    73e0:	f8 01       	movw	r30, r16
    73e2:	f5 97       	sbiw	r30, 0x35	; 53
    73e4:	80 81       	ld	r24, Z
    73e6:	91 81       	ldd	r25, Z+1	; 0x01
    73e8:	28 1b       	sub	r18, r24
    73ea:	39 0b       	sbc	r19, r25

			// P2 orientation
			temp2 = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);

			// Merge the two gyros per transition percentage
			temp3 = scale32(temp1, (100 - transition)) + scale32(temp2, transition); // Sum the two values
    73ec:	42 03       	mulsu	r20, r18
    73ee:	c0 01       	movw	r24, r0
    73f0:	43 9f       	mul	r20, r19
    73f2:	90 0d       	add	r25, r0
    73f4:	11 24       	eor	r1, r1
    73f6:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    73fa:	4c 01       	movw	r8, r24
    73fc:	60 91 38 05 	lds	r22, 0x0538
    7400:	70 91 39 05 	lds	r23, 0x0539
    7404:	c2 01       	movw	r24, r4
    7406:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    740a:	88 0d       	add	r24, r8
    740c:	99 1d       	adc	r25, r9

			// Gyro alt is always per orientation
			gyroADCalt[i] = temp3;
    740e:	f6 01       	movw	r30, r12
    7410:	91 83       	std	Z+1, r25	; 0x01
    7412:	80 83       	st	Z, r24

			// If the P1 reference is MODEL, always use the same gyros as P2
			if (Config.P1_Reference == MODEL)
    7414:	20 91 d9 06 	lds	r18, 0x06D9
			{
				// Use P2 orientation
				gyroADC[i] = temp2;	
    7418:	f7 01       	movw	r30, r14

			// Gyro alt is always per orientation
			gyroADCalt[i] = temp3;

			// If the P1 reference is MODEL, always use the same gyros as P2
			if (Config.P1_Reference == MODEL)
    741a:	22 30       	cpi	r18, 0x02	; 2
    741c:	09 f5       	brne	.+66     	; 0x7460 <ReadGyros+0x14a>
			{
				// Use P2 orientation
				gyroADC[i] = temp2;	
    741e:	51 82       	std	Z+1, r5	; 0x01
    7420:	40 82       	st	Z, r4
    7422:	20 c0       	rjmp	.+64     	; 0x7464 <ReadGyros+0x14e>
		}
		// Single-orientation models
		else
		{
			// Change polarity using P2 orientation by default
			gyroADC[i] = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);	
    7424:	e9 2f       	mov	r30, r25
    7426:	99 0f       	add	r25, r25
    7428:	ff 0b       	sbc	r31, r31
    742a:	cf 01       	movw	r24, r30
    742c:	88 0f       	add	r24, r24
    742e:	99 1f       	adc	r25, r25
    7430:	e8 0f       	add	r30, r24
    7432:	f9 1f       	adc	r31, r25
    7434:	ec 0f       	add	r30, r28
    7436:	fd 1f       	adc	r31, r29
    7438:	eb 5f       	subi	r30, 0xFB	; 251
    743a:	fb 4d       	sbci	r31, 0xDB	; 219
    743c:	24 91       	lpm	r18, Z
    743e:	f5 01       	movw	r30, r10
    7440:	40 81       	ld	r20, Z
    7442:	51 81       	ldd	r21, Z+1	; 0x01
    7444:	f8 01       	movw	r30, r16
    7446:	80 81       	ld	r24, Z
    7448:	91 81       	ldd	r25, Z+1	; 0x01
    744a:	48 1b       	sub	r20, r24
    744c:	59 0b       	sbc	r21, r25
    744e:	24 03       	mulsu	r18, r20
    7450:	c0 01       	movw	r24, r0
    7452:	25 9f       	mul	r18, r21
    7454:	90 0d       	add	r25, r0
    7456:	11 24       	eor	r1, r1
    7458:	f7 01       	movw	r30, r14
    745a:	91 83       	std	Z+1, r25	; 0x01
    745c:	80 83       	st	Z, r24
				
			// Copy to alternate set of gyro values
			gyroADCalt[i] = gyroADC[i];
    745e:	f6 01       	movw	r30, r12
    7460:	91 83       	std	Z+1, r25	; 0x01
    7462:	80 83       	st	Z, r24
    7464:	21 96       	adiw	r28, 0x01	; 1
    7466:	f2 e0       	ldi	r31, 0x02	; 2
    7468:	ef 0e       	add	r14, r31
    746a:	f1 1c       	adc	r15, r1
    746c:	82 e0       	ldi	r24, 0x02	; 2
    746e:	a8 0e       	add	r10, r24
    7470:	b1 1c       	adc	r11, r1
    7472:	0e 5f       	subi	r16, 0xFE	; 254
    7474:	1f 4f       	sbci	r17, 0xFF	; 255
    7476:	e2 e0       	ldi	r30, 0x02	; 2
    7478:	ce 0e       	add	r12, r30
    747a:	d1 1c       	adc	r13, r1
    747c:	f2 e0       	ldi	r31, 0x02	; 2
    747e:	6f 0e       	add	r6, r31
    7480:	71 1c       	adc	r7, r1
	uint8_t i;
	int16_t temp1, temp2, temp3;

	get_raw_gyros();					// Updates gyroADC_P1[] and gyroADC_P2[]

	for (i = 0; i < NUMBEROFAXIS; i++)	
    7482:	c3 30       	cpi	r28, 0x03	; 3
    7484:	d1 05       	cpc	r29, r1
    7486:	09 f0       	breq	.+2      	; 0x748a <ReadGyros+0x174>
    7488:	71 cf       	rjmp	.-286    	; 0x736c <ReadGyros+0x56>
				
			// Copy to alternate set of gyro values
			gyroADCalt[i] = gyroADC[i];
		}
	}
}
    748a:	df 91       	pop	r29
    748c:	cf 91       	pop	r28
    748e:	1f 91       	pop	r17
    7490:	0f 91       	pop	r16
    7492:	ff 90       	pop	r15
    7494:	ef 90       	pop	r14
    7496:	df 90       	pop	r13
    7498:	cf 90       	pop	r12
    749a:	bf 90       	pop	r11
    749c:	af 90       	pop	r10
    749e:	9f 90       	pop	r9
    74a0:	8f 90       	pop	r8
    74a2:	7f 90       	pop	r7
    74a4:	6f 90       	pop	r6
    74a6:	5f 90       	pop	r5
    74a8:	4f 90       	pop	r4
    74aa:	3f 90       	pop	r3
    74ac:	2f 90       	pop	r2
    74ae:	08 95       	ret

000074b0 <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    74b0:	cf 93       	push	r28
	
	// Work out which orientation we are calibrating.
	// Only need to do this if the orientations differ.
	// Just do P2 if orientations the same.
	// Will not save new calibration when different and not firmly in P1 or p2.
	if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    74b2:	80 91 38 05 	lds	r24, 0x0538
    74b6:	90 91 39 05 	lds	r25, 0x0539
    74ba:	80 36       	cpi	r24, 0x60	; 96
    74bc:	91 05       	cpc	r25, r1
    74be:	24 f4       	brge	.+8      	; 0x74c8 <CalibrateGyrosFast+0x18>
    74c0:	20 91 d9 06 	lds	r18, 0x06D9
    74c4:	21 11       	cpse	r18, r1
    74c6:	54 c0       	rjmp	.+168    	; 0x7570 <CalibrateGyrosFast+0xc0>
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P2[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    74c8:	86 e0       	ldi	r24, 0x06	; 6
    74ca:	ed e5       	ldi	r30, 0x5D	; 93
    74cc:	f8 e0       	ldi	r31, 0x08	; 8
    74ce:	df 01       	movw	r26, r30
    74d0:	1d 92       	st	X+, r1
    74d2:	8a 95       	dec	r24
    74d4:	e9 f7       	brne	.-6      	; 0x74d0 <CalibrateGyrosFast+0x20>
    74d6:	c0 e2       	ldi	r28, 0x20	; 32

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
		{
			get_raw_gyros();				// Updates gyroADC_P1/P2[] with the correct orientation-based RPY
    74d8:	0e 94 0d 39 	call	0x721a	; 0x721a <get_raw_gyros>

			Config.gyroZero_P2[ROLL] 	+= gyroADC_P2[ROLL];
    74dc:	40 91 5d 08 	lds	r20, 0x085D
    74e0:	50 91 5e 08 	lds	r21, 0x085E
    74e4:	80 91 f3 05 	lds	r24, 0x05F3
    74e8:	90 91 f4 05 	lds	r25, 0x05F4
    74ec:	48 0f       	add	r20, r24
    74ee:	59 1f       	adc	r21, r25
    74f0:	50 93 5e 08 	sts	0x085E, r21
    74f4:	40 93 5d 08 	sts	0x085D, r20
			Config.gyroZero_P2[PITCH] 	+= gyroADC_P2[PITCH];
    74f8:	20 91 5f 08 	lds	r18, 0x085F
    74fc:	30 91 60 08 	lds	r19, 0x0860
    7500:	80 91 f5 05 	lds	r24, 0x05F5
    7504:	90 91 f6 05 	lds	r25, 0x05F6
    7508:	28 0f       	add	r18, r24
    750a:	39 1f       	adc	r19, r25
    750c:	30 93 60 08 	sts	0x0860, r19
    7510:	20 93 5f 08 	sts	0x085F, r18
			Config.gyroZero_P2[YAW] 	+= gyroADC_P2[YAW];
    7514:	60 91 61 08 	lds	r22, 0x0861
    7518:	70 91 62 08 	lds	r23, 0x0862
    751c:	80 91 f7 05 	lds	r24, 0x05F7
    7520:	90 91 f8 05 	lds	r25, 0x05F8
    7524:	86 0f       	add	r24, r22
    7526:	97 1f       	adc	r25, r23
    7528:	90 93 62 08 	sts	0x0862, r25
    752c:	80 93 61 08 	sts	0x0861, r24
    7530:	c1 50       	subi	r28, 0x01	; 1
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P2[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
    7532:	91 f6       	brne	.-92     	; 0x74d8 <CalibrateGyrosFast+0x28>
		}

		// Average readings for all axis
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			Config.gyroZero_P2[i] 	= (Config.gyroZero_P2[i] >> 5);
    7534:	f5 e0       	ldi	r31, 0x05	; 5
    7536:	55 95       	asr	r21
    7538:	47 95       	ror	r20
    753a:	fa 95       	dec	r31
    753c:	e1 f7       	brne	.-8      	; 0x7536 <CalibrateGyrosFast+0x86>
    753e:	50 93 5e 08 	sts	0x085E, r21
    7542:	40 93 5d 08 	sts	0x085D, r20
    7546:	a5 e0       	ldi	r26, 0x05	; 5
    7548:	35 95       	asr	r19
    754a:	27 95       	ror	r18
    754c:	aa 95       	dec	r26
    754e:	e1 f7       	brne	.-8      	; 0x7548 <CalibrateGyrosFast+0x98>
    7550:	30 93 60 08 	sts	0x0860, r19
    7554:	20 93 5f 08 	sts	0x085F, r18
    7558:	b5 e0       	ldi	r27, 0x05	; 5
    755a:	95 95       	asr	r25
    755c:	87 95       	ror	r24
    755e:	ba 95       	dec	r27
    7560:	e1 f7       	brne	.-8      	; 0x755a <CalibrateGyrosFast+0xaa>
    7562:	90 93 62 08 	sts	0x0862, r25
    7566:	80 93 61 08 	sts	0x0861, r24
			Config.gyroZero_P1[i] 	= (Config.gyroZero_P1[i] >> 5);	// Divide by 32
		}
	}
	
	Save_Config_to_EEPROM();
}
    756a:	cf 91       	pop	r28
		{
			Config.gyroZero_P1[i] 	= (Config.gyroZero_P1[i] >> 5);	// Divide by 32
		}
	}
	
	Save_Config_to_EEPROM();
    756c:	0c 94 53 26 	jmp	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
		{
			Config.gyroZero_P2[i] 	= (Config.gyroZero_P2[i] >> 5);
		}
	}
	// P1
	else if (transition <= 5)
    7570:	06 97       	sbiw	r24, 0x06	; 6
    7572:	dc f7       	brge	.-10     	; 0x756a <CalibrateGyrosFast+0xba>
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P1[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    7574:	86 e0       	ldi	r24, 0x06	; 6
    7576:	e8 e2       	ldi	r30, 0x28	; 40
    7578:	f8 e0       	ldi	r31, 0x08	; 8
    757a:	df 01       	movw	r26, r30
    757c:	1d 92       	st	X+, r1
    757e:	8a 95       	dec	r24
    7580:	e9 f7       	brne	.-6      	; 0x757c <CalibrateGyrosFast+0xcc>
    7582:	c0 e2       	ldi	r28, 0x20	; 32

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
		{
			get_raw_gyros();				// Updates gyroADC_P1/P2[] with the correct orientation-based RPY
    7584:	0e 94 0d 39 	call	0x721a	; 0x721a <get_raw_gyros>

			Config.gyroZero_P1[ROLL] 	+= gyroADC_P1[ROLL];
    7588:	40 91 28 08 	lds	r20, 0x0828
    758c:	50 91 29 08 	lds	r21, 0x0829
    7590:	80 91 e7 05 	lds	r24, 0x05E7
    7594:	90 91 e8 05 	lds	r25, 0x05E8
    7598:	48 0f       	add	r20, r24
    759a:	59 1f       	adc	r21, r25
    759c:	50 93 29 08 	sts	0x0829, r21
    75a0:	40 93 28 08 	sts	0x0828, r20
			Config.gyroZero_P1[PITCH] 	+= gyroADC_P1[PITCH];
    75a4:	20 91 2a 08 	lds	r18, 0x082A
    75a8:	30 91 2b 08 	lds	r19, 0x082B
    75ac:	80 91 e9 05 	lds	r24, 0x05E9
    75b0:	90 91 ea 05 	lds	r25, 0x05EA
    75b4:	28 0f       	add	r18, r24
    75b6:	39 1f       	adc	r19, r25
    75b8:	30 93 2b 08 	sts	0x082B, r19
    75bc:	20 93 2a 08 	sts	0x082A, r18
			Config.gyroZero_P1[YAW] 	+= gyroADC_P1[YAW];
    75c0:	60 91 2c 08 	lds	r22, 0x082C
    75c4:	70 91 2d 08 	lds	r23, 0x082D
    75c8:	80 91 eb 05 	lds	r24, 0x05EB
    75cc:	90 91 ec 05 	lds	r25, 0x05EC
    75d0:	86 0f       	add	r24, r22
    75d2:	97 1f       	adc	r25, r23
    75d4:	90 93 2d 08 	sts	0x082D, r25
    75d8:	80 93 2c 08 	sts	0x082C, r24
    75dc:	c1 50       	subi	r28, 0x01	; 1
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P1[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
    75de:	91 f6       	brne	.-92     	; 0x7584 <CalibrateGyrosFast+0xd4>
		}

		// Average readings for all axis
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			Config.gyroZero_P1[i] 	= (Config.gyroZero_P1[i] >> 5);	// Divide by 32
    75e0:	65 e0       	ldi	r22, 0x05	; 5
    75e2:	55 95       	asr	r21
    75e4:	47 95       	ror	r20
    75e6:	6a 95       	dec	r22
    75e8:	e1 f7       	brne	.-8      	; 0x75e2 <CalibrateGyrosFast+0x132>
    75ea:	50 93 29 08 	sts	0x0829, r21
    75ee:	40 93 28 08 	sts	0x0828, r20
    75f2:	75 e0       	ldi	r23, 0x05	; 5
    75f4:	35 95       	asr	r19
    75f6:	27 95       	ror	r18
    75f8:	7a 95       	dec	r23
    75fa:	e1 f7       	brne	.-8      	; 0x75f4 <CalibrateGyrosFast+0x144>
    75fc:	30 93 2b 08 	sts	0x082B, r19
    7600:	20 93 2a 08 	sts	0x082A, r18
    7604:	e5 e0       	ldi	r30, 0x05	; 5
    7606:	95 95       	asr	r25
    7608:	87 95       	ror	r24
    760a:	ea 95       	dec	r30
    760c:	e1 f7       	brne	.-8      	; 0x7606 <CalibrateGyrosFast+0x156>
    760e:	90 93 2d 08 	sts	0x082D, r25
    7612:	80 93 2c 08 	sts	0x082C, r24
    7616:	a9 cf       	rjmp	.-174    	; 0x756a <CalibrateGyrosFast+0xba>

00007618 <CalibrateGyrosSlow>:
	
	Save_Config_to_EEPROM();
}

bool CalibrateGyrosSlow(void)
{
    7618:	2f 92       	push	r2
    761a:	3f 92       	push	r3
    761c:	4f 92       	push	r4
    761e:	5f 92       	push	r5
    7620:	6f 92       	push	r6
    7622:	7f 92       	push	r7
    7624:	8f 92       	push	r8
    7626:	9f 92       	push	r9
    7628:	af 92       	push	r10
    762a:	bf 92       	push	r11
    762c:	cf 92       	push	r12
    762e:	df 92       	push	r13
    7630:	ef 92       	push	r14
    7632:	ff 92       	push	r15
    7634:	0f 93       	push	r16
    7636:	1f 93       	push	r17
    7638:	cf 93       	push	r28
    763a:	df 93       	push	r29
    763c:	cd b7       	in	r28, 0x3d	; 61
    763e:	de b7       	in	r29, 0x3e	; 62
    7640:	66 97       	sbiw	r28, 0x16	; 22
    7642:	0f b6       	in	r0, 0x3f	; 63
    7644:	f8 94       	cli
    7646:	de bf       	out	0x3e, r29	; 62
    7648:	0f be       	out	0x3f, r0	; 63
    764a:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    764c:	1e 86       	std	Y+14, r1	; 0x0e
    764e:	1d 86       	std	Y+13, r1	; 0x0d
    7650:	18 8a       	std	Y+16, r1	; 0x10
    7652:	1f 86       	std	Y+15, r1	; 0x0f
    7654:	1a 8a       	std	Y+18, r1	; 0x12
    7656:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate setting much more quickly
	CalibrateGyrosFast();	
    7658:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <CalibrateGyrosFast>
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		// Work out which orientation we are calibrating
		// Only need to do this if the orientations differ
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    765c:	c0 90 38 05 	lds	r12, 0x0538
    7660:	d0 90 39 05 	lds	r13, 0x0539
    7664:	b0 90 d9 06 	lds	r11, 0x06D9
    7668:	ce 01       	movw	r24, r28
    766a:	01 96       	adiw	r24, 0x01	; 1
    766c:	7c 01       	movw	r14, r24
    766e:	00 e0       	ldi	r16, 0x00	; 0
    7670:	10 e0       	ldi	r17, 0x00	; 0
    7672:	f8 01       	movw	r30, r16
    7674:	90 e6       	ldi	r25, 0x60	; 96
    7676:	c9 16       	cp	r12, r25
    7678:	d1 04       	cpc	r13, r1
    767a:	14 f4       	brge	.+4      	; 0x7680 <CalibrateGyrosSlow+0x68>
    767c:	b1 10       	cpse	r11, r1
    767e:	03 c0       	rjmp	.+6      	; 0x7686 <CalibrateGyrosSlow+0x6e>
    7680:	e3 5a       	subi	r30, 0xA3	; 163
    7682:	f7 4f       	sbci	r31, 0xF7	; 247
    7684:	02 c0       	rjmp	.+4      	; 0x768a <CalibrateGyrosSlow+0x72>
    7686:	e8 5d       	subi	r30, 0xD8	; 216
    7688:	f7 4f       	sbci	r31, 0xF7	; 247
		{
			GyroSmooth[axis] = Config.gyroZero_P2[axis];
		}
		else
		{
			GyroSmooth[axis] = Config.gyroZero_P1[axis];	
    768a:	60 81       	ld	r22, Z
    768c:	71 81       	ldd	r23, Z+1	; 0x01
    768e:	07 2e       	mov	r0, r23
    7690:	00 0c       	add	r0, r0
    7692:	88 0b       	sbc	r24, r24
    7694:	99 0b       	sbc	r25, r25
    7696:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    769a:	f7 01       	movw	r30, r14
    769c:	60 83       	st	Z, r22
    769e:	71 83       	std	Z+1, r23	; 0x01
    76a0:	82 83       	std	Z+2, r24	; 0x02
    76a2:	93 83       	std	Z+3, r25	; 0x03
    76a4:	0e 5f       	subi	r16, 0xFE	; 254
    76a6:	1f 4f       	sbci	r17, 0xFF	; 255
    76a8:	f4 e0       	ldi	r31, 0x04	; 4
    76aa:	ef 0e       	add	r14, r31
    76ac:	f1 1c       	adc	r15, r1
	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate setting much more quickly
	CalibrateGyrosFast();	
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    76ae:	06 30       	cpi	r16, 0x06	; 6
    76b0:	11 05       	cpc	r17, r1
    76b2:	f9 f6       	brne	.-66     	; 0x7672 <CalibrateGyrosSlow+0x5a>
    76b4:	1c 8a       	std	Y+20, r1	; 0x14
    76b6:	1b 8a       	std	Y+19, r1	; 0x13
    76b8:	00 e0       	ldi	r16, 0x00	; 0
    76ba:	10 e0       	ldi	r17, 0x00	; 0
    76bc:	e1 2c       	mov	r14, r1
    76be:	f1 2c       	mov	r15, r1
    76c0:	4e 01       	movw	r8, r28
    76c2:	8d e0       	ldi	r24, 0x0D	; 13
    76c4:	88 0e       	add	r8, r24
    76c6:	91 1c       	adc	r9, r1
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    76c8:	80 91 b2 00 	lds	r24, 0x00B2
    76cc:	9c 89       	ldd	r25, Y+20	; 0x14
    76ce:	89 1b       	sub	r24, r25
    76d0:	e8 0e       	add	r14, r24
    76d2:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    76d4:	e0 91 b2 00 	lds	r30, 0x00B2
    76d8:	ec 8b       	std	Y+20, r30	; 0x14

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    76da:	fc e4       	ldi	r31, 0x4C	; 76
    76dc:	ef 16       	cp	r14, r31
    76de:	ff 06       	cpc	r15, r31
    76e0:	28 f0       	brcs	.+10     	; 0x76ec <CalibrateGyrosSlow+0xd4>
		{
			Gyro_seconds++;
    76e2:	8b 89       	ldd	r24, Y+19	; 0x13
    76e4:	8f 5f       	subi	r24, 0xFF	; 255
    76e6:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    76e8:	e1 2c       	mov	r14, r1
    76ea:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    76ec:	0e 94 0d 39 	call	0x721a	; 0x721a <get_raw_gyros>
    76f0:	eb ed       	ldi	r30, 0xDB	; 219
    76f2:	f5 e0       	ldi	r31, 0x05	; 5
    76f4:	fe 8b       	std	Y+22, r31	; 0x16
    76f6:	ed 8b       	std	Y+21, r30	; 0x15
    76f8:	14 01       	movw	r2, r8
    76fa:	ce 01       	movw	r24, r28
    76fc:	01 96       	adiw	r24, 0x01	; 1
    76fe:	6c 01       	movw	r12, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    7700:	ed 89       	ldd	r30, Y+21	; 0x15
    7702:	fe 89       	ldd	r31, Y+22	; 0x16
    7704:	a1 90       	ld	r10, Z+
    7706:	b1 90       	ld	r11, Z+
    7708:	fe 8b       	std	Y+22, r31	; 0x16
    770a:	ed 8b       	std	Y+21, r30	; 0x15
    770c:	20 e0       	ldi	r18, 0x00	; 0
    770e:	30 ec       	ldi	r19, 0xC0	; 192
    7710:	49 e7       	ldi	r20, 0x79	; 121
    7712:	54 e4       	ldi	r21, 0x44	; 68
    7714:	f6 01       	movw	r30, r12
    7716:	60 81       	ld	r22, Z
    7718:	71 81       	ldd	r23, Z+1	; 0x01
    771a:	82 81       	ldd	r24, Z+2	; 0x02
    771c:	93 81       	ldd	r25, Z+3	; 0x03
    771e:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    7722:	2b 01       	movw	r4, r22
    7724:	3c 01       	movw	r6, r24
    7726:	b5 01       	movw	r22, r10
    7728:	bb 0c       	add	r11, r11
    772a:	88 0b       	sbc	r24, r24
    772c:	99 0b       	sbc	r25, r25
    772e:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    7732:	9b 01       	movw	r18, r22
    7734:	ac 01       	movw	r20, r24
    7736:	c3 01       	movw	r24, r6
    7738:	b2 01       	movw	r22, r4
    773a:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    773e:	20 e0       	ldi	r18, 0x00	; 0
    7740:	30 e0       	ldi	r19, 0x00	; 0
    7742:	4a e7       	ldi	r20, 0x7A	; 122
    7744:	54 e4       	ldi	r21, 0x44	; 68
    7746:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    774a:	f6 01       	movw	r30, r12
    774c:	61 93       	st	Z+, r22
    774e:	71 93       	st	Z+, r23
    7750:	81 93       	st	Z+, r24
    7752:	91 93       	st	Z+, r25
    7754:	6f 01       	movw	r12, r30
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    7756:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    775a:	f1 01       	movw	r30, r2
    775c:	20 81       	ld	r18, Z
    775e:	31 81       	ldd	r19, Z+1	; 0x01
    7760:	26 17       	cp	r18, r22
    7762:	37 07       	cpc	r19, r23
    7764:	11 f0       	breq	.+4      	; 0x776a <CalibrateGyrosSlow+0x152>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    7766:	00 e0       	ldi	r16, 0x00	; 0
    7768:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    776a:	f1 01       	movw	r30, r2
    776c:	61 93       	st	Z+, r22
    776e:	71 93       	st	Z+, r23
    7770:	1f 01       	movw	r2, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    7772:	c8 14       	cp	r12, r8
    7774:	d9 04       	cpc	r13, r9
    7776:	21 f6       	brne	.-120    	; 0x7700 <CalibrateGyrosSlow+0xe8>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    7778:	0f 5f       	subi	r16, 0xFF	; 255
    777a:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    777c:	09 3c       	cpi	r16, 0xC9	; 201
    777e:	11 05       	cpc	r17, r1
    7780:	20 f0       	brcs	.+8      	; 0x778a <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    7782:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    7786:	81 e0       	ldi	r24, 0x01	; 1
    7788:	01 c0       	rjmp	.+2      	; 0x778c <CalibrateGyrosSlow+0x174>
    778a:	80 e0       	ldi	r24, 0x00	; 0
    778c:	e7 e8       	ldi	r30, 0x87	; 135
    778e:	f3 e1       	ldi	r31, 0x13	; 19
    7790:	31 97       	sbiw	r30, 0x01	; 1
    7792:	f1 f7       	brne	.-4      	; 0x7790 <CalibrateGyrosSlow+0x178>
    7794:	00 c0       	rjmp	.+0      	; 0x7796 <CalibrateGyrosSlow+0x17e>
    7796:	00 00       	nop
			GyroSmooth[axis] = Config.gyroZero_P1[axis];	
		}		
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    7798:	81 11       	cpse	r24, r1
    779a:	04 c0       	rjmp	.+8      	; 0x77a4 <CalibrateGyrosSlow+0x18c>
    779c:	fb 89       	ldd	r31, Y+19	; 0x13
    779e:	f6 30       	cpi	r31, 0x06	; 6
    77a0:	08 f4       	brcc	.+2      	; 0x77a4 <CalibrateGyrosSlow+0x18c>
    77a2:	92 cf       	rjmp	.-220    	; 0x76c8 <CalibrateGyrosSlow+0xb0>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    77a4:	66 96       	adiw	r28, 0x16	; 22
    77a6:	0f b6       	in	r0, 0x3f	; 63
    77a8:	f8 94       	cli
    77aa:	de bf       	out	0x3e, r29	; 62
    77ac:	0f be       	out	0x3f, r0	; 63
    77ae:	cd bf       	out	0x3d, r28	; 61
    77b0:	df 91       	pop	r29
    77b2:	cf 91       	pop	r28
    77b4:	1f 91       	pop	r17
    77b6:	0f 91       	pop	r16
    77b8:	ff 90       	pop	r15
    77ba:	ef 90       	pop	r14
    77bc:	df 90       	pop	r13
    77be:	cf 90       	pop	r12
    77c0:	bf 90       	pop	r11
    77c2:	af 90       	pop	r10
    77c4:	9f 90       	pop	r9
    77c6:	8f 90       	pop	r8
    77c8:	7f 90       	pop	r7
    77ca:	6f 90       	pop	r6
    77cc:	5f 90       	pop	r5
    77ce:	4f 90       	pop	r4
    77d0:	3f 90       	pop	r3
    77d2:	2f 90       	pop	r2
    77d4:	08 95       	ret

000077d6 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    77d6:	41 e0       	ldi	r20, 0x01	; 1
    77d8:	6b e6       	ldi	r22, 0x6B	; 107
    77da:	80 ed       	ldi	r24, 0xD0	; 208
    77dc:	0e 94 02 3c 	call	0x7804	; 0x7804 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    77e0:	40 e4       	ldi	r20, 0x40	; 64
    77e2:	67 e3       	ldi	r22, 0x37	; 55
    77e4:	80 ed       	ldi	r24, 0xD0	; 208
    77e6:	0e 94 02 3c 	call	0x7804	; 0x7804 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    77ea:	80 91 de 06 	lds	r24, 0x06DE
    77ee:	46 e0       	ldi	r20, 0x06	; 6
    77f0:	48 1b       	sub	r20, r24
    77f2:	6a e1       	ldi	r22, 0x1A	; 26
    77f4:	80 ed       	ldi	r24, 0xD0	; 208
    77f6:	0e 94 02 3c 	call	0x7804	; 0x7804 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    77fa:	48 e1       	ldi	r20, 0x18	; 24
    77fc:	6b e1       	ldi	r22, 0x1B	; 27
    77fe:	80 ed       	ldi	r24, 0xD0	; 208
    7800:	0c 94 02 3c 	jmp	0x7804	; 0x7804 <writeI2Cbyte>

00007804 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    7804:	cf 93       	push	r28
    7806:	df 93       	push	r29
    7808:	00 d0       	rcall	.+0      	; 0x780a <writeI2Cbyte+0x6>
    780a:	cd b7       	in	r28, 0x3d	; 61
    780c:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    780e:	4a 83       	std	Y+2, r20	; 0x02
    7810:	69 83       	std	Y+1, r22	; 0x01
    7812:	0e 94 df 6b 	call	0xd7be	; 0xd7be <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    7816:	69 81       	ldd	r22, Y+1	; 0x01
    7818:	86 2f       	mov	r24, r22
    781a:	0e 94 2f 6c 	call	0xd85e	; 0xd85e <i2c_write>
    i2c_write(value); 								// Write byte
    781e:	4a 81       	ldd	r20, Y+2	; 0x02
    7820:	84 2f       	mov	r24, r20
    7822:	0e 94 2f 6c 	call	0xd85e	; 0xd85e <i2c_write>
    i2c_stop();
}
    7826:	0f 90       	pop	r0
    7828:	0f 90       	pop	r0
    782a:	df 91       	pop	r29
    782c:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    782e:	0c 94 20 6c 	jmp	0xd840	; 0xd840 <i2c_stop>

00007832 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    7832:	cf 92       	push	r12
    7834:	df 92       	push	r13
    7836:	ef 92       	push	r14
    7838:	ff 92       	push	r15
    783a:	0f 93       	push	r16
    783c:	1f 93       	push	r17
    783e:	cf 93       	push	r28
    7840:	df 93       	push	r29
    7842:	00 d0       	rcall	.+0      	; 0x7844 <readI2CbyteArray+0x12>
    7844:	1f 92       	push	r1
    7846:	cd b7       	in	r28, 0x3d	; 61
    7848:	de b7       	in	r29, 0x3e	; 62
    784a:	18 2f       	mov	r17, r24
    784c:	02 2f       	mov	r16, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    784e:	4a 83       	std	Y+2, r20	; 0x02
    7850:	5b 83       	std	Y+3, r21	; 0x03
    7852:	69 83       	std	Y+1, r22	; 0x01
    7854:	0e 94 df 6b 	call	0xd7be	; 0xd7be <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    7858:	69 81       	ldd	r22, Y+1	; 0x01
    785a:	86 2f       	mov	r24, r22
    785c:	0e 94 2f 6c 	call	0xd85e	; 0xd85e <i2c_write>
    i2c_rep_start(address+I2C_READ);
    7860:	81 e0       	ldi	r24, 0x01	; 1
    7862:	81 0f       	add	r24, r17
    7864:	0e 94 1e 6c 	call	0xd83c	; 0xd83c <i2c_rep_start>
    7868:	4a 81       	ldd	r20, Y+2	; 0x02
    786a:	c4 2e       	mov	r12, r20
    786c:	5b 81       	ldd	r21, Y+3	; 0x03
    786e:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    7870:	e1 2c       	mov	r14, r1
    7872:	f1 2c       	mov	r15, r1

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    7874:	10 e0       	ldi	r17, 0x00	; 0
    7876:	e0 16       	cp	r14, r16
    7878:	f1 06       	cpc	r15, r17
    787a:	8c f4       	brge	.+34     	; 0x789e <readI2CbyteArray+0x6c>
	{
		if ((i+1)!=size)
    787c:	8f ef       	ldi	r24, 0xFF	; 255
    787e:	e8 1a       	sub	r14, r24
    7880:	f8 0a       	sbc	r15, r24
    7882:	e0 16       	cp	r14, r16
    7884:	f1 06       	cpc	r15, r17
    7886:	19 f0       	breq	.+6      	; 0x788e <readI2CbyteArray+0x5c>
		{
			array[i]=i2c_readAck();
    7888:	0e 94 4f 6c 	call	0xd89e	; 0xd89e <i2c_readAck>
    788c:	02 c0       	rjmp	.+4      	; 0x7892 <readI2CbyteArray+0x60>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    788e:	0e 94 68 6c 	call	0xd8d0	; 0xd8d0 <i2c_readNak>
    7892:	f6 01       	movw	r30, r12
    7894:	80 83       	st	Z, r24
    7896:	ff ef       	ldi	r31, 0xFF	; 255
    7898:	cf 1a       	sub	r12, r31
    789a:	df 0a       	sbc	r13, r31
    789c:	ec cf       	rjmp	.-40     	; 0x7876 <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    789e:	0f 90       	pop	r0
    78a0:	0f 90       	pop	r0
    78a2:	0f 90       	pop	r0
    78a4:	df 91       	pop	r29
    78a6:	cf 91       	pop	r28
    78a8:	1f 91       	pop	r17
    78aa:	0f 91       	pop	r16
    78ac:	ff 90       	pop	r15
    78ae:	ef 90       	pop	r14
    78b0:	df 90       	pop	r13
    78b2:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    78b4:	0c 94 20 6c 	jmp	0xd840	; 0xd840 <i2c_stop>

000078b8 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    78b8:	4f 92       	push	r4
    78ba:	5f 92       	push	r5
    78bc:	6f 92       	push	r6
    78be:	7f 92       	push	r7
    78c0:	8f 92       	push	r8
    78c2:	9f 92       	push	r9
    78c4:	af 92       	push	r10
    78c6:	bf 92       	push	r11
    78c8:	cf 92       	push	r12
    78ca:	df 92       	push	r13
    78cc:	ef 92       	push	r14
    78ce:	ff 92       	push	r15
    78d0:	cf 93       	push	r28
    78d2:	df 93       	push	r29
    78d4:	cd b7       	in	r28, 0x3d	; 61
    78d6:	de b7       	in	r29, 0x3e	; 62
    78d8:	28 97       	sbiw	r28, 0x08	; 8
    78da:	0f b6       	in	r0, 0x3f	; 63
    78dc:	f8 94       	cli
    78de:	de bf       	out	0x3e, r29	; 62
    78e0:	0f be       	out	0x3f, r0	; 63
    78e2:	cd bf       	out	0x3d, r28	; 61
    78e4:	6b 01       	movw	r12, r22
    78e6:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    78e8:	80 90 31 06 	lds	r8, 0x0631
    78ec:	90 90 32 06 	lds	r9, 0x0632
    78f0:	a0 90 33 06 	lds	r10, 0x0633
    78f4:	b0 90 34 06 	lds	r11, 0x0634
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    78f8:	9b 01       	movw	r18, r22
    78fa:	ac 01       	movw	r20, r24
    78fc:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    7900:	20 e0       	ldi	r18, 0x00	; 0
    7902:	30 e0       	ldi	r19, 0x00	; 0
    7904:	40 e0       	ldi	r20, 0x00	; 0
    7906:	5f e3       	ldi	r21, 0x3F	; 63
    7908:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    790c:	9b 01       	movw	r18, r22
    790e:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    7910:	60 e0       	ldi	r22, 0x00	; 0
    7912:	70 e0       	ldi	r23, 0x00	; 0
    7914:	80 e8       	ldi	r24, 0x80	; 128
    7916:	9f e3       	ldi	r25, 0x3F	; 63
    7918:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    791c:	69 83       	std	Y+1, r22	; 0x01
    791e:	7a 83       	std	Y+2, r23	; 0x02
    7920:	8b 83       	std	Y+3, r24	; 0x03
    7922:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    7924:	40 90 35 06 	lds	r4, 0x0635
    7928:	50 90 36 06 	lds	r5, 0x0636
    792c:	60 90 37 06 	lds	r6, 0x0637
    7930:	70 90 38 06 	lds	r7, 0x0638
    7934:	9b 01       	movw	r18, r22
    7936:	ac 01       	movw	r20, r24
    7938:	c5 01       	movw	r24, r10
    793a:	b4 01       	movw	r22, r8
    793c:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    7940:	6d 83       	std	Y+5, r22	; 0x05
    7942:	7e 83       	std	Y+6, r23	; 0x06
    7944:	8f 83       	std	Y+7, r24	; 0x07
    7946:	98 87       	std	Y+8, r25	; 0x08
    7948:	a7 01       	movw	r20, r14
    794a:	96 01       	movw	r18, r12
    794c:	c3 01       	movw	r24, r6
    794e:	b2 01       	movw	r22, r4
    7950:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    7954:	9b 01       	movw	r18, r22
    7956:	ac 01       	movw	r20, r24
    7958:	6d 81       	ldd	r22, Y+5	; 0x05
    795a:	7e 81       	ldd	r23, Y+6	; 0x06
    795c:	8f 81       	ldd	r24, Y+7	; 0x07
    795e:	98 85       	ldd	r25, Y+8	; 0x08
    7960:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    7964:	60 93 1d 06 	sts	0x061D, r22
    7968:	70 93 1e 06 	sts	0x061E, r23
    796c:	80 93 1f 06 	sts	0x061F, r24
    7970:	90 93 20 06 	sts	0x0620, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    7974:	a7 01       	movw	r20, r14
    7976:	96 01       	movw	r18, r12
    7978:	c5 01       	movw	r24, r10
    797a:	b4 01       	movw	r22, r8
    797c:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    7980:	6b 01       	movw	r12, r22
    7982:	7c 01       	movw	r14, r24
    7984:	29 81       	ldd	r18, Y+1	; 0x01
    7986:	3a 81       	ldd	r19, Y+2	; 0x02
    7988:	4b 81       	ldd	r20, Y+3	; 0x03
    798a:	5c 81       	ldd	r21, Y+4	; 0x04
    798c:	c3 01       	movw	r24, r6
    798e:	b2 01       	movw	r22, r4
    7990:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    7994:	9b 01       	movw	r18, r22
    7996:	ac 01       	movw	r20, r24
    7998:	c7 01       	movw	r24, r14
    799a:	b6 01       	movw	r22, r12
    799c:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    79a0:	60 93 f9 05 	sts	0x05F9, r22
    79a4:	70 93 fa 05 	sts	0x05FA, r23
    79a8:	80 93 fb 05 	sts	0x05FB, r24
    79ac:	90 93 fc 05 	sts	0x05FC, r25
}
    79b0:	28 96       	adiw	r28, 0x08	; 8
    79b2:	0f b6       	in	r0, 0x3f	; 63
    79b4:	f8 94       	cli
    79b6:	de bf       	out	0x3e, r29	; 62
    79b8:	0f be       	out	0x3f, r0	; 63
    79ba:	cd bf       	out	0x3d, r28	; 61
    79bc:	df 91       	pop	r29
    79be:	cf 91       	pop	r28
    79c0:	ff 90       	pop	r15
    79c2:	ef 90       	pop	r14
    79c4:	df 90       	pop	r13
    79c6:	cf 90       	pop	r12
    79c8:	bf 90       	pop	r11
    79ca:	af 90       	pop	r10
    79cc:	9f 90       	pop	r9
    79ce:	8f 90       	pop	r8
    79d0:	7f 90       	pop	r7
    79d2:	6f 90       	pop	r6
    79d4:	5f 90       	pop	r5
    79d6:	4f 90       	pop	r4
    79d8:	08 95       	ret

000079da <thetascale>:

float thetascale(float gyro, float intervalf)
{
    79da:	cf 92       	push	r12
    79dc:	df 92       	push	r13
    79de:	ef 92       	push	r14
    79e0:	ff 92       	push	r15
    79e2:	69 01       	movw	r12, r18
    79e4:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    79e6:	25 ef       	ldi	r18, 0xF5	; 245
    79e8:	31 ea       	ldi	r19, 0xA1	; 161
    79ea:	4b e8       	ldi	r20, 0x8B	; 139
    79ec:	5c e3       	ldi	r21, 0x3C	; 60
    79ee:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    79f2:	a7 01       	movw	r20, r14
    79f4:	96 01       	movw	r18, r12
    79f6:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    79fa:	6b 01       	movw	r12, r22
    79fc:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    79fe:	26 ea       	ldi	r18, 0xA6	; 166
    7a00:	3a e0       	ldi	r19, 0x0A	; 10
    7a02:	46 e8       	ldi	r20, 0x86	; 134
    7a04:	5e e3       	ldi	r21, 0x3E	; 62
    7a06:	0e 94 ed 6e 	call	0xddda	; 0xddda <__gesf2>
    7a0a:	18 16       	cp	r1, r24
    7a0c:	9c f0       	brlt	.+38     	; 0x7a34 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    7a0e:	26 ea       	ldi	r18, 0xA6	; 166
    7a10:	3a e0       	ldi	r19, 0x0A	; 10
    7a12:	46 e8       	ldi	r20, 0x86	; 134
    7a14:	5e eb       	ldi	r21, 0xBE	; 190
    7a16:	c7 01       	movw	r24, r14
    7a18:	b6 01       	movw	r22, r12
    7a1a:	0e 94 8e 6d 	call	0xdb1c	; 0xdb1c <__cmpsf2>
    7a1e:	87 ff       	sbrs	r24, 7
    7a20:	11 c0       	rjmp	.+34     	; 0x7a44 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    7a22:	96 ea       	ldi	r25, 0xA6	; 166
    7a24:	c9 2e       	mov	r12, r25
    7a26:	9a e0       	ldi	r25, 0x0A	; 10
    7a28:	d9 2e       	mov	r13, r25
    7a2a:	96 e8       	ldi	r25, 0x86	; 134
    7a2c:	e9 2e       	mov	r14, r25
    7a2e:	9e eb       	ldi	r25, 0xBE	; 190
    7a30:	f9 2e       	mov	r15, r25
    7a32:	08 c0       	rjmp	.+16     	; 0x7a44 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    7a34:	86 ea       	ldi	r24, 0xA6	; 166
    7a36:	c8 2e       	mov	r12, r24
    7a38:	8a e0       	ldi	r24, 0x0A	; 10
    7a3a:	d8 2e       	mov	r13, r24
    7a3c:	86 e8       	ldi	r24, 0x86	; 134
    7a3e:	e8 2e       	mov	r14, r24
    7a40:	8e e3       	ldi	r24, 0x3E	; 62
    7a42:	f8 2e       	mov	r15, r24
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    7a44:	c7 01       	movw	r24, r14
    7a46:	b6 01       	movw	r22, r12
    7a48:	ff 90       	pop	r15
    7a4a:	ef 90       	pop	r14
    7a4c:	df 90       	pop	r13
    7a4e:	cf 90       	pop	r12
    7a50:	08 95       	ret

00007a52 <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    7a52:	8f 92       	push	r8
    7a54:	9f 92       	push	r9
    7a56:	af 92       	push	r10
    7a58:	bf 92       	push	r11
    7a5a:	cf 92       	push	r12
    7a5c:	df 92       	push	r13
    7a5e:	ef 92       	push	r14
    7a60:	ff 92       	push	r15
    7a62:	0f 93       	push	r16
    7a64:	1f 93       	push	r17
    7a66:	6b 01       	movw	r12, r22
    7a68:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    7a6a:	60 91 0d 06 	lds	r22, 0x060D
    7a6e:	70 91 0e 06 	lds	r23, 0x060E
    7a72:	80 91 0f 06 	lds	r24, 0x060F
    7a76:	90 91 10 06 	lds	r25, 0x0610
    7a7a:	a7 01       	movw	r20, r14
    7a7c:	96 01       	movw	r18, r12
    7a7e:	0e 94 ed 3c 	call	0x79da	; 0x79da <thetascale>
	VectorA = VectorY;
    7a82:	00 91 3e 05 	lds	r16, 0x053E
    7a86:	10 91 3f 05 	lds	r17, 0x053F
    7a8a:	20 91 40 05 	lds	r18, 0x0540
    7a8e:	30 91 41 05 	lds	r19, 0x0541
    7a92:	00 93 31 06 	sts	0x0631, r16
    7a96:	10 93 32 06 	sts	0x0632, r17
    7a9a:	20 93 33 06 	sts	0x0633, r18
    7a9e:	30 93 34 06 	sts	0x0634, r19
	VectorB = VectorZ;
    7aa2:	00 91 00 05 	lds	r16, 0x0500
    7aa6:	10 91 01 05 	lds	r17, 0x0501
    7aaa:	20 91 02 05 	lds	r18, 0x0502
    7aae:	30 91 03 05 	lds	r19, 0x0503
    7ab2:	00 93 35 06 	sts	0x0635, r16
    7ab6:	10 93 36 06 	sts	0x0636, r17
    7aba:	20 93 37 06 	sts	0x0637, r18
    7abe:	30 93 38 06 	sts	0x0638, r19
	RotateVector(theta);
    7ac2:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <RotateVector>
	VectorY = VectorNewA;
    7ac6:	80 91 1d 06 	lds	r24, 0x061D
    7aca:	90 91 1e 06 	lds	r25, 0x061E
    7ace:	a0 91 1f 06 	lds	r26, 0x061F
    7ad2:	b0 91 20 06 	lds	r27, 0x0620
    7ad6:	80 93 3e 05 	sts	0x053E, r24
    7ada:	90 93 3f 05 	sts	0x053F, r25
    7ade:	a0 93 40 05 	sts	0x0540, r26
    7ae2:	b0 93 41 05 	sts	0x0541, r27
	VectorZ = VectorNewB;
    7ae6:	80 90 f9 05 	lds	r8, 0x05F9
    7aea:	90 90 fa 05 	lds	r9, 0x05FA
    7aee:	a0 90 fb 05 	lds	r10, 0x05FB
    7af2:	b0 90 fc 05 	lds	r11, 0x05FC
    7af6:	80 92 00 05 	sts	0x0500, r8
    7afa:	90 92 01 05 	sts	0x0501, r9
    7afe:	a0 92 02 05 	sts	0x0502, r10
    7b02:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    7b06:	60 91 11 06 	lds	r22, 0x0611
    7b0a:	70 91 12 06 	lds	r23, 0x0612
    7b0e:	80 91 13 06 	lds	r24, 0x0613
    7b12:	90 91 14 06 	lds	r25, 0x0614
    7b16:	a7 01       	movw	r20, r14
    7b18:	96 01       	movw	r18, r12
    7b1a:	0e 94 ed 3c 	call	0x79da	; 0x79da <thetascale>
	VectorA = VectorX;
    7b1e:	00 91 42 05 	lds	r16, 0x0542
    7b22:	10 91 43 05 	lds	r17, 0x0543
    7b26:	20 91 44 05 	lds	r18, 0x0544
    7b2a:	30 91 45 05 	lds	r19, 0x0545
    7b2e:	00 93 31 06 	sts	0x0631, r16
    7b32:	10 93 32 06 	sts	0x0632, r17
    7b36:	20 93 33 06 	sts	0x0633, r18
    7b3a:	30 93 34 06 	sts	0x0634, r19
	VectorB = VectorZ;
    7b3e:	80 92 35 06 	sts	0x0635, r8
    7b42:	90 92 36 06 	sts	0x0636, r9
    7b46:	a0 92 37 06 	sts	0x0637, r10
    7b4a:	b0 92 38 06 	sts	0x0638, r11
	RotateVector(theta);
    7b4e:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <RotateVector>
	VectorX = VectorNewA;
    7b52:	80 90 1d 06 	lds	r8, 0x061D
    7b56:	90 90 1e 06 	lds	r9, 0x061E
    7b5a:	a0 90 1f 06 	lds	r10, 0x061F
    7b5e:	b0 90 20 06 	lds	r11, 0x0620
    7b62:	80 92 42 05 	sts	0x0542, r8
    7b66:	90 92 43 05 	sts	0x0543, r9
    7b6a:	a0 92 44 05 	sts	0x0544, r10
    7b6e:	b0 92 45 05 	sts	0x0545, r11
	VectorZ = VectorNewB;
    7b72:	80 91 f9 05 	lds	r24, 0x05F9
    7b76:	90 91 fa 05 	lds	r25, 0x05FA
    7b7a:	a0 91 fb 05 	lds	r26, 0x05FB
    7b7e:	b0 91 fc 05 	lds	r27, 0x05FC
    7b82:	80 93 00 05 	sts	0x0500, r24
    7b86:	90 93 01 05 	sts	0x0501, r25
    7b8a:	a0 93 02 05 	sts	0x0502, r26
    7b8e:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(GyroYawVC, intervalf);
    7b92:	60 91 15 06 	lds	r22, 0x0615
    7b96:	70 91 16 06 	lds	r23, 0x0616
    7b9a:	80 91 17 06 	lds	r24, 0x0617
    7b9e:	90 91 18 06 	lds	r25, 0x0618
    7ba2:	a7 01       	movw	r20, r14
    7ba4:	96 01       	movw	r18, r12
    7ba6:	0e 94 ed 3c 	call	0x79da	; 0x79da <thetascale>
	VectorA = VectorX;
    7baa:	80 92 31 06 	sts	0x0631, r8
    7bae:	90 92 32 06 	sts	0x0632, r9
    7bb2:	a0 92 33 06 	sts	0x0633, r10
    7bb6:	b0 92 34 06 	sts	0x0634, r11
	VectorB = VectorY;
    7bba:	c0 90 3e 05 	lds	r12, 0x053E
    7bbe:	d0 90 3f 05 	lds	r13, 0x053F
    7bc2:	e0 90 40 05 	lds	r14, 0x0540
    7bc6:	f0 90 41 05 	lds	r15, 0x0541
    7bca:	c0 92 35 06 	sts	0x0635, r12
    7bce:	d0 92 36 06 	sts	0x0636, r13
    7bd2:	e0 92 37 06 	sts	0x0637, r14
    7bd6:	f0 92 38 06 	sts	0x0638, r15
	RotateVector(theta);
    7bda:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <RotateVector>
	VectorX = VectorNewA;
    7bde:	80 91 1d 06 	lds	r24, 0x061D
    7be2:	90 91 1e 06 	lds	r25, 0x061E
    7be6:	a0 91 1f 06 	lds	r26, 0x061F
    7bea:	b0 91 20 06 	lds	r27, 0x0620
    7bee:	80 93 42 05 	sts	0x0542, r24
    7bf2:	90 93 43 05 	sts	0x0543, r25
    7bf6:	a0 93 44 05 	sts	0x0544, r26
    7bfa:	b0 93 45 05 	sts	0x0545, r27
	VectorY = VectorNewB;
    7bfe:	80 91 f9 05 	lds	r24, 0x05F9
    7c02:	90 91 fa 05 	lds	r25, 0x05FA
    7c06:	a0 91 fb 05 	lds	r26, 0x05FB
    7c0a:	b0 91 fc 05 	lds	r27, 0x05FC
    7c0e:	80 93 3e 05 	sts	0x053E, r24
    7c12:	90 93 3f 05 	sts	0x053F, r25
    7c16:	a0 93 40 05 	sts	0x0540, r26
    7c1a:	b0 93 41 05 	sts	0x0541, r27
}
    7c1e:	1f 91       	pop	r17
    7c20:	0f 91       	pop	r16
    7c22:	ff 90       	pop	r15
    7c24:	ef 90       	pop	r14
    7c26:	df 90       	pop	r13
    7c28:	cf 90       	pop	r12
    7c2a:	bf 90       	pop	r11
    7c2c:	af 90       	pop	r10
    7c2e:	9f 90       	pop	r9
    7c30:	8f 90       	pop	r8
    7c32:	08 95       	ret

00007c34 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    7c34:	cf 92       	push	r12
    7c36:	df 92       	push	r13
    7c38:	ef 92       	push	r14
    7c3a:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    7c3c:	20 e0       	ldi	r18, 0x00	; 0
    7c3e:	30 e0       	ldi	r19, 0x00	; 0
    7c40:	44 eb       	ldi	r20, 0xB4	; 180
    7c42:	52 e4       	ldi	r21, 0x42	; 66
    7c44:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    7c48:	6b 01       	movw	r12, r22
    7c4a:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    7c4c:	20 e0       	ldi	r18, 0x00	; 0
    7c4e:	30 e0       	ldi	r19, 0x00	; 0
    7c50:	a9 01       	movw	r20, r18
    7c52:	60 91 00 05 	lds	r22, 0x0500
    7c56:	70 91 01 05 	lds	r23, 0x0501
    7c5a:	80 91 02 05 	lds	r24, 0x0502
    7c5e:	90 91 03 05 	lds	r25, 0x0503
    7c62:	0e 94 8e 6d 	call	0xdb1c	; 0xdb1c <__cmpsf2>
    7c66:	87 ff       	sbrs	r24, 7
    7c68:	18 c0       	rjmp	.+48     	; 0x7c9a <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    7c6a:	20 e0       	ldi	r18, 0x00	; 0
    7c6c:	30 e0       	ldi	r19, 0x00	; 0
    7c6e:	a9 01       	movw	r20, r18
    7c70:	c7 01       	movw	r24, r14
    7c72:	b6 01       	movw	r22, r12
    7c74:	0e 94 ed 6e 	call	0xddda	; 0xddda <__gesf2>
		{
			temp = 180 - temp;
    7c78:	a7 01       	movw	r20, r14
    7c7a:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    7c7c:	18 16       	cp	r1, r24
    7c7e:	2c f4       	brge	.+10     	; 0x7c8a <ext2+0x56>
		{
			temp = 180 - temp;
    7c80:	60 e0       	ldi	r22, 0x00	; 0
    7c82:	70 e0       	ldi	r23, 0x00	; 0
    7c84:	84 e3       	ldi	r24, 0x34	; 52
    7c86:	93 e4       	ldi	r25, 0x43	; 67
    7c88:	04 c0       	rjmp	.+8      	; 0x7c92 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    7c8a:	60 e0       	ldi	r22, 0x00	; 0
    7c8c:	70 e0       	ldi	r23, 0x00	; 0
    7c8e:	84 e3       	ldi	r24, 0x34	; 52
    7c90:	93 ec       	ldi	r25, 0xC3	; 195
    7c92:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    7c96:	6b 01       	movw	r12, r22
    7c98:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    7c9a:	c7 01       	movw	r24, r14
    7c9c:	b6 01       	movw	r22, r12
    7c9e:	ff 90       	pop	r15
    7ca0:	ef 90       	pop	r14
    7ca2:	df 90       	pop	r13
    7ca4:	cf 90       	pop	r12
    7ca6:	08 95       	ret

00007ca8 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    7ca8:	60 91 42 05 	lds	r22, 0x0542
    7cac:	70 91 43 05 	lds	r23, 0x0543
    7cb0:	80 91 44 05 	lds	r24, 0x0544
    7cb4:	90 91 45 05 	lds	r25, 0x0545
    7cb8:	0e 94 1a 3e 	call	0x7c34	; 0x7c34 <ext2>
    7cbc:	60 93 2d 06 	sts	0x062D, r22
    7cc0:	70 93 2e 06 	sts	0x062E, r23
    7cc4:	80 93 2f 06 	sts	0x062F, r24
    7cc8:	90 93 30 06 	sts	0x0630, r25
	EulerAnglePitch = ext2(VectorY);
    7ccc:	60 91 3e 05 	lds	r22, 0x053E
    7cd0:	70 91 3f 05 	lds	r23, 0x053F
    7cd4:	80 91 40 05 	lds	r24, 0x0540
    7cd8:	90 91 41 05 	lds	r25, 0x0541
    7cdc:	0e 94 1a 3e 	call	0x7c34	; 0x7c34 <ext2>
    7ce0:	60 93 01 06 	sts	0x0601, r22
    7ce4:	70 93 02 06 	sts	0x0602, r23
    7ce8:	80 93 03 06 	sts	0x0603, r24
    7cec:	90 93 04 06 	sts	0x0604, r25
    7cf0:	08 95       	ret

00007cf2 <imu_update>:
//
//************************************************************
//

void imu_update(uint32_t period)
{
    7cf2:	4f 92       	push	r4
    7cf4:	5f 92       	push	r5
    7cf6:	6f 92       	push	r6
    7cf8:	7f 92       	push	r7
    7cfa:	8f 92       	push	r8
    7cfc:	9f 92       	push	r9
    7cfe:	af 92       	push	r10
    7d00:	bf 92       	push	r11
    7d02:	cf 92       	push	r12
    7d04:	df 92       	push	r13
    7d06:	ef 92       	push	r14
    7d08:	ff 92       	push	r15
    7d0a:	0f 93       	push	r16
    7d0c:	1f 93       	push	r17
    7d0e:	cf 93       	push	r28
    7d10:	df 93       	push	r29
    7d12:	cd b7       	in	r28, 0x3d	; 61
    7d14:	de b7       	in	r29, 0x3e	; 62
    7d16:	2c 97       	sbiw	r28, 0x0c	; 12
    7d18:	0f b6       	in	r0, 0x3f	; 63
    7d1a:	f8 94       	cli
    7d1c:	de bf       	out	0x3e, r29	; 62
    7d1e:	0f be       	out	0x3f, r0	; 63
    7d20:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    7d22:	0e 94 3b 6e 	call	0xdc76	; 0xdc76 <__floatunsisf>
    7d26:	69 83       	std	Y+1, r22	; 0x01
    7d28:	7a 83       	std	Y+2, r23	; 0x02
    7d2a:	8b 83       	std	Y+3, r24	; 0x03
    7d2c:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    7d2e:	20 e8       	ldi	r18, 0x80	; 128
    7d30:	36 e9       	ldi	r19, 0x96	; 150
    7d32:	48 e1       	ldi	r20, 0x18	; 24
    7d34:	5a e4       	ldi	r21, 0x4A	; 74
    7d36:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    7d3a:	60 93 fd 05 	sts	0x05FD, r22
    7d3e:	70 93 fe 05 	sts	0x05FE, r23
    7d42:	80 93 ff 05 	sts	0x05FF, r24
    7d46:	90 93 00 06 	sts	0x0600, r25
	//************************************************************
	// Acc LPF
	//************************************************************	

	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    7d4a:	80 91 63 06 	lds	r24, 0x0663
    7d4e:	60 91 df 06 	lds	r22, 0x06DF
    7d52:	82 30       	cpi	r24, 0x02	; 2
    7d54:	39 f0       	breq	.+14     	; 0x7d64 <imu_update+0x72>
	{
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    7d56:	04 e0       	ldi	r16, 0x04	; 4
    7d58:	60 02       	muls	r22, r16
    7d5a:	b0 01       	movw	r22, r0
    7d5c:	11 24       	eor	r1, r1
    7d5e:	6b 54       	subi	r22, 0x4B	; 75
    7d60:	7b 4d       	sbci	r23, 0xDB	; 219
    7d62:	06 c0       	rjmp	.+12     	; 0x7d70 <imu_update+0x7e>
	}
	else
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
    7d64:	14 e0       	ldi	r17, 0x04	; 4
    7d66:	61 02       	muls	r22, r17
    7d68:	b0 01       	movw	r22, r0
    7d6a:	11 24       	eor	r1, r1
    7d6c:	6b 56       	subi	r22, 0x6B	; 107
    7d6e:	7b 4d       	sbci	r23, 0xDB	; 219
    7d70:	44 e0       	ldi	r20, 0x04	; 4
    7d72:	50 e0       	ldi	r21, 0x00	; 0
    7d74:	ce 01       	movw	r24, r28
    7d76:	01 96       	adiw	r24, 0x01	; 1
    7d78:	0e 94 ff 6f 	call	0xdffe	; 0xdffe <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    7d7c:	90 90 df 06 	lds	r9, 0x06DF
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    7d80:	49 80       	ldd	r4, Y+1	; 0x01
    7d82:	5a 80       	ldd	r5, Y+2	; 0x02
    7d84:	6b 80       	ldd	r6, Y+3	; 0x03
    7d86:	7c 80       	ldd	r7, Y+4	; 0x04
    7d88:	80 e7       	ldi	r24, 0x70	; 112
    7d8a:	a8 2e       	mov	r10, r24
    7d8c:	85 e0       	ldi	r24, 0x05	; 5
    7d8e:	b8 2e       	mov	r11, r24
    7d90:	01 e2       	ldi	r16, 0x21	; 33
    7d92:	16 e0       	ldi	r17, 0x06	; 6
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    7d94:	d5 01       	movw	r26, r10
    7d96:	6d 91       	ld	r22, X+
    7d98:	7d 91       	ld	r23, X+
    7d9a:	5d 01       	movw	r10, r26
    7d9c:	07 2e       	mov	r0, r23
    7d9e:	00 0c       	add	r0, r0
    7da0:	88 0b       	sbc	r24, r24
    7da2:	99 0b       	sbc	r25, r25
    7da4:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    7da8:	6b 01       	movw	r12, r22
    7daa:	7c 01       	movw	r14, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    7dac:	b7 e0       	ldi	r27, 0x07	; 7
    7dae:	9b 16       	cp	r9, r27
    7db0:	f1 f0       	breq	.+60     	; 0x7dee <imu_update+0xfc>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    7db2:	20 e0       	ldi	r18, 0x00	; 0
    7db4:	30 e0       	ldi	r19, 0x00	; 0
    7db6:	40 e8       	ldi	r20, 0x80	; 128
    7db8:	5f e3       	ldi	r21, 0x3F	; 63
    7dba:	c3 01       	movw	r24, r6
    7dbc:	b2 01       	movw	r22, r4
    7dbe:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    7dc2:	f8 01       	movw	r30, r16
    7dc4:	20 81       	ld	r18, Z
    7dc6:	31 81       	ldd	r19, Z+1	; 0x01
    7dc8:	42 81       	ldd	r20, Z+2	; 0x02
    7dca:	53 81       	ldd	r21, Z+3	; 0x03
    7dcc:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    7dd0:	a7 01       	movw	r20, r14
    7dd2:	96 01       	movw	r18, r12
    7dd4:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    7dd8:	a3 01       	movw	r20, r6
    7dda:	92 01       	movw	r18, r4
    7ddc:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    7de0:	d8 01       	movw	r26, r16
    7de2:	6d 93       	st	X+, r22
    7de4:	7d 93       	st	X+, r23
    7de6:	8d 93       	st	X+, r24
    7de8:	9c 93       	st	X, r25
    7dea:	13 97       	sbiw	r26, 0x03	; 3
    7dec:	09 c0       	rjmp	.+18     	; 0x7e00 <imu_update+0x10e>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    7dee:	f7 fa       	bst	r15, 7
    7df0:	f0 94       	com	r15
    7df2:	f7 f8       	bld	r15, 7
    7df4:	f0 94       	com	r15
    7df6:	f8 01       	movw	r30, r16
    7df8:	c0 82       	st	Z, r12
    7dfa:	d1 82       	std	Z+1, r13	; 0x01
    7dfc:	e2 82       	std	Z+2, r14	; 0x02
    7dfe:	f3 82       	std	Z+3, r15	; 0x03
    7e00:	0c 5f       	subi	r16, 0xFC	; 252
    7e02:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    7e04:	f6 e0       	ldi	r31, 0x06	; 6
    7e06:	0d 32       	cpi	r16, 0x2D	; 45
    7e08:	1f 07       	cpc	r17, r31
    7e0a:	21 f6       	brne	.-120    	; 0x7d94 <imu_update+0xa2>
	
	// Z Acc LPF for long-term zero
	//accVertZerof = ((accVertZerof * (ZACCLPF - 1.0f)) - accVertf) / ZACCLPF; // Heavy filter
		
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    7e0c:	23 ec       	ldi	r18, 0xC3	; 195
    7e0e:	35 ef       	ldi	r19, 0xF5	; 245
    7e10:	48 e2       	ldi	r20, 0x28	; 40
    7e12:	5f e3       	ldi	r21, 0x3F	; 63
    7e14:	60 91 21 06 	lds	r22, 0x0621
    7e18:	70 91 22 06 	lds	r23, 0x0622
    7e1c:	80 91 23 06 	lds	r24, 0x0623
    7e20:	90 91 24 06 	lds	r25, 0x0624
    7e24:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    7e28:	6d 83       	std	Y+5, r22	; 0x05
    7e2a:	7e 83       	std	Y+6, r23	; 0x06
    7e2c:	8f 83       	std	Y+7, r24	; 0x07
    7e2e:	98 87       	std	Y+8, r25	; 0x08
    7e30:	60 93 05 06 	sts	0x0605, r22
    7e34:	70 93 06 06 	sts	0x0606, r23
    7e38:	80 93 07 06 	sts	0x0607, r24
    7e3c:	90 93 08 06 	sts	0x0608, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    7e40:	23 ec       	ldi	r18, 0xC3	; 195
    7e42:	35 ef       	ldi	r19, 0xF5	; 245
    7e44:	48 e2       	ldi	r20, 0x28	; 40
    7e46:	5f e3       	ldi	r21, 0x3F	; 63
    7e48:	60 91 25 06 	lds	r22, 0x0625
    7e4c:	70 91 26 06 	lds	r23, 0x0626
    7e50:	80 91 27 06 	lds	r24, 0x0627
    7e54:	90 91 28 06 	lds	r25, 0x0628
    7e58:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    7e5c:	69 87       	std	Y+9, r22	; 0x09
    7e5e:	7a 87       	std	Y+10, r23	; 0x0a
    7e60:	8b 87       	std	Y+11, r24	; 0x0b
    7e62:	9c 87       	std	Y+12, r25	; 0x0c
    7e64:	60 93 09 06 	sts	0x0609, r22
    7e68:	70 93 0a 06 	sts	0x060A, r23
    7e6c:	80 93 0b 06 	sts	0x060B, r24
    7e70:	90 93 0c 06 	sts	0x060C, r25

	// Alter the gyro sources to the IMU as required.
	// Using gyroADCalt[] always assures that the right gyros are associated with the IMU
	GyroRollVC = gyroADCalt[ROLL];
    7e74:	60 91 ed 05 	lds	r22, 0x05ED
    7e78:	70 91 ee 05 	lds	r23, 0x05EE
    7e7c:	07 2e       	mov	r0, r23
    7e7e:	00 0c       	add	r0, r0
    7e80:	88 0b       	sbc	r24, r24
    7e82:	99 0b       	sbc	r25, r25
    7e84:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    7e88:	2b 01       	movw	r4, r22
    7e8a:	3c 01       	movw	r6, r24
    7e8c:	60 93 11 06 	sts	0x0611, r22
    7e90:	70 93 12 06 	sts	0x0612, r23
    7e94:	80 93 13 06 	sts	0x0613, r24
    7e98:	90 93 14 06 	sts	0x0614, r25
	GyroPitchVC = gyroADCalt[PITCH];
    7e9c:	60 91 ef 05 	lds	r22, 0x05EF
    7ea0:	70 91 f0 05 	lds	r23, 0x05F0
    7ea4:	07 2e       	mov	r0, r23
    7ea6:	00 0c       	add	r0, r0
    7ea8:	88 0b       	sbc	r24, r24
    7eaa:	99 0b       	sbc	r25, r25
    7eac:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    7eb0:	4b 01       	movw	r8, r22
    7eb2:	5c 01       	movw	r10, r24
    7eb4:	60 93 0d 06 	sts	0x060D, r22
    7eb8:	70 93 0e 06 	sts	0x060E, r23
    7ebc:	80 93 0f 06 	sts	0x060F, r24
    7ec0:	90 93 10 06 	sts	0x0610, r25
	GyroYawVC = gyroADCalt[YAW];
    7ec4:	60 91 f1 05 	lds	r22, 0x05F1
    7ec8:	70 91 f2 05 	lds	r23, 0x05F2
    7ecc:	07 2e       	mov	r0, r23
    7ece:	00 0c       	add	r0, r0
    7ed0:	88 0b       	sbc	r24, r24
    7ed2:	99 0b       	sbc	r25, r25
    7ed4:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    7ed8:	60 93 15 06 	sts	0x0615, r22
    7edc:	70 93 16 06 	sts	0x0616, r23
    7ee0:	80 93 17 06 	sts	0x0617, r24
    7ee4:	90 93 18 06 	sts	0x0618, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    7ee8:	e0 91 70 05 	lds	r30, 0x0570
    7eec:	f0 91 71 05 	lds	r31, 0x0571
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    7ef0:	80 91 72 05 	lds	r24, 0x0572
    7ef4:	90 91 73 05 	lds	r25, 0x0573
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    7ef8:	20 91 74 05 	lds	r18, 0x0574
    7efc:	30 91 75 05 	lds	r19, 0x0575
	GyroPitchVC = gyroADCalt[PITCH];
	GyroYawVC = gyroADCalt[YAW];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    7f00:	88 9f       	mul	r24, r24
    7f02:	a0 01       	movw	r20, r0
    7f04:	89 9f       	mul	r24, r25
    7f06:	50 0d       	add	r21, r0
    7f08:	50 0d       	add	r21, r0
    7f0a:	11 24       	eor	r1, r1
    7f0c:	05 2e       	mov	r0, r21
    7f0e:	00 0c       	add	r0, r0
    7f10:	66 0b       	sbc	r22, r22
    7f12:	77 0b       	sbc	r23, r23
	GyroRollVC = gyroADCalt[ROLL];
	GyroPitchVC = gyroADCalt[PITCH];
	GyroYawVC = gyroADCalt[YAW];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    7f14:	ee 9f       	mul	r30, r30
    7f16:	c0 01       	movw	r24, r0
    7f18:	ef 9f       	mul	r30, r31
    7f1a:	90 0d       	add	r25, r0
    7f1c:	90 0d       	add	r25, r0
    7f1e:	11 24       	eor	r1, r1
    7f20:	09 2e       	mov	r0, r25
    7f22:	00 0c       	add	r0, r0
    7f24:	aa 0b       	sbc	r26, r26
    7f26:	bb 0b       	sbc	r27, r27
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    7f28:	48 0f       	add	r20, r24
    7f2a:	59 1f       	adc	r21, r25
    7f2c:	6a 1f       	adc	r22, r26
    7f2e:	7b 1f       	adc	r23, r27
	GyroYawVC = gyroADCalt[YAW];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    7f30:	22 9f       	mul	r18, r18
    7f32:	c0 01       	movw	r24, r0
    7f34:	23 9f       	mul	r18, r19
    7f36:	90 0d       	add	r25, r0
    7f38:	90 0d       	add	r25, r0
    7f3a:	11 24       	eor	r1, r1
    7f3c:	09 2e       	mov	r0, r25
    7f3e:	00 0c       	add	r0, r0
    7f40:	aa 0b       	sbc	r26, r26
    7f42:	bb 0b       	sbc	r27, r27
	AccMag = roll_sq + pitch_sq + yaw_sq;
    7f44:	8a 01       	movw	r16, r20
    7f46:	9b 01       	movw	r18, r22
    7f48:	08 0f       	add	r16, r24
    7f4a:	19 1f       	adc	r17, r25
    7f4c:	2a 1f       	adc	r18, r26
    7f4e:	3b 1f       	adc	r19, r27
    7f50:	c9 01       	movw	r24, r18
    7f52:	b8 01       	movw	r22, r16
	// NB: new dual autolevel code needs acc correction at least temporarily when switching profiles.
	// This is actually a kind of Complementary Filter
	//if ((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5)) // Original code
	
	// New test code - only adjust when in acc mag limits and when upright or dual AL code
	if	(((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5) && (Config.P1_Reference == NO_ORIENT)) || // Same as always when "Same" 
    7f54:	0e 94 3b 6e 	call	0xdc76	; 0xdc76 <__floatunsisf>
    7f58:	6b 01       	movw	r12, r22
    7f5a:	7c 01       	movw	r14, r24
    7f5c:	20 e0       	ldi	r18, 0x00	; 0
    7f5e:	34 ef       	ldi	r19, 0xF4	; 244
    7f60:	48 e3       	ldi	r20, 0x38	; 56
    7f62:	56 e4       	ldi	r21, 0x46	; 70
    7f64:	0e 94 ed 6e 	call	0xddda	; 0xddda <__gesf2>
    7f68:	18 16       	cp	r1, r24
    7f6a:	f4 f4       	brge	.+60     	; 0x7fa8 <imu_update+0x2b6>
    7f6c:	20 e0       	ldi	r18, 0x00	; 0
    7f6e:	38 e4       	ldi	r19, 0x48	; 72
    7f70:	49 ea       	ldi	r20, 0xA9	; 169
    7f72:	56 e4       	ldi	r21, 0x46	; 70
    7f74:	c7 01       	movw	r24, r14
    7f76:	b6 01       	movw	r22, r12
    7f78:	0e 94 8e 6d 	call	0xdb1c	; 0xdb1c <__cmpsf2>
    7f7c:	87 ff       	sbrs	r24, 7
    7f7e:	14 c0       	rjmp	.+40     	; 0x7fa8 <imu_update+0x2b6>
    7f80:	20 e0       	ldi	r18, 0x00	; 0
    7f82:	30 e0       	ldi	r19, 0x00	; 0
    7f84:	40 e0       	ldi	r20, 0x00	; 0
    7f86:	5f e3       	ldi	r21, 0x3F	; 63
    7f88:	60 91 00 05 	lds	r22, 0x0500
    7f8c:	70 91 01 05 	lds	r23, 0x0501
    7f90:	80 91 02 05 	lds	r24, 0x0502
    7f94:	90 91 03 05 	lds	r25, 0x0503
    7f98:	0e 94 ed 6e 	call	0xddda	; 0xddda <__gesf2>
    7f9c:	18 16       	cp	r1, r24
    7f9e:	24 f4       	brge	.+8      	; 0x7fa8 <imu_update+0x2b6>
    7fa0:	80 91 d9 06 	lds	r24, 0x06D9
    7fa4:	88 23       	and	r24, r24
    7fa6:	d1 f0       	breq	.+52     	; 0x7fdc <imu_update+0x2ea>
    7fa8:	20 e0       	ldi	r18, 0x00	; 0
    7faa:	30 ed       	ldi	r19, 0xD0	; 208
    7fac:	43 e2       	ldi	r20, 0x23	; 35
    7fae:	55 e4       	ldi	r21, 0x45	; 69
    7fb0:	c7 01       	movw	r24, r14
    7fb2:	b6 01       	movw	r22, r12
    7fb4:	0e 94 ed 6e 	call	0xddda	; 0xddda <__gesf2>
    7fb8:	18 16       	cp	r1, r24
    7fba:	0c f0       	brlt	.+2      	; 0x7fbe <imu_update+0x2cc>
    7fbc:	6f c0       	rjmp	.+222    	; 0x809c <imu_update+0x3aa>
		 ((AccMag > acc_0_4G_SQ) && (AccMag < acc_1_6G_SQ) && (Config.P1_Reference != NO_ORIENT))) 
    7fbe:	20 e0       	ldi	r18, 0x00	; 0
    7fc0:	37 ed       	ldi	r19, 0xD7	; 215
    7fc2:	43 e2       	ldi	r20, 0x23	; 35
    7fc4:	57 e4       	ldi	r21, 0x47	; 71
    7fc6:	c7 01       	movw	r24, r14
    7fc8:	b6 01       	movw	r22, r12
    7fca:	0e 94 8e 6d 	call	0xdb1c	; 0xdb1c <__cmpsf2>
    7fce:	87 ff       	sbrs	r24, 7
    7fd0:	65 c0       	rjmp	.+202    	; 0x809c <imu_update+0x3aa>
    7fd2:	80 91 d9 06 	lds	r24, 0x06D9
    7fd6:	88 23       	and	r24, r24
    7fd8:	09 f4       	brne	.+2      	; 0x7fdc <imu_update+0x2ea>
    7fda:	60 c0       	rjmp	.+192    	; 0x809c <imu_update+0x3aa>
	{
		// Default Config.CF_factor is 6 (1 - 10 = 10% to 100%, 6 = 60%)
		tempf = (EulerAngleRoll - AccAngleRoll) / 10;
		tempf = tempf * (12 - Config.CF_factor); 
    7fdc:	80 91 e1 06 	lds	r24, 0x06E1
    7fe0:	6c e0       	ldi	r22, 0x0C	; 12
    7fe2:	70 e0       	ldi	r23, 0x00	; 0
    7fe4:	68 1b       	sub	r22, r24
    7fe6:	71 09       	sbc	r23, r1
    7fe8:	87 fd       	sbrc	r24, 7
    7fea:	73 95       	inc	r23
    7fec:	07 2e       	mov	r0, r23
    7fee:	00 0c       	add	r0, r0
    7ff0:	88 0b       	sbc	r24, r24
    7ff2:	99 0b       	sbc	r25, r25
    7ff4:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    7ff8:	6b 01       	movw	r12, r22
    7ffa:	7c 01       	movw	r14, r24
	// New test code - only adjust when in acc mag limits and when upright or dual AL code
	if	(((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5) && (Config.P1_Reference == NO_ORIENT)) || // Same as always when "Same" 
		 ((AccMag > acc_0_4G_SQ) && (AccMag < acc_1_6G_SQ) && (Config.P1_Reference != NO_ORIENT))) 
	{
		// Default Config.CF_factor is 6 (1 - 10 = 10% to 100%, 6 = 60%)
		tempf = (EulerAngleRoll - AccAngleRoll) / 10;
    7ffc:	2d 81       	ldd	r18, Y+5	; 0x05
    7ffe:	3e 81       	ldd	r19, Y+6	; 0x06
    8000:	4f 81       	ldd	r20, Y+7	; 0x07
    8002:	58 85       	ldd	r21, Y+8	; 0x08
    8004:	60 91 2d 06 	lds	r22, 0x062D
    8008:	70 91 2e 06 	lds	r23, 0x062E
    800c:	80 91 2f 06 	lds	r24, 0x062F
    8010:	90 91 30 06 	lds	r25, 0x0630
    8014:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    8018:	20 e0       	ldi	r18, 0x00	; 0
    801a:	30 e0       	ldi	r19, 0x00	; 0
    801c:	40 e2       	ldi	r20, 0x20	; 32
    801e:	51 e4       	ldi	r21, 0x41	; 65
    8020:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
		tempf = tempf * (12 - Config.CF_factor); 
    8024:	a7 01       	movw	r20, r14
    8026:	96 01       	movw	r18, r12
    8028:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    802c:	9b 01       	movw	r18, r22
    802e:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    8030:	c3 01       	movw	r24, r6
    8032:	b2 01       	movw	r22, r4
    8034:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    8038:	60 93 11 06 	sts	0x0611, r22
    803c:	70 93 12 06 	sts	0x0612, r23
    8040:	80 93 13 06 	sts	0x0613, r24
    8044:	90 93 14 06 	sts	0x0614, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) / 10;
    8048:	29 85       	ldd	r18, Y+9	; 0x09
    804a:	3a 85       	ldd	r19, Y+10	; 0x0a
    804c:	4b 85       	ldd	r20, Y+11	; 0x0b
    804e:	5c 85       	ldd	r21, Y+12	; 0x0c
    8050:	60 91 01 06 	lds	r22, 0x0601
    8054:	70 91 02 06 	lds	r23, 0x0602
    8058:	80 91 03 06 	lds	r24, 0x0603
    805c:	90 91 04 06 	lds	r25, 0x0604
    8060:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    8064:	20 e0       	ldi	r18, 0x00	; 0
    8066:	30 e0       	ldi	r19, 0x00	; 0
    8068:	40 e2       	ldi	r20, 0x20	; 32
    806a:	51 e4       	ldi	r21, 0x41	; 65
    806c:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
		tempf = tempf * (12 - Config.CF_factor);
    8070:	a7 01       	movw	r20, r14
    8072:	96 01       	movw	r18, r12
    8074:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    8078:	9b 01       	movw	r18, r22
    807a:	ac 01       	movw	r20, r24
    807c:	69 83       	std	Y+1, r22	; 0x01
    807e:	7a 83       	std	Y+2, r23	; 0x02
    8080:	8b 83       	std	Y+3, r24	; 0x03
    8082:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    8084:	c5 01       	movw	r24, r10
    8086:	b4 01       	movw	r22, r8
    8088:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    808c:	60 93 0d 06 	sts	0x060D, r22
    8090:	70 93 0e 06 	sts	0x060E, r23
    8094:	80 93 0f 06 	sts	0x060F, r24
    8098:	90 93 10 06 	sts	0x0610, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    809c:	60 91 fd 05 	lds	r22, 0x05FD
    80a0:	70 91 fe 05 	lds	r23, 0x05FE
    80a4:	80 91 ff 05 	lds	r24, 0x05FF
    80a8:	90 91 00 06 	lds	r25, 0x0600
    80ac:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <Rotate3dVector>
	ExtractEulerAngles();
    80b0:	0e 94 54 3e 	call	0x7ca8	; 0x7ca8 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    80b4:	20 e0       	ldi	r18, 0x00	; 0
    80b6:	30 e0       	ldi	r19, 0x00	; 0
    80b8:	48 ec       	ldi	r20, 0xC8	; 200
    80ba:	52 ec       	ldi	r21, 0xC2	; 194
    80bc:	60 91 2d 06 	lds	r22, 0x062D
    80c0:	70 91 2e 06 	lds	r23, 0x062E
    80c4:	80 91 2f 06 	lds	r24, 0x062F
    80c8:	90 91 30 06 	lds	r25, 0x0630
    80cc:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    80d0:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    80d4:	70 93 1a 06 	sts	0x061A, r23
    80d8:	60 93 19 06 	sts	0x0619, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    80dc:	20 e0       	ldi	r18, 0x00	; 0
    80de:	30 e0       	ldi	r19, 0x00	; 0
    80e0:	48 ec       	ldi	r20, 0xC8	; 200
    80e2:	52 ec       	ldi	r21, 0xC2	; 194
    80e4:	60 91 01 06 	lds	r22, 0x0601
    80e8:	70 91 02 06 	lds	r23, 0x0602
    80ec:	80 91 03 06 	lds	r24, 0x0603
    80f0:	90 91 04 06 	lds	r25, 0x0604
    80f4:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    80f8:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    80fc:	70 93 1c 06 	sts	0x061C, r23
    8100:	60 93 1b 06 	sts	0x061B, r22
}
    8104:	2c 96       	adiw	r28, 0x0c	; 12
    8106:	0f b6       	in	r0, 0x3f	; 63
    8108:	f8 94       	cli
    810a:	de bf       	out	0x3e, r29	; 62
    810c:	0f be       	out	0x3f, r0	; 63
    810e:	cd bf       	out	0x3d, r28	; 61
    8110:	df 91       	pop	r29
    8112:	cf 91       	pop	r28
    8114:	1f 91       	pop	r17
    8116:	0f 91       	pop	r16
    8118:	ff 90       	pop	r15
    811a:	ef 90       	pop	r14
    811c:	df 90       	pop	r13
    811e:	cf 90       	pop	r12
    8120:	bf 90       	pop	r11
    8122:	af 90       	pop	r10
    8124:	9f 90       	pop	r9
    8126:	8f 90       	pop	r8
    8128:	7f 90       	pop	r7
    812a:	6f 90       	pop	r6
    812c:	5f 90       	pop	r5
    812e:	4f 90       	pop	r4
    8130:	08 95       	ret

00008132 <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    8132:	10 92 42 05 	sts	0x0542, r1
    8136:	10 92 43 05 	sts	0x0543, r1
    813a:	10 92 44 05 	sts	0x0544, r1
    813e:	10 92 45 05 	sts	0x0545, r1
	VectorY = 0;
    8142:	10 92 3e 05 	sts	0x053E, r1
    8146:	10 92 3f 05 	sts	0x053F, r1
    814a:	10 92 40 05 	sts	0x0540, r1
    814e:	10 92 41 05 	sts	0x0541, r1
	VectorZ = 1;
    8152:	80 e0       	ldi	r24, 0x00	; 0
    8154:	90 e0       	ldi	r25, 0x00	; 0
    8156:	a0 e8       	ldi	r26, 0x80	; 128
    8158:	bf e3       	ldi	r27, 0x3F	; 63
    815a:	80 93 00 05 	sts	0x0500, r24
    815e:	90 93 01 05 	sts	0x0501, r25
    8162:	a0 93 02 05 	sts	0x0502, r26
    8166:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    816a:	10 92 31 06 	sts	0x0631, r1
    816e:	10 92 32 06 	sts	0x0632, r1
    8172:	10 92 33 06 	sts	0x0633, r1
    8176:	10 92 34 06 	sts	0x0634, r1
	VectorB = 0;
    817a:	10 92 35 06 	sts	0x0635, r1
    817e:	10 92 36 06 	sts	0x0636, r1
    8182:	10 92 37 06 	sts	0x0637, r1
    8186:	10 92 38 06 	sts	0x0638, r1
	EulerAngleRoll = 0;
    818a:	10 92 2d 06 	sts	0x062D, r1
    818e:	10 92 2e 06 	sts	0x062E, r1
    8192:	10 92 2f 06 	sts	0x062F, r1
    8196:	10 92 30 06 	sts	0x0630, r1
	EulerAnglePitch = 0;
    819a:	10 92 01 06 	sts	0x0601, r1
    819e:	10 92 02 06 	sts	0x0602, r1
    81a2:	10 92 03 06 	sts	0x0603, r1
    81a6:	10 92 04 06 	sts	0x0604, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    81aa:	10 92 02 09 	sts	0x0902, r1
    81ae:	10 92 01 09 	sts	0x0901, r1
	TCNT1 = 0;			// TCNT1 current time
    81b2:	10 92 85 00 	sts	0x0085, r1
    81b6:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    81ba:	10 92 30 05 	sts	0x0530, r1
    81be:	10 92 2f 05 	sts	0x052F, r1
    81c2:	08 95       	ret

000081c4 <init>:
    81c4:	1f 93       	push	r17
    81c6:	cf 93       	push	r28
    81c8:	df 93       	push	r29
    81ca:	80 e3       	ldi	r24, 0x30	; 48
    81cc:	81 b9       	out	0x01, r24	; 1
    81ce:	8a e0       	ldi	r24, 0x0A	; 10
    81d0:	84 b9       	out	0x04, r24	; 4
    81d2:	8c ef       	ldi	r24, 0xFC	; 252
    81d4:	87 b9       	out	0x07, r24	; 7
    81d6:	82 ef       	ldi	r24, 0xF2	; 242
    81d8:	8a b9       	out	0x0a, r24	; 10
    81da:	18 b8       	out	0x08, r1	; 8
    81dc:	14 98       	cbi	0x02, 4	; 2
    81de:	15 98       	cbi	0x02, 5	; 2
    81e0:	2b 98       	cbi	0x05, 3	; 5
    81e2:	29 98       	cbi	0x05, 1	; 5
    81e4:	5c 9a       	sbi	0x0b, 4	; 11
    81e6:	85 ef       	ldi	r24, 0xF5	; 245
    81e8:	83 b9       	out	0x03, r24	; 3
    81ea:	8c e0       	ldi	r24, 0x0C	; 12
    81ec:	89 b9       	out	0x09, r24	; 9
    81ee:	89 b9       	out	0x09, r24	; 9
    81f0:	2f e5       	ldi	r18, 0x5F	; 95
    81f2:	88 ed       	ldi	r24, 0xD8	; 216
    81f4:	93 e0       	ldi	r25, 0x03	; 3
    81f6:	21 50       	subi	r18, 0x01	; 1
    81f8:	80 40       	sbci	r24, 0x00	; 0
    81fa:	90 40       	sbci	r25, 0x00	; 0
    81fc:	e1 f7       	brne	.-8      	; 0x81f6 <init+0x32>
    81fe:	00 c0       	rjmp	.+0      	; 0x8200 <init+0x3c>
    8200:	00 00       	nop
    8202:	83 b1       	in	r24, 0x03	; 3
    8204:	80 7f       	andi	r24, 0xF0	; 240
    8206:	80 37       	cpi	r24, 0x70	; 112
    8208:	29 f4       	brne	.+10     	; 0x8214 <init+0x50>
    820a:	83 ef       	ldi	r24, 0xF3	; 243
    820c:	8a b9       	out	0x0a, r24	; 10
    820e:	83 e0       	ldi	r24, 0x03	; 3
    8210:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <bind_master>
    8214:	83 b1       	in	r24, 0x03	; 3
    8216:	80 7f       	andi	r24, 0xF0	; 240
    8218:	80 3b       	cpi	r24, 0xB0	; 176
    821a:	29 f4       	brne	.+10     	; 0x8226 <init+0x62>
    821c:	83 ef       	ldi	r24, 0xF3	; 243
    821e:	8a b9       	out	0x0a, r24	; 10
    8220:	85 e0       	ldi	r24, 0x05	; 5
    8222:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <bind_master>
    8226:	83 b1       	in	r24, 0x03	; 3
    8228:	80 7f       	andi	r24, 0xF0	; 240
    822a:	80 3d       	cpi	r24, 0xD0	; 208
    822c:	29 f4       	brne	.+10     	; 0x8238 <init+0x74>
    822e:	83 ef       	ldi	r24, 0xF3	; 243
    8230:	8a b9       	out	0x0a, r24	; 10
    8232:	87 e0       	ldi	r24, 0x07	; 7
    8234:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <bind_master>
    8238:	83 b1       	in	r24, 0x03	; 3
    823a:	80 7f       	andi	r24, 0xF0	; 240
    823c:	80 3e       	cpi	r24, 0xE0	; 224
    823e:	29 f4       	brne	.+10     	; 0x824a <init+0x86>
    8240:	83 ef       	ldi	r24, 0xF3	; 243
    8242:	8a b9       	out	0x0a, r24	; 10
    8244:	89 e0       	ldi	r24, 0x09	; 9
    8246:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <bind_master>
    824a:	82 ef       	ldi	r24, 0xF2	; 242
    824c:	8a b9       	out	0x0a, r24	; 10
    824e:	8d e0       	ldi	r24, 0x0D	; 13
    8250:	89 b9       	out	0x09, r24	; 9
    8252:	14 bc       	out	0x24, r1	; 36
    8254:	85 e0       	ldi	r24, 0x05	; 5
    8256:	85 bd       	out	0x25, r24	; 37
    8258:	80 91 6e 00 	lds	r24, 0x006E
    825c:	81 60       	ori	r24, 0x01	; 1
    825e:	80 93 6e 00 	sts	0x006E, r24
    8262:	16 bc       	out	0x26, r1	; 38
    8264:	10 92 80 00 	sts	0x0080, r1
    8268:	80 91 81 00 	lds	r24, 0x0081
    826c:	82 60       	ori	r24, 0x02	; 2
    826e:	80 93 81 00 	sts	0x0081, r24
    8272:	10 92 b0 00 	sts	0x00B0, r1
    8276:	87 e0       	ldi	r24, 0x07	; 7
    8278:	80 93 b1 00 	sts	0x00B1, r24
    827c:	10 92 70 00 	sts	0x0070, r1
    8280:	17 ba       	out	0x17, r1	; 23
    8282:	10 92 b2 00 	sts	0x00B2, r1
    8286:	9a e0       	ldi	r25, 0x0A	; 10
    8288:	90 93 68 00 	sts	0x0068, r25
    828c:	9f e0       	ldi	r25, 0x0F	; 15
    828e:	9b bb       	out	0x1b, r25	; 27
    8290:	95 e1       	ldi	r25, 0x15	; 21
    8292:	90 93 69 00 	sts	0x0069, r25
    8296:	8c bb       	out	0x1c, r24	; 28
    8298:	10 92 ee 08 	sts	0x08EE, r1
    829c:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <Initial_EEPROM_Config_Load>
    82a0:	c8 2f       	mov	r28, r24
    82a2:	20 e0       	ldi	r18, 0x00	; 0
    82a4:	30 e0       	ldi	r19, 0x00	; 0
    82a6:	86 ea       	ldi	r24, 0xA6	; 166
    82a8:	9e e0       	ldi	r25, 0x0E	; 14
    82aa:	f9 01       	movw	r30, r18
    82ac:	ee 0f       	add	r30, r30
    82ae:	ff 1f       	adc	r31, r31
    82b0:	e2 52       	subi	r30, 0x22	; 34
    82b2:	f7 4f       	sbci	r31, 0xF7	; 247
    82b4:	91 83       	std	Z+1, r25	; 0x01
    82b6:	80 83       	st	Z, r24
    82b8:	2f 5f       	subi	r18, 0xFF	; 255
    82ba:	3f 4f       	sbci	r19, 0xFF	; 255
    82bc:	28 30       	cpi	r18, 0x08	; 8
    82be:	31 05       	cpc	r19, r1
    82c0:	a1 f7       	brne	.-24     	; 0x82aa <init+0xe6>
    82c2:	84 ec       	ldi	r24, 0xC4	; 196
    82c4:	99 e0       	ldi	r25, 0x09	; 9
    82c6:	90 93 df 08 	sts	0x08DF, r25
    82ca:	80 93 de 08 	sts	0x08DE, r24
    82ce:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <st7565_init>
    82d2:	0e 94 b9 36 	call	0x6d72	; 0x6d72 <clear_screen>
    82d6:	1f 99       	sbic	0x03, 7	; 3
    82d8:	72 c0       	rjmp	.+228    	; 0x83be <init+0x1fa>
    82da:	1c 99       	sbic	0x03, 4	; 3
    82dc:	70 c0       	rjmp	.+224    	; 0x83be <init+0x1fa>
    82de:	80 ec       	ldi	r24, 0xC0	; 192
    82e0:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
    82e4:	80 e0       	ldi	r24, 0x00	; 0
    82e6:	91 e0       	ldi	r25, 0x01	; 1
    82e8:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    82ec:	29 e1       	ldi	r18, 0x19	; 25
    82ee:	30 e0       	ldi	r19, 0x00	; 0
    82f0:	4a e0       	ldi	r20, 0x0A	; 10
    82f2:	50 e0       	ldi	r21, 0x00	; 0
    82f4:	6f ed       	ldi	r22, 0xDF	; 223
    82f6:	74 e0       	ldi	r23, 0x04	; 4
    82f8:	8b e3       	ldi	r24, 0x3B	; 59
    82fa:	90 e0       	ldi	r25, 0x00	; 0
    82fc:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    8300:	80 e0       	ldi	r24, 0x00	; 0
    8302:	91 e0       	ldi	r25, 0x01	; 1
    8304:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
    8308:	80 e0       	ldi	r24, 0x00	; 0
    830a:	91 e0       	ldi	r25, 0x01	; 1
    830c:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    8310:	c8 ee       	ldi	r28, 0xE8	; 232
    8312:	d6 e0       	ldi	r29, 0x06	; 6
    8314:	fe 01       	movw	r30, r28
    8316:	20 e0       	ldi	r18, 0x00	; 0
    8318:	30 e0       	ldi	r19, 0x00	; 0
    831a:	4c ed       	ldi	r20, 0xDC	; 220
    831c:	55 e0       	ldi	r21, 0x05	; 5
    831e:	6c e6       	ldi	r22, 0x6C	; 108
    8320:	77 e0       	ldi	r23, 0x07	; 7
    8322:	a0 81       	ld	r26, Z
    8324:	c9 01       	movw	r24, r18
    8326:	88 0f       	add	r24, r24
    8328:	99 1f       	adc	r25, r25
    832a:	a2 30       	cpi	r26, 0x02	; 2
    832c:	39 f4       	brne	.+14     	; 0x833c <init+0x178>
    832e:	dc 01       	movw	r26, r24
    8330:	ab 56       	subi	r26, 0x6B	; 107
    8332:	b6 4f       	sbci	r27, 0xF6	; 246
    8334:	11 96       	adiw	r26, 0x01	; 1
    8336:	7c 93       	st	X, r23
    8338:	6e 93       	st	-X, r22
    833a:	06 c0       	rjmp	.+12     	; 0x8348 <init+0x184>
    833c:	dc 01       	movw	r26, r24
    833e:	ab 56       	subi	r26, 0x6B	; 107
    8340:	b6 4f       	sbci	r27, 0xF6	; 246
    8342:	11 96       	adiw	r26, 0x01	; 1
    8344:	5c 93       	st	X, r21
    8346:	4e 93       	st	-X, r20
    8348:	2f 5f       	subi	r18, 0xFF	; 255
    834a:	3f 4f       	sbci	r19, 0xFF	; 255
    834c:	b2 96       	adiw	r30, 0x22	; 34
    834e:	28 30       	cpi	r18, 0x08	; 8
    8350:	31 05       	cpc	r19, r1
    8352:	39 f7       	brne	.-50     	; 0x8322 <init+0x15e>
    8354:	83 b1       	in	r24, 0x03	; 3
    8356:	80 7f       	andi	r24, 0xF0	; 240
    8358:	80 36       	cpi	r24, 0x60	; 96
    835a:	79 f4       	brne	.+30     	; 0x837a <init+0x1b6>
    835c:	6f ef       	ldi	r22, 0xFF	; 255
    835e:	85 e9       	ldi	r24, 0x95	; 149
    8360:	99 e0       	ldi	r25, 0x09	; 9
    8362:	0e 94 23 16 	call	0x2c46	; 0x2c46 <output_servo_ppm_asm>
    8366:	2f e7       	ldi	r18, 0x7F	; 127
    8368:	88 e3       	ldi	r24, 0x38	; 56
    836a:	91 e0       	ldi	r25, 0x01	; 1
    836c:	21 50       	subi	r18, 0x01	; 1
    836e:	80 40       	sbci	r24, 0x00	; 0
    8370:	90 40       	sbci	r25, 0x00	; 0
    8372:	e1 f7       	brne	.-8      	; 0x836c <init+0x1a8>
    8374:	00 c0       	rjmp	.+0      	; 0x8376 <init+0x1b2>
    8376:	00 00       	nop
    8378:	ed cf       	rjmp	.-38     	; 0x8354 <init+0x190>
    837a:	80 e0       	ldi	r24, 0x00	; 0
    837c:	90 e0       	ldi	r25, 0x00	; 0
    837e:	2c e4       	ldi	r18, 0x4C	; 76
    8380:	34 e0       	ldi	r19, 0x04	; 4
    8382:	48 81       	ld	r20, Y
    8384:	42 30       	cpi	r20, 0x02	; 2
    8386:	39 f4       	brne	.+14     	; 0x8396 <init+0x1d2>
    8388:	fc 01       	movw	r30, r24
    838a:	ee 0f       	add	r30, r30
    838c:	ff 1f       	adc	r31, r31
    838e:	eb 56       	subi	r30, 0x6B	; 107
    8390:	f6 4f       	sbci	r31, 0xF6	; 246
    8392:	31 83       	std	Z+1, r19	; 0x01
    8394:	20 83       	st	Z, r18
    8396:	01 96       	adiw	r24, 0x01	; 1
    8398:	a2 96       	adiw	r28, 0x22	; 34
    839a:	88 30       	cpi	r24, 0x08	; 8
    839c:	91 05       	cpc	r25, r1
    839e:	89 f7       	brne	.-30     	; 0x8382 <init+0x1be>
    83a0:	6f ef       	ldi	r22, 0xFF	; 255
    83a2:	85 e9       	ldi	r24, 0x95	; 149
    83a4:	99 e0       	ldi	r25, 0x09	; 9
    83a6:	0e 94 23 16 	call	0x2c46	; 0x2c46 <output_servo_ppm_asm>
    83aa:	2f e7       	ldi	r18, 0x7F	; 127
    83ac:	88 e3       	ldi	r24, 0x38	; 56
    83ae:	91 e0       	ldi	r25, 0x01	; 1
    83b0:	21 50       	subi	r18, 0x01	; 1
    83b2:	80 40       	sbci	r24, 0x00	; 0
    83b4:	90 40       	sbci	r25, 0x00	; 0
    83b6:	e1 f7       	brne	.-8      	; 0x83b0 <init+0x1ec>
    83b8:	00 c0       	rjmp	.+0      	; 0x83ba <init+0x1f6>
    83ba:	00 00       	nop
    83bc:	f1 cf       	rjmp	.-30     	; 0x83a0 <init+0x1dc>
    83be:	2f e7       	ldi	r18, 0x7F	; 127
    83c0:	8f e4       	ldi	r24, 0x4F	; 79
    83c2:	92 e1       	ldi	r25, 0x12	; 18
    83c4:	21 50       	subi	r18, 0x01	; 1
    83c6:	80 40       	sbci	r24, 0x00	; 0
    83c8:	90 40       	sbci	r25, 0x00	; 0
    83ca:	e1 f7       	brne	.-8      	; 0x83c4 <init+0x200>
    83cc:	00 c0       	rjmp	.+0      	; 0x83ce <init+0x20a>
    83ce:	00 00       	nop
    83d0:	1e 99       	sbic	0x03, 6	; 3
    83d2:	2c c0       	rjmp	.+88     	; 0x842c <init+0x268>
    83d4:	1d 99       	sbic	0x03, 5	; 3
    83d6:	2a c0       	rjmp	.+84     	; 0x842c <init+0x268>
    83d8:	80 ec       	ldi	r24, 0xC0	; 192
    83da:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
    83de:	80 e0       	ldi	r24, 0x00	; 0
    83e0:	91 e0       	ldi	r25, 0x01	; 1
    83e2:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    83e6:	29 e1       	ldi	r18, 0x19	; 25
    83e8:	30 e0       	ldi	r19, 0x00	; 0
    83ea:	48 e2       	ldi	r20, 0x28	; 40
    83ec:	50 e0       	ldi	r21, 0x00	; 0
    83ee:	6f ed       	ldi	r22, 0xDF	; 223
    83f0:	74 e0       	ldi	r23, 0x04	; 4
    83f2:	86 e0       	ldi	r24, 0x06	; 6
    83f4:	91 e0       	ldi	r25, 0x01	; 1
    83f6:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    83fa:	80 e0       	ldi	r24, 0x00	; 0
    83fc:	91 e0       	ldi	r25, 0x01	; 1
    83fe:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
    8402:	80 e0       	ldi	r24, 0x00	; 0
    8404:	91 e0       	ldi	r25, 0x01	; 1
    8406:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    840a:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <Set_EEPROM_Default_Config>
    840e:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
    8412:	80 91 da 06 	lds	r24, 0x06DA
    8416:	0e 94 53 36 	call	0x6ca6	; 0x6ca6 <st7565_set_brightness>
    841a:	2f e7       	ldi	r18, 0x7F	; 127
    841c:	84 e8       	ldi	r24, 0x84	; 132
    841e:	9e e1       	ldi	r25, 0x1E	; 30
    8420:	21 50       	subi	r18, 0x01	; 1
    8422:	80 40       	sbci	r24, 0x00	; 0
    8424:	90 40       	sbci	r25, 0x00	; 0
    8426:	e1 f7       	brne	.-8      	; 0x8420 <init+0x25c>
    8428:	00 c0       	rjmp	.+0      	; 0x842a <init+0x266>
    842a:	00 00       	nop
    842c:	cc 23       	and	r28, r28
    842e:	21 f1       	breq	.+72     	; 0x8478 <init+0x2b4>
    8430:	80 ec       	ldi	r24, 0xC0	; 192
    8432:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
    8436:	80 e0       	ldi	r24, 0x00	; 0
    8438:	91 e0       	ldi	r25, 0x01	; 1
    843a:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    843e:	2d e0       	ldi	r18, 0x0D	; 13
    8440:	30 e0       	ldi	r19, 0x00	; 0
    8442:	4e e1       	ldi	r20, 0x1E	; 30
    8444:	50 e0       	ldi	r21, 0x00	; 0
    8446:	6f ed       	ldi	r22, 0xDF	; 223
    8448:	74 e0       	ldi	r23, 0x04	; 4
    844a:	83 e0       	ldi	r24, 0x03	; 3
    844c:	91 e0       	ldi	r25, 0x01	; 1
    844e:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    8452:	25 e2       	ldi	r18, 0x25	; 37
    8454:	30 e0       	ldi	r19, 0x00	; 0
    8456:	41 e2       	ldi	r20, 0x21	; 33
    8458:	50 e0       	ldi	r21, 0x00	; 0
    845a:	6f ed       	ldi	r22, 0xDF	; 223
    845c:	74 e0       	ldi	r23, 0x04	; 4
    845e:	84 e0       	ldi	r24, 0x04	; 4
    8460:	91 e0       	ldi	r25, 0x01	; 1
    8462:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    8466:	80 e0       	ldi	r24, 0x00	; 0
    8468:	91 e0       	ldi	r25, 0x01	; 1
    846a:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
    846e:	80 e0       	ldi	r24, 0x00	; 0
    8470:	91 e0       	ldi	r25, 0x01	; 1
    8472:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    8476:	04 c0       	rjmp	.+8      	; 0x8480 <init+0x2bc>
    8478:	80 e0       	ldi	r24, 0x00	; 0
    847a:	91 e0       	ldi	r25, 0x01	; 1
    847c:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
    8480:	2f ef       	ldi	r18, 0xFF	; 255
    8482:	88 e0       	ldi	r24, 0x08	; 8
    8484:	9d e3       	ldi	r25, 0x3D	; 61
    8486:	21 50       	subi	r18, 0x01	; 1
    8488:	80 40       	sbci	r24, 0x00	; 0
    848a:	90 40       	sbci	r25, 0x00	; 0
    848c:	e1 f7       	brne	.-8      	; 0x8486 <init+0x2c2>
    848e:	00 c0       	rjmp	.+0      	; 0x8490 <init+0x2cc>
    8490:	00 00       	nop
    8492:	80 e0       	ldi	r24, 0x00	; 0
    8494:	91 e0       	ldi	r25, 0x01	; 1
    8496:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    849a:	80 e0       	ldi	r24, 0x00	; 0
    849c:	91 e0       	ldi	r25, 0x01	; 1
    849e:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
    84a2:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <st7565_init>
    84a6:	0e 94 9c 6b 	call	0xd738	; 0xd738 <i2c_init>
    84aa:	0e 94 eb 3b 	call	0x77d6	; 0x77d6 <init_i2c_gyros>
    84ae:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <init_i2c_accs>
    84b2:	80 e0       	ldi	r24, 0x00	; 0
    84b4:	91 e0       	ldi	r25, 0x01	; 1
    84b6:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    84ba:	80 ec       	ldi	r24, 0xC0	; 192
    84bc:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <st7565_command>
    84c0:	29 e1       	ldi	r18, 0x19	; 25
    84c2:	30 e0       	ldi	r19, 0x00	; 0
    84c4:	42 e1       	ldi	r20, 0x12	; 18
    84c6:	50 e0       	ldi	r21, 0x00	; 0
    84c8:	6f ed       	ldi	r22, 0xDF	; 223
    84ca:	74 e0       	ldi	r23, 0x04	; 4
    84cc:	87 e0       	ldi	r24, 0x07	; 7
    84ce:	91 e0       	ldi	r25, 0x01	; 1
    84d0:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    84d4:	80 e0       	ldi	r24, 0x00	; 0
    84d6:	91 e0       	ldi	r25, 0x01	; 1
    84d8:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
    84dc:	80 e0       	ldi	r24, 0x00	; 0
    84de:	91 e0       	ldi	r25, 0x01	; 1
    84e0:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    84e4:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <Init_ADC>
    84e8:	0e 94 93 48 	call	0x9126	; 0x9126 <init_int>
    84ec:	0e 94 81 6c 	call	0xd902	; 0xd902 <init_uart>
    84f0:	0e 94 0c 3b 	call	0x7618	; 0x7618 <CalibrateGyrosSlow>
    84f4:	81 11       	cpse	r24, r1
    84f6:	27 c0       	rjmp	.+78     	; 0x8546 <init+0x382>
    84f8:	80 e0       	ldi	r24, 0x00	; 0
    84fa:	91 e0       	ldi	r25, 0x01	; 1
    84fc:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
    8500:	29 e1       	ldi	r18, 0x19	; 25
    8502:	30 e0       	ldi	r19, 0x00	; 0
    8504:	49 e1       	ldi	r20, 0x19	; 25
    8506:	50 e0       	ldi	r21, 0x00	; 0
    8508:	6f ed       	ldi	r22, 0xDF	; 223
    850a:	74 e0       	ldi	r23, 0x04	; 4
    850c:	8d e3       	ldi	r24, 0x3D	; 61
    850e:	90 e0       	ldi	r25, 0x00	; 0
    8510:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    8514:	80 e0       	ldi	r24, 0x00	; 0
    8516:	91 e0       	ldi	r25, 0x01	; 1
    8518:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
    851c:	2f ef       	ldi	r18, 0xFF	; 255
    851e:	88 e0       	ldi	r24, 0x08	; 8
    8520:	9d e3       	ldi	r25, 0x3D	; 61
    8522:	21 50       	subi	r18, 0x01	; 1
    8524:	80 40       	sbci	r24, 0x00	; 0
    8526:	90 40       	sbci	r25, 0x00	; 0
    8528:	e1 f7       	brne	.-8      	; 0x8522 <init+0x35e>
    852a:	00 c0       	rjmp	.+0      	; 0x852c <init+0x368>
    852c:	00 00       	nop
    852e:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    8530:	98 e0       	ldi	r25, 0x08	; 8
    8532:	88 e1       	ldi	r24, 0x18	; 24
    8534:	0f b6       	in	r0, 0x3f	; 63
    8536:	f8 94       	cli
    8538:	a8 95       	wdr
    853a:	80 93 60 00 	sts	0x0060, r24
    853e:	0f be       	out	0x3f, r0	; 63
    8540:	90 93 60 00 	sts	0x0060, r25
    8544:	ff cf       	rjmp	.-2      	; 0x8544 <init+0x380>
    8546:	0e 94 02 6d 	call	0xda04	; 0xda04 <GetVbat>
    854a:	90 93 47 05 	sts	0x0547, r25
    854e:	80 93 46 05 	sts	0x0546, r24
    8552:	0e 94 76 57 	call	0xaeec	; 0xaeec <UpdateLimits>
    8556:	80 91 db 06 	lds	r24, 0x06DB
    855a:	81 30       	cpi	r24, 0x01	; 1
    855c:	29 f4       	brne	.+10     	; 0x8568 <init+0x3a4>
    855e:	80 91 35 05 	lds	r24, 0x0535
    8562:	84 60       	ori	r24, 0x04	; 4
    8564:	80 93 35 05 	sts	0x0535, r24
    8568:	80 91 ee 08 	lds	r24, 0x08EE
    856c:	88 23       	and	r24, r24
    856e:	69 f0       	breq	.+26     	; 0x858a <init+0x3c6>
    8570:	0e 94 90 69 	call	0xd320	; 0xd320 <RxGetChannels>
    8574:	80 91 81 09 	lds	r24, 0x0981
    8578:	90 91 82 09 	lds	r25, 0x0982
    857c:	c3 97       	sbiw	r24, 0x33	; 51
    857e:	2c f0       	brlt	.+10     	; 0x858a <init+0x3c6>
    8580:	80 91 35 05 	lds	r24, 0x0535
    8584:	81 60       	ori	r24, 0x01	; 1
    8586:	80 93 35 05 	sts	0x0535, r24
    858a:	0e 94 99 40 	call	0x8132	; 0x8132 <reset_IMU>
    858e:	80 91 e3 06 	lds	r24, 0x06E3
    8592:	81 30       	cpi	r24, 0x01	; 1
    8594:	59 f4       	brne	.+22     	; 0x85ac <init+0x3e8>
    8596:	29 9a       	sbi	0x05, 1	; 5
    8598:	2f e9       	ldi	r18, 0x9F	; 159
    859a:	86 e8       	ldi	r24, 0x86	; 134
    859c:	91 e0       	ldi	r25, 0x01	; 1
    859e:	21 50       	subi	r18, 0x01	; 1
    85a0:	80 40       	sbci	r24, 0x00	; 0
    85a2:	90 40       	sbci	r25, 0x00	; 0
    85a4:	e1 f7       	brne	.-8      	; 0x859e <init+0x3da>
    85a6:	00 c0       	rjmp	.+0      	; 0x85a8 <init+0x3e4>
    85a8:	00 00       	nop
    85aa:	29 98       	cbi	0x05, 1	; 5
    85ac:	f8 94       	cli
    85ae:	e8 ee       	ldi	r30, 0xE8	; 232
    85b0:	f6 e0       	ldi	r31, 0x06	; 6
    85b2:	80 e0       	ldi	r24, 0x00	; 0
    85b4:	90 e0       	ldi	r25, 0x00	; 0
    85b6:	10 e0       	ldi	r17, 0x00	; 0
    85b8:	28 ee       	ldi	r18, 0xE8	; 232
    85ba:	33 e0       	ldi	r19, 0x03	; 3
    85bc:	41 e0       	ldi	r20, 0x01	; 1
    85be:	50 e0       	ldi	r21, 0x00	; 0
    85c0:	60 81       	ld	r22, Z
    85c2:	62 30       	cpi	r22, 0x02	; 2
    85c4:	79 f4       	brne	.+30     	; 0x85e4 <init+0x420>
    85c6:	dc 01       	movw	r26, r24
    85c8:	aa 0f       	add	r26, r26
    85ca:	bb 1f       	adc	r27, r27
    85cc:	ab 56       	subi	r26, 0x6B	; 107
    85ce:	b6 4f       	sbci	r27, 0xF6	; 246
    85d0:	11 96       	adiw	r26, 0x01	; 1
    85d2:	3c 93       	st	X, r19
    85d4:	2e 93       	st	-X, r18
    85d6:	ba 01       	movw	r22, r20
    85d8:	08 2e       	mov	r0, r24
    85da:	01 c0       	rjmp	.+2      	; 0x85de <init+0x41a>
    85dc:	66 0f       	add	r22, r22
    85de:	0a 94       	dec	r0
    85e0:	ea f7       	brpl	.-6      	; 0x85dc <init+0x418>
    85e2:	16 2b       	or	r17, r22
    85e4:	01 96       	adiw	r24, 0x01	; 1
    85e6:	b2 96       	adiw	r30, 0x22	; 34
    85e8:	88 30       	cpi	r24, 0x08	; 8
    85ea:	91 05       	cpc	r25, r1
    85ec:	49 f7       	brne	.-46     	; 0x85c0 <init+0x3fc>
    85ee:	c9 ef       	ldi	r28, 0xF9	; 249
    85f0:	d0 e0       	ldi	r29, 0x00	; 0
    85f2:	61 2f       	mov	r22, r17
    85f4:	85 e9       	ldi	r24, 0x95	; 149
    85f6:	99 e0       	ldi	r25, 0x09	; 9
    85f8:	0e 94 23 16 	call	0x2c46	; 0x2c46 <output_servo_ppm_asm>
    85fc:	21 97       	sbiw	r28, 0x01	; 1
    85fe:	c9 f7       	brne	.-14     	; 0x85f2 <init+0x42e>
    8600:	78 94       	sei
    8602:	df 91       	pop	r29
    8604:	cf 91       	pop	r28
    8606:	1f 91       	pop	r17
    8608:	08 95       	ret

0000860a <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    860a:	1f 92       	push	r1
    860c:	0f 92       	push	r0
    860e:	0f b6       	in	r0, 0x3f	; 63
    8610:	0f 92       	push	r0
    8612:	11 24       	eor	r1, r1
    8614:	8f 93       	push	r24
    8616:	9f 93       	push	r25
	TMR0_counter++;
    8618:	80 91 01 09 	lds	r24, 0x0901
    861c:	90 91 02 09 	lds	r25, 0x0902
    8620:	01 96       	adiw	r24, 0x01	; 1
    8622:	90 93 02 09 	sts	0x0902, r25
    8626:	80 93 01 09 	sts	0x0901, r24
}
    862a:	9f 91       	pop	r25
    862c:	8f 91       	pop	r24
    862e:	0f 90       	pop	r0
    8630:	0f be       	out	0x3f, r0	; 63
    8632:	0f 90       	pop	r0
    8634:	1f 90       	pop	r1
    8636:	18 95       	reti

00008638 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    8638:	1f 92       	push	r1
    863a:	0f 92       	push	r0
    863c:	0f b6       	in	r0, 0x3f	; 63
    863e:	0f 92       	push	r0
    8640:	11 24       	eor	r1, r1
    8642:	2f 93       	push	r18
    8644:	3f 93       	push	r19
    8646:	8f 93       	push	r24
    8648:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    864a:	80 91 19 09 	lds	r24, 0x0919
    864e:	88 23       	and	r24, r24
    8650:	19 f0       	breq	.+6      	; 0x8658 <__vector_2+0x20>
    8652:	81 e0       	ldi	r24, 0x01	; 1
    8654:	80 93 1a 09 	sts	0x091A, r24

	if (RX_ROLL)	// Rising
    8658:	4b 9b       	sbis	0x09, 3	; 9
    865a:	09 c0       	rjmp	.+18     	; 0x866e <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    865c:	80 91 84 00 	lds	r24, 0x0084
    8660:	90 91 85 00 	lds	r25, 0x0085
    8664:	90 93 06 09 	sts	0x0906, r25
    8668:	80 93 05 09 	sts	0x0905, r24
    866c:	1e c0       	rjmp	.+60     	; 0x86aa <__vector_2+0x72>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    866e:	80 91 84 00 	lds	r24, 0x0084
    8672:	90 91 85 00 	lds	r25, 0x0085
    8676:	20 91 05 09 	lds	r18, 0x0905
    867a:	30 91 06 09 	lds	r19, 0x0906
    867e:	82 1b       	sub	r24, r18
    8680:	93 0b       	sbc	r25, r19
    8682:	90 93 e1 08 	sts	0x08E1, r25
    8686:	80 93 e0 08 	sts	0x08E0, r24
		if (Config.PWM_Sync == AILERON) 
    868a:	80 91 64 06 	lds	r24, 0x0664
    868e:	81 30       	cpi	r24, 0x01	; 1
    8690:	61 f4       	brne	.+24     	; 0x86aa <__vector_2+0x72>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    8692:	80 93 ee 08 	sts	0x08EE, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    8696:	80 91 b2 00 	lds	r24, 0x00B2
    869a:	80 93 2c 05 	sts	0x052C, r24
			RC_Timeout = 0;
    869e:	10 92 2b 05 	sts	0x052B, r1
    86a2:	10 92 2a 05 	sts	0x052A, r1
			Overdue = false;
    86a6:	10 92 2e 05 	sts	0x052E, r1
		}
	}
}
    86aa:	9f 91       	pop	r25
    86ac:	8f 91       	pop	r24
    86ae:	3f 91       	pop	r19
    86b0:	2f 91       	pop	r18
    86b2:	0f 90       	pop	r0
    86b4:	0f be       	out	0x3f, r0	; 63
    86b6:	0f 90       	pop	r0
    86b8:	1f 90       	pop	r1
    86ba:	18 95       	reti

000086bc <__vector_1>:

ISR(INT0_vect)
{
    86bc:	1f 92       	push	r1
    86be:	0f 92       	push	r0
    86c0:	0f b6       	in	r0, 0x3f	; 63
    86c2:	0f 92       	push	r0
    86c4:	11 24       	eor	r1, r1
    86c6:	2f 93       	push	r18
    86c8:	3f 93       	push	r19
    86ca:	8f 93       	push	r24
    86cc:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    86ce:	80 91 19 09 	lds	r24, 0x0919
    86d2:	88 23       	and	r24, r24
    86d4:	19 f0       	breq	.+6      	; 0x86dc <__vector_1+0x20>
    86d6:	81 e0       	ldi	r24, 0x01	; 1
    86d8:	80 93 1a 09 	sts	0x091A, r24

	if (RX_PITCH)	// Rising 
    86dc:	4a 9b       	sbis	0x09, 2	; 9
    86de:	09 c0       	rjmp	.+18     	; 0x86f2 <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    86e0:	80 91 84 00 	lds	r24, 0x0084
    86e4:	90 91 85 00 	lds	r25, 0x0085
    86e8:	90 93 08 09 	sts	0x0908, r25
    86ec:	80 93 07 09 	sts	0x0907, r24
    86f0:	1f c0       	rjmp	.+62     	; 0x8730 <__vector_1+0x74>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    86f2:	80 91 84 00 	lds	r24, 0x0084
    86f6:	90 91 85 00 	lds	r25, 0x0085
    86fa:	20 91 07 09 	lds	r18, 0x0907
    86fe:	30 91 08 09 	lds	r19, 0x0908
    8702:	82 1b       	sub	r24, r18
    8704:	93 0b       	sbc	r25, r19
    8706:	90 93 e3 08 	sts	0x08E3, r25
    870a:	80 93 e2 08 	sts	0x08E2, r24
		if (Config.PWM_Sync == ELEVATOR) 
    870e:	80 91 64 06 	lds	r24, 0x0664
    8712:	82 30       	cpi	r24, 0x02	; 2
    8714:	69 f4       	brne	.+26     	; 0x8730 <__vector_1+0x74>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    8716:	81 e0       	ldi	r24, 0x01	; 1
    8718:	80 93 ee 08 	sts	0x08EE, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    871c:	80 91 b2 00 	lds	r24, 0x00B2
    8720:	80 93 2c 05 	sts	0x052C, r24
			RC_Timeout = 0;
    8724:	10 92 2b 05 	sts	0x052B, r1
    8728:	10 92 2a 05 	sts	0x052A, r1
			Overdue = false;
    872c:	10 92 2e 05 	sts	0x052E, r1
		}
	}
}
    8730:	9f 91       	pop	r25
    8732:	8f 91       	pop	r24
    8734:	3f 91       	pop	r19
    8736:	2f 91       	pop	r18
    8738:	0f 90       	pop	r0
    873a:	0f be       	out	0x3f, r0	; 63
    873c:	0f 90       	pop	r0
    873e:	1f 90       	pop	r1
    8740:	18 95       	reti

00008742 <__vector_7>:

ISR(PCINT3_vect)
{
    8742:	1f 92       	push	r1
    8744:	0f 92       	push	r0
    8746:	0f b6       	in	r0, 0x3f	; 63
    8748:	0f 92       	push	r0
    874a:	11 24       	eor	r1, r1
    874c:	2f 93       	push	r18
    874e:	3f 93       	push	r19
    8750:	8f 93       	push	r24
    8752:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    8754:	80 91 19 09 	lds	r24, 0x0919
    8758:	88 23       	and	r24, r24
    875a:	19 f0       	breq	.+6      	; 0x8762 <__vector_7+0x20>
    875c:	81 e0       	ldi	r24, 0x01	; 1
    875e:	80 93 1a 09 	sts	0x091A, r24
		
	if (RX_COLL)	// Rising
    8762:	48 9b       	sbis	0x09, 0	; 9
    8764:	09 c0       	rjmp	.+18     	; 0x8778 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    8766:	80 91 84 00 	lds	r24, 0x0084
    876a:	90 91 85 00 	lds	r25, 0x0085
    876e:	90 93 04 09 	sts	0x0904, r25
    8772:	80 93 03 09 	sts	0x0903, r24
    8776:	1f c0       	rjmp	.+62     	; 0x87b6 <__vector_7+0x74>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    8778:	80 91 84 00 	lds	r24, 0x0084
    877c:	90 91 85 00 	lds	r25, 0x0085
    8780:	20 91 03 09 	lds	r18, 0x0903
    8784:	30 91 04 09 	lds	r19, 0x0904
    8788:	82 1b       	sub	r24, r18
    878a:	93 0b       	sbc	r25, r19
    878c:	90 93 df 08 	sts	0x08DF, r25
    8790:	80 93 de 08 	sts	0x08DE, r24
		if (Config.PWM_Sync == THROTTLE) 
    8794:	80 91 64 06 	lds	r24, 0x0664
    8798:	81 11       	cpse	r24, r1
    879a:	0d c0       	rjmp	.+26     	; 0x87b6 <__vector_7+0x74>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    879c:	81 e0       	ldi	r24, 0x01	; 1
    879e:	80 93 ee 08 	sts	0x08EE, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    87a2:	80 91 b2 00 	lds	r24, 0x00B2
    87a6:	80 93 2c 05 	sts	0x052C, r24
			RC_Timeout = 0;
    87aa:	10 92 2b 05 	sts	0x052B, r1
    87ae:	10 92 2a 05 	sts	0x052A, r1
			Overdue = false;
    87b2:	10 92 2e 05 	sts	0x052E, r1
		}
	}
}
    87b6:	9f 91       	pop	r25
    87b8:	8f 91       	pop	r24
    87ba:	3f 91       	pop	r19
    87bc:	2f 91       	pop	r18
    87be:	0f 90       	pop	r0
    87c0:	0f be       	out	0x3f, r0	; 63
    87c2:	0f 90       	pop	r0
    87c4:	1f 90       	pop	r1
    87c6:	18 95       	reti

000087c8 <__vector_5>:


ISR(PCINT1_vect)
{
    87c8:	1f 92       	push	r1
    87ca:	0f 92       	push	r0
    87cc:	0f b6       	in	r0, 0x3f	; 63
    87ce:	0f 92       	push	r0
    87d0:	11 24       	eor	r1, r1
    87d2:	2f 93       	push	r18
    87d4:	3f 93       	push	r19
    87d6:	8f 93       	push	r24
    87d8:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    87da:	80 91 19 09 	lds	r24, 0x0919
    87de:	88 23       	and	r24, r24
    87e0:	19 f0       	breq	.+6      	; 0x87e8 <__vector_5+0x20>
    87e2:	81 e0       	ldi	r24, 0x01	; 1
    87e4:	80 93 1a 09 	sts	0x091A, r24

	if (RX_AUX)	// Rising
    87e8:	18 9b       	sbis	0x03, 0	; 3
    87ea:	09 c0       	rjmp	.+18     	; 0x87fe <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    87ec:	80 91 84 00 	lds	r24, 0x0084
    87f0:	90 91 85 00 	lds	r25, 0x0085
    87f4:	90 93 0c 09 	sts	0x090C, r25
    87f8:	80 93 0b 09 	sts	0x090B, r24
    87fc:	1f c0       	rjmp	.+62     	; 0x883c <__vector_5+0x74>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    87fe:	80 91 84 00 	lds	r24, 0x0084
    8802:	90 91 85 00 	lds	r25, 0x0085
    8806:	20 91 0b 09 	lds	r18, 0x090B
    880a:	30 91 0c 09 	lds	r19, 0x090C
    880e:	82 1b       	sub	r24, r18
    8810:	93 0b       	sbc	r25, r19
    8812:	90 93 e7 08 	sts	0x08E7, r25
    8816:	80 93 e6 08 	sts	0x08E6, r24
		if (Config.PWM_Sync == GEAR) 
    881a:	80 91 64 06 	lds	r24, 0x0664
    881e:	84 30       	cpi	r24, 0x04	; 4
    8820:	69 f4       	brne	.+26     	; 0x883c <__vector_5+0x74>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    8822:	81 e0       	ldi	r24, 0x01	; 1
    8824:	80 93 ee 08 	sts	0x08EE, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    8828:	80 91 b2 00 	lds	r24, 0x00B2
    882c:	80 93 2c 05 	sts	0x052C, r24
			RC_Timeout = 0;
    8830:	10 92 2b 05 	sts	0x052B, r1
    8834:	10 92 2a 05 	sts	0x052A, r1
			Overdue = false;
    8838:	10 92 2e 05 	sts	0x052E, r1
		}
	}
}
    883c:	9f 91       	pop	r25
    883e:	8f 91       	pop	r24
    8840:	3f 91       	pop	r19
    8842:	2f 91       	pop	r18
    8844:	0f 90       	pop	r0
    8846:	0f be       	out	0x3f, r0	; 63
    8848:	0f 90       	pop	r0
    884a:	1f 90       	pop	r1
    884c:	18 95       	reti

0000884e <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    884e:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    8850:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    8852:	80 91 84 00 	lds	r24, 0x0084
    8856:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    885a:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    885c:	08 95       	ret

0000885e <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    885e:	1f 92       	push	r1
    8860:	0f 92       	push	r0
    8862:	0f b6       	in	r0, 0x3f	; 63
    8864:	0f 92       	push	r0
    8866:	11 24       	eor	r1, r1
    8868:	2f 93       	push	r18
    886a:	3f 93       	push	r19
    886c:	4f 93       	push	r20
    886e:	5f 93       	push	r21
    8870:	6f 93       	push	r22
    8872:	7f 93       	push	r23
    8874:	8f 93       	push	r24
    8876:	9f 93       	push	r25
    8878:	af 93       	push	r26
    887a:	bf 93       	push	r27
    887c:	ef 93       	push	r30
    887e:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    8880:	80 91 19 09 	lds	r24, 0x0919
    8884:	88 23       	and	r24, r24
    8886:	19 f0       	breq	.+6      	; 0x888e <__vector_3+0x30>
    8888:	81 e0       	ldi	r24, 0x01	; 1
    888a:	80 93 1a 09 	sts	0x091A, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    888e:	0e 94 27 44 	call	0x884e	; 0x884e <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    8892:	20 91 62 06 	lds	r18, 0x0662
    8896:	22 23       	and	r18, r18
    8898:	11 f1       	breq	.+68     	; 0x88de <__vector_3+0x80>
	{
		if (RX_YAW)	// Rising
    889a:	1a 9b       	sbis	0x03, 2	; 3
    889c:	05 c0       	rjmp	.+10     	; 0x88a8 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    889e:	90 93 0a 09 	sts	0x090A, r25
    88a2:	80 93 09 09 	sts	0x0909, r24
    88a6:	98 c0       	rjmp	.+304    	; 0x89d8 <__vector_3+0x17a>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    88a8:	20 91 09 09 	lds	r18, 0x0909
    88ac:	30 91 0a 09 	lds	r19, 0x090A
    88b0:	82 1b       	sub	r24, r18
    88b2:	93 0b       	sbc	r25, r19
    88b4:	90 93 e5 08 	sts	0x08E5, r25
    88b8:	80 93 e4 08 	sts	0x08E4, r24
			if (Config.PWM_Sync == RUDDER) 
    88bc:	80 91 64 06 	lds	r24, 0x0664
    88c0:	83 30       	cpi	r24, 0x03	; 3
    88c2:	09 f0       	breq	.+2      	; 0x88c6 <__vector_3+0x68>
    88c4:	89 c0       	rjmp	.+274    	; 0x89d8 <__vector_3+0x17a>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    88c6:	81 e0       	ldi	r24, 0x01	; 1
    88c8:	80 93 ee 08 	sts	0x08EE, r24
				Servo_TCNT2 = TCNT2;				// Reset signal loss timer and Overdue state 
    88cc:	80 91 b2 00 	lds	r24, 0x00B2
    88d0:	80 93 2c 05 	sts	0x052C, r24
				RC_Timeout = 0;
    88d4:	10 92 2b 05 	sts	0x052B, r1
    88d8:	10 92 2a 05 	sts	0x052A, r1
    88dc:	7b c0       	rjmp	.+246    	; 0x89d4 <__vector_3+0x176>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    88de:	1a 99       	sbic	0x03, 2	; 3
    88e0:	7b c0       	rjmp	.+246    	; 0x89d8 <__vector_3+0x17a>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    88e2:	20 91 17 09 	lds	r18, 0x0917
    88e6:	30 91 18 09 	lds	r19, 0x0918
    88ea:	ac 01       	movw	r20, r24
    88ec:	42 1b       	sub	r20, r18
    88ee:	53 0b       	sbc	r21, r19
    88f0:	9a 01       	movw	r18, r20
    88f2:	2f 35       	cpi	r18, 0x5F	; 95
    88f4:	3a 41       	sbci	r19, 0x1A	; 26
    88f6:	58 f4       	brcc	.+22     	; 0x890e <__vector_3+0xb0>
    88f8:	20 91 17 09 	lds	r18, 0x0917
    88fc:	30 91 18 09 	lds	r19, 0x0918
    8900:	ac 01       	movw	r20, r24
    8902:	42 1b       	sub	r20, r18
    8904:	53 0b       	sbc	r21, r19
    8906:	9a 01       	movw	r18, r20
    8908:	2e 3e       	cpi	r18, 0xEE	; 238
    890a:	32 40       	sbci	r19, 0x02	; 2
    890c:	10 f4       	brcc	.+4      	; 0x8912 <__vector_3+0xb4>
		{
			ch_num = 0;
    890e:	10 92 16 09 	sts	0x0916, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    8912:	90 93 18 09 	sts	0x0918, r25
    8916:	80 93 17 09 	sts	0x0917, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    891a:	e0 91 16 09 	lds	r30, 0x0916
    891e:	f0 e0       	ldi	r31, 0x00	; 0
    8920:	e7 5c       	subi	r30, 0xC7	; 199
    8922:	f9 4f       	sbci	r31, 0xF9	; 249
    8924:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    8926:	20 91 16 09 	lds	r18, 0x0916
    892a:	22 23       	and	r18, r18
    892c:	39 f0       	breq	.+14     	; 0x893c <__vector_3+0xde>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    892e:	a0 91 16 09 	lds	r26, 0x0916
    8932:	b0 e0       	ldi	r27, 0x00	; 0
    8934:	a7 5c       	subi	r26, 0xC7	; 199
    8936:	b9 4f       	sbci	r27, 0xF9	; 249
    8938:	2c 91       	ld	r18, X
    893a:	01 c0       	rjmp	.+2      	; 0x893e <__vector_3+0xe0>
		}
		else
		{
			prevChannel = 0;
    893c:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    893e:	30 91 16 09 	lds	r19, 0x0916
    8942:	38 30       	cpi	r19, 0x08	; 8
    8944:	38 f4       	brcc	.+14     	; 0x8954 <__vector_3+0xf6>
		{
            RxChannelStart[curChannel] = tCount;
    8946:	f0 e0       	ldi	r31, 0x00	; 0
    8948:	ee 0f       	add	r30, r30
    894a:	ff 1f       	adc	r31, r31
    894c:	ed 5f       	subi	r30, 0xFD	; 253
    894e:	f6 4f       	sbci	r31, 0xF6	; 246
    8950:	91 83       	std	Z+1, r25	; 0x01
    8952:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    8954:	30 91 16 09 	lds	r19, 0x0916
    8958:	33 23       	and	r19, r19
    895a:	99 f0       	breq	.+38     	; 0x8982 <__vector_3+0x124>
    895c:	30 91 16 09 	lds	r19, 0x0916
    8960:	39 30       	cpi	r19, 0x09	; 9
    8962:	78 f4       	brcc	.+30     	; 0x8982 <__vector_3+0x124>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    8964:	30 e0       	ldi	r19, 0x00	; 0
    8966:	22 0f       	add	r18, r18
    8968:	33 1f       	adc	r19, r19
    896a:	f9 01       	movw	r30, r18
    896c:	ed 5f       	subi	r30, 0xFD	; 253
    896e:	f6 4f       	sbci	r31, 0xF6	; 246
    8970:	40 81       	ld	r20, Z
    8972:	51 81       	ldd	r21, Z+1	; 0x01
    8974:	84 1b       	sub	r24, r20
    8976:	95 0b       	sbc	r25, r21
    8978:	f9 01       	movw	r30, r18
    897a:	e2 52       	subi	r30, 0x22	; 34
    897c:	f7 4f       	sbci	r31, 0xF7	; 247
    897e:	91 83       	std	Z+1, r25	; 0x01
    8980:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    8982:	80 91 16 09 	lds	r24, 0x0916
    8986:	8f 5f       	subi	r24, 0xFF	; 255
    8988:	80 93 16 09 	sts	0x0916, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    898c:	90 91 16 09 	lds	r25, 0x0916
    8990:	80 91 ef 08 	lds	r24, 0x08EF
    8994:	89 17       	cp	r24, r25
    8996:	28 f4       	brcc	.+10     	; 0x89a2 <__vector_3+0x144>
		{
			max_chan = ch_num;					// Update max channel number
    8998:	80 91 16 09 	lds	r24, 0x0916
    899c:	80 93 ef 08 	sts	0x08EF, r24
    89a0:	13 c0       	rjmp	.+38     	; 0x89c8 <__vector_3+0x16a>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    89a2:	90 91 16 09 	lds	r25, 0x0916
    89a6:	80 91 ef 08 	lds	r24, 0x08EF
    89aa:	98 13       	cpse	r25, r24
    89ac:	0d c0       	rjmp	.+26     	; 0x89c8 <__vector_3+0x16a>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    89ae:	81 e0       	ldi	r24, 0x01	; 1
    89b0:	80 93 ee 08 	sts	0x08EE, r24
			Servo_TCNT2 = TCNT2;				// Reset signal loss timer and Overdue state 
    89b4:	80 91 b2 00 	lds	r24, 0x00B2
    89b8:	80 93 2c 05 	sts	0x052C, r24
			RC_Timeout = 0;
    89bc:	10 92 2b 05 	sts	0x052B, r1
    89c0:	10 92 2a 05 	sts	0x052A, r1
			Overdue = false;
    89c4:	10 92 2e 05 	sts	0x052E, r1
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    89c8:	80 91 2e 05 	lds	r24, 0x052E
    89cc:	88 23       	and	r24, r24
    89ce:	21 f0       	breq	.+8      	; 0x89d8 <__vector_3+0x17a>
		{
			max_chan = 0;
    89d0:	10 92 ef 08 	sts	0x08EF, r1
			Overdue = false;
    89d4:	10 92 2e 05 	sts	0x052E, r1
		}
	}
} // ISR(INT2_vect)
    89d8:	ff 91       	pop	r31
    89da:	ef 91       	pop	r30
    89dc:	bf 91       	pop	r27
    89de:	af 91       	pop	r26
    89e0:	9f 91       	pop	r25
    89e2:	8f 91       	pop	r24
    89e4:	7f 91       	pop	r23
    89e6:	6f 91       	pop	r22
    89e8:	5f 91       	pop	r21
    89ea:	4f 91       	pop	r20
    89ec:	3f 91       	pop	r19
    89ee:	2f 91       	pop	r18
    89f0:	0f 90       	pop	r0
    89f2:	0f be       	out	0x3f, r0	; 63
    89f4:	0f 90       	pop	r0
    89f6:	1f 90       	pop	r1
    89f8:	18 95       	reti

000089fa <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    89fa:	1f 92       	push	r1
    89fc:	0f 92       	push	r0
    89fe:	0f b6       	in	r0, 0x3f	; 63
    8a00:	0f 92       	push	r0
    8a02:	11 24       	eor	r1, r1
    8a04:	2f 93       	push	r18
    8a06:	3f 93       	push	r19
    8a08:	4f 93       	push	r20
    8a0a:	5f 93       	push	r21
    8a0c:	6f 93       	push	r22
    8a0e:	7f 93       	push	r23
    8a10:	8f 93       	push	r24
    8a12:	9f 93       	push	r25
    8a14:	af 93       	push	r26
    8a16:	bf 93       	push	r27
    8a18:	cf 93       	push	r28
    8a1a:	df 93       	push	r29
    8a1c:	ef 93       	push	r30
    8a1e:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    8a20:	80 91 19 09 	lds	r24, 0x0919
    8a24:	88 23       	and	r24, r24
    8a26:	19 f0       	breq	.+6      	; 0x8a2e <__vector_20+0x34>
    8a28:	81 e0       	ldi	r24, 0x01	; 1
    8a2a:	80 93 1a 09 	sts	0x091A, r24

	// Read error flags first
	temp =  UCSR0A;
    8a2e:	80 91 c0 00 	lds	r24, 0x00C0

	// Check Framing error, Parity error bits
	if (temp & ((1<<FE0)|(1<<UPE0)))
    8a32:	98 2f       	mov	r25, r24
    8a34:	94 71       	andi	r25, 0x14	; 20
    8a36:	21 f4       	brne	.+8      	; 0x8a40 <__vector_20+0x46>
		// Read byte to remove from buffer
		temp = UDR0;
	}

	// Check all for Data overrun
	else if (temp & (1<<DOR0))
    8a38:	83 ff       	sbrs	r24, 3
    8a3a:	05 c0       	rjmp	.+10     	; 0x8a46 <__vector_20+0x4c>
	{
		// Read byte to remove from buffer
		temp = UDR0;
    8a3c:	80 91 c6 00 	lds	r24, 0x00C6
		// Read byte to remove from buffer
		temp = UDR0;
    8a40:	80 91 c6 00 	lds	r24, 0x00C6
    8a44:	4a c3       	rjmp	.+1684   	; 0x90da <__vector_20+0x6e0>

	// Valid data
	else
	{
		// Read byte first
		temp = UDR0;
    8a46:	c0 91 c6 00 	lds	r28, 0x00C6

		// Save current time stamp
		Save_TCNT1 = TIM16_ReadTCNT1();
    8a4a:	0e 94 27 44 	call	0x884e	; 0x884e <TIM16_ReadTCNT1>
	
		// Work out frame rate properly
		// Note that CurrentPeriod cannot be larger than 26.2ms
	
		//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
		if (Save_TCNT1 < PPMSyncStart)
    8a4e:	20 91 17 09 	lds	r18, 0x0917
    8a52:	30 91 18 09 	lds	r19, 0x0918
    8a56:	82 17       	cp	r24, r18
    8a58:	93 07       	cpc	r25, r19
    8a5a:	48 f4       	brcc	.+18     	; 0x8a6e <__vector_20+0x74>
		{
			CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
    8a5c:	20 91 17 09 	lds	r18, 0x0917
    8a60:	30 91 18 09 	lds	r19, 0x0918
    8a64:	ac 01       	movw	r20, r24
    8a66:	42 1b       	sub	r20, r18
    8a68:	53 0b       	sbc	r21, r19
    8a6a:	9a 01       	movw	r18, r20
    8a6c:	08 c0       	rjmp	.+16     	; 0x8a7e <__vector_20+0x84>
		}
		else
		{
			CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    8a6e:	20 91 17 09 	lds	r18, 0x0917
    8a72:	30 91 18 09 	lds	r19, 0x0918
    8a76:	dc 01       	movw	r26, r24
    8a78:	a2 1b       	sub	r26, r18
    8a7a:	b3 0b       	sbc	r27, r19
    8a7c:	9d 01       	movw	r18, r26
		}

		// Handle start of new packet
		if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    8a7e:	25 3c       	cpi	r18, 0xC5	; 197
    8a80:	b9 e0       	ldi	r27, 0x09	; 9
    8a82:	3b 07       	cpc	r19, r27
    8a84:	c8 f0       	brcs	.+50     	; 0x8ab8 <__vector_20+0xbe>
		{
			// Reset variables
			rcindex = 0;
    8a86:	10 92 dd 08 	sts	0x08DD, r1
			bytecount = 0;
    8a8a:	10 92 f0 08 	sts	0x08F0, r1
			ch_num = 0;
    8a8e:	10 92 16 09 	sts	0x0916, r1
			checksum = 0;
    8a92:	10 92 1c 09 	sts	0x091C, r1
    8a96:	10 92 1b 09 	sts	0x091B, r1
			chanmask16 = 0;
    8a9a:	10 92 14 09 	sts	0x0914, r1
    8a9e:	10 92 13 09 	sts	0x0913, r1

			// Save frame rate to global
			FrameRate = CurrentPeriod;
    8aa2:	30 93 1e 09 	sts	0x091E, r19
    8aa6:	20 93 1d 09 	sts	0x091D, r18
			
			// Clear buffer
			memset(&sBuffer[0],0,SBUFFER_SIZE);
    8aaa:	26 e4       	ldi	r18, 0x46	; 70
    8aac:	ec e7       	ldi	r30, 0x7C	; 124
    8aae:	f5 e0       	ldi	r31, 0x05	; 5
    8ab0:	df 01       	movw	r26, r30
    8ab2:	1d 92       	st	X+, r1
    8ab4:	2a 95       	dec	r18
    8ab6:	e9 f7       	brne	.-6      	; 0x8ab2 <__vector_20+0xb8>
		}

		// Timestamp this interrupt
		PPMSyncStart = Save_TCNT1;
    8ab8:	90 93 18 09 	sts	0x0918, r25
    8abc:	80 93 17 09 	sts	0x0917, r24
	
		// Put received byte in buffer if space available
		if (rcindex < SBUFFER_SIZE)
    8ac0:	80 91 dd 08 	lds	r24, 0x08DD
    8ac4:	86 34       	cpi	r24, 0x46	; 70
    8ac6:	50 f4       	brcc	.+20     	; 0x8adc <__vector_20+0xe2>
		{
			sBuffer[rcindex++] = temp;			
    8ac8:	e0 91 dd 08 	lds	r30, 0x08DD
    8acc:	81 e0       	ldi	r24, 0x01	; 1
    8ace:	8e 0f       	add	r24, r30
    8ad0:	80 93 dd 08 	sts	0x08DD, r24
    8ad4:	f0 e0       	ldi	r31, 0x00	; 0
    8ad6:	e4 58       	subi	r30, 0x84	; 132
    8ad8:	fa 4f       	sbci	r31, 0xFA	; 250
    8ada:	c0 83       	st	Z, r28
		//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
		//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
		//*
		//************************************************************

		if (Config.RxMode == XTREME)
    8adc:	90 91 62 06 	lds	r25, 0x0662
    8ae0:	94 30       	cpi	r25, 0x04	; 4
    8ae2:	09 f0       	breq	.+2      	; 0x8ae6 <__vector_20+0xec>
    8ae4:	c2 c0       	rjmp	.+388    	; 0x8c6a <__vector_20+0x270>
		{
			// Look at flag byte to see if the data is meant for us
			if (bytecount == 0)
    8ae6:	80 91 f0 08 	lds	r24, 0x08F0
    8aea:	81 11       	cpse	r24, r1
    8aec:	0d c0       	rjmp	.+26     	; 0x8b08 <__vector_20+0x10e>
			{
				// Check top 3 bits for channel bank
				// Trash checksum if not clear
				if (temp & 0xE0)
    8aee:	8c 2f       	mov	r24, r28
    8af0:	80 7e       	andi	r24, 0xE0	; 224
    8af2:	51 f0       	breq	.+20     	; 0x8b08 <__vector_20+0x10e>
				{
					checksum +=	0x55;
    8af4:	80 91 1b 09 	lds	r24, 0x091B
    8af8:	90 91 1c 09 	lds	r25, 0x091C
    8afc:	8b 5a       	subi	r24, 0xAB	; 171
    8afe:	9f 4f       	sbci	r25, 0xFF	; 255
    8b00:	90 93 1c 09 	sts	0x091C, r25
    8b04:	80 93 1b 09 	sts	0x091B, r24
				}
			}

			// Get MSB of mask byte
			if (bytecount == 2)
    8b08:	20 91 f0 08 	lds	r18, 0x08F0
    8b0c:	8c 2f       	mov	r24, r28
    8b0e:	90 e0       	ldi	r25, 0x00	; 0
    8b10:	22 30       	cpi	r18, 0x02	; 2
    8b12:	51 f4       	brne	.+20     	; 0x8b28 <__vector_20+0x12e>
			{
				chanmask16 = 0;
    8b14:	10 92 14 09 	sts	0x0914, r1
    8b18:	10 92 13 09 	sts	0x0913, r1
				chanmask16 = temp << 8;		// High byte of Mask
    8b1c:	38 2f       	mov	r19, r24
    8b1e:	22 27       	eor	r18, r18
    8b20:	30 93 14 09 	sts	0x0914, r19
    8b24:	20 93 13 09 	sts	0x0913, r18
			}

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
    8b28:	20 91 f0 08 	lds	r18, 0x08F0
    8b2c:	23 30       	cpi	r18, 0x03	; 3
    8b2e:	c1 f0       	breq	.+48     	; 0x8b60 <__vector_20+0x166>
					temp16 &= temp16 - 1;
				}
			}

			// Add up checksum up until final packet
			if (bytecount < ((ch_num << 1) + 4))
    8b30:	20 91 16 09 	lds	r18, 0x0916
    8b34:	40 91 f0 08 	lds	r20, 0x08F0
    8b38:	30 e0       	ldi	r19, 0x00	; 0
    8b3a:	22 0f       	add	r18, r18
    8b3c:	33 1f       	adc	r19, r19
    8b3e:	2d 5f       	subi	r18, 0xFD	; 253
    8b40:	3f 4f       	sbci	r19, 0xFF	; 255
    8b42:	50 e0       	ldi	r21, 0x00	; 0
    8b44:	24 17       	cp	r18, r20
    8b46:	35 07       	cpc	r19, r21
    8b48:	4c f1       	brlt	.+82     	; 0x8b9c <__vector_20+0x1a2>
			{
				checksum +=	temp;
    8b4a:	20 91 1b 09 	lds	r18, 0x091B
    8b4e:	30 91 1c 09 	lds	r19, 0x091C
    8b52:	82 0f       	add	r24, r18
    8b54:	93 1f       	adc	r25, r19
    8b56:	90 93 1c 09 	sts	0x091C, r25
    8b5a:	80 93 1b 09 	sts	0x091B, r24
    8b5e:	1d c2       	rjmp	.+1082   	; 0x8f9a <__vector_20+0x5a0>

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
			{
				chanmask16 += (uint16_t)temp;	// Low byte of Mask
    8b60:	20 91 13 09 	lds	r18, 0x0913
    8b64:	30 91 14 09 	lds	r19, 0x0914
    8b68:	28 0f       	add	r18, r24
    8b6a:	39 1f       	adc	r19, r25
    8b6c:	30 93 14 09 	sts	0x0914, r19
    8b70:	20 93 13 09 	sts	0x0913, r18
				temp16 = chanmask16;			// Need to keep a copy od chanmask16
    8b74:	20 91 13 09 	lds	r18, 0x0913
    8b78:	30 91 14 09 	lds	r19, 0x0914

				// Count bits set (number of active channels)				 
				for (ch_num = 0; temp16; ch_num++)
    8b7c:	10 92 16 09 	sts	0x0916, r1
    8b80:	21 15       	cp	r18, r1
    8b82:	31 05       	cpc	r19, r1
    8b84:	a9 f2       	breq	.-86     	; 0x8b30 <__vector_20+0x136>
				{
					temp16 &= temp16 - 1;
    8b86:	a9 01       	movw	r20, r18
    8b88:	41 50       	subi	r20, 0x01	; 1
    8b8a:	51 09       	sbc	r21, r1
    8b8c:	24 23       	and	r18, r20
    8b8e:	35 23       	and	r19, r21
			{
				chanmask16 += (uint16_t)temp;	// Low byte of Mask
				temp16 = chanmask16;			// Need to keep a copy od chanmask16

				// Count bits set (number of active channels)				 
				for (ch_num = 0; temp16; ch_num++)
    8b90:	40 91 16 09 	lds	r20, 0x0916
    8b94:	4f 5f       	subi	r20, 0xFF	; 255
    8b96:	40 93 16 09 	sts	0x0916, r20
    8b9a:	f2 cf       	rjmp	.-28     	; 0x8b80 <__vector_20+0x186>
	
			// Process data when all packets received
			else
			{
				// Check checksum 
				checksum &= 0xff;
    8b9c:	20 91 1b 09 	lds	r18, 0x091B
    8ba0:	30 91 1c 09 	lds	r19, 0x091C
    8ba4:	33 27       	eor	r19, r19
    8ba6:	30 93 1c 09 	sts	0x091C, r19
    8baa:	20 93 1b 09 	sts	0x091B, r18

				// Ignore packet if checksum wrong
				if (checksum != temp) // temp holds the transmitted checksum byte
    8bae:	20 91 1b 09 	lds	r18, 0x091B
    8bb2:	30 91 1c 09 	lds	r19, 0x091C
    8bb6:	28 17       	cp	r18, r24
    8bb8:	39 07       	cpc	r19, r25
    8bba:	49 f0       	breq	.+18     	; 0x8bce <__vector_20+0x1d4>
				{
					Interrupted = false;
    8bbc:	10 92 ee 08 	sts	0x08EE, r1
					ch_num = 0;
    8bc0:	10 92 16 09 	sts	0x0916, r1
					checksum = 0;
    8bc4:	10 92 1c 09 	sts	0x091C, r1
    8bc8:	10 92 1b 09 	sts	0x091B, r1
    8bcc:	e6 c1       	rjmp	.+972    	; 0x8f9a <__vector_20+0x5a0>
				}
				else
				{
					// RC sync established
					Interrupted = true;	
    8bce:	81 e0       	ldi	r24, 0x01	; 1
    8bd0:	80 93 ee 08 	sts	0x08EE, r24

					// Reset signal loss timer and Overdue state 
					Servo_TCNT2 = TCNT2;
    8bd4:	80 91 b2 00 	lds	r24, 0x00B2
    8bd8:	80 93 2c 05 	sts	0x052C, r24
					RC_Timeout = 0;
    8bdc:	10 92 2b 05 	sts	0x052B, r1
    8be0:	10 92 2a 05 	sts	0x052A, r1
					Overdue = false;
    8be4:	10 92 2e 05 	sts	0x052E, r1
    8be8:	20 e0       	ldi	r18, 0x00	; 0
    8bea:	30 e0       	ldi	r19, 0x00	; 0
			
					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5
    8bec:	44 e0       	ldi	r20, 0x04	; 4
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    8bee:	61 e0       	ldi	r22, 0x01	; 1
    8bf0:	70 e0       	ldi	r23, 0x00	; 0
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    8bf2:	5a e0       	ldi	r21, 0x0A	; 10
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    8bf4:	80 91 13 09 	lds	r24, 0x0913
    8bf8:	90 91 14 09 	lds	r25, 0x0914
    8bfc:	fb 01       	movw	r30, r22
    8bfe:	02 2e       	mov	r0, r18
    8c00:	02 c0       	rjmp	.+4      	; 0x8c06 <__vector_20+0x20c>
    8c02:	ee 0f       	add	r30, r30
    8c04:	ff 1f       	adc	r31, r31
    8c06:	0a 94       	dec	r0
    8c08:	e2 f7       	brpl	.-8      	; 0x8c02 <__vector_20+0x208>
    8c0a:	8e 23       	and	r24, r30
    8c0c:	9f 23       	and	r25, r31
    8c0e:	89 2b       	or	r24, r25
    8c10:	31 f1       	breq	.+76     	; 0x8c5e <__vector_20+0x264>
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    8c12:	e4 2f       	mov	r30, r20
    8c14:	f0 e0       	ldi	r31, 0x00	; 0
    8c16:	e4 58       	subi	r30, 0x84	; 132
    8c18:	fa 4f       	sbci	r31, 0xFA	; 250
    8c1a:	80 81       	ld	r24, Z
    8c1c:	f1 81       	ldd	r31, Z+1	; 0x01

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
    8c1e:	28 30       	cpi	r18, 0x08	; 8
    8c20:	31 05       	cpc	r19, r1
    8c22:	d0 f4       	brcc	.+52     	; 0x8c58 <__vector_20+0x25e>
    8c24:	d9 01       	movw	r26, r18
    8c26:	a7 5c       	subi	r26, 0xC7	; 199
    8c28:	b9 4f       	sbci	r27, 0xF9	; 249
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    8c2a:	11 96       	adiw	r26, 0x01	; 1
    8c2c:	ec 91       	ld	r30, X
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    8c2e:	90 e0       	ldi	r25, 0x00	; 0
    8c30:	98 2f       	mov	r25, r24
    8c32:	88 27       	eor	r24, r24
    8c34:	8f 0f       	add	r24, r31
    8c36:	91 1d       	adc	r25, r1

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    8c38:	58 9f       	mul	r21, r24
    8c3a:	d0 01       	movw	r26, r0
    8c3c:	59 9f       	mul	r21, r25
    8c3e:	b0 0d       	add	r27, r0
    8c40:	11 24       	eor	r1, r1
    8c42:	cd 01       	movw	r24, r26
    8c44:	96 95       	lsr	r25
    8c46:	87 95       	ror	r24
    8c48:	96 95       	lsr	r25
    8c4a:	87 95       	ror	r24
    8c4c:	ee 0f       	add	r30, r30
    8c4e:	ff 0b       	sbc	r31, r31
    8c50:	e2 52       	subi	r30, 0x22	; 34
    8c52:	f7 4f       	sbci	r31, 0xF7	; 247
    8c54:	91 83       	std	Z+1, r25	; 0x01
    8c56:	80 83       	st	Z, r24
							} 		

							// Within the bounds of the buffer
							if (sindex < SBUFFER_SIZE)
    8c58:	46 34       	cpi	r20, 0x46	; 70
    8c5a:	08 f4       	brcc	.+2      	; 0x8c5e <__vector_20+0x264>
							{
								sindex += 2;
    8c5c:	4e 5f       	subi	r20, 0xFE	; 254
    8c5e:	2f 5f       	subi	r18, 0xFF	; 255
    8c60:	3f 4f       	sbci	r19, 0xFF	; 255
					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5

					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
    8c62:	20 31       	cpi	r18, 0x10	; 16
    8c64:	31 05       	cpc	r19, r1
    8c66:	31 f6       	brne	.-116    	; 0x8bf4 <__vector_20+0x1fa>
    8c68:	98 c1       	rjmp	.+816    	; 0x8f9a <__vector_20+0x5a0>
		//* 1824	= 2020us
		//* 2047 	= 2160us
		//*
		//************************************************************

		if (Config.RxMode == SBUS)
    8c6a:	92 30       	cpi	r25, 0x02	; 2
    8c6c:	09 f0       	breq	.+2      	; 0x8c70 <__vector_20+0x276>
    8c6e:	76 c0       	rjmp	.+236    	; 0x8d5c <__vector_20+0x362>
		{
			// Flag that packet has completed
			// End bytes can be 00, 04, 14, 24, 34 and possibly 08 for FASSTest 12-channel
			//if ((bytecount == 24) && ((temp == 0x00) || (temp == 0x04) || (temp == 0x14) || (temp == 0x24) || (temp == 0x34) || (temp == 0x08)))
			if (bytecount == 24)
    8c70:	80 91 f0 08 	lds	r24, 0x08F0
    8c74:	88 31       	cpi	r24, 0x18	; 24
    8c76:	09 f0       	breq	.+2      	; 0x8c7a <__vector_20+0x280>
    8c78:	90 c1       	rjmp	.+800    	; 0x8f9a <__vector_20+0x5a0>
			{
				// RC sync established
				Interrupted = true;
    8c7a:	81 e0       	ldi	r24, 0x01	; 1
    8c7c:	80 93 ee 08 	sts	0x08EE, r24
				Servo_TCNT2 = TCNT2;
    8c80:	80 91 b2 00 	lds	r24, 0x00B2
    8c84:	80 93 2c 05 	sts	0x052C, r24
				RC_Timeout = 0;
    8c88:	10 92 2b 05 	sts	0x052B, r1
    8c8c:	10 92 2a 05 	sts	0x052A, r1
				Overdue = false;
    8c90:	10 92 2e 05 	sts	0x052E, r1
    8c94:	80 e0       	ldi	r24, 0x00	; 0
    8c96:	90 e0       	ldi	r25, 0x00	; 0
				
				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    8c98:	fc 01       	movw	r30, r24
    8c9a:	ee 0f       	add	r30, r30
    8c9c:	ff 1f       	adc	r31, r31
    8c9e:	e2 52       	subi	r30, 0x22	; 34
    8ca0:	f7 4f       	sbci	r31, 0xF7	; 247
    8ca2:	11 82       	std	Z+1, r1	; 0x01
    8ca4:	10 82       	st	Z, r1
    8ca6:	01 96       	adiw	r24, 0x01	; 1
				Servo_TCNT2 = TCNT2;
				RC_Timeout = 0;
				Overdue = false;
				
				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    8ca8:	88 30       	cpi	r24, 0x08	; 8
    8caa:	91 05       	cpc	r25, r1
    8cac:	a9 f7       	brne	.-22     	; 0x8c98 <__vector_20+0x29e>
    8cae:	48 e5       	ldi	r20, 0x58	; 88
    8cb0:	90 e0       	ldi	r25, 0x00	; 0
    8cb2:	60 e0       	ldi	r22, 0x00	; 0
    8cb4:	80 e0       	ldi	r24, 0x00	; 0
    8cb6:	51 e0       	ldi	r21, 0x01	; 1
				for (j = 0; j < 88; j++)
				{
					if (sBuffer[sindex] & (1 << chan_mask))
					{
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1 << data_mask);
    8cb8:	a1 e0       	ldi	r26, 0x01	; 1
    8cba:	b0 e0       	ldi	r27, 0x00	; 0

				// Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
				for (j = 0; j < 88; j++)
				{
					if (sBuffer[sindex] & (1 << chan_mask))
    8cbc:	e5 2f       	mov	r30, r21
    8cbe:	f0 e0       	ldi	r31, 0x00	; 0
    8cc0:	e4 58       	subi	r30, 0x84	; 132
    8cc2:	fa 4f       	sbci	r31, 0xFA	; 250
    8cc4:	20 81       	ld	r18, Z
    8cc6:	30 e0       	ldi	r19, 0x00	; 0
    8cc8:	08 2e       	mov	r0, r24
    8cca:	02 c0       	rjmp	.+4      	; 0x8cd0 <__vector_20+0x2d6>
    8ccc:	35 95       	asr	r19
    8cce:	27 95       	ror	r18
    8cd0:	0a 94       	dec	r0
    8cd2:	e2 f7       	brpl	.-8      	; 0x8ccc <__vector_20+0x2d2>
    8cd4:	20 ff       	sbrs	r18, 0
    8cd6:	16 c0       	rjmp	.+44     	; 0x8d04 <__vector_20+0x30a>
					{
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1 << data_mask);
    8cd8:	e6 2f       	mov	r30, r22
    8cda:	f0 e0       	ldi	r31, 0x00	; 0
    8cdc:	e7 5c       	subi	r30, 0xC7	; 199
    8cde:	f9 4f       	sbci	r31, 0xF9	; 249
    8ce0:	e1 81       	ldd	r30, Z+1	; 0x01
    8ce2:	ee 0f       	add	r30, r30
    8ce4:	ff 0b       	sbc	r31, r31
    8ce6:	e2 52       	subi	r30, 0x22	; 34
    8ce8:	f7 4f       	sbci	r31, 0xF7	; 247
    8cea:	c0 81       	ld	r28, Z
    8cec:	d1 81       	ldd	r29, Z+1	; 0x01
    8cee:	9d 01       	movw	r18, r26
    8cf0:	09 2e       	mov	r0, r25
    8cf2:	02 c0       	rjmp	.+4      	; 0x8cf8 <__vector_20+0x2fe>
    8cf4:	22 0f       	add	r18, r18
    8cf6:	33 1f       	adc	r19, r19
    8cf8:	0a 94       	dec	r0
    8cfa:	e2 f7       	brpl	.-8      	; 0x8cf4 <__vector_20+0x2fa>
    8cfc:	2c 2b       	or	r18, r28
    8cfe:	3d 2b       	or	r19, r29
    8d00:	31 83       	std	Z+1, r19	; 0x01
    8d02:	20 83       	st	Z, r18
					}

					chan_mask++;
    8d04:	8f 5f       	subi	r24, 0xFF	; 255
					data_mask++;
    8d06:	9f 5f       	subi	r25, 0xFF	; 255

					// If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    8d08:	88 30       	cpi	r24, 0x08	; 8
    8d0a:	11 f4       	brne	.+4      	; 0x8d10 <__vector_20+0x316>
					{
						chan_mask = 0;
						sindex++;
    8d0c:	5f 5f       	subi	r21, 0xFF	; 255
					data_mask++;

					// If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
					{
						chan_mask = 0;
    8d0e:	80 e0       	ldi	r24, 0x00	; 0
						sindex++;
					}

					// If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    8d10:	9b 30       	cpi	r25, 0x0B	; 11
    8d12:	11 f4       	brne	.+4      	; 0x8d18 <__vector_20+0x31e>
					{
						data_mask =0;
						chan_shift++;
    8d14:	6f 5f       	subi	r22, 0xFF	; 255

					// If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
					{
						data_mask =0;
    8d16:	90 e0       	ldi	r25, 0x00	; 0
    8d18:	41 50       	subi	r20, 0x01	; 1
				// Start from second byte
				sindex = 1;

				// Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
				for (j = 0; j < 88; j++)
    8d1a:	81 f6       	brne	.-96     	; 0x8cbc <__vector_20+0x2c2>
    8d1c:	20 e0       	ldi	r18, 0x00	; 0
    8d1e:	30 e0       	ldi	r19, 0x00	; 0

				// Convert to  OpenAero2 values
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract Futaba offset
					itemp16 = RxChannel[j] - 1024;
    8d20:	f9 01       	movw	r30, r18
    8d22:	ee 0f       	add	r30, r30
    8d24:	ff 1f       	adc	r31, r31
    8d26:	e2 52       	subi	r30, 0x22	; 34
    8d28:	f7 4f       	sbci	r31, 0xF7	; 247
    8d2a:	80 81       	ld	r24, Z
    8d2c:	91 81       	ldd	r25, Z+1	; 0x01
    8d2e:	94 50       	subi	r25, 0x04	; 4
						
					// Expand into OpenAero2 units x1.562 (1.562) (1250/800)
					itemp16 = itemp16 + (itemp16 >> 1) + (itemp16 >> 4);
    8d30:	ac 01       	movw	r20, r24
    8d32:	55 95       	asr	r21
    8d34:	47 95       	ror	r20
    8d36:	48 0f       	add	r20, r24
    8d38:	59 1f       	adc	r21, r25
    8d3a:	c4 e0       	ldi	r28, 0x04	; 4
    8d3c:	95 95       	asr	r25
    8d3e:	87 95       	ror	r24
    8d40:	ca 95       	dec	r28
    8d42:	e1 f7       	brne	.-8      	; 0x8d3c <__vector_20+0x342>
    8d44:	84 0f       	add	r24, r20
    8d46:	95 1f       	adc	r25, r21

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;		
    8d48:	8a 55       	subi	r24, 0x5A	; 90
    8d4a:	91 4f       	sbci	r25, 0xF1	; 241
    8d4c:	91 83       	std	Z+1, r25	; 0x01
    8d4e:	80 83       	st	Z, r24
    8d50:	2f 5f       	subi	r18, 0xFF	; 255
    8d52:	3f 4f       	sbci	r19, 0xFF	; 255
						chan_shift++;
					}
				}

				// Convert to  OpenAero2 values
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    8d54:	28 30       	cpi	r18, 0x08	; 8
    8d56:	31 05       	cpc	r19, r1
    8d58:	19 f7       	brne	.-58     	; 0x8d20 <__vector_20+0x326>
    8d5a:	1f c1       	rjmp	.+574    	; 0x8f9a <__vector_20+0x5a0>
		//* 2047 	= 2100us
		//*
		//************************************************************

		// Handle Spektrum format
		if (Config.RxMode == SPEKTRUM)
    8d5c:	93 30       	cpi	r25, 0x03	; 3
    8d5e:	09 f0       	breq	.+2      	; 0x8d62 <__vector_20+0x368>
    8d60:	72 c0       	rjmp	.+228    	; 0x8e46 <__vector_20+0x44c>
		{
			// Process data when all packets received
			if (bytecount == 15)
    8d62:	80 91 f0 08 	lds	r24, 0x08F0
    8d66:	8f 30       	cpi	r24, 0x0F	; 15
    8d68:	09 f0       	breq	.+2      	; 0x8d6c <__vector_20+0x372>
    8d6a:	17 c1       	rjmp	.+558    	; 0x8f9a <__vector_20+0x5a0>
			{
				// Just stick the last byte into the buffer manually...(hides)
				sBuffer[15] = temp;
    8d6c:	c0 93 8b 05 	sts	0x058B, r28

				// Set start of channel data per format
				sindex = 2; // Channel data from byte 3

				// Work out if this is 10 or 11 bit data
				if ((sBuffer[1] & 0xF0) != 0) 	// 0 for 10 bit resolution, otherwise 11 bit resolution
    8d70:	80 91 7d 05 	lds	r24, 0x057D
    8d74:	80 7f       	andi	r24, 0xF0	; 240
    8d76:	21 f4       	brne	.+8      	; 0x8d80 <__vector_20+0x386>
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
					data_mask = 0x03;
    8d78:	63 e0       	ldi	r22, 0x03	; 3
					chan_shift = 0x02;
    8d7a:	42 e0       	ldi	r20, 0x02	; 2
					data_mask = 0x07;
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
    8d7c:	5c e3       	ldi	r21, 0x3C	; 60
    8d7e:	03 c0       	rjmp	.+6      	; 0x8d86 <__vector_20+0x38c>

				// Work out if this is 10 or 11 bit data
				if ((sBuffer[1] & 0xF0) != 0) 	// 0 for 10 bit resolution, otherwise 11 bit resolution
				{
					chan_mask = 0x78;	// 11 bit (2048)
					data_mask = 0x07;
    8d80:	67 e0       	ldi	r22, 0x07	; 7
					chan_shift = 0x03;
    8d82:	43 e0       	ldi	r20, 0x03	; 3
				sindex = 2; // Channel data from byte 3

				// Work out if this is 10 or 11 bit data
				if ((sBuffer[1] & 0xF0) != 0) 	// 0 for 10 bit resolution, otherwise 11 bit resolution
				{
					chan_mask = 0x78;	// 11 bit (2048)
    8d84:	58 e7       	ldi	r21, 0x78	; 120
					data_mask = 0x07;
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
    8d86:	20 e0       	ldi	r18, 0x00	; 0
    8d88:	30 e0       	ldi	r19, 0x00	; 0
    8d8a:	d9 01       	movw	r26, r18
    8d8c:	a4 58       	subi	r26, 0x84	; 132
    8d8e:	ba 4f       	sbci	r27, 0xFA	; 250
				// Work out which channel the data is intended for from the channel number data
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    8d90:	12 96       	adiw	r26, 0x02	; 2
    8d92:	8c 91       	ld	r24, X
    8d94:	12 97       	sbiw	r26, 0x02	; 2
    8d96:	e8 2f       	mov	r30, r24
    8d98:	e5 23       	and	r30, r21
    8d9a:	f0 e0       	ldi	r31, 0x00	; 0
    8d9c:	04 2e       	mov	r0, r20
    8d9e:	02 c0       	rjmp	.+4      	; 0x8da4 <__vector_20+0x3aa>
    8da0:	f5 95       	asr	r31
    8da2:	e7 95       	ror	r30
    8da4:	0a 94       	dec	r0
    8da6:	e2 f7       	brpl	.-8      	; 0x8da0 <__vector_20+0x3a6>
    8da8:	e0 93 16 09 	sts	0x0916, r30

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    8dac:	13 96       	adiw	r26, 0x03	; 3
    8dae:	7c 91       	ld	r23, X

					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16
					if (ch_num < MAX_RC_CHANNELS)
    8db0:	90 91 16 09 	lds	r25, 0x0916
    8db4:	98 30       	cpi	r25, 0x08	; 8
    8db6:	98 f5       	brcc	.+102    	; 0x8e1e <__vector_20+0x424>
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    8db8:	86 23       	and	r24, r22
    8dba:	90 e0       	ldi	r25, 0x00	; 0
    8dbc:	98 2f       	mov	r25, r24
    8dbe:	88 27       	eor	r24, r24
    8dc0:	87 0f       	add	r24, r23
    8dc2:	91 1d       	adc	r25, r1
					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16
					if (ch_num < MAX_RC_CHANNELS)
					{
						// Subtract Spektrum center offset
						if (chan_shift == 0x03) // 11-bit
    8dc4:	43 30       	cpi	r20, 0x03	; 3
    8dc6:	11 f4       	brne	.+4      	; 0x8dcc <__vector_20+0x3d2>
						{
							itemp16 = temp16 - 1024;
    8dc8:	94 50       	subi	r25, 0x04	; 4
    8dca:	01 c0       	rjmp	.+2      	; 0x8dce <__vector_20+0x3d4>
						}
						else
						{
							itemp16 = temp16 - 512;	
    8dcc:	92 50       	subi	r25, 0x02	; 2
						}					

						// Spektrum to System
						// Expand into OpenAero2 units (1250/867.5) x2 = 2.8818 (2.875) 2+.5+.25-1/8
						itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3);
    8dce:	dc 01       	movw	r26, r24
    8dd0:	aa 0f       	add	r26, r26
    8dd2:	bb 1f       	adc	r27, r27
    8dd4:	fc 01       	movw	r30, r24
    8dd6:	f5 95       	asr	r31
    8dd8:	e7 95       	ror	r30
    8dda:	ea 0f       	add	r30, r26
    8ddc:	fb 1f       	adc	r31, r27
    8dde:	dc 01       	movw	r26, r24
    8de0:	b5 95       	asr	r27
    8de2:	a7 95       	ror	r26
    8de4:	b5 95       	asr	r27
    8de6:	a7 95       	ror	r26
    8de8:	ea 0f       	add	r30, r26
    8dea:	fb 1f       	adc	r31, r27
    8dec:	73 e0       	ldi	r23, 0x03	; 3
    8dee:	95 95       	asr	r25
    8df0:	87 95       	ror	r24
    8df2:	7a 95       	dec	r23
    8df4:	e1 f7       	brne	.-8      	; 0x8dee <__vector_20+0x3f4>
    8df6:	8e 0f       	add	r24, r30
    8df8:	9f 1f       	adc	r25, r31

						if (chan_shift == 0x03) // 11-bit
    8dfa:	43 30       	cpi	r20, 0x03	; 3
    8dfc:	11 f4       	brne	.+4      	; 0x8e02 <__vector_20+0x408>
						{
							// Divide in case of 11-bit value
							itemp16 = itemp16 >> 1;								
    8dfe:	95 95       	asr	r25
    8e00:	87 95       	ror	r24
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    8e02:	e0 91 16 09 	lds	r30, 0x0916
    8e06:	f0 e0       	ldi	r31, 0x00	; 0
    8e08:	e7 5c       	subi	r30, 0xC7	; 199
    8e0a:	f9 4f       	sbci	r31, 0xF9	; 249
    8e0c:	e1 81       	ldd	r30, Z+1	; 0x01
							// Divide in case of 11-bit value
							itemp16 = itemp16 >> 1;								
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										
    8e0e:	8a 55       	subi	r24, 0x5A	; 90
    8e10:	91 4f       	sbci	r25, 0xF1	; 241

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    8e12:	ee 0f       	add	r30, r30
    8e14:	ff 0b       	sbc	r31, r31
    8e16:	e2 52       	subi	r30, 0x22	; 34
    8e18:	f7 4f       	sbci	r31, 0xF7	; 247
    8e1a:	91 83       	std	Z+1, r25	; 0x01
    8e1c:	80 83       	st	Z, r24
    8e1e:	2e 5f       	subi	r18, 0xFE	; 254
    8e20:	3f 4f       	sbci	r19, 0xFF	; 255
					chan_shift = 0x02;
				}

				// Work out which channel the data is intended for from the channel number data
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
    8e22:	2e 30       	cpi	r18, 0x0E	; 14
    8e24:	31 05       	cpc	r19, r1
    8e26:	09 f0       	breq	.+2      	; 0x8e2a <__vector_20+0x430>
    8e28:	b0 cf       	rjmp	.-160    	; 0x8d8a <__vector_20+0x390>
					sindex += 2;

				} // For each pair of bytes
			
				// RC sync established
				Interrupted = true;
    8e2a:	81 e0       	ldi	r24, 0x01	; 1
    8e2c:	80 93 ee 08 	sts	0x08EE, r24
				
				// Reset signal loss timer and Overdue state 
				Servo_TCNT2 = TCNT2;
    8e30:	80 91 b2 00 	lds	r24, 0x00B2
    8e34:	80 93 2c 05 	sts	0x052C, r24
				RC_Timeout = 0;
    8e38:	10 92 2b 05 	sts	0x052B, r1
    8e3c:	10 92 2a 05 	sts	0x052A, r1
				Overdue = false;
    8e40:	10 92 2e 05 	sts	0x052E, r1
    8e44:	aa c0       	rjmp	.+340    	; 0x8f9a <__vector_20+0x5a0>
		//* 4095 	= 2200us		 
		//*
		//************************************************************
		
		// Handle SXRL format
		if (Config.RxMode == MODEB)
    8e46:	95 30       	cpi	r25, 0x05	; 5
    8e48:	09 f0       	breq	.+2      	; 0x8e4c <__vector_20+0x452>
    8e4a:	a7 c0       	rjmp	.+334    	; 0x8f9a <__vector_20+0x5a0>
		{
			// Work out the expected number of bytes based on the vendor ID (1st byte)
			if (bytecount == 0)
    8e4c:	80 91 f0 08 	lds	r24, 0x08F0
    8e50:	81 11       	cpse	r24, r1
    8e52:	09 c0       	rjmp	.+18     	; 0x8e66 <__vector_20+0x46c>
			{
				// Process data when all packets received
				if (sBuffer[0] == MODEB_SYNCBYTE)		// 12-channel packet
    8e54:	80 91 7c 05 	lds	r24, 0x057C
    8e58:	81 3a       	cpi	r24, 0xA1	; 161
    8e5a:	11 f4       	brne	.+4      	; 0x8e60 <__vector_20+0x466>
				{
					packet_size = XBUS_FRAME_SIZE_12;
    8e5c:	8b e1       	ldi	r24, 0x1B	; 27
    8e5e:	01 c0       	rjmp	.+2      	; 0x8e62 <__vector_20+0x468>
				}
				else									// Probably a 16-channel packet
				{
					packet_size = XBUS_FRAME_SIZE_16;
    8e60:	83 e2       	ldi	r24, 0x23	; 35
    8e62:	80 93 15 09 	sts	0x0915, r24
				}
			}

			// Check checksum when all data received
			if (bytecount == (packet_size - 1))
    8e66:	20 91 f0 08 	lds	r18, 0x08F0
    8e6a:	80 91 15 09 	lds	r24, 0x0915
    8e6e:	30 e0       	ldi	r19, 0x00	; 0
    8e70:	90 e0       	ldi	r25, 0x00	; 0
    8e72:	01 97       	sbiw	r24, 0x01	; 1
    8e74:	28 17       	cp	r18, r24
    8e76:	39 07       	cpc	r19, r25
    8e78:	09 f0       	breq	.+2      	; 0x8e7c <__vector_20+0x482>
    8e7a:	8f c0       	rjmp	.+286    	; 0x8f9a <__vector_20+0x5a0>
    8e7c:	80 e0       	ldi	r24, 0x00	; 0
    8e7e:	90 e0       	ldi	r25, 0x00	; 0
    8e80:	c0 e0       	ldi	r28, 0x00	; 0
			{
				crc = 0;
			
				// Add up checksum for all bytes up to but not including the checksum
				for (j = 0; j < (packet_size - 2); j++)
    8e82:	4c 2f       	mov	r20, r28
    8e84:	50 e0       	ldi	r21, 0x00	; 0
    8e86:	20 91 15 09 	lds	r18, 0x0915
    8e8a:	30 e0       	ldi	r19, 0x00	; 0
    8e8c:	22 50       	subi	r18, 0x02	; 2
    8e8e:	31 09       	sbc	r19, r1
    8e90:	42 17       	cp	r20, r18
    8e92:	53 07       	cpc	r21, r19
    8e94:	44 f4       	brge	.+16     	; 0x8ea6 <__vector_20+0x4ac>
				{
					crc = CRC16(crc, sBuffer[j]);
    8e96:	fa 01       	movw	r30, r20
    8e98:	e4 58       	subi	r30, 0x84	; 132
    8e9a:	fa 4f       	sbci	r31, 0xFA	; 250
    8e9c:	60 81       	ld	r22, Z
    8e9e:	0e 94 f1 6c 	call	0xd9e2	; 0xd9e2 <CRC16>
			if (bytecount == (packet_size - 1))
			{
				crc = 0;
			
				// Add up checksum for all bytes up to but not including the checksum
				for (j = 0; j < (packet_size - 2); j++)
    8ea2:	cf 5f       	subi	r28, 0xFF	; 255
    8ea4:	ee cf       	rjmp	.-36     	; 0x8e82 <__vector_20+0x488>
				{
					crc = CRC16(crc, sBuffer[j]);
				}
			
				// Extract the packet's own checksum
				checkcrc = ((uint16_t)(sBuffer[packet_size - 2] << 8) | (uint16_t)(sBuffer[packet_size - 1]));
    8ea6:	a0 91 15 09 	lds	r26, 0x0915
    8eaa:	e0 91 15 09 	lds	r30, 0x0915
    8eae:	b0 e0       	ldi	r27, 0x00	; 0
    8eb0:	a6 58       	subi	r26, 0x86	; 134
    8eb2:	ba 4f       	sbci	r27, 0xFA	; 250
    8eb4:	2c 91       	ld	r18, X
    8eb6:	30 e0       	ldi	r19, 0x00	; 0
    8eb8:	32 2f       	mov	r19, r18
    8eba:	22 27       	eor	r18, r18
    8ebc:	f0 e0       	ldi	r31, 0x00	; 0
    8ebe:	e5 58       	subi	r30, 0x85	; 133
    8ec0:	fa 4f       	sbci	r31, 0xFA	; 250
    8ec2:	40 81       	ld	r20, Z
    8ec4:	24 2b       	or	r18, r20
				
				// Compare with the calculated one and process data if ok
				if (checkcrc == crc)
    8ec6:	28 17       	cp	r18, r24
    8ec8:	39 07       	cpc	r19, r25
    8eca:	09 f0       	breq	.+2      	; 0x8ece <__vector_20+0x4d4>
    8ecc:	66 c0       	rjmp	.+204    	; 0x8f9a <__vector_20+0x5a0>
				{
					// RC sync established
					Interrupted = true;
    8ece:	81 e0       	ldi	r24, 0x01	; 1
    8ed0:	80 93 ee 08 	sts	0x08EE, r24
					
					// Reset signal loss timer and Overdue state 					
					Servo_TCNT2 = TCNT2;
    8ed4:	80 91 b2 00 	lds	r24, 0x00B2
    8ed8:	80 93 2c 05 	sts	0x052C, r24
					RC_Timeout = 0;
    8edc:	10 92 2b 05 	sts	0x052B, r1
    8ee0:	10 92 2a 05 	sts	0x052A, r1
					Overdue = false;
    8ee4:	10 92 2e 05 	sts	0x052E, r1
    8ee8:	20 e0       	ldi	r18, 0x00	; 0
    8eea:	30 e0       	ldi	r19, 0x00	; 0
			
					// Copy unconverted channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Combine bytes from buffer
						TempRxChannel[j] = (uint16_t)(sBuffer[(j << 1) + 1] << 8) | (sBuffer[(j << 1) + 2]);
    8eec:	a9 01       	movw	r20, r18
    8eee:	44 0f       	add	r20, r20
    8ef0:	55 1f       	adc	r21, r21
    8ef2:	fa 01       	movw	r30, r20
    8ef4:	e4 58       	subi	r30, 0x84	; 132
    8ef6:	fa 4f       	sbci	r31, 0xFA	; 250
    8ef8:	81 81       	ldd	r24, Z+1	; 0x01
    8efa:	90 e0       	ldi	r25, 0x00	; 0
    8efc:	98 2f       	mov	r25, r24
    8efe:	88 27       	eor	r24, r24
    8f00:	62 81       	ldd	r22, Z+2	; 0x02
    8f02:	86 2b       	or	r24, r22
    8f04:	fa 01       	movw	r30, r20
    8f06:	ef 50       	subi	r30, 0x0F	; 15
    8f08:	f7 4f       	sbci	r31, 0xF7	; 247
    8f0a:	91 83       	std	Z+1, r25	; 0x01
    8f0c:	80 83       	st	Z, r24
    8f0e:	2f 5f       	subi	r18, 0xFF	; 255
    8f10:	3f 4f       	sbci	r19, 0xFF	; 255
					Servo_TCNT2 = TCNT2;
					RC_Timeout = 0;
					Overdue = false;
			
					// Copy unconverted channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    8f12:	28 30       	cpi	r18, 0x08	; 8
    8f14:	31 05       	cpc	r19, r1
    8f16:	51 f7       	brne	.-44     	; 0x8eec <__vector_20+0x4f2>
    8f18:	20 e0       	ldi	r18, 0x00	; 0
    8f1a:	30 e0       	ldi	r19, 0x00	; 0

					// Convert to system values
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Subtract MODEB offset
						itemp16 = TempRxChannel[j] - 2048;
    8f1c:	f9 01       	movw	r30, r18
    8f1e:	ee 0f       	add	r30, r30
    8f20:	ff 1f       	adc	r31, r31
    8f22:	ef 50       	subi	r30, 0x0F	; 15
    8f24:	f7 4f       	sbci	r31, 0xF7	; 247
    8f26:	80 81       	ld	r24, Z
    8f28:	91 81       	ldd	r25, Z+1	; 0x01
    8f2a:	98 50       	subi	r25, 0x08	; 8
						
						// Expand into OpenAero2 units x0.8544 (0.8555)	(1250/1463)
						itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 7) + (itemp16 >> 8);
    8f2c:	bc 01       	movw	r22, r24
    8f2e:	75 95       	asr	r23
    8f30:	67 95       	ror	r22
    8f32:	ac 01       	movw	r20, r24
    8f34:	55 95       	asr	r21
    8f36:	47 95       	ror	r20
    8f38:	55 95       	asr	r21
    8f3a:	47 95       	ror	r20
    8f3c:	46 0f       	add	r20, r22
    8f3e:	57 1f       	adc	r21, r23
    8f40:	bc 01       	movw	r22, r24
    8f42:	f4 e0       	ldi	r31, 0x04	; 4
    8f44:	75 95       	asr	r23
    8f46:	67 95       	ror	r22
    8f48:	fa 95       	dec	r31
    8f4a:	e1 f7       	brne	.-8      	; 0x8f44 <__vector_20+0x54a>
    8f4c:	46 0f       	add	r20, r22
    8f4e:	57 1f       	adc	r21, r23
    8f50:	bc 01       	movw	r22, r24
    8f52:	a5 e0       	ldi	r26, 0x05	; 5
    8f54:	75 95       	asr	r23
    8f56:	67 95       	ror	r22
    8f58:	aa 95       	dec	r26
    8f5a:	e1 f7       	brne	.-8      	; 0x8f54 <__vector_20+0x55a>
    8f5c:	46 0f       	add	r20, r22
    8f5e:	57 1f       	adc	r21, r23
    8f60:	bc 01       	movw	r22, r24
    8f62:	66 0f       	add	r22, r22
    8f64:	67 2f       	mov	r22, r23
    8f66:	66 1f       	adc	r22, r22
    8f68:	77 0b       	sbc	r23, r23
    8f6a:	46 0f       	add	r20, r22
    8f6c:	57 1f       	adc	r21, r23
    8f6e:	89 2f       	mov	r24, r25
    8f70:	99 0f       	add	r25, r25
    8f72:	99 0b       	sbc	r25, r25
    8f74:	f9 01       	movw	r30, r18
    8f76:	e7 5c       	subi	r30, 0xC7	; 199
    8f78:	f9 4f       	sbci	r31, 0xF9	; 249

						// Add back in OpenAero2 offset
						RxChannel[Config.ChannelOrder[j]] = itemp16 + 3750;
    8f7a:	e1 81       	ldd	r30, Z+1	; 0x01
					{
						// Subtract MODEB offset
						itemp16 = TempRxChannel[j] - 2048;
						
						// Expand into OpenAero2 units x0.8544 (0.8555)	(1250/1463)
						itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 7) + (itemp16 >> 8);
    8f7c:	84 0f       	add	r24, r20
    8f7e:	95 1f       	adc	r25, r21

						// Add back in OpenAero2 offset
						RxChannel[Config.ChannelOrder[j]] = itemp16 + 3750;
    8f80:	8a 55       	subi	r24, 0x5A	; 90
    8f82:	91 4f       	sbci	r25, 0xF1	; 241
    8f84:	ee 0f       	add	r30, r30
    8f86:	ff 0b       	sbc	r31, r31
    8f88:	e2 52       	subi	r30, 0x22	; 34
    8f8a:	f7 4f       	sbci	r31, 0xF7	; 247
    8f8c:	91 83       	std	Z+1, r25	; 0x01
    8f8e:	80 83       	st	Z, r24
    8f90:	2f 5f       	subi	r18, 0xFF	; 255
    8f92:	3f 4f       	sbci	r19, 0xFF	; 255
						// Combine bytes from buffer
						TempRxChannel[j] = (uint16_t)(sBuffer[(j << 1) + 1] << 8) | (sBuffer[(j << 1) + 2]);
					}

					// Convert to system values
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    8f94:	28 30       	cpi	r18, 0x08	; 8
    8f96:	31 05       	cpc	r19, r1
    8f98:	09 f6       	brne	.-126    	; 0x8f1c <__vector_20+0x522>
		//* 16000	= 2000us
		//*
		//************************************************************
		
		// Handle HoTT SUMD format
		if (Config.RxMode == SUMD)
    8f9a:	80 91 62 06 	lds	r24, 0x0662
    8f9e:	86 30       	cpi	r24, 0x06	; 6
    8fa0:	31 f0       	breq	.+12     	; 0x8fae <__vector_20+0x5b4>
		//************************************************************
		//* Common exit code
		//************************************************************

		// Increment byte count
		bytecount++;
    8fa2:	80 91 f0 08 	lds	r24, 0x08F0
    8fa6:	8f 5f       	subi	r24, 0xFF	; 255
    8fa8:	80 93 f0 08 	sts	0x08F0, r24
    8fac:	96 c0       	rjmp	.+300    	; 0x90da <__vector_20+0x6e0>
		
		// Handle HoTT SUMD format
		if (Config.RxMode == SUMD)
		{
			// Work out the expected number of bytes based on the channel info (3rd byte)
			if (bytecount == 2)
    8fae:	80 91 f0 08 	lds	r24, 0x08F0
    8fb2:	82 30       	cpi	r24, 0x02	; 2
    8fb4:	69 f4       	brne	.+26     	; 0x8fd0 <__vector_20+0x5d6>
			{
				// Look at the number of channels x 2 + 2(CRC) + 3(Header)
				packet_size = (sBuffer[2] << 1) + 5;
    8fb6:	80 91 7e 05 	lds	r24, 0x057E
    8fba:	88 0f       	add	r24, r24
    8fbc:	8b 5f       	subi	r24, 0xFB	; 251
    8fbe:	80 93 15 09 	sts	0x0915, r24
				
				// Sanity check for packet size
				if (packet_size > MAXSUMDPACKET)
    8fc2:	80 91 15 09 	lds	r24, 0x0915
    8fc6:	86 34       	cpi	r24, 0x46	; 70
    8fc8:	18 f0       	brcs	.+6      	; 0x8fd0 <__vector_20+0x5d6>
				{
					packet_size = MAXSUMDPACKET;
    8fca:	85 e4       	ldi	r24, 0x45	; 69
    8fcc:	80 93 15 09 	sts	0x0915, r24
				}
			}

			// Check checksum when all data received and packet size determined
			if ((packet_size > 0) && (bytecount == (packet_size - 1)))
    8fd0:	80 91 15 09 	lds	r24, 0x0915
    8fd4:	88 23       	and	r24, r24
    8fd6:	29 f3       	breq	.-54     	; 0x8fa2 <__vector_20+0x5a8>
    8fd8:	20 91 f0 08 	lds	r18, 0x08F0
    8fdc:	80 91 15 09 	lds	r24, 0x0915
    8fe0:	30 e0       	ldi	r19, 0x00	; 0
    8fe2:	90 e0       	ldi	r25, 0x00	; 0
    8fe4:	01 97       	sbiw	r24, 0x01	; 1
    8fe6:	28 17       	cp	r18, r24
    8fe8:	39 07       	cpc	r19, r25
    8fea:	d9 f6       	brne	.-74     	; 0x8fa2 <__vector_20+0x5a8>
    8fec:	80 e0       	ldi	r24, 0x00	; 0
    8fee:	90 e0       	ldi	r25, 0x00	; 0
    8ff0:	c0 e0       	ldi	r28, 0x00	; 0
			{
				crc = 0;
			
				// Add up checksum for all bytes up to but not including the checksum
				for (j = 0; j < (packet_size - 2); j++)
    8ff2:	4c 2f       	mov	r20, r28
    8ff4:	50 e0       	ldi	r21, 0x00	; 0
    8ff6:	20 91 15 09 	lds	r18, 0x0915
    8ffa:	30 e0       	ldi	r19, 0x00	; 0
    8ffc:	22 50       	subi	r18, 0x02	; 2
    8ffe:	31 09       	sbc	r19, r1
    9000:	42 17       	cp	r20, r18
    9002:	53 07       	cpc	r21, r19
    9004:	44 f4       	brge	.+16     	; 0x9016 <__vector_20+0x61c>
				{
					crc = CRC16(crc, sBuffer[j]);
    9006:	fa 01       	movw	r30, r20
    9008:	e4 58       	subi	r30, 0x84	; 132
    900a:	fa 4f       	sbci	r31, 0xFA	; 250
    900c:	60 81       	ld	r22, Z
    900e:	0e 94 f1 6c 	call	0xd9e2	; 0xd9e2 <CRC16>
			if ((packet_size > 0) && (bytecount == (packet_size - 1)))
			{
				crc = 0;
			
				// Add up checksum for all bytes up to but not including the checksum
				for (j = 0; j < (packet_size - 2); j++)
    9012:	cf 5f       	subi	r28, 0xFF	; 255
    9014:	ee cf       	rjmp	.-36     	; 0x8ff2 <__vector_20+0x5f8>
				{
					crc = CRC16(crc, sBuffer[j]);
				}
			
				// Extract the packet's own checksum
				checkcrc = ((uint16_t)(sBuffer[packet_size - 2] << 8) | (uint16_t)(sBuffer[packet_size - 1]));
    9016:	a0 91 15 09 	lds	r26, 0x0915
    901a:	e0 91 15 09 	lds	r30, 0x0915
    901e:	b0 e0       	ldi	r27, 0x00	; 0
    9020:	a6 58       	subi	r26, 0x86	; 134
    9022:	ba 4f       	sbci	r27, 0xFA	; 250
    9024:	2c 91       	ld	r18, X
    9026:	30 e0       	ldi	r19, 0x00	; 0
    9028:	32 2f       	mov	r19, r18
    902a:	22 27       	eor	r18, r18
    902c:	f0 e0       	ldi	r31, 0x00	; 0
    902e:	e5 58       	subi	r30, 0x85	; 133
    9030:	fa 4f       	sbci	r31, 0xFA	; 250
    9032:	40 81       	ld	r20, Z
    9034:	24 2b       	or	r18, r20
				
				// Compare with the calculated one and process data if ok
				if (checkcrc == crc)
    9036:	28 17       	cp	r18, r24
    9038:	39 07       	cpc	r19, r25
    903a:	09 f0       	breq	.+2      	; 0x903e <__vector_20+0x644>
    903c:	b2 cf       	rjmp	.-156    	; 0x8fa2 <__vector_20+0x5a8>
				{
					// RC sync established
					Interrupted = true;
    903e:	81 e0       	ldi	r24, 0x01	; 1
    9040:	80 93 ee 08 	sts	0x08EE, r24
					
					// Reset signal loss timer and Overdue state 					
					Servo_TCNT2 = TCNT2;
    9044:	80 91 b2 00 	lds	r24, 0x00B2
    9048:	80 93 2c 05 	sts	0x052C, r24
					RC_Timeout = 0;
    904c:	10 92 2b 05 	sts	0x052B, r1
    9050:	10 92 2a 05 	sts	0x052A, r1
					Overdue = false;
    9054:	10 92 2e 05 	sts	0x052E, r1
    9058:	20 e0       	ldi	r18, 0x00	; 0
    905a:	30 e0       	ldi	r19, 0x00	; 0
			
					// Copy unconverted channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Combine bytes from buffer
						TempRxChannel[j] = (uint16_t)(sBuffer[(j << 1) + 3] << 8) | (sBuffer[(j << 1) + 4]);
    905c:	a9 01       	movw	r20, r18
    905e:	44 0f       	add	r20, r20
    9060:	55 1f       	adc	r21, r21
    9062:	fa 01       	movw	r30, r20
    9064:	e4 58       	subi	r30, 0x84	; 132
    9066:	fa 4f       	sbci	r31, 0xFA	; 250
    9068:	83 81       	ldd	r24, Z+3	; 0x03
    906a:	90 e0       	ldi	r25, 0x00	; 0
    906c:	98 2f       	mov	r25, r24
    906e:	88 27       	eor	r24, r24
    9070:	64 81       	ldd	r22, Z+4	; 0x04
    9072:	86 2b       	or	r24, r22
    9074:	fa 01       	movw	r30, r20
    9076:	ef 50       	subi	r30, 0x0F	; 15
    9078:	f7 4f       	sbci	r31, 0xF7	; 247
    907a:	91 83       	std	Z+1, r25	; 0x01
    907c:	80 83       	st	Z, r24
    907e:	2f 5f       	subi	r18, 0xFF	; 255
    9080:	3f 4f       	sbci	r19, 0xFF	; 255
					Servo_TCNT2 = TCNT2;
					RC_Timeout = 0;
					Overdue = false;
			
					// Copy unconverted channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    9082:	28 30       	cpi	r18, 0x08	; 8
    9084:	31 05       	cpc	r19, r1
    9086:	51 f7       	brne	.-44     	; 0x905c <__vector_20+0x662>
    9088:	20 e0       	ldi	r18, 0x00	; 0
    908a:	30 e0       	ldi	r19, 0x00	; 0

					// Convert to system values
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Subtract SUMD offset
						itemp16 = TempRxChannel[j] - 12000;
    908c:	f9 01       	movw	r30, r18
    908e:	ee 0f       	add	r30, r30
    9090:	ff 1f       	adc	r31, r31
    9092:	ef 50       	subi	r30, 0x0F	; 15
    9094:	f7 4f       	sbci	r31, 0xF7	; 247
    9096:	80 81       	ld	r24, Z
    9098:	91 81       	ldd	r25, Z+1	; 0x01
    909a:	80 5e       	subi	r24, 0xE0	; 224
    909c:	9e 42       	sbci	r25, 0x2E	; 46
						
						// Expand into OpenAero2 units x0.3125 (0.3125)	(1250/4000)
						// 0.25 + 0.0625 (1/4 + 1/16)
						itemp16 = (itemp16 >> 2) + (itemp16 >> 4);
    909e:	ac 01       	movw	r20, r24
    90a0:	55 95       	asr	r21
    90a2:	47 95       	ror	r20
    90a4:	55 95       	asr	r21
    90a6:	47 95       	ror	r20
    90a8:	74 e0       	ldi	r23, 0x04	; 4
    90aa:	95 95       	asr	r25
    90ac:	87 95       	ror	r24
    90ae:	7a 95       	dec	r23
    90b0:	e1 f7       	brne	.-8      	; 0x90aa <__vector_20+0x6b0>
    90b2:	f9 01       	movw	r30, r18
    90b4:	e7 5c       	subi	r30, 0xC7	; 199
    90b6:	f9 4f       	sbci	r31, 0xF9	; 249

						// Add back in OpenAero2 offset
						RxChannel[Config.ChannelOrder[j]] = itemp16 + 3750;
    90b8:	e1 81       	ldd	r30, Z+1	; 0x01
						// Subtract SUMD offset
						itemp16 = TempRxChannel[j] - 12000;
						
						// Expand into OpenAero2 units x0.3125 (0.3125)	(1250/4000)
						// 0.25 + 0.0625 (1/4 + 1/16)
						itemp16 = (itemp16 >> 2) + (itemp16 >> 4);
    90ba:	84 0f       	add	r24, r20
    90bc:	95 1f       	adc	r25, r21

						// Add back in OpenAero2 offset
						RxChannel[Config.ChannelOrder[j]] = itemp16 + 3750;
    90be:	8a 55       	subi	r24, 0x5A	; 90
    90c0:	91 4f       	sbci	r25, 0xF1	; 241
    90c2:	ee 0f       	add	r30, r30
    90c4:	ff 0b       	sbc	r31, r31
    90c6:	e2 52       	subi	r30, 0x22	; 34
    90c8:	f7 4f       	sbci	r31, 0xF7	; 247
    90ca:	91 83       	std	Z+1, r25	; 0x01
    90cc:	80 83       	st	Z, r24
    90ce:	2f 5f       	subi	r18, 0xFF	; 255
    90d0:	3f 4f       	sbci	r19, 0xFF	; 255
						// Combine bytes from buffer
						TempRxChannel[j] = (uint16_t)(sBuffer[(j << 1) + 3] << 8) | (sBuffer[(j << 1) + 4]);
					}

					// Convert to system values
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    90d2:	28 30       	cpi	r18, 0x08	; 8
    90d4:	31 05       	cpc	r19, r1
    90d6:	d1 f6       	brne	.-76     	; 0x908c <__vector_20+0x692>
    90d8:	64 cf       	rjmp	.-312    	; 0x8fa2 <__vector_20+0x5a8>

		// Increment byte count
		bytecount++;
	
	} // Valid data
}
    90da:	ff 91       	pop	r31
    90dc:	ef 91       	pop	r30
    90de:	df 91       	pop	r29
    90e0:	cf 91       	pop	r28
    90e2:	bf 91       	pop	r27
    90e4:	af 91       	pop	r26
    90e6:	9f 91       	pop	r25
    90e8:	8f 91       	pop	r24
    90ea:	7f 91       	pop	r23
    90ec:	6f 91       	pop	r22
    90ee:	5f 91       	pop	r21
    90f0:	4f 91       	pop	r20
    90f2:	3f 91       	pop	r19
    90f4:	2f 91       	pop	r18
    90f6:	0f 90       	pop	r0
    90f8:	0f be       	out	0x3f, r0	; 63
    90fa:	0f 90       	pop	r0
    90fc:	1f 90       	pop	r1
    90fe:	18 95       	reti

00009100 <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    9100:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    9102:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    9106:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    910a:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    910c:	e1 ec       	ldi	r30, 0xC1	; 193
    910e:	f0 e0       	ldi	r31, 0x00	; 0
    9110:	80 81       	ld	r24, Z
    9112:	8f 7e       	andi	r24, 0xEF	; 239
    9114:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    9116:	80 81       	ld	r24, Z
    9118:	8f 77       	andi	r24, 0x7F	; 127
    911a:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    911c:	8f e0       	ldi	r24, 0x0F	; 15
    911e:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    9120:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    9122:	78 94       	sei
    9124:	08 95       	ret

00009126 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    9126:	f8 94       	cli
	
	switch (Config.RxMode)
    9128:	80 91 62 06 	lds	r24, 0x0662
    912c:	81 30       	cpi	r24, 0x01	; 1
    912e:	e9 f0       	breq	.+58     	; 0x916a <init_int+0x44>
    9130:	44 f4       	brge	.+16     	; 0x9142 <init_int+0x1c>
    9132:	81 11       	cpse	r24, r1
    9134:	30 c0       	rjmp	.+96     	; 0x9196 <init_int+0x70>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    9136:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    913a:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    913e:	84 e0       	ldi	r24, 0x04	; 4
    9140:	1f c0       	rjmp	.+62     	; 0x9180 <init_int+0x5a>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    9142:	87 30       	cpi	r24, 0x07	; 7
    9144:	44 f5       	brge	.+80     	; 0x9196 <init_int+0x70>
		case MODEB:
		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    9146:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    914a:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    914e:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    9150:	80 91 c1 00 	lds	r24, 0x00C1
    9154:	80 68       	ori	r24, 0x80	; 128
    9156:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    915a:	80 91 c1 00 	lds	r24, 0x00C1
    915e:	80 61       	ori	r24, 0x10	; 16
    9160:	80 93 c1 00 	sts	0x00C1, r24
			
			packet_size = 0;					// Reset packet size until new data comes in
    9164:	10 92 15 09 	sts	0x0915, r1
			
			break;
    9168:	16 c0       	rjmp	.+44     	; 0x9196 <init_int+0x70>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    916a:	80 91 6c 00 	lds	r24, 0x006C
    916e:	81 60       	ori	r24, 0x01	; 1
    9170:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    9174:	80 91 73 00 	lds	r24, 0x0073
    9178:	81 60       	ori	r24, 0x01	; 1
    917a:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    917e:	87 e0       	ldi	r24, 0x07	; 7
    9180:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    9182:	80 91 c1 00 	lds	r24, 0x00C1
    9186:	8f 77       	andi	r24, 0x7F	; 127
    9188:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    918c:	80 91 c1 00 	lds	r24, 0x00C1
    9190:	8f 7e       	andi	r24, 0xEF	; 239
    9192:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    9196:	8f e0       	ldi	r24, 0x0F	; 15
    9198:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    919a:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    919c:	78 94       	sei
    919e:	08 95       	ret

000091a0 <menu_channel>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_channel(void)
{
    91a0:	8f 92       	push	r8
    91a2:	af 92       	push	r10
    91a4:	bf 92       	push	r11
    91a6:	cf 92       	push	r12
    91a8:	df 92       	push	r13
    91aa:	ef 92       	push	r14
    91ac:	ff 92       	push	r15
    91ae:	0f 93       	push	r16
    91b0:	1f 93       	push	r17
    91b2:	cf 93       	push	r28
    91b4:	df 93       	push	r29
    91b6:	00 d0       	rcall	.+0      	; 0x91b8 <menu_channel+0x18>
    91b8:	00 d0       	rcall	.+0      	; 0x91ba <menu_channel+0x1a>
    91ba:	1f 92       	push	r1
    91bc:	cd b7       	in	r28, 0x3d	; 61
    91be:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint16_t reference = CHSTART;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    91c0:	80 91 08 05 	lds	r24, 0x0508
    91c4:	88 23       	and	r24, r24
    91c6:	09 f4       	brne	.+2      	; 0x91ca <menu_channel+0x2a>
    91c8:	68 c0       	rjmp	.+208    	; 0x929a <menu_channel+0xfa>
	{
		sub_top = CHSTART;
    91ca:	80 e8       	ldi	r24, 0x80	; 128
    91cc:	91 e0       	ldi	r25, 0x01	; 1
    91ce:	90 93 4f 05 	sts	0x054F, r25
    91d2:	80 93 4e 05 	sts	0x054E, r24
		menu_flag = 0;
    91d6:	10 92 08 05 	sts	0x0508, r1
    91da:	5f c0       	rjmp	.+190    	; 0x929a <menu_channel+0xfa>
	while(button != BACK)
	{
		value_ptr = &Config.CustomChannelOrder[0];

		// Print menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)Ch_menu_ranges, 0, (const uint16_t*)ChMenuOffsets, (const uint16_t*)ChMenuText, cursor);
    91dc:	a0 90 04 05 	lds	r10, 0x0504
    91e0:	b0 90 05 05 	lds	r11, 0x0505
    91e4:	3d e0       	ldi	r19, 0x0D	; 13
    91e6:	c3 2e       	mov	r12, r19
    91e8:	35 e2       	ldi	r19, 0x25	; 37
    91ea:	d3 2e       	mov	r13, r19
    91ec:	4d ef       	ldi	r20, 0xFD	; 253
    91ee:	e4 2e       	mov	r14, r20
    91f0:	44 e2       	ldi	r20, 0x24	; 36
    91f2:	f4 2e       	mov	r15, r20
    91f4:	00 e0       	ldi	r16, 0x00	; 0
    91f6:	25 ed       	ldi	r18, 0xD5	; 213
    91f8:	34 e2       	ldi	r19, 0x24	; 36
    91fa:	44 e9       	ldi	r20, 0x94	; 148
    91fc:	58 e0       	ldi	r21, 0x08	; 8
    91fe:	60 e8       	ldi	r22, 0x80	; 128
    9200:	71 e0       	ldi	r23, 0x01	; 1
    9202:	80 91 4e 05 	lds	r24, 0x054E
    9206:	90 91 4f 05 	lds	r25, 0x054F
    920a:	0e 94 ba 51 	call	0xa374	; 0xa374 <print_menu_items>

		// Handle menu changes
		update_menu(CHITEMS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    920e:	59 e4       	ldi	r21, 0x49	; 73
    9210:	c5 2e       	mov	r12, r21
    9212:	55 e0       	ldi	r21, 0x05	; 5
    9214:	d5 2e       	mov	r13, r21
    9216:	6e e4       	ldi	r22, 0x4E	; 78
    9218:	e6 2e       	mov	r14, r22
    921a:	65 e0       	ldi	r22, 0x05	; 5
    921c:	f6 2e       	mov	r15, r22
    921e:	04 e0       	ldi	r16, 0x04	; 4
    9220:	15 e0       	ldi	r17, 0x05	; 5
    9222:	20 91 1f 09 	lds	r18, 0x091F
    9226:	40 e0       	ldi	r20, 0x00	; 0
    9228:	50 e0       	ldi	r21, 0x00	; 0
    922a:	60 e8       	ldi	r22, 0x80	; 128
    922c:	71 e0       	ldi	r23, 0x01	; 1
    922e:	88 e0       	ldi	r24, 0x08	; 8
    9230:	90 e0       	ldi	r25, 0x00	; 0
    9232:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <update_menu>
		range = get_menu_range ((const unsigned char*)Ch_menu_ranges, (menu_temp - reference));
    9236:	60 91 49 05 	lds	r22, 0x0549
    923a:	60 58       	subi	r22, 0x80	; 128
    923c:	85 ed       	ldi	r24, 0xD5	; 213
    923e:	94 e2       	ldi	r25, 0x24	; 36
    9240:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <get_menu_range>
    9244:	29 83       	std	Y+1, r18	; 0x01
    9246:	3a 83       	std	Y+2, r19	; 0x02
    9248:	4b 83       	std	Y+3, r20	; 0x03
    924a:	5c 83       	std	Y+4, r21	; 0x04
    924c:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    924e:	80 91 1f 09 	lds	r24, 0x091F
    9252:	80 3e       	cpi	r24, 0xE0	; 224
    9254:	c1 f4       	brne	.+48     	; 0x9286 <menu_channel+0xe6>
		{
			do_menu_item(menu_temp, value_ptr + (menu_temp - reference), 1, range, 0, CHTEXT, false, 0);
    9256:	80 91 49 05 	lds	r24, 0x0549
    925a:	90 91 4a 05 	lds	r25, 0x054A
    925e:	bc 01       	movw	r22, r24
    9260:	6c 5e       	subi	r22, 0xEC	; 236
    9262:	78 4f       	sbci	r23, 0xF8	; 248
    9264:	1f 92       	push	r1
    9266:	1f 92       	push	r1
    9268:	81 2c       	mov	r8, r1
    926a:	29 e6       	ldi	r18, 0x69	; 105
    926c:	a2 2e       	mov	r10, r18
    926e:	b1 2c       	mov	r11, r1
    9270:	c1 2c       	mov	r12, r1
    9272:	e9 80       	ldd	r14, Y+1	; 0x01
    9274:	fa 80       	ldd	r15, Y+2	; 0x02
    9276:	0b 81       	ldd	r16, Y+3	; 0x03
    9278:	1c 81       	ldd	r17, Y+4	; 0x04
    927a:	2d 81       	ldd	r18, Y+5	; 0x05
    927c:	41 e0       	ldi	r20, 0x01	; 1
    927e:	0e 94 fe 4a 	call	0x95fc	; 0x95fc <do_menu_item>
    9282:	0f 90       	pop	r0
    9284:	0f 90       	pop	r0
		}

		// Update when exiting
		if (button == ENTER)
    9286:	80 91 1f 09 	lds	r24, 0x091F
    928a:	80 3e       	cpi	r24, 0xE0	; 224
    928c:	31 f4       	brne	.+12     	; 0x929a <menu_channel+0xfa>
		{
			// Refresh channel order
			UpdateChOrder();
    928e:	0e 94 a2 6a 	call	0xd544	; 0xd544 <UpdateChOrder>
			
			Save_Config_to_EEPROM(); // Save value and return
    9292:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    9296:	0e 94 00 54 	call	0xa800	; 0xa800 <Wait_BUTTON4>
	{
		sub_top = CHSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    929a:	80 91 1f 09 	lds	r24, 0x091F
    929e:	80 37       	cpi	r24, 0x70	; 112
    92a0:	09 f0       	breq	.+2      	; 0x92a4 <menu_channel+0x104>
    92a2:	9c cf       	rjmp	.-200    	; 0x91dc <menu_channel+0x3c>
			
			Save_Config_to_EEPROM(); // Save value and return
			Wait_BUTTON4();			 // Wait for user's finger off the button
		}
	}
}
    92a4:	0f 90       	pop	r0
    92a6:	0f 90       	pop	r0
    92a8:	0f 90       	pop	r0
    92aa:	0f 90       	pop	r0
    92ac:	0f 90       	pop	r0
    92ae:	df 91       	pop	r29
    92b0:	cf 91       	pop	r28
    92b2:	1f 91       	pop	r17
    92b4:	0f 91       	pop	r16
    92b6:	ff 90       	pop	r15
    92b8:	ef 90       	pop	r14
    92ba:	df 90       	pop	r13
    92bc:	cf 90       	pop	r12
    92be:	bf 90       	pop	r11
    92c0:	af 90       	pop	r10
    92c2:	8f 90       	pop	r8
    92c4:	08 95       	ret

000092c6 <menu_curves>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_curves(void)
{
    92c6:	af 92       	push	r10
    92c8:	bf 92       	push	r11
    92ca:	cf 92       	push	r12
    92cc:	df 92       	push	r13
    92ce:	ef 92       	push	r14
    92d0:	ff 92       	push	r15
    92d2:	0f 93       	push	r16
    92d4:	1f 93       	push	r17
    92d6:	cf 93       	push	r28
	int8_t *value_ptr;
	uint16_t reference = CURVESSTARTE;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    92d8:	80 91 08 05 	lds	r24, 0x0508
    92dc:	88 23       	and	r24, r24
    92de:	41 f0       	breq	.+16     	; 0x92f0 <menu_curves+0x2a>
	{
		sub_top = CURVESSTARTE;			
    92e0:	83 e9       	ldi	r24, 0x93	; 147
    92e2:	91 e0       	ldi	r25, 0x01	; 1
    92e4:	90 93 4f 05 	sts	0x054F, r25
    92e8:	80 93 4e 05 	sts	0x054E, r24
		menu_flag = 0;
    92ec:	10 92 08 05 	sts	0x0508, r1

		// Stop unwanted exit to main menu
		if (button == ABORT)
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
			button = NONE;
    92f0:	c0 ef       	ldi	r28, 0xF0	; 240
	{
		sub_top = CURVESSTARTE;			
		menu_flag = 0;
	}

	while(button != BACK)
    92f2:	80 91 1f 09 	lds	r24, 0x091F
    92f6:	80 37       	cpi	r24, 0x70	; 112
    92f8:	09 f4       	brne	.+2      	; 0x92fc <menu_curves+0x36>
    92fa:	4b c0       	rjmp	.+150    	; 0x9392 <menu_curves+0xcc>
	{
		value_ptr = &Config.Curve[0].Point1;

		// Print top level menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)Curves_menu_ranges, 0, (const uint16_t*)CurvesMenuOffsets, (const uint16_t*)CurvesMenuText, cursor);
    92fc:	a0 90 04 05 	lds	r10, 0x0504
    9300:	b0 90 05 05 	lds	r11, 0x0505
    9304:	89 e1       	ldi	r24, 0x19	; 25
    9306:	c8 2e       	mov	r12, r24
    9308:	86 e2       	ldi	r24, 0x26	; 38
    930a:	d8 2e       	mov	r13, r24
    930c:	9d e0       	ldi	r25, 0x0D	; 13
    930e:	e9 2e       	mov	r14, r25
    9310:	96 e2       	ldi	r25, 0x26	; 38
    9312:	f9 2e       	mov	r15, r25
    9314:	00 e0       	ldi	r16, 0x00	; 0
    9316:	2d e1       	ldi	r18, 0x1D	; 29
    9318:	35 e2       	ldi	r19, 0x25	; 37
    931a:	44 e6       	ldi	r20, 0x64	; 100
    931c:	58 e0       	ldi	r21, 0x08	; 8
    931e:	63 e9       	ldi	r22, 0x93	; 147
    9320:	71 e0       	ldi	r23, 0x01	; 1
    9322:	80 91 4e 05 	lds	r24, 0x054E
    9326:	90 91 4f 05 	lds	r25, 0x054F
    932a:	0e 94 ba 51 	call	0xa374	; 0xa374 <print_menu_items>

		// Handle menu navigation
		update_menu(NUMBEROFCURVES, reference, 0, button, &cursor, &sub_top, &menu_temp);
    932e:	29 e4       	ldi	r18, 0x49	; 73
    9330:	c2 2e       	mov	r12, r18
    9332:	25 e0       	ldi	r18, 0x05	; 5
    9334:	d2 2e       	mov	r13, r18
    9336:	3e e4       	ldi	r19, 0x4E	; 78
    9338:	e3 2e       	mov	r14, r19
    933a:	35 e0       	ldi	r19, 0x05	; 5
    933c:	f3 2e       	mov	r15, r19
    933e:	04 e0       	ldi	r16, 0x04	; 4
    9340:	15 e0       	ldi	r17, 0x05	; 5
    9342:	20 91 1f 09 	lds	r18, 0x091F
    9346:	40 e0       	ldi	r20, 0x00	; 0
    9348:	50 e0       	ldi	r21, 0x00	; 0
    934a:	63 e9       	ldi	r22, 0x93	; 147
    934c:	71 e0       	ldi	r23, 0x01	; 1
    934e:	86 e0       	ldi	r24, 0x06	; 6
    9350:	90 e0       	ldi	r25, 0x00	; 0
    9352:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <update_menu>

		// Edit selected curve
		if (button == ENTER)
    9356:	80 91 1f 09 	lds	r24, 0x091F
    935a:	80 3e       	cpi	r24, 0xE0	; 224
    935c:	31 f4       	brne	.+12     	; 0x936a <menu_curves+0xa4>
		{
			edit_curve_item(menu_temp - reference, CURVE);
    935e:	80 91 49 05 	lds	r24, 0x0549
    9362:	64 e0       	ldi	r22, 0x04	; 4
    9364:	83 59       	subi	r24, 0x93	; 147
    9366:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <edit_curve_item>
		}

		// Stop unwanted exit to main menu
		if (button == ABORT)
    936a:	80 91 1f 09 	lds	r24, 0x091F
    936e:	80 3a       	cpi	r24, 0xA0	; 160
    9370:	21 f4       	brne	.+8      	; 0x937a <menu_curves+0xb4>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    9372:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <Wait_BUTTON1>
			button = NONE;
    9376:	c0 93 1f 09 	sts	0x091F, r28
		}

		// Save and exit 
		if (button == ENTER)
    937a:	80 91 1f 09 	lds	r24, 0x091F
    937e:	80 3e       	cpi	r24, 0xE0	; 224
    9380:	09 f0       	breq	.+2      	; 0x9384 <menu_curves+0xbe>
    9382:	b7 cf       	rjmp	.-146    	; 0x92f2 <menu_curves+0x2c>
		{
			Save_Config_to_EEPROM(); // Save value and return
    9384:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    9388:	0e 94 00 54 	call	0xa800	; 0xa800 <Wait_BUTTON4>
			Wait_BUTTON1();	
    938c:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <Wait_BUTTON1>
    9390:	b0 cf       	rjmp	.-160    	; 0x92f2 <menu_curves+0x2c>
		}
	}
}
    9392:	cf 91       	pop	r28
    9394:	1f 91       	pop	r17
    9396:	0f 91       	pop	r16
    9398:	ff 90       	pop	r15
    939a:	ef 90       	pop	r14
    939c:	df 90       	pop	r13
    939e:	cf 90       	pop	r12
    93a0:	bf 90       	pop	r11
    93a2:	af 90       	pop	r10
    93a4:	08 95       	ret

000093a6 <print_menu_frame>:
//************************************************************
// Print basic menu frame
// style = menu style
//************************************************************
void print_menu_frame(uint8_t style)
{
    93a6:	cf 93       	push	r28
    93a8:	c8 2f       	mov	r28, r24
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    93aa:	2b e3       	ldi	r18, 0x3B	; 59
    93ac:	30 e0       	ldi	r19, 0x00	; 0
    93ae:	46 e2       	ldi	r20, 0x26	; 38
    93b0:	50 e0       	ldi	r21, 0x00	; 0
    93b2:	6f ef       	ldi	r22, 0xFF	; 255
    93b4:	71 e0       	ldi	r23, 0x01	; 1
    93b6:	8a e0       	ldi	r24, 0x0A	; 10
    93b8:	90 e0       	ldi	r25, 0x00	; 0
    93ba:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    93be:	2b e3       	ldi	r18, 0x3B	; 59
    93c0:	30 e0       	ldi	r19, 0x00	; 0
    93c2:	40 e5       	ldi	r20, 0x50	; 80
    93c4:	50 e0       	ldi	r21, 0x00	; 0
    93c6:	6f ef       	ldi	r22, 0xFF	; 255
    93c8:	71 e0       	ldi	r23, 0x01	; 1
    93ca:	89 e0       	ldi	r24, 0x09	; 9
    93cc:	90 e0       	ldi	r25, 0x00	; 0
    93ce:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

	switch (style)
    93d2:	c3 30       	cpi	r28, 0x03	; 3
    93d4:	41 f1       	breq	.+80     	; 0x9426 <print_menu_frame+0x80>
    93d6:	70 f4       	brcc	.+28     	; 0x93f4 <print_menu_frame+0x4e>
    93d8:	cc 23       	and	r28, r28
    93da:	c1 f1       	breq	.+112    	; 0x944c <print_menu_frame+0xa6>
    93dc:	c1 30       	cpi	r28, 0x01	; 1
    93de:	09 f0       	breq	.+2      	; 0x93e2 <print_menu_frame+0x3c>
    93e0:	7a c0       	rjmp	.+244    	; 0x94d6 <print_menu_frame+0x130>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
			break;
			
		case EDIT:
			// For editing items
			LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Def.
    93e2:	26 e3       	ldi	r18, 0x36	; 54
    93e4:	30 e0       	ldi	r19, 0x00	; 0
    93e6:	40 e0       	ldi	r20, 0x00	; 0
    93e8:	50 e0       	ldi	r21, 0x00	; 0
    93ea:	6d e8       	ldi	r22, 0x8D	; 141
    93ec:	7f e0       	ldi	r23, 0x0F	; 15
    93ee:	80 e1       	ldi	r24, 0x10	; 16
    93f0:	90 e0       	ldi	r25, 0x00	; 0
    93f2:	0e c0       	rjmp	.+28     	; 0x9410 <print_menu_frame+0x6a>
void print_menu_frame(uint8_t style)
{
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down

	switch (style)
    93f4:	c5 30       	cpi	r28, 0x05	; 5
    93f6:	e9 f1       	breq	.+122    	; 0x9472 <print_menu_frame+0xcc>
    93f8:	48 f1       	brcs	.+82     	; 0x944c <print_menu_frame+0xa6>
    93fa:	c0 3a       	cpi	r28, 0xA0	; 160
    93fc:	09 f0       	breq	.+2      	; 0x9400 <print_menu_frame+0x5a>
    93fe:	6b c0       	rjmp	.+214    	; 0x94d6 <print_menu_frame+0x130>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    9400:	26 e3       	ldi	r18, 0x36	; 54
    9402:	30 e0       	ldi	r19, 0x00	; 0
    9404:	40 e0       	ldi	r20, 0x00	; 0
    9406:	50 e0       	ldi	r21, 0x00	; 0
    9408:	6d e8       	ldi	r22, 0x8D	; 141
    940a:	7f e0       	ldi	r23, 0x0F	; 15
    940c:	88 e1       	ldi	r24, 0x18	; 24
    940e:	91 e0       	ldi	r25, 0x01	; 1
    9410:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    9414:	26 e3       	ldi	r18, 0x36	; 54
    9416:	30 e0       	ldi	r19, 0x00	; 0
    9418:	47 e6       	ldi	r20, 0x67	; 103
    941a:	50 e0       	ldi	r21, 0x00	; 0
    941c:	6d e8       	ldi	r22, 0x8D	; 141
    941e:	7f e0       	ldi	r23, 0x0F	; 15
    9420:	81 e1       	ldi	r24, 0x11	; 17
    9422:	90 e0       	ldi	r25, 0x00	; 0
    9424:	56 c0       	rjmp	.+172    	; 0x94d2 <print_menu_frame+0x12c>
			break;
			
		case LOG:
			// Clear or exit
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    9426:	29 e3       	ldi	r18, 0x39	; 57
    9428:	30 e0       	ldi	r19, 0x00	; 0
    942a:	40 e0       	ldi	r20, 0x00	; 0
    942c:	50 e0       	ldi	r21, 0x00	; 0
    942e:	6f ef       	ldi	r22, 0xFF	; 255
    9430:	71 e0       	ldi	r23, 0x01	; 1
    9432:	8c e0       	ldi	r24, 0x0C	; 12
    9434:	90 e0       	ldi	r25, 0x00	; 0
    9436:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			LCD_Display_Text(291, (const unsigned char*)Verdana8, 100, 54);	// Clear
    943a:	26 e3       	ldi	r18, 0x36	; 54
    943c:	30 e0       	ldi	r19, 0x00	; 0
    943e:	44 e6       	ldi	r20, 0x64	; 100
    9440:	50 e0       	ldi	r21, 0x00	; 0
    9442:	6d e8       	ldi	r22, 0x8D	; 141
    9444:	7f e0       	ldi	r23, 0x0F	; 15
    9446:	83 e2       	ldi	r24, 0x23	; 35
    9448:	91 e0       	ldi	r25, 0x01	; 1
    944a:	43 c0       	rjmp	.+134    	; 0x94d2 <print_menu_frame+0x12c>
			break;			

		case CURVE:
			// Curve edit screen
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    944c:	29 e3       	ldi	r18, 0x39	; 57
    944e:	30 e0       	ldi	r19, 0x00	; 0
    9450:	40 e0       	ldi	r20, 0x00	; 0
    9452:	50 e0       	ldi	r21, 0x00	; 0
    9454:	6f ef       	ldi	r22, 0xFF	; 255
    9456:	71 e0       	ldi	r23, 0x01	; 1
    9458:	8c e0       	ldi	r24, 0x0C	; 12
    945a:	90 e0       	ldi	r25, 0x00	; 0
    945c:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    9460:	29 e3       	ldi	r18, 0x39	; 57
    9462:	30 e0       	ldi	r19, 0x00	; 0
    9464:	48 e7       	ldi	r20, 0x78	; 120
    9466:	50 e0       	ldi	r21, 0x00	; 0
    9468:	6f ef       	ldi	r22, 0xFF	; 255
    946a:	71 e0       	ldi	r23, 0x01	; 1
    946c:	8b e0       	ldi	r24, 0x0B	; 11
    946e:	90 e0       	ldi	r25, 0x00	; 0
    9470:	30 c0       	rjmp	.+96     	; 0x94d2 <print_menu_frame+0x12c>
			break;

		case OFFSET:
			// Offset curve edit screen
			LCD_Display_Text(48, (const unsigned char*)Verdana8, 10, 54); 	// P1
    9472:	26 e3       	ldi	r18, 0x36	; 54
    9474:	30 e0       	ldi	r19, 0x00	; 0
    9476:	4a e0       	ldi	r20, 0x0A	; 10
    9478:	50 e0       	ldi	r21, 0x00	; 0
    947a:	6d e8       	ldi	r22, 0x8D	; 141
    947c:	7f e0       	ldi	r23, 0x0F	; 15
    947e:	80 e3       	ldi	r24, 0x30	; 48
    9480:	90 e0       	ldi	r25, 0x00	; 0
    9482:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    9486:	29 e3       	ldi	r18, 0x39	; 57
    9488:	30 e0       	ldi	r19, 0x00	; 0
    948a:	40 e0       	ldi	r20, 0x00	; 0
    948c:	50 e0       	ldi	r21, 0x00	; 0
    948e:	6f ef       	ldi	r22, 0xFF	; 255
    9490:	71 e0       	ldi	r23, 0x01	; 1
    9492:	8c e0       	ldi	r24, 0x0C	; 12
    9494:	90 e0       	ldi	r25, 0x00	; 0
    9496:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			LCD_Display_Text(49, (const unsigned char*)Verdana8, 55, 54); 	// P1.n	
    949a:	26 e3       	ldi	r18, 0x36	; 54
    949c:	30 e0       	ldi	r19, 0x00	; 0
    949e:	47 e3       	ldi	r20, 0x37	; 55
    94a0:	50 e0       	ldi	r21, 0x00	; 0
    94a2:	6d e8       	ldi	r22, 0x8D	; 141
    94a4:	7f e0       	ldi	r23, 0x0F	; 15
    94a6:	81 e3       	ldi	r24, 0x31	; 49
    94a8:	90 e0       	ldi	r25, 0x00	; 0
    94aa:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    94ae:	29 e3       	ldi	r18, 0x39	; 57
    94b0:	30 e0       	ldi	r19, 0x00	; 0
    94b2:	48 e7       	ldi	r20, 0x78	; 120
    94b4:	50 e0       	ldi	r21, 0x00	; 0
    94b6:	6f ef       	ldi	r22, 0xFF	; 255
    94b8:	71 e0       	ldi	r23, 0x01	; 1
    94ba:	8b e0       	ldi	r24, 0x0B	; 11
    94bc:	90 e0       	ldi	r25, 0x00	; 0
    94be:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			LCD_Display_Text(50, (const unsigned char*)Verdana8, 107, 54);	// P2
    94c2:	26 e3       	ldi	r18, 0x36	; 54
    94c4:	30 e0       	ldi	r19, 0x00	; 0
    94c6:	4b e6       	ldi	r20, 0x6B	; 107
    94c8:	50 e0       	ldi	r21, 0x00	; 0
    94ca:	6d e8       	ldi	r22, 0x8D	; 141
    94cc:	7f e0       	ldi	r23, 0x0F	; 15
    94ce:	82 e3       	ldi	r24, 0x32	; 50
    94d0:	90 e0       	ldi	r25, 0x00	; 0
    94d2:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    94d6:	80 e0       	ldi	r24, 0x00	; 0
    94d8:	91 e0       	ldi	r25, 0x01	; 1
}
    94da:	cf 91       	pop	r28
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    94dc:	0c 94 7b 36 	jmp	0x6cf6	; 0x6cf6 <write_buffer>

000094e0 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    94e0:	cf 93       	push	r28
    94e2:	df 93       	push	r29
    94e4:	cd b7       	in	r28, 0x3d	; 61
    94e6:	de b7       	in	r29, 0x3e	; 62
    94e8:	2a 97       	sbiw	r28, 0x0a	; 10
    94ea:	0f b6       	in	r0, 0x3f	; 63
    94ec:	f8 94       	cli
    94ee:	de bf       	out	0x3e, r29	; 62
    94f0:	0f be       	out	0x3f, r0	; 63
    94f2:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    94f4:	25 e0       	ldi	r18, 0x05	; 5
    94f6:	62 9f       	mul	r22, r18
    94f8:	80 0d       	add	r24, r0
    94fa:	91 1d       	adc	r25, r1
    94fc:	11 24       	eor	r1, r1
    94fe:	bc 01       	movw	r22, r24
    9500:	45 e0       	ldi	r20, 0x05	; 5
    9502:	50 e0       	ldi	r21, 0x00	; 0
    9504:	ce 01       	movw	r24, r28
    9506:	06 96       	adiw	r24, 0x06	; 6
    9508:	0e 94 ff 6f 	call	0xdffe	; 0xdffe <memcpy_P>
	return (range);
    950c:	85 e0       	ldi	r24, 0x05	; 5
    950e:	fe 01       	movw	r30, r28
    9510:	36 96       	adiw	r30, 0x06	; 6
    9512:	de 01       	movw	r26, r28
    9514:	11 96       	adiw	r26, 0x01	; 1
    9516:	01 90       	ld	r0, Z+
    9518:	0d 92       	st	X+, r0
    951a:	8a 95       	dec	r24
    951c:	e1 f7       	brne	.-8      	; 0x9516 <get_menu_range+0x36>
    951e:	29 81       	ldd	r18, Y+1	; 0x01
    9520:	3a 81       	ldd	r19, Y+2	; 0x02
    9522:	4b 81       	ldd	r20, Y+3	; 0x03
    9524:	5c 81       	ldd	r21, Y+4	; 0x04
    9526:	6d 81       	ldd	r22, Y+5	; 0x05
}
    9528:	70 e0       	ldi	r23, 0x00	; 0
    952a:	80 e0       	ldi	r24, 0x00	; 0
    952c:	90 e0       	ldi	r25, 0x00	; 0
    952e:	2a 96       	adiw	r28, 0x0a	; 10
    9530:	0f b6       	in	r0, 0x3f	; 63
    9532:	f8 94       	cli
    9534:	de bf       	out	0x3e, r29	; 62
    9536:	0f be       	out	0x3f, r0	; 63
    9538:	cd bf       	out	0x3d, r28	; 61
    953a:	df 91       	pop	r29
    953c:	cf 91       	pop	r28
    953e:	08 95       	ret

00009540 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    9540:	0f 93       	push	r16
    9542:	1f 93       	push	r17
    9544:	cf 93       	push	r28
    9546:	df 93       	push	r29
    9548:	fa 01       	movw	r30, r20
    954a:	10 e0       	ldi	r17, 0x00	; 0
    954c:	c2 2f       	mov	r28, r18
    954e:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    9550:	66 23       	and	r22, r22
    9552:	19 f0       	breq	.+6      	; 0x955a <print_menu_text+0x1a>
    9554:	62 50       	subi	r22, 0x02	; 2
    9556:	62 30       	cpi	r22, 0x02	; 2
    9558:	78 f4       	brcc	.+30     	; 0x9578 <print_menu_text+0x38>
    955a:	4a e0       	ldi	r20, 0x0A	; 10
    955c:	62 ec       	ldi	r22, 0xC2	; 194
    955e:	75 e0       	ldi	r23, 0x05	; 5
    9560:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    9564:	98 01       	movw	r18, r16
    9566:	ae 01       	movw	r20, r28
    9568:	6d e8       	ldi	r22, 0x8D	; 141
    956a:	7f e0       	ldi	r23, 0x0F	; 15
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    956c:	df 91       	pop	r29
    956e:	cf 91       	pop	r28
    9570:	1f 91       	pop	r17
    9572:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    9574:	0c 94 11 63 	jmp	0xc622	; 0xc622 <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    9578:	98 01       	movw	r18, r16
    957a:	ae 01       	movw	r20, r28
    957c:	6d e8       	ldi	r22, 0x8D	; 141
    957e:	7f e0       	ldi	r23, 0x0F	; 15
    9580:	cf 01       	movw	r24, r30
	}
}
    9582:	df 91       	pop	r29
    9584:	cf 91       	pop	r28
    9586:	1f 91       	pop	r17
    9588:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    958a:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <LCD_Display_Text>

0000958e <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    958e:	48 2f       	mov	r20, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    9590:	93 b1       	in	r25, 0x03	; 3
    9592:	90 7f       	andi	r25, 0xF0	; 240
    9594:	90 93 1f 09 	sts	0x091F, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    9598:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    959a:	51 e0       	ldi	r21, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    959c:	90 91 1f 09 	lds	r25, 0x091F
    95a0:	90 3f       	cpi	r25, 0xF0	; 240
    95a2:	d1 f4       	brne	.+52     	; 0x95d8 <poll_buttons+0x4a>
	{
		buttons = (PINB & 0xf0);	
    95a4:	93 b1       	in	r25, 0x03	; 3
    95a6:	89 2f       	mov	r24, r25
    95a8:	80 7f       	andi	r24, 0xF0	; 240
    95aa:	e7 ea       	ldi	r30, 0xA7	; 167
    95ac:	f1 e6       	ldi	r31, 0x61	; 97
    95ae:	31 97       	sbiw	r30, 0x01	; 1
    95b0:	f1 f7       	brne	.-4      	; 0x95ae <poll_buttons+0x20>
    95b2:	00 c0       	rjmp	.+0      	; 0x95b4 <poll_buttons+0x26>
    95b4:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    95b6:	23 b1       	in	r18, 0x03	; 3
    95b8:	68 2f       	mov	r22, r24
    95ba:	70 e0       	ldi	r23, 0x00	; 0
    95bc:	20 7f       	andi	r18, 0xF0	; 240
    95be:	30 e0       	ldi	r19, 0x00	; 0
    95c0:	62 17       	cp	r22, r18
    95c2:	73 07       	cpc	r23, r19
    95c4:	19 f4       	brne	.+6      	; 0x95cc <poll_buttons+0x3e>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    95c6:	80 93 1f 09 	sts	0x091F, r24
    95ca:	01 c0       	rjmp	.+2      	; 0x95ce <poll_buttons+0x40>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    95cc:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    95ce:	10 92 48 05 	sts	0x0548, r1
		button_multiplier = 1;
    95d2:	50 93 20 09 	sts	0x0920, r21
    95d6:	e2 cf       	rjmp	.-60     	; 0x959c <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    95d8:	44 23       	and	r20, r20
    95da:	79 f0       	breq	.+30     	; 0x95fa <poll_buttons+0x6c>
	{
		// Count the number of times incremented
		button_count++; 
    95dc:	90 91 48 05 	lds	r25, 0x0548
    95e0:	9f 5f       	subi	r25, 0xFF	; 255
		if (button_count >= 10)
    95e2:	9a 30       	cpi	r25, 0x0A	; 10
    95e4:	18 f4       	brcc	.+6      	; 0x95ec <poll_buttons+0x5e>

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
	{
		// Count the number of times incremented
		button_count++; 
    95e6:	90 93 48 05 	sts	0x0548, r25
    95ea:	08 95       	ret
		if (button_count >= 10)
		{
			button_count = 0;
    95ec:	10 92 48 05 	sts	0x0548, r1
			button_multiplier ++;
    95f0:	90 91 20 09 	lds	r25, 0x0920
    95f4:	9f 5f       	subi	r25, 0xFF	; 255
    95f6:	90 93 20 09 	sts	0x0920, r25
		}
	}

	return buttons;
}
    95fa:	08 95       	ret

000095fc <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    95fc:	2f 92       	push	r2
    95fe:	3f 92       	push	r3
    9600:	4f 92       	push	r4
    9602:	5f 92       	push	r5
    9604:	6f 92       	push	r6
    9606:	7f 92       	push	r7
    9608:	8f 92       	push	r8
    960a:	9f 92       	push	r9
    960c:	af 92       	push	r10
    960e:	bf 92       	push	r11
    9610:	cf 92       	push	r12
    9612:	df 92       	push	r13
    9614:	ef 92       	push	r14
    9616:	ff 92       	push	r15
    9618:	0f 93       	push	r16
    961a:	1f 93       	push	r17
    961c:	cf 93       	push	r28
    961e:	df 93       	push	r29
    9620:	cd b7       	in	r28, 0x3d	; 61
    9622:	de b7       	in	r29, 0x3e	; 62
    9624:	66 97       	sbiw	r28, 0x16	; 22
    9626:	0f b6       	in	r0, 0x3f	; 63
    9628:	f8 94       	cli
    962a:	de bf       	out	0x3e, r29	; 62
    962c:	0f be       	out	0x3f, r0	; 63
    962e:	cd bf       	out	0x3d, r28	; 61
    9630:	3c 01       	movw	r6, r24
    9632:	7e 87       	std	Y+14, r23	; 0x0e
    9634:	6d 87       	std	Y+13, r22	; 0x0d
    9636:	4a 87       	std	Y+10, r20	; 0x0a
    9638:	9e 2d       	mov	r25, r14
    963a:	ed 82       	std	Y+5, r14	; 0x05
    963c:	8f 2d       	mov	r24, r15
    963e:	fe 82       	std	Y+6, r15	; 0x06
    9640:	90 2e       	mov	r9, r16
    9642:	0f 83       	std	Y+7, r16	; 0x07
    9644:	18 87       	std	Y+8, r17	; 0x08
    9646:	29 87       	std	Y+9, r18	; 0x09
    9648:	ba 8a       	std	Y+18, r11	; 0x12
    964a:	a9 8a       	std	Y+17, r10	; 0x11
    964c:	ac 01       	movw	r20, r24
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    964e:	fb 01       	movw	r30, r22
    9650:	20 81       	ld	r18, Z
    9652:	a2 2e       	mov	r10, r18
    9654:	02 2e       	mov	r0, r18
    9656:	00 0c       	add	r0, r0
    9658:	bb 08       	sbc	r11, r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    965a:	12 30       	cpi	r17, 0x02	; 2
    965c:	29 f4       	brne	.+10     	; 0x9668 <do_menu_item+0x6c>
	{
		value = value * mult;
    965e:	3a 85       	ldd	r19, Y+10	; 0x0a
    9660:	23 03       	mulsu	r18, r19
    9662:	50 01       	movw	r10, r0
    9664:	11 24       	eor	r1, r1
    9666:	02 c0       	rjmp	.+4      	; 0x966c <do_menu_item+0x70>
	}
	else mult = 1;
    9668:	81 e0       	ldi	r24, 0x01	; 1
    966a:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    966c:	20 ef       	ldi	r18, 0xF0	; 240
    966e:	20 93 1f 09 	sts	0x091F, r18
				value = (range.default_value * mult);				
			}
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    9672:	fa 85       	ldd	r31, Y+10	; 0x0a
    9674:	ef 2f       	mov	r30, r31
    9676:	f0 e0       	ldi	r31, 0x00	; 0
    9678:	f8 8b       	std	Y+16, r31	; 0x10
    967a:	ef 87       	std	Y+15, r30	; 0x0f
    967c:	2a 85       	ldd	r18, Y+10	; 0x0a
    967e:	52 03       	mulsu	r21, r18
    9680:	10 01       	movw	r2, r0
    9682:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    9684:	42 03       	mulsu	r20, r18
    9686:	c0 01       	movw	r24, r0
    9688:	11 24       	eor	r1, r1
    968a:	9c 87       	std	Y+12, r25	; 0x0c
    968c:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    968e:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    9690:	00 e0       	ldi	r16, 0x00	; 0
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    9692:	f1 2c       	mov	r15, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    9694:	51 2c       	mov	r5, r1
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    9696:	93 01       	movw	r18, r6
    9698:	22 0f       	add	r18, r18
    969a:	33 1f       	adc	r19, r19
    969c:	a9 01       	movw	r20, r18
    969e:	41 5b       	subi	r20, 0xB1	; 177
    96a0:	5b 4e       	sbci	r21, 0xEB	; 235
    96a2:	5c 8b       	std	Y+20, r21	; 0x14
    96a4:	4b 8b       	std	Y+19, r20	; 0x13
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    96a6:	0c 2c       	mov	r0, r12
    96a8:	00 0c       	add	r0, r0
    96aa:	dd 08       	sbc	r13, r13
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    96ac:	ae ef       	ldi	r26, 0xFE	; 254
    96ae:	ea 2e       	mov	r14, r26
    96b0:	e1 0e       	add	r14, r17

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
				(servo_enable) &&
				(Config.Channel[servo_number].Motor_marker != MOTOR)
    96b2:	82 e2       	ldi	r24, 0x22	; 34
    96b4:	eb a5       	ldd	r30, Y+43	; 0x2b
    96b6:	fc a5       	ldd	r31, Y+44	; 0x2c
    96b8:	8e 9f       	mul	r24, r30
    96ba:	90 01       	movw	r18, r0
    96bc:	8f 9f       	mul	r24, r31
    96be:	30 0d       	add	r19, r0
    96c0:	11 24       	eor	r1, r1
    96c2:	a9 01       	movw	r20, r18
    96c4:	48 51       	subi	r20, 0x18	; 24
    96c6:	59 4f       	sbci	r21, 0xF9	; 249
    96c8:	5e 8b       	std	Y+22, r21	; 0x16
    96ca:	4d 8b       	std	Y+21, r20	; 0x15
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
    96cc:	80 91 1f 09 	lds	r24, 0x091F
    96d0:	28 2f       	mov	r18, r24
    96d2:	2f 7b       	andi	r18, 0xBF	; 191
    96d4:	20 3a       	cpi	r18, 0xA0	; 160
    96d6:	19 f0       	breq	.+6      	; 0x96de <do_menu_item+0xe2>
		// Increment loop count so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    96d8:	81 10       	cpse	r8, r1
    96da:	2a c0       	rjmp	.+84     	; 0x9730 <do_menu_item+0x134>
    96dc:	24 c0       	rjmp	.+72     	; 0x9726 <do_menu_item+0x12a>
		}

	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    96de:	12 30       	cpi	r17, 0x02	; 2
    96e0:	31 f4       	brne	.+12     	; 0x96ee <do_menu_item+0xf2>
	{
		value = value / mult;
    96e2:	c5 01       	movw	r24, r10
    96e4:	6f 85       	ldd	r22, Y+15	; 0x0f
    96e6:	78 89       	ldd	r23, Y+16	; 0x10
    96e8:	0e 94 73 6f 	call	0xdee6	; 0xdee6 <__divmodhi4>
    96ec:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    96ee:	ed 85       	ldd	r30, Y+13	; 0x0d
    96f0:	fe 85       	ldd	r31, Y+14	; 0x0e
    96f2:	a0 82       	st	Z, r10
}
    96f4:	66 96       	adiw	r28, 0x16	; 22
    96f6:	0f b6       	in	r0, 0x3f	; 63
    96f8:	f8 94       	cli
    96fa:	de bf       	out	0x3e, r29	; 62
    96fc:	0f be       	out	0x3f, r0	; 63
    96fe:	cd bf       	out	0x3d, r28	; 61
    9700:	df 91       	pop	r29
    9702:	cf 91       	pop	r28
    9704:	1f 91       	pop	r17
    9706:	0f 91       	pop	r16
    9708:	ff 90       	pop	r15
    970a:	ef 90       	pop	r14
    970c:	df 90       	pop	r13
    970e:	cf 90       	pop	r12
    9710:	bf 90       	pop	r11
    9712:	af 90       	pop	r10
    9714:	9f 90       	pop	r9
    9716:	8f 90       	pop	r8
    9718:	7f 90       	pop	r7
    971a:	6f 90       	pop	r6
    971c:	5f 90       	pop	r5
    971e:	4f 90       	pop	r4
    9720:	3f 90       	pop	r3
    9722:	2f 90       	pop	r2
    9724:	08 95       	ret
		{
			button_inc = 1;	// For everything else (numbers)
		}

		// Increment button timer when pressed
		if (button != NONE)
    9726:	80 3f       	cpi	r24, 0xF0	; 240
    9728:	09 f4       	brne	.+2      	; 0x972c <do_menu_item+0x130>
    972a:	4b c1       	rjmp	.+662    	; 0x99c2 <do_menu_item+0x3c6>
		{
			button_inc = 5; // For servos
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    972c:	21 e0       	ldi	r18, 0x01	; 1
    972e:	04 c0       	rjmp	.+8      	; 0x9738 <do_menu_item+0x13c>
		}

		// Increment button timer when pressed
		if (button != NONE)
    9730:	80 3f       	cpi	r24, 0xF0	; 240
    9732:	09 f4       	brne	.+2      	; 0x9736 <do_menu_item+0x13a>
    9734:	49 c1       	rjmp	.+658    	; 0x99c8 <do_menu_item+0x3cc>
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
		{
			button_inc = 5; // For servos
    9736:	25 e0       	ldi	r18, 0x05	; 5
		}

		// Increment button timer when pressed
		if (button != NONE)
		{
			button_update++;
    9738:	f3 94       	inc	r15

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    973a:	2f 15       	cp	r18, r15
    973c:	10 f4       	brcc	.+4      	; 0x9742 <do_menu_item+0x146>
			{
				button_lock = false;
    973e:	00 e0       	ldi	r16, 0x00	; 0
				button_update = 0;
    9740:	f1 2c       	mov	r15, r1
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    9742:	88 20       	and	r8, r8
    9744:	49 f0       	breq	.+18     	; 0x9758 <do_menu_item+0x15c>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
	{
		// Increment loop count so that we can time various things
		display_update++;
    9746:	53 94       	inc	r5
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    9748:	57 e0       	ldi	r21, 0x07	; 7
    974a:	55 15       	cp	r21, r5
    974c:	10 f4       	brcc	.+4      	; 0x9752 <do_menu_item+0x156>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    974e:	80 3f       	cpi	r24, 0xF0	; 240
    9750:	19 f4       	brne	.+6      	; 0x9758 <do_menu_item+0x15c>
    9752:	99 23       	and	r25, r25
    9754:	09 f4       	brne	.+2      	; 0x9758 <do_menu_item+0x15c>
    9756:	9b c0       	rjmp	.+310    	; 0x988e <do_menu_item+0x292>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    9758:	80 e0       	ldi	r24, 0x00	; 0
    975a:	91 e0       	ldi	r25, 0x01	; 1
    975c:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>

			// Print warning
			if (range.style == 4)
    9760:	14 30       	cpi	r17, 0x04	; 4
    9762:	a9 f4       	brne	.+42     	; 0x978e <do_menu_item+0x192>
			{
				LCD_Display_Text(281,(const unsigned char*)Verdana8,0,0);	// Warning
    9764:	20 e0       	ldi	r18, 0x00	; 0
    9766:	30 e0       	ldi	r19, 0x00	; 0
    9768:	40 e0       	ldi	r20, 0x00	; 0
    976a:	50 e0       	ldi	r21, 0x00	; 0
    976c:	6d e8       	ldi	r22, 0x8D	; 141
    976e:	7f e0       	ldi	r23, 0x0F	; 15
    9770:	89 e1       	ldi	r24, 0x19	; 25
    9772:	91 e0       	ldi	r25, 0x01	; 1
    9774:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
    9778:	2c e0       	ldi	r18, 0x0C	; 12
    977a:	30 e0       	ldi	r19, 0x00	; 0
    977c:	49 e1       	ldi	r20, 0x19	; 25
    977e:	50 e0       	ldi	r21, 0x00	; 0
    9780:	6d e8       	ldi	r22, 0x8D	; 141
    9782:	7f e0       	ldi	r23, 0x0F	; 15
    9784:	8a e1       	ldi	r24, 0x1A	; 26
    9786:	91 e0       	ldi	r25, 0x01	; 1
    9788:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
    978c:	37 c0       	rjmp	.+110    	; 0x97fc <do_menu_item+0x200>
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    978e:	eb 89       	ldd	r30, Y+19	; 0x13
    9790:	fc 89       	ldd	r31, Y+20	; 0x14
    9792:	85 91       	lpm	r24, Z+
    9794:	94 91       	lpm	r25, Z
    9796:	20 e0       	ldi	r18, 0x00	; 0
    9798:	30 e0       	ldi	r19, 0x00	; 0
    979a:	40 e0       	ldi	r20, 0x00	; 0
    979c:	50 e0       	ldi	r21, 0x00	; 0
    979e:	6f ed       	ldi	r22, 0xDF	; 223
    97a0:	74 e0       	ldi	r23, 0x04	; 4
    97a2:	0e 94 95 38 	call	0x712a	; 0x712a <gLCDprint_Menu_P>
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    97a6:	11 23       	and	r17, r17
    97a8:	19 f0       	breq	.+6      	; 0x97b0 <do_menu_item+0x1b4>
    97aa:	81 e0       	ldi	r24, 0x01	; 1
    97ac:	8e 15       	cp	r24, r14
    97ae:	30 f1       	brcs	.+76     	; 0x97fc <do_menu_item+0x200>
    97b0:	4a e0       	ldi	r20, 0x0A	; 10
    97b2:	62 ec       	ldi	r22, 0xC2	; 194
    97b4:	75 e0       	ldi	r23, 0x05	; 5
    97b6:	c5 01       	movw	r24, r10
    97b8:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    97bc:	ae 01       	movw	r20, r28
    97be:	4f 5f       	subi	r20, 0xFF	; 255
    97c0:	5f 4f       	sbci	r21, 0xFF	; 255
    97c2:	6f ed       	ldi	r22, 0xDF	; 223
    97c4:	74 e0       	ldi	r23, 0x04	; 4
    97c6:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    97ca:	89 81       	ldd	r24, Y+1	; 0x01
    97cc:	9a 81       	ldd	r25, Y+2	; 0x02
    97ce:	70 e8       	ldi	r23, 0x80	; 128
    97d0:	47 2e       	mov	r4, r23
    97d2:	51 2c       	mov	r5, r1
    97d4:	48 1a       	sub	r4, r24
    97d6:	59 0a       	sbc	r5, r25
    97d8:	56 94       	lsr	r5
    97da:	47 94       	ror	r4
    97dc:	4c 0c       	add	r4, r12
    97de:	5d 1c       	adc	r5, r13
    97e0:	4a e0       	ldi	r20, 0x0A	; 10
    97e2:	62 ec       	ldi	r22, 0xC2	; 194
    97e4:	75 e0       	ldi	r23, 0x05	; 5
    97e6:	c5 01       	movw	r24, r10
    97e8:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
    97ec:	29 e1       	ldi	r18, 0x19	; 25
    97ee:	30 e0       	ldi	r19, 0x00	; 0
    97f0:	a2 01       	movw	r20, r4
    97f2:	6f ed       	ldi	r22, 0xDF	; 223
    97f4:	74 e0       	ldi	r23, 0x04	; 4
    97f6:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
    97fa:	29 c0       	rjmp	.+82     	; 0x984e <do_menu_item+0x252>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    97fc:	49 88       	ldd	r4, Y+17	; 0x11
    97fe:	5a 88       	ldd	r5, Y+18	; 0x12
    9800:	4a 0c       	add	r4, r10
    9802:	5b 1c       	adc	r5, r11
    9804:	f2 01       	movw	r30, r4
    9806:	ee 0f       	add	r30, r30
    9808:	ff 1f       	adc	r31, r31
    980a:	e1 5b       	subi	r30, 0xB1	; 177
    980c:	fb 4e       	sbci	r31, 0xEB	; 235
    980e:	85 91       	lpm	r24, Z+
    9810:	94 91       	lpm	r25, Z
    9812:	0e 94 10 62 	call	0xc420	; 0xc420 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    9816:	ae 01       	movw	r20, r28
    9818:	4f 5f       	subi	r20, 0xFF	; 255
    981a:	5f 4f       	sbci	r21, 0xFF	; 255
    981c:	6f ed       	ldi	r22, 0xDF	; 223
    981e:	74 e0       	ldi	r23, 0x04	; 4
    9820:	82 ec       	ldi	r24, 0xC2	; 194
    9822:	95 e0       	ldi	r25, 0x05	; 5
    9824:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    9828:	89 81       	ldd	r24, Y+1	; 0x01
    982a:	9a 81       	ldd	r25, Y+2	; 0x02
    982c:	40 e8       	ldi	r20, 0x80	; 128
    982e:	50 e0       	ldi	r21, 0x00	; 0
    9830:	48 1b       	sub	r20, r24
    9832:	59 0b       	sbc	r21, r25
    9834:	56 95       	lsr	r21
    9836:	47 95       	ror	r20
    9838:	29 e1       	ldi	r18, 0x19	; 25
    983a:	30 e0       	ldi	r19, 0x00	; 0
    983c:	6f ed       	ldi	r22, 0xDF	; 223
    983e:	74 e0       	ldi	r23, 0x04	; 4
    9840:	c2 01       	movw	r24, r4
    9842:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			}

			// Print appropriate menu frame
			// Save/Abort screen
			if (range.style == 4)
    9846:	14 30       	cpi	r17, 0x04	; 4
    9848:	11 f4       	brne	.+4      	; 0x984e <do_menu_item+0x252>
			{
				// Print bottom markers
				print_menu_frame(ABORT);				
    984a:	80 ea       	ldi	r24, 0xA0	; 160
    984c:	01 c0       	rjmp	.+2      	; 0x9850 <do_menu_item+0x254>
			}
			// Save/default screen
			else
			{
				// Print bottom markers
				print_menu_frame(EDIT);				
    984e:	81 e0       	ldi	r24, 0x01	; 1
    9850:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <print_menu_frame>
			}

			// Write from buffer
			write_buffer(buffer);
    9854:	80 e0       	ldi	r24, 0x00	; 0
    9856:	91 e0       	ldi	r25, 0x01	; 1
    9858:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    985c:	12 30       	cpi	r17, 0x02	; 2
    985e:	31 f1       	breq	.+76     	; 0x98ac <do_menu_item+0x2b0>
    9860:	38 f4       	brcc	.+14     	; 0x9870 <do_menu_item+0x274>
    9862:	11 23       	and	r17, r17
    9864:	59 f0       	breq	.+22     	; 0x987c <do_menu_item+0x280>
    9866:	11 30       	cpi	r17, 0x01	; 1
    9868:	09 f0       	breq	.+2      	; 0x986c <do_menu_item+0x270>
    986a:	40 c0       	rjmp	.+128    	; 0x98ec <do_menu_item+0x2f0>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    986c:	51 2c       	mov	r5, r1
    986e:	16 c0       	rjmp	.+44     	; 0x989c <do_menu_item+0x2a0>
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    9870:	13 30       	cpi	r17, 0x03	; 3
    9872:	29 f1       	breq	.+74     	; 0x98be <do_menu_item+0x2c2>
    9874:	14 30       	cpi	r17, 0x04	; 4
    9876:	d1 f5       	brne	.+116    	; 0x98ec <do_menu_item+0x2f0>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    9878:	51 2c       	mov	r5, r1
    987a:	2e c0       	rjmp	.+92     	; 0x98d8 <do_menu_item+0x2dc>
    987c:	51 2c       	mov	r5, r1
    987e:	9f e7       	ldi	r25, 0x7F	; 127
    9880:	ea e1       	ldi	r30, 0x1A	; 26
    9882:	f6 e0       	ldi	r31, 0x06	; 6
    9884:	91 50       	subi	r25, 0x01	; 1
    9886:	e0 40       	sbci	r30, 0x00	; 0
    9888:	f0 40       	sbci	r31, 0x00	; 0
    988a:	e1 f7       	brne	.-8      	; 0x9884 <do_menu_item+0x288>
    988c:	2c c0       	rjmp	.+88     	; 0x98e6 <do_menu_item+0x2ea>
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    988e:	12 30       	cpi	r17, 0x02	; 2
    9890:	71 f0       	breq	.+28     	; 0x98ae <do_menu_item+0x2b2>
    9892:	f0 f4       	brcc	.+60     	; 0x98d0 <do_menu_item+0x2d4>
    9894:	11 23       	and	r17, r17
    9896:	99 f3       	breq	.-26     	; 0x987e <do_menu_item+0x282>
    9898:	11 30       	cpi	r17, 0x01	; 1
    989a:	59 f5       	brne	.+86     	; 0x98f2 <do_menu_item+0x2f6>
    989c:	2f e3       	ldi	r18, 0x3F	; 63
    989e:	32 e4       	ldi	r19, 0x42	; 66
    98a0:	4f e0       	ldi	r20, 0x0F	; 15
    98a2:	21 50       	subi	r18, 0x01	; 1
    98a4:	30 40       	sbci	r19, 0x00	; 0
    98a6:	40 40       	sbci	r20, 0x00	; 0
    98a8:	e1 f7       	brne	.-8      	; 0x98a2 <do_menu_item+0x2a6>
    98aa:	1d c0       	rjmp	.+58     	; 0x98e6 <do_menu_item+0x2ea>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    98ac:	51 2c       	mov	r5, r1
    98ae:	5f e7       	ldi	r21, 0x7F	; 127
    98b0:	8a e1       	ldi	r24, 0x1A	; 26
    98b2:	96 e0       	ldi	r25, 0x06	; 6
    98b4:	51 50       	subi	r21, 0x01	; 1
    98b6:	80 40       	sbci	r24, 0x00	; 0
    98b8:	90 40       	sbci	r25, 0x00	; 0
    98ba:	e1 f7       	brne	.-8      	; 0x98b4 <do_menu_item+0x2b8>
    98bc:	14 c0       	rjmp	.+40     	; 0x98e6 <do_menu_item+0x2ea>
    98be:	51 2c       	mov	r5, r1
    98c0:	ef e7       	ldi	r30, 0x7F	; 127
    98c2:	f8 e3       	ldi	r31, 0x38	; 56
    98c4:	21 e0       	ldi	r18, 0x01	; 1
    98c6:	e1 50       	subi	r30, 0x01	; 1
    98c8:	f0 40       	sbci	r31, 0x00	; 0
    98ca:	20 40       	sbci	r18, 0x00	; 0
    98cc:	e1 f7       	brne	.-8      	; 0x98c6 <do_menu_item+0x2ca>
    98ce:	0b c0       	rjmp	.+22     	; 0x98e6 <do_menu_item+0x2ea>
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    98d0:	13 30       	cpi	r17, 0x03	; 3
    98d2:	b1 f3       	breq	.-20     	; 0x98c0 <do_menu_item+0x2c4>
    98d4:	14 30       	cpi	r17, 0x04	; 4
    98d6:	69 f4       	brne	.+26     	; 0x98f2 <do_menu_item+0x2f6>
    98d8:	3f e3       	ldi	r19, 0x3F	; 63
    98da:	42 e4       	ldi	r20, 0x42	; 66
    98dc:	5f e0       	ldi	r21, 0x0F	; 15
    98de:	31 50       	subi	r19, 0x01	; 1
    98e0:	40 40       	sbci	r20, 0x00	; 0
    98e2:	50 40       	sbci	r21, 0x00	; 0
    98e4:	e1 f7       	brne	.-8      	; 0x98de <do_menu_item+0x2e2>
    98e6:	00 c0       	rjmp	.+0      	; 0x98e8 <do_menu_item+0x2ec>
    98e8:	00 00       	nop
    98ea:	01 c0       	rjmp	.+2      	; 0x98ee <do_menu_item+0x2f2>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    98ec:	51 2c       	mov	r5, r1
		}

		// Poll buttons when idle.
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    98ee:	88 20       	and	r8, r8
    98f0:	41 f0       	breq	.+16     	; 0x9902 <do_menu_item+0x306>
		{
			button = (PINB & 0xf0);	
    98f2:	83 b1       	in	r24, 0x03	; 3
    98f4:	80 7f       	andi	r24, 0xF0	; 240
    98f6:	80 93 1f 09 	sts	0x091F, r24
			button_multiplier = 1;
    98fa:	81 e0       	ldi	r24, 0x01	; 1
    98fc:	80 93 20 09 	sts	0x0920, r24
    9900:	03 c0       	rjmp	.+6      	; 0x9908 <do_menu_item+0x30c>
		}
		else
		{
			poll_buttons(true);
    9902:	81 e0       	ldi	r24, 0x01	; 1
    9904:	0e 94 c7 4a 	call	0x958e	; 0x958e <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    9908:	80 91 1f 09 	lds	r24, 0x091F
    990c:	80 3f       	cpi	r24, 0xF0	; 240
    990e:	59 f1       	breq	.+86     	; 0x9966 <do_menu_item+0x36a>
    9910:	88 20       	and	r8, r8
    9912:	b9 f0       	breq	.+46     	; 0x9942 <do_menu_item+0x346>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    9914:	80 3d       	cpi	r24, 0xD0	; 208
    9916:	49 f4       	brne	.+18     	; 0x992a <do_menu_item+0x32e>
		{
			if (button_lock == false)
    9918:	01 11       	cpse	r16, r1
    991a:	51 c0       	rjmp	.+162    	; 0x99be <do_menu_item+0x3c2>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    991c:	80 91 20 09 	lds	r24, 0x0920
    9920:	98 9e       	mul	r9, r24
    9922:	a0 18       	sub	r10, r0
    9924:	b1 08       	sbc	r11, r1
    9926:	11 24       	eor	r1, r1
    9928:	0a c0       	rjmp	.+20     	; 0x993e <do_menu_item+0x342>
				button_update = 0;
			}
		}

		if (button == UP)
    992a:	80 3b       	cpi	r24, 0xB0	; 176
    992c:	79 f4       	brne	.+30     	; 0x994c <do_menu_item+0x350>
		{
			if (button_lock == false)
    992e:	01 11       	cpse	r16, r1
    9930:	46 c0       	rjmp	.+140    	; 0x99be <do_menu_item+0x3c2>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    9932:	80 91 20 09 	lds	r24, 0x0920
    9936:	98 9e       	mul	r9, r24
    9938:	a0 0c       	add	r10, r0
    993a:	b1 1c       	adc	r11, r1
    993c:	11 24       	eor	r1, r1
				button_update = 0;
    993e:	f1 2c       	mov	r15, r1
    9940:	3e c0       	rjmp	.+124    	; 0x99be <do_menu_item+0x3c2>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    9942:	80 3d       	cpi	r24, 0xD0	; 208
    9944:	59 f3       	breq	.-42     	; 0x991c <do_menu_item+0x320>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    9946:	80 3b       	cpi	r24, 0xB0	; 176
    9948:	a1 f3       	breq	.-24     	; 0x9932 <do_menu_item+0x336>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    994a:	00 e0       	ldi	r16, 0x00	; 0
				button_update = 0;
			}
		}

		// Handle button 1
		if (button == BACK)	
    994c:	80 37       	cpi	r24, 0x70	; 112
    994e:	59 f4       	brne	.+22     	; 0x9966 <do_menu_item+0x36a>
		{
			// Save/Abort screen
			if (range.style == 4)
    9950:	14 30       	cpi	r17, 0x04	; 4
    9952:	21 f4       	brne	.+8      	; 0x995c <do_menu_item+0x360>
			{
				button = ABORT;
    9954:	80 ea       	ldi	r24, 0xA0	; 160
    9956:	80 93 1f 09 	sts	0x091F, r24
    995a:	05 c0       	rjmp	.+10     	; 0x9966 <do_menu_item+0x36a>
			}
			else
			{
				value = (range.default_value * mult);				
    995c:	29 85       	ldd	r18, Y+9	; 0x09
    995e:	3a 85       	ldd	r19, Y+10	; 0x0a
    9960:	23 03       	mulsu	r18, r19
    9962:	50 01       	movw	r10, r0
    9964:	11 24       	eor	r1, r1
    9966:	a2 14       	cp	r10, r2
    9968:	b3 04       	cpc	r11, r3
    996a:	0c f4       	brge	.+2      	; 0x996e <do_menu_item+0x372>
    996c:	51 01       	movw	r10, r2
    996e:	4b 85       	ldd	r20, Y+11	; 0x0b
    9970:	5c 85       	ldd	r21, Y+12	; 0x0c
    9972:	4a 15       	cp	r20, r10
    9974:	5b 05       	cpc	r21, r11
    9976:	0c f4       	brge	.+2      	; 0x997a <do_menu_item+0x37e>
    9978:	5a 01       	movw	r10, r20
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    997a:	50 ea       	ldi	r21, 0xA0	; 160
    997c:	65 16       	cp	r6, r21
    997e:	71 04       	cpc	r7, r1
    9980:	19 f4       	brne	.+6      	; 0x9988 <do_menu_item+0x38c>
		{
			st7565_set_brightness(value);
    9982:	8a 2d       	mov	r24, r10
    9984:	0e 94 53 36 	call	0x6ca6	; 0x6ca6 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    9988:	88 20       	and	r8, r8
    998a:	b9 f0       	breq	.+46     	; 0x99ba <do_menu_item+0x3be>
				(servo_enable) &&
    998c:	ed 89       	ldd	r30, Y+21	; 0x15
    998e:	fe 89       	ldd	r31, Y+22	; 0x16
    9990:	80 81       	ld	r24, Z
    9992:	82 30       	cpi	r24, 0x02	; 2
    9994:	91 f0       	breq	.+36     	; 0x99ba <do_menu_item+0x3be>
				(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    9996:	8a 2d       	mov	r24, r10
    9998:	0e 94 81 59 	call	0xb302	; 0xb302 <scale_percent>

			// Scale motor from 2500~5000 to 1000~2000
			temp16 = ((temp16 << 2) + 5) / 10; 	// Round and convert
    999c:	88 0f       	add	r24, r24
    999e:	99 1f       	adc	r25, r25
    99a0:	88 0f       	add	r24, r24
    99a2:	99 1f       	adc	r25, r25
    99a4:	05 96       	adiw	r24, 0x05	; 5

			cli();
    99a6:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale motor from 2500~5000 to 1000~2000
			temp16 = ((temp16 << 2) + 5) / 10; 	// Round and convert
    99a8:	6a e0       	ldi	r22, 0x0A	; 10
    99aa:	70 e0       	ldi	r23, 0x00	; 0
    99ac:	0e 94 73 6f 	call	0xdee6	; 0xdee6 <__divmodhi4>

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    99b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    99b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    99b4:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <output_servo_ppm_asm3>
			sei();
    99b8:	78 94       	sei
    99ba:	90 e0       	ldi	r25, 0x00	; 0
    99bc:	87 ce       	rjmp	.-754    	; 0x96cc <do_menu_item+0xd0>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    99be:	01 e0       	ldi	r16, 0x01	; 1
    99c0:	d2 cf       	rjmp	.-92     	; 0x9966 <do_menu_item+0x36a>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    99c2:	00 e0       	ldi	r16, 0x00	; 0
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    99c4:	f1 2c       	mov	r15, r1
    99c6:	c8 ce       	rjmp	.-624    	; 0x9758 <do_menu_item+0x15c>
			button_lock = false;
    99c8:	00 e0       	ldi	r16, 0x00	; 0
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    99ca:	f1 2c       	mov	r15, r1
    99cc:	bc ce       	rjmp	.-648    	; 0x9746 <do_menu_item+0x14a>

000099ce <edit_curve_item>:
// type					= CURVE or OFFSET
// Curves_menu_ranges	= pointer to list of ranges for this curve
//************************************************************

void edit_curve_item(uint8_t curve, uint8_t type)
{
    99ce:	2f 92       	push	r2
    99d0:	3f 92       	push	r3
    99d2:	4f 92       	push	r4
    99d4:	5f 92       	push	r5
    99d6:	6f 92       	push	r6
    99d8:	7f 92       	push	r7
    99da:	8f 92       	push	r8
    99dc:	9f 92       	push	r9
    99de:	af 92       	push	r10
    99e0:	bf 92       	push	r11
    99e2:	cf 92       	push	r12
    99e4:	df 92       	push	r13
    99e6:	ef 92       	push	r14
    99e8:	ff 92       	push	r15
    99ea:	0f 93       	push	r16
    99ec:	1f 93       	push	r17
    99ee:	cf 93       	push	r28
    99f0:	df 93       	push	r29
    99f2:	cd b7       	in	r28, 0x3d	; 61
    99f4:	de b7       	in	r29, 0x3e	; 62
    99f6:	e2 97       	sbiw	r28, 0x32	; 50
    99f8:	0f b6       	in	r0, 0x3f	; 63
    99fa:	f8 94       	cli
    99fc:	de bf       	out	0x3e, r29	; 62
    99fe:	0f be       	out	0x3f, r0	; 63
    9a00:	cd bf       	out	0x3d, r28	; 61
    9a02:	88 a3       	std	Y+32, r24	; 0x20
    9a04:	16 2f       	mov	r17, r22
	int8_t varbox_y = 0;
	int8_t chanbox_y = 0;	
	int8_t channel = THROTTLE;
	uint16_t reference = CURVESTARTE;
	
	button = NONE;
    9a06:	80 ef       	ldi	r24, 0xF0	; 240
    9a08:	80 93 1f 09 	sts	0x091F, r24

	// Set the correct text list for the selected reference
	if (Config.P1_Reference != MODEL)
    9a0c:	80 91 d9 06 	lds	r24, 0x06D9
    9a10:	82 30       	cpi	r24, 0x02	; 2
    9a12:	29 f4       	brne	.+10     	; 0x9a1e <edit_curve_item+0x50>
	{
		reference = CURVESTARTE;
	}
	else
	{
		reference = CURVESTARTM;
    9a14:	2a eb       	ldi	r18, 0xBA	; 186
    9a16:	31 e0       	ldi	r19, 0x01	; 1
    9a18:	3c a3       	std	Y+36, r19	; 0x24
    9a1a:	2b a3       	std	Y+35, r18	; 0x23
    9a1c:	04 c0       	rjmp	.+8      	; 0x9a26 <edit_curve_item+0x58>
	button = NONE;

	// Set the correct text list for the selected reference
	if (Config.P1_Reference != MODEL)
	{
		reference = CURVESTARTE;
    9a1e:	45 ea       	ldi	r20, 0xA5	; 165
    9a20:	51 e0       	ldi	r21, 0x01	; 1
    9a22:	5c a3       	std	Y+36, r21	; 0x24
    9a24:	4b a3       	std	Y+35, r20	; 0x23
		{
			chanbox_y = 12;
		}
		else
		{
			chanbox_y = 51;
    9a26:	1f 8e       	std	Y+31, r1	; 0x1f
    9a28:	f1 2c       	mov	r15, r1
    9a2a:	c1 2c       	mov	r12, r1
    9a2c:	d1 2c       	mov	r13, r1
    9a2e:	98 a1       	ldd	r25, Y+32	; 0x20
    9a30:	89 2f       	mov	r24, r25
    9a32:	90 e0       	ldi	r25, 0x00	; 0
    9a34:	9a a3       	std	Y+34, r25	; 0x22
    9a36:	89 a3       	std	Y+33, r24	; 0x21
			Points[6] = Config.Offsets[curve].Point7;
			channel	= Config.Offsets[curve].channel;
		}
		else
		{
			Points[0] = Config.Curve[curve].Point1;
    9a38:	1c 01       	movw	r2, r24
    9a3a:	e3 e0       	ldi	r30, 0x03	; 3
    9a3c:	22 0c       	add	r2, r2
    9a3e:	33 1c       	adc	r3, r3
    9a40:	ea 95       	dec	r30
    9a42:	e1 f7       	brne	.-8      	; 0x9a3c <edit_curve_item+0x6e>
			Points[1] = Config.Curve[curve].Point2;
			Points[2] = Config.Curve[curve].Point3;
			Points[3] = Config.Curve[curve].Point4;
			Points[4] = Config.Curve[curve].Point5;
			Points[5] = Config.Curve[curve].Point6;
    9a44:	8a 5b       	subi	r24, 0xBA	; 186
    9a46:	9f 4f       	sbci	r25, 0xFF	; 255
    9a48:	fc 01       	movw	r30, r24
    9a4a:	a3 e0       	ldi	r26, 0x03	; 3
    9a4c:	ee 0f       	add	r30, r30
    9a4e:	ff 1f       	adc	r31, r31
    9a50:	aa 95       	dec	r26
    9a52:	e1 f7       	brne	.-8      	; 0x9a4c <edit_curve_item+0x7e>
    9a54:	fe a3       	std	Y+38, r31	; 0x26
    9a56:	ed a3       	std	Y+37, r30	; 0x25
			Points[0] = Config.Offsets[curve].Point1;
			Points[1] = Config.Offsets[curve].Point2;
			Points[2] = Config.Offsets[curve].Point3;
			Points[3] = Config.Offsets[curve].Point4;
			Points[4] = Config.Offsets[curve].Point5;
			Points[5] = Config.Offsets[curve].Point6;
    9a58:	91 01       	movw	r18, r2
    9a5a:	2f 55       	subi	r18, 0x5F	; 95
    9a5c:	37 4f       	sbci	r19, 0xF7	; 247
    9a5e:	39 a7       	std	Y+41, r19	; 0x29
    9a60:	28 a7       	std	Y+40, r18	; 0x28
					break;
			}
		}
		
		// Move value box when point 1 is in the way
		if (((Config.Curve[curve].Point1 < 50) && (type == CURVE)) || ((Config.Offsets[curve].Point1 < 50) && (type == OFFSET)))
    9a62:	a1 01       	movw	r20, r2
    9a64:	47 5c       	subi	r20, 0xC7	; 199
    9a66:	59 4f       	sbci	r21, 0xF9	; 249
    9a68:	5a 01       	movw	r10, r20
    9a6a:	ca 01       	movw	r24, r20
    9a6c:	8d 59       	subi	r24, 0x9D	; 157
    9a6e:	9d 4f       	sbci	r25, 0xFD	; 253
    9a70:	9e a7       	std	Y+46, r25	; 0x2e
    9a72:	8d a7       	std	Y+45, r24	; 0x2d
					break;
				case 4:
					Config.Curve[curve].Point5 = value;
					break;
				case 5:
					Config.Curve[curve].Point6 = value;
    9a74:	e7 5c       	subi	r30, 0xC7	; 199
    9a76:	f9 4f       	sbci	r31, 0xF9	; 249
    9a78:	f8 ab       	std	Y+48, r31	; 0x30
    9a7a:	ef a7       	std	Y+47, r30	; 0x2f
	{
		reference = CURVESTARTM;
	}

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	while ((button != ENTER) && (button != ABORT))
    9a7c:	80 91 1f 09 	lds	r24, 0x091F
    9a80:	8f 7b       	andi	r24, 0xBF	; 191
    9a82:	80 3a       	cpi	r24, 0xA0	; 160
    9a84:	09 f4       	brne	.+2      	; 0x9a88 <edit_curve_item+0xba>
    9a86:	74 c3       	rjmp	.+1768   	; 0xa170 <edit_curve_item+0x7a2>
	{
		// Handle offset curves differently
		if (type == OFFSET)
		{
			// Get curve point ranges
			range = get_menu_range ((const unsigned char*)Offsets_menu_ranges[curve], Point_ref);
    9a88:	28 e2       	ldi	r18, 0x28	; 40

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	while ((button != ENTER) && (button != ABORT))
	{
		// Handle offset curves differently
		if (type == OFFSET)
    9a8a:	15 30       	cpi	r17, 0x05	; 5
    9a8c:	59 f4       	brne	.+22     	; 0x9aa4 <edit_curve_item+0xd6>
		{
			// Get curve point ranges
			range = get_menu_range ((const unsigned char*)Offsets_menu_ranges[curve], Point_ref);
    9a8e:	e9 a1       	ldd	r30, Y+33	; 0x21
    9a90:	fa a1       	ldd	r31, Y+34	; 0x22
    9a92:	2e 9f       	mul	r18, r30
    9a94:	c0 01       	movw	r24, r0
    9a96:	2f 9f       	mul	r18, r31
    9a98:	90 0d       	add	r25, r0
    9a9a:	11 24       	eor	r1, r1
    9a9c:	6f 2d       	mov	r22, r15
    9a9e:	89 5d       	subi	r24, 0xD9	; 217
    9aa0:	97 4d       	sbci	r25, 0xD7	; 215
    9aa2:	0a c0       	rjmp	.+20     	; 0x9ab8 <edit_curve_item+0xea>
		}
		else
		{
			range = get_menu_range ((const unsigned char*)Curves_menu_ranges[curve], Point_ref);
    9aa4:	49 a1       	ldd	r20, Y+33	; 0x21
    9aa6:	5a a1       	ldd	r21, Y+34	; 0x22
    9aa8:	24 9f       	mul	r18, r20
    9aaa:	c0 01       	movw	r24, r0
    9aac:	25 9f       	mul	r18, r21
    9aae:	90 0d       	add	r25, r0
    9ab0:	11 24       	eor	r1, r1
    9ab2:	6f 2d       	mov	r22, r15
    9ab4:	83 5e       	subi	r24, 0xE3	; 227
    9ab6:	9a 4d       	sbci	r25, 0xDA	; 218
    9ab8:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <get_menu_range>
    9abc:	2e 8b       	std	Y+22, r18	; 0x16
    9abe:	3f 8b       	std	Y+23, r19	; 0x17
    9ac0:	48 8f       	std	Y+24, r20	; 0x18
    9ac2:	59 8f       	std	Y+25, r21	; 0x19
    9ac4:	6a 8f       	std	Y+26, r22	; 0x1a
    9ac6:	2b a7       	std	Y+43, r18	; 0x2b
    9ac8:	3c a7       	std	Y+44, r19	; 0x2c
    9aca:	4f a3       	std	Y+39, r20	; 0x27
		}

		// Display update
		clear_buffer(buffer);
    9acc:	80 e0       	ldi	r24, 0x00	; 0
    9ace:	91 e0       	ldi	r25, 0x01	; 1
    9ad0:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
		
		// Handle offset curves differently
		if (type == OFFSET)
    9ad4:	15 30       	cpi	r17, 0x05	; 5
    9ad6:	39 f4       	brne	.+14     	; 0x9ae6 <edit_curve_item+0x118>
		{
			// Print graph frame
			print_menu_frame(OFFSET);
    9ad8:	85 e0       	ldi	r24, 0x05	; 5
    9ada:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <print_menu_frame>
		}
		
		// Print axes
		if (type == OFFSET)
		{
			drawline(buffer, 64, 0, 64, 52, 1);		// Vertical
    9ade:	ee 24       	eor	r14, r14
    9ae0:	e3 94       	inc	r14
    9ae2:	04 e3       	ldi	r16, 0x34	; 52
    9ae4:	06 c0       	rjmp	.+12     	; 0x9af2 <edit_curve_item+0x124>
			print_menu_frame(OFFSET);
		}
		else
		{
			// Print graph frame
			print_menu_frame(CURVE);
    9ae6:	84 e0       	ldi	r24, 0x04	; 4
    9ae8:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <print_menu_frame>
		{
			drawline(buffer, 64, 0, 64, 52, 1);		// Vertical
		}
		else
		{
			drawline(buffer, 64, 0, 64, 57, 1);		// Vertical
    9aec:	ee 24       	eor	r14, r14
    9aee:	e3 94       	inc	r14
    9af0:	09 e3       	ldi	r16, 0x39	; 57
    9af2:	20 e4       	ldi	r18, 0x40	; 64
    9af4:	40 e0       	ldi	r20, 0x00	; 0
    9af6:	60 e4       	ldi	r22, 0x40	; 64
    9af8:	80 e0       	ldi	r24, 0x00	; 0
    9afa:	91 e0       	ldi	r25, 0x01	; 1
    9afc:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
		}
		
		drawline(buffer, 0, 29, 128, 29, 1);	// Horizontal
    9b00:	ee 24       	eor	r14, r14
    9b02:	e3 94       	inc	r14
    9b04:	0d e1       	ldi	r16, 0x1D	; 29
    9b06:	20 e8       	ldi	r18, 0x80	; 128
    9b08:	4d e1       	ldi	r20, 0x1D	; 29
    9b0a:	60 e0       	ldi	r22, 0x00	; 0
    9b0c:	80 e0       	ldi	r24, 0x00	; 0
    9b0e:	91 e0       	ldi	r25, 0x01	; 1
    9b10:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
				
		// Get the current curve's data
		if (type == OFFSET)
		{
			Points[0] = Config.Offsets[curve].Point1;
    9b14:	c1 01       	movw	r24, r2
    9b16:	87 5c       	subi	r24, 0xC7	; 199
    9b18:	99 4f       	sbci	r25, 0xF9	; 249
    9b1a:	fc 01       	movw	r30, r24
		}
		
		drawline(buffer, 0, 29, 128, 29, 1);	// Horizontal
				
		// Get the current curve's data
		if (type == OFFSET)
    9b1c:	15 30       	cpi	r17, 0x05	; 5
    9b1e:	c9 f5       	brne	.+114    	; 0x9b92 <edit_curve_item+0x1c4>
		{
			Points[0] = Config.Offsets[curve].Point1;
    9b20:	ed 59       	subi	r30, 0x9D	; 157
    9b22:	fd 4f       	sbci	r31, 0xFD	; 253
    9b24:	20 81       	ld	r18, Z
    9b26:	02 2e       	mov	r0, r18
    9b28:	00 0c       	add	r0, r0
    9b2a:	33 0b       	sbc	r19, r19
    9b2c:	3a 83       	std	Y+2, r19	; 0x02
    9b2e:	29 83       	std	Y+1, r18	; 0x01
			Points[1] = Config.Offsets[curve].Point2;
    9b30:	31 96       	adiw	r30, 0x01	; 1
    9b32:	20 81       	ld	r18, Z
    9b34:	02 2e       	mov	r0, r18
    9b36:	00 0c       	add	r0, r0
    9b38:	33 0b       	sbc	r19, r19
    9b3a:	3c 83       	std	Y+4, r19	; 0x04
    9b3c:	2b 83       	std	Y+3, r18	; 0x03
			Points[2] = Config.Offsets[curve].Point3;
    9b3e:	31 96       	adiw	r30, 0x01	; 1
    9b40:	20 81       	ld	r18, Z
    9b42:	02 2e       	mov	r0, r18
    9b44:	00 0c       	add	r0, r0
    9b46:	33 0b       	sbc	r19, r19
    9b48:	3e 83       	std	Y+6, r19	; 0x06
    9b4a:	2d 83       	std	Y+5, r18	; 0x05
			Points[3] = Config.Offsets[curve].Point4;
    9b4c:	31 96       	adiw	r30, 0x01	; 1
    9b4e:	20 81       	ld	r18, Z
    9b50:	02 2e       	mov	r0, r18
    9b52:	00 0c       	add	r0, r0
    9b54:	33 0b       	sbc	r19, r19
    9b56:	38 87       	std	Y+8, r19	; 0x08
    9b58:	2f 83       	std	Y+7, r18	; 0x07
			Points[4] = Config.Offsets[curve].Point5;
    9b5a:	31 96       	adiw	r30, 0x01	; 1
    9b5c:	20 81       	ld	r18, Z
    9b5e:	02 2e       	mov	r0, r18
    9b60:	00 0c       	add	r0, r0
    9b62:	33 0b       	sbc	r19, r19
    9b64:	3a 87       	std	Y+10, r19	; 0x0a
    9b66:	29 87       	std	Y+9, r18	; 0x09
			Points[5] = Config.Offsets[curve].Point6;
    9b68:	e8 a5       	ldd	r30, Y+40	; 0x28
    9b6a:	f9 a5       	ldd	r31, Y+41	; 0x29
    9b6c:	20 81       	ld	r18, Z
    9b6e:	02 2e       	mov	r0, r18
    9b70:	00 0c       	add	r0, r0
    9b72:	33 0b       	sbc	r19, r19
    9b74:	3c 87       	std	Y+12, r19	; 0x0c
    9b76:	2b 87       	std	Y+11, r18	; 0x0b
			Points[6] = Config.Offsets[curve].Point7;
    9b78:	fc 01       	movw	r30, r24
    9b7a:	e7 59       	subi	r30, 0x97	; 151
    9b7c:	fd 4f       	sbci	r31, 0xFD	; 253
    9b7e:	20 81       	ld	r18, Z
    9b80:	02 2e       	mov	r0, r18
    9b82:	00 0c       	add	r0, r0
    9b84:	33 0b       	sbc	r19, r19
    9b86:	3e 87       	std	Y+14, r19	; 0x0e
    9b88:	2d 87       	std	Y+13, r18	; 0x0d
			channel	= Config.Offsets[curve].channel;
    9b8a:	31 96       	adiw	r30, 0x01	; 1
    9b8c:	20 81       	ld	r18, Z
    9b8e:	2a a7       	std	Y+42, r18	; 0x2a
    9b90:	3a c0       	rjmp	.+116    	; 0x9c06 <edit_curve_item+0x238>
		}
		else
		{
			Points[0] = Config.Curve[curve].Point1;
    9b92:	e5 5d       	subi	r30, 0xD5	; 213
    9b94:	fd 4f       	sbci	r31, 0xFD	; 253
    9b96:	20 81       	ld	r18, Z
    9b98:	02 2e       	mov	r0, r18
    9b9a:	00 0c       	add	r0, r0
    9b9c:	33 0b       	sbc	r19, r19
    9b9e:	3a 83       	std	Y+2, r19	; 0x02
    9ba0:	29 83       	std	Y+1, r18	; 0x01
			Points[1] = Config.Curve[curve].Point2;
    9ba2:	31 96       	adiw	r30, 0x01	; 1
    9ba4:	20 81       	ld	r18, Z
    9ba6:	02 2e       	mov	r0, r18
    9ba8:	00 0c       	add	r0, r0
    9baa:	33 0b       	sbc	r19, r19
    9bac:	3c 83       	std	Y+4, r19	; 0x04
    9bae:	2b 83       	std	Y+3, r18	; 0x03
			Points[2] = Config.Curve[curve].Point3;
    9bb0:	31 96       	adiw	r30, 0x01	; 1
    9bb2:	20 81       	ld	r18, Z
    9bb4:	02 2e       	mov	r0, r18
    9bb6:	00 0c       	add	r0, r0
    9bb8:	33 0b       	sbc	r19, r19
    9bba:	3e 83       	std	Y+6, r19	; 0x06
    9bbc:	2d 83       	std	Y+5, r18	; 0x05
			Points[3] = Config.Curve[curve].Point4;
    9bbe:	31 96       	adiw	r30, 0x01	; 1
    9bc0:	20 81       	ld	r18, Z
    9bc2:	02 2e       	mov	r0, r18
    9bc4:	00 0c       	add	r0, r0
    9bc6:	33 0b       	sbc	r19, r19
    9bc8:	38 87       	std	Y+8, r19	; 0x08
    9bca:	2f 83       	std	Y+7, r18	; 0x07
			Points[4] = Config.Curve[curve].Point5;
    9bcc:	31 96       	adiw	r30, 0x01	; 1
    9bce:	20 81       	ld	r18, Z
    9bd0:	02 2e       	mov	r0, r18
    9bd2:	00 0c       	add	r0, r0
    9bd4:	33 0b       	sbc	r19, r19
    9bd6:	3a 87       	std	Y+10, r19	; 0x0a
    9bd8:	29 87       	std	Y+9, r18	; 0x09
			Points[5] = Config.Curve[curve].Point6;
    9bda:	ed a1       	ldd	r30, Y+37	; 0x25
    9bdc:	fe a1       	ldd	r31, Y+38	; 0x26
    9bde:	e7 5c       	subi	r30, 0xC7	; 199
    9be0:	f9 4f       	sbci	r31, 0xF9	; 249
    9be2:	20 81       	ld	r18, Z
    9be4:	02 2e       	mov	r0, r18
    9be6:	00 0c       	add	r0, r0
    9be8:	33 0b       	sbc	r19, r19
    9bea:	3c 87       	std	Y+12, r19	; 0x0c
    9bec:	2b 87       	std	Y+11, r18	; 0x0b
			Points[6] = Config.Curve[curve].Point7;
    9bee:	fc 01       	movw	r30, r24
    9bf0:	ef 5c       	subi	r30, 0xCF	; 207
    9bf2:	fd 4f       	sbci	r31, 0xFD	; 253
    9bf4:	20 81       	ld	r18, Z
    9bf6:	02 2e       	mov	r0, r18
    9bf8:	00 0c       	add	r0, r0
    9bfa:	33 0b       	sbc	r19, r19
    9bfc:	3e 87       	std	Y+14, r19	; 0x0e
    9bfe:	2d 87       	std	Y+13, r18	; 0x0d
			channel	= Config.Curve[curve].channel;			
    9c00:	31 96       	adiw	r30, 0x01	; 1
    9c02:	30 81       	ld	r19, Z
    9c04:	3a a7       	std	Y+42, r19	; 0x2a
    9c06:	4e 01       	movw	r8, r28
    9c08:	4f e0       	ldi	r20, 0x0F	; 15
    9c0a:	84 0e       	add	r8, r20
    9c0c:	91 1c       	adc	r9, r1
    9c0e:	ce 01       	movw	r24, r28
    9c10:	01 96       	adiw	r24, 0x01	; 1
    9c12:	2c 01       	movw	r4, r24
		}

		// Calculate and draw points
		for (i = 0; i < 7; i++)
    9c14:	30 e0       	ldi	r19, 0x00	; 0
				}
			}
			// Curves -125 to -125
			else
			{
				InterPoints[i] = (int8_t)(29 - ((Points[i] * 50) / 250));
    9c16:	6d e1       	ldi	r22, 0x1D	; 29
    9c18:	76 2e       	mov	r7, r22
			if (type == CURVE)
			{
				// Curves 0 to 100
				if (curve < 2)
				{
					InterPoints[i] = (int8_t)(54 - ((Points[i] * 50) / 100));				
    9c1a:	76 e3       	ldi	r23, 0x36	; 54
    9c1c:	67 2e       	mov	r6, r23

		// Calculate and draw points
		for (i = 0; i < 7; i++)
		{
			// Interpolate points for the offset graph
			if (type == CURVE)
    9c1e:	14 30       	cpi	r17, 0x04	; 4
    9c20:	c1 f4       	brne	.+48     	; 0x9c52 <edit_curve_item+0x284>
			{
				// Curves 0 to 100
				if (curve < 2)
    9c22:	98 a1       	ldd	r25, Y+32	; 0x20
				{
					InterPoints[i] = (int8_t)(54 - ((Points[i] * 50) / 100));				
    9c24:	f2 01       	movw	r30, r4
		{
			// Interpolate points for the offset graph
			if (type == CURVE)
			{
				// Curves 0 to 100
				if (curve < 2)
    9c26:	92 30       	cpi	r25, 0x02	; 2
    9c28:	40 f4       	brcc	.+16     	; 0x9c3a <edit_curve_item+0x26c>
				{
					InterPoints[i] = (int8_t)(54 - ((Points[i] * 50) / 100));				
    9c2a:	80 81       	ld	r24, Z
    9c2c:	91 81       	ldd	r25, Z+1	; 0x01
    9c2e:	97 fd       	sbrc	r25, 7
    9c30:	01 96       	adiw	r24, 0x01	; 1
    9c32:	95 95       	asr	r25
    9c34:	87 95       	ror	r24
    9c36:	f6 2d       	mov	r31, r6
    9c38:	09 c0       	rjmp	.+18     	; 0x9c4c <edit_curve_item+0x27e>
				}
				// Curves -100 to -100
				else
				{
					InterPoints[i] = (int8_t)(29 - ((Points[i] * 50) / 200));			
    9c3a:	80 81       	ld	r24, Z
    9c3c:	91 81       	ldd	r25, Z+1	; 0x01
    9c3e:	97 fd       	sbrc	r25, 7
    9c40:	03 96       	adiw	r24, 0x03	; 3
    9c42:	95 95       	asr	r25
    9c44:	87 95       	ror	r24
    9c46:	95 95       	asr	r25
    9c48:	87 95       	ror	r24
    9c4a:	f7 2d       	mov	r31, r7
    9c4c:	f8 1b       	sub	r31, r24
    9c4e:	8f 2f       	mov	r24, r31
    9c50:	09 c0       	rjmp	.+18     	; 0x9c64 <edit_curve_item+0x296>
				}
			}
			// Curves -125 to -125
			else
			{
				InterPoints[i] = (int8_t)(29 - ((Points[i] * 50) / 250));
    9c52:	f2 01       	movw	r30, r4
    9c54:	80 81       	ld	r24, Z
    9c56:	91 81       	ldd	r25, Z+1	; 0x01
    9c58:	65 e0       	ldi	r22, 0x05	; 5
    9c5a:	70 e0       	ldi	r23, 0x00	; 0
    9c5c:	0e 94 73 6f 	call	0xdee6	; 0xdee6 <__divmodhi4>
    9c60:	87 2d       	mov	r24, r7
    9c62:	86 1b       	sub	r24, r22
    9c64:	f4 01       	movw	r30, r8
    9c66:	80 83       	st	Z, r24
			}

			// Draw boxes on the five points
			switch(i)
    9c68:	33 30       	cpi	r19, 0x03	; 3
    9c6a:	79 f0       	breq	.+30     	; 0x9c8a <edit_curve_item+0x2bc>
    9c6c:	2c f4       	brge	.+10     	; 0x9c78 <edit_curve_item+0x2aa>
    9c6e:	31 30       	cpi	r19, 0x01	; 1
    9c70:	a1 f0       	breq	.+40     	; 0x9c9a <edit_curve_item+0x2cc>
    9c72:	32 30       	cpi	r19, 0x02	; 2
    9c74:	41 f0       	breq	.+16     	; 0x9c86 <edit_curve_item+0x2b8>
    9c76:	05 c0       	rjmp	.+10     	; 0x9c82 <edit_curve_item+0x2b4>
    9c78:	35 30       	cpi	r19, 0x05	; 5
    9c7a:	59 f0       	breq	.+22     	; 0x9c92 <edit_curve_item+0x2c4>
    9c7c:	44 f0       	brlt	.+16     	; 0x9c8e <edit_curve_item+0x2c0>
    9c7e:	36 30       	cpi	r19, 0x06	; 6
    9c80:	51 f0       	breq	.+20     	; 0x9c96 <edit_curve_item+0x2c8>
			{
				case 0:
					Point_x = 2;
    9c82:	52 e0       	ldi	r21, 0x02	; 2
    9c84:	0b c0       	rjmp	.+22     	; 0x9c9c <edit_curve_item+0x2ce>
					break;
				case 1:
					Point_x = 22;
					break;
				case 2:
					Point_x = 42;
    9c86:	5a e2       	ldi	r21, 0x2A	; 42
					break;
    9c88:	09 c0       	rjmp	.+18     	; 0x9c9c <edit_curve_item+0x2ce>
				case 3:
					Point_x = 62;
    9c8a:	5e e3       	ldi	r21, 0x3E	; 62
					break;
    9c8c:	07 c0       	rjmp	.+14     	; 0x9c9c <edit_curve_item+0x2ce>
				case 4:
					Point_x = 82;
    9c8e:	52 e5       	ldi	r21, 0x52	; 82
					break;
    9c90:	05 c0       	rjmp	.+10     	; 0x9c9c <edit_curve_item+0x2ce>
				case 5:
					Point_x = 102;
    9c92:	56 e6       	ldi	r21, 0x66	; 102
					break;
    9c94:	03 c0       	rjmp	.+6      	; 0x9c9c <edit_curve_item+0x2ce>
				case 6:
					Point_x = 121;
    9c96:	59 e7       	ldi	r21, 0x79	; 121
					break;
    9c98:	01 c0       	rjmp	.+2      	; 0x9c9c <edit_curve_item+0x2ce>
			{
				case 0:
					Point_x = 2;
					break;
				case 1:
					Point_x = 22;
    9c9a:	56 e1       	ldi	r21, 0x16	; 22
					Point_x = 121;
					break;
			}
			
			// Black box surrounding point (vertical origin is offset by 2)
			fillrect(buffer, Point_x, InterPoints[i] - 2, 5, 5, 1);
    9c9c:	f4 01       	movw	r30, r8
    9c9e:	41 91       	ld	r20, Z+
    9ca0:	4f 01       	movw	r8, r30
    9ca2:	42 50       	subi	r20, 0x02	; 2
    9ca4:	ee 24       	eor	r14, r14
    9ca6:	e3 94       	inc	r14
    9ca8:	05 e0       	ldi	r16, 0x05	; 5
    9caa:	25 e0       	ldi	r18, 0x05	; 5
    9cac:	65 2f       	mov	r22, r21
    9cae:	80 e0       	ldi	r24, 0x00	; 0
    9cb0:	91 e0       	ldi	r25, 0x01	; 1
    9cb2:	39 ab       	std	Y+49, r19	; 0x31
    9cb4:	5a ab       	std	Y+50, r21	; 0x32
    9cb6:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <fillrect>
    9cba:	39 a9       	ldd	r19, Y+49	; 0x31
    9cbc:	3f 5f       	subi	r19, 0xFF	; 255
    9cbe:	f2 e0       	ldi	r31, 0x02	; 2
    9cc0:	4f 0e       	add	r4, r31
    9cc2:	51 1c       	adc	r5, r1
			Points[6] = Config.Curve[curve].Point7;
			channel	= Config.Curve[curve].channel;			
		}

		// Calculate and draw points
		for (i = 0; i < 7; i++)
    9cc4:	37 30       	cpi	r19, 0x07	; 7
    9cc6:	09 f0       	breq	.+2      	; 0x9cca <edit_curve_item+0x2fc>
    9cc8:	aa cf       	rjmp	.-172    	; 0x9c1e <edit_curve_item+0x250>
			// Black box surrounding point (vertical origin is offset by 2)
			fillrect(buffer, Point_x, InterPoints[i] - 2, 5, 5, 1);
		}

		// Draw lines between the points
		drawline(buffer, 4, InterPoints[0], 24, InterPoints[1], 1);
    9cca:	98 88       	ldd	r9, Y+16	; 0x10
    9ccc:	09 2d       	mov	r16, r9
    9cce:	28 e1       	ldi	r18, 0x18	; 24
    9cd0:	4f 85       	ldd	r20, Y+15	; 0x0f
    9cd2:	64 e0       	ldi	r22, 0x04	; 4
    9cd4:	80 e0       	ldi	r24, 0x00	; 0
    9cd6:	91 e0       	ldi	r25, 0x01	; 1
    9cd8:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
		drawline(buffer, 24, InterPoints[1], 44, InterPoints[2], 1);
    9cdc:	89 88       	ldd	r8, Y+17	; 0x11
    9cde:	08 2d       	mov	r16, r8
    9ce0:	2c e2       	ldi	r18, 0x2C	; 44
    9ce2:	49 2d       	mov	r20, r9
    9ce4:	68 e1       	ldi	r22, 0x18	; 24
    9ce6:	80 e0       	ldi	r24, 0x00	; 0
    9ce8:	91 e0       	ldi	r25, 0x01	; 1
    9cea:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
		drawline(buffer, 44, InterPoints[2], 64, InterPoints[3], 1);
    9cee:	9a 88       	ldd	r9, Y+18	; 0x12
    9cf0:	09 2d       	mov	r16, r9
    9cf2:	20 e4       	ldi	r18, 0x40	; 64
    9cf4:	48 2d       	mov	r20, r8
    9cf6:	6c e2       	ldi	r22, 0x2C	; 44
    9cf8:	80 e0       	ldi	r24, 0x00	; 0
    9cfa:	91 e0       	ldi	r25, 0x01	; 1
    9cfc:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
		drawline(buffer, 64, InterPoints[3], 84, InterPoints[4], 1);
    9d00:	8b 88       	ldd	r8, Y+19	; 0x13
    9d02:	08 2d       	mov	r16, r8
    9d04:	24 e5       	ldi	r18, 0x54	; 84
    9d06:	49 2d       	mov	r20, r9
    9d08:	60 e4       	ldi	r22, 0x40	; 64
    9d0a:	80 e0       	ldi	r24, 0x00	; 0
    9d0c:	91 e0       	ldi	r25, 0x01	; 1
    9d0e:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
		drawline(buffer, 84, InterPoints[4], 104, InterPoints[5], 1);
    9d12:	9c 88       	ldd	r9, Y+20	; 0x14
    9d14:	09 2d       	mov	r16, r9
    9d16:	28 e6       	ldi	r18, 0x68	; 104
    9d18:	48 2d       	mov	r20, r8
    9d1a:	64 e5       	ldi	r22, 0x54	; 84
    9d1c:	80 e0       	ldi	r24, 0x00	; 0
    9d1e:	91 e0       	ldi	r25, 0x01	; 1
    9d20:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>
		drawline(buffer, 104, InterPoints[5], 123, InterPoints[6], 1);
    9d24:	0d 89       	ldd	r16, Y+21	; 0x15
    9d26:	2b e7       	ldi	r18, 0x7B	; 123
    9d28:	49 2d       	mov	r20, r9
    9d2a:	68 e6       	ldi	r22, 0x68	; 104
    9d2c:	80 e0       	ldi	r24, 0x00	; 0
    9d2e:	91 e0       	ldi	r25, 0x01	; 1
    9d30:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <drawline>

		// Highlight the current point
		switch(Point_ref)
    9d34:	4f 2c       	mov	r4, r15
    9d36:	51 2c       	mov	r5, r1
    9d38:	5a a9       	ldd	r21, Y+50	; 0x32
    9d3a:	28 e0       	ldi	r18, 0x08	; 8
    9d3c:	42 16       	cp	r4, r18
    9d3e:	51 04       	cpc	r5, r1
    9d40:	90 f4       	brcc	.+36     	; 0x9d66 <edit_curve_item+0x398>
    9d42:	f2 01       	movw	r30, r4
    9d44:	e7 5a       	subi	r30, 0xA7	; 167
    9d46:	ff 4f       	sbci	r31, 0xFF	; 255
    9d48:	0c 94 a6 6f 	jmp	0xdf4c	; 0xdf4c <__tablejump2__>
		{
			case 0:
			Point_x = 0;
			break;
			case 1:
			Point_x = 20;
    9d4c:	54 e1       	ldi	r21, 0x14	; 20
			break;
    9d4e:	0b c0       	rjmp	.+22     	; 0x9d66 <edit_curve_item+0x398>
			case 2:
			Point_x = 40;
    9d50:	58 e2       	ldi	r21, 0x28	; 40
			break;
    9d52:	09 c0       	rjmp	.+18     	; 0x9d66 <edit_curve_item+0x398>
			case 3:
			Point_x = 60;
    9d54:	5c e3       	ldi	r21, 0x3C	; 60
			break;
    9d56:	07 c0       	rjmp	.+14     	; 0x9d66 <edit_curve_item+0x398>
			case 4:
			Point_x = 80;
    9d58:	50 e5       	ldi	r21, 0x50	; 80
			break;
    9d5a:	05 c0       	rjmp	.+10     	; 0x9d66 <edit_curve_item+0x398>
			case 5:
			Point_x = 100;
    9d5c:	54 e6       	ldi	r21, 0x64	; 100
			break;
    9d5e:	03 c0       	rjmp	.+6      	; 0x9d66 <edit_curve_item+0x398>
			case 6:
			Point_x = 119;
			break;
			case 7:
			Point_x = 119;
    9d60:	57 e7       	ldi	r21, 0x77	; 119
			break;
    9d62:	01 c0       	rjmp	.+2      	; 0x9d66 <edit_curve_item+0x398>

		// Highlight the current point
		switch(Point_ref)
		{
			case 0:
			Point_x = 0;
    9d64:	50 e0       	ldi	r21, 0x00	; 0
			Point_x = 119;
			break;
		}
		
		// Adjust box coordinates
		Point_y = (InterPoints[Point_ref] - 4);
    9d66:	ef e0       	ldi	r30, 0x0F	; 15
    9d68:	f0 e0       	ldi	r31, 0x00	; 0
    9d6a:	ec 0f       	add	r30, r28
    9d6c:	fd 1f       	adc	r31, r29
    9d6e:	ef 0d       	add	r30, r15
    9d70:	f1 1d       	adc	r31, r1
    9d72:	40 81       	ld	r20, Z

		// Channel numbers are highlighted differently
		if (Point_ref == 7)
    9d74:	37 e0       	ldi	r19, 0x07	; 7
    9d76:	f3 12       	cpse	r15, r19
    9d78:	38 c0       	rjmp	.+112    	; 0x9dea <edit_curve_item+0x41c>
		{
			pgm_mugui_scopy((char*)pgm_read_word(&text_menu[reference + Config.Curve[curve].channel]));		// Copy string to pBuffer
    9d7a:	a1 01       	movw	r20, r2
    9d7c:	47 5c       	subi	r20, 0xC7	; 199
    9d7e:	59 4f       	sbci	r21, 0xF9	; 249
    9d80:	6a 01       	movw	r12, r20
    9d82:	4a 01       	movw	r8, r20
    9d84:	5e ec       	ldi	r21, 0xCE	; 206
    9d86:	85 1a       	sub	r8, r21
    9d88:	5d ef       	ldi	r21, 0xFD	; 253
    9d8a:	95 0a       	sbc	r9, r21
    9d8c:	f4 01       	movw	r30, r8
    9d8e:	80 81       	ld	r24, Z
    9d90:	eb a1       	ldd	r30, Y+35	; 0x23
    9d92:	fc a1       	ldd	r31, Y+36	; 0x24
    9d94:	e8 0f       	add	r30, r24
    9d96:	f1 1d       	adc	r31, r1
    9d98:	87 fd       	sbrc	r24, 7
    9d9a:	fa 95       	dec	r31
    9d9c:	ee 0f       	add	r30, r30
    9d9e:	ff 1f       	adc	r31, r31
    9da0:	e1 5b       	subi	r30, 0xB1	; 177
    9da2:	fb 4e       	sbci	r31, 0xEB	; 235
    9da4:	85 91       	lpm	r24, Z+
    9da6:	94 91       	lpm	r25, Z
    9da8:	0e 94 10 62 	call	0xc420	; 0xc420 <pgm_mugui_scopy>
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
    9dac:	ae 01       	movw	r20, r28
    9dae:	45 5e       	subi	r20, 0xE5	; 229
    9db0:	5f 4f       	sbci	r21, 0xFF	; 255
    9db2:	6d e8       	ldi	r22, 0x8D	; 141
    9db4:	7f e0       	ldi	r23, 0x0F	; 15
    9db6:	82 ec       	ldi	r24, 0xC2	; 194
    9db8:	95 e0       	ldi	r25, 0x05	; 5
    9dba:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
			drawrect(buffer,(123 - size.x),(chanbox_y - 1 - size.y), (size.x + 5), (size.y + 4), 1);		// Outline
    9dbe:	4d 8d       	ldd	r20, Y+29	; 0x1d
    9dc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9dc2:	04 e0       	ldi	r16, 0x04	; 4
    9dc4:	04 0f       	add	r16, r20
    9dc6:	25 e0       	ldi	r18, 0x05	; 5
    9dc8:	28 0f       	add	r18, r24
    9dca:	40 95       	com	r20
    9dcc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    9dce:	4f 0f       	add	r20, r31
    9dd0:	6b e7       	ldi	r22, 0x7B	; 123
    9dd2:	68 1b       	sub	r22, r24
    9dd4:	ee 24       	eor	r14, r14
    9dd6:	e3 94       	inc	r14
    9dd8:	80 e0       	ldi	r24, 0x00	; 0
    9dda:	91 e0       	ldi	r25, 0x01	; 1
    9ddc:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <drawrect>
		{
			drawrect(buffer,Point_x,Point_y, 9, 9, 1);
		}

		// Print value of current object in a box somewhere
		if (type == CURVE)
    9de0:	14 30       	cpi	r17, 0x04	; 4
    9de2:	09 f0       	breq	.+2      	; 0x9de6 <edit_curve_item+0x418>
    9de4:	59 c0       	rjmp	.+178    	; 0x9e98 <edit_curve_item+0x4ca>
					break;
				case 6:
					value = Config.Curve[curve].Point7;
					break;
				case 7:
					value = Config.Curve[curve].channel;
    9de6:	f4 01       	movw	r30, r8
    9de8:	5a c0       	rjmp	.+180    	; 0x9e9e <edit_curve_item+0x4d0>
			Point_x = 119;
			break;
		}
		
		// Adjust box coordinates
		Point_y = (InterPoints[Point_ref] - 4);
    9dea:	44 50       	subi	r20, 0x04	; 4
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
			drawrect(buffer,(123 - size.x),(chanbox_y - 1 - size.y), (size.x + 5), (size.y + 4), 1);		// Outline
		}
		else
		{
			drawrect(buffer,Point_x,Point_y, 9, 9, 1);
    9dec:	ee 24       	eor	r14, r14
    9dee:	e3 94       	inc	r14
    9df0:	09 e0       	ldi	r16, 0x09	; 9
    9df2:	29 e0       	ldi	r18, 0x09	; 9
    9df4:	65 2f       	mov	r22, r21
    9df6:	80 e0       	ldi	r24, 0x00	; 0
    9df8:	91 e0       	ldi	r25, 0x01	; 1
    9dfa:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <drawrect>
		}

		// Print value of current object in a box somewhere
		if (type == CURVE)
    9dfe:	14 30       	cpi	r17, 0x04	; 4
    9e00:	39 f5       	brne	.+78     	; 0x9e50 <edit_curve_item+0x482>
		{
			switch(Point_ref)
    9e02:	27 e0       	ldi	r18, 0x07	; 7
    9e04:	42 16       	cp	r4, r18
    9e06:	51 04       	cpc	r5, r1
    9e08:	08 f0       	brcs	.+2      	; 0x9e0c <edit_curve_item+0x43e>
    9e0a:	4d c0       	rjmp	.+154    	; 0x9ea6 <edit_curve_item+0x4d8>
    9e0c:	f2 01       	movw	r30, r4
    9e0e:	ef 59       	subi	r30, 0x9F	; 159
    9e10:	ff 4f       	sbci	r31, 0xFF	; 255
    9e12:	0c 94 a6 6f 	jmp	0xdf4c	; 0xdf4c <__tablejump2__>
			{
				case 0:
					value = Config.Curve[curve].Point1;
    9e16:	f1 01       	movw	r30, r2
    9e18:	ec 59       	subi	r30, 0x9C	; 156
    9e1a:	f7 4f       	sbci	r31, 0xF7	; 247
    9e1c:	40 c0       	rjmp	.+128    	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 1:
					value = Config.Curve[curve].Point2;
    9e1e:	f1 01       	movw	r30, r2
    9e20:	eb 59       	subi	r30, 0x9B	; 155
    9e22:	f7 4f       	sbci	r31, 0xF7	; 247
    9e24:	3c c0       	rjmp	.+120    	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 2:
					value = Config.Curve[curve].Point3;
    9e26:	f1 01       	movw	r30, r2
    9e28:	ea 59       	subi	r30, 0x9A	; 154
    9e2a:	f7 4f       	sbci	r31, 0xF7	; 247
    9e2c:	38 c0       	rjmp	.+112    	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 3:
					value = Config.Curve[curve].Point4;
    9e2e:	f1 01       	movw	r30, r2
    9e30:	e9 59       	subi	r30, 0x99	; 153
    9e32:	f7 4f       	sbci	r31, 0xF7	; 247
    9e34:	34 c0       	rjmp	.+104    	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 4:
					value = Config.Curve[curve].Point5;
    9e36:	f1 01       	movw	r30, r2
    9e38:	e8 59       	subi	r30, 0x98	; 152
    9e3a:	f7 4f       	sbci	r31, 0xF7	; 247
    9e3c:	30 c0       	rjmp	.+96     	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 5:
					value = Config.Curve[curve].Point6;
    9e3e:	ed a1       	ldd	r30, Y+37	; 0x25
    9e40:	fe a1       	ldd	r31, Y+38	; 0x26
    9e42:	e7 5c       	subi	r30, 0xC7	; 199
    9e44:	f9 4f       	sbci	r31, 0xF9	; 249
    9e46:	2b c0       	rjmp	.+86     	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 6:
					value = Config.Curve[curve].Point7;
    9e48:	f1 01       	movw	r30, r2
    9e4a:	e6 59       	subi	r30, 0x96	; 150
    9e4c:	f7 4f       	sbci	r31, 0xF7	; 247
    9e4e:	27 c0       	rjmp	.+78     	; 0x9e9e <edit_curve_item+0x4d0>
			}
		}
		// Offsets
		else
		{
			switch(Point_ref)
    9e50:	f7 e0       	ldi	r31, 0x07	; 7
    9e52:	4f 16       	cp	r4, r31
    9e54:	51 04       	cpc	r5, r1
    9e56:	38 f5       	brcc	.+78     	; 0x9ea6 <edit_curve_item+0x4d8>
    9e58:	f2 01       	movw	r30, r4
    9e5a:	e8 59       	subi	r30, 0x98	; 152
    9e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    9e5e:	0c 94 a6 6f 	jmp	0xdf4c	; 0xdf4c <__tablejump2__>
			{
				case 0:
					value = Config.Offsets[curve].Point1;
    9e62:	f1 01       	movw	r30, r2
    9e64:	e4 56       	subi	r30, 0x64	; 100
    9e66:	f7 4f       	sbci	r31, 0xF7	; 247
    9e68:	1a c0       	rjmp	.+52     	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 1:
					value = Config.Offsets[curve].Point2;
    9e6a:	f1 01       	movw	r30, r2
    9e6c:	e3 56       	subi	r30, 0x63	; 99
    9e6e:	f7 4f       	sbci	r31, 0xF7	; 247
    9e70:	16 c0       	rjmp	.+44     	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 2:
					value = Config.Offsets[curve].Point3;
    9e72:	f1 01       	movw	r30, r2
    9e74:	e2 56       	subi	r30, 0x62	; 98
    9e76:	f7 4f       	sbci	r31, 0xF7	; 247
    9e78:	12 c0       	rjmp	.+36     	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 3:
					value = Config.Offsets[curve].Point4;
    9e7a:	f1 01       	movw	r30, r2
    9e7c:	e1 56       	subi	r30, 0x61	; 97
    9e7e:	f7 4f       	sbci	r31, 0xF7	; 247
    9e80:	0e c0       	rjmp	.+28     	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 4:
					value = Config.Offsets[curve].Point5;
    9e82:	f1 01       	movw	r30, r2
    9e84:	e0 56       	subi	r30, 0x60	; 96
    9e86:	f7 4f       	sbci	r31, 0xF7	; 247
    9e88:	0a c0       	rjmp	.+20     	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 5:
					value = Config.Offsets[curve].Point6;
    9e8a:	e8 a5       	ldd	r30, Y+40	; 0x28
    9e8c:	f9 a5       	ldd	r31, Y+41	; 0x29
    9e8e:	07 c0       	rjmp	.+14     	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 6:
					value = Config.Offsets[curve].Point7;
    9e90:	f1 01       	movw	r30, r2
    9e92:	ee 55       	subi	r30, 0x5E	; 94
    9e94:	f7 4f       	sbci	r31, 0xF7	; 247
    9e96:	03 c0       	rjmp	.+6      	; 0x9e9e <edit_curve_item+0x4d0>
					break;
				case 7:
					value = Config.Offsets[curve].channel;
    9e98:	f6 01       	movw	r30, r12
    9e9a:	e6 59       	subi	r30, 0x96	; 150
    9e9c:	fd 4f       	sbci	r31, 0xFD	; 253
    9e9e:	c0 80       	ld	r12, Z
    9ea0:	0c 2c       	mov	r0, r12
    9ea2:	00 0c       	add	r0, r0
    9ea4:	dd 08       	sbc	r13, r13
					break;
			}
		}
		
		// Move value box when point 1 is in the way
		if (((Config.Curve[curve].Point1 < 50) && (type == CURVE)) || ((Config.Offsets[curve].Point1 < 50) && (type == OFFSET)))
    9ea6:	f1 01       	movw	r30, r2
    9ea8:	ec 59       	subi	r30, 0x9C	; 156
    9eaa:	f7 4f       	sbci	r31, 0xF7	; 247
    9eac:	80 81       	ld	r24, Z
    9eae:	82 33       	cpi	r24, 0x32	; 50
    9eb0:	14 f4       	brge	.+4      	; 0x9eb6 <edit_curve_item+0x4e8>
    9eb2:	14 30       	cpi	r17, 0x04	; 4
    9eb4:	39 f0       	breq	.+14     	; 0x9ec4 <edit_curve_item+0x4f6>
    9eb6:	ed a5       	ldd	r30, Y+45	; 0x2d
    9eb8:	fe a5       	ldd	r31, Y+46	; 0x2e
    9eba:	80 81       	ld	r24, Z
    9ebc:	82 33       	cpi	r24, 0x32	; 50
    9ebe:	24 f4       	brge	.+8      	; 0x9ec8 <edit_curve_item+0x4fa>
    9ec0:	15 30       	cpi	r17, 0x05	; 5
    9ec2:	11 f4       	brne	.+4      	; 0x9ec8 <edit_curve_item+0x4fa>
		{
			varbox_y = 0;
    9ec4:	91 2c       	mov	r9, r1
    9ec6:	02 c0       	rjmp	.+4      	; 0x9ecc <edit_curve_item+0x4fe>
		}
		else
		{
			varbox_y = 40;			
    9ec8:	98 e2       	ldi	r25, 0x28	; 40
    9eca:	99 2e       	mov	r9, r25
		}

		// Move channel box when points 6 and 7 are in the way
		if (((Config.Curve[curve].Point6 + Config.Curve[curve].Point7) < 0) && (type == CURVE))
    9ecc:	ed a1       	ldd	r30, Y+37	; 0x25
    9ece:	fe a1       	ldd	r31, Y+38	; 0x26
    9ed0:	e7 5c       	subi	r30, 0xC7	; 199
    9ed2:	f9 4f       	sbci	r31, 0xF9	; 249
    9ed4:	20 81       	ld	r18, Z
    9ed6:	f5 01       	movw	r30, r10
    9ed8:	ef 5c       	subi	r30, 0xCF	; 207
    9eda:	fd 4f       	sbci	r31, 0xFD	; 253
    9edc:	80 81       	ld	r24, Z
    9ede:	08 2e       	mov	r0, r24
    9ee0:	00 0c       	add	r0, r0
    9ee2:	99 0b       	sbc	r25, r25
    9ee4:	82 0f       	add	r24, r18
    9ee6:	91 1d       	adc	r25, r1
    9ee8:	27 fd       	sbrc	r18, 7
    9eea:	9a 95       	dec	r25
    9eec:	97 ff       	sbrs	r25, 7
    9eee:	05 c0       	rjmp	.+10     	; 0x9efa <edit_curve_item+0x52c>
    9ef0:	14 30       	cpi	r17, 0x04	; 4
    9ef2:	31 f4       	brne	.+12     	; 0x9f00 <edit_curve_item+0x532>
		{
			chanbox_y = 12;
    9ef4:	fc e0       	ldi	r31, 0x0C	; 12
    9ef6:	ff 8f       	std	Y+31, r31	; 0x1f
    9ef8:	05 c0       	rjmp	.+10     	; 0x9f04 <edit_curve_item+0x536>
		}
		else
		{
			chanbox_y = 51;
    9efa:	23 e3       	ldi	r18, 0x33	; 51
    9efc:	2f 8f       	std	Y+31, r18	; 0x1f
    9efe:	02 c0       	rjmp	.+4      	; 0x9f04 <edit_curve_item+0x536>
    9f00:	33 e3       	ldi	r19, 0x33	; 51
    9f02:	3f 8f       	std	Y+31, r19	; 0x1f
		}
		
		// Print the graph point values
		if (Point_ref < 7)
    9f04:	46 e0       	ldi	r20, 0x06	; 6
    9f06:	4f 15       	cp	r20, r15
    9f08:	a8 f1       	brcs	.+106    	; 0x9f74 <edit_curve_item+0x5a6>
    9f0a:	4a e0       	ldi	r20, 0x0A	; 10
    9f0c:	62 ec       	ldi	r22, 0xC2	; 194
    9f0e:	75 e0       	ldi	r23, 0x05	; 5
    9f10:	c6 01       	movw	r24, r12
    9f12:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
		{
			mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana8, &size);			// Get dimensions of text
    9f16:	ae 01       	movw	r20, r28
    9f18:	45 5e       	subi	r20, 0xE5	; 229
    9f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    9f1c:	6d e8       	ldi	r22, 0x8D	; 141
    9f1e:	7f e0       	ldi	r23, 0x0F	; 15
    9f20:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
			fillrect(buffer,varbox_x,varbox_y, (size.x + 5), (size.y + 4), 0);								// White box
    9f24:	0d 8d       	ldd	r16, Y+29	; 0x1d
    9f26:	0c 5f       	subi	r16, 0xFC	; 252
    9f28:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9f2a:	2b 5f       	subi	r18, 0xFB	; 251
    9f2c:	e1 2c       	mov	r14, r1
    9f2e:	49 2d       	mov	r20, r9
    9f30:	60 e0       	ldi	r22, 0x00	; 0
    9f32:	80 e0       	ldi	r24, 0x00	; 0
    9f34:	91 e0       	ldi	r25, 0x01	; 1
    9f36:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <fillrect>
			drawrect(buffer,varbox_x,varbox_y, (size.x + 5), (size.y + 4), 1);								// Outline
    9f3a:	0d 8d       	ldd	r16, Y+29	; 0x1d
    9f3c:	0c 5f       	subi	r16, 0xFC	; 252
    9f3e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9f40:	2b 5f       	subi	r18, 0xFB	; 251
    9f42:	ee 24       	eor	r14, r14
    9f44:	e3 94       	inc	r14
    9f46:	49 2d       	mov	r20, r9
    9f48:	60 e0       	ldi	r22, 0x00	; 0
    9f4a:	80 e0       	ldi	r24, 0x00	; 0
    9f4c:	91 e0       	ldi	r25, 0x01	; 1
    9f4e:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <drawrect>
    9f52:	4a e0       	ldi	r20, 0x0A	; 10
    9f54:	62 ec       	ldi	r22, 0xC2	; 194
    9f56:	75 e0       	ldi	r23, 0x05	; 5
    9f58:	c6 01       	movw	r24, r12
    9f5a:	0e 94 1a 70 	call	0xe034	; 0xe034 <__itoa_ncheck>
			mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana8,varbox_x + 3,varbox_y + 3);// Value
    9f5e:	29 2d       	mov	r18, r9
    9f60:	99 0c       	add	r9, r9
    9f62:	33 0b       	sbc	r19, r19
    9f64:	2d 5f       	subi	r18, 0xFD	; 253
    9f66:	3f 4f       	sbci	r19, 0xFF	; 255
    9f68:	43 e0       	ldi	r20, 0x03	; 3
    9f6a:	50 e0       	ldi	r21, 0x00	; 0
    9f6c:	6d e8       	ldi	r22, 0x8D	; 141
    9f6e:	7f e0       	ldi	r23, 0x0F	; 15
    9f70:	0e 94 11 63 	call	0xc622	; 0xc622 <mugui_lcd_puts>
		}
		
		// Print associated channel somewhere for the Generic curve
		if ((curve >= 4) && (type == CURVE))
    9f74:	58 a1       	ldd	r21, Y+32	; 0x20
    9f76:	54 30       	cpi	r21, 0x04	; 4
    9f78:	08 f4       	brcc	.+2      	; 0x9f7c <edit_curve_item+0x5ae>
    9f7a:	41 c0       	rjmp	.+130    	; 0x9ffe <edit_curve_item+0x630>
    9f7c:	14 30       	cpi	r17, 0x04	; 4
    9f7e:	09 f0       	breq	.+2      	; 0x9f82 <edit_curve_item+0x5b4>
    9f80:	3e c0       	rjmp	.+124    	; 0x9ffe <edit_curve_item+0x630>
		{
			pgm_mugui_scopy((char*)pgm_read_word(&text_menu[reference + Config.Curve[curve].channel]));		// Copy string to pBuffer
    9f82:	f5 01       	movw	r30, r10
    9f84:	ee 5c       	subi	r30, 0xCE	; 206
    9f86:	fd 4f       	sbci	r31, 0xFD	; 253
    9f88:	80 81       	ld	r24, Z
    9f8a:	eb a1       	ldd	r30, Y+35	; 0x23
    9f8c:	fc a1       	ldd	r31, Y+36	; 0x24
    9f8e:	e8 0f       	add	r30, r24
    9f90:	f1 1d       	adc	r31, r1
    9f92:	87 fd       	sbrc	r24, 7
    9f94:	fa 95       	dec	r31
    9f96:	ee 0f       	add	r30, r30
    9f98:	ff 1f       	adc	r31, r31
    9f9a:	e1 5b       	subi	r30, 0xB1	; 177
    9f9c:	fb 4e       	sbci	r31, 0xEB	; 235
    9f9e:	85 91       	lpm	r24, Z+
    9fa0:	94 91       	lpm	r25, Z
    9fa2:	0e 94 10 62 	call	0xc420	; 0xc420 <pgm_mugui_scopy>
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
    9fa6:	ae 01       	movw	r20, r28
    9fa8:	45 5e       	subi	r20, 0xE5	; 229
    9faa:	5f 4f       	sbci	r21, 0xFF	; 255
    9fac:	6d e8       	ldi	r22, 0x8D	; 141
    9fae:	7f e0       	ldi	r23, 0x0F	; 15
    9fb0:	82 ec       	ldi	r24, 0xC2	; 194
    9fb2:	95 e0       	ldi	r25, 0x05	; 5
    9fb4:	0e 94 be 61 	call	0xc37c	; 0xc37c <mugui_text_sizestring>
			fillrect(buffer,(124 - size.x),(chanbox_y - size.y), (size.x + 3), (size.y + 2), 0);			// White box
    9fb8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    9fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9fbc:	02 e0       	ldi	r16, 0x02	; 2
    9fbe:	09 0f       	add	r16, r25
    9fc0:	23 e0       	ldi	r18, 0x03	; 3
    9fc2:	28 0f       	add	r18, r24
    9fc4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    9fc6:	49 1b       	sub	r20, r25
    9fc8:	6c e7       	ldi	r22, 0x7C	; 124
    9fca:	68 1b       	sub	r22, r24
    9fcc:	e1 2c       	mov	r14, r1
    9fce:	80 e0       	ldi	r24, 0x00	; 0
    9fd0:	91 e0       	ldi	r25, 0x01	; 1
    9fd2:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <fillrect>
    9fd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9fd8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    9fda:	28 1b       	sub	r18, r24
			print_menu_text(0, 1, (reference + channel), (126 - size.x), (chanbox_y + 2 - size.y));			// Channel
    9fdc:	2e 5f       	subi	r18, 0xFE	; 254
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    9fde:	30 e0       	ldi	r19, 0x00	; 0
		if ((curve >= 4) && (type == CURVE))
		{
			pgm_mugui_scopy((char*)pgm_read_word(&text_menu[reference + Config.Curve[curve].channel]));		// Copy string to pBuffer
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
			fillrect(buffer,(124 - size.x),(chanbox_y - size.y), (size.x + 3), (size.y + 2), 0);			// White box
			print_menu_text(0, 1, (reference + channel), (126 - size.x), (chanbox_y + 2 - size.y));			// Channel
    9fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9fe2:	4e e7       	ldi	r20, 0x7E	; 126
    9fe4:	48 1b       	sub	r20, r24
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    9fe6:	50 e0       	ldi	r21, 0x00	; 0
    9fe8:	6d e8       	ldi	r22, 0x8D	; 141
    9fea:	7f e0       	ldi	r23, 0x0F	; 15
    9fec:	8b a1       	ldd	r24, Y+35	; 0x23
    9fee:	9c a1       	ldd	r25, Y+36	; 0x24
    9ff0:	ea a5       	ldd	r30, Y+42	; 0x2a
    9ff2:	8e 0f       	add	r24, r30
    9ff4:	91 1d       	adc	r25, r1
    9ff6:	e7 fd       	sbrc	r30, 7
    9ff8:	9a 95       	dec	r25
    9ffa:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
			fillrect(buffer,(124 - size.x),(chanbox_y - size.y), (size.x + 3), (size.y + 2), 0);			// White box
			print_menu_text(0, 1, (reference + channel), (126 - size.x), (chanbox_y + 2 - size.y));			// Channel
		}

		// Write from buffer
		write_buffer(buffer);
    9ffe:	80 e0       	ldi	r24, 0x00	; 0
    a000:	91 e0       	ldi	r25, 0x01	; 1
    a002:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
    a006:	ff e7       	ldi	r31, 0x7F	; 127
    a008:	2a e1       	ldi	r18, 0x1A	; 26
    a00a:	36 e0       	ldi	r19, 0x06	; 6
    a00c:	f1 50       	subi	r31, 0x01	; 1
    a00e:	20 40       	sbci	r18, 0x00	; 0
    a010:	30 40       	sbci	r19, 0x00	; 0
    a012:	e1 f7       	brne	.-8      	; 0xa00c <edit_curve_item+0x63e>
    a014:	00 c0       	rjmp	.+0      	; 0xa016 <edit_curve_item+0x648>
    a016:	00 00       	nop

		// Slow the loop rate
		_delay_ms(100);		

		// Poll buttons when idle. This updates the button multiplier
		poll_buttons(true);
    a018:	81 e0       	ldi	r24, 0x01	; 1
    a01a:	0e 94 c7 4a 	call	0x958e	; 0x958e <poll_buttons>
	
		// Handle cursor Up/Down limits
		if (button == DOWN)
    a01e:	80 91 1f 09 	lds	r24, 0x091F
    a022:	80 3d       	cpi	r24, 0xD0	; 208
    a024:	79 f4       	brne	.+30     	; 0xa044 <edit_curve_item+0x676>
		{
			value = value - (range.increment * button_multiplier);
    a026:	90 91 20 09 	lds	r25, 0x0920
			
			// Limit values to set ranges
			if (value <= range.lower)
    a02a:	4b a5       	ldd	r20, Y+43	; 0x2b
    a02c:	24 2f       	mov	r18, r20
    a02e:	44 0f       	add	r20, r20
    a030:	33 0b       	sbc	r19, r19
    a032:	5f a1       	ldd	r21, Y+39	; 0x27
    a034:	59 9f       	mul	r21, r25
    a036:	c0 18       	sub	r12, r0
    a038:	d1 08       	sbc	r13, r1
    a03a:	11 24       	eor	r1, r1
    a03c:	c2 16       	cp	r12, r18
    a03e:	d3 06       	cpc	r13, r19
    a040:	94 f4       	brge	.+36     	; 0xa066 <edit_curve_item+0x698>
    a042:	10 c0       	rjmp	.+32     	; 0xa064 <edit_curve_item+0x696>
			{
				value = range.lower;
			}
		}

		if (button == UP)
    a044:	80 3b       	cpi	r24, 0xB0	; 176
    a046:	79 f4       	brne	.+30     	; 0xa066 <edit_curve_item+0x698>
		{
			value = value + (range.increment * button_multiplier);
    a048:	90 91 20 09 	lds	r25, 0x0920
			
			// Limit values to set ranges
			if (value >= range.upper)
    a04c:	ec a5       	ldd	r30, Y+44	; 0x2c
    a04e:	2e 2f       	mov	r18, r30
    a050:	ee 0f       	add	r30, r30
    a052:	33 0b       	sbc	r19, r19
    a054:	ff a1       	ldd	r31, Y+39	; 0x27
    a056:	f9 9f       	mul	r31, r25
    a058:	c0 0c       	add	r12, r0
    a05a:	d1 1c       	adc	r13, r1
    a05c:	11 24       	eor	r1, r1
    a05e:	2c 15       	cp	r18, r12
    a060:	3d 05       	cpc	r19, r13
    a062:	0c f4       	brge	.+2      	; 0xa066 <edit_curve_item+0x698>
    a064:	69 01       	movw	r12, r18
				value = range.upper;
			}
		}

		// Update values for next loop
		if (type == CURVE)
    a066:	14 30       	cpi	r17, 0x04	; 4
    a068:	49 f5       	brne	.+82     	; 0xa0bc <edit_curve_item+0x6ee>
		{
			switch(Point_ref)
    a06a:	28 e0       	ldi	r18, 0x08	; 8
    a06c:	42 16       	cp	r4, r18
    a06e:	51 04       	cpc	r5, r1
    a070:	08 f0       	brcs	.+2      	; 0xa074 <edit_curve_item+0x6a6>
    a072:	54 c0       	rjmp	.+168    	; 0xa11c <edit_curve_item+0x74e>
    a074:	f2 01       	movw	r30, r4
    a076:	e1 59       	subi	r30, 0x91	; 145
    a078:	ff 4f       	sbci	r31, 0xFF	; 255
    a07a:	0c 94 a6 6f 	jmp	0xdf4c	; 0xdf4c <__tablejump2__>
			{
				case 0:
					Config.Curve[curve].Point1 = value;
    a07e:	f5 01       	movw	r30, r10
    a080:	e5 5d       	subi	r30, 0xD5	; 213
    a082:	fd 4f       	sbci	r31, 0xFD	; 253
    a084:	36 c0       	rjmp	.+108    	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 1:
					Config.Curve[curve].Point2 = value;
    a086:	f5 01       	movw	r30, r10
    a088:	e4 5d       	subi	r30, 0xD4	; 212
    a08a:	fd 4f       	sbci	r31, 0xFD	; 253
    a08c:	32 c0       	rjmp	.+100    	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 2:
					Config.Curve[curve].Point3 = value;
    a08e:	f5 01       	movw	r30, r10
    a090:	e3 5d       	subi	r30, 0xD3	; 211
    a092:	fd 4f       	sbci	r31, 0xFD	; 253
    a094:	2e c0       	rjmp	.+92     	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 3:
					Config.Curve[curve].Point4 = value;
    a096:	f5 01       	movw	r30, r10
    a098:	e2 5d       	subi	r30, 0xD2	; 210
    a09a:	fd 4f       	sbci	r31, 0xFD	; 253
    a09c:	2a c0       	rjmp	.+84     	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 4:
					Config.Curve[curve].Point5 = value;
    a09e:	f5 01       	movw	r30, r10
    a0a0:	e1 5d       	subi	r30, 0xD1	; 209
    a0a2:	fd 4f       	sbci	r31, 0xFD	; 253
    a0a4:	26 c0       	rjmp	.+76     	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 5:
					Config.Curve[curve].Point6 = value;
    a0a6:	ef a5       	ldd	r30, Y+47	; 0x2f
    a0a8:	f8 a9       	ldd	r31, Y+48	; 0x30
    a0aa:	23 c0       	rjmp	.+70     	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 6:
					Config.Curve[curve].Point7 = value;
    a0ac:	f5 01       	movw	r30, r10
    a0ae:	ef 5c       	subi	r30, 0xCF	; 207
    a0b0:	fd 4f       	sbci	r31, 0xFD	; 253
    a0b2:	29 c0       	rjmp	.+82     	; 0xa106 <edit_curve_item+0x738>
					break;
				case 7:
					Config.Curve[curve].channel = value;
    a0b4:	f5 01       	movw	r30, r10
    a0b6:	ee 5c       	subi	r30, 0xCE	; 206
    a0b8:	fd 4f       	sbci	r31, 0xFD	; 253
    a0ba:	2c c0       	rjmp	.+88     	; 0xa114 <edit_curve_item+0x746>
					break;
			}
		}
		else
		{
			switch(Point_ref)
    a0bc:	f8 e0       	ldi	r31, 0x08	; 8
    a0be:	4f 16       	cp	r4, r31
    a0c0:	51 04       	cpc	r5, r1
    a0c2:	60 f5       	brcc	.+88     	; 0xa11c <edit_curve_item+0x74e>
    a0c4:	f2 01       	movw	r30, r4
    a0c6:	e9 58       	subi	r30, 0x89	; 137
    a0c8:	ff 4f       	sbci	r31, 0xFF	; 255
    a0ca:	0c 94 a6 6f 	jmp	0xdf4c	; 0xdf4c <__tablejump2__>
			{
				case 0:
					Config.Offsets[curve].Point1 = value;
    a0ce:	ed a5       	ldd	r30, Y+45	; 0x2d
    a0d0:	fe a5       	ldd	r31, Y+46	; 0x2e
    a0d2:	0f c0       	rjmp	.+30     	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 1:
					Config.Offsets[curve].Point2 = value;
    a0d4:	f5 01       	movw	r30, r10
    a0d6:	ec 59       	subi	r30, 0x9C	; 156
    a0d8:	fd 4f       	sbci	r31, 0xFD	; 253
    a0da:	0b c0       	rjmp	.+22     	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 2:
					Config.Offsets[curve].Point3 = value;
    a0dc:	f5 01       	movw	r30, r10
    a0de:	eb 59       	subi	r30, 0x9B	; 155
    a0e0:	fd 4f       	sbci	r31, 0xFD	; 253
    a0e2:	07 c0       	rjmp	.+14     	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 3:
					Config.Offsets[curve].Point4 = value;
    a0e4:	f5 01       	movw	r30, r10
    a0e6:	ea 59       	subi	r30, 0x9A	; 154
    a0e8:	fd 4f       	sbci	r31, 0xFD	; 253
    a0ea:	03 c0       	rjmp	.+6      	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 4:
					Config.Offsets[curve].Point5 = value;
    a0ec:	f5 01       	movw	r30, r10
    a0ee:	e9 59       	subi	r30, 0x99	; 153
    a0f0:	fd 4f       	sbci	r31, 0xFD	; 253
    a0f2:	c0 82       	st	Z, r12
					break;
			}
		}

		// Handle button 4
		if (button == ENTER)
    a0f4:	80 3e       	cpi	r24, 0xE0	; 224
    a0f6:	71 f5       	brne	.+92     	; 0xa154 <edit_curve_item+0x786>
    a0f8:	29 c0       	rjmp	.+82     	; 0xa14c <edit_curve_item+0x77e>
					break;
				case 4:
					Config.Offsets[curve].Point5 = value;
					break;
				case 5:
					Config.Offsets[curve].Point6 = value;
    a0fa:	e8 a5       	ldd	r30, Y+40	; 0x28
    a0fc:	f9 a5       	ldd	r31, Y+41	; 0x29
    a0fe:	f9 cf       	rjmp	.-14     	; 0xa0f2 <edit_curve_item+0x724>
					break;
				case 6:
					Config.Offsets[curve].Point7 = value;
    a100:	f5 01       	movw	r30, r10
    a102:	e7 59       	subi	r30, 0x97	; 151
    a104:	fd 4f       	sbci	r31, 0xFD	; 253
    a106:	c0 82       	st	Z, r12
					break;
			}
		}

		// Handle button 4
		if (button == ENTER)
    a108:	80 3e       	cpi	r24, 0xE0	; 224
    a10a:	21 f5       	brne	.+72     	; 0xa154 <edit_curve_item+0x786>
    a10c:	0c c0       	rjmp	.+24     	; 0xa126 <edit_curve_item+0x758>
					break;
				case 6:
					Config.Offsets[curve].Point7 = value;
					break;
				case 7:
					Config.Offsets[curve].channel = value;
    a10e:	f5 01       	movw	r30, r10
    a110:	e6 59       	subi	r30, 0x96	; 150
    a112:	fd 4f       	sbci	r31, 0xFD	; 253
    a114:	c0 82       	st	Z, r12
					break;
			}
		}

		// Handle button 4
		if (button == ENTER)
    a116:	80 3e       	cpi	r24, 0xE0	; 224
    a118:	e9 f4       	brne	.+58     	; 0xa154 <edit_curve_item+0x786>
    a11a:	0c c0       	rjmp	.+24     	; 0xa134 <edit_curve_item+0x766>
    a11c:	80 3e       	cpi	r24, 0xE0	; 224
    a11e:	d1 f4       	brne	.+52     	; 0xa154 <edit_curve_item+0x786>
		{
			// Cursor at far right
			if  (
    a120:	f6 e0       	ldi	r31, 0x06	; 6
    a122:	ff 12       	cpse	r15, r31
    a124:	04 c0       	rjmp	.+8      	; 0xa12e <edit_curve_item+0x760>
					((Point_ref == (NUMBEROFPOINTS - 1)) && (curve < 4) && (type == CURVE)) ||
    a126:	28 a1       	ldd	r18, Y+32	; 0x20
    a128:	24 30       	cpi	r18, 0x04	; 4
    a12a:	40 f0       	brcs	.+16     	; 0xa13c <edit_curve_item+0x76e>
    a12c:	09 c0       	rjmp	.+18     	; 0xa140 <edit_curve_item+0x772>
    a12e:	37 e0       	ldi	r19, 0x07	; 7
    a130:	f3 12       	cpse	r15, r19
    a132:	0c c0       	rjmp	.+24     	; 0xa14c <edit_curve_item+0x77e>
					((Point_ref == NUMBEROFPOINTS) && (curve >= 4) && (type == CURVE)) ||
    a134:	48 a1       	ldd	r20, Y+32	; 0x20
    a136:	44 30       	cpi	r20, 0x04	; 4
    a138:	38 f4       	brcc	.+14     	; 0xa148 <edit_curve_item+0x77a>
    a13a:	08 c0       	rjmp	.+16     	; 0xa14c <edit_curve_item+0x77e>
		// Handle button 4
		if (button == ENTER)
		{
			// Cursor at far right
			if  (
					((Point_ref == (NUMBEROFPOINTS - 1)) && (curve < 4) && (type == CURVE)) ||
    a13c:	14 30       	cpi	r17, 0x04	; 4
    a13e:	11 f0       	breq	.+4      	; 0xa144 <edit_curve_item+0x776>
					((Point_ref == NUMBEROFPOINTS) && (curve >= 4) && (type == CURVE)) ||
					((Point_ref == (NUMBEROFPOINTS - 1)) && (type == OFFSET))
    a140:	15 30       	cpi	r17, 0x05	; 5
    a142:	21 f4       	brne	.+8      	; 0xa14c <edit_curve_item+0x77e>
				)
			{
				button = ENTER;
    a144:	80 ee       	ldi	r24, 0xE0	; 224
    a146:	04 c0       	rjmp	.+8      	; 0xa150 <edit_curve_item+0x782>
		// Handle button 4
		if (button == ENTER)
		{
			// Cursor at far right
			if  (
					((Point_ref == (NUMBEROFPOINTS - 1)) && (curve < 4) && (type == CURVE)) ||
    a148:	14 30       	cpi	r17, 0x04	; 4
    a14a:	e1 f3       	breq	.-8      	; 0xa144 <edit_curve_item+0x776>
				button = ENTER;
			}
			// Move cursor right
			else
			{
				Point_ref++;
    a14c:	f3 94       	inc	r15
				button = NONE;	
    a14e:	80 ef       	ldi	r24, 0xF0	; 240
    a150:	80 93 1f 09 	sts	0x091F, r24
			}
		}

		// Handle button 1
		if (button == BACK)
    a154:	80 91 1f 09 	lds	r24, 0x091F
    a158:	80 37       	cpi	r24, 0x70	; 112
    a15a:	09 f0       	breq	.+2      	; 0xa15e <edit_curve_item+0x790>
    a15c:	8f cc       	rjmp	.-1762   	; 0x9a7c <edit_curve_item+0xae>
		{
			// Cursor at far left
			if (Point_ref == 0)
    a15e:	f1 10       	cpse	r15, r1
    a160:	02 c0       	rjmp	.+4      	; 0xa166 <edit_curve_item+0x798>
			{
				//button = ABORT;
				button = ENTER;
    a162:	80 ee       	ldi	r24, 0xE0	; 224
    a164:	02 c0       	rjmp	.+4      	; 0xa16a <edit_curve_item+0x79c>
			}
			// Move cursor left
			else
			{
				Point_ref--;
    a166:	fa 94       	dec	r15
				button = NONE;
    a168:	80 ef       	ldi	r24, 0xF0	; 240
    a16a:	80 93 1f 09 	sts	0x091F, r24
    a16e:	86 cc       	rjmp	.-1780   	; 0x9a7c <edit_curve_item+0xae>
			}
		}

	} // while ((button != ENTER) && (button != ABORT))
}
    a170:	e2 96       	adiw	r28, 0x32	; 50
    a172:	0f b6       	in	r0, 0x3f	; 63
    a174:	f8 94       	cli
    a176:	de bf       	out	0x3e, r29	; 62
    a178:	0f be       	out	0x3f, r0	; 63
    a17a:	cd bf       	out	0x3d, r28	; 61
    a17c:	df 91       	pop	r29
    a17e:	cf 91       	pop	r28
    a180:	1f 91       	pop	r17
    a182:	0f 91       	pop	r16
    a184:	ff 90       	pop	r15
    a186:	ef 90       	pop	r14
    a188:	df 90       	pop	r13
    a18a:	cf 90       	pop	r12
    a18c:	bf 90       	pop	r11
    a18e:	af 90       	pop	r10
    a190:	9f 90       	pop	r9
    a192:	8f 90       	pop	r8
    a194:	7f 90       	pop	r7
    a196:	6f 90       	pop	r6
    a198:	5f 90       	pop	r5
    a19a:	4f 90       	pop	r4
    a19c:	3f 90       	pop	r3
    a19e:	2f 90       	pop	r2
    a1a0:	08 95       	ret

0000a1a2 <menu_beep>:
void menu_beep(uint8_t beeps)
{
	uint8_t i;

	// Check buzzer mode first
	if (Config.Buzzer == ON)
    a1a2:	90 91 e3 06 	lds	r25, 0x06E3
    a1a6:	91 30       	cpi	r25, 0x01	; 1
    a1a8:	99 f4       	brne	.+38     	; 0xa1d0 <menu_beep+0x2e>
    a1aa:	90 e0       	ldi	r25, 0x00	; 0
	{
		for (i=0; i < beeps; i++)
    a1ac:	98 17       	cp	r25, r24
    a1ae:	81 f0       	breq	.+32     	; 0xa1d0 <menu_beep+0x2e>
		{
			LVA = 1;
    a1b0:	29 9a       	sbi	0x05, 1	; 5
    a1b2:	e7 e8       	ldi	r30, 0x87	; 135
    a1b4:	f3 e1       	ldi	r31, 0x13	; 19
    a1b6:	31 97       	sbiw	r30, 0x01	; 1
    a1b8:	f1 f7       	brne	.-4      	; 0xa1b6 <menu_beep+0x14>
    a1ba:	00 c0       	rjmp	.+0      	; 0xa1bc <menu_beep+0x1a>
    a1bc:	00 00       	nop
			_delay_ms(1);
			LVA = 0;
    a1be:	29 98       	cbi	0x05, 1	; 5
    a1c0:	e7 e9       	ldi	r30, 0x97	; 151
    a1c2:	fa e3       	ldi	r31, 0x3A	; 58
    a1c4:	31 97       	sbiw	r30, 0x01	; 1
    a1c6:	f1 f7       	brne	.-4      	; 0xa1c4 <menu_beep+0x22>
    a1c8:	00 c0       	rjmp	.+0      	; 0xa1ca <menu_beep+0x28>
    a1ca:	00 00       	nop
	uint8_t i;

	// Check buzzer mode first
	if (Config.Buzzer == ON)
	{
		for (i=0; i < beeps; i++)
    a1cc:	9f 5f       	subi	r25, 0xFF	; 255
    a1ce:	ee cf       	rjmp	.-36     	; 0xa1ac <menu_beep+0xa>
    a1d0:	08 95       	ret

0000a1d2 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint16_t items, uint16_t start, uint16_t offset, uint8_t button, uint16_t* cursor, uint16_t* top, uint16_t* temp)
{
    a1d2:	8f 92       	push	r8
    a1d4:	9f 92       	push	r9
    a1d6:	af 92       	push	r10
    a1d8:	bf 92       	push	r11
    a1da:	cf 92       	push	r12
    a1dc:	df 92       	push	r13
    a1de:	ef 92       	push	r14
    a1e0:	ff 92       	push	r15
    a1e2:	0f 93       	push	r16
    a1e4:	1f 93       	push	r17
    a1e6:	cf 93       	push	r28
    a1e8:	df 93       	push	r29
    a1ea:	5c 01       	movw	r10, r24
    a1ec:	4a 01       	movw	r8, r20
    a1ee:	e8 01       	movw	r28, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    a1f0:	d7 01       	movw	r26, r14
    a1f2:	8d 91       	ld	r24, X+
    a1f4:	9c 91       	ld	r25, X
    a1f6:	11 97       	sbiw	r26, 0x01	; 1
    a1f8:	fc 01       	movw	r30, r24
    a1fa:	e4 0f       	add	r30, r20
    a1fc:	f5 1f       	adc	r31, r21
    a1fe:	ed 93       	st	X+, r30
    a200:	fc 93       	st	X, r31
	start = start + offset;
    a202:	8a 01       	movw	r16, r20
    a204:	06 0f       	add	r16, r22
    a206:	17 1f       	adc	r17, r23

	// Calculate which function has been requested
	if (button == ENTER)
    a208:	20 3e       	cpi	r18, 0xE0	; 224
    a20a:	c1 f4       	brne	.+48     	; 0xa23c <update_menu+0x6a>
	{
		switch(*cursor) 
    a20c:	88 81       	ld	r24, Y
    a20e:	99 81       	ldd	r25, Y+1	; 0x01
    a210:	8f 30       	cpi	r24, 0x0F	; 15
    a212:	91 05       	cpc	r25, r1
    a214:	61 f0       	breq	.+24     	; 0xa22e <update_menu+0x5c>
    a216:	18 f4       	brcc	.+6      	; 0xa21e <update_menu+0x4c>
    a218:	03 97       	sbiw	r24, 0x03	; 3
    a21a:	51 f0       	breq	.+20     	; 0xa230 <update_menu+0x5e>
    a21c:	55 c0       	rjmp	.+170    	; 0xa2c8 <update_menu+0xf6>
    a21e:	8b 31       	cpi	r24, 0x1B	; 27
    a220:	91 05       	cpc	r25, r1
    a222:	51 f0       	breq	.+20     	; 0xa238 <update_menu+0x66>
    a224:	87 97       	sbiw	r24, 0x27	; 39
    a226:	09 f0       	breq	.+2      	; 0xa22a <update_menu+0x58>
    a228:	4f c0       	rjmp	.+158    	; 0xa2c8 <update_menu+0xf6>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    a22a:	33 96       	adiw	r30, 0x03	; 3
    a22c:	01 c0       	rjmp	.+2      	; 0xa230 <update_menu+0x5e>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    a22e:	31 96       	adiw	r30, 0x01	; 1
    a230:	d6 01       	movw	r26, r12
    a232:	ed 93       	st	X+, r30
    a234:	fc 93       	st	X, r31
				break;	
    a236:	48 c0       	rjmp	.+144    	; 0xa2c8 <update_menu+0xf6>
			case LINE2:
				*temp = *top + 2;
    a238:	32 96       	adiw	r30, 0x02	; 2
    a23a:	fa cf       	rjmp	.-12     	; 0xa230 <update_menu+0x5e>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    a23c:	20 3d       	cpi	r18, 0xD0	; 208
    a23e:	39 f5       	brne	.+78     	; 0xa28e <update_menu+0xbc>
	{
		switch(*cursor) 
    a240:	88 81       	ld	r24, Y
    a242:	99 81       	ldd	r25, Y+1	; 0x01
    a244:	8f 30       	cpi	r24, 0x0F	; 15
    a246:	91 05       	cpc	r25, r1
    a248:	79 f0       	breq	.+30     	; 0xa268 <update_menu+0x96>
    a24a:	18 f4       	brcc	.+6      	; 0xa252 <update_menu+0x80>
    a24c:	03 97       	sbiw	r24, 0x03	; 3
    a24e:	39 f0       	breq	.+14     	; 0xa25e <update_menu+0x8c>
    a250:	1b c0       	rjmp	.+54     	; 0xa288 <update_menu+0xb6>
    a252:	8b 31       	cpi	r24, 0x1B	; 27
    a254:	91 05       	cpc	r25, r1
    a256:	69 f0       	breq	.+26     	; 0xa272 <update_menu+0xa0>
    a258:	87 97       	sbiw	r24, 0x27	; 39
    a25a:	91 f0       	breq	.+36     	; 0xa280 <update_menu+0xae>
    a25c:	15 c0       	rjmp	.+42     	; 0xa288 <update_menu+0xb6>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    a25e:	b2 e0       	ldi	r27, 0x02	; 2
    a260:	ab 16       	cp	r10, r27
    a262:	b1 04       	cpc	r11, r1
    a264:	20 f5       	brcc	.+72     	; 0xa2ae <update_menu+0xdc>
    a266:	30 c0       	rjmp	.+96     	; 0xa2c8 <update_menu+0xf6>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    a268:	e3 e0       	ldi	r30, 0x03	; 3
    a26a:	ae 16       	cp	r10, r30
    a26c:	b1 04       	cpc	r11, r1
    a26e:	60 f1       	brcs	.+88     	; 0xa2c8 <update_menu+0xf6>
    a270:	1b c0       	rjmp	.+54     	; 0xa2a8 <update_menu+0xd6>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    a272:	f4 e0       	ldi	r31, 0x04	; 4
    a274:	af 16       	cp	r10, r31
    a276:	b1 04       	cpc	r11, r1
    a278:	38 f1       	brcs	.+78     	; 0xa2c8 <update_menu+0xf6>
    a27a:	87 e2       	ldi	r24, 0x27	; 39
    a27c:	90 e0       	ldi	r25, 0x00	; 0
    a27e:	1f c0       	rjmp	.+62     	; 0xa2be <update_menu+0xec>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    a280:	25 e0       	ldi	r18, 0x05	; 5
    a282:	a2 16       	cp	r10, r18
    a284:	b1 04       	cpc	r11, r1
    a286:	00 f1       	brcs	.+64     	; 0xa2c8 <update_menu+0xf6>
				break;
			default:
				*cursor = NEXTLINE;
    a288:	88 e2       	ldi	r24, 0x28	; 40
    a28a:	90 e0       	ldi	r25, 0x00	; 0
    a28c:	18 c0       	rjmp	.+48     	; 0xa2be <update_menu+0xec>
				break;
		}
	}

	if (button == UP)	
    a28e:	20 3b       	cpi	r18, 0xB0	; 176
    a290:	c9 f4       	brne	.+50     	; 0xa2c4 <update_menu+0xf2>
	{
		switch(*cursor) 
    a292:	88 81       	ld	r24, Y
    a294:	99 81       	ldd	r25, Y+1	; 0x01
    a296:	8f 30       	cpi	r24, 0x0F	; 15
    a298:	91 05       	cpc	r25, r1
    a29a:	61 f0       	breq	.+24     	; 0xa2b4 <update_menu+0xe2>
    a29c:	70 f0       	brcs	.+28     	; 0xa2ba <update_menu+0xe8>
    a29e:	8b 31       	cpi	r24, 0x1B	; 27
    a2a0:	91 05       	cpc	r25, r1
    a2a2:	29 f0       	breq	.+10     	; 0xa2ae <update_menu+0xdc>
    a2a4:	87 97       	sbiw	r24, 0x27	; 39
    a2a6:	49 f4       	brne	.+18     	; 0xa2ba <update_menu+0xe8>
		{
			case LINE3:
				*cursor = LINE2;
    a2a8:	8b e1       	ldi	r24, 0x1B	; 27
    a2aa:	90 e0       	ldi	r25, 0x00	; 0
    a2ac:	08 c0       	rjmp	.+16     	; 0xa2be <update_menu+0xec>
				break;	
			case LINE2:
				*cursor = LINE1;
    a2ae:	8f e0       	ldi	r24, 0x0F	; 15
    a2b0:	90 e0       	ldi	r25, 0x00	; 0
    a2b2:	05 c0       	rjmp	.+10     	; 0xa2be <update_menu+0xec>
				break;
			case LINE1:
				*cursor = LINE0;
    a2b4:	83 e0       	ldi	r24, 0x03	; 3
    a2b6:	90 e0       	ldi	r25, 0x00	; 0
    a2b8:	02 c0       	rjmp	.+4      	; 0xa2be <update_menu+0xec>
				break;
			case LINE0:
				*cursor = PREVLINE;
    a2ba:	82 e0       	ldi	r24, 0x02	; 2
    a2bc:	90 e0       	ldi	r25, 0x00	; 0
    a2be:	99 83       	std	Y+1, r25	; 0x01
    a2c0:	88 83       	st	Y, r24
				break;
    a2c2:	02 c0       	rjmp	.+4      	; 0xa2c8 <update_menu+0xf6>
				*cursor = PREVLINE;
				break;
		}
	}

	if (button != NONE)	
    a2c4:	20 3f       	cpi	r18, 0xF0	; 240
    a2c6:	61 f0       	breq	.+24     	; 0xa2e0 <update_menu+0x10e>
	{
		menu_beep(1);
    a2c8:	81 e0       	ldi	r24, 0x01	; 1
    a2ca:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <menu_beep>
    a2ce:	4f ef       	ldi	r20, 0xFF	; 255
    a2d0:	84 e3       	ldi	r24, 0x34	; 52
    a2d2:	9c e0       	ldi	r25, 0x0C	; 12
    a2d4:	41 50       	subi	r20, 0x01	; 1
    a2d6:	80 40       	sbci	r24, 0x00	; 0
    a2d8:	90 40       	sbci	r25, 0x00	; 0
    a2da:	e1 f7       	brne	.-8      	; 0xa2d4 <update_menu+0x102>
    a2dc:	00 c0       	rjmp	.+0      	; 0xa2de <update_menu+0x10c>
    a2de:	00 00       	nop
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    a2e0:	88 81       	ld	r24, Y
    a2e2:	99 81       	ldd	r25, Y+1	; 0x01
    a2e4:	02 97       	sbiw	r24, 0x02	; 2
    a2e6:	71 f4       	brne	.+28     	; 0xa304 <update_menu+0x132>
	{
		*cursor  = LINE0;
    a2e8:	83 e0       	ldi	r24, 0x03	; 3
    a2ea:	90 e0       	ldi	r25, 0x00	; 0
    a2ec:	99 83       	std	Y+1, r25	; 0x01
    a2ee:	88 83       	st	Y, r24
		if (*top > start) 
    a2f0:	d7 01       	movw	r26, r14
    a2f2:	8d 91       	ld	r24, X+
    a2f4:	9c 91       	ld	r25, X
    a2f6:	11 97       	sbiw	r26, 0x01	; 1
    a2f8:	08 17       	cp	r16, r24
    a2fa:	19 07       	cpc	r17, r25
    a2fc:	18 f4       	brcc	.+6      	; 0xa304 <update_menu+0x132>
		{
			*top = *top - 1;								// Shuffle list up
    a2fe:	01 97       	sbiw	r24, 0x01	; 1
    a300:	8d 93       	st	X+, r24
    a302:	9c 93       	st	X, r25
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    a304:	88 81       	ld	r24, Y
    a306:	99 81       	ldd	r25, Y+1	; 0x01
    a308:	88 97       	sbiw	r24, 0x28	; 40
    a30a:	b1 f4       	brne	.+44     	; 0xa338 <update_menu+0x166>
	{
		*cursor  = LINE3;
    a30c:	87 e2       	ldi	r24, 0x27	; 39
    a30e:	90 e0       	ldi	r25, 0x00	; 0
    a310:	99 83       	std	Y+1, r25	; 0x01
    a312:	88 83       	st	Y, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    a314:	f7 01       	movw	r30, r14
    a316:	80 81       	ld	r24, Z
    a318:	91 81       	ldd	r25, Z+1	; 0x01
    a31a:	9c 01       	movw	r18, r24
    a31c:	2d 5f       	subi	r18, 0xFD	; 253
    a31e:	3f 4f       	sbci	r19, 0xFF	; 255
    a320:	f1 e0       	ldi	r31, 0x01	; 1
    a322:	af 1a       	sub	r10, r31
    a324:	b1 08       	sbc	r11, r1
    a326:	a0 0e       	add	r10, r16
    a328:	b1 1e       	adc	r11, r17
    a32a:	2a 15       	cp	r18, r10
    a32c:	3b 05       	cpc	r19, r11
    a32e:	20 f4       	brcc	.+8      	; 0xa338 <update_menu+0x166>
		{
			*top = *top + 1;								// Shuffle list down
    a330:	01 96       	adiw	r24, 0x01	; 1
    a332:	d7 01       	movw	r26, r14
    a334:	8d 93       	st	X+, r24
    a336:	9c 93       	st	X, r25
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    a338:	f7 01       	movw	r30, r14
    a33a:	80 81       	ld	r24, Z
    a33c:	91 81       	ldd	r25, Z+1	; 0x01
    a33e:	88 19       	sub	r24, r8
    a340:	99 09       	sbc	r25, r9
    a342:	91 83       	std	Z+1, r25	; 0x01
    a344:	80 83       	st	Z, r24
}
    a346:	df 91       	pop	r29
    a348:	cf 91       	pop	r28
    a34a:	1f 91       	pop	r17
    a34c:	0f 91       	pop	r16
    a34e:	ff 90       	pop	r15
    a350:	ef 90       	pop	r14
    a352:	df 90       	pop	r13
    a354:	cf 90       	pop	r12
    a356:	bf 90       	pop	r11
    a358:	af 90       	pop	r10
    a35a:	9f 90       	pop	r9
    a35c:	8f 90       	pop	r8
    a35e:	08 95       	ret

0000a360 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    a360:	28 2f       	mov	r18, r24
    a362:	30 e0       	ldi	r19, 0x00	; 0
    a364:	43 e0       	ldi	r20, 0x03	; 3
    a366:	50 e0       	ldi	r21, 0x00	; 0
    a368:	6f ef       	ldi	r22, 0xFF	; 255
    a36a:	71 e0       	ldi	r23, 0x01	; 1
    a36c:	8d e0       	ldi	r24, 0x0D	; 13
    a36e:	90 e0       	ldi	r25, 0x00	; 0
    a370:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <LCD_Display_Text>

0000a374 <print_menu_items>:
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************

void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, const uint16_t* MenuOffsets, const uint16_t* text_link, uint16_t cursor)
{
    a374:	2f 92       	push	r2
    a376:	3f 92       	push	r3
    a378:	4f 92       	push	r4
    a37a:	5f 92       	push	r5
    a37c:	6f 92       	push	r6
    a37e:	7f 92       	push	r7
    a380:	8f 92       	push	r8
    a382:	9f 92       	push	r9
    a384:	af 92       	push	r10
    a386:	cf 92       	push	r12
    a388:	df 92       	push	r13
    a38a:	ef 92       	push	r14
    a38c:	ff 92       	push	r15
    a38e:	0f 93       	push	r16
    a390:	1f 93       	push	r17
    a392:	cf 93       	push	r28
    a394:	df 93       	push	r29
    a396:	cd b7       	in	r28, 0x3d	; 61
    a398:	de b7       	in	r29, 0x3e	; 62
    a39a:	2f 97       	sbiw	r28, 0x0f	; 15
    a39c:	0f b6       	in	r0, 0x3f	; 63
    a39e:	f8 94       	cli
    a3a0:	de bf       	out	0x3e, r29	; 62
    a3a2:	0f be       	out	0x3f, r0	; 63
    a3a4:	cd bf       	out	0x3d, r28	; 61
    a3a6:	2c 01       	movw	r4, r24
    a3a8:	4b 01       	movw	r8, r22
    a3aa:	5b 87       	std	Y+11, r21	; 0x0b
    a3ac:	4a 87       	std	Y+10, r20	; 0x0a
    a3ae:	39 01       	movw	r6, r18
    a3b0:	10 2f       	mov	r17, r16
    a3b2:	fd 86       	std	Y+13, r15	; 0x0d
    a3b4:	ec 86       	std	Y+12, r14	; 0x0c
    a3b6:	df 86       	std	Y+15, r13	; 0x0f
    a3b8:	ce 86       	std	Y+14, r12	; 0x0e
	uint16_t offset = 0;
	uint16_t text = 0;
	uint8_t text_offset = 0;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    a3ba:	80 e0       	ldi	r24, 0x00	; 0
    a3bc:	91 e0       	ldi	r25, 0x01	; 1
    a3be:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>
	print_menu_frame(BASIC);
    a3c2:	80 e0       	ldi	r24, 0x00	; 0
    a3c4:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <print_menu_frame>
    a3c8:	85 e2       	ldi	r24, 0x25	; 37
    a3ca:	28 2e       	mov	r2, r24
    a3cc:	86 e2       	ldi	r24, 0x26	; 38
    a3ce:	38 2e       	mov	r3, r24
    a3d0:	c2 01       	movw	r24, r4
    a3d2:	88 19       	sub	r24, r8
    a3d4:	99 09       	sbc	r25, r9
    a3d6:	25 e0       	ldi	r18, 0x05	; 5
    a3d8:	28 9f       	mul	r18, r24
    a3da:	a0 01       	movw	r20, r0
    a3dc:	29 9f       	mul	r18, r25
    a3de:	50 0d       	add	r21, r0
    a3e0:	11 24       	eor	r1, r1
    a3e2:	59 87       	std	Y+9, r21	; 0x09
    a3e4:	48 87       	std	Y+8, r20	; 0x08
    a3e6:	fc 01       	movw	r30, r24
    a3e8:	ee 0f       	add	r30, r30
    a3ea:	ff 1f       	adc	r31, r31
    a3ec:	ff 83       	std	Y+7, r31	; 0x07
    a3ee:	ee 83       	std	Y+6, r30	; 0x06
    a3f0:	72 01       	movw	r14, r4
    a3f2:	c1 2c       	mov	r12, r1
    a3f4:	d1 2c       	mov	r13, r1
    a3f6:	41 2c       	mov	r4, r1
    a3f8:	51 2c       	mov	r5, r1
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    a3fa:	f1 01       	movw	r30, r2
    a3fc:	24 91       	lpm	r18, Z
    a3fe:	30 e0       	ldi	r19, 0x00	; 0
    a400:	4a e0       	ldi	r20, 0x0A	; 10
    a402:	50 e0       	ldi	r21, 0x00	; 0
    a404:	6d e8       	ldi	r22, 0x8D	; 141
    a406:	7f e0       	ldi	r23, 0x0F	; 15
    a408:	c7 01       	movw	r24, r14
    a40a:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    a40e:	11 11       	cpse	r17, r1
    a410:	09 c0       	rjmp	.+18     	; 0xa424 <print_menu_items+0xb0>
    a412:	68 85       	ldd	r22, Y+8	; 0x08
    a414:	79 85       	ldd	r23, Y+9	; 0x09
    a416:	6c 0d       	add	r22, r12
    a418:	7d 1d       	adc	r23, r13
    a41a:	66 0d       	add	r22, r6
    a41c:	77 1d       	adc	r23, r7
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    a41e:	45 e0       	ldi	r20, 0x05	; 5
    a420:	50 e0       	ldi	r21, 0x00	; 0
    a422:	03 c0       	rjmp	.+6      	; 0xa42a <print_menu_items+0xb6>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    a424:	45 e0       	ldi	r20, 0x05	; 5
    a426:	50 e0       	ldi	r21, 0x00	; 0
    a428:	b3 01       	movw	r22, r6
    a42a:	ce 01       	movw	r24, r28
    a42c:	01 96       	adiw	r24, 0x01	; 1
    a42e:	0e 94 ff 6f 	call	0xdffe	; 0xdffe <memcpy_P>
    a432:	2e 81       	ldd	r18, Y+6	; 0x06
    a434:	3f 81       	ldd	r19, Y+7	; 0x07
    a436:	24 0d       	add	r18, r4
    a438:	35 1d       	adc	r19, r5
    a43a:	ee 85       	ldd	r30, Y+14	; 0x0e
    a43c:	ff 85       	ldd	r31, Y+15	; 0x0f
    a43e:	e2 0f       	add	r30, r18
    a440:	f3 1f       	adc	r31, r19
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
    a442:	45 91       	lpm	r20, Z+
    a444:	54 91       	lpm	r21, Z
    a446:	f7 01       	movw	r30, r14
    a448:	e8 19       	sub	r30, r8
    a44a:	f9 09       	sbc	r31, r9
    a44c:	8a 85       	ldd	r24, Y+10	; 0x0a
    a44e:	9b 85       	ldd	r25, Y+11	; 0x0b
    a450:	e8 0f       	add	r30, r24
    a452:	f9 1f       	adc	r31, r25
		offset = values[top + i - start];
    a454:	80 81       	ld	r24, Z
    a456:	ec 85       	ldd	r30, Y+12	; 0x0c
    a458:	fd 85       	ldd	r31, Y+13	; 0x0d
    a45a:	e2 0f       	add	r30, r18
    a45c:	f3 1f       	adc	r31, r19
		text = base + offset;
		
		// Calculate horizontal offset of text to display
		text_offset = (uint8_t)pgm_read_word(&MenuOffsets[top + i - start]);
    a45e:	25 91       	lpm	r18, Z+
    a460:	34 91       	lpm	r19, Z
		
		
		print_menu_text((values[top+i - start]), range1.style, text, text_offset, (uint8_t)pgm_read_byte(&lines[i]));
    a462:	f1 01       	movw	r30, r2
    a464:	04 91       	lpm	r16, Z
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
		offset = values[top + i - start];
    a466:	08 2e       	mov	r0, r24
    a468:	00 0c       	add	r0, r0
    a46a:	99 0b       	sbc	r25, r25
		text = base + offset;
    a46c:	48 0f       	add	r20, r24
    a46e:	59 1f       	adc	r21, r25
		
		// Calculate horizontal offset of text to display
		text_offset = (uint8_t)pgm_read_word(&MenuOffsets[top + i - start]);
		
		
		print_menu_text((values[top+i - start]), range1.style, text, text_offset, (uint8_t)pgm_read_byte(&lines[i]));
    a470:	6c 81       	ldd	r22, Y+4	; 0x04
    a472:	0e 94 a0 4a 	call	0x9540	; 0x9540 <print_menu_text>
    a476:	ff ef       	ldi	r31, 0xFF	; 255
    a478:	2f 1a       	sub	r2, r31
    a47a:	3f 0a       	sbc	r3, r31
    a47c:	2f ef       	ldi	r18, 0xFF	; 255
    a47e:	e2 1a       	sub	r14, r18
    a480:	f2 0a       	sbc	r15, r18
    a482:	32 e0       	ldi	r19, 0x02	; 2
    a484:	43 0e       	add	r4, r19
    a486:	51 1c       	adc	r5, r1
    a488:	45 e0       	ldi	r20, 0x05	; 5
    a48a:	c4 0e       	add	r12, r20
    a48c:	d1 1c       	adc	r13, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(BASIC);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    a48e:	54 e1       	ldi	r21, 0x14	; 20
    a490:	c5 16       	cp	r12, r21
    a492:	d1 04       	cpc	r13, r1
    a494:	09 f0       	breq	.+2      	; 0xa498 <print_menu_items+0x124>
    a496:	b1 cf       	rjmp	.-158    	; 0xa3fa <print_menu_items+0x86>
		
		
		print_menu_text((values[top+i - start]), range1.style, text, text_offset, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    a498:	8a 2d       	mov	r24, r10
    a49a:	0e 94 b0 51 	call	0xa360	; 0xa360 <print_cursor>
	write_buffer(buffer);
    a49e:	80 e0       	ldi	r24, 0x00	; 0
    a4a0:	91 e0       	ldi	r25, 0x01	; 1
    a4a2:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>
	poll_buttons(true);
    a4a6:	81 e0       	ldi	r24, 0x01	; 1
    a4a8:	0e 94 c7 4a 	call	0x958e	; 0x958e <poll_buttons>
}
    a4ac:	2f 96       	adiw	r28, 0x0f	; 15
    a4ae:	0f b6       	in	r0, 0x3f	; 63
    a4b0:	f8 94       	cli
    a4b2:	de bf       	out	0x3e, r29	; 62
    a4b4:	0f be       	out	0x3f, r0	; 63
    a4b6:	cd bf       	out	0x3d, r28	; 61
    a4b8:	df 91       	pop	r29
    a4ba:	cf 91       	pop	r28
    a4bc:	1f 91       	pop	r17
    a4be:	0f 91       	pop	r16
    a4c0:	ff 90       	pop	r15
    a4c2:	ef 90       	pop	r14
    a4c4:	df 90       	pop	r13
    a4c6:	cf 90       	pop	r12
    a4c8:	af 90       	pop	r10
    a4ca:	9f 90       	pop	r9
    a4cc:	8f 90       	pop	r8
    a4ce:	7f 90       	pop	r7
    a4d0:	6f 90       	pop	r6
    a4d2:	5f 90       	pop	r5
    a4d4:	4f 90       	pop	r4
    a4d6:	3f 90       	pop	r3
    a4d8:	2f 90       	pop	r2
    a4da:	08 95       	ret

0000a4dc <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    a4dc:	4f 92       	push	r4
    a4de:	5f 92       	push	r5
    a4e0:	6f 92       	push	r6
    a4e2:	7f 92       	push	r7
    a4e4:	8f 92       	push	r8
    a4e6:	af 92       	push	r10
    a4e8:	bf 92       	push	r11
    a4ea:	cf 92       	push	r12
    a4ec:	df 92       	push	r13
    a4ee:	ef 92       	push	r14
    a4f0:	ff 92       	push	r15
    a4f2:	0f 93       	push	r16
    a4f4:	1f 93       	push	r17
    a4f6:	cf 93       	push	r28
    a4f8:	df 93       	push	r29
    a4fa:	00 d0       	rcall	.+0      	; 0xa4fc <menu_flight+0x20>
    a4fc:	00 d0       	rcall	.+0      	; 0xa4fe <menu_flight+0x22>
    a4fe:	1f 92       	push	r1
    a500:	cd b7       	in	r28, 0x3d	; 61
    a502:	de b7       	in	r29, 0x3e	; 62
	menu_range_t range;
	uint8_t text_link;
	uint16_t reference;

	// Set the correct text list for the selected reference
	if ((Config.P1_Reference == MODEL) && (mode == P1))
    a504:	90 91 d9 06 	lds	r25, 0x06D9
    a508:	92 30       	cpi	r25, 0x02	; 2
    a50a:	39 f4       	brne	.+14     	; 0xa51a <menu_flight+0x3e>
    a50c:	81 11       	cpse	r24, r1
    a50e:	05 c0       	rjmp	.+10     	; 0xa51a <menu_flight+0x3e>
	{
		reference = FLIGHTSTARTM;
    a510:	e8 e4       	ldi	r30, 0x48	; 72
    a512:	4e 2e       	mov	r4, r30
    a514:	55 24       	eor	r5, r5
    a516:	53 94       	inc	r5
    a518:	03 c0       	rjmp	.+6      	; 0xa520 <menu_flight+0x44>
	}
	else
	{
		reference = FLIGHTSTARTE;
    a51a:	7c ea       	ldi	r23, 0xAC	; 172
    a51c:	47 2e       	mov	r4, r23
    a51e:	51 2c       	mov	r5, r1
	}

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    a520:	20 91 08 05 	lds	r18, 0x0508
    a524:	22 23       	and	r18, r18
    a526:	79 f0       	breq	.+30     	; 0xa546 <menu_flight+0x6a>
	{
		if ((Config.P1_Reference == MODEL) && (mode == P1))
    a528:	92 30       	cpi	r25, 0x02	; 2
    a52a:	29 f4       	brne	.+10     	; 0xa536 <menu_flight+0x5a>
    a52c:	81 11       	cpse	r24, r1
    a52e:	03 c0       	rjmp	.+6      	; 0xa536 <menu_flight+0x5a>
		{
			sub_top = FLIGHTSTARTM;		
    a530:	28 e4       	ldi	r18, 0x48	; 72
    a532:	31 e0       	ldi	r19, 0x01	; 1
    a534:	02 c0       	rjmp	.+4      	; 0xa53a <menu_flight+0x5e>
		}
		else
		{
			sub_top = FLIGHTSTARTE;			
    a536:	2c ea       	ldi	r18, 0xAC	; 172
    a538:	30 e0       	ldi	r19, 0x00	; 0
    a53a:	30 93 4f 05 	sts	0x054F, r19
    a53e:	20 93 4e 05 	sts	0x054E, r18
		}

		menu_flag = 0;
    a542:	10 92 08 05 	sts	0x0508, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    a546:	24 e1       	ldi	r18, 0x14	; 20
    a548:	82 9f       	mul	r24, r18
    a54a:	c0 01       	movw	r24, r0
    a54c:	11 24       	eor	r1, r1
    a54e:	9c 01       	movw	r18, r24
    a550:	22 59       	subi	r18, 0x92	; 146
    a552:	39 4f       	sbci	r19, 0xF9	; 249
    a554:	39 01       	movw	r6, r18
		}

		menu_flag = 0;
	}

	while(button != BACK)
    a556:	80 91 1f 09 	lds	r24, 0x091F
    a55a:	80 37       	cpi	r24, 0x70	; 112
    a55c:	09 f4       	brne	.+2      	; 0xa560 <menu_flight+0x84>
    a55e:	65 c0       	rjmp	.+202    	; 0xa62a <menu_flight+0x14e>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)flight_menu_ranges, 0, (const uint16_t*)FlightMenuOffsets, (const uint16_t*)FlightMenuText, cursor);
    a560:	a0 90 04 05 	lds	r10, 0x0504
    a564:	b0 90 05 05 	lds	r11, 0x0505
    a568:	35 eb       	ldi	r19, 0xB5	; 181
    a56a:	c3 2e       	mov	r12, r19
    a56c:	36 e2       	ldi	r19, 0x26	; 38
    a56e:	d3 2e       	mov	r13, r19
    a570:	4d e8       	ldi	r20, 0x8D	; 141
    a572:	e4 2e       	mov	r14, r20
    a574:	46 e2       	ldi	r20, 0x26	; 38
    a576:	f4 2e       	mov	r15, r20
    a578:	00 e0       	ldi	r16, 0x00	; 0
    a57a:	29 e2       	ldi	r18, 0x29	; 41
    a57c:	36 e2       	ldi	r19, 0x26	; 38
    a57e:	a3 01       	movw	r20, r6
    a580:	b2 01       	movw	r22, r4
    a582:	80 91 4e 05 	lds	r24, 0x054E
    a586:	90 91 4f 05 	lds	r25, 0x054F
    a58a:	0e 94 ba 51 	call	0xa374	; 0xa374 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    a58e:	59 e4       	ldi	r21, 0x49	; 73
    a590:	c5 2e       	mov	r12, r21
    a592:	55 e0       	ldi	r21, 0x05	; 5
    a594:	d5 2e       	mov	r13, r21
    a596:	6e e4       	ldi	r22, 0x4E	; 78
    a598:	e6 2e       	mov	r14, r22
    a59a:	65 e0       	ldi	r22, 0x05	; 5
    a59c:	f6 2e       	mov	r15, r22
    a59e:	04 e0       	ldi	r16, 0x04	; 4
    a5a0:	15 e0       	ldi	r17, 0x05	; 5
    a5a2:	20 91 1f 09 	lds	r18, 0x091F
    a5a6:	40 e0       	ldi	r20, 0x00	; 0
    a5a8:	50 e0       	ldi	r21, 0x00	; 0
    a5aa:	b2 01       	movw	r22, r4
    a5ac:	84 e1       	ldi	r24, 0x14	; 20
    a5ae:	90 e0       	ldi	r25, 0x00	; 0
    a5b0:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - reference));
    a5b4:	60 91 49 05 	lds	r22, 0x0549
    a5b8:	64 19       	sub	r22, r4
    a5ba:	89 e2       	ldi	r24, 0x29	; 41
    a5bc:	96 e2       	ldi	r25, 0x26	; 38
    a5be:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <get_menu_range>
    a5c2:	29 83       	std	Y+1, r18	; 0x01
    a5c4:	3a 83       	std	Y+2, r19	; 0x02
    a5c6:	4b 83       	std	Y+3, r20	; 0x03
    a5c8:	5c 83       	std	Y+4, r21	; 0x04
    a5ca:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    a5cc:	80 91 1f 09 	lds	r24, 0x091F
    a5d0:	80 3e       	cpi	r24, 0xE0	; 224
    a5d2:	f9 f4       	brne	.+62     	; 0xa612 <menu_flight+0x136>
		{
			text_link = pgm_read_word(&FlightMenuText[menu_temp - reference]);
    a5d4:	80 91 49 05 	lds	r24, 0x0549
    a5d8:	90 91 4a 05 	lds	r25, 0x054A
    a5dc:	bc 01       	movw	r22, r24
    a5de:	64 19       	sub	r22, r4
    a5e0:	75 09       	sbc	r23, r5
    a5e2:	fb 01       	movw	r30, r22
    a5e4:	ee 0f       	add	r30, r30
    a5e6:	ff 1f       	adc	r31, r31
    a5e8:	eb 54       	subi	r30, 0x4B	; 75
    a5ea:	f9 4d       	sbci	r31, 0xD9	; 217
    a5ec:	a5 90       	lpm	r10, Z+
    a5ee:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - reference), 1, range, 0, text_link, false, 0);
    a5f0:	bb 24       	eor	r11, r11
    a5f2:	66 0d       	add	r22, r6
    a5f4:	77 1d       	adc	r23, r7
    a5f6:	1f 92       	push	r1
    a5f8:	1f 92       	push	r1
    a5fa:	81 2c       	mov	r8, r1
    a5fc:	c1 2c       	mov	r12, r1
    a5fe:	e9 80       	ldd	r14, Y+1	; 0x01
    a600:	fa 80       	ldd	r15, Y+2	; 0x02
    a602:	0b 81       	ldd	r16, Y+3	; 0x03
    a604:	1c 81       	ldd	r17, Y+4	; 0x04
    a606:	2d 81       	ldd	r18, Y+5	; 0x05
    a608:	41 e0       	ldi	r20, 0x01	; 1
    a60a:	0e 94 fe 4a 	call	0x95fc	; 0x95fc <do_menu_item>
    a60e:	0f 90       	pop	r0
    a610:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    a612:	80 91 1f 09 	lds	r24, 0x091F
    a616:	80 3e       	cpi	r24, 0xE0	; 224
    a618:	09 f0       	breq	.+2      	; 0xa61c <menu_flight+0x140>
    a61a:	9d cf       	rjmp	.-198    	; 0xa556 <menu_flight+0x7a>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    a61c:	0e 94 76 57 	call	0xaeec	; 0xaeec <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    a620:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    a624:	0e 94 00 54 	call	0xa800	; 0xa800 <Wait_BUTTON4>
    a628:	96 cf       	rjmp	.-212    	; 0xa556 <menu_flight+0x7a>
		}
	}
}
    a62a:	0f 90       	pop	r0
    a62c:	0f 90       	pop	r0
    a62e:	0f 90       	pop	r0
    a630:	0f 90       	pop	r0
    a632:	0f 90       	pop	r0
    a634:	df 91       	pop	r29
    a636:	cf 91       	pop	r28
    a638:	1f 91       	pop	r17
    a63a:	0f 91       	pop	r16
    a63c:	ff 90       	pop	r15
    a63e:	ef 90       	pop	r14
    a640:	df 90       	pop	r13
    a642:	cf 90       	pop	r12
    a644:	bf 90       	pop	r11
    a646:	af 90       	pop	r10
    a648:	8f 90       	pop	r8
    a64a:	7f 90       	pop	r7
    a64c:	6f 90       	pop	r6
    a64e:	5f 90       	pop	r5
    a650:	4f 90       	pop	r4
    a652:	08 95       	ret

0000a654 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    a654:	90 e0       	ldi	r25, 0x00	; 0
    a656:	fc 01       	movw	r30, r24
    a658:	ed 54       	subi	r30, 0x4D	; 77
    a65a:	f1 09       	sbc	r31, r1
    a65c:	e8 31       	cpi	r30, 0x18	; 24
    a65e:	f1 05       	cpc	r31, r1
    a660:	c0 f5       	brcc	.+112    	; 0xa6d2 <do_main_menu_item+0x7e>
    a662:	e1 58       	subi	r30, 0x81	; 129
    a664:	ff 4f       	sbci	r31, 0xFF	; 255
    a666:	0c 94 a6 6f 	jmp	0xdf4c	; 0xdf4c <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    a66a:	82 e0       	ldi	r24, 0x02	; 2
    a66c:	01 c0       	rjmp	.+2      	; 0xa670 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup
    a66e:	81 e0       	ldi	r24, 0x01	; 1
    a670:	0c 94 43 56 	jmp	0xac86	; 0xac86 <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    a674:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity
    a678:	0c 94 e6 24 	jmp	0x49cc	; 0x49cc <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    a67c:	0c 94 50 21 	jmp	0x42a0	; 0x42a0 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    a680:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    a684:	80 e0       	ldi	r24, 0x00	; 0
    a686:	01 c0       	rjmp	.+2      	; 0xa68a <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    a688:	81 e0       	ldi	r24, 0x01	; 1
    a68a:	0c 94 6e 52 	jmp	0xa4dc	; 0xa4dc <menu_flight>
			break;
		case MAINSTART+8:
			menu_curves();			// 9.Curves menu
    a68e:	0c 94 63 49 	jmp	0x92c6	; 0x92c6 <menu_curves>
			break;
		case MAINSTART+9:
			menu_offsets();			// 10.Output offsets
    a692:	0c 94 d6 54 	jmp	0xa9ac	; 0xa9ac <menu_offsets>
			break;
		case MAINSTART+10:
			menu_mixer(0);			// 11.OUT1 Mixer
    a696:	80 e0       	ldi	r24, 0x00	; 0
    a698:	01 c0       	rjmp	.+2      	; 0xa69c <do_main_menu_item+0x48>
			break;
		case MAINSTART+11:
			menu_mixer(1);			// 12.OUT2 Mixer
    a69a:	81 e0       	ldi	r24, 0x01	; 1
    a69c:	0c 94 0d 54 	jmp	0xa81a	; 0xa81a <menu_mixer>
			break;
		case MAINSTART+12:
			menu_mixer(2);			// 13.OUT3 Mixer
    a6a0:	82 e0       	ldi	r24, 0x02	; 2
    a6a2:	fc cf       	rjmp	.-8      	; 0xa69c <do_main_menu_item+0x48>
			break;
		case MAINSTART+13:
			menu_mixer(3);			// 14.OUT4 Mixer
    a6a4:	83 e0       	ldi	r24, 0x03	; 3
    a6a6:	fa cf       	rjmp	.-12     	; 0xa69c <do_main_menu_item+0x48>
			break;
		case MAINSTART+14:
			menu_mixer(4);			// 15.OUT5 Mixer
    a6a8:	84 e0       	ldi	r24, 0x04	; 4
    a6aa:	f8 cf       	rjmp	.-16     	; 0xa69c <do_main_menu_item+0x48>
			break;
		case MAINSTART+15:
			menu_mixer(5);			// 16.OUT6 Mixer
    a6ac:	85 e0       	ldi	r24, 0x05	; 5
    a6ae:	f6 cf       	rjmp	.-20     	; 0xa69c <do_main_menu_item+0x48>
			break;
		case MAINSTART+16:
			menu_mixer(6);			// 17.OUT7 Mixer
    a6b0:	86 e0       	ldi	r24, 0x06	; 6
    a6b2:	f4 cf       	rjmp	.-24     	; 0xa69c <do_main_menu_item+0x48>
			break;
		case MAINSTART+17:
			menu_mixer(7);			// 18.OUT8 Mixer
    a6b4:	87 e0       	ldi	r24, 0x07	; 7
    a6b6:	f2 cf       	rjmp	.-28     	; 0xa69c <do_main_menu_item+0x48>
			break;
		case MAINSTART+18:
			menu_servo_setup(1);	// 19.Servo direction
    a6b8:	81 e0       	ldi	r24, 0x01	; 1
    a6ba:	03 c0       	rjmp	.+6      	; 0xa6c2 <do_main_menu_item+0x6e>
			break;
		case MAINSTART+19:
			menu_servo_setup(2); 	// 20.Neg. Servo trvl. (%)
    a6bc:	82 e0       	ldi	r24, 0x02	; 2
    a6be:	01 c0       	rjmp	.+2      	; 0xa6c2 <do_main_menu_item+0x6e>
			break;
		case MAINSTART+20:
			menu_servo_setup(3); 	// 21.Pos. Servo trvl. (%)
    a6c0:	83 e0       	ldi	r24, 0x03	; 3
    a6c2:	0c 94 46 55 	jmp	0xaa8c	; 0xaa8c <menu_servo_setup>
			break;
		case MAINSTART+21:
			menu_channel();			// 22.Custom Ch. order
    a6c6:	0c 94 d0 48 	jmp	0x91a0	; 0x91a0 <menu_channel>
			break;
		case MAINSTART+22:
			Display_in_out();		// 23.IO menu
    a6ca:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <Display_in_out>
			break;
		case MAINSTART+23:
			menu_log();				// 24.Error log
    a6ce:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <menu_log>
    a6d2:	08 95       	ret

0000a6d4 <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    a6d4:	1f 99       	sbic	0x03, 7	; 3
    a6d6:	0a c0       	rjmp	.+20     	; 0xa6ec <Wait_BUTTON1+0x18>
    a6d8:	2f e3       	ldi	r18, 0x3F	; 63
    a6da:	8d e0       	ldi	r24, 0x0D	; 13
    a6dc:	93 e0       	ldi	r25, 0x03	; 3
    a6de:	21 50       	subi	r18, 0x01	; 1
    a6e0:	80 40       	sbci	r24, 0x00	; 0
    a6e2:	90 40       	sbci	r25, 0x00	; 0
    a6e4:	e1 f7       	brne	.-8      	; 0xa6de <Wait_BUTTON1+0xa>
    a6e6:	00 c0       	rjmp	.+0      	; 0xa6e8 <Wait_BUTTON1+0x14>
    a6e8:	00 00       	nop
    a6ea:	f4 cf       	rjmp	.-24     	; 0xa6d4 <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    a6ec:	08 95       	ret

0000a6ee <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag = 1;

void menu_main(void)
{
    a6ee:	9f 92       	push	r9
    a6f0:	af 92       	push	r10
    a6f2:	bf 92       	push	r11
    a6f4:	cf 92       	push	r12
    a6f6:	df 92       	push	r13
    a6f8:	ef 92       	push	r14
    a6fa:	ff 92       	push	r15
    a6fc:	0f 93       	push	r16
    a6fe:	1f 93       	push	r17
    a700:	cf 93       	push	r28
    a702:	df 93       	push	r29
	static uint16_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    a704:	80 ef       	ldi	r24, 0xF0	; 240
    a706:	80 93 1f 09 	sts	0x091F, r24

	menu_beep(1);
    a70a:	81 e0       	ldi	r24, 0x01	; 1
    a70c:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <menu_beep>

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    a710:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    a714:	23 e0       	ldi	r18, 0x03	; 3
    a716:	a2 2e       	mov	r10, r18
    a718:	b1 2c       	mov	r11, r1

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    a71a:	30 ef       	ldi	r19, 0xF0	; 240
    a71c:	93 2e       	mov	r9, r19
	menu_beep(1);

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    a71e:	80 91 1f 09 	lds	r24, 0x091F
    a722:	80 37       	cpi	r24, 0x70	; 112
    a724:	09 f4       	brne	.+2      	; 0xa728 <menu_main+0x3a>
    a726:	60 c0       	rjmp	.+192    	; 0xa7e8 <menu_main+0xfa>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    a728:	80 e0       	ldi	r24, 0x00	; 0
    a72a:	91 e0       	ldi	r25, 0x01	; 1
    a72c:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <clear_buffer>

		// Print menu
		print_menu_frame(BASIC);													// Frame
    a730:	80 e0       	ldi	r24, 0x00	; 0
    a732:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    a736:	c0 e0       	ldi	r28, 0x00	; 0
    a738:	d0 e0       	ldi	r29, 0x00	; 0
    a73a:	fe 01       	movw	r30, r28
    a73c:	eb 5d       	subi	r30, 0xDB	; 219
    a73e:	f9 4d       	sbci	r31, 0xD9	; 217
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    a740:	24 91       	lpm	r18, Z
    a742:	30 e0       	ldi	r19, 0x00	; 0
    a744:	80 91 09 05 	lds	r24, 0x0509
    a748:	90 91 0a 05 	lds	r25, 0x050A
    a74c:	4a e0       	ldi	r20, 0x0A	; 10
    a74e:	50 e0       	ldi	r21, 0x00	; 0
    a750:	6d e8       	ldi	r22, 0x8D	; 141
    a752:	7f e0       	ldi	r23, 0x0F	; 15
    a754:	8c 0f       	add	r24, r28
    a756:	9d 1f       	adc	r25, r29
    a758:	0e 94 8c 38 	call	0x7118	; 0x7118 <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(BASIC);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    a75c:	21 96       	adiw	r28, 0x01	; 1
    a75e:	c4 30       	cpi	r28, 0x04	; 4
    a760:	d1 05       	cpc	r29, r1
    a762:	59 f7       	brne	.-42     	; 0xa73a <menu_main+0x4c>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    a764:	80 91 06 05 	lds	r24, 0x0506
    a768:	0e 94 b0 51 	call	0xa360	; 0xa360 <print_cursor>
		write_buffer(buffer);
    a76c:	80 e0       	ldi	r24, 0x00	; 0
    a76e:	91 e0       	ldi	r25, 0x01	; 1
    a770:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    a774:	81 e0       	ldi	r24, 0x01	; 1
    a776:	0e 94 c7 4a 	call	0x958e	; 0x958e <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    a77a:	8c e4       	ldi	r24, 0x4C	; 76
    a77c:	c8 2e       	mov	r12, r24
    a77e:	85 e0       	ldi	r24, 0x05	; 5
    a780:	d8 2e       	mov	r13, r24
    a782:	99 e0       	ldi	r25, 0x09	; 9
    a784:	e9 2e       	mov	r14, r25
    a786:	95 e0       	ldi	r25, 0x05	; 5
    a788:	f9 2e       	mov	r15, r25
    a78a:	06 e0       	ldi	r16, 0x06	; 6
    a78c:	15 e0       	ldi	r17, 0x05	; 5
    a78e:	20 91 1f 09 	lds	r18, 0x091F
    a792:	40 e0       	ldi	r20, 0x00	; 0
    a794:	50 e0       	ldi	r21, 0x00	; 0
    a796:	6d e4       	ldi	r22, 0x4D	; 77
    a798:	70 e0       	ldi	r23, 0x00	; 0
    a79a:	87 e1       	ldi	r24, 0x17	; 23
    a79c:	90 e0       	ldi	r25, 0x00	; 0
    a79e:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    a7a2:	80 91 4c 05 	lds	r24, 0x054C
    a7a6:	90 91 4d 05 	lds	r25, 0x054D
    a7aa:	20 91 4b 05 	lds	r18, 0x054B
    a7ae:	30 e0       	ldi	r19, 0x00	; 0
    a7b0:	82 17       	cp	r24, r18
    a7b2:	93 07       	cpc	r25, r19
    a7b4:	69 f0       	breq	.+26     	; 0xa7d0 <menu_main+0xe2>
		{
			cursor = LINE0;
    a7b6:	b0 92 05 05 	sts	0x0505, r11
    a7ba:	a0 92 04 05 	sts	0x0504, r10
			menu_temp = 0;
    a7be:	10 92 4a 05 	sts	0x054A, r1
    a7c2:	10 92 49 05 	sts	0x0549, r1
			old_menu = main_temp;
    a7c6:	80 93 4b 05 	sts	0x054B, r24
			menu_flag = 1;
    a7ca:	21 e0       	ldi	r18, 0x01	; 1
    a7cc:	20 93 08 05 	sts	0x0508, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    a7d0:	20 91 1f 09 	lds	r18, 0x091F
    a7d4:	20 3e       	cpi	r18, 0xE0	; 224
    a7d6:	09 f0       	breq	.+2      	; 0xa7da <menu_main+0xec>
    a7d8:	a2 cf       	rjmp	.-188    	; 0xa71e <menu_main+0x30>
		{
			do_main_menu_item(main_temp);
    a7da:	0e 94 2a 53 	call	0xa654	; 0xa654 <do_main_menu_item>
			button = NONE;
    a7de:	90 92 1f 09 	sts	0x091F, r9

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    a7e2:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <Wait_BUTTON1>
    a7e6:	9b cf       	rjmp	.-202    	; 0xa71e <menu_main+0x30>
		}
	}
}
    a7e8:	df 91       	pop	r29
    a7ea:	cf 91       	pop	r28
    a7ec:	1f 91       	pop	r17
    a7ee:	0f 91       	pop	r16
    a7f0:	ff 90       	pop	r15
    a7f2:	ef 90       	pop	r14
    a7f4:	df 90       	pop	r13
    a7f6:	cf 90       	pop	r12
    a7f8:	bf 90       	pop	r11
    a7fa:	af 90       	pop	r10
    a7fc:	9f 90       	pop	r9
    a7fe:	08 95       	ret

0000a800 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    a800:	1c 99       	sbic	0x03, 4	; 3
    a802:	0a c0       	rjmp	.+20     	; 0xa818 <Wait_BUTTON4+0x18>
    a804:	2f e3       	ldi	r18, 0x3F	; 63
    a806:	8d e0       	ldi	r24, 0x0D	; 13
    a808:	93 e0       	ldi	r25, 0x03	; 3
    a80a:	21 50       	subi	r18, 0x01	; 1
    a80c:	80 40       	sbci	r24, 0x00	; 0
    a80e:	90 40       	sbci	r25, 0x00	; 0
    a810:	e1 f7       	brne	.-8      	; 0xa80a <Wait_BUTTON4+0xa>
    a812:	00 c0       	rjmp	.+0      	; 0xa814 <Wait_BUTTON4+0x14>
    a814:	00 00       	nop
    a816:	f4 cf       	rjmp	.-24     	; 0xa800 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    a818:	08 95       	ret

0000a81a <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    a81a:	4f 92       	push	r4
    a81c:	5f 92       	push	r5
    a81e:	6f 92       	push	r6
    a820:	7f 92       	push	r7
    a822:	8f 92       	push	r8
    a824:	af 92       	push	r10
    a826:	bf 92       	push	r11
    a828:	cf 92       	push	r12
    a82a:	df 92       	push	r13
    a82c:	ef 92       	push	r14
    a82e:	ff 92       	push	r15
    a830:	0f 93       	push	r16
    a832:	1f 93       	push	r17
    a834:	cf 93       	push	r28
    a836:	df 93       	push	r29
    a838:	00 d0       	rcall	.+0      	; 0xa83a <menu_mixer+0x20>
    a83a:	00 d0       	rcall	.+0      	; 0xa83c <menu_mixer+0x22>
    a83c:	1f 92       	push	r1
    a83e:	cd b7       	in	r28, 0x3d	; 61
    a840:	de b7       	in	r29, 0x3e	; 62
	menu_range_t range;
	uint16_t text_link = 0;
	uint16_t reference;

	// Set the correct text list for the selected reference
	if (Config.P1_Reference != MODEL)
    a842:	90 91 d9 06 	lds	r25, 0x06D9
    a846:	92 30       	cpi	r25, 0x02	; 2
    a848:	29 f4       	brne	.+10     	; 0xa854 <menu_mixer+0x3a>
	{
		reference = MIXERSTARTE;
	}
	else
	{
		reference = MIXERSTARTM;
    a84a:	ac e5       	ldi	r26, 0x5C	; 92
    a84c:	6a 2e       	mov	r6, r26
    a84e:	77 24       	eor	r7, r7
    a850:	73 94       	inc	r7
    a852:	03 c0       	rjmp	.+6      	; 0xa85a <menu_mixer+0x40>
	uint16_t reference;

	// Set the correct text list for the selected reference
	if (Config.P1_Reference != MODEL)
	{
		reference = MIXERSTARTE;
    a854:	f0 ec       	ldi	r31, 0xC0	; 192
    a856:	6f 2e       	mov	r6, r31
    a858:	71 2c       	mov	r7, r1
	{
		reference = MIXERSTARTM;
	}
	
	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    a85a:	20 91 08 05 	lds	r18, 0x0508
    a85e:	22 23       	and	r18, r18
    a860:	69 f0       	breq	.+26     	; 0xa87c <menu_mixer+0x62>
	{
		// Set the correct text list for the selected reference
		if (Config.P1_Reference != MODEL)
    a862:	92 30       	cpi	r25, 0x02	; 2
    a864:	19 f0       	breq	.+6      	; 0xa86c <menu_mixer+0x52>
		{
			sub_top = MIXERSTARTE;
    a866:	20 ec       	ldi	r18, 0xC0	; 192
    a868:	30 e0       	ldi	r19, 0x00	; 0
    a86a:	02 c0       	rjmp	.+4      	; 0xa870 <menu_mixer+0x56>
		}
		else
		{
			sub_top = MIXERSTARTM;
    a86c:	2c e5       	ldi	r18, 0x5C	; 92
    a86e:	31 e0       	ldi	r19, 0x01	; 1
    a870:	30 93 4f 05 	sts	0x054F, r19
    a874:	20 93 4e 05 	sts	0x054E, r18
		}
		menu_flag = 0;
    a878:	10 92 08 05 	sts	0x0508, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    a87c:	22 e2       	ldi	r18, 0x22	; 34
    a87e:	82 9f       	mul	r24, r18
    a880:	c0 01       	movw	r24, r0
    a882:	11 24       	eor	r1, r1
    a884:	9c 01       	movw	r18, r24
    a886:	28 51       	subi	r18, 0x18	; 24
    a888:	39 4f       	sbci	r19, 0xF9	; 249
    a88a:	29 01       	movw	r4, r18
			sub_top = MIXERSTARTM;
		}
		menu_flag = 0;
	}

	while(button != BACK)
    a88c:	80 91 1f 09 	lds	r24, 0x091F
    a890:	80 37       	cpi	r24, 0x70	; 112
    a892:	09 f4       	brne	.+2      	; 0xa896 <menu_mixer+0x7c>
    a894:	76 c0       	rjmp	.+236    	; 0xa982 <menu_mixer+0x168>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		// Set the correct text list for the selected reference
		if (Config.P1_Reference != MODEL)
    a896:	20 91 d9 06 	lds	r18, 0x06D9
    a89a:	a0 90 04 05 	lds	r10, 0x0504
    a89e:	b0 90 05 05 	lds	r11, 0x0505
    a8a2:	80 91 4e 05 	lds	r24, 0x054E
    a8a6:	90 91 4f 05 	lds	r25, 0x054F
    a8aa:	22 30       	cpi	r18, 0x02	; 2
    a8ac:	29 f0       	breq	.+10     	; 0xa8b8 <menu_mixer+0x9e>
		{
			print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, (const uint16_t*) MixerMenuOffsets, (const uint16_t*)MixerMenuTextE, cursor);
    a8ae:	eb ee       	ldi	r30, 0xEB	; 235
    a8b0:	ce 2e       	mov	r12, r30
    a8b2:	e7 e2       	ldi	r30, 0x27	; 39
    a8b4:	de 2e       	mov	r13, r30
    a8b6:	04 c0       	rjmp	.+8      	; 0xa8c0 <menu_mixer+0xa6>
		}
		else
		{
			print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, (const uint16_t*) MixerMenuOffsets, (const uint16_t*)MixerMenuTextM, cursor);
    a8b8:	7f ea       	ldi	r23, 0xAF	; 175
    a8ba:	c7 2e       	mov	r12, r23
    a8bc:	77 e2       	ldi	r23, 0x27	; 39
    a8be:	d7 2e       	mov	r13, r23
    a8c0:	43 e7       	ldi	r20, 0x73	; 115
    a8c2:	e4 2e       	mov	r14, r20
    a8c4:	47 e2       	ldi	r20, 0x27	; 39
    a8c6:	f4 2e       	mov	r15, r20
    a8c8:	00 e0       	ldi	r16, 0x00	; 0
    a8ca:	2d ed       	ldi	r18, 0xDD	; 221
    a8cc:	36 e2       	ldi	r19, 0x26	; 38
    a8ce:	a2 01       	movw	r20, r4
    a8d0:	b3 01       	movw	r22, r6
    a8d2:	0e 94 ba 51 	call	0xa374	; 0xa374 <print_menu_items>
		}

		// Handle menu changes
		update_menu(MIXERITEMS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    a8d6:	59 e4       	ldi	r21, 0x49	; 73
    a8d8:	c5 2e       	mov	r12, r21
    a8da:	55 e0       	ldi	r21, 0x05	; 5
    a8dc:	d5 2e       	mov	r13, r21
    a8de:	6e e4       	ldi	r22, 0x4E	; 78
    a8e0:	e6 2e       	mov	r14, r22
    a8e2:	65 e0       	ldi	r22, 0x05	; 5
    a8e4:	f6 2e       	mov	r15, r22
    a8e6:	04 e0       	ldi	r16, 0x04	; 4
    a8e8:	15 e0       	ldi	r17, 0x05	; 5
    a8ea:	20 91 1f 09 	lds	r18, 0x091F
    a8ee:	40 e0       	ldi	r20, 0x00	; 0
    a8f0:	50 e0       	ldi	r21, 0x00	; 0
    a8f2:	b3 01       	movw	r22, r6
    a8f4:	8e e1       	ldi	r24, 0x1E	; 30
    a8f6:	90 e0       	ldi	r25, 0x00	; 0
    a8f8:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - reference);
    a8fc:	60 91 49 05 	lds	r22, 0x0549
    a900:	66 19       	sub	r22, r6
    a902:	8d ed       	ldi	r24, 0xDD	; 221
    a904:	96 e2       	ldi	r25, 0x26	; 38
    a906:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <get_menu_range>
    a90a:	29 83       	std	Y+1, r18	; 0x01
    a90c:	3a 83       	std	Y+2, r19	; 0x02
    a90e:	4b 83       	std	Y+3, r20	; 0x03
    a910:	5c 83       	std	Y+4, r21	; 0x04
    a912:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    a914:	80 91 1f 09 	lds	r24, 0x091F
    a918:	80 3e       	cpi	r24, 0xE0	; 224
    a91a:	39 f5       	brne	.+78     	; 0xa96a <menu_mixer+0x150>
		{
			// Set the correct text list for the selected reference
			if (Config.P1_Reference != MODEL)
    a91c:	20 91 d9 06 	lds	r18, 0x06D9
    a920:	80 91 49 05 	lds	r24, 0x0549
    a924:	90 91 4a 05 	lds	r25, 0x054A
			{
				text_link = pgm_read_word(&MixerMenuTextE[menu_temp - reference]);
    a928:	fc 01       	movw	r30, r24
    a92a:	e6 19       	sub	r30, r6
    a92c:	f7 09       	sbc	r31, r7
    a92e:	ee 0f       	add	r30, r30
    a930:	ff 1f       	adc	r31, r31
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - reference);

		if (button == ENTER)
		{
			// Set the correct text list for the selected reference
			if (Config.P1_Reference != MODEL)
    a932:	22 30       	cpi	r18, 0x02	; 2
    a934:	19 f0       	breq	.+6      	; 0xa93c <menu_mixer+0x122>
			{
				text_link = pgm_read_word(&MixerMenuTextE[menu_temp - reference]);
    a936:	e5 51       	subi	r30, 0x15	; 21
    a938:	f8 4d       	sbci	r31, 0xD8	; 216
    a93a:	02 c0       	rjmp	.+4      	; 0xa940 <menu_mixer+0x126>
			}
			else
			{
				text_link = pgm_read_word(&MixerMenuTextM[menu_temp - reference]);
    a93c:	e1 55       	subi	r30, 0x51	; 81
    a93e:	f8 4d       	sbci	r31, 0xD8	; 216
    a940:	a5 90       	lpm	r10, Z+
    a942:	b4 90       	lpm	r11, Z
			}
			
			do_menu_item(menu_temp, value_ptr + (menu_temp - reference), 1, range, 0, text_link, false, 0);
    a944:	bc 01       	movw	r22, r24
    a946:	66 19       	sub	r22, r6
    a948:	77 09       	sbc	r23, r7
    a94a:	64 0d       	add	r22, r4
    a94c:	75 1d       	adc	r23, r5
    a94e:	1f 92       	push	r1
    a950:	1f 92       	push	r1
    a952:	81 2c       	mov	r8, r1
    a954:	c1 2c       	mov	r12, r1
    a956:	e9 80       	ldd	r14, Y+1	; 0x01
    a958:	fa 80       	ldd	r15, Y+2	; 0x02
    a95a:	0b 81       	ldd	r16, Y+3	; 0x03
    a95c:	1c 81       	ldd	r17, Y+4	; 0x04
    a95e:	2d 81       	ldd	r18, Y+5	; 0x05
    a960:	41 e0       	ldi	r20, 0x01	; 1
    a962:	0e 94 fe 4a 	call	0x95fc	; 0x95fc <do_menu_item>
    a966:	0f 90       	pop	r0
    a968:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    a96a:	80 91 1f 09 	lds	r24, 0x091F
    a96e:	80 3e       	cpi	r24, 0xE0	; 224
    a970:	09 f0       	breq	.+2      	; 0xa974 <menu_mixer+0x15a>
    a972:	8c cf       	rjmp	.-232    	; 0xa88c <menu_mixer+0x72>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    a974:	0e 94 76 57 	call	0xaeec	; 0xaeec <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    a978:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    a97c:	0e 94 00 54 	call	0xa800	; 0xa800 <Wait_BUTTON4>
    a980:	85 cf       	rjmp	.-246    	; 0xa88c <menu_mixer+0x72>
		}
	}
}
    a982:	0f 90       	pop	r0
    a984:	0f 90       	pop	r0
    a986:	0f 90       	pop	r0
    a988:	0f 90       	pop	r0
    a98a:	0f 90       	pop	r0
    a98c:	df 91       	pop	r29
    a98e:	cf 91       	pop	r28
    a990:	1f 91       	pop	r17
    a992:	0f 91       	pop	r16
    a994:	ff 90       	pop	r15
    a996:	ef 90       	pop	r14
    a998:	df 90       	pop	r13
    a99a:	cf 90       	pop	r12
    a99c:	bf 90       	pop	r11
    a99e:	af 90       	pop	r10
    a9a0:	8f 90       	pop	r8
    a9a2:	7f 90       	pop	r7
    a9a4:	6f 90       	pop	r6
    a9a6:	5f 90       	pop	r5
    a9a8:	4f 90       	pop	r4
    a9aa:	08 95       	ret

0000a9ac <menu_offsets>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_offsets(void)
{
    a9ac:	af 92       	push	r10
    a9ae:	bf 92       	push	r11
    a9b0:	cf 92       	push	r12
    a9b2:	df 92       	push	r13
    a9b4:	ef 92       	push	r14
    a9b6:	ff 92       	push	r15
    a9b8:	0f 93       	push	r16
    a9ba:	1f 93       	push	r17
    a9bc:	cf 93       	push	r28
	int8_t *value_ptr;
	uint16_t reference = OFFSETSSTART;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    a9be:	80 91 08 05 	lds	r24, 0x0508
    a9c2:	88 23       	and	r24, r24
    a9c4:	41 f0       	breq	.+16     	; 0xa9d6 <menu_offsets+0x2a>
	{
		sub_top = OFFSETSSTART;			
    a9c6:	86 ee       	ldi	r24, 0xE6	; 230
    a9c8:	90 e0       	ldi	r25, 0x00	; 0
    a9ca:	90 93 4f 05 	sts	0x054F, r25
    a9ce:	80 93 4e 05 	sts	0x054E, r24
		menu_flag = 0;
    a9d2:	10 92 08 05 	sts	0x0508, r1

		// Stop unwanted exit to main menu
		if (button == ABORT)
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
			button = NONE;
    a9d6:	c0 ef       	ldi	r28, 0xF0	; 240
	{
		sub_top = OFFSETSSTART;			
		menu_flag = 0;
	}

	while(button != BACK)
    a9d8:	80 91 1f 09 	lds	r24, 0x091F
    a9dc:	80 37       	cpi	r24, 0x70	; 112
    a9de:	09 f4       	brne	.+2      	; 0xa9e2 <menu_offsets+0x36>
    a9e0:	4b c0       	rjmp	.+150    	; 0xaa78 <menu_offsets+0xcc>
	{
		value_ptr = &Config.Offsets[0].Point1;

		// Print top level menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)Offsets_menu_ranges, 0, (const uint16_t*)OffsetsMenuOffsets, (const uint16_t*)OffsetsMenuText, cursor);
    a9e2:	a0 90 04 05 	lds	r10, 0x0504
    a9e6:	b0 90 05 05 	lds	r11, 0x0505
    a9ea:	87 e7       	ldi	r24, 0x77	; 119
    a9ec:	c8 2e       	mov	r12, r24
    a9ee:	89 e2       	ldi	r24, 0x29	; 41
    a9f0:	d8 2e       	mov	r13, r24
    a9f2:	97 e6       	ldi	r25, 0x67	; 103
    a9f4:	e9 2e       	mov	r14, r25
    a9f6:	99 e2       	ldi	r25, 0x29	; 41
    a9f8:	f9 2e       	mov	r15, r25
    a9fa:	00 e0       	ldi	r16, 0x00	; 0
    a9fc:	27 e2       	ldi	r18, 0x27	; 39
    a9fe:	38 e2       	ldi	r19, 0x28	; 40
    aa00:	4c e9       	ldi	r20, 0x9C	; 156
    aa02:	58 e0       	ldi	r21, 0x08	; 8
    aa04:	66 ee       	ldi	r22, 0xE6	; 230
    aa06:	70 e0       	ldi	r23, 0x00	; 0
    aa08:	80 91 4e 05 	lds	r24, 0x054E
    aa0c:	90 91 4f 05 	lds	r25, 0x054F
    aa10:	0e 94 ba 51 	call	0xa374	; 0xa374 <print_menu_items>

		// Handle menu navigation
		update_menu(MAX_OUTPUTS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    aa14:	29 e4       	ldi	r18, 0x49	; 73
    aa16:	c2 2e       	mov	r12, r18
    aa18:	25 e0       	ldi	r18, 0x05	; 5
    aa1a:	d2 2e       	mov	r13, r18
    aa1c:	3e e4       	ldi	r19, 0x4E	; 78
    aa1e:	e3 2e       	mov	r14, r19
    aa20:	35 e0       	ldi	r19, 0x05	; 5
    aa22:	f3 2e       	mov	r15, r19
    aa24:	04 e0       	ldi	r16, 0x04	; 4
    aa26:	15 e0       	ldi	r17, 0x05	; 5
    aa28:	20 91 1f 09 	lds	r18, 0x091F
    aa2c:	40 e0       	ldi	r20, 0x00	; 0
    aa2e:	50 e0       	ldi	r21, 0x00	; 0
    aa30:	66 ee       	ldi	r22, 0xE6	; 230
    aa32:	70 e0       	ldi	r23, 0x00	; 0
    aa34:	88 e0       	ldi	r24, 0x08	; 8
    aa36:	90 e0       	ldi	r25, 0x00	; 0
    aa38:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <update_menu>

		// Edit selected curve
		if (button == ENTER)
    aa3c:	80 91 1f 09 	lds	r24, 0x091F
    aa40:	80 3e       	cpi	r24, 0xE0	; 224
    aa42:	31 f4       	brne	.+12     	; 0xaa50 <menu_offsets+0xa4>
		{
			edit_curve_item(menu_temp - reference, OFFSET); // Curves after NUMBEROFCURVES are offsets
    aa44:	80 91 49 05 	lds	r24, 0x0549
    aa48:	65 e0       	ldi	r22, 0x05	; 5
    aa4a:	86 5e       	subi	r24, 0xE6	; 230
    aa4c:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <edit_curve_item>
		}

		// Stop unwanted exit to main menu
		if (button == ABORT)
    aa50:	80 91 1f 09 	lds	r24, 0x091F
    aa54:	80 3a       	cpi	r24, 0xA0	; 160
    aa56:	21 f4       	brne	.+8      	; 0xaa60 <menu_offsets+0xb4>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    aa58:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <Wait_BUTTON1>
			button = NONE;
    aa5c:	c0 93 1f 09 	sts	0x091F, r28
		}

		// Save and exit
		if (button == ENTER)
    aa60:	80 91 1f 09 	lds	r24, 0x091F
    aa64:	80 3e       	cpi	r24, 0xE0	; 224
    aa66:	09 f0       	breq	.+2      	; 0xaa6a <menu_offsets+0xbe>
    aa68:	b7 cf       	rjmp	.-146    	; 0xa9d8 <menu_offsets+0x2c>
		{
			Save_Config_to_EEPROM(); // Save value and return
    aa6a:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    aa6e:	0e 94 00 54 	call	0xa800	; 0xa800 <Wait_BUTTON4>
			Wait_BUTTON1();	
    aa72:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <Wait_BUTTON1>
    aa76:	b0 cf       	rjmp	.-160    	; 0xa9d8 <menu_offsets+0x2c>
		}
	}
}
    aa78:	cf 91       	pop	r28
    aa7a:	1f 91       	pop	r17
    aa7c:	0f 91       	pop	r16
    aa7e:	ff 90       	pop	r15
    aa80:	ef 90       	pop	r14
    aa82:	df 90       	pop	r13
    aa84:	cf 90       	pop	r12
    aa86:	bf 90       	pop	r11
    aa88:	af 90       	pop	r10
    aa8a:	08 95       	ret

0000aa8c <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    aa8c:	2f 92       	push	r2
    aa8e:	3f 92       	push	r3
    aa90:	4f 92       	push	r4
    aa92:	5f 92       	push	r5
    aa94:	6f 92       	push	r6
    aa96:	7f 92       	push	r7
    aa98:	8f 92       	push	r8
    aa9a:	9f 92       	push	r9
    aa9c:	af 92       	push	r10
    aa9e:	bf 92       	push	r11
    aaa0:	cf 92       	push	r12
    aaa2:	df 92       	push	r13
    aaa4:	ef 92       	push	r14
    aaa6:	ff 92       	push	r15
    aaa8:	0f 93       	push	r16
    aaaa:	1f 93       	push	r17
    aaac:	cf 93       	push	r28
    aaae:	df 93       	push	r29
    aab0:	cd b7       	in	r28, 0x3d	; 61
    aab2:	de b7       	in	r29, 0x3e	; 62
    aab4:	2a 97       	sbiw	r28, 0x0a	; 10
    aab6:	0f b6       	in	r0, 0x3f	; 63
    aab8:	f8 94       	cli
    aaba:	de bf       	out	0x3e, r29	; 62
    aabc:	0f be       	out	0x3f, r0	; 63
    aabe:	cd bf       	out	0x3d, r28	; 61
    aac0:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    aac2:	80 91 08 05 	lds	r24, 0x0508
    aac6:	88 23       	and	r24, r24
    aac8:	41 f0       	breq	.+16     	; 0xaada <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    aaca:	86 ee       	ldi	r24, 0xE6	; 230
    aacc:	90 e0       	ldi	r25, 0x00	; 0
    aace:	90 93 4f 05 	sts	0x054F, r25
    aad2:	80 93 4e 05 	sts	0x054E, r24
		menu_flag = 0;
    aad6:	10 92 08 05 	sts	0x0508, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    aada:	1e 82       	std	Y+6, r1	; 0x06
    aadc:	74 ef       	ldi	r23, 0xF4	; 244
    aade:	67 2e       	mov	r6, r23
    aae0:	77 e0       	ldi	r23, 0x07	; 7
    aae2:	77 2e       	mov	r7, r23
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, (const uint16_t*)ServoMenuOffsets[section - 1], (const uint16_t*)ServoMenuText[section - 1], cursor);
    aae4:	29 2c       	mov	r2, r9
    aae6:	31 2c       	mov	r3, r1
    aae8:	21 e0       	ldi	r18, 0x01	; 1
    aaea:	22 1a       	sub	r2, r18
    aaec:	31 08       	sbc	r3, r1
    aaee:	25 e0       	ldi	r18, 0x05	; 5
    aaf0:	22 9d       	mul	r18, r2
    aaf2:	c0 01       	movw	r24, r0
    aaf4:	23 9d       	mul	r18, r3
    aaf6:	90 0d       	add	r25, r0
    aaf8:	11 24       	eor	r1, r1
    aafa:	fc 01       	movw	r30, r24
    aafc:	e9 57       	subi	r30, 0x79	; 121
    aafe:	f6 4d       	sbci	r31, 0xD6	; 214
    ab00:	2f 01       	movw	r4, r30
    ab02:	c1 01       	movw	r24, r2
    ab04:	e4 e0       	ldi	r30, 0x04	; 4
    ab06:	88 0f       	add	r24, r24
    ab08:	99 1f       	adc	r25, r25
    ab0a:	ea 95       	dec	r30
    ab0c:	e1 f7       	brne	.-8      	; 0xab06 <menu_servo_setup+0x7a>
    ab0e:	9c 01       	movw	r18, r24
    ab10:	2a 53       	subi	r18, 0x3A	; 58
    ab12:	36 4d       	sbci	r19, 0xD6	; 214
    ab14:	38 87       	std	Y+8, r19	; 0x08
    ab16:	2f 83       	std	Y+7, r18	; 0x07
    ab18:	fc 01       	movw	r30, r24
    ab1a:	ea 56       	subi	r30, 0x6A	; 106
    ab1c:	f6 4d       	sbci	r31, 0xD6	; 214
    ab1e:	fa 87       	std	Y+10, r31	; 0x0a
    ab20:	e9 87       	std	Y+9, r30	; 0x09
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);

		if (button == ENTER)
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    ab22:	f3 e0       	ldi	r31, 0x03	; 3
    ab24:	22 0c       	add	r2, r2
    ab26:	33 1c       	adc	r3, r3
    ab28:	fa 95       	dec	r31
    ab2a:	e1 f7       	brne	.-8      	; 0xab24 <menu_servo_setup+0x98>
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    ab2c:	80 91 1f 09 	lds	r24, 0x091F
    ab30:	80 37       	cpi	r24, 0x70	; 112
    ab32:	09 f4       	brne	.+2      	; 0xab36 <menu_servo_setup+0xaa>
    ab34:	8f c0       	rjmp	.+286    	; 0xac54 <menu_servo_setup+0x1c8>
    ab36:	c3 01       	movw	r24, r6
    ab38:	28 e0       	ldi	r18, 0x08	; 8
    ab3a:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    ab3c:	f2 e0       	ldi	r31, 0x02	; 2
    ab3e:	9f 16       	cp	r9, r31
    ab40:	51 f0       	breq	.+20     	; 0xab56 <menu_servo_setup+0xca>
    ab42:	33 e0       	ldi	r19, 0x03	; 3
    ab44:	93 12       	cpse	r9, r19
    ab46:	0d c0       	rjmp	.+26     	; 0xab62 <menu_servo_setup+0xd6>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    ab48:	41 e0       	ldi	r20, 0x01	; 1
    ab4a:	4e 83       	std	Y+6, r20	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    ab4c:	88 24       	eor	r8, r8
    ab4e:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    ab50:	84 e0       	ldi	r24, 0x04	; 4
    ab52:	98 e0       	ldi	r25, 0x08	; 8
					servo_enable = true;
					zero_setting = true;
					break;
    ab54:	06 c0       	rjmp	.+12     	; 0xab62 <menu_servo_setup+0xd6>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    ab56:	81 e0       	ldi	r24, 0x01	; 1
    ab58:	8e 83       	std	Y+6, r24	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    ab5a:	88 24       	eor	r8, r8
    ab5c:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    ab5e:	8c ef       	ldi	r24, 0xFC	; 252
    ab60:	97 e0       	ldi	r25, 0x07	; 7
    ab62:	21 50       	subi	r18, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    ab64:	59 f7       	brne	.-42     	; 0xab3c <menu_servo_setup+0xb0>
    ab66:	3c 01       	movw	r6, r24
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, (const uint16_t*)ServoMenuOffsets[section - 1], (const uint16_t*)ServoMenuText[section - 1], cursor);
    ab68:	a0 90 04 05 	lds	r10, 0x0504
    ab6c:	b0 90 05 05 	lds	r11, 0x0505
    ab70:	cf 80       	ldd	r12, Y+7	; 0x07
    ab72:	d8 84       	ldd	r13, Y+8	; 0x08
    ab74:	e9 84       	ldd	r14, Y+9	; 0x09
    ab76:	fa 84       	ldd	r15, Y+10	; 0x0a
    ab78:	01 e0       	ldi	r16, 0x01	; 1
    ab7a:	92 01       	movw	r18, r4
    ab7c:	ac 01       	movw	r20, r24
    ab7e:	66 ee       	ldi	r22, 0xE6	; 230
    ab80:	70 e0       	ldi	r23, 0x00	; 0
    ab82:	80 91 4e 05 	lds	r24, 0x054E
    ab86:	90 91 4f 05 	lds	r25, 0x054F
    ab8a:	0e 94 ba 51 	call	0xa374	; 0xa374 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    ab8e:	59 e4       	ldi	r21, 0x49	; 73
    ab90:	c5 2e       	mov	r12, r21
    ab92:	55 e0       	ldi	r21, 0x05	; 5
    ab94:	d5 2e       	mov	r13, r21
    ab96:	6e e4       	ldi	r22, 0x4E	; 78
    ab98:	e6 2e       	mov	r14, r22
    ab9a:	65 e0       	ldi	r22, 0x05	; 5
    ab9c:	f6 2e       	mov	r15, r22
    ab9e:	04 e0       	ldi	r16, 0x04	; 4
    aba0:	15 e0       	ldi	r17, 0x05	; 5
    aba2:	20 91 1f 09 	lds	r18, 0x091F
    aba6:	40 e0       	ldi	r20, 0x00	; 0
    aba8:	50 e0       	ldi	r21, 0x00	; 0
    abaa:	66 ee       	ldi	r22, 0xE6	; 230
    abac:	70 e0       	ldi	r23, 0x00	; 0
    abae:	88 e0       	ldi	r24, 0x08	; 8
    abb0:	90 e0       	ldi	r25, 0x00	; 0
    abb2:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    abb6:	60 e0       	ldi	r22, 0x00	; 0
    abb8:	c2 01       	movw	r24, r4
    abba:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <get_menu_range>
    abbe:	29 83       	std	Y+1, r18	; 0x01
    abc0:	3a 83       	std	Y+2, r19	; 0x02
    abc2:	4b 83       	std	Y+3, r20	; 0x03
    abc4:	5c 83       	std	Y+4, r21	; 0x04
    abc6:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    abc8:	80 91 1f 09 	lds	r24, 0x091F
    abcc:	80 3e       	cpi	r24, 0xE0	; 224
    abce:	b1 f5       	brne	.+108    	; 0xac3c <menu_servo_setup+0x1b0>
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    abd0:	80 91 49 05 	lds	r24, 0x0549
    abd4:	90 91 4a 05 	lds	r25, 0x054A
    abd8:	9c 01       	movw	r18, r24
    abda:	26 5e       	subi	r18, 0xE6	; 230
    abdc:	31 09       	sbc	r19, r1
    abde:	f9 01       	movw	r30, r18
    abe0:	e2 0d       	add	r30, r2
    abe2:	f3 1d       	adc	r31, r3
    abe4:	ee 0f       	add	r30, r30
    abe6:	ff 1f       	adc	r31, r31
    abe8:	ea 53       	subi	r30, 0x3A	; 58
    abea:	f6 4d       	sbci	r31, 0xD6	; 214
    abec:	a5 90       	lpm	r10, Z+
    abee:	b4 90       	lpm	r11, Z
    abf0:	b3 01       	movw	r22, r6
    abf2:	62 0f       	add	r22, r18
    abf4:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    abf6:	ee 81       	ldd	r30, Y+6	; 0x06
    abf8:	ee 23       	and	r30, r30
    abfa:	11 f0       	breq	.+4      	; 0xac00 <menu_servo_setup+0x174>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    abfc:	fb 01       	movw	r30, r22
    abfe:	10 82       	st	Z, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    ac00:	42 e2       	ldi	r20, 0x22	; 34
    ac02:	42 9f       	mul	r20, r18
    ac04:	f0 01       	movw	r30, r0
    ac06:	43 9f       	mul	r20, r19
    ac08:	f0 0d       	add	r31, r0
    ac0a:	11 24       	eor	r1, r1
    ac0c:	e2 50       	subi	r30, 0x02	; 2
    ac0e:	f9 4f       	sbci	r31, 0xF9	; 249
    ac10:	40 81       	ld	r20, Z
    ac12:	41 11       	cpse	r20, r1
    ac14:	05 c0       	rjmp	.+10     	; 0xac20 <menu_servo_setup+0x194>
    ac16:	40 91 62 06 	lds	r20, 0x0662
    ac1a:	41 11       	cpse	r20, r1
    ac1c:	01 c0       	rjmp	.+2      	; 0xac20 <menu_servo_setup+0x194>
			{
				servo_enable = false;
    ac1e:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    ac20:	bb 24       	eor	r11, r11
    ac22:	3f 93       	push	r19
    ac24:	2f 93       	push	r18
    ac26:	c1 2c       	mov	r12, r1
    ac28:	e9 80       	ldd	r14, Y+1	; 0x01
    ac2a:	fa 80       	ldd	r15, Y+2	; 0x02
    ac2c:	0b 81       	ldd	r16, Y+3	; 0x03
    ac2e:	1c 81       	ldd	r17, Y+4	; 0x04
    ac30:	2d 81       	ldd	r18, Y+5	; 0x05
    ac32:	41 e0       	ldi	r20, 0x01	; 1
    ac34:	0e 94 fe 4a 	call	0x95fc	; 0x95fc <do_menu_item>
    ac38:	0f 90       	pop	r0
    ac3a:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    ac3c:	80 91 1f 09 	lds	r24, 0x091F
    ac40:	80 3e       	cpi	r24, 0xE0	; 224
    ac42:	09 f0       	breq	.+2      	; 0xac46 <menu_servo_setup+0x1ba>
    ac44:	73 cf       	rjmp	.-282    	; 0xab2c <menu_servo_setup+0xa0>
		{
			UpdateLimits();				// Update actual servo trims
    ac46:	0e 94 76 57 	call	0xaeec	; 0xaeec <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    ac4a:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    ac4e:	0e 94 00 54 	call	0xa800	; 0xa800 <Wait_BUTTON4>
    ac52:	6c cf       	rjmp	.-296    	; 0xab2c <menu_servo_setup+0xa0>
		}
	}
}
    ac54:	2a 96       	adiw	r28, 0x0a	; 10
    ac56:	0f b6       	in	r0, 0x3f	; 63
    ac58:	f8 94       	cli
    ac5a:	de bf       	out	0x3e, r29	; 62
    ac5c:	0f be       	out	0x3f, r0	; 63
    ac5e:	cd bf       	out	0x3d, r28	; 61
    ac60:	df 91       	pop	r29
    ac62:	cf 91       	pop	r28
    ac64:	1f 91       	pop	r17
    ac66:	0f 91       	pop	r16
    ac68:	ff 90       	pop	r15
    ac6a:	ef 90       	pop	r14
    ac6c:	df 90       	pop	r13
    ac6e:	cf 90       	pop	r12
    ac70:	bf 90       	pop	r11
    ac72:	af 90       	pop	r10
    ac74:	9f 90       	pop	r9
    ac76:	8f 90       	pop	r8
    ac78:	7f 90       	pop	r7
    ac7a:	6f 90       	pop	r6
    ac7c:	5f 90       	pop	r5
    ac7e:	4f 90       	pop	r4
    ac80:	3f 90       	pop	r3
    ac82:	2f 90       	pop	r2
    ac84:	08 95       	ret

0000ac86 <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    ac86:	2f 92       	push	r2
    ac88:	3f 92       	push	r3
    ac8a:	4f 92       	push	r4
    ac8c:	5f 92       	push	r5
    ac8e:	6f 92       	push	r6
    ac90:	7f 92       	push	r7
    ac92:	8f 92       	push	r8
    ac94:	9f 92       	push	r9
    ac96:	af 92       	push	r10
    ac98:	bf 92       	push	r11
    ac9a:	cf 92       	push	r12
    ac9c:	df 92       	push	r13
    ac9e:	ef 92       	push	r14
    aca0:	ff 92       	push	r15
    aca2:	0f 93       	push	r16
    aca4:	1f 93       	push	r17
    aca6:	cf 93       	push	r28
    aca8:	df 93       	push	r29
    acaa:	cd b7       	in	r28, 0x3d	; 61
    acac:	de b7       	in	r29, 0x3e	; 62
    acae:	2b 97       	sbiw	r28, 0x0b	; 11
    acb0:	0f b6       	in	r0, 0x3f	; 63
    acb2:	f8 94       	cli
    acb4:	de bf       	out	0x3e, r29	; 62
    acb6:	0f be       	out	0x3f, r0	; 63
    acb8:	cd bf       	out	0x3d, r28	; 61
    acba:	98 2e       	mov	r9, r24
	uint16_t	text_link;
	uint16_t	offset = 0;			// Index into channel structure
	uint16_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    acbc:	80 91 08 05 	lds	r24, 0x0508
    acc0:	88 23       	and	r24, r24
    acc2:	41 f0       	breq	.+16     	; 0xacd4 <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    acc4:	82 e9       	ldi	r24, 0x92	; 146
    acc6:	90 e0       	ldi	r25, 0x00	; 0
    acc8:	90 93 4f 05 	sts	0x054F, r25
    accc:	80 93 4e 05 	sts	0x054E, r24
		menu_flag = 0;
    acd0:	10 92 08 05 	sts	0x0508, r1
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
				value_ptr = &Config.Orientation_P2;
    acd4:	61 2c       	mov	r6, r1
    acd6:	71 2c       	mov	r7, r1
    acd8:	72 e6       	ldi	r23, 0x62	; 98
    acda:	47 2e       	mov	r4, r23
    acdc:	76 e0       	ldi	r23, 0x06	; 6
    acde:	57 2e       	mov	r5, r23

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, (const uint16_t*)RCMenuOffsets[section - 1], (const uint16_t*)RCMenuText[section - 1], cursor);
    ace0:	89 2d       	mov	r24, r9
    ace2:	90 e0       	ldi	r25, 0x00	; 0
    ace4:	01 97       	sbiw	r24, 0x01	; 1
    ace6:	4c e3       	ldi	r20, 0x3C	; 60
    ace8:	48 9f       	mul	r20, r24
    acea:	90 01       	movw	r18, r0
    acec:	49 9f       	mul	r20, r25
    acee:	30 0d       	add	r19, r0
    acf0:	11 24       	eor	r1, r1
    acf2:	a9 01       	movw	r20, r18
    acf4:	42 5f       	subi	r20, 0xF2	; 242
    acf6:	55 4d       	sbci	r21, 0xD5	; 213
    acf8:	1a 01       	movw	r2, r20
    acfa:	48 e1       	ldi	r20, 0x18	; 24
    acfc:	48 9f       	mul	r20, r24
    acfe:	90 01       	movw	r18, r0
    ad00:	49 9f       	mul	r20, r25
    ad02:	30 0d       	add	r19, r0
    ad04:	11 24       	eor	r1, r1
    ad06:	a9 01       	movw	r20, r18
    ad08:	4a 54       	subi	r20, 0x4A	; 74
    ad0a:	55 4d       	sbci	r21, 0xD5	; 213
    ad0c:	5f 83       	std	Y+7, r21	; 0x07
    ad0e:	4e 83       	std	Y+6, r20	; 0x06
    ad10:	a9 01       	movw	r20, r18
    ad12:	4a 57       	subi	r20, 0x7A	; 122
    ad14:	55 4d       	sbci	r21, 0xD5	; 213
    ad16:	59 87       	std	Y+9, r21	; 0x09
    ad18:	48 87       	std	Y+8, r20	; 0x08
			Config.Preset = QUADX;			
		}

		if (button == ENTER)
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    ad1a:	2c e0       	ldi	r18, 0x0C	; 12
    ad1c:	28 9f       	mul	r18, r24
    ad1e:	a0 01       	movw	r20, r0
    ad20:	29 9f       	mul	r18, r25
    ad22:	50 0d       	add	r21, r0
    ad24:	11 24       	eor	r1, r1
    ad26:	5b 87       	std	Y+11, r21	; 0x0b
    ad28:	4a 87       	std	Y+10, r20	; 0x0a
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    ad2a:	80 91 1f 09 	lds	r24, 0x091F
    ad2e:	80 37       	cpi	r24, 0x70	; 112
    ad30:	09 f4       	brne	.+2      	; 0xad34 <menu_rc_setup+0xae>
    ad32:	c3 c0       	rjmp	.+390    	; 0xaeba <menu_rc_setup+0x234>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General, 3 = Advanced
		switch(section)
    ad34:	52 e0       	ldi	r21, 0x02	; 2
    ad36:	95 12       	cpse	r9, r21
    ad38:	07 c0       	rjmp	.+14     	; 0xad48 <menu_rc_setup+0xc2>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    ad3a:	5c e0       	ldi	r21, 0x0C	; 12
    ad3c:	65 2e       	mov	r6, r21
    ad3e:	71 2c       	mov	r7, r1
				items = GENERALITEMS;
				value_ptr = &Config.Orientation_P2;
    ad40:	68 ed       	ldi	r22, 0xD8	; 216
    ad42:	46 2e       	mov	r4, r22
    ad44:	66 e0       	ldi	r22, 0x06	; 6
    ad46:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;
    ad48:	84 e0       	ldi	r24, 0x04	; 4
    ad4a:	80 93 e2 06 	sts	0x06E2, r24

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, (const uint16_t*)RCMenuOffsets[section - 1], (const uint16_t*)RCMenuText[section - 1], cursor);
    ad4e:	a0 90 04 05 	lds	r10, 0x0504
    ad52:	b0 90 05 05 	lds	r11, 0x0505
    ad56:	80 91 4e 05 	lds	r24, 0x054E
    ad5a:	90 91 4f 05 	lds	r25, 0x054F
    ad5e:	ce 80       	ldd	r12, Y+6	; 0x06
    ad60:	df 80       	ldd	r13, Y+7	; 0x07
    ad62:	e8 84       	ldd	r14, Y+8	; 0x08
    ad64:	f9 84       	ldd	r15, Y+9	; 0x09
    ad66:	00 e0       	ldi	r16, 0x00	; 0
    ad68:	91 01       	movw	r18, r2
    ad6a:	a2 01       	movw	r20, r4
    ad6c:	b3 01       	movw	r22, r6
    ad6e:	6e 56       	subi	r22, 0x6E	; 110
    ad70:	7f 4f       	sbci	r23, 0xFF	; 255
    ad72:	86 0d       	add	r24, r6
    ad74:	97 1d       	adc	r25, r7
    ad76:	0e 94 ba 51 	call	0xa374	; 0xa374 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    ad7a:	39 e4       	ldi	r19, 0x49	; 73
    ad7c:	c3 2e       	mov	r12, r19
    ad7e:	35 e0       	ldi	r19, 0x05	; 5
    ad80:	d3 2e       	mov	r13, r19
    ad82:	4e e4       	ldi	r20, 0x4E	; 78
    ad84:	e4 2e       	mov	r14, r20
    ad86:	45 e0       	ldi	r20, 0x05	; 5
    ad88:	f4 2e       	mov	r15, r20
    ad8a:	04 e0       	ldi	r16, 0x04	; 4
    ad8c:	15 e0       	ldi	r17, 0x05	; 5
    ad8e:	20 91 1f 09 	lds	r18, 0x091F
    ad92:	a3 01       	movw	r20, r6
    ad94:	62 e9       	ldi	r22, 0x92	; 146
    ad96:	70 e0       	ldi	r23, 0x00	; 0
    ad98:	8c e0       	ldi	r24, 0x0C	; 12
    ad9a:	90 e0       	ldi	r25, 0x00	; 0
    ad9c:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <update_menu>
    ada0:	60 91 49 05 	lds	r22, 0x0549
    ada4:	62 59       	subi	r22, 0x92	; 146
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    ada6:	66 19       	sub	r22, r6
    ada8:	c1 01       	movw	r24, r2
    adaa:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <get_menu_range>
    adae:	29 83       	std	Y+1, r18	; 0x01
    adb0:	3a 83       	std	Y+2, r19	; 0x02
    adb2:	4b 83       	std	Y+3, r20	; 0x03
    adb4:	5c 83       	std	Y+4, r21	; 0x04
    adb6:	6d 83       	std	Y+5, r22	; 0x05

		// If actually editing the preset, show the default setting
		if (menu_temp == PRESETITEM)
    adb8:	80 91 49 05 	lds	r24, 0x0549
    adbc:	90 91 4a 05 	lds	r25, 0x054A
    adc0:	8b 3a       	cpi	r24, 0xAB	; 171
    adc2:	91 05       	cpc	r25, r1
    adc4:	11 f4       	brne	.+4      	; 0xadca <menu_rc_setup+0x144>
		{
			Config.Preset = QUADX;			
    adc6:	10 92 e2 06 	sts	0x06E2, r1
		}

		if (button == ENTER)
    adca:	20 91 1f 09 	lds	r18, 0x091F
    adce:	20 3e       	cpi	r18, 0xE0	; 224
    add0:	f9 f4       	brne	.+62     	; 0xae10 <menu_rc_setup+0x18a>
    add2:	bc 01       	movw	r22, r24
    add4:	62 59       	subi	r22, 0x92	; 146
    add6:	71 09       	sbc	r23, r1
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    add8:	66 19       	sub	r22, r6
    adda:	77 09       	sbc	r23, r7
    addc:	ea 85       	ldd	r30, Y+10	; 0x0a
    adde:	fb 85       	ldd	r31, Y+11	; 0x0b
    ade0:	e6 0f       	add	r30, r22
    ade2:	f7 1f       	adc	r31, r23
    ade4:	ee 0f       	add	r30, r30
    ade6:	ff 1f       	adc	r31, r31
    ade8:	ea 54       	subi	r30, 0x4A	; 74
    adea:	f5 4d       	sbci	r31, 0xD5	; 213
    adec:	a5 90       	lpm	r10, Z+
    adee:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    adf0:	64 0d       	add	r22, r4
    adf2:	75 1d       	adc	r23, r5
    adf4:	1f 92       	push	r1
    adf6:	1f 92       	push	r1
    adf8:	81 2c       	mov	r8, r1
    adfa:	c1 2c       	mov	r12, r1
    adfc:	e9 80       	ldd	r14, Y+1	; 0x01
    adfe:	fa 80       	ldd	r15, Y+2	; 0x02
    ae00:	0b 81       	ldd	r16, Y+3	; 0x03
    ae02:	1c 81       	ldd	r17, Y+4	; 0x04
    ae04:	2d 81       	ldd	r18, Y+5	; 0x05
    ae06:	41 e0       	ldi	r20, 0x01	; 1
    ae08:	0e 94 fe 4a 	call	0x95fc	; 0x95fc <do_menu_item>
    ae0c:	0f 90       	pop	r0
    ae0e:	0f 90       	pop	r0
		}

		// Handle abort neatly
		if (button == ABORT)
    ae10:	80 91 1f 09 	lds	r24, 0x091F
    ae14:	80 3a       	cpi	r24, 0xA0	; 160
    ae16:	41 f4       	brne	.+16     	; 0xae28 <menu_rc_setup+0x1a2>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    ae18:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <Wait_BUTTON1>
			button = NONE;
    ae1c:	80 ef       	ldi	r24, 0xF0	; 240
    ae1e:	80 93 1f 09 	sts	0x091F, r24
			
			// Reset the mixer preset if unchanged
			Config.Preset = OPTIONS;
    ae22:	84 e0       	ldi	r24, 0x04	; 4
    ae24:	80 93 e2 06 	sts	0x06E2, r24
		}

		// Post-processing on exit
		if (button == ENTER)
    ae28:	80 91 1f 09 	lds	r24, 0x091F
    ae2c:	80 3e       	cpi	r24, 0xE0	; 224
    ae2e:	09 f0       	breq	.+2      	; 0xae32 <menu_rc_setup+0x1ac>
    ae30:	7c cf       	rjmp	.-264    	; 0xad2a <menu_rc_setup+0xa4>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    ae32:	0e 94 93 48 	call	0x9126	; 0x9126 <init_int>
			init_uart();			// and UART
    ae36:	0e 94 81 6c 	call	0xd902	; 0xd902 <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    ae3a:	0e 94 76 57 	call	0xaeec	; 0xaeec <UpdateLimits>
			
			// See if mixer preset has changed. Load new preset only if so
			if ((Config.Preset != OPTIONS) && (menu_temp == PRESETITEM))
    ae3e:	80 91 e2 06 	lds	r24, 0x06E2
    ae42:	84 30       	cpi	r24, 0x04	; 4
    ae44:	49 f0       	breq	.+18     	; 0xae58 <menu_rc_setup+0x1d2>
    ae46:	20 91 49 05 	lds	r18, 0x0549
    ae4a:	30 91 4a 05 	lds	r19, 0x054A
    ae4e:	2b 3a       	cpi	r18, 0xAB	; 171
    ae50:	31 05       	cpc	r19, r1
    ae52:	11 f4       	brne	.+4      	; 0xae58 <menu_rc_setup+0x1d2>
			{
				Load_eeprom_preset(Config.Preset);
    ae54:	0e 94 de 2a 	call	0x55bc	; 0x55bc <Load_eeprom_preset>
			}

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    ae58:	80 91 de 06 	lds	r24, 0x06DE
    ae5c:	46 e0       	ldi	r20, 0x06	; 6
    ae5e:	48 1b       	sub	r20, r24
    ae60:	6a e1       	ldi	r22, 0x1A	; 26
    ae62:	80 ed       	ldi	r24, 0xD0	; 208
    ae64:	0e 94 02 3c 	call	0x7804	; 0x7804 <writeI2Cbyte>

			// Refresh channel order
			UpdateChOrder();
    ae68:	0e 94 a2 6a 	call	0xd544	; 0xd544 <UpdateChOrder>

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    ae6c:	80 91 62 06 	lds	r24, 0x0662
    ae70:	82 30       	cpi	r24, 0x02	; 2
    ae72:	3c f4       	brge	.+14     	; 0xae82 <menu_rc_setup+0x1fc>
    ae74:	80 91 63 06 	lds	r24, 0x0663
    ae78:	82 30       	cpi	r24, 0x02	; 2
    ae7a:	19 f4       	brne	.+6      	; 0xae82 <menu_rc_setup+0x1fc>
			{
				Config.Servo_rate = SYNC;
    ae7c:	81 e0       	ldi	r24, 0x01	; 1
    ae7e:	80 93 63 06 	sts	0x0663, r24
			}
						
			if (Config.ArmMode == ARMABLE)
    ae82:	80 91 db 06 	lds	r24, 0x06DB
    ae86:	81 30       	cpi	r24, 0x01	; 1
    ae88:	31 f4       	brne	.+12     	; 0xae96 <menu_rc_setup+0x210>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    ae8a:	80 91 35 05 	lds	r24, 0x0535
    ae8e:	84 60       	ori	r24, 0x04	; 4
    ae90:	80 93 35 05 	sts	0x0535, r24
				LED1 = 0;
    ae94:	2b 98       	cbi	0x05, 3	; 5
			}

			// Work out the P1 orientation from the user's P2 orientation setting
			Config.Orientation_P1 = (int8_t)pgm_read_byte(&P1_Orientation_LUT[Config.Orientation_P2]);
    ae96:	e0 91 d8 06 	lds	r30, 0x06D8
    ae9a:	0e 2e       	mov	r0, r30
    ae9c:	00 0c       	add	r0, r0
    ae9e:	ff 0b       	sbc	r31, r31
    aea0:	ea 50       	subi	r30, 0x0A	; 10
    aea2:	f6 4d       	sbci	r31, 0xD6	; 214
    aea4:	e4 91       	lpm	r30, Z
    aea6:	e0 93 63 08 	sts	0x0863, r30

			// Return the preset to "Options" when going back to the General menu
			Config.Preset = OPTIONS;
    aeaa:	84 e0       	ldi	r24, 0x04	; 4
    aeac:	80 93 e2 06 	sts	0x06E2, r24

			Save_Config_to_EEPROM(); // Save value and return
    aeb0:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    aeb4:	0e 94 00 54 	call	0xa800	; 0xa800 <Wait_BUTTON4>
    aeb8:	38 cf       	rjmp	.-400    	; 0xad2a <menu_rc_setup+0xa4>
		}
	}
}
    aeba:	2b 96       	adiw	r28, 0x0b	; 11
    aebc:	0f b6       	in	r0, 0x3f	; 63
    aebe:	f8 94       	cli
    aec0:	de bf       	out	0x3e, r29	; 62
    aec2:	0f be       	out	0x3f, r0	; 63
    aec4:	cd bf       	out	0x3d, r28	; 61
    aec6:	df 91       	pop	r29
    aec8:	cf 91       	pop	r28
    aeca:	1f 91       	pop	r17
    aecc:	0f 91       	pop	r16
    aece:	ff 90       	pop	r15
    aed0:	ef 90       	pop	r14
    aed2:	df 90       	pop	r13
    aed4:	cf 90       	pop	r12
    aed6:	bf 90       	pop	r11
    aed8:	af 90       	pop	r10
    aeda:	9f 90       	pop	r9
    aedc:	8f 90       	pop	r8
    aede:	7f 90       	pop	r7
    aee0:	6f 90       	pop	r6
    aee2:	5f 90       	pop	r5
    aee4:	4f 90       	pop	r4
    aee6:	3f 90       	pop	r3
    aee8:	2f 90       	pop	r2
    aeea:	08 95       	ret

0000aeec <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    aeec:	6f 92       	push	r6
    aeee:	7f 92       	push	r7
    aef0:	8f 92       	push	r8
    aef2:	9f 92       	push	r9
    aef4:	af 92       	push	r10
    aef6:	bf 92       	push	r11
    aef8:	cf 92       	push	r12
    aefa:	df 92       	push	r13
    aefc:	ef 92       	push	r14
    aefe:	ff 92       	push	r15
    af00:	0f 93       	push	r16
    af02:	1f 93       	push	r17
    af04:	cf 93       	push	r28
    af06:	df 93       	push	r29
    af08:	cd b7       	in	r28, 0x3d	; 61
    af0a:	de b7       	in	r29, 0x3e	; 62
    af0c:	60 97       	sbiw	r28, 0x10	; 16
    af0e:	0f b6       	in	r0, 0x3f	; 63
    af10:	f8 94       	cli
    af12:	de bf       	out	0x3e, r29	; 62
    af14:	0f be       	out	0x3f, r0	; 63
    af16:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	// RPY + Z damp
	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS+1] = 
    af18:	80 91 70 06 	lds	r24, 0x0670
    af1c:	89 87       	std	Y+9, r24	; 0x09
    af1e:	80 91 76 06 	lds	r24, 0x0676
    af22:	8a 87       	std	Y+10, r24	; 0x0a
    af24:	80 91 7c 06 	lds	r24, 0x067C
    af28:	8b 87       	std	Y+11, r24	; 0x0b
    af2a:	80 91 81 06 	lds	r24, 0x0681
    af2e:	8c 87       	std	Y+12, r24	; 0x0c
    af30:	80 91 84 06 	lds	r24, 0x0684
    af34:	8d 87       	std	Y+13, r24	; 0x0d
    af36:	80 91 8a 06 	lds	r24, 0x068A
    af3a:	8e 87       	std	Y+14, r24	; 0x0e
    af3c:	80 91 90 06 	lds	r24, 0x0690
    af40:	8f 87       	std	Y+15, r24	; 0x0f
    af42:	80 91 95 06 	lds	r24, 0x0695
    af46:	88 8b       	std	Y+16, r24	; 0x10
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit, Config.FlightMode[P1].A_Zed_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit, Config.FlightMode[P2].A_Zed_limit}
		};

	// RPY + Z damp
	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS+1] = 
    af48:	80 91 6f 06 	lds	r24, 0x066F
    af4c:	89 83       	std	Y+1, r24	; 0x01
    af4e:	80 91 75 06 	lds	r24, 0x0675
    af52:	8a 83       	std	Y+2, r24	; 0x02
    af54:	80 91 7b 06 	lds	r24, 0x067B
    af58:	8b 83       	std	Y+3, r24	; 0x03
    af5a:	80 91 80 06 	lds	r24, 0x0680
    af5e:	8c 83       	std	Y+4, r24	; 0x04
    af60:	80 91 83 06 	lds	r24, 0x0683
    af64:	8d 83       	std	Y+5, r24	; 0x05
    af66:	80 91 89 06 	lds	r24, 0x0689
    af6a:	8e 83       	std	Y+6, r24	; 0x06
    af6c:	80 91 8f 06 	lds	r24, 0x068F
    af70:	8f 83       	std	Y+7, r24	; 0x07
    af72:	80 91 94 06 	lds	r24, 0x0694
    af76:	88 87       	std	Y+8, r24	; 0x08
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult, Config.FlightMode[P2].A_Zed_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    af78:	e0 91 dd 06 	lds	r30, 0x06DD
    af7c:	8e 2f       	mov	r24, r30
    af7e:	ee 0f       	add	r30, r30
    af80:	99 0b       	sbc	r25, r25
    af82:	aa 0b       	sbc	r26, r26
    af84:	bb 0b       	sbc	r27, r27
    af86:	89 30       	cpi	r24, 0x09	; 9
    af88:	91 05       	cpc	r25, r1
    af8a:	08 f5       	brcc	.+66     	; 0xafce <UpdateLimits+0xe2>
    af8c:	fc 01       	movw	r30, r24
    af8e:	e9 56       	subi	r30, 0x69	; 105
    af90:	ff 4f       	sbci	r31, 0xFF	; 255
    af92:	0c 94 a6 6f 	jmp	0xdf4c	; 0xdf4c <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    af96:	80 e4       	ldi	r24, 0x40	; 64
    af98:	91 e0       	ldi	r25, 0x01	; 1
    af9a:	14 c0       	rjmp	.+40     	; 0xafc4 <UpdateLimits+0xd8>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    af9c:	8a e4       	ldi	r24, 0x4A	; 74
    af9e:	91 e0       	ldi	r25, 0x01	; 1
    afa0:	11 c0       	rjmp	.+34     	; 0xafc4 <UpdateLimits+0xd8>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    afa2:	84 e5       	ldi	r24, 0x54	; 84
    afa4:	91 e0       	ldi	r25, 0x01	; 1
    afa6:	0e c0       	rjmp	.+28     	; 0xafc4 <UpdateLimits+0xd8>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    afa8:	8e e5       	ldi	r24, 0x5E	; 94
    afaa:	91 e0       	ldi	r25, 0x01	; 1
    afac:	0b c0       	rjmp	.+22     	; 0xafc4 <UpdateLimits+0xd8>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    afae:	88 e6       	ldi	r24, 0x68	; 104
    afb0:	91 e0       	ldi	r25, 0x01	; 1
    afb2:	08 c0       	rjmp	.+16     	; 0xafc4 <UpdateLimits+0xd8>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    afb4:	82 e7       	ldi	r24, 0x72	; 114
    afb6:	91 e0       	ldi	r25, 0x01	; 1
    afb8:	05 c0       	rjmp	.+10     	; 0xafc4 <UpdateLimits+0xd8>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    afba:	8c e7       	ldi	r24, 0x7C	; 124
    afbc:	91 e0       	ldi	r25, 0x01	; 1
    afbe:	02 c0       	rjmp	.+4      	; 0xafc4 <UpdateLimits+0xd8>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    afc0:	86 e8       	ldi	r24, 0x86	; 134
    afc2:	91 e0       	ldi	r25, 0x01	; 1
    afc4:	90 93 d7 06 	sts	0x06D7, r25
    afc8:	80 93 d6 06 	sts	0x06D6, r24
			break;
    afcc:	04 c0       	rjmp	.+8      	; 0xafd6 <UpdateLimits+0xea>
		default:
			Config.PowerTriggerActual = 0;			// Off
    afce:	10 92 d7 06 	sts	0x06D7, r1
    afd2:	10 92 d6 06 	sts	0x06D6, r1
			break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    afd6:	20 91 46 05 	lds	r18, 0x0546
    afda:	30 91 47 05 	lds	r19, 0x0547
    afde:	80 91 d6 06 	lds	r24, 0x06D6
    afe2:	90 91 d7 06 	lds	r25, 0x06D7
    afe6:	26 36       	cpi	r18, 0x66	; 102
    afe8:	48 e0       	ldi	r20, 0x08	; 8
    afea:	34 07       	cpc	r19, r20
    afec:	78 f0       	brcs	.+30     	; 0xb00c <UpdateLimits+0x120>
	{
		Config.PowerTriggerActual *= 6;
    afee:	46 e0       	ldi	r20, 0x06	; 6
    aff0:	48 9f       	mul	r20, r24
    aff2:	90 01       	movw	r18, r0
    aff4:	49 9f       	mul	r20, r25
    aff6:	30 0d       	add	r19, r0
    aff8:	11 24       	eor	r1, r1
    affa:	30 93 d7 06 	sts	0x06D7, r19
    affe:	20 93 d6 06 	sts	0x06D6, r18
    b002:	02 ec       	ldi	r16, 0xC2	; 194
    b004:	16 e0       	ldi	r17, 0x06	; 6

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    b006:	e1 2c       	mov	r14, r1
    b008:	f1 2c       	mov	r15, r1
    b00a:	25 c0       	rjmp	.+74     	; 0xb056 <UpdateLimits+0x16a>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    b00c:	a9 01       	movw	r20, r18
    b00e:	42 5c       	subi	r20, 0xC2	; 194
    b010:	56 40       	sbci	r21, 0x06	; 6
    b012:	44 3a       	cpi	r20, 0xA4	; 164
    b014:	51 40       	sbci	r21, 0x01	; 1
    b016:	10 f4       	brcc	.+4      	; 0xb01c <UpdateLimits+0x130>
	{
		Config.PowerTriggerActual *= 5;
    b018:	45 e0       	ldi	r20, 0x05	; 5
    b01a:	ea cf       	rjmp	.-44     	; 0xaff0 <UpdateLimits+0x104>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    b01c:	a9 01       	movw	r20, r18
    b01e:	44 51       	subi	r20, 0x14	; 20
    b020:	55 40       	sbci	r21, 0x05	; 5
    b022:	4e 3a       	cpi	r20, 0xAE	; 174
    b024:	51 40       	sbci	r21, 0x01	; 1
    b026:	28 f4       	brcc	.+10     	; 0xb032 <UpdateLimits+0x146>
	{
		Config.PowerTriggerActual *= 4;
    b028:	88 0f       	add	r24, r24
    b02a:	99 1f       	adc	r25, r25
    b02c:	88 0f       	add	r24, r24
    b02e:	99 1f       	adc	r25, r25
    b030:	0d c0       	rjmp	.+26     	; 0xb04c <UpdateLimits+0x160>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    b032:	24 58       	subi	r18, 0x84	; 132
    b034:	33 40       	sbci	r19, 0x03	; 3
    b036:	20 39       	cpi	r18, 0x90	; 144
    b038:	31 40       	sbci	r19, 0x01	; 1
    b03a:	30 f4       	brcc	.+12     	; 0xb048 <UpdateLimits+0x15c>
	{
		Config.PowerTriggerActual *= 3;
    b03c:	9c 01       	movw	r18, r24
    b03e:	22 0f       	add	r18, r18
    b040:	33 1f       	adc	r19, r19
    b042:	82 0f       	add	r24, r18
    b044:	93 1f       	adc	r25, r19
    b046:	02 c0       	rjmp	.+4      	; 0xb04c <UpdateLimits+0x160>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    b048:	88 0f       	add	r24, r24
    b04a:	99 1f       	adc	r25, r25
    b04c:	90 93 d7 06 	sts	0x06D7, r25
    b050:	80 93 d6 06 	sts	0x06D6, r24
    b054:	d6 cf       	rjmp	.-84     	; 0xb002 <UpdateLimits+0x116>
    b056:	58 01       	movw	r10, r16
    b058:	fc e2       	ldi	r31, 0x2C	; 44
    b05a:	af 1a       	sub	r10, r31
    b05c:	b1 08       	sbc	r11, r1

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    b05e:	c1 2c       	mov	r12, r1
    b060:	d1 2c       	mov	r13, r1
    b062:	89 e0       	ldi	r24, 0x09	; 9
    b064:	88 2e       	mov	r8, r24
    b066:	91 2c       	mov	r9, r1
    b068:	8c 0e       	add	r8, r28
    b06a:	9d 1e       	adc	r9, r29
    b06c:	8e 0c       	add	r8, r14
    b06e:	9f 1c       	adc	r9, r15
    b070:	66 24       	eor	r6, r6
    b072:	63 94       	inc	r6
    b074:	71 2c       	mov	r7, r1
    b076:	6c 0e       	add	r6, r28
    b078:	7d 1e       	adc	r7, r29
    b07a:	6e 0c       	add	r6, r14
    b07c:	7f 1c       	adc	r7, r15
    b07e:	f4 01       	movw	r30, r8
    b080:	ec 0d       	add	r30, r12
    b082:	fd 1d       	adc	r31, r13
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		// Limits calculation is different for gyros and accs
		for (i = 0; i < (NUMBEROFAXIS); i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    b084:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    b086:	0a 2e       	mov	r0, r26
    b088:	00 0c       	add	r0, r0
    b08a:	bb 0b       	sbc	r27, r27
    b08c:	20 e8       	ldi	r18, 0x80	; 128
    b08e:	32 e0       	ldi	r19, 0x02	; 2
    b090:	0e 94 c3 6f 	call	0xdf86	; 0xdf86 <__usmulhisi3>
    b094:	f5 01       	movw	r30, r10
    b096:	61 93       	st	Z+, r22
    b098:	71 93       	st	Z+, r23
    b09a:	81 93       	st	Z+, r24
    b09c:	91 93       	st	Z+, r25
    b09e:	5f 01       	movw	r10, r30
    b0a0:	f3 01       	movw	r30, r6
    b0a2:	ec 0d       	add	r30, r12
    b0a4:	fd 1d       	adc	r31, r13

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 
			if (gains[j][i] != 0)
    b0a6:	20 81       	ld	r18, Z
    b0a8:	22 23       	and	r18, r18
    b0aa:	b1 f0       	breq	.+44     	; 0xb0d8 <UpdateLimits+0x1ec>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    b0ac:	45 e0       	ldi	r20, 0x05	; 5
    b0ae:	66 0f       	add	r22, r22
    b0b0:	77 1f       	adc	r23, r23
    b0b2:	88 1f       	adc	r24, r24
    b0b4:	99 1f       	adc	r25, r25
    b0b6:	4a 95       	dec	r20
    b0b8:	d1 f7       	brne	.-12     	; 0xb0ae <UpdateLimits+0x1c2>
			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 
			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    b0ba:	02 2e       	mov	r0, r18
    b0bc:	00 0c       	add	r0, r0
    b0be:	33 0b       	sbc	r19, r19
    b0c0:	44 0b       	sbc	r20, r20
    b0c2:	55 0b       	sbc	r21, r21
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    b0c4:	0e 94 87 6f 	call	0xdf0e	; 0xdf0e <__divmodsi4>
    b0c8:	d5 01       	movw	r26, r10
    b0ca:	5c 96       	adiw	r26, 0x1c	; 28
    b0cc:	2d 93       	st	X+, r18
    b0ce:	3d 93       	st	X+, r19
    b0d0:	4d 93       	st	X+, r20
    b0d2:	5c 93       	st	X, r21
    b0d4:	5f 97       	sbiw	r26, 0x1f	; 31
    b0d6:	05 c0       	rjmp	.+10     	; 0xb0e2 <UpdateLimits+0x1f6>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    b0d8:	f5 01       	movw	r30, r10
    b0da:	14 8e       	std	Z+28, r1	; 0x1c
    b0dc:	15 8e       	std	Z+29, r1	; 0x1d
    b0de:	16 8e       	std	Z+30, r1	; 0x1e
    b0e0:	17 8e       	std	Z+31, r1	; 0x1f
    b0e2:	ff ef       	ldi	r31, 0xFF	; 255
    b0e4:	cf 1a       	sub	r12, r31
    b0e6:	df 0a       	sbc	r13, r31

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		// Limits calculation is different for gyros and accs
		for (i = 0; i < (NUMBEROFAXIS); i++)
    b0e8:	23 e0       	ldi	r18, 0x03	; 3
    b0ea:	c2 16       	cp	r12, r18
    b0ec:	d1 04       	cpc	r13, r1
    b0ee:	39 f6       	brne	.-114    	; 0xb07e <UpdateLimits+0x192>
				Config.Raw_I_Constrain[j][i] = 0;
			}
		}
		
		// Accs
		temp32 	= limits[j][ZED]; 						// Promote limit %
    b0f0:	f4 01       	movw	r30, r8
    b0f2:	a3 81       	ldd	r26, Z+3	; 0x03

		// I-term output (throw). Convert from % to actual count
		// A value of 80,000 results in +/- 1250 or full throw at the output stage
		// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
		Config.Raw_I_Limits[j][ZED] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    b0f4:	0a 2e       	mov	r0, r26
    b0f6:	00 0c       	add	r0, r0
    b0f8:	bb 0b       	sbc	r27, r27
    b0fa:	20 e8       	ldi	r18, 0x80	; 128
    b0fc:	32 e0       	ldi	r19, 0x02	; 2
    b0fe:	0e 94 c3 6f 	call	0xdf86	; 0xdf86 <__usmulhisi3>
    b102:	f8 01       	movw	r30, r16
    b104:	b0 97       	sbiw	r30, 0x20	; 32
    b106:	60 83       	st	Z, r22
    b108:	71 83       	std	Z+1, r23	; 0x01
    b10a:	82 83       	std	Z+2, r24	; 0x02
    b10c:	93 83       	std	Z+3, r25	; 0x03

		// I-term source limits. These have to be different due to the I-term gain setting
		// I-term = (gyro * gain) / 4, so the gyro count for a particular gain and limit is
		// Gyro = (I-term * 4) / gain :)
		if (gains[j][ZED] != 0)
    b10e:	d3 01       	movw	r26, r6
    b110:	13 96       	adiw	r26, 0x03	; 3
    b112:	2c 91       	ld	r18, X
    b114:	22 23       	and	r18, r18
    b116:	a1 f0       	breq	.+40     	; 0xb140 <UpdateLimits+0x254>
		{
			gain32 = gains[j][ZED];						// Promote gain value
			Config.Raw_I_Constrain[j][ZED] = (Config.Raw_I_Limits[j][ZED] << 2) / gain32;
    b118:	32 e0       	ldi	r19, 0x02	; 2
    b11a:	66 0f       	add	r22, r22
    b11c:	77 1f       	adc	r23, r23
    b11e:	88 1f       	adc	r24, r24
    b120:	99 1f       	adc	r25, r25
    b122:	3a 95       	dec	r19
    b124:	d1 f7       	brne	.-12     	; 0xb11a <UpdateLimits+0x22e>
		// I-term source limits. These have to be different due to the I-term gain setting
		// I-term = (gyro * gain) / 4, so the gyro count for a particular gain and limit is
		// Gyro = (I-term * 4) / gain :)
		if (gains[j][ZED] != 0)
		{
			gain32 = gains[j][ZED];						// Promote gain value
    b126:	02 2e       	mov	r0, r18
    b128:	00 0c       	add	r0, r0
    b12a:	33 0b       	sbc	r19, r19
    b12c:	44 0b       	sbc	r20, r20
    b12e:	55 0b       	sbc	r21, r21
			Config.Raw_I_Constrain[j][ZED] = (Config.Raw_I_Limits[j][ZED] << 2) / gain32;
    b130:	0e 94 87 6f 	call	0xdf0e	; 0xdf0e <__divmodsi4>
    b134:	f8 01       	movw	r30, r16
    b136:	20 83       	st	Z, r18
    b138:	31 83       	std	Z+1, r19	; 0x01
    b13a:	42 83       	std	Z+2, r20	; 0x02
    b13c:	53 83       	std	Z+3, r21	; 0x03
    b13e:	06 c0       	rjmp	.+12     	; 0xb14c <UpdateLimits+0x260>
		}
		else
		{
			Config.Raw_I_Constrain[j][ZED] = 0;
    b140:	d8 01       	movw	r26, r16
    b142:	1d 92       	st	X+, r1
    b144:	1d 92       	st	X+, r1
    b146:	1d 92       	st	X+, r1
    b148:	1c 92       	st	X, r1
    b14a:	13 97       	sbiw	r26, 0x03	; 3
    b14c:	00 5f       	subi	r16, 0xF0	; 240
    b14e:	1f 4f       	sbci	r17, 0xFF	; 255
    b150:	b4 e0       	ldi	r27, 0x04	; 4
    b152:	eb 0e       	add	r14, r27
    b154:	f1 1c       	adc	r15, r1
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    b156:	e8 e0       	ldi	r30, 0x08	; 8
    b158:	ee 16       	cp	r14, r30
    b15a:	f1 04       	cpc	r15, r1
    b15c:	09 f0       	breq	.+2      	; 0xb160 <UpdateLimits+0x274>
    b15e:	7b cf       	rjmp	.-266    	; 0xb056 <UpdateLimits+0x16a>
    b160:	e9 e3       	ldi	r30, 0x39	; 57
    b162:	f6 e0       	ldi	r31, 0x06	; 6
    b164:	44 e0       	ldi	r20, 0x04	; 4
    b166:	58 e0       	ldi	r21, 0x08	; 8
    b168:	ca 01       	movw	r24, r20
    b16a:	08 97       	sbiw	r24, 0x08	; 8
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_micros(Config.min_travel[i]);
    b16c:	dc 01       	movw	r26, r24
    b16e:	8c 91       	ld	r24, X
int16_t scale_micros(int8_t value)
{
	int16_t temp16;

	// 100% = 1000 to 2000
	temp16 = (int16_t)((value * 5) + SERVO_CENTER); // SERVO_CENTER = 1500
    b170:	b5 e0       	ldi	r27, 0x05	; 5
    b172:	8b 02       	muls	r24, r27
    b174:	c0 01       	movw	r24, r0
    b176:	11 24       	eor	r1, r1
    b178:	84 52       	subi	r24, 0x24	; 36
    b17a:	9a 4f       	sbci	r25, 0xFA	; 250
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_micros(Config.min_travel[i]);
    b17c:	92 87       	std	Z+10, r25	; 0x0a
    b17e:	81 87       	std	Z+9, r24	; 0x09
		Config.Limits[i].maximum = scale_micros(Config.max_travel[i]);
    b180:	da 01       	movw	r26, r20
    b182:	8d 91       	ld	r24, X+
    b184:	ad 01       	movw	r20, r26
int16_t scale_micros(int8_t value)
{
	int16_t temp16;

	// 100% = 1000 to 2000
	temp16 = (int16_t)((value * 5) + SERVO_CENTER); // SERVO_CENTER = 1500
    b186:	b5 e0       	ldi	r27, 0x05	; 5
    b188:	8b 02       	muls	r24, r27
    b18a:	c0 01       	movw	r24, r0
    b18c:	11 24       	eor	r1, r1
    b18e:	84 52       	subi	r24, 0x24	; 36
    b190:	9a 4f       	sbci	r25, 0xFA	; 250

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_micros(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_micros(Config.max_travel[i]);
    b192:	94 87       	std	Z+12, r25	; 0x0c
    b194:	83 87       	std	Z+11, r24	; 0x0b
    b196:	34 96       	adiw	r30, 0x04	; 4
			Config.Raw_I_Constrain[j][ZED] = 0;
		}	
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    b198:	26 e0       	ldi	r18, 0x06	; 6
    b19a:	e9 35       	cpi	r30, 0x59	; 89
    b19c:	f2 07       	cpc	r31, r18
    b19e:	21 f7       	brne	.-56     	; 0xb168 <UpdateLimits+0x27c>
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 100 = 12700 which in 1/100ths of a degree equates to potentially 127 degrees
	// In reality though, with a more realistic P gain of 10, this equates to potentially 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 100;
    b1a0:	80 91 73 06 	lds	r24, 0x0673
    b1a4:	44 e6       	ldi	r20, 0x64	; 100
    b1a6:	84 02       	muls	r24, r20
    b1a8:	c0 01       	movw	r24, r0
    b1aa:	11 24       	eor	r1, r1
    b1ac:	90 93 32 08 	sts	0x0832, r25
    b1b0:	80 93 31 08 	sts	0x0831, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 100;
    b1b4:	80 91 79 06 	lds	r24, 0x0679
    b1b8:	64 e6       	ldi	r22, 0x64	; 100
    b1ba:	86 02       	muls	r24, r22
    b1bc:	c0 01       	movw	r24, r0
    b1be:	11 24       	eor	r1, r1
    b1c0:	90 93 36 08 	sts	0x0836, r25
    b1c4:	80 93 35 08 	sts	0x0835, r24
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 100 = 12700 which in 1/100ths of a degree equates to potentially 127 degrees
	// In reality though, with a more realistic P gain of 10, this equates to potentially 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 100;
    b1c8:	80 91 87 06 	lds	r24, 0x0687
    b1cc:	a4 e6       	ldi	r26, 0x64	; 100
    b1ce:	8a 02       	muls	r24, r26
    b1d0:	c0 01       	movw	r24, r0
    b1d2:	11 24       	eor	r1, r1
    b1d4:	90 93 34 08 	sts	0x0834, r25
    b1d8:	80 93 33 08 	sts	0x0833, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 100;
    b1dc:	80 91 8d 06 	lds	r24, 0x068D
    b1e0:	b4 e6       	ldi	r27, 0x64	; 100
    b1e2:	8b 02       	muls	r24, r27
    b1e4:	c0 01       	movw	r24, r0
    b1e6:	11 24       	eor	r1, r1
    b1e8:	90 93 38 08 	sts	0x0838, r25
    b1ec:	80 93 37 08 	sts	0x0837, r24

	// Additional tasks to ensure compatibility with the GUI
	// Move any menu post-processing here so that it happens post-reboot

	// Refresh channel order
	UpdateChOrder();
    b1f0:	0e 94 a2 6a 	call	0xd544	; 0xd544 <UpdateChOrder>

	// See if mixer preset has changed. The only time it will ever NOT
	// be "Options" is when the GUI has changed it.
	if (Config.Preset != OPTIONS)
    b1f4:	80 91 e2 06 	lds	r24, 0x06E2
    b1f8:	84 30       	cpi	r24, 0x04	; 4
    b1fa:	29 f0       	breq	.+10     	; 0xb206 <UpdateLimits+0x31a>
	{
		Load_eeprom_preset(Config.Preset);
    b1fc:	0e 94 de 2a 	call	0x55bc	; 0x55bc <Load_eeprom_preset>
		
		// Reset the mixer preset
		Config.Preset = OPTIONS;
    b200:	84 e0       	ldi	r24, 0x04	; 4
    b202:	80 93 e2 06 	sts	0x06E2, r24
	}
	
	// Update MPU6050 LPF and reverse sense of menu items
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    b206:	80 91 de 06 	lds	r24, 0x06DE
    b20a:	46 e0       	ldi	r20, 0x06	; 6
    b20c:	48 1b       	sub	r20, r24
    b20e:	6a e1       	ldi	r22, 0x1A	; 26
    b210:	80 ed       	ldi	r24, 0xD0	; 208
    b212:	0e 94 02 3c 	call	0x7804	; 0x7804 <writeI2Cbyte>

	// Check validity of RX type and PWM speed selection
	// If illegal setting, drop down to RC Sync
	if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    b216:	80 91 62 06 	lds	r24, 0x0662
    b21a:	82 30       	cpi	r24, 0x02	; 2
    b21c:	3c f4       	brge	.+14     	; 0xb22c <UpdateLimits+0x340>
    b21e:	80 91 63 06 	lds	r24, 0x0663
    b222:	82 30       	cpi	r24, 0x02	; 2
    b224:	19 f4       	brne	.+6      	; 0xb22c <UpdateLimits+0x340>
	{
		Config.Servo_rate = SYNC;
    b226:	81 e0       	ldi	r24, 0x01	; 1
    b228:	80 93 63 06 	sts	0x0663, r24
	}
		
	// If mode switched to ARMABLE, make sure to disarm	
	if (Config.ArmMode == ARMABLE)
    b22c:	80 91 db 06 	lds	r24, 0x06DB
    b230:	81 30       	cpi	r24, 0x01	; 1
    b232:	31 f4       	brne	.+12     	; 0xb240 <UpdateLimits+0x354>
	{
		General_error |= (1 << DISARMED);	// Set flags to disarmed
    b234:	80 91 35 05 	lds	r24, 0x0535
    b238:	84 60       	ori	r24, 0x04	; 4
    b23a:	80 93 35 05 	sts	0x0535, r24
		LED1 = 0;
    b23e:	2b 98       	cbi	0x05, 3	; 5
	}	

	// Work out the P1 orientation from the user's P2 orientation setting
	Config.Orientation_P1 = (int8_t)pgm_read_byte(&P1_Orientation_LUT[Config.Orientation_P2]);
    b240:	e0 91 d8 06 	lds	r30, 0x06D8
    b244:	0e 2e       	mov	r0, r30
    b246:	00 0c       	add	r0, r0
    b248:	ff 0b       	sbc	r31, r31
    b24a:	ea 50       	subi	r30, 0x0A	; 10
    b24c:	f6 4d       	sbci	r31, 0xD6	; 214
    b24e:	e4 91       	lpm	r30, Z
    b250:	e0 93 63 08 	sts	0x0863, r30

	Save_Config_to_EEPROM(); // Save values and return
}
    b254:	60 96       	adiw	r28, 0x10	; 16
    b256:	0f b6       	in	r0, 0x3f	; 63
    b258:	f8 94       	cli
    b25a:	de bf       	out	0x3e, r29	; 62
    b25c:	0f be       	out	0x3f, r0	; 63
    b25e:	cd bf       	out	0x3d, r28	; 61
    b260:	df 91       	pop	r29
    b262:	cf 91       	pop	r28
    b264:	1f 91       	pop	r17
    b266:	0f 91       	pop	r16
    b268:	ff 90       	pop	r15
    b26a:	ef 90       	pop	r14
    b26c:	df 90       	pop	r13
    b26e:	cf 90       	pop	r12
    b270:	bf 90       	pop	r11
    b272:	af 90       	pop	r10
    b274:	9f 90       	pop	r9
    b276:	8f 90       	pop	r8
    b278:	7f 90       	pop	r7
    b27a:	6f 90       	pop	r6
	}	

	// Work out the P1 orientation from the user's P2 orientation setting
	Config.Orientation_P1 = (int8_t)pgm_read_byte(&P1_Orientation_LUT[Config.Orientation_P2]);

	Save_Config_to_EEPROM(); // Save values and return
    b27c:	0c 94 53 26 	jmp	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>

0000b280 <UpdateServos>:
}

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    b280:	e4 ee       	ldi	r30, 0xE4	; 228
    b282:	f6 e0       	ldi	r31, 0x06	; 6
    b284:	80 e0       	ldi	r24, 0x00	; 0
    b286:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    b288:	20 81       	ld	r18, Z
    b28a:	31 81       	ldd	r19, Z+1	; 0x01
    b28c:	dc 01       	movw	r26, r24
    b28e:	ac 50       	subi	r26, 0x0C	; 12
    b290:	b8 4f       	sbci	r27, 0xF8	; 248

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    b292:	4c 91       	ld	r20, X
    b294:	41 30       	cpi	r20, 0x01	; 1
    b296:	19 f4       	brne	.+6      	; 0xb29e <UpdateServos+0x1e>
		{	
			temp1 = -temp1;
    b298:	31 95       	neg	r19
    b29a:	21 95       	neg	r18
    b29c:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    b29e:	2a 55       	subi	r18, 0x5A	; 90
    b2a0:	31 4f       	sbci	r19, 0xF1	; 241

		// Transfer value to servo
		ServoOut[i] = temp1;
    b2a2:	dc 01       	movw	r26, r24
    b2a4:	aa 0f       	add	r26, r26
    b2a6:	bb 1f       	adc	r27, r27
    b2a8:	ab 56       	subi	r26, 0x6B	; 107
    b2aa:	b6 4f       	sbci	r27, 0xF6	; 246
    b2ac:	11 96       	adiw	r26, 0x01	; 1
    b2ae:	3c 93       	st	X, r19
    b2b0:	2e 93       	st	-X, r18
    b2b2:	01 96       	adiw	r24, 0x01	; 1
    b2b4:	b2 96       	adiw	r30, 0x22	; 34
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    b2b6:	88 30       	cpi	r24, 0x08	; 8
    b2b8:	91 05       	cpc	r25, r1
    b2ba:	31 f7       	brne	.-52     	; 0xb288 <UpdateServos+0x8>
		temp1 += 3750;

		// Transfer value to servo
		ServoOut[i] = temp1;
	}
}
    b2bc:	08 95       	ret

0000b2be <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    b2be:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    b2c0:	64 36       	cpi	r22, 0x64	; 100
    b2c2:	71 05       	cpc	r23, r1
    b2c4:	c9 f0       	breq	.+50     	; 0xb2f8 <scale32+0x3a>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    b2c6:	6c 39       	cpi	r22, 0x9C	; 156
    b2c8:	8f ef       	ldi	r24, 0xFF	; 255
    b2ca:	78 07       	cpc	r23, r24
    b2cc:	29 f4       	brne	.+10     	; 0xb2d8 <scale32+0x1a>
	{
		return -value16;	
    b2ce:	88 27       	eor	r24, r24
    b2d0:	99 27       	eor	r25, r25
    b2d2:	82 1b       	sub	r24, r18
    b2d4:	93 0b       	sbc	r25, r19
    b2d6:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    b2d8:	61 15       	cp	r22, r1
    b2da:	71 05       	cpc	r23, r1
    b2dc:	79 f0       	breq	.+30     	; 0xb2fc <scale32+0x3e>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    b2de:	db 01       	movw	r26, r22
    b2e0:	0e 94 ac 6f 	call	0xdf58	; 0xdf58 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    b2e4:	6e 5c       	subi	r22, 0xCE	; 206
    b2e6:	7f 4f       	sbci	r23, 0xFF	; 255
    b2e8:	8f 4f       	sbci	r24, 0xFF	; 255
    b2ea:	9f 4f       	sbci	r25, 0xFF	; 255
    b2ec:	24 e6       	ldi	r18, 0x64	; 100
    b2ee:	30 e0       	ldi	r19, 0x00	; 0
    b2f0:	40 e0       	ldi	r20, 0x00	; 0
    b2f2:	50 e0       	ldi	r21, 0x00	; 0
    b2f4:	0e 94 87 6f 	call	0xdf0e	; 0xdf0e <__divmodsi4>
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    b2f8:	c9 01       	movw	r24, r18
    b2fa:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    b2fc:	80 e0       	ldi	r24, 0x00	; 0
    b2fe:	90 e0       	ldi	r25, 0x00	; 0
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    b300:	08 95       	ret

0000b302 <scale_percent>:
{
	int16_t temp16;
	float tempf;

	// 100% = 2500 to 5000
	tempf = (float)value; // Promote
    b302:	68 2f       	mov	r22, r24
    b304:	88 0f       	add	r24, r24
    b306:	77 0b       	sbc	r23, r23
    b308:	88 0b       	sbc	r24, r24
    b30a:	99 0b       	sbc	r25, r25
    b30c:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
	temp16 = (int16_t)((tempf * 12.5f) + 3750.0f);
    b310:	20 e0       	ldi	r18, 0x00	; 0
    b312:	30 e0       	ldi	r19, 0x00	; 0
    b314:	48 e4       	ldi	r20, 0x48	; 72
    b316:	51 e4       	ldi	r21, 0x41	; 65
    b318:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    b31c:	20 e0       	ldi	r18, 0x00	; 0
    b31e:	30 e6       	ldi	r19, 0x60	; 96
    b320:	4a e6       	ldi	r20, 0x6A	; 106
    b322:	55 e4       	ldi	r21, 0x45	; 69
    b324:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    b328:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>

	return temp16;
}
    b32c:	cb 01       	movw	r24, r22
    b32e:	08 95       	ret

0000b330 <Process_curve>:
// Process curves. Maximum input values are +/-1000 for Bipolar curves and 0-2000 for monopolar curves.
// Curve number > NUMBEROFCURVES are the offset curves.
// Seven points 0, 17%, 33%, 50%, 67%, 83%, 100%	(Monopolar)
// Seven points -100, 67%, -33%, 0%, 33%, 67%, 100% (Bipolar)
int16_t Process_curve(uint8_t curve, uint8_t type, int16_t input_value)
{
    b330:	af 92       	push	r10
    b332:	bf 92       	push	r11
    b334:	cf 92       	push	r12
    b336:	df 92       	push	r13
    b338:	ef 92       	push	r14
    b33a:	ff 92       	push	r15
    b33c:	0f 93       	push	r16
    b33e:	1f 93       	push	r17
    b340:	cf 93       	push	r28
    b342:	df 93       	push	r29
    b344:	26 2f       	mov	r18, r22
    b346:	ea 01       	movw	r28, r20
	int16_t end_pos = 0;
	int32_t temp1 = 0;
	int32_t temp2 = 0;
	int32_t	Step1 = 0;

	if (type == BIPOLAR)
    b348:	61 30       	cpi	r22, 0x01	; 1
    b34a:	71 f4       	brne	.+28     	; 0xb368 <Process_curve+0x38>
	{
		// Limit input value to +/-100% (+/-1000)
		if (input_value < -1000)
    b34c:	48 31       	cpi	r20, 0x18	; 24
    b34e:	3c ef       	ldi	r19, 0xFC	; 252
    b350:	53 07       	cpc	r21, r19
    b352:	f4 f1       	brlt	.+124    	; 0xb3d0 <Process_curve+0xa0>
		{
			input_value = -1000;
		}
		if (input_value > 1000)
    b354:	49 3e       	cpi	r20, 0xE9	; 233
    b356:	93 e0       	ldi	r25, 0x03	; 3
    b358:	59 07       	cpc	r21, r25
    b35a:	0c f0       	brlt	.+2      	; 0xb35e <Process_curve+0x2e>
    b35c:	69 c1       	rjmp	.+722    	; 0xb630 <Process_curve+0x300>
	}

	if (type == BIPOLAR)
	{
		// Work out which zone we are in
		if (input_value < -667)
    b35e:	45 36       	cpi	r20, 0x65	; 101
    b360:	3d ef       	ldi	r19, 0xFD	; 253
    b362:	53 07       	cpc	r21, r19
    b364:	6c f4       	brge	.+26     	; 0xb380 <Process_curve+0x50>
    b366:	36 c0       	rjmp	.+108    	; 0xb3d4 <Process_curve+0xa4>
		}
	}
	else // Monopolar
	{
		// Limit input value to 0 to 100% (0 to 2000)
		if (input_value < 0)
    b368:	57 fd       	sbrc	r21, 7
    b36a:	37 c0       	rjmp	.+110    	; 0xb3da <Process_curve+0xaa>
		{
			input_value = 0;
		}
		if (input_value > 2000)
    b36c:	41 3d       	cpi	r20, 0xD1	; 209
    b36e:	97 e0       	ldi	r25, 0x07	; 7
    b370:	59 07       	cpc	r21, r25
    b372:	0c f0       	brlt	.+2      	; 0xb376 <Process_curve+0x46>
    b374:	60 c1       	rjmp	.+704    	; 0xb636 <Process_curve+0x306>
		}
	}
	else // Monopolar
	{
		// Work out which zone we are in
		if (input_value < 333)
    b376:	4d 34       	cpi	r20, 0x4D	; 77
    b378:	31 e0       	ldi	r19, 0x01	; 1
    b37a:	53 07       	cpc	r21, r19
    b37c:	9c f4       	brge	.+38     	; 0xb3a4 <Process_curve+0x74>
    b37e:	2f c0       	rjmp	.+94     	; 0xb3de <Process_curve+0xae>
		if (input_value < -667)
		{
			zone = 0;
			bracket = -1000;			
		}
		else if (input_value < -333)
    b380:	43 3b       	cpi	r20, 0xB3	; 179
    b382:	9e ef       	ldi	r25, 0xFE	; 254
    b384:	59 07       	cpc	r21, r25
    b386:	d4 f1       	brlt	.+116    	; 0xb3fc <Process_curve+0xcc>
		{
			zone = 1;
			bracket = -667;
		}
		else if (input_value < 0)
    b388:	57 fd       	sbrc	r21, 7
    b38a:	2c c1       	rjmp	.+600    	; 0xb5e4 <Process_curve+0x2b4>
		{
			zone = 2;
			bracket = -333;
		}	
		else if (input_value > 667)
    b38c:	4c 39       	cpi	r20, 0x9C	; 156
    b38e:	32 e0       	ldi	r19, 0x02	; 2
    b390:	53 07       	cpc	r21, r19
    b392:	0c f0       	brlt	.+2      	; 0xb396 <Process_curve+0x66>
    b394:	53 c1       	rjmp	.+678    	; 0xb63c <Process_curve+0x30c>
		{
			zone = 5;
			bracket = 667;
		}		
		else if (input_value > 333)
    b396:	4e 34       	cpi	r20, 0x4E	; 78
    b398:	51 40       	sbci	r21, 0x01	; 1
    b39a:	0c f0       	brlt	.+2      	; 0xb39e <Process_curve+0x6e>
    b39c:	40 c0       	rjmp	.+128    	; 0xb41e <Process_curve+0xee>
			bracket = 333;
		}
		else if (input_value >= 0)
		{
			zone = 3;
			bracket = 0;
    b39e:	00 e0       	ldi	r16, 0x00	; 0
    b3a0:	10 e0       	ldi	r17, 0x00	; 0
    b3a2:	33 c1       	rjmp	.+614    	; 0xb60a <Process_curve+0x2da>
		if (input_value < 333)
		{
			zone = 0;
			bracket = 0;
		}
		else if (input_value < 667)
    b3a4:	4b 39       	cpi	r20, 0x9B	; 155
    b3a6:	32 e0       	ldi	r19, 0x02	; 2
    b3a8:	53 07       	cpc	r21, r19
    b3aa:	0c f4       	brge	.+2      	; 0xb3ae <Process_curve+0x7e>
    b3ac:	16 c1       	rjmp	.+556    	; 0xb5da <Process_curve+0x2aa>
		{
			zone = 1;
			bracket = 333;
		}
		else if (input_value < 1000)
    b3ae:	48 3e       	cpi	r20, 0xE8	; 232
    b3b0:	93 e0       	ldi	r25, 0x03	; 3
    b3b2:	59 07       	cpc	r21, r25
    b3b4:	0c f4       	brge	.+2      	; 0xb3b8 <Process_curve+0x88>
    b3b6:	19 c1       	rjmp	.+562    	; 0xb5ea <Process_curve+0x2ba>
		{
			zone = 2;
			bracket = 667;
		}
		else if (input_value > 1667)
    b3b8:	44 38       	cpi	r20, 0x84	; 132
    b3ba:	36 e0       	ldi	r19, 0x06	; 6
    b3bc:	53 07       	cpc	r21, r19
    b3be:	0c f0       	brlt	.+2      	; 0xb3c2 <Process_curve+0x92>
    b3c0:	40 c1       	rjmp	.+640    	; 0xb642 <Process_curve+0x312>
		{
			zone = 5;
			bracket = 1667;
		}
		else if (input_value > 1333)
    b3c2:	46 33       	cpi	r20, 0x36	; 54
    b3c4:	55 40       	sbci	r21, 0x05	; 5
    b3c6:	0c f0       	brlt	.+2      	; 0xb3ca <Process_curve+0x9a>
    b3c8:	2e c1       	rjmp	.+604    	; 0xb626 <Process_curve+0x2f6>
			bracket = 1333;
		}
		else if (input_value >= 1000)
		{
			zone = 3;
			bracket = 1000;
    b3ca:	08 ee       	ldi	r16, 0xE8	; 232
    b3cc:	13 e0       	ldi	r17, 0x03	; 3
    b3ce:	1d c1       	rjmp	.+570    	; 0xb60a <Process_curve+0x2da>
	if (type == BIPOLAR)
	{
		// Limit input value to +/-100% (+/-1000)
		if (input_value < -1000)
		{
			input_value = -1000;
    b3d0:	c8 e1       	ldi	r28, 0x18	; 24
    b3d2:	dc ef       	ldi	r29, 0xFC	; 252
	{
		// Work out which zone we are in
		if (input_value < -667)
		{
			zone = 0;
			bracket = -1000;			
    b3d4:	08 e1       	ldi	r16, 0x18	; 24
    b3d6:	1c ef       	ldi	r17, 0xFC	; 252
    b3d8:	04 c0       	rjmp	.+8      	; 0xb3e2 <Process_curve+0xb2>
	else // Monopolar
	{
		// Limit input value to 0 to 100% (0 to 2000)
		if (input_value < 0)
		{
			input_value = 0;
    b3da:	c0 e0       	ldi	r28, 0x00	; 0
    b3dc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// Work out which zone we are in
		if (input_value < 333)
		{
			zone = 0;
			bracket = 0;
    b3de:	00 e0       	ldi	r16, 0x00	; 0
    b3e0:	10 e0       	ldi	r17, 0x00	; 0
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b3e2:	86 30       	cpi	r24, 0x06	; 6
    b3e4:	08 f0       	brcs	.+2      	; 0xb3e8 <Process_curve+0xb8>
    b3e6:	9a c0       	rjmp	.+308    	; 0xb51c <Process_curve+0x1ec>
	{
		switch(zone)
		{
			case 0:
				start = Config.Curve[curve].Point1;
    b3e8:	38 e0       	ldi	r19, 0x08	; 8
    b3ea:	83 9f       	mul	r24, r19
    b3ec:	c0 01       	movw	r24, r0
    b3ee:	11 24       	eor	r1, r1
    b3f0:	87 5c       	subi	r24, 0xC7	; 199
    b3f2:	99 4f       	sbci	r25, 0xF9	; 249
    b3f4:	fc 01       	movw	r30, r24
    b3f6:	e5 5d       	subi	r30, 0xD5	; 213
    b3f8:	fd 4f       	sbci	r31, 0xFD	; 253
    b3fa:	0e c0       	rjmp	.+28     	; 0xb418 <Process_curve+0xe8>
			bracket = -1000;			
		}
		else if (input_value < -333)
		{
			zone = 1;
			bracket = -667;
    b3fc:	05 e6       	ldi	r16, 0x65	; 101
    b3fe:	1d ef       	ldi	r17, 0xFD	; 253
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b400:	86 30       	cpi	r24, 0x06	; 6
    b402:	08 f0       	brcs	.+2      	; 0xb406 <Process_curve+0xd6>
    b404:	ed c0       	rjmp	.+474    	; 0xb5e0 <Process_curve+0x2b0>
			case 0:
				start = Config.Curve[curve].Point1;
				end = Config.Curve[curve].Point2;
				break;
			case 1:	
				start = Config.Curve[curve].Point2;
    b406:	38 e0       	ldi	r19, 0x08	; 8
    b408:	83 9f       	mul	r24, r19
    b40a:	c0 01       	movw	r24, r0
    b40c:	11 24       	eor	r1, r1
    b40e:	87 5c       	subi	r24, 0xC7	; 199
    b410:	99 4f       	sbci	r25, 0xF9	; 249
    b412:	fc 01       	movw	r30, r24
    b414:	e4 5d       	subi	r30, 0xD4	; 212
    b416:	fd 4f       	sbci	r31, 0xFD	; 253
    b418:	60 81       	ld	r22, Z
				end = Config.Curve[curve].Point3;
    b41a:	31 96       	adiw	r30, 0x01	; 1
    b41c:	17 c0       	rjmp	.+46     	; 0xb44c <Process_curve+0x11c>
			bracket = 667;
		}		
		else if (input_value > 333)
		{
			zone = 4;
			bracket = 333;
    b41e:	0d e4       	ldi	r16, 0x4D	; 77
    b420:	11 e0       	ldi	r17, 0x01	; 1
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b422:	86 30       	cpi	r24, 0x06	; 6
    b424:	08 f0       	brcs	.+2      	; 0xb428 <Process_curve+0xf8>
    b426:	02 c1       	rjmp	.+516    	; 0xb62c <Process_curve+0x2fc>
			case 3:
				start = Config.Curve[curve].Point4;
				end = Config.Curve[curve].Point5;
				break;
			case 4:
				start = Config.Curve[curve].Point5;
    b428:	90 e0       	ldi	r25, 0x00	; 0
    b42a:	fc 01       	movw	r30, r24
    b42c:	a3 e0       	ldi	r26, 0x03	; 3
    b42e:	ee 0f       	add	r30, r30
    b430:	ff 1f       	adc	r31, r31
    b432:	aa 95       	dec	r26
    b434:	e1 f7       	brne	.-8      	; 0xb42e <Process_curve+0xfe>
    b436:	e8 59       	subi	r30, 0x98	; 152
    b438:	f7 4f       	sbci	r31, 0xF7	; 247
    b43a:	60 81       	ld	r22, Z
				end = Config.Curve[curve].Point6;
    b43c:	b3 e0       	ldi	r27, 0x03	; 3
    b43e:	88 0f       	add	r24, r24
    b440:	99 1f       	adc	r25, r25
    b442:	ba 95       	dec	r27
    b444:	e1 f7       	brne	.-8      	; 0xb43e <Process_curve+0x10e>
    b446:	fc 01       	movw	r30, r24
    b448:	e7 59       	subi	r30, 0x97	; 151
    b44a:	f7 4f       	sbci	r31, 0xF7	; 247
				start = Config.Offsets[curve].Point5;
				end = Config.Offsets[curve].Point6;
				break;
			case 5:
				start = Config.Offsets[curve].Point6;
				end = Config.Offsets[curve].Point7;
    b44c:	c0 80       	ld	r12, Z
    b44e:	06 2e       	mov	r0, r22
    b450:	00 0c       	add	r0, r0
    b452:	77 0b       	sbc	r23, r23
    b454:	88 0b       	sbc	r24, r24
    b456:	99 0b       	sbc	r25, r25
    b458:	0c 2c       	mov	r0, r12
    b45a:	00 0c       	add	r0, r0
    b45c:	dd 08       	sbc	r13, r13
    b45e:	ee 08       	sbc	r14, r14
    b460:	ff 08       	sbc	r15, r15
		}		
	}
	
	// Work out distance to cover
	// Convert percentages to positions
	if (type == BIPOLAR)
    b462:	21 30       	cpi	r18, 0x01	; 1
    b464:	a1 f4       	brne	.+40     	; 0xb48e <Process_curve+0x15e>
int16_t scale_throttle_curve_percent_bipolar(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    b466:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
	temp16 = (int16_t)(tempf * 10.0f);
    b46a:	20 e0       	ldi	r18, 0x00	; 0
    b46c:	30 e0       	ldi	r19, 0x00	; 0
    b46e:	40 e2       	ldi	r20, 0x20	; 32
    b470:	51 e4       	ldi	r21, 0x41	; 65
    b472:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    b476:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    b47a:	5b 01       	movw	r10, r22
int16_t scale_throttle_curve_percent_bipolar(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    b47c:	c7 01       	movw	r24, r14
    b47e:	b6 01       	movw	r22, r12
    b480:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
	temp16 = (int16_t)(tempf * 10.0f);
    b484:	20 e0       	ldi	r18, 0x00	; 0
    b486:	30 e0       	ldi	r19, 0x00	; 0
    b488:	40 e2       	ldi	r20, 0x20	; 32
    b48a:	51 e4       	ldi	r21, 0x41	; 65
    b48c:	13 c0       	rjmp	.+38     	; 0xb4b4 <Process_curve+0x184>
int16_t scale_throttle_curve_percent_mono(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    b48e:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
	temp16 = (int16_t)(tempf * 20.0f);
    b492:	20 e0       	ldi	r18, 0x00	; 0
    b494:	30 e0       	ldi	r19, 0x00	; 0
    b496:	40 ea       	ldi	r20, 0xA0	; 160
    b498:	51 e4       	ldi	r21, 0x41	; 65
    b49a:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    b49e:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    b4a2:	5b 01       	movw	r10, r22
int16_t scale_throttle_curve_percent_mono(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    b4a4:	c7 01       	movw	r24, r14
    b4a6:	b6 01       	movw	r22, r12
    b4a8:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
	temp16 = (int16_t)(tempf * 20.0f);
    b4ac:	20 e0       	ldi	r18, 0x00	; 0
    b4ae:	30 e0       	ldi	r19, 0x00	; 0
    b4b0:	40 ea       	ldi	r20, 0xA0	; 160
    b4b2:	51 e4       	ldi	r21, 0x41	; 65
    b4b4:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    b4b8:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
		start_pos = scale_throttle_curve_percent_mono(start);
		end_pos = scale_throttle_curve_percent_mono(end);
	}

	// Upscale span for best resolution (x 65536)
	temp1 = (int32_t)(end_pos - start_pos);
    b4bc:	6a 19       	sub	r22, r10
    b4be:	7b 09       	sbc	r23, r11
    b4c0:	cb 01       	movw	r24, r22
    b4c2:	77 0f       	add	r23, r23
    b4c4:	aa 0b       	sbc	r26, r26
    b4c6:	bb 0b       	sbc	r27, r27
	temp1 = temp1 << 16;

	// Divide distance into steps that cover the interval
	Step1 = (int32_t)(temp1 / (int32_t)334) ;

	temp2 = start_pos;
    b4c8:	a5 01       	movw	r20, r10
    b4ca:	bb 0c       	add	r11, r11
    b4cc:	66 0b       	sbc	r22, r22
    b4ce:	77 0b       	sbc	r23, r23
	temp2 = temp2 << 16;
    b4d0:	7a 01       	movw	r14, r20
    b4d2:	dd 24       	eor	r13, r13
    b4d4:	cc 24       	eor	r12, r12
	temp2 += ((input_value - bracket) * Step1);
    b4d6:	c0 1b       	sub	r28, r16
    b4d8:	d1 0b       	sbc	r29, r17
		end_pos = scale_throttle_curve_percent_mono(end);
	}

	// Upscale span for best resolution (x 65536)
	temp1 = (int32_t)(end_pos - start_pos);
	temp1 = temp1 << 16;
    b4da:	77 27       	eor	r23, r23
    b4dc:	66 27       	eor	r22, r22

	// Divide distance into steps that cover the interval
	Step1 = (int32_t)(temp1 / (int32_t)334) ;
    b4de:	2e e4       	ldi	r18, 0x4E	; 78
    b4e0:	31 e0       	ldi	r19, 0x01	; 1
    b4e2:	40 e0       	ldi	r20, 0x00	; 0
    b4e4:	50 e0       	ldi	r21, 0x00	; 0
    b4e6:	0e 94 87 6f 	call	0xdf0e	; 0xdf0e <__divmodsi4>

	temp2 = start_pos;
	temp2 = temp2 << 16;
	temp2 += ((input_value - bracket) * Step1);
    b4ea:	de 01       	movw	r26, r28
    b4ec:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <__mulshisi3>
    b4f0:	dc 01       	movw	r26, r24
    b4f2:	cb 01       	movw	r24, r22
    b4f4:	8c 0d       	add	r24, r12
    b4f6:	9d 1d       	adc	r25, r13
    b4f8:	ae 1d       	adc	r26, r14
    b4fa:	bf 1d       	adc	r27, r15

	// Reformat into a system-compatible value
	// Divide by 65536
	output_value = (int16_t)(temp2 >> 16);
    b4fc:	cd 01       	movw	r24, r26
    b4fe:	bb 27       	eor	r27, r27
    b500:	97 fd       	sbrc	r25, 7
    b502:	b0 95       	com	r27
    b504:	ab 2f       	mov	r26, r27

	return output_value;
}
    b506:	df 91       	pop	r29
    b508:	cf 91       	pop	r28
    b50a:	1f 91       	pop	r17
    b50c:	0f 91       	pop	r16
    b50e:	ff 90       	pop	r15
    b510:	ef 90       	pop	r14
    b512:	df 90       	pop	r13
    b514:	cf 90       	pop	r12
    b516:	bf 90       	pop	r11
    b518:	af 90       	pop	r10
    b51a:	08 95       	ret
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b51c:	30 e0       	ldi	r19, 0x00	; 0
	}
	// Offsets
	else
	{
		// Correct curve number
		curve = curve - NUMBEROFCURVES;
    b51e:	86 50       	subi	r24, 0x06	; 6
    b520:	90 e0       	ldi	r25, 0x00	; 0

		switch(zone)
    b522:	33 30       	cpi	r19, 0x03	; 3
    b524:	59 f1       	breq	.+86     	; 0xb57c <Process_curve+0x24c>
    b526:	2c f4       	brge	.+10     	; 0xb532 <Process_curve+0x202>
    b528:	31 30       	cpi	r19, 0x01	; 1
    b52a:	91 f0       	breq	.+36     	; 0xb550 <Process_curve+0x220>
    b52c:	32 30       	cpi	r19, 0x02	; 2
    b52e:	d9 f0       	breq	.+54     	; 0xb566 <Process_curve+0x236>
    b530:	04 c0       	rjmp	.+8      	; 0xb53a <Process_curve+0x20a>
    b532:	34 30       	cpi	r19, 0x04	; 4
    b534:	71 f1       	breq	.+92     	; 0xb592 <Process_curve+0x262>
    b536:	35 30       	cpi	r19, 0x05	; 5
    b538:	f1 f1       	breq	.+124    	; 0xb5b6 <Process_curve+0x286>
		{
			case 0:
				start = Config.Offsets[curve].Point1;
    b53a:	63 e0       	ldi	r22, 0x03	; 3
    b53c:	88 0f       	add	r24, r24
    b53e:	99 1f       	adc	r25, r25
    b540:	6a 95       	dec	r22
    b542:	e1 f7       	brne	.-8      	; 0xb53c <Process_curve+0x20c>
    b544:	87 5c       	subi	r24, 0xC7	; 199
    b546:	99 4f       	sbci	r25, 0xF9	; 249
    b548:	fc 01       	movw	r30, r24
    b54a:	ed 59       	subi	r30, 0x9D	; 157
    b54c:	fd 4f       	sbci	r31, 0xFD	; 253
    b54e:	64 cf       	rjmp	.-312    	; 0xb418 <Process_curve+0xe8>
				end = Config.Offsets[curve].Point2;
				break;
			case 1:
				start = Config.Offsets[curve].Point2;
    b550:	53 e0       	ldi	r21, 0x03	; 3
    b552:	88 0f       	add	r24, r24
    b554:	99 1f       	adc	r25, r25
    b556:	5a 95       	dec	r21
    b558:	e1 f7       	brne	.-8      	; 0xb552 <Process_curve+0x222>
    b55a:	87 5c       	subi	r24, 0xC7	; 199
    b55c:	99 4f       	sbci	r25, 0xF9	; 249
    b55e:	fc 01       	movw	r30, r24
    b560:	ec 59       	subi	r30, 0x9C	; 156
    b562:	fd 4f       	sbci	r31, 0xFD	; 253
    b564:	59 cf       	rjmp	.-334    	; 0xb418 <Process_curve+0xe8>
				end = Config.Offsets[curve].Point3;
				break;
			case 2:
				start = Config.Offsets[curve].Point3;
    b566:	43 e0       	ldi	r20, 0x03	; 3
    b568:	88 0f       	add	r24, r24
    b56a:	99 1f       	adc	r25, r25
    b56c:	4a 95       	dec	r20
    b56e:	e1 f7       	brne	.-8      	; 0xb568 <Process_curve+0x238>
    b570:	87 5c       	subi	r24, 0xC7	; 199
    b572:	99 4f       	sbci	r25, 0xF9	; 249
    b574:	fc 01       	movw	r30, r24
    b576:	eb 59       	subi	r30, 0x9B	; 155
    b578:	fd 4f       	sbci	r31, 0xFD	; 253
    b57a:	4e cf       	rjmp	.-356    	; 0xb418 <Process_curve+0xe8>
				end = Config.Offsets[curve].Point4;
				break;
			case 3:
				start = Config.Offsets[curve].Point4;
    b57c:	33 e0       	ldi	r19, 0x03	; 3
    b57e:	88 0f       	add	r24, r24
    b580:	99 1f       	adc	r25, r25
    b582:	3a 95       	dec	r19
    b584:	e1 f7       	brne	.-8      	; 0xb57e <Process_curve+0x24e>
    b586:	87 5c       	subi	r24, 0xC7	; 199
    b588:	99 4f       	sbci	r25, 0xF9	; 249
    b58a:	fc 01       	movw	r30, r24
    b58c:	ea 59       	subi	r30, 0x9A	; 154
    b58e:	fd 4f       	sbci	r31, 0xFD	; 253
    b590:	43 cf       	rjmp	.-378    	; 0xb418 <Process_curve+0xe8>
				end = Config.Offsets[curve].Point5;
				break;
			case 4:
				start = Config.Offsets[curve].Point5;
    b592:	fc 01       	movw	r30, r24
    b594:	a3 e0       	ldi	r26, 0x03	; 3
    b596:	ee 0f       	add	r30, r30
    b598:	ff 1f       	adc	r31, r31
    b59a:	aa 95       	dec	r26
    b59c:	e1 f7       	brne	.-8      	; 0xb596 <Process_curve+0x266>
    b59e:	e0 56       	subi	r30, 0x60	; 96
    b5a0:	f7 4f       	sbci	r31, 0xF7	; 247
    b5a2:	60 81       	ld	r22, Z
				end = Config.Offsets[curve].Point6;
    b5a4:	b3 e0       	ldi	r27, 0x03	; 3
    b5a6:	88 0f       	add	r24, r24
    b5a8:	99 1f       	adc	r25, r25
    b5aa:	ba 95       	dec	r27
    b5ac:	e1 f7       	brne	.-8      	; 0xb5a6 <Process_curve+0x276>
    b5ae:	fc 01       	movw	r30, r24
    b5b0:	ef 55       	subi	r30, 0x5F	; 95
    b5b2:	f7 4f       	sbci	r31, 0xF7	; 247
    b5b4:	4b cf       	rjmp	.-362    	; 0xb44c <Process_curve+0x11c>
				break;
			case 5:
				start = Config.Offsets[curve].Point6;
    b5b6:	fc 01       	movw	r30, r24
    b5b8:	53 e0       	ldi	r21, 0x03	; 3
    b5ba:	ee 0f       	add	r30, r30
    b5bc:	ff 1f       	adc	r31, r31
    b5be:	5a 95       	dec	r21
    b5c0:	e1 f7       	brne	.-8      	; 0xb5ba <Process_curve+0x28a>
    b5c2:	ef 55       	subi	r30, 0x5F	; 95
    b5c4:	f7 4f       	sbci	r31, 0xF7	; 247
    b5c6:	60 81       	ld	r22, Z
				end = Config.Offsets[curve].Point7;
    b5c8:	73 e0       	ldi	r23, 0x03	; 3
    b5ca:	88 0f       	add	r24, r24
    b5cc:	99 1f       	adc	r25, r25
    b5ce:	7a 95       	dec	r23
    b5d0:	e1 f7       	brne	.-8      	; 0xb5ca <Process_curve+0x29a>
    b5d2:	fc 01       	movw	r30, r24
    b5d4:	ee 55       	subi	r30, 0x5E	; 94
    b5d6:	f7 4f       	sbci	r31, 0xF7	; 247
    b5d8:	39 cf       	rjmp	.-398    	; 0xb44c <Process_curve+0x11c>
			bracket = 0;
		}
		else if (input_value < 667)
		{
			zone = 1;
			bracket = 333;
    b5da:	0d e4       	ldi	r16, 0x4D	; 77
    b5dc:	11 e0       	ldi	r17, 0x01	; 1
    b5de:	10 cf       	rjmp	.-480    	; 0xb400 <Process_curve+0xd0>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b5e0:	31 e0       	ldi	r19, 0x01	; 1
    b5e2:	9d cf       	rjmp	.-198    	; 0xb51e <Process_curve+0x1ee>
			bracket = -667;
		}
		else if (input_value < 0)
		{
			zone = 2;
			bracket = -333;
    b5e4:	03 eb       	ldi	r16, 0xB3	; 179
    b5e6:	1e ef       	ldi	r17, 0xFE	; 254
    b5e8:	02 c0       	rjmp	.+4      	; 0xb5ee <Process_curve+0x2be>
			bracket = 333;
		}
		else if (input_value < 1000)
		{
			zone = 2;
			bracket = 667;
    b5ea:	0b e9       	ldi	r16, 0x9B	; 155
    b5ec:	12 e0       	ldi	r17, 0x02	; 2
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b5ee:	86 30       	cpi	r24, 0x06	; 6
    b5f0:	50 f4       	brcc	.+20     	; 0xb606 <Process_curve+0x2d6>
			case 1:	
				start = Config.Curve[curve].Point2;
				end = Config.Curve[curve].Point3;
				break;
			case 2:
				start = Config.Curve[curve].Point3;
    b5f2:	38 e0       	ldi	r19, 0x08	; 8
    b5f4:	83 9f       	mul	r24, r19
    b5f6:	c0 01       	movw	r24, r0
    b5f8:	11 24       	eor	r1, r1
    b5fa:	87 5c       	subi	r24, 0xC7	; 199
    b5fc:	99 4f       	sbci	r25, 0xF9	; 249
    b5fe:	fc 01       	movw	r30, r24
    b600:	e3 5d       	subi	r30, 0xD3	; 211
    b602:	fd 4f       	sbci	r31, 0xFD	; 253
    b604:	09 cf       	rjmp	.-494    	; 0xb418 <Process_curve+0xe8>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b606:	32 e0       	ldi	r19, 0x02	; 2
    b608:	8a cf       	rjmp	.-236    	; 0xb51e <Process_curve+0x1ee>
    b60a:	86 30       	cpi	r24, 0x06	; 6
    b60c:	50 f4       	brcc	.+20     	; 0xb622 <Process_curve+0x2f2>
			case 2:
				start = Config.Curve[curve].Point3;
				end = Config.Curve[curve].Point4;
				break;
			case 3:
				start = Config.Curve[curve].Point4;
    b60e:	38 e0       	ldi	r19, 0x08	; 8
    b610:	83 9f       	mul	r24, r19
    b612:	c0 01       	movw	r24, r0
    b614:	11 24       	eor	r1, r1
    b616:	87 5c       	subi	r24, 0xC7	; 199
    b618:	99 4f       	sbci	r25, 0xF9	; 249
    b61a:	fc 01       	movw	r30, r24
    b61c:	e2 5d       	subi	r30, 0xD2	; 210
    b61e:	fd 4f       	sbci	r31, 0xFD	; 253
    b620:	fb ce       	rjmp	.-522    	; 0xb418 <Process_curve+0xe8>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b622:	33 e0       	ldi	r19, 0x03	; 3
    b624:	7c cf       	rjmp	.-264    	; 0xb51e <Process_curve+0x1ee>
			bracket = 1667;
		}
		else if (input_value > 1333)
		{
			zone = 4;
			bracket = 1333;
    b626:	05 e3       	ldi	r16, 0x35	; 53
    b628:	15 e0       	ldi	r17, 0x05	; 5
    b62a:	fb ce       	rjmp	.-522    	; 0xb422 <Process_curve+0xf2>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b62c:	34 e0       	ldi	r19, 0x04	; 4
    b62e:	77 cf       	rjmp	.-274    	; 0xb51e <Process_curve+0x1ee>
		{
			input_value = -1000;
		}
		if (input_value > 1000)
		{
			input_value = 1000;
    b630:	c8 ee       	ldi	r28, 0xE8	; 232
    b632:	d3 e0       	ldi	r29, 0x03	; 3
    b634:	03 c0       	rjmp	.+6      	; 0xb63c <Process_curve+0x30c>
		{
			input_value = 0;
		}
		if (input_value > 2000)
		{
			input_value = 2000;
    b636:	c0 ed       	ldi	r28, 0xD0	; 208
    b638:	d7 e0       	ldi	r29, 0x07	; 7
    b63a:	03 c0       	rjmp	.+6      	; 0xb642 <Process_curve+0x312>
			bracket = -333;
		}	
		else if (input_value > 667)
		{
			zone = 5;
			bracket = 667;
    b63c:	0b e9       	ldi	r16, 0x9B	; 155
    b63e:	12 e0       	ldi	r17, 0x02	; 2
    b640:	02 c0       	rjmp	.+4      	; 0xb646 <Process_curve+0x316>
			bracket = 667;
		}
		else if (input_value > 1667)
		{
			zone = 5;
			bracket = 1667;
    b642:	03 e8       	ldi	r16, 0x83	; 131
    b644:	16 e0       	ldi	r17, 0x06	; 6
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b646:	86 30       	cpi	r24, 0x06	; 6
    b648:	98 f4       	brcc	.+38     	; 0xb670 <Process_curve+0x340>
			case 4:
				start = Config.Curve[curve].Point5;
				end = Config.Curve[curve].Point6;
				break;
			case 5:
				start = Config.Curve[curve].Point6;
    b64a:	90 e0       	ldi	r25, 0x00	; 0
    b64c:	fc 01       	movw	r30, r24
    b64e:	73 e0       	ldi	r23, 0x03	; 3
    b650:	ee 0f       	add	r30, r30
    b652:	ff 1f       	adc	r31, r31
    b654:	7a 95       	dec	r23
    b656:	e1 f7       	brne	.-8      	; 0xb650 <Process_curve+0x320>
    b658:	e7 59       	subi	r30, 0x97	; 151
    b65a:	f7 4f       	sbci	r31, 0xF7	; 247
    b65c:	60 81       	ld	r22, Z
				end = Config.Curve[curve].Point7;
    b65e:	e3 e0       	ldi	r30, 0x03	; 3
    b660:	88 0f       	add	r24, r24
    b662:	99 1f       	adc	r25, r25
    b664:	ea 95       	dec	r30
    b666:	e1 f7       	brne	.-8      	; 0xb660 <Process_curve+0x330>
    b668:	fc 01       	movw	r30, r24
    b66a:	e6 59       	subi	r30, 0x96	; 150
    b66c:	f7 4f       	sbci	r31, 0xF7	; 247
    b66e:	ee ce       	rjmp	.-548    	; 0xb44c <Process_curve+0x11c>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b670:	35 e0       	ldi	r19, 0x05	; 5
    b672:	55 cf       	rjmp	.-342    	; 0xb51e <Process_curve+0x1ee>

0000b674 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    b674:	2f 92       	push	r2
    b676:	3f 92       	push	r3
    b678:	4f 92       	push	r4
    b67a:	5f 92       	push	r5
    b67c:	6f 92       	push	r6
    b67e:	7f 92       	push	r7
    b680:	8f 92       	push	r8
    b682:	9f 92       	push	r9
    b684:	af 92       	push	r10
    b686:	bf 92       	push	r11
    b688:	cf 92       	push	r12
    b68a:	df 92       	push	r13
    b68c:	ef 92       	push	r14
    b68e:	ff 92       	push	r15
    b690:	0f 93       	push	r16
    b692:	1f 93       	push	r17
    b694:	cf 93       	push	r28
    b696:	df 93       	push	r29
    b698:	cd b7       	in	r28, 0x3d	; 61
    b69a:	de b7       	in	r29, 0x3e	; 62
    b69c:	c2 57       	subi	r28, 0x72	; 114
    b69e:	d1 09       	sbc	r29, r1
    b6a0:	0f b6       	in	r0, 0x3f	; 63
    b6a2:	f8 94       	cli
    b6a4:	de bf       	out	0x3e, r29	; 62
    b6a6:	0f be       	out	0x3f, r0	; 63
    b6a8:	cd bf       	out	0x3d, r28	; 61
	int8_t	P1_acc_roll_volume_source = 0;
	int8_t	P1_gyro_roll_volume_source = 0;
	int8_t	P1_gyro_yaw_volume_source = 0;

	// Process curves
	P1_throttle = Process_curve(P1_THR_CURVE, MONOPOLAR, MonopolarThrottle);
    b6aa:	40 91 81 09 	lds	r20, 0x0981
    b6ae:	50 91 82 09 	lds	r21, 0x0982
    b6b2:	60 e0       	ldi	r22, 0x00	; 0
    b6b4:	80 e0       	ldi	r24, 0x00	; 0
    b6b6:	0e 94 98 59 	call	0xb330	; 0xb330 <Process_curve>
    b6ba:	1c 01       	movw	r2, r24
	P2_throttle = Process_curve(P2_THR_CURVE, MONOPOLAR, MonopolarThrottle);
    b6bc:	40 91 81 09 	lds	r20, 0x0981
    b6c0:	50 91 82 09 	lds	r21, 0x0982
    b6c4:	60 e0       	ldi	r22, 0x00	; 0
    b6c6:	81 e0       	ldi	r24, 0x01	; 1
    b6c8:	0e 94 98 59 	call	0xb330	; 0xb330 <Process_curve>
    b6cc:	7c 01       	movw	r14, r24
	P1_collective = Process_curve(P1_COLL_CURVE, BIPOLAR, RCinputs[THROTTLE]);
    b6ce:	40 91 83 09 	lds	r20, 0x0983
    b6d2:	50 91 84 09 	lds	r21, 0x0984
    b6d6:	61 e0       	ldi	r22, 0x01	; 1
    b6d8:	82 e0       	ldi	r24, 0x02	; 2
    b6da:	0e 94 98 59 	call	0xb330	; 0xb330 <Process_curve>
    b6de:	5c 01       	movw	r10, r24
	P2_collective = Process_curve(P2_COLL_CURVE, BIPOLAR, RCinputs[THROTTLE]);
    b6e0:	40 91 83 09 	lds	r20, 0x0983
    b6e4:	50 91 84 09 	lds	r21, 0x0984
    b6e8:	61 e0       	ldi	r22, 0x01	; 1
    b6ea:	83 e0       	ldi	r24, 0x03	; 3
    b6ec:	0e 94 98 59 	call	0xb330	; 0xb330 <Process_curve>
    b6f0:	6c 01       	movw	r12, r24

	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    b6f2:	60 91 21 06 	lds	r22, 0x0621
    b6f6:	70 91 22 06 	lds	r23, 0x0622
    b6fa:	80 91 23 06 	lds	r24, 0x0623
    b6fe:	90 91 24 06 	lds	r25, 0x0624
    b702:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    b706:	8b 01       	movw	r16, r22
    b708:	63 e0       	ldi	r22, 0x03	; 3
    b70a:	00 0f       	add	r16, r16
    b70c:	11 1f       	adc	r17, r17
    b70e:	6a 95       	dec	r22
    b710:	e1 f7       	brne	.-8      	; 0xb70a <ProcessMixer+0x96>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    b712:	60 91 25 06 	lds	r22, 0x0625
    b716:	70 91 26 06 	lds	r23, 0x0626
    b71a:	80 91 27 06 	lds	r24, 0x0627
    b71e:	90 91 28 06 	lds	r25, 0x0628
    b722:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    b726:	e3 e0       	ldi	r30, 0x03	; 3
    b728:	66 0f       	add	r22, r22
    b72a:	77 1f       	adc	r23, r23
    b72c:	ea 95       	dec	r30
    b72e:	e1 f7       	brne	.-8      	; 0xb728 <ProcessMixer+0xb4>
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b730:	3c a6       	std	Y+44, r3	; 0x2c
    b732:	2b a6       	std	Y+43, r2	; 0x2b
    b734:	80 91 56 05 	lds	r24, 0x0556
    b738:	90 91 57 05 	lds	r25, 0x0557
    b73c:	9e a7       	std	Y+46, r25	; 0x2e
    b73e:	8d a7       	std	Y+45, r24	; 0x2d
    b740:	80 91 52 05 	lds	r24, 0x0552
    b744:	90 91 53 05 	lds	r25, 0x0553
    b748:	98 ab       	std	Y+48, r25	; 0x30
    b74a:	8f a7       	std	Y+47, r24	; 0x2f
    b74c:	ba aa       	std	Y+50, r11	; 0x32
    b74e:	a9 aa       	std	Y+49, r10	; 0x31
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b750:	80 91 83 09 	lds	r24, 0x0983
    b754:	90 91 84 09 	lds	r25, 0x0984
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b758:	9c ab       	std	Y+52, r25	; 0x34
    b75a:	8b ab       	std	Y+51, r24	; 0x33
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b75c:	80 91 85 09 	lds	r24, 0x0985
    b760:	90 91 86 09 	lds	r25, 0x0986
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b764:	9e ab       	std	Y+54, r25	; 0x36
    b766:	8d ab       	std	Y+53, r24	; 0x35
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b768:	80 91 87 09 	lds	r24, 0x0987
    b76c:	90 91 88 09 	lds	r25, 0x0988
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b770:	98 af       	std	Y+56, r25	; 0x38
    b772:	8f ab       	std	Y+55, r24	; 0x37
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b774:	80 91 89 09 	lds	r24, 0x0989
    b778:	90 91 8a 09 	lds	r25, 0x098A
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b77c:	9a af       	std	Y+58, r25	; 0x3a
    b77e:	89 af       	std	Y+57, r24	; 0x39
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b780:	80 91 8b 09 	lds	r24, 0x098B
    b784:	90 91 8c 09 	lds	r25, 0x098C
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b788:	9c af       	std	Y+60, r25	; 0x3c
    b78a:	8b af       	std	Y+59, r24	; 0x3b
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b78c:	80 91 8d 09 	lds	r24, 0x098D
    b790:	90 91 8e 09 	lds	r25, 0x098E
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b794:	9e af       	std	Y+62, r25	; 0x3e
    b796:	8d af       	std	Y+61, r24	; 0x3d
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b798:	80 91 8f 09 	lds	r24, 0x098F
    b79c:	90 91 90 09 	lds	r25, 0x0990
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b7a0:	21 96       	adiw	r28, 0x01	; 1
    b7a2:	9f af       	std	Y+63, r25	; 0x3f
    b7a4:	8e af       	std	Y+62, r24	; 0x3e
    b7a6:	21 97       	sbiw	r28, 0x01	; 1
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b7a8:	80 91 91 09 	lds	r24, 0x0991
    b7ac:	90 91 92 09 	lds	r25, 0x0992
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b7b0:	23 96       	adiw	r28, 0x03	; 3
    b7b2:	9f af       	std	Y+63, r25	; 0x3f
    b7b4:	8e af       	std	Y+62, r24	; 0x3e
    b7b6:	23 97       	sbiw	r28, 0x03	; 3
    b7b8:	40 90 59 09 	lds	r4, 0x0959
    b7bc:	50 90 5a 09 	lds	r5, 0x095A
    b7c0:	25 96       	adiw	r28, 0x05	; 5
    b7c2:	5f ae       	std	Y+63, r5	; 0x3f
    b7c4:	4e ae       	std	Y+62, r4	; 0x3e
    b7c6:	25 97       	sbiw	r28, 0x05	; 5
    b7c8:	20 91 5b 09 	lds	r18, 0x095B
    b7cc:	30 91 5c 09 	lds	r19, 0x095C
    b7d0:	69 96       	adiw	r28, 0x19	; 25
    b7d2:	3f af       	std	Y+63, r19	; 0x3f
    b7d4:	2e af       	std	Y+62, r18	; 0x3e
    b7d6:	69 97       	sbiw	r28, 0x19	; 25
    b7d8:	27 96       	adiw	r28, 0x07	; 7
    b7da:	3f af       	std	Y+63, r19	; 0x3f
    b7dc:	2e af       	std	Y+62, r18	; 0x3e
    b7de:	27 97       	sbiw	r28, 0x07	; 7
    b7e0:	20 91 5d 09 	lds	r18, 0x095D
    b7e4:	30 91 5e 09 	lds	r19, 0x095E
    b7e8:	6b 96       	adiw	r28, 0x1b	; 27
    b7ea:	3f af       	std	Y+63, r19	; 0x3f
    b7ec:	2e af       	std	Y+62, r18	; 0x3e
    b7ee:	6b 97       	sbiw	r28, 0x1b	; 27
    b7f0:	29 96       	adiw	r28, 0x09	; 9
    b7f2:	3f af       	std	Y+63, r19	; 0x3f
    b7f4:	2e af       	std	Y+62, r18	; 0x3e
    b7f6:	29 97       	sbiw	r28, 0x09	; 9
    b7f8:	2b 96       	adiw	r28, 0x0b	; 11
    b7fa:	1f af       	std	Y+63, r17	; 0x3f
    b7fc:	0e af       	std	Y+62, r16	; 0x3e
    b7fe:	2b 97       	sbiw	r28, 0x0b	; 11
    b800:	2d 96       	adiw	r28, 0x0d	; 13
    b802:	7f af       	std	Y+63, r23	; 0x3f
    b804:	6e af       	std	Y+62, r22	; 0x3e
    b806:	2d 97       	sbiw	r28, 0x0d	; 13
    b808:	80 91 65 09 	lds	r24, 0x0965
    b80c:	90 91 66 09 	lds	r25, 0x0966
    b810:	2f 96       	adiw	r28, 0x0f	; 15
    b812:	9f af       	std	Y+63, r25	; 0x3f
    b814:	8e af       	std	Y+62, r24	; 0x3e
    b816:	2f 97       	sbiw	r28, 0x0f	; 15
    b818:	80 91 67 09 	lds	r24, 0x0967
    b81c:	90 91 68 09 	lds	r25, 0x0968
    b820:	61 96       	adiw	r28, 0x11	; 17
    b822:	9f af       	std	Y+63, r25	; 0x3f
    b824:	8e af       	std	Y+62, r24	; 0x3e
    b826:	61 97       	sbiw	r28, 0x11	; 17
    b828:	80 91 69 09 	lds	r24, 0x0969
    b82c:	90 91 6a 09 	lds	r25, 0x096A
    b830:	63 96       	adiw	r28, 0x13	; 19
    b832:	9f af       	std	Y+63, r25	; 0x3f
    b834:	8e af       	std	Y+62, r24	; 0x3e
    b836:	63 97       	sbiw	r28, 0x13	; 19
    b838:	65 96       	adiw	r28, 0x15	; 21
    b83a:	1f ae       	std	Y+63, r1	; 0x3f
    b83c:	1e ae       	std	Y+62, r1	; 0x3e
    b83e:	65 97       	sbiw	r28, 0x15	; 21
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b840:	fa 82       	std	Y+2, r15	; 0x02
    b842:	e9 82       	std	Y+1, r14	; 0x01
    b844:	80 91 54 05 	lds	r24, 0x0554
    b848:	90 91 55 05 	lds	r25, 0x0555
    b84c:	9c 83       	std	Y+4, r25	; 0x04
    b84e:	8b 83       	std	Y+3, r24	; 0x03
    b850:	80 91 50 05 	lds	r24, 0x0550
    b854:	90 91 51 05 	lds	r25, 0x0551
    b858:	9e 83       	std	Y+6, r25	; 0x06
    b85a:	8d 83       	std	Y+5, r24	; 0x05
    b85c:	d8 86       	std	Y+8, r13	; 0x08
    b85e:	cf 82       	std	Y+7, r12	; 0x07
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b860:	80 91 83 09 	lds	r24, 0x0983
    b864:	90 91 84 09 	lds	r25, 0x0984
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b868:	9a 87       	std	Y+10, r25	; 0x0a
    b86a:	89 87       	std	Y+9, r24	; 0x09
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b86c:	80 91 85 09 	lds	r24, 0x0985
    b870:	90 91 86 09 	lds	r25, 0x0986
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b874:	9c 87       	std	Y+12, r25	; 0x0c
    b876:	8b 87       	std	Y+11, r24	; 0x0b
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b878:	80 91 87 09 	lds	r24, 0x0987
    b87c:	90 91 88 09 	lds	r25, 0x0988
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b880:	9e 87       	std	Y+14, r25	; 0x0e
    b882:	8d 87       	std	Y+13, r24	; 0x0d
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b884:	80 91 89 09 	lds	r24, 0x0989
    b888:	90 91 8a 09 	lds	r25, 0x098A
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b88c:	98 8b       	std	Y+16, r25	; 0x10
    b88e:	8f 87       	std	Y+15, r24	; 0x0f
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b890:	80 91 8b 09 	lds	r24, 0x098B
    b894:	90 91 8c 09 	lds	r25, 0x098C
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b898:	9a 8b       	std	Y+18, r25	; 0x12
    b89a:	89 8b       	std	Y+17, r24	; 0x11
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b89c:	80 91 8d 09 	lds	r24, 0x098D
    b8a0:	90 91 8e 09 	lds	r25, 0x098E
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b8a4:	9c 8b       	std	Y+20, r25	; 0x14
    b8a6:	8b 8b       	std	Y+19, r24	; 0x13
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b8a8:	80 91 8f 09 	lds	r24, 0x098F
    b8ac:	90 91 90 09 	lds	r25, 0x0990
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b8b0:	9e 8b       	std	Y+22, r25	; 0x16
    b8b2:	8d 8b       	std	Y+21, r24	; 0x15
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b8b4:	80 91 91 09 	lds	r24, 0x0991
    b8b8:	90 91 92 09 	lds	r25, 0x0992
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b8bc:	98 8f       	std	Y+24, r25	; 0x18
    b8be:	8f 8b       	std	Y+23, r24	; 0x17
    b8c0:	20 91 5f 09 	lds	r18, 0x095F
    b8c4:	30 91 60 09 	lds	r19, 0x0960
    b8c8:	6d 96       	adiw	r28, 0x1d	; 29
    b8ca:	3f af       	std	Y+63, r19	; 0x3f
    b8cc:	2e af       	std	Y+62, r18	; 0x3e
    b8ce:	6d 97       	sbiw	r28, 0x1d	; 29
    b8d0:	3a 8f       	std	Y+26, r19	; 0x1a
    b8d2:	29 8f       	std	Y+25, r18	; 0x19
    b8d4:	80 91 61 09 	lds	r24, 0x0961
    b8d8:	90 91 62 09 	lds	r25, 0x0962
    b8dc:	9c 8f       	std	Y+28, r25	; 0x1c
    b8de:	8b 8f       	std	Y+27, r24	; 0x1b
    b8e0:	80 91 63 09 	lds	r24, 0x0963
    b8e4:	90 91 64 09 	lds	r25, 0x0964
    b8e8:	9e 8f       	std	Y+30, r25	; 0x1e
    b8ea:	8d 8f       	std	Y+29, r24	; 0x1d
    b8ec:	18 a3       	std	Y+32, r17	; 0x20
    b8ee:	0f 8f       	std	Y+31, r16	; 0x1f
    b8f0:	7a a3       	std	Y+34, r23	; 0x22
    b8f2:	69 a3       	std	Y+33, r22	; 0x21
    b8f4:	80 91 6b 09 	lds	r24, 0x096B
    b8f8:	90 91 6c 09 	lds	r25, 0x096C
    b8fc:	9c a3       	std	Y+36, r25	; 0x24
    b8fe:	8b a3       	std	Y+35, r24	; 0x23
    b900:	80 91 6d 09 	lds	r24, 0x096D
    b904:	90 91 6e 09 	lds	r25, 0x096E
    b908:	9e a3       	std	Y+38, r25	; 0x26
    b90a:	8d a3       	std	Y+37, r24	; 0x25
    b90c:	80 91 6f 09 	lds	r24, 0x096F
    b910:	90 91 70 09 	lds	r25, 0x0970
    b914:	98 a7       	std	Y+40, r25	; 0x28
    b916:	8f a3       	std	Y+39, r24	; 0x27
    b918:	1a a6       	std	Y+42, r1	; 0x2a
    b91a:	19 a6       	std	Y+41, r1	; 0x29
	//************************************************************
	// Generic curves
	//************************************************************
	
	// Only process generic curves if they have a source selected
	if (Config.Curve[GEN_CURVE_C].channel != NOMIX)
    b91c:	00 91 8b 08 	lds	r16, 0x088B
    b920:	04 31       	cpi	r16, 0x14	; 20
    b922:	f9 f0       	breq	.+62     	; 0xb962 <ProcessMixer+0x2ee>
	{
		P1_curve_C = Process_curve(GEN_CURVE_C, BIPOLAR, UniversalP1[Config.Curve[GEN_CURVE_C].channel]);		
    b924:	00 0f       	add	r16, r16
    b926:	11 0b       	sbc	r17, r17
    b928:	41 e0       	ldi	r20, 0x01	; 1
    b92a:	50 e0       	ldi	r21, 0x00	; 0
    b92c:	4c 0f       	add	r20, r28
    b92e:	5d 1f       	adc	r21, r29
    b930:	04 0f       	add	r16, r20
    b932:	15 1f       	adc	r17, r21
    b934:	f8 01       	movw	r30, r16
    b936:	42 a5       	ldd	r20, Z+42	; 0x2a
    b938:	53 a5       	ldd	r21, Z+43	; 0x2b
    b93a:	61 e0       	ldi	r22, 0x01	; 1
    b93c:	84 e0       	ldi	r24, 0x04	; 4
    b93e:	0e 94 98 59 	call	0xb330	; 0xb330 <Process_curve>
    b942:	90 93 57 05 	sts	0x0557, r25
    b946:	80 93 56 05 	sts	0x0556, r24
		P2_curve_C = Process_curve(GEN_CURVE_C, BIPOLAR, UniversalP2[Config.Curve[GEN_CURVE_C].channel]);	
    b94a:	f8 01       	movw	r30, r16
    b94c:	40 81       	ld	r20, Z
    b94e:	51 81       	ldd	r21, Z+1	; 0x01
    b950:	61 e0       	ldi	r22, 0x01	; 1
    b952:	84 e0       	ldi	r24, 0x04	; 4
    b954:	0e 94 98 59 	call	0xb330	; 0xb330 <Process_curve>
    b958:	90 93 55 05 	sts	0x0555, r25
    b95c:	80 93 54 05 	sts	0x0554, r24
    b960:	04 c0       	rjmp	.+8      	; 0xb96a <ProcessMixer+0x2f6>
	}
	else
	{
		P2_curve_C = 0;
    b962:	10 92 55 05 	sts	0x0555, r1
    b966:	10 92 54 05 	sts	0x0554, r1
	}
	
	if (Config.Curve[GEN_CURVE_D].channel != NOMIX)
    b96a:	00 91 93 08 	lds	r16, 0x0893
    b96e:	04 31       	cpi	r16, 0x14	; 20
    b970:	f9 f0       	breq	.+62     	; 0xb9b0 <ProcessMixer+0x33c>
	{
		P1_curve_D = Process_curve(GEN_CURVE_D, BIPOLAR, UniversalP1[Config.Curve[GEN_CURVE_D].channel]);
    b972:	00 0f       	add	r16, r16
    b974:	11 0b       	sbc	r17, r17
    b976:	21 e0       	ldi	r18, 0x01	; 1
    b978:	30 e0       	ldi	r19, 0x00	; 0
    b97a:	2c 0f       	add	r18, r28
    b97c:	3d 1f       	adc	r19, r29
    b97e:	02 0f       	add	r16, r18
    b980:	13 1f       	adc	r17, r19
    b982:	f8 01       	movw	r30, r16
    b984:	42 a5       	ldd	r20, Z+42	; 0x2a
    b986:	53 a5       	ldd	r21, Z+43	; 0x2b
    b988:	61 e0       	ldi	r22, 0x01	; 1
    b98a:	85 e0       	ldi	r24, 0x05	; 5
    b98c:	0e 94 98 59 	call	0xb330	; 0xb330 <Process_curve>
    b990:	90 93 53 05 	sts	0x0553, r25
    b994:	80 93 52 05 	sts	0x0552, r24
		P2_curve_D = Process_curve(GEN_CURVE_D, BIPOLAR, UniversalP2[Config.Curve[GEN_CURVE_D].channel]);
    b998:	f8 01       	movw	r30, r16
    b99a:	40 81       	ld	r20, Z
    b99c:	51 81       	ldd	r21, Z+1	; 0x01
    b99e:	61 e0       	ldi	r22, 0x01	; 1
    b9a0:	85 e0       	ldi	r24, 0x05	; 5
    b9a2:	0e 94 98 59 	call	0xb330	; 0xb330 <Process_curve>
    b9a6:	90 93 51 05 	sts	0x0551, r25
    b9aa:	80 93 50 05 	sts	0x0550, r24
    b9ae:	04 c0       	rjmp	.+8      	; 0xb9b8 <ProcessMixer+0x344>
	}
	else
	{
		P2_curve_D = 0;
    b9b0:	10 92 51 05 	sts	0x0551, r1
    b9b4:	10 92 50 05 	sts	0x0550, r1
		//************************************************************ 

		// If the user wants earth reference for tail-sitter hover, swap the related stick sources.
		// The secret is understanding WHICH STICK is controlling movement on the AXIS in the selected REFERENCE
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    b9b8:	20 91 d9 06 	lds	r18, 0x06D9
    b9bc:	af 96       	adiw	r28, 0x2f	; 47
    b9be:	2f af       	std	Y+63, r18	; 0x3f
    b9c0:	af 97       	sbiw	r28, 0x2f	; 47
			P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
			P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;
		}
		
		// P1 gyros
		if (transition < 100)
    b9c2:	a0 90 38 05 	lds	r10, 0x0538
    b9c6:	b0 90 39 05 	lds	r11, 0x0539
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    b9ca:	44 27       	eor	r20, r20
    b9cc:	55 27       	eor	r21, r21
    b9ce:	44 19       	sub	r20, r4
    b9d0:	55 09       	sbc	r21, r5
    b9d2:	e1 96       	adiw	r28, 0x31	; 49
    b9d4:	5f af       	std	Y+63, r21	; 0x3f
    b9d6:	4e af       	std	Y+62, r20	; 0x3e
    b9d8:	e1 97       	sbiw	r28, 0x31	; 49
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    b9da:	6d 96       	adiw	r28, 0x1d	; 29
    b9dc:	2e ad       	ldd	r18, Y+62	; 0x3e
    b9de:	3f ad       	ldd	r19, Y+63	; 0x3f
    b9e0:	6d 97       	sbiw	r28, 0x1d	; 29
    b9e2:	31 95       	neg	r19
    b9e4:	21 95       	neg	r18
    b9e6:	31 09       	sbc	r19, r1
    b9e8:	e3 96       	adiw	r28, 0x33	; 51
    b9ea:	3f af       	std	Y+63, r19	; 0x3f
    b9ec:	2e af       	std	Y+62, r18	; 0x3e
    b9ee:	e3 97       	sbiw	r28, 0x33	; 51
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    b9f0:	40 91 61 09 	lds	r20, 0x0961
    b9f4:	50 91 62 09 	lds	r21, 0x0962
    b9f8:	6f 96       	adiw	r28, 0x1f	; 31
    b9fa:	5f af       	std	Y+63, r21	; 0x3f
    b9fc:	4e af       	std	Y+62, r20	; 0x3e
    b9fe:	6f 97       	sbiw	r28, 0x1f	; 31
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    ba00:	20 91 63 09 	lds	r18, 0x0963
    ba04:	30 91 64 09 	lds	r19, 0x0964
    ba08:	a1 96       	adiw	r28, 0x21	; 33
    ba0a:	3f af       	std	Y+63, r19	; 0x3f
    ba0c:	2e af       	std	Y+62, r18	; 0x3e
    ba0e:	a1 97       	sbiw	r28, 0x21	; 33
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    ba10:	40 91 65 09 	lds	r20, 0x0965
    ba14:	50 91 66 09 	lds	r21, 0x0966
    ba18:	a3 96       	adiw	r28, 0x23	; 35
    ba1a:	5f af       	std	Y+63, r21	; 0x3f
    ba1c:	4e af       	std	Y+62, r20	; 0x3e
    ba1e:	a3 97       	sbiw	r28, 0x23	; 35
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    ba20:	20 91 67 09 	lds	r18, 0x0967
    ba24:	30 91 68 09 	lds	r19, 0x0968
    ba28:	a5 96       	adiw	r28, 0x25	; 37
    ba2a:	3f af       	std	Y+63, r19	; 0x3f
    ba2c:	2e af       	std	Y+62, r18	; 0x3e
    ba2e:	a5 97       	sbiw	r28, 0x25	; 37
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    ba30:	40 91 69 09 	lds	r20, 0x0969
    ba34:	50 91 6a 09 	lds	r21, 0x096A
    ba38:	a7 96       	adiw	r28, 0x27	; 39
    ba3a:	5f af       	std	Y+63, r21	; 0x3f
    ba3c:	4e af       	std	Y+62, r20	; 0x3e
    ba3e:	a7 97       	sbiw	r28, 0x27	; 39
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    ba40:	20 91 6b 09 	lds	r18, 0x096B
    ba44:	30 91 6c 09 	lds	r19, 0x096C
    ba48:	a9 96       	adiw	r28, 0x29	; 41
    ba4a:	3f af       	std	Y+63, r19	; 0x3f
    ba4c:	2e af       	std	Y+62, r18	; 0x3e
    ba4e:	a9 97       	sbiw	r28, 0x29	; 41

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    ba50:	40 91 6d 09 	lds	r20, 0x096D
    ba54:	50 91 6e 09 	lds	r21, 0x096E
    ba58:	ab 96       	adiw	r28, 0x2b	; 43
    ba5a:	5f af       	std	Y+63, r21	; 0x3f
    ba5c:	4e af       	std	Y+62, r20	; 0x3e
    ba5e:	ab 97       	sbiw	r28, 0x2b	; 43
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    ba60:	20 91 6f 09 	lds	r18, 0x096F
    ba64:	30 91 70 09 	lds	r19, 0x0970
    ba68:	ad 96       	adiw	r28, 0x2d	; 45
    ba6a:	3f af       	std	Y+63, r19	; 0x3f
    ba6c:	2e af       	std	Y+62, r18	; 0x3e
    ba6e:	ad 97       	sbiw	r28, 0x2d	; 45
    ba70:	09 e3       	ldi	r16, 0x39	; 57
    ba72:	16 e0       	ldi	r17, 0x06	; 6
    ba74:	38 e0       	ldi	r19, 0x08	; 8
    ba76:	ae 96       	adiw	r28, 0x2e	; 46
    ba78:	3f af       	std	Y+63, r19	; 0x3f
    ba7a:	ae 97       	sbiw	r28, 0x2e	; 46
    ba7c:	d8 01       	movw	r26, r16
    ba7e:	ad 54       	subi	r26, 0x4D	; 77
    ba80:	bf 4f       	sbci	r27, 0xFF	; 255
    ba82:	f8 01       	movw	r30, r16
    ba84:	e9 54       	subi	r30, 0x49	; 73
    ba86:	ff 4f       	sbci	r31, 0xFF	; 255
		//************************************************************ 

		// If the user wants earth reference for tail-sitter hover, swap the related stick sources.
		// The secret is understanding WHICH STICK is controlling movement on the AXIS in the selected REFERENCE
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    ba88:	af 96       	adiw	r28, 0x2f	; 47
    ba8a:	4f ad       	ldd	r20, Y+63	; 0x3f
    ba8c:	af 97       	sbiw	r28, 0x2f	; 47
    ba8e:	44 23       	and	r20, r20
    ba90:	49 f0       	breq	.+18     	; 0xbaa4 <ProcessMixer+0x430>
		{
			// EARTH-Referenced tail-sitter
			if (Config.P1_Reference == EARTH)
    ba92:	41 30       	cpi	r20, 0x01	; 1
    ba94:	39 f0       	breq	.+14     	; 0xbaa4 <ProcessMixer+0x430>
				P1_gyro_yaw_volume_source = Config.Channel[i].P1_rudder_volume;		// These are always the same
			}
			// MODEL-Referenced tail-sitter
			else
			{
				P1_acc_roll_volume_source = Config.Channel[i].P1_rudder_volume;
    ba96:	70 80       	ld	r7, Z
				P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
    ba98:	5c 91       	ld	r21, X
    ba9a:	66 96       	adiw	r28, 0x16	; 22
    ba9c:	5f af       	std	Y+63, r21	; 0x3f
    ba9e:	66 97       	sbiw	r28, 0x16	; 22
				P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;			
    baa0:	67 2c       	mov	r6, r7
    baa2:	05 c0       	rjmp	.+10     	; 0xbaae <ProcessMixer+0x43a>
			}
		}
		// Normal case
		else
		{
			P1_acc_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
    baa4:	7c 90       	ld	r7, X
			P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
			P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;
    baa6:	60 80       	ld	r6, Z
		}
		// Normal case
		else
		{
			P1_acc_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
			P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
    baa8:	66 96       	adiw	r28, 0x16	; 22
    baaa:	7f ae       	std	Y+63, r7	; 0x3f
    baac:	66 97       	sbiw	r28, 0x16	; 22
			P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;
		}
		
		// P1 gyros
		if (transition < 100)
    baae:	84 e6       	ldi	r24, 0x64	; 100
    bab0:	a8 16       	cp	r10, r24
    bab2:	b1 04       	cpc	r11, r1
    bab4:	0c f0       	brlt	.+2      	; 0xbab8 <ProcessMixer+0x444>
    bab6:	73 c0       	rjmp	.+230    	; 0xbb9e <ProcessMixer+0x52a>
    bab8:	f8 01       	movw	r30, r16
    baba:	e7 54       	subi	r30, 0x47	; 71
    babc:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    babe:	80 81       	ld	r24, Z
    bac0:	81 30       	cpi	r24, 0x01	; 1
    bac2:	89 f0       	breq	.+34     	; 0xbae6 <ProcessMixer+0x472>
    bac4:	82 30       	cpi	r24, 0x02	; 2
    bac6:	c9 f4       	brne	.+50     	; 0xbafa <ProcessMixer+0x486>
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], P1_gyro_roll_volume_source * 5); 
    bac8:	66 96       	adiw	r28, 0x16	; 22
    baca:	3f ad       	ldd	r19, Y+63	; 0x3f
    bacc:	66 97       	sbiw	r28, 0x16	; 22
    bace:	45 e0       	ldi	r20, 0x05	; 5
    bad0:	34 02       	muls	r19, r20
    bad2:	b0 01       	movw	r22, r0
    bad4:	11 24       	eor	r1, r1
    bad6:	c2 01       	movw	r24, r4
    bad8:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    badc:	88 24       	eor	r8, r8
    bade:	99 24       	eor	r9, r9
    bae0:	88 1a       	sub	r8, r24
    bae2:	99 0a       	sbc	r9, r25
					break;
    bae4:	0e c0       	rjmp	.+28     	; 0xbb02 <ProcessMixer+0x48e>
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (P1_gyro_roll_volume_source < 0 )
    bae6:	66 96       	adiw	r28, 0x16	; 22
    bae8:	2f ad       	ldd	r18, Y+63	; 0x3f
    baea:	66 97       	sbiw	r28, 0x16	; 22
    baec:	27 fd       	sbrc	r18, 7
    baee:	08 c0       	rjmp	.+16     	; 0xbb00 <ProcessMixer+0x48c>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    baf0:	e1 96       	adiw	r28, 0x31	; 49
    baf2:	8e ac       	ldd	r8, Y+62	; 0x3e
    baf4:	9f ac       	ldd	r9, Y+63	; 0x3f
    baf6:	e1 97       	sbiw	r28, 0x31	; 49
    baf8:	04 c0       	rjmp	.+8      	; 0xbb02 <ProcessMixer+0x48e>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    bafa:	81 2c       	mov	r8, r1
    bafc:	91 2c       	mov	r9, r1
    bafe:	01 c0       	rjmp	.+2      	; 0xbb02 <ProcessMixer+0x48e>
				case OFF:
					break;
				case ON:
					if (P1_gyro_roll_volume_source < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    bb00:	42 01       	movw	r8, r4
    bb02:	f8 01       	movw	r30, r16
    bb04:	e5 54       	subi	r30, 0x45	; 69
    bb06:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    bb08:	80 81       	ld	r24, Z
    bb0a:	81 30       	cpi	r24, 0x01	; 1
    bb0c:	99 f0       	breq	.+38     	; 0xbb34 <ProcessMixer+0x4c0>
    bb0e:	82 30       	cpi	r24, 0x02	; 2
    bb10:	01 f5       	brne	.+64     	; 0xbb52 <ProcessMixer+0x4de>
    bb12:	f8 01       	movw	r30, r16
    bb14:	eb 54       	subi	r30, 0x4B	; 75
    bb16:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    bb18:	60 81       	ld	r22, Z
    bb1a:	35 e0       	ldi	r19, 0x05	; 5
    bb1c:	63 02       	muls	r22, r19
    bb1e:	b0 01       	movw	r22, r0
    bb20:	11 24       	eor	r1, r1
    bb22:	69 96       	adiw	r28, 0x19	; 25
    bb24:	8e ad       	ldd	r24, Y+62	; 0x3e
    bb26:	9f ad       	ldd	r25, Y+63	; 0x3f
    bb28:	69 97       	sbiw	r28, 0x19	; 25
    bb2a:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    bb2e:	88 0e       	add	r8, r24
    bb30:	99 1e       	adc	r9, r25
					break;
    bb32:	0f c0       	rjmp	.+30     	; 0xbb52 <ProcessMixer+0x4de>
    bb34:	f8 01       	movw	r30, r16
    bb36:	eb 54       	subi	r30, 0x4B	; 75
    bb38:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    bb3a:	80 81       	ld	r24, Z
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    bb3c:	69 96       	adiw	r28, 0x19	; 25
    bb3e:	2e ad       	ldd	r18, Y+62	; 0x3e
    bb40:	3f ad       	ldd	r19, Y+63	; 0x3f
    bb42:	69 97       	sbiw	r28, 0x19	; 25
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    bb44:	87 ff       	sbrs	r24, 7
    bb46:	03 c0       	rjmp	.+6      	; 0xbb4e <ProcessMixer+0x4da>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    bb48:	82 1a       	sub	r8, r18
    bb4a:	93 0a       	sbc	r9, r19
    bb4c:	02 c0       	rjmp	.+4      	; 0xbb52 <ProcessMixer+0x4de>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    bb4e:	82 0e       	add	r8, r18
    bb50:	93 1e       	adc	r9, r19
    bb52:	f8 01       	movw	r30, r16
    bb54:	e3 54       	subi	r30, 0x43	; 67
    bb56:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    bb58:	80 81       	ld	r24, Z
    bb5a:	81 30       	cpi	r24, 0x01	; 1
    bb5c:	81 f0       	breq	.+32     	; 0xbb7e <ProcessMixer+0x50a>
    bb5e:	82 30       	cpi	r24, 0x02	; 2
    bb60:	c9 f4       	brne	.+50     	; 0xbb94 <ProcessMixer+0x520>
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], P1_gyro_yaw_volume_source * 5);
    bb62:	36 2d       	mov	r19, r6
    bb64:	45 e0       	ldi	r20, 0x05	; 5
    bb66:	34 02       	muls	r19, r20
    bb68:	b0 01       	movw	r22, r0
    bb6a:	11 24       	eor	r1, r1
    bb6c:	6b 96       	adiw	r28, 0x1b	; 27
    bb6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    bb70:	9f ad       	ldd	r25, Y+63	; 0x3f
    bb72:	6b 97       	sbiw	r28, 0x1b	; 27
    bb74:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    bb78:	88 0e       	add	r8, r24
    bb7a:	99 1e       	adc	r9, r25
					break;
    bb7c:	0b c0       	rjmp	.+22     	; 0xbb94 <ProcessMixer+0x520>
				case OFF:
					break;
				case ON:
					if (P1_gyro_yaw_volume_source < 0 )
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    bb7e:	6b 96       	adiw	r28, 0x1b	; 27
    bb80:	2e ad       	ldd	r18, Y+62	; 0x3e
    bb82:	3f ad       	ldd	r19, Y+63	; 0x3f
    bb84:	6b 97       	sbiw	r28, 0x1b	; 27
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (P1_gyro_yaw_volume_source < 0 )
    bb86:	67 fe       	sbrs	r6, 7
    bb88:	03 c0       	rjmp	.+6      	; 0xbb90 <ProcessMixer+0x51c>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    bb8a:	82 1a       	sub	r8, r18
    bb8c:	93 0a       	sbc	r9, r19
    bb8e:	02 c0       	rjmp	.+4      	; 0xbb94 <ProcessMixer+0x520>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    bb90:	82 0e       	add	r8, r18
    bb92:	93 1e       	adc	r9, r19
					break;
			}
		}

		// P2 gyros
		if (transition > 0)
    bb94:	1a 14       	cp	r1, r10
    bb96:	1b 04       	cpc	r1, r11
    bb98:	0c f0       	brlt	.+2      	; 0xbb9c <ProcessMixer+0x528>
    bb9a:	8e c0       	rjmp	.+284    	; 0xbcb8 <ProcessMixer+0x644>
    bb9c:	02 c0       	rjmp	.+4      	; 0xbba2 <ProcessMixer+0x52e>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    bb9e:	81 2c       	mov	r8, r1
    bba0:	91 2c       	mov	r9, r1
    bba2:	f8 01       	movw	r30, r16
    bba4:	e6 54       	subi	r30, 0x46	; 70
    bba6:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (transition > 0)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    bba8:	80 81       	ld	r24, Z
    bbaa:	81 30       	cpi	r24, 0x01	; 1
    bbac:	a9 f0       	breq	.+42     	; 0xbbd8 <ProcessMixer+0x564>
    bbae:	82 30       	cpi	r24, 0x02	; 2
    bbb0:	f1 f4       	brne	.+60     	; 0xbbee <ProcessMixer+0x57a>
    bbb2:	f8 01       	movw	r30, r16
    bbb4:	ec 54       	subi	r30, 0x4C	; 76
    bbb6:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    bbb8:	60 81       	ld	r22, Z
    bbba:	55 e0       	ldi	r21, 0x05	; 5
    bbbc:	65 02       	muls	r22, r21
    bbbe:	b0 01       	movw	r22, r0
    bbc0:	11 24       	eor	r1, r1
    bbc2:	6d 96       	adiw	r28, 0x1d	; 29
    bbc4:	8e ad       	ldd	r24, Y+62	; 0x3e
    bbc6:	9f ad       	ldd	r25, Y+63	; 0x3f
    bbc8:	6d 97       	sbiw	r28, 0x1d	; 29
    bbca:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    bbce:	cc 24       	eor	r12, r12
    bbd0:	dd 24       	eor	r13, r13
    bbd2:	c8 1a       	sub	r12, r24
    bbd4:	d9 0a       	sbc	r13, r25
					break;
    bbd6:	12 c0       	rjmp	.+36     	; 0xbbfc <ProcessMixer+0x588>
    bbd8:	f8 01       	movw	r30, r16
    bbda:	ec 54       	subi	r30, 0x4C	; 76
    bbdc:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    bbde:	80 81       	ld	r24, Z
    bbe0:	87 ff       	sbrs	r24, 7
    bbe2:	08 c0       	rjmp	.+16     	; 0xbbf4 <ProcessMixer+0x580>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    bbe4:	6d 96       	adiw	r28, 0x1d	; 29
    bbe6:	ce ac       	ldd	r12, Y+62	; 0x3e
    bbe8:	df ac       	ldd	r13, Y+63	; 0x3f
    bbea:	6d 97       	sbiw	r28, 0x1d	; 29
    bbec:	07 c0       	rjmp	.+14     	; 0xbbfc <ProcessMixer+0x588>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    bbee:	c1 2c       	mov	r12, r1
    bbf0:	d1 2c       	mov	r13, r1
    bbf2:	04 c0       	rjmp	.+8      	; 0xbbfc <ProcessMixer+0x588>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    bbf4:	e3 96       	adiw	r28, 0x33	; 51
    bbf6:	ce ac       	ldd	r12, Y+62	; 0x3e
    bbf8:	df ac       	ldd	r13, Y+63	; 0x3f
    bbfa:	e3 97       	sbiw	r28, 0x33	; 51
    bbfc:	f8 01       	movw	r30, r16
    bbfe:	e4 54       	subi	r30, 0x44	; 68
    bc00:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    bc02:	80 81       	ld	r24, Z
    bc04:	81 30       	cpi	r24, 0x01	; 1
    bc06:	99 f0       	breq	.+38     	; 0xbc2e <ProcessMixer+0x5ba>
    bc08:	82 30       	cpi	r24, 0x02	; 2
    bc0a:	21 f5       	brne	.+72     	; 0xbc54 <ProcessMixer+0x5e0>
    bc0c:	f8 01       	movw	r30, r16
    bc0e:	ea 54       	subi	r30, 0x4A	; 74
    bc10:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    bc12:	60 81       	ld	r22, Z
    bc14:	55 e0       	ldi	r21, 0x05	; 5
    bc16:	65 02       	muls	r22, r21
    bc18:	b0 01       	movw	r22, r0
    bc1a:	11 24       	eor	r1, r1
    bc1c:	6f 96       	adiw	r28, 0x1f	; 31
    bc1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    bc20:	9f ad       	ldd	r25, Y+63	; 0x3f
    bc22:	6f 97       	sbiw	r28, 0x1f	; 31
    bc24:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    bc28:	c8 0e       	add	r12, r24
    bc2a:	d9 1e       	adc	r13, r25
					break;
    bc2c:	13 c0       	rjmp	.+38     	; 0xbc54 <ProcessMixer+0x5e0>
    bc2e:	f8 01       	movw	r30, r16
    bc30:	ea 54       	subi	r30, 0x4A	; 74
    bc32:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    bc34:	80 81       	ld	r24, Z
    bc36:	87 ff       	sbrs	r24, 7
    bc38:	07 c0       	rjmp	.+14     	; 0xbc48 <ProcessMixer+0x5d4>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    bc3a:	6f 96       	adiw	r28, 0x1f	; 31
    bc3c:	2e ad       	ldd	r18, Y+62	; 0x3e
    bc3e:	3f ad       	ldd	r19, Y+63	; 0x3f
    bc40:	6f 97       	sbiw	r28, 0x1f	; 31
    bc42:	c2 1a       	sub	r12, r18
    bc44:	d3 0a       	sbc	r13, r19
    bc46:	06 c0       	rjmp	.+12     	; 0xbc54 <ProcessMixer+0x5e0>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    bc48:	6f 96       	adiw	r28, 0x1f	; 31
    bc4a:	4e ad       	ldd	r20, Y+62	; 0x3e
    bc4c:	5f ad       	ldd	r21, Y+63	; 0x3f
    bc4e:	6f 97       	sbiw	r28, 0x1f	; 31
    bc50:	c4 0e       	add	r12, r20
    bc52:	d5 1e       	adc	r13, r21
    bc54:	f8 01       	movw	r30, r16
    bc56:	e2 54       	subi	r30, 0x42	; 66
    bc58:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    bc5a:	80 81       	ld	r24, Z
    bc5c:	81 30       	cpi	r24, 0x01	; 1
    bc5e:	99 f0       	breq	.+38     	; 0xbc86 <ProcessMixer+0x612>
    bc60:	82 30       	cpi	r24, 0x02	; 2
    bc62:	21 f5       	brne	.+72     	; 0xbcac <ProcessMixer+0x638>
    bc64:	f8 01       	movw	r30, r16
    bc66:	e8 54       	subi	r30, 0x48	; 72
    bc68:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    bc6a:	60 81       	ld	r22, Z
    bc6c:	55 e0       	ldi	r21, 0x05	; 5
    bc6e:	65 02       	muls	r22, r21
    bc70:	b0 01       	movw	r22, r0
    bc72:	11 24       	eor	r1, r1
    bc74:	a1 96       	adiw	r28, 0x21	; 33
    bc76:	8e ad       	ldd	r24, Y+62	; 0x3e
    bc78:	9f ad       	ldd	r25, Y+63	; 0x3f
    bc7a:	a1 97       	sbiw	r28, 0x21	; 33
    bc7c:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    bc80:	c8 0e       	add	r12, r24
    bc82:	d9 1e       	adc	r13, r25
					break;
    bc84:	13 c0       	rjmp	.+38     	; 0xbcac <ProcessMixer+0x638>
    bc86:	f8 01       	movw	r30, r16
    bc88:	e8 54       	subi	r30, 0x48	; 72
    bc8a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    bc8c:	80 81       	ld	r24, Z
    bc8e:	87 ff       	sbrs	r24, 7
    bc90:	07 c0       	rjmp	.+14     	; 0xbca0 <ProcessMixer+0x62c>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    bc92:	a1 96       	adiw	r28, 0x21	; 33
    bc94:	2e ad       	ldd	r18, Y+62	; 0x3e
    bc96:	3f ad       	ldd	r19, Y+63	; 0x3f
    bc98:	a1 97       	sbiw	r28, 0x21	; 33
    bc9a:	c2 1a       	sub	r12, r18
    bc9c:	d3 0a       	sbc	r13, r19
    bc9e:	06 c0       	rjmp	.+12     	; 0xbcac <ProcessMixer+0x638>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    bca0:	a1 96       	adiw	r28, 0x21	; 33
    bca2:	4e ad       	ldd	r20, Y+62	; 0x3e
    bca4:	5f ad       	ldd	r21, Y+63	; 0x3f
    bca6:	a1 97       	sbiw	r28, 0x21	; 33
    bca8:	c4 0e       	add	r12, r20
    bcaa:	d5 1e       	adc	r13, r21

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
    bcac:	84 e6       	ldi	r24, 0x64	; 100
    bcae:	a8 16       	cp	r10, r24
    bcb0:	b1 04       	cpc	r11, r1
    bcb2:	0c f0       	brlt	.+2      	; 0xbcb6 <ProcessMixer+0x642>
    bcb4:	84 c0       	rjmp	.+264    	; 0xbdbe <ProcessMixer+0x74a>
    bcb6:	02 c0       	rjmp	.+4      	; 0xbcbc <ProcessMixer+0x648>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    bcb8:	c1 2c       	mov	r12, r1
    bcba:	d1 2c       	mov	r13, r1
    bcbc:	f8 01       	movw	r30, r16
    bcbe:	e1 54       	subi	r30, 0x41	; 65
    bcc0:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    bcc2:	80 81       	ld	r24, Z
    bcc4:	81 30       	cpi	r24, 0x01	; 1
    bcc6:	81 f0       	breq	.+32     	; 0xbce8 <ProcessMixer+0x674>
    bcc8:	82 30       	cpi	r24, 0x02	; 2
    bcca:	e9 f4       	brne	.+58     	; 0xbd06 <ProcessMixer+0x692>
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], P1_acc_roll_volume_source * 5);
    bccc:	57 2d       	mov	r21, r7
    bcce:	85 e0       	ldi	r24, 0x05	; 5
    bcd0:	58 02       	muls	r21, r24
    bcd2:	b0 01       	movw	r22, r0
    bcd4:	11 24       	eor	r1, r1
    bcd6:	a3 96       	adiw	r28, 0x23	; 35
    bcd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    bcda:	9f ad       	ldd	r25, Y+63	; 0x3f
    bcdc:	a3 97       	sbiw	r28, 0x23	; 35
    bcde:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    bce2:	88 1a       	sub	r8, r24
    bce4:	99 0a       	sbc	r9, r25
					break;
    bce6:	0f c0       	rjmp	.+30     	; 0xbd06 <ProcessMixer+0x692>
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (P1_acc_roll_volume_source < 0 )
    bce8:	77 fe       	sbrs	r7, 7
    bcea:	07 c0       	rjmp	.+14     	; 0xbcfa <ProcessMixer+0x686>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    bcec:	a3 96       	adiw	r28, 0x23	; 35
    bcee:	2e ad       	ldd	r18, Y+62	; 0x3e
    bcf0:	3f ad       	ldd	r19, Y+63	; 0x3f
    bcf2:	a3 97       	sbiw	r28, 0x23	; 35
    bcf4:	82 0e       	add	r8, r18
    bcf6:	93 1e       	adc	r9, r19
    bcf8:	06 c0       	rjmp	.+12     	; 0xbd06 <ProcessMixer+0x692>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    bcfa:	a3 96       	adiw	r28, 0x23	; 35
    bcfc:	4e ad       	ldd	r20, Y+62	; 0x3e
    bcfe:	5f ad       	ldd	r21, Y+63	; 0x3f
    bd00:	a3 97       	sbiw	r28, 0x23	; 35
    bd02:	84 1a       	sub	r8, r20
    bd04:	95 0a       	sbc	r9, r21
    bd06:	f8 01       	movw	r30, r16
    bd08:	ef 53       	subi	r30, 0x3F	; 63
    bd0a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    bd0c:	80 81       	ld	r24, Z
    bd0e:	81 30       	cpi	r24, 0x01	; 1
    bd10:	99 f0       	breq	.+38     	; 0xbd38 <ProcessMixer+0x6c4>
    bd12:	82 30       	cpi	r24, 0x02	; 2
    bd14:	21 f5       	brne	.+72     	; 0xbd5e <ProcessMixer+0x6ea>
    bd16:	f8 01       	movw	r30, r16
    bd18:	eb 54       	subi	r30, 0x4B	; 75
    bd1a:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    bd1c:	60 81       	ld	r22, Z
    bd1e:	55 e0       	ldi	r21, 0x05	; 5
    bd20:	65 02       	muls	r22, r21
    bd22:	b0 01       	movw	r22, r0
    bd24:	11 24       	eor	r1, r1
    bd26:	a5 96       	adiw	r28, 0x25	; 37
    bd28:	8e ad       	ldd	r24, Y+62	; 0x3e
    bd2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    bd2c:	a5 97       	sbiw	r28, 0x25	; 37
    bd2e:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    bd32:	88 0e       	add	r8, r24
    bd34:	99 1e       	adc	r9, r25
					break;
    bd36:	13 c0       	rjmp	.+38     	; 0xbd5e <ProcessMixer+0x6ea>
    bd38:	f8 01       	movw	r30, r16
    bd3a:	eb 54       	subi	r30, 0x4B	; 75
    bd3c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    bd3e:	80 81       	ld	r24, Z
    bd40:	87 ff       	sbrs	r24, 7
    bd42:	07 c0       	rjmp	.+14     	; 0xbd52 <ProcessMixer+0x6de>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    bd44:	a5 96       	adiw	r28, 0x25	; 37
    bd46:	2e ad       	ldd	r18, Y+62	; 0x3e
    bd48:	3f ad       	ldd	r19, Y+63	; 0x3f
    bd4a:	a5 97       	sbiw	r28, 0x25	; 37
    bd4c:	82 1a       	sub	r8, r18
    bd4e:	93 0a       	sbc	r9, r19
    bd50:	06 c0       	rjmp	.+12     	; 0xbd5e <ProcessMixer+0x6ea>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    bd52:	a5 96       	adiw	r28, 0x25	; 37
    bd54:	4e ad       	ldd	r20, Y+62	; 0x3e
    bd56:	5f ad       	ldd	r21, Y+63	; 0x3f
    bd58:	a5 97       	sbiw	r28, 0x25	; 37
    bd5a:	84 0e       	add	r8, r20
    bd5c:	95 1e       	adc	r9, r21
    bd5e:	f8 01       	movw	r30, r16
    bd60:	ed 53       	subi	r30, 0x3D	; 61
    bd62:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    bd64:	80 81       	ld	r24, Z
    bd66:	81 30       	cpi	r24, 0x01	; 1
    bd68:	99 f0       	breq	.+38     	; 0xbd90 <ProcessMixer+0x71c>
    bd6a:	82 30       	cpi	r24, 0x02	; 2
    bd6c:	21 f5       	brne	.+72     	; 0xbdb6 <ProcessMixer+0x742>
    bd6e:	f8 01       	movw	r30, r16
    bd70:	e0 55       	subi	r30, 0x50	; 80
    bd72:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    bd74:	60 81       	ld	r22, Z
    bd76:	55 e0       	ldi	r21, 0x05	; 5
    bd78:	65 02       	muls	r22, r21
    bd7a:	b0 01       	movw	r22, r0
    bd7c:	11 24       	eor	r1, r1
    bd7e:	a7 96       	adiw	r28, 0x27	; 39
    bd80:	8e ad       	ldd	r24, Y+62	; 0x3e
    bd82:	9f ad       	ldd	r25, Y+63	; 0x3f
    bd84:	a7 97       	sbiw	r28, 0x27	; 39
    bd86:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    bd8a:	88 1a       	sub	r8, r24
    bd8c:	99 0a       	sbc	r9, r25
					break;
    bd8e:	13 c0       	rjmp	.+38     	; 0xbdb6 <ProcessMixer+0x742>
    bd90:	f8 01       	movw	r30, r16
    bd92:	e0 55       	subi	r30, 0x50	; 80
    bd94:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    bd96:	80 81       	ld	r24, Z
    bd98:	87 ff       	sbrs	r24, 7
    bd9a:	07 c0       	rjmp	.+14     	; 0xbdaa <ProcessMixer+0x736>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    bd9c:	a7 96       	adiw	r28, 0x27	; 39
    bd9e:	2e ad       	ldd	r18, Y+62	; 0x3e
    bda0:	3f ad       	ldd	r19, Y+63	; 0x3f
    bda2:	a7 97       	sbiw	r28, 0x27	; 39
    bda4:	82 0e       	add	r8, r18
    bda6:	93 1e       	adc	r9, r19
    bda8:	06 c0       	rjmp	.+12     	; 0xbdb6 <ProcessMixer+0x742>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    bdaa:	a7 96       	adiw	r28, 0x27	; 39
    bdac:	4e ad       	ldd	r20, Y+62	; 0x3e
    bdae:	5f ad       	ldd	r21, Y+63	; 0x3f
    bdb0:	a7 97       	sbiw	r28, 0x27	; 39
    bdb2:	84 1a       	sub	r8, r20
    bdb4:	95 0a       	sbc	r9, r21
					break;
			}
		}

		// P2
		if (transition > 0)
    bdb6:	1a 14       	cp	r1, r10
    bdb8:	1b 04       	cpc	r1, r11
    bdba:	0c f0       	brlt	.+2      	; 0xbdbe <ProcessMixer+0x74a>
    bdbc:	89 c0       	rjmp	.+274    	; 0xbed0 <ProcessMixer+0x85c>
    bdbe:	f8 01       	movw	r30, r16
    bdc0:	e0 54       	subi	r30, 0x40	; 64
    bdc2:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    bdc4:	80 81       	ld	r24, Z
    bdc6:	81 30       	cpi	r24, 0x01	; 1
    bdc8:	99 f0       	breq	.+38     	; 0xbdf0 <ProcessMixer+0x77c>
    bdca:	82 30       	cpi	r24, 0x02	; 2
    bdcc:	21 f5       	brne	.+72     	; 0xbe16 <ProcessMixer+0x7a2>
    bdce:	f8 01       	movw	r30, r16
    bdd0:	ec 54       	subi	r30, 0x4C	; 76
    bdd2:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    bdd4:	60 81       	ld	r22, Z
    bdd6:	55 e0       	ldi	r21, 0x05	; 5
    bdd8:	65 02       	muls	r22, r21
    bdda:	b0 01       	movw	r22, r0
    bddc:	11 24       	eor	r1, r1
    bdde:	a9 96       	adiw	r28, 0x29	; 41
    bde0:	8e ad       	ldd	r24, Y+62	; 0x3e
    bde2:	9f ad       	ldd	r25, Y+63	; 0x3f
    bde4:	a9 97       	sbiw	r28, 0x29	; 41
    bde6:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    bdea:	c8 1a       	sub	r12, r24
    bdec:	d9 0a       	sbc	r13, r25
					break;
    bdee:	13 c0       	rjmp	.+38     	; 0xbe16 <ProcessMixer+0x7a2>
    bdf0:	f8 01       	movw	r30, r16
    bdf2:	ec 54       	subi	r30, 0x4C	; 76
    bdf4:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    bdf6:	80 81       	ld	r24, Z
    bdf8:	87 ff       	sbrs	r24, 7
    bdfa:	07 c0       	rjmp	.+14     	; 0xbe0a <ProcessMixer+0x796>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    bdfc:	a9 96       	adiw	r28, 0x29	; 41
    bdfe:	2e ad       	ldd	r18, Y+62	; 0x3e
    be00:	3f ad       	ldd	r19, Y+63	; 0x3f
    be02:	a9 97       	sbiw	r28, 0x29	; 41
    be04:	c2 0e       	add	r12, r18
    be06:	d3 1e       	adc	r13, r19
    be08:	06 c0       	rjmp	.+12     	; 0xbe16 <ProcessMixer+0x7a2>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    be0a:	a9 96       	adiw	r28, 0x29	; 41
    be0c:	4e ad       	ldd	r20, Y+62	; 0x3e
    be0e:	5f ad       	ldd	r21, Y+63	; 0x3f
    be10:	a9 97       	sbiw	r28, 0x29	; 41
    be12:	c4 1a       	sub	r12, r20
    be14:	d5 0a       	sbc	r13, r21
    be16:	f8 01       	movw	r30, r16
    be18:	ee 53       	subi	r30, 0x3E	; 62
    be1a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    be1c:	80 81       	ld	r24, Z
    be1e:	81 30       	cpi	r24, 0x01	; 1
    be20:	99 f0       	breq	.+38     	; 0xbe48 <ProcessMixer+0x7d4>
    be22:	82 30       	cpi	r24, 0x02	; 2
    be24:	21 f5       	brne	.+72     	; 0xbe6e <ProcessMixer+0x7fa>
    be26:	f8 01       	movw	r30, r16
    be28:	ea 54       	subi	r30, 0x4A	; 74
    be2a:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    be2c:	60 81       	ld	r22, Z
    be2e:	55 e0       	ldi	r21, 0x05	; 5
    be30:	65 02       	muls	r22, r21
    be32:	b0 01       	movw	r22, r0
    be34:	11 24       	eor	r1, r1
    be36:	ab 96       	adiw	r28, 0x2b	; 43
    be38:	8e ad       	ldd	r24, Y+62	; 0x3e
    be3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    be3c:	ab 97       	sbiw	r28, 0x2b	; 43
    be3e:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    be42:	c8 0e       	add	r12, r24
    be44:	d9 1e       	adc	r13, r25
					break;
    be46:	13 c0       	rjmp	.+38     	; 0xbe6e <ProcessMixer+0x7fa>
    be48:	f8 01       	movw	r30, r16
    be4a:	ea 54       	subi	r30, 0x4A	; 74
    be4c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    be4e:	80 81       	ld	r24, Z
    be50:	87 ff       	sbrs	r24, 7
    be52:	07 c0       	rjmp	.+14     	; 0xbe62 <ProcessMixer+0x7ee>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    be54:	ab 96       	adiw	r28, 0x2b	; 43
    be56:	2e ad       	ldd	r18, Y+62	; 0x3e
    be58:	3f ad       	ldd	r19, Y+63	; 0x3f
    be5a:	ab 97       	sbiw	r28, 0x2b	; 43
    be5c:	c2 1a       	sub	r12, r18
    be5e:	d3 0a       	sbc	r13, r19
    be60:	06 c0       	rjmp	.+12     	; 0xbe6e <ProcessMixer+0x7fa>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    be62:	ab 96       	adiw	r28, 0x2b	; 43
    be64:	4e ad       	ldd	r20, Y+62	; 0x3e
    be66:	5f ad       	ldd	r21, Y+63	; 0x3f
    be68:	ab 97       	sbiw	r28, 0x2b	; 43
    be6a:	c4 0e       	add	r12, r20
    be6c:	d5 1e       	adc	r13, r21
    be6e:	f8 01       	movw	r30, r16
    be70:	ec 53       	subi	r30, 0x3C	; 60
    be72:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    be74:	80 81       	ld	r24, Z
    be76:	81 30       	cpi	r24, 0x01	; 1
    be78:	99 f0       	breq	.+38     	; 0xbea0 <ProcessMixer+0x82c>
    be7a:	82 30       	cpi	r24, 0x02	; 2
    be7c:	21 f5       	brne	.+72     	; 0xbec6 <ProcessMixer+0x852>
    be7e:	f8 01       	movw	r30, r16
    be80:	ef 54       	subi	r30, 0x4F	; 79
    be82:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    be84:	60 81       	ld	r22, Z
    be86:	55 e0       	ldi	r21, 0x05	; 5
    be88:	65 02       	muls	r22, r21
    be8a:	b0 01       	movw	r22, r0
    be8c:	11 24       	eor	r1, r1
    be8e:	ad 96       	adiw	r28, 0x2d	; 45
    be90:	8e ad       	ldd	r24, Y+62	; 0x3e
    be92:	9f ad       	ldd	r25, Y+63	; 0x3f
    be94:	ad 97       	sbiw	r28, 0x2d	; 45
    be96:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    be9a:	c8 1a       	sub	r12, r24
    be9c:	d9 0a       	sbc	r13, r25
					break;
    be9e:	13 c0       	rjmp	.+38     	; 0xbec6 <ProcessMixer+0x852>
    bea0:	f8 01       	movw	r30, r16
    bea2:	ef 54       	subi	r30, 0x4F	; 79
    bea4:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    bea6:	80 81       	ld	r24, Z
    bea8:	87 ff       	sbrs	r24, 7
    beaa:	07 c0       	rjmp	.+14     	; 0xbeba <ProcessMixer+0x846>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    beac:	ad 96       	adiw	r28, 0x2d	; 45
    beae:	2e ad       	ldd	r18, Y+62	; 0x3e
    beb0:	3f ad       	ldd	r19, Y+63	; 0x3f
    beb2:	ad 97       	sbiw	r28, 0x2d	; 45
    beb4:	c2 0e       	add	r12, r18
    beb6:	d3 1e       	adc	r13, r19
    beb8:	06 c0       	rjmp	.+12     	; 0xbec6 <ProcessMixer+0x852>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    beba:	ad 96       	adiw	r28, 0x2d	; 45
    bebc:	4e ad       	ldd	r20, Y+62	; 0x3e
    bebe:	5f ad       	ldd	r21, Y+63	; 0x3f
    bec0:	ad 97       	sbiw	r28, 0x2d	; 45
    bec2:	c4 1a       	sub	r12, r20
    bec4:	d5 0a       	sbc	r13, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (transition < 100)
    bec6:	84 e6       	ldi	r24, 0x64	; 100
    bec8:	a8 16       	cp	r10, r24
    beca:	b1 04       	cpc	r11, r1
    becc:	0c f0       	brlt	.+2      	; 0xbed0 <ProcessMixer+0x85c>
    bece:	68 c0       	rjmp	.+208    	; 0xbfa0 <ProcessMixer+0x92c>
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume != 0) 					// Mix in dedicated aileron
    bed0:	66 96       	adiw	r28, 0x16	; 22
    bed2:	2f ad       	ldd	r18, Y+63	; 0x3f
    bed4:	66 97       	sbiw	r28, 0x16	; 22
    bed6:	22 23       	and	r18, r18
    bed8:	59 f0       	breq	.+22     	; 0xbef0 <ProcessMixer+0x87c>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    beda:	80 91 85 09 	lds	r24, 0x0985
    bede:	90 91 86 09 	lds	r25, 0x0986
    bee2:	62 2f       	mov	r22, r18
    bee4:	22 0f       	add	r18, r18
    bee6:	77 0b       	sbc	r23, r23
    bee8:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
				P1_solution = P1_solution + temp2;
    beec:	88 0e       	add	r8, r24
    beee:	99 1e       	adc	r9, r25
    bef0:	f8 01       	movw	r30, r16
    bef2:	eb 54       	subi	r30, 0x4B	; 75
    bef4:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume != 0) 					// Mix in dedicated elevator
    bef6:	60 81       	ld	r22, Z
    bef8:	66 23       	and	r22, r22
    befa:	59 f0       	breq	.+22     	; 0xbf12 <ProcessMixer+0x89e>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    befc:	80 91 87 09 	lds	r24, 0x0987
    bf00:	90 91 88 09 	lds	r25, 0x0988
    bf04:	06 2e       	mov	r0, r22
    bf06:	00 0c       	add	r0, r0
    bf08:	77 0b       	sbc	r23, r23
    bf0a:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
				P1_solution = P1_solution + temp2;
    bf0e:	88 0e       	add	r8, r24
    bf10:	99 1e       	adc	r9, r25
			}
			if (Config.Channel[i].P1_rudder_volume != 0) 					// Mix in dedicated rudder
    bf12:	66 20       	and	r6, r6
    bf14:	59 f0       	breq	.+22     	; 0xbf2c <ProcessMixer+0x8b8>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    bf16:	80 91 89 09 	lds	r24, 0x0989
    bf1a:	90 91 8a 09 	lds	r25, 0x098A
    bf1e:	66 2d       	mov	r22, r6
    bf20:	66 0c       	add	r6, r6
    bf22:	77 0b       	sbc	r23, r23
    bf24:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
				P1_solution = P1_solution + temp2;
    bf28:	88 0e       	add	r8, r24
    bf2a:	99 1e       	adc	r9, r25
    bf2c:	f8 01       	movw	r30, r16
    bf2e:	ea 53       	subi	r30, 0x3A	; 58
    bf30:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume != 0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    bf32:	60 81       	ld	r22, Z
    bf34:	66 23       	and	r22, r22
    bf36:	a9 f0       	breq	.+42     	; 0xbf62 <ProcessMixer+0x8ee>
    bf38:	31 97       	sbiw	r30, 0x01	; 1
    bf3a:	e0 81       	ld	r30, Z
    bf3c:	e4 31       	cpi	r30, 0x14	; 20
    bf3e:	89 f0       	breq	.+34     	; 0xbf62 <ProcessMixer+0x8ee>
			{
				temp2 = UniversalP1[Config.Channel[i].P1_source_a];
    bf40:	ee 0f       	add	r30, r30
    bf42:	ff 0b       	sbc	r31, r31
    bf44:	41 e0       	ldi	r20, 0x01	; 1
    bf46:	50 e0       	ldi	r21, 0x00	; 0
    bf48:	4c 0f       	add	r20, r28
    bf4a:	5d 1f       	adc	r21, r29
    bf4c:	e4 0f       	add	r30, r20
    bf4e:	f5 1f       	adc	r31, r21
				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    bf50:	06 2e       	mov	r0, r22
    bf52:	00 0c       	add	r0, r0
    bf54:	77 0b       	sbc	r23, r23
    bf56:	82 a5       	ldd	r24, Z+42	; 0x2a
    bf58:	93 a5       	ldd	r25, Z+43	; 0x2b
    bf5a:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
				P1_solution = P1_solution + temp2;
    bf5e:	88 0e       	add	r8, r24
    bf60:	99 1e       	adc	r9, r25
    bf62:	f8 01       	movw	r30, r16
    bf64:	e6 53       	subi	r30, 0x36	; 54
    bf66:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume != 0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    bf68:	60 81       	ld	r22, Z
    bf6a:	66 23       	and	r22, r22
    bf6c:	a9 f0       	breq	.+42     	; 0xbf98 <ProcessMixer+0x924>
    bf6e:	31 97       	sbiw	r30, 0x01	; 1
    bf70:	e0 81       	ld	r30, Z
    bf72:	e4 31       	cpi	r30, 0x14	; 20
    bf74:	89 f0       	breq	.+34     	; 0xbf98 <ProcessMixer+0x924>
			{
				temp2 = UniversalP1[Config.Channel[i].P1_source_b];
    bf76:	ee 0f       	add	r30, r30
    bf78:	ff 0b       	sbc	r31, r31
    bf7a:	81 e0       	ldi	r24, 0x01	; 1
    bf7c:	90 e0       	ldi	r25, 0x00	; 0
    bf7e:	8c 0f       	add	r24, r28
    bf80:	9d 1f       	adc	r25, r29
    bf82:	e8 0f       	add	r30, r24
    bf84:	f9 1f       	adc	r31, r25
				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    bf86:	06 2e       	mov	r0, r22
    bf88:	00 0c       	add	r0, r0
    bf8a:	77 0b       	sbc	r23, r23
    bf8c:	82 a5       	ldd	r24, Z+42	; 0x2a
    bf8e:	93 a5       	ldd	r25, Z+43	; 0x2b
    bf90:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
				P1_solution = P1_solution + temp2;
    bf94:	88 0e       	add	r8, r24
    bf96:	99 1e       	adc	r9, r25
			}
		}

		// Mix in other outputs here (P2)
		if (transition > 0)	
    bf98:	1a 14       	cp	r1, r10
    bf9a:	1b 04       	cpc	r1, r11
    bf9c:	0c f0       	brlt	.+2      	; 0xbfa0 <ProcessMixer+0x92c>
    bf9e:	69 c0       	rjmp	.+210    	; 0xc072 <ProcessMixer+0x9fe>
    bfa0:	f8 01       	movw	r30, r16
    bfa2:	ec 54       	subi	r30, 0x4C	; 76
    bfa4:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume != 0) 					// Mix in dedicated aileron
    bfa6:	60 81       	ld	r22, Z
    bfa8:	66 23       	and	r22, r22
    bfaa:	59 f0       	breq	.+22     	; 0xbfc2 <ProcessMixer+0x94e>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    bfac:	80 91 85 09 	lds	r24, 0x0985
    bfb0:	90 91 86 09 	lds	r25, 0x0986
    bfb4:	06 2e       	mov	r0, r22
    bfb6:	00 0c       	add	r0, r0
    bfb8:	77 0b       	sbc	r23, r23
    bfba:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
				P2_solution = P2_solution + temp2;
    bfbe:	c8 0e       	add	r12, r24
    bfc0:	d9 1e       	adc	r13, r25
    bfc2:	f8 01       	movw	r30, r16
    bfc4:	ea 54       	subi	r30, 0x4A	; 74
    bfc6:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume != 0) 					// Mix in dedicated elevator
    bfc8:	60 81       	ld	r22, Z
    bfca:	66 23       	and	r22, r22
    bfcc:	59 f0       	breq	.+22     	; 0xbfe4 <ProcessMixer+0x970>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    bfce:	80 91 87 09 	lds	r24, 0x0987
    bfd2:	90 91 88 09 	lds	r25, 0x0988
    bfd6:	06 2e       	mov	r0, r22
    bfd8:	00 0c       	add	r0, r0
    bfda:	77 0b       	sbc	r23, r23
    bfdc:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
				P2_solution = P2_solution + temp2;
    bfe0:	c8 0e       	add	r12, r24
    bfe2:	d9 1e       	adc	r13, r25
    bfe4:	f8 01       	movw	r30, r16
    bfe6:	e8 54       	subi	r30, 0x48	; 72
    bfe8:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume != 0) 					// Mix in dedicated rudder
    bfea:	60 81       	ld	r22, Z
    bfec:	66 23       	and	r22, r22
    bfee:	59 f0       	breq	.+22     	; 0xc006 <ProcessMixer+0x992>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    bff0:	80 91 89 09 	lds	r24, 0x0989
    bff4:	90 91 8a 09 	lds	r25, 0x098A
    bff8:	06 2e       	mov	r0, r22
    bffa:	00 0c       	add	r0, r0
    bffc:	77 0b       	sbc	r23, r23
    bffe:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
				P2_solution = P2_solution + temp2;
    c002:	c8 0e       	add	r12, r24
    c004:	d9 1e       	adc	r13, r25
    c006:	f8 01       	movw	r30, r16
    c008:	e8 53       	subi	r30, 0x38	; 56
    c00a:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume != 0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    c00c:	60 81       	ld	r22, Z
    c00e:	66 23       	and	r22, r22
    c010:	a9 f0       	breq	.+42     	; 0xc03c <ProcessMixer+0x9c8>
    c012:	31 97       	sbiw	r30, 0x01	; 1
    c014:	e0 81       	ld	r30, Z
    c016:	e4 31       	cpi	r30, 0x14	; 20
    c018:	89 f0       	breq	.+34     	; 0xc03c <ProcessMixer+0x9c8>
			{
				temp2 = UniversalP2[Config.Channel[i].P2_source_a];
    c01a:	ee 0f       	add	r30, r30
    c01c:	ff 0b       	sbc	r31, r31
    c01e:	21 e0       	ldi	r18, 0x01	; 1
    c020:	30 e0       	ldi	r19, 0x00	; 0
    c022:	2c 0f       	add	r18, r28
    c024:	3d 1f       	adc	r19, r29
    c026:	e2 0f       	add	r30, r18
    c028:	f3 1f       	adc	r31, r19
				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    c02a:	06 2e       	mov	r0, r22
    c02c:	00 0c       	add	r0, r0
    c02e:	77 0b       	sbc	r23, r23
    c030:	80 81       	ld	r24, Z
    c032:	91 81       	ldd	r25, Z+1	; 0x01
    c034:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
				P2_solution = P2_solution + temp2;
    c038:	c8 0e       	add	r12, r24
    c03a:	d9 1e       	adc	r13, r25
    c03c:	f8 01       	movw	r30, r16
    c03e:	e4 53       	subi	r30, 0x34	; 52
    c040:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume != 0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    c042:	60 81       	ld	r22, Z
    c044:	66 23       	and	r22, r22
    c046:	a9 f0       	breq	.+42     	; 0xc072 <ProcessMixer+0x9fe>
    c048:	31 97       	sbiw	r30, 0x01	; 1
    c04a:	e0 81       	ld	r30, Z
    c04c:	e4 31       	cpi	r30, 0x14	; 20
    c04e:	89 f0       	breq	.+34     	; 0xc072 <ProcessMixer+0x9fe>
			{
				temp2 = UniversalP2[Config.Channel[i].P2_source_b];
    c050:	ee 0f       	add	r30, r30
    c052:	ff 0b       	sbc	r31, r31
    c054:	41 e0       	ldi	r20, 0x01	; 1
    c056:	50 e0       	ldi	r21, 0x00	; 0
    c058:	4c 0f       	add	r20, r28
    c05a:	5d 1f       	adc	r21, r29
    c05c:	e4 0f       	add	r30, r20
    c05e:	f5 1f       	adc	r31, r21
				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    c060:	06 2e       	mov	r0, r22
    c062:	00 0c       	add	r0, r0
    c064:	77 0b       	sbc	r23, r23
    c066:	80 81       	ld	r24, Z
    c068:	91 81       	ldd	r25, Z+1	; 0x01
    c06a:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
				P2_solution = P2_solution + temp2;
    c06e:	c8 0e       	add	r12, r24
    c070:	d9 1e       	adc	r13, r25
    c072:	f8 01       	movw	r30, r16
    c074:	e5 55       	subi	r30, 0x55	; 85
    c076:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    c078:	91 82       	std	Z+1, r9	; 0x01
    c07a:	80 82       	st	Z, r8
    c07c:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    c07e:	d1 82       	std	Z+1, r13	; 0x01
    c080:	c0 82       	st	Z, r12
    c082:	ae 96       	adiw	r28, 0x2e	; 46
    c084:	5f ad       	ldd	r21, Y+63	; 0x3f
    c086:	ae 97       	sbiw	r28, 0x2e	; 46
    c088:	51 50       	subi	r21, 0x01	; 1
    c08a:	ae 96       	adiw	r28, 0x2e	; 46
    c08c:	5f af       	std	Y+63, r21	; 0x3f
    c08e:	ae 97       	sbiw	r28, 0x2e	; 46
    c090:	0e 5d       	subi	r16, 0xDE	; 222
    c092:	1f 4f       	sbci	r17, 0xFF	; 255
	
	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    c094:	51 11       	cpse	r21, r1
    c096:	f2 cc       	rjmp	.-1564   	; 0xba7c <ProcessMixer+0x408>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeedOut != 0) 
    c098:	80 91 67 06 	lds	r24, 0x0667
    c09c:	88 23       	and	r24, r24
    c09e:	41 f0       	breq	.+16     	; 0xc0b0 <ProcessMixer+0xa3c>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    c0a0:	80 91 3c 05 	lds	r24, 0x053C
    c0a4:	90 91 3d 05 	lds	r25, 0x053D
    c0a8:	90 93 39 05 	sts	0x0539, r25
    c0ac:	80 93 38 05 	sts	0x0538, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    c0b0:	00 91 38 05 	lds	r16, 0x0538
    c0b4:	10 91 39 05 	lds	r17, 0x0539
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    c0b8:	84 e6       	ldi	r24, 0x64	; 100
    c0ba:	90 e0       	ldi	r25, 0x00	; 0
    c0bc:	5c 01       	movw	r10, r24
    c0be:	a0 1a       	sub	r10, r16
    c0c0:	b1 0a       	sbc	r11, r17
    c0c2:	54 ee       	ldi	r21, 0xE4	; 228
    c0c4:	65 2e       	mov	r6, r21
    c0c6:	56 e0       	ldi	r21, 0x06	; 6
    c0c8:	75 2e       	mov	r7, r21
    c0ca:	43 01       	movw	r8, r6

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    c0cc:	01 15       	cp	r16, r1
    c0ce:	11 05       	cpc	r17, r1
    c0d0:	21 f4       	brne	.+8      	; 0xc0da <ProcessMixer+0xa66>
		{
			temp1 = Config.Channel[i].P1_value;
    c0d2:	f4 01       	movw	r30, r8
    c0d4:	80 81       	ld	r24, Z
    c0d6:	91 81       	ldd	r25, Z+1	; 0x01
    c0d8:	16 c0       	rjmp	.+44     	; 0xc106 <ProcessMixer+0xa92>
		}
		else if (transition >= 100)
    c0da:	04 36       	cpi	r16, 0x64	; 100
    c0dc:	11 05       	cpc	r17, r1
    c0de:	24 f0       	brlt	.+8      	; 0xc0e8 <ProcessMixer+0xa74>
		{
			temp1 = Config.Channel[i].P2_value;
    c0e0:	f4 01       	movw	r30, r8
    c0e2:	82 81       	ldd	r24, Z+2	; 0x02
    c0e4:	93 81       	ldd	r25, Z+3	; 0x03
    c0e6:	0f c0       	rjmp	.+30     	; 0xc106 <ProcessMixer+0xa92>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    c0e8:	b5 01       	movw	r22, r10
    c0ea:	f4 01       	movw	r30, r8
    c0ec:	80 81       	ld	r24, Z
    c0ee:	91 81       	ldd	r25, Z+1	; 0x01
    c0f0:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>
    c0f4:	6c 01       	movw	r12, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    c0f6:	b8 01       	movw	r22, r16
    c0f8:	f4 01       	movw	r30, r8
    c0fa:	82 81       	ldd	r24, Z+2	; 0x02
    c0fc:	93 81       	ldd	r25, Z+3	; 0x03
    c0fe:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    c102:	8c 0d       	add	r24, r12
    c104:	9d 1d       	adc	r25, r13
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    c106:	f4 01       	movw	r30, r8
    c108:	91 83       	std	Z+1, r25	; 0x01
    c10a:	80 83       	st	Z, r24
    c10c:	f2 e2       	ldi	r31, 0x22	; 34
    c10e:	8f 0e       	add	r8, r31
    c110:	91 1c       	adc	r9, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    c112:	24 ef       	ldi	r18, 0xF4	; 244
    c114:	82 16       	cp	r8, r18
    c116:	27 e0       	ldi	r18, 0x07	; 7
    c118:	92 06       	cpc	r9, r18
    c11a:	c1 f6       	brne	.-80     	; 0xc0cc <ProcessMixer+0xa58>
	// Work out the resultant Monopolar throttle value based on
	// P1_throttle, P2_throttle and the transition number
	//************************************************************ 

	// Only process if there is a difference
	if (P1_throttle != P2_throttle)
    c11c:	2e 14       	cp	r2, r14
    c11e:	3f 04       	cpc	r3, r15
    c120:	99 f1       	breq	.+102    	; 0xc188 <ProcessMixer+0xb14>
	{
		// Speed up the easy ones :)
		if (transition == 0)
    c122:	01 15       	cp	r16, r1
    c124:	11 05       	cpc	r17, r1
    c126:	81 f1       	breq	.+96     	; 0xc188 <ProcessMixer+0xb14>
		{
			e32temp3 = P1_throttle;
		}
		else if (transition >= 100)
    c128:	04 36       	cpi	r16, 0x64	; 100
    c12a:	11 05       	cpc	r17, r1
    c12c:	2c f0       	brlt	.+10     	; 0xc138 <ProcessMixer+0xac4>
		{
			e32temp3 = P2_throttle;
    c12e:	c7 01       	movw	r24, r14
    c130:	ff 0c       	add	r15, r15
    c132:	aa 0b       	sbc	r26, r26
    c134:	bb 0b       	sbc	r27, r27
    c136:	2c c0       	rjmp	.+88     	; 0xc190 <ProcessMixer+0xb1c>
		}
		else
		{
			// Calculate step difference in 1/100ths and round
			e32temp1 = (P2_throttle - P1_throttle);
    c138:	b7 01       	movw	r22, r14
    c13a:	62 19       	sub	r22, r2
    c13c:	73 09       	sbc	r23, r3
    c13e:	cb 01       	movw	r24, r22
    c140:	77 0f       	add	r23, r23
    c142:	aa 0b       	sbc	r26, r26
    c144:	bb 0b       	sbc	r27, r27
			e32temp1 = e32temp1 << 16; 						// Multiply by 65536 so divide gives reasonable step values
			e32Step1 = e32temp1 / (int32_t)100;

			// Set start (P1) point
			e32temp2 = P1_throttle;							// Promote to 32 bits
    c146:	a1 01       	movw	r20, r2
    c148:	33 0c       	add	r3, r3
    c14a:	66 0b       	sbc	r22, r22
    c14c:	77 0b       	sbc	r23, r23
			e32temp2 = e32temp2 << 16;
    c14e:	7a 01       	movw	r14, r20
    c150:	dd 24       	eor	r13, r13
    c152:	cc 24       	eor	r12, r12
		}
		else
		{
			// Calculate step difference in 1/100ths and round
			e32temp1 = (P2_throttle - P1_throttle);
			e32temp1 = e32temp1 << 16; 						// Multiply by 65536 so divide gives reasonable step values
    c154:	77 27       	eor	r23, r23
    c156:	66 27       	eor	r22, r22
			e32Step1 = e32temp1 / (int32_t)100;
    c158:	24 e6       	ldi	r18, 0x64	; 100
    c15a:	30 e0       	ldi	r19, 0x00	; 0
    c15c:	40 e0       	ldi	r20, 0x00	; 0
    c15e:	50 e0       	ldi	r21, 0x00	; 0
    c160:	0e 94 87 6f 	call	0xdf0e	; 0xdf0e <__divmodsi4>
			// Set start (P1) point
			e32temp2 = P1_throttle;							// Promote to 32 bits
			e32temp2 = e32temp2 << 16;

			// Multiply [transition] steps (0 to 100)
			e32temp3 = e32temp2 + (e32Step1 * transition);
    c164:	d8 01       	movw	r26, r16
    c166:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <__mulshisi3>
    c16a:	dc 01       	movw	r26, r24
    c16c:	cb 01       	movw	r24, r22
    c16e:	8c 0d       	add	r24, r12
    c170:	9d 1d       	adc	r25, r13
    c172:	ae 1d       	adc	r26, r14
    c174:	bf 1d       	adc	r27, r15

			// Round, then rescale to normal value
			e32temp3 = e32temp3 + (int32_t)32768;
    c176:	90 58       	subi	r25, 0x80	; 128
    c178:	af 4f       	sbci	r26, 0xFF	; 255
    c17a:	bf 4f       	sbci	r27, 0xFF	; 255
			e32temp3 = e32temp3 >> 16;			
    c17c:	cd 01       	movw	r24, r26
    c17e:	bb 27       	eor	r27, r27
    c180:	97 fd       	sbrc	r25, 7
    c182:	b0 95       	com	r27
    c184:	ab 2f       	mov	r26, r27
    c186:	04 c0       	rjmp	.+8      	; 0xc190 <ProcessMixer+0xb1c>
			
	// No curve
	else
	{
		// Just use the value of P1_throttle as there is no curve
		e32temp3 = P1_throttle; // Promote to 16 bits
    c188:	c1 01       	movw	r24, r2
    c18a:	33 0c       	add	r3, r3
    c18c:	aa 0b       	sbc	r26, r26
    c18e:	bb 0b       	sbc	r27, r27
	}

	// Copy to monopolar throttle
	monothrottle = (int16_t)e32temp3;
    c190:	1c 01       	movw	r2, r24
    c192:	6a ee       	ldi	r22, 0xEA	; 234
    c194:	e6 2e       	mov	r14, r22
    c196:	66 e0       	ldi	r22, 0x06	; 6
    c198:	f6 2e       	mov	r15, r22
    c19a:	74 ee       	ldi	r23, 0xE4	; 228
    c19c:	c7 2e       	mov	r12, r23
    c19e:	76 e0       	ldi	r23, 0x06	; 6
    c1a0:	d7 2e       	mov	r13, r23
    c1a2:	a1 2c       	mov	r10, r1
    c1a4:	b1 2c       	mov	r11, r1
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    c1a6:	e4 e6       	ldi	r30, 0x64	; 100
    c1a8:	8e 2e       	mov	r8, r30
    c1aa:	91 2c       	mov	r9, r1
    c1ac:	80 2f       	mov	r24, r16
    c1ae:	00 2e       	mov	r0, r16
    c1b0:	00 0c       	add	r0, r0
    c1b2:	99 0b       	sbc	r25, r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    c1b4:	ac 01       	movw	r20, r24
    c1b6:	4a 51       	subi	r20, 0x1A	; 26
    c1b8:	55 4d       	sbci	r21, 0xD5	; 213
    c1ba:	67 96       	adiw	r28, 0x17	; 23
    c1bc:	5f af       	std	Y+63, r21	; 0x3f
    c1be:	4e af       	std	Y+62, r20	; 0x3e
    c1c0:	67 97       	sbiw	r28, 0x17	; 23
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    c1c2:	94 01       	movw	r18, r8
    c1c4:	28 1b       	sub	r18, r24
    c1c6:	39 0b       	sbc	r19, r25
    c1c8:	a9 01       	movw	r20, r18
    c1ca:	4a 51       	subi	r20, 0x1A	; 26
    c1cc:	55 4d       	sbci	r21, 0xD5	; 213
    c1ce:	69 96       	adiw	r28, 0x19	; 25
    c1d0:	5f af       	std	Y+63, r21	; 0x3f
    c1d2:	4e af       	std	Y+62, r20	; 0x3e
    c1d4:	69 97       	sbiw	r28, 0x19	; 25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    c1d6:	ac 01       	movw	r20, r24
    c1d8:	45 5b       	subi	r20, 0xB5	; 181
    c1da:	54 4d       	sbci	r21, 0xD4	; 212
    c1dc:	6b 96       	adiw	r28, 0x1b	; 27
    c1de:	5f af       	std	Y+63, r21	; 0x3f
    c1e0:	4e af       	std	Y+62, r20	; 0x3e
    c1e2:	6b 97       	sbiw	r28, 0x1b	; 27
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    c1e4:	a9 01       	movw	r20, r18
    c1e6:	45 5b       	subi	r20, 0xB5	; 181
    c1e8:	54 4d       	sbci	r21, 0xD4	; 212
    c1ea:	6d 96       	adiw	r28, 0x1d	; 29
    c1ec:	5f af       	std	Y+63, r21	; 0x3f
    c1ee:	4e af       	std	Y+62, r20	; 0x3e
    c1f0:	6d 97       	sbiw	r28, 0x1d	; 29
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms. THROTTLEOFFSET = 1250
    c1f2:	fe e1       	ldi	r31, 0x1E	; 30
    c1f4:	4f 2e       	mov	r4, r31
    c1f6:	fb ef       	ldi	r31, 0xFB	; 251
    c1f8:	5f 2e       	mov	r5, r31
    c1fa:	f7 01       	movw	r30, r14
    c1fc:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    c1fe:	90 81       	ld	r25, Z
    c200:	f7 01       	movw	r30, r14
    c202:	80 81       	ld	r24, Z
    c204:	91 11       	cpse	r25, r1
    c206:	03 c0       	rjmp	.+6      	; 0xc20e <ProcessMixer+0xb9a>
    c208:	88 23       	and	r24, r24
    c20a:	09 f4       	brne	.+2      	; 0xc20e <ProcessMixer+0xb9a>
    c20c:	6b c0       	rjmp	.+214    	; 0xc2e4 <ProcessMixer+0xc70>
    c20e:	29 2f       	mov	r18, r25
    c210:	09 2e       	mov	r0, r25
    c212:	00 0c       	add	r0, r0
    c214:	33 0b       	sbc	r19, r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    c216:	98 17       	cp	r25, r24
    c218:	09 f4       	brne	.+2      	; 0xc21c <ProcessMixer+0xba8>
    c21a:	56 c0       	rjmp	.+172    	; 0xc2c8 <ProcessMixer+0xc54>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    c21c:	08 2e       	mov	r0, r24
    c21e:	00 0c       	add	r0, r0
    c220:	99 0b       	sbc	r25, r25
    c222:	82 1b       	sub	r24, r18
    c224:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    c226:	96 95       	lsr	r25
    c228:	98 2f       	mov	r25, r24
    c22a:	88 27       	eor	r24, r24
    c22c:	97 95       	ror	r25
    c22e:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    c230:	b4 01       	movw	r22, r8
    c232:	0e 94 73 6f 	call	0xdee6	; 0xdee6 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    c236:	c9 01       	movw	r24, r18
    c238:	96 95       	lsr	r25
    c23a:	98 2f       	mov	r25, r24
    c23c:	88 27       	eor	r24, r24
    c23e:	97 95       	ror	r25
    c240:	87 95       	ror	r24
    c242:	f5 01       	movw	r30, r10
    c244:	e5 51       	subi	r30, 0x15	; 21
    c246:	f9 4f       	sbci	r31, 0xF9	; 249

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    c248:	20 81       	ld	r18, Z
    c24a:	21 11       	cpse	r18, r1
    c24c:	08 c0       	rjmp	.+16     	; 0xc25e <ProcessMixer+0xbea>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    c24e:	60 9f       	mul	r22, r16
    c250:	a0 01       	movw	r20, r0
    c252:	61 9f       	mul	r22, r17
    c254:	50 0d       	add	r21, r0
    c256:	70 9f       	mul	r23, r16
    c258:	50 0d       	add	r21, r0
    c25a:	11 24       	eor	r1, r1
    c25c:	2b c0       	rjmp	.+86     	; 0xc2b4 <ProcessMixer+0xc40>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    c25e:	21 30       	cpi	r18, 0x01	; 1
    c260:	61 f4       	brne	.+24     	; 0xc27a <ProcessMixer+0xc06>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    c262:	77 ff       	sbrs	r23, 7
    c264:	05 c0       	rjmp	.+10     	; 0xc270 <ProcessMixer+0xbfc>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    c266:	6d 96       	adiw	r28, 0x1d	; 29
    c268:	ee ad       	ldd	r30, Y+62	; 0x3e
    c26a:	ff ad       	ldd	r31, Y+63	; 0x3f
    c26c:	6d 97       	sbiw	r28, 0x1d	; 29
    c26e:	0b c0       	rjmp	.+22     	; 0xc286 <ProcessMixer+0xc12>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    c270:	6b 96       	adiw	r28, 0x1b	; 27
    c272:	ee ad       	ldd	r30, Y+62	; 0x3e
    c274:	ff ad       	ldd	r31, Y+63	; 0x3f
    c276:	6b 97       	sbiw	r28, 0x1b	; 27
    c278:	12 c0       	rjmp	.+36     	; 0xc29e <ProcessMixer+0xc2a>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    c27a:	77 ff       	sbrs	r23, 7
    c27c:	0c c0       	rjmp	.+24     	; 0xc296 <ProcessMixer+0xc22>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    c27e:	69 96       	adiw	r28, 0x19	; 25
    c280:	ee ad       	ldd	r30, Y+62	; 0x3e
    c282:	ff ad       	ldd	r31, Y+63	; 0x3f
    c284:	69 97       	sbiw	r28, 0x19	; 25
    c286:	24 91       	lpm	r18, Z
    c288:	a4 01       	movw	r20, r8
    c28a:	42 1b       	sub	r20, r18
    c28c:	51 09       	sbc	r21, r1
    c28e:	27 fd       	sbrc	r18, 7
    c290:	53 95       	inc	r21
    c292:	9a 01       	movw	r18, r20
    c294:	08 c0       	rjmp	.+16     	; 0xc2a6 <ProcessMixer+0xc32>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    c296:	67 96       	adiw	r28, 0x17	; 23
    c298:	ee ad       	ldd	r30, Y+62	; 0x3e
    c29a:	ff ad       	ldd	r31, Y+63	; 0x3f
    c29c:	67 97       	sbiw	r28, 0x17	; 23
    c29e:	24 91       	lpm	r18, Z
    c2a0:	02 2e       	mov	r0, r18
    c2a2:	00 0c       	add	r0, r0
    c2a4:	33 0b       	sbc	r19, r19
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    c2a6:	62 9f       	mul	r22, r18
    c2a8:	a0 01       	movw	r20, r0
    c2aa:	63 9f       	mul	r22, r19
    c2ac:	50 0d       	add	r21, r0
    c2ae:	72 9f       	mul	r23, r18
    c2b0:	50 0d       	add	r21, r0
    c2b2:	11 24       	eor	r1, r1
    c2b4:	84 0f       	add	r24, r20
    c2b6:	95 1f       	adc	r25, r21
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    c2b8:	bc 01       	movw	r22, r24
    c2ba:	60 5c       	subi	r22, 0xC0	; 192
    c2bc:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    c2be:	66 0f       	add	r22, r22
    c2c0:	67 2f       	mov	r22, r23
    c2c2:	66 1f       	adc	r22, r22
    c2c4:	77 0b       	sbc	r23, r23
    c2c6:	01 c0       	rjmp	.+2      	; 0xc2ca <ProcessMixer+0xc56>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    c2c8:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(monothrottle, temp3);
    c2ca:	c1 01       	movw	r24, r2
    c2cc:	0e 94 5f 59 	call	0xb2be	; 0xb2be <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of -1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    c2d0:	88 5e       	subi	r24, 0xE8	; 232
    c2d2:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    c2d4:	f6 01       	movw	r30, r12
    c2d6:	20 81       	ld	r18, Z
    c2d8:	31 81       	ldd	r19, Z+1	; 0x01
    c2da:	82 0f       	add	r24, r18
    c2dc:	93 1f       	adc	r25, r19
    c2de:	91 83       	std	Z+1, r25	; 0x01
    c2e0:	80 83       	st	Z, r24
    c2e2:	08 c0       	rjmp	.+16     	; 0xc2f4 <ProcessMixer+0xc80>
    c2e4:	f7 01       	movw	r30, r14
    c2e6:	32 97       	sbiw	r30, 0x02	; 2

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    c2e8:	80 81       	ld	r24, Z
    c2ea:	82 30       	cpi	r24, 0x02	; 2
    c2ec:	19 f4       	brne	.+6      	; 0xc2f4 <ProcessMixer+0xc80>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms. THROTTLEOFFSET = 1250
    c2ee:	f6 01       	movw	r30, r12
    c2f0:	51 82       	std	Z+1, r5	; 0x01
    c2f2:	40 82       	st	Z, r4
    c2f4:	f2 e2       	ldi	r31, 0x22	; 34
    c2f6:	af 0e       	add	r10, r31
    c2f8:	b1 1c       	adc	r11, r1
    c2fa:	22 e2       	ldi	r18, 0x22	; 34
    c2fc:	c2 0e       	add	r12, r18
    c2fe:	d1 1c       	adc	r13, r1
    c300:	32 e2       	ldi	r19, 0x22	; 34
    c302:	e3 0e       	add	r14, r19
    c304:	f1 1c       	adc	r15, r1
	// Groovy transition curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    c306:	40 e1       	ldi	r20, 0x10	; 16
    c308:	a4 16       	cp	r10, r20
    c30a:	41 e0       	ldi	r20, 0x01	; 1
    c30c:	b4 06       	cpc	r11, r20
    c30e:	09 f0       	breq	.+2      	; 0xc312 <ProcessMixer+0xc9e>
    c310:	74 cf       	rjmp	.-280    	; 0xc1fa <ProcessMixer+0xb86>
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// The input to the curves will be the transition number, altered to appear as -1000 to 1000.
		temp1 = (transition - 50) * 20; // 0 - 100 -> -1000 to 1000
    c312:	02 53       	subi	r16, 0x32	; 50
    c314:	11 09       	sbc	r17, r1
    c316:	84 e1       	ldi	r24, 0x14	; 20
    c318:	80 9f       	mul	r24, r16
    c31a:	70 01       	movw	r14, r0
    c31c:	81 9f       	mul	r24, r17
    c31e:	f0 0c       	add	r15, r0
    c320:	11 24       	eor	r1, r1
    c322:	16 e0       	ldi	r17, 0x06	; 6

		// Process as 7-point offset curve. All are BIPOLAR types.
		// Temporarily add NUMBEROFCURVES to the curve number to identify 
		// them to Process_curve() as being offsets, not the other curves.
		temp2 = Process_curve(i + NUMBEROFCURVES, BIPOLAR, temp1);
    c324:	a7 01       	movw	r20, r14
    c326:	61 e0       	ldi	r22, 0x01	; 1
    c328:	81 2f       	mov	r24, r17
    c32a:	0e 94 98 59 	call	0xb330	; 0xb330 <Process_curve>
		
		// Add offset to channel value
		Config.Channel[i].P1_value += temp2;
    c32e:	f3 01       	movw	r30, r6
    c330:	20 81       	ld	r18, Z
    c332:	31 81       	ldd	r19, Z+1	; 0x01
    c334:	82 0f       	add	r24, r18
    c336:	93 1f       	adc	r25, r19
    c338:	91 83       	std	Z+1, r25	; 0x01
    c33a:	80 83       	st	Z, r24
    c33c:	1f 5f       	subi	r17, 0xFF	; 255
    c33e:	f2 e2       	ldi	r31, 0x22	; 34
    c340:	6f 0e       	add	r6, r31
    c342:	71 1c       	adc	r7, r1
	//************************************************************
	// Per-channel 7-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    c344:	1e 30       	cpi	r17, 0x0E	; 14
    c346:	71 f7       	brne	.-36     	; 0xc324 <ProcessMixer+0xcb0>
		
		// Add offset to channel value
		Config.Channel[i].P1_value += temp2;
	}

} // ProcessMixer()
    c348:	ce 58       	subi	r28, 0x8E	; 142
    c34a:	df 4f       	sbci	r29, 0xFF	; 255
    c34c:	0f b6       	in	r0, 0x3f	; 63
    c34e:	f8 94       	cli
    c350:	de bf       	out	0x3e, r29	; 62
    c352:	0f be       	out	0x3f, r0	; 63
    c354:	cd bf       	out	0x3d, r28	; 61
    c356:	df 91       	pop	r29
    c358:	cf 91       	pop	r28
    c35a:	1f 91       	pop	r17
    c35c:	0f 91       	pop	r16
    c35e:	ff 90       	pop	r15
    c360:	ef 90       	pop	r14
    c362:	df 90       	pop	r13
    c364:	cf 90       	pop	r12
    c366:	bf 90       	pop	r11
    c368:	af 90       	pop	r10
    c36a:	9f 90       	pop	r9
    c36c:	8f 90       	pop	r8
    c36e:	7f 90       	pop	r7
    c370:	6f 90       	pop	r6
    c372:	5f 90       	pop	r5
    c374:	4f 90       	pop	r4
    c376:	3f 90       	pop	r3
    c378:	2f 90       	pop	r2
    c37a:	08 95       	ret

0000c37c <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    c37c:	df 92       	push	r13
    c37e:	ef 92       	push	r14
    c380:	ff 92       	push	r15
    c382:	0f 93       	push	r16
    c384:	1f 93       	push	r17
    c386:	cf 93       	push	r28
    c388:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    c38a:	fc 01       	movw	r30, r24
    c38c:	01 90       	ld	r0, Z+
    c38e:	00 20       	and	r0, r0
    c390:	e9 f7       	brne	.-6      	; 0xc38c <mugui_text_sizestring+0x10>
    c392:	31 97       	sbiw	r30, 0x01	; 1
    c394:	9f 01       	movw	r18, r30
    c396:	28 1b       	sub	r18, r24
    c398:	39 0b       	sbc	r19, r25
	height = pgm_read_byte(&font[4]);
    c39a:	fb 01       	movw	r30, r22
    c39c:	34 96       	adiw	r30, 0x04	; 4
    c39e:	e4 91       	lpm	r30, Z
    c3a0:	ce 2f       	mov	r28, r30
    c3a2:	d0 e0       	ldi	r29, 0x00	; 0

	startcharacter = pgm_read_byte(&font[2]);
    c3a4:	fb 01       	movw	r30, r22
    c3a6:	32 96       	adiw	r30, 0x02	; 2
    c3a8:	d4 90       	lpm	r13, Z
    c3aa:	dc 01       	movw	r26, r24
    c3ac:	82 0f       	add	r24, r18
    c3ae:	93 1f       	adc	r25, r19
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    c3b0:	e1 2c       	mov	r14, r1
    c3b2:	f1 2c       	mov	r15, r1
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    c3b4:	a8 17       	cp	r26, r24
    c3b6:	b9 07       	cpc	r27, r25
    c3b8:	31 f1       	breq	.+76     	; 0xc406 <mugui_text_sizestring+0x8a>
	{
		index = s[i] - startcharacter;
    c3ba:	2d 91       	ld	r18, X+
    c3bc:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    c3be:	30 e0       	ldi	r19, 0x00	; 0
    c3c0:	22 0f       	add	r18, r18
    c3c2:	33 1f       	adc	r19, r19
    c3c4:	f9 01       	movw	r30, r18
    c3c6:	35 96       	adiw	r30, 0x05	; 5
    c3c8:	e6 0f       	add	r30, r22
    c3ca:	f7 1f       	adc	r31, r23
    c3cc:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    c3ce:	f9 01       	movw	r30, r18
    c3d0:	36 96       	adiw	r30, 0x06	; 6
    c3d2:	e6 0f       	add	r30, r22
    c3d4:	f7 1f       	adc	r31, r23
    c3d6:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    c3d8:	10 e0       	ldi	r17, 0x00	; 0
    c3da:	20 e0       	ldi	r18, 0x00	; 0
    c3dc:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    c3de:	32 2f       	mov	r19, r18
    c3e0:	21 2f       	mov	r18, r17
    c3e2:	10 2f       	mov	r17, r16
    c3e4:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    c3e6:	0e 0f       	add	r16, r30
    c3e8:	11 1d       	adc	r17, r1
    c3ea:	21 1d       	adc	r18, r1
    c3ec:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    c3ee:	fb 01       	movw	r30, r22
    c3f0:	e0 0f       	add	r30, r16
    c3f2:	f1 1f       	adc	r31, r17
    c3f4:	04 91       	lpm	r16, Z
    c3f6:	e0 2f       	mov	r30, r16
    c3f8:	f0 e0       	ldi	r31, 0x00	; 0
    c3fa:	8f 01       	movw	r16, r30
    c3fc:	0f 5f       	subi	r16, 0xFF	; 255
    c3fe:	1f 4f       	sbci	r17, 0xFF	; 255
    c400:	e0 0e       	add	r14, r16
    c402:	f1 1e       	adc	r15, r17
    c404:	d7 cf       	rjmp	.-82     	; 0xc3b4 <mugui_text_sizestring+0x38>
	}

	/* prepare return value */
	size->x = width;
    c406:	fa 01       	movw	r30, r20
    c408:	f1 82       	std	Z+1, r15	; 0x01
    c40a:	e0 82       	st	Z, r14
	size->y = height;
    c40c:	d3 83       	std	Z+3, r29	; 0x03
    c40e:	c2 83       	std	Z+2, r28	; 0x02
}
    c410:	df 91       	pop	r29
    c412:	cf 91       	pop	r28
    c414:	1f 91       	pop	r17
    c416:	0f 91       	pop	r16
    c418:	ff 90       	pop	r15
    c41a:	ef 90       	pop	r14
    c41c:	df 90       	pop	r13
    c41e:	08 95       	ret

0000c420 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    c420:	a2 ec       	ldi	r26, 0xC2	; 194
    c422:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    c424:	20 e0       	ldi	r18, 0x00	; 0
    c426:	30 e0       	ldi	r19, 0x00	; 0
    c428:	fc 01       	movw	r30, r24
    c42a:	e2 0f       	add	r30, r18
    c42c:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    c42e:	44 91       	lpm	r20, Z
    c430:	44 23       	and	r20, r20
    c432:	41 f0       	breq	.+16     	; 0xc444 <pgm_mugui_scopy+0x24>
    c434:	28 31       	cpi	r18, 0x18	; 24
    c436:	31 05       	cpc	r19, r1
    c438:	29 f0       	breq	.+10     	; 0xc444 <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    c43a:	e4 91       	lpm	r30, Z
    c43c:	ed 93       	st	X+, r30
		i++;
    c43e:	2f 5f       	subi	r18, 0xFF	; 255
    c440:	3f 4f       	sbci	r19, 0xFF	; 255
    c442:	f2 cf       	rjmp	.-28     	; 0xc428 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    c444:	f9 01       	movw	r30, r18
    c446:	ee 53       	subi	r30, 0x3E	; 62
    c448:	fa 4f       	sbci	r31, 0xFA	; 250
    c44a:	10 82       	st	Z, r1
    c44c:	08 95       	ret

0000c44e <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    c44e:	2f 92       	push	r2
    c450:	3f 92       	push	r3
    c452:	4f 92       	push	r4
    c454:	5f 92       	push	r5
    c456:	6f 92       	push	r6
    c458:	7f 92       	push	r7
    c45a:	8f 92       	push	r8
    c45c:	9f 92       	push	r9
    c45e:	af 92       	push	r10
    c460:	bf 92       	push	r11
    c462:	cf 92       	push	r12
    c464:	df 92       	push	r13
    c466:	ef 92       	push	r14
    c468:	ff 92       	push	r15
    c46a:	0f 93       	push	r16
    c46c:	1f 93       	push	r17
    c46e:	cf 93       	push	r28
    c470:	df 93       	push	r29
    c472:	cd b7       	in	r28, 0x3d	; 61
    c474:	de b7       	in	r29, 0x3e	; 62
    c476:	27 97       	sbiw	r28, 0x07	; 7
    c478:	0f b6       	in	r0, 0x3f	; 63
    c47a:	f8 94       	cli
    c47c:	de bf       	out	0x3e, r29	; 62
    c47e:	0f be       	out	0x3f, r0	; 63
    c480:	cd bf       	out	0x3d, r28	; 61
    c482:	7b 01       	movw	r14, r22
    c484:	4c 83       	std	Y+4, r20	; 0x04
    c486:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    c488:	fb 01       	movw	r30, r22
    c48a:	32 96       	adiw	r30, 0x02	; 2
    c48c:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    c48e:	32 96       	adiw	r30, 0x02	; 2
    c490:	e4 91       	lpm	r30, Z
    c492:	4e 2e       	mov	r4, r30
    c494:	51 2c       	mov	r5, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    c496:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    c498:	90 e0       	ldi	r25, 0x00	; 0
    c49a:	88 0f       	add	r24, r24
    c49c:	99 1f       	adc	r25, r25
    c49e:	fc 01       	movw	r30, r24
    c4a0:	35 96       	adiw	r30, 0x05	; 5
    c4a2:	e6 0f       	add	r30, r22
    c4a4:	f7 1f       	adc	r31, r23
    c4a6:	44 91       	lpm	r20, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    c4a8:	06 96       	adiw	r24, 0x06	; 6
    c4aa:	fb 01       	movw	r30, r22
    c4ac:	e8 0f       	add	r30, r24
    c4ae:	f9 1f       	adc	r31, r25
    c4b0:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    c4b2:	50 e0       	ldi	r21, 0x00	; 0
    c4b4:	60 e0       	ldi	r22, 0x00	; 0
    c4b6:	70 e0       	ldi	r23, 0x00	; 0
	indexaddress = indexaddress << 8;
    c4b8:	76 2f       	mov	r23, r22
    c4ba:	65 2f       	mov	r22, r21
    c4bc:	54 2f       	mov	r21, r20
    c4be:	44 27       	eor	r20, r20
	indexaddress += indexlowbyte;
    c4c0:	8a 01       	movw	r16, r20
    c4c2:	9b 01       	movw	r18, r22
    c4c4:	08 0f       	add	r16, r24
    c4c6:	11 1d       	adc	r17, r1
    c4c8:	21 1d       	adc	r18, r1
    c4ca:	31 1d       	adc	r19, r1
    c4cc:	d9 01       	movw	r26, r18
    c4ce:	c8 01       	movw	r24, r16
	width = pgm_read_byte(&font[indexaddress]);
    c4d0:	f7 01       	movw	r30, r14
    c4d2:	e0 0f       	add	r30, r16
    c4d4:	f1 1f       	adc	r31, r17
    c4d6:	e4 91       	lpm	r30, Z
    c4d8:	0e 2f       	mov	r16, r30
    c4da:	10 e0       	ldi	r17, 0x00	; 0

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    c4dc:	92 01       	movw	r18, r4
    c4de:	21 50       	subi	r18, 0x01	; 1
    c4e0:	31 09       	sbc	r19, r1
    c4e2:	43 e0       	ldi	r20, 0x03	; 3
    c4e4:	36 95       	lsr	r19
    c4e6:	27 95       	ror	r18
    c4e8:	4a 95       	dec	r20
    c4ea:	e1 f7       	brne	.-8      	; 0xc4e4 <mugui_lcd_putc+0x96>
    c4ec:	41 e0       	ldi	r20, 0x01	; 1
    c4ee:	42 0f       	add	r20, r18
    c4f0:	49 83       	std	Y+1, r20	; 0x01
    c4f2:	24 2e       	mov	r2, r20
    c4f4:	31 2c       	mov	r3, r1
    c4f6:	fc 01       	movw	r30, r24
    c4f8:	31 96       	adiw	r30, 0x01	; 1
    c4fa:	ff 83       	std	Y+7, r31	; 0x07
    c4fc:	ee 83       	std	Y+6, r30	; 0x06
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    c4fe:	c1 2c       	mov	r12, r1
    c500:	d1 2c       	mov	r13, r1
    c502:	c0 16       	cp	r12, r16
    c504:	d1 06       	cpc	r13, r17
    c506:	08 f0       	brcs	.+2      	; 0xc50a <mugui_lcd_putc+0xbc>
    c508:	44 c0       	rjmp	.+136    	; 0xc592 <mugui_lcd_putc+0x144>
    c50a:	a1 2c       	mov	r10, r1
    c50c:	b1 2c       	mov	r11, r1
    c50e:	81 2c       	mov	r8, r1
    c510:	91 2c       	mov	r9, r1
    c512:	3c 81       	ldd	r19, Y+4	; 0x04
    c514:	3c 0d       	add	r19, r12
    c516:	3a 83       	std	Y+2, r19	; 0x02
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    c518:	39 81       	ldd	r19, Y+1	; 0x01
    c51a:	a3 16       	cp	r10, r19
    c51c:	80 f5       	brcc	.+96     	; 0xc57e <mugui_lcd_putc+0x130>
    c51e:	ee 81       	ldd	r30, Y+6	; 0x06
    c520:	ff 81       	ldd	r31, Y+7	; 0x07
    c522:	ea 0d       	add	r30, r10
    c524:	fb 1d       	adc	r31, r11
    c526:	ee 0d       	add	r30, r14
    c528:	ff 1d       	adc	r31, r15
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    c52a:	34 91       	lpm	r19, Z
    c52c:	3b 83       	std	Y+3, r19	; 0x03
    c52e:	61 2c       	mov	r6, r1
    c530:	71 2c       	mov	r7, r1
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    c532:	84 14       	cp	r8, r4
    c534:	95 04       	cpc	r9, r5
    c536:	f8 f4       	brcc	.+62     	; 0xc576 <mugui_lcd_putc+0x128>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    c538:	81 e0       	ldi	r24, 0x01	; 1
    c53a:	90 e0       	ldi	r25, 0x00	; 0
    c53c:	06 2c       	mov	r0, r6
    c53e:	01 c0       	rjmp	.+2      	; 0xc542 <mugui_lcd_putc+0xf4>
    c540:	88 0f       	add	r24, r24
    c542:	0a 94       	dec	r0
    c544:	ea f7       	brpl	.-6      	; 0xc540 <mugui_lcd_putc+0xf2>
					bit = data & mask;
    c546:	3b 81       	ldd	r19, Y+3	; 0x03
    c548:	83 23       	and	r24, r19
    c54a:	4d 81       	ldd	r20, Y+5	; 0x05
    c54c:	48 0d       	add	r20, r8
					if(bit)
    c54e:	88 23       	and	r24, r24
    c550:	11 f0       	breq	.+4      	; 0xc556 <mugui_lcd_putc+0x108>
					{
						setpixel(buffer,tx+x,ty+y,1);
    c552:	21 e0       	ldi	r18, 0x01	; 1
    c554:	01 c0       	rjmp	.+2      	; 0xc558 <mugui_lcd_putc+0x10a>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    c556:	20 e0       	ldi	r18, 0x00	; 0
    c558:	6a 81       	ldd	r22, Y+2	; 0x02
    c55a:	80 e0       	ldi	r24, 0x00	; 0
    c55c:	91 e0       	ldi	r25, 0x01	; 1
    c55e:	0e 94 d7 36 	call	0x6dae	; 0x6dae <setpixel>
					}
					ty++;
    c562:	4f ef       	ldi	r20, 0xFF	; 255
    c564:	84 1a       	sub	r8, r20
    c566:	94 0a       	sbc	r9, r20
    c568:	8f ef       	ldi	r24, 0xFF	; 255
    c56a:	68 1a       	sub	r6, r24
    c56c:	78 0a       	sbc	r7, r24
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    c56e:	98 e0       	ldi	r25, 0x08	; 8
    c570:	69 16       	cp	r6, r25
    c572:	71 04       	cpc	r7, r1
    c574:	f1 f6       	brne	.-68     	; 0xc532 <mugui_lcd_putc+0xe4>
    c576:	af ef       	ldi	r26, 0xFF	; 255
    c578:	aa 1a       	sub	r10, r26
    c57a:	ba 0a       	sbc	r11, r26
    c57c:	cd cf       	rjmp	.-102    	; 0xc518 <mugui_lcd_putc+0xca>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    c57e:	4f ef       	ldi	r20, 0xFF	; 255
    c580:	c4 1a       	sub	r12, r20
    c582:	d4 0a       	sbc	r13, r20
    c584:	8e 81       	ldd	r24, Y+6	; 0x06
    c586:	9f 81       	ldd	r25, Y+7	; 0x07
    c588:	82 0d       	add	r24, r2
    c58a:	93 1d       	adc	r25, r3
    c58c:	9f 83       	std	Y+7, r25	; 0x07
    c58e:	8e 83       	std	Y+6, r24	; 0x06
    c590:	b8 cf       	rjmp	.-144    	; 0xc502 <mugui_lcd_putc+0xb4>
			}
		}
	}

	return width;
}
    c592:	c8 01       	movw	r24, r16
    c594:	27 96       	adiw	r28, 0x07	; 7
    c596:	0f b6       	in	r0, 0x3f	; 63
    c598:	f8 94       	cli
    c59a:	de bf       	out	0x3e, r29	; 62
    c59c:	0f be       	out	0x3f, r0	; 63
    c59e:	cd bf       	out	0x3d, r28	; 61
    c5a0:	df 91       	pop	r29
    c5a2:	cf 91       	pop	r28
    c5a4:	1f 91       	pop	r17
    c5a6:	0f 91       	pop	r16
    c5a8:	ff 90       	pop	r15
    c5aa:	ef 90       	pop	r14
    c5ac:	df 90       	pop	r13
    c5ae:	cf 90       	pop	r12
    c5b0:	bf 90       	pop	r11
    c5b2:	af 90       	pop	r10
    c5b4:	9f 90       	pop	r9
    c5b6:	8f 90       	pop	r8
    c5b8:	7f 90       	pop	r7
    c5ba:	6f 90       	pop	r6
    c5bc:	5f 90       	pop	r5
    c5be:	4f 90       	pop	r4
    c5c0:	3f 90       	pop	r3
    c5c2:	2f 90       	pop	r2
    c5c4:	08 95       	ret

0000c5c6 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    c5c6:	af 92       	push	r10
    c5c8:	bf 92       	push	r11
    c5ca:	cf 92       	push	r12
    c5cc:	df 92       	push	r13
    c5ce:	ef 92       	push	r14
    c5d0:	ff 92       	push	r15
    c5d2:	0f 93       	push	r16
    c5d4:	1f 93       	push	r17
    c5d6:	cf 93       	push	r28
    c5d8:	df 93       	push	r29
    c5da:	ec 01       	movw	r28, r24
    c5dc:	7b 01       	movw	r14, r22
    c5de:	6a 01       	movw	r12, r20
    c5e0:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    c5e2:	00 e0       	ldi	r16, 0x00	; 0
    c5e4:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    c5e6:	ce 01       	movw	r24, r28
    c5e8:	fe 01       	movw	r30, r28
    c5ea:	24 91       	lpm	r18, Z
    c5ec:	22 23       	and	r18, r18
    c5ee:	71 f0       	breq	.+28     	; 0xc60c <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    c5f0:	21 96       	adiw	r28, 0x01	; 1
    c5f2:	fc 01       	movw	r30, r24
    c5f4:	84 91       	lpm	r24, Z
    c5f6:	a8 01       	movw	r20, r16
    c5f8:	4c 0d       	add	r20, r12
    c5fa:	5d 1d       	adc	r21, r13
    c5fc:	95 01       	movw	r18, r10
    c5fe:	b7 01       	movw	r22, r14
    c600:	0e 94 27 62 	call	0xc44e	; 0xc44e <mugui_lcd_putc>
    c604:	01 96       	adiw	r24, 0x01	; 1
    c606:	08 0f       	add	r16, r24
    c608:	19 1f       	adc	r17, r25
    c60a:	ed cf       	rjmp	.-38     	; 0xc5e6 <pgm_mugui_lcd_puts+0x20>
	}
}
    c60c:	df 91       	pop	r29
    c60e:	cf 91       	pop	r28
    c610:	1f 91       	pop	r17
    c612:	0f 91       	pop	r16
    c614:	ff 90       	pop	r15
    c616:	ef 90       	pop	r14
    c618:	df 90       	pop	r13
    c61a:	cf 90       	pop	r12
    c61c:	bf 90       	pop	r11
    c61e:	af 90       	pop	r10
    c620:	08 95       	ret

0000c622 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    c622:	8f 92       	push	r8
    c624:	9f 92       	push	r9
    c626:	af 92       	push	r10
    c628:	bf 92       	push	r11
    c62a:	cf 92       	push	r12
    c62c:	df 92       	push	r13
    c62e:	ef 92       	push	r14
    c630:	ff 92       	push	r15
    c632:	0f 93       	push	r16
    c634:	1f 93       	push	r17
    c636:	cf 93       	push	r28
    c638:	df 93       	push	r29
    c63a:	7b 01       	movw	r14, r22
    c63c:	6a 01       	movw	r12, r20
    c63e:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    c640:	fc 01       	movw	r30, r24
    c642:	01 90       	ld	r0, Z+
    c644:	00 20       	and	r0, r0
    c646:	e9 f7       	brne	.-6      	; 0xc642 <mugui_lcd_puts+0x20>
    c648:	ec 01       	movw	r28, r24
    c64a:	cf 01       	movw	r24, r30
    c64c:	01 97       	sbiw	r24, 0x01	; 1
    c64e:	4c 01       	movw	r8, r24
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    c650:	00 e0       	ldi	r16, 0x00	; 0
    c652:	10 e0       	ldi	r17, 0x00	; 0
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    c654:	c8 15       	cp	r28, r8
    c656:	d9 05       	cpc	r29, r9
    c658:	61 f0       	breq	.+24     	; 0xc672 <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    c65a:	a8 01       	movw	r20, r16
    c65c:	4c 0d       	add	r20, r12
    c65e:	5d 1d       	adc	r21, r13
    c660:	95 01       	movw	r18, r10
    c662:	b7 01       	movw	r22, r14
    c664:	89 91       	ld	r24, Y+
    c666:	0e 94 27 62 	call	0xc44e	; 0xc44e <mugui_lcd_putc>
    c66a:	01 96       	adiw	r24, 0x01	; 1
    c66c:	08 0f       	add	r16, r24
    c66e:	19 1f       	adc	r17, r25
    c670:	f1 cf       	rjmp	.-30     	; 0xc654 <mugui_lcd_puts+0x32>
	}
}
    c672:	df 91       	pop	r29
    c674:	cf 91       	pop	r28
    c676:	1f 91       	pop	r17
    c678:	0f 91       	pop	r16
    c67a:	ff 90       	pop	r15
    c67c:	ef 90       	pop	r14
    c67e:	df 90       	pop	r13
    c680:	cf 90       	pop	r12
    c682:	bf 90       	pop	r11
    c684:	af 90       	pop	r10
    c686:	9f 90       	pop	r9
    c688:	8f 90       	pop	r8
    c68a:	08 95       	ret

0000c68c <Sensor_PID>:
float HPF_I = 0;
float fsample = 0;
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    c68c:	2f 92       	push	r2
    c68e:	3f 92       	push	r3
    c690:	4f 92       	push	r4
    c692:	5f 92       	push	r5
    c694:	6f 92       	push	r6
    c696:	7f 92       	push	r7
    c698:	8f 92       	push	r8
    c69a:	9f 92       	push	r9
    c69c:	af 92       	push	r10
    c69e:	bf 92       	push	r11
    c6a0:	cf 92       	push	r12
    c6a2:	df 92       	push	r13
    c6a4:	ef 92       	push	r14
    c6a6:	ff 92       	push	r15
    c6a8:	0f 93       	push	r16
    c6aa:	1f 93       	push	r17
    c6ac:	cf 93       	push	r28
    c6ae:	df 93       	push	r29
    c6b0:	cd b7       	in	r28, 0x3d	; 61
    c6b2:	de b7       	in	r29, 0x3e	; 62
    c6b4:	a7 97       	sbiw	r28, 0x27	; 39
    c6b6:	0f b6       	in	r0, 0x3f	; 63
    c6b8:	f8 94       	cli
    c6ba:	de bf       	out	0x3e, r29	; 62
    c6bc:	0f be       	out	0x3f, r0	; 63
    c6be:	cd bf       	out	0x3d, r28	; 61
    c6c0:	6c a3       	std	Y+36, r22	; 0x24
    c6c2:	7d a3       	std	Y+37, r23	; 0x25
    c6c4:	8e a3       	std	Y+38, r24	; 0x26
    c6c6:	9f a3       	std	Y+39, r25	; 0x27
	float tempf1 = 0;
    c6c8:	1d 86       	std	Y+13, r1	; 0x0d
    c6ca:	1e 86       	std	Y+14, r1	; 0x0e
    c6cc:	1f 86       	std	Y+15, r1	; 0x0f
    c6ce:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    c6d0:	80 91 85 09 	lds	r24, 0x0985
    c6d4:	90 91 86 09 	lds	r25, 0x0986
    c6d8:	91 95       	neg	r25
    c6da:	81 95       	neg	r24
    c6dc:	91 09       	sbc	r25, r1
    c6de:	98 87       	std	Y+8, r25	; 0x08
    c6e0:	8f 83       	std	Y+7, r24	; 0x07
    c6e2:	80 91 87 09 	lds	r24, 0x0987
    c6e6:	90 91 88 09 	lds	r25, 0x0988
    c6ea:	9a 87       	std	Y+10, r25	; 0x0a
    c6ec:	89 87       	std	Y+9, r24	; 0x09
    c6ee:	80 91 89 09 	lds	r24, 0x0989
    c6f2:	90 91 8a 09 	lds	r25, 0x098A
    c6f6:	9c 87       	std	Y+12, r25	; 0x0c
    c6f8:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    c6fa:	80 91 71 06 	lds	r24, 0x0671
    c6fe:	89 83       	std	Y+1, r24	; 0x01
    c700:	80 91 77 06 	lds	r24, 0x0677
    c704:	8a 83       	std	Y+2, r24	; 0x02
    c706:	80 91 7d 06 	lds	r24, 0x067D
    c70a:	8b 83       	std	Y+3, r24	; 0x03
    c70c:	80 91 85 06 	lds	r24, 0x0685
    c710:	8c 83       	std	Y+4, r24	; 0x04
    c712:	80 91 8b 06 	lds	r24, 0x068B
    c716:	8d 83       	std	Y+5, r24	; 0x05
    c718:	80 91 91 06 	lds	r24, 0x0691
    c71c:	8e 83       	std	Y+6, r24	; 0x06
	//************************************************************
	// Create a measure of gyro noise
	//************************************************************

	// Only bother when display vibration info is set to "ON"
	if (Config.Vibration == ON)
    c71e:	80 91 6c 06 	lds	r24, 0x066C
    c722:	81 30       	cpi	r24, 0x01	; 1
    c724:	09 f0       	breq	.+2      	; 0xc728 <Sensor_PID+0x9c>
    c726:	d8 c0       	rjmp	.+432    	; 0xc8d8 <Sensor_PID+0x24c>
	{
		// Work out quick average of all raw gyros and take the absolute value
		fsample = (float)(gyroADC_raw[ROLL] + gyroADC_raw[PITCH] + gyroADC_raw[YAW]);
    c728:	60 91 e1 05 	lds	r22, 0x05E1
    c72c:	70 91 e2 05 	lds	r23, 0x05E2
    c730:	80 91 e3 05 	lds	r24, 0x05E3
    c734:	90 91 e4 05 	lds	r25, 0x05E4
    c738:	68 0f       	add	r22, r24
    c73a:	79 1f       	adc	r23, r25
    c73c:	80 91 e5 05 	lds	r24, 0x05E5
    c740:	90 91 e6 05 	lds	r25, 0x05E6
    c744:	68 0f       	add	r22, r24
    c746:	79 1f       	adc	r23, r25
    c748:	07 2e       	mov	r0, r23
    c74a:	00 0c       	add	r0, r0
    c74c:	88 0b       	sbc	r24, r24
    c74e:	99 0b       	sbc	r25, r25
    c750:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    c754:	4b 01       	movw	r8, r22
    c756:	5c 01       	movw	r10, r24

		// HPF example from http://www.codeproject.com/Tips/681745/Csharp-Discrete-Time-RLC-Low-High-Pass-Filter-Rout
		// Some values preset for a 10Hz cutoff at 500Hz sample rate
		HPF_T = (fsample * HPF_O) - HPF_V;
    c758:	40 90 64 05 	lds	r4, 0x0564
    c75c:	50 90 65 05 	lds	r5, 0x0565
    c760:	60 90 66 05 	lds	r6, 0x0566
    c764:	70 90 67 05 	lds	r7, 0x0567
    c768:	2d ef       	ldi	r18, 0xFD	; 253
    c76a:	3d ea       	ldi	r19, 0xAD	; 173
    c76c:	40 e8       	ldi	r20, 0x80	; 128
    c76e:	5e e3       	ldi	r21, 0x3E	; 62
    c770:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    c774:	a3 01       	movw	r20, r6
    c776:	92 01       	movw	r18, r4
    c778:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    c77c:	6b 01       	movw	r12, r22
    c77e:	7c 01       	movw	r14, r24
    c780:	60 93 60 05 	sts	0x0560, r22
    c784:	70 93 61 05 	sts	0x0561, r23
    c788:	80 93 62 05 	sts	0x0562, r24
    c78c:	90 93 63 05 	sts	0x0563, r25
		HPF_V += (HPF_I + HPF_T) / HPF_C;
    c790:	80 91 5c 05 	lds	r24, 0x055C
    c794:	90 91 5d 05 	lds	r25, 0x055D
    c798:	a0 91 5e 05 	lds	r26, 0x055E
    c79c:	b0 91 5f 05 	lds	r27, 0x055F
    c7a0:	89 8b       	std	Y+17, r24	; 0x11
    c7a2:	9a 8b       	std	Y+18, r25	; 0x12
    c7a4:	ab 8b       	std	Y+19, r26	; 0x13
    c7a6:	bc 8b       	std	Y+20, r27	; 0x14
    c7a8:	a7 01       	movw	r20, r14
    c7aa:	96 01       	movw	r18, r12
    c7ac:	bc 01       	movw	r22, r24
    c7ae:	cd 01       	movw	r24, r26
    c7b0:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    c7b4:	2d ed       	ldi	r18, 0xDD	; 221
    c7b6:	35 ea       	ldi	r19, 0xA5	; 165
    c7b8:	4e e7       	ldi	r20, 0x7E	; 126
    c7ba:	50 e4       	ldi	r21, 0x40	; 64
    c7bc:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    c7c0:	9b 01       	movw	r18, r22
    c7c2:	ac 01       	movw	r20, r24
    c7c4:	c3 01       	movw	r24, r6
    c7c6:	b2 01       	movw	r22, r4
    c7c8:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    c7cc:	2b 01       	movw	r4, r22
    c7ce:	3c 01       	movw	r6, r24
    c7d0:	60 93 64 05 	sts	0x0564, r22
    c7d4:	70 93 65 05 	sts	0x0565, r23
    c7d8:	80 93 66 05 	sts	0x0566, r24
    c7dc:	90 93 67 05 	sts	0x0567, r25
		HPF_I += HPF_T / HPF_L;
    c7e0:	2d ed       	ldi	r18, 0xDD	; 221
    c7e2:	35 ea       	ldi	r19, 0xA5	; 165
    c7e4:	4e e7       	ldi	r20, 0x7E	; 126
    c7e6:	50 e4       	ldi	r21, 0x40	; 64
    c7e8:	c7 01       	movw	r24, r14
    c7ea:	b6 01       	movw	r22, r12
    c7ec:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    c7f0:	9b 01       	movw	r18, r22
    c7f2:	ac 01       	movw	r20, r24
    c7f4:	69 89       	ldd	r22, Y+17	; 0x11
    c7f6:	7a 89       	ldd	r23, Y+18	; 0x12
    c7f8:	8b 89       	ldd	r24, Y+19	; 0x13
    c7fa:	9c 89       	ldd	r25, Y+20	; 0x14
    c7fc:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    c800:	60 93 5c 05 	sts	0x055C, r22
    c804:	70 93 5d 05 	sts	0x055D, r23
    c808:	80 93 5e 05 	sts	0x055E, r24
    c80c:	90 93 5f 05 	sts	0x055F, r25
		fsample -= HPF_V / HPF_O;
    c810:	2d ef       	ldi	r18, 0xFD	; 253
    c812:	3d ea       	ldi	r19, 0xAD	; 173
    c814:	40 e8       	ldi	r20, 0x80	; 128
    c816:	5e e3       	ldi	r21, 0x3E	; 62
    c818:	c3 01       	movw	r24, r6
    c81a:	b2 01       	movw	r22, r4
    c81c:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    c820:	9b 01       	movw	r18, r22
    c822:	ac 01       	movw	r20, r24
    c824:	c5 01       	movw	r24, r10
    c826:	b4 01       	movw	r22, r8
    c828:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    c82c:	4b 01       	movw	r8, r22
    c82e:	5c 01       	movw	r10, r24
    c830:	60 93 58 05 	sts	0x0558, r22
    c834:	70 93 59 05 	sts	0x0559, r23
    c838:	80 93 5a 05 	sts	0x055A, r24
    c83c:	90 93 5b 05 	sts	0x055B, r25

		// LPF filter the readings so that they are more persistent
		GyroAvgNoise = ((GyroAvgNoise * 99.0f) + abs(fsample)) / 100.0f;
    c840:	20 e0       	ldi	r18, 0x00	; 0
    c842:	30 e0       	ldi	r19, 0x00	; 0
    c844:	46 ec       	ldi	r20, 0xC6	; 198
    c846:	52 e4       	ldi	r21, 0x42	; 66
    c848:	60 91 7d 09 	lds	r22, 0x097D
    c84c:	70 91 7e 09 	lds	r23, 0x097E
    c850:	80 91 7f 09 	lds	r24, 0x097F
    c854:	90 91 80 09 	lds	r25, 0x0980
    c858:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    c85c:	6b 01       	movw	r12, r22
    c85e:	7c 01       	movw	r14, r24
    c860:	c5 01       	movw	r24, r10
    c862:	b4 01       	movw	r22, r8
    c864:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    c868:	9b 01       	movw	r18, r22
    c86a:	77 ff       	sbrs	r23, 7
    c86c:	04 c0       	rjmp	.+8      	; 0xc876 <Sensor_PID+0x1ea>
    c86e:	22 27       	eor	r18, r18
    c870:	33 27       	eor	r19, r19
    c872:	26 1b       	sub	r18, r22
    c874:	37 0b       	sbc	r19, r23
    c876:	b9 01       	movw	r22, r18
    c878:	33 0f       	add	r19, r19
    c87a:	88 0b       	sbc	r24, r24
    c87c:	99 0b       	sbc	r25, r25
    c87e:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    c882:	9b 01       	movw	r18, r22
    c884:	ac 01       	movw	r20, r24
    c886:	c7 01       	movw	r24, r14
    c888:	b6 01       	movw	r22, r12
    c88a:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    c88e:	20 e0       	ldi	r18, 0x00	; 0
    c890:	30 e0       	ldi	r19, 0x00	; 0
    c892:	48 ec       	ldi	r20, 0xC8	; 200
    c894:	52 e4       	ldi	r21, 0x42	; 66
    c896:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    c89a:	6b 01       	movw	r12, r22
    c89c:	7c 01       	movw	r14, r24

		// Limit noise reading to 999
		if (GyroAvgNoise > 999.0f)
    c89e:	20 e0       	ldi	r18, 0x00	; 0
    c8a0:	30 ec       	ldi	r19, 0xC0	; 192
    c8a2:	49 e7       	ldi	r20, 0x79	; 121
    c8a4:	54 e4       	ldi	r21, 0x44	; 68
    c8a6:	0e 94 ed 6e 	call	0xddda	; 0xddda <__gesf2>
    c8aa:	18 16       	cp	r1, r24
    c8ac:	4c f0       	brlt	.+18     	; 0xc8c0 <Sensor_PID+0x234>
		HPF_V += (HPF_I + HPF_T) / HPF_C;
		HPF_I += HPF_T / HPF_L;
		fsample -= HPF_V / HPF_O;

		// LPF filter the readings so that they are more persistent
		GyroAvgNoise = ((GyroAvgNoise * 99.0f) + abs(fsample)) / 100.0f;
    c8ae:	c0 92 7d 09 	sts	0x097D, r12
    c8b2:	d0 92 7e 09 	sts	0x097E, r13
    c8b6:	e0 92 7f 09 	sts	0x097F, r14
    c8ba:	f0 92 80 09 	sts	0x0980, r15
    c8be:	0c c0       	rjmp	.+24     	; 0xc8d8 <Sensor_PID+0x24c>

		// Limit noise reading to 999
		if (GyroAvgNoise > 999.0f)
		{
			GyroAvgNoise = 999.0f;
    c8c0:	80 e0       	ldi	r24, 0x00	; 0
    c8c2:	90 ec       	ldi	r25, 0xC0	; 192
    c8c4:	a9 e7       	ldi	r26, 0x79	; 121
    c8c6:	b4 e4       	ldi	r27, 0x44	; 68
    c8c8:	80 93 7d 09 	sts	0x097D, r24
    c8cc:	90 93 7e 09 	sts	0x097E, r25
    c8d0:	a0 93 7f 09 	sts	0x097F, r26
    c8d4:	b0 93 80 09 	sts	0x0980, r27
    c8d8:	de 01       	movw	r26, r28
    c8da:	11 96       	adiw	r26, 0x01	; 1
    c8dc:	b9 a3       	std	Y+33, r27	; 0x21
    c8de:	a8 a3       	std	Y+32, r26	; 0x20
    c8e0:	e1 e7       	ldi	r30, 0x71	; 113
    c8e2:	f9 e0       	ldi	r31, 0x09	; 9
    c8e4:	fe 8f       	std	Y+30, r31	; 0x1e
    c8e6:	ed 8f       	std	Y+29, r30	; 0x1d
    c8e8:	01 e2       	ldi	r16, 0x21	; 33
    c8ea:	19 e0       	ldi	r17, 0x09	; 9
    c8ec:	29 e3       	ldi	r18, 0x39	; 57
    c8ee:	36 e0       	ldi	r19, 0x06	; 6
    c8f0:	38 8f       	std	Y+24, r19	; 0x18
    c8f2:	2f 8b       	std	Y+23, r18	; 0x17
    c8f4:	8d e4       	ldi	r24, 0x4D	; 77
    c8f6:	99 e0       	ldi	r25, 0x09	; 9
    c8f8:	9a 8b       	std	Y+18, r25	; 0x12
    c8fa:	89 8b       	std	Y+17, r24	; 0x11
    c8fc:	ab ed       	ldi	r26, 0xDB	; 219
    c8fe:	b5 e0       	ldi	r27, 0x05	; 5
    c900:	be 8b       	std	Y+22, r27	; 0x16
    c902:	ad 8b       	std	Y+21, r26	; 0x15
    c904:	1e 01       	movw	r2, r28
    c906:	b7 e0       	ldi	r27, 0x07	; 7
    c908:	2b 0e       	add	r2, r27
    c90a:	31 1c       	adc	r3, r1
    c90c:	fe 01       	movw	r30, r28
    c90e:	34 96       	adiw	r30, 0x04	; 4
    c910:	fb a3       	std	Y+35, r31	; 0x23
    c912:	ea a3       	std	Y+34, r30	; 0x22
float HPF_I = 0;
float fsample = 0;
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    c914:	1f 8e       	std	Y+31, r1	; 0x1f
		//************************************************************
		// Work out stick rate divider. 0 is slowest, 7 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244), /2 (488), /1 (976), *2 (1952)
		//************************************************************

		if (Stick_rates[P1][axis] <= 6)
    c916:	a8 a1       	ldd	r26, Y+32	; 0x20
    c918:	b9 a1       	ldd	r27, Y+33	; 0x21
    c91a:	2d 91       	ld	r18, X+
    c91c:	b9 a3       	std	Y+33, r27	; 0x21
    c91e:	a8 a3       	std	Y+32, r26	; 0x20
    c920:	82 2f       	mov	r24, r18
    c922:	02 2e       	mov	r0, r18
    c924:	00 0c       	add	r0, r0
    c926:	99 0b       	sbc	r25, r25
    c928:	27 30       	cpi	r18, 0x07	; 7
    c92a:	6c f4       	brge	.+26     	; 0xc946 <Sensor_PID+0x2ba>
		{
			stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    c92c:	e6 e0       	ldi	r30, 0x06	; 6
    c92e:	f0 e0       	ldi	r31, 0x00	; 0
    c930:	e8 1b       	sub	r30, r24
    c932:	f9 0b       	sbc	r31, r25
    c934:	d1 01       	movw	r26, r2
    c936:	6d 90       	ld	r6, X+
    c938:	7c 90       	ld	r7, X
    c93a:	02 c0       	rjmp	.+4      	; 0xc940 <Sensor_PID+0x2b4>
    c93c:	75 94       	asr	r7
    c93e:	67 94       	ror	r6
    c940:	ea 95       	dec	r30
    c942:	e2 f7       	brpl	.-8      	; 0xc93c <Sensor_PID+0x2b0>
    c944:	09 c0       	rjmp	.+18     	; 0xc958 <Sensor_PID+0x2cc>
		}
		else
		{
			stick_P1 = RCinputsAxis[axis] << ((Stick_rates[P1][axis]) - 6);
    c946:	06 97       	sbiw	r24, 0x06	; 6
    c948:	f1 01       	movw	r30, r2
    c94a:	60 80       	ld	r6, Z
    c94c:	71 80       	ldd	r7, Z+1	; 0x01
    c94e:	02 c0       	rjmp	.+4      	; 0xc954 <Sensor_PID+0x2c8>
    c950:	66 0c       	add	r6, r6
    c952:	77 1c       	adc	r7, r7
    c954:	8a 95       	dec	r24
    c956:	e2 f7       	brpl	.-8      	; 0xc950 <Sensor_PID+0x2c4>
		}
		
		if (Stick_rates[P2][axis] <= 6)
    c958:	aa a1       	ldd	r26, Y+34	; 0x22
    c95a:	bb a1       	ldd	r27, Y+35	; 0x23
    c95c:	2d 91       	ld	r18, X+
    c95e:	bb a3       	std	Y+35, r27	; 0x23
    c960:	aa a3       	std	Y+34, r26	; 0x22
    c962:	82 2f       	mov	r24, r18
    c964:	02 2e       	mov	r0, r18
    c966:	00 0c       	add	r0, r0
    c968:	99 0b       	sbc	r25, r25
    c96a:	27 30       	cpi	r18, 0x07	; 7
    c96c:	6c f4       	brge	.+26     	; 0xc988 <Sensor_PID+0x2fc>
		{
			stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    c96e:	e6 e0       	ldi	r30, 0x06	; 6
    c970:	f0 e0       	ldi	r31, 0x00	; 0
    c972:	e8 1b       	sub	r30, r24
    c974:	f9 0b       	sbc	r31, r25
    c976:	d1 01       	movw	r26, r2
    c978:	4d 90       	ld	r4, X+
    c97a:	5c 90       	ld	r5, X
    c97c:	02 c0       	rjmp	.+4      	; 0xc982 <Sensor_PID+0x2f6>
    c97e:	55 94       	asr	r5
    c980:	47 94       	ror	r4
    c982:	ea 95       	dec	r30
    c984:	e2 f7       	brpl	.-8      	; 0xc97e <Sensor_PID+0x2f2>
    c986:	09 c0       	rjmp	.+18     	; 0xc99a <Sensor_PID+0x30e>
		}
		else
		{
			stick_P2 = RCinputsAxis[axis] << ((Stick_rates[P2][axis]) - 6);
    c988:	06 97       	sbiw	r24, 0x06	; 6
    c98a:	f1 01       	movw	r30, r2
    c98c:	40 80       	ld	r4, Z
    c98e:	51 80       	ldd	r5, Z+1	; 0x01
    c990:	02 c0       	rjmp	.+4      	; 0xc996 <Sensor_PID+0x30a>
    c992:	44 0c       	add	r4, r4
    c994:	55 1c       	adc	r5, r5
    c996:	8a 95       	dec	r24
    c998:	e2 f7       	brpl	.-8      	; 0xc992 <Sensor_PID+0x306>
		// Gyro LPF
		//************************************************************	

		// Lookup LPF value
		// Note: Two sets of values for normal and high-speed mode
		if (Config.Servo_rate != FAST)
    c99a:	80 91 63 06 	lds	r24, 0x0663
    c99e:	60 91 e0 06 	lds	r22, 0x06E0
    c9a2:	82 30       	cpi	r24, 0x02	; 2
    c9a4:	39 f0       	breq	.+14     	; 0xc9b4 <Sensor_PID+0x328>
		{
			memcpy_P(&tempf1, &LPF_lookup[Config.Gyro_LPF], sizeof(float));
    c9a6:	f4 e0       	ldi	r31, 0x04	; 4
    c9a8:	6f 02       	muls	r22, r31
    c9aa:	b0 01       	movw	r22, r0
    c9ac:	11 24       	eor	r1, r1
    c9ae:	6b 54       	subi	r22, 0x4B	; 75
    c9b0:	7b 4d       	sbci	r23, 0xDB	; 219
    c9b2:	06 c0       	rjmp	.+12     	; 0xc9c0 <Sensor_PID+0x334>
		}
		else
		{
			memcpy_P(&tempf1, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float));
    c9b4:	24 e0       	ldi	r18, 0x04	; 4
    c9b6:	62 02       	muls	r22, r18
    c9b8:	b0 01       	movw	r22, r0
    c9ba:	11 24       	eor	r1, r1
    c9bc:	6b 56       	subi	r22, 0x6B	; 107
    c9be:	7b 4d       	sbci	r23, 0xDB	; 219
    c9c0:	44 e0       	ldi	r20, 0x04	; 4
    c9c2:	50 e0       	ldi	r21, 0x00	; 0
    c9c4:	ce 01       	movw	r24, r28
    c9c6:	0d 96       	adiw	r24, 0x0d	; 13
    c9c8:	0e 94 ff 6f 	call	0xdffe	; 0xdffe <memcpy_P>
		}		
			
		gyroADCf = gyroADC[axis]; // Promote gyro signal to suit
    c9cc:	ad 89       	ldd	r26, Y+21	; 0x15
    c9ce:	be 89       	ldd	r27, Y+22	; 0x16
    c9d0:	6d 91       	ld	r22, X+
    c9d2:	7c 91       	ld	r23, X
    c9d4:	07 2e       	mov	r0, r23
    c9d6:	00 0c       	add	r0, r0
    c9d8:	88 0b       	sbc	r24, r24
    c9da:	99 0b       	sbc	r25, r25
    c9dc:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    c9e0:	6b 01       	movw	r12, r22
    c9e2:	7c 01       	movw	r14, r24

		if (Config.Gyro_LPF != NOFILTER)
    c9e4:	80 91 e0 06 	lds	r24, 0x06E0
    c9e8:	87 30       	cpi	r24, 0x07	; 7
    c9ea:	21 f1       	breq	.+72     	; 0xca34 <Sensor_PID+0x3a8>
		{
			// Gyro LPF
			gyroSmooth[axis] = ((gyroSmooth[axis] * (tempf1 - 1.0f)) + gyroADCf) / tempf1;
    c9ec:	8d 84       	ldd	r8, Y+13	; 0x0d
    c9ee:	9e 84       	ldd	r9, Y+14	; 0x0e
    c9f0:	af 84       	ldd	r10, Y+15	; 0x0f
    c9f2:	b8 88       	ldd	r11, Y+16	; 0x10
    c9f4:	20 e0       	ldi	r18, 0x00	; 0
    c9f6:	30 e0       	ldi	r19, 0x00	; 0
    c9f8:	40 e8       	ldi	r20, 0x80	; 128
    c9fa:	5f e3       	ldi	r21, 0x3F	; 63
    c9fc:	c5 01       	movw	r24, r10
    c9fe:	b4 01       	movw	r22, r8
    ca00:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    ca04:	e9 89       	ldd	r30, Y+17	; 0x11
    ca06:	fa 89       	ldd	r31, Y+18	; 0x12
    ca08:	20 81       	ld	r18, Z
    ca0a:	31 81       	ldd	r19, Z+1	; 0x01
    ca0c:	42 81       	ldd	r20, Z+2	; 0x02
    ca0e:	53 81       	ldd	r21, Z+3	; 0x03
    ca10:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    ca14:	a7 01       	movw	r20, r14
    ca16:	96 01       	movw	r18, r12
    ca18:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    ca1c:	a5 01       	movw	r20, r10
    ca1e:	94 01       	movw	r18, r8
    ca20:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    ca24:	a9 89       	ldd	r26, Y+17	; 0x11
    ca26:	ba 89       	ldd	r27, Y+18	; 0x12
    ca28:	6d 93       	st	X+, r22
    ca2a:	7d 93       	st	X+, r23
    ca2c:	8d 93       	st	X+, r24
    ca2e:	9c 93       	st	X, r25
    ca30:	13 97       	sbiw	r26, 0x03	; 3
    ca32:	06 c0       	rjmp	.+12     	; 0xca40 <Sensor_PID+0x3b4>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values when filter is off
			gyroSmooth[axis] = gyroADCf;
    ca34:	e9 89       	ldd	r30, Y+17	; 0x11
    ca36:	fa 89       	ldd	r31, Y+18	; 0x12
    ca38:	c0 82       	st	Z, r12
    ca3a:	d1 82       	std	Z+1, r13	; 0x01
    ca3c:	e2 82       	std	Z+2, r14	; 0x02
    ca3e:	f3 82       	std	Z+3, r15	; 0x03
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];	
    ca40:	a9 89       	ldd	r26, Y+17	; 0x11
    ca42:	ba 89       	ldd	r27, Y+18	; 0x12
    ca44:	6d 91       	ld	r22, X+
    ca46:	7d 91       	ld	r23, X+
    ca48:	8d 91       	ld	r24, X+
    ca4a:	9c 91       	ld	r25, X
    ca4c:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    ca50:	69 8f       	std	Y+25, r22	; 0x19
    ca52:	7a 8f       	std	Y+26, r23	; 0x1a
    ca54:	8b 8f       	std	Y+27, r24	; 0x1b
    ca56:	9c 8f       	std	Y+28, r25	; 0x1c
    ca58:	29 8d       	ldd	r18, Y+25	; 0x19
    ca5a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    ca5c:	ed 89       	ldd	r30, Y+21	; 0x15
    ca5e:	fe 89       	ldd	r31, Y+22	; 0x16
    ca60:	31 83       	std	Z+1, r19	; 0x01
    ca62:	20 83       	st	Z, r18
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
    ca64:	6c a1       	ldd	r22, Y+36	; 0x24
    ca66:	7d a1       	ldd	r23, Y+37	; 0x25
    ca68:	8e a1       	ldd	r24, Y+38	; 0x26
    ca6a:	9f a1       	ldd	r25, Y+39	; 0x27
    ca6c:	0e 94 3b 6e 	call	0xdc76	; 0xdc76 <__floatunsisf>
    ca70:	20 e0       	ldi	r18, 0x00	; 0
    ca72:	30 e3       	ldi	r19, 0x30	; 48
    ca74:	4f e5       	ldi	r20, 0x5F	; 95
    ca76:	55 e4       	ldi	r21, 0x45	; 69
    ca78:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    ca7c:	4b 01       	movw	r8, r22
    ca7e:	5c 01       	movw	r10, r24
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************

		P1_temp = gyroADC[axis] + stick_P1;
    ca80:	69 8d       	ldd	r22, Y+25	; 0x19
    ca82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    ca84:	66 0d       	add	r22, r6
    ca86:	77 1d       	adc	r23, r7
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    ca88:	07 2e       	mov	r0, r23
    ca8a:	00 0c       	add	r0, r0
    ca8c:	88 0b       	sbc	r24, r24
    ca8e:	99 0b       	sbc	r25, r25
    ca90:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    ca94:	6b 01       	movw	r12, r22
    ca96:	7c 01       	movw	r14, r24
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************

		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
    ca98:	69 8d       	ldd	r22, Y+25	; 0x19
    ca9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    ca9c:	64 0d       	add	r22, r4
    ca9e:	75 1d       	adc	r23, r5
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
    caa0:	07 2e       	mov	r0, r23
    caa2:	00 0c       	add	r0, r0
    caa4:	88 0b       	sbc	r24, r24
    caa6:	99 0b       	sbc	r25, r25
    caa8:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    caac:	2b 01       	movw	r4, r22
    caae:	3c 01       	movw	r6, r24
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
    cab0:	a5 01       	movw	r20, r10
    cab2:	94 01       	movw	r18, r8
    cab4:	c7 01       	movw	r24, r14
    cab6:	b6 01       	movw	r22, r12
    cab8:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    cabc:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
		// Increment gyro I-terms
		//************************************************************
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
    cac0:	d8 01       	movw	r26, r16
    cac2:	cd 90       	ld	r12, X+
    cac4:	dd 90       	ld	r13, X+
    cac6:	ed 90       	ld	r14, X+
    cac8:	fc 90       	ld	r15, X
    caca:	c6 0e       	add	r12, r22
    cacc:	d7 1e       	adc	r13, r23
    cace:	e8 1e       	adc	r14, r24
    cad0:	f9 1e       	adc	r15, r25
    cad2:	f8 01       	movw	r30, r16
    cad4:	c0 82       	st	Z, r12
    cad6:	d1 82       	std	Z+1, r13	; 0x01
    cad8:	e2 82       	std	Z+2, r14	; 0x02
    cada:	f3 82       	std	Z+3, r15	; 0x03
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
		tempf2 = tempf2 * factor;
    cadc:	a5 01       	movw	r20, r10
    cade:	94 01       	movw	r18, r8
    cae0:	c3 01       	movw	r24, r6
    cae2:	b2 01       	movw	r22, r4
    cae4:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
		P2_temp = (int32_t)tempf2;
    cae8:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
		//************************************************************
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
		IntegralGyro[P2][axis] += P2_temp;
    caec:	d8 01       	movw	r26, r16
    caee:	1c 96       	adiw	r26, 0x0c	; 12
    caf0:	8d 90       	ld	r8, X+
    caf2:	9d 90       	ld	r9, X+
    caf4:	ad 90       	ld	r10, X+
    caf6:	bc 90       	ld	r11, X
    caf8:	1f 97       	sbiw	r26, 0x0f	; 15
    cafa:	dc 01       	movw	r26, r24
    cafc:	cb 01       	movw	r24, r22
    cafe:	88 0d       	add	r24, r8
    cb00:	99 1d       	adc	r25, r9
    cb02:	aa 1d       	adc	r26, r10
    cb04:	bb 1d       	adc	r27, r11
    cb06:	f8 01       	movw	r30, r16
    cb08:	84 87       	std	Z+12, r24	; 0x0c
    cb0a:	95 87       	std	Z+13, r25	; 0x0d
    cb0c:	a6 87       	std	Z+14, r26	; 0x0e
    cb0e:	b7 87       	std	Z+15, r27	; 0x0f
    cb10:	ef 89       	ldd	r30, Y+23	; 0x17
    cb12:	f8 8d       	ldd	r31, Y+24	; 0x18
    cb14:	e3 58       	subi	r30, 0x83	; 131
    cb16:	ff 4f       	sbci	r31, 0xFF	; 255
		// Limit the I-terms to the user-set limits
		//************************************************************
		
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    cb18:	80 81       	ld	r24, Z
    cb1a:	91 81       	ldd	r25, Z+1	; 0x01
    cb1c:	a2 81       	ldd	r26, Z+2	; 0x02
    cb1e:	b3 81       	ldd	r27, Z+3	; 0x03
    cb20:	8c 15       	cp	r24, r12
    cb22:	9d 05       	cpc	r25, r13
    cb24:	ae 05       	cpc	r26, r14
    cb26:	bf 05       	cpc	r27, r15
    cb28:	2c f4       	brge	.+10     	; 0xcb34 <Sensor_PID+0x4a8>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    cb2a:	f8 01       	movw	r30, r16
    cb2c:	80 83       	st	Z, r24
    cb2e:	91 83       	std	Z+1, r25	; 0x01
    cb30:	a2 83       	std	Z+2, r26	; 0x02
    cb32:	b3 83       	std	Z+3, r27	; 0x03
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    cb34:	b0 95       	com	r27
    cb36:	a0 95       	com	r26
    cb38:	90 95       	com	r25
    cb3a:	81 95       	neg	r24
    cb3c:	9f 4f       	sbci	r25, 0xFF	; 255
    cb3e:	af 4f       	sbci	r26, 0xFF	; 255
    cb40:	bf 4f       	sbci	r27, 0xFF	; 255
    cb42:	f8 01       	movw	r30, r16
    cb44:	40 81       	ld	r20, Z
    cb46:	51 81       	ldd	r21, Z+1	; 0x01
    cb48:	62 81       	ldd	r22, Z+2	; 0x02
    cb4a:	73 81       	ldd	r23, Z+3	; 0x03
    cb4c:	48 17       	cp	r20, r24
    cb4e:	59 07       	cpc	r21, r25
    cb50:	6a 07       	cpc	r22, r26
    cb52:	7b 07       	cpc	r23, r27
    cb54:	24 f4       	brge	.+8      	; 0xcb5e <Sensor_PID+0x4d2>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    cb56:	80 83       	st	Z, r24
    cb58:	91 83       	std	Z+1, r25	; 0x01
    cb5a:	a2 83       	std	Z+2, r26	; 0x02
    cb5c:	b3 83       	std	Z+3, r27	; 0x03
    cb5e:	ef 89       	ldd	r30, Y+23	; 0x17
    cb60:	f8 8d       	ldd	r31, Y+24	; 0x18
    cb62:	e3 57       	subi	r30, 0x73	; 115
    cb64:	ff 4f       	sbci	r31, 0xFF	; 255
		// Limit the I-terms to the user-set limits
		//************************************************************
		
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    cb66:	80 81       	ld	r24, Z
    cb68:	91 81       	ldd	r25, Z+1	; 0x01
    cb6a:	a2 81       	ldd	r26, Z+2	; 0x02
    cb6c:	b3 81       	ldd	r27, Z+3	; 0x03
    cb6e:	f8 01       	movw	r30, r16
    cb70:	44 85       	ldd	r20, Z+12	; 0x0c
    cb72:	55 85       	ldd	r21, Z+13	; 0x0d
    cb74:	66 85       	ldd	r22, Z+14	; 0x0e
    cb76:	77 85       	ldd	r23, Z+15	; 0x0f
    cb78:	84 17       	cp	r24, r20
    cb7a:	95 07       	cpc	r25, r21
    cb7c:	a6 07       	cpc	r26, r22
    cb7e:	b7 07       	cpc	r27, r23
    cb80:	24 f4       	brge	.+8      	; 0xcb8a <Sensor_PID+0x4fe>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    cb82:	84 87       	std	Z+12, r24	; 0x0c
    cb84:	95 87       	std	Z+13, r25	; 0x0d
    cb86:	a6 87       	std	Z+14, r26	; 0x0e
    cb88:	b7 87       	std	Z+15, r27	; 0x0f
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    cb8a:	b0 95       	com	r27
    cb8c:	a0 95       	com	r26
    cb8e:	90 95       	com	r25
    cb90:	81 95       	neg	r24
    cb92:	9f 4f       	sbci	r25, 0xFF	; 255
    cb94:	af 4f       	sbci	r26, 0xFF	; 255
    cb96:	bf 4f       	sbci	r27, 0xFF	; 255
    cb98:	f8 01       	movw	r30, r16
    cb9a:	44 85       	ldd	r20, Z+12	; 0x0c
    cb9c:	55 85       	ldd	r21, Z+13	; 0x0d
    cb9e:	66 85       	ldd	r22, Z+14	; 0x0e
    cba0:	77 85       	ldd	r23, Z+15	; 0x0f
    cba2:	48 17       	cp	r20, r24
    cba4:	59 07       	cpc	r21, r25
    cba6:	6a 07       	cpc	r22, r26
    cba8:	7b 07       	cpc	r23, r27
    cbaa:	24 f4       	brge	.+8      	; 0xcbb4 <Sensor_PID+0x528>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    cbac:	84 87       	std	Z+12, r24	; 0x0c
    cbae:	95 87       	std	Z+13, r25	; 0x0d
    cbb0:	a6 87       	std	Z+14, r26	; 0x0e
    cbb2:	b7 87       	std	Z+15, r27	; 0x0f

		//************************************************************
		// Sum gyro readings for P-terms for later averaging
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
    cbb4:	29 8d       	ldd	r18, Y+25	; 0x19
    cbb6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    cbb8:	c9 01       	movw	r24, r18
    cbba:	33 0f       	add	r19, r19
    cbbc:	aa 0b       	sbc	r26, r26
    cbbe:	bb 0b       	sbc	r27, r27
    cbc0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    cbc2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    cbc4:	40 81       	ld	r20, Z
    cbc6:	51 81       	ldd	r21, Z+1	; 0x01
    cbc8:	62 81       	ldd	r22, Z+2	; 0x02
    cbca:	73 81       	ldd	r23, Z+3	; 0x03
    cbcc:	84 0f       	add	r24, r20
    cbce:	95 1f       	adc	r25, r21
    cbd0:	a6 1f       	adc	r26, r22
    cbd2:	b7 1f       	adc	r27, r23
    cbd4:	81 93       	st	Z+, r24
    cbd6:	91 93       	st	Z+, r25
    cbd8:	a1 93       	st	Z+, r26
    cbda:	b1 93       	st	Z+, r27
    cbdc:	fe 8f       	std	Y+30, r31	; 0x1e
    cbde:	ed 8f       	std	Y+29, r30	; 0x1d
    cbe0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    cbe2:	ff 5f       	subi	r31, 0xFF	; 255
    cbe4:	ff 8f       	std	Y+31, r31	; 0x1f
    cbe6:	0c 5f       	subi	r16, 0xFC	; 252
    cbe8:	1f 4f       	sbci	r17, 0xFF	; 255
    cbea:	2f 89       	ldd	r18, Y+23	; 0x17
    cbec:	38 8d       	ldd	r19, Y+24	; 0x18
    cbee:	2c 5f       	subi	r18, 0xFC	; 252
    cbf0:	3f 4f       	sbci	r19, 0xFF	; 255
    cbf2:	38 8f       	std	Y+24, r19	; 0x18
    cbf4:	2f 8b       	std	Y+23, r18	; 0x17
    cbf6:	89 89       	ldd	r24, Y+17	; 0x11
    cbf8:	9a 89       	ldd	r25, Y+18	; 0x12
    cbfa:	04 96       	adiw	r24, 0x04	; 4
    cbfc:	9a 8b       	std	Y+18, r25	; 0x12
    cbfe:	89 8b       	std	Y+17, r24	; 0x11
    cc00:	ad 89       	ldd	r26, Y+21	; 0x15
    cc02:	be 89       	ldd	r27, Y+22	; 0x16
    cc04:	12 96       	adiw	r26, 0x02	; 2
    cc06:	be 8b       	std	Y+22, r27	; 0x16
    cc08:	ad 8b       	std	Y+21, r26	; 0x15
    cc0a:	b2 e0       	ldi	r27, 0x02	; 2
    cc0c:	2b 0e       	add	r2, r27
    cc0e:	31 1c       	adc	r3, r1
		{
			GyroAvgNoise = 999.0f;
		}
	}

	for (axis = 0; axis <= YAW; axis ++)
    cc10:	f3 30       	cpi	r31, 0x03	; 3
    cc12:	09 f0       	breq	.+2      	; 0xcc16 <Sensor_PID+0x58a>
    cc14:	80 ce       	rjmp	.-768    	; 0xc916 <Sensor_PID+0x28a>
		IntegralAccVertf[P2] += (accVertf + accVertZerof);		
	}

	else
	{
*/		IntegralAccVertf[P1] += accVertf;
    cc16:	c0 90 26 05 	lds	r12, 0x0526
    cc1a:	d0 90 27 05 	lds	r13, 0x0527
    cc1e:	e0 90 28 05 	lds	r14, 0x0528
    cc22:	f0 90 29 05 	lds	r15, 0x0529
		IntegralAccVertf[P2] += accVertf;		
    cc26:	20 91 49 09 	lds	r18, 0x0949
    cc2a:	30 91 4a 09 	lds	r19, 0x094A
    cc2e:	40 91 4b 09 	lds	r20, 0x094B
    cc32:	50 91 4c 09 	lds	r21, 0x094C
    cc36:	c7 01       	movw	r24, r14
    cc38:	b6 01       	movw	r22, r12
    cc3a:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
    cc3e:	4b 01       	movw	r8, r22
    cc40:	5c 01       	movw	r10, r24

/*	
	IntegralAccVertf[P1] = IntegralAccVertf[P1] * 0.9995f;			// Decimator. Shrink integrals by .05%
	IntegralAccVertf[P2] = IntegralAccVertf[P2] * 0.9995f;
*/
	tempf1 = Config.AccVertFilter;	// Promote AccVertfilter (0 to 127)
    cc42:	80 91 6d 06 	lds	r24, 0x066D
    cc46:	68 2f       	mov	r22, r24
    cc48:	88 0f       	add	r24, r24
    cc4a:	77 0b       	sbc	r23, r23
    cc4c:	88 0b       	sbc	r24, r24
    cc4e:	99 0b       	sbc	r25, r25
    cc50:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
	tempf1 = tempf1 / 10000.0f;
    cc54:	20 e0       	ldi	r18, 0x00	; 0
    cc56:	30 e4       	ldi	r19, 0x40	; 64
    cc58:	4c e1       	ldi	r20, 0x1C	; 28
    cc5a:	56 e4       	ldi	r21, 0x46	; 70
    cc5c:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <__divsf3>
    cc60:	9b 01       	movw	r18, r22
    cc62:	ac 01       	movw	r20, r24
	tempf1 = 1.0f - tempf1;
    cc64:	60 e0       	ldi	r22, 0x00	; 0
    cc66:	70 e0       	ldi	r23, 0x00	; 0
    cc68:	80 e8       	ldi	r24, 0x80	; 128
    cc6a:	9f e3       	ldi	r25, 0x3F	; 63
    cc6c:	0e 94 21 6d 	call	0xda42	; 0xda42 <__subsf3>
    cc70:	2b 01       	movw	r4, r22
    cc72:	3c 01       	movw	r6, r24
		IntegralAccVertf[P2] += (accVertf + accVertZerof);		
	}

	else
	{
*/		IntegralAccVertf[P1] += accVertf;
    cc74:	20 91 45 09 	lds	r18, 0x0945
    cc78:	30 91 46 09 	lds	r19, 0x0946
    cc7c:	40 91 47 09 	lds	r20, 0x0947
    cc80:	50 91 48 09 	lds	r21, 0x0948
    cc84:	c7 01       	movw	r24, r14
    cc86:	b6 01       	movw	r22, r12
    cc88:	0e 94 22 6d 	call	0xda44	; 0xda44 <__addsf3>
*/
	tempf1 = Config.AccVertFilter;	// Promote AccVertfilter (0 to 127)
	tempf1 = tempf1 / 10000.0f;
	tempf1 = 1.0f - tempf1;
	
	IntegralAccVertf[P1] = IntegralAccVertf[P1] * tempf1;			// Decimator. Shrink integrals by user-set amount
    cc8c:	a3 01       	movw	r20, r6
    cc8e:	92 01       	movw	r18, r4
    cc90:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    cc94:	60 93 45 09 	sts	0x0945, r22
    cc98:	70 93 46 09 	sts	0x0946, r23
    cc9c:	80 93 47 09 	sts	0x0947, r24
    cca0:	90 93 48 09 	sts	0x0948, r25
	IntegralAccVertf[P2] = IntegralAccVertf[P2] * tempf1;
    cca4:	a3 01       	movw	r20, r6
    cca6:	92 01       	movw	r18, r4
    cca8:	c5 01       	movw	r24, r10
    ccaa:	b4 01       	movw	r22, r8
    ccac:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <__mulsf3>
    ccb0:	60 93 49 09 	sts	0x0949, r22
    ccb4:	70 93 4a 09 	sts	0x094A, r23
    ccb8:	80 93 4b 09 	sts	0x094B, r24
    ccbc:	90 93 4c 09 	sts	0x094C, r25
    ccc0:	05 e4       	ldi	r16, 0x45	; 69
    ccc2:	19 e0       	ldi	r17, 0x09	; 9
    ccc4:	a1 2c       	mov	r10, r1
    ccc6:	b1 2c       	mov	r11, r1
    ccc8:	f5 01       	movw	r30, r10
    ccca:	ee 53       	subi	r30, 0x3E	; 62
    cccc:	f9 4f       	sbci	r31, 0xF9	; 249
	//************************************************************
	// Limit the Z-acc I-terms to the user-set limits
	//************************************************************
	for (i = P1; i <= P2; i++)
	{
		tempf1 = Config.Raw_I_Constrain[i][ZED];	// Promote
    ccce:	60 81       	ld	r22, Z
    ccd0:	71 81       	ldd	r23, Z+1	; 0x01
    ccd2:	82 81       	ldd	r24, Z+2	; 0x02
    ccd4:	93 81       	ldd	r25, Z+3	; 0x03
    ccd6:	0e 94 3d 6e 	call	0xdc7a	; 0xdc7a <__floatsisf>
    ccda:	6b 01       	movw	r12, r22
    ccdc:	7c 01       	movw	r14, r24
		
		if (IntegralAccVertf[i] > tempf1)
    ccde:	9b 01       	movw	r18, r22
    cce0:	ac 01       	movw	r20, r24
    cce2:	f8 01       	movw	r30, r16
    cce4:	60 81       	ld	r22, Z
    cce6:	71 81       	ldd	r23, Z+1	; 0x01
    cce8:	82 81       	ldd	r24, Z+2	; 0x02
    ccea:	93 81       	ldd	r25, Z+3	; 0x03
    ccec:	0e 94 ed 6e 	call	0xddda	; 0xddda <__gesf2>
    ccf0:	18 16       	cp	r1, r24
    ccf2:	34 f4       	brge	.+12     	; 0xcd00 <Sensor_PID+0x674>
		{
			IntegralAccVertf[i] = tempf1;
    ccf4:	d8 01       	movw	r26, r16
    ccf6:	cd 92       	st	X+, r12
    ccf8:	dd 92       	st	X+, r13
    ccfa:	ed 92       	st	X+, r14
    ccfc:	fc 92       	st	X, r15
    ccfe:	13 97       	sbiw	r26, 0x03	; 3
		}
			
		if (IntegralAccVertf[i] < -tempf1)
    cd00:	f7 fa       	bst	r15, 7
    cd02:	f0 94       	com	r15
    cd04:	f7 f8       	bld	r15, 7
    cd06:	f0 94       	com	r15
    cd08:	a7 01       	movw	r20, r14
    cd0a:	96 01       	movw	r18, r12
    cd0c:	f8 01       	movw	r30, r16
    cd0e:	60 81       	ld	r22, Z
    cd10:	71 81       	ldd	r23, Z+1	; 0x01
    cd12:	82 81       	ldd	r24, Z+2	; 0x02
    cd14:	93 81       	ldd	r25, Z+3	; 0x03
    cd16:	0e 94 8e 6d 	call	0xdb1c	; 0xdb1c <__cmpsf2>
    cd1a:	87 ff       	sbrs	r24, 7
    cd1c:	06 c0       	rjmp	.+12     	; 0xcd2a <Sensor_PID+0x69e>
		{
			IntegralAccVertf[i] = -tempf1;
    cd1e:	d8 01       	movw	r26, r16
    cd20:	cd 92       	st	X+, r12
    cd22:	dd 92       	st	X+, r13
    cd24:	ed 92       	st	X+, r14
    cd26:	fc 92       	st	X, r15
    cd28:	13 97       	sbiw	r26, 0x03	; 3
    cd2a:	b0 e1       	ldi	r27, 0x10	; 16
    cd2c:	ab 0e       	add	r10, r27
    cd2e:	b1 1c       	adc	r11, r1
    cd30:	0c 5f       	subi	r16, 0xFC	; 252
    cd32:	1f 4f       	sbci	r17, 0xFF	; 255

	
	//************************************************************
	// Limit the Z-acc I-terms to the user-set limits
	//************************************************************
	for (i = P1; i <= P2; i++)
    cd34:	e0 e2       	ldi	r30, 0x20	; 32
    cd36:	ae 16       	cp	r10, r30
    cd38:	b1 04       	cpc	r11, r1
    cd3a:	31 f6       	brne	.-116    	; 0xccc8 <Sensor_PID+0x63c>
		if (IntegralAccVertf[i] < -tempf1)
		{
			IntegralAccVertf[i] = -tempf1;
		}
	}
}
    cd3c:	a7 96       	adiw	r28, 0x27	; 39
    cd3e:	0f b6       	in	r0, 0x3f	; 63
    cd40:	f8 94       	cli
    cd42:	de bf       	out	0x3e, r29	; 62
    cd44:	0f be       	out	0x3f, r0	; 63
    cd46:	cd bf       	out	0x3d, r28	; 61
    cd48:	df 91       	pop	r29
    cd4a:	cf 91       	pop	r28
    cd4c:	1f 91       	pop	r17
    cd4e:	0f 91       	pop	r16
    cd50:	ff 90       	pop	r15
    cd52:	ef 90       	pop	r14
    cd54:	df 90       	pop	r13
    cd56:	cf 90       	pop	r12
    cd58:	bf 90       	pop	r11
    cd5a:	af 90       	pop	r10
    cd5c:	9f 90       	pop	r9
    cd5e:	8f 90       	pop	r8
    cd60:	7f 90       	pop	r7
    cd62:	6f 90       	pop	r6
    cd64:	5f 90       	pop	r5
    cd66:	4f 90       	pop	r4
    cd68:	3f 90       	pop	r3
    cd6a:	2f 90       	pop	r2
    cd6c:	08 95       	ret

0000cd6e <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    cd6e:	2f 92       	push	r2
    cd70:	3f 92       	push	r3
    cd72:	4f 92       	push	r4
    cd74:	5f 92       	push	r5
    cd76:	6f 92       	push	r6
    cd78:	7f 92       	push	r7
    cd7a:	8f 92       	push	r8
    cd7c:	9f 92       	push	r9
    cd7e:	af 92       	push	r10
    cd80:	bf 92       	push	r11
    cd82:	cf 92       	push	r12
    cd84:	df 92       	push	r13
    cd86:	ef 92       	push	r14
    cd88:	ff 92       	push	r15
    cd8a:	0f 93       	push	r16
    cd8c:	1f 93       	push	r17
    cd8e:	cf 93       	push	r28
    cd90:	df 93       	push	r29
    cd92:	cd b7       	in	r28, 0x3d	; 61
    cd94:	de b7       	in	r29, 0x3e	; 62
    cd96:	c4 54       	subi	r28, 0x44	; 68
    cd98:	d1 09       	sbc	r29, r1
    cd9a:	0f b6       	in	r0, 0x3f	; 63
    cd9c:	f8 94       	cli
    cd9e:	de bf       	out	0x3e, r29	; 62
    cda0:	0f be       	out	0x3f, r0	; 63
    cda2:	cd bf       	out	0x3d, r28	; 61
	int32_t PID_Gyro_I_actual2 = 0;			// P2
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    cda4:	80 91 6e 06 	lds	r24, 0x066E
    cda8:	8f 8b       	std	Y+23, r24	; 0x17
    cdaa:	80 91 74 06 	lds	r24, 0x0674
    cdae:	88 8f       	std	Y+24, r24	; 0x18
    cdb0:	80 91 7a 06 	lds	r24, 0x067A
    cdb4:	89 8f       	std	Y+25, r24	; 0x19
    cdb6:	80 91 82 06 	lds	r24, 0x0682
    cdba:	8a 8f       	std	Y+26, r24	; 0x1a
    cdbc:	80 91 88 06 	lds	r24, 0x0688
    cdc0:	8b 8f       	std	Y+27, r24	; 0x1b
    cdc2:	80 91 8e 06 	lds	r24, 0x068E
    cdc6:	8c 8f       	std	Y+28, r24	; 0x1c
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS+1] = 
    cdc8:	80 91 6f 06 	lds	r24, 0x066F
    cdcc:	89 87       	std	Y+9, r24	; 0x09
    cdce:	80 91 75 06 	lds	r24, 0x0675
    cdd2:	8a 87       	std	Y+10, r24	; 0x0a
    cdd4:	80 91 7b 06 	lds	r24, 0x067B
    cdd8:	8b 87       	std	Y+11, r24	; 0x0b
    cdda:	80 91 80 06 	lds	r24, 0x0680
    cdde:	8c 87       	std	Y+12, r24	; 0x0c
    cde0:	80 91 83 06 	lds	r24, 0x0683
    cde4:	8d 87       	std	Y+13, r24	; 0x0d
    cde6:	80 91 89 06 	lds	r24, 0x0689
    cdea:	8e 87       	std	Y+14, r24	; 0x0e
    cdec:	80 91 8f 06 	lds	r24, 0x068F
    cdf0:	8f 87       	std	Y+15, r24	; 0x0f
    cdf2:	80 91 94 06 	lds	r24, 0x0694
    cdf6:	88 8b       	std	Y+16, r24	; 0x10
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult, Config.FlightMode[P1].A_Zed_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult, Config.FlightMode[P2].A_Zed_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    cdf8:	80 91 72 06 	lds	r24, 0x0672
    cdfc:	89 8b       	std	Y+17, r24	; 0x11
    cdfe:	80 91 78 06 	lds	r24, 0x0678
    ce02:	8a 8b       	std	Y+18, r24	; 0x12
    ce04:	80 91 7f 06 	lds	r24, 0x067F
    ce08:	8b 8b       	std	Y+19, r24	; 0x13
    ce0a:	80 91 86 06 	lds	r24, 0x0686
    ce0e:	8c 8b       	std	Y+20, r24	; 0x14
    ce10:	80 91 8c 06 	lds	r24, 0x068C
    ce14:	8d 8b       	std	Y+21, r24	; 0x15
    ce16:	80 91 93 06 	lds	r24, 0x0693
    ce1a:	8e 8b       	std	Y+22, r24	; 0x16
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    ce1c:	80 91 31 08 	lds	r24, 0x0831
    ce20:	90 91 32 08 	lds	r25, 0x0832
    ce24:	9a 83       	std	Y+2, r25	; 0x02
    ce26:	89 83       	std	Y+1, r24	; 0x01
    ce28:	80 91 35 08 	lds	r24, 0x0835
    ce2c:	90 91 36 08 	lds	r25, 0x0836
    ce30:	9c 83       	std	Y+4, r25	; 0x04
    ce32:	8b 83       	std	Y+3, r24	; 0x03
    ce34:	80 91 33 08 	lds	r24, 0x0833
    ce38:	90 91 34 08 	lds	r25, 0x0834
    ce3c:	9e 83       	std	Y+6, r25	; 0x06
    ce3e:	8d 83       	std	Y+5, r24	; 0x05
    ce40:	80 91 37 08 	lds	r24, 0x0837
    ce44:	90 91 38 08 	lds	r25, 0x0838
    ce48:	98 87       	std	Y+8, r25	; 0x08
    ce4a:	8f 83       	std	Y+7, r24	; 0x07
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    ce4c:	80 91 7e 06 	lds	r24, 0x067E
    ce50:	20 e4       	ldi	r18, 0x40	; 64
    ce52:	82 02       	muls	r24, r18
    ce54:	c0 01       	movw	r24, r0
    ce56:	11 24       	eor	r1, r1
    ce58:	6c 01       	movw	r12, r24
    ce5a:	99 0f       	add	r25, r25
    ce5c:	ee 08       	sbc	r14, r14
    ce5e:	ff 08       	sbc	r15, r15
    ce60:	c9 ae       	std	Y+57, r12	; 0x39
    ce62:	da ae       	std	Y+58, r13	; 0x3a
    ce64:	eb ae       	std	Y+59, r14	; 0x3b
    ce66:	fc ae       	std	Y+60, r15	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    ce68:	80 91 92 06 	lds	r24, 0x0692
    ce6c:	20 e4       	ldi	r18, 0x40	; 64
    ce6e:	82 02       	muls	r24, r18
    ce70:	c0 01       	movw	r24, r0
    ce72:	11 24       	eor	r1, r1
    ce74:	6c 01       	movw	r12, r24
    ce76:	99 0f       	add	r25, r25
    ce78:	ee 08       	sbc	r14, r14
    ce7a:	ff 08       	sbc	r15, r15
    ce7c:	21 96       	adiw	r28, 0x01	; 1
    ce7e:	cc ae       	std	Y+60, r12	; 0x3c
    ce80:	dd ae       	std	Y+61, r13	; 0x3d
    ce82:	ee ae       	std	Y+62, r14	; 0x3e
    ce84:	ff ae       	std	Y+63, r15	; 0x3f
    ce86:	21 97       	sbiw	r28, 0x01	; 1
    ce88:	21 e7       	ldi	r18, 0x71	; 113
    ce8a:	39 e0       	ldi	r19, 0x09	; 9
    ce8c:	3a a3       	std	Y+34, r19	; 0x22
    ce8e:	29 a3       	std	Y+33, r18	; 0x21
    ce90:	4b ed       	ldi	r20, 0xDB	; 219
    ce92:	55 e0       	ldi	r21, 0x05	; 5
    ce94:	5e ab       	std	Y+54, r21	; 0x36
    ce96:	4d ab       	std	Y+53, r20	; 0x35
    ce98:	89 e5       	ldi	r24, 0x59	; 89
    ce9a:	99 e0       	ldi	r25, 0x09	; 9
    ce9c:	9a a7       	std	Y+42, r25	; 0x2a
    ce9e:	89 a7       	std	Y+41, r24	; 0x29
    cea0:	e9 e1       	ldi	r30, 0x19	; 25
    cea2:	f6 e0       	ldi	r31, 0x06	; 6
    cea4:	fc a7       	std	Y+44, r31	; 0x2c
    cea6:	eb a7       	std	Y+43, r30	; 0x2b
    cea8:	9e 01       	movw	r18, r28
    ceaa:	2f 5f       	subi	r18, 0xFF	; 255
    ceac:	3f 4f       	sbci	r19, 0xFF	; 255
    ceae:	38 a7       	std	Y+40, r19	; 0x28
    ceb0:	2f a3       	std	Y+39, r18	; 0x27
    ceb2:	45 e6       	ldi	r20, 0x65	; 101
    ceb4:	59 e0       	ldi	r21, 0x09	; 9
    ceb6:	5e a7       	std	Y+46, r21	; 0x2e
    ceb8:	4d a7       	std	Y+45, r20	; 0x2d
    ceba:	09 e3       	ldi	r16, 0x39	; 57
    cebc:	16 e0       	ldi	r17, 0x06	; 6
    cebe:	ce 01       	movw	r24, r28
    cec0:	47 96       	adiw	r24, 0x17	; 23
    cec2:	98 af       	std	Y+56, r25	; 0x38
    cec4:	8f ab       	std	Y+55, r24	; 0x37
    cec6:	e1 e2       	ldi	r30, 0x21	; 33
    cec8:	f9 e0       	ldi	r31, 0x09	; 9
    ceca:	f8 a3       	std	Y+32, r31	; 0x20
    cecc:	ef 8f       	std	Y+31, r30	; 0x1f
    cece:	28 5f       	subi	r18, 0xF8	; 248
    ced0:	3f 4f       	sbci	r19, 0xFF	; 255
    ced2:	3c ab       	std	Y+52, r19	; 0x34
    ced4:	2b ab       	std	Y+51, r18	; 0x33
    ced6:	ae 01       	movw	r20, r28
    ced8:	46 5e       	subi	r20, 0xE6	; 230
    ceda:	5f 4f       	sbci	r21, 0xFF	; 255
    cedc:	5a ab       	std	Y+50, r21	; 0x32
    cede:	49 ab       	std	Y+49, r20	; 0x31
    cee0:	0a 97       	sbiw	r24, 0x0a	; 10
    cee2:	98 ab       	std	Y+48, r25	; 0x30
    cee4:	8f a7       	std	Y+47, r24	; 0x2f
    cee6:	e5 e6       	ldi	r30, 0x65	; 101
    cee8:	f9 e0       	ldi	r31, 0x09	; 9
    ceea:	fe a3       	std	Y+38, r31	; 0x26
    ceec:	ed a3       	std	Y+37, r30	; 0x25
    ceee:	21 2c       	mov	r2, r1
    cef0:	31 2c       	mov	r3, r1

	//************************************************************
	// PID loop
	//************************************************************
	
	for (axis = 0; axis <= YAW; axis ++)
    cef2:	1d 8e       	std	Y+29, r1	; 0x1d
	{
		//************************************************************
		// Get average gyro readings for P-terms
		//************************************************************

		gyroADC[axis] = (int16_t)(PID_AvgGyro[axis] / LoopCount);
    cef4:	20 91 2d 05 	lds	r18, 0x052D
    cef8:	30 e0       	ldi	r19, 0x00	; 0
    cefa:	40 e0       	ldi	r20, 0x00	; 0
    cefc:	50 e0       	ldi	r21, 0x00	; 0
    cefe:	e9 a1       	ldd	r30, Y+33	; 0x21
    cf00:	fa a1       	ldd	r31, Y+34	; 0x22
    cf02:	60 81       	ld	r22, Z
    cf04:	71 81       	ldd	r23, Z+1	; 0x01
    cf06:	82 81       	ldd	r24, Z+2	; 0x02
    cf08:	93 81       	ldd	r25, Z+3	; 0x03
    cf0a:	0e 94 87 6f 	call	0xdf0e	; 0xdf0e <__divmodsi4>
    cf0e:	49 01       	movw	r8, r18
    cf10:	5a 01       	movw	r10, r20
    cf12:	ed a9       	ldd	r30, Y+53	; 0x35
    cf14:	fe a9       	ldd	r31, Y+54	; 0x36
    cf16:	21 93       	st	Z+, r18
    cf18:	31 93       	st	Z+, r19
    cf1a:	fe ab       	std	Y+54, r31	; 0x36
    cf1c:	ed ab       	std	Y+53, r30	; 0x35
		PID_AvgGyro[axis] = 0;					// Reset average
    cf1e:	e9 a1       	ldd	r30, Y+33	; 0x21
    cf20:	fa a1       	ldd	r31, Y+34	; 0x22
    cf22:	10 82       	st	Z, r1
    cf24:	11 82       	std	Z+1, r1	; 0x01
    cf26:	12 82       	std	Z+2, r1	; 0x02
    cf28:	13 82       	std	Z+3, r1	; 0x03

		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    cf2a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    cf2c:	f2 30       	cpi	r31, 0x02	; 2
    cf2e:	39 f0       	breq	.+14     	; 0xcf3e <Calculate_PID+0x1d0>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    cf30:	41 2c       	mov	r4, r1
    cf32:	51 2c       	mov	r5, r1
    cf34:	32 01       	movw	r6, r4
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    cf36:	c1 2c       	mov	r12, r1
    cf38:	d1 2c       	mov	r13, r1
    cf3a:	76 01       	movw	r14, r12
    cf3c:	0a c0       	rjmp	.+20     	; 0xcf52 <Calculate_PID+0x1e4>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    cf3e:	21 96       	adiw	r28, 0x01	; 1
    cf40:	4c ac       	ldd	r4, Y+60	; 0x3c
    cf42:	5d ac       	ldd	r5, Y+61	; 0x3d
    cf44:	6e ac       	ldd	r6, Y+62	; 0x3e
    cf46:	7f ac       	ldd	r7, Y+63	; 0x3f
    cf48:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    cf4a:	c9 ac       	ldd	r12, Y+57	; 0x39
    cf4c:	da ac       	ldd	r13, Y+58	; 0x3a
    cf4e:	eb ac       	ldd	r14, Y+59	; 0x3b
    cf50:	fc ac       	ldd	r15, Y+60	; 0x3c
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    cf52:	ef a9       	ldd	r30, Y+55	; 0x37
    cf54:	f8 ad       	ldd	r31, Y+56	; 0x38
    cf56:	41 91       	ld	r20, Z+
    cf58:	f8 af       	std	Y+56, r31	; 0x38
    cf5a:	ef ab       	std	Y+55, r30	; 0x37
    cf5c:	04 2e       	mov	r0, r20
    cf5e:	00 0c       	add	r0, r0
    cf60:	55 0b       	sbc	r21, r21
    cf62:	48 9d       	mul	r20, r8
    cf64:	c0 01       	movw	r24, r0
    cf66:	49 9d       	mul	r20, r9
    cf68:	90 0d       	add	r25, r0
    cf6a:	58 9d       	mul	r21, r8
    cf6c:	90 0d       	add	r25, r0
    cf6e:	11 24       	eor	r1, r1
    cf70:	09 2e       	mov	r0, r25
    cf72:	00 0c       	add	r0, r0
    cf74:	aa 0b       	sbc	r26, r26
    cf76:	bb 0b       	sbc	r27, r27
    cf78:	a7 01       	movw	r20, r14
    cf7a:	96 01       	movw	r18, r12
    cf7c:	28 0f       	add	r18, r24
    cf7e:	39 1f       	adc	r19, r25
    cf80:	4a 1f       	adc	r20, r26
    cf82:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    cf84:	a3 e0       	ldi	r26, 0x03	; 3
    cf86:	b0 e0       	ldi	r27, 0x00	; 0
    cf88:	0e 94 ca 6f 	call	0xdf94	; 0xdf94 <__muluhisi3>
    cf8c:	25 96       	adiw	r28, 0x05	; 5
    cf8e:	6c af       	std	Y+60, r22	; 0x3c
    cf90:	7d af       	std	Y+61, r23	; 0x3d
    cf92:	8e af       	std	Y+62, r24	; 0x3e
    cf94:	9f af       	std	Y+63, r25	; 0x3f
    cf96:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    cf98:	eb a9       	ldd	r30, Y+51	; 0x33
    cf9a:	fc a9       	ldd	r31, Y+52	; 0x34
    cf9c:	a1 91       	ld	r26, Z+
    cf9e:	fc ab       	std	Y+52, r31	; 0x34
    cfa0:	eb ab       	std	Y+51, r30	; 0x33
    cfa2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    cfa4:	f8 a1       	ldd	r31, Y+32	; 0x20
    cfa6:	20 81       	ld	r18, Z
    cfa8:	31 81       	ldd	r19, Z+1	; 0x01
    cfaa:	42 81       	ldd	r20, Z+2	; 0x02
    cfac:	53 81       	ldd	r21, Z+3	; 0x03
    cfae:	0a 2e       	mov	r0, r26
    cfb0:	00 0c       	add	r0, r0
    cfb2:	bb 0b       	sbc	r27, r27
    cfb4:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <__mulshisi3>
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    cfb8:	6b 01       	movw	r12, r22
    cfba:	7c 01       	movw	r14, r24
    cfbc:	45 e0       	ldi	r20, 0x05	; 5
    cfbe:	f5 94       	asr	r15
    cfc0:	e7 94       	ror	r14
    cfc2:	d7 94       	ror	r13
    cfc4:	c7 94       	ror	r12
    cfc6:	4a 95       	dec	r20
    cfc8:	d1 f7       	brne	.-12     	; 0xcfbe <Calculate_PID+0x250>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    cfca:	e9 a9       	ldd	r30, Y+49	; 0x31
    cfcc:	fa a9       	ldd	r31, Y+50	; 0x32
    cfce:	81 91       	ld	r24, Z+
    cfd0:	fa ab       	std	Y+50, r31	; 0x32
    cfd2:	e9 ab       	std	Y+49, r30	; 0x31
    cfd4:	08 2e       	mov	r0, r24
    cfd6:	00 0c       	add	r0, r0
    cfd8:	99 0b       	sbc	r25, r25
    cfda:	88 9d       	mul	r24, r8
    cfdc:	90 01       	movw	r18, r0
    cfde:	89 9d       	mul	r24, r9
    cfe0:	30 0d       	add	r19, r0
    cfe2:	98 9d       	mul	r25, r8
    cfe4:	30 0d       	add	r19, r0
    cfe6:	11 24       	eor	r1, r1
    cfe8:	c9 01       	movw	r24, r18
    cfea:	33 0f       	add	r19, r19
    cfec:	aa 0b       	sbc	r26, r26
    cfee:	bb 0b       	sbc	r27, r27
    cff0:	a3 01       	movw	r20, r6
    cff2:	92 01       	movw	r18, r4
    cff4:	28 0f       	add	r18, r24
    cff6:	39 1f       	adc	r19, r25
    cff8:	4a 1f       	adc	r20, r26
    cffa:	5b 1f       	adc	r21, r27
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    cffc:	a3 e0       	ldi	r26, 0x03	; 3
    cffe:	b0 e0       	ldi	r27, 0x00	; 0
    d000:	0e 94 ca 6f 	call	0xdf94	; 0xdf94 <__muluhisi3>
    d004:	4b 01       	movw	r8, r22
    d006:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    d008:	ef a5       	ldd	r30, Y+47	; 0x2f
    d00a:	f8 a9       	ldd	r31, Y+48	; 0x30
    d00c:	a1 91       	ld	r26, Z+
    d00e:	f8 ab       	std	Y+48, r31	; 0x30
    d010:	ef a7       	std	Y+47, r30	; 0x2f
    d012:	ef 8d       	ldd	r30, Y+31	; 0x1f
    d014:	f8 a1       	ldd	r31, Y+32	; 0x20
    d016:	24 85       	ldd	r18, Z+12	; 0x0c
    d018:	35 85       	ldd	r19, Z+13	; 0x0d
    d01a:	46 85       	ldd	r20, Z+14	; 0x0e
    d01c:	57 85       	ldd	r21, Z+15	; 0x0f
    d01e:	0a 2e       	mov	r0, r26
    d020:	00 0c       	add	r0, r0
    d022:	bb 0b       	sbc	r27, r27
    d024:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    d028:	2b 01       	movw	r4, r22
    d02a:	3c 01       	movw	r6, r24
    d02c:	55 e0       	ldi	r21, 0x05	; 5
    d02e:	75 94       	asr	r7
    d030:	67 94       	ror	r6
    d032:	57 94       	ror	r5
    d034:	47 94       	ror	r4
    d036:	5a 95       	dec	r21
    d038:	d1 f7       	brne	.-12     	; 0xd02e <Calculate_PID+0x2c0>
    d03a:	f8 01       	movw	r30, r16
    d03c:	e3 5a       	subi	r30, 0xA3	; 163
    d03e:	ff 4f       	sbci	r31, 0xFF	; 255
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    d040:	40 81       	ld	r20, Z
    d042:	51 81       	ldd	r21, Z+1	; 0x01
    d044:	62 81       	ldd	r22, Z+2	; 0x02
    d046:	73 81       	ldd	r23, Z+3	; 0x03
    d048:	4c 15       	cp	r20, r12
    d04a:	5d 05       	cpc	r21, r13
    d04c:	6e 05       	cpc	r22, r14
    d04e:	7f 05       	cpc	r23, r15
    d050:	84 f0       	brlt	.+32     	; 0xd072 <Calculate_PID+0x304>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    d052:	88 27       	eor	r24, r24
    d054:	99 27       	eor	r25, r25
    d056:	dc 01       	movw	r26, r24
    d058:	84 1b       	sub	r24, r20
    d05a:	95 0b       	sbc	r25, r21
    d05c:	a6 0b       	sbc	r26, r22
    d05e:	b7 0b       	sbc	r27, r23
    d060:	b7 01       	movw	r22, r14
    d062:	a6 01       	movw	r20, r12
    d064:	c8 16       	cp	r12, r24
    d066:	d9 06       	cpc	r13, r25
    d068:	ea 06       	cpc	r14, r26
    d06a:	fb 06       	cpc	r15, r27
    d06c:	14 f4       	brge	.+4      	; 0xd072 <Calculate_PID+0x304>
    d06e:	ac 01       	movw	r20, r24
    d070:	bd 01       	movw	r22, r26
    d072:	f8 01       	movw	r30, r16
    d074:	e3 59       	subi	r30, 0x93	; 147
    d076:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    d078:	80 81       	ld	r24, Z
    d07a:	91 81       	ldd	r25, Z+1	; 0x01
    d07c:	a2 81       	ldd	r26, Z+2	; 0x02
    d07e:	b3 81       	ldd	r27, Z+3	; 0x03
    d080:	84 15       	cp	r24, r4
    d082:	95 05       	cpc	r25, r5
    d084:	a6 05       	cpc	r26, r6
    d086:	b7 05       	cpc	r27, r7
    d088:	84 f0       	brlt	.+32     	; 0xd0aa <Calculate_PID+0x33c>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    d08a:	cc 24       	eor	r12, r12
    d08c:	dd 24       	eor	r13, r13
    d08e:	76 01       	movw	r14, r12
    d090:	c8 1a       	sub	r12, r24
    d092:	d9 0a       	sbc	r13, r25
    d094:	ea 0a       	sbc	r14, r26
    d096:	fb 0a       	sbc	r15, r27
    d098:	d3 01       	movw	r26, r6
    d09a:	c2 01       	movw	r24, r4
    d09c:	4c 14       	cp	r4, r12
    d09e:	5d 04       	cpc	r5, r13
    d0a0:	6e 04       	cpc	r6, r14
    d0a2:	7f 04       	cpc	r7, r15
    d0a4:	14 f4       	brge	.+4      	; 0xd0aa <Calculate_PID+0x33c>
    d0a6:	d7 01       	movw	r26, r14
    d0a8:	c6 01       	movw	r24, r12

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE); // Currently PID_SCALE = 6 so /64
    d0aa:	25 96       	adiw	r28, 0x05	; 5
    d0ac:	cc ac       	ldd	r12, Y+60	; 0x3c
    d0ae:	dd ac       	ldd	r13, Y+61	; 0x3d
    d0b0:	ee ac       	ldd	r14, Y+62	; 0x3e
    d0b2:	ff ac       	ldd	r15, Y+63	; 0x3f
    d0b4:	25 97       	sbiw	r28, 0x05	; 5
    d0b6:	4c 0d       	add	r20, r12
    d0b8:	5d 1d       	adc	r21, r13
    d0ba:	6e 1d       	adc	r22, r14
    d0bc:	7f 1d       	adc	r23, r15
    d0be:	26 e0       	ldi	r18, 0x06	; 6
    d0c0:	75 95       	asr	r23
    d0c2:	67 95       	ror	r22
    d0c4:	57 95       	ror	r21
    d0c6:	47 95       	ror	r20
    d0c8:	2a 95       	dec	r18
    d0ca:	d1 f7       	brne	.-12     	; 0xd0c0 <Calculate_PID+0x352>
    d0cc:	e9 a5       	ldd	r30, Y+41	; 0x29
    d0ce:	fa a5       	ldd	r31, Y+42	; 0x2a
    d0d0:	51 83       	std	Z+1, r21	; 0x01
    d0d2:	40 83       	st	Z, r20
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    d0d4:	88 0e       	add	r8, r24
    d0d6:	99 1e       	adc	r9, r25
    d0d8:	aa 1e       	adc	r10, r26
    d0da:	bb 1e       	adc	r11, r27
    d0dc:	36 e0       	ldi	r19, 0x06	; 6
    d0de:	b5 94       	asr	r11
    d0e0:	a7 94       	ror	r10
    d0e2:	97 94       	ror	r9
    d0e4:	87 94       	ror	r8
    d0e6:	3a 95       	dec	r19
    d0e8:	d1 f7       	brne	.-12     	; 0xd0de <Calculate_PID+0x370>
    d0ea:	97 82       	std	Z+7, r9	; 0x07
    d0ec:	86 82       	std	Z+6, r8	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    d0ee:	fd 8d       	ldd	r31, Y+29	; 0x1d
    d0f0:	f2 30       	cpi	r31, 0x02	; 2
    d0f2:	d9 f1       	breq	.+118    	; 0xd16a <Calculate_PID+0x3fc>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    d0f4:	eb a5       	ldd	r30, Y+43	; 0x2b
    d0f6:	fc a5       	ldd	r31, Y+44	; 0x2c
    d0f8:	40 81       	ld	r20, Z
    d0fa:	51 81       	ldd	r21, Z+1	; 0x01
    d0fc:	ef a1       	ldd	r30, Y+39	; 0x27
    d0fe:	f8 a5       	ldd	r31, Y+40	; 0x28
    d100:	80 81       	ld	r24, Z
    d102:	91 81       	ldd	r25, Z+1	; 0x01
    d104:	9a 01       	movw	r18, r20
    d106:	28 1b       	sub	r18, r24
    d108:	39 0b       	sbc	r19, r25
    d10a:	61 e1       	ldi	r22, 0x11	; 17
    d10c:	e6 2e       	mov	r14, r22
    d10e:	f1 2c       	mov	r15, r1
    d110:	ec 0e       	add	r14, r28
    d112:	fd 1e       	adc	r15, r29
    d114:	e2 0c       	add	r14, r2
    d116:	f3 1c       	adc	r15, r3
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    d118:	f7 01       	movw	r30, r14
    d11a:	a0 81       	ld	r26, Z
    d11c:	0a 2e       	mov	r0, r26
    d11e:	00 0c       	add	r0, r0
    d120:	bb 0b       	sbc	r27, r27
    d122:	0e 94 ac 6f 	call	0xdf58	; 0xdf58 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    d126:	bb 27       	eor	r27, r27
    d128:	97 fd       	sbrc	r25, 7
    d12a:	ba 95       	dec	r27
    d12c:	a9 2f       	mov	r26, r25
    d12e:	98 2f       	mov	r25, r24
    d130:	87 2f       	mov	r24, r23
    d132:	ed a1       	ldd	r30, Y+37	; 0x25
    d134:	fe a1       	ldd	r31, Y+38	; 0x26
    d136:	91 83       	std	Z+1, r25	; 0x01
    d138:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    d13a:	ef a1       	ldd	r30, Y+39	; 0x27
    d13c:	f8 a5       	ldd	r31, Y+40	; 0x28
    d13e:	84 81       	ldd	r24, Z+4	; 0x04
    d140:	95 81       	ldd	r25, Z+5	; 0x05
    d142:	9a 01       	movw	r18, r20
    d144:	28 1b       	sub	r18, r24
    d146:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    d148:	f7 01       	movw	r30, r14
    d14a:	a3 81       	ldd	r26, Z+3	; 0x03
    d14c:	0a 2e       	mov	r0, r26
    d14e:	00 0c       	add	r0, r0
    d150:	bb 0b       	sbc	r27, r27
    d152:	0e 94 ac 6f 	call	0xdf58	; 0xdf58 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    d156:	bb 27       	eor	r27, r27
    d158:	97 fd       	sbrc	r25, 7
    d15a:	ba 95       	dec	r27
    d15c:	a9 2f       	mov	r26, r25
    d15e:	98 2f       	mov	r25, r24
    d160:	87 2f       	mov	r24, r23
    d162:	ed a1       	ldd	r30, Y+37	; 0x25
    d164:	fe a1       	ldd	r31, Y+38	; 0x26
    d166:	97 83       	std	Z+7, r25	; 0x07
    d168:	86 83       	std	Z+6, r24	; 0x06
    d16a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    d16c:	ff 5f       	subi	r31, 0xFF	; 255
    d16e:	fd 8f       	std	Y+29, r31	; 0x1d
    d170:	2f ef       	ldi	r18, 0xFF	; 255
    d172:	22 1a       	sub	r2, r18
    d174:	32 0a       	sbc	r3, r18
    d176:	49 a1       	ldd	r20, Y+33	; 0x21
    d178:	5a a1       	ldd	r21, Y+34	; 0x22
    d17a:	4c 5f       	subi	r20, 0xFC	; 252
    d17c:	5f 4f       	sbci	r21, 0xFF	; 255
    d17e:	5a a3       	std	Y+34, r21	; 0x22
    d180:	49 a3       	std	Y+33, r20	; 0x21
    d182:	89 a5       	ldd	r24, Y+41	; 0x29
    d184:	9a a5       	ldd	r25, Y+42	; 0x2a
    d186:	02 96       	adiw	r24, 0x02	; 2
    d188:	9a a7       	std	Y+42, r25	; 0x2a
    d18a:	89 a7       	std	Y+41, r24	; 0x29
    d18c:	eb a5       	ldd	r30, Y+43	; 0x2b
    d18e:	fc a5       	ldd	r31, Y+44	; 0x2c
    d190:	32 96       	adiw	r30, 0x02	; 2
    d192:	fc a7       	std	Y+44, r31	; 0x2c
    d194:	eb a7       	std	Y+43, r30	; 0x2b
    d196:	2f a1       	ldd	r18, Y+39	; 0x27
    d198:	38 a5       	ldd	r19, Y+40	; 0x28
    d19a:	2e 5f       	subi	r18, 0xFE	; 254
    d19c:	3f 4f       	sbci	r19, 0xFF	; 255
    d19e:	38 a7       	std	Y+40, r19	; 0x28
    d1a0:	2f a3       	std	Y+39, r18	; 0x27
    d1a2:	4d a1       	ldd	r20, Y+37	; 0x25
    d1a4:	5e a1       	ldd	r21, Y+38	; 0x26
    d1a6:	4e 5f       	subi	r20, 0xFE	; 254
    d1a8:	5f 4f       	sbci	r21, 0xFF	; 255
    d1aa:	5e a3       	std	Y+38, r21	; 0x26
    d1ac:	4d a3       	std	Y+37, r20	; 0x25
    d1ae:	0c 5f       	subi	r16, 0xFC	; 252
    d1b0:	1f 4f       	sbci	r17, 0xFF	; 255
    d1b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d1b4:	98 a1       	ldd	r25, Y+32	; 0x20
    d1b6:	04 96       	adiw	r24, 0x04	; 4
    d1b8:	98 a3       	std	Y+32, r25	; 0x20
    d1ba:	8f 8f       	std	Y+31, r24	; 0x1f

	//************************************************************
	// PID loop
	//************************************************************
	
	for (axis = 0; axis <= YAW; axis ++)
    d1bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    d1be:	93 30       	cpi	r25, 0x03	; 3
    d1c0:	09 f0       	breq	.+2      	; 0xd1c4 <Calculate_PID+0x456>
    d1c2:	98 ce       	rjmp	.-720    	; 0xcef4 <Calculate_PID+0x186>

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		// P-term
		PID_acc_temp1 = (int32_t)-accVertf;					// Zeroed AccSmooth signal. Negate to oppose G
    d1c4:	80 91 26 05 	lds	r24, 0x0526
    d1c8:	90 91 27 05 	lds	r25, 0x0527
    d1cc:	a0 91 28 05 	lds	r26, 0x0528
    d1d0:	b0 91 29 05 	lds	r27, 0x0529
    d1d4:	bc 01       	movw	r22, r24
    d1d6:	cd 01       	movw	r24, r26
    d1d8:	90 58       	subi	r25, 0x80	; 128
    d1da:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    d1de:	69 a3       	std	Y+33, r22	; 0x21
    d1e0:	7a a3       	std	Y+34, r23	; 0x22
    d1e2:	8b a3       	std	Y+35, r24	; 0x23
    d1e4:	9c a3       	std	Y+36, r25	; 0x24
    d1e6:	1e 01       	movw	r2, r28
    d1e8:	e3 e1       	ldi	r30, 0x13	; 19
    d1ea:	2e 0e       	add	r2, r30
    d1ec:	31 1c       	adc	r3, r1
    d1ee:	25 e4       	ldi	r18, 0x45	; 69
    d1f0:	39 e0       	ldi	r19, 0x09	; 9
    d1f2:	38 a3       	std	Y+32, r19	; 0x20
    d1f4:	2f 8f       	std	Y+31, r18	; 0x1f
    d1f6:	ae 01       	movw	r20, r28
    d1f8:	44 5f       	subi	r20, 0xF4	; 244
    d1fa:	5f 4f       	sbci	r21, 0xFF	; 255
    d1fc:	5e 8f       	std	Y+30, r21	; 0x1e
    d1fe:	4d 8f       	std	Y+29, r20	; 0x1d
    d200:	00 e0       	ldi	r16, 0x00	; 0
    d202:	10 e0       	ldi	r17, 0x00	; 0
		PID_acc_temp1 *= L_gain[i][YAW];					// Multiply P-term (Max gain of 127)
    d204:	f1 01       	movw	r30, r2
    d206:	a0 81       	ld	r26, Z
    d208:	0a 2e       	mov	r0, r26
    d20a:	00 0c       	add	r0, r0
    d20c:	bb 0b       	sbc	r27, r27
    d20e:	29 a1       	ldd	r18, Y+33	; 0x21
    d210:	3a a1       	ldd	r19, Y+34	; 0x22
    d212:	4b a1       	ldd	r20, Y+35	; 0x23
    d214:	5c a1       	ldd	r21, Y+36	; 0x24
    d216:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <__mulshisi3>
    d21a:	2b 01       	movw	r4, r22
    d21c:	3c 01       	movw	r6, r24
		PID_acc_temp1 = PID_acc_temp1 * (int32_t)3;			// Multiply by 3

		// I-term
		PID_acc_temp2 = (int32_t)-IntegralAccVertf[i];		// Get and copy integrated Z-acc value. Negate to oppose G
    d21e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    d220:	f8 a1       	ldd	r31, Y+32	; 0x20
    d222:	81 91       	ld	r24, Z+
    d224:	91 91       	ld	r25, Z+
    d226:	a1 91       	ld	r26, Z+
    d228:	b1 91       	ld	r27, Z+
    d22a:	f8 a3       	std	Y+32, r31	; 0x20
    d22c:	ef 8f       	std	Y+31, r30	; 0x1f
    d22e:	bc 01       	movw	r22, r24
    d230:	cd 01       	movw	r24, r26
    d232:	90 58       	subi	r25, 0x80	; 128
    d234:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <__fixsfsi>
    d238:	9b 01       	movw	r18, r22
    d23a:	ac 01       	movw	r20, r24
		PID_acc_temp2 *= I_gain[i][ZED];					// Multiply I-term (Max gain of 127)
    d23c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    d23e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    d240:	a0 81       	ld	r26, Z
    d242:	0a 2e       	mov	r0, r26
    d244:	00 0c       	add	r0, r0
    d246:	bb 0b       	sbc	r27, r27
    d248:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <__mulshisi3>
    d24c:	f8 01       	movw	r30, r16
    d24e:	ee 55       	subi	r30, 0x5E	; 94
    d250:	f9 4f       	sbci	r31, 0xF9	; 249
		PID_acc_temp2 = PID_acc_temp2 >> 2;					// Divide by 4

		if (PID_acc_temp2 > Config.Raw_I_Limits[i][ZED])	// Limit I-term outputs to user-set percentage
    d252:	80 80       	ld	r8, Z
    d254:	91 80       	ldd	r9, Z+1	; 0x01
    d256:	a2 80       	ldd	r10, Z+2	; 0x02
    d258:	b3 80       	ldd	r11, Z+3	; 0x03
    d25a:	6b 01       	movw	r12, r22
    d25c:	7c 01       	movw	r14, r24
    d25e:	92 e0       	ldi	r25, 0x02	; 2
    d260:	f5 94       	asr	r15
    d262:	e7 94       	ror	r14
    d264:	d7 94       	ror	r13
    d266:	c7 94       	ror	r12
    d268:	9a 95       	dec	r25
    d26a:	d1 f7       	brne	.-12     	; 0xd260 <Calculate_PID+0x4f2>
    d26c:	8c 14       	cp	r8, r12
    d26e:	9d 04       	cpc	r9, r13
    d270:	ae 04       	cpc	r10, r14
    d272:	bf 04       	cpc	r11, r15
    d274:	14 f4       	brge	.+4      	; 0xd27a <Calculate_PID+0x50c>
    d276:	75 01       	movw	r14, r10
    d278:	64 01       	movw	r12, r8
		{
			PID_acc_temp2 = Config.Raw_I_Limits[i][ZED];
		}
		if (PID_acc_temp2 < -Config.Raw_I_Limits[i][ZED])
    d27a:	b0 94       	com	r11
    d27c:	a0 94       	com	r10
    d27e:	90 94       	com	r9
    d280:	80 94       	com	r8
    d282:	81 1c       	adc	r8, r1
    d284:	91 1c       	adc	r9, r1
    d286:	a1 1c       	adc	r10, r1
    d288:	b1 1c       	adc	r11, r1
	for (i = P1; i <= P2; i++)
	{
		// P-term
		PID_acc_temp1 = (int32_t)-accVertf;					// Zeroed AccSmooth signal. Negate to oppose G
		PID_acc_temp1 *= L_gain[i][YAW];					// Multiply P-term (Max gain of 127)
		PID_acc_temp1 = PID_acc_temp1 * (int32_t)3;			// Multiply by 3
    d28a:	a3 e0       	ldi	r26, 0x03	; 3
    d28c:	b0 e0       	ldi	r27, 0x00	; 0
    d28e:	a3 01       	movw	r20, r6
    d290:	92 01       	movw	r18, r4
    d292:	0e 94 ca 6f 	call	0xdf94	; 0xdf94 <__muluhisi3>
    d296:	c8 14       	cp	r12, r8
    d298:	d9 04       	cpc	r13, r9
    d29a:	ea 04       	cpc	r14, r10
    d29c:	fb 04       	cpc	r15, r11
    d29e:	14 f4       	brge	.+4      	; 0xd2a4 <Calculate_PID+0x536>
    d2a0:	75 01       	movw	r14, r10
    d2a2:	64 01       	movw	r12, r8
		{
			PID_acc_temp2 = -Config.Raw_I_Limits[i][ZED];
		}

		// Formulate PI value and scale
		PID_ACCs[i][YAW] = (int16_t)((PID_acc_temp1 + PID_acc_temp2) >> PID_SCALE); // Copy to global values
    d2a4:	c6 0e       	add	r12, r22
    d2a6:	d7 1e       	adc	r13, r23
    d2a8:	e8 1e       	adc	r14, r24
    d2aa:	f9 1e       	adc	r15, r25
    d2ac:	86 e0       	ldi	r24, 0x06	; 6
    d2ae:	f5 94       	asr	r15
    d2b0:	e7 94       	ror	r14
    d2b2:	d7 94       	ror	r13
    d2b4:	c7 94       	ror	r12
    d2b6:	8a 95       	dec	r24
    d2b8:	d1 f7       	brne	.-12     	; 0xd2ae <Calculate_PID+0x540>
    d2ba:	ed a5       	ldd	r30, Y+45	; 0x2d
    d2bc:	fe a5       	ldd	r31, Y+46	; 0x2e
    d2be:	d5 82       	std	Z+5, r13	; 0x05
    d2c0:	c4 82       	std	Z+4, r12	; 0x04
    d2c2:	f3 e0       	ldi	r31, 0x03	; 3
    d2c4:	2f 0e       	add	r2, r31
    d2c6:	31 1c       	adc	r3, r1
    d2c8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    d2ca:	3e 8d       	ldd	r19, Y+30	; 0x1e
    d2cc:	2c 5f       	subi	r18, 0xFC	; 252
    d2ce:	3f 4f       	sbci	r19, 0xFF	; 255
    d2d0:	3e 8f       	std	Y+30, r19	; 0x1e
    d2d2:	2d 8f       	std	Y+29, r18	; 0x1d
    d2d4:	00 5f       	subi	r16, 0xF0	; 240
    d2d6:	1f 4f       	sbci	r17, 0xFF	; 255
    d2d8:	4d a5       	ldd	r20, Y+45	; 0x2d
    d2da:	5e a5       	ldd	r21, Y+46	; 0x2e
    d2dc:	4a 5f       	subi	r20, 0xFA	; 250
    d2de:	5f 4f       	sbci	r21, 0xFF	; 255
    d2e0:	5e a7       	std	Y+46, r21	; 0x2e
    d2e2:	4d a7       	std	Y+45, r20	; 0x2d
	//************************************************************
	// Calculate an Acc-Z PI value 
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
    d2e4:	00 32       	cpi	r16, 0x20	; 32
    d2e6:	11 05       	cpc	r17, r1
    d2e8:	09 f0       	breq	.+2      	; 0xd2ec <Calculate_PID+0x57e>
    d2ea:	8c cf       	rjmp	.-232    	; 0xd204 <Calculate_PID+0x496>
		}

		// Formulate PI value and scale
		PID_ACCs[i][YAW] = (int16_t)((PID_acc_temp1 + PID_acc_temp2) >> PID_SCALE); // Copy to global values
	}
}
    d2ec:	cc 5b       	subi	r28, 0xBC	; 188
    d2ee:	df 4f       	sbci	r29, 0xFF	; 255
    d2f0:	0f b6       	in	r0, 0x3f	; 63
    d2f2:	f8 94       	cli
    d2f4:	de bf       	out	0x3e, r29	; 62
    d2f6:	0f be       	out	0x3f, r0	; 63
    d2f8:	cd bf       	out	0x3d, r28	; 61
    d2fa:	df 91       	pop	r29
    d2fc:	cf 91       	pop	r28
    d2fe:	1f 91       	pop	r17
    d300:	0f 91       	pop	r16
    d302:	ff 90       	pop	r15
    d304:	ef 90       	pop	r14
    d306:	df 90       	pop	r13
    d308:	cf 90       	pop	r12
    d30a:	bf 90       	pop	r11
    d30c:	af 90       	pop	r10
    d30e:	9f 90       	pop	r9
    d310:	8f 90       	pop	r8
    d312:	7f 90       	pop	r7
    d314:	6f 90       	pop	r6
    d316:	5f 90       	pop	r5
    d318:	4f 90       	pop	r4
    d31a:	3f 90       	pop	r3
    d31c:	2f 90       	pop	r2
    d31e:	08 95       	ret

0000d320 <RxGetChannels>:
volatile int16_t MonopolarThrottle;									// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    d320:	ec e0       	ldi	r30, 0x0C	; 12
    d322:	f8 e0       	ldi	r31, 0x08	; 8
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    d324:	80 e0       	ldi	r24, 0x00	; 0
    d326:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    d328:	9c 01       	movw	r18, r24
    d32a:	22 0f       	add	r18, r18
    d32c:	33 1f       	adc	r19, r19
    d32e:	d9 01       	movw	r26, r18
    d330:	a2 52       	subi	r26, 0x22	; 34
    d332:	b7 4f       	sbci	r27, 0xF7	; 247
    d334:	4d 91       	ld	r20, X+
    d336:	5c 91       	ld	r21, X
    d338:	61 91       	ld	r22, Z+
    d33a:	71 91       	ld	r23, Z+
    d33c:	46 1b       	sub	r20, r22
    d33e:	57 0b       	sbc	r21, r23
    d340:	d9 01       	movw	r26, r18
    d342:	ad 57       	subi	r26, 0x7D	; 125
    d344:	b6 4f       	sbci	r27, 0xF6	; 246
    d346:	11 96       	adiw	r26, 0x01	; 1
    d348:	5c 93       	st	X, r21
    d34a:	4e 93       	st	-X, r20
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    d34c:	01 96       	adiw	r24, 0x01	; 1
    d34e:	88 30       	cpi	r24, 0x08	; 8
    d350:	91 05       	cpc	r25, r1
    d352:	51 f7       	brne	.-44     	; 0xd328 <RxGetChannels+0x8>
	}

	// Special handling for monopolar throttle
	// Preset to RxChannelZeroOffset[THROTTLE] = 2750 (-250 to 2250) for safety. 
	// Normally MonopolarThrottle is referenced to the lowest throttle position.
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE]; 
    d354:	80 91 de 08 	lds	r24, 0x08DE
    d358:	90 91 df 08 	lds	r25, 0x08DF
    d35c:	20 91 0c 08 	lds	r18, 0x080C
    d360:	30 91 0d 08 	lds	r19, 0x080D
    d364:	82 1b       	sub	r24, r18
    d366:	93 0b       	sbc	r25, r19
    d368:	90 93 82 09 	sts	0x0982, r25
    d36c:	80 93 81 09 	sts	0x0981, r24

	// Bipolar throttle must use the nominal mid-point as calibration is done at throttle minimum
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    d370:	80 91 de 08 	lds	r24, 0x08DE
    d374:	90 91 df 08 	lds	r25, 0x08DF
    d378:	86 5a       	subi	r24, 0xA6	; 166
    d37a:	9e 40       	sbci	r25, 0x0E	; 14
    d37c:	90 93 84 09 	sts	0x0984, r25
    d380:	80 93 83 09 	sts	0x0983, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    d384:	80 91 3b 08 	lds	r24, 0x083B
    d388:	81 30       	cpi	r24, 0x01	; 1
    d38a:	59 f4       	brne	.+22     	; 0xd3a2 <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    d38c:	80 91 85 09 	lds	r24, 0x0985
    d390:	90 91 86 09 	lds	r25, 0x0986
    d394:	91 95       	neg	r25
    d396:	81 95       	neg	r24
    d398:	91 09       	sbc	r25, r1
    d39a:	90 93 86 09 	sts	0x0986, r25
    d39e:	80 93 85 09 	sts	0x0985, r24
	}

	if (Config.ElevatorPol == REVERSED)
    d3a2:	80 91 dc 08 	lds	r24, 0x08DC
    d3a6:	81 30       	cpi	r24, 0x01	; 1
    d3a8:	59 f4       	brne	.+22     	; 0xd3c0 <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    d3aa:	80 91 87 09 	lds	r24, 0x0987
    d3ae:	90 91 88 09 	lds	r25, 0x0988
    d3b2:	91 95       	neg	r25
    d3b4:	81 95       	neg	r24
    d3b6:	91 09       	sbc	r25, r1
    d3b8:	90 93 88 09 	sts	0x0988, r25
    d3bc:	80 93 87 09 	sts	0x0987, r24
	}

	if (Config.RudderPol == REVERSED)
    d3c0:	80 91 3a 08 	lds	r24, 0x083A
    d3c4:	81 30       	cpi	r24, 0x01	; 1
    d3c6:	59 f4       	brne	.+22     	; 0xd3de <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    d3c8:	80 91 89 09 	lds	r24, 0x0989
    d3cc:	90 91 8a 09 	lds	r25, 0x098A
    d3d0:	91 95       	neg	r25
    d3d2:	81 95       	neg	r24
    d3d4:	91 09       	sbc	r25, r1
    d3d6:	90 93 8a 09 	sts	0x098A, r25
    d3da:	80 93 89 09 	sts	0x0989, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    d3de:	40 91 85 09 	lds	r20, 0x0985
    d3e2:	50 91 86 09 	lds	r21, 0x0986
    d3e6:	80 91 87 09 	lds	r24, 0x0987
    d3ea:	90 91 88 09 	lds	r25, 0x0988
    d3ee:	20 91 89 09 	lds	r18, 0x0989
    d3f2:	30 91 8a 09 	lds	r19, 0x098A
    d3f6:	84 0f       	add	r24, r20
    d3f8:	95 1f       	adc	r25, r21
    d3fa:	82 0f       	add	r24, r18
    d3fc:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    d3fe:	20 91 68 05 	lds	r18, 0x0568
    d402:	30 91 69 05 	lds	r19, 0x0569
    d406:	ac 01       	movw	r20, r24
    d408:	42 1b       	sub	r20, r18
    d40a:	53 0b       	sbc	r21, r19
    d40c:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    d40e:	2b 5f       	subi	r18, 0xFB	; 251
    d410:	3f 4f       	sbci	r19, 0xFF	; 255
    d412:	2b 30       	cpi	r18, 0x0B	; 11
    d414:	31 05       	cpc	r19, r1
    d416:	38 f4       	brcc	.+14     	; 0xd426 <RxGetChannels+0x106>
    d418:	20 91 81 09 	lds	r18, 0x0981
    d41c:	30 91 82 09 	lds	r19, 0x0982
    d420:	23 33       	cpi	r18, 0x33	; 51
    d422:	31 05       	cpc	r19, r1
    d424:	24 f0       	brlt	.+8      	; 0xd42e <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    d426:	20 91 34 05 	lds	r18, 0x0534
    d42a:	21 60       	ori	r18, 0x01	; 1
    d42c:	03 c0       	rjmp	.+6      	; 0xd434 <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    d42e:	20 91 34 05 	lds	r18, 0x0534
    d432:	2e 7f       	andi	r18, 0xFE	; 254
    d434:	20 93 34 05 	sts	0x0534, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    d438:	10 92 94 09 	sts	0x0994, r1
    d43c:	10 92 93 09 	sts	0x0993, r1

	OldRxSum = RxSum;
    d440:	90 93 69 05 	sts	0x0569, r25
    d444:	80 93 68 05 	sts	0x0568, r24
    d448:	08 95       	ret

0000d44a <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    d44a:	ef 92       	push	r14
    d44c:	ff 92       	push	r15
    d44e:	0f 93       	push	r16
    d450:	1f 93       	push	r17
    d452:	cf 93       	push	r28
    d454:	df 93       	push	r29
    d456:	cd b7       	in	r28, 0x3d	; 61
    d458:	de b7       	in	r29, 0x3e	; 62
    d45a:	60 97       	sbiw	r28, 0x10	; 16
    d45c:	0f b6       	in	r0, 0x3f	; 63
    d45e:	f8 94       	cli
    d460:	de bf       	out	0x3e, r29	; 62
    d462:	0f be       	out	0x3f, r0	; 63
    d464:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    d466:	9e 01       	movw	r18, r28
    d468:	2f 5f       	subi	r18, 0xFF	; 255
    d46a:	3f 4f       	sbci	r19, 0xFF	; 255
    d46c:	80 e1       	ldi	r24, 0x10	; 16
    d46e:	f9 01       	movw	r30, r18
    d470:	11 92       	st	Z+, r1
    d472:	8a 95       	dec	r24
    d474:	e9 f7       	brne	.-6      	; 0xd470 <CenterSticks+0x26>
    d476:	48 e0       	ldi	r20, 0x08	; 8
    d478:	79 01       	movw	r14, r18
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    d47a:	d9 01       	movw	r26, r18
    d47c:	80 e0       	ldi	r24, 0x00	; 0
    d47e:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i = 0; i < 8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    d480:	bc 01       	movw	r22, r24
    d482:	66 0f       	add	r22, r22
    d484:	77 1f       	adc	r23, r23
    d486:	62 52       	subi	r22, 0x22	; 34
    d488:	77 4f       	sbci	r23, 0xF7	; 247
    d48a:	fb 01       	movw	r30, r22
    d48c:	60 81       	ld	r22, Z
    d48e:	71 81       	ldd	r23, Z+1	; 0x01
    d490:	0d 91       	ld	r16, X+
    d492:	1c 91       	ld	r17, X
    d494:	11 97       	sbiw	r26, 0x01	; 1
    d496:	60 0f       	add	r22, r16
    d498:	71 1f       	adc	r23, r17
    d49a:	6d 93       	st	X+, r22
    d49c:	7d 93       	st	X+, r23
    d49e:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i = 0; i < 8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    d4a0:	88 30       	cpi	r24, 0x08	; 8
    d4a2:	91 05       	cpc	r25, r1
    d4a4:	69 f7       	brne	.-38     	; 0xd480 <CenterSticks+0x36>
    d4a6:	ff e7       	ldi	r31, 0x7F	; 127
    d4a8:	5a e1       	ldi	r21, 0x1A	; 26
    d4aa:	86 e0       	ldi	r24, 0x06	; 6
    d4ac:	f1 50       	subi	r31, 0x01	; 1
    d4ae:	50 40       	sbci	r21, 0x00	; 0
    d4b0:	80 40       	sbci	r24, 0x00	; 0
    d4b2:	e1 f7       	brne	.-8      	; 0xd4ac <CenterSticks+0x62>
    d4b4:	00 c0       	rjmp	.+0      	; 0xd4b6 <CenterSticks+0x6c>
    d4b6:	00 00       	nop
    d4b8:	41 50       	subi	r20, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i = 0; i < 8; i++)
    d4ba:	f1 f6       	brne	.-68     	; 0xd478 <CenterSticks+0x2e>
    d4bc:	ac e0       	ldi	r26, 0x0C	; 12
    d4be:	b8 e0       	ldi	r27, 0x08	; 8
    d4c0:	9e 01       	movw	r18, r28
    d4c2:	2f 5e       	subi	r18, 0xEF	; 239
    d4c4:	3f 4f       	sbci	r19, 0xFF	; 255
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    d4c6:	f7 01       	movw	r30, r14
    d4c8:	81 91       	ld	r24, Z+
    d4ca:	91 91       	ld	r25, Z+
    d4cc:	7f 01       	movw	r14, r30
    d4ce:	04 96       	adiw	r24, 0x04	; 4
    d4d0:	43 e0       	ldi	r20, 0x03	; 3
    d4d2:	96 95       	lsr	r25
    d4d4:	87 95       	ror	r24
    d4d6:	4a 95       	dec	r20
    d4d8:	e1 f7       	brne	.-8      	; 0xd4d2 <CenterSticks+0x88>
    d4da:	8d 93       	st	X+, r24
    d4dc:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    d4de:	e2 17       	cp	r30, r18
    d4e0:	f3 07       	cpc	r31, r19
    d4e2:	89 f7       	brne	.-30     	; 0xd4c6 <CenterSticks+0x7c>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    d4e4:	60 96       	adiw	r28, 0x10	; 16
    d4e6:	0f b6       	in	r0, 0x3f	; 63
    d4e8:	f8 94       	cli
    d4ea:	de bf       	out	0x3e, r29	; 62
    d4ec:	0f be       	out	0x3f, r0	; 63
    d4ee:	cd bf       	out	0x3d, r28	; 61
    d4f0:	df 91       	pop	r29
    d4f2:	cf 91       	pop	r28
    d4f4:	1f 91       	pop	r17
    d4f6:	0f 91       	pop	r16
    d4f8:	ff 90       	pop	r15
    d4fa:	ef 90       	pop	r14
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    d4fc:	0c 94 53 26 	jmp	0x4ca6	; 0x4ca6 <Save_Config_to_EEPROM>

0000d500 <UpdateTransition>:
void UpdateTransition(void)
{
	int16_t temp = 0;
	
	// Offset RC input to (approx) -250 to 2250
	temp = RCinputs[Config.FlightChan] + 1000;
    d500:	e0 91 66 06 	lds	r30, 0x0666
    d504:	ee 0f       	add	r30, r30
    d506:	ff 0b       	sbc	r31, r31
    d508:	ed 57       	subi	r30, 0x7D	; 125
    d50a:	f6 4f       	sbci	r31, 0xF6	; 246
    d50c:	80 81       	ld	r24, Z
    d50e:	91 81       	ldd	r25, Z+1	; 0x01
    d510:	88 51       	subi	r24, 0x18	; 24
    d512:	9c 4f       	sbci	r25, 0xFC	; 252
    d514:	97 ff       	sbrs	r25, 7
    d516:	02 c0       	rjmp	.+4      	; 0xd51c <UpdateTransition+0x1c>
    d518:	80 e0       	ldi	r24, 0x00	; 0
    d51a:	90 e0       	ldi	r25, 0x00	; 0
	// Trim lower end to zero (0 to 2250)
	if (temp < 0) temp = 0;

	// Convert 0 to 2250 to 0 to 125. Divide by 20
	// Round to avoid truncation errors
	transition = (temp + 10) / 20;
    d51c:	0a 96       	adiw	r24, 0x0a	; 10
    d51e:	64 e1       	ldi	r22, 0x14	; 20
    d520:	70 e0       	ldi	r23, 0x00	; 0
    d522:	0e 94 73 6f 	call	0xdee6	; 0xdee6 <__divmodhi4>

	// transition now has a range of 0 to 101 for 0 to 2000 input
	// Limit extent of transition value 0 to 100 (101 steps)
	if (transition > 100) transition = 100;
    d526:	65 36       	cpi	r22, 0x65	; 101
    d528:	71 05       	cpc	r23, r1
    d52a:	2c f4       	brge	.+10     	; 0xd536 <UpdateTransition+0x36>
	// Trim lower end to zero (0 to 2250)
	if (temp < 0) temp = 0;

	// Convert 0 to 2250 to 0 to 125. Divide by 20
	// Round to avoid truncation errors
	transition = (temp + 10) / 20;
    d52c:	70 93 39 05 	sts	0x0539, r23
    d530:	60 93 38 05 	sts	0x0538, r22
    d534:	08 95       	ret

	// transition now has a range of 0 to 101 for 0 to 2000 input
	// Limit extent of transition value 0 to 100 (101 steps)
	if (transition > 100) transition = 100;
    d536:	84 e6       	ldi	r24, 0x64	; 100
    d538:	90 e0       	ldi	r25, 0x00	; 0
    d53a:	90 93 39 05 	sts	0x0539, r25
    d53e:	80 93 38 05 	sts	0x0538, r24
    d542:	08 95       	ret

0000d544 <UpdateChOrder>:
	
	// Populate each channel number with the correct lookup channel
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		// Update channel sequence
		if (Config.TxSeq == FUTABASEQ)
    d544:	20 91 65 06 	lds	r18, 0x0665
    d548:	aa e3       	ldi	r26, 0x3A	; 58
    d54a:	b6 e0       	ldi	r27, 0x06	; 6
    d54c:	80 e0       	ldi	r24, 0x00	; 0
    d54e:	90 e0       	ldi	r25, 0x00	; 0
    d550:	21 30       	cpi	r18, 0x01	; 1
    d552:	21 f4       	brne	.+8      	; 0xd55c <UpdateChOrder+0x18>
    d554:	fc 01       	movw	r30, r24
    d556:	ea 51       	subi	r30, 0x1A	; 26
    d558:	fe 4f       	sbci	r31, 0xFE	; 254
    d55a:	05 c0       	rjmp	.+10     	; 0xd566 <UpdateChOrder+0x22>
		{
			Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
		}
		else if (Config.TxSeq == JRSEQ)
    d55c:	21 11       	cpse	r18, r1
    d55e:	06 c0       	rjmp	.+12     	; 0xd56c <UpdateChOrder+0x28>
    d560:	fc 01       	movw	r30, r24
    d562:	e2 51       	subi	r30, 0x12	; 18
    d564:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    d566:	e4 91       	lpm	r30, Z
    d568:	ec 93       	st	X, r30
    d56a:	0b c0       	rjmp	.+22     	; 0xd582 <UpdateChOrder+0x3e>
		}
		else if (Config.TxSeq == MPXSEQ)
    d56c:	22 30       	cpi	r18, 0x02	; 2
    d56e:	21 f4       	brne	.+8      	; 0xd578 <UpdateChOrder+0x34>
    d570:	fc 01       	movw	r30, r24
    d572:	e2 52       	subi	r30, 0x22	; 34
    d574:	fe 4f       	sbci	r31, 0xFE	; 254
    d576:	f7 cf       	rjmp	.-18     	; 0xd566 <UpdateChOrder+0x22>
    d578:	fd 01       	movw	r30, r26
    d57a:	e6 5a       	subi	r30, 0xA6	; 166
    d57c:	fd 4f       	sbci	r31, 0xFD	; 253
			Config.ChannelOrder[i] = pgm_read_byte(&MPX[i]);
		}
		// Otherwise load from custom channel order
		else
		{
			Config.ChannelOrder[i] = Config.CustomChannelOrder[i];
    d57e:	30 81       	ld	r19, Z
    d580:	3c 93       	st	X, r19
    d582:	01 96       	adiw	r24, 0x01	; 1
    d584:	11 96       	adiw	r26, 0x01	; 1
void UpdateChOrder(void)
{
	uint8_t i;
	
	// Populate each channel number with the correct lookup channel
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    d586:	88 30       	cpi	r24, 0x08	; 8
    d588:	91 05       	cpc	r25, r1
    d58a:	11 f7       	brne	.-60     	; 0xd550 <UpdateChOrder+0xc>
		else
		{
			Config.ChannelOrder[i] = Config.CustomChannelOrder[i];
		}
	}
    d58c:	08 95       	ret

0000d58e <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    d58e:	3f 92       	push	r3
    d590:	4f 92       	push	r4
    d592:	5f 92       	push	r5
    d594:	6f 92       	push	r6
    d596:	7f 92       	push	r7
    d598:	8f 92       	push	r8
    d59a:	9f 92       	push	r9
    d59c:	af 92       	push	r10
    d59e:	bf 92       	push	r11
    d5a0:	cf 92       	push	r12
    d5a2:	df 92       	push	r13
    d5a4:	ef 92       	push	r14
    d5a6:	ff 92       	push	r15
    d5a8:	0f 93       	push	r16
    d5aa:	1f 93       	push	r17
    d5ac:	cf 93       	push	r28
    d5ae:	df 93       	push	r29
    d5b0:	00 d0       	rcall	.+0      	; 0xd5b2 <output_servo_ppm+0x24>
    d5b2:	00 d0       	rcall	.+0      	; 0xd5b4 <output_servo_ppm+0x26>
    d5b4:	cd b7       	in	r28, 0x3d	; 61
    d5b6:	de b7       	in	r29, 0x3e	; 62
    d5b8:	38 2e       	mov	r3, r24
    d5ba:	e8 ee       	ldi	r30, 0xE8	; 232
    d5bc:	ce 2e       	mov	r12, r30
    d5be:	e6 e0       	ldi	r30, 0x06	; 6
    d5c0:	de 2e       	mov	r13, r30
    d5c2:	09 e3       	ldi	r16, 0x39	; 57
    d5c4:	16 e0       	ldi	r17, 0x06	; 6
    d5c6:	da 82       	std	Y+2, r13	; 0x02
    d5c8:	c9 82       	std	Y+1, r12	; 0x01
    d5ca:	1c 82       	std	Y+4, r1	; 0x04
    d5cc:	1b 82       	std	Y+3, r1	; 0x03
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    d5ce:	fa e0       	ldi	r31, 0x0A	; 10
    d5d0:	4f 2e       	mov	r4, r31
    d5d2:	51 2c       	mov	r5, r1
    d5d4:	61 2c       	mov	r6, r1
    d5d6:	71 2c       	mov	r7, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds and check limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    d5d8:	eb 80       	ldd	r14, Y+3	; 0x03
    d5da:	fc 80       	ldd	r15, Y+4	; 0x04
    d5dc:	ee 0c       	add	r14, r14
    d5de:	ff 1c       	adc	r15, r15
    d5e0:	f7 01       	movw	r30, r14
    d5e2:	eb 56       	subi	r30, 0x6B	; 107
    d5e4:	f6 4f       	sbci	r31, 0xF6	; 246
    d5e6:	20 81       	ld	r18, Z
    d5e8:	31 81       	ldd	r19, Z+1	; 0x01
    d5ea:	a9 01       	movw	r20, r18
    d5ec:	60 e0       	ldi	r22, 0x00	; 0
    d5ee:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    d5f0:	e9 81       	ldd	r30, Y+1	; 0x01
    d5f2:	fa 81       	ldd	r31, Y+2	; 0x02
    d5f4:	80 81       	ld	r24, Z
    d5f6:	82 30       	cpi	r24, 0x02	; 2
    d5f8:	89 f0       	breq	.+34     	; 0xd61c <output_servo_ppm+0x8e>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    d5fa:	db 01       	movw	r26, r22
    d5fc:	ca 01       	movw	r24, r20
    d5fe:	86 5a       	subi	r24, 0xA6	; 166
    d600:	9e 40       	sbci	r25, 0x0E	; 14
    d602:	a1 09       	sbc	r26, r1
    d604:	b1 09       	sbc	r27, r1
    d606:	b5 95       	asr	r27
    d608:	a7 95       	ror	r26
    d60a:	97 95       	ror	r25
    d60c:	87 95       	ror	r24
    d60e:	9c 01       	movw	r18, r24
    d610:	ad 01       	movw	r20, r26
    d612:	24 52       	subi	r18, 0x24	; 36
    d614:	3a 4f       	sbci	r19, 0xFA	; 250
    d616:	4f 4f       	sbci	r20, 0xFF	; 255
    d618:	5f 4f       	sbci	r21, 0xFF	; 255
    d61a:	13 c0       	rjmp	.+38     	; 0xd642 <output_servo_ppm+0xb4>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    d61c:	db 01       	movw	r26, r22
    d61e:	ca 01       	movw	r24, r20
    d620:	52 e0       	ldi	r21, 0x02	; 2
    d622:	88 0f       	add	r24, r24
    d624:	99 1f       	adc	r25, r25
    d626:	aa 1f       	adc	r26, r26
    d628:	bb 1f       	adc	r27, r27
    d62a:	5a 95       	dec	r21
    d62c:	d1 f7       	brne	.-12     	; 0xd622 <output_servo_ppm+0x94>
    d62e:	bc 01       	movw	r22, r24
    d630:	cd 01       	movw	r24, r26
    d632:	6b 5f       	subi	r22, 0xFB	; 251
    d634:	7f 4f       	sbci	r23, 0xFF	; 255
    d636:	8f 4f       	sbci	r24, 0xFF	; 255
    d638:	9f 4f       	sbci	r25, 0xFF	; 255
    d63a:	a3 01       	movw	r20, r6
    d63c:	92 01       	movw	r18, r4
    d63e:	0e 94 87 6f 	call	0xdf0e	; 0xdf0e <__divmodsi4>
		}
		
		// Enforce min, max travel limits in microseconds
		if (temp > Config.Limits[i].maximum)
    d642:	f8 01       	movw	r30, r16
    d644:	83 85       	ldd	r24, Z+11	; 0x0b
    d646:	94 85       	ldd	r25, Z+12	; 0x0c
    d648:	09 2e       	mov	r0, r25
    d64a:	00 0c       	add	r0, r0
    d64c:	aa 0b       	sbc	r26, r26
    d64e:	bb 0b       	sbc	r27, r27
    d650:	82 17       	cp	r24, r18
    d652:	93 07       	cpc	r25, r19
    d654:	a4 07       	cpc	r26, r20
    d656:	b5 07       	cpc	r27, r21
    d658:	7c f0       	brlt	.+30     	; 0xd678 <output_servo_ppm+0xea>
		{
			temp = Config.Limits[i].maximum;
		}

		else if (temp < Config.Limits[i].minimum)
    d65a:	81 85       	ldd	r24, Z+9	; 0x09
    d65c:	92 85       	ldd	r25, Z+10	; 0x0a
    d65e:	4c 01       	movw	r8, r24
    d660:	99 0f       	add	r25, r25
    d662:	aa 08       	sbc	r10, r10
    d664:	bb 08       	sbc	r11, r11
    d666:	da 01       	movw	r26, r20
    d668:	c9 01       	movw	r24, r18
    d66a:	28 15       	cp	r18, r8
    d66c:	39 05       	cpc	r19, r9
    d66e:	4a 05       	cpc	r20, r10
    d670:	5b 05       	cpc	r21, r11
    d672:	14 f4       	brge	.+4      	; 0xd678 <output_servo_ppm+0xea>
    d674:	d5 01       	movw	r26, r10
    d676:	c4 01       	movw	r24, r8
		{
			temp = Config.Limits[i].minimum;
		}

		ServoOut[i] = (uint16_t)temp;
    d678:	f7 01       	movw	r30, r14
    d67a:	eb 56       	subi	r30, 0x6B	; 107
    d67c:	f6 4f       	sbci	r31, 0xF6	; 246
    d67e:	91 83       	std	Z+1, r25	; 0x01
    d680:	80 83       	st	Z, r24
    d682:	8b 81       	ldd	r24, Y+3	; 0x03
    d684:	9c 81       	ldd	r25, Y+4	; 0x04
    d686:	01 96       	adiw	r24, 0x01	; 1
    d688:	9c 83       	std	Y+4, r25	; 0x04
    d68a:	8b 83       	std	Y+3, r24	; 0x03
    d68c:	e9 81       	ldd	r30, Y+1	; 0x01
    d68e:	fa 81       	ldd	r31, Y+2	; 0x02
    d690:	b2 96       	adiw	r30, 0x22	; 34
    d692:	fa 83       	std	Y+2, r31	; 0x02
    d694:	e9 83       	std	Y+1, r30	; 0x01
    d696:	0c 5f       	subi	r16, 0xFC	; 252
    d698:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds and check limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    d69a:	08 97       	sbiw	r24, 0x08	; 8
    d69c:	09 f0       	breq	.+2      	; 0xd6a0 <output_servo_ppm+0x112>
    d69e:	9c cf       	rjmp	.-200    	; 0xd5d8 <output_servo_ppm+0x4a>
	}

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so.
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) ||
    d6a0:	80 91 81 09 	lds	r24, 0x0981
    d6a4:	90 91 82 09 	lds	r25, 0x0982
		ServoOut[i] = (uint16_t)temp;
	}

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so.
	if 	(
    d6a8:	c2 97       	sbiw	r24, 0x32	; 50
    d6aa:	4c f0       	brlt	.+18     	; 0xd6be <output_servo_ppm+0x130>
			(MonopolarThrottle < THROTTLEIDLE) ||
			(General_error & (1 << DISARMED))
    d6ac:	80 91 35 05 	lds	r24, 0x0535
	}

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so.
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) ||
    d6b0:	82 fd       	sbrc	r24, 2
    d6b2:	05 c0       	rjmp	.+10     	; 0xd6be <output_servo_ppm+0x130>

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
			((General_error & (1 << THROTTLE_HIGH)) == 0) &&
    d6b4:	80 91 35 05 	lds	r24, 0x0535
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
    d6b8:	80 ff       	sbrs	r24, 0
    d6ba:	18 c0       	rjmp	.+48     	; 0xd6ec <output_servo_ppm+0x15e>
    d6bc:	27 c0       	rjmp	.+78     	; 0xd70c <output_servo_ppm+0x17e>
    d6be:	80 e0       	ldi	r24, 0x00	; 0
    d6c0:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    d6c2:	28 ee       	ldi	r18, 0xE8	; 232
    d6c4:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    d6c6:	f6 01       	movw	r30, r12
    d6c8:	40 81       	ld	r20, Z
    d6ca:	42 30       	cpi	r20, 0x02	; 2
    d6cc:	39 f4       	brne	.+14     	; 0xd6dc <output_servo_ppm+0x14e>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    d6ce:	fc 01       	movw	r30, r24
    d6d0:	ee 0f       	add	r30, r30
    d6d2:	ff 1f       	adc	r31, r31
    d6d4:	eb 56       	subi	r30, 0x6B	; 107
    d6d6:	f6 4f       	sbci	r31, 0xF6	; 246
    d6d8:	31 83       	std	Z+1, r19	; 0x01
    d6da:	20 83       	st	Z, r18
    d6dc:	01 96       	adiw	r24, 0x01	; 1
    d6de:	f2 e2       	ldi	r31, 0x22	; 34
    d6e0:	cf 0e       	add	r12, r31
    d6e2:	d1 1c       	adc	r13, r1
			(MonopolarThrottle < THROTTLEIDLE) ||
			(General_error & (1 << DISARMED))
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    d6e4:	88 30       	cpi	r24, 0x08	; 8
    d6e6:	91 05       	cpc	r25, r1
    d6e8:	71 f7       	brne	.-36     	; 0xd6c6 <output_servo_ppm+0x138>
    d6ea:	e4 cf       	rjmp	.-56     	; 0xd6b4 <output_servo_ppm+0x126>
	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
			((General_error & (1 << THROTTLE_HIGH)) == 0) &&
			((Flight_flags & (1 << ARM_blocker)) == 0)
    d6ec:	80 91 34 05 	lds	r24, 0x0534

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
			((General_error & (1 << THROTTLE_HIGH)) == 0) &&
    d6f0:	81 fd       	sbrc	r24, 1
    d6f2:	0c c0       	rjmp	.+24     	; 0xd70c <output_servo_ppm+0x17e>
    d6f4:	63 2d       	mov	r22, r3
			((Flight_flags & (1 << ARM_blocker)) == 0)
	   )
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    d6f6:	10 92 1a 09 	sts	0x091A, r1
	
		// We now care about interrupts
		JitterGate = true;
    d6fa:	81 e0       	ldi	r24, 0x01	; 1
    d6fc:	80 93 19 09 	sts	0x0919, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    d700:	85 e9       	ldi	r24, 0x95	; 149
    d702:	99 e0       	ldi	r25, 0x09	; 9
    d704:	0e 94 23 16 	call	0x2c46	; 0x2c46 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    d708:	10 92 19 09 	sts	0x0919, r1
	}
}
    d70c:	0f 90       	pop	r0
    d70e:	0f 90       	pop	r0
    d710:	0f 90       	pop	r0
    d712:	0f 90       	pop	r0
    d714:	df 91       	pop	r29
    d716:	cf 91       	pop	r28
    d718:	1f 91       	pop	r17
    d71a:	0f 91       	pop	r16
    d71c:	ff 90       	pop	r15
    d71e:	ef 90       	pop	r14
    d720:	df 90       	pop	r13
    d722:	cf 90       	pop	r12
    d724:	bf 90       	pop	r11
    d726:	af 90       	pop	r10
    d728:	9f 90       	pop	r9
    d72a:	8f 90       	pop	r8
    d72c:	7f 90       	pop	r7
    d72e:	6f 90       	pop	r6
    d730:	5f 90       	pop	r5
    d732:	4f 90       	pop	r4
    d734:	3f 90       	pop	r3
    d736:	08 95       	ret

0000d738 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    d738:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    d73c:	81 e1       	ldi	r24, 0x11	; 17
    d73e:	80 93 b8 00 	sts	0x00B8, r24
    d742:	08 95       	ret

0000d744 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    d744:	94 ea       	ldi	r25, 0xA4	; 164
    d746:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    d74a:	4f ef       	ldi	r20, 0xFF	; 255
    d74c:	50 e0       	ldi	r21, 0x00	; 0
    d74e:	60 e0       	ldi	r22, 0x00	; 0
    d750:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d752:	90 91 bc 00 	lds	r25, 0x00BC
    d756:	97 fd       	sbrc	r25, 7
    d758:	06 c0       	rjmp	.+12     	; 0xd766 <i2c_start+0x22>
    d75a:	41 50       	subi	r20, 0x01	; 1
    d75c:	51 09       	sbc	r21, r1
    d75e:	61 09       	sbc	r22, r1
    d760:	71 09       	sbc	r23, r1
    d762:	b8 f7       	brcc	.-18     	; 0xd752 <i2c_start+0xe>
    d764:	06 c0       	rjmp	.+12     	; 0xd772 <i2c_start+0x2e>
	if(i2c_timer == 0)
    d766:	45 2b       	or	r20, r21
    d768:	46 2b       	or	r20, r22
    d76a:	47 2b       	or	r20, r23
    d76c:	11 f4       	brne	.+4      	; 0xd772 <i2c_start+0x2e>
		return 1;
    d76e:	81 e0       	ldi	r24, 0x01	; 1
    d770:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    d772:	90 91 b9 00 	lds	r25, 0x00B9
    d776:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    d778:	98 30       	cpi	r25, 0x08	; 8
    d77a:	11 f0       	breq	.+4      	; 0xd780 <i2c_start+0x3c>
    d77c:	90 31       	cpi	r25, 0x10	; 16
    d77e:	b9 f7       	brne	.-18     	; 0xd76e <i2c_start+0x2a>

	// send device address
	TWDR = address;
    d780:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    d784:	84 e8       	ldi	r24, 0x84	; 132
    d786:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    d78a:	8f ef       	ldi	r24, 0xFF	; 255
    d78c:	90 e0       	ldi	r25, 0x00	; 0
    d78e:	a0 e0       	ldi	r26, 0x00	; 0
    d790:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d792:	20 91 bc 00 	lds	r18, 0x00BC
    d796:	27 fd       	sbrc	r18, 7
    d798:	05 c0       	rjmp	.+10     	; 0xd7a4 <i2c_start+0x60>
    d79a:	01 97       	sbiw	r24, 0x01	; 1
    d79c:	a1 09       	sbc	r26, r1
    d79e:	b1 09       	sbc	r27, r1
    d7a0:	c0 f7       	brcc	.-16     	; 0xd792 <i2c_start+0x4e>
    d7a2:	04 c0       	rjmp	.+8      	; 0xd7ac <i2c_start+0x68>
	if(i2c_timer == 0)
    d7a4:	89 2b       	or	r24, r25
    d7a6:	8a 2b       	or	r24, r26
    d7a8:	8b 2b       	or	r24, r27
    d7aa:	09 f3       	breq	.-62     	; 0xd76e <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    d7ac:	80 91 b9 00 	lds	r24, 0x00B9
    d7b0:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    d7b2:	88 31       	cpi	r24, 0x18	; 24
    d7b4:	11 f0       	breq	.+4      	; 0xd7ba <i2c_start+0x76>
    d7b6:	80 34       	cpi	r24, 0x40	; 64
    d7b8:	d1 f6       	brne	.-76     	; 0xd76e <i2c_start+0x2a>

	return 0;
    d7ba:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    d7bc:	08 95       	ret

0000d7be <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    d7be:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    d7c0:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    d7c2:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    d7c4:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d7c8:	20 e0       	ldi	r18, 0x00	; 0
    d7ca:	30 e0       	ldi	r19, 0x00	; 0
    d7cc:	90 91 bc 00 	lds	r25, 0x00BC
    d7d0:	97 fd       	sbrc	r25, 7
    d7d2:	06 c0       	rjmp	.+12     	; 0xd7e0 <i2c_start_wait+0x22>
    d7d4:	2f 5f       	subi	r18, 0xFF	; 255
    d7d6:	3f 4f       	sbci	r19, 0xFF	; 255
    d7d8:	21 15       	cp	r18, r1
    d7da:	91 e0       	ldi	r25, 0x01	; 1
    d7dc:	39 07       	cpc	r19, r25
    d7de:	b1 f7       	brne	.-20     	; 0xd7cc <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    d7e0:	90 91 b9 00 	lds	r25, 0x00B9
    d7e4:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    d7e6:	98 30       	cpi	r25, 0x08	; 8
    d7e8:	11 f0       	breq	.+4      	; 0xd7ee <i2c_start_wait+0x30>
    d7ea:	90 31       	cpi	r25, 0x10	; 16
    d7ec:	59 f7       	brne	.-42     	; 0xd7c4 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    d7ee:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    d7f2:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d7f6:	20 e0       	ldi	r18, 0x00	; 0
    d7f8:	30 e0       	ldi	r19, 0x00	; 0
    d7fa:	90 91 bc 00 	lds	r25, 0x00BC
    d7fe:	97 fd       	sbrc	r25, 7
    d800:	06 c0       	rjmp	.+12     	; 0xd80e <i2c_start_wait+0x50>
    d802:	2f 5f       	subi	r18, 0xFF	; 255
    d804:	3f 4f       	sbci	r19, 0xFF	; 255
    d806:	21 15       	cp	r18, r1
    d808:	91 e0       	ldi	r25, 0x01	; 1
    d80a:	39 07       	cpc	r19, r25
    d80c:	b1 f7       	brne	.-20     	; 0xd7fa <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    d80e:	90 91 b9 00 	lds	r25, 0x00B9
    d812:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    d814:	90 32       	cpi	r25, 0x20	; 32
    d816:	11 f0       	breq	.+4      	; 0xd81c <i2c_start_wait+0x5e>
    d818:	98 35       	cpi	r25, 0x58	; 88
    d81a:	79 f4       	brne	.+30     	; 0xd83a <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    d81c:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    d820:	20 e0       	ldi	r18, 0x00	; 0
    d822:	30 e0       	ldi	r19, 0x00	; 0
    d824:	90 91 bc 00 	lds	r25, 0x00BC
    d828:	94 ff       	sbrs	r25, 4
    d82a:	cc cf       	rjmp	.-104    	; 0xd7c4 <i2c_start_wait+0x6>
    d82c:	2f 5f       	subi	r18, 0xFF	; 255
    d82e:	3f 4f       	sbci	r19, 0xFF	; 255
    d830:	21 15       	cp	r18, r1
    d832:	91 e0       	ldi	r25, 0x01	; 1
    d834:	39 07       	cpc	r19, r25
    d836:	b1 f7       	brne	.-20     	; 0xd824 <i2c_start_wait+0x66>
    d838:	c5 cf       	rjmp	.-118    	; 0xd7c4 <i2c_start_wait+0x6>
    d83a:	08 95       	ret

0000d83c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    d83c:	0c 94 a2 6b 	jmp	0xd744	; 0xd744 <i2c_start>

0000d840 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    d840:	84 e9       	ldi	r24, 0x94	; 148
    d842:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    d846:	80 e0       	ldi	r24, 0x00	; 0
    d848:	90 e0       	ldi	r25, 0x00	; 0
    d84a:	20 91 bc 00 	lds	r18, 0x00BC
    d84e:	24 ff       	sbrs	r18, 4
    d850:	05 c0       	rjmp	.+10     	; 0xd85c <i2c_stop+0x1c>
    d852:	01 96       	adiw	r24, 0x01	; 1
    d854:	81 15       	cp	r24, r1
    d856:	21 e0       	ldi	r18, 0x01	; 1
    d858:	92 07       	cpc	r25, r18
    d85a:	b9 f7       	brne	.-18     	; 0xd84a <i2c_stop+0xa>
    d85c:	08 95       	ret

0000d85e <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    d85e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    d862:	84 e8       	ldi	r24, 0x84	; 132
    d864:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    d868:	8f ef       	ldi	r24, 0xFF	; 255
    d86a:	90 e0       	ldi	r25, 0x00	; 0
    d86c:	a0 e0       	ldi	r26, 0x00	; 0
    d86e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d870:	20 91 bc 00 	lds	r18, 0x00BC
    d874:	27 fd       	sbrc	r18, 7
    d876:	05 c0       	rjmp	.+10     	; 0xd882 <i2c_write+0x24>
    d878:	01 97       	sbiw	r24, 0x01	; 1
    d87a:	a1 09       	sbc	r26, r1
    d87c:	b1 09       	sbc	r27, r1
    d87e:	c0 f7       	brcc	.-16     	; 0xd870 <i2c_write+0x12>
    d880:	04 c0       	rjmp	.+8      	; 0xd88a <i2c_write+0x2c>
	if(i2c_timer == 0)
    d882:	89 2b       	or	r24, r25
    d884:	8a 2b       	or	r24, r26
    d886:	8b 2b       	or	r24, r27
    d888:	41 f0       	breq	.+16     	; 0xd89a <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    d88a:	90 91 b9 00 	lds	r25, 0x00B9
    d88e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    d890:	81 e0       	ldi	r24, 0x01	; 1
    d892:	98 32       	cpi	r25, 0x28	; 40
    d894:	19 f4       	brne	.+6      	; 0xd89c <i2c_write+0x3e>
    d896:	80 e0       	ldi	r24, 0x00	; 0
    d898:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    d89a:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    d89c:	08 95       	ret

0000d89e <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    d89e:	84 ec       	ldi	r24, 0xC4	; 196
    d8a0:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    d8a4:	8f ef       	ldi	r24, 0xFF	; 255
    d8a6:	90 e0       	ldi	r25, 0x00	; 0
    d8a8:	a0 e0       	ldi	r26, 0x00	; 0
    d8aa:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d8ac:	20 91 bc 00 	lds	r18, 0x00BC
    d8b0:	27 fd       	sbrc	r18, 7
    d8b2:	05 c0       	rjmp	.+10     	; 0xd8be <i2c_readAck+0x20>
    d8b4:	01 97       	sbiw	r24, 0x01	; 1
    d8b6:	a1 09       	sbc	r26, r1
    d8b8:	b1 09       	sbc	r27, r1
    d8ba:	c0 f7       	brcc	.-16     	; 0xd8ac <i2c_readAck+0xe>
    d8bc:	04 c0       	rjmp	.+8      	; 0xd8c6 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    d8be:	89 2b       	or	r24, r25
    d8c0:	8a 2b       	or	r24, r26
    d8c2:	8b 2b       	or	r24, r27
    d8c4:	19 f0       	breq	.+6      	; 0xd8cc <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    d8c6:	80 91 bb 00 	lds	r24, 0x00BB
    d8ca:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    d8cc:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    d8ce:	08 95       	ret

0000d8d0 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    d8d0:	84 e8       	ldi	r24, 0x84	; 132
    d8d2:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    d8d6:	8f ef       	ldi	r24, 0xFF	; 255
    d8d8:	90 e0       	ldi	r25, 0x00	; 0
    d8da:	a0 e0       	ldi	r26, 0x00	; 0
    d8dc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d8de:	20 91 bc 00 	lds	r18, 0x00BC
    d8e2:	27 fd       	sbrc	r18, 7
    d8e4:	05 c0       	rjmp	.+10     	; 0xd8f0 <i2c_readNak+0x20>
    d8e6:	01 97       	sbiw	r24, 0x01	; 1
    d8e8:	a1 09       	sbc	r26, r1
    d8ea:	b1 09       	sbc	r27, r1
    d8ec:	c0 f7       	brcc	.-16     	; 0xd8de <i2c_readNak+0xe>
    d8ee:	04 c0       	rjmp	.+8      	; 0xd8f8 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    d8f0:	89 2b       	or	r24, r25
    d8f2:	8a 2b       	or	r24, r26
    d8f4:	8b 2b       	or	r24, r27
    d8f6:	19 f0       	breq	.+6      	; 0xd8fe <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    d8f8:	80 91 bb 00 	lds	r24, 0x00BB
    d8fc:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    d8fe:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    d900:	08 95       	ret

0000d902 <init_uart>:
#define XBUS_CRC_POLY 0x1021

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    d902:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    d904:	80 91 c1 00 	lds	r24, 0x00C1
    d908:	8f 77       	andi	r24, 0x7F	; 127
    d90a:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    d90e:	80 91 c0 00 	lds	r24, 0x00C0
    d912:	87 ff       	sbrs	r24, 7
    d914:	05 c0       	rjmp	.+10     	; 0xd920 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    d916:	80 91 c6 00 	lds	r24, 0x00C6
    d91a:	80 93 c2 00 	sts	0x00C2, r24
    d91e:	f7 cf       	rjmp	.-18     	; 0xd90e <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    d920:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    d924:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    d928:	86 e0       	ldi	r24, 0x06	; 6
    d92a:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    d92e:	e0 91 62 06 	lds	r30, 0x0662
    d932:	8e 2f       	mov	r24, r30
    d934:	ee 0f       	add	r30, r30
    d936:	99 0b       	sbc	r25, r25
    d938:	aa 0b       	sbc	r26, r26
    d93a:	bb 0b       	sbc	r27, r27
    d93c:	87 30       	cpi	r24, 0x07	; 7
    d93e:	91 05       	cpc	r25, r1
    d940:	08 f0       	brcs	.+2      	; 0xd944 <init_uart+0x42>
    d942:	4d c0       	rjmp	.+154    	; 0xd9de <init_uart+0xdc>
    d944:	fc 01       	movw	r30, r24
    d946:	e0 56       	subi	r30, 0x60	; 96
    d948:	ff 4f       	sbci	r31, 0xFF	; 255
    d94a:	0c 94 a6 6f 	jmp	0xdf4c	; 0xdf4c <__tablejump2__>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    d94e:	80 91 c0 00 	lds	r24, 0x00C0
    d952:	8d 7f       	andi	r24, 0xFD	; 253
    d954:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    d958:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_XTREME & 0xff;		// 0x04
    d95c:	84 e0       	ldi	r24, 0x04	; 4
    d95e:	25 c0       	rjmp	.+74     	; 0xd9aa <init_uart+0xa8>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    d960:	80 91 c0 00 	lds	r24, 0x00C0
    d964:	82 60       	ori	r24, 0x02	; 2
    d966:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    d96a:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    d96e:	88 e1       	ldi	r24, 0x18	; 24
    d970:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    d974:	80 91 c1 00 	lds	r24, 0x00C1
    d978:	80 61       	ori	r24, 0x10	; 16
    d97a:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    d97e:	80 91 c2 00 	lds	r24, 0x00C2
    d982:	88 60       	ori	r24, 0x08	; 8
    d984:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    d988:	80 91 c2 00 	lds	r24, 0x00C2
    d98c:	8f 7e       	andi	r24, 0xEF	; 239
    d98e:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    d992:	80 91 c2 00 	lds	r24, 0x00C2
    d996:	80 62       	ori	r24, 0x20	; 32
    d998:	17 c0       	rjmp	.+46     	; 0xd9c8 <init_uart+0xc6>

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps) (Same for MODEB/UDI, SUMD)
		case SUMD:
		case MODEB:
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    d99a:	80 91 c0 00 	lds	r24, 0x00C0
    d99e:	8d 7f       	andi	r24, 0xFD	; 253
    d9a0:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    d9a4:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    d9a8:	8a e0       	ldi	r24, 0x0A	; 10
    d9aa:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    d9ae:	80 91 c1 00 	lds	r24, 0x00C1
    d9b2:	80 61       	ori	r24, 0x10	; 16
    d9b4:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    d9b8:	80 91 c2 00 	lds	r24, 0x00C2
    d9bc:	87 7f       	andi	r24, 0xF7	; 247
    d9be:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    d9c2:	80 91 c2 00 	lds	r24, 0x00C2
    d9c6:	8f 7e       	andi	r24, 0xEF	; 239
    d9c8:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    d9cc:	80 91 c1 00 	lds	r24, 0x00C1
    d9d0:	80 68       	ori	r24, 0x80	; 128
    d9d2:	03 c0       	rjmp	.+6      	; 0xd9da <init_uart+0xd8>
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    d9d4:	80 91 c1 00 	lds	r24, 0x00C1
    d9d8:	8f 7e       	andi	r24, 0xEF	; 239
    d9da:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    d9de:	78 94       	sei
    d9e0:	08 95       	ret

0000d9e2 <CRC16>:
// CRC16 checksum
uint16_t CRC16(uint16_t crc, uint8_t value)
{
	uint8_t i;
	
	crc = crc ^ (uint16_t)value << 8;
    d9e2:	96 27       	eor	r25, r22
    d9e4:	28 e0       	ldi	r18, 0x08	; 8
    d9e6:	ac 01       	movw	r20, r24
    d9e8:	44 0f       	add	r20, r20
    d9ea:	55 1f       	adc	r21, r21
	
	for (i = 0; i < 8; i++)
	{
		if (crc & 0x8000)
    d9ec:	97 ff       	sbrs	r25, 7
    d9ee:	06 c0       	rjmp	.+12     	; 0xd9fc <CRC16+0x1a>
		{
			crc = crc << 1 ^XBUS_CRC_POLY;
    d9f0:	ca 01       	movw	r24, r20
    d9f2:	31 e2       	ldi	r19, 0x21	; 33
    d9f4:	83 27       	eor	r24, r19
    d9f6:	30 e1       	ldi	r19, 0x10	; 16
    d9f8:	93 27       	eor	r25, r19
    d9fa:	01 c0       	rjmp	.+2      	; 0xd9fe <CRC16+0x1c>
		}
		else
		{
			crc = crc << 1;
    d9fc:	ca 01       	movw	r24, r20
    d9fe:	21 50       	subi	r18, 0x01	; 1
{
	uint8_t i;
	
	crc = crc ^ (uint16_t)value << 8;
	
	for (i = 0; i < 8; i++)
    da00:	91 f7       	brne	.-28     	; 0xd9e6 <CRC16+0x4>
			crc = crc << 1;
		}
	}

	return crc;
    da02:	08 95       	ret

0000da04 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    da04:	83 e0       	ldi	r24, 0x03	; 3
    da06:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    da0a:	20 91 78 00 	lds	r18, 0x0078
    da0e:	30 91 79 00 	lds	r19, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    da12:	a9 01       	movw	r20, r18
    da14:	56 95       	lsr	r21
    da16:	47 95       	ror	r20
    da18:	c9 01       	movw	r24, r18
    da1a:	88 0f       	add	r24, r24
    da1c:	99 1f       	adc	r25, r25
    da1e:	84 0f       	add	r24, r20
    da20:	95 1f       	adc	r25, r21
    da22:	a9 01       	movw	r20, r18
    da24:	74 e0       	ldi	r23, 0x04	; 4
    da26:	56 95       	lsr	r21
    da28:	47 95       	ror	r20
    da2a:	7a 95       	dec	r23
    da2c:	e1 f7       	brne	.-8      	; 0xda26 <GetVbat+0x22>
    da2e:	84 0f       	add	r24, r20
    da30:	95 1f       	adc	r25, r21
    da32:	e6 e0       	ldi	r30, 0x06	; 6
    da34:	36 95       	lsr	r19
    da36:	27 95       	ror	r18
    da38:	ea 95       	dec	r30
    da3a:	e1 f7       	brne	.-8      	; 0xda34 <GetVbat+0x30>

	return vBat;
}
    da3c:	82 0f       	add	r24, r18
    da3e:	93 1f       	adc	r25, r19
    da40:	08 95       	ret

0000da42 <__subsf3>:
    da42:	50 58       	subi	r21, 0x80	; 128

0000da44 <__addsf3>:
    da44:	bb 27       	eor	r27, r27
    da46:	aa 27       	eor	r26, r26
    da48:	0e 94 39 6d 	call	0xda72	; 0xda72 <__addsf3x>
    da4c:	0c 94 b3 6e 	jmp	0xdd66	; 0xdd66 <__fp_round>
    da50:	0e 94 a5 6e 	call	0xdd4a	; 0xdd4a <__fp_pscA>
    da54:	38 f0       	brcs	.+14     	; 0xda64 <__addsf3+0x20>
    da56:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <__fp_pscB>
    da5a:	20 f0       	brcs	.+8      	; 0xda64 <__addsf3+0x20>
    da5c:	39 f4       	brne	.+14     	; 0xda6c <__addsf3+0x28>
    da5e:	9f 3f       	cpi	r25, 0xFF	; 255
    da60:	19 f4       	brne	.+6      	; 0xda68 <__addsf3+0x24>
    da62:	26 f4       	brtc	.+8      	; 0xda6c <__addsf3+0x28>
    da64:	0c 94 a2 6e 	jmp	0xdd44	; 0xdd44 <__fp_nan>
    da68:	0e f4       	brtc	.+2      	; 0xda6c <__addsf3+0x28>
    da6a:	e0 95       	com	r30
    da6c:	e7 fb       	bst	r30, 7
    da6e:	0c 94 9c 6e 	jmp	0xdd38	; 0xdd38 <__fp_inf>

0000da72 <__addsf3x>:
    da72:	e9 2f       	mov	r30, r25
    da74:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__fp_split3>
    da78:	58 f3       	brcs	.-42     	; 0xda50 <__addsf3+0xc>
    da7a:	ba 17       	cp	r27, r26
    da7c:	62 07       	cpc	r22, r18
    da7e:	73 07       	cpc	r23, r19
    da80:	84 07       	cpc	r24, r20
    da82:	95 07       	cpc	r25, r21
    da84:	20 f0       	brcs	.+8      	; 0xda8e <__addsf3x+0x1c>
    da86:	79 f4       	brne	.+30     	; 0xdaa6 <__addsf3x+0x34>
    da88:	a6 f5       	brtc	.+104    	; 0xdaf2 <__addsf3x+0x80>
    da8a:	0c 94 e6 6e 	jmp	0xddcc	; 0xddcc <__fp_zero>
    da8e:	0e f4       	brtc	.+2      	; 0xda92 <__addsf3x+0x20>
    da90:	e0 95       	com	r30
    da92:	0b 2e       	mov	r0, r27
    da94:	ba 2f       	mov	r27, r26
    da96:	a0 2d       	mov	r26, r0
    da98:	0b 01       	movw	r0, r22
    da9a:	b9 01       	movw	r22, r18
    da9c:	90 01       	movw	r18, r0
    da9e:	0c 01       	movw	r0, r24
    daa0:	ca 01       	movw	r24, r20
    daa2:	a0 01       	movw	r20, r0
    daa4:	11 24       	eor	r1, r1
    daa6:	ff 27       	eor	r31, r31
    daa8:	59 1b       	sub	r21, r25
    daaa:	99 f0       	breq	.+38     	; 0xdad2 <__addsf3x+0x60>
    daac:	59 3f       	cpi	r21, 0xF9	; 249
    daae:	50 f4       	brcc	.+20     	; 0xdac4 <__addsf3x+0x52>
    dab0:	50 3e       	cpi	r21, 0xE0	; 224
    dab2:	68 f1       	brcs	.+90     	; 0xdb0e <__addsf3x+0x9c>
    dab4:	1a 16       	cp	r1, r26
    dab6:	f0 40       	sbci	r31, 0x00	; 0
    dab8:	a2 2f       	mov	r26, r18
    daba:	23 2f       	mov	r18, r19
    dabc:	34 2f       	mov	r19, r20
    dabe:	44 27       	eor	r20, r20
    dac0:	58 5f       	subi	r21, 0xF8	; 248
    dac2:	f3 cf       	rjmp	.-26     	; 0xdaaa <__addsf3x+0x38>
    dac4:	46 95       	lsr	r20
    dac6:	37 95       	ror	r19
    dac8:	27 95       	ror	r18
    daca:	a7 95       	ror	r26
    dacc:	f0 40       	sbci	r31, 0x00	; 0
    dace:	53 95       	inc	r21
    dad0:	c9 f7       	brne	.-14     	; 0xdac4 <__addsf3x+0x52>
    dad2:	7e f4       	brtc	.+30     	; 0xdaf2 <__addsf3x+0x80>
    dad4:	1f 16       	cp	r1, r31
    dad6:	ba 0b       	sbc	r27, r26
    dad8:	62 0b       	sbc	r22, r18
    dada:	73 0b       	sbc	r23, r19
    dadc:	84 0b       	sbc	r24, r20
    dade:	ba f0       	brmi	.+46     	; 0xdb0e <__addsf3x+0x9c>
    dae0:	91 50       	subi	r25, 0x01	; 1
    dae2:	a1 f0       	breq	.+40     	; 0xdb0c <__addsf3x+0x9a>
    dae4:	ff 0f       	add	r31, r31
    dae6:	bb 1f       	adc	r27, r27
    dae8:	66 1f       	adc	r22, r22
    daea:	77 1f       	adc	r23, r23
    daec:	88 1f       	adc	r24, r24
    daee:	c2 f7       	brpl	.-16     	; 0xdae0 <__addsf3x+0x6e>
    daf0:	0e c0       	rjmp	.+28     	; 0xdb0e <__addsf3x+0x9c>
    daf2:	ba 0f       	add	r27, r26
    daf4:	62 1f       	adc	r22, r18
    daf6:	73 1f       	adc	r23, r19
    daf8:	84 1f       	adc	r24, r20
    dafa:	48 f4       	brcc	.+18     	; 0xdb0e <__addsf3x+0x9c>
    dafc:	87 95       	ror	r24
    dafe:	77 95       	ror	r23
    db00:	67 95       	ror	r22
    db02:	b7 95       	ror	r27
    db04:	f7 95       	ror	r31
    db06:	9e 3f       	cpi	r25, 0xFE	; 254
    db08:	08 f0       	brcs	.+2      	; 0xdb0c <__addsf3x+0x9a>
    db0a:	b0 cf       	rjmp	.-160    	; 0xda6c <__addsf3+0x28>
    db0c:	93 95       	inc	r25
    db0e:	88 0f       	add	r24, r24
    db10:	08 f0       	brcs	.+2      	; 0xdb14 <__addsf3x+0xa2>
    db12:	99 27       	eor	r25, r25
    db14:	ee 0f       	add	r30, r30
    db16:	97 95       	ror	r25
    db18:	87 95       	ror	r24
    db1a:	08 95       	ret

0000db1c <__cmpsf2>:
    db1c:	0e 94 78 6e 	call	0xdcf0	; 0xdcf0 <__fp_cmp>
    db20:	08 f4       	brcc	.+2      	; 0xdb24 <__cmpsf2+0x8>
    db22:	81 e0       	ldi	r24, 0x01	; 1
    db24:	08 95       	ret

0000db26 <__divsf3>:
    db26:	0e 94 a7 6d 	call	0xdb4e	; 0xdb4e <__divsf3x>
    db2a:	0c 94 b3 6e 	jmp	0xdd66	; 0xdd66 <__fp_round>
    db2e:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <__fp_pscB>
    db32:	58 f0       	brcs	.+22     	; 0xdb4a <__divsf3+0x24>
    db34:	0e 94 a5 6e 	call	0xdd4a	; 0xdd4a <__fp_pscA>
    db38:	40 f0       	brcs	.+16     	; 0xdb4a <__divsf3+0x24>
    db3a:	29 f4       	brne	.+10     	; 0xdb46 <__divsf3+0x20>
    db3c:	5f 3f       	cpi	r21, 0xFF	; 255
    db3e:	29 f0       	breq	.+10     	; 0xdb4a <__divsf3+0x24>
    db40:	0c 94 9c 6e 	jmp	0xdd38	; 0xdd38 <__fp_inf>
    db44:	51 11       	cpse	r21, r1
    db46:	0c 94 e7 6e 	jmp	0xddce	; 0xddce <__fp_szero>
    db4a:	0c 94 a2 6e 	jmp	0xdd44	; 0xdd44 <__fp_nan>

0000db4e <__divsf3x>:
    db4e:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__fp_split3>
    db52:	68 f3       	brcs	.-38     	; 0xdb2e <__divsf3+0x8>

0000db54 <__divsf3_pse>:
    db54:	99 23       	and	r25, r25
    db56:	b1 f3       	breq	.-20     	; 0xdb44 <__divsf3+0x1e>
    db58:	55 23       	and	r21, r21
    db5a:	91 f3       	breq	.-28     	; 0xdb40 <__divsf3+0x1a>
    db5c:	95 1b       	sub	r25, r21
    db5e:	55 0b       	sbc	r21, r21
    db60:	bb 27       	eor	r27, r27
    db62:	aa 27       	eor	r26, r26
    db64:	62 17       	cp	r22, r18
    db66:	73 07       	cpc	r23, r19
    db68:	84 07       	cpc	r24, r20
    db6a:	38 f0       	brcs	.+14     	; 0xdb7a <__divsf3_pse+0x26>
    db6c:	9f 5f       	subi	r25, 0xFF	; 255
    db6e:	5f 4f       	sbci	r21, 0xFF	; 255
    db70:	22 0f       	add	r18, r18
    db72:	33 1f       	adc	r19, r19
    db74:	44 1f       	adc	r20, r20
    db76:	aa 1f       	adc	r26, r26
    db78:	a9 f3       	breq	.-22     	; 0xdb64 <__divsf3_pse+0x10>
    db7a:	35 d0       	rcall	.+106    	; 0xdbe6 <__divsf3_pse+0x92>
    db7c:	0e 2e       	mov	r0, r30
    db7e:	3a f0       	brmi	.+14     	; 0xdb8e <__divsf3_pse+0x3a>
    db80:	e0 e8       	ldi	r30, 0x80	; 128
    db82:	32 d0       	rcall	.+100    	; 0xdbe8 <__divsf3_pse+0x94>
    db84:	91 50       	subi	r25, 0x01	; 1
    db86:	50 40       	sbci	r21, 0x00	; 0
    db88:	e6 95       	lsr	r30
    db8a:	00 1c       	adc	r0, r0
    db8c:	ca f7       	brpl	.-14     	; 0xdb80 <__divsf3_pse+0x2c>
    db8e:	2b d0       	rcall	.+86     	; 0xdbe6 <__divsf3_pse+0x92>
    db90:	fe 2f       	mov	r31, r30
    db92:	29 d0       	rcall	.+82     	; 0xdbe6 <__divsf3_pse+0x92>
    db94:	66 0f       	add	r22, r22
    db96:	77 1f       	adc	r23, r23
    db98:	88 1f       	adc	r24, r24
    db9a:	bb 1f       	adc	r27, r27
    db9c:	26 17       	cp	r18, r22
    db9e:	37 07       	cpc	r19, r23
    dba0:	48 07       	cpc	r20, r24
    dba2:	ab 07       	cpc	r26, r27
    dba4:	b0 e8       	ldi	r27, 0x80	; 128
    dba6:	09 f0       	breq	.+2      	; 0xdbaa <__divsf3_pse+0x56>
    dba8:	bb 0b       	sbc	r27, r27
    dbaa:	80 2d       	mov	r24, r0
    dbac:	bf 01       	movw	r22, r30
    dbae:	ff 27       	eor	r31, r31
    dbb0:	93 58       	subi	r25, 0x83	; 131
    dbb2:	5f 4f       	sbci	r21, 0xFF	; 255
    dbb4:	3a f0       	brmi	.+14     	; 0xdbc4 <__divsf3_pse+0x70>
    dbb6:	9e 3f       	cpi	r25, 0xFE	; 254
    dbb8:	51 05       	cpc	r21, r1
    dbba:	78 f0       	brcs	.+30     	; 0xdbda <__divsf3_pse+0x86>
    dbbc:	0c 94 9c 6e 	jmp	0xdd38	; 0xdd38 <__fp_inf>
    dbc0:	0c 94 e7 6e 	jmp	0xddce	; 0xddce <__fp_szero>
    dbc4:	5f 3f       	cpi	r21, 0xFF	; 255
    dbc6:	e4 f3       	brlt	.-8      	; 0xdbc0 <__divsf3_pse+0x6c>
    dbc8:	98 3e       	cpi	r25, 0xE8	; 232
    dbca:	d4 f3       	brlt	.-12     	; 0xdbc0 <__divsf3_pse+0x6c>
    dbcc:	86 95       	lsr	r24
    dbce:	77 95       	ror	r23
    dbd0:	67 95       	ror	r22
    dbd2:	b7 95       	ror	r27
    dbd4:	f7 95       	ror	r31
    dbd6:	9f 5f       	subi	r25, 0xFF	; 255
    dbd8:	c9 f7       	brne	.-14     	; 0xdbcc <__divsf3_pse+0x78>
    dbda:	88 0f       	add	r24, r24
    dbdc:	91 1d       	adc	r25, r1
    dbde:	96 95       	lsr	r25
    dbe0:	87 95       	ror	r24
    dbe2:	97 f9       	bld	r25, 7
    dbe4:	08 95       	ret
    dbe6:	e1 e0       	ldi	r30, 0x01	; 1
    dbe8:	66 0f       	add	r22, r22
    dbea:	77 1f       	adc	r23, r23
    dbec:	88 1f       	adc	r24, r24
    dbee:	bb 1f       	adc	r27, r27
    dbf0:	62 17       	cp	r22, r18
    dbf2:	73 07       	cpc	r23, r19
    dbf4:	84 07       	cpc	r24, r20
    dbf6:	ba 07       	cpc	r27, r26
    dbf8:	20 f0       	brcs	.+8      	; 0xdc02 <__divsf3_pse+0xae>
    dbfa:	62 1b       	sub	r22, r18
    dbfc:	73 0b       	sbc	r23, r19
    dbfe:	84 0b       	sbc	r24, r20
    dc00:	ba 0b       	sbc	r27, r26
    dc02:	ee 1f       	adc	r30, r30
    dc04:	88 f7       	brcc	.-30     	; 0xdbe8 <__divsf3_pse+0x94>
    dc06:	e0 95       	com	r30
    dc08:	08 95       	ret

0000dc0a <__fixsfsi>:
    dc0a:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__fixunssfsi>
    dc0e:	68 94       	set
    dc10:	b1 11       	cpse	r27, r1
    dc12:	0c 94 e7 6e 	jmp	0xddce	; 0xddce <__fp_szero>
    dc16:	08 95       	ret

0000dc18 <__fixunssfsi>:
    dc18:	0e 94 cc 6e 	call	0xdd98	; 0xdd98 <__fp_splitA>
    dc1c:	88 f0       	brcs	.+34     	; 0xdc40 <__fixunssfsi+0x28>
    dc1e:	9f 57       	subi	r25, 0x7F	; 127
    dc20:	98 f0       	brcs	.+38     	; 0xdc48 <__fixunssfsi+0x30>
    dc22:	b9 2f       	mov	r27, r25
    dc24:	99 27       	eor	r25, r25
    dc26:	b7 51       	subi	r27, 0x17	; 23
    dc28:	b0 f0       	brcs	.+44     	; 0xdc56 <__fixunssfsi+0x3e>
    dc2a:	e1 f0       	breq	.+56     	; 0xdc64 <__fixunssfsi+0x4c>
    dc2c:	66 0f       	add	r22, r22
    dc2e:	77 1f       	adc	r23, r23
    dc30:	88 1f       	adc	r24, r24
    dc32:	99 1f       	adc	r25, r25
    dc34:	1a f0       	brmi	.+6      	; 0xdc3c <__fixunssfsi+0x24>
    dc36:	ba 95       	dec	r27
    dc38:	c9 f7       	brne	.-14     	; 0xdc2c <__fixunssfsi+0x14>
    dc3a:	14 c0       	rjmp	.+40     	; 0xdc64 <__fixunssfsi+0x4c>
    dc3c:	b1 30       	cpi	r27, 0x01	; 1
    dc3e:	91 f0       	breq	.+36     	; 0xdc64 <__fixunssfsi+0x4c>
    dc40:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <__fp_zero>
    dc44:	b1 e0       	ldi	r27, 0x01	; 1
    dc46:	08 95       	ret
    dc48:	0c 94 e6 6e 	jmp	0xddcc	; 0xddcc <__fp_zero>
    dc4c:	67 2f       	mov	r22, r23
    dc4e:	78 2f       	mov	r23, r24
    dc50:	88 27       	eor	r24, r24
    dc52:	b8 5f       	subi	r27, 0xF8	; 248
    dc54:	39 f0       	breq	.+14     	; 0xdc64 <__fixunssfsi+0x4c>
    dc56:	b9 3f       	cpi	r27, 0xF9	; 249
    dc58:	cc f3       	brlt	.-14     	; 0xdc4c <__fixunssfsi+0x34>
    dc5a:	86 95       	lsr	r24
    dc5c:	77 95       	ror	r23
    dc5e:	67 95       	ror	r22
    dc60:	b3 95       	inc	r27
    dc62:	d9 f7       	brne	.-10     	; 0xdc5a <__fixunssfsi+0x42>
    dc64:	3e f4       	brtc	.+14     	; 0xdc74 <__fixunssfsi+0x5c>
    dc66:	90 95       	com	r25
    dc68:	80 95       	com	r24
    dc6a:	70 95       	com	r23
    dc6c:	61 95       	neg	r22
    dc6e:	7f 4f       	sbci	r23, 0xFF	; 255
    dc70:	8f 4f       	sbci	r24, 0xFF	; 255
    dc72:	9f 4f       	sbci	r25, 0xFF	; 255
    dc74:	08 95       	ret

0000dc76 <__floatunsisf>:
    dc76:	e8 94       	clt
    dc78:	09 c0       	rjmp	.+18     	; 0xdc8c <__floatsisf+0x12>

0000dc7a <__floatsisf>:
    dc7a:	97 fb       	bst	r25, 7
    dc7c:	3e f4       	brtc	.+14     	; 0xdc8c <__floatsisf+0x12>
    dc7e:	90 95       	com	r25
    dc80:	80 95       	com	r24
    dc82:	70 95       	com	r23
    dc84:	61 95       	neg	r22
    dc86:	7f 4f       	sbci	r23, 0xFF	; 255
    dc88:	8f 4f       	sbci	r24, 0xFF	; 255
    dc8a:	9f 4f       	sbci	r25, 0xFF	; 255
    dc8c:	99 23       	and	r25, r25
    dc8e:	a9 f0       	breq	.+42     	; 0xdcba <__floatsisf+0x40>
    dc90:	f9 2f       	mov	r31, r25
    dc92:	96 e9       	ldi	r25, 0x96	; 150
    dc94:	bb 27       	eor	r27, r27
    dc96:	93 95       	inc	r25
    dc98:	f6 95       	lsr	r31
    dc9a:	87 95       	ror	r24
    dc9c:	77 95       	ror	r23
    dc9e:	67 95       	ror	r22
    dca0:	b7 95       	ror	r27
    dca2:	f1 11       	cpse	r31, r1
    dca4:	f8 cf       	rjmp	.-16     	; 0xdc96 <__floatsisf+0x1c>
    dca6:	fa f4       	brpl	.+62     	; 0xdce6 <__floatsisf+0x6c>
    dca8:	bb 0f       	add	r27, r27
    dcaa:	11 f4       	brne	.+4      	; 0xdcb0 <__floatsisf+0x36>
    dcac:	60 ff       	sbrs	r22, 0
    dcae:	1b c0       	rjmp	.+54     	; 0xdce6 <__floatsisf+0x6c>
    dcb0:	6f 5f       	subi	r22, 0xFF	; 255
    dcb2:	7f 4f       	sbci	r23, 0xFF	; 255
    dcb4:	8f 4f       	sbci	r24, 0xFF	; 255
    dcb6:	9f 4f       	sbci	r25, 0xFF	; 255
    dcb8:	16 c0       	rjmp	.+44     	; 0xdce6 <__floatsisf+0x6c>
    dcba:	88 23       	and	r24, r24
    dcbc:	11 f0       	breq	.+4      	; 0xdcc2 <__floatsisf+0x48>
    dcbe:	96 e9       	ldi	r25, 0x96	; 150
    dcc0:	11 c0       	rjmp	.+34     	; 0xdce4 <__floatsisf+0x6a>
    dcc2:	77 23       	and	r23, r23
    dcc4:	21 f0       	breq	.+8      	; 0xdcce <__floatsisf+0x54>
    dcc6:	9e e8       	ldi	r25, 0x8E	; 142
    dcc8:	87 2f       	mov	r24, r23
    dcca:	76 2f       	mov	r23, r22
    dccc:	05 c0       	rjmp	.+10     	; 0xdcd8 <__floatsisf+0x5e>
    dcce:	66 23       	and	r22, r22
    dcd0:	71 f0       	breq	.+28     	; 0xdcee <__floatsisf+0x74>
    dcd2:	96 e8       	ldi	r25, 0x86	; 134
    dcd4:	86 2f       	mov	r24, r22
    dcd6:	70 e0       	ldi	r23, 0x00	; 0
    dcd8:	60 e0       	ldi	r22, 0x00	; 0
    dcda:	2a f0       	brmi	.+10     	; 0xdce6 <__floatsisf+0x6c>
    dcdc:	9a 95       	dec	r25
    dcde:	66 0f       	add	r22, r22
    dce0:	77 1f       	adc	r23, r23
    dce2:	88 1f       	adc	r24, r24
    dce4:	da f7       	brpl	.-10     	; 0xdcdc <__floatsisf+0x62>
    dce6:	88 0f       	add	r24, r24
    dce8:	96 95       	lsr	r25
    dcea:	87 95       	ror	r24
    dcec:	97 f9       	bld	r25, 7
    dcee:	08 95       	ret

0000dcf0 <__fp_cmp>:
    dcf0:	99 0f       	add	r25, r25
    dcf2:	00 08       	sbc	r0, r0
    dcf4:	55 0f       	add	r21, r21
    dcf6:	aa 0b       	sbc	r26, r26
    dcf8:	e0 e8       	ldi	r30, 0x80	; 128
    dcfa:	fe ef       	ldi	r31, 0xFE	; 254
    dcfc:	16 16       	cp	r1, r22
    dcfe:	17 06       	cpc	r1, r23
    dd00:	e8 07       	cpc	r30, r24
    dd02:	f9 07       	cpc	r31, r25
    dd04:	c0 f0       	brcs	.+48     	; 0xdd36 <__fp_cmp+0x46>
    dd06:	12 16       	cp	r1, r18
    dd08:	13 06       	cpc	r1, r19
    dd0a:	e4 07       	cpc	r30, r20
    dd0c:	f5 07       	cpc	r31, r21
    dd0e:	98 f0       	brcs	.+38     	; 0xdd36 <__fp_cmp+0x46>
    dd10:	62 1b       	sub	r22, r18
    dd12:	73 0b       	sbc	r23, r19
    dd14:	84 0b       	sbc	r24, r20
    dd16:	95 0b       	sbc	r25, r21
    dd18:	39 f4       	brne	.+14     	; 0xdd28 <__fp_cmp+0x38>
    dd1a:	0a 26       	eor	r0, r26
    dd1c:	61 f0       	breq	.+24     	; 0xdd36 <__fp_cmp+0x46>
    dd1e:	23 2b       	or	r18, r19
    dd20:	24 2b       	or	r18, r20
    dd22:	25 2b       	or	r18, r21
    dd24:	21 f4       	brne	.+8      	; 0xdd2e <__fp_cmp+0x3e>
    dd26:	08 95       	ret
    dd28:	0a 26       	eor	r0, r26
    dd2a:	09 f4       	brne	.+2      	; 0xdd2e <__fp_cmp+0x3e>
    dd2c:	a1 40       	sbci	r26, 0x01	; 1
    dd2e:	a6 95       	lsr	r26
    dd30:	8f ef       	ldi	r24, 0xFF	; 255
    dd32:	81 1d       	adc	r24, r1
    dd34:	81 1d       	adc	r24, r1
    dd36:	08 95       	ret

0000dd38 <__fp_inf>:
    dd38:	97 f9       	bld	r25, 7
    dd3a:	9f 67       	ori	r25, 0x7F	; 127
    dd3c:	80 e8       	ldi	r24, 0x80	; 128
    dd3e:	70 e0       	ldi	r23, 0x00	; 0
    dd40:	60 e0       	ldi	r22, 0x00	; 0
    dd42:	08 95       	ret

0000dd44 <__fp_nan>:
    dd44:	9f ef       	ldi	r25, 0xFF	; 255
    dd46:	80 ec       	ldi	r24, 0xC0	; 192
    dd48:	08 95       	ret

0000dd4a <__fp_pscA>:
    dd4a:	00 24       	eor	r0, r0
    dd4c:	0a 94       	dec	r0
    dd4e:	16 16       	cp	r1, r22
    dd50:	17 06       	cpc	r1, r23
    dd52:	18 06       	cpc	r1, r24
    dd54:	09 06       	cpc	r0, r25
    dd56:	08 95       	ret

0000dd58 <__fp_pscB>:
    dd58:	00 24       	eor	r0, r0
    dd5a:	0a 94       	dec	r0
    dd5c:	12 16       	cp	r1, r18
    dd5e:	13 06       	cpc	r1, r19
    dd60:	14 06       	cpc	r1, r20
    dd62:	05 06       	cpc	r0, r21
    dd64:	08 95       	ret

0000dd66 <__fp_round>:
    dd66:	09 2e       	mov	r0, r25
    dd68:	03 94       	inc	r0
    dd6a:	00 0c       	add	r0, r0
    dd6c:	11 f4       	brne	.+4      	; 0xdd72 <__fp_round+0xc>
    dd6e:	88 23       	and	r24, r24
    dd70:	52 f0       	brmi	.+20     	; 0xdd86 <__fp_round+0x20>
    dd72:	bb 0f       	add	r27, r27
    dd74:	40 f4       	brcc	.+16     	; 0xdd86 <__fp_round+0x20>
    dd76:	bf 2b       	or	r27, r31
    dd78:	11 f4       	brne	.+4      	; 0xdd7e <__fp_round+0x18>
    dd7a:	60 ff       	sbrs	r22, 0
    dd7c:	04 c0       	rjmp	.+8      	; 0xdd86 <__fp_round+0x20>
    dd7e:	6f 5f       	subi	r22, 0xFF	; 255
    dd80:	7f 4f       	sbci	r23, 0xFF	; 255
    dd82:	8f 4f       	sbci	r24, 0xFF	; 255
    dd84:	9f 4f       	sbci	r25, 0xFF	; 255
    dd86:	08 95       	ret

0000dd88 <__fp_split3>:
    dd88:	57 fd       	sbrc	r21, 7
    dd8a:	90 58       	subi	r25, 0x80	; 128
    dd8c:	44 0f       	add	r20, r20
    dd8e:	55 1f       	adc	r21, r21
    dd90:	59 f0       	breq	.+22     	; 0xdda8 <__fp_splitA+0x10>
    dd92:	5f 3f       	cpi	r21, 0xFF	; 255
    dd94:	71 f0       	breq	.+28     	; 0xddb2 <__fp_splitA+0x1a>
    dd96:	47 95       	ror	r20

0000dd98 <__fp_splitA>:
    dd98:	88 0f       	add	r24, r24
    dd9a:	97 fb       	bst	r25, 7
    dd9c:	99 1f       	adc	r25, r25
    dd9e:	61 f0       	breq	.+24     	; 0xddb8 <__fp_splitA+0x20>
    dda0:	9f 3f       	cpi	r25, 0xFF	; 255
    dda2:	79 f0       	breq	.+30     	; 0xddc2 <__fp_splitA+0x2a>
    dda4:	87 95       	ror	r24
    dda6:	08 95       	ret
    dda8:	12 16       	cp	r1, r18
    ddaa:	13 06       	cpc	r1, r19
    ddac:	14 06       	cpc	r1, r20
    ddae:	55 1f       	adc	r21, r21
    ddb0:	f2 cf       	rjmp	.-28     	; 0xdd96 <__fp_split3+0xe>
    ddb2:	46 95       	lsr	r20
    ddb4:	f1 df       	rcall	.-30     	; 0xdd98 <__fp_splitA>
    ddb6:	08 c0       	rjmp	.+16     	; 0xddc8 <__fp_splitA+0x30>
    ddb8:	16 16       	cp	r1, r22
    ddba:	17 06       	cpc	r1, r23
    ddbc:	18 06       	cpc	r1, r24
    ddbe:	99 1f       	adc	r25, r25
    ddc0:	f1 cf       	rjmp	.-30     	; 0xdda4 <__fp_splitA+0xc>
    ddc2:	86 95       	lsr	r24
    ddc4:	71 05       	cpc	r23, r1
    ddc6:	61 05       	cpc	r22, r1
    ddc8:	08 94       	sec
    ddca:	08 95       	ret

0000ddcc <__fp_zero>:
    ddcc:	e8 94       	clt

0000ddce <__fp_szero>:
    ddce:	bb 27       	eor	r27, r27
    ddd0:	66 27       	eor	r22, r22
    ddd2:	77 27       	eor	r23, r23
    ddd4:	cb 01       	movw	r24, r22
    ddd6:	97 f9       	bld	r25, 7
    ddd8:	08 95       	ret

0000ddda <__gesf2>:
    ddda:	0e 94 78 6e 	call	0xdcf0	; 0xdcf0 <__fp_cmp>
    ddde:	08 f4       	brcc	.+2      	; 0xdde2 <__gesf2+0x8>
    dde0:	8f ef       	ldi	r24, 0xFF	; 255
    dde2:	08 95       	ret

0000dde4 <__mulsf3>:
    dde4:	0e 94 05 6f 	call	0xde0a	; 0xde0a <__mulsf3x>
    dde8:	0c 94 b3 6e 	jmp	0xdd66	; 0xdd66 <__fp_round>
    ddec:	0e 94 a5 6e 	call	0xdd4a	; 0xdd4a <__fp_pscA>
    ddf0:	38 f0       	brcs	.+14     	; 0xde00 <__mulsf3+0x1c>
    ddf2:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <__fp_pscB>
    ddf6:	20 f0       	brcs	.+8      	; 0xde00 <__mulsf3+0x1c>
    ddf8:	95 23       	and	r25, r21
    ddfa:	11 f0       	breq	.+4      	; 0xde00 <__mulsf3+0x1c>
    ddfc:	0c 94 9c 6e 	jmp	0xdd38	; 0xdd38 <__fp_inf>
    de00:	0c 94 a2 6e 	jmp	0xdd44	; 0xdd44 <__fp_nan>
    de04:	11 24       	eor	r1, r1
    de06:	0c 94 e7 6e 	jmp	0xddce	; 0xddce <__fp_szero>

0000de0a <__mulsf3x>:
    de0a:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__fp_split3>
    de0e:	70 f3       	brcs	.-36     	; 0xddec <__mulsf3+0x8>

0000de10 <__mulsf3_pse>:
    de10:	95 9f       	mul	r25, r21
    de12:	c1 f3       	breq	.-16     	; 0xde04 <__mulsf3+0x20>
    de14:	95 0f       	add	r25, r21
    de16:	50 e0       	ldi	r21, 0x00	; 0
    de18:	55 1f       	adc	r21, r21
    de1a:	62 9f       	mul	r22, r18
    de1c:	f0 01       	movw	r30, r0
    de1e:	72 9f       	mul	r23, r18
    de20:	bb 27       	eor	r27, r27
    de22:	f0 0d       	add	r31, r0
    de24:	b1 1d       	adc	r27, r1
    de26:	63 9f       	mul	r22, r19
    de28:	aa 27       	eor	r26, r26
    de2a:	f0 0d       	add	r31, r0
    de2c:	b1 1d       	adc	r27, r1
    de2e:	aa 1f       	adc	r26, r26
    de30:	64 9f       	mul	r22, r20
    de32:	66 27       	eor	r22, r22
    de34:	b0 0d       	add	r27, r0
    de36:	a1 1d       	adc	r26, r1
    de38:	66 1f       	adc	r22, r22
    de3a:	82 9f       	mul	r24, r18
    de3c:	22 27       	eor	r18, r18
    de3e:	b0 0d       	add	r27, r0
    de40:	a1 1d       	adc	r26, r1
    de42:	62 1f       	adc	r22, r18
    de44:	73 9f       	mul	r23, r19
    de46:	b0 0d       	add	r27, r0
    de48:	a1 1d       	adc	r26, r1
    de4a:	62 1f       	adc	r22, r18
    de4c:	83 9f       	mul	r24, r19
    de4e:	a0 0d       	add	r26, r0
    de50:	61 1d       	adc	r22, r1
    de52:	22 1f       	adc	r18, r18
    de54:	74 9f       	mul	r23, r20
    de56:	33 27       	eor	r19, r19
    de58:	a0 0d       	add	r26, r0
    de5a:	61 1d       	adc	r22, r1
    de5c:	23 1f       	adc	r18, r19
    de5e:	84 9f       	mul	r24, r20
    de60:	60 0d       	add	r22, r0
    de62:	21 1d       	adc	r18, r1
    de64:	82 2f       	mov	r24, r18
    de66:	76 2f       	mov	r23, r22
    de68:	6a 2f       	mov	r22, r26
    de6a:	11 24       	eor	r1, r1
    de6c:	9f 57       	subi	r25, 0x7F	; 127
    de6e:	50 40       	sbci	r21, 0x00	; 0
    de70:	9a f0       	brmi	.+38     	; 0xde98 <__mulsf3_pse+0x88>
    de72:	f1 f0       	breq	.+60     	; 0xdeb0 <__mulsf3_pse+0xa0>
    de74:	88 23       	and	r24, r24
    de76:	4a f0       	brmi	.+18     	; 0xde8a <__mulsf3_pse+0x7a>
    de78:	ee 0f       	add	r30, r30
    de7a:	ff 1f       	adc	r31, r31
    de7c:	bb 1f       	adc	r27, r27
    de7e:	66 1f       	adc	r22, r22
    de80:	77 1f       	adc	r23, r23
    de82:	88 1f       	adc	r24, r24
    de84:	91 50       	subi	r25, 0x01	; 1
    de86:	50 40       	sbci	r21, 0x00	; 0
    de88:	a9 f7       	brne	.-22     	; 0xde74 <__mulsf3_pse+0x64>
    de8a:	9e 3f       	cpi	r25, 0xFE	; 254
    de8c:	51 05       	cpc	r21, r1
    de8e:	80 f0       	brcs	.+32     	; 0xdeb0 <__mulsf3_pse+0xa0>
    de90:	0c 94 9c 6e 	jmp	0xdd38	; 0xdd38 <__fp_inf>
    de94:	0c 94 e7 6e 	jmp	0xddce	; 0xddce <__fp_szero>
    de98:	5f 3f       	cpi	r21, 0xFF	; 255
    de9a:	e4 f3       	brlt	.-8      	; 0xde94 <__mulsf3_pse+0x84>
    de9c:	98 3e       	cpi	r25, 0xE8	; 232
    de9e:	d4 f3       	brlt	.-12     	; 0xde94 <__mulsf3_pse+0x84>
    dea0:	86 95       	lsr	r24
    dea2:	77 95       	ror	r23
    dea4:	67 95       	ror	r22
    dea6:	b7 95       	ror	r27
    dea8:	f7 95       	ror	r31
    deaa:	e7 95       	ror	r30
    deac:	9f 5f       	subi	r25, 0xFF	; 255
    deae:	c1 f7       	brne	.-16     	; 0xdea0 <__mulsf3_pse+0x90>
    deb0:	fe 2b       	or	r31, r30
    deb2:	88 0f       	add	r24, r24
    deb4:	91 1d       	adc	r25, r1
    deb6:	96 95       	lsr	r25
    deb8:	87 95       	ror	r24
    deba:	97 f9       	bld	r25, 7
    debc:	08 95       	ret

0000debe <__udivmodhi4>:
    debe:	aa 1b       	sub	r26, r26
    dec0:	bb 1b       	sub	r27, r27
    dec2:	51 e1       	ldi	r21, 0x11	; 17
    dec4:	07 c0       	rjmp	.+14     	; 0xded4 <__udivmodhi4_ep>

0000dec6 <__udivmodhi4_loop>:
    dec6:	aa 1f       	adc	r26, r26
    dec8:	bb 1f       	adc	r27, r27
    deca:	a6 17       	cp	r26, r22
    decc:	b7 07       	cpc	r27, r23
    dece:	10 f0       	brcs	.+4      	; 0xded4 <__udivmodhi4_ep>
    ded0:	a6 1b       	sub	r26, r22
    ded2:	b7 0b       	sbc	r27, r23

0000ded4 <__udivmodhi4_ep>:
    ded4:	88 1f       	adc	r24, r24
    ded6:	99 1f       	adc	r25, r25
    ded8:	5a 95       	dec	r21
    deda:	a9 f7       	brne	.-22     	; 0xdec6 <__udivmodhi4_loop>
    dedc:	80 95       	com	r24
    dede:	90 95       	com	r25
    dee0:	bc 01       	movw	r22, r24
    dee2:	cd 01       	movw	r24, r26
    dee4:	08 95       	ret

0000dee6 <__divmodhi4>:
    dee6:	97 fb       	bst	r25, 7
    dee8:	07 2e       	mov	r0, r23
    deea:	16 f4       	brtc	.+4      	; 0xdef0 <__divmodhi4+0xa>
    deec:	00 94       	com	r0
    deee:	07 d0       	rcall	.+14     	; 0xdefe <__divmodhi4_neg1>
    def0:	77 fd       	sbrc	r23, 7
    def2:	09 d0       	rcall	.+18     	; 0xdf06 <__divmodhi4_neg2>
    def4:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <__udivmodhi4>
    def8:	07 fc       	sbrc	r0, 7
    defa:	05 d0       	rcall	.+10     	; 0xdf06 <__divmodhi4_neg2>
    defc:	3e f4       	brtc	.+14     	; 0xdf0c <__divmodhi4_exit>

0000defe <__divmodhi4_neg1>:
    defe:	90 95       	com	r25
    df00:	81 95       	neg	r24
    df02:	9f 4f       	sbci	r25, 0xFF	; 255
    df04:	08 95       	ret

0000df06 <__divmodhi4_neg2>:
    df06:	70 95       	com	r23
    df08:	61 95       	neg	r22
    df0a:	7f 4f       	sbci	r23, 0xFF	; 255

0000df0c <__divmodhi4_exit>:
    df0c:	08 95       	ret

0000df0e <__divmodsi4>:
    df0e:	05 2e       	mov	r0, r21
    df10:	97 fb       	bst	r25, 7
    df12:	1e f4       	brtc	.+6      	; 0xdf1a <__divmodsi4+0xc>
    df14:	00 94       	com	r0
    df16:	0e 94 9e 6f 	call	0xdf3c	; 0xdf3c <__negsi2>
    df1a:	57 fd       	sbrc	r21, 7
    df1c:	07 d0       	rcall	.+14     	; 0xdf2c <__divmodsi4_neg2>
    df1e:	0e 94 dd 6f 	call	0xdfba	; 0xdfba <__udivmodsi4>
    df22:	07 fc       	sbrc	r0, 7
    df24:	03 d0       	rcall	.+6      	; 0xdf2c <__divmodsi4_neg2>
    df26:	4e f4       	brtc	.+18     	; 0xdf3a <__divmodsi4_exit>
    df28:	0c 94 9e 6f 	jmp	0xdf3c	; 0xdf3c <__negsi2>

0000df2c <__divmodsi4_neg2>:
    df2c:	50 95       	com	r21
    df2e:	40 95       	com	r20
    df30:	30 95       	com	r19
    df32:	21 95       	neg	r18
    df34:	3f 4f       	sbci	r19, 0xFF	; 255
    df36:	4f 4f       	sbci	r20, 0xFF	; 255
    df38:	5f 4f       	sbci	r21, 0xFF	; 255

0000df3a <__divmodsi4_exit>:
    df3a:	08 95       	ret

0000df3c <__negsi2>:
    df3c:	90 95       	com	r25
    df3e:	80 95       	com	r24
    df40:	70 95       	com	r23
    df42:	61 95       	neg	r22
    df44:	7f 4f       	sbci	r23, 0xFF	; 255
    df46:	8f 4f       	sbci	r24, 0xFF	; 255
    df48:	9f 4f       	sbci	r25, 0xFF	; 255
    df4a:	08 95       	ret

0000df4c <__tablejump2__>:
    df4c:	ee 0f       	add	r30, r30
    df4e:	ff 1f       	adc	r31, r31
    df50:	05 90       	lpm	r0, Z+
    df52:	f4 91       	lpm	r31, Z
    df54:	e0 2d       	mov	r30, r0
    df56:	09 94       	ijmp

0000df58 <__mulhisi3>:
    df58:	0e 94 b4 6f 	call	0xdf68	; 0xdf68 <__umulhisi3>
    df5c:	33 23       	and	r19, r19
    df5e:	12 f4       	brpl	.+4      	; 0xdf64 <__mulhisi3+0xc>
    df60:	8a 1b       	sub	r24, r26
    df62:	9b 0b       	sbc	r25, r27
    df64:	0c 94 c5 6f 	jmp	0xdf8a	; 0xdf8a <__usmulhisi3_tail>

0000df68 <__umulhisi3>:
    df68:	a2 9f       	mul	r26, r18
    df6a:	b0 01       	movw	r22, r0
    df6c:	b3 9f       	mul	r27, r19
    df6e:	c0 01       	movw	r24, r0
    df70:	a3 9f       	mul	r26, r19
    df72:	70 0d       	add	r23, r0
    df74:	81 1d       	adc	r24, r1
    df76:	11 24       	eor	r1, r1
    df78:	91 1d       	adc	r25, r1
    df7a:	b2 9f       	mul	r27, r18
    df7c:	70 0d       	add	r23, r0
    df7e:	81 1d       	adc	r24, r1
    df80:	11 24       	eor	r1, r1
    df82:	91 1d       	adc	r25, r1
    df84:	08 95       	ret

0000df86 <__usmulhisi3>:
    df86:	0e 94 b4 6f 	call	0xdf68	; 0xdf68 <__umulhisi3>

0000df8a <__usmulhisi3_tail>:
    df8a:	b7 ff       	sbrs	r27, 7
    df8c:	08 95       	ret
    df8e:	82 1b       	sub	r24, r18
    df90:	93 0b       	sbc	r25, r19
    df92:	08 95       	ret

0000df94 <__muluhisi3>:
    df94:	0e 94 b4 6f 	call	0xdf68	; 0xdf68 <__umulhisi3>
    df98:	a5 9f       	mul	r26, r21
    df9a:	90 0d       	add	r25, r0
    df9c:	b4 9f       	mul	r27, r20
    df9e:	90 0d       	add	r25, r0
    dfa0:	a4 9f       	mul	r26, r20
    dfa2:	80 0d       	add	r24, r0
    dfa4:	91 1d       	adc	r25, r1
    dfa6:	11 24       	eor	r1, r1
    dfa8:	08 95       	ret

0000dfaa <__mulshisi3>:
    dfaa:	b7 ff       	sbrs	r27, 7
    dfac:	0c 94 ca 6f 	jmp	0xdf94	; 0xdf94 <__muluhisi3>

0000dfb0 <__mulohisi3>:
    dfb0:	0e 94 ca 6f 	call	0xdf94	; 0xdf94 <__muluhisi3>
    dfb4:	82 1b       	sub	r24, r18
    dfb6:	93 0b       	sbc	r25, r19
    dfb8:	08 95       	ret

0000dfba <__udivmodsi4>:
    dfba:	a1 e2       	ldi	r26, 0x21	; 33
    dfbc:	1a 2e       	mov	r1, r26
    dfbe:	aa 1b       	sub	r26, r26
    dfc0:	bb 1b       	sub	r27, r27
    dfc2:	fd 01       	movw	r30, r26
    dfc4:	0d c0       	rjmp	.+26     	; 0xdfe0 <__udivmodsi4_ep>

0000dfc6 <__udivmodsi4_loop>:
    dfc6:	aa 1f       	adc	r26, r26
    dfc8:	bb 1f       	adc	r27, r27
    dfca:	ee 1f       	adc	r30, r30
    dfcc:	ff 1f       	adc	r31, r31
    dfce:	a2 17       	cp	r26, r18
    dfd0:	b3 07       	cpc	r27, r19
    dfd2:	e4 07       	cpc	r30, r20
    dfd4:	f5 07       	cpc	r31, r21
    dfd6:	20 f0       	brcs	.+8      	; 0xdfe0 <__udivmodsi4_ep>
    dfd8:	a2 1b       	sub	r26, r18
    dfda:	b3 0b       	sbc	r27, r19
    dfdc:	e4 0b       	sbc	r30, r20
    dfde:	f5 0b       	sbc	r31, r21

0000dfe0 <__udivmodsi4_ep>:
    dfe0:	66 1f       	adc	r22, r22
    dfe2:	77 1f       	adc	r23, r23
    dfe4:	88 1f       	adc	r24, r24
    dfe6:	99 1f       	adc	r25, r25
    dfe8:	1a 94       	dec	r1
    dfea:	69 f7       	brne	.-38     	; 0xdfc6 <__udivmodsi4_loop>
    dfec:	60 95       	com	r22
    dfee:	70 95       	com	r23
    dff0:	80 95       	com	r24
    dff2:	90 95       	com	r25
    dff4:	9b 01       	movw	r18, r22
    dff6:	ac 01       	movw	r20, r24
    dff8:	bd 01       	movw	r22, r26
    dffa:	cf 01       	movw	r24, r30
    dffc:	08 95       	ret

0000dffe <memcpy_P>:
    dffe:	fb 01       	movw	r30, r22
    e000:	dc 01       	movw	r26, r24
    e002:	02 c0       	rjmp	.+4      	; 0xe008 <memcpy_P+0xa>
    e004:	05 90       	lpm	r0, Z+
    e006:	0d 92       	st	X+, r0
    e008:	41 50       	subi	r20, 0x01	; 1
    e00a:	50 40       	sbci	r21, 0x00	; 0
    e00c:	d8 f7       	brcc	.-10     	; 0xe004 <memcpy_P+0x6>
    e00e:	08 95       	ret

0000e010 <memmove>:
    e010:	68 17       	cp	r22, r24
    e012:	79 07       	cpc	r23, r25
    e014:	68 f4       	brcc	.+26     	; 0xe030 <memmove+0x20>
    e016:	fb 01       	movw	r30, r22
    e018:	dc 01       	movw	r26, r24
    e01a:	e4 0f       	add	r30, r20
    e01c:	f5 1f       	adc	r31, r21
    e01e:	a4 0f       	add	r26, r20
    e020:	b5 1f       	adc	r27, r21
    e022:	02 c0       	rjmp	.+4      	; 0xe028 <memmove+0x18>
    e024:	02 90       	ld	r0, -Z
    e026:	0e 92       	st	-X, r0
    e028:	41 50       	subi	r20, 0x01	; 1
    e02a:	50 40       	sbci	r21, 0x00	; 0
    e02c:	d8 f7       	brcc	.-10     	; 0xe024 <memmove+0x14>
    e02e:	08 95       	ret
    e030:	0c 94 3f 70 	jmp	0xe07e	; 0xe07e <memcpy>

0000e034 <__itoa_ncheck>:
    e034:	bb 27       	eor	r27, r27
    e036:	4a 30       	cpi	r20, 0x0A	; 10
    e038:	31 f4       	brne	.+12     	; 0xe046 <__itoa_ncheck+0x12>
    e03a:	99 23       	and	r25, r25
    e03c:	22 f4       	brpl	.+8      	; 0xe046 <__itoa_ncheck+0x12>
    e03e:	bd e2       	ldi	r27, 0x2D	; 45
    e040:	90 95       	com	r25
    e042:	81 95       	neg	r24
    e044:	9f 4f       	sbci	r25, 0xFF	; 255
    e046:	0c 94 26 70 	jmp	0xe04c	; 0xe04c <__utoa_common>

0000e04a <__utoa_ncheck>:
    e04a:	bb 27       	eor	r27, r27

0000e04c <__utoa_common>:
    e04c:	fb 01       	movw	r30, r22
    e04e:	55 27       	eor	r21, r21
    e050:	aa 27       	eor	r26, r26
    e052:	88 0f       	add	r24, r24
    e054:	99 1f       	adc	r25, r25
    e056:	aa 1f       	adc	r26, r26
    e058:	a4 17       	cp	r26, r20
    e05a:	10 f0       	brcs	.+4      	; 0xe060 <__utoa_common+0x14>
    e05c:	a4 1b       	sub	r26, r20
    e05e:	83 95       	inc	r24
    e060:	50 51       	subi	r21, 0x10	; 16
    e062:	b9 f7       	brne	.-18     	; 0xe052 <__utoa_common+0x6>
    e064:	a0 5d       	subi	r26, 0xD0	; 208
    e066:	aa 33       	cpi	r26, 0x3A	; 58
    e068:	08 f0       	brcs	.+2      	; 0xe06c <__utoa_common+0x20>
    e06a:	a9 5d       	subi	r26, 0xD9	; 217
    e06c:	a1 93       	st	Z+, r26
    e06e:	00 97       	sbiw	r24, 0x00	; 0
    e070:	79 f7       	brne	.-34     	; 0xe050 <__utoa_common+0x4>
    e072:	b1 11       	cpse	r27, r1
    e074:	b1 93       	st	Z+, r27
    e076:	11 92       	st	Z+, r1
    e078:	cb 01       	movw	r24, r22
    e07a:	0c 94 48 70 	jmp	0xe090	; 0xe090 <strrev>

0000e07e <memcpy>:
    e07e:	fb 01       	movw	r30, r22
    e080:	dc 01       	movw	r26, r24
    e082:	02 c0       	rjmp	.+4      	; 0xe088 <memcpy+0xa>
    e084:	01 90       	ld	r0, Z+
    e086:	0d 92       	st	X+, r0
    e088:	41 50       	subi	r20, 0x01	; 1
    e08a:	50 40       	sbci	r21, 0x00	; 0
    e08c:	d8 f7       	brcc	.-10     	; 0xe084 <memcpy+0x6>
    e08e:	08 95       	ret

0000e090 <strrev>:
    e090:	dc 01       	movw	r26, r24
    e092:	fc 01       	movw	r30, r24
    e094:	67 2f       	mov	r22, r23
    e096:	71 91       	ld	r23, Z+
    e098:	77 23       	and	r23, r23
    e09a:	e1 f7       	brne	.-8      	; 0xe094 <strrev+0x4>
    e09c:	32 97       	sbiw	r30, 0x02	; 2
    e09e:	04 c0       	rjmp	.+8      	; 0xe0a8 <strrev+0x18>
    e0a0:	7c 91       	ld	r23, X
    e0a2:	6d 93       	st	X+, r22
    e0a4:	70 83       	st	Z, r23
    e0a6:	62 91       	ld	r22, -Z
    e0a8:	ae 17       	cp	r26, r30
    e0aa:	bf 07       	cpc	r27, r31
    e0ac:	c8 f3       	brcs	.-14     	; 0xe0a0 <strrev+0x10>
    e0ae:	08 95       	ret

0000e0b0 <eeprom_read_block>:
    e0b0:	dc 01       	movw	r26, r24
    e0b2:	cb 01       	movw	r24, r22

0000e0b4 <eeprom_read_blraw>:
    e0b4:	fc 01       	movw	r30, r24
    e0b6:	f9 99       	sbic	0x1f, 1	; 31
    e0b8:	fe cf       	rjmp	.-4      	; 0xe0b6 <eeprom_read_blraw+0x2>
    e0ba:	06 c0       	rjmp	.+12     	; 0xe0c8 <eeprom_read_blraw+0x14>
    e0bc:	f2 bd       	out	0x22, r31	; 34
    e0be:	e1 bd       	out	0x21, r30	; 33
    e0c0:	f8 9a       	sbi	0x1f, 0	; 31
    e0c2:	31 96       	adiw	r30, 0x01	; 1
    e0c4:	00 b4       	in	r0, 0x20	; 32
    e0c6:	0d 92       	st	X+, r0
    e0c8:	41 50       	subi	r20, 0x01	; 1
    e0ca:	50 40       	sbci	r21, 0x00	; 0
    e0cc:	b8 f7       	brcc	.-18     	; 0xe0bc <eeprom_read_blraw+0x8>
    e0ce:	08 95       	ret

0000e0d0 <eeprom_read_byte>:
    e0d0:	f9 99       	sbic	0x1f, 1	; 31
    e0d2:	fe cf       	rjmp	.-4      	; 0xe0d0 <eeprom_read_byte>
    e0d4:	92 bd       	out	0x22, r25	; 34
    e0d6:	81 bd       	out	0x21, r24	; 33
    e0d8:	f8 9a       	sbi	0x1f, 0	; 31
    e0da:	99 27       	eor	r25, r25
    e0dc:	80 b5       	in	r24, 0x20	; 32
    e0de:	08 95       	ret

0000e0e0 <eeprom_write_byte>:
    e0e0:	26 2f       	mov	r18, r22

0000e0e2 <eeprom_write_r18>:
    e0e2:	f9 99       	sbic	0x1f, 1	; 31
    e0e4:	fe cf       	rjmp	.-4      	; 0xe0e2 <eeprom_write_r18>
    e0e6:	1f ba       	out	0x1f, r1	; 31
    e0e8:	92 bd       	out	0x22, r25	; 34
    e0ea:	81 bd       	out	0x21, r24	; 33
    e0ec:	20 bd       	out	0x20, r18	; 32
    e0ee:	0f b6       	in	r0, 0x3f	; 63
    e0f0:	f8 94       	cli
    e0f2:	fa 9a       	sbi	0x1f, 2	; 31
    e0f4:	f9 9a       	sbi	0x1f, 1	; 31
    e0f6:	0f be       	out	0x3f, r0	; 63
    e0f8:	01 96       	adiw	r24, 0x01	; 1
    e0fa:	08 95       	ret

0000e0fc <_exit>:
    e0fc:	f8 94       	cli

0000e0fe <__stop_program>:
    e0fe:	ff cf       	rjmp	.-2      	; 0xe0fe <__stop_program>
