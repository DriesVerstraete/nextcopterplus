
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000416  00800100  0000a40a  0000a49e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a40a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000390  00800516  00800516  0000a8b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000a8b4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006b0  00000000  00000000  0000a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00015c92  00000000  00000000  0000af98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000399e  00000000  00000000  00020c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004481  00000000  00000000  000245c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001530  00000000  00000000  00028a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002a46  00000000  00000000  00029f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009637  00000000  00000000  0002c9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000588  00000000  00000000  00035ff9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__ctors_end>
       4:	0c 94 1c 31 	jmp	0x6238	; 0x6238 <__vector_1>
       8:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <__vector_2>
       c:	0c 94 cf 31 	jmp	0x639e	; 0x639e <__vector_3>
      10:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      14:	0c 94 8e 31 	jmp	0x631c	; 0x631c <__vector_5>
      18:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      1c:	0c 94 55 31 	jmp	0x62aa	; 0x62aa <__vector_7>
      20:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      24:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      28:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      2c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      30:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      34:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      38:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      3c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      40:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      44:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      48:	0c 94 cd 30 	jmp	0x619a	; 0x619a <__vector_18>
      4c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      50:	0c 94 8b 32 	jmp	0x6516	; 0x6516 <__vector_20>
      54:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      58:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      5c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      60:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      64:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      68:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      6c:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      70:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      74:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      78:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__bad_interrupt>
      7c:	dd 1f       	adc	r29, r29
      7e:	4a 20       	and	r4, r10
      80:	4a 20       	and	r4, r10
      82:	ee 1f       	adc	r30, r30
      84:	fb 1f       	adc	r31, r27
      86:	05 20       	and	r0, r5
      88:	01 20       	and	r0, r1
      8a:	15 20       	and	r1, r5
      8c:	21 20       	and	r2, r1
      8e:	25 20       	and	r2, r5
      90:	31 20       	and	r3, r1
      92:	f0 39       	cpi	r31, 0x90	; 144
      94:	f2 39       	cpi	r31, 0x92	; 146
      96:	f5 39       	cpi	r31, 0x95	; 149
      98:	f7 39       	cpi	r31, 0x97	; 151
      9a:	f9 39       	cpi	r31, 0x99	; 153
      9c:	fb 39       	cpi	r31, 0x9B	; 155
      9e:	fd 39       	cpi	r31, 0x9D	; 157
      a0:	ff 39       	cpi	r31, 0x9F	; 159
      a2:	02 3a       	cpi	r16, 0xA2	; 162
      a4:	04 3a       	cpi	r16, 0xA4	; 164
      a6:	07 3a       	cpi	r16, 0xA7	; 167
      a8:	09 3a       	cpi	r16, 0xA9	; 169
      aa:	0b 3a       	cpi	r16, 0xAB	; 171
      ac:	0d 3a       	cpi	r16, 0xAD	; 173
      ae:	0f 3a       	cpi	r16, 0xAF	; 175
      b0:	11 3a       	cpi	r17, 0xA1	; 161
      b2:	13 3a       	cpi	r17, 0xA3	; 163
      b4:	15 3a       	cpi	r17, 0xA5	; 165
      b6:	17 3a       	cpi	r17, 0xA7	; 167
      b8:	1a 3a       	cpi	r17, 0xAA	; 170
      ba:	05 3e       	cpi	r16, 0xE5	; 229
      bc:	e9 3d       	cpi	r30, 0xD9	; 217
      be:	ec 3d       	cpi	r30, 0xDC	; 220
      c0:	ef 3d       	cpi	r30, 0xDF	; 223
      c2:	f2 3d       	cpi	r31, 0xD2	; 210
      c4:	f5 3d       	cpi	r31, 0xD5	; 213
      c6:	f8 3d       	cpi	r31, 0xD8	; 216
      c8:	fb 3d       	cpi	r31, 0xDB	; 219
      ca:	fe 3d       	cpi	r31, 0xDE	; 222

000000cc <Acc_Pol>:
      cc:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      dc:	ff ff                                               ..

000000de <ACC_RPY_Order>:
      de:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      ee:	02 01                                               ..

000000f0 <FUTABA>:
      f0:	01 02 00 03 04 05 06 07                             ........

000000f8 <JR>:
      f8:	00 01 02 03 04 05 06 07                             ........

00000100 <Trans_Matrix>:
     100:	05 02 06 01 05 08 03 07 05                          .........

00000109 <Wingdings>:
     109:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     119:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     129:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     139:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     149:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     159:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     169:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000173 <Verdana22>:
     173:	01 02 2d 0d 1d 00 1f 00 44 00 44 00 44 00 7d 00     ..-.....D.D.D.}.
     183:	aa 00 e3 01 1c 01 5d 01 92 01 cb 02 04 02 3d 09     ......].......=.
     193:	00 70 00 00 00 70 00 00 00 70 00 00 00 70 00 00     .p...p...p...p..
     1a3:	00 70 00 00 00 70 00 00 00 70 00 00 00 70 00 00     .p...p...p...p..
     1b3:	00 70 00 00 0e 80 ff 01 00 f0 ff 0f 00 f8 ff 1f     .p..............
     1c3:	00 7c 00 3e 00 1e 00 78 00 0e 00 70 00 0e 00 70     .|.>...x...p...p
     1d3:	00 0e 00 70 00 0e 00 70 00 1e 00 78 00 7c 00 3e     ...p...p...x.|.>
     1e3:	00 f8 ff 1f 00 f0 ff 0f 00 80 ff 01 00 0b 70 00     ..............p.
     1f3:	70 00 70 00 70 00 70 00 70 00 78 00 70 00 fc ff     p.p.p.p.p.x.p...
     203:	7f 00 fe ff 7f 00 fe ff 7f 00 00 00 70 00 00 00     ............p...
     213:	70 00 00 00 70 00 00 00 70 00 0e 00 00 78 00 1c     p...p...p....x..
     223:	00 7c 00 1c 00 7e 00 0e 00 77 00 0e 00 77 00 0e     .|...~...w...w..
     233:	80 73 00 0e c0 71 00 0e e0 70 00 1e 78 70 00 1e     .s...q...p..xp..
     243:	3c 70 00 fc 1f 70 00 f8 07 70 00 f0 03 70 00 00     <p...p...p...p..
     253:	00 70 00 0e 00 00 38 00 1c 00 38 00 1c 00 70 00     .p....8...8...p.
     263:	0e 00 70 00 0e 00 70 00 0e 1c 70 00 0e 1c 70 00     ..p...p...p...p.
     273:	0e 1c 70 00 0e 1c 70 00 0e 3e 78 00 1c 37 3c 00     ..p...p..>x..7<.
     283:	fc f3 3f 00 f8 e3 1f 00 f0 c0 07 00 10 00 e0 01     ..?.............
     293:	00 00 f0 01 00 00 fc 01 00 00 fe 01 00 00 df 01     ................
     2a3:	00 80 cf 01 00 e0 c3 01 00 f0 c1 01 00 f8 c0 01     ................
     2b3:	00 7c c0 01 00 fe ff 7f 00 fe ff 7f 00 fe ff 7f     .|..............
     2c3:	00 00 c0 01 00 00 c0 01 00 00 c0 01 00 0d 00 00     ................
     2d3:	38 00 fe 1f 38 00 fe 0f 70 00 fe 0f 70 00 0e 0e     8...8...p...p...
     2e3:	70 00 0e 0e 70 00 0e 0e 70 00 0e 0e 70 00 0e 1e     p...p...p...p...
     2f3:	78 00 0e 3c 3c 00 0e fc 1f 00 0e f8 0f 00 0e e0     x..<<...........
     303:	07 00 0e 00 fe 03 00 c0 ff 0f 00 f0 ff 1f 00 f8     ................
     313:	1c 3e 00 3c 0c 78 00 1c 0e 70 00 1e 0e 70 00 0e     .>.<.x...p...p..
     323:	0e 70 00 0e 0e 70 00 0e 1e 78 00 0e 3c 3c 00 1e     .p...p...x..<<..
     333:	fc 1f 00 00 f8 0f 00 00 e0 07 00 0e 0e 00 00 00     ................
     343:	0e 00 00 00 0e 00 40 00 0e 00 70 00 0e 00 7c 00     ......@...p...|.
     353:	0e 00 7f 00 0e c0 1f 00 0e f0 07 00 0e fc 00 00     ................
     363:	0e 3f 00 00 ce 0f 00 00 fe 03 00 00 fe 00 00 00     .?..............
     373:	3e 00 00 00 0e 00 c0 07 00 f0 e1 1f 00 f8 f3 3f     >..............?
     383:	00 fc 3f 3c 00 1e 1f 78 00 0e 0e 70 00 0e 0c 70     ..?<...x...p...p
     393:	00 0e 1c 70 00 0e 18 70 00 1e 3c 78 00 fc 7f 3c     ...p...p..<x...<
     3a3:	00 f8 f3 3f 00 f0 e1 1f 00 00 c0 07 00 0e e0 07     ...?............
     3b3:	00 00 f0 1f 00 00 f8 3f 78 00 3c 3c 70 00 1e 78     .......?x.<<p..x
     3c3:	70 00 0e 70 70 00 0e 70 70 00 0e 70 78 00 0e 70     p..pp..pp..px..p
     3d3:	38 00 1e 30 3c 00 7c 38 1f 00 f8 ff 0f 00 f0 ff     8..0<.|8........
     3e3:	03 00 c0 7f 00 00                                   ......

000003e9 <Verdana14>:
     3e9:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     3f9:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     409:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     419:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     429:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     439:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     449:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     459:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     469:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     479:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     489:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     499:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     4a9:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     4b9:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     4c9:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     4d9:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     4e9:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     4f9:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     509:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     519:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     529:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     539:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     549:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     559:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     569:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     579:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     589:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     599:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     5a9:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     5b9:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     5c9:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     5d9:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     5e9:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     5f9:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     609:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     619:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     629:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     639:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     649:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     659:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     669:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     679:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     689:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     699:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     6a9:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     6b9:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     6c9:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     6d9:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     6e9:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     6f9:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     709:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     719:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     729:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     739:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     749:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     759:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     769:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     779:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     789:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     799:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     7a9:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     7b9:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     7c9:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     7d9:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     7e9:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     7f9:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     809:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     819:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     829:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     839:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     849:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     859:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     869:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     879:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     889:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     899:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     8a9:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     8b9:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     8c9:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     8d9:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     8e9:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     8f9:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     909:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     919:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     929:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     939:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     949:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     959:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     969:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     979:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     989:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     999:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     9a9:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     9b9:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     9c9:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     9d9:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     9e9:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     9f9:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     a09:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     a19:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     a29:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     a39:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     a49:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     a59:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     a69:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     a79:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     a89:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     a99:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     aa9:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     ab9:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     ac9:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     ad9:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     ae9:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     af9:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     b09:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     b19:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     b29:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     b39:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     b49:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     b59:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     b69:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     b79:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     b89:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     b99:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     ba9:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     bb9:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     bc9:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     bd9:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     be9:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     bf9:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     c09:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     c19:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     c29:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     c39:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     c49:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     c59:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     c69:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     c79:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     c89:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000c97 <Verdana8>:
     c97:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     ca7:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     cb7:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     cc7:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     cd7:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     ce7:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     cf7:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     d07:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     d17:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     d27:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     d37:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     d47:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     d57:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     d67:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     d77:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     d87:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     d97:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     da7:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     db7:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     dc7:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     dd7:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     de7:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     df7:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     e07:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     e17:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     e27:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     e37:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     e47:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     e57:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     e67:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     e77:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     e87:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     e97:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     ea7:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     eb7:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     ec7:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     ed7:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     ee7:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     ef7:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     f07:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     f17:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     f27:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     f37:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     f47:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     f57:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     f67:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     f77:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     f87:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     f97:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     fa7:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     fb7:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     fc7:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     fd7:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     fe7:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     ff7:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
    1007:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
    1017:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
    1027:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
    1037:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
    1047:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
    1057:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
    1067:	01                                                  .

00001068 <lcd_commmands>:
    1068:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00001076 <pagemap>:
    1076:	07 06 05 04 03 02 01 00                             ........

0000107e <text_menu>:
    107e:	85 18 6f 13 6a 13 65 13 60 13 5b 13 56 13 51 13     ..o.j.e.`.[.V.Q.
    108e:	4c 13 f2 1a ea 1a f0 1a ee 1a ec 1a e5 1a e0 1a     L...............
    109e:	db 1a d6 1a ea 14 0a 15 05 15 ff 14 4a 18 fc 1a     ............J...
    10ae:	f4 1a 54 19 71 19 6c 19 66 19 62 19 5e 19 74 13     ..T.q.l.f.b.^.t.
    10be:	50 15 47 15 58 15 40 15 3b 15 95 13 90 13 8b 13     P.G.X.@.;.......
    10ce:	86 13 81 13 7b 13 75 13 27 15 74 13 84 15 7c 15     ....{.u.'.t...|.
    10de:	93 17 8e 17 8b 17 81 17 77 17 d7 13 cf 13 ca 13     ........w.......
    10ee:	6f 15 6a 15 61 15 c0 14 59 19 b4 14 2b 18 27 18     o.j.a...Y...+.'.
    10fe:	21 18 18 18 11 18 74 13 85 18 82 18 ef 13 f6 13     !.....t.........
    110e:	e5 13 74 13 74 13 17 15 10 15 c5 1a b3 1a a0 1a     ..t.t...........
    111e:	8e 1a 78 1a 69 1a 55 1a 41 1a 33 1a 24 1a 15 1a     ..x.i.U.A.3.$...
    112e:	06 1a f7 19 e8 19 d9 19 ca 19 b6 19 9d 19 84 19     ................
    113e:	76 19 74 13 95 13 90 13 a6 13 ab 13 b0 13 b5 13     v.t.............
    114e:	27 15 58 15 50 15 47 15 40 15 3b 15 36 15 31 15     '.X.P.G.@.;.6.1.
    115e:	2c 15 27 15 20 15 1a 15 08 18 01 18 f3 14 dd 13     ,.'. ...........
    116e:	ca 13 7c 14 70 14 74 13 2d 14 24 14 1b 14 17 14     ..|.p.t.-.$.....
    117e:	0e 14 06 14 74 13 74 13 74 13 01 1b f7 14 95 14     ....t.t.t.......
    118e:	87 14 82 14 68 14 5d 14 74 13 ff 13 f6 13 74 13     ....h.].t.....t.
    119e:	74 13 74 13 6c 19 66 19 62 19 79 18 cb 17 6f 18     t.t.l.f.b.y...o.
    11ae:	64 18 55 18 4a 18 3e 18 30 18 74 13 f4 17 ea 17     d.U.J.>.0.t.....
    11be:	e2 17 d5 17 9e 17 99 13 c1 17 b7 17 ab 17 96 17     ................
    11ce:	74 13 74 13 40 19 38 19 2a 19 1d 19 0f 19 04 19     t.t.@.8.*.......
    11de:	fb 18 f2 18 e3 18 d5 18 c6 18 ba 18 b3 18 ac 18     ................
    11ee:	9f 18 93 18 89 18 48 19 74 13 74 13 6f 17 64 17     ......H.t.t.o.d.
    11fe:	53 17 46 17 3b 17 2b 17 1b 17 0c 17 fc 16 ec 16     S.F.;.+.........
    120e:	dc 16 cc 16 bc 16 ac 16 9e 16 90 16 81 16 72 16     ..............r.
    121e:	65 16 58 16 4c 16 40 16 34 16 27 16 1d 16 13 16     e.X.L.@.4.'.....
    122e:	06 16 fb 15 ee 15 e3 15 d6 15 fb 15 c9 15 e3 15     ................
    123e:	74 13 74 13 84 15 7c 15 76 15 74 13 58 14 53 14     t.t...|.v.t.X.S.
    124e:	4e 14 49 14 44 14 3f 14 3a 14 35 14 58 15 50 15     N.I.D.?.:.5.X.P.
    125e:	47 15 40 15 3b 15 36 15 31 15 2c 15 c0 15 b6 15     G.@.;.6.1.,.....
    126e:	ae 15 a6 15 9d 15 95 15 8c 15 27 15 84 15 7c 15     ..........'...|.
    127e:	76 15 74 13 74 13 ab 14 a2 14 e0 14 da 14 ce 14     v.t.t...........
    128e:	1d 1b 17 1b 79 18 0e 1b 0c 1b 0a 1b c5 13 c1 13     ....y...........
    129e:	ba 13 3f 13 38 13 2e 13 46 13 26 13 74 13 74 13     ..?.8...F.&.t.t.
    12ae:	d0 1a 0c 13 ff 12 74 13 f8 12 ea 12 d9 12 cc 12     ......t.........
    12be:	74 13 74 13 74 13 c6 12                             t.t.t...

000012c6 <ERROR_MSG_0>:
    12c6:	43 6c 65 61 72 00                                   Clear.

000012cc <ERROR_3>:
    12cc:	44 69 73 61 72 6d 20 74 69 6d 65 72 00              Disarm timer.

000012d9 <ERROR_2>:
    12d9:	4e 6f 20 73 69 67 6e 61 6c 20 64 69 73 61 72 6d     No signal disarm
	...

000012ea <ERROR_1>:
    12ea:	4d 61 6e 75 61 6c 20 64 69 73 61 72 6d 00           Manual disarm.

000012f8 <ERROR_0>:
    12f8:	52 65 62 6f 6f 74 00                                Reboot.

000012ff <WARNING_1>:
    12ff:	52 45 4d 4f 56 45 20 50 52 4f 50 53 00              REMOVE PROPS.

0000130c <WARNING_0>:
    130c:	57 41 52 4e 49 4e 47 20 2d 20 45 72 61 73 65 73     WARNING - Erases
    131c:	20 73 65 74 74 69 6e 67 73 00                        settings.

00001326 <PRESET_4>:
    1326:	4f 70 74 69 6f 6e 73 00                             Options.

0000132e <PRESET_3>:
    132e:	54 72 69 63 6f 70 74 65 72 00                       Tricopter.

00001338 <PRESET_2>:
    1338:	51 75 61 64 20 50 00                                Quad P.

0000133f <PRESET_1>:
    133f:	51 75 61 64 20 58 00                                Quad X.

00001346 <PRESET_0>:
    1346:	42 6c 61 6e 6b 00                                   Blank.

0000134c <VBAT39>:
    134c:	33 2e 39 56 00                                      3.9V.

00001351 <VBAT38>:
    1351:	33 2e 38 56 00                                      3.8V.

00001356 <VBAT37>:
    1356:	33 2e 37 56 00                                      3.7V.

0000135b <VBAT36>:
    135b:	33 2e 36 56 00                                      3.6V.

00001360 <VBAT35>:
    1360:	33 2e 35 56 00                                      3.5V.

00001365 <VBAT34>:
    1365:	33 2e 34 56 00                                      3.4V.

0000136a <VBAT33>:
    136a:	33 2e 33 56 00                                      3.3V.

0000136f <VBAT32>:
    136f:	33 2e 32 56 00                                      3.2V.

00001374 <Dummy0>:
	...

00001375 <MPU6050LPF7>:
    1375:	32 36 30 48 7a 00                                   260Hz.

0000137b <MPU6050LPF6>:
    137b:	31 38 34 48 7a 00                                   184Hz.

00001381 <MPU6050LPF5>:
    1381:	39 34 48 7a 00                                      94Hz.

00001386 <MPU6050LPF4>:
    1386:	34 34 48 7a 00                                      44Hz.

0000138b <MPU6050LPF3>:
    138b:	32 31 48 7a 00                                      21Hz.

00001390 <MPU6050LPF2>:
    1390:	31 30 48 7a 00                                      10Hz.

00001395 <MPU6050LPF1>:
    1395:	35 48 7a 00                                         5Hz.

00001399 <GeneralText10>:
    1399:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

000013a6 <SWLPF4>:
    13a6:	31 37 48 7a 00                                      17Hz.

000013ab <SWLPF3>:
    13ab:	32 37 48 7a 00                                      27Hz.

000013b0 <SWLPF2>:
    13b0:	33 38 48 7a 00                                      38Hz.

000013b5 <SWLPF1>:
    13b5:	36 37 48 7a 00                                      67Hz.

000013ba <Random12>:
    13ba:	73 69 67 6e 61 6c 00                                signal.

000013c1 <Random11>:
    13c1:	6c 6f 77 00                                         low.

000013c5 <Random10>:
    13c5:	68 69 67 68 00                                      high.

000013ca <Random1>:
    13ca:	48 69 67 68 00                                      High.

000013cf <Safety2>:
    13cf:	41 72 6d 61 62 6c 65 00                             Armable.

000013d7 <Safety1>:
    13d7:	41 72 6d 65 64 00                                   Armed.

000013dd <GeneralText5>:
    13dd:	53 79 6e 63 20 52 43 00                             Sync RC.

000013e5 <MixerItem16>:
    13e5:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

000013ef <MixerItem15>:
    13ef:	53 63 61 6c 65 64 00                                Scaled.

000013f6 <MixerItem12>:
    13f6:	52 65 76 65 72 73 65 64 00                          Reversed.

000013ff <MixerItem11>:
    13ff:	4e 6f 72 6d 61 6c 00                                Normal.

00001406 <MixerMenuItem7>:
    1406:	50 69 74 63 68 55 70 00                             PitchUp.

0000140e <MixerMenuItem6>:
    140e:	53 69 64 65 77 61 79 73 00                          Sideways.

00001417 <MixerMenuItem5>:
    1417:	41 66 74 00                                         Aft.

0000141b <MixerMenuItem4>:
    141b:	49 6e 76 65 72 74 65 64 00                          Inverted.

00001424 <MixerMenuItem3>:
    1424:	56 65 72 74 69 63 61 6c 00                          Vertical.

0000142d <MixerMenuItem2>:
    142d:	46 6f 72 77 61 72 64 00                             Forward.

00001435 <MOUT8>:
    1435:	4f 55 54 38 00                                      OUT8.

0000143a <MOUT7>:
    143a:	4f 55 54 37 00                                      OUT7.

0000143f <MOUT6>:
    143f:	4f 55 54 36 00                                      OUT6.

00001444 <MOUT5>:
    1444:	4f 55 54 35 00                                      OUT5.

00001449 <MOUT4>:
    1449:	4f 55 54 34 00                                      OUT4.

0000144e <MOUT3>:
    144e:	4f 55 54 33 00                                      OUT3.

00001453 <MOUT2>:
    1453:	4f 55 54 32 00                                      OUT2.

00001458 <MOUT1>:
    1458:	4f 55 54 31 00                                      OUT1.

0000145d <Status5>:
    145d:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001468 <Status4>:
    1468:	28 41 72 6d 65 64 29 00                             (Armed).

00001470 <Status2>:
    1470:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

0000147c <Status0>:
    147c:	50 72 65 73 73 00                                   Press.

00001482 <WizardText2>:
    1482:	44 6f 6e 65 00                                      Done.

00001487 <WizardText1>:
    1487:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001495 <WizardText0>:
    1495:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

000014a2 <PText6>:
    14a2:	73 65 74 74 69 6e 67 73 00                          settings.

000014ab <PText5>:
    14ab:	55 70 64 61 74 69 6e 67 00                          Updating.

000014b4 <PText4>:
    14b4:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

000014c0 <PText3>:
    14c0:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

000014ce <PText2>:
    14ce:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

000014da <PText1>:
    14da:	52 65 73 65 74 00                                   Reset.

000014e0 <PText0>:
    14e0:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

000014ea <Disarmed>:
    14ea:	44 69 73 61 72 6d 65 64 00                          Disarmed.

000014f3 <ErrorText10>:
    14f3:	4c 6f 77 00                                         Low.

000014f7 <Status3>:
    14f7:	42 61 74 74 65 72 79 00                             Battery.

000014ff <ErrorText7>:
    14ff:	4d 6f 64 65 6c 00                                   Model.

00001505 <ErrorText6>:
    1505:	4c 6f 73 74 00                                      Lost.

0000150a <ErrorText5>:
    150a:	45 72 72 6f 72 00                                   Error.

00001510 <ErrorText4>:
    1510:	53 69 67 6e 61 6c 00                                Signal.

00001517 <ErrorText3>:
    1517:	4e 6f 00                                            No.

0000151a <ChannelRef12>:
    151a:	45 6c 65 76 2e 00                                   Elev..

00001520 <ChannelRef10>:
    1520:	54 68 72 6f 74 2e 00                                Throt..

00001527 <ChannelRef8>:
    1527:	4e 6f 6e 65 00                                      None.

0000152c <ChannelRef7>:
    152c:	41 55 58 33 00                                      AUX3.

00001531 <ChannelRef6>:
    1531:	41 55 58 32 00                                      AUX2.

00001536 <ChannelRef5>:
    1536:	41 55 58 31 00                                      AUX1.

0000153b <ChannelRef4>:
    153b:	47 65 61 72 00                                      Gear.

00001540 <ChannelRef3>:
    1540:	52 75 64 64 65 72 00                                Rudder.

00001547 <ChannelRef2>:
    1547:	45 6c 65 76 61 74 6f 72 00                          Elevator.

00001550 <ChannelRef1>:
    1550:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001558 <ChannelRef0>:
    1558:	54 68 72 6f 74 74 6c 65 00                          Throttle.

00001561 <MixerItem62>:
    1561:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

0000156a <MixerItem61>:
    156a:	53 69 6e 65 00                                      Sine.

0000156f <MixerItem60>:
    156f:	4c 69 6e 65 61 72 00                                Linear.

00001576 <MixerItem49>:
    1576:	4d 6f 74 6f 72 00                                   Motor.

0000157c <MixerItem41>:
    157c:	44 2e 53 65 72 76 6f 00                             D.Servo.

00001584 <MixerItem40>:
    1584:	41 2e 53 65 72 76 6f 00                             A.Servo.

0000158c <MixerItem81>:
    158c:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001595 <MixerItem80>:
    1595:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

0000159d <MixerItem74>:
    159d:	41 63 63 50 69 74 63 68 00                          AccPitch.

000015a6 <MixerItem73>:
    15a6:	41 63 63 52 6f 6c 6c 00                             AccRoll.

000015ae <MixerItem72>:
    15ae:	47 79 72 6f 59 61 77 00                             GyroYaw.

000015b6 <MixerItem71>:
    15b6:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000015c0 <MixerItem70>:
    15c0:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

000015c9 <MixerItem31>:
    15c9:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

000015d6 <MixerItem21>:
    15d6:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

000015e3 <MixerItem30>:
    15e3:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

000015ee <MixerItem29>:
    15ee:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

000015fb <MixerItem2>:
    15fb:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

00001606 <MixerItem0>:
    1606:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

00001613 <MixerItem43>:
    1613:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

0000161d <MixerItem42>:
    161d:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

00001627 <MixerItem28>:
    1627:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001634 <MixerItem3>:
    1634:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

00001640 <MixerItem27>:
    1640:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

0000164c <MixerItem7>:
    164c:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001658 <MixerItem26>:
    1658:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001665 <MixerItem6>:
    1665:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

00001672 <MixerItem25>:
    1672:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

00001681 <MixerItem5>:
    1681:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

00001690 <MixerItem24>:
    1690:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

0000169e <MixerItem4>:
    169e:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

000016ac <MixerItem56>:
    16ac:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

000016bc <MixerItem53>:
    16bc:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

000016cc <MixerItem55>:
    16cc:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

000016dc <MixerItem52>:
    16dc:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

000016ec <MixerItem54>:
    16ec:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

000016fc <MixerItem51>:
    16fc:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

0000170c <Mixeritem50>:
    170c:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

0000171b <MixerItem33>:
    171b:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

0000172b <MixerItem23>:
    172b:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

0000173b <MixerItem34>:
    173b:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

00001746 <MixerItem35>:
    1746:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

00001753 <MixerItem36>:
    1753:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

00001764 <MixerItem20>:
    1764:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

0000176f <MixerItem1>:
    176f:	44 65 76 69 63 65 3a 00                             Device:.

00001777 <P5text>:
    1777:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

00001781 <P4text>:
    1781:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

0000178b <P3text>:
    178b:	50 32 00                                            P2.

0000178e <P2text>:
    178e:	50 31 2e 6e 00                                      P1.n.

00001793 <P1text>:
    1793:	50 31 00                                            P1.

00001796 <GeneralText20>:
    1796:	50 72 65 73 65 74 3a 00                             Preset:.

0000179e <BattMenuItem2>:
    179e:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

000017ab <GeneralText7>:
    17ab:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

000017b7 <GeneralText16>:
    17b7:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

000017c1 <GeneralText6>:
    17c1:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

000017cb <GeneralText3>:
    17cb:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

000017d5 <GeneralText2>:
    17d5:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

000017e2 <AutoMenuItem2>:
    17e2:	53 61 66 65 74 79 3a 00                             Safety:.

000017ea <Contrast>:
    17ea:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

000017f4 <MixerMenuItem0>:
    17f4:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

00001801 <RCMenuItem7>:
    1801:	46 75 74 61 62 61 00                                Futaba.

00001808 <RCMenuItem6>:
    1808:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

00001811 <RXMode4>:
    1811:	58 74 72 65 6d 65 00                                Xtreme.

00001818 <RXMode3>:
    1818:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

00001821 <RXMode2>:
    1821:	53 2d 42 75 73 00                                   S-Bus.

00001827 <RXMode1>:
    1827:	50 57 4d 00                                         PWM.

0000182b <RXMode0>:
    182b:	43 50 50 4d 00                                      CPPM.

00001830 <RCMenuItem30>:
    1830:	56 69 62 65 20 64 69 73 70 6c 61 79 3a 00           Vibe display:.

0000183e <Transition_P1n>:
    183e:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

0000184a <Transition>:
    184a:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

00001855 <RCMenuItem2>:
    1855:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

00001864 <RCMenuItem0>:
    1864:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

0000186f <RCMenuItem20>:
    186f:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

00001879 <RCMenuItem1>:
    1879:	52 58 20 74 79 70 65 3a 00                          RX type:.

00001882 <AutoMenuItem15>:
    1882:	4f 4e 00                                            ON.

00001885 <AutoMenuItem11>:
    1885:	4f 46 46 00                                         OFF.

00001889 <StabMenuItem30>:
    1889:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

00001893 <StabMenuItem9>:
    1893:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

0000189f <StabMenuItem12>:
    189f:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

000018ac <StabMenuItem8>:
    18ac:	59 61 77 20 49 3a 00                                Yaw I:.

000018b3 <StabMenuItem7>:
    18b3:	59 61 77 20 50 3a 00                                Yaw P:.

000018ba <AutoMenuItem8>:
    18ba:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

000018c6 <AutoMenuItem21>:
    18c6:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

000018d5 <StabMenuItem6>:
    18d5:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

000018e3 <StabMenuItem11>:
    18e3:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

000018f2 <StabMenuItem5>:
    18f2:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

000018fb <AutoMenuItem4>:
    18fb:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

00001904 <AutoMenuItem7>:
    1904:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

0000190f <AutoMenuItem20>:
    190f:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

0000191d <StabMenuItem3>:
    191d:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

0000192a <StabMenuItem10>:
    192a:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001938 <StabMenuItem2>:
    1938:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

00001940 <AutoMenuItem1>:
    1940:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

00001948 <StabMenuItem13>:
    1948:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

00001954 <SensorMenuItem2>:
    1954:	49 6e 76 2e 00                                      Inv..

00001959 <SensorMenuItem1>:
    1959:	43 61 6c 2e 00                                      Cal..

0000195e <PText19>:
    195e:	41 63 63 00                                         Acc.

00001962 <PText18>:
    1962:	59 61 77 00                                         Yaw.

00001966 <PText17>:
    1966:	50 69 74 63 68 00                                   Pitch.

0000196c <PText16>:
    196c:	52 6f 6c 6c 00                                      Roll.

00001971 <PText15>:
    1971:	47 79 72 6f 00                                      Gyro.

00001976 <MainMenuItem24>:
    1976:	32 30 2e 20 45 72 72 6f 72 20 6c 6f 67 00           20. Error log.

00001984 <MainMenuItem23>:
    1984:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    1994:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000199d <MainMenuItem22>:
    199d:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    19ad:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

000019b6 <MainMenuItem20>:
    19b6:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    19c6:	69 6f 6e 00                                         ion.

000019ca <MainMenuItem18>:
    19ca:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

000019d9 <MainMenuItem17>:
    19d9:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

000019e8 <MainMenuItem16>:
    19e8:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

000019f7 <MainMenuItem15>:
    19f7:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

00001a06 <MainMenuItem14>:
    1a06:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

00001a15 <MainMenuItem13>:
    1a15:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

00001a24 <MainMenuItem12>:
    1a24:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

00001a33 <MainMenuItem11>:
    1a33:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

00001a41 <MainMenuItem3>:
    1a41:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    1a51:	65 20 32 00                                         e 2.

00001a55 <MainMenuItem2>:
    1a55:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    1a65:	65 20 31 00                                         e 1.

00001a69 <MainMenuItem10>:
    1a69:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

00001a78 <MainMenuItem8>:
    1a78:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    1a88:	61 74 69 6f 6e 00                                   ation.

00001a8e <MainMenuItem7>:
    1a8e:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    1a9e:	79 00                                               y.

00001aa0 <MainMenuItem9>:
    1aa0:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    1ab0:	74 73 00                                            ts.

00001ab3 <MainMenuItem1>:
    1ab3:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    1ac3:	70 00                                               p.

00001ac5 <MainMenuItem0>:
    1ac5:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00001ad0 <MenuFrame9>:
    1ad0:	41 62 6f 72 74 00                                   Abort.

00001ad6 <MenuFrame8>:
    1ad6:	53 61 76 65 00                                      Save.

00001adb <MenuFrame7>:
    1adb:	44 65 66 2e 00                                      Def..

00001ae0 <MenuFrame6>:
    1ae0:	42 61 63 6b 00                                      Back.

00001ae5 <MenuFrame5>:
    1ae5:	4d 65 6e 75 00                                      Menu.

00001aea <MenuFrame1>:
    1aea:	45 00                                               E.

00001aec <MenuFrame4>:
    1aec:	44 00                                               D.

00001aee <MenuFrame3>:
    1aee:	43 00                                               C.

00001af0 <MenuFrame2>:
    1af0:	42 00                                               B.

00001af2 <MenuFrame0>:
    1af2:	41 00                                               A.

00001af4 <StatusText9>:
    1af4:	4a 69 74 74 65 72 3a 00                             Jitter:.

00001afc <StatusText8>:
    1afc:	50 6f 73 3a 00                                      Pos:.

00001b01 <StatusText7>:
    1b01:	42 61 74 74 65 72 79 3a 00                          Battery:.

00001b0a <StatusText5>:
    1b0a:	30 00                                               0.

00001b0c <StatusText4>:
    1b0c:	2e 00                                               ..

00001b0e <StatusText3>:
    1b0e:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

00001b17 <StatusText1>:
    1b17:	4d 6f 64 65 3a 00                                   Mode:.

00001b1d <StatusText0>:
    1b1d:	56 65 72 73 69 6f 6e 3a 20 20 20 31 2e 32 20 42     Version:   1.2 B
    1b2d:	36 00                                               6.

00001b2f <Gyro_Pol>:
    1b2f:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    1b3f:	01 01                                               ..

00001b41 <Gyro_RPY_Order>:
    1b41:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    1b51:	01 00                                               ..

00001b53 <LPF_lookup_HS>:
    1b53:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    1b63:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

00001b73 <LPF_lookup>:
    1b73:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    1b83:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

00001b93 <lines>:
    1b93:	03 0f 1b 27                                         ...'

00001b97 <flight_menu_ranges>:
    1b97:	00 7f 01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00     ....(......}....
    1ba7:	04 01 00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f     ................
    1bb7:	01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00 04 01     ..(......}......
    1bc7:	00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f 01 00     ................
    1bd7:	3c 00 7f 01 00 28 00 7d 01 00 19 00 04 01 00 02     <....(.}........
    1be7:	81 7f 01 00 00 00 7f 01 00 32                       .........2

00001bf1 <FlightMenuText>:
	...

00001c15 <mixer_menu_ranges>:
    1c15:	00 02 01 01 02 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    1c25:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    1c35:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    1c45:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    1c55:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    1c65:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    1c75:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    1c85:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    1c95:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    1ca5:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    1cb5:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

00001cbf <MixerMenuText>:
    1cbf:	e2 00 00 00 00 00 00 00 00 00 00 00 00 00 38 00     ..............8.
	...
    1cdb:	44 00 44 00 44 00 44 00 44 00 44 00 44 00 44 00     D.D.D.D.D.D.D.D.
    1ceb:	44 00 44 00 44 00 44 00 ee 00 00 00 ee 00 00 00     D.D.D.D.........
    1cfb:	ee 00 00 00 ee 00 00 00                             ........

00001d03 <servo_menu_ranges>:
    1d03:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

00001d12 <ServoMenuText>:
    1d12:	8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00     ................
	...

00001d42 <rc_menu_ranges>:
    1d42:	00 04 01 01 02 00 02 01 01 02 00 04 01 01 04 00     ................
    1d52:	01 01 01 00 00 07 01 01 04 00 28 01 00 00 01 63     ..........(....c
    1d62:	01 00 32 00 01 01 01 00 00 01 01 01 00 00 00 00     ..2.............
    1d72:	00 00 00 05 01 01 00 1c 32 01 00 24 00 01 01 01     ........2..$....
    1d82:	01 00 7f 01 00 1e 00 08 01 01 00 00 06 01 01 03     ................
    1d92:	00 07 01 01 02 00 07 01 01 07 01 0a 01 00 07 00     ................
    1da2:	03 01 04 00                                         ....

00001da6 <RCMenuText>:
    1da6:	3e 00 76 00 69 00 74 00 69 00 00 00 00 00 44 00     >.v.i.t.i.....D.
    1db6:	00 00 00 00 7c 00 00 00 35 00 00 00 00 00 25 00     ....|...5.....%.
    1dc6:	25 00 25 00 00 00 11 01                             %.%.....

00001dce <SQRTSIN>:
    1dce:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1dde:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1dee:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1dfe:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1e0e:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1e1e:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1e2e:	64 64 64 64 64                                      ddddd

00001e33 <SIN>:
    1e33:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1e43:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1e53:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1e63:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1e73:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1e83:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1e93:	64 64 64 64 64                                      ddddd

00001e98 <__ctors_end>:
    1e98:	11 24       	eor	r1, r1
    1e9a:	1f be       	out	0x3f, r1	; 63
    1e9c:	cf ef       	ldi	r28, 0xFF	; 255
    1e9e:	d0 e1       	ldi	r29, 0x10	; 16
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	cd bf       	out	0x3d, r28	; 61

00001ea4 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1ea4:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1ea6:	88 e1       	ldi	r24, 0x18	; 24
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	80 93 60 00 	sts	0x0060, r24
    1eb0:	10 92 60 00 	sts	0x0060, r1
    1eb4:	0f be       	out	0x3f, r0	; 63

00001eb6 <__do_copy_data>:
    1eb6:	15 e0       	ldi	r17, 0x05	; 5
    1eb8:	a0 e0       	ldi	r26, 0x00	; 0
    1eba:	b1 e0       	ldi	r27, 0x01	; 1
    1ebc:	ea e0       	ldi	r30, 0x0A	; 10
    1ebe:	f4 ea       	ldi	r31, 0xA4	; 164
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <__do_copy_data+0x10>
    1ec2:	05 90       	lpm	r0, Z+
    1ec4:	0d 92       	st	X+, r0
    1ec6:	a6 31       	cpi	r26, 0x16	; 22
    1ec8:	b1 07       	cpc	r27, r17
    1eca:	d9 f7       	brne	.-10     	; 0x1ec2 <__do_copy_data+0xc>

00001ecc <__do_clear_bss>:
    1ecc:	28 e0       	ldi	r18, 0x08	; 8
    1ece:	a6 e1       	ldi	r26, 0x16	; 22
    1ed0:	b5 e0       	ldi	r27, 0x05	; 5
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <.do_clear_bss_start>

00001ed4 <.do_clear_bss_loop>:
    1ed4:	1d 92       	st	X+, r1

00001ed6 <.do_clear_bss_start>:
    1ed6:	a6 3a       	cpi	r26, 0xA6	; 166
    1ed8:	b2 07       	cpc	r27, r18
    1eda:	e1 f7       	brne	.-8      	; 0x1ed4 <.do_clear_bss_loop>
    1edc:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <main>
    1ee0:	0c 94 03 52 	jmp	0xa406	; 0xa406 <_exit>

00001ee4 <__bad_interrupt>:
    1ee4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001ee8 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1ee8:	00 00       	nop
	ret					// 4 (5 cycles)
    1eea:	08 95       	ret

00001eec <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1eec:	fd df       	rcall	.-6      	; 0x1ee8 <glcd_delay>
	rcall	glcd_delay
    1eee:	fc df       	rcall	.-8      	; 0x1ee8 <glcd_delay>
	rcall	glcd_delay
    1ef0:	fb df       	rcall	.-10     	; 0x1ee8 <glcd_delay>
	rcall	glcd_delay
    1ef2:	fa df       	rcall	.-12     	; 0x1ee8 <glcd_delay>
	ret
    1ef4:	08 95       	ret

00001ef6 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1ef6:	cf 93       	push	r28

00001ef8 <master_loop>:

master_loop:
	cbi 	BIND		//	2
    1ef8:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1efa:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1efc:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <VarDelay>
	sbi		BIND		//	2
    1f00:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1f02:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1f04:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <VarDelay>
	dec		r24
    1f08:	8a 95       	dec	r24
	brne	master_loop	//  2 1
    1f0a:	b1 f7       	brne	.-20     	; 0x1ef8 <master_loop>

	pop		YL			//	  1
    1f0c:	cf 91       	pop	r28
	ret					//	  4 
    1f0e:	08 95       	ret

00001f10 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1f10:	00 c0       	rjmp	.+0      	; 0x1f12 <VarDelay+0x2>
	rjmp .+0			// 2
    1f12:	00 c0       	rjmp	.+0      	; 0x1f14 <VarDelay+0x4>
	rjmp .+0			// 2
    1f14:	00 c0       	rjmp	.+0      	; 0x1f16 <VarDelay+0x6>
	rjmp .+0			// 2
    1f16:	00 c0       	rjmp	.+0      	; 0x1f18 <VarDelay+0x8>
	rjmp .+0			// 2
    1f18:	00 c0       	rjmp	.+0      	; 0x1f1a <VarDelay+0xa>
	rjmp .+0			// 2
    1f1a:	00 c0       	rjmp	.+0      	; 0x1f1c <VarDelay+0xc>
	rjmp .+0			// 2
    1f1c:	00 c0       	rjmp	.+0      	; 0x1f1e <VarDelay+0xe>
	rjmp .+0			// 2
    1f1e:	00 c0       	rjmp	.+0      	; 0x1f20 <VarDelay+0x10>
	nop					// 1
    1f20:	00 00       	nop
	dec 	YL			// 1
    1f22:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1f24:	a9 f7       	brne	.-22     	; 0x1f10 <VarDelay>
	ret					//   4 
    1f26:	08 95       	ret

00001f28 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1f28:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1f2a:	ef 93       	push	r30
	push	ZH			// 2
    1f2c:	ff 93       	push	r31
	push	XL			// 2
    1f2e:	af 93       	push	r26
	push	XH			// 2
    1f30:	bf 93       	push	r27
	push	YL			// 2
    1f32:	cf 93       	push	r28
	push	YH			// 2
    1f34:	df 93       	push	r29
	push	16			// 2
    1f36:	0f 93       	push	r16
	push	17			// 2
    1f38:	1f 93       	push	r17
	push	18			// 2
    1f3a:	2f 93       	push	r18
	push	19			// 2
    1f3c:	3f 93       	push	r19
	push	20			// 2
    1f3e:	4f 93       	push	r20
	push	21			// 2
    1f40:	5f 93       	push	r21
	push	22			// 2
    1f42:	6f 93       	push	r22
	push	23			// 2
    1f44:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1f46:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1f48:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1f4a:	8f 93       	push	r24
	push	25			// 2
    1f4c:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1f4e:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1f50:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1f52:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1f54:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1f56:	af 93       	push	r26
	push	XH 			// 2
    1f58:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1f5a:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1f5c:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1f5e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1f60:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1f62:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1f64:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1f66:	af 93       	push	r26
	push	XH 		
    1f68:	bf 93       	push	r27
	andi	XL,	0x07
    1f6a:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1f6c:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1f6e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1f70:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1f72:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1f74:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1f76:	af 93       	push	r26
	push	XH 		
    1f78:	bf 93       	push	r27
	andi	XL,	0x07
    1f7a:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1f7c:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1f7e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1f80:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1f82:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1f84:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1f86:	af 93       	push	r26
	push	XH 	
    1f88:	bf 93       	push	r27
	andi	XL,	0x07
    1f8a:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1f8c:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1f8e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1f90:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1f92:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1f94:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1f96:	af 93       	push	r26
	push	XH 	
    1f98:	bf 93       	push	r27
	andi	XL,	0x07
    1f9a:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1f9c:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1f9e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1fa0:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1fa2:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1fa4:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1fa6:	af 93       	push	r26
	push	XH 	
    1fa8:	bf 93       	push	r27
	andi	XL,	0x07
    1faa:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1fac:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1fae:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1fb0:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1fb2:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1fb4:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1fb6:	af 93       	push	r26
	push	XH 
    1fb8:	bf 93       	push	r27
	andi	XL,	0x07
    1fba:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1fbc:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1fbe:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1fc0:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1fc2:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1fc4:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1fc6:	af 93       	push	r26
	push	XH 
    1fc8:	bf 93       	push	r27
	andi	XL,	0x07
    1fca:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1fcc:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1fce:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1fd0:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1fd4:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1fd6:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1fd8:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M2
	mov		r25,r22
    1fdc:	96 2f       	mov	r25, r22
	call	DelayHigh
    1fde:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1fe2:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1fe4:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1fe6:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M3
	mov		r25,r21
    1fea:	95 2f       	mov	r25, r21
	call	DelayHigh
    1fec:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1ff0:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1ff2:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1ff4:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M4
	mov		r25,r20
    1ff8:	94 2f       	mov	r25, r20
	call	DelayHigh
    1ffa:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1ffe:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    2000:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    2002:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M5
	mov		r25,r19
    2006:	93 2f       	mov	r25, r19
	call	DelayHigh
    2008:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    200c:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    200e:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    2010:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M6
	mov		r25,r18
    2014:	92 2f       	mov	r25, r18
	call	DelayHigh
    2016:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    201a:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    201c:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    201e:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M7
	mov		r25,r17
    2022:	91 2f       	mov	r25, r17
	call	DelayHigh
    2024:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    2028:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    202a:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    202c:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// M8
	mov		r25,r16
    2030:	90 2f       	mov	r25, r16
	call	DelayHigh
    2032:	0e 94 02 11 	call	0x2204	; 0x2204 <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    2036:	f7 fc       	sbrc	r15, 7
	sbi 	M8
    2038:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    203a:	0e 94 0e 11 	call	0x221c	; 0x221c <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    203e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <pwm_delay>
	call    pwm_delay
    2042:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <pwm_delay>
	call    pwm_delay
    2046:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    204a:	bf 91       	pop	r27
	pop		XL
    204c:	af 91       	pop	r26
	call	shuffle_8
    204e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r16,XL
    2052:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    2054:	bf 91       	pop	r27
	pop		XL
    2056:	af 91       	pop	r26
	call	shuffle_8
    2058:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r17,XL
    205c:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    205e:	bf 91       	pop	r27
	pop		XL
    2060:	af 91       	pop	r26
	call	shuffle_8
    2062:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r18,XL
    2066:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    2068:	bf 91       	pop	r27
	pop		XL
    206a:	af 91       	pop	r26
	call	shuffle_8
    206c:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r19,XL
    2070:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    2072:	bf 91       	pop	r27
	pop		XL
    2074:	af 91       	pop	r26
	call	shuffle_8
    2076:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r20,XL
    207a:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    207c:	bf 91       	pop	r27
	pop		XL
    207e:	af 91       	pop	r26
	call	shuffle_8
    2080:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r21,XL
    2084:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    2086:	bf 91       	pop	r27
	pop		XL
    2088:	af 91       	pop	r26
	call	shuffle_8
    208a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r22,XL
    208e:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    2090:	bf 91       	pop	r27
	pop		XL
    2092:	af 91       	pop	r26
	call	shuffle_8
    2094:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <shuffle_8>
	mov		r23,XL
    2098:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    209a:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    209c:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    209e:	00 24       	eor	r0, r0

000020a0 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    20a0:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    20a2:	19 f4       	brne	.+6      	; 0x20aa <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    20a4:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    20a6:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <jj1>

000020aa <j1>:
j1:
	rjmp 	.+0			// 2
    20aa:	00 c0       	rjmp	.+0      	; 0x20ac <j1+0x2>
	rjmp 	.+0			// 2
    20ac:	00 c0       	rjmp	.+0      	; 0x20ae <jj1>

000020ae <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    20ae:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    20b0:	19 f4       	brne	.+6      	; 0x20b8 <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    20b2:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    20b4:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <jj2>

000020b8 <j2>:
j2:
	rjmp	.+0
    20b8:	00 c0       	rjmp	.+0      	; 0x20ba <j2+0x2>
	rjmp	.+0
    20ba:	00 c0       	rjmp	.+0      	; 0x20bc <jj2>

000020bc <jj2>:
jj2:
	subi	r21,1
    20bc:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    20be:	19 f4       	brne	.+6      	; 0x20c6 <j3>
	cbi 	M3
    20c0:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    20c2:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <jj3>

000020c6 <j3>:
j3:
	rjmp	.+0
    20c6:	00 c0       	rjmp	.+0      	; 0x20c8 <j3+0x2>
	rjmp	.+0
    20c8:	00 c0       	rjmp	.+0      	; 0x20ca <jj3>

000020ca <jj3>:
jj3:
	subi 	r20,1
    20ca:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    20cc:	19 f4       	brne	.+6      	; 0x20d4 <j4>
	cbi 	M4
    20ce:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    20d0:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <jj4>

000020d4 <j4>:
j4:
	rjmp 	.+0
    20d4:	00 c0       	rjmp	.+0      	; 0x20d6 <j4+0x2>
	rjmp 	.+0
    20d6:	00 c0       	rjmp	.+0      	; 0x20d8 <jj4>

000020d8 <jj4>:
jj4:
	subi	r19,1
    20d8:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    20da:	19 f4       	brne	.+6      	; 0x20e2 <j5>
	cbi 	M5
    20dc:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    20de:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <jj5>

000020e2 <j5>:
j5:
	rjmp 	.+0
    20e2:	00 c0       	rjmp	.+0      	; 0x20e4 <j5+0x2>
	rjmp 	.+0
    20e4:	00 c0       	rjmp	.+0      	; 0x20e6 <jj5>

000020e6 <jj5>:
jj5:
	subi	r18,1
    20e6:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    20e8:	19 f4       	brne	.+6      	; 0x20f0 <j6>
	cbi 	M6
    20ea:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    20ec:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <jj6>

000020f0 <j6>:
j6:
	rjmp 	.+0
    20f0:	00 c0       	rjmp	.+0      	; 0x20f2 <j6+0x2>
	rjmp	.+0
    20f2:	00 c0       	rjmp	.+0      	; 0x20f4 <jj6>

000020f4 <jj6>:
jj6:
	subi	r17,1
    20f4:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    20f6:	19 f4       	brne	.+6      	; 0x20fe <j7>
	cbi 	M7
    20f8:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    20fa:	0c 94 81 10 	jmp	0x2102	; 0x2102 <jj7>

000020fe <j7>:
j7:
	rjmp 	.+0
    20fe:	00 c0       	rjmp	.+0      	; 0x2100 <j7+0x2>
	rjmp 	.+0
    2100:	00 c0       	rjmp	.+0      	; 0x2102 <jj7>

00002102 <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    2102:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    2104:	19 f4       	brne	.+6      	; 0x210c <j8>
	cbi 	M8
    2106:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    2108:	0c 94 88 10 	jmp	0x2110	; 0x2110 <jj8>

0000210c <j8>:
j8:
	rjmp 	.+0
    210c:	00 c0       	rjmp	.+0      	; 0x210e <j8+0x2>
	rjmp 	.+0
    210e:	00 c0       	rjmp	.+0      	; 0x2110 <jj8>

00002110 <jj8>:
jj8:
	call	pad_100_delay // (100)
    2110:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <pad_100_delay>

	subi 	YL,1		// 1
    2114:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    2116:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    2118:	11 f0       	breq	.+4      	; 0x211e <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    211a:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <nloop>

0000211e <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    211e:	9f 91       	pop	r25
	pop		24			// 		2
    2120:	8f 91       	pop	r24
	pop		23			//		2
    2122:	7f 91       	pop	r23
	pop		22			//		2
    2124:	6f 91       	pop	r22
	pop		21			//		2
    2126:	5f 91       	pop	r21
	pop		20			//		2
    2128:	4f 91       	pop	r20
	pop		19			//		2
    212a:	3f 91       	pop	r19
	pop		18			//		2
    212c:	2f 91       	pop	r18
	pop		17			//		2
    212e:	1f 91       	pop	r17
	pop		16			//		2
    2130:	0f 91       	pop	r16
	pop		YH			//		2
    2132:	df 91       	pop	r29
	pop		YL			//		2
    2134:	cf 91       	pop	r28
	pop		XH			//		2
    2136:	bf 91       	pop	r27
	pop		XL			//		2
    2138:	af 91       	pop	r26
	pop		ZH			// 		2
    213a:	ff 91       	pop	r31
	pop		ZL			//		2
    213c:	ef 91       	pop	r30

	ret					//		4
    213e:	08 95       	ret

00002140 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    2140:	0f 93       	push	r16
	push	17
    2142:	1f 93       	push	r17
	push	18
    2144:	2f 93       	push	r18

	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    2146:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    2148:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    214a:	00 24       	eor	r0, r0

0000214c <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    214c:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    214e:	71 f0       	breq	.+28     	; 0x216c <in1>
	cpi		r24,0x01	; 1
    2150:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    2152:	79 f0       	breq	.+30     	; 0x2172 <in2>
	cpi		r24,0x02	; 2
    2154:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    2156:	81 f0       	breq	.+32     	; 0x2178 <in3>
	cpi		r24,0x03	; 3
    2158:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    215a:	89 f0       	breq	.+34     	; 0x217e <in4>
	cpi		r24,0x04	; 4
    215c:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    215e:	91 f0       	breq	.+36     	; 0x2184 <in5>
	cpi		r24,0x05	; 5
    2160:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    2162:	99 f0       	breq	.+38     	; 0x218a <in6>
	cpi		r24,0x06	; 6
    2164:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    2166:	a1 f0       	breq	.+40     	; 0x2190 <in7>
	cpi		r24,0x07	; 7
    2168:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    216a:	a9 f0       	breq	.+42     	; 0x2196 <in8>

0000216c <in1>:

in1:sbi 	M1			// Set output high
    216c:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    216e:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

00002172 <in2>:
in2:sbi 	M2
    2172:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    2174:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

00002178 <in3>:
in3:sbi 	M3	
    2178:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    217a:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

0000217e <in4>:
in4:sbi 	M4
    217e:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    2180:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

00002184 <in5>:
in5:sbi 	M5
    2184:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    2186:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

0000218a <in6>:
in6:sbi 	M6
    218a:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    218c:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

00002190 <in7>:
in7:sbi 	M7
    2190:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    2192:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

00002196 <in8>:
in8:sbi 	M8
    2196:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    2198:	0c 94 ce 10 	jmp	0x219c	; 0x219c <loopin>

0000219c <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    219c:	00 c0       	rjmp	.+0      	; 0x219e <loopin+0x2>
	rjmp .+0			// 2
    219e:	00 c0       	rjmp	.+0      	; 0x21a0 <loopin+0x4>
	rjmp .+0			// 2
    21a0:	00 c0       	rjmp	.+0      	; 0x21a2 <loopin+0x6>
	rjmp .+0			// 2
    21a2:	00 c0       	rjmp	.+0      	; 0x21a4 <loopin+0x8>
	rjmp .+0			// 2
    21a4:	00 c0       	rjmp	.+0      	; 0x21a6 <loopin+0xa>
	rjmp .+0			// 2
    21a6:	00 c0       	rjmp	.+0      	; 0x21a8 <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    21a8:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    21aa:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    21ac:	19 f4       	brne	.+6      	; 0x21b4 <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    21ae:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    21b0:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    21b2:	22 b9       	out	0x02, r18	; 2

000021b4 <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    21b4:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    21b6:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    21b8:	89 f7       	brne	.-30     	; 0x219c <loopin>

	pop		18
    21ba:	2f 91       	pop	r18
	pop		17			// Restore regs
    21bc:	1f 91       	pop	r17
	pop		16
    21be:	0f 91       	pop	r16
	ret	
    21c0:	08 95       	ret

000021c2 <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    21c2:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    21c4:	05 e6       	ldi	r16, 0x65	; 101

000021c6 <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    21c6:	00 c0       	rjmp	.+0      	; 0x21c8 <pwm_loop+0x2>
	rjmp .+0			// 2
    21c8:	00 c0       	rjmp	.+0      	; 0x21ca <pwm_loop+0x4>
	rjmp .+0			// 2
    21ca:	00 c0       	rjmp	.+0      	; 0x21cc <pwm_loop+0x6>
	subi	r16,1		// 1
    21cc:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    21ce:	d9 f7       	brne	.-10     	; 0x21c6 <pwm_loop>

000021d0 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    21d0:	0f 91       	pop	r16
	ret					//    4 to return
    21d2:	08 95       	ret

000021d4 <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    21d4:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    21d6:	09 e0       	ldi	r16, 0x09	; 9

000021d8 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    21d8:	00 c0       	rjmp	.+0      	; 0x21da <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    21da:	00 c0       	rjmp	.+0      	; 0x21dc <pad_100+0x4>
	rjmp .+0			// 2
    21dc:	00 c0       	rjmp	.+0      	; 0x21de <pad_100+0x6>

	subi 	16,1		// 1
    21de:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    21e0:	d9 f7       	brne	.-10     	; 0x21d8 <pad_100>

	nop					// 		1		Trim to precisely the right value
    21e2:	00 00       	nop
	rjmp .+0			// 		2
    21e4:	00 c0       	rjmp	.+0      	; 0x21e6 <pad_100+0xe>
	rjmp .+0			// 		2
    21e6:	00 c0       	rjmp	.+0      	; 0x21e8 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    21e8:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    21ea:	08 95       	ret

000021ec <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    21ec:	00 c0       	rjmp	.+0      	; 0x21ee <us_delay+0x2>
	rjmp .+0			// 2
    21ee:	00 c0       	rjmp	.+0      	; 0x21f0 <us_delay+0x4>
	rjmp .+0			// 2
    21f0:	00 c0       	rjmp	.+0      	; 0x21f2 <us_delay+0x6>
	rjmp .+0			// 2
    21f2:	00 c0       	rjmp	.+0      	; 0x21f4 <us_delay+0x8>
	ret					// 4 (16 cycles)
    21f4:	08 95       	ret

000021f6 <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    21f6:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    21f8:	a7 95       	ror	r26
	lsr		XH			// 1
    21fa:	b6 95       	lsr	r27
	ror		XL			// 1
    21fc:	a7 95       	ror	r26
	lsr		XH			// 1
    21fe:	b6 95       	lsr	r27
	ror		XL			// 1
    2200:	a7 95       	ror	r26
	ret					// 4
    2202:	08 95       	ret

00002204 <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    2204:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    2206:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    2208:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    220a:	31 f0       	breq	.+12     	; 0x2218 <LoopHighOut1>

0000220c <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    220c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <us_delay>
	dec 	YL			// 		1	1
    2210:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    2212:	09 f0       	breq	.+2      	; 0x2216 <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    2214:	fb cf       	rjmp	.-10     	; 0x220c <LoopHigh>

00002216 <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    2216:	00 c0       	rjmp	.+0      	; 0x2218 <LoopHighOut1>

00002218 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    2218:	00 00       	nop
    ret					// 4	4	4
    221a:	08 95       	ret

0000221c <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    221c:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    221e:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    2220:	31 f0       	breq	.+12     	; 0x222e <LoopLowOut1>

00002222 <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    2222:	0e 94 f6 10 	call	0x21ec	; 0x21ec <us_delay>
	dec 	YL			//		1	1
    2226:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    2228:	09 f0       	breq	.+2      	; 0x222c <LoopLowOut2>
	rjmp	LoopLow		//			2
    222a:	fb cf       	rjmp	.-10     	; 0x2222 <LoopLow>

0000222c <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    222c:	00 c0       	rjmp	.+0      	; 0x222e <LoopLowOut1>

0000222e <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    222e:	08 95       	ret

00002230 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	2c 97       	sbiw	r28, 0x0c	; 12
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61

	// Get data from MPU6050
	uint8_t Accs[6];

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    2244:	26 e0       	ldi	r18, 0x06	; 6
    2246:	ae 01       	movw	r20, r28
    2248:	4f 5f       	subi	r20, 0xFF	; 255
    224a:	5f 4f       	sbci	r21, 0xFF	; 255
    224c:	6b e3       	ldi	r22, 0x3B	; 59
    224e:	80 ed       	ldi	r24, 0xD0	; 208
    2250:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation
	RawADC[ROLL] = (Accs[0] << 8) + Accs[1];
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	98 2f       	mov	r25, r24
    225a:	88 27       	eor	r24, r24
    225c:	2a 81       	ldd	r18, Y+2	; 0x02
    225e:	82 0f       	add	r24, r18
    2260:	91 1d       	adc	r25, r1
    2262:	98 87       	std	Y+8, r25	; 0x08
    2264:	8f 83       	std	Y+7, r24	; 0x07
	RawADC[PITCH] = -((Accs[2] << 8) + Accs[3]);
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	98 2f       	mov	r25, r24
    226c:	88 27       	eor	r24, r24
    226e:	2c 81       	ldd	r18, Y+4	; 0x04
    2270:	82 0f       	add	r24, r18
    2272:	91 1d       	adc	r25, r1
    2274:	91 95       	neg	r25
    2276:	81 95       	neg	r24
    2278:	91 09       	sbc	r25, r1
    227a:	9a 87       	std	Y+10, r25	; 0x0a
    227c:	89 87       	std	Y+9, r24	; 0x09
	RawADC[YAW] = (Accs[4] << 8) + Accs[5];
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	98 2f       	mov	r25, r24
    2284:	88 27       	eor	r24, r24
    2286:	2e 81       	ldd	r18, Y+6	; 0x06
    2288:	82 0f       	add	r24, r18
    228a:	91 1d       	adc	r25, r1
    228c:	9c 87       	std	Y+12, r25	; 0x0c
    228e:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])] >> 6;
    2290:	20 91 5f 06 	lds	r18, 0x065F
    2294:	ae e4       	ldi	r26, 0x4E	; 78
    2296:	b5 e0       	ldi	r27, 0x05	; 5
    2298:	43 e0       	ldi	r20, 0x03	; 3
    229a:	24 02       	muls	r18, r20
    229c:	90 01       	movw	r18, r0
    229e:	11 24       	eor	r1, r1
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	22 52       	subi	r18, 0x22	; 34
    22a6:	3f 4f       	sbci	r19, 0xFF	; 255
    22a8:	f9 01       	movw	r30, r18
    22aa:	e8 0f       	add	r30, r24
    22ac:	f9 1f       	adc	r31, r25
    22ae:	e4 91       	lpm	r30, Z
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 0b       	sbc	r31, r31
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	4c 0f       	add	r20, r28
    22ba:	5d 1f       	adc	r21, r29
    22bc:	e4 0f       	add	r30, r20
    22be:	f5 1f       	adc	r31, r21
    22c0:	46 81       	ldd	r20, Z+6	; 0x06
    22c2:	57 81       	ldd	r21, Z+7	; 0x07
    22c4:	66 e0       	ldi	r22, 0x06	; 6
    22c6:	55 95       	asr	r21
    22c8:	47 95       	ror	r20
    22ca:	6a 95       	dec	r22
    22cc:	e1 f7       	brne	.-8      	; 0x22c6 <get_raw_accs+0x96>
    22ce:	4d 93       	st	X+, r20
    22d0:	5d 93       	st	X+, r21
    22d2:	01 96       	adiw	r24, 0x01	; 1
	RawADC[ROLL] = (Accs[0] << 8) + Accs[1];
	RawADC[PITCH] = -((Accs[2] << 8) + Accs[3]);
	RawADC[YAW] = (Accs[4] << 8) + Accs[5];

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    22d4:	83 30       	cpi	r24, 0x03	; 3
    22d6:	91 05       	cpc	r25, r1
    22d8:	39 f7       	brne	.-50     	; 0x22a8 <get_raw_accs+0x78>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])] >> 6;
	}
}
    22da:	2c 96       	adiw	r28, 0x0c	; 12
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	08 95       	ret

000022ec <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    22ec:	1f 93       	push	r17
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    22f2:	0e 94 18 11 	call	0x2230	; 0x2230 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    22f6:	80 91 de 07 	lds	r24, 0x07DE
    22fa:	80 fd       	sbrc	r24, 0
    22fc:	05 c0       	rjmp	.+10     	; 0x2308 <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    22fe:	10 92 c6 07 	sts	0x07C6, r1
    2302:	10 92 c5 07 	sts	0x07C5, r1
    2306:	0e c0       	rjmp	.+28     	; 0x2324 <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    2308:	80 91 c7 07 	lds	r24, 0x07C7
    230c:	90 91 c8 07 	lds	r25, 0x07C8
    2310:	20 91 cb 07 	lds	r18, 0x07CB
    2314:	30 91 cc 07 	lds	r19, 0x07CC
    2318:	82 1b       	sub	r24, r18
    231a:	93 0b       	sbc	r25, r19
    231c:	90 93 c6 07 	sts	0x07C6, r25
    2320:	80 93 c5 07 	sts	0x07C5, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    2324:	20 91 5f 06 	lds	r18, 0x065F
    2328:	c1 ec       	ldi	r28, 0xC1	; 193
    232a:	d7 e0       	ldi	r29, 0x07	; 7
    232c:	ae e4       	ldi	r26, 0x4E	; 78
    232e:	b5 e0       	ldi	r27, 0x05	; 5
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	28 02       	muls	r18, r24
    2334:	90 01       	movw	r18, r0
    2336:	11 24       	eor	r1, r1
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	24 53       	subi	r18, 0x34	; 52
    233e:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    2340:	69 91       	ld	r22, Y+
    2342:	79 91       	ld	r23, Y+
    2344:	f9 01       	movw	r30, r18
    2346:	e8 0f       	add	r30, r24
    2348:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    234a:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    234c:	4d 91       	ld	r20, X+
    234e:	5c 91       	ld	r21, X
    2350:	11 97       	sbiw	r26, 0x01	; 1
    2352:	46 1b       	sub	r20, r22
    2354:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    2356:	14 03       	mulsu	r17, r20
    2358:	b0 01       	movw	r22, r0
    235a:	15 9f       	mul	r17, r21
    235c:	70 0d       	add	r23, r0
    235e:	11 24       	eor	r1, r1
    2360:	6d 93       	st	X+, r22
    2362:	7d 93       	st	X+, r23
    2364:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    2366:	83 30       	cpi	r24, 0x03	; 3
    2368:	91 05       	cpc	r25, r1
    236a:	51 f7       	brne	.-44     	; 0x2340 <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    236c:	60 91 c7 07 	lds	r22, 0x07C7
    2370:	70 91 c8 07 	lds	r23, 0x07C8
    2374:	80 91 c5 07 	lds	r24, 0x07C5
    2378:	90 91 c6 07 	lds	r25, 0x07C6
    237c:	68 1b       	sub	r22, r24
    237e:	79 0b       	sbc	r23, r25
    2380:	88 27       	eor	r24, r24
    2382:	77 fd       	sbrc	r23, 7
    2384:	80 95       	com	r24
    2386:	98 2f       	mov	r25, r24
    2388:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    238c:	20 91 c7 05 	lds	r18, 0x05C7
    2390:	30 91 c8 05 	lds	r19, 0x05C8
    2394:	40 91 c9 05 	lds	r20, 0x05C9
    2398:	50 91 ca 05 	lds	r21, 0x05CA
    239c:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    23a0:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    23a4:	70 93 17 05 	sts	0x0517, r23
    23a8:	60 93 16 05 	sts	0x0516, r22
}
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	08 95       	ret

000023b4 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <CalibrateAcc+0x8>
    23bc:	00 d0       	rcall	.+0      	; 0x23be <CalibrateAcc+0xa>
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <CalibrateAcc+0xc>
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    23c4:	1a 82       	std	Y+2, r1	; 0x02
    23c6:	19 82       	std	Y+1, r1	; 0x01
    23c8:	1c 82       	std	Y+4, r1	; 0x04
    23ca:	1b 82       	std	Y+3, r1	; 0x03
    23cc:	1e 82       	std	Y+6, r1	; 0x06
    23ce:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    23d0:	81 11       	cpse	r24, r1
    23d2:	72 c0       	rjmp	.+228    	; 0x24b8 <CalibrateAcc+0x104>
    23d4:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    23d6:	0e 94 18 11 	call	0x2230	; 0x2230 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	20 91 4e 05 	lds	r18, 0x054E
    23e2:	30 91 4f 05 	lds	r19, 0x054F
    23e6:	82 0f       	add	r24, r18
    23e8:	93 1f       	adc	r25, r19
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	20 91 50 05 	lds	r18, 0x0550
    23f6:	30 91 51 05 	lds	r19, 0x0551
    23fa:	82 0f       	add	r24, r18
    23fc:	93 1f       	adc	r25, r19
    23fe:	9c 83       	std	Y+4, r25	; 0x04
    2400:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    2402:	8d 81       	ldd	r24, Y+5	; 0x05
    2404:	9e 81       	ldd	r25, Y+6	; 0x06
    2406:	20 91 52 05 	lds	r18, 0x0552
    240a:	30 91 53 05 	lds	r19, 0x0553
    240e:	82 0f       	add	r24, r18
    2410:	93 1f       	adc	r25, r19
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2416:	8f e4       	ldi	r24, 0x4F	; 79
    2418:	93 ec       	ldi	r25, 0xC3	; 195
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <CalibrateAcc+0x66>
    241e:	00 c0       	rjmp	.+0      	; 0x2420 <CalibrateAcc+0x6c>
    2420:	00 00       	nop
    2422:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    2424:	c1 f6       	brne	.-80     	; 0x23d6 <CalibrateAcc+0x22>
    2426:	fe 01       	movw	r30, r28
    2428:	31 96       	adiw	r30, 0x01	; 1
    242a:	9e 01       	movw	r18, r28
    242c:	29 5f       	subi	r18, 0xF9	; 249
    242e:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    2430:	80 81       	ld	r24, Z
    2432:	91 81       	ldd	r25, Z+1	; 0x01
    2434:	40 96       	adiw	r24, 0x10	; 16
    2436:	45 e0       	ldi	r20, 0x05	; 5
    2438:	95 95       	asr	r25
    243a:	87 95       	ror	r24
    243c:	4a 95       	dec	r20
    243e:	e1 f7       	brne	.-8      	; 0x2438 <CalibrateAcc+0x84>
    2440:	81 93       	st	Z+, r24
    2442:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    2444:	e2 17       	cp	r30, r18
    2446:	f3 07       	cpc	r31, r19
    2448:	99 f7       	brne	.-26     	; 0x2430 <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	90 93 c2 07 	sts	0x07C2, r25
    2452:	80 93 c1 07 	sts	0x07C1, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	90 93 c4 07 	sts	0x07C4, r25
    245e:	80 93 c3 07 	sts	0x07C3, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2462:	80 91 5f 06 	lds	r24, 0x065F
    2466:	99 27       	eor	r25, r25
    2468:	87 fd       	sbrc	r24, 7
    246a:	90 95       	com	r25
    246c:	fc 01       	movw	r30, r24
    246e:	ee 0f       	add	r30, r30
    2470:	ff 1f       	adc	r31, r31
    2472:	e8 0f       	add	r30, r24
    2474:	f9 1f       	adc	r31, r25
    2476:	e2 53       	subi	r30, 0x32	; 50
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	44 91       	lpm	r20, Z
    247c:	2d 81       	ldd	r18, Y+5	; 0x05
    247e:	3e 81       	ldd	r19, Y+6	; 0x06
    2480:	42 03       	mulsu	r20, r18
    2482:	c0 01       	movw	r24, r0
    2484:	43 9f       	mul	r20, r19
    2486:	90 0d       	add	r25, r0
    2488:	11 24       	eor	r1, r1
    248a:	90 93 c8 07 	sts	0x07C8, r25
    248e:	80 93 c7 07 	sts	0x07C7, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    2492:	80 91 de 07 	lds	r24, 0x07DE
    2496:	82 60       	ori	r24, 0x02	; 2
    2498:	80 93 de 07 	sts	0x07DE, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    249c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>
		LED1 = 1;
    24a0:	2b 9a       	sbi	0x05, 3	; 5
    24a2:	9f e7       	ldi	r25, 0x7F	; 127
    24a4:	24 e8       	ldi	r18, 0x84	; 132
    24a6:	4e e1       	ldi	r20, 0x1E	; 30
    24a8:	91 50       	subi	r25, 0x01	; 1
    24aa:	20 40       	sbci	r18, 0x00	; 0
    24ac:	40 40       	sbci	r20, 0x00	; 0
    24ae:	e1 f7       	brne	.-8      	; 0x24a8 <CalibrateAcc+0xf4>
    24b0:	00 c0       	rjmp	.+0      	; 0x24b2 <CalibrateAcc+0xfe>
    24b2:	00 00       	nop
		_delay_ms(500);
		LED1 = 0;
    24b4:	2b 98       	cbi	0x05, 3	; 5
    24b6:	76 c0       	rjmp	.+236    	; 0x25a4 <CalibrateAcc+0x1f0>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    24b8:	80 91 de 07 	lds	r24, 0x07DE
    24bc:	81 ff       	sbrs	r24, 1
    24be:	72 c0       	rjmp	.+228    	; 0x25a4 <CalibrateAcc+0x1f0>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    24c0:	10 92 ca 07 	sts	0x07CA, r1
    24c4:	10 92 c9 07 	sts	0x07C9, r1
    24c8:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    24ca:	0e 94 18 11 	call	0x2230	; 0x2230 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    24ce:	80 91 c9 07 	lds	r24, 0x07C9
    24d2:	90 91 ca 07 	lds	r25, 0x07CA
    24d6:	20 91 52 05 	lds	r18, 0x0552
    24da:	30 91 53 05 	lds	r19, 0x0553
    24de:	82 0f       	add	r24, r18
    24e0:	93 1f       	adc	r25, r19
    24e2:	90 93 ca 07 	sts	0x07CA, r25
    24e6:	80 93 c9 07 	sts	0x07C9, r24
    24ea:	8f e4       	ldi	r24, 0x4F	; 79
    24ec:	93 ec       	ldi	r25, 0xC3	; 195
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <CalibrateAcc+0x13a>
    24f2:	00 c0       	rjmp	.+0      	; 0x24f4 <CalibrateAcc+0x140>
    24f4:	00 00       	nop
    24f6:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    24f8:	41 f7       	brne	.-48     	; 0x24ca <CalibrateAcc+0x116>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    24fa:	80 91 5f 06 	lds	r24, 0x065F
    24fe:	99 27       	eor	r25, r25
    2500:	87 fd       	sbrc	r24, 7
    2502:	90 95       	com	r25
    2504:	fc 01       	movw	r30, r24
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	e8 0f       	add	r30, r24
    250c:	f9 1f       	adc	r31, r25
    250e:	e2 53       	subi	r30, 0x32	; 50
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    2514:	20 91 c9 07 	lds	r18, 0x07C9
    2518:	30 91 ca 07 	lds	r19, 0x07CA
    251c:	20 5f       	subi	r18, 0xF0	; 240
    251e:	3f 4f       	sbci	r19, 0xFF	; 255
    2520:	15 e0       	ldi	r17, 0x05	; 5
    2522:	35 95       	asr	r19
    2524:	27 95       	ror	r18
    2526:	1a 95       	dec	r17
    2528:	e1 f7       	brne	.-8      	; 0x2522 <CalibrateAcc+0x16e>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    252a:	42 03       	mulsu	r20, r18
    252c:	c0 01       	movw	r24, r0
    252e:	43 9f       	mul	r20, r19
    2530:	90 0d       	add	r25, r0
    2532:	11 24       	eor	r1, r1
    2534:	90 93 ca 07 	sts	0x07CA, r25
    2538:	80 93 c9 07 	sts	0x07C9, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    253c:	97 ff       	sbrs	r25, 7
    253e:	32 c0       	rjmp	.+100    	; 0x25a4 <CalibrateAcc+0x1f0>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    2540:	20 91 c7 07 	lds	r18, 0x07C7
    2544:	30 91 c8 07 	lds	r19, 0x07C8
    2548:	a9 01       	movw	r20, r18
    254a:	48 1b       	sub	r20, r24
    254c:	59 0b       	sbc	r21, r25
    254e:	ca 01       	movw	r24, r20
    2550:	95 95       	asr	r25
    2552:	87 95       	ror	r24
    2554:	90 93 cc 07 	sts	0x07CC, r25
    2558:	80 93 cb 07 	sts	0x07CB, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    255c:	28 1b       	sub	r18, r24
    255e:	39 0b       	sbc	r19, r25
    2560:	30 93 c6 07 	sts	0x07C6, r19
    2564:	20 93 c5 07 	sts	0x07C5, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    2568:	80 91 de 07 	lds	r24, 0x07DE
    256c:	81 60       	ori	r24, 0x01	; 1
    256e:	80 93 de 07 	sts	0x07DE, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    2572:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>
				LED1 = 1;
    2576:	2b 9a       	sbi	0x05, 3	; 5
    2578:	5f e7       	ldi	r21, 0x7F	; 127
    257a:	84 e8       	ldi	r24, 0x84	; 132
    257c:	9e e1       	ldi	r25, 0x1E	; 30
    257e:	51 50       	subi	r21, 0x01	; 1
    2580:	80 40       	sbci	r24, 0x00	; 0
    2582:	90 40       	sbci	r25, 0x00	; 0
    2584:	e1 f7       	brne	.-8      	; 0x257e <CalibrateAcc+0x1ca>
    2586:	00 c0       	rjmp	.+0      	; 0x2588 <CalibrateAcc+0x1d4>
    2588:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    258a:	2b 98       	cbi	0x05, 3	; 5
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    258c:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
	}
}
    258e:	26 96       	adiw	r28, 0x06	; 6
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
				LED1 = 1;
				_delay_ms(500);
				LED1 = 0;
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    25a0:	0c 94 a4 37 	jmp	0x6f48	; 0x6f48 <menu_beep>
			}
		}
	}
}
    25a4:	26 96       	adiw	r28, 0x06	; 6
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	08 95       	ret

000025b8 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	6b e6       	ldi	r22, 0x6B	; 107
    25bc:	80 ed       	ldi	r24, 0xD0	; 208
    25be:	0e 94 39 2a 	call	0x5472	; 0x5472 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    25c2:	48 e0       	ldi	r20, 0x08	; 8
    25c4:	6c e1       	ldi	r22, 0x1C	; 28
    25c6:	80 ed       	ldi	r24, 0xD0	; 208
    25c8:	0c 94 39 2a 	jmp	0x5472	; 0x5472 <writeI2Cbyte>

000025cc <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    25cc:	8f ef       	ldi	r24, 0xFF	; 255
    25ce:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    25d2:	10 92 7b 00 	sts	0x007B, r1
    25d6:	08 95       	ret

000025d8 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    25d8:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    25dc:	86 ec       	ldi	r24, 0xC6	; 198
    25de:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    25e2:	80 91 7a 00 	lds	r24, 0x007A
    25e6:	86 fd       	sbrc	r24, 6
    25e8:	fc cf       	rjmp	.-8      	; 0x25e2 <read_adc+0xa>
}
    25ea:	08 95       	ret

000025ec <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    25ec:	cf 92       	push	r12
    25ee:	df 92       	push	r13
    25f0:	ef 92       	push	r14
    25f2:	0f 93       	push	r16
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    25f8:	cb e0       	ldi	r28, 0x0B	; 11
    25fa:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    25fc:	1f 9b       	sbis	0x03, 7	; 3
    25fe:	7f c0       	rjmp	.+254    	; 0x26fe <Display_balance+0x112>
	{
		// Read accs
		ReadAcc();
    2600:	0e 94 76 11 	call	0x22ec	; 0x22ec <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	cb 01       	movw	r24, r22
    260a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <imu_update>
    260e:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    2610:	20 97       	sbiw	r28, 0x00	; 0
    2612:	a1 f7       	brne	.-24     	; 0x25fc <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	52 e4       	ldi	r21, 0x42	; 66
    261c:	60 91 c3 05 	lds	r22, 0x05C3
    2620:	70 91 c4 05 	lds	r23, 0x05C4
    2624:	80 91 c5 05 	lds	r24, 0x05C5
    2628:	90 91 c6 05 	lds	r25, 0x05C6
    262c:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    2630:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    2634:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	52 e4       	ldi	r21, 0x42	; 66
    263e:	60 91 bf 05 	lds	r22, 0x05BF
    2642:	70 91 c0 05 	lds	r23, 0x05C0
    2646:	80 91 c1 05 	lds	r24, 0x05C1
    264a:	90 91 c2 05 	lds	r25, 0x05C2
    264e:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    2652:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    2656:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    2658:	d7 fd       	sbrc	r29, 7
    265a:	06 c0       	rjmp	.+12     	; 0x2668 <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    265c:	c1 34       	cpi	r28, 0x41	; 65
    265e:	d1 05       	cpc	r29, r1
    2660:	2c f0       	brlt	.+10     	; 0x266c <Display_balance+0x80>
    2662:	c0 e4       	ldi	r28, 0x40	; 64
    2664:	d0 e0       	ldi	r29, 0x00	; 0
    2666:	02 c0       	rjmp	.+4      	; 0x266c <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    2668:	c0 e0       	ldi	r28, 0x00	; 0
    266a:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    266c:	d7 fc       	sbrc	r13, 7
    266e:	08 c0       	rjmp	.+16     	; 0x2680 <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    2670:	81 e8       	ldi	r24, 0x81	; 129
    2672:	c8 16       	cp	r12, r24
    2674:	d1 04       	cpc	r13, r1
    2676:	34 f0       	brlt	.+12     	; 0x2684 <Display_balance+0x98>
    2678:	80 e8       	ldi	r24, 0x80	; 128
    267a:	c8 2e       	mov	r12, r24
    267c:	d1 2c       	mov	r13, r1
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    2680:	c1 2c       	mov	r12, r1
    2682:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    2684:	27 e3       	ldi	r18, 0x37	; 55
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	42 e0       	ldi	r20, 0x02	; 2
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	69 e0       	ldi	r22, 0x09	; 9
    268e:	71 e0       	ldi	r23, 0x01	; 1
    2690:	8c e0       	ldi	r24, 0x0C	; 12
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    2698:	ee 24       	eor	r14, r14
    269a:	e3 94       	inc	r14
    269c:	00 e4       	ldi	r16, 0x40	; 64
    269e:	20 e8       	ldi	r18, 0x80	; 128
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	91 e0       	ldi	r25, 0x01	; 1
    26a8:	0e 94 03 27 	call	0x4e06	; 0x4e06 <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    26ac:	05 e1       	ldi	r16, 0x15	; 21
    26ae:	25 e1       	ldi	r18, 0x15	; 21
    26b0:	46 e1       	ldi	r20, 0x16	; 22
    26b2:	66 e3       	ldi	r22, 0x36	; 54
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	91 e0       	ldi	r25, 0x01	; 1
    26b8:	0e 94 03 27 	call	0x4e06	; 0x4e06 <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    26bc:	08 e3       	ldi	r16, 0x38	; 56
    26be:	20 e4       	ldi	r18, 0x40	; 64
    26c0:	48 e0       	ldi	r20, 0x08	; 8
    26c2:	60 e4       	ldi	r22, 0x40	; 64
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	91 e0       	ldi	r25, 0x01	; 1
    26c8:	0e 94 65 26 	call	0x4cca	; 0x4cca <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    26cc:	00 e2       	ldi	r16, 0x20	; 32
    26ce:	20 e6       	ldi	r18, 0x60	; 96
    26d0:	40 e2       	ldi	r20, 0x20	; 32
    26d2:	60 e2       	ldi	r22, 0x20	; 32
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	91 e0       	ldi	r25, 0x01	; 1
    26d8:	0e 94 65 26 	call	0x4cca	; 0x4cca <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    26dc:	01 e0       	ldi	r16, 0x01	; 1
    26de:	28 e0       	ldi	r18, 0x08	; 8
    26e0:	4c 2f       	mov	r20, r28
    26e2:	6c 2d       	mov	r22, r12
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	91 e0       	ldi	r25, 0x01	; 1
    26e8:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
			clear_buffer(buffer);
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	91 e0       	ldi	r25, 0x01	; 1
    26f8:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
    26fc:	7d cf       	rjmp	.-262    	; 0x25f8 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	0f 91       	pop	r16
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	08 95       	ret

0000270c <add_log>:
// Code
//************************************************************

void add_log(uint8_t error)
{
	Config.Log[Config.log_pointer] = error;
    270c:	90 91 e1 07 	lds	r25, 0x07E1
    2710:	e9 2f       	mov	r30, r25
    2712:	ff 27       	eor	r31, r31
    2714:	e7 fd       	sbrc	r30, 7
    2716:	f0 95       	com	r31
    2718:	ee 51       	subi	r30, 0x1E	; 30
    271a:	f8 4f       	sbci	r31, 0xF8	; 248
    271c:	80 83       	st	Z, r24
	Config.log_pointer++;
    271e:	9f 5f       	subi	r25, 0xFF	; 255
	
	if (Config.log_pointer >= (LOGLENGTH-1))
    2720:	93 31       	cpi	r25, 0x13	; 19
    2722:	1c f4       	brge	.+6      	; 0x272a <add_log+0x1e>
//************************************************************

void add_log(uint8_t error)
{
	Config.Log[Config.log_pointer] = error;
	Config.log_pointer++;
    2724:	90 93 e1 07 	sts	0x07E1, r25
    2728:	03 c0       	rjmp	.+6      	; 0x2730 <add_log+0x24>
	
	if (Config.log_pointer >= (LOGLENGTH-1))
	{
		Config.log_pointer = (LOGLENGTH-1);
    272a:	83 e1       	ldi	r24, 0x13	; 19
    272c:	80 93 e1 07 	sts	0x07E1, r24
	}
	
	// Save log and log pointer
	Save_Config_to_EEPROM();
    2730:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>

00002734 <menu_log>:
}

void menu_log(void)
{
    2734:	af 92       	push	r10
    2736:	bf 92       	push	r11
    2738:	cf 92       	push	r12
    273a:	df 92       	push	r13
    273c:	ef 92       	push	r14
    273e:	ff 92       	push	r15
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
	int8_t	log_start = 0;
    2748:	b1 2c       	mov	r11, r1
	while(BUTTON1 != 0)
	{
		if (BUTTON4 == 0)
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    274a:	92 ee       	ldi	r25, 0xE2	; 226
    274c:	c9 2e       	mov	r12, r25
    274e:	97 e0       	ldi	r25, 0x07	; 7
    2750:	d9 2e       	mov	r13, r25
    2752:	24 e1       	ldi	r18, 0x14	; 20
    2754:	a2 2e       	mov	r10, r18

void menu_log(void)
{
	int8_t	log_start = 0;
	
	while(BUTTON1 != 0)
    2756:	1f 9b       	sbis	0x03, 7	; 3
    2758:	4d c0       	rjmp	.+154    	; 0x27f4 <menu_log+0xc0>
	{
		if (BUTTON4 == 0)
    275a:	1c 99       	sbic	0x03, 4	; 3
    275c:	09 c0       	rjmp	.+18     	; 0x2770 <menu_log+0x3c>
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    275e:	f6 01       	movw	r30, r12
    2760:	2a 2d       	mov	r18, r10
    2762:	11 92       	st	Z+, r1
    2764:	2a 95       	dec	r18
    2766:	e9 f7       	brne	.-6      	; 0x2762 <menu_log+0x2e>
			Config.log_pointer = 0;
    2768:	10 92 e1 07 	sts	0x07E1, r1

			// Save log and log pointer
			Save_Config_to_EEPROM();			
    276c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>
		}
		
		if (BUTTON2 == 0)
    2770:	1e 99       	sbic	0x03, 6	; 3
    2772:	03 c0       	rjmp	.+6      	; 0x277a <menu_log+0x46>
		{
			log_start--;
    2774:	ba 94       	dec	r11
    2776:	b7 fc       	sbrc	r11, 7
    2778:	b1 2c       	mov	r11, r1
			{
				log_start = 0;
			}
		}

		if (BUTTON3 == 0)
    277a:	1d 99       	sbic	0x03, 5	; 3
    277c:	06 c0       	rjmp	.+12     	; 0x278a <menu_log+0x56>
		{
			log_start++;
    277e:	b3 94       	inc	r11
			
			if (log_start >= (LOGLENGTH - 5))
    2780:	8e e0       	ldi	r24, 0x0E	; 14
    2782:	8b 15       	cp	r24, r11
    2784:	14 f4       	brge	.+4      	; 0x278a <menu_log+0x56>
			{
				log_start = 15;
    2786:	8f e0       	ldi	r24, 0x0F	; 15
    2788:	b8 2e       	mov	r11, r24
    278a:	00 e0       	ldi	r16, 0x00	; 0
    278c:	10 e0       	ldi	r17, 0x00	; 0
    278e:	c0 e0       	ldi	r28, 0x00	; 0
    2790:	d0 e0       	ldi	r29, 0x00	; 0
    2792:	eb 2c       	mov	r14, r11
    2794:	ff 24       	eor	r15, r15
    2796:	e7 fc       	sbrc	r14, 7
    2798:	f0 94       	com	r15
    279a:	f7 01       	movw	r30, r14
    279c:	e9 52       	subi	r30, 0x29	; 41
    279e:	fa 4f       	sbci	r31, 0xFA	; 250
    27a0:	7f 01       	movw	r14, r30
    27a2:	f7 01       	movw	r30, r14
    27a4:	ec 0f       	add	r30, r28
    27a6:	fd 1f       	adc	r31, r29
    27a8:	e5 5f       	subi	r30, 0xF5	; 245
    27aa:	fd 4f       	sbci	r31, 0xFD	; 253
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
    27ac:	80 81       	ld	r24, Z
    27ae:	99 27       	eor	r25, r25
    27b0:	87 fd       	sbrc	r24, 7
    27b2:	90 95       	com	r25
    27b4:	98 01       	movw	r18, r16
    27b6:	40 e0       	ldi	r20, 0x00	; 0
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	67 e9       	ldi	r22, 0x97	; 151
    27bc:	7c e0       	ldi	r23, 0x0C	; 12
    27be:	85 5e       	subi	r24, 0xE5	; 229
    27c0:	9e 4f       	sbci	r25, 0xFE	; 254
    27c2:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
    27c6:	21 96       	adiw	r28, 0x01	; 1
    27c8:	06 5f       	subi	r16, 0xF6	; 246
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
				log_start = 15;
			}
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
    27cc:	c5 30       	cpi	r28, 0x05	; 5
    27ce:	d1 05       	cpc	r29, r1
    27d0:	41 f7       	brne	.-48     	; 0x27a2 <menu_log+0x6e>
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
		}

		print_menu_frame(LOG);
    27d2:	83 e0       	ldi	r24, 0x03	; 3
    27d4:	0e 94 e5 34 	call	0x69ca	; 0x69ca <print_menu_frame>
		clear_buffer(buffer);
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	91 e0       	ldi	r25, 0x01	; 1
    27dc:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
    27e0:	ff e7       	ldi	r31, 0x7F	; 127
    27e2:	2a e1       	ldi	r18, 0x1A	; 26
    27e4:	86 e0       	ldi	r24, 0x06	; 6
    27e6:	f1 50       	subi	r31, 0x01	; 1
    27e8:	20 40       	sbci	r18, 0x00	; 0
    27ea:	80 40       	sbci	r24, 0x00	; 0
    27ec:	e1 f7       	brne	.-8      	; 0x27e6 <menu_log+0xb2>
    27ee:	00 c0       	rjmp	.+0      	; 0x27f0 <menu_log+0xbc>
    27f0:	00 00       	nop
    27f2:	b1 cf       	rjmp	.-158    	; 0x2756 <menu_log+0x22>
		
		_delay_ms(100);
	}
}
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	ff 90       	pop	r15
    27fe:	ef 90       	pop	r14
    2800:	df 90       	pop	r13
    2802:	cf 90       	pop	r12
    2804:	bf 90       	pop	r11
    2806:	af 90       	pop	r10
    2808:	08 95       	ret

0000280a <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    280a:	0e 94 ac 34 	call	0x6958	; 0x6958 <init_int>
	
	while(BUTTON1 != 0)
    280e:	1f 9b       	sbis	0x03, 7	; 3
    2810:	fa c0       	rjmp	.+500    	; 0x2a06 <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    2812:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    2814:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <CenterSticks>
		}

		RxGetChannels();
    2818:	0e 94 d5 4b 	call	0x97aa	; 0x97aa <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	50 e0       	ldi	r21, 0x00	; 0
    2824:	67 e9       	ldi	r22, 0x97	; 151
    2826:	7c e0       	ldi	r23, 0x0C	; 12
    2828:	82 e7       	ldi	r24, 0x72	; 114
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    2830:	2a e0       	ldi	r18, 0x0A	; 10
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	67 e9       	ldi	r22, 0x97	; 151
    283a:	7c e0       	ldi	r23, 0x0C	; 12
    283c:	80 e2       	ldi	r24, 0x20	; 32
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    2844:	24 e1       	ldi	r18, 0x14	; 20
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	67 e9       	ldi	r22, 0x97	; 151
    284e:	7c e0       	ldi	r23, 0x0C	; 12
    2850:	83 e7       	ldi	r24, 0x73	; 115
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    2858:	2e e1       	ldi	r18, 0x1E	; 30
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	67 e9       	ldi	r22, 0x97	; 151
    2862:	7c e0       	ldi	r23, 0x0C	; 12
    2864:	83 e2       	ldi	r24, 0x23	; 35
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	46 e4       	ldi	r20, 0x46	; 70
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	67 e9       	ldi	r22, 0x97	; 151
    2876:	7c e0       	ldi	r23, 0x0C	; 12
    2878:	8d e6       	ldi	r24, 0x6D	; 109
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    2880:	2a e0       	ldi	r18, 0x0A	; 10
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	46 e4       	ldi	r20, 0x46	; 70
    2886:	50 e0       	ldi	r21, 0x00	; 0
    2888:	67 e9       	ldi	r22, 0x97	; 151
    288a:	7c e0       	ldi	r23, 0x0C	; 12
    288c:	8e e6       	ldi	r24, 0x6E	; 110
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    2894:	24 e1       	ldi	r18, 0x14	; 20
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	46 e4       	ldi	r20, 0x46	; 70
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	67 e9       	ldi	r22, 0x97	; 151
    289e:	7c e0       	ldi	r23, 0x0C	; 12
    28a0:	8f e6       	ldi	r24, 0x6F	; 111
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    28a8:	2e e1       	ldi	r18, 0x1E	; 30
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	46 e4       	ldi	r20, 0x46	; 70
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	67 e9       	ldi	r22, 0x97	; 151
    28b2:	7c e0       	ldi	r23, 0x0C	; 12
    28b4:	80 e7       	ldi	r24, 0x70	; 112
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    28bc:	80 91 82 08 	lds	r24, 0x0882
    28c0:	90 91 83 08 	lds	r25, 0x0883
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    28c4:	4a e0       	ldi	r20, 0x0A	; 10
    28c6:	6a e7       	ldi	r22, 0x7A	; 122
    28c8:	75 e0       	ldi	r23, 0x05	; 5
    28ca:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	45 e2       	ldi	r20, 0x25	; 37
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	67 e9       	ldi	r22, 0x97	; 151
    28d8:	7c e0       	ldi	r23, 0x0C	; 12
    28da:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    28de:	80 91 86 08 	lds	r24, 0x0886
    28e2:	90 91 87 08 	lds	r25, 0x0887
    28e6:	4a e0       	ldi	r20, 0x0A	; 10
    28e8:	6a e7       	ldi	r22, 0x7A	; 122
    28ea:	75 e0       	ldi	r23, 0x05	; 5
    28ec:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    28f0:	2a e0       	ldi	r18, 0x0A	; 10
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	45 e2       	ldi	r20, 0x25	; 37
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	67 e9       	ldi	r22, 0x97	; 151
    28fa:	7c e0       	ldi	r23, 0x0C	; 12
    28fc:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    2900:	80 91 88 08 	lds	r24, 0x0888
    2904:	90 91 89 08 	lds	r25, 0x0889
    2908:	4a e0       	ldi	r20, 0x0A	; 10
    290a:	6a e7       	ldi	r22, 0x7A	; 122
    290c:	75 e0       	ldi	r23, 0x05	; 5
    290e:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    2912:	24 e1       	ldi	r18, 0x14	; 20
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	45 e2       	ldi	r20, 0x25	; 37
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	67 e9       	ldi	r22, 0x97	; 151
    291c:	7c e0       	ldi	r23, 0x0C	; 12
    291e:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    2922:	80 91 8a 08 	lds	r24, 0x088A
    2926:	90 91 8b 08 	lds	r25, 0x088B
    292a:	4a e0       	ldi	r20, 0x0A	; 10
    292c:	6a e7       	ldi	r22, 0x7A	; 122
    292e:	75 e0       	ldi	r23, 0x05	; 5
    2930:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    2934:	2e e1       	ldi	r18, 0x1E	; 30
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	45 e2       	ldi	r20, 0x25	; 37
    293a:	50 e0       	ldi	r21, 0x00	; 0
    293c:	67 e9       	ldi	r22, 0x97	; 151
    293e:	7c e0       	ldi	r23, 0x0C	; 12
    2940:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    2944:	80 91 8c 08 	lds	r24, 0x088C
    2948:	90 91 8d 08 	lds	r25, 0x088D
    294c:	4a e0       	ldi	r20, 0x0A	; 10
    294e:	6a e7       	ldi	r22, 0x7A	; 122
    2950:	75 e0       	ldi	r23, 0x05	; 5
    2952:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	44 e6       	ldi	r20, 0x64	; 100
    295c:	50 e0       	ldi	r21, 0x00	; 0
    295e:	67 e9       	ldi	r22, 0x97	; 151
    2960:	7c e0       	ldi	r23, 0x0C	; 12
    2962:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    2966:	80 91 8e 08 	lds	r24, 0x088E
    296a:	90 91 8f 08 	lds	r25, 0x088F
    296e:	4a e0       	ldi	r20, 0x0A	; 10
    2970:	6a e7       	ldi	r22, 0x7A	; 122
    2972:	75 e0       	ldi	r23, 0x05	; 5
    2974:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    2978:	2a e0       	ldi	r18, 0x0A	; 10
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	44 e6       	ldi	r20, 0x64	; 100
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	67 e9       	ldi	r22, 0x97	; 151
    2982:	7c e0       	ldi	r23, 0x0C	; 12
    2984:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    2988:	80 91 90 08 	lds	r24, 0x0890
    298c:	90 91 91 08 	lds	r25, 0x0891
    2990:	4a e0       	ldi	r20, 0x0A	; 10
    2992:	6a e7       	ldi	r22, 0x7A	; 122
    2994:	75 e0       	ldi	r23, 0x05	; 5
    2996:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    299a:	24 e1       	ldi	r18, 0x14	; 20
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	44 e6       	ldi	r20, 0x64	; 100
    29a0:	50 e0       	ldi	r21, 0x00	; 0
    29a2:	67 e9       	ldi	r22, 0x97	; 151
    29a4:	7c e0       	ldi	r23, 0x0C	; 12
    29a6:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    29aa:	80 91 92 08 	lds	r24, 0x0892
    29ae:	90 91 93 08 	lds	r25, 0x0893
    29b2:	4a e0       	ldi	r20, 0x0A	; 10
    29b4:	6a e7       	ldi	r22, 0x7A	; 122
    29b6:	75 e0       	ldi	r23, 0x05	; 5
    29b8:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    29bc:	2e e1       	ldi	r18, 0x1E	; 30
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	44 e6       	ldi	r20, 0x64	; 100
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	67 e9       	ldi	r22, 0x97	; 151
    29c6:	7c e0       	ldi	r23, 0x0C	; 12
    29c8:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    29cc:	29 e3       	ldi	r18, 0x39	; 57
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	69 e0       	ldi	r22, 0x09	; 9
    29d6:	71 e0       	ldi	r23, 0x01	; 1
    29d8:	8c e0       	ldi	r24, 0x0C	; 12
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    29e0:	27 e3       	ldi	r18, 0x37	; 55
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	4e e6       	ldi	r20, 0x6E	; 110
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	67 e9       	ldi	r22, 0x97	; 151
    29ea:	7c e0       	ldi	r23, 0x0C	; 12
    29ec:	8c e3       	ldi	r24, 0x3C	; 60
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	91 e0       	ldi	r25, 0x01	; 1
    29f8:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
		clear_buffer(buffer);
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	91 e0       	ldi	r25, 0x01	; 1
    2a00:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
    2a04:	04 cf       	rjmp	.-504    	; 0x280e <Display_rcinput+0x4>
	}
}
    2a06:	08 95       	ret

00002a08 <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    2a08:	cf 93       	push	r28
	bool	first_time = true;
	
	clear_buffer(buffer);
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	91 e0       	ldi	r25, 0x01	; 1
    2a0e:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    2a12:	c1 e0       	ldi	r28, 0x01	; 1
	
	clear_buffer(buffer);
	
	// While BACK not pressed
	while(BUTTON1 != 0)
    2a14:	1f 9b       	sbis	0x03, 7	; 3
    2a16:	e7 c0       	rjmp	.+462    	; 0x2be6 <Display_sensors+0x1de>
	{
		ReadGyros();
    2a18:	0e 94 c1 28 	call	0x5182	; 0x5182 <ReadGyros>
		ReadAcc();
    2a1c:	0e 94 76 11 	call	0x22ec	; 0x22ec <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	45 e2       	ldi	r20, 0x25	; 37
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	67 e9       	ldi	r22, 0x97	; 151
    2a2a:	7c e0       	ldi	r23, 0x0C	; 12
    2a2c:	8a e1       	ldi	r24, 0x1A	; 26
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4d e4       	ldi	r20, 0x4D	; 77
    2a3a:	50 e0       	ldi	r21, 0x00	; 0
    2a3c:	67 e9       	ldi	r22, 0x97	; 151
    2a3e:	7c e0       	ldi	r23, 0x0C	; 12
    2a40:	8e e1       	ldi	r24, 0x1E	; 30
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    2a48:	2d e0       	ldi	r18, 0x0D	; 13
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	45 e0       	ldi	r20, 0x05	; 5
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	67 e9       	ldi	r22, 0x97	; 151
    2a52:	7c e0       	ldi	r23, 0x0C	; 12
    2a54:	8b e1       	ldi	r24, 0x1B	; 27
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    2a5c:	27 e1       	ldi	r18, 0x17	; 23
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	45 e0       	ldi	r20, 0x05	; 5
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	67 e9       	ldi	r22, 0x97	; 151
    2a66:	7c e0       	ldi	r23, 0x0C	; 12
    2a68:	8c e1       	ldi	r24, 0x1C	; 28
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    2a70:	21 e2       	ldi	r18, 0x21	; 33
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	45 e0       	ldi	r20, 0x05	; 5
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	67 e9       	ldi	r22, 0x97	; 151
    2a7a:	7c e0       	ldi	r23, 0x0C	; 12
    2a7c:	8d e1       	ldi	r24, 0x1D	; 29
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
    2a84:	4a e0       	ldi	r20, 0x0A	; 10
    2a86:	6a e7       	ldi	r22, 0x7A	; 122
    2a88:	75 e0       	ldi	r23, 0x05	; 5
    2a8a:	80 91 93 05 	lds	r24, 0x0593
    2a8e:	90 91 94 05 	lds	r25, 0x0594
    2a92:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    2a96:	2d e0       	ldi	r18, 0x0D	; 13
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	48 e2       	ldi	r20, 0x28	; 40
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	67 e9       	ldi	r22, 0x97	; 151
    2aa0:	7c e0       	ldi	r23, 0x0C	; 12
    2aa2:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
    2aa6:	4a e0       	ldi	r20, 0x0A	; 10
    2aa8:	6a e7       	ldi	r22, 0x7A	; 122
    2aaa:	75 e0       	ldi	r23, 0x05	; 5
    2aac:	80 91 95 05 	lds	r24, 0x0595
    2ab0:	90 91 96 05 	lds	r25, 0x0596
    2ab4:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    2ab8:	27 e1       	ldi	r18, 0x17	; 23
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	48 e2       	ldi	r20, 0x28	; 40
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	67 e9       	ldi	r22, 0x97	; 151
    2ac2:	7c e0       	ldi	r23, 0x0C	; 12
    2ac4:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
    2ac8:	4a e0       	ldi	r20, 0x0A	; 10
    2aca:	6a e7       	ldi	r22, 0x7A	; 122
    2acc:	75 e0       	ldi	r23, 0x05	; 5
    2ace:	80 91 97 05 	lds	r24, 0x0597
    2ad2:	90 91 98 05 	lds	r25, 0x0598
    2ad6:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2ada:	21 e2       	ldi	r18, 0x21	; 33
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	48 e2       	ldi	r20, 0x28	; 40
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	67 e9       	ldi	r22, 0x97	; 151
    2ae4:	7c e0       	ldi	r23, 0x0C	; 12
    2ae6:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
    2aea:	4a e0       	ldi	r20, 0x0A	; 10
    2aec:	6a e7       	ldi	r22, 0x7A	; 122
    2aee:	75 e0       	ldi	r23, 0x05	; 5
    2af0:	80 91 4e 05 	lds	r24, 0x054E
    2af4:	90 91 4f 05 	lds	r25, 0x054F
    2af8:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    2afc:	2d e0       	ldi	r18, 0x0D	; 13
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e5       	ldi	r20, 0x50	; 80
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	67 e9       	ldi	r22, 0x97	; 151
    2b06:	7c e0       	ldi	r23, 0x0C	; 12
    2b08:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
    2b0c:	4a e0       	ldi	r20, 0x0A	; 10
    2b0e:	6a e7       	ldi	r22, 0x7A	; 122
    2b10:	75 e0       	ldi	r23, 0x05	; 5
    2b12:	80 91 50 05 	lds	r24, 0x0550
    2b16:	90 91 51 05 	lds	r25, 0x0551
    2b1a:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    2b1e:	27 e1       	ldi	r18, 0x17	; 23
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e5       	ldi	r20, 0x50	; 80
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	67 e9       	ldi	r22, 0x97	; 151
    2b28:	7c e0       	ldi	r23, 0x0C	; 12
    2b2a:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
    2b2e:	4a e0       	ldi	r20, 0x0A	; 10
    2b30:	6a e7       	ldi	r22, 0x7A	; 122
    2b32:	75 e0       	ldi	r23, 0x05	; 5
    2b34:	80 91 52 05 	lds	r24, 0x0552
    2b38:	90 91 53 05 	lds	r25, 0x0553
    2b3c:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    2b40:	21 e2       	ldi	r18, 0x21	; 33
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e5       	ldi	r20, 0x50	; 80
    2b46:	50 e0       	ldi	r21, 0x00	; 0
    2b48:	67 e9       	ldi	r22, 0x97	; 151
    2b4a:	7c e0       	ldi	r23, 0x0C	; 12
    2b4c:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2b50:	29 e3       	ldi	r18, 0x39	; 57
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	69 e0       	ldi	r22, 0x09	; 9
    2b5a:	71 e0       	ldi	r23, 0x01	; 1
    2b5c:	8c e0       	ldi	r24, 0x0C	; 12
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    2b64:	27 e3       	ldi	r18, 0x37	; 55
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4c e6       	ldi	r20, 0x6C	; 108
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	67 e9       	ldi	r22, 0x97	; 151
    2b6e:	7c e0       	ldi	r23, 0x0C	; 12
    2b70:	8c e3       	ldi	r24, 0x3C	; 60
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    2b78:	27 e3       	ldi	r18, 0x37	; 55
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	4b e4       	ldi	r20, 0x4B	; 75
    2b7e:	50 e0       	ldi	r21, 0x00	; 0
    2b80:	67 e9       	ldi	r22, 0x97	; 151
    2b82:	7c e0       	ldi	r23, 0x0C	; 12
    2b84:	89 e1       	ldi	r24, 0x19	; 25
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	91 e0       	ldi	r25, 0x01	; 1
    2b90:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
		clear_buffer(buffer);
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	91 e0       	ldi	r25, 0x01	; 1
    2b98:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
	
		if (first_time)
    2b9c:	c1 11       	cpse	r28, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    2b9e:	0e 94 b3 3a 	call	0x7566	; 0x7566 <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    2ba2:	1c 99       	sbic	0x03, 4	; 3
    2ba4:	10 c0       	rjmp	.+32     	; 0x2bc6 <Display_sensors+0x1be>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    2ba6:	0e 94 b3 3a 	call	0x7566	; 0x7566 <Wait_BUTTON4>
    2baa:	2f e3       	ldi	r18, 0x3F	; 63
    2bac:	82 e4       	ldi	r24, 0x42	; 66
    2bae:	9f e0       	ldi	r25, 0x0F	; 15
    2bb0:	21 50       	subi	r18, 0x01	; 1
    2bb2:	80 40       	sbci	r24, 0x00	; 0
    2bb4:	90 40       	sbci	r25, 0x00	; 0
    2bb6:	e1 f7       	brne	.-8      	; 0x2bb0 <Display_sensors+0x1a8>
    2bb8:	00 c0       	rjmp	.+0      	; 0x2bba <Display_sensors+0x1b2>
    2bba:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    2bbc:	0e 94 ee 28 	call	0x51dc	; 0x51dc <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	0e 94 da 11 	call	0x23b4	; 0x23b4 <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    2bc6:	1d 99       	sbic	0x03, 5	; 3
    2bc8:	0c c0       	rjmp	.+24     	; 0x2be2 <Display_sensors+0x1da>
    2bca:	2f e3       	ldi	r18, 0x3F	; 63
    2bcc:	82 e4       	ldi	r24, 0x42	; 66
    2bce:	9f e0       	ldi	r25, 0x0F	; 15
    2bd0:	21 50       	subi	r18, 0x01	; 1
    2bd2:	80 40       	sbci	r24, 0x00	; 0
    2bd4:	90 40       	sbci	r25, 0x00	; 0
    2bd6:	e1 f7       	brne	.-8      	; 0x2bd0 <Display_sensors+0x1c8>
    2bd8:	00 c0       	rjmp	.+0      	; 0x2bda <Display_sensors+0x1d2>
    2bda:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	0e 94 da 11 	call	0x23b4	; 0x23b4 <CalibrateAcc>
    2be2:	c0 e0       	ldi	r28, 0x00	; 0
    2be4:	17 cf       	rjmp	.-466    	; 0x2a14 <Display_sensors+0xc>
		}		
	}
}
    2be6:	cf 91       	pop	r28
    2be8:	08 95       	ret

00002bea <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2bea:	bf 92       	push	r11
    2bec:	cf 92       	push	r12
    2bee:	df 92       	push	r13
    2bf0:	ef 92       	push	r14
    2bf2:	ff 92       	push	r15
    2bf4:	0f 93       	push	r16
    2bf6:	1f 93       	push	r17
    2bf8:	cf 93       	push	r28
    2bfa:	df 93       	push	r29
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <Display_status+0x14>
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <Display_status+0x16>
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	91 e0       	ldi	r25, 0x01	; 1
    2c08:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	67 e9       	ldi	r22, 0x97	; 151
    2c16:	7c e0       	ldi	r23, 0x0C	; 12
    2c18:	88 e0       	ldi	r24, 0x08	; 8
    2c1a:	91 e0       	ldi	r25, 0x01	; 1
    2c1c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    2c20:	2c e0       	ldi	r18, 0x0C	; 12
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	67 e9       	ldi	r22, 0x97	; 151
    2c2a:	7c e0       	ldi	r23, 0x0C	; 12
    2c2c:	8a e0       	ldi	r24, 0x0A	; 10
    2c2e:	91 e0       	ldi	r25, 0x01	; 1
    2c30:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    2c34:	28 e1       	ldi	r18, 0x18	; 24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	67 e9       	ldi	r22, 0x97	; 151
    2c3e:	7c e0       	ldi	r23, 0x0C	; 12
    2c40:	8b e0       	ldi	r24, 0x0B	; 11
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    2c48:	28 e1       	ldi	r18, 0x18	; 24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	48 e5       	ldi	r20, 0x58	; 88
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	67 e9       	ldi	r22, 0x97	; 151
    2c52:	7c e0       	ldi	r23, 0x0C	; 12
    2c54:	87 e1       	ldi	r24, 0x17	; 23
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    2c5c:	2b e3       	ldi	r18, 0x3B	; 59
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	69 e0       	ldi	r22, 0x09	; 9
    2c66:	71 e0       	ldi	r23, 0x01	; 1
    2c68:	89 e0       	ldi	r24, 0x09	; 9
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    2c70:	27 e3       	ldi	r18, 0x37	; 55
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	4a e0       	ldi	r20, 0x0A	; 10
    2c76:	50 e0       	ldi	r21, 0x00	; 0
    2c78:	67 e9       	ldi	r22, 0x97	; 151
    2c7a:	7c e0       	ldi	r23, 0x0C	; 12
    2c7c:	8e e0       	ldi	r24, 0x0E	; 14
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    2c84:	40 91 00 06 	lds	r20, 0x0600
    2c88:	55 27       	eor	r21, r21
    2c8a:	47 fd       	sbrc	r20, 7
    2c8c:	50 95       	com	r21
    2c8e:	42 5c       	subi	r20, 0xC2	; 194
    2c90:	5f 4f       	sbci	r21, 0xFF	; 255
    2c92:	0c e0       	ldi	r16, 0x0C	; 12
    2c94:	2d e2       	ldi	r18, 0x2D	; 45
    2c96:	61 e0       	ldi	r22, 0x01	; 1
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <print_menu_text>
    2ca0:	4a e0       	ldi	r20, 0x0A	; 10
    2ca2:	6a e7       	ldi	r22, 0x7A	; 122
    2ca4:	75 e0       	ldi	r23, 0x05	; 5
    2ca6:	80 91 21 05 	lds	r24, 0x0521
    2caa:	90 91 22 05 	lds	r25, 0x0522
    2cae:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    2cb2:	28 e1       	ldi	r18, 0x18	; 24
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4e e6       	ldi	r20, 0x6E	; 110
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	67 e9       	ldi	r22, 0x97	; 151
    2cbc:	7c e0       	ldi	r23, 0x0C	; 12
    2cbe:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    2cc2:	80 91 00 06 	lds	r24, 0x0600
    2cc6:	81 30       	cpi	r24, 0x01	; 1
    2cc8:	d9 f4       	brne	.+54     	; 0x2d00 <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    2cca:	2c e0       	ldi	r18, 0x0C	; 12
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	4d e4       	ldi	r20, 0x4D	; 77
    2cd0:	50 e0       	ldi	r21, 0x00	; 0
    2cd2:	67 e9       	ldi	r22, 0x97	; 151
    2cd4:	7c e0       	ldi	r23, 0x0C	; 12
    2cd6:	88 e1       	ldi	r24, 0x18	; 24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    2cde:	80 91 1c 05 	lds	r24, 0x051C
    2ce2:	90 91 1d 05 	lds	r25, 0x051D
    2ce6:	4a e0       	ldi	r20, 0x0A	; 10
    2ce8:	6a e7       	ldi	r22, 0x7A	; 122
    2cea:	75 e0       	ldi	r23, 0x05	; 5
    2cec:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    2cf0:	2c e0       	ldi	r18, 0x0C	; 12
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	4e e6       	ldi	r20, 0x6E	; 110
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	67 e9       	ldi	r22, 0x97	; 151
    2cfa:	7c e0       	ldi	r23, 0x0C	; 12
    2cfc:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    2d00:	80 91 21 05 	lds	r24, 0x0521
    2d04:	90 91 22 05 	lds	r25, 0x0522
    2d08:	18 16       	cp	r1, r24
    2d0a:	19 06       	cpc	r1, r25
    2d0c:	4c f0       	brlt	.+18     	; 0x2d20 <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    2d0e:	28 e1       	ldi	r18, 0x18	; 24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	4d e2       	ldi	r20, 0x2D	; 45
    2d14:	50 e0       	ldi	r21, 0x00	; 0
    2d16:	67 e9       	ldi	r22, 0x97	; 151
    2d18:	7c e0       	ldi	r23, 0x0C	; 12
    2d1a:	80 e3       	ldi	r24, 0x30	; 48
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	31 c0       	rjmp	.+98     	; 0x2d82 <Display_status+0x198>
	}
	else if (transition >= 100)
    2d20:	84 36       	cpi	r24, 0x64	; 100
    2d22:	91 05       	cpc	r25, r1
    2d24:	4c f0       	brlt	.+18     	; 0x2d38 <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    2d26:	28 e1       	ldi	r18, 0x18	; 24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	4d e2       	ldi	r20, 0x2D	; 45
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	67 e9       	ldi	r22, 0x97	; 151
    2d30:	7c e0       	ldi	r23, 0x0C	; 12
    2d32:	82 e3       	ldi	r24, 0x32	; 50
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	25 c0       	rjmp	.+74     	; 0x2d82 <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    2d38:	20 91 06 06 	lds	r18, 0x0606
    2d3c:	33 27       	eor	r19, r19
    2d3e:	27 fd       	sbrc	r18, 7
    2d40:	30 95       	com	r19
    2d42:	82 17       	cp	r24, r18
    2d44:	93 07       	cpc	r25, r19
    2d46:	49 f4       	brne	.+18     	; 0x2d5a <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    2d48:	28 e1       	ldi	r18, 0x18	; 24
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	4d e2       	ldi	r20, 0x2D	; 45
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	67 e9       	ldi	r22, 0x97	; 151
    2d52:	7c e0       	ldi	r23, 0x0C	; 12
    2d54:	81 e3       	ldi	r24, 0x31	; 49
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	14 c0       	rjmp	.+40     	; 0x2d82 <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    2d5a:	82 17       	cp	r24, r18
    2d5c:	93 07       	cpc	r25, r19
    2d5e:	4c f4       	brge	.+18     	; 0x2d72 <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    2d60:	28 e1       	ldi	r18, 0x18	; 24
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	4d e2       	ldi	r20, 0x2D	; 45
    2d66:	50 e0       	ldi	r21, 0x00	; 0
    2d68:	67 e9       	ldi	r22, 0x97	; 151
    2d6a:	7c e0       	ldi	r23, 0x0C	; 12
    2d6c:	83 e3       	ldi	r24, 0x33	; 51
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	08 c0       	rjmp	.+16     	; 0x2d82 <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    2d72:	28 e1       	ldi	r18, 0x18	; 24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	4d e2       	ldi	r20, 0x2D	; 45
    2d78:	50 e0       	ldi	r21, 0x00	; 0
    2d7a:	67 e9       	ldi	r22, 0x97	; 151
    2d7c:	7c e0       	ldi	r23, 0x0C	; 12
    2d7e:	84 e3       	ldi	r24, 0x34	; 52
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
	}

	// Don't display battery text if there are error messages
	if (General_error == 0)
    2d86:	80 91 20 05 	lds	r24, 0x0520
    2d8a:	81 11       	cpse	r24, r1
    2d8c:	cc c0       	rjmp	.+408    	; 0x2f26 <Display_status+0x33c>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(133,(const unsigned char*)Verdana8,0,36); 	// Battery
    2d8e:	24 e2       	ldi	r18, 0x24	; 36
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	50 e0       	ldi	r21, 0x00	; 0
    2d96:	67 e9       	ldi	r22, 0x97	; 151
    2d98:	7c e0       	ldi	r23, 0x0C	; 12
    2d9a:	85 e8       	ldi	r24, 0x85	; 133
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

		vbat_temp = GetVbat();
    2da2:	0e 94 aa 4e 	call	0x9d54	; 0x9d54 <GetVbat>
    2da6:	7c 01       	movw	r14, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    2da8:	64 e6       	ldi	r22, 0x64	; 100
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	0e 94 e4 50 	call	0xa1c8	; 0xa1c8 <__udivmodhi4>
    2db0:	8b 01       	movw	r16, r22
    2db2:	4a e0       	ldi	r20, 0x0A	; 10
    2db4:	6a e7       	ldi	r22, 0x7A	; 122
    2db6:	75 e0       	ldi	r23, 0x05	; 5
    2db8:	c8 01       	movw	r24, r16
    2dba:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    2dbe:	ae 01       	movw	r20, r28
    2dc0:	4f 5f       	subi	r20, 0xFF	; 255
    2dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc4:	67 e9       	ldi	r22, 0x97	; 151
    2dc6:	7c e0       	ldi	r23, 0x0C	; 12
    2dc8:	0e 94 9d 44 	call	0x893a	; 0x893a <mugui_text_sizestring>
    2dcc:	4a e0       	ldi	r20, 0x0A	; 10
    2dce:	6a e7       	ldi	r22, 0x7A	; 122
    2dd0:	75 e0       	ldi	r23, 0x05	; 5
    2dd2:	c8 01       	movw	r24, r16
    2dd4:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    2dd8:	24 e2       	ldi	r18, 0x24	; 36
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	4d e2       	ldi	r20, 0x2D	; 45
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	67 e9       	ldi	r22, 0x97	; 151
    2de2:	7c e0       	ldi	r23, 0x0C	; 12
    2de4:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2de8:	2c e9       	ldi	r18, 0x9C	; 156
    2dea:	20 03       	mulsu	r18, r16
    2dec:	60 01       	movw	r12, r0
    2dee:	21 9f       	mul	r18, r17
    2df0:	d0 0c       	add	r13, r0
    2df2:	11 24       	eor	r1, r1
    2df4:	ce 0c       	add	r12, r14
    2df6:	df 1c       	adc	r13, r15

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2df8:	e9 80       	ldd	r14, Y+1	; 0x01
    2dfa:	ff 24       	eor	r15, r15
    2dfc:	e7 fc       	sbrc	r14, 7
    2dfe:	f0 94       	com	r15
    2e00:	8d e2       	ldi	r24, 0x2D	; 45
    2e02:	e8 0e       	add	r14, r24
    2e04:	f1 1c       	adc	r15, r1
    2e06:	24 e2       	ldi	r18, 0x24	; 36
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	a7 01       	movw	r20, r14
    2e0c:	67 e9       	ldi	r22, 0x97	; 151
    2e0e:	7c e0       	ldi	r23, 0x0C	; 12
    2e10:	8c e0       	ldi	r24, 0x0C	; 12
    2e12:	91 e0       	ldi	r25, 0x01	; 1
    2e14:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2e18:	ae 01       	movw	r20, r28
    2e1a:	4f 5f       	subi	r20, 0xFF	; 255
    2e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e1e:	67 e9       	ldi	r22, 0x97	; 151
    2e20:	7c e0       	ldi	r23, 0x0C	; 12
    2e22:	8a e0       	ldi	r24, 0x0A	; 10
    2e24:	95 e0       	ldi	r25, 0x05	; 5
    2e26:	0e 94 9d 44 	call	0x893a	; 0x893a <mugui_text_sizestring>
		pos3 = size.x;
    2e2a:	09 81       	ldd	r16, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2e2c:	ae 01       	movw	r20, r28
    2e2e:	4f 5f       	subi	r20, 0xFF	; 255
    2e30:	5f 4f       	sbci	r21, 0xFF	; 255
    2e32:	67 e9       	ldi	r22, 0x97	; 151
    2e34:	7c e0       	ldi	r23, 0x0C	; 12
    2e36:	8c e0       	ldi	r24, 0x0C	; 12
    2e38:	95 e0       	ldi	r25, 0x05	; 5
    2e3a:	0e 94 9d 44 	call	0x893a	; 0x893a <mugui_text_sizestring>
		pos2 = size.x;
    2e3e:	b9 80       	ldd	r11, Y+1	; 0x01
    2e40:	11 27       	eor	r17, r17
    2e42:	07 fd       	sbrc	r16, 7
    2e44:	10 95       	com	r17

		if (vbat_temp >= 10)
    2e46:	8a e0       	ldi	r24, 0x0A	; 10
    2e48:	c8 16       	cp	r12, r24
    2e4a:	d1 04       	cpc	r13, r1
    2e4c:	40 f0       	brcs	.+16     	; 0x2e5e <Display_status+0x274>
    2e4e:	4a e0       	ldi	r20, 0x0A	; 10
    2e50:	6a e7       	ldi	r22, 0x7A	; 122
    2e52:	75 e0       	ldi	r23, 0x05	; 5
    2e54:	c6 01       	movw	r24, r12
    2e56:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2e5a:	a7 01       	movw	r20, r14
    2e5c:	16 c0       	rjmp	.+44     	; 0x2e8a <Display_status+0x2a0>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2e5e:	a7 01       	movw	r20, r14
    2e60:	40 0f       	add	r20, r16
    2e62:	51 1f       	adc	r21, r17
    2e64:	24 e2       	ldi	r18, 0x24	; 36
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	67 e9       	ldi	r22, 0x97	; 151
    2e6a:	7c e0       	ldi	r23, 0x0C	; 12
    2e6c:	8d e0       	ldi	r24, 0x0D	; 13
    2e6e:	91 e0       	ldi	r25, 0x01	; 1
    2e70:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
    2e74:	4a e0       	ldi	r20, 0x0A	; 10
    2e76:	6a e7       	ldi	r22, 0x7A	; 122
    2e78:	75 e0       	ldi	r23, 0x05	; 5
    2e7a:	c6 01       	movw	r24, r12
    2e7c:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2e80:	a7 01       	movw	r20, r14
    2e82:	4b 0d       	add	r20, r11
    2e84:	51 1d       	adc	r21, r1
    2e86:	b7 fc       	sbrc	r11, 7
    2e88:	5a 95       	dec	r21
    2e8a:	40 0f       	add	r20, r16
    2e8c:	51 1f       	adc	r21, r17
    2e8e:	24 e2       	ldi	r18, 0x24	; 36
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	67 e9       	ldi	r22, 0x97	; 151
    2e94:	7c e0       	ldi	r23, 0x0C	; 12
    2e96:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
		}
	
		// Display vibration info is set to "ON"
		if (Config.Vibration == ON)
    2e9a:	80 91 07 06 	lds	r24, 0x0607
    2e9e:	81 30       	cpi	r24, 0x01	; 1
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <Display_status+0x2ba>
    2ea2:	94 c0       	rjmp	.+296    	; 0x2fcc <Display_status+0x3e2>
		{
			// Create message box
			fillrect(buffer, 29,11, 70, 42, 0);		// White box
    2ea4:	e1 2c       	mov	r14, r1
    2ea6:	0a e2       	ldi	r16, 0x2A	; 42
    2ea8:	26 e4       	ldi	r18, 0x46	; 70
    2eaa:	4b e0       	ldi	r20, 0x0B	; 11
    2eac:	6d e1       	ldi	r22, 0x1D	; 29
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	91 e0       	ldi	r25, 0x01	; 1
    2eb2:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <fillrect>
			drawrect(buffer, 29,11, 70, 42, 1); 	// Outline
    2eb6:	ee 24       	eor	r14, r14
    2eb8:	e3 94       	inc	r14
    2eba:	26 e4       	ldi	r18, 0x46	; 70
    2ebc:	4b e0       	ldi	r20, 0x0B	; 11
    2ebe:	6d e1       	ldi	r22, 0x1D	; 29
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	91 e0       	ldi	r25, 0x01	; 1
    2ec4:	0e 94 03 27 	call	0x4e06	; 0x4e06 <drawrect>

			// Display vibration data
			temp = (int16_t)GyroAvgNoise;
    2ec8:	60 91 7e 08 	lds	r22, 0x087E
    2ecc:	70 91 7f 08 	lds	r23, 0x087F
    2ed0:	80 91 80 08 	lds	r24, 0x0880
    2ed4:	90 91 81 08 	lds	r25, 0x0881
    2ed8:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    2edc:	6b 01       	movw	r12, r22
    2ede:	7c 01       	movw	r14, r24
    2ee0:	4a e0       	ldi	r20, 0x0A	; 10
    2ee2:	6a e7       	ldi	r22, 0x7A	; 122
    2ee4:	75 e0       	ldi	r23, 0x05	; 5
    2ee6:	c6 01       	movw	r24, r12
    2ee8:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
			
			// Work out pixel size of number to display
			mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana22, &size);
    2eec:	ae 01       	movw	r20, r28
    2eee:	4f 5f       	subi	r20, 0xFF	; 255
    2ef0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef2:	63 e7       	ldi	r22, 0x73	; 115
    2ef4:	71 e0       	ldi	r23, 0x01	; 1
    2ef6:	0e 94 9d 44 	call	0x893a	; 0x893a <mugui_text_sizestring>
			
			// Center the number in the box automatically
			mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana22,64 - (size.x / 2),20);
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	9a 81       	ldd	r25, Y+2	; 0x02
    2efe:	96 95       	lsr	r25
    2f00:	87 95       	ror	r24
    2f02:	00 e4       	ldi	r16, 0x40	; 64
    2f04:	10 e0       	ldi	r17, 0x00	; 0
    2f06:	08 1b       	sub	r16, r24
    2f08:	19 0b       	sbc	r17, r25
    2f0a:	4a e0       	ldi	r20, 0x0A	; 10
    2f0c:	6a e7       	ldi	r22, 0x7A	; 122
    2f0e:	75 e0       	ldi	r23, 0x05	; 5
    2f10:	c6 01       	movw	r24, r12
    2f12:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    2f16:	24 e1       	ldi	r18, 0x14	; 20
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	a8 01       	movw	r20, r16
    2f1c:	63 e7       	ldi	r22, 0x73	; 115
    2f1e:	71 e0       	ldi	r23, 0x01	; 1
    2f20:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
    2f24:	53 c0       	rjmp	.+166    	; 0x2fcc <Display_status+0x3e2>
	
	// Display error messages
	else
	{
		// Prioritise error from top to bottom
		if(General_error & (1 << LVA_ALARM))
    2f26:	80 91 20 05 	lds	r24, 0x0520
    2f2a:	83 ff       	sbrs	r24, 3
    2f2c:	13 c0       	rjmp	.+38     	; 0x2f54 <Display_status+0x36a>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    2f2e:	25 e2       	ldi	r18, 0x25	; 37
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	4f e0       	ldi	r20, 0x0F	; 15
    2f34:	50 e0       	ldi	r21, 0x00	; 0
    2f36:	69 ee       	ldi	r22, 0xE9	; 233
    2f38:	73 e0       	ldi	r23, 0x03	; 3
    2f3a:	86 e8       	ldi	r24, 0x86	; 134
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    2f42:	25 e2       	ldi	r18, 0x25	; 37
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	4f e4       	ldi	r20, 0x4F	; 79
    2f48:	50 e0       	ldi	r21, 0x00	; 0
    2f4a:	69 ee       	ldi	r22, 0xE9	; 233
    2f4c:	73 e0       	ldi	r23, 0x03	; 3
    2f4e:	8f e0       	ldi	r24, 0x0F	; 15
    2f50:	91 e0       	ldi	r25, 0x01	; 1
    2f52:	3a c0       	rjmp	.+116    	; 0x2fc8 <Display_status+0x3de>
		}
		else if(General_error & (1 << NO_SIGNAL))
    2f54:	80 91 20 05 	lds	r24, 0x0520
    2f58:	81 ff       	sbrs	r24, 1
    2f5a:	13 c0       	rjmp	.+38     	; 0x2f82 <Display_status+0x398>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    2f5c:	25 e2       	ldi	r18, 0x25	; 37
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	4e e1       	ldi	r20, 0x1E	; 30
    2f62:	50 e0       	ldi	r21, 0x00	; 0
    2f64:	69 ee       	ldi	r22, 0xE9	; 233
    2f66:	73 e0       	ldi	r23, 0x03	; 3
    2f68:	8b e4       	ldi	r24, 0x4B	; 75
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    2f70:	25 e2       	ldi	r18, 0x25	; 37
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	47 e3       	ldi	r20, 0x37	; 55
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	69 ee       	ldi	r22, 0xE9	; 233
    2f7a:	73 e0       	ldi	r23, 0x03	; 3
    2f7c:	80 e1       	ldi	r24, 0x10	; 16
    2f7e:	91 e0       	ldi	r25, 0x01	; 1
    2f80:	23 c0       	rjmp	.+70     	; 0x2fc8 <Display_status+0x3de>
		}
		else if(General_error & (1 << THROTTLE_HIGH))
    2f82:	80 91 20 05 	lds	r24, 0x0520
    2f86:	80 ff       	sbrs	r24, 0
    2f88:	13 c0       	rjmp	.+38     	; 0x2fb0 <Display_status+0x3c6>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    2f8a:	25 e2       	ldi	r18, 0x25	; 37
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	4b e0       	ldi	r20, 0x0B	; 11
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	69 ee       	ldi	r22, 0xE9	; 233
    2f94:	73 e0       	ldi	r23, 0x03	; 3
    2f96:	89 e6       	ldi	r24, 0x69	; 105
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    2f9e:	25 e2       	ldi	r18, 0x25	; 37
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	42 e5       	ldi	r20, 0x52	; 82
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	69 ee       	ldi	r22, 0xE9	; 233
    2fa8:	73 e0       	ldi	r23, 0x03	; 3
    2faa:	8e e0       	ldi	r24, 0x0E	; 14
    2fac:	91 e0       	ldi	r25, 0x01	; 1
    2fae:	0c c0       	rjmp	.+24     	; 0x2fc8 <Display_status+0x3de>
		}
		else if(General_error & (1 << DISARMED))
    2fb0:	80 91 20 05 	lds	r24, 0x0520
    2fb4:	82 ff       	sbrs	r24, 2
    2fb6:	0a c0       	rjmp	.+20     	; 0x2fcc <Display_status+0x3e2>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    2fb8:	25 e2       	ldi	r18, 0x25	; 37
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	49 e1       	ldi	r20, 0x19	; 25
    2fbe:	50 e0       	ldi	r21, 0x00	; 0
    2fc0:	69 ee       	ldi	r22, 0xE9	; 233
    2fc2:	73 e0       	ldi	r23, 0x03	; 3
    2fc4:	82 e1       	ldi	r24, 0x12	; 18
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	91 e0       	ldi	r25, 0x01	; 1
    2fd0:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
	clear_buffer(buffer);
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	91 e0       	ldi	r25, 0x01	; 1
    2fd8:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
}
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	df 91       	pop	r29
    2fe6:	cf 91       	pop	r28
    2fe8:	1f 91       	pop	r17
    2fea:	0f 91       	pop	r16
    2fec:	ff 90       	pop	r15
    2fee:	ef 90       	pop	r14
    2ff0:	df 90       	pop	r13
    2ff2:	cf 90       	pop	r12
    2ff4:	bf 90       	pop	r11
    2ff6:	08 95       	ret

00002ff8 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2ff8:	af 92       	push	r10
    2ffa:	bf 92       	push	r11
    2ffc:	cf 92       	push	r12
    2ffe:	df 92       	push	r13
    3000:	ef 92       	push	r14
    3002:	ff 92       	push	r15
    3004:	0f 93       	push	r16
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    300c:	d0 90 e0 07 	lds	r13, 0x07E0
	temp_elevator = Config.ElevatorPol;
    3010:	f0 90 08 06 	lds	r15, 0x0608
	temp_rudder = Config.RudderPol;
    3014:	a0 90 df 07 	lds	r10, 0x07DF

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    3018:	10 92 e0 07 	sts	0x07E0, r1
	Config.ElevatorPol =  NORMAL;
    301c:	10 92 08 06 	sts	0x0608, r1
	Config.RudderPol = NORMAL;
    3020:	10 92 df 07 	sts	0x07DF, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    3024:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    3026:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    3028:	1f 9b       	sbis	0x03, 7	; 3
    302a:	d2 c0       	rjmp	.+420    	; 0x31d0 <Display_sticks+0x1d8>
    302c:	c1 11       	cpse	r28, r1
    302e:	d2 c0       	rjmp	.+420    	; 0x31d4 <Display_sticks+0x1dc>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	91 e0       	ldi	r25, 0x01	; 1
    3034:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
    3038:	92 e0       	ldi	r25, 0x02	; 2
    303a:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    303c:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    303e:	61 e1       	ldi	r22, 0x11	; 17
    3040:	61 0f       	add	r22, r17
    3042:	ee 24       	eor	r14, r14
    3044:	e3 94       	inc	r14
    3046:	08 e2       	ldi	r16, 0x28	; 40
    3048:	28 e2       	ldi	r18, 0x28	; 40
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	91 e0       	ldi	r25, 0x01	; 1
    3050:	0e 94 03 27 	call	0x4e06	; 0x4e06 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    3054:	86 e2       	ldi	r24, 0x26	; 38
    3056:	b8 2e       	mov	r11, r24
    3058:	b1 0e       	add	r11, r17
    305a:	20 e3       	ldi	r18, 0x30	; 48
    305c:	21 0f       	add	r18, r17
    305e:	03 e0       	ldi	r16, 0x03	; 3
    3060:	44 e1       	ldi	r20, 0x14	; 20
    3062:	6b 2d       	mov	r22, r11
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	91 e0       	ldi	r25, 0x01	; 1
    3068:	0e 94 65 26 	call	0x4cca	; 0x4cca <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    306c:	28 e3       	ldi	r18, 0x38	; 56
    306e:	21 0f       	add	r18, r17
    3070:	69 e2       	ldi	r22, 0x29	; 41
    3072:	61 0f       	add	r22, r17
    3074:	06 e0       	ldi	r16, 0x06	; 6
    3076:	45 e1       	ldi	r20, 0x15	; 21
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	0e 94 65 26 	call	0x4cca	; 0x4cca <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    3080:	01 e0       	ldi	r16, 0x01	; 1
    3082:	22 e0       	ldi	r18, 0x02	; 2
    3084:	45 e1       	ldi	r20, 0x15	; 21
    3086:	6b 2d       	mov	r22, r11
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	91 e0       	ldi	r25, 0x01	; 1
    308c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    3090:	63 e3       	ldi	r22, 0x33	; 51
    3092:	61 0f       	add	r22, r17
    3094:	24 e0       	ldi	r18, 0x04	; 4
    3096:	45 e0       	ldi	r20, 0x05	; 5
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	91 e0       	ldi	r25, 0x01	; 1
    309c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <fillcircle>
    30a0:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    30a2:	11 f0       	breq	.+4      	; 0x30a8 <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    30a4:	14 e3       	ldi	r17, 0x34	; 52
    30a6:	cb cf       	rjmp	.-106    	; 0x303e <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    30a8:	29 e3       	ldi	r18, 0x39	; 57
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 e0       	ldi	r20, 0x00	; 0
    30ae:	50 e0       	ldi	r21, 0x00	; 0
    30b0:	69 e0       	ldi	r22, 0x09	; 9
    30b2:	71 e0       	ldi	r23, 0x01	; 1
    30b4:	8c e0       	ldi	r24, 0x0C	; 12
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    30bc:	0e 94 d5 4b 	call	0x97aa	; 0x97aa <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    30c0:	80 91 86 08 	lds	r24, 0x0886
    30c4:	90 91 87 08 	lds	r25, 0x0887
    30c8:	80 33       	cpi	r24, 0x30	; 48
    30ca:	98 4f       	sbci	r25, 0xF8	; 248
    30cc:	3c f0       	brlt	.+14     	; 0x30dc <Display_sticks+0xe4>
    30ce:	80 91 86 08 	lds	r24, 0x0886
    30d2:	90 91 87 08 	lds	r25, 0x0887
    30d6:	81 3d       	cpi	r24, 0xD1	; 209
    30d8:	97 40       	sbci	r25, 0x07	; 7
    30da:	6c f0       	brlt	.+26     	; 0x30f6 <Display_sticks+0xfe>
    30dc:	d1 11       	cpse	r29, r1
    30de:	0b c0       	rjmp	.+22     	; 0x30f6 <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    30e0:	2b e2       	ldi	r18, 0x2B	; 43
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e1       	ldi	r20, 0x10	; 16
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	69 ee       	ldi	r22, 0xE9	; 233
    30ea:	73 e0       	ldi	r23, 0x03	; 3
    30ec:	87 e8       	ldi	r24, 0x87	; 135
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
    30f4:	68 c0       	rjmp	.+208    	; 0x31c6 <Display_sticks+0x1ce>
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    30f6:	80 91 86 08 	lds	r24, 0x0886
    30fa:	90 91 87 08 	lds	r25, 0x0887
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
    30fe:	84 3f       	cpi	r24, 0xF4	; 244
    3100:	91 40       	sbci	r25, 0x01	; 1
    3102:	3c f4       	brge	.+14     	; 0x3112 <Display_sticks+0x11a>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    3104:	80 91 86 08 	lds	r24, 0x0886
    3108:	90 91 87 08 	lds	r25, 0x0887
    310c:	8d 30       	cpi	r24, 0x0D	; 13
    310e:	9e 4f       	sbci	r25, 0xFE	; 254
    3110:	e4 f4       	brge	.+56     	; 0x314a <Display_sticks+0x152>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    3112:	80 91 88 08 	lds	r24, 0x0888
    3116:	90 91 89 08 	lds	r25, 0x0889
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    311a:	84 3f       	cpi	r24, 0xF4	; 244
    311c:	91 40       	sbci	r25, 0x01	; 1
    311e:	3c f4       	brge	.+14     	; 0x312e <Display_sticks+0x136>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    3120:	80 91 88 08 	lds	r24, 0x0888
    3124:	90 91 89 08 	lds	r25, 0x0889
    3128:	8d 30       	cpi	r24, 0x0D	; 13
    312a:	9e 4f       	sbci	r25, 0xFE	; 254
    312c:	74 f4       	brge	.+28     	; 0x314a <Display_sticks+0x152>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    312e:	80 91 8a 08 	lds	r24, 0x088A
    3132:	90 91 8b 08 	lds	r25, 0x088B
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    3136:	84 3f       	cpi	r24, 0xF4	; 244
    3138:	91 40       	sbci	r25, 0x01	; 1
    313a:	9c f4       	brge	.+38     	; 0x3162 <Display_sticks+0x16a>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    313c:	80 91 8a 08 	lds	r24, 0x088A
    3140:	90 91 8b 08 	lds	r25, 0x088B
    3144:	8d 30       	cpi	r24, 0x0D	; 13
    3146:	9e 4f       	sbci	r25, 0xFE	; 254
    3148:	64 f0       	brlt	.+24     	; 0x3162 <Display_sticks+0x16a>
					)
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    314a:	2b e2       	ldi	r18, 0x2B	; 43
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	49 e0       	ldi	r20, 0x09	; 9
    3150:	50 e0       	ldi	r21, 0x00	; 0
    3152:	69 ee       	ldi	r22, 0xE9	; 233
    3154:	73 e0       	ldi	r23, 0x03	; 3
    3156:	88 e8       	ldi	r24, 0x88	; 136
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
					)
			{
				CalibrateStarted = true;
    315e:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    3160:	32 c0       	rjmp	.+100    	; 0x31c6 <Display_sticks+0x1ce>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    3162:	80 91 86 08 	lds	r24, 0x0886
    3166:	90 91 87 08 	lds	r25, 0x0887
    316a:	97 ff       	sbrs	r25, 7
    316c:	03 c0       	rjmp	.+6      	; 0x3174 <Display_sticks+0x17c>
				{
					Config.AileronPol = REVERSED;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	80 93 e0 07 	sts	0x07E0, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    3174:	80 91 88 08 	lds	r24, 0x0888
    3178:	90 91 89 08 	lds	r25, 0x0889
    317c:	97 ff       	sbrs	r25, 7
    317e:	03 c0       	rjmp	.+6      	; 0x3186 <Display_sticks+0x18e>
				{
					Config.ElevatorPol = REVERSED;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	80 93 08 06 	sts	0x0608, r24
				}

				if (RCinputs[RUDDER] < 0)
    3186:	80 91 8a 08 	lds	r24, 0x088A
    318a:	90 91 8b 08 	lds	r25, 0x088B
    318e:	97 ff       	sbrs	r25, 7
    3190:	03 c0       	rjmp	.+6      	; 0x3198 <Display_sticks+0x1a0>
				{
					Config.RudderPol = REVERSED;
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	80 93 df 07 	sts	0x07DF, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    3198:	80 91 86 08 	lds	r24, 0x0886
    319c:	90 91 87 08 	lds	r25, 0x0887
    31a0:	18 16       	cp	r1, r24
    31a2:	19 06       	cpc	r1, r25
    31a4:	84 f4       	brge	.+32     	; 0x31c6 <Display_sticks+0x1ce>
    31a6:	80 91 88 08 	lds	r24, 0x0888
    31aa:	90 91 89 08 	lds	r25, 0x0889
    31ae:	18 16       	cp	r1, r24
    31b0:	19 06       	cpc	r1, r25
    31b2:	4c f4       	brge	.+18     	; 0x31c6 <Display_sticks+0x1ce>
    31b4:	80 91 8a 08 	lds	r24, 0x088A
    31b8:	90 91 8b 08 	lds	r25, 0x088B
    31bc:	c1 e0       	ldi	r28, 0x01	; 1
    31be:	18 16       	cp	r1, r24
    31c0:	19 06       	cpc	r1, r25
    31c2:	0c f0       	brlt	.+2      	; 0x31c6 <Display_sticks+0x1ce>
    31c4:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	91 e0       	ldi	r25, 0x01	; 1
    31ca:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
    31ce:	2c cf       	rjmp	.-424    	; 0x3028 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    31d0:	cc 23       	and	r28, r28
    31d2:	39 f1       	breq	.+78     	; 0x3222 <Display_sticks+0x22a>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    31d4:	2b e2       	ldi	r18, 0x2B	; 43
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	48 e2       	ldi	r20, 0x28	; 40
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	69 ee       	ldi	r22, 0xE9	; 233
    31de:	73 e0       	ldi	r23, 0x03	; 3
    31e0:	89 e8       	ldi	r24, 0x89	; 137
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	91 e0       	ldi	r25, 0x01	; 1
    31ec:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
		clear_buffer(buffer);
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	91 e0       	ldi	r25, 0x01	; 1
    31f4:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
    31f8:	8f e7       	ldi	r24, 0x7F	; 127
    31fa:	94 e8       	ldi	r25, 0x84	; 132
    31fc:	2e e1       	ldi	r18, 0x1E	; 30
    31fe:	81 50       	subi	r24, 0x01	; 1
    3200:	90 40       	sbci	r25, 0x00	; 0
    3202:	20 40       	sbci	r18, 0x00	; 0
    3204:	e1 f7       	brne	.-8      	; 0x31fe <Display_sticks+0x206>
    3206:	00 c0       	rjmp	.+0      	; 0x3208 <Display_sticks+0x210>
    3208:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	ff 90       	pop	r15
    3214:	ef 90       	pop	r14
    3216:	df 90       	pop	r13
    3218:	cf 90       	pop	r12
    321a:	bf 90       	pop	r11
    321c:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    321e:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    3222:	d0 92 e0 07 	sts	0x07E0, r13
		Config.ElevatorPol = temp_elevator;
    3226:	f0 92 08 06 	sts	0x0608, r15
		Config.RudderPol = temp_rudder;
    322a:	a0 92 df 07 	sts	0x07DF, r10
	}
}
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	1f 91       	pop	r17
    3234:	0f 91       	pop	r16
    3236:	ff 90       	pop	r15
    3238:	ef 90       	pop	r14
    323a:	df 90       	pop	r13
    323c:	cf 90       	pop	r12
    323e:	bf 90       	pop	r11
    3240:	af 90       	pop	r10
    3242:	08 95       	ret

00003244 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    3244:	0f 93       	push	r16
    3246:	1f 93       	push	r17
    3248:	cf 93       	push	r28
    324a:	df 93       	push	r29
    324c:	1f 92       	push	r1
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    3254:	69 83       	std	Y+1, r22	; 0x01
    3256:	0e 94 d4 51 	call	0xa3a8	; 0xa3a8 <__eerd_byte_m644pa>
    325a:	69 81       	ldd	r22, Y+1	; 0x01
    325c:	86 17       	cp	r24, r22
    325e:	41 f0       	breq	.+16     	; 0x3270 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    3260:	c8 01       	movw	r24, r16
	}
}
    3262:	0f 90       	pop	r0
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    326c:	0c 94 dc 51 	jmp	0xa3b8	; 0xa3b8 <__eewr_byte_m644pa>
	}
}
    3270:	0f 90       	pop	r0
    3272:	df 91       	pop	r29
    3274:	cf 91       	pop	r28
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	08 95       	ret

0000327c <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    327c:	ef 92       	push	r14
    327e:	ff 92       	push	r15
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	ec 01       	movw	r28, r24
    328a:	8b 01       	movw	r16, r22
    328c:	7a 01       	movw	r14, r20
    328e:	e8 0e       	add	r14, r24
    3290:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    3292:	ce 15       	cp	r28, r14
    3294:	df 05       	cpc	r29, r15
    3296:	39 f0       	breq	.+14     	; 0x32a6 <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    3298:	69 91       	ld	r22, Y+
    329a:	c8 01       	movw	r24, r16
    329c:	0e 94 22 19 	call	0x3244	; 0x3244 <eeprom_write_byte_changed>
		src++;
		dest++;
    32a0:	0f 5f       	subi	r16, 0xFF	; 255
    32a2:	1f 4f       	sbci	r17, 0xFF	; 255
    32a4:	f6 cf       	rjmp	.-20     	; 0x3292 <eeprom_write_block_changes+0x16>
	}
}
    32a6:	df 91       	pop	r29
    32a8:	cf 91       	pop	r28
    32aa:	1f 91       	pop	r17
    32ac:	0f 91       	pop	r16
    32ae:	ff 90       	pop	r15
    32b0:	ef 90       	pop	r14
    32b2:	08 95       	ret

000032b4 <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    32b4:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    32b6:	4f e1       	ldi	r20, 0x1F	; 31
    32b8:	52 e0       	ldi	r21, 0x02	; 2
    32ba:	60 e0       	ldi	r22, 0x00	; 0
    32bc:	70 e0       	ldi	r23, 0x00	; 0
    32be:	87 ed       	ldi	r24, 0xD7	; 215
    32c0:	95 e0       	ldi	r25, 0x05	; 5
    32c2:	0e 94 3e 19 	call	0x327c	; 0x327c <eeprom_write_block_changes>
	sei();
    32c6:	78 94       	sei
    32c8:	08 95       	ret

000032ca <Update_V1_0_to_V1_1_B7>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 Beta 7 structure
void Update_V1_0_to_V1_1_B7(void)
{
    32ca:	2f 92       	push	r2
    32cc:	3f 92       	push	r3
    32ce:	4f 92       	push	r4
    32d0:	5f 92       	push	r5
    32d2:	6f 92       	push	r6
    32d4:	7f 92       	push	r7
    32d6:	8f 92       	push	r8
    32d8:	9f 92       	push	r9
    32da:	af 92       	push	r10
    32dc:	bf 92       	push	r11
    32de:	cf 92       	push	r12
    32e0:	df 92       	push	r13
    32e2:	ef 92       	push	r14
    32e4:	ff 92       	push	r15
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	c5 54       	subi	r28, 0x45	; 69
    32f4:	d1 40       	sbci	r29, 0x01	; 1
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume. For some reason it gets clobbered.
	// We mustn't use hard-coded values are these change each version.
	// Use an offset from the current Config structure address
	memcpy((void*)&temp,(void*)((&Config.setup) + (377)),1);
    3300:	40 91 50 07 	lds	r20, 0x0750
    3304:	cf 5b       	subi	r28, 0xBF	; 191
    3306:	de 4f       	sbci	r29, 0xFE	; 254
    3308:	48 83       	st	Y, r20
    330a:	c1 54       	subi	r28, 0x41	; 65
    330c:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
    330e:	4a e4       	ldi	r20, 0x4A	; 74
    3310:	50 e0       	ldi	r21, 0x00	; 0
    3312:	61 e5       	ldi	r22, 0x51	; 81
    3314:	77 e0       	ldi	r23, 0x07	; 7
    3316:	89 e9       	ldi	r24, 0x99	; 153
    3318:	97 e0       	ldi	r25, 0x07	; 7
    331a:	0e 94 8d 51 	call	0xa31a	; 0xa31a <memmove>
    331e:	29 e6       	ldi	r18, 0x69	; 105
    3320:	36 e0       	ldi	r19, 0x06	; 6
    3322:	ae 01       	movw	r20, r28
    3324:	4f 5c       	subi	r20, 0xCF	; 207
    3326:	5e 4f       	sbci	r21, 0xFE	; 254
    3328:	ce 01       	movw	r24, r28
    332a:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    332c:	6d e1       	ldi	r22, 0x1D	; 29
    332e:	f9 01       	movw	r30, r18
    3330:	dc 01       	movw	r26, r24
    3332:	76 2f       	mov	r23, r22
    3334:	01 90       	ld	r0, Z+
    3336:	0d 92       	st	X+, r0
    3338:	7a 95       	dec	r23
    333a:	e1 f7       	brne	.-8      	; 0x3334 <Update_V1_0_to_V1_1_B7+0x6a>
    333c:	86 96       	adiw	r24, 0x26	; 38
    333e:	23 5e       	subi	r18, 0xE3	; 227
    3340:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    3342:	84 17       	cp	r24, r20
    3344:	95 07       	cpc	r25, r21
    3346:	99 f7       	brne	.-26     	; 0x332e <Update_V1_0_to_V1_1_B7+0x64>
    3348:	4e 01       	movw	r8, r28
    334a:	83 e1       	ldi	r24, 0x13	; 19
    334c:	88 0e       	add	r8, r24
    334e:	91 1c       	adc	r9, r1
    3350:	5e 01       	movw	r10, r28
    3352:	94 e1       	ldi	r25, 0x14	; 20
    3354:	a9 0e       	add	r10, r25
    3356:	b1 1c       	adc	r11, r1
    3358:	6e 01       	movw	r12, r28
    335a:	e5 e1       	ldi	r30, 0x15	; 21
    335c:	ce 0e       	add	r12, r30
    335e:	d1 1c       	adc	r13, r1
    3360:	ce 01       	movw	r24, r28
    3362:	46 96       	adiw	r24, 0x16	; 22
    3364:	cf 5c       	subi	r28, 0xCF	; 207
    3366:	de 4f       	sbci	r29, 0xFE	; 254
    3368:	99 83       	std	Y+1, r25	; 0x01
    336a:	88 83       	st	Y, r24
    336c:	c1 53       	subi	r28, 0x31	; 49
    336e:	d1 40       	sbci	r29, 0x01	; 1
    3370:	8e 01       	movw	r16, r28
    3372:	02 5e       	subi	r16, 0xE2	; 226
    3374:	1f 4f       	sbci	r17, 0xFF	; 255
    3376:	fe 01       	movw	r30, r28
    3378:	7d 96       	adiw	r30, 0x1d	; 29
    337a:	c7 5c       	subi	r28, 0xC7	; 199
    337c:	de 4f       	sbci	r29, 0xFE	; 254
    337e:	f9 83       	std	Y+1, r31	; 0x01
    3380:	e8 83       	st	Y, r30
    3382:	c9 53       	subi	r28, 0x39	; 57
    3384:	d1 40       	sbci	r29, 0x01	; 1
    3386:	06 96       	adiw	r24, 0x06	; 6
    3388:	cd 5c       	subi	r28, 0xCD	; 205
    338a:	de 4f       	sbci	r29, 0xFE	; 254
    338c:	99 83       	std	Y+1, r25	; 0x01
    338e:	88 83       	st	Y, r24
    3390:	c3 53       	subi	r28, 0x33	; 51
    3392:	d1 40       	sbci	r29, 0x01	; 1
    3394:	32 97       	sbiw	r30, 0x02	; 2
    3396:	c3 5c       	subi	r28, 0xC3	; 195
    3398:	de 4f       	sbci	r29, 0xFE	; 254
    339a:	f9 83       	std	Y+1, r31	; 0x01
    339c:	e8 83       	st	Y, r30
    339e:	cd 53       	subi	r28, 0x3D	; 61
    33a0:	d1 40       	sbci	r29, 0x01	; 1
    33a2:	02 97       	sbiw	r24, 0x02	; 2
    33a4:	c9 5c       	subi	r28, 0xC9	; 201
    33a6:	de 4f       	sbci	r29, 0xFE	; 254
    33a8:	99 83       	std	Y+1, r25	; 0x01
    33aa:	88 83       	st	Y, r24
    33ac:	c7 53       	subi	r28, 0x37	; 55
    33ae:	d1 40       	sbci	r29, 0x01	; 1
    33b0:	32 97       	sbiw	r30, 0x02	; 2
    33b2:	c5 5c       	subi	r28, 0xC5	; 197
    33b4:	de 4f       	sbci	r29, 0xFE	; 254
    33b6:	f9 83       	std	Y+1, r31	; 0x01
    33b8:	e8 83       	st	Y, r30
    33ba:	cb 53       	subi	r28, 0x3B	; 59
    33bc:	d1 40       	sbci	r29, 0x01	; 1
    33be:	02 97       	sbiw	r24, 0x02	; 2
    33c0:	cb 5c       	subi	r28, 0xCB	; 203
    33c2:	de 4f       	sbci	r29, 0xFE	; 254
    33c4:	99 83       	std	Y+1, r25	; 0x01
    33c6:	88 83       	st	Y, r24
    33c8:	c5 53       	subi	r28, 0x35	; 53
    33ca:	d1 40       	sbci	r29, 0x01	; 1
    33cc:	7e 01       	movw	r14, r28
    33ce:	97 e1       	ldi	r25, 0x17	; 23
    33d0:	e9 0e       	add	r14, r25
    33d2:	f1 1c       	adc	r15, r1
    33d4:	3e 01       	movw	r6, r28
    33d6:	e5 e0       	ldi	r30, 0x05	; 5
    33d8:	6e 0e       	add	r6, r30
    33da:	71 1c       	adc	r7, r1
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	8c 0f       	add	r24, r28
    33e2:	9d 1f       	adc	r25, r29
    33e4:	83 5b       	subi	r24, 0xB3	; 179
    33e6:	9e 4f       	sbci	r25, 0xFE	; 254
    33e8:	ce 5b       	subi	r28, 0xBE	; 190
    33ea:	de 4f       	sbci	r29, 0xFE	; 254
    33ec:	99 83       	std	Y+1, r25	; 0x01
    33ee:	88 83       	st	Y, r24
    33f0:	c2 54       	subi	r28, 0x42	; 66
    33f2:	d1 40       	sbci	r29, 0x01	; 1
    33f4:	fe 01       	movw	r30, r28
    33f6:	31 96       	adiw	r30, 0x01	; 1
    33f8:	c1 5c       	subi	r28, 0xC1	; 193
    33fa:	de 4f       	sbci	r29, 0xFE	; 254
    33fc:	f9 83       	std	Y+1, r31	; 0x01
    33fe:	e8 83       	st	Y, r30
    3400:	cf 53       	subi	r28, 0x3F	; 63
    3402:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    3408:	44 24       	eor	r4, r4
    340a:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    340c:	49 e1       	ldi	r20, 0x19	; 25
    340e:	50 e0       	ldi	r21, 0x00	; 0
    3410:	b3 01       	movw	r22, r6
    3412:	c8 01       	movw	r24, r16
    3414:	48 97       	sbiw	r24, 0x18	; 24
    3416:	0e 94 8d 51 	call	0xa31a	; 0xa31a <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    341a:	f4 01       	movw	r30, r8
    341c:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    341e:	f5 01       	movw	r30, r10
    3420:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    3422:	f6 01       	movw	r30, r12
    3424:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    3426:	cf 5c       	subi	r28, 0xCF	; 207
    3428:	de 4f       	sbci	r29, 0xFE	; 254
    342a:	e8 81       	ld	r30, Y
    342c:	f9 81       	ldd	r31, Y+1	; 0x01
    342e:	c1 53       	subi	r28, 0x31	; 49
    3430:	d1 40       	sbci	r29, 0x01	; 1
    3432:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    3434:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
    3436:	36 fe       	sbrs	r3, 6
    3438:	02 c0       	rjmp	.+4      	; 0x343e <Update_V1_0_to_V1_1_B7+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    343a:	50 82       	st	Z, r5
    343c:	01 c0       	rjmp	.+2      	; 0x3440 <Update_V1_0_to_V1_1_B7+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    343e:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    3440:	48 e0       	ldi	r20, 0x08	; 8
    3442:	50 e0       	ldi	r21, 0x00	; 0
    3444:	b7 01       	movw	r22, r14
    3446:	c8 01       	movw	r24, r16
    3448:	01 96       	adiw	r24, 0x01	; 1
    344a:	cc 5b       	subi	r28, 0xBC	; 188
    344c:	de 4f       	sbci	r29, 0xFE	; 254
    344e:	28 83       	st	Y, r18
    3450:	c4 54       	subi	r28, 0x44	; 68
    3452:	d1 40       	sbci	r29, 0x01	; 1
    3454:	cb 5b       	subi	r28, 0xBB	; 187
    3456:	de 4f       	sbci	r29, 0xFE	; 254
    3458:	38 83       	st	Y, r19
    345a:	c5 54       	subi	r28, 0x45	; 69
    345c:	d1 40       	sbci	r29, 0x01	; 1
    345e:	0e 94 8d 51 	call	0xa31a	; 0xa31a <memmove>
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	cb 5b       	subi	r28, 0xBB	; 187
    3468:	de 4f       	sbci	r29, 0xFE	; 254
    346a:	38 81       	ld	r19, Y
    346c:	c5 54       	subi	r28, 0x45	; 69
    346e:	d1 40       	sbci	r29, 0x01	; 1
    3470:	cc 5b       	subi	r28, 0xBC	; 188
    3472:	de 4f       	sbci	r29, 0xFE	; 254
    3474:	28 81       	ld	r18, Y
    3476:	c4 54       	subi	r28, 0x44	; 68
    3478:	d1 40       	sbci	r29, 0x01	; 1
    347a:	c1 5c       	subi	r28, 0xC1	; 193
    347c:	de 4f       	sbci	r29, 0xFE	; 254
    347e:	e8 81       	ld	r30, Y
    3480:	f9 81       	ldd	r31, Y+1	; 0x01
    3482:	cf 53       	subi	r28, 0x3F	; 63
    3484:	d1 40       	sbci	r29, 0x01	; 1
    3486:	e8 0f       	add	r30, r24
    3488:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    348a:	46 8d       	ldd	r20, Z+30	; 0x1e
    348c:	4d 30       	cpi	r20, 0x0D	; 13
    348e:	11 f4       	brne	.+4      	; 0x3494 <Update_V1_0_to_V1_1_B7+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    3490:	4f e0       	ldi	r20, 0x0F	; 15
    3492:	46 8f       	std	Z+30, r20	; 0x1e
    3494:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    3496:	88 30       	cpi	r24, 0x08	; 8
    3498:	91 05       	cpc	r25, r1
    349a:	79 f7       	brne	.-34     	; 0x347a <Update_V1_0_to_V1_1_B7+0x1b0>
		// P1 roll gyro
		if (P1_sensors & (1 << RollGyro))
		{
			if (P1_scale & (1 << RollScale))
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    349c:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if (P1_sensors & (1 << RollGyro))
    349e:	30 fe       	sbrs	r3, 0
    34a0:	06 c0       	rjmp	.+12     	; 0x34ae <Update_V1_0_to_V1_1_B7+0x1e4>
		{
			if (P1_scale & (1 << RollScale))
    34a2:	30 ff       	sbrs	r19, 0
    34a4:	02 c0       	rjmp	.+4      	; 0x34aa <Update_V1_0_to_V1_1_B7+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    34a6:	50 82       	st	Z, r5
    34a8:	03 c0       	rjmp	.+6      	; 0x34b0 <Update_V1_0_to_V1_1_B7+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    34aa:	40 82       	st	Z, r4
    34ac:	01 c0       	rjmp	.+2      	; 0x34b0 <Update_V1_0_to_V1_1_B7+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    34ae:	10 82       	st	Z, r1
		// P2 roll gyro
		if (P2_sensors & (1 << RollGyro))
		{
			if (P2_scale & (1 << RollScale))
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    34b0:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if (P2_sensors & (1 << RollGyro))
    34b2:	20 ff       	sbrs	r18, 0
    34b4:	06 c0       	rjmp	.+12     	; 0x34c2 <Update_V1_0_to_V1_1_B7+0x1f8>
		{
			if (P2_scale & (1 << RollScale))
    34b6:	20 fe       	sbrs	r2, 0
    34b8:	02 c0       	rjmp	.+4      	; 0x34be <Update_V1_0_to_V1_1_B7+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    34ba:	50 82       	st	Z, r5
    34bc:	03 c0       	rjmp	.+6      	; 0x34c4 <Update_V1_0_to_V1_1_B7+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    34be:	40 82       	st	Z, r4
    34c0:	01 c0       	rjmp	.+2      	; 0x34c4 <Update_V1_0_to_V1_1_B7+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    34c2:	10 82       	st	Z, r1
		// P1 pitch gyro
		if (P1_sensors & (1 << PitchGyro))
		{
			if (P1_scale & (1 << PitchScale))
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    34c4:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if (P1_sensors & (1 << PitchGyro))
    34c6:	31 fe       	sbrs	r3, 1
    34c8:	06 c0       	rjmp	.+12     	; 0x34d6 <Update_V1_0_to_V1_1_B7+0x20c>
		{
			if (P1_scale & (1 << PitchScale))
    34ca:	31 ff       	sbrs	r19, 1
    34cc:	02 c0       	rjmp	.+4      	; 0x34d2 <Update_V1_0_to_V1_1_B7+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    34ce:	50 82       	st	Z, r5
    34d0:	03 c0       	rjmp	.+6      	; 0x34d8 <Update_V1_0_to_V1_1_B7+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    34d2:	40 82       	st	Z, r4
    34d4:	01 c0       	rjmp	.+2      	; 0x34d8 <Update_V1_0_to_V1_1_B7+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    34d6:	10 82       	st	Z, r1
		// P2 pitch gyro
		if (P2_sensors & (1 << PitchGyro))
		{
			if (P2_scale & (1 << PitchScale))
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    34d8:	cf 5c       	subi	r28, 0xCF	; 207
    34da:	de 4f       	sbci	r29, 0xFE	; 254
    34dc:	e8 81       	ld	r30, Y
    34de:	f9 81       	ldd	r31, Y+1	; 0x01
    34e0:	c1 53       	subi	r28, 0x31	; 49
    34e2:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if (P2_sensors & (1 << PitchGyro))
    34e4:	21 ff       	sbrs	r18, 1
    34e6:	06 c0       	rjmp	.+12     	; 0x34f4 <Update_V1_0_to_V1_1_B7+0x22a>
		{
			if (P2_scale & (1 << PitchScale))
    34e8:	21 fe       	sbrs	r2, 1
    34ea:	02 c0       	rjmp	.+4      	; 0x34f0 <Update_V1_0_to_V1_1_B7+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    34ec:	50 82       	st	Z, r5
    34ee:	03 c0       	rjmp	.+6      	; 0x34f6 <Update_V1_0_to_V1_1_B7+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    34f0:	40 82       	st	Z, r4
    34f2:	01 c0       	rjmp	.+2      	; 0x34f6 <Update_V1_0_to_V1_1_B7+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    34f4:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if (P1_sensors & (1 << YawGyro))
		{
			if (P1_scale & (1 << YawScale))
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    34f6:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if (P1_sensors & (1 << YawGyro))
    34f8:	32 fe       	sbrs	r3, 2
    34fa:	06 c0       	rjmp	.+12     	; 0x3508 <Update_V1_0_to_V1_1_B7+0x23e>
		{
			if (P1_scale & (1 << YawScale))
    34fc:	32 ff       	sbrs	r19, 2
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <Update_V1_0_to_V1_1_B7+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    3500:	50 82       	st	Z, r5
    3502:	03 c0       	rjmp	.+6      	; 0x350a <Update_V1_0_to_V1_1_B7+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    3504:	40 82       	st	Z, r4
    3506:	01 c0       	rjmp	.+2      	; 0x350a <Update_V1_0_to_V1_1_B7+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    3508:	10 82       	st	Z, r1
		// P2 yaw gyro
		if (P2_sensors & (1 << YawGyro))
		{
			if (P2_scale & (1 << YawScale))
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    350a:	cb 5c       	subi	r28, 0xCB	; 203
    350c:	de 4f       	sbci	r29, 0xFE	; 254
    350e:	e8 81       	ld	r30, Y
    3510:	f9 81       	ldd	r31, Y+1	; 0x01
    3512:	c5 53       	subi	r28, 0x35	; 53
    3514:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if (P2_sensors & (1 << YawGyro))
    3516:	22 ff       	sbrs	r18, 2
    3518:	06 c0       	rjmp	.+12     	; 0x3526 <Update_V1_0_to_V1_1_B7+0x25c>
		{
			if (P2_scale & (1 << YawScale))
    351a:	22 fe       	sbrs	r2, 2
    351c:	02 c0       	rjmp	.+4      	; 0x3522 <Update_V1_0_to_V1_1_B7+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    351e:	50 82       	st	Z, r5
    3520:	03 c0       	rjmp	.+6      	; 0x3528 <Update_V1_0_to_V1_1_B7+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    3522:	40 82       	st	Z, r4
    3524:	01 c0       	rjmp	.+2      	; 0x3528 <Update_V1_0_to_V1_1_B7+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    3526:	10 82       	st	Z, r1
		// P1 roll acc
		if (P1_sensors & (1 << RollAcc))
		{
			if (P1_scale & (1 << AccRollScale))
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    3528:	c5 5c       	subi	r28, 0xC5	; 197
    352a:	de 4f       	sbci	r29, 0xFE	; 254
    352c:	e8 81       	ld	r30, Y
    352e:	f9 81       	ldd	r31, Y+1	; 0x01
    3530:	cb 53       	subi	r28, 0x3B	; 59
    3532:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if (P1_sensors & (1 << RollAcc))
    3534:	33 fe       	sbrs	r3, 3
    3536:	06 c0       	rjmp	.+12     	; 0x3544 <Update_V1_0_to_V1_1_B7+0x27a>
		{
			if (P1_scale & (1 << AccRollScale))
    3538:	33 ff       	sbrs	r19, 3
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <Update_V1_0_to_V1_1_B7+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    353c:	50 82       	st	Z, r5
    353e:	03 c0       	rjmp	.+6      	; 0x3546 <Update_V1_0_to_V1_1_B7+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    3540:	40 82       	st	Z, r4
    3542:	01 c0       	rjmp	.+2      	; 0x3546 <Update_V1_0_to_V1_1_B7+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    3544:	10 82       	st	Z, r1
		// P2 roll acc
		if (P2_sensors & (1 << RollAcc))
		{
			if (P2_scale & (1 << AccRollScale))
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    3546:	c9 5c       	subi	r28, 0xC9	; 201
    3548:	de 4f       	sbci	r29, 0xFE	; 254
    354a:	e8 81       	ld	r30, Y
    354c:	f9 81       	ldd	r31, Y+1	; 0x01
    354e:	c7 53       	subi	r28, 0x37	; 55
    3550:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if (P2_sensors & (1 << RollAcc))
    3552:	23 ff       	sbrs	r18, 3
    3554:	06 c0       	rjmp	.+12     	; 0x3562 <Update_V1_0_to_V1_1_B7+0x298>
		{
			if (P2_scale & (1 << AccRollScale))
    3556:	23 fe       	sbrs	r2, 3
    3558:	02 c0       	rjmp	.+4      	; 0x355e <Update_V1_0_to_V1_1_B7+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    355a:	50 82       	st	Z, r5
    355c:	03 c0       	rjmp	.+6      	; 0x3564 <Update_V1_0_to_V1_1_B7+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    355e:	40 82       	st	Z, r4
    3560:	01 c0       	rjmp	.+2      	; 0x3564 <Update_V1_0_to_V1_1_B7+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    3562:	10 82       	st	Z, r1
		// P1 pitch acc
		if (P1_sensors & (1 << PitchAcc))
		{
			if (P1_scale & (1 << AccPitchScale))
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    3564:	c3 5c       	subi	r28, 0xC3	; 195
    3566:	de 4f       	sbci	r29, 0xFE	; 254
    3568:	e8 81       	ld	r30, Y
    356a:	f9 81       	ldd	r31, Y+1	; 0x01
    356c:	cd 53       	subi	r28, 0x3D	; 61
    356e:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if (P1_sensors & (1 << PitchAcc))
    3570:	34 fe       	sbrs	r3, 4
    3572:	06 c0       	rjmp	.+12     	; 0x3580 <Update_V1_0_to_V1_1_B7+0x2b6>
		{
			if (P1_scale & (1 << AccPitchScale))
    3574:	34 ff       	sbrs	r19, 4
    3576:	02 c0       	rjmp	.+4      	; 0x357c <Update_V1_0_to_V1_1_B7+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    3578:	50 82       	st	Z, r5
    357a:	03 c0       	rjmp	.+6      	; 0x3582 <Update_V1_0_to_V1_1_B7+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    357c:	40 82       	st	Z, r4
    357e:	01 c0       	rjmp	.+2      	; 0x3582 <Update_V1_0_to_V1_1_B7+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    3580:	10 82       	st	Z, r1
		// P2 pitch acc
		if (P2_sensors & (1 << PitchAcc))
		{
			if (P2_scale & (1 << AccPitchScale))
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    3582:	cd 5c       	subi	r28, 0xCD	; 205
    3584:	de 4f       	sbci	r29, 0xFE	; 254
    3586:	e8 81       	ld	r30, Y
    3588:	f9 81       	ldd	r31, Y+1	; 0x01
    358a:	c3 53       	subi	r28, 0x33	; 51
    358c:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if (P2_sensors & (1 << PitchAcc))
    358e:	24 ff       	sbrs	r18, 4
    3590:	06 c0       	rjmp	.+12     	; 0x359e <Update_V1_0_to_V1_1_B7+0x2d4>
		{
			if (P2_scale & (1 << AccPitchScale))
    3592:	24 fe       	sbrs	r2, 4
    3594:	02 c0       	rjmp	.+4      	; 0x359a <Update_V1_0_to_V1_1_B7+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    3596:	50 82       	st	Z, r5
    3598:	03 c0       	rjmp	.+6      	; 0x35a0 <Update_V1_0_to_V1_1_B7+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    359a:	40 82       	st	Z, r4
    359c:	01 c0       	rjmp	.+2      	; 0x35a0 <Update_V1_0_to_V1_1_B7+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    359e:	10 82       	st	Z, r1
		// P1 Z delta acc
		if (P1_sensors & (1 << ZDeltaAcc))
		{
			if (P1_scale & (1 << AccZScale))
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    35a0:	c7 5c       	subi	r28, 0xC7	; 199
    35a2:	de 4f       	sbci	r29, 0xFE	; 254
    35a4:	e8 81       	ld	r30, Y
    35a6:	f9 81       	ldd	r31, Y+1	; 0x01
    35a8:	c9 53       	subi	r28, 0x39	; 57
    35aa:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if (P1_sensors & (1 << ZDeltaAcc))
    35ac:	35 fe       	sbrs	r3, 5
    35ae:	06 c0       	rjmp	.+12     	; 0x35bc <Update_V1_0_to_V1_1_B7+0x2f2>
		{
			if (P1_scale & (1 << AccZScale))
    35b0:	35 ff       	sbrs	r19, 5
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <Update_V1_0_to_V1_1_B7+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    35b4:	50 82       	st	Z, r5
    35b6:	03 c0       	rjmp	.+6      	; 0x35be <Update_V1_0_to_V1_1_B7+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    35b8:	40 82       	st	Z, r4
    35ba:	01 c0       	rjmp	.+2      	; 0x35be <Update_V1_0_to_V1_1_B7+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    35bc:	10 82       	st	Z, r1
		// P2 Z delta acc
		if (P2_sensors & (1 << ZDeltaAcc))
		{
			if (P2_scale & (1 << AccZScale))
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    35be:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if (P2_sensors & (1 << ZDeltaAcc))
    35c0:	25 ff       	sbrs	r18, 5
    35c2:	06 c0       	rjmp	.+12     	; 0x35d0 <Update_V1_0_to_V1_1_B7+0x306>
		{
			if (P2_scale & (1 << AccZScale))
    35c4:	25 fe       	sbrs	r2, 5
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <Update_V1_0_to_V1_1_B7+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    35c8:	50 82       	st	Z, r5
    35ca:	03 c0       	rjmp	.+6      	; 0x35d2 <Update_V1_0_to_V1_1_B7+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    35cc:	40 82       	st	Z, r4
    35ce:	01 c0       	rjmp	.+2      	; 0x35d2 <Update_V1_0_to_V1_1_B7+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    35d0:	10 82       	st	Z, r1
    35d2:	c1 5c       	subi	r28, 0xC1	; 193
    35d4:	de 4f       	sbci	r29, 0xFE	; 254
    35d6:	88 81       	ld	r24, Y
    35d8:	99 81       	ldd	r25, Y+1	; 0x01
    35da:	cf 53       	subi	r28, 0x3F	; 63
    35dc:	d1 40       	sbci	r29, 0x01	; 1
    35de:	86 96       	adiw	r24, 0x26	; 38
    35e0:	c1 5c       	subi	r28, 0xC1	; 193
    35e2:	de 4f       	sbci	r29, 0xFE	; 254
    35e4:	99 83       	std	Y+1, r25	; 0x01
    35e6:	88 83       	st	Y, r24
    35e8:	cf 53       	subi	r28, 0x3F	; 63
    35ea:	d1 40       	sbci	r29, 0x01	; 1
    35ec:	96 e2       	ldi	r25, 0x26	; 38
    35ee:	89 0e       	add	r8, r25
    35f0:	91 1c       	adc	r9, r1
    35f2:	e6 e2       	ldi	r30, 0x26	; 38
    35f4:	ae 0e       	add	r10, r30
    35f6:	b1 1c       	adc	r11, r1
    35f8:	f6 e2       	ldi	r31, 0x26	; 38
    35fa:	cf 0e       	add	r12, r31
    35fc:	d1 1c       	adc	r13, r1
    35fe:	cf 5c       	subi	r28, 0xCF	; 207
    3600:	de 4f       	sbci	r29, 0xFE	; 254
    3602:	88 81       	ld	r24, Y
    3604:	99 81       	ldd	r25, Y+1	; 0x01
    3606:	c1 53       	subi	r28, 0x31	; 49
    3608:	d1 40       	sbci	r29, 0x01	; 1
    360a:	86 96       	adiw	r24, 0x26	; 38
    360c:	cf 5c       	subi	r28, 0xCF	; 207
    360e:	de 4f       	sbci	r29, 0xFE	; 254
    3610:	99 83       	std	Y+1, r25	; 0x01
    3612:	88 83       	st	Y, r24
    3614:	c1 53       	subi	r28, 0x31	; 49
    3616:	d1 40       	sbci	r29, 0x01	; 1
    3618:	0a 5d       	subi	r16, 0xDA	; 218
    361a:	1f 4f       	sbci	r17, 0xFF	; 255
    361c:	c7 5c       	subi	r28, 0xC7	; 199
    361e:	de 4f       	sbci	r29, 0xFE	; 254
    3620:	e8 81       	ld	r30, Y
    3622:	f9 81       	ldd	r31, Y+1	; 0x01
    3624:	c9 53       	subi	r28, 0x39	; 57
    3626:	d1 40       	sbci	r29, 0x01	; 1
    3628:	b6 96       	adiw	r30, 0x26	; 38
    362a:	c7 5c       	subi	r28, 0xC7	; 199
    362c:	de 4f       	sbci	r29, 0xFE	; 254
    362e:	f9 83       	std	Y+1, r31	; 0x01
    3630:	e8 83       	st	Y, r30
    3632:	c9 53       	subi	r28, 0x39	; 57
    3634:	d1 40       	sbci	r29, 0x01	; 1
    3636:	cd 5c       	subi	r28, 0xCD	; 205
    3638:	de 4f       	sbci	r29, 0xFE	; 254
    363a:	88 81       	ld	r24, Y
    363c:	99 81       	ldd	r25, Y+1	; 0x01
    363e:	c3 53       	subi	r28, 0x33	; 51
    3640:	d1 40       	sbci	r29, 0x01	; 1
    3642:	86 96       	adiw	r24, 0x26	; 38
    3644:	cd 5c       	subi	r28, 0xCD	; 205
    3646:	de 4f       	sbci	r29, 0xFE	; 254
    3648:	99 83       	std	Y+1, r25	; 0x01
    364a:	88 83       	st	Y, r24
    364c:	c3 53       	subi	r28, 0x33	; 51
    364e:	d1 40       	sbci	r29, 0x01	; 1
    3650:	c3 5c       	subi	r28, 0xC3	; 195
    3652:	de 4f       	sbci	r29, 0xFE	; 254
    3654:	e8 81       	ld	r30, Y
    3656:	f9 81       	ldd	r31, Y+1	; 0x01
    3658:	cd 53       	subi	r28, 0x3D	; 61
    365a:	d1 40       	sbci	r29, 0x01	; 1
    365c:	b6 96       	adiw	r30, 0x26	; 38
    365e:	c3 5c       	subi	r28, 0xC3	; 195
    3660:	de 4f       	sbci	r29, 0xFE	; 254
    3662:	f9 83       	std	Y+1, r31	; 0x01
    3664:	e8 83       	st	Y, r30
    3666:	cd 53       	subi	r28, 0x3D	; 61
    3668:	d1 40       	sbci	r29, 0x01	; 1
    366a:	c9 5c       	subi	r28, 0xC9	; 201
    366c:	de 4f       	sbci	r29, 0xFE	; 254
    366e:	88 81       	ld	r24, Y
    3670:	99 81       	ldd	r25, Y+1	; 0x01
    3672:	c7 53       	subi	r28, 0x37	; 55
    3674:	d1 40       	sbci	r29, 0x01	; 1
    3676:	86 96       	adiw	r24, 0x26	; 38
    3678:	c9 5c       	subi	r28, 0xC9	; 201
    367a:	de 4f       	sbci	r29, 0xFE	; 254
    367c:	99 83       	std	Y+1, r25	; 0x01
    367e:	88 83       	st	Y, r24
    3680:	c7 53       	subi	r28, 0x37	; 55
    3682:	d1 40       	sbci	r29, 0x01	; 1
    3684:	c5 5c       	subi	r28, 0xC5	; 197
    3686:	de 4f       	sbci	r29, 0xFE	; 254
    3688:	e8 81       	ld	r30, Y
    368a:	f9 81       	ldd	r31, Y+1	; 0x01
    368c:	cb 53       	subi	r28, 0x3B	; 59
    368e:	d1 40       	sbci	r29, 0x01	; 1
    3690:	b6 96       	adiw	r30, 0x26	; 38
    3692:	c5 5c       	subi	r28, 0xC5	; 197
    3694:	de 4f       	sbci	r29, 0xFE	; 254
    3696:	f9 83       	std	Y+1, r31	; 0x01
    3698:	e8 83       	st	Y, r30
    369a:	cb 53       	subi	r28, 0x3B	; 59
    369c:	d1 40       	sbci	r29, 0x01	; 1
    369e:	cb 5c       	subi	r28, 0xCB	; 203
    36a0:	de 4f       	sbci	r29, 0xFE	; 254
    36a2:	88 81       	ld	r24, Y
    36a4:	99 81       	ldd	r25, Y+1	; 0x01
    36a6:	c5 53       	subi	r28, 0x35	; 53
    36a8:	d1 40       	sbci	r29, 0x01	; 1
    36aa:	86 96       	adiw	r24, 0x26	; 38
    36ac:	cb 5c       	subi	r28, 0xCB	; 203
    36ae:	de 4f       	sbci	r29, 0xFE	; 254
    36b0:	99 83       	std	Y+1, r25	; 0x01
    36b2:	88 83       	st	Y, r24
    36b4:	c5 53       	subi	r28, 0x35	; 53
    36b6:	d1 40       	sbci	r29, 0x01	; 1
    36b8:	96 e2       	ldi	r25, 0x26	; 38
    36ba:	e9 0e       	add	r14, r25
    36bc:	f1 1c       	adc	r15, r1
    36be:	e6 e2       	ldi	r30, 0x26	; 38
    36c0:	6e 0e       	add	r6, r30
    36c2:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    36c4:	ce 5b       	subi	r28, 0xBE	; 190
    36c6:	de 4f       	sbci	r29, 0xFE	; 254
    36c8:	88 81       	ld	r24, Y
    36ca:	99 81       	ldd	r25, Y+1	; 0x01
    36cc:	c2 54       	subi	r28, 0x42	; 66
    36ce:	d1 40       	sbci	r29, 0x01	; 1
    36d0:	08 17       	cp	r16, r24
    36d2:	19 07       	cpc	r17, r25
    36d4:	09 f0       	breq	.+2      	; 0x36d8 <Update_V1_0_to_V1_1_B7+0x40e>
    36d6:	9a ce       	rjmp	.-716    	; 0x340c <Update_V1_0_to_V1_1_B7+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    36d8:	8f e2       	ldi	r24, 0x2F	; 47
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	fe 01       	movw	r30, r28
    36de:	31 96       	adiw	r30, 0x01	; 1
    36e0:	a9 e6       	ldi	r26, 0x69	; 105
    36e2:	b6 e0       	ldi	r27, 0x06	; 6
    36e4:	01 90       	ld	r0, Z+
    36e6:	0d 92       	st	X+, r0
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	e1 f7       	brne	.-8      	; 0x36e4 <Update_V1_0_to_V1_1_B7+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; 
    36ec:	cf 5b       	subi	r28, 0xBF	; 191
    36ee:	de 4f       	sbci	r29, 0xFE	; 254
    36f0:	98 81       	ld	r25, Y
    36f2:	c1 54       	subi	r28, 0x41	; 65
    36f4:	d1 40       	sbci	r29, 0x01	; 1
    36f6:	90 93 98 07 	sts	0x0798, r25

	// Set magic number to V1.1 Beta 7 signature
	Config.setup = V1_1_B7_SIGNATURE;
    36fa:	86 e3       	ldi	r24, 0x36	; 54
    36fc:	80 93 d7 05 	sts	0x05D7, r24
}
    3700:	cb 5b       	subi	r28, 0xBB	; 187
    3702:	de 4f       	sbci	r29, 0xFE	; 254
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
    370e:	df 91       	pop	r29
    3710:	cf 91       	pop	r28
    3712:	1f 91       	pop	r17
    3714:	0f 91       	pop	r16
    3716:	ff 90       	pop	r15
    3718:	ef 90       	pop	r14
    371a:	df 90       	pop	r13
    371c:	cf 90       	pop	r12
    371e:	bf 90       	pop	r11
    3720:	af 90       	pop	r10
    3722:	9f 90       	pop	r9
    3724:	8f 90       	pop	r8
    3726:	7f 90       	pop	r7
    3728:	6f 90       	pop	r6
    372a:	5f 90       	pop	r5
    372c:	4f 90       	pop	r4
    372e:	3f 90       	pop	r3
    3730:	2f 90       	pop	r2
    3732:	08 95       	ret

00003734 <Update_V1_1_to_V1_1_B8>:

// Upgrade V1.1 beta 7 structure to V1.1 Beta 8 structure
void Update_V1_1_to_V1_1_B8(void)
{
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	2c 97       	sbiw	r28, 0x0c	; 12
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	cd bf       	out	0x3d, r28	; 61
	int8_t	buffer[12];
	int8_t	temp = 0;
	
	// RC items - working perfectly, but really mustn't use variable names 
	// here as they MIGHT CHANGE LOCATION. Use an offset from the start instead
	buffer[0] = Config.RxMode;			// RxMode. Same as old RxMode
    3748:	80 91 00 06 	lds	r24, 0x0600
    374c:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = Config.MPU6050_LPF;		// Servo_rate
    374e:	80 91 64 06 	lds	r24, 0x0664
    3752:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = Config.Servo_rate;		// PWM_Sync
    3754:	80 91 01 06 	lds	r24, 0x0601
    3758:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = Config.PWM_Sync;		// TxSeq
    375a:	80 91 02 06 	lds	r24, 0x0602
    375e:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = Config.TxSeq;			// FlightChan
    3760:	80 91 03 06 	lds	r24, 0x0603
    3764:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = Config.AileronPol;		// TransitionSpeed
    3766:	90 91 e0 07 	lds	r25, 0x07E0
    376a:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6] = Config.ElevatorPol;		// Transition_P1n
    376c:	90 91 08 06 	lds	r25, 0x0608
    3770:	9f 83       	std	Y+7, r25	; 0x07
	buffer[7] = Config.FlightChan;		// AileronPol
    3772:	90 91 04 06 	lds	r25, 0x0604
    3776:	98 87       	std	Y+8, r25	; 0x08
	buffer[8] = Config.TransitionSpeed;	// ElevatorPol
    3778:	90 91 05 06 	lds	r25, 0x0605
    377c:	99 87       	std	Y+9, r25	; 0x09
	
	// General items
	memcpy((void*)&temp,(void*)((&Config.CF_factor) + (1)),1);
    377e:	20 91 68 06 	lds	r18, 0x0668
	buffer[9] = temp;					// Old MPU6050LPF value
    3782:	2a 87       	std	Y+10, r18	; 0x0a
	buffer[10] = Config.Transition_P1n; // Old RudderPol value
    3784:	90 91 06 06 	lds	r25, 0x0606
    3788:	9b 87       	std	Y+11, r25	; 0x0b
		
	// Copy back to RC items structure
	memcpy(&Config.RxMode, &buffer,9);
    378a:	39 e0       	ldi	r19, 0x09	; 9
    378c:	fe 01       	movw	r30, r28
    378e:	31 96       	adiw	r30, 0x01	; 1
    3790:	a0 e0       	ldi	r26, 0x00	; 0
    3792:	b6 e0       	ldi	r27, 0x06	; 6
    3794:	01 90       	ld	r0, Z+
    3796:	0d 92       	st	X+, r0
    3798:	3a 95       	dec	r19
    379a:	e1 f7       	brne	.-8      	; 0x3794 <Update_V1_1_to_V1_1_B8+0x60>
	
	// Copy back to General items structure
	Config.MPU6050_LPF = buffer[9];
    379c:	20 93 64 06 	sts	0x0664, r18
	temp = buffer[10];					// Pass through the RudderPol value
	memcpy((void*)((&Config.CF_factor) + (1)), (void*)&temp,1);
    37a0:	90 93 68 06 	sts	0x0668, r25
	
	// "None" no longer an option for this channel
	if (Config.FlightChan == NOCHAN)
    37a4:	88 30       	cpi	r24, 0x08	; 8
    37a6:	19 f4       	brne	.+6      	; 0x37ae <Update_V1_1_to_V1_1_B8+0x7a>
	{
		Config.FlightChan = AUX3;
    37a8:	87 e0       	ldi	r24, 0x07	; 7
    37aa:	80 93 04 06 	sts	0x0604, r24
	}
	
	// Set magic number to V1.1 Beta 8 signature
	Config.setup = V1_1_B8_SIGNATURE;
    37ae:	87 e3       	ldi	r24, 0x37	; 55
    37b0:	80 93 d7 05 	sts	0x05D7, r24
}
    37b4:	2c 96       	adiw	r28, 0x0c	; 12
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
    37c0:	df 91       	pop	r29
    37c2:	cf 91       	pop	r28
    37c4:	08 95       	ret

000037c6 <Update_V1_1B8_to_V1_1_B10>:

// Upgrade V1.1 B8 settings to V1.1 Beta 10 settings
void Update_V1_1B8_to_V1_1_B10(void)
{
	// Reset filters to more appropriate values
	Config.Acc_LPF = convert_filter_B8_B10(Config.Acc_LPF);
    37c6:	e0 91 65 06 	lds	r30, 0x0665
    37ca:	e7 30       	cpi	r30, 0x07	; 7
    37cc:	28 f4       	brcc	.+10     	; 0x37d8 <Update_V1_1B8_to_V1_1_B10+0x12>
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	e2 5f       	subi	r30, 0xF2	; 242
    37d2:	fa 4f       	sbci	r31, 0xFA	; 250
    37d4:	80 81       	ld	r24, Z
    37d6:	01 c0       	rjmp	.+2      	; 0x37da <Update_V1_1B8_to_V1_1_B10+0x14>
    37d8:	87 e0       	ldi	r24, 0x07	; 7
    37da:	80 93 65 06 	sts	0x0665, r24
	Config.Gyro_LPF = convert_filter_B8_B10(Config.Gyro_LPF);
    37de:	e0 91 66 06 	lds	r30, 0x0666
    37e2:	e7 30       	cpi	r30, 0x07	; 7
    37e4:	28 f4       	brcc	.+10     	; 0x37f0 <Update_V1_1B8_to_V1_1_B10+0x2a>
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	e2 5f       	subi	r30, 0xF2	; 242
    37ea:	fa 4f       	sbci	r31, 0xFA	; 250
    37ec:	80 81       	ld	r24, Z
    37ee:	01 c0       	rjmp	.+2      	; 0x37f2 <Update_V1_1B8_to_V1_1_B10+0x2c>
    37f0:	87 e0       	ldi	r24, 0x07	; 7
    37f2:	80 93 66 06 	sts	0x0666, r24

	// Set magic number to V1.1 Beta 10 signature
	Config.setup = V1_1_B10_SIGNATURE;
    37f6:	88 e3       	ldi	r24, 0x38	; 56
    37f8:	80 93 d7 05 	sts	0x05D7, r24
    37fc:	08 95       	ret

000037fe <Update_V1_1B10_to_V1_1_B12>:

// Upgrade V1.1 B10+ settings to V1.1 Beta 12 settings
void Update_V1_1B10_to_V1_1_B12(void)
{
	// Copy old RudderPol value to new location
	Config.AileronPol = Config.Preset;
    37fe:	e8 e6       	ldi	r30, 0x68	; 104
    3800:	f6 e0       	ldi	r31, 0x06	; 6
    3802:	80 81       	ld	r24, Z
    3804:	80 93 e0 07 	sts	0x07E0, r24
	
	// Set preset to default and load it
	Config.Preset = QUADX;
    3808:	10 82       	st	Z, r1

	// Set magic number to V1.1 Beta 11 signature
	Config.setup = V1_1_B12_SIGNATURE;
    380a:	89 e3       	ldi	r24, 0x39	; 57
    380c:	80 93 d7 05 	sts	0x05D7, r24
    3810:	08 95       	ret

00003812 <Update_V1_1B12_to_V1_1_B18>:

// Upgrade V1.1 B12+ settings to V1.2 Beta 3 settings
void Update_V1_1B12_to_V1_1_B18(void)
{
	// Copy old RudderPol value to new location
	Config.RudderPol = Config.Preset;
    3812:	80 91 68 06 	lds	r24, 0x0668
    3816:	80 93 df 07 	sts	0x07DF, r24
	
	// Set magic number to V1.1 Beta 18 signature
	Config.setup = V1_2_B3_SIGNATURE;
    381a:	8a e3       	ldi	r24, 0x3A	; 58
    381c:	80 93 d7 05 	sts	0x05D7, r24
    3820:	08 95       	ret

00003822 <Load_eeprom_preset>:
	Load_eeprom_preset(QUADX);
	Config.Preset = OPTIONS; // Menu will display "Options"
}

void Load_eeprom_preset(uint8_t preset)
{
    3822:	0f 93       	push	r16
    3824:	1f 93       	push	r17
    3826:	cf 93       	push	r28
    3828:	df 93       	push	r29
	uint8_t i;

	// Erase current profile settings
	memset(&Config.FlightMode[P1],0,sizeof(flight_control_t));
    382a:	92 e1       	ldi	r25, 0x12	; 18
    382c:	e9 e0       	ldi	r30, 0x09	; 9
    382e:	f6 e0       	ldi	r31, 0x06	; 6
    3830:	df 01       	movw	r26, r30
    3832:	29 2f       	mov	r18, r25
    3834:	1d 92       	st	X+, r1
    3836:	2a 95       	dec	r18
    3838:	e9 f7       	brne	.-6      	; 0x3834 <Load_eeprom_preset+0x12>
	memset(&Config.FlightMode[P2],0,sizeof(flight_control_t));
    383a:	eb e1       	ldi	r30, 0x1B	; 27
    383c:	f6 e0       	ldi	r31, 0x06	; 6
    383e:	df 01       	movw	r26, r30
    3840:	1d 92       	st	X+, r1
    3842:	9a 95       	dec	r25
    3844:	e9 f7       	brne	.-6      	; 0x3840 <Load_eeprom_preset+0x1e>

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);
    3846:	20 e3       	ldi	r18, 0x30	; 48
    3848:	31 e0       	ldi	r19, 0x01	; 1
    384a:	e9 e6       	ldi	r30, 0x69	; 105
    384c:	f6 e0       	ldi	r31, 0x06	; 6
    384e:	df 01       	movw	r26, r30
    3850:	a9 01       	movw	r20, r18
    3852:	1d 92       	st	X+, r1
    3854:	41 50       	subi	r20, 0x01	; 1
    3856:	50 40       	sbci	r21, 0x00	; 0
    3858:	e1 f7       	brne	.-8      	; 0x3852 <Load_eeprom_preset+0x30>
    385a:	ed e8       	ldi	r30, 0x8D	; 141
    385c:	f6 e0       	ldi	r31, 0x06	; 6
    385e:	c1 ea       	ldi	r28, 0xA1	; 161
    3860:	d7 e0       	ldi	r29, 0x07	; 7
    3862:	09 ea       	ldi	r16, 0xA9	; 169
    3864:	17 e0       	ldi	r17, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3866:	72 e3       	ldi	r23, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3868:	9f e0       	ldi	r25, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    386a:	6c e9       	ldi	r22, 0x9C	; 156
		Config.max_travel[i] = 100;
    386c:	44 e6       	ldi	r20, 0x64	; 100
    386e:	9f 01       	movw	r18, r30
    3870:	2e 51       	subi	r18, 0x1E	; 30
    3872:	31 09       	sbc	r19, r1
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3874:	52 e3       	ldi	r21, 0x32	; 50
    3876:	d9 01       	movw	r26, r18
    3878:	7c 93       	st	X, r23
    387a:	28 5e       	subi	r18, 0xE8	; 232
    387c:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_a 	= NOMIX;
    387e:	d9 01       	movw	r26, r18
    3880:	9c 93       	st	X, r25
    3882:	2c 5f       	subi	r18, 0xFC	; 252
    3884:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_b 	= NOMIX;
    3886:	d9 01       	movw	r26, r18
    3888:	9c 93       	st	X, r25
    388a:	22 50       	subi	r18, 0x02	; 2
    388c:	31 09       	sbc	r19, r1
		Config.Channel[i].P2_source_a 	= NOMIX;
    388e:	d9 01       	movw	r26, r18
    3890:	9c 93       	st	X, r25
		Config.Channel[i].P2_source_b 	= NOMIX;
    3892:	90 83       	st	Z, r25
		Config.min_travel[i] = -100;
    3894:	69 93       	st	Y+, r22
		Config.max_travel[i] = 100;
    3896:	24 e6       	ldi	r18, 0x64	; 100
    3898:	d8 01       	movw	r26, r16
    389a:	4d 93       	st	X+, r20
    389c:	8d 01       	movw	r16, r26
    389e:	b6 96       	adiw	r30, 0x26	; 38

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    38a0:	b7 e0       	ldi	r27, 0x07	; 7
    38a2:	ed 3b       	cpi	r30, 0xBD	; 189
    38a4:	fb 07       	cpc	r31, r27
    38a6:	19 f7       	brne	.-58     	; 0x386e <Load_eeprom_preset+0x4c>
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	switch (preset)
    38a8:	81 30       	cpi	r24, 0x01	; 1
    38aa:	61 f0       	breq	.+24     	; 0x38c4 <Load_eeprom_preset+0xa2>
    38ac:	08 f4       	brcc	.+2      	; 0x38b0 <Load_eeprom_preset+0x8e>
    38ae:	ce c0       	rjmp	.+412    	; 0x3a4c <Load_eeprom_preset+0x22a>
    38b0:	82 30       	cpi	r24, 0x02	; 2
    38b2:	09 f4       	brne	.+2      	; 0x38b6 <Load_eeprom_preset+0x94>
    38b4:	87 c1       	rjmp	.+782    	; 0x3bc4 <Load_eeprom_preset+0x3a2>
    38b6:	83 30       	cpi	r24, 0x03	; 3
    38b8:	09 f0       	breq	.+2      	; 0x38bc <Load_eeprom_preset+0x9a>
    38ba:	45 c2       	rjmp	.+1162   	; 0x3d46 <Load_eeprom_preset+0x524>
	{
		case BLANK:
			Config.ArmMode = ARMABLE;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	80 93 61 06 	sts	0x0661, r24
	
			break;
    38c2:	41 c2       	rjmp	.+1154   	; 0x3d46 <Load_eeprom_preset+0x524>
		
		case QUADP:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    38c4:	80 93 61 06 	sts	0x0661, r24
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 50;
    38c8:	50 93 09 06 	sts	0x0609, r21
			Config.FlightMode[P1].Roll_I_mult = 10;
    38cc:	9a e0       	ldi	r25, 0x0A	; 10
    38ce:	90 93 0a 06 	sts	0x060A, r25
			Config.FlightMode[P1].Roll_limit = 10;
    38d2:	90 93 0b 06 	sts	0x060B, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    38d6:	22 e0       	ldi	r18, 0x02	; 2
    38d8:	20 93 0c 06 	sts	0x060C, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    38dc:	90 93 0d 06 	sts	0x060D, r25
			
			Config.FlightMode[P1].Pitch_P_mult = 50;
    38e0:	50 93 0f 06 	sts	0x060F, r21
			Config.FlightMode[P1].Pitch_I_mult = 10;
    38e4:	90 93 10 06 	sts	0x0610, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    38e8:	90 93 11 06 	sts	0x0611, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    38ec:	20 93 12 06 	sts	0x0612, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    38f0:	90 93 13 06 	sts	0x0613, r25
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    38f4:	4c e3       	ldi	r20, 0x3C	; 60
    38f6:	40 93 15 06 	sts	0x0615, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    38fa:	98 e2       	ldi	r25, 0x28	; 40
    38fc:	90 93 16 06 	sts	0x0616, r25
			Config.FlightMode[P1].Yaw_limit = 25;
    3900:	39 e1       	ldi	r19, 0x19	; 25
    3902:	30 93 17 06 	sts	0x0617, r19
			Config.FlightMode[P1].Yaw_Rate = 2;
    3906:	20 93 18 06 	sts	0x0618, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    390a:	50 93 1a 06 	sts	0x061A, r21
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    390e:	90 93 1b 06 	sts	0x061B, r25
			Config.FlightMode[P2].Roll_I_mult = 19;
    3912:	63 e1       	ldi	r22, 0x13	; 19
    3914:	60 93 1c 06 	sts	0x061C, r22
			Config.FlightMode[P2].Roll_limit = 14;
    3918:	5e e0       	ldi	r21, 0x0E	; 14
    391a:	50 93 1d 06 	sts	0x061D, r21
			Config.FlightMode[P2].Roll_Rate = 3;
    391e:	23 e0       	ldi	r18, 0x03	; 3
    3920:	20 93 1e 06 	sts	0x061E, r18
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3924:	80 93 1f 06 	sts	0x061F, r24
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    3928:	90 93 21 06 	sts	0x0621, r25
			Config.FlightMode[P2].Pitch_I_mult = 19;
    392c:	60 93 22 06 	sts	0x0622, r22
			Config.FlightMode[P2].Pitch_limit = 14;
    3930:	50 93 23 06 	sts	0x0623, r21
			Config.FlightMode[P2].Pitch_Rate = 3;
    3934:	20 93 24 06 	sts	0x0624, r18
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    3938:	80 93 25 06 	sts	0x0625, r24
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    393c:	40 93 27 06 	sts	0x0627, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    3940:	90 93 28 06 	sts	0x0628, r25
			Config.FlightMode[P2].Yaw_limit = 25;
    3944:	30 93 29 06 	sts	0x0629, r19
			Config.FlightMode[P2].Yaw_Rate = 3;
    3948:	20 93 2a 06 	sts	0x062A, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    394c:	8e e1       	ldi	r24, 0x1E	; 30
    394e:	80 93 2c 06 	sts	0x062C, r24
    3952:	e6 e8       	ldi	r30, 0x86	; 134
    3954:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3956:	34 e6       	ldi	r19, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    3958:	42 e0       	ldi	r20, 0x02	; 2
				Config.Channel[i].P1_Z_delta_acc = ON;
    395a:	21 e0       	ldi	r18, 0x01	; 1
    395c:	df 01       	movw	r26, r30
    395e:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3960:	94 e6       	ldi	r25, 0x64	; 100
    3962:	3c 93       	st	X, r19
    3964:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    3966:	3c 93       	st	X, r19
    3968:	16 97       	sbiw	r26, 0x06	; 6
				Config.Channel[i].Motor_marker = MOTOR;
    396a:	4c 93       	st	X, r20
    396c:	58 96       	adiw	r26, 0x18	; 24
				Config.Channel[i].P1_Z_delta_acc = ON;
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	2c 93       	st	X, r18
				Config.Channel[i].P2_Z_delta_acc = ON;
    3972:	20 83       	st	Z, r18
    3974:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    3976:	57 e0       	ldi	r21, 0x07	; 7
    3978:	ee 31       	cpi	r30, 0x1E	; 30
    397a:	f5 07       	cpc	r31, r21
    397c:	79 f7       	brne	.-34     	; 0x395c <Load_eeprom_preset+0x13a>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 0;
    397e:	10 92 75 06 	sts	0x0675, r1
			Config.Channel[OUT1].P2_aileron_volume = 0;
    3982:	10 92 76 06 	sts	0x0676, r1
			Config.Channel[OUT1].P1_elevator_volume = -20;
    3986:	2c ee       	ldi	r18, 0xEC	; 236
    3988:	20 93 77 06 	sts	0x0677, r18
			Config.Channel[OUT1].P2_elevator_volume = -30;
    398c:	32 ee       	ldi	r19, 0xE2	; 226
    398e:	30 93 78 06 	sts	0x0678, r19
			Config.Channel[OUT1].P1_rudder_volume = -30;
    3992:	30 93 79 06 	sts	0x0679, r19
			Config.Channel[OUT1].P2_rudder_volume = -40;
    3996:	68 ed       	ldi	r22, 0xD8	; 216
    3998:	60 93 7a 06 	sts	0x067A, r22
			Config.Channel[OUT1].P1_Pitch_gyro = ON;
    399c:	80 93 7d 06 	sts	0x067D, r24
			Config.Channel[OUT1].P1_Pitch_acc = ON;
    39a0:	80 93 83 06 	sts	0x0683, r24
			Config.Channel[OUT1].P2_Pitch_gyro = ON;
    39a4:	80 93 7e 06 	sts	0x067E, r24
			Config.Channel[OUT1].P2_Pitch_acc = ON;
    39a8:	80 93 84 06 	sts	0x0684, r24
			Config.Channel[OUT1].P1_Yaw_gyro = ON;
    39ac:	80 93 7f 06 	sts	0x067F, r24
			Config.Channel[OUT1].P2_Yaw_gyro = ON;
    39b0:	80 93 80 06 	sts	0x0680, r24
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -20;
    39b4:	20 93 9b 06 	sts	0x069B, r18
			Config.Channel[OUT2].P2_aileron_volume = -30;
    39b8:	30 93 9c 06 	sts	0x069C, r19
			Config.Channel[OUT2].P1_elevator_volume = 0;
    39bc:	10 92 9d 06 	sts	0x069D, r1
			Config.Channel[OUT2].P2_elevator_volume = 0;
    39c0:	10 92 9e 06 	sts	0x069E, r1
			Config.Channel[OUT2].P1_rudder_volume = 30;
    39c4:	2e e1       	ldi	r18, 0x1E	; 30
    39c6:	20 93 9f 06 	sts	0x069F, r18
			Config.Channel[OUT2].P2_rudder_volume = 40;
    39ca:	48 e2       	ldi	r20, 0x28	; 40
    39cc:	40 93 a0 06 	sts	0x06A0, r20
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    39d0:	80 93 a1 06 	sts	0x06A1, r24
			Config.Channel[OUT2].P1_Roll_acc = ON;
    39d4:	80 93 a7 06 	sts	0x06A7, r24
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    39d8:	80 93 a2 06 	sts	0x06A2, r24
			Config.Channel[OUT2].P2_Roll_acc = ON;
    39dc:	80 93 a8 06 	sts	0x06A8, r24
			Config.Channel[OUT2].P1_Yaw_gyro = ON;
    39e0:	80 93 a5 06 	sts	0x06A5, r24
			Config.Channel[OUT2].P2_Yaw_gyro = ON;
    39e4:	80 93 a6 06 	sts	0x06A6, r24
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = 0;
    39e8:	10 92 c1 06 	sts	0x06C1, r1
			Config.Channel[OUT3].P2_aileron_volume = 0;
    39ec:	10 92 c2 06 	sts	0x06C2, r1
			Config.Channel[OUT3].P1_elevator_volume = 20;
    39f0:	54 e1       	ldi	r21, 0x14	; 20
    39f2:	50 93 c3 06 	sts	0x06C3, r21
			Config.Channel[OUT3].P2_elevator_volume = 30;
    39f6:	20 93 c4 06 	sts	0x06C4, r18
			Config.Channel[OUT3].P1_rudder_volume = -30;
    39fa:	30 93 c5 06 	sts	0x06C5, r19
			Config.Channel[OUT3].P2_rudder_volume = -40;
    39fe:	60 93 c6 06 	sts	0x06C6, r22
			Config.Channel[OUT3].P1_Pitch_gyro = ON;
    3a02:	80 93 c9 06 	sts	0x06C9, r24
			Config.Channel[OUT3].P1_Pitch_acc = ON;
    3a06:	80 93 cf 06 	sts	0x06CF, r24
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    3a0a:	80 93 ca 06 	sts	0x06CA, r24
			Config.Channel[OUT3].P2_Pitch_acc = ON;
    3a0e:	80 93 d0 06 	sts	0x06D0, r24
			Config.Channel[OUT3].P1_Yaw_gyro = ON;
    3a12:	80 93 cb 06 	sts	0x06CB, r24
			Config.Channel[OUT3].P2_Yaw_gyro = ON;
    3a16:	80 93 cc 06 	sts	0x06CC, r24
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 20;
    3a1a:	50 93 e7 06 	sts	0x06E7, r21
			Config.Channel[OUT4].P2_aileron_volume = 30;
    3a1e:	20 93 e8 06 	sts	0x06E8, r18
			Config.Channel[OUT4].P1_elevator_volume = 0;
    3a22:	10 92 e9 06 	sts	0x06E9, r1
			Config.Channel[OUT4].P2_elevator_volume = 0;
    3a26:	10 92 ea 06 	sts	0x06EA, r1
			Config.Channel[OUT4].P1_rudder_volume = 30;
    3a2a:	20 93 eb 06 	sts	0x06EB, r18
			Config.Channel[OUT4].P2_rudder_volume = 40;
    3a2e:	40 93 ec 06 	sts	0x06EC, r20
			Config.Channel[OUT4].P1_Roll_gyro = ON;
    3a32:	80 93 ed 06 	sts	0x06ED, r24
			Config.Channel[OUT4].P1_Roll_acc = ON;
    3a36:	80 93 f3 06 	sts	0x06F3, r24
			Config.Channel[OUT4].P2_Roll_gyro = ON;
    3a3a:	80 93 ee 06 	sts	0x06EE, r24
			Config.Channel[OUT4].P2_Roll_acc = ON;
    3a3e:	80 93 f4 06 	sts	0x06F4, r24
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    3a42:	80 93 f1 06 	sts	0x06F1, r24
			Config.Channel[OUT4].P2_Yaw_gyro = ON;		
    3a46:	80 93 f2 06 	sts	0x06F2, r24
    3a4a:	a9 c0       	rjmp	.+338    	; 0x3b9e <Load_eeprom_preset+0x37c>
			Config.Channel[OUT8].P2_offset = 100;			
			break;
				
		case QUADX:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    3a4c:	31 e0       	ldi	r19, 0x01	; 1
    3a4e:	30 93 61 06 	sts	0x0661, r19
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    3a52:	88 e2       	ldi	r24, 0x28	; 40
    3a54:	80 93 09 06 	sts	0x0609, r24
			Config.FlightMode[P1].Roll_I_mult = 10;
    3a58:	9a e0       	ldi	r25, 0x0A	; 10
    3a5a:	90 93 0a 06 	sts	0x060A, r25
			Config.FlightMode[P1].Roll_limit = 10;
    3a5e:	90 93 0b 06 	sts	0x060B, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    3a62:	22 e0       	ldi	r18, 0x02	; 2
    3a64:	20 93 0c 06 	sts	0x060C, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    3a68:	90 93 0d 06 	sts	0x060D, r25
	
			Config.FlightMode[P1].Pitch_P_mult = 40;
    3a6c:	80 93 0f 06 	sts	0x060F, r24
			Config.FlightMode[P1].Pitch_I_mult = 10;
    3a70:	90 93 10 06 	sts	0x0610, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    3a74:	90 93 11 06 	sts	0x0611, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    3a78:	20 93 12 06 	sts	0x0612, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    3a7c:	90 93 13 06 	sts	0x0613, r25
	
			Config.FlightMode[P1].Yaw_P_mult = 60;
    3a80:	4c e3       	ldi	r20, 0x3C	; 60
    3a82:	40 93 15 06 	sts	0x0615, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    3a86:	80 93 16 06 	sts	0x0616, r24
			Config.FlightMode[P1].Yaw_limit = 25;
    3a8a:	99 e1       	ldi	r25, 0x19	; 25
    3a8c:	90 93 17 06 	sts	0x0617, r25
			Config.FlightMode[P1].Yaw_Rate = 2;
    3a90:	20 93 18 06 	sts	0x0618, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    3a94:	50 93 1a 06 	sts	0x061A, r21
	
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    3a98:	80 93 1b 06 	sts	0x061B, r24
			Config.FlightMode[P2].Roll_I_mult = 19;
    3a9c:	73 e1       	ldi	r23, 0x13	; 19
    3a9e:	70 93 1c 06 	sts	0x061C, r23
			Config.FlightMode[P2].Roll_limit = 14;
    3aa2:	6e e0       	ldi	r22, 0x0E	; 14
    3aa4:	60 93 1d 06 	sts	0x061D, r22
			Config.FlightMode[P2].Roll_Rate = 3;
    3aa8:	53 e0       	ldi	r21, 0x03	; 3
    3aaa:	50 93 1e 06 	sts	0x061E, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3aae:	30 93 1f 06 	sts	0x061F, r19
	
			Config.FlightMode[P2].Pitch_P_mult = 40;
    3ab2:	80 93 21 06 	sts	0x0621, r24
			Config.FlightMode[P2].Pitch_I_mult = 19;
    3ab6:	70 93 22 06 	sts	0x0622, r23
			Config.FlightMode[P2].Pitch_limit = 14;
    3aba:	60 93 23 06 	sts	0x0623, r22
			Config.FlightMode[P2].Pitch_Rate = 3;
    3abe:	50 93 24 06 	sts	0x0624, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    3ac2:	30 93 25 06 	sts	0x0625, r19
	
			Config.FlightMode[P2].Yaw_P_mult = 60;
    3ac6:	40 93 27 06 	sts	0x0627, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    3aca:	80 93 28 06 	sts	0x0628, r24
			Config.FlightMode[P2].Yaw_limit = 25;
    3ace:	90 93 29 06 	sts	0x0629, r25
			Config.FlightMode[P2].Yaw_Rate = 2;
    3ad2:	20 93 2a 06 	sts	0x062A, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3ad6:	8e e1       	ldi	r24, 0x1E	; 30
    3ad8:	80 93 2c 06 	sts	0x062C, r24
    3adc:	e6 e8       	ldi	r30, 0x86	; 134
    3ade:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3ae0:	24 e6       	ldi	r18, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    3ae2:	32 e0       	ldi	r19, 0x02	; 2
				Config.Channel[i].P1_Roll_gyro = ON;
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	df 01       	movw	r26, r30
    3ae8:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3aea:	94 e6       	ldi	r25, 0x64	; 100
    3aec:	2c 93       	st	X, r18
    3aee:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    3af0:	2c 93       	st	X, r18
    3af2:	16 97       	sbiw	r26, 0x06	; 6
				Config.Channel[i].Motor_marker = MOTOR;
    3af4:	3c 93       	st	X, r19
    3af6:	1e 96       	adiw	r26, 0x0e	; 14
				Config.Channel[i].P1_Roll_gyro = ON;
    3af8:	8c 93       	st	X, r24
    3afa:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Roll_acc = ON;
    3afc:	8c 93       	st	X, r24
    3afe:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Roll_gyro = ON;
    3b00:	8c 93       	st	X, r24
    3b02:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Roll_acc = ON;
    3b04:	8c 93       	st	X, r24
    3b06:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Pitch_gyro = ON;
    3b08:	8c 93       	st	X, r24
    3b0a:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Pitch_acc = ON;
    3b0c:	8c 93       	st	X, r24
    3b0e:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Pitch_gyro = ON;
    3b10:	8c 93       	st	X, r24
    3b12:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Pitch_acc = ON;
    3b14:	8c 93       	st	X, r24
    3b16:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Yaw_gyro = ON;
    3b18:	8c 93       	st	X, r24
    3b1a:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_Yaw_gyro = ON;
    3b1c:	8c 93       	st	X, r24
    3b1e:	15 96       	adiw	r26, 0x05	; 5
				Config.Channel[i].P1_Z_delta_acc = ON;
    3b20:	8c 93       	st	X, r24
				Config.Channel[i].P2_Z_delta_acc = ON;
    3b22:	80 83       	st	Z, r24
    3b24:	b6 96       	adiw	r30, 0x26	; 38
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    3b26:	a7 e0       	ldi	r26, 0x07	; 7
    3b28:	ee 31       	cpi	r30, 0x1E	; 30
    3b2a:	fa 07       	cpc	r31, r26
    3b2c:	e1 f6       	brne	.-72     	; 0x3ae6 <Load_eeprom_preset+0x2c4>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 15;
    3b2e:	2f e0       	ldi	r18, 0x0F	; 15
    3b30:	20 93 75 06 	sts	0x0675, r18
			Config.Channel[OUT1].P2_aileron_volume = 20;
    3b34:	84 e1       	ldi	r24, 0x14	; 20
    3b36:	80 93 76 06 	sts	0x0676, r24
			Config.Channel[OUT1].P1_elevator_volume = -15;
    3b3a:	41 ef       	ldi	r20, 0xF1	; 241
    3b3c:	40 93 77 06 	sts	0x0677, r20
			Config.Channel[OUT1].P2_elevator_volume = -20;
    3b40:	3c ee       	ldi	r19, 0xEC	; 236
    3b42:	30 93 78 06 	sts	0x0678, r19
			Config.Channel[OUT1].P1_rudder_volume = -40;
    3b46:	e8 ed       	ldi	r30, 0xD8	; 216
    3b48:	e0 93 79 06 	sts	0x0679, r30
			Config.Channel[OUT1].P2_rudder_volume = -50;
    3b4c:	7e ec       	ldi	r23, 0xCE	; 206
    3b4e:	70 93 7a 06 	sts	0x067A, r23
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -15;
    3b52:	40 93 9b 06 	sts	0x069B, r20
			Config.Channel[OUT2].P2_aileron_volume = -20;
    3b56:	30 93 9c 06 	sts	0x069C, r19
			Config.Channel[OUT2].P1_elevator_volume = -15;
    3b5a:	40 93 9d 06 	sts	0x069D, r20
			Config.Channel[OUT2].P2_elevator_volume = -20;
    3b5e:	30 93 9e 06 	sts	0x069E, r19
			Config.Channel[OUT2].P1_rudder_volume = 40;
    3b62:	68 e2       	ldi	r22, 0x28	; 40
    3b64:	60 93 9f 06 	sts	0x069F, r22
			Config.Channel[OUT2].P2_rudder_volume = 50;
    3b68:	52 e3       	ldi	r21, 0x32	; 50
    3b6a:	50 93 a0 06 	sts	0x06A0, r21
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = -15;
    3b6e:	40 93 c1 06 	sts	0x06C1, r20
			Config.Channel[OUT3].P2_aileron_volume = -20;
    3b72:	30 93 c2 06 	sts	0x06C2, r19
			Config.Channel[OUT3].P1_elevator_volume = 15;
    3b76:	20 93 c3 06 	sts	0x06C3, r18
			Config.Channel[OUT3].P2_elevator_volume = 20;
    3b7a:	80 93 c4 06 	sts	0x06C4, r24
			Config.Channel[OUT3].P1_rudder_volume = -40;
    3b7e:	e0 93 c5 06 	sts	0x06C5, r30
			Config.Channel[OUT3].P2_rudder_volume = -50;
    3b82:	70 93 c6 06 	sts	0x06C6, r23
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 15;
    3b86:	20 93 e7 06 	sts	0x06E7, r18
			Config.Channel[OUT4].P2_aileron_volume = 20;
    3b8a:	80 93 e8 06 	sts	0x06E8, r24
			Config.Channel[OUT4].P1_elevator_volume = 15;
    3b8e:	20 93 e9 06 	sts	0x06E9, r18
			Config.Channel[OUT4].P2_elevator_volume = 20;
    3b92:	80 93 ea 06 	sts	0x06EA, r24
			Config.Channel[OUT4].P1_rudder_volume = 40;
    3b96:	60 93 eb 06 	sts	0x06EB, r22
			Config.Channel[OUT4].P2_rudder_volume = 50;
    3b9a:	50 93 ec 06 	sts	0x06EC, r21

			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    3b9e:	8b e4       	ldi	r24, 0x4B	; 75
    3ba0:	80 93 0f 07 	sts	0x070F, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    3ba4:	90 93 10 07 	sts	0x0710, r25
			
			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    3ba8:	80 93 33 07 	sts	0x0733, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    3bac:	90 93 34 07 	sts	0x0734, r25
						
			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    3bb0:	80 93 5d 07 	sts	0x075D, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    3bb4:	90 93 5e 07 	sts	0x075E, r25
									
			// OUT8
			Config.Channel[OUT8].P1_offset = -100;
    3bb8:	8c e9       	ldi	r24, 0x9C	; 156
    3bba:	80 93 78 07 	sts	0x0778, r24
			Config.Channel[OUT8].P2_offset = 100;
    3bbe:	90 93 7b 07 	sts	0x077B, r25
			break;
    3bc2:	c1 c0       	rjmp	.+386    	; 0x3d46 <Load_eeprom_preset+0x524>
		
		case TRICOPTER:
			// Preset simple mixing for primary channels
			Config.ArmMode = ARMABLE;
    3bc4:	91 e0       	ldi	r25, 0x01	; 1
    3bc6:	90 93 61 06 	sts	0x0661, r25
		
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    3bca:	38 e2       	ldi	r19, 0x28	; 40
    3bcc:	30 93 09 06 	sts	0x0609, r19
			Config.FlightMode[P1].Roll_I_mult = 10;
    3bd0:	4a e0       	ldi	r20, 0x0A	; 10
    3bd2:	40 93 0a 06 	sts	0x060A, r20
			Config.FlightMode[P1].Roll_limit = 10;
    3bd6:	40 93 0b 06 	sts	0x060B, r20
			Config.FlightMode[P1].Roll_Rate = 2;
    3bda:	80 93 0c 06 	sts	0x060C, r24
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    3bde:	40 93 0d 06 	sts	0x060D, r20
			
			Config.FlightMode[P1].Pitch_P_mult = 40;
    3be2:	30 93 0f 06 	sts	0x060F, r19
			Config.FlightMode[P1].Pitch_I_mult = 10;
    3be6:	40 93 10 06 	sts	0x0610, r20
			Config.FlightMode[P1].Pitch_limit = 10;
    3bea:	40 93 11 06 	sts	0x0611, r20
			Config.FlightMode[P1].Pitch_Rate = 2;
    3bee:	80 93 12 06 	sts	0x0612, r24
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    3bf2:	40 93 13 06 	sts	0x0613, r20
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    3bf6:	6c e3       	ldi	r22, 0x3C	; 60
    3bf8:	60 93 15 06 	sts	0x0615, r22
			Config.FlightMode[P1].Yaw_I_mult = 40;
    3bfc:	30 93 16 06 	sts	0x0616, r19
			Config.FlightMode[P1].Yaw_limit = 25;
    3c00:	49 e1       	ldi	r20, 0x19	; 25
    3c02:	40 93 17 06 	sts	0x0617, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    3c06:	80 93 18 06 	sts	0x0618, r24
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    3c0a:	50 93 1a 06 	sts	0x061A, r21
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    3c0e:	30 93 1b 06 	sts	0x061B, r19
			Config.FlightMode[P2].Roll_I_mult = 19;
    3c12:	e3 e1       	ldi	r30, 0x13	; 19
    3c14:	e0 93 1c 06 	sts	0x061C, r30
			Config.FlightMode[P2].Roll_limit = 14;
    3c18:	7e e0       	ldi	r23, 0x0E	; 14
    3c1a:	70 93 1d 06 	sts	0x061D, r23
			Config.FlightMode[P2].Roll_Rate = 3;
    3c1e:	53 e0       	ldi	r21, 0x03	; 3
    3c20:	50 93 1e 06 	sts	0x061E, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    3c24:	90 93 1f 06 	sts	0x061F, r25
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    3c28:	30 93 21 06 	sts	0x0621, r19
			Config.FlightMode[P2].Pitch_I_mult = 19;
    3c2c:	e0 93 22 06 	sts	0x0622, r30
			Config.FlightMode[P2].Pitch_limit = 14;
    3c30:	70 93 23 06 	sts	0x0623, r23
			Config.FlightMode[P2].Pitch_Rate = 3;
    3c34:	50 93 24 06 	sts	0x0624, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    3c38:	90 93 25 06 	sts	0x0625, r25
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    3c3c:	60 93 27 06 	sts	0x0627, r22
			Config.FlightMode[P2].Yaw_I_mult = 40;
    3c40:	30 93 28 06 	sts	0x0628, r19
			Config.FlightMode[P2].Yaw_limit = 25;
    3c44:	40 93 29 06 	sts	0x0629, r20
			Config.FlightMode[P2].Yaw_Rate = 2;
    3c48:	80 93 2a 06 	sts	0x062A, r24
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    3c4c:	4e e1       	ldi	r20, 0x1E	; 30
    3c4e:	40 93 2c 06 	sts	0x062C, r20
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3c52:	20 93 72 06 	sts	0x0672, r18
				Config.Channel[i].P2_throttle_volume = 100;
    3c56:	20 93 73 06 	sts	0x0673, r18
				Config.Channel[i].Motor_marker = MOTOR;
    3c5a:	80 93 6d 06 	sts	0x066D, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3c5e:	20 93 98 06 	sts	0x0698, r18
				Config.Channel[i].P2_throttle_volume = 100;
    3c62:	20 93 99 06 	sts	0x0699, r18
				Config.Channel[i].Motor_marker = MOTOR;
    3c66:	80 93 93 06 	sts	0x0693, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    3c6a:	20 93 be 06 	sts	0x06BE, r18
				Config.Channel[i].P2_throttle_volume = 100;
    3c6e:	20 93 bf 06 	sts	0x06BF, r18
				Config.Channel[i].Motor_marker = MOTOR;
    3c72:	80 93 b9 06 	sts	0x06B9, r24
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 30;
    3c76:	40 93 75 06 	sts	0x0675, r20
			Config.Channel[OUT1].P2_aileron_volume = 40;
    3c7a:	30 93 76 06 	sts	0x0676, r19
			Config.Channel[OUT1].P1_elevator_volume = -15;
    3c7e:	61 ef       	ldi	r22, 0xF1	; 241
    3c80:	60 93 77 06 	sts	0x0677, r22
			Config.Channel[OUT1].P2_elevator_volume = -20;
    3c84:	5c ee       	ldi	r21, 0xEC	; 236
    3c86:	50 93 78 06 	sts	0x0678, r21
			Config.Channel[OUT1].P1_Roll_gyro = ON;
    3c8a:	90 93 7b 06 	sts	0x067B, r25
			Config.Channel[OUT1].P1_Roll_acc = ON;
    3c8e:	90 93 81 06 	sts	0x0681, r25
			Config.Channel[OUT1].P2_Roll_gyro = ON;
    3c92:	90 93 7c 06 	sts	0x067C, r25
			Config.Channel[OUT1].P2_Roll_acc = ON;
    3c96:	90 93 82 06 	sts	0x0682, r25
			Config.Channel[OUT1].P1_Pitch_gyro = SCALE;
    3c9a:	80 93 7d 06 	sts	0x067D, r24
			Config.Channel[OUT1].P1_Pitch_acc = SCALE;
    3c9e:	80 93 83 06 	sts	0x0683, r24
			Config.Channel[OUT1].P2_Pitch_gyro = SCALE;
    3ca2:	80 93 7e 06 	sts	0x067E, r24
			Config.Channel[OUT1].P2_Pitch_acc = SCALE;
    3ca6:	80 93 84 06 	sts	0x0684, r24
			Config.Channel[OUT1].P1_Z_delta_acc = ON;
    3caa:	90 93 85 06 	sts	0x0685, r25
			Config.Channel[OUT1].P2_Z_delta_acc = ON;
    3cae:	90 93 86 06 	sts	0x0686, r25
		
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -30;
    3cb2:	72 ee       	ldi	r23, 0xE2	; 226
    3cb4:	70 93 9b 06 	sts	0x069B, r23
			Config.Channel[OUT2].P2_aileron_volume = -40;
    3cb8:	78 ed       	ldi	r23, 0xD8	; 216
    3cba:	70 93 9c 06 	sts	0x069C, r23
			Config.Channel[OUT2].P1_elevator_volume = -15;
    3cbe:	60 93 9d 06 	sts	0x069D, r22
			Config.Channel[OUT2].P2_elevator_volume = -20;
    3cc2:	50 93 9e 06 	sts	0x069E, r21
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    3cc6:	90 93 a1 06 	sts	0x06A1, r25
			Config.Channel[OUT2].P1_Roll_acc = ON;
    3cca:	90 93 a7 06 	sts	0x06A7, r25
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    3cce:	90 93 a2 06 	sts	0x06A2, r25
			Config.Channel[OUT2].P2_Roll_acc = ON;
    3cd2:	90 93 a8 06 	sts	0x06A8, r25
			Config.Channel[OUT2].P1_Pitch_gyro = SCALE;
    3cd6:	80 93 a3 06 	sts	0x06A3, r24
			Config.Channel[OUT2].P1_Pitch_acc = SCALE;
    3cda:	80 93 a9 06 	sts	0x06A9, r24
			Config.Channel[OUT2].P2_Pitch_gyro = SCALE;
    3cde:	80 93 a4 06 	sts	0x06A4, r24
			Config.Channel[OUT2].P2_Pitch_acc = SCALE;
    3ce2:	80 93 aa 06 	sts	0x06AA, r24
			Config.Channel[OUT2].P1_Z_delta_acc = ON;
    3ce6:	90 93 ab 06 	sts	0x06AB, r25
			Config.Channel[OUT2].P2_Z_delta_acc = ON;
    3cea:	90 93 ac 06 	sts	0x06AC, r25
		
			// OUT3
			Config.Channel[OUT3].P1_elevator_volume = 30;
    3cee:	40 93 c3 06 	sts	0x06C3, r20
			Config.Channel[OUT3].P2_elevator_volume = 40;
    3cf2:	30 93 c4 06 	sts	0x06C4, r19
			Config.Channel[OUT3].P1_Pitch_gyro = SCALE;
    3cf6:	80 93 c9 06 	sts	0x06C9, r24
			Config.Channel[OUT3].P1_Pitch_acc = SCALE;
    3cfa:	80 93 cf 06 	sts	0x06CF, r24
			Config.Channel[OUT3].P2_Pitch_gyro = SCALE;
    3cfe:	80 93 ca 06 	sts	0x06CA, r24
			Config.Channel[OUT3].P2_Pitch_acc = SCALE;
    3d02:	80 93 d0 06 	sts	0x06D0, r24
			Config.Channel[OUT3].P1_Z_delta_acc = ON;
    3d06:	90 93 d1 06 	sts	0x06D1, r25
			Config.Channel[OUT3].P2_Z_delta_acc = ON;
    3d0a:	90 93 d2 06 	sts	0x06D2, r25
			
			// OUT4
			Config.Channel[OUT4].Motor_marker = ASERVO;
    3d0e:	10 92 df 06 	sts	0x06DF, r1
			Config.Channel[OUT4].P1_rudder_volume = 75;
    3d12:	8b e4       	ldi	r24, 0x4B	; 75
    3d14:	80 93 eb 06 	sts	0x06EB, r24
			Config.Channel[OUT4].P2_rudder_volume = 100;
    3d18:	20 93 ec 06 	sts	0x06EC, r18
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    3d1c:	90 93 f1 06 	sts	0x06F1, r25
			Config.Channel[OUT4].P2_Yaw_gyro = ON;
    3d20:	90 93 f2 06 	sts	0x06F2, r25
			
			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    3d24:	80 93 0f 07 	sts	0x070F, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    3d28:	20 93 10 07 	sts	0x0710, r18

			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    3d2c:	80 93 33 07 	sts	0x0733, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    3d30:	20 93 34 07 	sts	0x0734, r18

			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    3d34:	80 93 5d 07 	sts	0x075D, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    3d38:	20 93 5e 07 	sts	0x075E, r18

			// OUT8
			Config.Channel[OUT8].P1_offset = -100;
    3d3c:	8c e9       	ldi	r24, 0x9C	; 156
    3d3e:	80 93 78 07 	sts	0x0778, r24
			Config.Channel[OUT8].P2_offset = 100;
    3d42:	20 93 7b 07 	sts	0x077B, r18
			break;
		
		default:
			break;
	}
    3d46:	df 91       	pop	r29
    3d48:	cf 91       	pop	r28
    3d4a:	1f 91       	pop	r17
    3d4c:	0f 91       	pop	r16
    3d4e:	08 95       	ret

00003d50 <Set_EEPROM_Default_Config>:
	return new_filter;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    3d54:	8f e1       	ldi	r24, 0x1F	; 31
    3d56:	92 e0       	ldi	r25, 0x02	; 2
    3d58:	e7 ed       	ldi	r30, 0xD7	; 215
    3d5a:	f5 e0       	ldi	r31, 0x05	; 5
    3d5c:	df 01       	movw	r26, r30
    3d5e:	9c 01       	movw	r18, r24
    3d60:	1d 92       	st	X+, r1
    3d62:	21 50       	subi	r18, 0x01	; 1
    3d64:	30 40       	sbci	r19, 0x00	; 0
    3d66:	e1 f7       	brne	.-8      	; 0x3d60 <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    3d68:	8a e3       	ldi	r24, 0x3A	; 58
    3d6a:	80 93 d7 05 	sts	0x05D7, r24

	// General
	Config.RxMode = SBUS;
    3d6e:	82 e0       	ldi	r24, 0x02	; 2
    3d70:	80 93 00 06 	sts	0x0600, r24
	Config.FlightChan = GEAR;
    3d74:	94 e0       	ldi	r25, 0x04	; 4
    3d76:	90 93 04 06 	sts	0x0604, r25
	Config.ArmMode = ARMABLE;
    3d7a:	21 e0       	ldi	r18, 0x01	; 1
    3d7c:	20 93 61 06 	sts	0x0661, r18
	Config.Servo_rate = FAST;
    3d80:	80 93 01 06 	sts	0x0601, r24
	Config.PWM_Sync = GEAR;
    3d84:	90 93 02 06 	sts	0x0602, r25
	Config.Acc_LPF = HZ21;
    3d88:	80 93 65 06 	sts	0x0665, r24
	Config.Gyro_LPF = NOFILTER;
    3d8c:	87 e0       	ldi	r24, 0x07	; 7
    3d8e:	80 93 66 06 	sts	0x0666, r24
	Config.MPU6050_LPF = HZ44;
    3d92:	93 e0       	ldi	r25, 0x03	; 3
    3d94:	90 93 64 06 	sts	0x0664, r25
	Config.CF_factor = 7;
    3d98:	80 93 67 06 	sts	0x0667, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    3d9c:	8e e1       	ldi	r24, 0x1E	; 30
    3d9e:	80 93 62 06 	sts	0x0662, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    3da2:	82 e3       	ldi	r24, 0x32	; 50
    3da4:	80 93 06 06 	sts	0x0606, r24
	
	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    3da8:	80 e8       	ldi	r24, 0x80	; 128
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	90 93 c8 07 	sts	0x07C8, r25
    3db0:	80 93 c7 07 	sts	0x07C7, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    3db4:	84 e2       	ldi	r24, 0x24	; 36
    3db6:	80 93 60 06 	sts	0x0660, r24
    3dba:	e8 ef       	ldi	r30, 0xF8	; 248
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	c8 ed       	ldi	r28, 0xD8	; 216
    3dc0:	d5 e0       	ldi	r29, 0x05	; 5
    3dc2:	a1 eb       	ldi	r26, 0xB1	; 177
    3dc4:	b7 e0       	ldi	r27, 0x07	; 7
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    3dc6:	86 ea       	ldi	r24, 0xA6	; 166
    3dc8:	9e e0       	ldi	r25, 0x0E	; 14
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    3dca:	24 91       	lpm	r18, Z
    3dcc:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    3dce:	8d 93       	st	X+, r24
    3dd0:	9d 93       	st	X+, r25
    3dd2:	31 96       	adiw	r30, 0x01	; 1
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    3dd4:	31 e0       	ldi	r19, 0x01	; 1
    3dd6:	e0 30       	cpi	r30, 0x00	; 0
    3dd8:	f3 07       	cpc	r31, r19
    3dda:	b9 f7       	brne	.-18     	; 0x3dca <Set_EEPROM_Default_Config+0x7a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    3ddc:	8e eb       	ldi	r24, 0xBE	; 190
    3dde:	9a e0       	ldi	r25, 0x0A	; 10
    3de0:	90 93 b2 07 	sts	0x07B2, r25
    3de4:	80 93 b1 07 	sts	0x07B1, r24
    3de8:	ed e8       	ldi	r30, 0x8D	; 141
    3dea:	f6 e0       	ldi	r31, 0x06	; 6
    3dec:	c1 ea       	ldi	r28, 0xA1	; 161
    3dee:	d7 e0       	ldi	r29, 0x07	; 7
    3df0:	69 ea       	ldi	r22, 0xA9	; 169
    3df2:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3df4:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3df6:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    3df8:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    3dfa:	34 e6       	ldi	r19, 0x64	; 100
    3dfc:	cf 01       	movw	r24, r30
    3dfe:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3e00:	dc 01       	movw	r26, r24
    3e02:	5c 93       	st	X, r21
    3e04:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3e06:	dc 01       	movw	r26, r24
    3e08:	2c 93       	st	X, r18
    3e0a:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	2c 93       	st	X, r18
    3e10:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    3e12:	dc 01       	movw	r26, r24
    3e14:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3e16:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    3e18:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    3e1a:	db 01       	movw	r26, r22
    3e1c:	3d 93       	st	X+, r19
    3e1e:	bd 01       	movw	r22, r26
    3e20:	b6 96       	adiw	r30, 0x26	; 38
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3e22:	b7 e0       	ldi	r27, 0x07	; 7
    3e24:	ed 3b       	cpi	r30, 0xBD	; 189
    3e26:	fb 07       	cpc	r31, r27
    3e28:	49 f7       	brne	.-46     	; 0x3dfc <Set_EEPROM_Default_Config+0xac>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Load manual defaults
	Load_eeprom_preset(QUADX);
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	0e 94 11 1c 	call	0x3822	; 0x3822 <Load_eeprom_preset>
	Config.Preset = OPTIONS; // Menu will display "Options"
    3e30:	84 e0       	ldi	r24, 0x04	; 4
    3e32:	80 93 68 06 	sts	0x0668, r24
}
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	08 95       	ret

00003e3c <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    3e3c:	cf 93       	push	r28
    3e3e:	df 93       	push	r29
    3e40:	1f 92       	push	r1
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    3e46:	4f e1       	ldi	r20, 0x1F	; 31
    3e48:	52 e0       	ldi	r21, 0x02	; 2
    3e4a:	60 e0       	ldi	r22, 0x00	; 0
    3e4c:	70 e0       	ldi	r23, 0x00	; 0
    3e4e:	87 ed       	ldi	r24, 0xD7	; 215
    3e50:	95 e0       	ldi	r25, 0x05	; 5
    3e52:	0e 94 c4 51 	call	0xa388	; 0xa388 <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    3e56:	80 91 d7 05 	lds	r24, 0x05D7
    3e5a:	87 33       	cpi	r24, 0x37	; 55
    3e5c:	81 f0       	breq	.+32     	; 0x3e7e <Initial_EEPROM_Config_Load+0x42>
    3e5e:	28 f4       	brcc	.+10     	; 0x3e6a <Initial_EEPROM_Config_Load+0x2e>
    3e60:	85 33       	cpi	r24, 0x35	; 53
    3e62:	49 f0       	breq	.+18     	; 0x3e76 <Initial_EEPROM_Config_Load+0x3a>
    3e64:	86 33       	cpi	r24, 0x36	; 54
    3e66:	49 f0       	breq	.+18     	; 0x3e7a <Initial_EEPROM_Config_Load+0x3e>
    3e68:	12 c0       	rjmp	.+36     	; 0x3e8e <Initial_EEPROM_Config_Load+0x52>
    3e6a:	89 33       	cpi	r24, 0x39	; 57
    3e6c:	61 f0       	breq	.+24     	; 0x3e86 <Initial_EEPROM_Config_Load+0x4a>
    3e6e:	48 f0       	brcs	.+18     	; 0x3e82 <Initial_EEPROM_Config_Load+0x46>
    3e70:	8a 33       	cpi	r24, 0x3A	; 58
    3e72:	79 f0       	breq	.+30     	; 0x3e92 <Initial_EEPROM_Config_Load+0x56>
    3e74:	0c c0       	rjmp	.+24     	; 0x3e8e <Initial_EEPROM_Config_Load+0x52>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1_B7();
    3e76:	0e 94 65 19 	call	0x32ca	; 0x32ca <Update_V1_0_to_V1_1_B7>
			// Fall through...

		case V1_1_B7_SIGNATURE:				// V1.1 Beta 7 (or below) detected
			Update_V1_1_to_V1_1_B8();	
    3e7a:	0e 94 9a 1b 	call	0x3734	; 0x3734 <Update_V1_1_to_V1_1_B8>
			// Fall through...

		case V1_1_B8_SIGNATURE:				// V1.1 Beta 8-9 detected
			Update_V1_1B8_to_V1_1_B10();
    3e7e:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <Update_V1_1B8_to_V1_1_B10>
			// Fall through...

		case V1_1_B10_SIGNATURE:			// V1.1 Beta 10+ detected
			Update_V1_1B10_to_V1_1_B12();
    3e82:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <Update_V1_1B10_to_V1_1_B12>
			// Fall through...

		case V1_1_B12_SIGNATURE:			// V1.1 Beta 12 detected
			Update_V1_1B12_to_V1_1_B18();
    3e86:	0e 94 09 1c 	call	0x3812	; 0x3812 <Update_V1_1B12_to_V1_1_B18>
			updated = true;
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	03 c0       	rjmp	.+6      	; 0x3e94 <Initial_EEPROM_Config_Load+0x58>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    3e8e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    3e92:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    3e94:	89 83       	std	Y+1, r24	; 0x01
    3e96:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	0f 90       	pop	r0
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	08 95       	ret

00003ea4 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
    3eac:	ac 97       	sbiw	r28, 0x2c	; 44
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	f8 94       	cli
    3eb2:	de bf       	out	0x3e, r29	; 62
    3eb4:	0f be       	out	0x3f, r0	; 63
    3eb6:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	
	// Do all init tasks
	init();
    3eb8:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <init>
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    3ebc:	23 e0       	ldi	r18, 0x03	; 3
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	3c a7       	std	Y+44, r19	; 0x2c
    3ec2:	2b a7       	std	Y+43, r18	; 0x2b
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    3ec4:	19 a6       	std	Y+41, r1	; 0x29
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    3ec6:	18 a6       	std	Y+40, r1	; 0x28
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    3ec8:	b3 e0       	ldi	r27, 0x03	; 3
    3eca:	bb 2e       	mov	r11, r27

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    3ecc:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    3ece:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    3ed0:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    3ed2:	1f 8a       	std	Y+23, r1	; 0x17
    3ed4:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;
    3ed6:	1f a2       	std	Y+39, r1	; 0x27
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    3ed8:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    3eda:	1d a2       	std	Y+37, r1	; 0x25
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    3edc:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    3ede:	1b a2       	std	Y+35, r1	; 0x23
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    3ee0:	1a a2       	std	Y+34, r1	; 0x22

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    3ee2:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    3ee4:	18 a2       	std	Y+32, r1	; 0x20
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    3ee6:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    3ee8:	81 2c       	mov	r8, r1
    3eea:	91 2c       	mov	r9, r1
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    3eec:	1a 82       	std	Y+2, r1	; 0x02
    3eee:	19 82       	std	Y+1, r1	; 0x01
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    3ef0:	1b 8a       	std	Y+19, r1	; 0x13
    3ef2:	1a 8a       	std	Y+18, r1	; 0x12
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    3ef4:	19 8a       	std	Y+17, r1	; 0x11
    3ef6:	18 8a       	std	Y+16, r1	; 0x10
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    3ef8:	19 86       	std	Y+9, r1	; 0x09
    3efa:	18 86       	std	Y+8, r1	; 0x08
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    3efc:	1d 8e       	std	Y+29, r1	; 0x1d
    3efe:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    3f00:	1a 8e       	std	Y+26, r1	; 0x1a
    3f02:	19 8e       	std	Y+25, r1	; 0x19
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    3f04:	1f 86       	std	Y+15, r1	; 0x0f
    3f06:	1e 86       	std	Y+14, r1	; 0x0e
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    3f08:	01 e6       	ldi	r16, 0x61	; 97
    3f0a:	c0 2e       	mov	r12, r16
    3f0c:	01 e5       	ldi	r16, 0x51	; 81
    3f0e:	d0 2e       	mov	r13, r16
    3f10:	e1 2c       	mov	r14, r1
    3f12:	f1 2c       	mov	r15, r1
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    3f14:	1b 82       	std	Y+3, r1	; 0x03
    3f16:	1c 82       	std	Y+4, r1	; 0x04
    3f18:	1d 82       	std	Y+5, r1	; 0x05
    3f1a:	1e 82       	std	Y+6, r1	; 0x06
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    3f1c:	21 2c       	mov	r2, r1
    3f1e:	31 2c       	mov	r3, r1
    3f20:	21 01       	movw	r4, r2
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    3f22:	31 e0       	ldi	r19, 0x01	; 1
    3f24:	3a 87       	std	Y+10, r19	; 0x0a
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    3f26:	61 2c       	mov	r6, r1
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    3f28:	1b 8e       	std	Y+27, r1	; 0x1b
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    3f2a:	1b 86       	std	Y+11, r1	; 0x0b
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    3f2c:	1d 86       	std	Y+13, r1	; 0x0d
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    3f2e:	1c 86       	std	Y+12, r1	; 0x0c

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    3f30:	00 e0       	ldi	r16, 0x00	; 0

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    3f32:	80 91 18 05 	lds	r24, 0x0518
    3f36:	8f 5f       	subi	r24, 0xFF	; 255
    3f38:	80 93 18 05 	sts	0x0518, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    3f3c:	80 91 22 08 	lds	r24, 0x0822
    3f40:	88 23       	and	r24, r24
    3f42:	31 f0       	breq	.+12     	; 0x3f50 <main+0xac>
		{
			InterruptCounter++;
    3f44:	4e 89       	ldd	r20, Y+22	; 0x16
    3f46:	5f 89       	ldd	r21, Y+23	; 0x17
    3f48:	4f 5f       	subi	r20, 0xFF	; 255
    3f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f4c:	5f 8b       	std	Y+23, r21	; 0x17
    3f4e:	4e 8b       	std	Y+22, r20	; 0x16
		//* - Do an RC rate resample
		//* - Check the battery voltage
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    3f50:	2e 85       	ldd	r18, Y+14	; 0x0e
    3f52:	3f 85       	ldd	r19, Y+15	; 0x0f
    3f54:	2c 34       	cpi	r18, 0x4C	; 76
    3f56:	3c 44       	sbci	r19, 0x4C	; 76
    3f58:	28 f1       	brcs	.+74     	; 0x3fa4 <main+0x100>
		{
			Status_seconds++;
    3f5a:	28 8d       	ldd	r18, Y+24	; 0x18
    3f5c:	2f 5f       	subi	r18, 0xFF	; 255
    3f5e:	28 8f       	std	Y+24, r18	; 0x18
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    3f60:	4e 89       	ldd	r20, Y+22	; 0x16
    3f62:	5f 89       	ldd	r21, Y+23	; 0x17
    3f64:	50 93 1d 05 	sts	0x051D, r21
    3f68:	40 93 1c 05 	sts	0x051C, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3f6c:	80 91 01 06 	lds	r24, 0x0601
    3f70:	82 30       	cpi	r24, 0x02	; 2
    3f72:	11 f4       	brne	.+4      	; 0x3f78 <main+0xd4>
			{
				ResampleRCRate = true;
    3f74:	21 e0       	ldi	r18, 0x01	; 1
    3f76:	2b 8f       	std	Y+27, r18	; 0x1b
			}
	
			// Check if Vbat lower than trigger
			if (GetVbat() < Config.PowerTriggerActual)
    3f78:	0e 94 aa 4e 	call	0x9d54	; 0x9d54 <GetVbat>
    3f7c:	20 91 5d 06 	lds	r18, 0x065D
    3f80:	30 91 5e 06 	lds	r19, 0x065E
    3f84:	82 17       	cp	r24, r18
    3f86:	93 07       	cpc	r25, r19
    3f88:	20 f4       	brcc	.+8      	; 0x3f92 <main+0xee>
			{
				General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    3f8a:	80 91 20 05 	lds	r24, 0x0520
    3f8e:	88 60       	ori	r24, 0x08	; 8
    3f90:	03 c0       	rjmp	.+6      	; 0x3f98 <main+0xf4>
			}
			else
			{
				General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    3f92:	80 91 20 05 	lds	r24, 0x0520
    3f96:	87 7f       	andi	r24, 0xF7	; 247
    3f98:	80 93 20 05 	sts	0x0520, r24
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    3f9c:	1f 8a       	std	Y+23, r1	; 0x17
    3f9e:	1e 8a       	std	Y+22, r1	; 0x16

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    3fa0:	1f 86       	std	Y+15, r1	; 0x0f
    3fa2:	1e 86       	std	Y+14, r1	; 0x0e
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    3fa4:	81 2f       	mov	r24, r17
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	8b 30       	cpi	r24, 0x0B	; 11
    3faa:	91 05       	cpc	r25, r1
    3fac:	08 f0       	brcs	.+2      	; 0x3fb0 <main+0x10c>
    3fae:	72 c0       	rjmp	.+228    	; 0x4094 <main+0x1f0>
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	e2 5c       	subi	r30, 0xC2	; 194
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	0c 94 4d 51 	jmp	0xa29a	; 0xa29a <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    3fba:	83 b1       	in	r24, 0x03	; 3
    3fbc:	80 7f       	andi	r24, 0xF0	; 240
    3fbe:	80 3f       	cpi	r24, 0xF0	; 240
    3fc0:	41 f0       	breq	.+16     	; 0x3fd2 <main+0x12e>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    3fc2:	80 91 6e 00 	lds	r24, 0x006E
    3fc6:	81 60       	ori	r24, 0x01	; 1
    3fc8:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    3fcc:	13 e0       	ldi	r17, 0x03	; 3
					// Reset the status screen timeout
					Status_seconds = 0;
    3fce:	18 8e       	std	Y+24, r1	; 0x18
    3fd0:	61 c0       	rjmp	.+194    	; 0x4094 <main+0x1f0>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    3fd2:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	85 bb       	out	0x15, r24	; 21
    3fda:	5c c0       	rjmp	.+184    	; 0x4094 <main+0x1f0>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3fdc:	80 91 07 08 	lds	r24, 0x0807
    3fe0:	81 11       	cpse	r24, r1
    3fe2:	4d c0       	rjmp	.+154    	; 0x407e <main+0x1da>
    3fe4:	61 10       	cpse	r6, r1
    3fe6:	4b c0       	rjmp	.+150    	; 0x407e <main+0x1da>
    3fe8:	80 91 19 05 	lds	r24, 0x0519
    3fec:	88 23       	and	r24, r24
    3fee:	09 f4       	brne	.+2      	; 0x3ff2 <main+0x14e>
    3ff0:	51 c0       	rjmp	.+162    	; 0x4094 <main+0x1f0>
				{
					// Ready to move on
					Menu_mode = STATUS;
    3ff2:	14 e0       	ldi	r17, 0x04	; 4
    3ff4:	51 c0       	rjmp	.+162    	; 0x4098 <main+0x1f4>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    3ff6:	0e 94 f5 15 	call	0x2bea	; 0x2bea <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    3ffa:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    3ffc:	1a 8e       	std	Y+26, r1	; 0x1a
    3ffe:	19 8e       	std	Y+25, r1	; 0x19
    4000:	4b c0       	rjmp	.+150    	; 0x4098 <main+0x1f4>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    4002:	1f 9b       	sbis	0x03, 7	; 3
    4004:	47 c0       	rjmp	.+142    	; 0x4094 <main+0x1f0>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    4006:	15 e0       	ldi	r17, 0x05	; 5
    4008:	45 c0       	rjmp	.+138    	; 0x4094 <main+0x1f0>
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				// If in vibration test mode, stay in Status
				if ((Status_seconds >= 10) && (Config.Vibration == OFF))
    400a:	38 8d       	ldd	r19, Y+24	; 0x18
    400c:	3a 30       	cpi	r19, 0x0A	; 10
    400e:	20 f0       	brcs	.+8      	; 0x4018 <main+0x174>
    4010:	80 91 07 06 	lds	r24, 0x0607
    4014:	88 23       	and	r24, r24
    4016:	b1 f1       	breq	.+108    	; 0x4084 <main+0x1e0>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    4018:	1f 9b       	sbis	0x03, 7	; 3
    401a:	36 c0       	rjmp	.+108    	; 0x4088 <main+0x1e4>
					// Prevent PWM output
					PWMOverride = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    401c:	49 8d       	ldd	r20, Y+25	; 0x19
    401e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    4020:	43 31       	cpi	r20, 0x13	; 19
    4022:	53 41       	sbci	r21, 0x13	; 19
    4024:	b8 f1       	brcs	.+110    	; 0x4094 <main+0x1f0>
				{
					Menu_mode = PRESTATUS;
    4026:	13 e0       	ldi	r17, 0x03	; 3
    4028:	37 c0       	rjmp	.+110    	; 0x4098 <main+0x1f4>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    402a:	80 91 07 08 	lds	r24, 0x0807
    402e:	81 11       	cpse	r24, r1
    4030:	2d c0       	rjmp	.+90     	; 0x408c <main+0x1e8>
    4032:	61 10       	cpse	r6, r1
    4034:	2b c0       	rjmp	.+86     	; 0x408c <main+0x1e8>
    4036:	80 91 19 05 	lds	r24, 0x0519
    403a:	88 23       	and	r24, r24
    403c:	69 f1       	breq	.+90     	; 0x4098 <main+0x1f4>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    403e:	18 e0       	ldi	r17, 0x08	; 8
    4040:	29 c0       	rjmp	.+82     	; 0x4094 <main+0x1f0>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    4042:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    4046:	19 e0       	ldi	r17, 0x09	; 9
    4048:	27 c0       	rjmp	.+78     	; 0x4098 <main+0x1f4>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    404a:	80 91 07 08 	lds	r24, 0x0807
    404e:	81 11       	cpse	r24, r1
    4050:	1f c0       	rjmp	.+62     	; 0x4090 <main+0x1ec>
    4052:	61 10       	cpse	r6, r1
    4054:	1d c0       	rjmp	.+58     	; 0x4090 <main+0x1ec>
    4056:	80 91 19 05 	lds	r24, 0x0519
    405a:	88 23       	and	r24, r24
    405c:	e9 f0       	breq	.+58     	; 0x4098 <main+0x1f4>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    405e:	10 e0       	ldi	r17, 0x00	; 0
    4060:	19 c0       	rjmp	.+50     	; 0x4094 <main+0x1f0>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    4062:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    4064:	80 91 20 05 	lds	r24, 0x0520
    4068:	84 60       	ori	r24, 0x04	; 4
    406a:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    406e:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    4070:	0e 94 2a 3a 	call	0x7454	; 0x7454 <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    4074:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    4078:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    407a:	18 8e       	std	Y+24, r1	; 0x18
    407c:	0d c0       	rjmp	.+26     	; 0x4098 <main+0x1f4>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    407e:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    4080:	61 2c       	mov	r6, r1
    4082:	0a c0       	rjmp	.+20     	; 0x4098 <main+0x1f4>
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				// If in vibration test mode, stay in Status
				if ((Status_seconds >= 10) && (Config.Vibration == OFF))
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    4084:	17 e0       	ldi	r17, 0x07	; 7
    4086:	06 c0       	rjmp	.+12     	; 0x4094 <main+0x1f0>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    4088:	1a e0       	ldi	r17, 0x0A	; 10
    408a:	06 c0       	rjmp	.+12     	; 0x4098 <main+0x1f4>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    408c:	18 e0       	ldi	r17, 0x08	; 8
    408e:	01 c0       	rjmp	.+2      	; 0x4092 <main+0x1ee>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    4090:	10 e0       	ldi	r17, 0x00	; 0
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    4092:	61 2c       	mov	r6, r1
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    4094:	71 2c       	mov	r7, r1
    4096:	02 c0       	rjmp	.+4      	; 0x409c <main+0x1f8>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    4098:	77 24       	eor	r7, r7
    409a:	73 94       	inc	r7
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message
		if (Overdue)
    409c:	80 91 19 05 	lds	r24, 0x0519
    40a0:	88 23       	and	r24, r24
    40a2:	a1 f0       	breq	.+40     	; 0x40cc <main+0x228>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    40a4:	80 91 20 05 	lds	r24, 0x0520
    40a8:	82 60       	ori	r24, 0x02	; 2
    40aa:	80 93 20 05 	sts	0x0520, r24

			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    40ae:	80 91 61 06 	lds	r24, 0x0661
    40b2:	81 30       	cpi	r24, 0x01	; 1
    40b4:	81 f4       	brne	.+32     	; 0x40d6 <main+0x232>
    40b6:	80 91 20 05 	lds	r24, 0x0520
    40ba:	82 fd       	sbrc	r24, 2
    40bc:	0c c0       	rjmp	.+24     	; 0x40d6 <main+0x232>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    40be:	80 91 20 05 	lds	r24, 0x0520
    40c2:	84 60       	ori	r24, 0x04	; 4
    40c4:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;							// Signal that FC is now disarmed
    40c8:	2b 98       	cbi	0x05, 3	; 5
    40ca:	05 c0       	rjmp	.+10     	; 0x40d6 <main+0x232>

		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    40cc:	80 91 20 05 	lds	r24, 0x0520
    40d0:	8d 7f       	andi	r24, 0xFD	; 253
    40d2:	80 93 20 05 	sts	0x0520, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    40d6:	80 91 20 05 	lds	r24, 0x0520
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    40da:	83 fd       	sbrc	r24, 3
    40dc:	08 c0       	rjmp	.+16     	; 0x40ee <main+0x24a>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    40de:	80 91 20 05 	lds	r24, 0x0520
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    40e2:	81 fd       	sbrc	r24, 1
    40e4:	04 c0       	rjmp	.+8      	; 0x40ee <main+0x24a>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    40e6:	80 91 20 05 	lds	r24, 0x0520

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    40ea:	80 ff       	sbrs	r24, 0
    40ec:	06 c0       	rjmp	.+12     	; 0x40fa <main+0x256>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    40ee:	80 91 1e 05 	lds	r24, 0x051E
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    40f2:	84 ff       	sbrs	r24, 4
    40f4:	02 c0       	rjmp	.+4      	; 0x40fa <main+0x256>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    40f6:	29 9a       	sbi	0x05, 1	; 5
    40f8:	01 c0       	rjmp	.+2      	; 0x40fc <main+0x258>
		}
		else 
		{
			LVA = 0;
    40fa:	29 98       	cbi	0x05, 1	; 5
		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		// All cases - reset arm timer
		if (Config.ArmMode == ARMABLE)
    40fc:	80 91 61 06 	lds	r24, 0x0661
    4100:	81 30       	cpi	r24, 0x01	; 1
    4102:	09 f0       	breq	.+2      	; 0x4106 <main+0x262>
    4104:	9c c0       	rjmp	.+312    	; 0x423e <main+0x39a>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    4106:	80 91 86 08 	lds	r24, 0x0886
    410a:	90 91 87 08 	lds	r25, 0x0887
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    410e:	81 34       	cpi	r24, 0x41	; 65
    4110:	9c 4f       	sbci	r25, 0xFC	; 252
    4112:	3c f0       	brlt	.+14     	; 0x4122 <main+0x27e>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    4114:	80 91 86 08 	lds	r24, 0x0886
    4118:	90 91 87 08 	lds	r25, 0x0887
    411c:	80 3c       	cpi	r24, 0xC0	; 192
    411e:	93 40       	sbci	r25, 0x03	; 3
    4120:	14 f1       	brlt	.+68     	; 0x4166 <main+0x2c2>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    4122:	80 91 88 08 	lds	r24, 0x0888
    4126:	90 91 89 08 	lds	r25, 0x0889
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    412a:	81 34       	cpi	r24, 0x41	; 65
    412c:	9c 4f       	sbci	r25, 0xFC	; 252
    412e:	3c f0       	brlt	.+14     	; 0x413e <main+0x29a>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    4130:	80 91 88 08 	lds	r24, 0x0888
    4134:	90 91 89 08 	lds	r25, 0x0889
    4138:	80 3c       	cpi	r24, 0xC0	; 192
    413a:	93 40       	sbci	r25, 0x03	; 3
    413c:	a4 f0       	brlt	.+40     	; 0x4166 <main+0x2c2>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    413e:	80 91 8a 08 	lds	r24, 0x088A
    4142:	90 91 8b 08 	lds	r25, 0x088B
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    4146:	81 34       	cpi	r24, 0x41	; 65
    4148:	9c 4f       	sbci	r25, 0xFC	; 252
    414a:	3c f0       	brlt	.+14     	; 0x415a <main+0x2b6>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    414c:	80 91 8a 08 	lds	r24, 0x088A
    4150:	90 91 8b 08 	lds	r25, 0x088B
    4154:	80 3c       	cpi	r24, 0xC0	; 192
    4156:	93 40       	sbci	r25, 0x03	; 3
    4158:	34 f0       	brlt	.+12     	; 0x4166 <main+0x2c2>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    415a:	80 91 82 08 	lds	r24, 0x0882
    415e:	90 91 83 08 	lds	r25, 0x0883
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    4162:	c3 97       	sbiw	r24, 0x33	; 51
    4164:	1c f0       	brlt	.+6      	; 0x416c <main+0x2c8>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
			   )
			{
				Arm_timer = 0;
    4166:	21 2c       	mov	r2, r1
    4168:	31 2c       	mov	r3, r1
    416a:	21 01       	movw	r4, r2
			}
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
    416c:	80 91 20 05 	lds	r24, 0x0520
    4170:	82 ff       	sbrs	r24, 2
    4172:	1f c0       	rjmp	.+62     	; 0x41b2 <main+0x30e>
				Disarm_timer = 0;
				Disarm_seconds = 0;
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    4174:	4c e4       	ldi	r20, 0x4C	; 76
    4176:	24 16       	cp	r2, r20
    4178:	34 06       	cpc	r3, r20
    417a:	41 04       	cpc	r4, r1
    417c:	51 04       	cpc	r5, r1
    417e:	08 f4       	brcc	.+2      	; 0x4182 <main+0x2de>
    4180:	65 c0       	rjmp	.+202    	; 0x424c <main+0x3a8>
    4182:	80 91 86 08 	lds	r24, 0x0886
    4186:	90 91 87 08 	lds	r25, 0x0887
    418a:	80 34       	cpi	r24, 0x40	; 64
    418c:	9c 4f       	sbci	r25, 0xFC	; 252
    418e:	0c f0       	brlt	.+2      	; 0x4192 <main+0x2ee>
    4190:	5d c0       	rjmp	.+186    	; 0x424c <main+0x3a8>
				{
					Arm_timer = 0;
					General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    4192:	80 91 20 05 	lds	r24, 0x0520
    4196:	8b 7f       	andi	r24, 0xFB	; 251
    4198:	80 93 20 05 	sts	0x0520, r24
					CalibrateGyrosSlow();					// Calibrate gyros
    419c:	0e 94 43 29 	call	0x5286	; 0x5286 <CalibrateGyrosSlow>
					LED1 = 1;								// Signal that FC is ready
    41a0:	2b 9a       	sbi	0x05, 3	; 5
					reset_IMU();							// Reset IMU just in case...
    41a2:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <reset_IMU>

					// Force Menu to IDLE immediately unless in vibration test mode
					if (Config.Vibration == OFF)
    41a6:	80 91 07 06 	lds	r24, 0x0607
    41aa:	81 11       	cpse	r24, r1
    41ac:	53 c0       	rjmp	.+166    	; 0x4254 <main+0x3b0>
					{
						Menu_mode = IDLE;
    41ae:	10 e0       	ldi	r17, 0x00	; 0
    41b0:	51 c0       	rjmp	.+162    	; 0x4254 <main+0x3b0>
		
			// If armed, disarm if sticks held
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    41b2:	82 ee       	ldi	r24, 0xE2	; 226
    41b4:	28 16       	cp	r2, r24
    41b6:	84 ee       	ldi	r24, 0xE4	; 228
    41b8:	38 06       	cpc	r3, r24
    41ba:	41 04       	cpc	r4, r1
    41bc:	51 04       	cpc	r5, r1
    41be:	98 f0       	brcs	.+38     	; 0x41e6 <main+0x342>
    41c0:	80 91 86 08 	lds	r24, 0x0886
    41c4:	90 91 87 08 	lds	r25, 0x0887
    41c8:	81 3c       	cpi	r24, 0xC1	; 193
    41ca:	93 40       	sbci	r25, 0x03	; 3
    41cc:	64 f0       	brlt	.+24     	; 0x41e6 <main+0x342>
				{
					Arm_timer = 0;
					General_error |= (1 << DISARMED);		// Set flags to disarmed
    41ce:	80 91 20 05 	lds	r24, 0x0520
    41d2:	84 60       	ori	r24, 0x04	; 4
    41d4:	80 93 20 05 	sts	0x0520, r24
					LED1 = 0;								// Signal that FC is now disarmed
    41d8:	2b 98       	cbi	0x05, 3	; 5
#ifdef ERROR_LOG
add_log(MANUAL);
    41da:	82 e0       	ldi	r24, 0x02	; 2
    41dc:	0e 94 86 13 	call	0x270c	; 0x270c <add_log>
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    41e0:	21 2c       	mov	r2, r1
    41e2:	31 2c       	mov	r3, r1
    41e4:	21 01       	movw	r4, r2
#endif			
				}

				// Automatic disarm
				// Reset auto-disarm count if any RX activity or set to zero
				if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0))
    41e6:	80 91 1f 05 	lds	r24, 0x051F
    41ea:	80 fd       	sbrc	r24, 0
    41ec:	0d c0       	rjmp	.+26     	; 0x4208 <main+0x364>
    41ee:	80 91 62 06 	lds	r24, 0x0662
    41f2:	88 23       	and	r24, r24
    41f4:	49 f0       	breq	.+18     	; 0x4208 <main+0x364>
					Disarm_timer = 0;
					Disarm_seconds = 0;
				}
		
				// Increment disarm timer (seconds) if armed
				if (Disarm_timer > SECOND_TIMER)
    41f6:	29 81       	ldd	r18, Y+1	; 0x01
    41f8:	3a 81       	ldd	r19, Y+2	; 0x02
    41fa:	2c 34       	cpi	r18, 0x4C	; 76
    41fc:	3c 44       	sbci	r19, 0x4C	; 76
    41fe:	38 f0       	brcs	.+14     	; 0x420e <main+0x36a>
				{
					Disarm_seconds++;
    4200:	2f 81       	ldd	r18, Y+7	; 0x07
    4202:	2f 5f       	subi	r18, 0xFF	; 255
    4204:	2f 83       	std	Y+7, r18	; 0x07
    4206:	01 c0       	rjmp	.+2      	; 0x420a <main+0x366>
    4208:	1f 82       	std	Y+7, r1	; 0x07
    420a:	1a 82       	std	Y+2, r1	; 0x02
    420c:	19 82       	std	Y+1, r1	; 0x01
					Disarm_timer = 0;
				}

				// Auto-disarm model if timeout enabled and due
				// Don't allow disarms less than 30 seconds. That's just silly...
				if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))
    420e:	40 91 62 06 	lds	r20, 0x0662
    4212:	5f 81       	ldd	r21, Y+7	; 0x07
    4214:	25 2f       	mov	r18, r21
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	84 2f       	mov	r24, r20
    421a:	99 27       	eor	r25, r25
    421c:	87 fd       	sbrc	r24, 7
    421e:	90 95       	com	r25
    4220:	28 17       	cp	r18, r24
    4222:	39 07       	cpc	r19, r25
    4224:	ec f0       	brlt	.+58     	; 0x4260 <main+0x3bc>
    4226:	4e 31       	cpi	r20, 0x1E	; 30
    4228:	dc f0       	brlt	.+54     	; 0x4260 <main+0x3bc>
				{
					// Disarm the FC
					General_error |= (1 << DISARMED);		// Set flags to disarmed
    422a:	80 91 20 05 	lds	r24, 0x0520
    422e:	84 60       	ori	r24, 0x04	; 4
    4230:	80 93 20 05 	sts	0x0520, r24
					LED1 = 0;								// Signal that FC is now disarmed
    4234:	2b 98       	cbi	0x05, 3	; 5
#ifdef ERROR_LOG
add_log(TIMER);
    4236:	84 e0       	ldi	r24, 0x04	; 4
    4238:	0e 94 86 13 	call	0x270c	; 0x270c <add_log>
    423c:	11 c0       	rjmp	.+34     	; 0x4260 <main+0x3bc>
		} // if (Config.ArmMode == ARMABLE)
		
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    423e:	80 91 20 05 	lds	r24, 0x0520
    4242:	8b 7f       	andi	r24, 0xFB	; 251
    4244:	80 93 20 05 	sts	0x0520, r24
			LED1 = 1;
    4248:	2b 9a       	sbi	0x05, 3	; 5
    424a:	0a c0       	rjmp	.+20     	; 0x4260 <main+0x3bc>
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
				Disarm_seconds = 0;
    424c:	1f 82       	std	Y+7, r1	; 0x07
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    424e:	1a 82       	std	Y+2, r1	; 0x02
    4250:	19 82       	std	Y+1, r1	; 0x01
    4252:	06 c0       	rjmp	.+12     	; 0x4260 <main+0x3bc>
				Disarm_seconds = 0;
    4254:	1f 82       	std	Y+7, r1	; 0x07
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    4256:	1a 82       	std	Y+2, r1	; 0x02
    4258:	19 82       	std	Y+1, r1	; 0x01
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    425a:	21 2c       	mov	r2, r1
    425c:	31 2c       	mov	r3, r1
    425e:	21 01       	movw	r4, r2
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    4260:	0e 94 d5 4b 	call	0x97aa	; 0x97aa <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    4264:	80 91 82 08 	lds	r24, 0x0882
    4268:	90 91 83 08 	lds	r25, 0x0883
    426c:	c2 97       	sbiw	r24, 0x32	; 50
    426e:	5c f4       	brge	.+22     	; 0x4286 <main+0x3e2>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    4270:	80 91 20 05 	lds	r24, 0x0520
    4274:	8e 7f       	andi	r24, 0xFE	; 254
    4276:	80 93 20 05 	sts	0x0520, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    427a:	88 e1       	ldi	r24, 0x18	; 24
    427c:	aa e2       	ldi	r26, 0x2A	; 42
    427e:	b8 e0       	ldi	r27, 0x08	; 8
    4280:	1d 92       	st	X+, r1
    4282:	8a 95       	dec	r24
    4284:	e9 f7       	brne	.-6      	; 0x4280 <main+0x3dc>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to.
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    4286:	80 91 04 06 	lds	r24, 0x0604
    428a:	88 0f       	add	r24, r24
    428c:	99 0b       	sbc	r25, r25
    428e:	fc 01       	movw	r30, r24
    4290:	ec 57       	subi	r30, 0x7C	; 124
    4292:	f7 4f       	sbci	r31, 0xF7	; 247
    4294:	20 81       	ld	r18, Z
    4296:	31 81       	ldd	r19, Z+1	; 0x01
    4298:	25 3f       	cpi	r18, 0xF5	; 245
    429a:	31 40       	sbci	r19, 0x01	; 1
    429c:	14 f0       	brlt	.+4      	; 0x42a2 <main+0x3fe>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    429e:	22 e0       	ldi	r18, 0x02	; 2
    42a0:	06 c0       	rjmp	.+12     	; 0x42ae <main+0x40a>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    42a2:	20 81       	ld	r18, Z
    42a4:	31 81       	ldd	r19, Z+1	; 0x01
    42a6:	2d 30       	cpi	r18, 0x0D	; 13
    42a8:	3e 4f       	sbci	r19, 0xFE	; 254
    42aa:	24 f0       	brlt	.+8      	; 0x42b4 <main+0x410>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    42ac:	21 e0       	ldi	r18, 0x01	; 1
    42ae:	20 93 d5 07 	sts	0x07D5, r18
    42b2:	02 c0       	rjmp	.+4      	; 0x42b8 <main+0x414>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    42b4:	10 92 d5 07 	sts	0x07D5, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    42b8:	f3 e0       	ldi	r31, 0x03	; 3
    42ba:	bf 16       	cp	r11, r31
    42bc:	29 f0       	breq	.+10     	; 0x42c8 <main+0x424>
    42be:	20 91 05 06 	lds	r18, 0x0605
    42c2:	38 a5       	ldd	r19, Y+40	; 0x28
    42c4:	32 17       	cp	r19, r18
    42c6:	51 f1       	breq	.+84     	; 0x431c <main+0x478>
		{
			switch(Config.FlightSel)
    42c8:	b0 90 d5 07 	lds	r11, 0x07D5
    42cc:	41 e0       	ldi	r20, 0x01	; 1
    42ce:	b4 16       	cp	r11, r20
    42d0:	61 f0       	breq	.+24     	; 0x42ea <main+0x446>
    42d2:	52 e0       	ldi	r21, 0x02	; 2
    42d4:	b5 16       	cp	r11, r21
    42d6:	b1 f0       	breq	.+44     	; 0x4304 <main+0x460>
    42d8:	b1 10       	cpse	r11, r1
    42da:	1d c0       	rjmp	.+58     	; 0x4316 <main+0x472>
			{
				case 0:
					Transition_state = TRANS_P1;
    42dc:	10 92 23 05 	sts	0x0523, r1
					transition_counter = 0;
    42e0:	10 92 25 05 	sts	0x0525, r1
    42e4:	10 92 24 05 	sts	0x0524, r1
					break;
    42e8:	16 c0       	rjmp	.+44     	; 0x4316 <main+0x472>
				case 1:
					Transition_state = TRANS_P1n;
    42ea:	24 e0       	ldi	r18, 0x04	; 4
    42ec:	20 93 23 05 	sts	0x0523, r18
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    42f0:	20 91 06 06 	lds	r18, 0x0606
    42f4:	33 27       	eor	r19, r19
    42f6:	27 fd       	sbrc	r18, 7
    42f8:	30 95       	com	r19
    42fa:	30 93 25 05 	sts	0x0525, r19
    42fe:	20 93 24 05 	sts	0x0524, r18
					break;
    4302:	09 c0       	rjmp	.+18     	; 0x4316 <main+0x472>
				case 2:
					Transition_state = TRANS_P2;
    4304:	29 e0       	ldi	r18, 0x09	; 9
    4306:	20 93 23 05 	sts	0x0523, r18
					transition_counter = 100;
    430a:	a4 e6       	ldi	r26, 0x64	; 100
    430c:	b0 e0       	ldi	r27, 0x00	; 0
    430e:	b0 93 25 05 	sts	0x0525, r27
    4312:	a0 93 24 05 	sts	0x0524, r26
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    4316:	20 91 05 06 	lds	r18, 0x0605
    431a:	28 a7       	std	Y+40, r18	; 0x28
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    431c:	30 91 d5 07 	lds	r19, 0x07D5
    4320:	3e 8f       	std	Y+30, r19	; 0x1e
    4322:	31 e0       	ldi	r19, 0x01	; 1
    4324:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4326:	4b 11       	cpse	r20, r11
    4328:	01 c0       	rjmp	.+2      	; 0x432c <main+0x488>
    432a:	30 e0       	ldi	r19, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    432c:	20 91 05 06 	lds	r18, 0x0605
    4330:	21 11       	cpse	r18, r1
    4332:	1b c0       	rjmp	.+54     	; 0x436a <main+0x4c6>
		{
			// Offset RC input to (approx) -250 to 2250
			temp1 = RCinputs[Config.FlightChan] + 1000;
    4334:	fc 01       	movw	r30, r24
    4336:	ec 57       	subi	r30, 0x7C	; 124
    4338:	f7 4f       	sbci	r31, 0xF7	; 247
    433a:	80 81       	ld	r24, Z
    433c:	91 81       	ldd	r25, Z+1	; 0x01
    433e:	88 51       	subi	r24, 0x18	; 24
    4340:	9c 4f       	sbci	r25, 0xFC	; 252
    4342:	97 ff       	sbrs	r25, 7
    4344:	02 c0       	rjmp	.+4      	; 0x434a <main+0x4a6>
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    434a:	0a 96       	adiw	r24, 0x0a	; 10
    434c:	64 e1       	ldi	r22, 0x14	; 20
    434e:	70 e0       	ldi	r23, 0x00	; 0
    4350:	0e 94 f8 50 	call	0xa1f0	; 0xa1f0 <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    4354:	65 36       	cpi	r22, 0x65	; 101
    4356:	71 05       	cpc	r23, r1
    4358:	0c f4       	brge	.+2      	; 0x435c <main+0x4b8>
    435a:	ac c3       	rjmp	.+1880   	; 0x4ab4 <main+0xc10>
    435c:	84 e6       	ldi	r24, 0x64	; 100
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	90 93 22 05 	sts	0x0522, r25
    4364:	80 93 21 05 	sts	0x0521, r24
    4368:	a9 c3       	rjmp	.+1874   	; 0x4abc <main+0xc18>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    436a:	80 91 24 05 	lds	r24, 0x0524
    436e:	90 91 25 05 	lds	r25, 0x0525
    4372:	90 93 22 05 	sts	0x0522, r25
    4376:	80 93 21 05 	sts	0x0521, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    437a:	33 23       	and	r19, r19
    437c:	99 f0       	breq	.+38     	; 0x43a4 <main+0x500>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    437e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4380:	84 2f       	mov	r24, r20
    4382:	99 27       	eor	r25, r25
    4384:	87 fd       	sbrc	r24, 7
    4386:	90 95       	com	r25
    4388:	fc 01       	movw	r30, r24
    438a:	ee 0f       	add	r30, r30
    438c:	ff 1f       	adc	r31, r31
    438e:	e8 0f       	add	r30, r24
    4390:	f9 1f       	adc	r31, r25
    4392:	eb 0d       	add	r30, r11
    4394:	f1 1d       	adc	r31, r1
    4396:	b7 fc       	sbrc	r11, 7
    4398:	fa 95       	dec	r31
    439a:	e0 50       	subi	r30, 0x00	; 0
    439c:	ff 4f       	sbci	r31, 0xFF	; 255
    439e:	e4 91       	lpm	r30, Z
    43a0:	e0 93 23 05 	sts	0x0523, r30

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    43a4:	22 23       	and	r18, r18
    43a6:	49 f0       	breq	.+18     	; 0x43ba <main+0x516>
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
		}

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    43a8:	53 ec       	ldi	r21, 0xC3	; 195
    43aa:	25 03       	mulsu	r18, r21
    43ac:	c0 01       	movw	r24, r0
    43ae:	11 24       	eor	r1, r1
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    43b0:	4a 89       	ldd	r20, Y+18	; 0x12
    43b2:	5b 89       	ldd	r21, Y+19	; 0x13
    43b4:	84 17       	cp	r24, r20
    43b6:	95 07       	cpc	r25, r21
    43b8:	18 f0       	brcs	.+6      	; 0x43c0 <main+0x51c>
    43ba:	33 23       	and	r19, r19
    43bc:	09 f4       	brne	.+2      	; 0x43c0 <main+0x51c>
    43be:	a9 c0       	rjmp	.+338    	; 0x4512 <main+0x66e>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    43c0:	80 91 23 05 	lds	r24, 0x0523
    43c4:	81 11       	cpse	r24, r1
    43c6:	05 c0       	rjmp	.+10     	; 0x43d2 <main+0x52e>
			{
				transition_counter = 0;
    43c8:	10 92 25 05 	sts	0x0525, r1
    43cc:	10 92 24 05 	sts	0x0524, r1
    43d0:	22 c0       	rjmp	.+68     	; 0x4416 <main+0x572>
			}
			else if (Transition_state == TRANS_P1n)
    43d2:	84 30       	cpi	r24, 0x04	; 4
    43d4:	31 f4       	brne	.+12     	; 0x43e2 <main+0x53e>
			{
				transition_counter = Config.Transition_P1n;
    43d6:	80 91 06 06 	lds	r24, 0x0606
    43da:	99 27       	eor	r25, r25
    43dc:	87 fd       	sbrc	r24, 7
    43de:	90 95       	com	r25
    43e0:	04 c0       	rjmp	.+8      	; 0x43ea <main+0x546>
			}
			else if (Transition_state == TRANS_P2)
    43e2:	89 30       	cpi	r24, 0x09	; 9
    43e4:	39 f4       	brne	.+14     	; 0x43f4 <main+0x550>
			{
				transition_counter = 100;
    43e6:	84 e6       	ldi	r24, 0x64	; 100
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	90 93 25 05 	sts	0x0525, r25
    43ee:	80 93 24 05 	sts	0x0524, r24
    43f2:	11 c0       	rjmp	.+34     	; 0x4416 <main+0x572>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    43f4:	81 30       	cpi	r24, 0x01	; 1
    43f6:	79 f4       	brne	.+30     	; 0x4416 <main+0x572>
    43f8:	80 91 06 06 	lds	r24, 0x0606
    43fc:	99 27       	eor	r25, r25
    43fe:	87 fd       	sbrc	r24, 7
    4400:	90 95       	com	r25
    4402:	20 91 24 05 	lds	r18, 0x0524
    4406:	30 91 25 05 	lds	r19, 0x0525
    440a:	82 17       	cp	r24, r18
    440c:	93 07       	cpc	r25, r19
    440e:	1c f4       	brge	.+6      	; 0x4416 <main+0x572>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    4410:	88 e0       	ldi	r24, 0x08	; 8
    4412:	80 93 23 05 	sts	0x0523, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    4416:	80 91 23 05 	lds	r24, 0x0523
    441a:	88 30       	cpi	r24, 0x08	; 8
    441c:	79 f4       	brne	.+30     	; 0x443c <main+0x598>
    441e:	80 91 06 06 	lds	r24, 0x0606
    4422:	99 27       	eor	r25, r25
    4424:	87 fd       	sbrc	r24, 7
    4426:	90 95       	com	r25
    4428:	20 91 24 05 	lds	r18, 0x0524
    442c:	30 91 25 05 	lds	r19, 0x0525
    4430:	28 17       	cp	r18, r24
    4432:	39 07       	cpc	r19, r25
    4434:	1c f4       	brge	.+6      	; 0x443c <main+0x598>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	80 93 23 05 	sts	0x0523, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    443c:	80 91 23 05 	lds	r24, 0x0523
    4440:	8b 7f       	andi	r24, 0xFB	; 251
    4442:	82 30       	cpi	r24, 0x02	; 2
    4444:	91 f4       	brne	.+36     	; 0x446a <main+0x5c6>
			{
				transition_counter--;
    4446:	80 91 24 05 	lds	r24, 0x0524
    444a:	90 91 25 05 	lds	r25, 0x0525
    444e:	01 97       	sbiw	r24, 0x01	; 1
    4450:	90 93 25 05 	sts	0x0525, r25
    4454:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= 0)
    4458:	18 16       	cp	r1, r24
    445a:	19 06       	cpc	r1, r25
    445c:	34 f0       	brlt	.+12     	; 0x446a <main+0x5c6>
				{
					transition_counter = 0;
    445e:	10 92 25 05 	sts	0x0525, r1
    4462:	10 92 24 05 	sts	0x0524, r1
					Transition_state = TRANS_P1;
    4466:	10 92 23 05 	sts	0x0523, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    446a:	80 91 23 05 	lds	r24, 0x0523
    446e:	81 30       	cpi	r24, 0x01	; 1
    4470:	c1 f4       	brne	.+48     	; 0x44a2 <main+0x5fe>
			{
				transition_counter++;
    4472:	80 91 24 05 	lds	r24, 0x0524
    4476:	90 91 25 05 	lds	r25, 0x0525
    447a:	01 96       	adiw	r24, 0x01	; 1
    447c:	90 93 25 05 	sts	0x0525, r25
    4480:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= Config.Transition_P1n)
    4484:	20 91 06 06 	lds	r18, 0x0606
    4488:	33 27       	eor	r19, r19
    448a:	27 fd       	sbrc	r18, 7
    448c:	30 95       	com	r19
    448e:	82 17       	cp	r24, r18
    4490:	93 07       	cpc	r25, r19
    4492:	3c f0       	brlt	.+14     	; 0x44a2 <main+0x5fe>
				{
					transition_counter = Config.Transition_P1n;
    4494:	30 93 25 05 	sts	0x0525, r19
    4498:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    449c:	84 e0       	ldi	r24, 0x04	; 4
    449e:	80 93 23 05 	sts	0x0523, r24
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    44a2:	80 91 23 05 	lds	r24, 0x0523
    44a6:	88 30       	cpi	r24, 0x08	; 8
    44a8:	c1 f4       	brne	.+48     	; 0x44da <main+0x636>
			{
				transition_counter--;
    44aa:	80 91 24 05 	lds	r24, 0x0524
    44ae:	90 91 25 05 	lds	r25, 0x0525
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	90 93 25 05 	sts	0x0525, r25
    44b8:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= Config.Transition_P1n)
    44bc:	20 91 06 06 	lds	r18, 0x0606
    44c0:	33 27       	eor	r19, r19
    44c2:	27 fd       	sbrc	r18, 7
    44c4:	30 95       	com	r19
    44c6:	28 17       	cp	r18, r24
    44c8:	39 07       	cpc	r19, r25
    44ca:	3c f0       	brlt	.+14     	; 0x44da <main+0x636>
				{
					transition_counter = Config.Transition_P1n;
    44cc:	30 93 25 05 	sts	0x0525, r19
    44d0:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    44d4:	84 e0       	ldi	r24, 0x04	; 4
    44d6:	80 93 23 05 	sts	0x0523, r24
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    44da:	80 91 23 05 	lds	r24, 0x0523
    44de:	8b 7f       	andi	r24, 0xFB	; 251
    44e0:	83 30       	cpi	r24, 0x03	; 3
    44e2:	a9 f4       	brne	.+42     	; 0x450e <main+0x66a>
			{
				transition_counter++;
    44e4:	80 91 24 05 	lds	r24, 0x0524
    44e8:	90 91 25 05 	lds	r25, 0x0525
    44ec:	01 96       	adiw	r24, 0x01	; 1
    44ee:	90 93 25 05 	sts	0x0525, r25
    44f2:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= 100)
    44f6:	84 36       	cpi	r24, 0x64	; 100
    44f8:	91 05       	cpc	r25, r1
    44fa:	4c f0       	brlt	.+18     	; 0x450e <main+0x66a>
				{
					transition_counter = 100;
    44fc:	a4 e6       	ldi	r26, 0x64	; 100
    44fe:	b0 e0       	ldi	r27, 0x00	; 0
    4500:	b0 93 25 05 	sts	0x0525, r27
    4504:	a0 93 24 05 	sts	0x0524, r26
					Transition_state = TRANS_P2;
    4508:	89 e0       	ldi	r24, 0x09	; 9
    450a:	80 93 23 05 	sts	0x0523, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    450e:	1b 8a       	std	Y+19, r1	; 0x13
    4510:	1a 8a       	std	Y+18, r1	; 0x12
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    4512:	20 91 23 05 	lds	r18, 0x0523
    4516:	22 23       	and	r18, r18
    4518:	31 f0       	breq	.+12     	; 0x4526 <main+0x682>
    451a:	80 91 21 05 	lds	r24, 0x0521
    451e:	90 91 22 05 	lds	r25, 0x0522
    4522:	00 97       	sbiw	r24, 0x00	; 0
    4524:	39 f4       	brne	.+14     	; 0x4534 <main+0x690>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    4526:	8c e0       	ldi	r24, 0x0C	; 12
    4528:	e6 e3       	ldi	r30, 0x36	; 54
    452a:	f8 e0       	ldi	r31, 0x08	; 8
    452c:	11 92       	st	Z+, r1
    452e:	8a 95       	dec	r24
    4530:	e9 f7       	brne	.-6      	; 0x452c <main+0x688>
    4532:	0b c0       	rjmp	.+22     	; 0x454a <main+0x6a6>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    4534:	29 30       	cpi	r18, 0x09	; 9
    4536:	19 f0       	breq	.+6      	; 0x453e <main+0x69a>
    4538:	84 36       	cpi	r24, 0x64	; 100
    453a:	91 05       	cpc	r25, r1
    453c:	31 f4       	brne	.+12     	; 0x454a <main+0x6a6>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    453e:	8c e0       	ldi	r24, 0x0C	; 12
    4540:	aa e2       	ldi	r26, 0x2A	; 42
    4542:	b8 e0       	ldi	r27, 0x08	; 8
    4544:	1d 92       	st	X+, r1
    4546:	8a 95       	dec	r24
    4548:	e9 f7       	brne	.-6      	; 0x4544 <main+0x6a0>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    454a:	0e 94 c7 31 	call	0x638e	; 0x638e <TIM16_ReadTCNT1>
    454e:	9d 8b       	std	Y+21, r25	; 0x15
    4550:	8c 8b       	std	Y+20, r24	; 0x14
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    4552:	88 15       	cp	r24, r8
    4554:	99 05       	cpc	r25, r9
    4556:	b8 f4       	brcc	.+46     	; 0x4586 <main+0x6e2>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	a1 e0       	ldi	r26, 0x01	; 1
    455e:	b0 e0       	ldi	r27, 0x00	; 0
    4560:	88 19       	sub	r24, r8
    4562:	99 09       	sbc	r25, r9
    4564:	a1 09       	sbc	r26, r1
    4566:	b1 09       	sbc	r27, r1
    4568:	2c 89       	ldd	r18, Y+20	; 0x14
    456a:	3d 89       	ldd	r19, Y+21	; 0x15
    456c:	82 0f       	add	r24, r18
    456e:	93 1f       	adc	r25, r19
    4570:	a1 1d       	adc	r26, r1
    4572:	b1 1d       	adc	r27, r1
    4574:	2b 81       	ldd	r18, Y+3	; 0x03
    4576:	3c 81       	ldd	r19, Y+4	; 0x04
    4578:	4d 81       	ldd	r20, Y+5	; 0x05
    457a:	5e 81       	ldd	r21, Y+6	; 0x06
    457c:	28 0f       	add	r18, r24
    457e:	39 1f       	adc	r19, r25
    4580:	4a 1f       	adc	r20, r26
    4582:	5b 1f       	adc	r21, r27
    4584:	0c c0       	rjmp	.+24     	; 0x459e <main+0x6fa>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    4586:	8c 89       	ldd	r24, Y+20	; 0x14
    4588:	9d 89       	ldd	r25, Y+21	; 0x15
    458a:	88 19       	sub	r24, r8
    458c:	99 09       	sbc	r25, r9
    458e:	2b 81       	ldd	r18, Y+3	; 0x03
    4590:	3c 81       	ldd	r19, Y+4	; 0x04
    4592:	4d 81       	ldd	r20, Y+5	; 0x05
    4594:	5e 81       	ldd	r21, Y+6	; 0x06
    4596:	28 0f       	add	r18, r24
    4598:	39 1f       	adc	r19, r25
    459a:	41 1d       	adc	r20, r1
    459c:	51 1d       	adc	r21, r1
    459e:	2b 83       	std	Y+3, r18	; 0x03
    45a0:	3c 83       	std	Y+4, r19	; 0x04
    45a2:	4d 83       	std	Y+5, r20	; 0x05
    45a4:	5e 83       	std	Y+6, r21	; 0x06
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    45a6:	80 91 b2 00 	lds	r24, 0x00B2
    45aa:	3b a1       	ldd	r19, Y+35	; 0x23
    45ac:	83 1b       	sub	r24, r19
    45ae:	28 0e       	add	r2, r24
    45b0:	31 1c       	adc	r3, r1
    45b2:	41 1c       	adc	r4, r1
    45b4:	51 1c       	adc	r5, r1
		Arm_TCNT2 = TCNT2;
    45b6:	40 91 b2 00 	lds	r20, 0x00B2
    45ba:	4b a3       	std	Y+35, r20	; 0x23

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    45bc:	80 91 b2 00 	lds	r24, 0x00B2
    45c0:	2e a1       	ldd	r18, Y+38	; 0x26
    45c2:	82 1b       	sub	r24, r18
    45c4:	48 89       	ldd	r20, Y+16	; 0x10
    45c6:	59 89       	ldd	r21, Y+17	; 0x11
    45c8:	48 0f       	add	r20, r24
    45ca:	51 1d       	adc	r21, r1
    45cc:	59 8b       	std	Y+17, r21	; 0x11
    45ce:	48 8b       	std	Y+16, r20	; 0x10
		ServoRate_TCNT2 = TCNT2;
    45d0:	20 91 b2 00 	lds	r18, 0x00B2
    45d4:	2e a3       	std	Y+38, r18	; 0x26
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    45d6:	80 91 b2 00 	lds	r24, 0x00B2
    45da:	3d a1       	ldd	r19, Y+37	; 0x25
    45dc:	83 1b       	sub	r24, r19
    45de:	48 85       	ldd	r20, Y+8	; 0x08
    45e0:	59 85       	ldd	r21, Y+9	; 0x09
    45e2:	48 0f       	add	r20, r24
    45e4:	51 1d       	adc	r21, r1
    45e6:	59 87       	std	Y+9, r21	; 0x09
    45e8:	48 87       	std	Y+8, r20	; 0x08
		Servo_TCNT2 = TCNT2;
    45ea:	20 91 b2 00 	lds	r18, 0x00B2
    45ee:	2d a3       	std	Y+37, r18	; 0x25
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    45f0:	80 91 b2 00 	lds	r24, 0x00B2
    45f4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    45f6:	83 1b       	sub	r24, r19
    45f8:	4a 89       	ldd	r20, Y+18	; 0x12
    45fa:	5b 89       	ldd	r21, Y+19	; 0x13
    45fc:	48 0f       	add	r20, r24
    45fe:	51 1d       	adc	r21, r1
    4600:	5b 8b       	std	Y+19, r21	; 0x13
    4602:	4a 8b       	std	Y+18, r20	; 0x12
		Transition_TCNT2 = TCNT2;
    4604:	20 91 b2 00 	lds	r18, 0x00B2
    4608:	2f 8f       	std	Y+31, r18	; 0x1f

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    460a:	80 91 b2 00 	lds	r24, 0x00B2
    460e:	38 a1       	ldd	r19, Y+32	; 0x20
    4610:	83 1b       	sub	r24, r19
    4612:	4e 85       	ldd	r20, Y+14	; 0x0e
    4614:	5f 85       	ldd	r21, Y+15	; 0x0f
    4616:	48 0f       	add	r20, r24
    4618:	51 1d       	adc	r21, r1
    461a:	5f 87       	std	Y+15, r21	; 0x0f
    461c:	4e 87       	std	Y+14, r20	; 0x0e
		Status_TCNT2 = TCNT2;
    461e:	20 91 b2 00 	lds	r18, 0x00B2
    4622:	28 a3       	std	Y+32, r18	; 0x20
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    4624:	80 91 b2 00 	lds	r24, 0x00B2
    4628:	39 a1       	ldd	r19, Y+33	; 0x21
    462a:	83 1b       	sub	r24, r19
    462c:	49 8d       	ldd	r20, Y+25	; 0x19
    462e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    4630:	48 0f       	add	r20, r24
    4632:	51 1d       	adc	r21, r1
    4634:	5a 8f       	std	Y+26, r21	; 0x1a
    4636:	49 8f       	std	Y+25, r20	; 0x19
		Refresh_TCNT2 = TCNT2;
    4638:	20 91 b2 00 	lds	r18, 0x00B2
    463c:	29 a3       	std	Y+33, r18	; 0x21

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    463e:	80 91 b2 00 	lds	r24, 0x00B2
    4642:	3a a1       	ldd	r19, Y+34	; 0x22
    4644:	83 1b       	sub	r24, r19
    4646:	49 81       	ldd	r20, Y+1	; 0x01
    4648:	5a 81       	ldd	r21, Y+2	; 0x02
    464a:	48 0f       	add	r20, r24
    464c:	51 1d       	adc	r21, r1
    464e:	5a 83       	std	Y+2, r21	; 0x02
    4650:	49 83       	std	Y+1, r20	; 0x01
		Disarm_TCNT2 = TCNT2;
    4652:	20 91 b2 00 	lds	r18, 0x00B2
    4656:	2a a3       	std	Y+34, r18	; 0x22

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    4658:	80 91 b2 00 	lds	r24, 0x00B2
    465c:	3c a1       	ldd	r19, Y+36	; 0x24
    465e:	83 1b       	sub	r24, r19
    4660:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4662:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4664:	48 0f       	add	r20, r24
    4666:	51 1d       	adc	r21, r1
    4668:	5d 8f       	std	Y+29, r21	; 0x1d
    466a:	4c 8f       	std	Y+28, r20	; 0x1c
		Ticker_TCNT2 = TCNT2;
    466c:	20 91 b2 00 	lds	r18, 0x00B2
    4670:	2c a3       	std	Y+36, r18	; 0x24
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    4672:	80 91 1e 05 	lds	r24, 0x051E
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    4676:	53 ff       	sbrs	r21, 3
    4678:	02 c0       	rjmp	.+4      	; 0x467e <main+0x7da>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    467a:	80 61       	ori	r24, 0x10	; 16
    467c:	01 c0       	rjmp	.+2      	; 0x4680 <main+0x7dc>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    467e:	8f 7e       	andi	r24, 0xEF	; 239
    4680:	80 93 1e 05 	sts	0x051E, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    4684:	48 89       	ldd	r20, Y+16	; 0x10
    4686:	59 89       	ldd	r21, Y+17	; 0x11
    4688:	4d 32       	cpi	r20, 0x2D	; 45
    468a:	51 40       	sbci	r21, 0x01	; 1
    468c:	20 f0       	brcs	.+8      	; 0x4696 <main+0x7f2>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    468e:	19 8a       	std	Y+17, r1	; 0x11
    4690:	18 8a       	std	Y+16, r1	; 0x10
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    4692:	21 e0       	ldi	r18, 0x01	; 1
    4694:	2b 87       	std	Y+11, r18	; 0x0b
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    4696:	48 85       	ldd	r20, Y+8	; 0x08
    4698:	59 85       	ldd	r21, Y+9	; 0x09
    469a:	46 32       	cpi	r20, 0x26	; 38
    469c:	56 42       	sbci	r21, 0x26	; 38
    469e:	90 f0       	brcs	.+36     	; 0x46c4 <main+0x820>
		{
#ifdef ERROR_LOG
			// Log the no signal event if previously NOT overdue, armable and armed
			// This makes sure we only get one log per event
			if ((!Overdue) && (Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    46a0:	80 91 19 05 	lds	r24, 0x0519
    46a4:	81 11       	cpse	r24, r1
    46a6:	0b c0       	rjmp	.+22     	; 0x46be <main+0x81a>
    46a8:	80 91 61 06 	lds	r24, 0x0661
    46ac:	81 30       	cpi	r24, 0x01	; 1
    46ae:	39 f4       	brne	.+14     	; 0x46be <main+0x81a>
    46b0:	80 91 20 05 	lds	r24, 0x0520
    46b4:	82 fd       	sbrc	r24, 2
    46b6:	03 c0       	rjmp	.+6      	; 0x46be <main+0x81a>
			{
				add_log(NOSIGNAL);
    46b8:	83 e0       	ldi	r24, 0x03	; 3
    46ba:	0e 94 86 13 	call	0x270c	; 0x270c <add_log>
			}
#endif			
			Overdue = true;	// This results in a "No Signal" error
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	80 93 19 05 	sts	0x0519, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    46c4:	0e 94 c1 28 	call	0x5182	; 0x5182 <ReadGyros>
		ReadAcc();
    46c8:	0e 94 76 11 	call	0x22ec	; 0x22ec <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    46cc:	0e 94 c7 31 	call	0x638e	; 0x638e <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    46d0:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    46d2:	20 91 1a 05 	lds	r18, 0x051A
    46d6:	30 91 1b 05 	lds	r19, 0x051B
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    46da:	20 91 1a 05 	lds	r18, 0x051A
    46de:	30 91 1b 05 	lds	r19, 0x051B
    46e2:	ac 01       	movw	r20, r24
    46e4:	42 1b       	sub	r20, r18
    46e6:	53 0b       	sbc	r21, r19
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    46e8:	90 93 1b 05 	sts	0x051B, r25
    46ec:	80 93 1a 05 	sts	0x051A, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    46f0:	80 91 0a 08 	lds	r24, 0x080A
    46f4:	90 91 0b 08 	lds	r25, 0x080B
    46f8:	60 e0       	ldi	r22, 0x00	; 0
    46fa:	70 e0       	ldi	r23, 0x00	; 0
    46fc:	02 97       	sbiw	r24, 0x02	; 2
    46fe:	18 f4       	brcc	.+6      	; 0x4706 <main+0x862>
		{
			interval = ticker_16; // uint16_t
    4700:	4a 01       	movw	r8, r20
    4702:	5b 01       	movw	r10, r22
    4704:	11 c0       	rjmp	.+34     	; 0x4728 <main+0x884>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    4706:	80 90 0a 08 	lds	r8, 0x080A
    470a:	90 90 0b 08 	lds	r9, 0x080B
    470e:	a1 2c       	mov	r10, r1
    4710:	b1 2c       	mov	r11, r1
    4712:	ef e0       	ldi	r30, 0x0F	; 15
    4714:	88 0c       	add	r8, r8
    4716:	99 1c       	adc	r9, r9
    4718:	aa 1c       	adc	r10, r10
    471a:	bb 1c       	adc	r11, r11
    471c:	ea 95       	dec	r30
    471e:	d1 f7       	brne	.-12     	; 0x4714 <main+0x870>
    4720:	84 0e       	add	r8, r20
    4722:	95 1e       	adc	r9, r21
    4724:	a6 1e       	adc	r10, r22
    4726:	b7 1e       	adc	r11, r23
		}

		TMR0_counter = 0;
    4728:	10 92 0b 08 	sts	0x080B, r1
    472c:	10 92 0a 08 	sts	0x080A, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    4730:	c5 01       	movw	r24, r10
    4732:	b4 01       	movw	r22, r8
    4734:	0e 94 b1 2c 	call	0x5962	; 0x5962 <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    4738:	c5 01       	movw	r24, r10
    473a:	b4 01       	movw	r22, r8
    473c:	0e 94 21 46 	call	0x8c42	; 0x8c42 <Sensor_PID>
		//* FrameRate = Serial frame gap as measured by the ISR.
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//************************************************************

		if (Interrupted)
    4740:	80 91 07 08 	lds	r24, 0x0807
    4744:	88 23       	and	r24, r24
    4746:	09 f4       	brne	.+2      	; 0x474a <main+0x8a6>
    4748:	c0 c0       	rjmp	.+384    	; 0x48ca <main+0xa26>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer if not in FAST mode.
			if (Config.Servo_rate < FAST)
    474a:	80 91 01 06 	lds	r24, 0x0601
    474e:	82 30       	cpi	r24, 0x02	; 2
    4750:	64 f4       	brge	.+24     	; 0x476a <main+0x8c6>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    4752:	21 e0       	ldi	r18, 0x01	; 1
    4754:	2a 87       	std	Y+10, r18	; 0x0a
    4756:	2b 81       	ldd	r18, Y+3	; 0x03
    4758:	3c 81       	ldd	r19, Y+4	; 0x04
    475a:	4d 81       	ldd	r20, Y+5	; 0x05
    475c:	5e 81       	ldd	r21, Y+6	; 0x06
    475e:	24 3c       	cpi	r18, 0xC4	; 196
    4760:	32 4a       	sbci	r19, 0xA2	; 162
    4762:	41 05       	cpc	r20, r1
    4764:	51 05       	cpc	r21, r1
    4766:	08 f4       	brcc	.+2      	; 0x476a <main+0x8c6>
    4768:	1a 86       	std	Y+10, r1	; 0x0a
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    476a:	01 11       	cpse	r16, r1
    476c:	0e c0       	rjmp	.+28     	; 0x478a <main+0x8e6>
    476e:	82 30       	cpi	r24, 0x02	; 2
    4770:	09 f0       	breq	.+2      	; 0x4774 <main+0x8d0>
    4772:	a8 c1       	rjmp	.+848    	; 0x4ac4 <main+0xc20>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    4774:	80 91 25 08 	lds	r24, 0x0825
    4778:	90 91 26 08 	lds	r25, 0x0826
    477c:	21 e0       	ldi	r18, 0x01	; 1
    477e:	2a 87       	std	Y+10, r18	; 0x0a
    4780:	84 3c       	cpi	r24, 0xC4	; 196
    4782:	92 4a       	sbci	r25, 0xA2	; 162
    4784:	40 f4       	brcc	.+16     	; 0x4796 <main+0x8f2>
    4786:	1a 86       	std	Y+10, r1	; 0x0a
    4788:	39 c0       	rjmp	.+114    	; 0x47fc <main+0x958>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the serial data gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    478a:	82 30       	cpi	r24, 0x02	; 2
    478c:	09 f0       	breq	.+2      	; 0x4790 <main+0x8ec>
    478e:	9a c1       	rjmp	.+820    	; 0x4ac4 <main+0xc20>
				// Slow packets (19.7ms gap). Pulse spans just two input packets.
				// 38.8s available space for S.Bus, 40ms for Satellite and 39.92ms for Xtreme.
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
    4790:	4a 85       	ldd	r20, Y+10	; 0x0a
    4792:	44 23       	and	r20, r20
    4794:	99 f1       	breq	.+102    	; 0x47fc <main+0x958>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
    4796:	58 ec       	ldi	r21, 0xC8	; 200
    4798:	c5 16       	cp	r12, r21
    479a:	5b e4       	ldi	r21, 0x4B	; 75
    479c:	d5 06       	cpc	r13, r21
    479e:	e1 04       	cpc	r14, r1
    47a0:	f1 04       	cpc	r15, r1
    47a2:	08 f0       	brcs	.+2      	; 0x47a6 <main+0x902>
    47a4:	9d c1       	rjmp	.+826    	; 0x4ae0 <main+0xc3c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
    47a6:	86 e2       	ldi	r24, 0x26	; 38
    47a8:	c8 16       	cp	r12, r24
    47aa:	8f e3       	ldi	r24, 0x3F	; 63
    47ac:	d8 06       	cpc	r13, r24
    47ae:	e1 04       	cpc	r14, r1
    47b0:	f1 04       	cpc	r15, r1
    47b2:	08 f0       	brcs	.+2      	; 0x47b6 <main+0x912>
    47b4:	98 c1       	rjmp	.+816    	; 0x4ae6 <main+0xc42>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
    47b6:	91 e2       	ldi	r25, 0x21	; 33
    47b8:	c9 16       	cp	r12, r25
    47ba:	96 e3       	ldi	r25, 0x36	; 54
    47bc:	d9 06       	cpc	r13, r25
    47be:	e1 04       	cpc	r14, r1
    47c0:	f1 04       	cpc	r15, r1
    47c2:	08 f0       	brcs	.+2      	; 0x47c6 <main+0x922>
    47c4:	93 c1       	rjmp	.+806    	; 0x4aec <main+0xc48>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
    47c6:	ad e5       	ldi	r26, 0x5D	; 93
    47c8:	ca 16       	cp	r12, r26
    47ca:	af e2       	ldi	r26, 0x2F	; 47
    47cc:	da 06       	cpc	r13, r26
    47ce:	e1 04       	cpc	r14, r1
    47d0:	f1 04       	cpc	r15, r1
    47d2:	08 f0       	brcs	.+2      	; 0x47d6 <main+0x932>
    47d4:	7a c1       	rjmp	.+756    	; 0x4aca <main+0xc26>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
    47d6:	bc ec       	ldi	r27, 0xCC	; 204
    47d8:	cb 16       	cp	r12, r27
    47da:	b9 e2       	ldi	r27, 0x29	; 41
    47dc:	db 06       	cpc	r13, r27
    47de:	e1 04       	cpc	r14, r1
    47e0:	f1 04       	cpc	r15, r1
    47e2:	08 f0       	brcs	.+2      	; 0x47e6 <main+0x942>
    47e4:	75 c1       	rjmp	.+746    	; 0x4ad0 <main+0xc2c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
    47e6:	01 e0       	ldi	r16, 0x01	; 1
    47e8:	e4 ee       	ldi	r30, 0xE4	; 228
    47ea:	ce 16       	cp	r12, r30
    47ec:	e5 e2       	ldi	r30, 0x25	; 37
    47ee:	de 06       	cpc	r13, r30
    47f0:	e1 04       	cpc	r14, r1
    47f2:	f1 04       	cpc	r15, r1
    47f4:	70 f5       	brcc	.+92     	; 0x4852 <main+0x9ae>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    47f6:	2a e0       	ldi	r18, 0x0A	; 10
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	2d c0       	rjmp	.+90     	; 0x4856 <main+0x9b2>

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
    47fc:	3d ec       	ldi	r19, 0xCD	; 205
    47fe:	c3 16       	cp	r12, r19
    4800:	36 e4       	ldi	r19, 0x46	; 70
    4802:	d3 06       	cpc	r13, r19
    4804:	e1 04       	cpc	r14, r1
    4806:	f1 04       	cpc	r15, r1
    4808:	08 f0       	brcs	.+2      	; 0x480c <main+0x968>
    480a:	65 c1       	rjmp	.+714    	; 0x4ad6 <main+0xc32>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
    480c:	44 ea       	ldi	r20, 0xA4	; 164
    480e:	c4 16       	cp	r12, r20
    4810:	48 e3       	ldi	r20, 0x38	; 56
    4812:	d4 06       	cpc	r13, r20
    4814:	e1 04       	cpc	r14, r1
    4816:	f1 04       	cpc	r15, r1
    4818:	08 f0       	brcs	.+2      	; 0x481c <main+0x978>
    481a:	62 c1       	rjmp	.+708    	; 0x4ae0 <main+0xc3c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
    481c:	53 e3       	ldi	r21, 0x33	; 51
    481e:	c5 16       	cp	r12, r21
    4820:	5f e2       	ldi	r21, 0x2F	; 47
    4822:	d5 06       	cpc	r13, r21
    4824:	e1 04       	cpc	r14, r1
    4826:	f1 04       	cpc	r15, r1
    4828:	08 f0       	brcs	.+2      	; 0x482c <main+0x988>
    482a:	5d c1       	rjmp	.+698    	; 0x4ae6 <main+0xc42>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
    482c:	85 e7       	ldi	r24, 0x75	; 117
    482e:	c8 16       	cp	r12, r24
    4830:	88 e2       	ldi	r24, 0x28	; 40
    4832:	d8 06       	cpc	r13, r24
    4834:	e1 04       	cpc	r14, r1
    4836:	f1 04       	cpc	r15, r1
    4838:	08 f0       	brcs	.+2      	; 0x483c <main+0x998>
    483a:	58 c1       	rjmp	.+688    	; 0x4aec <main+0xc48>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
    483c:	01 e0       	ldi	r16, 0x01	; 1
    483e:	96 e6       	ldi	r25, 0x66	; 102
    4840:	c9 16       	cp	r12, r25
    4842:	93 e2       	ldi	r25, 0x23	; 35
    4844:	d9 06       	cpc	r13, r25
    4846:	e1 04       	cpc	r14, r1
    4848:	f1 04       	cpc	r15, r1
    484a:	40 f4       	brcc	.+16     	; 0x485c <main+0x9b8>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 275Hz
    484c:	28 e0       	ldi	r18, 0x08	; 8
    484e:	30 e0       	ldi	r19, 0x00	; 0
    4850:	02 c0       	rjmp	.+4      	; 0x4856 <main+0x9b2>
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
    4852:	29 e0       	ldi	r18, 0x09	; 9
    4854:	30 e0       	ldi	r19, 0x00	; 0
    4856:	3c a7       	std	Y+44, r19	; 0x2c
    4858:	2b a7       	std	Y+43, r18	; 0x2b
    485a:	04 c0       	rjmp	.+8      	; 0x4864 <main+0x9c0>
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
    485c:	47 e0       	ldi	r20, 0x07	; 7
    485e:	50 e0       	ldi	r21, 0x00	; 0
    4860:	5c a7       	std	Y+44, r21	; 0x2c
    4862:	4b a7       	std	Y+43, r20	; 0x2b

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
    4864:	10 92 19 05 	sts	0x0519, r1
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    4868:	0e 94 c7 31 	call	0x638e	; 0x638e <TIM16_ReadTCNT1>
    486c:	9d 8b       	std	Y+21, r25	; 0x15
    486e:	8c 8b       	std	Y+20, r24	; 0x14
			//* output when serial RC formats are used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    4870:	80 91 01 06 	lds	r24, 0x0601
    4874:	82 30       	cpi	r24, 0x02	; 2
    4876:	c1 f4       	brne	.+48     	; 0x48a8 <main+0xa04>
    4878:	00 23       	and	r16, r16
    487a:	b1 f0       	breq	.+44     	; 0x48a8 <main+0xa04>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    487c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    487e:	21 11       	cpse	r18, r1
    4880:	1a c0       	rjmp	.+52     	; 0x48b6 <main+0xa12>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    4882:	80 91 07 08 	lds	r24, 0x0807
    4886:	88 23       	and	r24, r24
    4888:	11 f0       	breq	.+4      	; 0x488e <main+0x9ea>
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    488a:	66 24       	eor	r6, r6
    488c:	63 94       	inc	r6
					}
					
					Interrupted = false;		// Cancel pending interrupts
    488e:	10 92 07 08 	sts	0x0807, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    4892:	0e 94 99 34 	call	0x6932	; 0x6932 <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    4896:	19 86       	std	Y+9, r1	; 0x09
    4898:	18 86       	std	Y+8, r1	; 0x08

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    489a:	1b 82       	std	Y+3, r1	; 0x03
    489c:	1c 82       	std	Y+4, r1	; 0x04
    489e:	1d 82       	std	Y+5, r1	; 0x05
    48a0:	1e 82       	std	Y+6, r1	; 0x06
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    48a2:	1d 86       	std	Y+13, r1	; 0x0d
					PWMBlocked = false;			// Enable PWM generation	
    48a4:	1c 86       	std	Y+12, r1	; 0x0c
    48a6:	11 c0       	rjmp	.+34     	; 0x48ca <main+0xa26>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    48a8:	19 86       	std	Y+9, r1	; 0x09
    48aa:	18 86       	std	Y+8, r1	; 0x08

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    48ac:	1b 82       	std	Y+3, r1	; 0x03
    48ae:	1c 82       	std	Y+4, r1	; 0x04
    48b0:	1d 82       	std	Y+5, r1	; 0x05
    48b2:	1e 82       	std	Y+6, r1	; 0x06
    48b4:	0a c0       	rjmp	.+20     	; 0x48ca <main+0xa26>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    48b6:	19 86       	std	Y+9, r1	; 0x09
    48b8:	18 86       	std	Y+8, r1	; 0x08

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    48ba:	1b 82       	std	Y+3, r1	; 0x03
    48bc:	1c 82       	std	Y+4, r1	; 0x04
    48be:	1d 82       	std	Y+5, r1	; 0x05
    48c0:	1e 82       	std	Y+6, r1	; 0x06
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    48c2:	1b 8e       	std	Y+27, r1	; 0x1b
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    48c4:	31 e0       	ldi	r19, 0x01	; 1
    48c6:	3c 87       	std	Y+12, r19	; 0x0c
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    48c8:	00 e0       	ldi	r16, 0x00	; 0
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    48ca:	80 91 07 08 	lds	r24, 0x0807
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    48ce:	81 11       	cpse	r24, r1
    48d0:	08 c0       	rjmp	.+16     	; 0x48e2 <main+0xa3e>
				(Interrupted) ||											// Run at RC rate
    48d2:	80 91 01 06 	lds	r24, 0x0601
    48d6:	82 30       	cpi	r24, 0x02	; 2
    48d8:	09 f0       	breq	.+2      	; 0x48dc <main+0xa38>
    48da:	c9 c0       	rjmp	.+402    	; 0x4a6e <main+0xbca>
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    48dc:	4c 85       	ldd	r20, Y+12	; 0x0c
    48de:	41 11       	cpse	r20, r1
    48e0:	a8 c0       	rjmp	.+336    	; 0x4a32 <main+0xb8e>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    48e2:	80 91 07 08 	lds	r24, 0x0807
    48e6:	88 23       	and	r24, r24
    48e8:	21 f0       	breq	.+8      	; 0x48f2 <main+0xa4e>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    48ea:	10 92 07 08 	sts	0x0807, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    48ee:	66 24       	eor	r6, r6
    48f0:	63 94       	inc	r6
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    48f2:	90 91 01 06 	lds	r25, 0x0601
    48f6:	ed e6       	ldi	r30, 0x6D	; 109
    48f8:	f6 e0       	ldi	r31, 0x06	; 6
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    48fe:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    4900:	92 30       	cpi	r25, 0x02	; 2
    4902:	29 f4       	brne	.+10     	; 0x490e <main+0xa6a>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    4904:	40 81       	ld	r20, Z
    4906:	44 23       	and	r20, r20
    4908:	09 f4       	brne	.+2      	; 0x490c <main+0xa68>
    490a:	f6 c0       	rjmp	.+492    	; 0x4af8 <main+0xc54>
    490c:	0b c0       	rjmp	.+22     	; 0x4924 <main+0xa80>
    490e:	91 30       	cpi	r25, 0x01	; 1
    4910:	39 f4       	brne	.+14     	; 0x4920 <main+0xa7c>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    4912:	40 81       	ld	r20, Z
    4914:	41 11       	cpse	r20, r1
    4916:	06 c0       	rjmp	.+12     	; 0x4924 <main+0xa80>
    4918:	4a 85       	ldd	r20, Y+10	; 0x0a
    491a:	41 11       	cpse	r20, r1
    491c:	0f c0       	rjmp	.+30     	; 0x493c <main+0xa98>
    491e:	ec c0       	rjmp	.+472    	; 0x4af8 <main+0xc54>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    4920:	19 16       	cp	r1, r25
    4922:	24 f4       	brge	.+8      	; 0x492c <main+0xa88>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    4924:	40 81       	ld	r20, Z
    4926:	14 16       	cp	r1, r20
    4928:	4c f0       	brlt	.+18     	; 0x493c <main+0xa98>
    492a:	10 c0       	rjmp	.+32     	; 0x494c <main+0xaa8>
    492c:	91 11       	cpse	r25, r1
    492e:	0e c0       	rjmp	.+28     	; 0x494c <main+0xaa8>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    4930:	4a 85       	ldd	r20, Y+10	; 0x0a
    4932:	41 11       	cpse	r20, r1
    4934:	03 c0       	rjmp	.+6      	; 0x493c <main+0xa98>
    4936:	4b 85       	ldd	r20, Y+11	; 0x0b
    4938:	44 23       	and	r20, r20
    493a:	41 f0       	breq	.+16     	; 0x494c <main+0xaa8>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
					)
				{
					ServoFlag |= (1 << i);
    493c:	41 e0       	ldi	r20, 0x01	; 1
    493e:	50 e0       	ldi	r21, 0x00	; 0
    4940:	02 2e       	mov	r0, r18
    4942:	01 c0       	rjmp	.+2      	; 0x4946 <main+0xaa2>
    4944:	44 0f       	add	r20, r20
    4946:	0a 94       	dec	r0
    4948:	ea f7       	brpl	.-6      	; 0x4944 <main+0xaa0>
    494a:	84 2b       	or	r24, r20
    494c:	2f 5f       	subi	r18, 0xFF	; 255
    494e:	3f 4f       	sbci	r19, 0xFF	; 255
    4950:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    4952:	28 30       	cpi	r18, 0x08	; 8
    4954:	31 05       	cpc	r19, r1
    4956:	a1 f6       	brne	.-88     	; 0x4900 <main+0xa5c>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    4958:	2b 85       	ldd	r18, Y+11	; 0x0b
    495a:	22 23       	and	r18, r18
    495c:	11 f0       	breq	.+4      	; 0x4962 <main+0xabe>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    495e:	19 8a       	std	Y+17, r1	; 0x11
    4960:	18 8a       	std	Y+16, r1	; 0x10
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    4962:	4b a5       	ldd	r20, Y+43	; 0x2b
    4964:	5c a5       	ldd	r21, Y+44	; 0x2c
    4966:	41 30       	cpi	r20, 0x01	; 1
    4968:	51 05       	cpc	r21, r1
    496a:	19 f5       	brne	.+70     	; 0x49b2 <main+0xb0e>
    496c:	92 30       	cpi	r25, 0x02	; 2
    496e:	09 f5       	brne	.+66     	; 0x49b2 <main+0xb0e>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
    4970:	5d e8       	ldi	r21, 0x8D	; 141
    4972:	85 16       	cp	r8, r21
    4974:	50 e2       	ldi	r21, 0x20	; 32
    4976:	95 06       	cpc	r9, r21
    4978:	a1 04       	cpc	r10, r1
    497a:	b1 04       	cpc	r11, r1
    497c:	90 f0       	brcs	.+36     	; 0x49a2 <main+0xafe>
    497e:	75 01       	movw	r14, r10
    4980:	64 01       	movw	r12, r8
    4982:	92 e6       	ldi	r25, 0x62	; 98
    4984:	89 16       	cp	r8, r25
    4986:	91 e5       	ldi	r25, 0x51	; 81
    4988:	99 06       	cpc	r9, r25
    498a:	a1 04       	cpc	r10, r1
    498c:	b1 04       	cpc	r11, r1
    498e:	30 f0       	brcs	.+12     	; 0x499c <main+0xaf8>
    4990:	31 e6       	ldi	r19, 0x61	; 97
    4992:	c3 2e       	mov	r12, r19
    4994:	31 e5       	ldi	r19, 0x51	; 81
    4996:	d3 2e       	mov	r13, r19
    4998:	e1 2c       	mov	r14, r1
    499a:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    499c:	21 e0       	ldi	r18, 0x01	; 1
    499e:	2c 87       	std	Y+12, r18	; 0x0c
    49a0:	08 c0       	rjmp	.+16     	; 0x49b2 <main+0xb0e>
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
				{
					PWM_interval = PWM_PERIOD_BEST;
    49a2:	2d e8       	ldi	r18, 0x8D	; 141
    49a4:	c2 2e       	mov	r12, r18
    49a6:	20 e2       	ldi	r18, 0x20	; 32
    49a8:	d2 2e       	mov	r13, r18
    49aa:	e1 2c       	mov	r14, r1
    49ac:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    49ae:	31 e0       	ldi	r19, 0x01	; 1
    49b0:	3c 87       	std	Y+12, r19	; 0x0c
				{
					PWM_interval = interval;		// Actual interval
				}
			}
			
			Calculate_PID();						// Calculate PID values
    49b2:	8a a7       	std	Y+42, r24	; 0x2a
    49b4:	0e 94 f9 48 	call	0x91f2	; 0x91f2 <Calculate_PID>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
    49b8:	0e 94 5c 3f 	call	0x7eb8	; 0x7eb8 <ProcessMixer>
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits				
    49bc:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <UpdateServos>

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    49c0:	90 91 19 05 	lds	r25, 0x0519
    49c4:	8a a5       	ldd	r24, Y+42	; 0x2a
    49c6:	91 11       	cpse	r25, r1
    49c8:	09 c0       	rjmp	.+18     	; 0x49dc <main+0xb38>
			}
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    49ca:	77 20       	and	r7, r7
    49cc:	f9 f0       	breq	.+62     	; 0x4a0c <main+0xb68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    49ce:	8b ee       	ldi	r24, 0xEB	; 235
    49d0:	9c e2       	ldi	r25, 0x2C	; 44
    49d2:	01 97       	sbiw	r24, 0x01	; 1
    49d4:	f1 f7       	brne	.-4      	; 0x49d2 <main+0xb2e>
    49d6:	00 c0       	rjmp	.+0      	; 0x49d8 <main+0xb34>
    49d8:	00 00       	nop
    49da:	1a c0       	rjmp	.+52     	; 0x4a10 <main+0xb6c>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits				

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    49dc:	ed e6       	ldi	r30, 0x6D	; 109
    49de:	f6 e0       	ldi	r31, 0x06	; 6
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	30 e0       	ldi	r19, 0x00	; 0
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
				{
					// Check for motor marker
					if (Config.Channel[i].Motor_marker == MOTOR)
    49e4:	90 81       	ld	r25, Z
    49e6:	92 30       	cpi	r25, 0x02	; 2
    49e8:	51 f4       	brne	.+20     	; 0x49fe <main+0xb5a>
					{
						// Set output to maximum pulse width
						ServoOut[i] = MOTOR_0;
    49ea:	d9 01       	movw	r26, r18
    49ec:	aa 0f       	add	r26, r26
    49ee:	bb 1f       	adc	r27, r27
    49f0:	aa 56       	subi	r26, 0x6A	; 106
    49f2:	b7 4f       	sbci	r27, 0xF7	; 247
    49f4:	4c e4       	ldi	r20, 0x4C	; 76
    49f6:	54 e0       	ldi	r21, 0x04	; 4
    49f8:	11 96       	adiw	r26, 0x01	; 1
    49fa:	5c 93       	st	X, r21
    49fc:	4e 93       	st	-X, r20
    49fe:	2f 5f       	subi	r18, 0xFF	; 255
    4a00:	3f 4f       	sbci	r19, 0xFF	; 255
    4a02:	b6 96       	adiw	r30, 0x26	; 38

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
    4a04:	28 30       	cpi	r18, 0x08	; 8
    4a06:	31 05       	cpc	r19, r1
    4a08:	69 f7       	brne	.-38     	; 0x49e4 <main+0xb40>
    4a0a:	df cf       	rjmp	.-66     	; 0x49ca <main+0xb26>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    4a0c:	0e 94 bf 4c 	call	0x997e	; 0x997e <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    4a10:	80 91 01 06 	lds	r24, 0x0601
    4a14:	82 30       	cpi	r24, 0x02	; 2
    4a16:	49 f4       	brne	.+18     	; 0x4a2a <main+0xb86>
    4a18:	2b a5       	ldd	r18, Y+43	; 0x2b
    4a1a:	3c a5       	ldd	r19, Y+44	; 0x2c
    4a1c:	12 16       	cp	r1, r18
    4a1e:	13 06       	cpc	r1, r19
    4a20:	24 f4       	brge	.+8      	; 0x4a2a <main+0xb86>
			{
				PWM_pulses--;
    4a22:	21 50       	subi	r18, 0x01	; 1
    4a24:	31 09       	sbc	r19, r1
    4a26:	3c a7       	std	Y+44, r19	; 0x2c
    4a28:	2b a7       	std	Y+43, r18	; 0x2b
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    4a2a:	10 92 18 05 	sts	0x0518, r1
    4a2e:	1b 86       	std	Y+11, r1	; 0x0b
    4a30:	1e c0       	rjmp	.+60     	; 0x4a6e <main+0xbca>
		}
		
		// In FAST mode and in-between bursts, sync up with the RC so that the time from Interrupt to PWM is constant.
		// This helps tighten up the number of pulses allowable
		else if ((Config.Servo_rate == FAST) && (PWMBlocked == true) && (RCrateMeasured == true) && (RCInterruptsON == true) && (Overdue == false))
    4a32:	00 23       	and	r16, r16
    4a34:	81 f1       	breq	.+96     	; 0x4a96 <main+0xbf2>
    4a36:	3d 85       	ldd	r19, Y+13	; 0x0d
    4a38:	33 23       	and	r19, r19
    4a3a:	09 f4       	brne	.+2      	; 0x4a3e <main+0xb9a>
    4a3c:	61 c0       	rjmp	.+194    	; 0x4b00 <main+0xc5c>
    4a3e:	80 91 19 05 	lds	r24, 0x0519
    4a42:	81 11       	cpse	r24, r1
    4a44:	14 c0       	rjmp	.+40     	; 0x4a6e <main+0xbca>
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	90 e0       	ldi	r25, 0x00	; 0
		{
			fast_sync_timer = 0;
			
			// Wait here until interrupted or timed out (15ms)
			while ((Interrupted == false) && (fast_sync_timer < FASTSYNCLIMIT))
    4a4a:	20 91 07 08 	lds	r18, 0x0807
    4a4e:	21 11       	cpse	r18, r1
    4a50:	0e c0       	rjmp	.+28     	; 0x4a6e <main+0xbca>
    4a52:	85 32       	cpi	r24, 0x25	; 37
    4a54:	31 e0       	ldi	r19, 0x01	; 1
    4a56:	93 07       	cpc	r25, r19
    4a58:	50 f4       	brcc	.+20     	; 0x4a6e <main+0xbca>
			{
				fast_sync_timer += (uint8_t)(TCNT2 - fast_sync_TCNT2);
    4a5a:	20 91 b2 00 	lds	r18, 0x00B2
    4a5e:	4f a1       	ldd	r20, Y+39	; 0x27
    4a60:	24 1b       	sub	r18, r20
    4a62:	82 0f       	add	r24, r18
    4a64:	91 1d       	adc	r25, r1
				fast_sync_TCNT2 = TCNT2;
    4a66:	20 91 b2 00 	lds	r18, 0x00B2
    4a6a:	2f a3       	std	Y+39, r18	; 0x27
    4a6c:	ee cf       	rjmp	.-36     	; 0x4a4a <main+0xba6>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    4a6e:	4b a5       	ldd	r20, Y+43	; 0x2b
    4a70:	5c a5       	ldd	r21, Y+44	; 0x2c
    4a72:	14 16       	cp	r1, r20
    4a74:	15 06       	cpc	r1, r21
    4a76:	7c f0       	brlt	.+30     	; 0x4a96 <main+0xbf2>
    4a78:	00 23       	and	r16, r16
    4a7a:	69 f0       	breq	.+26     	; 0x4a96 <main+0xbf2>
    4a7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4a7e:	21 11       	cpse	r18, r1
    4a80:	0a c0       	rjmp	.+20     	; 0x4a96 <main+0xbf2>
    4a82:	80 91 01 06 	lds	r24, 0x0601
    4a86:	82 30       	cpi	r24, 0x02	; 2
    4a88:	29 f4       	brne	.+10     	; 0x4a94 <main+0xbf0>
		{
			init_int();					// Re-enable interrupts
    4a8a:	0e 94 ac 34 	call	0x6958	; 0x6958 <init_int>
			RCInterruptsON = true;
    4a8e:	31 e0       	ldi	r19, 0x01	; 1
    4a90:	3d 87       	std	Y+13, r19	; 0x0d
    4a92:	01 c0       	rjmp	.+2      	; 0x4a96 <main+0xbf2>
    4a94:	1d 86       	std	Y+13, r1	; 0x0d
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    4a96:	80 91 20 05 	lds	r24, 0x0520
    4a9a:	49 a5       	ldd	r20, Y+41	; 0x29
    4a9c:	48 17       	cp	r20, r24
    4a9e:	19 f0       	breq	.+6      	; 0x4aa6 <main+0xc02>
    4aa0:	11 11       	cpse	r17, r1
    4aa2:	01 c0       	rjmp	.+2      	; 0x4aa6 <main+0xc02>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    4aa4:	17 e0       	ldi	r17, 0x07	; 7
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    4aa6:	20 91 20 05 	lds	r18, 0x0520
    4aaa:	29 a7       	std	Y+41, r18	; 0x29
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    4aac:	be 8c       	ldd	r11, Y+30	; 0x1e
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
	
	} // while loop
    4aae:	8c 88       	ldd	r8, Y+20	; 0x14
    4ab0:	9d 88       	ldd	r9, Y+21	; 0x15
    4ab2:	3f ca       	rjmp	.-2946   	; 0x3f32 <main+0x8e>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    4ab4:	70 93 22 05 	sts	0x0522, r23
    4ab8:	60 93 21 05 	sts	0x0521, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    4abc:	85 e0       	ldi	r24, 0x05	; 5
    4abe:	80 93 23 05 	sts	0x0523, r24
    4ac2:	5b cc       	rjmp	.-1866   	; 0x437a <main+0x4d6>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    4ac4:	41 e0       	ldi	r20, 0x01	; 1
    4ac6:	50 e0       	ldi	r21, 0x00	; 0
    4ac8:	cb ce       	rjmp	.-618    	; 0x4860 <main+0x9bc>
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
    4aca:	47 e0       	ldi	r20, 0x07	; 7
    4acc:	50 e0       	ldi	r21, 0x00	; 0
    4ace:	05 c0       	rjmp	.+10     	; 0x4ada <main+0xc36>
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    4ad0:	28 e0       	ldi	r18, 0x08	; 8
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	0d c0       	rjmp	.+26     	; 0x4af0 <main+0xc4c>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 29ms is safe for all formats.

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
    4ad6:	43 e0       	ldi	r20, 0x03	; 3
    4ad8:	50 e0       	ldi	r21, 0x00	; 0
    4ada:	5c a7       	std	Y+44, r21	; 0x2c
    4adc:	4b a7       	std	Y+43, r20	; 0x2b
    4ade:	0a c0       	rjmp	.+20     	; 0x4af4 <main+0xc50>
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
    4ae0:	24 e0       	ldi	r18, 0x04	; 4
    4ae2:	30 e0       	ldi	r19, 0x00	; 0
    4ae4:	05 c0       	rjmp	.+10     	; 0x4af0 <main+0xc4c>
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
    4ae6:	45 e0       	ldi	r20, 0x05	; 5
    4ae8:	50 e0       	ldi	r21, 0x00	; 0
    4aea:	f7 cf       	rjmp	.-18     	; 0x4ada <main+0xc36>
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    4aec:	26 e0       	ldi	r18, 0x06	; 6
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	3c a7       	std	Y+44, r19	; 0x2c
    4af2:	2b a7       	std	Y+43, r18	; 0x2b
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    4af4:	01 e0       	ldi	r16, 0x01	; 1
    4af6:	b6 ce       	rjmp	.-660    	; 0x4864 <main+0x9c0>
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    4af8:	4b 85       	ldd	r20, Y+11	; 0x0b
    4afa:	41 11       	cpse	r20, r1
    4afc:	1f cf       	rjmp	.-450    	; 0x493c <main+0xa98>
    4afe:	12 cf       	rjmp	.-476    	; 0x4924 <main+0xa80>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    4b00:	2b a5       	ldd	r18, Y+43	; 0x2b
    4b02:	3c a5       	ldd	r19, Y+44	; 0x2c
    4b04:	12 16       	cp	r1, r18
    4b06:	13 06       	cpc	r1, r19
    4b08:	34 f2       	brlt	.-116    	; 0x4a96 <main+0xbf2>
    4b0a:	bb cf       	rjmp	.-138    	; 0x4a82 <main+0xbde>

00004b0c <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    4b0c:	0f 93       	push	r16
    4b0e:	1f 93       	push	r17
    4b10:	cf 93       	push	r28
    4b12:	df 93       	push	r29
    4b14:	c7 e0       	ldi	r28, 0x07	; 7
    4b16:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    4b18:	08 2f       	mov	r16, r24
    4b1a:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    4b1c:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    4b1e:	c8 01       	movw	r24, r16
    4b20:	0c 2e       	mov	r0, r28
    4b22:	02 c0       	rjmp	.+4      	; 0x4b28 <spiwrite+0x1c>
    4b24:	95 95       	asr	r25
    4b26:	87 95       	ror	r24
    4b28:	0a 94       	dec	r0
    4b2a:	e2 f7       	brpl	.-8      	; 0x4b24 <spiwrite+0x18>
    4b2c:	80 ff       	sbrs	r24, 0
    4b2e:	02 c0       	rjmp	.+4      	; 0x4b34 <spiwrite+0x28>
		{
			LCD_SI = 1;
    4b30:	59 9a       	sbi	0x0b, 1	; 11
    4b32:	01 c0       	rjmp	.+2      	; 0x4b36 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    4b34:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    4b36:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    4b38:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <glcd_delay>
    4b3c:	21 97       	sbiw	r28, 0x01	; 1
    4b3e:	70 f7       	brcc	.-36     	; 0x4b1c <spiwrite+0x10>
	}
}
    4b40:	df 91       	pop	r29
    4b42:	cf 91       	pop	r28
    4b44:	1f 91       	pop	r17
    4b46:	0f 91       	pop	r16
    4b48:	08 95       	ret

00004b4a <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    4b4a:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    4b4c:	0c 94 86 25 	jmp	0x4b0c	; 0x4b0c <spiwrite>

00004b50 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    4b50:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    4b52:	0c 94 86 25 	jmp	0x4b0c	; 0x4b0c <spiwrite>

00004b56 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    4b56:	cf 93       	push	r28
    4b58:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    4b5a:	81 e8       	ldi	r24, 0x81	; 129
    4b5c:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
	st7565_command(val);
    4b60:	8c 2f       	mov	r24, r28
}
    4b62:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    4b64:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <st7565_command>

00004b68 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    4b68:	cf 93       	push	r28
    4b6a:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    4b6c:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    4b6e:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4b70:	87 e8       	ldi	r24, 0x87	; 135
    4b72:	93 e1       	ldi	r25, 0x13	; 19
    4b74:	01 97       	sbiw	r24, 0x01	; 1
    4b76:	f1 f7       	brne	.-4      	; 0x4b74 <st7565_init+0xc>
    4b78:	00 c0       	rjmp	.+0      	; 0x4b7a <st7565_init+0x12>
    4b7a:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    4b7c:	5e 9a       	sbi	0x0b, 6	; 11
    4b7e:	c8 e6       	ldi	r28, 0x68	; 104
    4b80:	d0 e1       	ldi	r29, 0x10	; 16

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    4b82:	fe 01       	movw	r30, r28
    4b84:	84 91       	lpm	r24, Z
    4b86:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
    4b8a:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    4b8c:	f0 e1       	ldi	r31, 0x10	; 16
    4b8e:	c6 37       	cpi	r28, 0x76	; 118
    4b90:	df 07       	cpc	r29, r31
    4b92:	b9 f7       	brne	.-18     	; 0x4b82 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    4b94:	80 91 60 06 	lds	r24, 0x0660
    4b98:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    4b9c:	88 ec       	ldi	r24, 0xC8	; 200
}
    4b9e:	df 91       	pop	r29
    4ba0:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    4ba2:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <st7565_command>

00004ba6 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    4ba6:	df 92       	push	r13
    4ba8:	ef 92       	push	r14
    4baa:	ff 92       	push	r15
    4bac:	0f 93       	push	r16
    4bae:	1f 93       	push	r17
    4bb0:	cf 93       	push	r28
    4bb2:	df 93       	push	r29
    4bb4:	c6 e7       	ldi	r28, 0x76	; 118
    4bb6:	d0 e1       	ldi	r29, 0x10	; 16
    4bb8:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    4bba:	fe 01       	movw	r30, r28
    4bbc:	84 91       	lpm	r24, Z
    4bbe:	80 6b       	ori	r24, 0xB0	; 176
    4bc0:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    4bc4:	80 e0       	ldi	r24, 0x00	; 0
    4bc6:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    4bca:	80 e1       	ldi	r24, 0x10	; 16
    4bcc:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    4bd0:	80 ee       	ldi	r24, 0xE0	; 224
    4bd2:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
    4bd6:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    4bd8:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    4bda:	f7 01       	movw	r30, r14
    4bdc:	81 91       	ld	r24, Z+
    4bde:	7f 01       	movw	r14, r30
    4be0:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    4be4:	d3 94       	inc	r13
    4be6:	f0 e8       	ldi	r31, 0x80	; 128
    4be8:	df 12       	cpse	r13, r31
    4bea:	f7 cf       	rjmp	.-18     	; 0x4bda <write_buffer+0x34>
    4bec:	21 96       	adiw	r28, 0x01	; 1
    4bee:	00 58       	subi	r16, 0x80	; 128
    4bf0:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    4bf2:	80 e1       	ldi	r24, 0x10	; 16
    4bf4:	ce 37       	cpi	r28, 0x7E	; 126
    4bf6:	d8 07       	cpc	r29, r24
    4bf8:	01 f7       	brne	.-64     	; 0x4bba <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    4bfa:	df 91       	pop	r29
    4bfc:	cf 91       	pop	r28
    4bfe:	1f 91       	pop	r17
    4c00:	0f 91       	pop	r16
    4c02:	ff 90       	pop	r15
    4c04:	ef 90       	pop	r14
    4c06:	df 90       	pop	r13
    4c08:	08 95       	ret

00004c0a <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    4c0a:	20 e0       	ldi	r18, 0x00	; 0
    4c0c:	34 e0       	ldi	r19, 0x04	; 4
    4c0e:	fc 01       	movw	r30, r24
    4c10:	a9 01       	movw	r20, r18
    4c12:	11 92       	st	Z+, r1
    4c14:	41 50       	subi	r20, 0x01	; 1
    4c16:	50 40       	sbci	r21, 0x00	; 0
    4c18:	e1 f7       	brne	.-8      	; 0x4c12 <clear_buffer+0x8>
    4c1a:	08 95       	ret

00004c1c <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    4c1c:	cf 93       	push	r28
    4c1e:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4c20:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    4c22:	8d 2f       	mov	r24, r29
    4c24:	80 6b       	ori	r24, 0xB0	; 176
    4c26:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4c2a:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    4c2c:	8c 2f       	mov	r24, r28
    4c2e:	8f 70       	andi	r24, 0x0F	; 15
    4c30:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    4c34:	8c 2f       	mov	r24, r28
    4c36:	82 95       	swap	r24
    4c38:	8f 70       	andi	r24, 0x0F	; 15
    4c3a:	80 61       	ori	r24, 0x10	; 16
    4c3c:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
			st7565_data(0x00);											// Clear data
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4c46:	cf 5f       	subi	r28, 0xFF	; 255
    4c48:	c0 38       	cpi	r28, 0x80	; 128
    4c4a:	81 f7       	brne	.-32     	; 0x4c2c <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4c4c:	df 5f       	subi	r29, 0xFF	; 255
    4c4e:	d8 30       	cpi	r29, 0x08	; 8
    4c50:	41 f7       	brne	.-48     	; 0x4c22 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	08 95       	ret

00004c58 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    4c58:	67 fd       	sbrc	r22, 7
    4c5a:	36 c0       	rjmp	.+108    	; 0x4cc8 <setpixel+0x70>
    4c5c:	40 34       	cpi	r20, 0x40	; 64
    4c5e:	a0 f5       	brcc	.+104    	; 0x4cc8 <setpixel+0x70>
    4c60:	34 2f       	mov	r19, r20
    4c62:	36 95       	lsr	r19
    4c64:	36 95       	lsr	r19
    4c66:	36 95       	lsr	r19
    4c68:	e6 2f       	mov	r30, r22
    4c6a:	f0 e0       	ldi	r31, 0x00	; 0
    4c6c:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    4c6e:	22 23       	and	r18, r18
    4c70:	a9 f0       	breq	.+42     	; 0x4c9c <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    4c72:	20 e8       	ldi	r18, 0x80	; 128
    4c74:	32 9f       	mul	r19, r18
    4c76:	e0 0d       	add	r30, r0
    4c78:	f1 1d       	adc	r31, r1
    4c7a:	11 24       	eor	r1, r1
    4c7c:	e8 0f       	add	r30, r24
    4c7e:	f9 1f       	adc	r31, r25
    4c80:	40 95       	com	r20
    4c82:	50 95       	com	r21
    4c84:	47 70       	andi	r20, 0x07	; 7
    4c86:	55 27       	eor	r21, r21
    4c88:	81 e0       	ldi	r24, 0x01	; 1
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	04 2e       	mov	r0, r20
    4c8e:	01 c0       	rjmp	.+2      	; 0x4c92 <setpixel+0x3a>
    4c90:	88 0f       	add	r24, r24
    4c92:	0a 94       	dec	r0
    4c94:	ea f7       	brpl	.-6      	; 0x4c90 <setpixel+0x38>
    4c96:	90 81       	ld	r25, Z
    4c98:	98 2b       	or	r25, r24
    4c9a:	15 c0       	rjmp	.+42     	; 0x4cc6 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    4c9c:	20 e8       	ldi	r18, 0x80	; 128
    4c9e:	32 9f       	mul	r19, r18
    4ca0:	e0 0d       	add	r30, r0
    4ca2:	f1 1d       	adc	r31, r1
    4ca4:	11 24       	eor	r1, r1
    4ca6:	e8 0f       	add	r30, r24
    4ca8:	f9 1f       	adc	r31, r25
    4caa:	40 95       	com	r20
    4cac:	50 95       	com	r21
    4cae:	47 70       	andi	r20, 0x07	; 7
    4cb0:	55 27       	eor	r21, r21
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	04 2e       	mov	r0, r20
    4cb8:	01 c0       	rjmp	.+2      	; 0x4cbc <setpixel+0x64>
    4cba:	88 0f       	add	r24, r24
    4cbc:	0a 94       	dec	r0
    4cbe:	ea f7       	brpl	.-6      	; 0x4cba <setpixel+0x62>
    4cc0:	80 95       	com	r24
    4cc2:	90 81       	ld	r25, Z
    4cc4:	98 23       	and	r25, r24
    4cc6:	90 83       	st	Z, r25
    4cc8:	08 95       	ret

00004cca <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    4cca:	9f 92       	push	r9
    4ccc:	af 92       	push	r10
    4cce:	bf 92       	push	r11
    4cd0:	cf 92       	push	r12
    4cd2:	df 92       	push	r13
    4cd4:	ef 92       	push	r14
    4cd6:	ff 92       	push	r15
    4cd8:	0f 93       	push	r16
    4cda:	1f 93       	push	r17
    4cdc:	cf 93       	push	r28
    4cde:	df 93       	push	r29
    4ce0:	ec 01       	movw	r28, r24
    4ce2:	16 2f       	mov	r17, r22
    4ce4:	f4 2e       	mov	r15, r20
    4ce6:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    4ce8:	a0 2f       	mov	r26, r16
    4cea:	b0 e0       	ldi	r27, 0x00	; 0
    4cec:	a4 1b       	sub	r26, r20
    4cee:	b1 09       	sbc	r27, r1
    4cf0:	b7 ff       	sbrs	r27, 7
    4cf2:	03 c0       	rjmp	.+6      	; 0x4cfa <drawline+0x30>
    4cf4:	b1 95       	neg	r27
    4cf6:	a1 95       	neg	r26
    4cf8:	b1 09       	sbc	r27, r1
    4cfa:	ed 2d       	mov	r30, r13
    4cfc:	f0 e0       	ldi	r31, 0x00	; 0
    4cfe:	e1 1b       	sub	r30, r17
    4d00:	f1 09       	sbc	r31, r1
    4d02:	f7 ff       	sbrs	r31, 7
    4d04:	03 c0       	rjmp	.+6      	; 0x4d0c <drawline+0x42>
    4d06:	f1 95       	neg	r31
    4d08:	e1 95       	neg	r30
    4d0a:	f1 09       	sbc	r31, r1
    4d0c:	bb 24       	eor	r11, r11
    4d0e:	b3 94       	inc	r11
    4d10:	ea 17       	cp	r30, r26
    4d12:	fb 07       	cpc	r31, r27
    4d14:	14 f0       	brlt	.+4      	; 0x4d1a <drawline+0x50>
    4d16:	b1 2c       	mov	r11, r1
    4d18:	06 c0       	rjmp	.+12     	; 0x4d26 <drawline+0x5c>
    4d1a:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    4d1c:	d0 2e       	mov	r13, r16
    4d1e:	08 2f       	mov	r16, r24
    4d20:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    4d22:	1f 2d       	mov	r17, r15
    4d24:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    4d26:	d1 16       	cp	r13, r17
    4d28:	30 f4       	brcc	.+12     	; 0x4d36 <drawline+0x6c>
    4d2a:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    4d2c:	f0 2e       	mov	r15, r16
    4d2e:	08 2f       	mov	r16, r24
    4d30:	81 2f       	mov	r24, r17
    4d32:	1d 2d       	mov	r17, r13
    4d34:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    4d36:	ad 2c       	mov	r10, r13
    4d38:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    4d3a:	e0 2f       	mov	r30, r16
    4d3c:	f0 e0       	ldi	r31, 0x00	; 0
    4d3e:	ef 19       	sub	r30, r15
    4d40:	f1 09       	sbc	r31, r1
    4d42:	f7 ff       	sbrs	r31, 7
    4d44:	03 c0       	rjmp	.+6      	; 0x4d4c <drawline+0x82>
    4d46:	f1 95       	neg	r31
    4d48:	e1 95       	neg	r30
    4d4a:	f1 09       	sbc	r31, r1
    4d4c:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    4d4e:	ca 2c       	mov	r12, r10
    4d50:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    4d52:	f0 16       	cp	r15, r16
    4d54:	10 f4       	brcc	.+4      	; 0x4d5a <drawline+0x90>
	{
		ystep = 1;
    4d56:	01 e0       	ldi	r16, 0x01	; 1
    4d58:	10 c0       	rjmp	.+32     	; 0x4d7a <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    4d5a:	0f ef       	ldi	r16, 0xFF	; 255
    4d5c:	0e c0       	rjmp	.+28     	; 0x4d7a <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    4d5e:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    4d60:	bb 20       	and	r11, r11
    4d62:	71 f0       	breq	.+28     	; 0x4d80 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    4d64:	41 2f       	mov	r20, r17
    4d66:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4d68:	ce 01       	movw	r24, r28
    4d6a:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
		}
		err -= dy;
    4d6e:	c9 18       	sub	r12, r9
		if (err < 0) 
    4d70:	c7 fe       	sbrs	r12, 7
    4d72:	02 c0       	rjmp	.+4      	; 0x4d78 <drawline+0xae>
		{
			y0 += ystep;
    4d74:	f0 0e       	add	r15, r16
			err += dx;
    4d76:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    4d78:	1f 5f       	subi	r17, 0xFF	; 255
    4d7a:	1d 15       	cp	r17, r13
    4d7c:	80 f3       	brcs	.-32     	; 0x4d5e <drawline+0x94>
    4d7e:	03 c0       	rjmp	.+6      	; 0x4d86 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4d80:	4f 2d       	mov	r20, r15
    4d82:	61 2f       	mov	r22, r17
    4d84:	f1 cf       	rjmp	.-30     	; 0x4d68 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    4d86:	df 91       	pop	r29
    4d88:	cf 91       	pop	r28
    4d8a:	1f 91       	pop	r17
    4d8c:	0f 91       	pop	r16
    4d8e:	ff 90       	pop	r15
    4d90:	ef 90       	pop	r14
    4d92:	df 90       	pop	r13
    4d94:	cf 90       	pop	r12
    4d96:	bf 90       	pop	r11
    4d98:	af 90       	pop	r10
    4d9a:	9f 90       	pop	r9
    4d9c:	08 95       	ret

00004d9e <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    4d9e:	af 92       	push	r10
    4da0:	bf 92       	push	r11
    4da2:	cf 92       	push	r12
    4da4:	df 92       	push	r13
    4da6:	ef 92       	push	r14
    4da8:	ff 92       	push	r15
    4daa:	0f 93       	push	r16
    4dac:	1f 93       	push	r17
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	6c 01       	movw	r12, r24
    4db4:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4db6:	f6 2e       	mov	r15, r22
    4db8:	c2 2f       	mov	r28, r18
    4dba:	d0 e0       	ldi	r29, 0x00	; 0
    4dbc:	c6 0f       	add	r28, r22
    4dbe:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    4dc0:	10 e0       	ldi	r17, 0x00	; 0
    4dc2:	04 0f       	add	r16, r20
    4dc4:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4dc6:	8f 2d       	mov	r24, r15
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	8c 17       	cp	r24, r28
    4dcc:	9d 07       	cpc	r25, r29
    4dce:	84 f4       	brge	.+32     	; 0x4df0 <fillrect+0x52>
    4dd0:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    4dd2:	8b 2d       	mov	r24, r11
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	80 17       	cp	r24, r16
    4dd8:	91 07       	cpc	r25, r17
    4dda:	44 f4       	brge	.+16     	; 0x4dec <fillrect+0x4e>
		{
			setpixel(buff, i, j, color);
    4ddc:	2e 2d       	mov	r18, r14
    4dde:	4b 2d       	mov	r20, r11
    4de0:	6f 2d       	mov	r22, r15
    4de2:	c6 01       	movw	r24, r12
    4de4:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    4de8:	b3 94       	inc	r11
    4dea:	f3 cf       	rjmp	.-26     	; 0x4dd2 <fillrect+0x34>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4dec:	f3 94       	inc	r15
    4dee:	eb cf       	rjmp	.-42     	; 0x4dc6 <fillrect+0x28>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    4df0:	df 91       	pop	r29
    4df2:	cf 91       	pop	r28
    4df4:	1f 91       	pop	r17
    4df6:	0f 91       	pop	r16
    4df8:	ff 90       	pop	r15
    4dfa:	ef 90       	pop	r14
    4dfc:	df 90       	pop	r13
    4dfe:	cf 90       	pop	r12
    4e00:	bf 90       	pop	r11
    4e02:	af 90       	pop	r10
    4e04:	08 95       	ret

00004e06 <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    4e06:	9f 92       	push	r9
    4e08:	af 92       	push	r10
    4e0a:	bf 92       	push	r11
    4e0c:	cf 92       	push	r12
    4e0e:	df 92       	push	r13
    4e10:	ef 92       	push	r14
    4e12:	ff 92       	push	r15
    4e14:	0f 93       	push	r16
    4e16:	1f 93       	push	r17
    4e18:	cf 93       	push	r28
    4e1a:	df 93       	push	r29
    4e1c:	ec 01       	movw	r28, r24
    4e1e:	f6 2e       	mov	r15, r22
    4e20:	b4 2e       	mov	r11, r20
    4e22:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4e24:	16 2f       	mov	r17, r22
    4e26:	c2 2e       	mov	r12, r18
    4e28:	d1 2c       	mov	r13, r1
    4e2a:	c6 0e       	add	r12, r22
    4e2c:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    4e2e:	aa 24       	eor	r10, r10
    4e30:	aa 94       	dec	r10
    4e32:	a0 0e       	add	r10, r16
    4e34:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4e36:	81 2f       	mov	r24, r17
    4e38:	90 e0       	ldi	r25, 0x00	; 0
    4e3a:	8c 15       	cp	r24, r12
    4e3c:	9d 05       	cpc	r25, r13
    4e3e:	74 f4       	brge	.+28     	; 0x4e5c <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    4e40:	2e 2d       	mov	r18, r14
    4e42:	4b 2d       	mov	r20, r11
    4e44:	61 2f       	mov	r22, r17
    4e46:	ce 01       	movw	r24, r28
    4e48:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
		setpixel(buff, i, y+h-1, color);
    4e4c:	2e 2d       	mov	r18, r14
    4e4e:	4a 2d       	mov	r20, r10
    4e50:	61 2f       	mov	r22, r17
    4e52:	ce 01       	movw	r24, r28
    4e54:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4e58:	1f 5f       	subi	r17, 0xFF	; 255
    4e5a:	ed cf       	rjmp	.-38     	; 0x4e36 <drawrect+0x30>
    4e5c:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4e5e:	10 e0       	ldi	r17, 0x00	; 0
    4e60:	0b 0d       	add	r16, r11
    4e62:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    4e64:	cc 24       	eor	r12, r12
    4e66:	ca 94       	dec	r12
    4e68:	c9 0c       	add	r12, r9
    4e6a:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4e6c:	8d 2d       	mov	r24, r13
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	80 17       	cp	r24, r16
    4e72:	91 07       	cpc	r25, r17
    4e74:	74 f4       	brge	.+28     	; 0x4e92 <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    4e76:	2e 2d       	mov	r18, r14
    4e78:	4d 2d       	mov	r20, r13
    4e7a:	6f 2d       	mov	r22, r15
    4e7c:	ce 01       	movw	r24, r28
    4e7e:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
		setpixel(buff, x+w-1, i, color);
    4e82:	2e 2d       	mov	r18, r14
    4e84:	4d 2d       	mov	r20, r13
    4e86:	6c 2d       	mov	r22, r12
    4e88:	ce 01       	movw	r24, r28
    4e8a:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4e8e:	d3 94       	inc	r13
    4e90:	ed cf       	rjmp	.-38     	; 0x4e6c <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    4e92:	df 91       	pop	r29
    4e94:	cf 91       	pop	r28
    4e96:	1f 91       	pop	r17
    4e98:	0f 91       	pop	r16
    4e9a:	ff 90       	pop	r15
    4e9c:	ef 90       	pop	r14
    4e9e:	df 90       	pop	r13
    4ea0:	cf 90       	pop	r12
    4ea2:	bf 90       	pop	r11
    4ea4:	af 90       	pop	r10
    4ea6:	9f 90       	pop	r9
    4ea8:	08 95       	ret

00004eaa <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    4eaa:	4f 92       	push	r4
    4eac:	5f 92       	push	r5
    4eae:	6f 92       	push	r6
    4eb0:	7f 92       	push	r7
    4eb2:	8f 92       	push	r8
    4eb4:	9f 92       	push	r9
    4eb6:	af 92       	push	r10
    4eb8:	bf 92       	push	r11
    4eba:	cf 92       	push	r12
    4ebc:	df 92       	push	r13
    4ebe:	ef 92       	push	r14
    4ec0:	ff 92       	push	r15
    4ec2:	0f 93       	push	r16
    4ec4:	1f 93       	push	r17
    4ec6:	cf 93       	push	r28
    4ec8:	df 93       	push	r29
    4eca:	ec 01       	movw	r28, r24
    4ecc:	96 2e       	mov	r9, r22
    4ece:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    4ed0:	bb 24       	eor	r11, r11
    4ed2:	b3 94       	inc	r11
    4ed4:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    4ed6:	82 2e       	mov	r8, r18
    4ed8:	81 94       	neg	r8
    4eda:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    4edc:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4ede:	74 2e       	mov	r7, r20
    4ee0:	72 1a       	sub	r7, r18
    4ee2:	e4 2e       	mov	r14, r20
    4ee4:	f1 2c       	mov	r15, r1
    4ee6:	67 01       	movw	r12, r14
    4ee8:	c2 0e       	add	r12, r18
    4eea:	d1 1c       	adc	r13, r1
    4eec:	87 2d       	mov	r24, r7
    4eee:	99 27       	eor	r25, r25
    4ef0:	87 fd       	sbrc	r24, 7
    4ef2:	90 95       	com	r25
    4ef4:	c8 16       	cp	r12, r24
    4ef6:	d9 06       	cpc	r13, r25
    4ef8:	44 f0       	brlt	.+16     	; 0x4f0a <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    4efa:	20 2f       	mov	r18, r16
    4efc:	47 2d       	mov	r20, r7
    4efe:	69 2d       	mov	r22, r9
    4f00:	ce 01       	movw	r24, r28
    4f02:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
    4f06:	73 94       	inc	r7
    4f08:	f1 cf       	rjmp	.-30     	; 0x4eec <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4f0a:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    4f0c:	71 16       	cp	r7, r17
    4f0e:	0c f0       	brlt	.+2      	; 0x4f12 <fillcircle+0x68>
    4f10:	4c c0       	rjmp	.+152    	; 0x4faa <fillcircle+0x100>
	{
		if (f >= 0) 
    4f12:	b7 fc       	sbrc	r11, 7
    4f14:	04 c0       	rjmp	.+8      	; 0x4f1e <fillcircle+0x74>
		{
			y--;
    4f16:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    4f18:	83 94       	inc	r8
    4f1a:	83 94       	inc	r8
			f += ddF_y;
    4f1c:	b8 0c       	add	r11, r8
    4f1e:	73 94       	inc	r7
    4f20:	87 2d       	mov	r24, r7
    4f22:	88 0f       	add	r24, r24
    4f24:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    4f26:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    4f28:	6a 2c       	mov	r6, r10
    4f2a:	61 1a       	sub	r6, r17
    4f2c:	67 01       	movw	r12, r14
    4f2e:	c1 0e       	add	r12, r17
    4f30:	d1 1c       	adc	r13, r1
    4f32:	17 fd       	sbrc	r17, 7
    4f34:	da 94       	dec	r13
    4f36:	47 2c       	mov	r4, r7
    4f38:	49 0c       	add	r4, r9
    4f3a:	59 2c       	mov	r5, r9
    4f3c:	57 18       	sub	r5, r7
    4f3e:	86 2d       	mov	r24, r6
    4f40:	99 27       	eor	r25, r25
    4f42:	87 fd       	sbrc	r24, 7
    4f44:	90 95       	com	r25
    4f46:	c8 16       	cp	r12, r24
    4f48:	d9 06       	cpc	r13, r25
    4f4a:	74 f0       	brlt	.+28     	; 0x4f68 <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    4f4c:	20 2f       	mov	r18, r16
    4f4e:	46 2d       	mov	r20, r6
    4f50:	64 2d       	mov	r22, r4
    4f52:	ce 01       	movw	r24, r28
    4f54:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
			setpixel(buff, x0-x, i, color);
    4f58:	20 2f       	mov	r18, r16
    4f5a:	46 2d       	mov	r20, r6
    4f5c:	65 2d       	mov	r22, r5
    4f5e:	ce 01       	movw	r24, r28
    4f60:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
    4f64:	63 94       	inc	r6
    4f66:	eb cf       	rjmp	.-42     	; 0x4f3e <fillcircle+0x94>
    4f68:	6a 2c       	mov	r6, r10
    4f6a:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4f6c:	67 01       	movw	r12, r14
    4f6e:	c7 0c       	add	r12, r7
    4f70:	d1 1c       	adc	r13, r1
    4f72:	77 fc       	sbrc	r7, 7
    4f74:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    4f76:	41 2e       	mov	r4, r17
    4f78:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    4f7a:	59 2c       	mov	r5, r9
    4f7c:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4f7e:	86 2d       	mov	r24, r6
    4f80:	99 27       	eor	r25, r25
    4f82:	87 fd       	sbrc	r24, 7
    4f84:	90 95       	com	r25
    4f86:	c8 16       	cp	r12, r24
    4f88:	d9 06       	cpc	r13, r25
    4f8a:	0c f4       	brge	.+2      	; 0x4f8e <fillcircle+0xe4>
    4f8c:	bf cf       	rjmp	.-130    	; 0x4f0c <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    4f8e:	20 2f       	mov	r18, r16
    4f90:	46 2d       	mov	r20, r6
    4f92:	64 2d       	mov	r22, r4
    4f94:	ce 01       	movw	r24, r28
    4f96:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
			setpixel(buff, x0-y, i, color);
    4f9a:	20 2f       	mov	r18, r16
    4f9c:	46 2d       	mov	r20, r6
    4f9e:	65 2d       	mov	r22, r5
    4fa0:	ce 01       	movw	r24, r28
    4fa2:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
    4fa6:	63 94       	inc	r6
    4fa8:	ea cf       	rjmp	.-44     	; 0x4f7e <fillcircle+0xd4>
		}    
	}
}
    4faa:	df 91       	pop	r29
    4fac:	cf 91       	pop	r28
    4fae:	1f 91       	pop	r17
    4fb0:	0f 91       	pop	r16
    4fb2:	ff 90       	pop	r15
    4fb4:	ef 90       	pop	r14
    4fb6:	df 90       	pop	r13
    4fb8:	cf 90       	pop	r12
    4fba:	bf 90       	pop	r11
    4fbc:	af 90       	pop	r10
    4fbe:	9f 90       	pop	r9
    4fc0:	8f 90       	pop	r8
    4fc2:	7f 90       	pop	r7
    4fc4:	6f 90       	pop	r6
    4fc6:	5f 90       	pop	r5
    4fc8:	4f 90       	pop	r4
    4fca:	08 95       	ret

00004fcc <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    4fcc:	88 0f       	add	r24, r24
    4fce:	99 1f       	adc	r25, r25
    4fd0:	82 58       	subi	r24, 0x82	; 130
    4fd2:	9f 4e       	sbci	r25, 0xEF	; 239
    4fd4:	fc 01       	movw	r30, r24
    4fd6:	85 91       	lpm	r24, Z+
    4fd8:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    4fda:	0c 94 be 45 	jmp	0x8b7c	; 0x8b7c <pgm_mugui_lcd_puts>

00004fde <gLCDprint_Menu_P>:
    4fde:	0c 94 be 45 	jmp	0x8b7c	; 0x8b7c <pgm_mugui_lcd_puts>

00004fe2 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	91 e0       	ldi	r25, 0x01	; 1
    4fe6:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    4fea:	23 e0       	ldi	r18, 0x03	; 3
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	49 e2       	ldi	r20, 0x29	; 41
    4ff0:	50 e0       	ldi	r21, 0x00	; 0
    4ff2:	69 ee       	ldi	r22, 0xE9	; 233
    4ff4:	73 e0       	ldi	r23, 0x03	; 3
    4ff6:	89 e7       	ldi	r24, 0x79	; 121
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    4ffe:	27 e1       	ldi	r18, 0x17	; 23
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	48 e1       	ldi	r20, 0x18	; 24
    5004:	50 e0       	ldi	r21, 0x00	; 0
    5006:	69 ee       	ldi	r22, 0xE9	; 233
    5008:	73 e0       	ldi	r23, 0x03	; 3
    500a:	8a e7       	ldi	r24, 0x7A	; 122
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

	// Display most important error
	if (General_error & (1 << LVA_ALARM))							// Low voltage
    5012:	80 91 20 05 	lds	r24, 0x0520
    5016:	83 ff       	sbrs	r24, 3
    5018:	13 c0       	rjmp	.+38     	; 0x5040 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    501a:	2b e2       	ldi	r18, 0x2B	; 43
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	4c e0       	ldi	r20, 0x0C	; 12
    5020:	50 e0       	ldi	r21, 0x00	; 0
    5022:	69 ee       	ldi	r22, 0xE9	; 233
    5024:	73 e0       	ldi	r23, 0x03	; 3
    5026:	86 e8       	ldi	r24, 0x86	; 134
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    502e:	2b e2       	ldi	r18, 0x2B	; 43
    5030:	30 e0       	ldi	r19, 0x00	; 0
    5032:	40 e5       	ldi	r20, 0x50	; 80
    5034:	50 e0       	ldi	r21, 0x00	; 0
    5036:	69 ee       	ldi	r22, 0xE9	; 233
    5038:	73 e0       	ldi	r23, 0x03	; 3
    503a:	86 e7       	ldi	r24, 0x76	; 118
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	41 c0       	rjmp	.+130    	; 0x50c2 <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << NO_SIGNAL))						// No signal
    5040:	80 91 20 05 	lds	r24, 0x0520
    5044:	81 ff       	sbrs	r24, 1
    5046:	13 c0       	rjmp	.+38     	; 0x506e <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    5048:	2b e2       	ldi	r18, 0x2B	; 43
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	4c e1       	ldi	r20, 0x1C	; 28
    504e:	50 e0       	ldi	r21, 0x00	; 0
    5050:	69 ee       	ldi	r22, 0xE9	; 233
    5052:	73 e0       	ldi	r23, 0x03	; 3
    5054:	8b e4       	ldi	r24, 0x4B	; 75
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    505c:	2b e2       	ldi	r18, 0x2B	; 43
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	46 e3       	ldi	r20, 0x36	; 54
    5062:	50 e0       	ldi	r21, 0x00	; 0
    5064:	69 ee       	ldi	r22, 0xE9	; 233
    5066:	73 e0       	ldi	r23, 0x03	; 3
    5068:	8c e4       	ldi	r24, 0x4C	; 76
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	2a c0       	rjmp	.+84     	; 0x50c2 <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << THROTTLE_HIGH))					// Throttle high
    506e:	80 91 20 05 	lds	r24, 0x0520
    5072:	80 ff       	sbrs	r24, 0
    5074:	13 c0       	rjmp	.+38     	; 0x509c <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    5076:	2b e2       	ldi	r18, 0x2B	; 43
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	4a e0       	ldi	r20, 0x0A	; 10
    507c:	50 e0       	ldi	r21, 0x00	; 0
    507e:	69 ee       	ldi	r22, 0xE9	; 233
    5080:	73 e0       	ldi	r23, 0x03	; 3
    5082:	89 e6       	ldi	r24, 0x69	; 105
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    508a:	2b e2       	ldi	r18, 0x2B	; 43
    508c:	30 e0       	ldi	r19, 0x00	; 0
    508e:	41 e5       	ldi	r20, 0x51	; 81
    5090:	50 e0       	ldi	r21, 0x00	; 0
    5092:	69 ee       	ldi	r22, 0xE9	; 233
    5094:	73 e0       	ldi	r23, 0x03	; 3
    5096:	87 e3       	ldi	r24, 0x37	; 55
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	13 c0       	rjmp	.+38     	; 0x50c2 <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << DISARMED))						// Disarmed
    509c:	80 91 20 05 	lds	r24, 0x0520
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    50a0:	2b e2       	ldi	r18, 0x2B	; 43
    50a2:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if (General_error & (1 << DISARMED))						// Disarmed
    50a4:	82 ff       	sbrs	r24, 2
    50a6:	07 c0       	rjmp	.+14     	; 0x50b6 <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    50a8:	44 e1       	ldi	r20, 0x14	; 20
    50aa:	50 e0       	ldi	r21, 0x00	; 0
    50ac:	69 ee       	ldi	r22, 0xE9	; 233
    50ae:	73 e0       	ldi	r23, 0x03	; 3
    50b0:	8b e8       	ldi	r24, 0x8B	; 139
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	06 c0       	rjmp	.+12     	; 0x50c2 <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    50b6:	4c e1       	ldi	r20, 0x1C	; 28
    50b8:	50 e0       	ldi	r21, 0x00	; 0
    50ba:	69 ee       	ldi	r22, 0xE9	; 233
    50bc:	73 e0       	ldi	r23, 0x03	; 3
    50be:	8a e8       	ldi	r24, 0x8A	; 138
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
	}

	write_buffer(buffer);
    50c6:	80 e0       	ldi	r24, 0x00	; 0
    50c8:	91 e0       	ldi	r25, 0x01	; 1
    50ca:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <write_buffer>

000050ce <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    50ce:	cf 93       	push	r28
    50d0:	df 93       	push	r29
    50d2:	00 d0       	rcall	.+0      	; 0x50d4 <get_raw_gyros+0x6>
    50d4:	00 d0       	rcall	.+0      	; 0x50d6 <get_raw_gyros+0x8>
    50d6:	00 d0       	rcall	.+0      	; 0x50d8 <get_raw_gyros+0xa>
    50d8:	cd b7       	in	r28, 0x3d	; 61
    50da:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t Gyros[6];

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    50dc:	26 e0       	ldi	r18, 0x06	; 6
    50de:	ae 01       	movw	r20, r28
    50e0:	4f 5f       	subi	r20, 0xFF	; 255
    50e2:	5f 4f       	sbci	r21, 0xFF	; 255
    50e4:	63 e4       	ldi	r22, 0x43	; 67
    50e6:	80 ed       	ldi	r24, 0xD0	; 208
    50e8:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	gyroADC_raw[PITCH] = (Gyros[0] << 8) + Gyros[1];
    50ec:	89 81       	ldd	r24, Y+1	; 0x01
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	98 2f       	mov	r25, r24
    50f2:	88 27       	eor	r24, r24
    50f4:	2a 81       	ldd	r18, Y+2	; 0x02
    50f6:	82 0f       	add	r24, r18
    50f8:	91 1d       	adc	r25, r1
    50fa:	90 93 9c 05 	sts	0x059C, r25
    50fe:	80 93 9b 05 	sts	0x059B, r24
	gyroADC_raw[ROLL] = (Gyros[2] << 8) + Gyros[3];
    5102:	8b 81       	ldd	r24, Y+3	; 0x03
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	98 2f       	mov	r25, r24
    5108:	88 27       	eor	r24, r24
    510a:	2c 81       	ldd	r18, Y+4	; 0x04
    510c:	82 0f       	add	r24, r18
    510e:	91 1d       	adc	r25, r1
    5110:	90 93 9a 05 	sts	0x059A, r25
    5114:	80 93 99 05 	sts	0x0599, r24
	gyroADC_raw[YAW] = (Gyros[4] << 8) + Gyros[5];
    5118:	8d 81       	ldd	r24, Y+5	; 0x05
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	98 2f       	mov	r25, r24
    511e:	88 27       	eor	r24, r24
    5120:	2e 81       	ldd	r18, Y+6	; 0x06
    5122:	82 0f       	add	r24, r18
    5124:	91 1d       	adc	r25, r1
    5126:	90 93 9e 05 	sts	0x059E, r25
    512a:	80 93 9d 05 	sts	0x059D, r24

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])] >> GYRODIV;
    512e:	20 91 5f 06 	lds	r18, 0x065F
    5132:	a3 e9       	ldi	r26, 0x93	; 147
    5134:	b5 e0       	ldi	r27, 0x05	; 5
    5136:	83 e0       	ldi	r24, 0x03	; 3
    5138:	28 02       	muls	r18, r24
    513a:	90 01       	movw	r18, r0
    513c:	11 24       	eor	r1, r1
    513e:	80 e0       	ldi	r24, 0x00	; 0
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	2f 5b       	subi	r18, 0xBF	; 191
    5144:	34 4e       	sbci	r19, 0xE4	; 228
    5146:	f9 01       	movw	r30, r18
    5148:	e8 0f       	add	r30, r24
    514a:	f9 1f       	adc	r31, r25
    514c:	e4 91       	lpm	r30, Z
    514e:	ee 0f       	add	r30, r30
    5150:	ff 0b       	sbc	r31, r31
    5152:	e7 56       	subi	r30, 0x67	; 103
    5154:	fa 4f       	sbci	r31, 0xFA	; 250
    5156:	40 81       	ld	r20, Z
    5158:	51 81       	ldd	r21, Z+1	; 0x01
    515a:	64 e0       	ldi	r22, 0x04	; 4
    515c:	55 95       	asr	r21
    515e:	47 95       	ror	r20
    5160:	6a 95       	dec	r22
    5162:	e1 f7       	brne	.-8      	; 0x515c <get_raw_gyros+0x8e>
    5164:	4d 93       	st	X+, r20
    5166:	5d 93       	st	X+, r21
    5168:	01 96       	adiw	r24, 0x01	; 1
	gyroADC_raw[PITCH] = (Gyros[0] << 8) + Gyros[1];
	gyroADC_raw[ROLL] = (Gyros[2] << 8) + Gyros[3];
	gyroADC_raw[YAW] = (Gyros[4] << 8) + Gyros[5];

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    516a:	83 30       	cpi	r24, 0x03	; 3
    516c:	91 05       	cpc	r25, r1
    516e:	59 f7       	brne	.-42     	; 0x5146 <get_raw_gyros+0x78>
	{
		// Rearrange the sensors
		gyroADC[i] 	= gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])] >> GYRODIV;
	}
}
    5170:	26 96       	adiw	r28, 0x06	; 6
    5172:	0f b6       	in	r0, 0x3f	; 63
    5174:	f8 94       	cli
    5176:	de bf       	out	0x3e, r29	; 62
    5178:	0f be       	out	0x3f, r0	; 63
    517a:	cd bf       	out	0x3d, r28	; 61
    517c:	df 91       	pop	r29
    517e:	cf 91       	pop	r28
    5180:	08 95       	ret

00005182 <ReadGyros>:

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs
int16_t gyroADC_raw[NUMBEROFAXIS];		// Holds raw Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    5182:	1f 93       	push	r17
    5184:	cf 93       	push	r28
    5186:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    5188:	0e 94 67 28 	call	0x50ce	; 0x50ce <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    518c:	20 91 5f 06 	lds	r18, 0x065F
    5190:	cd ec       	ldi	r28, 0xCD	; 205
    5192:	d7 e0       	ldi	r29, 0x07	; 7
    5194:	a3 e9       	ldi	r26, 0x93	; 147
    5196:	b5 e0       	ldi	r27, 0x05	; 5
    5198:	83 e0       	ldi	r24, 0x03	; 3
    519a:	28 02       	muls	r18, r24
    519c:	90 01       	movw	r18, r0
    519e:	11 24       	eor	r1, r1
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	21 5d       	subi	r18, 0xD1	; 209
    51a6:	34 4e       	sbci	r19, 0xE4	; 228
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    51a8:	69 91       	ld	r22, Y+
    51aa:	79 91       	ld	r23, Y+
    51ac:	f9 01       	movw	r30, r18
    51ae:	e8 0f       	add	r30, r24
    51b0:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    51b2:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    51b4:	4d 91       	ld	r20, X+
    51b6:	5c 91       	ld	r21, X
    51b8:	11 97       	sbiw	r26, 0x01	; 1
    51ba:	46 1b       	sub	r20, r22
    51bc:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    51be:	14 03       	mulsu	r17, r20
    51c0:	b0 01       	movw	r22, r0
    51c2:	15 9f       	mul	r17, r21
    51c4:	70 0d       	add	r23, r0
    51c6:	11 24       	eor	r1, r1
    51c8:	6d 93       	st	X+, r22
    51ca:	7d 93       	st	X+, r23
    51cc:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    51ce:	83 30       	cpi	r24, 0x03	; 3
    51d0:	91 05       	cpc	r25, r1
    51d2:	51 f7       	brne	.-44     	; 0x51a8 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    51d4:	df 91       	pop	r29
    51d6:	cf 91       	pop	r28
    51d8:	1f 91       	pop	r17
    51da:	08 95       	ret

000051dc <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    51dc:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    51de:	86 e0       	ldi	r24, 0x06	; 6
    51e0:	ed ec       	ldi	r30, 0xCD	; 205
    51e2:	f7 e0       	ldi	r31, 0x07	; 7
    51e4:	df 01       	movw	r26, r30
    51e6:	1d 92       	st	X+, r1
    51e8:	8a 95       	dec	r24
    51ea:	e9 f7       	brne	.-6      	; 0x51e6 <CalibrateGyrosFast+0xa>
    51ec:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    51ee:	0e 94 67 28 	call	0x50ce	; 0x50ce <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    51f2:	40 91 cd 07 	lds	r20, 0x07CD
    51f6:	50 91 ce 07 	lds	r21, 0x07CE
    51fa:	80 91 93 05 	lds	r24, 0x0593
    51fe:	90 91 94 05 	lds	r25, 0x0594
    5202:	48 0f       	add	r20, r24
    5204:	59 1f       	adc	r21, r25
    5206:	50 93 ce 07 	sts	0x07CE, r21
    520a:	40 93 cd 07 	sts	0x07CD, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    520e:	20 91 cf 07 	lds	r18, 0x07CF
    5212:	30 91 d0 07 	lds	r19, 0x07D0
    5216:	80 91 95 05 	lds	r24, 0x0595
    521a:	90 91 96 05 	lds	r25, 0x0596
    521e:	28 0f       	add	r18, r24
    5220:	39 1f       	adc	r19, r25
    5222:	30 93 d0 07 	sts	0x07D0, r19
    5226:	20 93 cf 07 	sts	0x07CF, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    522a:	80 91 d1 07 	lds	r24, 0x07D1
    522e:	90 91 d2 07 	lds	r25, 0x07D2
    5232:	60 91 97 05 	lds	r22, 0x0597
    5236:	70 91 98 05 	lds	r23, 0x0598
    523a:	86 0f       	add	r24, r22
    523c:	97 1f       	adc	r25, r23
    523e:	90 93 d2 07 	sts	0x07D2, r25
    5242:	80 93 d1 07 	sts	0x07D1, r24
    5246:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    5248:	91 f6       	brne	.-92     	; 0x51ee <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    524a:	a5 e0       	ldi	r26, 0x05	; 5
    524c:	55 95       	asr	r21
    524e:	47 95       	ror	r20
    5250:	aa 95       	dec	r26
    5252:	e1 f7       	brne	.-8      	; 0x524c <CalibrateGyrosFast+0x70>
    5254:	50 93 ce 07 	sts	0x07CE, r21
    5258:	40 93 cd 07 	sts	0x07CD, r20
    525c:	b5 e0       	ldi	r27, 0x05	; 5
    525e:	35 95       	asr	r19
    5260:	27 95       	ror	r18
    5262:	ba 95       	dec	r27
    5264:	e1 f7       	brne	.-8      	; 0x525e <CalibrateGyrosFast+0x82>
    5266:	30 93 d0 07 	sts	0x07D0, r19
    526a:	20 93 cf 07 	sts	0x07CF, r18
    526e:	c5 e0       	ldi	r28, 0x05	; 5
    5270:	95 95       	asr	r25
    5272:	87 95       	ror	r24
    5274:	ca 95       	dec	r28
    5276:	e1 f7       	brne	.-8      	; 0x5270 <CalibrateGyrosFast+0x94>
    5278:	90 93 d2 07 	sts	0x07D2, r25
    527c:	80 93 d1 07 	sts	0x07D1, r24
	}

	Save_Config_to_EEPROM();
}
    5280:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    5282:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>

00005286 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    5286:	2f 92       	push	r2
    5288:	3f 92       	push	r3
    528a:	4f 92       	push	r4
    528c:	5f 92       	push	r5
    528e:	6f 92       	push	r6
    5290:	7f 92       	push	r7
    5292:	8f 92       	push	r8
    5294:	9f 92       	push	r9
    5296:	af 92       	push	r10
    5298:	bf 92       	push	r11
    529a:	cf 92       	push	r12
    529c:	df 92       	push	r13
    529e:	ef 92       	push	r14
    52a0:	ff 92       	push	r15
    52a2:	0f 93       	push	r16
    52a4:	1f 93       	push	r17
    52a6:	cf 93       	push	r28
    52a8:	df 93       	push	r29
    52aa:	cd b7       	in	r28, 0x3d	; 61
    52ac:	de b7       	in	r29, 0x3e	; 62
    52ae:	65 97       	sbiw	r28, 0x15	; 21
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	f8 94       	cli
    52b4:	de bf       	out	0x3e, r29	; 62
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    52ba:	1e 86       	std	Y+14, r1	; 0x0e
    52bc:	1d 86       	std	Y+13, r1	; 0x0d
    52be:	18 8a       	std	Y+16, r1	; 0x10
    52c0:	1f 86       	std	Y+15, r1	; 0x0f
    52c2:	1a 8a       	std	Y+18, r1	; 0x12
    52c4:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    52c6:	0e 94 ee 28 	call	0x51dc	; 0x51dc <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    52ca:	60 91 cd 07 	lds	r22, 0x07CD
    52ce:	70 91 ce 07 	lds	r23, 0x07CE
    52d2:	88 27       	eor	r24, r24
    52d4:	77 fd       	sbrc	r23, 7
    52d6:	80 95       	com	r24
    52d8:	98 2f       	mov	r25, r24
    52da:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    52de:	69 83       	std	Y+1, r22	; 0x01
    52e0:	7a 83       	std	Y+2, r23	; 0x02
    52e2:	8b 83       	std	Y+3, r24	; 0x03
    52e4:	9c 83       	std	Y+4, r25	; 0x04
    52e6:	60 91 cf 07 	lds	r22, 0x07CF
    52ea:	70 91 d0 07 	lds	r23, 0x07D0
    52ee:	88 27       	eor	r24, r24
    52f0:	77 fd       	sbrc	r23, 7
    52f2:	80 95       	com	r24
    52f4:	98 2f       	mov	r25, r24
    52f6:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    52fa:	6d 83       	std	Y+5, r22	; 0x05
    52fc:	7e 83       	std	Y+6, r23	; 0x06
    52fe:	8f 83       	std	Y+7, r24	; 0x07
    5300:	98 87       	std	Y+8, r25	; 0x08
    5302:	60 91 d1 07 	lds	r22, 0x07D1
    5306:	70 91 d2 07 	lds	r23, 0x07D2
    530a:	88 27       	eor	r24, r24
    530c:	77 fd       	sbrc	r23, 7
    530e:	80 95       	com	r24
    5310:	98 2f       	mov	r25, r24
    5312:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    5316:	69 87       	std	Y+9, r22	; 0x09
    5318:	7a 87       	std	Y+10, r23	; 0x0a
    531a:	8b 87       	std	Y+11, r24	; 0x0b
    531c:	9c 87       	std	Y+12, r25	; 0x0c
    531e:	1d 8a       	std	Y+21, r1	; 0x15
    5320:	1b 8a       	std	Y+19, r1	; 0x13
    5322:	e1 2c       	mov	r14, r1
    5324:	f1 2c       	mov	r15, r1
    5326:	00 e0       	ldi	r16, 0x00	; 0
    5328:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    532a:	80 91 b2 00 	lds	r24, 0x00B2
    532e:	9d 89       	ldd	r25, Y+21	; 0x15
    5330:	89 1b       	sub	r24, r25
    5332:	e8 0e       	add	r14, r24
    5334:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    5336:	e0 91 b2 00 	lds	r30, 0x00B2
    533a:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    533c:	fc e4       	ldi	r31, 0x4C	; 76
    533e:	ef 16       	cp	r14, r31
    5340:	ff 06       	cpc	r15, r31
    5342:	28 f0       	brcs	.+10     	; 0x534e <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    5344:	8b 89       	ldd	r24, Y+19	; 0x13
    5346:	8f 5f       	subi	r24, 0xFF	; 255
    5348:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    534a:	e1 2c       	mov	r14, r1
    534c:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    534e:	0e 94 67 28 	call	0x50ce	; 0x50ce <get_raw_gyros>
    5352:	fe 01       	movw	r30, r28
    5354:	31 96       	adiw	r30, 0x01	; 1
    5356:	6f 01       	movw	r12, r30
    5358:	83 e9       	ldi	r24, 0x93	; 147
    535a:	28 2e       	mov	r2, r24
    535c:	85 e0       	ldi	r24, 0x05	; 5
    535e:	38 2e       	mov	r3, r24
    5360:	ce 01       	movw	r24, r28
    5362:	0d 96       	adiw	r24, 0x0d	; 13
    5364:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    5366:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    5368:	f1 01       	movw	r30, r2
    536a:	81 90       	ld	r8, Z+
    536c:	91 90       	ld	r9, Z+
    536e:	1f 01       	movw	r2, r30
    5370:	20 e0       	ldi	r18, 0x00	; 0
    5372:	30 ec       	ldi	r19, 0xC0	; 192
    5374:	49 e7       	ldi	r20, 0x79	; 121
    5376:	54 e4       	ldi	r21, 0x44	; 68
    5378:	f6 01       	movw	r30, r12
    537a:	60 81       	ld	r22, Z
    537c:	71 81       	ldd	r23, Z+1	; 0x01
    537e:	82 81       	ldd	r24, Z+2	; 0x02
    5380:	93 81       	ldd	r25, Z+3	; 0x03
    5382:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    5386:	2b 01       	movw	r4, r22
    5388:	3c 01       	movw	r6, r24
    538a:	b4 01       	movw	r22, r8
    538c:	88 27       	eor	r24, r24
    538e:	77 fd       	sbrc	r23, 7
    5390:	80 95       	com	r24
    5392:	98 2f       	mov	r25, r24
    5394:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    5398:	9b 01       	movw	r18, r22
    539a:	ac 01       	movw	r20, r24
    539c:	c3 01       	movw	r24, r6
    539e:	b2 01       	movw	r22, r4
    53a0:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    53a4:	20 e0       	ldi	r18, 0x00	; 0
    53a6:	30 e0       	ldi	r19, 0x00	; 0
    53a8:	4a e7       	ldi	r20, 0x7A	; 122
    53aa:	54 e4       	ldi	r21, 0x44	; 68
    53ac:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    53b0:	f6 01       	movw	r30, r12
    53b2:	60 83       	st	Z, r22
    53b4:	71 83       	std	Z+1, r23	; 0x01
    53b6:	82 83       	std	Z+2, r24	; 0x02
    53b8:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    53ba:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    53be:	f5 01       	movw	r30, r10
    53c0:	20 81       	ld	r18, Z
    53c2:	31 81       	ldd	r19, Z+1	; 0x01
    53c4:	26 17       	cp	r18, r22
    53c6:	37 07       	cpc	r19, r23
    53c8:	11 f0       	breq	.+4      	; 0x53ce <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    53ca:	00 e0       	ldi	r16, 0x00	; 0
    53cc:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    53ce:	f5 01       	movw	r30, r10
    53d0:	61 93       	st	Z+, r22
    53d2:	71 93       	st	Z+, r23
    53d4:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    53d6:	fc 89       	ldd	r31, Y+20	; 0x14
    53d8:	ff 5f       	subi	r31, 0xFF	; 255
    53da:	fc 8b       	std	Y+20, r31	; 0x14
    53dc:	84 e0       	ldi	r24, 0x04	; 4
    53de:	c8 0e       	add	r12, r24
    53e0:	d1 1c       	adc	r13, r1
    53e2:	f3 30       	cpi	r31, 0x03	; 3
    53e4:	09 f6       	brne	.-126    	; 0x5368 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    53e6:	0f 5f       	subi	r16, 0xFF	; 255
    53e8:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    53ea:	09 3c       	cpi	r16, 0xC9	; 201
    53ec:	11 05       	cpc	r17, r1
    53ee:	20 f0       	brcs	.+8      	; 0x53f8 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    53f0:	0e 94 ee 28 	call	0x51dc	; 0x51dc <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	01 c0       	rjmp	.+2      	; 0x53fa <CalibrateGyrosSlow+0x174>
    53f8:	80 e0       	ldi	r24, 0x00	; 0
    53fa:	e7 e8       	ldi	r30, 0x87	; 135
    53fc:	f3 e1       	ldi	r31, 0x13	; 19
    53fe:	31 97       	sbiw	r30, 0x01	; 1
    5400:	f1 f7       	brne	.-4      	; 0x53fe <CalibrateGyrosSlow+0x178>
    5402:	00 c0       	rjmp	.+0      	; 0x5404 <CalibrateGyrosSlow+0x17e>
    5404:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    5406:	81 11       	cpse	r24, r1
    5408:	04 c0       	rjmp	.+8      	; 0x5412 <CalibrateGyrosSlow+0x18c>
    540a:	fb 89       	ldd	r31, Y+19	; 0x13
    540c:	f6 30       	cpi	r31, 0x06	; 6
    540e:	08 f4       	brcc	.+2      	; 0x5412 <CalibrateGyrosSlow+0x18c>
    5410:	8c cf       	rjmp	.-232    	; 0x532a <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    5412:	65 96       	adiw	r28, 0x15	; 21
    5414:	0f b6       	in	r0, 0x3f	; 63
    5416:	f8 94       	cli
    5418:	de bf       	out	0x3e, r29	; 62
    541a:	0f be       	out	0x3f, r0	; 63
    541c:	cd bf       	out	0x3d, r28	; 61
    541e:	df 91       	pop	r29
    5420:	cf 91       	pop	r28
    5422:	1f 91       	pop	r17
    5424:	0f 91       	pop	r16
    5426:	ff 90       	pop	r15
    5428:	ef 90       	pop	r14
    542a:	df 90       	pop	r13
    542c:	cf 90       	pop	r12
    542e:	bf 90       	pop	r11
    5430:	af 90       	pop	r10
    5432:	9f 90       	pop	r9
    5434:	8f 90       	pop	r8
    5436:	7f 90       	pop	r7
    5438:	6f 90       	pop	r6
    543a:	5f 90       	pop	r5
    543c:	4f 90       	pop	r4
    543e:	3f 90       	pop	r3
    5440:	2f 90       	pop	r2
    5442:	08 95       	ret

00005444 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    5444:	41 e0       	ldi	r20, 0x01	; 1
    5446:	6b e6       	ldi	r22, 0x6B	; 107
    5448:	80 ed       	ldi	r24, 0xD0	; 208
    544a:	0e 94 39 2a 	call	0x5472	; 0x5472 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    544e:	40 e4       	ldi	r20, 0x40	; 64
    5450:	67 e3       	ldi	r22, 0x37	; 55
    5452:	80 ed       	ldi	r24, 0xD0	; 208
    5454:	0e 94 39 2a 	call	0x5472	; 0x5472 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    5458:	46 e0       	ldi	r20, 0x06	; 6
    545a:	80 91 64 06 	lds	r24, 0x0664
    545e:	48 1b       	sub	r20, r24
    5460:	6a e1       	ldi	r22, 0x1A	; 26
    5462:	80 ed       	ldi	r24, 0xD0	; 208
    5464:	0e 94 39 2a 	call	0x5472	; 0x5472 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    5468:	48 e1       	ldi	r20, 0x18	; 24
    546a:	6b e1       	ldi	r22, 0x1B	; 27
    546c:	80 ed       	ldi	r24, 0xD0	; 208
    546e:	0c 94 39 2a 	jmp	0x5472	; 0x5472 <writeI2Cbyte>

00005472 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    5472:	cf 93       	push	r28
    5474:	df 93       	push	r29
    5476:	00 d0       	rcall	.+0      	; 0x5478 <writeI2Cbyte+0x6>
    5478:	cd b7       	in	r28, 0x3d	; 61
    547a:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    547c:	4a 83       	std	Y+2, r20	; 0x02
    547e:	69 83       	std	Y+1, r22	; 0x01
    5480:	0e 94 9d 4d 	call	0x9b3a	; 0x9b3a <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    5484:	69 81       	ldd	r22, Y+1	; 0x01
    5486:	86 2f       	mov	r24, r22
    5488:	0e 94 ed 4d 	call	0x9bda	; 0x9bda <i2c_write>
    i2c_write(value); 								// Write byte
    548c:	4a 81       	ldd	r20, Y+2	; 0x02
    548e:	84 2f       	mov	r24, r20
    5490:	0e 94 ed 4d 	call	0x9bda	; 0x9bda <i2c_write>
    i2c_stop();
}
    5494:	0f 90       	pop	r0
    5496:	0f 90       	pop	r0
    5498:	df 91       	pop	r29
    549a:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    549c:	0c 94 de 4d 	jmp	0x9bbc	; 0x9bbc <i2c_stop>

000054a0 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    54a0:	cf 92       	push	r12
    54a2:	df 92       	push	r13
    54a4:	ef 92       	push	r14
    54a6:	ff 92       	push	r15
    54a8:	0f 93       	push	r16
    54aa:	1f 93       	push	r17
    54ac:	cf 93       	push	r28
    54ae:	df 93       	push	r29
    54b0:	00 d0       	rcall	.+0      	; 0x54b2 <readI2CbyteArray+0x12>
    54b2:	1f 92       	push	r1
    54b4:	cd b7       	in	r28, 0x3d	; 61
    54b6:	de b7       	in	r29, 0x3e	; 62
    54b8:	18 2f       	mov	r17, r24
    54ba:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    54bc:	4a 83       	std	Y+2, r20	; 0x02
    54be:	5b 83       	std	Y+3, r21	; 0x03
    54c0:	69 83       	std	Y+1, r22	; 0x01
    54c2:	0e 94 9d 4d 	call	0x9b3a	; 0x9b3a <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    54c6:	69 81       	ldd	r22, Y+1	; 0x01
    54c8:	86 2f       	mov	r24, r22
    54ca:	0e 94 ed 4d 	call	0x9bda	; 0x9bda <i2c_write>
    i2c_rep_start(address+I2C_READ);
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	81 0f       	add	r24, r17
    54d2:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <i2c_rep_start>
    54d6:	4a 81       	ldd	r20, Y+2	; 0x02
    54d8:	c4 2e       	mov	r12, r20
    54da:	5b 81       	ldd	r21, Y+3	; 0x03
    54dc:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    54de:	00 e0       	ldi	r16, 0x00	; 0
    54e0:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    54e2:	f1 2c       	mov	r15, r1
    54e4:	0e 15       	cp	r16, r14
    54e6:	1f 05       	cpc	r17, r15
    54e8:	84 f4       	brge	.+32     	; 0x550a <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    54ea:	0f 5f       	subi	r16, 0xFF	; 255
    54ec:	1f 4f       	sbci	r17, 0xFF	; 255
    54ee:	0e 15       	cp	r16, r14
    54f0:	1f 05       	cpc	r17, r15
    54f2:	19 f0       	breq	.+6      	; 0x54fa <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    54f4:	0e 94 0d 4e 	call	0x9c1a	; 0x9c1a <i2c_readAck>
    54f8:	02 c0       	rjmp	.+4      	; 0x54fe <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    54fa:	0e 94 26 4e 	call	0x9c4c	; 0x9c4c <i2c_readNak>
    54fe:	f6 01       	movw	r30, r12
    5500:	80 83       	st	Z, r24
    5502:	ff ef       	ldi	r31, 0xFF	; 255
    5504:	cf 1a       	sub	r12, r31
    5506:	df 0a       	sbc	r13, r31
    5508:	ed cf       	rjmp	.-38     	; 0x54e4 <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    550a:	0f 90       	pop	r0
    550c:	0f 90       	pop	r0
    550e:	0f 90       	pop	r0
    5510:	df 91       	pop	r29
    5512:	cf 91       	pop	r28
    5514:	1f 91       	pop	r17
    5516:	0f 91       	pop	r16
    5518:	ff 90       	pop	r15
    551a:	ef 90       	pop	r14
    551c:	df 90       	pop	r13
    551e:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    5520:	0c 94 de 4d 	jmp	0x9bbc	; 0x9bbc <i2c_stop>

00005524 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    5524:	4f 92       	push	r4
    5526:	5f 92       	push	r5
    5528:	6f 92       	push	r6
    552a:	7f 92       	push	r7
    552c:	8f 92       	push	r8
    552e:	9f 92       	push	r9
    5530:	af 92       	push	r10
    5532:	bf 92       	push	r11
    5534:	cf 92       	push	r12
    5536:	df 92       	push	r13
    5538:	ef 92       	push	r14
    553a:	ff 92       	push	r15
    553c:	cf 93       	push	r28
    553e:	df 93       	push	r29
    5540:	cd b7       	in	r28, 0x3d	; 61
    5542:	de b7       	in	r29, 0x3e	; 62
    5544:	28 97       	sbiw	r28, 0x08	; 8
    5546:	0f b6       	in	r0, 0x3f	; 63
    5548:	f8 94       	cli
    554a:	de bf       	out	0x3e, r29	; 62
    554c:	0f be       	out	0x3f, r0	; 63
    554e:	cd bf       	out	0x3d, r28	; 61
    5550:	6b 01       	movw	r12, r22
    5552:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    5554:	80 90 cf 05 	lds	r8, 0x05CF
    5558:	90 90 d0 05 	lds	r9, 0x05D0
    555c:	a0 90 d1 05 	lds	r10, 0x05D1
    5560:	b0 90 d2 05 	lds	r11, 0x05D2
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    5564:	9b 01       	movw	r18, r22
    5566:	ac 01       	movw	r20, r24
    5568:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    556c:	20 e0       	ldi	r18, 0x00	; 0
    556e:	30 e0       	ldi	r19, 0x00	; 0
    5570:	40 e0       	ldi	r20, 0x00	; 0
    5572:	5f e3       	ldi	r21, 0x3F	; 63
    5574:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    5578:	9b 01       	movw	r18, r22
    557a:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    557c:	60 e0       	ldi	r22, 0x00	; 0
    557e:	70 e0       	ldi	r23, 0x00	; 0
    5580:	80 e8       	ldi	r24, 0x80	; 128
    5582:	9f e3       	ldi	r25, 0x3F	; 63
    5584:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <__subsf3>
    5588:	69 83       	std	Y+1, r22	; 0x01
    558a:	7a 83       	std	Y+2, r23	; 0x02
    558c:	8b 83       	std	Y+3, r24	; 0x03
    558e:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    5590:	40 90 d3 05 	lds	r4, 0x05D3
    5594:	50 90 d4 05 	lds	r5, 0x05D4
    5598:	60 90 d5 05 	lds	r6, 0x05D5
    559c:	70 90 d6 05 	lds	r7, 0x05D6
    55a0:	9b 01       	movw	r18, r22
    55a2:	ac 01       	movw	r20, r24
    55a4:	c5 01       	movw	r24, r10
    55a6:	b4 01       	movw	r22, r8
    55a8:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    55ac:	6d 83       	std	Y+5, r22	; 0x05
    55ae:	7e 83       	std	Y+6, r23	; 0x06
    55b0:	8f 83       	std	Y+7, r24	; 0x07
    55b2:	98 87       	std	Y+8, r25	; 0x08
    55b4:	a7 01       	movw	r20, r14
    55b6:	96 01       	movw	r18, r12
    55b8:	c3 01       	movw	r24, r6
    55ba:	b2 01       	movw	r22, r4
    55bc:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    55c0:	9b 01       	movw	r18, r22
    55c2:	ac 01       	movw	r20, r24
    55c4:	6d 81       	ldd	r22, Y+5	; 0x05
    55c6:	7e 81       	ldd	r23, Y+6	; 0x06
    55c8:	8f 81       	ldd	r24, Y+7	; 0x07
    55ca:	98 85       	ldd	r25, Y+8	; 0x08
    55cc:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <__subsf3>
    55d0:	60 93 bb 05 	sts	0x05BB, r22
    55d4:	70 93 bc 05 	sts	0x05BC, r23
    55d8:	80 93 bd 05 	sts	0x05BD, r24
    55dc:	90 93 be 05 	sts	0x05BE, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    55e0:	a7 01       	movw	r20, r14
    55e2:	96 01       	movw	r18, r12
    55e4:	c5 01       	movw	r24, r10
    55e6:	b4 01       	movw	r22, r8
    55e8:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    55ec:	6b 01       	movw	r12, r22
    55ee:	7c 01       	movw	r14, r24
    55f0:	29 81       	ldd	r18, Y+1	; 0x01
    55f2:	3a 81       	ldd	r19, Y+2	; 0x02
    55f4:	4b 81       	ldd	r20, Y+3	; 0x03
    55f6:	5c 81       	ldd	r21, Y+4	; 0x04
    55f8:	c3 01       	movw	r24, r6
    55fa:	b2 01       	movw	r22, r4
    55fc:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    5600:	9b 01       	movw	r18, r22
    5602:	ac 01       	movw	r20, r24
    5604:	c7 01       	movw	r24, r14
    5606:	b6 01       	movw	r22, r12
    5608:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    560c:	60 93 9f 05 	sts	0x059F, r22
    5610:	70 93 a0 05 	sts	0x05A0, r23
    5614:	80 93 a1 05 	sts	0x05A1, r24
    5618:	90 93 a2 05 	sts	0x05A2, r25
}
    561c:	28 96       	adiw	r28, 0x08	; 8
    561e:	0f b6       	in	r0, 0x3f	; 63
    5620:	f8 94       	cli
    5622:	de bf       	out	0x3e, r29	; 62
    5624:	0f be       	out	0x3f, r0	; 63
    5626:	cd bf       	out	0x3d, r28	; 61
    5628:	df 91       	pop	r29
    562a:	cf 91       	pop	r28
    562c:	ff 90       	pop	r15
    562e:	ef 90       	pop	r14
    5630:	df 90       	pop	r13
    5632:	cf 90       	pop	r12
    5634:	bf 90       	pop	r11
    5636:	af 90       	pop	r10
    5638:	9f 90       	pop	r9
    563a:	8f 90       	pop	r8
    563c:	7f 90       	pop	r7
    563e:	6f 90       	pop	r6
    5640:	5f 90       	pop	r5
    5642:	4f 90       	pop	r4
    5644:	08 95       	ret

00005646 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    5646:	cf 92       	push	r12
    5648:	df 92       	push	r13
    564a:	ef 92       	push	r14
    564c:	ff 92       	push	r15
    564e:	69 01       	movw	r12, r18
    5650:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    5652:	25 ef       	ldi	r18, 0xF5	; 245
    5654:	31 ea       	ldi	r19, 0xA1	; 161
    5656:	4b e8       	ldi	r20, 0x8B	; 139
    5658:	5c e3       	ldi	r21, 0x3C	; 60
    565a:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    565e:	a7 01       	movw	r20, r14
    5660:	96 01       	movw	r18, r12
    5662:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    5666:	6b 01       	movw	r12, r22
    5668:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    566a:	26 ea       	ldi	r18, 0xA6	; 166
    566c:	3a e0       	ldi	r19, 0x0A	; 10
    566e:	46 e8       	ldi	r20, 0x86	; 134
    5670:	5e e3       	ldi	r21, 0x3E	; 62
    5672:	0e 94 7d 50 	call	0xa0fa	; 0xa0fa <__gesf2>
    5676:	18 16       	cp	r1, r24
    5678:	9c f0       	brlt	.+38     	; 0x56a0 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    567a:	26 ea       	ldi	r18, 0xA6	; 166
    567c:	3a e0       	ldi	r19, 0x0A	; 10
    567e:	46 e8       	ldi	r20, 0x86	; 134
    5680:	5e eb       	ldi	r21, 0xBE	; 190
    5682:	c7 01       	movw	r24, r14
    5684:	b6 01       	movw	r22, r12
    5686:	0e 94 2e 4f 	call	0x9e5c	; 0x9e5c <__cmpsf2>
    568a:	87 ff       	sbrs	r24, 7
    568c:	11 c0       	rjmp	.+34     	; 0x56b0 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    568e:	86 ea       	ldi	r24, 0xA6	; 166
    5690:	c8 2e       	mov	r12, r24
    5692:	8a e0       	ldi	r24, 0x0A	; 10
    5694:	d8 2e       	mov	r13, r24
    5696:	86 e8       	ldi	r24, 0x86	; 134
    5698:	e8 2e       	mov	r14, r24
    569a:	8e eb       	ldi	r24, 0xBE	; 190
    569c:	f8 2e       	mov	r15, r24
    569e:	08 c0       	rjmp	.+16     	; 0x56b0 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    56a0:	96 ea       	ldi	r25, 0xA6	; 166
    56a2:	c9 2e       	mov	r12, r25
    56a4:	9a e0       	ldi	r25, 0x0A	; 10
    56a6:	d9 2e       	mov	r13, r25
    56a8:	96 e8       	ldi	r25, 0x86	; 134
    56aa:	e9 2e       	mov	r14, r25
    56ac:	9e e3       	ldi	r25, 0x3E	; 62
    56ae:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    56b0:	c7 01       	movw	r24, r14
    56b2:	b6 01       	movw	r22, r12
    56b4:	ff 90       	pop	r15
    56b6:	ef 90       	pop	r14
    56b8:	df 90       	pop	r13
    56ba:	cf 90       	pop	r12
    56bc:	08 95       	ret

000056be <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    56be:	8f 92       	push	r8
    56c0:	9f 92       	push	r9
    56c2:	af 92       	push	r10
    56c4:	bf 92       	push	r11
    56c6:	cf 92       	push	r12
    56c8:	df 92       	push	r13
    56ca:	ef 92       	push	r14
    56cc:	ff 92       	push	r15
    56ce:	0f 93       	push	r16
    56d0:	1f 93       	push	r17
    56d2:	6b 01       	movw	r12, r22
    56d4:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    56d6:	60 91 af 05 	lds	r22, 0x05AF
    56da:	70 91 b0 05 	lds	r23, 0x05B0
    56de:	80 91 b1 05 	lds	r24, 0x05B1
    56e2:	90 91 b2 05 	lds	r25, 0x05B2
    56e6:	a7 01       	movw	r20, r14
    56e8:	96 01       	movw	r18, r12
    56ea:	0e 94 23 2b 	call	0x5646	; 0x5646 <thetascale>
	VectorA = VectorY;
    56ee:	00 91 26 05 	lds	r16, 0x0526
    56f2:	10 91 27 05 	lds	r17, 0x0527
    56f6:	20 91 28 05 	lds	r18, 0x0528
    56fa:	30 91 29 05 	lds	r19, 0x0529
    56fe:	00 93 cf 05 	sts	0x05CF, r16
    5702:	10 93 d0 05 	sts	0x05D0, r17
    5706:	20 93 d1 05 	sts	0x05D1, r18
    570a:	30 93 d2 05 	sts	0x05D2, r19
	VectorB = VectorZ;
    570e:	00 91 00 05 	lds	r16, 0x0500
    5712:	10 91 01 05 	lds	r17, 0x0501
    5716:	20 91 02 05 	lds	r18, 0x0502
    571a:	30 91 03 05 	lds	r19, 0x0503
    571e:	00 93 d3 05 	sts	0x05D3, r16
    5722:	10 93 d4 05 	sts	0x05D4, r17
    5726:	20 93 d5 05 	sts	0x05D5, r18
    572a:	30 93 d6 05 	sts	0x05D6, r19
	RotateVector(theta);
    572e:	0e 94 92 2a 	call	0x5524	; 0x5524 <RotateVector>
	VectorY = VectorNewA;
    5732:	80 91 bb 05 	lds	r24, 0x05BB
    5736:	90 91 bc 05 	lds	r25, 0x05BC
    573a:	a0 91 bd 05 	lds	r26, 0x05BD
    573e:	b0 91 be 05 	lds	r27, 0x05BE
    5742:	80 93 26 05 	sts	0x0526, r24
    5746:	90 93 27 05 	sts	0x0527, r25
    574a:	a0 93 28 05 	sts	0x0528, r26
    574e:	b0 93 29 05 	sts	0x0529, r27
	VectorZ = VectorNewB;
    5752:	80 90 9f 05 	lds	r8, 0x059F
    5756:	90 90 a0 05 	lds	r9, 0x05A0
    575a:	a0 90 a1 05 	lds	r10, 0x05A1
    575e:	b0 90 a2 05 	lds	r11, 0x05A2
    5762:	80 92 00 05 	sts	0x0500, r8
    5766:	90 92 01 05 	sts	0x0501, r9
    576a:	a0 92 02 05 	sts	0x0502, r10
    576e:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    5772:	60 91 b3 05 	lds	r22, 0x05B3
    5776:	70 91 b4 05 	lds	r23, 0x05B4
    577a:	80 91 b5 05 	lds	r24, 0x05B5
    577e:	90 91 b6 05 	lds	r25, 0x05B6
    5782:	a7 01       	movw	r20, r14
    5784:	96 01       	movw	r18, r12
    5786:	0e 94 23 2b 	call	0x5646	; 0x5646 <thetascale>
	VectorA = VectorX;
    578a:	00 91 2a 05 	lds	r16, 0x052A
    578e:	10 91 2b 05 	lds	r17, 0x052B
    5792:	20 91 2c 05 	lds	r18, 0x052C
    5796:	30 91 2d 05 	lds	r19, 0x052D
    579a:	00 93 cf 05 	sts	0x05CF, r16
    579e:	10 93 d0 05 	sts	0x05D0, r17
    57a2:	20 93 d1 05 	sts	0x05D1, r18
    57a6:	30 93 d2 05 	sts	0x05D2, r19
	VectorB = VectorZ;
    57aa:	80 92 d3 05 	sts	0x05D3, r8
    57ae:	90 92 d4 05 	sts	0x05D4, r9
    57b2:	a0 92 d5 05 	sts	0x05D5, r10
    57b6:	b0 92 d6 05 	sts	0x05D6, r11
	RotateVector(theta);
    57ba:	0e 94 92 2a 	call	0x5524	; 0x5524 <RotateVector>
	VectorX = VectorNewA;
    57be:	80 90 bb 05 	lds	r8, 0x05BB
    57c2:	90 90 bc 05 	lds	r9, 0x05BC
    57c6:	a0 90 bd 05 	lds	r10, 0x05BD
    57ca:	b0 90 be 05 	lds	r11, 0x05BE
    57ce:	80 92 2a 05 	sts	0x052A, r8
    57d2:	90 92 2b 05 	sts	0x052B, r9
    57d6:	a0 92 2c 05 	sts	0x052C, r10
    57da:	b0 92 2d 05 	sts	0x052D, r11
	VectorZ = VectorNewB;
    57de:	80 91 9f 05 	lds	r24, 0x059F
    57e2:	90 91 a0 05 	lds	r25, 0x05A0
    57e6:	a0 91 a1 05 	lds	r26, 0x05A1
    57ea:	b0 91 a2 05 	lds	r27, 0x05A2
    57ee:	80 93 00 05 	sts	0x0500, r24
    57f2:	90 93 01 05 	sts	0x0501, r25
    57f6:	a0 93 02 05 	sts	0x0502, r26
    57fa:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    57fe:	60 91 97 05 	lds	r22, 0x0597
    5802:	70 91 98 05 	lds	r23, 0x0598
    5806:	88 27       	eor	r24, r24
    5808:	77 fd       	sbrc	r23, 7
    580a:	80 95       	com	r24
    580c:	98 2f       	mov	r25, r24
    580e:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    5812:	a7 01       	movw	r20, r14
    5814:	96 01       	movw	r18, r12
    5816:	0e 94 23 2b 	call	0x5646	; 0x5646 <thetascale>
	VectorA = VectorX;
    581a:	80 92 cf 05 	sts	0x05CF, r8
    581e:	90 92 d0 05 	sts	0x05D0, r9
    5822:	a0 92 d1 05 	sts	0x05D1, r10
    5826:	b0 92 d2 05 	sts	0x05D2, r11
	VectorB = VectorY;
    582a:	c0 90 26 05 	lds	r12, 0x0526
    582e:	d0 90 27 05 	lds	r13, 0x0527
    5832:	e0 90 28 05 	lds	r14, 0x0528
    5836:	f0 90 29 05 	lds	r15, 0x0529
    583a:	c0 92 d3 05 	sts	0x05D3, r12
    583e:	d0 92 d4 05 	sts	0x05D4, r13
    5842:	e0 92 d5 05 	sts	0x05D5, r14
    5846:	f0 92 d6 05 	sts	0x05D6, r15
	RotateVector(theta);
    584a:	0e 94 92 2a 	call	0x5524	; 0x5524 <RotateVector>
	VectorX = VectorNewA;
    584e:	80 91 bb 05 	lds	r24, 0x05BB
    5852:	90 91 bc 05 	lds	r25, 0x05BC
    5856:	a0 91 bd 05 	lds	r26, 0x05BD
    585a:	b0 91 be 05 	lds	r27, 0x05BE
    585e:	80 93 2a 05 	sts	0x052A, r24
    5862:	90 93 2b 05 	sts	0x052B, r25
    5866:	a0 93 2c 05 	sts	0x052C, r26
    586a:	b0 93 2d 05 	sts	0x052D, r27
	VectorY = VectorNewB;
    586e:	80 91 9f 05 	lds	r24, 0x059F
    5872:	90 91 a0 05 	lds	r25, 0x05A0
    5876:	a0 91 a1 05 	lds	r26, 0x05A1
    587a:	b0 91 a2 05 	lds	r27, 0x05A2
    587e:	80 93 26 05 	sts	0x0526, r24
    5882:	90 93 27 05 	sts	0x0527, r25
    5886:	a0 93 28 05 	sts	0x0528, r26
    588a:	b0 93 29 05 	sts	0x0529, r27
}
    588e:	1f 91       	pop	r17
    5890:	0f 91       	pop	r16
    5892:	ff 90       	pop	r15
    5894:	ef 90       	pop	r14
    5896:	df 90       	pop	r13
    5898:	cf 90       	pop	r12
    589a:	bf 90       	pop	r11
    589c:	af 90       	pop	r10
    589e:	9f 90       	pop	r9
    58a0:	8f 90       	pop	r8
    58a2:	08 95       	ret

000058a4 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    58a4:	cf 92       	push	r12
    58a6:	df 92       	push	r13
    58a8:	ef 92       	push	r14
    58aa:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    58ac:	20 e0       	ldi	r18, 0x00	; 0
    58ae:	30 e0       	ldi	r19, 0x00	; 0
    58b0:	44 eb       	ldi	r20, 0xB4	; 180
    58b2:	52 e4       	ldi	r21, 0x42	; 66
    58b4:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    58b8:	6b 01       	movw	r12, r22
    58ba:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    58bc:	20 e0       	ldi	r18, 0x00	; 0
    58be:	30 e0       	ldi	r19, 0x00	; 0
    58c0:	a9 01       	movw	r20, r18
    58c2:	60 91 00 05 	lds	r22, 0x0500
    58c6:	70 91 01 05 	lds	r23, 0x0501
    58ca:	80 91 02 05 	lds	r24, 0x0502
    58ce:	90 91 03 05 	lds	r25, 0x0503
    58d2:	0e 94 2e 4f 	call	0x9e5c	; 0x9e5c <__cmpsf2>
    58d6:	87 ff       	sbrs	r24, 7
    58d8:	18 c0       	rjmp	.+48     	; 0x590a <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    58da:	20 e0       	ldi	r18, 0x00	; 0
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	a9 01       	movw	r20, r18
    58e0:	c7 01       	movw	r24, r14
    58e2:	b6 01       	movw	r22, r12
    58e4:	0e 94 7d 50 	call	0xa0fa	; 0xa0fa <__gesf2>
		{
			temp = 180 - temp;
    58e8:	a7 01       	movw	r20, r14
    58ea:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    58ec:	18 16       	cp	r1, r24
    58ee:	2c f4       	brge	.+10     	; 0x58fa <ext2+0x56>
		{
			temp = 180 - temp;
    58f0:	60 e0       	ldi	r22, 0x00	; 0
    58f2:	70 e0       	ldi	r23, 0x00	; 0
    58f4:	84 e3       	ldi	r24, 0x34	; 52
    58f6:	93 e4       	ldi	r25, 0x43	; 67
    58f8:	04 c0       	rjmp	.+8      	; 0x5902 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    58fa:	60 e0       	ldi	r22, 0x00	; 0
    58fc:	70 e0       	ldi	r23, 0x00	; 0
    58fe:	84 e3       	ldi	r24, 0x34	; 52
    5900:	93 ec       	ldi	r25, 0xC3	; 195
    5902:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <__subsf3>
    5906:	6b 01       	movw	r12, r22
    5908:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    590a:	c7 01       	movw	r24, r14
    590c:	b6 01       	movw	r22, r12
    590e:	ff 90       	pop	r15
    5910:	ef 90       	pop	r14
    5912:	df 90       	pop	r13
    5914:	cf 90       	pop	r12
    5916:	08 95       	ret

00005918 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    5918:	60 91 2a 05 	lds	r22, 0x052A
    591c:	70 91 2b 05 	lds	r23, 0x052B
    5920:	80 91 2c 05 	lds	r24, 0x052C
    5924:	90 91 2d 05 	lds	r25, 0x052D
    5928:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <ext2>
    592c:	60 93 cb 05 	sts	0x05CB, r22
    5930:	70 93 cc 05 	sts	0x05CC, r23
    5934:	80 93 cd 05 	sts	0x05CD, r24
    5938:	90 93 ce 05 	sts	0x05CE, r25
	EulerAnglePitch = ext2(VectorY);
    593c:	60 91 26 05 	lds	r22, 0x0526
    5940:	70 91 27 05 	lds	r23, 0x0527
    5944:	80 91 28 05 	lds	r24, 0x0528
    5948:	90 91 29 05 	lds	r25, 0x0529
    594c:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <ext2>
    5950:	60 93 a3 05 	sts	0x05A3, r22
    5954:	70 93 a4 05 	sts	0x05A4, r23
    5958:	80 93 a5 05 	sts	0x05A5, r24
    595c:	90 93 a6 05 	sts	0x05A6, r25
    5960:	08 95       	ret

00005962 <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    5962:	4f 92       	push	r4
    5964:	5f 92       	push	r5
    5966:	6f 92       	push	r6
    5968:	7f 92       	push	r7
    596a:	8f 92       	push	r8
    596c:	9f 92       	push	r9
    596e:	af 92       	push	r10
    5970:	bf 92       	push	r11
    5972:	cf 92       	push	r12
    5974:	df 92       	push	r13
    5976:	ef 92       	push	r14
    5978:	ff 92       	push	r15
    597a:	0f 93       	push	r16
    597c:	1f 93       	push	r17
    597e:	cf 93       	push	r28
    5980:	df 93       	push	r29
    5982:	cd b7       	in	r28, 0x3d	; 61
    5984:	de b7       	in	r29, 0x3e	; 62
    5986:	60 97       	sbiw	r28, 0x10	; 16
    5988:	0f b6       	in	r0, 0x3f	; 63
    598a:	f8 94       	cli
    598c:	de bf       	out	0x3e, r29	; 62
    598e:	0f be       	out	0x3f, r0	; 63
    5990:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    5992:	0e 94 cb 4f 	call	0x9f96	; 0x9f96 <__floatunsisf>
    5996:	69 83       	std	Y+1, r22	; 0x01
    5998:	7a 83       	std	Y+2, r23	; 0x02
    599a:	8b 83       	std	Y+3, r24	; 0x03
    599c:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    599e:	20 e8       	ldi	r18, 0x80	; 128
    59a0:	36 e9       	ldi	r19, 0x96	; 150
    59a2:	48 e1       	ldi	r20, 0x18	; 24
    59a4:	5a e4       	ldi	r21, 0x4A	; 74
    59a6:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    59aa:	6d 87       	std	Y+13, r22	; 0x0d
    59ac:	7e 87       	std	Y+14, r23	; 0x0e
    59ae:	8f 87       	std	Y+15, r24	; 0x0f
    59b0:	98 8b       	std	Y+16, r25	; 0x10
	//************************************************************
	// Acc LPF
	//************************************************************	

	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    59b2:	80 91 01 06 	lds	r24, 0x0601
    59b6:	60 91 65 06 	lds	r22, 0x0665
    59ba:	82 30       	cpi	r24, 0x02	; 2
    59bc:	39 f0       	breq	.+14     	; 0x59cc <imu_update+0x6a>
	{
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    59be:	84 e0       	ldi	r24, 0x04	; 4
    59c0:	68 02       	muls	r22, r24
    59c2:	b0 01       	movw	r22, r0
    59c4:	11 24       	eor	r1, r1
    59c6:	6d 58       	subi	r22, 0x8D	; 141
    59c8:	74 4e       	sbci	r23, 0xE4	; 228
    59ca:	06 c0       	rjmp	.+12     	; 0x59d8 <imu_update+0x76>
	}
	else
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
    59cc:	94 e0       	ldi	r25, 0x04	; 4
    59ce:	69 02       	muls	r22, r25
    59d0:	b0 01       	movw	r22, r0
    59d2:	11 24       	eor	r1, r1
    59d4:	6d 5a       	subi	r22, 0xAD	; 173
    59d6:	74 4e       	sbci	r23, 0xE4	; 228
    59d8:	44 e0       	ldi	r20, 0x04	; 4
    59da:	50 e0       	ldi	r21, 0x00	; 0
    59dc:	ce 01       	movw	r24, r28
    59de:	01 96       	adiw	r24, 0x01	; 1
    59e0:	0e 94 84 51 	call	0xa308	; 0xa308 <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    59e4:	50 90 65 06 	lds	r5, 0x0665
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    59e8:	c9 80       	ldd	r12, Y+1	; 0x01
    59ea:	da 80       	ldd	r13, Y+2	; 0x02
    59ec:	eb 80       	ldd	r14, Y+3	; 0x03
    59ee:	fc 80       	ldd	r15, Y+4	; 0x04
    59f0:	2e e4       	ldi	r18, 0x4E	; 78
    59f2:	62 2e       	mov	r6, r18
    59f4:	25 e0       	ldi	r18, 0x05	; 5
    59f6:	72 2e       	mov	r7, r18
    59f8:	0f eb       	ldi	r16, 0xBF	; 191
    59fa:	15 e0       	ldi	r17, 0x05	; 5
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    59fc:	d3 01       	movw	r26, r6
    59fe:	6d 91       	ld	r22, X+
    5a00:	7d 91       	ld	r23, X+
    5a02:	3d 01       	movw	r6, r26
    5a04:	88 27       	eor	r24, r24
    5a06:	77 fd       	sbrc	r23, 7
    5a08:	80 95       	com	r24
    5a0a:	98 2f       	mov	r25, r24
    5a0c:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    5a10:	4b 01       	movw	r8, r22
    5a12:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    5a14:	b7 e0       	ldi	r27, 0x07	; 7
    5a16:	5b 16       	cp	r5, r27
    5a18:	f1 f0       	breq	.+60     	; 0x5a56 <imu_update+0xf4>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    5a1a:	20 e0       	ldi	r18, 0x00	; 0
    5a1c:	30 e0       	ldi	r19, 0x00	; 0
    5a1e:	40 e8       	ldi	r20, 0x80	; 128
    5a20:	5f e3       	ldi	r21, 0x3F	; 63
    5a22:	c7 01       	movw	r24, r14
    5a24:	b6 01       	movw	r22, r12
    5a26:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <__subsf3>
    5a2a:	f8 01       	movw	r30, r16
    5a2c:	20 81       	ld	r18, Z
    5a2e:	31 81       	ldd	r19, Z+1	; 0x01
    5a30:	42 81       	ldd	r20, Z+2	; 0x02
    5a32:	53 81       	ldd	r21, Z+3	; 0x03
    5a34:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    5a38:	a5 01       	movw	r20, r10
    5a3a:	94 01       	movw	r18, r8
    5a3c:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <__subsf3>
    5a40:	a7 01       	movw	r20, r14
    5a42:	96 01       	movw	r18, r12
    5a44:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    5a48:	d8 01       	movw	r26, r16
    5a4a:	6d 93       	st	X+, r22
    5a4c:	7d 93       	st	X+, r23
    5a4e:	8d 93       	st	X+, r24
    5a50:	9c 93       	st	X, r25
    5a52:	13 97       	sbiw	r26, 0x03	; 3
    5a54:	09 c0       	rjmp	.+18     	; 0x5a68 <imu_update+0x106>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    5a56:	b7 fa       	bst	r11, 7
    5a58:	b0 94       	com	r11
    5a5a:	b7 f8       	bld	r11, 7
    5a5c:	b0 94       	com	r11
    5a5e:	f8 01       	movw	r30, r16
    5a60:	80 82       	st	Z, r8
    5a62:	91 82       	std	Z+1, r9	; 0x01
    5a64:	a2 82       	std	Z+2, r10	; 0x02
    5a66:	b3 82       	std	Z+3, r11	; 0x03
    5a68:	0c 5f       	subi	r16, 0xFC	; 252
    5a6a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    5a6c:	f4 e5       	ldi	r31, 0x54	; 84
    5a6e:	6f 16       	cp	r6, r31
    5a70:	f5 e0       	ldi	r31, 0x05	; 5
    5a72:	7f 06       	cpc	r7, r31
    5a74:	19 f6       	brne	.-122    	; 0x59fc <imu_update+0x9a>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    5a76:	23 ec       	ldi	r18, 0xC3	; 195
    5a78:	35 ef       	ldi	r19, 0xF5	; 245
    5a7a:	48 e2       	ldi	r20, 0x28	; 40
    5a7c:	5f e3       	ldi	r21, 0x3F	; 63
    5a7e:	60 91 bf 05 	lds	r22, 0x05BF
    5a82:	70 91 c0 05 	lds	r23, 0x05C0
    5a86:	80 91 c1 05 	lds	r24, 0x05C1
    5a8a:	90 91 c2 05 	lds	r25, 0x05C2
    5a8e:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    5a92:	6d 83       	std	Y+5, r22	; 0x05
    5a94:	7e 83       	std	Y+6, r23	; 0x06
    5a96:	8f 83       	std	Y+7, r24	; 0x07
    5a98:	98 87       	std	Y+8, r25	; 0x08
    5a9a:	60 93 a7 05 	sts	0x05A7, r22
    5a9e:	70 93 a8 05 	sts	0x05A8, r23
    5aa2:	80 93 a9 05 	sts	0x05A9, r24
    5aa6:	90 93 aa 05 	sts	0x05AA, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    5aaa:	23 ec       	ldi	r18, 0xC3	; 195
    5aac:	35 ef       	ldi	r19, 0xF5	; 245
    5aae:	48 e2       	ldi	r20, 0x28	; 40
    5ab0:	5f e3       	ldi	r21, 0x3F	; 63
    5ab2:	60 91 c3 05 	lds	r22, 0x05C3
    5ab6:	70 91 c4 05 	lds	r23, 0x05C4
    5aba:	80 91 c5 05 	lds	r24, 0x05C5
    5abe:	90 91 c6 05 	lds	r25, 0x05C6
    5ac2:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    5ac6:	69 87       	std	Y+9, r22	; 0x09
    5ac8:	7a 87       	std	Y+10, r23	; 0x0a
    5aca:	8b 87       	std	Y+11, r24	; 0x0b
    5acc:	9c 87       	std	Y+12, r25	; 0x0c
    5ace:	60 93 ab 05 	sts	0x05AB, r22
    5ad2:	70 93 ac 05 	sts	0x05AC, r23
    5ad6:	80 93 ad 05 	sts	0x05AD, r24
    5ada:	90 93 ae 05 	sts	0x05AE, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    5ade:	60 91 93 05 	lds	r22, 0x0593
    5ae2:	70 91 94 05 	lds	r23, 0x0594
    5ae6:	88 27       	eor	r24, r24
    5ae8:	77 fd       	sbrc	r23, 7
    5aea:	80 95       	com	r24
    5aec:	98 2f       	mov	r25, r24
    5aee:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    5af2:	2b 01       	movw	r4, r22
    5af4:	3c 01       	movw	r6, r24
    5af6:	60 93 b3 05 	sts	0x05B3, r22
    5afa:	70 93 b4 05 	sts	0x05B4, r23
    5afe:	80 93 b5 05 	sts	0x05B5, r24
    5b02:	90 93 b6 05 	sts	0x05B6, r25
	GyroPitchVC = gyroADC[PITCH];
    5b06:	60 91 95 05 	lds	r22, 0x0595
    5b0a:	70 91 96 05 	lds	r23, 0x0596
    5b0e:	88 27       	eor	r24, r24
    5b10:	77 fd       	sbrc	r23, 7
    5b12:	80 95       	com	r24
    5b14:	98 2f       	mov	r25, r24
    5b16:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    5b1a:	6b 01       	movw	r12, r22
    5b1c:	7c 01       	movw	r14, r24
    5b1e:	60 93 af 05 	sts	0x05AF, r22
    5b22:	70 93 b0 05 	sts	0x05B0, r23
    5b26:	80 93 b1 05 	sts	0x05B1, r24
    5b2a:	90 93 b2 05 	sts	0x05B2, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    5b2e:	20 91 4e 05 	lds	r18, 0x054E
    5b32:	30 91 4f 05 	lds	r19, 0x054F
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    5b36:	40 91 50 05 	lds	r20, 0x0550
    5b3a:	50 91 51 05 	lds	r21, 0x0551
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    5b3e:	e0 91 52 05 	lds	r30, 0x0552
    5b42:	f0 91 53 05 	lds	r31, 0x0553
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    5b46:	44 9f       	mul	r20, r20
    5b48:	40 01       	movw	r8, r0
    5b4a:	45 9f       	mul	r20, r21
    5b4c:	90 0c       	add	r9, r0
    5b4e:	90 0c       	add	r9, r0
    5b50:	11 24       	eor	r1, r1
    5b52:	b4 01       	movw	r22, r8
    5b54:	88 27       	eor	r24, r24
    5b56:	77 fd       	sbrc	r23, 7
    5b58:	80 95       	com	r24
    5b5a:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    5b5c:	22 9f       	mul	r18, r18
    5b5e:	a0 01       	movw	r20, r0
    5b60:	23 9f       	mul	r18, r19
    5b62:	50 0d       	add	r21, r0
    5b64:	50 0d       	add	r21, r0
    5b66:	11 24       	eor	r1, r1
    5b68:	8a 01       	movw	r16, r20
    5b6a:	22 27       	eor	r18, r18
    5b6c:	17 fd       	sbrc	r17, 7
    5b6e:	20 95       	com	r18
    5b70:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    5b72:	60 0f       	add	r22, r16
    5b74:	71 1f       	adc	r23, r17
    5b76:	82 1f       	adc	r24, r18
    5b78:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    5b7a:	ee 9f       	mul	r30, r30
    5b7c:	90 01       	movw	r18, r0
    5b7e:	ef 9f       	mul	r30, r31
    5b80:	30 0d       	add	r19, r0
    5b82:	30 0d       	add	r19, r0
    5b84:	11 24       	eor	r1, r1
    5b86:	89 01       	movw	r16, r18
    5b88:	22 27       	eor	r18, r18
    5b8a:	17 fd       	sbrc	r17, 7
    5b8c:	20 95       	com	r18
    5b8e:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    5b90:	60 0f       	add	r22, r16
    5b92:	71 1f       	adc	r23, r17
    5b94:	82 1f       	adc	r24, r18
    5b96:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    5b98:	0e 94 cb 4f 	call	0x9f96	; 0x9f96 <__floatunsisf>
    5b9c:	4b 01       	movw	r8, r22
    5b9e:	5c 01       	movw	r10, r24
    5ba0:	20 e0       	ldi	r18, 0x00	; 0
    5ba2:	34 ef       	ldi	r19, 0xF4	; 244
    5ba4:	48 e3       	ldi	r20, 0x38	; 56
    5ba6:	56 e4       	ldi	r21, 0x46	; 70
    5ba8:	0e 94 7d 50 	call	0xa0fa	; 0xa0fa <__gesf2>
    5bac:	18 16       	cp	r1, r24
    5bae:	0c f0       	brlt	.+2      	; 0x5bb2 <imu_update+0x250>
    5bb0:	6f c0       	rjmp	.+222    	; 0x5c90 <imu_update+0x32e>
    5bb2:	20 e0       	ldi	r18, 0x00	; 0
    5bb4:	38 e4       	ldi	r19, 0x48	; 72
    5bb6:	49 ea       	ldi	r20, 0xA9	; 169
    5bb8:	56 e4       	ldi	r21, 0x46	; 70
    5bba:	c5 01       	movw	r24, r10
    5bbc:	b4 01       	movw	r22, r8
    5bbe:	0e 94 2e 4f 	call	0x9e5c	; 0x9e5c <__cmpsf2>
    5bc2:	87 ff       	sbrs	r24, 7
    5bc4:	65 c0       	rjmp	.+202    	; 0x5c90 <imu_update+0x32e>
    5bc6:	20 e0       	ldi	r18, 0x00	; 0
    5bc8:	30 e0       	ldi	r19, 0x00	; 0
    5bca:	40 e0       	ldi	r20, 0x00	; 0
    5bcc:	5f e3       	ldi	r21, 0x3F	; 63
    5bce:	60 91 00 05 	lds	r22, 0x0500
    5bd2:	70 91 01 05 	lds	r23, 0x0501
    5bd6:	80 91 02 05 	lds	r24, 0x0502
    5bda:	90 91 03 05 	lds	r25, 0x0503
    5bde:	0e 94 7d 50 	call	0xa0fa	; 0xa0fa <__gesf2>
    5be2:	18 16       	cp	r1, r24
    5be4:	0c f0       	brlt	.+2      	; 0x5be8 <imu_update+0x286>
    5be6:	54 c0       	rjmp	.+168    	; 0x5c90 <imu_update+0x32e>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    5be8:	80 91 67 06 	lds	r24, 0x0667
    5bec:	6b e0       	ldi	r22, 0x0B	; 11
    5bee:	70 e0       	ldi	r23, 0x00	; 0
    5bf0:	68 1b       	sub	r22, r24
    5bf2:	71 09       	sbc	r23, r1
    5bf4:	87 fd       	sbrc	r24, 7
    5bf6:	73 95       	inc	r23
    5bf8:	88 27       	eor	r24, r24
    5bfa:	77 fd       	sbrc	r23, 7
    5bfc:	80 95       	com	r24
    5bfe:	98 2f       	mov	r25, r24
    5c00:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    5c04:	4b 01       	movw	r8, r22
    5c06:	5c 01       	movw	r10, r24
    5c08:	2d 81       	ldd	r18, Y+5	; 0x05
    5c0a:	3e 81       	ldd	r19, Y+6	; 0x06
    5c0c:	4f 81       	ldd	r20, Y+7	; 0x07
    5c0e:	58 85       	ldd	r21, Y+8	; 0x08
    5c10:	60 91 cb 05 	lds	r22, 0x05CB
    5c14:	70 91 cc 05 	lds	r23, 0x05CC
    5c18:	80 91 cd 05 	lds	r24, 0x05CD
    5c1c:	90 91 ce 05 	lds	r25, 0x05CE
    5c20:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <__subsf3>
    5c24:	a5 01       	movw	r20, r10
    5c26:	94 01       	movw	r18, r8
    5c28:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    5c2c:	9b 01       	movw	r18, r22
    5c2e:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    5c30:	c3 01       	movw	r24, r6
    5c32:	b2 01       	movw	r22, r4
    5c34:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    5c38:	60 93 b3 05 	sts	0x05B3, r22
    5c3c:	70 93 b4 05 	sts	0x05B4, r23
    5c40:	80 93 b5 05 	sts	0x05B5, r24
    5c44:	90 93 b6 05 	sts	0x05B6, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    5c48:	29 85       	ldd	r18, Y+9	; 0x09
    5c4a:	3a 85       	ldd	r19, Y+10	; 0x0a
    5c4c:	4b 85       	ldd	r20, Y+11	; 0x0b
    5c4e:	5c 85       	ldd	r21, Y+12	; 0x0c
    5c50:	60 91 a3 05 	lds	r22, 0x05A3
    5c54:	70 91 a4 05 	lds	r23, 0x05A4
    5c58:	80 91 a5 05 	lds	r24, 0x05A5
    5c5c:	90 91 a6 05 	lds	r25, 0x05A6
    5c60:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <__subsf3>
    5c64:	a5 01       	movw	r20, r10
    5c66:	94 01       	movw	r18, r8
    5c68:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    5c6c:	9b 01       	movw	r18, r22
    5c6e:	ac 01       	movw	r20, r24
    5c70:	69 83       	std	Y+1, r22	; 0x01
    5c72:	7a 83       	std	Y+2, r23	; 0x02
    5c74:	8b 83       	std	Y+3, r24	; 0x03
    5c76:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    5c78:	c7 01       	movw	r24, r14
    5c7a:	b6 01       	movw	r22, r12
    5c7c:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    5c80:	60 93 af 05 	sts	0x05AF, r22
    5c84:	70 93 b0 05 	sts	0x05B0, r23
    5c88:	80 93 b1 05 	sts	0x05B1, r24
    5c8c:	90 93 b2 05 	sts	0x05B2, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    5c90:	6d 85       	ldd	r22, Y+13	; 0x0d
    5c92:	7e 85       	ldd	r23, Y+14	; 0x0e
    5c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c96:	98 89       	ldd	r25, Y+16	; 0x10
    5c98:	0e 94 5f 2b 	call	0x56be	; 0x56be <Rotate3dVector>
	ExtractEulerAngles();
    5c9c:	0e 94 8c 2c 	call	0x5918	; 0x5918 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    5ca0:	20 e0       	ldi	r18, 0x00	; 0
    5ca2:	30 e0       	ldi	r19, 0x00	; 0
    5ca4:	48 ec       	ldi	r20, 0xC8	; 200
    5ca6:	52 ec       	ldi	r21, 0xC2	; 194
    5ca8:	60 91 cb 05 	lds	r22, 0x05CB
    5cac:	70 91 cc 05 	lds	r23, 0x05CC
    5cb0:	80 91 cd 05 	lds	r24, 0x05CD
    5cb4:	90 91 ce 05 	lds	r25, 0x05CE
    5cb8:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    5cbc:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    5cc0:	70 93 b8 05 	sts	0x05B8, r23
    5cc4:	60 93 b7 05 	sts	0x05B7, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    5cc8:	20 e0       	ldi	r18, 0x00	; 0
    5cca:	30 e0       	ldi	r19, 0x00	; 0
    5ccc:	48 ec       	ldi	r20, 0xC8	; 200
    5cce:	52 ec       	ldi	r21, 0xC2	; 194
    5cd0:	60 91 a3 05 	lds	r22, 0x05A3
    5cd4:	70 91 a4 05 	lds	r23, 0x05A4
    5cd8:	80 91 a5 05 	lds	r24, 0x05A5
    5cdc:	90 91 a6 05 	lds	r25, 0x05A6
    5ce0:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    5ce4:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    5ce8:	70 93 ba 05 	sts	0x05BA, r23
    5cec:	60 93 b9 05 	sts	0x05B9, r22
}
    5cf0:	60 96       	adiw	r28, 0x10	; 16
    5cf2:	0f b6       	in	r0, 0x3f	; 63
    5cf4:	f8 94       	cli
    5cf6:	de bf       	out	0x3e, r29	; 62
    5cf8:	0f be       	out	0x3f, r0	; 63
    5cfa:	cd bf       	out	0x3d, r28	; 61
    5cfc:	df 91       	pop	r29
    5cfe:	cf 91       	pop	r28
    5d00:	1f 91       	pop	r17
    5d02:	0f 91       	pop	r16
    5d04:	ff 90       	pop	r15
    5d06:	ef 90       	pop	r14
    5d08:	df 90       	pop	r13
    5d0a:	cf 90       	pop	r12
    5d0c:	bf 90       	pop	r11
    5d0e:	af 90       	pop	r10
    5d10:	9f 90       	pop	r9
    5d12:	8f 90       	pop	r8
    5d14:	7f 90       	pop	r7
    5d16:	6f 90       	pop	r6
    5d18:	5f 90       	pop	r5
    5d1a:	4f 90       	pop	r4
    5d1c:	08 95       	ret

00005d1e <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    5d1e:	10 92 2a 05 	sts	0x052A, r1
    5d22:	10 92 2b 05 	sts	0x052B, r1
    5d26:	10 92 2c 05 	sts	0x052C, r1
    5d2a:	10 92 2d 05 	sts	0x052D, r1
	VectorY = 0;
    5d2e:	10 92 26 05 	sts	0x0526, r1
    5d32:	10 92 27 05 	sts	0x0527, r1
    5d36:	10 92 28 05 	sts	0x0528, r1
    5d3a:	10 92 29 05 	sts	0x0529, r1
	VectorZ = 1;
    5d3e:	80 e0       	ldi	r24, 0x00	; 0
    5d40:	90 e0       	ldi	r25, 0x00	; 0
    5d42:	a0 e8       	ldi	r26, 0x80	; 128
    5d44:	bf e3       	ldi	r27, 0x3F	; 63
    5d46:	80 93 00 05 	sts	0x0500, r24
    5d4a:	90 93 01 05 	sts	0x0501, r25
    5d4e:	a0 93 02 05 	sts	0x0502, r26
    5d52:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    5d56:	10 92 cf 05 	sts	0x05CF, r1
    5d5a:	10 92 d0 05 	sts	0x05D0, r1
    5d5e:	10 92 d1 05 	sts	0x05D1, r1
    5d62:	10 92 d2 05 	sts	0x05D2, r1
	VectorB = 0;
    5d66:	10 92 d3 05 	sts	0x05D3, r1
    5d6a:	10 92 d4 05 	sts	0x05D4, r1
    5d6e:	10 92 d5 05 	sts	0x05D5, r1
    5d72:	10 92 d6 05 	sts	0x05D6, r1
	EulerAngleRoll = 0;
    5d76:	10 92 cb 05 	sts	0x05CB, r1
    5d7a:	10 92 cc 05 	sts	0x05CC, r1
    5d7e:	10 92 cd 05 	sts	0x05CD, r1
    5d82:	10 92 ce 05 	sts	0x05CE, r1
	EulerAnglePitch = 0;
    5d86:	10 92 a3 05 	sts	0x05A3, r1
    5d8a:	10 92 a4 05 	sts	0x05A4, r1
    5d8e:	10 92 a5 05 	sts	0x05A5, r1
    5d92:	10 92 a6 05 	sts	0x05A6, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    5d96:	10 92 0b 08 	sts	0x080B, r1
    5d9a:	10 92 0a 08 	sts	0x080A, r1
	TCNT1 = 0;			// TCNT1 current time
    5d9e:	10 92 85 00 	sts	0x0085, r1
    5da2:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    5da6:	10 92 1b 05 	sts	0x051B, r1
    5daa:	10 92 1a 05 	sts	0x051A, r1
    5dae:	08 95       	ret

00005db0 <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    5db0:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    5db2:	80 e3       	ldi	r24, 0x30	; 48
    5db4:	81 b9       	out	0x01, r24	; 1
	DDRB		= 0x0A;		// Port B
    5db6:	8a e0       	ldi	r24, 0x0A	; 10
    5db8:	84 b9       	out	0x04, r24	; 4
	DDRC		= 0xFC;		// Port C
    5dba:	8c ef       	ldi	r24, 0xFC	; 252
    5dbc:	87 b9       	out	0x07, r24	; 7
	DDRD		= 0xF2;		// Port D
    5dbe:	82 ef       	ldi	r24, 0xF2	; 242
    5dc0:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    5dc2:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    5dc4:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    5dc6:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    5dc8:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    5dca:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    5dcc:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    5dce:	85 ef       	ldi	r24, 0xF5	; 245
    5dd0:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    5dd2:	8c e0       	ldi	r24, 0x0C	; 12
    5dd4:	89 b9       	out	0x09, r24	; 9
	// 5 low pulses: DSM2 2048/11ms
	// 7 low pulses: DSMX 1024/22ms
	// 9 low pulses: DSMX 2048/11ms
	//***********************************************************

	PIND	= 0x0C;			// Release RX pull up on PD0
    5dd6:	89 b9       	out	0x09, r24	; 9
    5dd8:	2f e5       	ldi	r18, 0x5F	; 95
    5dda:	88 ed       	ldi	r24, 0xD8	; 216
    5ddc:	93 e0       	ldi	r25, 0x03	; 3
    5dde:	21 50       	subi	r18, 0x01	; 1
    5de0:	80 40       	sbci	r24, 0x00	; 0
    5de2:	90 40       	sbci	r25, 0x00	; 0
    5de4:	e1 f7       	brne	.-8      	; 0x5dde <init+0x2e>
    5de6:	00 c0       	rjmp	.+0      	; 0x5de8 <init+0x38>
    5de8:	00 00       	nop
							// Tweak until bind pulses about 68ms after power-up		
		
	// Bind as master if any single button pressed.
	// NB: Have to wait until the button pull-ups rise before testing for a button press.
	// Button 1
	if ((PINB & 0xf0) == 0x70)
    5dea:	83 b1       	in	r24, 0x03	; 3
    5dec:	80 7f       	andi	r24, 0xF0	; 240
    5dee:	80 37       	cpi	r24, 0x70	; 112
    5df0:	29 f4       	brne	.+10     	; 0x5dfc <init+0x4c>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    5df2:	83 ef       	ldi	r24, 0xF3	; 243
    5df4:	8a b9       	out	0x0a, r24	; 10
		bind_master(3);
    5df6:	83 e0       	ldi	r24, 0x03	; 3
    5df8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <bind_master>
		
	}
	// Button 2	
	if ((PINB & 0xf0) == 0xb0)
    5dfc:	83 b1       	in	r24, 0x03	; 3
    5dfe:	80 7f       	andi	r24, 0xF0	; 240
    5e00:	80 3b       	cpi	r24, 0xB0	; 176
    5e02:	29 f4       	brne	.+10     	; 0x5e0e <init+0x5e>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    5e04:	83 ef       	ldi	r24, 0xF3	; 243
    5e06:	8a b9       	out	0x0a, r24	; 10
		bind_master(5);
    5e08:	85 e0       	ldi	r24, 0x05	; 5
    5e0a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <bind_master>
	}
	// Button 3	
	if ((PINB & 0xf0) == 0xd0)
    5e0e:	83 b1       	in	r24, 0x03	; 3
    5e10:	80 7f       	andi	r24, 0xF0	; 240
    5e12:	80 3d       	cpi	r24, 0xD0	; 208
    5e14:	29 f4       	brne	.+10     	; 0x5e20 <init+0x70>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    5e16:	83 ef       	ldi	r24, 0xF3	; 243
    5e18:	8a b9       	out	0x0a, r24	; 10
		bind_master(7);
    5e1a:	87 e0       	ldi	r24, 0x07	; 7
    5e1c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <bind_master>
	}
	
	// Button 4
	if ((PINB & 0xf0) == 0xE0)
    5e20:	83 b1       	in	r24, 0x03	; 3
    5e22:	80 7f       	andi	r24, 0xF0	; 240
    5e24:	80 3e       	cpi	r24, 0xE0	; 224
    5e26:	29 f4       	brne	.+10     	; 0x5e32 <init+0x82>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    5e28:	83 ef       	ldi	r24, 0xF3	; 243
    5e2a:	8a b9       	out	0x0a, r24	; 10
		bind_master(9);
    5e2c:	89 e0       	ldi	r24, 0x09	; 9
    5e2e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <bind_master>
	}
	
	DDRD	= 0xF2;			// Reset Port D directions
    5e32:	82 ef       	ldi	r24, 0xF2	; 242
    5e34:	8a b9       	out	0x0a, r24	; 10
	PIND	= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    5e36:	8d e0       	ldi	r24, 0x0D	; 13
    5e38:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    5e3a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    5e3c:	85 e0       	ldi	r24, 0x05	; 5
    5e3e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    5e40:	80 91 6e 00 	lds	r24, 0x006E
    5e44:	81 60       	ori	r24, 0x01	; 1
    5e46:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    5e4a:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    5e4c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    5e50:	80 91 81 00 	lds	r24, 0x0081
    5e54:	82 60       	ori	r24, 0x02	; 2
    5e56:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    5e5a:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    5e5e:	87 e0       	ldi	r24, 0x07	; 7
    5e60:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    5e64:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    5e68:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    5e6a:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    5e6e:	9a e0       	ldi	r25, 0x0A	; 10
    5e70:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    5e74:	9f e0       	ldi	r25, 0x0F	; 15
    5e76:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    5e78:	95 e1       	ldi	r25, 0x15	; 21
    5e7a:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    5e7e:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    5e80:	10 92 07 08 	sts	0x0807, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    5e84:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <Initial_EEPROM_Config_Load>
    5e88:	c8 2f       	mov	r28, r24
    5e8a:	20 e0       	ldi	r18, 0x00	; 0
    5e8c:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    5e8e:	46 ea       	ldi	r20, 0xA6	; 166
    5e90:	5e e0       	ldi	r21, 0x0E	; 14
    5e92:	f9 01       	movw	r30, r18
    5e94:	ee 0f       	add	r30, r30
    5e96:	ff 1f       	adc	r31, r31
    5e98:	e9 50       	subi	r30, 0x09	; 9
    5e9a:	f8 4f       	sbci	r31, 0xF8	; 248
    5e9c:	51 83       	std	Z+1, r21	; 0x01
    5e9e:	40 83       	st	Z, r20
    5ea0:	2f 5f       	subi	r18, 0xFF	; 255
    5ea2:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5ea4:	28 30       	cpi	r18, 0x08	; 8
    5ea6:	31 05       	cpc	r19, r1
    5ea8:	a1 f7       	brne	.-24     	; 0x5e92 <init+0xe2>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    5eaa:	24 ec       	ldi	r18, 0xC4	; 196
    5eac:	39 e0       	ldi	r19, 0x09	; 9
    5eae:	30 93 f8 07 	sts	0x07F8, r19
    5eb2:	20 93 f7 07 	sts	0x07F7, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    5eb6:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    5eba:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    5ebe:	93 b1       	in	r25, 0x03	; 3
    5ec0:	90 7f       	andi	r25, 0xF0	; 240
    5ec2:	90 36       	cpi	r25, 0x60	; 96
    5ec4:	09 f0       	breq	.+2      	; 0x5ec8 <init+0x118>
    5ec6:	71 c0       	rjmp	.+226    	; 0x5faa <init+0x1fa>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5ec8:	80 ec       	ldi	r24, 0xC0	; 192
    5eca:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
		clear_buffer(buffer);
    5ece:	80 e0       	ldi	r24, 0x00	; 0
    5ed0:	91 e0       	ldi	r25, 0x01	; 1
    5ed2:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    5ed6:	29 e1       	ldi	r18, 0x19	; 25
    5ed8:	30 e0       	ldi	r19, 0x00	; 0
    5eda:	4a e0       	ldi	r20, 0x0A	; 10
    5edc:	50 e0       	ldi	r21, 0x00	; 0
    5ede:	69 ee       	ldi	r22, 0xE9	; 233
    5ee0:	73 e0       	ldi	r23, 0x03	; 3
    5ee2:	8b e3       	ldi	r24, 0x3B	; 59
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		write_buffer(buffer);
    5eea:	80 e0       	ldi	r24, 0x00	; 0
    5eec:	91 e0       	ldi	r25, 0x01	; 1
    5eee:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
		clear_buffer(buffer);
    5ef2:	80 e0       	ldi	r24, 0x00	; 0
    5ef4:	91 e0       	ldi	r25, 0x01	; 1
    5ef6:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
    5efa:	ed e6       	ldi	r30, 0x6D	; 109
    5efc:	f6 e0       	ldi	r31, 0x06	; 6
    5efe:	80 e0       	ldi	r24, 0x00	; 0
    5f00:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5f02:	4c ed       	ldi	r20, 0xDC	; 220
    5f04:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5f06:	6c e6       	ldi	r22, 0x6C	; 108
    5f08:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5f0a:	a0 81       	ld	r26, Z
    5f0c:	9c 01       	movw	r18, r24
    5f0e:	22 0f       	add	r18, r18
    5f10:	33 1f       	adc	r19, r19
    5f12:	a2 30       	cpi	r26, 0x02	; 2
    5f14:	39 f4       	brne	.+14     	; 0x5f24 <init+0x174>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5f16:	d9 01       	movw	r26, r18
    5f18:	aa 56       	subi	r26, 0x6A	; 106
    5f1a:	b7 4f       	sbci	r27, 0xF7	; 247
    5f1c:	11 96       	adiw	r26, 0x01	; 1
    5f1e:	7c 93       	st	X, r23
    5f20:	6e 93       	st	-X, r22
    5f22:	06 c0       	rjmp	.+12     	; 0x5f30 <init+0x180>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5f24:	d9 01       	movw	r26, r18
    5f26:	aa 56       	subi	r26, 0x6A	; 106
    5f28:	b7 4f       	sbci	r27, 0xF7	; 247
    5f2a:	11 96       	adiw	r26, 0x01	; 1
    5f2c:	5c 93       	st	X, r21
    5f2e:	4e 93       	st	-X, r20
    5f30:	01 96       	adiw	r24, 0x01	; 1
    5f32:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5f34:	88 30       	cpi	r24, 0x08	; 8
    5f36:	91 05       	cpc	r25, r1
    5f38:	41 f7       	brne	.-48     	; 0x5f0a <init+0x15a>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5f3a:	83 b1       	in	r24, 0x03	; 3
    5f3c:	80 7f       	andi	r24, 0xF0	; 240
    5f3e:	80 36       	cpi	r24, 0x60	; 96
    5f40:	79 f4       	brne	.+30     	; 0x5f60 <init+0x1b0>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5f42:	6f ef       	ldi	r22, 0xFF	; 255
    5f44:	86 e9       	ldi	r24, 0x96	; 150
    5f46:	98 e0       	ldi	r25, 0x08	; 8
    5f48:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <output_servo_ppm_asm>
    5f4c:	2f e7       	ldi	r18, 0x7F	; 127
    5f4e:	88 e3       	ldi	r24, 0x38	; 56
    5f50:	91 e0       	ldi	r25, 0x01	; 1
    5f52:	21 50       	subi	r18, 0x01	; 1
    5f54:	80 40       	sbci	r24, 0x00	; 0
    5f56:	90 40       	sbci	r25, 0x00	; 0
    5f58:	e1 f7       	brne	.-8      	; 0x5f52 <init+0x1a2>
    5f5a:	00 c0       	rjmp	.+0      	; 0x5f5c <init+0x1ac>
    5f5c:	00 00       	nop
    5f5e:	ed cf       	rjmp	.-38     	; 0x5f3a <init+0x18a>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5f60:	ed e6       	ldi	r30, 0x6D	; 109
    5f62:	f6 e0       	ldi	r31, 0x06	; 6
    5f64:	80 e0       	ldi	r24, 0x00	; 0
    5f66:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5f68:	2c e4       	ldi	r18, 0x4C	; 76
    5f6a:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5f6c:	40 81       	ld	r20, Z
    5f6e:	42 30       	cpi	r20, 0x02	; 2
    5f70:	41 f4       	brne	.+16     	; 0x5f82 <init+0x1d2>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5f72:	dc 01       	movw	r26, r24
    5f74:	aa 0f       	add	r26, r26
    5f76:	bb 1f       	adc	r27, r27
    5f78:	aa 56       	subi	r26, 0x6A	; 106
    5f7a:	b7 4f       	sbci	r27, 0xF7	; 247
    5f7c:	11 96       	adiw	r26, 0x01	; 1
    5f7e:	3c 93       	st	X, r19
    5f80:	2e 93       	st	-X, r18
    5f82:	01 96       	adiw	r24, 0x01	; 1
    5f84:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5f86:	88 30       	cpi	r24, 0x08	; 8
    5f88:	91 05       	cpc	r25, r1
    5f8a:	81 f7       	brne	.-32     	; 0x5f6c <init+0x1bc>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5f8c:	6f ef       	ldi	r22, 0xFF	; 255
    5f8e:	86 e9       	ldi	r24, 0x96	; 150
    5f90:	98 e0       	ldi	r25, 0x08	; 8
    5f92:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <output_servo_ppm_asm>
    5f96:	2f e7       	ldi	r18, 0x7F	; 127
    5f98:	88 e3       	ldi	r24, 0x38	; 56
    5f9a:	91 e0       	ldi	r25, 0x01	; 1
    5f9c:	21 50       	subi	r18, 0x01	; 1
    5f9e:	80 40       	sbci	r24, 0x00	; 0
    5fa0:	90 40       	sbci	r25, 0x00	; 0
    5fa2:	e1 f7       	brne	.-8      	; 0x5f9c <init+0x1ec>
    5fa4:	00 c0       	rjmp	.+0      	; 0x5fa6 <init+0x1f6>
    5fa6:	00 00       	nop
    5fa8:	f1 cf       	rjmp	.-30     	; 0x5f8c <init+0x1dc>
    5faa:	2f e7       	ldi	r18, 0x7F	; 127
    5fac:	8f e4       	ldi	r24, 0x4F	; 79
    5fae:	92 e1       	ldi	r25, 0x12	; 18
    5fb0:	21 50       	subi	r18, 0x01	; 1
    5fb2:	80 40       	sbci	r24, 0x00	; 0
    5fb4:	90 40       	sbci	r25, 0x00	; 0
    5fb6:	e1 f7       	brne	.-8      	; 0x5fb0 <init+0x200>
    5fb8:	00 c0       	rjmp	.+0      	; 0x5fba <init+0x20a>
    5fba:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    5fbc:	93 b1       	in	r25, 0x03	; 3
    5fbe:	90 7f       	andi	r25, 0xF0	; 240
    5fc0:	90 39       	cpi	r25, 0x90	; 144
    5fc2:	51 f5       	brne	.+84     	; 0x6018 <init+0x268>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5fc4:	80 ec       	ldi	r24, 0xC0	; 192
    5fc6:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
		clear_buffer(buffer);
    5fca:	80 e0       	ldi	r24, 0x00	; 0
    5fcc:	91 e0       	ldi	r25, 0x01	; 1
    5fce:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    5fd2:	29 e1       	ldi	r18, 0x19	; 25
    5fd4:	30 e0       	ldi	r19, 0x00	; 0
    5fd6:	48 e2       	ldi	r20, 0x28	; 40
    5fd8:	50 e0       	ldi	r21, 0x00	; 0
    5fda:	69 ee       	ldi	r22, 0xE9	; 233
    5fdc:	73 e0       	ldi	r23, 0x03	; 3
    5fde:	86 e0       	ldi	r24, 0x06	; 6
    5fe0:	91 e0       	ldi	r25, 0x01	; 1
    5fe2:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		write_buffer(buffer);
    5fe6:	80 e0       	ldi	r24, 0x00	; 0
    5fe8:	91 e0       	ldi	r25, 0x01	; 1
    5fea:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
		clear_buffer(buffer);
    5fee:	80 e0       	ldi	r24, 0x00	; 0
    5ff0:	91 e0       	ldi	r25, 0x01	; 1
    5ff2:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    5ff6:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    5ffa:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    5ffe:	80 91 60 06 	lds	r24, 0x0660
    6002:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <st7565_set_brightness>
    6006:	2f e7       	ldi	r18, 0x7F	; 127
    6008:	84 e8       	ldi	r24, 0x84	; 132
    600a:	9e e1       	ldi	r25, 0x1E	; 30
    600c:	21 50       	subi	r18, 0x01	; 1
    600e:	80 40       	sbci	r24, 0x00	; 0
    6010:	90 40       	sbci	r25, 0x00	; 0
    6012:	e1 f7       	brne	.-8      	; 0x600c <init+0x25c>
    6014:	00 c0       	rjmp	.+0      	; 0x6016 <init+0x266>
    6016:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    6018:	cc 23       	and	r28, r28
    601a:	21 f1       	breq	.+72     	; 0x6064 <init+0x2b4>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    601c:	80 ec       	ldi	r24, 0xC0	; 192
    601e:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
		clear_buffer(buffer);
    6022:	80 e0       	ldi	r24, 0x00	; 0
    6024:	91 e0       	ldi	r25, 0x01	; 1
    6026:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    602a:	2d e0       	ldi	r18, 0x0D	; 13
    602c:	30 e0       	ldi	r19, 0x00	; 0
    602e:	4e e1       	ldi	r20, 0x1E	; 30
    6030:	50 e0       	ldi	r21, 0x00	; 0
    6032:	69 ee       	ldi	r22, 0xE9	; 233
    6034:	73 e0       	ldi	r23, 0x03	; 3
    6036:	83 e0       	ldi	r24, 0x03	; 3
    6038:	91 e0       	ldi	r25, 0x01	; 1
    603a:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    603e:	25 e2       	ldi	r18, 0x25	; 37
    6040:	30 e0       	ldi	r19, 0x00	; 0
    6042:	41 e2       	ldi	r20, 0x21	; 33
    6044:	50 e0       	ldi	r21, 0x00	; 0
    6046:	69 ee       	ldi	r22, 0xE9	; 233
    6048:	73 e0       	ldi	r23, 0x03	; 3
    604a:	84 e0       	ldi	r24, 0x04	; 4
    604c:	91 e0       	ldi	r25, 0x01	; 1
    604e:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		write_buffer(buffer);
    6052:	80 e0       	ldi	r24, 0x00	; 0
    6054:	91 e0       	ldi	r25, 0x01	; 1
    6056:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
		clear_buffer(buffer);		
    605a:	80 e0       	ldi	r24, 0x00	; 0
    605c:	91 e0       	ldi	r25, 0x01	; 1
    605e:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
    6062:	04 c0       	rjmp	.+8      	; 0x606c <init+0x2bc>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    6064:	80 e0       	ldi	r24, 0x00	; 0
    6066:	91 e0       	ldi	r25, 0x01	; 1
    6068:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
    606c:	2f ef       	ldi	r18, 0xFF	; 255
    606e:	88 e0       	ldi	r24, 0x08	; 8
    6070:	9d e3       	ldi	r25, 0x3D	; 61
    6072:	21 50       	subi	r18, 0x01	; 1
    6074:	80 40       	sbci	r24, 0x00	; 0
    6076:	90 40       	sbci	r25, 0x00	; 0
    6078:	e1 f7       	brne	.-8      	; 0x6072 <init+0x2c2>
    607a:	00 c0       	rjmp	.+0      	; 0x607c <init+0x2cc>
    607c:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    607e:	80 e0       	ldi	r24, 0x00	; 0
    6080:	91 e0       	ldi	r25, 0x01	; 1
    6082:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
	write_buffer(buffer);
    6086:	80 e0       	ldi	r24, 0x00	; 0
    6088:	91 e0       	ldi	r25, 0x01	; 1
    608a:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    608e:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    6092:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <i2c_init>
	init_i2c_gyros();
    6096:	0e 94 22 2a 	call	0x5444	; 0x5444 <init_i2c_gyros>
	init_i2c_accs();
    609a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    609e:	80 e0       	ldi	r24, 0x00	; 0
    60a0:	91 e0       	ldi	r25, 0x01	; 1
    60a2:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    60a6:	80 ec       	ldi	r24, 0xC0	; 192
    60a8:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    60ac:	29 e1       	ldi	r18, 0x19	; 25
    60ae:	30 e0       	ldi	r19, 0x00	; 0
    60b0:	42 e1       	ldi	r20, 0x12	; 18
    60b2:	50 e0       	ldi	r21, 0x00	; 0
    60b4:	69 ee       	ldi	r22, 0xE9	; 233
    60b6:	73 e0       	ldi	r23, 0x03	; 3
    60b8:	87 e0       	ldi	r24, 0x07	; 7
    60ba:	91 e0       	ldi	r25, 0x01	; 1
    60bc:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
	write_buffer(buffer);	
    60c0:	80 e0       	ldi	r24, 0x00	; 0
    60c2:	91 e0       	ldi	r25, 0x01	; 1
    60c4:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
	clear_buffer(buffer);
    60c8:	80 e0       	ldi	r24, 0x00	; 0
    60ca:	91 e0       	ldi	r25, 0x01	; 1
    60cc:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    60d0:	0e 94 e6 12 	call	0x25cc	; 0x25cc <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    60d4:	0e 94 ac 34 	call	0x6958	; 0x6958 <init_int>
	init_uart();							// Initialise UART
    60d8:	0e 94 3f 4e 	call	0x9c7e	; 0x9c7e <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    60dc:	0e 94 43 29 	call	0x5286	; 0x5286 <CalibrateGyrosSlow>
    60e0:	81 11       	cpse	r24, r1
    60e2:	28 c0       	rjmp	.+80     	; 0x6134 <init+0x384>
	{
		clear_buffer(buffer);
    60e4:	80 e0       	ldi	r24, 0x00	; 0
    60e6:	91 e0       	ldi	r25, 0x01	; 1
    60e8:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    60ec:	29 e1       	ldi	r18, 0x19	; 25
    60ee:	30 e0       	ldi	r19, 0x00	; 0
    60f0:	49 e1       	ldi	r20, 0x19	; 25
    60f2:	50 e0       	ldi	r21, 0x00	; 0
    60f4:	69 ee       	ldi	r22, 0xE9	; 233
    60f6:	73 e0       	ldi	r23, 0x03	; 3
    60f8:	8d e3       	ldi	r24, 0x3D	; 61
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		write_buffer(buffer);
    6100:	80 e0       	ldi	r24, 0x00	; 0
    6102:	91 e0       	ldi	r25, 0x01	; 1
    6104:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
    6108:	2f ef       	ldi	r18, 0xFF	; 255
    610a:	88 e0       	ldi	r24, 0x08	; 8
    610c:	9d e3       	ldi	r25, 0x3D	; 61
    610e:	21 50       	subi	r18, 0x01	; 1
    6110:	80 40       	sbci	r24, 0x00	; 0
    6112:	90 40       	sbci	r25, 0x00	; 0
    6114:	e1 f7       	brne	.-8      	; 0x610e <init+0x35e>
    6116:	00 c0       	rjmp	.+0      	; 0x6118 <init+0x368>
    6118:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    611a:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    611c:	28 e0       	ldi	r18, 0x08	; 8
    611e:	88 e1       	ldi	r24, 0x18	; 24
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	0f b6       	in	r0, 0x3f	; 63
    6124:	f8 94       	cli
    6126:	a8 95       	wdr
    6128:	80 93 60 00 	sts	0x0060, r24
    612c:	0f be       	out	0x3f, r0	; 63
    612e:	20 93 60 00 	sts	0x0060, r18
    6132:	ff cf       	rjmp	.-2      	; 0x6132 <init+0x382>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    6134:	0e 94 aa 4e 	call	0x9d54	; 0x9d54 <GetVbat>
    6138:	90 93 2f 05 	sts	0x052F, r25
    613c:	80 93 2e 05 	sts	0x052E, r24
	UpdateLimits();							// Update travel and trigger limits
    6140:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    6144:	80 91 61 06 	lds	r24, 0x0661
    6148:	81 30       	cpi	r24, 0x01	; 1
    614a:	29 f4       	brne	.+10     	; 0x6156 <init+0x3a6>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    614c:	80 91 20 05 	lds	r24, 0x0520
    6150:	84 60       	ori	r24, 0x04	; 4
    6152:	80 93 20 05 	sts	0x0520, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    6156:	80 91 07 08 	lds	r24, 0x0807
    615a:	88 23       	and	r24, r24
    615c:	69 f0       	breq	.+26     	; 0x6178 <init+0x3c8>
	{
		RxGetChannels();
    615e:	0e 94 d5 4b 	call	0x97aa	; 0x97aa <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    6162:	80 91 82 08 	lds	r24, 0x0882
    6166:	90 91 83 08 	lds	r25, 0x0883
    616a:	c3 97       	sbiw	r24, 0x33	; 51
    616c:	2c f0       	brlt	.+10     	; 0x6178 <init+0x3c8>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    616e:	80 91 20 05 	lds	r24, 0x0520
    6172:	81 60       	ori	r24, 0x01	; 1
    6174:	80 93 20 05 	sts	0x0520, r24
		}
	}

	// Reset IMU
	reset_IMU();
    6178:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    617c:	29 9a       	sbi	0x05, 1	; 5
    617e:	2f e9       	ldi	r18, 0x9F	; 159
    6180:	86 e8       	ldi	r24, 0x86	; 134
    6182:	91 e0       	ldi	r25, 0x01	; 1
    6184:	21 50       	subi	r18, 0x01	; 1
    6186:	80 40       	sbci	r24, 0x00	; 0
    6188:	90 40       	sbci	r25, 0x00	; 0
    618a:	e1 f7       	brne	.-8      	; 0x6184 <init+0x3d4>
    618c:	00 c0       	rjmp	.+0      	; 0x618e <init+0x3de>
    618e:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    6190:	29 98       	cbi	0x05, 1	; 5

#ifdef ERROR_LOG	
	// Log reboot
	add_log(REBOOT);
    6192:	81 e0       	ldi	r24, 0x01	; 1
#endif
} // init()
    6194:	cf 91       	pop	r28
	_delay_ms(25);
	LVA = 0;

#ifdef ERROR_LOG	
	// Log reboot
	add_log(REBOOT);
    6196:	0c 94 86 13 	jmp	0x270c	; 0x270c <add_log>

0000619a <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    619a:	1f 92       	push	r1
    619c:	0f 92       	push	r0
    619e:	0f b6       	in	r0, 0x3f	; 63
    61a0:	0f 92       	push	r0
    61a2:	11 24       	eor	r1, r1
    61a4:	8f 93       	push	r24
    61a6:	9f 93       	push	r25
	TMR0_counter++;
    61a8:	80 91 0a 08 	lds	r24, 0x080A
    61ac:	90 91 0b 08 	lds	r25, 0x080B
    61b0:	01 96       	adiw	r24, 0x01	; 1
    61b2:	90 93 0b 08 	sts	0x080B, r25
    61b6:	80 93 0a 08 	sts	0x080A, r24
}
    61ba:	9f 91       	pop	r25
    61bc:	8f 91       	pop	r24
    61be:	0f 90       	pop	r0
    61c0:	0f be       	out	0x3f, r0	; 63
    61c2:	0f 90       	pop	r0
    61c4:	1f 90       	pop	r1
    61c6:	18 95       	reti

000061c8 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    61c8:	1f 92       	push	r1
    61ca:	0f 92       	push	r0
    61cc:	0f b6       	in	r0, 0x3f	; 63
    61ce:	0f 92       	push	r0
    61d0:	11 24       	eor	r1, r1
    61d2:	2f 93       	push	r18
    61d4:	3f 93       	push	r19
    61d6:	8f 93       	push	r24
    61d8:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    61da:	80 91 21 08 	lds	r24, 0x0821
    61de:	88 23       	and	r24, r24
    61e0:	19 f0       	breq	.+6      	; 0x61e8 <__vector_2+0x20>
    61e2:	81 e0       	ldi	r24, 0x01	; 1
    61e4:	80 93 22 08 	sts	0x0822, r24

	if (RX_ROLL)	// Rising
    61e8:	4b 9b       	sbis	0x09, 3	; 9
    61ea:	09 c0       	rjmp	.+18     	; 0x61fe <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    61ec:	80 91 84 00 	lds	r24, 0x0084
    61f0:	90 91 85 00 	lds	r25, 0x0085
    61f4:	90 93 0f 08 	sts	0x080F, r25
    61f8:	80 93 0e 08 	sts	0x080E, r24
    61fc:	14 c0       	rjmp	.+40     	; 0x6226 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    61fe:	80 91 84 00 	lds	r24, 0x0084
    6202:	90 91 85 00 	lds	r25, 0x0085
    6206:	20 91 0e 08 	lds	r18, 0x080E
    620a:	30 91 0f 08 	lds	r19, 0x080F
    620e:	82 1b       	sub	r24, r18
    6210:	93 0b       	sbc	r25, r19
    6212:	90 93 fa 07 	sts	0x07FA, r25
    6216:	80 93 f9 07 	sts	0x07F9, r24
		if (Config.PWM_Sync == AILERON) 
    621a:	80 91 02 06 	lds	r24, 0x0602
    621e:	81 30       	cpi	r24, 0x01	; 1
    6220:	11 f4       	brne	.+4      	; 0x6226 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    6222:	80 93 07 08 	sts	0x0807, r24
		}
	}
}
    6226:	9f 91       	pop	r25
    6228:	8f 91       	pop	r24
    622a:	3f 91       	pop	r19
    622c:	2f 91       	pop	r18
    622e:	0f 90       	pop	r0
    6230:	0f be       	out	0x3f, r0	; 63
    6232:	0f 90       	pop	r0
    6234:	1f 90       	pop	r1
    6236:	18 95       	reti

00006238 <__vector_1>:

ISR(INT0_vect)
{
    6238:	1f 92       	push	r1
    623a:	0f 92       	push	r0
    623c:	0f b6       	in	r0, 0x3f	; 63
    623e:	0f 92       	push	r0
    6240:	11 24       	eor	r1, r1
    6242:	2f 93       	push	r18
    6244:	3f 93       	push	r19
    6246:	8f 93       	push	r24
    6248:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    624a:	80 91 21 08 	lds	r24, 0x0821
    624e:	88 23       	and	r24, r24
    6250:	19 f0       	breq	.+6      	; 0x6258 <__vector_1+0x20>
    6252:	81 e0       	ldi	r24, 0x01	; 1
    6254:	80 93 22 08 	sts	0x0822, r24

	if (RX_PITCH)	// Rising 
    6258:	4a 9b       	sbis	0x09, 2	; 9
    625a:	09 c0       	rjmp	.+18     	; 0x626e <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    625c:	80 91 84 00 	lds	r24, 0x0084
    6260:	90 91 85 00 	lds	r25, 0x0085
    6264:	90 93 11 08 	sts	0x0811, r25
    6268:	80 93 10 08 	sts	0x0810, r24
    626c:	15 c0       	rjmp	.+42     	; 0x6298 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    626e:	80 91 84 00 	lds	r24, 0x0084
    6272:	90 91 85 00 	lds	r25, 0x0085
    6276:	20 91 10 08 	lds	r18, 0x0810
    627a:	30 91 11 08 	lds	r19, 0x0811
    627e:	82 1b       	sub	r24, r18
    6280:	93 0b       	sbc	r25, r19
    6282:	90 93 fc 07 	sts	0x07FC, r25
    6286:	80 93 fb 07 	sts	0x07FB, r24
		if (Config.PWM_Sync == ELEVATOR) 
    628a:	80 91 02 06 	lds	r24, 0x0602
    628e:	82 30       	cpi	r24, 0x02	; 2
    6290:	19 f4       	brne	.+6      	; 0x6298 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    6292:	81 e0       	ldi	r24, 0x01	; 1
    6294:	80 93 07 08 	sts	0x0807, r24
		}
	}
}
    6298:	9f 91       	pop	r25
    629a:	8f 91       	pop	r24
    629c:	3f 91       	pop	r19
    629e:	2f 91       	pop	r18
    62a0:	0f 90       	pop	r0
    62a2:	0f be       	out	0x3f, r0	; 63
    62a4:	0f 90       	pop	r0
    62a6:	1f 90       	pop	r1
    62a8:	18 95       	reti

000062aa <__vector_7>:

ISR(PCINT3_vect)
{
    62aa:	1f 92       	push	r1
    62ac:	0f 92       	push	r0
    62ae:	0f b6       	in	r0, 0x3f	; 63
    62b0:	0f 92       	push	r0
    62b2:	11 24       	eor	r1, r1
    62b4:	2f 93       	push	r18
    62b6:	3f 93       	push	r19
    62b8:	8f 93       	push	r24
    62ba:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    62bc:	80 91 21 08 	lds	r24, 0x0821
    62c0:	88 23       	and	r24, r24
    62c2:	19 f0       	breq	.+6      	; 0x62ca <__vector_7+0x20>
    62c4:	81 e0       	ldi	r24, 0x01	; 1
    62c6:	80 93 22 08 	sts	0x0822, r24
		
	if (RX_COLL)	// Rising
    62ca:	48 9b       	sbis	0x09, 0	; 9
    62cc:	09 c0       	rjmp	.+18     	; 0x62e0 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    62ce:	80 91 84 00 	lds	r24, 0x0084
    62d2:	90 91 85 00 	lds	r25, 0x0085
    62d6:	90 93 0d 08 	sts	0x080D, r25
    62da:	80 93 0c 08 	sts	0x080C, r24
    62de:	15 c0       	rjmp	.+42     	; 0x630a <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    62e0:	80 91 84 00 	lds	r24, 0x0084
    62e4:	90 91 85 00 	lds	r25, 0x0085
    62e8:	20 91 0c 08 	lds	r18, 0x080C
    62ec:	30 91 0d 08 	lds	r19, 0x080D
    62f0:	82 1b       	sub	r24, r18
    62f2:	93 0b       	sbc	r25, r19
    62f4:	90 93 f8 07 	sts	0x07F8, r25
    62f8:	80 93 f7 07 	sts	0x07F7, r24
		if (Config.PWM_Sync == THROTTLE) 
    62fc:	80 91 02 06 	lds	r24, 0x0602
    6300:	81 11       	cpse	r24, r1
    6302:	03 c0       	rjmp	.+6      	; 0x630a <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    6304:	81 e0       	ldi	r24, 0x01	; 1
    6306:	80 93 07 08 	sts	0x0807, r24
		}
	}
}
    630a:	9f 91       	pop	r25
    630c:	8f 91       	pop	r24
    630e:	3f 91       	pop	r19
    6310:	2f 91       	pop	r18
    6312:	0f 90       	pop	r0
    6314:	0f be       	out	0x3f, r0	; 63
    6316:	0f 90       	pop	r0
    6318:	1f 90       	pop	r1
    631a:	18 95       	reti

0000631c <__vector_5>:


ISR(PCINT1_vect)
{
    631c:	1f 92       	push	r1
    631e:	0f 92       	push	r0
    6320:	0f b6       	in	r0, 0x3f	; 63
    6322:	0f 92       	push	r0
    6324:	11 24       	eor	r1, r1
    6326:	2f 93       	push	r18
    6328:	3f 93       	push	r19
    632a:	8f 93       	push	r24
    632c:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    632e:	80 91 21 08 	lds	r24, 0x0821
    6332:	88 23       	and	r24, r24
    6334:	19 f0       	breq	.+6      	; 0x633c <__vector_5+0x20>
    6336:	81 e0       	ldi	r24, 0x01	; 1
    6338:	80 93 22 08 	sts	0x0822, r24

	if (RX_AUX)	// Rising
    633c:	18 9b       	sbis	0x03, 0	; 3
    633e:	09 c0       	rjmp	.+18     	; 0x6352 <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    6340:	80 91 84 00 	lds	r24, 0x0084
    6344:	90 91 85 00 	lds	r25, 0x0085
    6348:	90 93 15 08 	sts	0x0815, r25
    634c:	80 93 14 08 	sts	0x0814, r24
    6350:	15 c0       	rjmp	.+42     	; 0x637c <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    6352:	80 91 84 00 	lds	r24, 0x0084
    6356:	90 91 85 00 	lds	r25, 0x0085
    635a:	20 91 14 08 	lds	r18, 0x0814
    635e:	30 91 15 08 	lds	r19, 0x0815
    6362:	82 1b       	sub	r24, r18
    6364:	93 0b       	sbc	r25, r19
    6366:	90 93 00 08 	sts	0x0800, r25
    636a:	80 93 ff 07 	sts	0x07FF, r24
		if (Config.PWM_Sync == GEAR) 
    636e:	80 91 02 06 	lds	r24, 0x0602
    6372:	84 30       	cpi	r24, 0x04	; 4
    6374:	19 f4       	brne	.+6      	; 0x637c <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    6376:	81 e0       	ldi	r24, 0x01	; 1
    6378:	80 93 07 08 	sts	0x0807, r24
		}
	}
}
    637c:	9f 91       	pop	r25
    637e:	8f 91       	pop	r24
    6380:	3f 91       	pop	r19
    6382:	2f 91       	pop	r18
    6384:	0f 90       	pop	r0
    6386:	0f be       	out	0x3f, r0	; 63
    6388:	0f 90       	pop	r0
    638a:	1f 90       	pop	r1
    638c:	18 95       	reti

0000638e <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    638e:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    6390:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    6392:	80 91 84 00 	lds	r24, 0x0084
    6396:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    639a:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    639c:	08 95       	ret

0000639e <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    639e:	1f 92       	push	r1
    63a0:	0f 92       	push	r0
    63a2:	0f b6       	in	r0, 0x3f	; 63
    63a4:	0f 92       	push	r0
    63a6:	11 24       	eor	r1, r1
    63a8:	2f 93       	push	r18
    63aa:	3f 93       	push	r19
    63ac:	4f 93       	push	r20
    63ae:	5f 93       	push	r21
    63b0:	6f 93       	push	r22
    63b2:	7f 93       	push	r23
    63b4:	8f 93       	push	r24
    63b6:	9f 93       	push	r25
    63b8:	af 93       	push	r26
    63ba:	bf 93       	push	r27
    63bc:	ef 93       	push	r30
    63be:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    63c0:	80 91 21 08 	lds	r24, 0x0821
    63c4:	88 23       	and	r24, r24
    63c6:	19 f0       	breq	.+6      	; 0x63ce <__vector_3+0x30>
    63c8:	81 e0       	ldi	r24, 0x01	; 1
    63ca:	80 93 22 08 	sts	0x0822, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    63ce:	0e 94 c7 31 	call	0x638e	; 0x638e <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    63d2:	20 91 00 06 	lds	r18, 0x0600
    63d6:	22 23       	and	r18, r18
    63d8:	d1 f0       	breq	.+52     	; 0x640e <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    63da:	1a 9b       	sbis	0x03, 2	; 3
    63dc:	05 c0       	rjmp	.+10     	; 0x63e8 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    63de:	90 93 13 08 	sts	0x0813, r25
    63e2:	80 93 12 08 	sts	0x0812, r24
    63e6:	86 c0       	rjmp	.+268    	; 0x64f4 <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    63e8:	20 91 12 08 	lds	r18, 0x0812
    63ec:	30 91 13 08 	lds	r19, 0x0813
    63f0:	82 1b       	sub	r24, r18
    63f2:	93 0b       	sbc	r25, r19
    63f4:	90 93 fe 07 	sts	0x07FE, r25
    63f8:	80 93 fd 07 	sts	0x07FD, r24
			if (Config.PWM_Sync == RUDDER) 
    63fc:	80 91 02 06 	lds	r24, 0x0602
    6400:	83 30       	cpi	r24, 0x03	; 3
    6402:	09 f0       	breq	.+2      	; 0x6406 <__vector_3+0x68>
    6404:	77 c0       	rjmp	.+238    	; 0x64f4 <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    6406:	81 e0       	ldi	r24, 0x01	; 1
    6408:	80 93 07 08 	sts	0x0807, r24
    640c:	73 c0       	rjmp	.+230    	; 0x64f4 <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    640e:	1a 99       	sbic	0x03, 2	; 3
    6410:	71 c0       	rjmp	.+226    	; 0x64f4 <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    6412:	20 91 1f 08 	lds	r18, 0x081F
    6416:	30 91 20 08 	lds	r19, 0x0820
    641a:	ac 01       	movw	r20, r24
    641c:	42 1b       	sub	r20, r18
    641e:	53 0b       	sbc	r21, r19
    6420:	9a 01       	movw	r18, r20
    6422:	2f 35       	cpi	r18, 0x5F	; 95
    6424:	3a 41       	sbci	r19, 0x1A	; 26
    6426:	58 f4       	brcc	.+22     	; 0x643e <__vector_3+0xa0>
    6428:	20 91 1f 08 	lds	r18, 0x081F
    642c:	30 91 20 08 	lds	r19, 0x0820
    6430:	ac 01       	movw	r20, r24
    6432:	42 1b       	sub	r20, r18
    6434:	53 0b       	sbc	r21, r19
    6436:	9a 01       	movw	r18, r20
    6438:	2e 3e       	cpi	r18, 0xEE	; 238
    643a:	32 40       	sbci	r19, 0x02	; 2
    643c:	10 f4       	brcc	.+4      	; 0x6442 <__vector_3+0xa4>
		{
			ch_num = 0;
    643e:	10 92 1e 08 	sts	0x081E, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    6442:	90 93 20 08 	sts	0x0820, r25
    6446:	80 93 1f 08 	sts	0x081F, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    644a:	e0 91 1e 08 	lds	r30, 0x081E
    644e:	f0 e0       	ldi	r31, 0x00	; 0
    6450:	e9 52       	subi	r30, 0x29	; 41
    6452:	fa 4f       	sbci	r31, 0xFA	; 250
    6454:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    6456:	20 91 1e 08 	lds	r18, 0x081E
    645a:	22 23       	and	r18, r18
    645c:	39 f0       	breq	.+14     	; 0x646c <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    645e:	a0 91 1e 08 	lds	r26, 0x081E
    6462:	b0 e0       	ldi	r27, 0x00	; 0
    6464:	a9 52       	subi	r26, 0x29	; 41
    6466:	ba 4f       	sbci	r27, 0xFA	; 250
    6468:	2c 91       	ld	r18, X
    646a:	01 c0       	rjmp	.+2      	; 0x646e <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    646c:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    646e:	30 91 1e 08 	lds	r19, 0x081E
    6472:	38 30       	cpi	r19, 0x08	; 8
    6474:	38 f4       	brcc	.+14     	; 0x6484 <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    6476:	f0 e0       	ldi	r31, 0x00	; 0
    6478:	ee 0f       	add	r30, r30
    647a:	ff 1f       	adc	r31, r31
    647c:	e4 5f       	subi	r30, 0xF4	; 244
    647e:	f7 4f       	sbci	r31, 0xF7	; 247
    6480:	91 83       	std	Z+1, r25	; 0x01
    6482:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    6484:	30 91 1e 08 	lds	r19, 0x081E
    6488:	33 23       	and	r19, r19
    648a:	99 f0       	breq	.+38     	; 0x64b2 <__vector_3+0x114>
    648c:	30 91 1e 08 	lds	r19, 0x081E
    6490:	39 30       	cpi	r19, 0x09	; 9
    6492:	78 f4       	brcc	.+30     	; 0x64b2 <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    6494:	30 e0       	ldi	r19, 0x00	; 0
    6496:	22 0f       	add	r18, r18
    6498:	33 1f       	adc	r19, r19
    649a:	f9 01       	movw	r30, r18
    649c:	e4 5f       	subi	r30, 0xF4	; 244
    649e:	f7 4f       	sbci	r31, 0xF7	; 247
    64a0:	40 81       	ld	r20, Z
    64a2:	51 81       	ldd	r21, Z+1	; 0x01
    64a4:	84 1b       	sub	r24, r20
    64a6:	95 0b       	sbc	r25, r21
    64a8:	f9 01       	movw	r30, r18
    64aa:	e9 50       	subi	r30, 0x09	; 9
    64ac:	f8 4f       	sbci	r31, 0xF8	; 248
    64ae:	91 83       	std	Z+1, r25	; 0x01
    64b0:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    64b2:	80 91 1e 08 	lds	r24, 0x081E
    64b6:	8f 5f       	subi	r24, 0xFF	; 255
    64b8:	80 93 1e 08 	sts	0x081E, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    64bc:	90 91 1e 08 	lds	r25, 0x081E
    64c0:	80 91 08 08 	lds	r24, 0x0808
    64c4:	89 17       	cp	r24, r25
    64c6:	28 f4       	brcc	.+10     	; 0x64d2 <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    64c8:	80 91 1e 08 	lds	r24, 0x081E
    64cc:	80 93 08 08 	sts	0x0808, r24
    64d0:	09 c0       	rjmp	.+18     	; 0x64e4 <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    64d2:	90 91 1e 08 	lds	r25, 0x081E
    64d6:	80 91 08 08 	lds	r24, 0x0808
    64da:	98 13       	cpse	r25, r24
    64dc:	03 c0       	rjmp	.+6      	; 0x64e4 <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    64de:	81 e0       	ldi	r24, 0x01	; 1
    64e0:	80 93 07 08 	sts	0x0807, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    64e4:	80 91 19 05 	lds	r24, 0x0519
    64e8:	88 23       	and	r24, r24
    64ea:	21 f0       	breq	.+8      	; 0x64f4 <__vector_3+0x156>
		{
			max_chan = 0;
    64ec:	10 92 08 08 	sts	0x0808, r1
			Overdue = false;
    64f0:	10 92 19 05 	sts	0x0519, r1
		}
	}
} // ISR(INT2_vect)
    64f4:	ff 91       	pop	r31
    64f6:	ef 91       	pop	r30
    64f8:	bf 91       	pop	r27
    64fa:	af 91       	pop	r26
    64fc:	9f 91       	pop	r25
    64fe:	8f 91       	pop	r24
    6500:	7f 91       	pop	r23
    6502:	6f 91       	pop	r22
    6504:	5f 91       	pop	r21
    6506:	4f 91       	pop	r20
    6508:	3f 91       	pop	r19
    650a:	2f 91       	pop	r18
    650c:	0f 90       	pop	r0
    650e:	0f be       	out	0x3f, r0	; 63
    6510:	0f 90       	pop	r0
    6512:	1f 90       	pop	r1
    6514:	18 95       	reti

00006516 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    6516:	1f 92       	push	r1
    6518:	0f 92       	push	r0
    651a:	0f b6       	in	r0, 0x3f	; 63
    651c:	0f 92       	push	r0
    651e:	11 24       	eor	r1, r1
    6520:	2f 93       	push	r18
    6522:	3f 93       	push	r19
    6524:	4f 93       	push	r20
    6526:	5f 93       	push	r21
    6528:	6f 93       	push	r22
    652a:	7f 93       	push	r23
    652c:	8f 93       	push	r24
    652e:	9f 93       	push	r25
    6530:	af 93       	push	r26
    6532:	bf 93       	push	r27
    6534:	cf 93       	push	r28
    6536:	ef 93       	push	r30
    6538:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    653a:	80 91 21 08 	lds	r24, 0x0821
    653e:	88 23       	and	r24, r24
    6540:	19 f0       	breq	.+6      	; 0x6548 <__vector_20+0x32>
    6542:	81 e0       	ldi	r24, 0x01	; 1
    6544:	80 93 22 08 	sts	0x0822, r24

	// Read error flags first
	temp =  UCSR0A;
    6548:	80 91 c0 00 	lds	r24, 0x00C0

	// Check Framing error, Parity error bits
	if (temp & ((1<<FE0)|(1<<UPE0)))
    654c:	98 2f       	mov	r25, r24
    654e:	94 71       	andi	r25, 0x14	; 20
    6550:	21 f4       	brne	.+8      	; 0x655a <__vector_20+0x44>
		// Read byte to remove from buffer
		temp = UDR0;
	}

	// Check all for Data overrun
	else if (temp & (1<<DOR0))
    6552:	83 ff       	sbrs	r24, 3
    6554:	05 c0       	rjmp	.+10     	; 0x6560 <__vector_20+0x4a>
	{
		// Read byte to remove from buffer
		temp = UDR0;
    6556:	80 91 c6 00 	lds	r24, 0x00C6
		// Read byte to remove from buffer
		temp = UDR0;
    655a:	80 91 c6 00 	lds	r24, 0x00C6
    655e:	d7 c1       	rjmp	.+942    	; 0x690e <__vector_20+0x3f8>

	// Valid data
	else
	{
		// Read byte first
		temp = UDR0;
    6560:	c0 91 c6 00 	lds	r28, 0x00C6

		// Save current time stamp
		Save_TCNT1 = TIM16_ReadTCNT1();
    6564:	0e 94 c7 31 	call	0x638e	; 0x638e <TIM16_ReadTCNT1>
	
		// Work out frame rate properly
		// Note that CurrentPeriod cannot be larger than 26.2ms
	
		//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
		if (Save_TCNT1 < PPMSyncStart)
    6568:	40 91 1f 08 	lds	r20, 0x081F
    656c:	50 91 20 08 	lds	r21, 0x0820
		{
			CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
		}
		else
		{
			CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    6570:	40 91 1f 08 	lds	r20, 0x081F
    6574:	50 91 20 08 	lds	r21, 0x0820
    6578:	9c 01       	movw	r18, r24
    657a:	24 1b       	sub	r18, r20
    657c:	35 0b       	sbc	r19, r21
    657e:	a9 01       	movw	r20, r18
		}

		// Handle start of new packet
		if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    6580:	45 3c       	cpi	r20, 0xC5	; 197
    6582:	39 e0       	ldi	r19, 0x09	; 9
    6584:	53 07       	cpc	r21, r19
    6586:	90 f0       	brcs	.+36     	; 0x65ac <__vector_20+0x96>
		{
			// Reset variables
			rcindex = 0;
    6588:	10 92 f6 07 	sts	0x07F6, r1
			bytecount = 0;
    658c:	10 92 09 08 	sts	0x0809, r1
			ch_num = 0;
    6590:	10 92 1e 08 	sts	0x081E, r1
			checksum = 0;
    6594:	10 92 24 08 	sts	0x0824, r1
    6598:	10 92 23 08 	sts	0x0823, r1
			chanmask16 = 0;
    659c:	10 92 1d 08 	sts	0x081D, r1
    65a0:	10 92 1c 08 	sts	0x081C, r1

			// Save frame rate to global
			FrameRate = CurrentPeriod;
    65a4:	50 93 26 08 	sts	0x0826, r21
    65a8:	40 93 25 08 	sts	0x0825, r20
		}

		// Timestamp this interrupt
		PPMSyncStart = Save_TCNT1;
    65ac:	90 93 20 08 	sts	0x0820, r25
    65b0:	80 93 1f 08 	sts	0x081F, r24
	
		// Put received byte in buffer if space available
		if (rcindex < SBUFFER_SIZE)
    65b4:	80 91 f6 07 	lds	r24, 0x07F6
    65b8:	86 32       	cpi	r24, 0x26	; 38
    65ba:	50 f4       	brcc	.+20     	; 0x65d0 <__vector_20+0xba>
		{
			sBuffer[rcindex++] = temp;			
    65bc:	e0 91 f6 07 	lds	r30, 0x07F6
    65c0:	81 e0       	ldi	r24, 0x01	; 1
    65c2:	8e 0f       	add	r24, r30
    65c4:	80 93 f6 07 	sts	0x07F6, r24
    65c8:	f0 e0       	ldi	r31, 0x00	; 0
    65ca:	ec 5a       	subi	r30, 0xAC	; 172
    65cc:	fa 4f       	sbci	r31, 0xFA	; 250
    65ce:	c0 83       	st	Z, r28
		//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
		//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
		//*
		//************************************************************

		if (Config.RxMode == XTREME)
    65d0:	80 91 00 06 	lds	r24, 0x0600
    65d4:	84 30       	cpi	r24, 0x04	; 4
    65d6:	09 f0       	breq	.+2      	; 0x65da <__vector_20+0xc4>
    65d8:	b3 c0       	rjmp	.+358    	; 0x6740 <__vector_20+0x22a>
		{
			// Look at flag byte to see if the data is meant for us
			if (bytecount == 0)
    65da:	80 91 09 08 	lds	r24, 0x0809
    65de:	81 11       	cpse	r24, r1
    65e0:	0d c0       	rjmp	.+26     	; 0x65fc <__vector_20+0xe6>
			{
				// Check top 3 bits for channel bank
				// Trash checksum if not clear
				if (temp & 0xE0)
    65e2:	8c 2f       	mov	r24, r28
    65e4:	80 7e       	andi	r24, 0xE0	; 224
    65e6:	51 f0       	breq	.+20     	; 0x65fc <__vector_20+0xe6>
				{
					checksum +=	0x55;
    65e8:	80 91 23 08 	lds	r24, 0x0823
    65ec:	90 91 24 08 	lds	r25, 0x0824
    65f0:	8b 5a       	subi	r24, 0xAB	; 171
    65f2:	9f 4f       	sbci	r25, 0xFF	; 255
    65f4:	90 93 24 08 	sts	0x0824, r25
    65f8:	80 93 23 08 	sts	0x0823, r24
				}
			}

			// Get MSB of mask byte
			if (bytecount == 2)
    65fc:	80 91 09 08 	lds	r24, 0x0809
    6600:	2c 2f       	mov	r18, r28
    6602:	30 e0       	ldi	r19, 0x00	; 0
    6604:	82 30       	cpi	r24, 0x02	; 2
    6606:	51 f4       	brne	.+20     	; 0x661c <__vector_20+0x106>
			{
				chanmask16 = 0;
    6608:	10 92 1d 08 	sts	0x081D, r1
    660c:	10 92 1c 08 	sts	0x081C, r1
				chanmask16 = temp << 8;		// High byte of Mask
    6610:	92 2f       	mov	r25, r18
    6612:	88 27       	eor	r24, r24
    6614:	90 93 1d 08 	sts	0x081D, r25
    6618:	80 93 1c 08 	sts	0x081C, r24
			}

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
    661c:	80 91 09 08 	lds	r24, 0x0809
    6620:	83 30       	cpi	r24, 0x03	; 3
    6622:	b9 f0       	breq	.+46     	; 0x6652 <__vector_20+0x13c>
					temp16 &= temp16 - 1;
				}
			}

			// Add up checksum up until final packet
			if (bytecount < ((ch_num << 1) + 4))
    6624:	80 91 1e 08 	lds	r24, 0x081E
    6628:	40 91 09 08 	lds	r20, 0x0809
    662c:	90 e0       	ldi	r25, 0x00	; 0
    662e:	88 0f       	add	r24, r24
    6630:	99 1f       	adc	r25, r25
    6632:	03 96       	adiw	r24, 0x03	; 3
    6634:	50 e0       	ldi	r21, 0x00	; 0
    6636:	84 17       	cp	r24, r20
    6638:	95 07       	cpc	r25, r21
    663a:	44 f1       	brlt	.+80     	; 0x668c <__vector_20+0x176>
			{
				checksum +=	temp;
    663c:	80 91 23 08 	lds	r24, 0x0823
    6640:	90 91 24 08 	lds	r25, 0x0824
    6644:	82 0f       	add	r24, r18
    6646:	93 1f       	adc	r25, r19
    6648:	90 93 24 08 	sts	0x0824, r25
    664c:	80 93 23 08 	sts	0x0823, r24
    6650:	59 c1       	rjmp	.+690    	; 0x6904 <__vector_20+0x3ee>

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
			{
				chanmask16 += (uint16_t)temp;	// Low byte of Mask
    6652:	80 91 1c 08 	lds	r24, 0x081C
    6656:	90 91 1d 08 	lds	r25, 0x081D
    665a:	82 0f       	add	r24, r18
    665c:	93 1f       	adc	r25, r19
    665e:	90 93 1d 08 	sts	0x081D, r25
    6662:	80 93 1c 08 	sts	0x081C, r24
				temp16 = chanmask16;			// Need to keep a copy od chanmask16
    6666:	80 91 1c 08 	lds	r24, 0x081C
    666a:	90 91 1d 08 	lds	r25, 0x081D

				// Count bits set (number of active channels)				 
				for (ch_num = 0; temp16; ch_num++)
    666e:	10 92 1e 08 	sts	0x081E, r1
    6672:	00 97       	sbiw	r24, 0x00	; 0
    6674:	b9 f2       	breq	.-82     	; 0x6624 <__vector_20+0x10e>
				{
					temp16 &= temp16 - 1;
    6676:	ac 01       	movw	r20, r24
    6678:	41 50       	subi	r20, 0x01	; 1
    667a:	51 09       	sbc	r21, r1
    667c:	84 23       	and	r24, r20
    667e:	95 23       	and	r25, r21
			{
				chanmask16 += (uint16_t)temp;	// Low byte of Mask
				temp16 = chanmask16;			// Need to keep a copy od chanmask16

				// Count bits set (number of active channels)				 
				for (ch_num = 0; temp16; ch_num++)
    6680:	40 91 1e 08 	lds	r20, 0x081E
    6684:	4f 5f       	subi	r20, 0xFF	; 255
    6686:	40 93 1e 08 	sts	0x081E, r20
    668a:	f3 cf       	rjmp	.-26     	; 0x6672 <__vector_20+0x15c>
	
			// Process data when all packets received
			else
			{
				// Check checksum 
				checksum &= 0xff;
    668c:	80 91 23 08 	lds	r24, 0x0823
    6690:	90 91 24 08 	lds	r25, 0x0824
    6694:	99 27       	eor	r25, r25
    6696:	90 93 24 08 	sts	0x0824, r25
    669a:	80 93 23 08 	sts	0x0823, r24

				// Ignore packet if checksum wrong
				if (checksum != temp) // temp holds the transmitted checksum byte
    669e:	80 91 23 08 	lds	r24, 0x0823
    66a2:	90 91 24 08 	lds	r25, 0x0824
    66a6:	82 17       	cp	r24, r18
    66a8:	93 07       	cpc	r25, r19
    66aa:	49 f0       	breq	.+18     	; 0x66be <__vector_20+0x1a8>
				{
					Interrupted = false;
    66ac:	10 92 07 08 	sts	0x0807, r1
					ch_num = 0;
    66b0:	10 92 1e 08 	sts	0x081E, r1
					checksum = 0;
    66b4:	10 92 24 08 	sts	0x0824, r1
    66b8:	10 92 23 08 	sts	0x0823, r1
    66bc:	23 c1       	rjmp	.+582    	; 0x6904 <__vector_20+0x3ee>
				}
				else
				{
					// RC sync established
					Interrupted = true;	
    66be:	81 e0       	ldi	r24, 0x01	; 1
    66c0:	80 93 07 08 	sts	0x0807, r24
    66c4:	80 e0       	ldi	r24, 0x00	; 0
    66c6:	90 e0       	ldi	r25, 0x00	; 0

					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5
    66c8:	a4 e0       	ldi	r26, 0x04	; 4
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    66ca:	61 e0       	ldi	r22, 0x01	; 1
    66cc:	70 e0       	ldi	r23, 0x00	; 0
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    66ce:	ba e0       	ldi	r27, 0x0A	; 10
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    66d0:	40 91 1c 08 	lds	r20, 0x081C
    66d4:	50 91 1d 08 	lds	r21, 0x081D
    66d8:	9b 01       	movw	r18, r22
    66da:	08 2e       	mov	r0, r24
    66dc:	02 c0       	rjmp	.+4      	; 0x66e2 <__vector_20+0x1cc>
    66de:	22 0f       	add	r18, r18
    66e0:	33 1f       	adc	r19, r19
    66e2:	0a 94       	dec	r0
    66e4:	e2 f7       	brpl	.-8      	; 0x66de <__vector_20+0x1c8>
    66e6:	24 23       	and	r18, r20
    66e8:	35 23       	and	r19, r21
    66ea:	23 2b       	or	r18, r19
    66ec:	21 f1       	breq	.+72     	; 0x6736 <__vector_20+0x220>
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    66ee:	ea 2f       	mov	r30, r26
    66f0:	f0 e0       	ldi	r31, 0x00	; 0
    66f2:	ec 5a       	subi	r30, 0xAC	; 172
    66f4:	fa 4f       	sbci	r31, 0xFA	; 250
    66f6:	40 81       	ld	r20, Z
    66f8:	21 81       	ldd	r18, Z+1	; 0x01

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
    66fa:	88 30       	cpi	r24, 0x08	; 8
    66fc:	c8 f4       	brcc	.+50     	; 0x6730 <__vector_20+0x21a>
    66fe:	fc 01       	movw	r30, r24
    6700:	e9 52       	subi	r30, 0x29	; 41
    6702:	fa 4f       	sbci	r31, 0xFA	; 250
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    6704:	e1 81       	ldd	r30, Z+1	; 0x01
    6706:	f0 e0       	ldi	r31, 0x00	; 0
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    6708:	50 e0       	ldi	r21, 0x00	; 0
    670a:	54 2f       	mov	r21, r20
    670c:	44 27       	eor	r20, r20
    670e:	42 0f       	add	r20, r18
    6710:	51 1d       	adc	r21, r1

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    6712:	b4 9f       	mul	r27, r20
    6714:	90 01       	movw	r18, r0
    6716:	b5 9f       	mul	r27, r21
    6718:	30 0d       	add	r19, r0
    671a:	11 24       	eor	r1, r1
    671c:	36 95       	lsr	r19
    671e:	27 95       	ror	r18
    6720:	36 95       	lsr	r19
    6722:	27 95       	ror	r18
    6724:	ee 0f       	add	r30, r30
    6726:	ff 1f       	adc	r31, r31
    6728:	e9 50       	subi	r30, 0x09	; 9
    672a:	f8 4f       	sbci	r31, 0xF8	; 248
    672c:	31 83       	std	Z+1, r19	; 0x01
    672e:	20 83       	st	Z, r18
							} 		

							// Within the bounds of the buffer
							if (sindex < SBUFFER_SIZE)
    6730:	a6 32       	cpi	r26, 0x26	; 38
    6732:	08 f4       	brcc	.+2      	; 0x6736 <__vector_20+0x220>
							{
								sindex += 2;
    6734:	ae 5f       	subi	r26, 0xFE	; 254
    6736:	01 96       	adiw	r24, 0x01	; 1
					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5

					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
    6738:	80 31       	cpi	r24, 0x10	; 16
    673a:	91 05       	cpc	r25, r1
    673c:	49 f6       	brne	.-110    	; 0x66d0 <__vector_20+0x1ba>
    673e:	e2 c0       	rjmp	.+452    	; 0x6904 <__vector_20+0x3ee>
		//* 1824	= 2020us
		//* 2047 	= 2160us
		//*
		//************************************************************

		if (Config.RxMode == SBUS)
    6740:	82 30       	cpi	r24, 0x02	; 2
    6742:	09 f0       	breq	.+2      	; 0x6746 <__vector_20+0x230>
    6744:	6b c0       	rjmp	.+214    	; 0x681c <__vector_20+0x306>
		{
			// Flag that packet has completed
			// End bytes can be 00, 04, 14, 24, 34 and possibly 08 for FASSTest 12-channel
			//if ((bytecount == 24) && ((temp == 0x00) || (temp == 0x04) || (temp == 0x14) || (temp == 0x24) || (temp == 0x34) || (temp == 0x08)))
			if (bytecount == 24)
    6746:	80 91 09 08 	lds	r24, 0x0809
    674a:	88 31       	cpi	r24, 0x18	; 24
    674c:	09 f0       	breq	.+2      	; 0x6750 <__vector_20+0x23a>
    674e:	da c0       	rjmp	.+436    	; 0x6904 <__vector_20+0x3ee>
			{
				// If frame lost, ignore packet
				if ((sBuffer[23] & 0x20) == 0)
    6750:	80 91 6b 05 	lds	r24, 0x056B
    6754:	85 fd       	sbrc	r24, 5
    6756:	d6 c0       	rjmp	.+428    	; 0x6904 <__vector_20+0x3ee>
				{
					// RC sync established
					Interrupted = true;
    6758:	81 e0       	ldi	r24, 0x01	; 1
    675a:	80 93 07 08 	sts	0x0807, r24
    675e:	80 e0       	ldi	r24, 0x00	; 0
    6760:	90 e0       	ldi	r25, 0x00	; 0

					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						RxChannel[j] = 0;
    6762:	fc 01       	movw	r30, r24
    6764:	ee 0f       	add	r30, r30
    6766:	ff 1f       	adc	r31, r31
    6768:	e9 50       	subi	r30, 0x09	; 9
    676a:	f8 4f       	sbci	r31, 0xF8	; 248
    676c:	11 82       	std	Z+1, r1	; 0x01
    676e:	10 82       	st	Z, r1
    6770:	01 96       	adiw	r24, 0x01	; 1
				{
					// RC sync established
					Interrupted = true;

					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    6772:	88 30       	cpi	r24, 0x08	; 8
    6774:	91 05       	cpc	r25, r1
    6776:	a9 f7       	brne	.-22     	; 0x6762 <__vector_20+0x24c>
    6778:	a8 e5       	ldi	r26, 0x58	; 88
    677a:	70 e0       	ldi	r23, 0x00	; 0
    677c:	c0 e0       	ldi	r28, 0x00	; 0
    677e:	60 e0       	ldi	r22, 0x00	; 0
    6780:	b1 e0       	ldi	r27, 0x01	; 1
					for (j = 0; j < 88; j++)
					{
						if (sBuffer[sindex] & (1<<chan_mask))
						{
							// Place the RC data into the correct channel order for the transmitted system
							RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    6782:	21 e0       	ldi	r18, 0x01	; 1
    6784:	30 e0       	ldi	r19, 0x00	; 0

					// Deconstruct S-Bus data
					// 8 channels * 11 bits = 88 bits
					for (j = 0; j < 88; j++)
					{
						if (sBuffer[sindex] & (1<<chan_mask))
    6786:	eb 2f       	mov	r30, r27
    6788:	f0 e0       	ldi	r31, 0x00	; 0
    678a:	ec 5a       	subi	r30, 0xAC	; 172
    678c:	fa 4f       	sbci	r31, 0xFA	; 250
    678e:	80 81       	ld	r24, Z
    6790:	90 e0       	ldi	r25, 0x00	; 0
    6792:	06 2e       	mov	r0, r22
    6794:	02 c0       	rjmp	.+4      	; 0x679a <__vector_20+0x284>
    6796:	95 95       	asr	r25
    6798:	87 95       	ror	r24
    679a:	0a 94       	dec	r0
    679c:	e2 f7       	brpl	.-8      	; 0x6796 <__vector_20+0x280>
    679e:	80 ff       	sbrs	r24, 0
    67a0:	17 c0       	rjmp	.+46     	; 0x67d0 <__vector_20+0x2ba>
						{
							// Place the RC data into the correct channel order for the transmitted system
							RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    67a2:	ec 2f       	mov	r30, r28
    67a4:	f0 e0       	ldi	r31, 0x00	; 0
    67a6:	e9 52       	subi	r30, 0x29	; 41
    67a8:	fa 4f       	sbci	r31, 0xFA	; 250
    67aa:	e1 81       	ldd	r30, Z+1	; 0x01
    67ac:	f0 e0       	ldi	r31, 0x00	; 0
    67ae:	ee 0f       	add	r30, r30
    67b0:	ff 1f       	adc	r31, r31
    67b2:	e9 50       	subi	r30, 0x09	; 9
    67b4:	f8 4f       	sbci	r31, 0xF8	; 248
    67b6:	80 81       	ld	r24, Z
    67b8:	91 81       	ldd	r25, Z+1	; 0x01
    67ba:	a9 01       	movw	r20, r18
    67bc:	07 2e       	mov	r0, r23
    67be:	02 c0       	rjmp	.+4      	; 0x67c4 <__vector_20+0x2ae>
    67c0:	44 0f       	add	r20, r20
    67c2:	55 1f       	adc	r21, r21
    67c4:	0a 94       	dec	r0
    67c6:	e2 f7       	brpl	.-8      	; 0x67c0 <__vector_20+0x2aa>
    67c8:	84 2b       	or	r24, r20
    67ca:	95 2b       	or	r25, r21
    67cc:	91 83       	std	Z+1, r25	; 0x01
    67ce:	80 83       	st	Z, r24
						}

						chan_mask++;
    67d0:	6f 5f       	subi	r22, 0xFF	; 255
						data_mask++;
    67d2:	7f 5f       	subi	r23, 0xFF	; 255

						// If we have done 8 bits, move to next byte in buffer
						if (chan_mask == 8)
    67d4:	68 30       	cpi	r22, 0x08	; 8
    67d6:	11 f4       	brne	.+4      	; 0x67dc <__vector_20+0x2c6>
						{
							chan_mask =0;
							sindex++;
    67d8:	bf 5f       	subi	r27, 0xFF	; 255
						data_mask++;

						// If we have done 8 bits, move to next byte in buffer
						if (chan_mask == 8)
						{
							chan_mask =0;
    67da:	60 e0       	ldi	r22, 0x00	; 0
							sindex++;
						}

						// If we have reconstructed all 11 bits of one channel's data (2047)
						// increment the channel number
						if (data_mask == 11)
    67dc:	7b 30       	cpi	r23, 0x0B	; 11
    67de:	11 f4       	brne	.+4      	; 0x67e4 <__vector_20+0x2ce>
						{
							data_mask =0;
							chan_shift++;
    67e0:	cf 5f       	subi	r28, 0xFF	; 255

						// If we have reconstructed all 11 bits of one channel's data (2047)
						// increment the channel number
						if (data_mask == 11)
						{
							data_mask =0;
    67e2:	70 e0       	ldi	r23, 0x00	; 0
    67e4:	a1 50       	subi	r26, 0x01	; 1
					// Start from second byte
					sindex = 1;

					// Deconstruct S-Bus data
					// 8 channels * 11 bits = 88 bits
					for (j = 0; j < 88; j++)
    67e6:	79 f6       	brne	.-98     	; 0x6786 <__vector_20+0x270>
    67e8:	80 e0       	ldi	r24, 0x00	; 0
    67ea:	90 e0       	ldi	r25, 0x00	; 0

					// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Subtract Futaba offset
						itemp16 = RxChannel[j] - 1024;
    67ec:	fc 01       	movw	r30, r24
    67ee:	ee 0f       	add	r30, r30
    67f0:	ff 1f       	adc	r31, r31
    67f2:	e9 50       	subi	r30, 0x09	; 9
    67f4:	f8 4f       	sbci	r31, 0xF8	; 248
    67f6:	40 81       	ld	r20, Z
    67f8:	51 81       	ldd	r21, Z+1	; 0x01
    67fa:	54 50       	subi	r21, 0x04	; 4
						
						// Expand into OpenAero2 units x1.25 (1.25)	(1000/800)
						itemp16 = itemp16 + (itemp16 >> 2);
    67fc:	9a 01       	movw	r18, r20
    67fe:	35 95       	asr	r19
    6800:	27 95       	ror	r18
    6802:	35 95       	asr	r19
    6804:	27 95       	ror	r18
    6806:	24 0f       	add	r18, r20
    6808:	35 1f       	adc	r19, r21

						// Add back in OpenAero2 offset
						RxChannel[j] = itemp16 + 3750;		
    680a:	2a 55       	subi	r18, 0x5A	; 90
    680c:	31 4f       	sbci	r19, 0xF1	; 241
    680e:	31 83       	std	Z+1, r19	; 0x01
    6810:	20 83       	st	Z, r18
    6812:	01 96       	adiw	r24, 0x01	; 1
							chan_shift++;
						}
					}

					// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    6814:	88 30       	cpi	r24, 0x08	; 8
    6816:	91 05       	cpc	r25, r1
    6818:	49 f7       	brne	.-46     	; 0x67ec <__vector_20+0x2d6>
    681a:	74 c0       	rjmp	.+232    	; 0x6904 <__vector_20+0x3ee>
		//* 2047 	= 2100us
		//*
		//************************************************************

		// Handle Spektrum format
		if (Config.RxMode == SPEKTRUM)
    681c:	83 30       	cpi	r24, 0x03	; 3
    681e:	09 f0       	breq	.+2      	; 0x6822 <__vector_20+0x30c>
    6820:	71 c0       	rjmp	.+226    	; 0x6904 <__vector_20+0x3ee>
		{
			// Process data when all packets received
			if (bytecount == 15)
    6822:	80 91 09 08 	lds	r24, 0x0809
    6826:	8f 30       	cpi	r24, 0x0F	; 15
    6828:	09 f0       	breq	.+2      	; 0x682c <__vector_20+0x316>
    682a:	6c c0       	rjmp	.+216    	; 0x6904 <__vector_20+0x3ee>
			{
				// Just stick the last byte into the buffer manually...(hides)
				sBuffer[15] = temp;
    682c:	c0 93 63 05 	sts	0x0563, r28

				// Set start of channel data per format
				sindex = 2; // Channel data from byte 3

				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    6830:	80 91 55 05 	lds	r24, 0x0555
    6834:	84 ff       	sbrs	r24, 4
    6836:	04 c0       	rjmp	.+8      	; 0x6840 <__vector_20+0x32a>
				{
					chan_mask = 0x78;	// 11 bit (2048)
					data_mask = 0x07;
    6838:	c7 e0       	ldi	r28, 0x07	; 7
					chan_shift = 0x03;
    683a:	63 e0       	ldi	r22, 0x03	; 3
				sindex = 2; // Channel data from byte 3

				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
				{
					chan_mask = 0x78;	// 11 bit (2048)
    683c:	78 e7       	ldi	r23, 0x78	; 120
    683e:	03 c0       	rjmp	.+6      	; 0x6846 <__vector_20+0x330>
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
					data_mask = 0x03;
    6840:	c3 e0       	ldi	r28, 0x03	; 3
					chan_shift = 0x02;
    6842:	62 e0       	ldi	r22, 0x02	; 2
					data_mask = 0x07;
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
    6844:	7c e3       	ldi	r23, 0x3C	; 60
    6846:	e7 e5       	ldi	r30, 0x57	; 87
    6848:	f5 e0       	ldi	r31, 0x05	; 5
    684a:	df 01       	movw	r26, r30
    684c:	11 97       	sbiw	r26, 0x01	; 1
				// Work out which channel the data is intended for from the channel number data
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    684e:	2c 91       	ld	r18, X
    6850:	82 2f       	mov	r24, r18
    6852:	87 23       	and	r24, r23
    6854:	90 e0       	ldi	r25, 0x00	; 0
    6856:	06 2e       	mov	r0, r22
    6858:	02 c0       	rjmp	.+4      	; 0x685e <__vector_20+0x348>
    685a:	95 95       	asr	r25
    685c:	87 95       	ror	r24
    685e:	0a 94       	dec	r0
    6860:	e2 f7       	brpl	.-8      	; 0x685a <__vector_20+0x344>
    6862:	80 93 1e 08 	sts	0x081E, r24

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    6866:	80 81       	ld	r24, Z

					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16
					if (ch_num < MAX_RC_CHANNELS)
    6868:	90 91 1e 08 	lds	r25, 0x081E
    686c:	98 30       	cpi	r25, 0x08	; 8
    686e:	08 f0       	brcs	.+2      	; 0x6872 <__vector_20+0x35c>
    6870:	40 c0       	rjmp	.+128    	; 0x68f2 <__vector_20+0x3dc>
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    6872:	2c 23       	and	r18, r28
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	32 2f       	mov	r19, r18
    6878:	22 27       	eor	r18, r18
    687a:	28 0f       	add	r18, r24
    687c:	31 1d       	adc	r19, r1
					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16
					if (ch_num < MAX_RC_CHANNELS)
					{
						// Subtract Spektrum center offset
						if (chan_shift == 0x03) // 11-bit
    687e:	63 30       	cpi	r22, 0x03	; 3
    6880:	11 f4       	brne	.+4      	; 0x6886 <__vector_20+0x370>
						{
							itemp16 = temp16 - 1024;
    6882:	34 50       	subi	r19, 0x04	; 4
    6884:	01 c0       	rjmp	.+2      	; 0x6888 <__vector_20+0x372>
						}
						else
						{
							itemp16 = temp16 - 512;	
    6886:	32 50       	subi	r19, 0x02	; 2
						}					

						// Spektrum to System
						// 1.1527 () (1000/867.5) x2 = 2.30547 (2.3047)
						itemp16 = (itemp16 << 1) + (itemp16 >> 2) + (itemp16 >> 5) + (itemp16 >> 6) + (itemp16 >> 7);
    6888:	c9 01       	movw	r24, r18
    688a:	88 0f       	add	r24, r24
    688c:	99 1f       	adc	r25, r25
    688e:	a9 01       	movw	r20, r18
    6890:	55 95       	asr	r21
    6892:	47 95       	ror	r20
    6894:	55 95       	asr	r21
    6896:	47 95       	ror	r20
    6898:	84 0f       	add	r24, r20
    689a:	95 1f       	adc	r25, r21
    689c:	a9 01       	movw	r20, r18
    689e:	b5 e0       	ldi	r27, 0x05	; 5
    68a0:	55 95       	asr	r21
    68a2:	47 95       	ror	r20
    68a4:	ba 95       	dec	r27
    68a6:	e1 f7       	brne	.-8      	; 0x68a0 <__vector_20+0x38a>
    68a8:	84 0f       	add	r24, r20
    68aa:	95 1f       	adc	r25, r21
    68ac:	a9 01       	movw	r20, r18
    68ae:	a6 e0       	ldi	r26, 0x06	; 6
    68b0:	55 95       	asr	r21
    68b2:	47 95       	ror	r20
    68b4:	aa 95       	dec	r26
    68b6:	e1 f7       	brne	.-8      	; 0x68b0 <__vector_20+0x39a>
    68b8:	84 0f       	add	r24, r20
    68ba:	95 1f       	adc	r25, r21
    68bc:	22 0f       	add	r18, r18
    68be:	23 2f       	mov	r18, r19
    68c0:	22 1f       	adc	r18, r18
    68c2:	33 0b       	sbc	r19, r19
    68c4:	82 0f       	add	r24, r18
    68c6:	93 1f       	adc	r25, r19

						if (chan_shift == 0x03) // 11-bit
    68c8:	63 30       	cpi	r22, 0x03	; 3
    68ca:	11 f4       	brne	.+4      	; 0x68d0 <__vector_20+0x3ba>
						{
							// Divide in case of 11-bit value
							itemp16 = itemp16 >> 1;								
    68cc:	95 95       	asr	r25
    68ce:	87 95       	ror	r24
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    68d0:	a0 91 1e 08 	lds	r26, 0x081E
    68d4:	b0 e0       	ldi	r27, 0x00	; 0
    68d6:	a9 52       	subi	r26, 0x29	; 41
    68d8:	ba 4f       	sbci	r27, 0xFA	; 250
    68da:	11 96       	adiw	r26, 0x01	; 1
    68dc:	ac 91       	ld	r26, X
    68de:	b0 e0       	ldi	r27, 0x00	; 0
							// Divide in case of 11-bit value
							itemp16 = itemp16 >> 1;								
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										
    68e0:	8a 55       	subi	r24, 0x5A	; 90
    68e2:	91 4f       	sbci	r25, 0xF1	; 241

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    68e4:	aa 0f       	add	r26, r26
    68e6:	bb 1f       	adc	r27, r27
    68e8:	a9 50       	subi	r26, 0x09	; 9
    68ea:	b8 4f       	sbci	r27, 0xF8	; 248
    68ec:	11 96       	adiw	r26, 0x01	; 1
    68ee:	9c 93       	st	X, r25
    68f0:	8e 93       	st	-X, r24
    68f2:	32 96       	adiw	r30, 0x02	; 2
					chan_shift = 0x02;
				}

				// Work out which channel the data is intended for from the channel number data
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
    68f4:	85 e0       	ldi	r24, 0x05	; 5
    68f6:	e5 36       	cpi	r30, 0x65	; 101
    68f8:	f8 07       	cpc	r31, r24
    68fa:	09 f0       	breq	.+2      	; 0x68fe <__vector_20+0x3e8>
    68fc:	a6 cf       	rjmp	.-180    	; 0x684a <__vector_20+0x334>
					sindex += 2;

				} // For each pair of bytes
			
				// RC sync established
				Interrupted = true;
    68fe:	81 e0       	ldi	r24, 0x01	; 1
    6900:	80 93 07 08 	sts	0x0807, r24
		//************************************************************
		//* Common exit code
		//************************************************************

		// Increment byte count
		bytecount++;
    6904:	80 91 09 08 	lds	r24, 0x0809
    6908:	8f 5f       	subi	r24, 0xFF	; 255
    690a:	80 93 09 08 	sts	0x0809, r24
	
	} // Valid data
}
    690e:	ff 91       	pop	r31
    6910:	ef 91       	pop	r30
    6912:	cf 91       	pop	r28
    6914:	bf 91       	pop	r27
    6916:	af 91       	pop	r26
    6918:	9f 91       	pop	r25
    691a:	8f 91       	pop	r24
    691c:	7f 91       	pop	r23
    691e:	6f 91       	pop	r22
    6920:	5f 91       	pop	r21
    6922:	4f 91       	pop	r20
    6924:	3f 91       	pop	r19
    6926:	2f 91       	pop	r18
    6928:	0f 90       	pop	r0
    692a:	0f be       	out	0x3f, r0	; 63
    692c:	0f 90       	pop	r0
    692e:	1f 90       	pop	r1
    6930:	18 95       	reti

00006932 <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    6932:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    6934:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    6938:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    693c:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    693e:	e1 ec       	ldi	r30, 0xC1	; 193
    6940:	f0 e0       	ldi	r31, 0x00	; 0
    6942:	80 81       	ld	r24, Z
    6944:	8f 7e       	andi	r24, 0xEF	; 239
    6946:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    6948:	80 81       	ld	r24, Z
    694a:	8f 77       	andi	r24, 0x7F	; 127
    694c:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    694e:	8f e0       	ldi	r24, 0x0F	; 15
    6950:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    6952:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    6954:	78 94       	sei
    6956:	08 95       	ret

00006958 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    6958:	f8 94       	cli
	
	switch (Config.RxMode)
    695a:	80 91 00 06 	lds	r24, 0x0600
    695e:	81 30       	cpi	r24, 0x01	; 1
    6960:	c9 f0       	breq	.+50     	; 0x6994 <init_int+0x3c>
    6962:	44 f4       	brge	.+16     	; 0x6974 <init_int+0x1c>
    6964:	81 11       	cpse	r24, r1
    6966:	2c c0       	rjmp	.+88     	; 0x69c0 <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    6968:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    696c:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    6970:	84 e0       	ldi	r24, 0x04	; 4
    6972:	1b c0       	rjmp	.+54     	; 0x69aa <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    6974:	85 30       	cpi	r24, 0x05	; 5
    6976:	24 f5       	brge	.+72     	; 0x69c0 <init_int+0x68>

		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    6978:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    697c:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    6980:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    6982:	80 91 c1 00 	lds	r24, 0x00C1
    6986:	80 68       	ori	r24, 0x80	; 128
    6988:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    698c:	80 91 c1 00 	lds	r24, 0x00C1
    6990:	80 61       	ori	r24, 0x10	; 16
    6992:	14 c0       	rjmp	.+40     	; 0x69bc <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    6994:	80 91 6c 00 	lds	r24, 0x006C
    6998:	81 60       	ori	r24, 0x01	; 1
    699a:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    699e:	80 91 73 00 	lds	r24, 0x0073
    69a2:	81 60       	ori	r24, 0x01	; 1
    69a4:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    69a8:	87 e0       	ldi	r24, 0x07	; 7
    69aa:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    69ac:	80 91 c1 00 	lds	r24, 0x00C1
    69b0:	8f 77       	andi	r24, 0x7F	; 127
    69b2:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    69b6:	80 91 c1 00 	lds	r24, 0x00C1
    69ba:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    69bc:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    69c0:	8f e0       	ldi	r24, 0x0F	; 15
    69c2:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    69c4:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    69c6:	78 94       	sei
    69c8:	08 95       	ret

000069ca <print_menu_frame>:
//************************************************************
// Print basic menu frame
// style = menu style (0 = main, 1 = sub, 2 = alt)
//************************************************************
void print_menu_frame(uint8_t style)
{
    69ca:	cf 93       	push	r28
    69cc:	c8 2f       	mov	r28, r24
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    69ce:	2b e3       	ldi	r18, 0x3B	; 59
    69d0:	30 e0       	ldi	r19, 0x00	; 0
    69d2:	46 e2       	ldi	r20, 0x26	; 38
    69d4:	50 e0       	ldi	r21, 0x00	; 0
    69d6:	69 e0       	ldi	r22, 0x09	; 9
    69d8:	71 e0       	ldi	r23, 0x01	; 1
    69da:	8a e0       	ldi	r24, 0x0A	; 10
    69dc:	90 e0       	ldi	r25, 0x00	; 0
    69de:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    69e2:	2b e3       	ldi	r18, 0x3B	; 59
    69e4:	30 e0       	ldi	r19, 0x00	; 0
    69e6:	40 e5       	ldi	r20, 0x50	; 80
    69e8:	50 e0       	ldi	r21, 0x00	; 0
    69ea:	69 e0       	ldi	r22, 0x09	; 9
    69ec:	71 e0       	ldi	r23, 0x01	; 1
    69ee:	89 e0       	ldi	r24, 0x09	; 9
    69f0:	90 e0       	ldi	r25, 0x00	; 0
    69f2:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

	switch (style)
    69f6:	c1 30       	cpi	r28, 0x01	; 1
    69f8:	11 f1       	breq	.+68     	; 0x6a3e <print_menu_frame+0x74>
    69fa:	70 f0       	brcs	.+28     	; 0x6a18 <print_menu_frame+0x4e>
    69fc:	c3 30       	cpi	r28, 0x03	; 3
    69fe:	91 f1       	breq	.+100    	; 0x6a64 <print_menu_frame+0x9a>
    6a00:	c0 3a       	cpi	r28, 0xA0	; 160
    6a02:	09 f0       	breq	.+2      	; 0x6a06 <print_menu_frame+0x3c>
    6a04:	43 c0       	rjmp	.+134    	; 0x6a8c <print_menu_frame+0xc2>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    6a06:	26 e3       	ldi	r18, 0x36	; 54
    6a08:	30 e0       	ldi	r19, 0x00	; 0
    6a0a:	40 e0       	ldi	r20, 0x00	; 0
    6a0c:	50 e0       	ldi	r21, 0x00	; 0
    6a0e:	67 e9       	ldi	r22, 0x97	; 151
    6a10:	7c e0       	ldi	r23, 0x0C	; 12
    6a12:	88 e1       	ldi	r24, 0x18	; 24
    6a14:	91 e0       	ldi	r25, 0x01	; 1
    6a16:	1b c0       	rjmp	.+54     	; 0x6a4e <print_menu_frame+0x84>

	switch (style)
	{
		case BASIC:
			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    6a18:	29 e3       	ldi	r18, 0x39	; 57
    6a1a:	30 e0       	ldi	r19, 0x00	; 0
    6a1c:	40 e0       	ldi	r20, 0x00	; 0
    6a1e:	50 e0       	ldi	r21, 0x00	; 0
    6a20:	69 e0       	ldi	r22, 0x09	; 9
    6a22:	71 e0       	ldi	r23, 0x01	; 1
    6a24:	8c e0       	ldi	r24, 0x0C	; 12
    6a26:	90 e0       	ldi	r25, 0x00	; 0
    6a28:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    6a2c:	29 e3       	ldi	r18, 0x39	; 57
    6a2e:	30 e0       	ldi	r19, 0x00	; 0
    6a30:	48 e7       	ldi	r20, 0x78	; 120
    6a32:	50 e0       	ldi	r21, 0x00	; 0
    6a34:	69 e0       	ldi	r22, 0x09	; 9
    6a36:	71 e0       	ldi	r23, 0x01	; 1
    6a38:	8b e0       	ldi	r24, 0x0B	; 11
    6a3a:	90 e0       	ldi	r25, 0x00	; 0
    6a3c:	25 c0       	rjmp	.+74     	; 0x6a88 <print_menu_frame+0xbe>
			break;
			
		case EDIT:
			// For editing items
			LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Def.
    6a3e:	26 e3       	ldi	r18, 0x36	; 54
    6a40:	30 e0       	ldi	r19, 0x00	; 0
    6a42:	40 e0       	ldi	r20, 0x00	; 0
    6a44:	50 e0       	ldi	r21, 0x00	; 0
    6a46:	67 e9       	ldi	r22, 0x97	; 151
    6a48:	7c e0       	ldi	r23, 0x0C	; 12
    6a4a:	80 e1       	ldi	r24, 0x10	; 16
    6a4c:	90 e0       	ldi	r25, 0x00	; 0
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    6a4e:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    6a52:	26 e3       	ldi	r18, 0x36	; 54
    6a54:	30 e0       	ldi	r19, 0x00	; 0
    6a56:	47 e6       	ldi	r20, 0x67	; 103
    6a58:	50 e0       	ldi	r21, 0x00	; 0
    6a5a:	67 e9       	ldi	r22, 0x97	; 151
    6a5c:	7c e0       	ldi	r23, 0x0C	; 12
    6a5e:	81 e1       	ldi	r24, 0x11	; 17
    6a60:	90 e0       	ldi	r25, 0x00	; 0
    6a62:	12 c0       	rjmp	.+36     	; 0x6a88 <print_menu_frame+0xbe>
			break;
			
		case LOG:
			// Clear or exit
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    6a64:	29 e3       	ldi	r18, 0x39	; 57
    6a66:	30 e0       	ldi	r19, 0x00	; 0
    6a68:	40 e0       	ldi	r20, 0x00	; 0
    6a6a:	50 e0       	ldi	r21, 0x00	; 0
    6a6c:	69 e0       	ldi	r22, 0x09	; 9
    6a6e:	71 e0       	ldi	r23, 0x01	; 1
    6a70:	8c e0       	ldi	r24, 0x0C	; 12
    6a72:	90 e0       	ldi	r25, 0x00	; 0
    6a74:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
			LCD_Display_Text(291, (const unsigned char*)Verdana8, 100, 54);	// Clear
    6a78:	26 e3       	ldi	r18, 0x36	; 54
    6a7a:	30 e0       	ldi	r19, 0x00	; 0
    6a7c:	44 e6       	ldi	r20, 0x64	; 100
    6a7e:	50 e0       	ldi	r21, 0x00	; 0
    6a80:	67 e9       	ldi	r22, 0x97	; 151
    6a82:	7c e0       	ldi	r23, 0x0C	; 12
    6a84:	83 e2       	ldi	r24, 0x23	; 35
    6a86:	91 e0       	ldi	r25, 0x01	; 1
    6a88:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    6a8c:	80 e0       	ldi	r24, 0x00	; 0
    6a8e:	91 e0       	ldi	r25, 0x01	; 1
}
    6a90:	cf 91       	pop	r28
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    6a92:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <write_buffer>

00006a96 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    6a96:	cf 93       	push	r28
    6a98:	df 93       	push	r29
    6a9a:	cd b7       	in	r28, 0x3d	; 61
    6a9c:	de b7       	in	r29, 0x3e	; 62
    6a9e:	2a 97       	sbiw	r28, 0x0a	; 10
    6aa0:	0f b6       	in	r0, 0x3f	; 63
    6aa2:	f8 94       	cli
    6aa4:	de bf       	out	0x3e, r29	; 62
    6aa6:	0f be       	out	0x3f, r0	; 63
    6aa8:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    6aaa:	25 e0       	ldi	r18, 0x05	; 5
    6aac:	62 9f       	mul	r22, r18
    6aae:	80 0d       	add	r24, r0
    6ab0:	91 1d       	adc	r25, r1
    6ab2:	11 24       	eor	r1, r1
    6ab4:	bc 01       	movw	r22, r24
    6ab6:	45 e0       	ldi	r20, 0x05	; 5
    6ab8:	50 e0       	ldi	r21, 0x00	; 0
    6aba:	ce 01       	movw	r24, r28
    6abc:	06 96       	adiw	r24, 0x06	; 6
    6abe:	0e 94 84 51 	call	0xa308	; 0xa308 <memcpy_P>
	return (range);
    6ac2:	85 e0       	ldi	r24, 0x05	; 5
    6ac4:	fe 01       	movw	r30, r28
    6ac6:	36 96       	adiw	r30, 0x06	; 6
    6ac8:	de 01       	movw	r26, r28
    6aca:	11 96       	adiw	r26, 0x01	; 1
    6acc:	01 90       	ld	r0, Z+
    6ace:	0d 92       	st	X+, r0
    6ad0:	8a 95       	dec	r24
    6ad2:	e1 f7       	brne	.-8      	; 0x6acc <get_menu_range+0x36>
    6ad4:	29 81       	ldd	r18, Y+1	; 0x01
    6ad6:	3a 81       	ldd	r19, Y+2	; 0x02
    6ad8:	4b 81       	ldd	r20, Y+3	; 0x03
    6ada:	5c 81       	ldd	r21, Y+4	; 0x04
    6adc:	6d 81       	ldd	r22, Y+5	; 0x05
}
    6ade:	70 e0       	ldi	r23, 0x00	; 0
    6ae0:	80 e0       	ldi	r24, 0x00	; 0
    6ae2:	90 e0       	ldi	r25, 0x00	; 0
    6ae4:	2a 96       	adiw	r28, 0x0a	; 10
    6ae6:	0f b6       	in	r0, 0x3f	; 63
    6ae8:	f8 94       	cli
    6aea:	de bf       	out	0x3e, r29	; 62
    6aec:	0f be       	out	0x3f, r0	; 63
    6aee:	cd bf       	out	0x3d, r28	; 61
    6af0:	df 91       	pop	r29
    6af2:	cf 91       	pop	r28
    6af4:	08 95       	ret

00006af6 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    6af6:	0f 93       	push	r16
    6af8:	1f 93       	push	r17
    6afa:	cf 93       	push	r28
    6afc:	df 93       	push	r29
    6afe:	fa 01       	movw	r30, r20
    6b00:	10 e0       	ldi	r17, 0x00	; 0
    6b02:	c2 2f       	mov	r28, r18
    6b04:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    6b06:	66 23       	and	r22, r22
    6b08:	19 f0       	breq	.+6      	; 0x6b10 <print_menu_text+0x1a>
    6b0a:	62 50       	subi	r22, 0x02	; 2
    6b0c:	62 30       	cpi	r22, 0x02	; 2
    6b0e:	78 f4       	brcc	.+30     	; 0x6b2e <print_menu_text+0x38>
    6b10:	4a e0       	ldi	r20, 0x0A	; 10
    6b12:	6a e7       	ldi	r22, 0x7A	; 122
    6b14:	75 e0       	ldi	r23, 0x05	; 5
    6b16:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    6b1a:	98 01       	movw	r18, r16
    6b1c:	ae 01       	movw	r20, r28
    6b1e:	67 e9       	ldi	r22, 0x97	; 151
    6b20:	7c e0       	ldi	r23, 0x0C	; 12
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    6b22:	df 91       	pop	r29
    6b24:	cf 91       	pop	r28
    6b26:	1f 91       	pop	r17
    6b28:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    6b2a:	0c 94 ec 45 	jmp	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    6b2e:	98 01       	movw	r18, r16
    6b30:	ae 01       	movw	r20, r28
    6b32:	67 e9       	ldi	r22, 0x97	; 151
    6b34:	7c e0       	ldi	r23, 0x0C	; 12
    6b36:	cf 01       	movw	r24, r30
	}
}
    6b38:	df 91       	pop	r29
    6b3a:	cf 91       	pop	r28
    6b3c:	1f 91       	pop	r17
    6b3e:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    6b40:	0c 94 e6 27 	jmp	0x4fcc	; 0x4fcc <LCD_Display_Text>

00006b44 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    6b44:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    6b46:	93 b1       	in	r25, 0x03	; 3
    6b48:	90 7f       	andi	r25, 0xF0	; 240
    6b4a:	90 93 27 08 	sts	0x0827, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    6b4e:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    6b50:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    6b52:	90 91 27 08 	lds	r25, 0x0827
    6b56:	90 3f       	cpi	r25, 0xF0	; 240
    6b58:	c9 f4       	brne	.+50     	; 0x6b8c <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    6b5a:	83 b1       	in	r24, 0x03	; 3
    6b5c:	80 7f       	andi	r24, 0xF0	; 240
    6b5e:	e7 ea       	ldi	r30, 0xA7	; 167
    6b60:	f1 e6       	ldi	r31, 0x61	; 97
    6b62:	31 97       	sbiw	r30, 0x01	; 1
    6b64:	f1 f7       	brne	.-4      	; 0x6b62 <poll_buttons+0x1e>
    6b66:	00 c0       	rjmp	.+0      	; 0x6b68 <poll_buttons+0x24>
    6b68:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    6b6a:	23 b1       	in	r18, 0x03	; 3
    6b6c:	48 2f       	mov	r20, r24
    6b6e:	50 e0       	ldi	r21, 0x00	; 0
    6b70:	20 7f       	andi	r18, 0xF0	; 240
    6b72:	30 e0       	ldi	r19, 0x00	; 0
    6b74:	42 17       	cp	r20, r18
    6b76:	53 07       	cpc	r21, r19
    6b78:	19 f4       	brne	.+6      	; 0x6b80 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    6b7a:	80 93 27 08 	sts	0x0827, r24
    6b7e:	01 c0       	rjmp	.+2      	; 0x6b82 <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    6b80:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    6b82:	10 92 30 05 	sts	0x0530, r1
		button_multiplier = 1;
    6b86:	70 93 28 08 	sts	0x0828, r23
    6b8a:	e3 cf       	rjmp	.-58     	; 0x6b52 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    6b8c:	66 23       	and	r22, r22
    6b8e:	71 f0       	breq	.+28     	; 0x6bac <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    6b90:	90 91 30 05 	lds	r25, 0x0530
    6b94:	9f 5f       	subi	r25, 0xFF	; 255
    6b96:	90 93 30 05 	sts	0x0530, r25
		if (button_count >= 10)
    6b9a:	9a 30       	cpi	r25, 0x0A	; 10
    6b9c:	38 f0       	brcs	.+14     	; 0x6bac <poll_buttons+0x68>
		{
			button_count = 0;
    6b9e:	10 92 30 05 	sts	0x0530, r1
			button_multiplier ++;
    6ba2:	90 91 28 08 	lds	r25, 0x0828
    6ba6:	9f 5f       	subi	r25, 0xFF	; 255
    6ba8:	90 93 28 08 	sts	0x0828, r25
		}
	}

	return buttons;
}
    6bac:	08 95       	ret

00006bae <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    6bae:	2f 92       	push	r2
    6bb0:	3f 92       	push	r3
    6bb2:	4f 92       	push	r4
    6bb4:	5f 92       	push	r5
    6bb6:	6f 92       	push	r6
    6bb8:	7f 92       	push	r7
    6bba:	8f 92       	push	r8
    6bbc:	9f 92       	push	r9
    6bbe:	af 92       	push	r10
    6bc0:	bf 92       	push	r11
    6bc2:	cf 92       	push	r12
    6bc4:	df 92       	push	r13
    6bc6:	ef 92       	push	r14
    6bc8:	ff 92       	push	r15
    6bca:	0f 93       	push	r16
    6bcc:	1f 93       	push	r17
    6bce:	cf 93       	push	r28
    6bd0:	df 93       	push	r29
    6bd2:	cd b7       	in	r28, 0x3d	; 61
    6bd4:	de b7       	in	r29, 0x3e	; 62
    6bd6:	67 97       	sbiw	r28, 0x17	; 23
    6bd8:	0f b6       	in	r0, 0x3f	; 63
    6bda:	f8 94       	cli
    6bdc:	de bf       	out	0x3e, r29	; 62
    6bde:	0f be       	out	0x3f, r0	; 63
    6be0:	cd bf       	out	0x3d, r28	; 61
    6be2:	3c 01       	movw	r6, r24
    6be4:	79 8b       	std	Y+17, r23	; 0x11
    6be6:	68 8b       	std	Y+16, r22	; 0x10
    6be8:	4a 87       	std	Y+10, r20	; 0x0a
    6bea:	ed 82       	std	Y+5, r14	; 0x05
    6bec:	fe 82       	std	Y+6, r15	; 0x06
    6bee:	0f 83       	std	Y+7, r16	; 0x07
    6bf0:	18 87       	std	Y+8, r17	; 0x08
    6bf2:	29 87       	std	Y+9, r18	; 0x09
    6bf4:	bd 8a       	std	Y+21, r11	; 0x15
    6bf6:	ac 8a       	std	Y+20, r10	; 0x14
    6bf8:	4e 2d       	mov	r20, r14
    6bfa:	3f 2d       	mov	r19, r15
    6bfc:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    6bfe:	fb 01       	movw	r30, r22
    6c00:	20 81       	ld	r18, Z
    6c02:	a2 2e       	mov	r10, r18
    6c04:	bb 24       	eor	r11, r11
    6c06:	a7 fc       	sbrc	r10, 7
    6c08:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    6c0a:	12 30       	cpi	r17, 0x02	; 2
    6c0c:	29 f4       	brne	.+10     	; 0x6c18 <do_menu_item+0x6a>
	{
		value = value * mult;
    6c0e:	5a 85       	ldd	r21, Y+10	; 0x0a
    6c10:	25 03       	mulsu	r18, r21
    6c12:	50 01       	movw	r10, r0
    6c14:	11 24       	eor	r1, r1
    6c16:	02 c0       	rjmp	.+4      	; 0x6c1c <do_menu_item+0x6e>
	}
	else mult = 1;
    6c18:	81 e0       	ldi	r24, 0x01	; 1
    6c1a:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    6c1c:	20 ef       	ldi	r18, 0xF0	; 240
    6c1e:	20 93 27 08 	sts	0x0827, r18
				value = (range.default_value * mult);				
			}
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    6c22:	fa 85       	ldd	r31, Y+10	; 0x0a
    6c24:	ef 2f       	mov	r30, r31
    6c26:	f0 e0       	ldi	r31, 0x00	; 0
    6c28:	fb 8b       	std	Y+19, r31	; 0x13
    6c2a:	ea 8b       	std	Y+18, r30	; 0x12
    6c2c:	2a 85       	ldd	r18, Y+10	; 0x0a
    6c2e:	42 03       	mulsu	r20, r18
    6c30:	10 01       	movw	r2, r0
    6c32:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    6c34:	32 03       	mulsu	r19, r18
    6c36:	c0 01       	movw	r24, r0
    6c38:	11 24       	eor	r1, r1
    6c3a:	9f 87       	std	Y+15, r25	; 0x0f
    6c3c:	8e 87       	std	Y+14, r24	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    6c3e:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    6c40:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    6c42:	41 2c       	mov	r4, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    6c44:	f1 2c       	mov	r15, r1
		{
			button_inc = 5; // For servos
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    6c46:	01 e0       	ldi	r16, 0x01	; 1
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    6c48:	f3 01       	movw	r30, r6
    6c4a:	ee 0f       	add	r30, r30
    6c4c:	ff 1f       	adc	r31, r31
    6c4e:	e2 58       	subi	r30, 0x82	; 130
    6c50:	ff 4e       	sbci	r31, 0xEF	; 239
    6c52:	fc 87       	std	Y+12, r31	; 0x0c
    6c54:	eb 87       	std	Y+11, r30	; 0x0b
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    6c56:	2c 2d       	mov	r18, r12
    6c58:	33 27       	eor	r19, r19
    6c5a:	27 fd       	sbrc	r18, 7
    6c5c:	30 95       	com	r19
    6c5e:	3f 8b       	std	Y+23, r19	; 0x17
    6c60:	2e 8b       	std	Y+22, r18	; 0x16
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    6c62:	be ef       	ldi	r27, 0xFE	; 254
    6c64:	9b 2e       	mov	r9, r27
    6c66:	91 0e       	add	r9, r17

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    6c68:	86 e2       	ldi	r24, 0x26	; 38
    6c6a:	ec a5       	ldd	r30, Y+44	; 0x2c
    6c6c:	fd a5       	ldd	r31, Y+45	; 0x2d
    6c6e:	8e 9f       	mul	r24, r30
    6c70:	60 01       	movw	r12, r0
    6c72:	8f 9f       	mul	r24, r31
    6c74:	d0 0c       	add	r13, r0
    6c76:	11 24       	eor	r1, r1
    6c78:	96 01       	movw	r18, r12
    6c7a:	23 59       	subi	r18, 0x93	; 147
    6c7c:	39 4f       	sbci	r19, 0xF9	; 249
    6c7e:	69 01       	movw	r12, r18
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
    6c80:	80 91 27 08 	lds	r24, 0x0827
    6c84:	28 2f       	mov	r18, r24
    6c86:	2f 7b       	andi	r18, 0xBF	; 191
    6c88:	20 3a       	cpi	r18, 0xA0	; 160
    6c8a:	09 f4       	brne	.+2      	; 0x6c8e <do_menu_item+0xe0>
    6c8c:	36 c1       	rjmp	.+620    	; 0x6efa <do_menu_item+0x34c>
		// Increment loop count so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    6c8e:	88 20       	and	r8, r8
    6c90:	11 f0       	breq	.+4      	; 0x6c96 <do_menu_item+0xe8>
		{
			button_inc = 5; // For servos
    6c92:	25 e0       	ldi	r18, 0x05	; 5
    6c94:	01 c0       	rjmp	.+2      	; 0x6c98 <do_menu_item+0xea>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    6c96:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    6c98:	80 3f       	cpi	r24, 0xF0	; 240
    6c9a:	19 f0       	breq	.+6      	; 0x6ca2 <do_menu_item+0xf4>
		{
			button_update++;
    6c9c:	43 94       	inc	r4

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    6c9e:	24 15       	cp	r18, r4
    6ca0:	10 f4       	brcc	.+4      	; 0x6ca6 <do_menu_item+0xf8>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    6ca2:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    6ca4:	41 2c       	mov	r4, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    6ca6:	88 20       	and	r8, r8
    6ca8:	49 f0       	breq	.+18     	; 0x6cbc <do_menu_item+0x10e>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
	{
		// Increment loop count so that we can time various things
		display_update++;
    6caa:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    6cac:	37 e0       	ldi	r19, 0x07	; 7
    6cae:	3f 15       	cp	r19, r15
    6cb0:	10 f4       	brcc	.+4      	; 0x6cb6 <do_menu_item+0x108>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    6cb2:	80 3f       	cpi	r24, 0xF0	; 240
    6cb4:	19 f4       	brne	.+6      	; 0x6cbc <do_menu_item+0x10e>
    6cb6:	99 23       	and	r25, r25
    6cb8:	09 f4       	brne	.+2      	; 0x6cbc <do_menu_item+0x10e>
    6cba:	85 c0       	rjmp	.+266    	; 0x6dc6 <do_menu_item+0x218>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    6cbc:	80 e0       	ldi	r24, 0x00	; 0
    6cbe:	91 e0       	ldi	r25, 0x01	; 1
    6cc0:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>

			// Print warning
			if (range.style == 4)
    6cc4:	14 30       	cpi	r17, 0x04	; 4
    6cc6:	a9 f4       	brne	.+42     	; 0x6cf2 <do_menu_item+0x144>
			{
				LCD_Display_Text(281,(const unsigned char*)Verdana8,0,0);	// Warning
    6cc8:	20 e0       	ldi	r18, 0x00	; 0
    6cca:	30 e0       	ldi	r19, 0x00	; 0
    6ccc:	40 e0       	ldi	r20, 0x00	; 0
    6cce:	50 e0       	ldi	r21, 0x00	; 0
    6cd0:	67 e9       	ldi	r22, 0x97	; 151
    6cd2:	7c e0       	ldi	r23, 0x0C	; 12
    6cd4:	89 e1       	ldi	r24, 0x19	; 25
    6cd6:	91 e0       	ldi	r25, 0x01	; 1
    6cd8:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
    6cdc:	2c e0       	ldi	r18, 0x0C	; 12
    6cde:	30 e0       	ldi	r19, 0x00	; 0
    6ce0:	49 e1       	ldi	r20, 0x19	; 25
    6ce2:	50 e0       	ldi	r21, 0x00	; 0
    6ce4:	67 e9       	ldi	r22, 0x97	; 151
    6ce6:	7c e0       	ldi	r23, 0x0C	; 12
    6ce8:	8a e1       	ldi	r24, 0x1A	; 26
    6cea:	91 e0       	ldi	r25, 0x01	; 1
    6cec:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
    6cf0:	39 c0       	rjmp	.+114    	; 0x6d64 <do_menu_item+0x1b6>
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    6cf2:	eb 85       	ldd	r30, Y+11	; 0x0b
    6cf4:	fc 85       	ldd	r31, Y+12	; 0x0c
    6cf6:	85 91       	lpm	r24, Z+
    6cf8:	94 91       	lpm	r25, Z
    6cfa:	20 e0       	ldi	r18, 0x00	; 0
    6cfc:	30 e0       	ldi	r19, 0x00	; 0
    6cfe:	40 e0       	ldi	r20, 0x00	; 0
    6d00:	50 e0       	ldi	r21, 0x00	; 0
    6d02:	69 ee       	ldi	r22, 0xE9	; 233
    6d04:	73 e0       	ldi	r23, 0x03	; 3
    6d06:	0e 94 ef 27 	call	0x4fde	; 0x4fde <gLCDprint_Menu_P>
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    6d0a:	11 23       	and	r17, r17
    6d0c:	19 f0       	breq	.+6      	; 0x6d14 <do_menu_item+0x166>
    6d0e:	51 e0       	ldi	r21, 0x01	; 1
    6d10:	59 15       	cp	r21, r9
    6d12:	40 f1       	brcs	.+80     	; 0x6d64 <do_menu_item+0x1b6>
    6d14:	4a e0       	ldi	r20, 0x0A	; 10
    6d16:	6a e7       	ldi	r22, 0x7A	; 122
    6d18:	75 e0       	ldi	r23, 0x05	; 5
    6d1a:	c5 01       	movw	r24, r10
    6d1c:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    6d20:	ae 01       	movw	r20, r28
    6d22:	4f 5f       	subi	r20, 0xFF	; 255
    6d24:	5f 4f       	sbci	r21, 0xFF	; 255
    6d26:	69 ee       	ldi	r22, 0xE9	; 233
    6d28:	73 e0       	ldi	r23, 0x03	; 3
    6d2a:	0e 94 9d 44 	call	0x893a	; 0x893a <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    6d2e:	89 81       	ldd	r24, Y+1	; 0x01
    6d30:	9a 81       	ldd	r25, Y+2	; 0x02
    6d32:	70 e8       	ldi	r23, 0x80	; 128
    6d34:	e7 2e       	mov	r14, r23
    6d36:	f1 2c       	mov	r15, r1
    6d38:	e8 1a       	sub	r14, r24
    6d3a:	f9 0a       	sbc	r15, r25
    6d3c:	f6 94       	lsr	r15
    6d3e:	e7 94       	ror	r14
    6d40:	8e 89       	ldd	r24, Y+22	; 0x16
    6d42:	9f 89       	ldd	r25, Y+23	; 0x17
    6d44:	e8 0e       	add	r14, r24
    6d46:	f9 1e       	adc	r15, r25
    6d48:	4a e0       	ldi	r20, 0x0A	; 10
    6d4a:	6a e7       	ldi	r22, 0x7A	; 122
    6d4c:	75 e0       	ldi	r23, 0x05	; 5
    6d4e:	c5 01       	movw	r24, r10
    6d50:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__itoa_ncheck>
    6d54:	29 e1       	ldi	r18, 0x19	; 25
    6d56:	30 e0       	ldi	r19, 0x00	; 0
    6d58:	a7 01       	movw	r20, r14
    6d5a:	69 ee       	ldi	r22, 0xE9	; 233
    6d5c:	73 e0       	ldi	r23, 0x03	; 3
    6d5e:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <mugui_lcd_puts>
    6d62:	29 c0       	rjmp	.+82     	; 0x6db6 <do_menu_item+0x208>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    6d64:	ec 88       	ldd	r14, Y+20	; 0x14
    6d66:	fd 88       	ldd	r15, Y+21	; 0x15
    6d68:	ea 0c       	add	r14, r10
    6d6a:	fb 1c       	adc	r15, r11
    6d6c:	f7 01       	movw	r30, r14
    6d6e:	ee 0f       	add	r30, r30
    6d70:	ff 1f       	adc	r31, r31
    6d72:	e2 58       	subi	r30, 0x82	; 130
    6d74:	ff 4e       	sbci	r31, 0xEF	; 239
    6d76:	85 91       	lpm	r24, Z+
    6d78:	94 91       	lpm	r25, Z
    6d7a:	0e 94 eb 44 	call	0x89d6	; 0x89d6 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    6d7e:	ae 01       	movw	r20, r28
    6d80:	4f 5f       	subi	r20, 0xFF	; 255
    6d82:	5f 4f       	sbci	r21, 0xFF	; 255
    6d84:	69 ee       	ldi	r22, 0xE9	; 233
    6d86:	73 e0       	ldi	r23, 0x03	; 3
    6d88:	8a e7       	ldi	r24, 0x7A	; 122
    6d8a:	95 e0       	ldi	r25, 0x05	; 5
    6d8c:	0e 94 9d 44 	call	0x893a	; 0x893a <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    6d90:	89 81       	ldd	r24, Y+1	; 0x01
    6d92:	9a 81       	ldd	r25, Y+2	; 0x02
    6d94:	40 e8       	ldi	r20, 0x80	; 128
    6d96:	50 e0       	ldi	r21, 0x00	; 0
    6d98:	48 1b       	sub	r20, r24
    6d9a:	59 0b       	sbc	r21, r25
    6d9c:	56 95       	lsr	r21
    6d9e:	47 95       	ror	r20
    6da0:	29 e1       	ldi	r18, 0x19	; 25
    6da2:	30 e0       	ldi	r19, 0x00	; 0
    6da4:	69 ee       	ldi	r22, 0xE9	; 233
    6da6:	73 e0       	ldi	r23, 0x03	; 3
    6da8:	c7 01       	movw	r24, r14
    6daa:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
			}

			// Print appropriate menu frame
			// Save/Abort screen
			if (range.style == 4)
    6dae:	14 30       	cpi	r17, 0x04	; 4
    6db0:	11 f4       	brne	.+4      	; 0x6db6 <do_menu_item+0x208>
			{
				// Print bottom markers
				print_menu_frame(ABORT);				
    6db2:	80 ea       	ldi	r24, 0xA0	; 160
    6db4:	01 c0       	rjmp	.+2      	; 0x6db8 <do_menu_item+0x20a>
			}
			// Save/default screen
			else
			{
				// Print bottom markers
				print_menu_frame(EDIT);				
    6db6:	81 e0       	ldi	r24, 0x01	; 1
    6db8:	0e 94 e5 34 	call	0x69ca	; 0x69ca <print_menu_frame>
			}

			// Write from buffer
			write_buffer(buffer);
    6dbc:	80 e0       	ldi	r24, 0x00	; 0
    6dbe:	91 e0       	ldi	r25, 0x01	; 1
    6dc0:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    6dc4:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    6dc6:	12 30       	cpi	r17, 0x02	; 2
    6dc8:	09 f1       	breq	.+66     	; 0x6e0c <do_menu_item+0x25e>
    6dca:	60 f4       	brcc	.+24     	; 0x6de4 <do_menu_item+0x236>
    6dcc:	11 23       	and	r17, r17
    6dce:	b1 f0       	breq	.+44     	; 0x6dfc <do_menu_item+0x24e>
    6dd0:	11 30       	cpi	r17, 0x01	; 1
    6dd2:	69 f5       	brne	.+90     	; 0x6e2e <do_menu_item+0x280>
    6dd4:	2f e3       	ldi	r18, 0x3F	; 63
    6dd6:	32 e4       	ldi	r19, 0x42	; 66
    6dd8:	5f e0       	ldi	r21, 0x0F	; 15
    6dda:	21 50       	subi	r18, 0x01	; 1
    6ddc:	30 40       	sbci	r19, 0x00	; 0
    6dde:	50 40       	sbci	r21, 0x00	; 0
    6de0:	e1 f7       	brne	.-8      	; 0x6dda <do_menu_item+0x22c>
    6de2:	23 c0       	rjmp	.+70     	; 0x6e2a <do_menu_item+0x27c>
    6de4:	13 30       	cpi	r17, 0x03	; 3
    6de6:	d1 f0       	breq	.+52     	; 0x6e1c <do_menu_item+0x26e>
    6de8:	14 30       	cpi	r17, 0x04	; 4
    6dea:	09 f5       	brne	.+66     	; 0x6e2e <do_menu_item+0x280>
    6dec:	5f e3       	ldi	r21, 0x3F	; 63
    6dee:	82 e4       	ldi	r24, 0x42	; 66
    6df0:	9f e0       	ldi	r25, 0x0F	; 15
    6df2:	51 50       	subi	r21, 0x01	; 1
    6df4:	80 40       	sbci	r24, 0x00	; 0
    6df6:	90 40       	sbci	r25, 0x00	; 0
    6df8:	e1 f7       	brne	.-8      	; 0x6df2 <do_menu_item+0x244>
    6dfa:	17 c0       	rjmp	.+46     	; 0x6e2a <do_menu_item+0x27c>
    6dfc:	9f e7       	ldi	r25, 0x7F	; 127
    6dfe:	ea e1       	ldi	r30, 0x1A	; 26
    6e00:	f6 e0       	ldi	r31, 0x06	; 6
    6e02:	91 50       	subi	r25, 0x01	; 1
    6e04:	e0 40       	sbci	r30, 0x00	; 0
    6e06:	f0 40       	sbci	r31, 0x00	; 0
    6e08:	e1 f7       	brne	.-8      	; 0x6e02 <do_menu_item+0x254>
    6e0a:	0f c0       	rjmp	.+30     	; 0x6e2a <do_menu_item+0x27c>
    6e0c:	8f e7       	ldi	r24, 0x7F	; 127
    6e0e:	9a e1       	ldi	r25, 0x1A	; 26
    6e10:	e6 e0       	ldi	r30, 0x06	; 6
    6e12:	81 50       	subi	r24, 0x01	; 1
    6e14:	90 40       	sbci	r25, 0x00	; 0
    6e16:	e0 40       	sbci	r30, 0x00	; 0
    6e18:	e1 f7       	brne	.-8      	; 0x6e12 <do_menu_item+0x264>
    6e1a:	07 c0       	rjmp	.+14     	; 0x6e2a <do_menu_item+0x27c>
    6e1c:	ff e7       	ldi	r31, 0x7F	; 127
    6e1e:	28 e3       	ldi	r18, 0x38	; 56
    6e20:	31 e0       	ldi	r19, 0x01	; 1
    6e22:	f1 50       	subi	r31, 0x01	; 1
    6e24:	20 40       	sbci	r18, 0x00	; 0
    6e26:	30 40       	sbci	r19, 0x00	; 0
    6e28:	e1 f7       	brne	.-8      	; 0x6e22 <do_menu_item+0x274>
    6e2a:	00 c0       	rjmp	.+0      	; 0x6e2c <do_menu_item+0x27e>
    6e2c:	00 00       	nop
		}

		// Poll buttons when idle.
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    6e2e:	88 20       	and	r8, r8
    6e30:	39 f0       	breq	.+14     	; 0x6e40 <do_menu_item+0x292>
		{
			button = (PINB & 0xf0);	
    6e32:	83 b1       	in	r24, 0x03	; 3
    6e34:	80 7f       	andi	r24, 0xF0	; 240
    6e36:	80 93 27 08 	sts	0x0827, r24
			button_multiplier = 1;
    6e3a:	00 93 28 08 	sts	0x0828, r16
    6e3e:	03 c0       	rjmp	.+6      	; 0x6e46 <do_menu_item+0x298>
		}
		else
		{
			poll_buttons(true);
    6e40:	81 e0       	ldi	r24, 0x01	; 1
    6e42:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    6e46:	80 91 27 08 	lds	r24, 0x0827
    6e4a:	80 3f       	cpi	r24, 0xF0	; 240
    6e4c:	69 f1       	breq	.+90     	; 0x6ea8 <do_menu_item+0x2fa>
    6e4e:	88 20       	and	r8, r8
    6e50:	c9 f0       	breq	.+50     	; 0x6e84 <do_menu_item+0x2d6>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6e52:	80 3d       	cpi	r24, 0xD0	; 208
    6e54:	51 f4       	brne	.+20     	; 0x6e6a <do_menu_item+0x2bc>
		{
			if (button_lock == false)
    6e56:	51 10       	cpse	r5, r1
    6e58:	74 c0       	rjmp	.+232    	; 0x6f42 <do_menu_item+0x394>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    6e5a:	80 91 28 08 	lds	r24, 0x0828
    6e5e:	ed 85       	ldd	r30, Y+13	; 0x0d
    6e60:	e8 9f       	mul	r30, r24
    6e62:	a0 18       	sub	r10, r0
    6e64:	b1 08       	sbc	r11, r1
    6e66:	11 24       	eor	r1, r1
    6e68:	0b c0       	rjmp	.+22     	; 0x6e80 <do_menu_item+0x2d2>
				button_update = 0;
			}
		}

		if (button == UP)
    6e6a:	80 3b       	cpi	r24, 0xB0	; 176
    6e6c:	81 f4       	brne	.+32     	; 0x6e8e <do_menu_item+0x2e0>
		{
			if (button_lock == false)
    6e6e:	51 10       	cpse	r5, r1
    6e70:	68 c0       	rjmp	.+208    	; 0x6f42 <do_menu_item+0x394>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    6e72:	80 91 28 08 	lds	r24, 0x0828
    6e76:	fd 85       	ldd	r31, Y+13	; 0x0d
    6e78:	f8 9f       	mul	r31, r24
    6e7a:	a0 0c       	add	r10, r0
    6e7c:	b1 1c       	adc	r11, r1
    6e7e:	11 24       	eor	r1, r1
				button_update = 0;
    6e80:	41 2c       	mov	r4, r1
    6e82:	5f c0       	rjmp	.+190    	; 0x6f42 <do_menu_item+0x394>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6e84:	80 3d       	cpi	r24, 0xD0	; 208
    6e86:	49 f3       	breq	.-46     	; 0x6e5a <do_menu_item+0x2ac>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    6e88:	80 3b       	cpi	r24, 0xB0	; 176
    6e8a:	99 f3       	breq	.-26     	; 0x6e72 <do_menu_item+0x2c4>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    6e8c:	51 2c       	mov	r5, r1
				button_update = 0;
			}
		}

		// Handle button 1
		if (button == BACK)	
    6e8e:	80 37       	cpi	r24, 0x70	; 112
    6e90:	59 f4       	brne	.+22     	; 0x6ea8 <do_menu_item+0x2fa>
		{
			// Save/Abort screen
			if (range.style == 4)
    6e92:	14 30       	cpi	r17, 0x04	; 4
    6e94:	21 f4       	brne	.+8      	; 0x6e9e <do_menu_item+0x2f0>
			{
				button = ABORT;
    6e96:	80 ea       	ldi	r24, 0xA0	; 160
    6e98:	80 93 27 08 	sts	0x0827, r24
    6e9c:	05 c0       	rjmp	.+10     	; 0x6ea8 <do_menu_item+0x2fa>
			}
			else
			{
				value = (range.default_value * mult);				
    6e9e:	29 85       	ldd	r18, Y+9	; 0x09
    6ea0:	3a 85       	ldd	r19, Y+10	; 0x0a
    6ea2:	23 03       	mulsu	r18, r19
    6ea4:	50 01       	movw	r10, r0
    6ea6:	11 24       	eor	r1, r1
    6ea8:	a2 14       	cp	r10, r2
    6eaa:	b3 04       	cpc	r11, r3
    6eac:	0c f4       	brge	.+2      	; 0x6eb0 <do_menu_item+0x302>
    6eae:	51 01       	movw	r10, r2
    6eb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    6eb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    6eb4:	8a 15       	cp	r24, r10
    6eb6:	9b 05       	cpc	r25, r11
    6eb8:	0c f4       	brge	.+2      	; 0x6ebc <do_menu_item+0x30e>
    6eba:	5c 01       	movw	r10, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    6ebc:	9f e9       	ldi	r25, 0x9F	; 159
    6ebe:	69 16       	cp	r6, r25
    6ec0:	71 04       	cpc	r7, r1
    6ec2:	19 f4       	brne	.+6      	; 0x6eca <do_menu_item+0x31c>
		{
			st7565_set_brightness(value);
    6ec4:	8a 2d       	mov	r24, r10
    6ec6:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    6eca:	88 20       	and	r8, r8
    6ecc:	a1 f0       	breq	.+40     	; 0x6ef6 <do_menu_item+0x348>
			(servo_enable) &&
    6ece:	f6 01       	movw	r30, r12
    6ed0:	80 81       	ld	r24, Z
    6ed2:	82 30       	cpi	r24, 0x02	; 2
    6ed4:	81 f0       	breq	.+32     	; 0x6ef6 <do_menu_item+0x348>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    6ed6:	8a 2d       	mov	r24, r10
    6ed8:	0e 94 96 44 	call	0x892c	; 0x892c <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6edc:	86 5a       	subi	r24, 0xA6	; 166
    6ede:	9e 40       	sbci	r25, 0x0E	; 14
    6ee0:	95 95       	asr	r25
    6ee2:	87 95       	ror	r24

			cli();
    6ee4:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6ee6:	bc 01       	movw	r22, r24
    6ee8:	64 52       	subi	r22, 0x24	; 36
    6eea:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    6eec:	8c a5       	ldd	r24, Y+44	; 0x2c
    6eee:	9d a5       	ldd	r25, Y+45	; 0x2d
    6ef0:	0e 94 a0 10 	call	0x2140	; 0x2140 <output_servo_ppm_asm3>
			sei();
    6ef4:	78 94       	sei
    6ef6:	90 e0       	ldi	r25, 0x00	; 0
    6ef8:	c3 ce       	rjmp	.-634    	; 0x6c80 <do_menu_item+0xd2>
		}

	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    6efa:	12 30       	cpi	r17, 0x02	; 2
    6efc:	31 f4       	brne	.+12     	; 0x6f0a <do_menu_item+0x35c>
	{
		value = value / mult;
    6efe:	c5 01       	movw	r24, r10
    6f00:	6a 89       	ldd	r22, Y+18	; 0x12
    6f02:	7b 89       	ldd	r23, Y+19	; 0x13
    6f04:	0e 94 f8 50 	call	0xa1f0	; 0xa1f0 <__divmodhi4>
    6f08:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    6f0a:	e8 89       	ldd	r30, Y+16	; 0x10
    6f0c:	f9 89       	ldd	r31, Y+17	; 0x11
    6f0e:	a0 82       	st	Z, r10
}
    6f10:	67 96       	adiw	r28, 0x17	; 23
    6f12:	0f b6       	in	r0, 0x3f	; 63
    6f14:	f8 94       	cli
    6f16:	de bf       	out	0x3e, r29	; 62
    6f18:	0f be       	out	0x3f, r0	; 63
    6f1a:	cd bf       	out	0x3d, r28	; 61
    6f1c:	df 91       	pop	r29
    6f1e:	cf 91       	pop	r28
    6f20:	1f 91       	pop	r17
    6f22:	0f 91       	pop	r16
    6f24:	ff 90       	pop	r15
    6f26:	ef 90       	pop	r14
    6f28:	df 90       	pop	r13
    6f2a:	cf 90       	pop	r12
    6f2c:	bf 90       	pop	r11
    6f2e:	af 90       	pop	r10
    6f30:	9f 90       	pop	r9
    6f32:	8f 90       	pop	r8
    6f34:	7f 90       	pop	r7
    6f36:	6f 90       	pop	r6
    6f38:	5f 90       	pop	r5
    6f3a:	4f 90       	pop	r4
    6f3c:	3f 90       	pop	r3
    6f3e:	2f 90       	pop	r2
    6f40:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    6f42:	55 24       	eor	r5, r5
    6f44:	53 94       	inc	r5
    6f46:	b0 cf       	rjmp	.-160    	; 0x6ea8 <do_menu_item+0x2fa>

00006f48 <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    6f48:	90 e0       	ldi	r25, 0x00	; 0
    6f4a:	98 17       	cp	r25, r24
    6f4c:	81 f0       	breq	.+32     	; 0x6f6e <menu_beep+0x26>
	{ 
		LVA = 1;
    6f4e:	29 9a       	sbi	0x05, 1	; 5
    6f50:	ef e0       	ldi	r30, 0x0F	; 15
    6f52:	f7 e2       	ldi	r31, 0x27	; 39
    6f54:	31 97       	sbiw	r30, 0x01	; 1
    6f56:	f1 f7       	brne	.-4      	; 0x6f54 <menu_beep+0xc>
    6f58:	00 c0       	rjmp	.+0      	; 0x6f5a <menu_beep+0x12>
    6f5a:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    6f5c:	29 98       	cbi	0x05, 1	; 5
    6f5e:	ef e0       	ldi	r30, 0x0F	; 15
    6f60:	f7 e2       	ldi	r31, 0x27	; 39
    6f62:	31 97       	sbiw	r30, 0x01	; 1
    6f64:	f1 f7       	brne	.-4      	; 0x6f62 <menu_beep+0x1a>
    6f66:	00 c0       	rjmp	.+0      	; 0x6f68 <menu_beep+0x20>
    6f68:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    6f6a:	9f 5f       	subi	r25, 0xFF	; 255
    6f6c:	ee cf       	rjmp	.-36     	; 0x6f4a <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    6f6e:	08 95       	ret

00006f70 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint16_t items, uint16_t start, uint16_t offset, uint8_t button, uint16_t* cursor, uint16_t* top, uint16_t* temp)
{
    6f70:	6f 92       	push	r6
    6f72:	7f 92       	push	r7
    6f74:	8f 92       	push	r8
    6f76:	9f 92       	push	r9
    6f78:	af 92       	push	r10
    6f7a:	bf 92       	push	r11
    6f7c:	cf 92       	push	r12
    6f7e:	df 92       	push	r13
    6f80:	ef 92       	push	r14
    6f82:	ff 92       	push	r15
    6f84:	0f 93       	push	r16
    6f86:	1f 93       	push	r17
    6f88:	cf 93       	push	r28
    6f8a:	df 93       	push	r29
    6f8c:	5c 01       	movw	r10, r24
    6f8e:	4b 01       	movw	r8, r22
    6f90:	3a 01       	movw	r6, r20
    6f92:	e8 01       	movw	r28, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    6f94:	d7 01       	movw	r26, r14
    6f96:	ed 91       	ld	r30, X+
    6f98:	fc 91       	ld	r31, X
    6f9a:	11 97       	sbiw	r26, 0x01	; 1
    6f9c:	e4 0f       	add	r30, r20
    6f9e:	f5 1f       	adc	r31, r21
    6fa0:	ed 93       	st	X+, r30
    6fa2:	fc 93       	st	X, r31
	start = start + offset;
    6fa4:	84 0e       	add	r8, r20
    6fa6:	95 1e       	adc	r9, r21

	// Calculate which function has been requested
	if (button == ENTER)
    6fa8:	20 3e       	cpi	r18, 0xE0	; 224
    6faa:	c1 f4       	brne	.+48     	; 0x6fdc <update_menu+0x6c>
	{
		switch(*cursor) 
    6fac:	88 81       	ld	r24, Y
    6fae:	99 81       	ldd	r25, Y+1	; 0x01
    6fb0:	8f 30       	cpi	r24, 0x0F	; 15
    6fb2:	91 05       	cpc	r25, r1
    6fb4:	61 f0       	breq	.+24     	; 0x6fce <update_menu+0x5e>
    6fb6:	18 f4       	brcc	.+6      	; 0x6fbe <update_menu+0x4e>
    6fb8:	03 97       	sbiw	r24, 0x03	; 3
    6fba:	51 f0       	breq	.+20     	; 0x6fd0 <update_menu+0x60>
    6fbc:	55 c0       	rjmp	.+170    	; 0x7068 <update_menu+0xf8>
    6fbe:	8b 31       	cpi	r24, 0x1B	; 27
    6fc0:	91 05       	cpc	r25, r1
    6fc2:	51 f0       	breq	.+20     	; 0x6fd8 <update_menu+0x68>
    6fc4:	87 97       	sbiw	r24, 0x27	; 39
    6fc6:	09 f0       	breq	.+2      	; 0x6fca <update_menu+0x5a>
    6fc8:	4f c0       	rjmp	.+158    	; 0x7068 <update_menu+0xf8>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    6fca:	33 96       	adiw	r30, 0x03	; 3
    6fcc:	01 c0       	rjmp	.+2      	; 0x6fd0 <update_menu+0x60>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    6fce:	31 96       	adiw	r30, 0x01	; 1
    6fd0:	d6 01       	movw	r26, r12
    6fd2:	ed 93       	st	X+, r30
    6fd4:	fc 93       	st	X, r31
				break;	
    6fd6:	48 c0       	rjmp	.+144    	; 0x7068 <update_menu+0xf8>
			case LINE2:
				*temp = *top + 2;
    6fd8:	32 96       	adiw	r30, 0x02	; 2
    6fda:	fa cf       	rjmp	.-12     	; 0x6fd0 <update_menu+0x60>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    6fdc:	20 3d       	cpi	r18, 0xD0	; 208
    6fde:	39 f5       	brne	.+78     	; 0x702e <update_menu+0xbe>
	{
		switch(*cursor) 
    6fe0:	88 81       	ld	r24, Y
    6fe2:	99 81       	ldd	r25, Y+1	; 0x01
    6fe4:	8f 30       	cpi	r24, 0x0F	; 15
    6fe6:	91 05       	cpc	r25, r1
    6fe8:	79 f0       	breq	.+30     	; 0x7008 <update_menu+0x98>
    6fea:	18 f4       	brcc	.+6      	; 0x6ff2 <update_menu+0x82>
    6fec:	03 97       	sbiw	r24, 0x03	; 3
    6fee:	39 f0       	breq	.+14     	; 0x6ffe <update_menu+0x8e>
    6ff0:	1b c0       	rjmp	.+54     	; 0x7028 <update_menu+0xb8>
    6ff2:	8b 31       	cpi	r24, 0x1B	; 27
    6ff4:	91 05       	cpc	r25, r1
    6ff6:	69 f0       	breq	.+26     	; 0x7012 <update_menu+0xa2>
    6ff8:	87 97       	sbiw	r24, 0x27	; 39
    6ffa:	91 f0       	breq	.+36     	; 0x7020 <update_menu+0xb0>
    6ffc:	15 c0       	rjmp	.+42     	; 0x7028 <update_menu+0xb8>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    6ffe:	b2 e0       	ldi	r27, 0x02	; 2
    7000:	ab 16       	cp	r10, r27
    7002:	b1 04       	cpc	r11, r1
    7004:	20 f5       	brcc	.+72     	; 0x704e <update_menu+0xde>
    7006:	30 c0       	rjmp	.+96     	; 0x7068 <update_menu+0xf8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    7008:	e3 e0       	ldi	r30, 0x03	; 3
    700a:	ae 16       	cp	r10, r30
    700c:	b1 04       	cpc	r11, r1
    700e:	60 f1       	brcs	.+88     	; 0x7068 <update_menu+0xf8>
    7010:	1b c0       	rjmp	.+54     	; 0x7048 <update_menu+0xd8>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    7012:	f4 e0       	ldi	r31, 0x04	; 4
    7014:	af 16       	cp	r10, r31
    7016:	b1 04       	cpc	r11, r1
    7018:	38 f1       	brcs	.+78     	; 0x7068 <update_menu+0xf8>
    701a:	87 e2       	ldi	r24, 0x27	; 39
    701c:	90 e0       	ldi	r25, 0x00	; 0
    701e:	1f c0       	rjmp	.+62     	; 0x705e <update_menu+0xee>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    7020:	25 e0       	ldi	r18, 0x05	; 5
    7022:	a2 16       	cp	r10, r18
    7024:	b1 04       	cpc	r11, r1
    7026:	00 f1       	brcs	.+64     	; 0x7068 <update_menu+0xf8>
				break;
			default:
				*cursor = NEXTLINE;
    7028:	88 e2       	ldi	r24, 0x28	; 40
    702a:	90 e0       	ldi	r25, 0x00	; 0
    702c:	18 c0       	rjmp	.+48     	; 0x705e <update_menu+0xee>
				break;
		}
	}

	if (button == UP)	
    702e:	20 3b       	cpi	r18, 0xB0	; 176
    7030:	c9 f4       	brne	.+50     	; 0x7064 <update_menu+0xf4>
	{
		switch(*cursor) 
    7032:	88 81       	ld	r24, Y
    7034:	99 81       	ldd	r25, Y+1	; 0x01
    7036:	8f 30       	cpi	r24, 0x0F	; 15
    7038:	91 05       	cpc	r25, r1
    703a:	61 f0       	breq	.+24     	; 0x7054 <update_menu+0xe4>
    703c:	70 f0       	brcs	.+28     	; 0x705a <update_menu+0xea>
    703e:	8b 31       	cpi	r24, 0x1B	; 27
    7040:	91 05       	cpc	r25, r1
    7042:	29 f0       	breq	.+10     	; 0x704e <update_menu+0xde>
    7044:	87 97       	sbiw	r24, 0x27	; 39
    7046:	49 f4       	brne	.+18     	; 0x705a <update_menu+0xea>
		{
			case LINE3:
				*cursor = LINE2;
    7048:	8b e1       	ldi	r24, 0x1B	; 27
    704a:	90 e0       	ldi	r25, 0x00	; 0
    704c:	08 c0       	rjmp	.+16     	; 0x705e <update_menu+0xee>
				break;	
			case LINE2:
				*cursor = LINE1;
    704e:	8f e0       	ldi	r24, 0x0F	; 15
    7050:	90 e0       	ldi	r25, 0x00	; 0
    7052:	05 c0       	rjmp	.+10     	; 0x705e <update_menu+0xee>
				break;
			case LINE1:
				*cursor = LINE0;
    7054:	83 e0       	ldi	r24, 0x03	; 3
    7056:	90 e0       	ldi	r25, 0x00	; 0
    7058:	02 c0       	rjmp	.+4      	; 0x705e <update_menu+0xee>
				break;
			case LINE0:
				*cursor = PREVLINE;
    705a:	82 e0       	ldi	r24, 0x02	; 2
    705c:	90 e0       	ldi	r25, 0x00	; 0
    705e:	99 83       	std	Y+1, r25	; 0x01
    7060:	88 83       	st	Y, r24
				break;
    7062:	02 c0       	rjmp	.+4      	; 0x7068 <update_menu+0xf8>
				*cursor = PREVLINE;
				break;
		}
	}

	if (button != NONE)	
    7064:	20 3f       	cpi	r18, 0xF0	; 240
    7066:	61 f0       	breq	.+24     	; 0x7080 <update_menu+0x110>
	{
		menu_beep(1);
    7068:	81 e0       	ldi	r24, 0x01	; 1
    706a:	0e 94 a4 37 	call	0x6f48	; 0x6f48 <menu_beep>
    706e:	4f ef       	ldi	r20, 0xFF	; 255
    7070:	84 e3       	ldi	r24, 0x34	; 52
    7072:	9c e0       	ldi	r25, 0x0C	; 12
    7074:	41 50       	subi	r20, 0x01	; 1
    7076:	80 40       	sbci	r24, 0x00	; 0
    7078:	90 40       	sbci	r25, 0x00	; 0
    707a:	e1 f7       	brne	.-8      	; 0x7074 <update_menu+0x104>
    707c:	00 c0       	rjmp	.+0      	; 0x707e <update_menu+0x10e>
    707e:	00 00       	nop
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    7080:	88 81       	ld	r24, Y
    7082:	99 81       	ldd	r25, Y+1	; 0x01
    7084:	02 97       	sbiw	r24, 0x02	; 2
    7086:	71 f4       	brne	.+28     	; 0x70a4 <update_menu+0x134>
	{
		*cursor  = LINE0;
    7088:	83 e0       	ldi	r24, 0x03	; 3
    708a:	90 e0       	ldi	r25, 0x00	; 0
    708c:	99 83       	std	Y+1, r25	; 0x01
    708e:	88 83       	st	Y, r24
		if (*top > start) 
    7090:	d7 01       	movw	r26, r14
    7092:	8d 91       	ld	r24, X+
    7094:	9c 91       	ld	r25, X
    7096:	11 97       	sbiw	r26, 0x01	; 1
    7098:	88 16       	cp	r8, r24
    709a:	99 06       	cpc	r9, r25
    709c:	18 f4       	brcc	.+6      	; 0x70a4 <update_menu+0x134>
		{
			*top = *top - 1;								// Shuffle list up
    709e:	01 97       	sbiw	r24, 0x01	; 1
    70a0:	8d 93       	st	X+, r24
    70a2:	9c 93       	st	X, r25
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    70a4:	88 81       	ld	r24, Y
    70a6:	99 81       	ldd	r25, Y+1	; 0x01
    70a8:	88 97       	sbiw	r24, 0x28	; 40
    70aa:	b1 f4       	brne	.+44     	; 0x70d8 <update_menu+0x168>
	{
		*cursor  = LINE3;
    70ac:	87 e2       	ldi	r24, 0x27	; 39
    70ae:	90 e0       	ldi	r25, 0x00	; 0
    70b0:	99 83       	std	Y+1, r25	; 0x01
    70b2:	88 83       	st	Y, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    70b4:	f7 01       	movw	r30, r14
    70b6:	80 81       	ld	r24, Z
    70b8:	91 81       	ldd	r25, Z+1	; 0x01
    70ba:	9c 01       	movw	r18, r24
    70bc:	2d 5f       	subi	r18, 0xFD	; 253
    70be:	3f 4f       	sbci	r19, 0xFF	; 255
    70c0:	f1 e0       	ldi	r31, 0x01	; 1
    70c2:	af 1a       	sub	r10, r31
    70c4:	b1 08       	sbc	r11, r1
    70c6:	a8 0c       	add	r10, r8
    70c8:	b9 1c       	adc	r11, r9
    70ca:	2a 15       	cp	r18, r10
    70cc:	3b 05       	cpc	r19, r11
    70ce:	20 f4       	brcc	.+8      	; 0x70d8 <update_menu+0x168>
		{
			*top = *top + 1;								// Shuffle list down
    70d0:	01 96       	adiw	r24, 0x01	; 1
    70d2:	d7 01       	movw	r26, r14
    70d4:	8d 93       	st	X+, r24
    70d6:	9c 93       	st	X, r25
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    70d8:	f7 01       	movw	r30, r14
    70da:	80 81       	ld	r24, Z
    70dc:	91 81       	ldd	r25, Z+1	; 0x01
    70de:	86 19       	sub	r24, r6
    70e0:	97 09       	sbc	r25, r7
    70e2:	91 83       	std	Z+1, r25	; 0x01
    70e4:	80 83       	st	Z, r24
}
    70e6:	df 91       	pop	r29
    70e8:	cf 91       	pop	r28
    70ea:	1f 91       	pop	r17
    70ec:	0f 91       	pop	r16
    70ee:	ff 90       	pop	r15
    70f0:	ef 90       	pop	r14
    70f2:	df 90       	pop	r13
    70f4:	cf 90       	pop	r12
    70f6:	bf 90       	pop	r11
    70f8:	af 90       	pop	r10
    70fa:	9f 90       	pop	r9
    70fc:	8f 90       	pop	r8
    70fe:	7f 90       	pop	r7
    7100:	6f 90       	pop	r6
    7102:	08 95       	ret

00007104 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    7104:	28 2f       	mov	r18, r24
    7106:	30 e0       	ldi	r19, 0x00	; 0
    7108:	43 e0       	ldi	r20, 0x03	; 3
    710a:	50 e0       	ldi	r21, 0x00	; 0
    710c:	69 e0       	ldi	r22, 0x09	; 9
    710e:	71 e0       	ldi	r23, 0x01	; 1
    7110:	8d e0       	ldi	r24, 0x0D	; 13
    7112:	90 e0       	ldi	r25, 0x00	; 0
    7114:	0c 94 e6 27 	jmp	0x4fcc	; 0x4fcc <LCD_Display_Text>

00007118 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint16_t MenuOffsets, const uint16_t* text_link, uint16_t cursor)
{
    7118:	2f 92       	push	r2
    711a:	3f 92       	push	r3
    711c:	4f 92       	push	r4
    711e:	5f 92       	push	r5
    7120:	6f 92       	push	r6
    7122:	7f 92       	push	r7
    7124:	8f 92       	push	r8
    7126:	9f 92       	push	r9
    7128:	af 92       	push	r10
    712a:	bf 92       	push	r11
    712c:	cf 92       	push	r12
    712e:	df 92       	push	r13
    7130:	ef 92       	push	r14
    7132:	ff 92       	push	r15
    7134:	0f 93       	push	r16
    7136:	1f 93       	push	r17
    7138:	cf 93       	push	r28
    713a:	df 93       	push	r29
    713c:	cd b7       	in	r28, 0x3d	; 61
    713e:	de b7       	in	r29, 0x3e	; 62
    7140:	2c 97       	sbiw	r28, 0x0c	; 12
    7142:	0f b6       	in	r0, 0x3f	; 63
    7144:	f8 94       	cli
    7146:	de bf       	out	0x3e, r29	; 62
    7148:	0f be       	out	0x3f, r0	; 63
    714a:	cd bf       	out	0x3d, r28	; 61
    714c:	2c 01       	movw	r4, r24
    714e:	4a 01       	movw	r8, r20
    7150:	3f 83       	std	Y+7, r19	; 0x07
    7152:	2e 83       	std	Y+6, r18	; 0x06
    7154:	08 87       	std	Y+8, r16	; 0x08
    7156:	e9 86       	std	Y+9, r14	; 0x09
    7158:	aa 86       	std	Y+10, r10	; 0x0a
	uint16_t base = 0;
	uint16_t offset = 0;
	uint16_t text = 0;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    715a:	80 e0       	ldi	r24, 0x00	; 0
    715c:	91 e0       	ldi	r25, 0x01	; 1
    715e:	6b 87       	std	Y+11, r22	; 0x0b
    7160:	7c 87       	std	Y+12, r23	; 0x0c
    7162:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>
	print_menu_frame(BASIC);
    7166:	80 e0       	ldi	r24, 0x00	; 0
    7168:	0e 94 e5 34 	call	0x69ca	; 0x69ca <print_menu_frame>
    716c:	25 e0       	ldi	r18, 0x05	; 5
    716e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7170:	7c 85       	ldd	r23, Y+12	; 0x0c
    7172:	26 9f       	mul	r18, r22
    7174:	c0 01       	movw	r24, r0
    7176:	27 9f       	mul	r18, r23
    7178:	90 0d       	add	r25, r0
    717a:	11 24       	eor	r1, r1
    717c:	2e 80       	ldd	r2, Y+6	; 0x06
    717e:	3f 80       	ldd	r3, Y+7	; 0x07
    7180:	28 1a       	sub	r2, r24
    7182:	39 0a       	sbc	r3, r25
    7184:	24 9d       	mul	r18, r4
    7186:	c0 01       	movw	r24, r0
    7188:	25 9d       	mul	r18, r5
    718a:	90 0d       	add	r25, r0
    718c:	11 24       	eor	r1, r1
    718e:	28 0e       	add	r2, r24
    7190:	39 1e       	adc	r3, r25
    7192:	cb 01       	movw	r24, r22
    7194:	88 0f       	add	r24, r24
    7196:	99 1f       	adc	r25, r25
    7198:	c8 1a       	sub	r12, r24
    719a:	d9 0a       	sbc	r13, r25
    719c:	c2 01       	movw	r24, r4
    719e:	88 0f       	add	r24, r24
    71a0:	99 1f       	adc	r25, r25
    71a2:	c8 0e       	add	r12, r24
    71a4:	d9 1e       	adc	r13, r25
    71a6:	72 01       	movw	r14, r4
    71a8:	a1 2c       	mov	r10, r1
    71aa:	b1 2c       	mov	r11, r1
    71ac:	41 2c       	mov	r4, r1
    71ae:	51 2c       	mov	r5, r1
    71b0:	83 e9       	ldi	r24, 0x93	; 147
    71b2:	68 2e       	mov	r6, r24
    71b4:	8b e1       	ldi	r24, 0x1B	; 27
    71b6:	78 2e       	mov	r7, r24
    71b8:	6e 18       	sub	r6, r14
    71ba:	7f 08       	sbc	r7, r15
    71bc:	86 1a       	sub	r8, r22
    71be:	97 0a       	sbc	r9, r23
    71c0:	83 01       	movw	r16, r6
    71c2:	0e 0d       	add	r16, r14
    71c4:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    71c6:	f8 01       	movw	r30, r16
    71c8:	24 91       	lpm	r18, Z
    71ca:	30 e0       	ldi	r19, 0x00	; 0
    71cc:	4a e0       	ldi	r20, 0x0A	; 10
    71ce:	50 e0       	ldi	r21, 0x00	; 0
    71d0:	67 e9       	ldi	r22, 0x97	; 151
    71d2:	7c e0       	ldi	r23, 0x0C	; 12
    71d4:	c7 01       	movw	r24, r14
    71d6:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    71da:	f8 85       	ldd	r31, Y+8	; 0x08
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    71dc:	45 e0       	ldi	r20, 0x05	; 5
    71de:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    71e0:	f1 11       	cpse	r31, r1
    71e2:	04 c0       	rjmp	.+8      	; 0x71ec <print_menu_items+0xd4>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    71e4:	b5 01       	movw	r22, r10
    71e6:	62 0d       	add	r22, r2
    71e8:	73 1d       	adc	r23, r3
    71ea:	02 c0       	rjmp	.+4      	; 0x71f0 <print_menu_items+0xd8>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    71ec:	6e 81       	ldd	r22, Y+6	; 0x06
    71ee:	7f 81       	ldd	r23, Y+7	; 0x07
    71f0:	ce 01       	movw	r24, r28
    71f2:	01 96       	adiw	r24, 0x01	; 1
    71f4:	0e 94 84 51 	call	0xa308	; 0xa308 <memcpy_P>
    71f8:	f2 01       	movw	r30, r4
    71fa:	ec 0d       	add	r30, r12
    71fc:	fd 1d       	adc	r31, r13
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
    71fe:	45 91       	lpm	r20, Z+
    7200:	54 91       	lpm	r21, Z
    7202:	f4 01       	movw	r30, r8
    7204:	ee 0d       	add	r30, r14
    7206:	ff 1d       	adc	r31, r15
		offset = values[top + i - start];
    7208:	80 81       	ld	r24, Z
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    720a:	f8 01       	movw	r30, r16
    720c:	04 91       	lpm	r16, Z
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
		offset = values[top + i - start];
    720e:	99 27       	eor	r25, r25
    7210:	87 fd       	sbrc	r24, 7
    7212:	90 95       	com	r25
		text = base + offset;
    7214:	48 0f       	add	r20, r24
    7216:	59 1f       	adc	r21, r25
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    7218:	29 85       	ldd	r18, Y+9	; 0x09
    721a:	6c 81       	ldd	r22, Y+4	; 0x04
    721c:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <print_menu_text>
    7220:	ff ef       	ldi	r31, 0xFF	; 255
    7222:	ef 1a       	sub	r14, r31
    7224:	ff 0a       	sbc	r15, r31
    7226:	82 e0       	ldi	r24, 0x02	; 2
    7228:	48 0e       	add	r4, r24
    722a:	51 1c       	adc	r5, r1
    722c:	e5 e0       	ldi	r30, 0x05	; 5
    722e:	ae 0e       	add	r10, r30
    7230:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(BASIC);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    7232:	f4 e1       	ldi	r31, 0x14	; 20
    7234:	af 16       	cp	r10, r31
    7236:	b1 04       	cpc	r11, r1
    7238:	09 f0       	breq	.+2      	; 0x723c <print_menu_items+0x124>
    723a:	c2 cf       	rjmp	.-124    	; 0x71c0 <print_menu_items+0xa8>
		text = base + offset;
		
		print_menu_text((values[top+i - start]), range1.style, text, MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    723c:	8a 85       	ldd	r24, Y+10	; 0x0a
    723e:	0e 94 82 38 	call	0x7104	; 0x7104 <print_cursor>
	write_buffer(buffer);
    7242:	80 e0       	ldi	r24, 0x00	; 0
    7244:	91 e0       	ldi	r25, 0x01	; 1
    7246:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>
	poll_buttons(true);
    724a:	81 e0       	ldi	r24, 0x01	; 1
    724c:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <poll_buttons>
}
    7250:	2c 96       	adiw	r28, 0x0c	; 12
    7252:	0f b6       	in	r0, 0x3f	; 63
    7254:	f8 94       	cli
    7256:	de bf       	out	0x3e, r29	; 62
    7258:	0f be       	out	0x3f, r0	; 63
    725a:	cd bf       	out	0x3d, r28	; 61
    725c:	df 91       	pop	r29
    725e:	cf 91       	pop	r28
    7260:	1f 91       	pop	r17
    7262:	0f 91       	pop	r16
    7264:	ff 90       	pop	r15
    7266:	ef 90       	pop	r14
    7268:	df 90       	pop	r13
    726a:	cf 90       	pop	r12
    726c:	bf 90       	pop	r11
    726e:	af 90       	pop	r10
    7270:	9f 90       	pop	r9
    7272:	8f 90       	pop	r8
    7274:	7f 90       	pop	r7
    7276:	6f 90       	pop	r6
    7278:	5f 90       	pop	r5
    727a:	4f 90       	pop	r4
    727c:	3f 90       	pop	r3
    727e:	2f 90       	pop	r2
    7280:	08 95       	ret

00007282 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    7282:	6f 92       	push	r6
    7284:	7f 92       	push	r7
    7286:	8f 92       	push	r8
    7288:	af 92       	push	r10
    728a:	bf 92       	push	r11
    728c:	cf 92       	push	r12
    728e:	df 92       	push	r13
    7290:	ef 92       	push	r14
    7292:	ff 92       	push	r15
    7294:	0f 93       	push	r16
    7296:	1f 93       	push	r17
    7298:	cf 93       	push	r28
    729a:	df 93       	push	r29
    729c:	00 d0       	rcall	.+0      	; 0x729e <menu_flight+0x1c>
    729e:	00 d0       	rcall	.+0      	; 0x72a0 <menu_flight+0x1e>
    72a0:	1f 92       	push	r1
    72a2:	cd b7       	in	r28, 0x3d	; 61
    72a4:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    72a6:	90 91 29 08 	lds	r25, 0x0829
    72aa:	99 23       	and	r25, r25
    72ac:	41 f0       	breq	.+16     	; 0x72be <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    72ae:	2a ea       	ldi	r18, 0xAA	; 170
    72b0:	30 e0       	ldi	r19, 0x00	; 0
    72b2:	30 93 37 05 	sts	0x0537, r19
    72b6:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    72ba:	10 92 29 08 	sts	0x0829, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    72be:	92 e1       	ldi	r25, 0x12	; 18
    72c0:	89 9f       	mul	r24, r25
    72c2:	30 01       	movw	r6, r0
    72c4:	11 24       	eor	r1, r1
    72c6:	c3 01       	movw	r24, r6
    72c8:	87 5f       	subi	r24, 0xF7	; 247
    72ca:	99 4f       	sbci	r25, 0xF9	; 249
    72cc:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    72ce:	80 91 27 08 	lds	r24, 0x0827
    72d2:	80 37       	cpi	r24, 0x70	; 112
    72d4:	09 f4       	brne	.+2      	; 0x72d8 <menu_flight+0x56>
    72d6:	66 c0       	rjmp	.+204    	; 0x73a4 <menu_flight+0x122>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const uint16_t*)FlightMenuText, cursor);
    72d8:	a0 90 04 05 	lds	r10, 0x0504
    72dc:	b0 90 05 05 	lds	r11, 0x0505
    72e0:	31 ef       	ldi	r19, 0xF1	; 241
    72e2:	c3 2e       	mov	r12, r19
    72e4:	3b e1       	ldi	r19, 0x1B	; 27
    72e6:	d3 2e       	mov	r13, r19
    72e8:	4f e4       	ldi	r20, 0x4F	; 79
    72ea:	e4 2e       	mov	r14, r20
    72ec:	f1 2c       	mov	r15, r1
    72ee:	00 e0       	ldi	r16, 0x00	; 0
    72f0:	27 e9       	ldi	r18, 0x97	; 151
    72f2:	3b e1       	ldi	r19, 0x1B	; 27
    72f4:	a3 01       	movw	r20, r6
    72f6:	6a ea       	ldi	r22, 0xAA	; 170
    72f8:	70 e0       	ldi	r23, 0x00	; 0
    72fa:	80 91 36 05 	lds	r24, 0x0536
    72fe:	90 91 37 05 	lds	r25, 0x0537
    7302:	0e 94 8c 38 	call	0x7118	; 0x7118 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    7306:	51 e3       	ldi	r21, 0x31	; 49
    7308:	c5 2e       	mov	r12, r21
    730a:	55 e0       	ldi	r21, 0x05	; 5
    730c:	d5 2e       	mov	r13, r21
    730e:	66 e3       	ldi	r22, 0x36	; 54
    7310:	e6 2e       	mov	r14, r22
    7312:	65 e0       	ldi	r22, 0x05	; 5
    7314:	f6 2e       	mov	r15, r22
    7316:	04 e0       	ldi	r16, 0x04	; 4
    7318:	15 e0       	ldi	r17, 0x05	; 5
    731a:	20 91 27 08 	lds	r18, 0x0827
    731e:	40 e0       	ldi	r20, 0x00	; 0
    7320:	50 e0       	ldi	r21, 0x00	; 0
    7322:	6a ea       	ldi	r22, 0xAA	; 170
    7324:	70 e0       	ldi	r23, 0x00	; 0
    7326:	82 e1       	ldi	r24, 0x12	; 18
    7328:	90 e0       	ldi	r25, 0x00	; 0
    732a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    732e:	60 91 31 05 	lds	r22, 0x0531
    7332:	6a 5a       	subi	r22, 0xAA	; 170
    7334:	87 e9       	ldi	r24, 0x97	; 151
    7336:	9b e1       	ldi	r25, 0x1B	; 27
    7338:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <get_menu_range>
    733c:	29 83       	std	Y+1, r18	; 0x01
    733e:	3a 83       	std	Y+2, r19	; 0x02
    7340:	4b 83       	std	Y+3, r20	; 0x03
    7342:	5c 83       	std	Y+4, r21	; 0x04
    7344:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    7346:	80 91 27 08 	lds	r24, 0x0827
    734a:	80 3e       	cpi	r24, 0xE0	; 224
    734c:	f9 f4       	brne	.+62     	; 0x738c <menu_flight+0x10a>
		{
			text_link = pgm_read_word(&FlightMenuText[menu_temp - FLIGHTSTART]);
    734e:	80 91 31 05 	lds	r24, 0x0531
    7352:	90 91 32 05 	lds	r25, 0x0532
    7356:	bc 01       	movw	r22, r24
    7358:	6a 5a       	subi	r22, 0xAA	; 170
    735a:	71 09       	sbc	r23, r1
    735c:	fb 01       	movw	r30, r22
    735e:	ee 0f       	add	r30, r30
    7360:	ff 1f       	adc	r31, r31
    7362:	ef 50       	subi	r30, 0x0F	; 15
    7364:	f4 4e       	sbci	r31, 0xE4	; 228
    7366:	a5 90       	lpm	r10, Z+
    7368:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    736a:	bb 24       	eor	r11, r11
    736c:	66 0d       	add	r22, r6
    736e:	77 1d       	adc	r23, r7
    7370:	1f 92       	push	r1
    7372:	1f 92       	push	r1
    7374:	81 2c       	mov	r8, r1
    7376:	c1 2c       	mov	r12, r1
    7378:	e9 80       	ldd	r14, Y+1	; 0x01
    737a:	fa 80       	ldd	r15, Y+2	; 0x02
    737c:	0b 81       	ldd	r16, Y+3	; 0x03
    737e:	1c 81       	ldd	r17, Y+4	; 0x04
    7380:	2d 81       	ldd	r18, Y+5	; 0x05
    7382:	41 e0       	ldi	r20, 0x01	; 1
    7384:	0e 94 d7 35 	call	0x6bae	; 0x6bae <do_menu_item>
    7388:	0f 90       	pop	r0
    738a:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    738c:	80 91 27 08 	lds	r24, 0x0827
    7390:	80 3e       	cpi	r24, 0xE0	; 224
    7392:	09 f0       	breq	.+2      	; 0x7396 <menu_flight+0x114>
    7394:	9c cf       	rjmp	.-200    	; 0x72ce <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    7396:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    739a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    739e:	0e 94 b3 3a 	call	0x7566	; 0x7566 <Wait_BUTTON4>
    73a2:	95 cf       	rjmp	.-214    	; 0x72ce <menu_flight+0x4c>
		}
	}
}
    73a4:	0f 90       	pop	r0
    73a6:	0f 90       	pop	r0
    73a8:	0f 90       	pop	r0
    73aa:	0f 90       	pop	r0
    73ac:	0f 90       	pop	r0
    73ae:	df 91       	pop	r29
    73b0:	cf 91       	pop	r28
    73b2:	1f 91       	pop	r17
    73b4:	0f 91       	pop	r16
    73b6:	ff 90       	pop	r15
    73b8:	ef 90       	pop	r14
    73ba:	df 90       	pop	r13
    73bc:	cf 90       	pop	r12
    73be:	bf 90       	pop	r11
    73c0:	af 90       	pop	r10
    73c2:	8f 90       	pop	r8
    73c4:	7f 90       	pop	r7
    73c6:	6f 90       	pop	r6
    73c8:	08 95       	ret

000073ca <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    73ca:	90 e0       	ldi	r25, 0x00	; 0
    73cc:	fc 01       	movw	r30, r24
    73ce:	ed 54       	subi	r30, 0x4D	; 77
    73d0:	f1 09       	sbc	r31, r1
    73d2:	e4 31       	cpi	r30, 0x14	; 20
    73d4:	f1 05       	cpc	r31, r1
    73d6:	80 f5       	brcc	.+96     	; 0x7438 <do_main_menu_item+0x6e>
    73d8:	e7 5b       	subi	r30, 0xB7	; 183
    73da:	ff 4f       	sbci	r31, 0xFF	; 255
    73dc:	0c 94 4d 51 	jmp	0xa29a	; 0xa29a <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    73e0:	82 e0       	ldi	r24, 0x02	; 2
    73e2:	01 c0       	rjmp	.+2      	; 0x73e6 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    73e4:	81 e0       	ldi	r24, 0x01	; 1
    73e6:	0c 94 5f 3c 	jmp	0x78be	; 0x78be <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    73ea:	0c 94 05 14 	jmp	0x280a	; 0x280a <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    73ee:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    73f2:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    73f6:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    73fa:	80 e0       	ldi	r24, 0x00	; 0
    73fc:	01 c0       	rjmp	.+2      	; 0x7400 <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    73fe:	81 e0       	ldi	r24, 0x01	; 1
    7400:	0c 94 41 39 	jmp	0x7282	; 0x7282 <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    7404:	80 e0       	ldi	r24, 0x00	; 0
    7406:	01 c0       	rjmp	.+2      	; 0x740a <do_main_menu_item+0x40>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    7408:	81 e0       	ldi	r24, 0x01	; 1
    740a:	0c 94 c0 3a 	jmp	0x7580	; 0x7580 <menu_mixer>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    740e:	82 e0       	ldi	r24, 0x02	; 2
    7410:	fc cf       	rjmp	.-8      	; 0x740a <do_main_menu_item+0x40>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    7412:	83 e0       	ldi	r24, 0x03	; 3
    7414:	fa cf       	rjmp	.-12     	; 0x740a <do_main_menu_item+0x40>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    7416:	84 e0       	ldi	r24, 0x04	; 4
    7418:	f8 cf       	rjmp	.-16     	; 0x740a <do_main_menu_item+0x40>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    741a:	85 e0       	ldi	r24, 0x05	; 5
    741c:	f6 cf       	rjmp	.-20     	; 0x740a <do_main_menu_item+0x40>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    741e:	86 e0       	ldi	r24, 0x06	; 6
    7420:	f4 cf       	rjmp	.-24     	; 0x740a <do_main_menu_item+0x40>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    7422:	87 e0       	ldi	r24, 0x07	; 7
    7424:	f2 cf       	rjmp	.-28     	; 0x740a <do_main_menu_item+0x40>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    7426:	81 e0       	ldi	r24, 0x01	; 1
    7428:	03 c0       	rjmp	.+6      	; 0x7430 <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    742a:	82 e0       	ldi	r24, 0x02	; 2
    742c:	01 c0       	rjmp	.+2      	; 0x7430 <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    742e:	83 e0       	ldi	r24, 0x03	; 3
    7430:	0c 94 64 3b 	jmp	0x76c8	; 0x76c8 <menu_servo_setup>
			break;
		case MAINSTART+19:
			menu_log();				// 20. Error log
    7434:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <menu_log>
    7438:	08 95       	ret

0000743a <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    743a:	1f 99       	sbic	0x03, 7	; 3
    743c:	0a c0       	rjmp	.+20     	; 0x7452 <Wait_BUTTON1+0x18>
    743e:	2f e3       	ldi	r18, 0x3F	; 63
    7440:	8d e0       	ldi	r24, 0x0D	; 13
    7442:	93 e0       	ldi	r25, 0x03	; 3
    7444:	21 50       	subi	r18, 0x01	; 1
    7446:	80 40       	sbci	r24, 0x00	; 0
    7448:	90 40       	sbci	r25, 0x00	; 0
    744a:	e1 f7       	brne	.-8      	; 0x7444 <Wait_BUTTON1+0xa>
    744c:	00 c0       	rjmp	.+0      	; 0x744e <Wait_BUTTON1+0x14>
    744e:	00 00       	nop
    7450:	f4 cf       	rjmp	.-24     	; 0x743a <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    7452:	08 95       	ret

00007454 <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    7454:	9f 92       	push	r9
    7456:	af 92       	push	r10
    7458:	bf 92       	push	r11
    745a:	cf 92       	push	r12
    745c:	df 92       	push	r13
    745e:	ef 92       	push	r14
    7460:	ff 92       	push	r15
    7462:	0f 93       	push	r16
    7464:	1f 93       	push	r17
    7466:	cf 93       	push	r28
    7468:	df 93       	push	r29
	static uint16_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    746a:	80 ef       	ldi	r24, 0xF0	; 240
    746c:	80 93 27 08 	sts	0x0827, r24

	menu_beep(1);
    7470:	81 e0       	ldi	r24, 0x01	; 1
    7472:	0e 94 a4 37 	call	0x6f48	; 0x6f48 <menu_beep>

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    7476:	0e 94 1d 3a 	call	0x743a	; 0x743a <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    747a:	23 e0       	ldi	r18, 0x03	; 3
    747c:	a2 2e       	mov	r10, r18
    747e:	b1 2c       	mov	r11, r1

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    7480:	30 ef       	ldi	r19, 0xF0	; 240
    7482:	93 2e       	mov	r9, r19
	menu_beep(1);

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    7484:	80 91 27 08 	lds	r24, 0x0827
    7488:	80 37       	cpi	r24, 0x70	; 112
    748a:	09 f4       	brne	.+2      	; 0x748e <menu_main+0x3a>
    748c:	60 c0       	rjmp	.+192    	; 0x754e <menu_main+0xfa>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    748e:	80 e0       	ldi	r24, 0x00	; 0
    7490:	91 e0       	ldi	r25, 0x01	; 1
    7492:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <clear_buffer>

		// Print menu
		print_menu_frame(BASIC);													// Frame
    7496:	80 e0       	ldi	r24, 0x00	; 0
    7498:	0e 94 e5 34 	call	0x69ca	; 0x69ca <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    749c:	c0 e0       	ldi	r28, 0x00	; 0
    749e:	d0 e0       	ldi	r29, 0x00	; 0
    74a0:	fe 01       	movw	r30, r28
    74a2:	ed 56       	subi	r30, 0x6D	; 109
    74a4:	f4 4e       	sbci	r31, 0xE4	; 228
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    74a6:	24 91       	lpm	r18, Z
    74a8:	30 e0       	ldi	r19, 0x00	; 0
    74aa:	80 91 08 05 	lds	r24, 0x0508
    74ae:	90 91 09 05 	lds	r25, 0x0509
    74b2:	4a e0       	ldi	r20, 0x0A	; 10
    74b4:	50 e0       	ldi	r21, 0x00	; 0
    74b6:	67 e9       	ldi	r22, 0x97	; 151
    74b8:	7c e0       	ldi	r23, 0x0C	; 12
    74ba:	8c 0f       	add	r24, r28
    74bc:	9d 1f       	adc	r25, r29
    74be:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(BASIC);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    74c2:	21 96       	adiw	r28, 0x01	; 1
    74c4:	c4 30       	cpi	r28, 0x04	; 4
    74c6:	d1 05       	cpc	r29, r1
    74c8:	59 f7       	brne	.-42     	; 0x74a0 <menu_main+0x4c>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    74ca:	80 91 06 05 	lds	r24, 0x0506
    74ce:	0e 94 82 38 	call	0x7104	; 0x7104 <print_cursor>
		write_buffer(buffer);
    74d2:	80 e0       	ldi	r24, 0x00	; 0
    74d4:	91 e0       	ldi	r25, 0x01	; 1
    74d6:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    74da:	81 e0       	ldi	r24, 0x01	; 1
    74dc:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    74e0:	84 e3       	ldi	r24, 0x34	; 52
    74e2:	c8 2e       	mov	r12, r24
    74e4:	85 e0       	ldi	r24, 0x05	; 5
    74e6:	d8 2e       	mov	r13, r24
    74e8:	98 e0       	ldi	r25, 0x08	; 8
    74ea:	e9 2e       	mov	r14, r25
    74ec:	95 e0       	ldi	r25, 0x05	; 5
    74ee:	f9 2e       	mov	r15, r25
    74f0:	06 e0       	ldi	r16, 0x06	; 6
    74f2:	15 e0       	ldi	r17, 0x05	; 5
    74f4:	20 91 27 08 	lds	r18, 0x0827
    74f8:	40 e0       	ldi	r20, 0x00	; 0
    74fa:	50 e0       	ldi	r21, 0x00	; 0
    74fc:	6d e4       	ldi	r22, 0x4D	; 77
    74fe:	70 e0       	ldi	r23, 0x00	; 0
    7500:	84 e1       	ldi	r24, 0x14	; 20
    7502:	90 e0       	ldi	r25, 0x00	; 0
    7504:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    7508:	80 91 34 05 	lds	r24, 0x0534
    750c:	90 91 35 05 	lds	r25, 0x0535
    7510:	20 91 33 05 	lds	r18, 0x0533
    7514:	30 e0       	ldi	r19, 0x00	; 0
    7516:	82 17       	cp	r24, r18
    7518:	93 07       	cpc	r25, r19
    751a:	69 f0       	breq	.+26     	; 0x7536 <menu_main+0xe2>
		{
			cursor = LINE0;
    751c:	b0 92 05 05 	sts	0x0505, r11
    7520:	a0 92 04 05 	sts	0x0504, r10
			menu_temp = 0;
    7524:	10 92 32 05 	sts	0x0532, r1
    7528:	10 92 31 05 	sts	0x0531, r1
			old_menu = main_temp;
    752c:	80 93 33 05 	sts	0x0533, r24
			menu_flag = 1;
    7530:	21 e0       	ldi	r18, 0x01	; 1
    7532:	20 93 29 08 	sts	0x0829, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    7536:	20 91 27 08 	lds	r18, 0x0827
    753a:	20 3e       	cpi	r18, 0xE0	; 224
    753c:	09 f0       	breq	.+2      	; 0x7540 <menu_main+0xec>
    753e:	a2 cf       	rjmp	.-188    	; 0x7484 <menu_main+0x30>
		{
			do_main_menu_item(main_temp);
    7540:	0e 94 e5 39 	call	0x73ca	; 0x73ca <do_main_menu_item>
			button = NONE;
    7544:	90 92 27 08 	sts	0x0827, r9

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    7548:	0e 94 1d 3a 	call	0x743a	; 0x743a <Wait_BUTTON1>
    754c:	9b cf       	rjmp	.-202    	; 0x7484 <menu_main+0x30>
		}
	}
}
    754e:	df 91       	pop	r29
    7550:	cf 91       	pop	r28
    7552:	1f 91       	pop	r17
    7554:	0f 91       	pop	r16
    7556:	ff 90       	pop	r15
    7558:	ef 90       	pop	r14
    755a:	df 90       	pop	r13
    755c:	cf 90       	pop	r12
    755e:	bf 90       	pop	r11
    7560:	af 90       	pop	r10
    7562:	9f 90       	pop	r9
    7564:	08 95       	ret

00007566 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    7566:	1c 99       	sbic	0x03, 4	; 3
    7568:	0a c0       	rjmp	.+20     	; 0x757e <Wait_BUTTON4+0x18>
    756a:	2f e3       	ldi	r18, 0x3F	; 63
    756c:	8d e0       	ldi	r24, 0x0D	; 13
    756e:	93 e0       	ldi	r25, 0x03	; 3
    7570:	21 50       	subi	r18, 0x01	; 1
    7572:	80 40       	sbci	r24, 0x00	; 0
    7574:	90 40       	sbci	r25, 0x00	; 0
    7576:	e1 f7       	brne	.-8      	; 0x7570 <Wait_BUTTON4+0xa>
    7578:	00 c0       	rjmp	.+0      	; 0x757a <Wait_BUTTON4+0x14>
    757a:	00 00       	nop
    757c:	f4 cf       	rjmp	.-24     	; 0x7566 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    757e:	08 95       	ret

00007580 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    7580:	6f 92       	push	r6
    7582:	7f 92       	push	r7
    7584:	8f 92       	push	r8
    7586:	af 92       	push	r10
    7588:	bf 92       	push	r11
    758a:	cf 92       	push	r12
    758c:	df 92       	push	r13
    758e:	ef 92       	push	r14
    7590:	ff 92       	push	r15
    7592:	0f 93       	push	r16
    7594:	1f 93       	push	r17
    7596:	cf 93       	push	r28
    7598:	df 93       	push	r29
    759a:	00 d0       	rcall	.+0      	; 0x759c <menu_mixer+0x1c>
    759c:	00 d0       	rcall	.+0      	; 0x759e <menu_mixer+0x1e>
    759e:	1f 92       	push	r1
    75a0:	cd b7       	in	r28, 0x3d	; 61
    75a2:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    75a4:	90 91 29 08 	lds	r25, 0x0829
    75a8:	99 23       	and	r25, r25
    75aa:	41 f0       	breq	.+16     	; 0x75bc <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    75ac:	2e eb       	ldi	r18, 0xBE	; 190
    75ae:	30 e0       	ldi	r19, 0x00	; 0
    75b0:	30 93 37 05 	sts	0x0537, r19
    75b4:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    75b8:	10 92 29 08 	sts	0x0829, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    75bc:	96 e2       	ldi	r25, 0x26	; 38
    75be:	89 9f       	mul	r24, r25
    75c0:	30 01       	movw	r6, r0
    75c2:	11 24       	eor	r1, r1
    75c4:	c3 01       	movw	r24, r6
    75c6:	83 59       	subi	r24, 0x93	; 147
    75c8:	99 4f       	sbci	r25, 0xF9	; 249
    75ca:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    75cc:	80 91 27 08 	lds	r24, 0x0827
    75d0:	80 37       	cpi	r24, 0x70	; 112
    75d2:	09 f4       	brne	.+2      	; 0x75d6 <menu_mixer+0x56>
    75d4:	66 c0       	rjmp	.+204    	; 0x76a2 <menu_mixer+0x122>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const uint16_t*)MixerMenuText, cursor);
    75d6:	a0 90 04 05 	lds	r10, 0x0504
    75da:	b0 90 05 05 	lds	r11, 0x0505
    75de:	3f eb       	ldi	r19, 0xBF	; 191
    75e0:	c3 2e       	mov	r12, r19
    75e2:	3c e1       	ldi	r19, 0x1C	; 28
    75e4:	d3 2e       	mov	r13, r19
    75e6:	49 e5       	ldi	r20, 0x59	; 89
    75e8:	e4 2e       	mov	r14, r20
    75ea:	f1 2c       	mov	r15, r1
    75ec:	00 e0       	ldi	r16, 0x00	; 0
    75ee:	25 e1       	ldi	r18, 0x15	; 21
    75f0:	3c e1       	ldi	r19, 0x1C	; 28
    75f2:	a3 01       	movw	r20, r6
    75f4:	6e eb       	ldi	r22, 0xBE	; 190
    75f6:	70 e0       	ldi	r23, 0x00	; 0
    75f8:	80 91 36 05 	lds	r24, 0x0536
    75fc:	90 91 37 05 	lds	r25, 0x0537
    7600:	0e 94 8c 38 	call	0x7118	; 0x7118 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    7604:	51 e3       	ldi	r21, 0x31	; 49
    7606:	c5 2e       	mov	r12, r21
    7608:	55 e0       	ldi	r21, 0x05	; 5
    760a:	d5 2e       	mov	r13, r21
    760c:	66 e3       	ldi	r22, 0x36	; 54
    760e:	e6 2e       	mov	r14, r22
    7610:	65 e0       	ldi	r22, 0x05	; 5
    7612:	f6 2e       	mov	r15, r22
    7614:	04 e0       	ldi	r16, 0x04	; 4
    7616:	15 e0       	ldi	r17, 0x05	; 5
    7618:	20 91 27 08 	lds	r18, 0x0827
    761c:	40 e0       	ldi	r20, 0x00	; 0
    761e:	50 e0       	ldi	r21, 0x00	; 0
    7620:	6e eb       	ldi	r22, 0xBE	; 190
    7622:	70 e0       	ldi	r23, 0x00	; 0
    7624:	82 e2       	ldi	r24, 0x22	; 34
    7626:	90 e0       	ldi	r25, 0x00	; 0
    7628:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    762c:	60 91 31 05 	lds	r22, 0x0531
    7630:	6e 5b       	subi	r22, 0xBE	; 190
    7632:	85 e1       	ldi	r24, 0x15	; 21
    7634:	9c e1       	ldi	r25, 0x1C	; 28
    7636:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <get_menu_range>
    763a:	29 83       	std	Y+1, r18	; 0x01
    763c:	3a 83       	std	Y+2, r19	; 0x02
    763e:	4b 83       	std	Y+3, r20	; 0x03
    7640:	5c 83       	std	Y+4, r21	; 0x04
    7642:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    7644:	80 91 27 08 	lds	r24, 0x0827
    7648:	80 3e       	cpi	r24, 0xE0	; 224
    764a:	f9 f4       	brne	.+62     	; 0x768a <menu_mixer+0x10a>
		{
			text_link = pgm_read_word(&MixerMenuText[menu_temp - MIXERSTART]);
    764c:	80 91 31 05 	lds	r24, 0x0531
    7650:	90 91 32 05 	lds	r25, 0x0532
    7654:	bc 01       	movw	r22, r24
    7656:	6e 5b       	subi	r22, 0xBE	; 190
    7658:	71 09       	sbc	r23, r1
    765a:	fb 01       	movw	r30, r22
    765c:	ee 0f       	add	r30, r30
    765e:	ff 1f       	adc	r31, r31
    7660:	e1 54       	subi	r30, 0x41	; 65
    7662:	f3 4e       	sbci	r31, 0xE3	; 227
    7664:	a5 90       	lpm	r10, Z+
    7666:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    7668:	bb 24       	eor	r11, r11
    766a:	66 0d       	add	r22, r6
    766c:	77 1d       	adc	r23, r7
    766e:	1f 92       	push	r1
    7670:	1f 92       	push	r1
    7672:	81 2c       	mov	r8, r1
    7674:	c1 2c       	mov	r12, r1
    7676:	e9 80       	ldd	r14, Y+1	; 0x01
    7678:	fa 80       	ldd	r15, Y+2	; 0x02
    767a:	0b 81       	ldd	r16, Y+3	; 0x03
    767c:	1c 81       	ldd	r17, Y+4	; 0x04
    767e:	2d 81       	ldd	r18, Y+5	; 0x05
    7680:	41 e0       	ldi	r20, 0x01	; 1
    7682:	0e 94 d7 35 	call	0x6bae	; 0x6bae <do_menu_item>
    7686:	0f 90       	pop	r0
    7688:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    768a:	80 91 27 08 	lds	r24, 0x0827
    768e:	80 3e       	cpi	r24, 0xE0	; 224
    7690:	09 f0       	breq	.+2      	; 0x7694 <menu_mixer+0x114>
    7692:	9c cf       	rjmp	.-200    	; 0x75cc <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    7694:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    7698:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    769c:	0e 94 b3 3a 	call	0x7566	; 0x7566 <Wait_BUTTON4>
    76a0:	95 cf       	rjmp	.-214    	; 0x75cc <menu_mixer+0x4c>
		}
	}
}
    76a2:	0f 90       	pop	r0
    76a4:	0f 90       	pop	r0
    76a6:	0f 90       	pop	r0
    76a8:	0f 90       	pop	r0
    76aa:	0f 90       	pop	r0
    76ac:	df 91       	pop	r29
    76ae:	cf 91       	pop	r28
    76b0:	1f 91       	pop	r17
    76b2:	0f 91       	pop	r16
    76b4:	ff 90       	pop	r15
    76b6:	ef 90       	pop	r14
    76b8:	df 90       	pop	r13
    76ba:	cf 90       	pop	r12
    76bc:	bf 90       	pop	r11
    76be:	af 90       	pop	r10
    76c0:	8f 90       	pop	r8
    76c2:	7f 90       	pop	r7
    76c4:	6f 90       	pop	r6
    76c6:	08 95       	ret

000076c8 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    76c8:	2f 92       	push	r2
    76ca:	3f 92       	push	r3
    76cc:	4f 92       	push	r4
    76ce:	5f 92       	push	r5
    76d0:	6f 92       	push	r6
    76d2:	7f 92       	push	r7
    76d4:	8f 92       	push	r8
    76d6:	9f 92       	push	r9
    76d8:	af 92       	push	r10
    76da:	bf 92       	push	r11
    76dc:	cf 92       	push	r12
    76de:	df 92       	push	r13
    76e0:	ef 92       	push	r14
    76e2:	ff 92       	push	r15
    76e4:	0f 93       	push	r16
    76e6:	1f 93       	push	r17
    76e8:	cf 93       	push	r28
    76ea:	df 93       	push	r29
    76ec:	cd b7       	in	r28, 0x3d	; 61
    76ee:	de b7       	in	r29, 0x3e	; 62
    76f0:	28 97       	sbiw	r28, 0x08	; 8
    76f2:	0f b6       	in	r0, 0x3f	; 63
    76f4:	f8 94       	cli
    76f6:	de bf       	out	0x3e, r29	; 62
    76f8:	0f be       	out	0x3f, r0	; 63
    76fa:	cd bf       	out	0x3d, r28	; 61
    76fc:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    76fe:	80 91 29 08 	lds	r24, 0x0829
    7702:	88 23       	and	r24, r24
    7704:	41 f0       	breq	.+16     	; 0x7716 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    7706:	86 ee       	ldi	r24, 0xE6	; 230
    7708:	90 e0       	ldi	r25, 0x00	; 0
    770a:	90 93 37 05 	sts	0x0537, r25
    770e:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    7712:	10 92 29 08 	sts	0x0829, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    7716:	1e 82       	std	Y+6, r1	; 0x06
    7718:	a9 e9       	ldi	r26, 0x99	; 153
    771a:	6a 2e       	mov	r6, r26
    771c:	a7 e0       	ldi	r26, 0x07	; 7
    771e:	7a 2e       	mov	r7, r26
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    7720:	89 2d       	mov	r24, r9
    7722:	90 e0       	ldi	r25, 0x00	; 0
    7724:	01 97       	sbiw	r24, 0x01	; 1
    7726:	25 e0       	ldi	r18, 0x05	; 5
    7728:	28 9f       	mul	r18, r24
    772a:	20 01       	movw	r4, r0
    772c:	29 9f       	mul	r18, r25
    772e:	50 0c       	add	r5, r0
    7730:	11 24       	eor	r1, r1
    7732:	92 01       	movw	r18, r4
    7734:	2d 5f       	subi	r18, 0xFD	; 253
    7736:	32 4e       	sbci	r19, 0xE2	; 226
    7738:	29 01       	movw	r4, r18
    773a:	1c 01       	movw	r2, r24
    773c:	b4 e0       	ldi	r27, 0x04	; 4
    773e:	22 0c       	add	r2, r2
    7740:	33 1c       	adc	r3, r3
    7742:	ba 95       	dec	r27
    7744:	e1 f7       	brne	.-8      	; 0x773e <menu_servo_setup+0x76>
    7746:	f1 01       	movw	r30, r2
    7748:	ee 5e       	subi	r30, 0xEE	; 238
    774a:	f2 4e       	sbci	r31, 0xE2	; 226
    774c:	1f 01       	movw	r2, r30
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);

		if (button == ENTER)
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    774e:	9c 01       	movw	r18, r24
    7750:	13 e0       	ldi	r17, 0x03	; 3
    7752:	22 0f       	add	r18, r18
    7754:	33 1f       	adc	r19, r19
    7756:	1a 95       	dec	r17
    7758:	e1 f7       	brne	.-8      	; 0x7752 <menu_servo_setup+0x8a>
    775a:	38 87       	std	Y+8, r19	; 0x08
    775c:	2f 83       	std	Y+7, r18	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    775e:	80 91 27 08 	lds	r24, 0x0827
    7762:	80 37       	cpi	r24, 0x70	; 112
    7764:	09 f4       	brne	.+2      	; 0x7768 <menu_servo_setup+0xa0>
    7766:	92 c0       	rjmp	.+292    	; 0x788c <menu_servo_setup+0x1c4>
    7768:	88 e0       	ldi	r24, 0x08	; 8
    776a:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    776c:	32 e0       	ldi	r19, 0x02	; 2
    776e:	93 16       	cp	r9, r19
    7770:	61 f0       	breq	.+24     	; 0x778a <menu_servo_setup+0xc2>
    7772:	43 e0       	ldi	r20, 0x03	; 3
    7774:	94 12       	cpse	r9, r20
    7776:	11 c0       	rjmp	.+34     	; 0x779a <menu_servo_setup+0xd2>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    7778:	e1 e0       	ldi	r30, 0x01	; 1
    777a:	ee 83       	std	Y+6, r30	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    777c:	88 24       	eor	r8, r8
    777e:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    7780:	e9 ea       	ldi	r30, 0xA9	; 169
    7782:	6e 2e       	mov	r6, r30
    7784:	e7 e0       	ldi	r30, 0x07	; 7
    7786:	7e 2e       	mov	r7, r30
					servo_enable = true;
					zero_setting = true;
					break;
    7788:	08 c0       	rjmp	.+16     	; 0x779a <menu_servo_setup+0xd2>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    778a:	91 e0       	ldi	r25, 0x01	; 1
    778c:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    778e:	88 24       	eor	r8, r8
    7790:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    7792:	f1 ea       	ldi	r31, 0xA1	; 161
    7794:	6f 2e       	mov	r6, r31
    7796:	f7 e0       	ldi	r31, 0x07	; 7
    7798:	7f 2e       	mov	r7, r31
    779a:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    779c:	39 f7       	brne	.-50     	; 0x776c <menu_servo_setup+0xa4>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const uint16_t*)ServoMenuText[section - 1], cursor);
    779e:	a0 90 04 05 	lds	r10, 0x0504
    77a2:	b0 90 05 05 	lds	r11, 0x0505
    77a6:	61 01       	movw	r12, r2
    77a8:	50 e5       	ldi	r21, 0x50	; 80
    77aa:	e5 2e       	mov	r14, r21
    77ac:	f1 2c       	mov	r15, r1
    77ae:	01 e0       	ldi	r16, 0x01	; 1
    77b0:	92 01       	movw	r18, r4
    77b2:	a3 01       	movw	r20, r6
    77b4:	66 ee       	ldi	r22, 0xE6	; 230
    77b6:	70 e0       	ldi	r23, 0x00	; 0
    77b8:	80 91 36 05 	lds	r24, 0x0536
    77bc:	90 91 37 05 	lds	r25, 0x0537
    77c0:	0e 94 8c 38 	call	0x7118	; 0x7118 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    77c4:	61 e3       	ldi	r22, 0x31	; 49
    77c6:	c6 2e       	mov	r12, r22
    77c8:	65 e0       	ldi	r22, 0x05	; 5
    77ca:	d6 2e       	mov	r13, r22
    77cc:	76 e3       	ldi	r23, 0x36	; 54
    77ce:	e7 2e       	mov	r14, r23
    77d0:	75 e0       	ldi	r23, 0x05	; 5
    77d2:	f7 2e       	mov	r15, r23
    77d4:	04 e0       	ldi	r16, 0x04	; 4
    77d6:	15 e0       	ldi	r17, 0x05	; 5
    77d8:	20 91 27 08 	lds	r18, 0x0827
    77dc:	40 e0       	ldi	r20, 0x00	; 0
    77de:	50 e0       	ldi	r21, 0x00	; 0
    77e0:	66 ee       	ldi	r22, 0xE6	; 230
    77e2:	70 e0       	ldi	r23, 0x00	; 0
    77e4:	88 e0       	ldi	r24, 0x08	; 8
    77e6:	90 e0       	ldi	r25, 0x00	; 0
    77e8:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    77ec:	60 e0       	ldi	r22, 0x00	; 0
    77ee:	c2 01       	movw	r24, r4
    77f0:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <get_menu_range>
    77f4:	29 83       	std	Y+1, r18	; 0x01
    77f6:	3a 83       	std	Y+2, r19	; 0x02
    77f8:	4b 83       	std	Y+3, r20	; 0x03
    77fa:	5c 83       	std	Y+4, r21	; 0x04
    77fc:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    77fe:	80 91 27 08 	lds	r24, 0x0827
    7802:	80 3e       	cpi	r24, 0xE0	; 224
    7804:	b9 f5       	brne	.+110    	; 0x7874 <menu_servo_setup+0x1ac>
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    7806:	80 91 31 05 	lds	r24, 0x0531
    780a:	90 91 32 05 	lds	r25, 0x0532
    780e:	9c 01       	movw	r18, r24
    7810:	26 5e       	subi	r18, 0xE6	; 230
    7812:	31 09       	sbc	r19, r1
    7814:	ef 81       	ldd	r30, Y+7	; 0x07
    7816:	f8 85       	ldd	r31, Y+8	; 0x08
    7818:	e2 0f       	add	r30, r18
    781a:	f3 1f       	adc	r31, r19
    781c:	ee 0f       	add	r30, r30
    781e:	ff 1f       	adc	r31, r31
    7820:	ee 5e       	subi	r30, 0xEE	; 238
    7822:	f2 4e       	sbci	r31, 0xE2	; 226
    7824:	a5 90       	lpm	r10, Z+
    7826:	b4 90       	lpm	r11, Z
    7828:	b3 01       	movw	r22, r6
    782a:	62 0f       	add	r22, r18
    782c:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    782e:	fe 81       	ldd	r31, Y+6	; 0x06
    7830:	ff 23       	and	r31, r31
    7832:	11 f0       	breq	.+4      	; 0x7838 <menu_servo_setup+0x170>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    7834:	fb 01       	movw	r30, r22
    7836:	10 82       	st	Z, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    7838:	46 e2       	ldi	r20, 0x26	; 38
    783a:	42 9f       	mul	r20, r18
    783c:	f0 01       	movw	r30, r0
    783e:	43 9f       	mul	r20, r19
    7840:	f0 0d       	add	r31, r0
    7842:	11 24       	eor	r1, r1
    7844:	e9 57       	subi	r30, 0x79	; 121
    7846:	f9 4f       	sbci	r31, 0xF9	; 249
    7848:	40 81       	ld	r20, Z
    784a:	41 11       	cpse	r20, r1
    784c:	05 c0       	rjmp	.+10     	; 0x7858 <menu_servo_setup+0x190>
    784e:	40 91 00 06 	lds	r20, 0x0600
    7852:	41 11       	cpse	r20, r1
    7854:	01 c0       	rjmp	.+2      	; 0x7858 <menu_servo_setup+0x190>
			{
				servo_enable = false;
    7856:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    7858:	bb 24       	eor	r11, r11
    785a:	3f 93       	push	r19
    785c:	2f 93       	push	r18
    785e:	c1 2c       	mov	r12, r1
    7860:	e9 80       	ldd	r14, Y+1	; 0x01
    7862:	fa 80       	ldd	r15, Y+2	; 0x02
    7864:	0b 81       	ldd	r16, Y+3	; 0x03
    7866:	1c 81       	ldd	r17, Y+4	; 0x04
    7868:	2d 81       	ldd	r18, Y+5	; 0x05
    786a:	41 e0       	ldi	r20, 0x01	; 1
    786c:	0e 94 d7 35 	call	0x6bae	; 0x6bae <do_menu_item>
    7870:	0f 90       	pop	r0
    7872:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    7874:	80 91 27 08 	lds	r24, 0x0827
    7878:	80 3e       	cpi	r24, 0xE0	; 224
    787a:	09 f0       	breq	.+2      	; 0x787e <menu_servo_setup+0x1b6>
    787c:	70 cf       	rjmp	.-288    	; 0x775e <menu_servo_setup+0x96>
		{
			UpdateLimits();				// Update actual servo trims
    787e:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    7882:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    7886:	0e 94 b3 3a 	call	0x7566	; 0x7566 <Wait_BUTTON4>
    788a:	69 cf       	rjmp	.-302    	; 0x775e <menu_servo_setup+0x96>
		}
	}
}
    788c:	28 96       	adiw	r28, 0x08	; 8
    788e:	0f b6       	in	r0, 0x3f	; 63
    7890:	f8 94       	cli
    7892:	de bf       	out	0x3e, r29	; 62
    7894:	0f be       	out	0x3f, r0	; 63
    7896:	cd bf       	out	0x3d, r28	; 61
    7898:	df 91       	pop	r29
    789a:	cf 91       	pop	r28
    789c:	1f 91       	pop	r17
    789e:	0f 91       	pop	r16
    78a0:	ff 90       	pop	r15
    78a2:	ef 90       	pop	r14
    78a4:	df 90       	pop	r13
    78a6:	cf 90       	pop	r12
    78a8:	bf 90       	pop	r11
    78aa:	af 90       	pop	r10
    78ac:	9f 90       	pop	r9
    78ae:	8f 90       	pop	r8
    78b0:	7f 90       	pop	r7
    78b2:	6f 90       	pop	r6
    78b4:	5f 90       	pop	r5
    78b6:	4f 90       	pop	r4
    78b8:	3f 90       	pop	r3
    78ba:	2f 90       	pop	r2
    78bc:	08 95       	ret

000078be <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    78be:	2f 92       	push	r2
    78c0:	3f 92       	push	r3
    78c2:	4f 92       	push	r4
    78c4:	5f 92       	push	r5
    78c6:	6f 92       	push	r6
    78c8:	7f 92       	push	r7
    78ca:	8f 92       	push	r8
    78cc:	9f 92       	push	r9
    78ce:	af 92       	push	r10
    78d0:	bf 92       	push	r11
    78d2:	cf 92       	push	r12
    78d4:	df 92       	push	r13
    78d6:	ef 92       	push	r14
    78d8:	ff 92       	push	r15
    78da:	0f 93       	push	r16
    78dc:	1f 93       	push	r17
    78de:	cf 93       	push	r28
    78e0:	df 93       	push	r29
    78e2:	cd b7       	in	r28, 0x3d	; 61
    78e4:	de b7       	in	r29, 0x3e	; 62
    78e6:	2b 97       	sbiw	r28, 0x0b	; 11
    78e8:	0f b6       	in	r0, 0x3f	; 63
    78ea:	f8 94       	cli
    78ec:	de bf       	out	0x3e, r29	; 62
    78ee:	0f be       	out	0x3f, r0	; 63
    78f0:	cd bf       	out	0x3d, r28	; 61
    78f2:	98 2e       	mov	r9, r24
	uint8_t		i;
	uint16_t	offset = 0;			// Index into channel structure
	uint16_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    78f4:	80 91 29 08 	lds	r24, 0x0829
    78f8:	88 23       	and	r24, r24
    78fa:	41 f0       	breq	.+16     	; 0x790c <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    78fc:	85 e9       	ldi	r24, 0x95	; 149
    78fe:	90 e0       	ldi	r25, 0x00	; 0
    7900:	90 93 37 05 	sts	0x0537, r25
    7904:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    7908:	10 92 29 08 	sts	0x0829, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    790c:	28 e0       	ldi	r18, 0x08	; 8
    790e:	30 e0       	ldi	r19, 0x00	; 0
    7910:	39 87       	std	Y+9, r19	; 0x09
    7912:	28 87       	std	Y+8, r18	; 0x08
    7914:	61 2c       	mov	r6, r1
    7916:	71 2c       	mov	r7, r1
    7918:	40 e0       	ldi	r20, 0x00	; 0
    791a:	56 e0       	ldi	r21, 0x06	; 6
    791c:	5f 83       	std	Y+7, r21	; 0x07
    791e:	4e 83       	std	Y+6, r20	; 0x06

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    7920:	89 2d       	mov	r24, r9
    7922:	90 e0       	ldi	r25, 0x00	; 0
    7924:	01 97       	sbiw	r24, 0x01	; 1
    7926:	22 e3       	ldi	r18, 0x32	; 50
    7928:	28 9f       	mul	r18, r24
    792a:	20 01       	movw	r4, r0
    792c:	29 9f       	mul	r18, r25
    792e:	50 0c       	add	r5, r0
    7930:	11 24       	eor	r1, r1
    7932:	92 01       	movw	r18, r4
    7934:	2e 5b       	subi	r18, 0xBE	; 190
    7936:	32 4e       	sbci	r19, 0xE2	; 226
    7938:	29 01       	movw	r4, r18
    793a:	24 e1       	ldi	r18, 0x14	; 20
    793c:	28 9f       	mul	r18, r24
    793e:	10 01       	movw	r2, r0
    7940:	29 9f       	mul	r18, r25
    7942:	30 0c       	add	r3, r0
    7944:	11 24       	eor	r1, r1
    7946:	a1 01       	movw	r20, r2
    7948:	4a 55       	subi	r20, 0x5A	; 90
    794a:	52 4e       	sbci	r21, 0xE2	; 226
    794c:	1a 01       	movw	r2, r20
			Config.Preset = QUADX;			
		}

		if (button == ENTER)
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    794e:	2a e0       	ldi	r18, 0x0A	; 10
    7950:	28 9f       	mul	r18, r24
    7952:	a0 01       	movw	r20, r0
    7954:	29 9f       	mul	r18, r25
    7956:	50 0d       	add	r21, r0
    7958:	11 24       	eor	r1, r1
    795a:	5b 87       	std	Y+11, r21	; 0x0b
    795c:	4a 87       	std	Y+10, r20	; 0x0a
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    795e:	80 91 27 08 	lds	r24, 0x0827
    7962:	80 37       	cpi	r24, 0x70	; 112
    7964:	09 f4       	brne	.+2      	; 0x7968 <menu_rc_setup+0xaa>
    7966:	d3 c0       	rjmp	.+422    	; 0x7b0e <menu_rc_setup+0x250>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    7968:	52 e0       	ldi	r21, 0x02	; 2
    796a:	95 12       	cpse	r9, r21
    796c:	0b c0       	rjmp	.+22     	; 0x7984 <menu_rc_setup+0xc6>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
    796e:	8a e0       	ldi	r24, 0x0A	; 10
    7970:	90 e0       	ldi	r25, 0x00	; 0
    7972:	99 87       	std	Y+9, r25	; 0x09
    7974:	88 87       	std	Y+8, r24	; 0x08
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    7976:	69 e0       	ldi	r22, 0x09	; 9
    7978:	66 2e       	mov	r6, r22
    797a:	71 2c       	mov	r7, r1
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    797c:	2f e5       	ldi	r18, 0x5F	; 95
    797e:	36 e0       	ldi	r19, 0x06	; 6
    7980:	3f 83       	std	Y+7, r19	; 0x07
    7982:	2e 83       	std	Y+6, r18	; 0x06
			default:
				break;
		}

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;
    7984:	84 e0       	ldi	r24, 0x04	; 4
    7986:	80 93 68 06 	sts	0x0668, r24

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const uint16_t*)RCMenuText[section - 1], cursor);
    798a:	a0 90 04 05 	lds	r10, 0x0504
    798e:	b0 90 05 05 	lds	r11, 0x0505
    7992:	80 91 36 05 	lds	r24, 0x0536
    7996:	90 91 37 05 	lds	r25, 0x0537
    799a:	61 01       	movw	r12, r2
    799c:	3f e4       	ldi	r19, 0x4F	; 79
    799e:	e3 2e       	mov	r14, r19
    79a0:	f1 2c       	mov	r15, r1
    79a2:	00 e0       	ldi	r16, 0x00	; 0
    79a4:	92 01       	movw	r18, r4
    79a6:	4e 81       	ldd	r20, Y+6	; 0x06
    79a8:	5f 81       	ldd	r21, Y+7	; 0x07
    79aa:	b3 01       	movw	r22, r6
    79ac:	6b 56       	subi	r22, 0x6B	; 107
    79ae:	7f 4f       	sbci	r23, 0xFF	; 255
    79b0:	86 0d       	add	r24, r6
    79b2:	97 1d       	adc	r25, r7
    79b4:	0e 94 8c 38 	call	0x7118	; 0x7118 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    79b8:	41 e3       	ldi	r20, 0x31	; 49
    79ba:	c4 2e       	mov	r12, r20
    79bc:	45 e0       	ldi	r20, 0x05	; 5
    79be:	d4 2e       	mov	r13, r20
    79c0:	56 e3       	ldi	r21, 0x36	; 54
    79c2:	e5 2e       	mov	r14, r21
    79c4:	55 e0       	ldi	r21, 0x05	; 5
    79c6:	f5 2e       	mov	r15, r21
    79c8:	04 e0       	ldi	r16, 0x04	; 4
    79ca:	15 e0       	ldi	r17, 0x05	; 5
    79cc:	20 91 27 08 	lds	r18, 0x0827
    79d0:	a3 01       	movw	r20, r6
    79d2:	65 e9       	ldi	r22, 0x95	; 149
    79d4:	70 e0       	ldi	r23, 0x00	; 0
    79d6:	88 85       	ldd	r24, Y+8	; 0x08
    79d8:	99 85       	ldd	r25, Y+9	; 0x09
    79da:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    79de:	60 91 31 05 	lds	r22, 0x0531
    79e2:	65 59       	subi	r22, 0x95	; 149
    79e4:	66 19       	sub	r22, r6
    79e6:	c2 01       	movw	r24, r4
    79e8:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <get_menu_range>
    79ec:	29 83       	std	Y+1, r18	; 0x01
    79ee:	3a 83       	std	Y+2, r19	; 0x02
    79f0:	4b 83       	std	Y+3, r20	; 0x03
    79f2:	5c 83       	std	Y+4, r21	; 0x04
    79f4:	6d 83       	std	Y+5, r22	; 0x05

		// If actually editing the preset, show the default setting
		if (menu_temp == PRESETITEM)
    79f6:	80 91 31 05 	lds	r24, 0x0531
    79fa:	90 91 32 05 	lds	r25, 0x0532
    79fe:	87 3a       	cpi	r24, 0xA7	; 167
    7a00:	91 05       	cpc	r25, r1
    7a02:	11 f4       	brne	.+4      	; 0x7a08 <menu_rc_setup+0x14a>
		{
			Config.Preset = QUADX;			
    7a04:	10 92 68 06 	sts	0x0668, r1
		}

		if (button == ENTER)
    7a08:	20 91 27 08 	lds	r18, 0x0827
    7a0c:	20 3e       	cpi	r18, 0xE0	; 224
    7a0e:	09 f5       	brne	.+66     	; 0x7a52 <menu_rc_setup+0x194>
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    7a10:	bc 01       	movw	r22, r24
    7a12:	65 59       	subi	r22, 0x95	; 149
    7a14:	71 09       	sbc	r23, r1
    7a16:	66 19       	sub	r22, r6
    7a18:	77 09       	sbc	r23, r7
    7a1a:	ea 85       	ldd	r30, Y+10	; 0x0a
    7a1c:	fb 85       	ldd	r31, Y+11	; 0x0b
    7a1e:	e6 0f       	add	r30, r22
    7a20:	f7 1f       	adc	r31, r23
    7a22:	ee 0f       	add	r30, r30
    7a24:	ff 1f       	adc	r31, r31
    7a26:	ea 55       	subi	r30, 0x5A	; 90
    7a28:	f2 4e       	sbci	r31, 0xE2	; 226
    7a2a:	a5 90       	lpm	r10, Z+
    7a2c:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    7a2e:	4e 81       	ldd	r20, Y+6	; 0x06
    7a30:	5f 81       	ldd	r21, Y+7	; 0x07
    7a32:	64 0f       	add	r22, r20
    7a34:	75 1f       	adc	r23, r21
    7a36:	1f 92       	push	r1
    7a38:	1f 92       	push	r1
    7a3a:	81 2c       	mov	r8, r1
    7a3c:	c1 2c       	mov	r12, r1
    7a3e:	e9 80       	ldd	r14, Y+1	; 0x01
    7a40:	fa 80       	ldd	r15, Y+2	; 0x02
    7a42:	0b 81       	ldd	r16, Y+3	; 0x03
    7a44:	1c 81       	ldd	r17, Y+4	; 0x04
    7a46:	2d 81       	ldd	r18, Y+5	; 0x05
    7a48:	41 e0       	ldi	r20, 0x01	; 1
    7a4a:	0e 94 d7 35 	call	0x6bae	; 0x6bae <do_menu_item>
    7a4e:	0f 90       	pop	r0
    7a50:	0f 90       	pop	r0
		}

		// Handle abort neatly
		if (button == ABORT)
    7a52:	80 91 27 08 	lds	r24, 0x0827
    7a56:	80 3a       	cpi	r24, 0xA0	; 160
    7a58:	41 f4       	brne	.+16     	; 0x7a6a <menu_rc_setup+0x1ac>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    7a5a:	0e 94 1d 3a 	call	0x743a	; 0x743a <Wait_BUTTON1>
			button = NONE;
    7a5e:	80 ef       	ldi	r24, 0xF0	; 240
    7a60:	80 93 27 08 	sts	0x0827, r24
			
			// Reset the mixer preset if unchanged
			Config.Preset = OPTIONS;
    7a64:	84 e0       	ldi	r24, 0x04	; 4
    7a66:	80 93 68 06 	sts	0x0668, r24
		}

		if (button == ENTER)
    7a6a:	80 91 27 08 	lds	r24, 0x0827
    7a6e:	80 3e       	cpi	r24, 0xE0	; 224
    7a70:	09 f0       	breq	.+2      	; 0x7a74 <menu_rc_setup+0x1b6>
    7a72:	75 cf       	rjmp	.-278    	; 0x795e <menu_rc_setup+0xa0>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    7a74:	0e 94 ac 34 	call	0x6958	; 0x6958 <init_int>
			init_uart();			// and UART
    7a78:	0e 94 3f 4e 	call	0x9c7e	; 0x9c7e <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    7a7c:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <UpdateLimits>
			
			// See if mixer preset has changed. Load new preset only if so
			if ((Config.Preset != OPTIONS) && (menu_temp == PRESETITEM))
    7a80:	80 91 68 06 	lds	r24, 0x0668
    7a84:	84 30       	cpi	r24, 0x04	; 4
    7a86:	49 f0       	breq	.+18     	; 0x7a9a <menu_rc_setup+0x1dc>
    7a88:	20 91 31 05 	lds	r18, 0x0531
    7a8c:	30 91 32 05 	lds	r19, 0x0532
    7a90:	27 3a       	cpi	r18, 0xA7	; 167
    7a92:	31 05       	cpc	r19, r1
    7a94:	11 f4       	brne	.+4      	; 0x7a9a <menu_rc_setup+0x1dc>
			{
				Load_eeprom_preset(Config.Preset);
    7a96:	0e 94 11 1c 	call	0x3822	; 0x3822 <Load_eeprom_preset>
			}

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    7a9a:	46 e0       	ldi	r20, 0x06	; 6
    7a9c:	80 91 64 06 	lds	r24, 0x0664
    7aa0:	48 1b       	sub	r20, r24
    7aa2:	6a e1       	ldi	r22, 0x1A	; 26
    7aa4:	80 ed       	ldi	r24, 0xD0	; 208
    7aa6:	0e 94 39 2a 	call	0x5472	; 0x5472 <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    7aaa:	20 91 03 06 	lds	r18, 0x0603
    7aae:	a8 ed       	ldi	r26, 0xD8	; 216
    7ab0:	b5 e0       	ldi	r27, 0x05	; 5
    7ab2:	80 e0       	ldi	r24, 0x00	; 0
    7ab4:	90 e0       	ldi	r25, 0x00	; 0
    7ab6:	fc 01       	movw	r30, r24
    7ab8:	21 30       	cpi	r18, 0x01	; 1
    7aba:	19 f4       	brne	.+6      	; 0x7ac2 <menu_rc_setup+0x204>
    7abc:	e0 51       	subi	r30, 0x10	; 16
    7abe:	ff 4f       	sbci	r31, 0xFF	; 255
    7ac0:	02 c0       	rjmp	.+4      	; 0x7ac6 <menu_rc_setup+0x208>
    7ac2:	e8 50       	subi	r30, 0x08	; 8
    7ac4:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    7ac6:	e4 91       	lpm	r30, Z
    7ac8:	ec 93       	st	X, r30
    7aca:	01 96       	adiw	r24, 0x01	; 1
    7acc:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    7ace:	88 30       	cpi	r24, 0x08	; 8
    7ad0:	91 05       	cpc	r25, r1
    7ad2:	89 f7       	brne	.-30     	; 0x7ab6 <menu_rc_setup+0x1f8>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    7ad4:	80 91 00 06 	lds	r24, 0x0600
    7ad8:	82 30       	cpi	r24, 0x02	; 2
    7ada:	3c f4       	brge	.+14     	; 0x7aea <menu_rc_setup+0x22c>
    7adc:	80 91 01 06 	lds	r24, 0x0601
    7ae0:	82 30       	cpi	r24, 0x02	; 2
    7ae2:	19 f4       	brne	.+6      	; 0x7aea <menu_rc_setup+0x22c>
			{
				Config.Servo_rate = SYNC;
    7ae4:	81 e0       	ldi	r24, 0x01	; 1
    7ae6:	80 93 01 06 	sts	0x0601, r24
			}
						
			if (Config.ArmMode == ARMABLE)
    7aea:	80 91 61 06 	lds	r24, 0x0661
    7aee:	81 30       	cpi	r24, 0x01	; 1
    7af0:	31 f4       	brne	.+12     	; 0x7afe <menu_rc_setup+0x240>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    7af2:	80 91 20 05 	lds	r24, 0x0520
    7af6:	84 60       	ori	r24, 0x04	; 4
    7af8:	80 93 20 05 	sts	0x0520, r24
				LED1 = 0;
    7afc:	2b 98       	cbi	0x05, 3	; 5
			}

			// Return the preset to "Options" when going back to the General menu
			Config.Preset = OPTIONS;
    7afe:	84 e0       	ldi	r24, 0x04	; 4
    7b00:	80 93 68 06 	sts	0x0668, r24

			Save_Config_to_EEPROM(); // Save value and return
    7b04:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    7b08:	0e 94 b3 3a 	call	0x7566	; 0x7566 <Wait_BUTTON4>
    7b0c:	28 cf       	rjmp	.-432    	; 0x795e <menu_rc_setup+0xa0>
		}
	}
}
    7b0e:	2b 96       	adiw	r28, 0x0b	; 11
    7b10:	0f b6       	in	r0, 0x3f	; 63
    7b12:	f8 94       	cli
    7b14:	de bf       	out	0x3e, r29	; 62
    7b16:	0f be       	out	0x3f, r0	; 63
    7b18:	cd bf       	out	0x3d, r28	; 61
    7b1a:	df 91       	pop	r29
    7b1c:	cf 91       	pop	r28
    7b1e:	1f 91       	pop	r17
    7b20:	0f 91       	pop	r16
    7b22:	ff 90       	pop	r15
    7b24:	ef 90       	pop	r14
    7b26:	df 90       	pop	r13
    7b28:	cf 90       	pop	r12
    7b2a:	bf 90       	pop	r11
    7b2c:	af 90       	pop	r10
    7b2e:	9f 90       	pop	r9
    7b30:	8f 90       	pop	r8
    7b32:	7f 90       	pop	r7
    7b34:	6f 90       	pop	r6
    7b36:	5f 90       	pop	r5
    7b38:	4f 90       	pop	r4
    7b3a:	3f 90       	pop	r3
    7b3c:	2f 90       	pop	r2
    7b3e:	08 95       	ret

00007b40 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7b40:	6f 92       	push	r6
    7b42:	7f 92       	push	r7
    7b44:	8f 92       	push	r8
    7b46:	9f 92       	push	r9
    7b48:	af 92       	push	r10
    7b4a:	bf 92       	push	r11
    7b4c:	cf 92       	push	r12
    7b4e:	df 92       	push	r13
    7b50:	ef 92       	push	r14
    7b52:	ff 92       	push	r15
    7b54:	0f 93       	push	r16
    7b56:	1f 93       	push	r17
    7b58:	cf 93       	push	r28
    7b5a:	df 93       	push	r29
    7b5c:	cd b7       	in	r28, 0x3d	; 61
    7b5e:	de b7       	in	r29, 0x3e	; 62
    7b60:	2c 97       	sbiw	r28, 0x0c	; 12
    7b62:	0f b6       	in	r0, 0x3f	; 63
    7b64:	f8 94       	cli
    7b66:	de bf       	out	0x3e, r29	; 62
    7b68:	0f be       	out	0x3f, r0	; 63
    7b6a:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    7b6c:	80 91 0b 06 	lds	r24, 0x060B
    7b70:	8f 83       	std	Y+7, r24	; 0x07
    7b72:	80 91 11 06 	lds	r24, 0x0611
    7b76:	88 87       	std	Y+8, r24	; 0x08
    7b78:	80 91 17 06 	lds	r24, 0x0617
    7b7c:	89 87       	std	Y+9, r24	; 0x09
    7b7e:	80 91 1d 06 	lds	r24, 0x061D
    7b82:	8a 87       	std	Y+10, r24	; 0x0a
    7b84:	80 91 23 06 	lds	r24, 0x0623
    7b88:	8b 87       	std	Y+11, r24	; 0x0b
    7b8a:	80 91 29 06 	lds	r24, 0x0629
    7b8e:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    7b90:	80 91 0a 06 	lds	r24, 0x060A
    7b94:	89 83       	std	Y+1, r24	; 0x01
    7b96:	80 91 10 06 	lds	r24, 0x0610
    7b9a:	8a 83       	std	Y+2, r24	; 0x02
    7b9c:	80 91 16 06 	lds	r24, 0x0616
    7ba0:	8b 83       	std	Y+3, r24	; 0x03
    7ba2:	80 91 1c 06 	lds	r24, 0x061C
    7ba6:	8c 83       	std	Y+4, r24	; 0x04
    7ba8:	80 91 22 06 	lds	r24, 0x0622
    7bac:	8d 83       	std	Y+5, r24	; 0x05
    7bae:	80 91 28 06 	lds	r24, 0x0628
    7bb2:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    7bb4:	80 91 63 06 	lds	r24, 0x0663
    7bb8:	99 27       	eor	r25, r25
    7bba:	87 fd       	sbrc	r24, 7
    7bbc:	90 95       	com	r25
    7bbe:	a9 2f       	mov	r26, r25
    7bc0:	b9 2f       	mov	r27, r25
    7bc2:	89 30       	cpi	r24, 0x09	; 9
    7bc4:	91 05       	cpc	r25, r1
    7bc6:	08 f5       	brcc	.+66     	; 0x7c0a <UpdateLimits+0xca>
    7bc8:	fc 01       	movw	r30, r24
    7bca:	e3 5a       	subi	r30, 0xA3	; 163
    7bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    7bce:	0c 94 4d 51 	jmp	0xa29a	; 0xa29a <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    7bd2:	80 e4       	ldi	r24, 0x40	; 64
    7bd4:	91 e0       	ldi	r25, 0x01	; 1
    7bd6:	14 c0       	rjmp	.+40     	; 0x7c00 <UpdateLimits+0xc0>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    7bd8:	8a e4       	ldi	r24, 0x4A	; 74
    7bda:	91 e0       	ldi	r25, 0x01	; 1
    7bdc:	11 c0       	rjmp	.+34     	; 0x7c00 <UpdateLimits+0xc0>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    7bde:	84 e5       	ldi	r24, 0x54	; 84
    7be0:	91 e0       	ldi	r25, 0x01	; 1
    7be2:	0e c0       	rjmp	.+28     	; 0x7c00 <UpdateLimits+0xc0>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    7be4:	8e e5       	ldi	r24, 0x5E	; 94
    7be6:	91 e0       	ldi	r25, 0x01	; 1
    7be8:	0b c0       	rjmp	.+22     	; 0x7c00 <UpdateLimits+0xc0>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    7bea:	88 e6       	ldi	r24, 0x68	; 104
    7bec:	91 e0       	ldi	r25, 0x01	; 1
    7bee:	08 c0       	rjmp	.+16     	; 0x7c00 <UpdateLimits+0xc0>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    7bf0:	82 e7       	ldi	r24, 0x72	; 114
    7bf2:	91 e0       	ldi	r25, 0x01	; 1
    7bf4:	05 c0       	rjmp	.+10     	; 0x7c00 <UpdateLimits+0xc0>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    7bf6:	8c e7       	ldi	r24, 0x7C	; 124
    7bf8:	91 e0       	ldi	r25, 0x01	; 1
    7bfa:	02 c0       	rjmp	.+4      	; 0x7c00 <UpdateLimits+0xc0>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    7bfc:	86 e8       	ldi	r24, 0x86	; 134
    7bfe:	91 e0       	ldi	r25, 0x01	; 1
    7c00:	90 93 5e 06 	sts	0x065E, r25
    7c04:	80 93 5d 06 	sts	0x065D, r24
			break;
    7c08:	04 c0       	rjmp	.+8      	; 0x7c12 <UpdateLimits+0xd2>
		default:
			Config.PowerTriggerActual = 0;			// Off
    7c0a:	10 92 5e 06 	sts	0x065E, r1
    7c0e:	10 92 5d 06 	sts	0x065D, r1
			break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    7c12:	20 91 2e 05 	lds	r18, 0x052E
    7c16:	30 91 2f 05 	lds	r19, 0x052F
    7c1a:	80 91 5d 06 	lds	r24, 0x065D
    7c1e:	90 91 5e 06 	lds	r25, 0x065E
    7c22:	26 36       	cpi	r18, 0x66	; 102
    7c24:	48 e0       	ldi	r20, 0x08	; 8
    7c26:	34 07       	cpc	r19, r20
    7c28:	88 f0       	brcs	.+34     	; 0x7c4c <UpdateLimits+0x10c>
	{
		Config.PowerTriggerActual *= 6;
    7c2a:	46 e0       	ldi	r20, 0x06	; 6
    7c2c:	48 9f       	mul	r20, r24
    7c2e:	90 01       	movw	r18, r0
    7c30:	49 9f       	mul	r20, r25
    7c32:	30 0d       	add	r19, r0
    7c34:	11 24       	eor	r1, r1
    7c36:	30 93 5e 06 	sts	0x065E, r19
    7c3a:	20 93 5d 06 	sts	0x065D, r18
    7c3e:	7d e2       	ldi	r23, 0x2D	; 45
    7c40:	a7 2e       	mov	r10, r23
    7c42:	76 e0       	ldi	r23, 0x06	; 6
    7c44:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7c46:	00 e0       	ldi	r16, 0x00	; 0
    7c48:	10 e0       	ldi	r17, 0x00	; 0
    7c4a:	25 c0       	rjmp	.+74     	; 0x7c96 <UpdateLimits+0x156>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    7c4c:	a9 01       	movw	r20, r18
    7c4e:	42 5c       	subi	r20, 0xC2	; 194
    7c50:	56 40       	sbci	r21, 0x06	; 6
    7c52:	44 3a       	cpi	r20, 0xA4	; 164
    7c54:	51 40       	sbci	r21, 0x01	; 1
    7c56:	10 f4       	brcc	.+4      	; 0x7c5c <UpdateLimits+0x11c>
	{
		Config.PowerTriggerActual *= 5;
    7c58:	45 e0       	ldi	r20, 0x05	; 5
    7c5a:	e8 cf       	rjmp	.-48     	; 0x7c2c <UpdateLimits+0xec>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    7c5c:	a9 01       	movw	r20, r18
    7c5e:	44 51       	subi	r20, 0x14	; 20
    7c60:	55 40       	sbci	r21, 0x05	; 5
    7c62:	4e 3a       	cpi	r20, 0xAE	; 174
    7c64:	51 40       	sbci	r21, 0x01	; 1
    7c66:	28 f4       	brcc	.+10     	; 0x7c72 <UpdateLimits+0x132>
	{
		Config.PowerTriggerActual *= 4;
    7c68:	88 0f       	add	r24, r24
    7c6a:	99 1f       	adc	r25, r25
    7c6c:	88 0f       	add	r24, r24
    7c6e:	99 1f       	adc	r25, r25
    7c70:	0d c0       	rjmp	.+26     	; 0x7c8c <UpdateLimits+0x14c>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    7c72:	24 58       	subi	r18, 0x84	; 132
    7c74:	33 40       	sbci	r19, 0x03	; 3
    7c76:	20 39       	cpi	r18, 0x90	; 144
    7c78:	31 40       	sbci	r19, 0x01	; 1
    7c7a:	30 f4       	brcc	.+12     	; 0x7c88 <UpdateLimits+0x148>
	{
		Config.PowerTriggerActual *= 3;
    7c7c:	9c 01       	movw	r18, r24
    7c7e:	22 0f       	add	r18, r18
    7c80:	33 1f       	adc	r19, r19
    7c82:	28 0f       	add	r18, r24
    7c84:	39 1f       	adc	r19, r25
    7c86:	d7 cf       	rjmp	.-82     	; 0x7c36 <UpdateLimits+0xf6>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    7c88:	88 0f       	add	r24, r24
    7c8a:	99 1f       	adc	r25, r25
    7c8c:	90 93 5e 06 	sts	0x065E, r25
    7c90:	80 93 5d 06 	sts	0x065D, r24
    7c94:	d4 cf       	rjmp	.-88     	; 0x7c3e <UpdateLimits+0xfe>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    7c96:	65 01       	movw	r12, r10
    7c98:	e1 2c       	mov	r14, r1
    7c9a:	f1 2c       	mov	r15, r1
    7c9c:	87 e0       	ldi	r24, 0x07	; 7
    7c9e:	88 2e       	mov	r8, r24
    7ca0:	91 2c       	mov	r9, r1
    7ca2:	8c 0e       	add	r8, r28
    7ca4:	9d 1e       	adc	r9, r29
    7ca6:	80 0e       	add	r8, r16
    7ca8:	91 1e       	adc	r9, r17
    7caa:	66 24       	eor	r6, r6
    7cac:	63 94       	inc	r6
    7cae:	71 2c       	mov	r7, r1
    7cb0:	6c 0e       	add	r6, r28
    7cb2:	7d 1e       	adc	r7, r29
    7cb4:	60 0e       	add	r6, r16
    7cb6:	71 1e       	adc	r7, r17
    7cb8:	f4 01       	movw	r30, r8
    7cba:	ee 0d       	add	r30, r14
    7cbc:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    7cbe:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    7cc0:	bb 27       	eor	r27, r27
    7cc2:	a7 fd       	sbrc	r26, 7
    7cc4:	b0 95       	com	r27
    7cc6:	20 e8       	ldi	r18, 0x80	; 128
    7cc8:	32 e0       	ldi	r19, 0x02	; 2
    7cca:	0e 94 6a 51 	call	0xa2d4	; 0xa2d4 <__usmulhisi3>
    7cce:	f6 01       	movw	r30, r12
    7cd0:	61 93       	st	Z+, r22
    7cd2:	71 93       	st	Z+, r23
    7cd4:	81 93       	st	Z+, r24
    7cd6:	91 93       	st	Z+, r25
    7cd8:	6f 01       	movw	r12, r30
    7cda:	f3 01       	movw	r30, r6
    7cdc:	ee 0d       	add	r30, r14
    7cde:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    7ce0:	20 81       	ld	r18, Z
    7ce2:	22 23       	and	r18, r18
    7ce4:	b1 f0       	breq	.+44     	; 0x7d12 <UpdateLimits+0x1d2>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    7ce6:	35 e0       	ldi	r19, 0x05	; 5
    7ce8:	66 0f       	add	r22, r22
    7cea:	77 1f       	adc	r23, r23
    7cec:	88 1f       	adc	r24, r24
    7cee:	99 1f       	adc	r25, r25
    7cf0:	3a 95       	dec	r19
    7cf2:	d1 f7       	brne	.-12     	; 0x7ce8 <UpdateLimits+0x1a8>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    7cf4:	33 27       	eor	r19, r19
    7cf6:	27 fd       	sbrc	r18, 7
    7cf8:	30 95       	com	r19
    7cfa:	43 2f       	mov	r20, r19
    7cfc:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    7cfe:	0e 94 2e 51 	call	0xa25c	; 0xa25c <__divmodsi4>
    7d02:	d6 01       	movw	r26, r12
    7d04:	54 96       	adiw	r26, 0x14	; 20
    7d06:	2d 93       	st	X+, r18
    7d08:	3d 93       	st	X+, r19
    7d0a:	4d 93       	st	X+, r20
    7d0c:	5c 93       	st	X, r21
    7d0e:	57 97       	sbiw	r26, 0x17	; 23
    7d10:	05 c0       	rjmp	.+10     	; 0x7d1c <UpdateLimits+0x1dc>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    7d12:	f6 01       	movw	r30, r12
    7d14:	14 8a       	std	Z+20, r1	; 0x14
    7d16:	15 8a       	std	Z+21, r1	; 0x15
    7d18:	16 8a       	std	Z+22, r1	; 0x16
    7d1a:	17 8a       	std	Z+23, r1	; 0x17
    7d1c:	ff ef       	ldi	r31, 0xFF	; 255
    7d1e:	ef 1a       	sub	r14, r31
    7d20:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    7d22:	23 e0       	ldi	r18, 0x03	; 3
    7d24:	e2 16       	cp	r14, r18
    7d26:	f1 04       	cpc	r15, r1
    7d28:	39 f6       	brne	.-114    	; 0x7cb8 <UpdateLimits+0x178>
    7d2a:	4c e0       	ldi	r20, 0x0C	; 12
    7d2c:	a4 0e       	add	r10, r20
    7d2e:	b1 1c       	adc	r11, r1
    7d30:	0d 5f       	subi	r16, 0xFD	; 253
    7d32:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    7d34:	06 30       	cpi	r16, 0x06	; 6
    7d36:	11 05       	cpc	r17, r1
    7d38:	09 f0       	breq	.+2      	; 0x7d3c <UpdateLimits+0x1fc>
    7d3a:	ad cf       	rjmp	.-166    	; 0x7c96 <UpdateLimits+0x156>
    7d3c:	81 ea       	ldi	r24, 0xA1	; 161
    7d3e:	97 e0       	ldi	r25, 0x07	; 7
    7d40:	e0 ee       	ldi	r30, 0xE0	; 224
    7d42:	f5 e0       	ldi	r31, 0x05	; 5
    7d44:	69 ea       	ldi	r22, 0xA9	; 169
    7d46:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    7d48:	dc 01       	movw	r26, r24
    7d4a:	2d 91       	ld	r18, X+
    7d4c:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7d4e:	ba e0       	ldi	r27, 0x0A	; 10
    7d50:	2b 02       	muls	r18, r27
    7d52:	90 01       	movw	r18, r0
    7d54:	11 24       	eor	r1, r1
    7d56:	2a 55       	subi	r18, 0x5A	; 90
    7d58:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    7d5a:	31 83       	std	Z+1, r19	; 0x01
    7d5c:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    7d5e:	db 01       	movw	r26, r22
    7d60:	2d 91       	ld	r18, X+
    7d62:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7d64:	ba e0       	ldi	r27, 0x0A	; 10
    7d66:	2b 02       	muls	r18, r27
    7d68:	90 01       	movw	r18, r0
    7d6a:	11 24       	eor	r1, r1
    7d6c:	2a 55       	subi	r18, 0x5A	; 90
    7d6e:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    7d70:	33 83       	std	Z+3, r19	; 0x03
    7d72:	22 83       	std	Z+2, r18	; 0x02
    7d74:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    7d76:	26 e0       	ldi	r18, 0x06	; 6
    7d78:	e0 30       	cpi	r30, 0x00	; 0
    7d7a:	f2 07       	cpc	r31, r18
    7d7c:	29 f7       	brne	.-54     	; 0x7d48 <UpdateLimits+0x208>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    7d7e:	80 91 0e 06 	lds	r24, 0x060E
    7d82:	4a e0       	ldi	r20, 0x0A	; 10
    7d84:	84 02       	muls	r24, r20
    7d86:	c0 01       	movw	r24, r0
    7d88:	11 24       	eor	r1, r1
    7d8a:	90 93 d7 07 	sts	0x07D7, r25
    7d8e:	80 93 d6 07 	sts	0x07D6, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    7d92:	80 91 14 06 	lds	r24, 0x0614
    7d96:	6a e0       	ldi	r22, 0x0A	; 10
    7d98:	86 02       	muls	r24, r22
    7d9a:	c0 01       	movw	r24, r0
    7d9c:	11 24       	eor	r1, r1
    7d9e:	90 93 db 07 	sts	0x07DB, r25
    7da2:	80 93 da 07 	sts	0x07DA, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    7da6:	80 91 20 06 	lds	r24, 0x0620
    7daa:	aa e0       	ldi	r26, 0x0A	; 10
    7dac:	8a 02       	muls	r24, r26
    7dae:	c0 01       	movw	r24, r0
    7db0:	11 24       	eor	r1, r1
    7db2:	90 93 d9 07 	sts	0x07D9, r25
    7db6:	80 93 d8 07 	sts	0x07D8, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    7dba:	80 91 26 06 	lds	r24, 0x0626
    7dbe:	ba e0       	ldi	r27, 0x0A	; 10
    7dc0:	8b 02       	muls	r24, r27
    7dc2:	c0 01       	movw	r24, r0
    7dc4:	11 24       	eor	r1, r1
    7dc6:	90 93 dd 07 	sts	0x07DD, r25
    7dca:	80 93 dc 07 	sts	0x07DC, r24
	}
}
    7dce:	2c 96       	adiw	r28, 0x0c	; 12
    7dd0:	0f b6       	in	r0, 0x3f	; 63
    7dd2:	f8 94       	cli
    7dd4:	de bf       	out	0x3e, r29	; 62
    7dd6:	0f be       	out	0x3f, r0	; 63
    7dd8:	cd bf       	out	0x3d, r28	; 61
    7dda:	df 91       	pop	r29
    7ddc:	cf 91       	pop	r28
    7dde:	1f 91       	pop	r17
    7de0:	0f 91       	pop	r16
    7de2:	ff 90       	pop	r15
    7de4:	ef 90       	pop	r14
    7de6:	df 90       	pop	r13
    7de8:	cf 90       	pop	r12
    7dea:	bf 90       	pop	r11
    7dec:	af 90       	pop	r10
    7dee:	9f 90       	pop	r9
    7df0:	8f 90       	pop	r8
    7df2:	7f 90       	pop	r7
    7df4:	6f 90       	pop	r6
    7df6:	08 95       	ret

00007df8 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    7df8:	0f 93       	push	r16
    7dfa:	1f 93       	push	r17
    7dfc:	cf 93       	push	r28
    7dfe:	df 93       	push	r29
    7e00:	a9 e6       	ldi	r26, 0x69	; 105
    7e02:	b6 e0       	ldi	r27, 0x06	; 6
    7e04:	09 e9       	ldi	r16, 0x99	; 153
    7e06:	17 e0       	ldi	r17, 0x07	; 7
    7e08:	e0 ee       	ldi	r30, 0xE0	; 224
    7e0a:	f5 e0       	ldi	r31, 0x05	; 5
    7e0c:	80 e0       	ldi	r24, 0x00	; 0
    7e0e:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    7e10:	2d 91       	ld	r18, X+
    7e12:	3c 91       	ld	r19, X
    7e14:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    7e16:	e8 01       	movw	r28, r16
    7e18:	49 91       	ld	r20, Y+
    7e1a:	8e 01       	movw	r16, r28
    7e1c:	41 30       	cpi	r20, 0x01	; 1
    7e1e:	19 f4       	brne	.+6      	; 0x7e26 <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    7e20:	31 95       	neg	r19
    7e22:	21 95       	neg	r18
    7e24:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    7e26:	2a 55       	subi	r18, 0x5A	; 90
    7e28:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    7e2a:	62 81       	ldd	r22, Z+2	; 0x02
    7e2c:	73 81       	ldd	r23, Z+3	; 0x03
    7e2e:	ac 01       	movw	r20, r24
    7e30:	44 0f       	add	r20, r20
    7e32:	55 1f       	adc	r21, r21
    7e34:	62 17       	cp	r22, r18
    7e36:	73 07       	cpc	r23, r19
    7e38:	24 f4       	brge	.+8      	; 0x7e42 <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    7e3a:	4a 56       	subi	r20, 0x6A	; 106
    7e3c:	57 4f       	sbci	r21, 0xF7	; 247
    7e3e:	ea 01       	movw	r28, r20
    7e40:	08 c0       	rjmp	.+16     	; 0x7e52 <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    7e42:	60 81       	ld	r22, Z
    7e44:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7e46:	4a 56       	subi	r20, 0x6A	; 106
    7e48:	57 4f       	sbci	r21, 0xF7	; 247
    7e4a:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    7e4c:	26 17       	cp	r18, r22
    7e4e:	37 07       	cpc	r19, r23
    7e50:	1c f4       	brge	.+6      	; 0x7e58 <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7e52:	79 83       	std	Y+1, r23	; 0x01
    7e54:	68 83       	st	Y, r22
    7e56:	02 c0       	rjmp	.+4      	; 0x7e5c <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    7e58:	39 83       	std	Y+1, r19	; 0x01
    7e5a:	28 83       	st	Y, r18
    7e5c:	01 96       	adiw	r24, 0x01	; 1
    7e5e:	96 96       	adiw	r26, 0x26	; 38
    7e60:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    7e62:	88 30       	cpi	r24, 0x08	; 8
    7e64:	91 05       	cpc	r25, r1
    7e66:	a1 f6       	brne	.-88     	; 0x7e10 <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    7e68:	df 91       	pop	r29
    7e6a:	cf 91       	pop	r28
    7e6c:	1f 91       	pop	r17
    7e6e:	0f 91       	pop	r16
    7e70:	08 95       	ret

00007e72 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    7e72:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    7e74:	64 36       	cpi	r22, 0x64	; 100
    7e76:	71 05       	cpc	r23, r1
    7e78:	e9 f0       	breq	.+58     	; 0x7eb4 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    7e7a:	6c 39       	cpi	r22, 0x9C	; 156
    7e7c:	8f ef       	ldi	r24, 0xFF	; 255
    7e7e:	78 07       	cpc	r23, r24
    7e80:	29 f4       	brne	.+10     	; 0x7e8c <scale32+0x1a>
	{
		return -value16;	
    7e82:	88 27       	eor	r24, r24
    7e84:	99 27       	eor	r25, r25
    7e86:	82 1b       	sub	r24, r18
    7e88:	93 0b       	sbc	r25, r19
    7e8a:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    7e8c:	61 15       	cp	r22, r1
    7e8e:	71 05       	cpc	r23, r1
    7e90:	71 f0       	breq	.+28     	; 0x7eae <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    7e92:	db 01       	movw	r26, r22
    7e94:	0e 94 53 51 	call	0xa2a6	; 0xa2a6 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    7e98:	6e 5c       	subi	r22, 0xCE	; 206
    7e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    7e9c:	8f 4f       	sbci	r24, 0xFF	; 255
    7e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    7ea0:	24 e6       	ldi	r18, 0x64	; 100
    7ea2:	30 e0       	ldi	r19, 0x00	; 0
    7ea4:	40 e0       	ldi	r20, 0x00	; 0
    7ea6:	50 e0       	ldi	r21, 0x00	; 0
    7ea8:	0e 94 2e 51 	call	0xa25c	; 0xa25c <__divmodsi4>
    7eac:	03 c0       	rjmp	.+6      	; 0x7eb4 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    7eae:	80 e0       	ldi	r24, 0x00	; 0
    7eb0:	90 e0       	ldi	r25, 0x00	; 0
    7eb2:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    7eb4:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    7eb6:	08 95       	ret

00007eb8 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    7eb8:	2f 92       	push	r2
    7eba:	3f 92       	push	r3
    7ebc:	4f 92       	push	r4
    7ebe:	5f 92       	push	r5
    7ec0:	6f 92       	push	r6
    7ec2:	7f 92       	push	r7
    7ec4:	8f 92       	push	r8
    7ec6:	9f 92       	push	r9
    7ec8:	af 92       	push	r10
    7eca:	bf 92       	push	r11
    7ecc:	cf 92       	push	r12
    7ece:	df 92       	push	r13
    7ed0:	ef 92       	push	r14
    7ed2:	ff 92       	push	r15
    7ed4:	0f 93       	push	r16
    7ed6:	1f 93       	push	r17
    7ed8:	cf 93       	push	r28
    7eda:	df 93       	push	r29
    7edc:	cd b7       	in	r28, 0x3d	; 61
    7ede:	de b7       	in	r29, 0x3e	; 62
    7ee0:	e2 97       	sbiw	r28, 0x32	; 50
    7ee2:	0f b6       	in	r0, 0x3f	; 63
    7ee4:	f8 94       	cli
    7ee6:	de bf       	out	0x3e, r29	; 62
    7ee8:	0f be       	out	0x3f, r0	; 63
    7eea:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    7eec:	60 91 bf 05 	lds	r22, 0x05BF
    7ef0:	70 91 c0 05 	lds	r23, 0x05C0
    7ef4:	80 91 c1 05 	lds	r24, 0x05C1
    7ef8:	90 91 c2 05 	lds	r25, 0x05C2
    7efc:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    7f00:	8b 01       	movw	r16, r22
    7f02:	83 e0       	ldi	r24, 0x03	; 3
    7f04:	00 0f       	add	r16, r16
    7f06:	11 1f       	adc	r17, r17
    7f08:	8a 95       	dec	r24
    7f0a:	e1 f7       	brne	.-8      	; 0x7f04 <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    7f0c:	60 91 c3 05 	lds	r22, 0x05C3
    7f10:	70 91 c4 05 	lds	r23, 0x05C4
    7f14:	80 91 c5 05 	lds	r24, 0x05C5
    7f18:	90 91 c6 05 	lds	r25, 0x05C6
    7f1c:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    7f20:	93 e0       	ldi	r25, 0x03	; 3
    7f22:	66 0f       	add	r22, r22
    7f24:	77 1f       	adc	r23, r23
    7f26:	9a 95       	dec	r25
    7f28:	e1 f7       	brne	.-8      	; 0x7f22 <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    7f2a:	20 91 5a 08 	lds	r18, 0x085A
    7f2e:	30 91 5b 08 	lds	r19, 0x085B
    7f32:	3e 8f       	std	Y+30, r19	; 0x1e
    7f34:	2d 8f       	std	Y+29, r18	; 0x1d
    7f36:	38 8b       	std	Y+16, r19	; 0x10
    7f38:	2f 87       	std	Y+15, r18	; 0x0f
    7f3a:	40 91 5c 08 	lds	r20, 0x085C
    7f3e:	50 91 5d 08 	lds	r21, 0x085D
    7f42:	58 a3       	std	Y+32, r21	; 0x20
    7f44:	4f 8f       	std	Y+31, r20	; 0x1f
    7f46:	5a 8b       	std	Y+18, r21	; 0x12
    7f48:	49 8b       	std	Y+17, r20	; 0x11
    7f4a:	20 91 5e 08 	lds	r18, 0x085E
    7f4e:	30 91 5f 08 	lds	r19, 0x085F
    7f52:	3a a3       	std	Y+34, r19	; 0x22
    7f54:	29 a3       	std	Y+33, r18	; 0x21
    7f56:	3c 8b       	std	Y+20, r19	; 0x14
    7f58:	2b 8b       	std	Y+19, r18	; 0x13
    7f5a:	1e 8b       	std	Y+22, r17	; 0x16
    7f5c:	0d 8b       	std	Y+21, r16	; 0x15
    7f5e:	78 8f       	std	Y+24, r23	; 0x18
    7f60:	6f 8b       	std	Y+23, r22	; 0x17
    7f62:	40 91 66 08 	lds	r20, 0x0866
    7f66:	50 91 67 08 	lds	r21, 0x0867
    7f6a:	5c a3       	std	Y+36, r21	; 0x24
    7f6c:	4b a3       	std	Y+35, r20	; 0x23
    7f6e:	5a 8f       	std	Y+26, r21	; 0x1a
    7f70:	49 8f       	std	Y+25, r20	; 0x19
    7f72:	20 91 68 08 	lds	r18, 0x0868
    7f76:	30 91 69 08 	lds	r19, 0x0869
    7f7a:	3e a3       	std	Y+38, r19	; 0x26
    7f7c:	2d a3       	std	Y+37, r18	; 0x25
    7f7e:	3c 8f       	std	Y+28, r19	; 0x1c
    7f80:	2b 8f       	std	Y+27, r18	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    7f82:	40 91 60 08 	lds	r20, 0x0860
    7f86:	50 91 61 08 	lds	r21, 0x0861
    7f8a:	58 a7       	std	Y+40, r21	; 0x28
    7f8c:	4f a3       	std	Y+39, r20	; 0x27
    7f8e:	5a 83       	std	Y+2, r21	; 0x02
    7f90:	49 83       	std	Y+1, r20	; 0x01
    7f92:	20 91 62 08 	lds	r18, 0x0862
    7f96:	30 91 63 08 	lds	r19, 0x0863
    7f9a:	3a a7       	std	Y+42, r19	; 0x2a
    7f9c:	29 a7       	std	Y+41, r18	; 0x29
    7f9e:	3c 83       	std	Y+4, r19	; 0x04
    7fa0:	2b 83       	std	Y+3, r18	; 0x03
    7fa2:	20 90 64 08 	lds	r2, 0x0864
    7fa6:	30 90 65 08 	lds	r3, 0x0865
    7faa:	3e 82       	std	Y+6, r3	; 0x06
    7fac:	2d 82       	std	Y+5, r2	; 0x05
    7fae:	18 87       	std	Y+8, r17	; 0x08
    7fb0:	0f 83       	std	Y+7, r16	; 0x07
    7fb2:	7a 87       	std	Y+10, r23	; 0x0a
    7fb4:	69 87       	std	Y+9, r22	; 0x09
    7fb6:	40 90 6c 08 	lds	r4, 0x086C
    7fba:	50 90 6d 08 	lds	r5, 0x086D
    7fbe:	5c 86       	std	Y+12, r5	; 0x0c
    7fc0:	4b 86       	std	Y+11, r4	; 0x0b
    7fc2:	80 90 6e 08 	lds	r8, 0x086E
    7fc6:	90 90 6f 08 	lds	r9, 0x086F
    7fca:	9e 86       	std	Y+14, r9	; 0x0e
    7fcc:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (transition < 100)
    7fce:	a0 90 21 05 	lds	r10, 0x0521
    7fd2:	b0 90 22 05 	lds	r11, 0x0522
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7fd6:	40 91 6a 08 	lds	r20, 0x086A
    7fda:	50 91 6b 08 	lds	r21, 0x086B
    7fde:	5c a7       	std	Y+44, r21	; 0x2c
    7fe0:	4b a7       	std	Y+43, r20	; 0x2b
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7fe2:	20 91 70 08 	lds	r18, 0x0870
    7fe6:	30 91 71 08 	lds	r19, 0x0871
    7fea:	3e a7       	std	Y+46, r19	; 0x2e
    7fec:	2d a7       	std	Y+45, r18	; 0x2d
    7fee:	c1 2c       	mov	r12, r1
    7ff0:	d1 2c       	mov	r13, r1
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7ff2:	4f a1       	ldd	r20, Y+39	; 0x27
    7ff4:	58 a5       	ldd	r21, Y+40	; 0x28
    7ff6:	51 95       	neg	r21
    7ff8:	41 95       	neg	r20
    7ffa:	51 09       	sbc	r21, r1
    7ffc:	58 ab       	std	Y+48, r21	; 0x30
    7ffe:	4f a7       	std	Y+47, r20	; 0x2f
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    8000:	2d 8d       	ldd	r18, Y+29	; 0x1d
    8002:	3e 8d       	ldd	r19, Y+30	; 0x1e
    8004:	31 95       	neg	r19
    8006:	21 95       	neg	r18
    8008:	31 09       	sbc	r19, r1
    800a:	3a ab       	std	Y+50, r19	; 0x32
    800c:	29 ab       	std	Y+49, r18	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (transition < 100)
    800e:	34 e6       	ldi	r19, 0x64	; 100
    8010:	a3 16       	cp	r10, r19
    8012:	b1 04       	cpc	r11, r1
    8014:	0c f0       	brlt	.+2      	; 0x8018 <ProcessMixer+0x160>
    8016:	7b c0       	rjmp	.+246    	; 0x810e <ProcessMixer+0x256>
    8018:	86 01       	movw	r16, r12
    801a:	09 52       	subi	r16, 0x29	; 41
    801c:	1a 4f       	sbci	r17, 0xFA	; 250
    801e:	f8 01       	movw	r30, r16
    8020:	ec 55       	subi	r30, 0x5C	; 92
    8022:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    8024:	80 81       	ld	r24, Z
    8026:	81 30       	cpi	r24, 0x01	; 1
    8028:	99 f0       	breq	.+38     	; 0x8050 <ProcessMixer+0x198>
    802a:	82 30       	cpi	r24, 0x02	; 2
    802c:	d1 f4       	brne	.+52     	; 0x8062 <ProcessMixer+0x1aa>
    802e:	f8 01       	movw	r30, r16
    8030:	e2 56       	subi	r30, 0x62	; 98
    8032:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    8034:	60 81       	ld	r22, Z
    8036:	45 e0       	ldi	r20, 0x05	; 5
    8038:	64 02       	muls	r22, r20
    803a:	b0 01       	movw	r22, r0
    803c:	11 24       	eor	r1, r1
    803e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8040:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8042:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    8046:	ee 24       	eor	r14, r14
    8048:	ff 24       	eor	r15, r15
    804a:	e8 1a       	sub	r14, r24
    804c:	f9 0a       	sbc	r15, r25
					break;
    804e:	0e c0       	rjmp	.+28     	; 0x806c <ProcessMixer+0x1b4>
    8050:	f8 01       	movw	r30, r16
    8052:	e2 56       	subi	r30, 0x62	; 98
    8054:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    8056:	80 81       	ld	r24, Z
    8058:	87 fd       	sbrc	r24, 7
    805a:	06 c0       	rjmp	.+12     	; 0x8068 <ProcessMixer+0x1b0>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    805c:	e9 a8       	ldd	r14, Y+49	; 0x31
    805e:	fa a8       	ldd	r15, Y+50	; 0x32
    8060:	05 c0       	rjmp	.+10     	; 0x806c <ProcessMixer+0x1b4>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    8062:	e1 2c       	mov	r14, r1
    8064:	f1 2c       	mov	r15, r1
    8066:	02 c0       	rjmp	.+4      	; 0x806c <ProcessMixer+0x1b4>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    8068:	ed 8c       	ldd	r14, Y+29	; 0x1d
    806a:	fe 8c       	ldd	r15, Y+30	; 0x1e
    806c:	f8 01       	movw	r30, r16
    806e:	ea 55       	subi	r30, 0x5A	; 90
    8070:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    8072:	80 81       	ld	r24, Z
    8074:	81 30       	cpi	r24, 0x01	; 1
    8076:	89 f0       	breq	.+34     	; 0x809a <ProcessMixer+0x1e2>
    8078:	82 30       	cpi	r24, 0x02	; 2
    807a:	f1 f4       	brne	.+60     	; 0x80b8 <ProcessMixer+0x200>
    807c:	f8 01       	movw	r30, r16
    807e:	e0 56       	subi	r30, 0x60	; 96
    8080:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    8082:	60 81       	ld	r22, Z
    8084:	55 e0       	ldi	r21, 0x05	; 5
    8086:	65 02       	muls	r22, r21
    8088:	b0 01       	movw	r22, r0
    808a:	11 24       	eor	r1, r1
    808c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    808e:	98 a1       	ldd	r25, Y+32	; 0x20
    8090:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    8094:	e8 0e       	add	r14, r24
    8096:	f9 1e       	adc	r15, r25
					break;
    8098:	0f c0       	rjmp	.+30     	; 0x80b8 <ProcessMixer+0x200>
    809a:	f8 01       	movw	r30, r16
    809c:	e0 56       	subi	r30, 0x60	; 96
    809e:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    80a0:	80 81       	ld	r24, Z
    80a2:	87 ff       	sbrs	r24, 7
    80a4:	05 c0       	rjmp	.+10     	; 0x80b0 <ProcessMixer+0x1f8>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    80a6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    80a8:	38 a1       	ldd	r19, Y+32	; 0x20
    80aa:	e2 1a       	sub	r14, r18
    80ac:	f3 0a       	sbc	r15, r19
    80ae:	04 c0       	rjmp	.+8      	; 0x80b8 <ProcessMixer+0x200>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    80b0:	4f 8d       	ldd	r20, Y+31	; 0x1f
    80b2:	58 a1       	ldd	r21, Y+32	; 0x20
    80b4:	e4 0e       	add	r14, r20
    80b6:	f5 1e       	adc	r15, r21
    80b8:	f8 01       	movw	r30, r16
    80ba:	e8 55       	subi	r30, 0x58	; 88
    80bc:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    80be:	80 81       	ld	r24, Z
    80c0:	81 30       	cpi	r24, 0x01	; 1
    80c2:	89 f0       	breq	.+34     	; 0x80e6 <ProcessMixer+0x22e>
    80c4:	82 30       	cpi	r24, 0x02	; 2
    80c6:	f1 f4       	brne	.+60     	; 0x8104 <ProcessMixer+0x24c>
    80c8:	f8 01       	movw	r30, r16
    80ca:	ee 55       	subi	r30, 0x5E	; 94
    80cc:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    80ce:	60 81       	ld	r22, Z
    80d0:	55 e0       	ldi	r21, 0x05	; 5
    80d2:	65 02       	muls	r22, r21
    80d4:	b0 01       	movw	r22, r0
    80d6:	11 24       	eor	r1, r1
    80d8:	89 a1       	ldd	r24, Y+33	; 0x21
    80da:	9a a1       	ldd	r25, Y+34	; 0x22
    80dc:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    80e0:	e8 0e       	add	r14, r24
    80e2:	f9 1e       	adc	r15, r25
					break;
    80e4:	0f c0       	rjmp	.+30     	; 0x8104 <ProcessMixer+0x24c>
    80e6:	f8 01       	movw	r30, r16
    80e8:	ee 55       	subi	r30, 0x5E	; 94
    80ea:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_rudder_volume < 0 )
    80ec:	80 81       	ld	r24, Z
    80ee:	87 ff       	sbrs	r24, 7
    80f0:	05 c0       	rjmp	.+10     	; 0x80fc <ProcessMixer+0x244>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    80f2:	29 a1       	ldd	r18, Y+33	; 0x21
    80f4:	3a a1       	ldd	r19, Y+34	; 0x22
    80f6:	e2 1a       	sub	r14, r18
    80f8:	f3 0a       	sbc	r15, r19
    80fa:	04 c0       	rjmp	.+8      	; 0x8104 <ProcessMixer+0x24c>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    80fc:	49 a1       	ldd	r20, Y+33	; 0x21
    80fe:	5a a1       	ldd	r21, Y+34	; 0x22
    8100:	e4 0e       	add	r14, r20
    8102:	f5 1e       	adc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (transition > 0)
    8104:	1a 14       	cp	r1, r10
    8106:	1b 04       	cpc	r1, r11
    8108:	0c f0       	brlt	.+2      	; 0x810c <ProcessMixer+0x254>
    810a:	7b c0       	rjmp	.+246    	; 0x8202 <ProcessMixer+0x34a>
    810c:	02 c0       	rjmp	.+4      	; 0x8112 <ProcessMixer+0x25a>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    810e:	e1 2c       	mov	r14, r1
    8110:	f1 2c       	mov	r15, r1
    8112:	c6 01       	movw	r24, r12
    8114:	89 52       	subi	r24, 0x29	; 41
    8116:	9a 4f       	sbci	r25, 0xFA	; 250
    8118:	3c 01       	movw	r6, r24
    811a:	fc 01       	movw	r30, r24
    811c:	eb 55       	subi	r30, 0x5B	; 91
    811e:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (transition > 0)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    8120:	80 81       	ld	r24, Z
    8122:	81 30       	cpi	r24, 0x01	; 1
    8124:	99 f0       	breq	.+38     	; 0x814c <ProcessMixer+0x294>
    8126:	82 30       	cpi	r24, 0x02	; 2
    8128:	d1 f4       	brne	.+52     	; 0x815e <ProcessMixer+0x2a6>
    812a:	f3 01       	movw	r30, r6
    812c:	e1 56       	subi	r30, 0x61	; 97
    812e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    8130:	60 81       	ld	r22, Z
    8132:	95 e0       	ldi	r25, 0x05	; 5
    8134:	69 02       	muls	r22, r25
    8136:	b0 01       	movw	r22, r0
    8138:	11 24       	eor	r1, r1
    813a:	8f a1       	ldd	r24, Y+39	; 0x27
    813c:	98 a5       	ldd	r25, Y+40	; 0x28
    813e:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    8142:	00 27       	eor	r16, r16
    8144:	11 27       	eor	r17, r17
    8146:	08 1b       	sub	r16, r24
    8148:	19 0b       	sbc	r17, r25
					break;
    814a:	0e c0       	rjmp	.+28     	; 0x8168 <ProcessMixer+0x2b0>
    814c:	f3 01       	movw	r30, r6
    814e:	e1 56       	subi	r30, 0x61	; 97
    8150:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    8152:	80 81       	ld	r24, Z
    8154:	87 fd       	sbrc	r24, 7
    8156:	06 c0       	rjmp	.+12     	; 0x8164 <ProcessMixer+0x2ac>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    8158:	0f a5       	ldd	r16, Y+47	; 0x2f
    815a:	18 a9       	ldd	r17, Y+48	; 0x30
    815c:	05 c0       	rjmp	.+10     	; 0x8168 <ProcessMixer+0x2b0>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    815e:	00 e0       	ldi	r16, 0x00	; 0
    8160:	10 e0       	ldi	r17, 0x00	; 0
    8162:	02 c0       	rjmp	.+4      	; 0x8168 <ProcessMixer+0x2b0>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    8164:	0f a1       	ldd	r16, Y+39	; 0x27
    8166:	18 a5       	ldd	r17, Y+40	; 0x28
    8168:	f3 01       	movw	r30, r6
    816a:	e9 55       	subi	r30, 0x59	; 89
    816c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    816e:	80 81       	ld	r24, Z
    8170:	81 30       	cpi	r24, 0x01	; 1
    8172:	89 f0       	breq	.+34     	; 0x8196 <ProcessMixer+0x2de>
    8174:	82 30       	cpi	r24, 0x02	; 2
    8176:	f1 f4       	brne	.+60     	; 0x81b4 <ProcessMixer+0x2fc>
    8178:	f3 01       	movw	r30, r6
    817a:	ef 55       	subi	r30, 0x5F	; 95
    817c:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    817e:	60 81       	ld	r22, Z
    8180:	55 e0       	ldi	r21, 0x05	; 5
    8182:	65 02       	muls	r22, r21
    8184:	b0 01       	movw	r22, r0
    8186:	11 24       	eor	r1, r1
    8188:	89 a5       	ldd	r24, Y+41	; 0x29
    818a:	9a a5       	ldd	r25, Y+42	; 0x2a
    818c:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    8190:	08 0f       	add	r16, r24
    8192:	19 1f       	adc	r17, r25
					break;
    8194:	0f c0       	rjmp	.+30     	; 0x81b4 <ProcessMixer+0x2fc>
    8196:	f3 01       	movw	r30, r6
    8198:	ef 55       	subi	r30, 0x5F	; 95
    819a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    819c:	80 81       	ld	r24, Z
    819e:	87 ff       	sbrs	r24, 7
    81a0:	05 c0       	rjmp	.+10     	; 0x81ac <ProcessMixer+0x2f4>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    81a2:	29 a5       	ldd	r18, Y+41	; 0x29
    81a4:	3a a5       	ldd	r19, Y+42	; 0x2a
    81a6:	02 1b       	sub	r16, r18
    81a8:	13 0b       	sbc	r17, r19
    81aa:	04 c0       	rjmp	.+8      	; 0x81b4 <ProcessMixer+0x2fc>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    81ac:	49 a5       	ldd	r20, Y+41	; 0x29
    81ae:	5a a5       	ldd	r21, Y+42	; 0x2a
    81b0:	04 0f       	add	r16, r20
    81b2:	15 1f       	adc	r17, r21
    81b4:	f3 01       	movw	r30, r6
    81b6:	e7 55       	subi	r30, 0x57	; 87
    81b8:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    81ba:	80 81       	ld	r24, Z
    81bc:	81 30       	cpi	r24, 0x01	; 1
    81be:	81 f0       	breq	.+32     	; 0x81e0 <ProcessMixer+0x328>
    81c0:	82 30       	cpi	r24, 0x02	; 2
    81c2:	c9 f4       	brne	.+50     	; 0x81f6 <ProcessMixer+0x33e>
    81c4:	f3 01       	movw	r30, r6
    81c6:	ed 55       	subi	r30, 0x5D	; 93
    81c8:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    81ca:	60 81       	ld	r22, Z
    81cc:	85 e0       	ldi	r24, 0x05	; 5
    81ce:	68 02       	muls	r22, r24
    81d0:	b0 01       	movw	r22, r0
    81d2:	11 24       	eor	r1, r1
    81d4:	c1 01       	movw	r24, r2
    81d6:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    81da:	08 0f       	add	r16, r24
    81dc:	19 1f       	adc	r17, r25
					break;
    81de:	0b c0       	rjmp	.+22     	; 0x81f6 <ProcessMixer+0x33e>
    81e0:	f3 01       	movw	r30, r6
    81e2:	ed 55       	subi	r30, 0x5D	; 93
    81e4:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    81e6:	80 81       	ld	r24, Z
    81e8:	87 ff       	sbrs	r24, 7
    81ea:	03 c0       	rjmp	.+6      	; 0x81f2 <ProcessMixer+0x33a>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    81ec:	02 19       	sub	r16, r2
    81ee:	13 09       	sbc	r17, r3
    81f0:	02 c0       	rjmp	.+4      	; 0x81f6 <ProcessMixer+0x33e>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    81f2:	02 0d       	add	r16, r2
    81f4:	13 1d       	adc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
    81f6:	94 e6       	ldi	r25, 0x64	; 100
    81f8:	a9 16       	cp	r10, r25
    81fa:	b1 04       	cpc	r11, r1
    81fc:	0c f0       	brlt	.+2      	; 0x8200 <ProcessMixer+0x348>
    81fe:	7d c0       	rjmp	.+250    	; 0x82fa <ProcessMixer+0x442>
    8200:	02 c0       	rjmp	.+4      	; 0x8206 <ProcessMixer+0x34e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    8202:	00 e0       	ldi	r16, 0x00	; 0
    8204:	10 e0       	ldi	r17, 0x00	; 0
    8206:	d6 01       	movw	r26, r12
    8208:	a9 52       	subi	r26, 0x29	; 41
    820a:	ba 4f       	sbci	r27, 0xFA	; 250
    820c:	3d 01       	movw	r6, r26
    820e:	fd 01       	movw	r30, r26
    8210:	e6 55       	subi	r30, 0x56	; 86
    8212:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    8214:	80 81       	ld	r24, Z
    8216:	81 30       	cpi	r24, 0x01	; 1
    8218:	89 f0       	breq	.+34     	; 0x823c <ProcessMixer+0x384>
    821a:	82 30       	cpi	r24, 0x02	; 2
    821c:	f1 f4       	brne	.+60     	; 0x825a <ProcessMixer+0x3a2>
    821e:	fd 01       	movw	r30, r26
    8220:	e2 56       	subi	r30, 0x62	; 98
    8222:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    8224:	60 81       	ld	r22, Z
    8226:	55 e0       	ldi	r21, 0x05	; 5
    8228:	65 02       	muls	r22, r21
    822a:	b0 01       	movw	r22, r0
    822c:	11 24       	eor	r1, r1
    822e:	8b a1       	ldd	r24, Y+35	; 0x23
    8230:	9c a1       	ldd	r25, Y+36	; 0x24
    8232:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    8236:	e8 1a       	sub	r14, r24
    8238:	f9 0a       	sbc	r15, r25
					break;
    823a:	0f c0       	rjmp	.+30     	; 0x825a <ProcessMixer+0x3a2>
    823c:	fd 01       	movw	r30, r26
    823e:	e2 56       	subi	r30, 0x62	; 98
    8240:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    8242:	80 81       	ld	r24, Z
    8244:	87 ff       	sbrs	r24, 7
    8246:	05 c0       	rjmp	.+10     	; 0x8252 <ProcessMixer+0x39a>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    8248:	2b a1       	ldd	r18, Y+35	; 0x23
    824a:	3c a1       	ldd	r19, Y+36	; 0x24
    824c:	e2 0e       	add	r14, r18
    824e:	f3 1e       	adc	r15, r19
    8250:	04 c0       	rjmp	.+8      	; 0x825a <ProcessMixer+0x3a2>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    8252:	4b a1       	ldd	r20, Y+35	; 0x23
    8254:	5c a1       	ldd	r21, Y+36	; 0x24
    8256:	e4 1a       	sub	r14, r20
    8258:	f5 0a       	sbc	r15, r21
    825a:	f3 01       	movw	r30, r6
    825c:	e4 55       	subi	r30, 0x54	; 84
    825e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    8260:	80 81       	ld	r24, Z
    8262:	81 30       	cpi	r24, 0x01	; 1
    8264:	89 f0       	breq	.+34     	; 0x8288 <ProcessMixer+0x3d0>
    8266:	82 30       	cpi	r24, 0x02	; 2
    8268:	f1 f4       	brne	.+60     	; 0x82a6 <ProcessMixer+0x3ee>
    826a:	f3 01       	movw	r30, r6
    826c:	e0 56       	subi	r30, 0x60	; 96
    826e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    8270:	60 81       	ld	r22, Z
    8272:	55 e0       	ldi	r21, 0x05	; 5
    8274:	65 02       	muls	r22, r21
    8276:	b0 01       	movw	r22, r0
    8278:	11 24       	eor	r1, r1
    827a:	8d a1       	ldd	r24, Y+37	; 0x25
    827c:	9e a1       	ldd	r25, Y+38	; 0x26
    827e:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    8282:	e8 0e       	add	r14, r24
    8284:	f9 1e       	adc	r15, r25
					break;
    8286:	0f c0       	rjmp	.+30     	; 0x82a6 <ProcessMixer+0x3ee>
    8288:	f3 01       	movw	r30, r6
    828a:	e0 56       	subi	r30, 0x60	; 96
    828c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    828e:	80 81       	ld	r24, Z
    8290:	87 ff       	sbrs	r24, 7
    8292:	05 c0       	rjmp	.+10     	; 0x829e <ProcessMixer+0x3e6>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    8294:	2d a1       	ldd	r18, Y+37	; 0x25
    8296:	3e a1       	ldd	r19, Y+38	; 0x26
    8298:	e2 1a       	sub	r14, r18
    829a:	f3 0a       	sbc	r15, r19
    829c:	04 c0       	rjmp	.+8      	; 0x82a6 <ProcessMixer+0x3ee>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    829e:	4d a1       	ldd	r20, Y+37	; 0x25
    82a0:	5e a1       	ldd	r21, Y+38	; 0x26
    82a2:	e4 0e       	add	r14, r20
    82a4:	f5 1e       	adc	r15, r21
    82a6:	f3 01       	movw	r30, r6
    82a8:	e2 55       	subi	r30, 0x52	; 82
    82aa:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    82ac:	80 81       	ld	r24, Z
    82ae:	81 30       	cpi	r24, 0x01	; 1
    82b0:	89 f0       	breq	.+34     	; 0x82d4 <ProcessMixer+0x41c>
    82b2:	82 30       	cpi	r24, 0x02	; 2
    82b4:	f1 f4       	brne	.+60     	; 0x82f2 <ProcessMixer+0x43a>
    82b6:	f3 01       	movw	r30, r6
    82b8:	e5 56       	subi	r30, 0x65	; 101
    82ba:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    82bc:	60 81       	ld	r22, Z
    82be:	55 e0       	ldi	r21, 0x05	; 5
    82c0:	65 02       	muls	r22, r21
    82c2:	b0 01       	movw	r22, r0
    82c4:	11 24       	eor	r1, r1
    82c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    82c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    82ca:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    82ce:	e8 1a       	sub	r14, r24
    82d0:	f9 0a       	sbc	r15, r25
					break;
    82d2:	0f c0       	rjmp	.+30     	; 0x82f2 <ProcessMixer+0x43a>
    82d4:	f3 01       	movw	r30, r6
    82d6:	e5 56       	subi	r30, 0x65	; 101
    82d8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    82da:	80 81       	ld	r24, Z
    82dc:	87 ff       	sbrs	r24, 7
    82de:	05 c0       	rjmp	.+10     	; 0x82ea <ProcessMixer+0x432>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    82e0:	2b a5       	ldd	r18, Y+43	; 0x2b
    82e2:	3c a5       	ldd	r19, Y+44	; 0x2c
    82e4:	e2 0e       	add	r14, r18
    82e6:	f3 1e       	adc	r15, r19
    82e8:	04 c0       	rjmp	.+8      	; 0x82f2 <ProcessMixer+0x43a>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    82ea:	4b a5       	ldd	r20, Y+43	; 0x2b
    82ec:	5c a5       	ldd	r21, Y+44	; 0x2c
    82ee:	e4 1a       	sub	r14, r20
    82f0:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (transition > 0)
    82f2:	1a 14       	cp	r1, r10
    82f4:	1b 04       	cpc	r1, r11
    82f6:	0c f0       	brlt	.+2      	; 0x82fa <ProcessMixer+0x442>
    82f8:	71 c0       	rjmp	.+226    	; 0x83dc <ProcessMixer+0x524>
    82fa:	c6 01       	movw	r24, r12
    82fc:	89 52       	subi	r24, 0x29	; 41
    82fe:	9a 4f       	sbci	r25, 0xFA	; 250
    8300:	3c 01       	movw	r6, r24
    8302:	fc 01       	movw	r30, r24
    8304:	e5 55       	subi	r30, 0x55	; 85
    8306:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    8308:	80 81       	ld	r24, Z
    830a:	81 30       	cpi	r24, 0x01	; 1
    830c:	81 f0       	breq	.+32     	; 0x832e <ProcessMixer+0x476>
    830e:	82 30       	cpi	r24, 0x02	; 2
    8310:	c9 f4       	brne	.+50     	; 0x8344 <ProcessMixer+0x48c>
    8312:	f3 01       	movw	r30, r6
    8314:	e1 56       	subi	r30, 0x61	; 97
    8316:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    8318:	60 81       	ld	r22, Z
    831a:	95 e0       	ldi	r25, 0x05	; 5
    831c:	69 02       	muls	r22, r25
    831e:	b0 01       	movw	r22, r0
    8320:	11 24       	eor	r1, r1
    8322:	c2 01       	movw	r24, r4
    8324:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    8328:	08 1b       	sub	r16, r24
    832a:	19 0b       	sbc	r17, r25
					break;
    832c:	0b c0       	rjmp	.+22     	; 0x8344 <ProcessMixer+0x48c>
    832e:	f3 01       	movw	r30, r6
    8330:	e1 56       	subi	r30, 0x61	; 97
    8332:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    8334:	80 81       	ld	r24, Z
    8336:	87 ff       	sbrs	r24, 7
    8338:	03 c0       	rjmp	.+6      	; 0x8340 <ProcessMixer+0x488>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    833a:	04 0d       	add	r16, r4
    833c:	15 1d       	adc	r17, r5
    833e:	02 c0       	rjmp	.+4      	; 0x8344 <ProcessMixer+0x48c>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    8340:	04 19       	sub	r16, r4
    8342:	15 09       	sbc	r17, r5
    8344:	f3 01       	movw	r30, r6
    8346:	e3 55       	subi	r30, 0x53	; 83
    8348:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    834a:	80 81       	ld	r24, Z
    834c:	81 30       	cpi	r24, 0x01	; 1
    834e:	81 f0       	breq	.+32     	; 0x8370 <ProcessMixer+0x4b8>
    8350:	82 30       	cpi	r24, 0x02	; 2
    8352:	c9 f4       	brne	.+50     	; 0x8386 <ProcessMixer+0x4ce>
    8354:	f3 01       	movw	r30, r6
    8356:	ef 55       	subi	r30, 0x5F	; 95
    8358:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    835a:	60 81       	ld	r22, Z
    835c:	a5 e0       	ldi	r26, 0x05	; 5
    835e:	6a 02       	muls	r22, r26
    8360:	b0 01       	movw	r22, r0
    8362:	11 24       	eor	r1, r1
    8364:	c4 01       	movw	r24, r8
    8366:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    836a:	08 0f       	add	r16, r24
    836c:	19 1f       	adc	r17, r25
					break;
    836e:	0b c0       	rjmp	.+22     	; 0x8386 <ProcessMixer+0x4ce>
    8370:	f3 01       	movw	r30, r6
    8372:	ef 55       	subi	r30, 0x5F	; 95
    8374:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    8376:	80 81       	ld	r24, Z
    8378:	87 ff       	sbrs	r24, 7
    837a:	03 c0       	rjmp	.+6      	; 0x8382 <ProcessMixer+0x4ca>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    837c:	08 19       	sub	r16, r8
    837e:	19 09       	sbc	r17, r9
    8380:	02 c0       	rjmp	.+4      	; 0x8386 <ProcessMixer+0x4ce>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    8382:	08 0d       	add	r16, r8
    8384:	19 1d       	adc	r17, r9
    8386:	f3 01       	movw	r30, r6
    8388:	e1 55       	subi	r30, 0x51	; 81
    838a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    838c:	80 81       	ld	r24, Z
    838e:	81 30       	cpi	r24, 0x01	; 1
    8390:	89 f0       	breq	.+34     	; 0x83b4 <ProcessMixer+0x4fc>
    8392:	82 30       	cpi	r24, 0x02	; 2
    8394:	f1 f4       	brne	.+60     	; 0x83d2 <ProcessMixer+0x51a>
    8396:	f3 01       	movw	r30, r6
    8398:	e4 56       	subi	r30, 0x64	; 100
    839a:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    839c:	60 81       	ld	r22, Z
    839e:	55 e0       	ldi	r21, 0x05	; 5
    83a0:	65 02       	muls	r22, r21
    83a2:	b0 01       	movw	r22, r0
    83a4:	11 24       	eor	r1, r1
    83a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    83a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    83aa:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    83ae:	08 1b       	sub	r16, r24
    83b0:	19 0b       	sbc	r17, r25
					break;
    83b2:	0f c0       	rjmp	.+30     	; 0x83d2 <ProcessMixer+0x51a>
    83b4:	f3 01       	movw	r30, r6
    83b6:	e4 56       	subi	r30, 0x64	; 100
    83b8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    83ba:	80 81       	ld	r24, Z
    83bc:	87 ff       	sbrs	r24, 7
    83be:	05 c0       	rjmp	.+10     	; 0x83ca <ProcessMixer+0x512>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    83c0:	2d a5       	ldd	r18, Y+45	; 0x2d
    83c2:	3e a5       	ldd	r19, Y+46	; 0x2e
    83c4:	02 0f       	add	r16, r18
    83c6:	13 1f       	adc	r17, r19
    83c8:	04 c0       	rjmp	.+8      	; 0x83d2 <ProcessMixer+0x51a>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    83ca:	4d a5       	ldd	r20, Y+45	; 0x2d
    83cc:	5e a5       	ldd	r21, Y+46	; 0x2e
    83ce:	04 1b       	sub	r16, r20
    83d0:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (transition < 100)
    83d2:	84 e6       	ldi	r24, 0x64	; 100
    83d4:	a8 16       	cp	r10, r24
    83d6:	b1 04       	cpc	r11, r1
    83d8:	0c f0       	brlt	.+2      	; 0x83dc <ProcessMixer+0x524>
    83da:	8d c0       	rjmp	.+282    	; 0x84f6 <ProcessMixer+0x63e>
    83dc:	d6 01       	movw	r26, r12
    83de:	a9 52       	subi	r26, 0x29	; 41
    83e0:	ba 4f       	sbci	r27, 0xFA	; 250
    83e2:	3d 01       	movw	r6, r26
    83e4:	fd 01       	movw	r30, r26
    83e6:	e2 56       	subi	r30, 0x62	; 98
    83e8:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume != 0) 					// Mix in dedicated aileron
    83ea:	60 81       	ld	r22, Z
    83ec:	66 23       	and	r22, r22
    83ee:	59 f0       	breq	.+22     	; 0x8406 <ProcessMixer+0x54e>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    83f0:	80 91 86 08 	lds	r24, 0x0886
    83f4:	90 91 87 08 	lds	r25, 0x0887
    83f8:	77 27       	eor	r23, r23
    83fa:	67 fd       	sbrc	r22, 7
    83fc:	70 95       	com	r23
    83fe:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
				P1_solution = P1_solution + temp2;
    8402:	e8 0e       	add	r14, r24
    8404:	f9 1e       	adc	r15, r25
    8406:	f3 01       	movw	r30, r6
    8408:	e0 56       	subi	r30, 0x60	; 96
    840a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume != 0) 					// Mix in dedicated elevator
    840c:	60 81       	ld	r22, Z
    840e:	66 23       	and	r22, r22
    8410:	59 f0       	breq	.+22     	; 0x8428 <ProcessMixer+0x570>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    8412:	80 91 88 08 	lds	r24, 0x0888
    8416:	90 91 89 08 	lds	r25, 0x0889
    841a:	77 27       	eor	r23, r23
    841c:	67 fd       	sbrc	r22, 7
    841e:	70 95       	com	r23
    8420:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
				P1_solution = P1_solution + temp2;
    8424:	e8 0e       	add	r14, r24
    8426:	f9 1e       	adc	r15, r25
    8428:	f3 01       	movw	r30, r6
    842a:	ee 55       	subi	r30, 0x5E	; 94
    842c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume != 0) 					// Mix in dedicated rudder
    842e:	60 81       	ld	r22, Z
    8430:	66 23       	and	r22, r22
    8432:	59 f0       	breq	.+22     	; 0x844a <ProcessMixer+0x592>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    8434:	80 91 8a 08 	lds	r24, 0x088A
    8438:	90 91 8b 08 	lds	r25, 0x088B
    843c:	77 27       	eor	r23, r23
    843e:	67 fd       	sbrc	r22, 7
    8440:	70 95       	com	r23
    8442:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
				P1_solution = P1_solution + temp2;
    8446:	e8 0e       	add	r14, r24
    8448:	f9 1e       	adc	r15, r25
    844a:	f3 01       	movw	r30, r6
    844c:	ef 54       	subi	r30, 0x4F	; 79
    844e:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume != 0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    8450:	60 81       	ld	r22, Z
    8452:	66 23       	and	r22, r22
    8454:	19 f1       	breq	.+70     	; 0x849c <ProcessMixer+0x5e4>
    8456:	31 97       	sbiw	r30, 0x01	; 1
    8458:	80 81       	ld	r24, Z
    845a:	8f 30       	cpi	r24, 0x0F	; 15
    845c:	f9 f0       	breq	.+62     	; 0x849c <ProcessMixer+0x5e4>
    845e:	e8 2f       	mov	r30, r24
    8460:	ff 27       	eor	r31, r31
    8462:	e7 fd       	sbrc	r30, 7
    8464:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    8466:	88 30       	cpi	r24, 0x08	; 8
    8468:	64 f0       	brlt	.+24     	; 0x8482 <ProcessMixer+0x5ca>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    846a:	38 97       	sbiw	r30, 0x08	; 8
    846c:	ee 0f       	add	r30, r30
    846e:	ff 1f       	adc	r31, r31
    8470:	21 e0       	ldi	r18, 0x01	; 1
    8472:	30 e0       	ldi	r19, 0x00	; 0
    8474:	2c 0f       	add	r18, r28
    8476:	3d 1f       	adc	r19, r29
    8478:	e2 0f       	add	r30, r18
    847a:	f3 1f       	adc	r31, r19
    847c:	86 85       	ldd	r24, Z+14	; 0x0e
    847e:	97 85       	ldd	r25, Z+15	; 0x0f
    8480:	06 c0       	rjmp	.+12     	; 0x848e <ProcessMixer+0x5d6>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    8482:	ee 0f       	add	r30, r30
    8484:	ff 1f       	adc	r31, r31
    8486:	ec 57       	subi	r30, 0x7C	; 124
    8488:	f7 4f       	sbci	r31, 0xF7	; 247
    848a:	80 81       	ld	r24, Z
    848c:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    848e:	77 27       	eor	r23, r23
    8490:	67 fd       	sbrc	r22, 7
    8492:	70 95       	com	r23
    8494:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
				P1_solution = P1_solution + temp2;
    8498:	e8 0e       	add	r14, r24
    849a:	f9 1e       	adc	r15, r25
    849c:	f3 01       	movw	r30, r6
    849e:	eb 54       	subi	r30, 0x4B	; 75
    84a0:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume != 0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    84a2:	60 81       	ld	r22, Z
    84a4:	66 23       	and	r22, r22
    84a6:	19 f1       	breq	.+70     	; 0x84ee <ProcessMixer+0x636>
    84a8:	31 97       	sbiw	r30, 0x01	; 1
    84aa:	80 81       	ld	r24, Z
    84ac:	8f 30       	cpi	r24, 0x0F	; 15
    84ae:	f9 f0       	breq	.+62     	; 0x84ee <ProcessMixer+0x636>
    84b0:	e8 2f       	mov	r30, r24
    84b2:	ff 27       	eor	r31, r31
    84b4:	e7 fd       	sbrc	r30, 7
    84b6:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    84b8:	88 30       	cpi	r24, 0x08	; 8
    84ba:	64 f0       	brlt	.+24     	; 0x84d4 <ProcessMixer+0x61c>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    84bc:	38 97       	sbiw	r30, 0x08	; 8
    84be:	ee 0f       	add	r30, r30
    84c0:	ff 1f       	adc	r31, r31
    84c2:	41 e0       	ldi	r20, 0x01	; 1
    84c4:	50 e0       	ldi	r21, 0x00	; 0
    84c6:	4c 0f       	add	r20, r28
    84c8:	5d 1f       	adc	r21, r29
    84ca:	e4 0f       	add	r30, r20
    84cc:	f5 1f       	adc	r31, r21
    84ce:	86 85       	ldd	r24, Z+14	; 0x0e
    84d0:	97 85       	ldd	r25, Z+15	; 0x0f
    84d2:	06 c0       	rjmp	.+12     	; 0x84e0 <ProcessMixer+0x628>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    84d4:	ee 0f       	add	r30, r30
    84d6:	ff 1f       	adc	r31, r31
    84d8:	ec 57       	subi	r30, 0x7C	; 124
    84da:	f7 4f       	sbci	r31, 0xF7	; 247
    84dc:	80 81       	ld	r24, Z
    84de:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    84e0:	77 27       	eor	r23, r23
    84e2:	67 fd       	sbrc	r22, 7
    84e4:	70 95       	com	r23
    84e6:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
				P1_solution = P1_solution + temp2;
    84ea:	e8 0e       	add	r14, r24
    84ec:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (transition > 0)	
    84ee:	1a 14       	cp	r1, r10
    84f0:	1b 04       	cpc	r1, r11
    84f2:	0c f0       	brlt	.+2      	; 0x84f6 <ProcessMixer+0x63e>
    84f4:	85 c0       	rjmp	.+266    	; 0x8600 <ProcessMixer+0x748>
    84f6:	c6 01       	movw	r24, r12
    84f8:	89 52       	subi	r24, 0x29	; 41
    84fa:	9a 4f       	sbci	r25, 0xFA	; 250
    84fc:	3c 01       	movw	r6, r24
    84fe:	fc 01       	movw	r30, r24
    8500:	e1 56       	subi	r30, 0x61	; 97
    8502:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume != 0) 					// Mix in dedicated aileron
    8504:	60 81       	ld	r22, Z
    8506:	66 23       	and	r22, r22
    8508:	59 f0       	breq	.+22     	; 0x8520 <ProcessMixer+0x668>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    850a:	80 91 86 08 	lds	r24, 0x0886
    850e:	90 91 87 08 	lds	r25, 0x0887
    8512:	77 27       	eor	r23, r23
    8514:	67 fd       	sbrc	r22, 7
    8516:	70 95       	com	r23
    8518:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
				P2_solution = P2_solution + temp2;
    851c:	08 0f       	add	r16, r24
    851e:	19 1f       	adc	r17, r25
    8520:	f3 01       	movw	r30, r6
    8522:	ef 55       	subi	r30, 0x5F	; 95
    8524:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume != 0) 					// Mix in dedicated elevator
    8526:	60 81       	ld	r22, Z
    8528:	66 23       	and	r22, r22
    852a:	59 f0       	breq	.+22     	; 0x8542 <ProcessMixer+0x68a>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    852c:	80 91 88 08 	lds	r24, 0x0888
    8530:	90 91 89 08 	lds	r25, 0x0889
    8534:	77 27       	eor	r23, r23
    8536:	67 fd       	sbrc	r22, 7
    8538:	70 95       	com	r23
    853a:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
				P2_solution = P2_solution + temp2;
    853e:	08 0f       	add	r16, r24
    8540:	19 1f       	adc	r17, r25
    8542:	f3 01       	movw	r30, r6
    8544:	ed 55       	subi	r30, 0x5D	; 93
    8546:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume != 0) 					// Mix in dedicated rudder
    8548:	60 81       	ld	r22, Z
    854a:	66 23       	and	r22, r22
    854c:	59 f0       	breq	.+22     	; 0x8564 <ProcessMixer+0x6ac>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    854e:	80 91 8a 08 	lds	r24, 0x088A
    8552:	90 91 8b 08 	lds	r25, 0x088B
    8556:	77 27       	eor	r23, r23
    8558:	67 fd       	sbrc	r22, 7
    855a:	70 95       	com	r23
    855c:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
				P2_solution = P2_solution + temp2;
    8560:	08 0f       	add	r16, r24
    8562:	19 1f       	adc	r17, r25
    8564:	f3 01       	movw	r30, r6
    8566:	ed 54       	subi	r30, 0x4D	; 77
    8568:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume != 0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    856a:	60 81       	ld	r22, Z
    856c:	66 23       	and	r22, r22
    856e:	09 f1       	breq	.+66     	; 0x85b2 <ProcessMixer+0x6fa>
    8570:	31 97       	sbiw	r30, 0x01	; 1
    8572:	80 81       	ld	r24, Z
    8574:	8f 30       	cpi	r24, 0x0F	; 15
    8576:	e9 f0       	breq	.+58     	; 0x85b2 <ProcessMixer+0x6fa>
    8578:	e8 2f       	mov	r30, r24
    857a:	ff 27       	eor	r31, r31
    857c:	e7 fd       	sbrc	r30, 7
    857e:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    8580:	88 30       	cpi	r24, 0x08	; 8
    8582:	54 f0       	brlt	.+20     	; 0x8598 <ProcessMixer+0x6e0>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    8584:	38 97       	sbiw	r30, 0x08	; 8
    8586:	ee 0f       	add	r30, r30
    8588:	ff 1f       	adc	r31, r31
    858a:	a1 e0       	ldi	r26, 0x01	; 1
    858c:	b0 e0       	ldi	r27, 0x00	; 0
    858e:	ac 0f       	add	r26, r28
    8590:	bd 1f       	adc	r27, r29
    8592:	ea 0f       	add	r30, r26
    8594:	fb 1f       	adc	r31, r27
    8596:	04 c0       	rjmp	.+8      	; 0x85a0 <ProcessMixer+0x6e8>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    8598:	ee 0f       	add	r30, r30
    859a:	ff 1f       	adc	r31, r31
    859c:	ec 57       	subi	r30, 0x7C	; 124
    859e:	f7 4f       	sbci	r31, 0xF7	; 247
    85a0:	80 81       	ld	r24, Z
    85a2:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    85a4:	77 27       	eor	r23, r23
    85a6:	67 fd       	sbrc	r22, 7
    85a8:	70 95       	com	r23
    85aa:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
				P2_solution = P2_solution + temp2;
    85ae:	08 0f       	add	r16, r24
    85b0:	19 1f       	adc	r17, r25
    85b2:	f3 01       	movw	r30, r6
    85b4:	e9 54       	subi	r30, 0x49	; 73
    85b6:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume != 0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    85b8:	60 81       	ld	r22, Z
    85ba:	66 23       	and	r22, r22
    85bc:	09 f1       	breq	.+66     	; 0x8600 <ProcessMixer+0x748>
    85be:	31 97       	sbiw	r30, 0x01	; 1
    85c0:	80 81       	ld	r24, Z
    85c2:	8f 30       	cpi	r24, 0x0F	; 15
    85c4:	e9 f0       	breq	.+58     	; 0x8600 <ProcessMixer+0x748>
    85c6:	e8 2f       	mov	r30, r24
    85c8:	ff 27       	eor	r31, r31
    85ca:	e7 fd       	sbrc	r30, 7
    85cc:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    85ce:	88 30       	cpi	r24, 0x08	; 8
    85d0:	54 f0       	brlt	.+20     	; 0x85e6 <ProcessMixer+0x72e>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    85d2:	38 97       	sbiw	r30, 0x08	; 8
    85d4:	ee 0f       	add	r30, r30
    85d6:	ff 1f       	adc	r31, r31
    85d8:	21 e0       	ldi	r18, 0x01	; 1
    85da:	30 e0       	ldi	r19, 0x00	; 0
    85dc:	2c 0f       	add	r18, r28
    85de:	3d 1f       	adc	r19, r29
    85e0:	e2 0f       	add	r30, r18
    85e2:	f3 1f       	adc	r31, r19
    85e4:	04 c0       	rjmp	.+8      	; 0x85ee <ProcessMixer+0x736>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    85e6:	ee 0f       	add	r30, r30
    85e8:	ff 1f       	adc	r31, r31
    85ea:	ec 57       	subi	r30, 0x7C	; 124
    85ec:	f7 4f       	sbci	r31, 0xF7	; 247
    85ee:	80 81       	ld	r24, Z
    85f0:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    85f2:	77 27       	eor	r23, r23
    85f4:	67 fd       	sbrc	r22, 7
    85f6:	70 95       	com	r23
    85f8:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
				P2_solution = P2_solution + temp2;
    85fc:	08 0f       	add	r16, r24
    85fe:	19 1f       	adc	r17, r25
    8600:	c6 01       	movw	r24, r12
    8602:	89 52       	subi	r24, 0x29	; 41
    8604:	9a 4f       	sbci	r25, 0xFA	; 250
    8606:	fc 01       	movw	r30, r24
    8608:	ee 56       	subi	r30, 0x6E	; 110
    860a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    860c:	f1 82       	std	Z+1, r15	; 0x01
    860e:	e0 82       	st	Z, r14
    8610:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    8612:	11 83       	std	Z+1, r17	; 0x01
    8614:	00 83       	st	Z, r16
    8616:	36 e2       	ldi	r19, 0x26	; 38
    8618:	c3 0e       	add	r12, r19
    861a:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    861c:	40 e3       	ldi	r20, 0x30	; 48
    861e:	c4 16       	cp	r12, r20
    8620:	41 e0       	ldi	r20, 0x01	; 1
    8622:	d4 06       	cpc	r13, r20
    8624:	09 f0       	breq	.+2      	; 0x8628 <ProcessMixer+0x770>
    8626:	f3 cc       	rjmp	.-1562   	; 0x800e <ProcessMixer+0x156>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    8628:	80 91 05 06 	lds	r24, 0x0605
    862c:	88 23       	and	r24, r24
    862e:	41 f0       	breq	.+16     	; 0x8640 <ProcessMixer+0x788>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    8630:	80 91 24 05 	lds	r24, 0x0524
    8634:	90 91 25 05 	lds	r25, 0x0525
    8638:	90 93 22 05 	sts	0x0522, r25
    863c:	80 93 21 05 	sts	0x0521, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    8640:	00 91 21 05 	lds	r16, 0x0521
    8644:	10 91 22 05 	lds	r17, 0x0522
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    8648:	b4 e6       	ldi	r27, 0x64	; 100
    864a:	cb 2e       	mov	r12, r27
    864c:	d1 2c       	mov	r13, r1
    864e:	c0 1a       	sub	r12, r16
    8650:	d1 0a       	sbc	r13, r17
    8652:	89 e6       	ldi	r24, 0x69	; 105
    8654:	e8 2e       	mov	r14, r24
    8656:	86 e0       	ldi	r24, 0x06	; 6
    8658:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    865a:	01 15       	cp	r16, r1
    865c:	11 05       	cpc	r17, r1
    865e:	21 f4       	brne	.+8      	; 0x8668 <ProcessMixer+0x7b0>
		{
			temp1 = Config.Channel[i].P1_value;
    8660:	d7 01       	movw	r26, r14
    8662:	8d 91       	ld	r24, X+
    8664:	9c 91       	ld	r25, X
    8666:	16 c0       	rjmp	.+44     	; 0x8694 <ProcessMixer+0x7dc>
		}
		else if (transition >= 100)
    8668:	04 36       	cpi	r16, 0x64	; 100
    866a:	11 05       	cpc	r17, r1
    866c:	24 f0       	brlt	.+8      	; 0x8676 <ProcessMixer+0x7be>
		{
			temp1 = Config.Channel[i].P2_value;
    866e:	f7 01       	movw	r30, r14
    8670:	82 81       	ldd	r24, Z+2	; 0x02
    8672:	93 81       	ldd	r25, Z+3	; 0x03
    8674:	0f c0       	rjmp	.+30     	; 0x8694 <ProcessMixer+0x7dc>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    8676:	b6 01       	movw	r22, r12
    8678:	d7 01       	movw	r26, r14
    867a:	8d 91       	ld	r24, X+
    867c:	9c 91       	ld	r25, X
    867e:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>
    8682:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    8684:	b8 01       	movw	r22, r16
    8686:	f7 01       	movw	r30, r14
    8688:	82 81       	ldd	r24, Z+2	; 0x02
    868a:	93 81       	ldd	r25, Z+3	; 0x03
    868c:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    8690:	8a 0d       	add	r24, r10
    8692:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    8694:	d7 01       	movw	r26, r14
    8696:	8d 93       	st	X+, r24
    8698:	9c 93       	st	X, r25
    869a:	b6 e2       	ldi	r27, 0x26	; 38
    869c:	eb 0e       	add	r14, r27
    869e:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    86a0:	e9 e9       	ldi	r30, 0x99	; 153
    86a2:	ee 16       	cp	r14, r30
    86a4:	e7 e0       	ldi	r30, 0x07	; 7
    86a6:	fe 06       	cpc	r15, r30
    86a8:	c1 f6       	brne	.-80     	; 0x865a <ProcessMixer+0x7a2>
    86aa:	63 e7       	ldi	r22, 0x73	; 115
    86ac:	c6 2e       	mov	r12, r22
    86ae:	66 e0       	ldi	r22, 0x06	; 6
    86b0:	d6 2e       	mov	r13, r22
    86b2:	74 e7       	ldi	r23, 0x74	; 116
    86b4:	87 2e       	mov	r8, r23
    86b6:	76 e0       	ldi	r23, 0x06	; 6
    86b8:	97 2e       	mov	r9, r23
    86ba:	e9 e6       	ldi	r30, 0x69	; 105
    86bc:	ee 2e       	mov	r14, r30
    86be:	e6 e0       	ldi	r30, 0x06	; 6
    86c0:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    86c2:	f4 e6       	ldi	r31, 0x64	; 100
    86c4:	af 2e       	mov	r10, r31
    86c6:	b1 2c       	mov	r11, r1
    86c8:	80 2f       	mov	r24, r16
    86ca:	99 27       	eor	r25, r25
    86cc:	87 fd       	sbrc	r24, 7
    86ce:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    86d0:	9c 01       	movw	r18, r24
    86d2:	22 53       	subi	r18, 0x32	; 50
    86d4:	32 4e       	sbci	r19, 0xE2	; 226
    86d6:	3e 8f       	std	Y+30, r19	; 0x1e
    86d8:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    86da:	95 01       	movw	r18, r10
    86dc:	28 1b       	sub	r18, r24
    86de:	39 0b       	sbc	r19, r25
    86e0:	a9 01       	movw	r20, r18
    86e2:	42 53       	subi	r20, 0x32	; 50
    86e4:	52 4e       	sbci	r21, 0xE2	; 226
    86e6:	58 a3       	std	Y+32, r21	; 0x20
    86e8:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    86ea:	dc 01       	movw	r26, r24
    86ec:	ad 5c       	subi	r26, 0xCD	; 205
    86ee:	b1 4e       	sbci	r27, 0xE1	; 225
    86f0:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    86f2:	f9 01       	movw	r30, r18
    86f4:	ed 5c       	subi	r30, 0xCD	; 205
    86f6:	f1 4e       	sbci	r31, 0xE1	; 225
    86f8:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    86fa:	ae e1       	ldi	r26, 0x1E	; 30
    86fc:	6a 2e       	mov	r6, r26
    86fe:	ab ef       	ldi	r26, 0xFB	; 251
    8700:	7a 2e       	mov	r7, r26
    8702:	f6 01       	movw	r30, r12
    8704:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    8706:	90 81       	ld	r25, Z
    8708:	d6 01       	movw	r26, r12
    870a:	8c 91       	ld	r24, X
    870c:	91 11       	cpse	r25, r1
    870e:	03 c0       	rjmp	.+6      	; 0x8716 <ProcessMixer+0x85e>
    8710:	88 23       	and	r24, r24
    8712:	09 f4       	brne	.+2      	; 0x8716 <ProcessMixer+0x85e>
    8714:	61 c0       	rjmp	.+194    	; 0x87d8 <ProcessMixer+0x920>
    8716:	29 2f       	mov	r18, r25
    8718:	33 27       	eor	r19, r19
    871a:	27 fd       	sbrc	r18, 7
    871c:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    871e:	98 17       	cp	r25, r24
    8720:	09 f4       	brne	.+2      	; 0x8724 <ProcessMixer+0x86c>
    8722:	48 c0       	rjmp	.+144    	; 0x87b4 <ProcessMixer+0x8fc>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    8724:	99 27       	eor	r25, r25
    8726:	87 fd       	sbrc	r24, 7
    8728:	90 95       	com	r25
    872a:	82 1b       	sub	r24, r18
    872c:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    872e:	96 95       	lsr	r25
    8730:	98 2f       	mov	r25, r24
    8732:	88 27       	eor	r24, r24
    8734:	97 95       	ror	r25
    8736:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    8738:	b5 01       	movw	r22, r10
    873a:	0e 94 f8 50 	call	0xa1f0	; 0xa1f0 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    873e:	36 95       	lsr	r19
    8740:	32 2f       	mov	r19, r18
    8742:	22 27       	eor	r18, r18
    8744:	37 95       	ror	r19
    8746:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    8748:	f4 01       	movw	r30, r8
    874a:	80 81       	ld	r24, Z
    874c:	81 11       	cpse	r24, r1
    874e:	08 c0       	rjmp	.+16     	; 0x8760 <ProcessMixer+0x8a8>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    8750:	60 9f       	mul	r22, r16
    8752:	c0 01       	movw	r24, r0
    8754:	61 9f       	mul	r22, r17
    8756:	90 0d       	add	r25, r0
    8758:	70 9f       	mul	r23, r16
    875a:	90 0d       	add	r25, r0
    875c:	11 24       	eor	r1, r1
    875e:	20 c0       	rjmp	.+64     	; 0x87a0 <ProcessMixer+0x8e8>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    8760:	81 30       	cpi	r24, 0x01	; 1
    8762:	31 f4       	brne	.+12     	; 0x8770 <ProcessMixer+0x8b8>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    8764:	77 ff       	sbrs	r23, 7
    8766:	02 c0       	rjmp	.+4      	; 0x876c <ProcessMixer+0x8b4>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    8768:	f2 01       	movw	r30, r4
    876a:	06 c0       	rjmp	.+12     	; 0x8778 <ProcessMixer+0x8c0>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    876c:	f1 01       	movw	r30, r2
    876e:	0d c0       	rjmp	.+26     	; 0x878a <ProcessMixer+0x8d2>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    8770:	77 ff       	sbrs	r23, 7
    8772:	09 c0       	rjmp	.+18     	; 0x8786 <ProcessMixer+0x8ce>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    8774:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8776:	f8 a1       	ldd	r31, Y+32	; 0x20
    8778:	84 91       	lpm	r24, Z
    877a:	a5 01       	movw	r20, r10
    877c:	48 1b       	sub	r20, r24
    877e:	51 09       	sbc	r21, r1
    8780:	87 fd       	sbrc	r24, 7
    8782:	53 95       	inc	r21
    8784:	06 c0       	rjmp	.+12     	; 0x8792 <ProcessMixer+0x8da>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    8786:	ed 8d       	ldd	r30, Y+29	; 0x1d
    8788:	fe 8d       	ldd	r31, Y+30	; 0x1e
    878a:	44 91       	lpm	r20, Z
    878c:	55 27       	eor	r21, r21
    878e:	47 fd       	sbrc	r20, 7
    8790:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    8792:	64 9f       	mul	r22, r20
    8794:	c0 01       	movw	r24, r0
    8796:	65 9f       	mul	r22, r21
    8798:	90 0d       	add	r25, r0
    879a:	74 9f       	mul	r23, r20
    879c:	90 0d       	add	r25, r0
    879e:	11 24       	eor	r1, r1
    87a0:	82 0f       	add	r24, r18
    87a2:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    87a4:	bc 01       	movw	r22, r24
    87a6:	60 5c       	subi	r22, 0xC0	; 192
    87a8:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    87aa:	66 0f       	add	r22, r22
    87ac:	67 2f       	mov	r22, r23
    87ae:	66 1f       	adc	r22, r22
    87b0:	77 0b       	sbc	r23, r23
    87b2:	01 c0       	rjmp	.+2      	; 0x87b6 <ProcessMixer+0x8fe>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    87b4:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    87b6:	80 91 82 08 	lds	r24, 0x0882
    87ba:	90 91 83 08 	lds	r25, 0x0883
    87be:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    87c2:	88 5e       	subi	r24, 0xE8	; 232
    87c4:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    87c6:	d7 01       	movw	r26, r14
    87c8:	2d 91       	ld	r18, X+
    87ca:	3c 91       	ld	r19, X
    87cc:	11 97       	sbiw	r26, 0x01	; 1
    87ce:	28 0f       	add	r18, r24
    87d0:	39 1f       	adc	r19, r25
    87d2:	2d 93       	st	X+, r18
    87d4:	3c 93       	st	X, r19
    87d6:	08 c0       	rjmp	.+16     	; 0x87e8 <ProcessMixer+0x930>
    87d8:	f6 01       	movw	r30, r12
    87da:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    87dc:	80 81       	ld	r24, Z
    87de:	82 30       	cpi	r24, 0x02	; 2
    87e0:	19 f4       	brne	.+6      	; 0x87e8 <ProcessMixer+0x930>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    87e2:	f7 01       	movw	r30, r14
    87e4:	71 82       	std	Z+1, r7	; 0x01
    87e6:	60 82       	st	Z, r6
    87e8:	f6 e2       	ldi	r31, 0x26	; 38
    87ea:	ef 0e       	add	r14, r31
    87ec:	f1 1c       	adc	r15, r1
    87ee:	26 e2       	ldi	r18, 0x26	; 38
    87f0:	c2 0e       	add	r12, r18
    87f2:	d1 1c       	adc	r13, r1
    87f4:	36 e2       	ldi	r19, 0x26	; 38
    87f6:	83 0e       	add	r8, r19
    87f8:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    87fa:	49 e9       	ldi	r20, 0x99	; 153
    87fc:	e4 16       	cp	r14, r20
    87fe:	47 e0       	ldi	r20, 0x07	; 7
    8800:	f4 06       	cpc	r15, r20
    8802:	09 f0       	breq	.+2      	; 0x8806 <ProcessMixer+0x94e>
    8804:	7e cf       	rjmp	.-260    	; 0x8702 <ProcessMixer+0x84a>
    8806:	e1 e7       	ldi	r30, 0x71	; 113
    8808:	f6 e0       	ldi	r31, 0x06	; 6
    880a:	29 e6       	ldi	r18, 0x69	; 105
    880c:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    880e:	94 e6       	ldi	r25, 0x64	; 100
    8810:	69 2e       	mov	r6, r25
    8812:	71 2c       	mov	r7, r1
    8814:	df 01       	movw	r26, r30
    8816:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    8818:	cc 90       	ld	r12, X
    881a:	12 96       	adiw	r26, 0x02	; 2
    881c:	ac 90       	ld	r10, X
    881e:	50 80       	ld	r5, Z
    8820:	ca 10       	cpse	r12, r10
    8822:	03 c0       	rjmp	.+6      	; 0x882a <ProcessMixer+0x972>
    8824:	5c 14       	cp	r5, r12
    8826:	09 f4       	brne	.+2      	; 0x882a <ProcessMixer+0x972>
    8828:	53 c0       	rjmp	.+166    	; 0x88d0 <ProcessMixer+0xa18>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    882a:	bb 24       	eor	r11, r11
    882c:	a7 fc       	sbrc	r10, 7
    882e:	b0 94       	com	r11
    8830:	dd 24       	eor	r13, r13
    8832:	c7 fc       	sbrc	r12, 7
    8834:	d0 94       	com	r13
    8836:	c5 01       	movw	r24, r10
    8838:	8c 19       	sub	r24, r12
    883a:	9d 09       	sbc	r25, r13
    883c:	df 01       	movw	r26, r30
    883e:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    8840:	ec 90       	ld	r14, X
    8842:	ff 24       	eor	r15, r15
    8844:	e7 fc       	sbrc	r14, 7
    8846:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    8848:	96 95       	lsr	r25
    884a:	98 2f       	mov	r25, r24
    884c:	88 27       	eor	r24, r24
    884e:	97 95       	ror	r25
    8850:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    8852:	a7 01       	movw	r20, r14
    8854:	55 95       	asr	r21
    8856:	47 95       	ror	r20
    8858:	84 0f       	add	r24, r20
    885a:	95 1f       	adc	r25, r21
    885c:	b7 01       	movw	r22, r14
    885e:	0e 94 f8 50 	call	0xa1f0	; 0xa1f0 <__divmodhi4>
    8862:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    8864:	85 2d       	mov	r24, r5
    8866:	99 27       	eor	r25, r25
    8868:	87 fd       	sbrc	r24, 7
    886a:	90 95       	com	r25
    886c:	8a 19       	sub	r24, r10
    886e:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    8870:	b3 01       	movw	r22, r6
    8872:	6e 19       	sub	r22, r14
    8874:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    8876:	96 95       	lsr	r25
    8878:	98 2f       	mov	r25, r24
    887a:	88 27       	eor	r24, r24
    887c:	97 95       	ror	r25
    887e:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    8880:	ab 01       	movw	r20, r22
    8882:	55 95       	asr	r21
    8884:	47 95       	ror	r20
    8886:	84 0f       	add	r24, r20
    8888:	95 1f       	adc	r25, r21
    888a:	0e 94 f8 50 	call	0xa1f0	; 0xa1f0 <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    888e:	d6 94       	lsr	r13
    8890:	dc 2c       	mov	r13, r12
    8892:	cc 24       	eor	r12, r12
    8894:	d7 94       	ror	r13
    8896:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    8898:	40 e0       	ldi	r20, 0x00	; 0
    889a:	84 2f       	mov	r24, r20
    889c:	90 e0       	ldi	r25, 0x00	; 0
    889e:	80 17       	cp	r24, r16
    88a0:	91 07       	cpc	r25, r17
    88a2:	54 f4       	brge	.+20     	; 0x88b8 <ProcessMixer+0xa00>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    88a4:	8e 15       	cp	r24, r14
    88a6:	9f 05       	cpc	r25, r15
    88a8:	1c f4       	brge	.+6      	; 0x88b0 <ProcessMixer+0x9f8>
				{
					temp3 += Step1;
    88aa:	c8 0c       	add	r12, r8
    88ac:	d9 1c       	adc	r13, r9
    88ae:	02 c0       	rjmp	.+4      	; 0x88b4 <ProcessMixer+0x9fc>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    88b0:	c6 0e       	add	r12, r22
    88b2:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    88b4:	4f 5f       	subi	r20, 0xFF	; 255
    88b6:	f1 cf       	rjmp	.-30     	; 0x889a <ProcessMixer+0x9e2>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    88b8:	c6 01       	movw	r24, r12
    88ba:	80 5c       	subi	r24, 0xC0	; 192
    88bc:	9f 4f       	sbci	r25, 0xFF	; 255
    88be:	88 0f       	add	r24, r24
    88c0:	89 2f       	mov	r24, r25
    88c2:	88 1f       	adc	r24, r24
    88c4:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    88c6:	5a e0       	ldi	r21, 0x0A	; 10
    88c8:	85 02       	muls	r24, r21
    88ca:	60 01       	movw	r12, r0
    88cc:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    88ce:	05 c0       	rjmp	.+10     	; 0x88da <ProcessMixer+0xa22>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    88d0:	85 2d       	mov	r24, r5
    88d2:	9a e0       	ldi	r25, 0x0A	; 10
    88d4:	89 02       	muls	r24, r25
    88d6:	60 01       	movw	r12, r0
    88d8:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    88da:	d9 01       	movw	r26, r18
    88dc:	4d 91       	ld	r20, X+
    88de:	5c 91       	ld	r21, X
    88e0:	11 97       	sbiw	r26, 0x01	; 1
    88e2:	4c 0d       	add	r20, r12
    88e4:	5d 1d       	adc	r21, r13
    88e6:	4d 93       	st	X+, r20
    88e8:	5c 93       	st	X, r21
    88ea:	2a 5d       	subi	r18, 0xDA	; 218
    88ec:	3f 4f       	sbci	r19, 0xFF	; 255
    88ee:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    88f0:	b7 e0       	ldi	r27, 0x07	; 7
    88f2:	e1 3a       	cpi	r30, 0xA1	; 161
    88f4:	fb 07       	cpc	r31, r27
    88f6:	09 f0       	breq	.+2      	; 0x88fa <ProcessMixer+0xa42>
    88f8:	8d cf       	rjmp	.-230    	; 0x8814 <ProcessMixer+0x95c>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    88fa:	e2 96       	adiw	r28, 0x32	; 50
    88fc:	0f b6       	in	r0, 0x3f	; 63
    88fe:	f8 94       	cli
    8900:	de bf       	out	0x3e, r29	; 62
    8902:	0f be       	out	0x3f, r0	; 63
    8904:	cd bf       	out	0x3d, r28	; 61
    8906:	df 91       	pop	r29
    8908:	cf 91       	pop	r28
    890a:	1f 91       	pop	r17
    890c:	0f 91       	pop	r16
    890e:	ff 90       	pop	r15
    8910:	ef 90       	pop	r14
    8912:	df 90       	pop	r13
    8914:	cf 90       	pop	r12
    8916:	bf 90       	pop	r11
    8918:	af 90       	pop	r10
    891a:	9f 90       	pop	r9
    891c:	8f 90       	pop	r8
    891e:	7f 90       	pop	r7
    8920:	6f 90       	pop	r6
    8922:	5f 90       	pop	r5
    8924:	4f 90       	pop	r4
    8926:	3f 90       	pop	r3
    8928:	2f 90       	pop	r2
    892a:	08 95       	ret

0000892c <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    892c:	2a e0       	ldi	r18, 0x0A	; 10
    892e:	82 02       	muls	r24, r18
    8930:	c0 01       	movw	r24, r0
    8932:	11 24       	eor	r1, r1

	return temp16_2;
}
    8934:	8a 55       	subi	r24, 0x5A	; 90
    8936:	91 4f       	sbci	r25, 0xF1	; 241
    8938:	08 95       	ret

0000893a <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    893a:	df 92       	push	r13
    893c:	ef 92       	push	r14
    893e:	ff 92       	push	r15
    8940:	0f 93       	push	r16
    8942:	1f 93       	push	r17
    8944:	cf 93       	push	r28
    8946:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    8948:	dc 01       	movw	r26, r24
    894a:	0d 90       	ld	r0, X+
    894c:	00 20       	and	r0, r0
    894e:	e9 f7       	brne	.-6      	; 0x894a <mugui_text_sizestring+0x10>
    8950:	11 97       	sbiw	r26, 0x01	; 1
    8952:	a8 1b       	sub	r26, r24
    8954:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    8956:	fb 01       	movw	r30, r22
    8958:	34 96       	adiw	r30, 0x04	; 4
    895a:	e4 90       	lpm	r14, Z
    895c:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    895e:	32 97       	sbiw	r30, 0x02	; 2
    8960:	d4 90       	lpm	r13, Z
    8962:	ec 01       	movw	r28, r24
    8964:	a8 0f       	add	r26, r24
    8966:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    8968:	80 e0       	ldi	r24, 0x00	; 0
    896a:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    896c:	ca 17       	cp	r28, r26
    896e:	db 07       	cpc	r29, r27
    8970:	29 f1       	breq	.+74     	; 0x89bc <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    8972:	29 91       	ld	r18, Y+
    8974:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    8976:	30 e0       	ldi	r19, 0x00	; 0
    8978:	22 0f       	add	r18, r18
    897a:	33 1f       	adc	r19, r19
    897c:	f9 01       	movw	r30, r18
    897e:	35 96       	adiw	r30, 0x05	; 5
    8980:	e6 0f       	add	r30, r22
    8982:	f7 1f       	adc	r31, r23
    8984:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    8986:	f9 01       	movw	r30, r18
    8988:	36 96       	adiw	r30, 0x06	; 6
    898a:	e6 0f       	add	r30, r22
    898c:	f7 1f       	adc	r31, r23
    898e:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    8990:	10 e0       	ldi	r17, 0x00	; 0
    8992:	20 e0       	ldi	r18, 0x00	; 0
    8994:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    8996:	32 2f       	mov	r19, r18
    8998:	21 2f       	mov	r18, r17
    899a:	10 2f       	mov	r17, r16
    899c:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    899e:	0e 0f       	add	r16, r30
    89a0:	11 1d       	adc	r17, r1
    89a2:	21 1d       	adc	r18, r1
    89a4:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    89a6:	fb 01       	movw	r30, r22
    89a8:	e0 0f       	add	r30, r16
    89aa:	f1 1f       	adc	r31, r17
    89ac:	04 91       	lpm	r16, Z
    89ae:	20 2f       	mov	r18, r16
    89b0:	30 e0       	ldi	r19, 0x00	; 0
    89b2:	2f 5f       	subi	r18, 0xFF	; 255
    89b4:	3f 4f       	sbci	r19, 0xFF	; 255
    89b6:	82 0f       	add	r24, r18
    89b8:	93 1f       	adc	r25, r19
    89ba:	d8 cf       	rjmp	.-80     	; 0x896c <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    89bc:	fa 01       	movw	r30, r20
    89be:	91 83       	std	Z+1, r25	; 0x01
    89c0:	80 83       	st	Z, r24
	size->y = height;
    89c2:	f3 82       	std	Z+3, r15	; 0x03
    89c4:	e2 82       	std	Z+2, r14	; 0x02
}
    89c6:	df 91       	pop	r29
    89c8:	cf 91       	pop	r28
    89ca:	1f 91       	pop	r17
    89cc:	0f 91       	pop	r16
    89ce:	ff 90       	pop	r15
    89d0:	ef 90       	pop	r14
    89d2:	df 90       	pop	r13
    89d4:	08 95       	ret

000089d6 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    89d6:	aa e7       	ldi	r26, 0x7A	; 122
    89d8:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    89da:	20 e0       	ldi	r18, 0x00	; 0
    89dc:	30 e0       	ldi	r19, 0x00	; 0
    89de:	fc 01       	movw	r30, r24
    89e0:	e2 0f       	add	r30, r18
    89e2:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    89e4:	44 91       	lpm	r20, Z
    89e6:	44 23       	and	r20, r20
    89e8:	41 f0       	breq	.+16     	; 0x89fa <pgm_mugui_scopy+0x24>
    89ea:	28 31       	cpi	r18, 0x18	; 24
    89ec:	31 05       	cpc	r19, r1
    89ee:	29 f0       	breq	.+10     	; 0x89fa <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    89f0:	e4 91       	lpm	r30, Z
    89f2:	ed 93       	st	X+, r30
		i++;
    89f4:	2f 5f       	subi	r18, 0xFF	; 255
    89f6:	3f 4f       	sbci	r19, 0xFF	; 255
    89f8:	f2 cf       	rjmp	.-28     	; 0x89de <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    89fa:	f9 01       	movw	r30, r18
    89fc:	e6 58       	subi	r30, 0x86	; 134
    89fe:	fa 4f       	sbci	r31, 0xFA	; 250
    8a00:	10 82       	st	Z, r1
    8a02:	08 95       	ret

00008a04 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    8a04:	2f 92       	push	r2
    8a06:	3f 92       	push	r3
    8a08:	4f 92       	push	r4
    8a0a:	5f 92       	push	r5
    8a0c:	6f 92       	push	r6
    8a0e:	7f 92       	push	r7
    8a10:	8f 92       	push	r8
    8a12:	9f 92       	push	r9
    8a14:	af 92       	push	r10
    8a16:	bf 92       	push	r11
    8a18:	cf 92       	push	r12
    8a1a:	df 92       	push	r13
    8a1c:	ef 92       	push	r14
    8a1e:	ff 92       	push	r15
    8a20:	0f 93       	push	r16
    8a22:	1f 93       	push	r17
    8a24:	cf 93       	push	r28
    8a26:	df 93       	push	r29
    8a28:	cd b7       	in	r28, 0x3d	; 61
    8a2a:	de b7       	in	r29, 0x3e	; 62
    8a2c:	29 97       	sbiw	r28, 0x09	; 9
    8a2e:	0f b6       	in	r0, 0x3f	; 63
    8a30:	f8 94       	cli
    8a32:	de bf       	out	0x3e, r29	; 62
    8a34:	0f be       	out	0x3f, r0	; 63
    8a36:	cd bf       	out	0x3d, r28	; 61
    8a38:	4c 83       	std	Y+4, r20	; 0x04
    8a3a:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    8a3c:	fb 01       	movw	r30, r22
    8a3e:	32 96       	adiw	r30, 0x02	; 2
    8a40:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    8a42:	32 96       	adiw	r30, 0x02	; 2
    8a44:	e4 91       	lpm	r30, Z
    8a46:	2e 2e       	mov	r2, r30
    8a48:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    8a4a:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    8a4c:	90 e0       	ldi	r25, 0x00	; 0
    8a4e:	88 0f       	add	r24, r24
    8a50:	99 1f       	adc	r25, r25
    8a52:	fc 01       	movw	r30, r24
    8a54:	35 96       	adiw	r30, 0x05	; 5
    8a56:	e6 0f       	add	r30, r22
    8a58:	f7 1f       	adc	r31, r23
    8a5a:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    8a5c:	fc 01       	movw	r30, r24
    8a5e:	36 96       	adiw	r30, 0x06	; 6
    8a60:	e6 0f       	add	r30, r22
    8a62:	f7 1f       	adc	r31, r23
    8a64:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    8a66:	06 2d       	mov	r16, r6
    8a68:	10 e0       	ldi	r17, 0x00	; 0
    8a6a:	20 e0       	ldi	r18, 0x00	; 0
    8a6c:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    8a6e:	32 2f       	mov	r19, r18
    8a70:	21 2f       	mov	r18, r17
    8a72:	10 2f       	mov	r17, r16
    8a74:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    8a76:	08 0f       	add	r16, r24
    8a78:	11 1d       	adc	r17, r1
    8a7a:	21 1d       	adc	r18, r1
    8a7c:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    8a7e:	c8 01       	movw	r24, r16
    8a80:	fb 01       	movw	r30, r22
    8a82:	e0 0f       	add	r30, r16
    8a84:	f1 1f       	adc	r31, r17
    8a86:	64 90       	lpm	r6, Z
    8a88:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    8a8a:	21 01       	movw	r4, r2
    8a8c:	21 e0       	ldi	r18, 0x01	; 1
    8a8e:	42 1a       	sub	r4, r18
    8a90:	51 08       	sbc	r5, r1
    8a92:	13 e0       	ldi	r17, 0x03	; 3
    8a94:	56 94       	lsr	r5
    8a96:	47 94       	ror	r4
    8a98:	1a 95       	dec	r17
    8a9a:	e1 f7       	brne	.-8      	; 0x8a94 <mugui_lcd_putc+0x90>
    8a9c:	43 94       	inc	r4
    8a9e:	a4 2d       	mov	r26, r4
    8aa0:	b0 e0       	ldi	r27, 0x00	; 0
    8aa2:	ba 83       	std	Y+2, r27	; 0x02
    8aa4:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    8aa6:	a1 2c       	mov	r10, r1
    8aa8:	b1 2c       	mov	r11, r1
    8aaa:	00 e0       	ldi	r16, 0x00	; 0
    8aac:	10 e0       	ldi	r17, 0x00	; 0
    8aae:	4b 01       	movw	r8, r22
    8ab0:	bf ef       	ldi	r27, 0xFF	; 255
    8ab2:	8b 1a       	sub	r8, r27
    8ab4:	9b 0a       	sbc	r9, r27
    8ab6:	88 0e       	add	r8, r24
    8ab8:	99 1e       	adc	r9, r25
    8aba:	06 15       	cp	r16, r6
    8abc:	17 05       	cpc	r17, r7
    8abe:	08 f0       	brcs	.+2      	; 0x8ac2 <mugui_lcd_putc+0xbe>
    8ac0:	43 c0       	rjmp	.+134    	; 0x8b48 <mugui_lcd_putc+0x144>
    8ac2:	c1 2c       	mov	r12, r1
    8ac4:	d1 2c       	mov	r13, r1
    8ac6:	e1 2c       	mov	r14, r1
    8ac8:	f1 2c       	mov	r15, r1
    8aca:	94 01       	movw	r18, r8
    8acc:	2a 0d       	add	r18, r10
    8ace:	3b 1d       	adc	r19, r11
    8ad0:	3f 83       	std	Y+7, r19	; 0x07
    8ad2:	2e 83       	std	Y+6, r18	; 0x06
    8ad4:	5c 80       	ldd	r5, Y+4	; 0x04
    8ad6:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    8ad8:	c4 14       	cp	r12, r4
    8ada:	78 f5       	brcc	.+94     	; 0x8b3a <mugui_lcd_putc+0x136>
    8adc:	ee 81       	ldd	r30, Y+6	; 0x06
    8ade:	ff 81       	ldd	r31, Y+7	; 0x07
    8ae0:	ec 0d       	add	r30, r12
    8ae2:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    8ae4:	34 91       	lpm	r19, Z
    8ae6:	3b 83       	std	Y+3, r19	; 0x03
    8ae8:	19 86       	std	Y+9, r1	; 0x09
    8aea:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    8aec:	e2 14       	cp	r14, r2
    8aee:	f3 04       	cpc	r15, r3
    8af0:	00 f5       	brcc	.+64     	; 0x8b32 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    8af2:	81 e0       	ldi	r24, 0x01	; 1
    8af4:	90 e0       	ldi	r25, 0x00	; 0
    8af6:	08 84       	ldd	r0, Y+8	; 0x08
    8af8:	02 c0       	rjmp	.+4      	; 0x8afe <mugui_lcd_putc+0xfa>
    8afa:	88 0f       	add	r24, r24
    8afc:	99 1f       	adc	r25, r25
    8afe:	0a 94       	dec	r0
    8b00:	e2 f7       	brpl	.-8      	; 0x8afa <mugui_lcd_putc+0xf6>
					bit = data & mask;
    8b02:	3b 81       	ldd	r19, Y+3	; 0x03
    8b04:	83 23       	and	r24, r19
    8b06:	4d 81       	ldd	r20, Y+5	; 0x05
    8b08:	4e 0d       	add	r20, r14
					if(bit)
    8b0a:	88 23       	and	r24, r24
    8b0c:	11 f0       	breq	.+4      	; 0x8b12 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    8b0e:	21 e0       	ldi	r18, 0x01	; 1
    8b10:	01 c0       	rjmp	.+2      	; 0x8b14 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    8b12:	20 e0       	ldi	r18, 0x00	; 0
    8b14:	65 2d       	mov	r22, r5
    8b16:	80 e0       	ldi	r24, 0x00	; 0
    8b18:	91 e0       	ldi	r25, 0x01	; 1
    8b1a:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <setpixel>
					}
					ty++;
    8b1e:	8f ef       	ldi	r24, 0xFF	; 255
    8b20:	e8 1a       	sub	r14, r24
    8b22:	f8 0a       	sbc	r15, r24
    8b24:	a8 85       	ldd	r26, Y+8	; 0x08
    8b26:	b9 85       	ldd	r27, Y+9	; 0x09
    8b28:	11 96       	adiw	r26, 0x01	; 1
    8b2a:	b9 87       	std	Y+9, r27	; 0x09
    8b2c:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    8b2e:	18 97       	sbiw	r26, 0x08	; 8
    8b30:	e9 f6       	brne	.-70     	; 0x8aec <mugui_lcd_putc+0xe8>
    8b32:	bf ef       	ldi	r27, 0xFF	; 255
    8b34:	cb 1a       	sub	r12, r27
    8b36:	db 0a       	sbc	r13, r27
    8b38:	cf cf       	rjmp	.-98     	; 0x8ad8 <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    8b3a:	0f 5f       	subi	r16, 0xFF	; 255
    8b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    8b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    8b40:	fa 81       	ldd	r31, Y+2	; 0x02
    8b42:	ae 0e       	add	r10, r30
    8b44:	bf 1e       	adc	r11, r31
    8b46:	b9 cf       	rjmp	.-142    	; 0x8aba <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    8b48:	c3 01       	movw	r24, r6
    8b4a:	29 96       	adiw	r28, 0x09	; 9
    8b4c:	0f b6       	in	r0, 0x3f	; 63
    8b4e:	f8 94       	cli
    8b50:	de bf       	out	0x3e, r29	; 62
    8b52:	0f be       	out	0x3f, r0	; 63
    8b54:	cd bf       	out	0x3d, r28	; 61
    8b56:	df 91       	pop	r29
    8b58:	cf 91       	pop	r28
    8b5a:	1f 91       	pop	r17
    8b5c:	0f 91       	pop	r16
    8b5e:	ff 90       	pop	r15
    8b60:	ef 90       	pop	r14
    8b62:	df 90       	pop	r13
    8b64:	cf 90       	pop	r12
    8b66:	bf 90       	pop	r11
    8b68:	af 90       	pop	r10
    8b6a:	9f 90       	pop	r9
    8b6c:	8f 90       	pop	r8
    8b6e:	7f 90       	pop	r7
    8b70:	6f 90       	pop	r6
    8b72:	5f 90       	pop	r5
    8b74:	4f 90       	pop	r4
    8b76:	3f 90       	pop	r3
    8b78:	2f 90       	pop	r2
    8b7a:	08 95       	ret

00008b7c <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    8b7c:	af 92       	push	r10
    8b7e:	bf 92       	push	r11
    8b80:	cf 92       	push	r12
    8b82:	df 92       	push	r13
    8b84:	ef 92       	push	r14
    8b86:	ff 92       	push	r15
    8b88:	0f 93       	push	r16
    8b8a:	1f 93       	push	r17
    8b8c:	cf 93       	push	r28
    8b8e:	df 93       	push	r29
    8b90:	ec 01       	movw	r28, r24
    8b92:	7b 01       	movw	r14, r22
    8b94:	6a 01       	movw	r12, r20
    8b96:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    8b98:	00 e0       	ldi	r16, 0x00	; 0
    8b9a:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    8b9c:	ce 01       	movw	r24, r28
    8b9e:	fe 01       	movw	r30, r28
    8ba0:	24 91       	lpm	r18, Z
    8ba2:	22 23       	and	r18, r18
    8ba4:	71 f0       	breq	.+28     	; 0x8bc2 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    8ba6:	21 96       	adiw	r28, 0x01	; 1
    8ba8:	fc 01       	movw	r30, r24
    8baa:	84 91       	lpm	r24, Z
    8bac:	a8 01       	movw	r20, r16
    8bae:	4c 0d       	add	r20, r12
    8bb0:	5d 1d       	adc	r21, r13
    8bb2:	95 01       	movw	r18, r10
    8bb4:	b7 01       	movw	r22, r14
    8bb6:	0e 94 02 45 	call	0x8a04	; 0x8a04 <mugui_lcd_putc>
    8bba:	01 96       	adiw	r24, 0x01	; 1
    8bbc:	08 0f       	add	r16, r24
    8bbe:	19 1f       	adc	r17, r25
    8bc0:	ed cf       	rjmp	.-38     	; 0x8b9c <pgm_mugui_lcd_puts+0x20>
	}
}
    8bc2:	df 91       	pop	r29
    8bc4:	cf 91       	pop	r28
    8bc6:	1f 91       	pop	r17
    8bc8:	0f 91       	pop	r16
    8bca:	ff 90       	pop	r15
    8bcc:	ef 90       	pop	r14
    8bce:	df 90       	pop	r13
    8bd0:	cf 90       	pop	r12
    8bd2:	bf 90       	pop	r11
    8bd4:	af 90       	pop	r10
    8bd6:	08 95       	ret

00008bd8 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    8bd8:	8f 92       	push	r8
    8bda:	9f 92       	push	r9
    8bdc:	af 92       	push	r10
    8bde:	bf 92       	push	r11
    8be0:	cf 92       	push	r12
    8be2:	df 92       	push	r13
    8be4:	ef 92       	push	r14
    8be6:	ff 92       	push	r15
    8be8:	0f 93       	push	r16
    8bea:	1f 93       	push	r17
    8bec:	cf 93       	push	r28
    8bee:	df 93       	push	r29
    8bf0:	6b 01       	movw	r12, r22
    8bf2:	5a 01       	movw	r10, r20
    8bf4:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    8bf6:	ec 01       	movw	r28, r24
    8bf8:	09 90       	ld	r0, Y+
    8bfa:	00 20       	and	r0, r0
    8bfc:	e9 f7       	brne	.-6      	; 0x8bf8 <mugui_lcd_puts+0x20>
    8bfe:	8c 01       	movw	r16, r24
    8c00:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    8c02:	e1 2c       	mov	r14, r1
    8c04:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    8c06:	0c 17       	cp	r16, r28
    8c08:	1d 07       	cpc	r17, r29
    8c0a:	71 f0       	breq	.+28     	; 0x8c28 <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    8c0c:	a7 01       	movw	r20, r14
    8c0e:	4a 0d       	add	r20, r10
    8c10:	5b 1d       	adc	r21, r11
    8c12:	94 01       	movw	r18, r8
    8c14:	b6 01       	movw	r22, r12
    8c16:	f8 01       	movw	r30, r16
    8c18:	81 91       	ld	r24, Z+
    8c1a:	8f 01       	movw	r16, r30
    8c1c:	0e 94 02 45 	call	0x8a04	; 0x8a04 <mugui_lcd_putc>
    8c20:	01 96       	adiw	r24, 0x01	; 1
    8c22:	e8 0e       	add	r14, r24
    8c24:	f9 1e       	adc	r15, r25
    8c26:	ef cf       	rjmp	.-34     	; 0x8c06 <mugui_lcd_puts+0x2e>
	}
}
    8c28:	df 91       	pop	r29
    8c2a:	cf 91       	pop	r28
    8c2c:	1f 91       	pop	r17
    8c2e:	0f 91       	pop	r16
    8c30:	ff 90       	pop	r15
    8c32:	ef 90       	pop	r14
    8c34:	df 90       	pop	r13
    8c36:	cf 90       	pop	r12
    8c38:	bf 90       	pop	r11
    8c3a:	af 90       	pop	r10
    8c3c:	9f 90       	pop	r9
    8c3e:	8f 90       	pop	r8
    8c40:	08 95       	ret

00008c42 <Sensor_PID>:
float HPF_I = 0;
float fsample = 0;
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    8c42:	2f 92       	push	r2
    8c44:	3f 92       	push	r3
    8c46:	4f 92       	push	r4
    8c48:	5f 92       	push	r5
    8c4a:	6f 92       	push	r6
    8c4c:	7f 92       	push	r7
    8c4e:	8f 92       	push	r8
    8c50:	9f 92       	push	r9
    8c52:	af 92       	push	r10
    8c54:	bf 92       	push	r11
    8c56:	cf 92       	push	r12
    8c58:	df 92       	push	r13
    8c5a:	ef 92       	push	r14
    8c5c:	ff 92       	push	r15
    8c5e:	0f 93       	push	r16
    8c60:	1f 93       	push	r17
    8c62:	cf 93       	push	r28
    8c64:	df 93       	push	r29
    8c66:	cd b7       	in	r28, 0x3d	; 61
    8c68:	de b7       	in	r29, 0x3e	; 62
    8c6a:	a9 97       	sbiw	r28, 0x29	; 41
    8c6c:	0f b6       	in	r0, 0x3f	; 63
    8c6e:	f8 94       	cli
    8c70:	de bf       	out	0x3e, r29	; 62
    8c72:	0f be       	out	0x3f, r0	; 63
    8c74:	cd bf       	out	0x3d, r28	; 61
    8c76:	6e a3       	std	Y+38, r22	; 0x26
    8c78:	7f a3       	std	Y+39, r23	; 0x27
    8c7a:	88 a7       	std	Y+40, r24	; 0x28
    8c7c:	99 a7       	std	Y+41, r25	; 0x29
	float tempf1 = 0;
    8c7e:	1d 86       	std	Y+13, r1	; 0x0d
    8c80:	1e 86       	std	Y+14, r1	; 0x0e
    8c82:	1f 86       	std	Y+15, r1	; 0x0f
    8c84:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    8c86:	80 91 86 08 	lds	r24, 0x0886
    8c8a:	90 91 87 08 	lds	r25, 0x0887
    8c8e:	91 95       	neg	r25
    8c90:	81 95       	neg	r24
    8c92:	91 09       	sbc	r25, r1
    8c94:	98 87       	std	Y+8, r25	; 0x08
    8c96:	8f 83       	std	Y+7, r24	; 0x07
    8c98:	80 91 88 08 	lds	r24, 0x0888
    8c9c:	90 91 89 08 	lds	r25, 0x0889
    8ca0:	9a 87       	std	Y+10, r25	; 0x0a
    8ca2:	89 87       	std	Y+9, r24	; 0x09
    8ca4:	80 91 8a 08 	lds	r24, 0x088A
    8ca8:	90 91 8b 08 	lds	r25, 0x088B
    8cac:	9c 87       	std	Y+12, r25	; 0x0c
    8cae:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    8cb0:	80 91 0c 06 	lds	r24, 0x060C
    8cb4:	89 83       	std	Y+1, r24	; 0x01
    8cb6:	80 91 12 06 	lds	r24, 0x0612
    8cba:	8a 83       	std	Y+2, r24	; 0x02
    8cbc:	80 91 18 06 	lds	r24, 0x0618
    8cc0:	8b 83       	std	Y+3, r24	; 0x03
    8cc2:	80 91 1e 06 	lds	r24, 0x061E
    8cc6:	8c 83       	std	Y+4, r24	; 0x04
    8cc8:	80 91 24 06 	lds	r24, 0x0624
    8ccc:	8d 83       	std	Y+5, r24	; 0x05
    8cce:	80 91 2a 06 	lds	r24, 0x062A
    8cd2:	8e 83       	std	Y+6, r24	; 0x06
	//************************************************************
	// Create a measure of gyro noise
	//************************************************************

	// Only bother when display vibration info is set to "ON"
	if (Config.Vibration == ON)
    8cd4:	80 91 07 06 	lds	r24, 0x0607
    8cd8:	81 30       	cpi	r24, 0x01	; 1
    8cda:	09 f0       	breq	.+2      	; 0x8cde <Sensor_PID+0x9c>
    8cdc:	d8 c0       	rjmp	.+432    	; 0x8e8e <Sensor_PID+0x24c>
	{
		// Work out quick average of all raw gyros and take the absolute value
		fsample = (float)(gyroADC_raw[ROLL] + gyroADC_raw[PITCH] + gyroADC_raw[YAW]);
    8cde:	60 91 99 05 	lds	r22, 0x0599
    8ce2:	70 91 9a 05 	lds	r23, 0x059A
    8ce6:	80 91 9b 05 	lds	r24, 0x059B
    8cea:	90 91 9c 05 	lds	r25, 0x059C
    8cee:	68 0f       	add	r22, r24
    8cf0:	79 1f       	adc	r23, r25
    8cf2:	80 91 9d 05 	lds	r24, 0x059D
    8cf6:	90 91 9e 05 	lds	r25, 0x059E
    8cfa:	68 0f       	add	r22, r24
    8cfc:	79 1f       	adc	r23, r25
    8cfe:	88 27       	eor	r24, r24
    8d00:	77 fd       	sbrc	r23, 7
    8d02:	80 95       	com	r24
    8d04:	98 2f       	mov	r25, r24
    8d06:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    8d0a:	4b 01       	movw	r8, r22
    8d0c:	5c 01       	movw	r10, r24

		// HPF example from http://www.codeproject.com/Tips/681745/Csharp-Discrete-Time-RLC-Low-High-Pass-Filter-Rout
		// Some values preset for a 50Hz cutoff at 500Hz sample rate
		HPF_T = (fsample * HPF_O) - HPF_V;
    8d0e:	40 90 44 05 	lds	r4, 0x0544
    8d12:	50 90 45 05 	lds	r5, 0x0545
    8d16:	60 90 46 05 	lds	r6, 0x0546
    8d1a:	70 90 47 05 	lds	r7, 0x0547
    8d1e:	2c e7       	ldi	r18, 0x7C	; 124
    8d20:	39 ed       	ldi	r19, 0xD9	; 217
    8d22:	40 e2       	ldi	r20, 0x20	; 32
    8d24:	5f e3       	ldi	r21, 0x3F	; 63
    8d26:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    8d2a:	a3 01       	movw	r20, r6
    8d2c:	92 01       	movw	r18, r4
    8d2e:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <__subsf3>
    8d32:	6b 01       	movw	r12, r22
    8d34:	7c 01       	movw	r14, r24
    8d36:	60 93 40 05 	sts	0x0540, r22
    8d3a:	70 93 41 05 	sts	0x0541, r23
    8d3e:	80 93 42 05 	sts	0x0542, r24
    8d42:	90 93 43 05 	sts	0x0543, r25
		HPF_V += (HPF_I + HPF_T) / HPF_C;
    8d46:	20 91 3c 05 	lds	r18, 0x053C
    8d4a:	30 91 3d 05 	lds	r19, 0x053D
    8d4e:	40 91 3e 05 	lds	r20, 0x053E
    8d52:	50 91 3f 05 	lds	r21, 0x053F
    8d56:	29 8b       	std	Y+17, r18	; 0x11
    8d58:	3a 8b       	std	Y+18, r19	; 0x12
    8d5a:	4b 8b       	std	Y+19, r20	; 0x13
    8d5c:	5c 8b       	std	Y+20, r21	; 0x14
    8d5e:	9b 01       	movw	r18, r22
    8d60:	ac 01       	movw	r20, r24
    8d62:	69 89       	ldd	r22, Y+17	; 0x11
    8d64:	7a 89       	ldd	r23, Y+18	; 0x12
    8d66:	8b 89       	ldd	r24, Y+19	; 0x13
    8d68:	9c 89       	ldd	r25, Y+20	; 0x14
    8d6a:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    8d6e:	24 ee       	ldi	r18, 0xE4	; 228
    8d70:	37 eb       	ldi	r19, 0xB7	; 183
    8d72:	4b ec       	ldi	r20, 0xCB	; 203
    8d74:	5f e3       	ldi	r21, 0x3F	; 63
    8d76:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    8d7a:	9b 01       	movw	r18, r22
    8d7c:	ac 01       	movw	r20, r24
    8d7e:	c3 01       	movw	r24, r6
    8d80:	b2 01       	movw	r22, r4
    8d82:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    8d86:	2b 01       	movw	r4, r22
    8d88:	3c 01       	movw	r6, r24
    8d8a:	60 93 44 05 	sts	0x0544, r22
    8d8e:	70 93 45 05 	sts	0x0545, r23
    8d92:	80 93 46 05 	sts	0x0546, r24
    8d96:	90 93 47 05 	sts	0x0547, r25
		HPF_I += HPF_T / HPF_L;
    8d9a:	24 ee       	ldi	r18, 0xE4	; 228
    8d9c:	37 eb       	ldi	r19, 0xB7	; 183
    8d9e:	4b ec       	ldi	r20, 0xCB	; 203
    8da0:	5f e3       	ldi	r21, 0x3F	; 63
    8da2:	c7 01       	movw	r24, r14
    8da4:	b6 01       	movw	r22, r12
    8da6:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    8daa:	9b 01       	movw	r18, r22
    8dac:	ac 01       	movw	r20, r24
    8dae:	69 89       	ldd	r22, Y+17	; 0x11
    8db0:	7a 89       	ldd	r23, Y+18	; 0x12
    8db2:	8b 89       	ldd	r24, Y+19	; 0x13
    8db4:	9c 89       	ldd	r25, Y+20	; 0x14
    8db6:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    8dba:	60 93 3c 05 	sts	0x053C, r22
    8dbe:	70 93 3d 05 	sts	0x053D, r23
    8dc2:	80 93 3e 05 	sts	0x053E, r24
    8dc6:	90 93 3f 05 	sts	0x053F, r25
		fsample -= HPF_V / HPF_O;
    8dca:	2c e7       	ldi	r18, 0x7C	; 124
    8dcc:	39 ed       	ldi	r19, 0xD9	; 217
    8dce:	40 e2       	ldi	r20, 0x20	; 32
    8dd0:	5f e3       	ldi	r21, 0x3F	; 63
    8dd2:	c3 01       	movw	r24, r6
    8dd4:	b2 01       	movw	r22, r4
    8dd6:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    8dda:	9b 01       	movw	r18, r22
    8ddc:	ac 01       	movw	r20, r24
    8dde:	c5 01       	movw	r24, r10
    8de0:	b4 01       	movw	r22, r8
    8de2:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <__subsf3>
    8de6:	6b 01       	movw	r12, r22
    8de8:	7c 01       	movw	r14, r24
    8dea:	60 93 38 05 	sts	0x0538, r22
    8dee:	70 93 39 05 	sts	0x0539, r23
    8df2:	80 93 3a 05 	sts	0x053A, r24
    8df6:	90 93 3b 05 	sts	0x053B, r25

		// LPF filter the readings so that they are more persistent
		GyroAvgNoise = ((GyroAvgNoise * 99.0f) + abs(fsample)) / 100.0f;
    8dfa:	20 e0       	ldi	r18, 0x00	; 0
    8dfc:	30 e0       	ldi	r19, 0x00	; 0
    8dfe:	46 ec       	ldi	r20, 0xC6	; 198
    8e00:	52 e4       	ldi	r21, 0x42	; 66
    8e02:	60 91 7e 08 	lds	r22, 0x087E
    8e06:	70 91 7f 08 	lds	r23, 0x087F
    8e0a:	80 91 80 08 	lds	r24, 0x0880
    8e0e:	90 91 81 08 	lds	r25, 0x0881
    8e12:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    8e16:	4b 01       	movw	r8, r22
    8e18:	5c 01       	movw	r10, r24
    8e1a:	c7 01       	movw	r24, r14
    8e1c:	b6 01       	movw	r22, r12
    8e1e:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    8e22:	9b 01       	movw	r18, r22
    8e24:	77 ff       	sbrs	r23, 7
    8e26:	04 c0       	rjmp	.+8      	; 0x8e30 <Sensor_PID+0x1ee>
    8e28:	22 27       	eor	r18, r18
    8e2a:	33 27       	eor	r19, r19
    8e2c:	26 1b       	sub	r18, r22
    8e2e:	37 0b       	sbc	r19, r23
    8e30:	b9 01       	movw	r22, r18
    8e32:	88 27       	eor	r24, r24
    8e34:	77 fd       	sbrc	r23, 7
    8e36:	80 95       	com	r24
    8e38:	98 2f       	mov	r25, r24
    8e3a:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    8e3e:	9b 01       	movw	r18, r22
    8e40:	ac 01       	movw	r20, r24
    8e42:	c5 01       	movw	r24, r10
    8e44:	b4 01       	movw	r22, r8
    8e46:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    8e4a:	20 e0       	ldi	r18, 0x00	; 0
    8e4c:	30 e0       	ldi	r19, 0x00	; 0
    8e4e:	48 ec       	ldi	r20, 0xC8	; 200
    8e50:	52 e4       	ldi	r21, 0x42	; 66
    8e52:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    8e56:	60 93 7e 08 	sts	0x087E, r22
    8e5a:	70 93 7f 08 	sts	0x087F, r23
    8e5e:	80 93 80 08 	sts	0x0880, r24
    8e62:	90 93 81 08 	sts	0x0881, r25

		// Limit noise reading to 999
		if (GyroAvgNoise > 999.0f)
    8e66:	20 e0       	ldi	r18, 0x00	; 0
    8e68:	30 ec       	ldi	r19, 0xC0	; 192
    8e6a:	49 e7       	ldi	r20, 0x79	; 121
    8e6c:	54 e4       	ldi	r21, 0x44	; 68
    8e6e:	0e 94 7d 50 	call	0xa0fa	; 0xa0fa <__gesf2>
    8e72:	18 16       	cp	r1, r24
    8e74:	64 f4       	brge	.+24     	; 0x8e8e <Sensor_PID+0x24c>
		{
			GyroAvgNoise = 999.0f;
    8e76:	80 e0       	ldi	r24, 0x00	; 0
    8e78:	90 ec       	ldi	r25, 0xC0	; 192
    8e7a:	a9 e7       	ldi	r26, 0x79	; 121
    8e7c:	b4 e4       	ldi	r27, 0x44	; 68
    8e7e:	80 93 7e 08 	sts	0x087E, r24
    8e82:	90 93 7f 08 	sts	0x087F, r25
    8e86:	a0 93 80 08 	sts	0x0880, r26
    8e8a:	b0 93 81 08 	sts	0x0881, r27
    8e8e:	ae 01       	movw	r20, r28
    8e90:	49 5f       	subi	r20, 0xF9	; 249
    8e92:	5f 4f       	sbci	r21, 0xFF	; 255
    8e94:	59 a3       	std	Y+33, r21	; 0x21
    8e96:	48 a3       	std	Y+32, r20	; 0x20
    8e98:	ce 01       	movw	r24, r28
    8e9a:	01 96       	adiw	r24, 0x01	; 1
    8e9c:	9f 8f       	std	Y+31, r25	; 0x1f
    8e9e:	8e 8f       	std	Y+30, r24	; 0x1e
    8ea0:	de 01       	movw	r26, r28
    8ea2:	14 96       	adiw	r26, 0x04	; 4
    8ea4:	bd 8f       	std	Y+29, r27	; 0x1d
    8ea6:	ac 8f       	std	Y+28, r26	; 0x1c
    8ea8:	e2 e7       	ldi	r30, 0x72	; 114
    8eaa:	f8 e0       	ldi	r31, 0x08	; 8
    8eac:	ff 8b       	std	Y+23, r31	; 0x17
    8eae:	ee 8b       	std	Y+22, r30	; 0x16
    8eb0:	0a e2       	ldi	r16, 0x2A	; 42
    8eb2:	18 e0       	ldi	r17, 0x08	; 8
    8eb4:	21 e5       	ldi	r18, 0x51	; 81
    8eb6:	36 e0       	ldi	r19, 0x06	; 6
    8eb8:	3d a3       	std	Y+37, r19	; 0x25
    8eba:	2c a3       	std	Y+36, r18	; 0x24
    8ebc:	4e e4       	ldi	r20, 0x4E	; 78
    8ebe:	24 2e       	mov	r2, r20
    8ec0:	48 e0       	ldi	r20, 0x08	; 8
    8ec2:	34 2e       	mov	r3, r20
    8ec4:	43 e9       	ldi	r20, 0x93	; 147
    8ec6:	55 e0       	ldi	r21, 0x05	; 5
    8ec8:	5a 8b       	std	Y+18, r21	; 0x12
    8eca:	49 8b       	std	Y+17, r20	; 0x11
    8ecc:	85 e4       	ldi	r24, 0x45	; 69
    8ece:	96 e0       	ldi	r25, 0x06	; 6
    8ed0:	9b a3       	std	Y+35, r25	; 0x23
    8ed2:	8a a3       	std	Y+34, r24	; 0x22
float HPF_I = 0;
float fsample = 0;
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    8ed4:	1d 8a       	std	Y+21, r1	; 0x15
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    8ed6:	a8 a1       	ldd	r26, Y+32	; 0x20
    8ed8:	b9 a1       	ldd	r27, Y+33	; 0x21
    8eda:	8d 91       	ld	r24, X+
    8edc:	9d 91       	ld	r25, X+
    8ede:	b9 a3       	std	Y+33, r27	; 0x21
    8ee0:	a8 a3       	std	Y+32, r26	; 0x20
    8ee2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    8ee4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    8ee6:	21 91       	ld	r18, Z+
    8ee8:	ff 8f       	std	Y+31, r31	; 0x1f
    8eea:	ee 8f       	std	Y+30, r30	; 0x1e
    8eec:	36 e0       	ldi	r19, 0x06	; 6
    8eee:	63 2e       	mov	r6, r19
    8ef0:	71 2c       	mov	r7, r1
    8ef2:	62 1a       	sub	r6, r18
    8ef4:	71 08       	sbc	r7, r1
    8ef6:	27 fd       	sbrc	r18, 7
    8ef8:	73 94       	inc	r7
    8efa:	9c 01       	movw	r18, r24
    8efc:	02 c0       	rjmp	.+4      	; 0x8f02 <Sensor_PID+0x2c0>
    8efe:	35 95       	asr	r19
    8f00:	27 95       	ror	r18
    8f02:	6a 94       	dec	r6
    8f04:	e2 f7       	brpl	.-8      	; 0x8efe <Sensor_PID+0x2bc>
    8f06:	39 01       	movw	r6, r18
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    8f08:	ac 8d       	ldd	r26, Y+28	; 0x1c
    8f0a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    8f0c:	2d 91       	ld	r18, X+
    8f0e:	bd 8f       	std	Y+29, r27	; 0x1d
    8f10:	ac 8f       	std	Y+28, r26	; 0x1c
    8f12:	e6 e0       	ldi	r30, 0x06	; 6
    8f14:	f0 e0       	ldi	r31, 0x00	; 0
    8f16:	e2 1b       	sub	r30, r18
    8f18:	f1 09       	sbc	r31, r1
    8f1a:	27 fd       	sbrc	r18, 7
    8f1c:	f3 95       	inc	r31
    8f1e:	ac 01       	movw	r20, r24
    8f20:	0e 2e       	mov	r0, r30
    8f22:	02 c0       	rjmp	.+4      	; 0x8f28 <Sensor_PID+0x2e6>
    8f24:	55 95       	asr	r21
    8f26:	47 95       	ror	r20
    8f28:	0a 94       	dec	r0
    8f2a:	e2 f7       	brpl	.-8      	; 0x8f24 <Sensor_PID+0x2e2>
    8f2c:	59 8f       	std	Y+25, r21	; 0x19
    8f2e:	48 8f       	std	Y+24, r20	; 0x18
		// Gyro LPF
		//************************************************************	

		// Lookup LPF value
		// Note: Two sets of values for normal and high-speed mode
		if (Config.Servo_rate != FAST)
    8f30:	80 91 01 06 	lds	r24, 0x0601
    8f34:	60 91 66 06 	lds	r22, 0x0666
    8f38:	82 30       	cpi	r24, 0x02	; 2
    8f3a:	39 f0       	breq	.+14     	; 0x8f4a <Sensor_PID+0x308>
		{
			memcpy_P(&tempf1, &LPF_lookup[Config.Gyro_LPF], sizeof(float));
    8f3c:	54 e0       	ldi	r21, 0x04	; 4
    8f3e:	65 02       	muls	r22, r21
    8f40:	b0 01       	movw	r22, r0
    8f42:	11 24       	eor	r1, r1
    8f44:	6d 58       	subi	r22, 0x8D	; 141
    8f46:	74 4e       	sbci	r23, 0xE4	; 228
    8f48:	06 c0       	rjmp	.+12     	; 0x8f56 <Sensor_PID+0x314>
		}
		else
		{
			memcpy_P(&tempf1, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float));
    8f4a:	84 e0       	ldi	r24, 0x04	; 4
    8f4c:	68 02       	muls	r22, r24
    8f4e:	b0 01       	movw	r22, r0
    8f50:	11 24       	eor	r1, r1
    8f52:	6d 5a       	subi	r22, 0xAD	; 173
    8f54:	74 4e       	sbci	r23, 0xE4	; 228
    8f56:	44 e0       	ldi	r20, 0x04	; 4
    8f58:	50 e0       	ldi	r21, 0x00	; 0
    8f5a:	ce 01       	movw	r24, r28
    8f5c:	0d 96       	adiw	r24, 0x0d	; 13
    8f5e:	0e 94 84 51 	call	0xa308	; 0xa308 <memcpy_P>
		}		
			
		gyroADCf = gyroADC[axis]; // Promote gyro signal to suit
    8f62:	a9 89       	ldd	r26, Y+17	; 0x11
    8f64:	ba 89       	ldd	r27, Y+18	; 0x12
    8f66:	6d 91       	ld	r22, X+
    8f68:	7c 91       	ld	r23, X
    8f6a:	88 27       	eor	r24, r24
    8f6c:	77 fd       	sbrc	r23, 7
    8f6e:	80 95       	com	r24
    8f70:	98 2f       	mov	r25, r24
    8f72:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    8f76:	6b 01       	movw	r12, r22
    8f78:	7c 01       	movw	r14, r24

		if (Config.Gyro_LPF != NOFILTER)
    8f7a:	80 91 66 06 	lds	r24, 0x0666
    8f7e:	87 30       	cpi	r24, 0x07	; 7
    8f80:	11 f1       	breq	.+68     	; 0x8fc6 <Sensor_PID+0x384>
		{
			// Gyro LPF
			gyroSmooth[axis] = ((gyroSmooth[axis] * (tempf1 - 1.0f)) + gyroADCf) / tempf1;
    8f82:	8d 84       	ldd	r8, Y+13	; 0x0d
    8f84:	9e 84       	ldd	r9, Y+14	; 0x0e
    8f86:	af 84       	ldd	r10, Y+15	; 0x0f
    8f88:	b8 88       	ldd	r11, Y+16	; 0x10
    8f8a:	20 e0       	ldi	r18, 0x00	; 0
    8f8c:	30 e0       	ldi	r19, 0x00	; 0
    8f8e:	40 e8       	ldi	r20, 0x80	; 128
    8f90:	5f e3       	ldi	r21, 0x3F	; 63
    8f92:	c5 01       	movw	r24, r10
    8f94:	b4 01       	movw	r22, r8
    8f96:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <__subsf3>
    8f9a:	f1 01       	movw	r30, r2
    8f9c:	20 81       	ld	r18, Z
    8f9e:	31 81       	ldd	r19, Z+1	; 0x01
    8fa0:	42 81       	ldd	r20, Z+2	; 0x02
    8fa2:	53 81       	ldd	r21, Z+3	; 0x03
    8fa4:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
    8fa8:	a7 01       	movw	r20, r14
    8faa:	96 01       	movw	r18, r12
    8fac:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <__addsf3>
    8fb0:	a5 01       	movw	r20, r10
    8fb2:	94 01       	movw	r18, r8
    8fb4:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    8fb8:	d1 01       	movw	r26, r2
    8fba:	6d 93       	st	X+, r22
    8fbc:	7d 93       	st	X+, r23
    8fbe:	8d 93       	st	X+, r24
    8fc0:	9c 93       	st	X, r25
    8fc2:	13 97       	sbiw	r26, 0x03	; 3
    8fc4:	05 c0       	rjmp	.+10     	; 0x8fd0 <Sensor_PID+0x38e>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values when filter off
			gyroSmooth[axis] = gyroADCf;
    8fc6:	f1 01       	movw	r30, r2
    8fc8:	c0 82       	st	Z, r12
    8fca:	d1 82       	std	Z+1, r13	; 0x01
    8fcc:	e2 82       	std	Z+2, r14	; 0x02
    8fce:	f3 82       	std	Z+3, r15	; 0x03
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];	
    8fd0:	d1 01       	movw	r26, r2
    8fd2:	6d 91       	ld	r22, X+
    8fd4:	7d 91       	ld	r23, X+
    8fd6:	8d 91       	ld	r24, X+
    8fd8:	9c 91       	ld	r25, X
    8fda:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
    8fde:	4b 01       	movw	r8, r22
    8fe0:	5c 01       	movw	r10, r24
    8fe2:	e9 89       	ldd	r30, Y+17	; 0x11
    8fe4:	fa 89       	ldd	r31, Y+18	; 0x12
    8fe6:	71 83       	std	Z+1, r23	; 0x01
    8fe8:	60 83       	st	Z, r22
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
    8fea:	6e a1       	ldd	r22, Y+38	; 0x26
    8fec:	7f a1       	ldd	r23, Y+39	; 0x27
    8fee:	88 a5       	ldd	r24, Y+40	; 0x28
    8ff0:	99 a5       	ldd	r25, Y+41	; 0x29
    8ff2:	0e 94 cb 4f 	call	0x9f96	; 0x9f96 <__floatunsisf>
    8ff6:	20 e0       	ldi	r18, 0x00	; 0
    8ff8:	30 e3       	ldi	r19, 0x30	; 48
    8ffa:	4f e5       	ldi	r20, 0x5F	; 95
    8ffc:	55 e4       	ldi	r21, 0x45	; 69
    8ffe:	0e 94 32 4f 	call	0x9e64	; 0x9e64 <__divsf3>
    9002:	6b 01       	movw	r12, r22
    9004:	7c 01       	movw	r14, r24
		//************************************************************
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
    9006:	b3 01       	movw	r22, r6
    9008:	68 0d       	add	r22, r8
    900a:	79 1d       	adc	r23, r9
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    900c:	88 27       	eor	r24, r24
    900e:	77 fd       	sbrc	r23, 7
    9010:	80 95       	com	r24
    9012:	98 2f       	mov	r25, r24
    9014:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    9018:	2b 01       	movw	r4, r22
    901a:	3c 01       	movw	r6, r24
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
    901c:	68 8d       	ldd	r22, Y+24	; 0x18
    901e:	79 8d       	ldd	r23, Y+25	; 0x19
    9020:	68 0d       	add	r22, r8
    9022:	79 1d       	adc	r23, r9
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
    9024:	88 27       	eor	r24, r24
    9026:	77 fd       	sbrc	r23, 7
    9028:	80 95       	com	r24
    902a:	98 2f       	mov	r25, r24
    902c:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <__floatsisf>
    9030:	68 8f       	std	Y+24, r22	; 0x18
    9032:	79 8f       	std	Y+25, r23	; 0x19
    9034:	8a 8f       	std	Y+26, r24	; 0x1a
    9036:	9b 8f       	std	Y+27, r25	; 0x1b
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
    9038:	a7 01       	movw	r20, r14
    903a:	96 01       	movw	r18, r12
    903c:	c3 01       	movw	r24, r6
    903e:	b2 01       	movw	r22, r4
    9040:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    9044:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
		tempf2 = tempf2 * factor;
		P2_temp = (int32_t)tempf2;
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
    9048:	d8 01       	movw	r26, r16
    904a:	4d 90       	ld	r4, X+
    904c:	5d 90       	ld	r5, X+
    904e:	6d 90       	ld	r6, X+
    9050:	7c 90       	ld	r7, X
    9052:	46 0e       	add	r4, r22
    9054:	57 1e       	adc	r5, r23
    9056:	68 1e       	adc	r6, r24
    9058:	79 1e       	adc	r7, r25
    905a:	f8 01       	movw	r30, r16
    905c:	40 82       	st	Z, r4
    905e:	51 82       	std	Z+1, r5	; 0x01
    9060:	62 82       	std	Z+2, r6	; 0x02
    9062:	73 82       	std	Z+3, r7	; 0x03
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
		tempf2 = tempf2 * factor;
    9064:	a7 01       	movw	r20, r14
    9066:	96 01       	movw	r18, r12
    9068:	68 8d       	ldd	r22, Y+24	; 0x18
    906a:	79 8d       	ldd	r23, Y+25	; 0x19
    906c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    906e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    9070:	0e 94 81 50 	call	0xa102	; 0xa102 <__mulsf3>
		P2_temp = (int32_t)tempf2;
    9074:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
		IntegralGyro[P2][axis] += P2_temp;
    9078:	d8 01       	movw	r26, r16
    907a:	1c 96       	adiw	r26, 0x0c	; 12
    907c:	cd 90       	ld	r12, X+
    907e:	dd 90       	ld	r13, X+
    9080:	ed 90       	ld	r14, X+
    9082:	fc 90       	ld	r15, X
    9084:	1f 97       	sbiw	r26, 0x0f	; 15
    9086:	c6 0e       	add	r12, r22
    9088:	d7 1e       	adc	r13, r23
    908a:	e8 1e       	adc	r14, r24
    908c:	f9 1e       	adc	r15, r25
    908e:	f8 01       	movw	r30, r16
    9090:	c4 86       	std	Z+12, r12	; 0x0c
    9092:	d5 86       	std	Z+13, r13	; 0x0d
    9094:	e6 86       	std	Z+14, r14	; 0x0e
    9096:	f7 86       	std	Z+15, r15	; 0x0f
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    9098:	ea a1       	ldd	r30, Y+34	; 0x22
    909a:	fb a1       	ldd	r31, Y+35	; 0x23
    909c:	81 91       	ld	r24, Z+
    909e:	91 91       	ld	r25, Z+
    90a0:	a1 91       	ld	r26, Z+
    90a2:	b1 91       	ld	r27, Z+
    90a4:	fb a3       	std	Y+35, r31	; 0x23
    90a6:	ea a3       	std	Y+34, r30	; 0x22
    90a8:	84 15       	cp	r24, r4
    90aa:	95 05       	cpc	r25, r5
    90ac:	a6 05       	cpc	r26, r6
    90ae:	b7 05       	cpc	r27, r7
    90b0:	2c f4       	brge	.+10     	; 0x90bc <Sensor_PID+0x47a>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    90b2:	f8 01       	movw	r30, r16
    90b4:	80 83       	st	Z, r24
    90b6:	91 83       	std	Z+1, r25	; 0x01
    90b8:	a2 83       	std	Z+2, r26	; 0x02
    90ba:	b3 83       	std	Z+3, r27	; 0x03
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    90bc:	b0 95       	com	r27
    90be:	a0 95       	com	r26
    90c0:	90 95       	com	r25
    90c2:	81 95       	neg	r24
    90c4:	9f 4f       	sbci	r25, 0xFF	; 255
    90c6:	af 4f       	sbci	r26, 0xFF	; 255
    90c8:	bf 4f       	sbci	r27, 0xFF	; 255
    90ca:	f8 01       	movw	r30, r16
    90cc:	40 81       	ld	r20, Z
    90ce:	51 81       	ldd	r21, Z+1	; 0x01
    90d0:	62 81       	ldd	r22, Z+2	; 0x02
    90d2:	73 81       	ldd	r23, Z+3	; 0x03
    90d4:	48 17       	cp	r20, r24
    90d6:	59 07       	cpc	r21, r25
    90d8:	6a 07       	cpc	r22, r26
    90da:	7b 07       	cpc	r23, r27
    90dc:	24 f4       	brge	.+8      	; 0x90e6 <Sensor_PID+0x4a4>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    90de:	80 83       	st	Z, r24
    90e0:	91 83       	std	Z+1, r25	; 0x01
    90e2:	a2 83       	std	Z+2, r26	; 0x02
    90e4:	b3 83       	std	Z+3, r27	; 0x03
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    90e6:	ec a1       	ldd	r30, Y+36	; 0x24
    90e8:	fd a1       	ldd	r31, Y+37	; 0x25
    90ea:	81 91       	ld	r24, Z+
    90ec:	91 91       	ld	r25, Z+
    90ee:	a1 91       	ld	r26, Z+
    90f0:	b1 91       	ld	r27, Z+
    90f2:	fd a3       	std	Y+37, r31	; 0x25
    90f4:	ec a3       	std	Y+36, r30	; 0x24
    90f6:	f8 01       	movw	r30, r16
    90f8:	44 85       	ldd	r20, Z+12	; 0x0c
    90fa:	55 85       	ldd	r21, Z+13	; 0x0d
    90fc:	66 85       	ldd	r22, Z+14	; 0x0e
    90fe:	77 85       	ldd	r23, Z+15	; 0x0f
    9100:	84 17       	cp	r24, r20
    9102:	95 07       	cpc	r25, r21
    9104:	a6 07       	cpc	r26, r22
    9106:	b7 07       	cpc	r27, r23
    9108:	24 f4       	brge	.+8      	; 0x9112 <Sensor_PID+0x4d0>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    910a:	84 87       	std	Z+12, r24	; 0x0c
    910c:	95 87       	std	Z+13, r25	; 0x0d
    910e:	a6 87       	std	Z+14, r26	; 0x0e
    9110:	b7 87       	std	Z+15, r27	; 0x0f
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    9112:	b0 95       	com	r27
    9114:	a0 95       	com	r26
    9116:	90 95       	com	r25
    9118:	81 95       	neg	r24
    911a:	9f 4f       	sbci	r25, 0xFF	; 255
    911c:	af 4f       	sbci	r26, 0xFF	; 255
    911e:	bf 4f       	sbci	r27, 0xFF	; 255
    9120:	f8 01       	movw	r30, r16
    9122:	44 85       	ldd	r20, Z+12	; 0x0c
    9124:	55 85       	ldd	r21, Z+13	; 0x0d
    9126:	66 85       	ldd	r22, Z+14	; 0x0e
    9128:	77 85       	ldd	r23, Z+15	; 0x0f
    912a:	48 17       	cp	r20, r24
    912c:	59 07       	cpc	r21, r25
    912e:	6a 07       	cpc	r22, r26
    9130:	7b 07       	cpc	r23, r27
    9132:	24 f4       	brge	.+8      	; 0x913c <Sensor_PID+0x4fa>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    9134:	84 87       	std	Z+12, r24	; 0x0c
    9136:	95 87       	std	Z+13, r25	; 0x0d
    9138:	a6 87       	std	Z+14, r26	; 0x0e
    913a:	b7 87       	std	Z+15, r27	; 0x0f

		//************************************************************
		// Sum gyro readings for P-terms for later averaging
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
    913c:	a4 01       	movw	r20, r8
    913e:	66 27       	eor	r22, r22
    9140:	57 fd       	sbrc	r21, 7
    9142:	60 95       	com	r22
    9144:	76 2f       	mov	r23, r22
    9146:	ee 89       	ldd	r30, Y+22	; 0x16
    9148:	ff 89       	ldd	r31, Y+23	; 0x17
    914a:	80 81       	ld	r24, Z
    914c:	91 81       	ldd	r25, Z+1	; 0x01
    914e:	a2 81       	ldd	r26, Z+2	; 0x02
    9150:	b3 81       	ldd	r27, Z+3	; 0x03
    9152:	84 0f       	add	r24, r20
    9154:	95 1f       	adc	r25, r21
    9156:	a6 1f       	adc	r26, r22
    9158:	b7 1f       	adc	r27, r23
    915a:	81 93       	st	Z+, r24
    915c:	91 93       	st	Z+, r25
    915e:	a1 93       	st	Z+, r26
    9160:	b1 93       	st	Z+, r27
    9162:	ff 8b       	std	Y+23, r31	; 0x17
    9164:	ee 8b       	std	Y+22, r30	; 0x16
    9166:	fd 89       	ldd	r31, Y+21	; 0x15
    9168:	ff 5f       	subi	r31, 0xFF	; 255
    916a:	fd 8b       	std	Y+21, r31	; 0x15
    916c:	0c 5f       	subi	r16, 0xFC	; 252
    916e:	1f 4f       	sbci	r17, 0xFF	; 255
    9170:	24 e0       	ldi	r18, 0x04	; 4
    9172:	22 0e       	add	r2, r18
    9174:	31 1c       	adc	r3, r1
    9176:	49 89       	ldd	r20, Y+17	; 0x11
    9178:	5a 89       	ldd	r21, Y+18	; 0x12
    917a:	4e 5f       	subi	r20, 0xFE	; 254
    917c:	5f 4f       	sbci	r21, 0xFF	; 255
    917e:	5a 8b       	std	Y+18, r21	; 0x12
    9180:	49 8b       	std	Y+17, r20	; 0x11
			GyroAvgNoise = 999.0f;
		}

	}

	for (axis = 0; axis <= YAW; axis ++)
    9182:	f3 30       	cpi	r31, 0x03	; 3
    9184:	09 f0       	breq	.+2      	; 0x9188 <Sensor_PID+0x546>
    9186:	a7 ce       	rjmp	.-690    	; 0x8ed6 <Sensor_PID+0x294>
		PID_AvgGyro[axis] += gyroADC[axis];
	
	} // for (axis = 0; axis <= YAW; axis ++)
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    9188:	40 91 16 05 	lds	r20, 0x0516
    918c:	50 91 17 05 	lds	r21, 0x0517
    9190:	66 27       	eor	r22, r22
    9192:	57 fd       	sbrc	r21, 7
    9194:	60 95       	com	r22
    9196:	76 2f       	mov	r23, r22
    9198:	80 91 48 05 	lds	r24, 0x0548
    919c:	90 91 49 05 	lds	r25, 0x0549
    91a0:	a0 91 4a 05 	lds	r26, 0x054A
    91a4:	b0 91 4b 05 	lds	r27, 0x054B
    91a8:	84 0f       	add	r24, r20
    91aa:	95 1f       	adc	r25, r21
    91ac:	a6 1f       	adc	r26, r22
    91ae:	b7 1f       	adc	r27, r23
    91b0:	80 93 48 05 	sts	0x0548, r24
    91b4:	90 93 49 05 	sts	0x0549, r25
    91b8:	a0 93 4a 05 	sts	0x054A, r26
    91bc:	b0 93 4b 05 	sts	0x054B, r27
}
    91c0:	a9 96       	adiw	r28, 0x29	; 41
    91c2:	0f b6       	in	r0, 0x3f	; 63
    91c4:	f8 94       	cli
    91c6:	de bf       	out	0x3e, r29	; 62
    91c8:	0f be       	out	0x3f, r0	; 63
    91ca:	cd bf       	out	0x3d, r28	; 61
    91cc:	df 91       	pop	r29
    91ce:	cf 91       	pop	r28
    91d0:	1f 91       	pop	r17
    91d2:	0f 91       	pop	r16
    91d4:	ff 90       	pop	r15
    91d6:	ef 90       	pop	r14
    91d8:	df 90       	pop	r13
    91da:	cf 90       	pop	r12
    91dc:	bf 90       	pop	r11
    91de:	af 90       	pop	r10
    91e0:	9f 90       	pop	r9
    91e2:	8f 90       	pop	r8
    91e4:	7f 90       	pop	r7
    91e6:	6f 90       	pop	r6
    91e8:	5f 90       	pop	r5
    91ea:	4f 90       	pop	r4
    91ec:	3f 90       	pop	r3
    91ee:	2f 90       	pop	r2
    91f0:	08 95       	ret

000091f2 <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    91f2:	2f 92       	push	r2
    91f4:	3f 92       	push	r3
    91f6:	4f 92       	push	r4
    91f8:	5f 92       	push	r5
    91fa:	6f 92       	push	r6
    91fc:	7f 92       	push	r7
    91fe:	8f 92       	push	r8
    9200:	9f 92       	push	r9
    9202:	af 92       	push	r10
    9204:	bf 92       	push	r11
    9206:	cf 92       	push	r12
    9208:	df 92       	push	r13
    920a:	ef 92       	push	r14
    920c:	ff 92       	push	r15
    920e:	0f 93       	push	r16
    9210:	1f 93       	push	r17
    9212:	cf 93       	push	r28
    9214:	df 93       	push	r29
    9216:	cd b7       	in	r28, 0x3d	; 61
    9218:	de b7       	in	r29, 0x3e	; 62
    921a:	cd 54       	subi	r28, 0x4D	; 77
    921c:	d1 09       	sbc	r29, r1
    921e:	0f b6       	in	r0, 0x3f	; 63
    9220:	f8 94       	cli
    9222:	de bf       	out	0x3e, r29	; 62
    9224:	0f be       	out	0x3f, r0	; 63
    9226:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    9228:	80 91 09 06 	lds	r24, 0x0609
    922c:	8d 8b       	std	Y+21, r24	; 0x15
    922e:	80 91 0f 06 	lds	r24, 0x060F
    9232:	8e 8b       	std	Y+22, r24	; 0x16
    9234:	80 91 15 06 	lds	r24, 0x0615
    9238:	8f 8b       	std	Y+23, r24	; 0x17
    923a:	80 91 1b 06 	lds	r24, 0x061B
    923e:	88 8f       	std	Y+24, r24	; 0x18
    9240:	80 91 21 06 	lds	r24, 0x0621
    9244:	89 8f       	std	Y+25, r24	; 0x19
    9246:	80 91 27 06 	lds	r24, 0x0627
    924a:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    924c:	80 91 0a 06 	lds	r24, 0x060A
    9250:	8f 87       	std	Y+15, r24	; 0x0f
    9252:	80 91 10 06 	lds	r24, 0x0610
    9256:	88 8b       	std	Y+16, r24	; 0x10
    9258:	80 91 16 06 	lds	r24, 0x0616
    925c:	89 8b       	std	Y+17, r24	; 0x11
    925e:	80 91 1c 06 	lds	r24, 0x061C
    9262:	8a 8b       	std	Y+18, r24	; 0x12
    9264:	80 91 22 06 	lds	r24, 0x0622
    9268:	8b 8b       	std	Y+19, r24	; 0x13
    926a:	80 91 28 06 	lds	r24, 0x0628
    926e:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    9270:	80 91 0d 06 	lds	r24, 0x060D
    9274:	89 87       	std	Y+9, r24	; 0x09
    9276:	80 91 13 06 	lds	r24, 0x0613
    927a:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    927c:	20 91 1a 06 	lds	r18, 0x061A
    9280:	2d a7       	std	Y+45, r18	; 0x2d
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    9282:	2b 87       	std	Y+11, r18	; 0x0b
    9284:	80 91 1f 06 	lds	r24, 0x061F
    9288:	8c 87       	std	Y+12, r24	; 0x0c
    928a:	80 91 25 06 	lds	r24, 0x0625
    928e:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    9290:	30 91 2c 06 	lds	r19, 0x062C
    9294:	3e a7       	std	Y+46, r19	; 0x2e
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    9296:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    9298:	80 91 d6 07 	lds	r24, 0x07D6
    929c:	90 91 d7 07 	lds	r25, 0x07D7
    92a0:	9a 83       	std	Y+2, r25	; 0x02
    92a2:	89 83       	std	Y+1, r24	; 0x01
    92a4:	80 91 da 07 	lds	r24, 0x07DA
    92a8:	90 91 db 07 	lds	r25, 0x07DB
    92ac:	9c 83       	std	Y+4, r25	; 0x04
    92ae:	8b 83       	std	Y+3, r24	; 0x03
    92b0:	80 91 d8 07 	lds	r24, 0x07D8
    92b4:	90 91 d9 07 	lds	r25, 0x07D9
    92b8:	9e 83       	std	Y+6, r25	; 0x06
    92ba:	8d 83       	std	Y+5, r24	; 0x05
    92bc:	80 91 dc 07 	lds	r24, 0x07DC
    92c0:	90 91 dd 07 	lds	r25, 0x07DD
    92c4:	98 87       	std	Y+8, r25	; 0x08
    92c6:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    92c8:	20 91 18 05 	lds	r18, 0x0518
    92cc:	30 e0       	ldi	r19, 0x00	; 0
    92ce:	40 e0       	ldi	r20, 0x00	; 0
    92d0:	50 e0       	ldi	r21, 0x00	; 0
    92d2:	60 91 48 05 	lds	r22, 0x0548
    92d6:	70 91 49 05 	lds	r23, 0x0549
    92da:	80 91 4a 05 	lds	r24, 0x054A
    92de:	90 91 4b 05 	lds	r25, 0x054B
    92e2:	0e 94 2e 51 	call	0xa25c	; 0xa25c <__divmodsi4>
    92e6:	2d 96       	adiw	r28, 0x0d	; 13
    92e8:	2c af       	std	Y+60, r18	; 0x3c
    92ea:	3d af       	std	Y+61, r19	; 0x3d
    92ec:	4e af       	std	Y+62, r20	; 0x3e
    92ee:	5f af       	std	Y+63, r21	; 0x3f
    92f0:	2d 97       	sbiw	r28, 0x0d	; 13
	PID_AvgAccVert = 0;							// Reset average
    92f2:	10 92 48 05 	sts	0x0548, r1
    92f6:	10 92 49 05 	sts	0x0549, r1
    92fa:	10 92 4a 05 	sts	0x054A, r1
    92fe:	10 92 4b 05 	sts	0x054B, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    9302:	80 91 19 06 	lds	r24, 0x0619
    9306:	40 e4       	ldi	r20, 0x40	; 64
    9308:	84 02       	muls	r24, r20
    930a:	c0 01       	movw	r24, r0
    930c:	11 24       	eor	r1, r1
    930e:	9c 01       	movw	r18, r24
    9310:	44 27       	eor	r20, r20
    9312:	37 fd       	sbrc	r19, 7
    9314:	40 95       	com	r20
    9316:	54 2f       	mov	r21, r20
    9318:	29 af       	std	Y+57, r18	; 0x39
    931a:	3a af       	std	Y+58, r19	; 0x3a
    931c:	4b af       	std	Y+59, r20	; 0x3b
    931e:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    9320:	80 91 2b 06 	lds	r24, 0x062B
    9324:	30 e4       	ldi	r19, 0x40	; 64
    9326:	83 02       	muls	r24, r19
    9328:	c0 01       	movw	r24, r0
    932a:	11 24       	eor	r1, r1
    932c:	9c 01       	movw	r18, r24
    932e:	44 27       	eor	r20, r20
    9330:	37 fd       	sbrc	r19, 7
    9332:	40 95       	com	r20
    9334:	54 2f       	mov	r21, r20
    9336:	21 96       	adiw	r28, 0x01	; 1
    9338:	2c af       	std	Y+60, r18	; 0x3c
    933a:	3d af       	std	Y+61, r19	; 0x3d
    933c:	4e af       	std	Y+62, r20	; 0x3e
    933e:	5f af       	std	Y+63, r21	; 0x3f
    9340:	21 97       	sbiw	r28, 0x01	; 1
    9342:	42 e7       	ldi	r20, 0x72	; 114
    9344:	58 e0       	ldi	r21, 0x08	; 8
    9346:	5e a3       	std	Y+38, r21	; 0x26
    9348:	4d a3       	std	Y+37, r20	; 0x25
    934a:	83 e9       	ldi	r24, 0x93	; 147
    934c:	95 e0       	ldi	r25, 0x05	; 5
    934e:	98 af       	std	Y+56, r25	; 0x38
    9350:	8f ab       	std	Y+55, r24	; 0x37
    9352:	aa e5       	ldi	r26, 0x5A	; 90
    9354:	b8 e0       	ldi	r27, 0x08	; 8
    9356:	bc a3       	std	Y+36, r27	; 0x24
    9358:	ab a3       	std	Y+35, r26	; 0x23
    935a:	e7 eb       	ldi	r30, 0xB7	; 183
    935c:	f5 e0       	ldi	r31, 0x05	; 5
    935e:	f8 a7       	std	Y+40, r31	; 0x28
    9360:	ef a3       	std	Y+39, r30	; 0x27
    9362:	9e 01       	movw	r18, r28
    9364:	2f 5f       	subi	r18, 0xFF	; 255
    9366:	3f 4f       	sbci	r19, 0xFF	; 255
    9368:	3a a3       	std	Y+34, r19	; 0x22
    936a:	29 a3       	std	Y+33, r18	; 0x21
    936c:	46 e6       	ldi	r20, 0x66	; 102
    936e:	58 e0       	ldi	r21, 0x08	; 8
    9370:	58 a3       	std	Y+32, r21	; 0x20
    9372:	4f 8f       	std	Y+31, r20	; 0x1f
    9374:	1e 01       	movw	r2, r28
    9376:	5c e0       	ldi	r21, 0x0C	; 12
    9378:	25 0e       	add	r2, r21
    937a:	31 1c       	adc	r3, r1
    937c:	89 e3       	ldi	r24, 0x39	; 57
    937e:	96 e0       	ldi	r25, 0x06	; 6
    9380:	9c a7       	std	Y+44, r25	; 0x2c
    9382:	8b a7       	std	Y+43, r24	; 0x2b
    9384:	de 01       	movw	r26, r28
    9386:	55 96       	adiw	r26, 0x15	; 21
    9388:	ba a7       	std	Y+42, r27	; 0x2a
    938a:	a9 a7       	std	Y+41, r26	; 0x29
    938c:	4a e2       	ldi	r20, 0x2A	; 42
    938e:	c4 2e       	mov	r12, r20
    9390:	48 e0       	ldi	r20, 0x08	; 8
    9392:	d4 2e       	mov	r13, r20
    9394:	fe 01       	movw	r30, r28
    9396:	3f 96       	adiw	r30, 0x0f	; 15
    9398:	fe ab       	std	Y+54, r31	; 0x36
    939a:	ed ab       	std	Y+53, r30	; 0x35
    939c:	29 5e       	subi	r18, 0xE9	; 233
    939e:	3f 4f       	sbci	r19, 0xFF	; 255
    93a0:	38 ab       	std	Y+48, r19	; 0x30
    93a2:	2f a7       	std	Y+47, r18	; 0x2f
    93a4:	ae 01       	movw	r20, r28
    93a6:	4e 5e       	subi	r20, 0xEE	; 238
    93a8:	5f 4f       	sbci	r21, 0xFF	; 255
    93aa:	5a ab       	std	Y+50, r21	; 0x32
    93ac:	49 ab       	std	Y+49, r20	; 0x31
    93ae:	8d e2       	ldi	r24, 0x2D	; 45
    93b0:	96 e0       	ldi	r25, 0x06	; 6
    93b2:	9c ab       	std	Y+52, r25	; 0x34
    93b4:	8b ab       	std	Y+51, r24	; 0x33
    93b6:	e1 2c       	mov	r14, r1
    93b8:	f1 2c       	mov	r15, r1
	{
		//************************************************************
		// Get average gyro readings for P-terms
		//************************************************************

		gyroADC[axis] = (int16_t)(PID_AvgGyro[axis] / LoopCount);
    93ba:	20 91 18 05 	lds	r18, 0x0518
    93be:	30 e0       	ldi	r19, 0x00	; 0
    93c0:	40 e0       	ldi	r20, 0x00	; 0
    93c2:	50 e0       	ldi	r21, 0x00	; 0
    93c4:	ad a1       	ldd	r26, Y+37	; 0x25
    93c6:	be a1       	ldd	r27, Y+38	; 0x26
    93c8:	6d 91       	ld	r22, X+
    93ca:	7d 91       	ld	r23, X+
    93cc:	8d 91       	ld	r24, X+
    93ce:	9c 91       	ld	r25, X
    93d0:	0e 94 2e 51 	call	0xa25c	; 0xa25c <__divmodsi4>
    93d4:	2b 8f       	std	Y+27, r18	; 0x1b
    93d6:	3c 8f       	std	Y+28, r19	; 0x1c
    93d8:	4d 8f       	std	Y+29, r20	; 0x1d
    93da:	5e 8f       	std	Y+30, r21	; 0x1e
    93dc:	ef a9       	ldd	r30, Y+55	; 0x37
    93de:	f8 ad       	ldd	r31, Y+56	; 0x38
    93e0:	21 93       	st	Z+, r18
    93e2:	31 93       	st	Z+, r19
    93e4:	f8 af       	std	Y+56, r31	; 0x38
    93e6:	ef ab       	std	Y+55, r30	; 0x37
		PID_AvgGyro[axis] = 0;					// Reset average
    93e8:	ad a1       	ldd	r26, Y+37	; 0x25
    93ea:	be a1       	ldd	r27, Y+38	; 0x26
    93ec:	1d 92       	st	X+, r1
    93ee:	1d 92       	st	X+, r1
    93f0:	1d 92       	st	X+, r1
    93f2:	1c 92       	st	X, r1
    93f4:	13 97       	sbiw	r26, 0x03	; 3
    93f6:	2e 96       	adiw	r28, 0x0e	; 14
    93f8:	ef ae       	std	Y+63, r14	; 0x3f
    93fa:	2e 97       	sbiw	r28, 0x0e	; 14

		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    93fc:	ee 2d       	mov	r30, r14
    93fe:	e2 30       	cpi	r30, 0x02	; 2
    9400:	39 f0       	breq	.+14     	; 0x9410 <Calculate_PID+0x21e>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    9402:	81 2c       	mov	r8, r1
    9404:	91 2c       	mov	r9, r1
    9406:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    9408:	41 2c       	mov	r4, r1
    940a:	51 2c       	mov	r5, r1
    940c:	32 01       	movw	r6, r4
    940e:	0a c0       	rjmp	.+20     	; 0x9424 <Calculate_PID+0x232>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    9410:	21 96       	adiw	r28, 0x01	; 1
    9412:	8c ac       	ldd	r8, Y+60	; 0x3c
    9414:	9d ac       	ldd	r9, Y+61	; 0x3d
    9416:	ae ac       	ldd	r10, Y+62	; 0x3e
    9418:	bf ac       	ldd	r11, Y+63	; 0x3f
    941a:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    941c:	49 ac       	ldd	r4, Y+57	; 0x39
    941e:	5a ac       	ldd	r5, Y+58	; 0x3a
    9420:	6b ac       	ldd	r6, Y+59	; 0x3b
    9422:	7c ac       	ldd	r7, Y+60	; 0x3c
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    9424:	a9 a5       	ldd	r26, Y+41	; 0x29
    9426:	ba a5       	ldd	r27, Y+42	; 0x2a
    9428:	2d 91       	ld	r18, X+
    942a:	ba a7       	std	Y+42, r27	; 0x2a
    942c:	a9 a7       	std	Y+41, r26	; 0x29
    942e:	33 27       	eor	r19, r19
    9430:	27 fd       	sbrc	r18, 7
    9432:	30 95       	com	r19
    9434:	eb 8d       	ldd	r30, Y+27	; 0x1b
    9436:	fc 8d       	ldd	r31, Y+28	; 0x1c
    9438:	2e 9f       	mul	r18, r30
    943a:	c0 01       	movw	r24, r0
    943c:	2f 9f       	mul	r18, r31
    943e:	90 0d       	add	r25, r0
    9440:	3e 9f       	mul	r19, r30
    9442:	90 0d       	add	r25, r0
    9444:	11 24       	eor	r1, r1
    9446:	9c 01       	movw	r18, r24
    9448:	44 27       	eor	r20, r20
    944a:	37 fd       	sbrc	r19, 7
    944c:	40 95       	com	r20
    944e:	54 2f       	mov	r21, r20
    9450:	24 0d       	add	r18, r4
    9452:	35 1d       	adc	r19, r5
    9454:	46 1d       	adc	r20, r6
    9456:	57 1d       	adc	r21, r7
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    9458:	a3 e0       	ldi	r26, 0x03	; 3
    945a:	b0 e0       	ldi	r27, 0x00	; 0
    945c:	0e 94 71 51 	call	0xa2e2	; 0xa2e2 <__muluhisi3>
    9460:	25 96       	adiw	r28, 0x05	; 5
    9462:	6c af       	std	Y+60, r22	; 0x3c
    9464:	7d af       	std	Y+61, r23	; 0x3d
    9466:	8e af       	std	Y+62, r24	; 0x3e
    9468:	9f af       	std	Y+63, r25	; 0x3f
    946a:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    946c:	ad a9       	ldd	r26, Y+53	; 0x35
    946e:	be a9       	ldd	r27, Y+54	; 0x36
    9470:	8d 91       	ld	r24, X+
    9472:	be ab       	std	Y+54, r27	; 0x36
    9474:	ad ab       	std	Y+53, r26	; 0x35
    9476:	f6 01       	movw	r30, r12
    9478:	20 81       	ld	r18, Z
    947a:	31 81       	ldd	r19, Z+1	; 0x01
    947c:	42 81       	ldd	r20, Z+2	; 0x02
    947e:	53 81       	ldd	r21, Z+3	; 0x03
    9480:	a8 2f       	mov	r26, r24
    9482:	bb 27       	eor	r27, r27
    9484:	a7 fd       	sbrc	r26, 7
    9486:	b0 95       	com	r27
    9488:	0e 94 7c 51 	call	0xa2f8	; 0xa2f8 <__mulshisi3>
    948c:	2b 01       	movw	r4, r22
    948e:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    9490:	05 e0       	ldi	r16, 0x05	; 5
    9492:	75 94       	asr	r7
    9494:	67 94       	ror	r6
    9496:	57 94       	ror	r5
    9498:	47 94       	ror	r4
    949a:	0a 95       	dec	r16
    949c:	d1 f7       	brne	.-12     	; 0x9492 <Calculate_PID+0x2a0>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    949e:	af a5       	ldd	r26, Y+47	; 0x2f
    94a0:	b8 a9       	ldd	r27, Y+48	; 0x30
    94a2:	8d 91       	ld	r24, X+
    94a4:	b8 ab       	std	Y+48, r27	; 0x30
    94a6:	af a7       	std	Y+47, r26	; 0x2f
    94a8:	99 27       	eor	r25, r25
    94aa:	87 fd       	sbrc	r24, 7
    94ac:	90 95       	com	r25
    94ae:	eb 8d       	ldd	r30, Y+27	; 0x1b
    94b0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    94b2:	8e 9f       	mul	r24, r30
    94b4:	90 01       	movw	r18, r0
    94b6:	8f 9f       	mul	r24, r31
    94b8:	30 0d       	add	r19, r0
    94ba:	9e 9f       	mul	r25, r30
    94bc:	30 0d       	add	r19, r0
    94be:	11 24       	eor	r1, r1
    94c0:	44 27       	eor	r20, r20
    94c2:	37 fd       	sbrc	r19, 7
    94c4:	40 95       	com	r20
    94c6:	54 2f       	mov	r21, r20
    94c8:	28 0d       	add	r18, r8
    94ca:	39 1d       	adc	r19, r9
    94cc:	4a 1d       	adc	r20, r10
    94ce:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    94d0:	a3 e0       	ldi	r26, 0x03	; 3
    94d2:	b0 e0       	ldi	r27, 0x00	; 0
    94d4:	0e 94 71 51 	call	0xa2e2	; 0xa2e2 <__muluhisi3>
    94d8:	29 96       	adiw	r28, 0x09	; 9
    94da:	6c af       	std	Y+60, r22	; 0x3c
    94dc:	7d af       	std	Y+61, r23	; 0x3d
    94de:	8e af       	std	Y+62, r24	; 0x3e
    94e0:	9f af       	std	Y+63, r25	; 0x3f
    94e2:	29 97       	sbiw	r28, 0x09	; 9

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    94e4:	a9 a9       	ldd	r26, Y+49	; 0x31
    94e6:	ba a9       	ldd	r27, Y+50	; 0x32
    94e8:	8d 91       	ld	r24, X+
    94ea:	ba ab       	std	Y+50, r27	; 0x32
    94ec:	a9 ab       	std	Y+49, r26	; 0x31
    94ee:	f6 01       	movw	r30, r12
    94f0:	24 85       	ldd	r18, Z+12	; 0x0c
    94f2:	35 85       	ldd	r19, Z+13	; 0x0d
    94f4:	46 85       	ldd	r20, Z+14	; 0x0e
    94f6:	57 85       	ldd	r21, Z+15	; 0x0f
    94f8:	a8 2f       	mov	r26, r24
    94fa:	bb 27       	eor	r27, r27
    94fc:	a7 fd       	sbrc	r26, 7
    94fe:	b0 95       	com	r27
    9500:	0e 94 7c 51 	call	0xa2f8	; 0xa2f8 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    9504:	25 e0       	ldi	r18, 0x05	; 5
    9506:	95 95       	asr	r25
    9508:	87 95       	ror	r24
    950a:	77 95       	ror	r23
    950c:	67 95       	ror	r22
    950e:	2a 95       	dec	r18
    9510:	d1 f7       	brne	.-12     	; 0x9506 <Calculate_PID+0x314>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    9512:	ab a9       	ldd	r26, Y+51	; 0x33
    9514:	bc a9       	ldd	r27, Y+52	; 0x34
    9516:	8d 90       	ld	r8, X+
    9518:	9d 90       	ld	r9, X+
    951a:	ad 90       	ld	r10, X+
    951c:	bd 90       	ld	r11, X+
    951e:	bc ab       	std	Y+52, r27	; 0x34
    9520:	ab ab       	std	Y+51, r26	; 0x33
    9522:	84 14       	cp	r8, r4
    9524:	95 04       	cpc	r9, r5
    9526:	a6 04       	cpc	r10, r6
    9528:	b7 04       	cpc	r11, r7
    952a:	84 f0       	brlt	.+32     	; 0x954c <Calculate_PID+0x35a>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    952c:	00 27       	eor	r16, r16
    952e:	11 27       	eor	r17, r17
    9530:	98 01       	movw	r18, r16
    9532:	08 19       	sub	r16, r8
    9534:	19 09       	sbc	r17, r9
    9536:	2a 09       	sbc	r18, r10
    9538:	3b 09       	sbc	r19, r11
    953a:	53 01       	movw	r10, r6
    953c:	42 01       	movw	r8, r4
    953e:	40 16       	cp	r4, r16
    9540:	51 06       	cpc	r5, r17
    9542:	62 06       	cpc	r6, r18
    9544:	73 06       	cpc	r7, r19
    9546:	14 f4       	brge	.+4      	; 0x954c <Calculate_PID+0x35a>
    9548:	48 01       	movw	r8, r16
    954a:	59 01       	movw	r10, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    954c:	ab a5       	ldd	r26, Y+43	; 0x2b
    954e:	bc a5       	ldd	r27, Y+44	; 0x2c
    9550:	2d 91       	ld	r18, X+
    9552:	3d 91       	ld	r19, X+
    9554:	4d 91       	ld	r20, X+
    9556:	5d 91       	ld	r21, X+
    9558:	bc a7       	std	Y+44, r27	; 0x2c
    955a:	ab a7       	std	Y+43, r26	; 0x2b
    955c:	2b 8f       	std	Y+27, r18	; 0x1b
    955e:	3c 8f       	std	Y+28, r19	; 0x1c
    9560:	4d 8f       	std	Y+29, r20	; 0x1d
    9562:	5e 8f       	std	Y+30, r21	; 0x1e
    9564:	26 17       	cp	r18, r22
    9566:	37 07       	cpc	r19, r23
    9568:	48 07       	cpc	r20, r24
    956a:	59 07       	cpc	r21, r25
    956c:	b4 f0       	brlt	.+44     	; 0x959a <Calculate_PID+0x3a8>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    956e:	89 01       	movw	r16, r18
    9570:	9a 01       	movw	r18, r20
    9572:	30 95       	com	r19
    9574:	20 95       	com	r18
    9576:	10 95       	com	r17
    9578:	01 95       	neg	r16
    957a:	1f 4f       	sbci	r17, 0xFF	; 255
    957c:	2f 4f       	sbci	r18, 0xFF	; 255
    957e:	3f 4f       	sbci	r19, 0xFF	; 255
    9580:	6b 8f       	std	Y+27, r22	; 0x1b
    9582:	7c 8f       	std	Y+28, r23	; 0x1c
    9584:	8d 8f       	std	Y+29, r24	; 0x1d
    9586:	9e 8f       	std	Y+30, r25	; 0x1e
    9588:	60 17       	cp	r22, r16
    958a:	71 07       	cpc	r23, r17
    958c:	82 07       	cpc	r24, r18
    958e:	93 07       	cpc	r25, r19
    9590:	24 f4       	brge	.+8      	; 0x959a <Calculate_PID+0x3a8>
    9592:	0b 8f       	std	Y+27, r16	; 0x1b
    9594:	1c 8f       	std	Y+28, r17	; 0x1c
    9596:	2d 8f       	std	Y+29, r18	; 0x1d
    9598:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE); // Currently PID_SCALE = 6 so /64
    959a:	25 96       	adiw	r28, 0x05	; 5
    959c:	4c ac       	ldd	r4, Y+60	; 0x3c
    959e:	5d ac       	ldd	r5, Y+61	; 0x3d
    95a0:	6e ac       	ldd	r6, Y+62	; 0x3e
    95a2:	7f ac       	ldd	r7, Y+63	; 0x3f
    95a4:	25 97       	sbiw	r28, 0x05	; 5
    95a6:	48 0c       	add	r4, r8
    95a8:	59 1c       	adc	r5, r9
    95aa:	6a 1c       	adc	r6, r10
    95ac:	7b 1c       	adc	r7, r11
    95ae:	b6 e0       	ldi	r27, 0x06	; 6
    95b0:	75 94       	asr	r7
    95b2:	67 94       	ror	r6
    95b4:	57 94       	ror	r5
    95b6:	47 94       	ror	r4
    95b8:	ba 95       	dec	r27
    95ba:	d1 f7       	brne	.-12     	; 0x95b0 <Calculate_PID+0x3be>
    95bc:	eb a1       	ldd	r30, Y+35	; 0x23
    95be:	fc a1       	ldd	r31, Y+36	; 0x24
    95c0:	51 82       	std	Z+1, r5	; 0x01
    95c2:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    95c4:	29 96       	adiw	r28, 0x09	; 9
    95c6:	8c ad       	ldd	r24, Y+60	; 0x3c
    95c8:	9d ad       	ldd	r25, Y+61	; 0x3d
    95ca:	ae ad       	ldd	r26, Y+62	; 0x3e
    95cc:	bf ad       	ldd	r27, Y+63	; 0x3f
    95ce:	29 97       	sbiw	r28, 0x09	; 9
    95d0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    95d2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    95d4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    95d6:	5e 8d       	ldd	r21, Y+30	; 0x1e
    95d8:	82 0f       	add	r24, r18
    95da:	93 1f       	adc	r25, r19
    95dc:	a4 1f       	adc	r26, r20
    95de:	b5 1f       	adc	r27, r21
    95e0:	16 e0       	ldi	r17, 0x06	; 6
    95e2:	b5 95       	asr	r27
    95e4:	a7 95       	ror	r26
    95e6:	97 95       	ror	r25
    95e8:	87 95       	ror	r24
    95ea:	1a 95       	dec	r17
    95ec:	d1 f7       	brne	.-12     	; 0x95e2 <Calculate_PID+0x3f0>
    95ee:	97 83       	std	Z+7, r25	; 0x07
    95f0:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    95f2:	2e 96       	adiw	r28, 0x0e	; 14
    95f4:	ef ad       	ldd	r30, Y+63	; 0x3f
    95f6:	2e 97       	sbiw	r28, 0x0e	; 14
    95f8:	e2 30       	cpi	r30, 0x02	; 2
    95fa:	d9 f1       	breq	.+118    	; 0x9672 <Calculate_PID+0x480>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    95fc:	af a1       	ldd	r26, Y+39	; 0x27
    95fe:	b8 a5       	ldd	r27, Y+40	; 0x28
    9600:	4d 91       	ld	r20, X+
    9602:	5c 91       	ld	r21, X
    9604:	e9 a1       	ldd	r30, Y+33	; 0x21
    9606:	fa a1       	ldd	r31, Y+34	; 0x22
    9608:	80 81       	ld	r24, Z
    960a:	91 81       	ldd	r25, Z+1	; 0x01
    960c:	9a 01       	movw	r18, r20
    960e:	28 1b       	sub	r18, r24
    9610:	39 0b       	sbc	r19, r25
    9612:	e9 e0       	ldi	r30, 0x09	; 9
    9614:	f0 e0       	ldi	r31, 0x00	; 0
    9616:	ec 0f       	add	r30, r28
    9618:	fd 1f       	adc	r31, r29
    961a:	ee 0d       	add	r30, r14
    961c:	ff 1d       	adc	r31, r15
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    961e:	a0 81       	ld	r26, Z
    9620:	bb 27       	eor	r27, r27
    9622:	a7 fd       	sbrc	r26, 7
    9624:	b0 95       	com	r27
    9626:	0e 94 53 51 	call	0xa2a6	; 0xa2a6 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    962a:	bb 27       	eor	r27, r27
    962c:	97 fd       	sbrc	r25, 7
    962e:	ba 95       	dec	r27
    9630:	a9 2f       	mov	r26, r25
    9632:	98 2f       	mov	r25, r24
    9634:	87 2f       	mov	r24, r23
    9636:	ef 8d       	ldd	r30, Y+31	; 0x1f
    9638:	f8 a1       	ldd	r31, Y+32	; 0x20
    963a:	91 83       	std	Z+1, r25	; 0x01
    963c:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    963e:	a9 a1       	ldd	r26, Y+33	; 0x21
    9640:	ba a1       	ldd	r27, Y+34	; 0x22
    9642:	14 96       	adiw	r26, 0x04	; 4
    9644:	8d 91       	ld	r24, X+
    9646:	9c 91       	ld	r25, X
    9648:	15 97       	sbiw	r26, 0x05	; 5
    964a:	9a 01       	movw	r18, r20
    964c:	28 1b       	sub	r18, r24
    964e:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    9650:	f1 01       	movw	r30, r2
    9652:	a0 81       	ld	r26, Z
    9654:	bb 27       	eor	r27, r27
    9656:	a7 fd       	sbrc	r26, 7
    9658:	b0 95       	com	r27
    965a:	0e 94 53 51 	call	0xa2a6	; 0xa2a6 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    965e:	bb 27       	eor	r27, r27
    9660:	97 fd       	sbrc	r25, 7
    9662:	ba 95       	dec	r27
    9664:	a9 2f       	mov	r26, r25
    9666:	98 2f       	mov	r25, r24
    9668:	87 2f       	mov	r24, r23
    966a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    966c:	f8 a1       	ldd	r31, Y+32	; 0x20
    966e:	97 83       	std	Z+7, r25	; 0x07
    9670:	86 83       	std	Z+6, r24	; 0x06
    9672:	ff ef       	ldi	r31, 0xFF	; 255
    9674:	ef 1a       	sub	r14, r31
    9676:	ff 0a       	sbc	r15, r31
    9678:	2d a1       	ldd	r18, Y+37	; 0x25
    967a:	3e a1       	ldd	r19, Y+38	; 0x26
    967c:	2c 5f       	subi	r18, 0xFC	; 252
    967e:	3f 4f       	sbci	r19, 0xFF	; 255
    9680:	3e a3       	std	Y+38, r19	; 0x26
    9682:	2d a3       	std	Y+37, r18	; 0x25
    9684:	4b a1       	ldd	r20, Y+35	; 0x23
    9686:	5c a1       	ldd	r21, Y+36	; 0x24
    9688:	4e 5f       	subi	r20, 0xFE	; 254
    968a:	5f 4f       	sbci	r21, 0xFF	; 255
    968c:	5c a3       	std	Y+36, r21	; 0x24
    968e:	4b a3       	std	Y+35, r20	; 0x23
    9690:	8f a1       	ldd	r24, Y+39	; 0x27
    9692:	98 a5       	ldd	r25, Y+40	; 0x28
    9694:	02 96       	adiw	r24, 0x02	; 2
    9696:	98 a7       	std	Y+40, r25	; 0x28
    9698:	8f a3       	std	Y+39, r24	; 0x27
    969a:	a9 a1       	ldd	r26, Y+33	; 0x21
    969c:	ba a1       	ldd	r27, Y+34	; 0x22
    969e:	12 96       	adiw	r26, 0x02	; 2
    96a0:	ba a3       	std	Y+34, r27	; 0x22
    96a2:	a9 a3       	std	Y+33, r26	; 0x21
    96a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    96a6:	f8 a1       	ldd	r31, Y+32	; 0x20
    96a8:	32 96       	adiw	r30, 0x02	; 2
    96aa:	f8 a3       	std	Y+32, r31	; 0x20
    96ac:	ef 8f       	std	Y+31, r30	; 0x1f
    96ae:	ff ef       	ldi	r31, 0xFF	; 255
    96b0:	2f 1a       	sub	r2, r31
    96b2:	3f 0a       	sbc	r3, r31
    96b4:	24 e0       	ldi	r18, 0x04	; 4
    96b6:	c2 0e       	add	r12, r18
    96b8:	d1 1c       	adc	r13, r1

	//************************************************************
	// PID loop
	//************************************************************
	
	for (axis = 0; axis <= YAW; axis ++)
    96ba:	33 e0       	ldi	r19, 0x03	; 3
    96bc:	e3 16       	cp	r14, r19
    96be:	f1 04       	cpc	r15, r1
    96c0:	09 f0       	breq	.+2      	; 0x96c4 <Calculate_PID+0x4d2>
    96c2:	7b ce       	rjmp	.-778    	; 0x93ba <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    96c4:	2b 96       	adiw	r28, 0x0b	; 11
    96c6:	ce ac       	ldd	r12, Y+62	; 0x3e
    96c8:	df ac       	ldd	r13, Y+63	; 0x3f
    96ca:	2b 97       	sbiw	r28, 0x0b	; 11
    96cc:	d1 94       	neg	r13
    96ce:	c1 94       	neg	r12
    96d0:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    96d2:	96 01       	movw	r18, r12
    96d4:	4d a5       	ldd	r20, Y+45	; 0x2d
    96d6:	a4 2f       	mov	r26, r20
    96d8:	bb 27       	eor	r27, r27
    96da:	a7 fd       	sbrc	r26, 7
    96dc:	b0 95       	com	r27
    96de:	0e 94 53 51 	call	0xa2a6	; 0xa2a6 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    96e2:	e4 e0       	ldi	r30, 0x04	; 4
    96e4:	95 95       	asr	r25
    96e6:	87 95       	ror	r24
    96e8:	77 95       	ror	r23
    96ea:	67 95       	ror	r22
    96ec:	ea 95       	dec	r30
    96ee:	d1 f7       	brne	.-12     	; 0x96e4 <Calculate_PID+0x4f2>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    96f0:	65 3f       	cpi	r22, 0xF5	; 245
    96f2:	51 e0       	ldi	r21, 0x01	; 1
    96f4:	75 07       	cpc	r23, r21
    96f6:	81 05       	cpc	r24, r1
    96f8:	91 05       	cpc	r25, r1
    96fa:	64 f4       	brge	.+24     	; 0x9714 <Calculate_PID+0x522>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    96fc:	6c 30       	cpi	r22, 0x0C	; 12
    96fe:	ae ef       	ldi	r26, 0xFE	; 254
    9700:	7a 07       	cpc	r23, r26
    9702:	af ef       	ldi	r26, 0xFF	; 255
    9704:	8a 07       	cpc	r24, r26
    9706:	9a 07       	cpc	r25, r26
    9708:	4c f4       	brge	.+18     	; 0x971c <Calculate_PID+0x52a>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    970a:	6c e0       	ldi	r22, 0x0C	; 12
    970c:	7e ef       	ldi	r23, 0xFE	; 254
    970e:	8f ef       	ldi	r24, 0xFF	; 255
    9710:	9f ef       	ldi	r25, 0xFF	; 255
    9712:	04 c0       	rjmp	.+8      	; 0x971c <Calculate_PID+0x52a>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    9714:	64 ef       	ldi	r22, 0xF4	; 244
    9716:	71 e0       	ldi	r23, 0x01	; 1
    9718:	80 e0       	ldi	r24, 0x00	; 0
    971a:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    971c:	70 93 6b 08 	sts	0x086B, r23
    9720:	60 93 6a 08 	sts	0x086A, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    9724:	96 01       	movw	r18, r12
    9726:	ee a5       	ldd	r30, Y+46	; 0x2e
    9728:	ae 2f       	mov	r26, r30
    972a:	bb 27       	eor	r27, r27
    972c:	a7 fd       	sbrc	r26, 7
    972e:	b0 95       	com	r27
    9730:	0e 94 53 51 	call	0xa2a6	; 0xa2a6 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    9734:	54 e0       	ldi	r21, 0x04	; 4
    9736:	95 95       	asr	r25
    9738:	87 95       	ror	r24
    973a:	77 95       	ror	r23
    973c:	67 95       	ror	r22
    973e:	5a 95       	dec	r21
    9740:	d1 f7       	brne	.-12     	; 0x9736 <Calculate_PID+0x544>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    9742:	65 3f       	cpi	r22, 0xF5	; 245
    9744:	f1 e0       	ldi	r31, 0x01	; 1
    9746:	7f 07       	cpc	r23, r31
    9748:	81 05       	cpc	r24, r1
    974a:	91 05       	cpc	r25, r1
    974c:	64 f4       	brge	.+24     	; 0x9766 <Calculate_PID+0x574>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    974e:	6c 30       	cpi	r22, 0x0C	; 12
    9750:	2e ef       	ldi	r18, 0xFE	; 254
    9752:	72 07       	cpc	r23, r18
    9754:	2f ef       	ldi	r18, 0xFF	; 255
    9756:	82 07       	cpc	r24, r18
    9758:	92 07       	cpc	r25, r18
    975a:	4c f4       	brge	.+18     	; 0x976e <Calculate_PID+0x57c>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    975c:	6c e0       	ldi	r22, 0x0C	; 12
    975e:	7e ef       	ldi	r23, 0xFE	; 254
    9760:	8f ef       	ldi	r24, 0xFF	; 255
    9762:	9f ef       	ldi	r25, 0xFF	; 255
    9764:	04 c0       	rjmp	.+8      	; 0x976e <Calculate_PID+0x57c>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    9766:	64 ef       	ldi	r22, 0xF4	; 244
    9768:	71 e0       	ldi	r23, 0x01	; 1
    976a:	80 e0       	ldi	r24, 0x00	; 0
    976c:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    976e:	70 93 71 08 	sts	0x0871, r23
    9772:	60 93 70 08 	sts	0x0870, r22
	}
}
    9776:	c3 5b       	subi	r28, 0xB3	; 179
    9778:	df 4f       	sbci	r29, 0xFF	; 255
    977a:	0f b6       	in	r0, 0x3f	; 63
    977c:	f8 94       	cli
    977e:	de bf       	out	0x3e, r29	; 62
    9780:	0f be       	out	0x3f, r0	; 63
    9782:	cd bf       	out	0x3d, r28	; 61
    9784:	df 91       	pop	r29
    9786:	cf 91       	pop	r28
    9788:	1f 91       	pop	r17
    978a:	0f 91       	pop	r16
    978c:	ff 90       	pop	r15
    978e:	ef 90       	pop	r14
    9790:	df 90       	pop	r13
    9792:	cf 90       	pop	r12
    9794:	bf 90       	pop	r11
    9796:	af 90       	pop	r10
    9798:	9f 90       	pop	r9
    979a:	8f 90       	pop	r8
    979c:	7f 90       	pop	r7
    979e:	6f 90       	pop	r6
    97a0:	5f 90       	pop	r5
    97a2:	4f 90       	pop	r4
    97a4:	3f 90       	pop	r3
    97a6:	2f 90       	pop	r2
    97a8:	08 95       	ret

000097aa <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    97aa:	e1 eb       	ldi	r30, 0xB1	; 177
    97ac:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    97ae:	80 e0       	ldi	r24, 0x00	; 0
    97b0:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    97b2:	ac 01       	movw	r20, r24
    97b4:	44 0f       	add	r20, r20
    97b6:	55 1f       	adc	r21, r21
    97b8:	da 01       	movw	r26, r20
    97ba:	a9 50       	subi	r26, 0x09	; 9
    97bc:	b8 4f       	sbci	r27, 0xF8	; 248
    97be:	2d 91       	ld	r18, X+
    97c0:	3c 91       	ld	r19, X
    97c2:	61 91       	ld	r22, Z+
    97c4:	71 91       	ld	r23, Z+
    97c6:	26 1b       	sub	r18, r22
    97c8:	37 0b       	sbc	r19, r23
    97ca:	da 01       	movw	r26, r20
    97cc:	ac 57       	subi	r26, 0x7C	; 124
    97ce:	b7 4f       	sbci	r27, 0xF7	; 247
    97d0:	11 96       	adiw	r26, 0x01	; 1
    97d2:	3c 93       	st	X, r19
    97d4:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    97d6:	01 96       	adiw	r24, 0x01	; 1
    97d8:	88 30       	cpi	r24, 0x08	; 8
    97da:	91 05       	cpc	r25, r1
    97dc:	51 f7       	brne	.-44     	; 0x97b2 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    97de:	80 91 f7 07 	lds	r24, 0x07F7
    97e2:	90 91 f8 07 	lds	r25, 0x07F8
    97e6:	20 91 b1 07 	lds	r18, 0x07B1
    97ea:	30 91 b2 07 	lds	r19, 0x07B2
    97ee:	82 1b       	sub	r24, r18
    97f0:	93 0b       	sbc	r25, r19
    97f2:	90 93 83 08 	sts	0x0883, r25
    97f6:	80 93 82 08 	sts	0x0882, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    97fa:	80 91 f7 07 	lds	r24, 0x07F7
    97fe:	90 91 f8 07 	lds	r25, 0x07F8
    9802:	86 5a       	subi	r24, 0xA6	; 166
    9804:	9e 40       	sbci	r25, 0x0E	; 14
    9806:	90 93 85 08 	sts	0x0885, r25
    980a:	80 93 84 08 	sts	0x0884, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    980e:	80 91 e0 07 	lds	r24, 0x07E0
    9812:	81 30       	cpi	r24, 0x01	; 1
    9814:	59 f4       	brne	.+22     	; 0x982c <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    9816:	80 91 86 08 	lds	r24, 0x0886
    981a:	90 91 87 08 	lds	r25, 0x0887
    981e:	91 95       	neg	r25
    9820:	81 95       	neg	r24
    9822:	91 09       	sbc	r25, r1
    9824:	90 93 87 08 	sts	0x0887, r25
    9828:	80 93 86 08 	sts	0x0886, r24
	}

	if (Config.ElevatorPol == REVERSED)
    982c:	80 91 08 06 	lds	r24, 0x0608
    9830:	81 30       	cpi	r24, 0x01	; 1
    9832:	59 f4       	brne	.+22     	; 0x984a <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    9834:	80 91 88 08 	lds	r24, 0x0888
    9838:	90 91 89 08 	lds	r25, 0x0889
    983c:	91 95       	neg	r25
    983e:	81 95       	neg	r24
    9840:	91 09       	sbc	r25, r1
    9842:	90 93 89 08 	sts	0x0889, r25
    9846:	80 93 88 08 	sts	0x0888, r24
	}

	if (Config.RudderPol == REVERSED)
    984a:	80 91 df 07 	lds	r24, 0x07DF
    984e:	81 30       	cpi	r24, 0x01	; 1
    9850:	59 f4       	brne	.+22     	; 0x9868 <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    9852:	80 91 8a 08 	lds	r24, 0x088A
    9856:	90 91 8b 08 	lds	r25, 0x088B
    985a:	91 95       	neg	r25
    985c:	81 95       	neg	r24
    985e:	91 09       	sbc	r25, r1
    9860:	90 93 8b 08 	sts	0x088B, r25
    9864:	80 93 8a 08 	sts	0x088A, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    9868:	80 91 86 08 	lds	r24, 0x0886
    986c:	90 91 87 08 	lds	r25, 0x0887
    9870:	40 91 88 08 	lds	r20, 0x0888
    9874:	50 91 89 08 	lds	r21, 0x0889
    9878:	20 91 8a 08 	lds	r18, 0x088A
    987c:	30 91 8b 08 	lds	r19, 0x088B
    9880:	84 0f       	add	r24, r20
    9882:	95 1f       	adc	r25, r21
    9884:	82 0f       	add	r24, r18
    9886:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    9888:	20 91 4c 05 	lds	r18, 0x054C
    988c:	30 91 4d 05 	lds	r19, 0x054D
    9890:	ac 01       	movw	r20, r24
    9892:	42 1b       	sub	r20, r18
    9894:	53 0b       	sbc	r21, r19
    9896:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    9898:	2b 5f       	subi	r18, 0xFB	; 251
    989a:	3f 4f       	sbci	r19, 0xFF	; 255
    989c:	2b 30       	cpi	r18, 0x0B	; 11
    989e:	31 05       	cpc	r19, r1
    98a0:	38 f4       	brcc	.+14     	; 0x98b0 <RxGetChannels+0x106>
    98a2:	20 91 82 08 	lds	r18, 0x0882
    98a6:	30 91 83 08 	lds	r19, 0x0883
    98aa:	23 33       	cpi	r18, 0x33	; 51
    98ac:	31 05       	cpc	r19, r1
    98ae:	24 f0       	brlt	.+8      	; 0x98b8 <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    98b0:	20 91 1f 05 	lds	r18, 0x051F
    98b4:	21 60       	ori	r18, 0x01	; 1
    98b6:	03 c0       	rjmp	.+6      	; 0x98be <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    98b8:	20 91 1f 05 	lds	r18, 0x051F
    98bc:	2e 7f       	andi	r18, 0xFE	; 254
    98be:	20 93 1f 05 	sts	0x051F, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    98c2:	10 92 95 08 	sts	0x0895, r1
    98c6:	10 92 94 08 	sts	0x0894, r1

	OldRxSum = RxSum;
    98ca:	90 93 4d 05 	sts	0x054D, r25
    98ce:	80 93 4c 05 	sts	0x054C, r24
    98d2:	08 95       	ret

000098d4 <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    98d4:	0f 93       	push	r16
    98d6:	1f 93       	push	r17
    98d8:	cf 93       	push	r28
    98da:	df 93       	push	r29
    98dc:	cd b7       	in	r28, 0x3d	; 61
    98de:	de b7       	in	r29, 0x3e	; 62
    98e0:	60 97       	sbiw	r28, 0x10	; 16
    98e2:	0f b6       	in	r0, 0x3f	; 63
    98e4:	f8 94       	cli
    98e6:	de bf       	out	0x3e, r29	; 62
    98e8:	0f be       	out	0x3f, r0	; 63
    98ea:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    98ec:	8e 01       	movw	r16, r28
    98ee:	0f 5f       	subi	r16, 0xFF	; 255
    98f0:	1f 4f       	sbci	r17, 0xFF	; 255
    98f2:	80 e1       	ldi	r24, 0x10	; 16
    98f4:	d8 01       	movw	r26, r16
    98f6:	1d 92       	st	X+, r1
    98f8:	8a 95       	dec	r24
    98fa:	e9 f7       	brne	.-6      	; 0x98f6 <CenterSticks+0x22>
    98fc:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    98fe:	d8 01       	movw	r26, r16
    9900:	80 e0       	ldi	r24, 0x00	; 0
    9902:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    9904:	9c 01       	movw	r18, r24
    9906:	22 0f       	add	r18, r18
    9908:	33 1f       	adc	r19, r19
    990a:	29 50       	subi	r18, 0x09	; 9
    990c:	38 4f       	sbci	r19, 0xF8	; 248
    990e:	f9 01       	movw	r30, r18
    9910:	40 81       	ld	r20, Z
    9912:	51 81       	ldd	r21, Z+1	; 0x01
    9914:	2d 91       	ld	r18, X+
    9916:	3c 91       	ld	r19, X
    9918:	11 97       	sbiw	r26, 0x01	; 1
    991a:	24 0f       	add	r18, r20
    991c:	35 1f       	adc	r19, r21
    991e:	2d 93       	st	X+, r18
    9920:	3d 93       	st	X+, r19
    9922:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    9924:	88 30       	cpi	r24, 0x08	; 8
    9926:	91 05       	cpc	r25, r1
    9928:	69 f7       	brne	.-38     	; 0x9904 <CenterSticks+0x30>
    992a:	ff e7       	ldi	r31, 0x7F	; 127
    992c:	2a e1       	ldi	r18, 0x1A	; 26
    992e:	86 e0       	ldi	r24, 0x06	; 6
    9930:	f1 50       	subi	r31, 0x01	; 1
    9932:	20 40       	sbci	r18, 0x00	; 0
    9934:	80 40       	sbci	r24, 0x00	; 0
    9936:	e1 f7       	brne	.-8      	; 0x9930 <CenterSticks+0x5c>
    9938:	00 c0       	rjmp	.+0      	; 0x993a <CenterSticks+0x66>
    993a:	00 00       	nop
    993c:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    993e:	f9 f6       	brne	.-66     	; 0x98fe <CenterSticks+0x2a>
    9940:	a1 eb       	ldi	r26, 0xB1	; 177
    9942:	b7 e0       	ldi	r27, 0x07	; 7
    9944:	9e 01       	movw	r18, r28
    9946:	2f 5e       	subi	r18, 0xEF	; 239
    9948:	3f 4f       	sbci	r19, 0xFF	; 255
    994a:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    994c:	81 91       	ld	r24, Z+
    994e:	91 91       	ld	r25, Z+
    9950:	04 96       	adiw	r24, 0x04	; 4
    9952:	43 e0       	ldi	r20, 0x03	; 3
    9954:	96 95       	lsr	r25
    9956:	87 95       	ror	r24
    9958:	4a 95       	dec	r20
    995a:	e1 f7       	brne	.-8      	; 0x9954 <CenterSticks+0x80>
    995c:	8d 93       	st	X+, r24
    995e:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    9960:	e2 17       	cp	r30, r18
    9962:	f3 07       	cpc	r31, r19
    9964:	99 f7       	brne	.-26     	; 0x994c <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    9966:	60 96       	adiw	r28, 0x10	; 16
    9968:	0f b6       	in	r0, 0x3f	; 63
    996a:	f8 94       	cli
    996c:	de bf       	out	0x3e, r29	; 62
    996e:	0f be       	out	0x3f, r0	; 63
    9970:	cd bf       	out	0x3d, r28	; 61
    9972:	df 91       	pop	r29
    9974:	cf 91       	pop	r28
    9976:	1f 91       	pop	r17
    9978:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    997a:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <Save_Config_to_EEPROM>

0000997e <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    997e:	8f 92       	push	r8
    9980:	9f 92       	push	r9
    9982:	af 92       	push	r10
    9984:	bf 92       	push	r11
    9986:	df 92       	push	r13
    9988:	ef 92       	push	r14
    998a:	ff 92       	push	r15
    998c:	0f 93       	push	r16
    998e:	1f 93       	push	r17
    9990:	cf 93       	push	r28
    9992:	df 93       	push	r29
    9994:	d8 2e       	mov	r13, r24
    9996:	0d e6       	ldi	r16, 0x6D	; 109
    9998:	16 e0       	ldi	r17, 0x06	; 6
    999a:	c0 e0       	ldi	r28, 0x00	; 0
    999c:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    999e:	ea e0       	ldi	r30, 0x0A	; 10
    99a0:	8e 2e       	mov	r8, r30
    99a2:	91 2c       	mov	r9, r1
    99a4:	a1 2c       	mov	r10, r1
    99a6:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    99a8:	7e 01       	movw	r14, r28
    99aa:	ee 0c       	add	r14, r14
    99ac:	ff 1c       	adc	r15, r15
    99ae:	f7 01       	movw	r30, r14
    99b0:	ea 56       	subi	r30, 0x6A	; 106
    99b2:	f7 4f       	sbci	r31, 0xF7	; 247
    99b4:	20 81       	ld	r18, Z
    99b6:	31 81       	ldd	r19, Z+1	; 0x01
    99b8:	a9 01       	movw	r20, r18
    99ba:	60 e0       	ldi	r22, 0x00	; 0
    99bc:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    99be:	f8 01       	movw	r30, r16
    99c0:	80 81       	ld	r24, Z
    99c2:	82 30       	cpi	r24, 0x02	; 2
    99c4:	79 f0       	breq	.+30     	; 0x99e4 <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    99c6:	9a 01       	movw	r18, r20
    99c8:	ab 01       	movw	r20, r22
    99ca:	26 5a       	subi	r18, 0xA6	; 166
    99cc:	3e 40       	sbci	r19, 0x0E	; 14
    99ce:	41 09       	sbc	r20, r1
    99d0:	51 09       	sbc	r21, r1
    99d2:	56 95       	lsr	r21
    99d4:	47 95       	ror	r20
    99d6:	37 95       	ror	r19
    99d8:	27 95       	ror	r18
    99da:	24 52       	subi	r18, 0x24	; 36
    99dc:	3a 4f       	sbci	r19, 0xFA	; 250
    99de:	4f 4f       	sbci	r20, 0xFF	; 255
    99e0:	5f 4f       	sbci	r21, 0xFF	; 255
    99e2:	11 c0       	rjmp	.+34     	; 0x9a06 <output_servo_ppm+0x88>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    99e4:	cb 01       	movw	r24, r22
    99e6:	ba 01       	movw	r22, r20
    99e8:	52 e0       	ldi	r21, 0x02	; 2
    99ea:	66 0f       	add	r22, r22
    99ec:	77 1f       	adc	r23, r23
    99ee:	88 1f       	adc	r24, r24
    99f0:	99 1f       	adc	r25, r25
    99f2:	5a 95       	dec	r21
    99f4:	d1 f7       	brne	.-12     	; 0x99ea <output_servo_ppm+0x6c>
    99f6:	6b 5f       	subi	r22, 0xFB	; 251
    99f8:	7f 4f       	sbci	r23, 0xFF	; 255
    99fa:	8f 4f       	sbci	r24, 0xFF	; 255
    99fc:	9f 4f       	sbci	r25, 0xFF	; 255
    99fe:	a5 01       	movw	r20, r10
    9a00:	94 01       	movw	r18, r8
    9a02:	0e 94 0c 51 	call	0xa218	; 0xa218 <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    9a06:	f7 01       	movw	r30, r14
    9a08:	ea 56       	subi	r30, 0x6A	; 106
    9a0a:	f7 4f       	sbci	r31, 0xF7	; 247
    9a0c:	31 83       	std	Z+1, r19	; 0x01
    9a0e:	20 83       	st	Z, r18
    9a10:	21 96       	adiw	r28, 0x01	; 1
    9a12:	0a 5d       	subi	r16, 0xDA	; 218
    9a14:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    9a16:	c8 30       	cpi	r28, 0x08	; 8
    9a18:	d1 05       	cpc	r29, r1
    9a1a:	31 f6       	brne	.-116    	; 0x99a8 <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    9a1c:	80 91 f7 07 	lds	r24, 0x07F7
    9a20:	90 91 f8 07 	lds	r25, 0x07F8
    9a24:	20 91 b1 07 	lds	r18, 0x07B1
    9a28:	30 91 b2 07 	lds	r19, 0x07B2
    9a2c:	82 1b       	sub	r24, r18
    9a2e:	93 0b       	sbc	r25, r19
    9a30:	90 93 83 08 	sts	0x0883, r25
    9a34:	80 93 82 08 	sts	0x0882, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    9a38:	80 91 82 08 	lds	r24, 0x0882
    9a3c:	90 91 83 08 	lds	r25, 0x0883
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    9a40:	c2 97       	sbiw	r24, 0x32	; 50
    9a42:	ac f0       	brlt	.+42     	; 0x9a6e <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			(General_error & (1 << DISARMED))
    9a44:	80 91 20 05 	lds	r24, 0x0520
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    9a48:	82 fd       	sbrc	r24, 2
    9a4a:	11 c0       	rjmp	.+34     	; 0x9a6e <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    9a4c:	80 91 20 05 	lds	r24, 0x0520
    9a50:	80 fd       	sbrc	r24, 0
    9a52:	24 c0       	rjmp	.+72     	; 0x9a9c <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    9a54:	10 92 22 08 	sts	0x0822, r1
	
		// We now care about interrupts
		JitterGate = true;
    9a58:	81 e0       	ldi	r24, 0x01	; 1
    9a5a:	80 93 21 08 	sts	0x0821, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    9a5e:	6d 2d       	mov	r22, r13
    9a60:	86 e9       	ldi	r24, 0x96	; 150
    9a62:	98 e0       	ldi	r25, 0x08	; 8
    9a64:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    9a68:	10 92 21 08 	sts	0x0821, r1
    9a6c:	17 c0       	rjmp	.+46     	; 0x9a9c <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    9a6e:	ed e6       	ldi	r30, 0x6D	; 109
    9a70:	f6 e0       	ldi	r31, 0x06	; 6
    9a72:	80 e0       	ldi	r24, 0x00	; 0
    9a74:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    9a76:	28 ee       	ldi	r18, 0xE8	; 232
    9a78:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    9a7a:	40 81       	ld	r20, Z
    9a7c:	42 30       	cpi	r20, 0x02	; 2
    9a7e:	41 f4       	brne	.+16     	; 0x9a90 <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    9a80:	dc 01       	movw	r26, r24
    9a82:	aa 0f       	add	r26, r26
    9a84:	bb 1f       	adc	r27, r27
    9a86:	aa 56       	subi	r26, 0x6A	; 106
    9a88:	b7 4f       	sbci	r27, 0xF7	; 247
    9a8a:	11 96       	adiw	r26, 0x01	; 1
    9a8c:	3c 93       	st	X, r19
    9a8e:	2e 93       	st	-X, r18
    9a90:	01 96       	adiw	r24, 0x01	; 1
    9a92:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			(General_error & (1 << DISARMED))
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    9a94:	88 30       	cpi	r24, 0x08	; 8
    9a96:	91 05       	cpc	r25, r1
    9a98:	81 f7       	brne	.-32     	; 0x9a7a <output_servo_ppm+0xfc>
    9a9a:	d8 cf       	rjmp	.-80     	; 0x9a4c <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    9a9c:	df 91       	pop	r29
    9a9e:	cf 91       	pop	r28
    9aa0:	1f 91       	pop	r17
    9aa2:	0f 91       	pop	r16
    9aa4:	ff 90       	pop	r15
    9aa6:	ef 90       	pop	r14
    9aa8:	df 90       	pop	r13
    9aaa:	bf 90       	pop	r11
    9aac:	af 90       	pop	r10
    9aae:	9f 90       	pop	r9
    9ab0:	8f 90       	pop	r8
    9ab2:	08 95       	ret

00009ab4 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    9ab4:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    9ab8:	81 e1       	ldi	r24, 0x11	; 17
    9aba:	80 93 b8 00 	sts	0x00B8, r24
    9abe:	08 95       	ret

00009ac0 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9ac0:	94 ea       	ldi	r25, 0xA4	; 164
    9ac2:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    9ac6:	4f ef       	ldi	r20, 0xFF	; 255
    9ac8:	50 e0       	ldi	r21, 0x00	; 0
    9aca:	60 e0       	ldi	r22, 0x00	; 0
    9acc:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9ace:	90 91 bc 00 	lds	r25, 0x00BC
    9ad2:	97 fd       	sbrc	r25, 7
    9ad4:	06 c0       	rjmp	.+12     	; 0x9ae2 <i2c_start+0x22>
    9ad6:	41 50       	subi	r20, 0x01	; 1
    9ad8:	51 09       	sbc	r21, r1
    9ada:	61 09       	sbc	r22, r1
    9adc:	71 09       	sbc	r23, r1
    9ade:	b8 f7       	brcc	.-18     	; 0x9ace <i2c_start+0xe>
    9ae0:	06 c0       	rjmp	.+12     	; 0x9aee <i2c_start+0x2e>
	if(i2c_timer == 0)
    9ae2:	45 2b       	or	r20, r21
    9ae4:	46 2b       	or	r20, r22
    9ae6:	47 2b       	or	r20, r23
    9ae8:	11 f4       	brne	.+4      	; 0x9aee <i2c_start+0x2e>
		return 1;
    9aea:	81 e0       	ldi	r24, 0x01	; 1
    9aec:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    9aee:	90 91 b9 00 	lds	r25, 0x00B9
    9af2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    9af4:	98 30       	cpi	r25, 0x08	; 8
    9af6:	11 f0       	breq	.+4      	; 0x9afc <i2c_start+0x3c>
    9af8:	90 31       	cpi	r25, 0x10	; 16
    9afa:	b9 f7       	brne	.-18     	; 0x9aea <i2c_start+0x2a>

	// send device address
	TWDR = address;
    9afc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    9b00:	84 e8       	ldi	r24, 0x84	; 132
    9b02:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    9b06:	8f ef       	ldi	r24, 0xFF	; 255
    9b08:	90 e0       	ldi	r25, 0x00	; 0
    9b0a:	a0 e0       	ldi	r26, 0x00	; 0
    9b0c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9b0e:	20 91 bc 00 	lds	r18, 0x00BC
    9b12:	27 fd       	sbrc	r18, 7
    9b14:	05 c0       	rjmp	.+10     	; 0x9b20 <i2c_start+0x60>
    9b16:	01 97       	sbiw	r24, 0x01	; 1
    9b18:	a1 09       	sbc	r26, r1
    9b1a:	b1 09       	sbc	r27, r1
    9b1c:	c0 f7       	brcc	.-16     	; 0x9b0e <i2c_start+0x4e>
    9b1e:	04 c0       	rjmp	.+8      	; 0x9b28 <i2c_start+0x68>
	if(i2c_timer == 0)
    9b20:	89 2b       	or	r24, r25
    9b22:	8a 2b       	or	r24, r26
    9b24:	8b 2b       	or	r24, r27
    9b26:	09 f3       	breq	.-62     	; 0x9aea <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    9b28:	80 91 b9 00 	lds	r24, 0x00B9
    9b2c:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    9b2e:	88 31       	cpi	r24, 0x18	; 24
    9b30:	11 f0       	breq	.+4      	; 0x9b36 <i2c_start+0x76>
    9b32:	80 34       	cpi	r24, 0x40	; 64
    9b34:	d1 f6       	brne	.-76     	; 0x9aea <i2c_start+0x2a>

	return 0;
    9b36:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    9b38:	08 95       	ret

00009b3a <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9b3a:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    9b3c:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9b3e:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    9b40:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9b44:	20 e0       	ldi	r18, 0x00	; 0
    9b46:	30 e0       	ldi	r19, 0x00	; 0
    9b48:	90 91 bc 00 	lds	r25, 0x00BC
    9b4c:	97 fd       	sbrc	r25, 7
    9b4e:	06 c0       	rjmp	.+12     	; 0x9b5c <i2c_start_wait+0x22>
    9b50:	2f 5f       	subi	r18, 0xFF	; 255
    9b52:	3f 4f       	sbci	r19, 0xFF	; 255
    9b54:	21 15       	cp	r18, r1
    9b56:	91 e0       	ldi	r25, 0x01	; 1
    9b58:	39 07       	cpc	r19, r25
    9b5a:	b1 f7       	brne	.-20     	; 0x9b48 <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    9b5c:	90 91 b9 00 	lds	r25, 0x00B9
    9b60:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    9b62:	98 30       	cpi	r25, 0x08	; 8
    9b64:	11 f0       	breq	.+4      	; 0x9b6a <i2c_start_wait+0x30>
    9b66:	90 31       	cpi	r25, 0x10	; 16
    9b68:	59 f7       	brne	.-42     	; 0x9b40 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    9b6a:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    9b6e:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9b72:	20 e0       	ldi	r18, 0x00	; 0
    9b74:	30 e0       	ldi	r19, 0x00	; 0
    9b76:	90 91 bc 00 	lds	r25, 0x00BC
    9b7a:	97 fd       	sbrc	r25, 7
    9b7c:	06 c0       	rjmp	.+12     	; 0x9b8a <i2c_start_wait+0x50>
    9b7e:	2f 5f       	subi	r18, 0xFF	; 255
    9b80:	3f 4f       	sbci	r19, 0xFF	; 255
    9b82:	21 15       	cp	r18, r1
    9b84:	91 e0       	ldi	r25, 0x01	; 1
    9b86:	39 07       	cpc	r19, r25
    9b88:	b1 f7       	brne	.-20     	; 0x9b76 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    9b8a:	90 91 b9 00 	lds	r25, 0x00B9
    9b8e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    9b90:	90 32       	cpi	r25, 0x20	; 32
    9b92:	11 f0       	breq	.+4      	; 0x9b98 <i2c_start_wait+0x5e>
    9b94:	98 35       	cpi	r25, 0x58	; 88
    9b96:	79 f4       	brne	.+30     	; 0x9bb6 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9b98:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    9b9c:	20 e0       	ldi	r18, 0x00	; 0
    9b9e:	30 e0       	ldi	r19, 0x00	; 0
    9ba0:	90 91 bc 00 	lds	r25, 0x00BC
    9ba4:	94 ff       	sbrs	r25, 4
    9ba6:	cc cf       	rjmp	.-104    	; 0x9b40 <i2c_start_wait+0x6>
    9ba8:	2f 5f       	subi	r18, 0xFF	; 255
    9baa:	3f 4f       	sbci	r19, 0xFF	; 255
    9bac:	21 15       	cp	r18, r1
    9bae:	91 e0       	ldi	r25, 0x01	; 1
    9bb0:	39 07       	cpc	r19, r25
    9bb2:	b1 f7       	brne	.-20     	; 0x9ba0 <i2c_start_wait+0x66>
    9bb4:	c5 cf       	rjmp	.-118    	; 0x9b40 <i2c_start_wait+0x6>
    9bb6:	08 95       	ret

00009bb8 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    9bb8:	0c 94 60 4d 	jmp	0x9ac0	; 0x9ac0 <i2c_start>

00009bbc <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    9bbc:	84 e9       	ldi	r24, 0x94	; 148
    9bbe:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    9bc2:	80 e0       	ldi	r24, 0x00	; 0
    9bc4:	90 e0       	ldi	r25, 0x00	; 0
    9bc6:	20 91 bc 00 	lds	r18, 0x00BC
    9bca:	24 ff       	sbrs	r18, 4
    9bcc:	05 c0       	rjmp	.+10     	; 0x9bd8 <i2c_stop+0x1c>
    9bce:	01 96       	adiw	r24, 0x01	; 1
    9bd0:	81 15       	cp	r24, r1
    9bd2:	21 e0       	ldi	r18, 0x01	; 1
    9bd4:	92 07       	cpc	r25, r18
    9bd6:	b9 f7       	brne	.-18     	; 0x9bc6 <i2c_stop+0xa>
    9bd8:	08 95       	ret

00009bda <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    9bda:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    9bde:	84 e8       	ldi	r24, 0x84	; 132
    9be0:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    9be4:	8f ef       	ldi	r24, 0xFF	; 255
    9be6:	90 e0       	ldi	r25, 0x00	; 0
    9be8:	a0 e0       	ldi	r26, 0x00	; 0
    9bea:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9bec:	20 91 bc 00 	lds	r18, 0x00BC
    9bf0:	27 fd       	sbrc	r18, 7
    9bf2:	05 c0       	rjmp	.+10     	; 0x9bfe <i2c_write+0x24>
    9bf4:	01 97       	sbiw	r24, 0x01	; 1
    9bf6:	a1 09       	sbc	r26, r1
    9bf8:	b1 09       	sbc	r27, r1
    9bfa:	c0 f7       	brcc	.-16     	; 0x9bec <i2c_write+0x12>
    9bfc:	04 c0       	rjmp	.+8      	; 0x9c06 <i2c_write+0x2c>
	if(i2c_timer == 0)
    9bfe:	89 2b       	or	r24, r25
    9c00:	8a 2b       	or	r24, r26
    9c02:	8b 2b       	or	r24, r27
    9c04:	41 f0       	breq	.+16     	; 0x9c16 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    9c06:	90 91 b9 00 	lds	r25, 0x00B9
    9c0a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    9c0c:	81 e0       	ldi	r24, 0x01	; 1
    9c0e:	98 32       	cpi	r25, 0x28	; 40
    9c10:	19 f4       	brne	.+6      	; 0x9c18 <i2c_write+0x3e>
    9c12:	80 e0       	ldi	r24, 0x00	; 0
    9c14:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    9c16:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    9c18:	08 95       	ret

00009c1a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    9c1a:	84 ec       	ldi	r24, 0xC4	; 196
    9c1c:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    9c20:	8f ef       	ldi	r24, 0xFF	; 255
    9c22:	90 e0       	ldi	r25, 0x00	; 0
    9c24:	a0 e0       	ldi	r26, 0x00	; 0
    9c26:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9c28:	20 91 bc 00 	lds	r18, 0x00BC
    9c2c:	27 fd       	sbrc	r18, 7
    9c2e:	05 c0       	rjmp	.+10     	; 0x9c3a <i2c_readAck+0x20>
    9c30:	01 97       	sbiw	r24, 0x01	; 1
    9c32:	a1 09       	sbc	r26, r1
    9c34:	b1 09       	sbc	r27, r1
    9c36:	c0 f7       	brcc	.-16     	; 0x9c28 <i2c_readAck+0xe>
    9c38:	04 c0       	rjmp	.+8      	; 0x9c42 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    9c3a:	89 2b       	or	r24, r25
    9c3c:	8a 2b       	or	r24, r26
    9c3e:	8b 2b       	or	r24, r27
    9c40:	19 f0       	breq	.+6      	; 0x9c48 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    9c42:	80 91 bb 00 	lds	r24, 0x00BB
    9c46:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    9c48:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    9c4a:	08 95       	ret

00009c4c <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    9c4c:	84 e8       	ldi	r24, 0x84	; 132
    9c4e:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    9c52:	8f ef       	ldi	r24, 0xFF	; 255
    9c54:	90 e0       	ldi	r25, 0x00	; 0
    9c56:	a0 e0       	ldi	r26, 0x00	; 0
    9c58:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    9c5a:	20 91 bc 00 	lds	r18, 0x00BC
    9c5e:	27 fd       	sbrc	r18, 7
    9c60:	05 c0       	rjmp	.+10     	; 0x9c6c <i2c_readNak+0x20>
    9c62:	01 97       	sbiw	r24, 0x01	; 1
    9c64:	a1 09       	sbc	r26, r1
    9c66:	b1 09       	sbc	r27, r1
    9c68:	c0 f7       	brcc	.-16     	; 0x9c5a <i2c_readNak+0xe>
    9c6a:	04 c0       	rjmp	.+8      	; 0x9c74 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    9c6c:	89 2b       	or	r24, r25
    9c6e:	8a 2b       	or	r24, r26
    9c70:	8b 2b       	or	r24, r27
    9c72:	19 f0       	breq	.+6      	; 0x9c7a <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    9c74:	80 91 bb 00 	lds	r24, 0x00BB
    9c78:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    9c7a:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    9c7c:	08 95       	ret

00009c7e <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    9c7e:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    9c80:	80 91 c1 00 	lds	r24, 0x00C1
    9c84:	8f 77       	andi	r24, 0x7F	; 127
    9c86:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    9c8a:	80 91 c0 00 	lds	r24, 0x00C0
    9c8e:	87 ff       	sbrs	r24, 7
    9c90:	05 c0       	rjmp	.+10     	; 0x9c9c <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    9c92:	80 91 c6 00 	lds	r24, 0x00C6
    9c96:	80 93 c2 00 	sts	0x00C2, r24
    9c9a:	f7 cf       	rjmp	.-18     	; 0x9c8a <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    9c9c:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    9ca0:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    9ca4:	86 e0       	ldi	r24, 0x06	; 6
    9ca6:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    9caa:	80 91 00 06 	lds	r24, 0x0600
    9cae:	82 30       	cpi	r24, 0x02	; 2
    9cb0:	a1 f0       	breq	.+40     	; 0x9cda <init_uart+0x5c>
    9cb2:	34 f4       	brge	.+12     	; 0x9cc0 <init_uart+0x42>
    9cb4:	87 fd       	sbrc	r24, 7
    9cb6:	4c c0       	rjmp	.+152    	; 0x9d50 <init_uart+0xd2>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    9cb8:	80 91 c1 00 	lds	r24, 0x00C1
    9cbc:	8f 7e       	andi	r24, 0xEF	; 239
    9cbe:	46 c0       	rjmp	.+140    	; 0x9d4c <init_uart+0xce>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    9cc0:	83 30       	cpi	r24, 0x03	; 3
    9cc2:	41 f1       	breq	.+80     	; 0x9d14 <init_uart+0x96>
    9cc4:	84 30       	cpi	r24, 0x04	; 4
    9cc6:	09 f0       	breq	.+2      	; 0x9cca <init_uart+0x4c>
    9cc8:	43 c0       	rjmp	.+134    	; 0x9d50 <init_uart+0xd2>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    9cca:	90 91 c0 00 	lds	r25, 0x00C0
    9cce:	9d 7f       	andi	r25, 0xFD	; 253
    9cd0:	90 93 c0 00 	sts	0x00C0, r25
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    9cd4:	10 92 c5 00 	sts	0x00C5, r1
    9cd8:	25 c0       	rjmp	.+74     	; 0x9d24 <init_uart+0xa6>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    9cda:	80 91 c0 00 	lds	r24, 0x00C0
    9cde:	82 60       	ori	r24, 0x02	; 2
    9ce0:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    9ce4:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    9ce8:	88 e1       	ldi	r24, 0x18	; 24
    9cea:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    9cee:	80 91 c1 00 	lds	r24, 0x00C1
    9cf2:	80 61       	ori	r24, 0x10	; 16
    9cf4:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    9cf8:	80 91 c2 00 	lds	r24, 0x00C2
    9cfc:	88 60       	ori	r24, 0x08	; 8
    9cfe:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    9d02:	80 91 c2 00 	lds	r24, 0x00C2
    9d06:	8f 7e       	andi	r24, 0xEF	; 239
    9d08:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    9d0c:	80 91 c2 00 	lds	r24, 0x00C2
    9d10:	80 62       	ori	r24, 0x20	; 32
    9d12:	17 c0       	rjmp	.+46     	; 0x9d42 <init_uart+0xc4>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    9d14:	80 91 c0 00 	lds	r24, 0x00C0
    9d18:	8d 7f       	andi	r24, 0xFD	; 253
    9d1a:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    9d1e:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    9d22:	8a e0       	ldi	r24, 0x0A	; 10
    9d24:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    9d28:	80 91 c1 00 	lds	r24, 0x00C1
    9d2c:	80 61       	ori	r24, 0x10	; 16
    9d2e:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    9d32:	80 91 c2 00 	lds	r24, 0x00C2
    9d36:	87 7f       	andi	r24, 0xF7	; 247
    9d38:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    9d3c:	80 91 c2 00 	lds	r24, 0x00C2
    9d40:	8f 7e       	andi	r24, 0xEF	; 239
    9d42:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    9d46:	80 91 c1 00 	lds	r24, 0x00C1
    9d4a:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    9d4c:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    9d50:	78 94       	sei
    9d52:	08 95       	ret

00009d54 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    9d54:	83 e0       	ldi	r24, 0x03	; 3
    9d56:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    9d5a:	80 91 78 00 	lds	r24, 0x0078
    9d5e:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    9d62:	9c 01       	movw	r18, r24
    9d64:	36 95       	lsr	r19
    9d66:	27 95       	ror	r18
    9d68:	ac 01       	movw	r20, r24
    9d6a:	44 0f       	add	r20, r20
    9d6c:	55 1f       	adc	r21, r21
    9d6e:	24 0f       	add	r18, r20
    9d70:	35 1f       	adc	r19, r21
    9d72:	ac 01       	movw	r20, r24
    9d74:	74 e0       	ldi	r23, 0x04	; 4
    9d76:	56 95       	lsr	r21
    9d78:	47 95       	ror	r20
    9d7a:	7a 95       	dec	r23
    9d7c:	e1 f7       	brne	.-8      	; 0x9d76 <GetVbat+0x22>
    9d7e:	24 0f       	add	r18, r20
    9d80:	35 1f       	adc	r19, r21
    9d82:	e6 e0       	ldi	r30, 0x06	; 6
    9d84:	96 95       	lsr	r25
    9d86:	87 95       	ror	r24
    9d88:	ea 95       	dec	r30
    9d8a:	e1 f7       	brne	.-8      	; 0x9d84 <GetVbat+0x30>

	return vBat;
}
    9d8c:	82 0f       	add	r24, r18
    9d8e:	93 1f       	adc	r25, r19
    9d90:	08 95       	ret

00009d92 <__subsf3>:
    9d92:	50 58       	subi	r21, 0x80	; 128

00009d94 <__addsf3>:
    9d94:	bb 27       	eor	r27, r27
    9d96:	aa 27       	eor	r26, r26
    9d98:	0e d0       	rcall	.+28     	; 0x9db6 <__addsf3x>
    9d9a:	75 c1       	rjmp	.+746    	; 0xa086 <__fp_round>
    9d9c:	66 d1       	rcall	.+716    	; 0xa06a <__fp_pscA>
    9d9e:	30 f0       	brcs	.+12     	; 0x9dac <__addsf3+0x18>
    9da0:	6b d1       	rcall	.+726    	; 0xa078 <__fp_pscB>
    9da2:	20 f0       	brcs	.+8      	; 0x9dac <__addsf3+0x18>
    9da4:	31 f4       	brne	.+12     	; 0x9db2 <__addsf3+0x1e>
    9da6:	9f 3f       	cpi	r25, 0xFF	; 255
    9da8:	11 f4       	brne	.+4      	; 0x9dae <__addsf3+0x1a>
    9daa:	1e f4       	brtc	.+6      	; 0x9db2 <__addsf3+0x1e>
    9dac:	5b c1       	rjmp	.+694    	; 0xa064 <__fp_nan>
    9dae:	0e f4       	brtc	.+2      	; 0x9db2 <__addsf3+0x1e>
    9db0:	e0 95       	com	r30
    9db2:	e7 fb       	bst	r30, 7
    9db4:	51 c1       	rjmp	.+674    	; 0xa058 <__fp_inf>

00009db6 <__addsf3x>:
    9db6:	e9 2f       	mov	r30, r25
    9db8:	77 d1       	rcall	.+750    	; 0xa0a8 <__fp_split3>
    9dba:	80 f3       	brcs	.-32     	; 0x9d9c <__addsf3+0x8>
    9dbc:	ba 17       	cp	r27, r26
    9dbe:	62 07       	cpc	r22, r18
    9dc0:	73 07       	cpc	r23, r19
    9dc2:	84 07       	cpc	r24, r20
    9dc4:	95 07       	cpc	r25, r21
    9dc6:	18 f0       	brcs	.+6      	; 0x9dce <__addsf3x+0x18>
    9dc8:	71 f4       	brne	.+28     	; 0x9de6 <__addsf3x+0x30>
    9dca:	9e f5       	brtc	.+102    	; 0x9e32 <__addsf3x+0x7c>
    9dcc:	8f c1       	rjmp	.+798    	; 0xa0ec <__fp_zero>
    9dce:	0e f4       	brtc	.+2      	; 0x9dd2 <__addsf3x+0x1c>
    9dd0:	e0 95       	com	r30
    9dd2:	0b 2e       	mov	r0, r27
    9dd4:	ba 2f       	mov	r27, r26
    9dd6:	a0 2d       	mov	r26, r0
    9dd8:	0b 01       	movw	r0, r22
    9dda:	b9 01       	movw	r22, r18
    9ddc:	90 01       	movw	r18, r0
    9dde:	0c 01       	movw	r0, r24
    9de0:	ca 01       	movw	r24, r20
    9de2:	a0 01       	movw	r20, r0
    9de4:	11 24       	eor	r1, r1
    9de6:	ff 27       	eor	r31, r31
    9de8:	59 1b       	sub	r21, r25
    9dea:	99 f0       	breq	.+38     	; 0x9e12 <__addsf3x+0x5c>
    9dec:	59 3f       	cpi	r21, 0xF9	; 249
    9dee:	50 f4       	brcc	.+20     	; 0x9e04 <__addsf3x+0x4e>
    9df0:	50 3e       	cpi	r21, 0xE0	; 224
    9df2:	68 f1       	brcs	.+90     	; 0x9e4e <__addsf3x+0x98>
    9df4:	1a 16       	cp	r1, r26
    9df6:	f0 40       	sbci	r31, 0x00	; 0
    9df8:	a2 2f       	mov	r26, r18
    9dfa:	23 2f       	mov	r18, r19
    9dfc:	34 2f       	mov	r19, r20
    9dfe:	44 27       	eor	r20, r20
    9e00:	58 5f       	subi	r21, 0xF8	; 248
    9e02:	f3 cf       	rjmp	.-26     	; 0x9dea <__addsf3x+0x34>
    9e04:	46 95       	lsr	r20
    9e06:	37 95       	ror	r19
    9e08:	27 95       	ror	r18
    9e0a:	a7 95       	ror	r26
    9e0c:	f0 40       	sbci	r31, 0x00	; 0
    9e0e:	53 95       	inc	r21
    9e10:	c9 f7       	brne	.-14     	; 0x9e04 <__addsf3x+0x4e>
    9e12:	7e f4       	brtc	.+30     	; 0x9e32 <__addsf3x+0x7c>
    9e14:	1f 16       	cp	r1, r31
    9e16:	ba 0b       	sbc	r27, r26
    9e18:	62 0b       	sbc	r22, r18
    9e1a:	73 0b       	sbc	r23, r19
    9e1c:	84 0b       	sbc	r24, r20
    9e1e:	ba f0       	brmi	.+46     	; 0x9e4e <__addsf3x+0x98>
    9e20:	91 50       	subi	r25, 0x01	; 1
    9e22:	a1 f0       	breq	.+40     	; 0x9e4c <__addsf3x+0x96>
    9e24:	ff 0f       	add	r31, r31
    9e26:	bb 1f       	adc	r27, r27
    9e28:	66 1f       	adc	r22, r22
    9e2a:	77 1f       	adc	r23, r23
    9e2c:	88 1f       	adc	r24, r24
    9e2e:	c2 f7       	brpl	.-16     	; 0x9e20 <__addsf3x+0x6a>
    9e30:	0e c0       	rjmp	.+28     	; 0x9e4e <__addsf3x+0x98>
    9e32:	ba 0f       	add	r27, r26
    9e34:	62 1f       	adc	r22, r18
    9e36:	73 1f       	adc	r23, r19
    9e38:	84 1f       	adc	r24, r20
    9e3a:	48 f4       	brcc	.+18     	; 0x9e4e <__addsf3x+0x98>
    9e3c:	87 95       	ror	r24
    9e3e:	77 95       	ror	r23
    9e40:	67 95       	ror	r22
    9e42:	b7 95       	ror	r27
    9e44:	f7 95       	ror	r31
    9e46:	9e 3f       	cpi	r25, 0xFE	; 254
    9e48:	08 f0       	brcs	.+2      	; 0x9e4c <__addsf3x+0x96>
    9e4a:	b3 cf       	rjmp	.-154    	; 0x9db2 <__addsf3+0x1e>
    9e4c:	93 95       	inc	r25
    9e4e:	88 0f       	add	r24, r24
    9e50:	08 f0       	brcs	.+2      	; 0x9e54 <__addsf3x+0x9e>
    9e52:	99 27       	eor	r25, r25
    9e54:	ee 0f       	add	r30, r30
    9e56:	97 95       	ror	r25
    9e58:	87 95       	ror	r24
    9e5a:	08 95       	ret

00009e5c <__cmpsf2>:
    9e5c:	d9 d0       	rcall	.+434    	; 0xa010 <__fp_cmp>
    9e5e:	08 f4       	brcc	.+2      	; 0x9e62 <__cmpsf2+0x6>
    9e60:	81 e0       	ldi	r24, 0x01	; 1
    9e62:	08 95       	ret

00009e64 <__divsf3>:
    9e64:	0c d0       	rcall	.+24     	; 0x9e7e <__divsf3x>
    9e66:	0f c1       	rjmp	.+542    	; 0xa086 <__fp_round>
    9e68:	07 d1       	rcall	.+526    	; 0xa078 <__fp_pscB>
    9e6a:	40 f0       	brcs	.+16     	; 0x9e7c <__divsf3+0x18>
    9e6c:	fe d0       	rcall	.+508    	; 0xa06a <__fp_pscA>
    9e6e:	30 f0       	brcs	.+12     	; 0x9e7c <__divsf3+0x18>
    9e70:	21 f4       	brne	.+8      	; 0x9e7a <__divsf3+0x16>
    9e72:	5f 3f       	cpi	r21, 0xFF	; 255
    9e74:	19 f0       	breq	.+6      	; 0x9e7c <__divsf3+0x18>
    9e76:	f0 c0       	rjmp	.+480    	; 0xa058 <__fp_inf>
    9e78:	51 11       	cpse	r21, r1
    9e7a:	39 c1       	rjmp	.+626    	; 0xa0ee <__fp_szero>
    9e7c:	f3 c0       	rjmp	.+486    	; 0xa064 <__fp_nan>

00009e7e <__divsf3x>:
    9e7e:	14 d1       	rcall	.+552    	; 0xa0a8 <__fp_split3>
    9e80:	98 f3       	brcs	.-26     	; 0x9e68 <__divsf3+0x4>

00009e82 <__divsf3_pse>:
    9e82:	99 23       	and	r25, r25
    9e84:	c9 f3       	breq	.-14     	; 0x9e78 <__divsf3+0x14>
    9e86:	55 23       	and	r21, r21
    9e88:	b1 f3       	breq	.-20     	; 0x9e76 <__divsf3+0x12>
    9e8a:	95 1b       	sub	r25, r21
    9e8c:	55 0b       	sbc	r21, r21
    9e8e:	bb 27       	eor	r27, r27
    9e90:	aa 27       	eor	r26, r26
    9e92:	62 17       	cp	r22, r18
    9e94:	73 07       	cpc	r23, r19
    9e96:	84 07       	cpc	r24, r20
    9e98:	38 f0       	brcs	.+14     	; 0x9ea8 <__divsf3_pse+0x26>
    9e9a:	9f 5f       	subi	r25, 0xFF	; 255
    9e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    9e9e:	22 0f       	add	r18, r18
    9ea0:	33 1f       	adc	r19, r19
    9ea2:	44 1f       	adc	r20, r20
    9ea4:	aa 1f       	adc	r26, r26
    9ea6:	a9 f3       	breq	.-22     	; 0x9e92 <__divsf3_pse+0x10>
    9ea8:	33 d0       	rcall	.+102    	; 0x9f10 <__divsf3_pse+0x8e>
    9eaa:	0e 2e       	mov	r0, r30
    9eac:	3a f0       	brmi	.+14     	; 0x9ebc <__divsf3_pse+0x3a>
    9eae:	e0 e8       	ldi	r30, 0x80	; 128
    9eb0:	30 d0       	rcall	.+96     	; 0x9f12 <__divsf3_pse+0x90>
    9eb2:	91 50       	subi	r25, 0x01	; 1
    9eb4:	50 40       	sbci	r21, 0x00	; 0
    9eb6:	e6 95       	lsr	r30
    9eb8:	00 1c       	adc	r0, r0
    9eba:	ca f7       	brpl	.-14     	; 0x9eae <__divsf3_pse+0x2c>
    9ebc:	29 d0       	rcall	.+82     	; 0x9f10 <__divsf3_pse+0x8e>
    9ebe:	fe 2f       	mov	r31, r30
    9ec0:	27 d0       	rcall	.+78     	; 0x9f10 <__divsf3_pse+0x8e>
    9ec2:	66 0f       	add	r22, r22
    9ec4:	77 1f       	adc	r23, r23
    9ec6:	88 1f       	adc	r24, r24
    9ec8:	bb 1f       	adc	r27, r27
    9eca:	26 17       	cp	r18, r22
    9ecc:	37 07       	cpc	r19, r23
    9ece:	48 07       	cpc	r20, r24
    9ed0:	ab 07       	cpc	r26, r27
    9ed2:	b0 e8       	ldi	r27, 0x80	; 128
    9ed4:	09 f0       	breq	.+2      	; 0x9ed8 <__divsf3_pse+0x56>
    9ed6:	bb 0b       	sbc	r27, r27
    9ed8:	80 2d       	mov	r24, r0
    9eda:	bf 01       	movw	r22, r30
    9edc:	ff 27       	eor	r31, r31
    9ede:	93 58       	subi	r25, 0x83	; 131
    9ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    9ee2:	2a f0       	brmi	.+10     	; 0x9eee <__divsf3_pse+0x6c>
    9ee4:	9e 3f       	cpi	r25, 0xFE	; 254
    9ee6:	51 05       	cpc	r21, r1
    9ee8:	68 f0       	brcs	.+26     	; 0x9f04 <__divsf3_pse+0x82>
    9eea:	b6 c0       	rjmp	.+364    	; 0xa058 <__fp_inf>
    9eec:	00 c1       	rjmp	.+512    	; 0xa0ee <__fp_szero>
    9eee:	5f 3f       	cpi	r21, 0xFF	; 255
    9ef0:	ec f3       	brlt	.-6      	; 0x9eec <__divsf3_pse+0x6a>
    9ef2:	98 3e       	cpi	r25, 0xE8	; 232
    9ef4:	dc f3       	brlt	.-10     	; 0x9eec <__divsf3_pse+0x6a>
    9ef6:	86 95       	lsr	r24
    9ef8:	77 95       	ror	r23
    9efa:	67 95       	ror	r22
    9efc:	b7 95       	ror	r27
    9efe:	f7 95       	ror	r31
    9f00:	9f 5f       	subi	r25, 0xFF	; 255
    9f02:	c9 f7       	brne	.-14     	; 0x9ef6 <__divsf3_pse+0x74>
    9f04:	88 0f       	add	r24, r24
    9f06:	91 1d       	adc	r25, r1
    9f08:	96 95       	lsr	r25
    9f0a:	87 95       	ror	r24
    9f0c:	97 f9       	bld	r25, 7
    9f0e:	08 95       	ret
    9f10:	e1 e0       	ldi	r30, 0x01	; 1
    9f12:	66 0f       	add	r22, r22
    9f14:	77 1f       	adc	r23, r23
    9f16:	88 1f       	adc	r24, r24
    9f18:	bb 1f       	adc	r27, r27
    9f1a:	62 17       	cp	r22, r18
    9f1c:	73 07       	cpc	r23, r19
    9f1e:	84 07       	cpc	r24, r20
    9f20:	ba 07       	cpc	r27, r26
    9f22:	20 f0       	brcs	.+8      	; 0x9f2c <__divsf3_pse+0xaa>
    9f24:	62 1b       	sub	r22, r18
    9f26:	73 0b       	sbc	r23, r19
    9f28:	84 0b       	sbc	r24, r20
    9f2a:	ba 0b       	sbc	r27, r26
    9f2c:	ee 1f       	adc	r30, r30
    9f2e:	88 f7       	brcc	.-30     	; 0x9f12 <__divsf3_pse+0x90>
    9f30:	e0 95       	com	r30
    9f32:	08 95       	ret

00009f34 <__fixsfsi>:
    9f34:	04 d0       	rcall	.+8      	; 0x9f3e <__fixunssfsi>
    9f36:	68 94       	set
    9f38:	b1 11       	cpse	r27, r1
    9f3a:	d9 c0       	rjmp	.+434    	; 0xa0ee <__fp_szero>
    9f3c:	08 95       	ret

00009f3e <__fixunssfsi>:
    9f3e:	bc d0       	rcall	.+376    	; 0xa0b8 <__fp_splitA>
    9f40:	88 f0       	brcs	.+34     	; 0x9f64 <__fixunssfsi+0x26>
    9f42:	9f 57       	subi	r25, 0x7F	; 127
    9f44:	90 f0       	brcs	.+36     	; 0x9f6a <__fixunssfsi+0x2c>
    9f46:	b9 2f       	mov	r27, r25
    9f48:	99 27       	eor	r25, r25
    9f4a:	b7 51       	subi	r27, 0x17	; 23
    9f4c:	a0 f0       	brcs	.+40     	; 0x9f76 <__fixunssfsi+0x38>
    9f4e:	d1 f0       	breq	.+52     	; 0x9f84 <__fixunssfsi+0x46>
    9f50:	66 0f       	add	r22, r22
    9f52:	77 1f       	adc	r23, r23
    9f54:	88 1f       	adc	r24, r24
    9f56:	99 1f       	adc	r25, r25
    9f58:	1a f0       	brmi	.+6      	; 0x9f60 <__fixunssfsi+0x22>
    9f5a:	ba 95       	dec	r27
    9f5c:	c9 f7       	brne	.-14     	; 0x9f50 <__fixunssfsi+0x12>
    9f5e:	12 c0       	rjmp	.+36     	; 0x9f84 <__fixunssfsi+0x46>
    9f60:	b1 30       	cpi	r27, 0x01	; 1
    9f62:	81 f0       	breq	.+32     	; 0x9f84 <__fixunssfsi+0x46>
    9f64:	c3 d0       	rcall	.+390    	; 0xa0ec <__fp_zero>
    9f66:	b1 e0       	ldi	r27, 0x01	; 1
    9f68:	08 95       	ret
    9f6a:	c0 c0       	rjmp	.+384    	; 0xa0ec <__fp_zero>
    9f6c:	67 2f       	mov	r22, r23
    9f6e:	78 2f       	mov	r23, r24
    9f70:	88 27       	eor	r24, r24
    9f72:	b8 5f       	subi	r27, 0xF8	; 248
    9f74:	39 f0       	breq	.+14     	; 0x9f84 <__fixunssfsi+0x46>
    9f76:	b9 3f       	cpi	r27, 0xF9	; 249
    9f78:	cc f3       	brlt	.-14     	; 0x9f6c <__fixunssfsi+0x2e>
    9f7a:	86 95       	lsr	r24
    9f7c:	77 95       	ror	r23
    9f7e:	67 95       	ror	r22
    9f80:	b3 95       	inc	r27
    9f82:	d9 f7       	brne	.-10     	; 0x9f7a <__fixunssfsi+0x3c>
    9f84:	3e f4       	brtc	.+14     	; 0x9f94 <__fixunssfsi+0x56>
    9f86:	90 95       	com	r25
    9f88:	80 95       	com	r24
    9f8a:	70 95       	com	r23
    9f8c:	61 95       	neg	r22
    9f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    9f90:	8f 4f       	sbci	r24, 0xFF	; 255
    9f92:	9f 4f       	sbci	r25, 0xFF	; 255
    9f94:	08 95       	ret

00009f96 <__floatunsisf>:
    9f96:	e8 94       	clt
    9f98:	09 c0       	rjmp	.+18     	; 0x9fac <__floatsisf+0x12>

00009f9a <__floatsisf>:
    9f9a:	97 fb       	bst	r25, 7
    9f9c:	3e f4       	brtc	.+14     	; 0x9fac <__floatsisf+0x12>
    9f9e:	90 95       	com	r25
    9fa0:	80 95       	com	r24
    9fa2:	70 95       	com	r23
    9fa4:	61 95       	neg	r22
    9fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    9fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    9faa:	9f 4f       	sbci	r25, 0xFF	; 255
    9fac:	99 23       	and	r25, r25
    9fae:	a9 f0       	breq	.+42     	; 0x9fda <__floatsisf+0x40>
    9fb0:	f9 2f       	mov	r31, r25
    9fb2:	96 e9       	ldi	r25, 0x96	; 150
    9fb4:	bb 27       	eor	r27, r27
    9fb6:	93 95       	inc	r25
    9fb8:	f6 95       	lsr	r31
    9fba:	87 95       	ror	r24
    9fbc:	77 95       	ror	r23
    9fbe:	67 95       	ror	r22
    9fc0:	b7 95       	ror	r27
    9fc2:	f1 11       	cpse	r31, r1
    9fc4:	f8 cf       	rjmp	.-16     	; 0x9fb6 <__floatsisf+0x1c>
    9fc6:	fa f4       	brpl	.+62     	; 0xa006 <__floatsisf+0x6c>
    9fc8:	bb 0f       	add	r27, r27
    9fca:	11 f4       	brne	.+4      	; 0x9fd0 <__floatsisf+0x36>
    9fcc:	60 ff       	sbrs	r22, 0
    9fce:	1b c0       	rjmp	.+54     	; 0xa006 <__floatsisf+0x6c>
    9fd0:	6f 5f       	subi	r22, 0xFF	; 255
    9fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    9fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    9fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    9fd8:	16 c0       	rjmp	.+44     	; 0xa006 <__floatsisf+0x6c>
    9fda:	88 23       	and	r24, r24
    9fdc:	11 f0       	breq	.+4      	; 0x9fe2 <__floatsisf+0x48>
    9fde:	96 e9       	ldi	r25, 0x96	; 150
    9fe0:	11 c0       	rjmp	.+34     	; 0xa004 <__floatsisf+0x6a>
    9fe2:	77 23       	and	r23, r23
    9fe4:	21 f0       	breq	.+8      	; 0x9fee <__floatsisf+0x54>
    9fe6:	9e e8       	ldi	r25, 0x8E	; 142
    9fe8:	87 2f       	mov	r24, r23
    9fea:	76 2f       	mov	r23, r22
    9fec:	05 c0       	rjmp	.+10     	; 0x9ff8 <__floatsisf+0x5e>
    9fee:	66 23       	and	r22, r22
    9ff0:	71 f0       	breq	.+28     	; 0xa00e <__floatsisf+0x74>
    9ff2:	96 e8       	ldi	r25, 0x86	; 134
    9ff4:	86 2f       	mov	r24, r22
    9ff6:	70 e0       	ldi	r23, 0x00	; 0
    9ff8:	60 e0       	ldi	r22, 0x00	; 0
    9ffa:	2a f0       	brmi	.+10     	; 0xa006 <__floatsisf+0x6c>
    9ffc:	9a 95       	dec	r25
    9ffe:	66 0f       	add	r22, r22
    a000:	77 1f       	adc	r23, r23
    a002:	88 1f       	adc	r24, r24
    a004:	da f7       	brpl	.-10     	; 0x9ffc <__floatsisf+0x62>
    a006:	88 0f       	add	r24, r24
    a008:	96 95       	lsr	r25
    a00a:	87 95       	ror	r24
    a00c:	97 f9       	bld	r25, 7
    a00e:	08 95       	ret

0000a010 <__fp_cmp>:
    a010:	99 0f       	add	r25, r25
    a012:	00 08       	sbc	r0, r0
    a014:	55 0f       	add	r21, r21
    a016:	aa 0b       	sbc	r26, r26
    a018:	e0 e8       	ldi	r30, 0x80	; 128
    a01a:	fe ef       	ldi	r31, 0xFE	; 254
    a01c:	16 16       	cp	r1, r22
    a01e:	17 06       	cpc	r1, r23
    a020:	e8 07       	cpc	r30, r24
    a022:	f9 07       	cpc	r31, r25
    a024:	c0 f0       	brcs	.+48     	; 0xa056 <__fp_cmp+0x46>
    a026:	12 16       	cp	r1, r18
    a028:	13 06       	cpc	r1, r19
    a02a:	e4 07       	cpc	r30, r20
    a02c:	f5 07       	cpc	r31, r21
    a02e:	98 f0       	brcs	.+38     	; 0xa056 <__fp_cmp+0x46>
    a030:	62 1b       	sub	r22, r18
    a032:	73 0b       	sbc	r23, r19
    a034:	84 0b       	sbc	r24, r20
    a036:	95 0b       	sbc	r25, r21
    a038:	39 f4       	brne	.+14     	; 0xa048 <__fp_cmp+0x38>
    a03a:	0a 26       	eor	r0, r26
    a03c:	61 f0       	breq	.+24     	; 0xa056 <__fp_cmp+0x46>
    a03e:	23 2b       	or	r18, r19
    a040:	24 2b       	or	r18, r20
    a042:	25 2b       	or	r18, r21
    a044:	21 f4       	brne	.+8      	; 0xa04e <__fp_cmp+0x3e>
    a046:	08 95       	ret
    a048:	0a 26       	eor	r0, r26
    a04a:	09 f4       	brne	.+2      	; 0xa04e <__fp_cmp+0x3e>
    a04c:	a1 40       	sbci	r26, 0x01	; 1
    a04e:	a6 95       	lsr	r26
    a050:	8f ef       	ldi	r24, 0xFF	; 255
    a052:	81 1d       	adc	r24, r1
    a054:	81 1d       	adc	r24, r1
    a056:	08 95       	ret

0000a058 <__fp_inf>:
    a058:	97 f9       	bld	r25, 7
    a05a:	9f 67       	ori	r25, 0x7F	; 127
    a05c:	80 e8       	ldi	r24, 0x80	; 128
    a05e:	70 e0       	ldi	r23, 0x00	; 0
    a060:	60 e0       	ldi	r22, 0x00	; 0
    a062:	08 95       	ret

0000a064 <__fp_nan>:
    a064:	9f ef       	ldi	r25, 0xFF	; 255
    a066:	80 ec       	ldi	r24, 0xC0	; 192
    a068:	08 95       	ret

0000a06a <__fp_pscA>:
    a06a:	00 24       	eor	r0, r0
    a06c:	0a 94       	dec	r0
    a06e:	16 16       	cp	r1, r22
    a070:	17 06       	cpc	r1, r23
    a072:	18 06       	cpc	r1, r24
    a074:	09 06       	cpc	r0, r25
    a076:	08 95       	ret

0000a078 <__fp_pscB>:
    a078:	00 24       	eor	r0, r0
    a07a:	0a 94       	dec	r0
    a07c:	12 16       	cp	r1, r18
    a07e:	13 06       	cpc	r1, r19
    a080:	14 06       	cpc	r1, r20
    a082:	05 06       	cpc	r0, r21
    a084:	08 95       	ret

0000a086 <__fp_round>:
    a086:	09 2e       	mov	r0, r25
    a088:	03 94       	inc	r0
    a08a:	00 0c       	add	r0, r0
    a08c:	11 f4       	brne	.+4      	; 0xa092 <__fp_round+0xc>
    a08e:	88 23       	and	r24, r24
    a090:	52 f0       	brmi	.+20     	; 0xa0a6 <__fp_round+0x20>
    a092:	bb 0f       	add	r27, r27
    a094:	40 f4       	brcc	.+16     	; 0xa0a6 <__fp_round+0x20>
    a096:	bf 2b       	or	r27, r31
    a098:	11 f4       	brne	.+4      	; 0xa09e <__fp_round+0x18>
    a09a:	60 ff       	sbrs	r22, 0
    a09c:	04 c0       	rjmp	.+8      	; 0xa0a6 <__fp_round+0x20>
    a09e:	6f 5f       	subi	r22, 0xFF	; 255
    a0a0:	7f 4f       	sbci	r23, 0xFF	; 255
    a0a2:	8f 4f       	sbci	r24, 0xFF	; 255
    a0a4:	9f 4f       	sbci	r25, 0xFF	; 255
    a0a6:	08 95       	ret

0000a0a8 <__fp_split3>:
    a0a8:	57 fd       	sbrc	r21, 7
    a0aa:	90 58       	subi	r25, 0x80	; 128
    a0ac:	44 0f       	add	r20, r20
    a0ae:	55 1f       	adc	r21, r21
    a0b0:	59 f0       	breq	.+22     	; 0xa0c8 <__fp_splitA+0x10>
    a0b2:	5f 3f       	cpi	r21, 0xFF	; 255
    a0b4:	71 f0       	breq	.+28     	; 0xa0d2 <__fp_splitA+0x1a>
    a0b6:	47 95       	ror	r20

0000a0b8 <__fp_splitA>:
    a0b8:	88 0f       	add	r24, r24
    a0ba:	97 fb       	bst	r25, 7
    a0bc:	99 1f       	adc	r25, r25
    a0be:	61 f0       	breq	.+24     	; 0xa0d8 <__fp_splitA+0x20>
    a0c0:	9f 3f       	cpi	r25, 0xFF	; 255
    a0c2:	79 f0       	breq	.+30     	; 0xa0e2 <__fp_splitA+0x2a>
    a0c4:	87 95       	ror	r24
    a0c6:	08 95       	ret
    a0c8:	12 16       	cp	r1, r18
    a0ca:	13 06       	cpc	r1, r19
    a0cc:	14 06       	cpc	r1, r20
    a0ce:	55 1f       	adc	r21, r21
    a0d0:	f2 cf       	rjmp	.-28     	; 0xa0b6 <__fp_split3+0xe>
    a0d2:	46 95       	lsr	r20
    a0d4:	f1 df       	rcall	.-30     	; 0xa0b8 <__fp_splitA>
    a0d6:	08 c0       	rjmp	.+16     	; 0xa0e8 <__fp_splitA+0x30>
    a0d8:	16 16       	cp	r1, r22
    a0da:	17 06       	cpc	r1, r23
    a0dc:	18 06       	cpc	r1, r24
    a0de:	99 1f       	adc	r25, r25
    a0e0:	f1 cf       	rjmp	.-30     	; 0xa0c4 <__fp_splitA+0xc>
    a0e2:	86 95       	lsr	r24
    a0e4:	71 05       	cpc	r23, r1
    a0e6:	61 05       	cpc	r22, r1
    a0e8:	08 94       	sec
    a0ea:	08 95       	ret

0000a0ec <__fp_zero>:
    a0ec:	e8 94       	clt

0000a0ee <__fp_szero>:
    a0ee:	bb 27       	eor	r27, r27
    a0f0:	66 27       	eor	r22, r22
    a0f2:	77 27       	eor	r23, r23
    a0f4:	cb 01       	movw	r24, r22
    a0f6:	97 f9       	bld	r25, 7
    a0f8:	08 95       	ret

0000a0fa <__gesf2>:
    a0fa:	8a df       	rcall	.-236    	; 0xa010 <__fp_cmp>
    a0fc:	08 f4       	brcc	.+2      	; 0xa100 <__gesf2+0x6>
    a0fe:	8f ef       	ldi	r24, 0xFF	; 255
    a100:	08 95       	ret

0000a102 <__mulsf3>:
    a102:	0b d0       	rcall	.+22     	; 0xa11a <__mulsf3x>
    a104:	c0 cf       	rjmp	.-128    	; 0xa086 <__fp_round>
    a106:	b1 df       	rcall	.-158    	; 0xa06a <__fp_pscA>
    a108:	28 f0       	brcs	.+10     	; 0xa114 <__mulsf3+0x12>
    a10a:	b6 df       	rcall	.-148    	; 0xa078 <__fp_pscB>
    a10c:	18 f0       	brcs	.+6      	; 0xa114 <__mulsf3+0x12>
    a10e:	95 23       	and	r25, r21
    a110:	09 f0       	breq	.+2      	; 0xa114 <__mulsf3+0x12>
    a112:	a2 cf       	rjmp	.-188    	; 0xa058 <__fp_inf>
    a114:	a7 cf       	rjmp	.-178    	; 0xa064 <__fp_nan>
    a116:	11 24       	eor	r1, r1
    a118:	ea cf       	rjmp	.-44     	; 0xa0ee <__fp_szero>

0000a11a <__mulsf3x>:
    a11a:	c6 df       	rcall	.-116    	; 0xa0a8 <__fp_split3>
    a11c:	a0 f3       	brcs	.-24     	; 0xa106 <__mulsf3+0x4>

0000a11e <__mulsf3_pse>:
    a11e:	95 9f       	mul	r25, r21
    a120:	d1 f3       	breq	.-12     	; 0xa116 <__mulsf3+0x14>
    a122:	95 0f       	add	r25, r21
    a124:	50 e0       	ldi	r21, 0x00	; 0
    a126:	55 1f       	adc	r21, r21
    a128:	62 9f       	mul	r22, r18
    a12a:	f0 01       	movw	r30, r0
    a12c:	72 9f       	mul	r23, r18
    a12e:	bb 27       	eor	r27, r27
    a130:	f0 0d       	add	r31, r0
    a132:	b1 1d       	adc	r27, r1
    a134:	63 9f       	mul	r22, r19
    a136:	aa 27       	eor	r26, r26
    a138:	f0 0d       	add	r31, r0
    a13a:	b1 1d       	adc	r27, r1
    a13c:	aa 1f       	adc	r26, r26
    a13e:	64 9f       	mul	r22, r20
    a140:	66 27       	eor	r22, r22
    a142:	b0 0d       	add	r27, r0
    a144:	a1 1d       	adc	r26, r1
    a146:	66 1f       	adc	r22, r22
    a148:	82 9f       	mul	r24, r18
    a14a:	22 27       	eor	r18, r18
    a14c:	b0 0d       	add	r27, r0
    a14e:	a1 1d       	adc	r26, r1
    a150:	62 1f       	adc	r22, r18
    a152:	73 9f       	mul	r23, r19
    a154:	b0 0d       	add	r27, r0
    a156:	a1 1d       	adc	r26, r1
    a158:	62 1f       	adc	r22, r18
    a15a:	83 9f       	mul	r24, r19
    a15c:	a0 0d       	add	r26, r0
    a15e:	61 1d       	adc	r22, r1
    a160:	22 1f       	adc	r18, r18
    a162:	74 9f       	mul	r23, r20
    a164:	33 27       	eor	r19, r19
    a166:	a0 0d       	add	r26, r0
    a168:	61 1d       	adc	r22, r1
    a16a:	23 1f       	adc	r18, r19
    a16c:	84 9f       	mul	r24, r20
    a16e:	60 0d       	add	r22, r0
    a170:	21 1d       	adc	r18, r1
    a172:	82 2f       	mov	r24, r18
    a174:	76 2f       	mov	r23, r22
    a176:	6a 2f       	mov	r22, r26
    a178:	11 24       	eor	r1, r1
    a17a:	9f 57       	subi	r25, 0x7F	; 127
    a17c:	50 40       	sbci	r21, 0x00	; 0
    a17e:	8a f0       	brmi	.+34     	; 0xa1a2 <__mulsf3_pse+0x84>
    a180:	e1 f0       	breq	.+56     	; 0xa1ba <__mulsf3_pse+0x9c>
    a182:	88 23       	and	r24, r24
    a184:	4a f0       	brmi	.+18     	; 0xa198 <__mulsf3_pse+0x7a>
    a186:	ee 0f       	add	r30, r30
    a188:	ff 1f       	adc	r31, r31
    a18a:	bb 1f       	adc	r27, r27
    a18c:	66 1f       	adc	r22, r22
    a18e:	77 1f       	adc	r23, r23
    a190:	88 1f       	adc	r24, r24
    a192:	91 50       	subi	r25, 0x01	; 1
    a194:	50 40       	sbci	r21, 0x00	; 0
    a196:	a9 f7       	brne	.-22     	; 0xa182 <__mulsf3_pse+0x64>
    a198:	9e 3f       	cpi	r25, 0xFE	; 254
    a19a:	51 05       	cpc	r21, r1
    a19c:	70 f0       	brcs	.+28     	; 0xa1ba <__mulsf3_pse+0x9c>
    a19e:	5c cf       	rjmp	.-328    	; 0xa058 <__fp_inf>
    a1a0:	a6 cf       	rjmp	.-180    	; 0xa0ee <__fp_szero>
    a1a2:	5f 3f       	cpi	r21, 0xFF	; 255
    a1a4:	ec f3       	brlt	.-6      	; 0xa1a0 <__mulsf3_pse+0x82>
    a1a6:	98 3e       	cpi	r25, 0xE8	; 232
    a1a8:	dc f3       	brlt	.-10     	; 0xa1a0 <__mulsf3_pse+0x82>
    a1aa:	86 95       	lsr	r24
    a1ac:	77 95       	ror	r23
    a1ae:	67 95       	ror	r22
    a1b0:	b7 95       	ror	r27
    a1b2:	f7 95       	ror	r31
    a1b4:	e7 95       	ror	r30
    a1b6:	9f 5f       	subi	r25, 0xFF	; 255
    a1b8:	c1 f7       	brne	.-16     	; 0xa1aa <__mulsf3_pse+0x8c>
    a1ba:	fe 2b       	or	r31, r30
    a1bc:	88 0f       	add	r24, r24
    a1be:	91 1d       	adc	r25, r1
    a1c0:	96 95       	lsr	r25
    a1c2:	87 95       	ror	r24
    a1c4:	97 f9       	bld	r25, 7
    a1c6:	08 95       	ret

0000a1c8 <__udivmodhi4>:
    a1c8:	aa 1b       	sub	r26, r26
    a1ca:	bb 1b       	sub	r27, r27
    a1cc:	51 e1       	ldi	r21, 0x11	; 17
    a1ce:	07 c0       	rjmp	.+14     	; 0xa1de <__udivmodhi4_ep>

0000a1d0 <__udivmodhi4_loop>:
    a1d0:	aa 1f       	adc	r26, r26
    a1d2:	bb 1f       	adc	r27, r27
    a1d4:	a6 17       	cp	r26, r22
    a1d6:	b7 07       	cpc	r27, r23
    a1d8:	10 f0       	brcs	.+4      	; 0xa1de <__udivmodhi4_ep>
    a1da:	a6 1b       	sub	r26, r22
    a1dc:	b7 0b       	sbc	r27, r23

0000a1de <__udivmodhi4_ep>:
    a1de:	88 1f       	adc	r24, r24
    a1e0:	99 1f       	adc	r25, r25
    a1e2:	5a 95       	dec	r21
    a1e4:	a9 f7       	brne	.-22     	; 0xa1d0 <__udivmodhi4_loop>
    a1e6:	80 95       	com	r24
    a1e8:	90 95       	com	r25
    a1ea:	bc 01       	movw	r22, r24
    a1ec:	cd 01       	movw	r24, r26
    a1ee:	08 95       	ret

0000a1f0 <__divmodhi4>:
    a1f0:	97 fb       	bst	r25, 7
    a1f2:	07 2e       	mov	r0, r23
    a1f4:	16 f4       	brtc	.+4      	; 0xa1fa <__divmodhi4+0xa>
    a1f6:	00 94       	com	r0
    a1f8:	07 d0       	rcall	.+14     	; 0xa208 <__divmodhi4_neg1>
    a1fa:	77 fd       	sbrc	r23, 7
    a1fc:	09 d0       	rcall	.+18     	; 0xa210 <__divmodhi4_neg2>
    a1fe:	0e 94 e4 50 	call	0xa1c8	; 0xa1c8 <__udivmodhi4>
    a202:	07 fc       	sbrc	r0, 7
    a204:	05 d0       	rcall	.+10     	; 0xa210 <__divmodhi4_neg2>
    a206:	3e f4       	brtc	.+14     	; 0xa216 <__divmodhi4_exit>

0000a208 <__divmodhi4_neg1>:
    a208:	90 95       	com	r25
    a20a:	81 95       	neg	r24
    a20c:	9f 4f       	sbci	r25, 0xFF	; 255
    a20e:	08 95       	ret

0000a210 <__divmodhi4_neg2>:
    a210:	70 95       	com	r23
    a212:	61 95       	neg	r22
    a214:	7f 4f       	sbci	r23, 0xFF	; 255

0000a216 <__divmodhi4_exit>:
    a216:	08 95       	ret

0000a218 <__udivmodsi4>:
    a218:	a1 e2       	ldi	r26, 0x21	; 33
    a21a:	1a 2e       	mov	r1, r26
    a21c:	aa 1b       	sub	r26, r26
    a21e:	bb 1b       	sub	r27, r27
    a220:	fd 01       	movw	r30, r26
    a222:	0d c0       	rjmp	.+26     	; 0xa23e <__udivmodsi4_ep>

0000a224 <__udivmodsi4_loop>:
    a224:	aa 1f       	adc	r26, r26
    a226:	bb 1f       	adc	r27, r27
    a228:	ee 1f       	adc	r30, r30
    a22a:	ff 1f       	adc	r31, r31
    a22c:	a2 17       	cp	r26, r18
    a22e:	b3 07       	cpc	r27, r19
    a230:	e4 07       	cpc	r30, r20
    a232:	f5 07       	cpc	r31, r21
    a234:	20 f0       	brcs	.+8      	; 0xa23e <__udivmodsi4_ep>
    a236:	a2 1b       	sub	r26, r18
    a238:	b3 0b       	sbc	r27, r19
    a23a:	e4 0b       	sbc	r30, r20
    a23c:	f5 0b       	sbc	r31, r21

0000a23e <__udivmodsi4_ep>:
    a23e:	66 1f       	adc	r22, r22
    a240:	77 1f       	adc	r23, r23
    a242:	88 1f       	adc	r24, r24
    a244:	99 1f       	adc	r25, r25
    a246:	1a 94       	dec	r1
    a248:	69 f7       	brne	.-38     	; 0xa224 <__udivmodsi4_loop>
    a24a:	60 95       	com	r22
    a24c:	70 95       	com	r23
    a24e:	80 95       	com	r24
    a250:	90 95       	com	r25
    a252:	9b 01       	movw	r18, r22
    a254:	ac 01       	movw	r20, r24
    a256:	bd 01       	movw	r22, r26
    a258:	cf 01       	movw	r24, r30
    a25a:	08 95       	ret

0000a25c <__divmodsi4>:
    a25c:	05 2e       	mov	r0, r21
    a25e:	97 fb       	bst	r25, 7
    a260:	1e f4       	brtc	.+6      	; 0xa268 <__divmodsi4+0xc>
    a262:	00 94       	com	r0
    a264:	0e 94 45 51 	call	0xa28a	; 0xa28a <__negsi2>
    a268:	57 fd       	sbrc	r21, 7
    a26a:	07 d0       	rcall	.+14     	; 0xa27a <__divmodsi4_neg2>
    a26c:	0e 94 0c 51 	call	0xa218	; 0xa218 <__udivmodsi4>
    a270:	07 fc       	sbrc	r0, 7
    a272:	03 d0       	rcall	.+6      	; 0xa27a <__divmodsi4_neg2>
    a274:	4e f4       	brtc	.+18     	; 0xa288 <__divmodsi4_exit>
    a276:	0c 94 45 51 	jmp	0xa28a	; 0xa28a <__negsi2>

0000a27a <__divmodsi4_neg2>:
    a27a:	50 95       	com	r21
    a27c:	40 95       	com	r20
    a27e:	30 95       	com	r19
    a280:	21 95       	neg	r18
    a282:	3f 4f       	sbci	r19, 0xFF	; 255
    a284:	4f 4f       	sbci	r20, 0xFF	; 255
    a286:	5f 4f       	sbci	r21, 0xFF	; 255

0000a288 <__divmodsi4_exit>:
    a288:	08 95       	ret

0000a28a <__negsi2>:
    a28a:	90 95       	com	r25
    a28c:	80 95       	com	r24
    a28e:	70 95       	com	r23
    a290:	61 95       	neg	r22
    a292:	7f 4f       	sbci	r23, 0xFF	; 255
    a294:	8f 4f       	sbci	r24, 0xFF	; 255
    a296:	9f 4f       	sbci	r25, 0xFF	; 255
    a298:	08 95       	ret

0000a29a <__tablejump2__>:
    a29a:	ee 0f       	add	r30, r30
    a29c:	ff 1f       	adc	r31, r31

0000a29e <__tablejump__>:
    a29e:	05 90       	lpm	r0, Z+
    a2a0:	f4 91       	lpm	r31, Z
    a2a2:	e0 2d       	mov	r30, r0
    a2a4:	09 94       	ijmp

0000a2a6 <__mulhisi3>:
    a2a6:	0e 94 5b 51 	call	0xa2b6	; 0xa2b6 <__umulhisi3>
    a2aa:	33 23       	and	r19, r19
    a2ac:	12 f4       	brpl	.+4      	; 0xa2b2 <__mulhisi3+0xc>
    a2ae:	8a 1b       	sub	r24, r26
    a2b0:	9b 0b       	sbc	r25, r27
    a2b2:	0c 94 6c 51 	jmp	0xa2d8	; 0xa2d8 <__usmulhisi3_tail>

0000a2b6 <__umulhisi3>:
    a2b6:	a2 9f       	mul	r26, r18
    a2b8:	b0 01       	movw	r22, r0
    a2ba:	b3 9f       	mul	r27, r19
    a2bc:	c0 01       	movw	r24, r0
    a2be:	a3 9f       	mul	r26, r19
    a2c0:	70 0d       	add	r23, r0
    a2c2:	81 1d       	adc	r24, r1
    a2c4:	11 24       	eor	r1, r1
    a2c6:	91 1d       	adc	r25, r1
    a2c8:	b2 9f       	mul	r27, r18
    a2ca:	70 0d       	add	r23, r0
    a2cc:	81 1d       	adc	r24, r1
    a2ce:	11 24       	eor	r1, r1
    a2d0:	91 1d       	adc	r25, r1
    a2d2:	08 95       	ret

0000a2d4 <__usmulhisi3>:
    a2d4:	0e 94 5b 51 	call	0xa2b6	; 0xa2b6 <__umulhisi3>

0000a2d8 <__usmulhisi3_tail>:
    a2d8:	b7 ff       	sbrs	r27, 7
    a2da:	08 95       	ret
    a2dc:	82 1b       	sub	r24, r18
    a2de:	93 0b       	sbc	r25, r19
    a2e0:	08 95       	ret

0000a2e2 <__muluhisi3>:
    a2e2:	0e 94 5b 51 	call	0xa2b6	; 0xa2b6 <__umulhisi3>
    a2e6:	a5 9f       	mul	r26, r21
    a2e8:	90 0d       	add	r25, r0
    a2ea:	b4 9f       	mul	r27, r20
    a2ec:	90 0d       	add	r25, r0
    a2ee:	a4 9f       	mul	r26, r20
    a2f0:	80 0d       	add	r24, r0
    a2f2:	91 1d       	adc	r25, r1
    a2f4:	11 24       	eor	r1, r1
    a2f6:	08 95       	ret

0000a2f8 <__mulshisi3>:
    a2f8:	b7 ff       	sbrs	r27, 7
    a2fa:	0c 94 71 51 	jmp	0xa2e2	; 0xa2e2 <__muluhisi3>

0000a2fe <__mulohisi3>:
    a2fe:	0e 94 71 51 	call	0xa2e2	; 0xa2e2 <__muluhisi3>
    a302:	82 1b       	sub	r24, r18
    a304:	93 0b       	sbc	r25, r19
    a306:	08 95       	ret

0000a308 <memcpy_P>:
    a308:	fb 01       	movw	r30, r22
    a30a:	dc 01       	movw	r26, r24
    a30c:	02 c0       	rjmp	.+4      	; 0xa312 <memcpy_P+0xa>
    a30e:	05 90       	lpm	r0, Z+
    a310:	0d 92       	st	X+, r0
    a312:	41 50       	subi	r20, 0x01	; 1
    a314:	50 40       	sbci	r21, 0x00	; 0
    a316:	d8 f7       	brcc	.-10     	; 0xa30e <memcpy_P+0x6>
    a318:	08 95       	ret

0000a31a <memmove>:
    a31a:	68 17       	cp	r22, r24
    a31c:	79 07       	cpc	r23, r25
    a31e:	68 f4       	brcc	.+26     	; 0xa33a <memmove+0x20>
    a320:	fb 01       	movw	r30, r22
    a322:	dc 01       	movw	r26, r24
    a324:	e4 0f       	add	r30, r20
    a326:	f5 1f       	adc	r31, r21
    a328:	a4 0f       	add	r26, r20
    a32a:	b5 1f       	adc	r27, r21
    a32c:	02 c0       	rjmp	.+4      	; 0xa332 <memmove+0x18>
    a32e:	02 90       	ld	r0, -Z
    a330:	0e 92       	st	-X, r0
    a332:	41 50       	subi	r20, 0x01	; 1
    a334:	50 40       	sbci	r21, 0x00	; 0
    a336:	d8 f7       	brcc	.-10     	; 0xa32e <memmove+0x14>
    a338:	08 95       	ret
    a33a:	0c 94 ea 51 	jmp	0xa3d4	; 0xa3d4 <memcpy>

0000a33e <__itoa_ncheck>:
    a33e:	bb 27       	eor	r27, r27
    a340:	4a 30       	cpi	r20, 0x0A	; 10
    a342:	31 f4       	brne	.+12     	; 0xa350 <__itoa_ncheck+0x12>
    a344:	99 23       	and	r25, r25
    a346:	22 f4       	brpl	.+8      	; 0xa350 <__itoa_ncheck+0x12>
    a348:	bd e2       	ldi	r27, 0x2D	; 45
    a34a:	90 95       	com	r25
    a34c:	81 95       	neg	r24
    a34e:	9f 4f       	sbci	r25, 0xFF	; 255
    a350:	0c 94 ab 51 	jmp	0xa356	; 0xa356 <__utoa_common>

0000a354 <__utoa_ncheck>:
    a354:	bb 27       	eor	r27, r27

0000a356 <__utoa_common>:
    a356:	fb 01       	movw	r30, r22
    a358:	55 27       	eor	r21, r21
    a35a:	aa 27       	eor	r26, r26
    a35c:	88 0f       	add	r24, r24
    a35e:	99 1f       	adc	r25, r25
    a360:	aa 1f       	adc	r26, r26
    a362:	a4 17       	cp	r26, r20
    a364:	10 f0       	brcs	.+4      	; 0xa36a <__utoa_common+0x14>
    a366:	a4 1b       	sub	r26, r20
    a368:	83 95       	inc	r24
    a36a:	50 51       	subi	r21, 0x10	; 16
    a36c:	b9 f7       	brne	.-18     	; 0xa35c <__utoa_common+0x6>
    a36e:	a0 5d       	subi	r26, 0xD0	; 208
    a370:	aa 33       	cpi	r26, 0x3A	; 58
    a372:	08 f0       	brcs	.+2      	; 0xa376 <__utoa_common+0x20>
    a374:	a9 5d       	subi	r26, 0xD9	; 217
    a376:	a1 93       	st	Z+, r26
    a378:	00 97       	sbiw	r24, 0x00	; 0
    a37a:	79 f7       	brne	.-34     	; 0xa35a <__utoa_common+0x4>
    a37c:	b1 11       	cpse	r27, r1
    a37e:	b1 93       	st	Z+, r27
    a380:	11 92       	st	Z+, r1
    a382:	cb 01       	movw	r24, r22
    a384:	0c 94 f3 51 	jmp	0xa3e6	; 0xa3e6 <strrev>

0000a388 <__eerd_block_m644pa>:
    a388:	dc 01       	movw	r26, r24
    a38a:	cb 01       	movw	r24, r22

0000a38c <__eerd_blraw_m644pa>:
    a38c:	fc 01       	movw	r30, r24
    a38e:	f9 99       	sbic	0x1f, 1	; 31
    a390:	fe cf       	rjmp	.-4      	; 0xa38e <__eerd_blraw_m644pa+0x2>
    a392:	06 c0       	rjmp	.+12     	; 0xa3a0 <__eerd_blraw_m644pa+0x14>
    a394:	f2 bd       	out	0x22, r31	; 34
    a396:	e1 bd       	out	0x21, r30	; 33
    a398:	f8 9a       	sbi	0x1f, 0	; 31
    a39a:	31 96       	adiw	r30, 0x01	; 1
    a39c:	00 b4       	in	r0, 0x20	; 32
    a39e:	0d 92       	st	X+, r0
    a3a0:	41 50       	subi	r20, 0x01	; 1
    a3a2:	50 40       	sbci	r21, 0x00	; 0
    a3a4:	b8 f7       	brcc	.-18     	; 0xa394 <__eerd_blraw_m644pa+0x8>
    a3a6:	08 95       	ret

0000a3a8 <__eerd_byte_m644pa>:
    a3a8:	f9 99       	sbic	0x1f, 1	; 31
    a3aa:	fe cf       	rjmp	.-4      	; 0xa3a8 <__eerd_byte_m644pa>
    a3ac:	92 bd       	out	0x22, r25	; 34
    a3ae:	81 bd       	out	0x21, r24	; 33
    a3b0:	f8 9a       	sbi	0x1f, 0	; 31
    a3b2:	99 27       	eor	r25, r25
    a3b4:	80 b5       	in	r24, 0x20	; 32
    a3b6:	08 95       	ret

0000a3b8 <__eewr_byte_m644pa>:
    a3b8:	26 2f       	mov	r18, r22

0000a3ba <__eewr_r18_m644pa>:
    a3ba:	f9 99       	sbic	0x1f, 1	; 31
    a3bc:	fe cf       	rjmp	.-4      	; 0xa3ba <__eewr_r18_m644pa>
    a3be:	1f ba       	out	0x1f, r1	; 31
    a3c0:	92 bd       	out	0x22, r25	; 34
    a3c2:	81 bd       	out	0x21, r24	; 33
    a3c4:	20 bd       	out	0x20, r18	; 32
    a3c6:	0f b6       	in	r0, 0x3f	; 63
    a3c8:	f8 94       	cli
    a3ca:	fa 9a       	sbi	0x1f, 2	; 31
    a3cc:	f9 9a       	sbi	0x1f, 1	; 31
    a3ce:	0f be       	out	0x3f, r0	; 63
    a3d0:	01 96       	adiw	r24, 0x01	; 1
    a3d2:	08 95       	ret

0000a3d4 <memcpy>:
    a3d4:	fb 01       	movw	r30, r22
    a3d6:	dc 01       	movw	r26, r24
    a3d8:	02 c0       	rjmp	.+4      	; 0xa3de <memcpy+0xa>
    a3da:	01 90       	ld	r0, Z+
    a3dc:	0d 92       	st	X+, r0
    a3de:	41 50       	subi	r20, 0x01	; 1
    a3e0:	50 40       	sbci	r21, 0x00	; 0
    a3e2:	d8 f7       	brcc	.-10     	; 0xa3da <memcpy+0x6>
    a3e4:	08 95       	ret

0000a3e6 <strrev>:
    a3e6:	dc 01       	movw	r26, r24
    a3e8:	fc 01       	movw	r30, r24
    a3ea:	67 2f       	mov	r22, r23
    a3ec:	71 91       	ld	r23, Z+
    a3ee:	77 23       	and	r23, r23
    a3f0:	e1 f7       	brne	.-8      	; 0xa3ea <strrev+0x4>
    a3f2:	32 97       	sbiw	r30, 0x02	; 2
    a3f4:	04 c0       	rjmp	.+8      	; 0xa3fe <strrev+0x18>
    a3f6:	7c 91       	ld	r23, X
    a3f8:	6d 93       	st	X+, r22
    a3fa:	70 83       	st	Z, r23
    a3fc:	62 91       	ld	r22, -Z
    a3fe:	ae 17       	cp	r26, r30
    a400:	bf 07       	cpc	r27, r31
    a402:	c8 f3       	brcs	.-14     	; 0xa3f6 <strrev+0x10>
    a404:	08 95       	ret

0000a406 <_exit>:
    a406:	f8 94       	cli

0000a408 <__stop_program>:
    a408:	ff cf       	rjmp	.-2      	; 0xa408 <__stop_program>
