
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000426  00800100  0000da8e  0000db22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000da8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000440  00800526  00800526  0000df48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000df48  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000778  00000000  00000000  0000df78  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001d6c8  00000000  00000000  0000e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000044e3  00000000  00000000  0002bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005181  00000000  00000000  0003029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001914  00000000  00000000  0003541c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000033f5  00000000  00000000  00036d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000c295  00000000  00000000  0003a125  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006a0  00000000  00000000  000463ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__ctors_end>
       4:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__vector_1>
       8:	0c 94 82 41 	jmp	0x8304	; 0x8304 <__vector_2>
       c:	0c 94 95 42 	jmp	0x852a	; 0x852a <__vector_3>
      10:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      14:	0c 94 4a 42 	jmp	0x8494	; 0x8494 <__vector_5>
      18:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      1c:	0c 94 07 42 	jmp	0x840e	; 0x840e <__vector_7>
      20:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      24:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      28:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      2c:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      30:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      34:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      38:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      3c:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      40:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      44:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      48:	0c 94 6b 41 	jmp	0x82d6	; 0x82d6 <__vector_18>
      4c:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      50:	0c 94 63 43 	jmp	0x86c6	; 0x86c6 <__vector_20>
      54:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      58:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      5c:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      60:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      64:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      68:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      6c:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      70:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      74:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      78:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__bad_interrupt>
      7c:	b1 2d       	mov	r27, r1
      7e:	bf 2d       	mov	r27, r15
      80:	bf 2d       	mov	r27, r15
      82:	bf 2d       	mov	r27, r15
      84:	b3 2d       	mov	r27, r3
      86:	bf 2d       	mov	r27, r15
      88:	bf 2d       	mov	r27, r15
      8a:	bf 2d       	mov	r27, r15
      8c:	b5 2d       	mov	r27, r5
      8e:	b7 2d       	mov	r27, r7
      90:	b9 2d       	mov	r27, r9
      92:	bb 2d       	mov	r27, r11
      94:	c1 2d       	mov	r28, r1
      96:	59 2e       	mov	r5, r25
      98:	d9 2e       	mov	r13, r25
      9a:	d9 2e       	mov	r13, r25
      9c:	6b 2e       	mov	r6, r27
      9e:	79 2e       	mov	r7, r25
      a0:	85 2e       	mov	r8, r21
      a2:	80 2e       	mov	r8, r16
      a4:	9b 2e       	mov	r9, r27
      a6:	aa 2e       	mov	r10, r26
      a8:	b0 2e       	mov	r11, r16
      aa:	c3 2e       	mov	r12, r19
      ac:	57 4c       	sbci	r21, 0xC7	; 199
      ae:	59 4c       	sbci	r21, 0xC9	; 201
      b0:	5b 4c       	sbci	r21, 0xCB	; 203
      b2:	5d 4c       	sbci	r21, 0xCD	; 205
      b4:	5f 4c       	sbci	r21, 0xCF	; 207
      b6:	61 4c       	sbci	r22, 0xC1	; 193
      b8:	63 4c       	sbci	r22, 0xC3	; 195
      ba:	63 4c       	sbci	r22, 0xC3	; 195
      bc:	b2 4c       	sbci	r27, 0xC2	; 194
      be:	b6 4c       	sbci	r27, 0xC6	; 198
      c0:	ba 4c       	sbci	r27, 0xCA	; 202
      c2:	bd 4c       	sbci	r27, 0xCD	; 205
      c4:	c1 4c       	sbci	r28, 0xC1	; 193
      c6:	c5 4c       	sbci	r28, 0xC5	; 197
      c8:	c9 4c       	sbci	r28, 0xC9	; 201
      ca:	cd 4c       	sbci	r28, 0xCD	; 205
      cc:	da 4c       	sbci	r29, 0xCA	; 202
      ce:	de 4c       	sbci	r29, 0xCE	; 206
      d0:	e2 4c       	sbci	r30, 0xC2	; 194
      d2:	eb 4c       	sbci	r30, 0xCB	; 203
      d4:	ef 4c       	sbci	r30, 0xCF	; 207
      d6:	f3 4c       	sbci	r31, 0xC3	; 195
      d8:	f7 4c       	sbci	r31, 0xC7	; 199
      da:	ef 4d       	sbci	r30, 0xDF	; 223
      dc:	f3 4d       	sbci	r31, 0xD3	; 211
      de:	f8 4d       	sbci	r31, 0xD8	; 216
      e0:	fb 4d       	sbci	r31, 0xDB	; 219
      e2:	ff 4d       	sbci	r31, 0xDF	; 223
      e4:	03 4e       	sbci	r16, 0xE3	; 227
      e6:	07 4e       	sbci	r16, 0xE7	; 231
      e8:	0b 4e       	sbci	r16, 0xEB	; 235
      ea:	18 4e       	sbci	r17, 0xE8	; 232
      ec:	1c 4e       	sbci	r17, 0xEC	; 236
      ee:	20 4e       	sbci	r18, 0xE0	; 224
      f0:	29 4e       	sbci	r18, 0xE9	; 233
      f2:	2d 4e       	sbci	r18, 0xED	; 237
      f4:	31 4e       	sbci	r19, 0xE1	; 225
      f6:	35 4e       	sbci	r19, 0xE5	; 229
      f8:	3c 4e       	sbci	r19, 0xEC	; 236
      fa:	f3 50       	subi	r31, 0x03	; 3
      fc:	f5 50       	subi	r31, 0x05	; 5
      fe:	f8 50       	subi	r31, 0x08	; 8
     100:	fa 50       	subi	r31, 0x0A	; 10
     102:	fc 50       	subi	r31, 0x0C	; 12
     104:	fe 50       	subi	r31, 0x0E	; 14
     106:	00 51       	subi	r16, 0x10	; 16
     108:	02 51       	subi	r16, 0x12	; 18
     10a:	05 51       	subi	r16, 0x15	; 21
     10c:	07 51       	subi	r16, 0x17	; 23
     10e:	09 51       	subi	r16, 0x19	; 25
     110:	0b 51       	subi	r16, 0x1B	; 27
     112:	0e 51       	subi	r16, 0x1E	; 30
     114:	10 51       	subi	r17, 0x10	; 16
     116:	12 51       	subi	r17, 0x12	; 18
     118:	14 51       	subi	r17, 0x14	; 20
     11a:	16 51       	subi	r17, 0x16	; 22
     11c:	18 51       	subi	r17, 0x18	; 24
     11e:	1a 51       	subi	r17, 0x1A	; 26
     120:	1c 51       	subi	r17, 0x1C	; 28
     122:	1e 51       	subi	r17, 0x1E	; 30
     124:	21 51       	subi	r18, 0x11	; 17
     126:	23 51       	subi	r18, 0x13	; 19
     128:	25 51       	subi	r18, 0x15	; 21
     12a:	bd 55       	subi	r27, 0x5D	; 93
     12c:	a1 55       	subi	r26, 0x51	; 81
     12e:	a4 55       	subi	r26, 0x54	; 84
     130:	a7 55       	subi	r26, 0x57	; 87
     132:	aa 55       	subi	r26, 0x5A	; 90
     134:	ad 55       	subi	r26, 0x5D	; 93
     136:	b0 55       	subi	r27, 0x50	; 80
     138:	b3 55       	subi	r27, 0x53	; 83
     13a:	b6 55       	subi	r27, 0x56	; 86

0000013c <Acc_Pol>:
     13c:	ff ff 01 01 ff 01 01 01 01 ff 01 01 ff ff ff 01     ................
     14c:	ff ff 01 ff 01 ff ff 01 01 ff ff ff ff ff ff 01     ................
     15c:	ff 01 01 ff 01 01 ff ff 01 ff ff 01 01 01 01 01     ................
     16c:	01 ff ff 01 01 ff 01 01 01 01 ff 01 ff 01 ff ff     ................
     17c:	ff ff ff ff 01 ff 01 01                             ........

00000184 <ACC_RPY_Order>:
     184:	00 01 02 01 00 02 00 01 02 01 00 02 00 02 01 01     ................
     194:	02 00 00 02 01 01 02 00 00 01 02 01 00 02 00 01     ................
     1a4:	02 01 00 02 00 02 01 01 02 00 00 02 01 01 02 00     ................
     1b4:	02 00 01 02 01 00 02 00 01 02 01 00 02 00 01 02     ................
     1c4:	01 00 02 00 01 02 01 00                             ........

000001cc <MPX>:
     1cc:	01 02 03 05 00 04 06 07                             ........

000001d4 <FUTABA>:
     1d4:	01 02 00 03 04 05 06 07                             ........

000001dc <JR>:
     1dc:	00 01 02 03 04 05 06 07                             ........

000001e4 <Trans_Matrix>:
     1e4:	05 02 06 01 05 08 03 07 05                          .........

000001ed <Wingdings>:
     1ed:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     1fd:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     20d:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     21d:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     22d:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     23d:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     24d:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000257 <Verdana22>:
     257:	01 02 2d 0d 1d 00 1f 00 44 00 44 00 44 00 7d 00     ..-.....D.D.D.}.
     267:	aa 00 e3 01 1c 01 5d 01 92 01 cb 02 04 02 3d 09     ......].......=.
     277:	00 70 00 00 00 70 00 00 00 70 00 00 00 70 00 00     .p...p...p...p..
     287:	00 70 00 00 00 70 00 00 00 70 00 00 00 70 00 00     .p...p...p...p..
     297:	00 70 00 00 0e 80 ff 01 00 f0 ff 0f 00 f8 ff 1f     .p..............
     2a7:	00 7c 00 3e 00 1e 00 78 00 0e 00 70 00 0e 00 70     .|.>...x...p...p
     2b7:	00 0e 00 70 00 0e 00 70 00 1e 00 78 00 7c 00 3e     ...p...p...x.|.>
     2c7:	00 f8 ff 1f 00 f0 ff 0f 00 80 ff 01 00 0b 70 00     ..............p.
     2d7:	70 00 70 00 70 00 70 00 70 00 78 00 70 00 fc ff     p.p.p.p.p.x.p...
     2e7:	7f 00 fe ff 7f 00 fe ff 7f 00 00 00 70 00 00 00     ............p...
     2f7:	70 00 00 00 70 00 00 00 70 00 0e 00 00 78 00 1c     p...p...p....x..
     307:	00 7c 00 1c 00 7e 00 0e 00 77 00 0e 00 77 00 0e     .|...~...w...w..
     317:	80 73 00 0e c0 71 00 0e e0 70 00 1e 78 70 00 1e     .s...q...p..xp..
     327:	3c 70 00 fc 1f 70 00 f8 07 70 00 f0 03 70 00 00     <p...p...p...p..
     337:	00 70 00 0e 00 00 38 00 1c 00 38 00 1c 00 70 00     .p....8...8...p.
     347:	0e 00 70 00 0e 00 70 00 0e 1c 70 00 0e 1c 70 00     ..p...p...p...p.
     357:	0e 1c 70 00 0e 1c 70 00 0e 3e 78 00 1c 37 3c 00     ..p...p..>x..7<.
     367:	fc f3 3f 00 f8 e3 1f 00 f0 c0 07 00 10 00 e0 01     ..?.............
     377:	00 00 f0 01 00 00 fc 01 00 00 fe 01 00 00 df 01     ................
     387:	00 80 cf 01 00 e0 c3 01 00 f0 c1 01 00 f8 c0 01     ................
     397:	00 7c c0 01 00 fe ff 7f 00 fe ff 7f 00 fe ff 7f     .|..............
     3a7:	00 00 c0 01 00 00 c0 01 00 00 c0 01 00 0d 00 00     ................
     3b7:	38 00 fe 1f 38 00 fe 0f 70 00 fe 0f 70 00 0e 0e     8...8...p...p...
     3c7:	70 00 0e 0e 70 00 0e 0e 70 00 0e 0e 70 00 0e 1e     p...p...p...p...
     3d7:	78 00 0e 3c 3c 00 0e fc 1f 00 0e f8 0f 00 0e e0     x..<<...........
     3e7:	07 00 0e 00 fe 03 00 c0 ff 0f 00 f0 ff 1f 00 f8     ................
     3f7:	1c 3e 00 3c 0c 78 00 1c 0e 70 00 1e 0e 70 00 0e     .>.<.x...p...p..
     407:	0e 70 00 0e 0e 70 00 0e 1e 78 00 0e 3c 3c 00 1e     .p...p...x..<<..
     417:	fc 1f 00 00 f8 0f 00 00 e0 07 00 0e 0e 00 00 00     ................
     427:	0e 00 00 00 0e 00 40 00 0e 00 70 00 0e 00 7c 00     ......@...p...|.
     437:	0e 00 7f 00 0e c0 1f 00 0e f0 07 00 0e fc 00 00     ................
     447:	0e 3f 00 00 ce 0f 00 00 fe 03 00 00 fe 00 00 00     .?..............
     457:	3e 00 00 00 0e 00 c0 07 00 f0 e1 1f 00 f8 f3 3f     >..............?
     467:	00 fc 3f 3c 00 1e 1f 78 00 0e 0e 70 00 0e 0c 70     ..?<...x...p...p
     477:	00 0e 1c 70 00 0e 18 70 00 1e 3c 78 00 fc 7f 3c     ...p...p..<x...<
     487:	00 f8 f3 3f 00 f0 e1 1f 00 00 c0 07 00 0e e0 07     ...?............
     497:	00 00 f0 1f 00 00 f8 3f 78 00 3c 3c 70 00 1e 78     .......?x.<<p..x
     4a7:	70 00 0e 70 70 00 0e 70 70 00 0e 70 78 00 0e 70     p..pp..pp..px..p
     4b7:	38 00 1e 30 3c 00 7c 38 1f 00 f8 ff 0f 00 f0 ff     8..0<.|8........
     4c7:	03 00 c0 7f 00 00                                   ......

000004cd <Verdana14>:
     4cd:	01 02 20 5f 13 00 c3 00 cd 00 d4 00 e7 01 0c 01     .. _............
     4dd:	28 01 5f 01 87 01 8e 01 a1 01 b4 01 d0 01 f5 02     (._.............
     4ed:	02 02 15 02 1c 02 35 02 54 02 6d 02 89 02 a5 02     ......5.T.m.....
     4fd:	c4 02 e0 02 ff 03 1b 03 3a 03 59 03 60 03 6d 03     ........:.Y.`.m.
     50d:	8f 03 b1 03 d3 03 ec 04 1d 04 45 04 64 04 86 04     ..........E.d...
     51d:	ab 04 c7 04 e3 05 0b 05 2a 05 3d 05 53 05 75 05     ........*.=.S.u.
     52d:	91 05 b6 05 d5 05 fd 06 16 06 3e 06 60 06 82 06     ..........>.`...
     53d:	a7 06 c6 06 ee 07 22 07 44 07 69 07 8b 07 9b 07     ......".D.i.....
     54d:	b4 07 c4 07 e9 08 0e 08 1b 08 34 08 50 08 69 08     ..........4.P.i.
     55d:	85 08 a1 08 b4 08 d0 08 e9 08 f0 09 00 09 1c 09     ................
     56d:	23 09 4e 09 67 09 86 09 a2 09 be 09 d1 09 ea 09     #.N.g...........
     57d:	fd 0a 16 0a 32 0a 5d 0a 79 0a 95 0a ae 0a ca 0a     ....2.].y.......
     58d:	d1 0a ed 03 00 00 00 00 00 00 00 00 00 02 fe 67     ...............g
     59d:	00 fe 67 00 06 1f 00 00 1f 00 00 00 00 00 00 00     ..g.............
     5ad:	00 1f 00 00 1f 00 00 0c 00 04 00 20 04 00 20 64     ........... .. d
     5bd:	00 20 1f 00 f8 04 00 26 04 00 20 64 00 20 1f 00     . .....&.. d. ..
     5cd:	f8 04 00 26 04 00 20 04 00 20 00 00 09 e0 30 00     ...&.. .. ....0.
     5dd:	f0 61 00 98 61 00 18 63 00 ff ff 03 18 63 00 18     .a..a..c.....c..
     5ed:	62 00 18 3e 00 18 1c 00 12 78 00 00 fe 01 00 02     b..>.....x......
     5fd:	01 00 02 01 00 02 01 00 fe 41 00 78 70 00 00 1c     .........A.xp...
     60d:	00 00 07 00 e0 00 00 38 00 00 0e 1e 00 82 7f 00     .......8........
     61d:	80 40 00 80 40 00 80 40 00 80 7f 00 00 1e 00 0d     .@..@..@........
     62d:	00 1e 00 3c 3f 00 fc 71 00 c6 60 00 c6 60 00 c6     ...<?..q..`..`..
     63d:	61 00 7e 63 00 3c 36 00 00 1c 00 80 1f 00 80 37     a.~c.<6........7
     64d:	00 00 60 00 00 40 00 02 1f 00 00 1f 00 00 06 c0     ..`..@..........
     65d:	1f 00 f8 ff 00 3c e0 01 07 00 07 03 00 06 01 00     .....<..........
     66d:	04 06 01 00 04 03 00 06 07 00 07 3c e0 01 f8 ff     ...........<....
     67d:	00 c0 1f 00 09 c6 00 00 44 00 00 6c 00 00 28 00     ........D..l..(.
     68d:	00 ff 01 00 28 00 00 6c 00 00 44 00 00 c6 00 00     ....(..l..D.....
     69d:	0c 00 03 00 00 03 00 00 03 00 00 03 00 00 03 00     ................
     6ad:	f8 7f 00 f8 7f 00 00 03 00 00 03 00 00 03 00 00     ................
     6bd:	03 00 00 03 00 04 00 00 03 00 f0 03 00 70 00 00     .............p..
     6cd:	10 00 06 00 03 00 00 03 00 00 03 00 00 03 00 00     ................
     6dd:	03 00 00 03 00 02 00 70 00 00 70 00 08 00 00 03     .......p..p.....
     6ed:	00 e0 03 00 fc 01 80 3f 00 f0 07 00 fe 00 00 1f     .......?........
     6fd:	00 00 03 00 00 0a f0 0f 00 fc 3f 00 0c 30 00 06     ..........?..0..
     70d:	60 00 06 60 00 06 60 00 06 60 00 0c 30 00 fc 3f     `..`..`..`..0..?
     71d:	00 f0 0f 00 08 18 60 00 18 60 00 18 60 00 fe 7f     ......`..`..`...
     72d:	00 fe 7f 00 00 60 00 00 60 00 00 60 00 09 0c 70     .....`..`..`...p
     73d:	00 06 78 00 06 6c 00 06 66 00 06 63 00 8e 61 00     ..x..l..f..c..a.
     74d:	fc 60 00 78 60 00 00 60 00 09 0c 30 00 06 60 00     .`.x`..`...0..`.
     75d:	06 60 00 86 61 00 86 61 00 86 61 00 ce 73 00 7c     .`..a..a..a..s.|
     76d:	3f 00 38 1e 00 0a 00 07 00 80 07 00 c0 07 00 f0     ?.8.............
     77d:	06 00 38 06 00 1c 06 00 fe 7f 00 fe 7f 00 00 06     ..8.............
     78d:	00 00 06 00 09 00 30 00 fe 60 00 fe 60 00 c6 60     ......0..`..`..`
     79d:	00 c6 60 00 c6 60 00 c6 31 00 86 3f 00 06 0f 00     ..`..`..1..?....
     7ad:	0a e0 0f 00 f0 3f 00 9c 30 00 cc 60 00 c6 60 00     .....?..0..`..`.
     7bd:	c6 60 00 c6 60 00 c6 31 00 86 3f 00 00 0f 00 09     .`..`..1..?.....
     7cd:	06 00 00 06 40 00 06 70 00 06 7c 00 06 0f 00 c6     ....@..p..|.....
     7dd:	03 00 f6 00 00 3e 00 00 0e 00 00 0a 38 1e 00 7c     .....>......8..|
     7ed:	3f 00 ce 71 00 c6 60 00 c6 60 00 86 61 00 86 61     ?..q..`..`..a..a
     7fd:	00 4e 73 00 7c 3f 00 38 1e 00 0a f0 00 00 fc 61     .Ns.|?.8.......a
     80d:	00 8c 63 00 06 63 00 06 63 00 06 63 00 06 33 00     ..c..c..c..c..3.
     81d:	0c 39 00 fc 1f 00 f0 07 00 02 70 70 00 70 70 00     .9........pp.pp.
     82d:	04 00 00 03 70 f0 03 70 70 00 00 10 00 0b 00 01     ....p..pp.......
     83d:	00 80 03 00 80 03 00 c0 06 00 c0 06 00 60 0c 00     .............`..
     84d:	60 0c 00 30 18 00 30 18 00 18 30 00 18 30 00 0b     `..0..0...0..0..
     85d:	c0 0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0     ................
     86d:	0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0 0c 00 c0 0c     ................
     87d:	00 0b 18 30 00 18 30 00 30 18 00 30 18 00 60 0c     ...0..0.0..0..`.
     88d:	00 60 0c 00 c0 06 00 c0 06 00 80 03 00 80 03 00     .`..............
     89d:	00 01 00 08 0c 00 00 06 00 00 06 67 00 06 67 00     ...........g..g.
     8ad:	86 01 00 ce 00 00 fc 00 00 38 00 00 10 c0 0f 00     .........8......
     8bd:	f0 3f 00 38 70 00 0c c0 00 84 8f 00 c6 9f 01 62     .?.8p..........b
     8cd:	30 01 22 20 01 22 20 01 22 10 01 e2 3f 01 e4 bf     0." ." ."...?...
     8dd:	01 0c 20 00 38 20 00 f0 3f 00 c0 0f 00 0d 00 40     .. .8 ..?......@
     8ed:	00 00 78 00 00 3f 00 c0 07 00 f8 06 00 3e 06 00     ..x..?.......>..
     8fd:	06 06 00 3e 06 00 f8 06 00 c0 07 00 00 3f 00 00     ...>.........?..
     90d:	78 00 00 40 00 0a fe 7f 00 fe 7f 00 86 61 00 86     x..@.........a..
     91d:	61 00 86 61 00 86 61 00 c6 61 00 7c 73 00 3c 3f     a..a..a..a.|s.<?
     92d:	00 00 1e 00 0b e0 07 00 f8 1f 00 1c 38 00 0c 30     ............8..0
     93d:	00 06 60 00 06 60 00 06 60 00 06 60 00 06 60 00     ..`..`..`..`..`.
     94d:	06 20 00 0c 30 00 0c fe 7f 00 fe 7f 00 06 60 00     . ..0.........`.
     95d:	06 60 00 06 60 00 06 60 00 06 60 00 0e 70 00 0c     .`..`..`..`..p..
     96d:	30 00 38 1c 00 f8 0f 00 e0 07 00 09 fe 7f 00 fe     0.8.............
     97d:	7f 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 c6 60     ...`..`..`..`..`
     98d:	00 c6 60 00 c6 60 00 09 fe 7f 00 fe 7f 00 86 01     ..`..`..........
     99d:	00 86 01 00 86 01 00 86 01 00 86 01 00 86 01 00     ................
     9ad:	06 00 00 0d e0 07 00 f8 1f 00 3c 3c 00 0c 30 00     ..........<<..0.
     9bd:	0e 70 00 06 60 00 06 60 00 06 63 00 06 63 00 06     .p..`..`..c..c..
     9cd:	63 00 06 63 00 0c 3f 00 0c 3f 00 0a fe 7f 00 fe     c..c..?..?......
     9dd:	7f 00 c0 00 00 c0 00 00 c0 00 00 c0 00 00 c0 00     ................
     9ed:	00 c0 00 00 fe 7f 00 fe 7f 00 06 06 60 00 06 60     ............`..`
     9fd:	00 fe 7f 00 fe 7f 00 06 60 00 06 60 00 07 00 60     ........`..`...`
     a0d:	00 00 60 00 06 60 00 06 60 00 06 70 00 fe 3f 00     ..`..`..`..p..?.
     a1d:	fe 1f 00 0b fe 7f 00 fe 7f 00 80 03 00 c0 01 00     ................
     a2d:	e0 03 00 70 07 00 38 1c 00 1c 38 00 0e 70 00 06     ...p..8...8..p..
     a3d:	60 00 02 40 00 09 fe 7f 00 fe 7f 00 00 60 00 00     `..@.........`..
     a4d:	60 00 00 60 00 00 60 00 00 60 00 00 60 00 00 60     `..`..`..`..`..`
     a5d:	00 0c fe 7f 00 fe 7f 00 0e 00 00 38 00 00 e0 01     ...........8....
     a6d:	00 80 07 00 00 07 00 e0 01 00 38 00 00 0e 00 00     ..........8.....
     a7d:	fe 7f 00 fe 7f 00 0a fe 7f 00 fe 7f 00 0e 00 00     ................
     a8d:	3c 00 00 e0 00 00 80 03 00 00 1e 00 00 78 00 fe     <............x..
     a9d:	7f 00 fe 7f 00 0d e0 07 00 f8 1f 00 1c 38 00 0c     .............8..
     aad:	30 00 06 60 00 06 60 00 06 60 00 06 60 00 06 60     0..`..`..`..`..`
     abd:	00 0c 30 00 1c 38 00 f8 1f 00 e0 07 00 08 fe 7f     ..0..8..........
     acd:	00 fe 7f 00 06 03 00 06 03 00 06 03 00 8e 03 00     ................
     add:	fc 01 00 f8 00 00 0d e0 07 00 f8 1f 00 1c 38 00     ..............8.
     aed:	0c 30 00 06 60 00 06 60 00 06 60 00 06 e0 01 06     .0..`..`..`.....
     afd:	e0 03 0c 30 07 1c 38 06 f8 1f 06 e0 07 06 0b fe     ...0..8.........
     b0d:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 07     ................
     b1d:	00 ce 0e 00 fc 1c 00 78 70 00 00 60 00 00 40 00     .......xp..`..@.
     b2d:	0b 78 30 00 fc 70 00 ce 60 00 86 61 00 86 61 00     .x0..p..`..a..a.
     b3d:	86 61 00 86 61 00 86 61 00 06 33 00 0c 3f 00 00     .a..a..a..3..?..
     b4d:	1e 00 0c 06 00 00 06 00 00 06 00 00 06 00 00 06     ................
     b5d:	00 00 fe 7f 00 fe 7f 00 06 00 00 06 00 00 06 00     ................
     b6d:	00 06 00 00 06 00 00 0a fe 0f 00 fe 3f 00 00 70     ............?..p
     b7d:	00 00 60 00 00 60 00 00 60 00 00 60 00 00 70 00     ..`..`..`..`..p.
     b8d:	fe 3f 00 fe 0f 00 0d 02 00 00 1e 00 00 fc 00 00     .?..............
     b9d:	e0 03 00 80 1f 00 00 7c 00 00 60 00 00 7c 00 80     .......|..`..|..
     bad:	1f 00 e0 03 00 fc 00 00 1e 00 00 02 00 00 11 06     ................
     bbd:	00 00 7e 00 00 f8 07 00 80 3f 00 00 78 00 00 7c     ..~......?..x..|
     bcd:	00 c0 0f 00 7e 00 00 06 00 00 7e 00 00 e0 07 00     ....~.....~.....
     bdd:	00 7e 00 00 70 00 80 7f 00 f8 07 00 7e 00 00 06     .~..p.......~...
     bed:	00 00 0b 02 40 00 06 60 00 1e 78 00 38 1c 00 e0     ....@..`..x.8...
     bfd:	07 00 80 01 00 e0 07 00 38 1e 00 1e 78 00 06 60     ........8...x..`
     c0d:	00 02 40 00 0c 02 00 00 06 00 00 1e 00 00 78 00     ..@...........x.
     c1d:	00 e0 00 00 c0 7f 00 c0 7f 00 e0 00 00 78 00 00     .............x..
     c2d:	1e 00 00 06 00 00 02 00 00 0b 06 70 00 06 78 00     ...........p..x.
     c3d:	06 7c 00 06 6e 00 06 67 00 c6 63 00 e6 60 00 76     .|..n..g..c..`.v
     c4d:	60 00 3e 60 00 1e 60 00 0e 60 00 05 ff ff 07 ff     `.>`..`..`......
     c5d:	ff 07 01 00 04 01 00 04 01 00 04 08 03 00 00 1f     ................
     c6d:	00 00 fe 00 00 f0 07 00 80 3f 00 00 fc 01 00 e0     .........?......
     c7d:	03 00 00 03 05 01 00 04 01 00 04 01 00 04 ff ff     ................
     c8d:	07 ff ff 07 0c 80 00 00 c0 00 00 60 00 00 38 00     ...........`..8.
     c9d:	00 0c 00 00 06 00 00 06 00 00 1c 00 00 38 00 00     .............8..
     cad:	60 00 00 c0 00 00 80 00 00 0c 00 00 02 00 00 02     `...............
     cbd:	00 00 02 00 00 02 00 00 02 00 00 02 00 00 02 00     ................
     ccd:	00 02 00 00 02 00 00 02 00 00 02 00 00 02 04 01     ................
     cdd:	00 00 03 00 00 07 00 00 04 00 00 08 00 3c 00 30     .............<.0
     ced:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     cfd:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     d0d:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     d1d:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     d2d:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     d3d:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     d4d:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     d5d:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     d6d:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     d7d:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     d8d:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     d9d:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     dad:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     dbd:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     dcd:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     ddd:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     ded:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     dfd:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     e0d:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     e1d:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     e2d:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     e3d:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     e4d:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     e5d:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     e6d:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     e7d:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     e8d:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     e9d:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     ead:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     ebd:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     ecd:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     edd:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     eed:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     efd:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     f0d:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     f1d:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     f2d:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     f3d:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     f4d:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     f5d:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     f6d:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000f7b <Verdana8>:
     f7b:	01 02 20 5f 0b 00 c3 00 c6 00 c9 00 d0 00 df 00     .. _............
     f8b:	ea 00 ff 01 0e 01 11 01 18 01 1f 01 2a 01 39 01     ............*.9.
     f9b:	3e 01 45 01 48 01 53 01 5e 01 69 01 74 01 7f 01     >.E.H.S.^.i.t...
     fab:	8c 01 97 01 a2 01 ad 01 b8 01 c3 01 c6 01 cb 01     ................
     fbb:	d8 01 e7 01 f4 01 fd 02 0e 02 1b 02 28 02 37 02     ............(.7.
     fcb:	46 02 51 02 5c 02 6b 02 78 02 7f 02 88 02 95 02     F.Q.\.k.x.......
     fdb:	a0 02 af 02 bc 02 cb 02 d6 02 e5 02 f2 02 ff 03     ................
     feb:	0e 03 1b 03 28 03 3b 03 48 03 57 03 64 03 6b 03     ....(.;.H.W.d.k.
     ffb:	76 03 7d 03 8c 03 9b 03 a0 03 ab 03 b6 03 c1 03     v.}.............
    100b:	cc 03 d7 03 e0 03 eb 03 f6 03 f9 04 00 04 0b 04     ................
    101b:	0e 04 21 04 2c 04 37 04 42 04 4d 04 56 04 5f 04     ..!.,.7.B.M.V._.
    102b:	68 04 73 04 7e 04 8d 04 98 04 a3 04 ac 04 b7 04     h.s.~...........
    103b:	ba 04 c5 01 00 00 01 7e 01 03 07 00 00 00 07 00     .......~........
    104b:	07 40 00 c8 01 78 00 ce 01 78 00 4e 00 08 00 05     .@...x...x.N....
    105b:	18 01 24 01 ff 07 24 01 c4 00 0a 0c 00 12 00 12     ..$...$.........
    106b:	00 8c 01 60 00 18 00 c6 00 20 01 20 01 c0 00 07     ...`..... . ....
    107b:	ec 00 12 01 12 01 2c 01 c0 00 b0 00 00 01 01 07     ......,.........
    108b:	00 03 f8 00 06 03 01 04 03 01 04 06 03 f8 00 05     ................
    109b:	0a 00 04 00 1f 00 04 00 0a 00 07 20 00 20 00 20     ........... . . 
    10ab:	00 fc 01 20 00 20 00 20 00 02 00 04 80 03 03 20     ... . . ....... 
    10bb:	00 20 00 20 00 01 80 01 05 00 03 c0 00 30 00 0c     . . .........0..
    10cb:	00 03 00 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
    10db:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
    10eb:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
    10fb:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
    110b:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
    111b:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
    112b:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
    113b:	00 7c 00 01 98 01 02 00 04 98 03 06 20 00 20 00     .|.......... . .
    114b:	50 00 50 00 88 00 88 00 07 50 00 50 00 50 00 50     P.P......P.P.P.P
    115b:	00 50 00 50 00 50 00 06 88 00 88 00 50 00 50 00     .P.P.P......P.P.
    116b:	20 00 20 00 04 02 00 62 01 12 00 0c 00 08 f8 00      . ....b........
    117b:	04 01 72 02 8a 02 8a 02 7a 02 82 00 7c 00 06 c0     ..r.....z...|...
    118b:	01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12 01     .x.F.F.x........
    119b:	12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01 02     .........x......
    11ab:	01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02 01     ................
    11bb:	02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01 12     ....x...........
    11cb:	01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00 84     .............x..
    11db:	00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10 00     ....."."........
    11eb:	10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01 04     ................
    11fb:	00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00 48     ........... .0.H
    120b:	00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00 01     ................
    121b:	07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01 06     .......`........
    122b:	fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00 84     ......`......x..
    123b:	00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22 00     .........x....".
    124b:	22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01 02     "."....x........
    125b:	03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c 00     ...x....".".b...
    126b:	00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00 07     ........."."....
    127b:	02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06 fe     ................
    128b:	00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70 00     ..............p.
    129b:	80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01 78     ....p......x...x
    12ab:	00 06 00 78 00 80 01 78 00 06 00 06 86 01 48 00     ...x...x......H.
    12bb:	30 00 30 00 48 00 86 01 07 02 00 04 00 08 00 f0     0.0.H...........
    12cb:	01 08 00 04 00 02 00 06 82 01 42 01 22 01 12 01     ..........B."...
    12db:	0a 01 06 01 03 ff 07 01 04 01 04 05 03 00 0c 00     ................
    12eb:	30 00 c0 00 00 03 03 01 04 01 04 ff 07 07 10 00     0...............
    12fb:	08 00 04 00 02 00 04 00 08 00 10 00 07 00 04 00     ................
    130b:	04 00 04 00 04 00 04 00 04 00 04 02 01 00 02 00     ................
    131b:	05 c0 00 28 01 28 01 28 01 f0 01 05 ff 01 08 01     ...(.(.(........
    132b:	08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01 90     ................
    133b:	00 05 f0 00 08 01 08 01 08 01 ff 01 05 f0 00 28     ...............(
    134b:	01 28 01 28 01 b0 00 04 08 00 fe 01 09 00 09 00     .(.(............
    135b:	05 f0 00 08 05 08 05 08 05 f8 03 05 ff 01 08 00     ................
    136b:	08 00 08 00 f0 01 01 f9 01 03 00 04 08 04 f9 03     ................
    137b:	05 ff 01 40 00 60 00 90 00 08 01 01 ff 01 09 f8     ...@.`..........
    138b:	01 08 00 08 00 08 00 f0 01 08 00 08 00 08 00 f0     ................
    139b:	01 05 f8 01 08 00 08 00 08 00 f0 01 05 f0 00 08     ................
    13ab:	01 08 01 08 01 f0 00 05 f8 07 08 01 08 01 08 01     ................
    13bb:	f0 00 05 f0 00 08 01 08 01 08 01 f8 07 04 f8 01     ................
    13cb:	10 00 08 00 08 00 04 30 01 28 01 48 01 c8 00 04     .......0.(.H....
    13db:	08 00 fe 00 08 01 08 01 05 f8 00 00 01 00 01 00     ................
    13eb:	01 f8 01 05 18 00 60 00 80 01 60 00 18 00 07 78     ......`...`....x
    13fb:	00 80 01 60 00 18 00 60 00 80 01 78 00 05 08 01     ...`...`...x....
    140b:	90 00 60 00 90 00 08 01 05 08 00 70 04 80 03 70     ..`........p...p
    141b:	00 08 00 04 88 01 48 01 28 01 18 01                 ......H.(...

00001427 <lcd_commmands>:
    1427:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00001435 <pagemap>:
    1435:	07 06 05 04 03 02 01 00                             ........

0000143d <text_menu>:
    143d:	cc 20 47 1a 42 1a 3d 1a 38 1a 33 1a 2e 1a 29 1a     . G.B.=.8.3...).
    144d:	24 1a 95 23 8d 23 93 23 91 23 8f 23 88 23 83 23     $..#.#.#.#.#.#.#
    145d:	7e 23 79 23 a6 1c c6 1c c1 1c bb 1c 90 20 9f 23     ~#y#......... .#
    146d:	97 23 ad 21 ce 21 c9 21 c3 21 bf 21 bb 21 b7 21     .#.!.!.!.!.!.!.!
    147d:	0c 1d 03 1d 14 1d fc 1c f7 1c 6d 1a 68 1a 63 1a     ..........m.h.c.
    148d:	5e 1a 59 1a 53 1a 4d 1a e3 1c 4c 1a 40 1d 38 1d     ^.Y.S.M...L.@.8.
    149d:	40 1f 3b 1f 38 1f 2e 1f 24 1f 9b 1a 93 1a 8e 1a     @.;.8...$.......
    14ad:	2b 1d 26 1d 1d 1d 7c 1c b2 21 70 1c 26 20 22 20     +.&...|..!p.& " 
    14bd:	1c 20 13 20 0c 20 01 20 cc 20 c9 20 b3 1a ba 1a     . . . . . . ....
    14cd:	a9 1a 09 19 4c 1a d3 1c cc 1c 68 23 56 23 43 23     ....L.....h#V#C#
    14dd:	31 23 1b 23 0c 23 f8 22 e4 22 da 22 c7 22 b8 22     1#.#.#."."."."."
    14ed:	a9 22 9a 22 8b 22 7c 22 6d 22 5e 22 4f 22 3b 22     ."."."|"m"^"O";"
    14fd:	22 22 09 22 f4 21 e1 21 d3 21 4c 1a 4c 1a 4c 1a     "".".!.!.!L.L.L.
    150d:	4c 1a 14 1d 0c 1d 03 1d fc 1c f7 1c f2 1c ed 1c     L...............
    151d:	e8 1c e3 1c dc 1c d6 1c 4c 1a 4c 1a af 1c a1 1a     ........L.L.....
    152d:	8e 1a 38 1c 2c 1c 4c 1a e9 1b e0 1b d7 1b d3 1b     ..8.,.L.........
    153d:	ca 1b c2 1b f1 1f ea 1f e0 1f d9 1f b3 1c 51 1c     ..............Q.
    154d:	43 1c 3e 1c 24 1c 19 1c 4c 1a c3 1a ba 1a 4c 1a     C.>.$...L.....L.
    155d:	4c 1a 4c 1a c9 21 c3 21 bf 21 c0 20 96 1f b6 20     L.L..!.!.!. ... 
    156d:	ab 20 9c 20 3b 20 2b 20 80 20 70 20 5f 20 4c 20     . . ; + . p _ L 
    157d:	cc 1f bf 1f b5 1f ad 1f a0 1f 69 1f 71 1a 8c 1f     ..........i.q...
    158d:	82 1f 76 1f 61 1f 9a 21 92 21 84 21 77 21 67 21     ..v.a..!.!.!w!g!
    159d:	4d 21 44 21 3b 21 2c 21 1e 21 0d 21 01 21 fa 20     M!D!;!,!.!.!.!. 
    15ad:	f3 20 e6 20 da 20 d0 20 a2 21 4c 1a 1c 1f 0c 1f     . . . . .!L.....
    15bd:	fc 1e ee 1e de 1e ce 1e be 1e ae 1e 9e 1e 8e 1e     ................
    15cd:	80 1e 72 1e 63 1e 54 1e 47 1e 3a 1e 2e 1e 22 1e     ..r.c.T.G.:...".
    15dd:	0a 1e fd 1d ef 1d e1 1d d4 1d c9 1d bc 1d b1 1d     ................
    15ed:	a4 1d c9 1d 97 1d b1 1d 4c 1a 4c 1a 4c 1a 4c 1a     ........L.L.L.L.
    15fd:	4c 1a 4c 1a 40 1d 38 1d 32 1d 93 19 14 1c 0f 1c     L.L.@.8.2.......
    160d:	0a 1c 05 1c 00 1c fb 1b f6 1b f1 1b 4c 1a 4c 1a     ............L.L.
    161d:	4c 1a 4c 1a 4c 1a 4c 1a 4c 1a 4c 1a 4c 1a 4c 1a     L.L.L.L.L.L.L.L.
    162d:	4c 1a 4c 1a 4c 1a 4c 1a 4c 1a e3 1c 40 1d 38 1d     L.L.L.L.L...@.8.
    163d:	32 1d 4c 1a 4c 1a 67 1c 5e 1c 9c 1c 96 1c 8a 1c     2.L.L.g.^.......
    164d:	c0 23 ba 23 c0 20 b1 23 af 23 ad 23 89 1a 85 1a     .#.#. .#.#.#....
    165d:	7e 1a 17 1a 10 1a 06 1a 1e 1a fe 19 4c 1a 4c 1a     ~...........L.L.
    166d:	73 23 e4 19 d7 19 4c 1a d0 19 c2 19 b1 19 a4 19     s#....L.........
    167d:	4c 1a a4 23 4c 1a 9e 19 4c 1a 4c 1a 4c 1a b9 1b     L..#L...L.L.L...
    168d:	b0 1b a6 1b 9c 1b 92 1b 88 1b 80 1b 75 1b 6a 1b     ............u.j.
    169d:	5e 1b 52 1b 47 1b 3c 1b 30 1b 27 1b 1c 1b 12 1b     ^.R.G.<.0.'.....
    16ad:	07 1b ff 1a f5 1a ea 1a df 1a d6 1a ca 1a 4c 1a     ..............L.
    16bd:	d3 1c 7a 19 85 19 4c 1a 54 1f 47 1f 45 1f 43 1f     ..z...L.T.G.E.C.
    16cd:	9a 21 92 21 84 21 77 21 58 21 4d 21 44 21 3b 21     .!.!.!w!X!M!D!;!
    16dd:	2c 21 1e 21 0d 21 01 21 fa 20 f3 20 e6 20 da 20     ,!.!.!.!. . . . 
    16ed:	d0 20 a2 21 1c 1f 0c 1f fc 1e ee 1e de 1e ce 1e     . .!............
    16fd:	be 1e ae 1e 9e 1e 8e 1e 80 1e 72 1e 63 1e 54 1e     ..........r.c.T.
    170d:	47 1e 3a 1e 17 1e 22 1e 0a 1e fd 1d ef 1d e1 1d     G.:...".........
    171d:	d4 1d c9 1d bc 1d b1 1d a4 1d c9 1d 97 1d b1 1d     ................
    172d:	4c 1a 4c 1a 4c 1a 4c 1a 4c 1a 4c 1a 4c 1a 4c 1a     L.L.L.L.L.L.L.L.
    173d:	72 18 63 18 54 18 45 18 36 18 27 18 18 18 09 18     r.c.T.E.6.'.....
    174d:	4c 1a 4c 1a 4c 1a 4c 1a 26 20 22 20 1c 20 13 20     L.L.L.L.& " . . 
    175d:	0c 20 01 20 fd 1f 68 19 56 19 42 19 2e 19 1e 19     . . ..h.V.B.....
    176d:	0e 19 4c 1a 05 19 01 19 fd 18 f9 18 f4 18 ef 18     ..L.............
    177d:	ea 18 e5 18 e3 1c 4c 1a 4c 1a 05 19 d2 18 ca 18     ......L.L.......
    178d:	da 18 05 19 01 19 fd 18 f9 18 f4 18 ef 18 ea 18     ................
    179d:	e5 18 8e 1d 84 1d 7c 1d 76 1d 70 1d 62 1d 59 1d     ......|.v.p.b.Y.
    17ad:	48 1d e3 1c 05 19 d2 18 ca 18 da 18 05 19 01 19     H...............
    17bd:	fd 18 f9 18 f4 18 ef 18 ea 18 e5 18 8e 1d 84 1d     ................
    17cd:	7c 1d 6a 1d 70 1d 52 1d 59 1d 48 1d e3 1c 4c 1a     |.j.p.R.Y.H...L.
    17dd:	4c 1a 4c 1a 4c 1a 4c 1a c7 18 c4 18 c1 18 be 18     L.L.L.L.........
    17ed:	bb 18 b8 18 b5 18 b2 18 ae 18 a9 18 a4 18 9f 18     ................
    17fd:	9a 18 95 18 90 18 8b 18 86 18 81 18                 ............

00001809 <Ch8>:
    1809:	43 68 2e 38 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.8 Function:.

00001818 <Ch7>:
    1818:	43 68 2e 37 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.7 Function:.

00001827 <Ch6>:
    1827:	43 68 2e 36 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.6 Function:.

00001836 <Ch5>:
    1836:	43 68 2e 35 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.5 Function:.

00001845 <Ch4>:
    1845:	43 68 2e 34 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.4 Function:.

00001854 <Ch3>:
    1854:	43 68 2e 33 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.3 Function:.

00001863 <Ch2>:
    1863:	43 68 2e 32 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.2 Function:.

00001872 <Ch1>:
    1872:	43 68 2e 31 20 46 75 6e 63 74 69 6f 6e 3a 00        Ch.1 Function:.

00001881 <O7>:
    1881:	41 58 33 3a 00                                      AX3:.

00001886 <O6>:
    1886:	41 58 32 3a 00                                      AX2:.

0000188b <O5>:
    188b:	41 58 31 3a 00                                      AX1:.

00001890 <O4>:
    1890:	47 45 52 3a 00                                      GER:.

00001895 <O3>:
    1895:	52 55 44 3a 00                                      RUD:.

0000189a <O2>:
    189a:	45 4c 45 3a 00                                      ELE:.

0000189f <O1>:
    189f:	41 49 4c 3a 00                                      AIL:.

000018a4 <O0>:
    18a4:	54 48 52 3a 00                                      THR:.

000018a9 <I10>:
    18a9:	4f 55 54 3a 00                                      OUT:.

000018ae <I9>:
    18ae:	50 6e 3a 00                                         Pn:.

000018b2 <I8>:
    18b2:	38 3a 00                                            8:.

000018b5 <I7>:
    18b5:	37 3a 00                                            7:.

000018b8 <I6>:
    18b8:	36 3a 00                                            6:.

000018bb <I5>:
    18bb:	35 3a 00                                            5:.

000018be <I4>:
    18be:	34 3a 00                                            4:.

000018c1 <I3>:
    18c1:	33 3a 00                                            3:.

000018c4 <I2>:
    18c4:	32 3a 00                                            2:.

000018c7 <I1>:
    18c7:	31 3a 00                                            1:.

000018ca <Uni4>:
    18ca:	43 75 72 76 65 20 44 00                             Curve D.

000018d2 <Uni3>:
    18d2:	43 75 72 76 65 20 43 00                             Curve C.

000018da <Uni1>:
    18da:	43 6f 6c 6c 65 63 74 69 76 65 00                    Collective.

000018e5 <Chan7>:
    18e5:	41 55 58 33 00                                      AUX3.

000018ea <Chan6>:
    18ea:	41 55 58 32 00                                      AUX2.

000018ef <Chan5>:
    18ef:	41 55 58 31 00                                      AUX1.

000018f4 <Chan4>:
    18f4:	47 45 41 52 00                                      GEAR.

000018f9 <Chan3>:
    18f9:	52 55 44 00                                         RUD.

000018fd <Chan2>:
    18fd:	45 4c 45 00                                         ELE.

00001901 <Chan1>:
    1901:	41 49 4c 00                                         AIL.

00001905 <Chan0>:
    1905:	54 48 52 00                                         THR.

00001909 <Misc_1>:
    1909:	43 52 43 3a 00                                      CRC:.

0000190e <Curve_5>:
    190e:	47 65 6e 65 72 69 63 20 43 75 72 76 65 20 44 00     Generic Curve D.

0000191e <Curve_4>:
    191e:	47 65 6e 65 72 69 63 20 43 75 72 76 65 20 43 00     Generic Curve C.

0000192e <Curve_3>:
    192e:	50 32 20 43 6f 6c 6c 65 63 74 69 76 65 20 43 75     P2 Collective Cu
    193e:	72 76 65 00                                         rve.

00001942 <Curve_2>:
    1942:	50 31 20 43 6f 6c 6c 65 63 74 69 76 65 20 43 75     P1 Collective Cu
    1952:	72 76 65 00                                         rve.

00001956 <Curve_1>:
    1956:	50 32 20 54 68 72 6f 74 74 6c 65 20 43 75 72 76     P2 Throttle Curv
    1966:	65 00                                               e.

00001968 <Curve_0>:
    1968:	50 31 20 54 68 72 6f 74 74 6c 65 20 43 75 72 76     P1 Throttle Curv
    1978:	65 00                                               e.

0000197a <Reference_1>:
    197a:	45 61 72 74 68 20 72 65 66 2e 00                    Earth ref..

00001985 <Reference_0>:
    1985:	56 65 72 74 2e 20 41 50 20 72 65 66 2e 00           Vert. AP ref..

00001993 <Misc_Msg01>:
    1993:	41 6c 74 2e 20 44 61 6d 70 3a 00                    Alt. Damp:.

0000199e <ERROR_MSG_0>:
    199e:	43 6c 65 61 72 00                                   Clear.

000019a4 <ERROR_3>:
    19a4:	44 69 73 61 72 6d 20 74 69 6d 65 72 00              Disarm timer.

000019b1 <ERROR_2>:
    19b1:	4e 6f 20 73 69 67 6e 61 6c 20 64 69 73 61 72 6d     No signal disarm
	...

000019c2 <ERROR_1>:
    19c2:	4d 61 6e 75 61 6c 20 64 69 73 61 72 6d 00           Manual disarm.

000019d0 <ERROR_0>:
    19d0:	52 65 62 6f 6f 74 00                                Reboot.

000019d7 <WARNING_1>:
    19d7:	52 45 4d 4f 56 45 20 50 52 4f 50 53 00              REMOVE PROPS.

000019e4 <WARNING_0>:
    19e4:	57 41 52 4e 49 4e 47 20 2d 20 45 72 61 73 65 73     WARNING - Erases
    19f4:	20 73 65 74 74 69 6e 67 73 00                        settings.

000019fe <PRESET_4>:
    19fe:	4f 70 74 69 6f 6e 73 00                             Options.

00001a06 <PRESET_3>:
    1a06:	54 72 69 63 6f 70 74 65 72 00                       Tricopter.

00001a10 <PRESET_2>:
    1a10:	51 75 61 64 20 50 00                                Quad P.

00001a17 <PRESET_1>:
    1a17:	51 75 61 64 20 58 00                                Quad X.

00001a1e <PRESET_0>:
    1a1e:	42 6c 61 6e 6b 00                                   Blank.

00001a24 <VBAT39>:
    1a24:	33 2e 39 56 00                                      3.9V.

00001a29 <VBAT38>:
    1a29:	33 2e 38 56 00                                      3.8V.

00001a2e <VBAT37>:
    1a2e:	33 2e 37 56 00                                      3.7V.

00001a33 <VBAT36>:
    1a33:	33 2e 36 56 00                                      3.6V.

00001a38 <VBAT35>:
    1a38:	33 2e 35 56 00                                      3.5V.

00001a3d <VBAT34>:
    1a3d:	33 2e 34 56 00                                      3.4V.

00001a42 <VBAT33>:
    1a42:	33 2e 33 56 00                                      3.3V.

00001a47 <VBAT32>:
    1a47:	33 2e 32 56 00                                      3.2V.

00001a4c <Dummy0>:
	...

00001a4d <MPU6050LPF7>:
    1a4d:	32 36 30 48 7a 00                                   260Hz.

00001a53 <MPU6050LPF6>:
    1a53:	31 38 34 48 7a 00                                   184Hz.

00001a59 <MPU6050LPF5>:
    1a59:	39 34 48 7a 00                                      94Hz.

00001a5e <MPU6050LPF4>:
    1a5e:	34 34 48 7a 00                                      44Hz.

00001a63 <MPU6050LPF3>:
    1a63:	32 31 48 7a 00                                      21Hz.

00001a68 <MPU6050LPF2>:
    1a68:	31 30 48 7a 00                                      10Hz.

00001a6d <MPU6050LPF1>:
    1a6d:	35 48 7a 00                                         5Hz.

00001a71 <GeneralText10>:
    1a71:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001a7e <Random12>:
    1a7e:	73 69 67 6e 61 6c 00                                signal.

00001a85 <Random11>:
    1a85:	6c 6f 77 00                                         low.

00001a89 <Random10>:
    1a89:	68 69 67 68 00                                      high.

00001a8e <Random1>:
    1a8e:	48 69 67 68 00                                      High.

00001a93 <Safety2>:
    1a93:	41 72 6d 61 62 6c 65 00                             Armable.

00001a9b <Safety1>:
    1a9b:	41 72 6d 65 64 00                                   Armed.

00001aa1 <GeneralText5>:
    1aa1:	53 79 6e 63 20 52 43 00                             Sync RC.

00001aa9 <MixerItem16>:
    1aa9:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

00001ab3 <MixerItem15>:
    1ab3:	53 63 61 6c 65 64 00                                Scaled.

00001aba <MixerItem12>:
    1aba:	52 65 76 65 72 73 65 64 00                          Reversed.

00001ac3 <MixerItem11>:
    1ac3:	4e 6f 72 6d 61 6c 00                                Normal.

00001aca <Orientation24>:
    1aca:	52 69 67 68 74 2d 46 72 6f 6e 74 00                 Right-Front.

00001ad6 <Orientation23>:
    1ad6:	52 69 67 68 74 2d 55 70 00                          Right-Up.

00001adf <Orientation22>:
    1adf:	52 69 67 68 74 2d 42 61 63 6b 00                    Right-Back.

00001aea <Orientation21>:
    1aea:	52 69 67 68 74 2d 44 6f 77 6e 00                    Right-Down.

00001af5 <Orientation20>:
    1af5:	4c 65 66 74 2d 42 61 63 6b 00                       Left-Back.

00001aff <Orientation19>:
    1aff:	4c 65 66 74 2d 55 70 00                             Left-Up.

00001b07 <Orientation18>:
    1b07:	4c 65 66 74 2d 46 72 6f 6e 74 00                    Left-Front.

00001b12 <Orientation17>:
    1b12:	4c 65 66 74 2d 44 6f 77 6e 00                       Left-Down.

00001b1c <Orientation16>:
    1b1c:	46 72 6f 6e 74 2d 4c 65 66 74 00                    Front-Left.

00001b27 <Orientation15>:
    1b27:	46 72 6f 6e 74 2d 55 70 00                          Front-Up.

00001b30 <Orientation14>:
    1b30:	46 72 6f 6e 74 2d 52 69 67 68 74 00                 Front-Right.

00001b3c <Orientation13>:
    1b3c:	46 72 6f 6e 74 2d 44 6f 77 6e 00                    Front-Down.

00001b47 <Orientation12>:
    1b47:	42 6f 74 74 2e 2d 4c 65 66 74 00                    Bott.-Left.

00001b52 <Orientation11>:
    1b52:	42 6f 74 74 2e 2d 46 72 6f 6e 74 00                 Bott.-Front.

00001b5e <Orientation10>:
    1b5e:	42 6f 74 74 2e 2d 52 69 67 68 74 00                 Bott.-Right.

00001b6a <Orientation9>:
    1b6a:	42 6f 74 74 2e 2d 42 61 63 6b 00                    Bott.-Back.

00001b75 <Orientation8>:
    1b75:	42 61 63 6b 2d 52 69 67 68 74 00                    Back-Right.

00001b80 <Orientation7>:
    1b80:	42 61 63 6b 2d 55 70 00                             Back-Up.

00001b88 <Orientation6>:
    1b88:	42 61 63 6b 2d 4c 65 66 74 00                       Back-Left.

00001b92 <Orientation5>:
    1b92:	42 61 63 6b 2d 44 6f 77 6e 00                       Back-Down.

00001b9c <Orientation4>:
    1b9c:	54 6f 70 2d 52 69 67 68 74 00                       Top-Right.

00001ba6 <Orientation3>:
    1ba6:	54 6f 70 2d 46 72 6f 6e 74 00                       Top-Front.

00001bb0 <Orientation2>:
    1bb0:	54 6f 70 2d 4c 65 66 74 00                          Top-Left.

00001bb9 <Orientation1>:
    1bb9:	54 6f 70 2d 52 65 61 72 00                          Top-Rear.

00001bc2 <MixerMenuItem7>:
    1bc2:	50 69 74 63 68 55 70 00                             PitchUp.

00001bca <MixerMenuItem6>:
    1bca:	53 69 64 65 77 61 79 73 00                          Sideways.

00001bd3 <MixerMenuItem5>:
    1bd3:	41 66 74 00                                         Aft.

00001bd7 <MixerMenuItem4>:
    1bd7:	49 6e 76 65 72 74 65 64 00                          Inverted.

00001be0 <MixerMenuItem3>:
    1be0:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001be9 <MixerMenuItem2>:
    1be9:	46 6f 72 77 61 72 64 00                             Forward.

00001bf1 <MOUT8>:
    1bf1:	4f 55 54 38 00                                      OUT8.

00001bf6 <MOUT7>:
    1bf6:	4f 55 54 37 00                                      OUT7.

00001bfb <MOUT6>:
    1bfb:	4f 55 54 36 00                                      OUT6.

00001c00 <MOUT5>:
    1c00:	4f 55 54 35 00                                      OUT5.

00001c05 <MOUT4>:
    1c05:	4f 55 54 34 00                                      OUT4.

00001c0a <MOUT3>:
    1c0a:	4f 55 54 33 00                                      OUT3.

00001c0f <MOUT2>:
    1c0f:	4f 55 54 32 00                                      OUT2.

00001c14 <MOUT1>:
    1c14:	4f 55 54 31 00                                      OUT1.

00001c19 <Status5>:
    1c19:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001c24 <Status4>:
    1c24:	28 41 72 6d 65 64 29 00                             (Armed).

00001c2c <Status2>:
    1c2c:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

00001c38 <Status0>:
    1c38:	50 72 65 73 73 00                                   Press.

00001c3e <WizardText2>:
    1c3e:	44 6f 6e 65 00                                      Done.

00001c43 <WizardText1>:
    1c43:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001c51 <WizardText0>:
    1c51:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

00001c5e <PText6>:
    1c5e:	73 65 74 74 69 6e 67 73 00                          settings.

00001c67 <PText5>:
    1c67:	55 70 64 61 74 69 6e 67 00                          Updating.

00001c70 <PText4>:
    1c70:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

00001c7c <PText3>:
    1c7c:	45 53 43 20 63 61 6c 69 62 72 61 74 65 00           ESC calibrate.

00001c8a <PText2>:
    1c8a:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

00001c96 <PText1>:
    1c96:	52 65 73 65 74 00                                   Reset.

00001c9c <PText0>:
    1c9c:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

00001ca6 <Disarmed>:
    1ca6:	44 69 73 61 72 6d 65 64 00                          Disarmed.

00001caf <ErrorText10>:
    1caf:	4c 6f 77 00                                         Low.

00001cb3 <Status3>:
    1cb3:	42 61 74 74 65 72 79 00                             Battery.

00001cbb <ErrorText7>:
    1cbb:	4d 6f 64 65 6c 00                                   Model.

00001cc1 <ErrorText6>:
    1cc1:	4c 6f 73 74 00                                      Lost.

00001cc6 <ErrorText5>:
    1cc6:	45 72 72 6f 72 00                                   Error.

00001ccc <ErrorText4>:
    1ccc:	53 69 67 6e 61 6c 00                                Signal.

00001cd3 <ErrorText3>:
    1cd3:	4e 6f 00                                            No.

00001cd6 <ChannelRef12>:
    1cd6:	45 6c 65 76 2e 00                                   Elev..

00001cdc <ChannelRef10>:
    1cdc:	54 68 72 6f 74 2e 00                                Throt..

00001ce3 <ChannelRef8>:
    1ce3:	4e 6f 6e 65 00                                      None.

00001ce8 <ChannelRef7>:
    1ce8:	41 55 58 33 00                                      AUX3.

00001ced <ChannelRef6>:
    1ced:	41 55 58 32 00                                      AUX2.

00001cf2 <ChannelRef5>:
    1cf2:	41 55 58 31 00                                      AUX1.

00001cf7 <ChannelRef4>:
    1cf7:	47 65 61 72 00                                      Gear.

00001cfc <ChannelRef3>:
    1cfc:	52 75 64 64 65 72 00                                Rudder.

00001d03 <ChannelRef2>:
    1d03:	45 6c 65 76 61 74 6f 72 00                          Elevator.

00001d0c <ChannelRef1>:
    1d0c:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001d14 <ChannelRef0>:
    1d14:	54 68 72 6f 74 74 6c 65 00                          Throttle.

00001d1d <MixerItem62>:
    1d1d:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

00001d26 <MixerItem61>:
    1d26:	53 69 6e 65 00                                      Sine.

00001d2b <MixerItem60>:
    1d2b:	4c 69 6e 65 61 72 00                                Linear.

00001d32 <MixerItem49>:
    1d32:	4d 6f 74 6f 72 00                                   Motor.

00001d38 <MixerItem41>:
    1d38:	44 2e 53 65 72 76 6f 00                             D.Servo.

00001d40 <MixerItem40>:
    1d40:	41 2e 53 65 72 76 6f 00                             A.Servo.

00001d48 <MixerItem420>:
    1d48:	41 6c 74 2e 20 64 61 6d 70 00                       Alt. damp.

00001d52 <MixerItem800>:
    1d52:	41 4c 20 59 61 77 00                                AL Yaw.

00001d59 <MixerItem81>:
    1d59:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001d62 <MixerItem80>:
    1d62:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

00001d6a <MixerItemP730>:
    1d6a:	41 63 63 20 5a 00                                   Acc Z.

00001d70 <MixerItemP74>:
    1d70:	41 63 63 20 59 00                                   Acc Y.

00001d76 <MixerItemP73>:
    1d76:	41 63 63 20 58 00                                   Acc X.

00001d7c <MixerItem72>:
    1d7c:	47 79 72 6f 59 61 77 00                             GyroYaw.

00001d84 <MixerItem71>:
    1d84:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

00001d8e <MixerItem70>:
    1d8e:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001d97 <MixerItem31>:
    1d97:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

00001da4 <MixerItem21>:
    1da4:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

00001db1 <MixerItem30>:
    1db1:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

00001dbc <MixerItem29>:
    1dbc:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

00001dc9 <MixerItem2>:
    1dc9:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

00001dd4 <MixerItem0>:
    1dd4:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

00001de1 <MixerItem43>:
    1de1:	50 32 20 41 6c 74 2e 20 64 61 6d 70 3a 00           P2 Alt. damp:.

00001def <MixerItem42>:
    1def:	50 31 20 41 6c 74 2e 20 64 61 6d 70 3a 00           P1 Alt. damp:.

00001dfd <MixerItem28>:
    1dfd:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001e0a <MixerItem3>:
    1e0a:	50 31 20 50 69 74 63 68 20 41 4c 3a 00              P1 Pitch AL:.

00001e17 <MixerItem700>:
    1e17:	50 31 20 59 61 77 20 41 4c 3a 00                    P1 Yaw AL:.

00001e22 <MixerItem27>:
    1e22:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

00001e2e <MixerItem7>:
    1e2e:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001e3a <MixerItem26>:
    1e3a:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001e47 <MixerItem6>:
    1e47:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

00001e54 <MixerItem25>:
    1e54:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

00001e63 <MixerItem5>:
    1e63:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

00001e72 <MixerItem24>:
    1e72:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

00001e80 <MixerItem4>:
    1e80:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

00001e8e <MixerItem56>:
    1e8e:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

00001e9e <MixerItem53>:
    1e9e:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001eae <MixerItem55>:
    1eae:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

00001ebe <MixerItem52>:
    1ebe:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

00001ece <MixerItem54>:
    1ece:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

00001ede <MixerItem51>:
    1ede:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

00001eee <Mixeritem50>:
    1eee:	54 72 61 6e 73 2e 20 63 75 72 76 65 3a 00           Trans. curve:.

00001efc <MixerItem33>:
    1efc:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

00001f0c <MixerItem23>:
    1f0c:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

00001f1c <MixerItem1>:
    1f1c:	44 65 76 69 63 65 3a 00                             Device:.

00001f24 <P5text>:
    1f24:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

00001f2e <P4text>:
    1f2e:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

00001f38 <P3text>:
    1f38:	50 32 00                                            P2.

00001f3b <P2text>:
    1f3b:	50 31 2e 6e 00                                      P1.n.

00001f40 <P1text>:
    1f40:	50 31 00                                            P1.

00001f43 <AdvancedDummy1>:
    1f43:	20 00                                                .

00001f45 <AdvancedDummy0>:
    1f45:	20 00                                                .

00001f47 <MixerMenuItem8>:
    1f47:	50 31 20 72 65 66 72 6e 63 65 2e 3a 00              P1 refrnce.:.

00001f54 <MixerMenuItem1>:
    1f54:	50 31 20 6f 72 69 65 6e 74 6e 2e 3a 00              P1 orientn.:.

00001f61 <GeneralText20>:
    1f61:	50 72 65 73 65 74 3a 00                             Preset:.

00001f69 <BattMenuItem2>:
    1f69:	4c 6f 77 20 56 20 61 6c 61 72 6d 3a 00              Low V alarm:.

00001f76 <GeneralText7>:
    1f76:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

00001f82 <GeneralText16>:
    1f82:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

00001f8c <GeneralText6>:
    1f8c:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

00001f96 <GeneralText3>:
    1f96:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

00001fa0 <GeneralText2>:
    1fa0:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

00001fad <AutoMenuItem2>:
    1fad:	53 61 66 65 74 79 3a 00                             Safety:.

00001fb5 <Contrast>:
    1fb5:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

00001fbf <GeneralText100>:
    1fbf:	54 61 69 6c 20 73 69 74 74 65 72 3a 00              Tail sitter:.

00001fcc <MixerMenuItem0>:
    1fcc:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

00001fd9 <RCMenuItem9>:
    1fd9:	43 75 73 74 6f 6d 00                                Custom.

00001fe0 <RCMenuItem8>:
    1fe0:	4d 75 6c 74 69 70 6c 65 78 00                       Multiplex.

00001fea <RCMenuItem7>:
    1fea:	46 75 74 61 62 61 00                                Futaba.

00001ff1 <RCMenuItem6>:
    1ff1:	4a 52 2f 53 70 65 6b 74 72 75 6d 00                 JR/Spektrum.

00001ffd <RXMode6>:
    1ffd:	52 41 57 00                                         RAW.

00002001 <RXMode5>:
    2001:	4d 6f 64 65 20 42 2f 55 44 49 00                    Mode B/UDI.

0000200c <RXMode4>:
    200c:	58 74 72 65 6d 65 00                                Xtreme.

00002013 <RXMode3>:
    2013:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

0000201c <RXMode2>:
    201c:	53 2d 42 75 73 00                                   S-Bus.

00002022 <RXMode1>:
    2022:	50 57 4d 00                                         PWM.

00002026 <RXMode0>:
    2026:	43 50 50 4d 00                                      CPPM.

0000202b <TransitionIn>:
    202b:	49 6e 62 6f 75 6e 64 20 74 72 61 6e 73 2e 3a 00     Inbound trans.:.

0000203b <TransitionOut>:
    203b:	4f 75 74 62 6f 75 6e 64 20 74 72 61 6e 73 2e 3a     Outbound trans.:
	...

0000204c <RCMenuItem30>:
    204c:	56 69 62 72 61 74 69 6f 6e 20 64 69 73 70 6c 61     Vibration displa
    205c:	79 3a 00                                            y:.

0000205f <Transition_P2>:
    205f:	54 72 61 6e 73 69 74 69 6f 6e 20 68 69 67 68 3a     Transition high:
	...

00002070 <Transition_P1n>:
    2070:	54 72 61 6e 73 69 74 69 6f 6e 20 6d 69 64 3a 00     Transition mid:.

00002080 <Transition_P1>:
    2080:	54 72 61 6e 73 69 74 69 6f 6e 20 6c 6f 77 3a 00     Transition low:.

00002090 <Transition>:
    2090:	54 72 61 6e 73 69 74 69 6f 6e 3a 00                 Transition:.

0000209c <RCMenuItem2>:
    209c:	50 72 6f 66 69 6c 65 20 63 68 61 6e 2e 3a 00        Profile chan.:.

000020ab <RCMenuItem0>:
    20ab:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

000020b6 <RCMenuItem20>:
    20b6:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

000020c0 <RCMenuItem1>:
    20c0:	52 58 20 74 79 70 65 3a 00                          RX type:.

000020c9 <AutoMenuItem15>:
    20c9:	4f 4e 00                                            ON.

000020cc <AutoMenuItem11>:
    20cc:	4f 46 46 00                                         OFF.

000020d0 <StabMenuItem30>:
    20d0:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

000020da <StabMenuItem9>:
    20da:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

000020e6 <StabMenuItem12>:
    20e6:	59 61 77 20 49 20 6c 69 6d 69 74 3a 00              Yaw I limit:.

000020f3 <StabMenuItem8>:
    20f3:	59 61 77 20 49 3a 00                                Yaw I:.

000020fa <StabMenuItem7>:
    20fa:	59 61 77 20 50 3a 00                                Yaw P:.

00002101 <AutoMenuItem8>:
    2101:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

0000210d <AutoMenuItem21>:
    210d:	50 69 74 63 68 20 61 75 74 6f 6c 65 76 65 6c 3a     Pitch autolevel:
	...

0000211e <StabMenuItem6>:
    211e:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

0000212c <StabMenuItem11>:
    212c:	50 69 74 63 68 20 49 20 6c 69 6d 69 74 3a 00        Pitch I limit:.

0000213b <StabMenuItem5>:
    213b:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00002144 <AutoMenuItem4>:
    2144:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

0000214d <AutoMenuItem7>:
    214d:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

00002158 <AutoMenuItem200>:
    2158:	59 61 77 20 61 75 74 6f 6c 65 76 65 6c 3a 00        Yaw autolevel:.

00002167 <AutoMenuItem20>:
    2167:	52 6f 6c 6c 20 61 75 74 6f 6c 65 76 65 6c 3a 00     Roll autolevel:.

00002177 <StabMenuItem3>:
    2177:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

00002184 <StabMenuItem10>:
    2184:	52 6f 6c 6c 20 49 20 6c 69 6d 69 74 3a 00           Roll I limit:.

00002192 <StabMenuItem2>:
    2192:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

0000219a <AutoMenuItem1>:
    219a:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

000021a2 <StabMenuItem13>:
    21a2:	41 6c 74 2e 20 64 61 6d 70 3a 00                    Alt. damp:.

000021ad <SensorMenuItem2>:
    21ad:	49 6e 76 2e 00                                      Inv..

000021b2 <SensorMenuItem1>:
    21b2:	43 61 6c 2e 00                                      Cal..

000021b7 <PText20>:
    21b7:	49 4d 55 00                                         IMU.

000021bb <PText19>:
    21bb:	41 63 63 00                                         Acc.

000021bf <PText18>:
    21bf:	59 61 77 00                                         Yaw.

000021c3 <PText17>:
    21c3:	50 69 74 63 68 00                                   Pitch.

000021c9 <PText16>:
    21c9:	52 6f 6c 6c 00                                      Roll.

000021ce <PText15>:
    21ce:	47 79 72 6f 00                                      Gyro.

000021d3 <MainMenuItem24>:
    21d3:	32 34 2e 20 45 72 72 6f 72 20 6c 6f 67 00           24. Error log.

000021e1 <MainMenuItem31>:
    21e1:	32 33 2e 20 49 6e 2f 4f 75 74 20 64 69 73 70 6c     23. In/Out displ
    21f1:	61 79 00                                            ay.

000021f4 <MainMenuItem32>:
    21f4:	32 32 2e 20 43 75 73 74 6f 6d 20 43 68 2e 20 6f     22. Custom Ch. o
    2204:	72 64 65 72 00                                      rder.

00002209 <MainMenuItem23>:
    2209:	32 31 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     21. Pos. Servo t
    2219:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00002222 <MainMenuItem22>:
    2222:	32 30 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     20. Neg. Servo t
    2232:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000223b <MainMenuItem20>:
    223b:	31 39 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     19. Servo direct
    224b:	69 6f 6e 00                                         ion.

0000224f <MainMenuItem18>:
    224f:	31 38 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        18. OUT8 Mixer.

0000225e <MainMenuItem17>:
    225e:	31 37 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        17. OUT7 Mixer.

0000226d <MainMenuItem16>:
    226d:	31 36 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        16. OUT6 Mixer.

0000227c <MainMenuItem15>:
    227c:	31 35 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        15. OUT5 Mixer.

0000228b <MainMenuItem14>:
    228b:	31 34 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        14. OUT4 Mixer.

0000229a <MainMenuItem13>:
    229a:	31 33 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        13. OUT3 Mixer.

000022a9 <MainMenuItem12>:
    22a9:	31 32 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        12. OUT2 Mixer.

000022b8 <MainMenuItem11>:
    22b8:	31 31 2e 20 4f 55 54 31 20 4d 69 78 65 72 00        11. OUT1 Mixer.

000022c7 <MainMenuItem25>:
    22c7:	31 30 2e 20 4f 75 74 70 75 74 20 6f 66 66 73 65     10. Output offse
    22d7:	74 73 00                                            ts.

000022da <MainMenuItem30>:
    22da:	39 2e 20 43 75 72 76 65 73 00                       9. Curves.

000022e4 <MainMenuItem3>:
    22e4:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    22f4:	65 20 32 00                                         e 2.

000022f8 <MainMenuItem2>:
    22f8:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    2308:	65 20 31 00                                         e 1.

0000230c <MainMenuItem10>:
    230c:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

0000231b <MainMenuItem8>:
    231b:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    232b:	61 74 69 6f 6e 00                                   ation.

00002331 <MainMenuItem7>:
    2331:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    2341:	79 00                                               y.

00002343 <MainMenuItem9>:
    2343:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    2353:	74 73 00                                            ts.

00002356 <MainMenuItem1>:
    2356:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    2366:	70 00                                               p.

00002368 <MainMenuItem0>:
    2368:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00002373 <MenuFrame9>:
    2373:	41 62 6f 72 74 00                                   Abort.

00002379 <MenuFrame8>:
    2379:	53 61 76 65 00                                      Save.

0000237e <MenuFrame7>:
    237e:	44 65 66 2e 00                                      Def..

00002383 <MenuFrame6>:
    2383:	42 61 63 6b 00                                      Back.

00002388 <MenuFrame5>:
    2388:	4d 65 6e 75 00                                      Menu.

0000238d <MenuFrame1>:
    238d:	45 00                                               E.

0000238f <MenuFrame4>:
    238f:	44 00                                               D.

00002391 <MenuFrame3>:
    2391:	43 00                                               C.

00002393 <MenuFrame2>:
    2393:	42 00                                               B.

00002395 <MenuFrame0>:
    2395:	41 00                                               A.

00002397 <StatusText9>:
    2397:	4a 69 74 74 65 72 3a 00                             Jitter:.

0000239f <StatusText8>:
    239f:	50 6f 73 3a 00                                      Pos:.

000023a4 <StatusText7>:
    23a4:	42 61 74 74 65 72 79 3a 00                          Battery:.

000023ad <StatusText5>:
    23ad:	30 00                                               0.

000023af <StatusText4>:
    23af:	2e 00                                               ..

000023b1 <StatusText3>:
    23b1:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

000023ba <StatusText1>:
    23ba:	4d 6f 64 65 3a 00                                   Mode:.

000023c0 <StatusText0>:
    23c0:	56 65 72 73 69 6f 6e 3a 20 31 2e 33 00              Version: 1.3.

000023cd <Gyro_Pol>:
    23cd:	01 01 01 ff 01 01 ff ff 01 01 ff 01 ff 01 01 ff     ................
    23dd:	01 ff ff ff ff ff ff 01 01 ff ff ff ff ff ff 01     ................
    23ed:	ff 01 01 ff 01 ff 01 01 ff ff 01 01 ff 01 01 01     ................
    23fd:	ff ff 01 ff ff ff 01 ff ff 01 ff 01 01 01 01 01     ................
    240d:	01 ff ff 01 ff ff 01 01                             ........

00002415 <Gyro_RPY_Order>:
    2415:	00 01 02 01 00 02 00 01 02 01 00 02 02 01 00 02     ................
    2425:	00 01 02 01 00 02 00 01 00 01 02 01 00 02 00 01     ................
    2435:	02 01 00 02 02 01 00 02 00 01 02 01 00 02 00 01     ................
    2445:	01 02 00 00 02 01 01 02 00 00 02 01 01 02 00 00     ................
    2455:	02 01 01 02 00 00 02 01                             ........

0000245d <LPF_lookup_HS>:
    245d:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    246d:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

0000247d <LPF_lookup>:
    247d:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    248d:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

0000249d <Ch_menu_ranges>:
    249d:	00 07 01 01 00 00 07 01 01 01 00 07 01 01 02 00     ................
    24ad:	07 01 01 03 00 07 01 01 04 00 07 01 01 05 00 07     ................
    24bd:	01 01 06 00 07 01 01 07                             ........

000024c5 <ChMenuOffsets>:
    24c5:	55 00 55 00 55 00 55 00 55 00 55 00 55 00 55 00     U.U.U.U.U.U.U.U.

000024d5 <ChMenuText>:
    24d5:	69 00 69 00 69 00 69 00 69 00 69 00 69 00 69 00     i.i.i.i.i.i.i.i.

000024e5 <Curves_menu_ranges>:
    24e5:	00 64 01 00 00 00 64 01 00 11 00 64 01 00 21 00     .d....d....d..!.
    24f5:	64 01 00 32 00 64 01 00 42 00 64 01 00 53 00 64     d..2.d..B.d..S.d
    2505:	01 00 64 00 00 01 01 00 00 64 01 00 00 00 64 01     ..d......d....d.
    2515:	00 11 00 64 01 00 21 00 64 01 00 32 00 64 01 00     ...d..!.d..2.d..
    2525:	42 00 64 01 00 53 00 64 01 00 64 00 00 01 01 00     B.d..S.d..d.....
    2535:	9c 64 01 00 9c 9c 64 01 00 be 9c 64 01 00 df 9c     .d....d....d....
    2545:	64 01 00 00 9c 64 01 00 21 9c 64 01 00 42 9c 64     d....d..!.d..B.d
    2555:	01 00 64 00 00 01 01 00 9c 64 01 00 9c 9c 64 01     ..d......d....d.
    2565:	00 be 9c 64 01 00 df 9c 64 01 00 00 9c 64 01 00     ...d....d....d..
    2575:	21 9c 64 01 00 42 9c 64 01 00 64 00 00 01 01 00     !.d..B.d..d.....
    2585:	9c 64 01 00 9c 9c 64 01 00 be 9c 64 01 00 df 9c     .d....d....d....
    2595:	64 01 00 00 9c 64 01 00 21 9c 64 01 00 42 9c 64     d....d..!.d..B.d
    25a5:	01 00 64 04 14 01 01 14 9c 64 01 00 9c 9c 64 01     ..d......d....d.
    25b5:	00 be 9c 64 01 00 df 9c 64 01 00 00 9c 64 01 00     ...d....d....d..
    25c5:	21 9c 64 01 00 42 9c 64 01 00 64 04 14 01 01 14     !.d..B.d..d.....

000025d5 <CurvesMenuOffsets>:
    25d5:	80 00 80 00 80 00 80 00 80 00 80 00                 ............

000025e1 <CurvesMenuText>:
	...

000025ed <lines>:
    25ed:	03 0f 1b 27                                         ...'

000025f1 <flight_menu_ranges>:
    25f1:	00 7f 01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00     ....(......}....
    2601:	07 01 00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f     ................
    2611:	01 00 28 00 7f 01 00 0a 00 7d 01 00 0a 00 07 01     ..(......}......
    2621:	00 02 00 7f 01 00 0a 81 7f 01 00 00 00 7f 01 00     ................
    2631:	3c 00 7f 01 00 28 00 7d 01 00 19 00 07 01 00 02     <....(.}........
    2641:	81 7f 01 00 00 00 7f 01 00 32                       .........2

0000264b <FlightMenuOffsets>:
    264b:	55 00 55 00 55 00 55 00 55 00 55 00 55 00 55 00     U.U.U.U.U.U.U.U.
    265b:	55 00 55 00 55 00 55 00 55 00 55 00 55 00 55 00     U.U.U.U.U.U.U.U.
    266b:	55 00 55 00                                         U.U.

0000266f <FlightMenuText>:
	...

00002693 <mixer_menu_ranges>:
    2693:	00 02 01 01 02 00 7d 01 00 64 00 7d 01 00 64 00     ......}..d.}..d.
    26a3:	02 01 01 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     .....}....}....}
    26b3:	01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01     ....}....}....}.
    26c3:	00 00 00 02 01 01 00 00 02 01 01 00 00 02 01 01     ................
    26d3:	00 00 02 01 01 00 00 02 01 01 00 00 02 01 01 00     ................
    26e3:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    26f3:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 01 14     ................
    2703:	01 01 14 83 7d 01 00 00 01 14 01 01 14 83 7d 01     ....}.........}.
    2713:	00 00 01 14 01 01 14 83 7d 01 00 00 01 14 01 01     ........}.......
    2723:	14 83 7d 01 00 00                                   ..}...

00002729 <MixerMenuOffsets>:
    2729:	55 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00     U.\.\.\.\.\.\.\.
    2739:	5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 5c 00     \.\.\.\.\.\.\.\.
    2749:	5c 00 5c 00 5c 00 5c 00 5c 00 5c 00 4d 00 4d 00     \.\.\.\.\.\.M.M.
    2759:	4d 00 4d 00 4d 00 4d 00 4d 00 4d 00                 M.M.M.M.M.M.

00002765 <MixerMenuTextM>:
    2765:	e2 00 00 00 00 00 38 00 00 00 00 00 00 00 00 00     ......8.........
    2775:	00 00 00 00 44 00 44 00 44 00 44 00 44 00 44 00     ....D.D.D.D.D.D.
    2785:	44 00 44 00 44 00 44 00 44 00 44 00 ba 01 00 00     D.D.D.D.D.D.....
    2795:	a5 01 00 00 ba 01 00 00 a5 01 00 00                 ............

000027a1 <MixerMenuTextE>:
    27a1:	e2 00 00 00 00 00 38 00 00 00 00 00 00 00 00 00     ......8.........
    27b1:	00 00 00 00 44 00 44 00 44 00 44 00 44 00 44 00     ....D.D.D.D.D.D.
    27c1:	44 00 44 00 44 00 44 00 44 00 44 00 a5 01 00 00     D.D.D.D.D.D.....
    27d1:	a5 01 00 00 a5 01 00 00 a5 01 00 00                 ............

000027dd <Offsets_menu_ranges>:
    27dd:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    27ed:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    27fd:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    280d:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    281d:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........
    282d:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    283d:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    284d:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    285d:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    286d:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........
    287d:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    288d:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    289d:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    28ad:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    28bd:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........
    28cd:	83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83     .}....}....}....
    28dd:	7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d     }....}....}....}
    28ed:	01 00 00 00 00 01 01 00 83 7d 01 00 00 83 7d 01     .........}....}.
    28fd:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    290d:	00 83 7d 01 00 00 83 7d 01 00 00 00 00 01 01 00     ..}....}........

0000291d <OffsetsMenuOffsets>:
    291d:	80 00 80 00 80 00 80 00 80 00 80 00 80 00 80 00     ................

0000292d <OffsetsMenuText>:
	...

0000293d <servo_menu_ranges>:
    293d:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

0000294c <ServoMenuOffsets>:
    294c:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.
    295c:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.
    296c:	50 00 50 00 50 00 50 00 50 00 50 00 50 00 50 00     P.P.P.P.P.P.P.P.

0000297c <ServoMenuText>:
    297c:	8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00 8d 00     ................
	...

000029ac <P1_Orientation_LUT>:
    29ac:	04 05 06 07 0a 0b 08 09 0c 0d 0e 0f 02 03 00 01     ................
    29bc:	11 12 13 10 17 14 15 16                             ........

000029c4 <rc_menu_ranges>:
    29c4:	00 05 01 01 02 00 02 01 01 02 00 04 01 01 04 00     ................
    29d4:	03 01 01 00 00 07 01 01 04 00 28 01 00 00 00 28     ..........(....(
    29e4:	01 00 00 00 63 01 00 00 01 63 01 00 32 01 64 01     ....c....c..2.d.
    29f4:	00 64 00 01 01 01 00 00 17 01 01 00 00 02 01 01     .d..............
    2a04:	00 1c 32 01 00 24 00 01 01 01 01 00 7f 01 00 1e     ..2..$..........
    2a14:	00 08 01 01 00 00 06 01 01 03 00 07 01 01 02 00     ................
    2a24:	07 01 01 07 02 0b 01 00 06 00 03 01 04 00           ..............

00002a32 <RCMenuOffsets>:
    2a32:	41 00 41 00 41 00 3c 00 4b 00 5f 00 5f 00 5f 00     A.A.A.<.K._._._.
    2a42:	5f 00 5f 00 5f 00 46 00 43 00 43 00 43 00 50 00     _._._.F.C.C.C.P.
    2a52:	50 00 50 00 50 00 50 00 50 00 50 00                 P.P.P.P.P.P.

00002a5e <RCMenuText>:
    2a5e:	8c 01 76 00 69 00 82 00 69 00 00 00 00 00 00 00     ..v.i...i.......
    2a6e:	00 00 00 00 44 00 27 01 40 01 00 00 35 00 00 00     ....D.'.@...5...
    2a7e:	00 00 25 00 25 00 25 00 00 00 11 01                 ..%.%.%.....

00002a8a <SQRTSIN>:
    2a8a:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    2a9a:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    2aaa:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    2aba:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    2aca:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    2ada:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    2aea:	64 64 64 64 64                                      ddddd

00002aef <SIN>:
    2aef:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    2aff:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    2b0f:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    2b1f:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    2b2f:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    2b3f:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    2b4f:	64 64 64 64 64                                      ddddd

00002b54 <__ctors_end>:
    2b54:	11 24       	eor	r1, r1
    2b56:	1f be       	out	0x3f, r1	; 63
    2b58:	cf ef       	ldi	r28, 0xFF	; 255
    2b5a:	d0 e1       	ldi	r29, 0x10	; 16
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	cd bf       	out	0x3d, r28	; 61

00002b60 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    2b60:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    2b62:	88 e1       	ldi	r24, 0x18	; 24
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	80 93 60 00 	sts	0x0060, r24
    2b6c:	10 92 60 00 	sts	0x0060, r1
    2b70:	0f be       	out	0x3f, r0	; 63

00002b72 <__do_copy_data>:
    2b72:	15 e0       	ldi	r17, 0x05	; 5
    2b74:	a0 e0       	ldi	r26, 0x00	; 0
    2b76:	b1 e0       	ldi	r27, 0x01	; 1
    2b78:	ee e8       	ldi	r30, 0x8E	; 142
    2b7a:	fa ed       	ldi	r31, 0xDA	; 218
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <__do_copy_data+0x10>
    2b7e:	05 90       	lpm	r0, Z+
    2b80:	0d 92       	st	X+, r0
    2b82:	a6 32       	cpi	r26, 0x26	; 38
    2b84:	b1 07       	cpc	r27, r17
    2b86:	d9 f7       	brne	.-10     	; 0x2b7e <__do_copy_data+0xc>

00002b88 <__do_clear_bss>:
    2b88:	29 e0       	ldi	r18, 0x09	; 9
    2b8a:	a6 e2       	ldi	r26, 0x26	; 38
    2b8c:	b5 e0       	ldi	r27, 0x05	; 5
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <.do_clear_bss_start>

00002b90 <.do_clear_bss_loop>:
    2b90:	1d 92       	st	X+, r1

00002b92 <.do_clear_bss_start>:
    2b92:	a6 36       	cpi	r26, 0x66	; 102
    2b94:	b2 07       	cpc	r27, r18
    2b96:	e1 f7       	brne	.-8      	; 0x2b90 <.do_clear_bss_loop>
    2b98:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <main>
    2b9c:	0c 94 45 6d 	jmp	0xda8a	; 0xda8a <_exit>

00002ba0 <__bad_interrupt>:
    2ba0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002ba4 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    2ba4:	00 00       	nop
	ret					// 4 (5 cycles)
    2ba6:	08 95       	ret

00002ba8 <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    2ba8:	fd df       	rcall	.-6      	; 0x2ba4 <glcd_delay>
	rcall	glcd_delay
    2baa:	fc df       	rcall	.-8      	; 0x2ba4 <glcd_delay>
	rcall	glcd_delay
    2bac:	fb df       	rcall	.-10     	; 0x2ba4 <glcd_delay>
	rcall	glcd_delay
    2bae:	fa df       	rcall	.-12     	; 0x2ba4 <glcd_delay>
	ret
    2bb0:	08 95       	ret

00002bb2 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    2bb2:	cf 93       	push	r28

00002bb4 <master_loop>:

master_loop:
	cbi 	BIND		//	2
    2bb4:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    2bb6:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    2bb8:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <VarDelay>
	sbi		BIND		//	2
    2bbc:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    2bbe:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    2bc0:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <VarDelay>
	dec		r24
    2bc4:	8a 95       	dec	r24
	brne	master_loop	//  2 1
    2bc6:	b1 f7       	brne	.-20     	; 0x2bb4 <master_loop>

	pop		YL			//	  1
    2bc8:	cf 91       	pop	r28
	ret					//	  4 
    2bca:	08 95       	ret

00002bcc <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    2bcc:	00 c0       	rjmp	.+0      	; 0x2bce <VarDelay+0x2>
	rjmp .+0			// 2
    2bce:	00 c0       	rjmp	.+0      	; 0x2bd0 <VarDelay+0x4>
	rjmp .+0			// 2
    2bd0:	00 c0       	rjmp	.+0      	; 0x2bd2 <VarDelay+0x6>
	rjmp .+0			// 2
    2bd2:	00 c0       	rjmp	.+0      	; 0x2bd4 <VarDelay+0x8>
	rjmp .+0			// 2
    2bd4:	00 c0       	rjmp	.+0      	; 0x2bd6 <VarDelay+0xa>
	rjmp .+0			// 2
    2bd6:	00 c0       	rjmp	.+0      	; 0x2bd8 <VarDelay+0xc>
	rjmp .+0			// 2
    2bd8:	00 c0       	rjmp	.+0      	; 0x2bda <VarDelay+0xe>
	rjmp .+0			// 2
    2bda:	00 c0       	rjmp	.+0      	; 0x2bdc <VarDelay+0x10>
	nop					// 1
    2bdc:	00 00       	nop
	dec 	YL			// 1
    2bde:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    2be0:	a9 f7       	brne	.-22     	; 0x2bcc <VarDelay>
	ret					//   4 
    2be2:	08 95       	ret

00002be4 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    2be4:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    2be6:	ef 93       	push	r30
	push	ZH			// 2
    2be8:	ff 93       	push	r31
	push	XL			// 2
    2bea:	af 93       	push	r26
	push	XH			// 2
    2bec:	bf 93       	push	r27
	push	YL			// 2
    2bee:	cf 93       	push	r28
	push	YH			// 2
    2bf0:	df 93       	push	r29
	push	16			// 2
    2bf2:	0f 93       	push	r16
	push	17			// 2
    2bf4:	1f 93       	push	r17
	push	18			// 2
    2bf6:	2f 93       	push	r18
	push	19			// 2
    2bf8:	3f 93       	push	r19
	push	20			// 2
    2bfa:	4f 93       	push	r20
	push	21			// 2
    2bfc:	5f 93       	push	r21
	push	22			// 2
    2bfe:	6f 93       	push	r22
	push	23			// 2
    2c00:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    2c02:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    2c04:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    2c06:	8f 93       	push	r24
	push	25			// 2
    2c08:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    2c0a:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    2c0c:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    2c0e:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    2c10:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    2c12:	af 93       	push	r26
	push	XH 			// 2
    2c14:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    2c16:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    2c18:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    2c1a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    2c1c:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    2c1e:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    2c20:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    2c22:	af 93       	push	r26
	push	XH 		
    2c24:	bf 93       	push	r27
	andi	XL,	0x07
    2c26:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    2c28:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    2c2a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    2c2c:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    2c2e:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    2c30:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    2c32:	af 93       	push	r26
	push	XH 		
    2c34:	bf 93       	push	r27
	andi	XL,	0x07
    2c36:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    2c38:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    2c3a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    2c3c:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    2c3e:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    2c40:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    2c42:	af 93       	push	r26
	push	XH 	
    2c44:	bf 93       	push	r27
	andi	XL,	0x07
    2c46:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    2c48:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    2c4a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    2c4c:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    2c4e:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    2c50:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    2c52:	af 93       	push	r26
	push	XH 	
    2c54:	bf 93       	push	r27
	andi	XL,	0x07
    2c56:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    2c58:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    2c5a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    2c5c:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    2c5e:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    2c60:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    2c62:	af 93       	push	r26
	push	XH 	
    2c64:	bf 93       	push	r27
	andi	XL,	0x07
    2c66:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    2c68:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    2c6a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    2c6c:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    2c6e:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    2c70:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    2c72:	af 93       	push	r26
	push	XH 
    2c74:	bf 93       	push	r27
	andi	XL,	0x07
    2c76:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    2c78:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    2c7a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    2c7c:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    2c7e:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    2c80:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    2c82:	af 93       	push	r26
	push	XH 
    2c84:	bf 93       	push	r27
	andi	XL,	0x07
    2c86:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    2c88:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    2c8a:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    2c8c:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    2c90:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    2c92:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    2c94:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <DelayLow>
// M2
	mov		r25,r22
    2c98:	96 2f       	mov	r25, r22
	call	DelayHigh
    2c9a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    2c9e:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    2ca0:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    2ca2:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <DelayLow>
// M3
	mov		r25,r21
    2ca6:	95 2f       	mov	r25, r21
	call	DelayHigh
    2ca8:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    2cac:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    2cae:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    2cb0:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <DelayLow>
// M4
	mov		r25,r20
    2cb4:	94 2f       	mov	r25, r20
	call	DelayHigh
    2cb6:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    2cba:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    2cbc:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    2cbe:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <DelayLow>
// M5
	mov		r25,r19
    2cc2:	93 2f       	mov	r25, r19
	call	DelayHigh
    2cc4:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    2cc8:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    2cca:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    2ccc:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <DelayLow>
// M6
	mov		r25,r18
    2cd0:	92 2f       	mov	r25, r18
	call	DelayHigh
    2cd2:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    2cd6:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    2cd8:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    2cda:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <DelayLow>
// M7
	mov		r25,r17
    2cde:	91 2f       	mov	r25, r17
	call	DelayHigh
    2ce0:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    2ce4:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    2ce6:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    2ce8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <DelayLow>
// M8
	mov		r25,r16
    2cec:	90 2f       	mov	r25, r16
	call	DelayHigh
    2cee:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    2cf2:	f7 fc       	sbrc	r15, 7
	sbi 	M8
    2cf4:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    2cf6:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    2cfa:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <pwm_delay>
	call    pwm_delay
    2cfe:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <pwm_delay>
	call    pwm_delay
    2d02:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    2d06:	bf 91       	pop	r27
	pop		XL
    2d08:	af 91       	pop	r26
	call	shuffle_8
    2d0a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <shuffle_8>
	mov		r16,XL
    2d0e:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    2d10:	bf 91       	pop	r27
	pop		XL
    2d12:	af 91       	pop	r26
	call	shuffle_8
    2d14:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <shuffle_8>
	mov		r17,XL
    2d18:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    2d1a:	bf 91       	pop	r27
	pop		XL
    2d1c:	af 91       	pop	r26
	call	shuffle_8
    2d1e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <shuffle_8>
	mov		r18,XL
    2d22:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    2d24:	bf 91       	pop	r27
	pop		XL
    2d26:	af 91       	pop	r26
	call	shuffle_8
    2d28:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <shuffle_8>
	mov		r19,XL
    2d2c:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    2d2e:	bf 91       	pop	r27
	pop		XL
    2d30:	af 91       	pop	r26
	call	shuffle_8
    2d32:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <shuffle_8>
	mov		r20,XL
    2d36:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    2d38:	bf 91       	pop	r27
	pop		XL
    2d3a:	af 91       	pop	r26
	call	shuffle_8
    2d3c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <shuffle_8>
	mov		r21,XL
    2d40:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    2d42:	bf 91       	pop	r27
	pop		XL
    2d44:	af 91       	pop	r26
	call	shuffle_8
    2d46:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <shuffle_8>
	mov		r22,XL
    2d4a:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    2d4c:	bf 91       	pop	r27
	pop		XL
    2d4e:	af 91       	pop	r26
	call	shuffle_8
    2d50:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <shuffle_8>
	mov		r23,XL
    2d54:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    2d56:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    2d58:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    2d5a:	00 24       	eor	r0, r0

00002d5c <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    2d5c:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    2d5e:	19 f4       	brne	.+6      	; 0x2d66 <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    2d60:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    2d62:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <jj1>

00002d66 <j1>:
j1:
	rjmp 	.+0			// 2
    2d66:	00 c0       	rjmp	.+0      	; 0x2d68 <j1+0x2>
	rjmp 	.+0			// 2
    2d68:	00 c0       	rjmp	.+0      	; 0x2d6a <jj1>

00002d6a <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    2d6a:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    2d6c:	19 f4       	brne	.+6      	; 0x2d74 <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    2d6e:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    2d70:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <jj2>

00002d74 <j2>:
j2:
	rjmp	.+0
    2d74:	00 c0       	rjmp	.+0      	; 0x2d76 <j2+0x2>
	rjmp	.+0
    2d76:	00 c0       	rjmp	.+0      	; 0x2d78 <jj2>

00002d78 <jj2>:
jj2:
	subi	r21,1
    2d78:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    2d7a:	19 f4       	brne	.+6      	; 0x2d82 <j3>
	cbi 	M3
    2d7c:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    2d7e:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <jj3>

00002d82 <j3>:
j3:
	rjmp	.+0
    2d82:	00 c0       	rjmp	.+0      	; 0x2d84 <j3+0x2>
	rjmp	.+0
    2d84:	00 c0       	rjmp	.+0      	; 0x2d86 <jj3>

00002d86 <jj3>:
jj3:
	subi 	r20,1
    2d86:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    2d88:	19 f4       	brne	.+6      	; 0x2d90 <j4>
	cbi 	M4
    2d8a:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    2d8c:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <jj4>

00002d90 <j4>:
j4:
	rjmp 	.+0
    2d90:	00 c0       	rjmp	.+0      	; 0x2d92 <j4+0x2>
	rjmp 	.+0
    2d92:	00 c0       	rjmp	.+0      	; 0x2d94 <jj4>

00002d94 <jj4>:
jj4:
	subi	r19,1
    2d94:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    2d96:	19 f4       	brne	.+6      	; 0x2d9e <j5>
	cbi 	M5
    2d98:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    2d9a:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <jj5>

00002d9e <j5>:
j5:
	rjmp 	.+0
    2d9e:	00 c0       	rjmp	.+0      	; 0x2da0 <j5+0x2>
	rjmp 	.+0
    2da0:	00 c0       	rjmp	.+0      	; 0x2da2 <jj5>

00002da2 <jj5>:
jj5:
	subi	r18,1
    2da2:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    2da4:	19 f4       	brne	.+6      	; 0x2dac <j6>
	cbi 	M6
    2da6:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    2da8:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <jj6>

00002dac <j6>:
j6:
	rjmp 	.+0
    2dac:	00 c0       	rjmp	.+0      	; 0x2dae <j6+0x2>
	rjmp	.+0
    2dae:	00 c0       	rjmp	.+0      	; 0x2db0 <jj6>

00002db0 <jj6>:
jj6:
	subi	r17,1
    2db0:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    2db2:	19 f4       	brne	.+6      	; 0x2dba <j7>
	cbi 	M7
    2db4:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    2db6:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <jj7>

00002dba <j7>:
j7:
	rjmp 	.+0
    2dba:	00 c0       	rjmp	.+0      	; 0x2dbc <j7+0x2>
	rjmp 	.+0
    2dbc:	00 c0       	rjmp	.+0      	; 0x2dbe <jj7>

00002dbe <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    2dbe:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    2dc0:	19 f4       	brne	.+6      	; 0x2dc8 <j8>
	cbi 	M8
    2dc2:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    2dc4:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <jj8>

00002dc8 <j8>:
j8:
	rjmp 	.+0
    2dc8:	00 c0       	rjmp	.+0      	; 0x2dca <j8+0x2>
	rjmp 	.+0
    2dca:	00 c0       	rjmp	.+0      	; 0x2dcc <jj8>

00002dcc <jj8>:
jj8:
	call	pad_100_delay // (100)
    2dcc:	0e 94 48 17 	call	0x2e90	; 0x2e90 <pad_100_delay>

	subi 	YL,1		// 1
    2dd0:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    2dd2:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    2dd4:	11 f0       	breq	.+4      	; 0x2dda <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    2dd6:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <nloop>

00002dda <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    2dda:	9f 91       	pop	r25
	pop		24			// 		2
    2ddc:	8f 91       	pop	r24
	pop		23			//		2
    2dde:	7f 91       	pop	r23
	pop		22			//		2
    2de0:	6f 91       	pop	r22
	pop		21			//		2
    2de2:	5f 91       	pop	r21
	pop		20			//		2
    2de4:	4f 91       	pop	r20
	pop		19			//		2
    2de6:	3f 91       	pop	r19
	pop		18			//		2
    2de8:	2f 91       	pop	r18
	pop		17			//		2
    2dea:	1f 91       	pop	r17
	pop		16			//		2
    2dec:	0f 91       	pop	r16
	pop		YH			//		2
    2dee:	df 91       	pop	r29
	pop		YL			//		2
    2df0:	cf 91       	pop	r28
	pop		XH			//		2
    2df2:	bf 91       	pop	r27
	pop		XL			//		2
    2df4:	af 91       	pop	r26
	pop		ZH			// 		2
    2df6:	ff 91       	pop	r31
	pop		ZL			//		2
    2df8:	ef 91       	pop	r30

	ret					//		4
    2dfa:	08 95       	ret

00002dfc <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    2dfc:	0f 93       	push	r16
	push	17
    2dfe:	1f 93       	push	r17
	push	18
    2e00:	2f 93       	push	r18

	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    2e02:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    2e04:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    2e06:	00 24       	eor	r0, r0

00002e08 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    2e08:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    2e0a:	71 f0       	breq	.+28     	; 0x2e28 <in1>
	cpi		r24,0x01	; 1
    2e0c:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    2e0e:	79 f0       	breq	.+30     	; 0x2e2e <in2>
	cpi		r24,0x02	; 2
    2e10:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    2e12:	81 f0       	breq	.+32     	; 0x2e34 <in3>
	cpi		r24,0x03	; 3
    2e14:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    2e16:	89 f0       	breq	.+34     	; 0x2e3a <in4>
	cpi		r24,0x04	; 4
    2e18:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    2e1a:	91 f0       	breq	.+36     	; 0x2e40 <in5>
	cpi		r24,0x05	; 5
    2e1c:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    2e1e:	99 f0       	breq	.+38     	; 0x2e46 <in6>
	cpi		r24,0x06	; 6
    2e20:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    2e22:	a1 f0       	breq	.+40     	; 0x2e4c <in7>
	cpi		r24,0x07	; 7
    2e24:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    2e26:	a9 f0       	breq	.+42     	; 0x2e52 <in8>

00002e28 <in1>:

in1:sbi 	M1			// Set output high
    2e28:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    2e2a:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <loopin>

00002e2e <in2>:
in2:sbi 	M2
    2e2e:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    2e30:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <loopin>

00002e34 <in3>:
in3:sbi 	M3	
    2e34:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    2e36:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <loopin>

00002e3a <in4>:
in4:sbi 	M4
    2e3a:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    2e3c:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <loopin>

00002e40 <in5>:
in5:sbi 	M5
    2e40:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    2e42:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <loopin>

00002e46 <in6>:
in6:sbi 	M6
    2e46:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    2e48:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <loopin>

00002e4c <in7>:
in7:sbi 	M7
    2e4c:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    2e4e:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <loopin>

00002e52 <in8>:
in8:sbi 	M8
    2e52:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    2e54:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <loopin>

00002e58 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    2e58:	00 c0       	rjmp	.+0      	; 0x2e5a <loopin+0x2>
	rjmp .+0			// 2
    2e5a:	00 c0       	rjmp	.+0      	; 0x2e5c <loopin+0x4>
	rjmp .+0			// 2
    2e5c:	00 c0       	rjmp	.+0      	; 0x2e5e <loopin+0x6>
	rjmp .+0			// 2
    2e5e:	00 c0       	rjmp	.+0      	; 0x2e60 <loopin+0x8>
	rjmp .+0			// 2
    2e60:	00 c0       	rjmp	.+0      	; 0x2e62 <loopin+0xa>
	rjmp .+0			// 2
    2e62:	00 c0       	rjmp	.+0      	; 0x2e64 <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    2e64:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    2e66:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    2e68:	19 f4       	brne	.+6      	; 0x2e70 <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    2e6c:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    2e6e:	22 b9       	out	0x02, r18	; 2

00002e70 <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    2e70:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    2e72:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    2e74:	89 f7       	brne	.-30     	; 0x2e58 <loopin>

	pop		18
    2e76:	2f 91       	pop	r18
	pop		17			// Restore regs
    2e78:	1f 91       	pop	r17
	pop		16
    2e7a:	0f 91       	pop	r16
	ret	
    2e7c:	08 95       	ret

00002e7e <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    2e7e:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    2e80:	05 e6       	ldi	r16, 0x65	; 101

00002e82 <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    2e82:	00 c0       	rjmp	.+0      	; 0x2e84 <pwm_loop+0x2>
	rjmp .+0			// 2
    2e84:	00 c0       	rjmp	.+0      	; 0x2e86 <pwm_loop+0x4>
	rjmp .+0			// 2
    2e86:	00 c0       	rjmp	.+0      	; 0x2e88 <pwm_loop+0x6>
	subi	r16,1		// 1
    2e88:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    2e8a:	d9 f7       	brne	.-10     	; 0x2e82 <pwm_loop>

00002e8c <pwm_exit>:

pwm_exit:
	pop		16			//    1
    2e8c:	0f 91       	pop	r16
	ret					//    4 to return
    2e8e:	08 95       	ret

00002e90 <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    2e90:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    2e92:	09 e0       	ldi	r16, 0x09	; 9

00002e94 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    2e94:	00 c0       	rjmp	.+0      	; 0x2e96 <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    2e96:	00 c0       	rjmp	.+0      	; 0x2e98 <pad_100+0x4>
	rjmp .+0			// 2
    2e98:	00 c0       	rjmp	.+0      	; 0x2e9a <pad_100+0x6>

	subi 	16,1		// 1
    2e9a:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    2e9c:	d9 f7       	brne	.-10     	; 0x2e94 <pad_100>

	nop					// 		1		Trim to precisely the right value
    2e9e:	00 00       	nop
	rjmp .+0			// 		2
    2ea0:	00 c0       	rjmp	.+0      	; 0x2ea2 <pad_100+0xe>
	rjmp .+0			// 		2
    2ea2:	00 c0       	rjmp	.+0      	; 0x2ea4 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    2ea4:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    2ea6:	08 95       	ret

00002ea8 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    2ea8:	00 c0       	rjmp	.+0      	; 0x2eaa <us_delay+0x2>
	rjmp .+0			// 2
    2eaa:	00 c0       	rjmp	.+0      	; 0x2eac <us_delay+0x4>
	rjmp .+0			// 2
    2eac:	00 c0       	rjmp	.+0      	; 0x2eae <us_delay+0x6>
	rjmp .+0			// 2
    2eae:	00 c0       	rjmp	.+0      	; 0x2eb0 <us_delay+0x8>
	ret					// 4 (16 cycles)
    2eb0:	08 95       	ret

00002eb2 <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    2eb2:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    2eb4:	a7 95       	ror	r26
	lsr		XH			// 1
    2eb6:	b6 95       	lsr	r27
	ror		XL			// 1
    2eb8:	a7 95       	ror	r26
	lsr		XH			// 1
    2eba:	b6 95       	lsr	r27
	ror		XL			// 1
    2ebc:	a7 95       	ror	r26
	ret					// 4
    2ebe:	08 95       	ret

00002ec0 <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    2ec0:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    2ec2:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    2ec4:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    2ec6:	31 f0       	breq	.+12     	; 0x2ed4 <LoopHighOut1>

00002ec8 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    2ec8:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <us_delay>
	dec 	YL			// 		1	1
    2ecc:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    2ed0:	fb cf       	rjmp	.-10     	; 0x2ec8 <LoopHigh>

00002ed2 <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    2ed2:	00 c0       	rjmp	.+0      	; 0x2ed4 <LoopHighOut1>

00002ed4 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    2ed4:	00 00       	nop
    ret					// 4	4	4
    2ed6:	08 95       	ret

00002ed8 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    2ed8:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    2eda:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    2edc:	31 f0       	breq	.+12     	; 0x2eea <LoopLowOut1>

00002ede <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    2ede:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <us_delay>
	dec 	YL			//		1	1
    2ee2:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    2ee4:	09 f0       	breq	.+2      	; 0x2ee8 <LoopLowOut2>
	rjmp	LoopLow		//			2
    2ee6:	fb cf       	rjmp	.-10     	; 0x2ede <LoopLow>

00002ee8 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    2ee8:	00 c0       	rjmp	.+0      	; 0x2eea <LoopLowOut1>

00002eea <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    2eea:	08 95       	ret

00002eec <get_raw_accs>:
// routine used by the zeroing calibration routine. Chicken | Egg.
// We also cannot merge P1 and P2 here as each have their own zeros.
//***************************************************************

void get_raw_accs(void)
{
    2eec:	cf 92       	push	r12
    2eee:	df 92       	push	r13
    2ef0:	ef 92       	push	r14
    2ef2:	ff 92       	push	r15
    2ef4:	0f 93       	push	r16
    2ef6:	1f 93       	push	r17
    2ef8:	cf 93       	push	r28
    2efa:	df 93       	push	r29
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	2c 97       	sbiw	r28, 0x0c	; 12
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61

	// Get data from MPU6050
	uint8_t Accs[6];

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    2f0c:	26 e0       	ldi	r18, 0x06	; 6
    2f0e:	8e 01       	movw	r16, r28
    2f10:	0f 5f       	subi	r16, 0xFF	; 255
    2f12:	1f 4f       	sbci	r17, 0xFF	; 255
    2f14:	a8 01       	movw	r20, r16
    2f16:	6b e3       	ldi	r22, 0x3B	; 59
    2f18:	80 ed       	ldi	r24, 0xD0	; 208
    2f1a:	0e 94 b8 3a 	call	0x7570	; 0x7570 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise.
	// This notation is true to the chip, but not the board orientation.
	RawADC[ROLL] = (Accs[0] << 8) + Accs[1];
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	98 2f       	mov	r25, r24
    2f24:	88 27       	eor	r24, r24
    2f26:	2a 81       	ldd	r18, Y+2	; 0x02
    2f28:	82 0f       	add	r24, r18
    2f2a:	91 1d       	adc	r25, r1
    2f2c:	98 87       	std	Y+8, r25	; 0x08
    2f2e:	8f 83       	std	Y+7, r24	; 0x07
	RawADC[PITCH] = -((Accs[2] << 8) + Accs[3]);
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	98 2f       	mov	r25, r24
    2f36:	88 27       	eor	r24, r24
    2f38:	2c 81       	ldd	r18, Y+4	; 0x04
    2f3a:	82 0f       	add	r24, r18
    2f3c:	91 1d       	adc	r25, r1
    2f3e:	91 95       	neg	r25
    2f40:	81 95       	neg	r24
    2f42:	91 09       	sbc	r25, r1
    2f44:	9a 87       	std	Y+10, r25	; 0x0a
    2f46:	89 87       	std	Y+9, r24	; 0x09
	RawADC[YAW] = (Accs[4] << 8) + Accs[5];
    2f48:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	98 2f       	mov	r25, r24
    2f4e:	88 27       	eor	r24, r24
    2f50:	2e 81       	ldd	r18, Y+6	; 0x06
    2f52:	82 0f       	add	r24, r18
    2f54:	91 1d       	adc	r25, r1
    2f56:	9c 87       	std	Y+12, r25	; 0x0c
    2f58:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		accADC_P1[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P1][i])] >> 6;
    2f5a:	40 91 2d 08 	lds	r20, 0x082D
		accADC_P2[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P2][i])] >> 6;
    2f5e:	20 91 a3 06 	lds	r18, 0x06A3
    2f62:	3d e6       	ldi	r19, 0x6D	; 109
    2f64:	e3 2e       	mov	r14, r19
    2f66:	35 e0       	ldi	r19, 0x05	; 5
    2f68:	f3 2e       	mov	r15, r19
    2f6a:	a9 e7       	ldi	r26, 0x79	; 121
    2f6c:	b5 e0       	ldi	r27, 0x05	; 5
    2f6e:	83 e0       	ldi	r24, 0x03	; 3
    2f70:	48 02       	muls	r20, r24
    2f72:	a0 01       	movw	r20, r0
    2f74:	11 24       	eor	r1, r1
    2f76:	e3 e0       	ldi	r30, 0x03	; 3
    2f78:	2e 02       	muls	r18, r30
    2f7a:	90 01       	movw	r18, r0
    2f7c:	11 24       	eor	r1, r1
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	4c 57       	subi	r20, 0x7C	; 124
    2f84:	5e 4f       	sbci	r21, 0xFE	; 254
    2f86:	2c 57       	subi	r18, 0x7C	; 124
    2f88:	3e 4f       	sbci	r19, 0xFE	; 254
    2f8a:	68 01       	movw	r12, r16
    2f8c:	fa 01       	movw	r30, r20
    2f8e:	e8 0f       	add	r30, r24
    2f90:	f9 1f       	adc	r31, r25

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		accADC_P1[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P1][i])] >> 6;
    2f92:	e4 91       	lpm	r30, Z
    2f94:	ee 0f       	add	r30, r30
    2f96:	ff 0b       	sbc	r31, r31
    2f98:	e0 0f       	add	r30, r16
    2f9a:	f1 1f       	adc	r31, r17
    2f9c:	66 81       	ldd	r22, Z+6	; 0x06
    2f9e:	77 81       	ldd	r23, Z+7	; 0x07
    2fa0:	e6 e0       	ldi	r30, 0x06	; 6
    2fa2:	75 95       	asr	r23
    2fa4:	67 95       	ror	r22
    2fa6:	ea 95       	dec	r30
    2fa8:	e1 f7       	brne	.-8      	; 0x2fa2 <get_raw_accs+0xb6>
    2faa:	f7 01       	movw	r30, r14
    2fac:	61 93       	st	Z+, r22
    2fae:	71 93       	st	Z+, r23
    2fb0:	7f 01       	movw	r14, r30
    2fb2:	f9 01       	movw	r30, r18
    2fb4:	e8 0f       	add	r30, r24
    2fb6:	f9 1f       	adc	r31, r25
		accADC_P2[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P2][i])] >> 6;
    2fb8:	e4 91       	lpm	r30, Z
    2fba:	ee 0f       	add	r30, r30
    2fbc:	ff 0b       	sbc	r31, r31
    2fbe:	ec 0d       	add	r30, r12
    2fc0:	fd 1d       	adc	r31, r13
    2fc2:	66 81       	ldd	r22, Z+6	; 0x06
    2fc4:	77 81       	ldd	r23, Z+7	; 0x07
    2fc6:	f6 e0       	ldi	r31, 0x06	; 6
    2fc8:	75 95       	asr	r23
    2fca:	67 95       	ror	r22
    2fcc:	fa 95       	dec	r31
    2fce:	e1 f7       	brne	.-8      	; 0x2fc8 <get_raw_accs+0xdc>
    2fd0:	6d 93       	st	X+, r22
    2fd2:	7d 93       	st	X+, r23
    2fd4:	01 96       	adiw	r24, 0x01	; 1
	RawADC[ROLL] = (Accs[0] << 8) + Accs[1];
	RawADC[PITCH] = -((Accs[2] << 8) + Accs[3]);
	RawADC[YAW] = (Accs[4] << 8) + Accs[5];

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
    2fd6:	83 30       	cpi	r24, 0x03	; 3
    2fd8:	91 05       	cpc	r25, r1
    2fda:	c1 f6       	brne	.-80     	; 0x2f8c <get_raw_accs+0xa0>
	{
		// Rearrange the sensors for both orientations
		accADC_P1[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P1][i])] >> 6;
		accADC_P2[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation_P2][i])] >> 6;
	}
}
    2fdc:	2c 96       	adiw	r28, 0x0c	; 12
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	f8 94       	cli
    2fe2:	de bf       	out	0x3e, r29	; 62
    2fe4:	0f be       	out	0x3f, r0	; 63
    2fe6:	cd bf       	out	0x3d, r28	; 61
    2fe8:	df 91       	pop	r29
    2fea:	cf 91       	pop	r28
    2fec:	1f 91       	pop	r17
    2fee:	0f 91       	pop	r16
    2ff0:	ff 90       	pop	r15
    2ff2:	ef 90       	pop	r14
    2ff4:	df 90       	pop	r13
    2ff6:	cf 90       	pop	r12
    2ff8:	08 95       	ret

00002ffa <ReadAcc>:
int16_t accVert = 0;				// Holds the level-zeroed Z-acc value. Used for height damping in hover only.
int16_t accVert_P1 = 0;
int16_t accVert_P2 = 0;

void ReadAcc()
{
    2ffa:	4f 92       	push	r4
    2ffc:	5f 92       	push	r5
    2ffe:	6f 92       	push	r6
    3000:	7f 92       	push	r7
    3002:	8f 92       	push	r8
    3004:	9f 92       	push	r9
    3006:	af 92       	push	r10
    3008:	bf 92       	push	r11
    300a:	cf 92       	push	r12
    300c:	df 92       	push	r13
    300e:	ef 92       	push	r14
    3010:	ff 92       	push	r15
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
	uint8_t i;
	int16_t temp1, temp2;

	get_raw_accs();				// Updates accADC_P1[] and accADC_P2[] (RPY)
    301a:	0e 94 76 17 	call	0x2eec	; 0x2eec <get_raw_accs>

	// P1
	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inverse calibration
	if (!(Config.Main_flags & (1 << inv_cal_done_P1)))
    301e:	40 91 03 08 	lds	r20, 0x0803
    3022:	40 fd       	sbrc	r20, 0
    3024:	05 c0       	rjmp	.+10     	; 0x3030 <ReadAcc+0x36>
	{
		Config.AccZero_P1[YAW] = 0;
    3026:	10 92 eb 07 	sts	0x07EB, r1
    302a:	10 92 ea 07 	sts	0x07EA, r1
    302e:	0e c0       	rjmp	.+28     	; 0x304c <ReadAcc+0x52>
	}
	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have valid values
	else
	{
		Config.AccZero_P1[YAW] = Config.AccZeroNormZ_P1 - Config.AccZeroDiff_P1;
    3030:	80 91 ec 07 	lds	r24, 0x07EC
    3034:	90 91 ed 07 	lds	r25, 0x07ED
    3038:	20 91 f0 07 	lds	r18, 0x07F0
    303c:	30 91 f1 07 	lds	r19, 0x07F1
    3040:	82 1b       	sub	r24, r18
    3042:	93 0b       	sbc	r25, r19
    3044:	90 93 eb 07 	sts	0x07EB, r25
    3048:	80 93 ea 07 	sts	0x07EA, r24
	}
	
	// P2
	if (!(Config.Main_flags & (1 << inv_cal_done_P2)))
    304c:	42 fd       	sbrc	r20, 2
    304e:	05 c0       	rjmp	.+10     	; 0x305a <ReadAcc+0x60>
	{
		Config.AccZero_P2[YAW] = 0;
    3050:	10 92 20 08 	sts	0x0820, r1
    3054:	10 92 1f 08 	sts	0x081F, r1
    3058:	0e c0       	rjmp	.+28     	; 0x3076 <ReadAcc+0x7c>
	}
	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have valid values
	else
	{
		Config.AccZero_P2[YAW] = Config.AccZeroNormZ_P2 - Config.AccZeroDiff_P2;
    305a:	80 91 21 08 	lds	r24, 0x0821
    305e:	90 91 22 08 	lds	r25, 0x0822
    3062:	20 91 25 08 	lds	r18, 0x0825
    3066:	30 91 26 08 	lds	r19, 0x0826
    306a:	82 1b       	sub	r24, r18
    306c:	93 0b       	sbc	r25, r19
    306e:	90 93 20 08 	sts	0x0820, r25
    3072:	80 93 1f 08 	sts	0x081F, r24
    3076:	5d e6       	ldi	r21, 0x6D	; 109
    3078:	65 2e       	mov	r6, r21
    307a:	55 e0       	ldi	r21, 0x05	; 5
    307c:	75 2e       	mov	r7, r21
    307e:	69 e7       	ldi	r22, 0x79	; 121
    3080:	c6 2e       	mov	r12, r22
    3082:	65 e0       	ldi	r22, 0x05	; 5
    3084:	d6 2e       	mov	r13, r22
    3086:	0b e1       	ldi	r16, 0x1B	; 27
    3088:	18 e0       	ldi	r17, 0x08	; 8
    308a:	73 e7       	ldi	r23, 0x73	; 115
    308c:	e7 2e       	mov	r14, r23
    308e:	75 e0       	ldi	r23, 0x05	; 5
    3090:	f7 2e       	mov	r15, r23
int16_t accVert = 0;				// Holds the level-zeroed Z-acc value. Used for height damping in hover only.
int16_t accVert_P1 = 0;
int16_t accVert_P2 = 0;

void ReadAcc()
{
    3092:	c0 e0       	ldi	r28, 0x00	; 0
    3094:	d0 e0       	ldi	r29, 0x00	; 0
			// Change polarity - use the zeros from the appropriate calibrate
			temp1 = ((accADC_P1[i] - Config.AccZero_P1[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][i]));
			temp2 = ((accADC_P2[i] - Config.AccZero_P2[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][i]));
			
			// Get P1 value
			temp1 = scale32(temp1, (100 - transition));
    3096:	e4 e6       	ldi	r30, 0x64	; 100
    3098:	4e 2e       	mov	r4, r30
    309a:	51 2c       	mov	r5, r1

	// Roll and Pitch are handled normally
	for (i = 0; i < (NUMBEROFAXIS - 1); i++)
	{
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    309c:	80 91 a4 06 	lds	r24, 0x06A4
    30a0:	60 91 a3 06 	lds	r22, 0x06A3
    30a4:	88 23       	and	r24, r24
    30a6:	09 f4       	brne	.+2      	; 0x30aa <ReadAcc+0xb0>
    30a8:	4c c0       	rjmp	.+152    	; 0x3142 <ReadAcc+0x148>
		{
			// Change polarity - use the zeros from the appropriate calibrate
			temp1 = ((accADC_P1[i] - Config.AccZero_P1[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][i]));
    30aa:	40 91 2d 08 	lds	r20, 0x082D
    30ae:	55 27       	eor	r21, r21
    30b0:	47 fd       	sbrc	r20, 7
    30b2:	50 95       	com	r21
    30b4:	fa 01       	movw	r30, r20
    30b6:	ee 0f       	add	r30, r30
    30b8:	ff 1f       	adc	r31, r31
    30ba:	e4 0f       	add	r30, r20
    30bc:	f5 1f       	adc	r31, r21
    30be:	ec 0f       	add	r30, r28
    30c0:	fd 1f       	adc	r31, r29
    30c2:	e4 5c       	subi	r30, 0xC4	; 196
    30c4:	fe 4f       	sbci	r31, 0xFE	; 254
    30c6:	74 91       	lpm	r23, Z
    30c8:	f3 01       	movw	r30, r6
    30ca:	20 81       	ld	r18, Z
    30cc:	31 81       	ldd	r19, Z+1	; 0x01
    30ce:	d8 01       	movw	r26, r16
    30d0:	d5 97       	sbiw	r26, 0x35	; 53
    30d2:	4d 91       	ld	r20, X+
    30d4:	5c 91       	ld	r21, X
    30d6:	24 1b       	sub	r18, r20
    30d8:	35 0b       	sbc	r19, r21
    30da:	72 03       	mulsu	r23, r18
    30dc:	c0 01       	movw	r24, r0
    30de:	73 9f       	mul	r23, r19
    30e0:	90 0d       	add	r25, r0
    30e2:	11 24       	eor	r1, r1
			temp2 = ((accADC_P2[i] - Config.AccZero_P2[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][i]));
    30e4:	26 2f       	mov	r18, r22
    30e6:	33 27       	eor	r19, r19
    30e8:	27 fd       	sbrc	r18, 7
    30ea:	30 95       	com	r19
    30ec:	f9 01       	movw	r30, r18
    30ee:	ee 0f       	add	r30, r30
    30f0:	ff 1f       	adc	r31, r31
    30f2:	e2 0f       	add	r30, r18
    30f4:	f3 1f       	adc	r31, r19
    30f6:	ec 0f       	add	r30, r28
    30f8:	fd 1f       	adc	r31, r29
    30fa:	e4 5c       	subi	r30, 0xC4	; 196
    30fc:	fe 4f       	sbci	r31, 0xFE	; 254
    30fe:	64 91       	lpm	r22, Z
    3100:	f6 01       	movw	r30, r12
    3102:	20 81       	ld	r18, Z
    3104:	31 81       	ldd	r19, Z+1	; 0x01
    3106:	f8 01       	movw	r30, r16
    3108:	40 81       	ld	r20, Z
    310a:	51 81       	ldd	r21, Z+1	; 0x01
    310c:	24 1b       	sub	r18, r20
    310e:	35 0b       	sbc	r19, r21
    3110:	62 03       	mulsu	r22, r18
    3112:	40 01       	movw	r8, r0
    3114:	63 9f       	mul	r22, r19
    3116:	90 0c       	add	r9, r0
    3118:	11 24       	eor	r1, r1
			
			// Get P1 value
			temp1 = scale32(temp1, (100 - transition));
    311a:	20 91 37 05 	lds	r18, 0x0537
    311e:	30 91 38 05 	lds	r19, 0x0538
    3122:	b2 01       	movw	r22, r4
    3124:	62 1b       	sub	r22, r18
    3126:	73 0b       	sbc	r23, r19
    3128:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    312c:	5c 01       	movw	r10, r24

			// Get P2 value
			temp2 = scale32(temp2, transition);
    312e:	60 91 37 05 	lds	r22, 0x0537
    3132:	70 91 38 05 	lds	r23, 0x0538
    3136:	c4 01       	movw	r24, r8
    3138:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>

			// Sum the two values
			accADC[i] = temp1 + temp2;
    313c:	8a 0d       	add	r24, r10
    313e:	9b 1d       	adc	r25, r11
    3140:	1b c0       	rjmp	.+54     	; 0x3178 <ReadAcc+0x17e>
		}
		else
		{
			accADC[i] = ((accADC_P2[i] - Config.AccZero_P2[i]) * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][i]));
    3142:	86 2f       	mov	r24, r22
    3144:	99 27       	eor	r25, r25
    3146:	87 fd       	sbrc	r24, 7
    3148:	90 95       	com	r25
    314a:	fc 01       	movw	r30, r24
    314c:	ee 0f       	add	r30, r30
    314e:	ff 1f       	adc	r31, r31
    3150:	e8 0f       	add	r30, r24
    3152:	f9 1f       	adc	r31, r25
    3154:	ec 0f       	add	r30, r28
    3156:	fd 1f       	adc	r31, r29
    3158:	e4 5c       	subi	r30, 0xC4	; 196
    315a:	fe 4f       	sbci	r31, 0xFE	; 254
    315c:	44 91       	lpm	r20, Z
    315e:	f6 01       	movw	r30, r12
    3160:	20 81       	ld	r18, Z
    3162:	31 81       	ldd	r19, Z+1	; 0x01
    3164:	f8 01       	movw	r30, r16
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	28 1b       	sub	r18, r24
    316c:	39 0b       	sbc	r19, r25
    316e:	42 03       	mulsu	r20, r18
    3170:	c0 01       	movw	r24, r0
    3172:	43 9f       	mul	r20, r19
    3174:	90 0d       	add	r25, r0
    3176:	11 24       	eor	r1, r1
    3178:	f7 01       	movw	r30, r14
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	80 83       	st	Z, r24
    317e:	21 96       	adiw	r28, 0x01	; 1
    3180:	f2 e0       	ldi	r31, 0x02	; 2
    3182:	6f 0e       	add	r6, r31
    3184:	71 1c       	adc	r7, r1
    3186:	82 e0       	ldi	r24, 0x02	; 2
    3188:	c8 0e       	add	r12, r24
    318a:	d1 1c       	adc	r13, r1
    318c:	0e 5f       	subi	r16, 0xFE	; 254
    318e:	1f 4f       	sbci	r17, 0xFF	; 255
    3190:	e2 e0       	ldi	r30, 0x02	; 2
    3192:	ee 0e       	add	r14, r30
    3194:	f1 1c       	adc	r15, r1
	{
		Config.AccZero_P2[YAW] = Config.AccZeroNormZ_P2 - Config.AccZeroDiff_P2;
	}

	// Roll and Pitch are handled normally
	for (i = 0; i < (NUMBEROFAXIS - 1); i++)
    3196:	c2 30       	cpi	r28, 0x02	; 2
    3198:	d1 05       	cpc	r29, r1
    319a:	09 f0       	breq	.+2      	; 0x319e <ReadAcc+0x1a4>
    319c:	7f cf       	rjmp	.-258    	; 0x309c <ReadAcc+0xa2>
		}
	}
	
	// Z -axis requires special handling as the zeros are already polarity corrected
	// Only need to do this if the orientations differ
	if (Config.P1_Reference != NO_ORIENT)
    319e:	80 91 a4 06 	lds	r24, 0x06A4
    31a2:	60 91 a3 06 	lds	r22, 0x06A3
    31a6:	40 91 7d 05 	lds	r20, 0x057D
    31aa:	50 91 7e 05 	lds	r21, 0x057E
    31ae:	20 91 1f 08 	lds	r18, 0x081F
    31b2:	30 91 20 08 	lds	r19, 0x0820
    31b6:	88 23       	and	r24, r24
    31b8:	09 f4       	brne	.+2      	; 0x31bc <ReadAcc+0x1c2>
    31ba:	43 c0       	rjmp	.+134    	; 0x3242 <ReadAcc+0x248>
	{
		// Change polarity - use the zeros from the appropriate calibrate
		temp1 = ((accADC_P1[YAW] * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]) - Config.AccZero_P1[YAW]));
    31bc:	a0 91 2d 08 	lds	r26, 0x082D
    31c0:	bb 27       	eor	r27, r27
    31c2:	a7 fd       	sbrc	r26, 7
    31c4:	b0 95       	com	r27
    31c6:	fd 01       	movw	r30, r26
    31c8:	ee 0f       	add	r30, r30
    31ca:	ff 1f       	adc	r31, r31
    31cc:	ea 0f       	add	r30, r26
    31ce:	fb 1f       	adc	r31, r27
    31d0:	e2 5c       	subi	r30, 0xC2	; 194
    31d2:	fe 4f       	sbci	r31, 0xFE	; 254
    31d4:	74 91       	lpm	r23, Z
    31d6:	00 91 71 05 	lds	r16, 0x0571
    31da:	10 91 72 05 	lds	r17, 0x0572
    31de:	70 03       	mulsu	r23, r16
    31e0:	c0 01       	movw	r24, r0
    31e2:	71 9f       	mul	r23, r17
    31e4:	90 0d       	add	r25, r0
    31e6:	11 24       	eor	r1, r1
    31e8:	e0 91 ea 07 	lds	r30, 0x07EA
    31ec:	f0 91 eb 07 	lds	r31, 0x07EB
    31f0:	8e 1b       	sub	r24, r30
    31f2:	9f 0b       	sbc	r25, r31
		temp2 = ((accADC_P2[YAW] * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]) - Config.AccZero_P2[YAW]));
    31f4:	77 27       	eor	r23, r23
    31f6:	67 fd       	sbrc	r22, 7
    31f8:	70 95       	com	r23
    31fa:	fb 01       	movw	r30, r22
    31fc:	ee 0f       	add	r30, r30
    31fe:	ff 1f       	adc	r31, r31
    3200:	e6 0f       	add	r30, r22
    3202:	f7 1f       	adc	r31, r23
    3204:	e2 5c       	subi	r30, 0xC2	; 194
    3206:	fe 4f       	sbci	r31, 0xFE	; 254
    3208:	64 91       	lpm	r22, Z
    320a:	64 03       	mulsu	r22, r20
    320c:	e0 01       	movw	r28, r0
    320e:	65 9f       	mul	r22, r21
    3210:	d0 0d       	add	r29, r0
    3212:	11 24       	eor	r1, r1
    3214:	c2 1b       	sub	r28, r18
    3216:	d3 0b       	sbc	r29, r19
			
		// Get P1 value
		temp1 = scale32(temp1, (100 - transition));
    3218:	64 e6       	ldi	r22, 0x64	; 100
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	20 91 37 05 	lds	r18, 0x0537
    3220:	30 91 38 05 	lds	r19, 0x0538
    3224:	62 1b       	sub	r22, r18
    3226:	73 0b       	sbc	r23, r19
    3228:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    322c:	8c 01       	movw	r16, r24

		// Get P2 value
		temp2 = scale32(temp2, transition);
    322e:	60 91 37 05 	lds	r22, 0x0537
    3232:	70 91 38 05 	lds	r23, 0x0538
    3236:	ce 01       	movw	r24, r28
    3238:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>

		// Sum the two values
		accADC[YAW] = temp1 + temp2;
    323c:	80 0f       	add	r24, r16
    323e:	91 1f       	adc	r25, r17
    3240:	13 c0       	rjmp	.+38     	; 0x3268 <ReadAcc+0x26e>
	}
	else
	{
		accADC[YAW] = ((accADC_P2[YAW] * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]) - Config.AccZero_P2[YAW]));
    3242:	86 2f       	mov	r24, r22
    3244:	99 27       	eor	r25, r25
    3246:	87 fd       	sbrc	r24, 7
    3248:	90 95       	com	r25
    324a:	fc 01       	movw	r30, r24
    324c:	ee 0f       	add	r30, r30
    324e:	ff 1f       	adc	r31, r31
    3250:	e8 0f       	add	r30, r24
    3252:	f9 1f       	adc	r31, r25
    3254:	e2 5c       	subi	r30, 0xC2	; 194
    3256:	fe 4f       	sbci	r31, 0xFE	; 254
    3258:	64 91       	lpm	r22, Z
    325a:	64 03       	mulsu	r22, r20
    325c:	c0 01       	movw	r24, r0
    325e:	65 9f       	mul	r22, r21
    3260:	90 0d       	add	r25, r0
    3262:	11 24       	eor	r1, r1
    3264:	82 1b       	sub	r24, r18
    3266:	93 0b       	sbc	r25, r19
    3268:	90 93 78 05 	sts	0x0578, r25
    326c:	80 93 77 05 	sts	0x0577, r24
	
	// Note also that accSmooth[] has already got the correct acc orientations, 
	// so only needs the zeroing value merged from one to the other.

	// Only need to do this if the orientations differ
	if (Config.P1_Reference != NO_ORIENT)
    3270:	80 91 a4 06 	lds	r24, 0x06A4
    3274:	00 91 21 08 	lds	r16, 0x0821
    3278:	10 91 22 08 	lds	r17, 0x0822
    327c:	c0 91 1f 08 	lds	r28, 0x081F
    3280:	d0 91 20 08 	lds	r29, 0x0820
    3284:	88 23       	and	r24, r24
    3286:	09 f4       	brne	.+2      	; 0x328a <ReadAcc+0x290>
    3288:	4f c0       	rjmp	.+158    	; 0x3328 <ReadAcc+0x32e>
	{
		// Calculate the correct Z-axis data based on the orientation
		temp1 = accSmooth[YAW] + (Config.AccZeroNormZ_P1 - Config.AccZero_P1[YAW]); 
    328a:	c0 90 08 06 	lds	r12, 0x0608
    328e:	d0 90 09 06 	lds	r13, 0x0609
    3292:	e0 90 0a 06 	lds	r14, 0x060A
    3296:	f0 90 0b 06 	lds	r15, 0x060B
    329a:	60 91 ec 07 	lds	r22, 0x07EC
    329e:	70 91 ed 07 	lds	r23, 0x07ED
    32a2:	80 91 ea 07 	lds	r24, 0x07EA
    32a6:	90 91 eb 07 	lds	r25, 0x07EB
    32aa:	68 1b       	sub	r22, r24
    32ac:	79 0b       	sbc	r23, r25
    32ae:	88 27       	eor	r24, r24
    32b0:	77 fd       	sbrc	r23, 7
    32b2:	80 95       	com	r24
    32b4:	98 2f       	mov	r25, r24
    32b6:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    32ba:	9b 01       	movw	r18, r22
    32bc:	ac 01       	movw	r20, r24
    32be:	c7 01       	movw	r24, r14
    32c0:	b6 01       	movw	r22, r12
    32c2:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    32c6:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    32ca:	4b 01       	movw	r8, r22
    32cc:	5c 01       	movw	r10, r24
		temp2 = accSmooth[YAW] + (Config.AccZeroNormZ_P2 - Config.AccZero_P2[YAW]); 
    32ce:	b8 01       	movw	r22, r16
    32d0:	6c 1b       	sub	r22, r28
    32d2:	7d 0b       	sbc	r23, r29
    32d4:	88 27       	eor	r24, r24
    32d6:	77 fd       	sbrc	r23, 7
    32d8:	80 95       	com	r24
    32da:	98 2f       	mov	r25, r24
    32dc:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    32e0:	9b 01       	movw	r18, r22
    32e2:	ac 01       	movw	r20, r24
    32e4:	c7 01       	movw	r24, r14
    32e6:	b6 01       	movw	r22, r12
    32e8:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    32ec:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    32f0:	6b 01       	movw	r12, r22
    32f2:	7c 01       	movw	r14, r24
	
		// Merge with transition
		temp1 = scale32(temp1, (100 - transition));
    32f4:	64 e6       	ldi	r22, 0x64	; 100
    32f6:	70 e0       	ldi	r23, 0x00	; 0
    32f8:	80 91 37 05 	lds	r24, 0x0537
    32fc:	90 91 38 05 	lds	r25, 0x0538
    3300:	68 1b       	sub	r22, r24
    3302:	79 0b       	sbc	r23, r25
    3304:	c4 01       	movw	r24, r8
    3306:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    330a:	ec 01       	movw	r28, r24
		temp2 = scale32(temp2, transition);
    330c:	60 91 37 05 	lds	r22, 0x0537
    3310:	70 91 38 05 	lds	r23, 0x0538
    3314:	c6 01       	movw	r24, r12
    3316:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
	 
		accVert = temp1 + temp2;
    331a:	8c 0f       	add	r24, r28
    331c:	9d 1f       	adc	r25, r29
    331e:	90 93 27 05 	sts	0x0527, r25
    3322:	80 93 26 05 	sts	0x0526, r24
    3326:	19 c0       	rjmp	.+50     	; 0x335a <ReadAcc+0x360>
	}
	// Just use the P2 value
	else
	{
		// Calculate the correct Z-axis data based on the orientation
		accVert = accSmooth[YAW] + (Config.AccZeroNormZ_P2 - Config.AccZero_P2[YAW]);		
    3328:	b8 01       	movw	r22, r16
    332a:	6c 1b       	sub	r22, r28
    332c:	7d 0b       	sbc	r23, r29
    332e:	88 27       	eor	r24, r24
    3330:	77 fd       	sbrc	r23, 7
    3332:	80 95       	com	r24
    3334:	98 2f       	mov	r25, r24
    3336:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    333a:	20 91 08 06 	lds	r18, 0x0608
    333e:	30 91 09 06 	lds	r19, 0x0609
    3342:	40 91 0a 06 	lds	r20, 0x060A
    3346:	50 91 0b 06 	lds	r21, 0x060B
    334a:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    334e:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    3352:	70 93 27 05 	sts	0x0527, r23
    3356:	60 93 26 05 	sts	0x0526, r22
	}
}
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	1f 91       	pop	r17
    3360:	0f 91       	pop	r16
    3362:	ff 90       	pop	r15
    3364:	ef 90       	pop	r14
    3366:	df 90       	pop	r13
    3368:	cf 90       	pop	r12
    336a:	bf 90       	pop	r11
    336c:	af 90       	pop	r10
    336e:	9f 90       	pop	r9
    3370:	8f 90       	pop	r8
    3372:	7f 90       	pop	r7
    3374:	6f 90       	pop	r6
    3376:	5f 90       	pop	r5
    3378:	4f 90       	pop	r4
    337a:	08 95       	ret

0000337c <CalibrateAcc>:
// For V1.2 onwards we have to be able to calibrate both
// orientations when there are more than one.
//***************************************************************

void CalibrateAcc(int8_t type)
{
    337c:	1f 93       	push	r17
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	00 d0       	rcall	.+0      	; 0x3384 <CalibrateAcc+0x8>
    3384:	00 d0       	rcall	.+0      	; 0x3386 <CalibrateAcc+0xa>
    3386:	00 d0       	rcall	.+0      	; 0x3388 <CalibrateAcc+0xc>
    3388:	cd b7       	in	r28, 0x3d	; 61
    338a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    338c:	1a 82       	std	Y+2, r1	; 0x02
    338e:	19 82       	std	Y+1, r1	; 0x01
    3390:	1c 82       	std	Y+4, r1	; 0x04
    3392:	1b 82       	std	Y+3, r1	; 0x03
    3394:	1e 82       	std	Y+6, r1	; 0x06
    3396:	1d 82       	std	Y+5, r1	; 0x05
    3398:	20 91 37 05 	lds	r18, 0x0537
    339c:	30 91 38 05 	lds	r19, 0x0538

	// Calibrate acc
	// P2
	if (type == NORMAL)
    33a0:	81 11       	cpse	r24, r1
    33a2:	e0 c0       	rjmp	.+448    	; 0x3564 <CalibrateAcc+0x1e8>
	{
		// Work out which orientation we are calibrating.
		// Only need to do this if the orientations differ.
		// Just do P2 if orientations the same.
		// Will not save new calibration when different and not firmly in P1 or p2.
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    33a4:	20 36       	cpi	r18, 0x60	; 96
    33a6:	31 05       	cpc	r19, r1
    33a8:	24 f4       	brge	.+8      	; 0x33b2 <CalibrateAcc+0x36>
    33aa:	80 91 a4 06 	lds	r24, 0x06A4
    33ae:	81 11       	cpse	r24, r1
    33b0:	63 c0       	rjmp	.+198    	; 0x3478 <CalibrateAcc+0xfc>
// For V1.2 onwards we have to be able to calibrate both
// orientations when there are more than one.
//***************************************************************

void CalibrateAcc(int8_t type)
{
    33b2:	10 e2       	ldi	r17, 0x20	; 32
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
			{
				get_raw_accs();						// Updates accADC_P1[] and accADC_P2[] (RPY)
    33b4:	0e 94 76 17 	call	0x2eec	; 0x2eec <get_raw_accs>
				accZero[ROLL] += accADC_P2[ROLL];
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	9a 81       	ldd	r25, Y+2	; 0x02
    33bc:	20 91 79 05 	lds	r18, 0x0579
    33c0:	30 91 7a 05 	lds	r19, 0x057A
    33c4:	82 0f       	add	r24, r18
    33c6:	93 1f       	adc	r25, r19
    33c8:	9a 83       	std	Y+2, r25	; 0x02
    33ca:	89 83       	std	Y+1, r24	; 0x01
				accZero[PITCH] += accADC_P2[PITCH];
    33cc:	8b 81       	ldd	r24, Y+3	; 0x03
    33ce:	9c 81       	ldd	r25, Y+4	; 0x04
    33d0:	20 91 7b 05 	lds	r18, 0x057B
    33d4:	30 91 7c 05 	lds	r19, 0x057C
    33d8:	82 0f       	add	r24, r18
    33da:	93 1f       	adc	r25, r19
    33dc:	9c 83       	std	Y+4, r25	; 0x04
    33de:	8b 83       	std	Y+3, r24	; 0x03
				accZero[YAW] += accADC_P2[YAW];
    33e0:	8d 81       	ldd	r24, Y+5	; 0x05
    33e2:	9e 81       	ldd	r25, Y+6	; 0x06
    33e4:	20 91 7d 05 	lds	r18, 0x057D
    33e8:	30 91 7e 05 	lds	r19, 0x057E
    33ec:	82 0f       	add	r24, r18
    33ee:	93 1f       	adc	r25, r19
    33f0:	9e 83       	std	Y+6, r25	; 0x06
    33f2:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33f4:	8f e4       	ldi	r24, 0x4F	; 79
    33f6:	93 ec       	ldi	r25, 0xC3	; 195
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	f1 f7       	brne	.-4      	; 0x33f8 <CalibrateAcc+0x7c>
    33fc:	00 c0       	rjmp	.+0      	; 0x33fe <CalibrateAcc+0x82>
    33fe:	00 00       	nop
    3400:	11 50       	subi	r17, 0x01	; 1
		// Just do P2 if orientations the same.
		// Will not save new calibration when different and not firmly in P1 or p2.
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
    3402:	c1 f6       	brne	.-80     	; 0x33b4 <CalibrateAcc+0x38>
    3404:	fe 01       	movw	r30, r28
    3406:	31 96       	adiw	r30, 0x01	; 1
    3408:	9e 01       	movw	r18, r28
    340a:	29 5f       	subi	r18, 0xF9	; 249
    340c:	3f 4f       	sbci	r19, 0xFF	; 255
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
			{
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
    340e:	80 81       	ld	r24, Z
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	40 96       	adiw	r24, 0x10	; 16
    3414:	b5 e0       	ldi	r27, 0x05	; 5
    3416:	95 95       	asr	r25
    3418:	87 95       	ror	r24
    341a:	ba 95       	dec	r27
    341c:	e1 f7       	brne	.-8      	; 0x3416 <CalibrateAcc+0x9a>
    341e:	81 93       	st	Z+, r24
    3420:	91 93       	st	Z+, r25
				accZero[YAW] += accADC_P2[YAW];
				_delay_ms(10);						// Get a better acc average over time
			}
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    3422:	e2 17       	cp	r30, r18
    3424:	f3 07       	cpc	r31, r19
    3426:	99 f7       	brne	.-26     	; 0x340e <CalibrateAcc+0x92>
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
			}

			// Reset zeros to normal cal
			Config.AccZero_P2[ROLL] = accZero[ROLL];
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	9a 81       	ldd	r25, Y+2	; 0x02
    342c:	90 93 1c 08 	sts	0x081C, r25
    3430:	80 93 1b 08 	sts	0x081B, r24
			Config.AccZero_P2[PITCH] = accZero[PITCH];
    3434:	8b 81       	ldd	r24, Y+3	; 0x03
    3436:	9c 81       	ldd	r25, Y+4	; 0x04
    3438:	90 93 1e 08 	sts	0x081E, r25
    343c:	80 93 1d 08 	sts	0x081D, r24
			Config.AccZeroNormZ_P2 = accZero[YAW];
			
			// Correct polarity of AccZeroNormZ as per orientation
			Config.AccZeroNormZ_P2 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]);
    3440:	80 91 a3 06 	lds	r24, 0x06A3
    3444:	99 27       	eor	r25, r25
    3446:	87 fd       	sbrc	r24, 7
    3448:	90 95       	com	r25
    344a:	fc 01       	movw	r30, r24
    344c:	ee 0f       	add	r30, r30
    344e:	ff 1f       	adc	r31, r31
    3450:	e8 0f       	add	r30, r24
    3452:	f9 1f       	adc	r31, r25
    3454:	e2 5c       	subi	r30, 0xC2	; 194
    3456:	fe 4f       	sbci	r31, 0xFE	; 254
    3458:	44 91       	lpm	r20, Z
    345a:	2d 81       	ldd	r18, Y+5	; 0x05
    345c:	3e 81       	ldd	r19, Y+6	; 0x06
    345e:	42 03       	mulsu	r20, r18
    3460:	c0 01       	movw	r24, r0
    3462:	43 9f       	mul	r20, r19
    3464:	90 0d       	add	r25, r0
    3466:	11 24       	eor	r1, r1
    3468:	90 93 22 08 	sts	0x0822, r25
    346c:	80 93 21 08 	sts	0x0821, r24
			
			// Flag that normal cal done
			Config.Main_flags |= (1 << normal_cal_done_P2);
    3470:	80 91 03 08 	lds	r24, 0x0803
    3474:	88 60       	ori	r24, 0x08	; 8
    3476:	66 c0       	rjmp	.+204    	; 0x3544 <CalibrateAcc+0x1c8>
			LED1 = 1;
			_delay_ms(500);
			LED1 = 0;
		}
		// P1
		else if (transition <= 5)
    3478:	26 30       	cpi	r18, 0x06	; 6
    347a:	31 05       	cpc	r19, r1
    347c:	0c f0       	brlt	.+2      	; 0x3480 <CalibrateAcc+0x104>
    347e:	49 c1       	rjmp	.+658    	; 0x3712 <CalibrateAcc+0x396>
    3480:	10 e2       	ldi	r17, 0x20	; 32
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
			{
				get_raw_accs();						// Updates accADC_P1[] and accADC_P2[] (RPY)
    3482:	0e 94 76 17 	call	0x2eec	; 0x2eec <get_raw_accs>
				accZero[ROLL] += accADC_P1[ROLL];
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	9a 81       	ldd	r25, Y+2	; 0x02
    348a:	20 91 6d 05 	lds	r18, 0x056D
    348e:	30 91 6e 05 	lds	r19, 0x056E
    3492:	82 0f       	add	r24, r18
    3494:	93 1f       	adc	r25, r19
    3496:	9a 83       	std	Y+2, r25	; 0x02
    3498:	89 83       	std	Y+1, r24	; 0x01
				accZero[PITCH] += accADC_P1[PITCH];
    349a:	8b 81       	ldd	r24, Y+3	; 0x03
    349c:	9c 81       	ldd	r25, Y+4	; 0x04
    349e:	20 91 6f 05 	lds	r18, 0x056F
    34a2:	30 91 70 05 	lds	r19, 0x0570
    34a6:	82 0f       	add	r24, r18
    34a8:	93 1f       	adc	r25, r19
    34aa:	9c 83       	std	Y+4, r25	; 0x04
    34ac:	8b 83       	std	Y+3, r24	; 0x03
				accZero[YAW] += accADC_P1[YAW];
    34ae:	8d 81       	ldd	r24, Y+5	; 0x05
    34b0:	9e 81       	ldd	r25, Y+6	; 0x06
    34b2:	20 91 71 05 	lds	r18, 0x0571
    34b6:	30 91 72 05 	lds	r19, 0x0572
    34ba:	82 0f       	add	r24, r18
    34bc:	93 1f       	adc	r25, r19
    34be:	9e 83       	std	Y+6, r25	; 0x06
    34c0:	8d 83       	std	Y+5, r24	; 0x05
    34c2:	8f e4       	ldi	r24, 0x4F	; 79
    34c4:	93 ec       	ldi	r25, 0xC3	; 195
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <CalibrateAcc+0x14a>
    34ca:	00 c0       	rjmp	.+0      	; 0x34cc <CalibrateAcc+0x150>
    34cc:	00 00       	nop
    34ce:	11 50       	subi	r17, 0x01	; 1
		}
		// P1
		else if (transition <= 5)
		{
			// Get average zero value (over 32 readings)
			for (i = 0; i < 32; i++)
    34d0:	c1 f6       	brne	.-80     	; 0x3482 <CalibrateAcc+0x106>
    34d2:	fe 01       	movw	r30, r28
    34d4:	31 96       	adiw	r30, 0x01	; 1
    34d6:	9e 01       	movw	r18, r28
    34d8:	29 5f       	subi	r18, 0xF9	; 249
    34da:	3f 4f       	sbci	r19, 0xFF	; 255
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
			{
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
    34dc:	80 81       	ld	r24, Z
    34de:	91 81       	ldd	r25, Z+1	; 0x01
    34e0:	40 96       	adiw	r24, 0x10	; 16
    34e2:	75 e0       	ldi	r23, 0x05	; 5
    34e4:	95 95       	asr	r25
    34e6:	87 95       	ror	r24
    34e8:	7a 95       	dec	r23
    34ea:	e1 f7       	brne	.-8      	; 0x34e4 <CalibrateAcc+0x168>
    34ec:	81 93       	st	Z+, r24
    34ee:	91 93       	st	Z+, r25
				accZero[YAW] += accADC_P1[YAW];
				_delay_ms(10);						// Get a better acc average over time
			}
			
			// Average
			for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    34f0:	e2 17       	cp	r30, r18
    34f2:	f3 07       	cpc	r31, r19
    34f4:	99 f7       	brne	.-26     	; 0x34dc <CalibrateAcc+0x160>
				// Round and divide by 32
				accZero[i] = ((accZero[i] + 16) >> 5);
			}

			// Reset zeros to normal cal
			Config.AccZero_P1[ROLL] = accZero[ROLL];
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	9a 81       	ldd	r25, Y+2	; 0x02
    34fa:	90 93 e7 07 	sts	0x07E7, r25
    34fe:	80 93 e6 07 	sts	0x07E6, r24
			Config.AccZero_P1[PITCH] = accZero[PITCH];
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	9c 81       	ldd	r25, Y+4	; 0x04
    3506:	90 93 e9 07 	sts	0x07E9, r25
    350a:	80 93 e8 07 	sts	0x07E8, r24
			Config.AccZeroNormZ_P1 = accZero[YAW];
			
			// Correct polarity of AccZeroNormZ as per orientation
			Config.AccZeroNormZ_P1 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]);
    350e:	80 91 2d 08 	lds	r24, 0x082D
    3512:	99 27       	eor	r25, r25
    3514:	87 fd       	sbrc	r24, 7
    3516:	90 95       	com	r25
    3518:	fc 01       	movw	r30, r24
    351a:	ee 0f       	add	r30, r30
    351c:	ff 1f       	adc	r31, r31
    351e:	e8 0f       	add	r30, r24
    3520:	f9 1f       	adc	r31, r25
    3522:	e2 5c       	subi	r30, 0xC2	; 194
    3524:	fe 4f       	sbci	r31, 0xFE	; 254
    3526:	44 91       	lpm	r20, Z
    3528:	2d 81       	ldd	r18, Y+5	; 0x05
    352a:	3e 81       	ldd	r19, Y+6	; 0x06
    352c:	42 03       	mulsu	r20, r18
    352e:	c0 01       	movw	r24, r0
    3530:	43 9f       	mul	r20, r19
    3532:	90 0d       	add	r25, r0
    3534:	11 24       	eor	r1, r1
    3536:	90 93 ed 07 	sts	0x07ED, r25
    353a:	80 93 ec 07 	sts	0x07EC, r24
			
			// Flag that normal cal done
			Config.Main_flags |= (1 << normal_cal_done_P1);
    353e:	80 91 03 08 	lds	r24, 0x0803
    3542:	82 60       	ori	r24, 0x02	; 2
    3544:	80 93 03 08 	sts	0x0803, r24

			// Save new calibration and flash LED for confirmation
			Save_Config_to_EEPROM();
    3548:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
			LED1 = 1;
    354c:	2b 9a       	sbi	0x05, 3	; 5
    354e:	9f e7       	ldi	r25, 0x7F	; 127
    3550:	24 e8       	ldi	r18, 0x84	; 132
    3552:	4e e1       	ldi	r20, 0x1E	; 30
    3554:	91 50       	subi	r25, 0x01	; 1
    3556:	20 40       	sbci	r18, 0x00	; 0
    3558:	40 40       	sbci	r20, 0x00	; 0
    355a:	e1 f7       	brne	.-8      	; 0x3554 <CalibrateAcc+0x1d8>
    355c:	00 c0       	rjmp	.+0      	; 0x355e <CalibrateAcc+0x1e2>
    355e:	00 00       	nop
			_delay_ms(500);
			LED1 = 0;
    3560:	2b 98       	cbi	0x05, 3	; 5
    3562:	d7 c0       	rjmp	.+430    	; 0x3712 <CalibrateAcc+0x396>
    3564:	80 91 03 08 	lds	r24, 0x0803

	else
	// Calibrate inverted acc
	{
		// P2 or same
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    3568:	20 36       	cpi	r18, 0x60	; 96
    356a:	31 05       	cpc	r19, r1
    356c:	24 f4       	brge	.+8      	; 0x3576 <CalibrateAcc+0x1fa>
    356e:	90 91 a4 06 	lds	r25, 0x06A4
    3572:	91 11       	cpse	r25, r1
    3574:	5a c0       	rjmp	.+180    	; 0x362a <CalibrateAcc+0x2ae>
		{
			// Only update the inverted cal value if preceded by a normal calibration
			if (Config.Main_flags & (1 << normal_cal_done_P2))
    3576:	83 ff       	sbrs	r24, 3
    3578:	cc c0       	rjmp	.+408    	; 0x3712 <CalibrateAcc+0x396>
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P2 = 0;
    357a:	10 92 24 08 	sts	0x0824, r1
    357e:	10 92 23 08 	sts	0x0823, r1
    3582:	10 e2       	ldi	r17, 0x20	; 32

				for (i = 0; i < 32; i++)
				{
					get_raw_accs();					// Updates accADC_P1[] and accADC_P2[] (RPY)
    3584:	0e 94 76 17 	call	0x2eec	; 0x2eec <get_raw_accs>
					Config.AccZeroInvZ_P2 += accADC_P2[YAW];
    3588:	80 91 23 08 	lds	r24, 0x0823
    358c:	90 91 24 08 	lds	r25, 0x0824
    3590:	20 91 7d 05 	lds	r18, 0x057D
    3594:	30 91 7e 05 	lds	r19, 0x057E
    3598:	82 0f       	add	r24, r18
    359a:	93 1f       	adc	r25, r19
    359c:	90 93 24 08 	sts	0x0824, r25
    35a0:	80 93 23 08 	sts	0x0823, r24
    35a4:	8f e4       	ldi	r24, 0x4F	; 79
    35a6:	93 ec       	ldi	r25, 0xC3	; 195
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <CalibrateAcc+0x22c>
    35ac:	00 c0       	rjmp	.+0      	; 0x35ae <CalibrateAcc+0x232>
    35ae:	00 00       	nop
    35b0:	11 50       	subi	r17, 0x01	; 1
			if (Config.Main_flags & (1 << normal_cal_done_P2))
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P2 = 0;

				for (i = 0; i < 32; i++)
    35b2:	41 f7       	brne	.-48     	; 0x3584 <CalibrateAcc+0x208>

				// Round and divide by 32
				Config.AccZeroInvZ_P2 = ((Config.AccZeroInvZ_P2 + 16) >> 5);		// Inverted zero point
				
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P2 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]);
    35b4:	80 91 a3 06 	lds	r24, 0x06A3
    35b8:	99 27       	eor	r25, r25
    35ba:	87 fd       	sbrc	r24, 7
    35bc:	90 95       	com	r25
    35be:	fc 01       	movw	r30, r24
    35c0:	ee 0f       	add	r30, r30
    35c2:	ff 1f       	adc	r31, r31
    35c4:	e8 0f       	add	r30, r24
    35c6:	f9 1f       	adc	r31, r25
    35c8:	e2 5c       	subi	r30, 0xC2	; 194
    35ca:	fe 4f       	sbci	r31, 0xFE	; 254
    35cc:	44 91       	lpm	r20, Z
					Config.AccZeroInvZ_P2 += accADC_P2[YAW];
					_delay_ms(10);					// Get a better acc average over time
				}

				// Round and divide by 32
				Config.AccZeroInvZ_P2 = ((Config.AccZeroInvZ_P2 + 16) >> 5);		// Inverted zero point
    35ce:	20 91 23 08 	lds	r18, 0x0823
    35d2:	30 91 24 08 	lds	r19, 0x0824
    35d6:	20 5f       	subi	r18, 0xF0	; 240
    35d8:	3f 4f       	sbci	r19, 0xFF	; 255
    35da:	55 e0       	ldi	r21, 0x05	; 5
    35dc:	35 95       	asr	r19
    35de:	27 95       	ror	r18
    35e0:	5a 95       	dec	r21
    35e2:	e1 f7       	brne	.-8      	; 0x35dc <CalibrateAcc+0x260>
				
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P2 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P2][YAW]);
    35e4:	42 03       	mulsu	r20, r18
    35e6:	c0 01       	movw	r24, r0
    35e8:	43 9f       	mul	r20, r19
    35ea:	90 0d       	add	r25, r0
    35ec:	11 24       	eor	r1, r1
    35ee:	90 93 24 08 	sts	0x0824, r25
    35f2:	80 93 23 08 	sts	0x0823, r24

				// Test if board is actually inverted relative to board orientation.
				if (Config.AccZeroInvZ_P2 < 0)
    35f6:	97 ff       	sbrs	r25, 7
    35f8:	8c c0       	rjmp	.+280    	; 0x3712 <CalibrateAcc+0x396>
				{
					// Reset zero to halfway between min and max Z
					Config.AccZeroDiff_P2 = ((Config.AccZeroNormZ_P2 - Config.AccZeroInvZ_P2) >> 1);
    35fa:	20 91 21 08 	lds	r18, 0x0821
    35fe:	30 91 22 08 	lds	r19, 0x0822
    3602:	a9 01       	movw	r20, r18
    3604:	48 1b       	sub	r20, r24
    3606:	59 0b       	sbc	r21, r25
    3608:	ca 01       	movw	r24, r20
    360a:	95 95       	asr	r25
    360c:	87 95       	ror	r24
    360e:	90 93 26 08 	sts	0x0826, r25
    3612:	80 93 25 08 	sts	0x0825, r24
					
					 // Config.AccZero_P2[YAW] is now half-way in between
					Config.AccZero_P2[YAW] = Config.AccZeroNormZ_P2 - Config.AccZeroDiff_P2;
    3616:	28 1b       	sub	r18, r24
    3618:	39 0b       	sbc	r19, r25
    361a:	30 93 20 08 	sts	0x0820, r19
    361e:	20 93 1f 08 	sts	0x081F, r18

					// Flag that inverted cal done
					Config.Main_flags |= (1 << inv_cal_done_P2);
    3622:	80 91 03 08 	lds	r24, 0x0803
    3626:	84 60       	ori	r24, 0x04	; 4
    3628:	59 c0       	rjmp	.+178    	; 0x36dc <CalibrateAcc+0x360>
		
		// P1
		else 
		{
			// Only update the inverted cal value if preceded by a normal calibration
			if (Config.Main_flags & (1 << normal_cal_done_P1))
    362a:	81 ff       	sbrs	r24, 1
    362c:	72 c0       	rjmp	.+228    	; 0x3712 <CalibrateAcc+0x396>
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P1 = 0;
    362e:	10 92 ef 07 	sts	0x07EF, r1
    3632:	10 92 ee 07 	sts	0x07EE, r1
    3636:	10 e2       	ldi	r17, 0x20	; 32

				for (i = 0; i < 32; i++)
				{
					get_raw_accs();					// Updates accADC_P1[] and accADC_P2[] (RPY)
    3638:	0e 94 76 17 	call	0x2eec	; 0x2eec <get_raw_accs>
					Config.AccZeroInvZ_P1 += accADC_P1[YAW];
    363c:	80 91 ee 07 	lds	r24, 0x07EE
    3640:	90 91 ef 07 	lds	r25, 0x07EF
    3644:	20 91 71 05 	lds	r18, 0x0571
    3648:	30 91 72 05 	lds	r19, 0x0572
    364c:	82 0f       	add	r24, r18
    364e:	93 1f       	adc	r25, r19
    3650:	90 93 ef 07 	sts	0x07EF, r25
    3654:	80 93 ee 07 	sts	0x07EE, r24
    3658:	8f e4       	ldi	r24, 0x4F	; 79
    365a:	93 ec       	ldi	r25, 0xC3	; 195
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <CalibrateAcc+0x2e0>
    3660:	00 c0       	rjmp	.+0      	; 0x3662 <CalibrateAcc+0x2e6>
    3662:	00 00       	nop
    3664:	11 50       	subi	r17, 0x01	; 1
			if (Config.Main_flags & (1 << normal_cal_done_P1))
			{
				// Get average zero value (over 32 readings)
				Config.AccZeroInvZ_P1 = 0;

				for (i = 0; i < 32; i++)
    3666:	41 f7       	brne	.-48     	; 0x3638 <CalibrateAcc+0x2bc>

				// Round and divide by 32
				Config.AccZeroInvZ_P1 = ((Config.AccZeroInvZ_P1 + 16) >> 5);		// Inverted zero point
			
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P1 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]);
    3668:	80 91 2d 08 	lds	r24, 0x082D
    366c:	99 27       	eor	r25, r25
    366e:	87 fd       	sbrc	r24, 7
    3670:	90 95       	com	r25
    3672:	fc 01       	movw	r30, r24
    3674:	ee 0f       	add	r30, r30
    3676:	ff 1f       	adc	r31, r31
    3678:	e8 0f       	add	r30, r24
    367a:	f9 1f       	adc	r31, r25
    367c:	e2 5c       	subi	r30, 0xC2	; 194
    367e:	fe 4f       	sbci	r31, 0xFE	; 254
    3680:	44 91       	lpm	r20, Z
					Config.AccZeroInvZ_P1 += accADC_P1[YAW];
					_delay_ms(10);					// Get a better acc average over time
				}

				// Round and divide by 32
				Config.AccZeroInvZ_P1 = ((Config.AccZeroInvZ_P1 + 16) >> 5);		// Inverted zero point
    3682:	20 91 ee 07 	lds	r18, 0x07EE
    3686:	30 91 ef 07 	lds	r19, 0x07EF
    368a:	20 5f       	subi	r18, 0xF0	; 240
    368c:	3f 4f       	sbci	r19, 0xFF	; 255
    368e:	b5 e0       	ldi	r27, 0x05	; 5
    3690:	35 95       	asr	r19
    3692:	27 95       	ror	r18
    3694:	ba 95       	dec	r27
    3696:	e1 f7       	brne	.-8      	; 0x3690 <CalibrateAcc+0x314>
			
				// Correct polarity of AccZeroInvZ as per orientation
				Config.AccZeroInvZ_P1 *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation_P1][YAW]);
    3698:	42 03       	mulsu	r20, r18
    369a:	c0 01       	movw	r24, r0
    369c:	43 9f       	mul	r20, r19
    369e:	90 0d       	add	r25, r0
    36a0:	11 24       	eor	r1, r1
    36a2:	90 93 ef 07 	sts	0x07EF, r25
    36a6:	80 93 ee 07 	sts	0x07EE, r24

				// Test if board is actually inverted relative to board orientation.
				if (Config.AccZeroInvZ_P1 < 0)
    36aa:	97 ff       	sbrs	r25, 7
    36ac:	32 c0       	rjmp	.+100    	; 0x3712 <CalibrateAcc+0x396>
				{
					// Reset zero to halfway between min and max Z
					Config.AccZeroDiff_P1 = ((Config.AccZeroNormZ_P1 - Config.AccZeroInvZ_P1) >> 1);
    36ae:	20 91 ec 07 	lds	r18, 0x07EC
    36b2:	30 91 ed 07 	lds	r19, 0x07ED
    36b6:	a9 01       	movw	r20, r18
    36b8:	48 1b       	sub	r20, r24
    36ba:	59 0b       	sbc	r21, r25
    36bc:	ca 01       	movw	r24, r20
    36be:	95 95       	asr	r25
    36c0:	87 95       	ror	r24
    36c2:	90 93 f1 07 	sts	0x07F1, r25
    36c6:	80 93 f0 07 	sts	0x07F0, r24
					
					// Config.AccZero_P1[YAW] is now half-way in between
					Config.AccZero_P1[YAW] = Config.AccZeroNormZ_P1 - Config.AccZeroDiff_P1;
    36ca:	28 1b       	sub	r18, r24
    36cc:	39 0b       	sbc	r19, r25
    36ce:	30 93 eb 07 	sts	0x07EB, r19
    36d2:	20 93 ea 07 	sts	0x07EA, r18

					// Flag that inverted cal done
					Config.Main_flags |= (1 << inv_cal_done_P1);
    36d6:	80 91 03 08 	lds	r24, 0x0803
    36da:	81 60       	ori	r24, 0x01	; 1
    36dc:	80 93 03 08 	sts	0x0803, r24

					// Save new calibration and flash LED for confirmation
					Save_Config_to_EEPROM();
    36e0:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
					LED1 = 1;
    36e4:	2b 9a       	sbi	0x05, 3	; 5
    36e6:	5f e7       	ldi	r21, 0x7F	; 127
    36e8:	84 e8       	ldi	r24, 0x84	; 132
    36ea:	9e e1       	ldi	r25, 0x1E	; 30
    36ec:	51 50       	subi	r21, 0x01	; 1
    36ee:	80 40       	sbci	r24, 0x00	; 0
    36f0:	90 40       	sbci	r25, 0x00	; 0
    36f2:	e1 f7       	brne	.-8      	; 0x36ec <CalibrateAcc+0x370>
    36f4:	00 c0       	rjmp	.+0      	; 0x36f6 <CalibrateAcc+0x37a>
    36f6:	00 00       	nop
					_delay_ms(500);
					LED1 = 0;
    36f8:	2b 98       	cbi	0x05, 3	; 5
				
					// Chirp as well. The LED might be hard to see.
					menu_beep(5);
    36fa:	85 e0       	ldi	r24, 0x05	; 5
				}
			}			
		}

	} // Calibrate inverted acc
}
    36fc:	26 96       	adiw	r28, 0x06	; 6
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	1f 91       	pop	r17
					LED1 = 1;
					_delay_ms(500);
					LED1 = 0;
				
					// Chirp as well. The LED might be hard to see.
					menu_beep(5);
    370e:	0c 94 87 4e 	jmp	0x9d0e	; 0x9d0e <menu_beep>
				}
			}			
		}

	} // Calibrate inverted acc
}
    3712:	26 96       	adiw	r28, 0x06	; 6
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	de bf       	out	0x3e, r29	; 62
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	cd bf       	out	0x3d, r28	; 61
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	1f 91       	pop	r17
    3724:	08 95       	ret

00003726 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    3726:	41 e0       	ldi	r20, 0x01	; 1
    3728:	6b e6       	ldi	r22, 0x6B	; 107
    372a:	80 ed       	ldi	r24, 0xD0	; 208
    372c:	0e 94 a1 3a 	call	0x7542	; 0x7542 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    3730:	48 e0       	ldi	r20, 0x08	; 8
    3732:	6c e1       	ldi	r22, 0x1C	; 28
    3734:	80 ed       	ldi	r24, 0xD0	; 208
    3736:	0c 94 a1 3a 	jmp	0x7542	; 0x7542 <writeI2Cbyte>

0000373a <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    373a:	8f ef       	ldi	r24, 0xFF	; 255
    373c:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    3740:	10 92 7b 00 	sts	0x007B, r1
    3744:	08 95       	ret

00003746 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    3746:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    374a:	86 ec       	ldi	r24, 0xC6	; 198
    374c:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    3750:	80 91 7a 00 	lds	r24, 0x007A
    3754:	86 fd       	sbrc	r24, 6
    3756:	fc cf       	rjmp	.-8      	; 0x3750 <read_adc+0xa>
}
    3758:	08 95       	ret

0000375a <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    375a:	cf 92       	push	r12
    375c:	df 92       	push	r13
    375e:	ef 92       	push	r14
    3760:	0f 93       	push	r16
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    3766:	cb e0       	ldi	r28, 0x0B	; 11
    3768:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    376a:	1f 9b       	sbis	0x03, 7	; 3
    376c:	83 c0       	rjmp	.+262    	; 0x3874 <Display_balance+0x11a>
	{
		RxGetChannels();						// Check state of transition switch
    376e:	0e 94 bc 66 	call	0xcd78	; 0xcd78 <RxGetChannels>
		UpdateTransition();						// Update the transition variable
    3772:	0e 94 a6 67 	call	0xcf4c	; 0xcf4c <UpdateTransition>

		// Read accs
		ReadAcc();
    3776:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    377a:	60 e0       	ldi	r22, 0x00	; 0
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	cb 01       	movw	r24, r22
    3780:	0e 94 17 3d 	call	0x7a2e	; 0x7a2e <imu_update>
    3784:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    3786:	20 97       	sbiw	r28, 0x00	; 0
    3788:	81 f7       	brne	.-32     	; 0x376a <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	40 e0       	ldi	r20, 0x00	; 0
    3790:	52 e4       	ldi	r21, 0x42	; 66
    3792:	60 91 04 06 	lds	r22, 0x0604
    3796:	70 91 05 06 	lds	r23, 0x0605
    379a:	80 91 06 06 	lds	r24, 0x0606
    379e:	90 91 07 06 	lds	r25, 0x0607
    37a2:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    37a6:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    37aa:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	40 e8       	ldi	r20, 0x80	; 128
    37b2:	52 e4       	ldi	r21, 0x42	; 66
    37b4:	60 91 00 06 	lds	r22, 0x0600
    37b8:	70 91 01 06 	lds	r23, 0x0601
    37bc:	80 91 02 06 	lds	r24, 0x0602
    37c0:	90 91 03 06 	lds	r25, 0x0603
    37c4:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    37c8:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    37cc:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    37ce:	d7 fd       	sbrc	r29, 7
    37d0:	06 c0       	rjmp	.+12     	; 0x37de <Display_balance+0x84>
			if (x_pos > 64) x_pos = 64;
    37d2:	c1 34       	cpi	r28, 0x41	; 65
    37d4:	d1 05       	cpc	r29, r1
    37d6:	2c f0       	brlt	.+10     	; 0x37e2 <Display_balance+0x88>
    37d8:	c0 e4       	ldi	r28, 0x40	; 64
    37da:	d0 e0       	ldi	r29, 0x00	; 0
    37dc:	02 c0       	rjmp	.+4      	; 0x37e2 <Display_balance+0x88>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    37de:	c0 e0       	ldi	r28, 0x00	; 0
    37e0:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    37e2:	d7 fc       	sbrc	r13, 7
    37e4:	08 c0       	rjmp	.+16     	; 0x37f6 <Display_balance+0x9c>
			if (y_pos > 128) y_pos = 128;
    37e6:	81 e8       	ldi	r24, 0x81	; 129
    37e8:	c8 16       	cp	r12, r24
    37ea:	d1 04       	cpc	r13, r1
    37ec:	34 f0       	brlt	.+12     	; 0x37fa <Display_balance+0xa0>
    37ee:	80 e8       	ldi	r24, 0x80	; 128
    37f0:	c8 2e       	mov	r12, r24
    37f2:	d1 2c       	mov	r13, r1
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <Display_balance+0xa0>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    37f6:	c1 2c       	mov	r12, r1
    37f8:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    37fa:	27 e3       	ldi	r18, 0x37	; 55
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	42 e0       	ldi	r20, 0x02	; 2
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	6d ee       	ldi	r22, 0xED	; 237
    3804:	71 e0       	ldi	r23, 0x01	; 1
    3806:	8c e0       	ldi	r24, 0x0C	; 12
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    380e:	ee 24       	eor	r14, r14
    3810:	e3 94       	inc	r14
    3812:	00 e4       	ldi	r16, 0x40	; 64
    3814:	20 e8       	ldi	r18, 0x80	; 128
    3816:	40 e0       	ldi	r20, 0x00	; 0
    3818:	60 e0       	ldi	r22, 0x00	; 0
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	91 e0       	ldi	r25, 0x01	; 1
    381e:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    3822:	05 e1       	ldi	r16, 0x15	; 21
    3824:	25 e1       	ldi	r18, 0x15	; 21
    3826:	46 e1       	ldi	r20, 0x16	; 22
    3828:	66 e3       	ldi	r22, 0x36	; 54
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	91 e0       	ldi	r25, 0x01	; 1
    382e:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    3832:	08 e3       	ldi	r16, 0x38	; 56
    3834:	20 e4       	ldi	r18, 0x40	; 64
    3836:	48 e0       	ldi	r20, 0x08	; 8
    3838:	60 e4       	ldi	r22, 0x40	; 64
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	91 e0       	ldi	r25, 0x01	; 1
    383e:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    3842:	00 e2       	ldi	r16, 0x20	; 32
    3844:	20 e6       	ldi	r18, 0x60	; 96
    3846:	40 e2       	ldi	r20, 0x20	; 32
    3848:	60 e2       	ldi	r22, 0x20	; 32
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	91 e0       	ldi	r25, 0x01	; 1
    384e:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    3852:	01 e0       	ldi	r16, 0x01	; 1
    3854:	28 e0       	ldi	r18, 0x08	; 8
    3856:	4c 2f       	mov	r20, r28
    3858:	6c 2d       	mov	r22, r12
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	91 e0       	ldi	r25, 0x01	; 1
    385e:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
			clear_buffer(buffer);
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	91 e0       	ldi	r25, 0x01	; 1
    386e:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
    3872:	79 cf       	rjmp	.-270    	; 0x3766 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    3874:	df 91       	pop	r29
    3876:	cf 91       	pop	r28
    3878:	0f 91       	pop	r16
    387a:	ef 90       	pop	r14
    387c:	df 90       	pop	r13
    387e:	cf 90       	pop	r12
    3880:	08 95       	ret

00003882 <Display_in_out>:
//************************************************************
// Code
//************************************************************

void Display_in_out(void)
{
    3882:	2f 92       	push	r2
    3884:	3f 92       	push	r3
    3886:	4f 92       	push	r4
    3888:	5f 92       	push	r5
    388a:	6f 92       	push	r6
    388c:	7f 92       	push	r7
    388e:	8f 92       	push	r8
    3890:	9f 92       	push	r9
    3892:	af 92       	push	r10
    3894:	bf 92       	push	r11
    3896:	cf 92       	push	r12
    3898:	df 92       	push	r13
    389a:	ef 92       	push	r14
    389c:	ff 92       	push	r15
    389e:	0f 93       	push	r16
    38a0:	1f 93       	push	r17
    38a2:	cf 93       	push	r28
    38a4:	df 93       	push	r29
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	a5 97       	sbiw	r28, 0x25	; 37
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	f8 94       	cli
    38b0:	de bf       	out	0x3e, r29	; 62
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	cd bf       	out	0x3d, r28	; 61
	uint16_t ticker_16 = 0;
	uint32_t interval = 0;			// IMU interval	
	float	tempf1 = 0.0;
	
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
    38b6:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <init_int>
				temp = ((temp - 3750) >> 1) + SERVO_CENTER; // SERVO_CENTER = 1500
			}
			else
			{
				// Scale motor from 2500~5000 to 1000~2000
				temp = ((temp << 2) + 5) / 10; 	// Round and convert
    38ba:	0a e0       	ldi	r16, 0x0A	; 10
    38bc:	20 2e       	mov	r2, r16
    38be:	31 2c       	mov	r3, r1
			{
				// Check for motor marker
				if (Config.Channel[i].Motor_marker == MOTOR)
				{
					// Set output to minimum pulse width (1000us)
					ServoOut[i] = MOTORMIN;
    38c0:	88 ee       	ldi	r24, 0xE8	; 232
    38c2:	48 2e       	mov	r4, r24
    38c4:	83 e0       	ldi	r24, 0x03	; 3
    38c6:	58 2e       	mov	r5, r24
			{
				Outputs[i] = (Outputs[i] + 2) / 5; // Convert to percentages +/-500 = +/-100%
			}
			else
			{
				Outputs[i] = (Outputs[i] - 2) / 5; 
    38c8:	95 e0       	ldi	r25, 0x05	; 5
    38ca:	a9 2e       	mov	r10, r25
    38cc:	b1 2c       	mov	r11, r1
		LCD_Display_Text(480,(const unsigned char*)Verdana8,0,23);
		LCD_Display_Text(481,(const unsigned char*)Verdana8,0,33);
		LCD_Display_Text(482,(const unsigned char*)Verdana8,0,43);
		LCD_Display_Text(483,(const unsigned char*)Verdana8,0,53);
		
		mugui_lcd_puts(itoa((MonopolarThrottle / 20),pBuffer,10),(const unsigned char*)Verdana8,25,3);
    38ce:	24 e1       	ldi	r18, 0x14	; 20
    38d0:	62 2e       	mov	r6, r18
    38d2:	71 2c       	mov	r7, r1
		// Display the transition number as 1.00 to 2.00
		uint8_t x_loc = 104;		// X location of transition display
		uint8_t y_loc = 53;		// Y location of transition display

		utemp = transition + 100;
		temp = utemp/100;		// Display whole decimal part first
    38d4:	34 e6       	ldi	r19, 0x64	; 100
    38d6:	83 2e       	mov	r8, r19
    38d8:	91 2c       	mov	r9, r1
	
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
	
	// While back button not pressed
	while(BUTTON1 != 0)
    38da:	1f 9b       	sbis	0x03, 7	; 3
    38dc:	3e c3       	rjmp	.+1660   	; 0x3f5a <Display_in_out+0x6d8>
	{
		RxGetChannels();
    38de:	0e 94 bc 66 	call	0xcd78	; 0xcd78 <RxGetChannels>
		ReadGyros();
    38e2:	0e 94 2a 38 	call	0x7054	; 0x7054 <ReadGyros>
		ReadAcc();
    38e6:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    38ea:	0e 94 8d 42 	call	0x851a	; 0x851a <TIM16_ReadTCNT1>
    38ee:	9c 01       	movw	r18, r24

		// Reset Timer0 count
		TCNT0 = 0;
    38f0:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    38f2:	80 91 2e 05 	lds	r24, 0x052E
    38f6:	90 91 2f 05 	lds	r25, 0x052F
    38fa:	28 17       	cp	r18, r24
    38fc:	39 07       	cpc	r19, r25
    38fe:	48 f4       	brcc	.+18     	; 0x3912 <Display_in_out+0x90>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    3900:	80 91 2e 05 	lds	r24, 0x052E
    3904:	90 91 2f 05 	lds	r25, 0x052F
    3908:	a9 01       	movw	r20, r18
    390a:	48 1b       	sub	r20, r24
    390c:	59 0b       	sbc	r21, r25
    390e:	ca 01       	movw	r24, r20
    3910:	08 c0       	rjmp	.+16     	; 0x3922 <Display_in_out+0xa0>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    3912:	80 91 2e 05 	lds	r24, 0x052E
    3916:	90 91 2f 05 	lds	r25, 0x052F
    391a:	f9 01       	movw	r30, r18
    391c:	e8 1b       	sub	r30, r24
    391e:	f9 0b       	sbc	r31, r25
    3920:	cf 01       	movw	r24, r30
		}
		
		interval = ticker_16; // uint16_t
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    3922:	30 93 2f 05 	sts	0x052F, r19
    3926:	20 93 2e 05 	sts	0x052E, r18
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    392a:	20 91 ca 08 	lds	r18, 0x08CA
    392e:	30 91 cb 08 	lds	r19, 0x08CB
    3932:	a0 e0       	ldi	r26, 0x00	; 0
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	22 30       	cpi	r18, 0x02	; 2
    3938:	31 05       	cpc	r19, r1
    393a:	18 f4       	brcc	.+6      	; 0x3942 <Display_in_out+0xc0>
		{
			interval = ticker_16; // uint16_t
    393c:	6c 01       	movw	r12, r24
    393e:	7d 01       	movw	r14, r26
    3940:	11 c0       	rjmp	.+34     	; 0x3964 <Display_in_out+0xe2>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    3942:	c0 90 ca 08 	lds	r12, 0x08CA
    3946:	d0 90 cb 08 	lds	r13, 0x08CB
    394a:	e1 2c       	mov	r14, r1
    394c:	f1 2c       	mov	r15, r1
    394e:	1f e0       	ldi	r17, 0x0F	; 15
    3950:	cc 0c       	add	r12, r12
    3952:	dd 1c       	adc	r13, r13
    3954:	ee 1c       	adc	r14, r14
    3956:	ff 1c       	adc	r15, r15
    3958:	1a 95       	dec	r17
    395a:	d1 f7       	brne	.-12     	; 0x3950 <Display_in_out+0xce>
    395c:	c8 0e       	add	r12, r24
    395e:	d9 1e       	adc	r13, r25
    3960:	ea 1e       	adc	r14, r26
    3962:	fb 1e       	adc	r15, r27
		}

		TMR0_counter = 0;
    3964:	10 92 cb 08 	sts	0x08CB, r1
    3968:	10 92 ca 08 	sts	0x08CA, r1

		// Refresh accSmooth values and AccVert
		imu_update(interval);
    396c:	c7 01       	movw	r24, r14
    396e:	b6 01       	movw	r22, r12
    3970:	0e 94 17 3d 	call	0x7a2e	; 0x7a2e <imu_update>
		Sensor_PID(interval);
    3974:	c7 01       	movw	r24, r14
    3976:	b6 01       	movw	r22, r12
    3978:	0e 94 e7 60 	call	0xc1ce	; 0xc1ce <Sensor_PID>
		Calculate_PID();		// Calculate PID values
    397c:	0e 94 e0 63 	call	0xc7c0	; 0xc7c0 <Calculate_PID>

		UpdateTransition();		// Update the transition variable
    3980:	0e 94 a6 67 	call	0xcf4c	; 0xcf4c <UpdateTransition>
		ProcessMixer();			// Do all the mixer tasks
    3984:	0e 94 b6 58 	call	0xb16c	; 0xb16c <ProcessMixer>
		UpdateServos();			// Transfer Config.Channel[i].value data to ServoOut[i]
    3988:	0e 94 b4 56 	call	0xad68	; 0xad68 <UpdateServos>
    398c:	e2 eb       	ldi	r30, 0xB2	; 178
    398e:	f6 e0       	ldi	r31, 0x06	; 6
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0

		// Re-span numbers from internal values (2500 to 5000) to microseconds
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			temp = ServoOut[i];					// Promote to 16 bits
    3994:	89 01       	movw	r16, r18
    3996:	00 0f       	add	r16, r16
    3998:	11 1f       	adc	r17, r17
    399a:	d8 01       	movw	r26, r16
    399c:	aa 5a       	subi	r26, 0xAA	; 170
    399e:	b6 4f       	sbci	r27, 0xF6	; 246
    39a0:	8d 91       	ld	r24, X+
    39a2:	9c 91       	ld	r25, X

			// Check for motor marker and ignore if set
			if (Config.Channel[i].Motor_marker != MOTOR)
    39a4:	40 81       	ld	r20, Z
    39a6:	42 30       	cpi	r20, 0x02	; 2
    39a8:	41 f0       	breq	.+16     	; 0x39ba <Display_in_out+0x138>
			{
				// Scale servo from 2500~5000 to 875~2125
				temp = ((temp - 3750) >> 1) + SERVO_CENTER; // SERVO_CENTER = 1500
    39aa:	86 5a       	subi	r24, 0xA6	; 166
    39ac:	9e 40       	sbci	r25, 0x0E	; 14
    39ae:	95 95       	asr	r25
    39b0:	87 95       	ror	r24
    39b2:	bc 01       	movw	r22, r24
    39b4:	64 52       	subi	r22, 0x24	; 36
    39b6:	7a 4f       	sbci	r23, 0xFA	; 250
    39b8:	08 c0       	rjmp	.+16     	; 0x39ca <Display_in_out+0x148>
			}
			else
			{
				// Scale motor from 2500~5000 to 1000~2000
				temp = ((temp << 2) + 5) / 10; 	// Round and convert
    39ba:	88 0f       	add	r24, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	88 0f       	add	r24, r24
    39c0:	99 1f       	adc	r25, r25
    39c2:	05 96       	adiw	r24, 0x05	; 5
    39c4:	b1 01       	movw	r22, r2
    39c6:	0e 94 3a 6c 	call	0xd874	; 0xd874 <__divmodhi4>
			}
		
			ServoOut[i] = (uint16_t)temp;
    39ca:	d8 01       	movw	r26, r16
    39cc:	aa 5a       	subi	r26, 0xAA	; 170
    39ce:	b6 4f       	sbci	r27, 0xF6	; 246
    39d0:	11 96       	adiw	r26, 0x01	; 1
    39d2:	7c 93       	st	X, r23
    39d4:	6e 93       	st	-X, r22
    39d6:	2f 5f       	subi	r18, 0xFF	; 255
    39d8:	3f 4f       	sbci	r19, 0xFF	; 255
    39da:	b2 96       	adiw	r30, 0x22	; 34
		UpdateTransition();		// Update the transition variable
		ProcessMixer();			// Do all the mixer tasks
		UpdateServos();			// Transfer Config.Channel[i].value data to ServoOut[i]

		// Re-span numbers from internal values (2500 to 5000) to microseconds
		for (i = 0; i < MAX_OUTPUTS; i++)
    39dc:	28 30       	cpi	r18, 0x08	; 8
    39de:	31 05       	cpc	r19, r1
    39e0:	c9 f6       	brne	.-78     	; 0x3994 <Display_in_out+0x112>
    39e2:	e1 e2       	ldi	r30, 0x21	; 33
    39e4:	f6 e0       	ldi	r31, 0x06	; 6
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
		}

		// Check limits in microsecond units.
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			temp = ServoOut[i];
    39ea:	a9 01       	movw	r20, r18
    39ec:	44 0f       	add	r20, r20
    39ee:	55 1f       	adc	r21, r21
    39f0:	da 01       	movw	r26, r20
    39f2:	aa 5a       	subi	r26, 0xAA	; 170
    39f4:	b6 4f       	sbci	r27, 0xF6	; 246
    39f6:	0d 90       	ld	r0, X+
    39f8:	bc 91       	ld	r27, X
    39fa:	a0 2d       	mov	r26, r0
			
			// Enforce min, max travel limits
			if (temp > Config.Limits[i].maximum)
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	8a 17       	cp	r24, r26
    3a02:	9b 07       	cpc	r25, r27
    3a04:	3c f0       	brlt	.+14     	; 0x3a14 <Display_in_out+0x192>
			{
				temp = Config.Limits[i].maximum;
			}

			else if (temp < Config.Limits[i].minimum)
    3a06:	60 81       	ld	r22, Z
    3a08:	71 81       	ldd	r23, Z+1	; 0x01
    3a0a:	cd 01       	movw	r24, r26
    3a0c:	a6 17       	cp	r26, r22
    3a0e:	b7 07       	cpc	r27, r23
    3a10:	0c f4       	brge	.+2      	; 0x3a14 <Display_in_out+0x192>
    3a12:	cb 01       	movw	r24, r22
			{
				temp = Config.Limits[i].minimum;
			}
			
			ServoOut[i] = temp;
    3a14:	da 01       	movw	r26, r20
    3a16:	aa 5a       	subi	r26, 0xAA	; 170
    3a18:	b6 4f       	sbci	r27, 0xF6	; 246
    3a1a:	11 96       	adiw	r26, 0x01	; 1
    3a1c:	9c 93       	st	X, r25
    3a1e:	8e 93       	st	-X, r24
    3a20:	2f 5f       	subi	r18, 0xFF	; 255
    3a22:	3f 4f       	sbci	r19, 0xFF	; 255
    3a24:	34 96       	adiw	r30, 0x04	; 4
		
			ServoOut[i] = (uint16_t)temp;
		}

		// Check limits in microsecond units.
		for (i = 0; i < MAX_OUTPUTS; i++)
    3a26:	28 30       	cpi	r18, 0x08	; 8
    3a28:	31 05       	cpc	r19, r1
    3a2a:	f9 f6       	brne	.-66     	; 0x39ea <Display_in_out+0x168>
		}
		
		// Servos are now in microsecond units.
		
		// Check for motor flags if throttle is below arming minimum
		if (MonopolarThrottle < THROTTLEIDLE) // THROTTLEIDLE = 50
    3a2c:	80 91 42 09 	lds	r24, 0x0942
    3a30:	90 91 43 09 	lds	r25, 0x0943
    3a34:	c2 97       	sbiw	r24, 0x32	; 50
    3a36:	2c f0       	brlt	.+10     	; 0x3a42 <Display_in_out+0x1c0>
    3a38:	fe 01       	movw	r30, r28
    3a3a:	71 96       	adiw	r30, 0x11	; 17
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	15 c0       	rjmp	.+42     	; 0x3a6c <Display_in_out+0x1ea>
    3a42:	e2 eb       	ldi	r30, 0xB2	; 178
    3a44:	f6 e0       	ldi	r31, 0x06	; 6
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	90 e0       	ldi	r25, 0x00	; 0
		{
			// For each output
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Check for motor marker
				if (Config.Channel[i].Motor_marker == MOTOR)
    3a4a:	20 81       	ld	r18, Z
    3a4c:	22 30       	cpi	r18, 0x02	; 2
    3a4e:	41 f4       	brne	.+16     	; 0x3a60 <Display_in_out+0x1de>
				{
					// Set output to minimum pulse width (1000us)
					ServoOut[i] = MOTORMIN;
    3a50:	dc 01       	movw	r26, r24
    3a52:	aa 0f       	add	r26, r26
    3a54:	bb 1f       	adc	r27, r27
    3a56:	aa 5a       	subi	r26, 0xAA	; 170
    3a58:	b6 4f       	sbci	r27, 0xF6	; 246
    3a5a:	11 96       	adiw	r26, 0x01	; 1
    3a5c:	5c 92       	st	X, r5
    3a5e:	4e 92       	st	-X, r4
    3a60:	01 96       	adiw	r24, 0x01	; 1
    3a62:	b2 96       	adiw	r30, 0x22	; 34
		
		// Check for motor flags if throttle is below arming minimum
		if (MonopolarThrottle < THROTTLEIDLE) // THROTTLEIDLE = 50
		{
			// For each output
			for (i = 0; i < MAX_OUTPUTS; i++)
    3a64:	88 30       	cpi	r24, 0x08	; 8
    3a66:	91 05       	cpc	r25, r1
    3a68:	81 f7       	brne	.-32     	; 0x3a4a <Display_in_out+0x1c8>
    3a6a:	e6 cf       	rjmp	.-52     	; 0x3a38 <Display_in_out+0x1b6>
		}

		// Convert outputs to percentages (center and divide by 4)
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			Outputs[i] = (int16_t)ServoOut[i];
    3a6c:	d9 01       	movw	r26, r18
    3a6e:	aa 0f       	add	r26, r26
    3a70:	bb 1f       	adc	r27, r27
    3a72:	aa 5a       	subi	r26, 0xAA	; 170
    3a74:	b6 4f       	sbci	r27, 0xF6	; 246
    3a76:	8d 91       	ld	r24, X+
    3a78:	9c 91       	ld	r25, X
			Outputs[i] = Outputs[i] - SERVO_CENTER;
    3a7a:	ac 01       	movw	r20, r24
    3a7c:	4c 5d       	subi	r20, 0xDC	; 220
    3a7e:	55 40       	sbci	r21, 0x05	; 5
    3a80:	51 83       	std	Z+1, r21	; 0x01
    3a82:	40 83       	st	Z, r20
			
			// Round correctly in both directions
			if (Outputs[i] >= 0)
    3a84:	57 fd       	sbrc	r21, 7
    3a86:	03 c0       	rjmp	.+6      	; 0x3a8e <Display_in_out+0x20c>
			{
				Outputs[i] = (Outputs[i] + 2) / 5; // Convert to percentages +/-500 = +/-100%
    3a88:	8a 5d       	subi	r24, 0xDA	; 218
    3a8a:	95 40       	sbci	r25, 0x05	; 5
    3a8c:	02 c0       	rjmp	.+4      	; 0x3a92 <Display_in_out+0x210>
			}
			else
			{
				Outputs[i] = (Outputs[i] - 2) / 5; 
    3a8e:	8e 5d       	subi	r24, 0xDE	; 222
    3a90:	95 40       	sbci	r25, 0x05	; 5
    3a92:	b5 01       	movw	r22, r10
    3a94:	0e 94 3a 6c 	call	0xd874	; 0xd874 <__divmodhi4>
    3a98:	71 83       	std	Z+1, r23	; 0x01
    3a9a:	60 83       	st	Z, r22
    3a9c:	2f 5f       	subi	r18, 0xFF	; 255
    3a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa0:	32 96       	adiw	r30, 0x02	; 2
				}
			}
		}

		// Convert outputs to percentages (center and divide by 4)
		for (i = 0; i < MAX_OUTPUTS; i++)
    3aa2:	28 30       	cpi	r18, 0x08	; 8
    3aa4:	31 05       	cpc	r19, r1
    3aa6:	11 f7       	brne	.-60     	; 0x3a6c <Display_in_out+0x1ea>
    3aa8:	ae 01       	movw	r20, r28
    3aaa:	4f 5f       	subi	r20, 0xFF	; 255
    3aac:	5f 4f       	sbci	r21, 0xFF	; 255
    3aae:	7a 01       	movw	r14, r20
    3ab0:	00 e0       	ldi	r16, 0x00	; 0
    3ab2:	10 e0       	ldi	r17, 0x00	; 0
		}

		// Convert inputs to percentages (center and divide by 10)
		for (i = 0; i < MAX_RC_CHANNELS; i++)
		{
			tempf1 = (float)RCinputs[i];
    3ab4:	f8 01       	movw	r30, r16
    3ab6:	ee 0f       	add	r30, r30
    3ab8:	ff 1f       	adc	r31, r31
    3aba:	ec 5b       	subi	r30, 0xBC	; 188
    3abc:	f6 4f       	sbci	r31, 0xF6	; 246
    3abe:	60 81       	ld	r22, Z
    3ac0:	71 81       	ldd	r23, Z+1	; 0x01
    3ac2:	88 27       	eor	r24, r24
    3ac4:	77 fd       	sbrc	r23, 7
    3ac6:	80 95       	com	r24
    3ac8:	98 2f       	mov	r25, r24
    3aca:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
			Inputs[i] = (int16_t)(tempf1 / 10.0f);
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	40 e2       	ldi	r20, 0x20	; 32
    3ad4:	51 e4       	ldi	r21, 0x41	; 65
    3ad6:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
    3ada:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    3ade:	f7 01       	movw	r30, r14
    3ae0:	61 93       	st	Z+, r22
    3ae2:	71 93       	st	Z+, r23
    3ae4:	7f 01       	movw	r14, r30
    3ae6:	0f 5f       	subi	r16, 0xFF	; 255
    3ae8:	1f 4f       	sbci	r17, 0xFF	; 255
				Outputs[i] = (Outputs[i] - 2) / 5; 
			}
		}

		// Convert inputs to percentages (center and divide by 10)
		for (i = 0; i < MAX_RC_CHANNELS; i++)
    3aea:	08 30       	cpi	r16, 0x08	; 8
    3aec:	11 05       	cpc	r17, r1
    3aee:	11 f7       	brne	.-60     	; 0x3ab4 <Display_in_out+0x232>
			tempf1 = (float)RCinputs[i];
			Inputs[i] = (int16_t)(tempf1 / 10.0f);
		}

		// Column 1
		LCD_Display_Text(478,(const unsigned char*)Verdana8,0,3);
    3af0:	23 e0       	ldi	r18, 0x03	; 3
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	6b e7       	ldi	r22, 0x7B	; 123
    3afa:	7f e0       	ldi	r23, 0x0F	; 15
    3afc:	8e ed       	ldi	r24, 0xDE	; 222
    3afe:	91 e0       	ldi	r25, 0x01	; 1
    3b00:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(479,(const unsigned char*)Verdana8,0,13);
    3b04:	2d e0       	ldi	r18, 0x0D	; 13
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	50 e0       	ldi	r21, 0x00	; 0
    3b0c:	6b e7       	ldi	r22, 0x7B	; 123
    3b0e:	7f e0       	ldi	r23, 0x0F	; 15
    3b10:	8f ed       	ldi	r24, 0xDF	; 223
    3b12:	91 e0       	ldi	r25, 0x01	; 1
    3b14:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(480,(const unsigned char*)Verdana8,0,23);
    3b18:	27 e1       	ldi	r18, 0x17	; 23
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	40 e0       	ldi	r20, 0x00	; 0
    3b1e:	50 e0       	ldi	r21, 0x00	; 0
    3b20:	6b e7       	ldi	r22, 0x7B	; 123
    3b22:	7f e0       	ldi	r23, 0x0F	; 15
    3b24:	80 ee       	ldi	r24, 0xE0	; 224
    3b26:	91 e0       	ldi	r25, 0x01	; 1
    3b28:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(481,(const unsigned char*)Verdana8,0,33);
    3b2c:	21 e2       	ldi	r18, 0x21	; 33
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	40 e0       	ldi	r20, 0x00	; 0
    3b32:	50 e0       	ldi	r21, 0x00	; 0
    3b34:	6b e7       	ldi	r22, 0x7B	; 123
    3b36:	7f e0       	ldi	r23, 0x0F	; 15
    3b38:	81 ee       	ldi	r24, 0xE1	; 225
    3b3a:	91 e0       	ldi	r25, 0x01	; 1
    3b3c:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(482,(const unsigned char*)Verdana8,0,43);
    3b40:	2b e2       	ldi	r18, 0x2B	; 43
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	40 e0       	ldi	r20, 0x00	; 0
    3b46:	50 e0       	ldi	r21, 0x00	; 0
    3b48:	6b e7       	ldi	r22, 0x7B	; 123
    3b4a:	7f e0       	ldi	r23, 0x0F	; 15
    3b4c:	82 ee       	ldi	r24, 0xE2	; 226
    3b4e:	91 e0       	ldi	r25, 0x01	; 1
    3b50:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(483,(const unsigned char*)Verdana8,0,53);
    3b54:	25 e3       	ldi	r18, 0x35	; 53
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	40 e0       	ldi	r20, 0x00	; 0
    3b5a:	50 e0       	ldi	r21, 0x00	; 0
    3b5c:	6b e7       	ldi	r22, 0x7B	; 123
    3b5e:	7f e0       	ldi	r23, 0x0F	; 15
    3b60:	83 ee       	ldi	r24, 0xE3	; 227
    3b62:	91 e0       	ldi	r25, 0x01	; 1
    3b64:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		
		mugui_lcd_puts(itoa((MonopolarThrottle / 20),pBuffer,10),(const unsigned char*)Verdana8,25,3);
    3b68:	80 91 42 09 	lds	r24, 0x0942
    3b6c:	90 91 43 09 	lds	r25, 0x0943
    3b70:	b3 01       	movw	r22, r6
    3b72:	0e 94 3a 6c 	call	0xd874	; 0xd874 <__divmodhi4>
    3b76:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3b78:	4a e0       	ldi	r20, 0x0A	; 10
    3b7a:	65 ea       	ldi	r22, 0xA5	; 165
    3b7c:	75 e0       	ldi	r23, 0x05	; 5
    3b7e:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    3b82:	23 e0       	ldi	r18, 0x03	; 3
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	49 e1       	ldi	r20, 0x19	; 25
    3b88:	50 e0       	ldi	r21, 0x00	; 0
    3b8a:	6b e7       	ldi	r22, 0x7B	; 123
    3b8c:	7f e0       	ldi	r23, 0x0F	; 15
    3b8e:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3b92:	4a e0       	ldi	r20, 0x0A	; 10
    3b94:	65 ea       	ldi	r22, 0xA5	; 165
    3b96:	75 e0       	ldi	r23, 0x05	; 5
    3b98:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9c:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,25,13);
    3ba0:	2d e0       	ldi	r18, 0x0D	; 13
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	49 e1       	ldi	r20, 0x19	; 25
    3ba6:	50 e0       	ldi	r21, 0x00	; 0
    3ba8:	6b e7       	ldi	r22, 0x7B	; 123
    3baa:	7f e0       	ldi	r23, 0x0F	; 15
    3bac:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3bb0:	4a e0       	ldi	r20, 0x0A	; 10
    3bb2:	65 ea       	ldi	r22, 0xA5	; 165
    3bb4:	75 e0       	ldi	r23, 0x05	; 5
    3bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bba:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,25,23);
    3bbe:	27 e1       	ldi	r18, 0x17	; 23
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	49 e1       	ldi	r20, 0x19	; 25
    3bc4:	50 e0       	ldi	r21, 0x00	; 0
    3bc6:	6b e7       	ldi	r22, 0x7B	; 123
    3bc8:	7f e0       	ldi	r23, 0x0F	; 15
    3bca:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3bce:	4a e0       	ldi	r20, 0x0A	; 10
    3bd0:	65 ea       	ldi	r22, 0xA5	; 165
    3bd2:	75 e0       	ldi	r23, 0x05	; 5
    3bd4:	8f 81       	ldd	r24, Y+7	; 0x07
    3bd6:	98 85       	ldd	r25, Y+8	; 0x08
    3bd8:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,25,33);
    3bdc:	21 e2       	ldi	r18, 0x21	; 33
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	49 e1       	ldi	r20, 0x19	; 25
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	6b e7       	ldi	r22, 0x7B	; 123
    3be6:	7f e0       	ldi	r23, 0x0F	; 15
    3be8:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3bec:	4a e0       	ldi	r20, 0x0A	; 10
    3bee:	65 ea       	ldi	r22, 0xA5	; 165
    3bf0:	75 e0       	ldi	r23, 0x05	; 5
    3bf2:	89 85       	ldd	r24, Y+9	; 0x09
    3bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf6:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,25,43);
    3bfa:	2b e2       	ldi	r18, 0x2B	; 43
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	49 e1       	ldi	r20, 0x19	; 25
    3c00:	50 e0       	ldi	r21, 0x00	; 0
    3c02:	6b e7       	ldi	r22, 0x7B	; 123
    3c04:	7f e0       	ldi	r23, 0x0F	; 15
    3c06:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3c0a:	4a e0       	ldi	r20, 0x0A	; 10
    3c0c:	65 ea       	ldi	r22, 0xA5	; 165
    3c0e:	75 e0       	ldi	r23, 0x05	; 5
    3c10:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c12:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c14:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,25,53);
    3c18:	25 e3       	ldi	r18, 0x35	; 53
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	49 e1       	ldi	r20, 0x19	; 25
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	6b e7       	ldi	r22, 0x7B	; 123
    3c22:	7f e0       	ldi	r23, 0x0F	; 15
    3c24:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		
		// Column 2
		LCD_Display_Text(484,(const unsigned char*)Verdana8,48,3);
    3c28:	23 e0       	ldi	r18, 0x03	; 3
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	40 e3       	ldi	r20, 0x30	; 48
    3c2e:	50 e0       	ldi	r21, 0x00	; 0
    3c30:	6b e7       	ldi	r22, 0x7B	; 123
    3c32:	7f e0       	ldi	r23, 0x0F	; 15
    3c34:	84 ee       	ldi	r24, 0xE4	; 228
    3c36:	91 e0       	ldi	r25, 0x01	; 1
    3c38:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(485,(const unsigned char*)Verdana8,48,13);
    3c3c:	2d e0       	ldi	r18, 0x0D	; 13
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	40 e3       	ldi	r20, 0x30	; 48
    3c42:	50 e0       	ldi	r21, 0x00	; 0
    3c44:	6b e7       	ldi	r22, 0x7B	; 123
    3c46:	7f e0       	ldi	r23, 0x0F	; 15
    3c48:	85 ee       	ldi	r24, 0xE5	; 229
    3c4a:	91 e0       	ldi	r25, 0x01	; 1
    3c4c:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(477,(const unsigned char*)Verdana8,48,23); // OUT
    3c50:	27 e1       	ldi	r18, 0x17	; 23
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e3       	ldi	r20, 0x30	; 48
    3c56:	50 e0       	ldi	r21, 0x00	; 0
    3c58:	6b e7       	ldi	r22, 0x7B	; 123
    3c5a:	7f e0       	ldi	r23, 0x0F	; 15
    3c5c:	8d ed       	ldi	r24, 0xDD	; 221
    3c5e:	91 e0       	ldi	r25, 0x01	; 1
    3c60:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(468,(const unsigned char*)Verdana8,48,33);
    3c64:	21 e2       	ldi	r18, 0x21	; 33
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e3       	ldi	r20, 0x30	; 48
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	6b e7       	ldi	r22, 0x7B	; 123
    3c6e:	7f e0       	ldi	r23, 0x0F	; 15
    3c70:	84 ed       	ldi	r24, 0xD4	; 212
    3c72:	91 e0       	ldi	r25, 0x01	; 1
    3c74:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(469,(const unsigned char*)Verdana8,48,43);
    3c78:	2b e2       	ldi	r18, 0x2B	; 43
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	40 e3       	ldi	r20, 0x30	; 48
    3c7e:	50 e0       	ldi	r21, 0x00	; 0
    3c80:	6b e7       	ldi	r22, 0x7B	; 123
    3c82:	7f e0       	ldi	r23, 0x0F	; 15
    3c84:	85 ed       	ldi	r24, 0xD5	; 213
    3c86:	91 e0       	ldi	r25, 0x01	; 1
    3c88:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(470,(const unsigned char*)Verdana8,48,53);		
    3c8c:	25 e3       	ldi	r18, 0x35	; 53
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e3       	ldi	r20, 0x30	; 48
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	6b e7       	ldi	r22, 0x7B	; 123
    3c96:	7f e0       	ldi	r23, 0x0F	; 15
    3c98:	86 ed       	ldi	r24, 0xD6	; 214
    3c9a:	91 e0       	ldi	r25, 0x01	; 1
    3c9c:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
    3ca0:	4a e0       	ldi	r20, 0x0A	; 10
    3ca2:	65 ea       	ldi	r22, 0xA5	; 165
    3ca4:	75 e0       	ldi	r23, 0x05	; 5
    3ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3caa:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,71,3);
    3cae:	23 e0       	ldi	r18, 0x03	; 3
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	47 e4       	ldi	r20, 0x47	; 71
    3cb4:	50 e0       	ldi	r21, 0x00	; 0
    3cb6:	6b e7       	ldi	r22, 0x7B	; 123
    3cb8:	7f e0       	ldi	r23, 0x0F	; 15
    3cba:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3cbe:	4a e0       	ldi	r20, 0x0A	; 10
    3cc0:	65 ea       	ldi	r22, 0xA5	; 165
    3cc2:	75 e0       	ldi	r23, 0x05	; 5
    3cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cc6:	98 89       	ldd	r25, Y+16	; 0x10
    3cc8:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Inputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,71,13);
    3ccc:	2d e0       	ldi	r18, 0x0D	; 13
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	47 e4       	ldi	r20, 0x47	; 71
    3cd2:	50 e0       	ldi	r21, 0x00	; 0
    3cd4:	6b e7       	ldi	r22, 0x7B	; 123
    3cd6:	7f e0       	ldi	r23, 0x0F	; 15
    3cd8:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3cdc:	4a e0       	ldi	r20, 0x0A	; 10
    3cde:	65 ea       	ldi	r22, 0xA5	; 165
    3ce0:	75 e0       	ldi	r23, 0x05	; 5
    3ce2:	89 89       	ldd	r24, Y+17	; 0x11
    3ce4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ce6:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[0],pBuffer,10),(const unsigned char*)Verdana8,57,33);
    3cea:	21 e2       	ldi	r18, 0x21	; 33
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	49 e3       	ldi	r20, 0x39	; 57
    3cf0:	50 e0       	ldi	r21, 0x00	; 0
    3cf2:	6b e7       	ldi	r22, 0x7B	; 123
    3cf4:	7f e0       	ldi	r23, 0x0F	; 15
    3cf6:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3cfa:	4a e0       	ldi	r20, 0x0A	; 10
    3cfc:	65 ea       	ldi	r22, 0xA5	; 165
    3cfe:	75 e0       	ldi	r23, 0x05	; 5
    3d00:	8b 89       	ldd	r24, Y+19	; 0x13
    3d02:	9c 89       	ldd	r25, Y+20	; 0x14
    3d04:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[1],pBuffer,10),(const unsigned char*)Verdana8,57,43);
    3d08:	2b e2       	ldi	r18, 0x2B	; 43
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	49 e3       	ldi	r20, 0x39	; 57
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	6b e7       	ldi	r22, 0x7B	; 123
    3d12:	7f e0       	ldi	r23, 0x0F	; 15
    3d14:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3d18:	4a e0       	ldi	r20, 0x0A	; 10
    3d1a:	65 ea       	ldi	r22, 0xA5	; 165
    3d1c:	75 e0       	ldi	r23, 0x05	; 5
    3d1e:	8d 89       	ldd	r24, Y+21	; 0x15
    3d20:	9e 89       	ldd	r25, Y+22	; 0x16
    3d22:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[2],pBuffer,10),(const unsigned char*)Verdana8,57,53);
    3d26:	25 e3       	ldi	r18, 0x35	; 53
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	49 e3       	ldi	r20, 0x39	; 57
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	6b e7       	ldi	r22, 0x7B	; 123
    3d30:	7f e0       	ldi	r23, 0x0F	; 15
    3d32:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		
		// Column 3
		LCD_Display_Text(471,(const unsigned char*)Verdana8,94,3);
    3d36:	23 e0       	ldi	r18, 0x03	; 3
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	4e e5       	ldi	r20, 0x5E	; 94
    3d3c:	50 e0       	ldi	r21, 0x00	; 0
    3d3e:	6b e7       	ldi	r22, 0x7B	; 123
    3d40:	7f e0       	ldi	r23, 0x0F	; 15
    3d42:	87 ed       	ldi	r24, 0xD7	; 215
    3d44:	91 e0       	ldi	r25, 0x01	; 1
    3d46:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(472,(const unsigned char*)Verdana8,94,13);
    3d4a:	2d e0       	ldi	r18, 0x0D	; 13
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	4e e5       	ldi	r20, 0x5E	; 94
    3d50:	50 e0       	ldi	r21, 0x00	; 0
    3d52:	6b e7       	ldi	r22, 0x7B	; 123
    3d54:	7f e0       	ldi	r23, 0x0F	; 15
    3d56:	88 ed       	ldi	r24, 0xD8	; 216
    3d58:	91 e0       	ldi	r25, 0x01	; 1
    3d5a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(473,(const unsigned char*)Verdana8,94,23);
    3d5e:	27 e1       	ldi	r18, 0x17	; 23
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	4e e5       	ldi	r20, 0x5E	; 94
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	6b e7       	ldi	r22, 0x7B	; 123
    3d68:	7f e0       	ldi	r23, 0x0F	; 15
    3d6a:	89 ed       	ldi	r24, 0xD9	; 217
    3d6c:	91 e0       	ldi	r25, 0x01	; 1
    3d6e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(474,(const unsigned char*)Verdana8,94,33);
    3d72:	21 e2       	ldi	r18, 0x21	; 33
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	4e e5       	ldi	r20, 0x5E	; 94
    3d78:	50 e0       	ldi	r21, 0x00	; 0
    3d7a:	6b e7       	ldi	r22, 0x7B	; 123
    3d7c:	7f e0       	ldi	r23, 0x0F	; 15
    3d7e:	8a ed       	ldi	r24, 0xDA	; 218
    3d80:	91 e0       	ldi	r25, 0x01	; 1
    3d82:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(475,(const unsigned char*)Verdana8,94,43);
    3d86:	2b e2       	ldi	r18, 0x2B	; 43
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	4e e5       	ldi	r20, 0x5E	; 94
    3d8c:	50 e0       	ldi	r21, 0x00	; 0
    3d8e:	6b e7       	ldi	r22, 0x7B	; 123
    3d90:	7f e0       	ldi	r23, 0x0F	; 15
    3d92:	8b ed       	ldi	r24, 0xDB	; 219
    3d94:	91 e0       	ldi	r25, 0x01	; 1
    3d96:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(476,(const unsigned char*)Verdana8,88,53); // Pn.
    3d9a:	25 e3       	ldi	r18, 0x35	; 53
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	48 e5       	ldi	r20, 0x58	; 88
    3da0:	50 e0       	ldi	r21, 0x00	; 0
    3da2:	6b e7       	ldi	r22, 0x7B	; 123
    3da4:	7f e0       	ldi	r23, 0x0F	; 15
    3da6:	8c ed       	ldi	r24, 0xDC	; 220
    3da8:	91 e0       	ldi	r25, 0x01	; 1
    3daa:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
    3dae:	4a e0       	ldi	r20, 0x0A	; 10
    3db0:	65 ea       	ldi	r22, 0xA5	; 165
    3db2:	75 e0       	ldi	r23, 0x05	; 5
    3db4:	8f 89       	ldd	r24, Y+23	; 0x17
    3db6:	98 8d       	ldd	r25, Y+24	; 0x18
    3db8:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>


		mugui_lcd_puts(itoa(Outputs[3],pBuffer,10),(const unsigned char*)Verdana8,104,3);
    3dbc:	23 e0       	ldi	r18, 0x03	; 3
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	48 e6       	ldi	r20, 0x68	; 104
    3dc2:	50 e0       	ldi	r21, 0x00	; 0
    3dc4:	6b e7       	ldi	r22, 0x7B	; 123
    3dc6:	7f e0       	ldi	r23, 0x0F	; 15
    3dc8:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3dcc:	4a e0       	ldi	r20, 0x0A	; 10
    3dce:	65 ea       	ldi	r22, 0xA5	; 165
    3dd0:	75 e0       	ldi	r23, 0x05	; 5
    3dd2:	89 8d       	ldd	r24, Y+25	; 0x19
    3dd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3dd6:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[4],pBuffer,10),(const unsigned char*)Verdana8,104,13);
    3dda:	2d e0       	ldi	r18, 0x0D	; 13
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	48 e6       	ldi	r20, 0x68	; 104
    3de0:	50 e0       	ldi	r21, 0x00	; 0
    3de2:	6b e7       	ldi	r22, 0x7B	; 123
    3de4:	7f e0       	ldi	r23, 0x0F	; 15
    3de6:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3dea:	4a e0       	ldi	r20, 0x0A	; 10
    3dec:	65 ea       	ldi	r22, 0xA5	; 165
    3dee:	75 e0       	ldi	r23, 0x05	; 5
    3df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3df4:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[5],pBuffer,10),(const unsigned char*)Verdana8,104,23);
    3df8:	27 e1       	ldi	r18, 0x17	; 23
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	48 e6       	ldi	r20, 0x68	; 104
    3dfe:	50 e0       	ldi	r21, 0x00	; 0
    3e00:	6b e7       	ldi	r22, 0x7B	; 123
    3e02:	7f e0       	ldi	r23, 0x0F	; 15
    3e04:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3e08:	4a e0       	ldi	r20, 0x0A	; 10
    3e0a:	65 ea       	ldi	r22, 0xA5	; 165
    3e0c:	75 e0       	ldi	r23, 0x05	; 5
    3e0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e12:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[6],pBuffer,10),(const unsigned char*)Verdana8,104,33);
    3e16:	21 e2       	ldi	r18, 0x21	; 33
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	48 e6       	ldi	r20, 0x68	; 104
    3e1c:	50 e0       	ldi	r21, 0x00	; 0
    3e1e:	6b e7       	ldi	r22, 0x7B	; 123
    3e20:	7f e0       	ldi	r23, 0x0F	; 15
    3e22:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    3e26:	4a e0       	ldi	r20, 0x0A	; 10
    3e28:	65 ea       	ldi	r22, 0xA5	; 165
    3e2a:	75 e0       	ldi	r23, 0x05	; 5
    3e2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e2e:	98 a1       	ldd	r25, Y+32	; 0x20
    3e30:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(Outputs[7],pBuffer,10),(const unsigned char*)Verdana8,104,43);
    3e34:	2b e2       	ldi	r18, 0x2B	; 43
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	48 e6       	ldi	r20, 0x68	; 104
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	6b e7       	ldi	r22, 0x7B	; 123
    3e3e:	7f e0       	ldi	r23, 0x0F	; 15
    3e40:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>

		// Display the transition number as 1.00 to 2.00
		uint8_t x_loc = 104;		// X location of transition display
		uint8_t y_loc = 53;		// Y location of transition display

		utemp = transition + 100;
    3e44:	c0 90 37 05 	lds	r12, 0x0537
    3e48:	d0 90 38 05 	lds	r13, 0x0538
    3e4c:	f4 e6       	ldi	r31, 0x64	; 100
    3e4e:	cf 0e       	add	r12, r31
    3e50:	d1 1c       	adc	r13, r1
		temp = utemp/100;		// Display whole decimal part first
    3e52:	c6 01       	movw	r24, r12
    3e54:	b4 01       	movw	r22, r8
    3e56:	0e 94 26 6c 	call	0xd84c	; 0xd84c <__udivmodhi4>
    3e5a:	7b 01       	movw	r14, r22
    3e5c:	4a e0       	ldi	r20, 0x0A	; 10
    3e5e:	65 ea       	ldi	r22, 0xA5	; 165
    3e60:	75 e0       	ldi	r23, 0x05	; 5
    3e62:	c7 01       	movw	r24, r14
    3e64:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    3e68:	ae 01       	movw	r20, r28
    3e6a:	4f 5d       	subi	r20, 0xDF	; 223
    3e6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e6e:	6b e7       	ldi	r22, 0x7B	; 123
    3e70:	7f e0       	ldi	r23, 0x0F	; 15
    3e72:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
    3e76:	4a e0       	ldi	r20, 0x0A	; 10
    3e78:	65 ea       	ldi	r22, 0xA5	; 165
    3e7a:	75 e0       	ldi	r23, 0x05	; 5
    3e7c:	c7 01       	movw	r24, r14
    3e7e:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    3e82:	25 e3       	ldi	r18, 0x35	; 53
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	48 e6       	ldi	r20, 0x68	; 104
    3e88:	50 e0       	ldi	r21, 0x00	; 0
    3e8a:	6b e7       	ldi	r22, 0x7B	; 123
    3e8c:	7f e0       	ldi	r23, 0x0F	; 15
    3e8e:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		pos1 = size.x;

		utemp = utemp - (temp * 100); // Now display the parts to the right of the decimal point
    3e92:	2c e9       	ldi	r18, 0x9C	; 156
    3e94:	a7 01       	movw	r20, r14
    3e96:	24 03       	mulsu	r18, r20
    3e98:	80 01       	movw	r16, r0
    3e9a:	25 9f       	mul	r18, r21
    3e9c:	10 0d       	add	r17, r0
    3e9e:	11 24       	eor	r1, r1
    3ea0:	0c 0d       	add	r16, r12
    3ea2:	1d 1d       	adc	r17, r13

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    3ea4:	e9 a0       	ldd	r14, Y+33	; 0x21
    3ea6:	ff 24       	eor	r15, r15
    3ea8:	e7 fc       	sbrc	r14, 7
    3eaa:	f0 94       	com	r15
    3eac:	58 e6       	ldi	r21, 0x68	; 104
    3eae:	e5 0e       	add	r14, r21
    3eb0:	f1 1c       	adc	r15, r1
    3eb2:	25 e3       	ldi	r18, 0x35	; 53
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	a7 01       	movw	r20, r14
    3eb8:	6b e7       	ldi	r22, 0x7B	; 123
    3eba:	7f e0       	ldi	r23, 0x0F	; 15
    3ebc:	8c e0       	ldi	r24, 0x0C	; 12
    3ebe:	91 e0       	ldi	r25, 0x01	; 1
    3ec0:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    3ec4:	ae 01       	movw	r20, r28
    3ec6:	4f 5d       	subi	r20, 0xDF	; 223
    3ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    3eca:	6b e7       	ldi	r22, 0x7B	; 123
    3ecc:	7f e0       	ldi	r23, 0x0F	; 15
    3ece:	8b e0       	ldi	r24, 0x0B	; 11
    3ed0:	95 e0       	ldi	r25, 0x05	; 5
    3ed2:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
		pos3 = size.x;
    3ed6:	c9 a0       	ldd	r12, Y+33	; 0x21
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    3ed8:	ae 01       	movw	r20, r28
    3eda:	4f 5d       	subi	r20, 0xDF	; 223
    3edc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ede:	6b e7       	ldi	r22, 0x7B	; 123
    3ee0:	7f e0       	ldi	r23, 0x0F	; 15
    3ee2:	8d e0       	ldi	r24, 0x0D	; 13
    3ee4:	95 e0       	ldi	r25, 0x05	; 5
    3ee6:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
		pos2 = size.x;
    3eea:	89 a1       	ldd	r24, Y+33	; 0x21
    3eec:	8d a3       	std	Y+37, r24	; 0x25
    3eee:	dd 24       	eor	r13, r13
    3ef0:	c7 fc       	sbrc	r12, 7
    3ef2:	d0 94       	com	r13

		if (utemp >= 10)
    3ef4:	0a 30       	cpi	r16, 0x0A	; 10
    3ef6:	11 05       	cpc	r17, r1
    3ef8:	40 f0       	brcs	.+16     	; 0x3f0a <Display_in_out+0x688>
    3efa:	4a e0       	ldi	r20, 0x0A	; 10
    3efc:	65 ea       	ldi	r22, 0xA5	; 165
    3efe:	75 e0       	ldi	r23, 0x05	; 5
    3f00:	c8 01       	movw	r24, r16
    3f02:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(utemp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    3f06:	a7 01       	movw	r20, r14
    3f08:	17 c0       	rjmp	.+46     	; 0x3f38 <Display_in_out+0x6b6>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    3f0a:	a7 01       	movw	r20, r14
    3f0c:	4c 0d       	add	r20, r12
    3f0e:	5d 1d       	adc	r21, r13
    3f10:	25 e3       	ldi	r18, 0x35	; 53
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	6b e7       	ldi	r22, 0x7B	; 123
    3f16:	7f e0       	ldi	r23, 0x0F	; 15
    3f18:	8d e0       	ldi	r24, 0x0D	; 13
    3f1a:	91 e0       	ldi	r25, 0x01	; 1
    3f1c:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
    3f20:	4a e0       	ldi	r20, 0x0A	; 10
    3f22:	65 ea       	ldi	r22, 0xA5	; 165
    3f24:	75 e0       	ldi	r23, 0x05	; 5
    3f26:	c8 01       	movw	r24, r16
    3f28:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
			mugui_lcd_puts(itoa(utemp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    3f2c:	a7 01       	movw	r20, r14
    3f2e:	ed a1       	ldd	r30, Y+37	; 0x25
    3f30:	4e 0f       	add	r20, r30
    3f32:	51 1d       	adc	r21, r1
    3f34:	e7 fd       	sbrc	r30, 7
    3f36:	5a 95       	dec	r21
    3f38:	4c 0d       	add	r20, r12
    3f3a:	5d 1d       	adc	r21, r13
    3f3c:	25 e3       	ldi	r18, 0x35	; 53
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	6b e7       	ldi	r22, 0x7B	; 123
    3f42:	7f e0       	ldi	r23, 0x0F	; 15
    3f44:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		}

		// mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,104,53);		

		// Update buffer
		write_buffer(buffer);
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	91 e0       	ldi	r25, 0x01	; 1
    3f4c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
		clear_buffer(buffer);
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	91 e0       	ldi	r25, 0x01	; 1
    3f54:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
    3f58:	c0 cc       	rjmp	.-1664   	; 0x38da <Display_in_out+0x58>
	}
}
    3f5a:	a5 96       	adiw	r28, 0x25	; 37
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	f8 94       	cli
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	cd bf       	out	0x3d, r28	; 61
    3f66:	df 91       	pop	r29
    3f68:	cf 91       	pop	r28
    3f6a:	1f 91       	pop	r17
    3f6c:	0f 91       	pop	r16
    3f6e:	ff 90       	pop	r15
    3f70:	ef 90       	pop	r14
    3f72:	df 90       	pop	r13
    3f74:	cf 90       	pop	r12
    3f76:	bf 90       	pop	r11
    3f78:	af 90       	pop	r10
    3f7a:	9f 90       	pop	r9
    3f7c:	8f 90       	pop	r8
    3f7e:	7f 90       	pop	r7
    3f80:	6f 90       	pop	r6
    3f82:	5f 90       	pop	r5
    3f84:	4f 90       	pop	r4
    3f86:	3f 90       	pop	r3
    3f88:	2f 90       	pop	r2
    3f8a:	08 95       	ret

00003f8c <menu_log>:
	// Save log and log pointer
	Save_Config_to_EEPROM();
}

void menu_log(void)
{
    3f8c:	af 92       	push	r10
    3f8e:	bf 92       	push	r11
    3f90:	cf 92       	push	r12
    3f92:	df 92       	push	r13
    3f94:	ef 92       	push	r14
    3f96:	ff 92       	push	r15
    3f98:	0f 93       	push	r16
    3f9a:	1f 93       	push	r17
    3f9c:	cf 93       	push	r28
    3f9e:	df 93       	push	r29
	int8_t	log_start = 0;
    3fa0:	b1 2c       	mov	r11, r1
	while(BUTTON1 != 0)
	{
		if (BUTTON4 == 0)
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    3fa2:	97 e0       	ldi	r25, 0x07	; 7
    3fa4:	c9 2e       	mov	r12, r25
    3fa6:	98 e0       	ldi	r25, 0x08	; 8
    3fa8:	d9 2e       	mov	r13, r25
    3faa:	24 e1       	ldi	r18, 0x14	; 20
    3fac:	a2 2e       	mov	r10, r18

void menu_log(void)
{
	int8_t	log_start = 0;
	
	while(BUTTON1 != 0)
    3fae:	1f 9b       	sbis	0x03, 7	; 3
    3fb0:	4d c0       	rjmp	.+154    	; 0x404c <menu_log+0xc0>
	{
		if (BUTTON4 == 0)
    3fb2:	1c 99       	sbic	0x03, 4	; 3
    3fb4:	09 c0       	rjmp	.+18     	; 0x3fc8 <menu_log+0x3c>
		{
			// Erase log
			memset(&Config.Log[0],0,LOGLENGTH);
    3fb6:	f6 01       	movw	r30, r12
    3fb8:	2a 2d       	mov	r18, r10
    3fba:	11 92       	st	Z+, r1
    3fbc:	2a 95       	dec	r18
    3fbe:	e9 f7       	brne	.-6      	; 0x3fba <menu_log+0x2e>
			Config.log_pointer = 0;
    3fc0:	10 92 06 08 	sts	0x0806, r1

			// Save log and log pointer
			Save_Config_to_EEPROM();			
    3fc4:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
		}
		
		if (BUTTON2 == 0)
    3fc8:	1e 99       	sbic	0x03, 6	; 3
    3fca:	03 c0       	rjmp	.+6      	; 0x3fd2 <menu_log+0x46>
		{
			log_start--;
    3fcc:	ba 94       	dec	r11
    3fce:	b7 fc       	sbrc	r11, 7
    3fd0:	b1 2c       	mov	r11, r1
			{
				log_start = 0;
			}
		}

		if (BUTTON3 == 0)
    3fd2:	1d 99       	sbic	0x03, 5	; 3
    3fd4:	06 c0       	rjmp	.+12     	; 0x3fe2 <menu_log+0x56>
		{
			log_start++;
    3fd6:	b3 94       	inc	r11
			
			if (log_start >= (LOGLENGTH - 5))
    3fd8:	8e e0       	ldi	r24, 0x0E	; 14
    3fda:	8b 15       	cp	r24, r11
    3fdc:	14 f4       	brge	.+4      	; 0x3fe2 <menu_log+0x56>
			{
				log_start = 15;
    3fde:	8f e0       	ldi	r24, 0x0F	; 15
    3fe0:	b8 2e       	mov	r11, r24
    3fe2:	00 e0       	ldi	r16, 0x00	; 0
    3fe4:	10 e0       	ldi	r17, 0x00	; 0
    3fe6:	c0 e0       	ldi	r28, 0x00	; 0
    3fe8:	d0 e0       	ldi	r29, 0x00	; 0
    3fea:	eb 2c       	mov	r14, r11
    3fec:	ff 24       	eor	r15, r15
    3fee:	e7 fc       	sbrc	r14, 7
    3ff0:	f0 94       	com	r15
    3ff2:	f7 01       	movw	r30, r14
    3ff4:	e8 5e       	subi	r30, 0xE8	; 232
    3ff6:	f9 4f       	sbci	r31, 0xF9	; 249
    3ff8:	7f 01       	movw	r14, r30
    3ffa:	f7 01       	movw	r30, r14
    3ffc:	ec 0f       	add	r30, r28
    3ffe:	fd 1f       	adc	r31, r29
    4000:	e1 51       	subi	r30, 0x11	; 17
    4002:	fe 4f       	sbci	r31, 0xFE	; 254
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
    4004:	80 81       	ld	r24, Z
    4006:	99 27       	eor	r25, r25
    4008:	87 fd       	sbrc	r24, 7
    400a:	90 95       	com	r25
    400c:	98 01       	movw	r18, r16
    400e:	40 e0       	ldi	r20, 0x00	; 0
    4010:	50 e0       	ldi	r21, 0x00	; 0
    4012:	6b e7       	ldi	r22, 0x7B	; 123
    4014:	7f e0       	ldi	r23, 0x0F	; 15
    4016:	85 5e       	subi	r24, 0xE5	; 229
    4018:	9e 4f       	sbci	r25, 0xFE	; 254
    401a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
    401e:	21 96       	adiw	r28, 0x01	; 1
    4020:	06 5f       	subi	r16, 0xF6	; 246
    4022:	1f 4f       	sbci	r17, 0xFF	; 255
				log_start = 15;
			}
		}

		// Print each line
		for (uint8_t i = 0; i < 5; i++)
    4024:	c5 30       	cpi	r28, 0x05	; 5
    4026:	d1 05       	cpc	r29, r1
    4028:	41 f7       	brne	.-48     	; 0x3ffa <menu_log+0x6e>
		{
			LCD_Display_Text(283 + Config.Log[log_start + i],(const unsigned char*)Verdana8,0,(i * 10)); // Throttle
		}

		print_menu_frame(LOG);
    402a:	83 e0       	ldi	r24, 0x03	; 3
    402c:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <print_menu_frame>
		clear_buffer(buffer);
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	91 e0       	ldi	r25, 0x01	; 1
    4034:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
    4038:	ff e7       	ldi	r31, 0x7F	; 127
    403a:	2a e1       	ldi	r18, 0x1A	; 26
    403c:	86 e0       	ldi	r24, 0x06	; 6
    403e:	f1 50       	subi	r31, 0x01	; 1
    4040:	20 40       	sbci	r18, 0x00	; 0
    4042:	80 40       	sbci	r24, 0x00	; 0
    4044:	e1 f7       	brne	.-8      	; 0x403e <menu_log+0xb2>
    4046:	00 c0       	rjmp	.+0      	; 0x4048 <menu_log+0xbc>
    4048:	00 00       	nop
    404a:	b1 cf       	rjmp	.-158    	; 0x3fae <menu_log+0x22>
		
		_delay_ms(100);
	}
}
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	1f 91       	pop	r17
    4052:	0f 91       	pop	r16
    4054:	ff 90       	pop	r15
    4056:	ef 90       	pop	r14
    4058:	df 90       	pop	r13
    405a:	cf 90       	pop	r12
    405c:	bf 90       	pop	r11
    405e:	af 90       	pop	r10
    4060:	08 95       	ret

00004062 <Display_rcinput>:
	int16_t itemp1 = 0;
	int16_t value = 0;
#endif	
	
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
    4062:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <init_int>

	// Just normal RX display
	while(BUTTON1 != 0)
    4066:	1f 9b       	sbis	0x03, 7	; 3
    4068:	fa c0       	rjmp	.+500    	; 0x425e <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    406a:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    406c:	0e 94 51 67 	call	0xcea2	; 0xcea2 <CenterSticks>
		}

		RxGetChannels();
    4070:	0e 94 bc 66 	call	0xcd78	; 0xcd78 <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e0       	ldi	r20, 0x00	; 0
    407a:	50 e0       	ldi	r21, 0x00	; 0
    407c:	6b e7       	ldi	r22, 0x7B	; 123
    407e:	7f e0       	ldi	r23, 0x0F	; 15
    4080:	82 e7       	ldi	r24, 0x72	; 114
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    4088:	2a e0       	ldi	r18, 0x0A	; 10
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	40 e0       	ldi	r20, 0x00	; 0
    408e:	50 e0       	ldi	r21, 0x00	; 0
    4090:	6b e7       	ldi	r22, 0x7B	; 123
    4092:	7f e0       	ldi	r23, 0x0F	; 15
    4094:	80 e2       	ldi	r24, 0x20	; 32
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    409c:	24 e1       	ldi	r18, 0x14	; 20
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 e0       	ldi	r20, 0x00	; 0
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	6b e7       	ldi	r22, 0x7B	; 123
    40a6:	7f e0       	ldi	r23, 0x0F	; 15
    40a8:	83 e7       	ldi	r24, 0x73	; 115
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    40b0:	2e e1       	ldi	r18, 0x1E	; 30
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	40 e0       	ldi	r20, 0x00	; 0
    40b6:	50 e0       	ldi	r21, 0x00	; 0
    40b8:	6b e7       	ldi	r22, 0x7B	; 123
    40ba:	7f e0       	ldi	r23, 0x0F	; 15
    40bc:	83 e2       	ldi	r24, 0x23	; 35
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	46 e4       	ldi	r20, 0x46	; 70
    40ca:	50 e0       	ldi	r21, 0x00	; 0
    40cc:	6b e7       	ldi	r22, 0x7B	; 123
    40ce:	7f e0       	ldi	r23, 0x0F	; 15
    40d0:	8d e6       	ldi	r24, 0x6D	; 109
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    40d8:	2a e0       	ldi	r18, 0x0A	; 10
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	46 e4       	ldi	r20, 0x46	; 70
    40de:	50 e0       	ldi	r21, 0x00	; 0
    40e0:	6b e7       	ldi	r22, 0x7B	; 123
    40e2:	7f e0       	ldi	r23, 0x0F	; 15
    40e4:	8e e6       	ldi	r24, 0x6E	; 110
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    40ec:	24 e1       	ldi	r18, 0x14	; 20
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	46 e4       	ldi	r20, 0x46	; 70
    40f2:	50 e0       	ldi	r21, 0x00	; 0
    40f4:	6b e7       	ldi	r22, 0x7B	; 123
    40f6:	7f e0       	ldi	r23, 0x0F	; 15
    40f8:	8f e6       	ldi	r24, 0x6F	; 111
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    4100:	2e e1       	ldi	r18, 0x1E	; 30
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	46 e4       	ldi	r20, 0x46	; 70
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	6b e7       	ldi	r22, 0x7B	; 123
    410a:	7f e0       	ldi	r23, 0x0F	; 15
    410c:	80 e7       	ldi	r24, 0x70	; 112
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    4114:	80 91 42 09 	lds	r24, 0x0942
    4118:	90 91 43 09 	lds	r25, 0x0943
    411c:	4a e0       	ldi	r20, 0x0A	; 10
    411e:	65 ea       	ldi	r22, 0xA5	; 165
    4120:	75 e0       	ldi	r23, 0x05	; 5
    4122:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	45 e2       	ldi	r20, 0x25	; 37
    412c:	50 e0       	ldi	r21, 0x00	; 0
    412e:	6b e7       	ldi	r22, 0x7B	; 123
    4130:	7f e0       	ldi	r23, 0x0F	; 15
    4132:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    4136:	80 91 46 09 	lds	r24, 0x0946
    413a:	90 91 47 09 	lds	r25, 0x0947
    413e:	4a e0       	ldi	r20, 0x0A	; 10
    4140:	65 ea       	ldi	r22, 0xA5	; 165
    4142:	75 e0       	ldi	r23, 0x05	; 5
    4144:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    4148:	2a e0       	ldi	r18, 0x0A	; 10
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	45 e2       	ldi	r20, 0x25	; 37
    414e:	50 e0       	ldi	r21, 0x00	; 0
    4150:	6b e7       	ldi	r22, 0x7B	; 123
    4152:	7f e0       	ldi	r23, 0x0F	; 15
    4154:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    4158:	80 91 48 09 	lds	r24, 0x0948
    415c:	90 91 49 09 	lds	r25, 0x0949
    4160:	4a e0       	ldi	r20, 0x0A	; 10
    4162:	65 ea       	ldi	r22, 0xA5	; 165
    4164:	75 e0       	ldi	r23, 0x05	; 5
    4166:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    416a:	24 e1       	ldi	r18, 0x14	; 20
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	45 e2       	ldi	r20, 0x25	; 37
    4170:	50 e0       	ldi	r21, 0x00	; 0
    4172:	6b e7       	ldi	r22, 0x7B	; 123
    4174:	7f e0       	ldi	r23, 0x0F	; 15
    4176:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    417a:	80 91 4a 09 	lds	r24, 0x094A
    417e:	90 91 4b 09 	lds	r25, 0x094B
    4182:	4a e0       	ldi	r20, 0x0A	; 10
    4184:	65 ea       	ldi	r22, 0xA5	; 165
    4186:	75 e0       	ldi	r23, 0x05	; 5
    4188:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    418c:	2e e1       	ldi	r18, 0x1E	; 30
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	45 e2       	ldi	r20, 0x25	; 37
    4192:	50 e0       	ldi	r21, 0x00	; 0
    4194:	6b e7       	ldi	r22, 0x7B	; 123
    4196:	7f e0       	ldi	r23, 0x0F	; 15
    4198:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    419c:	80 91 4c 09 	lds	r24, 0x094C
    41a0:	90 91 4d 09 	lds	r25, 0x094D
    41a4:	4a e0       	ldi	r20, 0x0A	; 10
    41a6:	65 ea       	ldi	r22, 0xA5	; 165
    41a8:	75 e0       	ldi	r23, 0x05	; 5
    41aa:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	44 e6       	ldi	r20, 0x64	; 100
    41b4:	50 e0       	ldi	r21, 0x00	; 0
    41b6:	6b e7       	ldi	r22, 0x7B	; 123
    41b8:	7f e0       	ldi	r23, 0x0F	; 15
    41ba:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    41be:	80 91 4e 09 	lds	r24, 0x094E
    41c2:	90 91 4f 09 	lds	r25, 0x094F
    41c6:	4a e0       	ldi	r20, 0x0A	; 10
    41c8:	65 ea       	ldi	r22, 0xA5	; 165
    41ca:	75 e0       	ldi	r23, 0x05	; 5
    41cc:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    41d0:	2a e0       	ldi	r18, 0x0A	; 10
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	44 e6       	ldi	r20, 0x64	; 100
    41d6:	50 e0       	ldi	r21, 0x00	; 0
    41d8:	6b e7       	ldi	r22, 0x7B	; 123
    41da:	7f e0       	ldi	r23, 0x0F	; 15
    41dc:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    41e0:	80 91 50 09 	lds	r24, 0x0950
    41e4:	90 91 51 09 	lds	r25, 0x0951
    41e8:	4a e0       	ldi	r20, 0x0A	; 10
    41ea:	65 ea       	ldi	r22, 0xA5	; 165
    41ec:	75 e0       	ldi	r23, 0x05	; 5
    41ee:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    41f2:	24 e1       	ldi	r18, 0x14	; 20
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	44 e6       	ldi	r20, 0x64	; 100
    41f8:	50 e0       	ldi	r21, 0x00	; 0
    41fa:	6b e7       	ldi	r22, 0x7B	; 123
    41fc:	7f e0       	ldi	r23, 0x0F	; 15
    41fe:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    4202:	80 91 52 09 	lds	r24, 0x0952
    4206:	90 91 53 09 	lds	r25, 0x0953
    420a:	4a e0       	ldi	r20, 0x0A	; 10
    420c:	65 ea       	ldi	r22, 0xA5	; 165
    420e:	75 e0       	ldi	r23, 0x05	; 5
    4210:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    4214:	2e e1       	ldi	r18, 0x1E	; 30
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	44 e6       	ldi	r20, 0x64	; 100
    421a:	50 e0       	ldi	r21, 0x00	; 0
    421c:	6b e7       	ldi	r22, 0x7B	; 123
    421e:	7f e0       	ldi	r23, 0x0F	; 15
    4220:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		//itemp = Process_curve(GEN_CURVE_C, BIPOLAR, RCinputs[GEAR]);
		mugui_lcd_puts(itoa(itemp1,pBuffer,10),(const unsigned char*)Verdana8,100,40);
		mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana8,37,40);
#endif
		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    4224:	29 e3       	ldi	r18, 0x39	; 57
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	40 e0       	ldi	r20, 0x00	; 0
    422a:	50 e0       	ldi	r21, 0x00	; 0
    422c:	6d ee       	ldi	r22, 0xED	; 237
    422e:	71 e0       	ldi	r23, 0x01	; 1
    4230:	8c e0       	ldi	r24, 0x0C	; 12
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    4238:	27 e3       	ldi	r18, 0x37	; 55
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	4e e6       	ldi	r20, 0x6E	; 110
    423e:	50 e0       	ldi	r21, 0x00	; 0
    4240:	6b e7       	ldi	r22, 0x7B	; 123
    4242:	7f e0       	ldi	r23, 0x0F	; 15
    4244:	8c e3       	ldi	r24, 0x3C	; 60
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	91 e0       	ldi	r25, 0x01	; 1
    4250:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
		clear_buffer(buffer);
    4254:	80 e0       	ldi	r24, 0x00	; 0
    4256:	91 e0       	ldi	r25, 0x01	; 1
    4258:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
    425c:	04 cf       	rjmp	.-504    	; 0x4066 <Display_rcinput+0x4>
	}
}
    425e:	08 95       	ret

00004260 <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    4260:	ff 92       	push	r15
    4262:	0f 93       	push	r16
    4264:	1f 93       	push	r17
    4266:	cf 93       	push	r28
    4268:	df 93       	push	r29
	bool	first_time = true;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint32_t interval = 0;			// IMU interval	
	
	clear_buffer(buffer);
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	91 e0       	ldi	r25, 0x01	; 1
    426e:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    4272:	ff 24       	eor	r15, r15
    4274:	f3 94       	inc	r15
		mugui_lcd_puts(itoa(gyroADCalt[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
		mugui_lcd_puts(itoa(gyroADCalt[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,75,13);
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,75,23);
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,75,33);
		mugui_lcd_puts(itoa(angle[ROLL]/100,pBuffer,10),(const unsigned char*)Verdana8,107,13);
    4276:	c4 e6       	ldi	r28, 0x64	; 100
    4278:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t interval = 0;			// IMU interval	
	
	clear_buffer(buffer);
	
	// While BACK not pressed
	while(BUTTON1 != 0)
    427a:	1f 9b       	sbis	0x03, 7	; 3
    427c:	6e c1       	rjmp	.+732    	; 0x455a <Display_sensors+0x2fa>
	{
		RxGetChannels();						// Check state of transition switch
    427e:	0e 94 bc 66 	call	0xcd78	; 0xcd78 <RxGetChannels>
		UpdateTransition();						// Update the transition variable
    4282:	0e 94 a6 67 	call	0xcf4c	; 0xcf4c <UpdateTransition>

		ReadGyros();
    4286:	0e 94 2a 38 	call	0x7054	; 0x7054 <ReadGyros>
		ReadAcc();
    428a:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    428e:	0e 94 8d 42 	call	0x851a	; 0x851a <TIM16_ReadTCNT1>

		// Reset Timer0 count
		TCNT0 = 0;
    4292:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    4294:	20 91 2e 05 	lds	r18, 0x052E
    4298:	30 91 2f 05 	lds	r19, 0x052F
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    429c:	20 91 2e 05 	lds	r18, 0x052E
    42a0:	30 91 2f 05 	lds	r19, 0x052F
    42a4:	8c 01       	movw	r16, r24
    42a6:	02 1b       	sub	r16, r18
    42a8:	13 0b       	sbc	r17, r19
		}
		
		interval = ticker_16; // uint16_t
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    42aa:	90 93 2f 05 	sts	0x052F, r25
    42ae:	80 93 2e 05 	sts	0x052E, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    42b2:	80 91 ca 08 	lds	r24, 0x08CA
    42b6:	90 91 cb 08 	lds	r25, 0x08CB
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	02 97       	sbiw	r24, 0x02	; 2
    42c0:	18 f4       	brcc	.+6      	; 0x42c8 <Display_sensors+0x68>
		{
			interval = ticker_16; // uint16_t
    42c2:	c9 01       	movw	r24, r18
    42c4:	b8 01       	movw	r22, r16
    42c6:	11 c0       	rjmp	.+34     	; 0x42ea <Display_sensors+0x8a>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    42c8:	60 91 ca 08 	lds	r22, 0x08CA
    42cc:	70 91 cb 08 	lds	r23, 0x08CB
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	4f e0       	ldi	r20, 0x0F	; 15
    42d6:	66 0f       	add	r22, r22
    42d8:	77 1f       	adc	r23, r23
    42da:	88 1f       	adc	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	4a 95       	dec	r20
    42e0:	d1 f7       	brne	.-12     	; 0x42d6 <Display_sensors+0x76>
    42e2:	60 0f       	add	r22, r16
    42e4:	71 1f       	adc	r23, r17
    42e6:	82 1f       	adc	r24, r18
    42e8:	93 1f       	adc	r25, r19
		}

		TMR0_counter = 0;
    42ea:	10 92 cb 08 	sts	0x08CB, r1
    42ee:	10 92 ca 08 	sts	0x08CA, r1
		
		// Refresh accSmooth values and AccVert
		imu_update(interval);
    42f2:	0e 94 17 3d 	call	0x7a2e	; 0x7a2e <imu_update>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	45 e2       	ldi	r20, 0x25	; 37
    42fc:	50 e0       	ldi	r21, 0x00	; 0
    42fe:	6b e7       	ldi	r22, 0x7B	; 123
    4300:	7f e0       	ldi	r23, 0x0F	; 15
    4302:	8a e1       	ldi	r24, 0x1A	; 26
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,72,0); 	// Acc
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	48 e4       	ldi	r20, 0x48	; 72
    4310:	50 e0       	ldi	r21, 0x00	; 0
    4312:	6b e7       	ldi	r22, 0x7B	; 123
    4314:	7f e0       	ldi	r23, 0x0F	; 15
    4316:	8e e1       	ldi	r24, 0x1E	; 30
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(31,(const unsigned char*)Verdana8,107,0); 	// IMU
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	4b e6       	ldi	r20, 0x6B	; 107
    4324:	50 e0       	ldi	r21, 0x00	; 0
    4326:	6b e7       	ldi	r22, 0x7B	; 123
    4328:	7f e0       	ldi	r23, 0x0F	; 15
    432a:	8f e1       	ldi	r24, 0x1F	; 31
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    4332:	2d e0       	ldi	r18, 0x0D	; 13
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	45 e0       	ldi	r20, 0x05	; 5
    4338:	50 e0       	ldi	r21, 0x00	; 0
    433a:	6b e7       	ldi	r22, 0x7B	; 123
    433c:	7f e0       	ldi	r23, 0x0F	; 15
    433e:	8b e1       	ldi	r24, 0x1B	; 27
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    4346:	27 e1       	ldi	r18, 0x17	; 23
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	45 e0       	ldi	r20, 0x05	; 5
    434c:	50 e0       	ldi	r21, 0x00	; 0
    434e:	6b e7       	ldi	r22, 0x7B	; 123
    4350:	7f e0       	ldi	r23, 0x0F	; 15
    4352:	8c e1       	ldi	r24, 0x1C	; 28
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    435a:	21 e2       	ldi	r18, 0x21	; 33
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	45 e0       	ldi	r20, 0x05	; 5
    4360:	50 e0       	ldi	r21, 0x00	; 0
    4362:	6b e7       	ldi	r22, 0x7B	; 123
    4364:	7f e0       	ldi	r23, 0x0F	; 15
    4366:	8d e1       	ldi	r24, 0x1D	; 29
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
    436e:	4a e0       	ldi	r20, 0x0A	; 10
    4370:	65 ea       	ldi	r22, 0xA5	; 165
    4372:	75 e0       	ldi	r23, 0x05	; 5
    4374:	80 91 d0 05 	lds	r24, 0x05D0
    4378:	90 91 d1 05 	lds	r25, 0x05D1
    437c:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADCalt[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    4380:	2d e0       	ldi	r18, 0x0D	; 13
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	48 e2       	ldi	r20, 0x28	; 40
    4386:	50 e0       	ldi	r21, 0x00	; 0
    4388:	6b e7       	ldi	r22, 0x7B	; 123
    438a:	7f e0       	ldi	r23, 0x0F	; 15
    438c:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    4390:	4a e0       	ldi	r20, 0x0A	; 10
    4392:	65 ea       	ldi	r22, 0xA5	; 165
    4394:	75 e0       	ldi	r23, 0x05	; 5
    4396:	80 91 d2 05 	lds	r24, 0x05D2
    439a:	90 91 d3 05 	lds	r25, 0x05D3
    439e:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADCalt[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    43a2:	27 e1       	ldi	r18, 0x17	; 23
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	48 e2       	ldi	r20, 0x28	; 40
    43a8:	50 e0       	ldi	r21, 0x00	; 0
    43aa:	6b e7       	ldi	r22, 0x7B	; 123
    43ac:	7f e0       	ldi	r23, 0x0F	; 15
    43ae:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    43b2:	4a e0       	ldi	r20, 0x0A	; 10
    43b4:	65 ea       	ldi	r22, 0xA5	; 165
    43b6:	75 e0       	ldi	r23, 0x05	; 5
    43b8:	80 91 d4 05 	lds	r24, 0x05D4
    43bc:	90 91 d5 05 	lds	r25, 0x05D5
    43c0:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADCalt[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    43c4:	21 e2       	ldi	r18, 0x21	; 33
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	48 e2       	ldi	r20, 0x28	; 40
    43ca:	50 e0       	ldi	r21, 0x00	; 0
    43cc:	6b e7       	ldi	r22, 0x7B	; 123
    43ce:	7f e0       	ldi	r23, 0x0F	; 15
    43d0:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    43d4:	4a e0       	ldi	r20, 0x0A	; 10
    43d6:	65 ea       	ldi	r22, 0xA5	; 165
    43d8:	75 e0       	ldi	r23, 0x05	; 5
    43da:	80 91 73 05 	lds	r24, 0x0573
    43de:	90 91 74 05 	lds	r25, 0x0574
    43e2:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,75,13);
    43e6:	2d e0       	ldi	r18, 0x0D	; 13
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	4b e4       	ldi	r20, 0x4B	; 75
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	6b e7       	ldi	r22, 0x7B	; 123
    43f0:	7f e0       	ldi	r23, 0x0F	; 15
    43f2:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    43f6:	4a e0       	ldi	r20, 0x0A	; 10
    43f8:	65 ea       	ldi	r22, 0xA5	; 165
    43fa:	75 e0       	ldi	r23, 0x05	; 5
    43fc:	80 91 75 05 	lds	r24, 0x0575
    4400:	90 91 76 05 	lds	r25, 0x0576
    4404:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,75,23);
    4408:	27 e1       	ldi	r18, 0x17	; 23
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	4b e4       	ldi	r20, 0x4B	; 75
    440e:	50 e0       	ldi	r21, 0x00	; 0
    4410:	6b e7       	ldi	r22, 0x7B	; 123
    4412:	7f e0       	ldi	r23, 0x0F	; 15
    4414:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    4418:	4a e0       	ldi	r20, 0x0A	; 10
    441a:	65 ea       	ldi	r22, 0xA5	; 165
    441c:	75 e0       	ldi	r23, 0x05	; 5
    441e:	80 91 77 05 	lds	r24, 0x0577
    4422:	90 91 78 05 	lds	r25, 0x0578
    4426:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,75,33);
    442a:	21 e2       	ldi	r18, 0x21	; 33
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	4b e4       	ldi	r20, 0x4B	; 75
    4430:	50 e0       	ldi	r21, 0x00	; 0
    4432:	6b e7       	ldi	r22, 0x7B	; 123
    4434:	7f e0       	ldi	r23, 0x0F	; 15
    4436:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(angle[ROLL]/100,pBuffer,10),(const unsigned char*)Verdana8,107,13);
    443a:	80 91 f8 05 	lds	r24, 0x05F8
    443e:	90 91 f9 05 	lds	r25, 0x05F9
    4442:	be 01       	movw	r22, r28
    4444:	0e 94 3a 6c 	call	0xd874	; 0xd874 <__divmodhi4>
    4448:	cb 01       	movw	r24, r22
    444a:	4a e0       	ldi	r20, 0x0A	; 10
    444c:	65 ea       	ldi	r22, 0xA5	; 165
    444e:	75 e0       	ldi	r23, 0x05	; 5
    4450:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    4454:	2d e0       	ldi	r18, 0x0D	; 13
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	4b e6       	ldi	r20, 0x6B	; 107
    445a:	50 e0       	ldi	r21, 0x00	; 0
    445c:	6b e7       	ldi	r22, 0x7B	; 123
    445e:	7f e0       	ldi	r23, 0x0F	; 15
    4460:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(angle[PITCH]/100,pBuffer,10),(const unsigned char*)Verdana8,107,23);
    4464:	80 91 fa 05 	lds	r24, 0x05FA
    4468:	90 91 fb 05 	lds	r25, 0x05FB
    446c:	be 01       	movw	r22, r28
    446e:	0e 94 3a 6c 	call	0xd874	; 0xd874 <__divmodhi4>
    4472:	cb 01       	movw	r24, r22
    4474:	4a e0       	ldi	r20, 0x0A	; 10
    4476:	65 ea       	ldi	r22, 0xA5	; 165
    4478:	75 e0       	ldi	r23, 0x05	; 5
    447a:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    447e:	27 e1       	ldi	r18, 0x17	; 23
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	4b e6       	ldi	r20, 0x6B	; 107
    4484:	50 e0       	ldi	r21, 0x00	; 0
    4486:	6b e7       	ldi	r22, 0x7B	; 123
    4488:	7f e0       	ldi	r23, 0x0F	; 15
    448a:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(Config.AccZeroInvZ_P2,pBuffer,10),(const unsigned char*)Verdana8,105,33);
		mugui_lcd_puts(itoa(Config.AccZeroDiff_P2,pBuffer,10),(const unsigned char*)Verdana8,105,43);
		*/
		
		// AccVert
		LCD_Display_Text(229,(const unsigned char*)Verdana8,5,45);	// AccVert
    448e:	2d e2       	ldi	r18, 0x2D	; 45
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	45 e0       	ldi	r20, 0x05	; 5
    4494:	50 e0       	ldi	r21, 0x00	; 0
    4496:	6b e7       	ldi	r22, 0x7B	; 123
    4498:	7f e0       	ldi	r23, 0x0F	; 15
    449a:	85 ee       	ldi	r24, 0xE5	; 229
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
    44a2:	4a e0       	ldi	r20, 0x0A	; 10
    44a4:	65 ea       	ldi	r22, 0xA5	; 165
    44a6:	75 e0       	ldi	r23, 0x05	; 5
    44a8:	80 91 26 05 	lds	r24, 0x0526
    44ac:	90 91 27 05 	lds	r25, 0x0527
    44b0:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accVert,pBuffer,10),(const unsigned char*)Verdana8,60,45);
    44b4:	2d e2       	ldi	r18, 0x2D	; 45
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	4c e3       	ldi	r20, 0x3C	; 60
    44ba:	50 e0       	ldi	r21, 0x00	; 0
    44bc:	6b e7       	ldi	r22, 0x7B	; 123
    44be:	7f e0       	ldi	r23, 0x0F	; 15
    44c0:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    44c4:	29 e3       	ldi	r18, 0x39	; 57
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	50 e0       	ldi	r21, 0x00	; 0
    44cc:	6d ee       	ldi	r22, 0xED	; 237
    44ce:	71 e0       	ldi	r23, 0x01	; 1
    44d0:	8c e0       	ldi	r24, 0x0C	; 12
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    44d8:	27 e3       	ldi	r18, 0x37	; 55
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	4c e6       	ldi	r20, 0x6C	; 108
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	6b e7       	ldi	r22, 0x7B	; 123
    44e2:	7f e0       	ldi	r23, 0x0F	; 15
    44e4:	8c e3       	ldi	r24, 0x3C	; 60
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    44ec:	27 e3       	ldi	r18, 0x37	; 55
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	4b e4       	ldi	r20, 0x4B	; 75
    44f2:	50 e0       	ldi	r21, 0x00	; 0
    44f4:	6b e7       	ldi	r22, 0x7B	; 123
    44f6:	7f e0       	ldi	r23, 0x0F	; 15
    44f8:	89 e1       	ldi	r24, 0x19	; 25
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	91 e0       	ldi	r25, 0x01	; 1
    4504:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
		clear_buffer(buffer);
    4508:	80 e0       	ldi	r24, 0x00	; 0
    450a:	91 e0       	ldi	r25, 0x01	; 1
    450c:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
	
		if (first_time)
    4510:	f1 10       	cpse	r15, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    4512:	0e 94 be 51 	call	0xa37c	; 0xa37c <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    4516:	1c 99       	sbic	0x03, 4	; 3
    4518:	10 c0       	rjmp	.+32     	; 0x453a <Display_sensors+0x2da>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    451a:	0e 94 be 51 	call	0xa37c	; 0xa37c <Wait_BUTTON4>
    451e:	2f e3       	ldi	r18, 0x3F	; 63
    4520:	82 e4       	ldi	r24, 0x42	; 66
    4522:	9f e0       	ldi	r25, 0x0F	; 15
    4524:	21 50       	subi	r18, 0x01	; 1
    4526:	80 40       	sbci	r24, 0x00	; 0
    4528:	90 40       	sbci	r25, 0x00	; 0
    452a:	e1 f7       	brne	.-8      	; 0x4524 <Display_sensors+0x2c4>
    452c:	00 c0       	rjmp	.+0      	; 0x452e <Display_sensors+0x2ce>
    452e:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    4530:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	0e 94 be 19 	call	0x337c	; 0x337c <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    453a:	1d 99       	sbic	0x03, 5	; 3
    453c:	0c c0       	rjmp	.+24     	; 0x4556 <Display_sensors+0x2f6>
    453e:	2f e3       	ldi	r18, 0x3F	; 63
    4540:	82 e4       	ldi	r24, 0x42	; 66
    4542:	9f e0       	ldi	r25, 0x0F	; 15
    4544:	21 50       	subi	r18, 0x01	; 1
    4546:	80 40       	sbci	r24, 0x00	; 0
    4548:	90 40       	sbci	r25, 0x00	; 0
    454a:	e1 f7       	brne	.-8      	; 0x4544 <Display_sensors+0x2e4>
    454c:	00 c0       	rjmp	.+0      	; 0x454e <Display_sensors+0x2ee>
    454e:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	0e 94 be 19 	call	0x337c	; 0x337c <CalibrateAcc>
    4556:	f1 2c       	mov	r15, r1
    4558:	90 ce       	rjmp	.-736    	; 0x427a <Display_sensors+0x1a>
		}		
	}
}
    455a:	df 91       	pop	r29
    455c:	cf 91       	pop	r28
    455e:	1f 91       	pop	r17
    4560:	0f 91       	pop	r16
    4562:	ff 90       	pop	r15
    4564:	08 95       	ret

00004566 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    4566:	bf 92       	push	r11
    4568:	cf 92       	push	r12
    456a:	df 92       	push	r13
    456c:	ef 92       	push	r14
    456e:	ff 92       	push	r15
    4570:	0f 93       	push	r16
    4572:	1f 93       	push	r17
    4574:	cf 93       	push	r28
    4576:	df 93       	push	r29
    4578:	00 d0       	rcall	.+0      	; 0x457a <Display_status+0x14>
    457a:	00 d0       	rcall	.+0      	; 0x457c <Display_status+0x16>
    457c:	cd b7       	in	r28, 0x3d	; 61
    457e:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	91 e0       	ldi	r25, 0x01	; 1
    4584:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	40 e0       	ldi	r20, 0x00	; 0
    458e:	50 e0       	ldi	r21, 0x00	; 0
    4590:	6b e7       	ldi	r22, 0x7B	; 123
    4592:	7f e0       	ldi	r23, 0x0F	; 15
    4594:	88 e0       	ldi	r24, 0x08	; 8
    4596:	91 e0       	ldi	r25, 0x01	; 1
    4598:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    459c:	2c e0       	ldi	r18, 0x0C	; 12
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	40 e0       	ldi	r20, 0x00	; 0
    45a2:	50 e0       	ldi	r21, 0x00	; 0
    45a4:	6b e7       	ldi	r22, 0x7B	; 123
    45a6:	7f e0       	ldi	r23, 0x0F	; 15
    45a8:	8a e0       	ldi	r24, 0x0A	; 10
    45aa:	91 e0       	ldi	r25, 0x01	; 1
    45ac:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    45b0:	28 e1       	ldi	r18, 0x18	; 24
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	40 e0       	ldi	r20, 0x00	; 0
    45b6:	50 e0       	ldi	r21, 0x00	; 0
    45b8:	6b e7       	ldi	r22, 0x7B	; 123
    45ba:	7f e0       	ldi	r23, 0x0F	; 15
    45bc:	8b e0       	ldi	r24, 0x0B	; 11
    45be:	91 e0       	ldi	r25, 0x01	; 1
    45c0:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    45c4:	28 e1       	ldi	r18, 0x18	; 24
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	48 e5       	ldi	r20, 0x58	; 88
    45ca:	50 e0       	ldi	r21, 0x00	; 0
    45cc:	6b e7       	ldi	r22, 0x7B	; 123
    45ce:	7f e0       	ldi	r23, 0x0F	; 15
    45d0:	87 e1       	ldi	r24, 0x17	; 23
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    45d8:	2b e3       	ldi	r18, 0x3B	; 59
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	40 e0       	ldi	r20, 0x00	; 0
    45de:	50 e0       	ldi	r21, 0x00	; 0
    45e0:	6d ee       	ldi	r22, 0xED	; 237
    45e2:	71 e0       	ldi	r23, 0x01	; 1
    45e4:	89 e0       	ldi	r24, 0x09	; 9
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    45ec:	27 e3       	ldi	r18, 0x37	; 55
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	4a e0       	ldi	r20, 0x0A	; 10
    45f2:	50 e0       	ldi	r21, 0x00	; 0
    45f4:	6b e7       	ldi	r22, 0x7B	; 123
    45f6:	7f e0       	ldi	r23, 0x0F	; 15
    45f8:	8e e0       	ldi	r24, 0x0E	; 14
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    4600:	40 91 41 06 	lds	r20, 0x0641
    4604:	55 27       	eor	r21, r21
    4606:	47 fd       	sbrc	r20, 7
    4608:	50 95       	com	r21
    460a:	42 5c       	subi	r20, 0xC2	; 194
    460c:	5f 4f       	sbci	r21, 0xFF	; 255
    460e:	0c e0       	ldi	r16, 0x0C	; 12
    4610:	2d e2       	ldi	r18, 0x2D	; 45
    4612:	61 e0       	ldi	r22, 0x01	; 1
    4614:	80 e0       	ldi	r24, 0x00	; 0
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	0e 94 70 48 	call	0x90e0	; 0x90e0 <print_menu_text>
    461c:	4a e0       	ldi	r20, 0x0A	; 10
    461e:	65 ea       	ldi	r22, 0xA5	; 165
    4620:	75 e0       	ldi	r23, 0x05	; 5
    4622:	80 91 37 05 	lds	r24, 0x0537
    4626:	90 91 38 05 	lds	r25, 0x0538
    462a:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    462e:	28 e1       	ldi	r18, 0x18	; 24
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	4e e6       	ldi	r20, 0x6E	; 110
    4634:	50 e0       	ldi	r21, 0x00	; 0
    4636:	6b e7       	ldi	r22, 0x7B	; 123
    4638:	7f e0       	ldi	r23, 0x0F	; 15
    463a:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    463e:	80 91 41 06 	lds	r24, 0x0641
    4642:	81 30       	cpi	r24, 0x01	; 1
    4644:	d9 f4       	brne	.+54     	; 0x467c <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    4646:	2c e0       	ldi	r18, 0x0C	; 12
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	4d e4       	ldi	r20, 0x4D	; 77
    464c:	50 e0       	ldi	r21, 0x00	; 0
    464e:	6b e7       	ldi	r22, 0x7B	; 123
    4650:	7f e0       	ldi	r23, 0x0F	; 15
    4652:	88 e1       	ldi	r24, 0x18	; 24
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    465a:	80 91 30 05 	lds	r24, 0x0530
    465e:	90 91 31 05 	lds	r25, 0x0531
    4662:	4a e0       	ldi	r20, 0x0A	; 10
    4664:	65 ea       	ldi	r22, 0xA5	; 165
    4666:	75 e0       	ldi	r23, 0x05	; 5
    4668:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    466c:	2c e0       	ldi	r18, 0x0C	; 12
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	4e e6       	ldi	r20, 0x6E	; 110
    4672:	50 e0       	ldi	r21, 0x00	; 0
    4674:	6b e7       	ldi	r22, 0x7B	; 123
    4676:	7f e0       	ldi	r23, 0x0F	; 15
    4678:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    467c:	80 91 37 05 	lds	r24, 0x0537
    4680:	90 91 38 05 	lds	r25, 0x0538
    4684:	18 16       	cp	r1, r24
    4686:	19 06       	cpc	r1, r25
    4688:	4c f0       	brlt	.+18     	; 0x469c <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    468a:	28 e1       	ldi	r18, 0x18	; 24
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	4d e2       	ldi	r20, 0x2D	; 45
    4690:	50 e0       	ldi	r21, 0x00	; 0
    4692:	6b e7       	ldi	r22, 0x7B	; 123
    4694:	7f e0       	ldi	r23, 0x0F	; 15
    4696:	80 e3       	ldi	r24, 0x30	; 48
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	31 c0       	rjmp	.+98     	; 0x46fe <Display_status+0x198>
	}
	else if (transition >= 100)
    469c:	84 36       	cpi	r24, 0x64	; 100
    469e:	91 05       	cpc	r25, r1
    46a0:	4c f0       	brlt	.+18     	; 0x46b4 <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    46a2:	28 e1       	ldi	r18, 0x18	; 24
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	4d e2       	ldi	r20, 0x2D	; 45
    46a8:	50 e0       	ldi	r21, 0x00	; 0
    46aa:	6b e7       	ldi	r22, 0x7B	; 123
    46ac:	7f e0       	ldi	r23, 0x0F	; 15
    46ae:	82 e3       	ldi	r24, 0x32	; 50
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	25 c0       	rjmp	.+74     	; 0x46fe <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    46b4:	20 91 49 06 	lds	r18, 0x0649
    46b8:	33 27       	eor	r19, r19
    46ba:	27 fd       	sbrc	r18, 7
    46bc:	30 95       	com	r19
    46be:	82 17       	cp	r24, r18
    46c0:	93 07       	cpc	r25, r19
    46c2:	49 f4       	brne	.+18     	; 0x46d6 <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    46c4:	28 e1       	ldi	r18, 0x18	; 24
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	4d e2       	ldi	r20, 0x2D	; 45
    46ca:	50 e0       	ldi	r21, 0x00	; 0
    46cc:	6b e7       	ldi	r22, 0x7B	; 123
    46ce:	7f e0       	ldi	r23, 0x0F	; 15
    46d0:	81 e3       	ldi	r24, 0x31	; 49
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	14 c0       	rjmp	.+40     	; 0x46fe <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    46d6:	82 17       	cp	r24, r18
    46d8:	93 07       	cpc	r25, r19
    46da:	4c f4       	brge	.+18     	; 0x46ee <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    46dc:	28 e1       	ldi	r18, 0x18	; 24
    46de:	30 e0       	ldi	r19, 0x00	; 0
    46e0:	4d e2       	ldi	r20, 0x2D	; 45
    46e2:	50 e0       	ldi	r21, 0x00	; 0
    46e4:	6b e7       	ldi	r22, 0x7B	; 123
    46e6:	7f e0       	ldi	r23, 0x0F	; 15
    46e8:	83 e3       	ldi	r24, 0x33	; 51
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	08 c0       	rjmp	.+16     	; 0x46fe <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    46ee:	28 e1       	ldi	r18, 0x18	; 24
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	4d e2       	ldi	r20, 0x2D	; 45
    46f4:	50 e0       	ldi	r21, 0x00	; 0
    46f6:	6b e7       	ldi	r22, 0x7B	; 123
    46f8:	7f e0       	ldi	r23, 0x0F	; 15
    46fa:	84 e3       	ldi	r24, 0x34	; 52
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
	}

	// Don't display battery text if there are error messages
	if (General_error == 0)
    4702:	80 91 34 05 	lds	r24, 0x0534
    4706:	81 11       	cpse	r24, r1
    4708:	cc c0       	rjmp	.+408    	; 0x48a2 <Display_status+0x33c>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(289,(const unsigned char*)Verdana8,0,36); 	// Battery
    470a:	24 e2       	ldi	r18, 0x24	; 36
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	40 e0       	ldi	r20, 0x00	; 0
    4710:	50 e0       	ldi	r21, 0x00	; 0
    4712:	6b e7       	ldi	r22, 0x7B	; 123
    4714:	7f e0       	ldi	r23, 0x0F	; 15
    4716:	81 e2       	ldi	r24, 0x21	; 33
    4718:	91 e0       	ldi	r25, 0x01	; 1
    471a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

		vbat_temp = GetVbat();
    471e:	0e 94 ec 69 	call	0xd3d8	; 0xd3d8 <GetVbat>
    4722:	7c 01       	movw	r14, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    4724:	64 e6       	ldi	r22, 0x64	; 100
    4726:	70 e0       	ldi	r23, 0x00	; 0
    4728:	0e 94 26 6c 	call	0xd84c	; 0xd84c <__udivmodhi4>
    472c:	8b 01       	movw	r16, r22
    472e:	4a e0       	ldi	r20, 0x0A	; 10
    4730:	65 ea       	ldi	r22, 0xA5	; 165
    4732:	75 e0       	ldi	r23, 0x05	; 5
    4734:	c8 01       	movw	r24, r16
    4736:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    473a:	ae 01       	movw	r20, r28
    473c:	4f 5f       	subi	r20, 0xFF	; 255
    473e:	5f 4f       	sbci	r21, 0xFF	; 255
    4740:	6b e7       	ldi	r22, 0x7B	; 123
    4742:	7f e0       	ldi	r23, 0x0F	; 15
    4744:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
    4748:	4a e0       	ldi	r20, 0x0A	; 10
    474a:	65 ea       	ldi	r22, 0xA5	; 165
    474c:	75 e0       	ldi	r23, 0x05	; 5
    474e:	c8 01       	movw	r24, r16
    4750:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    4754:	24 e2       	ldi	r18, 0x24	; 36
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	4d e2       	ldi	r20, 0x2D	; 45
    475a:	50 e0       	ldi	r21, 0x00	; 0
    475c:	6b e7       	ldi	r22, 0x7B	; 123
    475e:	7f e0       	ldi	r23, 0x0F	; 15
    4760:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    4764:	2c e9       	ldi	r18, 0x9C	; 156
    4766:	20 03       	mulsu	r18, r16
    4768:	60 01       	movw	r12, r0
    476a:	21 9f       	mul	r18, r17
    476c:	d0 0c       	add	r13, r0
    476e:	11 24       	eor	r1, r1
    4770:	ce 0c       	add	r12, r14
    4772:	df 1c       	adc	r13, r15

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    4774:	e9 80       	ldd	r14, Y+1	; 0x01
    4776:	ff 24       	eor	r15, r15
    4778:	e7 fc       	sbrc	r14, 7
    477a:	f0 94       	com	r15
    477c:	8d e2       	ldi	r24, 0x2D	; 45
    477e:	e8 0e       	add	r14, r24
    4780:	f1 1c       	adc	r15, r1
    4782:	24 e2       	ldi	r18, 0x24	; 36
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	a7 01       	movw	r20, r14
    4788:	6b e7       	ldi	r22, 0x7B	; 123
    478a:	7f e0       	ldi	r23, 0x0F	; 15
    478c:	8c e0       	ldi	r24, 0x0C	; 12
    478e:	91 e0       	ldi	r25, 0x01	; 1
    4790:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    4794:	ae 01       	movw	r20, r28
    4796:	4f 5f       	subi	r20, 0xFF	; 255
    4798:	5f 4f       	sbci	r21, 0xFF	; 255
    479a:	6b e7       	ldi	r22, 0x7B	; 123
    479c:	7f e0       	ldi	r23, 0x0F	; 15
    479e:	8b e0       	ldi	r24, 0x0B	; 11
    47a0:	95 e0       	ldi	r25, 0x05	; 5
    47a2:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
		pos3 = size.x;
    47a6:	09 81       	ldd	r16, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    47a8:	ae 01       	movw	r20, r28
    47aa:	4f 5f       	subi	r20, 0xFF	; 255
    47ac:	5f 4f       	sbci	r21, 0xFF	; 255
    47ae:	6b e7       	ldi	r22, 0x7B	; 123
    47b0:	7f e0       	ldi	r23, 0x0F	; 15
    47b2:	8d e0       	ldi	r24, 0x0D	; 13
    47b4:	95 e0       	ldi	r25, 0x05	; 5
    47b6:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
		pos2 = size.x;
    47ba:	b9 80       	ldd	r11, Y+1	; 0x01
    47bc:	11 27       	eor	r17, r17
    47be:	07 fd       	sbrc	r16, 7
    47c0:	10 95       	com	r17

		if (vbat_temp >= 10)
    47c2:	8a e0       	ldi	r24, 0x0A	; 10
    47c4:	c8 16       	cp	r12, r24
    47c6:	d1 04       	cpc	r13, r1
    47c8:	40 f0       	brcs	.+16     	; 0x47da <Display_status+0x274>
    47ca:	4a e0       	ldi	r20, 0x0A	; 10
    47cc:	65 ea       	ldi	r22, 0xA5	; 165
    47ce:	75 e0       	ldi	r23, 0x05	; 5
    47d0:	c6 01       	movw	r24, r12
    47d2:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    47d6:	a7 01       	movw	r20, r14
    47d8:	16 c0       	rjmp	.+44     	; 0x4806 <Display_status+0x2a0>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    47da:	a7 01       	movw	r20, r14
    47dc:	40 0f       	add	r20, r16
    47de:	51 1f       	adc	r21, r17
    47e0:	24 e2       	ldi	r18, 0x24	; 36
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	6b e7       	ldi	r22, 0x7B	; 123
    47e6:	7f e0       	ldi	r23, 0x0F	; 15
    47e8:	8d e0       	ldi	r24, 0x0D	; 13
    47ea:	91 e0       	ldi	r25, 0x01	; 1
    47ec:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
    47f0:	4a e0       	ldi	r20, 0x0A	; 10
    47f2:	65 ea       	ldi	r22, 0xA5	; 165
    47f4:	75 e0       	ldi	r23, 0x05	; 5
    47f6:	c6 01       	movw	r24, r12
    47f8:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    47fc:	a7 01       	movw	r20, r14
    47fe:	4b 0d       	add	r20, r11
    4800:	51 1d       	adc	r21, r1
    4802:	b7 fc       	sbrc	r11, 7
    4804:	5a 95       	dec	r21
    4806:	40 0f       	add	r20, r16
    4808:	51 1f       	adc	r21, r17
    480a:	24 e2       	ldi	r18, 0x24	; 36
    480c:	30 e0       	ldi	r19, 0x00	; 0
    480e:	6b e7       	ldi	r22, 0x7B	; 123
    4810:	7f e0       	ldi	r23, 0x0F	; 15
    4812:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		}
	
		// Display vibration info is set to "ON"
		if (Config.Vibration == ON)
    4816:	80 91 4b 06 	lds	r24, 0x064B
    481a:	81 30       	cpi	r24, 0x01	; 1
    481c:	09 f0       	breq	.+2      	; 0x4820 <Display_status+0x2ba>
    481e:	94 c0       	rjmp	.+296    	; 0x4948 <Display_status+0x3e2>
		{
			// Create message box
			fillrect(buffer, 29,11, 70, 42, 0);		// White box
    4820:	e1 2c       	mov	r14, r1
    4822:	0a e2       	ldi	r16, 0x2A	; 42
    4824:	26 e4       	ldi	r18, 0x46	; 70
    4826:	4b e0       	ldi	r20, 0x0B	; 11
    4828:	6d e1       	ldi	r22, 0x1D	; 29
    482a:	80 e0       	ldi	r24, 0x00	; 0
    482c:	91 e0       	ldi	r25, 0x01	; 1
    482e:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <fillrect>
			drawrect(buffer, 29,11, 70, 42, 1); 	// Outline
    4832:	ee 24       	eor	r14, r14
    4834:	e3 94       	inc	r14
    4836:	26 e4       	ldi	r18, 0x46	; 70
    4838:	4b e0       	ldi	r20, 0x0B	; 11
    483a:	6d e1       	ldi	r22, 0x1D	; 29
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	91 e0       	ldi	r25, 0x01	; 1
    4840:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <drawrect>

			// Display vibration data
			temp = (int16_t)GyroAvgNoise;
    4844:	60 91 3e 09 	lds	r22, 0x093E
    4848:	70 91 3f 09 	lds	r23, 0x093F
    484c:	80 91 40 09 	lds	r24, 0x0940
    4850:	90 91 41 09 	lds	r25, 0x0941
    4854:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    4858:	6b 01       	movw	r12, r22
    485a:	7c 01       	movw	r14, r24
    485c:	4a e0       	ldi	r20, 0x0A	; 10
    485e:	65 ea       	ldi	r22, 0xA5	; 165
    4860:	75 e0       	ldi	r23, 0x05	; 5
    4862:	c6 01       	movw	r24, r12
    4864:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
			
			// Work out pixel size of number to display
			mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana22, &size);
    4868:	ae 01       	movw	r20, r28
    486a:	4f 5f       	subi	r20, 0xFF	; 255
    486c:	5f 4f       	sbci	r21, 0xFF	; 255
    486e:	67 e5       	ldi	r22, 0x57	; 87
    4870:	72 e0       	ldi	r23, 0x02	; 2
    4872:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
			
			// Center the number in the box automatically
			mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana22,64 - (size.x / 2),20);
    4876:	89 81       	ldd	r24, Y+1	; 0x01
    4878:	9a 81       	ldd	r25, Y+2	; 0x02
    487a:	96 95       	lsr	r25
    487c:	87 95       	ror	r24
    487e:	00 e4       	ldi	r16, 0x40	; 64
    4880:	10 e0       	ldi	r17, 0x00	; 0
    4882:	08 1b       	sub	r16, r24
    4884:	19 0b       	sbc	r17, r25
    4886:	4a e0       	ldi	r20, 0x0A	; 10
    4888:	65 ea       	ldi	r22, 0xA5	; 165
    488a:	75 e0       	ldi	r23, 0x05	; 5
    488c:	c6 01       	movw	r24, r12
    488e:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    4892:	24 e1       	ldi	r18, 0x14	; 20
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	a8 01       	movw	r20, r16
    4898:	67 e5       	ldi	r22, 0x57	; 87
    489a:	72 e0       	ldi	r23, 0x02	; 2
    489c:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    48a0:	53 c0       	rjmp	.+166    	; 0x4948 <Display_status+0x3e2>
	
	// Display error messages
	else
	{
		// Prioritise error from top to bottom
		if(General_error & (1 << LVA_ALARM))
    48a2:	80 91 34 05 	lds	r24, 0x0534
    48a6:	83 ff       	sbrs	r24, 3
    48a8:	13 c0       	rjmp	.+38     	; 0x48d0 <Display_status+0x36a>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    48aa:	25 e2       	ldi	r18, 0x25	; 37
    48ac:	30 e0       	ldi	r19, 0x00	; 0
    48ae:	4f e0       	ldi	r20, 0x0F	; 15
    48b0:	50 e0       	ldi	r21, 0x00	; 0
    48b2:	6d ec       	ldi	r22, 0xCD	; 205
    48b4:	74 e0       	ldi	r23, 0x04	; 4
    48b6:	86 e8       	ldi	r24, 0x86	; 134
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    48be:	25 e2       	ldi	r18, 0x25	; 37
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	4f e4       	ldi	r20, 0x4F	; 79
    48c4:	50 e0       	ldi	r21, 0x00	; 0
    48c6:	6d ec       	ldi	r22, 0xCD	; 205
    48c8:	74 e0       	ldi	r23, 0x04	; 4
    48ca:	8f e0       	ldi	r24, 0x0F	; 15
    48cc:	91 e0       	ldi	r25, 0x01	; 1
    48ce:	3a c0       	rjmp	.+116    	; 0x4944 <Display_status+0x3de>
		}
		else if(General_error & (1 << NO_SIGNAL))
    48d0:	80 91 34 05 	lds	r24, 0x0534
    48d4:	81 ff       	sbrs	r24, 1
    48d6:	13 c0       	rjmp	.+38     	; 0x48fe <Display_status+0x398>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    48d8:	25 e2       	ldi	r18, 0x25	; 37
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	4e e1       	ldi	r20, 0x1E	; 30
    48de:	50 e0       	ldi	r21, 0x00	; 0
    48e0:	6d ec       	ldi	r22, 0xCD	; 205
    48e2:	74 e0       	ldi	r23, 0x04	; 4
    48e4:	8b e4       	ldi	r24, 0x4B	; 75
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    48ec:	25 e2       	ldi	r18, 0x25	; 37
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	47 e3       	ldi	r20, 0x37	; 55
    48f2:	50 e0       	ldi	r21, 0x00	; 0
    48f4:	6d ec       	ldi	r22, 0xCD	; 205
    48f6:	74 e0       	ldi	r23, 0x04	; 4
    48f8:	80 e1       	ldi	r24, 0x10	; 16
    48fa:	91 e0       	ldi	r25, 0x01	; 1
    48fc:	23 c0       	rjmp	.+70     	; 0x4944 <Display_status+0x3de>
		}
		else if(General_error & (1 << THROTTLE_HIGH))
    48fe:	80 91 34 05 	lds	r24, 0x0534
    4902:	80 ff       	sbrs	r24, 0
    4904:	13 c0       	rjmp	.+38     	; 0x492c <Display_status+0x3c6>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    4906:	25 e2       	ldi	r18, 0x25	; 37
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	4b e0       	ldi	r20, 0x0B	; 11
    490c:	50 e0       	ldi	r21, 0x00	; 0
    490e:	6d ec       	ldi	r22, 0xCD	; 205
    4910:	74 e0       	ldi	r23, 0x04	; 4
    4912:	89 e6       	ldi	r24, 0x69	; 105
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    491a:	25 e2       	ldi	r18, 0x25	; 37
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	42 e5       	ldi	r20, 0x52	; 82
    4920:	50 e0       	ldi	r21, 0x00	; 0
    4922:	6d ec       	ldi	r22, 0xCD	; 205
    4924:	74 e0       	ldi	r23, 0x04	; 4
    4926:	8e e0       	ldi	r24, 0x0E	; 14
    4928:	91 e0       	ldi	r25, 0x01	; 1
    492a:	0c c0       	rjmp	.+24     	; 0x4944 <Display_status+0x3de>
		}
		else if(General_error & (1 << DISARMED))
    492c:	80 91 34 05 	lds	r24, 0x0534
    4930:	82 ff       	sbrs	r24, 2
    4932:	0a c0       	rjmp	.+20     	; 0x4948 <Display_status+0x3e2>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    4934:	25 e2       	ldi	r18, 0x25	; 37
    4936:	30 e0       	ldi	r19, 0x00	; 0
    4938:	49 e1       	ldi	r20, 0x19	; 25
    493a:	50 e0       	ldi	r21, 0x00	; 0
    493c:	6d ec       	ldi	r22, 0xCD	; 205
    493e:	74 e0       	ldi	r23, 0x04	; 4
    4940:	82 e1       	ldi	r24, 0x12	; 18
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    4948:	80 e0       	ldi	r24, 0x00	; 0
    494a:	91 e0       	ldi	r25, 0x01	; 1
    494c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
	clear_buffer(buffer);
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	91 e0       	ldi	r25, 0x01	; 1
    4954:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
}
    4958:	0f 90       	pop	r0
    495a:	0f 90       	pop	r0
    495c:	0f 90       	pop	r0
    495e:	0f 90       	pop	r0
    4960:	df 91       	pop	r29
    4962:	cf 91       	pop	r28
    4964:	1f 91       	pop	r17
    4966:	0f 91       	pop	r16
    4968:	ff 90       	pop	r15
    496a:	ef 90       	pop	r14
    496c:	df 90       	pop	r13
    496e:	cf 90       	pop	r12
    4970:	bf 90       	pop	r11
    4972:	08 95       	ret

00004974 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    4974:	af 92       	push	r10
    4976:	bf 92       	push	r11
    4978:	cf 92       	push	r12
    497a:	df 92       	push	r13
    497c:	ef 92       	push	r14
    497e:	ff 92       	push	r15
    4980:	0f 93       	push	r16
    4982:	1f 93       	push	r17
    4984:	cf 93       	push	r28
    4986:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    4988:	d0 90 05 08 	lds	r13, 0x0805
	temp_elevator = Config.ElevatorPol;
    498c:	f0 90 4c 06 	lds	r15, 0x064C
	temp_rudder = Config.RudderPol;
    4990:	a0 90 04 08 	lds	r10, 0x0804

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    4994:	10 92 05 08 	sts	0x0805, r1
	Config.ElevatorPol =  NORMAL;
    4998:	10 92 4c 06 	sts	0x064C, r1
	Config.RudderPol = NORMAL;
    499c:	10 92 04 08 	sts	0x0804, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    49a0:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    49a2:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    49a4:	1f 9b       	sbis	0x03, 7	; 3
    49a6:	d2 c0       	rjmp	.+420    	; 0x4b4c <Display_sticks+0x1d8>
    49a8:	c1 11       	cpse	r28, r1
    49aa:	d2 c0       	rjmp	.+420    	; 0x4b50 <Display_sticks+0x1dc>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	91 e0       	ldi	r25, 0x01	; 1
    49b0:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
    49b4:	92 e0       	ldi	r25, 0x02	; 2
    49b6:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    49b8:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    49ba:	61 e1       	ldi	r22, 0x11	; 17
    49bc:	61 0f       	add	r22, r17
    49be:	ee 24       	eor	r14, r14
    49c0:	e3 94       	inc	r14
    49c2:	08 e2       	ldi	r16, 0x28	; 40
    49c4:	28 e2       	ldi	r18, 0x28	; 40
    49c6:	40 e0       	ldi	r20, 0x00	; 0
    49c8:	80 e0       	ldi	r24, 0x00	; 0
    49ca:	91 e0       	ldi	r25, 0x01	; 1
    49cc:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    49d0:	86 e2       	ldi	r24, 0x26	; 38
    49d2:	b8 2e       	mov	r11, r24
    49d4:	b1 0e       	add	r11, r17
    49d6:	20 e3       	ldi	r18, 0x30	; 48
    49d8:	21 0f       	add	r18, r17
    49da:	03 e0       	ldi	r16, 0x03	; 3
    49dc:	44 e1       	ldi	r20, 0x14	; 20
    49de:	6b 2d       	mov	r22, r11
    49e0:	80 e0       	ldi	r24, 0x00	; 0
    49e2:	91 e0       	ldi	r25, 0x01	; 1
    49e4:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    49e8:	28 e3       	ldi	r18, 0x38	; 56
    49ea:	21 0f       	add	r18, r17
    49ec:	69 e2       	ldi	r22, 0x29	; 41
    49ee:	61 0f       	add	r22, r17
    49f0:	06 e0       	ldi	r16, 0x06	; 6
    49f2:	45 e1       	ldi	r20, 0x15	; 21
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	91 e0       	ldi	r25, 0x01	; 1
    49f8:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    49fc:	01 e0       	ldi	r16, 0x01	; 1
    49fe:	22 e0       	ldi	r18, 0x02	; 2
    4a00:	45 e1       	ldi	r20, 0x15	; 21
    4a02:	6b 2d       	mov	r22, r11
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	91 e0       	ldi	r25, 0x01	; 1
    4a08:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    4a0c:	63 e3       	ldi	r22, 0x33	; 51
    4a0e:	61 0f       	add	r22, r17
    4a10:	24 e0       	ldi	r18, 0x04	; 4
    4a12:	45 e0       	ldi	r20, 0x05	; 5
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	91 e0       	ldi	r25, 0x01	; 1
    4a18:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <fillcircle>
    4a1c:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    4a1e:	11 f0       	breq	.+4      	; 0x4a24 <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    4a20:	14 e3       	ldi	r17, 0x34	; 52
    4a22:	cb cf       	rjmp	.-106    	; 0x49ba <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    4a24:	29 e3       	ldi	r18, 0x39	; 57
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	40 e0       	ldi	r20, 0x00	; 0
    4a2a:	50 e0       	ldi	r21, 0x00	; 0
    4a2c:	6d ee       	ldi	r22, 0xED	; 237
    4a2e:	71 e0       	ldi	r23, 0x01	; 1
    4a30:	8c e0       	ldi	r24, 0x0C	; 12
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    4a38:	0e 94 bc 66 	call	0xcd78	; 0xcd78 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    4a3c:	80 91 46 09 	lds	r24, 0x0946
    4a40:	90 91 47 09 	lds	r25, 0x0947
    4a44:	80 33       	cpi	r24, 0x30	; 48
    4a46:	98 4f       	sbci	r25, 0xF8	; 248
    4a48:	3c f0       	brlt	.+14     	; 0x4a58 <Display_sticks+0xe4>
    4a4a:	80 91 46 09 	lds	r24, 0x0946
    4a4e:	90 91 47 09 	lds	r25, 0x0947
    4a52:	81 3d       	cpi	r24, 0xD1	; 209
    4a54:	97 40       	sbci	r25, 0x07	; 7
    4a56:	6c f0       	brlt	.+26     	; 0x4a72 <Display_sticks+0xfe>
    4a58:	d1 11       	cpse	r29, r1
    4a5a:	0b c0       	rjmp	.+22     	; 0x4a72 <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    4a5c:	2b e2       	ldi	r18, 0x2B	; 43
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	40 e1       	ldi	r20, 0x10	; 16
    4a62:	50 e0       	ldi	r21, 0x00	; 0
    4a64:	6d ec       	ldi	r22, 0xCD	; 205
    4a66:	74 e0       	ldi	r23, 0x04	; 4
    4a68:	87 e8       	ldi	r24, 0x87	; 135
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
    4a70:	68 c0       	rjmp	.+208    	; 0x4b42 <Display_sticks+0x1ce>
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    4a72:	80 91 46 09 	lds	r24, 0x0946
    4a76:	90 91 47 09 	lds	r25, 0x0947
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
    4a7a:	84 3f       	cpi	r24, 0xF4	; 244
    4a7c:	91 40       	sbci	r25, 0x01	; 1
    4a7e:	3c f4       	brge	.+14     	; 0x4a8e <Display_sticks+0x11a>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    4a80:	80 91 46 09 	lds	r24, 0x0946
    4a84:	90 91 47 09 	lds	r25, 0x0947
    4a88:	8d 30       	cpi	r24, 0x0D	; 13
    4a8a:	9e 4f       	sbci	r25, 0xFE	; 254
    4a8c:	e4 f4       	brge	.+56     	; 0x4ac6 <Display_sticks+0x152>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    4a8e:	80 91 48 09 	lds	r24, 0x0948
    4a92:	90 91 49 09 	lds	r25, 0x0949
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    4a96:	84 3f       	cpi	r24, 0xF4	; 244
    4a98:	91 40       	sbci	r25, 0x01	; 1
    4a9a:	3c f4       	brge	.+14     	; 0x4aaa <Display_sticks+0x136>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    4a9c:	80 91 48 09 	lds	r24, 0x0948
    4aa0:	90 91 49 09 	lds	r25, 0x0949
    4aa4:	8d 30       	cpi	r24, 0x0D	; 13
    4aa6:	9e 4f       	sbci	r25, 0xFE	; 254
    4aa8:	74 f4       	brge	.+28     	; 0x4ac6 <Display_sticks+0x152>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    4aaa:	80 91 4a 09 	lds	r24, 0x094A
    4aae:	90 91 4b 09 	lds	r25, 0x094B
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    4ab2:	84 3f       	cpi	r24, 0xF4	; 244
    4ab4:	91 40       	sbci	r25, 0x01	; 1
    4ab6:	9c f4       	brge	.+38     	; 0x4ade <Display_sticks+0x16a>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
    4ab8:	80 91 4a 09 	lds	r24, 0x094A
    4abc:	90 91 4b 09 	lds	r25, 0x094B
    4ac0:	8d 30       	cpi	r24, 0x0D	; 13
    4ac2:	9e 4f       	sbci	r25, 0xFE	; 254
    4ac4:	64 f0       	brlt	.+24     	; 0x4ade <Display_sticks+0x16a>
					)
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    4ac6:	2b e2       	ldi	r18, 0x2B	; 43
    4ac8:	30 e0       	ldi	r19, 0x00	; 0
    4aca:	49 e0       	ldi	r20, 0x09	; 9
    4acc:	50 e0       	ldi	r21, 0x00	; 0
    4ace:	6d ec       	ldi	r22, 0xCD	; 205
    4ad0:	74 e0       	ldi	r23, 0x04	; 4
    4ad2:	88 e8       	ldi	r24, 0x88	; 136
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500)) 
					)
			{
				CalibrateStarted = true;
    4ada:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    4adc:	32 c0       	rjmp	.+100    	; 0x4b42 <Display_sticks+0x1ce>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    4ade:	80 91 46 09 	lds	r24, 0x0946
    4ae2:	90 91 47 09 	lds	r25, 0x0947
    4ae6:	97 ff       	sbrs	r25, 7
    4ae8:	03 c0       	rjmp	.+6      	; 0x4af0 <Display_sticks+0x17c>
				{
					Config.AileronPol = REVERSED;
    4aea:	81 e0       	ldi	r24, 0x01	; 1
    4aec:	80 93 05 08 	sts	0x0805, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    4af0:	80 91 48 09 	lds	r24, 0x0948
    4af4:	90 91 49 09 	lds	r25, 0x0949
    4af8:	97 ff       	sbrs	r25, 7
    4afa:	03 c0       	rjmp	.+6      	; 0x4b02 <Display_sticks+0x18e>
				{
					Config.ElevatorPol = REVERSED;
    4afc:	81 e0       	ldi	r24, 0x01	; 1
    4afe:	80 93 4c 06 	sts	0x064C, r24
				}

				if (RCinputs[RUDDER] < 0)
    4b02:	80 91 4a 09 	lds	r24, 0x094A
    4b06:	90 91 4b 09 	lds	r25, 0x094B
    4b0a:	97 ff       	sbrs	r25, 7
    4b0c:	03 c0       	rjmp	.+6      	; 0x4b14 <Display_sticks+0x1a0>
				{
					Config.RudderPol = REVERSED;
    4b0e:	81 e0       	ldi	r24, 0x01	; 1
    4b10:	80 93 04 08 	sts	0x0804, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    4b14:	80 91 46 09 	lds	r24, 0x0946
    4b18:	90 91 47 09 	lds	r25, 0x0947
    4b1c:	18 16       	cp	r1, r24
    4b1e:	19 06       	cpc	r1, r25
    4b20:	84 f4       	brge	.+32     	; 0x4b42 <Display_sticks+0x1ce>
    4b22:	80 91 48 09 	lds	r24, 0x0948
    4b26:	90 91 49 09 	lds	r25, 0x0949
    4b2a:	18 16       	cp	r1, r24
    4b2c:	19 06       	cpc	r1, r25
    4b2e:	4c f4       	brge	.+18     	; 0x4b42 <Display_sticks+0x1ce>
    4b30:	80 91 4a 09 	lds	r24, 0x094A
    4b34:	90 91 4b 09 	lds	r25, 0x094B
    4b38:	c1 e0       	ldi	r28, 0x01	; 1
    4b3a:	18 16       	cp	r1, r24
    4b3c:	19 06       	cpc	r1, r25
    4b3e:	0c f0       	brlt	.+2      	; 0x4b42 <Display_sticks+0x1ce>
    4b40:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    4b42:	80 e0       	ldi	r24, 0x00	; 0
    4b44:	91 e0       	ldi	r25, 0x01	; 1
    4b46:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
    4b4a:	2c cf       	rjmp	.-424    	; 0x49a4 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    4b4c:	cc 23       	and	r28, r28
    4b4e:	39 f1       	breq	.+78     	; 0x4b9e <Display_sticks+0x22a>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    4b50:	2b e2       	ldi	r18, 0x2B	; 43
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	48 e2       	ldi	r20, 0x28	; 40
    4b56:	50 e0       	ldi	r21, 0x00	; 0
    4b58:	6d ec       	ldi	r22, 0xCD	; 205
    4b5a:	74 e0       	ldi	r23, 0x04	; 4
    4b5c:	89 e8       	ldi	r24, 0x89	; 137
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	91 e0       	ldi	r25, 0x01	; 1
    4b68:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
		clear_buffer(buffer);
    4b6c:	80 e0       	ldi	r24, 0x00	; 0
    4b6e:	91 e0       	ldi	r25, 0x01	; 1
    4b70:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
    4b74:	8f e7       	ldi	r24, 0x7F	; 127
    4b76:	94 e8       	ldi	r25, 0x84	; 132
    4b78:	2e e1       	ldi	r18, 0x1E	; 30
    4b7a:	81 50       	subi	r24, 0x01	; 1
    4b7c:	90 40       	sbci	r25, 0x00	; 0
    4b7e:	20 40       	sbci	r18, 0x00	; 0
    4b80:	e1 f7       	brne	.-8      	; 0x4b7a <Display_sticks+0x206>
    4b82:	00 c0       	rjmp	.+0      	; 0x4b84 <Display_sticks+0x210>
    4b84:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    4b86:	df 91       	pop	r29
    4b88:	cf 91       	pop	r28
    4b8a:	1f 91       	pop	r17
    4b8c:	0f 91       	pop	r16
    4b8e:	ff 90       	pop	r15
    4b90:	ef 90       	pop	r14
    4b92:	df 90       	pop	r13
    4b94:	cf 90       	pop	r12
    4b96:	bf 90       	pop	r11
    4b98:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    4b9a:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    4b9e:	d0 92 05 08 	sts	0x0805, r13
		Config.ElevatorPol = temp_elevator;
    4ba2:	f0 92 4c 06 	sts	0x064C, r15
		Config.RudderPol = temp_rudder;
    4ba6:	a0 92 04 08 	sts	0x0804, r10
	}
}
    4baa:	df 91       	pop	r29
    4bac:	cf 91       	pop	r28
    4bae:	1f 91       	pop	r17
    4bb0:	0f 91       	pop	r16
    4bb2:	ff 90       	pop	r15
    4bb4:	ef 90       	pop	r14
    4bb6:	df 90       	pop	r13
    4bb8:	cf 90       	pop	r12
    4bba:	bf 90       	pop	r11
    4bbc:	af 90       	pop	r10
    4bbe:	08 95       	ret

00004bc0 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    4bc0:	0f 93       	push	r16
    4bc2:	1f 93       	push	r17
    4bc4:	cf 93       	push	r28
    4bc6:	df 93       	push	r29
    4bc8:	1f 92       	push	r1
    4bca:	cd b7       	in	r28, 0x3d	; 61
    4bcc:	de b7       	in	r29, 0x3e	; 62
    4bce:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    4bd0:	69 83       	std	Y+1, r22	; 0x01
    4bd2:	0e 94 16 6d 	call	0xda2c	; 0xda2c <__eerd_byte_m644pa>
    4bd6:	69 81       	ldd	r22, Y+1	; 0x01
    4bd8:	86 17       	cp	r24, r22
    4bda:	41 f0       	breq	.+16     	; 0x4bec <eeprom_write_byte_changed+0x2c>
	{
		eeprom_write_byte(addr, value);
    4bdc:	c8 01       	movw	r24, r16
	}
}
    4bde:	0f 90       	pop	r0
    4be0:	df 91       	pop	r29
    4be2:	cf 91       	pop	r28
    4be4:	1f 91       	pop	r17
    4be6:	0f 91       	pop	r16
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		eeprom_write_byte(addr, value);
    4be8:	0c 94 1e 6d 	jmp	0xda3c	; 0xda3c <__eewr_byte_m644pa>
	}
}
    4bec:	0f 90       	pop	r0
    4bee:	df 91       	pop	r29
    4bf0:	cf 91       	pop	r28
    4bf2:	1f 91       	pop	r17
    4bf4:	0f 91       	pop	r16
    4bf6:	08 95       	ret

00004bf8 <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    4bf8:	ef 92       	push	r14
    4bfa:	ff 92       	push	r15
    4bfc:	0f 93       	push	r16
    4bfe:	1f 93       	push	r17
    4c00:	cf 93       	push	r28
    4c02:	df 93       	push	r29
    4c04:	ec 01       	movw	r28, r24
    4c06:	8b 01       	movw	r16, r22
    4c08:	7a 01       	movw	r14, r20
    4c0a:	e8 0e       	add	r14, r24
    4c0c:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len = 0; len < size; len++)
    4c0e:	ce 15       	cp	r28, r14
    4c10:	df 05       	cpc	r29, r15
    4c12:	39 f0       	breq	.+14     	; 0x4c22 <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    4c14:	69 91       	ld	r22, Y+
    4c16:	c8 01       	movw	r24, r16
    4c18:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <eeprom_write_byte_changed>
		src++;
		dest++;
    4c1c:	0f 5f       	subi	r16, 0xFF	; 255
    4c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c20:	f6 cf       	rjmp	.-20     	; 0x4c0e <eeprom_write_block_changes+0x16>
	}
}
    4c22:	df 91       	pop	r29
    4c24:	cf 91       	pop	r28
    4c26:	1f 91       	pop	r17
    4c28:	0f 91       	pop	r16
    4c2a:	ff 90       	pop	r15
    4c2c:	ef 90       	pop	r14
    4c2e:	08 95       	ret

00004c30 <Save_Config_to_EEPROM>:
const int8_t	MPX[MAX_RC_CHANNELS] PROGMEM	= {1,2,3,5,0,4,6,7}; 	// Multiplex channel sequence (AER1TG23)
	
void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    4c30:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    4c32:	4e e8       	ldi	r20, 0x8E	; 142
    4c34:	52 e0       	ldi	r21, 0x02	; 2
    4c36:	60 e0       	ldi	r22, 0x00	; 0
    4c38:	70 e0       	ldi	r23, 0x00	; 0
    4c3a:	88 e1       	ldi	r24, 0x18	; 24
    4c3c:	96 e0       	ldi	r25, 0x06	; 6
    4c3e:	0e 94 fc 25 	call	0x4bf8	; 0x4bf8 <eeprom_write_block_changes>
	sei();
    4c42:	78 94       	sei
    4c44:	08 95       	ret

00004c46 <Update_V1_0_to_V1_1>:
//************************************************************
// Config data restructure code
//************************************************************
// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    4c46:	2f 92       	push	r2
    4c48:	3f 92       	push	r3
    4c4a:	4f 92       	push	r4
    4c4c:	5f 92       	push	r5
    4c4e:	6f 92       	push	r6
    4c50:	7f 92       	push	r7
    4c52:	8f 92       	push	r8
    4c54:	9f 92       	push	r9
    4c56:	af 92       	push	r10
    4c58:	bf 92       	push	r11
    4c5a:	cf 92       	push	r12
    4c5c:	df 92       	push	r13
    4c5e:	ef 92       	push	r14
    4c60:	ff 92       	push	r15
    4c62:	0f 93       	push	r16
    4c64:	1f 93       	push	r17
    4c66:	cf 93       	push	r28
    4c68:	df 93       	push	r29
    4c6a:	cd b7       	in	r28, 0x3d	; 61
    4c6c:	de b7       	in	r29, 0x3e	; 62
    4c6e:	c3 55       	subi	r28, 0x53	; 83
    4c70:	d1 40       	sbci	r29, 0x01	; 1
    4c72:	0f b6       	in	r0, 0x3f	; 63
    4c74:	f8 94       	cli
    4c76:	de bf       	out	0x3e, r29	; 62
    4c78:	0f be       	out	0x3f, r0	; 63
    4c7a:	cd bf       	out	0x3d, r28	; 61

	int8_t		buffer[12];
	int8_t		temp = 0;
	
	// RC items
	memcpy((void*)&buffer[0],(void*)((&Config.setup) + (RCITEMS_V1_0)),1);		// RxMode
    4c7c:	ae 01       	movw	r20, r28
    4c7e:	4f 5c       	subi	r20, 0xCF	; 207
    4c80:	5e 4f       	sbci	r21, 0xFE	; 254
    4c82:	80 91 41 06 	lds	r24, 0x0641
    4c86:	fa 01       	movw	r30, r20
    4c88:	80 83       	st	Z, r24
	memcpy((void*)&buffer[1],(void*)((&Config.setup) + (GENITEMS_V1_0 + 5)),1);	// Servo_rate
    4c8a:	80 91 a5 06 	lds	r24, 0x06A5
    4c8e:	81 83       	std	Z+1, r24	; 0x01
	memcpy((void*)&buffer[2],(void*)((&Config.setup) + (RCITEMS_V1_0 + 1)),1);	// PWM_Sync
    4c90:	80 91 42 06 	lds	r24, 0x0642
    4c94:	82 83       	std	Z+2, r24	; 0x02
	memcpy((void*)&buffer[3],(void*)((&Config.setup) + (RCITEMS_V1_0 + 2)),1);	// TxSeq
    4c96:	80 91 43 06 	lds	r24, 0x0643
    4c9a:	83 83       	std	Z+3, r24	; 0x03
	memcpy((void*)&buffer[4],(void*)((&Config.setup) + (RCITEMS_V1_0 + 3)),1);	// FlightChan
    4c9c:	30 91 44 06 	lds	r19, 0x0644
    4ca0:	34 83       	std	Z+4, r19	; 0x04
	memcpy((void*)&buffer[5],(void*)((&Config.setup) + (RCITEMS_V1_0 + 7)),1);	// TransitionSpeed
    4ca2:	80 91 48 06 	lds	r24, 0x0648
    4ca6:	85 83       	std	Z+5, r24	; 0x05
	memcpy((void*)&buffer[6],(void*)((&Config.setup) + (RCITEMS_V1_0 + 8)),1);	// Transition_P1n
    4ca8:	80 91 49 06 	lds	r24, 0x0649
    4cac:	86 83       	std	Z+6, r24	; 0x06
	memcpy((void*)&buffer[7],(void*)((&Config.setup) + (RCITEMS_V1_0 + 4)),1);	// AileronPol
    4cae:	80 91 45 06 	lds	r24, 0x0645
    4cb2:	87 83       	std	Z+7, r24	; 0x07
	memcpy((void*)&buffer[8],(void*)((&Config.setup) + (RCITEMS_V1_0 + 5)),1);	// ElevatorPol
    4cb4:	80 91 46 06 	lds	r24, 0x0646
    4cb8:	80 87       	std	Z+8, r24	; 0x08
	memcpy((void*)&buffer[9],(void*)((&Config.setup) + (RCITEMS_V1_0 + 6)),1);	// RudderPol
    4cba:	f0 91 47 06 	lds	r31, 0x0647
    4cbe:	c0 5b       	subi	r28, 0xB0	; 176
    4cc0:	de 4f       	sbci	r29, 0xFE	; 254
    4cc2:	f8 83       	st	Y, r31
    4cc4:	c0 55       	subi	r28, 0x50	; 80
    4cc6:	d1 40       	sbci	r29, 0x01	; 1
    4cc8:	8f 2f       	mov	r24, r31
    4cca:	fa 01       	movw	r30, r20
    4ccc:	81 87       	std	Z+9, r24	; 0x09
	
	// Copy back to new RC items structure
	memcpy((void*)((&Config.setup) + (RCITEMS_V1_0)), &buffer, 9);				// RxMode to ElevatorPol (9 items)
    4cce:	89 e0       	ldi	r24, 0x09	; 9
    4cd0:	a1 e4       	ldi	r26, 0x41	; 65
    4cd2:	b6 e0       	ldi	r27, 0x06	; 6
    4cd4:	01 90       	ld	r0, Z+
    4cd6:	0d 92       	st	X+, r0
    4cd8:	8a 95       	dec	r24
    4cda:	e1 f7       	brne	.-8      	; 0x4cd4 <Update_V1_0_to_V1_1+0x8e>
		
	// New General items - MPU6050LPF to AL correct (4 items)
	memcpy((void*)&buffer[0],(void*)((&Config.setup) + (GENITEMS_V1_0 + 9)),1);	// MPU6050LPF
    4cdc:	80 91 a9 06 	lds	r24, 0x06A9
    4ce0:	fa 01       	movw	r30, r20
    4ce2:	80 83       	st	Z, r24
	memcpy((void*)&buffer[1],(void*)((&Config.setup) + (GENITEMS_V1_0 + 6)),1);	// AccLPF
    4ce4:	20 91 a6 06 	lds	r18, 0x06A6
    4ce8:	21 83       	std	Z+1, r18	; 0x01
	memcpy((void*)&buffer[2],(void*)((&Config.setup) + (GENITEMS_V1_0 + 7)),1);	// GyroLPF
    4cea:	f0 91 a7 06 	lds	r31, 0x06A7
    4cee:	c3 5b       	subi	r28, 0xB3	; 179
    4cf0:	de 4f       	sbci	r29, 0xFE	; 254
    4cf2:	f8 83       	st	Y, r31
    4cf4:	cd 54       	subi	r28, 0x4D	; 77
    4cf6:	d1 40       	sbci	r29, 0x01	; 1
    4cf8:	8f 2f       	mov	r24, r31
    4cfa:	fa 01       	movw	r30, r20
    4cfc:	82 83       	std	Z+2, r24	; 0x02
	memcpy((void*)&buffer[3],(void*)((&Config.setup) + (GENITEMS_V1_0 + 8)),1);	// AL correct
    4cfe:	80 91 a8 06 	lds	r24, 0x06A8
    4d02:	83 83       	std	Z+3, r24	; 0x03
	
	// Copy back to new General items structure
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 + 5)), &buffer, 4);
    4d04:	80 81       	ld	r24, Z
    4d06:	91 81       	ldd	r25, Z+1	; 0x01
    4d08:	a2 81       	ldd	r26, Z+2	; 0x02
    4d0a:	b3 81       	ldd	r27, Z+3	; 0x03
    4d0c:	80 93 a5 06 	sts	0x06A5, r24
    4d10:	90 93 a6 06 	sts	0x06A6, r25
    4d14:	a0 93 a7 06 	sts	0x06A7, r26
    4d18:	b0 93 a8 06 	sts	0x06A8, r27
	
	// "None" no longer an option for this channel, so set to AUX3
	memcpy((void*)&temp,(void*)((&Config.setup) + (RCITEMS_V1_0 + 4)),1);		// FlightChan

	if (temp == NOCHAN)
    4d1c:	38 30       	cpi	r19, 0x08	; 8
    4d1e:	19 f4       	brne	.+6      	; 0x4d26 <Update_V1_0_to_V1_1+0xe0>
	{
		temp = AUX3;
		memcpy((void*)((&Config.setup) + (RCITEMS_V1_0 + 4)), &temp, 1);
    4d20:	87 e0       	ldi	r24, 0x07	; 7
    4d22:	80 93 45 06 	sts	0x0645, r24
	}

	// Set mixer preset to default
	memset((void*)((&Config.setup) + (GENITEMS_V1_0 + 9)), QUADX, 1);			// Preset
    4d26:	10 92 a9 06 	sts	0x06A9, r1
	
	// Move data that exists after the channel mixer to new location
	memmove((void*)((&Config.setup) + (SERVOREV_V1_1)), (void*)((&Config.setup) + (SERVOREV_V1_0)), 72); // (New channel_t size - old size = 72)
    4d2a:	88 e4       	ldi	r24, 0x48	; 72
    4d2c:	e2 e9       	ldi	r30, 0x92	; 146
    4d2e:	f7 e0       	ldi	r31, 0x07	; 7
    4d30:	aa ed       	ldi	r26, 0xDA	; 218
    4d32:	b7 e0       	ldi	r27, 0x07	; 7
    4d34:	01 90       	ld	r0, Z+
    4d36:	0d 92       	st	X+, r0
    4d38:	8a 95       	dec	r24
    4d3a:	e1 f7       	brne	.-8      	; 0x4d34 <Update_V1_0_to_V1_1+0xee>
    4d3c:	6a ea       	ldi	r22, 0xAA	; 170
    4d3e:	76 e0       	ldi	r23, 0x06	; 6
    4d40:	ce 01       	movw	r24, r28
    4d42:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)((&Config.setup) + (CHANNEL_V1_0));
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    4d44:	3d e1       	ldi	r19, 0x1D	; 29
    4d46:	fb 01       	movw	r30, r22
    4d48:	dc 01       	movw	r26, r24
    4d4a:	13 2f       	mov	r17, r19
    4d4c:	01 90       	ld	r0, Z+
    4d4e:	0d 92       	st	X+, r0
    4d50:	1a 95       	dec	r17
    4d52:	e1 f7       	brne	.-8      	; 0x4d4c <Update_V1_0_to_V1_1+0x106>
    4d54:	86 96       	adiw	r24, 0x26	; 38
    4d56:	63 5e       	subi	r22, 0xE3	; 227
    4d58:	7f 4f       	sbci	r23, 0xFF	; 255
	
	// Move data that exists after the channel mixer to new location
	memmove((void*)((&Config.setup) + (SERVOREV_V1_1)), (void*)((&Config.setup) + (SERVOREV_V1_0)), 72); // (New channel_t size - old size = 72)
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    4d5a:	84 17       	cp	r24, r20
    4d5c:	95 07       	cpc	r25, r21
    4d5e:	99 f7       	brne	.-26     	; 0x4d46 <Update_V1_0_to_V1_1+0x100>
    4d60:	6e 01       	movw	r12, r28
    4d62:	93 e1       	ldi	r25, 0x13	; 19
    4d64:	c9 0e       	add	r12, r25
    4d66:	d1 1c       	adc	r13, r1
    4d68:	fe 01       	movw	r30, r28
    4d6a:	74 96       	adiw	r30, 0x14	; 20
    4d6c:	c3 5c       	subi	r28, 0xC3	; 195
    4d6e:	de 4f       	sbci	r29, 0xFE	; 254
    4d70:	f9 83       	std	Y+1, r31	; 0x01
    4d72:	e8 83       	st	Y, r30
    4d74:	cd 53       	subi	r28, 0x3D	; 61
    4d76:	d1 40       	sbci	r29, 0x01	; 1
    4d78:	ce 01       	movw	r24, r28
    4d7a:	45 96       	adiw	r24, 0x15	; 21
    4d7c:	c1 5c       	subi	r28, 0xC1	; 193
    4d7e:	de 4f       	sbci	r29, 0xFE	; 254
    4d80:	99 83       	std	Y+1, r25	; 0x01
    4d82:	88 83       	st	Y, r24
    4d84:	cf 53       	subi	r28, 0x3F	; 63
    4d86:	d1 40       	sbci	r29, 0x01	; 1
    4d88:	1e 01       	movw	r2, r28
    4d8a:	96 e1       	ldi	r25, 0x16	; 22
    4d8c:	29 0e       	add	r2, r25
    4d8e:	31 1c       	adc	r3, r1
    4d90:	8e 01       	movw	r16, r28
    4d92:	02 5e       	subi	r16, 0xE2	; 226
    4d94:	1f 4f       	sbci	r17, 0xFF	; 255
    4d96:	39 96       	adiw	r30, 0x09	; 9
    4d98:	cf 5b       	subi	r28, 0xBF	; 191
    4d9a:	de 4f       	sbci	r29, 0xFE	; 254
    4d9c:	f9 83       	std	Y+1, r31	; 0x01
    4d9e:	e8 83       	st	Y, r30
    4da0:	c1 54       	subi	r28, 0x41	; 65
    4da2:	d1 40       	sbci	r29, 0x01	; 1
    4da4:	ce 01       	movw	r24, r28
    4da6:	4c 96       	adiw	r24, 0x1c	; 28
    4da8:	c9 5b       	subi	r28, 0xB9	; 185
    4daa:	de 4f       	sbci	r29, 0xFE	; 254
    4dac:	99 83       	std	Y+1, r25	; 0x01
    4dae:	88 83       	st	Y, r24
    4db0:	c7 54       	subi	r28, 0x47	; 71
    4db2:	d1 40       	sbci	r29, 0x01	; 1
    4db4:	32 97       	sbiw	r30, 0x02	; 2
    4db6:	cb 5b       	subi	r28, 0xBB	; 187
    4db8:	de 4f       	sbci	r29, 0xFE	; 254
    4dba:	f9 83       	std	Y+1, r31	; 0x01
    4dbc:	e8 83       	st	Y, r30
    4dbe:	c5 54       	subi	r28, 0x45	; 69
    4dc0:	d1 40       	sbci	r29, 0x01	; 1
    4dc2:	02 97       	sbiw	r24, 0x02	; 2
    4dc4:	c5 5b       	subi	r28, 0xB5	; 181
    4dc6:	de 4f       	sbci	r29, 0xFE	; 254
    4dc8:	99 83       	std	Y+1, r25	; 0x01
    4dca:	88 83       	st	Y, r24
    4dcc:	cb 54       	subi	r28, 0x4B	; 75
    4dce:	d1 40       	sbci	r29, 0x01	; 1
    4dd0:	32 97       	sbiw	r30, 0x02	; 2
    4dd2:	cd 5b       	subi	r28, 0xBD	; 189
    4dd4:	de 4f       	sbci	r29, 0xFE	; 254
    4dd6:	f9 83       	std	Y+1, r31	; 0x01
    4dd8:	e8 83       	st	Y, r30
    4dda:	c3 54       	subi	r28, 0x43	; 67
    4ddc:	d1 40       	sbci	r29, 0x01	; 1
    4dde:	02 97       	sbiw	r24, 0x02	; 2
    4de0:	c7 5b       	subi	r28, 0xB7	; 183
    4de2:	de 4f       	sbci	r29, 0xFE	; 254
    4de4:	99 83       	std	Y+1, r25	; 0x01
    4de6:	88 83       	st	Y, r24
    4de8:	c9 54       	subi	r28, 0x49	; 73
    4dea:	d1 40       	sbci	r29, 0x01	; 1
    4dec:	7e 01       	movw	r14, r28
    4dee:	97 e1       	ldi	r25, 0x17	; 23
    4df0:	e9 0e       	add	r14, r25
    4df2:	f1 1c       	adc	r15, r1
    4df4:	5e 01       	movw	r10, r28
    4df6:	e5 e0       	ldi	r30, 0x05	; 5
    4df8:	ae 0e       	add	r10, r30
    4dfa:	b1 1c       	adc	r11, r1
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	8c 0f       	add	r24, r28
    4e02:	9d 1f       	adc	r25, r29
    4e04:	83 5b       	subi	r24, 0xB3	; 179
    4e06:	9e 4f       	sbci	r25, 0xFE	; 254
    4e08:	cf 5a       	subi	r28, 0xAF	; 175
    4e0a:	de 4f       	sbci	r29, 0xFE	; 254
    4e0c:	99 83       	std	Y+1, r25	; 0x01
    4e0e:	88 83       	st	Y, r24
    4e10:	c1 55       	subi	r28, 0x51	; 81
    4e12:	d1 40       	sbci	r29, 0x01	; 1
    4e14:	fe 01       	movw	r30, r28
    4e16:	31 96       	adiw	r30, 0x01	; 1
    4e18:	c2 5b       	subi	r28, 0xB2	; 178
    4e1a:	de 4f       	sbci	r29, 0xFE	; 254
    4e1c:	f9 83       	std	Y+1, r31	; 0x01
    4e1e:	e8 83       	st	Y, r30
    4e20:	ce 54       	subi	r28, 0x4E	; 78
    4e22:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    4e24:	82 e0       	ldi	r24, 0x02	; 2
    4e26:	98 2e       	mov	r9, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    4e28:	88 24       	eor	r8, r8
    4e2a:	83 94       	inc	r8
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    4e2c:	49 e1       	ldi	r20, 0x19	; 25
    4e2e:	50 e0       	ldi	r21, 0x00	; 0
    4e30:	b5 01       	movw	r22, r10
    4e32:	c8 01       	movw	r24, r16
    4e34:	48 97       	sbiw	r24, 0x18	; 24
    4e36:	cd 5a       	subi	r28, 0xAD	; 173
    4e38:	de 4f       	sbci	r29, 0xFE	; 254
    4e3a:	28 83       	st	Y, r18
    4e3c:	c3 55       	subi	r28, 0x53	; 83
    4e3e:	d1 40       	sbci	r29, 0x01	; 1
    4e40:	0e 94 cf 6c 	call	0xd99e	; 0xd99e <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    4e44:	f6 01       	movw	r30, r12
    4e46:	70 80       	ld	r7, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    4e48:	c3 5c       	subi	r28, 0xC3	; 195
    4e4a:	de 4f       	sbci	r29, 0xFE	; 254
    4e4c:	e8 81       	ld	r30, Y
    4e4e:	f9 81       	ldd	r31, Y+1	; 0x01
    4e50:	cd 53       	subi	r28, 0x3D	; 61
    4e52:	d1 40       	sbci	r29, 0x01	; 1
    4e54:	50 80       	ld	r5, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    4e56:	c1 5c       	subi	r28, 0xC1	; 193
    4e58:	de 4f       	sbci	r29, 0xFE	; 254
    4e5a:	e8 81       	ld	r30, Y
    4e5c:	f9 81       	ldd	r31, Y+1	; 0x01
    4e5e:	cf 53       	subi	r28, 0x3F	; 63
    4e60:	d1 40       	sbci	r29, 0x01	; 1
    4e62:	40 80       	ld	r4, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    4e64:	f1 01       	movw	r30, r2
    4e66:	60 80       	ld	r6, Z
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
    4e68:	cd 5a       	subi	r28, 0xAD	; 173
    4e6a:	de 4f       	sbci	r29, 0xFE	; 254
    4e6c:	28 81       	ld	r18, Y
    4e6e:	c3 55       	subi	r28, 0x53	; 83
    4e70:	d1 40       	sbci	r29, 0x01	; 1
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    4e72:	f5 01       	movw	r30, r10
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if (P1_sensors & (1 << MotorMarker))
    4e74:	76 fe       	sbrs	r7, 6
    4e76:	02 c0       	rjmp	.+4      	; 0x4e7c <Update_V1_0_to_V1_1+0x236>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    4e78:	90 82       	st	Z, r9
    4e7a:	01 c0       	rjmp	.+2      	; 0x4e7e <Update_V1_0_to_V1_1+0x238>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    4e7c:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    4e7e:	48 e0       	ldi	r20, 0x08	; 8
    4e80:	50 e0       	ldi	r21, 0x00	; 0
    4e82:	b7 01       	movw	r22, r14
    4e84:	c8 01       	movw	r24, r16
    4e86:	01 96       	adiw	r24, 0x01	; 1
    4e88:	cd 5a       	subi	r28, 0xAD	; 173
    4e8a:	de 4f       	sbci	r29, 0xFE	; 254
    4e8c:	28 83       	st	Y, r18
    4e8e:	c3 55       	subi	r28, 0x53	; 83
    4e90:	d1 40       	sbci	r29, 0x01	; 1
    4e92:	0e 94 cf 6c 	call	0xd99e	; 0xd99e <memmove>
    4e96:	80 e0       	ldi	r24, 0x00	; 0
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	cd 5a       	subi	r28, 0xAD	; 173
    4e9c:	de 4f       	sbci	r29, 0xFE	; 254
    4e9e:	28 81       	ld	r18, Y
    4ea0:	c3 55       	subi	r28, 0x53	; 83
    4ea2:	d1 40       	sbci	r29, 0x01	; 1
    4ea4:	c2 5b       	subi	r28, 0xB2	; 178
    4ea6:	de 4f       	sbci	r29, 0xFE	; 254
    4ea8:	e8 81       	ld	r30, Y
    4eaa:	f9 81       	ldd	r31, Y+1	; 0x01
    4eac:	ce 54       	subi	r28, 0x4E	; 78
    4eae:	d1 40       	sbci	r29, 0x01	; 1
    4eb0:	e8 0f       	add	r30, r24
    4eb2:	f9 1f       	adc	r31, r25

		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    4eb4:	36 8d       	ldd	r19, Z+30	; 0x1e
    4eb6:	3d 30       	cpi	r19, 0x0D	; 13
    4eb8:	11 f4       	brne	.+4      	; 0x4ebe <Update_V1_0_to_V1_1+0x278>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    4eba:	34 e1       	ldi	r19, 0x14	; 20
    4ebc:	36 8f       	std	Z+30, r19	; 0x1e
    4ebe:	02 96       	adiw	r24, 0x02	; 2
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);

		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    4ec0:	88 30       	cpi	r24, 0x08	; 8
    4ec2:	91 05       	cpc	r25, r1
    4ec4:	79 f7       	brne	.-34     	; 0x4ea4 <Update_V1_0_to_V1_1+0x25e>
		// P1 roll gyro
		if (P1_sensors & (1 << RollGyro))
		{
			if (P1_scale & (1 << RollScale))
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    4ec6:	f6 01       	movw	r30, r12
			}
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if (P1_sensors & (1 << RollGyro))
    4ec8:	70 fe       	sbrs	r7, 0
    4eca:	06 c0       	rjmp	.+12     	; 0x4ed8 <Update_V1_0_to_V1_1+0x292>
		{
			if (P1_scale & (1 << RollScale))
    4ecc:	40 fe       	sbrs	r4, 0
    4ece:	02 c0       	rjmp	.+4      	; 0x4ed4 <Update_V1_0_to_V1_1+0x28e>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    4ed0:	90 82       	st	Z, r9
    4ed2:	03 c0       	rjmp	.+6      	; 0x4eda <Update_V1_0_to_V1_1+0x294>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    4ed4:	80 82       	st	Z, r8
    4ed6:	01 c0       	rjmp	.+2      	; 0x4eda <Update_V1_0_to_V1_1+0x294>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    4ed8:	10 82       	st	Z, r1
		// P2 roll gyro
		if (P2_sensors & (1 << RollGyro))
		{
			if (P2_scale & (1 << RollScale))
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    4eda:	c3 5c       	subi	r28, 0xC3	; 195
    4edc:	de 4f       	sbci	r29, 0xFE	; 254
    4ede:	e8 81       	ld	r30, Y
    4ee0:	f9 81       	ldd	r31, Y+1	; 0x01
    4ee2:	cd 53       	subi	r28, 0x3D	; 61
    4ee4:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if (P2_sensors & (1 << RollGyro))
    4ee6:	50 fe       	sbrs	r5, 0
    4ee8:	06 c0       	rjmp	.+12     	; 0x4ef6 <Update_V1_0_to_V1_1+0x2b0>
		{
			if (P2_scale & (1 << RollScale))
    4eea:	60 fe       	sbrs	r6, 0
    4eec:	02 c0       	rjmp	.+4      	; 0x4ef2 <Update_V1_0_to_V1_1+0x2ac>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    4eee:	90 82       	st	Z, r9
    4ef0:	03 c0       	rjmp	.+6      	; 0x4ef8 <Update_V1_0_to_V1_1+0x2b2>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    4ef2:	80 82       	st	Z, r8
    4ef4:	01 c0       	rjmp	.+2      	; 0x4ef8 <Update_V1_0_to_V1_1+0x2b2>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    4ef6:	10 82       	st	Z, r1
		// P1 pitch gyro
		if (P1_sensors & (1 << PitchGyro))
		{
			if (P1_scale & (1 << PitchScale))
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    4ef8:	c1 5c       	subi	r28, 0xC1	; 193
    4efa:	de 4f       	sbci	r29, 0xFE	; 254
    4efc:	e8 81       	ld	r30, Y
    4efe:	f9 81       	ldd	r31, Y+1	; 0x01
    4f00:	cf 53       	subi	r28, 0x3F	; 63
    4f02:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if (P1_sensors & (1 << PitchGyro))
    4f04:	71 fe       	sbrs	r7, 1
    4f06:	06 c0       	rjmp	.+12     	; 0x4f14 <Update_V1_0_to_V1_1+0x2ce>
		{
			if (P1_scale & (1 << PitchScale))
    4f08:	41 fe       	sbrs	r4, 1
    4f0a:	02 c0       	rjmp	.+4      	; 0x4f10 <Update_V1_0_to_V1_1+0x2ca>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    4f0c:	90 82       	st	Z, r9
    4f0e:	03 c0       	rjmp	.+6      	; 0x4f16 <Update_V1_0_to_V1_1+0x2d0>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    4f10:	80 82       	st	Z, r8
    4f12:	01 c0       	rjmp	.+2      	; 0x4f16 <Update_V1_0_to_V1_1+0x2d0>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    4f14:	10 82       	st	Z, r1
		// P2 pitch gyro
		if (P2_sensors & (1 << PitchGyro))
		{
			if (P2_scale & (1 << PitchScale))
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    4f16:	f1 01       	movw	r30, r2
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if (P2_sensors & (1 << PitchGyro))
    4f18:	51 fe       	sbrs	r5, 1
    4f1a:	06 c0       	rjmp	.+12     	; 0x4f28 <Update_V1_0_to_V1_1+0x2e2>
		{
			if (P2_scale & (1 << PitchScale))
    4f1c:	61 fe       	sbrs	r6, 1
    4f1e:	02 c0       	rjmp	.+4      	; 0x4f24 <Update_V1_0_to_V1_1+0x2de>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    4f20:	90 82       	st	Z, r9
    4f22:	03 c0       	rjmp	.+6      	; 0x4f2a <Update_V1_0_to_V1_1+0x2e4>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    4f24:	80 82       	st	Z, r8
    4f26:	01 c0       	rjmp	.+2      	; 0x4f2a <Update_V1_0_to_V1_1+0x2e4>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    4f28:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if (P1_sensors & (1 << YawGyro))
		{
			if (P1_scale & (1 << YawScale))
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    4f2a:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if (P1_sensors & (1 << YawGyro))
    4f2c:	72 fe       	sbrs	r7, 2
    4f2e:	06 c0       	rjmp	.+12     	; 0x4f3c <Update_V1_0_to_V1_1+0x2f6>
		{
			if (P1_scale & (1 << YawScale))
    4f30:	42 fe       	sbrs	r4, 2
    4f32:	02 c0       	rjmp	.+4      	; 0x4f38 <Update_V1_0_to_V1_1+0x2f2>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    4f34:	90 82       	st	Z, r9
    4f36:	03 c0       	rjmp	.+6      	; 0x4f3e <Update_V1_0_to_V1_1+0x2f8>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    4f38:	80 82       	st	Z, r8
    4f3a:	01 c0       	rjmp	.+2      	; 0x4f3e <Update_V1_0_to_V1_1+0x2f8>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    4f3c:	10 82       	st	Z, r1
		// P2 yaw gyro
		if (P2_sensors & (1 << YawGyro))
		{
			if (P2_scale & (1 << YawScale))
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    4f3e:	c7 5b       	subi	r28, 0xB7	; 183
    4f40:	de 4f       	sbci	r29, 0xFE	; 254
    4f42:	e8 81       	ld	r30, Y
    4f44:	f9 81       	ldd	r31, Y+1	; 0x01
    4f46:	c9 54       	subi	r28, 0x49	; 73
    4f48:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if (P2_sensors & (1 << YawGyro))
    4f4a:	52 fe       	sbrs	r5, 2
    4f4c:	06 c0       	rjmp	.+12     	; 0x4f5a <Update_V1_0_to_V1_1+0x314>
		{
			if (P2_scale & (1 << YawScale))
    4f4e:	62 fe       	sbrs	r6, 2
    4f50:	02 c0       	rjmp	.+4      	; 0x4f56 <Update_V1_0_to_V1_1+0x310>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    4f52:	90 82       	st	Z, r9
    4f54:	03 c0       	rjmp	.+6      	; 0x4f5c <Update_V1_0_to_V1_1+0x316>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    4f56:	80 82       	st	Z, r8
    4f58:	01 c0       	rjmp	.+2      	; 0x4f5c <Update_V1_0_to_V1_1+0x316>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    4f5a:	10 82       	st	Z, r1
		// P1 roll acc
		if (P1_sensors & (1 << RollAcc))
		{
			if (P1_scale & (1 << AccRollScale))
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    4f5c:	cd 5b       	subi	r28, 0xBD	; 189
    4f5e:	de 4f       	sbci	r29, 0xFE	; 254
    4f60:	e8 81       	ld	r30, Y
    4f62:	f9 81       	ldd	r31, Y+1	; 0x01
    4f64:	c3 54       	subi	r28, 0x43	; 67
    4f66:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if (P1_sensors & (1 << RollAcc))
    4f68:	73 fe       	sbrs	r7, 3
    4f6a:	06 c0       	rjmp	.+12     	; 0x4f78 <Update_V1_0_to_V1_1+0x332>
		{
			if (P1_scale & (1 << AccRollScale))
    4f6c:	43 fe       	sbrs	r4, 3
    4f6e:	02 c0       	rjmp	.+4      	; 0x4f74 <Update_V1_0_to_V1_1+0x32e>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    4f70:	90 82       	st	Z, r9
    4f72:	03 c0       	rjmp	.+6      	; 0x4f7a <Update_V1_0_to_V1_1+0x334>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    4f74:	80 82       	st	Z, r8
    4f76:	01 c0       	rjmp	.+2      	; 0x4f7a <Update_V1_0_to_V1_1+0x334>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    4f78:	10 82       	st	Z, r1
		// P2 roll acc
		if (P2_sensors & (1 << RollAcc))
		{
			if (P2_scale & (1 << AccRollScale))
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    4f7a:	c5 5b       	subi	r28, 0xB5	; 181
    4f7c:	de 4f       	sbci	r29, 0xFE	; 254
    4f7e:	e8 81       	ld	r30, Y
    4f80:	f9 81       	ldd	r31, Y+1	; 0x01
    4f82:	cb 54       	subi	r28, 0x4B	; 75
    4f84:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if (P2_sensors & (1 << RollAcc))
    4f86:	53 fe       	sbrs	r5, 3
    4f88:	06 c0       	rjmp	.+12     	; 0x4f96 <Update_V1_0_to_V1_1+0x350>
		{
			if (P2_scale & (1 << AccRollScale))
    4f8a:	63 fe       	sbrs	r6, 3
    4f8c:	02 c0       	rjmp	.+4      	; 0x4f92 <Update_V1_0_to_V1_1+0x34c>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    4f8e:	90 82       	st	Z, r9
    4f90:	03 c0       	rjmp	.+6      	; 0x4f98 <Update_V1_0_to_V1_1+0x352>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    4f92:	80 82       	st	Z, r8
    4f94:	01 c0       	rjmp	.+2      	; 0x4f98 <Update_V1_0_to_V1_1+0x352>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    4f96:	10 82       	st	Z, r1
		// P1 pitch acc
		if (P1_sensors & (1 << PitchAcc))
		{
			if (P1_scale & (1 << AccPitchScale))
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    4f98:	cb 5b       	subi	r28, 0xBB	; 187
    4f9a:	de 4f       	sbci	r29, 0xFE	; 254
    4f9c:	e8 81       	ld	r30, Y
    4f9e:	f9 81       	ldd	r31, Y+1	; 0x01
    4fa0:	c5 54       	subi	r28, 0x45	; 69
    4fa2:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if (P1_sensors & (1 << PitchAcc))
    4fa4:	74 fe       	sbrs	r7, 4
    4fa6:	06 c0       	rjmp	.+12     	; 0x4fb4 <Update_V1_0_to_V1_1+0x36e>
		{
			if (P1_scale & (1 << AccPitchScale))
    4fa8:	44 fe       	sbrs	r4, 4
    4faa:	02 c0       	rjmp	.+4      	; 0x4fb0 <Update_V1_0_to_V1_1+0x36a>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    4fac:	90 82       	st	Z, r9
    4fae:	03 c0       	rjmp	.+6      	; 0x4fb6 <Update_V1_0_to_V1_1+0x370>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    4fb0:	80 82       	st	Z, r8
    4fb2:	01 c0       	rjmp	.+2      	; 0x4fb6 <Update_V1_0_to_V1_1+0x370>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    4fb4:	10 82       	st	Z, r1
		// P2 pitch acc
		if (P2_sensors & (1 << PitchAcc))
		{
			if (P2_scale & (1 << AccPitchScale))
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    4fb6:	c9 5b       	subi	r28, 0xB9	; 185
    4fb8:	de 4f       	sbci	r29, 0xFE	; 254
    4fba:	e8 81       	ld	r30, Y
    4fbc:	f9 81       	ldd	r31, Y+1	; 0x01
    4fbe:	c7 54       	subi	r28, 0x47	; 71
    4fc0:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if (P2_sensors & (1 << PitchAcc))
    4fc2:	54 fe       	sbrs	r5, 4
    4fc4:	06 c0       	rjmp	.+12     	; 0x4fd2 <Update_V1_0_to_V1_1+0x38c>
		{
			if (P2_scale & (1 << AccPitchScale))
    4fc6:	64 fe       	sbrs	r6, 4
    4fc8:	02 c0       	rjmp	.+4      	; 0x4fce <Update_V1_0_to_V1_1+0x388>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    4fca:	90 82       	st	Z, r9
    4fcc:	03 c0       	rjmp	.+6      	; 0x4fd4 <Update_V1_0_to_V1_1+0x38e>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    4fce:	80 82       	st	Z, r8
    4fd0:	01 c0       	rjmp	.+2      	; 0x4fd4 <Update_V1_0_to_V1_1+0x38e>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    4fd2:	10 82       	st	Z, r1
		// P1 Z delta acc
		if (P1_sensors & (1 << ZDeltaAcc))
		{
			if (P1_scale & (1 << AccZScale))
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    4fd4:	cf 5b       	subi	r28, 0xBF	; 191
    4fd6:	de 4f       	sbci	r29, 0xFE	; 254
    4fd8:	e8 81       	ld	r30, Y
    4fda:	f9 81       	ldd	r31, Y+1	; 0x01
    4fdc:	c1 54       	subi	r28, 0x41	; 65
    4fde:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if (P1_sensors & (1 << ZDeltaAcc))
    4fe0:	75 fe       	sbrs	r7, 5
    4fe2:	06 c0       	rjmp	.+12     	; 0x4ff0 <Update_V1_0_to_V1_1+0x3aa>
		{
			if (P1_scale & (1 << AccZScale))
    4fe4:	45 fe       	sbrs	r4, 5
    4fe6:	02 c0       	rjmp	.+4      	; 0x4fec <Update_V1_0_to_V1_1+0x3a6>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    4fe8:	90 82       	st	Z, r9
    4fea:	03 c0       	rjmp	.+6      	; 0x4ff2 <Update_V1_0_to_V1_1+0x3ac>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    4fec:	80 82       	st	Z, r8
    4fee:	01 c0       	rjmp	.+2      	; 0x4ff2 <Update_V1_0_to_V1_1+0x3ac>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    4ff0:	10 82       	st	Z, r1
		// P2 Z delta acc
		if (P2_sensors & (1 << ZDeltaAcc))
		{
			if (P2_scale & (1 << AccZScale))
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    4ff2:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if (P2_sensors & (1 << ZDeltaAcc))
    4ff4:	55 fe       	sbrs	r5, 5
    4ff6:	06 c0       	rjmp	.+12     	; 0x5004 <Update_V1_0_to_V1_1+0x3be>
		{
			if (P2_scale & (1 << AccZScale))
    4ff8:	65 fe       	sbrs	r6, 5
    4ffa:	02 c0       	rjmp	.+4      	; 0x5000 <Update_V1_0_to_V1_1+0x3ba>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    4ffc:	90 82       	st	Z, r9
    4ffe:	03 c0       	rjmp	.+6      	; 0x5006 <Update_V1_0_to_V1_1+0x3c0>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    5000:	80 82       	st	Z, r8
    5002:	01 c0       	rjmp	.+2      	; 0x5006 <Update_V1_0_to_V1_1+0x3c0>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    5004:	10 82       	st	Z, r1
    5006:	c2 5b       	subi	r28, 0xB2	; 178
    5008:	de 4f       	sbci	r29, 0xFE	; 254
    500a:	88 81       	ld	r24, Y
    500c:	99 81       	ldd	r25, Y+1	; 0x01
    500e:	ce 54       	subi	r28, 0x4E	; 78
    5010:	d1 40       	sbci	r29, 0x01	; 1
    5012:	86 96       	adiw	r24, 0x26	; 38
    5014:	c2 5b       	subi	r28, 0xB2	; 178
    5016:	de 4f       	sbci	r29, 0xFE	; 254
    5018:	99 83       	std	Y+1, r25	; 0x01
    501a:	88 83       	st	Y, r24
    501c:	ce 54       	subi	r28, 0x4E	; 78
    501e:	d1 40       	sbci	r29, 0x01	; 1
    5020:	96 e2       	ldi	r25, 0x26	; 38
    5022:	c9 0e       	add	r12, r25
    5024:	d1 1c       	adc	r13, r1
    5026:	c3 5c       	subi	r28, 0xC3	; 195
    5028:	de 4f       	sbci	r29, 0xFE	; 254
    502a:	e8 81       	ld	r30, Y
    502c:	f9 81       	ldd	r31, Y+1	; 0x01
    502e:	cd 53       	subi	r28, 0x3D	; 61
    5030:	d1 40       	sbci	r29, 0x01	; 1
    5032:	b6 96       	adiw	r30, 0x26	; 38
    5034:	c3 5c       	subi	r28, 0xC3	; 195
    5036:	de 4f       	sbci	r29, 0xFE	; 254
    5038:	f9 83       	std	Y+1, r31	; 0x01
    503a:	e8 83       	st	Y, r30
    503c:	cd 53       	subi	r28, 0x3D	; 61
    503e:	d1 40       	sbci	r29, 0x01	; 1
    5040:	c1 5c       	subi	r28, 0xC1	; 193
    5042:	de 4f       	sbci	r29, 0xFE	; 254
    5044:	88 81       	ld	r24, Y
    5046:	99 81       	ldd	r25, Y+1	; 0x01
    5048:	cf 53       	subi	r28, 0x3F	; 63
    504a:	d1 40       	sbci	r29, 0x01	; 1
    504c:	86 96       	adiw	r24, 0x26	; 38
    504e:	c1 5c       	subi	r28, 0xC1	; 193
    5050:	de 4f       	sbci	r29, 0xFE	; 254
    5052:	99 83       	std	Y+1, r25	; 0x01
    5054:	88 83       	st	Y, r24
    5056:	cf 53       	subi	r28, 0x3F	; 63
    5058:	d1 40       	sbci	r29, 0x01	; 1
    505a:	96 e2       	ldi	r25, 0x26	; 38
    505c:	29 0e       	add	r2, r25
    505e:	31 1c       	adc	r3, r1
    5060:	0a 5d       	subi	r16, 0xDA	; 218
    5062:	1f 4f       	sbci	r17, 0xFF	; 255
    5064:	cf 5b       	subi	r28, 0xBF	; 191
    5066:	de 4f       	sbci	r29, 0xFE	; 254
    5068:	e8 81       	ld	r30, Y
    506a:	f9 81       	ldd	r31, Y+1	; 0x01
    506c:	c1 54       	subi	r28, 0x41	; 65
    506e:	d1 40       	sbci	r29, 0x01	; 1
    5070:	b6 96       	adiw	r30, 0x26	; 38
    5072:	cf 5b       	subi	r28, 0xBF	; 191
    5074:	de 4f       	sbci	r29, 0xFE	; 254
    5076:	f9 83       	std	Y+1, r31	; 0x01
    5078:	e8 83       	st	Y, r30
    507a:	c1 54       	subi	r28, 0x41	; 65
    507c:	d1 40       	sbci	r29, 0x01	; 1
    507e:	c9 5b       	subi	r28, 0xB9	; 185
    5080:	de 4f       	sbci	r29, 0xFE	; 254
    5082:	88 81       	ld	r24, Y
    5084:	99 81       	ldd	r25, Y+1	; 0x01
    5086:	c7 54       	subi	r28, 0x47	; 71
    5088:	d1 40       	sbci	r29, 0x01	; 1
    508a:	86 96       	adiw	r24, 0x26	; 38
    508c:	c9 5b       	subi	r28, 0xB9	; 185
    508e:	de 4f       	sbci	r29, 0xFE	; 254
    5090:	99 83       	std	Y+1, r25	; 0x01
    5092:	88 83       	st	Y, r24
    5094:	c7 54       	subi	r28, 0x47	; 71
    5096:	d1 40       	sbci	r29, 0x01	; 1
    5098:	cb 5b       	subi	r28, 0xBB	; 187
    509a:	de 4f       	sbci	r29, 0xFE	; 254
    509c:	e8 81       	ld	r30, Y
    509e:	f9 81       	ldd	r31, Y+1	; 0x01
    50a0:	c5 54       	subi	r28, 0x45	; 69
    50a2:	d1 40       	sbci	r29, 0x01	; 1
    50a4:	b6 96       	adiw	r30, 0x26	; 38
    50a6:	cb 5b       	subi	r28, 0xBB	; 187
    50a8:	de 4f       	sbci	r29, 0xFE	; 254
    50aa:	f9 83       	std	Y+1, r31	; 0x01
    50ac:	e8 83       	st	Y, r30
    50ae:	c5 54       	subi	r28, 0x45	; 69
    50b0:	d1 40       	sbci	r29, 0x01	; 1
    50b2:	c5 5b       	subi	r28, 0xB5	; 181
    50b4:	de 4f       	sbci	r29, 0xFE	; 254
    50b6:	88 81       	ld	r24, Y
    50b8:	99 81       	ldd	r25, Y+1	; 0x01
    50ba:	cb 54       	subi	r28, 0x4B	; 75
    50bc:	d1 40       	sbci	r29, 0x01	; 1
    50be:	86 96       	adiw	r24, 0x26	; 38
    50c0:	c5 5b       	subi	r28, 0xB5	; 181
    50c2:	de 4f       	sbci	r29, 0xFE	; 254
    50c4:	99 83       	std	Y+1, r25	; 0x01
    50c6:	88 83       	st	Y, r24
    50c8:	cb 54       	subi	r28, 0x4B	; 75
    50ca:	d1 40       	sbci	r29, 0x01	; 1
    50cc:	cd 5b       	subi	r28, 0xBD	; 189
    50ce:	de 4f       	sbci	r29, 0xFE	; 254
    50d0:	e8 81       	ld	r30, Y
    50d2:	f9 81       	ldd	r31, Y+1	; 0x01
    50d4:	c3 54       	subi	r28, 0x43	; 67
    50d6:	d1 40       	sbci	r29, 0x01	; 1
    50d8:	b6 96       	adiw	r30, 0x26	; 38
    50da:	cd 5b       	subi	r28, 0xBD	; 189
    50dc:	de 4f       	sbci	r29, 0xFE	; 254
    50de:	f9 83       	std	Y+1, r31	; 0x01
    50e0:	e8 83       	st	Y, r30
    50e2:	c3 54       	subi	r28, 0x43	; 67
    50e4:	d1 40       	sbci	r29, 0x01	; 1
    50e6:	c7 5b       	subi	r28, 0xB7	; 183
    50e8:	de 4f       	sbci	r29, 0xFE	; 254
    50ea:	88 81       	ld	r24, Y
    50ec:	99 81       	ldd	r25, Y+1	; 0x01
    50ee:	c9 54       	subi	r28, 0x49	; 73
    50f0:	d1 40       	sbci	r29, 0x01	; 1
    50f2:	86 96       	adiw	r24, 0x26	; 38
    50f4:	c7 5b       	subi	r28, 0xB7	; 183
    50f6:	de 4f       	sbci	r29, 0xFE	; 254
    50f8:	99 83       	std	Y+1, r25	; 0x01
    50fa:	88 83       	st	Y, r24
    50fc:	c9 54       	subi	r28, 0x49	; 73
    50fe:	d1 40       	sbci	r29, 0x01	; 1
    5100:	96 e2       	ldi	r25, 0x26	; 38
    5102:	e9 0e       	add	r14, r25
    5104:	f1 1c       	adc	r15, r1
    5106:	e6 e2       	ldi	r30, 0x26	; 38
    5108:	ae 0e       	add	r10, r30
    510a:	b1 1c       	adc	r11, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time
	for (i = 0; i < MAX_OUTPUTS; i++)
    510c:	cf 5a       	subi	r28, 0xAF	; 175
    510e:	de 4f       	sbci	r29, 0xFE	; 254
    5110:	88 81       	ld	r24, Y
    5112:	99 81       	ldd	r25, Y+1	; 0x01
    5114:	c1 55       	subi	r28, 0x51	; 81
    5116:	d1 40       	sbci	r29, 0x01	; 1
    5118:	08 17       	cp	r16, r24
    511a:	19 07       	cpc	r17, r25
    511c:	09 f0       	breq	.+2      	; 0x5120 <Update_V1_0_to_V1_1+0x4da>
    511e:	86 ce       	rjmp	.-756    	; 0x4e2c <Update_V1_0_to_V1_1+0x1e6>
	}
	
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)((&Config.setup) + (CHANNEL_V1_0));
	memcpy(dst, src, sizeof(mixer_buffer));
    5120:	80 e3       	ldi	r24, 0x30	; 48
    5122:	91 e0       	ldi	r25, 0x01	; 1
    5124:	fe 01       	movw	r30, r28
    5126:	31 96       	adiw	r30, 0x01	; 1
    5128:	aa ea       	ldi	r26, 0xAA	; 170
    512a:	b6 e0       	ldi	r27, 0x06	; 6
    512c:	01 90       	ld	r0, Z+
    512e:	0d 92       	st	X+, r0
    5130:	01 97       	sbiw	r24, 0x01	; 1
    5132:	e1 f7       	brne	.-8      	; 0x512c <Update_V1_0_to_V1_1+0x4e6>
    5134:	27 30       	cpi	r18, 0x07	; 7
    5136:	30 f4       	brcc	.+12     	; 0x5144 <Update_V1_0_to_V1_1+0x4fe>
    5138:	e2 2f       	mov	r30, r18
    513a:	f0 e0       	ldi	r31, 0x00	; 0
    513c:	e1 5f       	subi	r30, 0xF1	; 241
    513e:	fa 4f       	sbci	r31, 0xFA	; 250
    5140:	80 81       	ld	r24, Z
    5142:	01 c0       	rjmp	.+2      	; 0x5146 <Update_V1_0_to_V1_1+0x500>
	
	// Convert old filter values to more appropriate ones
	memcpy((void*)&temp,(void*)((&Config.setup) + (GENITEMS_V1_0 + 6)),1);		// Config.Acc_LPF
	temp = convert_filter_V1_0_V1_1(temp);
    5144:	87 e0       	ldi	r24, 0x07	; 7
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 + 6)), &temp, 1);
    5146:	80 93 a6 06 	sts	0x06A6, r24
    514a:	c3 5b       	subi	r28, 0xB3	; 179
    514c:	de 4f       	sbci	r29, 0xFE	; 254
    514e:	38 81       	ld	r19, Y
    5150:	cd 54       	subi	r28, 0x4D	; 77
    5152:	d1 40       	sbci	r29, 0x01	; 1
    5154:	37 30       	cpi	r19, 0x07	; 7
    5156:	30 f4       	brcc	.+12     	; 0x5164 <Update_V1_0_to_V1_1+0x51e>
    5158:	e3 2f       	mov	r30, r19
    515a:	f0 e0       	ldi	r31, 0x00	; 0
    515c:	e1 5f       	subi	r30, 0xF1	; 241
    515e:	fa 4f       	sbci	r31, 0xFA	; 250
    5160:	80 81       	ld	r24, Z
    5162:	01 c0       	rjmp	.+2      	; 0x5166 <Update_V1_0_to_V1_1+0x520>

	memcpy((void*)&temp,(void*)((&Config.setup) + (GENITEMS_V1_0 + 7)),1);		// Config.Gyro_LPF
	temp = convert_filter_V1_0_V1_1(temp);
    5164:	87 e0       	ldi	r24, 0x07	; 7
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 + 7)), &temp, 1);	
    5166:	80 93 a7 06 	sts	0x06A7, r24
	
	// Finally, copy the RudderPol value up into its new location
	memcpy((void*)((&Config.setup) + (RUDDERPOL_V1_1)),(void*)&buffer[9],1);	// RudderPol
    516a:	c0 5b       	subi	r28, 0xB0	; 176
    516c:	de 4f       	sbci	r29, 0xFE	; 254
    516e:	38 81       	ld	r19, Y
    5170:	c0 55       	subi	r28, 0x50	; 80
    5172:	d1 40       	sbci	r29, 0x01	; 1
    5174:	30 93 20 08 	sts	0x0820, r19
}
    5178:	cd 5a       	subi	r28, 0xAD	; 173
    517a:	de 4f       	sbci	r29, 0xFE	; 254
    517c:	0f b6       	in	r0, 0x3f	; 63
    517e:	f8 94       	cli
    5180:	de bf       	out	0x3e, r29	; 62
    5182:	0f be       	out	0x3f, r0	; 63
    5184:	cd bf       	out	0x3d, r28	; 61
    5186:	df 91       	pop	r29
    5188:	cf 91       	pop	r28
    518a:	1f 91       	pop	r17
    518c:	0f 91       	pop	r16
    518e:	ff 90       	pop	r15
    5190:	ef 90       	pop	r14
    5192:	df 90       	pop	r13
    5194:	cf 90       	pop	r12
    5196:	bf 90       	pop	r11
    5198:	af 90       	pop	r10
    519a:	9f 90       	pop	r9
    519c:	8f 90       	pop	r8
    519e:	7f 90       	pop	r7
    51a0:	6f 90       	pop	r6
    51a2:	5f 90       	pop	r5
    51a4:	4f 90       	pop	r4
    51a6:	3f 90       	pop	r3
    51a8:	2f 90       	pop	r2
    51aa:	08 95       	ret

000051ac <Update_V1_1_to_V1_2>:

// Upgrade V1.1 structure to V1.2
void Update_V1_1_to_V1_2(void)
{
    51ac:	cf 93       	push	r28
    51ae:	e0 91 a8 06 	lds	r30, 0x06A8
    51b2:	e1 50       	subi	r30, 0x01	; 1
    51b4:	ea 30       	cpi	r30, 0x0A	; 10
    51b6:	28 f4       	brcc	.+10     	; 0x51c2 <Update_V1_1_to_V1_2+0x16>
    51b8:	f0 e0       	ldi	r31, 0x00	; 0
    51ba:	e5 5e       	subi	r30, 0xE5	; 229
    51bc:	fa 4f       	sbci	r31, 0xFA	; 250
    51be:	80 81       	ld	r24, Z
    51c0:	01 c0       	rjmp	.+2      	; 0x51c4 <Update_V1_1_to_V1_2+0x18>
	memcpy((void*)&temp,(void*)((&Config.setup) + (ALCORRECT_V1_1)),1);			// Config.CF_factor

	// Convert old Config.CF_factor to new
	// (old) 1 = 10% 2 = 11%, 3 = 12.5%, 4 = 14%, 5 = 17%, 60= 20%, 7 = 25%, 8 = 33%, 9 = 50%, 10 = 100%
	// (newest) 11 = 10%, 10 = 20%, 9 = 30%, 8 = 40%, 7 = 50%, 6 = 60%, 5 = 70%, 4 = 80%, 3 = 90%, 2 = 100%
	switch(temp)
    51c2:	86 e0       	ldi	r24, 0x06	; 6
			temp = 6;
			break;		
	}
	
	// Write updated Config.CF_factor value
	memcpy((void*)((&Config.setup) + (ALCORRECT_V1_1)),(void*)&temp,1);
    51c4:	80 93 a8 06 	sts	0x06A8, r24
		
	// Copy AileronPol from RCitems to its new location
	memcpy((void*)((&Config.setup) + (RUDDERPOL_V1_1 + 1)),(void*)((&Config.setup) + (RCITEMS_V1_0 + 7)),1);
    51c8:	80 91 48 06 	lds	r24, 0x0648
    51cc:	80 93 21 08 	sts	0x0821, r24
	
	// Set the new Vibe value to OFF
	memset((void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), OFF, 1);
    51d0:	10 92 48 06 	sts	0x0648, r1
    51d4:	e0 91 a0 06 	lds	r30, 0x06A0
    51d8:	e1 50       	subi	r30, 0x01	; 1
    51da:	e5 30       	cpi	r30, 0x05	; 5
    51dc:	28 f4       	brcc	.+10     	; 0x51e8 <Update_V1_1_to_V1_2+0x3c>
    51de:	f0 e0       	ldi	r31, 0x00	; 0
    51e0:	ea 5e       	subi	r30, 0xEA	; 234
    51e2:	fa 4f       	sbci	r31, 0xFA	; 250
    51e4:	c0 81       	ld	r28, Z
    51e6:	01 c0       	rjmp	.+2      	; 0x51ea <Update_V1_1_to_V1_2+0x3e>

	// Update the orientation byte to be the P2 orientation
	memcpy((void*)&Orientation_P2,(void*)((&Config.setup) + (GENITEMS_V1_0)),1);
	
	// Convert to new 24-orientation system
	switch(Orientation_P2)
    51e8:	c0 e0       	ldi	r28, 0x00	; 0
			Orientation_P2 = UP_BACK;
			break;	
	}

	// Clear new data area at end of data											// Log pointer onwards
	memset((void*)((&Config.setup) + (V1_2_NEWDATA)), 0, 43);
    51ea:	8b e2       	ldi	r24, 0x2B	; 43
    51ec:	e2 e2       	ldi	r30, 0x22	; 34
    51ee:	f8 e0       	ldi	r31, 0x08	; 8
    51f0:	df 01       	movw	r26, r30
    51f2:	1d 92       	st	X+, r1
    51f4:	8a 95       	dec	r24
    51f6:	e9 f7       	brne	.-6      	; 0x51f2 <Update_V1_1_to_V1_2+0x46>
	
	// Move everything from Config.Contrast up by one byte to make room for Config.P1_Reference	
	// AileronPol has already been moved up past RudderPol so we need to add one byte
	memmove((void*)((&Config.setup) + (GENITEMS_V1_0 + 2)), (void*)((&Config.setup) + (GENITEMS_V1_0 + 1)), ((RUDDERPOL_V1_1 + 1) - (GENITEMS_V1_0 + 1))); // (520 + 1 - 136 + 1 = 386 bytes)
    51f8:	40 e8       	ldi	r20, 0x80	; 128
    51fa:	51 e0       	ldi	r21, 0x01	; 1
    51fc:	61 ea       	ldi	r22, 0xA1	; 161
    51fe:	76 e0       	ldi	r23, 0x06	; 6
    5200:	82 ea       	ldi	r24, 0xA2	; 162
    5202:	96 e0       	ldi	r25, 0x06	; 6
    5204:	0e 94 cf 6c 	call	0xd99e	; 0xd99e <memmove>

	// Save updated orientation
	memcpy((void*)((&Config.setup) + (GENITEMS_V1_0 )),(void*)&Orientation_P2,1);	// Updated P2 orientation value
    5208:	c0 93 a0 06 	sts	0x06A0, r28
	memset((void*)((&Config.setup) + (GENITEMS_V1_0 + 1)), NO_ORIENT, 1);			// New P1_Reference
    520c:	10 92 a1 06 	sts	0x06A1, r1
	
}
    5210:	cf 91       	pop	r28
    5212:	08 95       	ret

00005214 <Update_V1_2_to_V1_3B1>:

// Upgrade V1.2 structure to V1.3
void Update_V1_2_to_V1_3B1(void)
{
    5214:	ef ec       	ldi	r30, 0xCF	; 207
    5216:	f6 e0       	ldi	r31, 0x06	; 6
    5218:	df 01       	movw	r26, r30
    521a:	16 97       	sbiw	r26, 0x06	; 6

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    521c:	8c 91       	ld	r24, X
    521e:	8c 5f       	subi	r24, 0xFC	; 252
	
	// Update all source settings in output mixers
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), 1);	// P1_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    5220:	8c 93       	st	X, r24
    5222:	12 96       	adiw	r26, 0x02	; 2

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    5224:	8c 91       	ld	r24, X
    5226:	8c 5f       	subi	r24, 0xFC	; 252
	{
		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), 1);	// P1_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 30 + (i * 38))), convert_source_V1_2_V1_3(source), 1);

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), 1);	// P2_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    5228:	8c 93       	st	X, r24
    522a:	12 96       	adiw	r26, 0x02	; 2

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    522c:	8c 91       	ld	r24, X
    522e:	8c 5f       	subi	r24, 0xFC	; 252

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), 1);	// P2_source_a
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 32 + (i * 38))), convert_source_V1_2_V1_3(source), 1);

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), 1);	// P1_source_b
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    5230:	8c 93       	st	X, r24

	// V1.3 Source list (20 items)
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, 
	// ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, NONE (19)

	new_source = old_source + 4;
    5232:	80 81       	ld	r24, Z
    5234:	8c 5f       	subi	r24, 0xFC	; 252

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), 1);	// P1_source_b
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 34 + (i * 38))), convert_source_V1_2_V1_3(source), 1);

		memcpy((void*)&source, (void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 36 + (i * 38))), 1);	// P2_source_b
		memset((void*)((&Config.setup) + (CHANNEL_V1_3_B1 + 36 + (i * 38))), convert_source_V1_2_V1_3(source), 1);
    5236:	80 83       	st	Z, r24
    5238:	b6 96       	adiw	r30, 0x26	; 38
	
	// So why all this weird code? Rememeber we cannot use any structure references in *this code* to reference old structures.
	// As such all references must be hard-coded with offsets to the version they were originally compiled with.
	
	// Update all source settings in output mixers
	for (i = 0; i < MAX_OUTPUTS; i++)
    523a:	67 e0       	ldi	r22, 0x07	; 7
    523c:	ef 3f       	cpi	r30, 0xFF	; 255
    523e:	f6 07       	cpc	r31, r22
    5240:	59 f7       	brne	.-42     	; 0x5218 <Update_V1_2_to_V1_3B1+0x4>

	// Set new data to defaults
	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), 0, 1);		// Config.Curve[i].Point1
    5242:	10 92 4b 08 	sts	0x084B, r1
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), 17, 1);	// Config.Curve[i].Point2
    5246:	51 e1       	ldi	r21, 0x11	; 17
    5248:	50 93 4c 08 	sts	0x084C, r21
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), 33, 1);	// Config.Curve[i].Point3
    524c:	41 e2       	ldi	r20, 0x21	; 33
    524e:	40 93 4d 08 	sts	0x084D, r20
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 50, 1);	// Config.Curve[i].Point4
    5252:	32 e3       	ldi	r19, 0x32	; 50
    5254:	30 93 4e 08 	sts	0x084E, r19
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 67, 1);	// Config.Curve[i].Point5
    5258:	23 e4       	ldi	r18, 0x43	; 67
    525a:	20 93 4f 08 	sts	0x084F, r18
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 83, 1);	// Config.Curve[i].Point6
    525e:	93 e5       	ldi	r25, 0x53	; 83
    5260:	90 93 50 08 	sts	0x0850, r25
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
    5264:	84 e6       	ldi	r24, 0x64	; 100
    5266:	80 93 51 08 	sts	0x0851, r24

	// Set new data to defaults
	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), 0, 1);		// Config.Curve[i].Point1
    526a:	10 92 53 08 	sts	0x0853, r1
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), 17, 1);	// Config.Curve[i].Point2
    526e:	50 93 54 08 	sts	0x0854, r21
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), 33, 1);	// Config.Curve[i].Point3
    5272:	40 93 55 08 	sts	0x0855, r20
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 50, 1);	// Config.Curve[i].Point4
    5276:	30 93 56 08 	sts	0x0856, r19
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 67, 1);	// Config.Curve[i].Point5
    527a:	20 93 57 08 	sts	0x0857, r18
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 83, 1);	// Config.Curve[i].Point6
    527e:	90 93 58 08 	sts	0x0858, r25
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
    5282:	80 93 59 08 	sts	0x0859, r24
    5286:	eb e5       	ldi	r30, 0x5B	; 91
    5288:	f8 e0       	ldi	r31, 0x08	; 8
	}

	// Curves 2 to 6
	for (i = 2; i < NUMBEROFCURVES; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), -100, 1);	// Config.Curve[i].Point1
    528a:	5c e9       	ldi	r21, 0x9C	; 156
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), -67, 1);	// Config.Curve[i].Point2
    528c:	4d eb       	ldi	r20, 0xBD	; 189
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), -33, 1);	// Config.Curve[i].Point3
    528e:	3f ed       	ldi	r19, 0xDF	; 223
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 0, 1);		// Config.Curve[i].Point4
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 33, 1);	// Config.Curve[i].Point5
    5290:	21 e2       	ldi	r18, 0x21	; 33
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 67, 1);	// Config.Curve[i].Point6
    5292:	93 e4       	ldi	r25, 0x43	; 67
	}

	// Curves 2 to 6
	for (i = 2; i < NUMBEROFCURVES; i++)
	{
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 0 + (8 * i))), -100, 1);	// Config.Curve[i].Point1
    5294:	50 83       	st	Z, r21
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 1 + (8 * i))), -67, 1);	// Config.Curve[i].Point2
    5296:	41 83       	std	Z+1, r20	; 0x01
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 2 + (8 * i))), -33, 1);	// Config.Curve[i].Point3
    5298:	32 83       	std	Z+2, r19	; 0x02
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 3 + (8 * i))), 0, 1);		// Config.Curve[i].Point4
    529a:	13 82       	std	Z+3, r1	; 0x03
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 4 + (8 * i))), 33, 1);	// Config.Curve[i].Point5
    529c:	24 83       	std	Z+4, r18	; 0x04
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 67, 1);	// Config.Curve[i].Point6
    529e:	95 83       	std	Z+5, r25	; 0x05
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
    52a0:	86 83       	std	Z+6, r24	; 0x06
    52a2:	38 96       	adiw	r30, 0x08	; 8
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 83, 1);	// Config.Curve[i].Point6
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
	}

	// Curves 2 to 6
	for (i = 2; i < NUMBEROFCURVES; i++)
    52a4:	68 e0       	ldi	r22, 0x08	; 8
    52a6:	eb 37       	cpi	r30, 0x7B	; 123
    52a8:	f6 07       	cpc	r31, r22
    52aa:	a1 f7       	brne	.-24     	; 0x5294 <Update_V1_2_to_V1_3B1+0x80>
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 5 + (8 * i))), 67, 1);	// Config.Curve[i].Point6
		memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 6 + (8 * i))), 100, 1);	// Config.Curve[i].Point7
	}

	// Set curve channel sources
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 7)), THROTTLE, 1);	// Config.Curve[0].channel
    52ac:	10 92 52 08 	sts	0x0852, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 15)), THROTTLE, 1);	// Config.Curve[1].channel
    52b0:	10 92 5a 08 	sts	0x085A, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 23)), THROTTLE, 1);	// Config.Curve[2].channel
    52b4:	10 92 62 08 	sts	0x0862, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 31)), THROTTLE, 1);	// Config.Curve[3].channel
    52b8:	10 92 6a 08 	sts	0x086A, r1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 39)), NOMIX, 1);		// Config.Curve[4].channel
    52bc:	84 e1       	ldi	r24, 0x14	; 20
    52be:	80 93 72 08 	sts	0x0872, r24
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 47)), NOMIX, 1);		// Config.Curve[5].channel
    52c2:	80 93 7a 08 	sts	0x087A, r24
    52c6:	80 e0       	ldi	r24, 0x00	; 0
    52c8:	90 e0       	ldi	r25, 0x00	; 0
    52ca:	fc 01       	movw	r30, r24
    52cc:	e4 52       	subi	r30, 0x24	; 36
    52ce:	fe 4f       	sbci	r31, 0xFE	; 254

	// Preset custom channel order to JR
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		memset((void*)((&Config.setup) + (CUSTOM_CH_ORD_V1_3_B1 + i)), pgm_read_byte(&JR[i]), 1);
    52d0:	e4 91       	lpm	r30, Z
    52d2:	dc 01       	movw	r26, r24
    52d4:	a5 58       	subi	r26, 0x85	; 133
    52d6:	b7 4f       	sbci	r27, 0xF7	; 247
    52d8:	ec 93       	st	X, r30
    52da:	01 96       	adiw	r24, 0x01	; 1
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 31)), THROTTLE, 1);	// Config.Curve[3].channel
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 39)), NOMIX, 1);		// Config.Curve[4].channel
	memset((void*)((&Config.setup) + (CURVES_V1_3B1 + 47)), NOMIX, 1);		// Config.Curve[5].channel

	// Preset custom channel order to JR
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    52dc:	88 30       	cpi	r24, 0x08	; 8
    52de:	91 05       	cpc	r25, r1
    52e0:	a1 f7       	brne	.-24     	; 0x52ca <Update_V1_2_to_V1_3B1+0xb6>
	{
		memset((void*)((&Config.setup) + (CUSTOM_CH_ORD_V1_3_B1 + i)), pgm_read_byte(&JR[i]), 1);
	}
}
    52e2:	08 95       	ret

000052e4 <Update_V1_3B1_to_V1_3B14>:

void Update_V1_3B1_to_V1_3B14(void)
{
    52e4:	1f 93       	push	r17
    52e6:	cf 93       	push	r28
    52e8:	df 93       	push	r29
	int8_t TransitionSpeedOut = 0;
	
	// Copy Config.TransitionSpeedOut locally
	memcpy((void*)&TransitionSpeedOut, (void*)((&Config.setup) + (RCITEMS_V1_0 + 5)), 1);
    52ea:	c8 e1       	ldi	r28, 0x18	; 24
    52ec:	d6 e0       	ldi	r29, 0x06	; 6
    52ee:	1e a5       	ldd	r17, Y+46	; 0x2e
	
	// Move everything from Config.Transition_P1n up by one byte to make room for Config.TransitionSpeedIn
	memmove((void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), (void*)((&Config.setup) + (RCITEMS_V1_0 + 6)), (LAST_BYTE_V1_3B14 - (RCITEMS_V1_0 + 6))); // 619 - (41 + 6) = 572 bytes)
    52f0:	4c e3       	ldi	r20, 0x3C	; 60
    52f2:	52 e0       	ldi	r21, 0x02	; 2
    52f4:	67 e4       	ldi	r22, 0x47	; 71
    52f6:	76 e0       	ldi	r23, 0x06	; 6
    52f8:	88 e4       	ldi	r24, 0x48	; 72
    52fa:	96 e0       	ldi	r25, 0x06	; 6
    52fc:	0e 94 cf 6c 	call	0xd99e	; 0xd99e <memmove>

	// Preset new variable to same as TransitionSpeedOut;
	Config.TransitionSpeedIn = TransitionSpeedOut;
    5300:	10 93 47 06 	sts	0x0647, r17

	// Set magic number to V1.3 B1 signature
	Config.setup = V1_3_B14_SIGNATURE;
    5304:	8f e3       	ldi	r24, 0x3F	; 63
    5306:	88 83       	st	Y, r24
}
    5308:	df 91       	pop	r29
    530a:	cf 91       	pop	r28
    530c:	1f 91       	pop	r17
    530e:	08 95       	ret

00005310 <Update_V1_3B14_to_V1_3B15>:

// Upgrade V1.3 B14 structure to V1.3 B15 structure
void Update_V1_3B14_to_V1_3B15(void)
{
    5310:	0f 93       	push	r16
    5312:	1f 93       	push	r17
    5314:	cf 93       	push	r28
    5316:	df 93       	push	r29
    5318:	cd b7       	in	r28, 0x3d	; 61
    531a:	de b7       	in	r29, 0x3e	; 62
    531c:	c0 53       	subi	r28, 0x30	; 48
    531e:	d1 40       	sbci	r29, 0x01	; 1
    5320:	0f b6       	in	r0, 0x3f	; 63
    5322:	f8 94       	cli
    5324:	de bf       	out	0x3e, r29	; 62
    5326:	0f be       	out	0x3f, r0	; 63
    5328:	cd bf       	out	0x3d, r28	; 61
	uint8_t		*src;
	uint8_t		*dst;
	uint8_t		mixer_buffer[V1_3_OLDSIZE * 8];	// 38 * 8 = 304 bytes

	// Copy the old channel[] structure into buffer
	memcpy((void*)mixer_buffer, (void*)((&Config.setup) + (CHANNEL_V1_3_B14)), (V1_3_OLDSIZE * 8)); // 148, 38
    532a:	80 e3       	ldi	r24, 0x30	; 48
    532c:	91 e0       	ldi	r25, 0x01	; 1
    532e:	ec ea       	ldi	r30, 0xAC	; 172
    5330:	f6 e0       	ldi	r31, 0x06	; 6
    5332:	de 01       	movw	r26, r28
    5334:	11 96       	adiw	r26, 0x01	; 1
    5336:	01 90       	ld	r0, Z+
    5338:	0d 92       	st	X+, r0
    533a:	01 97       	sbiw	r24, 0x01	; 1
    533c:	e1 f7       	brne	.-8      	; 0x5336 <Update_V1_3B14_to_V1_3B15+0x26>
    533e:	8c ea       	ldi	r24, 0xAC	; 172
    5340:	96 e0       	ldi	r25, 0x06	; 6
    5342:	9e 01       	movw	r18, r28
    5344:	2f 5f       	subi	r18, 0xFF	; 255
    5346:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		dst = (void*)((&Config.setup) + (CHANNEL_V1_3_B15)); // 148
		src = (void*)mixer_buffer;
		dst += (i * V1_3_NEWSIZE);			// Step to next location for new data in the buffer
		src += (i * V1_3_OLDSIZE);			// Step to next old data in (corrupted) config structure
		memcpy(dst, src, 5);				// Move the five bytes (P1_value, P2_value and Motor_marker bytes)
    5348:	45 e0       	ldi	r20, 0x05	; 5
    534a:	f9 01       	movw	r30, r18
    534c:	dc 01       	movw	r26, r24
    534e:	54 2f       	mov	r21, r20
    5350:	01 90       	ld	r0, Z+
    5352:	0d 92       	st	X+, r0
    5354:	5a 95       	dec	r21
    5356:	e1 f7       	brne	.-8      	; 0x5350 <Update_V1_3B14_to_V1_3B15+0x40>
    5358:	82 96       	adiw	r24, 0x22	; 34
    535a:	2a 5d       	subi	r18, 0xDA	; 218
    535c:	3f 4f       	sbci	r19, 0xFF	; 255
	// Copy the old channel[] structure into buffer
	memcpy((void*)mixer_buffer, (void*)((&Config.setup) + (CHANNEL_V1_3_B14)), (V1_3_OLDSIZE * 8)); // 148, 38

	// Copy the old channel[] structure out of the buffer buffer, compressed to match the new (smaller) structure
	// Start with the P1_value, P2_value and Motor_marker bytes (5 bytes)
	for (i = 0; i < MAX_OUTPUTS; i++)
    535e:	57 e0       	ldi	r21, 0x07	; 7
    5360:	8c 3b       	cpi	r24, 0xBC	; 188
    5362:	95 07       	cpc	r25, r21
    5364:	91 f7       	brne	.-28     	; 0x534a <Update_V1_3B14_to_V1_3B15+0x3a>
    5366:	81 eb       	ldi	r24, 0xB1	; 177
    5368:	96 e0       	ldi	r25, 0x06	; 6
    536a:	9e 01       	movw	r18, r28
    536c:	26 5f       	subi	r18, 0xF6	; 246
    536e:	3f 4f       	sbci	r19, 0xFF	; 255
		dst = (void*)((&Config.setup) + (P1_THR_V1_3_B15)); // 153
		src = (void*)mixer_buffer;
		src += (P1_THR_V1_3_B14 - CHANNEL_V1_3_B15);	// 9 byte offset to P1_throttle_volume. 157 - 148 = 9
		dst += (i * V1_3_NEWSIZE);						// Step to next location for new data in the buffer
		src += (i * V1_3_OLDSIZE);						// Step to next old data in (corrupted) config structure
		memcpy(dst, src, 29);							// Move the 29 bytes (P1_throttle_volume to end)
    5370:	4d e1       	ldi	r20, 0x1D	; 29
    5372:	f9 01       	movw	r30, r18
    5374:	dc 01       	movw	r26, r24
    5376:	54 2f       	mov	r21, r20
    5378:	01 90       	ld	r0, Z+
    537a:	0d 92       	st	X+, r0
    537c:	5a 95       	dec	r21
    537e:	e1 f7       	brne	.-8      	; 0x5378 <Update_V1_3B14_to_V1_3B15+0x68>
    5380:	82 96       	adiw	r24, 0x22	; 34
    5382:	2a 5d       	subi	r18, 0xDA	; 218
    5384:	3f 4f       	sbci	r19, 0xFF	; 255
		memcpy(dst, src, 5);				// Move the five bytes (P1_value, P2_value and Motor_marker bytes)
	}

	// Copy the rest of the old channel[] structure out of the buffer buffer, compressed to match the new (smaller) structure
	// Start with the P1_throttle_volume and end with the P2_source_b_volume byte (29 bytes)
	for (i = 0; i < MAX_OUTPUTS; i++)
    5386:	a7 e0       	ldi	r26, 0x07	; 7
    5388:	81 3c       	cpi	r24, 0xC1	; 193
    538a:	9a 07       	cpc	r25, r26
    538c:	91 f7       	brne	.-28     	; 0x5372 <Update_V1_3B14_to_V1_3B15+0x62>
		src += (i * V1_3_OLDSIZE);						// Step to next old data in (corrupted) config structure
		memcpy(dst, src, 29);							// Move the 29 bytes (P1_throttle_volume to end)
	}

	// Move data that exists after the B14 channel mixer to new location
	memmove((void*)((&Config.setup) + (SERVOREV_V1_3B15)), (void*)((&Config.setup) + (SERVOREV_V1_3B14)), (LAST_BYTE_V1_3B14 - SERVOREV_V1_3B14)); // (619-452 = 167 bytes)
    538e:	47 ea       	ldi	r20, 0xA7	; 167
    5390:	50 e0       	ldi	r21, 0x00	; 0
    5392:	6c ed       	ldi	r22, 0xDC	; 220
    5394:	77 e0       	ldi	r23, 0x07	; 7
    5396:	8c eb       	ldi	r24, 0xBC	; 188
    5398:	97 e0       	ldi	r25, 0x07	; 7
    539a:	0e 94 cf 6c 	call	0xd99e	; 0xd99e <memmove>

	// Clear new offset curves to zero (flat)
	memset((void*)((&Config.setup) + (OFFSETS_V1_3_B15)), 0, (sizeof(curve_t) * MAX_OUTPUTS));
    539e:	10 e4       	ldi	r17, 0x40	; 64
    53a0:	e4 e6       	ldi	r30, 0x64	; 100
    53a2:	f8 e0       	ldi	r31, 0x08	; 8
    53a4:	df 01       	movw	r26, r30
    53a6:	51 2f       	mov	r21, r17
    53a8:	1d 92       	st	X+, r1
    53aa:	5a 95       	dec	r21
    53ac:	e9 f7       	brne	.-6      	; 0x53a8 <Update_V1_3B14_to_V1_3B15+0x98>

	// Adjust for new Config.Transition_P1, Config.Transition_P2 variables
	// Copy Config.TransitionSpeedOut locally
	memcpy((void*)&Transition_P1n, (void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), 1);
    53ae:	00 91 48 06 	lds	r16, 0x0648
	
	// Move everything from Config.Transition_P1n up by two bytes to make room for new variables
	memmove((void*)((&Config.setup) + (RCITEMS_V1_0 + 9)), (void*)((&Config.setup) + (RCITEMS_V1_0 + 7)), (LAST_BYTE_V1_3B15 - (RCITEMS_V1_0 + 7))); // 653 - (41 + 7) = 605 bytes)
    53b2:	4d e5       	ldi	r20, 0x5D	; 93
    53b4:	52 e0       	ldi	r21, 0x02	; 2
    53b6:	68 e4       	ldi	r22, 0x48	; 72
    53b8:	76 e0       	ldi	r23, 0x06	; 6
    53ba:	8a e4       	ldi	r24, 0x4A	; 74
    53bc:	96 e0       	ldi	r25, 0x06	; 6
    53be:	0e 94 cf 6c 	call	0xd99e	; 0xd99e <memmove>

	// Preset new variables
	Config.Transition_P1 = 0;
    53c2:	10 92 48 06 	sts	0x0648, r1
	Config.Transition_P1n = Transition_P1n;
    53c6:	00 93 49 06 	sts	0x0649, r16
	Config.Transition_P2 = 100;
    53ca:	84 e6       	ldi	r24, 0x64	; 100
    53cc:	80 93 4a 06 	sts	0x064A, r24
		
	// Set magic number to V1.3 B15 signature
	Config.setup = V1_3_B15_SIGNATURE;
    53d0:	10 93 18 06 	sts	0x0618, r17
}
    53d4:	c0 5d       	subi	r28, 0xD0	; 208
    53d6:	de 4f       	sbci	r29, 0xFE	; 254
    53d8:	0f b6       	in	r0, 0x3f	; 63
    53da:	f8 94       	cli
    53dc:	de bf       	out	0x3e, r29	; 62
    53de:	0f be       	out	0x3f, r0	; 63
    53e0:	cd bf       	out	0x3d, r28	; 61
    53e2:	df 91       	pop	r29
    53e4:	cf 91       	pop	r28
    53e6:	1f 91       	pop	r17
    53e8:	0f 91       	pop	r16
    53ea:	08 95       	ret

000053ec <Update_V1_3B15_to_V1_3B17>:

void Update_V1_3B15_to_V1_3B17(void)
{
    53ec:	cf 93       	push	r28
    53ee:	df 93       	push	r29
    53f0:	88 ec       	ldi	r24, 0xC8	; 200
    53f2:	96 e0       	ldi	r25, 0x06	; 6
    53f4:	ee ec       	ldi	r30, 0xCE	; 206
    53f6:	f6 e0       	ldi	r31, 0x06	; 6
    53f8:	ca ec       	ldi	r28, 0xCA	; 202
    53fa:	d6 e0       	ldi	r29, 0x06	; 6
    53fc:	4c ec       	ldi	r20, 0xCC	; 204
    53fe:	56 e0       	ldi	r21, 0x06	; 6

	// Fix any sources that have "NONE" to match new source list.
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// V1.3 B15 "NONE" will read as "Alt. Damp in B17
		if (Config.Channel[i].P1_source_a == SRC20) Config.Channel[i].P1_source_a = NOMIX;
    5400:	24 e1       	ldi	r18, 0x14	; 20
    5402:	dc 01       	movw	r26, r24
    5404:	3c 91       	ld	r19, X
    5406:	33 31       	cpi	r19, 0x13	; 19
    5408:	09 f4       	brne	.+2      	; 0x540c <Update_V1_3B15_to_V1_3B17+0x20>
    540a:	2c 93       	st	X, r18
		if (Config.Channel[i].P1_source_b == SRC20) Config.Channel[i].P1_source_b = NOMIX;
    540c:	da 01       	movw	r26, r20
    540e:	3c 91       	ld	r19, X
    5410:	33 31       	cpi	r19, 0x13	; 19
    5412:	09 f4       	brne	.+2      	; 0x5416 <Update_V1_3B15_to_V1_3B17+0x2a>
    5414:	2c 93       	st	X, r18
		if (Config.Channel[i].P2_source_a == SRC20) Config.Channel[i].P2_source_a = NOMIX;
    5416:	38 81       	ld	r19, Y
    5418:	33 31       	cpi	r19, 0x13	; 19
    541a:	09 f4       	brne	.+2      	; 0x541e <Update_V1_3B15_to_V1_3B17+0x32>
    541c:	28 83       	st	Y, r18
		if (Config.Channel[i].P2_source_b == SRC20) Config.Channel[i].P2_source_b = NOMIX;
    541e:	30 81       	ld	r19, Z
    5420:	33 31       	cpi	r19, 0x13	; 19
    5422:	09 f4       	brne	.+2      	; 0x5426 <Update_V1_3B15_to_V1_3B17+0x3a>
    5424:	20 83       	st	Z, r18
    5426:	82 96       	adiw	r24, 0x22	; 34
    5428:	b2 96       	adiw	r30, 0x22	; 34
    542a:	a2 96       	adiw	r28, 0x22	; 34
    542c:	4e 5d       	subi	r20, 0xDE	; 222
    542e:	5f 4f       	sbci	r21, 0xFF	; 255
void Update_V1_3B15_to_V1_3B17(void)
{
	uint8_t		i;

	// Fix any sources that have "NONE" to match new source list.
	for (i = 0; i < MAX_OUTPUTS; i++)
    5430:	b7 e0       	ldi	r27, 0x07	; 7
    5432:	ee 3d       	cpi	r30, 0xDE	; 222
    5434:	fb 07       	cpc	r31, r27
    5436:	29 f7       	brne	.-54     	; 0x5402 <Update_V1_3B15_to_V1_3B17+0x16>
		if (Config.Channel[i].P2_source_a == SRC20) Config.Channel[i].P2_source_a = NOMIX;
		if (Config.Channel[i].P2_source_b == SRC20) Config.Channel[i].P2_source_b = NOMIX;
	}
	
	// Set magic number to V1.3 B17 signature
	Config.setup = V1_3_B17_SIGNATURE;	
    5438:	81 e4       	ldi	r24, 0x41	; 65
    543a:	80 93 18 06 	sts	0x0618, r24
}
    543e:	df 91       	pop	r29
    5440:	cf 91       	pop	r28
    5442:	08 95       	ret

00005444 <Load_eeprom_preset>:
	Load_eeprom_preset(QUADX);
	Config.Preset = OPTIONS; // Menu will display "Options"
}

void Load_eeprom_preset(uint8_t preset)
{
    5444:	cf 93       	push	r28
    5446:	df 93       	push	r29
	uint8_t i;

	// Erase current profile settings
	memset(&Config.FlightMode[P1],0,sizeof(flight_control_t));
    5448:	92 e1       	ldi	r25, 0x12	; 18
    544a:	ed e4       	ldi	r30, 0x4D	; 77
    544c:	f6 e0       	ldi	r31, 0x06	; 6
    544e:	df 01       	movw	r26, r30
    5450:	29 2f       	mov	r18, r25
    5452:	1d 92       	st	X+, r1
    5454:	2a 95       	dec	r18
    5456:	e9 f7       	brne	.-6      	; 0x5452 <Load_eeprom_preset+0xe>
	memset(&Config.FlightMode[P2],0,sizeof(flight_control_t));
    5458:	ef e5       	ldi	r30, 0x5F	; 95
    545a:	f6 e0       	ldi	r31, 0x06	; 6
    545c:	df 01       	movw	r26, r30
    545e:	1d 92       	st	X+, r1
    5460:	9a 95       	dec	r25
    5462:	e9 f7       	brne	.-6      	; 0x545e <Load_eeprom_preset+0x1a>

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);
    5464:	20 e1       	ldi	r18, 0x10	; 16
    5466:	31 e0       	ldi	r19, 0x01	; 1
    5468:	ee ea       	ldi	r30, 0xAE	; 174
    546a:	f6 e0       	ldi	r31, 0x06	; 6
    546c:	df 01       	movw	r26, r30
    546e:	a9 01       	movw	r20, r18
    5470:	1d 92       	st	X+, r1
    5472:	41 50       	subi	r20, 0x01	; 1
    5474:	50 40       	sbci	r21, 0x00	; 0
    5476:	e1 f7       	brne	.-8      	; 0x5470 <Load_eeprom_preset+0x2c>
    5478:	ee ec       	ldi	r30, 0xCE	; 206
    547a:	f6 e0       	ldi	r31, 0x06	; 6
    547c:	c6 ec       	ldi	r28, 0xC6	; 198
    547e:	d7 e0       	ldi	r29, 0x07	; 7
    5480:	6e ec       	ldi	r22, 0xCE	; 206
    5482:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5484:	94 e1       	ldi	r25, 0x14	; 20
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    5486:	5c e9       	ldi	r21, 0x9C	; 156
		Config.max_travel[i] = 100;
    5488:	44 e6       	ldi	r20, 0x64	; 100
    548a:	9f 01       	movw	r18, r30
    548c:	26 50       	subi	r18, 0x06	; 6
    548e:	31 09       	sbc	r19, r1
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5490:	d9 01       	movw	r26, r18
    5492:	9c 93       	st	X, r25
    5494:	2c 5f       	subi	r18, 0xFC	; 252
    5496:	3f 4f       	sbci	r19, 0xFF	; 255
		Config.Channel[i].P1_source_b 	= NOMIX;
    5498:	d9 01       	movw	r26, r18
    549a:	9c 93       	st	X, r25
    549c:	22 50       	subi	r18, 0x02	; 2
    549e:	31 09       	sbc	r19, r1
		Config.Channel[i].P2_source_a 	= NOMIX;
    54a0:	d9 01       	movw	r26, r18
    54a2:	9c 93       	st	X, r25
		Config.Channel[i].P2_source_b 	= NOMIX;
    54a4:	90 83       	st	Z, r25
		Config.min_travel[i] = -100;
    54a6:	59 93       	st	Y+, r21
		Config.max_travel[i] = 100;
    54a8:	24 e6       	ldi	r18, 0x64	; 100
    54aa:	db 01       	movw	r26, r22
    54ac:	4d 93       	st	X+, r20
    54ae:	bd 01       	movw	r22, r26
    54b0:	b2 96       	adiw	r30, 0x22	; 34

	// Erase current mixer settings
	memset(&Config.Channel[OUT1],0,sizeof(channel_t) * MAX_OUTPUTS);

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    54b2:	b7 e0       	ldi	r27, 0x07	; 7
    54b4:	ee 3d       	cpi	r30, 0xDE	; 222
    54b6:	fb 07       	cpc	r31, r27
    54b8:	41 f7       	brne	.-48     	; 0x548a <Load_eeprom_preset+0x46>
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	switch (preset)
    54ba:	81 30       	cpi	r24, 0x01	; 1
    54bc:	61 f0       	breq	.+24     	; 0x54d6 <Load_eeprom_preset+0x92>
    54be:	08 f4       	brcc	.+2      	; 0x54c2 <Load_eeprom_preset+0x7e>
    54c0:	cf c0       	rjmp	.+414    	; 0x5660 <Load_eeprom_preset+0x21c>
    54c2:	82 30       	cpi	r24, 0x02	; 2
    54c4:	09 f4       	brne	.+2      	; 0x54c8 <Load_eeprom_preset+0x84>
    54c6:	97 c1       	rjmp	.+814    	; 0x57f6 <Load_eeprom_preset+0x3b2>
    54c8:	83 30       	cpi	r24, 0x03	; 3
    54ca:	09 f0       	breq	.+2      	; 0x54ce <Load_eeprom_preset+0x8a>
    54cc:	64 c2       	rjmp	.+1224   	; 0x5996 <Load_eeprom_preset+0x552>
	{
		case BLANK:
			Config.ArmMode = ARMABLE;
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	80 93 a6 06 	sts	0x06A6, r24
	
			break;
    54d4:	60 c2       	rjmp	.+1216   	; 0x5996 <Load_eeprom_preset+0x552>
		
		case QUADP:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    54d6:	80 93 a6 06 	sts	0x06A6, r24
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 50;
    54da:	22 e3       	ldi	r18, 0x32	; 50
    54dc:	20 93 4d 06 	sts	0x064D, r18
			Config.FlightMode[P1].Roll_I_mult = 10;
    54e0:	9a e0       	ldi	r25, 0x0A	; 10
    54e2:	90 93 4e 06 	sts	0x064E, r25
			Config.FlightMode[P1].Roll_limit = 10;
    54e6:	90 93 4f 06 	sts	0x064F, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    54ea:	32 e0       	ldi	r19, 0x02	; 2
    54ec:	30 93 50 06 	sts	0x0650, r19
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    54f0:	90 93 51 06 	sts	0x0651, r25
			
			Config.FlightMode[P1].Pitch_P_mult = 50;
    54f4:	20 93 53 06 	sts	0x0653, r18
			Config.FlightMode[P1].Pitch_I_mult = 10;
    54f8:	90 93 54 06 	sts	0x0654, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    54fc:	90 93 55 06 	sts	0x0655, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    5500:	30 93 56 06 	sts	0x0656, r19
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    5504:	90 93 57 06 	sts	0x0657, r25
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    5508:	5c e3       	ldi	r21, 0x3C	; 60
    550a:	50 93 59 06 	sts	0x0659, r21
			Config.FlightMode[P1].Yaw_I_mult = 40;
    550e:	98 e2       	ldi	r25, 0x28	; 40
    5510:	90 93 5a 06 	sts	0x065A, r25
			Config.FlightMode[P1].Yaw_limit = 25;
    5514:	49 e1       	ldi	r20, 0x19	; 25
    5516:	40 93 5b 06 	sts	0x065B, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    551a:	30 93 5c 06 	sts	0x065C, r19
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    551e:	20 93 5e 06 	sts	0x065E, r18
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    5522:	90 93 5f 06 	sts	0x065F, r25
			Config.FlightMode[P2].Roll_I_mult = 19;
    5526:	63 e1       	ldi	r22, 0x13	; 19
    5528:	60 93 60 06 	sts	0x0660, r22
			Config.FlightMode[P2].Roll_limit = 14;
    552c:	3e e0       	ldi	r19, 0x0E	; 14
    552e:	30 93 61 06 	sts	0x0661, r19
			Config.FlightMode[P2].Roll_Rate = 3;
    5532:	23 e0       	ldi	r18, 0x03	; 3
    5534:	20 93 62 06 	sts	0x0662, r18
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    5538:	80 93 63 06 	sts	0x0663, r24
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    553c:	90 93 65 06 	sts	0x0665, r25
			Config.FlightMode[P2].Pitch_I_mult = 19;
    5540:	60 93 66 06 	sts	0x0666, r22
			Config.FlightMode[P2].Pitch_limit = 14;
    5544:	30 93 67 06 	sts	0x0667, r19
			Config.FlightMode[P2].Pitch_Rate = 3;
    5548:	20 93 68 06 	sts	0x0668, r18
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    554c:	80 93 69 06 	sts	0x0669, r24
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    5550:	50 93 6b 06 	sts	0x066B, r21
			Config.FlightMode[P2].Yaw_I_mult = 40;
    5554:	90 93 6c 06 	sts	0x066C, r25
			Config.FlightMode[P2].Yaw_limit = 25;
    5558:	40 93 6d 06 	sts	0x066D, r20
			Config.FlightMode[P2].Yaw_Rate = 3;
    555c:	20 93 6e 06 	sts	0x066E, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    5560:	8e e1       	ldi	r24, 0x1E	; 30
    5562:	80 93 70 06 	sts	0x0670, r24
    5566:	e7 ec       	ldi	r30, 0xC7	; 199
    5568:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    556a:	34 e6       	ldi	r19, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    556c:	42 e0       	ldi	r20, 0x02	; 2
				Config.Channel[i].P1_Z_delta_acc = ON;
    556e:	21 e0       	ldi	r18, 0x01	; 1
    5570:	df 01       	movw	r26, r30
    5572:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5574:	94 e6       	ldi	r25, 0x64	; 100
    5576:	3c 93       	st	X, r19
    5578:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    557a:	3c 93       	st	X, r19
    557c:	12 97       	sbiw	r26, 0x02	; 2
				Config.Channel[i].Motor_marker = MOTOR;
    557e:	4c 93       	st	X, r20
    5580:	54 96       	adiw	r26, 0x14	; 20
				Config.Channel[i].P1_Z_delta_acc = ON;
    5582:	81 e0       	ldi	r24, 0x01	; 1
    5584:	2c 93       	st	X, r18
				Config.Channel[i].P2_Z_delta_acc = ON;
    5586:	20 83       	st	Z, r18
    5588:	b2 96       	adiw	r30, 0x22	; 34
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 3;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    558a:	57 e0       	ldi	r21, 0x07	; 7
    558c:	ef 34       	cpi	r30, 0x4F	; 79
    558e:	f5 07       	cpc	r31, r21
    5590:	79 f7       	brne	.-34     	; 0x5570 <Load_eeprom_preset+0x12c>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 0;
    5592:	10 92 b6 06 	sts	0x06B6, r1
			Config.Channel[OUT1].P2_aileron_volume = 0;
    5596:	10 92 b7 06 	sts	0x06B7, r1
			Config.Channel[OUT1].P1_elevator_volume = -20;
    559a:	2c ee       	ldi	r18, 0xEC	; 236
    559c:	20 93 b8 06 	sts	0x06B8, r18
			Config.Channel[OUT1].P2_elevator_volume = -30;
    55a0:	32 ee       	ldi	r19, 0xE2	; 226
    55a2:	30 93 b9 06 	sts	0x06B9, r19
			Config.Channel[OUT1].P1_rudder_volume = -30;
    55a6:	30 93 ba 06 	sts	0x06BA, r19
			Config.Channel[OUT1].P2_rudder_volume = -40;
    55aa:	68 ed       	ldi	r22, 0xD8	; 216
    55ac:	60 93 bb 06 	sts	0x06BB, r22
			Config.Channel[OUT1].P1_Pitch_gyro = ON;
    55b0:	80 93 be 06 	sts	0x06BE, r24
			Config.Channel[OUT1].P1_Pitch_acc = ON;
    55b4:	80 93 c4 06 	sts	0x06C4, r24
			Config.Channel[OUT1].P2_Pitch_gyro = ON;
    55b8:	80 93 bf 06 	sts	0x06BF, r24
			Config.Channel[OUT1].P2_Pitch_acc = ON;
    55bc:	80 93 c5 06 	sts	0x06C5, r24
			Config.Channel[OUT1].P1_Yaw_gyro = ON;
    55c0:	80 93 c0 06 	sts	0x06C0, r24
			Config.Channel[OUT1].P2_Yaw_gyro = ON;
    55c4:	80 93 c1 06 	sts	0x06C1, r24
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -20;
    55c8:	20 93 d8 06 	sts	0x06D8, r18
			Config.Channel[OUT2].P2_aileron_volume = -30;
    55cc:	30 93 d9 06 	sts	0x06D9, r19
			Config.Channel[OUT2].P1_elevator_volume = 0;
    55d0:	10 92 da 06 	sts	0x06DA, r1
			Config.Channel[OUT2].P2_elevator_volume = 0;
    55d4:	10 92 db 06 	sts	0x06DB, r1
			Config.Channel[OUT2].P1_rudder_volume = 30;
    55d8:	2e e1       	ldi	r18, 0x1E	; 30
    55da:	20 93 dc 06 	sts	0x06DC, r18
			Config.Channel[OUT2].P2_rudder_volume = 40;
    55de:	48 e2       	ldi	r20, 0x28	; 40
    55e0:	40 93 dd 06 	sts	0x06DD, r20
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    55e4:	80 93 de 06 	sts	0x06DE, r24
			Config.Channel[OUT2].P1_Roll_acc = ON;
    55e8:	80 93 e4 06 	sts	0x06E4, r24
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    55ec:	80 93 df 06 	sts	0x06DF, r24
			Config.Channel[OUT2].P2_Roll_acc = ON;
    55f0:	80 93 e5 06 	sts	0x06E5, r24
			Config.Channel[OUT2].P1_Yaw_gyro = ON;
    55f4:	80 93 e2 06 	sts	0x06E2, r24
			Config.Channel[OUT2].P2_Yaw_gyro = ON;
    55f8:	80 93 e3 06 	sts	0x06E3, r24
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = 0;
    55fc:	10 92 fa 06 	sts	0x06FA, r1
			Config.Channel[OUT3].P2_aileron_volume = 0;
    5600:	10 92 fb 06 	sts	0x06FB, r1
			Config.Channel[OUT3].P1_elevator_volume = 20;
    5604:	54 e1       	ldi	r21, 0x14	; 20
    5606:	50 93 fc 06 	sts	0x06FC, r21
			Config.Channel[OUT3].P2_elevator_volume = 30;
    560a:	20 93 fd 06 	sts	0x06FD, r18
			Config.Channel[OUT3].P1_rudder_volume = -30;
    560e:	30 93 fe 06 	sts	0x06FE, r19
			Config.Channel[OUT3].P2_rudder_volume = -40;
    5612:	60 93 ff 06 	sts	0x06FF, r22
			Config.Channel[OUT3].P1_Pitch_gyro = ON;
    5616:	80 93 02 07 	sts	0x0702, r24
			Config.Channel[OUT3].P1_Pitch_acc = ON;
    561a:	80 93 08 07 	sts	0x0708, r24
			Config.Channel[OUT3].P2_Pitch_gyro = ON;
    561e:	80 93 03 07 	sts	0x0703, r24
			Config.Channel[OUT3].P2_Pitch_acc = ON;
    5622:	80 93 09 07 	sts	0x0709, r24
			Config.Channel[OUT3].P1_Yaw_gyro = ON;
    5626:	80 93 04 07 	sts	0x0704, r24
			Config.Channel[OUT3].P2_Yaw_gyro = ON;
    562a:	80 93 05 07 	sts	0x0705, r24
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 20;
    562e:	50 93 1c 07 	sts	0x071C, r21
			Config.Channel[OUT4].P2_aileron_volume = 30;
    5632:	20 93 1d 07 	sts	0x071D, r18
			Config.Channel[OUT4].P1_elevator_volume = 0;
    5636:	10 92 1e 07 	sts	0x071E, r1
			Config.Channel[OUT4].P2_elevator_volume = 0;
    563a:	10 92 1f 07 	sts	0x071F, r1
			Config.Channel[OUT4].P1_rudder_volume = 30;
    563e:	20 93 20 07 	sts	0x0720, r18
			Config.Channel[OUT4].P2_rudder_volume = 40;
    5642:	40 93 21 07 	sts	0x0721, r20
			Config.Channel[OUT4].P1_Roll_gyro = ON;
    5646:	80 93 22 07 	sts	0x0722, r24
			Config.Channel[OUT4].P1_Roll_acc = ON;
    564a:	80 93 28 07 	sts	0x0728, r24
			Config.Channel[OUT4].P2_Roll_gyro = ON;
    564e:	80 93 23 07 	sts	0x0723, r24
			Config.Channel[OUT4].P2_Roll_acc = ON;
    5652:	80 93 29 07 	sts	0x0729, r24
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    5656:	80 93 26 07 	sts	0x0726, r24
			Config.Channel[OUT4].P2_Yaw_gyro = ON;		
    565a:	80 93 27 07 	sts	0x0727, r24
    565e:	aa c0       	rjmp	.+340    	; 0x57b4 <Load_eeprom_preset+0x370>
			Config.Offsets[OUT8].Point7 = 100;	
			break;
				
		case QUADX:
			// Preset mixing for primary channels
			Config.ArmMode = ARMABLE;
    5660:	31 e0       	ldi	r19, 0x01	; 1
    5662:	30 93 a6 06 	sts	0x06A6, r19
			
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    5666:	88 e2       	ldi	r24, 0x28	; 40
    5668:	80 93 4d 06 	sts	0x064D, r24
			Config.FlightMode[P1].Roll_I_mult = 10;
    566c:	9a e0       	ldi	r25, 0x0A	; 10
    566e:	90 93 4e 06 	sts	0x064E, r25
			Config.FlightMode[P1].Roll_limit = 10;
    5672:	90 93 4f 06 	sts	0x064F, r25
			Config.FlightMode[P1].Roll_Rate = 2;
    5676:	22 e0       	ldi	r18, 0x02	; 2
    5678:	20 93 50 06 	sts	0x0650, r18
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    567c:	90 93 51 06 	sts	0x0651, r25
	
			Config.FlightMode[P1].Pitch_P_mult = 40;
    5680:	80 93 53 06 	sts	0x0653, r24
			Config.FlightMode[P1].Pitch_I_mult = 10;
    5684:	90 93 54 06 	sts	0x0654, r25
			Config.FlightMode[P1].Pitch_limit = 10;
    5688:	90 93 55 06 	sts	0x0655, r25
			Config.FlightMode[P1].Pitch_Rate = 2;
    568c:	20 93 56 06 	sts	0x0656, r18
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    5690:	90 93 57 06 	sts	0x0657, r25
	
			Config.FlightMode[P1].Yaw_P_mult = 60;
    5694:	4c e3       	ldi	r20, 0x3C	; 60
    5696:	40 93 59 06 	sts	0x0659, r20
			Config.FlightMode[P1].Yaw_I_mult = 40;
    569a:	80 93 5a 06 	sts	0x065A, r24
			Config.FlightMode[P1].Yaw_limit = 25;
    569e:	99 e1       	ldi	r25, 0x19	; 25
    56a0:	90 93 5b 06 	sts	0x065B, r25
			Config.FlightMode[P1].Yaw_Rate = 2;
    56a4:	20 93 5c 06 	sts	0x065C, r18
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    56a8:	52 e3       	ldi	r21, 0x32	; 50
    56aa:	50 93 5e 06 	sts	0x065E, r21
	
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    56ae:	80 93 5f 06 	sts	0x065F, r24
			Config.FlightMode[P2].Roll_I_mult = 19;
    56b2:	73 e1       	ldi	r23, 0x13	; 19
    56b4:	70 93 60 06 	sts	0x0660, r23
			Config.FlightMode[P2].Roll_limit = 14;
    56b8:	6e e0       	ldi	r22, 0x0E	; 14
    56ba:	60 93 61 06 	sts	0x0661, r22
			Config.FlightMode[P2].Roll_Rate = 3;
    56be:	53 e0       	ldi	r21, 0x03	; 3
    56c0:	50 93 62 06 	sts	0x0662, r21
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    56c4:	30 93 63 06 	sts	0x0663, r19
	
			Config.FlightMode[P2].Pitch_P_mult = 40;
    56c8:	80 93 65 06 	sts	0x0665, r24
			Config.FlightMode[P2].Pitch_I_mult = 19;
    56cc:	70 93 66 06 	sts	0x0666, r23
			Config.FlightMode[P2].Pitch_limit = 14;
    56d0:	60 93 67 06 	sts	0x0667, r22
			Config.FlightMode[P2].Pitch_Rate = 3;
    56d4:	50 93 68 06 	sts	0x0668, r21
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    56d8:	30 93 69 06 	sts	0x0669, r19
	
			Config.FlightMode[P2].Yaw_P_mult = 60;
    56dc:	40 93 6b 06 	sts	0x066B, r20
			Config.FlightMode[P2].Yaw_I_mult = 40;
    56e0:	80 93 6c 06 	sts	0x066C, r24
			Config.FlightMode[P2].Yaw_limit = 25;
    56e4:	90 93 6d 06 	sts	0x066D, r25
			Config.FlightMode[P2].Yaw_Rate = 2;
    56e8:	20 93 6e 06 	sts	0x066E, r18
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    56ec:	8e e1       	ldi	r24, 0x1E	; 30
    56ee:	80 93 70 06 	sts	0x0670, r24
    56f2:	e7 ec       	ldi	r30, 0xC7	; 199
    56f4:	f6 e0       	ldi	r31, 0x06	; 6
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    56f6:	24 e6       	ldi	r18, 0x64	; 100
				Config.Channel[i].P2_throttle_volume = 100;
				Config.Channel[i].Motor_marker = MOTOR;
    56f8:	32 e0       	ldi	r19, 0x02	; 2
				Config.Channel[i].P1_Roll_gyro = ON;
    56fa:	81 e0       	ldi	r24, 0x01	; 1
    56fc:	df 01       	movw	r26, r30
    56fe:	54 97       	sbiw	r26, 0x14	; 20
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5700:	94 e6       	ldi	r25, 0x64	; 100
    5702:	2c 93       	st	X, r18
    5704:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_throttle_volume = 100;
    5706:	2c 93       	st	X, r18
    5708:	12 97       	sbiw	r26, 0x02	; 2
				Config.Channel[i].Motor_marker = MOTOR;
    570a:	3c 93       	st	X, r19
    570c:	1a 96       	adiw	r26, 0x0a	; 10
				Config.Channel[i].P1_Roll_gyro = ON;
    570e:	8c 93       	st	X, r24
    5710:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Roll_acc = ON;
    5712:	8c 93       	st	X, r24
    5714:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Roll_gyro = ON;
    5716:	8c 93       	st	X, r24
    5718:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Roll_acc = ON;
    571a:	8c 93       	st	X, r24
    571c:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Pitch_gyro = ON;
    571e:	8c 93       	st	X, r24
    5720:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P1_Pitch_acc = ON;
    5722:	8c 93       	st	X, r24
    5724:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P2_Pitch_gyro = ON;
    5726:	8c 93       	st	X, r24
    5728:	16 96       	adiw	r26, 0x06	; 6
				Config.Channel[i].P2_Pitch_acc = ON;
    572a:	8c 93       	st	X, r24
    572c:	15 97       	sbiw	r26, 0x05	; 5
				Config.Channel[i].P1_Yaw_gyro = ON;
    572e:	8c 93       	st	X, r24
    5730:	11 96       	adiw	r26, 0x01	; 1
				Config.Channel[i].P2_Yaw_gyro = ON;
    5732:	8c 93       	st	X, r24
    5734:	15 96       	adiw	r26, 0x05	; 5
				Config.Channel[i].P1_Z_delta_acc = ON;
    5736:	8c 93       	st	X, r24
				Config.Channel[i].P2_Z_delta_acc = ON;
    5738:	80 83       	st	Z, r24
    573a:	b2 96       	adiw	r30, 0x22	; 34
			Config.FlightMode[P2].Yaw_I_mult = 40;
			Config.FlightMode[P2].Yaw_limit = 25;
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
	
			for (i = 0; i <= OUT4; i++)
    573c:	a7 e0       	ldi	r26, 0x07	; 7
    573e:	ef 34       	cpi	r30, 0x4F	; 79
    5740:	fa 07       	cpc	r31, r26
    5742:	e1 f6       	brne	.-72     	; 0x56fc <Load_eeprom_preset+0x2b8>
				Config.Channel[i].P1_Z_delta_acc = ON;
				Config.Channel[i].P2_Z_delta_acc = ON;
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 15;
    5744:	2f e0       	ldi	r18, 0x0F	; 15
    5746:	20 93 b6 06 	sts	0x06B6, r18
			Config.Channel[OUT1].P2_aileron_volume = 20;
    574a:	84 e1       	ldi	r24, 0x14	; 20
    574c:	80 93 b7 06 	sts	0x06B7, r24
			Config.Channel[OUT1].P1_elevator_volume = -15;
    5750:	41 ef       	ldi	r20, 0xF1	; 241
    5752:	40 93 b8 06 	sts	0x06B8, r20
			Config.Channel[OUT1].P2_elevator_volume = -20;
    5756:	3c ee       	ldi	r19, 0xEC	; 236
    5758:	30 93 b9 06 	sts	0x06B9, r19
			Config.Channel[OUT1].P1_rudder_volume = -40;
    575c:	e8 ed       	ldi	r30, 0xD8	; 216
    575e:	e0 93 ba 06 	sts	0x06BA, r30
			Config.Channel[OUT1].P2_rudder_volume = -50;
    5762:	7e ec       	ldi	r23, 0xCE	; 206
    5764:	70 93 bb 06 	sts	0x06BB, r23
	
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -15;
    5768:	40 93 d8 06 	sts	0x06D8, r20
			Config.Channel[OUT2].P2_aileron_volume = -20;
    576c:	30 93 d9 06 	sts	0x06D9, r19
			Config.Channel[OUT2].P1_elevator_volume = -15;
    5770:	40 93 da 06 	sts	0x06DA, r20
			Config.Channel[OUT2].P2_elevator_volume = -20;
    5774:	30 93 db 06 	sts	0x06DB, r19
			Config.Channel[OUT2].P1_rudder_volume = 40;
    5778:	68 e2       	ldi	r22, 0x28	; 40
    577a:	60 93 dc 06 	sts	0x06DC, r22
			Config.Channel[OUT2].P2_rudder_volume = 50;
    577e:	52 e3       	ldi	r21, 0x32	; 50
    5780:	50 93 dd 06 	sts	0x06DD, r21
	
			// OUT3
			Config.Channel[OUT3].P1_aileron_volume = -15;
    5784:	40 93 fa 06 	sts	0x06FA, r20
			Config.Channel[OUT3].P2_aileron_volume = -20;
    5788:	30 93 fb 06 	sts	0x06FB, r19
			Config.Channel[OUT3].P1_elevator_volume = 15;
    578c:	20 93 fc 06 	sts	0x06FC, r18
			Config.Channel[OUT3].P2_elevator_volume = 20;
    5790:	80 93 fd 06 	sts	0x06FD, r24
			Config.Channel[OUT3].P1_rudder_volume = -40;
    5794:	e0 93 fe 06 	sts	0x06FE, r30
			Config.Channel[OUT3].P2_rudder_volume = -50;
    5798:	70 93 ff 06 	sts	0x06FF, r23
	
			// OUT4
			Config.Channel[OUT4].P1_aileron_volume = 15;
    579c:	20 93 1c 07 	sts	0x071C, r18
			Config.Channel[OUT4].P2_aileron_volume = 20;
    57a0:	80 93 1d 07 	sts	0x071D, r24
			Config.Channel[OUT4].P1_elevator_volume = 15;
    57a4:	20 93 1e 07 	sts	0x071E, r18
			Config.Channel[OUT4].P2_elevator_volume = 20;
    57a8:	80 93 1f 07 	sts	0x071F, r24
			Config.Channel[OUT4].P1_rudder_volume = 40;
    57ac:	60 93 20 07 	sts	0x0720, r22
			Config.Channel[OUT4].P2_rudder_volume = 50;
    57b0:	50 93 21 07 	sts	0x0721, r21

			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    57b4:	8b e4       	ldi	r24, 0x4B	; 75
    57b6:	80 93 40 07 	sts	0x0740, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    57ba:	90 93 41 07 	sts	0x0741, r25
			
			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    57be:	80 93 60 07 	sts	0x0760, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    57c2:	90 93 61 07 	sts	0x0761, r25
						
			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    57c6:	80 93 86 07 	sts	0x0786, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    57ca:	90 93 87 07 	sts	0x0787, r25
									
			// OUT8
			Config.Offsets[OUT8].Point1 = -100;
    57ce:	8c e9       	ldi	r24, 0x9C	; 156
    57d0:	80 93 9e 08 	sts	0x089E, r24
			Config.Offsets[OUT8].Point2 = -67;
    57d4:	8d eb       	ldi	r24, 0xBD	; 189
    57d6:	80 93 9f 08 	sts	0x089F, r24
			Config.Offsets[OUT8].Point3 = -33;
    57da:	8f ed       	ldi	r24, 0xDF	; 223
    57dc:	80 93 a0 08 	sts	0x08A0, r24
			Config.Offsets[OUT8].Point4 = 0;
    57e0:	10 92 a1 08 	sts	0x08A1, r1
			Config.Offsets[OUT8].Point5 = 33;
    57e4:	81 e2       	ldi	r24, 0x21	; 33
    57e6:	80 93 a2 08 	sts	0x08A2, r24
			Config.Offsets[OUT8].Point6 = 67;
    57ea:	83 e4       	ldi	r24, 0x43	; 67
    57ec:	80 93 a3 08 	sts	0x08A3, r24
			Config.Offsets[OUT8].Point7 = 100;
    57f0:	90 93 a4 08 	sts	0x08A4, r25
			break;
    57f4:	d0 c0       	rjmp	.+416    	; 0x5996 <Load_eeprom_preset+0x552>
		
		case TRICOPTER:
			// Preset simple mixing for primary channels
			Config.ArmMode = ARMABLE;
    57f6:	91 e0       	ldi	r25, 0x01	; 1
    57f8:	90 93 a6 06 	sts	0x06A6, r25
		
			// Profile 1 (Baseline)
			Config.FlightMode[P1].Roll_P_mult = 40;
    57fc:	38 e2       	ldi	r19, 0x28	; 40
    57fe:	30 93 4d 06 	sts	0x064D, r19
			Config.FlightMode[P1].Roll_I_mult = 10;
    5802:	4a e0       	ldi	r20, 0x0A	; 10
    5804:	40 93 4e 06 	sts	0x064E, r20
			Config.FlightMode[P1].Roll_limit = 10;
    5808:	40 93 4f 06 	sts	0x064F, r20
			Config.FlightMode[P1].Roll_Rate = 2;
    580c:	80 93 50 06 	sts	0x0650, r24
			Config.FlightMode[P1].A_Roll_P_mult = 10;
    5810:	40 93 51 06 	sts	0x0651, r20
			
			Config.FlightMode[P1].Pitch_P_mult = 40;
    5814:	30 93 53 06 	sts	0x0653, r19
			Config.FlightMode[P1].Pitch_I_mult = 10;
    5818:	40 93 54 06 	sts	0x0654, r20
			Config.FlightMode[P1].Pitch_limit = 10;
    581c:	40 93 55 06 	sts	0x0655, r20
			Config.FlightMode[P1].Pitch_Rate = 2;
    5820:	80 93 56 06 	sts	0x0656, r24
			Config.FlightMode[P1].A_Pitch_P_mult = 10;
    5824:	40 93 57 06 	sts	0x0657, r20
			
			Config.FlightMode[P1].Yaw_P_mult = 60;
    5828:	5c e3       	ldi	r21, 0x3C	; 60
    582a:	50 93 59 06 	sts	0x0659, r21
			Config.FlightMode[P1].Yaw_I_mult = 40;
    582e:	30 93 5a 06 	sts	0x065A, r19
			Config.FlightMode[P1].Yaw_limit = 25;
    5832:	49 e1       	ldi	r20, 0x19	; 25
    5834:	40 93 5b 06 	sts	0x065B, r20
			Config.FlightMode[P1].Yaw_Rate = 2;
    5838:	80 93 5c 06 	sts	0x065C, r24
			Config.FlightMode[P1].A_Zed_P_mult = 50;
    583c:	62 e3       	ldi	r22, 0x32	; 50
    583e:	60 93 5e 06 	sts	0x065E, r22
			
			// Profile 2 (For comparison)
			Config.FlightMode[P2].Roll_P_mult = 40;
    5842:	30 93 5f 06 	sts	0x065F, r19
			Config.FlightMode[P2].Roll_I_mult = 19;
    5846:	e3 e1       	ldi	r30, 0x13	; 19
    5848:	e0 93 60 06 	sts	0x0660, r30
			Config.FlightMode[P2].Roll_limit = 14;
    584c:	7e e0       	ldi	r23, 0x0E	; 14
    584e:	70 93 61 06 	sts	0x0661, r23
			Config.FlightMode[P2].Roll_Rate = 3;
    5852:	63 e0       	ldi	r22, 0x03	; 3
    5854:	60 93 62 06 	sts	0x0662, r22
			Config.FlightMode[P2].A_Roll_P_mult = 1;
    5858:	90 93 63 06 	sts	0x0663, r25
			
			Config.FlightMode[P2].Pitch_P_mult = 40;
    585c:	30 93 65 06 	sts	0x0665, r19
			Config.FlightMode[P2].Pitch_I_mult = 19;
    5860:	e0 93 66 06 	sts	0x0666, r30
			Config.FlightMode[P2].Pitch_limit = 14;
    5864:	70 93 67 06 	sts	0x0667, r23
			Config.FlightMode[P2].Pitch_Rate = 3;
    5868:	60 93 68 06 	sts	0x0668, r22
			Config.FlightMode[P2].A_Pitch_P_mult = 1;
    586c:	90 93 69 06 	sts	0x0669, r25
			
			Config.FlightMode[P2].Yaw_P_mult = 60;
    5870:	50 93 6b 06 	sts	0x066B, r21
			Config.FlightMode[P2].Yaw_I_mult = 40;
    5874:	30 93 6c 06 	sts	0x066C, r19
			Config.FlightMode[P2].Yaw_limit = 25;
    5878:	40 93 6d 06 	sts	0x066D, r20
			Config.FlightMode[P2].Yaw_Rate = 2;
    587c:	80 93 6e 06 	sts	0x066E, r24
			Config.FlightMode[P2].A_Zed_P_mult = 30;
    5880:	4e e1       	ldi	r20, 0x1E	; 30
    5882:	40 93 70 06 	sts	0x0670, r20
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5886:	20 93 b3 06 	sts	0x06B3, r18
				Config.Channel[i].P2_throttle_volume = 100;
    588a:	20 93 b4 06 	sts	0x06B4, r18
				Config.Channel[i].Motor_marker = MOTOR;
    588e:	80 93 b2 06 	sts	0x06B2, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    5892:	20 93 d5 06 	sts	0x06D5, r18
				Config.Channel[i].P2_throttle_volume = 100;
    5896:	20 93 d6 06 	sts	0x06D6, r18
				Config.Channel[i].Motor_marker = MOTOR;
    589a:	80 93 d4 06 	sts	0x06D4, r24
			Config.FlightMode[P2].Yaw_Rate = 2;
			Config.FlightMode[P2].A_Zed_P_mult = 30;
		
			for (i = 0; i <= OUT3; i++)
			{
				Config.Channel[i].P1_throttle_volume = 100;
    589e:	20 93 f7 06 	sts	0x06F7, r18
				Config.Channel[i].P2_throttle_volume = 100;
    58a2:	20 93 f8 06 	sts	0x06F8, r18
				Config.Channel[i].Motor_marker = MOTOR;
    58a6:	80 93 f6 06 	sts	0x06F6, r24
			}

			// OUT1
			Config.Channel[OUT1].P1_aileron_volume = 30;
    58aa:	40 93 b6 06 	sts	0x06B6, r20
			Config.Channel[OUT1].P2_aileron_volume = 40;
    58ae:	30 93 b7 06 	sts	0x06B7, r19
			Config.Channel[OUT1].P1_elevator_volume = -15;
    58b2:	61 ef       	ldi	r22, 0xF1	; 241
    58b4:	60 93 b8 06 	sts	0x06B8, r22
			Config.Channel[OUT1].P2_elevator_volume = -20;
    58b8:	5c ee       	ldi	r21, 0xEC	; 236
    58ba:	50 93 b9 06 	sts	0x06B9, r21
			Config.Channel[OUT1].P1_Roll_gyro = ON;
    58be:	90 93 bc 06 	sts	0x06BC, r25
			Config.Channel[OUT1].P1_Roll_acc = ON;
    58c2:	90 93 c2 06 	sts	0x06C2, r25
			Config.Channel[OUT1].P2_Roll_gyro = ON;
    58c6:	90 93 bd 06 	sts	0x06BD, r25
			Config.Channel[OUT1].P2_Roll_acc = ON;
    58ca:	90 93 c3 06 	sts	0x06C3, r25
			Config.Channel[OUT1].P1_Pitch_gyro = SCALE;
    58ce:	80 93 be 06 	sts	0x06BE, r24
			Config.Channel[OUT1].P1_Pitch_acc = SCALE;
    58d2:	80 93 c4 06 	sts	0x06C4, r24
			Config.Channel[OUT1].P2_Pitch_gyro = SCALE;
    58d6:	80 93 bf 06 	sts	0x06BF, r24
			Config.Channel[OUT1].P2_Pitch_acc = SCALE;
    58da:	80 93 c5 06 	sts	0x06C5, r24
			Config.Channel[OUT1].P1_Z_delta_acc = ON;
    58de:	90 93 c6 06 	sts	0x06C6, r25
			Config.Channel[OUT1].P2_Z_delta_acc = ON;
    58e2:	90 93 c7 06 	sts	0x06C7, r25
		
			// OUT2
			Config.Channel[OUT2].P1_aileron_volume = -30;
    58e6:	72 ee       	ldi	r23, 0xE2	; 226
    58e8:	70 93 d8 06 	sts	0x06D8, r23
			Config.Channel[OUT2].P2_aileron_volume = -40;
    58ec:	78 ed       	ldi	r23, 0xD8	; 216
    58ee:	70 93 d9 06 	sts	0x06D9, r23
			Config.Channel[OUT2].P1_elevator_volume = -15;
    58f2:	60 93 da 06 	sts	0x06DA, r22
			Config.Channel[OUT2].P2_elevator_volume = -20;
    58f6:	50 93 db 06 	sts	0x06DB, r21
			Config.Channel[OUT2].P1_Roll_gyro = ON;
    58fa:	90 93 de 06 	sts	0x06DE, r25
			Config.Channel[OUT2].P1_Roll_acc = ON;
    58fe:	90 93 e4 06 	sts	0x06E4, r25
			Config.Channel[OUT2].P2_Roll_gyro = ON;
    5902:	90 93 df 06 	sts	0x06DF, r25
			Config.Channel[OUT2].P2_Roll_acc = ON;
    5906:	90 93 e5 06 	sts	0x06E5, r25
			Config.Channel[OUT2].P1_Pitch_gyro = SCALE;
    590a:	80 93 e0 06 	sts	0x06E0, r24
			Config.Channel[OUT2].P1_Pitch_acc = SCALE;
    590e:	80 93 e6 06 	sts	0x06E6, r24
			Config.Channel[OUT2].P2_Pitch_gyro = SCALE;
    5912:	80 93 e1 06 	sts	0x06E1, r24
			Config.Channel[OUT2].P2_Pitch_acc = SCALE;
    5916:	80 93 e7 06 	sts	0x06E7, r24
			Config.Channel[OUT2].P1_Z_delta_acc = ON;
    591a:	90 93 e8 06 	sts	0x06E8, r25
			Config.Channel[OUT2].P2_Z_delta_acc = ON;
    591e:	90 93 e9 06 	sts	0x06E9, r25
		
			// OUT3
			Config.Channel[OUT3].P1_elevator_volume = 30;
    5922:	40 93 fc 06 	sts	0x06FC, r20
			Config.Channel[OUT3].P2_elevator_volume = 40;
    5926:	30 93 fd 06 	sts	0x06FD, r19
			Config.Channel[OUT3].P1_Pitch_gyro = SCALE;
    592a:	80 93 02 07 	sts	0x0702, r24
			Config.Channel[OUT3].P1_Pitch_acc = SCALE;
    592e:	80 93 08 07 	sts	0x0708, r24
			Config.Channel[OUT3].P2_Pitch_gyro = SCALE;
    5932:	80 93 03 07 	sts	0x0703, r24
			Config.Channel[OUT3].P2_Pitch_acc = SCALE;
    5936:	80 93 09 07 	sts	0x0709, r24
			Config.Channel[OUT3].P1_Z_delta_acc = ON;
    593a:	90 93 0a 07 	sts	0x070A, r25
			Config.Channel[OUT3].P2_Z_delta_acc = ON;
    593e:	90 93 0b 07 	sts	0x070B, r25
			
			// OUT4
			Config.Channel[OUT4].Motor_marker = ASERVO;
    5942:	10 92 18 07 	sts	0x0718, r1
			Config.Channel[OUT4].P1_rudder_volume = 75;
    5946:	8b e4       	ldi	r24, 0x4B	; 75
    5948:	80 93 20 07 	sts	0x0720, r24
			Config.Channel[OUT4].P2_rudder_volume = 100;
    594c:	20 93 21 07 	sts	0x0721, r18
			Config.Channel[OUT4].P1_Yaw_gyro = ON;
    5950:	90 93 26 07 	sts	0x0726, r25
			Config.Channel[OUT4].P2_Yaw_gyro = ON;
    5954:	90 93 27 07 	sts	0x0727, r25
			
			// OUT5
			Config.Channel[OUT5].P1_elevator_volume = 75;
    5958:	80 93 40 07 	sts	0x0740, r24
			Config.Channel[OUT5].P2_elevator_volume = 100;
    595c:	20 93 41 07 	sts	0x0741, r18

			// OUT6
			Config.Channel[OUT6].P1_aileron_volume = 75;
    5960:	80 93 60 07 	sts	0x0760, r24
			Config.Channel[OUT6].P2_aileron_volume = 100;
    5964:	20 93 61 07 	sts	0x0761, r18

			// OUT7
			Config.Channel[OUT7].P1_rudder_volume = 75;
    5968:	80 93 86 07 	sts	0x0786, r24
			Config.Channel[OUT7].P2_rudder_volume = 100;
    596c:	20 93 87 07 	sts	0x0787, r18

			// OUT8
			Config.Offsets[OUT8].Point1 = -100;
    5970:	8c e9       	ldi	r24, 0x9C	; 156
    5972:	80 93 9e 08 	sts	0x089E, r24
			Config.Offsets[OUT8].Point2 = -67;
    5976:	8d eb       	ldi	r24, 0xBD	; 189
    5978:	80 93 9f 08 	sts	0x089F, r24
			Config.Offsets[OUT8].Point3 = -33;
    597c:	8f ed       	ldi	r24, 0xDF	; 223
    597e:	80 93 a0 08 	sts	0x08A0, r24
			Config.Offsets[OUT8].Point4 = 0;
    5982:	10 92 a1 08 	sts	0x08A1, r1
			Config.Offsets[OUT8].Point5 = 33;
    5986:	81 e2       	ldi	r24, 0x21	; 33
    5988:	80 93 a2 08 	sts	0x08A2, r24
			Config.Offsets[OUT8].Point6 = 67;
    598c:	83 e4       	ldi	r24, 0x43	; 67
    598e:	80 93 a3 08 	sts	0x08A3, r24
			Config.Offsets[OUT8].Point7 = 100;
    5992:	20 93 a4 08 	sts	0x08A4, r18
			break;
		
		default:
			break;
	}
    5996:	df 91       	pop	r29
    5998:	cf 91       	pop	r28
    599a:	08 95       	ret

0000599c <Set_EEPROM_Default_Config>:
	return new_source;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    599c:	cf 93       	push	r28
    599e:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    59a0:	8e e8       	ldi	r24, 0x8E	; 142
    59a2:	92 e0       	ldi	r25, 0x02	; 2
    59a4:	e8 e1       	ldi	r30, 0x18	; 24
    59a6:	f6 e0       	ldi	r31, 0x06	; 6
    59a8:	df 01       	movw	r26, r30
    59aa:	9c 01       	movw	r18, r24
    59ac:	1d 92       	st	X+, r1
    59ae:	21 50       	subi	r18, 0x01	; 1
    59b0:	30 40       	sbci	r19, 0x00	; 0
    59b2:	e1 f7       	brne	.-8      	; 0x59ac <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    59b4:	80 e4       	ldi	r24, 0x40	; 64
    59b6:	80 93 18 06 	sts	0x0618, r24

	// General
	Config.Orientation_P2 = UP_BACK;
	Config.RxMode = SBUS;
    59ba:	82 e0       	ldi	r24, 0x02	; 2
    59bc:	80 93 41 06 	sts	0x0641, r24
	Config.FlightChan = GEAR;
    59c0:	94 e0       	ldi	r25, 0x04	; 4
    59c2:	90 93 45 06 	sts	0x0645, r25
	Config.ArmMode = ARMABLE;
    59c6:	21 e0       	ldi	r18, 0x01	; 1
    59c8:	20 93 a6 06 	sts	0x06A6, r18
	Config.Servo_rate = FAST;
    59cc:	80 93 42 06 	sts	0x0642, r24
	Config.PWM_Sync = GEAR;
    59d0:	90 93 43 06 	sts	0x0643, r25
	Config.Acc_LPF = HZ21;
    59d4:	80 93 aa 06 	sts	0x06AA, r24
	Config.Gyro_LPF = NOFILTER;
    59d8:	87 e0       	ldi	r24, 0x07	; 7
    59da:	80 93 ab 06 	sts	0x06AB, r24
	Config.MPU6050_LPF = HZ44;
    59de:	83 e0       	ldi	r24, 0x03	; 3
    59e0:	80 93 a9 06 	sts	0x06A9, r24
	Config.CF_factor = 6;
    59e4:	86 e0       	ldi	r24, 0x06	; 6
    59e6:	80 93 ac 06 	sts	0x06AC, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    59ea:	8e e1       	ldi	r24, 0x1E	; 30
    59ec:	80 93 a7 06 	sts	0x06A7, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    59f0:	82 e3       	ldi	r24, 0x32	; 50
    59f2:	80 93 49 06 	sts	0x0649, r24
	Config.Transition_P1 = 0;
	Config.Transition_P2 = 100;	
    59f6:	84 e6       	ldi	r24, 0x64	; 100
    59f8:	80 93 4a 06 	sts	0x064A, r24
	// Advanced
	Config.Orientation_P1 = UP_BACK;
	Config.P1_Reference = NO_ORIENT;
	
	// Preset AccZeroNormZ
	Config.AccZeroNormZ_P1		= 128;
    59fc:	80 e8       	ldi	r24, 0x80	; 128
    59fe:	90 e0       	ldi	r25, 0x00	; 0
    5a00:	90 93 ed 07 	sts	0x07ED, r25
    5a04:	80 93 ec 07 	sts	0x07EC, r24
	Config.AccZeroNormZ_P2		= 128;
    5a08:	90 93 22 08 	sts	0x0822, r25
    5a0c:	80 93 21 08 	sts	0x0821, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    5a10:	84 e2       	ldi	r24, 0x24	; 36
    5a12:	80 93 a5 06 	sts	0x06A5, r24
    5a16:	c9 e1       	ldi	r28, 0x19	; 25
    5a18:	d6 e0       	ldi	r29, 0x06	; 6
    5a1a:	a6 ed       	ldi	r26, 0xD6	; 214
    5a1c:	b7 e0       	ldi	r27, 0x07	; 7
    5a1e:	ec ed       	ldi	r30, 0xDC	; 220
    5a20:	f1 e0       	ldi	r31, 0x01	; 1
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    5a22:	86 ea       	ldi	r24, 0xA6	; 166
    5a24:	9e e0       	ldi	r25, 0x0E	; 14
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    5a26:	24 91       	lpm	r18, Z
    5a28:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    5a2a:	8d 93       	st	X+, r24
    5a2c:	9d 93       	st	X+, r25
    5a2e:	31 96       	adiw	r30, 0x01	; 1
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
	#endif
	
	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5a30:	31 e0       	ldi	r19, 0x01	; 1
    5a32:	e4 3e       	cpi	r30, 0xE4	; 228
    5a34:	f3 07       	cpc	r31, r19
    5a36:	b9 f7       	brne	.-18     	; 0x5a26 <Set_EEPROM_Default_Config+0x8a>
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	// Otherwise the thorttle high alarm will go off on first power-up
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    5a38:	8e eb       	ldi	r24, 0xBE	; 190
    5a3a:	9a e0       	ldi	r25, 0x0A	; 10
    5a3c:	90 93 d7 07 	sts	0x07D7, r25
    5a40:	80 93 d6 07 	sts	0x07D6, r24
    5a44:	ee ec       	ldi	r30, 0xCE	; 206
    5a46:	f6 e0       	ldi	r31, 0x06	; 6
    5a48:	c6 ec       	ldi	r28, 0xC6	; 198
    5a4a:	d7 e0       	ldi	r29, 0x07	; 7
    5a4c:	6e ec       	ldi	r22, 0xCE	; 206
    5a4e:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5a50:	24 e1       	ldi	r18, 0x14	; 20
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    5a52:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    5a54:	34 e6       	ldi	r19, 0x64	; 100
    5a56:	cf 01       	movw	r24, r30
    5a58:	06 97       	sbiw	r24, 0x06	; 6
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1_source_a 	= NOMIX;
    5a5a:	dc 01       	movw	r26, r24
    5a5c:	2c 93       	st	X, r18
    5a5e:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    5a60:	dc 01       	movw	r26, r24
    5a62:	2c 93       	st	X, r18
    5a64:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    5a66:	dc 01       	movw	r26, r24
    5a68:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    5a6a:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    5a6c:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    5a6e:	84 e6       	ldi	r24, 0x64	; 100
    5a70:	db 01       	movw	r26, r22
    5a72:	3d 93       	st	X+, r19
    5a74:	bd 01       	movw	r22, r26
    5a76:	b2 96       	adiw	r30, 0x22	; 34
	// Monopolar throttle is a special case. Set to -100% or -1000
	// Otherwise the thorttle high alarm will go off on first power-up
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    5a78:	b7 e0       	ldi	r27, 0x07	; 7
    5a7a:	ee 3d       	cpi	r30, 0xDE	; 222
    5a7c:	fb 07       	cpc	r31, r27
    5a7e:	59 f7       	brne	.-42     	; 0x5a56 <Set_EEPROM_Default_Config+0xba>

	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		Config.Curve[i].Point1 = 0;
		Config.Curve[i].Point2 = 17;
    5a80:	51 e1       	ldi	r21, 0x11	; 17
    5a82:	50 93 2f 08 	sts	0x082F, r21
		Config.Curve[i].Point3 = 33;
    5a86:	41 e2       	ldi	r20, 0x21	; 33
    5a88:	40 93 30 08 	sts	0x0830, r20
		Config.Curve[i].Point4 = 50;
    5a8c:	32 e3       	ldi	r19, 0x32	; 50
    5a8e:	30 93 31 08 	sts	0x0831, r19
		Config.Curve[i].Point5 = 67;
    5a92:	23 e4       	ldi	r18, 0x43	; 67
    5a94:	20 93 32 08 	sts	0x0832, r18
		Config.Curve[i].Point6 = 83;
    5a98:	93 e5       	ldi	r25, 0x53	; 83
    5a9a:	90 93 33 08 	sts	0x0833, r25
		Config.Curve[i].Point7 = 100;
    5a9e:	80 93 34 08 	sts	0x0834, r24

	// Curves 0 and 1
	for (i = 0; i < 2; i++)
	{
		Config.Curve[i].Point1 = 0;
		Config.Curve[i].Point2 = 17;
    5aa2:	50 93 37 08 	sts	0x0837, r21
		Config.Curve[i].Point3 = 33;
    5aa6:	40 93 38 08 	sts	0x0838, r20
		Config.Curve[i].Point4 = 50;
    5aaa:	30 93 39 08 	sts	0x0839, r19
		Config.Curve[i].Point5 = 67;
    5aae:	20 93 3a 08 	sts	0x083A, r18
		Config.Curve[i].Point6 = 83;
    5ab2:	90 93 3b 08 	sts	0x083B, r25
		Config.Curve[i].Point7 = 100;
    5ab6:	80 93 3c 08 	sts	0x083C, r24
    5aba:	e4 e4       	ldi	r30, 0x44	; 68
    5abc:	f8 e0       	ldi	r31, 0x08	; 8
	}

	// Curves 2 to 6	
	for (i = 2; i < 6; i++)
	{
		Config.Curve[i].Point1 = -100;
    5abe:	5c e9       	ldi	r21, 0x9C	; 156
		Config.Curve[i].Point2 = -67;
    5ac0:	4d eb       	ldi	r20, 0xBD	; 189
		Config.Curve[i].Point3 = -33;
    5ac2:	3f ed       	ldi	r19, 0xDF	; 223
		Config.Curve[i].Point4 = 0;
		Config.Curve[i].Point5 = 33;
    5ac4:	21 e2       	ldi	r18, 0x21	; 33
		Config.Curve[i].Point6 = 67;
    5ac6:	93 e4       	ldi	r25, 0x43	; 67
    5ac8:	df 01       	movw	r26, r30
    5aca:	16 97       	sbiw	r26, 0x06	; 6
	}

	// Curves 2 to 6	
	for (i = 2; i < 6; i++)
	{
		Config.Curve[i].Point1 = -100;
    5acc:	5c 93       	st	X, r21
    5ace:	11 96       	adiw	r26, 0x01	; 1
		Config.Curve[i].Point2 = -67;
    5ad0:	4c 93       	st	X, r20
    5ad2:	11 96       	adiw	r26, 0x01	; 1
		Config.Curve[i].Point3 = -33;
    5ad4:	3c 93       	st	X, r19
    5ad6:	11 96       	adiw	r26, 0x01	; 1
		Config.Curve[i].Point4 = 0;
    5ad8:	1c 92       	st	X, r1
    5ada:	11 96       	adiw	r26, 0x01	; 1
		Config.Curve[i].Point5 = 33;
    5adc:	2c 93       	st	X, r18
    5ade:	11 96       	adiw	r26, 0x01	; 1
		Config.Curve[i].Point6 = 67;
    5ae0:	9c 93       	st	X, r25
		Config.Curve[i].Point7 = 100;
    5ae2:	80 83       	st	Z, r24
    5ae4:	38 96       	adiw	r30, 0x08	; 8
		Config.Curve[i].Point6 = 83;
		Config.Curve[i].Point7 = 100;
	}

	// Curves 2 to 6	
	for (i = 2; i < 6; i++)
    5ae6:	68 e0       	ldi	r22, 0x08	; 8
    5ae8:	e4 36       	cpi	r30, 0x64	; 100
    5aea:	f6 07       	cpc	r31, r22
    5aec:	69 f7       	brne	.-38     	; 0x5ac8 <Set_EEPROM_Default_Config+0x12c>
		Config.Curve[i].Point5 = 33;
		Config.Curve[i].Point6 = 67;
		Config.Curve[i].Point7 = 100;
	}

	Config.Curve[0].channel = THROTTLE;
    5aee:	10 92 35 08 	sts	0x0835, r1
	Config.Curve[1].channel = THROTTLE;
    5af2:	10 92 3d 08 	sts	0x083D, r1
	Config.Curve[2].channel = THROTTLE;
    5af6:	10 92 45 08 	sts	0x0845, r1
	Config.Curve[3].channel = THROTTLE;
    5afa:	10 92 4d 08 	sts	0x084D, r1
	Config.Curve[4].channel = NOMIX;
    5afe:	84 e1       	ldi	r24, 0x14	; 20
    5b00:	80 93 55 08 	sts	0x0855, r24
	Config.Curve[5].channel = NOMIX;
    5b04:	80 93 5d 08 	sts	0x085D, r24
    5b08:	ae e5       	ldi	r26, 0x5E	; 94
    5b0a:	b8 e0       	ldi	r27, 0x08	; 8
    5b0c:	ec ed       	ldi	r30, 0xDC	; 220
    5b0e:	f1 e0       	ldi	r31, 0x01	; 1
	
	// Preset custom channel order to JR
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.CustomChannelOrder[i] = pgm_read_byte(&JR[i]);
    5b10:	84 91       	lpm	r24, Z
    5b12:	8d 93       	st	X+, r24
    5b14:	31 96       	adiw	r30, 0x01	; 1
	Config.Curve[3].channel = THROTTLE;
	Config.Curve[4].channel = NOMIX;
	Config.Curve[5].channel = NOMIX;
	
	// Preset custom channel order to JR
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5b16:	81 e0       	ldi	r24, 0x01	; 1
    5b18:	e4 3e       	cpi	r30, 0xE4	; 228
    5b1a:	f8 07       	cpc	r31, r24
    5b1c:	c9 f7       	brne	.-14     	; 0x5b10 <Set_EEPROM_Default_Config+0x174>
		Config.CustomChannelOrder[i] = pgm_read_byte(&JR[i]);
	}

					
	// Load manual defaults
	Load_eeprom_preset(QUADX);
    5b1e:	80 e0       	ldi	r24, 0x00	; 0
    5b20:	0e 94 22 2a 	call	0x5444	; 0x5444 <Load_eeprom_preset>
	Config.Preset = OPTIONS; // Menu will display "Options"
    5b24:	84 e0       	ldi	r24, 0x04	; 4
    5b26:	80 93 ad 06 	sts	0x06AD, r24
}
    5b2a:	df 91       	pop	r29
    5b2c:	cf 91       	pop	r28
    5b2e:	08 95       	ret

00005b30 <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    5b30:	cf 93       	push	r28
    5b32:	df 93       	push	r29
    5b34:	1f 92       	push	r1
    5b36:	cd b7       	in	r28, 0x3d	; 61
    5b38:	de b7       	in	r29, 0x3e	; 62
	bool updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    5b3a:	4e e8       	ldi	r20, 0x8E	; 142
    5b3c:	52 e0       	ldi	r21, 0x02	; 2
    5b3e:	60 e0       	ldi	r22, 0x00	; 0
    5b40:	70 e0       	ldi	r23, 0x00	; 0
    5b42:	88 e1       	ldi	r24, 0x18	; 24
    5b44:	96 e0       	ldi	r25, 0x06	; 6
    5b46:	0e 94 06 6d 	call	0xda0c	; 0xda0c <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    5b4a:	80 91 18 06 	lds	r24, 0x0618
    5b4e:	90 e0       	ldi	r25, 0x00	; 0
    5b50:	fc 01       	movw	r30, r24
    5b52:	f5 97       	sbiw	r30, 0x35	; 53
    5b54:	ed 30       	cpi	r30, 0x0D	; 13
    5b56:	f1 05       	cpc	r31, r1
    5b58:	90 f4       	brcc	.+36     	; 0x5b7e <Initial_EEPROM_Config_Load+0x4e>
    5b5a:	e2 5c       	subi	r30, 0xC2	; 194
    5b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b5e:	0c 94 6d 6c 	jmp	0xd8da	; 0xd8da <__tablejump2__>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    5b62:	0e 94 23 26 	call	0x4c46	; 0x4c46 <Update_V1_0_to_V1_1>
			updated = true;
			// Fall through...

		case V1_1_SIGNATURE:				// V1.1 detected
			Update_V1_1_to_V1_2();
    5b66:	0e 94 d6 28 	call	0x51ac	; 0x51ac <Update_V1_1_to_V1_2>
			updated = true;
			// Fall through...

		case V1_2_SIGNATURE:				// V1.2 detected
			Update_V1_2_to_V1_3B1();
    5b6a:	0e 94 0a 29 	call	0x5214	; 0x5214 <Update_V1_2_to_V1_3B1>
			updated = true;
			// Fall through...

		case V1_3_B1_SIGNATURE:				// V1.3 B1 detected
			Update_V1_3B1_to_V1_3B14();
    5b6e:	0e 94 72 29 	call	0x52e4	; 0x52e4 <Update_V1_3B1_to_V1_3B14>
			updated = true;
			// Fall through...

		case V1_3_B14_SIGNATURE:			// V1.3 B14 detected
			Update_V1_3B14_to_V1_3B15();
    5b72:	0e 94 88 29 	call	0x5310	; 0x5310 <Update_V1_3B14_to_V1_3B15>
			updated = true;
			// Fall through...
			
		case V1_3_B15_SIGNATURE:			// V1.3 B15 detected
			Update_V1_3B15_to_V1_3B17();
    5b76:	0e 94 f6 29 	call	0x53ec	; 0x53ec <Update_V1_3B15_to_V1_3B17>
			updated = true;
    5b7a:	81 e0       	ldi	r24, 0x01	; 1
    5b7c:	03 c0       	rjmp	.+6      	; 0x5b84 <Initial_EEPROM_Config_Load+0x54>
		case V1_3_B17_SIGNATURE:			// V1.3 B15 detected
			break;			
			
		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    5b7e:	0e 94 ce 2c 	call	0x599c	; 0x599c <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool updated = false;
    5b82:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    5b84:	89 83       	std	Y+1, r24	; 0x01
    5b86:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    5b8a:	89 81       	ldd	r24, Y+1	; 0x01
    5b8c:	0f 90       	pop	r0
    5b8e:	df 91       	pop	r29
    5b90:	cf 91       	pop	r28
    5b92:	08 95       	ret

00005b94 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    5b94:	cf 93       	push	r28
    5b96:	df 93       	push	r29
    5b98:	cd b7       	in	r28, 0x3d	; 61
    5b9a:	de b7       	in	r29, 0x3e	; 62
    5b9c:	ae 97       	sbiw	r28, 0x2e	; 46
    5b9e:	0f b6       	in	r0, 0x3f	; 63
    5ba0:	f8 94       	cli
    5ba2:	de bf       	out	0x3e, r29	; 62
    5ba4:	0f be       	out	0x3f, r0	; 63
    5ba6:	cd bf       	out	0x3d, r28	; 61
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	uint8_t transition_direction = P2;
	
	// Do all init tasks
	init();
    5ba8:	0e 94 78 3f 	call	0x7ef0	; 0x7ef0 <init>
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	uint8_t transition_direction = P2;
    5bac:	21 e0       	ldi	r18, 0x01	; 1
    5bae:	2e a7       	std	Y+46, r18	; 0x2e
	int8_t	old_trans_mode = 0;		// Old transition mode
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    5bb0:	43 e0       	ldi	r20, 0x03	; 3
    5bb2:	24 2e       	mov	r2, r20
    5bb4:	31 2c       	mov	r3, r1
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    5bb6:	1b a6       	std	Y+43, r1	; 0x2b
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    5bb8:	1a a6       	std	Y+42, r1	; 0x2a
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    5bba:	33 e0       	ldi	r19, 0x03	; 3
    5bbc:	3c 87       	std	Y+12, r19	; 0x0c

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    5bbe:	48 e0       	ldi	r20, 0x08	; 8
    5bc0:	4d a7       	std	Y+45, r20	; 0x2d
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    5bc2:	1a 8e       	std	Y+26, r1	; 0x1a
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    5bc4:	19 86       	std	Y+9, r1	; 0x09
	//uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    5bc6:	19 8e       	std	Y+25, r1	; 0x19
    5bc8:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	//uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;
    5bca:	19 a6       	std	Y+41, r1	; 0x29
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	//uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    5bcc:	19 a2       	std	Y+33, r1	; 0x21
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    5bce:	18 a6       	std	Y+40, r1	; 0x28
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    5bd0:	1f a2       	std	Y+39, r1	; 0x27
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    5bd2:	1e a2       	std	Y+38, r1	; 0x26

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    5bd4:	1d a2       	std	Y+37, r1	; 0x25
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    5bd6:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    5bd8:	1b a2       	std	Y+35, r1	; 0x23
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    5bda:	81 2c       	mov	r8, r1
    5bdc:	91 2c       	mov	r9, r1
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t FastServo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    5bde:	1b 82       	std	Y+3, r1	; 0x03
    5be0:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t FastServo_Rate = 0;
	uint16_t Transition_timeout = 0;
    5be2:	1f 86       	std	Y+15, r1	; 0x0f
    5be4:	1e 86       	std	Y+14, r1	; 0x0e
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t FastServo_Rate = 0;
    5be6:	1d 8a       	std	Y+21, r1	; 0x15
    5be8:	1c 8a       	std	Y+20, r1	; 0x14
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	//uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    5bea:	1b 86       	std	Y+11, r1	; 0x0b
    5bec:	1a 86       	std	Y+10, r1	; 0x0a
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    5bee:	18 a2       	std	Y+32, r1	; 0x20
    5bf0:	1f 8e       	std	Y+31, r1	; 0x1f
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    5bf2:	1d 8e       	std	Y+29, r1	; 0x1d
    5bf4:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    5bf6:	1b 8a       	std	Y+19, r1	; 0x13
    5bf8:	1a 8a       	std	Y+18, r1	; 0x12
	bool LastLoopOverdue = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    5bfa:	51 e6       	ldi	r21, 0x61	; 97
    5bfc:	c5 2e       	mov	r12, r21
    5bfe:	51 e5       	ldi	r21, 0x51	; 81
    5c00:	d5 2e       	mov	r13, r21
    5c02:	e1 2c       	mov	r14, r1
    5c04:	f1 2c       	mov	r15, r1
	bool SlowRC = true;
	bool LastLoopOverdue = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    5c06:	1d 82       	std	Y+5, r1	; 0x05
    5c08:	1e 82       	std	Y+6, r1	; 0x06
    5c0a:	1f 82       	std	Y+7, r1	; 0x07
    5c0c:	18 86       	std	Y+8, r1	; 0x08
	bool Interrupted_Clone = false;
	bool SlowRC = true;
	bool LastLoopOverdue = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    5c0e:	41 2c       	mov	r4, r1
    5c10:	51 2c       	mov	r5, r1
    5c12:	32 01       	movw	r6, r4
	bool FastServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
	bool LastLoopOverdue = false;
    5c14:	1a a2       	std	Y+34, r1	; 0x22
	bool ServoTick = false;
	bool FastServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    5c16:	51 e0       	ldi	r21, 0x01	; 1
    5c18:	5d 87       	std	Y+13, r21	; 0x0d
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool FastServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    5c1a:	19 82       	std	Y+1, r1	; 0x01
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool FastServoTick = false;
	bool ResampleRCRate = false;
    5c1c:	1e 8e       	std	Y+30, r1	; 0x1e
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool FastServoTick = false;
    5c1e:	1b 8e       	std	Y+27, r1	; 0x1b
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    5c20:	1c 82       	std	Y+4, r1	; 0x04
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    5c22:	19 8a       	std	Y+17, r1	; 0x11
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    5c24:	18 8a       	std	Y+16, r1	; 0x10

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    5c26:	10 e0       	ldi	r17, 0x00	; 0

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    5c28:	80 91 2c 05 	lds	r24, 0x052C
    5c2c:	8f 5f       	subi	r24, 0xFF	; 255
    5c2e:	80 93 2c 05 	sts	0x052C, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    5c32:	80 91 e3 08 	lds	r24, 0x08E3
    5c36:	88 23       	and	r24, r24
    5c38:	31 f0       	breq	.+12     	; 0x5c46 <main+0xb2>
		{
			InterruptCounter++;
    5c3a:	28 8d       	ldd	r18, Y+24	; 0x18
    5c3c:	39 8d       	ldd	r19, Y+25	; 0x19
    5c3e:	2f 5f       	subi	r18, 0xFF	; 255
    5c40:	3f 4f       	sbci	r19, 0xFF	; 255
    5c42:	39 8f       	std	Y+25, r19	; 0x19
    5c44:	28 8f       	std	Y+24, r18	; 0x18
		//* - Do an RC rate resample
		//* - Check the battery voltage
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    5c46:	4a 89       	ldd	r20, Y+18	; 0x12
    5c48:	5b 89       	ldd	r21, Y+19	; 0x13
    5c4a:	4c 34       	cpi	r20, 0x4C	; 76
    5c4c:	5c 44       	sbci	r21, 0x4C	; 76
    5c4e:	28 f1       	brcs	.+74     	; 0x5c9a <main+0x106>
		{
			Status_seconds++;
    5c50:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5c52:	2f 5f       	subi	r18, 0xFF	; 255
    5c54:	2a 8f       	std	Y+26, r18	; 0x1a
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    5c56:	48 8d       	ldd	r20, Y+24	; 0x18
    5c58:	59 8d       	ldd	r21, Y+25	; 0x19
    5c5a:	50 93 31 05 	sts	0x0531, r21
    5c5e:	40 93 30 05 	sts	0x0530, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    5c62:	80 91 42 06 	lds	r24, 0x0642
    5c66:	82 30       	cpi	r24, 0x02	; 2
    5c68:	11 f4       	brne	.+4      	; 0x5c6e <main+0xda>
			{
				ResampleRCRate = true;
    5c6a:	51 e0       	ldi	r21, 0x01	; 1
    5c6c:	5e 8f       	std	Y+30, r21	; 0x1e
			}
	
			// Check if Vbat lower than trigger
			if (GetVbat() < Config.PowerTriggerActual)
    5c6e:	0e 94 ec 69 	call	0xd3d8	; 0xd3d8 <GetVbat>
    5c72:	20 91 a1 06 	lds	r18, 0x06A1
    5c76:	30 91 a2 06 	lds	r19, 0x06A2
    5c7a:	82 17       	cp	r24, r18
    5c7c:	93 07       	cpc	r25, r19
    5c7e:	20 f4       	brcc	.+8      	; 0x5c88 <main+0xf4>
			{
				General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    5c80:	80 91 34 05 	lds	r24, 0x0534
    5c84:	88 60       	ori	r24, 0x08	; 8
    5c86:	03 c0       	rjmp	.+6      	; 0x5c8e <main+0xfa>
			}
			else
			{
				General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    5c88:	80 91 34 05 	lds	r24, 0x0534
    5c8c:	87 7f       	andi	r24, 0xF7	; 247
    5c8e:	80 93 34 05 	sts	0x0534, r24
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    5c92:	19 8e       	std	Y+25, r1	; 0x19
    5c94:	18 8e       	std	Y+24, r1	; 0x18

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    5c96:	1b 8a       	std	Y+19, r1	; 0x13
    5c98:	1a 8a       	std	Y+18, r1	; 0x12
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    5c9a:	2d a5       	ldd	r18, Y+45	; 0x2d
    5c9c:	82 2f       	mov	r24, r18
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	8b 30       	cpi	r24, 0x0B	; 11
    5ca2:	91 05       	cpc	r25, r1
    5ca4:	08 f0       	brcs	.+2      	; 0x5ca8 <main+0x114>
    5ca6:	85 c0       	rjmp	.+266    	; 0x5db2 <main+0x21e>
    5ca8:	fc 01       	movw	r30, r24
    5caa:	e5 5b       	subi	r30, 0xB5	; 181
    5cac:	ff 4f       	sbci	r31, 0xFF	; 255
    5cae:	0c 94 6d 6c 	jmp	0xd8da	; 0xd8da <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    5cb2:	83 b1       	in	r24, 0x03	; 3
    5cb4:	80 7f       	andi	r24, 0xF0	; 240
    5cb6:	80 3f       	cpi	r24, 0xF0	; 240
    5cb8:	49 f0       	breq	.+18     	; 0x5ccc <main+0x138>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    5cba:	80 91 6e 00 	lds	r24, 0x006E
    5cbe:	81 60       	ori	r24, 0x01	; 1
    5cc0:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    5cc4:	33 e0       	ldi	r19, 0x03	; 3
    5cc6:	3d a7       	std	Y+45, r19	; 0x2d
					// Reset the status screen timeout
					Status_seconds = 0;
    5cc8:	1a 8e       	std	Y+26, r1	; 0x1a
    5cca:	73 c0       	rjmp	.+230    	; 0x5db2 <main+0x21e>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    5ccc:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    5cd0:	81 e0       	ldi	r24, 0x01	; 1
    5cd2:	85 bb       	out	0x15, r24	; 21
    5cd4:	6e c0       	rjmp	.+220    	; 0x5db2 <main+0x21e>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    5cd6:	80 91 b7 08 	lds	r24, 0x08B7
    5cda:	81 11       	cpse	r24, r1
    5cdc:	63 c0       	rjmp	.+198    	; 0x5da4 <main+0x210>
    5cde:	49 81       	ldd	r20, Y+1	; 0x01
    5ce0:	41 11       	cpse	r20, r1
    5ce2:	62 c0       	rjmp	.+196    	; 0x5da8 <main+0x214>
    5ce4:	80 91 2d 05 	lds	r24, 0x052D
    5ce8:	88 23       	and	r24, r24
    5cea:	09 f4       	brne	.+2      	; 0x5cee <main+0x15a>
    5cec:	62 c0       	rjmp	.+196    	; 0x5db2 <main+0x21e>
				{
					// Ready to move on
					Menu_mode = STATUS;
    5cee:	54 e0       	ldi	r21, 0x04	; 4
    5cf0:	66 c0       	rjmp	.+204    	; 0x5dbe <main+0x22a>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    5cf2:	0e 94 b3 22 	call	0x4566	; 0x4566 <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    5cf6:	56 e0       	ldi	r21, 0x06	; 6
    5cf8:	5d a7       	std	Y+45, r21	; 0x2d
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    5cfa:	1d 8e       	std	Y+29, r1	; 0x1d
    5cfc:	1c 8e       	std	Y+28, r1	; 0x1c
    5cfe:	67 c0       	rjmp	.+206    	; 0x5dce <main+0x23a>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    5d00:	1f 9b       	sbis	0x03, 7	; 3
    5d02:	57 c0       	rjmp	.+174    	; 0x5db2 <main+0x21e>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    5d04:	25 e0       	ldi	r18, 0x05	; 5
    5d06:	2d a7       	std	Y+45, r18	; 0x2d
    5d08:	54 c0       	rjmp	.+168    	; 0x5db2 <main+0x21e>
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				// If in vibration test mode, stay in Status
				if ((Status_seconds >= 10) && (Config.Vibration == OFF))
    5d0a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5d0c:	2a 30       	cpi	r18, 0x0A	; 10
    5d0e:	28 f0       	brcs	.+10     	; 0x5d1a <main+0x186>
    5d10:	80 91 4b 06 	lds	r24, 0x064B
    5d14:	88 23       	and	r24, r24
    5d16:	09 f4       	brne	.+2      	; 0x5d1a <main+0x186>
    5d18:	4a c0       	rjmp	.+148    	; 0x5dae <main+0x21a>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    5d1a:	1f 9b       	sbis	0x03, 7	; 3
    5d1c:	4c c0       	rjmp	.+152    	; 0x5db6 <main+0x222>
					// Prevent PWM output
					PWMOverride = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    5d1e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5d20:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5d22:	43 31       	cpi	r20, 0x13	; 19
    5d24:	53 41       	sbci	r21, 0x13	; 19
    5d26:	08 f0       	brcs	.+2      	; 0x5d2a <main+0x196>
    5d28:	49 c0       	rjmp	.+146    	; 0x5dbc <main+0x228>
				{
					// Enable PWM output
					PWMOverride = false;					

					// Unblock motors if blocked
					Flight_flags &= ~(1 << ARM_blocker);
    5d2a:	80 91 33 05 	lds	r24, 0x0533
    5d2e:	8d 7f       	andi	r24, 0xFD	; 253
    5d30:	80 93 33 05 	sts	0x0533, r24
    5d34:	3e c0       	rjmp	.+124    	; 0x5db2 <main+0x21e>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    5d36:	80 91 b7 08 	lds	r24, 0x08B7
    5d3a:	81 11       	cpse	r24, r1
    5d3c:	42 c0       	rjmp	.+132    	; 0x5dc2 <main+0x22e>
    5d3e:	29 81       	ldd	r18, Y+1	; 0x01
    5d40:	21 11       	cpse	r18, r1
    5d42:	42 c0       	rjmp	.+132    	; 0x5dc8 <main+0x234>
    5d44:	80 91 2d 05 	lds	r24, 0x052D
    5d48:	88 23       	and	r24, r24
    5d4a:	09 f4       	brne	.+2      	; 0x5d4e <main+0x1ba>
    5d4c:	40 c0       	rjmp	.+128    	; 0x5dce <main+0x23a>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    5d4e:	38 e0       	ldi	r19, 0x08	; 8
    5d50:	3d a7       	std	Y+45, r19	; 0x2d
    5d52:	3d c0       	rjmp	.+122    	; 0x5dce <main+0x23a>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    5d54:	0e 94 39 37 	call	0x6e72	; 0x6e72 <idle_screen>
				
				// Make sure that these are cleared
				Interrupted = false;
    5d58:	10 92 b7 08 	sts	0x08B7, r1
				Interrupted_Clone = false;

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    5d5c:	49 e0       	ldi	r20, 0x09	; 9
    5d5e:	25 c0       	rjmp	.+74     	; 0x5daa <main+0x216>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    5d60:	80 91 b7 08 	lds	r24, 0x08B7
    5d64:	81 11       	cpse	r24, r1
    5d66:	07 c0       	rjmp	.+14     	; 0x5d76 <main+0x1e2>
    5d68:	59 81       	ldd	r21, Y+1	; 0x01
    5d6a:	51 11       	cpse	r21, r1
    5d6c:	04 c0       	rjmp	.+8      	; 0x5d76 <main+0x1e2>
    5d6e:	80 91 2d 05 	lds	r24, 0x052D
    5d72:	88 23       	and	r24, r24
    5d74:	61 f1       	breq	.+88     	; 0x5dce <main+0x23a>
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
														
					// Unblock motors if blocked
					Flight_flags &= ~(1 << ARM_blocker);
    5d76:	80 91 33 05 	lds	r24, 0x0533
    5d7a:	8d 7f       	andi	r24, 0xFD	; 253
    5d7c:	80 93 33 05 	sts	0x0533, r24
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    5d80:	1d a6       	std	Y+45, r1	; 0x2d
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    5d82:	19 82       	std	Y+1, r1	; 0x01
    5d84:	16 c0       	rjmp	.+44     	; 0x5db2 <main+0x21e>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    5d86:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    5d88:	80 91 34 05 	lds	r24, 0x0534
    5d8c:	84 60       	ori	r24, 0x04	; 4
    5d8e:	80 93 34 05 	sts	0x0534, r24
				LED1 = 0;
    5d92:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    5d94:	0e 94 35 51 	call	0xa26a	; 0xa26a <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = PRESTATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    5d98:	0e 94 2f 3f 	call	0x7e5e	; 0x7e5e <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = PRESTATUS;
    5d9c:	23 e0       	ldi	r18, 0x03	; 3
    5d9e:	2d a7       	std	Y+45, r18	; 0x2d
				// Reset timeout once back in status screen
				Status_seconds = 0;
    5da0:	1a 8e       	std	Y+26, r1	; 0x1a
    5da2:	15 c0       	rjmp	.+42     	; 0x5dce <main+0x23a>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    5da4:	34 e0       	ldi	r19, 0x04	; 4
    5da6:	11 c0       	rjmp	.+34     	; 0x5dca <main+0x236>
    5da8:	44 e0       	ldi	r20, 0x04	; 4
    5daa:	4d a7       	std	Y+45, r20	; 0x2d
    5dac:	0f c0       	rjmp	.+30     	; 0x5dcc <main+0x238>
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				// If in vibration test mode, stay in Status
				if ((Status_seconds >= 10) && (Config.Vibration == OFF))
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    5dae:	37 e0       	ldi	r19, 0x07	; 7
    5db0:	3d a7       	std	Y+45, r19	; 0x2d
					
					// Enable PWM output
					PWMOverride = false;
    5db2:	00 e0       	ldi	r16, 0x00	; 0
    5db4:	0d c0       	rjmp	.+26     	; 0x5dd0 <main+0x23c>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    5db6:	4a e0       	ldi	r20, 0x0A	; 10
    5db8:	4d a7       	std	Y+45, r20	; 0x2d
    5dba:	09 c0       	rjmp	.+18     	; 0x5dce <main+0x23a>
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
				{
					Menu_mode = PRESTATUS;
    5dbc:	53 e0       	ldi	r21, 0x03	; 3
    5dbe:	5d a7       	std	Y+45, r21	; 0x2d
    5dc0:	06 c0       	rjmp	.+12     	; 0x5dce <main+0x23a>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    5dc2:	28 e0       	ldi	r18, 0x08	; 8
    5dc4:	2d a7       	std	Y+45, r18	; 0x2d
    5dc6:	02 c0       	rjmp	.+4      	; 0x5dcc <main+0x238>
    5dc8:	38 e0       	ldi	r19, 0x08	; 8
    5dca:	3d a7       	std	Y+45, r19	; 0x2d
				
					// Prevent PWM output going into STATUS_TIMEOUT
					PWMOverride = true;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    5dcc:	19 82       	std	Y+1, r1	; 0x01
					Flight_flags &= ~(1 << ARM_blocker);
				}
				else
				{
					// Prevent PWM output until at least when next RC arrives
					PWMOverride = true;			
    5dce:	01 e0       	ldi	r16, 0x01	; 1
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message
		if (Overdue)
    5dd0:	80 91 2d 05 	lds	r24, 0x052D
    5dd4:	88 23       	and	r24, r24
    5dd6:	21 f0       	breq	.+8      	; 0x5de0 <main+0x24c>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    5dd8:	80 91 34 05 	lds	r24, 0x0534
    5ddc:	82 60       	ori	r24, 0x02	; 2
    5dde:	03 c0       	rjmp	.+6      	; 0x5de6 <main+0x252>
*/
		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    5de0:	80 91 34 05 	lds	r24, 0x0534
    5de4:	8d 7f       	andi	r24, 0xFD	; 253
    5de6:	80 93 34 05 	sts	0x0534, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    5dea:	80 91 34 05 	lds	r24, 0x0534
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    5dee:	83 fd       	sbrc	r24, 3
    5df0:	08 c0       	rjmp	.+16     	; 0x5e02 <main+0x26e>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    5df2:	80 91 34 05 	lds	r24, 0x0534
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    5df6:	81 fd       	sbrc	r24, 1
    5df8:	04 c0       	rjmp	.+8      	; 0x5e02 <main+0x26e>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    5dfa:	80 91 34 05 	lds	r24, 0x0534

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    5dfe:	80 ff       	sbrs	r24, 0
    5e00:	06 c0       	rjmp	.+12     	; 0x5e0e <main+0x27a>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    5e02:	80 91 32 05 	lds	r24, 0x0532
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    5e06:	84 ff       	sbrs	r24, 4
    5e08:	02 c0       	rjmp	.+4      	; 0x5e0e <main+0x27a>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    5e0a:	29 9a       	sbi	0x05, 1	; 5
    5e0c:	01 c0       	rjmp	.+2      	; 0x5e10 <main+0x27c>
		}
		else 
		{
			LVA = 0;
    5e0e:	29 98       	cbi	0x05, 1	; 5
		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		// All cases - reset arm timer
		if (Config.ArmMode == ARMABLE)
    5e10:	80 91 a6 06 	lds	r24, 0x06A6
    5e14:	81 30       	cpi	r24, 0x01	; 1
    5e16:	09 f0       	breq	.+2      	; 0x5e1a <main+0x286>
    5e18:	a1 c0       	rjmp	.+322    	; 0x5f5c <main+0x3c8>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    5e1a:	80 91 46 09 	lds	r24, 0x0946
    5e1e:	90 91 47 09 	lds	r25, 0x0947
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    5e22:	81 34       	cpi	r24, 0x41	; 65
    5e24:	9c 4f       	sbci	r25, 0xFC	; 252
    5e26:	3c f0       	brlt	.+14     	; 0x5e36 <main+0x2a2>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    5e28:	80 91 46 09 	lds	r24, 0x0946
    5e2c:	90 91 47 09 	lds	r25, 0x0947
    5e30:	80 3c       	cpi	r24, 0xC0	; 192
    5e32:	93 40       	sbci	r25, 0x03	; 3
    5e34:	14 f1       	brlt	.+68     	; 0x5e7a <main+0x2e6>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    5e36:	80 91 48 09 	lds	r24, 0x0948
    5e3a:	90 91 49 09 	lds	r25, 0x0949
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    5e3e:	81 34       	cpi	r24, 0x41	; 65
    5e40:	9c 4f       	sbci	r25, 0xFC	; 252
    5e42:	3c f0       	brlt	.+14     	; 0x5e52 <main+0x2be>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    5e44:	80 91 48 09 	lds	r24, 0x0948
    5e48:	90 91 49 09 	lds	r25, 0x0949
    5e4c:	80 3c       	cpi	r24, 0xC0	; 192
    5e4e:	93 40       	sbci	r25, 0x03	; 3
    5e50:	a4 f0       	brlt	.+40     	; 0x5e7a <main+0x2e6>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    5e52:	80 91 4a 09 	lds	r24, 0x094A
    5e56:	90 91 4b 09 	lds	r25, 0x094B
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    5e5a:	81 34       	cpi	r24, 0x41	; 65
    5e5c:	9c 4f       	sbci	r25, 0xFC	; 252
    5e5e:	3c f0       	brlt	.+14     	; 0x5e6e <main+0x2da>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    5e60:	80 91 4a 09 	lds	r24, 0x094A
    5e64:	90 91 4b 09 	lds	r25, 0x094B
    5e68:	80 3c       	cpi	r24, 0xC0	; 192
    5e6a:	93 40       	sbci	r25, 0x03	; 3
    5e6c:	34 f0       	brlt	.+12     	; 0x5e7a <main+0x2e6>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    5e6e:	80 91 42 09 	lds	r24, 0x0942
    5e72:	90 91 43 09 	lds	r25, 0x0943
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    5e76:	c3 97       	sbiw	r24, 0x33	; 51
    5e78:	1c f0       	brlt	.+6      	; 0x5e80 <main+0x2ec>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
			   )
			{
				Arm_timer = 0;
    5e7a:	41 2c       	mov	r4, r1
    5e7c:	51 2c       	mov	r5, r1
    5e7e:	32 01       	movw	r6, r4
			}
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
    5e80:	80 91 34 05 	lds	r24, 0x0534
    5e84:	82 ff       	sbrs	r24, 2
    5e86:	23 c0       	rjmp	.+70     	; 0x5ece <main+0x33a>
				Disarm_timer = 0;
				Disarm_seconds = 0;
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    5e88:	2c e4       	ldi	r18, 0x4C	; 76
    5e8a:	42 16       	cp	r4, r18
    5e8c:	52 06       	cpc	r5, r18
    5e8e:	61 04       	cpc	r6, r1
    5e90:	71 04       	cpc	r7, r1
    5e92:	08 f4       	brcc	.+2      	; 0x5e96 <main+0x302>
    5e94:	6a c0       	rjmp	.+212    	; 0x5f6a <main+0x3d6>
    5e96:	80 91 46 09 	lds	r24, 0x0946
    5e9a:	90 91 47 09 	lds	r25, 0x0947
    5e9e:	80 34       	cpi	r24, 0x40	; 64
    5ea0:	9c 4f       	sbci	r25, 0xFC	; 252
    5ea2:	0c f0       	brlt	.+2      	; 0x5ea6 <main+0x312>
    5ea4:	62 c0       	rjmp	.+196    	; 0x5f6a <main+0x3d6>
				{
					Arm_timer = 0;
					General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    5ea6:	80 91 34 05 	lds	r24, 0x0534
    5eaa:	8b 7f       	andi	r24, 0xFB	; 251
    5eac:	80 93 34 05 	sts	0x0534, r24
					CalibrateGyrosSlow();					// Calibrate gyros
    5eb0:	0e 94 ad 39 	call	0x735a	; 0x735a <CalibrateGyrosSlow>
					LED1 = 1;								// Signal that FC is ready
    5eb4:	2b 9a       	sbi	0x05, 3	; 5

					Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove arm glitch
    5eb6:	80 91 33 05 	lds	r24, 0x0533
    5eba:	82 60       	ori	r24, 0x02	; 2
    5ebc:	80 93 33 05 	sts	0x0533, r24
					Servo_Rate = 0;

					// Force Menu to IDLE immediately unless in vibration test mode
					if (Config.Vibration == OFF)
    5ec0:	80 91 4b 06 	lds	r24, 0x064B
    5ec4:	81 11       	cpse	r24, r1
    5ec6:	55 c0       	rjmp	.+170    	; 0x5f72 <main+0x3de>
					{
						Menu_mode = PRESTATUS_TIMEOUT;		// Previously IDLE, which was wrong. 
    5ec8:	27 e0       	ldi	r18, 0x07	; 7
    5eca:	2d a7       	std	Y+45, r18	; 0x2d
    5ecc:	52 c0       	rjmp	.+164    	; 0x5f72 <main+0x3de>
		
			// If armed, disarm if sticks held
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    5ece:	42 ee       	ldi	r20, 0xE2	; 226
    5ed0:	44 16       	cp	r4, r20
    5ed2:	44 ee       	ldi	r20, 0xE4	; 228
    5ed4:	54 06       	cpc	r5, r20
    5ed6:	61 04       	cpc	r6, r1
    5ed8:	71 04       	cpc	r7, r1
    5eda:	b8 f0       	brcs	.+46     	; 0x5f0a <main+0x376>
    5edc:	80 91 46 09 	lds	r24, 0x0946
    5ee0:	90 91 47 09 	lds	r25, 0x0947
    5ee4:	81 3c       	cpi	r24, 0xC1	; 193
    5ee6:	93 40       	sbci	r25, 0x03	; 3
    5ee8:	84 f0       	brlt	.+32     	; 0x5f0a <main+0x376>
				{
					Arm_timer = 0;
					General_error |= (1 << DISARMED);		// Set flags to disarmed
    5eea:	80 91 34 05 	lds	r24, 0x0534
    5eee:	84 60       	ori	r24, 0x04	; 4
    5ef0:	80 93 34 05 	sts	0x0534, r24
					LED1 = 0;								// Signal that FC is now disarmed
    5ef4:	2b 98       	cbi	0x05, 3	; 5
					
					Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove arm glitch
    5ef6:	80 91 33 05 	lds	r24, 0x0533
    5efa:	82 60       	ori	r24, 0x02	; 2
    5efc:	80 93 33 05 	sts	0x0533, r24
					Servo_Rate = 0;
    5f00:	1b 86       	std	Y+11, r1	; 0x0b
    5f02:	1a 86       	std	Y+10, r1	; 0x0a
			else 
			{
				// Disarm the FC after DISARM_TIMER seconds if aileron at max
				if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    5f04:	41 2c       	mov	r4, r1
    5f06:	51 2c       	mov	r5, r1
    5f08:	32 01       	movw	r6, r4
#endif			
				}

				// Automatic disarm
				// Reset auto-disarm count if any RX activity or set to zero
				if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0))
    5f0a:	80 91 33 05 	lds	r24, 0x0533
    5f0e:	80 fd       	sbrc	r24, 0
    5f10:	0d c0       	rjmp	.+26     	; 0x5f2c <main+0x398>
    5f12:	80 91 a7 06 	lds	r24, 0x06A7
    5f16:	88 23       	and	r24, r24
    5f18:	49 f0       	breq	.+18     	; 0x5f2c <main+0x398>
					Disarm_timer = 0;
					Disarm_seconds = 0;
				}
		
				// Increment disarm timer (seconds) if armed
				if (Disarm_timer > SECOND_TIMER)
    5f1a:	2a 81       	ldd	r18, Y+2	; 0x02
    5f1c:	3b 81       	ldd	r19, Y+3	; 0x03
    5f1e:	2c 34       	cpi	r18, 0x4C	; 76
    5f20:	3c 44       	sbci	r19, 0x4C	; 76
    5f22:	38 f0       	brcs	.+14     	; 0x5f32 <main+0x39e>
				{
					Disarm_seconds++;
    5f24:	59 85       	ldd	r21, Y+9	; 0x09
    5f26:	5f 5f       	subi	r21, 0xFF	; 255
    5f28:	59 87       	std	Y+9, r21	; 0x09
    5f2a:	01 c0       	rjmp	.+2      	; 0x5f2e <main+0x39a>
    5f2c:	19 86       	std	Y+9, r1	; 0x09
    5f2e:	1b 82       	std	Y+3, r1	; 0x03
    5f30:	1a 82       	std	Y+2, r1	; 0x02
					Disarm_timer = 0;
				}

				// Auto-disarm model if timeout enabled and due
				// Don't allow disarms less than 30 seconds. That's just silly...
				if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))
    5f32:	40 91 a7 06 	lds	r20, 0x06A7
    5f36:	59 85       	ldd	r21, Y+9	; 0x09
    5f38:	25 2f       	mov	r18, r21
    5f3a:	30 e0       	ldi	r19, 0x00	; 0
    5f3c:	84 2f       	mov	r24, r20
    5f3e:	99 27       	eor	r25, r25
    5f40:	87 fd       	sbrc	r24, 7
    5f42:	90 95       	com	r25
    5f44:	28 17       	cp	r18, r24
    5f46:	39 07       	cpc	r19, r25
    5f48:	e4 f0       	brlt	.+56     	; 0x5f82 <main+0x3ee>
    5f4a:	4e 31       	cpi	r20, 0x1E	; 30
    5f4c:	d4 f0       	brlt	.+52     	; 0x5f82 <main+0x3ee>
				{
					// Disarm the FC
					General_error |= (1 << DISARMED);		// Set flags to disarmed
    5f4e:	80 91 34 05 	lds	r24, 0x0534
    5f52:	84 60       	ori	r24, 0x04	; 4
    5f54:	80 93 34 05 	sts	0x0534, r24
					LED1 = 0;								// Signal that FC is now disarmed
    5f58:	2b 98       	cbi	0x05, 3	; 5
    5f5a:	13 c0       	rjmp	.+38     	; 0x5f82 <main+0x3ee>
		} // if (Config.ArmMode == ARMABLE)
		
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    5f5c:	80 91 34 05 	lds	r24, 0x0534
    5f60:	8b 7f       	andi	r24, 0xFB	; 251
    5f62:	80 93 34 05 	sts	0x0534, r24
			LED1 = 1;
    5f66:	2b 9a       	sbi	0x05, 3	; 5
    5f68:	0c c0       	rjmp	.+24     	; 0x5f82 <main+0x3ee>
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
				Disarm_seconds = 0;
    5f6a:	19 86       	std	Y+9, r1	; 0x09
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    5f6c:	1b 82       	std	Y+3, r1	; 0x03
    5f6e:	1a 82       	std	Y+2, r1	; 0x02
    5f70:	08 c0       	rjmp	.+16     	; 0x5f82 <main+0x3ee>
				Disarm_seconds = 0;
    5f72:	19 86       	std	Y+9, r1	; 0x09
			
			// If disarmed, arm if sticks held
			if (General_error & (1 << DISARMED))
			{
				// Reset auto-disarm count
				Disarm_timer = 0;
    5f74:	1b 82       	std	Y+3, r1	; 0x03
    5f76:	1a 82       	std	Y+2, r1	; 0x02
					General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
					CalibrateGyrosSlow();					// Calibrate gyros
					LED1 = 1;								// Signal that FC is ready

					Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove arm glitch
					Servo_Rate = 0;
    5f78:	1b 86       	std	Y+11, r1	; 0x0b
    5f7a:	1a 86       	std	Y+10, r1	; 0x0a
								
				// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
				// If aileron is at min, arm the FC
				if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
				{
					Arm_timer = 0;
    5f7c:	41 2c       	mov	r4, r1
    5f7e:	51 2c       	mov	r5, r1
    5f80:	32 01       	movw	r6, r4
		//************************************************************
		//* Get RC data
		//************************************************************

// Debug - receiver-less switch between P1 and P2
if (BUTTON2 == 0)
    5f82:	1e 99       	sbic	0x03, 6	; 3
    5f84:	06 c0       	rjmp	.+12     	; 0x5f92 <main+0x3fe>
{
	flip = !flip;
    5f86:	80 91 28 05 	lds	r24, 0x0528
    5f8a:	91 e0       	ldi	r25, 0x01	; 1
    5f8c:	89 27       	eor	r24, r25
    5f8e:	80 93 28 05 	sts	0x0528, r24
}

		// Update zeroed RC channel data
		RxGetChannels();
    5f92:	0e 94 bc 66 	call	0xcd78	; 0xcd78 <RxGetChannels>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to.
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    5f96:	e0 91 45 06 	lds	r30, 0x0645
    5f9a:	ee 0f       	add	r30, r30
    5f9c:	ff 0b       	sbc	r31, r31
    5f9e:	ec 5b       	subi	r30, 0xBC	; 188
    5fa0:	f6 4f       	sbci	r31, 0xF6	; 246
    5fa2:	80 81       	ld	r24, Z
    5fa4:	91 81       	ldd	r25, Z+1	; 0x01
    5fa6:	85 3f       	cpi	r24, 0xF5	; 245
    5fa8:	91 40       	sbci	r25, 0x01	; 1
    5faa:	14 f0       	brlt	.+4      	; 0x5fb0 <main+0x41c>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    5fac:	82 e0       	ldi	r24, 0x02	; 2
    5fae:	06 c0       	rjmp	.+12     	; 0x5fbc <main+0x428>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    5fb0:	80 81       	ld	r24, Z
    5fb2:	91 81       	ldd	r25, Z+1	; 0x01
    5fb4:	8d 30       	cpi	r24, 0x0D	; 13
    5fb6:	9e 4f       	sbci	r25, 0xFE	; 254
    5fb8:	24 f0       	brlt	.+8      	; 0x5fc2 <main+0x42e>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    5fba:	81 e0       	ldi	r24, 0x01	; 1
    5fbc:	80 93 fa 07 	sts	0x07FA, r24
    5fc0:	02 c0       	rjmp	.+4      	; 0x5fc6 <main+0x432>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    5fc2:	10 92 fa 07 	sts	0x07FA, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeedOut))
    5fc6:	5c 85       	ldd	r21, Y+12	; 0x0c
    5fc8:	53 30       	cpi	r21, 0x03	; 3
    5fca:	29 f0       	breq	.+10     	; 0x5fd6 <main+0x442>
    5fcc:	80 91 46 06 	lds	r24, 0x0646
    5fd0:	2a a5       	ldd	r18, Y+42	; 0x2a
    5fd2:	28 17       	cp	r18, r24
    5fd4:	19 f1       	breq	.+70     	; 0x601c <main+0x488>
		{
			switch(Config.FlightSel)
    5fd6:	30 91 fa 07 	lds	r19, 0x07FA
    5fda:	3c 87       	std	Y+12, r19	; 0x0c
    5fdc:	31 30       	cpi	r19, 0x01	; 1
    5fde:	49 f0       	breq	.+18     	; 0x5ff2 <main+0x45e>
    5fe0:	32 30       	cpi	r19, 0x02	; 2
    5fe2:	69 f0       	breq	.+26     	; 0x5ffe <main+0x46a>
    5fe4:	31 11       	cpse	r19, r1
    5fe6:	17 c0       	rjmp	.+46     	; 0x6016 <main+0x482>
			{
				case 0:
					Transition_state = TRANS_P1;
    5fe8:	10 92 3a 05 	sts	0x053A, r1
					transition_counter = Config.Transition_P1;
    5fec:	80 91 48 06 	lds	r24, 0x0648
    5ff0:	0b c0       	rjmp	.+22     	; 0x6008 <main+0x474>
					break;
				case 1:
					Transition_state = TRANS_P1n;
    5ff2:	84 e0       	ldi	r24, 0x04	; 4
    5ff4:	80 93 3a 05 	sts	0x053A, r24
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    5ff8:	80 91 49 06 	lds	r24, 0x0649
    5ffc:	05 c0       	rjmp	.+10     	; 0x6008 <main+0x474>
					break;
				case 2:
					Transition_state = TRANS_P2;
    5ffe:	89 e0       	ldi	r24, 0x09	; 9
    6000:	80 93 3a 05 	sts	0x053A, r24
					transition_counter = Config.Transition_P2;
    6004:	80 91 4a 06 	lds	r24, 0x064A
    6008:	99 27       	eor	r25, r25
    600a:	87 fd       	sbrc	r24, 7
    600c:	90 95       	com	r25
    600e:	90 93 3c 05 	sts	0x053C, r25
    6012:	80 93 3b 05 	sts	0x053B, r24
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeedOut;
    6016:	40 91 46 06 	lds	r20, 0x0646
    601a:	4a a7       	std	Y+42, r20	; 0x2a
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    601c:	bb 24       	eor	r11, r11
    601e:	b3 94       	inc	r11
    6020:	80 91 fa 07 	lds	r24, 0x07FA
    6024:	5c 85       	ldd	r21, Y+12	; 0x0c
    6026:	85 13       	cpse	r24, r21
    6028:	01 c0       	rjmp	.+2      	; 0x602c <main+0x498>
    602a:	b1 2c       	mov	r11, r1
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeedOut == 0)
    602c:	80 91 46 06 	lds	r24, 0x0646
    6030:	81 11       	cpse	r24, r1
    6032:	03 c0       	rjmp	.+6      	; 0x603a <main+0x4a6>
		{
			// Update the transition variable based on the selected RC channel
			UpdateTransition();
    6034:	0e 94 a6 67 	call	0xcf4c	; 0xcf4c <UpdateTransition>
    6038:	08 c0       	rjmp	.+16     	; 0x604a <main+0x4b6>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    603a:	80 91 3b 05 	lds	r24, 0x053B
    603e:	90 91 3c 05 	lds	r25, 0x053C
    6042:	90 93 38 05 	sts	0x0538, r25
    6046:	80 93 37 05 	sts	0x0537, r24
		}

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeedOut == 0)
    604a:	40 91 46 06 	lds	r20, 0x0646
    604e:	41 11       	cpse	r20, r1
    6050:	03 c0       	rjmp	.+6      	; 0x6058 <main+0x4c4>
		{
			Transition_state = TRANSITIONING;
    6052:	85 e0       	ldi	r24, 0x05	; 5
    6054:	80 93 3a 05 	sts	0x053A, r24
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    6058:	bb 20       	and	r11, r11
    605a:	a1 f0       	breq	.+40     	; 0x6084 <main+0x4f0>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    605c:	80 91 fa 07 	lds	r24, 0x07FA
    6060:	99 27       	eor	r25, r25
    6062:	87 fd       	sbrc	r24, 7
    6064:	90 95       	com	r25
    6066:	fc 01       	movw	r30, r24
    6068:	ee 0f       	add	r30, r30
    606a:	ff 1f       	adc	r31, r31
    606c:	e8 0f       	add	r30, r24
    606e:	f9 1f       	adc	r31, r25
    6070:	2c 85       	ldd	r18, Y+12	; 0x0c
    6072:	e2 0f       	add	r30, r18
    6074:	f1 1d       	adc	r31, r1
    6076:	27 fd       	sbrc	r18, 7
    6078:	fa 95       	dec	r31
    607a:	ec 51       	subi	r30, 0x1C	; 28
    607c:	fe 4f       	sbci	r31, 0xFE	; 254
    607e:	e4 91       	lpm	r30, Z
    6080:	e0 93 3a 05 	sts	0x053A, r30
		}

		// Calculate transition time from user's setting based on the direction of travel
		if (transition_direction == P2)
    6084:	3e a5       	ldd	r19, Y+46	; 0x2e
    6086:	31 30       	cpi	r19, 0x01	; 1
    6088:	29 f4       	brne	.+10     	; 0x6094 <main+0x500>
		{
			transition_time = TRANSITION_TIMER * Config.TransitionSpeedOut; // Outbound transition speed	
    608a:	53 ec       	ldi	r21, 0xC3	; 195
    608c:	45 03       	mulsu	r20, r21
    608e:	c0 01       	movw	r24, r0
    6090:	11 24       	eor	r1, r1
    6092:	06 c0       	rjmp	.+12     	; 0x60a0 <main+0x50c>
		}
		else 
		{
			transition_time = TRANSITION_TIMER * Config.TransitionSpeedIn; // Inbound transition speed		
    6094:	20 91 47 06 	lds	r18, 0x0647
    6098:	33 ec       	ldi	r19, 0xC3	; 195
    609a:	23 03       	mulsu	r18, r19
    609c:	c0 01       	movw	r24, r0
    609e:	11 24       	eor	r1, r1
		}
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeedOut != 0) && (Transition_timeout > transition_time)) ||
    60a0:	44 23       	and	r20, r20
    60a2:	29 f0       	breq	.+10     	; 0x60ae <main+0x51a>
    60a4:	2e 85       	ldd	r18, Y+14	; 0x0e
    60a6:	3f 85       	ldd	r19, Y+15	; 0x0f
    60a8:	82 17       	cp	r24, r18
    60aa:	93 07       	cpc	r25, r19
    60ac:	18 f0       	brcs	.+6      	; 0x60b4 <main+0x520>
    60ae:	bb 20       	and	r11, r11
    60b0:	09 f4       	brne	.+2      	; 0x60b4 <main+0x520>
    60b2:	e2 c0       	rjmp	.+452    	; 0x6278 <main+0x6e4>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    60b4:	80 91 3a 05 	lds	r24, 0x053A
    60b8:	81 11       	cpse	r24, r1
    60ba:	03 c0       	rjmp	.+6      	; 0x60c2 <main+0x52e>
			{
				transition_counter = Config.Transition_P1;
    60bc:	80 91 48 06 	lds	r24, 0x0648
    60c0:	09 c0       	rjmp	.+18     	; 0x60d4 <main+0x540>
			}
			else if (Transition_state == TRANS_P1n)
    60c2:	84 30       	cpi	r24, 0x04	; 4
    60c4:	19 f4       	brne	.+6      	; 0x60cc <main+0x538>
			{
				transition_counter = Config.Transition_P1n;
    60c6:	80 91 49 06 	lds	r24, 0x0649
    60ca:	04 c0       	rjmp	.+8      	; 0x60d4 <main+0x540>
			}
			else if (Transition_state == TRANS_P2)
    60cc:	89 30       	cpi	r24, 0x09	; 9
    60ce:	51 f4       	brne	.+20     	; 0x60e4 <main+0x550>
			{
				transition_counter = Config.Transition_P2;
    60d0:	80 91 4a 06 	lds	r24, 0x064A
    60d4:	99 27       	eor	r25, r25
    60d6:	87 fd       	sbrc	r24, 7
    60d8:	90 95       	com	r25
    60da:	90 93 3c 05 	sts	0x053C, r25
    60de:	80 93 3b 05 	sts	0x053B, r24
    60e2:	2c c0       	rjmp	.+88     	; 0x613c <main+0x5a8>
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
			}
*/
			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    60e4:	82 30       	cpi	r24, 0x02	; 2
    60e6:	69 f4       	brne	.+26     	; 0x6102 <main+0x56e>
			{
				if (transition_counter > Config.Transition_P1)
    60e8:	20 91 3b 05 	lds	r18, 0x053B
    60ec:	30 91 3c 05 	lds	r19, 0x053C
    60f0:	80 91 48 06 	lds	r24, 0x0648
    60f4:	99 27       	eor	r25, r25
    60f6:	87 fd       	sbrc	r24, 7
    60f8:	90 95       	com	r25
    60fa:	82 17       	cp	r24, r18
    60fc:	93 07       	cpc	r25, r19
    60fe:	24 f0       	brlt	.+8      	; 0x6108 <main+0x574>
    6100:	0d c0       	rjmp	.+26     	; 0x611c <main+0x588>
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
			}
*/
			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    6102:	86 30       	cpi	r24, 0x06	; 6
    6104:	89 f3       	breq	.-30     	; 0x60e8 <main+0x554>
    6106:	1a c0       	rjmp	.+52     	; 0x613c <main+0x5a8>
			{
				if (transition_counter > Config.Transition_P1)
				{
					transition_counter--;
    6108:	21 50       	subi	r18, 0x01	; 1
    610a:	31 09       	sbc	r19, r1
    610c:	30 93 3c 05 	sts	0x053C, r19
    6110:	20 93 3b 05 	sts	0x053B, r18
					
					// Check end point
					if (transition_counter <= Config.Transition_P1)
    6114:	82 17       	cp	r24, r18
    6116:	93 07       	cpc	r25, r19
    6118:	54 f4       	brge	.+20     	; 0x612e <main+0x59a>
    611a:	0f c0       	rjmp	.+30     	; 0x613a <main+0x5a6>
						Transition_state = TRANS_P1;
					}
				}
				else
				{
					transition_counter++;
    611c:	2f 5f       	subi	r18, 0xFF	; 255
    611e:	3f 4f       	sbci	r19, 0xFF	; 255
    6120:	30 93 3c 05 	sts	0x053C, r19
    6124:	20 93 3b 05 	sts	0x053B, r18
			
					// Check end point
					if (transition_counter >= Config.Transition_P1)
    6128:	28 17       	cp	r18, r24
    612a:	39 07       	cpc	r19, r25
    612c:	34 f0       	brlt	.+12     	; 0x613a <main+0x5a6>
					{
						transition_counter = Config.Transition_P1;
    612e:	90 93 3c 05 	sts	0x053C, r25
    6132:	80 93 3b 05 	sts	0x053B, r24
						Transition_state = TRANS_P1;
    6136:	10 92 3a 05 	sts	0x053A, r1
					}
				}
				
				transition_direction = P1;
    613a:	1e a6       	std	Y+46, r1	; 0x2e
			}

			// Handle timed transition between P1 and P1.n
			if (Transition_state == TRANS_P1_to_P1n_start)
    613c:	80 91 3a 05 	lds	r24, 0x053A
    6140:	81 30       	cpi	r24, 0x01	; 1
    6142:	a1 f5       	brne	.+104    	; 0x61ac <main+0x618>
			{
				if (transition_counter > Config.Transition_P1n)
    6144:	20 91 3b 05 	lds	r18, 0x053B
    6148:	30 91 3c 05 	lds	r19, 0x053C
    614c:	80 91 49 06 	lds	r24, 0x0649
    6150:	99 27       	eor	r25, r25
    6152:	87 fd       	sbrc	r24, 7
    6154:	90 95       	com	r25
    6156:	82 17       	cp	r24, r18
    6158:	93 07       	cpc	r25, r19
    615a:	b4 f4       	brge	.+44     	; 0x6188 <main+0x5f4>
				{
					transition_counter--;
    615c:	21 50       	subi	r18, 0x01	; 1
    615e:	31 09       	sbc	r19, r1
    6160:	30 93 3c 05 	sts	0x053C, r19
    6164:	20 93 3b 05 	sts	0x053B, r18
					
					// Check end point
					if (transition_counter <= Config.Transition_P1n)
    6168:	82 17       	cp	r24, r18
    616a:	93 07       	cpc	r25, r19
    616c:	1c f4       	brge	.+6      	; 0x6174 <main+0x5e0>
						transition_counter = Config.Transition_P1n;
						Transition_state = TRANS_P1n;
					}
				}

				transition_direction = P2;
    616e:	31 e0       	ldi	r19, 0x01	; 1
    6170:	3e a7       	std	Y+46, r19	; 0x2e
    6172:	1c c0       	rjmp	.+56     	; 0x61ac <main+0x618>
					transition_counter--;
					
					// Check end point
					if (transition_counter <= Config.Transition_P1n)
					{
						transition_counter = Config.Transition_P1n;
    6174:	90 93 3c 05 	sts	0x053C, r25
    6178:	80 93 3b 05 	sts	0x053B, r24
						Transition_state = TRANS_P1n;
    617c:	84 e0       	ldi	r24, 0x04	; 4
    617e:	80 93 3a 05 	sts	0x053A, r24
						transition_counter = Config.Transition_P1n;
						Transition_state = TRANS_P1n;
					}
				}

				transition_direction = P2;
    6182:	51 e0       	ldi	r21, 0x01	; 1
    6184:	5e a7       	std	Y+46, r21	; 0x2e
    6186:	12 c0       	rjmp	.+36     	; 0x61ac <main+0x618>
						Transition_state = TRANS_P1n;
					}
				}
				else
				{
					transition_counter++;
    6188:	2f 5f       	subi	r18, 0xFF	; 255
    618a:	3f 4f       	sbci	r19, 0xFF	; 255
    618c:	30 93 3c 05 	sts	0x053C, r19
    6190:	20 93 3b 05 	sts	0x053B, r18
					
					// Check end point
					if (transition_counter >= Config.Transition_P1n)
    6194:	28 17       	cp	r18, r24
    6196:	39 07       	cpc	r19, r25
    6198:	54 f3       	brlt	.-44     	; 0x616e <main+0x5da>
					{
						transition_counter = Config.Transition_P1n;
    619a:	90 93 3c 05 	sts	0x053C, r25
    619e:	80 93 3b 05 	sts	0x053B, r24
						Transition_state = TRANS_P1n;
    61a2:	84 e0       	ldi	r24, 0x04	; 4
    61a4:	80 93 3a 05 	sts	0x053A, r24
					}
				}

				transition_direction = P2;
    61a8:	21 e0       	ldi	r18, 0x01	; 1
    61aa:	2e a7       	std	Y+46, r18	; 0x2e
			}			
				
			// Handle timed transition between P2 and P1.n
			if (Transition_state == TRANS_P2_to_P1n_start)
    61ac:	80 91 3a 05 	lds	r24, 0x053A
    61b0:	88 30       	cpi	r24, 0x08	; 8
    61b2:	39 f5       	brne	.+78     	; 0x6202 <main+0x66e>
			{
				if (transition_counter > Config.Transition_P1n)
    61b4:	20 91 3b 05 	lds	r18, 0x053B
    61b8:	30 91 3c 05 	lds	r19, 0x053C
    61bc:	80 91 49 06 	lds	r24, 0x0649
    61c0:	99 27       	eor	r25, r25
    61c2:	87 fd       	sbrc	r24, 7
    61c4:	90 95       	com	r25
    61c6:	82 17       	cp	r24, r18
    61c8:	93 07       	cpc	r25, r19
    61ca:	54 f4       	brge	.+20     	; 0x61e0 <main+0x64c>
				{
					transition_counter--;
    61cc:	21 50       	subi	r18, 0x01	; 1
    61ce:	31 09       	sbc	r19, r1
    61d0:	30 93 3c 05 	sts	0x053C, r19
    61d4:	20 93 3b 05 	sts	0x053B, r18
					
					// Check end point
					if (transition_counter <= Config.Transition_P1n)
    61d8:	82 17       	cp	r24, r18
    61da:	93 07       	cpc	r25, r19
    61dc:	54 f4       	brge	.+20     	; 0x61f2 <main+0x65e>
    61de:	10 c0       	rjmp	.+32     	; 0x6200 <main+0x66c>
						Transition_state = TRANS_P1n;
					}
				}
				else
				{
					transition_counter++;
    61e0:	2f 5f       	subi	r18, 0xFF	; 255
    61e2:	3f 4f       	sbci	r19, 0xFF	; 255
    61e4:	30 93 3c 05 	sts	0x053C, r19
    61e8:	20 93 3b 05 	sts	0x053B, r18
					
					// Check end point
					if (transition_counter >= Config.Transition_P1n)
    61ec:	28 17       	cp	r18, r24
    61ee:	39 07       	cpc	r19, r25
    61f0:	3c f0       	brlt	.+14     	; 0x6200 <main+0x66c>
					{
						transition_counter = Config.Transition_P1n;
    61f2:	90 93 3c 05 	sts	0x053C, r25
    61f6:	80 93 3b 05 	sts	0x053B, r24
						Transition_state = TRANS_P1n;
    61fa:	84 e0       	ldi	r24, 0x04	; 4
    61fc:	80 93 3a 05 	sts	0x053A, r24
					}
				}

				transition_direction = P1;
    6200:	1e a6       	std	Y+46, r1	; 0x2e
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    6202:	80 91 3a 05 	lds	r24, 0x053A
    6206:	8b 7f       	andi	r24, 0xFB	; 251
    6208:	83 30       	cpi	r24, 0x03	; 3
    620a:	a1 f5       	brne	.+104    	; 0x6274 <main+0x6e0>
			{
				if (transition_counter > Config.Transition_P2)
    620c:	20 91 3b 05 	lds	r18, 0x053B
    6210:	30 91 3c 05 	lds	r19, 0x053C
    6214:	80 91 4a 06 	lds	r24, 0x064A
    6218:	99 27       	eor	r25, r25
    621a:	87 fd       	sbrc	r24, 7
    621c:	90 95       	com	r25
    621e:	82 17       	cp	r24, r18
    6220:	93 07       	cpc	r25, r19
    6222:	b4 f4       	brge	.+44     	; 0x6250 <main+0x6bc>
				{
					transition_counter--;
    6224:	21 50       	subi	r18, 0x01	; 1
    6226:	31 09       	sbc	r19, r1
    6228:	30 93 3c 05 	sts	0x053C, r19
    622c:	20 93 3b 05 	sts	0x053B, r18
					
					// Check end point
					if (transition_counter <= Config.Transition_P2)
    6230:	82 17       	cp	r24, r18
    6232:	93 07       	cpc	r25, r19
    6234:	1c f4       	brge	.+6      	; 0x623c <main+0x6a8>
						transition_counter = Config.Transition_P2;
						Transition_state = TRANS_P2;
					}
				}

				transition_direction = P2;
    6236:	31 e0       	ldi	r19, 0x01	; 1
    6238:	3e a7       	std	Y+46, r19	; 0x2e
    623a:	1c c0       	rjmp	.+56     	; 0x6274 <main+0x6e0>
					transition_counter--;
					
					// Check end point
					if (transition_counter <= Config.Transition_P2)
					{
						transition_counter = Config.Transition_P2;
    623c:	90 93 3c 05 	sts	0x053C, r25
    6240:	80 93 3b 05 	sts	0x053B, r24
						Transition_state = TRANS_P2;
    6244:	89 e0       	ldi	r24, 0x09	; 9
    6246:	80 93 3a 05 	sts	0x053A, r24
						transition_counter = Config.Transition_P2;
						Transition_state = TRANS_P2;
					}
				}

				transition_direction = P2;
    624a:	51 e0       	ldi	r21, 0x01	; 1
    624c:	5e a7       	std	Y+46, r21	; 0x2e
    624e:	12 c0       	rjmp	.+36     	; 0x6274 <main+0x6e0>
						Transition_state = TRANS_P2;
					}
				}
				else
				{
					transition_counter++;
    6250:	2f 5f       	subi	r18, 0xFF	; 255
    6252:	3f 4f       	sbci	r19, 0xFF	; 255
    6254:	30 93 3c 05 	sts	0x053C, r19
    6258:	20 93 3b 05 	sts	0x053B, r18
					
					// Check end point
					if (transition_counter >= Config.Transition_P2)
    625c:	28 17       	cp	r18, r24
    625e:	39 07       	cpc	r19, r25
    6260:	54 f3       	brlt	.-44     	; 0x6236 <main+0x6a2>
					{
						transition_counter = Config.Transition_P2;
    6262:	90 93 3c 05 	sts	0x053C, r25
    6266:	80 93 3b 05 	sts	0x053B, r24
						Transition_state = TRANS_P2;
    626a:	89 e0       	ldi	r24, 0x09	; 9
    626c:	80 93 3a 05 	sts	0x053A, r24
					}
				}

				transition_direction = P2;
    6270:	21 e0       	ldi	r18, 0x01	; 1
    6272:	2e a7       	std	Y+46, r18	; 0x2e
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeedOut != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    6274:	1f 86       	std	Y+15, r1	; 0x0f
    6276:	1e 86       	std	Y+14, r1	; 0x0e
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == Config.Transition_P1))
    6278:	50 91 3a 05 	lds	r21, 0x053A
    627c:	55 23       	and	r21, r21
    627e:	61 f0       	breq	.+24     	; 0x6298 <main+0x704>
    6280:	80 91 37 05 	lds	r24, 0x0537
    6284:	90 91 38 05 	lds	r25, 0x0538
    6288:	20 91 48 06 	lds	r18, 0x0648
    628c:	33 27       	eor	r19, r19
    628e:	27 fd       	sbrc	r18, 7
    6290:	30 95       	com	r19
    6292:	82 17       	cp	r24, r18
    6294:	93 07       	cpc	r25, r19
    6296:	39 f4       	brne	.+14     	; 0x62a6 <main+0x712>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    6298:	8c e0       	ldi	r24, 0x0C	; 12
    629a:	a6 ef       	ldi	r26, 0xF6	; 246
    629c:	b8 e0       	ldi	r27, 0x08	; 8
    629e:	1d 92       	st	X+, r1
    62a0:	8a 95       	dec	r24
    62a2:	e9 f7       	brne	.-6      	; 0x629e <main+0x70a>
    62a4:	10 c0       	rjmp	.+32     	; 0x62c6 <main+0x732>
		}
		else if ((Transition_state == TRANS_P2) || (transition == Config.Transition_P2))
    62a6:	59 30       	cpi	r21, 0x09	; 9
    62a8:	41 f0       	breq	.+16     	; 0x62ba <main+0x726>
    62aa:	20 91 4a 06 	lds	r18, 0x064A
    62ae:	33 27       	eor	r19, r19
    62b0:	27 fd       	sbrc	r18, 7
    62b2:	30 95       	com	r19
    62b4:	82 17       	cp	r24, r18
    62b6:	93 07       	cpc	r25, r19
    62b8:	31 f4       	brne	.+12     	; 0x62c6 <main+0x732>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    62ba:	8c e0       	ldi	r24, 0x0C	; 12
    62bc:	ea ee       	ldi	r30, 0xEA	; 234
    62be:	f8 e0       	ldi	r31, 0x08	; 8
    62c0:	11 92       	st	Z+, r1
    62c2:	8a 95       	dec	r24
    62c4:	e9 f7       	brne	.-6      	; 0x62c0 <main+0x72c>
		
		//**********************************************************************
		//* Reset the IMU when using two orientations and just leaving P1 or P2
		//**********************************************************************
		
		if (Config.P1_Reference != NO_ORIENT)
    62c6:	80 91 a4 06 	lds	r24, 0x06A4
    62ca:	88 23       	and	r24, r24
    62cc:	59 f1       	breq	.+86     	; 0x6324 <main+0x790>
		{
			// If Config.FlightSel has changed (switch based) and TransitionSpeed not set to zero, the transition state will change.
			if ((Config.TransitionSpeedOut != 0) && (Transition_state != Old_transition_state) && ((Old_transition_state == TRANS_P1) || (Old_transition_state == TRANS_P2)))
    62ce:	44 23       	and	r20, r20
    62d0:	59 f0       	breq	.+22     	; 0x62e8 <main+0x754>
    62d2:	80 91 39 05 	lds	r24, 0x0539
    62d6:	58 17       	cp	r21, r24
    62d8:	29 f1       	breq	.+74     	; 0x6324 <main+0x790>
    62da:	88 23       	and	r24, r24
    62dc:	11 f0       	breq	.+4      	; 0x62e2 <main+0x74e>
    62de:	89 30       	cpi	r24, 0x09	; 9
    62e0:	09 f5       	brne	.+66     	; 0x6324 <main+0x790>
			{
				reset_IMU();
    62e2:	0e 94 2f 3f 	call	0x7e5e	; 0x7e5e <reset_IMU>
    62e6:	1e c0       	rjmp	.+60     	; 0x6324 <main+0x790>
			
			// If TransitionSpeed = 0, the state is always TRANSITIONING so we can't use the old/new state changes.
			// If user is using a knob or TX-slowed switch, TransitionSpeed will be 0.
			else if (
						(Config.TransitionSpeedOut == 0) &&														// Manual transition mode and...
						(((old_transition == Config.Transition_P1) && (transition > Config.Transition_P1)) ||	// Was in P1 or P2
    62e8:	80 91 35 05 	lds	r24, 0x0535
    62ec:	90 91 36 05 	lds	r25, 0x0536
    62f0:	40 91 48 06 	lds	r20, 0x0648
    62f4:	55 27       	eor	r21, r21
    62f6:	47 fd       	sbrc	r20, 7
    62f8:	50 95       	com	r21
    62fa:	20 91 37 05 	lds	r18, 0x0537
    62fe:	30 91 38 05 	lds	r19, 0x0538
			}
			
			// If TransitionSpeed = 0, the state is always TRANSITIONING so we can't use the old/new state changes.
			// If user is using a knob or TX-slowed switch, TransitionSpeed will be 0.
			else if (
						(Config.TransitionSpeedOut == 0) &&														// Manual transition mode and...
    6302:	84 17       	cp	r24, r20
    6304:	95 07       	cpc	r25, r21
    6306:	19 f4       	brne	.+6      	; 0x630e <main+0x77a>
						(((old_transition == Config.Transition_P1) && (transition > Config.Transition_P1)) ||	// Was in P1 or P2
    6308:	82 17       	cp	r24, r18
    630a:	93 07       	cpc	r25, r19
    630c:	54 f3       	brlt	.-44     	; 0x62e2 <main+0x74e>
						((old_transition == Config.Transition_P2) && (transition < Config.Transition_P2)))		// Is not somewhere in-between.
    630e:	40 91 4a 06 	lds	r20, 0x064A
    6312:	55 27       	eor	r21, r21
    6314:	47 fd       	sbrc	r20, 7
    6316:	50 95       	com	r21
			
			// If TransitionSpeed = 0, the state is always TRANSITIONING so we can't use the old/new state changes.
			// If user is using a knob or TX-slowed switch, TransitionSpeed will be 0.
			else if (
						(Config.TransitionSpeedOut == 0) &&														// Manual transition mode and...
						(((old_transition == Config.Transition_P1) && (transition > Config.Transition_P1)) ||	// Was in P1 or P2
    6318:	84 17       	cp	r24, r20
    631a:	95 07       	cpc	r25, r21
    631c:	19 f4       	brne	.+6      	; 0x6324 <main+0x790>
						((old_transition == Config.Transition_P2) && (transition < Config.Transition_P2)))		// Is not somewhere in-between.
    631e:	28 17       	cp	r18, r24
    6320:	39 07       	cpc	r19, r25
    6322:	fc f2       	brlt	.-66     	; 0x62e2 <main+0x74e>
				reset_IMU();
			}
		}
		
		// Save current flight mode
		old_flight = Config.FlightSel;
    6324:	20 91 fa 07 	lds	r18, 0x07FA
    6328:	2c 87       	std	Y+12, r18	; 0x0c
		
		// Save old transtion state;
		Old_transition_state = Transition_state;
    632a:	80 91 3a 05 	lds	r24, 0x053A
    632e:	80 93 39 05 	sts	0x0539, r24
		
		// Save last transition value
		old_transition = transition;
    6332:	80 91 37 05 	lds	r24, 0x0537
    6336:	90 91 38 05 	lds	r25, 0x0538
    633a:	90 93 36 05 	sts	0x0536, r25
    633e:	80 93 35 05 	sts	0x0535, r24
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    6342:	0e 94 8d 42 	call	0x851a	; 0x851a <TIM16_ReadTCNT1>
    6346:	9f 8b       	std	Y+23, r25	; 0x17
    6348:	8e 8b       	std	Y+22, r24	; 0x16
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    634a:	88 15       	cp	r24, r8
    634c:	99 05       	cpc	r25, r9
    634e:	b8 f4       	brcc	.+46     	; 0x637e <main+0x7ea>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    6350:	80 e0       	ldi	r24, 0x00	; 0
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	a1 e0       	ldi	r26, 0x01	; 1
    6356:	b0 e0       	ldi	r27, 0x00	; 0
    6358:	88 19       	sub	r24, r8
    635a:	99 09       	sbc	r25, r9
    635c:	a1 09       	sbc	r26, r1
    635e:	b1 09       	sbc	r27, r1
    6360:	4e 89       	ldd	r20, Y+22	; 0x16
    6362:	5f 89       	ldd	r21, Y+23	; 0x17
    6364:	84 0f       	add	r24, r20
    6366:	95 1f       	adc	r25, r21
    6368:	a1 1d       	adc	r26, r1
    636a:	b1 1d       	adc	r27, r1
    636c:	2d 81       	ldd	r18, Y+5	; 0x05
    636e:	3e 81       	ldd	r19, Y+6	; 0x06
    6370:	4f 81       	ldd	r20, Y+7	; 0x07
    6372:	58 85       	ldd	r21, Y+8	; 0x08
    6374:	28 0f       	add	r18, r24
    6376:	39 1f       	adc	r19, r25
    6378:	4a 1f       	adc	r20, r26
    637a:	5b 1f       	adc	r21, r27
    637c:	0c c0       	rjmp	.+24     	; 0x6396 <main+0x802>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    637e:	8e 89       	ldd	r24, Y+22	; 0x16
    6380:	9f 89       	ldd	r25, Y+23	; 0x17
    6382:	88 19       	sub	r24, r8
    6384:	99 09       	sbc	r25, r9
    6386:	2d 81       	ldd	r18, Y+5	; 0x05
    6388:	3e 81       	ldd	r19, Y+6	; 0x06
    638a:	4f 81       	ldd	r20, Y+7	; 0x07
    638c:	58 85       	ldd	r21, Y+8	; 0x08
    638e:	28 0f       	add	r18, r24
    6390:	39 1f       	adc	r19, r25
    6392:	41 1d       	adc	r20, r1
    6394:	51 1d       	adc	r21, r1
    6396:	2d 83       	std	Y+5, r18	; 0x05
    6398:	3e 83       	std	Y+6, r19	; 0x06
    639a:	4f 83       	std	Y+7, r20	; 0x07
    639c:	58 87       	std	Y+8, r21	; 0x08
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    639e:	80 91 b2 00 	lds	r24, 0x00B2
    63a2:	3f a1       	ldd	r19, Y+39	; 0x27
    63a4:	83 1b       	sub	r24, r19
    63a6:	48 0e       	add	r4, r24
    63a8:	51 1c       	adc	r5, r1
    63aa:	61 1c       	adc	r6, r1
    63ac:	71 1c       	adc	r7, r1
		Arm_TCNT2 = TCNT2;
    63ae:	40 91 b2 00 	lds	r20, 0x00B2
    63b2:	4f a3       	std	Y+39, r20	; 0x27

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    63b4:	80 91 b2 00 	lds	r24, 0x00B2
    63b8:	59 a1       	ldd	r21, Y+33	; 0x21
    63ba:	85 1b       	sub	r24, r21
    63bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    63be:	3b 85       	ldd	r19, Y+11	; 0x0b
    63c0:	28 0f       	add	r18, r24
    63c2:	31 1d       	adc	r19, r1
    63c4:	3b 87       	std	Y+11, r19	; 0x0b
    63c6:	2a 87       	std	Y+10, r18	; 0x0a
		FastServo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    63c8:	80 91 b2 00 	lds	r24, 0x00B2
    63cc:	85 1b       	sub	r24, r21
    63ce:	4c 89       	ldd	r20, Y+20	; 0x14
    63d0:	5d 89       	ldd	r21, Y+21	; 0x15
    63d2:	48 0f       	add	r20, r24
    63d4:	51 1d       	adc	r21, r1
    63d6:	5d 8b       	std	Y+21, r21	; 0x15
    63d8:	4c 8b       	std	Y+20, r20	; 0x14
		ServoRate_TCNT2 = TCNT2;
    63da:	50 91 b2 00 	lds	r21, 0x00B2
    63de:	59 a3       	std	Y+33, r21	; 0x21
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    63e0:	80 91 29 05 	lds	r24, 0x0529
    63e4:	90 91 2a 05 	lds	r25, 0x052A
    63e8:	20 91 b2 00 	lds	r18, 0x00B2
    63ec:	30 91 2b 05 	lds	r19, 0x052B
    63f0:	23 1b       	sub	r18, r19
    63f2:	82 0f       	add	r24, r18
    63f4:	91 1d       	adc	r25, r1
    63f6:	90 93 2a 05 	sts	0x052A, r25
    63fa:	80 93 29 05 	sts	0x0529, r24
		Servo_TCNT2 = TCNT2;
    63fe:	80 91 b2 00 	lds	r24, 0x00B2
    6402:	80 93 2b 05 	sts	0x052B, r24
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    6406:	80 91 b2 00 	lds	r24, 0x00B2
    640a:	2b a1       	ldd	r18, Y+35	; 0x23
    640c:	82 1b       	sub	r24, r18
    640e:	4e 85       	ldd	r20, Y+14	; 0x0e
    6410:	5f 85       	ldd	r21, Y+15	; 0x0f
    6412:	48 0f       	add	r20, r24
    6414:	51 1d       	adc	r21, r1
    6416:	5f 87       	std	Y+15, r21	; 0x0f
    6418:	4e 87       	std	Y+14, r20	; 0x0e
		Transition_TCNT2 = TCNT2;
    641a:	50 91 b2 00 	lds	r21, 0x00B2
    641e:	5b a3       	std	Y+35, r21	; 0x23

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    6420:	80 91 b2 00 	lds	r24, 0x00B2
    6424:	2c a1       	ldd	r18, Y+36	; 0x24
    6426:	82 1b       	sub	r24, r18
    6428:	4a 89       	ldd	r20, Y+18	; 0x12
    642a:	5b 89       	ldd	r21, Y+19	; 0x13
    642c:	48 0f       	add	r20, r24
    642e:	51 1d       	adc	r21, r1
    6430:	5b 8b       	std	Y+19, r21	; 0x13
    6432:	4a 8b       	std	Y+18, r20	; 0x12
		Status_TCNT2 = TCNT2;
    6434:	50 91 b2 00 	lds	r21, 0x00B2
    6438:	5c a3       	std	Y+36, r21	; 0x24
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    643a:	80 91 b2 00 	lds	r24, 0x00B2
    643e:	2d a1       	ldd	r18, Y+37	; 0x25
    6440:	82 1b       	sub	r24, r18
    6442:	4c 8d       	ldd	r20, Y+28	; 0x1c
    6444:	5d 8d       	ldd	r21, Y+29	; 0x1d
    6446:	48 0f       	add	r20, r24
    6448:	51 1d       	adc	r21, r1
    644a:	5d 8f       	std	Y+29, r21	; 0x1d
    644c:	4c 8f       	std	Y+28, r20	; 0x1c
		Refresh_TCNT2 = TCNT2;
    644e:	50 91 b2 00 	lds	r21, 0x00B2
    6452:	5d a3       	std	Y+37, r21	; 0x25

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    6454:	80 91 b2 00 	lds	r24, 0x00B2
    6458:	2e a1       	ldd	r18, Y+38	; 0x26
    645a:	82 1b       	sub	r24, r18
    645c:	4a 81       	ldd	r20, Y+2	; 0x02
    645e:	5b 81       	ldd	r21, Y+3	; 0x03
    6460:	48 0f       	add	r20, r24
    6462:	51 1d       	adc	r21, r1
    6464:	5b 83       	std	Y+3, r21	; 0x03
    6466:	4a 83       	std	Y+2, r20	; 0x02
		Disarm_TCNT2 = TCNT2;
    6468:	50 91 b2 00 	lds	r21, 0x00B2
    646c:	5e a3       	std	Y+38, r21	; 0x26

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    646e:	80 91 b2 00 	lds	r24, 0x00B2
    6472:	28 a5       	ldd	r18, Y+40	; 0x28
    6474:	82 1b       	sub	r24, r18
    6476:	4f 8d       	ldd	r20, Y+31	; 0x1f
    6478:	58 a1       	ldd	r21, Y+32	; 0x20
    647a:	48 0f       	add	r20, r24
    647c:	51 1d       	adc	r21, r1
    647e:	58 a3       	std	Y+32, r21	; 0x20
    6480:	4f 8f       	std	Y+31, r20	; 0x1f
		Ticker_TCNT2 = TCNT2;
    6482:	50 91 b2 00 	lds	r21, 0x00B2
    6486:	58 a7       	std	Y+40, r21	; 0x28
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    6488:	2f 8d       	ldd	r18, Y+31	; 0x1f
    648a:	38 a1       	ldd	r19, Y+32	; 0x20
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    648c:	80 91 32 05 	lds	r24, 0x0532
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    6490:	33 ff       	sbrs	r19, 3
    6492:	02 c0       	rjmp	.+4      	; 0x6498 <main+0x904>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    6494:	80 61       	ori	r24, 0x10	; 16
    6496:	01 c0       	rjmp	.+2      	; 0x649a <main+0x906>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    6498:	8f 7e       	andi	r24, 0xEF	; 239
    649a:	80 93 32 05 	sts	0x0532, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    649e:	4a 85       	ldd	r20, Y+10	; 0x0a
    64a0:	5b 85       	ldd	r21, Y+11	; 0x0b
    64a2:	4d 32       	cpi	r20, 0x2D	; 45
    64a4:	51 40       	sbci	r21, 0x01	; 1
    64a6:	20 f0       	brcs	.+8      	; 0x64b0 <main+0x91c>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    64a8:	1b 86       	std	Y+11, r1	; 0x0b
    64aa:	1a 86       	std	Y+10, r1	; 0x0a
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    64ac:	21 e0       	ldi	r18, 0x01	; 1
    64ae:	2c 83       	std	Y+4, r18	; 0x04
			Servo_Rate = 0;
		}
		
		if (FastServo_Rate > SERVO_RATE_HIGH)
    64b0:	4c 89       	ldd	r20, Y+20	; 0x14
    64b2:	5d 89       	ldd	r21, Y+21	; 0x15
    64b4:	4a 3d       	cpi	r20, 0xDA	; 218
    64b6:	51 05       	cpc	r21, r1
    64b8:	20 f0       	brcs	.+8      	; 0x64c2 <main+0x92e>
		{
			FastServoTick = true;	// Slow device is ready for output generation
			FastServo_Rate = 0;
    64ba:	1d 8a       	std	Y+21, r1	; 0x15
    64bc:	1c 8a       	std	Y+20, r1	; 0x14
			Servo_Rate = 0;
		}
		
		if (FastServo_Rate > SERVO_RATE_HIGH)
		{
			FastServoTick = true;	// Slow device is ready for output generation
    64be:	51 e0       	ldi	r21, 0x01	; 1
    64c0:	5b 8f       	std	Y+27, r21	; 0x1b
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms) // debug - now 50ms
		if (RC_Timeout > RC_OVERDUE)
    64c2:	80 91 29 05 	lds	r24, 0x0529
    64c6:	90 91 2a 05 	lds	r25, 0x052A
    64ca:	82 3d       	cpi	r24, 0xD2	; 210
    64cc:	93 40       	sbci	r25, 0x03	; 3
    64ce:	18 f0       	brcs	.+6      	; 0x64d6 <main+0x942>
			if ((!Overdue) && (Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
			{
				add_log(NOSIGNAL);
			}
#endif			
			Overdue = true;	// This results in a "No Signal" error
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	80 93 2d 05 	sts	0x052D, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    64d6:	0e 94 2a 38 	call	0x7054	; 0x7054 <ReadGyros>
		ReadAcc();
    64da:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    64de:	0e 94 8d 42 	call	0x851a	; 0x851a <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    64e2:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    64e4:	20 91 2e 05 	lds	r18, 0x052E
    64e8:	30 91 2f 05 	lds	r19, 0x052F
    64ec:	82 17       	cp	r24, r18
    64ee:	93 07       	cpc	r25, r19
    64f0:	48 f4       	brcc	.+18     	; 0x6504 <main+0x970>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    64f2:	20 91 2e 05 	lds	r18, 0x052E
    64f6:	30 91 2f 05 	lds	r19, 0x052F
    64fa:	fc 01       	movw	r30, r24
    64fc:	e2 1b       	sub	r30, r18
    64fe:	f3 0b       	sbc	r31, r19
    6500:	9f 01       	movw	r18, r30
    6502:	08 c0       	rjmp	.+16     	; 0x6514 <main+0x980>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    6504:	20 91 2e 05 	lds	r18, 0x052E
    6508:	30 91 2f 05 	lds	r19, 0x052F
    650c:	ac 01       	movw	r20, r24
    650e:	42 1b       	sub	r20, r18
    6510:	53 0b       	sbc	r21, r19
    6512:	9a 01       	movw	r18, r20
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    6514:	90 93 2f 05 	sts	0x052F, r25
    6518:	80 93 2e 05 	sts	0x052E, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    651c:	80 91 ca 08 	lds	r24, 0x08CA
    6520:	90 91 cb 08 	lds	r25, 0x08CB
    6524:	a9 01       	movw	r20, r18
    6526:	60 e0       	ldi	r22, 0x00	; 0
    6528:	70 e0       	ldi	r23, 0x00	; 0
    652a:	02 97       	sbiw	r24, 0x02	; 2
    652c:	18 f4       	brcc	.+6      	; 0x6534 <main+0x9a0>
		{
			interval = ticker_16; // uint16_t
    652e:	4a 01       	movw	r8, r20
    6530:	5b 01       	movw	r10, r22
    6532:	11 c0       	rjmp	.+34     	; 0x6556 <main+0x9c2>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    6534:	80 90 ca 08 	lds	r8, 0x08CA
    6538:	90 90 cb 08 	lds	r9, 0x08CB
    653c:	a1 2c       	mov	r10, r1
    653e:	b1 2c       	mov	r11, r1
    6540:	2f e0       	ldi	r18, 0x0F	; 15
    6542:	88 0c       	add	r8, r8
    6544:	99 1c       	adc	r9, r9
    6546:	aa 1c       	adc	r10, r10
    6548:	bb 1c       	adc	r11, r11
    654a:	2a 95       	dec	r18
    654c:	d1 f7       	brne	.-12     	; 0x6542 <main+0x9ae>
    654e:	84 0e       	add	r8, r20
    6550:	95 1e       	adc	r9, r21
    6552:	a6 1e       	adc	r10, r22
    6554:	b7 1e       	adc	r11, r23
		}

		TMR0_counter = 0;
    6556:	10 92 cb 08 	sts	0x08CB, r1
    655a:	10 92 ca 08 	sts	0x08CA, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    655e:	c5 01       	movw	r24, r10
    6560:	b4 01       	movw	r22, r8
    6562:	0e 94 17 3d 	call	0x7a2e	; 0x7a2e <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    6566:	c5 01       	movw	r24, r10
    6568:	b4 01       	movw	r22, r8
    656a:	0e 94 e7 60 	call	0xc1ce	; 0xc1ce <Sensor_PID>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)  // THROTTLEIDLE = 50
    656e:	80 91 42 09 	lds	r24, 0x0942
    6572:	90 91 43 09 	lds	r25, 0x0943
    6576:	c2 97       	sbiw	r24, 0x32	; 50
    6578:	5c f4       	brge	.+22     	; 0x6590 <main+0x9fc>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);
    657a:	80 91 34 05 	lds	r24, 0x0534
    657e:	8e 7f       	andi	r24, 0xFE	; 254
    6580:	80 93 34 05 	sts	0x0534, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6);
    6584:	88 e1       	ldi	r24, 0x18	; 24
    6586:	aa ee       	ldi	r26, 0xEA	; 234
    6588:	b8 e0       	ldi	r27, 0x08	; 8
    658a:	1d 92       	st	X+, r1
    658c:	8a 95       	dec	r24
    658e:	e9 f7       	brne	.-6      	; 0x658a <main+0x9f6>
		//* FrameRate = Serial frame gap as measured by the ISR.
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//************************************************************

		if (Interrupted)
    6590:	80 91 b7 08 	lds	r24, 0x08B7
    6594:	88 23       	and	r24, r24
    6596:	09 f4       	brne	.+2      	; 0x659a <main+0xa06>
    6598:	b8 c0       	rjmp	.+368    	; 0x670a <main+0xb76>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer if not in FAST mode.
			if (Config.Servo_rate < FAST)
    659a:	80 91 42 06 	lds	r24, 0x0642
    659e:	82 30       	cpi	r24, 0x02	; 2
    65a0:	64 f4       	brge	.+24     	; 0x65ba <main+0xa26>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    65a2:	21 e0       	ldi	r18, 0x01	; 1
    65a4:	2d 87       	std	Y+13, r18	; 0x0d
    65a6:	2d 81       	ldd	r18, Y+5	; 0x05
    65a8:	3e 81       	ldd	r19, Y+6	; 0x06
    65aa:	4f 81       	ldd	r20, Y+7	; 0x07
    65ac:	58 85       	ldd	r21, Y+8	; 0x08
    65ae:	24 3c       	cpi	r18, 0xC4	; 196
    65b0:	32 4a       	sbci	r19, 0xA2	; 162
    65b2:	41 05       	cpc	r20, r1
    65b4:	51 05       	cpc	r21, r1
    65b6:	08 f4       	brcc	.+2      	; 0x65ba <main+0xa26>
    65b8:	1d 86       	std	Y+13, r1	; 0x0d
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    65ba:	11 11       	cpse	r17, r1
    65bc:	0e c0       	rjmp	.+28     	; 0x65da <main+0xa46>
    65be:	82 30       	cpi	r24, 0x02	; 2
    65c0:	09 f0       	breq	.+2      	; 0x65c4 <main+0xa30>
    65c2:	cb c1       	rjmp	.+918    	; 0x695a <main+0xdc6>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    65c4:	80 91 e6 08 	lds	r24, 0x08E6
    65c8:	90 91 e7 08 	lds	r25, 0x08E7
    65cc:	21 e0       	ldi	r18, 0x01	; 1
    65ce:	2d 87       	std	Y+13, r18	; 0x0d
    65d0:	84 3c       	cpi	r24, 0xC4	; 196
    65d2:	92 4a       	sbci	r25, 0xA2	; 162
    65d4:	40 f4       	brcc	.+16     	; 0x65e6 <main+0xa52>
    65d6:	1d 86       	std	Y+13, r1	; 0x0d
    65d8:	3a c0       	rjmp	.+116    	; 0x664e <main+0xaba>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the serial data gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    65da:	82 30       	cpi	r24, 0x02	; 2
    65dc:	09 f0       	breq	.+2      	; 0x65e0 <main+0xa4c>
    65de:	bd c1       	rjmp	.+890    	; 0x695a <main+0xdc6>
				// Slow packets (19.7ms gap). Pulse spans just two input packets.
				// 38.8s available space for S.Bus, 40ms for Satellite and 39.92ms for Xtreme.
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
    65e0:	4d 85       	ldd	r20, Y+13	; 0x0d
    65e2:	44 23       	and	r20, r20
    65e4:	a1 f1       	breq	.+104    	; 0x664e <main+0xaba>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
    65e6:	58 ec       	ldi	r21, 0xC8	; 200
    65e8:	c5 16       	cp	r12, r21
    65ea:	5b e4       	ldi	r21, 0x4B	; 75
    65ec:	d5 06       	cpc	r13, r21
    65ee:	e1 04       	cpc	r14, r1
    65f0:	f1 04       	cpc	r15, r1
    65f2:	08 f0       	brcs	.+2      	; 0x65f6 <main+0xa62>
    65f4:	c2 c1       	rjmp	.+900    	; 0x697a <main+0xde6>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
    65f6:	86 e2       	ldi	r24, 0x26	; 38
    65f8:	c8 16       	cp	r12, r24
    65fa:	8f e3       	ldi	r24, 0x3F	; 63
    65fc:	d8 06       	cpc	r13, r24
    65fe:	e1 04       	cpc	r14, r1
    6600:	f1 04       	cpc	r15, r1
    6602:	08 f0       	brcs	.+2      	; 0x6606 <main+0xa72>
    6604:	be c1       	rjmp	.+892    	; 0x6982 <main+0xdee>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
    6606:	91 e2       	ldi	r25, 0x21	; 33
    6608:	c9 16       	cp	r12, r25
    660a:	96 e3       	ldi	r25, 0x36	; 54
    660c:	d9 06       	cpc	r13, r25
    660e:	e1 04       	cpc	r14, r1
    6610:	f1 04       	cpc	r15, r1
    6612:	08 f0       	brcs	.+2      	; 0x6616 <main+0xa82>
    6614:	ba c1       	rjmp	.+884    	; 0x698a <main+0xdf6>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
    6616:	ad e5       	ldi	r26, 0x5D	; 93
    6618:	ca 16       	cp	r12, r26
    661a:	af e2       	ldi	r26, 0x2F	; 47
    661c:	da 06       	cpc	r13, r26
    661e:	e1 04       	cpc	r14, r1
    6620:	f1 04       	cpc	r15, r1
    6622:	08 f0       	brcs	.+2      	; 0x6626 <main+0xa92>
    6624:	9e c1       	rjmp	.+828    	; 0x6962 <main+0xdce>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
    6626:	bc ec       	ldi	r27, 0xCC	; 204
    6628:	cb 16       	cp	r12, r27
    662a:	b9 e2       	ldi	r27, 0x29	; 41
    662c:	db 06       	cpc	r13, r27
    662e:	e1 04       	cpc	r14, r1
    6630:	f1 04       	cpc	r15, r1
    6632:	08 f0       	brcs	.+2      	; 0x6636 <main+0xaa2>
    6634:	9a c1       	rjmp	.+820    	; 0x696a <main+0xdd6>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
    6636:	11 e0       	ldi	r17, 0x01	; 1
    6638:	e4 ee       	ldi	r30, 0xE4	; 228
    663a:	ce 16       	cp	r12, r30
    663c:	e5 e2       	ldi	r30, 0x25	; 37
    663e:	de 06       	cpc	r13, r30
    6640:	e1 04       	cpc	r14, r1
    6642:	f1 04       	cpc	r15, r1
    6644:	80 f5       	brcc	.+96     	; 0x66a6 <main+0xb12>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    6646:	9a e0       	ldi	r25, 0x0A	; 10
    6648:	29 2e       	mov	r2, r25
    664a:	31 2c       	mov	r3, r1
    664c:	33 c0       	rjmp	.+102    	; 0x66b4 <main+0xb20>

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
    664e:	fd ec       	ldi	r31, 0xCD	; 205
    6650:	cf 16       	cp	r12, r31
    6652:	f6 e4       	ldi	r31, 0x46	; 70
    6654:	df 06       	cpc	r13, r31
    6656:	e1 04       	cpc	r14, r1
    6658:	f1 04       	cpc	r15, r1
    665a:	08 f0       	brcs	.+2      	; 0x665e <main+0xaca>
    665c:	8a c1       	rjmp	.+788    	; 0x6972 <main+0xdde>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
    665e:	24 ea       	ldi	r18, 0xA4	; 164
    6660:	c2 16       	cp	r12, r18
    6662:	28 e3       	ldi	r18, 0x38	; 56
    6664:	d2 06       	cpc	r13, r18
    6666:	e1 04       	cpc	r14, r1
    6668:	f1 04       	cpc	r15, r1
    666a:	08 f0       	brcs	.+2      	; 0x666e <main+0xada>
    666c:	86 c1       	rjmp	.+780    	; 0x697a <main+0xde6>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
    666e:	33 e3       	ldi	r19, 0x33	; 51
    6670:	c3 16       	cp	r12, r19
    6672:	3f e2       	ldi	r19, 0x2F	; 47
    6674:	d3 06       	cpc	r13, r19
    6676:	e1 04       	cpc	r14, r1
    6678:	f1 04       	cpc	r15, r1
    667a:	08 f0       	brcs	.+2      	; 0x667e <main+0xaea>
    667c:	82 c1       	rjmp	.+772    	; 0x6982 <main+0xdee>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
    667e:	45 e7       	ldi	r20, 0x75	; 117
    6680:	c4 16       	cp	r12, r20
    6682:	48 e2       	ldi	r20, 0x28	; 40
    6684:	d4 06       	cpc	r13, r20
    6686:	e1 04       	cpc	r14, r1
    6688:	f1 04       	cpc	r15, r1
    668a:	08 f0       	brcs	.+2      	; 0x668e <main+0xafa>
    668c:	7e c1       	rjmp	.+764    	; 0x698a <main+0xdf6>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
    668e:	11 e0       	ldi	r17, 0x01	; 1
    6690:	56 e6       	ldi	r21, 0x66	; 102
    6692:	c5 16       	cp	r12, r21
    6694:	53 e2       	ldi	r21, 0x23	; 35
    6696:	d5 06       	cpc	r13, r21
    6698:	e1 04       	cpc	r14, r1
    669a:	f1 04       	cpc	r15, r1
    669c:	40 f4       	brcc	.+16     	; 0x66ae <main+0xb1a>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 275Hz
    669e:	88 e0       	ldi	r24, 0x08	; 8
    66a0:	28 2e       	mov	r2, r24
    66a2:	31 2c       	mov	r3, r1
    66a4:	07 c0       	rjmp	.+14     	; 0x66b4 <main+0xb20>
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
    66a6:	b9 e0       	ldi	r27, 0x09	; 9
    66a8:	2b 2e       	mov	r2, r27
    66aa:	31 2c       	mov	r3, r1
    66ac:	03 c0       	rjmp	.+6      	; 0x66b4 <main+0xb20>
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
    66ae:	a7 e0       	ldi	r26, 0x07	; 7
    66b0:	2a 2e       	mov	r2, r26
    66b2:	31 2c       	mov	r3, r1
				PWM_pulses = 1;
			}
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    66b4:	0e 94 8d 42 	call	0x851a	; 0x851a <TIM16_ReadTCNT1>
    66b8:	9f 8b       	std	Y+23, r25	; 0x17
    66ba:	8e 8b       	std	Y+22, r24	; 0x16
			//* output when serial RC formats are used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    66bc:	80 91 42 06 	lds	r24, 0x0642
    66c0:	82 30       	cpi	r24, 0x02	; 2
    66c2:	b1 f4       	brne	.+44     	; 0x66f0 <main+0xb5c>
    66c4:	11 23       	and	r17, r17
    66c6:	a1 f0       	breq	.+40     	; 0x66f0 <main+0xb5c>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    66c8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    66ca:	21 11       	cpse	r18, r1
    66cc:	16 c0       	rjmp	.+44     	; 0x66fa <main+0xb66>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    66ce:	80 91 b7 08 	lds	r24, 0x08B7
    66d2:	88 23       	and	r24, r24
    66d4:	11 f0       	breq	.+4      	; 0x66da <main+0xb46>
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    66d6:	31 e0       	ldi	r19, 0x01	; 1
    66d8:	39 83       	std	Y+1, r19	; 0x01
					}
					
					Interrupted = false;		// Cancel pending interrupts
    66da:	10 92 b7 08 	sts	0x08B7, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    66de:	0e 94 3f 46 	call	0x8c7e	; 0x8c7e <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    66e2:	1d 82       	std	Y+5, r1	; 0x05
    66e4:	1e 82       	std	Y+6, r1	; 0x06
    66e6:	1f 82       	std	Y+7, r1	; 0x07
    66e8:	18 86       	std	Y+8, r1	; 0x08
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    66ea:	19 8a       	std	Y+17, r1	; 0x11
					PWMBlocked = false;			// Enable PWM generation	
    66ec:	18 8a       	std	Y+16, r1	; 0x10
    66ee:	0d c0       	rjmp	.+26     	; 0x670a <main+0xb76>
			{
				PWM_pulses = 1;
			}
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    66f0:	1d 82       	std	Y+5, r1	; 0x05
    66f2:	1e 82       	std	Y+6, r1	; 0x06
    66f4:	1f 82       	std	Y+7, r1	; 0x07
    66f6:	18 86       	std	Y+8, r1	; 0x08
    66f8:	08 c0       	rjmp	.+16     	; 0x670a <main+0xb76>
    66fa:	1d 82       	std	Y+5, r1	; 0x05
    66fc:	1e 82       	std	Y+6, r1	; 0x06
    66fe:	1f 82       	std	Y+7, r1	; 0x07
    6700:	18 86       	std	Y+8, r1	; 0x08
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    6702:	1e 8e       	std	Y+30, r1	; 0x1e
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    6704:	41 e0       	ldi	r20, 0x01	; 1
    6706:	48 8b       	std	Y+16, r20	; 0x10
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    6708:	10 e0       	ldi	r17, 0x00	; 0
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    670a:	80 91 b7 08 	lds	r24, 0x08B7
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    670e:	81 11       	cpse	r24, r1
    6710:	0c c0       	rjmp	.+24     	; 0x672a <main+0xb96>
				(Interrupted) ||											// Run at RC rate
				((Config.Servo_rate == FAST) && (!PWMBlocked)) ||			// Run at full loop rate if allowed
    6712:	80 91 42 06 	lds	r24, 0x0642
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    6716:	82 30       	cpi	r24, 0x02	; 2
    6718:	19 f4       	brne	.+6      	; 0x6720 <main+0xb8c>
				((Config.Servo_rate == FAST) && (!PWMBlocked)) ||			// Run at full loop rate if allowed
    671a:	58 89       	ldd	r21, Y+16	; 0x10
    671c:	55 23       	and	r21, r21
    671e:	29 f0       	breq	.+10     	; 0x672a <main+0xb96>
    6720:	90 91 2d 05 	lds	r25, 0x052D
    6724:	99 23       	and	r25, r25
    6726:	09 f4       	brne	.+2      	; 0x672a <main+0xb96>
    6728:	d3 c0       	rjmp	.+422    	; 0x68d0 <main+0xd3c>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed (loop rate) in FAST mode
			//******************************************************************

			if (Interrupted)
    672a:	80 91 b7 08 	lds	r24, 0x08B7
    672e:	88 23       	and	r24, r24
    6730:	21 f0       	breq	.+8      	; 0x673a <main+0xba6>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    6732:	10 92 b7 08 	sts	0x08B7, r1
			//* High speed (loop rate) in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    6736:	21 e0       	ldi	r18, 0x01	; 1
    6738:	29 83       	std	Y+1, r18	; 0x01
			{
				// Mark bits depending on the selected output type
				if	(
						// Frame rates regardless of signal presence/absence
						(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    673a:	90 91 42 06 	lds	r25, 0x0642
    673e:	e2 eb       	ldi	r30, 0xB2	; 178
    6740:	f6 e0       	ldi	r31, 0x06	; 6
    6742:	20 e0       	ldi	r18, 0x00	; 0
    6744:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    6746:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    6748:	92 30       	cpi	r25, 0x02	; 2
    674a:	49 f4       	brne	.+18     	; 0x675e <main+0xbca>
						// Frame rates regardless of signal presence/absence
						(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    674c:	40 81       	ld	r20, Z
    674e:	41 11       	cpse	r20, r1
    6750:	04 c0       	rjmp	.+8      	; 0x675a <main+0xbc6>
    6752:	4c 81       	ldd	r20, Y+4	; 0x04
    6754:	41 11       	cpse	r20, r1
    6756:	2e c0       	rjmp	.+92     	; 0x67b4 <main+0xc20>
    6758:	02 c0       	rjmp	.+4      	; 0x675e <main+0xbca>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker > ASERVO))									// Always for D.Servo and Motor in FAST modes when signal present
    675a:	14 16       	cp	r1, r20
    675c:	5c f1       	brlt	.+86     	; 0x67b4 <main+0xc20>
						
						||
						
						// Frame rates when signal present
						(
						(!Overdue) &&
    675e:	40 91 2d 05 	lds	r20, 0x052D
						(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker > ASERVO))									// Always for D.Servo and Motor in FAST modes when signal present
						)
						
						||
    6762:	41 11       	cpse	r20, r1
    6764:	0f c0       	rjmp	.+30     	; 0x6784 <main+0xbf0>
						
						// Frame rates when signal present
						(
						(!Overdue) &&
    6766:	91 30       	cpi	r25, 0x01	; 1
    6768:	29 f4       	brne	.+10     	; 0x6774 <main+0xbe0>
						(
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    676a:	40 81       	ld	r20, Z
    676c:	44 23       	and	r20, r20
    676e:	21 f0       	breq	.+8      	; 0x6778 <main+0xbe4>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC when signal present
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// At RC rate for D.Servo and Motor when signal present
    6770:	0c f5       	brge	.+66     	; 0x67b4 <main+0xc20>
    6772:	08 c0       	rjmp	.+16     	; 0x6784 <main+0xbf0>
    6774:	91 11       	cpse	r25, r1
    6776:	06 c0       	rjmp	.+12     	; 0x6784 <main+0xbf0>

						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    6778:	5d 85       	ldd	r21, Y+13	; 0x0d
    677a:	51 11       	cpse	r21, r1
    677c:	1b c0       	rjmp	.+54     	; 0x67b4 <main+0xc20>
    677e:	4c 81       	ldd	r20, Y+4	; 0x04
    6780:	41 11       	cpse	r20, r1
    6782:	18 c0       	rjmp	.+48     	; 0x67b4 <main+0xc20>
						
						||
						
						// Rates when no signal
						(
						(Overdue) &&
    6784:	40 91 2d 05 	lds	r20, 0x052D
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC when signal present
						)
						)
						
						||
    6788:	44 23       	and	r20, r20
    678a:	e1 f0       	breq	.+56     	; 0x67c4 <main+0xc30>
						
						// Rates when no signal
						(
						(Overdue) &&
    678c:	91 30       	cpi	r25, 0x01	; 1
    678e:	69 f4       	brne	.+26     	; 0x67aa <main+0xc16>
						(
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo when no signal present
    6790:	40 81       	ld	r20, Z
    6792:	44 23       	and	r20, r20
    6794:	61 f0       	breq	.+24     	; 0x67ae <main+0xc1a>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker > ASERVO) && (!SlowRC) && FastServoTick) ||	// At FastServoTick for A.Servo in SYNC with Fast RC
    6796:	b4 f0       	brlt	.+44     	; 0x67c4 <main+0xc30>
    6798:	4d 85       	ldd	r20, Y+13	; 0x0d
    679a:	41 11       	cpse	r20, r1
    679c:	02 c0       	rjmp	.+4      	; 0x67a2 <main+0xc0e>
    679e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    67a0:	07 c0       	rjmp	.+14     	; 0x67b0 <main+0xc1c>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker > ASERVO) && (SlowRC) && ServoTick) ||		// At ServoTick for A.Servo in SYNC with slow RC
    67a2:	4c 81       	ldd	r20, Y+4	; 0x04
    67a4:	41 11       	cpse	r20, r1
    67a6:	06 c0       	rjmp	.+12     	; 0x67b4 <main+0xc20>
    67a8:	0d c0       	rjmp	.+26     	; 0x67c4 <main+0xc30>
    67aa:	91 11       	cpse	r25, r1
    67ac:	0b c0       	rjmp	.+22     	; 0x67c4 <main+0xc30>
	
						((Config.Servo_rate == LOW) && ServoTick)																	// All outputs at ServoTick in LOW mode
    67ae:	5c 81       	ldd	r21, Y+4	; 0x04
    67b0:	55 23       	and	r21, r21
    67b2:	41 f0       	breq	.+16     	; 0x67c4 <main+0xc30>
						)
						)
					)
				{
					ServoFlag |= (1 << i);
    67b4:	41 e0       	ldi	r20, 0x01	; 1
    67b6:	50 e0       	ldi	r21, 0x00	; 0
    67b8:	02 2e       	mov	r0, r18
    67ba:	01 c0       	rjmp	.+2      	; 0x67be <main+0xc2a>
    67bc:	44 0f       	add	r20, r20
    67be:	0a 94       	dec	r0
    67c0:	ea f7       	brpl	.-6      	; 0x67bc <main+0xc28>
    67c2:	84 2b       	or	r24, r20
    67c4:	2f 5f       	subi	r18, 0xFF	; 255
    67c6:	3f 4f       	sbci	r19, 0xFF	; 255
    67c8:	b2 96       	adiw	r30, 0x22	; 34
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    67ca:	28 30       	cpi	r18, 0x08	; 8
    67cc:	31 05       	cpc	r19, r1
    67ce:	09 f0       	breq	.+2      	; 0x67d2 <main+0xc3e>
    67d0:	bb cf       	rjmp	.-138    	; 0x6748 <main+0xbb4>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    67d2:	2c 81       	ldd	r18, Y+4	; 0x04
    67d4:	22 23       	and	r18, r18
    67d6:	11 f0       	breq	.+4      	; 0x67dc <main+0xc48>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    67d8:	1b 86       	std	Y+11, r1	; 0x0b
    67da:	1a 86       	std	Y+10, r1	; 0x0a
			}

			if (FastServoTick)
    67dc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    67de:	33 23       	and	r19, r19
    67e0:	11 f0       	breq	.+4      	; 0x67e6 <main+0xc52>
			{
				FastServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				FastServo_Rate = 0;
    67e2:	1d 8a       	std	Y+21, r1	; 0x15
    67e4:	1c 8a       	std	Y+20, r1	; 0x14
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    67e6:	41 e0       	ldi	r20, 0x01	; 1
    67e8:	24 16       	cp	r2, r20
    67ea:	31 04       	cpc	r3, r1
    67ec:	19 f5       	brne	.+70     	; 0x6834 <main+0xca0>
    67ee:	92 30       	cpi	r25, 0x02	; 2
    67f0:	09 f5       	brne	.+66     	; 0x6834 <main+0xca0>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
    67f2:	5d e8       	ldi	r21, 0x8D	; 141
    67f4:	85 16       	cp	r8, r21
    67f6:	50 e2       	ldi	r21, 0x20	; 32
    67f8:	95 06       	cpc	r9, r21
    67fa:	a1 04       	cpc	r10, r1
    67fc:	b1 04       	cpc	r11, r1
    67fe:	90 f0       	brcs	.+36     	; 0x6824 <main+0xc90>
    6800:	75 01       	movw	r14, r10
    6802:	64 01       	movw	r12, r8
    6804:	92 e6       	ldi	r25, 0x62	; 98
    6806:	89 16       	cp	r8, r25
    6808:	91 e5       	ldi	r25, 0x51	; 81
    680a:	99 06       	cpc	r9, r25
    680c:	a1 04       	cpc	r10, r1
    680e:	b1 04       	cpc	r11, r1
    6810:	30 f0       	brcs	.+12     	; 0x681e <main+0xc8a>
    6812:	f1 e6       	ldi	r31, 0x61	; 97
    6814:	cf 2e       	mov	r12, r31
    6816:	f1 e5       	ldi	r31, 0x51	; 81
    6818:	df 2e       	mov	r13, r31
    681a:	e1 2c       	mov	r14, r1
    681c:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    681e:	21 e0       	ldi	r18, 0x01	; 1
    6820:	28 8b       	std	Y+16, r18	; 0x10
    6822:	08 c0       	rjmp	.+16     	; 0x6834 <main+0xca0>
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
				{
					PWM_interval = PWM_PERIOD_BEST;
    6824:	ed e8       	ldi	r30, 0x8D	; 141
    6826:	ce 2e       	mov	r12, r30
    6828:	e0 e2       	ldi	r30, 0x20	; 32
    682a:	de 2e       	mov	r13, r30
    682c:	e1 2c       	mov	r14, r1
    682e:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    6830:	31 e0       	ldi	r19, 0x01	; 1
    6832:	38 8b       	std	Y+16, r19	; 0x10
				{
					PWM_interval = interval;		// Actual interval
				}
			}
			
			Calculate_PID();						// Calculate PID values
    6834:	8c a7       	std	Y+44, r24	; 0x2c
    6836:	0e 94 e0 63 	call	0xc7c0	; 0xc7c0 <Calculate_PID>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
    683a:	0e 94 b6 58 	call	0xb16c	; 0xb16c <ProcessMixer>
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits. 
    683e:	0e 94 b4 56 	call	0xad68	; 0xad68 <UpdateServos>
													// Note that values are now at system levels (were centered around zero, now centered around 3750).				

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    6842:	90 91 2d 05 	lds	r25, 0x052D
    6846:	8c a5       	ldd	r24, Y+44	; 0x2c
    6848:	91 11       	cpse	r25, r1
    684a:	04 c0       	rjmp	.+8      	; 0x6854 <main+0xcc0>
				}
			}
		
			// Note: This is probably pointless as it's too late to save the PWM just mangled
			// Has overdue become false this loop?
			if (LastLoopOverdue && !Overdue)
    684c:	4a a1       	ldd	r20, Y+34	; 0x22
    684e:	41 11       	cpse	r20, r1
    6850:	19 c0       	rjmp	.+50     	; 0x6884 <main+0xcf0>
    6852:	21 c0       	rjmp	.+66     	; 0x6896 <main+0xd02>
			UpdateServos();							// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits. 
													// Note that values are now at system levels (were centered around zero, now centered around 3750).				

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    6854:	e2 eb       	ldi	r30, 0xB2	; 178
    6856:	f6 e0       	ldi	r31, 0x06	; 6
    6858:	20 e0       	ldi	r18, 0x00	; 0
    685a:	30 e0       	ldi	r19, 0x00	; 0
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
				{
					// Check for motor marker
					if (Config.Channel[i].Motor_marker == MOTOR)
    685c:	90 81       	ld	r25, Z
    685e:	92 30       	cpi	r25, 0x02	; 2
    6860:	51 f4       	brne	.+20     	; 0x6876 <main+0xce2>
					{
						// Set output to motor idle pulse width
						ServoOut[i] = MOTOR_0_SYSTEM;
    6862:	d9 01       	movw	r26, r18
    6864:	aa 0f       	add	r26, r26
    6866:	bb 1f       	adc	r27, r27
    6868:	aa 5a       	subi	r26, 0xAA	; 170
    686a:	b6 4f       	sbci	r27, 0xF6	; 246
    686c:	4e eb       	ldi	r20, 0xBE	; 190
    686e:	5a e0       	ldi	r21, 0x0A	; 10
    6870:	11 96       	adiw	r26, 0x01	; 1
    6872:	5c 93       	st	X, r21
    6874:	4e 93       	st	-X, r20
    6876:	2f 5f       	subi	r18, 0xFF	; 255
    6878:	3f 4f       	sbci	r19, 0xFF	; 255
    687a:	b2 96       	adiw	r30, 0x22	; 34

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
    687c:	28 30       	cpi	r18, 0x08	; 8
    687e:	31 05       	cpc	r19, r1
    6880:	69 f7       	brne	.-38     	; 0x685c <main+0xcc8>
    6882:	e4 cf       	rjmp	.-56     	; 0x684c <main+0xcb8>
				}
			}
		
			// Note: This is probably pointless as it's too late to save the PWM just mangled
			// Has overdue become false this loop?
			if (LastLoopOverdue && !Overdue)
    6884:	90 91 2d 05 	lds	r25, 0x052D
    6888:	91 11       	cpse	r25, r1
    688a:	05 c0       	rjmp	.+10     	; 0x6896 <main+0xd02>
			{
				Flight_flags |= (1 << ARM_blocker);		// Block motors for a little while to remove glitch
    688c:	90 91 33 05 	lds	r25, 0x0533
    6890:	92 60       	ori	r25, 0x02	; 2
    6892:	90 93 33 05 	sts	0x0533, r25
			}
		
			// Save Overdue status of current loop
			LastLoopOverdue = Overdue;
    6896:	50 91 2d 05 	lds	r21, 0x052D
    689a:	5a a3       	std	Y+34, r21	; 0x22
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    689c:	00 23       	and	r16, r16
    689e:	39 f0       	breq	.+14     	; 0x68ae <main+0xd1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    68a0:	8b ee       	ldi	r24, 0xEB	; 235
    68a2:	9c e2       	ldi	r25, 0x2C	; 44
    68a4:	01 97       	sbiw	r24, 0x01	; 1
    68a6:	f1 f7       	brne	.-4      	; 0x68a4 <main+0xd10>
    68a8:	00 c0       	rjmp	.+0      	; 0x68aa <main+0xd16>
    68aa:	00 00       	nop
    68ac:	02 c0       	rjmp	.+4      	; 0x68b2 <main+0xd1e>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    68ae:	0e 94 c8 67 	call	0xcf90	; 0xcf90 <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    68b2:	80 91 42 06 	lds	r24, 0x0642
    68b6:	82 30       	cpi	r24, 0x02	; 2
    68b8:	31 f4       	brne	.+12     	; 0x68c6 <main+0xd32>
    68ba:	12 14       	cp	r1, r2
    68bc:	13 04       	cpc	r1, r3
    68be:	1c f4       	brge	.+6      	; 0x68c6 <main+0xd32>
			{
				PWM_pulses--;
    68c0:	91 e0       	ldi	r25, 0x01	; 1
    68c2:	29 1a       	sub	r2, r25
    68c4:	31 08       	sbc	r3, r1
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    68c6:	10 92 2c 05 	sts	0x052C, r1
    68ca:	1b 8e       	std	Y+27, r1	; 0x1b
    68cc:	1c 82       	std	Y+4, r1	; 0x04
    68ce:	23 c0       	rjmp	.+70     	; 0x6916 <main+0xd82>
		}
		
		// In FAST mode and in-between bursts, sync up with the RC so that the time from Interrupt to PWM is constant.
		// This helps tighten up the number of pulses allowable
		else if ((Config.Servo_rate == FAST) && (PWMBlocked == true) && (RCrateMeasured == true) && (RCInterruptsON == true) && (Overdue == false))
    68d0:	82 30       	cpi	r24, 0x02	; 2
    68d2:	09 f5       	brne	.+66     	; 0x6916 <main+0xd82>
    68d4:	28 89       	ldd	r18, Y+16	; 0x10
    68d6:	22 23       	and	r18, r18
    68d8:	f1 f0       	breq	.+60     	; 0x6916 <main+0xd82>
    68da:	11 23       	and	r17, r17
    68dc:	71 f1       	breq	.+92     	; 0x693a <main+0xda6>
    68de:	39 89       	ldd	r19, Y+17	; 0x11
    68e0:	33 23       	and	r19, r19
    68e2:	09 f4       	brne	.+2      	; 0x68e6 <main+0xd52>
    68e4:	57 c0       	rjmp	.+174    	; 0x6994 <main+0xe00>
    68e6:	80 91 2d 05 	lds	r24, 0x052D
    68ea:	81 11       	cpse	r24, r1
    68ec:	14 c0       	rjmp	.+40     	; 0x6916 <main+0xd82>
    68ee:	80 e0       	ldi	r24, 0x00	; 0
    68f0:	90 e0       	ldi	r25, 0x00	; 0
		{
			fast_sync_timer = 0;
			
			// Wait here until interrupted or timed out (15ms)
			while ((Interrupted == false) && (fast_sync_timer < FASTSYNCLIMIT))
    68f2:	20 91 b7 08 	lds	r18, 0x08B7
    68f6:	21 11       	cpse	r18, r1
    68f8:	0e c0       	rjmp	.+28     	; 0x6916 <main+0xd82>
    68fa:	85 32       	cpi	r24, 0x25	; 37
    68fc:	a1 e0       	ldi	r26, 0x01	; 1
    68fe:	9a 07       	cpc	r25, r26
    6900:	50 f4       	brcc	.+20     	; 0x6916 <main+0xd82>
			{
				fast_sync_timer += (uint8_t)(TCNT2 - fast_sync_TCNT2);
    6902:	20 91 b2 00 	lds	r18, 0x00B2
    6906:	49 a5       	ldd	r20, Y+41	; 0x29
    6908:	24 1b       	sub	r18, r20
    690a:	82 0f       	add	r24, r18
    690c:	91 1d       	adc	r25, r1
				fast_sync_TCNT2 = TCNT2;
    690e:	50 91 b2 00 	lds	r21, 0x00B2
    6912:	59 a7       	std	Y+41, r21	; 0x29
    6914:	ee cf       	rjmp	.-36     	; 0x68f2 <main+0xd5e>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    6916:	12 14       	cp	r1, r2
    6918:	13 04       	cpc	r1, r3
    691a:	7c f0       	brlt	.+30     	; 0x693a <main+0xda6>
    691c:	11 23       	and	r17, r17
    691e:	69 f0       	breq	.+26     	; 0x693a <main+0xda6>
    6920:	29 89       	ldd	r18, Y+17	; 0x11
    6922:	21 11       	cpse	r18, r1
    6924:	0a c0       	rjmp	.+20     	; 0x693a <main+0xda6>
    6926:	80 91 42 06 	lds	r24, 0x0642
    692a:	82 30       	cpi	r24, 0x02	; 2
    692c:	29 f4       	brne	.+10     	; 0x6938 <main+0xda4>
		{
			init_int();					// Re-enable interrupts
    692e:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <init_int>
			RCInterruptsON = true;
    6932:	31 e0       	ldi	r19, 0x01	; 1
    6934:	39 8b       	std	Y+17, r19	; 0x11
    6936:	01 c0       	rjmp	.+2      	; 0x693a <main+0xda6>
    6938:	19 8a       	std	Y+17, r1	; 0x11
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    693a:	80 91 34 05 	lds	r24, 0x0534
    693e:	4b a5       	ldd	r20, Y+43	; 0x2b
    6940:	48 17       	cp	r20, r24
    6942:	29 f0       	breq	.+10     	; 0x694e <main+0xdba>
    6944:	5d a5       	ldd	r21, Y+45	; 0x2d
    6946:	51 11       	cpse	r21, r1
    6948:	02 c0       	rjmp	.+4      	; 0x694e <main+0xdba>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    694a:	27 e0       	ldi	r18, 0x07	; 7
    694c:	2d a7       	std	Y+45, r18	; 0x2d
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    694e:	30 91 34 05 	lds	r19, 0x0534
    6952:	3b a7       	std	Y+43, r19	; 0x2b
		
	} // while loop
    6954:	8e 88       	ldd	r8, Y+22	; 0x16
    6956:	9f 88       	ldd	r9, Y+23	; 0x17
    6958:	67 c9       	rjmp	.-3378   	; 0x5c28 <main+0x94>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    695a:	22 24       	eor	r2, r2
    695c:	23 94       	inc	r2
    695e:	31 2c       	mov	r3, r1
    6960:	a9 ce       	rjmp	.-686    	; 0x66b4 <main+0xb20>
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
    6962:	57 e0       	ldi	r21, 0x07	; 7
    6964:	25 2e       	mov	r2, r21
    6966:	31 2c       	mov	r3, r1
    6968:	13 c0       	rjmp	.+38     	; 0x6990 <main+0xdfc>
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    696a:	48 e0       	ldi	r20, 0x08	; 8
    696c:	24 2e       	mov	r2, r20
    696e:	31 2c       	mov	r3, r1
    6970:	0f c0       	rjmp	.+30     	; 0x6990 <main+0xdfc>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 29ms is safe for all formats.

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
    6972:	33 e0       	ldi	r19, 0x03	; 3
    6974:	23 2e       	mov	r2, r19
    6976:	31 2c       	mov	r3, r1
    6978:	0b c0       	rjmp	.+22     	; 0x6990 <main+0xdfc>
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
    697a:	24 e0       	ldi	r18, 0x04	; 4
    697c:	22 2e       	mov	r2, r18
    697e:	31 2c       	mov	r3, r1
    6980:	07 c0       	rjmp	.+14     	; 0x6990 <main+0xdfc>
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
    6982:	95 e0       	ldi	r25, 0x05	; 5
    6984:	29 2e       	mov	r2, r25
    6986:	31 2c       	mov	r3, r1
    6988:	03 c0       	rjmp	.+6      	; 0x6990 <main+0xdfc>
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    698a:	86 e0       	ldi	r24, 0x06	; 6
    698c:	28 2e       	mov	r2, r24
    698e:	31 2c       	mov	r3, r1
			Servo_Rate = 0;
		}
		
		if (FastServo_Rate > SERVO_RATE_HIGH)
		{
			FastServoTick = true;	// Slow device is ready for output generation
    6990:	11 e0       	ldi	r17, 0x01	; 1
    6992:	90 ce       	rjmp	.-736    	; 0x66b4 <main+0xb20>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    6994:	12 14       	cp	r1, r2
    6996:	13 04       	cpc	r1, r3
    6998:	84 f2       	brlt	.-96     	; 0x693a <main+0xda6>
    699a:	c5 cf       	rjmp	.-118    	; 0x6926 <main+0xd92>

0000699c <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    699c:	0f 93       	push	r16
    699e:	1f 93       	push	r17
    69a0:	cf 93       	push	r28
    69a2:	df 93       	push	r29
    69a4:	c7 e0       	ldi	r28, 0x07	; 7
    69a6:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    69a8:	08 2f       	mov	r16, r24
    69aa:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    69ac:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    69ae:	c8 01       	movw	r24, r16
    69b0:	0c 2e       	mov	r0, r28
    69b2:	02 c0       	rjmp	.+4      	; 0x69b8 <spiwrite+0x1c>
    69b4:	95 95       	asr	r25
    69b6:	87 95       	ror	r24
    69b8:	0a 94       	dec	r0
    69ba:	e2 f7       	brpl	.-8      	; 0x69b4 <spiwrite+0x18>
    69bc:	80 ff       	sbrs	r24, 0
    69be:	02 c0       	rjmp	.+4      	; 0x69c4 <spiwrite+0x28>
		{
			LCD_SI = 1;
    69c0:	59 9a       	sbi	0x0b, 1	; 11
    69c2:	01 c0       	rjmp	.+2      	; 0x69c6 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    69c4:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    69c6:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    69c8:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <glcd_delay>
    69cc:	21 97       	sbiw	r28, 0x01	; 1
    69ce:	70 f7       	brcc	.-36     	; 0x69ac <spiwrite+0x10>
	}
}
    69d0:	df 91       	pop	r29
    69d2:	cf 91       	pop	r28
    69d4:	1f 91       	pop	r17
    69d6:	0f 91       	pop	r16
    69d8:	08 95       	ret

000069da <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    69da:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    69dc:	0c 94 ce 34 	jmp	0x699c	; 0x699c <spiwrite>

000069e0 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    69e0:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    69e2:	0c 94 ce 34 	jmp	0x699c	; 0x699c <spiwrite>

000069e6 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    69e6:	cf 93       	push	r28
    69e8:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);		// 0x81
    69ea:	81 e8       	ldi	r24, 0x81	; 129
    69ec:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
	st7565_command(val);
    69f0:	8c 2f       	mov	r24, r28
}
    69f2:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);		// 0x81
	st7565_command(val);
    69f4:	0c 94 ed 34 	jmp	0x69da	; 0x69da <st7565_command>

000069f8 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    69f8:	cf 93       	push	r28
    69fa:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    69fc:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    69fe:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6a00:	87 e8       	ldi	r24, 0x87	; 135
    6a02:	93 e1       	ldi	r25, 0x13	; 19
    6a04:	01 97       	sbiw	r24, 0x01	; 1
    6a06:	f1 f7       	brne	.-4      	; 0x6a04 <st7565_init+0xc>
    6a08:	00 c0       	rjmp	.+0      	; 0x6a0a <st7565_init+0x12>
    6a0a:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    6a0c:	5e 9a       	sbi	0x0b, 6	; 11
    6a0e:	c7 e2       	ldi	r28, 0x27	; 39
    6a10:	d4 e1       	ldi	r29, 0x14	; 20

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    6a12:	fe 01       	movw	r30, r28
    6a14:	84 91       	lpm	r24, Z
    6a16:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
    6a1a:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    6a1c:	f4 e1       	ldi	r31, 0x14	; 20
    6a1e:	c5 33       	cpi	r28, 0x35	; 53
    6a20:	df 07       	cpc	r29, r31
    6a22:	b9 f7       	brne	.-18     	; 0x6a12 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    6a24:	80 91 a5 06 	lds	r24, 0x06A5
    6a28:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    6a2c:	88 ec       	ldi	r24, 0xC8	; 200
}
    6a2e:	df 91       	pop	r29
    6a30:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    6a32:	0c 94 ed 34 	jmp	0x69da	; 0x69da <st7565_command>

00006a36 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    6a36:	df 92       	push	r13
    6a38:	ef 92       	push	r14
    6a3a:	ff 92       	push	r15
    6a3c:	0f 93       	push	r16
    6a3e:	1f 93       	push	r17
    6a40:	cf 93       	push	r28
    6a42:	df 93       	push	r29
    6a44:	c5 e3       	ldi	r28, 0x35	; 53
    6a46:	d4 e1       	ldi	r29, 0x14	; 20
    6a48:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    6a4a:	fe 01       	movw	r30, r28
    6a4c:	84 91       	lpm	r24, Z
    6a4e:	80 6b       	ori	r24, 0xB0	; 176
    6a50:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    6a54:	80 e0       	ldi	r24, 0x00	; 0
    6a56:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    6a5a:	80 e1       	ldi	r24, 0x10	; 16
    6a5c:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    6a60:	80 ee       	ldi	r24, 0xE0	; 224
    6a62:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
    6a66:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    6a68:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    6a6a:	f7 01       	movw	r30, r14
    6a6c:	81 91       	ld	r24, Z+
    6a6e:	7f 01       	movw	r14, r30
    6a70:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    6a74:	d3 94       	inc	r13
    6a76:	f0 e8       	ldi	r31, 0x80	; 128
    6a78:	df 12       	cpse	r13, r31
    6a7a:	f7 cf       	rjmp	.-18     	; 0x6a6a <write_buffer+0x34>
    6a7c:	21 96       	adiw	r28, 0x01	; 1
    6a7e:	00 58       	subi	r16, 0x80	; 128
    6a80:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    6a82:	84 e1       	ldi	r24, 0x14	; 20
    6a84:	cd 33       	cpi	r28, 0x3D	; 61
    6a86:	d8 07       	cpc	r29, r24
    6a88:	01 f7       	brne	.-64     	; 0x6a4a <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    6a8a:	df 91       	pop	r29
    6a8c:	cf 91       	pop	r28
    6a8e:	1f 91       	pop	r17
    6a90:	0f 91       	pop	r16
    6a92:	ff 90       	pop	r15
    6a94:	ef 90       	pop	r14
    6a96:	df 90       	pop	r13
    6a98:	08 95       	ret

00006a9a <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    6a9a:	20 e0       	ldi	r18, 0x00	; 0
    6a9c:	34 e0       	ldi	r19, 0x04	; 4
    6a9e:	fc 01       	movw	r30, r24
    6aa0:	a9 01       	movw	r20, r18
    6aa2:	11 92       	st	Z+, r1
    6aa4:	41 50       	subi	r20, 0x01	; 1
    6aa6:	50 40       	sbci	r21, 0x00	; 0
    6aa8:	e1 f7       	brne	.-8      	; 0x6aa2 <clear_buffer+0x8>
    6aaa:	08 95       	ret

00006aac <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    6aac:	cf 93       	push	r28
    6aae:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    6ab0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    6ab2:	8d 2f       	mov	r24, r29
    6ab4:	80 6b       	ori	r24, 0xB0	; 176
    6ab6:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    6aba:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    6abc:	8c 2f       	mov	r24, r28
    6abe:	8f 70       	andi	r24, 0x0F	; 15
    6ac0:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    6ac4:	8c 2f       	mov	r24, r28
    6ac6:	82 95       	swap	r24
    6ac8:	8f 70       	andi	r24, 0x0F	; 15
    6aca:	80 61       	ori	r24, 0x10	; 16
    6acc:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
			st7565_data(0x00);											// Clear data
    6ad0:	80 e0       	ldi	r24, 0x00	; 0
    6ad2:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    6ad6:	cf 5f       	subi	r28, 0xFF	; 255
    6ad8:	c0 38       	cpi	r28, 0x80	; 128
    6ada:	81 f7       	brne	.-32     	; 0x6abc <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    6adc:	df 5f       	subi	r29, 0xFF	; 255
    6ade:	d8 30       	cpi	r29, 0x08	; 8
    6ae0:	41 f7       	brne	.-48     	; 0x6ab2 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    6ae2:	df 91       	pop	r29
    6ae4:	cf 91       	pop	r28
    6ae6:	08 95       	ret

00006ae8 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    6ae8:	67 fd       	sbrc	r22, 7
    6aea:	36 c0       	rjmp	.+108    	; 0x6b58 <setpixel+0x70>
    6aec:	40 34       	cpi	r20, 0x40	; 64
    6aee:	a0 f5       	brcc	.+104    	; 0x6b58 <setpixel+0x70>
    6af0:	34 2f       	mov	r19, r20
    6af2:	36 95       	lsr	r19
    6af4:	36 95       	lsr	r19
    6af6:	36 95       	lsr	r19
    6af8:	e6 2f       	mov	r30, r22
    6afa:	f0 e0       	ldi	r31, 0x00	; 0
    6afc:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    6afe:	22 23       	and	r18, r18
    6b00:	a9 f0       	breq	.+42     	; 0x6b2c <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    6b02:	20 e8       	ldi	r18, 0x80	; 128
    6b04:	32 9f       	mul	r19, r18
    6b06:	e0 0d       	add	r30, r0
    6b08:	f1 1d       	adc	r31, r1
    6b0a:	11 24       	eor	r1, r1
    6b0c:	e8 0f       	add	r30, r24
    6b0e:	f9 1f       	adc	r31, r25
    6b10:	40 95       	com	r20
    6b12:	50 95       	com	r21
    6b14:	47 70       	andi	r20, 0x07	; 7
    6b16:	55 27       	eor	r21, r21
    6b18:	81 e0       	ldi	r24, 0x01	; 1
    6b1a:	90 e0       	ldi	r25, 0x00	; 0
    6b1c:	04 2e       	mov	r0, r20
    6b1e:	01 c0       	rjmp	.+2      	; 0x6b22 <setpixel+0x3a>
    6b20:	88 0f       	add	r24, r24
    6b22:	0a 94       	dec	r0
    6b24:	ea f7       	brpl	.-6      	; 0x6b20 <setpixel+0x38>
    6b26:	90 81       	ld	r25, Z
    6b28:	98 2b       	or	r25, r24
    6b2a:	15 c0       	rjmp	.+42     	; 0x6b56 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    6b2c:	20 e8       	ldi	r18, 0x80	; 128
    6b2e:	32 9f       	mul	r19, r18
    6b30:	e0 0d       	add	r30, r0
    6b32:	f1 1d       	adc	r31, r1
    6b34:	11 24       	eor	r1, r1
    6b36:	e8 0f       	add	r30, r24
    6b38:	f9 1f       	adc	r31, r25
    6b3a:	40 95       	com	r20
    6b3c:	50 95       	com	r21
    6b3e:	47 70       	andi	r20, 0x07	; 7
    6b40:	55 27       	eor	r21, r21
    6b42:	81 e0       	ldi	r24, 0x01	; 1
    6b44:	90 e0       	ldi	r25, 0x00	; 0
    6b46:	04 2e       	mov	r0, r20
    6b48:	01 c0       	rjmp	.+2      	; 0x6b4c <setpixel+0x64>
    6b4a:	88 0f       	add	r24, r24
    6b4c:	0a 94       	dec	r0
    6b4e:	ea f7       	brpl	.-6      	; 0x6b4a <setpixel+0x62>
    6b50:	80 95       	com	r24
    6b52:	90 81       	ld	r25, Z
    6b54:	98 23       	and	r25, r24
    6b56:	90 83       	st	Z, r25
    6b58:	08 95       	ret

00006b5a <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    6b5a:	9f 92       	push	r9
    6b5c:	af 92       	push	r10
    6b5e:	bf 92       	push	r11
    6b60:	cf 92       	push	r12
    6b62:	df 92       	push	r13
    6b64:	ef 92       	push	r14
    6b66:	ff 92       	push	r15
    6b68:	0f 93       	push	r16
    6b6a:	1f 93       	push	r17
    6b6c:	cf 93       	push	r28
    6b6e:	df 93       	push	r29
    6b70:	ec 01       	movw	r28, r24
    6b72:	16 2f       	mov	r17, r22
    6b74:	f4 2e       	mov	r15, r20
    6b76:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    6b78:	a0 2f       	mov	r26, r16
    6b7a:	b0 e0       	ldi	r27, 0x00	; 0
    6b7c:	a4 1b       	sub	r26, r20
    6b7e:	b1 09       	sbc	r27, r1
    6b80:	b7 ff       	sbrs	r27, 7
    6b82:	03 c0       	rjmp	.+6      	; 0x6b8a <drawline+0x30>
    6b84:	b1 95       	neg	r27
    6b86:	a1 95       	neg	r26
    6b88:	b1 09       	sbc	r27, r1
    6b8a:	ed 2d       	mov	r30, r13
    6b8c:	f0 e0       	ldi	r31, 0x00	; 0
    6b8e:	e1 1b       	sub	r30, r17
    6b90:	f1 09       	sbc	r31, r1
    6b92:	f7 ff       	sbrs	r31, 7
    6b94:	03 c0       	rjmp	.+6      	; 0x6b9c <drawline+0x42>
    6b96:	f1 95       	neg	r31
    6b98:	e1 95       	neg	r30
    6b9a:	f1 09       	sbc	r31, r1
    6b9c:	bb 24       	eor	r11, r11
    6b9e:	b3 94       	inc	r11
    6ba0:	ea 17       	cp	r30, r26
    6ba2:	fb 07       	cpc	r31, r27
    6ba4:	14 f0       	brlt	.+4      	; 0x6baa <drawline+0x50>
    6ba6:	b1 2c       	mov	r11, r1
    6ba8:	06 c0       	rjmp	.+12     	; 0x6bb6 <drawline+0x5c>
    6baa:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    6bac:	d0 2e       	mov	r13, r16
    6bae:	08 2f       	mov	r16, r24
    6bb0:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    6bb2:	1f 2d       	mov	r17, r15
    6bb4:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    6bb6:	d1 16       	cp	r13, r17
    6bb8:	30 f4       	brcc	.+12     	; 0x6bc6 <drawline+0x6c>
    6bba:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    6bbc:	f0 2e       	mov	r15, r16
    6bbe:	08 2f       	mov	r16, r24
    6bc0:	81 2f       	mov	r24, r17
    6bc2:	1d 2d       	mov	r17, r13
    6bc4:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    6bc6:	ad 2c       	mov	r10, r13
    6bc8:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    6bca:	e0 2f       	mov	r30, r16
    6bcc:	f0 e0       	ldi	r31, 0x00	; 0
    6bce:	ef 19       	sub	r30, r15
    6bd0:	f1 09       	sbc	r31, r1
    6bd2:	f7 ff       	sbrs	r31, 7
    6bd4:	03 c0       	rjmp	.+6      	; 0x6bdc <drawline+0x82>
    6bd6:	f1 95       	neg	r31
    6bd8:	e1 95       	neg	r30
    6bda:	f1 09       	sbc	r31, r1
    6bdc:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    6bde:	ca 2c       	mov	r12, r10
    6be0:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    6be2:	f0 16       	cp	r15, r16
    6be4:	10 f4       	brcc	.+4      	; 0x6bea <drawline+0x90>
	{
		ystep = 1;
    6be6:	01 e0       	ldi	r16, 0x01	; 1
    6be8:	10 c0       	rjmp	.+32     	; 0x6c0a <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    6bea:	0f ef       	ldi	r16, 0xFF	; 255
    6bec:	0e c0       	rjmp	.+28     	; 0x6c0a <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    6bee:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    6bf0:	bb 20       	and	r11, r11
    6bf2:	71 f0       	breq	.+28     	; 0x6c10 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    6bf4:	41 2f       	mov	r20, r17
    6bf6:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    6bf8:	ce 01       	movw	r24, r28
    6bfa:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
		}
		err -= dy;
    6bfe:	c9 18       	sub	r12, r9
		if (err < 0) 
    6c00:	c7 fe       	sbrs	r12, 7
    6c02:	02 c0       	rjmp	.+4      	; 0x6c08 <drawline+0xae>
		{
			y0 += ystep;
    6c04:	f0 0e       	add	r15, r16
			err += dx;
    6c06:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    6c08:	1f 5f       	subi	r17, 0xFF	; 255
    6c0a:	1d 15       	cp	r17, r13
    6c0c:	80 f3       	brcs	.-32     	; 0x6bee <drawline+0x94>
    6c0e:	03 c0       	rjmp	.+6      	; 0x6c16 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    6c10:	4f 2d       	mov	r20, r15
    6c12:	61 2f       	mov	r22, r17
    6c14:	f1 cf       	rjmp	.-30     	; 0x6bf8 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    6c16:	df 91       	pop	r29
    6c18:	cf 91       	pop	r28
    6c1a:	1f 91       	pop	r17
    6c1c:	0f 91       	pop	r16
    6c1e:	ff 90       	pop	r15
    6c20:	ef 90       	pop	r14
    6c22:	df 90       	pop	r13
    6c24:	cf 90       	pop	r12
    6c26:	bf 90       	pop	r11
    6c28:	af 90       	pop	r10
    6c2a:	9f 90       	pop	r9
    6c2c:	08 95       	ret

00006c2e <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    6c2e:	af 92       	push	r10
    6c30:	bf 92       	push	r11
    6c32:	cf 92       	push	r12
    6c34:	df 92       	push	r13
    6c36:	ef 92       	push	r14
    6c38:	ff 92       	push	r15
    6c3a:	0f 93       	push	r16
    6c3c:	1f 93       	push	r17
    6c3e:	cf 93       	push	r28
    6c40:	df 93       	push	r29
    6c42:	6c 01       	movw	r12, r24
    6c44:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6c46:	f6 2e       	mov	r15, r22
    6c48:	c2 2f       	mov	r28, r18
    6c4a:	d0 e0       	ldi	r29, 0x00	; 0
    6c4c:	c6 0f       	add	r28, r22
    6c4e:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    6c50:	10 e0       	ldi	r17, 0x00	; 0
    6c52:	04 0f       	add	r16, r20
    6c54:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6c56:	8f 2d       	mov	r24, r15
    6c58:	90 e0       	ldi	r25, 0x00	; 0
    6c5a:	8c 17       	cp	r24, r28
    6c5c:	9d 07       	cpc	r25, r29
    6c5e:	84 f4       	brge	.+32     	; 0x6c80 <fillrect+0x52>
    6c60:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    6c62:	8b 2d       	mov	r24, r11
    6c64:	90 e0       	ldi	r25, 0x00	; 0
    6c66:	80 17       	cp	r24, r16
    6c68:	91 07       	cpc	r25, r17
    6c6a:	44 f4       	brge	.+16     	; 0x6c7c <fillrect+0x4e>
		{
			setpixel(buff, i, j, color);
    6c6c:	2e 2d       	mov	r18, r14
    6c6e:	4b 2d       	mov	r20, r11
    6c70:	6f 2d       	mov	r22, r15
    6c72:	c6 01       	movw	r24, r12
    6c74:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    6c78:	b3 94       	inc	r11
    6c7a:	f3 cf       	rjmp	.-26     	; 0x6c62 <fillrect+0x34>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6c7c:	f3 94       	inc	r15
    6c7e:	eb cf       	rjmp	.-42     	; 0x6c56 <fillrect+0x28>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    6c80:	df 91       	pop	r29
    6c82:	cf 91       	pop	r28
    6c84:	1f 91       	pop	r17
    6c86:	0f 91       	pop	r16
    6c88:	ff 90       	pop	r15
    6c8a:	ef 90       	pop	r14
    6c8c:	df 90       	pop	r13
    6c8e:	cf 90       	pop	r12
    6c90:	bf 90       	pop	r11
    6c92:	af 90       	pop	r10
    6c94:	08 95       	ret

00006c96 <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    6c96:	9f 92       	push	r9
    6c98:	af 92       	push	r10
    6c9a:	bf 92       	push	r11
    6c9c:	cf 92       	push	r12
    6c9e:	df 92       	push	r13
    6ca0:	ef 92       	push	r14
    6ca2:	ff 92       	push	r15
    6ca4:	0f 93       	push	r16
    6ca6:	1f 93       	push	r17
    6ca8:	cf 93       	push	r28
    6caa:	df 93       	push	r29
    6cac:	ec 01       	movw	r28, r24
    6cae:	f6 2e       	mov	r15, r22
    6cb0:	b4 2e       	mov	r11, r20
    6cb2:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6cb4:	16 2f       	mov	r17, r22
    6cb6:	c2 2e       	mov	r12, r18
    6cb8:	d1 2c       	mov	r13, r1
    6cba:	c6 0e       	add	r12, r22
    6cbc:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    6cbe:	aa 24       	eor	r10, r10
    6cc0:	aa 94       	dec	r10
    6cc2:	a0 0e       	add	r10, r16
    6cc4:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6cc6:	81 2f       	mov	r24, r17
    6cc8:	90 e0       	ldi	r25, 0x00	; 0
    6cca:	8c 15       	cp	r24, r12
    6ccc:	9d 05       	cpc	r25, r13
    6cce:	74 f4       	brge	.+28     	; 0x6cec <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    6cd0:	2e 2d       	mov	r18, r14
    6cd2:	4b 2d       	mov	r20, r11
    6cd4:	61 2f       	mov	r22, r17
    6cd6:	ce 01       	movw	r24, r28
    6cd8:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
		setpixel(buff, i, y+h-1, color);
    6cdc:	2e 2d       	mov	r18, r14
    6cde:	4a 2d       	mov	r20, r10
    6ce0:	61 2f       	mov	r22, r17
    6ce2:	ce 01       	movw	r24, r28
    6ce4:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    6ce8:	1f 5f       	subi	r17, 0xFF	; 255
    6cea:	ed cf       	rjmp	.-38     	; 0x6cc6 <drawrect+0x30>
    6cec:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    6cee:	10 e0       	ldi	r17, 0x00	; 0
    6cf0:	0b 0d       	add	r16, r11
    6cf2:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    6cf4:	cc 24       	eor	r12, r12
    6cf6:	ca 94       	dec	r12
    6cf8:	c9 0c       	add	r12, r9
    6cfa:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    6cfc:	8d 2d       	mov	r24, r13
    6cfe:	90 e0       	ldi	r25, 0x00	; 0
    6d00:	80 17       	cp	r24, r16
    6d02:	91 07       	cpc	r25, r17
    6d04:	74 f4       	brge	.+28     	; 0x6d22 <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    6d06:	2e 2d       	mov	r18, r14
    6d08:	4d 2d       	mov	r20, r13
    6d0a:	6f 2d       	mov	r22, r15
    6d0c:	ce 01       	movw	r24, r28
    6d0e:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
		setpixel(buff, x+w-1, i, color);
    6d12:	2e 2d       	mov	r18, r14
    6d14:	4d 2d       	mov	r20, r13
    6d16:	6c 2d       	mov	r22, r12
    6d18:	ce 01       	movw	r24, r28
    6d1a:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    6d1e:	d3 94       	inc	r13
    6d20:	ed cf       	rjmp	.-38     	; 0x6cfc <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    6d22:	df 91       	pop	r29
    6d24:	cf 91       	pop	r28
    6d26:	1f 91       	pop	r17
    6d28:	0f 91       	pop	r16
    6d2a:	ff 90       	pop	r15
    6d2c:	ef 90       	pop	r14
    6d2e:	df 90       	pop	r13
    6d30:	cf 90       	pop	r12
    6d32:	bf 90       	pop	r11
    6d34:	af 90       	pop	r10
    6d36:	9f 90       	pop	r9
    6d38:	08 95       	ret

00006d3a <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    6d3a:	4f 92       	push	r4
    6d3c:	5f 92       	push	r5
    6d3e:	6f 92       	push	r6
    6d40:	7f 92       	push	r7
    6d42:	8f 92       	push	r8
    6d44:	9f 92       	push	r9
    6d46:	af 92       	push	r10
    6d48:	bf 92       	push	r11
    6d4a:	cf 92       	push	r12
    6d4c:	df 92       	push	r13
    6d4e:	ef 92       	push	r14
    6d50:	ff 92       	push	r15
    6d52:	0f 93       	push	r16
    6d54:	1f 93       	push	r17
    6d56:	cf 93       	push	r28
    6d58:	df 93       	push	r29
    6d5a:	ec 01       	movw	r28, r24
    6d5c:	96 2e       	mov	r9, r22
    6d5e:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    6d60:	bb 24       	eor	r11, r11
    6d62:	b3 94       	inc	r11
    6d64:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    6d66:	82 2e       	mov	r8, r18
    6d68:	81 94       	neg	r8
    6d6a:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    6d6c:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    6d6e:	74 2e       	mov	r7, r20
    6d70:	72 1a       	sub	r7, r18
    6d72:	e4 2e       	mov	r14, r20
    6d74:	f1 2c       	mov	r15, r1
    6d76:	67 01       	movw	r12, r14
    6d78:	c2 0e       	add	r12, r18
    6d7a:	d1 1c       	adc	r13, r1
    6d7c:	87 2d       	mov	r24, r7
    6d7e:	99 27       	eor	r25, r25
    6d80:	87 fd       	sbrc	r24, 7
    6d82:	90 95       	com	r25
    6d84:	c8 16       	cp	r12, r24
    6d86:	d9 06       	cpc	r13, r25
    6d88:	44 f0       	brlt	.+16     	; 0x6d9a <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    6d8a:	20 2f       	mov	r18, r16
    6d8c:	47 2d       	mov	r20, r7
    6d8e:	69 2d       	mov	r22, r9
    6d90:	ce 01       	movw	r24, r28
    6d92:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
    6d96:	73 94       	inc	r7
    6d98:	f1 cf       	rjmp	.-30     	; 0x6d7c <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    6d9a:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    6d9c:	71 16       	cp	r7, r17
    6d9e:	0c f0       	brlt	.+2      	; 0x6da2 <fillcircle+0x68>
    6da0:	4c c0       	rjmp	.+152    	; 0x6e3a <fillcircle+0x100>
	{
		if (f >= 0) 
    6da2:	b7 fc       	sbrc	r11, 7
    6da4:	04 c0       	rjmp	.+8      	; 0x6dae <fillcircle+0x74>
		{
			y--;
    6da6:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    6da8:	83 94       	inc	r8
    6daa:	83 94       	inc	r8
			f += ddF_y;
    6dac:	b8 0c       	add	r11, r8
    6dae:	73 94       	inc	r7
    6db0:	87 2d       	mov	r24, r7
    6db2:	88 0f       	add	r24, r24
    6db4:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    6db6:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    6db8:	6a 2c       	mov	r6, r10
    6dba:	61 1a       	sub	r6, r17
    6dbc:	67 01       	movw	r12, r14
    6dbe:	c1 0e       	add	r12, r17
    6dc0:	d1 1c       	adc	r13, r1
    6dc2:	17 fd       	sbrc	r17, 7
    6dc4:	da 94       	dec	r13
    6dc6:	47 2c       	mov	r4, r7
    6dc8:	49 0c       	add	r4, r9
    6dca:	59 2c       	mov	r5, r9
    6dcc:	57 18       	sub	r5, r7
    6dce:	86 2d       	mov	r24, r6
    6dd0:	99 27       	eor	r25, r25
    6dd2:	87 fd       	sbrc	r24, 7
    6dd4:	90 95       	com	r25
    6dd6:	c8 16       	cp	r12, r24
    6dd8:	d9 06       	cpc	r13, r25
    6dda:	74 f0       	brlt	.+28     	; 0x6df8 <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    6ddc:	20 2f       	mov	r18, r16
    6dde:	46 2d       	mov	r20, r6
    6de0:	64 2d       	mov	r22, r4
    6de2:	ce 01       	movw	r24, r28
    6de4:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
			setpixel(buff, x0-x, i, color);
    6de8:	20 2f       	mov	r18, r16
    6dea:	46 2d       	mov	r20, r6
    6dec:	65 2d       	mov	r22, r5
    6dee:	ce 01       	movw	r24, r28
    6df0:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
    6df4:	63 94       	inc	r6
    6df6:	eb cf       	rjmp	.-42     	; 0x6dce <fillcircle+0x94>
    6df8:	6a 2c       	mov	r6, r10
    6dfa:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    6dfc:	67 01       	movw	r12, r14
    6dfe:	c7 0c       	add	r12, r7
    6e00:	d1 1c       	adc	r13, r1
    6e02:	77 fc       	sbrc	r7, 7
    6e04:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    6e06:	41 2e       	mov	r4, r17
    6e08:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    6e0a:	59 2c       	mov	r5, r9
    6e0c:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    6e0e:	86 2d       	mov	r24, r6
    6e10:	99 27       	eor	r25, r25
    6e12:	87 fd       	sbrc	r24, 7
    6e14:	90 95       	com	r25
    6e16:	c8 16       	cp	r12, r24
    6e18:	d9 06       	cpc	r13, r25
    6e1a:	0c f4       	brge	.+2      	; 0x6e1e <fillcircle+0xe4>
    6e1c:	bf cf       	rjmp	.-130    	; 0x6d9c <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    6e1e:	20 2f       	mov	r18, r16
    6e20:	46 2d       	mov	r20, r6
    6e22:	64 2d       	mov	r22, r4
    6e24:	ce 01       	movw	r24, r28
    6e26:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
			setpixel(buff, x0-y, i, color);
    6e2a:	20 2f       	mov	r18, r16
    6e2c:	46 2d       	mov	r20, r6
    6e2e:	65 2d       	mov	r22, r5
    6e30:	ce 01       	movw	r24, r28
    6e32:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
    6e36:	63 94       	inc	r6
    6e38:	ea cf       	rjmp	.-44     	; 0x6e0e <fillcircle+0xd4>
		}    
	}
}
    6e3a:	df 91       	pop	r29
    6e3c:	cf 91       	pop	r28
    6e3e:	1f 91       	pop	r17
    6e40:	0f 91       	pop	r16
    6e42:	ff 90       	pop	r15
    6e44:	ef 90       	pop	r14
    6e46:	df 90       	pop	r13
    6e48:	cf 90       	pop	r12
    6e4a:	bf 90       	pop	r11
    6e4c:	af 90       	pop	r10
    6e4e:	9f 90       	pop	r9
    6e50:	8f 90       	pop	r8
    6e52:	7f 90       	pop	r7
    6e54:	6f 90       	pop	r6
    6e56:	5f 90       	pop	r5
    6e58:	4f 90       	pop	r4
    6e5a:	08 95       	ret

00006e5c <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    6e5c:	88 0f       	add	r24, r24
    6e5e:	99 1f       	adc	r25, r25
    6e60:	83 5c       	subi	r24, 0xC3	; 195
    6e62:	9b 4e       	sbci	r25, 0xEB	; 235
    6e64:	fc 01       	movw	r30, r24
    6e66:	85 91       	lpm	r24, Z+
    6e68:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    6e6a:	0c 94 84 60 	jmp	0xc108	; 0xc108 <pgm_mugui_lcd_puts>

00006e6e <gLCDprint_Menu_P>:
    6e6e:	0c 94 84 60 	jmp	0xc108	; 0xc108 <pgm_mugui_lcd_puts>

00006e72 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    6e72:	80 e0       	ldi	r24, 0x00	; 0
    6e74:	91 e0       	ldi	r25, 0x01	; 1
    6e76:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    6e7a:	23 e0       	ldi	r18, 0x03	; 3
    6e7c:	30 e0       	ldi	r19, 0x00	; 0
    6e7e:	49 e2       	ldi	r20, 0x29	; 41
    6e80:	50 e0       	ldi	r21, 0x00	; 0
    6e82:	6d ec       	ldi	r22, 0xCD	; 205
    6e84:	74 e0       	ldi	r23, 0x04	; 4
    6e86:	89 e7       	ldi	r24, 0x79	; 121
    6e88:	90 e0       	ldi	r25, 0x00	; 0
    6e8a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    6e8e:	27 e1       	ldi	r18, 0x17	; 23
    6e90:	30 e0       	ldi	r19, 0x00	; 0
    6e92:	48 e1       	ldi	r20, 0x18	; 24
    6e94:	50 e0       	ldi	r21, 0x00	; 0
    6e96:	6d ec       	ldi	r22, 0xCD	; 205
    6e98:	74 e0       	ldi	r23, 0x04	; 4
    6e9a:	8a e7       	ldi	r24, 0x7A	; 122
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

	// Display most important error
	if (General_error & (1 << LVA_ALARM))							// Low voltage
    6ea2:	80 91 34 05 	lds	r24, 0x0534
    6ea6:	83 ff       	sbrs	r24, 3
    6ea8:	13 c0       	rjmp	.+38     	; 0x6ed0 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    6eaa:	2b e2       	ldi	r18, 0x2B	; 43
    6eac:	30 e0       	ldi	r19, 0x00	; 0
    6eae:	4c e0       	ldi	r20, 0x0C	; 12
    6eb0:	50 e0       	ldi	r21, 0x00	; 0
    6eb2:	6d ec       	ldi	r22, 0xCD	; 205
    6eb4:	74 e0       	ldi	r23, 0x04	; 4
    6eb6:	86 e8       	ldi	r24, 0x86	; 134
    6eb8:	90 e0       	ldi	r25, 0x00	; 0
    6eba:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    6ebe:	2b e2       	ldi	r18, 0x2B	; 43
    6ec0:	30 e0       	ldi	r19, 0x00	; 0
    6ec2:	40 e5       	ldi	r20, 0x50	; 80
    6ec4:	50 e0       	ldi	r21, 0x00	; 0
    6ec6:	6d ec       	ldi	r22, 0xCD	; 205
    6ec8:	74 e0       	ldi	r23, 0x04	; 4
    6eca:	86 e7       	ldi	r24, 0x76	; 118
    6ecc:	90 e0       	ldi	r25, 0x00	; 0
    6ece:	41 c0       	rjmp	.+130    	; 0x6f52 <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << NO_SIGNAL))						// No signal
    6ed0:	80 91 34 05 	lds	r24, 0x0534
    6ed4:	81 ff       	sbrs	r24, 1
    6ed6:	13 c0       	rjmp	.+38     	; 0x6efe <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    6ed8:	2b e2       	ldi	r18, 0x2B	; 43
    6eda:	30 e0       	ldi	r19, 0x00	; 0
    6edc:	4c e1       	ldi	r20, 0x1C	; 28
    6ede:	50 e0       	ldi	r21, 0x00	; 0
    6ee0:	6d ec       	ldi	r22, 0xCD	; 205
    6ee2:	74 e0       	ldi	r23, 0x04	; 4
    6ee4:	8b e4       	ldi	r24, 0x4B	; 75
    6ee6:	90 e0       	ldi	r25, 0x00	; 0
    6ee8:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    6eec:	2b e2       	ldi	r18, 0x2B	; 43
    6eee:	30 e0       	ldi	r19, 0x00	; 0
    6ef0:	46 e3       	ldi	r20, 0x36	; 54
    6ef2:	50 e0       	ldi	r21, 0x00	; 0
    6ef4:	6d ec       	ldi	r22, 0xCD	; 205
    6ef6:	74 e0       	ldi	r23, 0x04	; 4
    6ef8:	8c e4       	ldi	r24, 0x4C	; 76
    6efa:	90 e0       	ldi	r25, 0x00	; 0
    6efc:	2a c0       	rjmp	.+84     	; 0x6f52 <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << THROTTLE_HIGH))					// Throttle high
    6efe:	80 91 34 05 	lds	r24, 0x0534
    6f02:	80 ff       	sbrs	r24, 0
    6f04:	13 c0       	rjmp	.+38     	; 0x6f2c <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    6f06:	2b e2       	ldi	r18, 0x2B	; 43
    6f08:	30 e0       	ldi	r19, 0x00	; 0
    6f0a:	4a e0       	ldi	r20, 0x0A	; 10
    6f0c:	50 e0       	ldi	r21, 0x00	; 0
    6f0e:	6d ec       	ldi	r22, 0xCD	; 205
    6f10:	74 e0       	ldi	r23, 0x04	; 4
    6f12:	89 e6       	ldi	r24, 0x69	; 105
    6f14:	90 e0       	ldi	r25, 0x00	; 0
    6f16:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    6f1a:	2b e2       	ldi	r18, 0x2B	; 43
    6f1c:	30 e0       	ldi	r19, 0x00	; 0
    6f1e:	41 e5       	ldi	r20, 0x51	; 81
    6f20:	50 e0       	ldi	r21, 0x00	; 0
    6f22:	6d ec       	ldi	r22, 0xCD	; 205
    6f24:	74 e0       	ldi	r23, 0x04	; 4
    6f26:	87 e3       	ldi	r24, 0x37	; 55
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	13 c0       	rjmp	.+38     	; 0x6f52 <idle_screen+0xe0>
	}
	
	else if (General_error & (1 << DISARMED))						// Disarmed
    6f2c:	80 91 34 05 	lds	r24, 0x0534
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    6f30:	2b e2       	ldi	r18, 0x2B	; 43
    6f32:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if (General_error & (1 << DISARMED))						// Disarmed
    6f34:	82 ff       	sbrs	r24, 2
    6f36:	07 c0       	rjmp	.+14     	; 0x6f46 <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    6f38:	44 e1       	ldi	r20, 0x14	; 20
    6f3a:	50 e0       	ldi	r21, 0x00	; 0
    6f3c:	6d ec       	ldi	r22, 0xCD	; 205
    6f3e:	74 e0       	ldi	r23, 0x04	; 4
    6f40:	8b e8       	ldi	r24, 0x8B	; 139
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	06 c0       	rjmp	.+12     	; 0x6f52 <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    6f46:	4c e1       	ldi	r20, 0x1C	; 28
    6f48:	50 e0       	ldi	r21, 0x00	; 0
    6f4a:	6d ec       	ldi	r22, 0xCD	; 205
    6f4c:	74 e0       	ldi	r23, 0x04	; 4
    6f4e:	8a e8       	ldi	r24, 0x8A	; 138
    6f50:	90 e0       	ldi	r25, 0x00	; 0
    6f52:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
	}

	write_buffer(buffer);
    6f56:	80 e0       	ldi	r24, 0x00	; 0
    6f58:	91 e0       	ldi	r25, 0x01	; 1
    6f5a:	0c 94 1b 35 	jmp	0x6a36	; 0x6a36 <write_buffer>

00006f5e <get_raw_gyros>:
// routine used by the zeroing calibration routine. Chicken | Egg.
// We also cannot merge P1 and P2 here as each have their own zeros.
//***************************************************************

void get_raw_gyros(void)
{
    6f5e:	0f 93       	push	r16
    6f60:	1f 93       	push	r17
    6f62:	cf 93       	push	r28
    6f64:	df 93       	push	r29
    6f66:	00 d0       	rcall	.+0      	; 0x6f68 <get_raw_gyros+0xa>
    6f68:	00 d0       	rcall	.+0      	; 0x6f6a <get_raw_gyros+0xc>
    6f6a:	00 d0       	rcall	.+0      	; 0x6f6c <get_raw_gyros+0xe>
    6f6c:	cd b7       	in	r28, 0x3d	; 61
    6f6e:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t Gyros[6];

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    6f70:	26 e0       	ldi	r18, 0x06	; 6
    6f72:	ae 01       	movw	r20, r28
    6f74:	4f 5f       	subi	r20, 0xFF	; 255
    6f76:	5f 4f       	sbci	r21, 0xFF	; 255
    6f78:	63 e4       	ldi	r22, 0x43	; 67
    6f7a:	80 ed       	ldi	r24, 0xD0	; 208
    6f7c:	0e 94 b8 3a 	call	0x7570	; 0x7570 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	gyroADC_raw[PITCH] = (Gyros[0] << 8) + Gyros[1];
    6f80:	89 81       	ldd	r24, Y+1	; 0x01
    6f82:	90 e0       	ldi	r25, 0x00	; 0
    6f84:	98 2f       	mov	r25, r24
    6f86:	88 27       	eor	r24, r24
    6f88:	2a 81       	ldd	r18, Y+2	; 0x02
    6f8a:	82 0f       	add	r24, r18
    6f8c:	91 1d       	adc	r25, r1
    6f8e:	90 93 c7 05 	sts	0x05C7, r25
    6f92:	80 93 c6 05 	sts	0x05C6, r24
	gyroADC_raw[ROLL] = (Gyros[2] << 8) + Gyros[3];
    6f96:	8b 81       	ldd	r24, Y+3	; 0x03
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	98 2f       	mov	r25, r24
    6f9c:	88 27       	eor	r24, r24
    6f9e:	2c 81       	ldd	r18, Y+4	; 0x04
    6fa0:	82 0f       	add	r24, r18
    6fa2:	91 1d       	adc	r25, r1
    6fa4:	90 93 c5 05 	sts	0x05C5, r25
    6fa8:	80 93 c4 05 	sts	0x05C4, r24
	gyroADC_raw[YAW] = (Gyros[4] << 8) + Gyros[5];
    6fac:	8d 81       	ldd	r24, Y+5	; 0x05
    6fae:	90 e0       	ldi	r25, 0x00	; 0
    6fb0:	98 2f       	mov	r25, r24
    6fb2:	88 27       	eor	r24, r24
    6fb4:	2e 81       	ldd	r18, Y+6	; 0x06
    6fb6:	82 0f       	add	r24, r18
    6fb8:	91 1d       	adc	r25, r1
    6fba:	90 93 c9 05 	sts	0x05C9, r25
    6fbe:	80 93 c8 05 	sts	0x05C8, r24

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		gyroADC_P1[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P1][i])] >> GYRODIV;
    6fc2:	40 91 2d 08 	lds	r20, 0x082D
		gyroADC_P2[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P2][i])] >> GYRODIV;
    6fc6:	20 91 a3 06 	lds	r18, 0x06A3
    6fca:	0a ec       	ldi	r16, 0xCA	; 202
    6fcc:	15 e0       	ldi	r17, 0x05	; 5
    6fce:	a6 ed       	ldi	r26, 0xD6	; 214
    6fd0:	b5 e0       	ldi	r27, 0x05	; 5
    6fd2:	83 e0       	ldi	r24, 0x03	; 3
    6fd4:	48 02       	muls	r20, r24
    6fd6:	a0 01       	movw	r20, r0
    6fd8:	11 24       	eor	r1, r1
    6fda:	e3 e0       	ldi	r30, 0x03	; 3
    6fdc:	2e 02       	muls	r18, r30
    6fde:	90 01       	movw	r18, r0
    6fe0:	11 24       	eor	r1, r1
    6fe2:	80 e0       	ldi	r24, 0x00	; 0
    6fe4:	90 e0       	ldi	r25, 0x00	; 0
    6fe6:	4b 5e       	subi	r20, 0xEB	; 235
    6fe8:	5b 4d       	sbci	r21, 0xDB	; 219
    6fea:	2b 5e       	subi	r18, 0xEB	; 235
    6fec:	3b 4d       	sbci	r19, 0xDB	; 219
    6fee:	fa 01       	movw	r30, r20
    6ff0:	e8 0f       	add	r30, r24
    6ff2:	f9 1f       	adc	r31, r25

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors for both orientations
		gyroADC_P1[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P1][i])] >> GYRODIV;
    6ff4:	e4 91       	lpm	r30, Z
    6ff6:	ee 0f       	add	r30, r30
    6ff8:	ff 0b       	sbc	r31, r31
    6ffa:	ec 53       	subi	r30, 0x3C	; 60
    6ffc:	fa 4f       	sbci	r31, 0xFA	; 250
    6ffe:	60 81       	ld	r22, Z
    7000:	71 81       	ldd	r23, Z+1	; 0x01
    7002:	e4 e0       	ldi	r30, 0x04	; 4
    7004:	75 95       	asr	r23
    7006:	67 95       	ror	r22
    7008:	ea 95       	dec	r30
    700a:	e1 f7       	brne	.-8      	; 0x7004 <get_raw_gyros+0xa6>
    700c:	f8 01       	movw	r30, r16
    700e:	61 93       	st	Z+, r22
    7010:	71 93       	st	Z+, r23
    7012:	8f 01       	movw	r16, r30
    7014:	f9 01       	movw	r30, r18
    7016:	e8 0f       	add	r30, r24
    7018:	f9 1f       	adc	r31, r25
		gyroADC_P2[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P2][i])] >> GYRODIV;
    701a:	e4 91       	lpm	r30, Z
    701c:	ee 0f       	add	r30, r30
    701e:	ff 0b       	sbc	r31, r31
    7020:	ec 53       	subi	r30, 0x3C	; 60
    7022:	fa 4f       	sbci	r31, 0xFA	; 250
    7024:	60 81       	ld	r22, Z
    7026:	71 81       	ldd	r23, Z+1	; 0x01
    7028:	f4 e0       	ldi	r31, 0x04	; 4
    702a:	75 95       	asr	r23
    702c:	67 95       	ror	r22
    702e:	fa 95       	dec	r31
    7030:	e1 f7       	brne	.-8      	; 0x702a <get_raw_gyros+0xcc>
    7032:	6d 93       	st	X+, r22
    7034:	7d 93       	st	X+, r23
    7036:	01 96       	adiw	r24, 0x01	; 1
	gyroADC_raw[PITCH] = (Gyros[0] << 8) + Gyros[1];
	gyroADC_raw[ROLL] = (Gyros[2] << 8) + Gyros[3];
	gyroADC_raw[YAW] = (Gyros[4] << 8) + Gyros[5];

	// Reorient the data as per the board orientation	
	for (i = 0; i < NUMBEROFAXIS; i++)
    7038:	83 30       	cpi	r24, 0x03	; 3
    703a:	91 05       	cpc	r25, r1
    703c:	c1 f6       	brne	.-80     	; 0x6fee <get_raw_gyros+0x90>
	{
		// Rearrange the sensors for both orientations
		gyroADC_P1[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P1][i])] >> GYRODIV;
		gyroADC_P2[i] = gyroADC_raw[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation_P2][i])] >> GYRODIV;
	}
}
    703e:	26 96       	adiw	r28, 0x06	; 6
    7040:	0f b6       	in	r0, 0x3f	; 63
    7042:	f8 94       	cli
    7044:	de bf       	out	0x3e, r29	; 62
    7046:	0f be       	out	0x3f, r0	; 63
    7048:	cd bf       	out	0x3d, r28	; 61
    704a:	df 91       	pop	r29
    704c:	cf 91       	pop	r28
    704e:	1f 91       	pop	r17
    7050:	0f 91       	pop	r16
    7052:	08 95       	ret

00007054 <ReadGyros>:
// Only when EARTH-oriented TS is gyroADC_P1 unique.
//
//***************************************************************

void ReadGyros(void)					// Conventional orientation
{
    7054:	2f 92       	push	r2
    7056:	3f 92       	push	r3
    7058:	4f 92       	push	r4
    705a:	5f 92       	push	r5
    705c:	6f 92       	push	r6
    705e:	7f 92       	push	r7
    7060:	8f 92       	push	r8
    7062:	9f 92       	push	r9
    7064:	af 92       	push	r10
    7066:	bf 92       	push	r11
    7068:	cf 92       	push	r12
    706a:	df 92       	push	r13
    706c:	ef 92       	push	r14
    706e:	ff 92       	push	r15
    7070:	0f 93       	push	r16
    7072:	1f 93       	push	r17
    7074:	cf 93       	push	r28
    7076:	df 93       	push	r29
	uint8_t i;
	int16_t temp1, temp2, temp3;

	get_raw_gyros();					// Updates gyroADC_P1[] and gyroADC_P2[]
    7078:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <get_raw_gyros>
    707c:	5e eb       	ldi	r21, 0xBE	; 190
    707e:	e5 2e       	mov	r14, r21
    7080:	55 e0       	ldi	r21, 0x05	; 5
    7082:	f5 2e       	mov	r15, r21
    7084:	66 ed       	ldi	r22, 0xD6	; 214
    7086:	a6 2e       	mov	r10, r22
    7088:	65 e0       	ldi	r22, 0x05	; 5
    708a:	b6 2e       	mov	r11, r22
    708c:	07 e2       	ldi	r16, 0x27	; 39
    708e:	18 e0       	ldi	r17, 0x08	; 8
    7090:	70 ed       	ldi	r23, 0xD0	; 208
    7092:	c7 2e       	mov	r12, r23
    7094:	75 e0       	ldi	r23, 0x05	; 5
    7096:	d7 2e       	mov	r13, r23
    7098:	ea ec       	ldi	r30, 0xCA	; 202
    709a:	6e 2e       	mov	r6, r30
    709c:	e5 e0       	ldi	r30, 0x05	; 5
    709e:	7e 2e       	mov	r7, r30
    70a0:	c0 e0       	ldi	r28, 0x00	; 0
    70a2:	d0 e0       	ldi	r29, 0x00	; 0

			// P2 orientation
			temp2 = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);

			// Merge the two gyros per transition percentage
			temp3 = scale32(temp1, (100 - transition)) + scale32(temp2, transition); // Sum the two values
    70a4:	f4 e6       	ldi	r31, 0x64	; 100
    70a6:	2f 2e       	mov	r2, r31
    70a8:	31 2c       	mov	r3, r1
	get_raw_gyros();					// Updates gyroADC_P1[] and gyroADC_P2[]

	for (i = 0; i < NUMBEROFAXIS; i++)	
	{
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    70aa:	80 91 a4 06 	lds	r24, 0x06A4
    70ae:	20 91 a3 06 	lds	r18, 0x06A3
    70b2:	88 23       	and	r24, r24
    70b4:	09 f4       	brne	.+2      	; 0x70b8 <ReadGyros+0x64>
    70b6:	56 c0       	rjmp	.+172    	; 0x7164 <ReadGyros+0x110>
		{
			// P1 alternate (original) orientation. Swap zeros so that they match.
			temp1 = (gyroADC_P1[i] - Config.gyroZero_P1[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P1][i]);
    70b8:	40 91 2d 08 	lds	r20, 0x082D
    70bc:	55 27       	eor	r21, r21
    70be:	47 fd       	sbrc	r20, 7
    70c0:	50 95       	com	r21
    70c2:	fa 01       	movw	r30, r20
    70c4:	ee 0f       	add	r30, r30
    70c6:	ff 1f       	adc	r31, r31
    70c8:	e4 0f       	add	r30, r20
    70ca:	f5 1f       	adc	r31, r21
    70cc:	ec 0f       	add	r30, r28
    70ce:	fd 1f       	adc	r31, r29
    70d0:	e3 53       	subi	r30, 0x33	; 51
    70d2:	fc 4d       	sbci	r31, 0xDC	; 220
    70d4:	84 91       	lpm	r24, Z

			// P2 orientation
			temp2 = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);
    70d6:	33 27       	eor	r19, r19
    70d8:	27 fd       	sbrc	r18, 7
    70da:	30 95       	com	r19
    70dc:	f9 01       	movw	r30, r18
    70de:	ee 0f       	add	r30, r30
    70e0:	ff 1f       	adc	r31, r31
    70e2:	e2 0f       	add	r30, r18
    70e4:	f3 1f       	adc	r31, r19
    70e6:	ec 0f       	add	r30, r28
    70e8:	fd 1f       	adc	r31, r29
    70ea:	e3 53       	subi	r30, 0x33	; 51
    70ec:	fc 4d       	sbci	r31, 0xDC	; 220
    70ee:	64 91       	lpm	r22, Z
    70f0:	f5 01       	movw	r30, r10
    70f2:	20 81       	ld	r18, Z
    70f4:	31 81       	ldd	r19, Z+1	; 0x01
    70f6:	f8 01       	movw	r30, r16
    70f8:	40 81       	ld	r20, Z
    70fa:	51 81       	ldd	r21, Z+1	; 0x01
    70fc:	24 1b       	sub	r18, r20
    70fe:	35 0b       	sbc	r19, r21
    7100:	62 03       	mulsu	r22, r18
    7102:	20 01       	movw	r4, r0
    7104:	63 9f       	mul	r22, r19
    7106:	50 0c       	add	r5, r0
    7108:	11 24       	eor	r1, r1

			// Merge the two gyros per transition percentage
			temp3 = scale32(temp1, (100 - transition)) + scale32(temp2, transition); // Sum the two values
    710a:	20 91 37 05 	lds	r18, 0x0537
    710e:	30 91 38 05 	lds	r19, 0x0538
    7112:	b1 01       	movw	r22, r2
    7114:	62 1b       	sub	r22, r18
    7116:	73 0b       	sbc	r23, r19
	{
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
		{
			// P1 alternate (original) orientation. Swap zeros so that they match.
			temp1 = (gyroADC_P1[i] - Config.gyroZero_P1[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P1][i]);
    7118:	f3 01       	movw	r30, r6
    711a:	20 81       	ld	r18, Z
    711c:	31 81       	ldd	r19, Z+1	; 0x01
    711e:	d8 01       	movw	r26, r16
    7120:	d5 97       	sbiw	r26, 0x35	; 53
    7122:	4d 91       	ld	r20, X+
    7124:	5c 91       	ld	r21, X
    7126:	24 1b       	sub	r18, r20
    7128:	35 0b       	sbc	r19, r21

			// P2 orientation
			temp2 = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);

			// Merge the two gyros per transition percentage
			temp3 = scale32(temp1, (100 - transition)) + scale32(temp2, transition); // Sum the two values
    712a:	48 2f       	mov	r20, r24
    712c:	42 03       	mulsu	r20, r18
    712e:	c0 01       	movw	r24, r0
    7130:	43 9f       	mul	r20, r19
    7132:	90 0d       	add	r25, r0
    7134:	11 24       	eor	r1, r1
    7136:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    713a:	4c 01       	movw	r8, r24
    713c:	60 91 37 05 	lds	r22, 0x0537
    7140:	70 91 38 05 	lds	r23, 0x0538
    7144:	c2 01       	movw	r24, r4
    7146:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    714a:	88 0d       	add	r24, r8
    714c:	99 1d       	adc	r25, r9

			// Gyro alt is always per orientation
			gyroADCalt[i] = temp3;
    714e:	f6 01       	movw	r30, r12
    7150:	91 83       	std	Z+1, r25	; 0x01
    7152:	80 83       	st	Z, r24

			// If the P1 reference is MODEL, always use the same gyros as P2
			if (Config.P1_Reference == MODEL)
    7154:	20 91 a4 06 	lds	r18, 0x06A4
			{
				// Use P2 orientation
				gyroADC[i] = temp2;	
    7158:	f7 01       	movw	r30, r14

			// Gyro alt is always per orientation
			gyroADCalt[i] = temp3;

			// If the P1 reference is MODEL, always use the same gyros as P2
			if (Config.P1_Reference == MODEL)
    715a:	22 30       	cpi	r18, 0x02	; 2
    715c:	11 f5       	brne	.+68     	; 0x71a2 <ReadGyros+0x14e>
			{
				// Use P2 orientation
				gyroADC[i] = temp2;	
    715e:	51 82       	std	Z+1, r5	; 0x01
    7160:	40 82       	st	Z, r4
    7162:	21 c0       	rjmp	.+66     	; 0x71a6 <ReadGyros+0x152>
		}
		// Single-orientation models
		else
		{
			// Change polarity using P2 orientation by default
			gyroADC[i] = (gyroADC_P2[i] - Config.gyroZero_P2[i]) * (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation_P2][i]);	
    7164:	82 2f       	mov	r24, r18
    7166:	99 27       	eor	r25, r25
    7168:	87 fd       	sbrc	r24, 7
    716a:	90 95       	com	r25
    716c:	fc 01       	movw	r30, r24
    716e:	ee 0f       	add	r30, r30
    7170:	ff 1f       	adc	r31, r31
    7172:	e8 0f       	add	r30, r24
    7174:	f9 1f       	adc	r31, r25
    7176:	ec 0f       	add	r30, r28
    7178:	fd 1f       	adc	r31, r29
    717a:	e3 53       	subi	r30, 0x33	; 51
    717c:	fc 4d       	sbci	r31, 0xDC	; 220
    717e:	44 91       	lpm	r20, Z
    7180:	f5 01       	movw	r30, r10
    7182:	20 81       	ld	r18, Z
    7184:	31 81       	ldd	r19, Z+1	; 0x01
    7186:	f8 01       	movw	r30, r16
    7188:	80 81       	ld	r24, Z
    718a:	91 81       	ldd	r25, Z+1	; 0x01
    718c:	28 1b       	sub	r18, r24
    718e:	39 0b       	sbc	r19, r25
    7190:	42 03       	mulsu	r20, r18
    7192:	c0 01       	movw	r24, r0
    7194:	43 9f       	mul	r20, r19
    7196:	90 0d       	add	r25, r0
    7198:	11 24       	eor	r1, r1
    719a:	f7 01       	movw	r30, r14
    719c:	91 83       	std	Z+1, r25	; 0x01
    719e:	80 83       	st	Z, r24
				
			// Copy to alternate set of gyro values
			gyroADCalt[i] = gyroADC[i];
    71a0:	f6 01       	movw	r30, r12
    71a2:	91 83       	std	Z+1, r25	; 0x01
    71a4:	80 83       	st	Z, r24
    71a6:	21 96       	adiw	r28, 0x01	; 1
    71a8:	f2 e0       	ldi	r31, 0x02	; 2
    71aa:	ef 0e       	add	r14, r31
    71ac:	f1 1c       	adc	r15, r1
    71ae:	42 e0       	ldi	r20, 0x02	; 2
    71b0:	a4 0e       	add	r10, r20
    71b2:	b1 1c       	adc	r11, r1
    71b4:	0e 5f       	subi	r16, 0xFE	; 254
    71b6:	1f 4f       	sbci	r17, 0xFF	; 255
    71b8:	82 e0       	ldi	r24, 0x02	; 2
    71ba:	c8 0e       	add	r12, r24
    71bc:	d1 1c       	adc	r13, r1
    71be:	e2 e0       	ldi	r30, 0x02	; 2
    71c0:	6e 0e       	add	r6, r30
    71c2:	71 1c       	adc	r7, r1
	uint8_t i;
	int16_t temp1, temp2, temp3;

	get_raw_gyros();					// Updates gyroADC_P1[] and gyroADC_P2[]

	for (i = 0; i < NUMBEROFAXIS; i++)	
    71c4:	c3 30       	cpi	r28, 0x03	; 3
    71c6:	d1 05       	cpc	r29, r1
    71c8:	09 f0       	breq	.+2      	; 0x71cc <ReadGyros+0x178>
    71ca:	6f cf       	rjmp	.-290    	; 0x70aa <ReadGyros+0x56>
				
			// Copy to alternate set of gyro values
			gyroADCalt[i] = gyroADC[i];
		}
	}
}
    71cc:	df 91       	pop	r29
    71ce:	cf 91       	pop	r28
    71d0:	1f 91       	pop	r17
    71d2:	0f 91       	pop	r16
    71d4:	ff 90       	pop	r15
    71d6:	ef 90       	pop	r14
    71d8:	df 90       	pop	r13
    71da:	cf 90       	pop	r12
    71dc:	bf 90       	pop	r11
    71de:	af 90       	pop	r10
    71e0:	9f 90       	pop	r9
    71e2:	8f 90       	pop	r8
    71e4:	7f 90       	pop	r7
    71e6:	6f 90       	pop	r6
    71e8:	5f 90       	pop	r5
    71ea:	4f 90       	pop	r4
    71ec:	3f 90       	pop	r3
    71ee:	2f 90       	pop	r2
    71f0:	08 95       	ret

000071f2 <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    71f2:	cf 93       	push	r28
	
	// Work out which orientation we are calibrating.
	// Only need to do this if the orientations differ.
	// Just do P2 if orientations the same.
	// Will not save new calibration when different and not firmly in P1 or p2.
	if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    71f4:	80 91 37 05 	lds	r24, 0x0537
    71f8:	90 91 38 05 	lds	r25, 0x0538
    71fc:	80 36       	cpi	r24, 0x60	; 96
    71fe:	91 05       	cpc	r25, r1
    7200:	24 f4       	brge	.+8      	; 0x720a <CalibrateGyrosFast+0x18>
    7202:	20 91 a4 06 	lds	r18, 0x06A4
    7206:	21 11       	cpse	r18, r1
    7208:	54 c0       	rjmp	.+168    	; 0x72b2 <CalibrateGyrosFast+0xc0>
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P2[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    720a:	86 e0       	ldi	r24, 0x06	; 6
    720c:	e7 e2       	ldi	r30, 0x27	; 39
    720e:	f8 e0       	ldi	r31, 0x08	; 8
    7210:	df 01       	movw	r26, r30
    7212:	1d 92       	st	X+, r1
    7214:	8a 95       	dec	r24
    7216:	e9 f7       	brne	.-6      	; 0x7212 <CalibrateGyrosFast+0x20>
    7218:	c0 e2       	ldi	r28, 0x20	; 32

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
		{
			get_raw_gyros();				// Updates gyroADC_P1/P2[] with the correct orientation-based RPY
    721a:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <get_raw_gyros>

			Config.gyroZero_P2[ROLL] 	+= gyroADC_P2[ROLL];
    721e:	40 91 27 08 	lds	r20, 0x0827
    7222:	50 91 28 08 	lds	r21, 0x0828
    7226:	80 91 d6 05 	lds	r24, 0x05D6
    722a:	90 91 d7 05 	lds	r25, 0x05D7
    722e:	48 0f       	add	r20, r24
    7230:	59 1f       	adc	r21, r25
    7232:	50 93 28 08 	sts	0x0828, r21
    7236:	40 93 27 08 	sts	0x0827, r20
			Config.gyroZero_P2[PITCH] 	+= gyroADC_P2[PITCH];
    723a:	20 91 29 08 	lds	r18, 0x0829
    723e:	30 91 2a 08 	lds	r19, 0x082A
    7242:	80 91 d8 05 	lds	r24, 0x05D8
    7246:	90 91 d9 05 	lds	r25, 0x05D9
    724a:	28 0f       	add	r18, r24
    724c:	39 1f       	adc	r19, r25
    724e:	30 93 2a 08 	sts	0x082A, r19
    7252:	20 93 29 08 	sts	0x0829, r18
			Config.gyroZero_P2[YAW] 	+= gyroADC_P2[YAW];
    7256:	80 91 2b 08 	lds	r24, 0x082B
    725a:	90 91 2c 08 	lds	r25, 0x082C
    725e:	60 91 da 05 	lds	r22, 0x05DA
    7262:	70 91 db 05 	lds	r23, 0x05DB
    7266:	86 0f       	add	r24, r22
    7268:	97 1f       	adc	r25, r23
    726a:	90 93 2c 08 	sts	0x082C, r25
    726e:	80 93 2b 08 	sts	0x082B, r24
    7272:	c1 50       	subi	r28, 0x01	; 1
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P2[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
    7274:	91 f6       	brne	.-92     	; 0x721a <CalibrateGyrosFast+0x28>
		}

		// Average readings for all axis
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			Config.gyroZero_P2[i] 	= (Config.gyroZero_P2[i] >> 5);
    7276:	65 e0       	ldi	r22, 0x05	; 5
    7278:	55 95       	asr	r21
    727a:	47 95       	ror	r20
    727c:	6a 95       	dec	r22
    727e:	e1 f7       	brne	.-8      	; 0x7278 <CalibrateGyrosFast+0x86>
    7280:	50 93 28 08 	sts	0x0828, r21
    7284:	40 93 27 08 	sts	0x0827, r20
    7288:	75 e0       	ldi	r23, 0x05	; 5
    728a:	35 95       	asr	r19
    728c:	27 95       	ror	r18
    728e:	7a 95       	dec	r23
    7290:	e1 f7       	brne	.-8      	; 0x728a <CalibrateGyrosFast+0x98>
    7292:	30 93 2a 08 	sts	0x082A, r19
    7296:	20 93 29 08 	sts	0x0829, r18
    729a:	e5 e0       	ldi	r30, 0x05	; 5
    729c:	95 95       	asr	r25
    729e:	87 95       	ror	r24
    72a0:	ea 95       	dec	r30
    72a2:	e1 f7       	brne	.-8      	; 0x729c <CalibrateGyrosFast+0xaa>
    72a4:	90 93 2c 08 	sts	0x082C, r25
    72a8:	80 93 2b 08 	sts	0x082B, r24
			Config.gyroZero_P1[i] 	= (Config.gyroZero_P1[i] >> 5);	// Divide by 32
		}
	}
	
	Save_Config_to_EEPROM();
}
    72ac:	cf 91       	pop	r28
		{
			Config.gyroZero_P1[i] 	= (Config.gyroZero_P1[i] >> 5);	// Divide by 32
		}
	}
	
	Save_Config_to_EEPROM();
    72ae:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
		{
			Config.gyroZero_P2[i] 	= (Config.gyroZero_P2[i] >> 5);
		}
	}
	// P1
	else if (transition <= 5)
    72b2:	06 97       	sbiw	r24, 0x06	; 6
    72b4:	dc f7       	brge	.-10     	; 0x72ac <CalibrateGyrosFast+0xba>
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P1[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    72b6:	86 e0       	ldi	r24, 0x06	; 6
    72b8:	e2 ef       	ldi	r30, 0xF2	; 242
    72ba:	f7 e0       	ldi	r31, 0x07	; 7
    72bc:	df 01       	movw	r26, r30
    72be:	1d 92       	st	X+, r1
    72c0:	8a 95       	dec	r24
    72c2:	e9 f7       	brne	.-6      	; 0x72be <CalibrateGyrosFast+0xcc>
    72c4:	c0 e2       	ldi	r28, 0x20	; 32

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
		{
			get_raw_gyros();				// Updates gyroADC_P1/P2[] with the correct orientation-based RPY
    72c6:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <get_raw_gyros>

			Config.gyroZero_P1[ROLL] 	+= gyroADC_P1[ROLL];
    72ca:	40 91 f2 07 	lds	r20, 0x07F2
    72ce:	50 91 f3 07 	lds	r21, 0x07F3
    72d2:	80 91 ca 05 	lds	r24, 0x05CA
    72d6:	90 91 cb 05 	lds	r25, 0x05CB
    72da:	48 0f       	add	r20, r24
    72dc:	59 1f       	adc	r21, r25
    72de:	50 93 f3 07 	sts	0x07F3, r21
    72e2:	40 93 f2 07 	sts	0x07F2, r20
			Config.gyroZero_P1[PITCH] 	+= gyroADC_P1[PITCH];
    72e6:	20 91 f4 07 	lds	r18, 0x07F4
    72ea:	30 91 f5 07 	lds	r19, 0x07F5
    72ee:	80 91 cc 05 	lds	r24, 0x05CC
    72f2:	90 91 cd 05 	lds	r25, 0x05CD
    72f6:	28 0f       	add	r18, r24
    72f8:	39 1f       	adc	r19, r25
    72fa:	30 93 f5 07 	sts	0x07F5, r19
    72fe:	20 93 f4 07 	sts	0x07F4, r18
			Config.gyroZero_P1[YAW] 	+= gyroADC_P1[YAW];
    7302:	80 91 f6 07 	lds	r24, 0x07F6
    7306:	90 91 f7 07 	lds	r25, 0x07F7
    730a:	60 91 ce 05 	lds	r22, 0x05CE
    730e:	70 91 cf 05 	lds	r23, 0x05CF
    7312:	86 0f       	add	r24, r22
    7314:	97 1f       	adc	r25, r23
    7316:	90 93 f7 07 	sts	0x07F7, r25
    731a:	80 93 f6 07 	sts	0x07F6, r24
    731e:	c1 50       	subi	r28, 0x01	; 1
	{
		// Clear gyro zeros for the orientation that we are calibrating
		memset(&Config.gyroZero_P1[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

		// Calculate average over 32 reads
		for (i = 0; i < 32; i++)
    7320:	91 f6       	brne	.-92     	; 0x72c6 <CalibrateGyrosFast+0xd4>
		}

		// Average readings for all axis
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			Config.gyroZero_P1[i] 	= (Config.gyroZero_P1[i] >> 5);	// Divide by 32
    7322:	a5 e0       	ldi	r26, 0x05	; 5
    7324:	55 95       	asr	r21
    7326:	47 95       	ror	r20
    7328:	aa 95       	dec	r26
    732a:	e1 f7       	brne	.-8      	; 0x7324 <CalibrateGyrosFast+0x132>
    732c:	50 93 f3 07 	sts	0x07F3, r21
    7330:	40 93 f2 07 	sts	0x07F2, r20
    7334:	b5 e0       	ldi	r27, 0x05	; 5
    7336:	35 95       	asr	r19
    7338:	27 95       	ror	r18
    733a:	ba 95       	dec	r27
    733c:	e1 f7       	brne	.-8      	; 0x7336 <CalibrateGyrosFast+0x144>
    733e:	30 93 f5 07 	sts	0x07F5, r19
    7342:	20 93 f4 07 	sts	0x07F4, r18
    7346:	c5 e0       	ldi	r28, 0x05	; 5
    7348:	95 95       	asr	r25
    734a:	87 95       	ror	r24
    734c:	ca 95       	dec	r28
    734e:	e1 f7       	brne	.-8      	; 0x7348 <CalibrateGyrosFast+0x156>
    7350:	90 93 f7 07 	sts	0x07F7, r25
    7354:	80 93 f6 07 	sts	0x07F6, r24
    7358:	a9 cf       	rjmp	.-174    	; 0x72ac <CalibrateGyrosFast+0xba>

0000735a <CalibrateGyrosSlow>:
	
	Save_Config_to_EEPROM();
}

bool CalibrateGyrosSlow(void)
{
    735a:	2f 92       	push	r2
    735c:	3f 92       	push	r3
    735e:	4f 92       	push	r4
    7360:	5f 92       	push	r5
    7362:	6f 92       	push	r6
    7364:	7f 92       	push	r7
    7366:	8f 92       	push	r8
    7368:	9f 92       	push	r9
    736a:	af 92       	push	r10
    736c:	bf 92       	push	r11
    736e:	cf 92       	push	r12
    7370:	df 92       	push	r13
    7372:	ef 92       	push	r14
    7374:	ff 92       	push	r15
    7376:	0f 93       	push	r16
    7378:	1f 93       	push	r17
    737a:	cf 93       	push	r28
    737c:	df 93       	push	r29
    737e:	cd b7       	in	r28, 0x3d	; 61
    7380:	de b7       	in	r29, 0x3e	; 62
    7382:	65 97       	sbiw	r28, 0x15	; 21
    7384:	0f b6       	in	r0, 0x3f	; 63
    7386:	f8 94       	cli
    7388:	de bf       	out	0x3e, r29	; 62
    738a:	0f be       	out	0x3f, r0	; 63
    738c:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    738e:	1e 86       	std	Y+14, r1	; 0x0e
    7390:	1d 86       	std	Y+13, r1	; 0x0d
    7392:	18 8a       	std	Y+16, r1	; 0x10
    7394:	1f 86       	std	Y+15, r1	; 0x0f
    7396:	1a 8a       	std	Y+18, r1	; 0x12
    7398:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate setting much more quickly
	CalibrateGyrosFast();	
    739a:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <CalibrateGyrosFast>
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		// Work out which orientation we are calibrating
		// Only need to do this if the orientations differ
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    739e:	c0 90 37 05 	lds	r12, 0x0537
    73a2:	d0 90 38 05 	lds	r13, 0x0538
    73a6:	b0 90 a4 06 	lds	r11, 0x06A4
    73aa:	07 e2       	ldi	r16, 0x27	; 39
    73ac:	18 e0       	ldi	r17, 0x08	; 8
    73ae:	ce 01       	movw	r24, r28
    73b0:	01 96       	adiw	r24, 0x01	; 1
    73b2:	7c 01       	movw	r14, r24
		{
			GyroSmooth[axis] = Config.gyroZero_P2[axis];
    73b4:	f8 01       	movw	r30, r16
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		// Work out which orientation we are calibrating
		// Only need to do this if the orientations differ
		if ((transition > 95) || (Config.P1_Reference == NO_ORIENT))
    73b6:	90 e6       	ldi	r25, 0x60	; 96
    73b8:	c9 16       	cp	r12, r25
    73ba:	d1 04       	cpc	r13, r1
    73bc:	14 f4       	brge	.+4      	; 0x73c2 <CalibrateGyrosSlow+0x68>
    73be:	b1 10       	cpse	r11, r1
    73c0:	f5 97       	sbiw	r30, 0x35	; 53
		{
			GyroSmooth[axis] = Config.gyroZero_P2[axis];
		}
		else
		{
			GyroSmooth[axis] = Config.gyroZero_P1[axis];	
    73c2:	60 81       	ld	r22, Z
    73c4:	71 81       	ldd	r23, Z+1	; 0x01
    73c6:	88 27       	eor	r24, r24
    73c8:	77 fd       	sbrc	r23, 7
    73ca:	80 95       	com	r24
    73cc:	98 2f       	mov	r25, r24
    73ce:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    73d2:	f7 01       	movw	r30, r14
    73d4:	60 83       	st	Z, r22
    73d6:	71 83       	std	Z+1, r23	; 0x01
    73d8:	82 83       	std	Z+2, r24	; 0x02
    73da:	93 83       	std	Z+3, r25	; 0x03
    73dc:	0e 5f       	subi	r16, 0xFE	; 254
    73de:	1f 4f       	sbci	r17, 0xFF	; 255
    73e0:	f4 e0       	ldi	r31, 0x04	; 4
    73e2:	ef 0e       	add	r14, r31
    73e4:	f1 1c       	adc	r15, r1
	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate setting much more quickly
	CalibrateGyrosFast();	
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    73e6:	88 e0       	ldi	r24, 0x08	; 8
    73e8:	0d 32       	cpi	r16, 0x2D	; 45
    73ea:	18 07       	cpc	r17, r24
    73ec:	19 f7       	brne	.-58     	; 0x73b4 <CalibrateGyrosSlow+0x5a>
    73ee:	1d 8a       	std	Y+21, r1	; 0x15
    73f0:	1b 8a       	std	Y+19, r1	; 0x13
    73f2:	e1 2c       	mov	r14, r1
    73f4:	f1 2c       	mov	r15, r1
    73f6:	00 e0       	ldi	r16, 0x00	; 0
    73f8:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    73fa:	80 91 b2 00 	lds	r24, 0x00B2
    73fe:	9d 89       	ldd	r25, Y+21	; 0x15
    7400:	89 1b       	sub	r24, r25
    7402:	e8 0e       	add	r14, r24
    7404:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    7406:	e0 91 b2 00 	lds	r30, 0x00B2
    740a:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    740c:	fc e4       	ldi	r31, 0x4C	; 76
    740e:	ef 16       	cp	r14, r31
    7410:	ff 06       	cpc	r15, r31
    7412:	28 f0       	brcs	.+10     	; 0x741e <CalibrateGyrosSlow+0xc4>
		{
			Gyro_seconds++;
    7414:	8b 89       	ldd	r24, Y+19	; 0x13
    7416:	8f 5f       	subi	r24, 0xFF	; 255
    7418:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    741a:	e1 2c       	mov	r14, r1
    741c:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    741e:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <get_raw_gyros>
    7422:	fe eb       	ldi	r31, 0xBE	; 190
    7424:	2f 2e       	mov	r2, r31
    7426:	f5 e0       	ldi	r31, 0x05	; 5
    7428:	3f 2e       	mov	r3, r31
    742a:	fe 01       	movw	r30, r28
    742c:	3d 96       	adiw	r30, 0x0d	; 13
    742e:	5f 01       	movw	r10, r30
    7430:	ce 01       	movw	r24, r28
    7432:	01 96       	adiw	r24, 0x01	; 1
    7434:	6c 01       	movw	r12, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    7436:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    7438:	f1 01       	movw	r30, r2
    743a:	81 90       	ld	r8, Z+
    743c:	91 90       	ld	r9, Z+
    743e:	1f 01       	movw	r2, r30
    7440:	20 e0       	ldi	r18, 0x00	; 0
    7442:	30 ec       	ldi	r19, 0xC0	; 192
    7444:	49 e7       	ldi	r20, 0x79	; 121
    7446:	54 e4       	ldi	r21, 0x44	; 68
    7448:	f6 01       	movw	r30, r12
    744a:	60 81       	ld	r22, Z
    744c:	71 81       	ldd	r23, Z+1	; 0x01
    744e:	82 81       	ldd	r24, Z+2	; 0x02
    7450:	93 81       	ldd	r25, Z+3	; 0x03
    7452:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7456:	2b 01       	movw	r4, r22
    7458:	3c 01       	movw	r6, r24
    745a:	b4 01       	movw	r22, r8
    745c:	88 27       	eor	r24, r24
    745e:	77 fd       	sbrc	r23, 7
    7460:	80 95       	com	r24
    7462:	98 2f       	mov	r25, r24
    7464:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    7468:	9b 01       	movw	r18, r22
    746a:	ac 01       	movw	r20, r24
    746c:	c3 01       	movw	r24, r6
    746e:	b2 01       	movw	r22, r4
    7470:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    7474:	20 e0       	ldi	r18, 0x00	; 0
    7476:	30 e0       	ldi	r19, 0x00	; 0
    7478:	4a e7       	ldi	r20, 0x7A	; 122
    747a:	54 e4       	ldi	r21, 0x44	; 68
    747c:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
    7480:	f6 01       	movw	r30, r12
    7482:	60 83       	st	Z, r22
    7484:	71 83       	std	Z+1, r23	; 0x01
    7486:	82 83       	std	Z+2, r24	; 0x02
    7488:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    748a:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    748e:	f5 01       	movw	r30, r10
    7490:	20 81       	ld	r18, Z
    7492:	31 81       	ldd	r19, Z+1	; 0x01
    7494:	26 17       	cp	r18, r22
    7496:	37 07       	cpc	r19, r23
    7498:	11 f0       	breq	.+4      	; 0x749e <CalibrateGyrosSlow+0x144>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    749a:	00 e0       	ldi	r16, 0x00	; 0
    749c:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    749e:	f5 01       	movw	r30, r10
    74a0:	61 93       	st	Z+, r22
    74a2:	71 93       	st	Z+, r23
    74a4:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    74a6:	fc 89       	ldd	r31, Y+20	; 0x14
    74a8:	ff 5f       	subi	r31, 0xFF	; 255
    74aa:	fc 8b       	std	Y+20, r31	; 0x14
    74ac:	84 e0       	ldi	r24, 0x04	; 4
    74ae:	c8 0e       	add	r12, r24
    74b0:	d1 1c       	adc	r13, r1
    74b2:	f3 30       	cpi	r31, 0x03	; 3
    74b4:	09 f6       	brne	.-126    	; 0x7438 <CalibrateGyrosSlow+0xde>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    74b6:	0f 5f       	subi	r16, 0xFF	; 255
    74b8:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    74ba:	09 3c       	cpi	r16, 0xC9	; 201
    74bc:	11 05       	cpc	r17, r1
    74be:	20 f0       	brcs	.+8      	; 0x74c8 <CalibrateGyrosSlow+0x16e>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    74c0:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    74c4:	81 e0       	ldi	r24, 0x01	; 1
    74c6:	01 c0       	rjmp	.+2      	; 0x74ca <CalibrateGyrosSlow+0x170>
    74c8:	80 e0       	ldi	r24, 0x00	; 0
    74ca:	e7 e8       	ldi	r30, 0x87	; 135
    74cc:	f3 e1       	ldi	r31, 0x13	; 19
    74ce:	31 97       	sbiw	r30, 0x01	; 1
    74d0:	f1 f7       	brne	.-4      	; 0x74ce <CalibrateGyrosSlow+0x174>
    74d2:	00 c0       	rjmp	.+0      	; 0x74d4 <CalibrateGyrosSlow+0x17a>
    74d4:	00 00       	nop
			GyroSmooth[axis] = Config.gyroZero_P1[axis];	
		}		
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    74d6:	81 11       	cpse	r24, r1
    74d8:	04 c0       	rjmp	.+8      	; 0x74e2 <CalibrateGyrosSlow+0x188>
    74da:	fb 89       	ldd	r31, Y+19	; 0x13
    74dc:	f6 30       	cpi	r31, 0x06	; 6
    74de:	08 f4       	brcc	.+2      	; 0x74e2 <CalibrateGyrosSlow+0x188>
    74e0:	8c cf       	rjmp	.-232    	; 0x73fa <CalibrateGyrosSlow+0xa0>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    74e2:	65 96       	adiw	r28, 0x15	; 21
    74e4:	0f b6       	in	r0, 0x3f	; 63
    74e6:	f8 94       	cli
    74e8:	de bf       	out	0x3e, r29	; 62
    74ea:	0f be       	out	0x3f, r0	; 63
    74ec:	cd bf       	out	0x3d, r28	; 61
    74ee:	df 91       	pop	r29
    74f0:	cf 91       	pop	r28
    74f2:	1f 91       	pop	r17
    74f4:	0f 91       	pop	r16
    74f6:	ff 90       	pop	r15
    74f8:	ef 90       	pop	r14
    74fa:	df 90       	pop	r13
    74fc:	cf 90       	pop	r12
    74fe:	bf 90       	pop	r11
    7500:	af 90       	pop	r10
    7502:	9f 90       	pop	r9
    7504:	8f 90       	pop	r8
    7506:	7f 90       	pop	r7
    7508:	6f 90       	pop	r6
    750a:	5f 90       	pop	r5
    750c:	4f 90       	pop	r4
    750e:	3f 90       	pop	r3
    7510:	2f 90       	pop	r2
    7512:	08 95       	ret

00007514 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    7514:	41 e0       	ldi	r20, 0x01	; 1
    7516:	6b e6       	ldi	r22, 0x6B	; 107
    7518:	80 ed       	ldi	r24, 0xD0	; 208
    751a:	0e 94 a1 3a 	call	0x7542	; 0x7542 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    751e:	40 e4       	ldi	r20, 0x40	; 64
    7520:	67 e3       	ldi	r22, 0x37	; 55
    7522:	80 ed       	ldi	r24, 0xD0	; 208
    7524:	0e 94 a1 3a 	call	0x7542	; 0x7542 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    7528:	46 e0       	ldi	r20, 0x06	; 6
    752a:	80 91 a9 06 	lds	r24, 0x06A9
    752e:	48 1b       	sub	r20, r24
    7530:	6a e1       	ldi	r22, 0x1A	; 26
    7532:	80 ed       	ldi	r24, 0xD0	; 208
    7534:	0e 94 a1 3a 	call	0x7542	; 0x7542 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    7538:	48 e1       	ldi	r20, 0x18	; 24
    753a:	6b e1       	ldi	r22, 0x1B	; 27
    753c:	80 ed       	ldi	r24, 0xD0	; 208
    753e:	0c 94 a1 3a 	jmp	0x7542	; 0x7542 <writeI2Cbyte>

00007542 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    7542:	cf 93       	push	r28
    7544:	df 93       	push	r29
    7546:	00 d0       	rcall	.+0      	; 0x7548 <writeI2Cbyte+0x6>
    7548:	cd b7       	in	r28, 0x3d	; 61
    754a:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    754c:	4a 83       	std	Y+2, r20	; 0x02
    754e:	69 83       	std	Y+1, r22	; 0x01
    7550:	0e 94 cd 68 	call	0xd19a	; 0xd19a <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    7554:	69 81       	ldd	r22, Y+1	; 0x01
    7556:	86 2f       	mov	r24, r22
    7558:	0e 94 1d 69 	call	0xd23a	; 0xd23a <i2c_write>
    i2c_write(value); 								// Write byte
    755c:	4a 81       	ldd	r20, Y+2	; 0x02
    755e:	84 2f       	mov	r24, r20
    7560:	0e 94 1d 69 	call	0xd23a	; 0xd23a <i2c_write>
    i2c_stop();
}
    7564:	0f 90       	pop	r0
    7566:	0f 90       	pop	r0
    7568:	df 91       	pop	r29
    756a:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    756c:	0c 94 0e 69 	jmp	0xd21c	; 0xd21c <i2c_stop>

00007570 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    7570:	cf 92       	push	r12
    7572:	df 92       	push	r13
    7574:	ef 92       	push	r14
    7576:	ff 92       	push	r15
    7578:	0f 93       	push	r16
    757a:	1f 93       	push	r17
    757c:	cf 93       	push	r28
    757e:	df 93       	push	r29
    7580:	00 d0       	rcall	.+0      	; 0x7582 <readI2CbyteArray+0x12>
    7582:	1f 92       	push	r1
    7584:	cd b7       	in	r28, 0x3d	; 61
    7586:	de b7       	in	r29, 0x3e	; 62
    7588:	18 2f       	mov	r17, r24
    758a:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    758c:	4a 83       	std	Y+2, r20	; 0x02
    758e:	5b 83       	std	Y+3, r21	; 0x03
    7590:	69 83       	std	Y+1, r22	; 0x01
    7592:	0e 94 cd 68 	call	0xd19a	; 0xd19a <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    7596:	69 81       	ldd	r22, Y+1	; 0x01
    7598:	86 2f       	mov	r24, r22
    759a:	0e 94 1d 69 	call	0xd23a	; 0xd23a <i2c_write>
    i2c_rep_start(address+I2C_READ);
    759e:	81 e0       	ldi	r24, 0x01	; 1
    75a0:	81 0f       	add	r24, r17
    75a2:	0e 94 0c 69 	call	0xd218	; 0xd218 <i2c_rep_start>
    75a6:	4a 81       	ldd	r20, Y+2	; 0x02
    75a8:	c4 2e       	mov	r12, r20
    75aa:	5b 81       	ldd	r21, Y+3	; 0x03
    75ac:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    75ae:	00 e0       	ldi	r16, 0x00	; 0
    75b0:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    75b2:	f1 2c       	mov	r15, r1
    75b4:	0e 15       	cp	r16, r14
    75b6:	1f 05       	cpc	r17, r15
    75b8:	84 f4       	brge	.+32     	; 0x75da <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    75ba:	0f 5f       	subi	r16, 0xFF	; 255
    75bc:	1f 4f       	sbci	r17, 0xFF	; 255
    75be:	0e 15       	cp	r16, r14
    75c0:	1f 05       	cpc	r17, r15
    75c2:	19 f0       	breq	.+6      	; 0x75ca <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    75c4:	0e 94 3d 69 	call	0xd27a	; 0xd27a <i2c_readAck>
    75c8:	02 c0       	rjmp	.+4      	; 0x75ce <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    75ca:	0e 94 56 69 	call	0xd2ac	; 0xd2ac <i2c_readNak>
    75ce:	f6 01       	movw	r30, r12
    75d0:	80 83       	st	Z, r24
    75d2:	ff ef       	ldi	r31, 0xFF	; 255
    75d4:	cf 1a       	sub	r12, r31
    75d6:	df 0a       	sbc	r13, r31
    75d8:	ed cf       	rjmp	.-38     	; 0x75b4 <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    75da:	0f 90       	pop	r0
    75dc:	0f 90       	pop	r0
    75de:	0f 90       	pop	r0
    75e0:	df 91       	pop	r29
    75e2:	cf 91       	pop	r28
    75e4:	1f 91       	pop	r17
    75e6:	0f 91       	pop	r16
    75e8:	ff 90       	pop	r15
    75ea:	ef 90       	pop	r14
    75ec:	df 90       	pop	r13
    75ee:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    75f0:	0c 94 0e 69 	jmp	0xd21c	; 0xd21c <i2c_stop>

000075f4 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    75f4:	4f 92       	push	r4
    75f6:	5f 92       	push	r5
    75f8:	6f 92       	push	r6
    75fa:	7f 92       	push	r7
    75fc:	8f 92       	push	r8
    75fe:	9f 92       	push	r9
    7600:	af 92       	push	r10
    7602:	bf 92       	push	r11
    7604:	cf 92       	push	r12
    7606:	df 92       	push	r13
    7608:	ef 92       	push	r14
    760a:	ff 92       	push	r15
    760c:	cf 93       	push	r28
    760e:	df 93       	push	r29
    7610:	cd b7       	in	r28, 0x3d	; 61
    7612:	de b7       	in	r29, 0x3e	; 62
    7614:	28 97       	sbiw	r28, 0x08	; 8
    7616:	0f b6       	in	r0, 0x3f	; 63
    7618:	f8 94       	cli
    761a:	de bf       	out	0x3e, r29	; 62
    761c:	0f be       	out	0x3f, r0	; 63
    761e:	cd bf       	out	0x3d, r28	; 61
    7620:	6b 01       	movw	r12, r22
    7622:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    7624:	80 90 10 06 	lds	r8, 0x0610
    7628:	90 90 11 06 	lds	r9, 0x0611
    762c:	a0 90 12 06 	lds	r10, 0x0612
    7630:	b0 90 13 06 	lds	r11, 0x0613
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    7634:	9b 01       	movw	r18, r22
    7636:	ac 01       	movw	r20, r24
    7638:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    763c:	20 e0       	ldi	r18, 0x00	; 0
    763e:	30 e0       	ldi	r19, 0x00	; 0
    7640:	40 e0       	ldi	r20, 0x00	; 0
    7642:	5f e3       	ldi	r21, 0x3F	; 63
    7644:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7648:	9b 01       	movw	r18, r22
    764a:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    764c:	60 e0       	ldi	r22, 0x00	; 0
    764e:	70 e0       	ldi	r23, 0x00	; 0
    7650:	80 e8       	ldi	r24, 0x80	; 128
    7652:	9f e3       	ldi	r25, 0x3F	; 63
    7654:	0e 94 0b 6a 	call	0xd416	; 0xd416 <__subsf3>
    7658:	69 83       	std	Y+1, r22	; 0x01
    765a:	7a 83       	std	Y+2, r23	; 0x02
    765c:	8b 83       	std	Y+3, r24	; 0x03
    765e:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    7660:	40 90 14 06 	lds	r4, 0x0614
    7664:	50 90 15 06 	lds	r5, 0x0615
    7668:	60 90 16 06 	lds	r6, 0x0616
    766c:	70 90 17 06 	lds	r7, 0x0617
    7670:	9b 01       	movw	r18, r22
    7672:	ac 01       	movw	r20, r24
    7674:	c5 01       	movw	r24, r10
    7676:	b4 01       	movw	r22, r8
    7678:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    767c:	6d 83       	std	Y+5, r22	; 0x05
    767e:	7e 83       	std	Y+6, r23	; 0x06
    7680:	8f 83       	std	Y+7, r24	; 0x07
    7682:	98 87       	std	Y+8, r25	; 0x08
    7684:	a7 01       	movw	r20, r14
    7686:	96 01       	movw	r18, r12
    7688:	c3 01       	movw	r24, r6
    768a:	b2 01       	movw	r22, r4
    768c:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7690:	9b 01       	movw	r18, r22
    7692:	ac 01       	movw	r20, r24
    7694:	6d 81       	ldd	r22, Y+5	; 0x05
    7696:	7e 81       	ldd	r23, Y+6	; 0x06
    7698:	8f 81       	ldd	r24, Y+7	; 0x07
    769a:	98 85       	ldd	r25, Y+8	; 0x08
    769c:	0e 94 0b 6a 	call	0xd416	; 0xd416 <__subsf3>
    76a0:	60 93 fc 05 	sts	0x05FC, r22
    76a4:	70 93 fd 05 	sts	0x05FD, r23
    76a8:	80 93 fe 05 	sts	0x05FE, r24
    76ac:	90 93 ff 05 	sts	0x05FF, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    76b0:	a7 01       	movw	r20, r14
    76b2:	96 01       	movw	r18, r12
    76b4:	c5 01       	movw	r24, r10
    76b6:	b4 01       	movw	r22, r8
    76b8:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    76bc:	6b 01       	movw	r12, r22
    76be:	7c 01       	movw	r14, r24
    76c0:	29 81       	ldd	r18, Y+1	; 0x01
    76c2:	3a 81       	ldd	r19, Y+2	; 0x02
    76c4:	4b 81       	ldd	r20, Y+3	; 0x03
    76c6:	5c 81       	ldd	r21, Y+4	; 0x04
    76c8:	c3 01       	movw	r24, r6
    76ca:	b2 01       	movw	r22, r4
    76cc:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    76d0:	9b 01       	movw	r18, r22
    76d2:	ac 01       	movw	r20, r24
    76d4:	c7 01       	movw	r24, r14
    76d6:	b6 01       	movw	r22, r12
    76d8:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    76dc:	60 93 dc 05 	sts	0x05DC, r22
    76e0:	70 93 dd 05 	sts	0x05DD, r23
    76e4:	80 93 de 05 	sts	0x05DE, r24
    76e8:	90 93 df 05 	sts	0x05DF, r25
}
    76ec:	28 96       	adiw	r28, 0x08	; 8
    76ee:	0f b6       	in	r0, 0x3f	; 63
    76f0:	f8 94       	cli
    76f2:	de bf       	out	0x3e, r29	; 62
    76f4:	0f be       	out	0x3f, r0	; 63
    76f6:	cd bf       	out	0x3d, r28	; 61
    76f8:	df 91       	pop	r29
    76fa:	cf 91       	pop	r28
    76fc:	ff 90       	pop	r15
    76fe:	ef 90       	pop	r14
    7700:	df 90       	pop	r13
    7702:	cf 90       	pop	r12
    7704:	bf 90       	pop	r11
    7706:	af 90       	pop	r10
    7708:	9f 90       	pop	r9
    770a:	8f 90       	pop	r8
    770c:	7f 90       	pop	r7
    770e:	6f 90       	pop	r6
    7710:	5f 90       	pop	r5
    7712:	4f 90       	pop	r4
    7714:	08 95       	ret

00007716 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    7716:	cf 92       	push	r12
    7718:	df 92       	push	r13
    771a:	ef 92       	push	r14
    771c:	ff 92       	push	r15
    771e:	69 01       	movw	r12, r18
    7720:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    7722:	25 ef       	ldi	r18, 0xF5	; 245
    7724:	31 ea       	ldi	r19, 0xA1	; 161
    7726:	4b e8       	ldi	r20, 0x8B	; 139
    7728:	5c e3       	ldi	r21, 0x3C	; 60
    772a:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    772e:	a7 01       	movw	r20, r14
    7730:	96 01       	movw	r18, r12
    7732:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7736:	6b 01       	movw	r12, r22
    7738:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    773a:	26 ea       	ldi	r18, 0xA6	; 166
    773c:	3a e0       	ldi	r19, 0x0A	; 10
    773e:	46 e8       	ldi	r20, 0x86	; 134
    7740:	5e e3       	ldi	r21, 0x3E	; 62
    7742:	0e 94 bf 6b 	call	0xd77e	; 0xd77e <__gesf2>
    7746:	18 16       	cp	r1, r24
    7748:	9c f0       	brlt	.+38     	; 0x7770 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    774a:	26 ea       	ldi	r18, 0xA6	; 166
    774c:	3a e0       	ldi	r19, 0x0A	; 10
    774e:	46 e8       	ldi	r20, 0x86	; 134
    7750:	5e eb       	ldi	r21, 0xBE	; 190
    7752:	c7 01       	movw	r24, r14
    7754:	b6 01       	movw	r22, r12
    7756:	0e 94 70 6a 	call	0xd4e0	; 0xd4e0 <__cmpsf2>
    775a:	87 ff       	sbrs	r24, 7
    775c:	11 c0       	rjmp	.+34     	; 0x7780 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    775e:	86 ea       	ldi	r24, 0xA6	; 166
    7760:	c8 2e       	mov	r12, r24
    7762:	8a e0       	ldi	r24, 0x0A	; 10
    7764:	d8 2e       	mov	r13, r24
    7766:	86 e8       	ldi	r24, 0x86	; 134
    7768:	e8 2e       	mov	r14, r24
    776a:	8e eb       	ldi	r24, 0xBE	; 190
    776c:	f8 2e       	mov	r15, r24
    776e:	08 c0       	rjmp	.+16     	; 0x7780 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    7770:	96 ea       	ldi	r25, 0xA6	; 166
    7772:	c9 2e       	mov	r12, r25
    7774:	9a e0       	ldi	r25, 0x0A	; 10
    7776:	d9 2e       	mov	r13, r25
    7778:	96 e8       	ldi	r25, 0x86	; 134
    777a:	e9 2e       	mov	r14, r25
    777c:	9e e3       	ldi	r25, 0x3E	; 62
    777e:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    7780:	c7 01       	movw	r24, r14
    7782:	b6 01       	movw	r22, r12
    7784:	ff 90       	pop	r15
    7786:	ef 90       	pop	r14
    7788:	df 90       	pop	r13
    778a:	cf 90       	pop	r12
    778c:	08 95       	ret

0000778e <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    778e:	8f 92       	push	r8
    7790:	9f 92       	push	r9
    7792:	af 92       	push	r10
    7794:	bf 92       	push	r11
    7796:	cf 92       	push	r12
    7798:	df 92       	push	r13
    779a:	ef 92       	push	r14
    779c:	ff 92       	push	r15
    779e:	0f 93       	push	r16
    77a0:	1f 93       	push	r17
    77a2:	6b 01       	movw	r12, r22
    77a4:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    77a6:	60 91 ec 05 	lds	r22, 0x05EC
    77aa:	70 91 ed 05 	lds	r23, 0x05ED
    77ae:	80 91 ee 05 	lds	r24, 0x05EE
    77b2:	90 91 ef 05 	lds	r25, 0x05EF
    77b6:	a7 01       	movw	r20, r14
    77b8:	96 01       	movw	r18, r12
    77ba:	0e 94 8b 3b 	call	0x7716	; 0x7716 <thetascale>
	VectorA = VectorY;
    77be:	00 91 3d 05 	lds	r16, 0x053D
    77c2:	10 91 3e 05 	lds	r17, 0x053E
    77c6:	20 91 3f 05 	lds	r18, 0x053F
    77ca:	30 91 40 05 	lds	r19, 0x0540
    77ce:	00 93 10 06 	sts	0x0610, r16
    77d2:	10 93 11 06 	sts	0x0611, r17
    77d6:	20 93 12 06 	sts	0x0612, r18
    77da:	30 93 13 06 	sts	0x0613, r19
	VectorB = VectorZ;
    77de:	00 91 00 05 	lds	r16, 0x0500
    77e2:	10 91 01 05 	lds	r17, 0x0501
    77e6:	20 91 02 05 	lds	r18, 0x0502
    77ea:	30 91 03 05 	lds	r19, 0x0503
    77ee:	00 93 14 06 	sts	0x0614, r16
    77f2:	10 93 15 06 	sts	0x0615, r17
    77f6:	20 93 16 06 	sts	0x0616, r18
    77fa:	30 93 17 06 	sts	0x0617, r19
	RotateVector(theta);
    77fe:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <RotateVector>
	VectorY = VectorNewA;
    7802:	80 91 fc 05 	lds	r24, 0x05FC
    7806:	90 91 fd 05 	lds	r25, 0x05FD
    780a:	a0 91 fe 05 	lds	r26, 0x05FE
    780e:	b0 91 ff 05 	lds	r27, 0x05FF
    7812:	80 93 3d 05 	sts	0x053D, r24
    7816:	90 93 3e 05 	sts	0x053E, r25
    781a:	a0 93 3f 05 	sts	0x053F, r26
    781e:	b0 93 40 05 	sts	0x0540, r27
	VectorZ = VectorNewB;
    7822:	80 90 dc 05 	lds	r8, 0x05DC
    7826:	90 90 dd 05 	lds	r9, 0x05DD
    782a:	a0 90 de 05 	lds	r10, 0x05DE
    782e:	b0 90 df 05 	lds	r11, 0x05DF
    7832:	80 92 00 05 	sts	0x0500, r8
    7836:	90 92 01 05 	sts	0x0501, r9
    783a:	a0 92 02 05 	sts	0x0502, r10
    783e:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    7842:	60 91 f0 05 	lds	r22, 0x05F0
    7846:	70 91 f1 05 	lds	r23, 0x05F1
    784a:	80 91 f2 05 	lds	r24, 0x05F2
    784e:	90 91 f3 05 	lds	r25, 0x05F3
    7852:	a7 01       	movw	r20, r14
    7854:	96 01       	movw	r18, r12
    7856:	0e 94 8b 3b 	call	0x7716	; 0x7716 <thetascale>
	VectorA = VectorX;
    785a:	00 91 41 05 	lds	r16, 0x0541
    785e:	10 91 42 05 	lds	r17, 0x0542
    7862:	20 91 43 05 	lds	r18, 0x0543
    7866:	30 91 44 05 	lds	r19, 0x0544
    786a:	00 93 10 06 	sts	0x0610, r16
    786e:	10 93 11 06 	sts	0x0611, r17
    7872:	20 93 12 06 	sts	0x0612, r18
    7876:	30 93 13 06 	sts	0x0613, r19
	VectorB = VectorZ;
    787a:	80 92 14 06 	sts	0x0614, r8
    787e:	90 92 15 06 	sts	0x0615, r9
    7882:	a0 92 16 06 	sts	0x0616, r10
    7886:	b0 92 17 06 	sts	0x0617, r11
	RotateVector(theta);
    788a:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <RotateVector>
	VectorX = VectorNewA;
    788e:	80 90 fc 05 	lds	r8, 0x05FC
    7892:	90 90 fd 05 	lds	r9, 0x05FD
    7896:	a0 90 fe 05 	lds	r10, 0x05FE
    789a:	b0 90 ff 05 	lds	r11, 0x05FF
    789e:	80 92 41 05 	sts	0x0541, r8
    78a2:	90 92 42 05 	sts	0x0542, r9
    78a6:	a0 92 43 05 	sts	0x0543, r10
    78aa:	b0 92 44 05 	sts	0x0544, r11
	VectorZ = VectorNewB;
    78ae:	80 91 dc 05 	lds	r24, 0x05DC
    78b2:	90 91 dd 05 	lds	r25, 0x05DD
    78b6:	a0 91 de 05 	lds	r26, 0x05DE
    78ba:	b0 91 df 05 	lds	r27, 0x05DF
    78be:	80 93 00 05 	sts	0x0500, r24
    78c2:	90 93 01 05 	sts	0x0501, r25
    78c6:	a0 93 02 05 	sts	0x0502, r26
    78ca:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(GyroYawVC, intervalf);
    78ce:	60 91 f4 05 	lds	r22, 0x05F4
    78d2:	70 91 f5 05 	lds	r23, 0x05F5
    78d6:	80 91 f6 05 	lds	r24, 0x05F6
    78da:	90 91 f7 05 	lds	r25, 0x05F7
    78de:	a7 01       	movw	r20, r14
    78e0:	96 01       	movw	r18, r12
    78e2:	0e 94 8b 3b 	call	0x7716	; 0x7716 <thetascale>
	VectorA = VectorX;
    78e6:	80 92 10 06 	sts	0x0610, r8
    78ea:	90 92 11 06 	sts	0x0611, r9
    78ee:	a0 92 12 06 	sts	0x0612, r10
    78f2:	b0 92 13 06 	sts	0x0613, r11
	VectorB = VectorY;
    78f6:	c0 90 3d 05 	lds	r12, 0x053D
    78fa:	d0 90 3e 05 	lds	r13, 0x053E
    78fe:	e0 90 3f 05 	lds	r14, 0x053F
    7902:	f0 90 40 05 	lds	r15, 0x0540
    7906:	c0 92 14 06 	sts	0x0614, r12
    790a:	d0 92 15 06 	sts	0x0615, r13
    790e:	e0 92 16 06 	sts	0x0616, r14
    7912:	f0 92 17 06 	sts	0x0617, r15
	RotateVector(theta);
    7916:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <RotateVector>
	VectorX = VectorNewA;
    791a:	80 91 fc 05 	lds	r24, 0x05FC
    791e:	90 91 fd 05 	lds	r25, 0x05FD
    7922:	a0 91 fe 05 	lds	r26, 0x05FE
    7926:	b0 91 ff 05 	lds	r27, 0x05FF
    792a:	80 93 41 05 	sts	0x0541, r24
    792e:	90 93 42 05 	sts	0x0542, r25
    7932:	a0 93 43 05 	sts	0x0543, r26
    7936:	b0 93 44 05 	sts	0x0544, r27
	VectorY = VectorNewB;
    793a:	80 91 dc 05 	lds	r24, 0x05DC
    793e:	90 91 dd 05 	lds	r25, 0x05DD
    7942:	a0 91 de 05 	lds	r26, 0x05DE
    7946:	b0 91 df 05 	lds	r27, 0x05DF
    794a:	80 93 3d 05 	sts	0x053D, r24
    794e:	90 93 3e 05 	sts	0x053E, r25
    7952:	a0 93 3f 05 	sts	0x053F, r26
    7956:	b0 93 40 05 	sts	0x0540, r27
}
    795a:	1f 91       	pop	r17
    795c:	0f 91       	pop	r16
    795e:	ff 90       	pop	r15
    7960:	ef 90       	pop	r14
    7962:	df 90       	pop	r13
    7964:	cf 90       	pop	r12
    7966:	bf 90       	pop	r11
    7968:	af 90       	pop	r10
    796a:	9f 90       	pop	r9
    796c:	8f 90       	pop	r8
    796e:	08 95       	ret

00007970 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    7970:	cf 92       	push	r12
    7972:	df 92       	push	r13
    7974:	ef 92       	push	r14
    7976:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    7978:	20 e0       	ldi	r18, 0x00	; 0
    797a:	30 e0       	ldi	r19, 0x00	; 0
    797c:	44 eb       	ldi	r20, 0xB4	; 180
    797e:	52 e4       	ldi	r21, 0x42	; 66
    7980:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7984:	6b 01       	movw	r12, r22
    7986:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    7988:	20 e0       	ldi	r18, 0x00	; 0
    798a:	30 e0       	ldi	r19, 0x00	; 0
    798c:	a9 01       	movw	r20, r18
    798e:	60 91 00 05 	lds	r22, 0x0500
    7992:	70 91 01 05 	lds	r23, 0x0501
    7996:	80 91 02 05 	lds	r24, 0x0502
    799a:	90 91 03 05 	lds	r25, 0x0503
    799e:	0e 94 70 6a 	call	0xd4e0	; 0xd4e0 <__cmpsf2>
    79a2:	87 ff       	sbrs	r24, 7
    79a4:	18 c0       	rjmp	.+48     	; 0x79d6 <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    79a6:	20 e0       	ldi	r18, 0x00	; 0
    79a8:	30 e0       	ldi	r19, 0x00	; 0
    79aa:	a9 01       	movw	r20, r18
    79ac:	c7 01       	movw	r24, r14
    79ae:	b6 01       	movw	r22, r12
    79b0:	0e 94 bf 6b 	call	0xd77e	; 0xd77e <__gesf2>
		{
			temp = 180 - temp;
    79b4:	a7 01       	movw	r20, r14
    79b6:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    79b8:	18 16       	cp	r1, r24
    79ba:	2c f4       	brge	.+10     	; 0x79c6 <ext2+0x56>
		{
			temp = 180 - temp;
    79bc:	60 e0       	ldi	r22, 0x00	; 0
    79be:	70 e0       	ldi	r23, 0x00	; 0
    79c0:	84 e3       	ldi	r24, 0x34	; 52
    79c2:	93 e4       	ldi	r25, 0x43	; 67
    79c4:	04 c0       	rjmp	.+8      	; 0x79ce <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    79c6:	60 e0       	ldi	r22, 0x00	; 0
    79c8:	70 e0       	ldi	r23, 0x00	; 0
    79ca:	84 e3       	ldi	r24, 0x34	; 52
    79cc:	93 ec       	ldi	r25, 0xC3	; 195
    79ce:	0e 94 0b 6a 	call	0xd416	; 0xd416 <__subsf3>
    79d2:	6b 01       	movw	r12, r22
    79d4:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    79d6:	c7 01       	movw	r24, r14
    79d8:	b6 01       	movw	r22, r12
    79da:	ff 90       	pop	r15
    79dc:	ef 90       	pop	r14
    79de:	df 90       	pop	r13
    79e0:	cf 90       	pop	r12
    79e2:	08 95       	ret

000079e4 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    79e4:	60 91 41 05 	lds	r22, 0x0541
    79e8:	70 91 42 05 	lds	r23, 0x0542
    79ec:	80 91 43 05 	lds	r24, 0x0543
    79f0:	90 91 44 05 	lds	r25, 0x0544
    79f4:	0e 94 b8 3c 	call	0x7970	; 0x7970 <ext2>
    79f8:	60 93 0c 06 	sts	0x060C, r22
    79fc:	70 93 0d 06 	sts	0x060D, r23
    7a00:	80 93 0e 06 	sts	0x060E, r24
    7a04:	90 93 0f 06 	sts	0x060F, r25
	EulerAnglePitch = ext2(VectorY);
    7a08:	60 91 3d 05 	lds	r22, 0x053D
    7a0c:	70 91 3e 05 	lds	r23, 0x053E
    7a10:	80 91 3f 05 	lds	r24, 0x053F
    7a14:	90 91 40 05 	lds	r25, 0x0540
    7a18:	0e 94 b8 3c 	call	0x7970	; 0x7970 <ext2>
    7a1c:	60 93 e0 05 	sts	0x05E0, r22
    7a20:	70 93 e1 05 	sts	0x05E1, r23
    7a24:	80 93 e2 05 	sts	0x05E2, r24
    7a28:	90 93 e3 05 	sts	0x05E3, r25
    7a2c:	08 95       	ret

00007a2e <imu_update>:
//
//************************************************************
//

void imu_update(uint32_t period)
{
    7a2e:	4f 92       	push	r4
    7a30:	5f 92       	push	r5
    7a32:	6f 92       	push	r6
    7a34:	7f 92       	push	r7
    7a36:	8f 92       	push	r8
    7a38:	9f 92       	push	r9
    7a3a:	af 92       	push	r10
    7a3c:	bf 92       	push	r11
    7a3e:	cf 92       	push	r12
    7a40:	df 92       	push	r13
    7a42:	ef 92       	push	r14
    7a44:	ff 92       	push	r15
    7a46:	0f 93       	push	r16
    7a48:	1f 93       	push	r17
    7a4a:	cf 93       	push	r28
    7a4c:	df 93       	push	r29
    7a4e:	cd b7       	in	r28, 0x3d	; 61
    7a50:	de b7       	in	r29, 0x3e	; 62
    7a52:	60 97       	sbiw	r28, 0x10	; 16
    7a54:	0f b6       	in	r0, 0x3f	; 63
    7a56:	f8 94       	cli
    7a58:	de bf       	out	0x3e, r29	; 62
    7a5a:	0f be       	out	0x3f, r0	; 63
    7a5c:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    7a5e:	0e 94 0d 6b 	call	0xd61a	; 0xd61a <__floatunsisf>
    7a62:	69 83       	std	Y+1, r22	; 0x01
    7a64:	7a 83       	std	Y+2, r23	; 0x02
    7a66:	8b 83       	std	Y+3, r24	; 0x03
    7a68:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    7a6a:	20 e8       	ldi	r18, 0x80	; 128
    7a6c:	36 e9       	ldi	r19, 0x96	; 150
    7a6e:	48 e1       	ldi	r20, 0x18	; 24
    7a70:	5a e4       	ldi	r21, 0x4A	; 74
    7a72:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
    7a76:	6d 87       	std	Y+13, r22	; 0x0d
    7a78:	7e 87       	std	Y+14, r23	; 0x0e
    7a7a:	8f 87       	std	Y+15, r24	; 0x0f
    7a7c:	98 8b       	std	Y+16, r25	; 0x10
	//************************************************************
	// Acc LPF
	//************************************************************	

	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    7a7e:	80 91 42 06 	lds	r24, 0x0642
    7a82:	60 91 aa 06 	lds	r22, 0x06AA
    7a86:	82 30       	cpi	r24, 0x02	; 2
    7a88:	39 f0       	breq	.+14     	; 0x7a98 <imu_update+0x6a>
	{
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    7a8a:	84 e0       	ldi	r24, 0x04	; 4
    7a8c:	68 02       	muls	r22, r24
    7a8e:	b0 01       	movw	r22, r0
    7a90:	11 24       	eor	r1, r1
    7a92:	63 58       	subi	r22, 0x83	; 131
    7a94:	7b 4d       	sbci	r23, 0xDB	; 219
    7a96:	06 c0       	rjmp	.+12     	; 0x7aa4 <imu_update+0x76>
	}
	else
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
    7a98:	94 e0       	ldi	r25, 0x04	; 4
    7a9a:	69 02       	muls	r22, r25
    7a9c:	b0 01       	movw	r22, r0
    7a9e:	11 24       	eor	r1, r1
    7aa0:	63 5a       	subi	r22, 0xA3	; 163
    7aa2:	7b 4d       	sbci	r23, 0xDB	; 219
    7aa4:	44 e0       	ldi	r20, 0x04	; 4
    7aa6:	50 e0       	ldi	r21, 0x00	; 0
    7aa8:	ce 01       	movw	r24, r28
    7aaa:	01 96       	adiw	r24, 0x01	; 1
    7aac:	0e 94 c6 6c 	call	0xd98c	; 0xd98c <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    7ab0:	50 90 aa 06 	lds	r5, 0x06AA
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    7ab4:	c9 80       	ldd	r12, Y+1	; 0x01
    7ab6:	da 80       	ldd	r13, Y+2	; 0x02
    7ab8:	eb 80       	ldd	r14, Y+3	; 0x03
    7aba:	fc 80       	ldd	r15, Y+4	; 0x04
    7abc:	23 e7       	ldi	r18, 0x73	; 115
    7abe:	62 2e       	mov	r6, r18
    7ac0:	25 e0       	ldi	r18, 0x05	; 5
    7ac2:	72 2e       	mov	r7, r18
    7ac4:	00 e0       	ldi	r16, 0x00	; 0
    7ac6:	16 e0       	ldi	r17, 0x06	; 6
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    7ac8:	d3 01       	movw	r26, r6
    7aca:	6d 91       	ld	r22, X+
    7acc:	7d 91       	ld	r23, X+
    7ace:	3d 01       	movw	r6, r26
    7ad0:	88 27       	eor	r24, r24
    7ad2:	77 fd       	sbrc	r23, 7
    7ad4:	80 95       	com	r24
    7ad6:	98 2f       	mov	r25, r24
    7ad8:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    7adc:	4b 01       	movw	r8, r22
    7ade:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    7ae0:	b7 e0       	ldi	r27, 0x07	; 7
    7ae2:	5b 16       	cp	r5, r27
    7ae4:	f1 f0       	breq	.+60     	; 0x7b22 <imu_update+0xf4>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    7ae6:	20 e0       	ldi	r18, 0x00	; 0
    7ae8:	30 e0       	ldi	r19, 0x00	; 0
    7aea:	40 e8       	ldi	r20, 0x80	; 128
    7aec:	5f e3       	ldi	r21, 0x3F	; 63
    7aee:	c7 01       	movw	r24, r14
    7af0:	b6 01       	movw	r22, r12
    7af2:	0e 94 0b 6a 	call	0xd416	; 0xd416 <__subsf3>
    7af6:	f8 01       	movw	r30, r16
    7af8:	20 81       	ld	r18, Z
    7afa:	31 81       	ldd	r19, Z+1	; 0x01
    7afc:	42 81       	ldd	r20, Z+2	; 0x02
    7afe:	53 81       	ldd	r21, Z+3	; 0x03
    7b00:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7b04:	a5 01       	movw	r20, r10
    7b06:	94 01       	movw	r18, r8
    7b08:	0e 94 0b 6a 	call	0xd416	; 0xd416 <__subsf3>
    7b0c:	a7 01       	movw	r20, r14
    7b0e:	96 01       	movw	r18, r12
    7b10:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
    7b14:	d8 01       	movw	r26, r16
    7b16:	6d 93       	st	X+, r22
    7b18:	7d 93       	st	X+, r23
    7b1a:	8d 93       	st	X+, r24
    7b1c:	9c 93       	st	X, r25
    7b1e:	13 97       	sbiw	r26, 0x03	; 3
    7b20:	09 c0       	rjmp	.+18     	; 0x7b34 <imu_update+0x106>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    7b22:	b7 fa       	bst	r11, 7
    7b24:	b0 94       	com	r11
    7b26:	b7 f8       	bld	r11, 7
    7b28:	b0 94       	com	r11
    7b2a:	f8 01       	movw	r30, r16
    7b2c:	80 82       	st	Z, r8
    7b2e:	91 82       	std	Z+1, r9	; 0x01
    7b30:	a2 82       	std	Z+2, r10	; 0x02
    7b32:	b3 82       	std	Z+3, r11	; 0x03
    7b34:	0c 5f       	subi	r16, 0xFC	; 252
    7b36:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    7b38:	f9 e7       	ldi	r31, 0x79	; 121
    7b3a:	6f 16       	cp	r6, r31
    7b3c:	f5 e0       	ldi	r31, 0x05	; 5
    7b3e:	7f 06       	cpc	r7, r31
    7b40:	19 f6       	brne	.-122    	; 0x7ac8 <imu_update+0x9a>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    7b42:	23 ec       	ldi	r18, 0xC3	; 195
    7b44:	35 ef       	ldi	r19, 0xF5	; 245
    7b46:	48 e2       	ldi	r20, 0x28	; 40
    7b48:	5f e3       	ldi	r21, 0x3F	; 63
    7b4a:	60 91 00 06 	lds	r22, 0x0600
    7b4e:	70 91 01 06 	lds	r23, 0x0601
    7b52:	80 91 02 06 	lds	r24, 0x0602
    7b56:	90 91 03 06 	lds	r25, 0x0603
    7b5a:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7b5e:	6d 83       	std	Y+5, r22	; 0x05
    7b60:	7e 83       	std	Y+6, r23	; 0x06
    7b62:	8f 83       	std	Y+7, r24	; 0x07
    7b64:	98 87       	std	Y+8, r25	; 0x08
    7b66:	60 93 e4 05 	sts	0x05E4, r22
    7b6a:	70 93 e5 05 	sts	0x05E5, r23
    7b6e:	80 93 e6 05 	sts	0x05E6, r24
    7b72:	90 93 e7 05 	sts	0x05E7, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    7b76:	23 ec       	ldi	r18, 0xC3	; 195
    7b78:	35 ef       	ldi	r19, 0xF5	; 245
    7b7a:	48 e2       	ldi	r20, 0x28	; 40
    7b7c:	5f e3       	ldi	r21, 0x3F	; 63
    7b7e:	60 91 04 06 	lds	r22, 0x0604
    7b82:	70 91 05 06 	lds	r23, 0x0605
    7b86:	80 91 06 06 	lds	r24, 0x0606
    7b8a:	90 91 07 06 	lds	r25, 0x0607
    7b8e:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7b92:	69 87       	std	Y+9, r22	; 0x09
    7b94:	7a 87       	std	Y+10, r23	; 0x0a
    7b96:	8b 87       	std	Y+11, r24	; 0x0b
    7b98:	9c 87       	std	Y+12, r25	; 0x0c
    7b9a:	60 93 e8 05 	sts	0x05E8, r22
    7b9e:	70 93 e9 05 	sts	0x05E9, r23
    7ba2:	80 93 ea 05 	sts	0x05EA, r24
    7ba6:	90 93 eb 05 	sts	0x05EB, r25

	// Alter the gyro sources to the IMU as required.
	// Using gyroADCalt[] always assures that the right gyros are associated with the IMU
	GyroRollVC = gyroADCalt[ROLL];
    7baa:	60 91 d0 05 	lds	r22, 0x05D0
    7bae:	70 91 d1 05 	lds	r23, 0x05D1
    7bb2:	88 27       	eor	r24, r24
    7bb4:	77 fd       	sbrc	r23, 7
    7bb6:	80 95       	com	r24
    7bb8:	98 2f       	mov	r25, r24
    7bba:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    7bbe:	2b 01       	movw	r4, r22
    7bc0:	3c 01       	movw	r6, r24
    7bc2:	60 93 f0 05 	sts	0x05F0, r22
    7bc6:	70 93 f1 05 	sts	0x05F1, r23
    7bca:	80 93 f2 05 	sts	0x05F2, r24
    7bce:	90 93 f3 05 	sts	0x05F3, r25
	GyroPitchVC = gyroADCalt[PITCH];
    7bd2:	60 91 d2 05 	lds	r22, 0x05D2
    7bd6:	70 91 d3 05 	lds	r23, 0x05D3
    7bda:	88 27       	eor	r24, r24
    7bdc:	77 fd       	sbrc	r23, 7
    7bde:	80 95       	com	r24
    7be0:	98 2f       	mov	r25, r24
    7be2:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    7be6:	4b 01       	movw	r8, r22
    7be8:	5c 01       	movw	r10, r24
    7bea:	60 93 ec 05 	sts	0x05EC, r22
    7bee:	70 93 ed 05 	sts	0x05ED, r23
    7bf2:	80 93 ee 05 	sts	0x05EE, r24
    7bf6:	90 93 ef 05 	sts	0x05EF, r25
	GyroYawVC = gyroADCalt[YAW];
    7bfa:	60 91 d4 05 	lds	r22, 0x05D4
    7bfe:	70 91 d5 05 	lds	r23, 0x05D5
    7c02:	88 27       	eor	r24, r24
    7c04:	77 fd       	sbrc	r23, 7
    7c06:	80 95       	com	r24
    7c08:	98 2f       	mov	r25, r24
    7c0a:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    7c0e:	60 93 f4 05 	sts	0x05F4, r22
    7c12:	70 93 f5 05 	sts	0x05F5, r23
    7c16:	80 93 f6 05 	sts	0x05F6, r24
    7c1a:	90 93 f7 05 	sts	0x05F7, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    7c1e:	20 91 73 05 	lds	r18, 0x0573
    7c22:	30 91 74 05 	lds	r19, 0x0574
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    7c26:	40 91 75 05 	lds	r20, 0x0575
    7c2a:	50 91 76 05 	lds	r21, 0x0576
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    7c2e:	e0 91 77 05 	lds	r30, 0x0577
    7c32:	f0 91 78 05 	lds	r31, 0x0578
	GyroPitchVC = gyroADCalt[PITCH];
	GyroYawVC = gyroADCalt[YAW];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    7c36:	44 9f       	mul	r20, r20
    7c38:	60 01       	movw	r12, r0
    7c3a:	45 9f       	mul	r20, r21
    7c3c:	d0 0c       	add	r13, r0
    7c3e:	d0 0c       	add	r13, r0
    7c40:	11 24       	eor	r1, r1
    7c42:	b6 01       	movw	r22, r12
    7c44:	88 27       	eor	r24, r24
    7c46:	77 fd       	sbrc	r23, 7
    7c48:	80 95       	com	r24
    7c4a:	98 2f       	mov	r25, r24
	GyroRollVC = gyroADCalt[ROLL];
	GyroPitchVC = gyroADCalt[PITCH];
	GyroYawVC = gyroADCalt[YAW];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    7c4c:	22 9f       	mul	r18, r18
    7c4e:	a0 01       	movw	r20, r0
    7c50:	23 9f       	mul	r18, r19
    7c52:	50 0d       	add	r21, r0
    7c54:	50 0d       	add	r21, r0
    7c56:	11 24       	eor	r1, r1
    7c58:	8a 01       	movw	r16, r20
    7c5a:	22 27       	eor	r18, r18
    7c5c:	17 fd       	sbrc	r17, 7
    7c5e:	20 95       	com	r18
    7c60:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    7c62:	60 0f       	add	r22, r16
    7c64:	71 1f       	adc	r23, r17
    7c66:	82 1f       	adc	r24, r18
    7c68:	93 1f       	adc	r25, r19
	GyroYawVC = gyroADCalt[YAW];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    7c6a:	ee 9f       	mul	r30, r30
    7c6c:	90 01       	movw	r18, r0
    7c6e:	ef 9f       	mul	r30, r31
    7c70:	30 0d       	add	r19, r0
    7c72:	30 0d       	add	r19, r0
    7c74:	11 24       	eor	r1, r1
    7c76:	89 01       	movw	r16, r18
    7c78:	22 27       	eor	r18, r18
    7c7a:	17 fd       	sbrc	r17, 7
    7c7c:	20 95       	com	r18
    7c7e:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    7c80:	60 0f       	add	r22, r16
    7c82:	71 1f       	adc	r23, r17
    7c84:	82 1f       	adc	r24, r18
    7c86:	93 1f       	adc	r25, r19
	// NB: new dual autolevel code needs acc correction at least temporarily when switching profiles.
	// This is actually a kind of Complementary Filter
	//if ((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5)) // Original code
	
	// New test code - only adjust when in acc mag limits and when upright or dual AL code
	if	(((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5) && (Config.P1_Reference == NO_ORIENT)) || // Same as always when "Same" 
    7c88:	0e 94 0d 6b 	call	0xd61a	; 0xd61a <__floatunsisf>
    7c8c:	6b 01       	movw	r12, r22
    7c8e:	7c 01       	movw	r14, r24
    7c90:	20 e0       	ldi	r18, 0x00	; 0
    7c92:	34 ef       	ldi	r19, 0xF4	; 244
    7c94:	48 e3       	ldi	r20, 0x38	; 56
    7c96:	56 e4       	ldi	r21, 0x46	; 70
    7c98:	0e 94 bf 6b 	call	0xd77e	; 0xd77e <__gesf2>
    7c9c:	18 16       	cp	r1, r24
    7c9e:	f4 f4       	brge	.+60     	; 0x7cdc <imu_update+0x2ae>
    7ca0:	20 e0       	ldi	r18, 0x00	; 0
    7ca2:	38 e4       	ldi	r19, 0x48	; 72
    7ca4:	49 ea       	ldi	r20, 0xA9	; 169
    7ca6:	56 e4       	ldi	r21, 0x46	; 70
    7ca8:	c7 01       	movw	r24, r14
    7caa:	b6 01       	movw	r22, r12
    7cac:	0e 94 70 6a 	call	0xd4e0	; 0xd4e0 <__cmpsf2>
    7cb0:	87 ff       	sbrs	r24, 7
    7cb2:	14 c0       	rjmp	.+40     	; 0x7cdc <imu_update+0x2ae>
    7cb4:	20 e0       	ldi	r18, 0x00	; 0
    7cb6:	30 e0       	ldi	r19, 0x00	; 0
    7cb8:	40 e0       	ldi	r20, 0x00	; 0
    7cba:	5f e3       	ldi	r21, 0x3F	; 63
    7cbc:	60 91 00 05 	lds	r22, 0x0500
    7cc0:	70 91 01 05 	lds	r23, 0x0501
    7cc4:	80 91 02 05 	lds	r24, 0x0502
    7cc8:	90 91 03 05 	lds	r25, 0x0503
    7ccc:	0e 94 bf 6b 	call	0xd77e	; 0xd77e <__gesf2>
    7cd0:	18 16       	cp	r1, r24
    7cd2:	24 f4       	brge	.+8      	; 0x7cdc <imu_update+0x2ae>
    7cd4:	80 91 a4 06 	lds	r24, 0x06A4
    7cd8:	88 23       	and	r24, r24
    7cda:	d1 f0       	breq	.+52     	; 0x7d10 <imu_update+0x2e2>
    7cdc:	20 e0       	ldi	r18, 0x00	; 0
    7cde:	30 ed       	ldi	r19, 0xD0	; 208
    7ce0:	43 e2       	ldi	r20, 0x23	; 35
    7ce2:	55 e4       	ldi	r21, 0x45	; 69
    7ce4:	c7 01       	movw	r24, r14
    7ce6:	b6 01       	movw	r22, r12
    7ce8:	0e 94 bf 6b 	call	0xd77e	; 0xd77e <__gesf2>
    7cec:	18 16       	cp	r1, r24
    7cee:	0c f0       	brlt	.+2      	; 0x7cf2 <imu_update+0x2c4>
    7cf0:	6f c0       	rjmp	.+222    	; 0x7dd0 <imu_update+0x3a2>
		 ((AccMag > acc_0_4G_SQ) && (AccMag < acc_1_6G_SQ) && (Config.P1_Reference != NO_ORIENT))) 
    7cf2:	20 e0       	ldi	r18, 0x00	; 0
    7cf4:	37 ed       	ldi	r19, 0xD7	; 215
    7cf6:	43 e2       	ldi	r20, 0x23	; 35
    7cf8:	57 e4       	ldi	r21, 0x47	; 71
    7cfa:	c7 01       	movw	r24, r14
    7cfc:	b6 01       	movw	r22, r12
    7cfe:	0e 94 70 6a 	call	0xd4e0	; 0xd4e0 <__cmpsf2>
    7d02:	87 ff       	sbrs	r24, 7
    7d04:	65 c0       	rjmp	.+202    	; 0x7dd0 <imu_update+0x3a2>
    7d06:	80 91 a4 06 	lds	r24, 0x06A4
    7d0a:	88 23       	and	r24, r24
    7d0c:	09 f4       	brne	.+2      	; 0x7d10 <imu_update+0x2e2>
    7d0e:	60 c0       	rjmp	.+192    	; 0x7dd0 <imu_update+0x3a2>
	{
		// Default Config.CF_factor is 6 (1 - 10 = 10% to 100%, 6 = 60%)
		tempf = (EulerAngleRoll - AccAngleRoll) / 10;
		tempf = tempf * (12 - Config.CF_factor); 
    7d10:	80 91 ac 06 	lds	r24, 0x06AC
    7d14:	6c e0       	ldi	r22, 0x0C	; 12
    7d16:	70 e0       	ldi	r23, 0x00	; 0
    7d18:	68 1b       	sub	r22, r24
    7d1a:	71 09       	sbc	r23, r1
    7d1c:	87 fd       	sbrc	r24, 7
    7d1e:	73 95       	inc	r23
    7d20:	88 27       	eor	r24, r24
    7d22:	77 fd       	sbrc	r23, 7
    7d24:	80 95       	com	r24
    7d26:	98 2f       	mov	r25, r24
    7d28:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    7d2c:	6b 01       	movw	r12, r22
    7d2e:	7c 01       	movw	r14, r24
	// New test code - only adjust when in acc mag limits and when upright or dual AL code
	if	(((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5) && (Config.P1_Reference == NO_ORIENT)) || // Same as always when "Same" 
		 ((AccMag > acc_0_4G_SQ) && (AccMag < acc_1_6G_SQ) && (Config.P1_Reference != NO_ORIENT))) 
	{
		// Default Config.CF_factor is 6 (1 - 10 = 10% to 100%, 6 = 60%)
		tempf = (EulerAngleRoll - AccAngleRoll) / 10;
    7d30:	2d 81       	ldd	r18, Y+5	; 0x05
    7d32:	3e 81       	ldd	r19, Y+6	; 0x06
    7d34:	4f 81       	ldd	r20, Y+7	; 0x07
    7d36:	58 85       	ldd	r21, Y+8	; 0x08
    7d38:	60 91 0c 06 	lds	r22, 0x060C
    7d3c:	70 91 0d 06 	lds	r23, 0x060D
    7d40:	80 91 0e 06 	lds	r24, 0x060E
    7d44:	90 91 0f 06 	lds	r25, 0x060F
    7d48:	0e 94 0b 6a 	call	0xd416	; 0xd416 <__subsf3>
    7d4c:	20 e0       	ldi	r18, 0x00	; 0
    7d4e:	30 e0       	ldi	r19, 0x00	; 0
    7d50:	40 e2       	ldi	r20, 0x20	; 32
    7d52:	51 e4       	ldi	r21, 0x41	; 65
    7d54:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
		tempf = tempf * (12 - Config.CF_factor); 
    7d58:	a7 01       	movw	r20, r14
    7d5a:	96 01       	movw	r18, r12
    7d5c:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7d60:	9b 01       	movw	r18, r22
    7d62:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    7d64:	c3 01       	movw	r24, r6
    7d66:	b2 01       	movw	r22, r4
    7d68:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    7d6c:	60 93 f0 05 	sts	0x05F0, r22
    7d70:	70 93 f1 05 	sts	0x05F1, r23
    7d74:	80 93 f2 05 	sts	0x05F2, r24
    7d78:	90 93 f3 05 	sts	0x05F3, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) / 10;
    7d7c:	29 85       	ldd	r18, Y+9	; 0x09
    7d7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    7d80:	4b 85       	ldd	r20, Y+11	; 0x0b
    7d82:	5c 85       	ldd	r21, Y+12	; 0x0c
    7d84:	60 91 e0 05 	lds	r22, 0x05E0
    7d88:	70 91 e1 05 	lds	r23, 0x05E1
    7d8c:	80 91 e2 05 	lds	r24, 0x05E2
    7d90:	90 91 e3 05 	lds	r25, 0x05E3
    7d94:	0e 94 0b 6a 	call	0xd416	; 0xd416 <__subsf3>
    7d98:	20 e0       	ldi	r18, 0x00	; 0
    7d9a:	30 e0       	ldi	r19, 0x00	; 0
    7d9c:	40 e2       	ldi	r20, 0x20	; 32
    7d9e:	51 e4       	ldi	r21, 0x41	; 65
    7da0:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
		tempf = tempf * (12 - Config.CF_factor);
    7da4:	a7 01       	movw	r20, r14
    7da6:	96 01       	movw	r18, r12
    7da8:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7dac:	9b 01       	movw	r18, r22
    7dae:	ac 01       	movw	r20, r24
    7db0:	69 83       	std	Y+1, r22	; 0x01
    7db2:	7a 83       	std	Y+2, r23	; 0x02
    7db4:	8b 83       	std	Y+3, r24	; 0x03
    7db6:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    7db8:	c5 01       	movw	r24, r10
    7dba:	b4 01       	movw	r22, r8
    7dbc:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    7dc0:	60 93 ec 05 	sts	0x05EC, r22
    7dc4:	70 93 ed 05 	sts	0x05ED, r23
    7dc8:	80 93 ee 05 	sts	0x05EE, r24
    7dcc:	90 93 ef 05 	sts	0x05EF, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    7dd0:	6d 85       	ldd	r22, Y+13	; 0x0d
    7dd2:	7e 85       	ldd	r23, Y+14	; 0x0e
    7dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    7dd6:	98 89       	ldd	r25, Y+16	; 0x10
    7dd8:	0e 94 c7 3b 	call	0x778e	; 0x778e <Rotate3dVector>
	ExtractEulerAngles();
    7ddc:	0e 94 f2 3c 	call	0x79e4	; 0x79e4 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    7de0:	20 e0       	ldi	r18, 0x00	; 0
    7de2:	30 e0       	ldi	r19, 0x00	; 0
    7de4:	48 ec       	ldi	r20, 0xC8	; 200
    7de6:	52 ec       	ldi	r21, 0xC2	; 194
    7de8:	60 91 0c 06 	lds	r22, 0x060C
    7dec:	70 91 0d 06 	lds	r23, 0x060D
    7df0:	80 91 0e 06 	lds	r24, 0x060E
    7df4:	90 91 0f 06 	lds	r25, 0x060F
    7df8:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7dfc:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    7e00:	70 93 f9 05 	sts	0x05F9, r23
    7e04:	60 93 f8 05 	sts	0x05F8, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    7e08:	20 e0       	ldi	r18, 0x00	; 0
    7e0a:	30 e0       	ldi	r19, 0x00	; 0
    7e0c:	48 ec       	ldi	r20, 0xC8	; 200
    7e0e:	52 ec       	ldi	r21, 0xC2	; 194
    7e10:	60 91 e0 05 	lds	r22, 0x05E0
    7e14:	70 91 e1 05 	lds	r23, 0x05E1
    7e18:	80 91 e2 05 	lds	r24, 0x05E2
    7e1c:	90 91 e3 05 	lds	r25, 0x05E3
    7e20:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    7e24:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    7e28:	70 93 fb 05 	sts	0x05FB, r23
    7e2c:	60 93 fa 05 	sts	0x05FA, r22
}
    7e30:	60 96       	adiw	r28, 0x10	; 16
    7e32:	0f b6       	in	r0, 0x3f	; 63
    7e34:	f8 94       	cli
    7e36:	de bf       	out	0x3e, r29	; 62
    7e38:	0f be       	out	0x3f, r0	; 63
    7e3a:	cd bf       	out	0x3d, r28	; 61
    7e3c:	df 91       	pop	r29
    7e3e:	cf 91       	pop	r28
    7e40:	1f 91       	pop	r17
    7e42:	0f 91       	pop	r16
    7e44:	ff 90       	pop	r15
    7e46:	ef 90       	pop	r14
    7e48:	df 90       	pop	r13
    7e4a:	cf 90       	pop	r12
    7e4c:	bf 90       	pop	r11
    7e4e:	af 90       	pop	r10
    7e50:	9f 90       	pop	r9
    7e52:	8f 90       	pop	r8
    7e54:	7f 90       	pop	r7
    7e56:	6f 90       	pop	r6
    7e58:	5f 90       	pop	r5
    7e5a:	4f 90       	pop	r4
    7e5c:	08 95       	ret

00007e5e <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    7e5e:	10 92 41 05 	sts	0x0541, r1
    7e62:	10 92 42 05 	sts	0x0542, r1
    7e66:	10 92 43 05 	sts	0x0543, r1
    7e6a:	10 92 44 05 	sts	0x0544, r1
	VectorY = 0;
    7e6e:	10 92 3d 05 	sts	0x053D, r1
    7e72:	10 92 3e 05 	sts	0x053E, r1
    7e76:	10 92 3f 05 	sts	0x053F, r1
    7e7a:	10 92 40 05 	sts	0x0540, r1
	VectorZ = 1;
    7e7e:	80 e0       	ldi	r24, 0x00	; 0
    7e80:	90 e0       	ldi	r25, 0x00	; 0
    7e82:	a0 e8       	ldi	r26, 0x80	; 128
    7e84:	bf e3       	ldi	r27, 0x3F	; 63
    7e86:	80 93 00 05 	sts	0x0500, r24
    7e8a:	90 93 01 05 	sts	0x0501, r25
    7e8e:	a0 93 02 05 	sts	0x0502, r26
    7e92:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    7e96:	10 92 10 06 	sts	0x0610, r1
    7e9a:	10 92 11 06 	sts	0x0611, r1
    7e9e:	10 92 12 06 	sts	0x0612, r1
    7ea2:	10 92 13 06 	sts	0x0613, r1
	VectorB = 0;
    7ea6:	10 92 14 06 	sts	0x0614, r1
    7eaa:	10 92 15 06 	sts	0x0615, r1
    7eae:	10 92 16 06 	sts	0x0616, r1
    7eb2:	10 92 17 06 	sts	0x0617, r1
	EulerAngleRoll = 0;
    7eb6:	10 92 0c 06 	sts	0x060C, r1
    7eba:	10 92 0d 06 	sts	0x060D, r1
    7ebe:	10 92 0e 06 	sts	0x060E, r1
    7ec2:	10 92 0f 06 	sts	0x060F, r1
	EulerAnglePitch = 0;
    7ec6:	10 92 e0 05 	sts	0x05E0, r1
    7eca:	10 92 e1 05 	sts	0x05E1, r1
    7ece:	10 92 e2 05 	sts	0x05E2, r1
    7ed2:	10 92 e3 05 	sts	0x05E3, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    7ed6:	10 92 cb 08 	sts	0x08CB, r1
    7eda:	10 92 ca 08 	sts	0x08CA, r1
	TCNT1 = 0;			// TCNT1 current time
    7ede:	10 92 85 00 	sts	0x0085, r1
    7ee2:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    7ee6:	10 92 2f 05 	sts	0x052F, r1
    7eea:	10 92 2e 05 	sts	0x052E, r1
    7eee:	08 95       	ret

00007ef0 <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    7ef0:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    7ef2:	80 e3       	ldi	r24, 0x30	; 48
    7ef4:	81 b9       	out	0x01, r24	; 1
	DDRB		= 0x0A;		// Port B
    7ef6:	8a e0       	ldi	r24, 0x0A	; 10
    7ef8:	84 b9       	out	0x04, r24	; 4
	DDRC		= 0xFC;		// Port C
    7efa:	8c ef       	ldi	r24, 0xFC	; 252
    7efc:	87 b9       	out	0x07, r24	; 7
	DDRD		= 0xF2;		// Port D
    7efe:	82 ef       	ldi	r24, 0xF2	; 242
    7f00:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    7f02:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    7f04:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    7f06:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    7f08:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    7f0a:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    7f0c:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    7f0e:	85 ef       	ldi	r24, 0xF5	; 245
    7f10:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    7f12:	8c e0       	ldi	r24, 0x0C	; 12
    7f14:	89 b9       	out	0x09, r24	; 9
	// 5 low pulses: DSM2 2048/11ms
	// 7 low pulses: DSMX 1024/22ms
	// 9 low pulses: DSMX 2048/11ms
	//***********************************************************

	PIND	= 0x0C;			// Release RX pull up on PD0
    7f16:	89 b9       	out	0x09, r24	; 9
    7f18:	2f e5       	ldi	r18, 0x5F	; 95
    7f1a:	88 ed       	ldi	r24, 0xD8	; 216
    7f1c:	93 e0       	ldi	r25, 0x03	; 3
    7f1e:	21 50       	subi	r18, 0x01	; 1
    7f20:	80 40       	sbci	r24, 0x00	; 0
    7f22:	90 40       	sbci	r25, 0x00	; 0
    7f24:	e1 f7       	brne	.-8      	; 0x7f1e <init+0x2e>
    7f26:	00 c0       	rjmp	.+0      	; 0x7f28 <init+0x38>
    7f28:	00 00       	nop
							// Tweak until bind pulses about 68ms after power-up		
		
	// Bind as master if any single button pressed.
	// NB: Have to wait until the button pull-ups rise before testing for a button press.
	// Button 1
	if ((PINB & 0xf0) == 0x70)
    7f2a:	83 b1       	in	r24, 0x03	; 3
    7f2c:	80 7f       	andi	r24, 0xF0	; 240
    7f2e:	80 37       	cpi	r24, 0x70	; 112
    7f30:	29 f4       	brne	.+10     	; 0x7f3c <init+0x4c>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    7f32:	83 ef       	ldi	r24, 0xF3	; 243
    7f34:	8a b9       	out	0x0a, r24	; 10
		bind_master(3);
    7f36:	83 e0       	ldi	r24, 0x03	; 3
    7f38:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <bind_master>
		
	}
	// Button 2	
	if ((PINB & 0xf0) == 0xb0)
    7f3c:	83 b1       	in	r24, 0x03	; 3
    7f3e:	80 7f       	andi	r24, 0xF0	; 240
    7f40:	80 3b       	cpi	r24, 0xB0	; 176
    7f42:	29 f4       	brne	.+10     	; 0x7f4e <init+0x5e>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    7f44:	83 ef       	ldi	r24, 0xF3	; 243
    7f46:	8a b9       	out	0x0a, r24	; 10
		bind_master(5);
    7f48:	85 e0       	ldi	r24, 0x05	; 5
    7f4a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <bind_master>
	}
	// Button 3	
	if ((PINB & 0xf0) == 0xd0)
    7f4e:	83 b1       	in	r24, 0x03	; 3
    7f50:	80 7f       	andi	r24, 0xF0	; 240
    7f52:	80 3d       	cpi	r24, 0xD0	; 208
    7f54:	29 f4       	brne	.+10     	; 0x7f60 <init+0x70>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    7f56:	83 ef       	ldi	r24, 0xF3	; 243
    7f58:	8a b9       	out	0x0a, r24	; 10
		bind_master(7);
    7f5a:	87 e0       	ldi	r24, 0x07	; 7
    7f5c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <bind_master>
	}
	
	// Button 4
	if ((PINB & 0xf0) == 0xE0)
    7f60:	83 b1       	in	r24, 0x03	; 3
    7f62:	80 7f       	andi	r24, 0xF0	; 240
    7f64:	80 3e       	cpi	r24, 0xE0	; 224
    7f66:	29 f4       	brne	.+10     	; 0x7f72 <init+0x82>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    7f68:	83 ef       	ldi	r24, 0xF3	; 243
    7f6a:	8a b9       	out	0x0a, r24	; 10
		bind_master(9);
    7f6c:	89 e0       	ldi	r24, 0x09	; 9
    7f6e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <bind_master>
	}
	
	DDRD	= 0xF2;			// Reset Port D directions
    7f72:	82 ef       	ldi	r24, 0xF2	; 242
    7f74:	8a b9       	out	0x0a, r24	; 10
	PIND	= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    7f76:	8d e0       	ldi	r24, 0x0D	; 13
    7f78:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    7f7a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    7f7c:	85 e0       	ldi	r24, 0x05	; 5
    7f7e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    7f80:	80 91 6e 00 	lds	r24, 0x006E
    7f84:	81 60       	ori	r24, 0x01	; 1
    7f86:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    7f8a:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    7f8c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    7f90:	80 91 81 00 	lds	r24, 0x0081
    7f94:	82 60       	ori	r24, 0x02	; 2
    7f96:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    7f9a:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    7f9e:	87 e0       	ldi	r24, 0x07	; 7
    7fa0:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    7fa4:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    7fa8:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    7faa:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    7fae:	9a e0       	ldi	r25, 0x0A	; 10
    7fb0:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    7fb4:	9f e0       	ldi	r25, 0x0F	; 15
    7fb6:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    7fb8:	95 e1       	ldi	r25, 0x15	; 21
    7fba:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    7fbe:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    7fc0:	10 92 b7 08 	sts	0x08B7, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    7fc4:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <Initial_EEPROM_Config_Load>
    7fc8:	c8 2f       	mov	r28, r24
    7fca:	20 e0       	ldi	r18, 0x00	; 0
    7fcc:	30 e0       	ldi	r19, 0x00	; 0
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		RxChannel[i] = 3750;
    7fce:	46 ea       	ldi	r20, 0xA6	; 166
    7fd0:	5e e0       	ldi	r21, 0x0E	; 14
    7fd2:	f9 01       	movw	r30, r18
    7fd4:	ee 0f       	add	r30, r30
    7fd6:	ff 1f       	adc	r31, r31
    7fd8:	e9 55       	subi	r30, 0x59	; 89
    7fda:	f7 4f       	sbci	r31, 0xF7	; 247
    7fdc:	51 83       	std	Z+1, r21	; 0x01
    7fde:	40 83       	st	Z, r20
    7fe0:	2f 5f       	subi	r18, 0xFF	; 255
    7fe2:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    7fe4:	28 30       	cpi	r18, 0x08	; 8
    7fe6:	31 05       	cpc	r19, r1
    7fe8:	a1 f7       	brne	.-24     	; 0x7fd2 <init+0xe2>
	{
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    7fea:	24 ec       	ldi	r18, 0xC4	; 196
    7fec:	39 e0       	ldi	r19, 0x09	; 9
    7fee:	30 93 a8 08 	sts	0x08A8, r19
    7ff2:	20 93 a7 08 	sts	0x08A7, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    7ff6:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    7ffa:	0e 94 56 35 	call	0x6aac	; 0x6aac <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    7ffe:	93 b1       	in	r25, 0x03	; 3
    8000:	90 7f       	andi	r25, 0xF0	; 240
    8002:	90 36       	cpi	r25, 0x60	; 96
    8004:	09 f0       	breq	.+2      	; 0x8008 <init+0x118>
    8006:	71 c0       	rjmp	.+226    	; 0x80ea <init+0x1fa>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    8008:	80 ec       	ldi	r24, 0xC0	; 192
    800a:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
		clear_buffer(buffer);
    800e:	80 e0       	ldi	r24, 0x00	; 0
    8010:	91 e0       	ldi	r25, 0x01	; 1
    8012:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    8016:	29 e1       	ldi	r18, 0x19	; 25
    8018:	30 e0       	ldi	r19, 0x00	; 0
    801a:	4a e0       	ldi	r20, 0x0A	; 10
    801c:	50 e0       	ldi	r21, 0x00	; 0
    801e:	6d ec       	ldi	r22, 0xCD	; 205
    8020:	74 e0       	ldi	r23, 0x04	; 4
    8022:	8b e3       	ldi	r24, 0x3B	; 59
    8024:	90 e0       	ldi	r25, 0x00	; 0
    8026:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		write_buffer(buffer);
    802a:	80 e0       	ldi	r24, 0x00	; 0
    802c:	91 e0       	ldi	r25, 0x01	; 1
    802e:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
		clear_buffer(buffer);
    8032:	80 e0       	ldi	r24, 0x00	; 0
    8034:	91 e0       	ldi	r25, 0x01	; 1
    8036:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
    803a:	e2 eb       	ldi	r30, 0xB2	; 178
    803c:	f6 e0       	ldi	r31, 0x06	; 6
    803e:	80 e0       	ldi	r24, 0x00	; 0
    8040:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    8042:	4c ed       	ldi	r20, 0xDC	; 220
    8044:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    8046:	6c e6       	ldi	r22, 0x6C	; 108
    8048:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    804a:	a0 81       	ld	r26, Z
    804c:	9c 01       	movw	r18, r24
    804e:	22 0f       	add	r18, r18
    8050:	33 1f       	adc	r19, r19
    8052:	a2 30       	cpi	r26, 0x02	; 2
    8054:	39 f4       	brne	.+14     	; 0x8064 <init+0x174>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    8056:	d9 01       	movw	r26, r18
    8058:	aa 5a       	subi	r26, 0xAA	; 170
    805a:	b6 4f       	sbci	r27, 0xF6	; 246
    805c:	11 96       	adiw	r26, 0x01	; 1
    805e:	7c 93       	st	X, r23
    8060:	6e 93       	st	-X, r22
    8062:	06 c0       	rjmp	.+12     	; 0x8070 <init+0x180>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    8064:	d9 01       	movw	r26, r18
    8066:	aa 5a       	subi	r26, 0xAA	; 170
    8068:	b6 4f       	sbci	r27, 0xF6	; 246
    806a:	11 96       	adiw	r26, 0x01	; 1
    806c:	5c 93       	st	X, r21
    806e:	4e 93       	st	-X, r20
    8070:	01 96       	adiw	r24, 0x01	; 1
    8072:	b2 96       	adiw	r30, 0x22	; 34
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    8074:	88 30       	cpi	r24, 0x08	; 8
    8076:	91 05       	cpc	r25, r1
    8078:	41 f7       	brne	.-48     	; 0x804a <init+0x15a>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    807a:	83 b1       	in	r24, 0x03	; 3
    807c:	80 7f       	andi	r24, 0xF0	; 240
    807e:	80 36       	cpi	r24, 0x60	; 96
    8080:	79 f4       	brne	.+30     	; 0x80a0 <init+0x1b0>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    8082:	6f ef       	ldi	r22, 0xFF	; 255
    8084:	86 e5       	ldi	r24, 0x56	; 86
    8086:	99 e0       	ldi	r25, 0x09	; 9
    8088:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <output_servo_ppm_asm>
    808c:	2f e7       	ldi	r18, 0x7F	; 127
    808e:	88 e3       	ldi	r24, 0x38	; 56
    8090:	91 e0       	ldi	r25, 0x01	; 1
    8092:	21 50       	subi	r18, 0x01	; 1
    8094:	80 40       	sbci	r24, 0x00	; 0
    8096:	90 40       	sbci	r25, 0x00	; 0
    8098:	e1 f7       	brne	.-8      	; 0x8092 <init+0x1a2>
    809a:	00 c0       	rjmp	.+0      	; 0x809c <init+0x1ac>
    809c:	00 00       	nop
    809e:	ed cf       	rjmp	.-38     	; 0x807a <init+0x18a>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    80a0:	e2 eb       	ldi	r30, 0xB2	; 178
    80a2:	f6 e0       	ldi	r31, 0x06	; 6
    80a4:	80 e0       	ldi	r24, 0x00	; 0
    80a6:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    80a8:	2c e4       	ldi	r18, 0x4C	; 76
    80aa:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    80ac:	40 81       	ld	r20, Z
    80ae:	42 30       	cpi	r20, 0x02	; 2
    80b0:	41 f4       	brne	.+16     	; 0x80c2 <init+0x1d2>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    80b2:	dc 01       	movw	r26, r24
    80b4:	aa 0f       	add	r26, r26
    80b6:	bb 1f       	adc	r27, r27
    80b8:	aa 5a       	subi	r26, 0xAA	; 170
    80ba:	b6 4f       	sbci	r27, 0xF6	; 246
    80bc:	11 96       	adiw	r26, 0x01	; 1
    80be:	3c 93       	st	X, r19
    80c0:	2e 93       	st	-X, r18
    80c2:	01 96       	adiw	r24, 0x01	; 1
    80c4:	b2 96       	adiw	r30, 0x22	; 34
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    80c6:	88 30       	cpi	r24, 0x08	; 8
    80c8:	91 05       	cpc	r25, r1
    80ca:	81 f7       	brne	.-32     	; 0x80ac <init+0x1bc>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    80cc:	6f ef       	ldi	r22, 0xFF	; 255
    80ce:	86 e5       	ldi	r24, 0x56	; 86
    80d0:	99 e0       	ldi	r25, 0x09	; 9
    80d2:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <output_servo_ppm_asm>
    80d6:	2f e7       	ldi	r18, 0x7F	; 127
    80d8:	88 e3       	ldi	r24, 0x38	; 56
    80da:	91 e0       	ldi	r25, 0x01	; 1
    80dc:	21 50       	subi	r18, 0x01	; 1
    80de:	80 40       	sbci	r24, 0x00	; 0
    80e0:	90 40       	sbci	r25, 0x00	; 0
    80e2:	e1 f7       	brne	.-8      	; 0x80dc <init+0x1ec>
    80e4:	00 c0       	rjmp	.+0      	; 0x80e6 <init+0x1f6>
    80e6:	00 00       	nop
    80e8:	f1 cf       	rjmp	.-30     	; 0x80cc <init+0x1dc>
    80ea:	2f e7       	ldi	r18, 0x7F	; 127
    80ec:	8f e4       	ldi	r24, 0x4F	; 79
    80ee:	92 e1       	ldi	r25, 0x12	; 18
    80f0:	21 50       	subi	r18, 0x01	; 1
    80f2:	80 40       	sbci	r24, 0x00	; 0
    80f4:	90 40       	sbci	r25, 0x00	; 0
    80f6:	e1 f7       	brne	.-8      	; 0x80f0 <init+0x200>
    80f8:	00 c0       	rjmp	.+0      	; 0x80fa <init+0x20a>
    80fa:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    80fc:	93 b1       	in	r25, 0x03	; 3
    80fe:	90 7f       	andi	r25, 0xF0	; 240
    8100:	90 39       	cpi	r25, 0x90	; 144
    8102:	51 f5       	brne	.+84     	; 0x8158 <init+0x268>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    8104:	80 ec       	ldi	r24, 0xC0	; 192
    8106:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
		clear_buffer(buffer);
    810a:	80 e0       	ldi	r24, 0x00	; 0
    810c:	91 e0       	ldi	r25, 0x01	; 1
    810e:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    8112:	29 e1       	ldi	r18, 0x19	; 25
    8114:	30 e0       	ldi	r19, 0x00	; 0
    8116:	48 e2       	ldi	r20, 0x28	; 40
    8118:	50 e0       	ldi	r21, 0x00	; 0
    811a:	6d ec       	ldi	r22, 0xCD	; 205
    811c:	74 e0       	ldi	r23, 0x04	; 4
    811e:	86 e0       	ldi	r24, 0x06	; 6
    8120:	91 e0       	ldi	r25, 0x01	; 1
    8122:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		write_buffer(buffer);
    8126:	80 e0       	ldi	r24, 0x00	; 0
    8128:	91 e0       	ldi	r25, 0x01	; 1
    812a:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
		clear_buffer(buffer);
    812e:	80 e0       	ldi	r24, 0x00	; 0
    8130:	91 e0       	ldi	r25, 0x01	; 1
    8132:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    8136:	0e 94 ce 2c 	call	0x599c	; 0x599c <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    813a:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    813e:	80 91 a5 06 	lds	r24, 0x06A5
    8142:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <st7565_set_brightness>
    8146:	2f e7       	ldi	r18, 0x7F	; 127
    8148:	84 e8       	ldi	r24, 0x84	; 132
    814a:	9e e1       	ldi	r25, 0x1E	; 30
    814c:	21 50       	subi	r18, 0x01	; 1
    814e:	80 40       	sbci	r24, 0x00	; 0
    8150:	90 40       	sbci	r25, 0x00	; 0
    8152:	e1 f7       	brne	.-8      	; 0x814c <init+0x25c>
    8154:	00 c0       	rjmp	.+0      	; 0x8156 <init+0x266>
    8156:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    8158:	cc 23       	and	r28, r28
    815a:	21 f1       	breq	.+72     	; 0x81a4 <init+0x2b4>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    815c:	80 ec       	ldi	r24, 0xC0	; 192
    815e:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
		clear_buffer(buffer);
    8162:	80 e0       	ldi	r24, 0x00	; 0
    8164:	91 e0       	ldi	r25, 0x01	; 1
    8166:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    816a:	2d e0       	ldi	r18, 0x0D	; 13
    816c:	30 e0       	ldi	r19, 0x00	; 0
    816e:	4e e1       	ldi	r20, 0x1E	; 30
    8170:	50 e0       	ldi	r21, 0x00	; 0
    8172:	6d ec       	ldi	r22, 0xCD	; 205
    8174:	74 e0       	ldi	r23, 0x04	; 4
    8176:	83 e0       	ldi	r24, 0x03	; 3
    8178:	91 e0       	ldi	r25, 0x01	; 1
    817a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    817e:	25 e2       	ldi	r18, 0x25	; 37
    8180:	30 e0       	ldi	r19, 0x00	; 0
    8182:	41 e2       	ldi	r20, 0x21	; 33
    8184:	50 e0       	ldi	r21, 0x00	; 0
    8186:	6d ec       	ldi	r22, 0xCD	; 205
    8188:	74 e0       	ldi	r23, 0x04	; 4
    818a:	84 e0       	ldi	r24, 0x04	; 4
    818c:	91 e0       	ldi	r25, 0x01	; 1
    818e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		write_buffer(buffer);
    8192:	80 e0       	ldi	r24, 0x00	; 0
    8194:	91 e0       	ldi	r25, 0x01	; 1
    8196:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
		clear_buffer(buffer);		
    819a:	80 e0       	ldi	r24, 0x00	; 0
    819c:	91 e0       	ldi	r25, 0x01	; 1
    819e:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
    81a2:	04 c0       	rjmp	.+8      	; 0x81ac <init+0x2bc>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    81a4:	80 e0       	ldi	r24, 0x00	; 0
    81a6:	91 e0       	ldi	r25, 0x01	; 1
    81a8:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
    81ac:	2f ef       	ldi	r18, 0xFF	; 255
    81ae:	88 e0       	ldi	r24, 0x08	; 8
    81b0:	9d e3       	ldi	r25, 0x3D	; 61
    81b2:	21 50       	subi	r18, 0x01	; 1
    81b4:	80 40       	sbci	r24, 0x00	; 0
    81b6:	90 40       	sbci	r25, 0x00	; 0
    81b8:	e1 f7       	brne	.-8      	; 0x81b2 <init+0x2c2>
    81ba:	00 c0       	rjmp	.+0      	; 0x81bc <init+0x2cc>
    81bc:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    81be:	80 e0       	ldi	r24, 0x00	; 0
    81c0:	91 e0       	ldi	r25, 0x01	; 1
    81c2:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
	write_buffer(buffer);
    81c6:	80 e0       	ldi	r24, 0x00	; 0
    81c8:	91 e0       	ldi	r25, 0x01	; 1
    81ca:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    81ce:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    81d2:	0e 94 8a 68 	call	0xd114	; 0xd114 <i2c_init>
	init_i2c_gyros();
    81d6:	0e 94 8a 3a 	call	0x7514	; 0x7514 <init_i2c_gyros>
	init_i2c_accs();
    81da:	0e 94 93 1b 	call	0x3726	; 0x3726 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    81de:	80 e0       	ldi	r24, 0x00	; 0
    81e0:	91 e0       	ldi	r25, 0x01	; 1
    81e2:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    81e6:	80 ec       	ldi	r24, 0xC0	; 192
    81e8:	0e 94 ed 34 	call	0x69da	; 0x69da <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    81ec:	29 e1       	ldi	r18, 0x19	; 25
    81ee:	30 e0       	ldi	r19, 0x00	; 0
    81f0:	42 e1       	ldi	r20, 0x12	; 18
    81f2:	50 e0       	ldi	r21, 0x00	; 0
    81f4:	6d ec       	ldi	r22, 0xCD	; 205
    81f6:	74 e0       	ldi	r23, 0x04	; 4
    81f8:	87 e0       	ldi	r24, 0x07	; 7
    81fa:	91 e0       	ldi	r25, 0x01	; 1
    81fc:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
	write_buffer(buffer);	
    8200:	80 e0       	ldi	r24, 0x00	; 0
    8202:	91 e0       	ldi	r25, 0x01	; 1
    8204:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
	clear_buffer(buffer);
    8208:	80 e0       	ldi	r24, 0x00	; 0
    820a:	91 e0       	ldi	r25, 0x01	; 1
    820c:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    8210:	0e 94 9d 1b 	call	0x373a	; 0x373a <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    8214:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <init_int>
	init_uart();							// Initialise UART
    8218:	0e 94 6f 69 	call	0xd2de	; 0xd2de <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    821c:	0e 94 ad 39 	call	0x735a	; 0x735a <CalibrateGyrosSlow>
    8220:	81 11       	cpse	r24, r1
    8222:	28 c0       	rjmp	.+80     	; 0x8274 <init+0x384>
	{
		clear_buffer(buffer);
    8224:	80 e0       	ldi	r24, 0x00	; 0
    8226:	91 e0       	ldi	r25, 0x01	; 1
    8228:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    822c:	29 e1       	ldi	r18, 0x19	; 25
    822e:	30 e0       	ldi	r19, 0x00	; 0
    8230:	49 e1       	ldi	r20, 0x19	; 25
    8232:	50 e0       	ldi	r21, 0x00	; 0
    8234:	6d ec       	ldi	r22, 0xCD	; 205
    8236:	74 e0       	ldi	r23, 0x04	; 4
    8238:	8d e3       	ldi	r24, 0x3D	; 61
    823a:	90 e0       	ldi	r25, 0x00	; 0
    823c:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		write_buffer(buffer);
    8240:	80 e0       	ldi	r24, 0x00	; 0
    8242:	91 e0       	ldi	r25, 0x01	; 1
    8244:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
    8248:	2f ef       	ldi	r18, 0xFF	; 255
    824a:	88 e0       	ldi	r24, 0x08	; 8
    824c:	9d e3       	ldi	r25, 0x3D	; 61
    824e:	21 50       	subi	r18, 0x01	; 1
    8250:	80 40       	sbci	r24, 0x00	; 0
    8252:	90 40       	sbci	r25, 0x00	; 0
    8254:	e1 f7       	brne	.-8      	; 0x824e <init+0x35e>
    8256:	00 c0       	rjmp	.+0      	; 0x8258 <init+0x368>
    8258:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    825a:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    825c:	28 e0       	ldi	r18, 0x08	; 8
    825e:	88 e1       	ldi	r24, 0x18	; 24
    8260:	90 e0       	ldi	r25, 0x00	; 0
    8262:	0f b6       	in	r0, 0x3f	; 63
    8264:	f8 94       	cli
    8266:	a8 95       	wdr
    8268:	80 93 60 00 	sts	0x0060, r24
    826c:	0f be       	out	0x3f, r0	; 63
    826e:	20 93 60 00 	sts	0x0060, r18
    8272:	ff cf       	rjmp	.-2      	; 0x8272 <init+0x382>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    8274:	0e 94 ec 69 	call	0xd3d8	; 0xd3d8 <GetVbat>
    8278:	90 93 46 05 	sts	0x0546, r25
    827c:	80 93 45 05 	sts	0x0545, r24
	UpdateLimits();							// Update travel and trigger limits
    8280:	0e 94 58 55 	call	0xaab0	; 0xaab0 <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    8284:	80 91 a6 06 	lds	r24, 0x06A6
    8288:	81 30       	cpi	r24, 0x01	; 1
    828a:	29 f4       	brne	.+10     	; 0x8296 <init+0x3a6>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    828c:	80 91 34 05 	lds	r24, 0x0534
    8290:	84 60       	ori	r24, 0x04	; 4
    8292:	80 93 34 05 	sts	0x0534, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    8296:	80 91 b7 08 	lds	r24, 0x08B7
    829a:	88 23       	and	r24, r24
    829c:	69 f0       	breq	.+26     	; 0x82b8 <init+0x3c8>
	{
		RxGetChannels();
    829e:	0e 94 bc 66 	call	0xcd78	; 0xcd78 <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE) // THROTTLEIDLE = 50
    82a2:	80 91 42 09 	lds	r24, 0x0942
    82a6:	90 91 43 09 	lds	r25, 0x0943
    82aa:	c3 97       	sbiw	r24, 0x33	; 51
    82ac:	2c f0       	brlt	.+10     	; 0x82b8 <init+0x3c8>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    82ae:	80 91 34 05 	lds	r24, 0x0534
    82b2:	81 60       	ori	r24, 0x01	; 1
    82b4:	80 93 34 05 	sts	0x0534, r24
		}
	}

	// Reset IMU
	reset_IMU();
    82b8:	0e 94 2f 3f 	call	0x7e5e	; 0x7e5e <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    82bc:	29 9a       	sbi	0x05, 1	; 5
    82be:	2f e9       	ldi	r18, 0x9F	; 159
    82c0:	86 e8       	ldi	r24, 0x86	; 134
    82c2:	91 e0       	ldi	r25, 0x01	; 1
    82c4:	21 50       	subi	r18, 0x01	; 1
    82c6:	80 40       	sbci	r24, 0x00	; 0
    82c8:	90 40       	sbci	r25, 0x00	; 0
    82ca:	e1 f7       	brne	.-8      	; 0x82c4 <init+0x3d4>
    82cc:	00 c0       	rjmp	.+0      	; 0x82ce <init+0x3de>
    82ce:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    82d0:	29 98       	cbi	0x05, 1	; 5

#ifdef ERROR_LOG	
	// Log reboot
	add_log(REBOOT);
#endif
} // init()
    82d2:	cf 91       	pop	r28
    82d4:	08 95       	ret

000082d6 <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    82d6:	1f 92       	push	r1
    82d8:	0f 92       	push	r0
    82da:	0f b6       	in	r0, 0x3f	; 63
    82dc:	0f 92       	push	r0
    82de:	11 24       	eor	r1, r1
    82e0:	8f 93       	push	r24
    82e2:	9f 93       	push	r25
	TMR0_counter++;
    82e4:	80 91 ca 08 	lds	r24, 0x08CA
    82e8:	90 91 cb 08 	lds	r25, 0x08CB
    82ec:	01 96       	adiw	r24, 0x01	; 1
    82ee:	90 93 cb 08 	sts	0x08CB, r25
    82f2:	80 93 ca 08 	sts	0x08CA, r24
}
    82f6:	9f 91       	pop	r25
    82f8:	8f 91       	pop	r24
    82fa:	0f 90       	pop	r0
    82fc:	0f be       	out	0x3f, r0	; 63
    82fe:	0f 90       	pop	r0
    8300:	1f 90       	pop	r1
    8302:	18 95       	reti

00008304 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    8304:	1f 92       	push	r1
    8306:	0f 92       	push	r0
    8308:	0f b6       	in	r0, 0x3f	; 63
    830a:	0f 92       	push	r0
    830c:	11 24       	eor	r1, r1
    830e:	2f 93       	push	r18
    8310:	3f 93       	push	r19
    8312:	8f 93       	push	r24
    8314:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    8316:	80 91 e2 08 	lds	r24, 0x08E2
    831a:	88 23       	and	r24, r24
    831c:	19 f0       	breq	.+6      	; 0x8324 <__vector_2+0x20>
    831e:	81 e0       	ldi	r24, 0x01	; 1
    8320:	80 93 e3 08 	sts	0x08E3, r24

	if (RX_ROLL)	// Rising
    8324:	4b 9b       	sbis	0x09, 3	; 9
    8326:	09 c0       	rjmp	.+18     	; 0x833a <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    8328:	80 91 84 00 	lds	r24, 0x0084
    832c:	90 91 85 00 	lds	r25, 0x0085
    8330:	90 93 cf 08 	sts	0x08CF, r25
    8334:	80 93 ce 08 	sts	0x08CE, r24
    8338:	1e c0       	rjmp	.+60     	; 0x8376 <__vector_2+0x72>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    833a:	80 91 84 00 	lds	r24, 0x0084
    833e:	90 91 85 00 	lds	r25, 0x0085
    8342:	20 91 ce 08 	lds	r18, 0x08CE
    8346:	30 91 cf 08 	lds	r19, 0x08CF
    834a:	82 1b       	sub	r24, r18
    834c:	93 0b       	sbc	r25, r19
    834e:	90 93 aa 08 	sts	0x08AA, r25
    8352:	80 93 a9 08 	sts	0x08A9, r24
		if (Config.PWM_Sync == AILERON) 
    8356:	80 91 43 06 	lds	r24, 0x0643
    835a:	81 30       	cpi	r24, 0x01	; 1
    835c:	61 f4       	brne	.+24     	; 0x8376 <__vector_2+0x72>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    835e:	80 93 b7 08 	sts	0x08B7, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    8362:	80 91 b2 00 	lds	r24, 0x00B2
    8366:	80 93 2b 05 	sts	0x052B, r24
			RC_Timeout = 0;
    836a:	10 92 2a 05 	sts	0x052A, r1
    836e:	10 92 29 05 	sts	0x0529, r1
			Overdue = false;
    8372:	10 92 2d 05 	sts	0x052D, r1
		}
	}
}
    8376:	9f 91       	pop	r25
    8378:	8f 91       	pop	r24
    837a:	3f 91       	pop	r19
    837c:	2f 91       	pop	r18
    837e:	0f 90       	pop	r0
    8380:	0f be       	out	0x3f, r0	; 63
    8382:	0f 90       	pop	r0
    8384:	1f 90       	pop	r1
    8386:	18 95       	reti

00008388 <__vector_1>:

ISR(INT0_vect)
{
    8388:	1f 92       	push	r1
    838a:	0f 92       	push	r0
    838c:	0f b6       	in	r0, 0x3f	; 63
    838e:	0f 92       	push	r0
    8390:	11 24       	eor	r1, r1
    8392:	2f 93       	push	r18
    8394:	3f 93       	push	r19
    8396:	8f 93       	push	r24
    8398:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    839a:	80 91 e2 08 	lds	r24, 0x08E2
    839e:	88 23       	and	r24, r24
    83a0:	19 f0       	breq	.+6      	; 0x83a8 <__vector_1+0x20>
    83a2:	81 e0       	ldi	r24, 0x01	; 1
    83a4:	80 93 e3 08 	sts	0x08E3, r24

	if (RX_PITCH)	// Rising 
    83a8:	4a 9b       	sbis	0x09, 2	; 9
    83aa:	09 c0       	rjmp	.+18     	; 0x83be <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    83ac:	80 91 84 00 	lds	r24, 0x0084
    83b0:	90 91 85 00 	lds	r25, 0x0085
    83b4:	90 93 d1 08 	sts	0x08D1, r25
    83b8:	80 93 d0 08 	sts	0x08D0, r24
    83bc:	1f c0       	rjmp	.+62     	; 0x83fc <__vector_1+0x74>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    83be:	80 91 84 00 	lds	r24, 0x0084
    83c2:	90 91 85 00 	lds	r25, 0x0085
    83c6:	20 91 d0 08 	lds	r18, 0x08D0
    83ca:	30 91 d1 08 	lds	r19, 0x08D1
    83ce:	82 1b       	sub	r24, r18
    83d0:	93 0b       	sbc	r25, r19
    83d2:	90 93 ac 08 	sts	0x08AC, r25
    83d6:	80 93 ab 08 	sts	0x08AB, r24
		if (Config.PWM_Sync == ELEVATOR) 
    83da:	80 91 43 06 	lds	r24, 0x0643
    83de:	82 30       	cpi	r24, 0x02	; 2
    83e0:	69 f4       	brne	.+26     	; 0x83fc <__vector_1+0x74>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    83e2:	81 e0       	ldi	r24, 0x01	; 1
    83e4:	80 93 b7 08 	sts	0x08B7, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    83e8:	80 91 b2 00 	lds	r24, 0x00B2
    83ec:	80 93 2b 05 	sts	0x052B, r24
			RC_Timeout = 0;
    83f0:	10 92 2a 05 	sts	0x052A, r1
    83f4:	10 92 29 05 	sts	0x0529, r1
			Overdue = false;
    83f8:	10 92 2d 05 	sts	0x052D, r1
		}
	}
}
    83fc:	9f 91       	pop	r25
    83fe:	8f 91       	pop	r24
    8400:	3f 91       	pop	r19
    8402:	2f 91       	pop	r18
    8404:	0f 90       	pop	r0
    8406:	0f be       	out	0x3f, r0	; 63
    8408:	0f 90       	pop	r0
    840a:	1f 90       	pop	r1
    840c:	18 95       	reti

0000840e <__vector_7>:

ISR(PCINT3_vect)
{
    840e:	1f 92       	push	r1
    8410:	0f 92       	push	r0
    8412:	0f b6       	in	r0, 0x3f	; 63
    8414:	0f 92       	push	r0
    8416:	11 24       	eor	r1, r1
    8418:	2f 93       	push	r18
    841a:	3f 93       	push	r19
    841c:	8f 93       	push	r24
    841e:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    8420:	80 91 e2 08 	lds	r24, 0x08E2
    8424:	88 23       	and	r24, r24
    8426:	19 f0       	breq	.+6      	; 0x842e <__vector_7+0x20>
    8428:	81 e0       	ldi	r24, 0x01	; 1
    842a:	80 93 e3 08 	sts	0x08E3, r24
		
	if (RX_COLL)	// Rising
    842e:	48 9b       	sbis	0x09, 0	; 9
    8430:	09 c0       	rjmp	.+18     	; 0x8444 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    8432:	80 91 84 00 	lds	r24, 0x0084
    8436:	90 91 85 00 	lds	r25, 0x0085
    843a:	90 93 cd 08 	sts	0x08CD, r25
    843e:	80 93 cc 08 	sts	0x08CC, r24
    8442:	1f c0       	rjmp	.+62     	; 0x8482 <__vector_7+0x74>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    8444:	80 91 84 00 	lds	r24, 0x0084
    8448:	90 91 85 00 	lds	r25, 0x0085
    844c:	20 91 cc 08 	lds	r18, 0x08CC
    8450:	30 91 cd 08 	lds	r19, 0x08CD
    8454:	82 1b       	sub	r24, r18
    8456:	93 0b       	sbc	r25, r19
    8458:	90 93 a8 08 	sts	0x08A8, r25
    845c:	80 93 a7 08 	sts	0x08A7, r24
		if (Config.PWM_Sync == THROTTLE) 
    8460:	80 91 43 06 	lds	r24, 0x0643
    8464:	81 11       	cpse	r24, r1
    8466:	0d c0       	rjmp	.+26     	; 0x8482 <__vector_7+0x74>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    8468:	81 e0       	ldi	r24, 0x01	; 1
    846a:	80 93 b7 08 	sts	0x08B7, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    846e:	80 91 b2 00 	lds	r24, 0x00B2
    8472:	80 93 2b 05 	sts	0x052B, r24
			RC_Timeout = 0;
    8476:	10 92 2a 05 	sts	0x052A, r1
    847a:	10 92 29 05 	sts	0x0529, r1
			Overdue = false;
    847e:	10 92 2d 05 	sts	0x052D, r1
		}
	}
}
    8482:	9f 91       	pop	r25
    8484:	8f 91       	pop	r24
    8486:	3f 91       	pop	r19
    8488:	2f 91       	pop	r18
    848a:	0f 90       	pop	r0
    848c:	0f be       	out	0x3f, r0	; 63
    848e:	0f 90       	pop	r0
    8490:	1f 90       	pop	r1
    8492:	18 95       	reti

00008494 <__vector_5>:


ISR(PCINT1_vect)
{
    8494:	1f 92       	push	r1
    8496:	0f 92       	push	r0
    8498:	0f b6       	in	r0, 0x3f	; 63
    849a:	0f 92       	push	r0
    849c:	11 24       	eor	r1, r1
    849e:	2f 93       	push	r18
    84a0:	3f 93       	push	r19
    84a2:	8f 93       	push	r24
    84a4:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    84a6:	80 91 e2 08 	lds	r24, 0x08E2
    84aa:	88 23       	and	r24, r24
    84ac:	19 f0       	breq	.+6      	; 0x84b4 <__vector_5+0x20>
    84ae:	81 e0       	ldi	r24, 0x01	; 1
    84b0:	80 93 e3 08 	sts	0x08E3, r24

	if (RX_AUX)	// Rising
    84b4:	18 9b       	sbis	0x03, 0	; 3
    84b6:	09 c0       	rjmp	.+18     	; 0x84ca <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    84b8:	80 91 84 00 	lds	r24, 0x0084
    84bc:	90 91 85 00 	lds	r25, 0x0085
    84c0:	90 93 d5 08 	sts	0x08D5, r25
    84c4:	80 93 d4 08 	sts	0x08D4, r24
    84c8:	1f c0       	rjmp	.+62     	; 0x8508 <__vector_5+0x74>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    84ca:	80 91 84 00 	lds	r24, 0x0084
    84ce:	90 91 85 00 	lds	r25, 0x0085
    84d2:	20 91 d4 08 	lds	r18, 0x08D4
    84d6:	30 91 d5 08 	lds	r19, 0x08D5
    84da:	82 1b       	sub	r24, r18
    84dc:	93 0b       	sbc	r25, r19
    84de:	90 93 b0 08 	sts	0x08B0, r25
    84e2:	80 93 af 08 	sts	0x08AF, r24
		if (Config.PWM_Sync == GEAR) 
    84e6:	80 91 43 06 	lds	r24, 0x0643
    84ea:	84 30       	cpi	r24, 0x04	; 4
    84ec:	69 f4       	brne	.+26     	; 0x8508 <__vector_5+0x74>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    84ee:	81 e0       	ldi	r24, 0x01	; 1
    84f0:	80 93 b7 08 	sts	0x08B7, r24
			Servo_TCNT2 = TCNT2;					// Reset signal loss timer and Overdue state 
    84f4:	80 91 b2 00 	lds	r24, 0x00B2
    84f8:	80 93 2b 05 	sts	0x052B, r24
			RC_Timeout = 0;
    84fc:	10 92 2a 05 	sts	0x052A, r1
    8500:	10 92 29 05 	sts	0x0529, r1
			Overdue = false;
    8504:	10 92 2d 05 	sts	0x052D, r1
		}
	}
}
    8508:	9f 91       	pop	r25
    850a:	8f 91       	pop	r24
    850c:	3f 91       	pop	r19
    850e:	2f 91       	pop	r18
    8510:	0f 90       	pop	r0
    8512:	0f be       	out	0x3f, r0	; 63
    8514:	0f 90       	pop	r0
    8516:	1f 90       	pop	r1
    8518:	18 95       	reti

0000851a <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    851a:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    851c:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    851e:	80 91 84 00 	lds	r24, 0x0084
    8522:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    8526:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    8528:	08 95       	ret

0000852a <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    852a:	1f 92       	push	r1
    852c:	0f 92       	push	r0
    852e:	0f b6       	in	r0, 0x3f	; 63
    8530:	0f 92       	push	r0
    8532:	11 24       	eor	r1, r1
    8534:	2f 93       	push	r18
    8536:	3f 93       	push	r19
    8538:	4f 93       	push	r20
    853a:	5f 93       	push	r21
    853c:	6f 93       	push	r22
    853e:	7f 93       	push	r23
    8540:	8f 93       	push	r24
    8542:	9f 93       	push	r25
    8544:	af 93       	push	r26
    8546:	bf 93       	push	r27
    8548:	ef 93       	push	r30
    854a:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    854c:	80 91 e2 08 	lds	r24, 0x08E2
    8550:	88 23       	and	r24, r24
    8552:	19 f0       	breq	.+6      	; 0x855a <__vector_3+0x30>
    8554:	81 e0       	ldi	r24, 0x01	; 1
    8556:	80 93 e3 08 	sts	0x08E3, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    855a:	0e 94 8d 42 	call	0x851a	; 0x851a <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    855e:	20 91 41 06 	lds	r18, 0x0641
    8562:	22 23       	and	r18, r18
    8564:	11 f1       	breq	.+68     	; 0x85aa <__vector_3+0x80>
	{
		if (RX_YAW)	// Rising
    8566:	1a 9b       	sbis	0x03, 2	; 3
    8568:	05 c0       	rjmp	.+10     	; 0x8574 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    856a:	90 93 d3 08 	sts	0x08D3, r25
    856e:	80 93 d2 08 	sts	0x08D2, r24
    8572:	98 c0       	rjmp	.+304    	; 0x86a4 <__vector_3+0x17a>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    8574:	20 91 d2 08 	lds	r18, 0x08D2
    8578:	30 91 d3 08 	lds	r19, 0x08D3
    857c:	82 1b       	sub	r24, r18
    857e:	93 0b       	sbc	r25, r19
    8580:	90 93 ae 08 	sts	0x08AE, r25
    8584:	80 93 ad 08 	sts	0x08AD, r24
			if (Config.PWM_Sync == RUDDER) 
    8588:	80 91 43 06 	lds	r24, 0x0643
    858c:	83 30       	cpi	r24, 0x03	; 3
    858e:	09 f0       	breq	.+2      	; 0x8592 <__vector_3+0x68>
    8590:	89 c0       	rjmp	.+274    	; 0x86a4 <__vector_3+0x17a>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    8592:	81 e0       	ldi	r24, 0x01	; 1
    8594:	80 93 b7 08 	sts	0x08B7, r24
				Servo_TCNT2 = TCNT2;				// Reset signal loss timer and Overdue state 
    8598:	80 91 b2 00 	lds	r24, 0x00B2
    859c:	80 93 2b 05 	sts	0x052B, r24
				RC_Timeout = 0;
    85a0:	10 92 2a 05 	sts	0x052A, r1
    85a4:	10 92 29 05 	sts	0x0529, r1
    85a8:	7b c0       	rjmp	.+246    	; 0x86a0 <__vector_3+0x176>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    85aa:	1a 99       	sbic	0x03, 2	; 3
    85ac:	7b c0       	rjmp	.+246    	; 0x86a4 <__vector_3+0x17a>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    85ae:	20 91 e0 08 	lds	r18, 0x08E0
    85b2:	30 91 e1 08 	lds	r19, 0x08E1
    85b6:	ac 01       	movw	r20, r24
    85b8:	42 1b       	sub	r20, r18
    85ba:	53 0b       	sbc	r21, r19
    85bc:	9a 01       	movw	r18, r20
    85be:	2f 35       	cpi	r18, 0x5F	; 95
    85c0:	3a 41       	sbci	r19, 0x1A	; 26
    85c2:	58 f4       	brcc	.+22     	; 0x85da <__vector_3+0xb0>
    85c4:	20 91 e0 08 	lds	r18, 0x08E0
    85c8:	30 91 e1 08 	lds	r19, 0x08E1
    85cc:	ac 01       	movw	r20, r24
    85ce:	42 1b       	sub	r20, r18
    85d0:	53 0b       	sbc	r21, r19
    85d2:	9a 01       	movw	r18, r20
    85d4:	2e 3e       	cpi	r18, 0xEE	; 238
    85d6:	32 40       	sbci	r19, 0x02	; 2
    85d8:	10 f4       	brcc	.+4      	; 0x85de <__vector_3+0xb4>
		{
			ch_num = 0;
    85da:	10 92 df 08 	sts	0x08DF, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    85de:	90 93 e1 08 	sts	0x08E1, r25
    85e2:	80 93 e0 08 	sts	0x08E0, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    85e6:	e0 91 df 08 	lds	r30, 0x08DF
    85ea:	f0 e0       	ldi	r31, 0x00	; 0
    85ec:	e8 5e       	subi	r30, 0xE8	; 232
    85ee:	f9 4f       	sbci	r31, 0xF9	; 249
    85f0:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    85f2:	20 91 df 08 	lds	r18, 0x08DF
    85f6:	22 23       	and	r18, r18
    85f8:	39 f0       	breq	.+14     	; 0x8608 <__vector_3+0xde>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    85fa:	a0 91 df 08 	lds	r26, 0x08DF
    85fe:	b0 e0       	ldi	r27, 0x00	; 0
    8600:	a8 5e       	subi	r26, 0xE8	; 232
    8602:	b9 4f       	sbci	r27, 0xF9	; 249
    8604:	2c 91       	ld	r18, X
    8606:	01 c0       	rjmp	.+2      	; 0x860a <__vector_3+0xe0>
		}
		else
		{
			prevChannel = 0;
    8608:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    860a:	30 91 df 08 	lds	r19, 0x08DF
    860e:	38 30       	cpi	r19, 0x08	; 8
    8610:	38 f4       	brcc	.+14     	; 0x8620 <__vector_3+0xf6>
		{
            RxChannelStart[curChannel] = tCount;
    8612:	f0 e0       	ldi	r31, 0x00	; 0
    8614:	ee 0f       	add	r30, r30
    8616:	ff 1f       	adc	r31, r31
    8618:	e4 53       	subi	r30, 0x34	; 52
    861a:	f7 4f       	sbci	r31, 0xF7	; 247
    861c:	91 83       	std	Z+1, r25	; 0x01
    861e:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    8620:	30 91 df 08 	lds	r19, 0x08DF
    8624:	33 23       	and	r19, r19
    8626:	99 f0       	breq	.+38     	; 0x864e <__vector_3+0x124>
    8628:	30 91 df 08 	lds	r19, 0x08DF
    862c:	39 30       	cpi	r19, 0x09	; 9
    862e:	78 f4       	brcc	.+30     	; 0x864e <__vector_3+0x124>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    8630:	30 e0       	ldi	r19, 0x00	; 0
    8632:	22 0f       	add	r18, r18
    8634:	33 1f       	adc	r19, r19
    8636:	f9 01       	movw	r30, r18
    8638:	e4 53       	subi	r30, 0x34	; 52
    863a:	f7 4f       	sbci	r31, 0xF7	; 247
    863c:	40 81       	ld	r20, Z
    863e:	51 81       	ldd	r21, Z+1	; 0x01
    8640:	84 1b       	sub	r24, r20
    8642:	95 0b       	sbc	r25, r21
    8644:	f9 01       	movw	r30, r18
    8646:	e9 55       	subi	r30, 0x59	; 89
    8648:	f7 4f       	sbci	r31, 0xF7	; 247
    864a:	91 83       	std	Z+1, r25	; 0x01
    864c:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    864e:	80 91 df 08 	lds	r24, 0x08DF
    8652:	8f 5f       	subi	r24, 0xFF	; 255
    8654:	80 93 df 08 	sts	0x08DF, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    8658:	90 91 df 08 	lds	r25, 0x08DF
    865c:	80 91 b8 08 	lds	r24, 0x08B8
    8660:	89 17       	cp	r24, r25
    8662:	28 f4       	brcc	.+10     	; 0x866e <__vector_3+0x144>
		{
			max_chan = ch_num;					// Update max channel number
    8664:	80 91 df 08 	lds	r24, 0x08DF
    8668:	80 93 b8 08 	sts	0x08B8, r24
    866c:	13 c0       	rjmp	.+38     	; 0x8694 <__vector_3+0x16a>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    866e:	90 91 df 08 	lds	r25, 0x08DF
    8672:	80 91 b8 08 	lds	r24, 0x08B8
    8676:	98 13       	cpse	r25, r24
    8678:	0d c0       	rjmp	.+26     	; 0x8694 <__vector_3+0x16a>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    867a:	81 e0       	ldi	r24, 0x01	; 1
    867c:	80 93 b7 08 	sts	0x08B7, r24
			Servo_TCNT2 = TCNT2;				// Reset signal loss timer and Overdue state 
    8680:	80 91 b2 00 	lds	r24, 0x00B2
    8684:	80 93 2b 05 	sts	0x052B, r24
			RC_Timeout = 0;
    8688:	10 92 2a 05 	sts	0x052A, r1
    868c:	10 92 29 05 	sts	0x0529, r1
			Overdue = false;
    8690:	10 92 2d 05 	sts	0x052D, r1
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    8694:	80 91 2d 05 	lds	r24, 0x052D
    8698:	88 23       	and	r24, r24
    869a:	21 f0       	breq	.+8      	; 0x86a4 <__vector_3+0x17a>
		{
			max_chan = 0;
    869c:	10 92 b8 08 	sts	0x08B8, r1
			Overdue = false;
    86a0:	10 92 2d 05 	sts	0x052D, r1
		}
	}
} // ISR(INT2_vect)
    86a4:	ff 91       	pop	r31
    86a6:	ef 91       	pop	r30
    86a8:	bf 91       	pop	r27
    86aa:	af 91       	pop	r26
    86ac:	9f 91       	pop	r25
    86ae:	8f 91       	pop	r24
    86b0:	7f 91       	pop	r23
    86b2:	6f 91       	pop	r22
    86b4:	5f 91       	pop	r21
    86b6:	4f 91       	pop	r20
    86b8:	3f 91       	pop	r19
    86ba:	2f 91       	pop	r18
    86bc:	0f 90       	pop	r0
    86be:	0f be       	out	0x3f, r0	; 63
    86c0:	0f 90       	pop	r0
    86c2:	1f 90       	pop	r1
    86c4:	18 95       	reti

000086c6 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    86c6:	1f 92       	push	r1
    86c8:	0f 92       	push	r0
    86ca:	0f b6       	in	r0, 0x3f	; 63
    86cc:	0f 92       	push	r0
    86ce:	11 24       	eor	r1, r1
    86d0:	2f 93       	push	r18
    86d2:	3f 93       	push	r19
    86d4:	4f 93       	push	r20
    86d6:	5f 93       	push	r21
    86d8:	6f 93       	push	r22
    86da:	7f 93       	push	r23
    86dc:	8f 93       	push	r24
    86de:	9f 93       	push	r25
    86e0:	af 93       	push	r26
    86e2:	bf 93       	push	r27
    86e4:	cf 93       	push	r28
    86e6:	ef 93       	push	r30
    86e8:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    86ea:	80 91 e2 08 	lds	r24, 0x08E2
    86ee:	88 23       	and	r24, r24
    86f0:	19 f0       	breq	.+6      	; 0x86f8 <__vector_20+0x32>
    86f2:	81 e0       	ldi	r24, 0x01	; 1
    86f4:	80 93 e3 08 	sts	0x08E3, r24

	// Read error flags first
	temp =  UCSR0A;
    86f8:	80 91 c0 00 	lds	r24, 0x00C0

	// Check Framing error, Parity error bits
	if (temp & ((1<<FE0)|(1<<UPE0)))
    86fc:	98 2f       	mov	r25, r24
    86fe:	94 71       	andi	r25, 0x14	; 20
    8700:	21 f4       	brne	.+8      	; 0x870a <__vector_20+0x44>
		// Read byte to remove from buffer
		temp = UDR0;
	}

	// Check all for Data overrun
	else if (temp & (1<<DOR0))
    8702:	83 ff       	sbrs	r24, 3
    8704:	05 c0       	rjmp	.+10     	; 0x8710 <__vector_20+0x4a>
	{
		// Read byte to remove from buffer
		temp = UDR0;
    8706:	80 91 c6 00 	lds	r24, 0x00C6
		// Read byte to remove from buffer
		temp = UDR0;
    870a:	80 91 c6 00 	lds	r24, 0x00C6
    870e:	a5 c2       	rjmp	.+1354   	; 0x8c5a <__vector_20+0x594>

	// Valid data
	else
	{
		// Read byte first
		temp = UDR0;
    8710:	c0 91 c6 00 	lds	r28, 0x00C6

		// Save current time stamp
		Save_TCNT1 = TIM16_ReadTCNT1();
    8714:	0e 94 8d 42 	call	0x851a	; 0x851a <TIM16_ReadTCNT1>
	
		// Work out frame rate properly
		// Note that CurrentPeriod cannot be larger than 26.2ms
	
		//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
		if (Save_TCNT1 < PPMSyncStart)
    8718:	40 91 e0 08 	lds	r20, 0x08E0
    871c:	50 91 e1 08 	lds	r21, 0x08E1
    8720:	84 17       	cp	r24, r20
    8722:	95 07       	cpc	r25, r21
    8724:	48 f4       	brcc	.+18     	; 0x8738 <__vector_20+0x72>
		{
			CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
    8726:	40 91 e0 08 	lds	r20, 0x08E0
    872a:	50 91 e1 08 	lds	r21, 0x08E1
    872e:	9c 01       	movw	r18, r24
    8730:	24 1b       	sub	r18, r20
    8732:	35 0b       	sbc	r19, r21
    8734:	a9 01       	movw	r20, r18
    8736:	08 c0       	rjmp	.+16     	; 0x8748 <__vector_20+0x82>
		}
		else
		{
			CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    8738:	40 91 e0 08 	lds	r20, 0x08E0
    873c:	50 91 e1 08 	lds	r21, 0x08E1
    8740:	dc 01       	movw	r26, r24
    8742:	a4 1b       	sub	r26, r20
    8744:	b5 0b       	sbc	r27, r21
    8746:	ad 01       	movw	r20, r26
		}

		// Handle start of new packet
		if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    8748:	45 3c       	cpi	r20, 0xC5	; 197
    874a:	b9 e0       	ldi	r27, 0x09	; 9
    874c:	5b 07       	cpc	r21, r27
    874e:	c8 f0       	brcs	.+50     	; 0x8782 <__vector_20+0xbc>
		{
			// Reset variables
			rcindex = 0;
    8750:	10 92 a6 08 	sts	0x08A6, r1
			bytecount = 0;
    8754:	10 92 b9 08 	sts	0x08B9, r1
			ch_num = 0;
    8758:	10 92 df 08 	sts	0x08DF, r1
			checksum = 0;
    875c:	10 92 e5 08 	sts	0x08E5, r1
    8760:	10 92 e4 08 	sts	0x08E4, r1
			chanmask16 = 0;
    8764:	10 92 dd 08 	sts	0x08DD, r1
    8768:	10 92 dc 08 	sts	0x08DC, r1

			// Save frame rate to global
			FrameRate = CurrentPeriod;
    876c:	50 93 e7 08 	sts	0x08E7, r21
    8770:	40 93 e6 08 	sts	0x08E6, r20
			
			// Clear buffer
			memset(&sBuffer[0],0,SBUFFER_SIZE);
    8774:	26 e2       	ldi	r18, 0x26	; 38
    8776:	ef e7       	ldi	r30, 0x7F	; 127
    8778:	f5 e0       	ldi	r31, 0x05	; 5
    877a:	df 01       	movw	r26, r30
    877c:	1d 92       	st	X+, r1
    877e:	2a 95       	dec	r18
    8780:	e9 f7       	brne	.-6      	; 0x877c <__vector_20+0xb6>
		}

		// Timestamp this interrupt
		PPMSyncStart = Save_TCNT1;
    8782:	90 93 e1 08 	sts	0x08E1, r25
    8786:	80 93 e0 08 	sts	0x08E0, r24
	
		// Put received byte in buffer if space available
		if (rcindex < SBUFFER_SIZE)
    878a:	80 91 a6 08 	lds	r24, 0x08A6
    878e:	86 32       	cpi	r24, 0x26	; 38
    8790:	50 f4       	brcc	.+20     	; 0x87a6 <__vector_20+0xe0>
		{
			sBuffer[rcindex++] = temp;			
    8792:	e0 91 a6 08 	lds	r30, 0x08A6
    8796:	81 e0       	ldi	r24, 0x01	; 1
    8798:	8e 0f       	add	r24, r30
    879a:	80 93 a6 08 	sts	0x08A6, r24
    879e:	f0 e0       	ldi	r31, 0x00	; 0
    87a0:	e1 58       	subi	r30, 0x81	; 129
    87a2:	fa 4f       	sbci	r31, 0xFA	; 250
    87a4:	c0 83       	st	Z, r28
		//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
		//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
		//*
		//************************************************************

		if (Config.RxMode == XTREME)
    87a6:	80 91 41 06 	lds	r24, 0x0641
    87aa:	84 30       	cpi	r24, 0x04	; 4
    87ac:	09 f0       	breq	.+2      	; 0x87b0 <__vector_20+0xea>
    87ae:	bc c0       	rjmp	.+376    	; 0x8928 <__vector_20+0x262>
		{
			// Look at flag byte to see if the data is meant for us
			if (bytecount == 0)
    87b0:	80 91 b9 08 	lds	r24, 0x08B9
    87b4:	81 11       	cpse	r24, r1
    87b6:	0d c0       	rjmp	.+26     	; 0x87d2 <__vector_20+0x10c>
			{
				// Check top 3 bits for channel bank
				// Trash checksum if not clear
				if (temp & 0xE0)
    87b8:	8c 2f       	mov	r24, r28
    87ba:	80 7e       	andi	r24, 0xE0	; 224
    87bc:	51 f0       	breq	.+20     	; 0x87d2 <__vector_20+0x10c>
				{
					checksum +=	0x55;
    87be:	80 91 e4 08 	lds	r24, 0x08E4
    87c2:	90 91 e5 08 	lds	r25, 0x08E5
    87c6:	8b 5a       	subi	r24, 0xAB	; 171
    87c8:	9f 4f       	sbci	r25, 0xFF	; 255
    87ca:	90 93 e5 08 	sts	0x08E5, r25
    87ce:	80 93 e4 08 	sts	0x08E4, r24
				}
			}

			// Get MSB of mask byte
			if (bytecount == 2)
    87d2:	80 91 b9 08 	lds	r24, 0x08B9
    87d6:	2c 2f       	mov	r18, r28
    87d8:	30 e0       	ldi	r19, 0x00	; 0
    87da:	82 30       	cpi	r24, 0x02	; 2
    87dc:	51 f4       	brne	.+20     	; 0x87f2 <__vector_20+0x12c>
			{
				chanmask16 = 0;
    87de:	10 92 dd 08 	sts	0x08DD, r1
    87e2:	10 92 dc 08 	sts	0x08DC, r1
				chanmask16 = temp << 8;		// High byte of Mask
    87e6:	92 2f       	mov	r25, r18
    87e8:	88 27       	eor	r24, r24
    87ea:	90 93 dd 08 	sts	0x08DD, r25
    87ee:	80 93 dc 08 	sts	0x08DC, r24
			}

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
    87f2:	80 91 b9 08 	lds	r24, 0x08B9
    87f6:	83 30       	cpi	r24, 0x03	; 3
    87f8:	b9 f0       	breq	.+46     	; 0x8828 <__vector_20+0x162>
					temp16 &= temp16 - 1;
				}
			}

			// Add up checksum up until final packet
			if (bytecount < ((ch_num << 1) + 4))
    87fa:	80 91 df 08 	lds	r24, 0x08DF
    87fe:	40 91 b9 08 	lds	r20, 0x08B9
    8802:	90 e0       	ldi	r25, 0x00	; 0
    8804:	88 0f       	add	r24, r24
    8806:	99 1f       	adc	r25, r25
    8808:	03 96       	adiw	r24, 0x03	; 3
    880a:	50 e0       	ldi	r21, 0x00	; 0
    880c:	84 17       	cp	r24, r20
    880e:	95 07       	cpc	r25, r21
    8810:	44 f1       	brlt	.+80     	; 0x8862 <__vector_20+0x19c>
			{
				checksum +=	temp;
    8812:	80 91 e4 08 	lds	r24, 0x08E4
    8816:	90 91 e5 08 	lds	r25, 0x08E5
    881a:	82 0f       	add	r24, r18
    881c:	93 1f       	adc	r25, r19
    881e:	90 93 e5 08 	sts	0x08E5, r25
    8822:	80 93 e4 08 	sts	0x08E4, r24
    8826:	14 c2       	rjmp	.+1064   	; 0x8c50 <__vector_20+0x58a>

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
			{
				chanmask16 += (uint16_t)temp;	// Low byte of Mask
    8828:	80 91 dc 08 	lds	r24, 0x08DC
    882c:	90 91 dd 08 	lds	r25, 0x08DD
    8830:	82 0f       	add	r24, r18
    8832:	93 1f       	adc	r25, r19
    8834:	90 93 dd 08 	sts	0x08DD, r25
    8838:	80 93 dc 08 	sts	0x08DC, r24
				temp16 = chanmask16;			// Need to keep a copy od chanmask16
    883c:	80 91 dc 08 	lds	r24, 0x08DC
    8840:	90 91 dd 08 	lds	r25, 0x08DD

				// Count bits set (number of active channels)				 
				for (ch_num = 0; temp16; ch_num++)
    8844:	10 92 df 08 	sts	0x08DF, r1
    8848:	00 97       	sbiw	r24, 0x00	; 0
    884a:	b9 f2       	breq	.-82     	; 0x87fa <__vector_20+0x134>
				{
					temp16 &= temp16 - 1;
    884c:	ac 01       	movw	r20, r24
    884e:	41 50       	subi	r20, 0x01	; 1
    8850:	51 09       	sbc	r21, r1
    8852:	84 23       	and	r24, r20
    8854:	95 23       	and	r25, r21
			{
				chanmask16 += (uint16_t)temp;	// Low byte of Mask
				temp16 = chanmask16;			// Need to keep a copy od chanmask16

				// Count bits set (number of active channels)				 
				for (ch_num = 0; temp16; ch_num++)
    8856:	40 91 df 08 	lds	r20, 0x08DF
    885a:	4f 5f       	subi	r20, 0xFF	; 255
    885c:	40 93 df 08 	sts	0x08DF, r20
    8860:	f3 cf       	rjmp	.-26     	; 0x8848 <__vector_20+0x182>
	
			// Process data when all packets received
			else
			{
				// Check checksum 
				checksum &= 0xff;
    8862:	80 91 e4 08 	lds	r24, 0x08E4
    8866:	90 91 e5 08 	lds	r25, 0x08E5
    886a:	99 27       	eor	r25, r25
    886c:	90 93 e5 08 	sts	0x08E5, r25
    8870:	80 93 e4 08 	sts	0x08E4, r24

				// Ignore packet if checksum wrong
				if (checksum != temp) // temp holds the transmitted checksum byte
    8874:	80 91 e4 08 	lds	r24, 0x08E4
    8878:	90 91 e5 08 	lds	r25, 0x08E5
    887c:	82 17       	cp	r24, r18
    887e:	93 07       	cpc	r25, r19
    8880:	49 f0       	breq	.+18     	; 0x8894 <__vector_20+0x1ce>
				{
					Interrupted = false;
    8882:	10 92 b7 08 	sts	0x08B7, r1
					ch_num = 0;
    8886:	10 92 df 08 	sts	0x08DF, r1
					checksum = 0;
    888a:	10 92 e5 08 	sts	0x08E5, r1
    888e:	10 92 e4 08 	sts	0x08E4, r1
    8892:	de c1       	rjmp	.+956    	; 0x8c50 <__vector_20+0x58a>
				}
				else
				{
					// RC sync established
					Interrupted = true;	
    8894:	81 e0       	ldi	r24, 0x01	; 1
    8896:	80 93 b7 08 	sts	0x08B7, r24

					// Reset signal loss timer and Overdue state 
					Servo_TCNT2 = TCNT2;
    889a:	80 91 b2 00 	lds	r24, 0x00B2
    889e:	80 93 2b 05 	sts	0x052B, r24
					RC_Timeout = 0;
    88a2:	10 92 2a 05 	sts	0x052A, r1
    88a6:	10 92 29 05 	sts	0x0529, r1
					Overdue = false;
    88aa:	10 92 2d 05 	sts	0x052D, r1
    88ae:	80 e0       	ldi	r24, 0x00	; 0
    88b0:	90 e0       	ldi	r25, 0x00	; 0
			
					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5
    88b2:	a4 e0       	ldi	r26, 0x04	; 4
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    88b4:	61 e0       	ldi	r22, 0x01	; 1
    88b6:	70 e0       	ldi	r23, 0x00	; 0
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    88b8:	ba e0       	ldi	r27, 0x0A	; 10
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    88ba:	40 91 dc 08 	lds	r20, 0x08DC
    88be:	50 91 dd 08 	lds	r21, 0x08DD
    88c2:	9b 01       	movw	r18, r22
    88c4:	08 2e       	mov	r0, r24
    88c6:	02 c0       	rjmp	.+4      	; 0x88cc <__vector_20+0x206>
    88c8:	22 0f       	add	r18, r18
    88ca:	33 1f       	adc	r19, r19
    88cc:	0a 94       	dec	r0
    88ce:	e2 f7       	brpl	.-8      	; 0x88c8 <__vector_20+0x202>
    88d0:	24 23       	and	r18, r20
    88d2:	35 23       	and	r19, r21
    88d4:	23 2b       	or	r18, r19
    88d6:	19 f1       	breq	.+70     	; 0x891e <__vector_20+0x258>
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    88d8:	ea 2f       	mov	r30, r26
    88da:	f0 e0       	ldi	r31, 0x00	; 0
    88dc:	e1 58       	subi	r30, 0x81	; 129
    88de:	fa 4f       	sbci	r31, 0xFA	; 250
    88e0:	40 81       	ld	r20, Z
    88e2:	21 81       	ldd	r18, Z+1	; 0x01

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
    88e4:	88 30       	cpi	r24, 0x08	; 8
    88e6:	c0 f4       	brcc	.+48     	; 0x8918 <__vector_20+0x252>
    88e8:	fc 01       	movw	r30, r24
    88ea:	e8 5e       	subi	r30, 0xE8	; 232
    88ec:	f9 4f       	sbci	r31, 0xF9	; 249
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    88ee:	e1 81       	ldd	r30, Z+1	; 0x01
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    88f0:	50 e0       	ldi	r21, 0x00	; 0
    88f2:	54 2f       	mov	r21, r20
    88f4:	44 27       	eor	r20, r20
    88f6:	42 0f       	add	r20, r18
    88f8:	51 1d       	adc	r21, r1

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
							{
								RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    88fa:	b4 9f       	mul	r27, r20
    88fc:	90 01       	movw	r18, r0
    88fe:	b5 9f       	mul	r27, r21
    8900:	30 0d       	add	r19, r0
    8902:	11 24       	eor	r1, r1
    8904:	36 95       	lsr	r19
    8906:	27 95       	ror	r18
    8908:	36 95       	lsr	r19
    890a:	27 95       	ror	r18
    890c:	ee 0f       	add	r30, r30
    890e:	ff 0b       	sbc	r31, r31
    8910:	e9 55       	subi	r30, 0x59	; 89
    8912:	f7 4f       	sbci	r31, 0xF7	; 247
    8914:	31 83       	std	Z+1, r19	; 0x01
    8916:	20 83       	st	Z, r18
							} 		

							// Within the bounds of the buffer
							if (sindex < SBUFFER_SIZE)
    8918:	a6 32       	cpi	r26, 0x26	; 38
    891a:	08 f4       	brcc	.+2      	; 0x891e <__vector_20+0x258>
							{
								sindex += 2;
    891c:	ae 5f       	subi	r26, 0xFE	; 254
    891e:	01 96       	adiw	r24, 0x01	; 1
					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5

					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
    8920:	80 31       	cpi	r24, 0x10	; 16
    8922:	91 05       	cpc	r25, r1
    8924:	51 f6       	brne	.-108    	; 0x88ba <__vector_20+0x1f4>
    8926:	94 c1       	rjmp	.+808    	; 0x8c50 <__vector_20+0x58a>
		//* 1824	= 2020us
		//* 2047 	= 2160us
		//*
		//************************************************************

		if (Config.RxMode == SBUS)
    8928:	82 30       	cpi	r24, 0x02	; 2
    892a:	09 f0       	breq	.+2      	; 0x892e <__vector_20+0x268>
    892c:	76 c0       	rjmp	.+236    	; 0x8a1a <__vector_20+0x354>
		{
			// Flag that packet has completed
			// End bytes can be 00, 04, 14, 24, 34 and possibly 08 for FASSTest 12-channel
			//if ((bytecount == 24) && ((temp == 0x00) || (temp == 0x04) || (temp == 0x14) || (temp == 0x24) || (temp == 0x34) || (temp == 0x08)))
			if (bytecount == 24)
    892e:	80 91 b9 08 	lds	r24, 0x08B9
    8932:	88 31       	cpi	r24, 0x18	; 24
    8934:	09 f0       	breq	.+2      	; 0x8938 <__vector_20+0x272>
    8936:	8c c1       	rjmp	.+792    	; 0x8c50 <__vector_20+0x58a>
			{
				// RC sync established
				Interrupted = true;
    8938:	81 e0       	ldi	r24, 0x01	; 1
    893a:	80 93 b7 08 	sts	0x08B7, r24
				Servo_TCNT2 = TCNT2;
    893e:	80 91 b2 00 	lds	r24, 0x00B2
    8942:	80 93 2b 05 	sts	0x052B, r24
				RC_Timeout = 0;
    8946:	10 92 2a 05 	sts	0x052A, r1
    894a:	10 92 29 05 	sts	0x0529, r1
				Overdue = false;
    894e:	10 92 2d 05 	sts	0x052D, r1
    8952:	80 e0       	ldi	r24, 0x00	; 0
    8954:	90 e0       	ldi	r25, 0x00	; 0
				
				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    8956:	fc 01       	movw	r30, r24
    8958:	ee 0f       	add	r30, r30
    895a:	ff 1f       	adc	r31, r31
    895c:	e9 55       	subi	r30, 0x59	; 89
    895e:	f7 4f       	sbci	r31, 0xF7	; 247
    8960:	11 82       	std	Z+1, r1	; 0x01
    8962:	10 82       	st	Z, r1
    8964:	01 96       	adiw	r24, 0x01	; 1
				Servo_TCNT2 = TCNT2;
				RC_Timeout = 0;
				Overdue = false;
				
				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    8966:	88 30       	cpi	r24, 0x08	; 8
    8968:	91 05       	cpc	r25, r1
    896a:	a9 f7       	brne	.-22     	; 0x8956 <__vector_20+0x290>
    896c:	a8 e5       	ldi	r26, 0x58	; 88
    896e:	70 e0       	ldi	r23, 0x00	; 0
    8970:	c0 e0       	ldi	r28, 0x00	; 0
    8972:	60 e0       	ldi	r22, 0x00	; 0
    8974:	b1 e0       	ldi	r27, 0x01	; 1
				for (j = 0; j < 88; j++)
				{
					if (sBuffer[sindex] & (1<<chan_mask))
					{
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    8976:	21 e0       	ldi	r18, 0x01	; 1
    8978:	30 e0       	ldi	r19, 0x00	; 0

				// Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
				for (j = 0; j < 88; j++)
				{
					if (sBuffer[sindex] & (1<<chan_mask))
    897a:	eb 2f       	mov	r30, r27
    897c:	f0 e0       	ldi	r31, 0x00	; 0
    897e:	e1 58       	subi	r30, 0x81	; 129
    8980:	fa 4f       	sbci	r31, 0xFA	; 250
    8982:	80 81       	ld	r24, Z
    8984:	90 e0       	ldi	r25, 0x00	; 0
    8986:	06 2e       	mov	r0, r22
    8988:	02 c0       	rjmp	.+4      	; 0x898e <__vector_20+0x2c8>
    898a:	95 95       	asr	r25
    898c:	87 95       	ror	r24
    898e:	0a 94       	dec	r0
    8990:	e2 f7       	brpl	.-8      	; 0x898a <__vector_20+0x2c4>
    8992:	80 ff       	sbrs	r24, 0
    8994:	16 c0       	rjmp	.+44     	; 0x89c2 <__vector_20+0x2fc>
					{
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    8996:	ec 2f       	mov	r30, r28
    8998:	f0 e0       	ldi	r31, 0x00	; 0
    899a:	e8 5e       	subi	r30, 0xE8	; 232
    899c:	f9 4f       	sbci	r31, 0xF9	; 249
    899e:	e1 81       	ldd	r30, Z+1	; 0x01
    89a0:	ee 0f       	add	r30, r30
    89a2:	ff 0b       	sbc	r31, r31
    89a4:	e9 55       	subi	r30, 0x59	; 89
    89a6:	f7 4f       	sbci	r31, 0xF7	; 247
    89a8:	80 81       	ld	r24, Z
    89aa:	91 81       	ldd	r25, Z+1	; 0x01
    89ac:	a9 01       	movw	r20, r18
    89ae:	07 2e       	mov	r0, r23
    89b0:	02 c0       	rjmp	.+4      	; 0x89b6 <__vector_20+0x2f0>
    89b2:	44 0f       	add	r20, r20
    89b4:	55 1f       	adc	r21, r21
    89b6:	0a 94       	dec	r0
    89b8:	e2 f7       	brpl	.-8      	; 0x89b2 <__vector_20+0x2ec>
    89ba:	84 2b       	or	r24, r20
    89bc:	95 2b       	or	r25, r21
    89be:	91 83       	std	Z+1, r25	; 0x01
    89c0:	80 83       	st	Z, r24
					}

					chan_mask++;
    89c2:	6f 5f       	subi	r22, 0xFF	; 255
					data_mask++;
    89c4:	7f 5f       	subi	r23, 0xFF	; 255

					// If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    89c6:	68 30       	cpi	r22, 0x08	; 8
    89c8:	11 f4       	brne	.+4      	; 0x89ce <__vector_20+0x308>
					{
						chan_mask = 0;
						sindex++;
    89ca:	bf 5f       	subi	r27, 0xFF	; 255
					data_mask++;

					// If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
					{
						chan_mask = 0;
    89cc:	60 e0       	ldi	r22, 0x00	; 0
						sindex++;
					}

					// If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    89ce:	7b 30       	cpi	r23, 0x0B	; 11
    89d0:	11 f4       	brne	.+4      	; 0x89d6 <__vector_20+0x310>
					{
						data_mask =0;
						chan_shift++;
    89d2:	cf 5f       	subi	r28, 0xFF	; 255

					// If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
					{
						data_mask =0;
    89d4:	70 e0       	ldi	r23, 0x00	; 0
    89d6:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

				// Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
				for (j = 0; j < 88; j++)
    89d8:	81 f6       	brne	.-96     	; 0x897a <__vector_20+0x2b4>
    89da:	20 e0       	ldi	r18, 0x00	; 0
    89dc:	30 e0       	ldi	r19, 0x00	; 0

				// Convert to  OpenAero2 values
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract Futaba offset
					itemp16 = RxChannel[j] - 1024;
    89de:	f9 01       	movw	r30, r18
    89e0:	ee 0f       	add	r30, r30
    89e2:	ff 1f       	adc	r31, r31
    89e4:	e9 55       	subi	r30, 0x59	; 89
    89e6:	f7 4f       	sbci	r31, 0xF7	; 247
    89e8:	40 81       	ld	r20, Z
    89ea:	51 81       	ldd	r21, Z+1	; 0x01
    89ec:	54 50       	subi	r21, 0x04	; 4
						
					// Expand into OpenAero2 units x1.562 (1.562) (1250/800)
					itemp16 = itemp16 + (itemp16 >> 1) + (itemp16 >> 4);
    89ee:	ca 01       	movw	r24, r20
    89f0:	95 95       	asr	r25
    89f2:	87 95       	ror	r24
    89f4:	84 0f       	add	r24, r20
    89f6:	95 1f       	adc	r25, r21
    89f8:	a4 e0       	ldi	r26, 0x04	; 4
    89fa:	55 95       	asr	r21
    89fc:	47 95       	ror	r20
    89fe:	aa 95       	dec	r26
    8a00:	e1 f7       	brne	.-8      	; 0x89fa <__vector_20+0x334>
    8a02:	84 0f       	add	r24, r20
    8a04:	95 1f       	adc	r25, r21

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;		
    8a06:	8a 55       	subi	r24, 0x5A	; 90
    8a08:	91 4f       	sbci	r25, 0xF1	; 241
    8a0a:	91 83       	std	Z+1, r25	; 0x01
    8a0c:	80 83       	st	Z, r24
    8a0e:	2f 5f       	subi	r18, 0xFF	; 255
    8a10:	3f 4f       	sbci	r19, 0xFF	; 255
						chan_shift++;
					}
				}

				// Convert to  OpenAero2 values
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    8a12:	28 30       	cpi	r18, 0x08	; 8
    8a14:	31 05       	cpc	r19, r1
    8a16:	19 f7       	brne	.-58     	; 0x89de <__vector_20+0x318>
    8a18:	1b c1       	rjmp	.+566    	; 0x8c50 <__vector_20+0x58a>
		//* 2047 	= 2100us
		//*
		//************************************************************

		// Handle Spektrum format
		if (Config.RxMode == SPEKTRUM)
    8a1a:	83 30       	cpi	r24, 0x03	; 3
    8a1c:	09 f0       	breq	.+2      	; 0x8a20 <__vector_20+0x35a>
    8a1e:	70 c0       	rjmp	.+224    	; 0x8b00 <__vector_20+0x43a>
		{
			// Process data when all packets received
			if (bytecount == 15)
    8a20:	80 91 b9 08 	lds	r24, 0x08B9
    8a24:	8f 30       	cpi	r24, 0x0F	; 15
    8a26:	09 f0       	breq	.+2      	; 0x8a2a <__vector_20+0x364>
    8a28:	13 c1       	rjmp	.+550    	; 0x8c50 <__vector_20+0x58a>
			{
				// Just stick the last byte into the buffer manually...(hides)
				sBuffer[15] = temp;
    8a2a:	c0 93 8e 05 	sts	0x058E, r28

				// Set start of channel data per format
				sindex = 2; // Channel data from byte 3

				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    8a2e:	80 91 80 05 	lds	r24, 0x0580
    8a32:	84 ff       	sbrs	r24, 4
    8a34:	04 c0       	rjmp	.+8      	; 0x8a3e <__vector_20+0x378>
				{
					chan_mask = 0x78;	// 11 bit (2048)
					data_mask = 0x07;
    8a36:	c7 e0       	ldi	r28, 0x07	; 7
					chan_shift = 0x03;
    8a38:	63 e0       	ldi	r22, 0x03	; 3
				sindex = 2; // Channel data from byte 3

				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
				{
					chan_mask = 0x78;	// 11 bit (2048)
    8a3a:	78 e7       	ldi	r23, 0x78	; 120
    8a3c:	03 c0       	rjmp	.+6      	; 0x8a44 <__vector_20+0x37e>
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
					data_mask = 0x03;
    8a3e:	c3 e0       	ldi	r28, 0x03	; 3
					chan_shift = 0x02;
    8a40:	62 e0       	ldi	r22, 0x02	; 2
					data_mask = 0x07;
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
    8a42:	7c e3       	ldi	r23, 0x3C	; 60
    8a44:	e2 e8       	ldi	r30, 0x82	; 130
    8a46:	f5 e0       	ldi	r31, 0x05	; 5
    8a48:	df 01       	movw	r26, r30
    8a4a:	11 97       	sbiw	r26, 0x01	; 1
				// Work out which channel the data is intended for from the channel number data
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    8a4c:	2c 91       	ld	r18, X
    8a4e:	82 2f       	mov	r24, r18
    8a50:	87 23       	and	r24, r23
    8a52:	90 e0       	ldi	r25, 0x00	; 0
    8a54:	06 2e       	mov	r0, r22
    8a56:	02 c0       	rjmp	.+4      	; 0x8a5c <__vector_20+0x396>
    8a58:	95 95       	asr	r25
    8a5a:	87 95       	ror	r24
    8a5c:	0a 94       	dec	r0
    8a5e:	e2 f7       	brpl	.-8      	; 0x8a58 <__vector_20+0x392>
    8a60:	80 93 df 08 	sts	0x08DF, r24

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    8a64:	80 81       	ld	r24, Z

					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16
					if (ch_num < MAX_RC_CHANNELS)
    8a66:	90 91 df 08 	lds	r25, 0x08DF
    8a6a:	98 30       	cpi	r25, 0x08	; 8
    8a6c:	a8 f5       	brcc	.+106    	; 0x8ad8 <__vector_20+0x412>
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    8a6e:	2c 23       	and	r18, r28
    8a70:	30 e0       	ldi	r19, 0x00	; 0
    8a72:	32 2f       	mov	r19, r18
    8a74:	22 27       	eor	r18, r18
    8a76:	28 0f       	add	r18, r24
    8a78:	31 1d       	adc	r19, r1
					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16
					if (ch_num < MAX_RC_CHANNELS)
					{
						// Subtract Spektrum center offset
						if (chan_shift == 0x03) // 11-bit
    8a7a:	63 30       	cpi	r22, 0x03	; 3
    8a7c:	11 f4       	brne	.+4      	; 0x8a82 <__vector_20+0x3bc>
						{
							itemp16 = temp16 - 1024;
    8a7e:	34 50       	subi	r19, 0x04	; 4
    8a80:	01 c0       	rjmp	.+2      	; 0x8a84 <__vector_20+0x3be>
						}
						else
						{
							itemp16 = temp16 - 512;	
    8a82:	32 50       	subi	r19, 0x02	; 2
						}					

						// Spektrum to System
						// Expand into OpenAero2 units (1250/867.5) x2 = 2.8818 (2.875) 2+.5+.25-1/8
						itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3);
    8a84:	c9 01       	movw	r24, r18
    8a86:	88 0f       	add	r24, r24
    8a88:	99 1f       	adc	r25, r25
    8a8a:	a9 01       	movw	r20, r18
    8a8c:	55 95       	asr	r21
    8a8e:	47 95       	ror	r20
    8a90:	84 0f       	add	r24, r20
    8a92:	95 1f       	adc	r25, r21
    8a94:	a9 01       	movw	r20, r18
    8a96:	55 95       	asr	r21
    8a98:	47 95       	ror	r20
    8a9a:	55 95       	asr	r21
    8a9c:	47 95       	ror	r20
    8a9e:	84 0f       	add	r24, r20
    8aa0:	95 1f       	adc	r25, r21
    8aa2:	43 e0       	ldi	r20, 0x03	; 3
    8aa4:	35 95       	asr	r19
    8aa6:	27 95       	ror	r18
    8aa8:	4a 95       	dec	r20
    8aaa:	e1 f7       	brne	.-8      	; 0x8aa4 <__vector_20+0x3de>
    8aac:	82 0f       	add	r24, r18
    8aae:	93 1f       	adc	r25, r19

						if (chan_shift == 0x03) // 11-bit
    8ab0:	63 30       	cpi	r22, 0x03	; 3
    8ab2:	11 f4       	brne	.+4      	; 0x8ab8 <__vector_20+0x3f2>
						{
							// Divide in case of 11-bit value
							itemp16 = itemp16 >> 1;								
    8ab4:	95 95       	asr	r25
    8ab6:	87 95       	ror	r24
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    8ab8:	a0 91 df 08 	lds	r26, 0x08DF
    8abc:	b0 e0       	ldi	r27, 0x00	; 0
    8abe:	a8 5e       	subi	r26, 0xE8	; 232
    8ac0:	b9 4f       	sbci	r27, 0xF9	; 249
    8ac2:	11 96       	adiw	r26, 0x01	; 1
    8ac4:	ac 91       	ld	r26, X
							// Divide in case of 11-bit value
							itemp16 = itemp16 >> 1;								
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										
    8ac6:	8a 55       	subi	r24, 0x5A	; 90
    8ac8:	91 4f       	sbci	r25, 0xF1	; 241

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    8aca:	aa 0f       	add	r26, r26
    8acc:	bb 0b       	sbc	r27, r27
    8ace:	a9 55       	subi	r26, 0x59	; 89
    8ad0:	b7 4f       	sbci	r27, 0xF7	; 247
    8ad2:	11 96       	adiw	r26, 0x01	; 1
    8ad4:	9c 93       	st	X, r25
    8ad6:	8e 93       	st	-X, r24
    8ad8:	32 96       	adiw	r30, 0x02	; 2
					chan_shift = 0x02;
				}

				// Work out which channel the data is intended for from the channel number data
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
    8ada:	b5 e0       	ldi	r27, 0x05	; 5
    8adc:	e0 39       	cpi	r30, 0x90	; 144
    8ade:	fb 07       	cpc	r31, r27
    8ae0:	09 f0       	breq	.+2      	; 0x8ae4 <__vector_20+0x41e>
    8ae2:	b2 cf       	rjmp	.-156    	; 0x8a48 <__vector_20+0x382>
					sindex += 2;

				} // For each pair of bytes
			
				// RC sync established
				Interrupted = true;
    8ae4:	81 e0       	ldi	r24, 0x01	; 1
    8ae6:	80 93 b7 08 	sts	0x08B7, r24
				
				// Reset signal loss timer and Overdue state 
				Servo_TCNT2 = TCNT2;
    8aea:	80 91 b2 00 	lds	r24, 0x00B2
    8aee:	80 93 2b 05 	sts	0x052B, r24
				RC_Timeout = 0;
    8af2:	10 92 2a 05 	sts	0x052A, r1
    8af6:	10 92 29 05 	sts	0x0529, r1
				Overdue = false;
    8afa:	10 92 2d 05 	sts	0x052D, r1
    8afe:	a8 c0       	rjmp	.+336    	; 0x8c50 <__vector_20+0x58a>
		//* 4095 	= 2200us		 
		//*
		//************************************************************
		
		// Handle SXRL format
		if (Config.RxMode == MODEB)
    8b00:	85 30       	cpi	r24, 0x05	; 5
    8b02:	09 f0       	breq	.+2      	; 0x8b06 <__vector_20+0x440>
    8b04:	a5 c0       	rjmp	.+330    	; 0x8c50 <__vector_20+0x58a>
		{
			// Work out the expected number of bytes based on the vendor ID (1st byte)
			if (bytecount == 0)
    8b06:	80 91 b9 08 	lds	r24, 0x08B9
    8b0a:	81 11       	cpse	r24, r1
    8b0c:	09 c0       	rjmp	.+18     	; 0x8b20 <__vector_20+0x45a>
			{
				// Process data when all packets received
				if (sBuffer[0] == MODEB_SYNCBYTE)		// 12-channel packet
    8b0e:	80 91 7f 05 	lds	r24, 0x057F
    8b12:	81 3a       	cpi	r24, 0xA1	; 161
    8b14:	11 f4       	brne	.+4      	; 0x8b1a <__vector_20+0x454>
				{
					packet_size = XBUS_FRAME_SIZE_12;
    8b16:	8b e1       	ldi	r24, 0x1B	; 27
    8b18:	01 c0       	rjmp	.+2      	; 0x8b1c <__vector_20+0x456>
				}
				else									// Probably a 16-channel packet
				{
					packet_size = XBUS_FRAME_SIZE_16;
    8b1a:	83 e2       	ldi	r24, 0x23	; 35
    8b1c:	80 93 de 08 	sts	0x08DE, r24
				}
			}

			// Check checksum when all data received
			if (bytecount == (packet_size - 1))
    8b20:	20 91 b9 08 	lds	r18, 0x08B9
    8b24:	80 91 de 08 	lds	r24, 0x08DE
    8b28:	30 e0       	ldi	r19, 0x00	; 0
    8b2a:	90 e0       	ldi	r25, 0x00	; 0
    8b2c:	01 97       	sbiw	r24, 0x01	; 1
    8b2e:	28 17       	cp	r18, r24
    8b30:	39 07       	cpc	r19, r25
    8b32:	09 f0       	breq	.+2      	; 0x8b36 <__vector_20+0x470>
    8b34:	8d c0       	rjmp	.+282    	; 0x8c50 <__vector_20+0x58a>
    8b36:	80 e0       	ldi	r24, 0x00	; 0
    8b38:	90 e0       	ldi	r25, 0x00	; 0
    8b3a:	c0 e0       	ldi	r28, 0x00	; 0
			{
				crc = 0;
			
				// Add up checksum for all bytes up to but not including the checksum
				for (j = 0; j < (packet_size - 2); j++)
    8b3c:	4c 2f       	mov	r20, r28
    8b3e:	50 e0       	ldi	r21, 0x00	; 0
    8b40:	20 91 de 08 	lds	r18, 0x08DE
    8b44:	30 e0       	ldi	r19, 0x00	; 0
    8b46:	22 50       	subi	r18, 0x02	; 2
    8b48:	31 09       	sbc	r19, r1
    8b4a:	42 17       	cp	r20, r18
    8b4c:	53 07       	cpc	r21, r19
    8b4e:	44 f4       	brge	.+16     	; 0x8b60 <__vector_20+0x49a>
				{
					crc = CRC16(crc, sBuffer[j]);
    8b50:	fa 01       	movw	r30, r20
    8b52:	e1 58       	subi	r30, 0x81	; 129
    8b54:	fa 4f       	sbci	r31, 0xFA	; 250
    8b56:	60 81       	ld	r22, Z
    8b58:	0e 94 db 69 	call	0xd3b6	; 0xd3b6 <CRC16>
			if (bytecount == (packet_size - 1))
			{
				crc = 0;
			
				// Add up checksum for all bytes up to but not including the checksum
				for (j = 0; j < (packet_size - 2); j++)
    8b5c:	cf 5f       	subi	r28, 0xFF	; 255
    8b5e:	ee cf       	rjmp	.-36     	; 0x8b3c <__vector_20+0x476>
				{
					crc = CRC16(crc, sBuffer[j]);
				}
			
				// Extract the packet's own checksum
				checkcrc = ((uint16_t)(sBuffer[packet_size - 2] << 8) | (uint16_t)(sBuffer[packet_size - 1]));
    8b60:	a0 91 de 08 	lds	r26, 0x08DE
    8b64:	e0 91 de 08 	lds	r30, 0x08DE
    8b68:	b0 e0       	ldi	r27, 0x00	; 0
    8b6a:	a3 58       	subi	r26, 0x83	; 131
    8b6c:	ba 4f       	sbci	r27, 0xFA	; 250
    8b6e:	2c 91       	ld	r18, X
    8b70:	30 e0       	ldi	r19, 0x00	; 0
    8b72:	32 2f       	mov	r19, r18
    8b74:	22 27       	eor	r18, r18
    8b76:	f0 e0       	ldi	r31, 0x00	; 0
    8b78:	e2 58       	subi	r30, 0x82	; 130
    8b7a:	fa 4f       	sbci	r31, 0xFA	; 250
    8b7c:	40 81       	ld	r20, Z
    8b7e:	24 2b       	or	r18, r20
				
				// Compare with the calculated one and process data if ok
				if (checkcrc == crc)
    8b80:	28 17       	cp	r18, r24
    8b82:	39 07       	cpc	r19, r25
    8b84:	09 f0       	breq	.+2      	; 0x8b88 <__vector_20+0x4c2>
    8b86:	64 c0       	rjmp	.+200    	; 0x8c50 <__vector_20+0x58a>
				{
					// RC sync established
					Interrupted = true;
    8b88:	81 e0       	ldi	r24, 0x01	; 1
    8b8a:	80 93 b7 08 	sts	0x08B7, r24
					
					// Reset signal loss timer and Overdue state 					
					Servo_TCNT2 = TCNT2;
    8b8e:	80 91 b2 00 	lds	r24, 0x00B2
    8b92:	80 93 2b 05 	sts	0x052B, r24
					RC_Timeout = 0;
    8b96:	10 92 2a 05 	sts	0x052A, r1
    8b9a:	10 92 29 05 	sts	0x0529, r1
					Overdue = false;
    8b9e:	10 92 2d 05 	sts	0x052D, r1
    8ba2:	80 e0       	ldi	r24, 0x00	; 0
    8ba4:	90 e0       	ldi	r25, 0x00	; 0
			
					// Copy unconverted channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Combine bytes from buffer
						TempRxChannel[j] = (uint16_t)(sBuffer[(j << 1) + 1] << 8) | (sBuffer[(j << 1) + 2]);
    8ba6:	ac 01       	movw	r20, r24
    8ba8:	44 0f       	add	r20, r20
    8baa:	55 1f       	adc	r21, r21
    8bac:	fa 01       	movw	r30, r20
    8bae:	e1 58       	subi	r30, 0x81	; 129
    8bb0:	fa 4f       	sbci	r31, 0xFA	; 250
    8bb2:	21 81       	ldd	r18, Z+1	; 0x01
    8bb4:	30 e0       	ldi	r19, 0x00	; 0
    8bb6:	32 2f       	mov	r19, r18
    8bb8:	22 27       	eor	r18, r18
    8bba:	62 81       	ldd	r22, Z+2	; 0x02
    8bbc:	26 2b       	or	r18, r22
    8bbe:	fa 01       	movw	r30, r20
    8bc0:	e6 54       	subi	r30, 0x46	; 70
    8bc2:	f7 4f       	sbci	r31, 0xF7	; 247
    8bc4:	31 83       	std	Z+1, r19	; 0x01
    8bc6:	20 83       	st	Z, r18
    8bc8:	01 96       	adiw	r24, 0x01	; 1
					Servo_TCNT2 = TCNT2;
					RC_Timeout = 0;
					Overdue = false;
			
					// Copy unconverted channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    8bca:	88 30       	cpi	r24, 0x08	; 8
    8bcc:	91 05       	cpc	r25, r1
    8bce:	59 f7       	brne	.-42     	; 0x8ba6 <__vector_20+0x4e0>
    8bd0:	a9 e1       	ldi	r26, 0x19	; 25
    8bd2:	b6 e0       	ldi	r27, 0x06	; 6
    8bd4:	40 e0       	ldi	r20, 0x00	; 0
    8bd6:	50 e0       	ldi	r21, 0x00	; 0

					// Convert to system values
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Subtract MODEB offset
						itemp16 = TempRxChannel[j] - 2048;
    8bd8:	fa 01       	movw	r30, r20
    8bda:	ee 0f       	add	r30, r30
    8bdc:	ff 1f       	adc	r31, r31
    8bde:	e6 54       	subi	r30, 0x46	; 70
    8be0:	f7 4f       	sbci	r31, 0xF7	; 247
    8be2:	20 81       	ld	r18, Z
    8be4:	31 81       	ldd	r19, Z+1	; 0x01
    8be6:	38 50       	subi	r19, 0x08	; 8
						
						// Expand into OpenAero2 units x0.8544 (0.8555)	(1250/1463)
						itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 7) + (itemp16 >> 8);
    8be8:	c9 01       	movw	r24, r18
    8bea:	95 95       	asr	r25
    8bec:	87 95       	ror	r24
    8bee:	b9 01       	movw	r22, r18
    8bf0:	75 95       	asr	r23
    8bf2:	67 95       	ror	r22
    8bf4:	75 95       	asr	r23
    8bf6:	67 95       	ror	r22
    8bf8:	86 0f       	add	r24, r22
    8bfa:	97 1f       	adc	r25, r23
    8bfc:	b9 01       	movw	r22, r18
    8bfe:	f4 e0       	ldi	r31, 0x04	; 4
    8c00:	75 95       	asr	r23
    8c02:	67 95       	ror	r22
    8c04:	fa 95       	dec	r31
    8c06:	e1 f7       	brne	.-8      	; 0x8c00 <__vector_20+0x53a>
    8c08:	86 0f       	add	r24, r22
    8c0a:	97 1f       	adc	r25, r23
    8c0c:	b9 01       	movw	r22, r18
    8c0e:	c5 e0       	ldi	r28, 0x05	; 5
    8c10:	75 95       	asr	r23
    8c12:	67 95       	ror	r22
    8c14:	ca 95       	dec	r28
    8c16:	e1 f7       	brne	.-8      	; 0x8c10 <__vector_20+0x54a>
    8c18:	86 0f       	add	r24, r22
    8c1a:	97 1f       	adc	r25, r23
    8c1c:	b9 01       	movw	r22, r18
    8c1e:	66 0f       	add	r22, r22
    8c20:	67 2f       	mov	r22, r23
    8c22:	66 1f       	adc	r22, r22
    8c24:	77 0b       	sbc	r23, r23
    8c26:	86 0f       	add	r24, r22
    8c28:	97 1f       	adc	r25, r23
    8c2a:	23 2f       	mov	r18, r19
    8c2c:	33 0f       	add	r19, r19
    8c2e:	33 0b       	sbc	r19, r19

						// Add back in OpenAero2 offset
						RxChannel[Config.ChannelOrder[j]] = itemp16 + 3750;
    8c30:	ed 91       	ld	r30, X+
					{
						// Subtract MODEB offset
						itemp16 = TempRxChannel[j] - 2048;
						
						// Expand into OpenAero2 units x0.8544 (0.8555)	(1250/1463)
						itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 7) + (itemp16 >> 8);
    8c32:	82 0f       	add	r24, r18
    8c34:	93 1f       	adc	r25, r19

						// Add back in OpenAero2 offset
						RxChannel[Config.ChannelOrder[j]] = itemp16 + 3750;
    8c36:	8a 55       	subi	r24, 0x5A	; 90
    8c38:	91 4f       	sbci	r25, 0xF1	; 241
    8c3a:	ee 0f       	add	r30, r30
    8c3c:	ff 0b       	sbc	r31, r31
    8c3e:	e9 55       	subi	r30, 0x59	; 89
    8c40:	f7 4f       	sbci	r31, 0xF7	; 247
    8c42:	91 83       	std	Z+1, r25	; 0x01
    8c44:	80 83       	st	Z, r24
    8c46:	4f 5f       	subi	r20, 0xFF	; 255
    8c48:	5f 4f       	sbci	r21, 0xFF	; 255
						// Combine bytes from buffer
						TempRxChannel[j] = (uint16_t)(sBuffer[(j << 1) + 1] << 8) | (sBuffer[(j << 1) + 2]);
					}

					// Convert to system values
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    8c4a:	48 30       	cpi	r20, 0x08	; 8
    8c4c:	51 05       	cpc	r21, r1
    8c4e:	21 f6       	brne	.-120    	; 0x8bd8 <__vector_20+0x512>
		//************************************************************
		//* Common exit code
		//************************************************************

		// Increment byte count
		bytecount++;
    8c50:	80 91 b9 08 	lds	r24, 0x08B9
    8c54:	8f 5f       	subi	r24, 0xFF	; 255
    8c56:	80 93 b9 08 	sts	0x08B9, r24
	
	} // Valid data
}
    8c5a:	ff 91       	pop	r31
    8c5c:	ef 91       	pop	r30
    8c5e:	cf 91       	pop	r28
    8c60:	bf 91       	pop	r27
    8c62:	af 91       	pop	r26
    8c64:	9f 91       	pop	r25
    8c66:	8f 91       	pop	r24
    8c68:	7f 91       	pop	r23
    8c6a:	6f 91       	pop	r22
    8c6c:	5f 91       	pop	r21
    8c6e:	4f 91       	pop	r20
    8c70:	3f 91       	pop	r19
    8c72:	2f 91       	pop	r18
    8c74:	0f 90       	pop	r0
    8c76:	0f be       	out	0x3f, r0	; 63
    8c78:	0f 90       	pop	r0
    8c7a:	1f 90       	pop	r1
    8c7c:	18 95       	reti

00008c7e <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    8c7e:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    8c80:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    8c84:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    8c88:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    8c8a:	e1 ec       	ldi	r30, 0xC1	; 193
    8c8c:	f0 e0       	ldi	r31, 0x00	; 0
    8c8e:	80 81       	ld	r24, Z
    8c90:	8f 7e       	andi	r24, 0xEF	; 239
    8c92:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    8c94:	80 81       	ld	r24, Z
    8c96:	8f 77       	andi	r24, 0x7F	; 127
    8c98:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    8c9a:	8f e0       	ldi	r24, 0x0F	; 15
    8c9c:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    8c9e:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    8ca0:	78 94       	sei
    8ca2:	08 95       	ret

00008ca4 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    8ca4:	f8 94       	cli
	
	switch (Config.RxMode)
    8ca6:	80 91 41 06 	lds	r24, 0x0641
    8caa:	81 30       	cpi	r24, 0x01	; 1
    8cac:	c9 f0       	breq	.+50     	; 0x8ce0 <init_int+0x3c>
    8cae:	44 f4       	brge	.+16     	; 0x8cc0 <init_int+0x1c>
    8cb0:	81 11       	cpse	r24, r1
    8cb2:	2c c0       	rjmp	.+88     	; 0x8d0c <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    8cb4:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    8cb8:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    8cbc:	84 e0       	ldi	r24, 0x04	; 4
    8cbe:	1b c0       	rjmp	.+54     	; 0x8cf6 <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    8cc0:	86 30       	cpi	r24, 0x06	; 6
    8cc2:	24 f5       	brge	.+72     	; 0x8d0c <init_int+0x68>
		case MODEB:
		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    8cc4:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    8cc8:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    8ccc:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    8cce:	80 91 c1 00 	lds	r24, 0x00C1
    8cd2:	80 68       	ori	r24, 0x80	; 128
    8cd4:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    8cd8:	80 91 c1 00 	lds	r24, 0x00C1
    8cdc:	80 61       	ori	r24, 0x10	; 16
    8cde:	14 c0       	rjmp	.+40     	; 0x8d08 <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    8ce0:	80 91 6c 00 	lds	r24, 0x006C
    8ce4:	81 60       	ori	r24, 0x01	; 1
    8ce6:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    8cea:	80 91 73 00 	lds	r24, 0x0073
    8cee:	81 60       	ori	r24, 0x01	; 1
    8cf0:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    8cf4:	87 e0       	ldi	r24, 0x07	; 7
    8cf6:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    8cf8:	80 91 c1 00 	lds	r24, 0x00C1
    8cfc:	8f 77       	andi	r24, 0x7F	; 127
    8cfe:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    8d02:	80 91 c1 00 	lds	r24, 0x00C1
    8d06:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    8d08:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    8d0c:	8f e0       	ldi	r24, 0x0F	; 15
    8d0e:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    8d10:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    8d12:	78 94       	sei
    8d14:	08 95       	ret

00008d16 <menu_channel>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_channel(void)
{
    8d16:	8f 92       	push	r8
    8d18:	af 92       	push	r10
    8d1a:	bf 92       	push	r11
    8d1c:	cf 92       	push	r12
    8d1e:	df 92       	push	r13
    8d20:	ef 92       	push	r14
    8d22:	ff 92       	push	r15
    8d24:	0f 93       	push	r16
    8d26:	1f 93       	push	r17
    8d28:	cf 93       	push	r28
    8d2a:	df 93       	push	r29
    8d2c:	00 d0       	rcall	.+0      	; 0x8d2e <menu_channel+0x18>
    8d2e:	00 d0       	rcall	.+0      	; 0x8d30 <menu_channel+0x1a>
    8d30:	1f 92       	push	r1
    8d32:	cd b7       	in	r28, 0x3d	; 61
    8d34:	de b7       	in	r29, 0x3e	; 62
	menu_range_t range;
	uint8_t text_link;
	uint16_t reference = CHSTART;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    8d36:	80 91 08 05 	lds	r24, 0x0508
    8d3a:	88 23       	and	r24, r24
    8d3c:	09 f4       	brne	.+2      	; 0x8d40 <menu_channel+0x2a>
    8d3e:	69 c0       	rjmp	.+210    	; 0x8e12 <menu_channel+0xfc>
	{
		sub_top = CHSTART;
    8d40:	80 e8       	ldi	r24, 0x80	; 128
    8d42:	91 e0       	ldi	r25, 0x01	; 1
    8d44:	90 93 4e 05 	sts	0x054E, r25
    8d48:	80 93 4d 05 	sts	0x054D, r24
		menu_flag = 0;
    8d4c:	10 92 08 05 	sts	0x0508, r1
    8d50:	60 c0       	rjmp	.+192    	; 0x8e12 <menu_channel+0xfc>
	while(button != BACK)
	{
		value_ptr = &Config.CustomChannelOrder[0];

		// Print menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)Ch_menu_ranges, 0, (const uint16_t*)ChMenuOffsets, (const uint16_t*)ChMenuText, cursor);
    8d52:	a0 90 04 05 	lds	r10, 0x0504
    8d56:	b0 90 05 05 	lds	r11, 0x0505
    8d5a:	35 ed       	ldi	r19, 0xD5	; 213
    8d5c:	c3 2e       	mov	r12, r19
    8d5e:	34 e2       	ldi	r19, 0x24	; 36
    8d60:	d3 2e       	mov	r13, r19
    8d62:	45 ec       	ldi	r20, 0xC5	; 197
    8d64:	e4 2e       	mov	r14, r20
    8d66:	44 e2       	ldi	r20, 0x24	; 36
    8d68:	f4 2e       	mov	r15, r20
    8d6a:	00 e0       	ldi	r16, 0x00	; 0
    8d6c:	2d e9       	ldi	r18, 0x9D	; 157
    8d6e:	34 e2       	ldi	r19, 0x24	; 36
    8d70:	4e e5       	ldi	r20, 0x5E	; 94
    8d72:	58 e0       	ldi	r21, 0x08	; 8
    8d74:	60 e8       	ldi	r22, 0x80	; 128
    8d76:	71 e0       	ldi	r23, 0x01	; 1
    8d78:	80 91 4d 05 	lds	r24, 0x054D
    8d7c:	90 91 4e 05 	lds	r25, 0x054E
    8d80:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <print_menu_items>

		// Handle menu changes
		update_menu(CHITEMS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    8d84:	58 e4       	ldi	r21, 0x48	; 72
    8d86:	c5 2e       	mov	r12, r21
    8d88:	55 e0       	ldi	r21, 0x05	; 5
    8d8a:	d5 2e       	mov	r13, r21
    8d8c:	6d e4       	ldi	r22, 0x4D	; 77
    8d8e:	e6 2e       	mov	r14, r22
    8d90:	65 e0       	ldi	r22, 0x05	; 5
    8d92:	f6 2e       	mov	r15, r22
    8d94:	04 e0       	ldi	r16, 0x04	; 4
    8d96:	15 e0       	ldi	r17, 0x05	; 5
    8d98:	20 91 e8 08 	lds	r18, 0x08E8
    8d9c:	40 e0       	ldi	r20, 0x00	; 0
    8d9e:	50 e0       	ldi	r21, 0x00	; 0
    8da0:	60 e8       	ldi	r22, 0x80	; 128
    8da2:	71 e0       	ldi	r23, 0x01	; 1
    8da4:	88 e0       	ldi	r24, 0x08	; 8
    8da6:	90 e0       	ldi	r25, 0x00	; 0
    8da8:	0e 94 9b 4e 	call	0x9d36	; 0x9d36 <update_menu>
		range = get_menu_range ((const unsigned char*)Ch_menu_ranges, (menu_temp - reference));
    8dac:	60 91 48 05 	lds	r22, 0x0548
    8db0:	60 58       	subi	r22, 0x80	; 128
    8db2:	8d e9       	ldi	r24, 0x9D	; 157
    8db4:	94 e2       	ldi	r25, 0x24	; 36
    8db6:	0e 94 40 48 	call	0x9080	; 0x9080 <get_menu_range>
    8dba:	29 83       	std	Y+1, r18	; 0x01
    8dbc:	3a 83       	std	Y+2, r19	; 0x02
    8dbe:	4b 83       	std	Y+3, r20	; 0x03
    8dc0:	5c 83       	std	Y+4, r21	; 0x04
    8dc2:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    8dc4:	80 91 e8 08 	lds	r24, 0x08E8
    8dc8:	80 3e       	cpi	r24, 0xE0	; 224
    8dca:	f9 f4       	brne	.+62     	; 0x8e0a <menu_channel+0xf4>
		{
			text_link = pgm_read_word(&ChMenuText[menu_temp - reference]);
    8dcc:	80 91 48 05 	lds	r24, 0x0548
    8dd0:	90 91 49 05 	lds	r25, 0x0549
    8dd4:	bc 01       	movw	r22, r24
    8dd6:	60 58       	subi	r22, 0x80	; 128
    8dd8:	71 40       	sbci	r23, 0x01	; 1
    8dda:	fb 01       	movw	r30, r22
    8ddc:	ee 0f       	add	r30, r30
    8dde:	ff 1f       	adc	r31, r31
    8de0:	eb 52       	subi	r30, 0x2B	; 43
    8de2:	fb 4d       	sbci	r31, 0xDB	; 219
    8de4:	a5 90       	lpm	r10, Z+
    8de6:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - reference), 1, range, 0, text_link, false, 0);
    8de8:	bb 24       	eor	r11, r11
    8dea:	62 5a       	subi	r22, 0xA2	; 162
    8dec:	77 4f       	sbci	r23, 0xF7	; 247
    8dee:	1f 92       	push	r1
    8df0:	1f 92       	push	r1
    8df2:	81 2c       	mov	r8, r1
    8df4:	c1 2c       	mov	r12, r1
    8df6:	e9 80       	ldd	r14, Y+1	; 0x01
    8df8:	fa 80       	ldd	r15, Y+2	; 0x02
    8dfa:	0b 81       	ldd	r16, Y+3	; 0x03
    8dfc:	1c 81       	ldd	r17, Y+4	; 0x04
    8dfe:	2d 81       	ldd	r18, Y+5	; 0x05
    8e00:	41 e0       	ldi	r20, 0x01	; 1
    8e02:	0e 94 cc 48 	call	0x9198	; 0x9198 <do_menu_item>
    8e06:	0f 90       	pop	r0
    8e08:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    8e0a:	80 91 e8 08 	lds	r24, 0x08E8
    8e0e:	80 3e       	cpi	r24, 0xE0	; 224
    8e10:	31 f0       	breq	.+12     	; 0x8e1e <menu_channel+0x108>
	{
		sub_top = CHSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    8e12:	80 91 e8 08 	lds	r24, 0x08E8
    8e16:	80 37       	cpi	r24, 0x70	; 112
    8e18:	09 f0       	breq	.+2      	; 0x8e1c <menu_channel+0x106>
    8e1a:	9b cf       	rjmp	.-202    	; 0x8d52 <menu_channel+0x3c>
    8e1c:	13 c0       	rjmp	.+38     	; 0x8e44 <menu_channel+0x12e>

		// Update limits when exiting
		if (button == ENTER)
		{
			// Update current channel order with the custom one on exit
			if (Config.TxSeq == CUSTOM)
    8e1e:	80 91 44 06 	lds	r24, 0x0644
    8e22:	83 30       	cpi	r24, 0x03	; 3
    8e24:	51 f4       	brne	.+20     	; 0x8e3a <menu_channel+0x124>
    8e26:	ee e5       	ldi	r30, 0x5E	; 94
    8e28:	f8 e0       	ldi	r31, 0x08	; 8
    8e2a:	a9 e1       	ldi	r26, 0x19	; 25
    8e2c:	b6 e0       	ldi	r27, 0x06	; 6
			{
				for (i = 0; i < MAX_RC_CHANNELS; i++)
				{
					Config.ChannelOrder[i] = Config.CustomChannelOrder[i];
    8e2e:	81 91       	ld	r24, Z+
    8e30:	8d 93       	st	X+, r24
		if (button == ENTER)
		{
			// Update current channel order with the custom one on exit
			if (Config.TxSeq == CUSTOM)
			{
				for (i = 0; i < MAX_RC_CHANNELS; i++)
    8e32:	88 e0       	ldi	r24, 0x08	; 8
    8e34:	e6 36       	cpi	r30, 0x66	; 102
    8e36:	f8 07       	cpc	r31, r24
    8e38:	d1 f7       	brne	.-12     	; 0x8e2e <menu_channel+0x118>
				{
					Config.ChannelOrder[i] = Config.CustomChannelOrder[i];
				}
			}
			
			Save_Config_to_EEPROM(); // Save value and return
    8e3a:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    8e3e:	0e 94 be 51 	call	0xa37c	; 0xa37c <Wait_BUTTON4>
    8e42:	e7 cf       	rjmp	.-50     	; 0x8e12 <menu_channel+0xfc>
		}
	}
}
    8e44:	0f 90       	pop	r0
    8e46:	0f 90       	pop	r0
    8e48:	0f 90       	pop	r0
    8e4a:	0f 90       	pop	r0
    8e4c:	0f 90       	pop	r0
    8e4e:	df 91       	pop	r29
    8e50:	cf 91       	pop	r28
    8e52:	1f 91       	pop	r17
    8e54:	0f 91       	pop	r16
    8e56:	ff 90       	pop	r15
    8e58:	ef 90       	pop	r14
    8e5a:	df 90       	pop	r13
    8e5c:	cf 90       	pop	r12
    8e5e:	bf 90       	pop	r11
    8e60:	af 90       	pop	r10
    8e62:	8f 90       	pop	r8
    8e64:	08 95       	ret

00008e66 <menu_curves>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_curves(void)
{
    8e66:	af 92       	push	r10
    8e68:	bf 92       	push	r11
    8e6a:	cf 92       	push	r12
    8e6c:	df 92       	push	r13
    8e6e:	ef 92       	push	r14
    8e70:	ff 92       	push	r15
    8e72:	0f 93       	push	r16
    8e74:	1f 93       	push	r17
    8e76:	cf 93       	push	r28
	int8_t *value_ptr;
	uint16_t reference = CURVESSTARTE;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    8e78:	80 91 08 05 	lds	r24, 0x0508
    8e7c:	88 23       	and	r24, r24
    8e7e:	41 f0       	breq	.+16     	; 0x8e90 <menu_curves+0x2a>
	{
		sub_top = CURVESSTARTE;			
    8e80:	83 e9       	ldi	r24, 0x93	; 147
    8e82:	91 e0       	ldi	r25, 0x01	; 1
    8e84:	90 93 4e 05 	sts	0x054E, r25
    8e88:	80 93 4d 05 	sts	0x054D, r24
		menu_flag = 0;
    8e8c:	10 92 08 05 	sts	0x0508, r1

		// Stop unwanted exit to main menu
		if (button == ABORT)
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
			button = NONE;
    8e90:	c0 ef       	ldi	r28, 0xF0	; 240
	{
		sub_top = CURVESSTARTE;			
		menu_flag = 0;
	}

	while(button != BACK)
    8e92:	80 91 e8 08 	lds	r24, 0x08E8
    8e96:	80 37       	cpi	r24, 0x70	; 112
    8e98:	09 f4       	brne	.+2      	; 0x8e9c <menu_curves+0x36>
    8e9a:	4b c0       	rjmp	.+150    	; 0x8f32 <menu_curves+0xcc>
	{
		value_ptr = &Config.Curve[0].Point1;

		// Print top level menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)Curves_menu_ranges, 0, (const uint16_t*)CurvesMenuOffsets, (const uint16_t*)CurvesMenuText, cursor);
    8e9c:	a0 90 04 05 	lds	r10, 0x0504
    8ea0:	b0 90 05 05 	lds	r11, 0x0505
    8ea4:	81 ee       	ldi	r24, 0xE1	; 225
    8ea6:	c8 2e       	mov	r12, r24
    8ea8:	85 e2       	ldi	r24, 0x25	; 37
    8eaa:	d8 2e       	mov	r13, r24
    8eac:	95 ed       	ldi	r25, 0xD5	; 213
    8eae:	e9 2e       	mov	r14, r25
    8eb0:	95 e2       	ldi	r25, 0x25	; 37
    8eb2:	f9 2e       	mov	r15, r25
    8eb4:	00 e0       	ldi	r16, 0x00	; 0
    8eb6:	25 ee       	ldi	r18, 0xE5	; 229
    8eb8:	34 e2       	ldi	r19, 0x24	; 36
    8eba:	4e e2       	ldi	r20, 0x2E	; 46
    8ebc:	58 e0       	ldi	r21, 0x08	; 8
    8ebe:	63 e9       	ldi	r22, 0x93	; 147
    8ec0:	71 e0       	ldi	r23, 0x01	; 1
    8ec2:	80 91 4d 05 	lds	r24, 0x054D
    8ec6:	90 91 4e 05 	lds	r25, 0x054E
    8eca:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <print_menu_items>

		// Handle menu navigation
		update_menu(NUMBEROFCURVES, reference, 0, button, &cursor, &sub_top, &menu_temp);
    8ece:	28 e4       	ldi	r18, 0x48	; 72
    8ed0:	c2 2e       	mov	r12, r18
    8ed2:	25 e0       	ldi	r18, 0x05	; 5
    8ed4:	d2 2e       	mov	r13, r18
    8ed6:	3d e4       	ldi	r19, 0x4D	; 77
    8ed8:	e3 2e       	mov	r14, r19
    8eda:	35 e0       	ldi	r19, 0x05	; 5
    8edc:	f3 2e       	mov	r15, r19
    8ede:	04 e0       	ldi	r16, 0x04	; 4
    8ee0:	15 e0       	ldi	r17, 0x05	; 5
    8ee2:	20 91 e8 08 	lds	r18, 0x08E8
    8ee6:	40 e0       	ldi	r20, 0x00	; 0
    8ee8:	50 e0       	ldi	r21, 0x00	; 0
    8eea:	63 e9       	ldi	r22, 0x93	; 147
    8eec:	71 e0       	ldi	r23, 0x01	; 1
    8eee:	86 e0       	ldi	r24, 0x06	; 6
    8ef0:	90 e0       	ldi	r25, 0x00	; 0
    8ef2:	0e 94 9b 4e 	call	0x9d36	; 0x9d36 <update_menu>

		// Edit selected curve
		if (button == ENTER)
    8ef6:	80 91 e8 08 	lds	r24, 0x08E8
    8efa:	80 3e       	cpi	r24, 0xE0	; 224
    8efc:	31 f4       	brne	.+12     	; 0x8f0a <menu_curves+0xa4>
		{
			edit_curve_item(menu_temp - reference, CURVE);
    8efe:	80 91 48 05 	lds	r24, 0x0548
    8f02:	64 e0       	ldi	r22, 0x04	; 4
    8f04:	83 59       	subi	r24, 0x93	; 147
    8f06:	0e 94 99 4a 	call	0x9532	; 0x9532 <edit_curve_item>
		}

		// Stop unwanted exit to main menu
		if (button == ABORT)
    8f0a:	80 91 e8 08 	lds	r24, 0x08E8
    8f0e:	80 3a       	cpi	r24, 0xA0	; 160
    8f10:	21 f4       	brne	.+8      	; 0x8f1a <menu_curves+0xb4>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    8f12:	0e 94 28 51 	call	0xa250	; 0xa250 <Wait_BUTTON1>
			button = NONE;
    8f16:	c0 93 e8 08 	sts	0x08E8, r28
		}

		// Update limits when exiting
		if (button == ENTER)
    8f1a:	80 91 e8 08 	lds	r24, 0x08E8
    8f1e:	80 3e       	cpi	r24, 0xE0	; 224
    8f20:	09 f0       	breq	.+2      	; 0x8f24 <menu_curves+0xbe>
    8f22:	b7 cf       	rjmp	.-146    	; 0x8e92 <menu_curves+0x2c>
		{
			Save_Config_to_EEPROM(); // Save value and return
    8f24:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    8f28:	0e 94 be 51 	call	0xa37c	; 0xa37c <Wait_BUTTON4>
			Wait_BUTTON1();	
    8f2c:	0e 94 28 51 	call	0xa250	; 0xa250 <Wait_BUTTON1>
    8f30:	b0 cf       	rjmp	.-160    	; 0x8e92 <menu_curves+0x2c>
		}
	}
}
    8f32:	cf 91       	pop	r28
    8f34:	1f 91       	pop	r17
    8f36:	0f 91       	pop	r16
    8f38:	ff 90       	pop	r15
    8f3a:	ef 90       	pop	r14
    8f3c:	df 90       	pop	r13
    8f3e:	cf 90       	pop	r12
    8f40:	bf 90       	pop	r11
    8f42:	af 90       	pop	r10
    8f44:	08 95       	ret

00008f46 <print_menu_frame>:
//************************************************************
// Print basic menu frame
// style = menu style
//************************************************************
void print_menu_frame(uint8_t style)
{
    8f46:	cf 93       	push	r28
    8f48:	c8 2f       	mov	r28, r24
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    8f4a:	2b e3       	ldi	r18, 0x3B	; 59
    8f4c:	30 e0       	ldi	r19, 0x00	; 0
    8f4e:	46 e2       	ldi	r20, 0x26	; 38
    8f50:	50 e0       	ldi	r21, 0x00	; 0
    8f52:	6d ee       	ldi	r22, 0xED	; 237
    8f54:	71 e0       	ldi	r23, 0x01	; 1
    8f56:	8a e0       	ldi	r24, 0x0A	; 10
    8f58:	90 e0       	ldi	r25, 0x00	; 0
    8f5a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    8f5e:	2b e3       	ldi	r18, 0x3B	; 59
    8f60:	30 e0       	ldi	r19, 0x00	; 0
    8f62:	40 e5       	ldi	r20, 0x50	; 80
    8f64:	50 e0       	ldi	r21, 0x00	; 0
    8f66:	6d ee       	ldi	r22, 0xED	; 237
    8f68:	71 e0       	ldi	r23, 0x01	; 1
    8f6a:	89 e0       	ldi	r24, 0x09	; 9
    8f6c:	90 e0       	ldi	r25, 0x00	; 0
    8f6e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

	switch (style)
    8f72:	c3 30       	cpi	r28, 0x03	; 3
    8f74:	41 f1       	breq	.+80     	; 0x8fc6 <print_menu_frame+0x80>
    8f76:	70 f4       	brcc	.+28     	; 0x8f94 <print_menu_frame+0x4e>
    8f78:	cc 23       	and	r28, r28
    8f7a:	c1 f1       	breq	.+112    	; 0x8fec <print_menu_frame+0xa6>
    8f7c:	c1 30       	cpi	r28, 0x01	; 1
    8f7e:	09 f0       	breq	.+2      	; 0x8f82 <print_menu_frame+0x3c>
    8f80:	7a c0       	rjmp	.+244    	; 0x9076 <print_menu_frame+0x130>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
			break;
			
		case EDIT:
			// For editing items
			LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Def.
    8f82:	26 e3       	ldi	r18, 0x36	; 54
    8f84:	30 e0       	ldi	r19, 0x00	; 0
    8f86:	40 e0       	ldi	r20, 0x00	; 0
    8f88:	50 e0       	ldi	r21, 0x00	; 0
    8f8a:	6b e7       	ldi	r22, 0x7B	; 123
    8f8c:	7f e0       	ldi	r23, 0x0F	; 15
    8f8e:	80 e1       	ldi	r24, 0x10	; 16
    8f90:	90 e0       	ldi	r25, 0x00	; 0
    8f92:	0e c0       	rjmp	.+28     	; 0x8fb0 <print_menu_frame+0x6a>
void print_menu_frame(uint8_t style)
{
	LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down

	switch (style)
    8f94:	c5 30       	cpi	r28, 0x05	; 5
    8f96:	e9 f1       	breq	.+122    	; 0x9012 <print_menu_frame+0xcc>
    8f98:	48 f1       	brcs	.+82     	; 0x8fec <print_menu_frame+0xa6>
    8f9a:	c0 3a       	cpi	r28, 0xA0	; 160
    8f9c:	09 f0       	breq	.+2      	; 0x8fa0 <print_menu_frame+0x5a>
    8f9e:	6b c0       	rjmp	.+214    	; 0x9076 <print_menu_frame+0x130>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
			break;
			
		case ABORT:
			// Save or abort
			LCD_Display_Text(280, (const unsigned char*)Verdana8, 0, 54); 	// Abort
    8fa0:	26 e3       	ldi	r18, 0x36	; 54
    8fa2:	30 e0       	ldi	r19, 0x00	; 0
    8fa4:	40 e0       	ldi	r20, 0x00	; 0
    8fa6:	50 e0       	ldi	r21, 0x00	; 0
    8fa8:	6b e7       	ldi	r22, 0x7B	; 123
    8faa:	7f e0       	ldi	r23, 0x0F	; 15
    8fac:	88 e1       	ldi	r24, 0x18	; 24
    8fae:	91 e0       	ldi	r25, 0x01	; 1
    8fb0:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    8fb4:	26 e3       	ldi	r18, 0x36	; 54
    8fb6:	30 e0       	ldi	r19, 0x00	; 0
    8fb8:	47 e6       	ldi	r20, 0x67	; 103
    8fba:	50 e0       	ldi	r21, 0x00	; 0
    8fbc:	6b e7       	ldi	r22, 0x7B	; 123
    8fbe:	7f e0       	ldi	r23, 0x0F	; 15
    8fc0:	81 e1       	ldi	r24, 0x11	; 17
    8fc2:	90 e0       	ldi	r25, 0x00	; 0
    8fc4:	56 c0       	rjmp	.+172    	; 0x9072 <print_menu_frame+0x12c>
			break;
			
		case LOG:
			// Clear or exit
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    8fc6:	29 e3       	ldi	r18, 0x39	; 57
    8fc8:	30 e0       	ldi	r19, 0x00	; 0
    8fca:	40 e0       	ldi	r20, 0x00	; 0
    8fcc:	50 e0       	ldi	r21, 0x00	; 0
    8fce:	6d ee       	ldi	r22, 0xED	; 237
    8fd0:	71 e0       	ldi	r23, 0x01	; 1
    8fd2:	8c e0       	ldi	r24, 0x0C	; 12
    8fd4:	90 e0       	ldi	r25, 0x00	; 0
    8fd6:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			LCD_Display_Text(291, (const unsigned char*)Verdana8, 100, 54);	// Clear
    8fda:	26 e3       	ldi	r18, 0x36	; 54
    8fdc:	30 e0       	ldi	r19, 0x00	; 0
    8fde:	44 e6       	ldi	r20, 0x64	; 100
    8fe0:	50 e0       	ldi	r21, 0x00	; 0
    8fe2:	6b e7       	ldi	r22, 0x7B	; 123
    8fe4:	7f e0       	ldi	r23, 0x0F	; 15
    8fe6:	83 e2       	ldi	r24, 0x23	; 35
    8fe8:	91 e0       	ldi	r25, 0x01	; 1
    8fea:	43 c0       	rjmp	.+134    	; 0x9072 <print_menu_frame+0x12c>
			break;			

		case CURVE:
			// Curve edit screen
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    8fec:	29 e3       	ldi	r18, 0x39	; 57
    8fee:	30 e0       	ldi	r19, 0x00	; 0
    8ff0:	40 e0       	ldi	r20, 0x00	; 0
    8ff2:	50 e0       	ldi	r21, 0x00	; 0
    8ff4:	6d ee       	ldi	r22, 0xED	; 237
    8ff6:	71 e0       	ldi	r23, 0x01	; 1
    8ff8:	8c e0       	ldi	r24, 0x0C	; 12
    8ffa:	90 e0       	ldi	r25, 0x00	; 0
    8ffc:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    9000:	29 e3       	ldi	r18, 0x39	; 57
    9002:	30 e0       	ldi	r19, 0x00	; 0
    9004:	48 e7       	ldi	r20, 0x78	; 120
    9006:	50 e0       	ldi	r21, 0x00	; 0
    9008:	6d ee       	ldi	r22, 0xED	; 237
    900a:	71 e0       	ldi	r23, 0x01	; 1
    900c:	8b e0       	ldi	r24, 0x0B	; 11
    900e:	90 e0       	ldi	r25, 0x00	; 0
    9010:	30 c0       	rjmp	.+96     	; 0x9072 <print_menu_frame+0x12c>
			break;

		case OFFSET:
			// Offset curve edit screen
			LCD_Display_Text(48, (const unsigned char*)Verdana8, 10, 54); 	// P1
    9012:	26 e3       	ldi	r18, 0x36	; 54
    9014:	30 e0       	ldi	r19, 0x00	; 0
    9016:	4a e0       	ldi	r20, 0x0A	; 10
    9018:	50 e0       	ldi	r21, 0x00	; 0
    901a:	6b e7       	ldi	r22, 0x7B	; 123
    901c:	7f e0       	ldi	r23, 0x0F	; 15
    901e:	80 e3       	ldi	r24, 0x30	; 48
    9020:	90 e0       	ldi	r25, 0x00	; 0
    9022:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    9026:	29 e3       	ldi	r18, 0x39	; 57
    9028:	30 e0       	ldi	r19, 0x00	; 0
    902a:	40 e0       	ldi	r20, 0x00	; 0
    902c:	50 e0       	ldi	r21, 0x00	; 0
    902e:	6d ee       	ldi	r22, 0xED	; 237
    9030:	71 e0       	ldi	r23, 0x01	; 1
    9032:	8c e0       	ldi	r24, 0x0C	; 12
    9034:	90 e0       	ldi	r25, 0x00	; 0
    9036:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			LCD_Display_Text(49, (const unsigned char*)Verdana8, 55, 54); 	// P1.n	
    903a:	26 e3       	ldi	r18, 0x36	; 54
    903c:	30 e0       	ldi	r19, 0x00	; 0
    903e:	47 e3       	ldi	r20, 0x37	; 55
    9040:	50 e0       	ldi	r21, 0x00	; 0
    9042:	6b e7       	ldi	r22, 0x7B	; 123
    9044:	7f e0       	ldi	r23, 0x0F	; 15
    9046:	81 e3       	ldi	r24, 0x31	; 49
    9048:	90 e0       	ldi	r25, 0x00	; 0
    904a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    904e:	29 e3       	ldi	r18, 0x39	; 57
    9050:	30 e0       	ldi	r19, 0x00	; 0
    9052:	48 e7       	ldi	r20, 0x78	; 120
    9054:	50 e0       	ldi	r21, 0x00	; 0
    9056:	6d ee       	ldi	r22, 0xED	; 237
    9058:	71 e0       	ldi	r23, 0x01	; 1
    905a:	8b e0       	ldi	r24, 0x0B	; 11
    905c:	90 e0       	ldi	r25, 0x00	; 0
    905e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			LCD_Display_Text(50, (const unsigned char*)Verdana8, 107, 54);	// P2
    9062:	26 e3       	ldi	r18, 0x36	; 54
    9064:	30 e0       	ldi	r19, 0x00	; 0
    9066:	4b e6       	ldi	r20, 0x6B	; 107
    9068:	50 e0       	ldi	r21, 0x00	; 0
    906a:	6b e7       	ldi	r22, 0x7B	; 123
    906c:	7f e0       	ldi	r23, 0x0F	; 15
    906e:	82 e3       	ldi	r24, 0x32	; 50
    9070:	90 e0       	ldi	r25, 0x00	; 0
    9072:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    9076:	80 e0       	ldi	r24, 0x00	; 0
    9078:	91 e0       	ldi	r25, 0x01	; 1
}
    907a:	cf 91       	pop	r28
		default:
			break;
	}

	// Write from buffer
	write_buffer(buffer);
    907c:	0c 94 1b 35 	jmp	0x6a36	; 0x6a36 <write_buffer>

00009080 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    9080:	cf 93       	push	r28
    9082:	df 93       	push	r29
    9084:	cd b7       	in	r28, 0x3d	; 61
    9086:	de b7       	in	r29, 0x3e	; 62
    9088:	2a 97       	sbiw	r28, 0x0a	; 10
    908a:	0f b6       	in	r0, 0x3f	; 63
    908c:	f8 94       	cli
    908e:	de bf       	out	0x3e, r29	; 62
    9090:	0f be       	out	0x3f, r0	; 63
    9092:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    9094:	25 e0       	ldi	r18, 0x05	; 5
    9096:	62 9f       	mul	r22, r18
    9098:	80 0d       	add	r24, r0
    909a:	91 1d       	adc	r25, r1
    909c:	11 24       	eor	r1, r1
    909e:	bc 01       	movw	r22, r24
    90a0:	45 e0       	ldi	r20, 0x05	; 5
    90a2:	50 e0       	ldi	r21, 0x00	; 0
    90a4:	ce 01       	movw	r24, r28
    90a6:	06 96       	adiw	r24, 0x06	; 6
    90a8:	0e 94 c6 6c 	call	0xd98c	; 0xd98c <memcpy_P>
	return (range);
    90ac:	85 e0       	ldi	r24, 0x05	; 5
    90ae:	fe 01       	movw	r30, r28
    90b0:	36 96       	adiw	r30, 0x06	; 6
    90b2:	de 01       	movw	r26, r28
    90b4:	11 96       	adiw	r26, 0x01	; 1
    90b6:	01 90       	ld	r0, Z+
    90b8:	0d 92       	st	X+, r0
    90ba:	8a 95       	dec	r24
    90bc:	e1 f7       	brne	.-8      	; 0x90b6 <get_menu_range+0x36>
    90be:	29 81       	ldd	r18, Y+1	; 0x01
    90c0:	3a 81       	ldd	r19, Y+2	; 0x02
    90c2:	4b 81       	ldd	r20, Y+3	; 0x03
    90c4:	5c 81       	ldd	r21, Y+4	; 0x04
    90c6:	6d 81       	ldd	r22, Y+5	; 0x05
}
    90c8:	70 e0       	ldi	r23, 0x00	; 0
    90ca:	80 e0       	ldi	r24, 0x00	; 0
    90cc:	90 e0       	ldi	r25, 0x00	; 0
    90ce:	2a 96       	adiw	r28, 0x0a	; 10
    90d0:	0f b6       	in	r0, 0x3f	; 63
    90d2:	f8 94       	cli
    90d4:	de bf       	out	0x3e, r29	; 62
    90d6:	0f be       	out	0x3f, r0	; 63
    90d8:	cd bf       	out	0x3d, r28	; 61
    90da:	df 91       	pop	r29
    90dc:	cf 91       	pop	r28
    90de:	08 95       	ret

000090e0 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    90e0:	0f 93       	push	r16
    90e2:	1f 93       	push	r17
    90e4:	cf 93       	push	r28
    90e6:	df 93       	push	r29
    90e8:	fa 01       	movw	r30, r20
    90ea:	10 e0       	ldi	r17, 0x00	; 0
    90ec:	c2 2f       	mov	r28, r18
    90ee:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    90f0:	66 23       	and	r22, r22
    90f2:	19 f0       	breq	.+6      	; 0x90fa <print_menu_text+0x1a>
    90f4:	62 50       	subi	r22, 0x02	; 2
    90f6:	62 30       	cpi	r22, 0x02	; 2
    90f8:	78 f4       	brcc	.+30     	; 0x9118 <print_menu_text+0x38>
    90fa:	4a e0       	ldi	r20, 0x0A	; 10
    90fc:	65 ea       	ldi	r22, 0xA5	; 165
    90fe:	75 e0       	ldi	r23, 0x05	; 5
    9100:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    9104:	98 01       	movw	r18, r16
    9106:	ae 01       	movw	r20, r28
    9108:	6b e7       	ldi	r22, 0x7B	; 123
    910a:	7f e0       	ldi	r23, 0x0F	; 15
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    910c:	df 91       	pop	r29
    910e:	cf 91       	pop	r28
    9110:	1f 91       	pop	r17
    9112:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    9114:	0c 94 b2 60 	jmp	0xc164	; 0xc164 <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    9118:	98 01       	movw	r18, r16
    911a:	ae 01       	movw	r20, r28
    911c:	6b e7       	ldi	r22, 0x7B	; 123
    911e:	7f e0       	ldi	r23, 0x0F	; 15
    9120:	cf 01       	movw	r24, r30
	}
}
    9122:	df 91       	pop	r29
    9124:	cf 91       	pop	r28
    9126:	1f 91       	pop	r17
    9128:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    912a:	0c 94 2e 37 	jmp	0x6e5c	; 0x6e5c <LCD_Display_Text>

0000912e <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    912e:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    9130:	93 b1       	in	r25, 0x03	; 3
    9132:	90 7f       	andi	r25, 0xF0	; 240
    9134:	90 93 e8 08 	sts	0x08E8, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    9138:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    913a:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    913c:	90 91 e8 08 	lds	r25, 0x08E8
    9140:	90 3f       	cpi	r25, 0xF0	; 240
    9142:	c9 f4       	brne	.+50     	; 0x9176 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    9144:	83 b1       	in	r24, 0x03	; 3
    9146:	80 7f       	andi	r24, 0xF0	; 240
    9148:	e7 ea       	ldi	r30, 0xA7	; 167
    914a:	f1 e6       	ldi	r31, 0x61	; 97
    914c:	31 97       	sbiw	r30, 0x01	; 1
    914e:	f1 f7       	brne	.-4      	; 0x914c <poll_buttons+0x1e>
    9150:	00 c0       	rjmp	.+0      	; 0x9152 <poll_buttons+0x24>
    9152:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    9154:	23 b1       	in	r18, 0x03	; 3
    9156:	48 2f       	mov	r20, r24
    9158:	50 e0       	ldi	r21, 0x00	; 0
    915a:	20 7f       	andi	r18, 0xF0	; 240
    915c:	30 e0       	ldi	r19, 0x00	; 0
    915e:	42 17       	cp	r20, r18
    9160:	53 07       	cpc	r21, r19
    9162:	19 f4       	brne	.+6      	; 0x916a <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    9164:	80 93 e8 08 	sts	0x08E8, r24
    9168:	01 c0       	rjmp	.+2      	; 0x916c <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    916a:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    916c:	10 92 47 05 	sts	0x0547, r1
		button_multiplier = 1;
    9170:	70 93 e9 08 	sts	0x08E9, r23
    9174:	e3 cf       	rjmp	.-58     	; 0x913c <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    9176:	66 23       	and	r22, r22
    9178:	71 f0       	breq	.+28     	; 0x9196 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    917a:	90 91 47 05 	lds	r25, 0x0547
    917e:	9f 5f       	subi	r25, 0xFF	; 255
    9180:	90 93 47 05 	sts	0x0547, r25
		if (button_count >= 10)
    9184:	9a 30       	cpi	r25, 0x0A	; 10
    9186:	38 f0       	brcs	.+14     	; 0x9196 <poll_buttons+0x68>
		{
			button_count = 0;
    9188:	10 92 47 05 	sts	0x0547, r1
			button_multiplier ++;
    918c:	90 91 e9 08 	lds	r25, 0x08E9
    9190:	9f 5f       	subi	r25, 0xFF	; 255
    9192:	90 93 e9 08 	sts	0x08E9, r25
		}
	}

	return buttons;
}
    9196:	08 95       	ret

00009198 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    9198:	2f 92       	push	r2
    919a:	3f 92       	push	r3
    919c:	4f 92       	push	r4
    919e:	5f 92       	push	r5
    91a0:	6f 92       	push	r6
    91a2:	7f 92       	push	r7
    91a4:	8f 92       	push	r8
    91a6:	9f 92       	push	r9
    91a8:	af 92       	push	r10
    91aa:	bf 92       	push	r11
    91ac:	cf 92       	push	r12
    91ae:	df 92       	push	r13
    91b0:	ef 92       	push	r14
    91b2:	ff 92       	push	r15
    91b4:	0f 93       	push	r16
    91b6:	1f 93       	push	r17
    91b8:	cf 93       	push	r28
    91ba:	df 93       	push	r29
    91bc:	cd b7       	in	r28, 0x3d	; 61
    91be:	de b7       	in	r29, 0x3e	; 62
    91c0:	67 97       	sbiw	r28, 0x17	; 23
    91c2:	0f b6       	in	r0, 0x3f	; 63
    91c4:	f8 94       	cli
    91c6:	de bf       	out	0x3e, r29	; 62
    91c8:	0f be       	out	0x3f, r0	; 63
    91ca:	cd bf       	out	0x3d, r28	; 61
    91cc:	3c 01       	movw	r6, r24
    91ce:	79 8b       	std	Y+17, r23	; 0x11
    91d0:	68 8b       	std	Y+16, r22	; 0x10
    91d2:	4a 87       	std	Y+10, r20	; 0x0a
    91d4:	ed 82       	std	Y+5, r14	; 0x05
    91d6:	fe 82       	std	Y+6, r15	; 0x06
    91d8:	0f 83       	std	Y+7, r16	; 0x07
    91da:	18 87       	std	Y+8, r17	; 0x08
    91dc:	29 87       	std	Y+9, r18	; 0x09
    91de:	bd 8a       	std	Y+21, r11	; 0x15
    91e0:	ac 8a       	std	Y+20, r10	; 0x14
    91e2:	4e 2d       	mov	r20, r14
    91e4:	3f 2d       	mov	r19, r15
    91e6:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    91e8:	fb 01       	movw	r30, r22
    91ea:	20 81       	ld	r18, Z
    91ec:	a2 2e       	mov	r10, r18
    91ee:	bb 24       	eor	r11, r11
    91f0:	a7 fc       	sbrc	r10, 7
    91f2:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    91f4:	12 30       	cpi	r17, 0x02	; 2
    91f6:	29 f4       	brne	.+10     	; 0x9202 <do_menu_item+0x6a>
	{
		value = value * mult;
    91f8:	5a 85       	ldd	r21, Y+10	; 0x0a
    91fa:	25 03       	mulsu	r18, r21
    91fc:	50 01       	movw	r10, r0
    91fe:	11 24       	eor	r1, r1
    9200:	02 c0       	rjmp	.+4      	; 0x9206 <do_menu_item+0x6e>
	}
	else mult = 1;
    9202:	81 e0       	ldi	r24, 0x01	; 1
    9204:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    9206:	20 ef       	ldi	r18, 0xF0	; 240
    9208:	20 93 e8 08 	sts	0x08E8, r18
				value = (range.default_value * mult);				
			}
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    920c:	fa 85       	ldd	r31, Y+10	; 0x0a
    920e:	ef 2f       	mov	r30, r31
    9210:	f0 e0       	ldi	r31, 0x00	; 0
    9212:	fb 8b       	std	Y+19, r31	; 0x13
    9214:	ea 8b       	std	Y+18, r30	; 0x12
    9216:	2a 85       	ldd	r18, Y+10	; 0x0a
    9218:	42 03       	mulsu	r20, r18
    921a:	10 01       	movw	r2, r0
    921c:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    921e:	32 03       	mulsu	r19, r18
    9220:	c0 01       	movw	r24, r0
    9222:	11 24       	eor	r1, r1
    9224:	9f 87       	std	Y+15, r25	; 0x0f
    9226:	8e 87       	std	Y+14, r24	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    9228:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    922a:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    922c:	41 2c       	mov	r4, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    922e:	f1 2c       	mov	r15, r1
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    9230:	f3 01       	movw	r30, r6
    9232:	ee 0f       	add	r30, r30
    9234:	ff 1f       	adc	r31, r31
    9236:	e3 5c       	subi	r30, 0xC3	; 195
    9238:	fb 4e       	sbci	r31, 0xEB	; 235
    923a:	fc 87       	std	Y+12, r31	; 0x0c
    923c:	eb 87       	std	Y+11, r30	; 0x0b
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    923e:	2c 2d       	mov	r18, r12
    9240:	33 27       	eor	r19, r19
    9242:	27 fd       	sbrc	r18, 7
    9244:	30 95       	com	r19
    9246:	3f 8b       	std	Y+23, r19	; 0x17
    9248:	2e 8b       	std	Y+22, r18	; 0x16
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    924a:	0e ef       	ldi	r16, 0xFE	; 254
    924c:	01 0f       	add	r16, r17

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
				(servo_enable) &&
				(Config.Channel[servo_number].Motor_marker != MOTOR)
    924e:	82 e2       	ldi	r24, 0x22	; 34
    9250:	ec a5       	ldd	r30, Y+44	; 0x2c
    9252:	fd a5       	ldd	r31, Y+45	; 0x2d
    9254:	8e 9f       	mul	r24, r30
    9256:	60 01       	movw	r12, r0
    9258:	8f 9f       	mul	r24, r31
    925a:	d0 0c       	add	r13, r0
    925c:	11 24       	eor	r1, r1
    925e:	96 01       	movw	r18, r12
    9260:	2e 54       	subi	r18, 0x4E	; 78
    9262:	39 4f       	sbci	r19, 0xF9	; 249
    9264:	69 01       	movw	r12, r18
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
    9266:	80 91 e8 08 	lds	r24, 0x08E8
    926a:	28 2f       	mov	r18, r24
    926c:	2f 7b       	andi	r18, 0xBF	; 191
    926e:	20 3a       	cpi	r18, 0xA0	; 160
    9270:	09 f4       	brne	.+2      	; 0x9274 <do_menu_item+0xdc>
    9272:	38 c1       	rjmp	.+624    	; 0x94e4 <do_menu_item+0x34c>
		// Increment loop count so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    9274:	88 20       	and	r8, r8
    9276:	11 f0       	breq	.+4      	; 0x927c <do_menu_item+0xe4>
		{
			button_inc = 5; // For servos
    9278:	25 e0       	ldi	r18, 0x05	; 5
    927a:	01 c0       	rjmp	.+2      	; 0x927e <do_menu_item+0xe6>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    927c:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    927e:	80 3f       	cpi	r24, 0xF0	; 240
    9280:	19 f0       	breq	.+6      	; 0x9288 <do_menu_item+0xf0>
		{
			button_update++;
    9282:	43 94       	inc	r4

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    9284:	24 15       	cp	r18, r4
    9286:	10 f4       	brcc	.+4      	; 0x928c <do_menu_item+0xf4>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    9288:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    928a:	41 2c       	mov	r4, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    928c:	88 20       	and	r8, r8
    928e:	49 f0       	breq	.+18     	; 0x92a2 <do_menu_item+0x10a>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while ((button != ENTER) && (button != ABORT))
	{
		// Increment loop count so that we can time various things
		display_update++;
    9290:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    9292:	37 e0       	ldi	r19, 0x07	; 7
    9294:	3f 15       	cp	r19, r15
    9296:	10 f4       	brcc	.+4      	; 0x929c <do_menu_item+0x104>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    9298:	80 3f       	cpi	r24, 0xF0	; 240
    929a:	19 f4       	brne	.+6      	; 0x92a2 <do_menu_item+0x10a>
    929c:	99 23       	and	r25, r25
    929e:	09 f4       	brne	.+2      	; 0x92a2 <do_menu_item+0x10a>
    92a0:	84 c0       	rjmp	.+264    	; 0x93aa <do_menu_item+0x212>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    92a2:	80 e0       	ldi	r24, 0x00	; 0
    92a4:	91 e0       	ldi	r25, 0x01	; 1
    92a6:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>

			// Print warning
			if (range.style == 4)
    92aa:	14 30       	cpi	r17, 0x04	; 4
    92ac:	a9 f4       	brne	.+42     	; 0x92d8 <do_menu_item+0x140>
			{
				LCD_Display_Text(281,(const unsigned char*)Verdana8,0,0);	// Warning
    92ae:	20 e0       	ldi	r18, 0x00	; 0
    92b0:	30 e0       	ldi	r19, 0x00	; 0
    92b2:	40 e0       	ldi	r20, 0x00	; 0
    92b4:	50 e0       	ldi	r21, 0x00	; 0
    92b6:	6b e7       	ldi	r22, 0x7B	; 123
    92b8:	7f e0       	ldi	r23, 0x0F	; 15
    92ba:	89 e1       	ldi	r24, 0x19	; 25
    92bc:	91 e0       	ldi	r25, 0x01	; 1
    92be:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
				LCD_Display_Text(282,(const unsigned char*)Verdana8,25,12);
    92c2:	2c e0       	ldi	r18, 0x0C	; 12
    92c4:	30 e0       	ldi	r19, 0x00	; 0
    92c6:	49 e1       	ldi	r20, 0x19	; 25
    92c8:	50 e0       	ldi	r21, 0x00	; 0
    92ca:	6b e7       	ldi	r22, 0x7B	; 123
    92cc:	7f e0       	ldi	r23, 0x0F	; 15
    92ce:	8a e1       	ldi	r24, 0x1A	; 26
    92d0:	91 e0       	ldi	r25, 0x01	; 1
    92d2:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
    92d6:	38 c0       	rjmp	.+112    	; 0x9348 <do_menu_item+0x1b0>
			}
			// Print title
			else
			{
				gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);				
    92d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    92da:	fc 85       	ldd	r31, Y+12	; 0x0c
    92dc:	85 91       	lpm	r24, Z+
    92de:	94 91       	lpm	r25, Z
    92e0:	20 e0       	ldi	r18, 0x00	; 0
    92e2:	30 e0       	ldi	r19, 0x00	; 0
    92e4:	40 e0       	ldi	r20, 0x00	; 0
    92e6:	50 e0       	ldi	r21, 0x00	; 0
    92e8:	6d ec       	ldi	r22, 0xCD	; 205
    92ea:	74 e0       	ldi	r23, 0x04	; 4
    92ec:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <gLCDprint_Menu_P>
			}

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    92f0:	11 23       	and	r17, r17
    92f2:	11 f0       	breq	.+4      	; 0x92f8 <do_menu_item+0x160>
    92f4:	02 30       	cpi	r16, 0x02	; 2
    92f6:	40 f5       	brcc	.+80     	; 0x9348 <do_menu_item+0x1b0>
    92f8:	4a e0       	ldi	r20, 0x0A	; 10
    92fa:	65 ea       	ldi	r22, 0xA5	; 165
    92fc:	75 e0       	ldi	r23, 0x05	; 5
    92fe:	c5 01       	movw	r24, r10
    9300:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    9304:	ae 01       	movw	r20, r28
    9306:	4f 5f       	subi	r20, 0xFF	; 255
    9308:	5f 4f       	sbci	r21, 0xFF	; 255
    930a:	6d ec       	ldi	r22, 0xCD	; 205
    930c:	74 e0       	ldi	r23, 0x04	; 4
    930e:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    9312:	89 81       	ldd	r24, Y+1	; 0x01
    9314:	9a 81       	ldd	r25, Y+2	; 0x02
    9316:	70 e8       	ldi	r23, 0x80	; 128
    9318:	e7 2e       	mov	r14, r23
    931a:	f1 2c       	mov	r15, r1
    931c:	e8 1a       	sub	r14, r24
    931e:	f9 0a       	sbc	r15, r25
    9320:	f6 94       	lsr	r15
    9322:	e7 94       	ror	r14
    9324:	8e 89       	ldd	r24, Y+22	; 0x16
    9326:	9f 89       	ldd	r25, Y+23	; 0x17
    9328:	e8 0e       	add	r14, r24
    932a:	f9 1e       	adc	r15, r25
    932c:	4a e0       	ldi	r20, 0x0A	; 10
    932e:	65 ea       	ldi	r22, 0xA5	; 165
    9330:	75 e0       	ldi	r23, 0x05	; 5
    9332:	c5 01       	movw	r24, r10
    9334:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
    9338:	29 e1       	ldi	r18, 0x19	; 25
    933a:	30 e0       	ldi	r19, 0x00	; 0
    933c:	a7 01       	movw	r20, r14
    933e:	6d ec       	ldi	r22, 0xCD	; 205
    9340:	74 e0       	ldi	r23, 0x04	; 4
    9342:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
    9346:	29 c0       	rjmp	.+82     	; 0x939a <do_menu_item+0x202>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    9348:	ec 88       	ldd	r14, Y+20	; 0x14
    934a:	fd 88       	ldd	r15, Y+21	; 0x15
    934c:	ea 0c       	add	r14, r10
    934e:	fb 1c       	adc	r15, r11
    9350:	f7 01       	movw	r30, r14
    9352:	ee 0f       	add	r30, r30
    9354:	ff 1f       	adc	r31, r31
    9356:	e3 5c       	subi	r30, 0xC3	; 195
    9358:	fb 4e       	sbci	r31, 0xEB	; 235
    935a:	85 91       	lpm	r24, Z+
    935c:	94 91       	lpm	r25, Z
    935e:	0e 94 b1 5f 	call	0xbf62	; 0xbf62 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    9362:	ae 01       	movw	r20, r28
    9364:	4f 5f       	subi	r20, 0xFF	; 255
    9366:	5f 4f       	sbci	r21, 0xFF	; 255
    9368:	6d ec       	ldi	r22, 0xCD	; 205
    936a:	74 e0       	ldi	r23, 0x04	; 4
    936c:	85 ea       	ldi	r24, 0xA5	; 165
    936e:	95 e0       	ldi	r25, 0x05	; 5
    9370:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    9374:	89 81       	ldd	r24, Y+1	; 0x01
    9376:	9a 81       	ldd	r25, Y+2	; 0x02
    9378:	40 e8       	ldi	r20, 0x80	; 128
    937a:	50 e0       	ldi	r21, 0x00	; 0
    937c:	48 1b       	sub	r20, r24
    937e:	59 0b       	sbc	r21, r25
    9380:	56 95       	lsr	r21
    9382:	47 95       	ror	r20
    9384:	29 e1       	ldi	r18, 0x19	; 25
    9386:	30 e0       	ldi	r19, 0x00	; 0
    9388:	6d ec       	ldi	r22, 0xCD	; 205
    938a:	74 e0       	ldi	r23, 0x04	; 4
    938c:	c7 01       	movw	r24, r14
    938e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			}

			// Print appropriate menu frame
			// Save/Abort screen
			if (range.style == 4)
    9392:	14 30       	cpi	r17, 0x04	; 4
    9394:	11 f4       	brne	.+4      	; 0x939a <do_menu_item+0x202>
			{
				// Print bottom markers
				print_menu_frame(ABORT);				
    9396:	80 ea       	ldi	r24, 0xA0	; 160
    9398:	01 c0       	rjmp	.+2      	; 0x939c <do_menu_item+0x204>
			}
			// Save/default screen
			else
			{
				// Print bottom markers
				print_menu_frame(EDIT);				
    939a:	81 e0       	ldi	r24, 0x01	; 1
    939c:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <print_menu_frame>
			}

			// Write from buffer
			write_buffer(buffer);
    93a0:	80 e0       	ldi	r24, 0x00	; 0
    93a2:	91 e0       	ldi	r25, 0x01	; 1
    93a4:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    93a8:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
	
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    93aa:	12 30       	cpi	r17, 0x02	; 2
    93ac:	09 f1       	breq	.+66     	; 0x93f0 <do_menu_item+0x258>
    93ae:	60 f4       	brcc	.+24     	; 0x93c8 <do_menu_item+0x230>
    93b0:	11 23       	and	r17, r17
    93b2:	b1 f0       	breq	.+44     	; 0x93e0 <do_menu_item+0x248>
    93b4:	11 30       	cpi	r17, 0x01	; 1
    93b6:	69 f5       	brne	.+90     	; 0x9412 <do_menu_item+0x27a>
    93b8:	2f e3       	ldi	r18, 0x3F	; 63
    93ba:	32 e4       	ldi	r19, 0x42	; 66
    93bc:	5f e0       	ldi	r21, 0x0F	; 15
    93be:	21 50       	subi	r18, 0x01	; 1
    93c0:	30 40       	sbci	r19, 0x00	; 0
    93c2:	50 40       	sbci	r21, 0x00	; 0
    93c4:	e1 f7       	brne	.-8      	; 0x93be <do_menu_item+0x226>
    93c6:	23 c0       	rjmp	.+70     	; 0x940e <do_menu_item+0x276>
    93c8:	13 30       	cpi	r17, 0x03	; 3
    93ca:	d1 f0       	breq	.+52     	; 0x9400 <do_menu_item+0x268>
    93cc:	14 30       	cpi	r17, 0x04	; 4
    93ce:	09 f5       	brne	.+66     	; 0x9412 <do_menu_item+0x27a>
    93d0:	5f e3       	ldi	r21, 0x3F	; 63
    93d2:	82 e4       	ldi	r24, 0x42	; 66
    93d4:	9f e0       	ldi	r25, 0x0F	; 15
    93d6:	51 50       	subi	r21, 0x01	; 1
    93d8:	80 40       	sbci	r24, 0x00	; 0
    93da:	90 40       	sbci	r25, 0x00	; 0
    93dc:	e1 f7       	brne	.-8      	; 0x93d6 <do_menu_item+0x23e>
    93de:	17 c0       	rjmp	.+46     	; 0x940e <do_menu_item+0x276>
    93e0:	9f e7       	ldi	r25, 0x7F	; 127
    93e2:	ea e1       	ldi	r30, 0x1A	; 26
    93e4:	f6 e0       	ldi	r31, 0x06	; 6
    93e6:	91 50       	subi	r25, 0x01	; 1
    93e8:	e0 40       	sbci	r30, 0x00	; 0
    93ea:	f0 40       	sbci	r31, 0x00	; 0
    93ec:	e1 f7       	brne	.-8      	; 0x93e6 <do_menu_item+0x24e>
    93ee:	0f c0       	rjmp	.+30     	; 0x940e <do_menu_item+0x276>
    93f0:	8f e7       	ldi	r24, 0x7F	; 127
    93f2:	9a e1       	ldi	r25, 0x1A	; 26
    93f4:	e6 e0       	ldi	r30, 0x06	; 6
    93f6:	81 50       	subi	r24, 0x01	; 1
    93f8:	90 40       	sbci	r25, 0x00	; 0
    93fa:	e0 40       	sbci	r30, 0x00	; 0
    93fc:	e1 f7       	brne	.-8      	; 0x93f6 <do_menu_item+0x25e>
    93fe:	07 c0       	rjmp	.+14     	; 0x940e <do_menu_item+0x276>
    9400:	ff e7       	ldi	r31, 0x7F	; 127
    9402:	28 e3       	ldi	r18, 0x38	; 56
    9404:	31 e0       	ldi	r19, 0x01	; 1
    9406:	f1 50       	subi	r31, 0x01	; 1
    9408:	20 40       	sbci	r18, 0x00	; 0
    940a:	30 40       	sbci	r19, 0x00	; 0
    940c:	e1 f7       	brne	.-8      	; 0x9406 <do_menu_item+0x26e>
    940e:	00 c0       	rjmp	.+0      	; 0x9410 <do_menu_item+0x278>
    9410:	00 00       	nop
		}

		// Poll buttons when idle.
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    9412:	88 20       	and	r8, r8
    9414:	41 f0       	breq	.+16     	; 0x9426 <do_menu_item+0x28e>
		{
			button = (PINB & 0xf0);	
    9416:	83 b1       	in	r24, 0x03	; 3
    9418:	80 7f       	andi	r24, 0xF0	; 240
    941a:	80 93 e8 08 	sts	0x08E8, r24
			button_multiplier = 1;
    941e:	81 e0       	ldi	r24, 0x01	; 1
    9420:	80 93 e9 08 	sts	0x08E9, r24
    9424:	03 c0       	rjmp	.+6      	; 0x942c <do_menu_item+0x294>
		}
		else
		{
			poll_buttons(true);
    9426:	81 e0       	ldi	r24, 0x01	; 1
    9428:	0e 94 97 48 	call	0x912e	; 0x912e <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    942c:	80 91 e8 08 	lds	r24, 0x08E8
    9430:	80 3f       	cpi	r24, 0xF0	; 240
    9432:	69 f1       	breq	.+90     	; 0x948e <do_menu_item+0x2f6>
    9434:	88 20       	and	r8, r8
    9436:	c9 f0       	breq	.+50     	; 0x946a <do_menu_item+0x2d2>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    9438:	80 3d       	cpi	r24, 0xD0	; 208
    943a:	51 f4       	brne	.+20     	; 0x9450 <do_menu_item+0x2b8>
		{
			if (button_lock == false)
    943c:	51 10       	cpse	r5, r1
    943e:	76 c0       	rjmp	.+236    	; 0x952c <do_menu_item+0x394>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    9440:	80 91 e9 08 	lds	r24, 0x08E9
    9444:	ed 85       	ldd	r30, Y+13	; 0x0d
    9446:	e8 9f       	mul	r30, r24
    9448:	a0 18       	sub	r10, r0
    944a:	b1 08       	sbc	r11, r1
    944c:	11 24       	eor	r1, r1
    944e:	0b c0       	rjmp	.+22     	; 0x9466 <do_menu_item+0x2ce>
				button_update = 0;
			}
		}

		if (button == UP)
    9450:	80 3b       	cpi	r24, 0xB0	; 176
    9452:	81 f4       	brne	.+32     	; 0x9474 <do_menu_item+0x2dc>
		{
			if (button_lock == false)
    9454:	51 10       	cpse	r5, r1
    9456:	6a c0       	rjmp	.+212    	; 0x952c <do_menu_item+0x394>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    9458:	80 91 e9 08 	lds	r24, 0x08E9
    945c:	fd 85       	ldd	r31, Y+13	; 0x0d
    945e:	f8 9f       	mul	r31, r24
    9460:	a0 0c       	add	r10, r0
    9462:	b1 1c       	adc	r11, r1
    9464:	11 24       	eor	r1, r1
				button_update = 0;
    9466:	41 2c       	mov	r4, r1
    9468:	61 c0       	rjmp	.+194    	; 0x952c <do_menu_item+0x394>
		{
			button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    946a:	80 3d       	cpi	r24, 0xD0	; 208
    946c:	49 f3       	breq	.-46     	; 0x9440 <do_menu_item+0x2a8>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    946e:	80 3b       	cpi	r24, 0xB0	; 176
    9470:	99 f3       	breq	.-26     	; 0x9458 <do_menu_item+0x2c0>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    9472:	51 2c       	mov	r5, r1
				button_update = 0;
			}
		}

		// Handle button 1
		if (button == BACK)	
    9474:	80 37       	cpi	r24, 0x70	; 112
    9476:	59 f4       	brne	.+22     	; 0x948e <do_menu_item+0x2f6>
		{
			// Save/Abort screen
			if (range.style == 4)
    9478:	14 30       	cpi	r17, 0x04	; 4
    947a:	21 f4       	brne	.+8      	; 0x9484 <do_menu_item+0x2ec>
			{
				button = ABORT;
    947c:	80 ea       	ldi	r24, 0xA0	; 160
    947e:	80 93 e8 08 	sts	0x08E8, r24
    9482:	05 c0       	rjmp	.+10     	; 0x948e <do_menu_item+0x2f6>
			}
			else
			{
				value = (range.default_value * mult);				
    9484:	29 85       	ldd	r18, Y+9	; 0x09
    9486:	3a 85       	ldd	r19, Y+10	; 0x0a
    9488:	23 03       	mulsu	r18, r19
    948a:	50 01       	movw	r10, r0
    948c:	11 24       	eor	r1, r1
    948e:	a2 14       	cp	r10, r2
    9490:	b3 04       	cpc	r11, r3
    9492:	0c f4       	brge	.+2      	; 0x9496 <do_menu_item+0x2fe>
    9494:	51 01       	movw	r10, r2
    9496:	8e 85       	ldd	r24, Y+14	; 0x0e
    9498:	9f 85       	ldd	r25, Y+15	; 0x0f
    949a:	8a 15       	cp	r24, r10
    949c:	9b 05       	cpc	r25, r11
    949e:	0c f4       	brge	.+2      	; 0x94a2 <do_menu_item+0x30a>
    94a0:	5c 01       	movw	r10, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    94a2:	92 ea       	ldi	r25, 0xA2	; 162
    94a4:	69 16       	cp	r6, r25
    94a6:	71 04       	cpc	r7, r1
    94a8:	19 f4       	brne	.+6      	; 0x94b0 <do_menu_item+0x318>
		{
			st7565_set_brightness(value);
    94aa:	8a 2d       	mov	r24, r10
    94ac:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    94b0:	88 20       	and	r8, r8
    94b2:	b1 f0       	breq	.+44     	; 0x94e0 <do_menu_item+0x348>
				(servo_enable) &&
    94b4:	f6 01       	movw	r30, r12
    94b6:	80 81       	ld	r24, Z
    94b8:	82 30       	cpi	r24, 0x02	; 2
    94ba:	91 f0       	breq	.+36     	; 0x94e0 <do_menu_item+0x348>
				(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    94bc:	8a 2d       	mov	r24, r10
    94be:	0e 94 f9 56 	call	0xadf2	; 0xadf2 <scale_percent>

			// Scale motor from 2500~5000 to 1000~2000
			temp16 = ((temp16 << 2) + 5) / 10; 	// Round and convert
    94c2:	88 0f       	add	r24, r24
    94c4:	99 1f       	adc	r25, r25
    94c6:	88 0f       	add	r24, r24
    94c8:	99 1f       	adc	r25, r25
    94ca:	05 96       	adiw	r24, 0x05	; 5

			cli();
    94cc:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale motor from 2500~5000 to 1000~2000
			temp16 = ((temp16 << 2) + 5) / 10; 	// Round and convert
    94ce:	6a e0       	ldi	r22, 0x0A	; 10
    94d0:	70 e0       	ldi	r23, 0x00	; 0
    94d2:	0e 94 3a 6c 	call	0xd874	; 0xd874 <__divmodhi4>

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    94d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    94d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    94da:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <output_servo_ppm_asm3>
			sei();
    94de:	78 94       	sei
    94e0:	90 e0       	ldi	r25, 0x00	; 0
    94e2:	c1 ce       	rjmp	.-638    	; 0x9266 <do_menu_item+0xce>
		}

	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    94e4:	12 30       	cpi	r17, 0x02	; 2
    94e6:	31 f4       	brne	.+12     	; 0x94f4 <do_menu_item+0x35c>
	{
		value = value / mult;
    94e8:	c5 01       	movw	r24, r10
    94ea:	6a 89       	ldd	r22, Y+18	; 0x12
    94ec:	7b 89       	ldd	r23, Y+19	; 0x13
    94ee:	0e 94 3a 6c 	call	0xd874	; 0xd874 <__divmodhi4>
    94f2:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    94f4:	e8 89       	ldd	r30, Y+16	; 0x10
    94f6:	f9 89       	ldd	r31, Y+17	; 0x11
    94f8:	a0 82       	st	Z, r10
}
    94fa:	67 96       	adiw	r28, 0x17	; 23
    94fc:	0f b6       	in	r0, 0x3f	; 63
    94fe:	f8 94       	cli
    9500:	de bf       	out	0x3e, r29	; 62
    9502:	0f be       	out	0x3f, r0	; 63
    9504:	cd bf       	out	0x3d, r28	; 61
    9506:	df 91       	pop	r29
    9508:	cf 91       	pop	r28
    950a:	1f 91       	pop	r17
    950c:	0f 91       	pop	r16
    950e:	ff 90       	pop	r15
    9510:	ef 90       	pop	r14
    9512:	df 90       	pop	r13
    9514:	cf 90       	pop	r12
    9516:	bf 90       	pop	r11
    9518:	af 90       	pop	r10
    951a:	9f 90       	pop	r9
    951c:	8f 90       	pop	r8
    951e:	7f 90       	pop	r7
    9520:	6f 90       	pop	r6
    9522:	5f 90       	pop	r5
    9524:	4f 90       	pop	r4
    9526:	3f 90       	pop	r3
    9528:	2f 90       	pop	r2
    952a:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    952c:	55 24       	eor	r5, r5
    952e:	53 94       	inc	r5
    9530:	ae cf       	rjmp	.-164    	; 0x948e <do_menu_item+0x2f6>

00009532 <edit_curve_item>:
// type					= CURVE or OFFSET
// Curves_menu_ranges	= pointer to list of ranges for this curve
//************************************************************

void edit_curve_item(uint8_t curve, uint8_t type)
{
    9532:	2f 92       	push	r2
    9534:	3f 92       	push	r3
    9536:	4f 92       	push	r4
    9538:	5f 92       	push	r5
    953a:	6f 92       	push	r6
    953c:	7f 92       	push	r7
    953e:	8f 92       	push	r8
    9540:	9f 92       	push	r9
    9542:	af 92       	push	r10
    9544:	bf 92       	push	r11
    9546:	cf 92       	push	r12
    9548:	df 92       	push	r13
    954a:	ef 92       	push	r14
    954c:	ff 92       	push	r15
    954e:	0f 93       	push	r16
    9550:	1f 93       	push	r17
    9552:	cf 93       	push	r28
    9554:	df 93       	push	r29
    9556:	cd b7       	in	r28, 0x3d	; 61
    9558:	de b7       	in	r29, 0x3e	; 62
    955a:	e2 97       	sbiw	r28, 0x32	; 50
    955c:	0f b6       	in	r0, 0x3f	; 63
    955e:	f8 94       	cli
    9560:	de bf       	out	0x3e, r29	; 62
    9562:	0f be       	out	0x3f, r0	; 63
    9564:	cd bf       	out	0x3d, r28	; 61
    9566:	8d a3       	std	Y+37, r24	; 0x25
    9568:	6b a3       	std	Y+35, r22	; 0x23
	int8_t varbox_y = 0;
	int8_t chanbox_y = 0;	
	int8_t channel = THROTTLE;
	uint16_t reference = CURVESTARTE;
	
	button = NONE;
    956a:	80 ef       	ldi	r24, 0xF0	; 240
    956c:	80 93 e8 08 	sts	0x08E8, r24

	// Set the correct text list for the selected reference
	if (Config.P1_Reference != MODEL)
    9570:	80 91 a4 06 	lds	r24, 0x06A4
    9574:	82 30       	cpi	r24, 0x02	; 2
    9576:	29 f0       	breq	.+10     	; 0x9582 <edit_curve_item+0x50>
	{
		reference = CURVESTARTE;
    9578:	a5 ea       	ldi	r26, 0xA5	; 165
    957a:	2a 2e       	mov	r2, r26
    957c:	33 24       	eor	r3, r3
    957e:	33 94       	inc	r3
    9580:	04 c0       	rjmp	.+8      	; 0x958a <edit_curve_item+0x58>
	}
	else
	{
		reference = CURVESTARTM;
    9582:	fa eb       	ldi	r31, 0xBA	; 186
    9584:	2f 2e       	mov	r2, r31
    9586:	33 24       	eor	r3, r3
    9588:	33 94       	inc	r3
		{
			chanbox_y = 12;
		}
		else
		{
			chanbox_y = 51;
    958a:	1c a2       	std	Y+36, r1	; 0x24
    958c:	10 e0       	ldi	r17, 0x00	; 0
    958e:	c1 2c       	mov	r12, r1
    9590:	d1 2c       	mov	r13, r1
    9592:	2d a1       	ldd	r18, Y+37	; 0x25
    9594:	42 2e       	mov	r4, r18
    9596:	51 2c       	mov	r5, r1
			Points[6] = Config.Offsets[curve].Point7;
			channel	= Config.Offsets[curve].channel;
		}
		else
		{
			Points[0] = Config.Curve[curve].Point1;
    9598:	52 01       	movw	r10, r4
    959a:	73 e0       	ldi	r23, 0x03	; 3
    959c:	aa 0c       	add	r10, r10
    959e:	bb 1c       	adc	r11, r11
    95a0:	7a 95       	dec	r23
    95a2:	e1 f7       	brne	.-8      	; 0x959c <edit_curve_item+0x6a>
    95a4:	c5 01       	movw	r24, r10
    95a6:	88 5e       	subi	r24, 0xE8	; 232
    95a8:	99 4f       	sbci	r25, 0xF9	; 249
    95aa:	5c 01       	movw	r10, r24
			Points[1] = Config.Curve[curve].Point2;
			Points[2] = Config.Curve[curve].Point3;
    95ac:	d2 01       	movw	r26, r4
    95ae:	e3 e0       	ldi	r30, 0x03	; 3
    95b0:	aa 0f       	add	r26, r26
    95b2:	bb 1f       	adc	r27, r27
    95b4:	ea 95       	dec	r30
    95b6:	e1 f7       	brne	.-8      	; 0x95b0 <edit_curve_item+0x7e>
    95b8:	a0 5d       	subi	r26, 0xD0	; 208
    95ba:	b7 4f       	sbci	r27, 0xF7	; 247
    95bc:	bf a3       	std	Y+39, r27	; 0x27
    95be:	ae a3       	std	Y+38, r26	; 0x26
					break;
				case 6:
					value = Config.Offsets[curve].Point7;
					break;
				case 7:
					value = Config.Offsets[curve].channel;
    95c0:	fc 01       	movw	r30, r24
    95c2:	eb 5a       	subi	r30, 0xAB	; 171
    95c4:	fd 4f       	sbci	r31, 0xFD	; 253
    95c6:	fe a7       	std	Y+46, r31	; 0x2e
    95c8:	ed a7       	std	Y+45, r30	; 0x2d
					break;
			}
		}
		
		// Move value box when point 1 is in the way
		if (((Config.Curve[curve].Point1 < 50) && (type == CURVE)) || ((Config.Offsets[curve].Point1 < 50) && (type == OFFSET)))
    95ca:	4c 01       	movw	r8, r24
    95cc:	82 5b       	subi	r24, 0xB2	; 178
    95ce:	9d 4f       	sbci	r25, 0xFD	; 253
    95d0:	9c a7       	std	Y+44, r25	; 0x2c
    95d2:	8b a7       	std	Y+43, r24	; 0x2b
	{
		reference = CURVESTARTM;
	}

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	while ((button != ENTER) && (button != ABORT))
    95d4:	80 91 e8 08 	lds	r24, 0x08E8
    95d8:	8f 7b       	andi	r24, 0xBF	; 191
    95da:	80 3a       	cpi	r24, 0xA0	; 160
    95dc:	09 f4       	brne	.+2      	; 0x95e0 <edit_curve_item+0xae>
    95de:	7e c3       	rjmp	.+1788   	; 0x9cdc <edit_curve_item+0x7aa>
	{
		// Handle offset curves differently
		if (type == OFFSET)
    95e0:	9b a1       	ldd	r25, Y+35	; 0x23
		{
			// Get curve point ranges
			range = get_menu_range ((const unsigned char*)Offsets_menu_ranges[curve], Point_ref);
    95e2:	28 e2       	ldi	r18, 0x28	; 40

	// This is a loop that cycles until Button 4 is pressed (Save) or an Abort button
	while ((button != ENTER) && (button != ABORT))
	{
		// Handle offset curves differently
		if (type == OFFSET)
    95e4:	95 30       	cpi	r25, 0x05	; 5
    95e6:	49 f4       	brne	.+18     	; 0x95fa <edit_curve_item+0xc8>
		{
			// Get curve point ranges
			range = get_menu_range ((const unsigned char*)Offsets_menu_ranges[curve], Point_ref);
    95e8:	24 9d       	mul	r18, r4
    95ea:	c0 01       	movw	r24, r0
    95ec:	25 9d       	mul	r18, r5
    95ee:	90 0d       	add	r25, r0
    95f0:	11 24       	eor	r1, r1
    95f2:	61 2f       	mov	r22, r17
    95f4:	83 52       	subi	r24, 0x23	; 35
    95f6:	98 4d       	sbci	r25, 0xD8	; 216
    95f8:	08 c0       	rjmp	.+16     	; 0x960a <edit_curve_item+0xd8>
		}
		else
		{
			range = get_menu_range ((const unsigned char*)Curves_menu_ranges[curve], Point_ref);
    95fa:	24 9d       	mul	r18, r4
    95fc:	c0 01       	movw	r24, r0
    95fe:	25 9d       	mul	r18, r5
    9600:	90 0d       	add	r25, r0
    9602:	11 24       	eor	r1, r1
    9604:	61 2f       	mov	r22, r17
    9606:	8b 51       	subi	r24, 0x1B	; 27
    9608:	9b 4d       	sbci	r25, 0xDB	; 219
    960a:	0e 94 40 48 	call	0x9080	; 0x9080 <get_menu_range>
    960e:	2e 8b       	std	Y+22, r18	; 0x16
    9610:	3f 8b       	std	Y+23, r19	; 0x17
    9612:	48 8f       	std	Y+24, r20	; 0x18
    9614:	59 8f       	std	Y+25, r21	; 0x19
    9616:	6a 8f       	std	Y+26, r22	; 0x1a
    9618:	29 a7       	std	Y+41, r18	; 0x29
    961a:	3a a7       	std	Y+42, r19	; 0x2a
    961c:	f4 2e       	mov	r15, r20
		}

		// Display update
		clear_buffer(buffer);
    961e:	80 e0       	ldi	r24, 0x00	; 0
    9620:	91 e0       	ldi	r25, 0x01	; 1
    9622:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
		
		// Handle offset curves differently
		if (type == OFFSET)
    9626:	ab a1       	ldd	r26, Y+35	; 0x23
    9628:	a5 30       	cpi	r26, 0x05	; 5
    962a:	39 f4       	brne	.+14     	; 0x963a <edit_curve_item+0x108>
		{
			// Print graph frame
			print_menu_frame(OFFSET);
    962c:	85 e0       	ldi	r24, 0x05	; 5
    962e:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <print_menu_frame>
		}
		
		// Print axes
		if (type == OFFSET)
		{
			drawline(buffer, 64, 0, 64, 52, 1);		// Vertical
    9632:	ee 24       	eor	r14, r14
    9634:	e3 94       	inc	r14
    9636:	04 e3       	ldi	r16, 0x34	; 52
    9638:	06 c0       	rjmp	.+12     	; 0x9646 <edit_curve_item+0x114>
			print_menu_frame(OFFSET);
		}
		else
		{
			// Print graph frame
			print_menu_frame(CURVE);
    963a:	84 e0       	ldi	r24, 0x04	; 4
    963c:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <print_menu_frame>
		{
			drawline(buffer, 64, 0, 64, 52, 1);		// Vertical
		}
		else
		{
			drawline(buffer, 64, 0, 64, 57, 1);		// Vertical
    9640:	ee 24       	eor	r14, r14
    9642:	e3 94       	inc	r14
    9644:	09 e3       	ldi	r16, 0x39	; 57
    9646:	20 e4       	ldi	r18, 0x40	; 64
    9648:	40 e0       	ldi	r20, 0x00	; 0
    964a:	60 e4       	ldi	r22, 0x40	; 64
    964c:	80 e0       	ldi	r24, 0x00	; 0
    964e:	91 e0       	ldi	r25, 0x01	; 1
    9650:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
		}
		
		drawline(buffer, 0, 29, 128, 29, 1);	// Horizontal
    9654:	ee 24       	eor	r14, r14
    9656:	e3 94       	inc	r14
    9658:	0d e1       	ldi	r16, 0x1D	; 29
    965a:	20 e8       	ldi	r18, 0x80	; 128
    965c:	4d e1       	ldi	r20, 0x1D	; 29
    965e:	60 e0       	ldi	r22, 0x00	; 0
    9660:	80 e0       	ldi	r24, 0x00	; 0
    9662:	91 e0       	ldi	r25, 0x01	; 1
    9664:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
				
		// Get the current curve's data
		if (type == OFFSET)
    9668:	bb a1       	ldd	r27, Y+35	; 0x23
		{
			Points[0] = Config.Offsets[curve].Point1;
    966a:	f5 01       	movw	r30, r10
		}
		
		drawline(buffer, 0, 29, 128, 29, 1);	// Horizontal
				
		// Get the current curve's data
		if (type == OFFSET)
    966c:	b5 30       	cpi	r27, 0x05	; 5
    966e:	09 f0       	breq	.+2      	; 0x9672 <edit_curve_item+0x140>
    9670:	3f c0       	rjmp	.+126    	; 0x96f0 <edit_curve_item+0x1be>
		{
			Points[0] = Config.Offsets[curve].Point1;
    9672:	e2 5b       	subi	r30, 0xB2	; 178
    9674:	fd 4f       	sbci	r31, 0xFD	; 253
    9676:	80 81       	ld	r24, Z
    9678:	99 27       	eor	r25, r25
    967a:	87 fd       	sbrc	r24, 7
    967c:	90 95       	com	r25
    967e:	9a 83       	std	Y+2, r25	; 0x02
    9680:	89 83       	std	Y+1, r24	; 0x01
			Points[1] = Config.Offsets[curve].Point2;
    9682:	31 96       	adiw	r30, 0x01	; 1
    9684:	80 81       	ld	r24, Z
    9686:	99 27       	eor	r25, r25
    9688:	87 fd       	sbrc	r24, 7
    968a:	90 95       	com	r25
    968c:	9c 83       	std	Y+4, r25	; 0x04
    968e:	8b 83       	std	Y+3, r24	; 0x03
			Points[2] = Config.Offsets[curve].Point3;
    9690:	f2 01       	movw	r30, r4
    9692:	63 e0       	ldi	r22, 0x03	; 3
    9694:	ee 0f       	add	r30, r30
    9696:	ff 1f       	adc	r31, r31
    9698:	6a 95       	dec	r22
    969a:	e1 f7       	brne	.-8      	; 0x9694 <edit_curve_item+0x162>
    969c:	e8 59       	subi	r30, 0x98	; 152
    969e:	f7 4f       	sbci	r31, 0xF7	; 247
    96a0:	80 81       	ld	r24, Z
    96a2:	99 27       	eor	r25, r25
    96a4:	87 fd       	sbrc	r24, 7
    96a6:	90 95       	com	r25
    96a8:	9e 83       	std	Y+6, r25	; 0x06
    96aa:	8d 83       	std	Y+5, r24	; 0x05
			Points[3] = Config.Offsets[curve].Point4;
    96ac:	f5 01       	movw	r30, r10
    96ae:	ef 5a       	subi	r30, 0xAF	; 175
    96b0:	fd 4f       	sbci	r31, 0xFD	; 253
    96b2:	80 81       	ld	r24, Z
    96b4:	99 27       	eor	r25, r25
    96b6:	87 fd       	sbrc	r24, 7
    96b8:	90 95       	com	r25
    96ba:	98 87       	std	Y+8, r25	; 0x08
    96bc:	8f 83       	std	Y+7, r24	; 0x07
			Points[4] = Config.Offsets[curve].Point5;
    96be:	31 96       	adiw	r30, 0x01	; 1
    96c0:	80 81       	ld	r24, Z
    96c2:	99 27       	eor	r25, r25
    96c4:	87 fd       	sbrc	r24, 7
    96c6:	90 95       	com	r25
    96c8:	9a 87       	std	Y+10, r25	; 0x0a
    96ca:	89 87       	std	Y+9, r24	; 0x09
			Points[5] = Config.Offsets[curve].Point6;
    96cc:	31 96       	adiw	r30, 0x01	; 1
    96ce:	80 81       	ld	r24, Z
    96d0:	99 27       	eor	r25, r25
    96d2:	87 fd       	sbrc	r24, 7
    96d4:	90 95       	com	r25
    96d6:	9c 87       	std	Y+12, r25	; 0x0c
    96d8:	8b 87       	std	Y+11, r24	; 0x0b
			Points[6] = Config.Offsets[curve].Point7;
    96da:	31 96       	adiw	r30, 0x01	; 1
    96dc:	80 81       	ld	r24, Z
    96de:	99 27       	eor	r25, r25
    96e0:	87 fd       	sbrc	r24, 7
    96e2:	90 95       	com	r25
    96e4:	9e 87       	std	Y+14, r25	; 0x0e
    96e6:	8d 87       	std	Y+13, r24	; 0x0d
			channel	= Config.Offsets[curve].channel;
    96e8:	31 96       	adiw	r30, 0x01	; 1
    96ea:	20 81       	ld	r18, Z
    96ec:	28 a7       	std	Y+40, r18	; 0x28
    96ee:	36 c0       	rjmp	.+108    	; 0x975c <edit_curve_item+0x22a>
		}
		else
		{
			Points[0] = Config.Curve[curve].Point1;
    96f0:	ea 5e       	subi	r30, 0xEA	; 234
    96f2:	fd 4f       	sbci	r31, 0xFD	; 253
    96f4:	80 81       	ld	r24, Z
    96f6:	99 27       	eor	r25, r25
    96f8:	87 fd       	sbrc	r24, 7
    96fa:	90 95       	com	r25
    96fc:	9a 83       	std	Y+2, r25	; 0x02
    96fe:	89 83       	std	Y+1, r24	; 0x01
			Points[1] = Config.Curve[curve].Point2;
    9700:	31 96       	adiw	r30, 0x01	; 1
    9702:	80 81       	ld	r24, Z
    9704:	99 27       	eor	r25, r25
    9706:	87 fd       	sbrc	r24, 7
    9708:	90 95       	com	r25
    970a:	9c 83       	std	Y+4, r25	; 0x04
    970c:	8b 83       	std	Y+3, r24	; 0x03
			Points[2] = Config.Curve[curve].Point3;
    970e:	ae a1       	ldd	r26, Y+38	; 0x26
    9710:	bf a1       	ldd	r27, Y+39	; 0x27
    9712:	8c 91       	ld	r24, X
    9714:	99 27       	eor	r25, r25
    9716:	87 fd       	sbrc	r24, 7
    9718:	90 95       	com	r25
    971a:	9e 83       	std	Y+6, r25	; 0x06
    971c:	8d 83       	std	Y+5, r24	; 0x05
			Points[3] = Config.Curve[curve].Point4;
    971e:	32 96       	adiw	r30, 0x02	; 2
    9720:	80 81       	ld	r24, Z
    9722:	99 27       	eor	r25, r25
    9724:	87 fd       	sbrc	r24, 7
    9726:	90 95       	com	r25
    9728:	98 87       	std	Y+8, r25	; 0x08
    972a:	8f 83       	std	Y+7, r24	; 0x07
			Points[4] = Config.Curve[curve].Point5;
    972c:	31 96       	adiw	r30, 0x01	; 1
    972e:	80 81       	ld	r24, Z
    9730:	99 27       	eor	r25, r25
    9732:	87 fd       	sbrc	r24, 7
    9734:	90 95       	com	r25
    9736:	9a 87       	std	Y+10, r25	; 0x0a
    9738:	89 87       	std	Y+9, r24	; 0x09
			Points[5] = Config.Curve[curve].Point6;
    973a:	31 96       	adiw	r30, 0x01	; 1
    973c:	80 81       	ld	r24, Z
    973e:	99 27       	eor	r25, r25
    9740:	87 fd       	sbrc	r24, 7
    9742:	90 95       	com	r25
    9744:	9c 87       	std	Y+12, r25	; 0x0c
    9746:	8b 87       	std	Y+11, r24	; 0x0b
			Points[6] = Config.Curve[curve].Point7;
    9748:	31 96       	adiw	r30, 0x01	; 1
    974a:	80 81       	ld	r24, Z
    974c:	99 27       	eor	r25, r25
    974e:	87 fd       	sbrc	r24, 7
    9750:	90 95       	com	r25
    9752:	9e 87       	std	Y+14, r25	; 0x0e
    9754:	8d 87       	std	Y+13, r24	; 0x0d
			channel	= Config.Curve[curve].channel;			
    9756:	31 96       	adiw	r30, 0x01	; 1
    9758:	b0 81       	ld	r27, Z
    975a:	b8 a7       	std	Y+40, r27	; 0x28
    975c:	3e 01       	movw	r6, r28
    975e:	ef e0       	ldi	r30, 0x0F	; 15
    9760:	6e 0e       	add	r6, r30
    9762:	71 1c       	adc	r7, r1
    9764:	ce 01       	movw	r24, r28
    9766:	01 96       	adiw	r24, 0x01	; 1
    9768:	98 a3       	std	Y+32, r25	; 0x20
    976a:	8f 8f       	std	Y+31, r24	; 0x1f
		}

		// Calculate and draw points
		for (i = 0; i < 7; i++)
    976c:	30 e0       	ldi	r19, 0x00	; 0
    976e:	6f a6       	std	Y+47, r6	; 0x2f
    9770:	78 aa       	std	Y+48, r7	; 0x30
		{
			// Interpolate points for the offset graph
			if (type == CURVE)
    9772:	9b a1       	ldd	r25, Y+35	; 0x23
    9774:	94 30       	cpi	r25, 0x04	; 4
    9776:	b9 f4       	brne	.+46     	; 0x97a6 <edit_curve_item+0x274>
			{
				// Curves 0 to 100
				if (curve < 2)
    9778:	ad a1       	ldd	r26, Y+37	; 0x25
				{
					InterPoints[i] = (int8_t)(54 - ((Points[i] * 50) / 100));				
    977a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    977c:	f8 a1       	ldd	r31, Y+32	; 0x20
    977e:	80 81       	ld	r24, Z
    9780:	91 81       	ldd	r25, Z+1	; 0x01
		{
			// Interpolate points for the offset graph
			if (type == CURVE)
			{
				// Curves 0 to 100
				if (curve < 2)
    9782:	a2 30       	cpi	r26, 0x02	; 2
    9784:	30 f4       	brcc	.+12     	; 0x9792 <edit_curve_item+0x260>
				{
					InterPoints[i] = (int8_t)(54 - ((Points[i] * 50) / 100));				
    9786:	97 fd       	sbrc	r25, 7
    9788:	01 96       	adiw	r24, 0x01	; 1
    978a:	95 95       	asr	r25
    978c:	87 95       	ror	r24
    978e:	f6 e3       	ldi	r31, 0x36	; 54
    9790:	07 c0       	rjmp	.+14     	; 0x97a0 <edit_curve_item+0x26e>
				}
				// Curves -100 to -100
				else
				{
					InterPoints[i] = (int8_t)(29 - ((Points[i] * 50) / 200));			
    9792:	97 fd       	sbrc	r25, 7
    9794:	03 96       	adiw	r24, 0x03	; 3
    9796:	95 95       	asr	r25
    9798:	87 95       	ror	r24
    979a:	95 95       	asr	r25
    979c:	87 95       	ror	r24
    979e:	fd e1       	ldi	r31, 0x1D	; 29
    97a0:	f8 1b       	sub	r31, r24
    97a2:	8f 2f       	mov	r24, r31
    97a4:	0a c0       	rjmp	.+20     	; 0x97ba <edit_curve_item+0x288>
				}
			}
			// Curves -125 to -125
			else
			{
				InterPoints[i] = (int8_t)(29 - ((Points[i] * 50) / 250));
    97a6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    97a8:	f8 a1       	ldd	r31, Y+32	; 0x20
    97aa:	80 81       	ld	r24, Z
    97ac:	91 81       	ldd	r25, Z+1	; 0x01
    97ae:	65 e0       	ldi	r22, 0x05	; 5
    97b0:	70 e0       	ldi	r23, 0x00	; 0
    97b2:	0e 94 3a 6c 	call	0xd874	; 0xd874 <__divmodhi4>
    97b6:	8d e1       	ldi	r24, 0x1D	; 29
    97b8:	86 1b       	sub	r24, r22
    97ba:	d3 01       	movw	r26, r6
    97bc:	8c 93       	st	X, r24
			}

			// Draw boxes on the five points
			switch(i)
    97be:	33 30       	cpi	r19, 0x03	; 3
    97c0:	81 f0       	breq	.+32     	; 0x97e2 <edit_curve_item+0x2b0>
    97c2:	34 f4       	brge	.+12     	; 0x97d0 <edit_curve_item+0x29e>
    97c4:	31 30       	cpi	r19, 0x01	; 1
    97c6:	59 f0       	breq	.+22     	; 0x97de <edit_curve_item+0x2ac>
    97c8:	32 30       	cpi	r19, 0x02	; 2
    97ca:	89 f4       	brne	.+34     	; 0x97ee <edit_curve_item+0x2bc>
					break;
				case 1:
					Point_x = 22;
					break;
				case 2:
					Point_x = 42;
    97cc:	5a e2       	ldi	r21, 0x2A	; 42
					break;
    97ce:	10 c0       	rjmp	.+32     	; 0x97f0 <edit_curve_item+0x2be>
			{
				InterPoints[i] = (int8_t)(29 - ((Points[i] * 50) / 250));
			}

			// Draw boxes on the five points
			switch(i)
    97d0:	35 30       	cpi	r19, 0x05	; 5
    97d2:	59 f0       	breq	.+22     	; 0x97ea <edit_curve_item+0x2b8>
    97d4:	44 f0       	brlt	.+16     	; 0x97e6 <edit_curve_item+0x2b4>
    97d6:	36 30       	cpi	r19, 0x06	; 6
    97d8:	51 f4       	brne	.+20     	; 0x97ee <edit_curve_item+0x2bc>
					break;
				case 5:
					Point_x = 102;
					break;
				case 6:
					Point_x = 121;
    97da:	59 e7       	ldi	r21, 0x79	; 121
					break;
    97dc:	09 c0       	rjmp	.+18     	; 0x97f0 <edit_curve_item+0x2be>
			{
				case 0:
					Point_x = 2;
					break;
				case 1:
					Point_x = 22;
    97de:	56 e1       	ldi	r21, 0x16	; 22
    97e0:	07 c0       	rjmp	.+14     	; 0x97f0 <edit_curve_item+0x2be>
					break;
				case 2:
					Point_x = 42;
					break;
				case 3:
					Point_x = 62;
    97e2:	5e e3       	ldi	r21, 0x3E	; 62
					break;
    97e4:	05 c0       	rjmp	.+10     	; 0x97f0 <edit_curve_item+0x2be>
				case 4:
					Point_x = 82;
    97e6:	52 e5       	ldi	r21, 0x52	; 82
					break;
    97e8:	03 c0       	rjmp	.+6      	; 0x97f0 <edit_curve_item+0x2be>
				case 5:
					Point_x = 102;
    97ea:	56 e6       	ldi	r21, 0x66	; 102
					break;
    97ec:	01 c0       	rjmp	.+2      	; 0x97f0 <edit_curve_item+0x2be>

			// Draw boxes on the five points
			switch(i)
			{
				case 0:
					Point_x = 2;
    97ee:	52 e0       	ldi	r21, 0x02	; 2
					Point_x = 121;
					break;
			}
			
			// Black box surrounding point (vertical origin is offset by 2)
			fillrect(buffer, Point_x, InterPoints[i] - 2, 5, 5, 1);
    97f0:	f3 01       	movw	r30, r6
    97f2:	41 91       	ld	r20, Z+
    97f4:	3f 01       	movw	r6, r30
    97f6:	42 50       	subi	r20, 0x02	; 2
    97f8:	ee 24       	eor	r14, r14
    97fa:	e3 94       	inc	r14
    97fc:	05 e0       	ldi	r16, 0x05	; 5
    97fe:	25 e0       	ldi	r18, 0x05	; 5
    9800:	65 2f       	mov	r22, r21
    9802:	80 e0       	ldi	r24, 0x00	; 0
    9804:	91 e0       	ldi	r25, 0x01	; 1
    9806:	39 ab       	std	Y+49, r19	; 0x31
    9808:	5a ab       	std	Y+50, r21	; 0x32
    980a:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <fillrect>
    980e:	39 a9       	ldd	r19, Y+49	; 0x31
    9810:	3f 5f       	subi	r19, 0xFF	; 255
    9812:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9814:	98 a1       	ldd	r25, Y+32	; 0x20
    9816:	02 96       	adiw	r24, 0x02	; 2
    9818:	98 a3       	std	Y+32, r25	; 0x20
    981a:	8f 8f       	std	Y+31, r24	; 0x1f
			Points[6] = Config.Curve[curve].Point7;
			channel	= Config.Curve[curve].channel;			
		}

		// Calculate and draw points
		for (i = 0; i < 7; i++)
    981c:	37 30       	cpi	r19, 0x07	; 7
    981e:	09 f0       	breq	.+2      	; 0x9822 <edit_curve_item+0x2f0>
    9820:	a8 cf       	rjmp	.-176    	; 0x9772 <edit_curve_item+0x240>
			// Black box surrounding point (vertical origin is offset by 2)
			fillrect(buffer, Point_x, InterPoints[i] - 2, 5, 5, 1);
		}

		// Draw lines between the points
		drawline(buffer, 4, InterPoints[0], 24, InterPoints[1], 1);
    9822:	78 88       	ldd	r7, Y+16	; 0x10
    9824:	07 2d       	mov	r16, r7
    9826:	28 e1       	ldi	r18, 0x18	; 24
    9828:	4f 85       	ldd	r20, Y+15	; 0x0f
    982a:	64 e0       	ldi	r22, 0x04	; 4
    982c:	80 e0       	ldi	r24, 0x00	; 0
    982e:	91 e0       	ldi	r25, 0x01	; 1
    9830:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
		drawline(buffer, 24, InterPoints[1], 44, InterPoints[2], 1);
    9834:	69 88       	ldd	r6, Y+17	; 0x11
    9836:	06 2d       	mov	r16, r6
    9838:	2c e2       	ldi	r18, 0x2C	; 44
    983a:	47 2d       	mov	r20, r7
    983c:	68 e1       	ldi	r22, 0x18	; 24
    983e:	80 e0       	ldi	r24, 0x00	; 0
    9840:	91 e0       	ldi	r25, 0x01	; 1
    9842:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
		drawline(buffer, 44, InterPoints[2], 64, InterPoints[3], 1);
    9846:	7a 88       	ldd	r7, Y+18	; 0x12
    9848:	07 2d       	mov	r16, r7
    984a:	20 e4       	ldi	r18, 0x40	; 64
    984c:	46 2d       	mov	r20, r6
    984e:	6c e2       	ldi	r22, 0x2C	; 44
    9850:	80 e0       	ldi	r24, 0x00	; 0
    9852:	91 e0       	ldi	r25, 0x01	; 1
    9854:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
		drawline(buffer, 64, InterPoints[3], 84, InterPoints[4], 1);
    9858:	6b 88       	ldd	r6, Y+19	; 0x13
    985a:	06 2d       	mov	r16, r6
    985c:	24 e5       	ldi	r18, 0x54	; 84
    985e:	47 2d       	mov	r20, r7
    9860:	60 e4       	ldi	r22, 0x40	; 64
    9862:	80 e0       	ldi	r24, 0x00	; 0
    9864:	91 e0       	ldi	r25, 0x01	; 1
    9866:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
		drawline(buffer, 84, InterPoints[4], 104, InterPoints[5], 1);
    986a:	7c 88       	ldd	r7, Y+20	; 0x14
    986c:	07 2d       	mov	r16, r7
    986e:	28 e6       	ldi	r18, 0x68	; 104
    9870:	46 2d       	mov	r20, r6
    9872:	64 e5       	ldi	r22, 0x54	; 84
    9874:	80 e0       	ldi	r24, 0x00	; 0
    9876:	91 e0       	ldi	r25, 0x01	; 1
    9878:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>
		drawline(buffer, 104, InterPoints[5], 123, InterPoints[6], 1);
    987c:	0d 89       	ldd	r16, Y+21	; 0x15
    987e:	2b e7       	ldi	r18, 0x7B	; 123
    9880:	47 2d       	mov	r20, r7
    9882:	68 e6       	ldi	r22, 0x68	; 104
    9884:	80 e0       	ldi	r24, 0x00	; 0
    9886:	91 e0       	ldi	r25, 0x01	; 1
    9888:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <drawline>

		// Highlight the current point
		switch(Point_ref)
    988c:	81 2f       	mov	r24, r17
    988e:	90 e0       	ldi	r25, 0x00	; 0
    9890:	a0 e0       	ldi	r26, 0x00	; 0
    9892:	b0 e0       	ldi	r27, 0x00	; 0
    9894:	8f 8f       	std	Y+31, r24	; 0x1f
    9896:	98 a3       	std	Y+32, r25	; 0x20
    9898:	a9 a3       	std	Y+33, r26	; 0x21
    989a:	ba a3       	std	Y+34, r27	; 0x22
    989c:	5a a9       	ldd	r21, Y+50	; 0x32
    989e:	08 97       	sbiw	r24, 0x08	; 8
    98a0:	98 f4       	brcc	.+38     	; 0x98c8 <edit_curve_item+0x396>
    98a2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    98a4:	f8 a1       	ldd	r31, Y+32	; 0x20
    98a6:	ea 5a       	subi	r30, 0xAA	; 170
    98a8:	ff 4f       	sbci	r31, 0xFF	; 255
    98aa:	0c 94 6d 6c 	jmp	0xd8da	; 0xd8da <__tablejump2__>
		{
			case 0:
			Point_x = 0;
    98ae:	50 e0       	ldi	r21, 0x00	; 0
    98b0:	0b c0       	rjmp	.+22     	; 0x98c8 <edit_curve_item+0x396>
			break;
			case 1:
			Point_x = 20;
    98b2:	54 e1       	ldi	r21, 0x14	; 20
			break;
    98b4:	09 c0       	rjmp	.+18     	; 0x98c8 <edit_curve_item+0x396>
			case 2:
			Point_x = 40;
    98b6:	58 e2       	ldi	r21, 0x28	; 40
			break;
    98b8:	07 c0       	rjmp	.+14     	; 0x98c8 <edit_curve_item+0x396>
			case 3:
			Point_x = 60;
    98ba:	5c e3       	ldi	r21, 0x3C	; 60
			break;
    98bc:	05 c0       	rjmp	.+10     	; 0x98c8 <edit_curve_item+0x396>
			case 4:
			Point_x = 80;
    98be:	50 e5       	ldi	r21, 0x50	; 80
			break;
    98c0:	03 c0       	rjmp	.+6      	; 0x98c8 <edit_curve_item+0x396>
			case 5:
			Point_x = 100;
    98c2:	54 e6       	ldi	r21, 0x64	; 100
			break;
    98c4:	01 c0       	rjmp	.+2      	; 0x98c8 <edit_curve_item+0x396>
			case 6:
			Point_x = 119;
			break;
			case 7:
			Point_x = 119;
    98c6:	57 e7       	ldi	r21, 0x77	; 119
			break;
		}
		
		// Adjust box coordinates
		Point_y = (InterPoints[Point_ref] - 4);
    98c8:	ef a5       	ldd	r30, Y+47	; 0x2f
    98ca:	f8 a9       	ldd	r31, Y+48	; 0x30
    98cc:	e1 0f       	add	r30, r17
    98ce:	f1 1d       	adc	r31, r1
    98d0:	40 81       	ld	r20, Z

		// Channel numbers are highlighted differently
		if (Point_ref == 7)
    98d2:	17 30       	cpi	r17, 0x07	; 7
    98d4:	81 f5       	brne	.+96     	; 0x9936 <edit_curve_item+0x404>
		{
			pgm_mugui_scopy((char*)pgm_read_word(&text_menu[reference + Config.Curve[curve].channel]));		// Copy string to pBuffer
    98d6:	f5 01       	movw	r30, r10
    98d8:	e3 5e       	subi	r30, 0xE3	; 227
    98da:	fd 4f       	sbci	r31, 0xFD	; 253
    98dc:	80 81       	ld	r24, Z
    98de:	f1 01       	movw	r30, r2
    98e0:	e8 0f       	add	r30, r24
    98e2:	f1 1d       	adc	r31, r1
    98e4:	87 fd       	sbrc	r24, 7
    98e6:	fa 95       	dec	r31
    98e8:	ee 0f       	add	r30, r30
    98ea:	ff 1f       	adc	r31, r31
    98ec:	e3 5c       	subi	r30, 0xC3	; 195
    98ee:	fb 4e       	sbci	r31, 0xEB	; 235
    98f0:	85 91       	lpm	r24, Z+
    98f2:	94 91       	lpm	r25, Z
    98f4:	0e 94 b1 5f 	call	0xbf62	; 0xbf62 <pgm_mugui_scopy>
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
    98f8:	ae 01       	movw	r20, r28
    98fa:	45 5e       	subi	r20, 0xE5	; 229
    98fc:	5f 4f       	sbci	r21, 0xFF	; 255
    98fe:	6b e7       	ldi	r22, 0x7B	; 123
    9900:	7f e0       	ldi	r23, 0x0F	; 15
    9902:	85 ea       	ldi	r24, 0xA5	; 165
    9904:	95 e0       	ldi	r25, 0x05	; 5
    9906:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
			drawrect(buffer,(123 - size.x),(chanbox_y - 1 - size.y), (size.x + 5), (size.y + 4), 1);		// Outline
    990a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    990c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    990e:	04 e0       	ldi	r16, 0x04	; 4
    9910:	04 0f       	add	r16, r20
    9912:	25 e0       	ldi	r18, 0x05	; 5
    9914:	28 0f       	add	r18, r24
    9916:	40 95       	com	r20
    9918:	9c a1       	ldd	r25, Y+36	; 0x24
    991a:	49 0f       	add	r20, r25
    991c:	6b e7       	ldi	r22, 0x7B	; 123
    991e:	68 1b       	sub	r22, r24
    9920:	ee 24       	eor	r14, r14
    9922:	e3 94       	inc	r14
    9924:	80 e0       	ldi	r24, 0x00	; 0
    9926:	91 e0       	ldi	r25, 0x01	; 1
    9928:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <drawrect>
		{
			drawrect(buffer,Point_x,Point_y, 9, 9, 1);
		}

		// Print value of current object in a box somewhere
		if (type == CURVE)
    992c:	ab a1       	ldd	r26, Y+35	; 0x23
    992e:	a4 30       	cpi	r26, 0x04	; 4
    9930:	09 f0       	breq	.+2      	; 0x9934 <edit_curve_item+0x402>
    9932:	62 c0       	rjmp	.+196    	; 0x99f8 <edit_curve_item+0x4c6>
    9934:	32 c0       	rjmp	.+100    	; 0x999a <edit_curve_item+0x468>
			Point_x = 119;
			break;
		}
		
		// Adjust box coordinates
		Point_y = (InterPoints[Point_ref] - 4);
    9936:	44 50       	subi	r20, 0x04	; 4
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
			drawrect(buffer,(123 - size.x),(chanbox_y - 1 - size.y), (size.x + 5), (size.y + 4), 1);		// Outline
		}
		else
		{
			drawrect(buffer,Point_x,Point_y, 9, 9, 1);
    9938:	ee 24       	eor	r14, r14
    993a:	e3 94       	inc	r14
    993c:	09 e0       	ldi	r16, 0x09	; 9
    993e:	29 e0       	ldi	r18, 0x09	; 9
    9940:	65 2f       	mov	r22, r21
    9942:	80 e0       	ldi	r24, 0x00	; 0
    9944:	91 e0       	ldi	r25, 0x01	; 1
    9946:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <drawrect>
		}

		// Print value of current object in a box somewhere
		if (type == CURVE)
    994a:	fb a1       	ldd	r31, Y+35	; 0x23
    994c:	f4 30       	cpi	r31, 0x04	; 4
    994e:	49 f5       	brne	.+82     	; 0x99a2 <edit_curve_item+0x470>
		{
			switch(Point_ref)
    9950:	ef 8d       	ldd	r30, Y+31	; 0x1f
    9952:	f8 a1       	ldd	r31, Y+32	; 0x20
    9954:	e8 30       	cpi	r30, 0x08	; 8
    9956:	f1 05       	cpc	r31, r1
    9958:	08 f0       	brcs	.+2      	; 0x995c <edit_curve_item+0x42a>
    995a:	54 c0       	rjmp	.+168    	; 0x9a04 <edit_curve_item+0x4d2>
    995c:	e2 5a       	subi	r30, 0xA2	; 162
    995e:	ff 4f       	sbci	r31, 0xFF	; 255
    9960:	0c 94 6d 6c 	jmp	0xd8da	; 0xd8da <__tablejump2__>
			{
				case 0:
					value = Config.Curve[curve].Point1;
    9964:	f5 01       	movw	r30, r10
    9966:	ea 5e       	subi	r30, 0xEA	; 234
    9968:	fd 4f       	sbci	r31, 0xFD	; 253
    996a:	44 c0       	rjmp	.+136    	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 1:
					value = Config.Curve[curve].Point2;
    996c:	f5 01       	movw	r30, r10
    996e:	e9 5e       	subi	r30, 0xE9	; 233
    9970:	fd 4f       	sbci	r31, 0xFD	; 253
    9972:	40 c0       	rjmp	.+128    	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 2:
					value = Config.Curve[curve].Point3;
    9974:	ae a1       	ldd	r26, Y+38	; 0x26
    9976:	bf a1       	ldd	r27, Y+39	; 0x27
    9978:	41 c0       	rjmp	.+130    	; 0x99fc <edit_curve_item+0x4ca>
					break;
				case 3:
					value = Config.Curve[curve].Point4;
    997a:	f5 01       	movw	r30, r10
    997c:	e7 5e       	subi	r30, 0xE7	; 231
    997e:	fd 4f       	sbci	r31, 0xFD	; 253
    9980:	39 c0       	rjmp	.+114    	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 4:
					value = Config.Curve[curve].Point5;
    9982:	f5 01       	movw	r30, r10
    9984:	e6 5e       	subi	r30, 0xE6	; 230
    9986:	fd 4f       	sbci	r31, 0xFD	; 253
    9988:	35 c0       	rjmp	.+106    	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 5:
					value = Config.Curve[curve].Point6;
    998a:	f5 01       	movw	r30, r10
    998c:	e5 5e       	subi	r30, 0xE5	; 229
    998e:	fd 4f       	sbci	r31, 0xFD	; 253
    9990:	31 c0       	rjmp	.+98     	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 6:
					value = Config.Curve[curve].Point7;
    9992:	f5 01       	movw	r30, r10
    9994:	e4 5e       	subi	r30, 0xE4	; 228
    9996:	fd 4f       	sbci	r31, 0xFD	; 253
    9998:	2d c0       	rjmp	.+90     	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 7:
					value = Config.Curve[curve].channel;
    999a:	f5 01       	movw	r30, r10
    999c:	e3 5e       	subi	r30, 0xE3	; 227
    999e:	fd 4f       	sbci	r31, 0xFD	; 253
    99a0:	29 c0       	rjmp	.+82     	; 0x99f4 <edit_curve_item+0x4c2>
			}
		}
		// Offsets
		else
		{
			switch(Point_ref)
    99a2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    99a4:	f8 a1       	ldd	r31, Y+32	; 0x20
    99a6:	e7 30       	cpi	r30, 0x07	; 7
    99a8:	f1 05       	cpc	r31, r1
    99aa:	60 f5       	brcc	.+88     	; 0x9a04 <edit_curve_item+0x4d2>
    99ac:	ea 59       	subi	r30, 0x9A	; 154
    99ae:	ff 4f       	sbci	r31, 0xFF	; 255
    99b0:	0c 94 6d 6c 	jmp	0xd8da	; 0xd8da <__tablejump2__>
			{
				case 0:
					value = Config.Offsets[curve].Point1;
    99b4:	f5 01       	movw	r30, r10
    99b6:	e2 5b       	subi	r30, 0xB2	; 178
    99b8:	fd 4f       	sbci	r31, 0xFD	; 253
    99ba:	1c c0       	rjmp	.+56     	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 1:
					value = Config.Offsets[curve].Point2;
    99bc:	f5 01       	movw	r30, r10
    99be:	e1 5b       	subi	r30, 0xB1	; 177
    99c0:	fd 4f       	sbci	r31, 0xFD	; 253
    99c2:	18 c0       	rjmp	.+48     	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 2:
					value = Config.Offsets[curve].Point3;
    99c4:	f2 01       	movw	r30, r4
    99c6:	93 e0       	ldi	r25, 0x03	; 3
    99c8:	ee 0f       	add	r30, r30
    99ca:	ff 1f       	adc	r31, r31
    99cc:	9a 95       	dec	r25
    99ce:	e1 f7       	brne	.-8      	; 0x99c8 <edit_curve_item+0x496>
    99d0:	e8 59       	subi	r30, 0x98	; 152
    99d2:	f7 4f       	sbci	r31, 0xF7	; 247
    99d4:	0f c0       	rjmp	.+30     	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 3:
					value = Config.Offsets[curve].Point4;
    99d6:	f5 01       	movw	r30, r10
    99d8:	ef 5a       	subi	r30, 0xAF	; 175
    99da:	fd 4f       	sbci	r31, 0xFD	; 253
    99dc:	0b c0       	rjmp	.+22     	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 4:
					value = Config.Offsets[curve].Point5;
    99de:	f5 01       	movw	r30, r10
    99e0:	ee 5a       	subi	r30, 0xAE	; 174
    99e2:	fd 4f       	sbci	r31, 0xFD	; 253
    99e4:	07 c0       	rjmp	.+14     	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 5:
					value = Config.Offsets[curve].Point6;
    99e6:	f5 01       	movw	r30, r10
    99e8:	ed 5a       	subi	r30, 0xAD	; 173
    99ea:	fd 4f       	sbci	r31, 0xFD	; 253
    99ec:	03 c0       	rjmp	.+6      	; 0x99f4 <edit_curve_item+0x4c2>
					break;
				case 6:
					value = Config.Offsets[curve].Point7;
    99ee:	f5 01       	movw	r30, r10
    99f0:	ec 5a       	subi	r30, 0xAC	; 172
    99f2:	fd 4f       	sbci	r31, 0xFD	; 253
    99f4:	c0 80       	ld	r12, Z
    99f6:	03 c0       	rjmp	.+6      	; 0x99fe <edit_curve_item+0x4cc>
					break;
				case 7:
					value = Config.Offsets[curve].channel;
    99f8:	ad a5       	ldd	r26, Y+45	; 0x2d
    99fa:	be a5       	ldd	r27, Y+46	; 0x2e
    99fc:	cc 90       	ld	r12, X
    99fe:	dd 24       	eor	r13, r13
    9a00:	c7 fc       	sbrc	r12, 7
    9a02:	d0 94       	com	r13
					break;
			}
		}
		
		// Move value box when point 1 is in the way
		if (((Config.Curve[curve].Point1 < 50) && (type == CURVE)) || ((Config.Offsets[curve].Point1 < 50) && (type == OFFSET)))
    9a04:	f5 01       	movw	r30, r10
    9a06:	ea 5e       	subi	r30, 0xEA	; 234
    9a08:	fd 4f       	sbci	r31, 0xFD	; 253
    9a0a:	80 81       	ld	r24, Z
    9a0c:	82 33       	cpi	r24, 0x32	; 50
    9a0e:	1c f4       	brge	.+6      	; 0x9a16 <edit_curve_item+0x4e4>
    9a10:	bb a1       	ldd	r27, Y+35	; 0x23
    9a12:	b4 30       	cpi	r27, 0x04	; 4
    9a14:	59 f0       	breq	.+22     	; 0x9a2c <edit_curve_item+0x4fa>
    9a16:	eb a5       	ldd	r30, Y+43	; 0x2b
    9a18:	fc a5       	ldd	r31, Y+44	; 0x2c
    9a1a:	80 81       	ld	r24, Z
    9a1c:	82 33       	cpi	r24, 0x32	; 50
    9a1e:	1c f4       	brge	.+6      	; 0x9a26 <edit_curve_item+0x4f4>
    9a20:	fb a1       	ldd	r31, Y+35	; 0x23
    9a22:	f5 30       	cpi	r31, 0x05	; 5
    9a24:	19 f0       	breq	.+6      	; 0x9a2c <edit_curve_item+0x4fa>
		{
			varbox_y = 0;
		}
		else
		{
			varbox_y = 40;			
    9a26:	88 e2       	ldi	r24, 0x28	; 40
    9a28:	78 2e       	mov	r7, r24
    9a2a:	01 c0       	rjmp	.+2      	; 0x9a2e <edit_curve_item+0x4fc>
		}
		
		// Move value box when point 1 is in the way
		if (((Config.Curve[curve].Point1 < 50) && (type == CURVE)) || ((Config.Offsets[curve].Point1 < 50) && (type == OFFSET)))
		{
			varbox_y = 0;
    9a2c:	71 2c       	mov	r7, r1
		{
			varbox_y = 40;			
		}

		// Move channel box when points 6 and 7 are in the way
		if (((Config.Curve[curve].Point6 + Config.Curve[curve].Point7) < 0) && (type == CURVE))
    9a2e:	f4 01       	movw	r30, r8
    9a30:	e5 5e       	subi	r30, 0xE5	; 229
    9a32:	fd 4f       	sbci	r31, 0xFD	; 253
    9a34:	20 81       	ld	r18, Z
    9a36:	31 96       	adiw	r30, 0x01	; 1
    9a38:	80 81       	ld	r24, Z
    9a3a:	99 27       	eor	r25, r25
    9a3c:	87 fd       	sbrc	r24, 7
    9a3e:	90 95       	com	r25
    9a40:	82 0f       	add	r24, r18
    9a42:	91 1d       	adc	r25, r1
    9a44:	27 fd       	sbrc	r18, 7
    9a46:	9a 95       	dec	r25
    9a48:	97 ff       	sbrs	r25, 7
    9a4a:	06 c0       	rjmp	.+12     	; 0x9a58 <edit_curve_item+0x526>
    9a4c:	2b a1       	ldd	r18, Y+35	; 0x23
    9a4e:	24 30       	cpi	r18, 0x04	; 4
    9a50:	31 f0       	breq	.+12     	; 0x9a5e <edit_curve_item+0x52c>
		{
			chanbox_y = 12;
		}
		else
		{
			chanbox_y = 51;
    9a52:	43 e3       	ldi	r20, 0x33	; 51
    9a54:	4c a3       	std	Y+36, r20	; 0x24
    9a56:	05 c0       	rjmp	.+10     	; 0x9a62 <edit_curve_item+0x530>
    9a58:	83 e3       	ldi	r24, 0x33	; 51
    9a5a:	8c a3       	std	Y+36, r24	; 0x24
    9a5c:	02 c0       	rjmp	.+4      	; 0x9a62 <edit_curve_item+0x530>
		}

		// Move channel box when points 6 and 7 are in the way
		if (((Config.Curve[curve].Point6 + Config.Curve[curve].Point7) < 0) && (type == CURVE))
		{
			chanbox_y = 12;
    9a5e:	9c e0       	ldi	r25, 0x0C	; 12
    9a60:	9c a3       	std	Y+36, r25	; 0x24
		{
			chanbox_y = 51;
		}
		
		// Print the graph point values
		if (Point_ref < 7)
    9a62:	17 30       	cpi	r17, 0x07	; 7
    9a64:	b0 f5       	brcc	.+108    	; 0x9ad2 <edit_curve_item+0x5a0>
    9a66:	4a e0       	ldi	r20, 0x0A	; 10
    9a68:	65 ea       	ldi	r22, 0xA5	; 165
    9a6a:	75 e0       	ldi	r23, 0x05	; 5
    9a6c:	c6 01       	movw	r24, r12
    9a6e:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
		{
			mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana8, &size);			// Get dimensions of text
    9a72:	ae 01       	movw	r20, r28
    9a74:	45 5e       	subi	r20, 0xE5	; 229
    9a76:	5f 4f       	sbci	r21, 0xFF	; 255
    9a78:	6b e7       	ldi	r22, 0x7B	; 123
    9a7a:	7f e0       	ldi	r23, 0x0F	; 15
    9a7c:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
			fillrect(buffer,varbox_x,varbox_y, (size.x + 5), (size.y + 4), 0);								// White box
    9a80:	0d 8d       	ldd	r16, Y+29	; 0x1d
    9a82:	0c 5f       	subi	r16, 0xFC	; 252
    9a84:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9a86:	2b 5f       	subi	r18, 0xFB	; 251
    9a88:	e1 2c       	mov	r14, r1
    9a8a:	47 2d       	mov	r20, r7
    9a8c:	60 e0       	ldi	r22, 0x00	; 0
    9a8e:	80 e0       	ldi	r24, 0x00	; 0
    9a90:	91 e0       	ldi	r25, 0x01	; 1
    9a92:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <fillrect>
			drawrect(buffer,varbox_x,varbox_y, (size.x + 5), (size.y + 4), 1);								// Outline
    9a96:	0d 8d       	ldd	r16, Y+29	; 0x1d
    9a98:	0c 5f       	subi	r16, 0xFC	; 252
    9a9a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9a9c:	2b 5f       	subi	r18, 0xFB	; 251
    9a9e:	ee 24       	eor	r14, r14
    9aa0:	e3 94       	inc	r14
    9aa2:	47 2d       	mov	r20, r7
    9aa4:	60 e0       	ldi	r22, 0x00	; 0
    9aa6:	80 e0       	ldi	r24, 0x00	; 0
    9aa8:	91 e0       	ldi	r25, 0x01	; 1
    9aaa:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <drawrect>
    9aae:	4a e0       	ldi	r20, 0x0A	; 10
    9ab0:	65 ea       	ldi	r22, 0xA5	; 165
    9ab2:	75 e0       	ldi	r23, 0x05	; 5
    9ab4:	c6 01       	movw	r24, r12
    9ab6:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <__itoa_ncheck>
			mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana8,varbox_x + 3,varbox_y + 3);// Value
    9aba:	27 2d       	mov	r18, r7
    9abc:	33 27       	eor	r19, r19
    9abe:	27 fd       	sbrc	r18, 7
    9ac0:	30 95       	com	r19
    9ac2:	2d 5f       	subi	r18, 0xFD	; 253
    9ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    9ac6:	43 e0       	ldi	r20, 0x03	; 3
    9ac8:	50 e0       	ldi	r21, 0x00	; 0
    9aca:	6b e7       	ldi	r22, 0x7B	; 123
    9acc:	7f e0       	ldi	r23, 0x0F	; 15
    9ace:	0e 94 b2 60 	call	0xc164	; 0xc164 <mugui_lcd_puts>
		}
		
		// Print associated channel somewhere for the Generic curve
		if ((curve >= 4) && (type == CURVE))
    9ad2:	ad a1       	ldd	r26, Y+37	; 0x25
    9ad4:	a4 30       	cpi	r26, 0x04	; 4
    9ad6:	08 f4       	brcc	.+2      	; 0x9ada <edit_curve_item+0x5a8>
    9ad8:	40 c0       	rjmp	.+128    	; 0x9b5a <edit_curve_item+0x628>
    9ada:	bb a1       	ldd	r27, Y+35	; 0x23
    9adc:	b4 30       	cpi	r27, 0x04	; 4
    9ade:	09 f0       	breq	.+2      	; 0x9ae2 <edit_curve_item+0x5b0>
    9ae0:	3c c0       	rjmp	.+120    	; 0x9b5a <edit_curve_item+0x628>
		{
			pgm_mugui_scopy((char*)pgm_read_word(&text_menu[reference + Config.Curve[curve].channel]));		// Copy string to pBuffer
    9ae2:	f4 01       	movw	r30, r8
    9ae4:	e3 5e       	subi	r30, 0xE3	; 227
    9ae6:	fd 4f       	sbci	r31, 0xFD	; 253
    9ae8:	80 81       	ld	r24, Z
    9aea:	f1 01       	movw	r30, r2
    9aec:	e8 0f       	add	r30, r24
    9aee:	f1 1d       	adc	r31, r1
    9af0:	87 fd       	sbrc	r24, 7
    9af2:	fa 95       	dec	r31
    9af4:	ee 0f       	add	r30, r30
    9af6:	ff 1f       	adc	r31, r31
    9af8:	e3 5c       	subi	r30, 0xC3	; 195
    9afa:	fb 4e       	sbci	r31, 0xEB	; 235
    9afc:	85 91       	lpm	r24, Z+
    9afe:	94 91       	lpm	r25, Z
    9b00:	0e 94 b1 5f 	call	0xbf62	; 0xbf62 <pgm_mugui_scopy>
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
    9b04:	ae 01       	movw	r20, r28
    9b06:	45 5e       	subi	r20, 0xE5	; 229
    9b08:	5f 4f       	sbci	r21, 0xFF	; 255
    9b0a:	6b e7       	ldi	r22, 0x7B	; 123
    9b0c:	7f e0       	ldi	r23, 0x0F	; 15
    9b0e:	85 ea       	ldi	r24, 0xA5	; 165
    9b10:	95 e0       	ldi	r25, 0x05	; 5
    9b12:	0e 94 63 5f 	call	0xbec6	; 0xbec6 <mugui_text_sizestring>
			fillrect(buffer,(124 - size.x),(chanbox_y - size.y), (size.x + 3), (size.y + 2), 0);			// White box
    9b16:	9d 8d       	ldd	r25, Y+29	; 0x1d
    9b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9b1a:	02 e0       	ldi	r16, 0x02	; 2
    9b1c:	09 0f       	add	r16, r25
    9b1e:	23 e0       	ldi	r18, 0x03	; 3
    9b20:	28 0f       	add	r18, r24
    9b22:	4c a1       	ldd	r20, Y+36	; 0x24
    9b24:	49 1b       	sub	r20, r25
    9b26:	6c e7       	ldi	r22, 0x7C	; 124
    9b28:	68 1b       	sub	r22, r24
    9b2a:	e1 2c       	mov	r14, r1
    9b2c:	80 e0       	ldi	r24, 0x00	; 0
    9b2e:	91 e0       	ldi	r25, 0x01	; 1
    9b30:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <fillrect>
			print_menu_text(0, 1, (reference + channel), (126 - size.x), (chanbox_y + 2 - size.y));			// Channel
    9b34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9b36:	2c a1       	ldd	r18, Y+36	; 0x24
    9b38:	28 1b       	sub	r18, r24
    9b3a:	2e 5f       	subi	r18, 0xFE	; 254
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    9b3c:	30 e0       	ldi	r19, 0x00	; 0
		if ((curve >= 4) && (type == CURVE))
		{
			pgm_mugui_scopy((char*)pgm_read_word(&text_menu[reference + Config.Curve[curve].channel]));		// Copy string to pBuffer
			mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana8, &size);					// Calculate size
			fillrect(buffer,(124 - size.x),(chanbox_y - size.y), (size.x + 3), (size.y + 2), 0);			// White box
			print_menu_text(0, 1, (reference + channel), (126 - size.x), (chanbox_y + 2 - size.y));			// Channel
    9b3e:	4e e7       	ldi	r20, 0x7E	; 126
    9b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9b42:	48 1b       	sub	r20, r24
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    9b44:	50 e0       	ldi	r21, 0x00	; 0
    9b46:	6b e7       	ldi	r22, 0x7B	; 123
    9b48:	7f e0       	ldi	r23, 0x0F	; 15
    9b4a:	c1 01       	movw	r24, r2
    9b4c:	e8 a5       	ldd	r30, Y+40	; 0x28
    9b4e:	8e 0f       	add	r24, r30
    9b50:	91 1d       	adc	r25, r1
    9b52:	e7 fd       	sbrc	r30, 7
    9b54:	9a 95       	dec	r25
    9b56:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
			fillrect(buffer,(124 - size.x),(chanbox_y - size.y), (size.x + 3), (size.y + 2), 0);			// White box
			print_menu_text(0, 1, (reference + channel), (126 - size.x), (chanbox_y + 2 - size.y));			// Channel
		}

		// Write from buffer
		write_buffer(buffer);
    9b5a:	80 e0       	ldi	r24, 0x00	; 0
    9b5c:	91 e0       	ldi	r25, 0x01	; 1
    9b5e:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
    9b62:	ff e7       	ldi	r31, 0x7F	; 127
    9b64:	2a e1       	ldi	r18, 0x1A	; 26
    9b66:	46 e0       	ldi	r20, 0x06	; 6
    9b68:	f1 50       	subi	r31, 0x01	; 1
    9b6a:	20 40       	sbci	r18, 0x00	; 0
    9b6c:	40 40       	sbci	r20, 0x00	; 0
    9b6e:	e1 f7       	brne	.-8      	; 0x9b68 <edit_curve_item+0x636>
    9b70:	00 c0       	rjmp	.+0      	; 0x9b72 <edit_curve_item+0x640>
    9b72:	00 00       	nop

		// Slow the loop rate
		_delay_ms(100);		

		// Poll buttons when idle. This updates the button multiplier
		poll_buttons(true);
    9b74:	81 e0       	ldi	r24, 0x01	; 1
    9b76:	0e 94 97 48 	call	0x912e	; 0x912e <poll_buttons>
	
		// Handle cursor Up/Down limits
		if (button == DOWN)
    9b7a:	20 91 e8 08 	lds	r18, 0x08E8
    9b7e:	20 3d       	cpi	r18, 0xD0	; 208
    9b80:	79 f4       	brne	.+30     	; 0x9ba0 <edit_curve_item+0x66e>
		{
			value = value - (range.increment * button_multiplier);
    9b82:	30 91 e9 08 	lds	r19, 0x08E9
			
			// Limit values to set ranges
			if (value <= range.lower)
    9b86:	a9 a5       	ldd	r26, Y+41	; 0x29
    9b88:	8a 2f       	mov	r24, r26
    9b8a:	99 27       	eor	r25, r25
    9b8c:	87 fd       	sbrc	r24, 7
    9b8e:	90 95       	com	r25
    9b90:	f3 9e       	mul	r15, r19
    9b92:	c0 18       	sub	r12, r0
    9b94:	d1 08       	sbc	r13, r1
    9b96:	11 24       	eor	r1, r1
    9b98:	c8 16       	cp	r12, r24
    9b9a:	d9 06       	cpc	r13, r25
    9b9c:	94 f4       	brge	.+36     	; 0x9bc2 <edit_curve_item+0x690>
    9b9e:	10 c0       	rjmp	.+32     	; 0x9bc0 <edit_curve_item+0x68e>
			{
				value = range.lower;
			}
		}

		if (button == UP)
    9ba0:	20 3b       	cpi	r18, 0xB0	; 176
    9ba2:	79 f4       	brne	.+30     	; 0x9bc2 <edit_curve_item+0x690>
		{
			value = value + (range.increment * button_multiplier);
    9ba4:	30 91 e9 08 	lds	r19, 0x08E9
			
			// Limit values to set ranges
			if (value >= range.upper)
    9ba8:	ba a5       	ldd	r27, Y+42	; 0x2a
    9baa:	8b 2f       	mov	r24, r27
    9bac:	99 27       	eor	r25, r25
    9bae:	87 fd       	sbrc	r24, 7
    9bb0:	90 95       	com	r25
    9bb2:	f3 9e       	mul	r15, r19
    9bb4:	c0 0c       	add	r12, r0
    9bb6:	d1 1c       	adc	r13, r1
    9bb8:	11 24       	eor	r1, r1
    9bba:	8c 15       	cp	r24, r12
    9bbc:	9d 05       	cpc	r25, r13
    9bbe:	0c f4       	brge	.+2      	; 0x9bc2 <edit_curve_item+0x690>
    9bc0:	6c 01       	movw	r12, r24
				value = range.upper;
			}
		}

		// Update values for next loop
		if (type == CURVE)
    9bc2:	eb a1       	ldd	r30, Y+35	; 0x23
    9bc4:	e4 30       	cpi	r30, 0x04	; 4
    9bc6:	59 f5       	brne	.+86     	; 0x9c1e <edit_curve_item+0x6ec>
		{
			switch(Point_ref)
    9bc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9bca:	98 a1       	ldd	r25, Y+32	; 0x20
    9bcc:	88 30       	cpi	r24, 0x08	; 8
    9bce:	91 05       	cpc	r25, r1
    9bd0:	08 f0       	brcs	.+2      	; 0x9bd4 <edit_curve_item+0x6a2>
    9bd2:	59 c0       	rjmp	.+178    	; 0x9c86 <edit_curve_item+0x754>
    9bd4:	fc 01       	movw	r30, r24
    9bd6:	e3 59       	subi	r30, 0x93	; 147
    9bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    9bda:	0c 94 6d 6c 	jmp	0xd8da	; 0xd8da <__tablejump2__>
			{
				case 0:
					Config.Curve[curve].Point1 = value;
    9bde:	f4 01       	movw	r30, r8
    9be0:	ea 5e       	subi	r30, 0xEA	; 234
    9be2:	fd 4f       	sbci	r31, 0xFD	; 253
    9be4:	03 c0       	rjmp	.+6      	; 0x9bec <edit_curve_item+0x6ba>
					break;
				case 1:
					Config.Curve[curve].Point2 = value;
    9be6:	f4 01       	movw	r30, r8
    9be8:	e9 5e       	subi	r30, 0xE9	; 233
    9bea:	fd 4f       	sbci	r31, 0xFD	; 253
    9bec:	c0 82       	st	Z, r12
					break;
    9bee:	60 c0       	rjmp	.+192    	; 0x9cb0 <edit_curve_item+0x77e>
				case 2:
					Config.Curve[curve].Point3 = value;
    9bf0:	ae a1       	ldd	r26, Y+38	; 0x26
    9bf2:	bf a1       	ldd	r27, Y+39	; 0x27
    9bf4:	1f c0       	rjmp	.+62     	; 0x9c34 <edit_curve_item+0x702>
					break;
				case 3:
					Config.Curve[curve].Point4 = value;
    9bf6:	f4 01       	movw	r30, r8
    9bf8:	e7 5e       	subi	r30, 0xE7	; 231
    9bfa:	fd 4f       	sbci	r31, 0xFD	; 253
    9bfc:	f7 cf       	rjmp	.-18     	; 0x9bec <edit_curve_item+0x6ba>
					break;
				case 4:
					Config.Curve[curve].Point5 = value;
    9bfe:	f4 01       	movw	r30, r8
    9c00:	e6 5e       	subi	r30, 0xE6	; 230
    9c02:	fd 4f       	sbci	r31, 0xFD	; 253
    9c04:	f3 cf       	rjmp	.-26     	; 0x9bec <edit_curve_item+0x6ba>
					break;
				case 5:
					Config.Curve[curve].Point6 = value;
    9c06:	f4 01       	movw	r30, r8
    9c08:	e5 5e       	subi	r30, 0xE5	; 229
    9c0a:	fd 4f       	sbci	r31, 0xFD	; 253
    9c0c:	ef cf       	rjmp	.-34     	; 0x9bec <edit_curve_item+0x6ba>
					break;
				case 6:
					Config.Curve[curve].Point7 = value;
    9c0e:	f4 01       	movw	r30, r8
    9c10:	e4 5e       	subi	r30, 0xE4	; 228
    9c12:	fd 4f       	sbci	r31, 0xFD	; 253
    9c14:	2d c0       	rjmp	.+90     	; 0x9c70 <edit_curve_item+0x73e>
					break;
				case 7:
					Config.Curve[curve].channel = value;
    9c16:	f4 01       	movw	r30, r8
    9c18:	e3 5e       	subi	r30, 0xE3	; 227
    9c1a:	fd 4f       	sbci	r31, 0xFD	; 253
    9c1c:	30 c0       	rjmp	.+96     	; 0x9c7e <edit_curve_item+0x74c>
					break;
			}
		}
		else
		{
			switch(Point_ref)
    9c1e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    9c20:	f8 a1       	ldd	r31, Y+32	; 0x20
    9c22:	e8 30       	cpi	r30, 0x08	; 8
    9c24:	f1 05       	cpc	r31, r1
    9c26:	78 f5       	brcc	.+94     	; 0x9c86 <edit_curve_item+0x754>
    9c28:	eb 58       	subi	r30, 0x8B	; 139
    9c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    9c2c:	0c 94 6d 6c 	jmp	0xd8da	; 0xd8da <__tablejump2__>
			{
				case 0:
					Config.Offsets[curve].Point1 = value;
    9c30:	ab a5       	ldd	r26, Y+43	; 0x2b
    9c32:	bc a5       	ldd	r27, Y+44	; 0x2c
    9c34:	cc 92       	st	X, r12
					break;
    9c36:	3c c0       	rjmp	.+120    	; 0x9cb0 <edit_curve_item+0x77e>
				case 1:
					Config.Offsets[curve].Point2 = value;
    9c38:	f4 01       	movw	r30, r8
    9c3a:	e1 5b       	subi	r30, 0xB1	; 177
    9c3c:	fd 4f       	sbci	r31, 0xFD	; 253
    9c3e:	d6 cf       	rjmp	.-84     	; 0x9bec <edit_curve_item+0x6ba>
					break;
				case 2:
					Config.Offsets[curve].Point3 = value;
    9c40:	f2 01       	movw	r30, r4
    9c42:	b3 e0       	ldi	r27, 0x03	; 3
    9c44:	ee 0f       	add	r30, r30
    9c46:	ff 1f       	adc	r31, r31
    9c48:	ba 95       	dec	r27
    9c4a:	e1 f7       	brne	.-8      	; 0x9c44 <edit_curve_item+0x712>
    9c4c:	e8 59       	subi	r30, 0x98	; 152
    9c4e:	f7 4f       	sbci	r31, 0xF7	; 247
    9c50:	cd cf       	rjmp	.-102    	; 0x9bec <edit_curve_item+0x6ba>
					break;
				case 3:
					Config.Offsets[curve].Point4 = value;
    9c52:	f4 01       	movw	r30, r8
    9c54:	ef 5a       	subi	r30, 0xAF	; 175
    9c56:	fd 4f       	sbci	r31, 0xFD	; 253
    9c58:	c9 cf       	rjmp	.-110    	; 0x9bec <edit_curve_item+0x6ba>
					break;
				case 4:
					Config.Offsets[curve].Point5 = value;
    9c5a:	f4 01       	movw	r30, r8
    9c5c:	ee 5a       	subi	r30, 0xAE	; 174
    9c5e:	fd 4f       	sbci	r31, 0xFD	; 253
    9c60:	c5 cf       	rjmp	.-118    	; 0x9bec <edit_curve_item+0x6ba>
					break;
				case 5:
					Config.Offsets[curve].Point6 = value;
    9c62:	f4 01       	movw	r30, r8
    9c64:	ed 5a       	subi	r30, 0xAD	; 173
    9c66:	fd 4f       	sbci	r31, 0xFD	; 253
    9c68:	c1 cf       	rjmp	.-126    	; 0x9bec <edit_curve_item+0x6ba>
					break;
				case 6:
					Config.Offsets[curve].Point7 = value;
    9c6a:	f4 01       	movw	r30, r8
    9c6c:	ec 5a       	subi	r30, 0xAC	; 172
    9c6e:	fd 4f       	sbci	r31, 0xFD	; 253
    9c70:	c0 82       	st	Z, r12
					break;
			}
		}

		// Handle button 4
		if (button == ENTER)
    9c72:	20 3e       	cpi	r18, 0xE0	; 224
    9c74:	29 f5       	brne	.+74     	; 0x9cc0 <edit_curve_item+0x78e>
    9c76:	0b c0       	rjmp	.+22     	; 0x9c8e <edit_curve_item+0x75c>
					break;
				case 6:
					Config.Offsets[curve].Point7 = value;
					break;
				case 7:
					Config.Offsets[curve].channel = value;
    9c78:	f4 01       	movw	r30, r8
    9c7a:	eb 5a       	subi	r30, 0xAB	; 171
    9c7c:	fd 4f       	sbci	r31, 0xFD	; 253
    9c7e:	c0 82       	st	Z, r12
					break;
			}
		}

		// Handle button 4
		if (button == ENTER)
    9c80:	20 3e       	cpi	r18, 0xE0	; 224
    9c82:	f1 f4       	brne	.+60     	; 0x9cc0 <edit_curve_item+0x78e>
    9c84:	0d c0       	rjmp	.+26     	; 0x9ca0 <edit_curve_item+0x76e>
    9c86:	20 3e       	cpi	r18, 0xE0	; 224
    9c88:	d9 f4       	brne	.+54     	; 0x9cc0 <edit_curve_item+0x78e>
		{
			// Cursor at far right
			if  (
    9c8a:	16 30       	cpi	r17, 0x06	; 6
    9c8c:	39 f4       	brne	.+14     	; 0x9c9c <edit_curve_item+0x76a>
					((Point_ref == (NUMBEROFPOINTS - 1)) && (curve < 4) && (type == CURVE)) ||
    9c8e:	bd a1       	ldd	r27, Y+37	; 0x25
    9c90:	b4 30       	cpi	r27, 0x04	; 4
    9c92:	48 f0       	brcs	.+18     	; 0x9ca6 <edit_curve_item+0x774>
					((Point_ref == NUMBEROFPOINTS) && (curve >= 4) && (type == CURVE)) ||
					((Point_ref == (NUMBEROFPOINTS - 1)) && (type == OFFSET))
    9c94:	eb a1       	ldd	r30, Y+35	; 0x23
    9c96:	e5 30       	cpi	r30, 0x05	; 5
    9c98:	79 f4       	brne	.+30     	; 0x9cb8 <edit_curve_item+0x786>
    9c9a:	08 c0       	rjmp	.+16     	; 0x9cac <edit_curve_item+0x77a>
		// Handle button 4
		if (button == ENTER)
		{
			// Cursor at far right
			if  (
					((Point_ref == (NUMBEROFPOINTS - 1)) && (curve < 4) && (type == CURVE)) ||
    9c9c:	17 30       	cpi	r17, 0x07	; 7
    9c9e:	61 f4       	brne	.+24     	; 0x9cb8 <edit_curve_item+0x786>
					((Point_ref == NUMBEROFPOINTS) && (curve >= 4) && (type == CURVE)) ||
    9ca0:	2d a1       	ldd	r18, Y+37	; 0x25
    9ca2:	24 30       	cpi	r18, 0x04	; 4
    9ca4:	48 f0       	brcs	.+18     	; 0x9cb8 <edit_curve_item+0x786>
		// Handle button 4
		if (button == ENTER)
		{
			// Cursor at far right
			if  (
					((Point_ref == (NUMBEROFPOINTS - 1)) && (curve < 4) && (type == CURVE)) ||
    9ca6:	fb a1       	ldd	r31, Y+35	; 0x23
    9ca8:	f4 30       	cpi	r31, 0x04	; 4
    9caa:	21 f4       	brne	.+8      	; 0x9cb4 <edit_curve_item+0x782>
					((Point_ref == NUMBEROFPOINTS) && (curve >= 4) && (type == CURVE)) ||
					((Point_ref == (NUMBEROFPOINTS - 1)) && (type == OFFSET))
				)
			{
				button = ENTER;
    9cac:	80 ee       	ldi	r24, 0xE0	; 224
    9cae:	06 c0       	rjmp	.+12     	; 0x9cbc <edit_curve_item+0x78a>
					break;
			}
		}

		// Handle button 4
		if (button == ENTER)
    9cb0:	20 3e       	cpi	r18, 0xE0	; 224
    9cb2:	31 f4       	brne	.+12     	; 0x9cc0 <edit_curve_item+0x78e>
		{
			// Cursor at far right
			if  (
					((Point_ref == (NUMBEROFPOINTS - 1)) && (curve < 4) && (type == CURVE)) ||
					((Point_ref == NUMBEROFPOINTS) && (curve >= 4) && (type == CURVE)) ||
    9cb4:	16 30       	cpi	r17, 0x06	; 6
    9cb6:	71 f3       	breq	.-36     	; 0x9c94 <edit_curve_item+0x762>
				button = ENTER;
			}
			// Move cursor right
			else
			{
				Point_ref++;
    9cb8:	1f 5f       	subi	r17, 0xFF	; 255
				button = NONE;	
    9cba:	80 ef       	ldi	r24, 0xF0	; 240
    9cbc:	80 93 e8 08 	sts	0x08E8, r24
			}
		}

		// Handle button 1
		if (button == BACK)
    9cc0:	80 91 e8 08 	lds	r24, 0x08E8
    9cc4:	80 37       	cpi	r24, 0x70	; 112
    9cc6:	09 f0       	breq	.+2      	; 0x9cca <edit_curve_item+0x798>
    9cc8:	85 cc       	rjmp	.-1782   	; 0x95d4 <edit_curve_item+0xa2>
		{
			// Cursor at far left
			if (Point_ref == 0)
    9cca:	11 11       	cpse	r17, r1
    9ccc:	02 c0       	rjmp	.+4      	; 0x9cd2 <edit_curve_item+0x7a0>
			{
				//button = ABORT;
				button = ENTER;
    9cce:	80 ee       	ldi	r24, 0xE0	; 224
    9cd0:	02 c0       	rjmp	.+4      	; 0x9cd6 <edit_curve_item+0x7a4>
			}
			// Move cursor left
			else
			{
				Point_ref--;
    9cd2:	11 50       	subi	r17, 0x01	; 1
				button = NONE;
    9cd4:	80 ef       	ldi	r24, 0xF0	; 240
    9cd6:	80 93 e8 08 	sts	0x08E8, r24
    9cda:	7c cc       	rjmp	.-1800   	; 0x95d4 <edit_curve_item+0xa2>
			}
		}

	} // while ((button != ENTER) && (button != ABORT))
}
    9cdc:	e2 96       	adiw	r28, 0x32	; 50
    9cde:	0f b6       	in	r0, 0x3f	; 63
    9ce0:	f8 94       	cli
    9ce2:	de bf       	out	0x3e, r29	; 62
    9ce4:	0f be       	out	0x3f, r0	; 63
    9ce6:	cd bf       	out	0x3d, r28	; 61
    9ce8:	df 91       	pop	r29
    9cea:	cf 91       	pop	r28
    9cec:	1f 91       	pop	r17
    9cee:	0f 91       	pop	r16
    9cf0:	ff 90       	pop	r15
    9cf2:	ef 90       	pop	r14
    9cf4:	df 90       	pop	r13
    9cf6:	cf 90       	pop	r12
    9cf8:	bf 90       	pop	r11
    9cfa:	af 90       	pop	r10
    9cfc:	9f 90       	pop	r9
    9cfe:	8f 90       	pop	r8
    9d00:	7f 90       	pop	r7
    9d02:	6f 90       	pop	r6
    9d04:	5f 90       	pop	r5
    9d06:	4f 90       	pop	r4
    9d08:	3f 90       	pop	r3
    9d0a:	2f 90       	pop	r2
    9d0c:	08 95       	ret

00009d0e <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    9d0e:	90 e0       	ldi	r25, 0x00	; 0
    9d10:	98 17       	cp	r25, r24
    9d12:	81 f0       	breq	.+32     	; 0x9d34 <menu_beep+0x26>
	{ 
		LVA = 1;
    9d14:	29 9a       	sbi	0x05, 1	; 5
    9d16:	ef e0       	ldi	r30, 0x0F	; 15
    9d18:	f7 e2       	ldi	r31, 0x27	; 39
    9d1a:	31 97       	sbiw	r30, 0x01	; 1
    9d1c:	f1 f7       	brne	.-4      	; 0x9d1a <menu_beep+0xc>
    9d1e:	00 c0       	rjmp	.+0      	; 0x9d20 <menu_beep+0x12>
    9d20:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    9d22:	29 98       	cbi	0x05, 1	; 5
    9d24:	ef e0       	ldi	r30, 0x0F	; 15
    9d26:	f7 e2       	ldi	r31, 0x27	; 39
    9d28:	31 97       	sbiw	r30, 0x01	; 1
    9d2a:	f1 f7       	brne	.-4      	; 0x9d28 <menu_beep+0x1a>
    9d2c:	00 c0       	rjmp	.+0      	; 0x9d2e <menu_beep+0x20>
    9d2e:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    9d30:	9f 5f       	subi	r25, 0xFF	; 255
    9d32:	ee cf       	rjmp	.-36     	; 0x9d10 <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    9d34:	08 95       	ret

00009d36 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint16_t items, uint16_t start, uint16_t offset, uint8_t button, uint16_t* cursor, uint16_t* top, uint16_t* temp)
{
    9d36:	6f 92       	push	r6
    9d38:	7f 92       	push	r7
    9d3a:	8f 92       	push	r8
    9d3c:	9f 92       	push	r9
    9d3e:	af 92       	push	r10
    9d40:	bf 92       	push	r11
    9d42:	cf 92       	push	r12
    9d44:	df 92       	push	r13
    9d46:	ef 92       	push	r14
    9d48:	ff 92       	push	r15
    9d4a:	0f 93       	push	r16
    9d4c:	1f 93       	push	r17
    9d4e:	cf 93       	push	r28
    9d50:	df 93       	push	r29
    9d52:	5c 01       	movw	r10, r24
    9d54:	4b 01       	movw	r8, r22
    9d56:	3a 01       	movw	r6, r20
    9d58:	e8 01       	movw	r28, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    9d5a:	d7 01       	movw	r26, r14
    9d5c:	ed 91       	ld	r30, X+
    9d5e:	fc 91       	ld	r31, X
    9d60:	11 97       	sbiw	r26, 0x01	; 1
    9d62:	e4 0f       	add	r30, r20
    9d64:	f5 1f       	adc	r31, r21
    9d66:	ed 93       	st	X+, r30
    9d68:	fc 93       	st	X, r31
	start = start + offset;
    9d6a:	84 0e       	add	r8, r20
    9d6c:	95 1e       	adc	r9, r21

	// Calculate which function has been requested
	if (button == ENTER)
    9d6e:	20 3e       	cpi	r18, 0xE0	; 224
    9d70:	c1 f4       	brne	.+48     	; 0x9da2 <update_menu+0x6c>
	{
		switch(*cursor) 
    9d72:	88 81       	ld	r24, Y
    9d74:	99 81       	ldd	r25, Y+1	; 0x01
    9d76:	8f 30       	cpi	r24, 0x0F	; 15
    9d78:	91 05       	cpc	r25, r1
    9d7a:	61 f0       	breq	.+24     	; 0x9d94 <update_menu+0x5e>
    9d7c:	18 f4       	brcc	.+6      	; 0x9d84 <update_menu+0x4e>
    9d7e:	03 97       	sbiw	r24, 0x03	; 3
    9d80:	51 f0       	breq	.+20     	; 0x9d96 <update_menu+0x60>
    9d82:	55 c0       	rjmp	.+170    	; 0x9e2e <update_menu+0xf8>
    9d84:	8b 31       	cpi	r24, 0x1B	; 27
    9d86:	91 05       	cpc	r25, r1
    9d88:	51 f0       	breq	.+20     	; 0x9d9e <update_menu+0x68>
    9d8a:	87 97       	sbiw	r24, 0x27	; 39
    9d8c:	09 f0       	breq	.+2      	; 0x9d90 <update_menu+0x5a>
    9d8e:	4f c0       	rjmp	.+158    	; 0x9e2e <update_menu+0xf8>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    9d90:	33 96       	adiw	r30, 0x03	; 3
    9d92:	01 c0       	rjmp	.+2      	; 0x9d96 <update_menu+0x60>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    9d94:	31 96       	adiw	r30, 0x01	; 1
    9d96:	d6 01       	movw	r26, r12
    9d98:	ed 93       	st	X+, r30
    9d9a:	fc 93       	st	X, r31
				break;	
    9d9c:	48 c0       	rjmp	.+144    	; 0x9e2e <update_menu+0xf8>
			case LINE2:
				*temp = *top + 2;
    9d9e:	32 96       	adiw	r30, 0x02	; 2
    9da0:	fa cf       	rjmp	.-12     	; 0x9d96 <update_menu+0x60>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    9da2:	20 3d       	cpi	r18, 0xD0	; 208
    9da4:	39 f5       	brne	.+78     	; 0x9df4 <update_menu+0xbe>
	{
		switch(*cursor) 
    9da6:	88 81       	ld	r24, Y
    9da8:	99 81       	ldd	r25, Y+1	; 0x01
    9daa:	8f 30       	cpi	r24, 0x0F	; 15
    9dac:	91 05       	cpc	r25, r1
    9dae:	79 f0       	breq	.+30     	; 0x9dce <update_menu+0x98>
    9db0:	18 f4       	brcc	.+6      	; 0x9db8 <update_menu+0x82>
    9db2:	03 97       	sbiw	r24, 0x03	; 3
    9db4:	39 f0       	breq	.+14     	; 0x9dc4 <update_menu+0x8e>
    9db6:	1b c0       	rjmp	.+54     	; 0x9dee <update_menu+0xb8>
    9db8:	8b 31       	cpi	r24, 0x1B	; 27
    9dba:	91 05       	cpc	r25, r1
    9dbc:	69 f0       	breq	.+26     	; 0x9dd8 <update_menu+0xa2>
    9dbe:	87 97       	sbiw	r24, 0x27	; 39
    9dc0:	91 f0       	breq	.+36     	; 0x9de6 <update_menu+0xb0>
    9dc2:	15 c0       	rjmp	.+42     	; 0x9dee <update_menu+0xb8>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    9dc4:	b2 e0       	ldi	r27, 0x02	; 2
    9dc6:	ab 16       	cp	r10, r27
    9dc8:	b1 04       	cpc	r11, r1
    9dca:	20 f5       	brcc	.+72     	; 0x9e14 <update_menu+0xde>
    9dcc:	30 c0       	rjmp	.+96     	; 0x9e2e <update_menu+0xf8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    9dce:	e3 e0       	ldi	r30, 0x03	; 3
    9dd0:	ae 16       	cp	r10, r30
    9dd2:	b1 04       	cpc	r11, r1
    9dd4:	60 f1       	brcs	.+88     	; 0x9e2e <update_menu+0xf8>
    9dd6:	1b c0       	rjmp	.+54     	; 0x9e0e <update_menu+0xd8>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    9dd8:	f4 e0       	ldi	r31, 0x04	; 4
    9dda:	af 16       	cp	r10, r31
    9ddc:	b1 04       	cpc	r11, r1
    9dde:	38 f1       	brcs	.+78     	; 0x9e2e <update_menu+0xf8>
    9de0:	87 e2       	ldi	r24, 0x27	; 39
    9de2:	90 e0       	ldi	r25, 0x00	; 0
    9de4:	1f c0       	rjmp	.+62     	; 0x9e24 <update_menu+0xee>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    9de6:	25 e0       	ldi	r18, 0x05	; 5
    9de8:	a2 16       	cp	r10, r18
    9dea:	b1 04       	cpc	r11, r1
    9dec:	00 f1       	brcs	.+64     	; 0x9e2e <update_menu+0xf8>
				break;
			default:
				*cursor = NEXTLINE;
    9dee:	88 e2       	ldi	r24, 0x28	; 40
    9df0:	90 e0       	ldi	r25, 0x00	; 0
    9df2:	18 c0       	rjmp	.+48     	; 0x9e24 <update_menu+0xee>
				break;
		}
	}

	if (button == UP)	
    9df4:	20 3b       	cpi	r18, 0xB0	; 176
    9df6:	c9 f4       	brne	.+50     	; 0x9e2a <update_menu+0xf4>
	{
		switch(*cursor) 
    9df8:	88 81       	ld	r24, Y
    9dfa:	99 81       	ldd	r25, Y+1	; 0x01
    9dfc:	8f 30       	cpi	r24, 0x0F	; 15
    9dfe:	91 05       	cpc	r25, r1
    9e00:	61 f0       	breq	.+24     	; 0x9e1a <update_menu+0xe4>
    9e02:	70 f0       	brcs	.+28     	; 0x9e20 <update_menu+0xea>
    9e04:	8b 31       	cpi	r24, 0x1B	; 27
    9e06:	91 05       	cpc	r25, r1
    9e08:	29 f0       	breq	.+10     	; 0x9e14 <update_menu+0xde>
    9e0a:	87 97       	sbiw	r24, 0x27	; 39
    9e0c:	49 f4       	brne	.+18     	; 0x9e20 <update_menu+0xea>
		{
			case LINE3:
				*cursor = LINE2;
    9e0e:	8b e1       	ldi	r24, 0x1B	; 27
    9e10:	90 e0       	ldi	r25, 0x00	; 0
    9e12:	08 c0       	rjmp	.+16     	; 0x9e24 <update_menu+0xee>
				break;	
			case LINE2:
				*cursor = LINE1;
    9e14:	8f e0       	ldi	r24, 0x0F	; 15
    9e16:	90 e0       	ldi	r25, 0x00	; 0
    9e18:	05 c0       	rjmp	.+10     	; 0x9e24 <update_menu+0xee>
				break;
			case LINE1:
				*cursor = LINE0;
    9e1a:	83 e0       	ldi	r24, 0x03	; 3
    9e1c:	90 e0       	ldi	r25, 0x00	; 0
    9e1e:	02 c0       	rjmp	.+4      	; 0x9e24 <update_menu+0xee>
				break;
			case LINE0:
				*cursor = PREVLINE;
    9e20:	82 e0       	ldi	r24, 0x02	; 2
    9e22:	90 e0       	ldi	r25, 0x00	; 0
    9e24:	99 83       	std	Y+1, r25	; 0x01
    9e26:	88 83       	st	Y, r24
				break;
    9e28:	02 c0       	rjmp	.+4      	; 0x9e2e <update_menu+0xf8>
				*cursor = PREVLINE;
				break;
		}
	}

	if (button != NONE)	
    9e2a:	20 3f       	cpi	r18, 0xF0	; 240
    9e2c:	61 f0       	breq	.+24     	; 0x9e46 <update_menu+0x110>
	{
		menu_beep(1);
    9e2e:	81 e0       	ldi	r24, 0x01	; 1
    9e30:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <menu_beep>
    9e34:	4f ef       	ldi	r20, 0xFF	; 255
    9e36:	84 e3       	ldi	r24, 0x34	; 52
    9e38:	9c e0       	ldi	r25, 0x0C	; 12
    9e3a:	41 50       	subi	r20, 0x01	; 1
    9e3c:	80 40       	sbci	r24, 0x00	; 0
    9e3e:	90 40       	sbci	r25, 0x00	; 0
    9e40:	e1 f7       	brne	.-8      	; 0x9e3a <update_menu+0x104>
    9e42:	00 c0       	rjmp	.+0      	; 0x9e44 <update_menu+0x10e>
    9e44:	00 00       	nop
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    9e46:	88 81       	ld	r24, Y
    9e48:	99 81       	ldd	r25, Y+1	; 0x01
    9e4a:	02 97       	sbiw	r24, 0x02	; 2
    9e4c:	71 f4       	brne	.+28     	; 0x9e6a <update_menu+0x134>
	{
		*cursor  = LINE0;
    9e4e:	83 e0       	ldi	r24, 0x03	; 3
    9e50:	90 e0       	ldi	r25, 0x00	; 0
    9e52:	99 83       	std	Y+1, r25	; 0x01
    9e54:	88 83       	st	Y, r24
		if (*top > start) 
    9e56:	d7 01       	movw	r26, r14
    9e58:	8d 91       	ld	r24, X+
    9e5a:	9c 91       	ld	r25, X
    9e5c:	11 97       	sbiw	r26, 0x01	; 1
    9e5e:	88 16       	cp	r8, r24
    9e60:	99 06       	cpc	r9, r25
    9e62:	18 f4       	brcc	.+6      	; 0x9e6a <update_menu+0x134>
		{
			*top = *top - 1;								// Shuffle list up
    9e64:	01 97       	sbiw	r24, 0x01	; 1
    9e66:	8d 93       	st	X+, r24
    9e68:	9c 93       	st	X, r25
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    9e6a:	88 81       	ld	r24, Y
    9e6c:	99 81       	ldd	r25, Y+1	; 0x01
    9e6e:	88 97       	sbiw	r24, 0x28	; 40
    9e70:	b1 f4       	brne	.+44     	; 0x9e9e <update_menu+0x168>
	{
		*cursor  = LINE3;
    9e72:	87 e2       	ldi	r24, 0x27	; 39
    9e74:	90 e0       	ldi	r25, 0x00	; 0
    9e76:	99 83       	std	Y+1, r25	; 0x01
    9e78:	88 83       	st	Y, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    9e7a:	f7 01       	movw	r30, r14
    9e7c:	80 81       	ld	r24, Z
    9e7e:	91 81       	ldd	r25, Z+1	; 0x01
    9e80:	9c 01       	movw	r18, r24
    9e82:	2d 5f       	subi	r18, 0xFD	; 253
    9e84:	3f 4f       	sbci	r19, 0xFF	; 255
    9e86:	f1 e0       	ldi	r31, 0x01	; 1
    9e88:	af 1a       	sub	r10, r31
    9e8a:	b1 08       	sbc	r11, r1
    9e8c:	a8 0c       	add	r10, r8
    9e8e:	b9 1c       	adc	r11, r9
    9e90:	2a 15       	cp	r18, r10
    9e92:	3b 05       	cpc	r19, r11
    9e94:	20 f4       	brcc	.+8      	; 0x9e9e <update_menu+0x168>
		{
			*top = *top + 1;								// Shuffle list down
    9e96:	01 96       	adiw	r24, 0x01	; 1
    9e98:	d7 01       	movw	r26, r14
    9e9a:	8d 93       	st	X+, r24
    9e9c:	9c 93       	st	X, r25
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    9e9e:	f7 01       	movw	r30, r14
    9ea0:	80 81       	ld	r24, Z
    9ea2:	91 81       	ldd	r25, Z+1	; 0x01
    9ea4:	86 19       	sub	r24, r6
    9ea6:	97 09       	sbc	r25, r7
    9ea8:	91 83       	std	Z+1, r25	; 0x01
    9eaa:	80 83       	st	Z, r24
}
    9eac:	df 91       	pop	r29
    9eae:	cf 91       	pop	r28
    9eb0:	1f 91       	pop	r17
    9eb2:	0f 91       	pop	r16
    9eb4:	ff 90       	pop	r15
    9eb6:	ef 90       	pop	r14
    9eb8:	df 90       	pop	r13
    9eba:	cf 90       	pop	r12
    9ebc:	bf 90       	pop	r11
    9ebe:	af 90       	pop	r10
    9ec0:	9f 90       	pop	r9
    9ec2:	8f 90       	pop	r8
    9ec4:	7f 90       	pop	r7
    9ec6:	6f 90       	pop	r6
    9ec8:	08 95       	ret

00009eca <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    9eca:	28 2f       	mov	r18, r24
    9ecc:	30 e0       	ldi	r19, 0x00	; 0
    9ece:	43 e0       	ldi	r20, 0x03	; 3
    9ed0:	50 e0       	ldi	r21, 0x00	; 0
    9ed2:	6d ee       	ldi	r22, 0xED	; 237
    9ed4:	71 e0       	ldi	r23, 0x01	; 1
    9ed6:	8d e0       	ldi	r24, 0x0D	; 13
    9ed8:	90 e0       	ldi	r25, 0x00	; 0
    9eda:	0c 94 2e 37 	jmp	0x6e5c	; 0x6e5c <LCD_Display_Text>

00009ede <print_menu_items>:
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************

void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, const uint16_t* MenuOffsets, const uint16_t* text_link, uint16_t cursor)
{
    9ede:	2f 92       	push	r2
    9ee0:	3f 92       	push	r3
    9ee2:	4f 92       	push	r4
    9ee4:	5f 92       	push	r5
    9ee6:	6f 92       	push	r6
    9ee8:	7f 92       	push	r7
    9eea:	8f 92       	push	r8
    9eec:	9f 92       	push	r9
    9eee:	af 92       	push	r10
    9ef0:	bf 92       	push	r11
    9ef2:	cf 92       	push	r12
    9ef4:	df 92       	push	r13
    9ef6:	ef 92       	push	r14
    9ef8:	ff 92       	push	r15
    9efa:	0f 93       	push	r16
    9efc:	1f 93       	push	r17
    9efe:	cf 93       	push	r28
    9f00:	df 93       	push	r29
    9f02:	cd b7       	in	r28, 0x3d	; 61
    9f04:	de b7       	in	r29, 0x3e	; 62
    9f06:	2d 97       	sbiw	r28, 0x0d	; 13
    9f08:	0f b6       	in	r0, 0x3f	; 63
    9f0a:	f8 94       	cli
    9f0c:	de bf       	out	0x3e, r29	; 62
    9f0e:	0f be       	out	0x3f, r0	; 63
    9f10:	cd bf       	out	0x3d, r28	; 61
    9f12:	3c 01       	movw	r6, r24
    9f14:	4a 01       	movw	r8, r20
    9f16:	39 87       	std	Y+9, r19	; 0x09
    9f18:	28 87       	std	Y+8, r18	; 0x08
    9f1a:	0a 87       	std	Y+10, r16	; 0x0a
    9f1c:	ab 86       	std	Y+11, r10	; 0x0b
	uint16_t offset = 0;
	uint16_t text = 0;
	uint8_t text_offset = 0;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    9f1e:	80 e0       	ldi	r24, 0x00	; 0
    9f20:	91 e0       	ldi	r25, 0x01	; 1
    9f22:	6c 87       	std	Y+12, r22	; 0x0c
    9f24:	7d 87       	std	Y+13, r23	; 0x0d
    9f26:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>
	print_menu_frame(BASIC);
    9f2a:	80 e0       	ldi	r24, 0x00	; 0
    9f2c:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <print_menu_frame>
    9f30:	25 e0       	ldi	r18, 0x05	; 5
    9f32:	6c 85       	ldd	r22, Y+12	; 0x0c
    9f34:	7d 85       	ldd	r23, Y+13	; 0x0d
    9f36:	26 9f       	mul	r18, r22
    9f38:	c0 01       	movw	r24, r0
    9f3a:	27 9f       	mul	r18, r23
    9f3c:	90 0d       	add	r25, r0
    9f3e:	11 24       	eor	r1, r1
    9f40:	28 84       	ldd	r2, Y+8	; 0x08
    9f42:	39 84       	ldd	r3, Y+9	; 0x09
    9f44:	28 1a       	sub	r2, r24
    9f46:	39 0a       	sbc	r3, r25
    9f48:	26 9d       	mul	r18, r6
    9f4a:	c0 01       	movw	r24, r0
    9f4c:	27 9d       	mul	r18, r7
    9f4e:	90 0d       	add	r25, r0
    9f50:	11 24       	eor	r1, r1
    9f52:	28 0e       	add	r2, r24
    9f54:	39 1e       	adc	r3, r25
    9f56:	c3 01       	movw	r24, r6
    9f58:	88 0f       	add	r24, r24
    9f5a:	99 1f       	adc	r25, r25
    9f5c:	9b 01       	movw	r18, r22
    9f5e:	22 0f       	add	r18, r18
    9f60:	33 1f       	adc	r19, r19
    9f62:	c2 1a       	sub	r12, r18
    9f64:	d3 0a       	sbc	r13, r19
    9f66:	c8 0e       	add	r12, r24
    9f68:	d9 1e       	adc	r13, r25
    9f6a:	e2 1a       	sub	r14, r18
    9f6c:	f3 0a       	sbc	r15, r19
    9f6e:	e8 0e       	add	r14, r24
    9f70:	f9 1e       	adc	r15, r25
    9f72:	53 01       	movw	r10, r6
    9f74:	41 2c       	mov	r4, r1
    9f76:	51 2c       	mov	r5, r1
    9f78:	61 2c       	mov	r6, r1
    9f7a:	71 2c       	mov	r7, r1
    9f7c:	8d ee       	ldi	r24, 0xED	; 237
    9f7e:	95 e2       	ldi	r25, 0x25	; 37
    9f80:	8a 19       	sub	r24, r10
    9f82:	9b 09       	sbc	r25, r11
    9f84:	9f 83       	std	Y+7, r25	; 0x07
    9f86:	8e 83       	std	Y+6, r24	; 0x06
    9f88:	86 1a       	sub	r8, r22
    9f8a:	97 0a       	sbc	r9, r23
    9f8c:	0e 81       	ldd	r16, Y+6	; 0x06
    9f8e:	1f 81       	ldd	r17, Y+7	; 0x07
    9f90:	0a 0d       	add	r16, r10
    9f92:	1b 1d       	adc	r17, r11
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    9f94:	f8 01       	movw	r30, r16
    9f96:	24 91       	lpm	r18, Z
    9f98:	30 e0       	ldi	r19, 0x00	; 0
    9f9a:	4a e0       	ldi	r20, 0x0A	; 10
    9f9c:	50 e0       	ldi	r21, 0x00	; 0
    9f9e:	6b e7       	ldi	r22, 0x7B	; 123
    9fa0:	7f e0       	ldi	r23, 0x0F	; 15
    9fa2:	c5 01       	movw	r24, r10
    9fa4:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    9fa8:	fa 85       	ldd	r31, Y+10	; 0x0a
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    9faa:	45 e0       	ldi	r20, 0x05	; 5
    9fac:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    9fae:	f1 11       	cpse	r31, r1
    9fb0:	04 c0       	rjmp	.+8      	; 0x9fba <print_menu_items+0xdc>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    9fb2:	b2 01       	movw	r22, r4
    9fb4:	62 0d       	add	r22, r2
    9fb6:	73 1d       	adc	r23, r3
    9fb8:	02 c0       	rjmp	.+4      	; 0x9fbe <print_menu_items+0xe0>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    9fba:	68 85       	ldd	r22, Y+8	; 0x08
    9fbc:	79 85       	ldd	r23, Y+9	; 0x09
    9fbe:	ce 01       	movw	r24, r28
    9fc0:	01 96       	adiw	r24, 0x01	; 1
    9fc2:	0e 94 c6 6c 	call	0xd98c	; 0xd98c <memcpy_P>
    9fc6:	f3 01       	movw	r30, r6
    9fc8:	ec 0d       	add	r30, r12
    9fca:	fd 1d       	adc	r31, r13
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
    9fcc:	45 91       	lpm	r20, Z+
    9fce:	54 91       	lpm	r21, Z
    9fd0:	f4 01       	movw	r30, r8
    9fd2:	ea 0d       	add	r30, r10
    9fd4:	fb 1d       	adc	r31, r11
		offset = values[top + i - start];
    9fd6:	80 81       	ld	r24, Z
    9fd8:	f3 01       	movw	r30, r6
    9fda:	ee 0d       	add	r30, r14
    9fdc:	ff 1d       	adc	r31, r15
		text = base + offset;
		
		// Calculate horizontal offset of text to display
		text_offset = (uint8_t)pgm_read_word(&MenuOffsets[top + i - start]);
    9fde:	25 91       	lpm	r18, Z+
    9fe0:	34 91       	lpm	r19, Z
		
		
		print_menu_text((values[top+i - start]), range1.style, text, text_offset, (uint8_t)pgm_read_byte(&lines[i]));
    9fe2:	f8 01       	movw	r30, r16
    9fe4:	04 91       	lpm	r16, Z
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}

		// Calculate location of text to display
		base = pgm_read_word(&text_link[top + i - start]);
		offset = values[top + i - start];
    9fe6:	99 27       	eor	r25, r25
    9fe8:	87 fd       	sbrc	r24, 7
    9fea:	90 95       	com	r25
		text = base + offset;
    9fec:	48 0f       	add	r20, r24
    9fee:	59 1f       	adc	r21, r25
		
		// Calculate horizontal offset of text to display
		text_offset = (uint8_t)pgm_read_word(&MenuOffsets[top + i - start]);
		
		
		print_menu_text((values[top+i - start]), range1.style, text, text_offset, (uint8_t)pgm_read_byte(&lines[i]));
    9ff0:	6c 81       	ldd	r22, Y+4	; 0x04
    9ff2:	0e 94 70 48 	call	0x90e0	; 0x90e0 <print_menu_text>
    9ff6:	ff ef       	ldi	r31, 0xFF	; 255
    9ff8:	af 1a       	sub	r10, r31
    9ffa:	bf 0a       	sbc	r11, r31
    9ffc:	82 e0       	ldi	r24, 0x02	; 2
    9ffe:	68 0e       	add	r6, r24
    a000:	71 1c       	adc	r7, r1
    a002:	95 e0       	ldi	r25, 0x05	; 5
    a004:	49 0e       	add	r4, r25
    a006:	51 1c       	adc	r5, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(BASIC);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    a008:	e8 e0       	ldi	r30, 0x08	; 8
    a00a:	6e 16       	cp	r6, r30
    a00c:	71 04       	cpc	r7, r1
    a00e:	09 f0       	breq	.+2      	; 0xa012 <print_menu_items+0x134>
    a010:	bd cf       	rjmp	.-134    	; 0x9f8c <print_menu_items+0xae>
		
		
		print_menu_text((values[top+i - start]), range1.style, text, text_offset, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    a012:	8b 85       	ldd	r24, Y+11	; 0x0b
    a014:	0e 94 65 4f 	call	0x9eca	; 0x9eca <print_cursor>
	write_buffer(buffer);
    a018:	80 e0       	ldi	r24, 0x00	; 0
    a01a:	91 e0       	ldi	r25, 0x01	; 1
    a01c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>
	poll_buttons(true);
    a020:	81 e0       	ldi	r24, 0x01	; 1
    a022:	0e 94 97 48 	call	0x912e	; 0x912e <poll_buttons>
}
    a026:	2d 96       	adiw	r28, 0x0d	; 13
    a028:	0f b6       	in	r0, 0x3f	; 63
    a02a:	f8 94       	cli
    a02c:	de bf       	out	0x3e, r29	; 62
    a02e:	0f be       	out	0x3f, r0	; 63
    a030:	cd bf       	out	0x3d, r28	; 61
    a032:	df 91       	pop	r29
    a034:	cf 91       	pop	r28
    a036:	1f 91       	pop	r17
    a038:	0f 91       	pop	r16
    a03a:	ff 90       	pop	r15
    a03c:	ef 90       	pop	r14
    a03e:	df 90       	pop	r13
    a040:	cf 90       	pop	r12
    a042:	bf 90       	pop	r11
    a044:	af 90       	pop	r10
    a046:	9f 90       	pop	r9
    a048:	8f 90       	pop	r8
    a04a:	7f 90       	pop	r7
    a04c:	6f 90       	pop	r6
    a04e:	5f 90       	pop	r5
    a050:	4f 90       	pop	r4
    a052:	3f 90       	pop	r3
    a054:	2f 90       	pop	r2
    a056:	08 95       	ret

0000a058 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    a058:	4f 92       	push	r4
    a05a:	5f 92       	push	r5
    a05c:	6f 92       	push	r6
    a05e:	7f 92       	push	r7
    a060:	8f 92       	push	r8
    a062:	af 92       	push	r10
    a064:	bf 92       	push	r11
    a066:	cf 92       	push	r12
    a068:	df 92       	push	r13
    a06a:	ef 92       	push	r14
    a06c:	ff 92       	push	r15
    a06e:	0f 93       	push	r16
    a070:	1f 93       	push	r17
    a072:	cf 93       	push	r28
    a074:	df 93       	push	r29
    a076:	00 d0       	rcall	.+0      	; 0xa078 <menu_flight+0x20>
    a078:	00 d0       	rcall	.+0      	; 0xa07a <menu_flight+0x22>
    a07a:	1f 92       	push	r1
    a07c:	cd b7       	in	r28, 0x3d	; 61
    a07e:	de b7       	in	r29, 0x3e	; 62
	menu_range_t range;
	uint8_t text_link;
	uint16_t reference;

	// Set the correct text list for the selected reference
	if ((Config.P1_Reference == MODEL) && (mode == P1))
    a080:	90 91 a4 06 	lds	r25, 0x06A4
    a084:	92 30       	cpi	r25, 0x02	; 2
    a086:	11 f4       	brne	.+4      	; 0xa08c <menu_flight+0x34>
    a088:	88 23       	and	r24, r24
    a08a:	21 f0       	breq	.+8      	; 0xa094 <menu_flight+0x3c>
	{
		reference = FLIGHTSTARTM;
	}
	else
	{
		reference = FLIGHTSTARTE;
    a08c:	eb ea       	ldi	r30, 0xAB	; 171
    a08e:	6e 2e       	mov	r6, r30
    a090:	71 2c       	mov	r7, r1
    a092:	04 c0       	rjmp	.+8      	; 0xa09c <menu_flight+0x44>
	uint16_t reference;

	// Set the correct text list for the selected reference
	if ((Config.P1_Reference == MODEL) && (mode == P1))
	{
		reference = FLIGHTSTARTM;
    a094:	78 e4       	ldi	r23, 0x48	; 72
    a096:	67 2e       	mov	r6, r23
    a098:	77 24       	eor	r7, r7
    a09a:	73 94       	inc	r7
	{
		reference = FLIGHTSTARTE;
	}

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    a09c:	20 91 08 05 	lds	r18, 0x0508
    a0a0:	22 23       	and	r18, r18
    a0a2:	79 f0       	breq	.+30     	; 0xa0c2 <menu_flight+0x6a>
	{
		if ((Config.P1_Reference == MODEL) && (mode == P1))
    a0a4:	92 30       	cpi	r25, 0x02	; 2
    a0a6:	29 f4       	brne	.+10     	; 0xa0b2 <menu_flight+0x5a>
    a0a8:	81 11       	cpse	r24, r1
    a0aa:	03 c0       	rjmp	.+6      	; 0xa0b2 <menu_flight+0x5a>
		{
			sub_top = FLIGHTSTARTM;		
    a0ac:	28 e4       	ldi	r18, 0x48	; 72
    a0ae:	31 e0       	ldi	r19, 0x01	; 1
    a0b0:	02 c0       	rjmp	.+4      	; 0xa0b6 <menu_flight+0x5e>
		}
		else
		{
			sub_top = FLIGHTSTARTE;			
    a0b2:	2b ea       	ldi	r18, 0xAB	; 171
    a0b4:	30 e0       	ldi	r19, 0x00	; 0
    a0b6:	30 93 4e 05 	sts	0x054E, r19
    a0ba:	20 93 4d 05 	sts	0x054D, r18
		}

		menu_flag = 0;
    a0be:	10 92 08 05 	sts	0x0508, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    a0c2:	92 e1       	ldi	r25, 0x12	; 18
    a0c4:	89 9f       	mul	r24, r25
    a0c6:	20 01       	movw	r4, r0
    a0c8:	11 24       	eor	r1, r1
    a0ca:	c2 01       	movw	r24, r4
    a0cc:	83 5b       	subi	r24, 0xB3	; 179
    a0ce:	99 4f       	sbci	r25, 0xF9	; 249
    a0d0:	2c 01       	movw	r4, r24
		}

		menu_flag = 0;
	}

	while(button != BACK)
    a0d2:	80 91 e8 08 	lds	r24, 0x08E8
    a0d6:	80 37       	cpi	r24, 0x70	; 112
    a0d8:	09 f4       	brne	.+2      	; 0xa0dc <menu_flight+0x84>
    a0da:	65 c0       	rjmp	.+202    	; 0xa1a6 <menu_flight+0x14e>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)flight_menu_ranges, 0, (const uint16_t*)FlightMenuOffsets, (const uint16_t*)FlightMenuText, cursor);
    a0dc:	a0 90 04 05 	lds	r10, 0x0504
    a0e0:	b0 90 05 05 	lds	r11, 0x0505
    a0e4:	3f e6       	ldi	r19, 0x6F	; 111
    a0e6:	c3 2e       	mov	r12, r19
    a0e8:	36 e2       	ldi	r19, 0x26	; 38
    a0ea:	d3 2e       	mov	r13, r19
    a0ec:	4b e4       	ldi	r20, 0x4B	; 75
    a0ee:	e4 2e       	mov	r14, r20
    a0f0:	46 e2       	ldi	r20, 0x26	; 38
    a0f2:	f4 2e       	mov	r15, r20
    a0f4:	00 e0       	ldi	r16, 0x00	; 0
    a0f6:	21 ef       	ldi	r18, 0xF1	; 241
    a0f8:	35 e2       	ldi	r19, 0x25	; 37
    a0fa:	a2 01       	movw	r20, r4
    a0fc:	b3 01       	movw	r22, r6
    a0fe:	80 91 4d 05 	lds	r24, 0x054D
    a102:	90 91 4e 05 	lds	r25, 0x054E
    a106:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    a10a:	58 e4       	ldi	r21, 0x48	; 72
    a10c:	c5 2e       	mov	r12, r21
    a10e:	55 e0       	ldi	r21, 0x05	; 5
    a110:	d5 2e       	mov	r13, r21
    a112:	6d e4       	ldi	r22, 0x4D	; 77
    a114:	e6 2e       	mov	r14, r22
    a116:	65 e0       	ldi	r22, 0x05	; 5
    a118:	f6 2e       	mov	r15, r22
    a11a:	04 e0       	ldi	r16, 0x04	; 4
    a11c:	15 e0       	ldi	r17, 0x05	; 5
    a11e:	20 91 e8 08 	lds	r18, 0x08E8
    a122:	40 e0       	ldi	r20, 0x00	; 0
    a124:	50 e0       	ldi	r21, 0x00	; 0
    a126:	b3 01       	movw	r22, r6
    a128:	82 e1       	ldi	r24, 0x12	; 18
    a12a:	90 e0       	ldi	r25, 0x00	; 0
    a12c:	0e 94 9b 4e 	call	0x9d36	; 0x9d36 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - reference));
    a130:	60 91 48 05 	lds	r22, 0x0548
    a134:	66 19       	sub	r22, r6
    a136:	81 ef       	ldi	r24, 0xF1	; 241
    a138:	95 e2       	ldi	r25, 0x25	; 37
    a13a:	0e 94 40 48 	call	0x9080	; 0x9080 <get_menu_range>
    a13e:	29 83       	std	Y+1, r18	; 0x01
    a140:	3a 83       	std	Y+2, r19	; 0x02
    a142:	4b 83       	std	Y+3, r20	; 0x03
    a144:	5c 83       	std	Y+4, r21	; 0x04
    a146:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    a148:	80 91 e8 08 	lds	r24, 0x08E8
    a14c:	80 3e       	cpi	r24, 0xE0	; 224
    a14e:	f9 f4       	brne	.+62     	; 0xa18e <menu_flight+0x136>
		{
			text_link = pgm_read_word(&FlightMenuText[menu_temp - reference]);
    a150:	80 91 48 05 	lds	r24, 0x0548
    a154:	90 91 49 05 	lds	r25, 0x0549
    a158:	bc 01       	movw	r22, r24
    a15a:	66 19       	sub	r22, r6
    a15c:	77 09       	sbc	r23, r7
    a15e:	fb 01       	movw	r30, r22
    a160:	ee 0f       	add	r30, r30
    a162:	ff 1f       	adc	r31, r31
    a164:	e1 59       	subi	r30, 0x91	; 145
    a166:	f9 4d       	sbci	r31, 0xD9	; 217
    a168:	a5 90       	lpm	r10, Z+
    a16a:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - reference), 1, range, 0, text_link, false, 0);
    a16c:	bb 24       	eor	r11, r11
    a16e:	64 0d       	add	r22, r4
    a170:	75 1d       	adc	r23, r5
    a172:	1f 92       	push	r1
    a174:	1f 92       	push	r1
    a176:	81 2c       	mov	r8, r1
    a178:	c1 2c       	mov	r12, r1
    a17a:	e9 80       	ldd	r14, Y+1	; 0x01
    a17c:	fa 80       	ldd	r15, Y+2	; 0x02
    a17e:	0b 81       	ldd	r16, Y+3	; 0x03
    a180:	1c 81       	ldd	r17, Y+4	; 0x04
    a182:	2d 81       	ldd	r18, Y+5	; 0x05
    a184:	41 e0       	ldi	r20, 0x01	; 1
    a186:	0e 94 cc 48 	call	0x9198	; 0x9198 <do_menu_item>
    a18a:	0f 90       	pop	r0
    a18c:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    a18e:	80 91 e8 08 	lds	r24, 0x08E8
    a192:	80 3e       	cpi	r24, 0xE0	; 224
    a194:	09 f0       	breq	.+2      	; 0xa198 <menu_flight+0x140>
    a196:	9d cf       	rjmp	.-198    	; 0xa0d2 <menu_flight+0x7a>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    a198:	0e 94 58 55 	call	0xaab0	; 0xaab0 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    a19c:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    a1a0:	0e 94 be 51 	call	0xa37c	; 0xa37c <Wait_BUTTON4>
    a1a4:	96 cf       	rjmp	.-212    	; 0xa0d2 <menu_flight+0x7a>
		}
	}
}
    a1a6:	0f 90       	pop	r0
    a1a8:	0f 90       	pop	r0
    a1aa:	0f 90       	pop	r0
    a1ac:	0f 90       	pop	r0
    a1ae:	0f 90       	pop	r0
    a1b0:	df 91       	pop	r29
    a1b2:	cf 91       	pop	r28
    a1b4:	1f 91       	pop	r17
    a1b6:	0f 91       	pop	r16
    a1b8:	ff 90       	pop	r15
    a1ba:	ef 90       	pop	r14
    a1bc:	df 90       	pop	r13
    a1be:	cf 90       	pop	r12
    a1c0:	bf 90       	pop	r11
    a1c2:	af 90       	pop	r10
    a1c4:	8f 90       	pop	r8
    a1c6:	7f 90       	pop	r7
    a1c8:	6f 90       	pop	r6
    a1ca:	5f 90       	pop	r5
    a1cc:	4f 90       	pop	r4
    a1ce:	08 95       	ret

0000a1d0 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    a1d0:	90 e0       	ldi	r25, 0x00	; 0
    a1d2:	fc 01       	movw	r30, r24
    a1d4:	ed 54       	subi	r30, 0x4D	; 77
    a1d6:	f1 09       	sbc	r31, r1
    a1d8:	e8 31       	cpi	r30, 0x18	; 24
    a1da:	f1 05       	cpc	r31, r1
    a1dc:	c0 f5       	brcc	.+112    	; 0xa24e <do_main_menu_item+0x7e>
    a1de:	e3 58       	subi	r30, 0x83	; 131
    a1e0:	ff 4f       	sbci	r31, 0xFF	; 255
    a1e2:	0c 94 6d 6c 	jmp	0xd8da	; 0xd8da <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    a1e6:	82 e0       	ldi	r24, 0x02	; 2
    a1e8:	01 c0       	rjmp	.+2      	; 0xa1ec <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup
    a1ea:	81 e0       	ldi	r24, 0x01	; 1
    a1ec:	0c 94 03 54 	jmp	0xa806	; 0xa806 <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    a1f0:	0c 94 31 20 	jmp	0x4062	; 0x4062 <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity
    a1f4:	0c 94 ba 24 	jmp	0x4974	; 0x4974 <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    a1f8:	0c 94 30 21 	jmp	0x4260	; 0x4260 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    a1fc:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    a200:	80 e0       	ldi	r24, 0x00	; 0
    a202:	01 c0       	rjmp	.+2      	; 0xa206 <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    a204:	81 e0       	ldi	r24, 0x01	; 1
    a206:	0c 94 2c 50 	jmp	0xa058	; 0xa058 <menu_flight>
			break;
		case MAINSTART+8:
			menu_curves();			// 9.Curves menu
    a20a:	0c 94 33 47 	jmp	0x8e66	; 0x8e66 <menu_curves>
			break;
		case MAINSTART+9:
			menu_offsets();			// 10.Output offsets
    a20e:	0c 94 94 52 	jmp	0xa528	; 0xa528 <menu_offsets>
			break;
		case MAINSTART+10:
			menu_mixer(0);			// 11.OUT1 Mixer
    a212:	80 e0       	ldi	r24, 0x00	; 0
    a214:	01 c0       	rjmp	.+2      	; 0xa218 <do_main_menu_item+0x48>
			break;
		case MAINSTART+11:
			menu_mixer(1);			// 12.OUT2 Mixer
    a216:	81 e0       	ldi	r24, 0x01	; 1
    a218:	0c 94 cb 51 	jmp	0xa396	; 0xa396 <menu_mixer>
			break;
		case MAINSTART+12:
			menu_mixer(2);			// 13.OUT3 Mixer
    a21c:	82 e0       	ldi	r24, 0x02	; 2
    a21e:	fc cf       	rjmp	.-8      	; 0xa218 <do_main_menu_item+0x48>
			break;
		case MAINSTART+13:
			menu_mixer(3);			// 14.OUT4 Mixer
    a220:	83 e0       	ldi	r24, 0x03	; 3
    a222:	fa cf       	rjmp	.-12     	; 0xa218 <do_main_menu_item+0x48>
			break;
		case MAINSTART+14:
			menu_mixer(4);			// 15.OUT5 Mixer
    a224:	84 e0       	ldi	r24, 0x04	; 4
    a226:	f8 cf       	rjmp	.-16     	; 0xa218 <do_main_menu_item+0x48>
			break;
		case MAINSTART+15:
			menu_mixer(5);			// 16.OUT6 Mixer
    a228:	85 e0       	ldi	r24, 0x05	; 5
    a22a:	f6 cf       	rjmp	.-20     	; 0xa218 <do_main_menu_item+0x48>
			break;
		case MAINSTART+16:
			menu_mixer(6);			// 17.OUT7 Mixer
    a22c:	86 e0       	ldi	r24, 0x06	; 6
    a22e:	f4 cf       	rjmp	.-24     	; 0xa218 <do_main_menu_item+0x48>
			break;
		case MAINSTART+17:
			menu_mixer(7);			// 18.OUT8 Mixer
    a230:	87 e0       	ldi	r24, 0x07	; 7
    a232:	f2 cf       	rjmp	.-28     	; 0xa218 <do_main_menu_item+0x48>
			break;
		case MAINSTART+18:
			menu_servo_setup(1);	// 19.Servo direction
    a234:	81 e0       	ldi	r24, 0x01	; 1
    a236:	03 c0       	rjmp	.+6      	; 0xa23e <do_main_menu_item+0x6e>
			break;
		case MAINSTART+19:
			menu_servo_setup(2); 	// 20.Neg. Servo trvl. (%)
    a238:	82 e0       	ldi	r24, 0x02	; 2
    a23a:	01 c0       	rjmp	.+2      	; 0xa23e <do_main_menu_item+0x6e>
			break;
		case MAINSTART+20:
			menu_servo_setup(3); 	// 21.Pos. Servo trvl. (%)
    a23c:	83 e0       	ldi	r24, 0x03	; 3
    a23e:	0c 94 04 53 	jmp	0xa608	; 0xa608 <menu_servo_setup>
			break;
		case MAINSTART+21:
			menu_channel();			// 22.Custom Ch. order
    a242:	0c 94 8b 46 	jmp	0x8d16	; 0x8d16 <menu_channel>
			break;
		case MAINSTART+22:
			Display_in_out();		// 23.IO menu
    a246:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <Display_in_out>
			break;
		case MAINSTART+23:
			menu_log();				// 24.Error log
    a24a:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <menu_log>
    a24e:	08 95       	ret

0000a250 <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    a250:	1f 99       	sbic	0x03, 7	; 3
    a252:	0a c0       	rjmp	.+20     	; 0xa268 <Wait_BUTTON1+0x18>
    a254:	2f e3       	ldi	r18, 0x3F	; 63
    a256:	8d e0       	ldi	r24, 0x0D	; 13
    a258:	93 e0       	ldi	r25, 0x03	; 3
    a25a:	21 50       	subi	r18, 0x01	; 1
    a25c:	80 40       	sbci	r24, 0x00	; 0
    a25e:	90 40       	sbci	r25, 0x00	; 0
    a260:	e1 f7       	brne	.-8      	; 0xa25a <Wait_BUTTON1+0xa>
    a262:	00 c0       	rjmp	.+0      	; 0xa264 <Wait_BUTTON1+0x14>
    a264:	00 00       	nop
    a266:	f4 cf       	rjmp	.-24     	; 0xa250 <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    a268:	08 95       	ret

0000a26a <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag = 1;

void menu_main(void)
{
    a26a:	9f 92       	push	r9
    a26c:	af 92       	push	r10
    a26e:	bf 92       	push	r11
    a270:	cf 92       	push	r12
    a272:	df 92       	push	r13
    a274:	ef 92       	push	r14
    a276:	ff 92       	push	r15
    a278:	0f 93       	push	r16
    a27a:	1f 93       	push	r17
    a27c:	cf 93       	push	r28
    a27e:	df 93       	push	r29
	static uint16_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    a280:	80 ef       	ldi	r24, 0xF0	; 240
    a282:	80 93 e8 08 	sts	0x08E8, r24

	menu_beep(1);
    a286:	81 e0       	ldi	r24, 0x01	; 1
    a288:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <menu_beep>

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    a28c:	0e 94 28 51 	call	0xa250	; 0xa250 <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    a290:	23 e0       	ldi	r18, 0x03	; 3
    a292:	a2 2e       	mov	r10, r18
    a294:	b1 2c       	mov	r11, r1

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    a296:	30 ef       	ldi	r19, 0xF0	; 240
    a298:	93 2e       	mov	r9, r19
	menu_beep(1);

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    a29a:	80 91 e8 08 	lds	r24, 0x08E8
    a29e:	80 37       	cpi	r24, 0x70	; 112
    a2a0:	09 f4       	brne	.+2      	; 0xa2a4 <menu_main+0x3a>
    a2a2:	60 c0       	rjmp	.+192    	; 0xa364 <menu_main+0xfa>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    a2a4:	80 e0       	ldi	r24, 0x00	; 0
    a2a6:	91 e0       	ldi	r25, 0x01	; 1
    a2a8:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <clear_buffer>

		// Print menu
		print_menu_frame(BASIC);													// Frame
    a2ac:	80 e0       	ldi	r24, 0x00	; 0
    a2ae:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    a2b2:	c0 e0       	ldi	r28, 0x00	; 0
    a2b4:	d0 e0       	ldi	r29, 0x00	; 0
    a2b6:	fe 01       	movw	r30, r28
    a2b8:	e3 51       	subi	r30, 0x13	; 19
    a2ba:	fa 4d       	sbci	r31, 0xDA	; 218
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    a2bc:	24 91       	lpm	r18, Z
    a2be:	30 e0       	ldi	r19, 0x00	; 0
    a2c0:	80 91 09 05 	lds	r24, 0x0509
    a2c4:	90 91 0a 05 	lds	r25, 0x050A
    a2c8:	4a e0       	ldi	r20, 0x0A	; 10
    a2ca:	50 e0       	ldi	r21, 0x00	; 0
    a2cc:	6b e7       	ldi	r22, 0x7B	; 123
    a2ce:	7f e0       	ldi	r23, 0x0F	; 15
    a2d0:	8c 0f       	add	r24, r28
    a2d2:	9d 1f       	adc	r25, r29
    a2d4:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(BASIC);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    a2d8:	21 96       	adiw	r28, 0x01	; 1
    a2da:	c4 30       	cpi	r28, 0x04	; 4
    a2dc:	d1 05       	cpc	r29, r1
    a2de:	59 f7       	brne	.-42     	; 0xa2b6 <menu_main+0x4c>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    a2e0:	80 91 06 05 	lds	r24, 0x0506
    a2e4:	0e 94 65 4f 	call	0x9eca	; 0x9eca <print_cursor>
		write_buffer(buffer);
    a2e8:	80 e0       	ldi	r24, 0x00	; 0
    a2ea:	91 e0       	ldi	r25, 0x01	; 1
    a2ec:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    a2f0:	81 e0       	ldi	r24, 0x01	; 1
    a2f2:	0e 94 97 48 	call	0x912e	; 0x912e <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    a2f6:	8b e4       	ldi	r24, 0x4B	; 75
    a2f8:	c8 2e       	mov	r12, r24
    a2fa:	85 e0       	ldi	r24, 0x05	; 5
    a2fc:	d8 2e       	mov	r13, r24
    a2fe:	99 e0       	ldi	r25, 0x09	; 9
    a300:	e9 2e       	mov	r14, r25
    a302:	95 e0       	ldi	r25, 0x05	; 5
    a304:	f9 2e       	mov	r15, r25
    a306:	06 e0       	ldi	r16, 0x06	; 6
    a308:	15 e0       	ldi	r17, 0x05	; 5
    a30a:	20 91 e8 08 	lds	r18, 0x08E8
    a30e:	40 e0       	ldi	r20, 0x00	; 0
    a310:	50 e0       	ldi	r21, 0x00	; 0
    a312:	6d e4       	ldi	r22, 0x4D	; 77
    a314:	70 e0       	ldi	r23, 0x00	; 0
    a316:	87 e1       	ldi	r24, 0x17	; 23
    a318:	90 e0       	ldi	r25, 0x00	; 0
    a31a:	0e 94 9b 4e 	call	0x9d36	; 0x9d36 <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    a31e:	80 91 4b 05 	lds	r24, 0x054B
    a322:	90 91 4c 05 	lds	r25, 0x054C
    a326:	20 91 4a 05 	lds	r18, 0x054A
    a32a:	30 e0       	ldi	r19, 0x00	; 0
    a32c:	82 17       	cp	r24, r18
    a32e:	93 07       	cpc	r25, r19
    a330:	69 f0       	breq	.+26     	; 0xa34c <menu_main+0xe2>
		{
			cursor = LINE0;
    a332:	b0 92 05 05 	sts	0x0505, r11
    a336:	a0 92 04 05 	sts	0x0504, r10
			menu_temp = 0;
    a33a:	10 92 49 05 	sts	0x0549, r1
    a33e:	10 92 48 05 	sts	0x0548, r1
			old_menu = main_temp;
    a342:	80 93 4a 05 	sts	0x054A, r24
			menu_flag = 1;
    a346:	21 e0       	ldi	r18, 0x01	; 1
    a348:	20 93 08 05 	sts	0x0508, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    a34c:	20 91 e8 08 	lds	r18, 0x08E8
    a350:	20 3e       	cpi	r18, 0xE0	; 224
    a352:	09 f0       	breq	.+2      	; 0xa356 <menu_main+0xec>
    a354:	a2 cf       	rjmp	.-188    	; 0xa29a <menu_main+0x30>
		{
			do_main_menu_item(main_temp);
    a356:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <do_main_menu_item>
			button = NONE;
    a35a:	90 92 e8 08 	sts	0x08E8, r9

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    a35e:	0e 94 28 51 	call	0xa250	; 0xa250 <Wait_BUTTON1>
    a362:	9b cf       	rjmp	.-202    	; 0xa29a <menu_main+0x30>
		}
	}
}
    a364:	df 91       	pop	r29
    a366:	cf 91       	pop	r28
    a368:	1f 91       	pop	r17
    a36a:	0f 91       	pop	r16
    a36c:	ff 90       	pop	r15
    a36e:	ef 90       	pop	r14
    a370:	df 90       	pop	r13
    a372:	cf 90       	pop	r12
    a374:	bf 90       	pop	r11
    a376:	af 90       	pop	r10
    a378:	9f 90       	pop	r9
    a37a:	08 95       	ret

0000a37c <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    a37c:	1c 99       	sbic	0x03, 4	; 3
    a37e:	0a c0       	rjmp	.+20     	; 0xa394 <Wait_BUTTON4+0x18>
    a380:	2f e3       	ldi	r18, 0x3F	; 63
    a382:	8d e0       	ldi	r24, 0x0D	; 13
    a384:	93 e0       	ldi	r25, 0x03	; 3
    a386:	21 50       	subi	r18, 0x01	; 1
    a388:	80 40       	sbci	r24, 0x00	; 0
    a38a:	90 40       	sbci	r25, 0x00	; 0
    a38c:	e1 f7       	brne	.-8      	; 0xa386 <Wait_BUTTON4+0xa>
    a38e:	00 c0       	rjmp	.+0      	; 0xa390 <Wait_BUTTON4+0x14>
    a390:	00 00       	nop
    a392:	f4 cf       	rjmp	.-24     	; 0xa37c <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    a394:	08 95       	ret

0000a396 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    a396:	4f 92       	push	r4
    a398:	5f 92       	push	r5
    a39a:	6f 92       	push	r6
    a39c:	7f 92       	push	r7
    a39e:	8f 92       	push	r8
    a3a0:	af 92       	push	r10
    a3a2:	bf 92       	push	r11
    a3a4:	cf 92       	push	r12
    a3a6:	df 92       	push	r13
    a3a8:	ef 92       	push	r14
    a3aa:	ff 92       	push	r15
    a3ac:	0f 93       	push	r16
    a3ae:	1f 93       	push	r17
    a3b0:	cf 93       	push	r28
    a3b2:	df 93       	push	r29
    a3b4:	00 d0       	rcall	.+0      	; 0xa3b6 <menu_mixer+0x20>
    a3b6:	00 d0       	rcall	.+0      	; 0xa3b8 <menu_mixer+0x22>
    a3b8:	1f 92       	push	r1
    a3ba:	cd b7       	in	r28, 0x3d	; 61
    a3bc:	de b7       	in	r29, 0x3e	; 62
	menu_range_t range;
	uint16_t text_link = 0;
	uint16_t reference;

	// Set the correct text list for the selected reference
	if (Config.P1_Reference != MODEL)
    a3be:	90 91 a4 06 	lds	r25, 0x06A4
    a3c2:	92 30       	cpi	r25, 0x02	; 2
    a3c4:	21 f0       	breq	.+8      	; 0xa3ce <menu_mixer+0x38>
	{
		reference = MIXERSTARTE;
    a3c6:	ae eb       	ldi	r26, 0xBE	; 190
    a3c8:	6a 2e       	mov	r6, r26
    a3ca:	71 2c       	mov	r7, r1
    a3cc:	04 c0       	rjmp	.+8      	; 0xa3d6 <menu_mixer+0x40>
	}
	else
	{
		reference = MIXERSTARTM;
    a3ce:	fa e5       	ldi	r31, 0x5A	; 90
    a3d0:	6f 2e       	mov	r6, r31
    a3d2:	77 24       	eor	r7, r7
    a3d4:	73 94       	inc	r7
	}
	
	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    a3d6:	20 91 08 05 	lds	r18, 0x0508
    a3da:	22 23       	and	r18, r18
    a3dc:	69 f0       	breq	.+26     	; 0xa3f8 <menu_mixer+0x62>
	{
		// Set the correct text list for the selected reference
		if (Config.P1_Reference != MODEL)
    a3de:	92 30       	cpi	r25, 0x02	; 2
    a3e0:	19 f0       	breq	.+6      	; 0xa3e8 <menu_mixer+0x52>
		{
			sub_top = MIXERSTARTE;
    a3e2:	2e eb       	ldi	r18, 0xBE	; 190
    a3e4:	30 e0       	ldi	r19, 0x00	; 0
    a3e6:	02 c0       	rjmp	.+4      	; 0xa3ec <menu_mixer+0x56>
		}
		else
		{
			sub_top = MIXERSTARTM;
    a3e8:	2a e5       	ldi	r18, 0x5A	; 90
    a3ea:	31 e0       	ldi	r19, 0x01	; 1
    a3ec:	30 93 4e 05 	sts	0x054E, r19
    a3f0:	20 93 4d 05 	sts	0x054D, r18
		}
		menu_flag = 0;
    a3f4:	10 92 08 05 	sts	0x0508, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    a3f8:	92 e2       	ldi	r25, 0x22	; 34
    a3fa:	89 9f       	mul	r24, r25
    a3fc:	20 01       	movw	r4, r0
    a3fe:	11 24       	eor	r1, r1
    a400:	c2 01       	movw	r24, r4
    a402:	8e 54       	subi	r24, 0x4E	; 78
    a404:	99 4f       	sbci	r25, 0xF9	; 249
    a406:	2c 01       	movw	r4, r24
			sub_top = MIXERSTARTM;
		}
		menu_flag = 0;
	}

	while(button != BACK)
    a408:	80 91 e8 08 	lds	r24, 0x08E8
    a40c:	80 37       	cpi	r24, 0x70	; 112
    a40e:	09 f4       	brne	.+2      	; 0xa412 <menu_mixer+0x7c>
    a410:	76 c0       	rjmp	.+236    	; 0xa4fe <menu_mixer+0x168>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		// Set the correct text list for the selected reference
		if (Config.P1_Reference != MODEL)
    a412:	20 91 a4 06 	lds	r18, 0x06A4
    a416:	a0 90 04 05 	lds	r10, 0x0504
    a41a:	b0 90 05 05 	lds	r11, 0x0505
    a41e:	80 91 4d 05 	lds	r24, 0x054D
    a422:	90 91 4e 05 	lds	r25, 0x054E
    a426:	22 30       	cpi	r18, 0x02	; 2
    a428:	29 f0       	breq	.+10     	; 0xa434 <menu_mixer+0x9e>
		{
			print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, (const uint16_t*) MixerMenuOffsets, (const uint16_t*)MixerMenuTextE, cursor);
    a42a:	e1 ea       	ldi	r30, 0xA1	; 161
    a42c:	ce 2e       	mov	r12, r30
    a42e:	e7 e2       	ldi	r30, 0x27	; 39
    a430:	de 2e       	mov	r13, r30
    a432:	04 c0       	rjmp	.+8      	; 0xa43c <menu_mixer+0xa6>
		}
		else
		{
			print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, (const uint16_t*) MixerMenuOffsets, (const uint16_t*)MixerMenuTextM, cursor);
    a434:	75 e6       	ldi	r23, 0x65	; 101
    a436:	c7 2e       	mov	r12, r23
    a438:	77 e2       	ldi	r23, 0x27	; 39
    a43a:	d7 2e       	mov	r13, r23
    a43c:	49 e2       	ldi	r20, 0x29	; 41
    a43e:	e4 2e       	mov	r14, r20
    a440:	47 e2       	ldi	r20, 0x27	; 39
    a442:	f4 2e       	mov	r15, r20
    a444:	00 e0       	ldi	r16, 0x00	; 0
    a446:	23 e9       	ldi	r18, 0x93	; 147
    a448:	36 e2       	ldi	r19, 0x26	; 38
    a44a:	a2 01       	movw	r20, r4
    a44c:	b3 01       	movw	r22, r6
    a44e:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <print_menu_items>
		}

		// Handle menu changes
		update_menu(MIXERITEMS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    a452:	58 e4       	ldi	r21, 0x48	; 72
    a454:	c5 2e       	mov	r12, r21
    a456:	55 e0       	ldi	r21, 0x05	; 5
    a458:	d5 2e       	mov	r13, r21
    a45a:	6d e4       	ldi	r22, 0x4D	; 77
    a45c:	e6 2e       	mov	r14, r22
    a45e:	65 e0       	ldi	r22, 0x05	; 5
    a460:	f6 2e       	mov	r15, r22
    a462:	04 e0       	ldi	r16, 0x04	; 4
    a464:	15 e0       	ldi	r17, 0x05	; 5
    a466:	20 91 e8 08 	lds	r18, 0x08E8
    a46a:	40 e0       	ldi	r20, 0x00	; 0
    a46c:	50 e0       	ldi	r21, 0x00	; 0
    a46e:	b3 01       	movw	r22, r6
    a470:	8e e1       	ldi	r24, 0x1E	; 30
    a472:	90 e0       	ldi	r25, 0x00	; 0
    a474:	0e 94 9b 4e 	call	0x9d36	; 0x9d36 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - reference);
    a478:	60 91 48 05 	lds	r22, 0x0548
    a47c:	66 19       	sub	r22, r6
    a47e:	83 e9       	ldi	r24, 0x93	; 147
    a480:	96 e2       	ldi	r25, 0x26	; 38
    a482:	0e 94 40 48 	call	0x9080	; 0x9080 <get_menu_range>
    a486:	29 83       	std	Y+1, r18	; 0x01
    a488:	3a 83       	std	Y+2, r19	; 0x02
    a48a:	4b 83       	std	Y+3, r20	; 0x03
    a48c:	5c 83       	std	Y+4, r21	; 0x04
    a48e:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    a490:	80 91 e8 08 	lds	r24, 0x08E8
    a494:	80 3e       	cpi	r24, 0xE0	; 224
    a496:	39 f5       	brne	.+78     	; 0xa4e6 <menu_mixer+0x150>
		{
			// Set the correct text list for the selected reference
			if (Config.P1_Reference != MODEL)
    a498:	20 91 a4 06 	lds	r18, 0x06A4
    a49c:	80 91 48 05 	lds	r24, 0x0548
    a4a0:	90 91 49 05 	lds	r25, 0x0549
			{
				text_link = pgm_read_word(&MixerMenuTextE[menu_temp - reference]);
    a4a4:	fc 01       	movw	r30, r24
    a4a6:	e6 19       	sub	r30, r6
    a4a8:	f7 09       	sbc	r31, r7
    a4aa:	ee 0f       	add	r30, r30
    a4ac:	ff 1f       	adc	r31, r31
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - reference);

		if (button == ENTER)
		{
			// Set the correct text list for the selected reference
			if (Config.P1_Reference != MODEL)
    a4ae:	22 30       	cpi	r18, 0x02	; 2
    a4b0:	19 f0       	breq	.+6      	; 0xa4b8 <menu_mixer+0x122>
			{
				text_link = pgm_read_word(&MixerMenuTextE[menu_temp - reference]);
    a4b2:	ef 55       	subi	r30, 0x5F	; 95
    a4b4:	f8 4d       	sbci	r31, 0xD8	; 216
    a4b6:	02 c0       	rjmp	.+4      	; 0xa4bc <menu_mixer+0x126>
			}
			else
			{
				text_link = pgm_read_word(&MixerMenuTextM[menu_temp - reference]);
    a4b8:	eb 59       	subi	r30, 0x9B	; 155
    a4ba:	f8 4d       	sbci	r31, 0xD8	; 216
    a4bc:	a5 90       	lpm	r10, Z+
    a4be:	b4 90       	lpm	r11, Z
			}
			
			do_menu_item(menu_temp, value_ptr + (menu_temp - reference), 1, range, 0, text_link, false, 0);
    a4c0:	bc 01       	movw	r22, r24
    a4c2:	66 19       	sub	r22, r6
    a4c4:	77 09       	sbc	r23, r7
    a4c6:	64 0d       	add	r22, r4
    a4c8:	75 1d       	adc	r23, r5
    a4ca:	1f 92       	push	r1
    a4cc:	1f 92       	push	r1
    a4ce:	81 2c       	mov	r8, r1
    a4d0:	c1 2c       	mov	r12, r1
    a4d2:	e9 80       	ldd	r14, Y+1	; 0x01
    a4d4:	fa 80       	ldd	r15, Y+2	; 0x02
    a4d6:	0b 81       	ldd	r16, Y+3	; 0x03
    a4d8:	1c 81       	ldd	r17, Y+4	; 0x04
    a4da:	2d 81       	ldd	r18, Y+5	; 0x05
    a4dc:	41 e0       	ldi	r20, 0x01	; 1
    a4de:	0e 94 cc 48 	call	0x9198	; 0x9198 <do_menu_item>
    a4e2:	0f 90       	pop	r0
    a4e4:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    a4e6:	80 91 e8 08 	lds	r24, 0x08E8
    a4ea:	80 3e       	cpi	r24, 0xE0	; 224
    a4ec:	09 f0       	breq	.+2      	; 0xa4f0 <menu_mixer+0x15a>
    a4ee:	8c cf       	rjmp	.-232    	; 0xa408 <menu_mixer+0x72>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    a4f0:	0e 94 58 55 	call	0xaab0	; 0xaab0 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    a4f4:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    a4f8:	0e 94 be 51 	call	0xa37c	; 0xa37c <Wait_BUTTON4>
    a4fc:	85 cf       	rjmp	.-246    	; 0xa408 <menu_mixer+0x72>
		}
	}
}
    a4fe:	0f 90       	pop	r0
    a500:	0f 90       	pop	r0
    a502:	0f 90       	pop	r0
    a504:	0f 90       	pop	r0
    a506:	0f 90       	pop	r0
    a508:	df 91       	pop	r29
    a50a:	cf 91       	pop	r28
    a50c:	1f 91       	pop	r17
    a50e:	0f 91       	pop	r16
    a510:	ff 90       	pop	r15
    a512:	ef 90       	pop	r14
    a514:	df 90       	pop	r13
    a516:	cf 90       	pop	r12
    a518:	bf 90       	pop	r11
    a51a:	af 90       	pop	r10
    a51c:	8f 90       	pop	r8
    a51e:	7f 90       	pop	r7
    a520:	6f 90       	pop	r6
    a522:	5f 90       	pop	r5
    a524:	4f 90       	pop	r4
    a526:	08 95       	ret

0000a528 <menu_offsets>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_offsets(void)
{
    a528:	af 92       	push	r10
    a52a:	bf 92       	push	r11
    a52c:	cf 92       	push	r12
    a52e:	df 92       	push	r13
    a530:	ef 92       	push	r14
    a532:	ff 92       	push	r15
    a534:	0f 93       	push	r16
    a536:	1f 93       	push	r17
    a538:	cf 93       	push	r28
	int8_t *value_ptr;
	uint16_t reference = OFFSETSSTART;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    a53a:	80 91 08 05 	lds	r24, 0x0508
    a53e:	88 23       	and	r24, r24
    a540:	41 f0       	breq	.+16     	; 0xa552 <menu_offsets+0x2a>
	{
		sub_top = OFFSETSSTART;			
    a542:	86 ee       	ldi	r24, 0xE6	; 230
    a544:	90 e0       	ldi	r25, 0x00	; 0
    a546:	90 93 4e 05 	sts	0x054E, r25
    a54a:	80 93 4d 05 	sts	0x054D, r24
		menu_flag = 0;
    a54e:	10 92 08 05 	sts	0x0508, r1

		// Stop unwanted exit to main menu
		if (button == ABORT)
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
			button = NONE;
    a552:	c0 ef       	ldi	r28, 0xF0	; 240
	{
		sub_top = OFFSETSSTART;			
		menu_flag = 0;
	}

	while(button != BACK)
    a554:	80 91 e8 08 	lds	r24, 0x08E8
    a558:	80 37       	cpi	r24, 0x70	; 112
    a55a:	09 f4       	brne	.+2      	; 0xa55e <menu_offsets+0x36>
    a55c:	4b c0       	rjmp	.+150    	; 0xa5f4 <menu_offsets+0xcc>
	{
		value_ptr = &Config.Offsets[0].Point1;

		// Print top level menu
		print_menu_items(sub_top, reference, value_ptr, (const unsigned char*)Offsets_menu_ranges, 0, (const uint16_t*)OffsetsMenuOffsets, (const uint16_t*)OffsetsMenuText, cursor);
    a55e:	a0 90 04 05 	lds	r10, 0x0504
    a562:	b0 90 05 05 	lds	r11, 0x0505
    a566:	8d e2       	ldi	r24, 0x2D	; 45
    a568:	c8 2e       	mov	r12, r24
    a56a:	89 e2       	ldi	r24, 0x29	; 41
    a56c:	d8 2e       	mov	r13, r24
    a56e:	9d e1       	ldi	r25, 0x1D	; 29
    a570:	e9 2e       	mov	r14, r25
    a572:	99 e2       	ldi	r25, 0x29	; 41
    a574:	f9 2e       	mov	r15, r25
    a576:	00 e0       	ldi	r16, 0x00	; 0
    a578:	2d ed       	ldi	r18, 0xDD	; 221
    a57a:	37 e2       	ldi	r19, 0x27	; 39
    a57c:	46 e6       	ldi	r20, 0x66	; 102
    a57e:	58 e0       	ldi	r21, 0x08	; 8
    a580:	66 ee       	ldi	r22, 0xE6	; 230
    a582:	70 e0       	ldi	r23, 0x00	; 0
    a584:	80 91 4d 05 	lds	r24, 0x054D
    a588:	90 91 4e 05 	lds	r25, 0x054E
    a58c:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <print_menu_items>

		// Handle menu navigation
		update_menu(MAX_OUTPUTS, reference, 0, button, &cursor, &sub_top, &menu_temp);
    a590:	28 e4       	ldi	r18, 0x48	; 72
    a592:	c2 2e       	mov	r12, r18
    a594:	25 e0       	ldi	r18, 0x05	; 5
    a596:	d2 2e       	mov	r13, r18
    a598:	3d e4       	ldi	r19, 0x4D	; 77
    a59a:	e3 2e       	mov	r14, r19
    a59c:	35 e0       	ldi	r19, 0x05	; 5
    a59e:	f3 2e       	mov	r15, r19
    a5a0:	04 e0       	ldi	r16, 0x04	; 4
    a5a2:	15 e0       	ldi	r17, 0x05	; 5
    a5a4:	20 91 e8 08 	lds	r18, 0x08E8
    a5a8:	40 e0       	ldi	r20, 0x00	; 0
    a5aa:	50 e0       	ldi	r21, 0x00	; 0
    a5ac:	66 ee       	ldi	r22, 0xE6	; 230
    a5ae:	70 e0       	ldi	r23, 0x00	; 0
    a5b0:	88 e0       	ldi	r24, 0x08	; 8
    a5b2:	90 e0       	ldi	r25, 0x00	; 0
    a5b4:	0e 94 9b 4e 	call	0x9d36	; 0x9d36 <update_menu>

		// Edit selected curve
		if (button == ENTER)
    a5b8:	80 91 e8 08 	lds	r24, 0x08E8
    a5bc:	80 3e       	cpi	r24, 0xE0	; 224
    a5be:	31 f4       	brne	.+12     	; 0xa5cc <menu_offsets+0xa4>
		{
			edit_curve_item(menu_temp - reference, OFFSET); // Curves after NUMBEROFCURVES are offsets
    a5c0:	80 91 48 05 	lds	r24, 0x0548
    a5c4:	65 e0       	ldi	r22, 0x05	; 5
    a5c6:	86 5e       	subi	r24, 0xE6	; 230
    a5c8:	0e 94 99 4a 	call	0x9532	; 0x9532 <edit_curve_item>
		}

		// Stop unwanted exit to main menu
		if (button == ABORT)
    a5cc:	80 91 e8 08 	lds	r24, 0x08E8
    a5d0:	80 3a       	cpi	r24, 0xA0	; 160
    a5d2:	21 f4       	brne	.+8      	; 0xa5dc <menu_offsets+0xb4>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    a5d4:	0e 94 28 51 	call	0xa250	; 0xa250 <Wait_BUTTON1>
			button = NONE;
    a5d8:	c0 93 e8 08 	sts	0x08E8, r28
		}

		// Update limits when exiting
		if (button == ENTER)
    a5dc:	80 91 e8 08 	lds	r24, 0x08E8
    a5e0:	80 3e       	cpi	r24, 0xE0	; 224
    a5e2:	09 f0       	breq	.+2      	; 0xa5e6 <menu_offsets+0xbe>
    a5e4:	b7 cf       	rjmp	.-146    	; 0xa554 <menu_offsets+0x2c>
		{
			Save_Config_to_EEPROM(); // Save value and return
    a5e6:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    a5ea:	0e 94 be 51 	call	0xa37c	; 0xa37c <Wait_BUTTON4>
			Wait_BUTTON1();	
    a5ee:	0e 94 28 51 	call	0xa250	; 0xa250 <Wait_BUTTON1>
    a5f2:	b0 cf       	rjmp	.-160    	; 0xa554 <menu_offsets+0x2c>
		}
	}
}
    a5f4:	cf 91       	pop	r28
    a5f6:	1f 91       	pop	r17
    a5f8:	0f 91       	pop	r16
    a5fa:	ff 90       	pop	r15
    a5fc:	ef 90       	pop	r14
    a5fe:	df 90       	pop	r13
    a600:	cf 90       	pop	r12
    a602:	bf 90       	pop	r11
    a604:	af 90       	pop	r10
    a606:	08 95       	ret

0000a608 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    a608:	2f 92       	push	r2
    a60a:	3f 92       	push	r3
    a60c:	4f 92       	push	r4
    a60e:	5f 92       	push	r5
    a610:	6f 92       	push	r6
    a612:	7f 92       	push	r7
    a614:	8f 92       	push	r8
    a616:	9f 92       	push	r9
    a618:	af 92       	push	r10
    a61a:	bf 92       	push	r11
    a61c:	cf 92       	push	r12
    a61e:	df 92       	push	r13
    a620:	ef 92       	push	r14
    a622:	ff 92       	push	r15
    a624:	0f 93       	push	r16
    a626:	1f 93       	push	r17
    a628:	cf 93       	push	r28
    a62a:	df 93       	push	r29
    a62c:	cd b7       	in	r28, 0x3d	; 61
    a62e:	de b7       	in	r29, 0x3e	; 62
    a630:	2a 97       	sbiw	r28, 0x0a	; 10
    a632:	0f b6       	in	r0, 0x3f	; 63
    a634:	f8 94       	cli
    a636:	de bf       	out	0x3e, r29	; 62
    a638:	0f be       	out	0x3f, r0	; 63
    a63a:	cd bf       	out	0x3d, r28	; 61
    a63c:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    a63e:	80 91 08 05 	lds	r24, 0x0508
    a642:	88 23       	and	r24, r24
    a644:	41 f0       	breq	.+16     	; 0xa656 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    a646:	86 ee       	ldi	r24, 0xE6	; 230
    a648:	90 e0       	ldi	r25, 0x00	; 0
    a64a:	90 93 4e 05 	sts	0x054E, r25
    a64e:	80 93 4d 05 	sts	0x054D, r24
		menu_flag = 0;
    a652:	10 92 08 05 	sts	0x0508, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    a656:	1e 82       	std	Y+6, r1	; 0x06
    a658:	fe eb       	ldi	r31, 0xBE	; 190
    a65a:	6f 2e       	mov	r6, r31
    a65c:	f7 e0       	ldi	r31, 0x07	; 7
    a65e:	7f 2e       	mov	r7, r31
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, (const uint16_t*)ServoMenuOffsets[section - 1], (const uint16_t*)ServoMenuText[section - 1], cursor);
    a660:	29 2c       	mov	r2, r9
    a662:	31 2c       	mov	r3, r1
    a664:	21 e0       	ldi	r18, 0x01	; 1
    a666:	22 1a       	sub	r2, r18
    a668:	31 08       	sbc	r3, r1
    a66a:	85 e0       	ldi	r24, 0x05	; 5
    a66c:	82 9d       	mul	r24, r2
    a66e:	20 01       	movw	r4, r0
    a670:	83 9d       	mul	r24, r3
    a672:	50 0c       	add	r5, r0
    a674:	11 24       	eor	r1, r1
    a676:	c2 01       	movw	r24, r4
    a678:	83 5c       	subi	r24, 0xC3	; 195
    a67a:	96 4d       	sbci	r25, 0xD6	; 214
    a67c:	2c 01       	movw	r4, r24
    a67e:	c1 01       	movw	r24, r2
    a680:	a4 e0       	ldi	r26, 0x04	; 4
    a682:	88 0f       	add	r24, r24
    a684:	99 1f       	adc	r25, r25
    a686:	aa 95       	dec	r26
    a688:	e1 f7       	brne	.-8      	; 0xa682 <menu_servo_setup+0x7a>
    a68a:	fc 01       	movw	r30, r24
    a68c:	e4 58       	subi	r30, 0x84	; 132
    a68e:	f6 4d       	sbci	r31, 0xD6	; 214
    a690:	f8 87       	std	Y+8, r31	; 0x08
    a692:	ef 83       	std	Y+7, r30	; 0x07
    a694:	9c 01       	movw	r18, r24
    a696:	24 5b       	subi	r18, 0xB4	; 180
    a698:	36 4d       	sbci	r19, 0xD6	; 214
    a69a:	3a 87       	std	Y+10, r19	; 0x0a
    a69c:	29 87       	std	Y+9, r18	; 0x09
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);

		if (button == ENTER)
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    a69e:	b3 e0       	ldi	r27, 0x03	; 3
    a6a0:	22 0c       	add	r2, r2
    a6a2:	33 1c       	adc	r3, r3
    a6a4:	ba 95       	dec	r27
    a6a6:	e1 f7       	brne	.-8      	; 0xa6a0 <menu_servo_setup+0x98>
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    a6a8:	80 91 e8 08 	lds	r24, 0x08E8
    a6ac:	80 37       	cpi	r24, 0x70	; 112
    a6ae:	09 f4       	brne	.+2      	; 0xa6b2 <menu_servo_setup+0xaa>
    a6b0:	91 c0       	rjmp	.+290    	; 0xa7d4 <menu_servo_setup+0x1cc>
    a6b2:	88 e0       	ldi	r24, 0x08	; 8
    a6b4:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    a6b6:	32 e0       	ldi	r19, 0x02	; 2
    a6b8:	93 16       	cp	r9, r19
    a6ba:	61 f0       	breq	.+24     	; 0xa6d4 <menu_servo_setup+0xcc>
    a6bc:	43 e0       	ldi	r20, 0x03	; 3
    a6be:	94 12       	cpse	r9, r20
    a6c0:	11 c0       	rjmp	.+34     	; 0xa6e4 <menu_servo_setup+0xdc>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    a6c2:	e1 e0       	ldi	r30, 0x01	; 1
    a6c4:	ee 83       	std	Y+6, r30	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    a6c6:	88 24       	eor	r8, r8
    a6c8:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    a6ca:	7e ec       	ldi	r23, 0xCE	; 206
    a6cc:	67 2e       	mov	r6, r23
    a6ce:	77 e0       	ldi	r23, 0x07	; 7
    a6d0:	77 2e       	mov	r7, r23
					servo_enable = true;
					zero_setting = true;
					break;
    a6d2:	08 c0       	rjmp	.+16     	; 0xa6e4 <menu_servo_setup+0xdc>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    a6d4:	91 e0       	ldi	r25, 0x01	; 1
    a6d6:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    a6d8:	88 24       	eor	r8, r8
    a6da:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    a6dc:	e6 ec       	ldi	r30, 0xC6	; 198
    a6de:	6e 2e       	mov	r6, r30
    a6e0:	e7 e0       	ldi	r30, 0x07	; 7
    a6e2:	7e 2e       	mov	r7, r30
    a6e4:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    a6e6:	39 f7       	brne	.-50     	; 0xa6b6 <menu_servo_setup+0xae>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, (const uint16_t*)ServoMenuOffsets[section - 1], (const uint16_t*)ServoMenuText[section - 1], cursor);
    a6e8:	a0 90 04 05 	lds	r10, 0x0504
    a6ec:	b0 90 05 05 	lds	r11, 0x0505
    a6f0:	cf 80       	ldd	r12, Y+7	; 0x07
    a6f2:	d8 84       	ldd	r13, Y+8	; 0x08
    a6f4:	e9 84       	ldd	r14, Y+9	; 0x09
    a6f6:	fa 84       	ldd	r15, Y+10	; 0x0a
    a6f8:	01 e0       	ldi	r16, 0x01	; 1
    a6fa:	92 01       	movw	r18, r4
    a6fc:	a3 01       	movw	r20, r6
    a6fe:	66 ee       	ldi	r22, 0xE6	; 230
    a700:	70 e0       	ldi	r23, 0x00	; 0
    a702:	80 91 4d 05 	lds	r24, 0x054D
    a706:	90 91 4e 05 	lds	r25, 0x054E
    a70a:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    a70e:	58 e4       	ldi	r21, 0x48	; 72
    a710:	c5 2e       	mov	r12, r21
    a712:	55 e0       	ldi	r21, 0x05	; 5
    a714:	d5 2e       	mov	r13, r21
    a716:	6d e4       	ldi	r22, 0x4D	; 77
    a718:	e6 2e       	mov	r14, r22
    a71a:	65 e0       	ldi	r22, 0x05	; 5
    a71c:	f6 2e       	mov	r15, r22
    a71e:	04 e0       	ldi	r16, 0x04	; 4
    a720:	15 e0       	ldi	r17, 0x05	; 5
    a722:	20 91 e8 08 	lds	r18, 0x08E8
    a726:	40 e0       	ldi	r20, 0x00	; 0
    a728:	50 e0       	ldi	r21, 0x00	; 0
    a72a:	66 ee       	ldi	r22, 0xE6	; 230
    a72c:	70 e0       	ldi	r23, 0x00	; 0
    a72e:	88 e0       	ldi	r24, 0x08	; 8
    a730:	90 e0       	ldi	r25, 0x00	; 0
    a732:	0e 94 9b 4e 	call	0x9d36	; 0x9d36 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    a736:	60 e0       	ldi	r22, 0x00	; 0
    a738:	c2 01       	movw	r24, r4
    a73a:	0e 94 40 48 	call	0x9080	; 0x9080 <get_menu_range>
    a73e:	29 83       	std	Y+1, r18	; 0x01
    a740:	3a 83       	std	Y+2, r19	; 0x02
    a742:	4b 83       	std	Y+3, r20	; 0x03
    a744:	5c 83       	std	Y+4, r21	; 0x04
    a746:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    a748:	80 91 e8 08 	lds	r24, 0x08E8
    a74c:	80 3e       	cpi	r24, 0xE0	; 224
    a74e:	b1 f5       	brne	.+108    	; 0xa7bc <menu_servo_setup+0x1b4>
		{
			text_link = pgm_read_word(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    a750:	80 91 48 05 	lds	r24, 0x0548
    a754:	90 91 49 05 	lds	r25, 0x0549
    a758:	9c 01       	movw	r18, r24
    a75a:	26 5e       	subi	r18, 0xE6	; 230
    a75c:	31 09       	sbc	r19, r1
    a75e:	f9 01       	movw	r30, r18
    a760:	e2 0d       	add	r30, r2
    a762:	f3 1d       	adc	r31, r3
    a764:	ee 0f       	add	r30, r30
    a766:	ff 1f       	adc	r31, r31
    a768:	e4 58       	subi	r30, 0x84	; 132
    a76a:	f6 4d       	sbci	r31, 0xD6	; 214
    a76c:	a5 90       	lpm	r10, Z+
    a76e:	b4 90       	lpm	r11, Z
    a770:	b3 01       	movw	r22, r6
    a772:	62 0f       	add	r22, r18
    a774:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    a776:	fe 81       	ldd	r31, Y+6	; 0x06
    a778:	ff 23       	and	r31, r31
    a77a:	11 f0       	breq	.+4      	; 0xa780 <menu_servo_setup+0x178>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    a77c:	fb 01       	movw	r30, r22
    a77e:	10 82       	st	Z, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    a780:	42 e2       	ldi	r20, 0x22	; 34
    a782:	42 9f       	mul	r20, r18
    a784:	f0 01       	movw	r30, r0
    a786:	43 9f       	mul	r20, r19
    a788:	f0 0d       	add	r31, r0
    a78a:	11 24       	eor	r1, r1
    a78c:	e8 53       	subi	r30, 0x38	; 56
    a78e:	f9 4f       	sbci	r31, 0xF9	; 249
    a790:	40 81       	ld	r20, Z
    a792:	41 11       	cpse	r20, r1
    a794:	05 c0       	rjmp	.+10     	; 0xa7a0 <menu_servo_setup+0x198>
    a796:	40 91 41 06 	lds	r20, 0x0641
    a79a:	41 11       	cpse	r20, r1
    a79c:	01 c0       	rjmp	.+2      	; 0xa7a0 <menu_servo_setup+0x198>
			{
				servo_enable = false;
    a79e:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    a7a0:	bb 24       	eor	r11, r11
    a7a2:	3f 93       	push	r19
    a7a4:	2f 93       	push	r18
    a7a6:	c1 2c       	mov	r12, r1
    a7a8:	e9 80       	ldd	r14, Y+1	; 0x01
    a7aa:	fa 80       	ldd	r15, Y+2	; 0x02
    a7ac:	0b 81       	ldd	r16, Y+3	; 0x03
    a7ae:	1c 81       	ldd	r17, Y+4	; 0x04
    a7b0:	2d 81       	ldd	r18, Y+5	; 0x05
    a7b2:	41 e0       	ldi	r20, 0x01	; 1
    a7b4:	0e 94 cc 48 	call	0x9198	; 0x9198 <do_menu_item>
    a7b8:	0f 90       	pop	r0
    a7ba:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    a7bc:	80 91 e8 08 	lds	r24, 0x08E8
    a7c0:	80 3e       	cpi	r24, 0xE0	; 224
    a7c2:	09 f0       	breq	.+2      	; 0xa7c6 <menu_servo_setup+0x1be>
    a7c4:	71 cf       	rjmp	.-286    	; 0xa6a8 <menu_servo_setup+0xa0>
		{
			UpdateLimits();				// Update actual servo trims
    a7c6:	0e 94 58 55 	call	0xaab0	; 0xaab0 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    a7ca:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    a7ce:	0e 94 be 51 	call	0xa37c	; 0xa37c <Wait_BUTTON4>
    a7d2:	6a cf       	rjmp	.-300    	; 0xa6a8 <menu_servo_setup+0xa0>
		}
	}
}
    a7d4:	2a 96       	adiw	r28, 0x0a	; 10
    a7d6:	0f b6       	in	r0, 0x3f	; 63
    a7d8:	f8 94       	cli
    a7da:	de bf       	out	0x3e, r29	; 62
    a7dc:	0f be       	out	0x3f, r0	; 63
    a7de:	cd bf       	out	0x3d, r28	; 61
    a7e0:	df 91       	pop	r29
    a7e2:	cf 91       	pop	r28
    a7e4:	1f 91       	pop	r17
    a7e6:	0f 91       	pop	r16
    a7e8:	ff 90       	pop	r15
    a7ea:	ef 90       	pop	r14
    a7ec:	df 90       	pop	r13
    a7ee:	cf 90       	pop	r12
    a7f0:	bf 90       	pop	r11
    a7f2:	af 90       	pop	r10
    a7f4:	9f 90       	pop	r9
    a7f6:	8f 90       	pop	r8
    a7f8:	7f 90       	pop	r7
    a7fa:	6f 90       	pop	r6
    a7fc:	5f 90       	pop	r5
    a7fe:	4f 90       	pop	r4
    a800:	3f 90       	pop	r3
    a802:	2f 90       	pop	r2
    a804:	08 95       	ret

0000a806 <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    a806:	2f 92       	push	r2
    a808:	3f 92       	push	r3
    a80a:	4f 92       	push	r4
    a80c:	5f 92       	push	r5
    a80e:	6f 92       	push	r6
    a810:	7f 92       	push	r7
    a812:	8f 92       	push	r8
    a814:	9f 92       	push	r9
    a816:	af 92       	push	r10
    a818:	bf 92       	push	r11
    a81a:	cf 92       	push	r12
    a81c:	df 92       	push	r13
    a81e:	ef 92       	push	r14
    a820:	ff 92       	push	r15
    a822:	0f 93       	push	r16
    a824:	1f 93       	push	r17
    a826:	cf 93       	push	r28
    a828:	df 93       	push	r29
    a82a:	cd b7       	in	r28, 0x3d	; 61
    a82c:	de b7       	in	r29, 0x3e	; 62
    a82e:	2b 97       	sbiw	r28, 0x0b	; 11
    a830:	0f b6       	in	r0, 0x3f	; 63
    a832:	f8 94       	cli
    a834:	de bf       	out	0x3e, r29	; 62
    a836:	0f be       	out	0x3f, r0	; 63
    a838:	cd bf       	out	0x3d, r28	; 61
    a83a:	98 2e       	mov	r9, r24
	uint8_t		i;
	uint16_t	offset = 0;			// Index into channel structure
	uint16_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    a83c:	80 91 08 05 	lds	r24, 0x0508
    a840:	88 23       	and	r24, r24
    a842:	41 f0       	breq	.+16     	; 0xa854 <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    a844:	85 e9       	ldi	r24, 0x95	; 149
    a846:	90 e0       	ldi	r25, 0x00	; 0
    a848:	90 93 4e 05 	sts	0x054E, r25
    a84c:	80 93 4d 05 	sts	0x054D, r24
		menu_flag = 0;
    a850:	10 92 08 05 	sts	0x0508, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    a854:	61 2c       	mov	r6, r1
    a856:	71 2c       	mov	r7, r1
    a858:	71 e4       	ldi	r23, 0x41	; 65
    a85a:	27 2e       	mov	r2, r23
    a85c:	76 e0       	ldi	r23, 0x06	; 6
    a85e:	37 2e       	mov	r3, r23

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, (const uint16_t*)RCMenuOffsets[section - 1], (const uint16_t*)RCMenuText[section - 1], cursor);
    a860:	89 2d       	mov	r24, r9
    a862:	90 e0       	ldi	r25, 0x00	; 0
    a864:	01 97       	sbiw	r24, 0x01	; 1
    a866:	27 e3       	ldi	r18, 0x37	; 55
    a868:	28 9f       	mul	r18, r24
    a86a:	20 01       	movw	r4, r0
    a86c:	29 9f       	mul	r18, r25
    a86e:	50 0c       	add	r5, r0
    a870:	11 24       	eor	r1, r1
    a872:	92 01       	movw	r18, r4
    a874:	2c 53       	subi	r18, 0x3C	; 60
    a876:	36 4d       	sbci	r19, 0xD6	; 214
    a878:	29 01       	movw	r4, r18
    a87a:	46 e1       	ldi	r20, 0x16	; 22
    a87c:	48 9f       	mul	r20, r24
    a87e:	90 01       	movw	r18, r0
    a880:	49 9f       	mul	r20, r25
    a882:	30 0d       	add	r19, r0
    a884:	11 24       	eor	r1, r1
    a886:	a9 01       	movw	r20, r18
    a888:	42 5a       	subi	r20, 0xA2	; 162
    a88a:	55 4d       	sbci	r21, 0xD5	; 213
    a88c:	5f 83       	std	Y+7, r21	; 0x07
    a88e:	4e 83       	std	Y+6, r20	; 0x06
    a890:	a9 01       	movw	r20, r18
    a892:	4e 5c       	subi	r20, 0xCE	; 206
    a894:	55 4d       	sbci	r21, 0xD5	; 213
    a896:	59 87       	std	Y+9, r21	; 0x09
    a898:	48 87       	std	Y+8, r20	; 0x08
			Config.Preset = QUADX;			
		}

		if (button == ENTER)
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    a89a:	2b e0       	ldi	r18, 0x0B	; 11
    a89c:	28 9f       	mul	r18, r24
    a89e:	a0 01       	movw	r20, r0
    a8a0:	29 9f       	mul	r18, r25
    a8a2:	50 0d       	add	r21, r0
    a8a4:	11 24       	eor	r1, r1
    a8a6:	5b 87       	std	Y+11, r21	; 0x0b
    a8a8:	4a 87       	std	Y+10, r20	; 0x0a
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    a8aa:	80 91 e8 08 	lds	r24, 0x08E8
    a8ae:	80 37       	cpi	r24, 0x70	; 112
    a8b0:	09 f4       	brne	.+2      	; 0xa8b4 <menu_rc_setup+0xae>
    a8b2:	e5 c0       	rjmp	.+458    	; 0xaa7e <menu_rc_setup+0x278>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General, 3 = Advanced
		switch(section)
    a8b4:	52 e0       	ldi	r21, 0x02	; 2
    a8b6:	95 12       	cpse	r9, r21
    a8b8:	07 c0       	rjmp	.+14     	; 0xa8c8 <menu_rc_setup+0xc2>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    a8ba:	5b e0       	ldi	r21, 0x0B	; 11
    a8bc:	65 2e       	mov	r6, r21
    a8be:	71 2c       	mov	r7, r1
				items = GENERALITEMS;
				value_ptr = &Config.Orientation_P2;
    a8c0:	63 ea       	ldi	r22, 0xA3	; 163
    a8c2:	26 2e       	mov	r2, r22
    a8c4:	66 e0       	ldi	r22, 0x06	; 6
    a8c6:	36 2e       	mov	r3, r22
			default:
				break;
		}

		// Always show preset text as "Options", regardless of actual setting
		Config.Preset = OPTIONS;
    a8c8:	84 e0       	ldi	r24, 0x04	; 4
    a8ca:	80 93 ad 06 	sts	0x06AD, r24

		// Print menu - note that print_menu_items() updates button variable.
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, (const uint16_t*)RCMenuOffsets[section - 1], (const uint16_t*)RCMenuText[section - 1], cursor);
    a8ce:	a0 90 04 05 	lds	r10, 0x0504
    a8d2:	b0 90 05 05 	lds	r11, 0x0505
    a8d6:	80 91 4d 05 	lds	r24, 0x054D
    a8da:	90 91 4e 05 	lds	r25, 0x054E
    a8de:	ce 80       	ldd	r12, Y+6	; 0x06
    a8e0:	df 80       	ldd	r13, Y+7	; 0x07
    a8e2:	e8 84       	ldd	r14, Y+8	; 0x08
    a8e4:	f9 84       	ldd	r15, Y+9	; 0x09
    a8e6:	00 e0       	ldi	r16, 0x00	; 0
    a8e8:	92 01       	movw	r18, r4
    a8ea:	a1 01       	movw	r20, r2
    a8ec:	b3 01       	movw	r22, r6
    a8ee:	6b 56       	subi	r22, 0x6B	; 107
    a8f0:	7f 4f       	sbci	r23, 0xFF	; 255
    a8f2:	86 0d       	add	r24, r6
    a8f4:	97 1d       	adc	r25, r7
    a8f6:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    a8fa:	38 e4       	ldi	r19, 0x48	; 72
    a8fc:	c3 2e       	mov	r12, r19
    a8fe:	35 e0       	ldi	r19, 0x05	; 5
    a900:	d3 2e       	mov	r13, r19
    a902:	4d e4       	ldi	r20, 0x4D	; 77
    a904:	e4 2e       	mov	r14, r20
    a906:	45 e0       	ldi	r20, 0x05	; 5
    a908:	f4 2e       	mov	r15, r20
    a90a:	04 e0       	ldi	r16, 0x04	; 4
    a90c:	15 e0       	ldi	r17, 0x05	; 5
    a90e:	20 91 e8 08 	lds	r18, 0x08E8
    a912:	a3 01       	movw	r20, r6
    a914:	65 e9       	ldi	r22, 0x95	; 149
    a916:	70 e0       	ldi	r23, 0x00	; 0
    a918:	8b e0       	ldi	r24, 0x0B	; 11
    a91a:	90 e0       	ldi	r25, 0x00	; 0
    a91c:	0e 94 9b 4e 	call	0x9d36	; 0x9d36 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    a920:	60 91 48 05 	lds	r22, 0x0548
    a924:	65 59       	subi	r22, 0x95	; 149
    a926:	66 19       	sub	r22, r6
    a928:	c2 01       	movw	r24, r4
    a92a:	0e 94 40 48 	call	0x9080	; 0x9080 <get_menu_range>
    a92e:	29 83       	std	Y+1, r18	; 0x01
    a930:	3a 83       	std	Y+2, r19	; 0x02
    a932:	4b 83       	std	Y+3, r20	; 0x03
    a934:	5c 83       	std	Y+4, r21	; 0x04
    a936:	6d 83       	std	Y+5, r22	; 0x05

		// If actually editing the preset, show the default setting
		if (menu_temp == PRESETITEM)
    a938:	80 91 48 05 	lds	r24, 0x0548
    a93c:	90 91 49 05 	lds	r25, 0x0549
    a940:	8a 3a       	cpi	r24, 0xAA	; 170
    a942:	91 05       	cpc	r25, r1
    a944:	11 f4       	brne	.+4      	; 0xa94a <menu_rc_setup+0x144>
		{
			Config.Preset = QUADX;			
    a946:	10 92 ad 06 	sts	0x06AD, r1
		}

		if (button == ENTER)
    a94a:	20 91 e8 08 	lds	r18, 0x08E8
    a94e:	20 3e       	cpi	r18, 0xE0	; 224
    a950:	f9 f4       	brne	.+62     	; 0xa990 <menu_rc_setup+0x18a>
		{
			text_link = pgm_read_word(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    a952:	bc 01       	movw	r22, r24
    a954:	65 59       	subi	r22, 0x95	; 149
    a956:	71 09       	sbc	r23, r1
    a958:	66 19       	sub	r22, r6
    a95a:	77 09       	sbc	r23, r7
    a95c:	ea 85       	ldd	r30, Y+10	; 0x0a
    a95e:	fb 85       	ldd	r31, Y+11	; 0x0b
    a960:	e6 0f       	add	r30, r22
    a962:	f7 1f       	adc	r31, r23
    a964:	ee 0f       	add	r30, r30
    a966:	ff 1f       	adc	r31, r31
    a968:	e2 5a       	subi	r30, 0xA2	; 162
    a96a:	f5 4d       	sbci	r31, 0xD5	; 213
    a96c:	a5 90       	lpm	r10, Z+
    a96e:	b4 90       	lpm	r11, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    a970:	62 0d       	add	r22, r2
    a972:	73 1d       	adc	r23, r3
    a974:	1f 92       	push	r1
    a976:	1f 92       	push	r1
    a978:	81 2c       	mov	r8, r1
    a97a:	c1 2c       	mov	r12, r1
    a97c:	e9 80       	ldd	r14, Y+1	; 0x01
    a97e:	fa 80       	ldd	r15, Y+2	; 0x02
    a980:	0b 81       	ldd	r16, Y+3	; 0x03
    a982:	1c 81       	ldd	r17, Y+4	; 0x04
    a984:	2d 81       	ldd	r18, Y+5	; 0x05
    a986:	41 e0       	ldi	r20, 0x01	; 1
    a988:	0e 94 cc 48 	call	0x9198	; 0x9198 <do_menu_item>
    a98c:	0f 90       	pop	r0
    a98e:	0f 90       	pop	r0
		}

		// Handle abort neatly
		if (button == ABORT)
    a990:	80 91 e8 08 	lds	r24, 0x08E8
    a994:	80 3a       	cpi	r24, 0xA0	; 160
    a996:	41 f4       	brne	.+16     	; 0xa9a8 <menu_rc_setup+0x1a2>
		{
			Wait_BUTTON1();			 // Wait for user's finger off the button
    a998:	0e 94 28 51 	call	0xa250	; 0xa250 <Wait_BUTTON1>
			button = NONE;
    a99c:	80 ef       	ldi	r24, 0xF0	; 240
    a99e:	80 93 e8 08 	sts	0x08E8, r24
			
			// Reset the mixer preset if unchanged
			Config.Preset = OPTIONS;
    a9a2:	84 e0       	ldi	r24, 0x04	; 4
    a9a4:	80 93 ad 06 	sts	0x06AD, r24
		}

		if (button == ENTER)
    a9a8:	80 91 e8 08 	lds	r24, 0x08E8
    a9ac:	80 3e       	cpi	r24, 0xE0	; 224
    a9ae:	09 f0       	breq	.+2      	; 0xa9b2 <menu_rc_setup+0x1ac>
    a9b0:	7c cf       	rjmp	.-264    	; 0xa8aa <menu_rc_setup+0xa4>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    a9b2:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <init_int>
			init_uart();			// and UART
    a9b6:	0e 94 6f 69 	call	0xd2de	; 0xd2de <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    a9ba:	0e 94 58 55 	call	0xaab0	; 0xaab0 <UpdateLimits>
			
			// See if mixer preset has changed. Load new preset only if so
			if ((Config.Preset != OPTIONS) && (menu_temp == PRESETITEM))
    a9be:	80 91 ad 06 	lds	r24, 0x06AD
    a9c2:	84 30       	cpi	r24, 0x04	; 4
    a9c4:	49 f0       	breq	.+18     	; 0xa9d8 <menu_rc_setup+0x1d2>
    a9c6:	20 91 48 05 	lds	r18, 0x0548
    a9ca:	30 91 49 05 	lds	r19, 0x0549
    a9ce:	2a 3a       	cpi	r18, 0xAA	; 170
    a9d0:	31 05       	cpc	r19, r1
    a9d2:	11 f4       	brne	.+4      	; 0xa9d8 <menu_rc_setup+0x1d2>
			{
				Load_eeprom_preset(Config.Preset);
    a9d4:	0e 94 22 2a 	call	0x5444	; 0x5444 <Load_eeprom_preset>
			}

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    a9d8:	46 e0       	ldi	r20, 0x06	; 6
    a9da:	80 91 a9 06 	lds	r24, 0x06A9
    a9de:	48 1b       	sub	r20, r24
    a9e0:	6a e1       	ldi	r22, 0x1A	; 26
    a9e2:	80 ed       	ldi	r24, 0xD0	; 208
    a9e4:	0e 94 a1 3a 	call	0x7542	; 0x7542 <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    a9e8:	20 91 44 06 	lds	r18, 0x0644
    a9ec:	a9 e1       	ldi	r26, 0x19	; 25
    a9ee:	b6 e0       	ldi	r27, 0x06	; 6
    a9f0:	80 e0       	ldi	r24, 0x00	; 0
    a9f2:	90 e0       	ldi	r25, 0x00	; 0
    a9f4:	21 30       	cpi	r18, 0x01	; 1
    a9f6:	21 f4       	brne	.+8      	; 0xaa00 <menu_rc_setup+0x1fa>
    a9f8:	fc 01       	movw	r30, r24
    a9fa:	ec 52       	subi	r30, 0x2C	; 44
    a9fc:	fe 4f       	sbci	r31, 0xFE	; 254
    a9fe:	05 c0       	rjmp	.+10     	; 0xaa0a <menu_rc_setup+0x204>
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else if (Config.TxSeq == JRSEQ)
    aa00:	21 11       	cpse	r18, r1
    aa02:	06 c0       	rjmp	.+12     	; 0xaa10 <menu_rc_setup+0x20a>
    aa04:	fc 01       	movw	r30, r24
    aa06:	e4 52       	subi	r30, 0x24	; 36
    aa08:	fe 4f       	sbci	r31, 0xFE	; 254
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    aa0a:	e4 91       	lpm	r30, Z
    aa0c:	ec 93       	st	X, r30
    aa0e:	0b c0       	rjmp	.+22     	; 0xaa26 <menu_rc_setup+0x220>
				}
				else if (Config.TxSeq == MPXSEQ)
    aa10:	22 30       	cpi	r18, 0x02	; 2
    aa12:	21 f4       	brne	.+8      	; 0xaa1c <menu_rc_setup+0x216>
    aa14:	fc 01       	movw	r30, r24
    aa16:	e4 53       	subi	r30, 0x34	; 52
    aa18:	fe 4f       	sbci	r31, 0xFE	; 254
    aa1a:	f7 cf       	rjmp	.-18     	; 0xaa0a <menu_rc_setup+0x204>
    aa1c:	fd 01       	movw	r30, r26
    aa1e:	eb 5b       	subi	r30, 0xBB	; 187
    aa20:	fd 4f       	sbci	r31, 0xFD	; 253
					Config.ChannelOrder[i] = pgm_read_byte(&MPX[i]);
				}
				// Load from custom channel order
				else
				{
					Config.ChannelOrder[i] = Config.CustomChannelOrder[i];
    aa22:	30 81       	ld	r19, Z
    aa24:	3c 93       	st	X, r19
    aa26:	01 96       	adiw	r24, 0x01	; 1
    aa28:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    aa2a:	88 30       	cpi	r24, 0x08	; 8
    aa2c:	91 05       	cpc	r25, r1
    aa2e:	11 f7       	brne	.-60     	; 0xa9f4 <menu_rc_setup+0x1ee>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    aa30:	80 91 41 06 	lds	r24, 0x0641
    aa34:	82 30       	cpi	r24, 0x02	; 2
    aa36:	3c f4       	brge	.+14     	; 0xaa46 <menu_rc_setup+0x240>
    aa38:	80 91 42 06 	lds	r24, 0x0642
    aa3c:	82 30       	cpi	r24, 0x02	; 2
    aa3e:	19 f4       	brne	.+6      	; 0xaa46 <menu_rc_setup+0x240>
			{
				Config.Servo_rate = SYNC;
    aa40:	81 e0       	ldi	r24, 0x01	; 1
    aa42:	80 93 42 06 	sts	0x0642, r24
			}
						
			if (Config.ArmMode == ARMABLE)
    aa46:	80 91 a6 06 	lds	r24, 0x06A6
    aa4a:	81 30       	cpi	r24, 0x01	; 1
    aa4c:	31 f4       	brne	.+12     	; 0xaa5a <menu_rc_setup+0x254>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    aa4e:	80 91 34 05 	lds	r24, 0x0534
    aa52:	84 60       	ori	r24, 0x04	; 4
    aa54:	80 93 34 05 	sts	0x0534, r24
				LED1 = 0;
    aa58:	2b 98       	cbi	0x05, 3	; 5
			}

			// Work out the P1 orientation from the user's P2 orientation setting
			Config.Orientation_P1 = (int8_t)pgm_read_byte(&P1_Orientation_LUT[Config.Orientation_P2]);
    aa5a:	e0 91 a3 06 	lds	r30, 0x06A3
    aa5e:	ff 27       	eor	r31, r31
    aa60:	e7 fd       	sbrc	r30, 7
    aa62:	f0 95       	com	r31
    aa64:	e4 55       	subi	r30, 0x54	; 84
    aa66:	f6 4d       	sbci	r31, 0xD6	; 214
    aa68:	e4 91       	lpm	r30, Z
    aa6a:	e0 93 2d 08 	sts	0x082D, r30

			// Return the preset to "Options" when going back to the General menu
			Config.Preset = OPTIONS;
    aa6e:	84 e0       	ldi	r24, 0x04	; 4
    aa70:	80 93 ad 06 	sts	0x06AD, r24

			Save_Config_to_EEPROM(); // Save value and return
    aa74:	0e 94 18 26 	call	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    aa78:	0e 94 be 51 	call	0xa37c	; 0xa37c <Wait_BUTTON4>
    aa7c:	16 cf       	rjmp	.-468    	; 0xa8aa <menu_rc_setup+0xa4>
		}
	}
}
    aa7e:	2b 96       	adiw	r28, 0x0b	; 11
    aa80:	0f b6       	in	r0, 0x3f	; 63
    aa82:	f8 94       	cli
    aa84:	de bf       	out	0x3e, r29	; 62
    aa86:	0f be       	out	0x3f, r0	; 63
    aa88:	cd bf       	out	0x3d, r28	; 61
    aa8a:	df 91       	pop	r29
    aa8c:	cf 91       	pop	r28
    aa8e:	1f 91       	pop	r17
    aa90:	0f 91       	pop	r16
    aa92:	ff 90       	pop	r15
    aa94:	ef 90       	pop	r14
    aa96:	df 90       	pop	r13
    aa98:	cf 90       	pop	r12
    aa9a:	bf 90       	pop	r11
    aa9c:	af 90       	pop	r10
    aa9e:	9f 90       	pop	r9
    aaa0:	8f 90       	pop	r8
    aaa2:	7f 90       	pop	r7
    aaa4:	6f 90       	pop	r6
    aaa6:	5f 90       	pop	r5
    aaa8:	4f 90       	pop	r4
    aaaa:	3f 90       	pop	r3
    aaac:	2f 90       	pop	r2
    aaae:	08 95       	ret

0000aab0 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    aab0:	6f 92       	push	r6
    aab2:	7f 92       	push	r7
    aab4:	8f 92       	push	r8
    aab6:	9f 92       	push	r9
    aab8:	af 92       	push	r10
    aaba:	bf 92       	push	r11
    aabc:	cf 92       	push	r12
    aabe:	df 92       	push	r13
    aac0:	ef 92       	push	r14
    aac2:	ff 92       	push	r15
    aac4:	0f 93       	push	r16
    aac6:	1f 93       	push	r17
    aac8:	cf 93       	push	r28
    aaca:	df 93       	push	r29
    aacc:	cd b7       	in	r28, 0x3d	; 61
    aace:	de b7       	in	r29, 0x3e	; 62
    aad0:	2c 97       	sbiw	r28, 0x0c	; 12
    aad2:	0f b6       	in	r0, 0x3f	; 63
    aad4:	f8 94       	cli
    aad6:	de bf       	out	0x3e, r29	; 62
    aad8:	0f be       	out	0x3f, r0	; 63
    aada:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    aadc:	80 91 4f 06 	lds	r24, 0x064F
    aae0:	8f 83       	std	Y+7, r24	; 0x07
    aae2:	80 91 55 06 	lds	r24, 0x0655
    aae6:	88 87       	std	Y+8, r24	; 0x08
    aae8:	80 91 5b 06 	lds	r24, 0x065B
    aaec:	89 87       	std	Y+9, r24	; 0x09
    aaee:	80 91 61 06 	lds	r24, 0x0661
    aaf2:	8a 87       	std	Y+10, r24	; 0x0a
    aaf4:	80 91 67 06 	lds	r24, 0x0667
    aaf8:	8b 87       	std	Y+11, r24	; 0x0b
    aafa:	80 91 6d 06 	lds	r24, 0x066D
    aafe:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    ab00:	80 91 4e 06 	lds	r24, 0x064E
    ab04:	89 83       	std	Y+1, r24	; 0x01
    ab06:	80 91 54 06 	lds	r24, 0x0654
    ab0a:	8a 83       	std	Y+2, r24	; 0x02
    ab0c:	80 91 5a 06 	lds	r24, 0x065A
    ab10:	8b 83       	std	Y+3, r24	; 0x03
    ab12:	80 91 60 06 	lds	r24, 0x0660
    ab16:	8c 83       	std	Y+4, r24	; 0x04
    ab18:	80 91 66 06 	lds	r24, 0x0666
    ab1c:	8d 83       	std	Y+5, r24	; 0x05
    ab1e:	80 91 6c 06 	lds	r24, 0x066C
    ab22:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    ab24:	80 91 a8 06 	lds	r24, 0x06A8
    ab28:	99 27       	eor	r25, r25
    ab2a:	87 fd       	sbrc	r24, 7
    ab2c:	90 95       	com	r25
    ab2e:	a9 2f       	mov	r26, r25
    ab30:	b9 2f       	mov	r27, r25
    ab32:	89 30       	cpi	r24, 0x09	; 9
    ab34:	91 05       	cpc	r25, r1
    ab36:	08 f5       	brcc	.+66     	; 0xab7a <UpdateLimits+0xca>
    ab38:	fc 01       	movw	r30, r24
    ab3a:	eb 56       	subi	r30, 0x6B	; 107
    ab3c:	ff 4f       	sbci	r31, 0xFF	; 255
    ab3e:	0c 94 6d 6c 	jmp	0xd8da	; 0xd8da <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    ab42:	80 e4       	ldi	r24, 0x40	; 64
    ab44:	91 e0       	ldi	r25, 0x01	; 1
    ab46:	14 c0       	rjmp	.+40     	; 0xab70 <UpdateLimits+0xc0>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    ab48:	8a e4       	ldi	r24, 0x4A	; 74
    ab4a:	91 e0       	ldi	r25, 0x01	; 1
    ab4c:	11 c0       	rjmp	.+34     	; 0xab70 <UpdateLimits+0xc0>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    ab4e:	84 e5       	ldi	r24, 0x54	; 84
    ab50:	91 e0       	ldi	r25, 0x01	; 1
    ab52:	0e c0       	rjmp	.+28     	; 0xab70 <UpdateLimits+0xc0>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    ab54:	8e e5       	ldi	r24, 0x5E	; 94
    ab56:	91 e0       	ldi	r25, 0x01	; 1
    ab58:	0b c0       	rjmp	.+22     	; 0xab70 <UpdateLimits+0xc0>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    ab5a:	88 e6       	ldi	r24, 0x68	; 104
    ab5c:	91 e0       	ldi	r25, 0x01	; 1
    ab5e:	08 c0       	rjmp	.+16     	; 0xab70 <UpdateLimits+0xc0>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    ab60:	82 e7       	ldi	r24, 0x72	; 114
    ab62:	91 e0       	ldi	r25, 0x01	; 1
    ab64:	05 c0       	rjmp	.+10     	; 0xab70 <UpdateLimits+0xc0>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    ab66:	8c e7       	ldi	r24, 0x7C	; 124
    ab68:	91 e0       	ldi	r25, 0x01	; 1
    ab6a:	02 c0       	rjmp	.+4      	; 0xab70 <UpdateLimits+0xc0>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    ab6c:	86 e8       	ldi	r24, 0x86	; 134
    ab6e:	91 e0       	ldi	r25, 0x01	; 1
    ab70:	90 93 a2 06 	sts	0x06A2, r25
    ab74:	80 93 a1 06 	sts	0x06A1, r24
			break;
    ab78:	04 c0       	rjmp	.+8      	; 0xab82 <UpdateLimits+0xd2>
		default:
			Config.PowerTriggerActual = 0;			// Off
    ab7a:	10 92 a2 06 	sts	0x06A2, r1
    ab7e:	10 92 a1 06 	sts	0x06A1, r1
			break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    ab82:	20 91 45 05 	lds	r18, 0x0545
    ab86:	30 91 46 05 	lds	r19, 0x0546
    ab8a:	80 91 a1 06 	lds	r24, 0x06A1
    ab8e:	90 91 a2 06 	lds	r25, 0x06A2
    ab92:	26 36       	cpi	r18, 0x66	; 102
    ab94:	48 e0       	ldi	r20, 0x08	; 8
    ab96:	34 07       	cpc	r19, r20
    ab98:	88 f0       	brcs	.+34     	; 0xabbc <UpdateLimits+0x10c>
	{
		Config.PowerTriggerActual *= 6;
    ab9a:	46 e0       	ldi	r20, 0x06	; 6
    ab9c:	48 9f       	mul	r20, r24
    ab9e:	90 01       	movw	r18, r0
    aba0:	49 9f       	mul	r20, r25
    aba2:	30 0d       	add	r19, r0
    aba4:	11 24       	eor	r1, r1
    aba6:	30 93 a2 06 	sts	0x06A2, r19
    abaa:	20 93 a1 06 	sts	0x06A1, r18
    abae:	71 e7       	ldi	r23, 0x71	; 113
    abb0:	a7 2e       	mov	r10, r23
    abb2:	76 e0       	ldi	r23, 0x06	; 6
    abb4:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    abb6:	00 e0       	ldi	r16, 0x00	; 0
    abb8:	10 e0       	ldi	r17, 0x00	; 0
    abba:	25 c0       	rjmp	.+74     	; 0xac06 <UpdateLimits+0x156>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    abbc:	a9 01       	movw	r20, r18
    abbe:	42 5c       	subi	r20, 0xC2	; 194
    abc0:	56 40       	sbci	r21, 0x06	; 6
    abc2:	44 3a       	cpi	r20, 0xA4	; 164
    abc4:	51 40       	sbci	r21, 0x01	; 1
    abc6:	10 f4       	brcc	.+4      	; 0xabcc <UpdateLimits+0x11c>
	{
		Config.PowerTriggerActual *= 5;
    abc8:	45 e0       	ldi	r20, 0x05	; 5
    abca:	e8 cf       	rjmp	.-48     	; 0xab9c <UpdateLimits+0xec>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    abcc:	a9 01       	movw	r20, r18
    abce:	44 51       	subi	r20, 0x14	; 20
    abd0:	55 40       	sbci	r21, 0x05	; 5
    abd2:	4e 3a       	cpi	r20, 0xAE	; 174
    abd4:	51 40       	sbci	r21, 0x01	; 1
    abd6:	28 f4       	brcc	.+10     	; 0xabe2 <UpdateLimits+0x132>
	{
		Config.PowerTriggerActual *= 4;
    abd8:	88 0f       	add	r24, r24
    abda:	99 1f       	adc	r25, r25
    abdc:	88 0f       	add	r24, r24
    abde:	99 1f       	adc	r25, r25
    abe0:	0d c0       	rjmp	.+26     	; 0xabfc <UpdateLimits+0x14c>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    abe2:	24 58       	subi	r18, 0x84	; 132
    abe4:	33 40       	sbci	r19, 0x03	; 3
    abe6:	20 39       	cpi	r18, 0x90	; 144
    abe8:	31 40       	sbci	r19, 0x01	; 1
    abea:	30 f4       	brcc	.+12     	; 0xabf8 <UpdateLimits+0x148>
	{
		Config.PowerTriggerActual *= 3;
    abec:	9c 01       	movw	r18, r24
    abee:	22 0f       	add	r18, r18
    abf0:	33 1f       	adc	r19, r19
    abf2:	28 0f       	add	r18, r24
    abf4:	39 1f       	adc	r19, r25
    abf6:	d7 cf       	rjmp	.-82     	; 0xaba6 <UpdateLimits+0xf6>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    abf8:	88 0f       	add	r24, r24
    abfa:	99 1f       	adc	r25, r25
    abfc:	90 93 a2 06 	sts	0x06A2, r25
    ac00:	80 93 a1 06 	sts	0x06A1, r24
    ac04:	d4 cf       	rjmp	.-88     	; 0xabae <UpdateLimits+0xfe>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    ac06:	65 01       	movw	r12, r10
    ac08:	e1 2c       	mov	r14, r1
    ac0a:	f1 2c       	mov	r15, r1
    ac0c:	87 e0       	ldi	r24, 0x07	; 7
    ac0e:	88 2e       	mov	r8, r24
    ac10:	91 2c       	mov	r9, r1
    ac12:	8c 0e       	add	r8, r28
    ac14:	9d 1e       	adc	r9, r29
    ac16:	80 0e       	add	r8, r16
    ac18:	91 1e       	adc	r9, r17
    ac1a:	66 24       	eor	r6, r6
    ac1c:	63 94       	inc	r6
    ac1e:	71 2c       	mov	r7, r1
    ac20:	6c 0e       	add	r6, r28
    ac22:	7d 1e       	adc	r7, r29
    ac24:	60 0e       	add	r6, r16
    ac26:	71 1e       	adc	r7, r17
    ac28:	f4 01       	movw	r30, r8
    ac2a:	ee 0d       	add	r30, r14
    ac2c:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    ac2e:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    ac30:	bb 27       	eor	r27, r27
    ac32:	a7 fd       	sbrc	r26, 7
    ac34:	b0 95       	com	r27
    ac36:	20 e8       	ldi	r18, 0x80	; 128
    ac38:	32 e0       	ldi	r19, 0x02	; 2
    ac3a:	0e 94 8a 6c 	call	0xd914	; 0xd914 <__usmulhisi3>
    ac3e:	f6 01       	movw	r30, r12
    ac40:	61 93       	st	Z+, r22
    ac42:	71 93       	st	Z+, r23
    ac44:	81 93       	st	Z+, r24
    ac46:	91 93       	st	Z+, r25
    ac48:	6f 01       	movw	r12, r30
    ac4a:	f3 01       	movw	r30, r6
    ac4c:	ee 0d       	add	r30, r14
    ac4e:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    ac50:	20 81       	ld	r18, Z
    ac52:	22 23       	and	r18, r18
    ac54:	b1 f0       	breq	.+44     	; 0xac82 <UpdateLimits+0x1d2>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    ac56:	35 e0       	ldi	r19, 0x05	; 5
    ac58:	66 0f       	add	r22, r22
    ac5a:	77 1f       	adc	r23, r23
    ac5c:	88 1f       	adc	r24, r24
    ac5e:	99 1f       	adc	r25, r25
    ac60:	3a 95       	dec	r19
    ac62:	d1 f7       	brne	.-12     	; 0xac58 <UpdateLimits+0x1a8>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    ac64:	33 27       	eor	r19, r19
    ac66:	27 fd       	sbrc	r18, 7
    ac68:	30 95       	com	r19
    ac6a:	43 2f       	mov	r20, r19
    ac6c:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    ac6e:	0e 94 4e 6c 	call	0xd89c	; 0xd89c <__divmodsi4>
    ac72:	d6 01       	movw	r26, r12
    ac74:	54 96       	adiw	r26, 0x14	; 20
    ac76:	2d 93       	st	X+, r18
    ac78:	3d 93       	st	X+, r19
    ac7a:	4d 93       	st	X+, r20
    ac7c:	5c 93       	st	X, r21
    ac7e:	57 97       	sbiw	r26, 0x17	; 23
    ac80:	05 c0       	rjmp	.+10     	; 0xac8c <UpdateLimits+0x1dc>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    ac82:	f6 01       	movw	r30, r12
    ac84:	14 8a       	std	Z+20, r1	; 0x14
    ac86:	15 8a       	std	Z+21, r1	; 0x15
    ac88:	16 8a       	std	Z+22, r1	; 0x16
    ac8a:	17 8a       	std	Z+23, r1	; 0x17
    ac8c:	ff ef       	ldi	r31, 0xFF	; 255
    ac8e:	ef 1a       	sub	r14, r31
    ac90:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    ac92:	23 e0       	ldi	r18, 0x03	; 3
    ac94:	e2 16       	cp	r14, r18
    ac96:	f1 04       	cpc	r15, r1
    ac98:	39 f6       	brne	.-114    	; 0xac28 <UpdateLimits+0x178>
    ac9a:	4c e0       	ldi	r20, 0x0C	; 12
    ac9c:	a4 0e       	add	r10, r20
    ac9e:	b1 1c       	adc	r11, r1
    aca0:	0d 5f       	subi	r16, 0xFD	; 253
    aca2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    aca4:	06 30       	cpi	r16, 0x06	; 6
    aca6:	11 05       	cpc	r17, r1
    aca8:	09 f0       	breq	.+2      	; 0xacac <UpdateLimits+0x1fc>
    acaa:	ad cf       	rjmp	.-166    	; 0xac06 <UpdateLimits+0x156>
    acac:	86 ec       	ldi	r24, 0xC6	; 198
    acae:	97 e0       	ldi	r25, 0x07	; 7
    acb0:	e1 e2       	ldi	r30, 0x21	; 33
    acb2:	f6 e0       	ldi	r31, 0x06	; 6
    acb4:	6e ec       	ldi	r22, 0xCE	; 206
    acb6:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_micros(Config.min_travel[i]);
    acb8:	dc 01       	movw	r26, r24
    acba:	2d 91       	ld	r18, X+
    acbc:	cd 01       	movw	r24, r26
int16_t scale_micros(int8_t value)
{
	int16_t temp16;

	// 100% = 1000 to 2000
	temp16 = (int16_t)((value * 5) + SERVO_CENTER); // SERVO_CENTER = 1500
    acbe:	b5 e0       	ldi	r27, 0x05	; 5
    acc0:	2b 02       	muls	r18, r27
    acc2:	90 01       	movw	r18, r0
    acc4:	11 24       	eor	r1, r1
    acc6:	24 52       	subi	r18, 0x24	; 36
    acc8:	3a 4f       	sbci	r19, 0xFA	; 250
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_micros(Config.min_travel[i]);
    acca:	31 83       	std	Z+1, r19	; 0x01
    accc:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_micros(Config.max_travel[i]);
    acce:	db 01       	movw	r26, r22
    acd0:	2d 91       	ld	r18, X+
    acd2:	bd 01       	movw	r22, r26
int16_t scale_micros(int8_t value)
{
	int16_t temp16;

	// 100% = 1000 to 2000
	temp16 = (int16_t)((value * 5) + SERVO_CENTER); // SERVO_CENTER = 1500
    acd4:	b5 e0       	ldi	r27, 0x05	; 5
    acd6:	2b 02       	muls	r18, r27
    acd8:	90 01       	movw	r18, r0
    acda:	11 24       	eor	r1, r1
    acdc:	24 52       	subi	r18, 0x24	; 36
    acde:	3a 4f       	sbci	r19, 0xFA	; 250

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_micros(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_micros(Config.max_travel[i]);
    ace0:	33 83       	std	Z+3, r19	; 0x03
    ace2:	22 83       	std	Z+2, r18	; 0x02
    ace4:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    ace6:	26 e0       	ldi	r18, 0x06	; 6
    ace8:	e1 34       	cpi	r30, 0x41	; 65
    acea:	f2 07       	cpc	r31, r18
    acec:	29 f7       	brne	.-54     	; 0xacb8 <UpdateLimits+0x208>
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 100 = 12700 which in 1/100ths of a degree equates to potentially 127 degrees
	// In reality though, with a more realistic P gain of 10, this equates to potentially 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 100;
    acee:	80 91 52 06 	lds	r24, 0x0652
    acf2:	44 e6       	ldi	r20, 0x64	; 100
    acf4:	84 02       	muls	r24, r20
    acf6:	c0 01       	movw	r24, r0
    acf8:	11 24       	eor	r1, r1
    acfa:	90 93 fc 07 	sts	0x07FC, r25
    acfe:	80 93 fb 07 	sts	0x07FB, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 100;
    ad02:	80 91 58 06 	lds	r24, 0x0658
    ad06:	64 e6       	ldi	r22, 0x64	; 100
    ad08:	86 02       	muls	r24, r22
    ad0a:	c0 01       	movw	r24, r0
    ad0c:	11 24       	eor	r1, r1
    ad0e:	90 93 00 08 	sts	0x0800, r25
    ad12:	80 93 ff 07 	sts	0x07FF, r24
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 100 = 12700 which in 1/100ths of a degree equates to potentially 127 degrees
	// In reality though, with a more realistic P gain of 10, this equates to potentially 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 100;
    ad16:	80 91 64 06 	lds	r24, 0x0664
    ad1a:	a4 e6       	ldi	r26, 0x64	; 100
    ad1c:	8a 02       	muls	r24, r26
    ad1e:	c0 01       	movw	r24, r0
    ad20:	11 24       	eor	r1, r1
    ad22:	90 93 fe 07 	sts	0x07FE, r25
    ad26:	80 93 fd 07 	sts	0x07FD, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 100;
    ad2a:	80 91 6a 06 	lds	r24, 0x066A
    ad2e:	b4 e6       	ldi	r27, 0x64	; 100
    ad30:	8b 02       	muls	r24, r27
    ad32:	c0 01       	movw	r24, r0
    ad34:	11 24       	eor	r1, r1
    ad36:	90 93 02 08 	sts	0x0802, r25
    ad3a:	80 93 01 08 	sts	0x0801, r24
	}
}
    ad3e:	2c 96       	adiw	r28, 0x0c	; 12
    ad40:	0f b6       	in	r0, 0x3f	; 63
    ad42:	f8 94       	cli
    ad44:	de bf       	out	0x3e, r29	; 62
    ad46:	0f be       	out	0x3f, r0	; 63
    ad48:	cd bf       	out	0x3d, r28	; 61
    ad4a:	df 91       	pop	r29
    ad4c:	cf 91       	pop	r28
    ad4e:	1f 91       	pop	r17
    ad50:	0f 91       	pop	r16
    ad52:	ff 90       	pop	r15
    ad54:	ef 90       	pop	r14
    ad56:	df 90       	pop	r13
    ad58:	cf 90       	pop	r12
    ad5a:	bf 90       	pop	r11
    ad5c:	af 90       	pop	r10
    ad5e:	9f 90       	pop	r9
    ad60:	8f 90       	pop	r8
    ad62:	7f 90       	pop	r7
    ad64:	6f 90       	pop	r6
    ad66:	08 95       	ret

0000ad68 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    ad68:	cf 93       	push	r28
    ad6a:	df 93       	push	r29
    ad6c:	ee ea       	ldi	r30, 0xAE	; 174
    ad6e:	f6 e0       	ldi	r31, 0x06	; 6
    ad70:	ce eb       	ldi	r28, 0xBE	; 190
    ad72:	d7 e0       	ldi	r29, 0x07	; 7
    ad74:	80 e0       	ldi	r24, 0x00	; 0
    ad76:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    ad78:	20 81       	ld	r18, Z
    ad7a:	31 81       	ldd	r19, Z+1	; 0x01

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    ad7c:	49 91       	ld	r20, Y+
    ad7e:	41 30       	cpi	r20, 0x01	; 1
    ad80:	19 f4       	brne	.+6      	; 0xad88 <UpdateServos+0x20>
		{	
			temp1 = -temp1;
    ad82:	31 95       	neg	r19
    ad84:	21 95       	neg	r18
    ad86:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    ad88:	2a 55       	subi	r18, 0x5A	; 90
    ad8a:	31 4f       	sbci	r19, 0xF1	; 241

		// Transfer value to servo
		ServoOut[i] = temp1;
    ad8c:	dc 01       	movw	r26, r24
    ad8e:	aa 0f       	add	r26, r26
    ad90:	bb 1f       	adc	r27, r27
    ad92:	aa 5a       	subi	r26, 0xAA	; 170
    ad94:	b6 4f       	sbci	r27, 0xF6	; 246
    ad96:	11 96       	adiw	r26, 0x01	; 1
    ad98:	3c 93       	st	X, r19
    ad9a:	2e 93       	st	-X, r18
    ad9c:	01 96       	adiw	r24, 0x01	; 1
    ad9e:	b2 96       	adiw	r30, 0x22	; 34
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    ada0:	88 30       	cpi	r24, 0x08	; 8
    ada2:	91 05       	cpc	r25, r1
    ada4:	49 f7       	brne	.-46     	; 0xad78 <UpdateServos+0x10>
		temp1 += 3750;

		// Transfer value to servo
		ServoOut[i] = temp1;
	}
}
    ada6:	df 91       	pop	r29
    ada8:	cf 91       	pop	r28
    adaa:	08 95       	ret

0000adac <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    adac:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    adae:	64 36       	cpi	r22, 0x64	; 100
    adb0:	71 05       	cpc	r23, r1
    adb2:	e9 f0       	breq	.+58     	; 0xadee <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    adb4:	6c 39       	cpi	r22, 0x9C	; 156
    adb6:	8f ef       	ldi	r24, 0xFF	; 255
    adb8:	78 07       	cpc	r23, r24
    adba:	29 f4       	brne	.+10     	; 0xadc6 <scale32+0x1a>
	{
		return -value16;	
    adbc:	88 27       	eor	r24, r24
    adbe:	99 27       	eor	r25, r25
    adc0:	82 1b       	sub	r24, r18
    adc2:	93 0b       	sbc	r25, r19
    adc4:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    adc6:	61 15       	cp	r22, r1
    adc8:	71 05       	cpc	r23, r1
    adca:	71 f0       	breq	.+28     	; 0xade8 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    adcc:	db 01       	movw	r26, r22
    adce:	0e 94 73 6c 	call	0xd8e6	; 0xd8e6 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    add2:	6e 5c       	subi	r22, 0xCE	; 206
    add4:	7f 4f       	sbci	r23, 0xFF	; 255
    add6:	8f 4f       	sbci	r24, 0xFF	; 255
    add8:	9f 4f       	sbci	r25, 0xFF	; 255
    adda:	24 e6       	ldi	r18, 0x64	; 100
    addc:	30 e0       	ldi	r19, 0x00	; 0
    adde:	40 e0       	ldi	r20, 0x00	; 0
    ade0:	50 e0       	ldi	r21, 0x00	; 0
    ade2:	0e 94 4e 6c 	call	0xd89c	; 0xd89c <__divmodsi4>
    ade6:	03 c0       	rjmp	.+6      	; 0xadee <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    ade8:	80 e0       	ldi	r24, 0x00	; 0
    adea:	90 e0       	ldi	r25, 0x00	; 0
    adec:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    adee:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    adf0:	08 95       	ret

0000adf2 <scale_percent>:
{
	int16_t temp16;
	float tempf;

	// 100% = 2500 to 5000
	tempf = (float)value; // Promote
    adf2:	68 2f       	mov	r22, r24
    adf4:	77 27       	eor	r23, r23
    adf6:	67 fd       	sbrc	r22, 7
    adf8:	70 95       	com	r23
    adfa:	87 2f       	mov	r24, r23
    adfc:	97 2f       	mov	r25, r23
    adfe:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
	temp16 = (int16_t)((tempf * 12.5f) + 3750.0f);
    ae02:	20 e0       	ldi	r18, 0x00	; 0
    ae04:	30 e0       	ldi	r19, 0x00	; 0
    ae06:	48 e4       	ldi	r20, 0x48	; 72
    ae08:	51 e4       	ldi	r21, 0x41	; 65
    ae0a:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    ae0e:	20 e0       	ldi	r18, 0x00	; 0
    ae10:	30 e6       	ldi	r19, 0x60	; 96
    ae12:	4a e6       	ldi	r20, 0x6A	; 106
    ae14:	55 e4       	ldi	r21, 0x45	; 69
    ae16:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    ae1a:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>

	return temp16;
}
    ae1e:	cb 01       	movw	r24, r22
    ae20:	08 95       	ret

0000ae22 <Process_curve>:
// Process curves. Maximum input values are +/-1000 for Bipolar curves and 0-2000 for monopolar curves.
// Curve number > NUMBEROFCURVES are the offset curves.
// Seven points 0, 17%, 33%, 50%, 67%, 83%, 100%	(Monopolar)
// Seven points -100, 67%, -33%, 0%, 33%, 67%, 100% (Bipolar)
int16_t Process_curve(uint8_t curve, uint8_t type, int16_t input_value)
{
    ae22:	8f 92       	push	r8
    ae24:	9f 92       	push	r9
    ae26:	af 92       	push	r10
    ae28:	bf 92       	push	r11
    ae2a:	cf 92       	push	r12
    ae2c:	df 92       	push	r13
    ae2e:	ef 92       	push	r14
    ae30:	ff 92       	push	r15
    ae32:	0f 93       	push	r16
    ae34:	1f 93       	push	r17
    ae36:	cf 93       	push	r28
    ae38:	df 93       	push	r29
    ae3a:	26 2f       	mov	r18, r22
    ae3c:	ea 01       	movw	r28, r20
	int16_t end_pos = 0;
	int32_t temp1 = 0;
	int32_t temp2 = 0;
	int32_t	Step1 = 0;

	if (type == BIPOLAR)
    ae3e:	61 30       	cpi	r22, 0x01	; 1
    ae40:	71 f4       	brne	.+28     	; 0xae5e <Process_curve+0x3c>
	{
		// Limit input value to +/-100% (+/-1000)
		if (input_value < -1000)
    ae42:	48 31       	cpi	r20, 0x18	; 24
    ae44:	3c ef       	ldi	r19, 0xFC	; 252
    ae46:	53 07       	cpc	r21, r19
    ae48:	0c f4       	brge	.+2      	; 0xae4c <Process_curve+0x2a>
    ae4a:	55 c0       	rjmp	.+170    	; 0xaef6 <Process_curve+0xd4>
		{
			input_value = -1000;
		}
		if (input_value > 1000)
    ae4c:	49 3e       	cpi	r20, 0xE9	; 233
    ae4e:	93 e0       	ldi	r25, 0x03	; 3
    ae50:	59 07       	cpc	r21, r25
    ae52:	cc f5       	brge	.+114    	; 0xaec6 <Process_curve+0xa4>
	}

	if (type == BIPOLAR)
	{
		// Work out which zone we are in
		if (input_value < -667)
    ae54:	45 36       	cpi	r20, 0x65	; 101
    ae56:	3d ef       	ldi	r19, 0xFD	; 253
    ae58:	53 07       	cpc	r21, r19
    ae5a:	64 f4       	brge	.+24     	; 0xae74 <Process_curve+0x52>
    ae5c:	4e c0       	rjmp	.+156    	; 0xaefa <Process_curve+0xd8>
		}
	}
	else // Monopolar
	{
		// Limit input value to 0 to 100% (0 to 2000)
		if (input_value < 0)
    ae5e:	57 fd       	sbrc	r21, 7
    ae60:	25 c1       	rjmp	.+586    	; 0xb0ac <Process_curve+0x28a>
		{
			input_value = 0;
		}
		if (input_value > 2000)
    ae62:	41 3d       	cpi	r20, 0xD1	; 209
    ae64:	97 e0       	ldi	r25, 0x07	; 7
    ae66:	59 07       	cpc	r21, r25
    ae68:	8c f5       	brge	.+98     	; 0xaecc <Process_curve+0xaa>
		}
	}
	else // Monopolar
	{
		// Work out which zone we are in
		if (input_value < 333)
    ae6a:	4d 34       	cpi	r20, 0x4D	; 77
    ae6c:	31 e0       	ldi	r19, 0x01	; 1
    ae6e:	53 07       	cpc	r21, r19
    ae70:	a4 f4       	brge	.+40     	; 0xae9a <Process_curve+0x78>
    ae72:	1e c1       	rjmp	.+572    	; 0xb0b0 <Process_curve+0x28e>
		if (input_value < -667)
		{
			zone = 0;
			bracket = -1000;			
		}
		else if (input_value < -333)
    ae74:	43 3b       	cpi	r20, 0xB3	; 179
    ae76:	9e ef       	ldi	r25, 0xFE	; 254
    ae78:	59 07       	cpc	r21, r25
    ae7a:	0c f4       	brge	.+2      	; 0xae7e <Process_curve+0x5c>
    ae7c:	1e c1       	rjmp	.+572    	; 0xb0ba <Process_curve+0x298>
		{
			zone = 1;
			bracket = -667;
		}
		else if (input_value < 0)
    ae7e:	57 fd       	sbrc	r21, 7
    ae80:	38 c1       	rjmp	.+624    	; 0xb0f2 <Process_curve+0x2d0>
		{
			zone = 2;
			bracket = -333;
		}	
		else if (input_value > 667)
    ae82:	4c 39       	cpi	r20, 0x9C	; 156
    ae84:	32 e0       	ldi	r19, 0x02	; 2
    ae86:	53 07       	cpc	r21, r19
    ae88:	24 f5       	brge	.+72     	; 0xaed2 <Process_curve+0xb0>
		{
			zone = 5;
			bracket = 667;
		}		
		else if (input_value > 333)
    ae8a:	4e 34       	cpi	r20, 0x4E	; 78
    ae8c:	91 e0       	ldi	r25, 0x01	; 1
    ae8e:	59 07       	cpc	r21, r25
    ae90:	0c f0       	brlt	.+2      	; 0xae94 <Process_curve+0x72>
    ae92:	59 c1       	rjmp	.+690    	; 0xb146 <Process_curve+0x324>
			bracket = 333;
		}
		else if (input_value >= 0)
		{
			zone = 3;
			bracket = 0;
    ae94:	00 e0       	ldi	r16, 0x00	; 0
    ae96:	10 e0       	ldi	r17, 0x00	; 0
    ae98:	48 c1       	rjmp	.+656    	; 0xb12a <Process_curve+0x308>
		if (input_value < 333)
		{
			zone = 0;
			bracket = 0;
		}
		else if (input_value < 667)
    ae9a:	4b 39       	cpi	r20, 0x9B	; 155
    ae9c:	32 e0       	ldi	r19, 0x02	; 2
    ae9e:	53 07       	cpc	r21, r19
    aea0:	0c f4       	brge	.+2      	; 0xaea4 <Process_curve+0x82>
    aea2:	0e c1       	rjmp	.+540    	; 0xb0c0 <Process_curve+0x29e>
		{
			zone = 1;
			bracket = 333;
		}
		else if (input_value < 1000)
    aea4:	48 3e       	cpi	r20, 0xE8	; 232
    aea6:	93 e0       	ldi	r25, 0x03	; 3
    aea8:	59 07       	cpc	r21, r25
    aeaa:	0c f4       	brge	.+2      	; 0xaeae <Process_curve+0x8c>
    aeac:	25 c1       	rjmp	.+586    	; 0xb0f8 <Process_curve+0x2d6>
		{
			zone = 2;
			bracket = 667;
		}
		else if (input_value > 1667)
    aeae:	44 38       	cpi	r20, 0x84	; 132
    aeb0:	36 e0       	ldi	r19, 0x06	; 6
    aeb2:	53 07       	cpc	r21, r19
    aeb4:	8c f4       	brge	.+34     	; 0xaed8 <Process_curve+0xb6>
		{
			zone = 5;
			bracket = 1667;
		}
		else if (input_value > 1333)
    aeb6:	46 33       	cpi	r20, 0x36	; 54
    aeb8:	95 e0       	ldi	r25, 0x05	; 5
    aeba:	59 07       	cpc	r21, r25
    aebc:	0c f0       	brlt	.+2      	; 0xaec0 <Process_curve+0x9e>
    aebe:	46 c1       	rjmp	.+652    	; 0xb14c <Process_curve+0x32a>
			bracket = 1333;
		}
		else if (input_value >= 1000)
		{
			zone = 3;
			bracket = 1000;
    aec0:	08 ee       	ldi	r16, 0xE8	; 232
    aec2:	13 e0       	ldi	r17, 0x03	; 3
    aec4:	32 c1       	rjmp	.+612    	; 0xb12a <Process_curve+0x308>
		{
			input_value = -1000;
		}
		if (input_value > 1000)
		{
			input_value = 1000;
    aec6:	c8 ee       	ldi	r28, 0xE8	; 232
    aec8:	d3 e0       	ldi	r29, 0x03	; 3
    aeca:	03 c0       	rjmp	.+6      	; 0xaed2 <Process_curve+0xb0>
		{
			input_value = 0;
		}
		if (input_value > 2000)
		{
			input_value = 2000;
    aecc:	c0 ed       	ldi	r28, 0xD0	; 208
    aece:	d7 e0       	ldi	r29, 0x07	; 7
    aed0:	03 c0       	rjmp	.+6      	; 0xaed8 <Process_curve+0xb6>
			bracket = -333;
		}	
		else if (input_value > 667)
		{
			zone = 5;
			bracket = 667;
    aed2:	0b e9       	ldi	r16, 0x9B	; 155
    aed4:	12 e0       	ldi	r17, 0x02	; 2
    aed6:	02 c0       	rjmp	.+4      	; 0xaedc <Process_curve+0xba>
			bracket = 667;
		}
		else if (input_value > 1667)
		{
			zone = 5;
			bracket = 1667;
    aed8:	03 e8       	ldi	r16, 0x83	; 131
    aeda:	16 e0       	ldi	r17, 0x06	; 6
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    aedc:	86 30       	cpi	r24, 0x06	; 6
    aede:	08 f0       	brcs	.+2      	; 0xaee2 <Process_curve+0xc0>
    aee0:	85 c0       	rjmp	.+266    	; 0xafec <Process_curve+0x1ca>
			case 4:
				start = Config.Curve[curve].Point5;
				end = Config.Curve[curve].Point6;
				break;
			case 5:
				start = Config.Curve[curve].Point6;
    aee2:	38 e0       	ldi	r19, 0x08	; 8
    aee4:	83 9f       	mul	r24, r19
    aee6:	c0 01       	movw	r24, r0
    aee8:	11 24       	eor	r1, r1
    aeea:	88 5e       	subi	r24, 0xE8	; 232
    aeec:	99 4f       	sbci	r25, 0xF9	; 249
    aeee:	fc 01       	movw	r30, r24
    aef0:	e5 5e       	subi	r30, 0xE5	; 229
    aef2:	fd 4f       	sbci	r31, 0xFD	; 253
    aef4:	10 c0       	rjmp	.+32     	; 0xaf16 <Process_curve+0xf4>
	if (type == BIPOLAR)
	{
		// Limit input value to +/-100% (+/-1000)
		if (input_value < -1000)
		{
			input_value = -1000;
    aef6:	c8 e1       	ldi	r28, 0x18	; 24
    aef8:	dc ef       	ldi	r29, 0xFC	; 252
	{
		// Work out which zone we are in
		if (input_value < -667)
		{
			zone = 0;
			bracket = -1000;			
    aefa:	08 e1       	ldi	r16, 0x18	; 24
    aefc:	1c ef       	ldi	r17, 0xFC	; 252
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    aefe:	86 30       	cpi	r24, 0x06	; 6
    af00:	08 f0       	brcs	.+2      	; 0xaf04 <Process_curve+0xe2>
    af02:	d9 c0       	rjmp	.+434    	; 0xb0b6 <Process_curve+0x294>
	{
		switch(zone)
		{
			case 0:
				start = Config.Curve[curve].Point1;
    af04:	38 e0       	ldi	r19, 0x08	; 8
    af06:	83 9f       	mul	r24, r19
    af08:	c0 01       	movw	r24, r0
    af0a:	11 24       	eor	r1, r1
    af0c:	88 5e       	subi	r24, 0xE8	; 232
    af0e:	99 4f       	sbci	r25, 0xF9	; 249
    af10:	fc 01       	movw	r30, r24
    af12:	ea 5e       	subi	r30, 0xEA	; 234
    af14:	fd 4f       	sbci	r31, 0xFD	; 253
			case 4:
				start = Config.Offsets[curve].Point5;
				end = Config.Offsets[curve].Point6;
				break;
			case 5:
				start = Config.Offsets[curve].Point6;
    af16:	60 81       	ld	r22, Z
				end = Config.Offsets[curve].Point7;
    af18:	31 96       	adiw	r30, 0x01	; 1
    af1a:	80 80       	ld	r8, Z
    af1c:	77 27       	eor	r23, r23
    af1e:	67 fd       	sbrc	r22, 7
    af20:	70 95       	com	r23
    af22:	87 2f       	mov	r24, r23
    af24:	97 2f       	mov	r25, r23
    af26:	99 24       	eor	r9, r9
    af28:	87 fc       	sbrc	r8, 7
    af2a:	90 94       	com	r9
    af2c:	a9 2c       	mov	r10, r9
    af2e:	b9 2c       	mov	r11, r9
		}		
	}
	
	// Work out distance to cover
	// Convert percentages to positions
	if (type == BIPOLAR)
    af30:	21 30       	cpi	r18, 0x01	; 1
    af32:	a1 f4       	brne	.+40     	; 0xaf5c <Process_curve+0x13a>
int16_t scale_throttle_curve_percent_bipolar(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    af34:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
	temp16 = (int16_t)(tempf * 10.0f);
    af38:	20 e0       	ldi	r18, 0x00	; 0
    af3a:	30 e0       	ldi	r19, 0x00	; 0
    af3c:	40 e2       	ldi	r20, 0x20	; 32
    af3e:	51 e4       	ldi	r21, 0x41	; 65
    af40:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    af44:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    af48:	6b 01       	movw	r12, r22
int16_t scale_throttle_curve_percent_bipolar(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    af4a:	c5 01       	movw	r24, r10
    af4c:	b4 01       	movw	r22, r8
    af4e:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
	temp16 = (int16_t)(tempf * 10.0f);
    af52:	20 e0       	ldi	r18, 0x00	; 0
    af54:	30 e0       	ldi	r19, 0x00	; 0
    af56:	40 e2       	ldi	r20, 0x20	; 32
    af58:	51 e4       	ldi	r21, 0x41	; 65
    af5a:	13 c0       	rjmp	.+38     	; 0xaf82 <Process_curve+0x160>
int16_t scale_throttle_curve_percent_mono(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    af5c:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
	temp16 = (int16_t)(tempf * 20.0f);
    af60:	20 e0       	ldi	r18, 0x00	; 0
    af62:	30 e0       	ldi	r19, 0x00	; 0
    af64:	40 ea       	ldi	r20, 0xA0	; 160
    af66:	51 e4       	ldi	r21, 0x41	; 65
    af68:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    af6c:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    af70:	6b 01       	movw	r12, r22
int16_t scale_throttle_curve_percent_mono(int8_t value)
{
	int16_t temp16;
	float tempf;

	tempf = (float)value; // Promote
    af72:	c5 01       	movw	r24, r10
    af74:	b4 01       	movw	r22, r8
    af76:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
	temp16 = (int16_t)(tempf * 20.0f);
    af7a:	20 e0       	ldi	r18, 0x00	; 0
    af7c:	30 e0       	ldi	r19, 0x00	; 0
    af7e:	40 ea       	ldi	r20, 0xA0	; 160
    af80:	51 e4       	ldi	r21, 0x41	; 65
    af82:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    af86:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
		start_pos = scale_throttle_curve_percent_mono(start);
		end_pos = scale_throttle_curve_percent_mono(end);
	}

	// Upscale span for best resolution (x 65536)
	temp1 = (int32_t)(end_pos - start_pos);
    af8a:	6c 19       	sub	r22, r12
    af8c:	7d 09       	sbc	r23, r13
    af8e:	cb 01       	movw	r24, r22
    af90:	aa 27       	eor	r26, r26
    af92:	97 fd       	sbrc	r25, 7
    af94:	a0 95       	com	r26
    af96:	ba 2f       	mov	r27, r26
	temp1 = temp1 << 16;

	// Divide distance into steps that cover the interval
	Step1 = (int32_t)(temp1 / (int32_t)334) ;

	temp2 = start_pos;
    af98:	ee 24       	eor	r14, r14
    af9a:	d7 fc       	sbrc	r13, 7
    af9c:	e0 94       	com	r14
    af9e:	fe 2c       	mov	r15, r14
	temp2 = temp2 << 16;
    afa0:	76 01       	movw	r14, r12
    afa2:	dd 24       	eor	r13, r13
    afa4:	cc 24       	eor	r12, r12
	temp2 += ((input_value - bracket) * Step1);
    afa6:	c0 1b       	sub	r28, r16
    afa8:	d1 0b       	sbc	r29, r17
		end_pos = scale_throttle_curve_percent_mono(end);
	}

	// Upscale span for best resolution (x 65536)
	temp1 = (int32_t)(end_pos - start_pos);
	temp1 = temp1 << 16;
    afaa:	77 27       	eor	r23, r23
    afac:	66 27       	eor	r22, r22

	// Divide distance into steps that cover the interval
	Step1 = (int32_t)(temp1 / (int32_t)334) ;
    afae:	2e e4       	ldi	r18, 0x4E	; 78
    afb0:	31 e0       	ldi	r19, 0x01	; 1
    afb2:	40 e0       	ldi	r20, 0x00	; 0
    afb4:	50 e0       	ldi	r21, 0x00	; 0
    afb6:	0e 94 4e 6c 	call	0xd89c	; 0xd89c <__divmodsi4>

	temp2 = start_pos;
	temp2 = temp2 << 16;
	temp2 += ((input_value - bracket) * Step1);
    afba:	de 01       	movw	r26, r28
    afbc:	0e 94 9c 6c 	call	0xd938	; 0xd938 <__mulshisi3>
    afc0:	c6 0e       	add	r12, r22
    afc2:	d7 1e       	adc	r13, r23
    afc4:	e8 1e       	adc	r14, r24
    afc6:	f9 1e       	adc	r15, r25

	// Reformat into a system-compatible value
	// Divide by 65536
	output_value = (int16_t)(temp2 >> 16);
    afc8:	c7 01       	movw	r24, r14
    afca:	bb 27       	eor	r27, r27
    afcc:	97 fd       	sbrc	r25, 7
    afce:	b0 95       	com	r27
    afd0:	ab 2f       	mov	r26, r27

	return output_value;
}
    afd2:	df 91       	pop	r29
    afd4:	cf 91       	pop	r28
    afd6:	1f 91       	pop	r17
    afd8:	0f 91       	pop	r16
    afda:	ff 90       	pop	r15
    afdc:	ef 90       	pop	r14
    afde:	df 90       	pop	r13
    afe0:	cf 90       	pop	r12
    afe2:	bf 90       	pop	r11
    afe4:	af 90       	pop	r10
    afe6:	9f 90       	pop	r9
    afe8:	8f 90       	pop	r8
    afea:	08 95       	ret
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    afec:	35 e0       	ldi	r19, 0x05	; 5
	}
	// Offsets
	else
	{
		// Correct curve number
		curve = curve - NUMBEROFCURVES;
    afee:	86 50       	subi	r24, 0x06	; 6
    aff0:	90 e0       	ldi	r25, 0x00	; 0

		switch(zone)
    aff2:	33 30       	cpi	r19, 0x03	; 3
    aff4:	d1 f1       	breq	.+116    	; 0xb06a <Process_curve+0x248>
    aff6:	2c f4       	brge	.+10     	; 0xb002 <Process_curve+0x1e0>
    aff8:	31 30       	cpi	r19, 0x01	; 1
    affa:	99 f0       	breq	.+38     	; 0xb022 <Process_curve+0x200>
    affc:	32 30       	cpi	r19, 0x02	; 2
    affe:	19 f1       	breq	.+70     	; 0xb046 <Process_curve+0x224>
    b000:	05 c0       	rjmp	.+10     	; 0xb00c <Process_curve+0x1ea>
    b002:	34 30       	cpi	r19, 0x04	; 4
    b004:	e9 f1       	breq	.+122    	; 0xb080 <Process_curve+0x25e>
    b006:	35 30       	cpi	r19, 0x05	; 5
    b008:	09 f4       	brne	.+2      	; 0xb00c <Process_curve+0x1ea>
    b00a:	45 c0       	rjmp	.+138    	; 0xb096 <Process_curve+0x274>
		{
			case 0:
				start = Config.Offsets[curve].Point1;
    b00c:	53 e0       	ldi	r21, 0x03	; 3
    b00e:	88 0f       	add	r24, r24
    b010:	99 1f       	adc	r25, r25
    b012:	5a 95       	dec	r21
    b014:	e1 f7       	brne	.-8      	; 0xb00e <Process_curve+0x1ec>
    b016:	88 5e       	subi	r24, 0xE8	; 232
    b018:	99 4f       	sbci	r25, 0xF9	; 249
    b01a:	fc 01       	movw	r30, r24
    b01c:	e2 5b       	subi	r30, 0xB2	; 178
    b01e:	fd 4f       	sbci	r31, 0xFD	; 253
    b020:	7a cf       	rjmp	.-268    	; 0xaf16 <Process_curve+0xf4>
				end = Config.Offsets[curve].Point2;
				break;
			case 1:
				start = Config.Offsets[curve].Point2;
    b022:	fc 01       	movw	r30, r24
    b024:	33 e0       	ldi	r19, 0x03	; 3
    b026:	ee 0f       	add	r30, r30
    b028:	ff 1f       	adc	r31, r31
    b02a:	3a 95       	dec	r19
    b02c:	e1 f7       	brne	.-8      	; 0xb026 <Process_curve+0x204>
    b02e:	e9 59       	subi	r30, 0x99	; 153
    b030:	f7 4f       	sbci	r31, 0xF7	; 247
    b032:	60 81       	ld	r22, Z
				end = Config.Offsets[curve].Point3;
    b034:	fc 01       	movw	r30, r24
    b036:	43 e0       	ldi	r20, 0x03	; 3
    b038:	ee 0f       	add	r30, r30
    b03a:	ff 1f       	adc	r31, r31
    b03c:	4a 95       	dec	r20
    b03e:	e1 f7       	brne	.-8      	; 0xb038 <Process_curve+0x216>
    b040:	e8 59       	subi	r30, 0x98	; 152
    b042:	f7 4f       	sbci	r31, 0xF7	; 247
    b044:	6a cf       	rjmp	.-300    	; 0xaf1a <Process_curve+0xf8>
				break;
			case 2:
				start = Config.Offsets[curve].Point3;
    b046:	fc 01       	movw	r30, r24
    b048:	b3 e0       	ldi	r27, 0x03	; 3
    b04a:	ee 0f       	add	r30, r30
    b04c:	ff 1f       	adc	r31, r31
    b04e:	ba 95       	dec	r27
    b050:	e1 f7       	brne	.-8      	; 0xb04a <Process_curve+0x228>
    b052:	e8 59       	subi	r30, 0x98	; 152
    b054:	f7 4f       	sbci	r31, 0xF7	; 247
    b056:	60 81       	ld	r22, Z
				end = Config.Offsets[curve].Point4;
    b058:	fc 01       	movw	r30, r24
    b05a:	83 e0       	ldi	r24, 0x03	; 3
    b05c:	ee 0f       	add	r30, r30
    b05e:	ff 1f       	adc	r31, r31
    b060:	8a 95       	dec	r24
    b062:	e1 f7       	brne	.-8      	; 0xb05c <Process_curve+0x23a>
    b064:	e7 59       	subi	r30, 0x97	; 151
    b066:	f7 4f       	sbci	r31, 0xF7	; 247
    b068:	58 cf       	rjmp	.-336    	; 0xaf1a <Process_curve+0xf8>
				break;
			case 3:
				start = Config.Offsets[curve].Point4;
    b06a:	a3 e0       	ldi	r26, 0x03	; 3
    b06c:	88 0f       	add	r24, r24
    b06e:	99 1f       	adc	r25, r25
    b070:	aa 95       	dec	r26
    b072:	e1 f7       	brne	.-8      	; 0xb06c <Process_curve+0x24a>
    b074:	88 5e       	subi	r24, 0xE8	; 232
    b076:	99 4f       	sbci	r25, 0xF9	; 249
    b078:	fc 01       	movw	r30, r24
    b07a:	ef 5a       	subi	r30, 0xAF	; 175
    b07c:	fd 4f       	sbci	r31, 0xFD	; 253
    b07e:	4b cf       	rjmp	.-362    	; 0xaf16 <Process_curve+0xf4>
				end = Config.Offsets[curve].Point5;
				break;
			case 4:
				start = Config.Offsets[curve].Point5;
    b080:	f3 e0       	ldi	r31, 0x03	; 3
    b082:	88 0f       	add	r24, r24
    b084:	99 1f       	adc	r25, r25
    b086:	fa 95       	dec	r31
    b088:	e1 f7       	brne	.-8      	; 0xb082 <Process_curve+0x260>
    b08a:	88 5e       	subi	r24, 0xE8	; 232
    b08c:	99 4f       	sbci	r25, 0xF9	; 249
    b08e:	fc 01       	movw	r30, r24
    b090:	ee 5a       	subi	r30, 0xAE	; 174
    b092:	fd 4f       	sbci	r31, 0xFD	; 253
    b094:	40 cf       	rjmp	.-384    	; 0xaf16 <Process_curve+0xf4>
				end = Config.Offsets[curve].Point6;
				break;
			case 5:
				start = Config.Offsets[curve].Point6;
    b096:	e3 e0       	ldi	r30, 0x03	; 3
    b098:	88 0f       	add	r24, r24
    b09a:	99 1f       	adc	r25, r25
    b09c:	ea 95       	dec	r30
    b09e:	e1 f7       	brne	.-8      	; 0xb098 <Process_curve+0x276>
    b0a0:	88 5e       	subi	r24, 0xE8	; 232
    b0a2:	99 4f       	sbci	r25, 0xF9	; 249
    b0a4:	fc 01       	movw	r30, r24
    b0a6:	ed 5a       	subi	r30, 0xAD	; 173
    b0a8:	fd 4f       	sbci	r31, 0xFD	; 253
    b0aa:	35 cf       	rjmp	.-406    	; 0xaf16 <Process_curve+0xf4>
	else // Monopolar
	{
		// Limit input value to 0 to 100% (0 to 2000)
		if (input_value < 0)
		{
			input_value = 0;
    b0ac:	c0 e0       	ldi	r28, 0x00	; 0
    b0ae:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// Work out which zone we are in
		if (input_value < 333)
		{
			zone = 0;
			bracket = 0;
    b0b0:	00 e0       	ldi	r16, 0x00	; 0
    b0b2:	10 e0       	ldi	r17, 0x00	; 0
    b0b4:	24 cf       	rjmp	.-440    	; 0xaefe <Process_curve+0xdc>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b0b6:	30 e0       	ldi	r19, 0x00	; 0
    b0b8:	9a cf       	rjmp	.-204    	; 0xafee <Process_curve+0x1cc>
			bracket = -1000;			
		}
		else if (input_value < -333)
		{
			zone = 1;
			bracket = -667;
    b0ba:	05 e6       	ldi	r16, 0x65	; 101
    b0bc:	1d ef       	ldi	r17, 0xFD	; 253
    b0be:	02 c0       	rjmp	.+4      	; 0xb0c4 <Process_curve+0x2a2>
			bracket = 0;
		}
		else if (input_value < 667)
		{
			zone = 1;
			bracket = 333;
    b0c0:	0d e4       	ldi	r16, 0x4D	; 77
    b0c2:	11 e0       	ldi	r17, 0x01	; 1
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b0c4:	86 30       	cpi	r24, 0x06	; 6
    b0c6:	98 f4       	brcc	.+38     	; 0xb0ee <Process_curve+0x2cc>
			case 0:
				start = Config.Curve[curve].Point1;
				end = Config.Curve[curve].Point2;
				break;
			case 1:	
				start = Config.Curve[curve].Point2;
    b0c8:	90 e0       	ldi	r25, 0x00	; 0
    b0ca:	dc 01       	movw	r26, r24
    b0cc:	e3 e0       	ldi	r30, 0x03	; 3
    b0ce:	aa 0f       	add	r26, r26
    b0d0:	bb 1f       	adc	r27, r27
    b0d2:	ea 95       	dec	r30
    b0d4:	e1 f7       	brne	.-8      	; 0xb0ce <Process_curve+0x2ac>
    b0d6:	a1 5d       	subi	r26, 0xD1	; 209
    b0d8:	b7 4f       	sbci	r27, 0xF7	; 247
    b0da:	6c 91       	ld	r22, X
				end = Config.Curve[curve].Point3;
    b0dc:	fc 01       	movw	r30, r24
    b0de:	a3 e0       	ldi	r26, 0x03	; 3
    b0e0:	ee 0f       	add	r30, r30
    b0e2:	ff 1f       	adc	r31, r31
    b0e4:	aa 95       	dec	r26
    b0e6:	e1 f7       	brne	.-8      	; 0xb0e0 <Process_curve+0x2be>
    b0e8:	e0 5d       	subi	r30, 0xD0	; 208
    b0ea:	f7 4f       	sbci	r31, 0xF7	; 247
    b0ec:	16 cf       	rjmp	.-468    	; 0xaf1a <Process_curve+0xf8>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b0ee:	31 e0       	ldi	r19, 0x01	; 1
    b0f0:	7e cf       	rjmp	.-260    	; 0xafee <Process_curve+0x1cc>
			bracket = -667;
		}
		else if (input_value < 0)
		{
			zone = 2;
			bracket = -333;
    b0f2:	03 eb       	ldi	r16, 0xB3	; 179
    b0f4:	1e ef       	ldi	r17, 0xFE	; 254
    b0f6:	02 c0       	rjmp	.+4      	; 0xb0fc <Process_curve+0x2da>
			bracket = 333;
		}
		else if (input_value < 1000)
		{
			zone = 2;
			bracket = 667;
    b0f8:	0b e9       	ldi	r16, 0x9B	; 155
    b0fa:	12 e0       	ldi	r17, 0x02	; 2
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b0fc:	86 30       	cpi	r24, 0x06	; 6
    b0fe:	98 f4       	brcc	.+38     	; 0xb126 <Process_curve+0x304>
			case 1:	
				start = Config.Curve[curve].Point2;
				end = Config.Curve[curve].Point3;
				break;
			case 2:
				start = Config.Curve[curve].Point3;
    b100:	90 e0       	ldi	r25, 0x00	; 0
    b102:	dc 01       	movw	r26, r24
    b104:	63 e0       	ldi	r22, 0x03	; 3
    b106:	aa 0f       	add	r26, r26
    b108:	bb 1f       	adc	r27, r27
    b10a:	6a 95       	dec	r22
    b10c:	e1 f7       	brne	.-8      	; 0xb106 <Process_curve+0x2e4>
    b10e:	a0 5d       	subi	r26, 0xD0	; 208
    b110:	b7 4f       	sbci	r27, 0xF7	; 247
    b112:	6c 91       	ld	r22, X
				end = Config.Curve[curve].Point4;
    b114:	fc 01       	movw	r30, r24
    b116:	73 e0       	ldi	r23, 0x03	; 3
    b118:	ee 0f       	add	r30, r30
    b11a:	ff 1f       	adc	r31, r31
    b11c:	7a 95       	dec	r23
    b11e:	e1 f7       	brne	.-8      	; 0xb118 <Process_curve+0x2f6>
    b120:	ef 5c       	subi	r30, 0xCF	; 207
    b122:	f7 4f       	sbci	r31, 0xF7	; 247
    b124:	fa ce       	rjmp	.-524    	; 0xaf1a <Process_curve+0xf8>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b126:	32 e0       	ldi	r19, 0x02	; 2
    b128:	62 cf       	rjmp	.-316    	; 0xafee <Process_curve+0x1cc>
    b12a:	86 30       	cpi	r24, 0x06	; 6
    b12c:	50 f4       	brcc	.+20     	; 0xb142 <Process_curve+0x320>
			case 2:
				start = Config.Curve[curve].Point3;
				end = Config.Curve[curve].Point4;
				break;
			case 3:
				start = Config.Curve[curve].Point4;
    b12e:	38 e0       	ldi	r19, 0x08	; 8
    b130:	83 9f       	mul	r24, r19
    b132:	c0 01       	movw	r24, r0
    b134:	11 24       	eor	r1, r1
    b136:	88 5e       	subi	r24, 0xE8	; 232
    b138:	99 4f       	sbci	r25, 0xF9	; 249
    b13a:	fc 01       	movw	r30, r24
    b13c:	e7 5e       	subi	r30, 0xE7	; 231
    b13e:	fd 4f       	sbci	r31, 0xFD	; 253
    b140:	ea ce       	rjmp	.-556    	; 0xaf16 <Process_curve+0xf4>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b142:	33 e0       	ldi	r19, 0x03	; 3
    b144:	54 cf       	rjmp	.-344    	; 0xafee <Process_curve+0x1cc>
			bracket = 667;
		}		
		else if (input_value > 333)
		{
			zone = 4;
			bracket = 333;
    b146:	0d e4       	ldi	r16, 0x4D	; 77
    b148:	11 e0       	ldi	r17, 0x01	; 1
    b14a:	02 c0       	rjmp	.+4      	; 0xb150 <Process_curve+0x32e>
			bracket = 1667;
		}
		else if (input_value > 1333)
		{
			zone = 4;
			bracket = 1333;
    b14c:	05 e3       	ldi	r16, 0x35	; 53
    b14e:	15 e0       	ldi	r17, 0x05	; 5
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b150:	86 30       	cpi	r24, 0x06	; 6
    b152:	50 f4       	brcc	.+20     	; 0xb168 <Process_curve+0x346>
			case 3:
				start = Config.Curve[curve].Point4;
				end = Config.Curve[curve].Point5;
				break;
			case 4:
				start = Config.Curve[curve].Point5;
    b154:	38 e0       	ldi	r19, 0x08	; 8
    b156:	83 9f       	mul	r24, r19
    b158:	c0 01       	movw	r24, r0
    b15a:	11 24       	eor	r1, r1
    b15c:	88 5e       	subi	r24, 0xE8	; 232
    b15e:	99 4f       	sbci	r25, 0xF9	; 249
    b160:	fc 01       	movw	r30, r24
    b162:	e6 5e       	subi	r30, 0xE6	; 230
    b164:	fd 4f       	sbci	r31, 0xFD	; 253
    b166:	d7 ce       	rjmp	.-594    	; 0xaf16 <Process_curve+0xf4>
		}	
	}

	// Find start/end points of zone 
	// Normal curves
	if (curve < NUMBEROFCURVES)
    b168:	34 e0       	ldi	r19, 0x04	; 4
    b16a:	41 cf       	rjmp	.-382    	; 0xafee <Process_curve+0x1cc>

0000b16c <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    b16c:	2f 92       	push	r2
    b16e:	3f 92       	push	r3
    b170:	4f 92       	push	r4
    b172:	5f 92       	push	r5
    b174:	6f 92       	push	r6
    b176:	7f 92       	push	r7
    b178:	8f 92       	push	r8
    b17a:	9f 92       	push	r9
    b17c:	af 92       	push	r10
    b17e:	bf 92       	push	r11
    b180:	cf 92       	push	r12
    b182:	df 92       	push	r13
    b184:	ef 92       	push	r14
    b186:	ff 92       	push	r15
    b188:	0f 93       	push	r16
    b18a:	1f 93       	push	r17
    b18c:	cf 93       	push	r28
    b18e:	df 93       	push	r29
    b190:	cd b7       	in	r28, 0x3d	; 61
    b192:	de b7       	in	r29, 0x3e	; 62
    b194:	c4 57       	subi	r28, 0x74	; 116
    b196:	d1 09       	sbc	r29, r1
    b198:	0f b6       	in	r0, 0x3f	; 63
    b19a:	f8 94       	cli
    b19c:	de bf       	out	0x3e, r29	; 62
    b19e:	0f be       	out	0x3f, r0	; 63
    b1a0:	cd bf       	out	0x3d, r28	; 61
	int8_t	P1_acc_roll_volume_source = 0;
	int8_t	P1_gyro_roll_volume_source = 0;
	int8_t	P1_gyro_yaw_volume_source = 0;

	// Process curves
	P1_throttle = Process_curve(P1_THR_CURVE, MONOPOLAR, MonopolarThrottle);
    b1a2:	40 91 42 09 	lds	r20, 0x0942
    b1a6:	50 91 43 09 	lds	r21, 0x0943
    b1aa:	60 e0       	ldi	r22, 0x00	; 0
    b1ac:	80 e0       	ldi	r24, 0x00	; 0
    b1ae:	0e 94 11 57 	call	0xae22	; 0xae22 <Process_curve>
    b1b2:	2c 01       	movw	r4, r24
	P2_throttle = Process_curve(P2_THR_CURVE, MONOPOLAR, MonopolarThrottle);
    b1b4:	40 91 42 09 	lds	r20, 0x0942
    b1b8:	50 91 43 09 	lds	r21, 0x0943
    b1bc:	60 e0       	ldi	r22, 0x00	; 0
    b1be:	81 e0       	ldi	r24, 0x01	; 1
    b1c0:	0e 94 11 57 	call	0xae22	; 0xae22 <Process_curve>
    b1c4:	3c 01       	movw	r6, r24
	P1_collective = Process_curve(P1_COLL_CURVE, BIPOLAR, RCinputs[THROTTLE]);
    b1c6:	40 91 44 09 	lds	r20, 0x0944
    b1ca:	50 91 45 09 	lds	r21, 0x0945
    b1ce:	61 e0       	ldi	r22, 0x01	; 1
    b1d0:	82 e0       	ldi	r24, 0x02	; 2
    b1d2:	0e 94 11 57 	call	0xae22	; 0xae22 <Process_curve>
    b1d6:	6c 01       	movw	r12, r24
	P2_collective = Process_curve(P2_COLL_CURVE, BIPOLAR, RCinputs[THROTTLE]);
    b1d8:	40 91 44 09 	lds	r20, 0x0944
    b1dc:	50 91 45 09 	lds	r21, 0x0945
    b1e0:	61 e0       	ldi	r22, 0x01	; 1
    b1e2:	83 e0       	ldi	r24, 0x03	; 3
    b1e4:	0e 94 11 57 	call	0xae22	; 0xae22 <Process_curve>
    b1e8:	7c 01       	movw	r14, r24

	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    b1ea:	60 91 00 06 	lds	r22, 0x0600
    b1ee:	70 91 01 06 	lds	r23, 0x0601
    b1f2:	80 91 02 06 	lds	r24, 0x0602
    b1f6:	90 91 03 06 	lds	r25, 0x0603
    b1fa:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    b1fe:	8b 01       	movw	r16, r22
    b200:	73 e0       	ldi	r23, 0x03	; 3
    b202:	00 0f       	add	r16, r16
    b204:	11 1f       	adc	r17, r17
    b206:	7a 95       	dec	r23
    b208:	e1 f7       	brne	.-8      	; 0xb202 <ProcessMixer+0x96>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    b20a:	60 91 04 06 	lds	r22, 0x0604
    b20e:	70 91 05 06 	lds	r23, 0x0605
    b212:	80 91 06 06 	lds	r24, 0x0606
    b216:	90 91 07 06 	lds	r25, 0x0607
    b21a:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    b21e:	e3 e0       	ldi	r30, 0x03	; 3
    b220:	66 0f       	add	r22, r22
    b222:	77 1f       	adc	r23, r23
    b224:	ea 95       	dec	r30
    b226:	e1 f7       	brne	.-8      	; 0xb220 <ProcessMixer+0xb4>
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b228:	5c a6       	std	Y+44, r5	; 0x2c
    b22a:	4b a6       	std	Y+43, r4	; 0x2b
    b22c:	80 91 55 05 	lds	r24, 0x0555
    b230:	90 91 56 05 	lds	r25, 0x0556
    b234:	9e a7       	std	Y+46, r25	; 0x2e
    b236:	8d a7       	std	Y+45, r24	; 0x2d
    b238:	80 91 51 05 	lds	r24, 0x0551
    b23c:	90 91 52 05 	lds	r25, 0x0552
    b240:	98 ab       	std	Y+48, r25	; 0x30
    b242:	8f a7       	std	Y+47, r24	; 0x2f
    b244:	da aa       	std	Y+50, r13	; 0x32
    b246:	c9 aa       	std	Y+49, r12	; 0x31
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b248:	80 91 44 09 	lds	r24, 0x0944
    b24c:	90 91 45 09 	lds	r25, 0x0945
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b250:	9c ab       	std	Y+52, r25	; 0x34
    b252:	8b ab       	std	Y+51, r24	; 0x33
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b254:	80 91 46 09 	lds	r24, 0x0946
    b258:	90 91 47 09 	lds	r25, 0x0947
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b25c:	9e ab       	std	Y+54, r25	; 0x36
    b25e:	8d ab       	std	Y+53, r24	; 0x35
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b260:	80 91 48 09 	lds	r24, 0x0948
    b264:	90 91 49 09 	lds	r25, 0x0949
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b268:	98 af       	std	Y+56, r25	; 0x38
    b26a:	8f ab       	std	Y+55, r24	; 0x37
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b26c:	80 91 4a 09 	lds	r24, 0x094A
    b270:	90 91 4b 09 	lds	r25, 0x094B
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b274:	9a af       	std	Y+58, r25	; 0x3a
    b276:	89 af       	std	Y+57, r24	; 0x39
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b278:	80 91 4c 09 	lds	r24, 0x094C
    b27c:	90 91 4d 09 	lds	r25, 0x094D
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b280:	9c af       	std	Y+60, r25	; 0x3c
    b282:	8b af       	std	Y+59, r24	; 0x3b
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b284:	80 91 4e 09 	lds	r24, 0x094E
    b288:	90 91 4f 09 	lds	r25, 0x094F
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b28c:	9e af       	std	Y+62, r25	; 0x3e
    b28e:	8d af       	std	Y+61, r24	; 0x3d
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b290:	80 91 50 09 	lds	r24, 0x0950
    b294:	90 91 51 09 	lds	r25, 0x0951
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b298:	21 96       	adiw	r28, 0x01	; 1
    b29a:	9f af       	std	Y+63, r25	; 0x3f
    b29c:	8e af       	std	Y+62, r24	; 0x3e
    b29e:	21 97       	sbiw	r28, 0x01	; 1
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b2a0:	80 91 52 09 	lds	r24, 0x0952
    b2a4:	90 91 53 09 	lds	r25, 0x0953
	// Copy the universal mixer inputs to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
	temp2 = (int16_t)accSmooth[PITCH] << 3;
		
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
    b2a8:	23 96       	adiw	r28, 0x03	; 3
    b2aa:	9f af       	std	Y+63, r25	; 0x3f
    b2ac:	8e af       	std	Y+62, r24	; 0x3e
    b2ae:	23 97       	sbiw	r28, 0x03	; 3
    b2b0:	20 91 1a 09 	lds	r18, 0x091A
    b2b4:	30 91 1b 09 	lds	r19, 0x091B
    b2b8:	69 96       	adiw	r28, 0x19	; 25
    b2ba:	3f af       	std	Y+63, r19	; 0x3f
    b2bc:	2e af       	std	Y+62, r18	; 0x3e
    b2be:	69 97       	sbiw	r28, 0x19	; 25
    b2c0:	25 96       	adiw	r28, 0x05	; 5
    b2c2:	3f af       	std	Y+63, r19	; 0x3f
    b2c4:	2e af       	std	Y+62, r18	; 0x3e
    b2c6:	25 97       	sbiw	r28, 0x05	; 5
    b2c8:	20 91 1c 09 	lds	r18, 0x091C
    b2cc:	30 91 1d 09 	lds	r19, 0x091D
    b2d0:	6b 96       	adiw	r28, 0x1b	; 27
    b2d2:	3f af       	std	Y+63, r19	; 0x3f
    b2d4:	2e af       	std	Y+62, r18	; 0x3e
    b2d6:	6b 97       	sbiw	r28, 0x1b	; 27
    b2d8:	27 96       	adiw	r28, 0x07	; 7
    b2da:	3f af       	std	Y+63, r19	; 0x3f
    b2dc:	2e af       	std	Y+62, r18	; 0x3e
    b2de:	27 97       	sbiw	r28, 0x07	; 7
    b2e0:	20 91 1e 09 	lds	r18, 0x091E
    b2e4:	30 91 1f 09 	lds	r19, 0x091F
    b2e8:	6d 96       	adiw	r28, 0x1d	; 29
    b2ea:	3f af       	std	Y+63, r19	; 0x3f
    b2ec:	2e af       	std	Y+62, r18	; 0x3e
    b2ee:	6d 97       	sbiw	r28, 0x1d	; 29
    b2f0:	29 96       	adiw	r28, 0x09	; 9
    b2f2:	3f af       	std	Y+63, r19	; 0x3f
    b2f4:	2e af       	std	Y+62, r18	; 0x3e
    b2f6:	29 97       	sbiw	r28, 0x09	; 9
    b2f8:	2b 96       	adiw	r28, 0x0b	; 11
    b2fa:	1f af       	std	Y+63, r17	; 0x3f
    b2fc:	0e af       	std	Y+62, r16	; 0x3e
    b2fe:	2b 97       	sbiw	r28, 0x0b	; 11
    b300:	2d 96       	adiw	r28, 0x0d	; 13
    b302:	7f af       	std	Y+63, r23	; 0x3f
    b304:	6e af       	std	Y+62, r22	; 0x3e
    b306:	2d 97       	sbiw	r28, 0x0d	; 13
    b308:	80 91 26 09 	lds	r24, 0x0926
    b30c:	90 91 27 09 	lds	r25, 0x0927
    b310:	2f 96       	adiw	r28, 0x0f	; 15
    b312:	9f af       	std	Y+63, r25	; 0x3f
    b314:	8e af       	std	Y+62, r24	; 0x3e
    b316:	2f 97       	sbiw	r28, 0x0f	; 15
    b318:	80 91 28 09 	lds	r24, 0x0928
    b31c:	90 91 29 09 	lds	r25, 0x0929
    b320:	61 96       	adiw	r28, 0x11	; 17
    b322:	9f af       	std	Y+63, r25	; 0x3f
    b324:	8e af       	std	Y+62, r24	; 0x3e
    b326:	61 97       	sbiw	r28, 0x11	; 17
    b328:	80 91 2a 09 	lds	r24, 0x092A
    b32c:	90 91 2b 09 	lds	r25, 0x092B
    b330:	63 96       	adiw	r28, 0x13	; 19
    b332:	9f af       	std	Y+63, r25	; 0x3f
    b334:	8e af       	std	Y+62, r24	; 0x3e
    b336:	63 97       	sbiw	r28, 0x13	; 19
    b338:	65 96       	adiw	r28, 0x15	; 21
    b33a:	1f ae       	std	Y+63, r1	; 0x3f
    b33c:	1e ae       	std	Y+62, r1	; 0x3e
    b33e:	65 97       	sbiw	r28, 0x15	; 21
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b340:	7a 82       	std	Y+2, r7	; 0x02
    b342:	69 82       	std	Y+1, r6	; 0x01
    b344:	80 91 53 05 	lds	r24, 0x0553
    b348:	90 91 54 05 	lds	r25, 0x0554
    b34c:	9c 83       	std	Y+4, r25	; 0x04
    b34e:	8b 83       	std	Y+3, r24	; 0x03
    b350:	80 91 4f 05 	lds	r24, 0x054F
    b354:	90 91 50 05 	lds	r25, 0x0550
    b358:	9e 83       	std	Y+6, r25	; 0x06
    b35a:	8d 83       	std	Y+5, r24	; 0x05
    b35c:	f8 86       	std	Y+8, r15	; 0x08
    b35e:	ef 82       	std	Y+7, r14	; 0x07
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b360:	80 91 44 09 	lds	r24, 0x0944
    b364:	90 91 45 09 	lds	r25, 0x0945
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b368:	9a 87       	std	Y+10, r25	; 0x0a
    b36a:	89 87       	std	Y+9, r24	; 0x09
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b36c:	80 91 46 09 	lds	r24, 0x0946
    b370:	90 91 47 09 	lds	r25, 0x0947
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b374:	9c 87       	std	Y+12, r25	; 0x0c
    b376:	8b 87       	std	Y+11, r24	; 0x0b
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b378:	80 91 48 09 	lds	r24, 0x0948
    b37c:	90 91 49 09 	lds	r25, 0x0949
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b380:	9e 87       	std	Y+14, r25	; 0x0e
    b382:	8d 87       	std	Y+13, r24	; 0x0d
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b384:	80 91 4a 09 	lds	r24, 0x094A
    b388:	90 91 4b 09 	lds	r25, 0x094B
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b38c:	98 8b       	std	Y+16, r25	; 0x10
    b38e:	8f 87       	std	Y+15, r24	; 0x0f
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b390:	80 91 4c 09 	lds	r24, 0x094C
    b394:	90 91 4d 09 	lds	r25, 0x094D
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b398:	9a 8b       	std	Y+18, r25	; 0x12
    b39a:	89 8b       	std	Y+17, r24	; 0x11
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b39c:	80 91 4e 09 	lds	r24, 0x094E
    b3a0:	90 91 4f 09 	lds	r25, 0x094F
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b3a4:	9c 8b       	std	Y+20, r25	; 0x14
    b3a6:	8b 8b       	std	Y+19, r24	; 0x13
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b3a8:	80 91 50 09 	lds	r24, 0x0950
    b3ac:	90 91 51 09 	lds	r25, 0x0951
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b3b0:	9e 8b       	std	Y+22, r25	; 0x16
    b3b2:	8d 8b       	std	Y+21, r24	; 0x15
		{P2_throttle, P2_curve_C, P2_curve_D, P2_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
    b3b4:	80 91 52 09 	lds	r24, 0x0952
    b3b8:	90 91 53 09 	lds	r25, 0x0953
	// THROTTLE, CURVE A, CURVE B, COLLECTIVE, THROTTLE, AILERON, ELEVATOR, RUDDER, GEAR, AUX1, AUX2, AUX3, ROLLGYRO, PITCHGYO, YAWGYRO, ACCSMOOTH, PITCHSMOOTH, ROLLACC, PITCHACC, AccZ, NONE
	int16_t	UniversalP1[NUMBEROFSOURCES] = 
		{P1_throttle, P1_curve_C, P1_curve_D, P1_collective, RCinputs[THROTTLE], RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER], RCinputs[GEAR], RCinputs[AUX1], RCinputs[AUX2], RCinputs[AUX3],
		 PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH],PID_ACCs[P1][YAW], 0};
		
	int16_t	UniversalP2[NUMBEROFSOURCES] = 
    b3bc:	98 8f       	std	Y+24, r25	; 0x18
    b3be:	8f 8b       	std	Y+23, r24	; 0x17
    b3c0:	20 91 20 09 	lds	r18, 0x0920
    b3c4:	30 91 21 09 	lds	r19, 0x0921
    b3c8:	6f 96       	adiw	r28, 0x1f	; 31
    b3ca:	3f af       	std	Y+63, r19	; 0x3f
    b3cc:	2e af       	std	Y+62, r18	; 0x3e
    b3ce:	6f 97       	sbiw	r28, 0x1f	; 31
    b3d0:	3a 8f       	std	Y+26, r19	; 0x1a
    b3d2:	29 8f       	std	Y+25, r18	; 0x19
    b3d4:	80 91 22 09 	lds	r24, 0x0922
    b3d8:	90 91 23 09 	lds	r25, 0x0923
    b3dc:	9c 8f       	std	Y+28, r25	; 0x1c
    b3de:	8b 8f       	std	Y+27, r24	; 0x1b
    b3e0:	80 91 24 09 	lds	r24, 0x0924
    b3e4:	90 91 25 09 	lds	r25, 0x0925
    b3e8:	9e 8f       	std	Y+30, r25	; 0x1e
    b3ea:	8d 8f       	std	Y+29, r24	; 0x1d
    b3ec:	18 a3       	std	Y+32, r17	; 0x20
    b3ee:	0f 8f       	std	Y+31, r16	; 0x1f
    b3f0:	7a a3       	std	Y+34, r23	; 0x22
    b3f2:	69 a3       	std	Y+33, r22	; 0x21
    b3f4:	80 91 2c 09 	lds	r24, 0x092C
    b3f8:	90 91 2d 09 	lds	r25, 0x092D
    b3fc:	9c a3       	std	Y+36, r25	; 0x24
    b3fe:	8b a3       	std	Y+35, r24	; 0x23
    b400:	80 91 2e 09 	lds	r24, 0x092E
    b404:	90 91 2f 09 	lds	r25, 0x092F
    b408:	9e a3       	std	Y+38, r25	; 0x26
    b40a:	8d a3       	std	Y+37, r24	; 0x25
    b40c:	80 91 30 09 	lds	r24, 0x0930
    b410:	90 91 31 09 	lds	r25, 0x0931
    b414:	98 a7       	std	Y+40, r25	; 0x28
    b416:	8f a3       	std	Y+39, r24	; 0x27
    b418:	1a a6       	std	Y+42, r1	; 0x2a
    b41a:	19 a6       	std	Y+41, r1	; 0x29
	//************************************************************
	// Generic curves
	//************************************************************
	
	// Only process generic curves if they have a source selected
	if (Config.Curve[GEN_CURVE_C].channel != NOMIX)
    b41c:	80 91 55 08 	lds	r24, 0x0855
    b420:	84 31       	cpi	r24, 0x14	; 20
    b422:	f1 f0       	breq	.+60     	; 0xb460 <ProcessMixer+0x2f4>
	{
		P1_curve_C = Process_curve(GEN_CURVE_C, BIPOLAR, UniversalP1[Config.Curve[GEN_CURVE_C].channel]);		
    b424:	88 0f       	add	r24, r24
    b426:	99 0b       	sbc	r25, r25
    b428:	8e 01       	movw	r16, r28
    b42a:	0f 5f       	subi	r16, 0xFF	; 255
    b42c:	1f 4f       	sbci	r17, 0xFF	; 255
    b42e:	08 0f       	add	r16, r24
    b430:	19 1f       	adc	r17, r25
    b432:	f8 01       	movw	r30, r16
    b434:	42 a5       	ldd	r20, Z+42	; 0x2a
    b436:	53 a5       	ldd	r21, Z+43	; 0x2b
    b438:	61 e0       	ldi	r22, 0x01	; 1
    b43a:	84 e0       	ldi	r24, 0x04	; 4
    b43c:	0e 94 11 57 	call	0xae22	; 0xae22 <Process_curve>
    b440:	90 93 56 05 	sts	0x0556, r25
    b444:	80 93 55 05 	sts	0x0555, r24
		P2_curve_C = Process_curve(GEN_CURVE_C, BIPOLAR, UniversalP2[Config.Curve[GEN_CURVE_C].channel]);	
    b448:	f8 01       	movw	r30, r16
    b44a:	40 81       	ld	r20, Z
    b44c:	51 81       	ldd	r21, Z+1	; 0x01
    b44e:	61 e0       	ldi	r22, 0x01	; 1
    b450:	84 e0       	ldi	r24, 0x04	; 4
    b452:	0e 94 11 57 	call	0xae22	; 0xae22 <Process_curve>
    b456:	90 93 54 05 	sts	0x0554, r25
    b45a:	80 93 53 05 	sts	0x0553, r24
    b45e:	04 c0       	rjmp	.+8      	; 0xb468 <ProcessMixer+0x2fc>
	}
	else
	{
		P2_curve_C = 0;
    b460:	10 92 54 05 	sts	0x0554, r1
    b464:	10 92 53 05 	sts	0x0553, r1
	}
	
	if (Config.Curve[GEN_CURVE_D].channel != NOMIX)
    b468:	80 91 5d 08 	lds	r24, 0x085D
    b46c:	84 31       	cpi	r24, 0x14	; 20
    b46e:	f1 f0       	breq	.+60     	; 0xb4ac <ProcessMixer+0x340>
	{
		P1_curve_D = Process_curve(GEN_CURVE_D, BIPOLAR, UniversalP1[Config.Curve[GEN_CURVE_D].channel]);
    b470:	88 0f       	add	r24, r24
    b472:	99 0b       	sbc	r25, r25
    b474:	8e 01       	movw	r16, r28
    b476:	0f 5f       	subi	r16, 0xFF	; 255
    b478:	1f 4f       	sbci	r17, 0xFF	; 255
    b47a:	08 0f       	add	r16, r24
    b47c:	19 1f       	adc	r17, r25
    b47e:	f8 01       	movw	r30, r16
    b480:	42 a5       	ldd	r20, Z+42	; 0x2a
    b482:	53 a5       	ldd	r21, Z+43	; 0x2b
    b484:	61 e0       	ldi	r22, 0x01	; 1
    b486:	85 e0       	ldi	r24, 0x05	; 5
    b488:	0e 94 11 57 	call	0xae22	; 0xae22 <Process_curve>
    b48c:	90 93 52 05 	sts	0x0552, r25
    b490:	80 93 51 05 	sts	0x0551, r24
		P2_curve_D = Process_curve(GEN_CURVE_D, BIPOLAR, UniversalP2[Config.Curve[GEN_CURVE_D].channel]);
    b494:	f8 01       	movw	r30, r16
    b496:	40 81       	ld	r20, Z
    b498:	51 81       	ldd	r21, Z+1	; 0x01
    b49a:	61 e0       	ldi	r22, 0x01	; 1
    b49c:	85 e0       	ldi	r24, 0x05	; 5
    b49e:	0e 94 11 57 	call	0xae22	; 0xae22 <Process_curve>
    b4a2:	90 93 50 05 	sts	0x0550, r25
    b4a6:	80 93 4f 05 	sts	0x054F, r24
    b4aa:	04 c0       	rjmp	.+8      	; 0xb4b4 <ProcessMixer+0x348>
	}
	else
	{
		P2_curve_D = 0;
    b4ac:	10 92 50 05 	sts	0x0550, r1
    b4b0:	10 92 4f 05 	sts	0x054F, r1
		//************************************************************ 

		// If the user wants earth reference for tail-sitter hover, swap the related stick sources.
		// The secret is understanding WHICH STICK is controlling movement on the AXIS in the selected REFERENCE
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    b4b4:	20 91 a4 06 	lds	r18, 0x06A4
    b4b8:	e0 96       	adiw	r28, 0x30	; 48
    b4ba:	2f af       	std	Y+63, r18	; 0x3f
    b4bc:	e0 97       	sbiw	r28, 0x30	; 48
			P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
			P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;
		}
		
		// P1 gyros
		if (transition < 100)
    b4be:	20 90 37 05 	lds	r2, 0x0537
    b4c2:	30 90 38 05 	lds	r3, 0x0538
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    b4c6:	69 96       	adiw	r28, 0x19	; 25
    b4c8:	2e ad       	ldd	r18, Y+62	; 0x3e
    b4ca:	3f ad       	ldd	r19, Y+63	; 0x3f
    b4cc:	69 97       	sbiw	r28, 0x19	; 25
    b4ce:	31 95       	neg	r19
    b4d0:	21 95       	neg	r18
    b4d2:	31 09       	sbc	r19, r1
    b4d4:	e2 96       	adiw	r28, 0x32	; 50
    b4d6:	3f af       	std	Y+63, r19	; 0x3f
    b4d8:	2e af       	std	Y+62, r18	; 0x3e
    b4da:	e2 97       	sbiw	r28, 0x32	; 50
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    b4dc:	6f 96       	adiw	r28, 0x1f	; 31
    b4de:	2e ad       	ldd	r18, Y+62	; 0x3e
    b4e0:	3f ad       	ldd	r19, Y+63	; 0x3f
    b4e2:	6f 97       	sbiw	r28, 0x1f	; 31
    b4e4:	31 95       	neg	r19
    b4e6:	21 95       	neg	r18
    b4e8:	31 09       	sbc	r19, r1
    b4ea:	e4 96       	adiw	r28, 0x34	; 52
    b4ec:	3f af       	std	Y+63, r19	; 0x3f
    b4ee:	2e af       	std	Y+62, r18	; 0x3e
    b4f0:	e4 97       	sbiw	r28, 0x34	; 52
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    b4f2:	40 91 22 09 	lds	r20, 0x0922
    b4f6:	50 91 23 09 	lds	r21, 0x0923
    b4fa:	a1 96       	adiw	r28, 0x21	; 33
    b4fc:	5f af       	std	Y+63, r21	; 0x3f
    b4fe:	4e af       	std	Y+62, r20	; 0x3e
    b500:	a1 97       	sbiw	r28, 0x21	; 33
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    b502:	20 91 24 09 	lds	r18, 0x0924
    b506:	30 91 25 09 	lds	r19, 0x0925
    b50a:	a3 96       	adiw	r28, 0x23	; 35
    b50c:	3f af       	std	Y+63, r19	; 0x3f
    b50e:	2e af       	std	Y+62, r18	; 0x3e
    b510:	a3 97       	sbiw	r28, 0x23	; 35
				case OFF:
					break;
				case ON:
					if (P1_acc_roll_volume_source < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    b512:	40 91 26 09 	lds	r20, 0x0926
    b516:	50 91 27 09 	lds	r21, 0x0927
    b51a:	a5 96       	adiw	r28, 0x25	; 37
    b51c:	5f af       	std	Y+63, r21	; 0x3f
    b51e:	4e af       	std	Y+62, r20	; 0x3e
    b520:	a5 97       	sbiw	r28, 0x25	; 37
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    b522:	20 91 28 09 	lds	r18, 0x0928
    b526:	30 91 29 09 	lds	r19, 0x0929
    b52a:	a7 96       	adiw	r28, 0x27	; 39
    b52c:	3f af       	std	Y+63, r19	; 0x3f
    b52e:	2e af       	std	Y+62, r18	; 0x3e
    b530:	a7 97       	sbiw	r28, 0x27	; 39
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    b532:	40 91 2a 09 	lds	r20, 0x092A
    b536:	50 91 2b 09 	lds	r21, 0x092B
    b53a:	a9 96       	adiw	r28, 0x29	; 41
    b53c:	5f af       	std	Y+63, r21	; 0x3f
    b53e:	4e af       	std	Y+62, r20	; 0x3e
    b540:	a9 97       	sbiw	r28, 0x29	; 41
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    b542:	20 91 2c 09 	lds	r18, 0x092C
    b546:	30 91 2d 09 	lds	r19, 0x092D
    b54a:	ab 96       	adiw	r28, 0x2b	; 43
    b54c:	3f af       	std	Y+63, r19	; 0x3f
    b54e:	2e af       	std	Y+62, r18	; 0x3e
    b550:	ab 97       	sbiw	r28, 0x2b	; 43
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    b552:	40 91 2e 09 	lds	r20, 0x092E
    b556:	50 91 2f 09 	lds	r21, 0x092F
    b55a:	ad 96       	adiw	r28, 0x2d	; 45
    b55c:	5f af       	std	Y+63, r21	; 0x3f
    b55e:	4e af       	std	Y+62, r20	; 0x3e
    b560:	ad 97       	sbiw	r28, 0x2d	; 45
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    b562:	20 91 30 09 	lds	r18, 0x0930
    b566:	30 91 31 09 	lds	r19, 0x0931
    b56a:	af 96       	adiw	r28, 0x2f	; 47
    b56c:	3f af       	std	Y+63, r19	; 0x3f
    b56e:	2e af       	std	Y+62, r18	; 0x3e
    b570:	af 97       	sbiw	r28, 0x2f	; 47
    b572:	c1 2c       	mov	r12, r1
    b574:	d1 2c       	mov	r13, r1
    b576:	c6 01       	movw	r24, r12
    b578:	88 5e       	subi	r24, 0xE8	; 232
    b57a:	99 4f       	sbci	r25, 0xF9	; 249
		//************************************************************ 

		// If the user wants earth reference for tail-sitter hover, swap the related stick sources.
		// The secret is understanding WHICH STICK is controlling movement on the AXIS in the selected REFERENCE
		// Only need to do this if the orientations differ
		if (Config.P1_Reference != NO_ORIENT)
    b57c:	e0 96       	adiw	r28, 0x30	; 48
    b57e:	3f ad       	ldd	r19, Y+63	; 0x3f
    b580:	e0 97       	sbiw	r28, 0x30	; 48
    b582:	fc 01       	movw	r30, r24
    b584:	33 23       	and	r19, r19
    b586:	a1 f0       	breq	.+40     	; 0xb5b0 <ProcessMixer+0x444>
		{
			// EARTH-Referenced tail-sitter
			if (Config.P1_Reference == EARTH)
    b588:	31 30       	cpi	r19, 0x01	; 1
    b58a:	49 f4       	brne	.+18     	; 0xb59e <ProcessMixer+0x432>
    b58c:	e2 56       	subi	r30, 0x62	; 98
    b58e:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				P1_acc_roll_volume_source = Config.Channel[i].P1_aileron_volume;
    b590:	90 80       	ld	r9, Z
    b592:	34 96       	adiw	r30, 0x04	; 4
				P1_gyro_roll_volume_source = Config.Channel[i].P1_aileron_volume;	// These are always the same
				P1_gyro_yaw_volume_source = Config.Channel[i].P1_rudder_volume;		// These are always the same
    b594:	40 81       	ld	r20, Z
    b596:	66 96       	adiw	r28, 0x16	; 22
    b598:	4f af       	std	Y+63, r20	; 0x3f
    b59a:	66 97       	sbiw	r28, 0x16	; 22
    b59c:	11 c0       	rjmp	.+34     	; 0xb5c0 <ProcessMixer+0x454>
    b59e:	ee 55       	subi	r30, 0x5E	; 94
    b5a0:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			// MODEL-Referenced tail-sitter
			else
			{
				P1_acc_roll_volume_source = Config.Channel[i].P1_rudder_volume;
    b5a2:	90 80       	ld	r9, Z
    b5a4:	34 97       	sbiw	r30, 0x04	; 4
				P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
    b5a6:	80 80       	ld	r8, Z
				P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;			
    b5a8:	66 96       	adiw	r28, 0x16	; 22
    b5aa:	9f ae       	std	Y+63, r9	; 0x3f
    b5ac:	66 97       	sbiw	r28, 0x16	; 22
    b5ae:	09 c0       	rjmp	.+18     	; 0xb5c2 <ProcessMixer+0x456>
    b5b0:	e2 56       	subi	r30, 0x62	; 98
    b5b2:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
		// Normal case
		else
		{
			P1_acc_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
    b5b4:	90 80       	ld	r9, Z
    b5b6:	34 96       	adiw	r30, 0x04	; 4
			P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
			P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;
    b5b8:	50 81       	ld	r21, Z
    b5ba:	66 96       	adiw	r28, 0x16	; 22
    b5bc:	5f af       	std	Y+63, r21	; 0x3f
    b5be:	66 97       	sbiw	r28, 0x16	; 22
		}
		// Normal case
		else
		{
			P1_acc_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
			P1_gyro_roll_volume_source =  Config.Channel[i].P1_aileron_volume;
    b5c0:	89 2c       	mov	r8, r9
			P1_gyro_yaw_volume_source =  Config.Channel[i].P1_rudder_volume;
		}
		
		// P1 gyros
		if (transition < 100)
    b5c2:	84 e6       	ldi	r24, 0x64	; 100
    b5c4:	28 16       	cp	r2, r24
    b5c6:	31 04       	cpc	r3, r1
    b5c8:	0c f0       	brlt	.+2      	; 0xb5cc <ProcessMixer+0x460>
    b5ca:	7c c0       	rjmp	.+248    	; 0xb6c4 <ProcessMixer+0x558>
    b5cc:	86 01       	movw	r16, r12
    b5ce:	08 5e       	subi	r16, 0xE8	; 232
    b5d0:	19 4f       	sbci	r17, 0xF9	; 249
    b5d2:	f8 01       	movw	r30, r16
    b5d4:	ec 55       	subi	r30, 0x5C	; 92
    b5d6:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    b5d8:	80 81       	ld	r24, Z
    b5da:	81 30       	cpi	r24, 0x01	; 1
    b5dc:	91 f0       	breq	.+36     	; 0xb602 <ProcessMixer+0x496>
    b5de:	82 30       	cpi	r24, 0x02	; 2
    b5e0:	b9 f4       	brne	.+46     	; 0xb610 <ProcessMixer+0x4a4>
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], P1_gyro_roll_volume_source * 5); 
    b5e2:	98 2d       	mov	r25, r8
    b5e4:	e5 e0       	ldi	r30, 0x05	; 5
    b5e6:	9e 02       	muls	r25, r30
    b5e8:	b0 01       	movw	r22, r0
    b5ea:	11 24       	eor	r1, r1
    b5ec:	69 96       	adiw	r28, 0x19	; 25
    b5ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    b5f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    b5f2:	69 97       	sbiw	r28, 0x19	; 25
    b5f4:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b5f8:	ee 24       	eor	r14, r14
    b5fa:	ff 24       	eor	r15, r15
    b5fc:	e8 1a       	sub	r14, r24
    b5fe:	f9 0a       	sbc	r15, r25
					break;
    b600:	0e c0       	rjmp	.+28     	; 0xb61e <ProcessMixer+0x4b2>
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (P1_gyro_roll_volume_source < 0 )
    b602:	87 fe       	sbrs	r8, 7
    b604:	08 c0       	rjmp	.+16     	; 0xb616 <ProcessMixer+0x4aa>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    b606:	69 96       	adiw	r28, 0x19	; 25
    b608:	ee ac       	ldd	r14, Y+62	; 0x3e
    b60a:	ff ac       	ldd	r15, Y+63	; 0x3f
    b60c:	69 97       	sbiw	r28, 0x19	; 25
    b60e:	07 c0       	rjmp	.+14     	; 0xb61e <ProcessMixer+0x4b2>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    b610:	e1 2c       	mov	r14, r1
    b612:	f1 2c       	mov	r15, r1
    b614:	04 c0       	rjmp	.+8      	; 0xb61e <ProcessMixer+0x4b2>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    b616:	e2 96       	adiw	r28, 0x32	; 50
    b618:	ee ac       	ldd	r14, Y+62	; 0x3e
    b61a:	ff ac       	ldd	r15, Y+63	; 0x3f
    b61c:	e2 97       	sbiw	r28, 0x32	; 50
    b61e:	f8 01       	movw	r30, r16
    b620:	ea 55       	subi	r30, 0x5A	; 90
    b622:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    b624:	80 81       	ld	r24, Z
    b626:	81 30       	cpi	r24, 0x01	; 1
    b628:	99 f0       	breq	.+38     	; 0xb650 <ProcessMixer+0x4e4>
    b62a:	82 30       	cpi	r24, 0x02	; 2
    b62c:	01 f5       	brne	.+64     	; 0xb66e <ProcessMixer+0x502>
    b62e:	f8 01       	movw	r30, r16
    b630:	e0 56       	subi	r30, 0x60	; 96
    b632:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    b634:	60 81       	ld	r22, Z
    b636:	35 e0       	ldi	r19, 0x05	; 5
    b638:	63 02       	muls	r22, r19
    b63a:	b0 01       	movw	r22, r0
    b63c:	11 24       	eor	r1, r1
    b63e:	6b 96       	adiw	r28, 0x1b	; 27
    b640:	8e ad       	ldd	r24, Y+62	; 0x3e
    b642:	9f ad       	ldd	r25, Y+63	; 0x3f
    b644:	6b 97       	sbiw	r28, 0x1b	; 27
    b646:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b64a:	e8 0e       	add	r14, r24
    b64c:	f9 1e       	adc	r15, r25
					break;
    b64e:	0f c0       	rjmp	.+30     	; 0xb66e <ProcessMixer+0x502>
    b650:	f8 01       	movw	r30, r16
    b652:	e0 56       	subi	r30, 0x60	; 96
    b654:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    b656:	80 81       	ld	r24, Z
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    b658:	6b 96       	adiw	r28, 0x1b	; 27
    b65a:	2e ad       	ldd	r18, Y+62	; 0x3e
    b65c:	3f ad       	ldd	r19, Y+63	; 0x3f
    b65e:	6b 97       	sbiw	r28, 0x1b	; 27
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    b660:	87 ff       	sbrs	r24, 7
    b662:	03 c0       	rjmp	.+6      	; 0xb66a <ProcessMixer+0x4fe>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    b664:	e2 1a       	sub	r14, r18
    b666:	f3 0a       	sbc	r15, r19
    b668:	02 c0       	rjmp	.+4      	; 0xb66e <ProcessMixer+0x502>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    b66a:	e2 0e       	add	r14, r18
    b66c:	f3 1e       	adc	r15, r19
    b66e:	f8 01       	movw	r30, r16
    b670:	e8 55       	subi	r30, 0x58	; 88
    b672:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    b674:	80 81       	ld	r24, Z
    b676:	81 30       	cpi	r24, 0x01	; 1
    b678:	91 f0       	breq	.+36     	; 0xb69e <ProcessMixer+0x532>
    b67a:	82 30       	cpi	r24, 0x02	; 2
    b67c:	f1 f4       	brne	.+60     	; 0xb6ba <ProcessMixer+0x54e>
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], P1_gyro_yaw_volume_source * 5);
    b67e:	66 96       	adiw	r28, 0x16	; 22
    b680:	3f ad       	ldd	r19, Y+63	; 0x3f
    b682:	66 97       	sbiw	r28, 0x16	; 22
    b684:	45 e0       	ldi	r20, 0x05	; 5
    b686:	34 02       	muls	r19, r20
    b688:	b0 01       	movw	r22, r0
    b68a:	11 24       	eor	r1, r1
    b68c:	6d 96       	adiw	r28, 0x1d	; 29
    b68e:	8e ad       	ldd	r24, Y+62	; 0x3e
    b690:	9f ad       	ldd	r25, Y+63	; 0x3f
    b692:	6d 97       	sbiw	r28, 0x1d	; 29
    b694:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b698:	e8 0e       	add	r14, r24
    b69a:	f9 1e       	adc	r15, r25
					break;
    b69c:	0e c0       	rjmp	.+28     	; 0xb6ba <ProcessMixer+0x54e>
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (P1_gyro_yaw_volume_source < 0 )
    b69e:	66 96       	adiw	r28, 0x16	; 22
    b6a0:	4f ad       	ldd	r20, Y+63	; 0x3f
    b6a2:	66 97       	sbiw	r28, 0x16	; 22
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    b6a4:	6d 96       	adiw	r28, 0x1d	; 29
    b6a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    b6a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    b6aa:	6d 97       	sbiw	r28, 0x1d	; 29
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (P1_gyro_yaw_volume_source < 0 )
    b6ac:	47 ff       	sbrs	r20, 7
    b6ae:	03 c0       	rjmp	.+6      	; 0xb6b6 <ProcessMixer+0x54a>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    b6b0:	e2 1a       	sub	r14, r18
    b6b2:	f3 0a       	sbc	r15, r19
    b6b4:	02 c0       	rjmp	.+4      	; 0xb6ba <ProcessMixer+0x54e>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    b6b6:	e2 0e       	add	r14, r18
    b6b8:	f3 1e       	adc	r15, r19
					break;
			}
		}

		// P2 gyros
		if (transition > 0)
    b6ba:	12 14       	cp	r1, r2
    b6bc:	13 04       	cpc	r1, r3
    b6be:	0c f0       	brlt	.+2      	; 0xb6c2 <ProcessMixer+0x556>
    b6c0:	92 c0       	rjmp	.+292    	; 0xb7e6 <ProcessMixer+0x67a>
    b6c2:	02 c0       	rjmp	.+4      	; 0xb6c8 <ProcessMixer+0x55c>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    b6c4:	e1 2c       	mov	r14, r1
    b6c6:	f1 2c       	mov	r15, r1
    b6c8:	c6 01       	movw	r24, r12
    b6ca:	88 5e       	subi	r24, 0xE8	; 232
    b6cc:	99 4f       	sbci	r25, 0xF9	; 249
    b6ce:	5c 01       	movw	r10, r24
    b6d0:	fc 01       	movw	r30, r24
    b6d2:	eb 55       	subi	r30, 0x5B	; 91
    b6d4:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (transition > 0)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    b6d6:	80 81       	ld	r24, Z
    b6d8:	81 30       	cpi	r24, 0x01	; 1
    b6da:	a9 f0       	breq	.+42     	; 0xb706 <ProcessMixer+0x59a>
    b6dc:	82 30       	cpi	r24, 0x02	; 2
    b6de:	f1 f4       	brne	.+60     	; 0xb71c <ProcessMixer+0x5b0>
    b6e0:	f5 01       	movw	r30, r10
    b6e2:	e1 56       	subi	r30, 0x61	; 97
    b6e4:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    b6e6:	60 81       	ld	r22, Z
    b6e8:	95 e0       	ldi	r25, 0x05	; 5
    b6ea:	69 02       	muls	r22, r25
    b6ec:	b0 01       	movw	r22, r0
    b6ee:	11 24       	eor	r1, r1
    b6f0:	6f 96       	adiw	r28, 0x1f	; 31
    b6f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    b6f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    b6f6:	6f 97       	sbiw	r28, 0x1f	; 31
    b6f8:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b6fc:	00 27       	eor	r16, r16
    b6fe:	11 27       	eor	r17, r17
    b700:	08 1b       	sub	r16, r24
    b702:	19 0b       	sbc	r17, r25
					break;
    b704:	12 c0       	rjmp	.+36     	; 0xb72a <ProcessMixer+0x5be>
    b706:	f5 01       	movw	r30, r10
    b708:	e1 56       	subi	r30, 0x61	; 97
    b70a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    b70c:	80 81       	ld	r24, Z
    b70e:	87 fd       	sbrc	r24, 7
    b710:	08 c0       	rjmp	.+16     	; 0xb722 <ProcessMixer+0x5b6>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    b712:	e4 96       	adiw	r28, 0x34	; 52
    b714:	0e ad       	ldd	r16, Y+62	; 0x3e
    b716:	1f ad       	ldd	r17, Y+63	; 0x3f
    b718:	e4 97       	sbiw	r28, 0x34	; 52
    b71a:	07 c0       	rjmp	.+14     	; 0xb72a <ProcessMixer+0x5be>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    b71c:	00 e0       	ldi	r16, 0x00	; 0
    b71e:	10 e0       	ldi	r17, 0x00	; 0
    b720:	04 c0       	rjmp	.+8      	; 0xb72a <ProcessMixer+0x5be>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    b722:	6f 96       	adiw	r28, 0x1f	; 31
    b724:	0e ad       	ldd	r16, Y+62	; 0x3e
    b726:	1f ad       	ldd	r17, Y+63	; 0x3f
    b728:	6f 97       	sbiw	r28, 0x1f	; 31
    b72a:	f5 01       	movw	r30, r10
    b72c:	e9 55       	subi	r30, 0x59	; 89
    b72e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    b730:	80 81       	ld	r24, Z
    b732:	81 30       	cpi	r24, 0x01	; 1
    b734:	99 f0       	breq	.+38     	; 0xb75c <ProcessMixer+0x5f0>
    b736:	82 30       	cpi	r24, 0x02	; 2
    b738:	21 f5       	brne	.+72     	; 0xb782 <ProcessMixer+0x616>
    b73a:	f5 01       	movw	r30, r10
    b73c:	ef 55       	subi	r30, 0x5F	; 95
    b73e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    b740:	60 81       	ld	r22, Z
    b742:	55 e0       	ldi	r21, 0x05	; 5
    b744:	65 02       	muls	r22, r21
    b746:	b0 01       	movw	r22, r0
    b748:	11 24       	eor	r1, r1
    b74a:	a1 96       	adiw	r28, 0x21	; 33
    b74c:	8e ad       	ldd	r24, Y+62	; 0x3e
    b74e:	9f ad       	ldd	r25, Y+63	; 0x3f
    b750:	a1 97       	sbiw	r28, 0x21	; 33
    b752:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b756:	08 0f       	add	r16, r24
    b758:	19 1f       	adc	r17, r25
					break;
    b75a:	13 c0       	rjmp	.+38     	; 0xb782 <ProcessMixer+0x616>
    b75c:	f5 01       	movw	r30, r10
    b75e:	ef 55       	subi	r30, 0x5F	; 95
    b760:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    b762:	80 81       	ld	r24, Z
    b764:	87 ff       	sbrs	r24, 7
    b766:	07 c0       	rjmp	.+14     	; 0xb776 <ProcessMixer+0x60a>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    b768:	a1 96       	adiw	r28, 0x21	; 33
    b76a:	2e ad       	ldd	r18, Y+62	; 0x3e
    b76c:	3f ad       	ldd	r19, Y+63	; 0x3f
    b76e:	a1 97       	sbiw	r28, 0x21	; 33
    b770:	02 1b       	sub	r16, r18
    b772:	13 0b       	sbc	r17, r19
    b774:	06 c0       	rjmp	.+12     	; 0xb782 <ProcessMixer+0x616>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    b776:	a1 96       	adiw	r28, 0x21	; 33
    b778:	4e ad       	ldd	r20, Y+62	; 0x3e
    b77a:	5f ad       	ldd	r21, Y+63	; 0x3f
    b77c:	a1 97       	sbiw	r28, 0x21	; 33
    b77e:	04 0f       	add	r16, r20
    b780:	15 1f       	adc	r17, r21
    b782:	f5 01       	movw	r30, r10
    b784:	e7 55       	subi	r30, 0x57	; 87
    b786:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    b788:	80 81       	ld	r24, Z
    b78a:	81 30       	cpi	r24, 0x01	; 1
    b78c:	99 f0       	breq	.+38     	; 0xb7b4 <ProcessMixer+0x648>
    b78e:	82 30       	cpi	r24, 0x02	; 2
    b790:	21 f5       	brne	.+72     	; 0xb7da <ProcessMixer+0x66e>
    b792:	f5 01       	movw	r30, r10
    b794:	ed 55       	subi	r30, 0x5D	; 93
    b796:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    b798:	60 81       	ld	r22, Z
    b79a:	55 e0       	ldi	r21, 0x05	; 5
    b79c:	65 02       	muls	r22, r21
    b79e:	b0 01       	movw	r22, r0
    b7a0:	11 24       	eor	r1, r1
    b7a2:	a3 96       	adiw	r28, 0x23	; 35
    b7a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    b7a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    b7a8:	a3 97       	sbiw	r28, 0x23	; 35
    b7aa:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b7ae:	08 0f       	add	r16, r24
    b7b0:	19 1f       	adc	r17, r25
					break;
    b7b2:	13 c0       	rjmp	.+38     	; 0xb7da <ProcessMixer+0x66e>
    b7b4:	f5 01       	movw	r30, r10
    b7b6:	ed 55       	subi	r30, 0x5D	; 93
    b7b8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    b7ba:	80 81       	ld	r24, Z
    b7bc:	87 ff       	sbrs	r24, 7
    b7be:	07 c0       	rjmp	.+14     	; 0xb7ce <ProcessMixer+0x662>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    b7c0:	a3 96       	adiw	r28, 0x23	; 35
    b7c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    b7c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    b7c6:	a3 97       	sbiw	r28, 0x23	; 35
    b7c8:	02 1b       	sub	r16, r18
    b7ca:	13 0b       	sbc	r17, r19
    b7cc:	06 c0       	rjmp	.+12     	; 0xb7da <ProcessMixer+0x66e>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    b7ce:	a3 96       	adiw	r28, 0x23	; 35
    b7d0:	4e ad       	ldd	r20, Y+62	; 0x3e
    b7d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    b7d4:	a3 97       	sbiw	r28, 0x23	; 35
    b7d6:	04 0f       	add	r16, r20
    b7d8:	15 1f       	adc	r17, r21

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
    b7da:	84 e6       	ldi	r24, 0x64	; 100
    b7dc:	28 16       	cp	r2, r24
    b7de:	31 04       	cpc	r3, r1
    b7e0:	0c f0       	brlt	.+2      	; 0xb7e4 <ProcessMixer+0x678>
    b7e2:	87 c0       	rjmp	.+270    	; 0xb8f2 <ProcessMixer+0x786>
    b7e4:	02 c0       	rjmp	.+4      	; 0xb7ea <ProcessMixer+0x67e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    b7e6:	00 e0       	ldi	r16, 0x00	; 0
    b7e8:	10 e0       	ldi	r17, 0x00	; 0
    b7ea:	f6 01       	movw	r30, r12
    b7ec:	e8 5e       	subi	r30, 0xE8	; 232
    b7ee:	f9 4f       	sbci	r31, 0xF9	; 249
    b7f0:	5f 01       	movw	r10, r30
    b7f2:	e6 55       	subi	r30, 0x56	; 86
    b7f4:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (transition < 100)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    b7f6:	80 81       	ld	r24, Z
    b7f8:	81 30       	cpi	r24, 0x01	; 1
    b7fa:	81 f0       	breq	.+32     	; 0xb81c <ProcessMixer+0x6b0>
    b7fc:	82 30       	cpi	r24, 0x02	; 2
    b7fe:	e9 f4       	brne	.+58     	; 0xb83a <ProcessMixer+0x6ce>
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], P1_acc_roll_volume_source * 5);
    b800:	59 2d       	mov	r21, r9
    b802:	85 e0       	ldi	r24, 0x05	; 5
    b804:	58 02       	muls	r21, r24
    b806:	b0 01       	movw	r22, r0
    b808:	11 24       	eor	r1, r1
    b80a:	a5 96       	adiw	r28, 0x25	; 37
    b80c:	8e ad       	ldd	r24, Y+62	; 0x3e
    b80e:	9f ad       	ldd	r25, Y+63	; 0x3f
    b810:	a5 97       	sbiw	r28, 0x25	; 37
    b812:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b816:	e8 1a       	sub	r14, r24
    b818:	f9 0a       	sbc	r15, r25
					break;
    b81a:	0f c0       	rjmp	.+30     	; 0xb83a <ProcessMixer+0x6ce>
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (P1_acc_roll_volume_source < 0 )
    b81c:	97 fe       	sbrs	r9, 7
    b81e:	07 c0       	rjmp	.+14     	; 0xb82e <ProcessMixer+0x6c2>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    b820:	a5 96       	adiw	r28, 0x25	; 37
    b822:	2e ad       	ldd	r18, Y+62	; 0x3e
    b824:	3f ad       	ldd	r19, Y+63	; 0x3f
    b826:	a5 97       	sbiw	r28, 0x25	; 37
    b828:	e2 0e       	add	r14, r18
    b82a:	f3 1e       	adc	r15, r19
    b82c:	06 c0       	rjmp	.+12     	; 0xb83a <ProcessMixer+0x6ce>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    b82e:	a5 96       	adiw	r28, 0x25	; 37
    b830:	4e ad       	ldd	r20, Y+62	; 0x3e
    b832:	5f ad       	ldd	r21, Y+63	; 0x3f
    b834:	a5 97       	sbiw	r28, 0x25	; 37
    b836:	e4 1a       	sub	r14, r20
    b838:	f5 0a       	sbc	r15, r21
    b83a:	f5 01       	movw	r30, r10
    b83c:	e4 55       	subi	r30, 0x54	; 84
    b83e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    b840:	80 81       	ld	r24, Z
    b842:	81 30       	cpi	r24, 0x01	; 1
    b844:	99 f0       	breq	.+38     	; 0xb86c <ProcessMixer+0x700>
    b846:	82 30       	cpi	r24, 0x02	; 2
    b848:	21 f5       	brne	.+72     	; 0xb892 <ProcessMixer+0x726>
    b84a:	f5 01       	movw	r30, r10
    b84c:	e0 56       	subi	r30, 0x60	; 96
    b84e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    b850:	60 81       	ld	r22, Z
    b852:	55 e0       	ldi	r21, 0x05	; 5
    b854:	65 02       	muls	r22, r21
    b856:	b0 01       	movw	r22, r0
    b858:	11 24       	eor	r1, r1
    b85a:	a7 96       	adiw	r28, 0x27	; 39
    b85c:	8e ad       	ldd	r24, Y+62	; 0x3e
    b85e:	9f ad       	ldd	r25, Y+63	; 0x3f
    b860:	a7 97       	sbiw	r28, 0x27	; 39
    b862:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b866:	e8 0e       	add	r14, r24
    b868:	f9 1e       	adc	r15, r25
					break;
    b86a:	13 c0       	rjmp	.+38     	; 0xb892 <ProcessMixer+0x726>
    b86c:	f5 01       	movw	r30, r10
    b86e:	e0 56       	subi	r30, 0x60	; 96
    b870:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    b872:	80 81       	ld	r24, Z
    b874:	87 ff       	sbrs	r24, 7
    b876:	07 c0       	rjmp	.+14     	; 0xb886 <ProcessMixer+0x71a>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    b878:	a7 96       	adiw	r28, 0x27	; 39
    b87a:	2e ad       	ldd	r18, Y+62	; 0x3e
    b87c:	3f ad       	ldd	r19, Y+63	; 0x3f
    b87e:	a7 97       	sbiw	r28, 0x27	; 39
    b880:	e2 1a       	sub	r14, r18
    b882:	f3 0a       	sbc	r15, r19
    b884:	06 c0       	rjmp	.+12     	; 0xb892 <ProcessMixer+0x726>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    b886:	a7 96       	adiw	r28, 0x27	; 39
    b888:	4e ad       	ldd	r20, Y+62	; 0x3e
    b88a:	5f ad       	ldd	r21, Y+63	; 0x3f
    b88c:	a7 97       	sbiw	r28, 0x27	; 39
    b88e:	e4 0e       	add	r14, r20
    b890:	f5 1e       	adc	r15, r21
    b892:	f5 01       	movw	r30, r10
    b894:	e2 55       	subi	r30, 0x52	; 82
    b896:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    b898:	80 81       	ld	r24, Z
    b89a:	81 30       	cpi	r24, 0x01	; 1
    b89c:	99 f0       	breq	.+38     	; 0xb8c4 <ProcessMixer+0x758>
    b89e:	82 30       	cpi	r24, 0x02	; 2
    b8a0:	21 f5       	brne	.+72     	; 0xb8ea <ProcessMixer+0x77e>
    b8a2:	f5 01       	movw	r30, r10
    b8a4:	e5 56       	subi	r30, 0x65	; 101
    b8a6:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    b8a8:	60 81       	ld	r22, Z
    b8aa:	55 e0       	ldi	r21, 0x05	; 5
    b8ac:	65 02       	muls	r22, r21
    b8ae:	b0 01       	movw	r22, r0
    b8b0:	11 24       	eor	r1, r1
    b8b2:	a9 96       	adiw	r28, 0x29	; 41
    b8b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    b8b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    b8b8:	a9 97       	sbiw	r28, 0x29	; 41
    b8ba:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b8be:	e8 1a       	sub	r14, r24
    b8c0:	f9 0a       	sbc	r15, r25
					break;
    b8c2:	13 c0       	rjmp	.+38     	; 0xb8ea <ProcessMixer+0x77e>
    b8c4:	f5 01       	movw	r30, r10
    b8c6:	e5 56       	subi	r30, 0x65	; 101
    b8c8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    b8ca:	80 81       	ld	r24, Z
    b8cc:	87 ff       	sbrs	r24, 7
    b8ce:	07 c0       	rjmp	.+14     	; 0xb8de <ProcessMixer+0x772>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    b8d0:	a9 96       	adiw	r28, 0x29	; 41
    b8d2:	2e ad       	ldd	r18, Y+62	; 0x3e
    b8d4:	3f ad       	ldd	r19, Y+63	; 0x3f
    b8d6:	a9 97       	sbiw	r28, 0x29	; 41
    b8d8:	e2 0e       	add	r14, r18
    b8da:	f3 1e       	adc	r15, r19
    b8dc:	06 c0       	rjmp	.+12     	; 0xb8ea <ProcessMixer+0x77e>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    b8de:	a9 96       	adiw	r28, 0x29	; 41
    b8e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    b8e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    b8e4:	a9 97       	sbiw	r28, 0x29	; 41
    b8e6:	e4 1a       	sub	r14, r20
    b8e8:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (transition > 0)
    b8ea:	12 14       	cp	r1, r2
    b8ec:	13 04       	cpc	r1, r3
    b8ee:	0c f0       	brlt	.+2      	; 0xb8f2 <ProcessMixer+0x786>
    b8f0:	8d c0       	rjmp	.+282    	; 0xba0c <ProcessMixer+0x8a0>
    b8f2:	c6 01       	movw	r24, r12
    b8f4:	88 5e       	subi	r24, 0xE8	; 232
    b8f6:	99 4f       	sbci	r25, 0xF9	; 249
    b8f8:	5c 01       	movw	r10, r24
    b8fa:	fc 01       	movw	r30, r24
    b8fc:	e5 55       	subi	r30, 0x55	; 85
    b8fe:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    b900:	80 81       	ld	r24, Z
    b902:	81 30       	cpi	r24, 0x01	; 1
    b904:	99 f0       	breq	.+38     	; 0xb92c <ProcessMixer+0x7c0>
    b906:	82 30       	cpi	r24, 0x02	; 2
    b908:	21 f5       	brne	.+72     	; 0xb952 <ProcessMixer+0x7e6>
    b90a:	f5 01       	movw	r30, r10
    b90c:	e1 56       	subi	r30, 0x61	; 97
    b90e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    b910:	60 81       	ld	r22, Z
    b912:	55 e0       	ldi	r21, 0x05	; 5
    b914:	65 02       	muls	r22, r21
    b916:	b0 01       	movw	r22, r0
    b918:	11 24       	eor	r1, r1
    b91a:	ab 96       	adiw	r28, 0x2b	; 43
    b91c:	8e ad       	ldd	r24, Y+62	; 0x3e
    b91e:	9f ad       	ldd	r25, Y+63	; 0x3f
    b920:	ab 97       	sbiw	r28, 0x2b	; 43
    b922:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b926:	08 1b       	sub	r16, r24
    b928:	19 0b       	sbc	r17, r25
					break;
    b92a:	13 c0       	rjmp	.+38     	; 0xb952 <ProcessMixer+0x7e6>
    b92c:	f5 01       	movw	r30, r10
    b92e:	e1 56       	subi	r30, 0x61	; 97
    b930:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    b932:	80 81       	ld	r24, Z
    b934:	87 ff       	sbrs	r24, 7
    b936:	07 c0       	rjmp	.+14     	; 0xb946 <ProcessMixer+0x7da>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    b938:	ab 96       	adiw	r28, 0x2b	; 43
    b93a:	2e ad       	ldd	r18, Y+62	; 0x3e
    b93c:	3f ad       	ldd	r19, Y+63	; 0x3f
    b93e:	ab 97       	sbiw	r28, 0x2b	; 43
    b940:	02 0f       	add	r16, r18
    b942:	13 1f       	adc	r17, r19
    b944:	06 c0       	rjmp	.+12     	; 0xb952 <ProcessMixer+0x7e6>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    b946:	ab 96       	adiw	r28, 0x2b	; 43
    b948:	4e ad       	ldd	r20, Y+62	; 0x3e
    b94a:	5f ad       	ldd	r21, Y+63	; 0x3f
    b94c:	ab 97       	sbiw	r28, 0x2b	; 43
    b94e:	04 1b       	sub	r16, r20
    b950:	15 0b       	sbc	r17, r21
    b952:	f5 01       	movw	r30, r10
    b954:	e3 55       	subi	r30, 0x53	; 83
    b956:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    b958:	80 81       	ld	r24, Z
    b95a:	81 30       	cpi	r24, 0x01	; 1
    b95c:	99 f0       	breq	.+38     	; 0xb984 <ProcessMixer+0x818>
    b95e:	82 30       	cpi	r24, 0x02	; 2
    b960:	21 f5       	brne	.+72     	; 0xb9aa <ProcessMixer+0x83e>
    b962:	f5 01       	movw	r30, r10
    b964:	ef 55       	subi	r30, 0x5F	; 95
    b966:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    b968:	60 81       	ld	r22, Z
    b96a:	55 e0       	ldi	r21, 0x05	; 5
    b96c:	65 02       	muls	r22, r21
    b96e:	b0 01       	movw	r22, r0
    b970:	11 24       	eor	r1, r1
    b972:	ad 96       	adiw	r28, 0x2d	; 45
    b974:	8e ad       	ldd	r24, Y+62	; 0x3e
    b976:	9f ad       	ldd	r25, Y+63	; 0x3f
    b978:	ad 97       	sbiw	r28, 0x2d	; 45
    b97a:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b97e:	08 0f       	add	r16, r24
    b980:	19 1f       	adc	r17, r25
					break;
    b982:	13 c0       	rjmp	.+38     	; 0xb9aa <ProcessMixer+0x83e>
    b984:	f5 01       	movw	r30, r10
    b986:	ef 55       	subi	r30, 0x5F	; 95
    b988:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    b98a:	80 81       	ld	r24, Z
    b98c:	87 ff       	sbrs	r24, 7
    b98e:	07 c0       	rjmp	.+14     	; 0xb99e <ProcessMixer+0x832>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    b990:	ad 96       	adiw	r28, 0x2d	; 45
    b992:	2e ad       	ldd	r18, Y+62	; 0x3e
    b994:	3f ad       	ldd	r19, Y+63	; 0x3f
    b996:	ad 97       	sbiw	r28, 0x2d	; 45
    b998:	02 1b       	sub	r16, r18
    b99a:	13 0b       	sbc	r17, r19
    b99c:	06 c0       	rjmp	.+12     	; 0xb9aa <ProcessMixer+0x83e>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    b99e:	ad 96       	adiw	r28, 0x2d	; 45
    b9a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    b9a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    b9a4:	ad 97       	sbiw	r28, 0x2d	; 45
    b9a6:	04 0f       	add	r16, r20
    b9a8:	15 1f       	adc	r17, r21
    b9aa:	f5 01       	movw	r30, r10
    b9ac:	e1 55       	subi	r30, 0x51	; 81
    b9ae:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    b9b0:	80 81       	ld	r24, Z
    b9b2:	81 30       	cpi	r24, 0x01	; 1
    b9b4:	99 f0       	breq	.+38     	; 0xb9dc <ProcessMixer+0x870>
    b9b6:	82 30       	cpi	r24, 0x02	; 2
    b9b8:	21 f5       	brne	.+72     	; 0xba02 <ProcessMixer+0x896>
    b9ba:	f5 01       	movw	r30, r10
    b9bc:	e4 56       	subi	r30, 0x64	; 100
    b9be:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    b9c0:	60 81       	ld	r22, Z
    b9c2:	55 e0       	ldi	r21, 0x05	; 5
    b9c4:	65 02       	muls	r22, r21
    b9c6:	b0 01       	movw	r22, r0
    b9c8:	11 24       	eor	r1, r1
    b9ca:	af 96       	adiw	r28, 0x2f	; 47
    b9cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    b9ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    b9d0:	af 97       	sbiw	r28, 0x2f	; 47
    b9d2:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    b9d6:	08 1b       	sub	r16, r24
    b9d8:	19 0b       	sbc	r17, r25
					break;
    b9da:	13 c0       	rjmp	.+38     	; 0xba02 <ProcessMixer+0x896>
    b9dc:	f5 01       	movw	r30, r10
    b9de:	e4 56       	subi	r30, 0x64	; 100
    b9e0:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    b9e2:	80 81       	ld	r24, Z
    b9e4:	87 ff       	sbrs	r24, 7
    b9e6:	07 c0       	rjmp	.+14     	; 0xb9f6 <ProcessMixer+0x88a>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    b9e8:	af 96       	adiw	r28, 0x2f	; 47
    b9ea:	2e ad       	ldd	r18, Y+62	; 0x3e
    b9ec:	3f ad       	ldd	r19, Y+63	; 0x3f
    b9ee:	af 97       	sbiw	r28, 0x2f	; 47
    b9f0:	02 0f       	add	r16, r18
    b9f2:	13 1f       	adc	r17, r19
    b9f4:	06 c0       	rjmp	.+12     	; 0xba02 <ProcessMixer+0x896>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    b9f6:	af 96       	adiw	r28, 0x2f	; 47
    b9f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    b9fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    b9fc:	af 97       	sbiw	r28, 0x2f	; 47
    b9fe:	04 1b       	sub	r16, r20
    ba00:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (transition < 100)
    ba02:	84 e6       	ldi	r24, 0x64	; 100
    ba04:	28 16       	cp	r2, r24
    ba06:	31 04       	cpc	r3, r1
    ba08:	0c f0       	brlt	.+2      	; 0xba0c <ProcessMixer+0x8a0>
    ba0a:	6d c0       	rjmp	.+218    	; 0xbae6 <ProcessMixer+0x97a>
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume != 0) 					// Mix in dedicated aileron
    ba0c:	88 20       	and	r8, r8
    ba0e:	61 f0       	breq	.+24     	; 0xba28 <ProcessMixer+0x8bc>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    ba10:	80 91 46 09 	lds	r24, 0x0946
    ba14:	90 91 47 09 	lds	r25, 0x0947
    ba18:	68 2d       	mov	r22, r8
    ba1a:	77 27       	eor	r23, r23
    ba1c:	67 fd       	sbrc	r22, 7
    ba1e:	70 95       	com	r23
    ba20:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
				P1_solution = P1_solution + temp2;
    ba24:	e8 0e       	add	r14, r24
    ba26:	f9 1e       	adc	r15, r25
    ba28:	f6 01       	movw	r30, r12
    ba2a:	e8 5e       	subi	r30, 0xE8	; 232
    ba2c:	f9 4f       	sbci	r31, 0xF9	; 249
    ba2e:	5f 01       	movw	r10, r30
    ba30:	e0 56       	subi	r30, 0x60	; 96
    ba32:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume != 0) 					// Mix in dedicated elevator
    ba34:	60 81       	ld	r22, Z
    ba36:	66 23       	and	r22, r22
    ba38:	59 f0       	breq	.+22     	; 0xba50 <ProcessMixer+0x8e4>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    ba3a:	80 91 48 09 	lds	r24, 0x0948
    ba3e:	90 91 49 09 	lds	r25, 0x0949
    ba42:	77 27       	eor	r23, r23
    ba44:	67 fd       	sbrc	r22, 7
    ba46:	70 95       	com	r23
    ba48:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
				P1_solution = P1_solution + temp2;
    ba4c:	e8 0e       	add	r14, r24
    ba4e:	f9 1e       	adc	r15, r25
			}
			if (Config.Channel[i].P1_rudder_volume != 0) 					// Mix in dedicated rudder
    ba50:	66 96       	adiw	r28, 0x16	; 22
    ba52:	2f ad       	ldd	r18, Y+63	; 0x3f
    ba54:	66 97       	sbiw	r28, 0x16	; 22
    ba56:	22 23       	and	r18, r18
    ba58:	61 f0       	breq	.+24     	; 0xba72 <ProcessMixer+0x906>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    ba5a:	80 91 4a 09 	lds	r24, 0x094A
    ba5e:	90 91 4b 09 	lds	r25, 0x094B
    ba62:	62 2f       	mov	r22, r18
    ba64:	77 27       	eor	r23, r23
    ba66:	67 fd       	sbrc	r22, 7
    ba68:	70 95       	com	r23
    ba6a:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
				P1_solution = P1_solution + temp2;
    ba6e:	e8 0e       	add	r14, r24
    ba70:	f9 1e       	adc	r15, r25
    ba72:	f5 01       	movw	r30, r10
    ba74:	ef 54       	subi	r30, 0x4F	; 79
    ba76:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume != 0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    ba78:	60 81       	ld	r22, Z
    ba7a:	66 23       	and	r22, r22
    ba7c:	a9 f0       	breq	.+42     	; 0xbaa8 <ProcessMixer+0x93c>
    ba7e:	31 97       	sbiw	r30, 0x01	; 1
    ba80:	e0 81       	ld	r30, Z
    ba82:	e4 31       	cpi	r30, 0x14	; 20
    ba84:	89 f0       	breq	.+34     	; 0xbaa8 <ProcessMixer+0x93c>
			{
				temp2 = UniversalP1[Config.Channel[i].P1_source_a];
    ba86:	ee 0f       	add	r30, r30
    ba88:	ff 0b       	sbc	r31, r31
    ba8a:	41 e0       	ldi	r20, 0x01	; 1
    ba8c:	50 e0       	ldi	r21, 0x00	; 0
    ba8e:	4c 0f       	add	r20, r28
    ba90:	5d 1f       	adc	r21, r29
    ba92:	e4 0f       	add	r30, r20
    ba94:	f5 1f       	adc	r31, r21
				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    ba96:	77 27       	eor	r23, r23
    ba98:	67 fd       	sbrc	r22, 7
    ba9a:	70 95       	com	r23
    ba9c:	82 a5       	ldd	r24, Z+42	; 0x2a
    ba9e:	93 a5       	ldd	r25, Z+43	; 0x2b
    baa0:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
				P1_solution = P1_solution + temp2;
    baa4:	e8 0e       	add	r14, r24
    baa6:	f9 1e       	adc	r15, r25
    baa8:	f5 01       	movw	r30, r10
    baaa:	eb 54       	subi	r30, 0x4B	; 75
    baac:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume != 0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    baae:	60 81       	ld	r22, Z
    bab0:	66 23       	and	r22, r22
    bab2:	a9 f0       	breq	.+42     	; 0xbade <ProcessMixer+0x972>
    bab4:	31 97       	sbiw	r30, 0x01	; 1
    bab6:	e0 81       	ld	r30, Z
    bab8:	e4 31       	cpi	r30, 0x14	; 20
    baba:	89 f0       	breq	.+34     	; 0xbade <ProcessMixer+0x972>
			{
				temp2 = UniversalP1[Config.Channel[i].P1_source_b];
    babc:	ee 0f       	add	r30, r30
    babe:	ff 0b       	sbc	r31, r31
    bac0:	81 e0       	ldi	r24, 0x01	; 1
    bac2:	90 e0       	ldi	r25, 0x00	; 0
    bac4:	8c 0f       	add	r24, r28
    bac6:	9d 1f       	adc	r25, r29
    bac8:	e8 0f       	add	r30, r24
    baca:	f9 1f       	adc	r31, r25
				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    bacc:	77 27       	eor	r23, r23
    bace:	67 fd       	sbrc	r22, 7
    bad0:	70 95       	com	r23
    bad2:	82 a5       	ldd	r24, Z+42	; 0x2a
    bad4:	93 a5       	ldd	r25, Z+43	; 0x2b
    bad6:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
				P1_solution = P1_solution + temp2;
    bada:	e8 0e       	add	r14, r24
    badc:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (transition > 0)	
    bade:	12 14       	cp	r1, r2
    bae0:	13 04       	cpc	r1, r3
    bae2:	0c f0       	brlt	.+2      	; 0xbae6 <ProcessMixer+0x97a>
    bae4:	6c c0       	rjmp	.+216    	; 0xbbbe <ProcessMixer+0xa52>
    bae6:	f6 01       	movw	r30, r12
    bae8:	e8 5e       	subi	r30, 0xE8	; 232
    baea:	f9 4f       	sbci	r31, 0xF9	; 249
    baec:	5f 01       	movw	r10, r30
    baee:	e1 56       	subi	r30, 0x61	; 97
    baf0:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume != 0) 					// Mix in dedicated aileron
    baf2:	60 81       	ld	r22, Z
    baf4:	66 23       	and	r22, r22
    baf6:	59 f0       	breq	.+22     	; 0xbb0e <ProcessMixer+0x9a2>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    baf8:	80 91 46 09 	lds	r24, 0x0946
    bafc:	90 91 47 09 	lds	r25, 0x0947
    bb00:	77 27       	eor	r23, r23
    bb02:	67 fd       	sbrc	r22, 7
    bb04:	70 95       	com	r23
    bb06:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
				P2_solution = P2_solution + temp2;
    bb0a:	08 0f       	add	r16, r24
    bb0c:	19 1f       	adc	r17, r25
    bb0e:	f5 01       	movw	r30, r10
    bb10:	ef 55       	subi	r30, 0x5F	; 95
    bb12:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume != 0) 					// Mix in dedicated elevator
    bb14:	60 81       	ld	r22, Z
    bb16:	66 23       	and	r22, r22
    bb18:	59 f0       	breq	.+22     	; 0xbb30 <ProcessMixer+0x9c4>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    bb1a:	80 91 48 09 	lds	r24, 0x0948
    bb1e:	90 91 49 09 	lds	r25, 0x0949
    bb22:	77 27       	eor	r23, r23
    bb24:	67 fd       	sbrc	r22, 7
    bb26:	70 95       	com	r23
    bb28:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
				P2_solution = P2_solution + temp2;
    bb2c:	08 0f       	add	r16, r24
    bb2e:	19 1f       	adc	r17, r25
    bb30:	f5 01       	movw	r30, r10
    bb32:	ed 55       	subi	r30, 0x5D	; 93
    bb34:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume != 0) 					// Mix in dedicated rudder
    bb36:	60 81       	ld	r22, Z
    bb38:	66 23       	and	r22, r22
    bb3a:	59 f0       	breq	.+22     	; 0xbb52 <ProcessMixer+0x9e6>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    bb3c:	80 91 4a 09 	lds	r24, 0x094A
    bb40:	90 91 4b 09 	lds	r25, 0x094B
    bb44:	77 27       	eor	r23, r23
    bb46:	67 fd       	sbrc	r22, 7
    bb48:	70 95       	com	r23
    bb4a:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
				P2_solution = P2_solution + temp2;
    bb4e:	08 0f       	add	r16, r24
    bb50:	19 1f       	adc	r17, r25
    bb52:	f5 01       	movw	r30, r10
    bb54:	ed 54       	subi	r30, 0x4D	; 77
    bb56:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume != 0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    bb58:	60 81       	ld	r22, Z
    bb5a:	66 23       	and	r22, r22
    bb5c:	a9 f0       	breq	.+42     	; 0xbb88 <ProcessMixer+0xa1c>
    bb5e:	31 97       	sbiw	r30, 0x01	; 1
    bb60:	e0 81       	ld	r30, Z
    bb62:	e4 31       	cpi	r30, 0x14	; 20
    bb64:	89 f0       	breq	.+34     	; 0xbb88 <ProcessMixer+0xa1c>
			{
				temp2 = UniversalP2[Config.Channel[i].P2_source_a];
    bb66:	ee 0f       	add	r30, r30
    bb68:	ff 0b       	sbc	r31, r31
    bb6a:	21 e0       	ldi	r18, 0x01	; 1
    bb6c:	30 e0       	ldi	r19, 0x00	; 0
    bb6e:	2c 0f       	add	r18, r28
    bb70:	3d 1f       	adc	r19, r29
    bb72:	e2 0f       	add	r30, r18
    bb74:	f3 1f       	adc	r31, r19
				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    bb76:	77 27       	eor	r23, r23
    bb78:	67 fd       	sbrc	r22, 7
    bb7a:	70 95       	com	r23
    bb7c:	80 81       	ld	r24, Z
    bb7e:	91 81       	ldd	r25, Z+1	; 0x01
    bb80:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
				P2_solution = P2_solution + temp2;
    bb84:	08 0f       	add	r16, r24
    bb86:	19 1f       	adc	r17, r25
    bb88:	f5 01       	movw	r30, r10
    bb8a:	e9 54       	subi	r30, 0x49	; 73
    bb8c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume != 0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    bb8e:	60 81       	ld	r22, Z
    bb90:	66 23       	and	r22, r22
    bb92:	a9 f0       	breq	.+42     	; 0xbbbe <ProcessMixer+0xa52>
    bb94:	31 97       	sbiw	r30, 0x01	; 1
    bb96:	e0 81       	ld	r30, Z
    bb98:	e4 31       	cpi	r30, 0x14	; 20
    bb9a:	89 f0       	breq	.+34     	; 0xbbbe <ProcessMixer+0xa52>
			{
				temp2 = UniversalP2[Config.Channel[i].P2_source_b];
    bb9c:	ee 0f       	add	r30, r30
    bb9e:	ff 0b       	sbc	r31, r31
    bba0:	41 e0       	ldi	r20, 0x01	; 1
    bba2:	50 e0       	ldi	r21, 0x00	; 0
    bba4:	4c 0f       	add	r20, r28
    bba6:	5d 1f       	adc	r21, r29
    bba8:	e4 0f       	add	r30, r20
    bbaa:	f5 1f       	adc	r31, r21
				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    bbac:	77 27       	eor	r23, r23
    bbae:	67 fd       	sbrc	r22, 7
    bbb0:	70 95       	com	r23
    bbb2:	80 81       	ld	r24, Z
    bbb4:	91 81       	ldd	r25, Z+1	; 0x01
    bbb6:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
				P2_solution = P2_solution + temp2;
    bbba:	08 0f       	add	r16, r24
    bbbc:	19 1f       	adc	r17, r25
    bbbe:	c6 01       	movw	r24, r12
    bbc0:	88 5e       	subi	r24, 0xE8	; 232
    bbc2:	99 4f       	sbci	r25, 0xF9	; 249
    bbc4:	fc 01       	movw	r30, r24
    bbc6:	ea 56       	subi	r30, 0x6A	; 106
    bbc8:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    bbca:	f1 82       	std	Z+1, r15	; 0x01
    bbcc:	e0 82       	st	Z, r14
    bbce:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    bbd0:	11 83       	std	Z+1, r17	; 0x01
    bbd2:	00 83       	st	Z, r16
    bbd4:	52 e2       	ldi	r21, 0x22	; 34
    bbd6:	c5 0e       	add	r12, r21
    bbd8:	d1 1c       	adc	r13, r1
	
	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    bbda:	80 e1       	ldi	r24, 0x10	; 16
    bbdc:	c8 16       	cp	r12, r24
    bbde:	81 e0       	ldi	r24, 0x01	; 1
    bbe0:	d8 06       	cpc	r13, r24
    bbe2:	09 f0       	breq	.+2      	; 0xbbe6 <ProcessMixer+0xa7a>
    bbe4:	c8 cc       	rjmp	.-1648   	; 0xb576 <ProcessMixer+0x40a>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeedOut != 0) 
    bbe6:	80 91 46 06 	lds	r24, 0x0646
    bbea:	88 23       	and	r24, r24
    bbec:	41 f0       	breq	.+16     	; 0xbbfe <ProcessMixer+0xa92>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    bbee:	80 91 3b 05 	lds	r24, 0x053B
    bbf2:	90 91 3c 05 	lds	r25, 0x053C
    bbf6:	90 93 38 05 	sts	0x0538, r25
    bbfa:	80 93 37 05 	sts	0x0537, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    bbfe:	00 91 37 05 	lds	r16, 0x0537
    bc02:	10 91 38 05 	lds	r17, 0x0538
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    bc06:	54 e6       	ldi	r21, 0x64	; 100
    bc08:	c5 2e       	mov	r12, r21
    bc0a:	d1 2c       	mov	r13, r1
    bc0c:	c0 1a       	sub	r12, r16
    bc0e:	d1 0a       	sbc	r13, r17
    bc10:	6e ea       	ldi	r22, 0xAE	; 174
    bc12:	e6 2e       	mov	r14, r22
    bc14:	66 e0       	ldi	r22, 0x06	; 6
    bc16:	f6 2e       	mov	r15, r22

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    bc18:	01 15       	cp	r16, r1
    bc1a:	11 05       	cpc	r17, r1
    bc1c:	21 f4       	brne	.+8      	; 0xbc26 <ProcessMixer+0xaba>
		{
			temp1 = Config.Channel[i].P1_value;
    bc1e:	f7 01       	movw	r30, r14
    bc20:	80 81       	ld	r24, Z
    bc22:	91 81       	ldd	r25, Z+1	; 0x01
    bc24:	16 c0       	rjmp	.+44     	; 0xbc52 <ProcessMixer+0xae6>
		}
		else if (transition >= 100)
    bc26:	04 36       	cpi	r16, 0x64	; 100
    bc28:	11 05       	cpc	r17, r1
    bc2a:	24 f0       	brlt	.+8      	; 0xbc34 <ProcessMixer+0xac8>
		{
			temp1 = Config.Channel[i].P2_value;
    bc2c:	f7 01       	movw	r30, r14
    bc2e:	82 81       	ldd	r24, Z+2	; 0x02
    bc30:	93 81       	ldd	r25, Z+3	; 0x03
    bc32:	0f c0       	rjmp	.+30     	; 0xbc52 <ProcessMixer+0xae6>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    bc34:	b6 01       	movw	r22, r12
    bc36:	f7 01       	movw	r30, r14
    bc38:	80 81       	ld	r24, Z
    bc3a:	91 81       	ldd	r25, Z+1	; 0x01
    bc3c:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>
    bc40:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    bc42:	b8 01       	movw	r22, r16
    bc44:	f7 01       	movw	r30, r14
    bc46:	82 81       	ldd	r24, Z+2	; 0x02
    bc48:	93 81       	ldd	r25, Z+3	; 0x03
    bc4a:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    bc4e:	8a 0d       	add	r24, r10
    bc50:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    bc52:	f7 01       	movw	r30, r14
    bc54:	91 83       	std	Z+1, r25	; 0x01
    bc56:	80 83       	st	Z, r24
    bc58:	f2 e2       	ldi	r31, 0x22	; 34
    bc5a:	ef 0e       	add	r14, r31
    bc5c:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    bc5e:	2e eb       	ldi	r18, 0xBE	; 190
    bc60:	e2 16       	cp	r14, r18
    bc62:	27 e0       	ldi	r18, 0x07	; 7
    bc64:	f2 06       	cpc	r15, r18
    bc66:	c1 f6       	brne	.-80     	; 0xbc18 <ProcessMixer+0xaac>
	// Work out the resultant Monopolar throttle value based on
	// P1_throttle, P2_throttle and the transition number
	//************************************************************ 

	// Only process if there is a difference
	if (P1_throttle != P2_throttle)
    bc68:	46 14       	cp	r4, r6
    bc6a:	57 04       	cpc	r5, r7
    bc6c:	a1 f1       	breq	.+104    	; 0xbcd6 <ProcessMixer+0xb6a>
	{
		// Speed up the easy ones :)
		if (transition == 0)
    bc6e:	01 15       	cp	r16, r1
    bc70:	11 05       	cpc	r17, r1
    bc72:	89 f1       	breq	.+98     	; 0xbcd6 <ProcessMixer+0xb6a>
		{
			e32temp3 = P1_throttle;
		}
		else if (transition >= 100)
    bc74:	04 36       	cpi	r16, 0x64	; 100
    bc76:	11 05       	cpc	r17, r1
    bc78:	34 f0       	brlt	.+12     	; 0xbc86 <ProcessMixer+0xb1a>
		{
			e32temp3 = P2_throttle;
    bc7a:	23 01       	movw	r4, r6
    bc7c:	66 24       	eor	r6, r6
    bc7e:	57 fc       	sbrc	r5, 7
    bc80:	60 94       	com	r6
    bc82:	76 2c       	mov	r7, r6
    bc84:	2c c0       	rjmp	.+88     	; 0xbcde <ProcessMixer+0xb72>
		}
		else
		{
			// Calculate step difference in 1/100ths and round
			e32temp1 = (P2_throttle - P1_throttle);
    bc86:	b3 01       	movw	r22, r6
    bc88:	64 19       	sub	r22, r4
    bc8a:	75 09       	sbc	r23, r5
    bc8c:	cb 01       	movw	r24, r22
    bc8e:	aa 27       	eor	r26, r26
    bc90:	97 fd       	sbrc	r25, 7
    bc92:	a0 95       	com	r26
    bc94:	ba 2f       	mov	r27, r26
			e32temp1 = e32temp1 << 16; 						// Multiply by 65536 so divide gives reasonable step values
			e32Step1 = e32temp1 / (int32_t)100;

			// Set start (P1) point
			e32temp2 = P1_throttle;							// Promote to 32 bits
    bc96:	66 24       	eor	r6, r6
    bc98:	57 fc       	sbrc	r5, 7
    bc9a:	60 94       	com	r6
    bc9c:	76 2c       	mov	r7, r6
			e32temp2 = e32temp2 << 16;
    bc9e:	32 01       	movw	r6, r4
    bca0:	55 24       	eor	r5, r5
    bca2:	44 24       	eor	r4, r4
		}
		else
		{
			// Calculate step difference in 1/100ths and round
			e32temp1 = (P2_throttle - P1_throttle);
			e32temp1 = e32temp1 << 16; 						// Multiply by 65536 so divide gives reasonable step values
    bca4:	77 27       	eor	r23, r23
    bca6:	66 27       	eor	r22, r22
			e32Step1 = e32temp1 / (int32_t)100;
    bca8:	24 e6       	ldi	r18, 0x64	; 100
    bcaa:	30 e0       	ldi	r19, 0x00	; 0
    bcac:	40 e0       	ldi	r20, 0x00	; 0
    bcae:	50 e0       	ldi	r21, 0x00	; 0
    bcb0:	0e 94 4e 6c 	call	0xd89c	; 0xd89c <__divmodsi4>
			// Set start (P1) point
			e32temp2 = P1_throttle;							// Promote to 32 bits
			e32temp2 = e32temp2 << 16;

			// Multiply [transition] steps (0 to 100)
			e32temp3 = e32temp2 + (e32Step1 * transition);
    bcb4:	d8 01       	movw	r26, r16
    bcb6:	0e 94 9c 6c 	call	0xd938	; 0xd938 <__mulshisi3>
    bcba:	46 0e       	add	r4, r22
    bcbc:	57 1e       	adc	r5, r23
    bcbe:	68 1e       	adc	r6, r24
    bcc0:	79 1e       	adc	r7, r25

			// Round, then rescale to normal value
			e32temp3 = e32temp3 + (int32_t)32768;
    bcc2:	30 e8       	ldi	r19, 0x80	; 128
    bcc4:	53 0e       	add	r5, r19
    bcc6:	61 1c       	adc	r6, r1
    bcc8:	71 1c       	adc	r7, r1
			e32temp3 = e32temp3 >> 16;			
    bcca:	23 01       	movw	r4, r6
    bccc:	77 24       	eor	r7, r7
    bcce:	57 fc       	sbrc	r5, 7
    bcd0:	70 94       	com	r7
    bcd2:	67 2c       	mov	r6, r7
    bcd4:	04 c0       	rjmp	.+8      	; 0xbcde <ProcessMixer+0xb72>
			
	// No curve
	else
	{
		// Just use the value of P1_throttle as there is no curve
		e32temp3 = P1_throttle; // Promote to 16 bits
    bcd6:	66 24       	eor	r6, r6
    bcd8:	57 fc       	sbrc	r5, 7
    bcda:	60 94       	com	r6
    bcdc:	76 2c       	mov	r7, r6
    bcde:	64 eb       	ldi	r22, 0xB4	; 180
    bce0:	c6 2e       	mov	r12, r22
    bce2:	66 e0       	ldi	r22, 0x06	; 6
    bce4:	d6 2e       	mov	r13, r22
    bce6:	75 eb       	ldi	r23, 0xB5	; 181
    bce8:	87 2e       	mov	r8, r23
    bcea:	76 e0       	ldi	r23, 0x06	; 6
    bcec:	97 2e       	mov	r9, r23
	}

	// Copy to monopolar throttle
	monothrottle = (int16_t)e32temp3;
    bcee:	ee ea       	ldi	r30, 0xAE	; 174
    bcf0:	ee 2e       	mov	r14, r30
    bcf2:	e6 e0       	ldi	r30, 0x06	; 6
    bcf4:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    bcf6:	f4 e6       	ldi	r31, 0x64	; 100
    bcf8:	af 2e       	mov	r10, r31
    bcfa:	b1 2c       	mov	r11, r1
    bcfc:	80 2f       	mov	r24, r16
    bcfe:	99 27       	eor	r25, r25
    bd00:	87 fd       	sbrc	r24, 7
    bd02:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    bd04:	ac 01       	movw	r20, r24
    bd06:	46 57       	subi	r20, 0x76	; 118
    bd08:	55 4d       	sbci	r21, 0xD5	; 213
    bd0a:	67 96       	adiw	r28, 0x17	; 23
    bd0c:	5f af       	std	Y+63, r21	; 0x3f
    bd0e:	4e af       	std	Y+62, r20	; 0x3e
    bd10:	67 97       	sbiw	r28, 0x17	; 23
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    bd12:	95 01       	movw	r18, r10
    bd14:	28 1b       	sub	r18, r24
    bd16:	39 0b       	sbc	r19, r25
    bd18:	a9 01       	movw	r20, r18
    bd1a:	46 57       	subi	r20, 0x76	; 118
    bd1c:	55 4d       	sbci	r21, 0xD5	; 213
    bd1e:	69 96       	adiw	r28, 0x19	; 25
    bd20:	5f af       	std	Y+63, r21	; 0x3f
    bd22:	4e af       	std	Y+62, r20	; 0x3e
    bd24:	69 97       	sbiw	r28, 0x19	; 25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    bd26:	ac 01       	movw	r20, r24
    bd28:	41 51       	subi	r20, 0x11	; 17
    bd2a:	55 4d       	sbci	r21, 0xD5	; 213
    bd2c:	6b 96       	adiw	r28, 0x1b	; 27
    bd2e:	5f af       	std	Y+63, r21	; 0x3f
    bd30:	4e af       	std	Y+62, r20	; 0x3e
    bd32:	6b 97       	sbiw	r28, 0x1b	; 27
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    bd34:	c9 01       	movw	r24, r18
    bd36:	81 51       	subi	r24, 0x11	; 17
    bd38:	95 4d       	sbci	r25, 0xD5	; 213
    bd3a:	1c 01       	movw	r2, r24
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms. THROTTLEOFFSET = 1250
    bd3c:	ae e1       	ldi	r26, 0x1E	; 30
    bd3e:	6a 2e       	mov	r6, r26
    bd40:	ab ef       	ldi	r26, 0xFB	; 251
    bd42:	7a 2e       	mov	r7, r26
    bd44:	f6 01       	movw	r30, r12
    bd46:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    bd48:	90 81       	ld	r25, Z
    bd4a:	f6 01       	movw	r30, r12
    bd4c:	80 81       	ld	r24, Z
    bd4e:	91 11       	cpse	r25, r1
    bd50:	03 c0       	rjmp	.+6      	; 0xbd58 <ProcessMixer+0xbec>
    bd52:	88 23       	and	r24, r24
    bd54:	09 f4       	brne	.+2      	; 0xbd58 <ProcessMixer+0xbec>
    bd56:	64 c0       	rjmp	.+200    	; 0xbe20 <ProcessMixer+0xcb4>
    bd58:	29 2f       	mov	r18, r25
    bd5a:	33 27       	eor	r19, r19
    bd5c:	27 fd       	sbrc	r18, 7
    bd5e:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    bd60:	98 17       	cp	r25, r24
    bd62:	09 f4       	brne	.+2      	; 0xbd66 <ProcessMixer+0xbfa>
    bd64:	4f c0       	rjmp	.+158    	; 0xbe04 <ProcessMixer+0xc98>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    bd66:	99 27       	eor	r25, r25
    bd68:	87 fd       	sbrc	r24, 7
    bd6a:	90 95       	com	r25
    bd6c:	82 1b       	sub	r24, r18
    bd6e:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    bd70:	96 95       	lsr	r25
    bd72:	98 2f       	mov	r25, r24
    bd74:	88 27       	eor	r24, r24
    bd76:	97 95       	ror	r25
    bd78:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    bd7a:	b5 01       	movw	r22, r10
    bd7c:	0e 94 3a 6c 	call	0xd874	; 0xd874 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    bd80:	36 95       	lsr	r19
    bd82:	32 2f       	mov	r19, r18
    bd84:	22 27       	eor	r18, r18
    bd86:	37 95       	ror	r19
    bd88:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    bd8a:	f4 01       	movw	r30, r8
    bd8c:	80 81       	ld	r24, Z
    bd8e:	81 11       	cpse	r24, r1
    bd90:	08 c0       	rjmp	.+16     	; 0xbda2 <ProcessMixer+0xc36>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    bd92:	60 9f       	mul	r22, r16
    bd94:	c0 01       	movw	r24, r0
    bd96:	61 9f       	mul	r22, r17
    bd98:	90 0d       	add	r25, r0
    bd9a:	70 9f       	mul	r23, r16
    bd9c:	90 0d       	add	r25, r0
    bd9e:	11 24       	eor	r1, r1
    bda0:	27 c0       	rjmp	.+78     	; 0xbdf0 <ProcessMixer+0xc84>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    bda2:	81 30       	cpi	r24, 0x01	; 1
    bda4:	49 f4       	brne	.+18     	; 0xbdb8 <ProcessMixer+0xc4c>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    bda6:	77 ff       	sbrs	r23, 7
    bda8:	02 c0       	rjmp	.+4      	; 0xbdae <ProcessMixer+0xc42>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    bdaa:	f1 01       	movw	r30, r2
    bdac:	0b c0       	rjmp	.+22     	; 0xbdc4 <ProcessMixer+0xc58>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    bdae:	6b 96       	adiw	r28, 0x1b	; 27
    bdb0:	ee ad       	ldd	r30, Y+62	; 0x3e
    bdb2:	ff ad       	ldd	r31, Y+63	; 0x3f
    bdb4:	6b 97       	sbiw	r28, 0x1b	; 27
    bdb6:	11 c0       	rjmp	.+34     	; 0xbdda <ProcessMixer+0xc6e>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    bdb8:	77 ff       	sbrs	r23, 7
    bdba:	0b c0       	rjmp	.+22     	; 0xbdd2 <ProcessMixer+0xc66>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    bdbc:	69 96       	adiw	r28, 0x19	; 25
    bdbe:	ee ad       	ldd	r30, Y+62	; 0x3e
    bdc0:	ff ad       	ldd	r31, Y+63	; 0x3f
    bdc2:	69 97       	sbiw	r28, 0x19	; 25
    bdc4:	84 91       	lpm	r24, Z
    bdc6:	a5 01       	movw	r20, r10
    bdc8:	48 1b       	sub	r20, r24
    bdca:	51 09       	sbc	r21, r1
    bdcc:	87 fd       	sbrc	r24, 7
    bdce:	53 95       	inc	r21
    bdd0:	08 c0       	rjmp	.+16     	; 0xbde2 <ProcessMixer+0xc76>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    bdd2:	67 96       	adiw	r28, 0x17	; 23
    bdd4:	ee ad       	ldd	r30, Y+62	; 0x3e
    bdd6:	ff ad       	ldd	r31, Y+63	; 0x3f
    bdd8:	67 97       	sbiw	r28, 0x17	; 23
    bdda:	44 91       	lpm	r20, Z
    bddc:	55 27       	eor	r21, r21
    bdde:	47 fd       	sbrc	r20, 7
    bde0:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    bde2:	64 9f       	mul	r22, r20
    bde4:	c0 01       	movw	r24, r0
    bde6:	65 9f       	mul	r22, r21
    bde8:	90 0d       	add	r25, r0
    bdea:	74 9f       	mul	r23, r20
    bdec:	90 0d       	add	r25, r0
    bdee:	11 24       	eor	r1, r1
    bdf0:	82 0f       	add	r24, r18
    bdf2:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    bdf4:	bc 01       	movw	r22, r24
    bdf6:	60 5c       	subi	r22, 0xC0	; 192
    bdf8:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    bdfa:	66 0f       	add	r22, r22
    bdfc:	67 2f       	mov	r22, r23
    bdfe:	66 1f       	adc	r22, r22
    be00:	77 0b       	sbc	r23, r23
    be02:	01 c0       	rjmp	.+2      	; 0xbe06 <ProcessMixer+0xc9a>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    be04:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(monothrottle, temp3);
    be06:	c2 01       	movw	r24, r4
    be08:	0e 94 d6 56 	call	0xadac	; 0xadac <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of -1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    be0c:	88 5e       	subi	r24, 0xE8	; 232
    be0e:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    be10:	f7 01       	movw	r30, r14
    be12:	20 81       	ld	r18, Z
    be14:	31 81       	ldd	r19, Z+1	; 0x01
    be16:	28 0f       	add	r18, r24
    be18:	39 1f       	adc	r19, r25
    be1a:	31 83       	std	Z+1, r19	; 0x01
    be1c:	20 83       	st	Z, r18
    be1e:	08 c0       	rjmp	.+16     	; 0xbe30 <ProcessMixer+0xcc4>
    be20:	f6 01       	movw	r30, r12
    be22:	32 97       	sbiw	r30, 0x02	; 2

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    be24:	80 81       	ld	r24, Z
    be26:	82 30       	cpi	r24, 0x02	; 2
    be28:	19 f4       	brne	.+6      	; 0xbe30 <ProcessMixer+0xcc4>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms. THROTTLEOFFSET = 1250
    be2a:	f7 01       	movw	r30, r14
    be2c:	71 82       	std	Z+1, r7	; 0x01
    be2e:	60 82       	st	Z, r6
    be30:	f2 e2       	ldi	r31, 0x22	; 34
    be32:	ef 0e       	add	r14, r31
    be34:	f1 1c       	adc	r15, r1
    be36:	22 e2       	ldi	r18, 0x22	; 34
    be38:	c2 0e       	add	r12, r18
    be3a:	d1 1c       	adc	r13, r1
    be3c:	32 e2       	ldi	r19, 0x22	; 34
    be3e:	83 0e       	add	r8, r19
    be40:	91 1c       	adc	r9, r1
	// Groovy transition curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    be42:	4e eb       	ldi	r20, 0xBE	; 190
    be44:	e4 16       	cp	r14, r20
    be46:	47 e0       	ldi	r20, 0x07	; 7
    be48:	f4 06       	cpc	r15, r20
    be4a:	09 f0       	breq	.+2      	; 0xbe4e <ProcessMixer+0xce2>
    be4c:	7b cf       	rjmp	.-266    	; 0xbd44 <ProcessMixer+0xbd8>
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// The input to the curves will be the transition number, altered to appear as -1000 to 1000.
		temp1 = (transition - 50) * 20; // 0 - 100 -> -1000 to 1000
    be4e:	02 53       	subi	r16, 0x32	; 50
    be50:	11 09       	sbc	r17, r1
    be52:	84 e1       	ldi	r24, 0x14	; 20
    be54:	80 9f       	mul	r24, r16
    be56:	70 01       	movw	r14, r0
    be58:	81 9f       	mul	r24, r17
    be5a:	f0 0c       	add	r15, r0
    be5c:	11 24       	eor	r1, r1
    be5e:	0e ea       	ldi	r16, 0xAE	; 174
    be60:	16 e0       	ldi	r17, 0x06	; 6
    be62:	76 e0       	ldi	r23, 0x06	; 6

		// Process as 7-point offset curve. All are BIPOLAR types.
		// Temporarily add NUMBEROFCURVES to the curve number to identify 
		// them to Process_curve() as being offsets, not the other curves.
		temp2 = Process_curve(i + NUMBEROFCURVES, BIPOLAR, temp1);
    be64:	a7 01       	movw	r20, r14
    be66:	61 e0       	ldi	r22, 0x01	; 1
    be68:	87 2f       	mov	r24, r23
    be6a:	e5 96       	adiw	r28, 0x35	; 53
    be6c:	7f af       	std	Y+63, r23	; 0x3f
    be6e:	e5 97       	sbiw	r28, 0x35	; 53
    be70:	0e 94 11 57 	call	0xae22	; 0xae22 <Process_curve>
		
		// Add offset to channel value
		Config.Channel[i].P1_value += temp2;
    be74:	f8 01       	movw	r30, r16
    be76:	20 81       	ld	r18, Z
    be78:	31 81       	ldd	r19, Z+1	; 0x01
    be7a:	28 0f       	add	r18, r24
    be7c:	39 1f       	adc	r19, r25
    be7e:	31 83       	std	Z+1, r19	; 0x01
    be80:	20 83       	st	Z, r18
    be82:	e5 96       	adiw	r28, 0x35	; 53
    be84:	7f ad       	ldd	r23, Y+63	; 0x3f
    be86:	e5 97       	sbiw	r28, 0x35	; 53
    be88:	7f 5f       	subi	r23, 0xFF	; 255
    be8a:	0e 5d       	subi	r16, 0xDE	; 222
    be8c:	1f 4f       	sbci	r17, 0xFF	; 255
	//************************************************************
	// Per-channel 7-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    be8e:	7e 30       	cpi	r23, 0x0E	; 14
    be90:	49 f7       	brne	.-46     	; 0xbe64 <ProcessMixer+0xcf8>
		
		// Add offset to channel value
		Config.Channel[i].P1_value += temp2;
	}

} // ProcessMixer()
    be92:	cc 58       	subi	r28, 0x8C	; 140
    be94:	df 4f       	sbci	r29, 0xFF	; 255
    be96:	0f b6       	in	r0, 0x3f	; 63
    be98:	f8 94       	cli
    be9a:	de bf       	out	0x3e, r29	; 62
    be9c:	0f be       	out	0x3f, r0	; 63
    be9e:	cd bf       	out	0x3d, r28	; 61
    bea0:	df 91       	pop	r29
    bea2:	cf 91       	pop	r28
    bea4:	1f 91       	pop	r17
    bea6:	0f 91       	pop	r16
    bea8:	ff 90       	pop	r15
    beaa:	ef 90       	pop	r14
    beac:	df 90       	pop	r13
    beae:	cf 90       	pop	r12
    beb0:	bf 90       	pop	r11
    beb2:	af 90       	pop	r10
    beb4:	9f 90       	pop	r9
    beb6:	8f 90       	pop	r8
    beb8:	7f 90       	pop	r7
    beba:	6f 90       	pop	r6
    bebc:	5f 90       	pop	r5
    bebe:	4f 90       	pop	r4
    bec0:	3f 90       	pop	r3
    bec2:	2f 90       	pop	r2
    bec4:	08 95       	ret

0000bec6 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    bec6:	df 92       	push	r13
    bec8:	ef 92       	push	r14
    beca:	ff 92       	push	r15
    becc:	0f 93       	push	r16
    bece:	1f 93       	push	r17
    bed0:	cf 93       	push	r28
    bed2:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    bed4:	dc 01       	movw	r26, r24
    bed6:	0d 90       	ld	r0, X+
    bed8:	00 20       	and	r0, r0
    beda:	e9 f7       	brne	.-6      	; 0xbed6 <mugui_text_sizestring+0x10>
    bedc:	11 97       	sbiw	r26, 0x01	; 1
    bede:	a8 1b       	sub	r26, r24
    bee0:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    bee2:	fb 01       	movw	r30, r22
    bee4:	34 96       	adiw	r30, 0x04	; 4
    bee6:	e4 90       	lpm	r14, Z
    bee8:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    beea:	32 97       	sbiw	r30, 0x02	; 2
    beec:	d4 90       	lpm	r13, Z
    beee:	ec 01       	movw	r28, r24
    bef0:	a8 0f       	add	r26, r24
    bef2:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    bef4:	80 e0       	ldi	r24, 0x00	; 0
    bef6:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    bef8:	ca 17       	cp	r28, r26
    befa:	db 07       	cpc	r29, r27
    befc:	29 f1       	breq	.+74     	; 0xbf48 <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    befe:	29 91       	ld	r18, Y+
    bf00:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    bf02:	30 e0       	ldi	r19, 0x00	; 0
    bf04:	22 0f       	add	r18, r18
    bf06:	33 1f       	adc	r19, r19
    bf08:	f9 01       	movw	r30, r18
    bf0a:	35 96       	adiw	r30, 0x05	; 5
    bf0c:	e6 0f       	add	r30, r22
    bf0e:	f7 1f       	adc	r31, r23
    bf10:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    bf12:	f9 01       	movw	r30, r18
    bf14:	36 96       	adiw	r30, 0x06	; 6
    bf16:	e6 0f       	add	r30, r22
    bf18:	f7 1f       	adc	r31, r23
    bf1a:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    bf1c:	10 e0       	ldi	r17, 0x00	; 0
    bf1e:	20 e0       	ldi	r18, 0x00	; 0
    bf20:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    bf22:	32 2f       	mov	r19, r18
    bf24:	21 2f       	mov	r18, r17
    bf26:	10 2f       	mov	r17, r16
    bf28:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    bf2a:	0e 0f       	add	r16, r30
    bf2c:	11 1d       	adc	r17, r1
    bf2e:	21 1d       	adc	r18, r1
    bf30:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    bf32:	fb 01       	movw	r30, r22
    bf34:	e0 0f       	add	r30, r16
    bf36:	f1 1f       	adc	r31, r17
    bf38:	04 91       	lpm	r16, Z
    bf3a:	20 2f       	mov	r18, r16
    bf3c:	30 e0       	ldi	r19, 0x00	; 0
    bf3e:	2f 5f       	subi	r18, 0xFF	; 255
    bf40:	3f 4f       	sbci	r19, 0xFF	; 255
    bf42:	82 0f       	add	r24, r18
    bf44:	93 1f       	adc	r25, r19
    bf46:	d8 cf       	rjmp	.-80     	; 0xbef8 <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    bf48:	fa 01       	movw	r30, r20
    bf4a:	91 83       	std	Z+1, r25	; 0x01
    bf4c:	80 83       	st	Z, r24
	size->y = height;
    bf4e:	f3 82       	std	Z+3, r15	; 0x03
    bf50:	e2 82       	std	Z+2, r14	; 0x02
}
    bf52:	df 91       	pop	r29
    bf54:	cf 91       	pop	r28
    bf56:	1f 91       	pop	r17
    bf58:	0f 91       	pop	r16
    bf5a:	ff 90       	pop	r15
    bf5c:	ef 90       	pop	r14
    bf5e:	df 90       	pop	r13
    bf60:	08 95       	ret

0000bf62 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    bf62:	a5 ea       	ldi	r26, 0xA5	; 165
    bf64:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    bf66:	20 e0       	ldi	r18, 0x00	; 0
    bf68:	30 e0       	ldi	r19, 0x00	; 0
    bf6a:	fc 01       	movw	r30, r24
    bf6c:	e2 0f       	add	r30, r18
    bf6e:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    bf70:	44 91       	lpm	r20, Z
    bf72:	44 23       	and	r20, r20
    bf74:	41 f0       	breq	.+16     	; 0xbf86 <pgm_mugui_scopy+0x24>
    bf76:	28 31       	cpi	r18, 0x18	; 24
    bf78:	31 05       	cpc	r19, r1
    bf7a:	29 f0       	breq	.+10     	; 0xbf86 <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    bf7c:	e4 91       	lpm	r30, Z
    bf7e:	ed 93       	st	X+, r30
		i++;
    bf80:	2f 5f       	subi	r18, 0xFF	; 255
    bf82:	3f 4f       	sbci	r19, 0xFF	; 255
    bf84:	f2 cf       	rjmp	.-28     	; 0xbf6a <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    bf86:	f9 01       	movw	r30, r18
    bf88:	eb 55       	subi	r30, 0x5B	; 91
    bf8a:	fa 4f       	sbci	r31, 0xFA	; 250
    bf8c:	10 82       	st	Z, r1
    bf8e:	08 95       	ret

0000bf90 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    bf90:	2f 92       	push	r2
    bf92:	3f 92       	push	r3
    bf94:	4f 92       	push	r4
    bf96:	5f 92       	push	r5
    bf98:	6f 92       	push	r6
    bf9a:	7f 92       	push	r7
    bf9c:	8f 92       	push	r8
    bf9e:	9f 92       	push	r9
    bfa0:	af 92       	push	r10
    bfa2:	bf 92       	push	r11
    bfa4:	cf 92       	push	r12
    bfa6:	df 92       	push	r13
    bfa8:	ef 92       	push	r14
    bfaa:	ff 92       	push	r15
    bfac:	0f 93       	push	r16
    bfae:	1f 93       	push	r17
    bfb0:	cf 93       	push	r28
    bfb2:	df 93       	push	r29
    bfb4:	cd b7       	in	r28, 0x3d	; 61
    bfb6:	de b7       	in	r29, 0x3e	; 62
    bfb8:	29 97       	sbiw	r28, 0x09	; 9
    bfba:	0f b6       	in	r0, 0x3f	; 63
    bfbc:	f8 94       	cli
    bfbe:	de bf       	out	0x3e, r29	; 62
    bfc0:	0f be       	out	0x3f, r0	; 63
    bfc2:	cd bf       	out	0x3d, r28	; 61
    bfc4:	4c 83       	std	Y+4, r20	; 0x04
    bfc6:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    bfc8:	fb 01       	movw	r30, r22
    bfca:	32 96       	adiw	r30, 0x02	; 2
    bfcc:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    bfce:	32 96       	adiw	r30, 0x02	; 2
    bfd0:	e4 91       	lpm	r30, Z
    bfd2:	2e 2e       	mov	r2, r30
    bfd4:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    bfd6:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    bfd8:	90 e0       	ldi	r25, 0x00	; 0
    bfda:	88 0f       	add	r24, r24
    bfdc:	99 1f       	adc	r25, r25
    bfde:	fc 01       	movw	r30, r24
    bfe0:	35 96       	adiw	r30, 0x05	; 5
    bfe2:	e6 0f       	add	r30, r22
    bfe4:	f7 1f       	adc	r31, r23
    bfe6:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    bfe8:	fc 01       	movw	r30, r24
    bfea:	36 96       	adiw	r30, 0x06	; 6
    bfec:	e6 0f       	add	r30, r22
    bfee:	f7 1f       	adc	r31, r23
    bff0:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    bff2:	06 2d       	mov	r16, r6
    bff4:	10 e0       	ldi	r17, 0x00	; 0
    bff6:	20 e0       	ldi	r18, 0x00	; 0
    bff8:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    bffa:	32 2f       	mov	r19, r18
    bffc:	21 2f       	mov	r18, r17
    bffe:	10 2f       	mov	r17, r16
    c000:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    c002:	08 0f       	add	r16, r24
    c004:	11 1d       	adc	r17, r1
    c006:	21 1d       	adc	r18, r1
    c008:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    c00a:	c8 01       	movw	r24, r16
    c00c:	fb 01       	movw	r30, r22
    c00e:	e0 0f       	add	r30, r16
    c010:	f1 1f       	adc	r31, r17
    c012:	64 90       	lpm	r6, Z
    c014:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    c016:	21 01       	movw	r4, r2
    c018:	21 e0       	ldi	r18, 0x01	; 1
    c01a:	42 1a       	sub	r4, r18
    c01c:	51 08       	sbc	r5, r1
    c01e:	13 e0       	ldi	r17, 0x03	; 3
    c020:	56 94       	lsr	r5
    c022:	47 94       	ror	r4
    c024:	1a 95       	dec	r17
    c026:	e1 f7       	brne	.-8      	; 0xc020 <mugui_lcd_putc+0x90>
    c028:	43 94       	inc	r4
    c02a:	a4 2d       	mov	r26, r4
    c02c:	b0 e0       	ldi	r27, 0x00	; 0
    c02e:	ba 83       	std	Y+2, r27	; 0x02
    c030:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    c032:	a1 2c       	mov	r10, r1
    c034:	b1 2c       	mov	r11, r1
    c036:	00 e0       	ldi	r16, 0x00	; 0
    c038:	10 e0       	ldi	r17, 0x00	; 0
    c03a:	4b 01       	movw	r8, r22
    c03c:	bf ef       	ldi	r27, 0xFF	; 255
    c03e:	8b 1a       	sub	r8, r27
    c040:	9b 0a       	sbc	r9, r27
    c042:	88 0e       	add	r8, r24
    c044:	99 1e       	adc	r9, r25
    c046:	06 15       	cp	r16, r6
    c048:	17 05       	cpc	r17, r7
    c04a:	08 f0       	brcs	.+2      	; 0xc04e <mugui_lcd_putc+0xbe>
    c04c:	43 c0       	rjmp	.+134    	; 0xc0d4 <mugui_lcd_putc+0x144>
    c04e:	c1 2c       	mov	r12, r1
    c050:	d1 2c       	mov	r13, r1
    c052:	e1 2c       	mov	r14, r1
    c054:	f1 2c       	mov	r15, r1
    c056:	94 01       	movw	r18, r8
    c058:	2a 0d       	add	r18, r10
    c05a:	3b 1d       	adc	r19, r11
    c05c:	3f 83       	std	Y+7, r19	; 0x07
    c05e:	2e 83       	std	Y+6, r18	; 0x06
    c060:	5c 80       	ldd	r5, Y+4	; 0x04
    c062:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    c064:	c4 14       	cp	r12, r4
    c066:	78 f5       	brcc	.+94     	; 0xc0c6 <mugui_lcd_putc+0x136>
    c068:	ee 81       	ldd	r30, Y+6	; 0x06
    c06a:	ff 81       	ldd	r31, Y+7	; 0x07
    c06c:	ec 0d       	add	r30, r12
    c06e:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    c070:	34 91       	lpm	r19, Z
    c072:	3b 83       	std	Y+3, r19	; 0x03
    c074:	19 86       	std	Y+9, r1	; 0x09
    c076:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    c078:	e2 14       	cp	r14, r2
    c07a:	f3 04       	cpc	r15, r3
    c07c:	00 f5       	brcc	.+64     	; 0xc0be <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    c07e:	81 e0       	ldi	r24, 0x01	; 1
    c080:	90 e0       	ldi	r25, 0x00	; 0
    c082:	08 84       	ldd	r0, Y+8	; 0x08
    c084:	02 c0       	rjmp	.+4      	; 0xc08a <mugui_lcd_putc+0xfa>
    c086:	88 0f       	add	r24, r24
    c088:	99 1f       	adc	r25, r25
    c08a:	0a 94       	dec	r0
    c08c:	e2 f7       	brpl	.-8      	; 0xc086 <mugui_lcd_putc+0xf6>
					bit = data & mask;
    c08e:	3b 81       	ldd	r19, Y+3	; 0x03
    c090:	83 23       	and	r24, r19
    c092:	4d 81       	ldd	r20, Y+5	; 0x05
    c094:	4e 0d       	add	r20, r14
					if(bit)
    c096:	88 23       	and	r24, r24
    c098:	11 f0       	breq	.+4      	; 0xc09e <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    c09a:	21 e0       	ldi	r18, 0x01	; 1
    c09c:	01 c0       	rjmp	.+2      	; 0xc0a0 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    c09e:	20 e0       	ldi	r18, 0x00	; 0
    c0a0:	65 2d       	mov	r22, r5
    c0a2:	80 e0       	ldi	r24, 0x00	; 0
    c0a4:	91 e0       	ldi	r25, 0x01	; 1
    c0a6:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <setpixel>
					}
					ty++;
    c0aa:	8f ef       	ldi	r24, 0xFF	; 255
    c0ac:	e8 1a       	sub	r14, r24
    c0ae:	f8 0a       	sbc	r15, r24
    c0b0:	a8 85       	ldd	r26, Y+8	; 0x08
    c0b2:	b9 85       	ldd	r27, Y+9	; 0x09
    c0b4:	11 96       	adiw	r26, 0x01	; 1
    c0b6:	b9 87       	std	Y+9, r27	; 0x09
    c0b8:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    c0ba:	18 97       	sbiw	r26, 0x08	; 8
    c0bc:	e9 f6       	brne	.-70     	; 0xc078 <mugui_lcd_putc+0xe8>
    c0be:	bf ef       	ldi	r27, 0xFF	; 255
    c0c0:	cb 1a       	sub	r12, r27
    c0c2:	db 0a       	sbc	r13, r27
    c0c4:	cf cf       	rjmp	.-98     	; 0xc064 <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    c0c6:	0f 5f       	subi	r16, 0xFF	; 255
    c0c8:	1f 4f       	sbci	r17, 0xFF	; 255
    c0ca:	e9 81       	ldd	r30, Y+1	; 0x01
    c0cc:	fa 81       	ldd	r31, Y+2	; 0x02
    c0ce:	ae 0e       	add	r10, r30
    c0d0:	bf 1e       	adc	r11, r31
    c0d2:	b9 cf       	rjmp	.-142    	; 0xc046 <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    c0d4:	c3 01       	movw	r24, r6
    c0d6:	29 96       	adiw	r28, 0x09	; 9
    c0d8:	0f b6       	in	r0, 0x3f	; 63
    c0da:	f8 94       	cli
    c0dc:	de bf       	out	0x3e, r29	; 62
    c0de:	0f be       	out	0x3f, r0	; 63
    c0e0:	cd bf       	out	0x3d, r28	; 61
    c0e2:	df 91       	pop	r29
    c0e4:	cf 91       	pop	r28
    c0e6:	1f 91       	pop	r17
    c0e8:	0f 91       	pop	r16
    c0ea:	ff 90       	pop	r15
    c0ec:	ef 90       	pop	r14
    c0ee:	df 90       	pop	r13
    c0f0:	cf 90       	pop	r12
    c0f2:	bf 90       	pop	r11
    c0f4:	af 90       	pop	r10
    c0f6:	9f 90       	pop	r9
    c0f8:	8f 90       	pop	r8
    c0fa:	7f 90       	pop	r7
    c0fc:	6f 90       	pop	r6
    c0fe:	5f 90       	pop	r5
    c100:	4f 90       	pop	r4
    c102:	3f 90       	pop	r3
    c104:	2f 90       	pop	r2
    c106:	08 95       	ret

0000c108 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    c108:	af 92       	push	r10
    c10a:	bf 92       	push	r11
    c10c:	cf 92       	push	r12
    c10e:	df 92       	push	r13
    c110:	ef 92       	push	r14
    c112:	ff 92       	push	r15
    c114:	0f 93       	push	r16
    c116:	1f 93       	push	r17
    c118:	cf 93       	push	r28
    c11a:	df 93       	push	r29
    c11c:	ec 01       	movw	r28, r24
    c11e:	7b 01       	movw	r14, r22
    c120:	6a 01       	movw	r12, r20
    c122:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    c124:	00 e0       	ldi	r16, 0x00	; 0
    c126:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    c128:	ce 01       	movw	r24, r28
    c12a:	fe 01       	movw	r30, r28
    c12c:	24 91       	lpm	r18, Z
    c12e:	22 23       	and	r18, r18
    c130:	71 f0       	breq	.+28     	; 0xc14e <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    c132:	21 96       	adiw	r28, 0x01	; 1
    c134:	fc 01       	movw	r30, r24
    c136:	84 91       	lpm	r24, Z
    c138:	a8 01       	movw	r20, r16
    c13a:	4c 0d       	add	r20, r12
    c13c:	5d 1d       	adc	r21, r13
    c13e:	95 01       	movw	r18, r10
    c140:	b7 01       	movw	r22, r14
    c142:	0e 94 c8 5f 	call	0xbf90	; 0xbf90 <mugui_lcd_putc>
    c146:	01 96       	adiw	r24, 0x01	; 1
    c148:	08 0f       	add	r16, r24
    c14a:	19 1f       	adc	r17, r25
    c14c:	ed cf       	rjmp	.-38     	; 0xc128 <pgm_mugui_lcd_puts+0x20>
	}
}
    c14e:	df 91       	pop	r29
    c150:	cf 91       	pop	r28
    c152:	1f 91       	pop	r17
    c154:	0f 91       	pop	r16
    c156:	ff 90       	pop	r15
    c158:	ef 90       	pop	r14
    c15a:	df 90       	pop	r13
    c15c:	cf 90       	pop	r12
    c15e:	bf 90       	pop	r11
    c160:	af 90       	pop	r10
    c162:	08 95       	ret

0000c164 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    c164:	8f 92       	push	r8
    c166:	9f 92       	push	r9
    c168:	af 92       	push	r10
    c16a:	bf 92       	push	r11
    c16c:	cf 92       	push	r12
    c16e:	df 92       	push	r13
    c170:	ef 92       	push	r14
    c172:	ff 92       	push	r15
    c174:	0f 93       	push	r16
    c176:	1f 93       	push	r17
    c178:	cf 93       	push	r28
    c17a:	df 93       	push	r29
    c17c:	6b 01       	movw	r12, r22
    c17e:	5a 01       	movw	r10, r20
    c180:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    c182:	ec 01       	movw	r28, r24
    c184:	09 90       	ld	r0, Y+
    c186:	00 20       	and	r0, r0
    c188:	e9 f7       	brne	.-6      	; 0xc184 <mugui_lcd_puts+0x20>
    c18a:	8c 01       	movw	r16, r24
    c18c:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    c18e:	e1 2c       	mov	r14, r1
    c190:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    c192:	0c 17       	cp	r16, r28
    c194:	1d 07       	cpc	r17, r29
    c196:	71 f0       	breq	.+28     	; 0xc1b4 <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    c198:	a7 01       	movw	r20, r14
    c19a:	4a 0d       	add	r20, r10
    c19c:	5b 1d       	adc	r21, r11
    c19e:	94 01       	movw	r18, r8
    c1a0:	b6 01       	movw	r22, r12
    c1a2:	f8 01       	movw	r30, r16
    c1a4:	81 91       	ld	r24, Z+
    c1a6:	8f 01       	movw	r16, r30
    c1a8:	0e 94 c8 5f 	call	0xbf90	; 0xbf90 <mugui_lcd_putc>
    c1ac:	01 96       	adiw	r24, 0x01	; 1
    c1ae:	e8 0e       	add	r14, r24
    c1b0:	f9 1e       	adc	r15, r25
    c1b2:	ef cf       	rjmp	.-34     	; 0xc192 <mugui_lcd_puts+0x2e>
	}
}
    c1b4:	df 91       	pop	r29
    c1b6:	cf 91       	pop	r28
    c1b8:	1f 91       	pop	r17
    c1ba:	0f 91       	pop	r16
    c1bc:	ff 90       	pop	r15
    c1be:	ef 90       	pop	r14
    c1c0:	df 90       	pop	r13
    c1c2:	cf 90       	pop	r12
    c1c4:	bf 90       	pop	r11
    c1c6:	af 90       	pop	r10
    c1c8:	9f 90       	pop	r9
    c1ca:	8f 90       	pop	r8
    c1cc:	08 95       	ret

0000c1ce <Sensor_PID>:
float HPF_I = 0;
float fsample = 0;
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    c1ce:	2f 92       	push	r2
    c1d0:	3f 92       	push	r3
    c1d2:	4f 92       	push	r4
    c1d4:	5f 92       	push	r5
    c1d6:	6f 92       	push	r6
    c1d8:	7f 92       	push	r7
    c1da:	8f 92       	push	r8
    c1dc:	9f 92       	push	r9
    c1de:	af 92       	push	r10
    c1e0:	bf 92       	push	r11
    c1e2:	cf 92       	push	r12
    c1e4:	df 92       	push	r13
    c1e6:	ef 92       	push	r14
    c1e8:	ff 92       	push	r15
    c1ea:	0f 93       	push	r16
    c1ec:	1f 93       	push	r17
    c1ee:	cf 93       	push	r28
    c1f0:	df 93       	push	r29
    c1f2:	cd b7       	in	r28, 0x3d	; 61
    c1f4:	de b7       	in	r29, 0x3e	; 62
    c1f6:	a9 97       	sbiw	r28, 0x29	; 41
    c1f8:	0f b6       	in	r0, 0x3f	; 63
    c1fa:	f8 94       	cli
    c1fc:	de bf       	out	0x3e, r29	; 62
    c1fe:	0f be       	out	0x3f, r0	; 63
    c200:	cd bf       	out	0x3d, r28	; 61
    c202:	6e a3       	std	Y+38, r22	; 0x26
    c204:	7f a3       	std	Y+39, r23	; 0x27
    c206:	88 a7       	std	Y+40, r24	; 0x28
    c208:	99 a7       	std	Y+41, r25	; 0x29
	float tempf1 = 0;
    c20a:	1d 86       	std	Y+13, r1	; 0x0d
    c20c:	1e 86       	std	Y+14, r1	; 0x0e
    c20e:	1f 86       	std	Y+15, r1	; 0x0f
    c210:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    c212:	80 91 46 09 	lds	r24, 0x0946
    c216:	90 91 47 09 	lds	r25, 0x0947
    c21a:	91 95       	neg	r25
    c21c:	81 95       	neg	r24
    c21e:	91 09       	sbc	r25, r1
    c220:	98 87       	std	Y+8, r25	; 0x08
    c222:	8f 83       	std	Y+7, r24	; 0x07
    c224:	80 91 48 09 	lds	r24, 0x0948
    c228:	90 91 49 09 	lds	r25, 0x0949
    c22c:	9a 87       	std	Y+10, r25	; 0x0a
    c22e:	89 87       	std	Y+9, r24	; 0x09
    c230:	80 91 4a 09 	lds	r24, 0x094A
    c234:	90 91 4b 09 	lds	r25, 0x094B
    c238:	9c 87       	std	Y+12, r25	; 0x0c
    c23a:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    c23c:	80 91 50 06 	lds	r24, 0x0650
    c240:	89 83       	std	Y+1, r24	; 0x01
    c242:	80 91 56 06 	lds	r24, 0x0656
    c246:	8a 83       	std	Y+2, r24	; 0x02
    c248:	80 91 5c 06 	lds	r24, 0x065C
    c24c:	8b 83       	std	Y+3, r24	; 0x03
    c24e:	80 91 62 06 	lds	r24, 0x0662
    c252:	8c 83       	std	Y+4, r24	; 0x04
    c254:	80 91 68 06 	lds	r24, 0x0668
    c258:	8d 83       	std	Y+5, r24	; 0x05
    c25a:	80 91 6e 06 	lds	r24, 0x066E
    c25e:	8e 83       	std	Y+6, r24	; 0x06
	//************************************************************
	// Create a measure of gyro noise
	//************************************************************

	// Only bother when display vibration info is set to "ON"
	if (Config.Vibration == ON)
    c260:	80 91 4b 06 	lds	r24, 0x064B
    c264:	81 30       	cpi	r24, 0x01	; 1
    c266:	09 f0       	breq	.+2      	; 0xc26a <Sensor_PID+0x9c>
    c268:	d6 c0       	rjmp	.+428    	; 0xc416 <Sensor_PID+0x248>
	{
		// Work out quick average of all raw gyros and take the absolute value
		fsample = (float)(gyroADC_raw[ROLL] + gyroADC_raw[PITCH] + gyroADC_raw[YAW]);
    c26a:	60 91 c4 05 	lds	r22, 0x05C4
    c26e:	70 91 c5 05 	lds	r23, 0x05C5
    c272:	80 91 c6 05 	lds	r24, 0x05C6
    c276:	90 91 c7 05 	lds	r25, 0x05C7
    c27a:	68 0f       	add	r22, r24
    c27c:	79 1f       	adc	r23, r25
    c27e:	80 91 c8 05 	lds	r24, 0x05C8
    c282:	90 91 c9 05 	lds	r25, 0x05C9
    c286:	68 0f       	add	r22, r24
    c288:	79 1f       	adc	r23, r25
    c28a:	88 27       	eor	r24, r24
    c28c:	77 fd       	sbrc	r23, 7
    c28e:	80 95       	com	r24
    c290:	98 2f       	mov	r25, r24
    c292:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    c296:	4b 01       	movw	r8, r22
    c298:	5c 01       	movw	r10, r24

		// HPF example from http://www.codeproject.com/Tips/681745/Csharp-Discrete-Time-RLC-Low-High-Pass-Filter-Rout
		// Some values preset for a 10Hz cutoff at 500Hz sample rate
		HPF_T = (fsample * HPF_O) - HPF_V;
    c29a:	40 90 63 05 	lds	r4, 0x0563
    c29e:	50 90 64 05 	lds	r5, 0x0564
    c2a2:	60 90 65 05 	lds	r6, 0x0565
    c2a6:	70 90 66 05 	lds	r7, 0x0566
    c2aa:	2d ef       	ldi	r18, 0xFD	; 253
    c2ac:	3d ea       	ldi	r19, 0xAD	; 173
    c2ae:	40 e8       	ldi	r20, 0x80	; 128
    c2b0:	5e e3       	ldi	r21, 0x3E	; 62
    c2b2:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    c2b6:	a3 01       	movw	r20, r6
    c2b8:	92 01       	movw	r18, r4
    c2ba:	0e 94 0b 6a 	call	0xd416	; 0xd416 <__subsf3>
    c2be:	6b 01       	movw	r12, r22
    c2c0:	7c 01       	movw	r14, r24
    c2c2:	60 93 5f 05 	sts	0x055F, r22
    c2c6:	70 93 60 05 	sts	0x0560, r23
    c2ca:	80 93 61 05 	sts	0x0561, r24
    c2ce:	90 93 62 05 	sts	0x0562, r25
		HPF_V += (HPF_I + HPF_T) / HPF_C;
    c2d2:	80 91 5b 05 	lds	r24, 0x055B
    c2d6:	90 91 5c 05 	lds	r25, 0x055C
    c2da:	a0 91 5d 05 	lds	r26, 0x055D
    c2de:	b0 91 5e 05 	lds	r27, 0x055E
    c2e2:	89 8b       	std	Y+17, r24	; 0x11
    c2e4:	9a 8b       	std	Y+18, r25	; 0x12
    c2e6:	ab 8b       	std	Y+19, r26	; 0x13
    c2e8:	bc 8b       	std	Y+20, r27	; 0x14
    c2ea:	a7 01       	movw	r20, r14
    c2ec:	96 01       	movw	r18, r12
    c2ee:	bc 01       	movw	r22, r24
    c2f0:	cd 01       	movw	r24, r26
    c2f2:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    c2f6:	2d ed       	ldi	r18, 0xDD	; 221
    c2f8:	35 ea       	ldi	r19, 0xA5	; 165
    c2fa:	4e e7       	ldi	r20, 0x7E	; 126
    c2fc:	50 e4       	ldi	r21, 0x40	; 64
    c2fe:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
    c302:	9b 01       	movw	r18, r22
    c304:	ac 01       	movw	r20, r24
    c306:	c3 01       	movw	r24, r6
    c308:	b2 01       	movw	r22, r4
    c30a:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    c30e:	2b 01       	movw	r4, r22
    c310:	3c 01       	movw	r6, r24
    c312:	60 93 63 05 	sts	0x0563, r22
    c316:	70 93 64 05 	sts	0x0564, r23
    c31a:	80 93 65 05 	sts	0x0565, r24
    c31e:	90 93 66 05 	sts	0x0566, r25
		HPF_I += HPF_T / HPF_L;
    c322:	2d ed       	ldi	r18, 0xDD	; 221
    c324:	35 ea       	ldi	r19, 0xA5	; 165
    c326:	4e e7       	ldi	r20, 0x7E	; 126
    c328:	50 e4       	ldi	r21, 0x40	; 64
    c32a:	c7 01       	movw	r24, r14
    c32c:	b6 01       	movw	r22, r12
    c32e:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
    c332:	9b 01       	movw	r18, r22
    c334:	ac 01       	movw	r20, r24
    c336:	69 89       	ldd	r22, Y+17	; 0x11
    c338:	7a 89       	ldd	r23, Y+18	; 0x12
    c33a:	8b 89       	ldd	r24, Y+19	; 0x13
    c33c:	9c 89       	ldd	r25, Y+20	; 0x14
    c33e:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    c342:	60 93 5b 05 	sts	0x055B, r22
    c346:	70 93 5c 05 	sts	0x055C, r23
    c34a:	80 93 5d 05 	sts	0x055D, r24
    c34e:	90 93 5e 05 	sts	0x055E, r25
		fsample -= HPF_V / HPF_O;
    c352:	2d ef       	ldi	r18, 0xFD	; 253
    c354:	3d ea       	ldi	r19, 0xAD	; 173
    c356:	40 e8       	ldi	r20, 0x80	; 128
    c358:	5e e3       	ldi	r21, 0x3E	; 62
    c35a:	c3 01       	movw	r24, r6
    c35c:	b2 01       	movw	r22, r4
    c35e:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
    c362:	9b 01       	movw	r18, r22
    c364:	ac 01       	movw	r20, r24
    c366:	c5 01       	movw	r24, r10
    c368:	b4 01       	movw	r22, r8
    c36a:	0e 94 0b 6a 	call	0xd416	; 0xd416 <__subsf3>
    c36e:	6b 01       	movw	r12, r22
    c370:	7c 01       	movw	r14, r24
    c372:	60 93 57 05 	sts	0x0557, r22
    c376:	70 93 58 05 	sts	0x0558, r23
    c37a:	80 93 59 05 	sts	0x0559, r24
    c37e:	90 93 5a 05 	sts	0x055A, r25

		// LPF filter the readings so that they are more persistent
		GyroAvgNoise = ((GyroAvgNoise * 99.0f) + abs(fsample)) / 100.0f;
    c382:	20 e0       	ldi	r18, 0x00	; 0
    c384:	30 e0       	ldi	r19, 0x00	; 0
    c386:	46 ec       	ldi	r20, 0xC6	; 198
    c388:	52 e4       	ldi	r21, 0x42	; 66
    c38a:	60 91 3e 09 	lds	r22, 0x093E
    c38e:	70 91 3f 09 	lds	r23, 0x093F
    c392:	80 91 40 09 	lds	r24, 0x0940
    c396:	90 91 41 09 	lds	r25, 0x0941
    c39a:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    c39e:	4b 01       	movw	r8, r22
    c3a0:	5c 01       	movw	r10, r24
    c3a2:	c7 01       	movw	r24, r14
    c3a4:	b6 01       	movw	r22, r12
    c3a6:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    c3aa:	9b 01       	movw	r18, r22
    c3ac:	77 ff       	sbrs	r23, 7
    c3ae:	04 c0       	rjmp	.+8      	; 0xc3b8 <Sensor_PID+0x1ea>
    c3b0:	22 27       	eor	r18, r18
    c3b2:	33 27       	eor	r19, r19
    c3b4:	26 1b       	sub	r18, r22
    c3b6:	37 0b       	sbc	r19, r23
    c3b8:	b9 01       	movw	r22, r18
    c3ba:	88 27       	eor	r24, r24
    c3bc:	77 fd       	sbrc	r23, 7
    c3be:	80 95       	com	r24
    c3c0:	98 2f       	mov	r25, r24
    c3c2:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    c3c6:	9b 01       	movw	r18, r22
    c3c8:	ac 01       	movw	r20, r24
    c3ca:	c5 01       	movw	r24, r10
    c3cc:	b4 01       	movw	r22, r8
    c3ce:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    c3d2:	20 e0       	ldi	r18, 0x00	; 0
    c3d4:	30 e0       	ldi	r19, 0x00	; 0
    c3d6:	48 ec       	ldi	r20, 0xC8	; 200
    c3d8:	52 e4       	ldi	r21, 0x42	; 66
    c3da:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
    c3de:	60 93 3e 09 	sts	0x093E, r22
    c3e2:	70 93 3f 09 	sts	0x093F, r23
    c3e6:	80 93 40 09 	sts	0x0940, r24
    c3ea:	90 93 41 09 	sts	0x0941, r25

		// Limit noise reading to 999
		if (GyroAvgNoise > 999.0f)
    c3ee:	20 e0       	ldi	r18, 0x00	; 0
    c3f0:	30 ec       	ldi	r19, 0xC0	; 192
    c3f2:	49 e7       	ldi	r20, 0x79	; 121
    c3f4:	54 e4       	ldi	r21, 0x44	; 68
    c3f6:	0e 94 bf 6b 	call	0xd77e	; 0xd77e <__gesf2>
    c3fa:	18 16       	cp	r1, r24
    c3fc:	64 f4       	brge	.+24     	; 0xc416 <Sensor_PID+0x248>
		{
			GyroAvgNoise = 999.0f;
    c3fe:	80 e0       	ldi	r24, 0x00	; 0
    c400:	90 ec       	ldi	r25, 0xC0	; 192
    c402:	a9 e7       	ldi	r26, 0x79	; 121
    c404:	b4 e4       	ldi	r27, 0x44	; 68
    c406:	80 93 3e 09 	sts	0x093E, r24
    c40a:	90 93 3f 09 	sts	0x093F, r25
    c40e:	a0 93 40 09 	sts	0x0940, r26
    c412:	b0 93 41 09 	sts	0x0941, r27
    c416:	de 01       	movw	r26, r28
    c418:	11 96       	adiw	r26, 0x01	; 1
    c41a:	bf 8f       	std	Y+31, r27	; 0x1f
    c41c:	ae 8f       	std	Y+30, r26	; 0x1e
    c41e:	e2 e3       	ldi	r30, 0x32	; 50
    c420:	f9 e0       	ldi	r31, 0x09	; 9
    c422:	fc 8f       	std	Y+28, r31	; 0x1c
    c424:	eb 8f       	std	Y+27, r30	; 0x1b
    c426:	0a ee       	ldi	r16, 0xEA	; 234
    c428:	18 e0       	ldi	r17, 0x08	; 8
    c42a:	25 e9       	ldi	r18, 0x95	; 149
    c42c:	36 e0       	ldi	r19, 0x06	; 6
    c42e:	3d a3       	std	Y+37, r19	; 0x25
    c430:	2c a3       	std	Y+36, r18	; 0x24
    c432:	8e e0       	ldi	r24, 0x0E	; 14
    c434:	99 e0       	ldi	r25, 0x09	; 9
    c436:	9a 8b       	std	Y+18, r25	; 0x12
    c438:	89 8b       	std	Y+17, r24	; 0x11
    c43a:	ae eb       	ldi	r26, 0xBE	; 190
    c43c:	b5 e0       	ldi	r27, 0x05	; 5
    c43e:	be 8b       	std	Y+22, r27	; 0x16
    c440:	ad 8b       	std	Y+21, r26	; 0x15
    c442:	e9 e8       	ldi	r30, 0x89	; 137
    c444:	f6 e0       	ldi	r31, 0x06	; 6
    c446:	fb a3       	std	Y+35, r31	; 0x23
    c448:	ea a3       	std	Y+34, r30	; 0x22
    c44a:	1e 01       	movw	r2, r28
    c44c:	f7 e0       	ldi	r31, 0x07	; 7
    c44e:	2f 0e       	add	r2, r31
    c450:	31 1c       	adc	r3, r1
    c452:	9e 01       	movw	r18, r28
    c454:	2c 5f       	subi	r18, 0xFC	; 252
    c456:	3f 4f       	sbci	r19, 0xFF	; 255
    c458:	39 a3       	std	Y+33, r19	; 0x21
    c45a:	28 a3       	std	Y+32, r18	; 0x20
float HPF_I = 0;
float fsample = 0;
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    c45c:	1d 8e       	std	Y+29, r1	; 0x1d
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************
		
		// Work out stick rate divider. 0 is slowest, 7 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244), /2 (488), /1 (976), *2 (1952)
		if (Stick_rates[P1][axis] <= 6)
    c45e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    c460:	bf 8d       	ldd	r27, Y+31	; 0x1f
    c462:	2d 91       	ld	r18, X+
    c464:	bf 8f       	std	Y+31, r27	; 0x1f
    c466:	ae 8f       	std	Y+30, r26	; 0x1e
    c468:	82 2f       	mov	r24, r18
    c46a:	99 27       	eor	r25, r25
    c46c:	87 fd       	sbrc	r24, 7
    c46e:	90 95       	com	r25
    c470:	27 30       	cpi	r18, 0x07	; 7
    c472:	74 f4       	brge	.+28     	; 0xc490 <Sensor_PID+0x2c2>
		{
			stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    c474:	e6 e0       	ldi	r30, 0x06	; 6
    c476:	f0 e0       	ldi	r31, 0x00	; 0
    c478:	e8 1b       	sub	r30, r24
    c47a:	f9 0b       	sbc	r31, r25
    c47c:	d1 01       	movw	r26, r2
    c47e:	ad 90       	ld	r10, X+
    c480:	bc 90       	ld	r11, X
    c482:	0e 2e       	mov	r0, r30
    c484:	02 c0       	rjmp	.+4      	; 0xc48a <Sensor_PID+0x2bc>
    c486:	b5 94       	asr	r11
    c488:	a7 94       	ror	r10
    c48a:	0a 94       	dec	r0
    c48c:	e2 f7       	brpl	.-8      	; 0xc486 <Sensor_PID+0x2b8>
    c48e:	09 c0       	rjmp	.+18     	; 0xc4a2 <Sensor_PID+0x2d4>
		}
		else
		{
			stick_P1 = RCinputsAxis[axis] << ((Stick_rates[P1][axis]) - 6);
    c490:	06 97       	sbiw	r24, 0x06	; 6
    c492:	f1 01       	movw	r30, r2
    c494:	a0 80       	ld	r10, Z
    c496:	b1 80       	ldd	r11, Z+1	; 0x01
    c498:	02 c0       	rjmp	.+4      	; 0xc49e <Sensor_PID+0x2d0>
    c49a:	aa 0c       	add	r10, r10
    c49c:	bb 1c       	adc	r11, r11
    c49e:	8a 95       	dec	r24
    c4a0:	e2 f7       	brpl	.-8      	; 0xc49a <Sensor_PID+0x2cc>
		}
		
		if (Stick_rates[P2][axis] <= 6)
    c4a2:	a8 a1       	ldd	r26, Y+32	; 0x20
    c4a4:	b9 a1       	ldd	r27, Y+33	; 0x21
    c4a6:	2d 91       	ld	r18, X+
    c4a8:	b9 a3       	std	Y+33, r27	; 0x21
    c4aa:	a8 a3       	std	Y+32, r26	; 0x20
    c4ac:	82 2f       	mov	r24, r18
    c4ae:	99 27       	eor	r25, r25
    c4b0:	87 fd       	sbrc	r24, 7
    c4b2:	90 95       	com	r25
    c4b4:	27 30       	cpi	r18, 0x07	; 7
    c4b6:	74 f4       	brge	.+28     	; 0xc4d4 <Sensor_PID+0x306>
		{
			stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    c4b8:	e6 e0       	ldi	r30, 0x06	; 6
    c4ba:	f0 e0       	ldi	r31, 0x00	; 0
    c4bc:	e8 1b       	sub	r30, r24
    c4be:	f9 0b       	sbc	r31, r25
    c4c0:	d1 01       	movw	r26, r2
    c4c2:	8d 90       	ld	r8, X+
    c4c4:	9c 90       	ld	r9, X
    c4c6:	0e 2e       	mov	r0, r30
    c4c8:	02 c0       	rjmp	.+4      	; 0xc4ce <Sensor_PID+0x300>
    c4ca:	95 94       	asr	r9
    c4cc:	87 94       	ror	r8
    c4ce:	0a 94       	dec	r0
    c4d0:	e2 f7       	brpl	.-8      	; 0xc4ca <Sensor_PID+0x2fc>
    c4d2:	09 c0       	rjmp	.+18     	; 0xc4e6 <Sensor_PID+0x318>
		}
		else
		{
			stick_P2 = RCinputsAxis[axis] << ((Stick_rates[P2][axis]) - 6);
    c4d4:	06 97       	sbiw	r24, 0x06	; 6
    c4d6:	f1 01       	movw	r30, r2
    c4d8:	80 80       	ld	r8, Z
    c4da:	91 80       	ldd	r9, Z+1	; 0x01
    c4dc:	02 c0       	rjmp	.+4      	; 0xc4e2 <Sensor_PID+0x314>
    c4de:	88 0c       	add	r8, r8
    c4e0:	99 1c       	adc	r9, r9
    c4e2:	8a 95       	dec	r24
    c4e4:	e2 f7       	brpl	.-8      	; 0xc4de <Sensor_PID+0x310>
		// Gyro LPF
		//************************************************************	

		// Lookup LPF value
		// Note: Two sets of values for normal and high-speed mode
		if (Config.Servo_rate != FAST)
    c4e6:	80 91 42 06 	lds	r24, 0x0642
    c4ea:	60 91 ab 06 	lds	r22, 0x06AB
    c4ee:	82 30       	cpi	r24, 0x02	; 2
    c4f0:	39 f0       	breq	.+14     	; 0xc500 <Sensor_PID+0x332>
		{
			memcpy_P(&tempf1, &LPF_lookup[Config.Gyro_LPF], sizeof(float));
    c4f2:	f4 e0       	ldi	r31, 0x04	; 4
    c4f4:	6f 02       	muls	r22, r31
    c4f6:	b0 01       	movw	r22, r0
    c4f8:	11 24       	eor	r1, r1
    c4fa:	63 58       	subi	r22, 0x83	; 131
    c4fc:	7b 4d       	sbci	r23, 0xDB	; 219
    c4fe:	06 c0       	rjmp	.+12     	; 0xc50c <Sensor_PID+0x33e>
		}
		else
		{
			memcpy_P(&tempf1, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float));
    c500:	24 e0       	ldi	r18, 0x04	; 4
    c502:	62 02       	muls	r22, r18
    c504:	b0 01       	movw	r22, r0
    c506:	11 24       	eor	r1, r1
    c508:	63 5a       	subi	r22, 0xA3	; 163
    c50a:	7b 4d       	sbci	r23, 0xDB	; 219
    c50c:	44 e0       	ldi	r20, 0x04	; 4
    c50e:	50 e0       	ldi	r21, 0x00	; 0
    c510:	ce 01       	movw	r24, r28
    c512:	0d 96       	adiw	r24, 0x0d	; 13
    c514:	0e 94 c6 6c 	call	0xd98c	; 0xd98c <memcpy_P>
		}		
			
		gyroADCf = gyroADC[axis]; // Promote gyro signal to suit
    c518:	ad 89       	ldd	r26, Y+21	; 0x15
    c51a:	be 89       	ldd	r27, Y+22	; 0x16
    c51c:	6d 91       	ld	r22, X+
    c51e:	7c 91       	ld	r23, X
    c520:	88 27       	eor	r24, r24
    c522:	77 fd       	sbrc	r23, 7
    c524:	80 95       	com	r24
    c526:	98 2f       	mov	r25, r24
    c528:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    c52c:	6b 01       	movw	r12, r22
    c52e:	7c 01       	movw	r14, r24

		if (Config.Gyro_LPF != NOFILTER)
    c530:	80 91 ab 06 	lds	r24, 0x06AB
    c534:	87 30       	cpi	r24, 0x07	; 7
    c536:	21 f1       	breq	.+72     	; 0xc580 <Sensor_PID+0x3b2>
		{
			// Gyro LPF
			gyroSmooth[axis] = ((gyroSmooth[axis] * (tempf1 - 1.0f)) + gyroADCf) / tempf1;
    c538:	4d 84       	ldd	r4, Y+13	; 0x0d
    c53a:	5e 84       	ldd	r5, Y+14	; 0x0e
    c53c:	6f 84       	ldd	r6, Y+15	; 0x0f
    c53e:	78 88       	ldd	r7, Y+16	; 0x10
    c540:	20 e0       	ldi	r18, 0x00	; 0
    c542:	30 e0       	ldi	r19, 0x00	; 0
    c544:	40 e8       	ldi	r20, 0x80	; 128
    c546:	5f e3       	ldi	r21, 0x3F	; 63
    c548:	c3 01       	movw	r24, r6
    c54a:	b2 01       	movw	r22, r4
    c54c:	0e 94 0b 6a 	call	0xd416	; 0xd416 <__subsf3>
    c550:	e9 89       	ldd	r30, Y+17	; 0x11
    c552:	fa 89       	ldd	r31, Y+18	; 0x12
    c554:	20 81       	ld	r18, Z
    c556:	31 81       	ldd	r19, Z+1	; 0x01
    c558:	42 81       	ldd	r20, Z+2	; 0x02
    c55a:	53 81       	ldd	r21, Z+3	; 0x03
    c55c:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
    c560:	a7 01       	movw	r20, r14
    c562:	96 01       	movw	r18, r12
    c564:	0e 94 0c 6a 	call	0xd418	; 0xd418 <__addsf3>
    c568:	a3 01       	movw	r20, r6
    c56a:	92 01       	movw	r18, r4
    c56c:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
    c570:	a9 89       	ldd	r26, Y+17	; 0x11
    c572:	ba 89       	ldd	r27, Y+18	; 0x12
    c574:	6d 93       	st	X+, r22
    c576:	7d 93       	st	X+, r23
    c578:	8d 93       	st	X+, r24
    c57a:	9c 93       	st	X, r25
    c57c:	13 97       	sbiw	r26, 0x03	; 3
    c57e:	06 c0       	rjmp	.+12     	; 0xc58c <Sensor_PID+0x3be>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values when filter off
			gyroSmooth[axis] = gyroADCf;
    c580:	e9 89       	ldd	r30, Y+17	; 0x11
    c582:	fa 89       	ldd	r31, Y+18	; 0x12
    c584:	c0 82       	st	Z, r12
    c586:	d1 82       	std	Z+1, r13	; 0x01
    c588:	e2 82       	std	Z+2, r14	; 0x02
    c58a:	f3 82       	std	Z+3, r15	; 0x03
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];	
    c58c:	a9 89       	ldd	r26, Y+17	; 0x11
    c58e:	ba 89       	ldd	r27, Y+18	; 0x12
    c590:	6d 91       	ld	r22, X+
    c592:	7d 91       	ld	r23, X+
    c594:	8d 91       	ld	r24, X+
    c596:	9c 91       	ld	r25, X
    c598:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
    c59c:	6f 8b       	std	Y+23, r22	; 0x17
    c59e:	78 8f       	std	Y+24, r23	; 0x18
    c5a0:	89 8f       	std	Y+25, r24	; 0x19
    c5a2:	9a 8f       	std	Y+26, r25	; 0x1a
    c5a4:	2f 89       	ldd	r18, Y+23	; 0x17
    c5a6:	38 8d       	ldd	r19, Y+24	; 0x18
    c5a8:	ed 89       	ldd	r30, Y+21	; 0x15
    c5aa:	fe 89       	ldd	r31, Y+22	; 0x16
    c5ac:	31 83       	std	Z+1, r19	; 0x01
    c5ae:	20 83       	st	Z, r18
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
    c5b0:	6e a1       	ldd	r22, Y+38	; 0x26
    c5b2:	7f a1       	ldd	r23, Y+39	; 0x27
    c5b4:	88 a5       	ldd	r24, Y+40	; 0x28
    c5b6:	99 a5       	ldd	r25, Y+41	; 0x29
    c5b8:	0e 94 0d 6b 	call	0xd61a	; 0xd61a <__floatunsisf>
    c5bc:	20 e0       	ldi	r18, 0x00	; 0
    c5be:	30 e3       	ldi	r19, 0x30	; 48
    c5c0:	4f e5       	ldi	r20, 0x5F	; 95
    c5c2:	55 e4       	ldi	r21, 0x45	; 69
    c5c4:	0e 94 74 6a 	call	0xd4e8	; 0xd4e8 <__divsf3>
    c5c8:	6b 01       	movw	r12, r22
    c5ca:	7c 01       	movw	r14, r24
		//************************************************************
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
    c5cc:	6f 89       	ldd	r22, Y+23	; 0x17
    c5ce:	78 8d       	ldd	r23, Y+24	; 0x18
    c5d0:	6a 0d       	add	r22, r10
    c5d2:	7b 1d       	adc	r23, r11
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    c5d4:	88 27       	eor	r24, r24
    c5d6:	77 fd       	sbrc	r23, 7
    c5d8:	80 95       	com	r24
    c5da:	98 2f       	mov	r25, r24
    c5dc:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    c5e0:	2b 01       	movw	r4, r22
    c5e2:	3c 01       	movw	r6, r24
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
    c5e4:	6f 89       	ldd	r22, Y+23	; 0x17
    c5e6:	78 8d       	ldd	r23, Y+24	; 0x18
    c5e8:	68 0d       	add	r22, r8
    c5ea:	79 1d       	adc	r23, r9
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
    c5ec:	88 27       	eor	r24, r24
    c5ee:	77 fd       	sbrc	r23, 7
    c5f0:	80 95       	com	r24
    c5f2:	98 2f       	mov	r25, r24
    c5f4:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__floatsisf>
    c5f8:	4b 01       	movw	r8, r22
    c5fa:	5c 01       	movw	r10, r24
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
    c5fc:	a7 01       	movw	r20, r14
    c5fe:	96 01       	movw	r18, r12
    c600:	c3 01       	movw	r24, r6
    c602:	b2 01       	movw	r22, r4
    c604:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    c608:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
		tempf2 = tempf2 * factor;
		P2_temp = (int32_t)tempf2;
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
    c60c:	d8 01       	movw	r26, r16
    c60e:	4d 90       	ld	r4, X+
    c610:	5d 90       	ld	r5, X+
    c612:	6d 90       	ld	r6, X+
    c614:	7c 90       	ld	r7, X
    c616:	46 0e       	add	r4, r22
    c618:	57 1e       	adc	r5, r23
    c61a:	68 1e       	adc	r6, r24
    c61c:	79 1e       	adc	r7, r25
    c61e:	f8 01       	movw	r30, r16
    c620:	40 82       	st	Z, r4
    c622:	51 82       	std	Z+1, r5	; 0x01
    c624:	62 82       	std	Z+2, r6	; 0x02
    c626:	73 82       	std	Z+3, r7	; 0x03
		tempf2 = P1_temp;							// Promote int32_t to float
		tempf2 = tempf2 * factor;
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
		
		tempf2 = P2_temp;
		tempf2 = tempf2 * factor;
    c628:	a7 01       	movw	r20, r14
    c62a:	96 01       	movw	r18, r12
    c62c:	c5 01       	movw	r24, r10
    c62e:	b4 01       	movw	r22, r8
    c630:	0e 94 c3 6b 	call	0xd786	; 0xd786 <__mulsf3>
		P2_temp = (int32_t)tempf2;
    c634:	0e 94 dc 6a 	call	0xd5b8	; 0xd5b8 <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
		IntegralGyro[P2][axis] += P2_temp;
    c638:	d8 01       	movw	r26, r16
    c63a:	1c 96       	adiw	r26, 0x0c	; 12
    c63c:	cd 90       	ld	r12, X+
    c63e:	dd 90       	ld	r13, X+
    c640:	ed 90       	ld	r14, X+
    c642:	fc 90       	ld	r15, X
    c644:	1f 97       	sbiw	r26, 0x0f	; 15
    c646:	c6 0e       	add	r12, r22
    c648:	d7 1e       	adc	r13, r23
    c64a:	e8 1e       	adc	r14, r24
    c64c:	f9 1e       	adc	r15, r25
    c64e:	f8 01       	movw	r30, r16
    c650:	c4 86       	std	Z+12, r12	; 0x0c
    c652:	d5 86       	std	Z+13, r13	; 0x0d
    c654:	e6 86       	std	Z+14, r14	; 0x0e
    c656:	f7 86       	std	Z+15, r15	; 0x0f
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    c658:	ea a1       	ldd	r30, Y+34	; 0x22
    c65a:	fb a1       	ldd	r31, Y+35	; 0x23
    c65c:	81 91       	ld	r24, Z+
    c65e:	91 91       	ld	r25, Z+
    c660:	a1 91       	ld	r26, Z+
    c662:	b1 91       	ld	r27, Z+
    c664:	fb a3       	std	Y+35, r31	; 0x23
    c666:	ea a3       	std	Y+34, r30	; 0x22
    c668:	84 15       	cp	r24, r4
    c66a:	95 05       	cpc	r25, r5
    c66c:	a6 05       	cpc	r26, r6
    c66e:	b7 05       	cpc	r27, r7
    c670:	2c f4       	brge	.+10     	; 0xc67c <Sensor_PID+0x4ae>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    c672:	f8 01       	movw	r30, r16
    c674:	80 83       	st	Z, r24
    c676:	91 83       	std	Z+1, r25	; 0x01
    c678:	a2 83       	std	Z+2, r26	; 0x02
    c67a:	b3 83       	std	Z+3, r27	; 0x03
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    c67c:	b0 95       	com	r27
    c67e:	a0 95       	com	r26
    c680:	90 95       	com	r25
    c682:	81 95       	neg	r24
    c684:	9f 4f       	sbci	r25, 0xFF	; 255
    c686:	af 4f       	sbci	r26, 0xFF	; 255
    c688:	bf 4f       	sbci	r27, 0xFF	; 255
    c68a:	f8 01       	movw	r30, r16
    c68c:	40 81       	ld	r20, Z
    c68e:	51 81       	ldd	r21, Z+1	; 0x01
    c690:	62 81       	ldd	r22, Z+2	; 0x02
    c692:	73 81       	ldd	r23, Z+3	; 0x03
    c694:	48 17       	cp	r20, r24
    c696:	59 07       	cpc	r21, r25
    c698:	6a 07       	cpc	r22, r26
    c69a:	7b 07       	cpc	r23, r27
    c69c:	24 f4       	brge	.+8      	; 0xc6a6 <Sensor_PID+0x4d8>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    c69e:	80 83       	st	Z, r24
    c6a0:	91 83       	std	Z+1, r25	; 0x01
    c6a2:	a2 83       	std	Z+2, r26	; 0x02
    c6a4:	b3 83       	std	Z+3, r27	; 0x03
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    c6a6:	ec a1       	ldd	r30, Y+36	; 0x24
    c6a8:	fd a1       	ldd	r31, Y+37	; 0x25
    c6aa:	81 91       	ld	r24, Z+
    c6ac:	91 91       	ld	r25, Z+
    c6ae:	a1 91       	ld	r26, Z+
    c6b0:	b1 91       	ld	r27, Z+
    c6b2:	fd a3       	std	Y+37, r31	; 0x25
    c6b4:	ec a3       	std	Y+36, r30	; 0x24
    c6b6:	f8 01       	movw	r30, r16
    c6b8:	44 85       	ldd	r20, Z+12	; 0x0c
    c6ba:	55 85       	ldd	r21, Z+13	; 0x0d
    c6bc:	66 85       	ldd	r22, Z+14	; 0x0e
    c6be:	77 85       	ldd	r23, Z+15	; 0x0f
    c6c0:	84 17       	cp	r24, r20
    c6c2:	95 07       	cpc	r25, r21
    c6c4:	a6 07       	cpc	r26, r22
    c6c6:	b7 07       	cpc	r27, r23
    c6c8:	24 f4       	brge	.+8      	; 0xc6d2 <Sensor_PID+0x504>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    c6ca:	84 87       	std	Z+12, r24	; 0x0c
    c6cc:	95 87       	std	Z+13, r25	; 0x0d
    c6ce:	a6 87       	std	Z+14, r26	; 0x0e
    c6d0:	b7 87       	std	Z+15, r27	; 0x0f
			}
			
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    c6d2:	b0 95       	com	r27
    c6d4:	a0 95       	com	r26
    c6d6:	90 95       	com	r25
    c6d8:	81 95       	neg	r24
    c6da:	9f 4f       	sbci	r25, 0xFF	; 255
    c6dc:	af 4f       	sbci	r26, 0xFF	; 255
    c6de:	bf 4f       	sbci	r27, 0xFF	; 255
    c6e0:	f8 01       	movw	r30, r16
    c6e2:	44 85       	ldd	r20, Z+12	; 0x0c
    c6e4:	55 85       	ldd	r21, Z+13	; 0x0d
    c6e6:	66 85       	ldd	r22, Z+14	; 0x0e
    c6e8:	77 85       	ldd	r23, Z+15	; 0x0f
    c6ea:	48 17       	cp	r20, r24
    c6ec:	59 07       	cpc	r21, r25
    c6ee:	6a 07       	cpc	r22, r26
    c6f0:	7b 07       	cpc	r23, r27
    c6f2:	24 f4       	brge	.+8      	; 0xc6fc <Sensor_PID+0x52e>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    c6f4:	84 87       	std	Z+12, r24	; 0x0c
    c6f6:	95 87       	std	Z+13, r25	; 0x0d
    c6f8:	a6 87       	std	Z+14, r26	; 0x0e
    c6fa:	b7 87       	std	Z+15, r27	; 0x0f

		//************************************************************
		// Sum gyro readings for P-terms for later averaging
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
    c6fc:	2f 89       	ldd	r18, Y+23	; 0x17
    c6fe:	38 8d       	ldd	r19, Y+24	; 0x18
    c700:	a9 01       	movw	r20, r18
    c702:	66 27       	eor	r22, r22
    c704:	57 fd       	sbrc	r21, 7
    c706:	60 95       	com	r22
    c708:	76 2f       	mov	r23, r22
    c70a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    c70c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    c70e:	80 81       	ld	r24, Z
    c710:	91 81       	ldd	r25, Z+1	; 0x01
    c712:	a2 81       	ldd	r26, Z+2	; 0x02
    c714:	b3 81       	ldd	r27, Z+3	; 0x03
    c716:	84 0f       	add	r24, r20
    c718:	95 1f       	adc	r25, r21
    c71a:	a6 1f       	adc	r26, r22
    c71c:	b7 1f       	adc	r27, r23
    c71e:	81 93       	st	Z+, r24
    c720:	91 93       	st	Z+, r25
    c722:	a1 93       	st	Z+, r26
    c724:	b1 93       	st	Z+, r27
    c726:	fc 8f       	std	Y+28, r31	; 0x1c
    c728:	eb 8f       	std	Y+27, r30	; 0x1b
    c72a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    c72c:	ff 5f       	subi	r31, 0xFF	; 255
    c72e:	fd 8f       	std	Y+29, r31	; 0x1d
    c730:	0c 5f       	subi	r16, 0xFC	; 252
    c732:	1f 4f       	sbci	r17, 0xFF	; 255
    c734:	29 89       	ldd	r18, Y+17	; 0x11
    c736:	3a 89       	ldd	r19, Y+18	; 0x12
    c738:	2c 5f       	subi	r18, 0xFC	; 252
    c73a:	3f 4f       	sbci	r19, 0xFF	; 255
    c73c:	3a 8b       	std	Y+18, r19	; 0x12
    c73e:	29 8b       	std	Y+17, r18	; 0x11
    c740:	8d 89       	ldd	r24, Y+21	; 0x15
    c742:	9e 89       	ldd	r25, Y+22	; 0x16
    c744:	02 96       	adiw	r24, 0x02	; 2
    c746:	9e 8b       	std	Y+22, r25	; 0x16
    c748:	8d 8b       	std	Y+21, r24	; 0x15
    c74a:	92 e0       	ldi	r25, 0x02	; 2
    c74c:	29 0e       	add	r2, r25
    c74e:	31 1c       	adc	r3, r1
		{
			GyroAvgNoise = 999.0f;
		}
	}

	for (axis = 0; axis <= YAW; axis ++)
    c750:	f3 30       	cpi	r31, 0x03	; 3
    c752:	09 f0       	breq	.+2      	; 0xc756 <Sensor_PID+0x588>
    c754:	84 ce       	rjmp	.-760    	; 0xc45e <Sensor_PID+0x290>
		PID_AvgGyro[axis] += gyroADC[axis];
	
	} // for (axis = 0; axis <= YAW; axis ++)
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    c756:	40 91 26 05 	lds	r20, 0x0526
    c75a:	50 91 27 05 	lds	r21, 0x0527
    c75e:	66 27       	eor	r22, r22
    c760:	57 fd       	sbrc	r21, 7
    c762:	60 95       	com	r22
    c764:	76 2f       	mov	r23, r22
    c766:	80 91 67 05 	lds	r24, 0x0567
    c76a:	90 91 68 05 	lds	r25, 0x0568
    c76e:	a0 91 69 05 	lds	r26, 0x0569
    c772:	b0 91 6a 05 	lds	r27, 0x056A
    c776:	84 0f       	add	r24, r20
    c778:	95 1f       	adc	r25, r21
    c77a:	a6 1f       	adc	r26, r22
    c77c:	b7 1f       	adc	r27, r23
    c77e:	80 93 67 05 	sts	0x0567, r24
    c782:	90 93 68 05 	sts	0x0568, r25
    c786:	a0 93 69 05 	sts	0x0569, r26
    c78a:	b0 93 6a 05 	sts	0x056A, r27
}
    c78e:	a9 96       	adiw	r28, 0x29	; 41
    c790:	0f b6       	in	r0, 0x3f	; 63
    c792:	f8 94       	cli
    c794:	de bf       	out	0x3e, r29	; 62
    c796:	0f be       	out	0x3f, r0	; 63
    c798:	cd bf       	out	0x3d, r28	; 61
    c79a:	df 91       	pop	r29
    c79c:	cf 91       	pop	r28
    c79e:	1f 91       	pop	r17
    c7a0:	0f 91       	pop	r16
    c7a2:	ff 90       	pop	r15
    c7a4:	ef 90       	pop	r14
    c7a6:	df 90       	pop	r13
    c7a8:	cf 90       	pop	r12
    c7aa:	bf 90       	pop	r11
    c7ac:	af 90       	pop	r10
    c7ae:	9f 90       	pop	r9
    c7b0:	8f 90       	pop	r8
    c7b2:	7f 90       	pop	r7
    c7b4:	6f 90       	pop	r6
    c7b6:	5f 90       	pop	r5
    c7b8:	4f 90       	pop	r4
    c7ba:	3f 90       	pop	r3
    c7bc:	2f 90       	pop	r2
    c7be:	08 95       	ret

0000c7c0 <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    c7c0:	2f 92       	push	r2
    c7c2:	3f 92       	push	r3
    c7c4:	4f 92       	push	r4
    c7c6:	5f 92       	push	r5
    c7c8:	6f 92       	push	r6
    c7ca:	7f 92       	push	r7
    c7cc:	8f 92       	push	r8
    c7ce:	9f 92       	push	r9
    c7d0:	af 92       	push	r10
    c7d2:	bf 92       	push	r11
    c7d4:	cf 92       	push	r12
    c7d6:	df 92       	push	r13
    c7d8:	ef 92       	push	r14
    c7da:	ff 92       	push	r15
    c7dc:	0f 93       	push	r16
    c7de:	1f 93       	push	r17
    c7e0:	cf 93       	push	r28
    c7e2:	df 93       	push	r29
    c7e4:	cd b7       	in	r28, 0x3d	; 61
    c7e6:	de b7       	in	r29, 0x3e	; 62
    c7e8:	cd 54       	subi	r28, 0x4D	; 77
    c7ea:	d1 09       	sbc	r29, r1
    c7ec:	0f b6       	in	r0, 0x3f	; 63
    c7ee:	f8 94       	cli
    c7f0:	de bf       	out	0x3e, r29	; 62
    c7f2:	0f be       	out	0x3f, r0	; 63
    c7f4:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    c7f6:	80 91 4d 06 	lds	r24, 0x064D
    c7fa:	8d 8b       	std	Y+21, r24	; 0x15
    c7fc:	80 91 53 06 	lds	r24, 0x0653
    c800:	8e 8b       	std	Y+22, r24	; 0x16
    c802:	80 91 59 06 	lds	r24, 0x0659
    c806:	8f 8b       	std	Y+23, r24	; 0x17
    c808:	80 91 5f 06 	lds	r24, 0x065F
    c80c:	88 8f       	std	Y+24, r24	; 0x18
    c80e:	80 91 65 06 	lds	r24, 0x0665
    c812:	89 8f       	std	Y+25, r24	; 0x19
    c814:	80 91 6b 06 	lds	r24, 0x066B
    c818:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    c81a:	80 91 4e 06 	lds	r24, 0x064E
    c81e:	8f 87       	std	Y+15, r24	; 0x0f
    c820:	80 91 54 06 	lds	r24, 0x0654
    c824:	88 8b       	std	Y+16, r24	; 0x10
    c826:	80 91 5a 06 	lds	r24, 0x065A
    c82a:	89 8b       	std	Y+17, r24	; 0x11
    c82c:	80 91 60 06 	lds	r24, 0x0660
    c830:	8a 8b       	std	Y+18, r24	; 0x12
    c832:	80 91 66 06 	lds	r24, 0x0666
    c836:	8b 8b       	std	Y+19, r24	; 0x13
    c838:	80 91 6c 06 	lds	r24, 0x066C
    c83c:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    c83e:	80 91 51 06 	lds	r24, 0x0651
    c842:	89 87       	std	Y+9, r24	; 0x09
    c844:	80 91 57 06 	lds	r24, 0x0657
    c848:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    c84a:	20 91 5e 06 	lds	r18, 0x065E
    c84e:	2d a7       	std	Y+45, r18	; 0x2d
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    c850:	2b 87       	std	Y+11, r18	; 0x0b
    c852:	80 91 63 06 	lds	r24, 0x0663
    c856:	8c 87       	std	Y+12, r24	; 0x0c
    c858:	80 91 69 06 	lds	r24, 0x0669
    c85c:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    c85e:	30 91 70 06 	lds	r19, 0x0670
    c862:	3e a7       	std	Y+46, r19	; 0x2e
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    c864:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    c866:	80 91 fb 07 	lds	r24, 0x07FB
    c86a:	90 91 fc 07 	lds	r25, 0x07FC
    c86e:	9a 83       	std	Y+2, r25	; 0x02
    c870:	89 83       	std	Y+1, r24	; 0x01
    c872:	80 91 ff 07 	lds	r24, 0x07FF
    c876:	90 91 00 08 	lds	r25, 0x0800
    c87a:	9c 83       	std	Y+4, r25	; 0x04
    c87c:	8b 83       	std	Y+3, r24	; 0x03
    c87e:	80 91 fd 07 	lds	r24, 0x07FD
    c882:	90 91 fe 07 	lds	r25, 0x07FE
    c886:	9e 83       	std	Y+6, r25	; 0x06
    c888:	8d 83       	std	Y+5, r24	; 0x05
    c88a:	80 91 01 08 	lds	r24, 0x0801
    c88e:	90 91 02 08 	lds	r25, 0x0802
    c892:	98 87       	std	Y+8, r25	; 0x08
    c894:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    c896:	20 91 2c 05 	lds	r18, 0x052C
    c89a:	30 e0       	ldi	r19, 0x00	; 0
    c89c:	40 e0       	ldi	r20, 0x00	; 0
    c89e:	50 e0       	ldi	r21, 0x00	; 0
    c8a0:	60 91 67 05 	lds	r22, 0x0567
    c8a4:	70 91 68 05 	lds	r23, 0x0568
    c8a8:	80 91 69 05 	lds	r24, 0x0569
    c8ac:	90 91 6a 05 	lds	r25, 0x056A
    c8b0:	0e 94 4e 6c 	call	0xd89c	; 0xd89c <__divmodsi4>
    c8b4:	2d 96       	adiw	r28, 0x0d	; 13
    c8b6:	2c af       	std	Y+60, r18	; 0x3c
    c8b8:	3d af       	std	Y+61, r19	; 0x3d
    c8ba:	4e af       	std	Y+62, r20	; 0x3e
    c8bc:	5f af       	std	Y+63, r21	; 0x3f
    c8be:	2d 97       	sbiw	r28, 0x0d	; 13
	PID_AvgAccVert = 0;							// Reset average
    c8c0:	10 92 67 05 	sts	0x0567, r1
    c8c4:	10 92 68 05 	sts	0x0568, r1
    c8c8:	10 92 69 05 	sts	0x0569, r1
    c8cc:	10 92 6a 05 	sts	0x056A, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    c8d0:	80 91 5d 06 	lds	r24, 0x065D
    c8d4:	40 e4       	ldi	r20, 0x40	; 64
    c8d6:	84 02       	muls	r24, r20
    c8d8:	c0 01       	movw	r24, r0
    c8da:	11 24       	eor	r1, r1
    c8dc:	9c 01       	movw	r18, r24
    c8de:	44 27       	eor	r20, r20
    c8e0:	37 fd       	sbrc	r19, 7
    c8e2:	40 95       	com	r20
    c8e4:	54 2f       	mov	r21, r20
    c8e6:	29 af       	std	Y+57, r18	; 0x39
    c8e8:	3a af       	std	Y+58, r19	; 0x3a
    c8ea:	4b af       	std	Y+59, r20	; 0x3b
    c8ec:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    c8ee:	80 91 6f 06 	lds	r24, 0x066F
    c8f2:	30 e4       	ldi	r19, 0x40	; 64
    c8f4:	83 02       	muls	r24, r19
    c8f6:	c0 01       	movw	r24, r0
    c8f8:	11 24       	eor	r1, r1
    c8fa:	9c 01       	movw	r18, r24
    c8fc:	44 27       	eor	r20, r20
    c8fe:	37 fd       	sbrc	r19, 7
    c900:	40 95       	com	r20
    c902:	54 2f       	mov	r21, r20
    c904:	21 96       	adiw	r28, 0x01	; 1
    c906:	2c af       	std	Y+60, r18	; 0x3c
    c908:	3d af       	std	Y+61, r19	; 0x3d
    c90a:	4e af       	std	Y+62, r20	; 0x3e
    c90c:	5f af       	std	Y+63, r21	; 0x3f
    c90e:	21 97       	sbiw	r28, 0x01	; 1
    c910:	42 e3       	ldi	r20, 0x32	; 50
    c912:	59 e0       	ldi	r21, 0x09	; 9
    c914:	5e a3       	std	Y+38, r21	; 0x26
    c916:	4d a3       	std	Y+37, r20	; 0x25
    c918:	8e eb       	ldi	r24, 0xBE	; 190
    c91a:	95 e0       	ldi	r25, 0x05	; 5
    c91c:	98 af       	std	Y+56, r25	; 0x38
    c91e:	8f ab       	std	Y+55, r24	; 0x37
    c920:	aa e1       	ldi	r26, 0x1A	; 26
    c922:	b9 e0       	ldi	r27, 0x09	; 9
    c924:	bc a3       	std	Y+36, r27	; 0x24
    c926:	ab a3       	std	Y+35, r26	; 0x23
    c928:	e8 ef       	ldi	r30, 0xF8	; 248
    c92a:	f5 e0       	ldi	r31, 0x05	; 5
    c92c:	f8 a7       	std	Y+40, r31	; 0x28
    c92e:	ef a3       	std	Y+39, r30	; 0x27
    c930:	9e 01       	movw	r18, r28
    c932:	2f 5f       	subi	r18, 0xFF	; 255
    c934:	3f 4f       	sbci	r19, 0xFF	; 255
    c936:	3a a3       	std	Y+34, r19	; 0x22
    c938:	29 a3       	std	Y+33, r18	; 0x21
    c93a:	46 e2       	ldi	r20, 0x26	; 38
    c93c:	59 e0       	ldi	r21, 0x09	; 9
    c93e:	58 a3       	std	Y+32, r21	; 0x20
    c940:	4f 8f       	std	Y+31, r20	; 0x1f
    c942:	1e 01       	movw	r2, r28
    c944:	5c e0       	ldi	r21, 0x0C	; 12
    c946:	25 0e       	add	r2, r21
    c948:	31 1c       	adc	r3, r1
    c94a:	8d e7       	ldi	r24, 0x7D	; 125
    c94c:	96 e0       	ldi	r25, 0x06	; 6
    c94e:	9c a7       	std	Y+44, r25	; 0x2c
    c950:	8b a7       	std	Y+43, r24	; 0x2b
    c952:	de 01       	movw	r26, r28
    c954:	55 96       	adiw	r26, 0x15	; 21
    c956:	ba a7       	std	Y+42, r27	; 0x2a
    c958:	a9 a7       	std	Y+41, r26	; 0x29
    c95a:	4a ee       	ldi	r20, 0xEA	; 234
    c95c:	c4 2e       	mov	r12, r20
    c95e:	48 e0       	ldi	r20, 0x08	; 8
    c960:	d4 2e       	mov	r13, r20
    c962:	fe 01       	movw	r30, r28
    c964:	3f 96       	adiw	r30, 0x0f	; 15
    c966:	fe ab       	std	Y+54, r31	; 0x36
    c968:	ed ab       	std	Y+53, r30	; 0x35
    c96a:	29 5e       	subi	r18, 0xE9	; 233
    c96c:	3f 4f       	sbci	r19, 0xFF	; 255
    c96e:	38 ab       	std	Y+48, r19	; 0x30
    c970:	2f a7       	std	Y+47, r18	; 0x2f
    c972:	ae 01       	movw	r20, r28
    c974:	4e 5e       	subi	r20, 0xEE	; 238
    c976:	5f 4f       	sbci	r21, 0xFF	; 255
    c978:	5a ab       	std	Y+50, r21	; 0x32
    c97a:	49 ab       	std	Y+49, r20	; 0x31
    c97c:	81 e7       	ldi	r24, 0x71	; 113
    c97e:	96 e0       	ldi	r25, 0x06	; 6
    c980:	9c ab       	std	Y+52, r25	; 0x34
    c982:	8b ab       	std	Y+51, r24	; 0x33
    c984:	e1 2c       	mov	r14, r1
    c986:	f1 2c       	mov	r15, r1
	{
		//************************************************************
		// Get average gyro readings for P-terms
		//************************************************************

		gyroADC[axis] = (int16_t)(PID_AvgGyro[axis] / LoopCount);
    c988:	20 91 2c 05 	lds	r18, 0x052C
    c98c:	30 e0       	ldi	r19, 0x00	; 0
    c98e:	40 e0       	ldi	r20, 0x00	; 0
    c990:	50 e0       	ldi	r21, 0x00	; 0
    c992:	ad a1       	ldd	r26, Y+37	; 0x25
    c994:	be a1       	ldd	r27, Y+38	; 0x26
    c996:	6d 91       	ld	r22, X+
    c998:	7d 91       	ld	r23, X+
    c99a:	8d 91       	ld	r24, X+
    c99c:	9c 91       	ld	r25, X
    c99e:	0e 94 4e 6c 	call	0xd89c	; 0xd89c <__divmodsi4>
    c9a2:	2b 8f       	std	Y+27, r18	; 0x1b
    c9a4:	3c 8f       	std	Y+28, r19	; 0x1c
    c9a6:	4d 8f       	std	Y+29, r20	; 0x1d
    c9a8:	5e 8f       	std	Y+30, r21	; 0x1e
    c9aa:	ef a9       	ldd	r30, Y+55	; 0x37
    c9ac:	f8 ad       	ldd	r31, Y+56	; 0x38
    c9ae:	21 93       	st	Z+, r18
    c9b0:	31 93       	st	Z+, r19
    c9b2:	f8 af       	std	Y+56, r31	; 0x38
    c9b4:	ef ab       	std	Y+55, r30	; 0x37
		PID_AvgGyro[axis] = 0;					// Reset average
    c9b6:	ad a1       	ldd	r26, Y+37	; 0x25
    c9b8:	be a1       	ldd	r27, Y+38	; 0x26
    c9ba:	1d 92       	st	X+, r1
    c9bc:	1d 92       	st	X+, r1
    c9be:	1d 92       	st	X+, r1
    c9c0:	1c 92       	st	X, r1
    c9c2:	13 97       	sbiw	r26, 0x03	; 3
    c9c4:	2e 96       	adiw	r28, 0x0e	; 14
    c9c6:	ef ae       	std	Y+63, r14	; 0x3f
    c9c8:	2e 97       	sbiw	r28, 0x0e	; 14

		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    c9ca:	ee 2d       	mov	r30, r14
    c9cc:	e2 30       	cpi	r30, 0x02	; 2
    c9ce:	39 f0       	breq	.+14     	; 0xc9de <Calculate_PID+0x21e>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    c9d0:	81 2c       	mov	r8, r1
    c9d2:	91 2c       	mov	r9, r1
    c9d4:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    c9d6:	41 2c       	mov	r4, r1
    c9d8:	51 2c       	mov	r5, r1
    c9da:	32 01       	movw	r6, r4
    c9dc:	0a c0       	rjmp	.+20     	; 0xc9f2 <Calculate_PID+0x232>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    c9de:	21 96       	adiw	r28, 0x01	; 1
    c9e0:	8c ac       	ldd	r8, Y+60	; 0x3c
    c9e2:	9d ac       	ldd	r9, Y+61	; 0x3d
    c9e4:	ae ac       	ldd	r10, Y+62	; 0x3e
    c9e6:	bf ac       	ldd	r11, Y+63	; 0x3f
    c9e8:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    c9ea:	49 ac       	ldd	r4, Y+57	; 0x39
    c9ec:	5a ac       	ldd	r5, Y+58	; 0x3a
    c9ee:	6b ac       	ldd	r6, Y+59	; 0x3b
    c9f0:	7c ac       	ldd	r7, Y+60	; 0x3c
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    c9f2:	a9 a5       	ldd	r26, Y+41	; 0x29
    c9f4:	ba a5       	ldd	r27, Y+42	; 0x2a
    c9f6:	2d 91       	ld	r18, X+
    c9f8:	ba a7       	std	Y+42, r27	; 0x2a
    c9fa:	a9 a7       	std	Y+41, r26	; 0x29
    c9fc:	33 27       	eor	r19, r19
    c9fe:	27 fd       	sbrc	r18, 7
    ca00:	30 95       	com	r19
    ca02:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ca04:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ca06:	2e 9f       	mul	r18, r30
    ca08:	c0 01       	movw	r24, r0
    ca0a:	2f 9f       	mul	r18, r31
    ca0c:	90 0d       	add	r25, r0
    ca0e:	3e 9f       	mul	r19, r30
    ca10:	90 0d       	add	r25, r0
    ca12:	11 24       	eor	r1, r1
    ca14:	9c 01       	movw	r18, r24
    ca16:	44 27       	eor	r20, r20
    ca18:	37 fd       	sbrc	r19, 7
    ca1a:	40 95       	com	r20
    ca1c:	54 2f       	mov	r21, r20
    ca1e:	24 0d       	add	r18, r4
    ca20:	35 1d       	adc	r19, r5
    ca22:	46 1d       	adc	r20, r6
    ca24:	57 1d       	adc	r21, r7
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    ca26:	a3 e0       	ldi	r26, 0x03	; 3
    ca28:	b0 e0       	ldi	r27, 0x00	; 0
    ca2a:	0e 94 91 6c 	call	0xd922	; 0xd922 <__muluhisi3>
    ca2e:	25 96       	adiw	r28, 0x05	; 5
    ca30:	6c af       	std	Y+60, r22	; 0x3c
    ca32:	7d af       	std	Y+61, r23	; 0x3d
    ca34:	8e af       	std	Y+62, r24	; 0x3e
    ca36:	9f af       	std	Y+63, r25	; 0x3f
    ca38:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    ca3a:	ad a9       	ldd	r26, Y+53	; 0x35
    ca3c:	be a9       	ldd	r27, Y+54	; 0x36
    ca3e:	8d 91       	ld	r24, X+
    ca40:	be ab       	std	Y+54, r27	; 0x36
    ca42:	ad ab       	std	Y+53, r26	; 0x35
    ca44:	f6 01       	movw	r30, r12
    ca46:	20 81       	ld	r18, Z
    ca48:	31 81       	ldd	r19, Z+1	; 0x01
    ca4a:	42 81       	ldd	r20, Z+2	; 0x02
    ca4c:	53 81       	ldd	r21, Z+3	; 0x03
    ca4e:	a8 2f       	mov	r26, r24
    ca50:	bb 27       	eor	r27, r27
    ca52:	a7 fd       	sbrc	r26, 7
    ca54:	b0 95       	com	r27
    ca56:	0e 94 9c 6c 	call	0xd938	; 0xd938 <__mulshisi3>
    ca5a:	2b 01       	movw	r4, r22
    ca5c:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    ca5e:	05 e0       	ldi	r16, 0x05	; 5
    ca60:	75 94       	asr	r7
    ca62:	67 94       	ror	r6
    ca64:	57 94       	ror	r5
    ca66:	47 94       	ror	r4
    ca68:	0a 95       	dec	r16
    ca6a:	d1 f7       	brne	.-12     	; 0xca60 <Calculate_PID+0x2a0>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    ca6c:	af a5       	ldd	r26, Y+47	; 0x2f
    ca6e:	b8 a9       	ldd	r27, Y+48	; 0x30
    ca70:	8d 91       	ld	r24, X+
    ca72:	b8 ab       	std	Y+48, r27	; 0x30
    ca74:	af a7       	std	Y+47, r26	; 0x2f
    ca76:	99 27       	eor	r25, r25
    ca78:	87 fd       	sbrc	r24, 7
    ca7a:	90 95       	com	r25
    ca7c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ca7e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ca80:	8e 9f       	mul	r24, r30
    ca82:	90 01       	movw	r18, r0
    ca84:	8f 9f       	mul	r24, r31
    ca86:	30 0d       	add	r19, r0
    ca88:	9e 9f       	mul	r25, r30
    ca8a:	30 0d       	add	r19, r0
    ca8c:	11 24       	eor	r1, r1
    ca8e:	44 27       	eor	r20, r20
    ca90:	37 fd       	sbrc	r19, 7
    ca92:	40 95       	com	r20
    ca94:	54 2f       	mov	r21, r20
    ca96:	28 0d       	add	r18, r8
    ca98:	39 1d       	adc	r19, r9
    ca9a:	4a 1d       	adc	r20, r10
    ca9c:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    ca9e:	a3 e0       	ldi	r26, 0x03	; 3
    caa0:	b0 e0       	ldi	r27, 0x00	; 0
    caa2:	0e 94 91 6c 	call	0xd922	; 0xd922 <__muluhisi3>
    caa6:	29 96       	adiw	r28, 0x09	; 9
    caa8:	6c af       	std	Y+60, r22	; 0x3c
    caaa:	7d af       	std	Y+61, r23	; 0x3d
    caac:	8e af       	std	Y+62, r24	; 0x3e
    caae:	9f af       	std	Y+63, r25	; 0x3f
    cab0:	29 97       	sbiw	r28, 0x09	; 9

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    cab2:	a9 a9       	ldd	r26, Y+49	; 0x31
    cab4:	ba a9       	ldd	r27, Y+50	; 0x32
    cab6:	8d 91       	ld	r24, X+
    cab8:	ba ab       	std	Y+50, r27	; 0x32
    caba:	a9 ab       	std	Y+49, r26	; 0x31
    cabc:	f6 01       	movw	r30, r12
    cabe:	24 85       	ldd	r18, Z+12	; 0x0c
    cac0:	35 85       	ldd	r19, Z+13	; 0x0d
    cac2:	46 85       	ldd	r20, Z+14	; 0x0e
    cac4:	57 85       	ldd	r21, Z+15	; 0x0f
    cac6:	a8 2f       	mov	r26, r24
    cac8:	bb 27       	eor	r27, r27
    caca:	a7 fd       	sbrc	r26, 7
    cacc:	b0 95       	com	r27
    cace:	0e 94 9c 6c 	call	0xd938	; 0xd938 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    cad2:	25 e0       	ldi	r18, 0x05	; 5
    cad4:	95 95       	asr	r25
    cad6:	87 95       	ror	r24
    cad8:	77 95       	ror	r23
    cada:	67 95       	ror	r22
    cadc:	2a 95       	dec	r18
    cade:	d1 f7       	brne	.-12     	; 0xcad4 <Calculate_PID+0x314>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    cae0:	ab a9       	ldd	r26, Y+51	; 0x33
    cae2:	bc a9       	ldd	r27, Y+52	; 0x34
    cae4:	8d 90       	ld	r8, X+
    cae6:	9d 90       	ld	r9, X+
    cae8:	ad 90       	ld	r10, X+
    caea:	bd 90       	ld	r11, X+
    caec:	bc ab       	std	Y+52, r27	; 0x34
    caee:	ab ab       	std	Y+51, r26	; 0x33
    caf0:	84 14       	cp	r8, r4
    caf2:	95 04       	cpc	r9, r5
    caf4:	a6 04       	cpc	r10, r6
    caf6:	b7 04       	cpc	r11, r7
    caf8:	84 f0       	brlt	.+32     	; 0xcb1a <Calculate_PID+0x35a>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    cafa:	00 27       	eor	r16, r16
    cafc:	11 27       	eor	r17, r17
    cafe:	98 01       	movw	r18, r16
    cb00:	08 19       	sub	r16, r8
    cb02:	19 09       	sbc	r17, r9
    cb04:	2a 09       	sbc	r18, r10
    cb06:	3b 09       	sbc	r19, r11
    cb08:	53 01       	movw	r10, r6
    cb0a:	42 01       	movw	r8, r4
    cb0c:	40 16       	cp	r4, r16
    cb0e:	51 06       	cpc	r5, r17
    cb10:	62 06       	cpc	r6, r18
    cb12:	73 06       	cpc	r7, r19
    cb14:	14 f4       	brge	.+4      	; 0xcb1a <Calculate_PID+0x35a>
    cb16:	48 01       	movw	r8, r16
    cb18:	59 01       	movw	r10, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    cb1a:	ab a5       	ldd	r26, Y+43	; 0x2b
    cb1c:	bc a5       	ldd	r27, Y+44	; 0x2c
    cb1e:	2d 91       	ld	r18, X+
    cb20:	3d 91       	ld	r19, X+
    cb22:	4d 91       	ld	r20, X+
    cb24:	5d 91       	ld	r21, X+
    cb26:	bc a7       	std	Y+44, r27	; 0x2c
    cb28:	ab a7       	std	Y+43, r26	; 0x2b
    cb2a:	2b 8f       	std	Y+27, r18	; 0x1b
    cb2c:	3c 8f       	std	Y+28, r19	; 0x1c
    cb2e:	4d 8f       	std	Y+29, r20	; 0x1d
    cb30:	5e 8f       	std	Y+30, r21	; 0x1e
    cb32:	26 17       	cp	r18, r22
    cb34:	37 07       	cpc	r19, r23
    cb36:	48 07       	cpc	r20, r24
    cb38:	59 07       	cpc	r21, r25
    cb3a:	b4 f0       	brlt	.+44     	; 0xcb68 <Calculate_PID+0x3a8>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    cb3c:	89 01       	movw	r16, r18
    cb3e:	9a 01       	movw	r18, r20
    cb40:	30 95       	com	r19
    cb42:	20 95       	com	r18
    cb44:	10 95       	com	r17
    cb46:	01 95       	neg	r16
    cb48:	1f 4f       	sbci	r17, 0xFF	; 255
    cb4a:	2f 4f       	sbci	r18, 0xFF	; 255
    cb4c:	3f 4f       	sbci	r19, 0xFF	; 255
    cb4e:	6b 8f       	std	Y+27, r22	; 0x1b
    cb50:	7c 8f       	std	Y+28, r23	; 0x1c
    cb52:	8d 8f       	std	Y+29, r24	; 0x1d
    cb54:	9e 8f       	std	Y+30, r25	; 0x1e
    cb56:	60 17       	cp	r22, r16
    cb58:	71 07       	cpc	r23, r17
    cb5a:	82 07       	cpc	r24, r18
    cb5c:	93 07       	cpc	r25, r19
    cb5e:	24 f4       	brge	.+8      	; 0xcb68 <Calculate_PID+0x3a8>
    cb60:	0b 8f       	std	Y+27, r16	; 0x1b
    cb62:	1c 8f       	std	Y+28, r17	; 0x1c
    cb64:	2d 8f       	std	Y+29, r18	; 0x1d
    cb66:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE); // Currently PID_SCALE = 6 so /64
    cb68:	25 96       	adiw	r28, 0x05	; 5
    cb6a:	4c ac       	ldd	r4, Y+60	; 0x3c
    cb6c:	5d ac       	ldd	r5, Y+61	; 0x3d
    cb6e:	6e ac       	ldd	r6, Y+62	; 0x3e
    cb70:	7f ac       	ldd	r7, Y+63	; 0x3f
    cb72:	25 97       	sbiw	r28, 0x05	; 5
    cb74:	48 0c       	add	r4, r8
    cb76:	59 1c       	adc	r5, r9
    cb78:	6a 1c       	adc	r6, r10
    cb7a:	7b 1c       	adc	r7, r11
    cb7c:	a6 e0       	ldi	r26, 0x06	; 6
    cb7e:	75 94       	asr	r7
    cb80:	67 94       	ror	r6
    cb82:	57 94       	ror	r5
    cb84:	47 94       	ror	r4
    cb86:	aa 95       	dec	r26
    cb88:	d1 f7       	brne	.-12     	; 0xcb7e <Calculate_PID+0x3be>
    cb8a:	eb a1       	ldd	r30, Y+35	; 0x23
    cb8c:	fc a1       	ldd	r31, Y+36	; 0x24
    cb8e:	51 82       	std	Z+1, r5	; 0x01
    cb90:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    cb92:	29 96       	adiw	r28, 0x09	; 9
    cb94:	8c ad       	ldd	r24, Y+60	; 0x3c
    cb96:	9d ad       	ldd	r25, Y+61	; 0x3d
    cb98:	ae ad       	ldd	r26, Y+62	; 0x3e
    cb9a:	bf ad       	ldd	r27, Y+63	; 0x3f
    cb9c:	29 97       	sbiw	r28, 0x09	; 9
    cb9e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    cba0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    cba2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    cba4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    cba6:	82 0f       	add	r24, r18
    cba8:	93 1f       	adc	r25, r19
    cbaa:	a4 1f       	adc	r26, r20
    cbac:	b5 1f       	adc	r27, r21
    cbae:	16 e0       	ldi	r17, 0x06	; 6
    cbb0:	b5 95       	asr	r27
    cbb2:	a7 95       	ror	r26
    cbb4:	97 95       	ror	r25
    cbb6:	87 95       	ror	r24
    cbb8:	1a 95       	dec	r17
    cbba:	d1 f7       	brne	.-12     	; 0xcbb0 <Calculate_PID+0x3f0>
    cbbc:	97 83       	std	Z+7, r25	; 0x07
    cbbe:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    cbc0:	2e 96       	adiw	r28, 0x0e	; 14
    cbc2:	ef ad       	ldd	r30, Y+63	; 0x3f
    cbc4:	2e 97       	sbiw	r28, 0x0e	; 14
    cbc6:	e2 30       	cpi	r30, 0x02	; 2
    cbc8:	d9 f1       	breq	.+118    	; 0xcc40 <Calculate_PID+0x480>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    cbca:	af a1       	ldd	r26, Y+39	; 0x27
    cbcc:	b8 a5       	ldd	r27, Y+40	; 0x28
    cbce:	4d 91       	ld	r20, X+
    cbd0:	5c 91       	ld	r21, X
    cbd2:	e9 a1       	ldd	r30, Y+33	; 0x21
    cbd4:	fa a1       	ldd	r31, Y+34	; 0x22
    cbd6:	80 81       	ld	r24, Z
    cbd8:	91 81       	ldd	r25, Z+1	; 0x01
    cbda:	9a 01       	movw	r18, r20
    cbdc:	28 1b       	sub	r18, r24
    cbde:	39 0b       	sbc	r19, r25
    cbe0:	e9 e0       	ldi	r30, 0x09	; 9
    cbe2:	f0 e0       	ldi	r31, 0x00	; 0
    cbe4:	ec 0f       	add	r30, r28
    cbe6:	fd 1f       	adc	r31, r29
    cbe8:	ee 0d       	add	r30, r14
    cbea:	ff 1d       	adc	r31, r15
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    cbec:	a0 81       	ld	r26, Z
    cbee:	bb 27       	eor	r27, r27
    cbf0:	a7 fd       	sbrc	r26, 7
    cbf2:	b0 95       	com	r27
    cbf4:	0e 94 73 6c 	call	0xd8e6	; 0xd8e6 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    cbf8:	bb 27       	eor	r27, r27
    cbfa:	97 fd       	sbrc	r25, 7
    cbfc:	ba 95       	dec	r27
    cbfe:	a9 2f       	mov	r26, r25
    cc00:	98 2f       	mov	r25, r24
    cc02:	87 2f       	mov	r24, r23
    cc04:	ef 8d       	ldd	r30, Y+31	; 0x1f
    cc06:	f8 a1       	ldd	r31, Y+32	; 0x20
    cc08:	91 83       	std	Z+1, r25	; 0x01
    cc0a:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    cc0c:	a9 a1       	ldd	r26, Y+33	; 0x21
    cc0e:	ba a1       	ldd	r27, Y+34	; 0x22
    cc10:	14 96       	adiw	r26, 0x04	; 4
    cc12:	8d 91       	ld	r24, X+
    cc14:	9c 91       	ld	r25, X
    cc16:	15 97       	sbiw	r26, 0x05	; 5
    cc18:	9a 01       	movw	r18, r20
    cc1a:	28 1b       	sub	r18, r24
    cc1c:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    cc1e:	f1 01       	movw	r30, r2
    cc20:	a0 81       	ld	r26, Z
    cc22:	bb 27       	eor	r27, r27
    cc24:	a7 fd       	sbrc	r26, 7
    cc26:	b0 95       	com	r27
    cc28:	0e 94 73 6c 	call	0xd8e6	; 0xd8e6 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    cc2c:	bb 27       	eor	r27, r27
    cc2e:	97 fd       	sbrc	r25, 7
    cc30:	ba 95       	dec	r27
    cc32:	a9 2f       	mov	r26, r25
    cc34:	98 2f       	mov	r25, r24
    cc36:	87 2f       	mov	r24, r23
    cc38:	ef 8d       	ldd	r30, Y+31	; 0x1f
    cc3a:	f8 a1       	ldd	r31, Y+32	; 0x20
    cc3c:	97 83       	std	Z+7, r25	; 0x07
    cc3e:	86 83       	std	Z+6, r24	; 0x06
    cc40:	ff ef       	ldi	r31, 0xFF	; 255
    cc42:	ef 1a       	sub	r14, r31
    cc44:	ff 0a       	sbc	r15, r31
    cc46:	2d a1       	ldd	r18, Y+37	; 0x25
    cc48:	3e a1       	ldd	r19, Y+38	; 0x26
    cc4a:	2c 5f       	subi	r18, 0xFC	; 252
    cc4c:	3f 4f       	sbci	r19, 0xFF	; 255
    cc4e:	3e a3       	std	Y+38, r19	; 0x26
    cc50:	2d a3       	std	Y+37, r18	; 0x25
    cc52:	4b a1       	ldd	r20, Y+35	; 0x23
    cc54:	5c a1       	ldd	r21, Y+36	; 0x24
    cc56:	4e 5f       	subi	r20, 0xFE	; 254
    cc58:	5f 4f       	sbci	r21, 0xFF	; 255
    cc5a:	5c a3       	std	Y+36, r21	; 0x24
    cc5c:	4b a3       	std	Y+35, r20	; 0x23
    cc5e:	8f a1       	ldd	r24, Y+39	; 0x27
    cc60:	98 a5       	ldd	r25, Y+40	; 0x28
    cc62:	02 96       	adiw	r24, 0x02	; 2
    cc64:	98 a7       	std	Y+40, r25	; 0x28
    cc66:	8f a3       	std	Y+39, r24	; 0x27
    cc68:	a9 a1       	ldd	r26, Y+33	; 0x21
    cc6a:	ba a1       	ldd	r27, Y+34	; 0x22
    cc6c:	12 96       	adiw	r26, 0x02	; 2
    cc6e:	ba a3       	std	Y+34, r27	; 0x22
    cc70:	a9 a3       	std	Y+33, r26	; 0x21
    cc72:	ef 8d       	ldd	r30, Y+31	; 0x1f
    cc74:	f8 a1       	ldd	r31, Y+32	; 0x20
    cc76:	32 96       	adiw	r30, 0x02	; 2
    cc78:	f8 a3       	std	Y+32, r31	; 0x20
    cc7a:	ef 8f       	std	Y+31, r30	; 0x1f
    cc7c:	ff ef       	ldi	r31, 0xFF	; 255
    cc7e:	2f 1a       	sub	r2, r31
    cc80:	3f 0a       	sbc	r3, r31
    cc82:	24 e0       	ldi	r18, 0x04	; 4
    cc84:	c2 0e       	add	r12, r18
    cc86:	d1 1c       	adc	r13, r1

	//************************************************************
	// PID loop
	//************************************************************
	
	for (axis = 0; axis <= YAW; axis ++)
    cc88:	33 e0       	ldi	r19, 0x03	; 3
    cc8a:	e3 16       	cp	r14, r19
    cc8c:	f1 04       	cpc	r15, r1
    cc8e:	09 f0       	breq	.+2      	; 0xcc92 <Calculate_PID+0x4d2>
    cc90:	7b ce       	rjmp	.-778    	; 0xc988 <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    cc92:	2b 96       	adiw	r28, 0x0b	; 11
    cc94:	ce ac       	ldd	r12, Y+62	; 0x3e
    cc96:	df ac       	ldd	r13, Y+63	; 0x3f
    cc98:	2b 97       	sbiw	r28, 0x0b	; 11
    cc9a:	d1 94       	neg	r13
    cc9c:	c1 94       	neg	r12
    cc9e:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    cca0:	96 01       	movw	r18, r12
    cca2:	4d a5       	ldd	r20, Y+45	; 0x2d
    cca4:	a4 2f       	mov	r26, r20
    cca6:	bb 27       	eor	r27, r27
    cca8:	a7 fd       	sbrc	r26, 7
    ccaa:	b0 95       	com	r27
    ccac:	0e 94 73 6c 	call	0xd8e6	; 0xd8e6 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    ccb0:	34 e0       	ldi	r19, 0x04	; 4
    ccb2:	95 95       	asr	r25
    ccb4:	87 95       	ror	r24
    ccb6:	77 95       	ror	r23
    ccb8:	67 95       	ror	r22
    ccba:	3a 95       	dec	r19
    ccbc:	d1 f7       	brne	.-12     	; 0xccb2 <Calculate_PID+0x4f2>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    ccbe:	65 3f       	cpi	r22, 0xF5	; 245
    ccc0:	51 e0       	ldi	r21, 0x01	; 1
    ccc2:	75 07       	cpc	r23, r21
    ccc4:	81 05       	cpc	r24, r1
    ccc6:	91 05       	cpc	r25, r1
    ccc8:	64 f4       	brge	.+24     	; 0xcce2 <Calculate_PID+0x522>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    ccca:	6c 30       	cpi	r22, 0x0C	; 12
    cccc:	ae ef       	ldi	r26, 0xFE	; 254
    ccce:	7a 07       	cpc	r23, r26
    ccd0:	af ef       	ldi	r26, 0xFF	; 255
    ccd2:	8a 07       	cpc	r24, r26
    ccd4:	9a 07       	cpc	r25, r26
    ccd6:	4c f4       	brge	.+18     	; 0xccea <Calculate_PID+0x52a>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    ccd8:	6c e0       	ldi	r22, 0x0C	; 12
    ccda:	7e ef       	ldi	r23, 0xFE	; 254
    ccdc:	8f ef       	ldi	r24, 0xFF	; 255
    ccde:	9f ef       	ldi	r25, 0xFF	; 255
    cce0:	04 c0       	rjmp	.+8      	; 0xccea <Calculate_PID+0x52a>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    cce2:	64 ef       	ldi	r22, 0xF4	; 244
    cce4:	71 e0       	ldi	r23, 0x01	; 1
    cce6:	80 e0       	ldi	r24, 0x00	; 0
    cce8:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    ccea:	70 93 2b 09 	sts	0x092B, r23
    ccee:	60 93 2a 09 	sts	0x092A, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    ccf2:	96 01       	movw	r18, r12
    ccf4:	ee a5       	ldd	r30, Y+46	; 0x2e
    ccf6:	ae 2f       	mov	r26, r30
    ccf8:	bb 27       	eor	r27, r27
    ccfa:	a7 fd       	sbrc	r26, 7
    ccfc:	b0 95       	com	r27
    ccfe:	0e 94 73 6c 	call	0xd8e6	; 0xd8e6 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    cd02:	24 e0       	ldi	r18, 0x04	; 4
    cd04:	95 95       	asr	r25
    cd06:	87 95       	ror	r24
    cd08:	77 95       	ror	r23
    cd0a:	67 95       	ror	r22
    cd0c:	2a 95       	dec	r18
    cd0e:	d1 f7       	brne	.-12     	; 0xcd04 <Calculate_PID+0x544>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    cd10:	65 3f       	cpi	r22, 0xF5	; 245
    cd12:	f1 e0       	ldi	r31, 0x01	; 1
    cd14:	7f 07       	cpc	r23, r31
    cd16:	81 05       	cpc	r24, r1
    cd18:	91 05       	cpc	r25, r1
    cd1a:	64 f4       	brge	.+24     	; 0xcd34 <Calculate_PID+0x574>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    cd1c:	6c 30       	cpi	r22, 0x0C	; 12
    cd1e:	2e ef       	ldi	r18, 0xFE	; 254
    cd20:	72 07       	cpc	r23, r18
    cd22:	2f ef       	ldi	r18, 0xFF	; 255
    cd24:	82 07       	cpc	r24, r18
    cd26:	92 07       	cpc	r25, r18
    cd28:	4c f4       	brge	.+18     	; 0xcd3c <Calculate_PID+0x57c>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    cd2a:	6c e0       	ldi	r22, 0x0C	; 12
    cd2c:	7e ef       	ldi	r23, 0xFE	; 254
    cd2e:	8f ef       	ldi	r24, 0xFF	; 255
    cd30:	9f ef       	ldi	r25, 0xFF	; 255
    cd32:	04 c0       	rjmp	.+8      	; 0xcd3c <Calculate_PID+0x57c>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    cd34:	64 ef       	ldi	r22, 0xF4	; 244
    cd36:	71 e0       	ldi	r23, 0x01	; 1
    cd38:	80 e0       	ldi	r24, 0x00	; 0
    cd3a:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    cd3c:	70 93 31 09 	sts	0x0931, r23
    cd40:	60 93 30 09 	sts	0x0930, r22
	}
}
    cd44:	c3 5b       	subi	r28, 0xB3	; 179
    cd46:	df 4f       	sbci	r29, 0xFF	; 255
    cd48:	0f b6       	in	r0, 0x3f	; 63
    cd4a:	f8 94       	cli
    cd4c:	de bf       	out	0x3e, r29	; 62
    cd4e:	0f be       	out	0x3f, r0	; 63
    cd50:	cd bf       	out	0x3d, r28	; 61
    cd52:	df 91       	pop	r29
    cd54:	cf 91       	pop	r28
    cd56:	1f 91       	pop	r17
    cd58:	0f 91       	pop	r16
    cd5a:	ff 90       	pop	r15
    cd5c:	ef 90       	pop	r14
    cd5e:	df 90       	pop	r13
    cd60:	cf 90       	pop	r12
    cd62:	bf 90       	pop	r11
    cd64:	af 90       	pop	r10
    cd66:	9f 90       	pop	r9
    cd68:	8f 90       	pop	r8
    cd6a:	7f 90       	pop	r7
    cd6c:	6f 90       	pop	r6
    cd6e:	5f 90       	pop	r5
    cd70:	4f 90       	pop	r4
    cd72:	3f 90       	pop	r3
    cd74:	2f 90       	pop	r2
    cd76:	08 95       	ret

0000cd78 <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    cd78:	e6 ed       	ldi	r30, 0xD6	; 214
    cd7a:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    cd7c:	80 e0       	ldi	r24, 0x00	; 0
    cd7e:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    cd80:	ac 01       	movw	r20, r24
    cd82:	44 0f       	add	r20, r20
    cd84:	55 1f       	adc	r21, r21
    cd86:	da 01       	movw	r26, r20
    cd88:	a9 55       	subi	r26, 0x59	; 89
    cd8a:	b7 4f       	sbci	r27, 0xF7	; 247
    cd8c:	2d 91       	ld	r18, X+
    cd8e:	3c 91       	ld	r19, X
    cd90:	61 91       	ld	r22, Z+
    cd92:	71 91       	ld	r23, Z+
    cd94:	26 1b       	sub	r18, r22
    cd96:	37 0b       	sbc	r19, r23
    cd98:	da 01       	movw	r26, r20
    cd9a:	ac 5b       	subi	r26, 0xBC	; 188
    cd9c:	b6 4f       	sbci	r27, 0xF6	; 246
    cd9e:	11 96       	adiw	r26, 0x01	; 1
    cda0:	3c 93       	st	X, r19
    cda2:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    cda4:	01 96       	adiw	r24, 0x01	; 1
    cda6:	88 30       	cpi	r24, 0x08	; 8
    cda8:	91 05       	cpc	r25, r1
    cdaa:	51 f7       	brne	.-44     	; 0xcd80 <RxGetChannels+0x8>
	}

	// Special handling for monopolar throttle
	// Preset to RxChannelZeroOffset[THROTTLE] = 2750 (-250 to 2250) for safety. 
	// Normally MonopolarThrottle is referenced to the lowest throttle position.
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE]; 
    cdac:	80 91 a7 08 	lds	r24, 0x08A7
    cdb0:	90 91 a8 08 	lds	r25, 0x08A8
    cdb4:	20 91 d6 07 	lds	r18, 0x07D6
    cdb8:	30 91 d7 07 	lds	r19, 0x07D7
    cdbc:	82 1b       	sub	r24, r18
    cdbe:	93 0b       	sbc	r25, r19
    cdc0:	90 93 43 09 	sts	0x0943, r25
    cdc4:	80 93 42 09 	sts	0x0942, r24

	// Bipolar throttle must use the nominal mid-point as calibration is done at throttle minimum
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    cdc8:	80 91 a7 08 	lds	r24, 0x08A7
    cdcc:	90 91 a8 08 	lds	r25, 0x08A8
    cdd0:	86 5a       	subi	r24, 0xA6	; 166
    cdd2:	9e 40       	sbci	r25, 0x0E	; 14
    cdd4:	90 93 45 09 	sts	0x0945, r25
    cdd8:	80 93 44 09 	sts	0x0944, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    cddc:	80 91 05 08 	lds	r24, 0x0805
    cde0:	81 30       	cpi	r24, 0x01	; 1
    cde2:	59 f4       	brne	.+22     	; 0xcdfa <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    cde4:	80 91 46 09 	lds	r24, 0x0946
    cde8:	90 91 47 09 	lds	r25, 0x0947
    cdec:	91 95       	neg	r25
    cdee:	81 95       	neg	r24
    cdf0:	91 09       	sbc	r25, r1
    cdf2:	90 93 47 09 	sts	0x0947, r25
    cdf6:	80 93 46 09 	sts	0x0946, r24
	}

	if (Config.ElevatorPol == REVERSED)
    cdfa:	80 91 4c 06 	lds	r24, 0x064C
    cdfe:	81 30       	cpi	r24, 0x01	; 1
    ce00:	59 f4       	brne	.+22     	; 0xce18 <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    ce02:	80 91 48 09 	lds	r24, 0x0948
    ce06:	90 91 49 09 	lds	r25, 0x0949
    ce0a:	91 95       	neg	r25
    ce0c:	81 95       	neg	r24
    ce0e:	91 09       	sbc	r25, r1
    ce10:	90 93 49 09 	sts	0x0949, r25
    ce14:	80 93 48 09 	sts	0x0948, r24
	}

	if (Config.RudderPol == REVERSED)
    ce18:	80 91 04 08 	lds	r24, 0x0804
    ce1c:	81 30       	cpi	r24, 0x01	; 1
    ce1e:	59 f4       	brne	.+22     	; 0xce36 <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    ce20:	80 91 4a 09 	lds	r24, 0x094A
    ce24:	90 91 4b 09 	lds	r25, 0x094B
    ce28:	91 95       	neg	r25
    ce2a:	81 95       	neg	r24
    ce2c:	91 09       	sbc	r25, r1
    ce2e:	90 93 4b 09 	sts	0x094B, r25
    ce32:	80 93 4a 09 	sts	0x094A, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    ce36:	80 91 46 09 	lds	r24, 0x0946
    ce3a:	90 91 47 09 	lds	r25, 0x0947
    ce3e:	40 91 48 09 	lds	r20, 0x0948
    ce42:	50 91 49 09 	lds	r21, 0x0949
    ce46:	20 91 4a 09 	lds	r18, 0x094A
    ce4a:	30 91 4b 09 	lds	r19, 0x094B
    ce4e:	84 0f       	add	r24, r20
    ce50:	95 1f       	adc	r25, r21
    ce52:	82 0f       	add	r24, r18
    ce54:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    ce56:	20 91 6b 05 	lds	r18, 0x056B
    ce5a:	30 91 6c 05 	lds	r19, 0x056C
    ce5e:	ac 01       	movw	r20, r24
    ce60:	42 1b       	sub	r20, r18
    ce62:	53 0b       	sbc	r21, r19
    ce64:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    ce66:	2b 5f       	subi	r18, 0xFB	; 251
    ce68:	3f 4f       	sbci	r19, 0xFF	; 255
    ce6a:	2b 30       	cpi	r18, 0x0B	; 11
    ce6c:	31 05       	cpc	r19, r1
    ce6e:	38 f4       	brcc	.+14     	; 0xce7e <RxGetChannels+0x106>
    ce70:	20 91 42 09 	lds	r18, 0x0942
    ce74:	30 91 43 09 	lds	r19, 0x0943
    ce78:	23 33       	cpi	r18, 0x33	; 51
    ce7a:	31 05       	cpc	r19, r1
    ce7c:	24 f0       	brlt	.+8      	; 0xce86 <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    ce7e:	20 91 33 05 	lds	r18, 0x0533
    ce82:	21 60       	ori	r18, 0x01	; 1
    ce84:	03 c0       	rjmp	.+6      	; 0xce8c <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    ce86:	20 91 33 05 	lds	r18, 0x0533
    ce8a:	2e 7f       	andi	r18, 0xFE	; 254
    ce8c:	20 93 33 05 	sts	0x0533, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    ce90:	10 92 55 09 	sts	0x0955, r1
    ce94:	10 92 54 09 	sts	0x0954, r1

	OldRxSum = RxSum;
    ce98:	90 93 6c 05 	sts	0x056C, r25
    ce9c:	80 93 6b 05 	sts	0x056B, r24
    cea0:	08 95       	ret

0000cea2 <CenterSticks>:
*/
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    cea2:	0f 93       	push	r16
    cea4:	1f 93       	push	r17
    cea6:	cf 93       	push	r28
    cea8:	df 93       	push	r29
    ceaa:	cd b7       	in	r28, 0x3d	; 61
    ceac:	de b7       	in	r29, 0x3e	; 62
    ceae:	60 97       	sbiw	r28, 0x10	; 16
    ceb0:	0f b6       	in	r0, 0x3f	; 63
    ceb2:	f8 94       	cli
    ceb4:	de bf       	out	0x3e, r29	; 62
    ceb6:	0f be       	out	0x3f, r0	; 63
    ceb8:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    ceba:	8e 01       	movw	r16, r28
    cebc:	0f 5f       	subi	r16, 0xFF	; 255
    cebe:	1f 4f       	sbci	r17, 0xFF	; 255
    cec0:	80 e1       	ldi	r24, 0x10	; 16
    cec2:	d8 01       	movw	r26, r16
    cec4:	1d 92       	st	X+, r1
    cec6:	8a 95       	dec	r24
    cec8:	e9 f7       	brne	.-6      	; 0xcec4 <CenterSticks+0x22>
    ceca:	68 e0       	ldi	r22, 0x08	; 8
*/
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    cecc:	d8 01       	movw	r26, r16
    cece:	80 e0       	ldi	r24, 0x00	; 0
    ced0:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i = 0; i < 8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    ced2:	9c 01       	movw	r18, r24
    ced4:	22 0f       	add	r18, r18
    ced6:	33 1f       	adc	r19, r19
    ced8:	29 55       	subi	r18, 0x59	; 89
    ceda:	37 4f       	sbci	r19, 0xF7	; 247
    cedc:	f9 01       	movw	r30, r18
    cede:	40 81       	ld	r20, Z
    cee0:	51 81       	ldd	r21, Z+1	; 0x01
    cee2:	2d 91       	ld	r18, X+
    cee4:	3c 91       	ld	r19, X
    cee6:	11 97       	sbiw	r26, 0x01	; 1
    cee8:	24 0f       	add	r18, r20
    ceea:	35 1f       	adc	r19, r21
    ceec:	2d 93       	st	X+, r18
    ceee:	3d 93       	st	X+, r19
    cef0:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i = 0; i < 8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    cef2:	88 30       	cpi	r24, 0x08	; 8
    cef4:	91 05       	cpc	r25, r1
    cef6:	69 f7       	brne	.-38     	; 0xced2 <CenterSticks+0x30>
    cef8:	ff e7       	ldi	r31, 0x7F	; 127
    cefa:	2a e1       	ldi	r18, 0x1A	; 26
    cefc:	86 e0       	ldi	r24, 0x06	; 6
    cefe:	f1 50       	subi	r31, 0x01	; 1
    cf00:	20 40       	sbci	r18, 0x00	; 0
    cf02:	80 40       	sbci	r24, 0x00	; 0
    cf04:	e1 f7       	brne	.-8      	; 0xcefe <CenterSticks+0x5c>
    cf06:	00 c0       	rjmp	.+0      	; 0xcf08 <CenterSticks+0x66>
    cf08:	00 00       	nop
    cf0a:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i = 0; i < 8; i++)
    cf0c:	f9 f6       	brne	.-66     	; 0xcecc <CenterSticks+0x2a>
    cf0e:	a6 ed       	ldi	r26, 0xD6	; 214
    cf10:	b7 e0       	ldi	r27, 0x07	; 7
    cf12:	9e 01       	movw	r18, r28
    cf14:	2f 5e       	subi	r18, 0xEF	; 239
    cf16:	3f 4f       	sbci	r19, 0xFF	; 255
    cf18:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    cf1a:	81 91       	ld	r24, Z+
    cf1c:	91 91       	ld	r25, Z+
    cf1e:	04 96       	adiw	r24, 0x04	; 4
    cf20:	43 e0       	ldi	r20, 0x03	; 3
    cf22:	96 95       	lsr	r25
    cf24:	87 95       	ror	r24
    cf26:	4a 95       	dec	r20
    cf28:	e1 f7       	brne	.-8      	; 0xcf22 <CenterSticks+0x80>
    cf2a:	8d 93       	st	X+, r24
    cf2c:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    cf2e:	e2 17       	cp	r30, r18
    cf30:	f3 07       	cpc	r31, r19
    cf32:	99 f7       	brne	.-26     	; 0xcf1a <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    cf34:	60 96       	adiw	r28, 0x10	; 16
    cf36:	0f b6       	in	r0, 0x3f	; 63
    cf38:	f8 94       	cli
    cf3a:	de bf       	out	0x3e, r29	; 62
    cf3c:	0f be       	out	0x3f, r0	; 63
    cf3e:	cd bf       	out	0x3d, r28	; 61
    cf40:	df 91       	pop	r29
    cf42:	cf 91       	pop	r28
    cf44:	1f 91       	pop	r17
    cf46:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    cf48:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <Save_Config_to_EEPROM>

0000cf4c <UpdateTransition>:
void UpdateTransition(void)
{
	int16_t temp = 0;
	
	// Offset RC input to (approx) -250 to 2250
	temp = RCinputs[Config.FlightChan] + 1000;
    cf4c:	e0 91 45 06 	lds	r30, 0x0645
    cf50:	ee 0f       	add	r30, r30
    cf52:	ff 0b       	sbc	r31, r31
    cf54:	ec 5b       	subi	r30, 0xBC	; 188
    cf56:	f6 4f       	sbci	r31, 0xF6	; 246
    cf58:	80 81       	ld	r24, Z
    cf5a:	91 81       	ldd	r25, Z+1	; 0x01
    cf5c:	88 51       	subi	r24, 0x18	; 24
    cf5e:	9c 4f       	sbci	r25, 0xFC	; 252
    cf60:	97 ff       	sbrs	r25, 7
    cf62:	02 c0       	rjmp	.+4      	; 0xcf68 <UpdateTransition+0x1c>
    cf64:	80 e0       	ldi	r24, 0x00	; 0
    cf66:	90 e0       	ldi	r25, 0x00	; 0
	// Trim lower end to zero (0 to 2250)
	if (temp < 0) temp = 0;

	// Convert 0 to 2250 to 0 to 125. Divide by 20
	// Round to avoid truncation errors
	transition = (temp + 10) / 20;
    cf68:	0a 96       	adiw	r24, 0x0a	; 10
    cf6a:	64 e1       	ldi	r22, 0x14	; 20
    cf6c:	70 e0       	ldi	r23, 0x00	; 0
    cf6e:	0e 94 3a 6c 	call	0xd874	; 0xd874 <__divmodhi4>

	// transition now has a range of 0 to 101 for 0 to 2000 input
	// Limit extent of transition value 0 to 100 (101 steps)
	if (transition > 100) transition = 100;
    cf72:	65 36       	cpi	r22, 0x65	; 101
    cf74:	71 05       	cpc	r23, r1
    cf76:	2c f4       	brge	.+10     	; 0xcf82 <UpdateTransition+0x36>
	// Trim lower end to zero (0 to 2250)
	if (temp < 0) temp = 0;

	// Convert 0 to 2250 to 0 to 125. Divide by 20
	// Round to avoid truncation errors
	transition = (temp + 10) / 20;
    cf78:	70 93 38 05 	sts	0x0538, r23
    cf7c:	60 93 37 05 	sts	0x0537, r22
    cf80:	08 95       	ret

	// transition now has a range of 0 to 101 for 0 to 2000 input
	// Limit extent of transition value 0 to 100 (101 steps)
	if (transition > 100) transition = 100;
    cf82:	84 e6       	ldi	r24, 0x64	; 100
    cf84:	90 e0       	ldi	r25, 0x00	; 0
    cf86:	90 93 38 05 	sts	0x0538, r25
    cf8a:	80 93 37 05 	sts	0x0537, r24
    cf8e:	08 95       	ret

0000cf90 <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    cf90:	2f 92       	push	r2
    cf92:	3f 92       	push	r3
    cf94:	4f 92       	push	r4
    cf96:	5f 92       	push	r5
    cf98:	7f 92       	push	r7
    cf9a:	8f 92       	push	r8
    cf9c:	9f 92       	push	r9
    cf9e:	af 92       	push	r10
    cfa0:	bf 92       	push	r11
    cfa2:	cf 92       	push	r12
    cfa4:	df 92       	push	r13
    cfa6:	ef 92       	push	r14
    cfa8:	ff 92       	push	r15
    cfaa:	0f 93       	push	r16
    cfac:	1f 93       	push	r17
    cfae:	cf 93       	push	r28
    cfb0:	df 93       	push	r29
    cfb2:	78 2e       	mov	r7, r24
    cfb4:	01 e2       	ldi	r16, 0x21	; 33
    cfb6:	16 e0       	ldi	r17, 0x06	; 6
    cfb8:	e2 eb       	ldi	r30, 0xB2	; 178
    cfba:	ee 2e       	mov	r14, r30
    cfbc:	e6 e0       	ldi	r30, 0x06	; 6
    cfbe:	fe 2e       	mov	r15, r30
    cfc0:	c0 e0       	ldi	r28, 0x00	; 0
    cfc2:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    cfc4:	fa e0       	ldi	r31, 0x0A	; 10
    cfc6:	8f 2e       	mov	r8, r31
    cfc8:	91 2c       	mov	r9, r1
    cfca:	a1 2c       	mov	r10, r1
    cfcc:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds and check limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    cfce:	6e 01       	movw	r12, r28
    cfd0:	cc 0c       	add	r12, r12
    cfd2:	dd 1c       	adc	r13, r13
    cfd4:	f6 01       	movw	r30, r12
    cfd6:	ea 5a       	subi	r30, 0xAA	; 170
    cfd8:	f6 4f       	sbci	r31, 0xF6	; 246
    cfda:	20 81       	ld	r18, Z
    cfdc:	31 81       	ldd	r19, Z+1	; 0x01
    cfde:	a9 01       	movw	r20, r18
    cfe0:	60 e0       	ldi	r22, 0x00	; 0
    cfe2:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    cfe4:	f7 01       	movw	r30, r14
    cfe6:	80 81       	ld	r24, Z
    cfe8:	82 30       	cpi	r24, 0x02	; 2
    cfea:	79 f0       	breq	.+30     	; 0xd00a <output_servo_ppm+0x7a>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    cfec:	9a 01       	movw	r18, r20
    cfee:	ab 01       	movw	r20, r22
    cff0:	26 5a       	subi	r18, 0xA6	; 166
    cff2:	3e 40       	sbci	r19, 0x0E	; 14
    cff4:	41 09       	sbc	r20, r1
    cff6:	51 09       	sbc	r21, r1
    cff8:	55 95       	asr	r21
    cffa:	47 95       	ror	r20
    cffc:	37 95       	ror	r19
    cffe:	27 95       	ror	r18
    d000:	24 52       	subi	r18, 0x24	; 36
    d002:	3a 4f       	sbci	r19, 0xFA	; 250
    d004:	4f 4f       	sbci	r20, 0xFF	; 255
    d006:	5f 4f       	sbci	r21, 0xFF	; 255
    d008:	11 c0       	rjmp	.+34     	; 0xd02c <output_servo_ppm+0x9c>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    d00a:	cb 01       	movw	r24, r22
    d00c:	ba 01       	movw	r22, r20
    d00e:	52 e0       	ldi	r21, 0x02	; 2
    d010:	66 0f       	add	r22, r22
    d012:	77 1f       	adc	r23, r23
    d014:	88 1f       	adc	r24, r24
    d016:	99 1f       	adc	r25, r25
    d018:	5a 95       	dec	r21
    d01a:	d1 f7       	brne	.-12     	; 0xd010 <output_servo_ppm+0x80>
    d01c:	6b 5f       	subi	r22, 0xFB	; 251
    d01e:	7f 4f       	sbci	r23, 0xFF	; 255
    d020:	8f 4f       	sbci	r24, 0xFF	; 255
    d022:	9f 4f       	sbci	r25, 0xFF	; 255
    d024:	a5 01       	movw	r20, r10
    d026:	94 01       	movw	r18, r8
    d028:	0e 94 4e 6c 	call	0xd89c	; 0xd89c <__divmodsi4>
		}
		
		// Enforce min, max travel limits in microseconds
		if (temp > Config.Limits[i].maximum)
    d02c:	f8 01       	movw	r30, r16
    d02e:	62 81       	ldd	r22, Z+2	; 0x02
    d030:	73 81       	ldd	r23, Z+3	; 0x03
    d032:	cb 01       	movw	r24, r22
    d034:	aa 27       	eor	r26, r26
    d036:	97 fd       	sbrc	r25, 7
    d038:	a0 95       	com	r26
    d03a:	ba 2f       	mov	r27, r26
    d03c:	82 17       	cp	r24, r18
    d03e:	93 07       	cpc	r25, r19
    d040:	a4 07       	cpc	r26, r20
    d042:	b5 07       	cpc	r27, r21
    d044:	84 f0       	brlt	.+32     	; 0xd066 <output_servo_ppm+0xd6>
		{
			temp = Config.Limits[i].maximum;
		}

		else if (temp < Config.Limits[i].minimum)
    d046:	60 81       	ld	r22, Z
    d048:	71 81       	ldd	r23, Z+1	; 0x01
    d04a:	1b 01       	movw	r2, r22
    d04c:	44 24       	eor	r4, r4
    d04e:	37 fc       	sbrc	r3, 7
    d050:	40 94       	com	r4
    d052:	54 2c       	mov	r5, r4
    d054:	da 01       	movw	r26, r20
    d056:	c9 01       	movw	r24, r18
    d058:	22 15       	cp	r18, r2
    d05a:	33 05       	cpc	r19, r3
    d05c:	44 05       	cpc	r20, r4
    d05e:	55 05       	cpc	r21, r5
    d060:	14 f4       	brge	.+4      	; 0xd066 <output_servo_ppm+0xd6>
    d062:	d2 01       	movw	r26, r4
    d064:	c1 01       	movw	r24, r2
		{
			temp = Config.Limits[i].minimum;
		}

		ServoOut[i] = (uint16_t)temp;
    d066:	f6 01       	movw	r30, r12
    d068:	ea 5a       	subi	r30, 0xAA	; 170
    d06a:	f6 4f       	sbci	r31, 0xF6	; 246
    d06c:	91 83       	std	Z+1, r25	; 0x01
    d06e:	80 83       	st	Z, r24
    d070:	21 96       	adiw	r28, 0x01	; 1
    d072:	f2 e2       	ldi	r31, 0x22	; 34
    d074:	ef 0e       	add	r14, r31
    d076:	f1 1c       	adc	r15, r1
    d078:	0c 5f       	subi	r16, 0xFC	; 252
    d07a:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds and check limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    d07c:	c8 30       	cpi	r28, 0x08	; 8
    d07e:	d1 05       	cpc	r29, r1
    d080:	09 f0       	breq	.+2      	; 0xd084 <output_servo_ppm+0xf4>
    d082:	a5 cf       	rjmp	.-182    	; 0xcfce <output_servo_ppm+0x3e>
	}

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so.
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    d084:	80 91 42 09 	lds	r24, 0x0942
    d088:	90 91 43 09 	lds	r25, 0x0943
		ServoOut[i] = (uint16_t)temp;
	}

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so.
	if 	(
    d08c:	c2 97       	sbiw	r24, 0x32	; 50
    d08e:	4c f0       	brlt	.+18     	; 0xd0a2 <output_servo_ppm+0x112>
			(MonopolarThrottle < THROTTLEIDLE) || 
			(General_error & (1 << DISARMED))
    d090:	80 91 34 05 	lds	r24, 0x0534
	}

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so.
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    d094:	82 fd       	sbrc	r24, 2
    d096:	05 c0       	rjmp	.+10     	; 0xd0a2 <output_servo_ppm+0x112>

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
			((General_error & (1 << THROTTLE_HIGH)) == 0) &&
    d098:	80 91 34 05 	lds	r24, 0x0534
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
    d09c:	80 ff       	sbrs	r24, 0
    d09e:	18 c0       	rjmp	.+48     	; 0xd0d0 <output_servo_ppm+0x140>
    d0a0:	27 c0       	rjmp	.+78     	; 0xd0f0 <output_servo_ppm+0x160>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    d0a2:	e2 eb       	ldi	r30, 0xB2	; 178
    d0a4:	f6 e0       	ldi	r31, 0x06	; 6
    d0a6:	80 e0       	ldi	r24, 0x00	; 0
    d0a8:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    d0aa:	28 ee       	ldi	r18, 0xE8	; 232
    d0ac:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    d0ae:	40 81       	ld	r20, Z
    d0b0:	42 30       	cpi	r20, 0x02	; 2
    d0b2:	41 f4       	brne	.+16     	; 0xd0c4 <output_servo_ppm+0x134>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    d0b4:	dc 01       	movw	r26, r24
    d0b6:	aa 0f       	add	r26, r26
    d0b8:	bb 1f       	adc	r27, r27
    d0ba:	aa 5a       	subi	r26, 0xAA	; 170
    d0bc:	b6 4f       	sbci	r27, 0xF6	; 246
    d0be:	11 96       	adiw	r26, 0x01	; 1
    d0c0:	3c 93       	st	X, r19
    d0c2:	2e 93       	st	-X, r18
    d0c4:	01 96       	adiw	r24, 0x01	; 1
    d0c6:	b2 96       	adiw	r30, 0x22	; 34
			(MonopolarThrottle < THROTTLEIDLE) || 
			(General_error & (1 << DISARMED))
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    d0c8:	88 30       	cpi	r24, 0x08	; 8
    d0ca:	91 05       	cpc	r25, r1
    d0cc:	81 f7       	brne	.-32     	; 0xd0ae <output_servo_ppm+0x11e>
    d0ce:	e4 cf       	rjmp	.-56     	; 0xd098 <output_servo_ppm+0x108>
	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
			((General_error & (1 << THROTTLE_HIGH)) == 0) &&
			((Flight_flags & (1 << ARM_blocker)) == 0)
    d0d0:	80 91 33 05 	lds	r24, 0x0533

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	// Also, block if ARM_blocker set
	if (
			((General_error & (1 << THROTTLE_HIGH)) == 0) &&
    d0d4:	81 fd       	sbrc	r24, 1
    d0d6:	0c c0       	rjmp	.+24     	; 0xd0f0 <output_servo_ppm+0x160>
			((Flight_flags & (1 << ARM_blocker)) == 0)
	   )
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    d0d8:	10 92 e3 08 	sts	0x08E3, r1
	
		// We now care about interrupts
		JitterGate = true;
    d0dc:	81 e0       	ldi	r24, 0x01	; 1
    d0de:	80 93 e2 08 	sts	0x08E2, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    d0e2:	67 2d       	mov	r22, r7
    d0e4:	86 e5       	ldi	r24, 0x56	; 86
    d0e6:	99 e0       	ldi	r25, 0x09	; 9
    d0e8:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    d0ec:	10 92 e2 08 	sts	0x08E2, r1
	}
}
    d0f0:	df 91       	pop	r29
    d0f2:	cf 91       	pop	r28
    d0f4:	1f 91       	pop	r17
    d0f6:	0f 91       	pop	r16
    d0f8:	ff 90       	pop	r15
    d0fa:	ef 90       	pop	r14
    d0fc:	df 90       	pop	r13
    d0fe:	cf 90       	pop	r12
    d100:	bf 90       	pop	r11
    d102:	af 90       	pop	r10
    d104:	9f 90       	pop	r9
    d106:	8f 90       	pop	r8
    d108:	7f 90       	pop	r7
    d10a:	5f 90       	pop	r5
    d10c:	4f 90       	pop	r4
    d10e:	3f 90       	pop	r3
    d110:	2f 90       	pop	r2
    d112:	08 95       	ret

0000d114 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    d114:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    d118:	81 e1       	ldi	r24, 0x11	; 17
    d11a:	80 93 b8 00 	sts	0x00B8, r24
    d11e:	08 95       	ret

0000d120 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    d120:	94 ea       	ldi	r25, 0xA4	; 164
    d122:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    d126:	4f ef       	ldi	r20, 0xFF	; 255
    d128:	50 e0       	ldi	r21, 0x00	; 0
    d12a:	60 e0       	ldi	r22, 0x00	; 0
    d12c:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d12e:	90 91 bc 00 	lds	r25, 0x00BC
    d132:	97 fd       	sbrc	r25, 7
    d134:	06 c0       	rjmp	.+12     	; 0xd142 <i2c_start+0x22>
    d136:	41 50       	subi	r20, 0x01	; 1
    d138:	51 09       	sbc	r21, r1
    d13a:	61 09       	sbc	r22, r1
    d13c:	71 09       	sbc	r23, r1
    d13e:	b8 f7       	brcc	.-18     	; 0xd12e <i2c_start+0xe>
    d140:	06 c0       	rjmp	.+12     	; 0xd14e <i2c_start+0x2e>
	if(i2c_timer == 0)
    d142:	45 2b       	or	r20, r21
    d144:	46 2b       	or	r20, r22
    d146:	47 2b       	or	r20, r23
    d148:	11 f4       	brne	.+4      	; 0xd14e <i2c_start+0x2e>
		return 1;
    d14a:	81 e0       	ldi	r24, 0x01	; 1
    d14c:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    d14e:	90 91 b9 00 	lds	r25, 0x00B9
    d152:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    d154:	98 30       	cpi	r25, 0x08	; 8
    d156:	11 f0       	breq	.+4      	; 0xd15c <i2c_start+0x3c>
    d158:	90 31       	cpi	r25, 0x10	; 16
    d15a:	b9 f7       	brne	.-18     	; 0xd14a <i2c_start+0x2a>

	// send device address
	TWDR = address;
    d15c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    d160:	84 e8       	ldi	r24, 0x84	; 132
    d162:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    d166:	8f ef       	ldi	r24, 0xFF	; 255
    d168:	90 e0       	ldi	r25, 0x00	; 0
    d16a:	a0 e0       	ldi	r26, 0x00	; 0
    d16c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d16e:	20 91 bc 00 	lds	r18, 0x00BC
    d172:	27 fd       	sbrc	r18, 7
    d174:	05 c0       	rjmp	.+10     	; 0xd180 <i2c_start+0x60>
    d176:	01 97       	sbiw	r24, 0x01	; 1
    d178:	a1 09       	sbc	r26, r1
    d17a:	b1 09       	sbc	r27, r1
    d17c:	c0 f7       	brcc	.-16     	; 0xd16e <i2c_start+0x4e>
    d17e:	04 c0       	rjmp	.+8      	; 0xd188 <i2c_start+0x68>
	if(i2c_timer == 0)
    d180:	89 2b       	or	r24, r25
    d182:	8a 2b       	or	r24, r26
    d184:	8b 2b       	or	r24, r27
    d186:	09 f3       	breq	.-62     	; 0xd14a <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    d188:	80 91 b9 00 	lds	r24, 0x00B9
    d18c:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    d18e:	88 31       	cpi	r24, 0x18	; 24
    d190:	11 f0       	breq	.+4      	; 0xd196 <i2c_start+0x76>
    d192:	80 34       	cpi	r24, 0x40	; 64
    d194:	d1 f6       	brne	.-76     	; 0xd14a <i2c_start+0x2a>

	return 0;
    d196:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    d198:	08 95       	ret

0000d19a <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    d19a:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    d19c:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    d19e:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    d1a0:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d1a4:	20 e0       	ldi	r18, 0x00	; 0
    d1a6:	30 e0       	ldi	r19, 0x00	; 0
    d1a8:	90 91 bc 00 	lds	r25, 0x00BC
    d1ac:	97 fd       	sbrc	r25, 7
    d1ae:	06 c0       	rjmp	.+12     	; 0xd1bc <i2c_start_wait+0x22>
    d1b0:	2f 5f       	subi	r18, 0xFF	; 255
    d1b2:	3f 4f       	sbci	r19, 0xFF	; 255
    d1b4:	21 15       	cp	r18, r1
    d1b6:	91 e0       	ldi	r25, 0x01	; 1
    d1b8:	39 07       	cpc	r19, r25
    d1ba:	b1 f7       	brne	.-20     	; 0xd1a8 <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    d1bc:	90 91 b9 00 	lds	r25, 0x00B9
    d1c0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    d1c2:	98 30       	cpi	r25, 0x08	; 8
    d1c4:	11 f0       	breq	.+4      	; 0xd1ca <i2c_start_wait+0x30>
    d1c6:	90 31       	cpi	r25, 0x10	; 16
    d1c8:	59 f7       	brne	.-42     	; 0xd1a0 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    d1ca:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    d1ce:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d1d2:	20 e0       	ldi	r18, 0x00	; 0
    d1d4:	30 e0       	ldi	r19, 0x00	; 0
    d1d6:	90 91 bc 00 	lds	r25, 0x00BC
    d1da:	97 fd       	sbrc	r25, 7
    d1dc:	06 c0       	rjmp	.+12     	; 0xd1ea <i2c_start_wait+0x50>
    d1de:	2f 5f       	subi	r18, 0xFF	; 255
    d1e0:	3f 4f       	sbci	r19, 0xFF	; 255
    d1e2:	21 15       	cp	r18, r1
    d1e4:	91 e0       	ldi	r25, 0x01	; 1
    d1e6:	39 07       	cpc	r19, r25
    d1e8:	b1 f7       	brne	.-20     	; 0xd1d6 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    d1ea:	90 91 b9 00 	lds	r25, 0x00B9
    d1ee:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    d1f0:	90 32       	cpi	r25, 0x20	; 32
    d1f2:	11 f0       	breq	.+4      	; 0xd1f8 <i2c_start_wait+0x5e>
    d1f4:	98 35       	cpi	r25, 0x58	; 88
    d1f6:	79 f4       	brne	.+30     	; 0xd216 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    d1f8:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    d1fc:	20 e0       	ldi	r18, 0x00	; 0
    d1fe:	30 e0       	ldi	r19, 0x00	; 0
    d200:	90 91 bc 00 	lds	r25, 0x00BC
    d204:	94 ff       	sbrs	r25, 4
    d206:	cc cf       	rjmp	.-104    	; 0xd1a0 <i2c_start_wait+0x6>
    d208:	2f 5f       	subi	r18, 0xFF	; 255
    d20a:	3f 4f       	sbci	r19, 0xFF	; 255
    d20c:	21 15       	cp	r18, r1
    d20e:	91 e0       	ldi	r25, 0x01	; 1
    d210:	39 07       	cpc	r19, r25
    d212:	b1 f7       	brne	.-20     	; 0xd200 <i2c_start_wait+0x66>
    d214:	c5 cf       	rjmp	.-118    	; 0xd1a0 <i2c_start_wait+0x6>
    d216:	08 95       	ret

0000d218 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    d218:	0c 94 90 68 	jmp	0xd120	; 0xd120 <i2c_start>

0000d21c <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    d21c:	84 e9       	ldi	r24, 0x94	; 148
    d21e:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    d222:	80 e0       	ldi	r24, 0x00	; 0
    d224:	90 e0       	ldi	r25, 0x00	; 0
    d226:	20 91 bc 00 	lds	r18, 0x00BC
    d22a:	24 ff       	sbrs	r18, 4
    d22c:	05 c0       	rjmp	.+10     	; 0xd238 <i2c_stop+0x1c>
    d22e:	01 96       	adiw	r24, 0x01	; 1
    d230:	81 15       	cp	r24, r1
    d232:	21 e0       	ldi	r18, 0x01	; 1
    d234:	92 07       	cpc	r25, r18
    d236:	b9 f7       	brne	.-18     	; 0xd226 <i2c_stop+0xa>
    d238:	08 95       	ret

0000d23a <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    d23a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    d23e:	84 e8       	ldi	r24, 0x84	; 132
    d240:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    d244:	8f ef       	ldi	r24, 0xFF	; 255
    d246:	90 e0       	ldi	r25, 0x00	; 0
    d248:	a0 e0       	ldi	r26, 0x00	; 0
    d24a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d24c:	20 91 bc 00 	lds	r18, 0x00BC
    d250:	27 fd       	sbrc	r18, 7
    d252:	05 c0       	rjmp	.+10     	; 0xd25e <i2c_write+0x24>
    d254:	01 97       	sbiw	r24, 0x01	; 1
    d256:	a1 09       	sbc	r26, r1
    d258:	b1 09       	sbc	r27, r1
    d25a:	c0 f7       	brcc	.-16     	; 0xd24c <i2c_write+0x12>
    d25c:	04 c0       	rjmp	.+8      	; 0xd266 <i2c_write+0x2c>
	if(i2c_timer == 0)
    d25e:	89 2b       	or	r24, r25
    d260:	8a 2b       	or	r24, r26
    d262:	8b 2b       	or	r24, r27
    d264:	41 f0       	breq	.+16     	; 0xd276 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    d266:	90 91 b9 00 	lds	r25, 0x00B9
    d26a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    d26c:	81 e0       	ldi	r24, 0x01	; 1
    d26e:	98 32       	cpi	r25, 0x28	; 40
    d270:	19 f4       	brne	.+6      	; 0xd278 <i2c_write+0x3e>
    d272:	80 e0       	ldi	r24, 0x00	; 0
    d274:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    d276:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    d278:	08 95       	ret

0000d27a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    d27a:	84 ec       	ldi	r24, 0xC4	; 196
    d27c:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    d280:	8f ef       	ldi	r24, 0xFF	; 255
    d282:	90 e0       	ldi	r25, 0x00	; 0
    d284:	a0 e0       	ldi	r26, 0x00	; 0
    d286:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d288:	20 91 bc 00 	lds	r18, 0x00BC
    d28c:	27 fd       	sbrc	r18, 7
    d28e:	05 c0       	rjmp	.+10     	; 0xd29a <i2c_readAck+0x20>
    d290:	01 97       	sbiw	r24, 0x01	; 1
    d292:	a1 09       	sbc	r26, r1
    d294:	b1 09       	sbc	r27, r1
    d296:	c0 f7       	brcc	.-16     	; 0xd288 <i2c_readAck+0xe>
    d298:	04 c0       	rjmp	.+8      	; 0xd2a2 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    d29a:	89 2b       	or	r24, r25
    d29c:	8a 2b       	or	r24, r26
    d29e:	8b 2b       	or	r24, r27
    d2a0:	19 f0       	breq	.+6      	; 0xd2a8 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    d2a2:	80 91 bb 00 	lds	r24, 0x00BB
    d2a6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    d2a8:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    d2aa:	08 95       	ret

0000d2ac <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    d2ac:	84 e8       	ldi	r24, 0x84	; 132
    d2ae:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    d2b2:	8f ef       	ldi	r24, 0xFF	; 255
    d2b4:	90 e0       	ldi	r25, 0x00	; 0
    d2b6:	a0 e0       	ldi	r26, 0x00	; 0
    d2b8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    d2ba:	20 91 bc 00 	lds	r18, 0x00BC
    d2be:	27 fd       	sbrc	r18, 7
    d2c0:	05 c0       	rjmp	.+10     	; 0xd2cc <i2c_readNak+0x20>
    d2c2:	01 97       	sbiw	r24, 0x01	; 1
    d2c4:	a1 09       	sbc	r26, r1
    d2c6:	b1 09       	sbc	r27, r1
    d2c8:	c0 f7       	brcc	.-16     	; 0xd2ba <i2c_readNak+0xe>
    d2ca:	04 c0       	rjmp	.+8      	; 0xd2d4 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    d2cc:	89 2b       	or	r24, r25
    d2ce:	8a 2b       	or	r24, r26
    d2d0:	8b 2b       	or	r24, r27
    d2d2:	19 f0       	breq	.+6      	; 0xd2da <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    d2d4:	80 91 bb 00 	lds	r24, 0x00BB
    d2d8:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    d2da:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    d2dc:	08 95       	ret

0000d2de <init_uart>:
#define XBUS_CRC_POLY 0x1021

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    d2de:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    d2e0:	80 91 c1 00 	lds	r24, 0x00C1
    d2e4:	8f 77       	andi	r24, 0x7F	; 127
    d2e6:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    d2ea:	80 91 c0 00 	lds	r24, 0x00C0
    d2ee:	87 ff       	sbrs	r24, 7
    d2f0:	05 c0       	rjmp	.+10     	; 0xd2fc <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    d2f2:	80 91 c6 00 	lds	r24, 0x00C6
    d2f6:	80 93 c2 00 	sts	0x00C2, r24
    d2fa:	f7 cf       	rjmp	.-18     	; 0xd2ea <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    d2fc:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    d300:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    d304:	86 e0       	ldi	r24, 0x06	; 6
    d306:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    d30a:	80 91 41 06 	lds	r24, 0x0641
    d30e:	82 30       	cpi	r24, 0x02	; 2
    d310:	a9 f0       	breq	.+42     	; 0xd33c <init_uart+0x5e>
    d312:	34 f4       	brge	.+12     	; 0xd320 <init_uart+0x42>
    d314:	87 fd       	sbrc	r24, 7
    d316:	4d c0       	rjmp	.+154    	; 0xd3b2 <init_uart+0xd4>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    d318:	80 91 c1 00 	lds	r24, 0x00C1
    d31c:	8f 7e       	andi	r24, 0xEF	; 239
    d31e:	47 c0       	rjmp	.+142    	; 0xd3ae <init_uart+0xd0>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    d320:	84 30       	cpi	r24, 0x04	; 4
    d322:	21 f0       	breq	.+8      	; 0xd32c <init_uart+0x4e>
    d324:	44 f1       	brlt	.+80     	; 0xd376 <init_uart+0x98>
    d326:	85 30       	cpi	r24, 0x05	; 5
    d328:	31 f1       	breq	.+76     	; 0xd376 <init_uart+0x98>
    d32a:	43 c0       	rjmp	.+134    	; 0xd3b2 <init_uart+0xd4>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    d32c:	90 91 c0 00 	lds	r25, 0x00C0
    d330:	9d 7f       	andi	r25, 0xFD	; 253
    d332:	90 93 c0 00 	sts	0x00C0, r25
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    d336:	10 92 c5 00 	sts	0x00C5, r1
    d33a:	25 c0       	rjmp	.+74     	; 0xd386 <init_uart+0xa8>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    d33c:	80 91 c0 00 	lds	r24, 0x00C0
    d340:	82 60       	ori	r24, 0x02	; 2
    d342:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    d346:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    d34a:	88 e1       	ldi	r24, 0x18	; 24
    d34c:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    d350:	80 91 c1 00 	lds	r24, 0x00C1
    d354:	80 61       	ori	r24, 0x10	; 16
    d356:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    d35a:	80 91 c2 00 	lds	r24, 0x00C2
    d35e:	88 60       	ori	r24, 0x08	; 8
    d360:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    d364:	80 91 c2 00 	lds	r24, 0x00C2
    d368:	8f 7e       	andi	r24, 0xEF	; 239
    d36a:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    d36e:	80 91 c2 00 	lds	r24, 0x00C2
    d372:	80 62       	ori	r24, 0x20	; 32
    d374:	17 c0       	rjmp	.+46     	; 0xd3a4 <init_uart+0xc6>
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps) (Same for MODEB/UDI)
		case MODEB:
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    d376:	80 91 c0 00 	lds	r24, 0x00C0
    d37a:	8d 7f       	andi	r24, 0xFD	; 253
    d37c:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    d380:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    d384:	8a e0       	ldi	r24, 0x0A	; 10
    d386:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    d38a:	80 91 c1 00 	lds	r24, 0x00C1
    d38e:	80 61       	ori	r24, 0x10	; 16
    d390:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    d394:	80 91 c2 00 	lds	r24, 0x00C2
    d398:	87 7f       	andi	r24, 0xF7	; 247
    d39a:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    d39e:	80 91 c2 00 	lds	r24, 0x00C2
    d3a2:	8f 7e       	andi	r24, 0xEF	; 239
    d3a4:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    d3a8:	80 91 c1 00 	lds	r24, 0x00C1
    d3ac:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    d3ae:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    d3b2:	78 94       	sei
    d3b4:	08 95       	ret

0000d3b6 <CRC16>:
// CRC16 checksum
uint16_t CRC16(uint16_t crc, uint8_t value)
{
	uint8_t i;
	
	crc = crc ^ (uint16_t)value << 8;
    d3b6:	96 27       	eor	r25, r22
    d3b8:	48 e0       	ldi	r20, 0x08	; 8
    d3ba:	9c 01       	movw	r18, r24
    d3bc:	22 0f       	add	r18, r18
    d3be:	33 1f       	adc	r19, r19
	
	for (i = 0; i < 8; i++)
	{
		if (crc & 0x8000)
    d3c0:	97 ff       	sbrs	r25, 7
    d3c2:	06 c0       	rjmp	.+12     	; 0xd3d0 <CRC16+0x1a>
		{
			crc = crc << 1 ^XBUS_CRC_POLY;
    d3c4:	c9 01       	movw	r24, r18
    d3c6:	51 e2       	ldi	r21, 0x21	; 33
    d3c8:	85 27       	eor	r24, r21
    d3ca:	50 e1       	ldi	r21, 0x10	; 16
    d3cc:	95 27       	eor	r25, r21
    d3ce:	01 c0       	rjmp	.+2      	; 0xd3d2 <CRC16+0x1c>
		}
		else
		{
			crc = crc << 1;
    d3d0:	c9 01       	movw	r24, r18
    d3d2:	41 50       	subi	r20, 0x01	; 1
{
	uint8_t i;
	
	crc = crc ^ (uint16_t)value << 8;
	
	for (i = 0; i < 8; i++)
    d3d4:	91 f7       	brne	.-28     	; 0xd3ba <CRC16+0x4>
			crc = crc << 1;
		}
	}

	return crc;
    d3d6:	08 95       	ret

0000d3d8 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    d3d8:	83 e0       	ldi	r24, 0x03	; 3
    d3da:	0e 94 a3 1b 	call	0x3746	; 0x3746 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    d3de:	80 91 78 00 	lds	r24, 0x0078
    d3e2:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    d3e6:	9c 01       	movw	r18, r24
    d3e8:	36 95       	lsr	r19
    d3ea:	27 95       	ror	r18
    d3ec:	ac 01       	movw	r20, r24
    d3ee:	44 0f       	add	r20, r20
    d3f0:	55 1f       	adc	r21, r21
    d3f2:	24 0f       	add	r18, r20
    d3f4:	35 1f       	adc	r19, r21
    d3f6:	ac 01       	movw	r20, r24
    d3f8:	74 e0       	ldi	r23, 0x04	; 4
    d3fa:	56 95       	lsr	r21
    d3fc:	47 95       	ror	r20
    d3fe:	7a 95       	dec	r23
    d400:	e1 f7       	brne	.-8      	; 0xd3fa <GetVbat+0x22>
    d402:	24 0f       	add	r18, r20
    d404:	35 1f       	adc	r19, r21
    d406:	e6 e0       	ldi	r30, 0x06	; 6
    d408:	96 95       	lsr	r25
    d40a:	87 95       	ror	r24
    d40c:	ea 95       	dec	r30
    d40e:	e1 f7       	brne	.-8      	; 0xd408 <GetVbat+0x30>

	return vBat;
}
    d410:	82 0f       	add	r24, r18
    d412:	93 1f       	adc	r25, r19
    d414:	08 95       	ret

0000d416 <__subsf3>:
    d416:	50 58       	subi	r21, 0x80	; 128

0000d418 <__addsf3>:
    d418:	bb 27       	eor	r27, r27
    d41a:	aa 27       	eor	r26, r26
    d41c:	0e d0       	rcall	.+28     	; 0xd43a <__addsf3x>
    d41e:	75 c1       	rjmp	.+746    	; 0xd70a <__fp_round>
    d420:	66 d1       	rcall	.+716    	; 0xd6ee <__fp_pscA>
    d422:	30 f0       	brcs	.+12     	; 0xd430 <__addsf3+0x18>
    d424:	6b d1       	rcall	.+726    	; 0xd6fc <__fp_pscB>
    d426:	20 f0       	brcs	.+8      	; 0xd430 <__addsf3+0x18>
    d428:	31 f4       	brne	.+12     	; 0xd436 <__addsf3+0x1e>
    d42a:	9f 3f       	cpi	r25, 0xFF	; 255
    d42c:	11 f4       	brne	.+4      	; 0xd432 <__addsf3+0x1a>
    d42e:	1e f4       	brtc	.+6      	; 0xd436 <__addsf3+0x1e>
    d430:	5b c1       	rjmp	.+694    	; 0xd6e8 <__fp_nan>
    d432:	0e f4       	brtc	.+2      	; 0xd436 <__addsf3+0x1e>
    d434:	e0 95       	com	r30
    d436:	e7 fb       	bst	r30, 7
    d438:	51 c1       	rjmp	.+674    	; 0xd6dc <__fp_inf>

0000d43a <__addsf3x>:
    d43a:	e9 2f       	mov	r30, r25
    d43c:	77 d1       	rcall	.+750    	; 0xd72c <__fp_split3>
    d43e:	80 f3       	brcs	.-32     	; 0xd420 <__addsf3+0x8>
    d440:	ba 17       	cp	r27, r26
    d442:	62 07       	cpc	r22, r18
    d444:	73 07       	cpc	r23, r19
    d446:	84 07       	cpc	r24, r20
    d448:	95 07       	cpc	r25, r21
    d44a:	18 f0       	brcs	.+6      	; 0xd452 <__addsf3x+0x18>
    d44c:	71 f4       	brne	.+28     	; 0xd46a <__addsf3x+0x30>
    d44e:	9e f5       	brtc	.+102    	; 0xd4b6 <__addsf3x+0x7c>
    d450:	8f c1       	rjmp	.+798    	; 0xd770 <__fp_zero>
    d452:	0e f4       	brtc	.+2      	; 0xd456 <__addsf3x+0x1c>
    d454:	e0 95       	com	r30
    d456:	0b 2e       	mov	r0, r27
    d458:	ba 2f       	mov	r27, r26
    d45a:	a0 2d       	mov	r26, r0
    d45c:	0b 01       	movw	r0, r22
    d45e:	b9 01       	movw	r22, r18
    d460:	90 01       	movw	r18, r0
    d462:	0c 01       	movw	r0, r24
    d464:	ca 01       	movw	r24, r20
    d466:	a0 01       	movw	r20, r0
    d468:	11 24       	eor	r1, r1
    d46a:	ff 27       	eor	r31, r31
    d46c:	59 1b       	sub	r21, r25
    d46e:	99 f0       	breq	.+38     	; 0xd496 <__addsf3x+0x5c>
    d470:	59 3f       	cpi	r21, 0xF9	; 249
    d472:	50 f4       	brcc	.+20     	; 0xd488 <__addsf3x+0x4e>
    d474:	50 3e       	cpi	r21, 0xE0	; 224
    d476:	68 f1       	brcs	.+90     	; 0xd4d2 <__addsf3x+0x98>
    d478:	1a 16       	cp	r1, r26
    d47a:	f0 40       	sbci	r31, 0x00	; 0
    d47c:	a2 2f       	mov	r26, r18
    d47e:	23 2f       	mov	r18, r19
    d480:	34 2f       	mov	r19, r20
    d482:	44 27       	eor	r20, r20
    d484:	58 5f       	subi	r21, 0xF8	; 248
    d486:	f3 cf       	rjmp	.-26     	; 0xd46e <__addsf3x+0x34>
    d488:	46 95       	lsr	r20
    d48a:	37 95       	ror	r19
    d48c:	27 95       	ror	r18
    d48e:	a7 95       	ror	r26
    d490:	f0 40       	sbci	r31, 0x00	; 0
    d492:	53 95       	inc	r21
    d494:	c9 f7       	brne	.-14     	; 0xd488 <__addsf3x+0x4e>
    d496:	7e f4       	brtc	.+30     	; 0xd4b6 <__addsf3x+0x7c>
    d498:	1f 16       	cp	r1, r31
    d49a:	ba 0b       	sbc	r27, r26
    d49c:	62 0b       	sbc	r22, r18
    d49e:	73 0b       	sbc	r23, r19
    d4a0:	84 0b       	sbc	r24, r20
    d4a2:	ba f0       	brmi	.+46     	; 0xd4d2 <__addsf3x+0x98>
    d4a4:	91 50       	subi	r25, 0x01	; 1
    d4a6:	a1 f0       	breq	.+40     	; 0xd4d0 <__addsf3x+0x96>
    d4a8:	ff 0f       	add	r31, r31
    d4aa:	bb 1f       	adc	r27, r27
    d4ac:	66 1f       	adc	r22, r22
    d4ae:	77 1f       	adc	r23, r23
    d4b0:	88 1f       	adc	r24, r24
    d4b2:	c2 f7       	brpl	.-16     	; 0xd4a4 <__addsf3x+0x6a>
    d4b4:	0e c0       	rjmp	.+28     	; 0xd4d2 <__addsf3x+0x98>
    d4b6:	ba 0f       	add	r27, r26
    d4b8:	62 1f       	adc	r22, r18
    d4ba:	73 1f       	adc	r23, r19
    d4bc:	84 1f       	adc	r24, r20
    d4be:	48 f4       	brcc	.+18     	; 0xd4d2 <__addsf3x+0x98>
    d4c0:	87 95       	ror	r24
    d4c2:	77 95       	ror	r23
    d4c4:	67 95       	ror	r22
    d4c6:	b7 95       	ror	r27
    d4c8:	f7 95       	ror	r31
    d4ca:	9e 3f       	cpi	r25, 0xFE	; 254
    d4cc:	08 f0       	brcs	.+2      	; 0xd4d0 <__addsf3x+0x96>
    d4ce:	b3 cf       	rjmp	.-154    	; 0xd436 <__addsf3+0x1e>
    d4d0:	93 95       	inc	r25
    d4d2:	88 0f       	add	r24, r24
    d4d4:	08 f0       	brcs	.+2      	; 0xd4d8 <__addsf3x+0x9e>
    d4d6:	99 27       	eor	r25, r25
    d4d8:	ee 0f       	add	r30, r30
    d4da:	97 95       	ror	r25
    d4dc:	87 95       	ror	r24
    d4de:	08 95       	ret

0000d4e0 <__cmpsf2>:
    d4e0:	d9 d0       	rcall	.+434    	; 0xd694 <__fp_cmp>
    d4e2:	08 f4       	brcc	.+2      	; 0xd4e6 <__cmpsf2+0x6>
    d4e4:	81 e0       	ldi	r24, 0x01	; 1
    d4e6:	08 95       	ret

0000d4e8 <__divsf3>:
    d4e8:	0c d0       	rcall	.+24     	; 0xd502 <__divsf3x>
    d4ea:	0f c1       	rjmp	.+542    	; 0xd70a <__fp_round>
    d4ec:	07 d1       	rcall	.+526    	; 0xd6fc <__fp_pscB>
    d4ee:	40 f0       	brcs	.+16     	; 0xd500 <__divsf3+0x18>
    d4f0:	fe d0       	rcall	.+508    	; 0xd6ee <__fp_pscA>
    d4f2:	30 f0       	brcs	.+12     	; 0xd500 <__divsf3+0x18>
    d4f4:	21 f4       	brne	.+8      	; 0xd4fe <__divsf3+0x16>
    d4f6:	5f 3f       	cpi	r21, 0xFF	; 255
    d4f8:	19 f0       	breq	.+6      	; 0xd500 <__divsf3+0x18>
    d4fa:	f0 c0       	rjmp	.+480    	; 0xd6dc <__fp_inf>
    d4fc:	51 11       	cpse	r21, r1
    d4fe:	39 c1       	rjmp	.+626    	; 0xd772 <__fp_szero>
    d500:	f3 c0       	rjmp	.+486    	; 0xd6e8 <__fp_nan>

0000d502 <__divsf3x>:
    d502:	14 d1       	rcall	.+552    	; 0xd72c <__fp_split3>
    d504:	98 f3       	brcs	.-26     	; 0xd4ec <__divsf3+0x4>

0000d506 <__divsf3_pse>:
    d506:	99 23       	and	r25, r25
    d508:	c9 f3       	breq	.-14     	; 0xd4fc <__divsf3+0x14>
    d50a:	55 23       	and	r21, r21
    d50c:	b1 f3       	breq	.-20     	; 0xd4fa <__divsf3+0x12>
    d50e:	95 1b       	sub	r25, r21
    d510:	55 0b       	sbc	r21, r21
    d512:	bb 27       	eor	r27, r27
    d514:	aa 27       	eor	r26, r26
    d516:	62 17       	cp	r22, r18
    d518:	73 07       	cpc	r23, r19
    d51a:	84 07       	cpc	r24, r20
    d51c:	38 f0       	brcs	.+14     	; 0xd52c <__divsf3_pse+0x26>
    d51e:	9f 5f       	subi	r25, 0xFF	; 255
    d520:	5f 4f       	sbci	r21, 0xFF	; 255
    d522:	22 0f       	add	r18, r18
    d524:	33 1f       	adc	r19, r19
    d526:	44 1f       	adc	r20, r20
    d528:	aa 1f       	adc	r26, r26
    d52a:	a9 f3       	breq	.-22     	; 0xd516 <__divsf3_pse+0x10>
    d52c:	33 d0       	rcall	.+102    	; 0xd594 <__divsf3_pse+0x8e>
    d52e:	0e 2e       	mov	r0, r30
    d530:	3a f0       	brmi	.+14     	; 0xd540 <__divsf3_pse+0x3a>
    d532:	e0 e8       	ldi	r30, 0x80	; 128
    d534:	30 d0       	rcall	.+96     	; 0xd596 <__divsf3_pse+0x90>
    d536:	91 50       	subi	r25, 0x01	; 1
    d538:	50 40       	sbci	r21, 0x00	; 0
    d53a:	e6 95       	lsr	r30
    d53c:	00 1c       	adc	r0, r0
    d53e:	ca f7       	brpl	.-14     	; 0xd532 <__divsf3_pse+0x2c>
    d540:	29 d0       	rcall	.+82     	; 0xd594 <__divsf3_pse+0x8e>
    d542:	fe 2f       	mov	r31, r30
    d544:	27 d0       	rcall	.+78     	; 0xd594 <__divsf3_pse+0x8e>
    d546:	66 0f       	add	r22, r22
    d548:	77 1f       	adc	r23, r23
    d54a:	88 1f       	adc	r24, r24
    d54c:	bb 1f       	adc	r27, r27
    d54e:	26 17       	cp	r18, r22
    d550:	37 07       	cpc	r19, r23
    d552:	48 07       	cpc	r20, r24
    d554:	ab 07       	cpc	r26, r27
    d556:	b0 e8       	ldi	r27, 0x80	; 128
    d558:	09 f0       	breq	.+2      	; 0xd55c <__divsf3_pse+0x56>
    d55a:	bb 0b       	sbc	r27, r27
    d55c:	80 2d       	mov	r24, r0
    d55e:	bf 01       	movw	r22, r30
    d560:	ff 27       	eor	r31, r31
    d562:	93 58       	subi	r25, 0x83	; 131
    d564:	5f 4f       	sbci	r21, 0xFF	; 255
    d566:	2a f0       	brmi	.+10     	; 0xd572 <__divsf3_pse+0x6c>
    d568:	9e 3f       	cpi	r25, 0xFE	; 254
    d56a:	51 05       	cpc	r21, r1
    d56c:	68 f0       	brcs	.+26     	; 0xd588 <__divsf3_pse+0x82>
    d56e:	b6 c0       	rjmp	.+364    	; 0xd6dc <__fp_inf>
    d570:	00 c1       	rjmp	.+512    	; 0xd772 <__fp_szero>
    d572:	5f 3f       	cpi	r21, 0xFF	; 255
    d574:	ec f3       	brlt	.-6      	; 0xd570 <__divsf3_pse+0x6a>
    d576:	98 3e       	cpi	r25, 0xE8	; 232
    d578:	dc f3       	brlt	.-10     	; 0xd570 <__divsf3_pse+0x6a>
    d57a:	86 95       	lsr	r24
    d57c:	77 95       	ror	r23
    d57e:	67 95       	ror	r22
    d580:	b7 95       	ror	r27
    d582:	f7 95       	ror	r31
    d584:	9f 5f       	subi	r25, 0xFF	; 255
    d586:	c9 f7       	brne	.-14     	; 0xd57a <__divsf3_pse+0x74>
    d588:	88 0f       	add	r24, r24
    d58a:	91 1d       	adc	r25, r1
    d58c:	96 95       	lsr	r25
    d58e:	87 95       	ror	r24
    d590:	97 f9       	bld	r25, 7
    d592:	08 95       	ret
    d594:	e1 e0       	ldi	r30, 0x01	; 1
    d596:	66 0f       	add	r22, r22
    d598:	77 1f       	adc	r23, r23
    d59a:	88 1f       	adc	r24, r24
    d59c:	bb 1f       	adc	r27, r27
    d59e:	62 17       	cp	r22, r18
    d5a0:	73 07       	cpc	r23, r19
    d5a2:	84 07       	cpc	r24, r20
    d5a4:	ba 07       	cpc	r27, r26
    d5a6:	20 f0       	brcs	.+8      	; 0xd5b0 <__divsf3_pse+0xaa>
    d5a8:	62 1b       	sub	r22, r18
    d5aa:	73 0b       	sbc	r23, r19
    d5ac:	84 0b       	sbc	r24, r20
    d5ae:	ba 0b       	sbc	r27, r26
    d5b0:	ee 1f       	adc	r30, r30
    d5b2:	88 f7       	brcc	.-30     	; 0xd596 <__divsf3_pse+0x90>
    d5b4:	e0 95       	com	r30
    d5b6:	08 95       	ret

0000d5b8 <__fixsfsi>:
    d5b8:	04 d0       	rcall	.+8      	; 0xd5c2 <__fixunssfsi>
    d5ba:	68 94       	set
    d5bc:	b1 11       	cpse	r27, r1
    d5be:	d9 c0       	rjmp	.+434    	; 0xd772 <__fp_szero>
    d5c0:	08 95       	ret

0000d5c2 <__fixunssfsi>:
    d5c2:	bc d0       	rcall	.+376    	; 0xd73c <__fp_splitA>
    d5c4:	88 f0       	brcs	.+34     	; 0xd5e8 <__fixunssfsi+0x26>
    d5c6:	9f 57       	subi	r25, 0x7F	; 127
    d5c8:	90 f0       	brcs	.+36     	; 0xd5ee <__fixunssfsi+0x2c>
    d5ca:	b9 2f       	mov	r27, r25
    d5cc:	99 27       	eor	r25, r25
    d5ce:	b7 51       	subi	r27, 0x17	; 23
    d5d0:	a0 f0       	brcs	.+40     	; 0xd5fa <__fixunssfsi+0x38>
    d5d2:	d1 f0       	breq	.+52     	; 0xd608 <__fixunssfsi+0x46>
    d5d4:	66 0f       	add	r22, r22
    d5d6:	77 1f       	adc	r23, r23
    d5d8:	88 1f       	adc	r24, r24
    d5da:	99 1f       	adc	r25, r25
    d5dc:	1a f0       	brmi	.+6      	; 0xd5e4 <__fixunssfsi+0x22>
    d5de:	ba 95       	dec	r27
    d5e0:	c9 f7       	brne	.-14     	; 0xd5d4 <__fixunssfsi+0x12>
    d5e2:	12 c0       	rjmp	.+36     	; 0xd608 <__fixunssfsi+0x46>
    d5e4:	b1 30       	cpi	r27, 0x01	; 1
    d5e6:	81 f0       	breq	.+32     	; 0xd608 <__fixunssfsi+0x46>
    d5e8:	c3 d0       	rcall	.+390    	; 0xd770 <__fp_zero>
    d5ea:	b1 e0       	ldi	r27, 0x01	; 1
    d5ec:	08 95       	ret
    d5ee:	c0 c0       	rjmp	.+384    	; 0xd770 <__fp_zero>
    d5f0:	67 2f       	mov	r22, r23
    d5f2:	78 2f       	mov	r23, r24
    d5f4:	88 27       	eor	r24, r24
    d5f6:	b8 5f       	subi	r27, 0xF8	; 248
    d5f8:	39 f0       	breq	.+14     	; 0xd608 <__fixunssfsi+0x46>
    d5fa:	b9 3f       	cpi	r27, 0xF9	; 249
    d5fc:	cc f3       	brlt	.-14     	; 0xd5f0 <__fixunssfsi+0x2e>
    d5fe:	86 95       	lsr	r24
    d600:	77 95       	ror	r23
    d602:	67 95       	ror	r22
    d604:	b3 95       	inc	r27
    d606:	d9 f7       	brne	.-10     	; 0xd5fe <__fixunssfsi+0x3c>
    d608:	3e f4       	brtc	.+14     	; 0xd618 <__fixunssfsi+0x56>
    d60a:	90 95       	com	r25
    d60c:	80 95       	com	r24
    d60e:	70 95       	com	r23
    d610:	61 95       	neg	r22
    d612:	7f 4f       	sbci	r23, 0xFF	; 255
    d614:	8f 4f       	sbci	r24, 0xFF	; 255
    d616:	9f 4f       	sbci	r25, 0xFF	; 255
    d618:	08 95       	ret

0000d61a <__floatunsisf>:
    d61a:	e8 94       	clt
    d61c:	09 c0       	rjmp	.+18     	; 0xd630 <__floatsisf+0x12>

0000d61e <__floatsisf>:
    d61e:	97 fb       	bst	r25, 7
    d620:	3e f4       	brtc	.+14     	; 0xd630 <__floatsisf+0x12>
    d622:	90 95       	com	r25
    d624:	80 95       	com	r24
    d626:	70 95       	com	r23
    d628:	61 95       	neg	r22
    d62a:	7f 4f       	sbci	r23, 0xFF	; 255
    d62c:	8f 4f       	sbci	r24, 0xFF	; 255
    d62e:	9f 4f       	sbci	r25, 0xFF	; 255
    d630:	99 23       	and	r25, r25
    d632:	a9 f0       	breq	.+42     	; 0xd65e <__floatsisf+0x40>
    d634:	f9 2f       	mov	r31, r25
    d636:	96 e9       	ldi	r25, 0x96	; 150
    d638:	bb 27       	eor	r27, r27
    d63a:	93 95       	inc	r25
    d63c:	f6 95       	lsr	r31
    d63e:	87 95       	ror	r24
    d640:	77 95       	ror	r23
    d642:	67 95       	ror	r22
    d644:	b7 95       	ror	r27
    d646:	f1 11       	cpse	r31, r1
    d648:	f8 cf       	rjmp	.-16     	; 0xd63a <__floatsisf+0x1c>
    d64a:	fa f4       	brpl	.+62     	; 0xd68a <__floatsisf+0x6c>
    d64c:	bb 0f       	add	r27, r27
    d64e:	11 f4       	brne	.+4      	; 0xd654 <__floatsisf+0x36>
    d650:	60 ff       	sbrs	r22, 0
    d652:	1b c0       	rjmp	.+54     	; 0xd68a <__floatsisf+0x6c>
    d654:	6f 5f       	subi	r22, 0xFF	; 255
    d656:	7f 4f       	sbci	r23, 0xFF	; 255
    d658:	8f 4f       	sbci	r24, 0xFF	; 255
    d65a:	9f 4f       	sbci	r25, 0xFF	; 255
    d65c:	16 c0       	rjmp	.+44     	; 0xd68a <__floatsisf+0x6c>
    d65e:	88 23       	and	r24, r24
    d660:	11 f0       	breq	.+4      	; 0xd666 <__floatsisf+0x48>
    d662:	96 e9       	ldi	r25, 0x96	; 150
    d664:	11 c0       	rjmp	.+34     	; 0xd688 <__floatsisf+0x6a>
    d666:	77 23       	and	r23, r23
    d668:	21 f0       	breq	.+8      	; 0xd672 <__floatsisf+0x54>
    d66a:	9e e8       	ldi	r25, 0x8E	; 142
    d66c:	87 2f       	mov	r24, r23
    d66e:	76 2f       	mov	r23, r22
    d670:	05 c0       	rjmp	.+10     	; 0xd67c <__floatsisf+0x5e>
    d672:	66 23       	and	r22, r22
    d674:	71 f0       	breq	.+28     	; 0xd692 <__floatsisf+0x74>
    d676:	96 e8       	ldi	r25, 0x86	; 134
    d678:	86 2f       	mov	r24, r22
    d67a:	70 e0       	ldi	r23, 0x00	; 0
    d67c:	60 e0       	ldi	r22, 0x00	; 0
    d67e:	2a f0       	brmi	.+10     	; 0xd68a <__floatsisf+0x6c>
    d680:	9a 95       	dec	r25
    d682:	66 0f       	add	r22, r22
    d684:	77 1f       	adc	r23, r23
    d686:	88 1f       	adc	r24, r24
    d688:	da f7       	brpl	.-10     	; 0xd680 <__floatsisf+0x62>
    d68a:	88 0f       	add	r24, r24
    d68c:	96 95       	lsr	r25
    d68e:	87 95       	ror	r24
    d690:	97 f9       	bld	r25, 7
    d692:	08 95       	ret

0000d694 <__fp_cmp>:
    d694:	99 0f       	add	r25, r25
    d696:	00 08       	sbc	r0, r0
    d698:	55 0f       	add	r21, r21
    d69a:	aa 0b       	sbc	r26, r26
    d69c:	e0 e8       	ldi	r30, 0x80	; 128
    d69e:	fe ef       	ldi	r31, 0xFE	; 254
    d6a0:	16 16       	cp	r1, r22
    d6a2:	17 06       	cpc	r1, r23
    d6a4:	e8 07       	cpc	r30, r24
    d6a6:	f9 07       	cpc	r31, r25
    d6a8:	c0 f0       	brcs	.+48     	; 0xd6da <__fp_cmp+0x46>
    d6aa:	12 16       	cp	r1, r18
    d6ac:	13 06       	cpc	r1, r19
    d6ae:	e4 07       	cpc	r30, r20
    d6b0:	f5 07       	cpc	r31, r21
    d6b2:	98 f0       	brcs	.+38     	; 0xd6da <__fp_cmp+0x46>
    d6b4:	62 1b       	sub	r22, r18
    d6b6:	73 0b       	sbc	r23, r19
    d6b8:	84 0b       	sbc	r24, r20
    d6ba:	95 0b       	sbc	r25, r21
    d6bc:	39 f4       	brne	.+14     	; 0xd6cc <__fp_cmp+0x38>
    d6be:	0a 26       	eor	r0, r26
    d6c0:	61 f0       	breq	.+24     	; 0xd6da <__fp_cmp+0x46>
    d6c2:	23 2b       	or	r18, r19
    d6c4:	24 2b       	or	r18, r20
    d6c6:	25 2b       	or	r18, r21
    d6c8:	21 f4       	brne	.+8      	; 0xd6d2 <__fp_cmp+0x3e>
    d6ca:	08 95       	ret
    d6cc:	0a 26       	eor	r0, r26
    d6ce:	09 f4       	brne	.+2      	; 0xd6d2 <__fp_cmp+0x3e>
    d6d0:	a1 40       	sbci	r26, 0x01	; 1
    d6d2:	a6 95       	lsr	r26
    d6d4:	8f ef       	ldi	r24, 0xFF	; 255
    d6d6:	81 1d       	adc	r24, r1
    d6d8:	81 1d       	adc	r24, r1
    d6da:	08 95       	ret

0000d6dc <__fp_inf>:
    d6dc:	97 f9       	bld	r25, 7
    d6de:	9f 67       	ori	r25, 0x7F	; 127
    d6e0:	80 e8       	ldi	r24, 0x80	; 128
    d6e2:	70 e0       	ldi	r23, 0x00	; 0
    d6e4:	60 e0       	ldi	r22, 0x00	; 0
    d6e6:	08 95       	ret

0000d6e8 <__fp_nan>:
    d6e8:	9f ef       	ldi	r25, 0xFF	; 255
    d6ea:	80 ec       	ldi	r24, 0xC0	; 192
    d6ec:	08 95       	ret

0000d6ee <__fp_pscA>:
    d6ee:	00 24       	eor	r0, r0
    d6f0:	0a 94       	dec	r0
    d6f2:	16 16       	cp	r1, r22
    d6f4:	17 06       	cpc	r1, r23
    d6f6:	18 06       	cpc	r1, r24
    d6f8:	09 06       	cpc	r0, r25
    d6fa:	08 95       	ret

0000d6fc <__fp_pscB>:
    d6fc:	00 24       	eor	r0, r0
    d6fe:	0a 94       	dec	r0
    d700:	12 16       	cp	r1, r18
    d702:	13 06       	cpc	r1, r19
    d704:	14 06       	cpc	r1, r20
    d706:	05 06       	cpc	r0, r21
    d708:	08 95       	ret

0000d70a <__fp_round>:
    d70a:	09 2e       	mov	r0, r25
    d70c:	03 94       	inc	r0
    d70e:	00 0c       	add	r0, r0
    d710:	11 f4       	brne	.+4      	; 0xd716 <__fp_round+0xc>
    d712:	88 23       	and	r24, r24
    d714:	52 f0       	brmi	.+20     	; 0xd72a <__fp_round+0x20>
    d716:	bb 0f       	add	r27, r27
    d718:	40 f4       	brcc	.+16     	; 0xd72a <__fp_round+0x20>
    d71a:	bf 2b       	or	r27, r31
    d71c:	11 f4       	brne	.+4      	; 0xd722 <__fp_round+0x18>
    d71e:	60 ff       	sbrs	r22, 0
    d720:	04 c0       	rjmp	.+8      	; 0xd72a <__fp_round+0x20>
    d722:	6f 5f       	subi	r22, 0xFF	; 255
    d724:	7f 4f       	sbci	r23, 0xFF	; 255
    d726:	8f 4f       	sbci	r24, 0xFF	; 255
    d728:	9f 4f       	sbci	r25, 0xFF	; 255
    d72a:	08 95       	ret

0000d72c <__fp_split3>:
    d72c:	57 fd       	sbrc	r21, 7
    d72e:	90 58       	subi	r25, 0x80	; 128
    d730:	44 0f       	add	r20, r20
    d732:	55 1f       	adc	r21, r21
    d734:	59 f0       	breq	.+22     	; 0xd74c <__fp_splitA+0x10>
    d736:	5f 3f       	cpi	r21, 0xFF	; 255
    d738:	71 f0       	breq	.+28     	; 0xd756 <__fp_splitA+0x1a>
    d73a:	47 95       	ror	r20

0000d73c <__fp_splitA>:
    d73c:	88 0f       	add	r24, r24
    d73e:	97 fb       	bst	r25, 7
    d740:	99 1f       	adc	r25, r25
    d742:	61 f0       	breq	.+24     	; 0xd75c <__fp_splitA+0x20>
    d744:	9f 3f       	cpi	r25, 0xFF	; 255
    d746:	79 f0       	breq	.+30     	; 0xd766 <__fp_splitA+0x2a>
    d748:	87 95       	ror	r24
    d74a:	08 95       	ret
    d74c:	12 16       	cp	r1, r18
    d74e:	13 06       	cpc	r1, r19
    d750:	14 06       	cpc	r1, r20
    d752:	55 1f       	adc	r21, r21
    d754:	f2 cf       	rjmp	.-28     	; 0xd73a <__fp_split3+0xe>
    d756:	46 95       	lsr	r20
    d758:	f1 df       	rcall	.-30     	; 0xd73c <__fp_splitA>
    d75a:	08 c0       	rjmp	.+16     	; 0xd76c <__fp_splitA+0x30>
    d75c:	16 16       	cp	r1, r22
    d75e:	17 06       	cpc	r1, r23
    d760:	18 06       	cpc	r1, r24
    d762:	99 1f       	adc	r25, r25
    d764:	f1 cf       	rjmp	.-30     	; 0xd748 <__fp_splitA+0xc>
    d766:	86 95       	lsr	r24
    d768:	71 05       	cpc	r23, r1
    d76a:	61 05       	cpc	r22, r1
    d76c:	08 94       	sec
    d76e:	08 95       	ret

0000d770 <__fp_zero>:
    d770:	e8 94       	clt

0000d772 <__fp_szero>:
    d772:	bb 27       	eor	r27, r27
    d774:	66 27       	eor	r22, r22
    d776:	77 27       	eor	r23, r23
    d778:	cb 01       	movw	r24, r22
    d77a:	97 f9       	bld	r25, 7
    d77c:	08 95       	ret

0000d77e <__gesf2>:
    d77e:	8a df       	rcall	.-236    	; 0xd694 <__fp_cmp>
    d780:	08 f4       	brcc	.+2      	; 0xd784 <__gesf2+0x6>
    d782:	8f ef       	ldi	r24, 0xFF	; 255
    d784:	08 95       	ret

0000d786 <__mulsf3>:
    d786:	0b d0       	rcall	.+22     	; 0xd79e <__mulsf3x>
    d788:	c0 cf       	rjmp	.-128    	; 0xd70a <__fp_round>
    d78a:	b1 df       	rcall	.-158    	; 0xd6ee <__fp_pscA>
    d78c:	28 f0       	brcs	.+10     	; 0xd798 <__mulsf3+0x12>
    d78e:	b6 df       	rcall	.-148    	; 0xd6fc <__fp_pscB>
    d790:	18 f0       	brcs	.+6      	; 0xd798 <__mulsf3+0x12>
    d792:	95 23       	and	r25, r21
    d794:	09 f0       	breq	.+2      	; 0xd798 <__mulsf3+0x12>
    d796:	a2 cf       	rjmp	.-188    	; 0xd6dc <__fp_inf>
    d798:	a7 cf       	rjmp	.-178    	; 0xd6e8 <__fp_nan>
    d79a:	11 24       	eor	r1, r1
    d79c:	ea cf       	rjmp	.-44     	; 0xd772 <__fp_szero>

0000d79e <__mulsf3x>:
    d79e:	c6 df       	rcall	.-116    	; 0xd72c <__fp_split3>
    d7a0:	a0 f3       	brcs	.-24     	; 0xd78a <__mulsf3+0x4>

0000d7a2 <__mulsf3_pse>:
    d7a2:	95 9f       	mul	r25, r21
    d7a4:	d1 f3       	breq	.-12     	; 0xd79a <__mulsf3+0x14>
    d7a6:	95 0f       	add	r25, r21
    d7a8:	50 e0       	ldi	r21, 0x00	; 0
    d7aa:	55 1f       	adc	r21, r21
    d7ac:	62 9f       	mul	r22, r18
    d7ae:	f0 01       	movw	r30, r0
    d7b0:	72 9f       	mul	r23, r18
    d7b2:	bb 27       	eor	r27, r27
    d7b4:	f0 0d       	add	r31, r0
    d7b6:	b1 1d       	adc	r27, r1
    d7b8:	63 9f       	mul	r22, r19
    d7ba:	aa 27       	eor	r26, r26
    d7bc:	f0 0d       	add	r31, r0
    d7be:	b1 1d       	adc	r27, r1
    d7c0:	aa 1f       	adc	r26, r26
    d7c2:	64 9f       	mul	r22, r20
    d7c4:	66 27       	eor	r22, r22
    d7c6:	b0 0d       	add	r27, r0
    d7c8:	a1 1d       	adc	r26, r1
    d7ca:	66 1f       	adc	r22, r22
    d7cc:	82 9f       	mul	r24, r18
    d7ce:	22 27       	eor	r18, r18
    d7d0:	b0 0d       	add	r27, r0
    d7d2:	a1 1d       	adc	r26, r1
    d7d4:	62 1f       	adc	r22, r18
    d7d6:	73 9f       	mul	r23, r19
    d7d8:	b0 0d       	add	r27, r0
    d7da:	a1 1d       	adc	r26, r1
    d7dc:	62 1f       	adc	r22, r18
    d7de:	83 9f       	mul	r24, r19
    d7e0:	a0 0d       	add	r26, r0
    d7e2:	61 1d       	adc	r22, r1
    d7e4:	22 1f       	adc	r18, r18
    d7e6:	74 9f       	mul	r23, r20
    d7e8:	33 27       	eor	r19, r19
    d7ea:	a0 0d       	add	r26, r0
    d7ec:	61 1d       	adc	r22, r1
    d7ee:	23 1f       	adc	r18, r19
    d7f0:	84 9f       	mul	r24, r20
    d7f2:	60 0d       	add	r22, r0
    d7f4:	21 1d       	adc	r18, r1
    d7f6:	82 2f       	mov	r24, r18
    d7f8:	76 2f       	mov	r23, r22
    d7fa:	6a 2f       	mov	r22, r26
    d7fc:	11 24       	eor	r1, r1
    d7fe:	9f 57       	subi	r25, 0x7F	; 127
    d800:	50 40       	sbci	r21, 0x00	; 0
    d802:	8a f0       	brmi	.+34     	; 0xd826 <__mulsf3_pse+0x84>
    d804:	e1 f0       	breq	.+56     	; 0xd83e <__mulsf3_pse+0x9c>
    d806:	88 23       	and	r24, r24
    d808:	4a f0       	brmi	.+18     	; 0xd81c <__mulsf3_pse+0x7a>
    d80a:	ee 0f       	add	r30, r30
    d80c:	ff 1f       	adc	r31, r31
    d80e:	bb 1f       	adc	r27, r27
    d810:	66 1f       	adc	r22, r22
    d812:	77 1f       	adc	r23, r23
    d814:	88 1f       	adc	r24, r24
    d816:	91 50       	subi	r25, 0x01	; 1
    d818:	50 40       	sbci	r21, 0x00	; 0
    d81a:	a9 f7       	brne	.-22     	; 0xd806 <__mulsf3_pse+0x64>
    d81c:	9e 3f       	cpi	r25, 0xFE	; 254
    d81e:	51 05       	cpc	r21, r1
    d820:	70 f0       	brcs	.+28     	; 0xd83e <__mulsf3_pse+0x9c>
    d822:	5c cf       	rjmp	.-328    	; 0xd6dc <__fp_inf>
    d824:	a6 cf       	rjmp	.-180    	; 0xd772 <__fp_szero>
    d826:	5f 3f       	cpi	r21, 0xFF	; 255
    d828:	ec f3       	brlt	.-6      	; 0xd824 <__mulsf3_pse+0x82>
    d82a:	98 3e       	cpi	r25, 0xE8	; 232
    d82c:	dc f3       	brlt	.-10     	; 0xd824 <__mulsf3_pse+0x82>
    d82e:	86 95       	lsr	r24
    d830:	77 95       	ror	r23
    d832:	67 95       	ror	r22
    d834:	b7 95       	ror	r27
    d836:	f7 95       	ror	r31
    d838:	e7 95       	ror	r30
    d83a:	9f 5f       	subi	r25, 0xFF	; 255
    d83c:	c1 f7       	brne	.-16     	; 0xd82e <__mulsf3_pse+0x8c>
    d83e:	fe 2b       	or	r31, r30
    d840:	88 0f       	add	r24, r24
    d842:	91 1d       	adc	r25, r1
    d844:	96 95       	lsr	r25
    d846:	87 95       	ror	r24
    d848:	97 f9       	bld	r25, 7
    d84a:	08 95       	ret

0000d84c <__udivmodhi4>:
    d84c:	aa 1b       	sub	r26, r26
    d84e:	bb 1b       	sub	r27, r27
    d850:	51 e1       	ldi	r21, 0x11	; 17
    d852:	07 c0       	rjmp	.+14     	; 0xd862 <__udivmodhi4_ep>

0000d854 <__udivmodhi4_loop>:
    d854:	aa 1f       	adc	r26, r26
    d856:	bb 1f       	adc	r27, r27
    d858:	a6 17       	cp	r26, r22
    d85a:	b7 07       	cpc	r27, r23
    d85c:	10 f0       	brcs	.+4      	; 0xd862 <__udivmodhi4_ep>
    d85e:	a6 1b       	sub	r26, r22
    d860:	b7 0b       	sbc	r27, r23

0000d862 <__udivmodhi4_ep>:
    d862:	88 1f       	adc	r24, r24
    d864:	99 1f       	adc	r25, r25
    d866:	5a 95       	dec	r21
    d868:	a9 f7       	brne	.-22     	; 0xd854 <__udivmodhi4_loop>
    d86a:	80 95       	com	r24
    d86c:	90 95       	com	r25
    d86e:	bc 01       	movw	r22, r24
    d870:	cd 01       	movw	r24, r26
    d872:	08 95       	ret

0000d874 <__divmodhi4>:
    d874:	97 fb       	bst	r25, 7
    d876:	07 2e       	mov	r0, r23
    d878:	16 f4       	brtc	.+4      	; 0xd87e <__divmodhi4+0xa>
    d87a:	00 94       	com	r0
    d87c:	07 d0       	rcall	.+14     	; 0xd88c <__divmodhi4_neg1>
    d87e:	77 fd       	sbrc	r23, 7
    d880:	09 d0       	rcall	.+18     	; 0xd894 <__divmodhi4_neg2>
    d882:	0e 94 26 6c 	call	0xd84c	; 0xd84c <__udivmodhi4>
    d886:	07 fc       	sbrc	r0, 7
    d888:	05 d0       	rcall	.+10     	; 0xd894 <__divmodhi4_neg2>
    d88a:	3e f4       	brtc	.+14     	; 0xd89a <__divmodhi4_exit>

0000d88c <__divmodhi4_neg1>:
    d88c:	90 95       	com	r25
    d88e:	81 95       	neg	r24
    d890:	9f 4f       	sbci	r25, 0xFF	; 255
    d892:	08 95       	ret

0000d894 <__divmodhi4_neg2>:
    d894:	70 95       	com	r23
    d896:	61 95       	neg	r22
    d898:	7f 4f       	sbci	r23, 0xFF	; 255

0000d89a <__divmodhi4_exit>:
    d89a:	08 95       	ret

0000d89c <__divmodsi4>:
    d89c:	05 2e       	mov	r0, r21
    d89e:	97 fb       	bst	r25, 7
    d8a0:	1e f4       	brtc	.+6      	; 0xd8a8 <__divmodsi4+0xc>
    d8a2:	00 94       	com	r0
    d8a4:	0e 94 65 6c 	call	0xd8ca	; 0xd8ca <__negsi2>
    d8a8:	57 fd       	sbrc	r21, 7
    d8aa:	07 d0       	rcall	.+14     	; 0xd8ba <__divmodsi4_neg2>
    d8ac:	0e 94 a4 6c 	call	0xd948	; 0xd948 <__udivmodsi4>
    d8b0:	07 fc       	sbrc	r0, 7
    d8b2:	03 d0       	rcall	.+6      	; 0xd8ba <__divmodsi4_neg2>
    d8b4:	4e f4       	brtc	.+18     	; 0xd8c8 <__divmodsi4_exit>
    d8b6:	0c 94 65 6c 	jmp	0xd8ca	; 0xd8ca <__negsi2>

0000d8ba <__divmodsi4_neg2>:
    d8ba:	50 95       	com	r21
    d8bc:	40 95       	com	r20
    d8be:	30 95       	com	r19
    d8c0:	21 95       	neg	r18
    d8c2:	3f 4f       	sbci	r19, 0xFF	; 255
    d8c4:	4f 4f       	sbci	r20, 0xFF	; 255
    d8c6:	5f 4f       	sbci	r21, 0xFF	; 255

0000d8c8 <__divmodsi4_exit>:
    d8c8:	08 95       	ret

0000d8ca <__negsi2>:
    d8ca:	90 95       	com	r25
    d8cc:	80 95       	com	r24
    d8ce:	70 95       	com	r23
    d8d0:	61 95       	neg	r22
    d8d2:	7f 4f       	sbci	r23, 0xFF	; 255
    d8d4:	8f 4f       	sbci	r24, 0xFF	; 255
    d8d6:	9f 4f       	sbci	r25, 0xFF	; 255
    d8d8:	08 95       	ret

0000d8da <__tablejump2__>:
    d8da:	ee 0f       	add	r30, r30
    d8dc:	ff 1f       	adc	r31, r31

0000d8de <__tablejump__>:
    d8de:	05 90       	lpm	r0, Z+
    d8e0:	f4 91       	lpm	r31, Z
    d8e2:	e0 2d       	mov	r30, r0
    d8e4:	09 94       	ijmp

0000d8e6 <__mulhisi3>:
    d8e6:	0e 94 7b 6c 	call	0xd8f6	; 0xd8f6 <__umulhisi3>
    d8ea:	33 23       	and	r19, r19
    d8ec:	12 f4       	brpl	.+4      	; 0xd8f2 <__mulhisi3+0xc>
    d8ee:	8a 1b       	sub	r24, r26
    d8f0:	9b 0b       	sbc	r25, r27
    d8f2:	0c 94 8c 6c 	jmp	0xd918	; 0xd918 <__usmulhisi3_tail>

0000d8f6 <__umulhisi3>:
    d8f6:	a2 9f       	mul	r26, r18
    d8f8:	b0 01       	movw	r22, r0
    d8fa:	b3 9f       	mul	r27, r19
    d8fc:	c0 01       	movw	r24, r0
    d8fe:	a3 9f       	mul	r26, r19
    d900:	70 0d       	add	r23, r0
    d902:	81 1d       	adc	r24, r1
    d904:	11 24       	eor	r1, r1
    d906:	91 1d       	adc	r25, r1
    d908:	b2 9f       	mul	r27, r18
    d90a:	70 0d       	add	r23, r0
    d90c:	81 1d       	adc	r24, r1
    d90e:	11 24       	eor	r1, r1
    d910:	91 1d       	adc	r25, r1
    d912:	08 95       	ret

0000d914 <__usmulhisi3>:
    d914:	0e 94 7b 6c 	call	0xd8f6	; 0xd8f6 <__umulhisi3>

0000d918 <__usmulhisi3_tail>:
    d918:	b7 ff       	sbrs	r27, 7
    d91a:	08 95       	ret
    d91c:	82 1b       	sub	r24, r18
    d91e:	93 0b       	sbc	r25, r19
    d920:	08 95       	ret

0000d922 <__muluhisi3>:
    d922:	0e 94 7b 6c 	call	0xd8f6	; 0xd8f6 <__umulhisi3>
    d926:	a5 9f       	mul	r26, r21
    d928:	90 0d       	add	r25, r0
    d92a:	b4 9f       	mul	r27, r20
    d92c:	90 0d       	add	r25, r0
    d92e:	a4 9f       	mul	r26, r20
    d930:	80 0d       	add	r24, r0
    d932:	91 1d       	adc	r25, r1
    d934:	11 24       	eor	r1, r1
    d936:	08 95       	ret

0000d938 <__mulshisi3>:
    d938:	b7 ff       	sbrs	r27, 7
    d93a:	0c 94 91 6c 	jmp	0xd922	; 0xd922 <__muluhisi3>

0000d93e <__mulohisi3>:
    d93e:	0e 94 91 6c 	call	0xd922	; 0xd922 <__muluhisi3>
    d942:	82 1b       	sub	r24, r18
    d944:	93 0b       	sbc	r25, r19
    d946:	08 95       	ret

0000d948 <__udivmodsi4>:
    d948:	a1 e2       	ldi	r26, 0x21	; 33
    d94a:	1a 2e       	mov	r1, r26
    d94c:	aa 1b       	sub	r26, r26
    d94e:	bb 1b       	sub	r27, r27
    d950:	fd 01       	movw	r30, r26
    d952:	0d c0       	rjmp	.+26     	; 0xd96e <__udivmodsi4_ep>

0000d954 <__udivmodsi4_loop>:
    d954:	aa 1f       	adc	r26, r26
    d956:	bb 1f       	adc	r27, r27
    d958:	ee 1f       	adc	r30, r30
    d95a:	ff 1f       	adc	r31, r31
    d95c:	a2 17       	cp	r26, r18
    d95e:	b3 07       	cpc	r27, r19
    d960:	e4 07       	cpc	r30, r20
    d962:	f5 07       	cpc	r31, r21
    d964:	20 f0       	brcs	.+8      	; 0xd96e <__udivmodsi4_ep>
    d966:	a2 1b       	sub	r26, r18
    d968:	b3 0b       	sbc	r27, r19
    d96a:	e4 0b       	sbc	r30, r20
    d96c:	f5 0b       	sbc	r31, r21

0000d96e <__udivmodsi4_ep>:
    d96e:	66 1f       	adc	r22, r22
    d970:	77 1f       	adc	r23, r23
    d972:	88 1f       	adc	r24, r24
    d974:	99 1f       	adc	r25, r25
    d976:	1a 94       	dec	r1
    d978:	69 f7       	brne	.-38     	; 0xd954 <__udivmodsi4_loop>
    d97a:	60 95       	com	r22
    d97c:	70 95       	com	r23
    d97e:	80 95       	com	r24
    d980:	90 95       	com	r25
    d982:	9b 01       	movw	r18, r22
    d984:	ac 01       	movw	r20, r24
    d986:	bd 01       	movw	r22, r26
    d988:	cf 01       	movw	r24, r30
    d98a:	08 95       	ret

0000d98c <memcpy_P>:
    d98c:	fb 01       	movw	r30, r22
    d98e:	dc 01       	movw	r26, r24
    d990:	02 c0       	rjmp	.+4      	; 0xd996 <memcpy_P+0xa>
    d992:	05 90       	lpm	r0, Z+
    d994:	0d 92       	st	X+, r0
    d996:	41 50       	subi	r20, 0x01	; 1
    d998:	50 40       	sbci	r21, 0x00	; 0
    d99a:	d8 f7       	brcc	.-10     	; 0xd992 <memcpy_P+0x6>
    d99c:	08 95       	ret

0000d99e <memmove>:
    d99e:	68 17       	cp	r22, r24
    d9a0:	79 07       	cpc	r23, r25
    d9a2:	68 f4       	brcc	.+26     	; 0xd9be <memmove+0x20>
    d9a4:	fb 01       	movw	r30, r22
    d9a6:	dc 01       	movw	r26, r24
    d9a8:	e4 0f       	add	r30, r20
    d9aa:	f5 1f       	adc	r31, r21
    d9ac:	a4 0f       	add	r26, r20
    d9ae:	b5 1f       	adc	r27, r21
    d9b0:	02 c0       	rjmp	.+4      	; 0xd9b6 <memmove+0x18>
    d9b2:	02 90       	ld	r0, -Z
    d9b4:	0e 92       	st	-X, r0
    d9b6:	41 50       	subi	r20, 0x01	; 1
    d9b8:	50 40       	sbci	r21, 0x00	; 0
    d9ba:	d8 f7       	brcc	.-10     	; 0xd9b2 <memmove+0x14>
    d9bc:	08 95       	ret
    d9be:	0c 94 2c 6d 	jmp	0xda58	; 0xda58 <memcpy>

0000d9c2 <__itoa_ncheck>:
    d9c2:	bb 27       	eor	r27, r27
    d9c4:	4a 30       	cpi	r20, 0x0A	; 10
    d9c6:	31 f4       	brne	.+12     	; 0xd9d4 <__itoa_ncheck+0x12>
    d9c8:	99 23       	and	r25, r25
    d9ca:	22 f4       	brpl	.+8      	; 0xd9d4 <__itoa_ncheck+0x12>
    d9cc:	bd e2       	ldi	r27, 0x2D	; 45
    d9ce:	90 95       	com	r25
    d9d0:	81 95       	neg	r24
    d9d2:	9f 4f       	sbci	r25, 0xFF	; 255
    d9d4:	0c 94 ed 6c 	jmp	0xd9da	; 0xd9da <__utoa_common>

0000d9d8 <__utoa_ncheck>:
    d9d8:	bb 27       	eor	r27, r27

0000d9da <__utoa_common>:
    d9da:	fb 01       	movw	r30, r22
    d9dc:	55 27       	eor	r21, r21
    d9de:	aa 27       	eor	r26, r26
    d9e0:	88 0f       	add	r24, r24
    d9e2:	99 1f       	adc	r25, r25
    d9e4:	aa 1f       	adc	r26, r26
    d9e6:	a4 17       	cp	r26, r20
    d9e8:	10 f0       	brcs	.+4      	; 0xd9ee <__utoa_common+0x14>
    d9ea:	a4 1b       	sub	r26, r20
    d9ec:	83 95       	inc	r24
    d9ee:	50 51       	subi	r21, 0x10	; 16
    d9f0:	b9 f7       	brne	.-18     	; 0xd9e0 <__utoa_common+0x6>
    d9f2:	a0 5d       	subi	r26, 0xD0	; 208
    d9f4:	aa 33       	cpi	r26, 0x3A	; 58
    d9f6:	08 f0       	brcs	.+2      	; 0xd9fa <__utoa_common+0x20>
    d9f8:	a9 5d       	subi	r26, 0xD9	; 217
    d9fa:	a1 93       	st	Z+, r26
    d9fc:	00 97       	sbiw	r24, 0x00	; 0
    d9fe:	79 f7       	brne	.-34     	; 0xd9de <__utoa_common+0x4>
    da00:	b1 11       	cpse	r27, r1
    da02:	b1 93       	st	Z+, r27
    da04:	11 92       	st	Z+, r1
    da06:	cb 01       	movw	r24, r22
    da08:	0c 94 35 6d 	jmp	0xda6a	; 0xda6a <strrev>

0000da0c <__eerd_block_m644pa>:
    da0c:	dc 01       	movw	r26, r24
    da0e:	cb 01       	movw	r24, r22

0000da10 <__eerd_blraw_m644pa>:
    da10:	fc 01       	movw	r30, r24
    da12:	f9 99       	sbic	0x1f, 1	; 31
    da14:	fe cf       	rjmp	.-4      	; 0xda12 <__eerd_blraw_m644pa+0x2>
    da16:	06 c0       	rjmp	.+12     	; 0xda24 <__eerd_blraw_m644pa+0x14>
    da18:	f2 bd       	out	0x22, r31	; 34
    da1a:	e1 bd       	out	0x21, r30	; 33
    da1c:	f8 9a       	sbi	0x1f, 0	; 31
    da1e:	31 96       	adiw	r30, 0x01	; 1
    da20:	00 b4       	in	r0, 0x20	; 32
    da22:	0d 92       	st	X+, r0
    da24:	41 50       	subi	r20, 0x01	; 1
    da26:	50 40       	sbci	r21, 0x00	; 0
    da28:	b8 f7       	brcc	.-18     	; 0xda18 <__eerd_blraw_m644pa+0x8>
    da2a:	08 95       	ret

0000da2c <__eerd_byte_m644pa>:
    da2c:	f9 99       	sbic	0x1f, 1	; 31
    da2e:	fe cf       	rjmp	.-4      	; 0xda2c <__eerd_byte_m644pa>
    da30:	92 bd       	out	0x22, r25	; 34
    da32:	81 bd       	out	0x21, r24	; 33
    da34:	f8 9a       	sbi	0x1f, 0	; 31
    da36:	99 27       	eor	r25, r25
    da38:	80 b5       	in	r24, 0x20	; 32
    da3a:	08 95       	ret

0000da3c <__eewr_byte_m644pa>:
    da3c:	26 2f       	mov	r18, r22

0000da3e <__eewr_r18_m644pa>:
    da3e:	f9 99       	sbic	0x1f, 1	; 31
    da40:	fe cf       	rjmp	.-4      	; 0xda3e <__eewr_r18_m644pa>
    da42:	1f ba       	out	0x1f, r1	; 31
    da44:	92 bd       	out	0x22, r25	; 34
    da46:	81 bd       	out	0x21, r24	; 33
    da48:	20 bd       	out	0x20, r18	; 32
    da4a:	0f b6       	in	r0, 0x3f	; 63
    da4c:	f8 94       	cli
    da4e:	fa 9a       	sbi	0x1f, 2	; 31
    da50:	f9 9a       	sbi	0x1f, 1	; 31
    da52:	0f be       	out	0x3f, r0	; 63
    da54:	01 96       	adiw	r24, 0x01	; 1
    da56:	08 95       	ret

0000da58 <memcpy>:
    da58:	fb 01       	movw	r30, r22
    da5a:	dc 01       	movw	r26, r24
    da5c:	02 c0       	rjmp	.+4      	; 0xda62 <memcpy+0xa>
    da5e:	01 90       	ld	r0, Z+
    da60:	0d 92       	st	X+, r0
    da62:	41 50       	subi	r20, 0x01	; 1
    da64:	50 40       	sbci	r21, 0x00	; 0
    da66:	d8 f7       	brcc	.-10     	; 0xda5e <memcpy+0x6>
    da68:	08 95       	ret

0000da6a <strrev>:
    da6a:	dc 01       	movw	r26, r24
    da6c:	fc 01       	movw	r30, r24
    da6e:	67 2f       	mov	r22, r23
    da70:	71 91       	ld	r23, Z+
    da72:	77 23       	and	r23, r23
    da74:	e1 f7       	brne	.-8      	; 0xda6e <strrev+0x4>
    da76:	32 97       	sbiw	r30, 0x02	; 2
    da78:	04 c0       	rjmp	.+8      	; 0xda82 <strrev+0x18>
    da7a:	7c 91       	ld	r23, X
    da7c:	6d 93       	st	X+, r22
    da7e:	70 83       	st	Z, r23
    da80:	62 91       	ld	r22, -Z
    da82:	ae 17       	cp	r26, r30
    da84:	bf 07       	cpc	r27, r31
    da86:	c8 f3       	brcs	.-14     	; 0xda7a <strrev+0x10>
    da88:	08 95       	ret

0000da8a <_exit>:
    da8a:	f8 94       	cli

0000da8c <__stop_program>:
    da8c:	ff cf       	rjmp	.-2      	; 0xda8c <__stop_program>
